; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\filesrch.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
PUBLIC	_filesearch
PUBLIC	_opendir
PUBLIC	_readdir
PUBLIC	_closedir
PUBLIC	??_C@_01KICIPPFI@?2@				; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK@				; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__errno:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_strdup:PROC
EXTRN	_stricmp:PROC
EXTRN	__imp__GetFileAttributesA@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	__fullpath:PROC
EXTRN	__stat64i32:PROC
EXTRN	__findclose:PROC
EXTRN	__findfirst64i32:PROC
EXTRN	__findnext64i32:PROC
EXTRN	_checkfilemd5:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_01NBENCBCI@?$CK@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2@
CONST	SEGMENT
??_C@_01KICIPPFI@?2@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0208H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	042cH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\filesrch.c
;	COMDAT _closedir
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_dirp$ = 8						; size = 4
_closedir PROC						; COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 266  :   int rc;
; 267  : 
; 268  :   errno = 0;

  00009	e8 00 00 00 00	 call	 __errno
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 269  :   rc = 0;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0

; 270  : 
; 271  :   if (!dirp)

  0001b	83 7d 08 00	 cmp	 DWORD PTR _dirp$[ebp], 0
  0001f	75 10		 jne	 SHORT $LN2@closedir

; 272  :     {
; 273  :       errno = EFAULT;

  00021	e8 00 00 00 00	 call	 __errno
  00026	c7 00 0e 00 00
	00		 mov	 DWORD PTR [eax], 14	; 0000000eH

; 274  :       return -1;

  0002c	83 c8 ff	 or	 eax, -1
  0002f	eb 30		 jmp	 SHORT $LN1@closedir
$LN2@closedir:

; 275  :     }
; 276  : 
; 277  :   if (dirp->dd_handle != -1)

  00031	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00034	83 b8 34 02 00
	00 ff		 cmp	 DWORD PTR [eax+564], -1
  0003b	74 15		 je	 SHORT $LN3@closedir

; 278  :     {
; 279  :       rc = _findclose (dirp->dd_handle);

  0003d	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00040	8b 88 34 02 00
	00		 mov	 ecx, DWORD PTR [eax+564]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 __findclose
  0004c	83 c4 04	 add	 esp, 4
  0004f	89 45 fc	 mov	 DWORD PTR _rc$[ebp], eax
$LN3@closedir:

; 280  :     }
; 281  : 
; 282  :   /* Delete the dir structure. */
; 283  :   free (dirp);

  00052	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _free
  0005b	83 c4 04	 add	 esp, 4

; 284  : 
; 285  :   return rc;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
$LN1@closedir:

; 286  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_closedir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\filesrch.c
;	COMDAT _readdir
_TEXT	SEGMENT
_winerr$1 = -4						; size = 4
_dirp$ = 8						; size = 4
_readdir PROC						; COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 190  :   errno = 0;

  00009	e8 00 00 00 00	 call	 __errno
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 191  : 
; 192  :   /* Check for valid DIR struct. */
; 193  :   if (!dirp)

  00014	83 7d 08 00	 cmp	 DWORD PTR _dirp$[ebp], 0
  00018	75 12		 jne	 SHORT $LN2@readdir

; 194  :     {
; 195  :       errno = EFAULT;

  0001a	e8 00 00 00 00	 call	 __errno
  0001f	c7 00 0e 00 00
	00		 mov	 DWORD PTR [eax], 14	; 0000000eH

; 196  :       return (struct dirent *) 0;

  00025	33 c0		 xor	 eax, eax
  00027	e9 2e 01 00 00	 jmp	 $LN1@readdir
$LN2@readdir:

; 197  :     }
; 198  : 
; 199  :   if (dirp->dd_stat < 0)

  0002c	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  0002f	83 b8 38 02 00
	00 00		 cmp	 DWORD PTR [eax+568], 0
  00036	7d 0c		 jge	 SHORT $LN3@readdir

; 200  :     {
; 201  :       /* We have already returned all files in the directory
; 202  :        * (or the structure has an invalid dd_stat). */
; 203  :       return (struct dirent *) 0;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 1b 01 00 00	 jmp	 $LN1@readdir

; 204  :     }

  0003f	e9 cc 00 00 00	 jmp	 $LN10@readdir
$LN3@readdir:

; 205  :   else if (dirp->dd_stat == 0)

  00044	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00047	83 b8 38 02 00
	00 00		 cmp	 DWORD PTR [eax+568], 0
  0004e	75 49		 jne	 SHORT $LN5@readdir

; 206  :     {
; 207  :       /* We haven't started the search yet. */
; 208  :       /* Start the search */
; 209  :       dirp->dd_handle = _findfirst (dirp->dd_name, &(dirp->dd_dta));

  00050	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00053	50		 push	 eax
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _dirp$[ebp]
  00057	81 c1 3c 02 00
	00		 add	 ecx, 572		; 0000023cH
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __findfirst64i32
  00063	83 c4 08	 add	 esp, 8
  00066	8b 55 08	 mov	 edx, DWORD PTR _dirp$[ebp]
  00069	89 82 34 02 00
	00		 mov	 DWORD PTR [edx+564], eax

; 210  : 
; 211  : 	  if (dirp->dd_handle == -1)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00072	83 b8 34 02 00
	00 ff		 cmp	 DWORD PTR [eax+564], -1
  00079	75 0f		 jne	 SHORT $LN7@readdir

; 212  : 	{
; 213  : 	  /* Whoops! Seems there are no files in that
; 214  : 	   * directory. */
; 215  : 	  dirp->dd_stat = -1;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  0007e	c7 80 38 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+568], -1

; 216  : 	}

  00088	eb 0d		 jmp	 SHORT $LN8@readdir
$LN7@readdir:

; 217  :       else
; 218  : 	{
; 219  : 	  dirp->dd_stat = 1;

  0008a	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  0008d	c7 80 38 02 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+568], 1
$LN8@readdir:

; 220  : 	}
; 221  :     }

  00097	eb 77		 jmp	 SHORT $LN10@readdir
$LN5@readdir:

; 222  :   else
; 223  :     {
; 224  :       /* Get the next search entry. */
; 225  :       if (_findnext (dirp->dd_handle, &(dirp->dd_dta)))

  00099	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _dirp$[ebp]
  000a0	8b 91 34 02 00
	00		 mov	 edx, DWORD PTR [ecx+564]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 __findnext64i32
  000ac	83 c4 08	 add	 esp, 8
  000af	85 c0		 test	 eax, eax
  000b1	74 48		 je	 SHORT $LN9@readdir

; 226  : 	{
; 227  : 	  /* We are off the end or otherwise error.
; 228  : 	     _findnext sets errno to ENOENT if no more file
; 229  : 	     Undo this. */
; 230  : 	  DWORD winerr = GetLastError();

  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000b9	89 45 fc	 mov	 DWORD PTR _winerr$1[ebp], eax

; 231  : 	  if (winerr == ERROR_NO_MORE_FILES)

  000bc	83 7d fc 12	 cmp	 DWORD PTR _winerr$1[ebp], 18 ; 00000012H
  000c0	75 0b		 jne	 SHORT $LN11@readdir

; 232  : 	    errno = 0;

  000c2	e8 00 00 00 00	 call	 __errno
  000c7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN11@readdir:

; 233  : 	  _findclose (dirp->dd_handle);

  000cd	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  000d0	8b 88 34 02 00
	00		 mov	 ecx, DWORD PTR [eax+564]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 __findclose
  000dc	83 c4 04	 add	 esp, 4

; 234  : 	  dirp->dd_handle = -1;

  000df	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  000e2	c7 80 34 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+564], -1

; 235  : 	  dirp->dd_stat = -1;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  000ef	c7 80 38 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+568], -1

; 236  : 	}

  000f9	eb 15		 jmp	 SHORT $LN10@readdir
$LN9@readdir:

; 237  :       else
; 238  : 	{
; 239  : 	  /* Update the status to indicate the correct
; 240  : 	   * number. */
; 241  : 	  dirp->dd_stat++;

  000fb	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  000fe	8b 88 38 02 00
	00		 mov	 ecx, DWORD PTR [eax+568]
  00104	83 c1 01	 add	 ecx, 1
  00107	8b 55 08	 mov	 edx, DWORD PTR _dirp$[ebp]
  0010a	89 8a 38 02 00
	00		 mov	 DWORD PTR [edx+568], ecx
$LN10@readdir:

; 242  : 	}
; 243  :     }
; 244  : 
; 245  :   if (dirp->dd_stat > 0)

  00110	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00113	83 b8 38 02 00
	00 00		 cmp	 DWORD PTR [eax+568], 0
  0011a	7e 3c		 jle	 SHORT $LN12@readdir

; 246  :     {
; 247  :       /* Successfully got an entry. Everything about the file is
; 248  :        * already appropriately filled in except the length of the
; 249  :        * file name. */
; 250  :       dirp->dd_dir.d_namlen = (unsigned short)strlen (dirp->dd_dta.name);

  0011c	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  0011f	83 c0 24	 add	 eax, 36			; 00000024H
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 _strlen
  00128	83 c4 04	 add	 esp, 4
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _dirp$[ebp]
  0012e	66 89 81 2e 01
	00 00		 mov	 WORD PTR [ecx+302], ax

; 251  :       strcpy (dirp->dd_dir.d_name, dirp->dd_dta.name);

  00135	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00138	83 c0 24	 add	 eax, 36			; 00000024H
  0013b	50		 push	 eax
  0013c	8b 4d 08	 mov	 ecx, DWORD PTR _dirp$[ebp]
  0013f	81 c1 30 01 00
	00		 add	 ecx, 304		; 00000130H
  00145	51		 push	 ecx
  00146	e8 00 00 00 00	 call	 _strcpy
  0014b	83 c4 08	 add	 esp, 8

; 252  :       return &dirp->dd_dir;

  0014e	8b 45 08	 mov	 eax, DWORD PTR _dirp$[ebp]
  00151	05 28 01 00 00	 add	 eax, 296		; 00000128H
  00156	eb 02		 jmp	 SHORT $LN1@readdir
$LN12@readdir:

; 253  :     }
; 254  : 
; 255  :   return (struct dirent *) 0;

  00158	33 c0		 xor	 eax, eax
$LN1@readdir:

; 256  : }

  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c3		 ret	 0
_readdir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\filesrch.c
;	COMDAT _opendir
_TEXT	SEGMENT
_szFullPath$ = -272					; size = 260
_rc$ = -12						; size = 4
_nd$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_szPath$ = 8						; size = 4
_opendir PROC						; COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 101  :   DIR *nd;
; 102  :   DWORD rc;
; 103  :   CHAR szFullPath[MAX_PATH];
; 104  : 
; 105  :   errno = 0;

  00016	e8 00 00 00 00	 call	 __errno
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 106  : 
; 107  :   if (!szPath)

  00021	83 7d 08 00	 cmp	 DWORD PTR _szPath$[ebp], 0
  00025	75 12		 jne	 SHORT $LN2@opendir

; 108  :     {
; 109  :       errno = EFAULT;

  00027	e8 00 00 00 00	 call	 __errno
  0002c	c7 00 0e 00 00
	00		 mov	 DWORD PTR [eax], 14	; 0000000eH

; 110  :       return (DIR *) 0;

  00032	33 c0		 xor	 eax, eax
  00034	e9 cc 01 00 00	 jmp	 $LN1@opendir
$LN2@opendir:

; 111  :     }
; 112  : 
; 113  :   if (szPath[0] == '\0')

  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 55 08	 mov	 edx, DWORD PTR _szPath$[ebp]
  00044	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00048	85 c0		 test	 eax, eax
  0004a	75 12		 jne	 SHORT $LN3@opendir

; 114  :     {
; 115  :       errno = ENOTDIR;

  0004c	e8 00 00 00 00	 call	 __errno
  00051	c7 00 14 00 00
	00		 mov	 DWORD PTR [eax], 20	; 00000014H

; 116  :       return (DIR *) 0;

  00057	33 c0		 xor	 eax, eax
  00059	e9 a7 01 00 00	 jmp	 $LN1@opendir
$LN3@opendir:

; 117  :     }
; 118  : 
; 119  :   /* Attempt to determine if the given path really is a directory. */
; 120  :   rc = GetFileAttributesA(szPath);

  0005e	8b 45 08	 mov	 eax, DWORD PTR _szPath$[ebp]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesA@4
  00068	89 45 f4	 mov	 DWORD PTR _rc$[ebp], eax

; 121  :   if (rc == INVALID_FILE_ATTRIBUTES)

  0006b	83 7d f4 ff	 cmp	 DWORD PTR _rc$[ebp], -1
  0006f	75 12		 jne	 SHORT $LN4@opendir

; 122  :     {
; 123  :       /* call GetLastError for more error info */
; 124  :       errno = ENOENT;

  00071	e8 00 00 00 00	 call	 __errno
  00076	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 125  :       return (DIR *) 0;

  0007c	33 c0		 xor	 eax, eax
  0007e	e9 82 01 00 00	 jmp	 $LN1@opendir
$LN4@opendir:

; 126  :     }
; 127  :   if (!(rc & FILE_ATTRIBUTE_DIRECTORY))

  00083	8b 45 f4	 mov	 eax, DWORD PTR _rc$[ebp]
  00086	83 e0 10	 and	 eax, 16			; 00000010H
  00089	75 12		 jne	 SHORT $LN5@opendir

; 128  :     {
; 129  :       /* Error, entry exists but not a directory. */
; 130  :       errno = ENOTDIR;

  0008b	e8 00 00 00 00	 call	 __errno
  00090	c7 00 14 00 00
	00		 mov	 DWORD PTR [eax], 20	; 00000014H

; 131  :       return (DIR *) 0;

  00096	33 c0		 xor	 eax, eax
  00098	e9 68 01 00 00	 jmp	 $LN1@opendir
$LN5@opendir:

; 132  :     }
; 133  : 
; 134  :   /* Make an absolute pathname.  */
; 135  :   _fullpath (szFullPath, szPath, MAX_PATH);

  0009d	68 04 01 00 00	 push	 260			; 00000104H
  000a2	8b 45 08	 mov	 eax, DWORD PTR _szPath$[ebp]
  000a5	50		 push	 eax
  000a6	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szFullPath$[ebp]
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 __fullpath
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 136  : 
; 137  :   /* Allocate enough space to store DIR structure and the complete
; 138  :    * directory path given. */
; 139  :   nd = (DIR *) malloc (sizeof (DIR) + (strlen(szFullPath) + strlen (SLASH) +

  000b5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szFullPath$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _strlen
  000c1	83 c4 04	 add	 esp, 4
  000c4	8b f0		 mov	 esi, eax
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2@
  000cb	e8 00 00 00 00	 call	 _strlen
  000d0	83 c4 04	 add	 esp, 4
  000d3	03 f0		 add	 esi, eax
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_01NBENCBCI@?$CK@
  000da	e8 00 00 00 00	 call	 _strlen
  000df	83 c4 04	 add	 esp, 4
  000e2	8d 8c 06 41 02
	00 00		 lea	 ecx, DWORD PTR [esi+eax+577]
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 _malloc
  000ef	83 c4 04	 add	 esp, 4
  000f2	89 45 f8	 mov	 DWORD PTR _nd$[ebp], eax

; 140  : 			 strlen(SUFFIX) + 1) * sizeof (CHAR));
; 141  : 
; 142  :   if (!nd)

  000f5	83 7d f8 00	 cmp	 DWORD PTR _nd$[ebp], 0
  000f9	75 12		 jne	 SHORT $LN6@opendir

; 143  :     {
; 144  :       /* Error, out of memory. */
; 145  :       errno = ENOMEM;

  000fb	e8 00 00 00 00	 call	 __errno
  00100	c7 00 0c 00 00
	00		 mov	 DWORD PTR [eax], 12	; 0000000cH

; 146  :       return (DIR *) 0;

  00106	33 c0		 xor	 eax, eax
  00108	e9 f8 00 00 00	 jmp	 $LN1@opendir
$LN6@opendir:

; 147  :     }
; 148  : 
; 149  :   /* Create the search expression. */
; 150  :   strcpy (nd->dd_name, szFullPath);

  0010d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szFullPath$[ebp]
  00113	50		 push	 eax
  00114	8b 4d f8	 mov	 ecx, DWORD PTR _nd$[ebp]
  00117	81 c1 3c 02 00
	00		 add	 ecx, 572		; 0000023cH
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 _strcpy
  00123	83 c4 08	 add	 esp, 8

; 151  : 
; 152  :   /* Add on a slash if the path does not end with one. */
; 153  :   if (nd->dd_name[0] != '\0' &&
; 154  :       nd->dd_name[strlen (nd->dd_name) - 1] != '/' &&

  00126	b8 01 00 00 00	 mov	 eax, 1
  0012b	6b c8 00	 imul	 ecx, eax, 0
  0012e	8b 55 f8	 mov	 edx, DWORD PTR _nd$[ebp]
  00131	0f be 84 0a 3c
	02 00 00	 movsx	 eax, BYTE PTR [edx+ecx+572]
  00139	85 c0		 test	 eax, eax
  0013b	74 58		 je	 SHORT $LN7@opendir
  0013d	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
  00140	05 3c 02 00 00	 add	 eax, 572		; 0000023cH
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 _strlen
  0014b	83 c4 04	 add	 esp, 4
  0014e	8b 4d f8	 mov	 ecx, DWORD PTR _nd$[ebp]
  00151	0f be 94 01 3b
	02 00 00	 movsx	 edx, BYTE PTR [ecx+eax+571]
  00159	83 fa 2f	 cmp	 edx, 47			; 0000002fH
  0015c	74 37		 je	 SHORT $LN7@opendir
  0015e	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
  00161	05 3c 02 00 00	 add	 eax, 572		; 0000023cH
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 _strlen
  0016c	83 c4 04	 add	 esp, 4
  0016f	8b 4d f8	 mov	 ecx, DWORD PTR _nd$[ebp]
  00172	0f be 94 01 3b
	02 00 00	 movsx	 edx, BYTE PTR [ecx+eax+571]
  0017a	83 fa 5c	 cmp	 edx, 92			; 0000005cH
  0017d	74 16		 je	 SHORT $LN7@opendir

; 155  :       nd->dd_name[strlen (nd->dd_name) - 1] != '\\')
; 156  :     {
; 157  :       strcat (nd->dd_name, SLASH);

  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2@
  00184	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
  00187	05 3c 02 00 00	 add	 eax, 572		; 0000023cH
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 _strcat
  00192	83 c4 08	 add	 esp, 8
$LN7@opendir:

; 158  :     }
; 159  : 
; 160  :   /* Add on the search pattern */
; 161  :   strcat (nd->dd_name, SUFFIX);

  00195	68 00 00 00 00	 push	 OFFSET ??_C@_01NBENCBCI@?$CK@
  0019a	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
  0019d	05 3c 02 00 00	 add	 eax, 572		; 0000023cH
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _strcat
  001a8	83 c4 08	 add	 esp, 8

; 162  : 
; 163  :   /* Initialize handle to -1 so that a premature closedir doesn't try
; 164  :    * to call _findclose on it. */
; 165  :   nd->dd_handle = -1;

  001ab	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
  001ae	c7 80 34 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+564], -1

; 166  : 
; 167  :   /* Initialize the status. */
; 168  :   nd->dd_stat = 0;

  001b8	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
  001bb	c7 80 38 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+568], 0

; 169  : 
; 170  :   /* Initialize the dirent structure. ino and reclen are invalid under
; 171  :    * Win32, and name simply points at the appropriate part of the
; 172  :    * findfirst_t structure. */
; 173  :   nd->dd_dir.d_ino = 0;

  001c5	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
  001c8	c7 80 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+296], 0

; 174  :   nd->dd_dir.d_reclen = 0;

  001d2	33 c0		 xor	 eax, eax
  001d4	8b 4d f8	 mov	 ecx, DWORD PTR _nd$[ebp]
  001d7	66 89 81 2c 01
	00 00		 mov	 WORD PTR [ecx+300], ax

; 175  :   nd->dd_dir.d_namlen = 0;

  001de	33 c0		 xor	 eax, eax
  001e0	8b 4d f8	 mov	 ecx, DWORD PTR _nd$[ebp]
  001e3	66 89 81 2e 01
	00 00		 mov	 WORD PTR [ecx+302], ax

; 176  :   ZeroMemory(nd->dd_dir.d_name, FILENAME_MAX);

  001ea	68 04 01 00 00	 push	 260			; 00000104H
  001ef	6a 00		 push	 0
  001f1	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
  001f4	05 30 01 00 00	 add	 eax, 304		; 00000130H
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 _memset
  001ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 177  : 
; 178  :   return nd;

  00202	8b 45 f8	 mov	 eax, DWORD PTR _nd$[ebp]
$LN1@opendir:

; 179  : }

  00205	5f		 pop	 edi
  00206	5e		 pop	 esi
  00207	5b		 pop	 ebx
  00208	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020b	33 cd		 xor	 ecx, ebp
  0020d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00212	8b e5		 mov	 esp, ebp
  00214	5d		 pop	 ebp
  00215	c3		 ret	 0
_opendir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\filesrch.c
;	COMDAT _filesearch
_TEXT	SEGMENT
tv168 = -1312						; size = 4
tv235 = -1312						; size = 4
tv248 = -1312						; size = 4
$T1 = -1308						; size = 4
$T2 = -1304						; size = 4
$T3 = -1300						; size = 4
_searchpathindex$ = -1104				; size = 4
_searchpath$ = -1100					; size = 1024
_depthleft$ = -76					; size = 4
_searchname$ = -72					; size = 4
_found$ = -68						; size = 4
_fsstat$ = -64						; size = 48
_dent$ = -16						; size = 4
_dirhandle$ = -12					; size = 4
_retval$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_startpath$ = 12					; size = 4
_wantedmd5sum$ = 16					; size = 4
_completepath$ = 20					; size = 4
_maxsearchdepth$ = 24					; size = 4
_filesearch PROC					; COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 05 00
	00		 sub	 esp, 1312		; 00000520H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 352  : 	filestatus_t retval = FS_NOTFOUND;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0

; 353  : 	DIR **dirhandle;
; 354  : 	struct dirent *dent;
; 355  : 	struct stat fsstat;
; 356  : 	int found = 0;

  0001d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _found$[ebp], 0

; 357  : 	char *searchname = strdup(filename);

  00024	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _strdup
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 b8	 mov	 DWORD PTR _searchname$[ebp], eax

; 358  : 	int depthleft = maxsearchdepth;

  00033	8b 45 18	 mov	 eax, DWORD PTR _maxsearchdepth$[ebp]
  00036	89 45 b4	 mov	 DWORD PTR _depthleft$[ebp], eax

; 359  : 	char searchpath[1024];
; 360  : 	size_t *searchpathindex;
; 361  : 
; 362  : 	dirhandle = (DIR**) malloc(maxsearchdepth * sizeof (DIR*));

  00039	8b 45 18	 mov	 eax, DWORD PTR _maxsearchdepth$[ebp]
  0003c	c1 e0 02	 shl	 eax, 2
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _malloc
  00045	83 c4 04	 add	 esp, 4
  00048	89 45 f4	 mov	 DWORD PTR _dirhandle$[ebp], eax

; 363  : 	searchpathindex = (size_t *) malloc(maxsearchdepth * sizeof (size_t));

  0004b	8b 45 18	 mov	 eax, DWORD PTR _maxsearchdepth$[ebp]
  0004e	c1 e0 02	 shl	 eax, 2
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _malloc
  00057	83 c4 04	 add	 esp, 4
  0005a	89 85 b0 fb ff
	ff		 mov	 DWORD PTR _searchpathindex$[ebp], eax

; 364  : 
; 365  : 	strcpy(searchpath,startpath);

  00060	8b 45 0c	 mov	 eax, DWORD PTR _startpath$[ebp]
  00063	50		 push	 eax
  00064	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR _searchpath$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 _strcpy
  00070	83 c4 08	 add	 esp, 8

; 366  : 	searchpathindex[--depthleft] = strlen(searchpath) + 1;

  00073	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  00076	83 e8 01	 sub	 eax, 1
  00079	89 45 b4	 mov	 DWORD PTR _depthleft$[ebp], eax
  0007c	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR _searchpath$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _strlen
  00088	83 c4 04	 add	 esp, 4
  0008b	83 c0 01	 add	 eax, 1
  0008e	8b 55 b4	 mov	 edx, DWORD PTR _depthleft$[ebp]
  00091	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  00097	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 367  : 
; 368  : 	dirhandle[depthleft] = opendir(searchpath);

  0009a	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _searchpath$[ebp]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 _opendir
  000a6	83 c4 04	 add	 esp, 4
  000a9	8b 4d b4	 mov	 ecx, DWORD PTR _depthleft$[ebp]
  000ac	8b 55 f4	 mov	 edx, DWORD PTR _dirhandle$[ebp]
  000af	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 369  : 
; 370  : 	if (searchpath[searchpathindex[depthleft]-2] != '/')

  000b2	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  000b5	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  000bb	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000be	0f be 84 15 b2
	fb ff ff	 movsx	 eax, BYTE PTR _searchpath$[ebp+edx-2]
  000c6	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  000c9	74 4a		 je	 SHORT $LN9@filesearch

; 371  : 	{
; 372  : 		searchpath[searchpathindex[depthleft]-1] = '/';

  000cb	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  000ce	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  000d4	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000d7	c6 84 15 b3 fb
	ff ff 2f	 mov	 BYTE PTR _searchpath$[ebp+edx-1], 47 ; 0000002fH

; 373  : 		searchpath[searchpathindex[depthleft]] = 0;

  000df	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  000e2	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  000e8	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000eb	89 95 ec fa ff
	ff		 mov	 DWORD PTR $T3[ebp], edx
  000f1	81 bd ec fa ff
	ff 00 04 00 00	 cmp	 DWORD PTR $T3[ebp], 1024 ; 00000400H
  000fb	73 02		 jae	 SHORT $LN29@filesearch
  000fd	eb 06		 jmp	 SHORT $LN30@filesearch
$LN29@filesearch:
  000ff	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00104	90		 npad	 1
$LN30@filesearch:
  00105	8b 85 ec fa ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  0010b	c6 84 05 b4 fb
	ff ff 00	 mov	 BYTE PTR _searchpath$[ebp+eax], 0

; 374  : 	}

  00113	eb 1b		 jmp	 SHORT $LN10@filesearch
$LN9@filesearch:

; 375  : 	else
; 376  : 		searchpathindex[depthleft]--;

  00115	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  00118	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  0011e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00121	83 ea 01	 sub	 edx, 1
  00124	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  00127	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  0012d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN10@filesearch:

; 377  : 
; 378  : 	while ((!found) && (depthleft < maxsearchdepth))

  00130	83 7d bc 00	 cmp	 DWORD PTR _found$[ebp], 0
  00134	0f 85 92 02 00
	00		 jne	 $LN3@filesearch
  0013a	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  0013d	3b 45 18	 cmp	 eax, DWORD PTR _maxsearchdepth$[ebp]
  00140	0f 8d 86 02 00
	00		 jge	 $LN3@filesearch

; 379  : 	{
; 380  : 		searchpath[searchpathindex[depthleft]]=0;

  00146	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  00149	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  0014f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00152	89 95 e8 fa ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00158	81 bd e8 fa ff
	ff 00 04 00 00	 cmp	 DWORD PTR $T2[ebp], 1024 ; 00000400H
  00162	73 02		 jae	 SHORT $LN31@filesearch
  00164	eb 06		 jmp	 SHORT $LN32@filesearch
$LN31@filesearch:
  00166	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0016b	90		 npad	 1
$LN32@filesearch:
  0016c	8b 85 e8 fa ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00172	c6 84 05 b4 fb
	ff ff 00	 mov	 BYTE PTR _searchpath$[ebp+eax], 0

; 381  : 		dent = readdir(dirhandle[depthleft]);

  0017a	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  0017d	8b 4d f4	 mov	 ecx, DWORD PTR _dirhandle$[ebp]
  00180	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00183	52		 push	 edx
  00184	e8 00 00 00 00	 call	 _readdir
  00189	83 c4 04	 add	 esp, 4
  0018c	89 45 f0	 mov	 DWORD PTR _dent$[ebp], eax

; 382  : 		if (dent)

  0018f	83 7d f0 00	 cmp	 DWORD PTR _dent$[ebp], 0
  00193	74 23		 je	 SHORT $LN11@filesearch

; 383  : 			strcpy(&searchpath[searchpathindex[depthleft]],dent->d_name);

  00195	8b 45 f0	 mov	 eax, DWORD PTR _dent$[ebp]
  00198	83 c0 08	 add	 eax, 8
  0019b	50		 push	 eax
  0019c	8b 4d b4	 mov	 ecx, DWORD PTR _depthleft$[ebp]
  0019f	8b 95 b0 fb ff
	ff		 mov	 edx, DWORD PTR _searchpathindex$[ebp]
  001a5	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001a8	8d 8c 05 b4 fb
	ff ff		 lea	 ecx, DWORD PTR _searchpath$[ebp+eax]
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 _strcpy
  001b5	83 c4 08	 add	 esp, 8
$LN11@filesearch:

; 384  : 
; 385  : 		if (!dent)

  001b8	83 7d f0 00	 cmp	 DWORD PTR _dent$[ebp], 0
  001bc	75 2c		 jne	 SHORT $LN12@filesearch

; 386  : 			closedir(dirhandle[depthleft++]);

  001be	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  001c1	8b 4d f4	 mov	 ecx, DWORD PTR _dirhandle$[ebp]
  001c4	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  001c7	89 95 e0 fa ff
	ff		 mov	 DWORD PTR tv168[ebp], edx
  001cd	8b 85 e0 fa ff
	ff		 mov	 eax, DWORD PTR tv168[ebp]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 _closedir
  001d9	83 c4 04	 add	 esp, 4
  001dc	8b 4d b4	 mov	 ecx, DWORD PTR _depthleft$[ebp]
  001df	83 c1 01	 add	 ecx, 1
  001e2	89 4d b4	 mov	 DWORD PTR _depthleft$[ebp], ecx
  001e5	e9 dd 01 00 00	 jmp	 $LN4@filesearch
$LN12@filesearch:

; 387  : 		else if (dent->d_name[0]=='.' &&

  001ea	b8 01 00 00 00	 mov	 eax, 1
  001ef	6b c8 00	 imul	 ecx, eax, 0
  001f2	8b 55 f0	 mov	 edx, DWORD PTR _dent$[ebp]
  001f5	0f be 44 0a 08	 movsx	 eax, BYTE PTR [edx+ecx+8]
  001fa	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  001fd	75 41		 jne	 SHORT $LN14@filesearch
  001ff	b8 01 00 00 00	 mov	 eax, 1
  00204	c1 e0 00	 shl	 eax, 0
  00207	8b 4d f0	 mov	 ecx, DWORD PTR _dent$[ebp]
  0020a	0f be 54 01 08	 movsx	 edx, BYTE PTR [ecx+eax+8]
  0020f	85 d2		 test	 edx, edx
  00211	74 28		 je	 SHORT $LN16@filesearch
  00213	b8 01 00 00 00	 mov	 eax, 1
  00218	c1 e0 00	 shl	 eax, 0
  0021b	8b 4d f0	 mov	 ecx, DWORD PTR _dent$[ebp]
  0021e	0f be 54 01 08	 movsx	 edx, BYTE PTR [ecx+eax+8]
  00223	83 fa 2e	 cmp	 edx, 46			; 0000002eH
  00226	75 18		 jne	 SHORT $LN14@filesearch
  00228	b8 01 00 00 00	 mov	 eax, 1
  0022d	d1 e0		 shl	 eax, 1
  0022f	8b 4d f0	 mov	 ecx, DWORD PTR _dent$[ebp]
  00232	0f be 54 01 08	 movsx	 edx, BYTE PTR [ecx+eax+8]
  00237	85 d2		 test	 edx, edx
  00239	75 05		 jne	 SHORT $LN14@filesearch
$LN16@filesearch:

; 388  : 				(dent->d_name[1]=='\0' ||
; 389  : 					(dent->d_name[1]=='.' &&
; 390  : 						dent->d_name[2]=='\0')))
; 391  : 		{
; 392  : 			// we don't want to scan uptree
; 393  : 		}

  0023b	e9 87 01 00 00	 jmp	 $LN4@filesearch
$LN14@filesearch:

; 394  : 		else if (stat(searchpath,&fsstat) < 0) // do we want to follow symlinks? if not: change it to lstat

  00240	8d 45 c0	 lea	 eax, DWORD PTR _fsstat$[ebp]
  00243	50		 push	 eax
  00244	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR _searchpath$[ebp]
  0024a	51		 push	 ecx
  0024b	e8 00 00 00 00	 call	 _stat
  00250	83 c4 08	 add	 esp, 8
  00253	85 c0		 test	 eax, eax
  00255	7d 05		 jge	 SHORT $LN17@filesearch

; 395  : 		{
; 396  : 			// was the file (re)moved? can't stat it
; 397  : 		}

  00257	e9 6b 01 00 00	 jmp	 $LN4@filesearch
$LN17@filesearch:

; 398  : 		else if (S_ISDIR(fsstat.st_mode) && depthleft)

  0025c	0f b7 45 c6	 movzx	 eax, WORD PTR _fsstat$[ebp+6]
  00260	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00265	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0026a	0f 85 ce 00 00
	00		 jne	 $LN19@filesearch
  00270	83 7d b4 00	 cmp	 DWORD PTR _depthleft$[ebp], 0
  00274	0f 84 c4 00 00
	00		 je	 $LN19@filesearch

; 399  : 		{
; 400  : 			strcpy(&searchpath[searchpathindex[depthleft]],dent->d_name);

  0027a	8b 45 f0	 mov	 eax, DWORD PTR _dent$[ebp]
  0027d	83 c0 08	 add	 eax, 8
  00280	50		 push	 eax
  00281	8b 4d b4	 mov	 ecx, DWORD PTR _depthleft$[ebp]
  00284	8b 95 b0 fb ff
	ff		 mov	 edx, DWORD PTR _searchpathindex$[ebp]
  0028a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0028d	8d 8c 05 b4 fb
	ff ff		 lea	 ecx, DWORD PTR _searchpath$[ebp+eax]
  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 _strcpy
  0029a	83 c4 08	 add	 esp, 8

; 401  : 			searchpathindex[--depthleft] = strlen(searchpath) + 1;

  0029d	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  002a0	83 e8 01	 sub	 eax, 1
  002a3	89 45 b4	 mov	 DWORD PTR _depthleft$[ebp], eax
  002a6	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR _searchpath$[ebp]
  002ac	51		 push	 ecx
  002ad	e8 00 00 00 00	 call	 _strlen
  002b2	83 c4 04	 add	 esp, 4
  002b5	83 c0 01	 add	 eax, 1
  002b8	8b 55 b4	 mov	 edx, DWORD PTR _depthleft$[ebp]
  002bb	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  002c1	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 402  : 			dirhandle[depthleft] = opendir(searchpath);

  002c4	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _searchpath$[ebp]
  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 _opendir
  002d0	83 c4 04	 add	 esp, 4
  002d3	8b 4d b4	 mov	 ecx, DWORD PTR _depthleft$[ebp]
  002d6	8b 55 f4	 mov	 edx, DWORD PTR _dirhandle$[ebp]
  002d9	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 403  : 			if (!dirhandle[depthleft])

  002dc	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  002df	8b 4d f4	 mov	 ecx, DWORD PTR _dirhandle$[ebp]
  002e2	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  002e6	75 09		 jne	 SHORT $LN21@filesearch

; 404  : 			{
; 405  : 					// can't open it... maybe no read-permissions
; 406  : 					// go back to previous dir
; 407  : 					depthleft++;

  002e8	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  002eb	83 c0 01	 add	 eax, 1
  002ee	89 45 b4	 mov	 DWORD PTR _depthleft$[ebp], eax
$LN21@filesearch:

; 408  : 			}
; 409  : 
; 410  : 			searchpath[searchpathindex[depthleft]-1]='/';

  002f1	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  002f4	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  002fa	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  002fd	c6 84 15 b3 fb
	ff ff 2f	 mov	 BYTE PTR _searchpath$[ebp+edx-1], 47 ; 0000002fH

; 411  : 			searchpath[searchpathindex[depthleft]]=0;

  00305	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  00308	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _searchpathindex$[ebp]
  0030e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00311	89 95 e4 fa ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00317	81 bd e4 fa ff
	ff 00 04 00 00	 cmp	 DWORD PTR $T1[ebp], 1024 ; 00000400H
  00321	73 02		 jae	 SHORT $LN33@filesearch
  00323	eb 06		 jmp	 SHORT $LN34@filesearch
$LN33@filesearch:
  00325	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0032a	90		 npad	 1
$LN34@filesearch:
  0032b	8b 85 e4 fa ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00331	c6 84 05 b4 fb
	ff ff 00	 mov	 BYTE PTR _searchpath$[ebp+eax], 0

; 412  : 		}

  00339	e9 89 00 00 00	 jmp	 $LN4@filesearch
$LN19@filesearch:

; 413  : 		else if (!strcasecmp(searchname, dent->d_name))

  0033e	8b 45 f0	 mov	 eax, DWORD PTR _dent$[ebp]
  00341	83 c0 08	 add	 eax, 8
  00344	50		 push	 eax
  00345	8b 4d b8	 mov	 ecx, DWORD PTR _searchname$[ebp]
  00348	51		 push	 ecx
  00349	e8 00 00 00 00	 call	 _stricmp
  0034e	83 c4 08	 add	 esp, 8
  00351	85 c0		 test	 eax, eax
  00353	75 72		 jne	 SHORT $LN4@filesearch

; 414  : 		{
; 415  : 			switch (checkfilemd5(searchpath, wantedmd5sum))

  00355	8b 45 10	 mov	 eax, DWORD PTR _wantedmd5sum$[ebp]
  00358	50		 push	 eax
  00359	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR _searchpath$[ebp]
  0035f	51		 push	 ecx
  00360	e8 00 00 00 00	 call	 _checkfilemd5
  00365	83 c4 08	 add	 esp, 8
  00368	89 85 e0 fa ff
	ff		 mov	 DWORD PTR tv235[ebp], eax
  0036e	83 bd e0 fa ff
	ff 01		 cmp	 DWORD PTR tv235[ebp], 1
  00375	74 0b		 je	 SHORT $LN23@filesearch
  00377	83 bd e0 fa ff
	ff 05		 cmp	 DWORD PTR tv235[ebp], 5
  0037e	74 40		 je	 SHORT $LN26@filesearch
  00380	eb 45		 jmp	 SHORT $LN27@filesearch
$LN23@filesearch:

; 416  : 			{
; 417  : 				case FS_FOUND:
; 418  : 					if (completepath)

  00382	83 7d 14 00	 cmp	 DWORD PTR _completepath$[ebp], 0
  00386	74 15		 je	 SHORT $LN24@filesearch

; 419  : 						strcpy(filename,searchpath);

  00388	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _searchpath$[ebp]
  0038e	50		 push	 eax
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  00392	51		 push	 ecx
  00393	e8 00 00 00 00	 call	 _strcpy
  00398	83 c4 08	 add	 esp, 8
  0039b	eb 13		 jmp	 SHORT $LN25@filesearch
$LN24@filesearch:

; 420  : 					else
; 421  : 						strcpy(filename,dent->d_name);

  0039d	8b 45 f0	 mov	 eax, DWORD PTR _dent$[ebp]
  003a0	83 c0 08	 add	 eax, 8
  003a3	50		 push	 eax
  003a4	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  003a7	51		 push	 ecx
  003a8	e8 00 00 00 00	 call	 _strcpy
  003ad	83 c4 08	 add	 esp, 8
$LN25@filesearch:

; 422  : 					retval = FS_FOUND;

  003b0	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 1

; 423  : 					found = 1;

  003b7	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 424  : 					break;

  003be	eb 07		 jmp	 SHORT $LN4@filesearch
$LN26@filesearch:

; 425  : 				case FS_MD5SUMBAD:
; 426  : 					retval = FS_MD5SUMBAD;

  003c0	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 5
$LN27@filesearch:
$LN4@filesearch:

; 427  : 					break;
; 428  : 				default: // prevent some compiler warnings
; 429  : 					break;
; 430  : 			}
; 431  : 		}
; 432  : 	}

  003c7	e9 64 fd ff ff	 jmp	 $LN10@filesearch
$LN3@filesearch:

; 433  : 
; 434  : 	for (; depthleft < maxsearchdepth; closedir(dirhandle[depthleft++]));

  003cc	eb 27		 jmp	 SHORT $LN8@filesearch
$LN6@filesearch:
  003ce	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  003d1	8b 4d f4	 mov	 ecx, DWORD PTR _dirhandle$[ebp]
  003d4	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  003d7	89 95 e0 fa ff
	ff		 mov	 DWORD PTR tv248[ebp], edx
  003dd	8b 85 e0 fa ff
	ff		 mov	 eax, DWORD PTR tv248[ebp]
  003e3	50		 push	 eax
  003e4	e8 00 00 00 00	 call	 _closedir
  003e9	83 c4 04	 add	 esp, 4
  003ec	8b 4d b4	 mov	 ecx, DWORD PTR _depthleft$[ebp]
  003ef	83 c1 01	 add	 ecx, 1
  003f2	89 4d b4	 mov	 DWORD PTR _depthleft$[ebp], ecx
$LN8@filesearch:
  003f5	8b 45 b4	 mov	 eax, DWORD PTR _depthleft$[ebp]
  003f8	3b 45 18	 cmp	 eax, DWORD PTR _maxsearchdepth$[ebp]
  003fb	7d 02		 jge	 SHORT $LN7@filesearch
  003fd	eb cf		 jmp	 SHORT $LN6@filesearch
$LN7@filesearch:

; 435  : 
; 436  : 	free(searchname);

  003ff	8b 45 b8	 mov	 eax, DWORD PTR _searchname$[ebp]
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 _free
  00408	83 c4 04	 add	 esp, 4

; 437  : 	free(searchpathindex);

  0040b	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _searchpathindex$[ebp]
  00411	50		 push	 eax
  00412	e8 00 00 00 00	 call	 _free
  00417	83 c4 04	 add	 esp, 4

; 438  : 	free(dirhandle);

  0041a	8b 45 f4	 mov	 eax, DWORD PTR _dirhandle$[ebp]
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 _free
  00423	83 c4 04	 add	 esp, 4

; 439  : 	return retval;

  00426	8b 45 f8	 mov	 eax, DWORD PTR _retval$[ebp]
$LN1@filesearch:

; 440  : }

  00429	5f		 pop	 edi
  0042a	5e		 pop	 esi
  0042b	5b		 pop	 ebx
  0042c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0042f	33 cd		 xor	 ecx, ebp
  00431	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00436	8b e5		 mov	 esp, ebp
  00438	5d		 pop	 ebp
  00439	c3		 ret	 0
_filesearch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\sys\stat.h
;	COMDAT _stat
_TEXT	SEGMENT
__FileName$ = 8						; size = 4
__Stat$ = 12						; size = 4
_stat	PROC						; COMDAT

; 239  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 240  :             _STATIC_ASSERT(sizeof(struct stat) == sizeof(struct _stat64i32));
; 241  :             return _stat64i32(_FileName, (struct _stat64i32*)_Stat);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Stat$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __FileName$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 __stat64i32
  00016	83 c4 08	 add	 esp, 8

; 242  :         }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_stat	ENDP
_TEXT	ENDS
END
