; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\p_lights.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
PUBLIC	_T_FireFlicker
PUBLIC	_P_SpawnAdjustableFireFlicker
PUBLIC	_T_LightningFlash
PUBLIC	_T_StrobeFlash
PUBLIC	_P_SpawnLightningFlash
PUBLIC	_P_SpawnAdjustableStrobeFlash
PUBLIC	_T_Glow
PUBLIC	_P_SpawnAdjustableGlowingLight
PUBLIC	_P_FadeLight
PUBLIC	_T_LightFade
EXTRN	_P_AddThinker:PROC
EXTRN	_P_RemoveThinker:PROC
EXTRN	_P_FreezeObjectplace:PROC
EXTRN	_P_FindSectorFromTag:PROC
EXTRN	_Z_CallocAlign:PROC
EXTRN	_P_Random:PROC
EXTRN	_sectors:DWORD
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _P_RemoveLighting
_TEXT	SEGMENT
_sector$ = 8						; size = 4
_P_RemoveLighting PROC					; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 35   : 	if (sector->lightingdata)

  00009	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0000c	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00010	74 19		 je	 SHORT $LN2@P_RemoveLi

; 36   : 	{
; 37   : 		// The thinker is the first member in all the lighting action structs,
; 38   : 		// so just let the thinker get freed, and that will free the whole
; 39   : 		// structure.
; 40   : 		P_RemoveThinker(&((elevator_t *)sector->lightingdata)->thinker);

  00012	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00015	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _P_RemoveThinker
  0001e	83 c4 04	 add	 esp, 4

; 41   : 		sector->lightingdata = NULL;

  00021	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00024	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
$LN2@P_RemoveLi:

; 42   : 	}
; 43   : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_P_RemoveLighting ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _T_LightFade
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_T_LightFade PROC					; COMDAT

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 378  : 	if (ll->sector->lightlevel < ll->destlevel)

  00009	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0000c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000f	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00013	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00016	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  00019	7d 59		 jge	 SHORT $LN2@T_LightFad

; 379  : 	{
; 380  : 		// increase the lightlevel
; 381  : 		if (ll->sector->lightlevel + ll->speed >= ll->destlevel)

  0001b	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0001e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00021	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00025	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00028	03 50 18	 add	 edx, DWORD PTR [eax+24]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _ll$[ebp]
  0002e	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  00031	7c 22		 jl	 SHORT $LN4@T_LightFad

; 382  : 		{
; 383  : 			// stop changing light level
; 384  : 			ll->sector->lightlevel = (INT16)ll->destlevel; // set to dest lightlevel

  00033	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00036	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00039	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  0003c	66 8b 42 14	 mov	 ax, WORD PTR [edx+20]
  00040	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 385  : 
; 386  : 			P_RemoveLighting(ll->sector); // clear lightingdata, remove thinker

  00044	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00047	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 _P_RemoveLighting
  00050	83 c4 04	 add	 esp, 4

; 387  : 		}

  00053	eb 1d		 jmp	 SHORT $LN5@T_LightFad
$LN4@T_LightFad:

; 388  : 		else
; 389  : 			ll->sector->lightlevel = (INT16)(ll->sector->lightlevel + (INT16)ll->speed); // move lightlevel

  00055	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00058	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005b	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00062	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00066	03 d1		 add	 edx, ecx
  00068	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0006b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0006e	66 89 51 10	 mov	 WORD PTR [ecx+16], dx
$LN5@T_LightFad:

; 390  : 	}

  00072	eb 57		 jmp	 SHORT $LN7@T_LightFad
$LN2@T_LightFad:

; 391  : 	else
; 392  : 	{
; 393  : 		// decrease lightlevel
; 394  : 		if (ll->sector->lightlevel - ll->speed <= ll->destlevel)

  00074	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00077	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007a	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0007e	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00081	2b 50 18	 sub	 edx, DWORD PTR [eax+24]
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _ll$[ebp]
  00087	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  0008a	7f 22		 jg	 SHORT $LN6@T_LightFad

; 395  : 		{
; 396  : 			// stop changing light level
; 397  : 			ll->sector->lightlevel = (INT16)ll->destlevel; // set to dest lightlevel

  0008c	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0008f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00092	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  00095	66 8b 42 14	 mov	 ax, WORD PTR [edx+20]
  00099	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 398  : 
; 399  : 			P_RemoveLighting(ll->sector); // clear lightingdata, remove thinker

  0009d	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  000a0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 _P_RemoveLighting
  000a9	83 c4 04	 add	 esp, 4

; 400  : 		}

  000ac	eb 1d		 jmp	 SHORT $LN7@T_LightFad
$LN6@T_LightFad:

; 401  : 		else
; 402  : 			ll->sector->lightlevel = (INT16)(ll->sector->lightlevel - (INT16)ll->speed); // move lightlevel

  000ae	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  000b1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b4	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  000b8	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  000bb	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  000bf	2b d1		 sub	 edx, ecx
  000c1	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  000c4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c7	66 89 51 10	 mov	 WORD PTR [ecx+16], dx
$LN7@T_LightFad:

; 403  : 	}
; 404  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_T_LightFade ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _P_FadeLight
_TEXT	SEGMENT
_sector$ = -12						; size = 4
_ll$ = -8						; size = 4
_i$ = -4						; size = 4
_tag$ = 8						; size = 2
_destvalue$ = 12					; size = 4
_speed$ = 16						; size = 4
_P_FadeLight PROC					; COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 349  : 	INT32 i;
; 350  : 	lightlevel_t *ll;
; 351  : 	sector_t *sector;
; 352  : 
; 353  : 	// search all sectors for ones with tag
; 354  : 	for (i = -1; (i = P_FindSectorFromTag(tag, i)) >= 0 ;)

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN2@P_FadeLigh:
  00010	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00013	50		 push	 eax
  00014	0f b7 4d 08	 movzx	 ecx, WORD PTR _tag$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  0001e	83 c4 08	 add	 esp, 8
  00021	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00024	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00028	7c 6e		 jl	 SHORT $LN3@P_FadeLigh

; 355  : 	{
; 356  : 		sector = &sectors[i];

  0002a	69 45 fc f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00031	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00037	89 45 f4	 mov	 DWORD PTR _sector$[ebp], eax

; 357  : 
; 358  : 		P_RemoveLighting(sector); // remove the old lighting effect first

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _sector$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _P_RemoveLighting
  00043	83 c4 04	 add	 esp, 4

; 359  : 		ll = Z_Calloc(sizeof (*ll), PU_LEVSPEC, NULL);

  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	6a 33		 push	 51			; 00000033H
  0004c	6a 1c		 push	 28			; 0000001cH
  0004e	e8 00 00 00 00	 call	 _Z_CallocAlign
  00053	83 c4 10	 add	 esp, 16			; 00000010H
  00056	89 45 f8	 mov	 DWORD PTR _ll$[ebp], eax

; 360  : 		ll->thinker.function.acp1 = (actionf_p1)T_LightFade;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _ll$[ebp]
  0005c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_LightFade

; 361  : 		sector->lightingdata = ll; // set it to the lightlevel_t

  00063	8b 45 f4	 mov	 eax, DWORD PTR _sector$[ebp]
  00066	8b 4d f8	 mov	 ecx, DWORD PTR _ll$[ebp]
  00069	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 362  : 
; 363  : 		P_AddThinker(&ll->thinker); // add thinker

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _ll$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _P_AddThinker
  00075	83 c4 04	 add	 esp, 4

; 364  : 
; 365  : 		ll->sector = sector;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _ll$[ebp]
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR _sector$[ebp]
  0007e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 366  : 		ll->destlevel = destvalue;

  00081	8b 45 f8	 mov	 eax, DWORD PTR _ll$[ebp]
  00084	8b 4d 0c	 mov	 ecx, DWORD PTR _destvalue$[ebp]
  00087	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 367  : 		ll->speed = speed;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _ll$[ebp]
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR _speed$[ebp]
  00090	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 368  : 	}

  00093	e9 78 ff ff ff	 jmp	 $LN2@P_FadeLigh
$LN3@P_FadeLigh:

; 369  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_P_FadeLight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _P_SpawnAdjustableGlowingLight
_TEXT	SEGMENT
_oops$1 = -8						; size = 4
_g$ = -4						; size = 4
_minsector$ = 8						; size = 4
_maxsector$ = 12					; size = 4
_length$ = 16						; size = 4
_P_SpawnAdjustableGlowingLight PROC			; COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 297  : 	glow_t *g;
; 298  : 
; 299  : 	P_RemoveLighting(maxsector); // out with the old, in with the new

  00009	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_RemoveLighting
  00012	83 c4 04	 add	 esp, 4

; 300  : 	g = Z_Calloc(sizeof (*g), PU_LEVSPEC, NULL);

  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 33		 push	 51			; 00000033H
  0001b	6a 24		 push	 36			; 00000024H
  0001d	e8 00 00 00 00	 call	 _Z_CallocAlign
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR _g$[ebp], eax

; 301  : 
; 302  : 	P_AddThinker(&g->thinker);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _P_AddThinker
  00031	83 c4 04	 add	 esp, 4

; 303  : 
; 304  : 	g->sector = maxsector;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _maxsector$[ebp]
  0003a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 305  : 	g->minlight = minsector->lightlevel;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _minsector$[ebp]
  00040	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00044	8b 55 fc	 mov	 edx, DWORD PTR _g$[ebp]
  00047	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 306  : 	g->maxlight = maxsector->lightlevel;

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  0004d	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00051	8b 55 fc	 mov	 edx, DWORD PTR _g$[ebp]
  00054	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 307  : 	if (g->minlight > g->maxlight)

  00057	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _g$[ebp]
  0005d	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00060	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  00063	7e 1e		 jle	 SHORT $LN4@P_SpawnAdj

; 308  : 	{
; 309  : 		// You mixed them up, you dummy.
; 310  : 		INT32 oops = g->minlight;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  00068	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006b	89 4d f8	 mov	 DWORD PTR _oops$1[ebp], ecx

; 311  : 		g->minlight = g->maxlight;

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _g$[ebp]
  00074	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00077	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 312  : 		g->maxlight = oops;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _oops$1[ebp]
  00080	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN4@P_SpawnAdj:

; 313  : 	}
; 314  : 	g->thinker.function.acp1 = (actionf_p1)T_Glow;

  00083	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  00086	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_Glow

; 315  : 	g->direction = 1;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  00090	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1

; 316  : 	g->speed = length/4;

  00097	8b 45 10	 mov	 eax, DWORD PTR _length$[ebp]
  0009a	99		 cdq
  0009b	83 e2 03	 and	 edx, 3
  0009e	03 c2		 add	 eax, edx
  000a0	c1 f8 02	 sar	 eax, 2
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _g$[ebp]
  000a6	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 317  : 	if (g->speed > (g->maxlight - g->minlight)/2) // don't make it ridiculous speed

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _g$[ebp]
  000af	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000b2	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  000b5	99		 cdq
  000b6	2b c2		 sub	 eax, edx
  000b8	d1 f8		 sar	 eax, 1
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _g$[ebp]
  000bd	39 42 20	 cmp	 DWORD PTR [edx+32], eax
  000c0	7e 17		 jle	 SHORT $LN5@P_SpawnAdj

; 318  : 		g->speed = (g->maxlight - g->minlight)/2;

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  000c5	8b 4d fc	 mov	 ecx, DWORD PTR _g$[ebp]
  000c8	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000cb	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  000ce	99		 cdq
  000cf	2b c2		 sub	 eax, edx
  000d1	d1 f8		 sar	 eax, 1
  000d3	8b 55 fc	 mov	 edx, DWORD PTR _g$[ebp]
  000d6	89 42 20	 mov	 DWORD PTR [edx+32], eax
$LN5@P_SpawnAdj:

; 319  : 
; 320  : 	while (g->speed < 1)

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  000dc	83 78 20 01	 cmp	 DWORD PTR [eax+32], 1
  000e0	7d 4c		 jge	 SHORT $LN3@P_SpawnAdj

; 321  : 	{
; 322  : 		if (g->minlight > 0)

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  000e5	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  000e9	7e 0f		 jle	 SHORT $LN6@P_SpawnAdj

; 323  : 			g->minlight--;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  000ee	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000f1	83 e9 01	 sub	 ecx, 1
  000f4	8b 55 fc	 mov	 edx, DWORD PTR _g$[ebp]
  000f7	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN6@P_SpawnAdj:

; 324  : 		if (g->maxlight < 255)

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  000fd	81 78 18 ff 00
	00 00		 cmp	 DWORD PTR [eax+24], 255	; 000000ffH
  00104	7d 0f		 jge	 SHORT $LN7@P_SpawnAdj

; 325  : 			g->maxlight++;

  00106	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  00109	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0010c	83 c1 01	 add	 ecx, 1
  0010f	8b 55 fc	 mov	 edx, DWORD PTR _g$[ebp]
  00112	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN7@P_SpawnAdj:

; 326  : 
; 327  : 		g->speed = (g->maxlight - g->minlight)/2;

  00115	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]
  00118	8b 4d fc	 mov	 ecx, DWORD PTR _g$[ebp]
  0011b	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0011e	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  00121	99		 cdq
  00122	2b c2		 sub	 eax, edx
  00124	d1 f8		 sar	 eax, 1
  00126	8b 55 fc	 mov	 edx, DWORD PTR _g$[ebp]
  00129	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 328  : 	}

  0012c	eb ab		 jmp	 SHORT $LN5@P_SpawnAdj
$LN3@P_SpawnAdj:

; 329  : 
; 330  : 	maxsector->lightingdata = g;

  0012e	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _g$[ebp]
  00134	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 331  : 
; 332  : 	return g;

  00137	8b 45 fc	 mov	 eax, DWORD PTR _g$[ebp]

; 333  : }

  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
_P_SpawnAdjustableGlowingLight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _T_Glow
_TEXT	SEGMENT
tv67 = -68						; size = 4
_g$ = 8							; size = 4
_T_Glow	PROC						; COMDAT

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 260  : 	if (P_FreezeObjectplace())

  00009	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  0000e	85 c0		 test	 eax, eax
  00010	74 05		 je	 SHORT $LN4@T_Glow

; 261  : 		return;

  00012	e9 c8 00 00 00	 jmp	 $LN2@T_Glow
$LN4@T_Glow:

; 262  : 
; 263  : 	switch (g->direction)

  00017	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  0001a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0001d	89 4d bc	 mov	 DWORD PTR tv67[ebp], ecx
  00020	83 7d bc ff	 cmp	 DWORD PTR tv67[ebp], -1
  00024	74 0b		 je	 SHORT $LN5@T_Glow
  00026	83 7d bc 01	 cmp	 DWORD PTR tv67[ebp], 1
  0002a	74 5d		 je	 SHORT $LN7@T_Glow
  0002c	e9 ae 00 00 00	 jmp	 $LN2@T_Glow
$LN5@T_Glow:

; 264  : 	{
; 265  : 		case -1:
; 266  : 			// DOWN
; 267  : 			g->sector->lightlevel = (INT16)(g->sector->lightlevel - (INT16)g->speed);

  00031	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  00034	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00037	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0003b	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  0003e	0f bf 48 20	 movsx	 ecx, WORD PTR [eax+32]
  00042	2b d1		 sub	 edx, ecx
  00044	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  00047	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004a	66 89 51 10	 mov	 WORD PTR [ecx+16], dx

; 268  : 			if (g->sector->lightlevel <= g->minlight)

  0004e	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  00051	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00054	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00058	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  0005b	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0005e	7f 27		 jg	 SHORT $LN6@T_Glow

; 269  : 			{
; 270  : 				g->sector->lightlevel = (INT16)(g->sector->lightlevel + (INT16)g->speed);

  00060	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  00063	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00066	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0006a	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  0006d	0f bf 48 20	 movsx	 ecx, WORD PTR [eax+32]
  00071	03 d1		 add	 edx, ecx
  00073	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  00076	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00079	66 89 51 10	 mov	 WORD PTR [ecx+16], dx

; 271  : 				g->direction = 1;

  0007d	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  00080	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
$LN6@T_Glow:

; 272  : 			}
; 273  : 			break;

  00087	eb 56		 jmp	 SHORT $LN2@T_Glow
$LN7@T_Glow:

; 274  : 
; 275  : 		case 1:
; 276  : 			// UP
; 277  : 			g->sector->lightlevel = (INT16)(g->sector->lightlevel + (INT16)g->speed);

  00089	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  0008c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0008f	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00093	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  00096	0f bf 48 20	 movsx	 ecx, WORD PTR [eax+32]
  0009a	03 d1		 add	 edx, ecx
  0009c	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  0009f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a2	66 89 51 10	 mov	 WORD PTR [ecx+16], dx

; 278  : 			if (g->sector->lightlevel >= g->maxlight)

  000a6	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  000a9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ac	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  000b0	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  000b3	3b 50 18	 cmp	 edx, DWORD PTR [eax+24]
  000b6	7c 27		 jl	 SHORT $LN8@T_Glow

; 279  : 			{
; 280  : 				g->sector->lightlevel = (INT16)(g->sector->lightlevel - (INT16)g->speed);

  000b8	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  000bb	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000be	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  000c2	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  000c5	0f bf 48 20	 movsx	 ecx, WORD PTR [eax+32]
  000c9	2b d1		 sub	 edx, ecx
  000cb	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  000ce	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d1	66 89 51 10	 mov	 WORD PTR [ecx+16], dx

; 281  : 				g->direction = -1;

  000d5	8b 45 08	 mov	 eax, DWORD PTR _g$[ebp]
  000d8	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
$LN8@T_Glow:
$LN2@T_Glow:

; 282  : 			}
; 283  : 			break;
; 284  : 	}
; 285  : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_T_Glow	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _P_SpawnAdjustableStrobeFlash
_TEXT	SEGMENT
_oops$1 = -8						; size = 4
_flash$ = -4						; size = 4
_minsector$ = 8						; size = 4
_maxsector$ = 12					; size = 4
_darktime$ = 16						; size = 4
_brighttime$ = 20					; size = 4
_inSync$ = 24						; size = 4
_P_SpawnAdjustableStrobeFlash PROC			; COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 219  : 	strobe_t *flash;
; 220  : 
; 221  : 	P_RemoveLighting(maxsector); // out with the old, in with the new

  00009	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_RemoveLighting
  00012	83 c4 04	 add	 esp, 4

; 222  : 	flash = Z_Calloc(sizeof (*flash), PU_LEVSPEC, NULL);

  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 33		 push	 51			; 00000033H
  0001b	6a 28		 push	 40			; 00000028H
  0001d	e8 00 00 00 00	 call	 _Z_CallocAlign
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR _flash$[ebp], eax

; 223  : 
; 224  : 	P_AddThinker(&flash->thinker);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _P_AddThinker
  00031	83 c4 04	 add	 esp, 4

; 225  : 
; 226  : 	flash->sector = maxsector;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _maxsector$[ebp]
  0003a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 227  : 	flash->darktime = darktime;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  00040	8b 4d 10	 mov	 ecx, DWORD PTR _darktime$[ebp]
  00043	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 228  : 	flash->brighttime = brighttime;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  00049	8b 4d 14	 mov	 ecx, DWORD PTR _brighttime$[ebp]
  0004c	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 229  : 	flash->thinker.function.acp1 = (actionf_p1)T_StrobeFlash;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  00052	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_StrobeFlash

; 230  : 	flash->maxlight = maxsector->lightlevel;

  00059	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  0005c	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00060	8b 55 fc	 mov	 edx, DWORD PTR _flash$[ebp]
  00063	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 231  : 	flash->minlight = minsector->lightlevel;

  00066	8b 45 08	 mov	 eax, DWORD PTR _minsector$[ebp]
  00069	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _flash$[ebp]
  00070	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 232  : 
; 233  : 	if (flash->minlight > flash->maxlight)

  00073	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _flash$[ebp]
  00079	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0007c	3b 51 1c	 cmp	 edx, DWORD PTR [ecx+28]
  0007f	7e 1e		 jle	 SHORT $LN2@P_SpawnAdj

; 234  : 	{
; 235  : 		// You mixed them up, you dummy.
; 236  : 		INT32 oops = flash->minlight;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  00084	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00087	89 4d f8	 mov	 DWORD PTR _oops$1[ebp], ecx

; 237  : 		flash->minlight = flash->maxlight;

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _flash$[ebp]
  00090	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00093	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 238  : 		flash->maxlight = oops;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _oops$1[ebp]
  0009c	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN2@P_SpawnAdj:

; 239  : 	}
; 240  : 
; 241  : 	if (flash->minlight == flash->maxlight)

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _flash$[ebp]
  000a5	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000a8	3b 51 1c	 cmp	 edx, DWORD PTR [ecx+28]
  000ab	75 0a		 jne	 SHORT $LN3@P_SpawnAdj

; 242  : 		flash->minlight = 0;

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  000b0	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
$LN3@P_SpawnAdj:

; 243  : 
; 244  : 	if (!inSync)

  000b7	83 7d 18 00	 cmp	 DWORD PTR _inSync$[ebp], 0
  000bb	75 16		 jne	 SHORT $LN4@P_SpawnAdj

; 245  : 		flash->count = (P_Random() & 7) + 1;

  000bd	e8 00 00 00 00	 call	 _P_Random
  000c2	0f b6 c0	 movzx	 eax, al
  000c5	83 e0 07	 and	 eax, 7
  000c8	83 c0 01	 add	 eax, 1
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _flash$[ebp]
  000ce	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000d1	eb 0a		 jmp	 SHORT $LN5@P_SpawnAdj
$LN4@P_SpawnAdj:

; 246  : 	else
; 247  : 		flash->count = 1;

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]
  000d6	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1
$LN5@P_SpawnAdj:

; 248  : 
; 249  : 	maxsector->lightingdata = flash;

  000dd	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _flash$[ebp]
  000e3	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 250  : 	return flash;

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _flash$[ebp]

; 251  : }

  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
_P_SpawnAdjustableStrobeFlash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _P_SpawnLightningFlash
_TEXT	SEGMENT
_flash$ = -8						; size = 4
_minlight$ = -4						; size = 4
_sector$ = 8						; size = 4
_P_SpawnLightningFlash PROC				; COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 	INT32 minlight;
; 144  : 	lightflash_t *flash;
; 145  : 
; 146  : 	minlight = sector->lightlevel;

  00009	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0000c	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00010	89 4d fc	 mov	 DWORD PTR _minlight$[ebp], ecx

; 147  : 
; 148  : 	if (sector->lightingdata)

  00013	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00016	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0001a	74 2a		 je	 SHORT $LN2@P_SpawnLig

; 149  : 	{
; 150  : 		if (((lightflash_t *)sector->lightingdata)->thinker.function.acp1
; 151  : 			== (actionf_p1)T_LightningFlash)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0001f	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00022	81 79 08 00 00
	00 00		 cmp	 DWORD PTR [ecx+8], OFFSET _T_LightningFlash
  00029	75 0c		 jne	 SHORT $LN3@P_SpawnLig

; 152  : 		{
; 153  : 			// lightning was already flashing in this sector
; 154  : 			// save the original light level value
; 155  : 			minlight = ((lightflash_t *)sector->lightingdata)->minlight;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0002e	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00031	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00034	89 55 fc	 mov	 DWORD PTR _minlight$[ebp], edx
$LN3@P_SpawnLig:

; 156  : 		}
; 157  : 
; 158  : 		P_RemoveThinker(&((elevator_t *)sector->lightingdata)->thinker);

  00037	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0003a	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _P_RemoveThinker
  00043	83 c4 04	 add	 esp, 4
$LN2@P_SpawnLig:

; 159  : 	}
; 160  : 
; 161  : 	sector->lightingdata = NULL;

  00046	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00049	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 162  : 
; 163  : 	flash = Z_Calloc(sizeof (*flash), PU_LEVSPEC, NULL);

  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	6a 33		 push	 51			; 00000033H
  00056	6a 1c		 push	 28			; 0000001cH
  00058	e8 00 00 00 00	 call	 _Z_CallocAlign
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	89 45 f8	 mov	 DWORD PTR _flash$[ebp], eax

; 164  : 
; 165  : 	P_AddThinker(&flash->thinker);

  00063	8b 45 f8	 mov	 eax, DWORD PTR _flash$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _P_AddThinker
  0006c	83 c4 04	 add	 esp, 4

; 166  : 
; 167  : 	flash->thinker.function.acp1 = (actionf_p1)T_LightningFlash;

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _flash$[ebp]
  00072	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_LightningFlash

; 168  : 	flash->sector = sector;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _flash$[ebp]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  0007f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 169  : 	flash->maxlight = 255;

  00082	8b 45 f8	 mov	 eax, DWORD PTR _flash$[ebp]
  00085	c7 40 14 ff 00
	00 00		 mov	 DWORD PTR [eax+20], 255	; 000000ffH

; 170  : 	flash->minlight = minlight;

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _flash$[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _minlight$[ebp]
  00092	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 171  : 	sector->lightlevel = (INT16)flash->maxlight;

  00095	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _flash$[ebp]
  0009b	66 8b 51 14	 mov	 dx, WORD PTR [ecx+20]
  0009f	66 89 50 10	 mov	 WORD PTR [eax+16], dx

; 172  : 
; 173  : 	sector->lightingdata = flash;

  000a3	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _flash$[ebp]
  000a9	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 174  : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_P_SpawnLightningFlash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _T_StrobeFlash
_TEXT	SEGMENT
tv66 = -68						; size = 4
_flash$ = 8						; size = 4
_T_StrobeFlash PROC					; COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 187  : 	if (--flash->count)

  00009	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  0000c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000f	83 e9 01	 sub	 ecx, 1
  00012	89 4d bc	 mov	 DWORD PTR tv66[ebp], ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _flash$[ebp]
  00018	8b 45 bc	 mov	 eax, DWORD PTR tv66[ebp]
  0001b	89 42 14	 mov	 DWORD PTR [edx+20], eax
  0001e	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00022	74 02		 je	 SHORT $LN2@T_StrobeFl

; 188  : 		return;

  00024	eb 4e		 jmp	 SHORT $LN4@T_StrobeFl
$LN2@T_StrobeFl:

; 189  : 
; 190  : 	if (flash->sector->lightlevel == flash->minlight)

  00026	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  00029	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002c	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00030	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  00033	3b 50 18	 cmp	 edx, DWORD PTR [eax+24]
  00036	75 1f		 jne	 SHORT $LN3@T_StrobeFl

; 191  : 	{
; 192  : 		flash->sector->lightlevel = (INT16)flash->maxlight;

  00038	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  0003b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003e	8b 55 08	 mov	 edx, DWORD PTR _flash$[ebp]
  00041	66 8b 42 1c	 mov	 ax, WORD PTR [edx+28]
  00045	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 193  : 		flash->count = flash->brighttime;

  00049	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _flash$[ebp]
  0004f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00052	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 194  : 	}

  00055	eb 1d		 jmp	 SHORT $LN4@T_StrobeFl
$LN3@T_StrobeFl:

; 195  : 	else
; 196  : 	{
; 197  : 		flash->sector->lightlevel = (INT16)flash->minlight;

  00057	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  0005a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005d	8b 55 08	 mov	 edx, DWORD PTR _flash$[ebp]
  00060	66 8b 42 18	 mov	 ax, WORD PTR [edx+24]
  00064	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 198  : 		flash->count = flash->darktime;

  00068	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _flash$[ebp]
  0006e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00071	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN4@T_StrobeFl:

; 199  : 	}
; 200  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_T_StrobeFlash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _T_LightningFlash
_TEXT	SEGMENT
_flash$ = 8						; size = 4
_T_LightningFlash PROC					; COMDAT

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 127  : 	flash->sector->lightlevel -= 4/NEWTICRATERATIO;

  00009	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  0000c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000f	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00013	83 ea 04	 sub	 edx, 4
  00016	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  00019	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001c	66 89 51 10	 mov	 WORD PTR [ecx+16], dx

; 128  : 
; 129  : 	if (flash->sector->lightlevel <= flash->minlight)

  00020	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  00023	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00026	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  0002d	3b 50 18	 cmp	 edx, DWORD PTR [eax+24]
  00030	7f 20		 jg	 SHORT $LN2@T_Lightnin

; 130  : 	{
; 131  : 		flash->sector->lightlevel = (INT16)flash->minlight;

  00032	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  00035	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00038	8b 55 08	 mov	 edx, DWORD PTR _flash$[ebp]
  0003b	66 8b 42 18	 mov	 ax, WORD PTR [edx+24]
  0003f	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 132  : 		P_RemoveLighting(flash->sector);

  00043	8b 45 08	 mov	 eax, DWORD PTR _flash$[ebp]
  00046	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 _P_RemoveLighting
  0004f	83 c4 04	 add	 esp, 4
$LN2@T_Lightnin:

; 133  : 	}
; 134  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_T_LightningFlash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _P_SpawnAdjustableFireFlicker
_TEXT	SEGMENT
tv89 = -76						; size = 4
_oops$1 = -8						; size = 4
_flick$ = -4						; size = 4
_minsector$ = 8						; size = 4
_maxsector$ = 12					; size = 4
_length$ = 16						; size = 4
_P_SpawnAdjustableFireFlicker PROC			; COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 	fireflicker_t *flick;
; 82   : 
; 83   : 	P_RemoveLighting(maxsector); // out with the old, in with the new

  00009	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_RemoveLighting
  00012	83 c4 04	 add	 esp, 4

; 84   : 	flick = Z_Calloc(sizeof (*flick), PU_LEVSPEC, NULL);

  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 33		 push	 51			; 00000033H
  0001b	6a 24		 push	 36			; 00000024H
  0001d	e8 00 00 00 00	 call	 _Z_CallocAlign
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR _flick$[ebp], eax

; 85   : 
; 86   : 	P_AddThinker(&flick->thinker);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _P_AddThinker
  00031	83 c4 04	 add	 esp, 4

; 87   : 
; 88   : 	flick->thinker.function.acp1 = (actionf_p1)T_FireFlicker;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  00037	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_FireFlicker

; 89   : 	flick->sector = maxsector;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _maxsector$[ebp]
  00044	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 90   : 	flick->maxlight = maxsector->lightlevel;

  00047	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  0004a	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _flick$[ebp]
  00051	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 91   : 	flick->minlight = minsector->lightlevel;

  00054	8b 45 08	 mov	 eax, DWORD PTR _minsector$[ebp]
  00057	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _flick$[ebp]
  0005e	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 92   : 	if (flick->minlight > flick->maxlight)

  00061	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _flick$[ebp]
  00067	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0006a	3b 51 1c	 cmp	 edx, DWORD PTR [ecx+28]
  0006d	7e 1e		 jle	 SHORT $LN2@P_SpawnAdj

; 93   : 	{
; 94   : 		// You mixed them up, you dummy.
; 95   : 		INT32 oops = flick->minlight;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  00072	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00075	89 4d f8	 mov	 DWORD PTR _oops$1[ebp], ecx

; 96   : 		flick->minlight = flick->maxlight;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _flick$[ebp]
  0007e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00081	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 97   : 		flick->maxlight = oops;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  00087	8b 4d f8	 mov	 ecx, DWORD PTR _oops$1[ebp]
  0008a	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN2@P_SpawnAdj:

; 98   : 	}
; 99   : 	flick->count = flick->resetcount = length/4;

  0008d	8b 45 10	 mov	 eax, DWORD PTR _length$[ebp]
  00090	99		 cdq
  00091	83 e2 03	 and	 edx, 3
  00094	03 c2		 add	 eax, edx
  00096	c1 f8 02	 sar	 eax, 2
  00099	89 45 b4	 mov	 DWORD PTR tv89[ebp], eax
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  0009f	8b 4d b4	 mov	 ecx, DWORD PTR tv89[ebp]
  000a2	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _flick$[ebp]
  000a8	8b 45 b4	 mov	 eax, DWORD PTR tv89[ebp]
  000ab	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 100  : 	maxsector->lightingdata = flick;

  000ae	8b 45 0c	 mov	 eax, DWORD PTR _maxsector$[ebp]
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _flick$[ebp]
  000b4	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 101  : 
; 102  : 	// input bounds checking and stuff
; 103  : 	if (!flick->resetcount)

  000b7	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  000ba	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000be	75 0a		 jne	 SHORT $LN3@P_SpawnAdj

; 104  : 		flick->resetcount = 1;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  000c3	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1
$LN3@P_SpawnAdj:

; 105  : 	if (flick->minlight == flick->maxlight)

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _flick$[ebp]
  000d0	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  000d3	3b 51 1c	 cmp	 edx, DWORD PTR [ecx+28]
  000d6	75 33		 jne	 SHORT $LN6@P_SpawnAdj

; 106  : 	{
; 107  : 		if (flick->minlight > 0)

  000d8	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  000db	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  000df	7e 0f		 jle	 SHORT $LN5@P_SpawnAdj

; 108  : 			flick->minlight--;

  000e1	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  000e4	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000e7	83 e9 01	 sub	 ecx, 1
  000ea	8b 55 fc	 mov	 edx, DWORD PTR _flick$[ebp]
  000ed	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$LN5@P_SpawnAdj:

; 109  : 		if (flick->maxlight < 255)

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  000f3	81 78 1c ff 00
	00 00		 cmp	 DWORD PTR [eax+28], 255	; 000000ffH
  000fa	7d 0f		 jge	 SHORT $LN6@P_SpawnAdj

; 110  : 			flick->maxlight++;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]
  000ff	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00102	83 c1 01	 add	 ecx, 1
  00105	8b 55 fc	 mov	 edx, DWORD PTR _flick$[ebp]
  00108	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN6@P_SpawnAdj:

; 111  : 	}
; 112  : 
; 113  : 	return flick;

  0010b	8b 45 fc	 mov	 eax, DWORD PTR _flick$[ebp]

; 114  : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
_P_SpawnAdjustableFireFlicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_lights.c
;	COMDAT _T_FireFlicker
_TEXT	SEGMENT
tv66 = -72						; size = 4
_amount$ = -4						; size = 2
_flick$ = 8						; size = 4
_T_FireFlicker PROC					; COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 56   : 	INT16 amount;
; 57   : 
; 58   : 	if (--flick->count)

  00009	8b 45 08	 mov	 eax, DWORD PTR _flick$[ebp]
  0000c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000f	83 e9 01	 sub	 ecx, 1
  00012	89 4d b8	 mov	 DWORD PTR tv66[ebp], ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _flick$[ebp]
  00018	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  0001b	89 42 14	 mov	 DWORD PTR [edx+20], eax
  0001e	83 7d b8 00	 cmp	 DWORD PTR tv66[ebp], 0
  00022	74 02		 je	 SHORT $LN2@T_FireFlic

; 59   : 		return;

  00024	eb 63		 jmp	 SHORT $LN1@T_FireFlic
$LN2@T_FireFlic:

; 60   : 
; 61   : 	amount = (INT16)((UINT8)(P_Random() & 3) * 16);

  00026	e8 00 00 00 00	 call	 _P_Random
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	83 e0 03	 and	 eax, 3
  00031	0f b6 c8	 movzx	 ecx, al
  00034	c1 e1 04	 shl	 ecx, 4
  00037	66 89 4d fc	 mov	 WORD PTR _amount$[ebp], cx

; 62   : 
; 63   : 	if (flick->sector->lightlevel - amount < flick->minlight)

  0003b	8b 45 08	 mov	 eax, DWORD PTR _flick$[ebp]
  0003e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00041	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00045	0f bf 45 fc	 movsx	 eax, WORD PTR _amount$[ebp]
  00049	2b d0		 sub	 edx, eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _flick$[ebp]
  0004e	3b 51 20	 cmp	 edx, DWORD PTR [ecx+32]
  00051	7d 13		 jge	 SHORT $LN3@T_FireFlic

; 64   : 		flick->sector->lightlevel = (INT16)flick->minlight;

  00053	8b 45 08	 mov	 eax, DWORD PTR _flick$[ebp]
  00056	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00059	8b 55 08	 mov	 edx, DWORD PTR _flick$[ebp]
  0005c	66 8b 42 20	 mov	 ax, WORD PTR [edx+32]
  00060	66 89 41 10	 mov	 WORD PTR [ecx+16], ax
  00064	eb 17		 jmp	 SHORT $LN4@T_FireFlic
$LN3@T_FireFlic:

; 65   : 	else
; 66   : 		flick->sector->lightlevel = (INT16)((INT16)flick->maxlight - amount);

  00066	8b 45 08	 mov	 eax, DWORD PTR _flick$[ebp]
  00069	0f bf 48 1c	 movsx	 ecx, WORD PTR [eax+28]
  0006d	0f bf 55 fc	 movsx	 edx, WORD PTR _amount$[ebp]
  00071	2b ca		 sub	 ecx, edx
  00073	8b 45 08	 mov	 eax, DWORD PTR _flick$[ebp]
  00076	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00079	66 89 4a 10	 mov	 WORD PTR [edx+16], cx
$LN4@T_FireFlic:

; 67   : 
; 68   : 	flick->count = flick->resetcount;

  0007d	8b 45 08	 mov	 eax, DWORD PTR _flick$[ebp]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _flick$[ebp]
  00083	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00086	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN1@T_FireFlic:

; 69   : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_T_FireFlicker ENDP
_TEXT	ENDS
END
