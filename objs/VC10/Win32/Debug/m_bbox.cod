; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\m_bbox.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
PUBLIC	_M_ClearBox
PUBLIC	_M_AddToBox
PUBLIC	_M_PointInBox
PUBLIC	_M_CircleTouchBox
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_bbox.c
;	COMDAT _M_CircleTouchBox
_TEXT	SEGMENT
_box$ = 8						; size = 4
_circlex$ = 12						; size = 4
_circley$ = 16						; size = 4
_circleradius$ = 20					; size = 4
_M_CircleTouchBox PROC					; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   : 	if (box[BOXLEFT] - circleradius > circlex)

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  00013	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00016	2b 55 14	 sub	 edx, DWORD PTR _circleradius$[ebp]
  00019	3b 55 0c	 cmp	 edx, DWORD PTR _circlex$[ebp]
  0001c	7e 04		 jle	 SHORT $LN2@M_CircleTo

; 98   : 		return false;

  0001e	33 c0		 xor	 eax, eax
  00020	eb 53		 jmp	 SHORT $LN1@M_CircleTo
$LN2@M_CircleTo:

; 99   : 	if (box[BOXRIGHT] + circleradius < circlex)

  00022	b8 04 00 00 00	 mov	 eax, 4
  00027	6b c8 03	 imul	 ecx, eax, 3
  0002a	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  0002d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00030	03 45 14	 add	 eax, DWORD PTR _circleradius$[ebp]
  00033	3b 45 0c	 cmp	 eax, DWORD PTR _circlex$[ebp]
  00036	7d 04		 jge	 SHORT $LN3@M_CircleTo

; 100  : 		return false;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 39		 jmp	 SHORT $LN1@M_CircleTo
$LN3@M_CircleTo:

; 101  : 	if (box[BOXBOTTOM] - circleradius > circley)

  0003c	b8 04 00 00 00	 mov	 eax, 4
  00041	c1 e0 00	 shl	 eax, 0
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  00047	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0004a	2b 55 14	 sub	 edx, DWORD PTR _circleradius$[ebp]
  0004d	3b 55 10	 cmp	 edx, DWORD PTR _circley$[ebp]
  00050	7e 04		 jle	 SHORT $LN4@M_CircleTo

; 102  : 		return false;

  00052	33 c0		 xor	 eax, eax
  00054	eb 1f		 jmp	 SHORT $LN1@M_CircleTo
$LN4@M_CircleTo:

; 103  : 	if (box[BOXTOP] + circleradius < circley)

  00056	b8 04 00 00 00	 mov	 eax, 4
  0005b	6b c8 00	 imul	 ecx, eax, 0
  0005e	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00061	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00064	03 45 14	 add	 eax, DWORD PTR _circleradius$[ebp]
  00067	3b 45 10	 cmp	 eax, DWORD PTR _circley$[ebp]
  0006a	7d 04		 jge	 SHORT $LN5@M_CircleTo

; 104  : 		return false;

  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN1@M_CircleTo
$LN5@M_CircleTo:

; 105  : 	return true;

  00070	b8 01 00 00 00	 mov	 eax, 1
$LN1@M_CircleTo:

; 106  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_M_CircleTouchBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_bbox.c
;	COMDAT _M_PointInBox
_TEXT	SEGMENT
_box$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_M_PointInBox PROC					; COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 72   : 	if (x < box[BOXLEFT])

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  00013	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00016	3b 14 01	 cmp	 edx, DWORD PTR [ecx+eax]
  00019	7d 04		 jge	 SHORT $LN2@M_PointInB

; 73   : 		return false;

  0001b	33 c0		 xor	 eax, eax
  0001d	eb 4a		 jmp	 SHORT $LN1@M_PointInB
$LN2@M_PointInB:

; 74   : 	if (x > box[BOXRIGHT])

  0001f	b8 04 00 00 00	 mov	 eax, 4
  00024	6b c8 03	 imul	 ecx, eax, 3
  00027	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0002d	3b 04 0a	 cmp	 eax, DWORD PTR [edx+ecx]
  00030	7e 04		 jle	 SHORT $LN3@M_PointInB

; 75   : 		return false;

  00032	33 c0		 xor	 eax, eax
  00034	eb 33		 jmp	 SHORT $LN1@M_PointInB
$LN3@M_PointInB:

; 76   : 	if (y < box[BOXBOTTOM])

  00036	b8 04 00 00 00	 mov	 eax, 4
  0003b	c1 e0 00	 shl	 eax, 0
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  00041	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  00044	3b 14 01	 cmp	 edx, DWORD PTR [ecx+eax]
  00047	7d 04		 jge	 SHORT $LN4@M_PointInB

; 77   : 		return false;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 1c		 jmp	 SHORT $LN1@M_PointInB
$LN4@M_PointInB:

; 78   : 	if (y > box[BOXTOP])

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	6b c8 00	 imul	 ecx, eax, 0
  00055	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00058	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0005b	3b 04 0a	 cmp	 eax, DWORD PTR [edx+ecx]
  0005e	7e 04		 jle	 SHORT $LN5@M_PointInB

; 79   : 		return false;

  00060	33 c0		 xor	 eax, eax
  00062	eb 05		 jmp	 SHORT $LN1@M_PointInB
$LN5@M_PointInB:

; 80   : 
; 81   : 	return true;

  00064	b8 01 00 00 00	 mov	 eax, 1
$LN1@M_PointInB:

; 82   : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_M_PointInBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_bbox.c
;	COMDAT _M_AddToBox
_TEXT	SEGMENT
_box$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_M_AddToBox PROC					; COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 49   : 	if (x < box[BOXLEFT])

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  00013	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00016	3b 14 01	 cmp	 edx, DWORD PTR [ecx+eax]
  00019	7d 10		 jge	 SHORT $LN2@M_AddToBox

; 50   : 		box[BOXLEFT] = x;

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	d1 e0		 shl	 eax, 1
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  00025	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00028	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
$LN2@M_AddToBox:

; 51   : 	if (x > box[BOXRIGHT])

  0002b	b8 04 00 00 00	 mov	 eax, 4
  00030	6b c8 03	 imul	 ecx, eax, 3
  00033	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00036	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00039	3b 04 0a	 cmp	 eax, DWORD PTR [edx+ecx]
  0003c	7e 11		 jle	 SHORT $LN3@M_AddToBox

; 52   : 		box[BOXRIGHT] = x;

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 03	 imul	 ecx, eax, 3
  00046	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00049	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0004c	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
$LN3@M_AddToBox:

; 53   : 
; 54   : 	if (y < box[BOXBOTTOM])

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	c1 e0 00	 shl	 eax, 0
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0005a	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0005d	3b 14 01	 cmp	 edx, DWORD PTR [ecx+eax]
  00060	7d 11		 jge	 SHORT $LN4@M_AddToBox

; 55   : 		box[BOXBOTTOM] = y;

  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0006d	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  00070	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
$LN4@M_AddToBox:

; 56   : 	if (y > box[BOXTOP])

  00073	b8 04 00 00 00	 mov	 eax, 4
  00078	6b c8 00	 imul	 ecx, eax, 0
  0007b	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  0007e	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00081	3b 04 0a	 cmp	 eax, DWORD PTR [edx+ecx]
  00084	7e 11		 jle	 SHORT $LN5@M_AddToBox

; 57   : 		box[BOXTOP] = y;

  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	6b c8 00	 imul	 ecx, eax, 0
  0008e	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00091	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00094	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
$LN5@M_AddToBox:

; 58   : }

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
_M_AddToBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_bbox.c
;	COMDAT _M_ClearBox
_TEXT	SEGMENT
_box$ = 8						; size = 4
_M_ClearBox PROC					; COMDAT

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 33   : 	box[BOXTOP] = box[BOXRIGHT] = INT32_MIN;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00014	c7 04 0a 00 00
	00 80		 mov	 DWORD PTR [edx+ecx], -2147483648 ; 80000000H
  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	6b c8 00	 imul	 ecx, eax, 0
  00023	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00026	c7 04 0a 00 00
	00 80		 mov	 DWORD PTR [edx+ecx], -2147483648 ; 80000000H

; 34   : 	box[BOXBOTTOM] = box[BOXLEFT] = INT32_MAX;

  0002d	b8 04 00 00 00	 mov	 eax, 4
  00032	d1 e0		 shl	 eax, 1
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  00037	c7 04 01 ff ff
	ff 7f		 mov	 DWORD PTR [ecx+eax], 2147483647 ; 7fffffffH
  0003e	ba 04 00 00 00	 mov	 edx, 4
  00043	c1 e2 00	 shl	 edx, 0
  00046	8b 45 08	 mov	 eax, DWORD PTR _box$[ebp]
  00049	c7 04 10 ff ff
	ff 7f		 mov	 DWORD PTR [eax+edx], 2147483647 ; 7fffffffH

; 35   : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_M_ClearBox ENDP
_TEXT	ENDS
END
