; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\r_segs.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_rw_distance:DWORD
COMM	_rw_normalangle:DWORD
COMM	_rw_angle1:DWORD
COMM	_walllights:DWORD
_DATA	ENDS
PUBLIC	_R_RenderMaskedSegRange
PUBLIC	_R_RenderThickSideRange
PUBLIC	_R_StoreWallRange
EXTRN	_abs:PROC
EXTRN	_FixedMul:PROC
EXTRN	_R_GetColumn:PROC
EXTRN	_R_PointToDist:PROC
EXTRN	_R_ScaleFromGlobalAngle:PROC
EXTRN	_R_FakeFlat:PROC
EXTRN	_R_CheckPlane:PROC
EXTRN	_R_ExpandPlane:PROC
EXTRN	_R_DrawMaskedColumn:PROC
EXTRN	_R_Draw2sMultiPatchColumn_8:PROC
EXTRN	_R_DrawFogColumn_8:PROC
EXTRN	_R_DrawColumnShadowed_8:PROC
EXTRN	_Z_ReallocAlign:PROC
EXTRN	_M_Memcpy:DWORD
EXTRN	_finesine:BYTE
EXTRN	_finetangent:BYTE
EXTRN	_wallcolfunc:DWORD
EXTRN	_colfunc:DWORD
EXTRN	_fuzzcolfunc:DWORD
EXTRN	_vid:BYTE
EXTRN	_textureheight:DWORD
EXTRN	_colormaps:DWORD
EXTRN	_texturetranslation:DWORD
EXTRN	_sectors:DWORD
EXTRN	_sides:DWORD
EXTRN	_viewz:DWORD
EXTRN	_viewangle:DWORD
EXTRN	_xtoviewangle:BYTE
EXTRN	_textures:DWORD
EXTRN	_viewheight:DWORD
EXTRN	_centeryfrac:DWORD
EXTRN	_scalelight:BYTE
EXTRN	_curline:DWORD
EXTRN	_sidedef:DWORD
EXTRN	_linedef:DWORD
EXTRN	_frontsector:DWORD
EXTRN	_backsector:DWORD
EXTRN	_drawsegs:DWORD
EXTRN	_ds_p:DWORD
EXTRN	_firstnewseg:DWORD
EXTRN	_doorclosed:DWORD
EXTRN	_floorplane:DWORD
EXTRN	_ceilingplane:DWORD
EXTRN	_lastopening:DWORD
EXTRN	_openings:DWORD
EXTRN	_maxopenings:DWORD
EXTRN	_floorclip:BYTE
EXTRN	_ceilingclip:BYTE
EXTRN	_frontscale:BYTE
EXTRN	_ffloor:BYTE
EXTRN	_numffloors:DWORD
EXTRN	_skyflatnum:DWORD
EXTRN	_negonearray:BYTE
EXTRN	_screenheightarray:BYTE
EXTRN	_mfloorclip:DWORD
EXTRN	_mceilingclip:DWORD
EXTRN	_spryscale:DWORD
EXTRN	_sprtopscreen:DWORD
EXTRN	_sprbotscreen:DWORD
EXTRN	_windowtop:DWORD
EXTRN	_windowbottom:DWORD
EXTRN	_dc_colormap:DWORD
EXTRN	_dc_x:DWORD
EXTRN	_dc_yl:DWORD
EXTRN	_dc_yh:DWORD
EXTRN	_dc_iscale:DWORD
EXTRN	_dc_texturemid:DWORD
EXTRN	_dc_source:DWORD
EXTRN	_transtables:DWORD
EXTRN	_dc_transmap:DWORD
EXTRN	_dc_lightlist:DWORD
EXTRN	_dc_numlights:DWORD
EXTRN	_dc_maxlights:DWORD
EXTRN	_dc_texheight:DWORD
EXTRN	_firstseg:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_con_clipviewtop:DWORD
_BSS	SEGMENT
_segtextured DD	01H DUP (?)
_markfloor DD	01H DUP (?)
_markceiling DD	01H DUP (?)
_maskedtexture DD 01H DUP (?)
_toptexture DD	01H DUP (?)
_bottomtexture DD 01H DUP (?)
_midtexture DD	01H DUP (?)
_numthicksides DD 01H DUP (?)
_rw_x	DD	01H DUP (?)
_rw_stopx DD	01H DUP (?)
_rw_centerangle DD 01H DUP (?)
_rw_offset DD	01H DUP (?)
_rw_offset2 DD	01H DUP (?)
_rw_scale DD	01H DUP (?)
_rw_scalestep DD 01H DUP (?)
_rw_midtexturemid DD 01H DUP (?)
_rw_toptexturemid DD 01H DUP (?)
_rw_bottomtexturemid DD 01H DUP (?)
_worldtop DD	01H DUP (?)
_worldbottom DD	01H DUP (?)
_worldhigh DD	01H DUP (?)
_worldlow DD	01H DUP (?)
_pixhigh DD	01H DUP (?)
_pixlow	DD	01H DUP (?)
_pixhighstep DD	01H DUP (?)
_pixlowstep DD	01H DUP (?)
_topfrac DD	01H DUP (?)
_topstep DD	01H DUP (?)
_bottomfrac DD	01H DUP (?)
_bottomstep DD	01H DUP (?)
_maskedtexturecol DD 01H DUP (?)
_column2s_length DD 01H DUP (?)
?maxdrawsegs@?1??R_StoreWallRange@@9@9 DD 01H DUP (?)	; `R_StoreWallRange'::`2'::maxdrawsegs
_BSS	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_segs.c
;	COMDAT _R_RenderSegLoop
_TEXT	SEGMENT
tv137 = -132						; size = 4
tv468 = -132						; size = 4
_y_w$1 = -64						; size = 4
_lightnum$2 = -60					; size = 4
_xwalllights$3 = -56					; size = 4
_bottom_w$4 = -52					; size = 4
_top_w$5 = -48						; size = 4
_bottom_w$6 = -44					; size = 4
_top_w$7 = -40						; size = 4
_i$ = -36						; size = 4
_bottom$ = -32						; size = 4
_top$ = -28						; size = 4
_texturecolumn$ = -24					; size = 4
_mid$ = -20						; size = 4
_yh$ = -16						; size = 4
_yl$ = -12						; size = 4
_pindex$ = -8						; size = 4
_angle$ = -4						; size = 4
_R_RenderSegLoop PROC					; COMDAT

; 1045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1046 : 	angle_t angle;
; 1047 : 	size_t  pindex;
; 1048 : 	INT32     yl;
; 1049 : 	INT32     yh;
; 1050 : 
; 1051 : 	INT32     mid;
; 1052 : 	fixed_t texturecolumn = 0;

  0000c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _texturecolumn$[ebp], 0

; 1053 : 	INT32     top;
; 1054 : 	INT32     bottom;
; 1055 : 	INT32     i;
; 1056 : 
; 1057 : 	for (; rw_x < rw_stopx; rw_x++)

  00013	eb 0d		 jmp	 SHORT $LN4@R_RenderSe
$LN2@R_RenderSe:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  0001a	83 c0 01	 add	 eax, 1
  0001d	a3 00 00 00 00	 mov	 DWORD PTR _rw_x, eax
$LN4@R_RenderSe:
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00027	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _rw_stopx
  0002d	0f 8d b2 09 00
	00		 jge	 $LN3@R_RenderSe

; 1058 : 	{
; 1059 : 		// mark floor / ceiling areas
; 1060 : 		yl = (topfrac+HEIGHTUNIT-1)>>HEIGHTBITS;

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _topfrac
  00038	05 ff 0f 00 00	 add	 eax, 4095		; 00000fffH
  0003d	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00040	89 45 f4	 mov	 DWORD PTR _yl$[ebp], eax

; 1061 : 
; 1062 : 		// no space above wall?
; 1063 : 		top = ceilingclip[rw_x]+1;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00048	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _ceilingclip[eax*2]
  00050	83 c1 01	 add	 ecx, 1
  00053	89 4d e4	 mov	 DWORD PTR _top$[ebp], ecx

; 1064 : 
; 1065 : 		// no space above wall?
; 1066 : 		if (yl < top)

  00056	8b 45 f4	 mov	 eax, DWORD PTR _yl$[ebp]
  00059	3b 45 e4	 cmp	 eax, DWORD PTR _top$[ebp]
  0005c	7d 06		 jge	 SHORT $LN17@R_RenderSe

; 1067 : 			yl = top;

  0005e	8b 45 e4	 mov	 eax, DWORD PTR _top$[ebp]
  00061	89 45 f4	 mov	 DWORD PTR _yl$[ebp], eax
$LN17@R_RenderSe:

; 1068 : 
; 1069 : 		if (markceiling)

  00064	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _markceiling, 0
  0006b	74 61		 je	 SHORT $LN20@R_RenderSe

; 1070 : 		{
; 1071 : 			bottom = yl-1;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR _yl$[ebp]
  00070	83 e8 01	 sub	 eax, 1
  00073	89 45 e0	 mov	 DWORD PTR _bottom$[ebp], eax

; 1072 : 
; 1073 : 			if (bottom >= floorclip[rw_x])

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  0007b	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _floorclip[eax*2]
  00083	39 4d e0	 cmp	 DWORD PTR _bottom$[ebp], ecx
  00086	7c 13		 jl	 SHORT $LN19@R_RenderSe

; 1074 : 				bottom = floorclip[rw_x]-1;

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  0008d	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _floorclip[eax*2]
  00095	83 e9 01	 sub	 ecx, 1
  00098	89 4d e0	 mov	 DWORD PTR _bottom$[ebp], ecx
$LN19@R_RenderSe:

; 1075 : 
; 1076 : 			if (top <= bottom)

  0009b	8b 45 e4	 mov	 eax, DWORD PTR _top$[ebp]
  0009e	3b 45 e0	 cmp	 eax, DWORD PTR _bottom$[ebp]
  000a1	7f 2b		 jg	 SHORT $LN20@R_RenderSe

; 1077 : 			{
; 1078 : 				ceilingplane->top[rw_x] = (INT16)top;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ceilingplane
  000ae	66 8b 55 e4	 mov	 dx, WORD PTR _top$[ebp]
  000b2	66 89 54 41 2a	 mov	 WORD PTR [ecx+eax*2+42], dx

; 1079 : 				ceilingplane->bottom[rw_x] = (INT16)bottom;

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ceilingplane
  000c2	66 8b 55 e0	 mov	 dx, WORD PTR _bottom$[ebp]
  000c6	66 89 94 41 2e
	0f 00 00	 mov	 WORD PTR [ecx+eax*2+3886], dx
$LN20@R_RenderSe:

; 1080 : 			}
; 1081 : 		}
; 1082 : 
; 1083 : 
; 1084 : 		yh = bottomfrac>>HEIGHTBITS;

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _bottomfrac
  000d3	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  000d6	89 45 f0	 mov	 DWORD PTR _yh$[ebp], eax

; 1085 : 
; 1086 : 		bottom = floorclip[rw_x]-1;

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  000de	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _floorclip[eax*2]
  000e6	83 e9 01	 sub	 ecx, 1
  000e9	89 4d e0	 mov	 DWORD PTR _bottom$[ebp], ecx

; 1087 : 
; 1088 : 		if (yh > bottom)

  000ec	8b 45 f0	 mov	 eax, DWORD PTR _yh$[ebp]
  000ef	3b 45 e0	 cmp	 eax, DWORD PTR _bottom$[ebp]
  000f2	7e 06		 jle	 SHORT $LN21@R_RenderSe

; 1089 : 			yh = bottom;

  000f4	8b 45 e0	 mov	 eax, DWORD PTR _bottom$[ebp]
  000f7	89 45 f0	 mov	 DWORD PTR _yh$[ebp], eax
$LN21@R_RenderSe:

; 1090 : 
; 1091 : 		if (markfloor)

  000fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _markfloor, 0
  00101	74 7f		 je	 SHORT $LN23@R_RenderSe

; 1092 : 		{
; 1093 : #if 0 // Old Doom Legacy code
; 1094 : 			bottom = floorclip[rw_x]-1;
; 1095 : 			if (top <= ceilingclip[rw_x])
; 1096 : 				top = ceilingclip[rw_x]+1;
; 1097 : 			if (top <= bottom && floorplane)
; 1098 : 			{
; 1099 : 				floorplane->top[rw_x] = (INT16)top;
; 1100 : 				floorplane->bottom[rw_x] = (INT16)bottom;
; 1101 : 			}
; 1102 : #else // Spiffy new PRBoom code
; 1103 : 			top  = yh < ceilingclip[rw_x] ? ceilingclip[rw_x] : yh;

  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00108	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _ceilingclip[eax*2]
  00110	39 4d f0	 cmp	 DWORD PTR _yh$[ebp], ecx
  00113	7d 16		 jge	 SHORT $LN70@R_RenderSe
  00115	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  0011b	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _ceilingclip[edx*2]
  00123	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00129	eb 09		 jmp	 SHORT $LN71@R_RenderSe
$LN70@R_RenderSe:
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR _yh$[ebp]
  0012e	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
$LN71@R_RenderSe:
  00134	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv137[ebp]
  0013a	89 55 e4	 mov	 DWORD PTR _top$[ebp], edx

; 1104 : 
; 1105 : 			if (++top <= bottom && floorplane)

  0013d	8b 45 e4	 mov	 eax, DWORD PTR _top$[ebp]
  00140	83 c0 01	 add	 eax, 1
  00143	89 45 e4	 mov	 DWORD PTR _top$[ebp], eax
  00146	8b 4d e4	 mov	 ecx, DWORD PTR _top$[ebp]
  00149	3b 4d e0	 cmp	 ecx, DWORD PTR _bottom$[ebp]
  0014c	7f 34		 jg	 SHORT $LN23@R_RenderSe
  0014e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _floorplane, 0
  00155	74 2b		 je	 SHORT $LN23@R_RenderSe

; 1106 : 			{
; 1107 : 				floorplane->top[rw_x] = (INT16)top;

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _floorplane
  00162	66 8b 55 e4	 mov	 dx, WORD PTR _top$[ebp]
  00166	66 89 54 41 2a	 mov	 WORD PTR [ecx+eax*2+42], dx

; 1108 : 				floorplane->bottom[rw_x] = (INT16)bottom;

  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _floorplane
  00176	66 8b 55 e0	 mov	 dx, WORD PTR _bottom$[ebp]
  0017a	66 89 94 41 2e
	0f 00 00	 mov	 WORD PTR [ecx+eax*2+3886], dx
$LN23@R_RenderSe:

; 1109 : 			}
; 1110 : #endif
; 1111 : 		}
; 1112 : 
; 1113 : 		if (numffloors)

  00182	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numffloors, 0
  00189	0f 84 bc 01 00
	00		 je	 $LN6@R_RenderSe

; 1114 : 		{
; 1115 : 			firstseg->frontscale[rw_x] = frontscale[rw_x];

  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00194	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _firstseg
  0019a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  001a0	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _frontscale[edx*4]
  001a7	89 94 81 7c 01
	00 00		 mov	 DWORD PTR [ecx+eax*4+380], edx

; 1116 : 			top = ceilingclip[rw_x]+1; // PRBoom

  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  001b3	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _ceilingclip[eax*2]
  001bb	83 c1 01	 add	 ecx, 1
  001be	89 4d e4	 mov	 DWORD PTR _top$[ebp], ecx

; 1117 : 			bottom = floorclip[rw_x]-1; // PRBoom

  001c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  001c6	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _floorclip[eax*2]
  001ce	83 e9 01	 sub	 ecx, 1
  001d1	89 4d e0	 mov	 DWORD PTR _bottom$[ebp], ecx

; 1118 : 
; 1119 : 			for (i = 0; i < numffloors; i++)

  001d4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001db	eb 09		 jmp	 SHORT $LN7@R_RenderSe
$LN5@R_RenderSe:
  001dd	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  001e0	83 c0 01	 add	 eax, 1
  001e3	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@R_RenderSe:
  001e6	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  001e9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numffloors
  001ef	0f 8d 56 01 00
	00		 jge	 $LN6@R_RenderSe

; 1120 : 			{
; 1121 : #ifdef POLYOBJECTS_PLANES
; 1122 : 				if (curline->polyseg && !ffloor[i].polyobj)
; 1123 : 					continue;
; 1124 : #endif
; 1125 : 
; 1126 : 				if (ffloor[i].height < viewz)

  001f5	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  001fc	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+4]
  00202	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _viewz
  00208	0f 8d 92 00 00
	00		 jge	 $LN25@R_RenderSe

; 1127 : 				{
; 1128 : 					INT32 top_w = (ffloor[i].f_frac >> HEIGHTBITS) + 1;

  0020e	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  00215	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+20]
  0021b	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  0021e	83 c1 01	 add	 ecx, 1
  00221	89 4d d8	 mov	 DWORD PTR _top_w$7[ebp], ecx

; 1129 : 					INT32 bottom_w = ffloor[i].f_clip[rw_x];

  00224	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0022b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  00231	0f bf 94 48 24
	00 00 00	 movsx	 edx, WORD PTR _ffloor[eax+ecx*2+36]
  00239	89 55 d4	 mov	 DWORD PTR _bottom_w$6[ebp], edx

; 1130 : 
; 1131 : 					if (top_w < top)

  0023c	8b 45 d8	 mov	 eax, DWORD PTR _top_w$7[ebp]
  0023f	3b 45 e4	 cmp	 eax, DWORD PTR _top$[ebp]
  00242	7d 06		 jge	 SHORT $LN27@R_RenderSe

; 1132 : 						top_w = top;

  00244	8b 45 e4	 mov	 eax, DWORD PTR _top$[ebp]
  00247	89 45 d8	 mov	 DWORD PTR _top_w$7[ebp], eax
$LN27@R_RenderSe:

; 1133 : 
; 1134 : 					if (bottom_w > bottom)

  0024a	8b 45 d4	 mov	 eax, DWORD PTR _bottom_w$6[ebp]
  0024d	3b 45 e0	 cmp	 eax, DWORD PTR _bottom$[ebp]
  00250	7e 06		 jle	 SHORT $LN28@R_RenderSe

; 1135 : 						bottom_w = bottom;

  00252	8b 45 e0	 mov	 eax, DWORD PTR _bottom$[ebp]
  00255	89 45 d4	 mov	 DWORD PTR _bottom_w$6[ebp], eax
$LN28@R_RenderSe:

; 1136 : 
; 1137 : 					if (top_w <= bottom_w)

  00258	8b 45 d8	 mov	 eax, DWORD PTR _top_w$7[ebp]
  0025b	3b 45 d4	 cmp	 eax, DWORD PTR _bottom_w$6[ebp]
  0025e	7f 3b		 jg	 SHORT $LN29@R_RenderSe

; 1138 : 					{
; 1139 : 						ffloor[i].plane->top[rw_x] = (INT16)top_w;

  00260	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  00267	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax]
  0026d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  00273	66 8b 45 d8	 mov	 ax, WORD PTR _top_w$7[ebp]
  00277	66 89 44 51 2a	 mov	 WORD PTR [ecx+edx*2+42], ax

; 1140 : 						ffloor[i].plane->bottom[rw_x] = (INT16)bottom_w;

  0027c	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  00283	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax]
  00289	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  0028f	66 8b 45 d4	 mov	 ax, WORD PTR _bottom_w$6[ebp]
  00293	66 89 84 51 2e
	0f 00 00	 mov	 WORD PTR [ecx+edx*2+3886], ax
$LN29@R_RenderSe:

; 1141 : 					}
; 1142 : 				}

  0029b	e9 a6 00 00 00	 jmp	 $LN33@R_RenderSe
$LN25@R_RenderSe:

; 1143 : 				else if (ffloor[i].height > viewz)

  002a0	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  002a7	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+4]
  002ad	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _viewz
  002b3	0f 8e 8d 00 00
	00		 jle	 $LN33@R_RenderSe

; 1144 : 				{
; 1145 : 					INT32 top_w = ffloor[i].c_clip[rw_x] + 1;

  002b9	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  002c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  002c6	0f bf 94 48 24
	0f 00 00	 movsx	 edx, WORD PTR _ffloor[eax+ecx*2+3876]
  002ce	83 c2 01	 add	 edx, 1
  002d1	89 55 d0	 mov	 DWORD PTR _top_w$5[ebp], edx

; 1146 : 					INT32 bottom_w = (ffloor[i].f_frac >> HEIGHTBITS);

  002d4	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  002db	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+20]
  002e1	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  002e4	89 4d cc	 mov	 DWORD PTR _bottom_w$4[ebp], ecx

; 1147 : 
; 1148 : 					if (top_w < top)

  002e7	8b 45 d0	 mov	 eax, DWORD PTR _top_w$5[ebp]
  002ea	3b 45 e4	 cmp	 eax, DWORD PTR _top$[ebp]
  002ed	7d 06		 jge	 SHORT $LN31@R_RenderSe

; 1149 : 						top_w = top;

  002ef	8b 45 e4	 mov	 eax, DWORD PTR _top$[ebp]
  002f2	89 45 d0	 mov	 DWORD PTR _top_w$5[ebp], eax
$LN31@R_RenderSe:

; 1150 : 
; 1151 : 					if (bottom_w > bottom)

  002f5	8b 45 cc	 mov	 eax, DWORD PTR _bottom_w$4[ebp]
  002f8	3b 45 e0	 cmp	 eax, DWORD PTR _bottom$[ebp]
  002fb	7e 06		 jle	 SHORT $LN32@R_RenderSe

; 1152 : 						bottom_w = bottom;

  002fd	8b 45 e0	 mov	 eax, DWORD PTR _bottom$[ebp]
  00300	89 45 cc	 mov	 DWORD PTR _bottom_w$4[ebp], eax
$LN32@R_RenderSe:

; 1153 : 
; 1154 : 					if (top_w <= bottom_w)

  00303	8b 45 d0	 mov	 eax, DWORD PTR _top_w$5[ebp]
  00306	3b 45 cc	 cmp	 eax, DWORD PTR _bottom_w$4[ebp]
  00309	7f 3b		 jg	 SHORT $LN33@R_RenderSe

; 1155 : 					{
; 1156 : 						ffloor[i].plane->top[rw_x] = (INT16)top_w;

  0030b	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  00312	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax]
  00318	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  0031e	66 8b 45 d0	 mov	 ax, WORD PTR _top_w$5[ebp]
  00322	66 89 44 51 2a	 mov	 WORD PTR [ecx+edx*2+42], ax

; 1157 : 						ffloor[i].plane->bottom[rw_x] = (INT16)bottom_w;

  00327	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0032e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax]
  00334	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  0033a	66 8b 45 cc	 mov	 ax, WORD PTR _bottom_w$4[ebp]
  0033e	66 89 84 51 2e
	0f 00 00	 mov	 WORD PTR [ecx+edx*2+3886], ax
$LN33@R_RenderSe:

; 1158 : 					}
; 1159 : 				}
; 1160 : 			}

  00346	e9 92 fe ff ff	 jmp	 $LN5@R_RenderSe
$LN6@R_RenderSe:

; 1161 : 		}
; 1162 : 
; 1163 : 	//SoM: Calculate offsets for Thick fake floors.
; 1164 : 	// calculate texture offset
; 1165 : 	angle = (rw_centerangle + xtoviewangle[rw_x])>>ANGLETOFINESHIFT;

  0034b	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00350	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_centerangle
  00356	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _xtoviewangle[eax*4]
  0035d	c1 e9 13	 shr	 ecx, 19			; 00000013H
  00360	89 4d fc	 mov	 DWORD PTR _angle$[ebp], ecx

; 1166 : 	texturecolumn = rw_offset-FixedMul(FINETANGENT(angle),rw_distance);

  00363	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_distance
  00368	50		 push	 eax
  00369	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  0036c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finetangent[ecx*4]
  00373	52		 push	 edx
  00374	e8 00 00 00 00	 call	 _FixedMul
  00379	83 c4 08	 add	 esp, 8
  0037c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_offset
  00382	2b c8		 sub	 ecx, eax
  00384	89 4d e8	 mov	 DWORD PTR _texturecolumn$[ebp], ecx

; 1167 : 	texturecolumn >>= FRACBITS;

  00387	8b 45 e8	 mov	 eax, DWORD PTR _texturecolumn$[ebp]
  0038a	c1 f8 10	 sar	 eax, 16			; 00000010H
  0038d	89 45 e8	 mov	 DWORD PTR _texturecolumn$[ebp], eax

; 1168 : 
; 1169 : 	// texturecolumn and lighting are independent of wall tiers
; 1170 : 	if (segtextured)

  00390	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _segtextured, 0
  00397	74 72		 je	 SHORT $LN36@R_RenderSe

; 1171 : 	{
; 1172 : 		// calculate lighting
; 1173 : 		pindex = rw_scale>>LIGHTSCALESHIFT;

  00399	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  0039e	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  003a1	89 45 f8	 mov	 DWORD PTR _pindex$[ebp], eax

; 1174 : 
; 1175 : 		if (pindex >=  MAXLIGHTSCALE)

  003a4	83 7d f8 30	 cmp	 DWORD PTR _pindex$[ebp], 48 ; 00000030H
  003a8	72 07		 jb	 SHORT $LN35@R_RenderSe

; 1176 : 			pindex = MAXLIGHTSCALE-1;

  003aa	c7 45 f8 2f 00
	00 00		 mov	 DWORD PTR _pindex$[ebp], 47 ; 0000002fH
$LN35@R_RenderSe:

; 1177 : 
; 1178 : 		dc_colormap = walllights[pindex];

  003b1	8b 45 f8	 mov	 eax, DWORD PTR _pindex$[ebp]
  003b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _walllights
  003ba	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  003bd	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, edx

; 1179 : 		dc_x = rw_x;

  003c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  003c8	a3 00 00 00 00	 mov	 DWORD PTR _dc_x, eax

; 1180 : 		dc_iscale = 0xffffffffu / (unsigned)rw_scale;

  003cd	83 c8 ff	 or	 eax, -1
  003d0	33 d2		 xor	 edx, edx
  003d2	f7 35 00 00 00
	00		 div	 DWORD PTR _rw_scale
  003d8	a3 00 00 00 00	 mov	 DWORD PTR _dc_iscale, eax

; 1181 : 
; 1182 : 		if (frontsector->extra_colormap)

  003dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  003e2	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  003e9	74 20		 je	 SHORT $LN36@R_RenderSe

; 1183 : 			dc_colormap = frontsector->extra_colormap->colormap + (dc_colormap - colormaps);

  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  003f0	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  003f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_colormap
  003fc	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _colormaps
  00402	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  00405	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, edx
$LN36@R_RenderSe:

; 1184 : 	}
; 1185 : 
; 1186 : 	if (dc_numlights)

  0040b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dc_numlights, 0
  00412	0f 84 4b 01 00
	00		 je	 $LN9@R_RenderSe

; 1187 : 	{
; 1188 : 		lighttable_t **xwalllights;
; 1189 : 		for (i = 0; i < dc_numlights; i++)

  00418	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0041f	eb 09		 jmp	 SHORT $LN10@R_RenderSe
$LN8@R_RenderSe:
  00421	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00424	83 c0 01	 add	 eax, 1
  00427	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@R_RenderSe:
  0042a	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  0042d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  00433	0f 8d 2a 01 00
	00		 jge	 $LN9@R_RenderSe

; 1190 : 		{
; 1191 : 			INT32 lightnum;
; 1192 : 			lightnum = (dc_lightlist[i].lightlevel >> LIGHTSEGSHIFT);

  00439	6b 45 dc 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  0043d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  00443	0f bf 54 01 10	 movsx	 edx, WORD PTR [ecx+eax+16]
  00448	c1 fa 03	 sar	 edx, 3
  0044b	89 55 c4	 mov	 DWORD PTR _lightnum$2[ebp], edx

; 1193 : 
; 1194 : 			if (dc_lightlist[i].extra_colormap)

  0044e	6b 45 dc 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00452	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  00458	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  0045d	74 02		 je	 SHORT $LN38@R_RenderSe

; 1195 : 				;

  0045f	eb 42		 jmp	 SHORT $LN42@R_RenderSe
$LN38@R_RenderSe:

; 1196 : 			else if (curline->v1->y == curline->v2->y)

  00461	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00466	8b 08		 mov	 ecx, DWORD PTR [eax]
  00468	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  0046e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00471	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00474	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00477	75 0b		 jne	 SHORT $LN40@R_RenderSe

; 1197 : 				lightnum--;

  00479	8b 45 c4	 mov	 eax, DWORD PTR _lightnum$2[ebp]
  0047c	83 e8 01	 sub	 eax, 1
  0047f	89 45 c4	 mov	 DWORD PTR _lightnum$2[ebp], eax
  00482	eb 1f		 jmp	 SHORT $LN42@R_RenderSe
$LN40@R_RenderSe:

; 1198 : 			else if (curline->v1->x == curline->v2->x)

  00484	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00489	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  00491	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00494	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00496	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00498	75 09		 jne	 SHORT $LN42@R_RenderSe

; 1199 : 				lightnum++;

  0049a	8b 45 c4	 mov	 eax, DWORD PTR _lightnum$2[ebp]
  0049d	83 c0 01	 add	 eax, 1
  004a0	89 45 c4	 mov	 DWORD PTR _lightnum$2[ebp], eax
$LN42@R_RenderSe:

; 1200 : 
; 1201 : 			if (lightnum < 0)

  004a3	83 7d c4 00	 cmp	 DWORD PTR _lightnum$2[ebp], 0
  004a7	7d 13		 jge	 SHORT $LN43@R_RenderSe

; 1202 : 				xwalllights = scalelight[0];

  004a9	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  004ae	6b c8 00	 imul	 ecx, eax, 0
  004b1	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  004b7	89 4d c8	 mov	 DWORD PTR _xwalllights$3[ebp], ecx
  004ba	eb 28		 jmp	 SHORT $LN46@R_RenderSe
$LN43@R_RenderSe:

; 1203 : 			else if (lightnum >= LIGHTLEVELS)

  004bc	83 7d c4 20	 cmp	 DWORD PTR _lightnum$2[ebp], 32 ; 00000020H
  004c0	7c 13		 jl	 SHORT $LN45@R_RenderSe

; 1204 : 				xwalllights = scalelight[LIGHTLEVELS-1];

  004c2	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  004c7	6b c8 1f	 imul	 ecx, eax, 31
  004ca	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  004d0	89 4d c8	 mov	 DWORD PTR _xwalllights$3[ebp], ecx
  004d3	eb 0f		 jmp	 SHORT $LN46@R_RenderSe
$LN45@R_RenderSe:

; 1205 : 			else
; 1206 : 				xwalllights = scalelight[lightnum];

  004d5	69 45 c4 c0 00
	00 00		 imul	 eax, DWORD PTR _lightnum$2[ebp], 192
  004dc	05 00 00 00 00	 add	 eax, OFFSET _scalelight
  004e1	89 45 c8	 mov	 DWORD PTR _xwalllights$3[ebp], eax
$LN46@R_RenderSe:

; 1207 : 
; 1208 : 			pindex = rw_scale>>LIGHTSCALESHIFT;

  004e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  004e9	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  004ec	89 45 f8	 mov	 DWORD PTR _pindex$[ebp], eax

; 1209 : 
; 1210 : 			if (pindex >=  MAXLIGHTSCALE)

  004ef	83 7d f8 30	 cmp	 DWORD PTR _pindex$[ebp], 48 ; 00000030H
  004f3	72 07		 jb	 SHORT $LN47@R_RenderSe

; 1211 : 				pindex = MAXLIGHTSCALE-1;

  004f5	c7 45 f8 2f 00
	00 00		 mov	 DWORD PTR _pindex$[ebp], 47 ; 0000002fH
$LN47@R_RenderSe:

; 1212 : 
; 1213 : 			if (dc_lightlist[i].extra_colormap)

  004fc	6b 45 dc 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00500	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  00506	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  0050b	74 30		 je	 SHORT $LN48@R_RenderSe

; 1214 : 				dc_lightlist[i].rcolormap = dc_lightlist[i].extra_colormap->colormap + (xwalllights[pindex] - colormaps);

  0050d	6b 45 dc 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00511	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  00517	8b 54 01 14	 mov	 edx, DWORD PTR [ecx+eax+20]
  0051b	8b 45 f8	 mov	 eax, DWORD PTR _pindex$[ebp]
  0051e	8b 4d c8	 mov	 ecx, DWORD PTR _xwalllights$3[ebp]
  00521	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00524	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _colormaps
  0052a	03 42 20	 add	 eax, DWORD PTR [edx+32]
  0052d	6b 4d dc 24	 imul	 ecx, DWORD PTR _i$[ebp], 36
  00531	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_lightlist
  00537	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax
  0053b	eb 17		 jmp	 SHORT $LN49@R_RenderSe
$LN48@R_RenderSe:

; 1215 : 			else
; 1216 : 				dc_lightlist[i].rcolormap = xwalllights[pindex];

  0053d	6b 45 dc 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00541	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  00547	8b 55 f8	 mov	 edx, DWORD PTR _pindex$[ebp]
  0054a	8b 75 c8	 mov	 esi, DWORD PTR _xwalllights$3[ebp]
  0054d	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00550	89 54 01 18	 mov	 DWORD PTR [ecx+eax+24], edx
$LN49@R_RenderSe:

; 1217 : 
; 1218 : 			colfunc = R_DrawColumnShadowed_8;

  00554	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _colfunc, OFFSET _R_DrawColumnShadowed_8

; 1219 : 		}

  0055e	e9 be fe ff ff	 jmp	 $LN8@R_RenderSe
$LN9@R_RenderSe:

; 1220 : 	}
; 1221 : 
; 1222 : 	frontscale[rw_x] = rw_scale;

  00563	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00568	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_scale
  0056e	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _frontscale[eax*4], ecx

; 1223 : 
; 1224 : 	// draw the wall tiers
; 1225 : 	if (midtexture && yl <= yh && yh < vid.height && yh > 0)

  00575	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _midtexture, 0
  0057c	0f 84 9b 00 00
	00		 je	 $LN50@R_RenderSe
  00582	8b 45 f4	 mov	 eax, DWORD PTR _yl$[ebp]
  00585	3b 45 f0	 cmp	 eax, DWORD PTR _yh$[ebp]
  00588	0f 8f 8f 00 00
	00		 jg	 $LN50@R_RenderSe
  0058e	8b 45 f0	 mov	 eax, DWORD PTR _yh$[ebp]
  00591	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  00597	0f 8d 80 00 00
	00		 jge	 $LN50@R_RenderSe
  0059d	83 7d f0 00	 cmp	 DWORD PTR _yh$[ebp], 0
  005a1	7e 7a		 jle	 SHORT $LN50@R_RenderSe

; 1226 : 	{
; 1227 : 		// single sided line
; 1228 : 		dc_yl = yl;

  005a3	8b 45 f4	 mov	 eax, DWORD PTR _yl$[ebp]
  005a6	a3 00 00 00 00	 mov	 DWORD PTR _dc_yl, eax

; 1229 : 		dc_yh = yh;

  005ab	8b 45 f0	 mov	 eax, DWORD PTR _yh$[ebp]
  005ae	a3 00 00 00 00	 mov	 DWORD PTR _dc_yh, eax

; 1230 : 		dc_texturemid = rw_midtexturemid;

  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_midtexturemid
  005b8	a3 00 00 00 00	 mov	 DWORD PTR _dc_texturemid, eax

; 1231 : 		dc_source = R_GetColumn(midtexture,texturecolumn);

  005bd	8b 45 e8	 mov	 eax, DWORD PTR _texturecolumn$[ebp]
  005c0	50		 push	 eax
  005c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _midtexture
  005c7	51		 push	 ecx
  005c8	e8 00 00 00 00	 call	 _R_GetColumn
  005cd	83 c4 08	 add	 esp, 8
  005d0	a3 00 00 00 00	 mov	 DWORD PTR _dc_source, eax

; 1232 : 		dc_texheight = textureheight[midtexture]>>FRACBITS;

  005d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _midtexture
  005da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  005e0	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  005e3	c1 fa 10	 sar	 edx, 16			; 00000010H
  005e6	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texheight, edx

; 1233 : 
; 1234 : 		//profile stuff ---------------------------------------------------------
; 1235 : #ifdef TIMING
; 1236 : 		ProfZeroTimer();
; 1237 : #endif
; 1238 : 		colfunc();

  005ec	ff 15 00 00 00
	00		 call	 DWORD PTR _colfunc
  005f2	90		 npad	 1

; 1239 : #ifdef TIMING
; 1240 : 		RDMSR(0x10,&mycount);
; 1241 : 		mytotal += mycount;      //64bit add
; 1242 : 
; 1243 : 		if (nombre--==0)
; 1244 : 			I_Error("R_DrawColumn CPU Spy reports: 0x%d %d\n", *((INT32 *)&mytotal+1),
; 1245 : 				(INT32)mytotal);
; 1246 : #endif
; 1247 : 		//profile stuff ---------------------------------------------------------
; 1248 : 
; 1249 : 		// dont draw anything more for this column, since
; 1250 : 		// a midtexture blocks the view
; 1251 : 		ceilingclip[rw_x] = (INT16)viewheight;

  005f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  005f8	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _viewheight
  005ff	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _ceilingclip[eax*2], cx

; 1252 : 		floorclip[rw_x] = -1;

  00607	83 c8 ff	 or	 eax, -1
  0060a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  00610	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR _floorclip[ecx*2], ax

; 1253 : 	}

  00618	e9 01 02 00 00	 jmp	 $LN63@R_RenderSe
$LN50@R_RenderSe:

; 1254 : 	else
; 1255 : 	{
; 1256 : 		// two sided line
; 1257 : 		if (toptexture)

  0061d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _toptexture, 0
  00624	0f 84 d3 00 00
	00		 je	 $LN52@R_RenderSe

; 1258 : 		{
; 1259 : 			// top wall
; 1260 : 			mid = pixhigh>>HEIGHTBITS;

  0062a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pixhigh
  0062f	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00632	89 45 ec	 mov	 DWORD PTR _mid$[ebp], eax

; 1261 : 			pixhigh += pixhighstep;

  00635	a1 00 00 00 00	 mov	 eax, DWORD PTR _pixhigh
  0063a	03 05 00 00 00
	00		 add	 eax, DWORD PTR _pixhighstep
  00640	a3 00 00 00 00	 mov	 DWORD PTR _pixhigh, eax

; 1262 : 
; 1263 : 			if (mid >= floorclip[rw_x])

  00645	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  0064a	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _floorclip[eax*2]
  00652	39 4d ec	 cmp	 DWORD PTR _mid$[ebp], ecx
  00655	7c 13		 jl	 SHORT $LN54@R_RenderSe

; 1264 : 				mid = floorclip[rw_x]-1;

  00657	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  0065c	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _floorclip[eax*2]
  00664	83 e9 01	 sub	 ecx, 1
  00667	89 4d ec	 mov	 DWORD PTR _mid$[ebp], ecx
$LN54@R_RenderSe:

; 1265 : 
; 1266 : 			if (mid >= yl && yh < vid.height && yh > 0)

  0066a	8b 45 ec	 mov	 eax, DWORD PTR _mid$[ebp]
  0066d	3b 45 f4	 cmp	 eax, DWORD PTR _yl$[ebp]
  00670	7c 74		 jl	 SHORT $LN55@R_RenderSe
  00672	8b 45 f0	 mov	 eax, DWORD PTR _yh$[ebp]
  00675	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  0067b	7d 69		 jge	 SHORT $LN55@R_RenderSe
  0067d	83 7d f0 00	 cmp	 DWORD PTR _yh$[ebp], 0
  00681	7e 63		 jle	 SHORT $LN55@R_RenderSe

; 1267 : 			{
; 1268 : 				dc_yl = yl;

  00683	8b 45 f4	 mov	 eax, DWORD PTR _yl$[ebp]
  00686	a3 00 00 00 00	 mov	 DWORD PTR _dc_yl, eax

; 1269 : 				dc_yh = mid;

  0068b	8b 45 ec	 mov	 eax, DWORD PTR _mid$[ebp]
  0068e	a3 00 00 00 00	 mov	 DWORD PTR _dc_yh, eax

; 1270 : 				dc_texturemid = rw_toptexturemid;

  00693	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_toptexturemid
  00698	a3 00 00 00 00	 mov	 DWORD PTR _dc_texturemid, eax

; 1271 : 				dc_source = R_GetColumn(toptexture,texturecolumn);

  0069d	8b 45 e8	 mov	 eax, DWORD PTR _texturecolumn$[ebp]
  006a0	50		 push	 eax
  006a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _toptexture
  006a7	51		 push	 ecx
  006a8	e8 00 00 00 00	 call	 _R_GetColumn
  006ad	83 c4 08	 add	 esp, 8
  006b0	a3 00 00 00 00	 mov	 DWORD PTR _dc_source, eax

; 1272 : 				dc_texheight = textureheight[toptexture]>>FRACBITS;

  006b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _toptexture
  006ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  006c0	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  006c3	c1 fa 10	 sar	 edx, 16			; 00000010H
  006c6	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texheight, edx

; 1273 : 				colfunc();

  006cc	ff 15 00 00 00
	00		 call	 DWORD PTR _colfunc
  006d2	90		 npad	 1

; 1274 : 				ceilingclip[rw_x] = (INT16)mid;

  006d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  006d8	66 8b 4d ec	 mov	 cx, WORD PTR _mid$[ebp]
  006dc	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _ceilingclip[eax*2], cx

; 1275 : 			}

  006e4	eb 15		 jmp	 SHORT $LN56@R_RenderSe
$LN55@R_RenderSe:

; 1276 : 			else
; 1277 : 				ceilingclip[rw_x] = (INT16)((INT16)yl - 1);

  006e6	0f bf 45 f4	 movsx	 eax, WORD PTR _yl$[ebp]
  006ea	83 e8 01	 sub	 eax, 1
  006ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  006f3	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR _ceilingclip[ecx*2], ax
$LN56@R_RenderSe:

; 1278 : 			}

  006fb	eb 1e		 jmp	 SHORT $LN57@R_RenderSe
$LN52@R_RenderSe:

; 1279 : 			else if (markceiling) // no top wall

  006fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _markceiling, 0
  00704	74 15		 je	 SHORT $LN57@R_RenderSe

; 1280 : 				ceilingclip[rw_x] = (INT16)((INT16)yl - 1);

  00706	0f bf 45 f4	 movsx	 eax, WORD PTR _yl$[ebp]
  0070a	83 e8 01	 sub	 eax, 1
  0070d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  00713	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR _ceilingclip[ecx*2], ax
$LN57@R_RenderSe:

; 1281 : 
; 1282 : 			if (bottomtexture)

  0071b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bottomtexture, 0
  00722	0f 84 d8 00 00
	00		 je	 $LN58@R_RenderSe

; 1283 : 			{
; 1284 : 				// bottom wall
; 1285 : 				mid = (pixlow+HEIGHTUNIT-1)>>HEIGHTBITS;

  00728	a1 00 00 00 00	 mov	 eax, DWORD PTR _pixlow
  0072d	05 ff 0f 00 00	 add	 eax, 4095		; 00000fffH
  00732	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00735	89 45 ec	 mov	 DWORD PTR _mid$[ebp], eax

; 1286 : 				pixlow += pixlowstep;

  00738	a1 00 00 00 00	 mov	 eax, DWORD PTR _pixlow
  0073d	03 05 00 00 00
	00		 add	 eax, DWORD PTR _pixlowstep
  00743	a3 00 00 00 00	 mov	 DWORD PTR _pixlow, eax

; 1287 : 
; 1288 : 				// no space above wall?
; 1289 : 				if (mid <= ceilingclip[rw_x])

  00748	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  0074d	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _ceilingclip[eax*2]
  00755	39 4d ec	 cmp	 DWORD PTR _mid$[ebp], ecx
  00758	7f 13		 jg	 SHORT $LN60@R_RenderSe

; 1290 : 					mid = ceilingclip[rw_x]+1;

  0075a	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  0075f	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _ceilingclip[eax*2]
  00767	83 c1 01	 add	 ecx, 1
  0076a	89 4d ec	 mov	 DWORD PTR _mid$[ebp], ecx
$LN60@R_RenderSe:

; 1291 : 
; 1292 : 				if (mid <= yh && yh < vid.height && yh > 0)

  0076d	8b 45 ec	 mov	 eax, DWORD PTR _mid$[ebp]
  00770	3b 45 f0	 cmp	 eax, DWORD PTR _yh$[ebp]
  00773	7f 74		 jg	 SHORT $LN61@R_RenderSe
  00775	8b 45 f0	 mov	 eax, DWORD PTR _yh$[ebp]
  00778	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  0077e	7d 69		 jge	 SHORT $LN61@R_RenderSe
  00780	83 7d f0 00	 cmp	 DWORD PTR _yh$[ebp], 0
  00784	7e 63		 jle	 SHORT $LN61@R_RenderSe

; 1293 : 				{
; 1294 : 					dc_yl = mid;

  00786	8b 45 ec	 mov	 eax, DWORD PTR _mid$[ebp]
  00789	a3 00 00 00 00	 mov	 DWORD PTR _dc_yl, eax

; 1295 : 					dc_yh = yh;

  0078e	8b 45 f0	 mov	 eax, DWORD PTR _yh$[ebp]
  00791	a3 00 00 00 00	 mov	 DWORD PTR _dc_yh, eax

; 1296 : 					dc_texturemid = rw_bottomtexturemid;

  00796	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_bottomtexturemid
  0079b	a3 00 00 00 00	 mov	 DWORD PTR _dc_texturemid, eax

; 1297 : 					dc_source = R_GetColumn(bottomtexture,

  007a0	8b 45 e8	 mov	 eax, DWORD PTR _texturecolumn$[ebp]
  007a3	50		 push	 eax
  007a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bottomtexture
  007aa	51		 push	 ecx
  007ab	e8 00 00 00 00	 call	 _R_GetColumn
  007b0	83 c4 08	 add	 esp, 8
  007b3	a3 00 00 00 00	 mov	 DWORD PTR _dc_source, eax

; 1298 : 						texturecolumn);
; 1299 : 					dc_texheight = textureheight[bottomtexture]>>FRACBITS;

  007b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _bottomtexture
  007bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  007c3	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  007c6	c1 fa 10	 sar	 edx, 16			; 00000010H
  007c9	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texheight, edx

; 1300 : 					colfunc();

  007cf	ff 15 00 00 00
	00		 call	 DWORD PTR _colfunc
  007d5	90		 npad	 1

; 1301 : 					floorclip[rw_x] = (INT16)mid;

  007d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  007db	66 8b 4d ec	 mov	 cx, WORD PTR _mid$[ebp]
  007df	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _floorclip[eax*2], cx

; 1302 : 				}

  007e7	eb 15		 jmp	 SHORT $LN62@R_RenderSe
$LN61@R_RenderSe:

; 1303 : 				else
; 1304 : 					floorclip[rw_x] = (INT16)((INT16)yh + 1);

  007e9	0f bf 45 f0	 movsx	 eax, WORD PTR _yh$[ebp]
  007ed	83 c0 01	 add	 eax, 1
  007f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  007f6	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR _floorclip[ecx*2], ax
$LN62@R_RenderSe:

; 1305 : 			}

  007fe	eb 1e		 jmp	 SHORT $LN63@R_RenderSe
$LN58@R_RenderSe:

; 1306 : 			else if (markfloor) // no bottom wall

  00800	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _markfloor, 0
  00807	74 15		 je	 SHORT $LN63@R_RenderSe

; 1307 : 				floorclip[rw_x] = (INT16)((INT16)yh + 1);

  00809	0f bf 45 f0	 movsx	 eax, WORD PTR _yh$[ebp]
  0080d	83 c0 01	 add	 eax, 1
  00810	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  00816	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR _floorclip[ecx*2], ax
$LN63@R_RenderSe:

; 1308 : 		}
; 1309 : 
; 1310 : 		if (maskedtexture || numthicksides)

  0081e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _maskedtexture, 0
  00825	75 09		 jne	 SHORT $LN65@R_RenderSe
  00827	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numthicksides, 0
  0082e	74 13		 je	 SHORT $LN64@R_RenderSe
$LN65@R_RenderSe:

; 1311 : 		{
; 1312 : 			// save texturecol
; 1313 : 			//  for backdrawing of masked mid texture
; 1314 : 			maskedtexturecol[rw_x] = (INT16)texturecolumn;

  00830	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00835	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maskedtexturecol
  0083b	66 8b 55 e8	 mov	 dx, WORD PTR _texturecolumn$[ebp]
  0083f	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN64@R_RenderSe:

; 1315 : 		}
; 1316 : 
; 1317 : 		if (dc_numlights)

  00843	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dc_numlights, 0
  0084a	0f 84 84 00 00
	00		 je	 $LN12@R_RenderSe

; 1318 : 		{
; 1319 : 			for (i = 0; i < dc_numlights; i++)

  00850	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00857	eb 09		 jmp	 SHORT $LN13@R_RenderSe
$LN11@R_RenderSe:
  00859	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  0085c	83 c0 01	 add	 eax, 1
  0085f	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN13@R_RenderSe:
  00862	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00865	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  0086b	7d 67		 jge	 SHORT $LN12@R_RenderSe

; 1320 : 			{
; 1321 : 				dc_lightlist[i].height += dc_lightlist[i].heightstep;

  0086d	6b 45 dc 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00871	6b 4d dc 24	 imul	 ecx, DWORD PTR _i$[ebp], 36
  00875	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_lightlist
  0087b	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0087e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_lightlist
  00884	03 44 0a 04	 add	 eax, DWORD PTR [edx+ecx+4]
  00888	6b 4d dc 24	 imul	 ecx, DWORD PTR _i$[ebp], 36
  0088c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_lightlist
  00892	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 1322 : 				if (dc_lightlist[i].flags & FF_SOLID)

  00895	6b 45 dc 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00899	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  0089f	8b 54 01 1c	 mov	 edx, DWORD PTR [ecx+eax+28]
  008a3	83 e2 06	 and	 edx, 6
  008a6	74 2a		 je	 SHORT $LN67@R_RenderSe

; 1323 : 					dc_lightlist[i].botheight += dc_lightlist[i].botheightstep;

  008a8	6b 45 dc 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  008ac	6b 4d dc 24	 imul	 ecx, DWORD PTR _i$[ebp], 36
  008b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_lightlist
  008b6	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  008ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_lightlist
  008c0	03 44 0a 0c	 add	 eax, DWORD PTR [edx+ecx+12]
  008c4	6b 4d dc 24	 imul	 ecx, DWORD PTR _i$[ebp], 36
  008c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_lightlist
  008ce	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
$LN67@R_RenderSe:

; 1324 : 			}

  008d2	eb 85		 jmp	 SHORT $LN11@R_RenderSe
$LN12@R_RenderSe:

; 1325 : 		}
; 1326 : 
; 1327 : 		for (i = 0; i < MAXFFLOORS; i++)

  008d4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  008db	eb 09		 jmp	 SHORT $LN16@R_RenderSe
$LN14@R_RenderSe:
  008dd	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  008e0	83 c0 01	 add	 eax, 1
  008e3	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN16@R_RenderSe:
  008e6	83 7d dc 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  008ea	0f 8d c0 00 00
	00		 jge	 $LN15@R_RenderSe

; 1328 : 		{
; 1329 : #ifdef POLYOBJECTS_PLANES
; 1330 : 			if (curline->polyseg && !ffloor[i].polyobj)
; 1331 : 				continue;
; 1332 : #endif
; 1333 : 
; 1334 : 			if (ffloor[i].mark)

  008f0	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  008f7	83 b8 08 00 00
	00 00		 cmp	 DWORD PTR _ffloor[eax+8], 0
  008fe	0f 84 80 00 00
	00		 je	 $LN68@R_RenderSe

; 1335 : 			{
; 1336 : 				INT32 y_w = ffloor[i].b_frac >> HEIGHTBITS;

  00904	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0090b	8b 88 1c 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+28]
  00911	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00914	89 4d c0	 mov	 DWORD PTR _y_w$1[ebp], ecx

; 1337 : 
; 1338 : 				ffloor[i].f_clip[rw_x] = ffloor[i].c_clip[rw_x] = (INT16)(y_w & 0xFFFF);

  00917	8b 45 c0	 mov	 eax, DWORD PTR _y_w$1[ebp]
  0091a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0091f	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv468[ebp], eax
  00925	69 4d dc 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  0092c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  00932	66 8b 85 7c ff
	ff ff		 mov	 ax, WORD PTR tv468[ebp]
  00939	66 89 84 51 24
	0f 00 00	 mov	 WORD PTR _ffloor[ecx+edx*2+3876], ax
  00941	69 4d dc 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  00948	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  0094e	66 8b 85 7c ff
	ff ff		 mov	 ax, WORD PTR tv468[ebp]
  00955	66 89 84 51 24
	00 00 00	 mov	 WORD PTR _ffloor[ecx+edx*2+36], ax

; 1339 : 				ffloor[i].b_frac += ffloor[i].b_step;

  0095d	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  00964	69 4d dc 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  0096b	8b 90 1c 00 00
	00		 mov	 edx, DWORD PTR _ffloor[eax+28]
  00971	03 91 20 00 00
	00		 add	 edx, DWORD PTR _ffloor[ecx+32]
  00977	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0097e	89 90 1c 00 00
	00		 mov	 DWORD PTR _ffloor[eax+28], edx
$LN68@R_RenderSe:

; 1340 : 			}
; 1341 : 
; 1342 : 			ffloor[i].f_frac += ffloor[i].f_step;

  00984	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0098b	69 4d dc 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  00992	8b 90 14 00 00
	00		 mov	 edx, DWORD PTR _ffloor[eax+20]
  00998	03 91 18 00 00
	00		 add	 edx, DWORD PTR _ffloor[ecx+24]
  0099e	69 45 dc 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  009a5	89 90 14 00 00
	00		 mov	 DWORD PTR _ffloor[eax+20], edx

; 1343 : 		}

  009ab	e9 2d ff ff ff	 jmp	 $LN14@R_RenderSe
$LN15@R_RenderSe:

; 1344 : 
; 1345 : 		rw_scale += rw_scalestep;

  009b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  009b5	03 05 00 00 00
	00		 add	 eax, DWORD PTR _rw_scalestep
  009bb	a3 00 00 00 00	 mov	 DWORD PTR _rw_scale, eax

; 1346 : 		topfrac += topstep;

  009c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _topfrac
  009c5	03 05 00 00 00
	00		 add	 eax, DWORD PTR _topstep
  009cb	a3 00 00 00 00	 mov	 DWORD PTR _topfrac, eax

; 1347 : 		bottomfrac += bottomstep;

  009d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _bottomfrac
  009d5	03 05 00 00 00
	00		 add	 eax, DWORD PTR _bottomstep
  009db	a3 00 00 00 00	 mov	 DWORD PTR _bottomfrac, eax

; 1348 : 	}

  009e0	e9 30 f6 ff ff	 jmp	 $LN2@R_RenderSe
$LN3@R_RenderSe:

; 1349 : }

  009e5	5f		 pop	 edi
  009e6	5e		 pop	 esi
  009e7	5b		 pop	 ebx
  009e8	8b e5		 mov	 esp, ebp
  009ea	5d		 pop	 ebp
  009eb	c3		 ret	 0
_R_RenderSegLoop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_segs.c
;	COMDAT _R_Render2sidedMultiPatchColumn
_TEXT	SEGMENT
_bottomscreen$ = -8					; size = 4
_topscreen$ = -4					; size = 4
_column$ = 8						; size = 4
_R_Render2sidedMultiPatchColumn PROC			; COMDAT

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 238  : 	INT32 topscreen, bottomscreen;
; 239  : 
; 240  : 	topscreen = sprtopscreen; // + spryscale*column->topdelta;  topdelta is 0 for the wall

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _sprtopscreen
  0000e	89 45 fc	 mov	 DWORD PTR _topscreen$[ebp], eax

; 241  : 	bottomscreen = topscreen + spryscale * column2s_length;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00016	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _column2s_length
  0001d	03 45 fc	 add	 eax, DWORD PTR _topscreen$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR _bottomscreen$[ebp], eax

; 242  : 
; 243  : 	dc_yl = (sprtopscreen+FRACUNIT-1)>>FRACBITS;

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _sprtopscreen
  00028	05 ff ff 00 00	 add	 eax, 65535		; 0000ffffH
  0002d	c1 f8 10	 sar	 eax, 16			; 00000010H
  00030	a3 00 00 00 00	 mov	 DWORD PTR _dc_yl, eax

; 244  : 	dc_yh = (bottomscreen-1)>>FRACBITS;

  00035	8b 45 f8	 mov	 eax, DWORD PTR _bottomscreen$[ebp]
  00038	83 e8 01	 sub	 eax, 1
  0003b	c1 f8 10	 sar	 eax, 16			; 00000010H
  0003e	a3 00 00 00 00	 mov	 DWORD PTR _dc_yh, eax

; 245  : 
; 246  : 	if (windowtop != INT32_MAX && windowbottom != INT32_MAX)

  00043	81 3d 00 00 00
	00 ff ff ff 7f	 cmp	 DWORD PTR _windowtop, 2147483647 ; 7fffffffH
  0004d	74 2e		 je	 SHORT $LN2@R_Render2s
  0004f	81 3d 00 00 00
	00 ff ff ff 7f	 cmp	 DWORD PTR _windowbottom, 2147483647 ; 7fffffffH
  00059	74 22		 je	 SHORT $LN2@R_Render2s

; 247  : 	{
; 248  : 		dc_yl = ((windowtop + FRACUNIT)>>FRACBITS);

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowtop
  00060	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  00065	c1 f8 10	 sar	 eax, 16			; 00000010H
  00068	a3 00 00 00 00	 mov	 DWORD PTR _dc_yl, eax

; 249  : 		dc_yh = (windowbottom - 1)>>FRACBITS;

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowbottom
  00072	83 e8 01	 sub	 eax, 1
  00075	c1 f8 10	 sar	 eax, 16			; 00000010H
  00078	a3 00 00 00 00	 mov	 DWORD PTR _dc_yh, eax
$LN2@R_Render2s:

; 250  : 	}
; 251  : 
; 252  : 	if (dc_yh >= mfloorclip[dc_x])

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mfloorclip
  00088	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  0008c	39 15 00 00 00
	00		 cmp	 DWORD PTR _dc_yh, edx
  00092	7c 18		 jl	 SHORT $LN3@R_Render2s

; 253  : 		dc_yh =  mfloorclip[dc_x] - 1;

  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mfloorclip
  0009f	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  000a3	83 ea 01	 sub	 edx, 1
  000a6	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_yh, edx
$LN3@R_Render2s:

; 254  : 	if (dc_yl <= mceilingclip[dc_x])

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mceilingclip
  000b7	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  000bb	39 15 00 00 00
	00		 cmp	 DWORD PTR _dc_yl, edx
  000c1	7f 18		 jg	 SHORT $LN4@R_Render2s

; 255  : 		dc_yl =  mceilingclip[dc_x] + 1;

  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  000c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mceilingclip
  000ce	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  000d2	83 c2 01	 add	 edx, 1
  000d5	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_yl, edx
$LN4@R_Render2s:

; 256  : 
; 257  : 	if (dc_yl >= vid.height || dc_yh < 0)

  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_yl
  000e0	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  000e6	7d 09		 jge	 SHORT $LN6@R_Render2s
  000e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dc_yh, 0
  000ef	7d 02		 jge	 SHORT $LN5@R_Render2s
$LN6@R_Render2s:

; 258  : 		return;

  000f1	eb 4a		 jmp	 SHORT $LN9@R_Render2s
$LN5@R_Render2s:

; 259  : 
; 260  : 	if (dc_yl <= dc_yh && dc_yh < vid.height && dc_yh > 0)

  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_yl
  000f8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_yh
  000fe	7f 3d		 jg	 SHORT $LN9@R_Render2s
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_yh
  00105	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  0010b	7d 30		 jge	 SHORT $LN9@R_Render2s
  0010d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dc_yh, 0
  00114	7e 27		 jle	 SHORT $LN9@R_Render2s

; 261  : 	{
; 262  : 		dc_source = (UINT8 *)column + 3;

  00116	8b 45 08	 mov	 eax, DWORD PTR _column$[ebp]
  00119	83 c0 03	 add	 eax, 3
  0011c	a3 00 00 00 00	 mov	 DWORD PTR _dc_source, eax

; 263  : 
; 264  : 		if (colfunc == wallcolfunc)

  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR _colfunc
  00126	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _wallcolfunc
  0012c	75 08		 jne	 SHORT $LN8@R_Render2s

; 265  : 			R_Draw2sMultiPatchColumn_8();

  0012e	e8 00 00 00 00	 call	 _R_Draw2sMultiPatchColumn_8
  00133	90		 npad	 1
  00134	eb 07		 jmp	 SHORT $LN9@R_Render2s
$LN8@R_Render2s:

; 266  : 		else
; 267  : 			colfunc();

  00136	ff 15 00 00 00
	00		 call	 DWORD PTR _colfunc
  0013c	90		 npad	 1
$LN9@R_Render2s:

; 268  : 	}
; 269  : }

  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5b		 pop	 ebx
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
_R_Render2sidedMultiPatchColumn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_segs.c
;	COMDAT _R_StoreWallRange
_TEXT	SEGMENT
tv1419 = -168						; size = 4
tv1343 = -168						; size = 4
tv940 = -168						; size = 4
tv797 = -168						; size = 4
tv568 = -168						; size = 4
tv562 = -168						; size = 4
tv157 = -168						; size = 4
tv73 = -168						; size = 4
tv1408 = -168						; size = 4
_rover$1 = -100						; size = 4
_highcut$2 = -96					; size = 4
_lowcut$3 = -92						; size = 4
_r2$4 = -88						; size = 4
_rover$5 = -84						; size = 4
_def$6 = -80						; size = 4
_oldlast$7 = -76					; size = 4
_oldopenings$8 = -72					; size = 4
_ds$9 = -68						; size = 4
_need$10 = -64						; size = 4
_pos$11 = -60						; size = 4
_newmax$12 = -56					; size = 4
_pos2$13 = -52						; size = 4
_pos$14 = -48						; size = 4
_lheight$ = -44						; size = 4
_rlight$ = -40						; size = 4
_light$ = -36						; size = 4
_p$ = -32						; size = 4
_i$ = -28						; size = 4
_lightnum$ = -24					; size = 4
_vtop$ = -20						; size = 4
_offsetangle$ = -16					; size = 4
_distangle$ = -12					; size = 4
_sineval$ = -8						; size = 4
_hyp$ = -4						; size = 4
_start$ = 8						; size = 4
_stop$ = 12						; size = 4
_R_StoreWallRange PROC					; COMDAT

; 1357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1358 : 	fixed_t       hyp;
; 1359 : 	fixed_t       sineval;
; 1360 : 	angle_t       distangle, offsetangle;
; 1361 : 	fixed_t       vtop;
; 1362 : 	INT32           lightnum;
; 1363 : 	INT32           i, p;
; 1364 : 	lightlist_t   *light;
; 1365 : 	r_lightlist_t *rlight;
; 1366 : 	fixed_t       lheight;
; 1367 : 	static size_t maxdrawsegs = 0;
; 1368 : 
; 1369 : 	if (ds_p == drawsegs+maxdrawsegs)

  0000c	69 05 00 00 00
	00 7c 1f 00 00	 imul	 eax, DWORD PTR ?maxdrawsegs@?1??R_StoreWallRange@@9@9, 8060
  00016	03 05 00 00 00
	00		 add	 eax, DWORD PTR _drawsegs
  0001c	39 05 00 00 00
	00		 cmp	 DWORD PTR _ds_p, eax
  00022	0f 85 e4 00 00
	00		 jne	 $LN52@R_StoreWal

; 1370 : 	{
; 1371 : 		size_t pos = ds_p - drawsegs;

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0002d	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _drawsegs
  00033	99		 cdq
  00034	b9 7c 1f 00 00	 mov	 ecx, 8060		; 00001f7cH
  00039	f7 f9		 idiv	 ecx
  0003b	89 45 d0	 mov	 DWORD PTR _pos$14[ebp], eax

; 1372 : 		size_t pos2 = firstnewseg - drawsegs;

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _firstnewseg
  00043	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _drawsegs
  00049	99		 cdq
  0004a	b9 7c 1f 00 00	 mov	 ecx, 8060		; 00001f7cH
  0004f	f7 f9		 idiv	 ecx
  00051	89 45 cc	 mov	 DWORD PTR _pos2$13[ebp], eax

; 1373 : 		size_t newmax = maxdrawsegs ? maxdrawsegs*2 : 128;

  00054	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?maxdrawsegs@?1??R_StoreWallRange@@9@9, 0
  0005b	74 0f		 je	 SHORT $LN218@R_StoreWal
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?maxdrawsegs@?1??R_StoreWallRange@@9@9
  00062	d1 e0		 shl	 eax, 1
  00064	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
  0006a	eb 0a		 jmp	 SHORT $LN219@R_StoreWal
$LN218@R_StoreWal:
  0006c	c7 85 58 ff ff
	ff 80 00 00 00	 mov	 DWORD PTR tv73[ebp], 128 ; 00000080H
$LN219@R_StoreWal:
  00076	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0007c	89 4d c8	 mov	 DWORD PTR _newmax$12[ebp], ecx

; 1374 : 		if (firstseg)

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _firstseg, 0
  00086	74 18		 je	 SHORT $LN51@R_StoreWal

; 1375 : 			firstseg = (drawseg_t *)(firstseg - drawsegs);

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR _firstseg
  0008d	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _drawsegs
  00093	99		 cdq
  00094	b9 7c 1f 00 00	 mov	 ecx, 8060		; 00001f7cH
  00099	f7 f9		 idiv	 ecx
  0009b	a3 00 00 00 00	 mov	 DWORD PTR _firstseg, eax
$LN51@R_StoreWal:

; 1376 : 		drawsegs = Z_Realloc(drawsegs, newmax*sizeof (*drawsegs), PU_STATIC, NULL);

  000a0	6a 00		 push	 0
  000a2	6a 00		 push	 0
  000a4	6a 01		 push	 1
  000a6	69 45 c8 7c 1f
	00 00		 imul	 eax, DWORD PTR _newmax$12[ebp], 8060
  000ad	50		 push	 eax
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _drawsegs
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 _Z_ReallocAlign
  000ba	83 c4 14	 add	 esp, 20			; 00000014H
  000bd	a3 00 00 00 00	 mov	 DWORD PTR _drawsegs, eax

; 1377 : 		ds_p = drawsegs + pos;

  000c2	69 45 d0 7c 1f
	00 00		 imul	 eax, DWORD PTR _pos$14[ebp], 8060
  000c9	03 05 00 00 00
	00		 add	 eax, DWORD PTR _drawsegs
  000cf	a3 00 00 00 00	 mov	 DWORD PTR _ds_p, eax

; 1378 : 		firstnewseg = drawsegs + pos2;

  000d4	69 45 cc 7c 1f
	00 00		 imul	 eax, DWORD PTR _pos2$13[ebp], 8060
  000db	03 05 00 00 00
	00		 add	 eax, DWORD PTR _drawsegs
  000e1	a3 00 00 00 00	 mov	 DWORD PTR _firstnewseg, eax

; 1379 : 		maxdrawsegs = newmax;

  000e6	8b 45 c8	 mov	 eax, DWORD PTR _newmax$12[ebp]
  000e9	a3 00 00 00 00	 mov	 DWORD PTR ?maxdrawsegs@?1??R_StoreWallRange@@9@9, eax

; 1380 : 		if (firstseg)

  000ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _firstseg, 0
  000f5	74 15		 je	 SHORT $LN52@R_StoreWal

; 1381 : 			firstseg = drawsegs + (size_t)firstseg;

  000f7	69 05 00 00 00
	00 7c 1f 00 00	 imul	 eax, DWORD PTR _firstseg, 8060
  00101	03 05 00 00 00
	00		 add	 eax, DWORD PTR _drawsegs
  00107	a3 00 00 00 00	 mov	 DWORD PTR _firstseg, eax
$LN52@R_StoreWal:

; 1382 : 	}
; 1383 : 
; 1384 : 	sidedef = curline->sidedef;

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00111	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00114	89 0d 00 00 00
	00		 mov	 DWORD PTR _sidedef, ecx

; 1385 : 	linedef = curline->linedef;

  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0011f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00122	89 0d 00 00 00
	00		 mov	 DWORD PTR _linedef, ecx

; 1386 : 
; 1387 : 	// calculate rw_distance for scale calculation
; 1388 : 	rw_normalangle = curline->angle + ANGLE_90;

  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0012d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00130	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  00136	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_normalangle, ecx

; 1389 : 	offsetangle = abs((INT32)(rw_normalangle-rw_angle1));

  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_normalangle
  00141	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _rw_angle1
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 _abs
  0014d	83 c4 04	 add	 esp, 4
  00150	89 45 f0	 mov	 DWORD PTR _offsetangle$[ebp], eax

; 1390 : 
; 1391 : 	if (offsetangle > ANGLE_90)

  00153	81 7d f0 00 00
	00 40		 cmp	 DWORD PTR _offsetangle$[ebp], 1073741824 ; 40000000H
  0015a	76 07		 jbe	 SHORT $LN53@R_StoreWal

; 1392 : 		offsetangle = ANGLE_90;

  0015c	c7 45 f0 00 00
	00 40		 mov	 DWORD PTR _offsetangle$[ebp], 1073741824 ; 40000000H
$LN53@R_StoreWal:

; 1393 : 
; 1394 : 	distangle = ANGLE_90 - offsetangle;

  00163	b8 00 00 00 40	 mov	 eax, 1073741824		; 40000000H
  00168	2b 45 f0	 sub	 eax, DWORD PTR _offsetangle$[ebp]
  0016b	89 45 f4	 mov	 DWORD PTR _distangle$[ebp], eax

; 1395 : 	hyp = R_PointToDist (curline->v1->x, curline->v1->y);

  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00173	8b 08		 mov	 ecx, DWORD PTR [eax]
  00175	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00178	52		 push	 edx
  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0017e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00180	8b 11		 mov	 edx, DWORD PTR [ecx]
  00182	52		 push	 edx
  00183	e8 00 00 00 00	 call	 _R_PointToDist
  00188	83 c4 08	 add	 esp, 8
  0018b	89 45 fc	 mov	 DWORD PTR _hyp$[ebp], eax

; 1396 : 	sineval = FINESINE(distangle>>ANGLETOFINESHIFT);

  0018e	8b 45 f4	 mov	 eax, DWORD PTR _distangle$[ebp]
  00191	c1 e8 13	 shr	 eax, 19			; 00000013H
  00194	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0019b	89 4d f8	 mov	 DWORD PTR _sineval$[ebp], ecx

; 1397 : 	rw_distance = FixedMul (hyp, sineval);

  0019e	8b 45 f8	 mov	 eax, DWORD PTR _sineval$[ebp]
  001a1	50		 push	 eax
  001a2	8b 4d fc	 mov	 ecx, DWORD PTR _hyp$[ebp]
  001a5	51		 push	 ecx
  001a6	e8 00 00 00 00	 call	 _FixedMul
  001ab	83 c4 08	 add	 esp, 8
  001ae	a3 00 00 00 00	 mov	 DWORD PTR _rw_distance, eax

; 1398 : 
; 1399 : 
; 1400 : 	ds_p->x1 = rw_x = start;

  001b3	8b 45 08	 mov	 eax, DWORD PTR _start$[ebp]
  001b6	a3 00 00 00 00	 mov	 DWORD PTR _rw_x, eax
  001bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  001c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_x
  001c7	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1401 : 	ds_p->x2 = stop;

  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  001cf	8b 4d 0c	 mov	 ecx, DWORD PTR _stop$[ebp]
  001d2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1402 : 	ds_p->curline = curline;

  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  001da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _curline
  001e0	89 08		 mov	 DWORD PTR [eax], ecx

; 1403 : 	rw_stopx = stop+1;

  001e2	8b 45 0c	 mov	 eax, DWORD PTR _stop$[ebp]
  001e5	83 c0 01	 add	 eax, 1
  001e8	a3 00 00 00 00	 mov	 DWORD PTR _rw_stopx, eax

; 1404 : 
; 1405 : 	//SoM: Code to remove limits on openings.
; 1406 : 	{
; 1407 : 		size_t pos = lastopening - openings;

  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastopening
  001f2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _openings
  001f8	d1 f8		 sar	 eax, 1
  001fa	89 45 c4	 mov	 DWORD PTR _pos$11[ebp], eax

; 1408 : 		size_t need = (rw_stopx - start)*4 + pos;

  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  00202	2b 45 08	 sub	 eax, DWORD PTR _start$[ebp]
  00205	8b 4d c4	 mov	 ecx, DWORD PTR _pos$11[ebp]
  00208	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0020b	89 55 c0	 mov	 DWORD PTR _need$10[ebp], edx

; 1409 : 		if (need > maxopenings)

  0020e	8b 45 c0	 mov	 eax, DWORD PTR _need$10[ebp]
  00211	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _maxopenings
  00217	0f 86 ba 01 00
	00		 jbe	 $LN6@R_StoreWal

; 1410 : 		{
; 1411 : 			drawseg_t *ds;  //needed for fix from *cough* zdoom *cough*
; 1412 : 			INT16 *oldopenings = openings;

  0021d	a1 00 00 00 00	 mov	 eax, DWORD PTR _openings
  00222	89 45 b8	 mov	 DWORD PTR _oldopenings$8[ebp], eax

; 1413 : 			INT16 *oldlast = lastopening;

  00225	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastopening
  0022a	89 45 b4	 mov	 DWORD PTR _oldlast$7[ebp], eax
$LN4@R_StoreWal:

; 1414 : 
; 1415 : 			do
; 1416 : 				maxopenings = maxopenings ? maxopenings*2 : 16384;

  0022d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _maxopenings, 0
  00234	74 0f		 je	 SHORT $LN220@R_StoreWal
  00236	a1 00 00 00 00	 mov	 eax, DWORD PTR _maxopenings
  0023b	d1 e0		 shl	 eax, 1
  0023d	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  00243	eb 0a		 jmp	 SHORT $LN221@R_StoreWal
$LN220@R_StoreWal:
  00245	c7 85 58 ff ff
	ff 00 40 00 00	 mov	 DWORD PTR tv157[ebp], 16384 ; 00004000H
$LN221@R_StoreWal:
  0024f	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv157[ebp]
  00255	89 0d 00 00 00
	00		 mov	 DWORD PTR _maxopenings, ecx

; 1417 : 			while (need > maxopenings);

  0025b	8b 45 c0	 mov	 eax, DWORD PTR _need$10[ebp]
  0025e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _maxopenings
  00264	77 c7		 ja	 SHORT $LN4@R_StoreWal

; 1418 : 			openings = Z_Realloc(openings, maxopenings * sizeof (*openings), PU_STATIC, NULL);

  00266	6a 00		 push	 0
  00268	6a 00		 push	 0
  0026a	6a 01		 push	 1
  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR _maxopenings
  00271	d1 e0		 shl	 eax, 1
  00273	50		 push	 eax
  00274	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _openings
  0027a	51		 push	 ecx
  0027b	e8 00 00 00 00	 call	 _Z_ReallocAlign
  00280	83 c4 14	 add	 esp, 20			; 00000014H
  00283	a3 00 00 00 00	 mov	 DWORD PTR _openings, eax

; 1419 : 			lastopening = openings + pos;

  00288	8b 45 c4	 mov	 eax, DWORD PTR _pos$11[ebp]
  0028b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _openings
  00291	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00294	89 15 00 00 00
	00		 mov	 DWORD PTR _lastopening, edx

; 1420 : 
; 1421 : 			// borrowed fix from *cough* zdoom *cough*
; 1422 : 			// [RH] We also need to adjust the openings pointers that
; 1423 : 			//    were already stored in drawsegs.
; 1424 : 			for (ds = drawsegs; ds < ds_p; ds++)

  0029a	a1 00 00 00 00	 mov	 eax, DWORD PTR _drawsegs
  0029f	89 45 bc	 mov	 DWORD PTR _ds$9[ebp], eax
  002a2	eb 0b		 jmp	 SHORT $LN7@R_StoreWal
$LN5@R_StoreWal:
  002a4	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  002a7	05 7c 1f 00 00	 add	 eax, 8060		; 00001f7cH
  002ac	89 45 bc	 mov	 DWORD PTR _ds$9[ebp], eax
$LN7@R_StoreWal:
  002af	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  002b2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _ds_p
  002b8	0f 83 19 01 00
	00		 jae	 $LN6@R_StoreWal

; 1425 : 			{
; 1426 : #define ADJUST(p) if (ds->p + ds->x1 >= oldopenings && ds->p + ds->x1 <= oldlast) ds->p = ds->p - oldopenings + openings;
; 1427 : 				ADJUST(maskedtexturecol);

  002be	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  002c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002c4	8b 55 bc	 mov	 edx, DWORD PTR _ds$9[ebp]
  002c7	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  002ca	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  002cd	3b 4d b8	 cmp	 ecx, DWORD PTR _oldopenings$8[ebp]
  002d0	72 2e		 jb	 SHORT $LN55@R_StoreWal
  002d2	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  002d5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002d8	8b 55 bc	 mov	 edx, DWORD PTR _ds$9[ebp]
  002db	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  002de	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  002e1	3b 4d b4	 cmp	 ecx, DWORD PTR _oldlast$7[ebp]
  002e4	77 1a		 ja	 SHORT $LN55@R_StoreWal
  002e6	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  002e9	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  002ec	2b 4d b8	 sub	 ecx, DWORD PTR _oldopenings$8[ebp]
  002ef	d1 f9		 sar	 ecx, 1
  002f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _openings
  002f7	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  002fa	8b 4d bc	 mov	 ecx, DWORD PTR _ds$9[ebp]
  002fd	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
$LN55@R_StoreWal:

; 1428 : 				ADJUST(sprtopclip);

  00300	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  00303	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00306	8b 55 bc	 mov	 edx, DWORD PTR _ds$9[ebp]
  00309	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0030c	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  0030f	3b 4d b8	 cmp	 ecx, DWORD PTR _oldopenings$8[ebp]
  00312	72 2e		 jb	 SHORT $LN56@R_StoreWal
  00314	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  00317	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0031a	8b 55 bc	 mov	 edx, DWORD PTR _ds$9[ebp]
  0031d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00320	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00323	3b 4d b4	 cmp	 ecx, DWORD PTR _oldlast$7[ebp]
  00326	77 1a		 ja	 SHORT $LN56@R_StoreWal
  00328	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  0032b	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0032e	2b 4d b8	 sub	 ecx, DWORD PTR _oldopenings$8[ebp]
  00331	d1 f9		 sar	 ecx, 1
  00333	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _openings
  00339	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0033c	8b 4d bc	 mov	 ecx, DWORD PTR _ds$9[ebp]
  0033f	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN56@R_StoreWal:

; 1429 : 				ADJUST(sprbottomclip);

  00342	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  00345	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00348	8b 55 bc	 mov	 edx, DWORD PTR _ds$9[ebp]
  0034b	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0034e	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00351	3b 4d b8	 cmp	 ecx, DWORD PTR _oldopenings$8[ebp]
  00354	72 2e		 jb	 SHORT $LN57@R_StoreWal
  00356	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  00359	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0035c	8b 55 bc	 mov	 edx, DWORD PTR _ds$9[ebp]
  0035f	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00362	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00365	3b 4d b4	 cmp	 ecx, DWORD PTR _oldlast$7[ebp]
  00368	77 1a		 ja	 SHORT $LN57@R_StoreWal
  0036a	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  0036d	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00370	2b 4d b8	 sub	 ecx, DWORD PTR _oldopenings$8[ebp]
  00373	d1 f9		 sar	 ecx, 1
  00375	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _openings
  0037b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0037e	8b 4d bc	 mov	 ecx, DWORD PTR _ds$9[ebp]
  00381	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN57@R_StoreWal:

; 1430 : 				ADJUST(thicksidecol);

  00384	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  00387	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0038a	8b 55 bc	 mov	 edx, DWORD PTR _ds$9[ebp]
  0038d	8b 82 74 01 00
	00		 mov	 eax, DWORD PTR [edx+372]
  00393	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00396	3b 4d b8	 cmp	 ecx, DWORD PTR _oldopenings$8[ebp]
  00399	72 37		 jb	 SHORT $LN58@R_StoreWal
  0039b	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  0039e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003a1	8b 55 bc	 mov	 edx, DWORD PTR _ds$9[ebp]
  003a4	8b 82 74 01 00
	00		 mov	 eax, DWORD PTR [edx+372]
  003aa	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  003ad	3b 4d b4	 cmp	 ecx, DWORD PTR _oldlast$7[ebp]
  003b0	77 20		 ja	 SHORT $LN58@R_StoreWal
  003b2	8b 45 bc	 mov	 eax, DWORD PTR _ds$9[ebp]
  003b5	8b 88 74 01 00
	00		 mov	 ecx, DWORD PTR [eax+372]
  003bb	2b 4d b8	 sub	 ecx, DWORD PTR _oldopenings$8[ebp]
  003be	d1 f9		 sar	 ecx, 1
  003c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _openings
  003c6	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  003c9	8b 4d bc	 mov	 ecx, DWORD PTR _ds$9[ebp]
  003cc	89 81 74 01 00
	00		 mov	 DWORD PTR [ecx+372], eax
$LN58@R_StoreWal:

; 1431 : #undef ADJUST
; 1432 : 			}

  003d2	e9 cd fe ff ff	 jmp	 $LN5@R_StoreWal
$LN6@R_StoreWal:

; 1433 : 		}
; 1434 : 	}  // end of code to remove limits on openings
; 1435 : 
; 1436 : 	// calculate scale at both ends and step
; 1437 : 	ds_p->scale1 = rw_scale = R_ScaleFromGlobalAngle(viewangle + xtoviewangle[start]);

  003d7	8b 45 08	 mov	 eax, DWORD PTR _start$[ebp]
  003da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _viewangle
  003e0	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _xtoviewangle[eax*4]
  003e7	51		 push	 ecx
  003e8	e8 00 00 00 00	 call	 _R_ScaleFromGlobalAngle
  003ed	83 c4 04	 add	 esp, 4
  003f0	a3 00 00 00 00	 mov	 DWORD PTR _rw_scale, eax
  003f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  003fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  00400	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1438 : 
; 1439 : 	if (stop > start)

  00403	8b 45 0c	 mov	 eax, DWORD PTR _stop$[ebp]
  00406	3b 45 08	 cmp	 eax, DWORD PTR _start$[ebp]
  00409	7e 4e		 jle	 SHORT $LN59@R_StoreWal

; 1440 : 	{
; 1441 : 		ds_p->scale2 = R_ScaleFromGlobalAngle(viewangle + xtoviewangle[stop]);

  0040b	8b 45 0c	 mov	 eax, DWORD PTR _stop$[ebp]
  0040e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _viewangle
  00414	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _xtoviewangle[eax*4]
  0041b	51		 push	 ecx
  0041c	e8 00 00 00 00	 call	 _R_ScaleFromGlobalAngle
  00421	83 c4 04	 add	 esp, 4
  00424	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  0042a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1442 : 		ds_p->scalestep = rw_scalestep = (ds_p->scale2 - rw_scale) / (stop-start);

  0042d	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00432	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00435	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _rw_scale
  0043b	8b 4d 0c	 mov	 ecx, DWORD PTR _stop$[ebp]
  0043e	2b 4d 08	 sub	 ecx, DWORD PTR _start$[ebp]
  00441	99		 cdq
  00442	f7 f9		 idiv	 ecx
  00444	a3 00 00 00 00	 mov	 DWORD PTR _rw_scalestep, eax
  00449	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  0044f	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scalestep
  00454	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1443 : 	}

  00457	eb 11		 jmp	 SHORT $LN60@R_StoreWal
$LN59@R_StoreWal:

; 1444 : 	else
; 1445 : 	{
; 1446 : 		// UNUSED: try to fix the stretched line bug
; 1447 : #if 0
; 1448 : 		if (rw_distance < FRACUNIT/2)
; 1449 : 		{
; 1450 : 			fixed_t         tr_x,tr_y;
; 1451 : 			fixed_t         gxt,gyt;
; 1452 : 			CONS_Printf("TRYING TO FIX THE STRETCHED ETC\n");
; 1453 : 
; 1454 : 			tr_x = curline->v1->x - viewx;
; 1455 : 			tr_y = curline->v1->y - viewy;
; 1456 : 
; 1457 : 			gxt = FixedMul(tr_x, viewcos);
; 1458 : 			gyt = -FixedMul(tr_y, viewsin);
; 1459 : 			ds_p->scale1 = FixedDiv(projection, gxt - gyt);
; 1460 : 		}
; 1461 : #endif
; 1462 : 		ds_p->scale2 = ds_p->scale1;

  00459	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0045e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  00464	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00467	89 50 10	 mov	 DWORD PTR [eax+16], edx
$LN60@R_StoreWal:

; 1463 : 	}
; 1464 : 
; 1465 : 	// calculate texture boundaries
; 1466 : 	//  and decide if floor / ceiling marks are needed
; 1467 : 	worldtop = frontsector->ceilingheight - viewz;

  0046a	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  0046f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00472	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  00478	89 0d 00 00 00
	00		 mov	 DWORD PTR _worldtop, ecx

; 1468 : 	worldbottom = frontsector->floorheight - viewz;

  0047e	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00483	8b 08		 mov	 ecx, DWORD PTR [eax]
  00485	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  0048b	89 0d 00 00 00
	00		 mov	 DWORD PTR _worldbottom, ecx

; 1469 : 
; 1470 : 	midtexture = toptexture = bottomtexture = maskedtexture = 0;

  00491	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _maskedtexture, 0
  0049b	a1 00 00 00 00	 mov	 eax, DWORD PTR _maskedtexture
  004a0	a3 00 00 00 00	 mov	 DWORD PTR _bottomtexture, eax
  004a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bottomtexture
  004ab	89 0d 00 00 00
	00		 mov	 DWORD PTR _toptexture, ecx
  004b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _toptexture
  004b7	89 15 00 00 00
	00		 mov	 DWORD PTR _midtexture, edx

; 1471 : 	ds_p->maskedtexturecol = NULL;

  004bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  004c2	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 1472 : 	ds_p->numthicksides = numthicksides = 0;

  004c9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _numthicksides, 0
  004d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  004d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _numthicksides
  004de	89 88 78 01 00
	00		 mov	 DWORD PTR [eax+376], ecx

; 1473 : 	ds_p->thicksidecol = NULL;

  004e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  004e9	c7 80 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+372], 0

; 1474 : 	ds_p->tsilheight = 0;

  004f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  004f8	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 1475 : 
; 1476 : 	for (i = 0; i < MAXFFLOORS; i++)

  004ff	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00506	eb 09		 jmp	 SHORT $LN10@R_StoreWal
$LN8@R_StoreWal:
  00508	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0050b	83 c0 01	 add	 eax, 1
  0050e	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN10@R_StoreWal:
  00511	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  00515	7d 27		 jge	 SHORT $LN9@R_StoreWal

; 1477 : 	{
; 1478 : 		ffloor[i].mark = false;

  00517	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0051e	c7 80 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _ffloor[eax+8], 0

; 1479 : 		ds_p->thicksides[i] = NULL;

  00528	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0052b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  00531	c7 84 81 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+212], 0

; 1480 : 	}

  0053c	eb ca		 jmp	 SHORT $LN8@R_StoreWal
$LN9@R_StoreWal:

; 1481 : 
; 1482 : 	if (numffloors)

  0053e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numffloors, 0
  00545	74 3f		 je	 SHORT $LN12@R_StoreWal

; 1483 : 	{
; 1484 : 		for (i = 0; i < numffloors; i++)

  00547	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0054e	eb 09		 jmp	 SHORT $LN13@R_StoreWal
$LN11@R_StoreWal:
  00550	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00553	83 c0 01	 add	 eax, 1
  00556	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN13@R_StoreWal:
  00559	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0055c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numffloors
  00562	7d 22		 jge	 SHORT $LN12@R_StoreWal

; 1485 : 		{
; 1486 : #ifdef POLYOBJECTS_PLANES
; 1487 : 			if (ds_p->curline->polyseg && !ffloor[i].polyobj)
; 1488 : 					continue;
; 1489 : #endif
; 1490 : 			ffloor[i].f_pos = ffloor[i].height - viewz;

  00564	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0056b	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+4]
  00571	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  00577	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  0057e	89 8a 0c 00 00
	00		 mov	 DWORD PTR _ffloor[edx+12], ecx

; 1491 : 		}

  00584	eb ca		 jmp	 SHORT $LN11@R_StoreWal
$LN12@R_StoreWal:

; 1492 : 	}
; 1493 : 
; 1494 : 	if (!backsector)

  00586	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _backsector, 0
  0058d	0f 85 c3 00 00
	00		 jne	 $LN62@R_StoreWal

; 1495 : 	{
; 1496 : 		// single sided line
; 1497 : 		midtexture = texturetranslation[sidedef->midtexture];

  00593	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  00598	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0059b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _texturetranslation
  005a1	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  005a4	a3 00 00 00 00	 mov	 DWORD PTR _midtexture, eax

; 1498 : 		// a single sided line is terminal, so it must mark ends
; 1499 : 		markfloor = markceiling = true;

  005a9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _markceiling, 1
  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _markceiling
  005b8	a3 00 00 00 00	 mov	 DWORD PTR _markfloor, eax

; 1500 : 
; 1501 : 		if (linedef->flags & ML_DONTPEGBOTTOM)

  005bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _linedef
  005c2	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  005c6	83 e1 10	 and	 ecx, 16			; 00000010H
  005c9	74 2c		 je	 SHORT $LN64@R_StoreWal

; 1502 : 		{
; 1503 : 			vtop = frontsector->floorheight + textureheight[sidedef->midtexture];

  005cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  005d0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  005d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  005d9	8b 02		 mov	 eax, DWORD PTR [edx]
  005db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _textureheight
  005e1	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  005e4	89 45 ec	 mov	 DWORD PTR _vtop$[ebp], eax

; 1504 : 			// bottom of texture at bottom
; 1505 : 			rw_midtexturemid = vtop - viewz;

  005e7	8b 45 ec	 mov	 eax, DWORD PTR _vtop$[ebp]
  005ea	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewz
  005f0	a3 00 00 00 00	 mov	 DWORD PTR _rw_midtexturemid, eax

; 1506 : 		}

  005f5	eb 0a		 jmp	 SHORT $LN65@R_StoreWal
$LN64@R_StoreWal:

; 1507 : 		else
; 1508 : 		{
; 1509 : 			// top of texture at top
; 1510 : 			rw_midtexturemid = worldtop;

  005f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldtop
  005fc	a3 00 00 00 00	 mov	 DWORD PTR _rw_midtexturemid, eax
$LN65@R_StoreWal:

; 1511 : 		}
; 1512 : 		rw_midtexturemid += sidedef->rowoffset;

  00601	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  00606	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_midtexturemid
  0060c	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0060f	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_midtexturemid, ecx

; 1513 : 
; 1514 : 		ds_p->silhouette = SIL_BOTH;

  00615	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0061a	c7 40 18 03 00
	00 00		 mov	 DWORD PTR [eax+24], 3

; 1515 : 		ds_p->sprtopclip = screenheightarray;

  00621	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00626	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], OFFSET _screenheightarray

; 1516 : 		ds_p->sprbottomclip = negonearray;

  0062d	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00632	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], OFFSET _negonearray

; 1517 : 		ds_p->bsilheight = INT32_MAX;

  00639	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0063e	c7 40 1c ff ff
	ff 7f		 mov	 DWORD PTR [eax+28], 2147483647 ; 7fffffffH

; 1518 : 		ds_p->tsilheight = INT32_MIN;

  00645	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0064a	c7 40 20 00 00
	00 80		 mov	 DWORD PTR [eax+32], -2147483648 ; 80000000H

; 1519 : 	}

  00651	e9 fd 0c 00 00	 jmp	 $LN152@R_StoreWal
$LN62@R_StoreWal:

; 1520 : 	else
; 1521 : 	{
; 1522 : 		// two sided line
; 1523 : 		ds_p->sprtopclip = ds_p->sprbottomclip = NULL;

  00656	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0065b	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  00662	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  00668	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 1524 : 		ds_p->silhouette = 0;

  0066f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00674	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1525 : 
; 1526 : 		if (frontsector->floorheight > backsector->floorheight)

  0067b	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00680	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _backsector
  00686	8b 10		 mov	 edx, DWORD PTR [eax]
  00688	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0068a	7e 1e		 jle	 SHORT $LN66@R_StoreWal

; 1527 : 		{
; 1528 : 			ds_p->silhouette = SIL_BOTTOM;

  0068c	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00691	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1

; 1529 : 			ds_p->bsilheight = frontsector->floorheight;

  00698	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0069d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  006a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  006a5	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1530 : 		}

  006a8	eb 27		 jmp	 SHORT $LN68@R_StoreWal
$LN66@R_StoreWal:

; 1531 : 		else if (backsector->floorheight > viewz)

  006aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  006af	8b 08		 mov	 ecx, DWORD PTR [eax]
  006b1	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _viewz
  006b7	7e 18		 jle	 SHORT $LN68@R_StoreWal

; 1532 : 		{
; 1533 : 			ds_p->silhouette = SIL_BOTTOM;

  006b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  006be	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1

; 1534 : 			ds_p->bsilheight = INT32_MAX;

  006c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  006ca	c7 40 1c ff ff
	ff 7f		 mov	 DWORD PTR [eax+28], 2147483647 ; 7fffffffH
$LN68@R_StoreWal:

; 1535 : 			// ds_p->sprbottomclip = negonearray;
; 1536 : 		}
; 1537 : 
; 1538 : 		if (frontsector->ceilingheight < backsector->ceilingheight)

  006d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  006d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _backsector
  006dc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  006df	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  006e2	7d 27		 jge	 SHORT $LN69@R_StoreWal

; 1539 : 		{
; 1540 : 			ds_p->silhouette |= SIL_TOP;

  006e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  006e9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006ec	83 c9 02	 or	 ecx, 2
  006ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  006f5	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 1541 : 			ds_p->tsilheight = frontsector->ceilingheight;

  006f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  006fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00703	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00706	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 1542 : 		}

  00709	eb 30		 jmp	 SHORT $LN71@R_StoreWal
$LN69@R_StoreWal:

; 1543 : 		else if (backsector->ceilingheight < viewz)

  0070b	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00710	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00713	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _viewz
  00719	7d 20		 jge	 SHORT $LN71@R_StoreWal

; 1544 : 		{
; 1545 : 			ds_p->silhouette |= SIL_TOP;

  0071b	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00720	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00723	83 c9 02	 or	 ecx, 2
  00726	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  0072c	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 1546 : 			ds_p->tsilheight = INT32_MIN;

  0072f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00734	c7 40 20 00 00
	00 80		 mov	 DWORD PTR [eax+32], -2147483648 ; 80000000H
$LN71@R_StoreWal:

; 1547 : 			// ds_p->sprtopclip = screenheightarray;
; 1548 : 		}
; 1549 : 
; 1550 : 		if (backsector->ceilingheight <= frontsector->floorheight)

  0073b	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00740	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00746	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00749	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0074b	7f 2c		 jg	 SHORT $LN72@R_StoreWal

; 1551 : 		{
; 1552 : 			ds_p->sprbottomclip = negonearray;

  0074d	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00752	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], OFFSET _negonearray

; 1553 : 			ds_p->bsilheight = INT32_MAX;

  00759	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0075e	c7 40 1c ff ff
	ff 7f		 mov	 DWORD PTR [eax+28], 2147483647 ; 7fffffffH

; 1554 : 			ds_p->silhouette |= SIL_BOTTOM;

  00765	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0076a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0076d	83 c9 01	 or	 ecx, 1
  00770	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  00776	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN72@R_StoreWal:

; 1555 : 		}
; 1556 : 
; 1557 : 		if (backsector->floorheight >= frontsector->ceilingheight)

  00779	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  0077e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00784	8b 10		 mov	 edx, DWORD PTR [eax]
  00786	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00789	7c 2c		 jl	 SHORT $LN73@R_StoreWal

; 1558 : 		{
; 1559 : 			ds_p->sprtopclip = screenheightarray;

  0078b	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00790	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], OFFSET _screenheightarray

; 1560 : 			ds_p->tsilheight = INT32_MIN;

  00797	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0079c	c7 40 20 00 00
	00 80		 mov	 DWORD PTR [eax+32], -2147483648 ; 80000000H

; 1561 : 			ds_p->silhouette |= SIL_TOP;

  007a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  007a8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  007ab	83 c9 02	 or	 ecx, 2
  007ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  007b4	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN73@R_StoreWal:

; 1562 : 		}
; 1563 : 
; 1564 : 		//SoM: 3/25/2000: This code fixes an automap bug that didn't check
; 1565 : 		// frontsector->ceiling and backsector->floor to see if a door was closed.
; 1566 : 		// Without the following code, sprites get displayed behind closed doors.
; 1567 : 		{
; 1568 : 			if (doorclosed || backsector->ceilingheight <= frontsector->floorheight)

  007b7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _doorclosed, 0
  007be	75 12		 jne	 SHORT $LN75@R_StoreWal
  007c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  007c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  007cb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  007ce	3b 11		 cmp	 edx, DWORD PTR [ecx]
  007d0	7f 2c		 jg	 SHORT $LN74@R_StoreWal
$LN75@R_StoreWal:

; 1569 : 			{
; 1570 : 				ds_p->sprbottomclip = negonearray;

  007d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  007d7	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], OFFSET _negonearray

; 1571 : 				ds_p->bsilheight = INT32_MAX;

  007de	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  007e3	c7 40 1c ff ff
	ff 7f		 mov	 DWORD PTR [eax+28], 2147483647 ; 7fffffffH

; 1572 : 				ds_p->silhouette |= SIL_BOTTOM;

  007ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  007ef	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  007f2	83 c9 01	 or	 ecx, 1
  007f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  007fb	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN74@R_StoreWal:

; 1573 : 			}
; 1574 : 			if (doorclosed || backsector->floorheight >= frontsector->ceilingheight)

  007fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _doorclosed, 0
  00805	75 12		 jne	 SHORT $LN77@R_StoreWal
  00807	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  0080c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00812	8b 10		 mov	 edx, DWORD PTR [eax]
  00814	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00817	7c 2c		 jl	 SHORT $LN76@R_StoreWal
$LN77@R_StoreWal:

; 1575 : 			{                   // killough 1/17/98, 2/8/98
; 1576 : 				ds_p->sprtopclip = screenheightarray;

  00819	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0081e	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], OFFSET _screenheightarray

; 1577 : 				ds_p->tsilheight = INT32_MIN;

  00825	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0082a	c7 40 20 00 00
	00 80		 mov	 DWORD PTR [eax+32], -2147483648 ; 80000000H

; 1578 : 				ds_p->silhouette |= SIL_TOP;

  00831	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  00836	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00839	83 c9 02	 or	 ecx, 2
  0083c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  00842	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN76@R_StoreWal:

; 1579 : 			}
; 1580 : 		}
; 1581 : 
; 1582 : 		worldhigh = backsector->ceilingheight - viewz;

  00845	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  0084a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0084d	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  00853	89 0d 00 00 00
	00		 mov	 DWORD PTR _worldhigh, ecx

; 1583 : 		worldlow = backsector->floorheight - viewz;

  00859	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  0085e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00860	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  00866	89 0d 00 00 00
	00		 mov	 DWORD PTR _worldlow, ecx

; 1584 : 
; 1585 : 		// hack to allow height changes in outdoor areas
; 1586 : 		if (frontsector->ceilingpic == skyflatnum
; 1587 : 			&& backsector->ceilingpic == skyflatnum)

  0086c	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00871	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00874	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _skyflatnum
  0087a	75 1a		 jne	 SHORT $LN78@R_StoreWal
  0087c	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00881	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00884	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _skyflatnum
  0088a	75 0a		 jne	 SHORT $LN78@R_StoreWal

; 1588 : 		{
; 1589 : 			worldtop = worldhigh;

  0088c	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldhigh
  00891	a3 00 00 00 00	 mov	 DWORD PTR _worldtop, eax
$LN78@R_StoreWal:

; 1590 : 		}
; 1591 : 
; 1592 : 		if (worldlow != worldbottom
; 1593 : 		    || backsector->floorpic != frontsector->floorpic
; 1594 : 		    || backsector->lightlevel != frontsector->lightlevel
; 1595 : 		    //SoM: 3/22/2000: Check floor x and y offsets.
; 1596 : 		    || backsector->floor_xoffs != frontsector->floor_xoffs
; 1597 : 		    || backsector->floor_yoffs != frontsector->floor_yoffs
; 1598 : 		    || backsector->floorpic_angle != frontsector->floorpic_angle
; 1599 : 		    //SoM: 3/22/2000: Prevents bleeding.
; 1600 : 		    || frontsector->heightsec != -1
; 1601 : 		    || backsector->floorlightsec != frontsector->floorlightsec
; 1602 : 		    //SoM: 4/3/2000: Check for colormaps
; 1603 : 		    || frontsector->extra_colormap != backsector->extra_colormap
; 1604 : 		    || (frontsector->ffloors != backsector->ffloors && frontsector->tag != backsector->tag))

  00896	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldlow
  0089b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _worldbottom
  008a1	0f 85 d6 00 00
	00		 jne	 $LN81@R_StoreWal
  008a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  008ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  008b2	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  008b5	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  008b8	0f 85 bf 00 00
	00		 jne	 $LN81@R_StoreWal
  008be	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  008c3	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  008c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  008cd	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  008d1	3b c8		 cmp	 ecx, eax
  008d3	0f 85 a4 00 00
	00		 jne	 $LN81@R_StoreWal
  008d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  008de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  008e4	8b 50 50	 mov	 edx, DWORD PTR [eax+80]
  008e7	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  008ea	0f 85 8d 00 00
	00		 jne	 $LN81@R_StoreWal
  008f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  008f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  008fb	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  008fe	3b 51 54	 cmp	 edx, DWORD PTR [ecx+84]
  00901	75 7a		 jne	 SHORT $LN81@R_StoreWal
  00903	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00908	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  0090e	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  00911	3b 51 60	 cmp	 edx, DWORD PTR [ecx+96]
  00914	75 67		 jne	 SHORT $LN81@R_StoreWal
  00916	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  0091b	83 78 68 ff	 cmp	 DWORD PTR [eax+104], -1
  0091f	75 5c		 jne	 SHORT $LN81@R_StoreWal
  00921	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00926	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  0092c	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0092f	3b 51 6c	 cmp	 edx, DWORD PTR [ecx+108]
  00932	75 49		 jne	 SHORT $LN81@R_StoreWal
  00934	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00939	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _backsector
  0093f	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00945	3b 91 b0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+176]
  0094b	75 30		 jne	 SHORT $LN81@R_StoreWal
  0094d	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00952	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _backsector
  00958	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  0095e	3b 91 90 00 00
	00		 cmp	 edx, DWORD PTR [ecx+144]
  00964	74 23		 je	 SHORT $LN79@R_StoreWal
  00966	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  0096b	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  0096f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  00975	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  00979	3b c8		 cmp	 ecx, eax
  0097b	74 0c		 je	 SHORT $LN79@R_StoreWal
$LN81@R_StoreWal:

; 1605 : 		{
; 1606 : 			markfloor = true;

  0097d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _markfloor, 1

; 1607 : 		}

  00987	eb 0a		 jmp	 SHORT $LN80@R_StoreWal
$LN79@R_StoreWal:

; 1608 : 		else
; 1609 : 		{
; 1610 : 			// same plane on both sides
; 1611 : 			markfloor = false;

  00989	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _markfloor, 0
$LN80@R_StoreWal:

; 1612 : 		}
; 1613 : 
; 1614 : 		if (worldhigh != worldtop
; 1615 : 		    || backsector->ceilingpic != frontsector->ceilingpic
; 1616 : 		    || backsector->lightlevel != frontsector->lightlevel
; 1617 : 		    //SoM: 3/22/2000: Check floor x and y offsets.
; 1618 : 		    || backsector->ceiling_xoffs != frontsector->ceiling_xoffs
; 1619 : 		    || backsector->ceiling_yoffs != frontsector->ceiling_yoffs
; 1620 : 		    || backsector->ceilingpic_angle != frontsector->ceilingpic_angle
; 1621 : 		    //SoM: 3/22/2000: Prevents bleeding.
; 1622 : 		    || (frontsector->heightsec != -1 && frontsector->ceilingpic != skyflatnum)
; 1623 : 		    || backsector->floorlightsec != frontsector->floorlightsec
; 1624 : 		    //SoM: 4/3/2000: Check for colormaps
; 1625 : 		    || frontsector->extra_colormap != backsector->extra_colormap
; 1626 : 		    || (frontsector->ffloors != backsector->ffloors && frontsector->tag != backsector->tag))

  00993	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldhigh
  00998	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _worldtop
  0099e	0f 85 ea 00 00
	00		 jne	 $LN84@R_StoreWal
  009a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  009a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  009af	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  009b2	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  009b5	0f 85 d3 00 00
	00		 jne	 $LN84@R_StoreWal
  009bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  009c0	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  009c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  009ca	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  009ce	3b c8		 cmp	 ecx, eax
  009d0	0f 85 b8 00 00
	00		 jne	 $LN84@R_StoreWal
  009d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  009db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  009e1	8b 50 58	 mov	 edx, DWORD PTR [eax+88]
  009e4	3b 51 58	 cmp	 edx, DWORD PTR [ecx+88]
  009e7	0f 85 a1 00 00
	00		 jne	 $LN84@R_StoreWal
  009ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  009f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  009f8	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  009fb	3b 51 5c	 cmp	 edx, DWORD PTR [ecx+92]
  009fe	0f 85 8a 00 00
	00		 jne	 $LN84@R_StoreWal
  00a04	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00a09	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00a0f	8b 50 64	 mov	 edx, DWORD PTR [eax+100]
  00a12	3b 51 64	 cmp	 edx, DWORD PTR [ecx+100]
  00a15	75 77		 jne	 SHORT $LN84@R_StoreWal
  00a17	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00a1c	83 78 68 ff	 cmp	 DWORD PTR [eax+104], -1
  00a20	74 10		 je	 SHORT $LN85@R_StoreWal
  00a22	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00a27	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00a2a	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _skyflatnum
  00a30	75 5c		 jne	 SHORT $LN84@R_StoreWal
$LN85@R_StoreWal:
  00a32	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00a37	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00a3d	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00a40	3b 51 6c	 cmp	 edx, DWORD PTR [ecx+108]
  00a43	75 49		 jne	 SHORT $LN84@R_StoreWal
  00a45	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00a4a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _backsector
  00a50	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00a56	3b 91 b0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+176]
  00a5c	75 30		 jne	 SHORT $LN84@R_StoreWal
  00a5e	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00a63	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _backsector
  00a69	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00a6f	3b 91 90 00 00
	00		 cmp	 edx, DWORD PTR [ecx+144]
  00a75	74 23		 je	 SHORT $LN82@R_StoreWal
  00a77	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00a7c	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  00a80	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  00a86	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  00a8a	3b c8		 cmp	 ecx, eax
  00a8c	74 0c		 je	 SHORT $LN82@R_StoreWal
$LN84@R_StoreWal:

; 1627 : 		{
; 1628 : 				markceiling = true;

  00a8e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _markceiling, 1

; 1629 : 		}

  00a98	eb 0a		 jmp	 SHORT $LN83@R_StoreWal
$LN82@R_StoreWal:

; 1630 : 		else
; 1631 : 		{
; 1632 : 			// same plane on both sides
; 1633 : 			markceiling = false;

  00a9a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _markceiling, 0
$LN83@R_StoreWal:

; 1634 : 		}
; 1635 : 
; 1636 : 		if (backsector->ceilingheight <= frontsector->floorheight ||

  00aa4	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00aa9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00aaf	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00ab2	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00ab4	7e 12		 jle	 SHORT $LN87@R_StoreWal
  00ab6	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00abb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00ac1	8b 10		 mov	 edx, DWORD PTR [eax]
  00ac3	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00ac6	7c 14		 jl	 SHORT $LN86@R_StoreWal
$LN87@R_StoreWal:

; 1637 : 		    backsector->floorheight >= frontsector->ceilingheight)
; 1638 : 		{
; 1639 : 			// closed door
; 1640 : 			markceiling = markfloor = true;

  00ac8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _markfloor, 1
  00ad2	a1 00 00 00 00	 mov	 eax, DWORD PTR _markfloor
  00ad7	a3 00 00 00 00	 mov	 DWORD PTR _markceiling, eax
$LN86@R_StoreWal:

; 1641 : 		}
; 1642 : 
; 1643 : 		// check TOP TEXTURE
; 1644 : 		if (worldhigh < worldtop)

  00adc	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldhigh
  00ae1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _worldtop
  00ae7	0f 8d 35 01 00
	00		 jge	 $LN95@R_StoreWal

; 1645 : 		{
; 1646 : 			// top texture
; 1647 : 			if ((linedef->flags & (ML_DONTPEGTOP) && (linedef->flags & ML_DONTPEGBOTTOM))
; 1648 : 				&& linedef->sidenum[1] != 0xffff)

  00aed	a1 00 00 00 00	 mov	 eax, DWORD PTR _linedef
  00af2	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00af6	83 e1 08	 and	 ecx, 8
  00af9	0f 84 c8 00 00
	00		 je	 $LN89@R_StoreWal
  00aff	a1 00 00 00 00	 mov	 eax, DWORD PTR _linedef
  00b04	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00b08	83 e1 10	 and	 ecx, 16			; 00000010H
  00b0b	0f 84 b6 00 00
	00		 je	 $LN89@R_StoreWal
  00b11	b8 02 00 00 00	 mov	 eax, 2
  00b16	c1 e0 00	 shl	 eax, 0
  00b19	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _linedef
  00b1f	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00b24	81 fa ff ff 00
	00		 cmp	 edx, 65535		; 0000ffffH
  00b2a	0f 84 97 00 00
	00		 je	 $LN89@R_StoreWal

; 1649 : 			{
; 1650 : 				// Special case... use offsets from 2nd side but only if it has a texture.
; 1651 : 				side_t *def = &sides[linedef->sidenum[1]];

  00b30	b8 02 00 00 00	 mov	 eax, 2
  00b35	c1 e0 00	 shl	 eax, 0
  00b38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _linedef
  00b3e	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00b43	6b c2 1c	 imul	 eax, edx, 28
  00b46	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sides
  00b4c	89 45 b0	 mov	 DWORD PTR _def$6[ebp], eax

; 1652 : 				toptexture = texturetranslation[def->toptexture];

  00b4f	8b 45 b0	 mov	 eax, DWORD PTR _def$6[ebp]
  00b52	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00b55	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _texturetranslation
  00b5b	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00b5e	a3 00 00 00 00	 mov	 DWORD PTR _toptexture, eax

; 1653 : 
; 1654 : 				if (!toptexture) //Second side has no texture, use the first side's instead.

  00b63	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _toptexture, 0
  00b6a	75 16		 jne	 SHORT $LN91@R_StoreWal

; 1655 : 					toptexture = texturetranslation[sidedef->toptexture];

  00b6c	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  00b71	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00b74	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _texturetranslation
  00b7a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00b7d	a3 00 00 00 00	 mov	 DWORD PTR _toptexture, eax
$LN91@R_StoreWal:

; 1656 : 
; 1657 : 				if (linedef->flags & ML_DONTPEGTOP)

  00b82	a1 00 00 00 00	 mov	 eax, DWORD PTR _linedef
  00b87	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00b8b	83 e1 08	 and	 ecx, 8
  00b8e	74 0c		 je	 SHORT $LN92@R_StoreWal

; 1658 : 				{
; 1659 : 					// top of texture at top
; 1660 : 					rw_toptexturemid = worldtop;

  00b90	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldtop
  00b95	a3 00 00 00 00	 mov	 DWORD PTR _rw_toptexturemid, eax

; 1661 : 				}

  00b9a	eb 29		 jmp	 SHORT $LN93@R_StoreWal
$LN92@R_StoreWal:

; 1662 : 				else
; 1663 : 				{
; 1664 : 					vtop = backsector->ceilingheight + textureheight[def->toptexture];

  00b9c	8b 45 b0	 mov	 eax, DWORD PTR _def$6[ebp]
  00b9f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00ba2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  00ba8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00bab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _textureheight
  00bb1	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  00bb4	89 45 ec	 mov	 DWORD PTR _vtop$[ebp], eax

; 1665 : 					// bottom of texture
; 1666 : 					rw_toptexturemid = vtop - viewz;

  00bb7	8b 45 ec	 mov	 eax, DWORD PTR _vtop$[ebp]
  00bba	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewz
  00bc0	a3 00 00 00 00	 mov	 DWORD PTR _rw_toptexturemid, eax
$LN93@R_StoreWal:

; 1667 : 				}
; 1668 : 			}

  00bc5	eb 5b		 jmp	 SHORT $LN95@R_StoreWal
$LN89@R_StoreWal:

; 1669 : 			else
; 1670 : 			{
; 1671 : 				toptexture = texturetranslation[sidedef->toptexture];

  00bc7	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  00bcc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00bcf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _texturetranslation
  00bd5	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00bd8	a3 00 00 00 00	 mov	 DWORD PTR _toptexture, eax

; 1672 : 
; 1673 : 				if (linedef->flags & ML_DONTPEGTOP)

  00bdd	a1 00 00 00 00	 mov	 eax, DWORD PTR _linedef
  00be2	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00be6	83 e1 08	 and	 ecx, 8
  00be9	74 0c		 je	 SHORT $LN94@R_StoreWal

; 1674 : 				{
; 1675 : 					// top of texture at top
; 1676 : 					rw_toptexturemid = worldtop;

  00beb	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldtop
  00bf0	a3 00 00 00 00	 mov	 DWORD PTR _rw_toptexturemid, eax

; 1677 : 				}

  00bf5	eb 2b		 jmp	 SHORT $LN95@R_StoreWal
$LN94@R_StoreWal:

; 1678 : 				else
; 1679 : 				{
; 1680 : 					vtop = backsector->ceilingheight + textureheight[sidedef->toptexture];

  00bf7	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  00bfc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00bff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  00c05	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00c08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _textureheight
  00c0e	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  00c11	89 45 ec	 mov	 DWORD PTR _vtop$[ebp], eax

; 1681 : 					// bottom of texture
; 1682 : 					rw_toptexturemid = vtop - viewz;

  00c14	8b 45 ec	 mov	 eax, DWORD PTR _vtop$[ebp]
  00c17	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewz
  00c1d	a3 00 00 00 00	 mov	 DWORD PTR _rw_toptexturemid, eax
$LN95@R_StoreWal:

; 1683 : 				}
; 1684 : 			}
; 1685 : 		}
; 1686 : 		// check BOTTOM TEXTURE
; 1687 : 		if (worldlow > worldbottom)     //seulement si VISIBLE!!!

  00c22	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldlow
  00c27	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _worldbottom
  00c2d	7e 3a		 jle	 SHORT $LN98@R_StoreWal

; 1688 : 		{
; 1689 : 			// bottom texture
; 1690 : 			bottomtexture = texturetranslation[sidedef->bottomtexture];

  00c2f	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  00c34	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c37	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _texturetranslation
  00c3d	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00c40	a3 00 00 00 00	 mov	 DWORD PTR _bottomtexture, eax

; 1691 : 
; 1692 : 			if (linedef->flags & ML_DONTPEGBOTTOM)

  00c45	a1 00 00 00 00	 mov	 eax, DWORD PTR _linedef
  00c4a	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00c4e	83 e1 10	 and	 ecx, 16			; 00000010H
  00c51	74 0c		 je	 SHORT $LN97@R_StoreWal

; 1693 : 			{
; 1694 : 				// bottom of texture at bottom
; 1695 : 				// top of texture at top
; 1696 : 				rw_bottomtexturemid = worldtop;

  00c53	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldtop
  00c58	a3 00 00 00 00	 mov	 DWORD PTR _rw_bottomtexturemid, eax

; 1697 : 			}

  00c5d	eb 0a		 jmp	 SHORT $LN98@R_StoreWal
$LN97@R_StoreWal:

; 1698 : 			else    // top of texture at top
; 1699 : 				rw_bottomtexturemid = worldlow;

  00c5f	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldlow
  00c64	a3 00 00 00 00	 mov	 DWORD PTR _rw_bottomtexturemid, eax
$LN98@R_StoreWal:

; 1700 : 		}
; 1701 : 
; 1702 : 		rw_toptexturemid += sidedef->rowoffset;

  00c69	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  00c6e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_toptexturemid
  00c74	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00c77	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_toptexturemid, ecx

; 1703 : 		rw_bottomtexturemid += sidedef->rowoffset;

  00c7d	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  00c82	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_bottomtexturemid
  00c88	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00c8b	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_bottomtexturemid, ecx

; 1704 : 
; 1705 : 		// allocate space for masked texture tables
; 1706 : 		if (frontsector && backsector && frontsector->tag != backsector->tag && (backsector->ffloors || frontsector->ffloors))

  00c91	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _frontsector, 0
  00c98	0f 84 3f 06 00
	00		 je	 $LN99@R_StoreWal
  00c9e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _backsector, 0
  00ca5	0f 84 32 06 00
	00		 je	 $LN99@R_StoreWal
  00cab	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00cb0	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  00cb4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  00cba	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  00cbe	3b c8		 cmp	 ecx, eax
  00cc0	0f 84 17 06 00
	00		 je	 $LN99@R_StoreWal
  00cc6	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00ccb	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00cd2	75 12		 jne	 SHORT $LN100@R_StoreWal
  00cd4	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00cd9	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00ce0	0f 84 f7 05 00
	00		 je	 $LN99@R_StoreWal
$LN100@R_StoreWal:

; 1707 : 		{
; 1708 : 			ffloor_t *rover;
; 1709 : 			ffloor_t *r2;
; 1710 : 			fixed_t   lowcut, highcut;
; 1711 : 
; 1712 : 			//markceiling = markfloor = true;
; 1713 : 			maskedtexture = true;

  00ce6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _maskedtexture, 1

; 1714 : 
; 1715 : 			ds_p->thicksidecol = maskedtexturecol = lastopening - rw_x;

  00cf0	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  00cf5	d1 e0		 shl	 eax, 1
  00cf7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lastopening
  00cfd	2b c8		 sub	 ecx, eax
  00cff	89 0d 00 00 00
	00		 mov	 DWORD PTR _maskedtexturecol, ecx
  00d05	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  00d0b	a1 00 00 00 00	 mov	 eax, DWORD PTR _maskedtexturecol
  00d10	89 82 74 01 00
	00		 mov	 DWORD PTR [edx+372], eax

; 1716 : 			lastopening += rw_stopx - rw_x;

  00d16	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  00d1b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _rw_x
  00d21	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lastopening
  00d27	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00d2a	89 15 00 00 00
	00		 mov	 DWORD PTR _lastopening, edx

; 1717 : 
; 1718 : 			lowcut = frontsector->floorheight > backsector->floorheight ? frontsector->floorheight : backsector->floorheight;

  00d30	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00d35	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _backsector
  00d3b	8b 10		 mov	 edx, DWORD PTR [eax]
  00d3d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00d3f	7e 0f		 jle	 SHORT $LN222@R_StoreWal
  00d41	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00d46	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d48	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv562[ebp], ecx
  00d4e	eb 0e		 jmp	 SHORT $LN223@R_StoreWal
$LN222@R_StoreWal:
  00d50	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  00d56	8b 02		 mov	 eax, DWORD PTR [edx]
  00d58	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv562[ebp], eax
$LN223@R_StoreWal:
  00d5e	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv562[ebp]
  00d64	89 4d a4	 mov	 DWORD PTR _lowcut$3[ebp], ecx

; 1719 : 			highcut = frontsector->ceilingheight < backsector->ceilingheight ? frontsector->ceilingheight : backsector->ceilingheight;

  00d67	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00d6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _backsector
  00d72	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00d75	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00d78	7d 10		 jge	 SHORT $LN224@R_StoreWal
  00d7a	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00d7f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d82	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv568[ebp], ecx
  00d88	eb 0f		 jmp	 SHORT $LN225@R_StoreWal
$LN224@R_StoreWal:
  00d8a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  00d90	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00d93	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv568[ebp], eax
$LN225@R_StoreWal:
  00d99	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv568[ebp]
  00d9f	89 4d a0	 mov	 DWORD PTR _highcut$2[ebp], ecx

; 1720 : 
; 1721 : 			if (frontsector->ffloors && backsector->ffloors)

  00da2	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00da7	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00dae	0f 84 5c 03 00
	00		 je	 $LN101@R_StoreWal
  00db4	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00db9	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00dc0	0f 84 4a 03 00
	00		 je	 $LN101@R_StoreWal

; 1722 : 			{
; 1723 : 				i = 0;

  00dc6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 1724 : 				for (rover = backsector->ffloors; rover && i < MAXFFLOORS; rover = rover->next)

  00dcd	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00dd2	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00dd8	89 4d ac	 mov	 DWORD PTR _rover$5[ebp], ecx
  00ddb	eb 09		 jmp	 SHORT $LN16@R_StoreWal
$LN14@R_StoreWal:
  00ddd	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00de0	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00de3	89 4d ac	 mov	 DWORD PTR _rover$5[ebp], ecx
$LN16@R_StoreWal:
  00de6	83 7d ac 00	 cmp	 DWORD PTR _rover$5[ebp], 0
  00dea	0f 84 7c 01 00
	00		 je	 $LN15@R_StoreWal
  00df0	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  00df4	0f 8d 72 01 00
	00		 jge	 $LN15@R_StoreWal

; 1725 : 				{
; 1726 : 					if (!(rover->flags & FF_RENDERSIDES) || !(rover->flags & FF_EXISTS))

  00dfa	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00dfd	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00e00	83 e1 08	 and	 ecx, 8
  00e03	74 0b		 je	 SHORT $LN104@R_StoreWal
  00e05	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00e08	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00e0b	83 e1 01	 and	 ecx, 1
  00e0e	75 02		 jne	 SHORT $LN103@R_StoreWal
$LN104@R_StoreWal:

; 1727 : 						continue;

  00e10	eb cb		 jmp	 SHORT $LN14@R_StoreWal
$LN103@R_StoreWal:

; 1728 : 					if (rover->flags & FF_INVERTSIDES)

  00e12	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00e15	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00e18	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00e1e	74 02		 je	 SHORT $LN105@R_StoreWal

; 1729 : 						continue;

  00e20	eb bb		 jmp	 SHORT $LN14@R_StoreWal
$LN105@R_StoreWal:

; 1730 : 					if (*rover->topheight < lowcut || *rover->bottomheight > highcut)

  00e22	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00e25	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e27	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e29	3b 55 a4	 cmp	 edx, DWORD PTR _lowcut$3[ebp]
  00e2c	7c 0d		 jl	 SHORT $LN107@R_StoreWal
  00e2e	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00e31	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00e34	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e36	3b 55 a0	 cmp	 edx, DWORD PTR _highcut$2[ebp]
  00e39	7e 02		 jle	 SHORT $LN106@R_StoreWal
$LN107@R_StoreWal:

; 1731 : 						continue;

  00e3b	eb a0		 jmp	 SHORT $LN14@R_StoreWal
$LN106@R_StoreWal:

; 1732 : 
; 1733 : 					if (rover->norender == leveltime)

  00e3d	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00e40	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00e43	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _leveltime
  00e49	75 02		 jne	 SHORT $LN108@R_StoreWal

; 1734 : 						continue;

  00e4b	eb 90		 jmp	 SHORT $LN14@R_StoreWal
$LN108@R_StoreWal:

; 1735 : 
; 1736 : 					for (r2 = frontsector->ffloors; r2; r2 = r2->next)

  00e4d	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00e52	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00e58	89 4d a8	 mov	 DWORD PTR _r2$4[ebp], ecx
  00e5b	eb 09		 jmp	 SHORT $LN19@R_StoreWal
$LN17@R_StoreWal:
  00e5d	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00e60	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00e63	89 4d a8	 mov	 DWORD PTR _r2$4[ebp], ecx
$LN19@R_StoreWal:
  00e66	83 7d a8 00	 cmp	 DWORD PTR _r2$4[ebp], 0
  00e6a	0f 84 d0 00 00
	00		 je	 $LN18@R_StoreWal

; 1737 : 					{
; 1738 : 						if (!(r2->flags & FF_EXISTS) || !(r2->flags & FF_RENDERSIDES)
; 1739 : 						    || *r2->topheight < lowcut || *r2->bottomheight > highcut)

  00e70	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00e73	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00e76	83 e1 01	 and	 ecx, 1
  00e79	74 24		 je	 SHORT $LN110@R_StoreWal
  00e7b	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00e7e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00e81	83 e1 08	 and	 ecx, 8
  00e84	74 19		 je	 SHORT $LN110@R_StoreWal
  00e86	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00e89	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e8b	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e8d	3b 55 a4	 cmp	 edx, DWORD PTR _lowcut$3[ebp]
  00e90	7c 0d		 jl	 SHORT $LN110@R_StoreWal
  00e92	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00e95	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00e98	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e9a	3b 55 a0	 cmp	 edx, DWORD PTR _highcut$2[ebp]
  00e9d	7e 02		 jle	 SHORT $LN109@R_StoreWal
$LN110@R_StoreWal:

; 1740 : 							continue;

  00e9f	eb bc		 jmp	 SHORT $LN17@R_StoreWal
$LN109@R_StoreWal:

; 1741 : 
; 1742 : 						if (r2->norender == leveltime)

  00ea1	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00ea4	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00ea7	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _leveltime
  00ead	75 02		 jne	 SHORT $LN111@R_StoreWal

; 1743 : 							continue;

  00eaf	eb ac		 jmp	 SHORT $LN17@R_StoreWal
$LN111@R_StoreWal:

; 1744 : 
; 1745 : 						if (rover->flags & FF_EXTRA)

  00eb1	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00eb4	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00eb7	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00ebd	74 40		 je	 SHORT $LN112@R_StoreWal

; 1746 : 						{
; 1747 : 							if (!(r2->flags & FF_CUTEXTRA))

  00ebf	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00ec2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00ec5	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00ecb	75 02		 jne	 SHORT $LN114@R_StoreWal

; 1748 : 								continue;

  00ecd	eb 8e		 jmp	 SHORT $LN17@R_StoreWal
$LN114@R_StoreWal:

; 1749 : 
; 1750 : 							if (r2->flags & FF_EXTRA && (r2->flags & (FF_TRANSLUCENT|FF_FOG)) != (rover->flags & (FF_TRANSLUCENT|FF_FOG)))

  00ecf	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00ed2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00ed5	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00edb	74 20		 je	 SHORT $LN115@R_StoreWal
  00edd	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00ee0	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00ee3	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00ee9	8b 55 ac	 mov	 edx, DWORD PTR _rover$5[ebp]
  00eec	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00eef	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00ef4	3b c8		 cmp	 ecx, eax
  00ef6	74 05		 je	 SHORT $LN115@R_StoreWal

; 1751 : 								continue;

  00ef8	e9 60 ff ff ff	 jmp	 $LN17@R_StoreWal
$LN115@R_StoreWal:

; 1752 : 						}

  00efd	eb 13		 jmp	 SHORT $LN116@R_StoreWal
$LN112@R_StoreWal:

; 1753 : 						else
; 1754 : 						{
; 1755 : 							if (!(r2->flags & FF_CUTSOLIDS))

  00eff	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00f02	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00f05	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00f0b	75 05		 jne	 SHORT $LN116@R_StoreWal

; 1756 : 								continue;

  00f0d	e9 4b ff ff ff	 jmp	 $LN17@R_StoreWal
$LN116@R_StoreWal:

; 1757 : 						}
; 1758 : 
; 1759 : 						if (*rover->topheight > *r2->topheight || *rover->bottomheight < *r2->bottomheight)

  00f12	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00f15	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f17	8b 55 a8	 mov	 edx, DWORD PTR _r2$4[ebp]
  00f1a	8b 02		 mov	 eax, DWORD PTR [edx]
  00f1c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00f1e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00f20	7f 12		 jg	 SHORT $LN118@R_StoreWal
  00f22	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00f25	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00f28	8b 55 a8	 mov	 edx, DWORD PTR _r2$4[ebp]
  00f2b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00f2e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00f30	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00f32	7d 05		 jge	 SHORT $LN117@R_StoreWal
$LN118@R_StoreWal:

; 1760 : 							continue;

  00f34	e9 24 ff ff ff	 jmp	 $LN17@R_StoreWal
$LN117@R_StoreWal:

; 1761 : 
; 1762 : 						break;

  00f39	eb 05		 jmp	 SHORT $LN18@R_StoreWal

; 1763 : 					}

  00f3b	e9 1d ff ff ff	 jmp	 $LN17@R_StoreWal
$LN18@R_StoreWal:

; 1764 : 					if (r2)

  00f40	83 7d a8 00	 cmp	 DWORD PTR _r2$4[ebp], 0
  00f44	74 05		 je	 SHORT $LN119@R_StoreWal

; 1765 : 						continue;

  00f46	e9 92 fe ff ff	 jmp	 $LN14@R_StoreWal
$LN119@R_StoreWal:

; 1766 : 
; 1767 : 					ds_p->thicksides[i] = rover;

  00f4b	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00f4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  00f54	8b 55 ac	 mov	 edx, DWORD PTR _rover$5[ebp]
  00f57	89 94 81 d4 00
	00 00		 mov	 DWORD PTR [ecx+eax*4+212], edx

; 1768 : 					i++;

  00f5e	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00f61	83 c0 01	 add	 eax, 1
  00f64	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax

; 1769 : 				}

  00f67	e9 71 fe ff ff	 jmp	 $LN14@R_StoreWal
$LN15@R_StoreWal:

; 1770 : 
; 1771 : 				for (rover = frontsector->ffloors; rover && i < MAXFFLOORS; rover = rover->next)

  00f6c	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00f71	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00f77	89 4d ac	 mov	 DWORD PTR _rover$5[ebp], ecx
  00f7a	eb 09		 jmp	 SHORT $LN22@R_StoreWal
$LN20@R_StoreWal:
  00f7c	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00f7f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00f82	89 4d ac	 mov	 DWORD PTR _rover$5[ebp], ecx
$LN22@R_StoreWal:
  00f85	83 7d ac 00	 cmp	 DWORD PTR _rover$5[ebp], 0
  00f89	0f 84 7c 01 00
	00		 je	 $LN21@R_StoreWal
  00f8f	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  00f93	0f 8d 72 01 00
	00		 jge	 $LN21@R_StoreWal

; 1772 : 				{
; 1773 : 					if (!(rover->flags & FF_RENDERSIDES) || !(rover->flags & FF_EXISTS))

  00f99	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00f9c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00f9f	83 e1 08	 and	 ecx, 8
  00fa2	74 0b		 je	 SHORT $LN121@R_StoreWal
  00fa4	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00fa7	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00faa	83 e1 01	 and	 ecx, 1
  00fad	75 02		 jne	 SHORT $LN120@R_StoreWal
$LN121@R_StoreWal:

; 1774 : 						continue;

  00faf	eb cb		 jmp	 SHORT $LN20@R_StoreWal
$LN120@R_StoreWal:

; 1775 : 					if (!(rover->flags & FF_ALLSIDES))

  00fb1	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00fb4	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00fb7	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00fbd	75 02		 jne	 SHORT $LN122@R_StoreWal

; 1776 : 						continue;

  00fbf	eb bb		 jmp	 SHORT $LN20@R_StoreWal
$LN122@R_StoreWal:

; 1777 : 					if (*rover->topheight < lowcut || *rover->bottomheight > highcut)

  00fc1	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00fc4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fc6	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fc8	3b 55 a4	 cmp	 edx, DWORD PTR _lowcut$3[ebp]
  00fcb	7c 0d		 jl	 SHORT $LN124@R_StoreWal
  00fcd	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00fd0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00fd3	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fd5	3b 55 a0	 cmp	 edx, DWORD PTR _highcut$2[ebp]
  00fd8	7e 02		 jle	 SHORT $LN123@R_StoreWal
$LN124@R_StoreWal:

; 1778 : 						continue;

  00fda	eb a0		 jmp	 SHORT $LN20@R_StoreWal
$LN123@R_StoreWal:

; 1779 : 
; 1780 : 					if (rover->norender == leveltime)

  00fdc	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  00fdf	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00fe2	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _leveltime
  00fe8	75 02		 jne	 SHORT $LN125@R_StoreWal

; 1781 : 						continue;

  00fea	eb 90		 jmp	 SHORT $LN20@R_StoreWal
$LN125@R_StoreWal:

; 1782 : 
; 1783 : 					for (r2 = backsector->ffloors; r2; r2 = r2->next)

  00fec	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  00ff1	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00ff7	89 4d a8	 mov	 DWORD PTR _r2$4[ebp], ecx
  00ffa	eb 09		 jmp	 SHORT $LN25@R_StoreWal
$LN23@R_StoreWal:
  00ffc	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  00fff	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  01002	89 4d a8	 mov	 DWORD PTR _r2$4[ebp], ecx
$LN25@R_StoreWal:
  01005	83 7d a8 00	 cmp	 DWORD PTR _r2$4[ebp], 0
  01009	0f 84 d0 00 00
	00		 je	 $LN24@R_StoreWal

; 1784 : 					{
; 1785 : 						if (!(r2->flags & FF_EXISTS) || !(r2->flags & FF_RENDERSIDES)
; 1786 : 						    || *r2->topheight < lowcut || *r2->bottomheight > highcut)

  0100f	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  01012	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01015	83 e1 01	 and	 ecx, 1
  01018	74 24		 je	 SHORT $LN127@R_StoreWal
  0101a	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  0101d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01020	83 e1 08	 and	 ecx, 8
  01023	74 19		 je	 SHORT $LN127@R_StoreWal
  01025	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  01028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0102a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0102c	3b 55 a4	 cmp	 edx, DWORD PTR _lowcut$3[ebp]
  0102f	7c 0d		 jl	 SHORT $LN127@R_StoreWal
  01031	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  01034	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01037	8b 11		 mov	 edx, DWORD PTR [ecx]
  01039	3b 55 a0	 cmp	 edx, DWORD PTR _highcut$2[ebp]
  0103c	7e 02		 jle	 SHORT $LN126@R_StoreWal
$LN127@R_StoreWal:

; 1787 : 							continue;

  0103e	eb bc		 jmp	 SHORT $LN23@R_StoreWal
$LN126@R_StoreWal:

; 1788 : 
; 1789 : 						if (r2->norender == leveltime)

  01040	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  01043	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01046	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _leveltime
  0104c	75 02		 jne	 SHORT $LN128@R_StoreWal

; 1790 : 							continue;

  0104e	eb ac		 jmp	 SHORT $LN23@R_StoreWal
$LN128@R_StoreWal:

; 1791 : 
; 1792 : 						if (rover->flags & FF_EXTRA)

  01050	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01053	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01056	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  0105c	74 40		 je	 SHORT $LN129@R_StoreWal

; 1793 : 						{
; 1794 : 							if (!(r2->flags & FF_CUTEXTRA))

  0105e	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  01061	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01064	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0106a	75 02		 jne	 SHORT $LN131@R_StoreWal

; 1795 : 								continue;

  0106c	eb 8e		 jmp	 SHORT $LN23@R_StoreWal
$LN131@R_StoreWal:

; 1796 : 
; 1797 : 							if (r2->flags & FF_EXTRA && (r2->flags & (FF_TRANSLUCENT|FF_FOG)) != (rover->flags & (FF_TRANSLUCENT|FF_FOG)))

  0106e	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  01071	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01074	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  0107a	74 20		 je	 SHORT $LN132@R_StoreWal
  0107c	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  0107f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01082	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  01088	8b 55 ac	 mov	 edx, DWORD PTR _rover$5[ebp]
  0108b	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0108e	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  01093	3b c8		 cmp	 ecx, eax
  01095	74 05		 je	 SHORT $LN132@R_StoreWal

; 1798 : 								continue;

  01097	e9 60 ff ff ff	 jmp	 $LN23@R_StoreWal
$LN132@R_StoreWal:

; 1799 : 						}

  0109c	eb 13		 jmp	 SHORT $LN133@R_StoreWal
$LN129@R_StoreWal:

; 1800 : 						else
; 1801 : 						{
; 1802 : 							if (!(r2->flags & FF_CUTSOLIDS))

  0109e	8b 45 a8	 mov	 eax, DWORD PTR _r2$4[ebp]
  010a1	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  010a4	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  010aa	75 05		 jne	 SHORT $LN133@R_StoreWal

; 1803 : 								continue;

  010ac	e9 4b ff ff ff	 jmp	 $LN23@R_StoreWal
$LN133@R_StoreWal:

; 1804 : 						}
; 1805 : 
; 1806 : 						if (*rover->topheight > *r2->topheight || *rover->bottomheight < *r2->bottomheight)

  010b1	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  010b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  010b6	8b 55 a8	 mov	 edx, DWORD PTR _r2$4[ebp]
  010b9	8b 02		 mov	 eax, DWORD PTR [edx]
  010bb	8b 09		 mov	 ecx, DWORD PTR [ecx]
  010bd	3b 08		 cmp	 ecx, DWORD PTR [eax]
  010bf	7f 12		 jg	 SHORT $LN135@R_StoreWal
  010c1	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  010c4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  010c7	8b 55 a8	 mov	 edx, DWORD PTR _r2$4[ebp]
  010ca	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  010cd	8b 09		 mov	 ecx, DWORD PTR [ecx]
  010cf	3b 08		 cmp	 ecx, DWORD PTR [eax]
  010d1	7d 05		 jge	 SHORT $LN134@R_StoreWal
$LN135@R_StoreWal:

; 1807 : 							continue;

  010d3	e9 24 ff ff ff	 jmp	 $LN23@R_StoreWal
$LN134@R_StoreWal:

; 1808 : 
; 1809 : 						break;

  010d8	eb 05		 jmp	 SHORT $LN24@R_StoreWal

; 1810 : 					}

  010da	e9 1d ff ff ff	 jmp	 $LN23@R_StoreWal
$LN24@R_StoreWal:

; 1811 : 					if (r2)

  010df	83 7d a8 00	 cmp	 DWORD PTR _r2$4[ebp], 0
  010e3	74 05		 je	 SHORT $LN136@R_StoreWal

; 1812 : 						continue;

  010e5	e9 92 fe ff ff	 jmp	 $LN20@R_StoreWal
$LN136@R_StoreWal:

; 1813 : 
; 1814 : 					ds_p->thicksides[i] = rover;

  010ea	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  010ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  010f3	8b 55 ac	 mov	 edx, DWORD PTR _rover$5[ebp]
  010f6	89 94 81 d4 00
	00 00		 mov	 DWORD PTR [ecx+eax*4+212], edx

; 1815 : 					i++;

  010fd	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  01100	83 c0 01	 add	 eax, 1
  01103	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax

; 1816 : 				}

  01106	e9 71 fe ff ff	 jmp	 $LN20@R_StoreWal
$LN21@R_StoreWal:

; 1817 : 			}

  0110b	e9 b3 01 00 00	 jmp	 $LN30@R_StoreWal
$LN101@R_StoreWal:

; 1818 : 			else if (backsector->ffloors)

  01110	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  01115	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0111c	0f 84 b2 00 00
	00		 je	 $LN137@R_StoreWal

; 1819 : 			{
; 1820 : 				for (rover = backsector->ffloors, i = 0; rover && i < MAXFFLOORS; rover = rover->next)

  01122	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  01127	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0112d	89 4d ac	 mov	 DWORD PTR _rover$5[ebp], ecx
  01130	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01137	eb 09		 jmp	 SHORT $LN28@R_StoreWal
$LN26@R_StoreWal:
  01139	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  0113c	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0113f	89 4d ac	 mov	 DWORD PTR _rover$5[ebp], ecx
$LN28@R_StoreWal:
  01142	83 7d ac 00	 cmp	 DWORD PTR _rover$5[ebp], 0
  01146	0f 84 83 00 00
	00		 je	 $LN27@R_StoreWal
  0114c	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  01150	7d 7d		 jge	 SHORT $LN27@R_StoreWal

; 1821 : 				{
; 1822 : 					if (!(rover->flags & FF_RENDERSIDES) || !(rover->flags & FF_EXISTS) || rover->flags & FF_INVERTSIDES)

  01152	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01155	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01158	83 e1 08	 and	 ecx, 8
  0115b	74 19		 je	 SHORT $LN140@R_StoreWal
  0115d	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01160	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01163	83 e1 01	 and	 ecx, 1
  01166	74 0e		 je	 SHORT $LN140@R_StoreWal
  01168	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  0116b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0116e	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  01174	74 02		 je	 SHORT $LN139@R_StoreWal
$LN140@R_StoreWal:

; 1823 : 						continue;

  01176	eb c1		 jmp	 SHORT $LN26@R_StoreWal
$LN139@R_StoreWal:

; 1824 : 					if (*rover->topheight <= frontsector->floorheight || *rover->bottomheight >= frontsector->ceilingheight)

  01178	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  0117b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0117d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  01183	8b 01		 mov	 eax, DWORD PTR [ecx]
  01185	3b 02		 cmp	 eax, DWORD PTR [edx]
  01187	7e 13		 jle	 SHORT $LN142@R_StoreWal
  01189	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  0118c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0118f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  01195	8b 01		 mov	 eax, DWORD PTR [ecx]
  01197	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0119a	7c 02		 jl	 SHORT $LN141@R_StoreWal
$LN142@R_StoreWal:

; 1825 : 						continue;

  0119c	eb 9b		 jmp	 SHORT $LN26@R_StoreWal
$LN141@R_StoreWal:

; 1826 : 					if (rover->norender == leveltime)

  0119e	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  011a1	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  011a4	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _leveltime
  011aa	75 02		 jne	 SHORT $LN143@R_StoreWal

; 1827 : 						continue;

  011ac	eb 8b		 jmp	 SHORT $LN26@R_StoreWal
$LN143@R_StoreWal:

; 1828 : 
; 1829 : 					ds_p->thicksides[i] = rover;

  011ae	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  011b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  011b7	8b 55 ac	 mov	 edx, DWORD PTR _rover$5[ebp]
  011ba	89 94 81 d4 00
	00 00		 mov	 DWORD PTR [ecx+eax*4+212], edx

; 1830 : 					i++;

  011c1	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  011c4	83 c0 01	 add	 eax, 1
  011c7	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax

; 1831 : 				}

  011ca	e9 6a ff ff ff	 jmp	 $LN26@R_StoreWal
$LN27@R_StoreWal:

; 1832 : 			}

  011cf	e9 ef 00 00 00	 jmp	 $LN30@R_StoreWal
$LN137@R_StoreWal:

; 1833 : 			else if (frontsector->ffloors)

  011d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  011d9	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  011e0	0f 84 dd 00 00
	00		 je	 $LN30@R_StoreWal

; 1834 : 			{
; 1835 : 				for (rover = frontsector->ffloors, i = 0; rover && i < MAXFFLOORS; rover = rover->next)

  011e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  011eb	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  011f1	89 4d ac	 mov	 DWORD PTR _rover$5[ebp], ecx
  011f4	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  011fb	eb 09		 jmp	 SHORT $LN31@R_StoreWal
$LN29@R_StoreWal:
  011fd	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01200	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  01203	89 4d ac	 mov	 DWORD PTR _rover$5[ebp], ecx
$LN31@R_StoreWal:
  01206	83 7d ac 00	 cmp	 DWORD PTR _rover$5[ebp], 0
  0120a	0f 84 b3 00 00
	00		 je	 $LN30@R_StoreWal
  01210	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  01214	0f 8d a9 00 00
	00		 jge	 $LN30@R_StoreWal

; 1836 : 				{
; 1837 : 					if (!(rover->flags & FF_RENDERSIDES) || !(rover->flags & FF_EXISTS) || !(rover->flags & FF_ALLSIDES))

  0121a	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  0121d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01220	83 e1 08	 and	 ecx, 8
  01223	74 19		 je	 SHORT $LN146@R_StoreWal
  01225	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01228	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0122b	83 e1 01	 and	 ecx, 1
  0122e	74 0e		 je	 SHORT $LN146@R_StoreWal
  01230	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01233	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01236	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  0123c	75 02		 jne	 SHORT $LN145@R_StoreWal
$LN146@R_StoreWal:

; 1838 : 						continue;

  0123e	eb bd		 jmp	 SHORT $LN29@R_StoreWal
$LN145@R_StoreWal:

; 1839 : 					if (*rover->topheight <= frontsector->floorheight || *rover->bottomheight >= frontsector->ceilingheight)

  01240	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01243	8b 08		 mov	 ecx, DWORD PTR [eax]
  01245	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  0124b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0124d	3b 02		 cmp	 eax, DWORD PTR [edx]
  0124f	7e 13		 jle	 SHORT $LN148@R_StoreWal
  01251	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01254	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01257	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  0125d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0125f	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01262	7c 02		 jl	 SHORT $LN147@R_StoreWal
$LN148@R_StoreWal:

; 1840 : 						continue;

  01264	eb 97		 jmp	 SHORT $LN29@R_StoreWal
$LN147@R_StoreWal:

; 1841 : 					if (*rover->topheight <= backsector->floorheight || *rover->bottomheight >= backsector->ceilingheight)

  01266	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0126b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  01271	8b 01		 mov	 eax, DWORD PTR [ecx]
  01273	3b 02		 cmp	 eax, DWORD PTR [edx]
  01275	7e 13		 jle	 SHORT $LN150@R_StoreWal
  01277	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  0127a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0127d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  01283	8b 01		 mov	 eax, DWORD PTR [ecx]
  01285	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01288	7c 05		 jl	 SHORT $LN149@R_StoreWal
$LN150@R_StoreWal:

; 1842 : 						continue;

  0128a	e9 6e ff ff ff	 jmp	 $LN29@R_StoreWal
$LN149@R_StoreWal:

; 1843 : 					if (rover->norender == leveltime)

  0128f	8b 45 ac	 mov	 eax, DWORD PTR _rover$5[ebp]
  01292	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01295	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _leveltime
  0129b	75 05		 jne	 SHORT $LN151@R_StoreWal

; 1844 : 						continue;

  0129d	e9 5b ff ff ff	 jmp	 $LN29@R_StoreWal
$LN151@R_StoreWal:

; 1845 : 
; 1846 : 					ds_p->thicksides[i] = rover;

  012a2	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  012a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  012ab	8b 55 ac	 mov	 edx, DWORD PTR _rover$5[ebp]
  012ae	89 94 81 d4 00
	00 00		 mov	 DWORD PTR [ecx+eax*4+212], edx

; 1847 : 					i++;

  012b5	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  012b8	83 c0 01	 add	 eax, 1
  012bb	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax

; 1848 : 				}

  012be	e9 3a ff ff ff	 jmp	 $LN29@R_StoreWal
$LN30@R_StoreWal:

; 1849 : 			}
; 1850 : 
; 1851 : 			ds_p->numthicksides = numthicksides = i;

  012c3	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  012c6	a3 00 00 00 00	 mov	 DWORD PTR _numthicksides, eax
  012cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  012d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _numthicksides
  012d7	89 91 78 01 00
	00		 mov	 DWORD PTR [ecx+376], edx
$LN99@R_StoreWal:

; 1852 : 		}
; 1853 : 		if (sidedef->midtexture)

  012dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  012e2	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  012e6	74 6b		 je	 SHORT $LN152@R_StoreWal

; 1854 : 		{
; 1855 : 			// masked midtexture
; 1856 : 			if (!ds_p->thicksidecol)

  012e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  012ed	83 b8 74 01 00
	00 00		 cmp	 DWORD PTR [eax+372], 0
  012f4	75 3f		 jne	 SHORT $LN153@R_StoreWal

; 1857 : 			{
; 1858 : 				ds_p->maskedtexturecol = maskedtexturecol = lastopening - rw_x;

  012f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_x
  012fb	d1 e0		 shl	 eax, 1
  012fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lastopening
  01303	2b c8		 sub	 ecx, eax
  01305	89 0d 00 00 00
	00		 mov	 DWORD PTR _maskedtexturecol, ecx
  0130b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  01311	a1 00 00 00 00	 mov	 eax, DWORD PTR _maskedtexturecol
  01316	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 1859 : 				lastopening += rw_stopx - rw_x;

  01319	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  0131e	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _rw_x
  01324	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lastopening
  0132a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0132d	89 15 00 00 00
	00		 mov	 DWORD PTR _lastopening, edx

; 1860 : 			}

  01333	eb 14		 jmp	 SHORT $LN154@R_StoreWal
$LN153@R_StoreWal:

; 1861 : 			else
; 1862 : 				ds_p->maskedtexturecol = ds_p->thicksidecol;

  01335	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0133a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  01340	8b 91 74 01 00
	00		 mov	 edx, DWORD PTR [ecx+372]
  01346	89 50 2c	 mov	 DWORD PTR [eax+44], edx
$LN154@R_StoreWal:

; 1863 : 
; 1864 : 			maskedtexture = true;

  01349	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _maskedtexture, 1
$LN152@R_StoreWal:

; 1865 : 		}
; 1866 : 	}
; 1867 : 
; 1868 : 	// calculate rw_offset (only needed for textured lines)
; 1869 : 	segtextured = midtexture || toptexture || bottomtexture || maskedtexture || (numthicksides > 0);

  01353	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _midtexture, 0
  0135a	75 30		 jne	 SHORT $LN226@R_StoreWal
  0135c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _toptexture, 0
  01363	75 27		 jne	 SHORT $LN226@R_StoreWal
  01365	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bottomtexture, 0
  0136c	75 1e		 jne	 SHORT $LN226@R_StoreWal
  0136e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _maskedtexture, 0
  01375	75 15		 jne	 SHORT $LN226@R_StoreWal
  01377	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numthicksides, 0
  0137e	7f 0c		 jg	 SHORT $LN226@R_StoreWal
  01380	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv797[ebp], 0
  0138a	eb 0a		 jmp	 SHORT $LN227@R_StoreWal
$LN226@R_StoreWal:
  0138c	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv797[ebp], 1
$LN227@R_StoreWal:
  01396	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv797[ebp]
  0139c	a3 00 00 00 00	 mov	 DWORD PTR _segtextured, eax

; 1870 : 
; 1871 : 	if (segtextured)

  013a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _segtextured, 0
  013a8	0f 84 51 01 00
	00		 je	 $LN165@R_StoreWal

; 1872 : 	{
; 1873 : 		offsetangle = rw_normalangle-rw_angle1;

  013ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_normalangle
  013b3	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _rw_angle1
  013b9	89 45 f0	 mov	 DWORD PTR _offsetangle$[ebp], eax

; 1874 : 
; 1875 : 		if (offsetangle > ANGLE_180)

  013bc	81 7d f0 00 00
	00 80		 cmp	 DWORD PTR _offsetangle$[ebp], -2147483648 ; 80000000H
  013c3	76 08		 jbe	 SHORT $LN156@R_StoreWal

; 1876 : 			offsetangle = -(signed)offsetangle;

  013c5	8b 45 f0	 mov	 eax, DWORD PTR _offsetangle$[ebp]
  013c8	f7 d8		 neg	 eax
  013ca	89 45 f0	 mov	 DWORD PTR _offsetangle$[ebp], eax
$LN156@R_StoreWal:

; 1877 : 
; 1878 : 		if (offsetangle > ANGLE_90)

  013cd	81 7d f0 00 00
	00 40		 cmp	 DWORD PTR _offsetangle$[ebp], 1073741824 ; 40000000H
  013d4	76 07		 jbe	 SHORT $LN157@R_StoreWal

; 1879 : 			offsetangle = ANGLE_90;

  013d6	c7 45 f0 00 00
	00 40		 mov	 DWORD PTR _offsetangle$[ebp], 1073741824 ; 40000000H
$LN157@R_StoreWal:

; 1880 : 
; 1881 : 		sineval = FINESINE(offsetangle >>ANGLETOFINESHIFT);

  013dd	8b 45 f0	 mov	 eax, DWORD PTR _offsetangle$[ebp]
  013e0	c1 e8 13	 shr	 eax, 19			; 00000013H
  013e3	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  013ea	89 4d f8	 mov	 DWORD PTR _sineval$[ebp], ecx

; 1882 : 		rw_offset = FixedMul (hyp, sineval);

  013ed	8b 45 f8	 mov	 eax, DWORD PTR _sineval$[ebp]
  013f0	50		 push	 eax
  013f1	8b 4d fc	 mov	 ecx, DWORD PTR _hyp$[ebp]
  013f4	51		 push	 ecx
  013f5	e8 00 00 00 00	 call	 _FixedMul
  013fa	83 c4 08	 add	 esp, 8
  013fd	a3 00 00 00 00	 mov	 DWORD PTR _rw_offset, eax

; 1883 : 
; 1884 : 		if (rw_normalangle-rw_angle1 < ANGLE_180)

  01402	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_normalangle
  01407	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _rw_angle1
  0140d	3d 00 00 00 80	 cmp	 eax, -2147483648	; 80000000H
  01412	73 0c		 jae	 SHORT $LN158@R_StoreWal

; 1885 : 			rw_offset = -rw_offset;

  01414	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_offset
  01419	f7 d8		 neg	 eax
  0141b	a3 00 00 00 00	 mov	 DWORD PTR _rw_offset, eax
$LN158@R_StoreWal:

; 1886 : 
; 1887 : 		/// don't use texture offset for splats
; 1888 : 		rw_offset2 = rw_offset + curline->offset;

  01420	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  01425	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_offset
  0142b	03 48 0c	 add	 ecx, DWORD PTR [eax+12]
  0142e	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_offset2, ecx

; 1889 : 		rw_offset += sidedef->textureoffset + curline->offset;

  01434	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  01439	8b 08		 mov	 ecx, DWORD PTR [eax]
  0143b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  01441	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  01444	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _rw_offset
  0144a	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_offset, ecx

; 1890 : 		rw_centerangle = ANGLE_90 + viewangle - rw_normalangle;

  01450	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewangle
  01455	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  0145a	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _rw_normalangle
  01460	a3 00 00 00 00	 mov	 DWORD PTR _rw_centerangle, eax

; 1891 : 
; 1892 : 		// calculate light table
; 1893 : 		//  use different light tables
; 1894 : 		//  for horizontal / vertical / diagonal
; 1895 : 		// OPTIMIZE: get rid of LIGHTSEGSHIFT globally
; 1896 : 		lightnum = (frontsector->lightlevel >> LIGHTSEGSHIFT);

  01465	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  0146a	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0146e	c1 f9 03	 sar	 ecx, 3
  01471	89 4d e8	 mov	 DWORD PTR _lightnum$[ebp], ecx

; 1897 : 
; 1898 : 		if (curline->v1->y == curline->v2->y)

  01474	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  01479	8b 08		 mov	 ecx, DWORD PTR [eax]
  0147b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  01481	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01484	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  01487	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0148a	75 0b		 jne	 SHORT $LN159@R_StoreWal

; 1899 : 			lightnum--;

  0148c	8b 45 e8	 mov	 eax, DWORD PTR _lightnum$[ebp]
  0148f	83 e8 01	 sub	 eax, 1
  01492	89 45 e8	 mov	 DWORD PTR _lightnum$[ebp], eax
  01495	eb 1f		 jmp	 SHORT $LN161@R_StoreWal
$LN159@R_StoreWal:

; 1900 : 		else if (curline->v1->x == curline->v2->x)

  01497	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0149c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0149e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  014a4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  014a7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  014a9	3b 08		 cmp	 ecx, DWORD PTR [eax]
  014ab	75 09		 jne	 SHORT $LN161@R_StoreWal

; 1901 : 			lightnum++;

  014ad	8b 45 e8	 mov	 eax, DWORD PTR _lightnum$[ebp]
  014b0	83 c0 01	 add	 eax, 1
  014b3	89 45 e8	 mov	 DWORD PTR _lightnum$[ebp], eax
$LN161@R_StoreWal:

; 1902 : 
; 1903 : 		if (lightnum < 0)

  014b6	83 7d e8 00	 cmp	 DWORD PTR _lightnum$[ebp], 0
  014ba	7d 16		 jge	 SHORT $LN162@R_StoreWal

; 1904 : 			walllights = scalelight[0];

  014bc	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  014c1	6b c8 00	 imul	 ecx, eax, 0
  014c4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  014ca	89 0d 00 00 00
	00		 mov	 DWORD PTR _walllights, ecx
  014d0	eb 2d		 jmp	 SHORT $LN165@R_StoreWal
$LN162@R_StoreWal:

; 1905 : 		else if (lightnum >= LIGHTLEVELS)

  014d2	83 7d e8 20	 cmp	 DWORD PTR _lightnum$[ebp], 32 ; 00000020H
  014d6	7c 16		 jl	 SHORT $LN164@R_StoreWal

; 1906 : 			walllights = scalelight[LIGHTLEVELS - 1];

  014d8	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  014dd	6b c8 1f	 imul	 ecx, eax, 31
  014e0	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  014e6	89 0d 00 00 00
	00		 mov	 DWORD PTR _walllights, ecx
  014ec	eb 11		 jmp	 SHORT $LN165@R_StoreWal
$LN164@R_StoreWal:

; 1907 : 		else
; 1908 : 			walllights = scalelight[lightnum];

  014ee	69 45 e8 c0 00
	00 00		 imul	 eax, DWORD PTR _lightnum$[ebp], 192
  014f5	05 00 00 00 00	 add	 eax, OFFSET _scalelight
  014fa	a3 00 00 00 00	 mov	 DWORD PTR _walllights, eax
$LN165@R_StoreWal:

; 1909 : 	}
; 1910 : 
; 1911 : 	// if a floor / ceiling plane is on the wrong side
; 1912 : 	//  of the view plane, it is definitely invisible
; 1913 : 	//  and doesn't need to be marked.
; 1914 : 	if (frontsector->heightsec == -1)

  014ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  01504	83 78 68 ff	 cmp	 DWORD PTR [eax+104], -1
  01508	75 43		 jne	 SHORT $LN168@R_StoreWal

; 1915 : 	{
; 1916 : 		if (frontsector->floorheight >= viewz)

  0150a	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  0150f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01511	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _viewz
  01517	7c 0a		 jl	 SHORT $LN167@R_StoreWal

; 1917 : 		{
; 1918 : 			// above view plane
; 1919 : 			markfloor = false;

  01519	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _markfloor, 0
$LN167@R_StoreWal:

; 1920 : 		}
; 1921 : 
; 1922 : 		if (frontsector->ceilingheight <= viewz &&

  01523	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  01528	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0152b	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _viewz
  01531	7f 1a		 jg	 SHORT $LN168@R_StoreWal
  01533	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  01538	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0153b	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _skyflatnum
  01541	74 0a		 je	 SHORT $LN168@R_StoreWal

; 1923 : 		    frontsector->ceilingpic != skyflatnum)
; 1924 : 		{
; 1925 : 			// below view plane
; 1926 : 			markceiling = false;

  01543	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _markceiling, 0
$LN168@R_StoreWal:

; 1927 : 		}
; 1928 : 	}
; 1929 : 
; 1930 : 	// calculate incremental stepping values for texture edges
; 1931 : 	worldtop >>= 4;

  0154d	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldtop
  01552	c1 f8 04	 sar	 eax, 4
  01555	a3 00 00 00 00	 mov	 DWORD PTR _worldtop, eax

; 1932 : 	worldbottom >>= 4;

  0155a	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldbottom
  0155f	c1 f8 04	 sar	 eax, 4
  01562	a3 00 00 00 00	 mov	 DWORD PTR _worldbottom, eax

; 1933 : 
; 1934 : 	topstep = -FixedMul (rw_scalestep, worldtop);

  01567	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldtop
  0156c	50		 push	 eax
  0156d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_scalestep
  01573	51		 push	 ecx
  01574	e8 00 00 00 00	 call	 _FixedMul
  01579	83 c4 08	 add	 esp, 8
  0157c	f7 d8		 neg	 eax
  0157e	a3 00 00 00 00	 mov	 DWORD PTR _topstep, eax

; 1935 : 	topfrac = (centeryfrac>>4) - FixedMul (worldtop, rw_scale);

  01583	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  01589	c1 fe 04	 sar	 esi, 4
  0158c	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  01591	50		 push	 eax
  01592	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _worldtop
  01598	51		 push	 ecx
  01599	e8 00 00 00 00	 call	 _FixedMul
  0159e	83 c4 08	 add	 esp, 8
  015a1	2b f0		 sub	 esi, eax
  015a3	89 35 00 00 00
	00		 mov	 DWORD PTR _topfrac, esi

; 1936 : 
; 1937 : 	bottomstep = -FixedMul (rw_scalestep,worldbottom);

  015a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldbottom
  015ae	50		 push	 eax
  015af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_scalestep
  015b5	51		 push	 ecx
  015b6	e8 00 00 00 00	 call	 _FixedMul
  015bb	83 c4 08	 add	 esp, 8
  015be	f7 d8		 neg	 eax
  015c0	a3 00 00 00 00	 mov	 DWORD PTR _bottomstep, eax

; 1938 : 	bottomfrac = (centeryfrac>>4) - FixedMul (worldbottom, rw_scale);

  015c5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  015cb	c1 fe 04	 sar	 esi, 4
  015ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  015d3	50		 push	 eax
  015d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _worldbottom
  015da	51		 push	 ecx
  015db	e8 00 00 00 00	 call	 _FixedMul
  015e0	83 c4 08	 add	 esp, 8
  015e3	2b f0		 sub	 esi, eax
  015e5	89 35 00 00 00
	00		 mov	 DWORD PTR _bottomfrac, esi

; 1939 : 
; 1940 : 	dc_numlights = 0;

  015eb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _dc_numlights, 0

; 1941 : 
; 1942 : 	if (frontsector->numlights)

  015f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  015fa	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  01601	0f 84 43 02 00
	00		 je	 $LN169@R_StoreWal

; 1943 : 	{
; 1944 : 		dc_numlights = frontsector->numlights;

  01607	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  0160c	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  01612	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_numlights, ecx

; 1945 : 		if (dc_numlights >= dc_maxlights)

  01618	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_numlights
  0161d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_maxlights
  01623	7c 2c		 jl	 SHORT $LN170@R_StoreWal

; 1946 : 		{
; 1947 : 			dc_maxlights = dc_numlights;

  01625	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_numlights
  0162a	a3 00 00 00 00	 mov	 DWORD PTR _dc_maxlights, eax

; 1948 : 			dc_lightlist = Z_Realloc(dc_lightlist, sizeof (*dc_lightlist) * dc_maxlights, PU_STATIC, NULL);

  0162f	6a 00		 push	 0
  01631	6a 00		 push	 0
  01633	6a 01		 push	 1
  01635	6b 05 00 00 00
	00 24		 imul	 eax, DWORD PTR _dc_maxlights, 36
  0163c	50		 push	 eax
  0163d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  01643	51		 push	 ecx
  01644	e8 00 00 00 00	 call	 _Z_ReallocAlign
  01649	83 c4 14	 add	 esp, 20			; 00000014H
  0164c	a3 00 00 00 00	 mov	 DWORD PTR _dc_lightlist, eax
$LN170@R_StoreWal:

; 1949 : 		}
; 1950 : 
; 1951 : 		for (i = p = 0; i < dc_numlights; i++)

  01651	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0
  01658	8b 45 e0	 mov	 eax, DWORD PTR _p$[ebp]
  0165b	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
  0165e	eb 09		 jmp	 SHORT $LN34@R_StoreWal
$LN32@R_StoreWal:
  01660	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  01663	83 c0 01	 add	 eax, 1
  01666	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN34@R_StoreWal:
  01669	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0166c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  01672	0f 8d ca 01 00
	00		 jge	 $LN33@R_StoreWal

; 1952 : 		{
; 1953 : 			light = &frontsector->lightlist[i];

  01678	6b 45 e4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0167c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  01682	03 81 a4 00 00
	00		 add	 eax, DWORD PTR [ecx+164]
  01688	89 45 dc	 mov	 DWORD PTR _light$[ebp], eax

; 1954 : 			rlight = &dc_lightlist[p];

  0168b	6b 45 e0 24	 imul	 eax, DWORD PTR _p$[ebp], 36
  0168f	03 05 00 00 00
	00		 add	 eax, DWORD PTR _dc_lightlist
  01695	89 45 d8	 mov	 DWORD PTR _rlight$[ebp], eax

; 1955 : 
; 1956 : 			if (i != 0)

  01698	83 7d e4 00	 cmp	 DWORD PTR _i$[ebp], 0
  0169c	74 57		 je	 SHORT $LN173@R_StoreWal

; 1957 : 			{
; 1958 : 				if (light->height < frontsector->floorheight)

  0169e	8b 45 dc	 mov	 eax, DWORD PTR _light$[ebp]
  016a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  016a7	8b 10		 mov	 edx, DWORD PTR [eax]
  016a9	3b 11		 cmp	 edx, DWORD PTR [ecx]
  016ab	7d 02		 jge	 SHORT $LN172@R_StoreWal

; 1959 : 					continue;

  016ad	eb b1		 jmp	 SHORT $LN32@R_StoreWal
$LN172@R_StoreWal:

; 1960 : 
; 1961 : 				if (light->height > frontsector->ceilingheight && i+1 < dc_numlights && frontsector->lightlist[i+1].height > frontsector->ceilingheight)

  016af	8b 45 dc	 mov	 eax, DWORD PTR _light$[ebp]
  016b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  016b8	8b 10		 mov	 edx, DWORD PTR [eax]
  016ba	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  016bd	7e 36		 jle	 SHORT $LN173@R_StoreWal
  016bf	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  016c2	83 c0 01	 add	 eax, 1
  016c5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  016cb	7d 28		 jge	 SHORT $LN173@R_StoreWal
  016cd	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  016d0	83 c0 01	 add	 eax, 1
  016d3	6b c8 14	 imul	 ecx, eax, 20
  016d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  016dc	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  016e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  016e8	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  016eb	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  016ee	7e 05		 jle	 SHORT $LN173@R_StoreWal

; 1962 : 					continue;

  016f0	e9 6b ff ff ff	 jmp	 $LN32@R_StoreWal
$LN173@R_StoreWal:

; 1963 : 			}
; 1964 : 
; 1965 : 			rlight->height = (centeryfrac>>4) - FixedMul((light->height - viewz) >> 4, rw_scale);

  016f5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  016fb	c1 fe 04	 sar	 esi, 4
  016fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  01703	50		 push	 eax
  01704	8b 4d dc	 mov	 ecx, DWORD PTR _light$[ebp]
  01707	8b 11		 mov	 edx, DWORD PTR [ecx]
  01709	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _viewz
  0170f	c1 fa 04	 sar	 edx, 4
  01712	52		 push	 edx
  01713	e8 00 00 00 00	 call	 _FixedMul
  01718	83 c4 08	 add	 esp, 8
  0171b	2b f0		 sub	 esi, eax
  0171d	8b 45 d8	 mov	 eax, DWORD PTR _rlight$[ebp]
  01720	89 30		 mov	 DWORD PTR [eax], esi

; 1966 : 			rlight->heightstep = -FixedMul (rw_scalestep, (light->height - viewz) >> 4);

  01722	8b 45 dc	 mov	 eax, DWORD PTR _light$[ebp]
  01725	8b 08		 mov	 ecx, DWORD PTR [eax]
  01727	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  0172d	c1 f9 04	 sar	 ecx, 4
  01730	51		 push	 ecx
  01731	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_scalestep
  01737	52		 push	 edx
  01738	e8 00 00 00 00	 call	 _FixedMul
  0173d	83 c4 08	 add	 esp, 8
  01740	f7 d8		 neg	 eax
  01742	8b 4d d8	 mov	 ecx, DWORD PTR _rlight$[ebp]
  01745	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1967 : 			rlight->flags = light->flags;

  01748	8b 45 d8	 mov	 eax, DWORD PTR _rlight$[ebp]
  0174b	8b 4d dc	 mov	 ecx, DWORD PTR _light$[ebp]
  0174e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01751	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1968 : 
; 1969 : 			if (light->caster && light->caster->flags & FF_SOLID)

  01754	8b 45 dc	 mov	 eax, DWORD PTR _light$[ebp]
  01757	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0175b	0f 84 b7 00 00
	00		 je	 $LN174@R_StoreWal
  01761	8b 45 dc	 mov	 eax, DWORD PTR _light$[ebp]
  01764	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01767	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0176a	83 e2 06	 and	 edx, 6
  0176d	0f 84 a5 00 00
	00		 je	 $LN174@R_StoreWal

; 1970 : 			{
; 1971 : 				lheight = *light->caster->bottomheight > frontsector->ceilingheight ? frontsector->ceilingheight + FRACUNIT : *light->caster->bottomheight;

  01773	8b 45 dc	 mov	 eax, DWORD PTR _light$[ebp]
  01776	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01779	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0177c	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  01781	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01783	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  01786	7e 16		 jle	 SHORT $LN228@R_StoreWal
  01788	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  0178e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01791	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  01796	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv940[ebp], eax
  0179c	eb 11		 jmp	 SHORT $LN229@R_StoreWal
$LN228@R_StoreWal:
  0179e	8b 4d dc	 mov	 ecx, DWORD PTR _light$[ebp]
  017a1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  017a4	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  017a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  017a9	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv940[ebp], ecx
$LN229@R_StoreWal:
  017af	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv940[ebp]
  017b5	89 55 d4	 mov	 DWORD PTR _lheight$[ebp], edx

; 1972 : 				rlight->botheight = (centeryfrac >> 4) - FixedMul((*light->caster->bottomheight - viewz) >> 4, rw_scale);

  017b8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  017be	c1 fe 04	 sar	 esi, 4
  017c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  017c6	50		 push	 eax
  017c7	8b 4d dc	 mov	 ecx, DWORD PTR _light$[ebp]
  017ca	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  017cd	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  017d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  017d2	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  017d8	c1 f9 04	 sar	 ecx, 4
  017db	51		 push	 ecx
  017dc	e8 00 00 00 00	 call	 _FixedMul
  017e1	83 c4 08	 add	 esp, 8
  017e4	2b f0		 sub	 esi, eax
  017e6	8b 55 d8	 mov	 edx, DWORD PTR _rlight$[ebp]
  017e9	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1973 : 				rlight->botheightstep = -FixedMul (rw_scalestep, (*light->caster->bottomheight - viewz) >> 4);

  017ec	8b 45 dc	 mov	 eax, DWORD PTR _light$[ebp]
  017ef	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  017f2	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  017f5	8b 02		 mov	 eax, DWORD PTR [edx]
  017f7	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewz
  017fd	c1 f8 04	 sar	 eax, 4
  01800	50		 push	 eax
  01801	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_scalestep
  01807	51		 push	 ecx
  01808	e8 00 00 00 00	 call	 _FixedMul
  0180d	83 c4 08	 add	 esp, 8
  01810	f7 d8		 neg	 eax
  01812	8b 55 d8	 mov	 edx, DWORD PTR _rlight$[ebp]
  01815	89 42 0c	 mov	 DWORD PTR [edx+12], eax
$LN174@R_StoreWal:

; 1974 : 			}
; 1975 : 
; 1976 : 			rlight->lightlevel = *light->lightlevel;

  01818	8b 45 dc	 mov	 eax, DWORD PTR _light$[ebp]
  0181b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0181e	8b 55 d8	 mov	 edx, DWORD PTR _rlight$[ebp]
  01821	66 8b 01	 mov	 ax, WORD PTR [ecx]
  01824	66 89 42 10	 mov	 WORD PTR [edx+16], ax

; 1977 : 			rlight->extra_colormap = light->extra_colormap;

  01828	8b 45 d8	 mov	 eax, DWORD PTR _rlight$[ebp]
  0182b	8b 4d dc	 mov	 ecx, DWORD PTR _light$[ebp]
  0182e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01831	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1978 : 			p++;

  01834	8b 45 e0	 mov	 eax, DWORD PTR _p$[ebp]
  01837	83 c0 01	 add	 eax, 1
  0183a	89 45 e0	 mov	 DWORD PTR _p$[ebp], eax

; 1979 : 		}

  0183d	e9 1e fe ff ff	 jmp	 $LN32@R_StoreWal
$LN33@R_StoreWal:

; 1980 : 
; 1981 : 		dc_numlights = p;

  01842	8b 45 e0	 mov	 eax, DWORD PTR _p$[ebp]
  01845	a3 00 00 00 00	 mov	 DWORD PTR _dc_numlights, eax
$LN169@R_StoreWal:

; 1982 : 	}
; 1983 : 
; 1984 : 	if (numffloors)

  0184a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numffloors, 0
  01851	0f 84 a3 00 00
	00		 je	 $LN36@R_StoreWal

; 1985 : 	{
; 1986 : 		for (i = 0; i < numffloors; i++)

  01857	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0185e	eb 09		 jmp	 SHORT $LN37@R_StoreWal
$LN35@R_StoreWal:
  01860	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  01863	83 c0 01	 add	 eax, 1
  01866	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN37@R_StoreWal:
  01869	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0186c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numffloors
  01872	0f 8d 82 00 00
	00		 jge	 $LN36@R_StoreWal

; 1987 : 		{
; 1988 : //			if (curline->polyseg && !ffloor[i].polyobj)
; 1989 : //					continue;
; 1990 : 
; 1991 : 			ffloor[i].f_pos >>= 4;

  01878	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0187f	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+12]
  01885	c1 f9 04	 sar	 ecx, 4
  01888	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  0188f	89 8a 0c 00 00
	00		 mov	 DWORD PTR _ffloor[edx+12], ecx

; 1992 : 			ffloor[i].f_step = FixedMul(-rw_scalestep, ffloor[i].f_pos);

  01895	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  0189c	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+12]
  018a2	51		 push	 ecx
  018a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_scalestep
  018a9	f7 da		 neg	 edx
  018ab	52		 push	 edx
  018ac	e8 00 00 00 00	 call	 _FixedMul
  018b1	83 c4 08	 add	 esp, 8
  018b4	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  018bb	89 81 18 00 00
	00		 mov	 DWORD PTR _ffloor[ecx+24], eax

; 1993 : 			ffloor[i].f_frac = (centeryfrac>>4) - FixedMul(ffloor[i].f_pos, rw_scale);

  018c1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  018c7	c1 fe 04	 sar	 esi, 4
  018ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  018cf	50		 push	 eax
  018d0	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  018d7	8b 91 0c 00 00
	00		 mov	 edx, DWORD PTR _ffloor[ecx+12]
  018dd	52		 push	 edx
  018de	e8 00 00 00 00	 call	 _FixedMul
  018e3	83 c4 08	 add	 esp, 8
  018e6	2b f0		 sub	 esi, eax
  018e8	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  018ef	89 b0 14 00 00
	00		 mov	 DWORD PTR _ffloor[eax+20], esi

; 1994 : 		}

  018f5	e9 66 ff ff ff	 jmp	 $LN35@R_StoreWal
$LN36@R_StoreWal:

; 1995 : 	}
; 1996 : 
; 1997 : 	if (backsector)

  018fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _backsector, 0
  01901	0f 84 41 06 00
	00		 je	 $LN42@R_StoreWal

; 1998 : 	{
; 1999 : 		worldhigh >>= 4;

  01907	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldhigh
  0190c	c1 f8 04	 sar	 eax, 4
  0190f	a3 00 00 00 00	 mov	 DWORD PTR _worldhigh, eax

; 2000 : 		worldlow >>= 4;

  01914	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldlow
  01919	c1 f8 04	 sar	 eax, 4
  0191c	a3 00 00 00 00	 mov	 DWORD PTR _worldlow, eax

; 2001 : 
; 2002 : 		if (worldhigh < worldtop)

  01921	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldhigh
  01926	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _worldtop
  0192c	7d 42		 jge	 SHORT $LN177@R_StoreWal

; 2003 : 		{
; 2004 : 			pixhigh = (centeryfrac>>4) - FixedMul (worldhigh, rw_scale);

  0192e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  01934	c1 fe 04	 sar	 esi, 4
  01937	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  0193c	50		 push	 eax
  0193d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _worldhigh
  01943	51		 push	 ecx
  01944	e8 00 00 00 00	 call	 _FixedMul
  01949	83 c4 08	 add	 esp, 8
  0194c	2b f0		 sub	 esi, eax
  0194e	89 35 00 00 00
	00		 mov	 DWORD PTR _pixhigh, esi

; 2005 : 			pixhighstep = -FixedMul (rw_scalestep,worldhigh);

  01954	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldhigh
  01959	50		 push	 eax
  0195a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_scalestep
  01960	51		 push	 ecx
  01961	e8 00 00 00 00	 call	 _FixedMul
  01966	83 c4 08	 add	 esp, 8
  01969	f7 d8		 neg	 eax
  0196b	a3 00 00 00 00	 mov	 DWORD PTR _pixhighstep, eax
$LN177@R_StoreWal:

; 2006 : 		}
; 2007 : 
; 2008 : 		if (worldlow > worldbottom)

  01970	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldlow
  01975	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _worldbottom
  0197b	7e 42		 jle	 SHORT $LN178@R_StoreWal

; 2009 : 		{
; 2010 : 			pixlow = (centeryfrac>>4) - FixedMul (worldlow, rw_scale);

  0197d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  01983	c1 fe 04	 sar	 esi, 4
  01986	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  0198b	50		 push	 eax
  0198c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _worldlow
  01992	51		 push	 ecx
  01993	e8 00 00 00 00	 call	 _FixedMul
  01998	83 c4 08	 add	 esp, 8
  0199b	2b f0		 sub	 esi, eax
  0199d	89 35 00 00 00
	00		 mov	 DWORD PTR _pixlow, esi

; 2011 : 			pixlowstep = -FixedMul (rw_scalestep,worldlow);

  019a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _worldlow
  019a8	50		 push	 eax
  019a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_scalestep
  019af	51		 push	 ecx
  019b0	e8 00 00 00 00	 call	 _FixedMul
  019b5	83 c4 08	 add	 esp, 8
  019b8	f7 d8		 neg	 eax
  019ba	a3 00 00 00 00	 mov	 DWORD PTR _pixlowstep, eax
$LN178@R_StoreWal:

; 2012 : 		}
; 2013 : 
; 2014 : 		{
; 2015 : 			ffloor_t * rover;
; 2016 : 			i = 0;

  019bf	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 2017 : 
; 2018 : 			if (backsector->ffloors)

  019c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  019cb	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  019d2	0f 84 ab 02 00
	00		 je	 $LN179@R_StoreWal

; 2019 : 			{
; 2020 : 				for (rover = backsector->ffloors; rover && i < MAXFFLOORS; rover = rover->next)

  019d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  019dd	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  019e3	89 4d 9c	 mov	 DWORD PTR _rover$1[ebp], ecx
  019e6	eb 09		 jmp	 SHORT $LN40@R_StoreWal
$LN38@R_StoreWal:
  019e8	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  019eb	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  019ee	89 4d 9c	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN40@R_StoreWal:
  019f1	83 7d 9c 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  019f5	0f 84 83 02 00
	00		 je	 $LN39@R_StoreWal
  019fb	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  019ff	0f 8d 79 02 00
	00		 jge	 $LN39@R_StoreWal

; 2021 : 				{
; 2022 : 					if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_RENDERPLANES))

  01a05	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a08	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01a0b	83 e1 01	 and	 ecx, 1
  01a0e	74 0b		 je	 SHORT $LN182@R_StoreWal
  01a10	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a13	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01a16	83 e1 10	 and	 ecx, 16			; 00000010H
  01a19	75 02		 jne	 SHORT $LN181@R_StoreWal
$LN182@R_StoreWal:

; 2023 : 						continue;

  01a1b	eb cb		 jmp	 SHORT $LN38@R_StoreWal
$LN181@R_StoreWal:

; 2024 : 					if (rover->norender == leveltime)

  01a1d	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a20	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01a23	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _leveltime
  01a29	75 02		 jne	 SHORT $LN183@R_StoreWal

; 2025 : 						continue;

  01a2b	eb bb		 jmp	 SHORT $LN38@R_StoreWal
$LN183@R_StoreWal:

; 2026 : 
; 2027 : 					if (*rover->bottomheight <= backsector->ceilingheight &&
; 2028 : 					    *rover->bottomheight >= backsector->floorheight &&

  01a2d	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a30	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a33	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  01a39	8b 01		 mov	 eax, DWORD PTR [ecx]
  01a3b	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01a3e	0f 8f 0c 01 00
	00		 jg	 $LN184@R_StoreWal
  01a44	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a47	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a4a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  01a50	8b 01		 mov	 eax, DWORD PTR [ecx]
  01a52	3b 02		 cmp	 eax, DWORD PTR [edx]
  01a54	0f 8c f6 00 00
	00		 jl	 $LN184@R_StoreWal
  01a5a	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a5d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a60	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewz
  01a66	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01a68	7d 0e		 jge	 SHORT $LN186@R_StoreWal
  01a6a	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a6d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01a70	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  01a76	74 26		 je	 SHORT $LN185@R_StoreWal
$LN186@R_StoreWal:
  01a78	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a7b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a7e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewz
  01a84	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01a86	0f 8e c4 00 00
	00		 jle	 $LN184@R_StoreWal
  01a8c	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01a8f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01a92	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  01a98	0f 84 b2 00 00
	00		 je	 $LN184@R_StoreWal
$LN185@R_StoreWal:

; 2029 : 					    ((viewz < *rover->bottomheight && !(rover->flags & FF_INVERTPLANES)) ||
; 2030 : 					     (viewz > *rover->bottomheight && (rover->flags & FF_BOTHPLANES))))
; 2031 : 					{
; 2032 : 						ffloor[i].mark = true;

  01a9e	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01aa5	c7 80 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _ffloor[eax+8], 1

; 2033 : 						ffloor[i].b_pos = *rover->bottomheight;

  01aaf	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01ab2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01ab5	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  01abc	8b 01		 mov	 eax, DWORD PTR [ecx]
  01abe	89 82 10 00 00
	00		 mov	 DWORD PTR _ffloor[edx+16], eax

; 2034 : 						ffloor[i].b_pos = (ffloor[i].b_pos - viewz) >> 4;

  01ac4	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01acb	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+16]
  01ad1	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  01ad7	c1 f9 04	 sar	 ecx, 4
  01ada	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  01ae1	89 8a 10 00 00
	00		 mov	 DWORD PTR _ffloor[edx+16], ecx

; 2035 : 						ffloor[i].b_step = FixedMul(-rw_scalestep, ffloor[i].b_pos);

  01ae7	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01aee	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+16]
  01af4	51		 push	 ecx
  01af5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_scalestep
  01afb	f7 da		 neg	 edx
  01afd	52		 push	 edx
  01afe	e8 00 00 00 00	 call	 _FixedMul
  01b03	83 c4 08	 add	 esp, 8
  01b06	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  01b0d	89 81 20 00 00
	00		 mov	 DWORD PTR _ffloor[ecx+32], eax

; 2036 : 						ffloor[i].b_frac = (centeryfrac >> 4) - FixedMul(ffloor[i].b_pos, rw_scale);

  01b13	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  01b19	c1 fe 04	 sar	 esi, 4
  01b1c	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  01b21	50		 push	 eax
  01b22	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  01b29	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR _ffloor[ecx+16]
  01b2f	52		 push	 edx
  01b30	e8 00 00 00 00	 call	 _FixedMul
  01b35	83 c4 08	 add	 esp, 8
  01b38	2b f0		 sub	 esi, eax
  01b3a	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01b41	89 b0 1c 00 00
	00		 mov	 DWORD PTR _ffloor[eax+28], esi

; 2037 : 						i++;

  01b47	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  01b4a	83 c0 01	 add	 eax, 1
  01b4d	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN184@R_StoreWal:

; 2038 : 					}
; 2039 : 					if (i >= MAXFFLOORS)

  01b50	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  01b54	7c 05		 jl	 SHORT $LN187@R_StoreWal

; 2040 : 						break;

  01b56	e9 23 01 00 00	 jmp	 $LN39@R_StoreWal
$LN187@R_StoreWal:

; 2041 : 					if (*rover->topheight >= backsector->floorheight &&
; 2042 : 					    *rover->topheight <= backsector->ceilingheight &&

  01b5b	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01b5e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b60	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  01b66	8b 01		 mov	 eax, DWORD PTR [ecx]
  01b68	3b 02		 cmp	 eax, DWORD PTR [edx]
  01b6a	0f 8c 09 01 00
	00		 jl	 $LN188@R_StoreWal
  01b70	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01b73	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b75	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  01b7b	8b 01		 mov	 eax, DWORD PTR [ecx]
  01b7d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01b80	0f 8f f3 00 00
	00		 jg	 $LN188@R_StoreWal
  01b86	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01b89	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b8b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewz
  01b91	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01b93	7e 0e		 jle	 SHORT $LN190@R_StoreWal
  01b95	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01b98	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01b9b	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  01ba1	74 25		 je	 SHORT $LN189@R_StoreWal
$LN190@R_StoreWal:
  01ba3	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01ba6	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ba8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewz
  01bae	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01bb0	0f 8d c3 00 00
	00		 jge	 $LN188@R_StoreWal
  01bb6	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01bb9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01bbc	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  01bc2	0f 84 b1 00 00
	00		 je	 $LN188@R_StoreWal
$LN189@R_StoreWal:

; 2043 : 					    ((viewz > *rover->topheight && !(rover->flags & FF_INVERTPLANES)) ||
; 2044 : 					     (viewz < *rover->topheight && (rover->flags & FF_BOTHPLANES))))
; 2045 : 					{
; 2046 : 						ffloor[i].mark = true;

  01bc8	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01bcf	c7 80 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _ffloor[eax+8], 1

; 2047 : 						ffloor[i].b_pos = *rover->topheight;

  01bd9	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01bdc	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bde	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  01be5	8b 01		 mov	 eax, DWORD PTR [ecx]
  01be7	89 82 10 00 00
	00		 mov	 DWORD PTR _ffloor[edx+16], eax

; 2048 : 						ffloor[i].b_pos = (ffloor[i].b_pos - viewz) >> 4;

  01bed	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01bf4	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+16]
  01bfa	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  01c00	c1 f9 04	 sar	 ecx, 4
  01c03	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  01c0a	89 8a 10 00 00
	00		 mov	 DWORD PTR _ffloor[edx+16], ecx

; 2049 : 						ffloor[i].b_step = FixedMul(-rw_scalestep, ffloor[i].b_pos);

  01c10	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01c17	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+16]
  01c1d	51		 push	 ecx
  01c1e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_scalestep
  01c24	f7 da		 neg	 edx
  01c26	52		 push	 edx
  01c27	e8 00 00 00 00	 call	 _FixedMul
  01c2c	83 c4 08	 add	 esp, 8
  01c2f	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  01c36	89 81 20 00 00
	00		 mov	 DWORD PTR _ffloor[ecx+32], eax

; 2050 : 						ffloor[i].b_frac = (centeryfrac >> 4) - FixedMul(ffloor[i].b_pos, rw_scale);

  01c3c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  01c42	c1 fe 04	 sar	 esi, 4
  01c45	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  01c4a	50		 push	 eax
  01c4b	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  01c52	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR _ffloor[ecx+16]
  01c58	52		 push	 edx
  01c59	e8 00 00 00 00	 call	 _FixedMul
  01c5e	83 c4 08	 add	 esp, 8
  01c61	2b f0		 sub	 esi, eax
  01c63	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01c6a	89 b0 1c 00 00
	00		 mov	 DWORD PTR _ffloor[eax+28], esi

; 2051 : 						i++;

  01c70	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  01c73	83 c0 01	 add	 eax, 1
  01c76	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN188@R_StoreWal:

; 2052 : 					}
; 2053 : 				}

  01c79	e9 6a fd ff ff	 jmp	 $LN38@R_StoreWal
$LN39@R_StoreWal:

; 2054 : 			}

  01c7e	e9 c5 02 00 00	 jmp	 $LN42@R_StoreWal
$LN179@R_StoreWal:

; 2055 : 			else if (frontsector && frontsector->ffloors)

  01c83	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _frontsector, 0
  01c8a	0f 84 b8 02 00
	00		 je	 $LN42@R_StoreWal
  01c90	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  01c95	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  01c9c	0f 84 a6 02 00
	00		 je	 $LN42@R_StoreWal

; 2056 : 			{
; 2057 : 				for (rover = frontsector->ffloors; rover && i < MAXFFLOORS; rover = rover->next)

  01ca2	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  01ca7	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  01cad	89 4d 9c	 mov	 DWORD PTR _rover$1[ebp], ecx
  01cb0	eb 09		 jmp	 SHORT $LN43@R_StoreWal
$LN41@R_StoreWal:
  01cb2	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01cb5	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  01cb8	89 4d 9c	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN43@R_StoreWal:
  01cbb	83 7d 9c 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  01cbf	0f 84 83 02 00
	00		 je	 $LN42@R_StoreWal
  01cc5	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  01cc9	0f 8d 79 02 00
	00		 jge	 $LN42@R_StoreWal

; 2058 : 				{
; 2059 : 					if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_RENDERPLANES))

  01ccf	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01cd2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01cd5	83 e1 01	 and	 ecx, 1
  01cd8	74 0b		 je	 SHORT $LN193@R_StoreWal
  01cda	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01cdd	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01ce0	83 e1 10	 and	 ecx, 16			; 00000010H
  01ce3	75 02		 jne	 SHORT $LN192@R_StoreWal
$LN193@R_StoreWal:

; 2060 : 						continue;

  01ce5	eb cb		 jmp	 SHORT $LN41@R_StoreWal
$LN192@R_StoreWal:

; 2061 : 					if (rover->norender == leveltime)

  01ce7	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01cea	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01ced	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _leveltime
  01cf3	75 02		 jne	 SHORT $LN194@R_StoreWal

; 2062 : 						continue;

  01cf5	eb bb		 jmp	 SHORT $LN41@R_StoreWal
$LN194@R_StoreWal:

; 2063 : 
; 2064 : 					if (*rover->bottomheight <= frontsector->ceilingheight &&
; 2065 : 					    *rover->bottomheight >= frontsector->floorheight &&

  01cf7	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01cfa	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01cfd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  01d03	8b 01		 mov	 eax, DWORD PTR [ecx]
  01d05	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01d08	0f 8f 0c 01 00
	00		 jg	 $LN195@R_StoreWal
  01d0e	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01d11	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01d14	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  01d1a	8b 01		 mov	 eax, DWORD PTR [ecx]
  01d1c	3b 02		 cmp	 eax, DWORD PTR [edx]
  01d1e	0f 8c f6 00 00
	00		 jl	 $LN195@R_StoreWal
  01d24	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01d27	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01d2a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewz
  01d30	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01d32	7d 0e		 jge	 SHORT $LN197@R_StoreWal
  01d34	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01d37	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01d3a	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  01d40	74 26		 je	 SHORT $LN196@R_StoreWal
$LN197@R_StoreWal:
  01d42	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01d45	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01d48	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewz
  01d4e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01d50	0f 8e c4 00 00
	00		 jle	 $LN195@R_StoreWal
  01d56	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01d59	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01d5c	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  01d62	0f 84 b2 00 00
	00		 je	 $LN195@R_StoreWal
$LN196@R_StoreWal:

; 2066 : 					    ((viewz < *rover->bottomheight && !(rover->flags & FF_INVERTPLANES)) ||
; 2067 : 					     (viewz > *rover->bottomheight && (rover->flags & FF_BOTHPLANES))))
; 2068 : 					{
; 2069 : 						ffloor[i].mark = true;

  01d68	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01d6f	c7 80 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _ffloor[eax+8], 1

; 2070 : 						ffloor[i].b_pos = *rover->bottomheight;

  01d79	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01d7c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01d7f	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  01d86	8b 01		 mov	 eax, DWORD PTR [ecx]
  01d88	89 82 10 00 00
	00		 mov	 DWORD PTR _ffloor[edx+16], eax

; 2071 : 						ffloor[i].b_pos = (ffloor[i].b_pos - viewz) >> 4;

  01d8e	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01d95	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+16]
  01d9b	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  01da1	c1 f9 04	 sar	 ecx, 4
  01da4	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  01dab	89 8a 10 00 00
	00		 mov	 DWORD PTR _ffloor[edx+16], ecx

; 2072 : 						ffloor[i].b_step = FixedMul(-rw_scalestep, ffloor[i].b_pos);

  01db1	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01db8	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+16]
  01dbe	51		 push	 ecx
  01dbf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_scalestep
  01dc5	f7 da		 neg	 edx
  01dc7	52		 push	 edx
  01dc8	e8 00 00 00 00	 call	 _FixedMul
  01dcd	83 c4 08	 add	 esp, 8
  01dd0	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  01dd7	89 81 20 00 00
	00		 mov	 DWORD PTR _ffloor[ecx+32], eax

; 2073 : 						ffloor[i].b_frac = (centeryfrac >> 4) - FixedMul(ffloor[i].b_pos, rw_scale);

  01ddd	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  01de3	c1 fe 04	 sar	 esi, 4
  01de6	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  01deb	50		 push	 eax
  01dec	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  01df3	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR _ffloor[ecx+16]
  01df9	52		 push	 edx
  01dfa	e8 00 00 00 00	 call	 _FixedMul
  01dff	83 c4 08	 add	 esp, 8
  01e02	2b f0		 sub	 esi, eax
  01e04	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01e0b	89 b0 1c 00 00
	00		 mov	 DWORD PTR _ffloor[eax+28], esi

; 2074 : 						i++;

  01e11	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  01e14	83 c0 01	 add	 eax, 1
  01e17	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN195@R_StoreWal:

; 2075 : 					}
; 2076 : 					if (i >= MAXFFLOORS)

  01e1a	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  01e1e	7c 05		 jl	 SHORT $LN198@R_StoreWal

; 2077 : 						break;

  01e20	e9 23 01 00 00	 jmp	 $LN42@R_StoreWal
$LN198@R_StoreWal:

; 2078 : 					if (*rover->topheight >= frontsector->floorheight &&
; 2079 : 					    *rover->topheight <= frontsector->ceilingheight &&

  01e25	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01e28	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e2a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  01e30	8b 01		 mov	 eax, DWORD PTR [ecx]
  01e32	3b 02		 cmp	 eax, DWORD PTR [edx]
  01e34	0f 8c 09 01 00
	00		 jl	 $LN199@R_StoreWal
  01e3a	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01e3d	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e3f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  01e45	8b 01		 mov	 eax, DWORD PTR [ecx]
  01e47	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01e4a	0f 8f f3 00 00
	00		 jg	 $LN199@R_StoreWal
  01e50	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01e53	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e55	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewz
  01e5b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01e5d	7e 0e		 jle	 SHORT $LN201@R_StoreWal
  01e5f	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01e62	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01e65	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  01e6b	74 25		 je	 SHORT $LN200@R_StoreWal
$LN201@R_StoreWal:
  01e6d	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01e70	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e72	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewz
  01e78	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01e7a	0f 8d c3 00 00
	00		 jge	 $LN199@R_StoreWal
  01e80	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01e83	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01e86	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  01e8c	0f 84 b1 00 00
	00		 je	 $LN199@R_StoreWal
$LN200@R_StoreWal:

; 2080 : 					    ((viewz > *rover->topheight && !(rover->flags & FF_INVERTPLANES)) ||
; 2081 : 					     (viewz < *rover->topheight && (rover->flags & FF_BOTHPLANES))))
; 2082 : 					{
; 2083 : 						ffloor[i].mark = true;

  01e92	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01e99	c7 80 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _ffloor[eax+8], 1

; 2084 : 						ffloor[i].b_pos = *rover->topheight;

  01ea3	8b 45 9c	 mov	 eax, DWORD PTR _rover$1[ebp]
  01ea6	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ea8	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  01eaf	8b 01		 mov	 eax, DWORD PTR [ecx]
  01eb1	89 82 10 00 00
	00		 mov	 DWORD PTR _ffloor[edx+16], eax

; 2085 : 						ffloor[i].b_pos = (ffloor[i].b_pos - viewz) >> 4;

  01eb7	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01ebe	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+16]
  01ec4	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  01eca	c1 f9 04	 sar	 ecx, 4
  01ecd	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  01ed4	89 8a 10 00 00
	00		 mov	 DWORD PTR _ffloor[edx+16], ecx

; 2086 : 						ffloor[i].b_step = FixedMul(-rw_scalestep, ffloor[i].b_pos);

  01eda	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01ee1	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _ffloor[eax+16]
  01ee7	51		 push	 ecx
  01ee8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_scalestep
  01eee	f7 da		 neg	 edx
  01ef0	52		 push	 edx
  01ef1	e8 00 00 00 00	 call	 _FixedMul
  01ef6	83 c4 08	 add	 esp, 8
  01ef9	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  01f00	89 81 20 00 00
	00		 mov	 DWORD PTR _ffloor[ecx+32], eax

; 2087 : 						ffloor[i].b_frac = (centeryfrac >> 4) - FixedMul(ffloor[i].b_pos, rw_scale);

  01f06	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _centeryfrac
  01f0c	c1 fe 04	 sar	 esi, 4
  01f0f	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_scale
  01f14	50		 push	 eax
  01f15	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  01f1c	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR _ffloor[ecx+16]
  01f22	52		 push	 edx
  01f23	e8 00 00 00 00	 call	 _FixedMul
  01f28	83 c4 08	 add	 esp, 8
  01f2b	2b f0		 sub	 esi, eax
  01f2d	69 45 e4 28 1e
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 7720
  01f34	89 b0 1c 00 00
	00		 mov	 DWORD PTR _ffloor[eax+28], esi

; 2088 : 						i++;

  01f3a	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  01f3d	83 c0 01	 add	 eax, 1
  01f40	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN199@R_StoreWal:

; 2089 : 					}
; 2090 : 				}

  01f43	e9 6a fd ff ff	 jmp	 $LN41@R_StoreWal
$LN42@R_StoreWal:

; 2091 : 			}
; 2092 : #ifdef POLYOBJECTS_PLANES
; 2093 : 			if (curline->polyseg && frontsector && (curline->polyseg->flags & POF_RENDERPLANES))
; 2094 : 			{
; 2095 : 				if (i < MAXFFLOORS && backsector->floorheight <= frontsector->ceilingheight &&
; 2096 : 					backsector->floorheight >= frontsector->floorheight &&
; 2097 : 					(viewz < backsector->floorheight))
; 2098 : 				{
; 2099 : 					ffloor[i].mark = true;
; 2100 : 
; 2101 : 					if (ffloor[i].plane->minx > ds_p->x1)
; 2102 : 						ffloor[i].plane->minx = ds_p->x1;
; 2103 : 
; 2104 : 					if (ffloor[i].plane->maxx < ds_p->x2)
; 2105 : 						ffloor[i].plane->maxx = ds_p->x2;
; 2106 : 
; 2107 : 					ffloor[i].b_pos = backsector->floorheight;
; 2108 : 					ffloor[i].b_pos = (ffloor[i].b_pos - viewz) >> 4;
; 2109 : 					ffloor[i].b_step = FixedMul(-rw_scalestep, ffloor[i].b_pos);
; 2110 : 					ffloor[i].b_frac = (centeryfrac >> 4) - FixedMul(ffloor[i].b_pos, rw_scale);
; 2111 : 					i++;
; 2112 : 				}
; 2113 : 				if (i < MAXFFLOORS && backsector->ceilingheight >= frontsector->floorheight &&
; 2114 : 					backsector->ceilingheight <= frontsector->ceilingheight &&
; 2115 : 					(viewz > backsector->ceilingheight))
; 2116 : 				{
; 2117 : 					ffloor[i].mark = true;
; 2118 : 
; 2119 : 					if (ffloor[i].plane->minx > ds_p->x1)
; 2120 : 						ffloor[i].plane->minx = ds_p->x1;
; 2121 : 
; 2122 : 					if (ffloor[i].plane->maxx < ds_p->x2)
; 2123 : 						ffloor[i].plane->maxx = ds_p->x2;
; 2124 : 
; 2125 : 					ffloor[i].b_pos = backsector->ceilingheight;
; 2126 : 					ffloor[i].b_pos = (ffloor[i].b_pos - viewz) >> 4;
; 2127 : 					ffloor[i].b_step = FixedMul(-rw_scalestep, ffloor[i].b_pos);
; 2128 : 					ffloor[i].b_frac = (centeryfrac >> 4) - FixedMul(ffloor[i].b_pos, rw_scale);
; 2129 : 					i++;
; 2130 : 				}
; 2131 : 			}
; 2132 : #endif
; 2133 : 		}
; 2134 : 	}
; 2135 : 
; 2136 : 	// get a new or use the same visplane
; 2137 : 	if (markceiling)

  01f48	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _markceiling, 0
  01f4f	74 39		 je	 SHORT $LN204@R_StoreWal

; 2138 : 	{
; 2139 : 		if (ceilingplane) //SoM: 3/29/2000: Check for null ceiling planes

  01f51	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ceilingplane, 0
  01f58	74 26		 je	 SHORT $LN203@R_StoreWal

; 2140 : 			ceilingplane = R_CheckPlane (ceilingplane, rw_x, rw_stopx-1);

  01f5a	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  01f5f	83 e8 01	 sub	 eax, 1
  01f62	50		 push	 eax
  01f63	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  01f69	51		 push	 ecx
  01f6a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ceilingplane
  01f70	52		 push	 edx
  01f71	e8 00 00 00 00	 call	 _R_CheckPlane
  01f76	83 c4 0c	 add	 esp, 12			; 0000000cH
  01f79	a3 00 00 00 00	 mov	 DWORD PTR _ceilingplane, eax
  01f7e	eb 0a		 jmp	 SHORT $LN204@R_StoreWal
$LN203@R_StoreWal:

; 2141 : 		else
; 2142 : 			markceiling = 0;

  01f80	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _markceiling, 0
$LN204@R_StoreWal:

; 2143 : 	}
; 2144 : 
; 2145 : 	// get a new or use the same visplane
; 2146 : 	if (markfloor)

  01f8a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _markfloor, 0
  01f91	74 39		 je	 SHORT $LN207@R_StoreWal

; 2147 : 	{
; 2148 : 		if (floorplane) //SoM: 3/29/2000: Check for null planes

  01f93	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _floorplane, 0
  01f9a	74 26		 je	 SHORT $LN206@R_StoreWal

; 2149 : 			floorplane = R_CheckPlane (floorplane, rw_x, rw_stopx-1);

  01f9c	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  01fa1	83 e8 01	 sub	 eax, 1
  01fa4	50		 push	 eax
  01fa5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  01fab	51		 push	 ecx
  01fac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _floorplane
  01fb2	52		 push	 edx
  01fb3	e8 00 00 00 00	 call	 _R_CheckPlane
  01fb8	83 c4 0c	 add	 esp, 12			; 0000000cH
  01fbb	a3 00 00 00 00	 mov	 DWORD PTR _floorplane, eax
  01fc0	eb 0a		 jmp	 SHORT $LN207@R_StoreWal
$LN206@R_StoreWal:

; 2150 : 		else
; 2151 : 			markfloor = 0;

  01fc2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _markfloor, 0
$LN207@R_StoreWal:

; 2152 : 	}
; 2153 : 
; 2154 : 	ds_p->numffloorplanes = 0;

  01fcc	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  01fd1	c7 80 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+208], 0

; 2155 : 	if (numffloors)

  01fdb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numffloors, 0
  01fe2	0f 84 e0 00 00
	00		 je	 $LN48@R_StoreWal

; 2156 : 	{
; 2157 : 		if (!firstseg)

  01fe8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _firstseg, 0
  01fef	0f 85 8e 00 00
	00		 jne	 $LN209@R_StoreWal

; 2158 : 		{
; 2159 : 			ds_p->numffloorplanes = numffloors;

  01ff5	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  01ffa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _numffloors
  02000	89 88 d0 00 00
	00		 mov	 DWORD PTR [eax+208], ecx

; 2160 : 
; 2161 : 			for (i = 0; i < numffloors; i++)

  02006	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0200d	eb 09		 jmp	 SHORT $LN46@R_StoreWal
$LN44@R_StoreWal:
  0200f	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  02012	83 c0 01	 add	 eax, 1
  02015	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN46@R_StoreWal:
  02018	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0201b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numffloors
  02021	7d 54		 jge	 SHORT $LN45@R_StoreWal

; 2162 : 			{
; 2163 : 				ds_p->ffloorplanes[i] = ffloor[i].plane =

  02023	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  02028	83 e8 01	 sub	 eax, 1
  0202b	50		 push	 eax
  0202c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  02032	51		 push	 ecx
  02033	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  0203a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _ffloor[edx]
  02040	50		 push	 eax
  02041	e8 00 00 00 00	 call	 _R_CheckPlane
  02046	83 c4 0c	 add	 esp, 12			; 0000000cH
  02049	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv1343[ebp], eax
  0204f	69 4d e4 28 1e
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 7720
  02056	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv1343[ebp]
  0205c	89 91 00 00 00
	00		 mov	 DWORD PTR _ffloor[ecx], edx
  02062	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  02065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  0206b	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv1343[ebp]
  02071	89 54 81 30	 mov	 DWORD PTR [ecx+eax*4+48], edx

; 2164 : 					R_CheckPlane(ffloor[i].plane, rw_x, rw_stopx - 1);
; 2165 : 			}

  02075	eb 98		 jmp	 SHORT $LN44@R_StoreWal
$LN45@R_StoreWal:

; 2166 : 
; 2167 : 			firstseg = ds_p;

  02077	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  0207c	a3 00 00 00 00	 mov	 DWORD PTR _firstseg, eax

; 2168 : 		}

  02081	eb 45		 jmp	 SHORT $LN48@R_StoreWal
$LN209@R_StoreWal:

; 2169 : 		else
; 2170 : 		{
; 2171 : 			for (i = 0; i < numffloors; i++)

  02083	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0208a	eb 09		 jmp	 SHORT $LN49@R_StoreWal
$LN47@R_StoreWal:
  0208c	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0208f	83 c0 01	 add	 eax, 1
  02092	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN49@R_StoreWal:
  02095	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  02098	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numffloors
  0209e	7d 28		 jge	 SHORT $LN48@R_StoreWal

; 2172 : 				R_ExpandPlane(ffloor[i].plane, rw_x, rw_stopx - 1);

  020a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  020a5	83 e8 01	 sub	 eax, 1
  020a8	50		 push	 eax
  020a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_x
  020af	51		 push	 ecx
  020b0	69 55 e4 28 1e
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 7720
  020b7	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _ffloor[edx]
  020bd	50		 push	 eax
  020be	e8 00 00 00 00	 call	 _R_ExpandPlane
  020c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  020c6	eb c4		 jmp	 SHORT $LN47@R_StoreWal
$LN48@R_StoreWal:

; 2173 : 		}
; 2174 : 	}
; 2175 : 
; 2176 : #ifdef WALLSPLATS
; 2177 : 	if (linedef->splats && cv_splats.value)
; 2178 : 	{
; 2179 : 		// Isn't a bit wasteful to copy the ENTIRE array for every drawseg?
; 2180 : 		M_Memcpy(last_ceilingclip + ds_p->x1, ceilingclip + ds_p->x1,
; 2181 : 			sizeof (INT16) * (ds_p->x2 - ds_p->x1 + 1));
; 2182 : 		M_Memcpy(last_floorclip + ds_p->x1, floorclip + ds_p->x1,
; 2183 : 			sizeof (INT16) * (ds_p->x2 - ds_p->x1 + 1));
; 2184 : 		R_RenderSegLoop();
; 2185 : 		R_DrawWallSplats();
; 2186 : 	}
; 2187 : 	else
; 2188 : #endif
; 2189 : 		R_RenderSegLoop();

  020c8	e8 00 00 00 00	 call	 _R_RenderSegLoop
  020cd	90		 npad	 1

; 2190 : 	colfunc = wallcolfunc;

  020ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _wallcolfunc
  020d3	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 2191 : 
; 2192 : 	// save sprite clipping info
; 2193 : 	if (((ds_p->silhouette & SIL_TOP) || maskedtexture) && !ds_p->sprtopclip)

  020d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  020dd	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  020e0	83 e1 02	 and	 ecx, 2
  020e3	75 09		 jne	 SHORT $LN212@R_StoreWal
  020e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _maskedtexture, 0
  020ec	74 5d		 je	 SHORT $LN211@R_StoreWal
$LN212@R_StoreWal:
  020ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  020f3	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  020f7	75 52		 jne	 SHORT $LN211@R_StoreWal

; 2194 : 	{
; 2195 : 		M_Memcpy(lastopening, ceilingclip+start, 2*(rw_stopx - start));

  020f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  020fe	2b 45 08	 sub	 eax, DWORD PTR _start$[ebp]
  02101	d1 e0		 shl	 eax, 1
  02103	50		 push	 eax
  02104	8b 4d 08	 mov	 ecx, DWORD PTR _start$[ebp]
  02107	8d 14 4d 00 00
	00 00		 lea	 edx, DWORD PTR _ceilingclip[ecx*2]
  0210e	52		 push	 edx
  0210f	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastopening
  02114	50		 push	 eax
  02115	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0211b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2196 : 		ds_p->sprtopclip = lastopening - start;

  0211e	8b 45 08	 mov	 eax, DWORD PTR _start$[ebp]
  02121	d1 e0		 shl	 eax, 1
  02123	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lastopening
  02129	2b c8		 sub	 ecx, eax
  0212b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  02131	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 2197 : 		lastopening += rw_stopx - start;

  02134	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  02139	2b 45 08	 sub	 eax, DWORD PTR _start$[ebp]
  0213c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lastopening
  02142	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  02145	89 15 00 00 00
	00		 mov	 DWORD PTR _lastopening, edx
$LN211@R_StoreWal:

; 2198 : 	}
; 2199 : 
; 2200 : 	if (((ds_p->silhouette & SIL_BOTTOM) || maskedtexture) && !ds_p->sprbottomclip)

  0214b	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  02150	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02153	83 e1 01	 and	 ecx, 1
  02156	75 09		 jne	 SHORT $LN214@R_StoreWal
  02158	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _maskedtexture, 0
  0215f	74 5d		 je	 SHORT $LN213@R_StoreWal
$LN214@R_StoreWal:
  02161	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  02166	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0216a	75 52		 jne	 SHORT $LN213@R_StoreWal

; 2201 : 	{
; 2202 : 		M_Memcpy(lastopening, floorclip + start, 2*(rw_stopx-start));

  0216c	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  02171	2b 45 08	 sub	 eax, DWORD PTR _start$[ebp]
  02174	d1 e0		 shl	 eax, 1
  02176	50		 push	 eax
  02177	8b 4d 08	 mov	 ecx, DWORD PTR _start$[ebp]
  0217a	8d 14 4d 00 00
	00 00		 lea	 edx, DWORD PTR _floorclip[ecx*2]
  02181	52		 push	 edx
  02182	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastopening
  02187	50		 push	 eax
  02188	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0218e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2203 : 		ds_p->sprbottomclip = lastopening - start;

  02191	8b 45 08	 mov	 eax, DWORD PTR _start$[ebp]
  02194	d1 e0		 shl	 eax, 1
  02196	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lastopening
  0219c	2b c8		 sub	 ecx, eax
  0219e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  021a4	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 2204 : 		lastopening += rw_stopx - start;

  021a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _rw_stopx
  021ac	2b 45 08	 sub	 eax, DWORD PTR _start$[ebp]
  021af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lastopening
  021b5	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  021b8	89 15 00 00 00
	00		 mov	 DWORD PTR _lastopening, edx
$LN213@R_StoreWal:

; 2205 : 	}
; 2206 : 
; 2207 : 	if (maskedtexture && !(ds_p->silhouette & SIL_TOP))

  021be	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _maskedtexture, 0
  021c5	74 51		 je	 SHORT $LN215@R_StoreWal
  021c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  021cc	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  021cf	83 e1 02	 and	 ecx, 2
  021d2	75 44		 jne	 SHORT $LN215@R_StoreWal

; 2208 : 	{
; 2209 : 		ds_p->silhouette |= SIL_TOP;

  021d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  021d9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  021dc	83 c9 02	 or	 ecx, 2
  021df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  021e5	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 2210 : 		ds_p->tsilheight = sidedef->midtexture ? INT32_MIN: INT32_MAX;

  021e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  021ed	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  021f1	74 0c		 je	 SHORT $LN230@R_StoreWal
  021f3	c7 85 58 ff ff
	ff 00 00 00 80	 mov	 DWORD PTR tv1408[ebp], -2147483648 ; 80000000H
  021fd	eb 0a		 jmp	 SHORT $LN231@R_StoreWal
$LN230@R_StoreWal:
  021ff	c7 85 58 ff ff
	ff ff ff ff 7f	 mov	 DWORD PTR tv1408[ebp], 2147483647 ; 7fffffffH
$LN231@R_StoreWal:
  02209	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  0220f	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv1408[ebp]
  02215	89 51 20	 mov	 DWORD PTR [ecx+32], edx
$LN215@R_StoreWal:

; 2211 : 	}
; 2212 : 	if (maskedtexture && !(ds_p->silhouette & SIL_BOTTOM))

  02218	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _maskedtexture, 0
  0221f	74 51		 je	 SHORT $LN216@R_StoreWal
  02221	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  02226	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02229	83 e1 01	 and	 ecx, 1
  0222c	75 44		 jne	 SHORT $LN216@R_StoreWal

; 2213 : 	{
; 2214 : 		ds_p->silhouette |= SIL_BOTTOM;

  0222e	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  02233	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02236	83 c9 01	 or	 ecx, 1
  02239	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_p
  0223f	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 2215 : 		ds_p->bsilheight = sidedef->midtexture ? INT32_MAX: INT32_MIN;

  02242	a1 00 00 00 00	 mov	 eax, DWORD PTR _sidedef
  02247	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0224b	74 0c		 je	 SHORT $LN232@R_StoreWal
  0224d	c7 85 58 ff ff
	ff ff ff ff 7f	 mov	 DWORD PTR tv1419[ebp], 2147483647 ; 7fffffffH
  02257	eb 0a		 jmp	 SHORT $LN233@R_StoreWal
$LN232@R_StoreWal:
  02259	c7 85 58 ff ff
	ff 00 00 00 80	 mov	 DWORD PTR tv1419[ebp], -2147483648 ; 80000000H
$LN233@R_StoreWal:
  02263	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_p
  02269	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv1419[ebp]
  0226f	89 51 1c	 mov	 DWORD PTR [ecx+28], edx
$LN216@R_StoreWal:

; 2216 : 	}
; 2217 : 	ds_p++;

  02272	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_p
  02277	05 7c 1f 00 00	 add	 eax, 8060		; 00001f7cH
  0227c	a3 00 00 00 00	 mov	 DWORD PTR _ds_p, eax

; 2218 : }

  02281	5f		 pop	 edi
  02282	5e		 pop	 esi
  02283	5b		 pop	 ebx
  02284	8b e5		 mov	 esp, ebp
  02286	5d		 pop	 ebp
  02287	c3		 ret	 0
_R_StoreWallRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_segs.c
;	COMDAT _R_RenderThickSideRange
_TEXT	SEGMENT
tv74 = -404						; size = 4
tv504 = -404						; size = 4
_lighteffect$1 = -336					; size = 4
_solid$2 = -332						; size = 4
_bheight$3 = -328					; size = 4
_height$4 = -324					; size = 4
_xwalllights$5 = -320					; size = 4
_fuzzy$6 = -316						; size = 4
_linenum$7 = -312					; size = 4
_colfunc_2s$ = -308					; size = 4
_newline$ = -304					; size = 4
_lheight$ = -300					; size = 4
_rlight$ = -296						; size = 4
_light$ = -292						; size = 4
_offsetvalue$ = -288					; size = 4
_topbounds$ = -284					; size = 4
_bottombounds$ = -280					; size = 4
_p$ = -276						; size = 4
_i$ = -272						; size = 4
_templight$ = -268					; size = 4
_tempsec$ = -264					; size = 248
_texnum$ = -16						; size = 4
_lightnum$ = -12					; size = 4
_col$ = -8						; size = 4
_pindex$ = -4						; size = 4
_ds$ = 8						; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
_pfloor$ = 20						; size = 4
_R_RenderThickSideRange PROC				; COMDAT

; 656  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 657  : 	size_t          pindex;
; 658  : 	column_t *      col;
; 659  : 	INT32             lightnum;
; 660  : 	INT32            texnum;
; 661  : 	sector_t        tempsec;
; 662  : 	INT32             templight;
; 663  : 	INT32             i, p;
; 664  : 	fixed_t         bottombounds = viewheight << FRACBITS;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  00011	c1 e0 10	 shl	 eax, 16			; 00000010H
  00014	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _bottombounds$[ebp], eax

; 665  : 	fixed_t         topbounds = (con_clipviewtop - 1) << FRACBITS;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR _con_clipviewtop
  0001f	83 e8 01	 sub	 eax, 1
  00022	c1 e0 10	 shl	 eax, 16			; 00000010H
  00025	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _topbounds$[ebp], eax

; 666  : 	fixed_t         offsetvalue = 0;

  0002b	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _offsetvalue$[ebp], 0

; 667  : 	lightlist_t     *light;
; 668  : 	r_lightlist_t   *rlight;
; 669  : 	fixed_t         lheight;
; 670  : 	line_t          *newline = NULL;

  00035	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _newline$[ebp], 0

; 671  : 
; 672  : 	void (*colfunc_2s) (column_t *);
; 673  : 
; 674  : 	// Calculate light table.
; 675  : 	// Use different light tables
; 676  : 	//   for horizontal / vertical / diagonal. Diagonal?
; 677  : 	// OPTIMIZE: get rid of LIGHTSEGSHIFT globally
; 678  : 
; 679  : 	curline = ds->curline;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 0d 00 00 00
	00		 mov	 DWORD PTR _curline, ecx

; 680  : 	backsector = pfloor->target;

  0004a	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0004d	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00050	89 0d 00 00 00
	00		 mov	 DWORD PTR _backsector, ecx

; 681  : 	frontsector = curline->frontsector == pfloor->target ? curline->backsector : curline->frontsector;

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0005b	8b 4d 14	 mov	 ecx, DWORD PTR _pfloor$[ebp]
  0005e	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00061	3b 51 3c	 cmp	 edx, DWORD PTR [ecx+60]
  00064	75 10		 jne	 SHORT $LN119@R_RenderTh
  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0006b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0006e	89 8d 6c fe ff
	ff		 mov	 DWORD PTR tv74[ebp], ecx
  00074	eb 0f		 jmp	 SHORT $LN120@R_RenderTh
$LN119@R_RenderTh:
  00076	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  0007c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0007f	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN120@R_RenderTh:
  00085	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR tv74[ebp]
  0008b	89 0d 00 00 00
	00		 mov	 DWORD PTR _frontsector, ecx

; 682  : 	texnum = texturetranslation[sides[pfloor->master->sidenum[0]].midtexture];

  00091	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00094	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00097	ba 02 00 00 00	 mov	 edx, 2
  0009c	6b c2 00	 imul	 eax, edx, 0
  0009f	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  000a4	6b d1 1c	 imul	 edx, ecx, 28
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _sides
  000ac	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  000b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _texturetranslation
  000b6	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000b9	89 45 f0	 mov	 DWORD PTR _texnum$[ebp], eax

; 683  : 
; 684  : 	colfunc = wallcolfunc;

  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _wallcolfunc
  000c1	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 685  : 
; 686  : 	if (pfloor->master->flags & ML_TFERLINE)

  000c6	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  000c9	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000cc	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  000d0	81 e2 00 80 00
	00		 and	 edx, 32768		; 00008000H
  000d6	0f 84 83 00 00
	00		 je	 $LN17@R_RenderTh

; 687  : 	{
; 688  : 		size_t linenum = curline->linedef-backsector->lines[0];

  000dc	b8 04 00 00 00	 mov	 eax, 4
  000e1	6b c8 00	 imul	 ecx, eax, 0
  000e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _backsector
  000ea	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  000f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  000f6	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  000f9	2b 14 08	 sub	 edx, DWORD PTR [eax+ecx]
  000fc	8b c2		 mov	 eax, edx
  000fe	99		 cdq
  000ff	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00104	f7 f9		 idiv	 ecx
  00106	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _linenum$7[ebp], eax

; 689  : 		newline = pfloor->master->frontsector->lines[0] + linenum;

  0010c	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0010f	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00112	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00115	b8 04 00 00 00	 mov	 eax, 4
  0011a	6b c8 00	 imul	 ecx, eax, 0
  0011d	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  00123	6b 85 c8 fe ff
	ff 4c		 imul	 eax, DWORD PTR _linenum$7[ebp], 76
  0012a	03 04 0a	 add	 eax, DWORD PTR [edx+ecx]
  0012d	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _newline$[ebp], eax

; 690  : 		texnum = texturetranslation[sides[newline->sidenum[0]].midtexture];

  00133	b8 02 00 00 00	 mov	 eax, 2
  00138	6b c8 00	 imul	 ecx, eax, 0
  0013b	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _newline$[ebp]
  00141	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00146	6b c8 1c	 imul	 ecx, eax, 28
  00149	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  0014f	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00153	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturetranslation
  00159	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0015c	89 55 f0	 mov	 DWORD PTR _texnum$[ebp], edx
$LN17@R_RenderTh:

; 691  : 	}
; 692  : 
; 693  : 	if (pfloor->flags & FF_TRANSLUCENT)

  0015f	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00162	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00165	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0016b	0f 84 3c 01 00
	00		 je	 $LN18@R_RenderTh

; 694  : 	{
; 695  : 		boolean fuzzy = true;

  00171	c7 85 c4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _fuzzy$6[ebp], 1

; 696  : 
; 697  : 		// Hacked up support for alpha value in software mode Tails 09-24-2002
; 698  : 		if (pfloor->alpha < 12)

  0017b	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0017e	83 78 4c 0c	 cmp	 DWORD PTR [eax+76], 12	; 0000000cH
  00182	7d 0a		 jge	 SHORT $LN20@R_RenderTh

; 699  : 			return; // Don't even draw it

  00184	e9 ea 0e 00 00	 jmp	 $LN1@R_RenderTh
  00189	e9 0a 01 00 00	 jmp	 $LN39@R_RenderTh
$LN20@R_RenderTh:

; 700  : 		else if (pfloor->alpha < 38)

  0018e	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00191	83 78 4c 26	 cmp	 DWORD PTR [eax+76], 38	; 00000026H
  00195	7d 14		 jge	 SHORT $LN22@R_RenderTh

; 701  : 			dc_transmap = ((tr_trans90)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  0019c	05 00 00 08 00	 add	 eax, 524288		; 00080000H
  001a1	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  001a6	e9 ed 00 00 00	 jmp	 $LN39@R_RenderTh
$LN22@R_RenderTh:

; 702  : 		else if (pfloor->alpha < 64)

  001ab	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  001ae	83 78 4c 40	 cmp	 DWORD PTR [eax+76], 64	; 00000040H
  001b2	7d 14		 jge	 SHORT $LN24@R_RenderTh

; 703  : 			dc_transmap = ((tr_trans80)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  001b9	05 00 00 07 00	 add	 eax, 458752		; 00070000H
  001be	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  001c3	e9 d0 00 00 00	 jmp	 $LN39@R_RenderTh
$LN24@R_RenderTh:

; 704  : 		else if (pfloor->alpha < 89)

  001c8	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  001cb	83 78 4c 59	 cmp	 DWORD PTR [eax+76], 89	; 00000059H
  001cf	7d 14		 jge	 SHORT $LN26@R_RenderTh

; 705  : 			dc_transmap = ((tr_trans70)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  001d6	05 00 00 06 00	 add	 eax, 393216		; 00060000H
  001db	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  001e0	e9 b3 00 00 00	 jmp	 $LN39@R_RenderTh
$LN26@R_RenderTh:

; 706  : 		else if (pfloor->alpha < 115)

  001e5	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  001e8	83 78 4c 73	 cmp	 DWORD PTR [eax+76], 115	; 00000073H
  001ec	7d 14		 jge	 SHORT $LN28@R_RenderTh

; 707  : 			dc_transmap = ((tr_trans60)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  001f3	05 00 00 05 00	 add	 eax, 327680		; 00050000H
  001f8	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  001fd	e9 96 00 00 00	 jmp	 $LN39@R_RenderTh
$LN28@R_RenderTh:

; 708  : 		else if (pfloor->alpha < 140)

  00202	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00205	81 78 4c 8c 00
	00 00		 cmp	 DWORD PTR [eax+76], 140	; 0000008cH
  0020c	7d 11		 jge	 SHORT $LN30@R_RenderTh

; 709  : 			dc_transmap = ((tr_trans50)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  0020e	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00213	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  00218	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  0021d	eb 79		 jmp	 SHORT $LN39@R_RenderTh
$LN30@R_RenderTh:

; 710  : 		else if (pfloor->alpha < 166)

  0021f	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00222	81 78 4c a6 00
	00 00		 cmp	 DWORD PTR [eax+76], 166	; 000000a6H
  00229	7d 11		 jge	 SHORT $LN32@R_RenderTh

; 711  : 			dc_transmap = ((tr_trans40)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  0022b	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00230	05 00 00 03 00	 add	 eax, 196608		; 00030000H
  00235	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  0023a	eb 5c		 jmp	 SHORT $LN39@R_RenderTh
$LN32@R_RenderTh:

; 712  : 		else if (pfloor->alpha < 192)

  0023c	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0023f	81 78 4c c0 00
	00 00		 cmp	 DWORD PTR [eax+76], 192	; 000000c0H
  00246	7d 11		 jge	 SHORT $LN34@R_RenderTh

; 713  : 			dc_transmap = ((tr_trans30)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  0024d	05 00 00 02 00	 add	 eax, 131072		; 00020000H
  00252	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  00257	eb 3f		 jmp	 SHORT $LN39@R_RenderTh
$LN34@R_RenderTh:

; 714  : 		else if (pfloor->alpha < 217)

  00259	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0025c	81 78 4c d9 00
	00 00		 cmp	 DWORD PTR [eax+76], 217	; 000000d9H
  00263	7d 11		 jge	 SHORT $LN36@R_RenderTh

; 715  : 			dc_transmap = ((tr_trans20)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00265	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  0026a	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  0026f	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  00274	eb 22		 jmp	 SHORT $LN39@R_RenderTh
$LN36@R_RenderTh:

; 716  : 		else if (pfloor->alpha < 243)

  00276	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00279	81 78 4c f3 00
	00 00		 cmp	 DWORD PTR [eax+76], 243	; 000000f3H
  00280	7d 0c		 jge	 SHORT $LN38@R_RenderTh

; 717  : 			dc_transmap = ((tr_trans10)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00282	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00287	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax
  0028c	eb 0a		 jmp	 SHORT $LN39@R_RenderTh
$LN38@R_RenderTh:

; 718  : 		else
; 719  : 			fuzzy = false; // Opaque

  0028e	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _fuzzy$6[ebp], 0
$LN39@R_RenderTh:

; 720  : 
; 721  : 		if (fuzzy)

  00298	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _fuzzy$6[ebp], 0
  0029f	74 0a		 je	 SHORT $LN40@R_RenderTh

; 722  : 			colfunc = fuzzcolfunc;

  002a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  002a6	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax
$LN40@R_RenderTh:

; 723  : 	}

  002ab	eb 18		 jmp	 SHORT $LN41@R_RenderTh
$LN18@R_RenderTh:

; 724  : 	else if (pfloor->flags & FF_FOG)

  002ad	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  002b0	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002b3	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  002b9	74 0a		 je	 SHORT $LN41@R_RenderTh

; 725  : 		colfunc = R_DrawFogColumn_8;

  002bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _colfunc, OFFSET _R_DrawFogColumn_8
$LN41@R_RenderTh:

; 726  : 
; 727  : 	//SoM: Moved these up here so they are available for my lightlist calculations
; 728  : 	rw_scalestep = ds->scalestep;

  002c5	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  002c8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002cb	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_scalestep, ecx

; 729  : 	spryscale = ds->scale1 + (x1 - ds->x1)*rw_scalestep;

  002d1	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  002d4	8b 4d 0c	 mov	 ecx, DWORD PTR _x1$[ebp]
  002d7	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  002da	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR _rw_scalestep
  002e1	8b 55 08	 mov	 edx, DWORD PTR _ds$[ebp]
  002e4	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  002e7	89 0d 00 00 00
	00		 mov	 DWORD PTR _spryscale, ecx

; 730  : 
; 731  : 	dc_numlights = 0;

  002ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _dc_numlights, 0

; 732  : 	if (frontsector->numlights)

  002f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  002fc	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00303	0f 84 2b 03 00
	00		 je	 $LN42@R_RenderTh

; 733  : 	{
; 734  : 		dc_numlights = frontsector->numlights;

  00309	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  0030e	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00314	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_numlights, ecx

; 735  : 		if (dc_numlights > dc_maxlights)

  0031a	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_numlights
  0031f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_maxlights
  00325	7e 2c		 jle	 SHORT $LN44@R_RenderTh

; 736  : 		{
; 737  : 			dc_maxlights = dc_numlights;

  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_numlights
  0032c	a3 00 00 00 00	 mov	 DWORD PTR _dc_maxlights, eax

; 738  : 			dc_lightlist = Z_Realloc(dc_lightlist, sizeof (*dc_lightlist) * dc_maxlights, PU_STATIC, NULL);

  00331	6a 00		 push	 0
  00333	6a 00		 push	 0
  00335	6a 01		 push	 1
  00337	6b 05 00 00 00
	00 24		 imul	 eax, DWORD PTR _dc_maxlights, 36
  0033e	50		 push	 eax
  0033f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  00345	51		 push	 ecx
  00346	e8 00 00 00 00	 call	 _Z_ReallocAlign
  0034b	83 c4 14	 add	 esp, 20			; 00000014H
  0034e	a3 00 00 00 00	 mov	 DWORD PTR _dc_lightlist, eax
$LN44@R_RenderTh:

; 739  : 		}
; 740  : 
; 741  : 		for (i = p = 0; i < dc_numlights; i++)

  00353	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _p$[ebp], 0
  0035d	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00363	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
  00369	eb 0f		 jmp	 SHORT $LN4@R_RenderTh
$LN2@R_RenderTh:
  0036b	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00371	83 c0 01	 add	 eax, 1
  00374	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_RenderTh:
  0037a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00380	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  00386	0f 8d 98 02 00
	00		 jge	 $LN3@R_RenderTh

; 742  : 		{
; 743  : 			light = &frontsector->lightlist[i];

  0038c	6b 85 f0 fe ff
	ff 14		 imul	 eax, DWORD PTR _i$[ebp], 20
  00393	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00399	03 81 a4 00 00
	00		 add	 eax, DWORD PTR [ecx+164]
  0039f	89 85 dc fe ff
	ff		 mov	 DWORD PTR _light$[ebp], eax

; 744  : 			rlight = &dc_lightlist[p];

  003a5	6b 85 ec fe ff
	ff 24		 imul	 eax, DWORD PTR _p$[ebp], 36
  003ac	03 05 00 00 00
	00		 add	 eax, DWORD PTR _dc_lightlist
  003b2	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _rlight$[ebp], eax

; 745  : 
; 746  : 			if (light->height < *pfloor->bottomheight)

  003b8	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  003bb	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003be	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _light$[ebp]
  003c4	8b 02		 mov	 eax, DWORD PTR [edx]
  003c6	3b 01		 cmp	 eax, DWORD PTR [ecx]
  003c8	7d 02		 jge	 SHORT $LN45@R_RenderTh

; 747  : 				continue;

  003ca	eb 9f		 jmp	 SHORT $LN2@R_RenderTh
$LN45@R_RenderTh:

; 748  : 
; 749  : 			if (light->height > *pfloor->topheight && i+1 < dc_numlights && frontsector->lightlist[i+1].height > *pfloor->topheight)

  003cc	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  003cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d1	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _light$[ebp]
  003d7	8b 02		 mov	 eax, DWORD PTR [edx]
  003d9	3b 01		 cmp	 eax, DWORD PTR [ecx]
  003db	7e 3a		 jle	 SHORT $LN46@R_RenderTh
  003dd	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  003e3	83 c0 01	 add	 eax, 1
  003e6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  003ec	7d 29		 jge	 SHORT $LN46@R_RenderTh
  003ee	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  003f4	83 c0 01	 add	 eax, 1
  003f7	6b c8 14	 imul	 ecx, eax, 20
  003fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _frontsector
  00400	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00406	8b 55 14	 mov	 edx, DWORD PTR _pfloor$[ebp]
  00409	8b 12		 mov	 edx, DWORD PTR [edx]
  0040b	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0040e	3b 02		 cmp	 eax, DWORD PTR [edx]
  00410	7e 05		 jle	 SHORT $LN46@R_RenderTh

; 750  : 					continue;

  00412	e9 54 ff ff ff	 jmp	 $LN2@R_RenderTh
$LN46@R_RenderTh:

; 751  : 
; 752  : 			lheight = light->height;// > *pfloor->topheight ? *pfloor->topheight + FRACUNIT : light->height;

  00417	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _light$[ebp]
  0041d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041f	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _lheight$[ebp], ecx

; 753  : 			rlight->heightstep = -FixedMul (rw_scalestep, (lheight - viewz));

  00425	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _lheight$[ebp]
  0042b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewz
  00431	50		 push	 eax
  00432	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_scalestep
  00438	51		 push	 ecx
  00439	e8 00 00 00 00	 call	 _FixedMul
  0043e	83 c4 08	 add	 esp, 8
  00441	f7 d8		 neg	 eax
  00443	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00449	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 754  : 			rlight->height = (centeryfrac) - FixedMul((lheight - viewz), spryscale) - rlight->heightstep;

  0044c	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00451	50		 push	 eax
  00452	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _lheight$[ebp]
  00458	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  0045e	51		 push	 ecx
  0045f	e8 00 00 00 00	 call	 _FixedMul
  00464	83 c4 08	 add	 esp, 8
  00467	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _centeryfrac
  0046d	2b d0		 sub	 edx, eax
  0046f	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00475	2b 50 04	 sub	 edx, DWORD PTR [eax+4]
  00478	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rlight$[ebp]
  0047e	89 11		 mov	 DWORD PTR [ecx], edx

; 755  : 			rlight->flags = light->flags;

  00480	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00486	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _light$[ebp]
  0048c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0048f	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 756  : 
; 757  : 			if (light->flags & FF_CUTLEVEL)

  00492	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _light$[ebp]
  00498	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0049b	81 e1 80 01 00
	00		 and	 ecx, 384		; 00000180H
  004a1	74 70		 je	 SHORT $LN47@R_RenderTh

; 758  : 			{
; 759  : 				lheight = *light->caster->bottomheight;// > *pfloor->topheight ? *pfloor->topheight + FRACUNIT : *light->caster->bottomheight;

  004a3	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _light$[ebp]
  004a9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  004ac	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004af	8b 02		 mov	 eax, DWORD PTR [edx]
  004b1	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _lheight$[ebp], eax

; 760  : 				rlight->botheightstep = -FixedMul (rw_scalestep, (lheight - viewz));

  004b7	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _lheight$[ebp]
  004bd	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewz
  004c3	50		 push	 eax
  004c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rw_scalestep
  004ca	51		 push	 ecx
  004cb	e8 00 00 00 00	 call	 _FixedMul
  004d0	83 c4 08	 add	 esp, 8
  004d3	f7 d8		 neg	 eax
  004d5	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  004db	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 761  : 				rlight->botheight = (centeryfrac) - FixedMul((lheight - viewz), spryscale) - rlight->botheightstep;

  004de	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  004e3	50		 push	 eax
  004e4	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _lheight$[ebp]
  004ea	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  004f0	51		 push	 ecx
  004f1	e8 00 00 00 00	 call	 _FixedMul
  004f6	83 c4 08	 add	 esp, 8
  004f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _centeryfrac
  004ff	2b d0		 sub	 edx, eax
  00501	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00507	2b 50 0c	 sub	 edx, DWORD PTR [eax+12]
  0050a	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rlight$[ebp]
  00510	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN47@R_RenderTh:

; 762  : 			}
; 763  : 
; 764  : 			rlight->lightlevel = *light->lightlevel;

  00513	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _light$[ebp]
  00519	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0051c	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00522	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00525	66 89 42 10	 mov	 WORD PTR [edx+16], ax

; 765  : 			rlight->extra_colormap = light->extra_colormap;

  00529	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  0052f	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _light$[ebp]
  00535	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00538	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 766  : 
; 767  : 			// Check if the current light effects the colormap/lightlevel
; 768  : 			if (pfloor->flags & FF_FOG)

  0053b	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0053e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00541	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00547	74 1b		 je	 SHORT $LN48@R_RenderTh

; 769  : 				rlight->lightnum = (pfloor->master->frontsector->lightlevel >> LIGHTSEGSHIFT);

  00549	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0054c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0054f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00552	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  00556	c1 f8 03	 sar	 eax, 3
  00559	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rlight$[ebp]
  0055f	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00562	eb 16		 jmp	 SHORT $LN49@R_RenderTh
$LN48@R_RenderTh:

; 770  : 			else
; 771  : 				rlight->lightnum = (rlight->lightlevel >> LIGHTSEGSHIFT);

  00564	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  0056a	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0056e	c1 f9 03	 sar	 ecx, 3
  00571	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00577	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$LN49@R_RenderTh:

; 772  : 
; 773  : 			if (pfloor->flags & FF_FOG || rlight->flags & FF_FOG || (rlight->extra_colormap && rlight->extra_colormap->fog))

  0057a	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0057d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00580	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00586	75 2c		 jne	 SHORT $LN52@R_RenderTh
  00588	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  0058e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00591	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00597	75 1b		 jne	 SHORT $LN52@R_RenderTh
  00599	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  0059f	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  005a3	74 11		 je	 SHORT $LN50@R_RenderTh
  005a5	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  005ab	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005ae	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  005b2	74 02		 je	 SHORT $LN50@R_RenderTh
$LN52@R_RenderTh:

; 774  : 				;

  005b4	eb 5a		 jmp	 SHORT $LN55@R_RenderTh
$LN50@R_RenderTh:

; 775  : 			else if (curline->v1->y == curline->v2->y)

  005b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  005bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  005bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  005c3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  005c6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  005c9	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  005cc	75 17		 jne	 SHORT $LN53@R_RenderTh

; 776  : 				rlight->lightnum--;

  005ce	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  005d4	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  005d7	83 e9 01	 sub	 ecx, 1
  005da	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  005e0	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
  005e3	eb 2b		 jmp	 SHORT $LN55@R_RenderTh
$LN53@R_RenderTh:

; 777  : 			else if (curline->v1->x == curline->v2->x)

  005e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  005ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  005ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  005f2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  005f5	8b 09		 mov	 ecx, DWORD PTR [ecx]
  005f7	3b 08		 cmp	 ecx, DWORD PTR [eax]
  005f9	75 15		 jne	 SHORT $LN55@R_RenderTh

; 778  : 				rlight->lightnum++;

  005fb	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00601	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00604	83 c1 01	 add	 ecx, 1
  00607	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  0060d	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$LN55@R_RenderTh:

; 779  : 
; 780  : 			p++;

  00610	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00616	83 c0 01	 add	 eax, 1
  00619	89 85 ec fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 781  : 		}

  0061f	e9 47 fd ff ff	 jmp	 $LN2@R_RenderTh
$LN3@R_RenderTh:

; 782  : 
; 783  : 		dc_numlights = p;

  00624	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  0062a	a3 00 00 00 00	 mov	 DWORD PTR _dc_numlights, eax

; 784  : 	}

  0062f	e9 52 01 00 00	 jmp	 $LN71@R_RenderTh
$LN42@R_RenderTh:

; 785  : 	else
; 786  : 	{
; 787  : 		// Get correct light level!
; 788  : 		if ((frontsector->extra_colormap && frontsector->extra_colormap->fog))

  00634	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00639	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00640	74 22		 je	 SHORT $LN56@R_RenderTh
  00642	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00647	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0064d	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00651	74 11		 je	 SHORT $LN56@R_RenderTh

; 789  : 			lightnum = (frontsector->lightlevel >> LIGHTSEGSHIFT);

  00653	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00658	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0065c	c1 f9 03	 sar	 ecx, 3
  0065f	89 4d f4	 mov	 DWORD PTR _lightnum$[ebp], ecx
  00662	eb 68		 jmp	 SHORT $LN61@R_RenderTh
$LN56@R_RenderTh:

; 790  : 		else if (pfloor->flags & FF_FOG)

  00664	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00667	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0066a	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00670	74 15		 je	 SHORT $LN58@R_RenderTh

; 791  : 			lightnum = (pfloor->master->frontsector->lightlevel >> LIGHTSEGSHIFT);

  00672	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00675	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00678	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0067b	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  0067f	c1 f8 03	 sar	 eax, 3
  00682	89 45 f4	 mov	 DWORD PTR _lightnum$[ebp], eax
  00685	eb 45		 jmp	 SHORT $LN61@R_RenderTh
$LN58@R_RenderTh:

; 792  : 		else if (colfunc == fuzzcolfunc)

  00687	a1 00 00 00 00	 mov	 eax, DWORD PTR _colfunc
  0068c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _fuzzcolfunc
  00692	75 09		 jne	 SHORT $LN60@R_RenderTh

; 793  : 			lightnum = LIGHTLEVELS-1;

  00694	c7 45 f4 1f 00
	00 00		 mov	 DWORD PTR _lightnum$[ebp], 31 ; 0000001fH
  0069b	eb 2f		 jmp	 SHORT $LN61@R_RenderTh
$LN60@R_RenderTh:

; 794  : 		else
; 795  : 			lightnum = R_FakeFlat(frontsector, &tempsec, &templight, &templight, false)

  0069d	6a 00		 push	 0
  0069f	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _templight$[ebp]
  006a5	50		 push	 eax
  006a6	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _templight$[ebp]
  006ac	51		 push	 ecx
  006ad	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _tempsec$[ebp]
  006b3	52		 push	 edx
  006b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  006b9	50		 push	 eax
  006ba	e8 00 00 00 00	 call	 _R_FakeFlat
  006bf	83 c4 14	 add	 esp, 20			; 00000014H
  006c2	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  006c6	c1 f9 03	 sar	 ecx, 3
  006c9	89 4d f4	 mov	 DWORD PTR _lightnum$[ebp], ecx
$LN61@R_RenderTh:

; 796  : 				->lightlevel >> LIGHTSEGSHIFT;
; 797  : 
; 798  : 		if (pfloor->flags & FF_FOG || (frontsector->extra_colormap && frontsector->extra_colormap->fog));

  006cc	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  006cf	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  006d2	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  006d8	75 1f		 jne	 SHORT $LN64@R_RenderTh
  006da	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  006df	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  006e6	74 13		 je	 SHORT $LN62@R_RenderTh
  006e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  006ed	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  006f3	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  006f7	74 02		 je	 SHORT $LN62@R_RenderTh
$LN64@R_RenderTh:
  006f9	eb 42		 jmp	 SHORT $LN67@R_RenderTh
$LN62@R_RenderTh:

; 799  : 			else if (curline->v1->y == curline->v2->y)

  006fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00700	8b 08		 mov	 ecx, DWORD PTR [eax]
  00702	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  00708	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0070b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0070e	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00711	75 0b		 jne	 SHORT $LN65@R_RenderTh

; 800  : 		lightnum--;

  00713	8b 45 f4	 mov	 eax, DWORD PTR _lightnum$[ebp]
  00716	83 e8 01	 sub	 eax, 1
  00719	89 45 f4	 mov	 DWORD PTR _lightnum$[ebp], eax
  0071c	eb 1f		 jmp	 SHORT $LN67@R_RenderTh
$LN65@R_RenderTh:

; 801  : 		else if (curline->v1->x == curline->v2->x)

  0071e	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00723	8b 08		 mov	 ecx, DWORD PTR [eax]
  00725	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  0072b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0072e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00730	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00732	75 09		 jne	 SHORT $LN67@R_RenderTh

; 802  : 			lightnum++;

  00734	8b 45 f4	 mov	 eax, DWORD PTR _lightnum$[ebp]
  00737	83 c0 01	 add	 eax, 1
  0073a	89 45 f4	 mov	 DWORD PTR _lightnum$[ebp], eax
$LN67@R_RenderTh:

; 803  : 
; 804  : 		if (lightnum < 0)

  0073d	83 7d f4 00	 cmp	 DWORD PTR _lightnum$[ebp], 0
  00741	7d 16		 jge	 SHORT $LN68@R_RenderTh

; 805  : 			walllights = scalelight[0];

  00743	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00748	6b c8 00	 imul	 ecx, eax, 0
  0074b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  00751	89 0d 00 00 00
	00		 mov	 DWORD PTR _walllights, ecx
  00757	eb 2d		 jmp	 SHORT $LN71@R_RenderTh
$LN68@R_RenderTh:

; 806  : 		else if (lightnum >= LIGHTLEVELS)

  00759	83 7d f4 20	 cmp	 DWORD PTR _lightnum$[ebp], 32 ; 00000020H
  0075d	7c 16		 jl	 SHORT $LN70@R_RenderTh

; 807  : 			walllights = scalelight[LIGHTLEVELS-1];

  0075f	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00764	6b c8 1f	 imul	 ecx, eax, 31
  00767	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  0076d	89 0d 00 00 00
	00		 mov	 DWORD PTR _walllights, ecx
  00773	eb 11		 jmp	 SHORT $LN71@R_RenderTh
$LN70@R_RenderTh:

; 808  : 		else
; 809  : 			walllights = scalelight[lightnum];

  00775	69 45 f4 c0 00
	00 00		 imul	 eax, DWORD PTR _lightnum$[ebp], 192
  0077c	05 00 00 00 00	 add	 eax, OFFSET _scalelight
  00781	a3 00 00 00 00	 mov	 DWORD PTR _walllights, eax
$LN71@R_RenderTh:

; 810  : 	}
; 811  : 
; 812  : 	maskedtexturecol = ds->thicksidecol;

  00786	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  00789	8b 88 74 01 00
	00		 mov	 ecx, DWORD PTR [eax+372]
  0078f	89 0d 00 00 00
	00		 mov	 DWORD PTR _maskedtexturecol, ecx

; 813  : 
; 814  : 	mfloorclip = ds->sprbottomclip;

  00795	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  00798	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0079b	89 0d 00 00 00
	00		 mov	 DWORD PTR _mfloorclip, ecx

; 815  : 	mceilingclip = ds->sprtopclip;

  007a1	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  007a4	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  007a7	89 0d 00 00 00
	00		 mov	 DWORD PTR _mceilingclip, ecx

; 816  : 	dc_texheight = textureheight[texnum]>>FRACBITS;

  007ad	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  007b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  007b6	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  007b9	c1 fa 10	 sar	 edx, 16			; 00000010H
  007bc	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texheight, edx

; 817  : 
; 818  : 	dc_texturemid = *pfloor->topheight - viewz;

  007c2	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  007c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  007c7	8b 11		 mov	 edx, DWORD PTR [ecx]
  007c9	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _viewz
  007cf	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texturemid, edx

; 819  : 
; 820  : 	if (newline)

  007d5	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _newline$[ebp], 0
  007dc	74 54		 je	 SHORT $LN72@R_RenderTh

; 821  : 	{
; 822  : 		offsetvalue = sides[newline->sidenum[0]].rowoffset;

  007de	b8 02 00 00 00	 mov	 eax, 2
  007e3	6b c8 00	 imul	 ecx, eax, 0
  007e6	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _newline$[ebp]
  007ec	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  007f1	6b c8 1c	 imul	 ecx, eax, 28
  007f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  007fa	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  007fe	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _offsetvalue$[ebp], eax

; 823  : 		if (newline->flags & ML_DONTPEGBOTTOM)

  00804	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _newline$[ebp]
  0080a	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0080e	83 e1 10	 and	 ecx, 16			; 00000010H
  00811	74 1d		 je	 SHORT $LN74@R_RenderTh

; 824  : 			offsetvalue -= *pfloor->topheight - *pfloor->bottomheight;

  00813	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00816	8b 08		 mov	 ecx, DWORD PTR [eax]
  00818	8b 55 14	 mov	 edx, DWORD PTR _pfloor$[ebp]
  0081b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0081e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00820	2b 08		 sub	 ecx, DWORD PTR [eax]
  00822	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _offsetvalue$[ebp]
  00828	2b d1		 sub	 edx, ecx
  0082a	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _offsetvalue$[ebp], edx
$LN74@R_RenderTh:

; 825  : 	}

  00830	eb 53		 jmp	 SHORT $LN75@R_RenderTh
$LN72@R_RenderTh:

; 826  : 	else
; 827  : 	{
; 828  : 		offsetvalue = sides[pfloor->master->sidenum[0]].rowoffset;

  00832	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00835	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00838	ba 02 00 00 00	 mov	 edx, 2
  0083d	6b c2 00	 imul	 eax, edx, 0
  00840	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  00845	6b d1 1c	 imul	 edx, ecx, 28
  00848	a1 00 00 00 00	 mov	 eax, DWORD PTR _sides
  0084d	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00851	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _offsetvalue$[ebp], ecx

; 829  : 		if (curline->linedef->flags & ML_DONTPEGBOTTOM)

  00857	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0085c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0085f	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00863	83 e2 10	 and	 edx, 16			; 00000010H
  00866	74 1d		 je	 SHORT $LN75@R_RenderTh

; 830  : 			offsetvalue -= *pfloor->topheight - *pfloor->bottomheight;

  00868	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  0086b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0086d	8b 55 14	 mov	 edx, DWORD PTR _pfloor$[ebp]
  00870	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00873	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00875	2b 08		 sub	 ecx, DWORD PTR [eax]
  00877	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _offsetvalue$[ebp]
  0087d	2b d1		 sub	 edx, ecx
  0087f	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _offsetvalue$[ebp], edx
$LN75@R_RenderTh:

; 831  : 	}
; 832  : 
; 833  : 	dc_texturemid += offsetvalue;

  00885	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_texturemid
  0088a	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR _offsetvalue$[ebp]
  00890	a3 00 00 00 00	 mov	 DWORD PTR _dc_texturemid, eax

; 834  : 
; 835  : 	//faB: handle case where multipatch texture is drawn on a 2sided wall, multi-patch textures
; 836  : 	//     are not stored per-column with post info anymore in Doom Legacy
; 837  : 	if (textures[texnum]->patchcount == 1)

  00895	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  00898	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  0089e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  008a1	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  008a5	83 f8 01	 cmp	 eax, 1
  008a8	75 0c		 jne	 SHORT $LN76@R_RenderTh

; 838  : 		colfunc_2s = R_DrawMaskedColumn;                    //render the usual 2sided single-patch packed texture

  008aa	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _colfunc_2s$[ebp], OFFSET _R_DrawMaskedColumn
  008b4	eb 1f		 jmp	 SHORT $LN77@R_RenderTh
$LN76@R_RenderTh:

; 839  : 	else
; 840  : 	{
; 841  : 		colfunc_2s = R_Render2sidedMultiPatchColumn;        //render multipatch with no holes (no post_t info)

  008b6	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _colfunc_2s$[ebp], OFFSET _R_Render2sidedMultiPatchColumn

; 842  : 		column2s_length = textures[texnum]->height;

  008c0	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  008c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  008c9	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  008cc	0f bf 42 0a	 movsx	 eax, WORD PTR [edx+10]
  008d0	a3 00 00 00 00	 mov	 DWORD PTR _column2s_length, eax
$LN77@R_RenderTh:

; 843  : 	}
; 844  : 
; 845  : 	// draw the columns
; 846  : 	for (dc_x = x1; dc_x <= x2; dc_x++)

  008d5	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  008d8	a3 00 00 00 00	 mov	 DWORD PTR _dc_x, eax
  008dd	eb 0d		 jmp	 SHORT $LN7@R_RenderTh
$LN5@R_RenderTh:
  008df	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  008e4	83 c0 01	 add	 eax, 1
  008e7	a3 00 00 00 00	 mov	 DWORD PTR _dc_x, eax
$LN7@R_RenderTh:
  008ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  008f1	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  008f4	0f 8f 6f 07 00
	00		 jg	 $LN6@R_RenderTh

; 847  : 	{
; 848  : 		if (maskedtexturecol[dc_x] != INT16_MAX)

  008fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  008ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maskedtexturecol
  00905	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  00909	81 fa ff 7f 00
	00		 cmp	 edx, 32767		; 00007fffH
  0090f	0f 84 4f 07 00
	00		 je	 $LN78@R_RenderTh

; 849  : 		{
; 850  : 			// SoM: New code does not rely on R_DrawColumnShadowed_8 which
; 851  : 			// will (hopefully) put less strain on the stack.
; 852  : 			if (dc_numlights)

  00915	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dc_numlights, 0
  0091c	0f 84 8f 05 00
	00		 je	 $LN79@R_RenderTh

; 853  : 			{
; 854  : 				lighttable_t **xwalllights;
; 855  : 				fixed_t height;
; 856  : 				fixed_t bheight = 0;

  00922	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _bheight$3[ebp], 0

; 857  : 				INT32 solid = 0;

  0092c	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _solid$2[ebp], 0

; 858  : 				INT32 lighteffect = 0;

  00936	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _lighteffect$1[ebp], 0

; 859  : 
; 860  : 				sprtopscreen = windowtop = (centeryfrac - FixedMul((dc_texturemid - offsetvalue), spryscale));

  00940	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00945	50		 push	 eax
  00946	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_texturemid
  0094c	2b 8d e0 fe ff
	ff		 sub	 ecx, DWORD PTR _offsetvalue$[ebp]
  00952	51		 push	 ecx
  00953	e8 00 00 00 00	 call	 _FixedMul
  00958	83 c4 08	 add	 esp, 8
  0095b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _centeryfrac
  00961	2b d0		 sub	 edx, eax
  00963	89 15 00 00 00
	00		 mov	 DWORD PTR _windowtop, edx
  00969	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowtop
  0096e	a3 00 00 00 00	 mov	 DWORD PTR _sprtopscreen, eax

; 861  : 				sprbotscreen = windowbottom = FixedMul(*pfloor->topheight - *pfloor->bottomheight, spryscale) + sprtopscreen;

  00973	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00978	50		 push	 eax
  00979	8b 4d 14	 mov	 ecx, DWORD PTR _pfloor$[ebp]
  0097c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0097e	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00981	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00984	8b 12		 mov	 edx, DWORD PTR [edx]
  00986	2b 11		 sub	 edx, DWORD PTR [ecx]
  00988	52		 push	 edx
  00989	e8 00 00 00 00	 call	 _FixedMul
  0098e	83 c4 08	 add	 esp, 8
  00991	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sprtopscreen
  00997	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax
  0099c	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowbottom
  009a1	a3 00 00 00 00	 mov	 DWORD PTR _sprbotscreen, eax

; 862  : 
; 863  : 				// SoM: If column is out of range, why bother with it??
; 864  : 				if (windowbottom < topbounds || windowtop > bottombounds)

  009a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowbottom
  009ab	3b 85 e4 fe ff
	ff		 cmp	 eax, DWORD PTR _topbounds$[ebp]
  009b1	7c 11		 jl	 SHORT $LN81@R_RenderTh
  009b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowtop
  009b8	3b 85 e8 fe ff
	ff		 cmp	 eax, DWORD PTR _bottombounds$[ebp]
  009be	0f 8e 98 00 00
	00		 jle	 $LN80@R_RenderTh
$LN81@R_RenderTh:

; 865  : 				{
; 866  : 					for (i = 0; i < dc_numlights; i++)

  009c4	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  009ce	eb 0f		 jmp	 SHORT $LN10@R_RenderTh
$LN8@R_RenderTh:
  009d0	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  009d6	83 c0 01	 add	 eax, 1
  009d9	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN10@R_RenderTh:
  009df	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  009e5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  009eb	7d 5a		 jge	 SHORT $LN9@R_RenderTh

; 867  : 					{
; 868  : 						rlight = &dc_lightlist[i];

  009ed	6b 85 f0 fe ff
	ff 24		 imul	 eax, DWORD PTR _i$[ebp], 36
  009f4	03 05 00 00 00
	00		 add	 eax, DWORD PTR _dc_lightlist
  009fa	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _rlight$[ebp], eax

; 869  : 						rlight->height += rlight->heightstep;

  00a00	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00a06	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a08	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00a0e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00a11	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00a17	89 08		 mov	 DWORD PTR [eax], ecx

; 870  : 						if (rlight->flags & FF_CUTLEVEL)

  00a19	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00a1f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00a22	81 e1 80 01 00
	00		 and	 ecx, 384		; 00000180H
  00a28	74 1b		 je	 SHORT $LN82@R_RenderTh

; 871  : 							rlight->botheight += rlight->botheightstep;

  00a2a	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00a30	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00a33	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00a39	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  00a3c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00a42	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN82@R_RenderTh:

; 872  : 					}

  00a45	eb 89		 jmp	 SHORT $LN8@R_RenderTh
$LN9@R_RenderTh:

; 873  : 					spryscale += rw_scalestep;

  00a47	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00a4c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _rw_scalestep
  00a52	a3 00 00 00 00	 mov	 DWORD PTR _spryscale, eax

; 874  : 					continue;

  00a57	e9 83 fe ff ff	 jmp	 $LN5@R_RenderTh
$LN80@R_RenderTh:

; 875  : 				}
; 876  : 
; 877  : 				dc_iscale = 0xffffffffu / (unsigned)spryscale;

  00a5c	83 c8 ff	 or	 eax, -1
  00a5f	33 d2		 xor	 edx, edx
  00a61	f7 35 00 00 00
	00		 div	 DWORD PTR _spryscale
  00a67	a3 00 00 00 00	 mov	 DWORD PTR _dc_iscale, eax

; 878  : 
; 879  : 				// draw the texture
; 880  : 				col = (column_t *)((UINT8 *)R_GetColumn(texnum,maskedtexturecol[dc_x]) - 3);

  00a6c	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  00a71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maskedtexturecol
  00a77	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  00a7b	52		 push	 edx
  00a7c	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 _R_GetColumn
  00a85	83 c4 08	 add	 esp, 8
  00a88	83 e8 03	 sub	 eax, 3
  00a8b	89 45 f8	 mov	 DWORD PTR _col$[ebp], eax

; 881  : 
; 882  : 				for (i = 0; i < dc_numlights; i++)

  00a8e	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00a98	eb 0f		 jmp	 SHORT $LN13@R_RenderTh
$LN11@R_RenderTh:
  00a9a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00aa0	83 c0 01	 add	 eax, 1
  00aa3	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN13@R_RenderTh:
  00aa9	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00aaf	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  00ab5	0f 8d bd 03 00
	00		 jge	 $LN12@R_RenderTh

; 883  : 				{
; 884  : 					// Check if the current light effects the colormap/lightlevel
; 885  : 					rlight = &dc_lightlist[i];

  00abb	6b 85 f0 fe ff
	ff 24		 imul	 eax, DWORD PTR _i$[ebp], 36
  00ac2	03 05 00 00 00
	00		 add	 eax, DWORD PTR _dc_lightlist
  00ac8	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _rlight$[ebp], eax

; 886  : 					lighteffect = !(dc_lightlist[i].flags & FF_NOSHADE);

  00ace	6b 85 f0 fe ff
	ff 24		 imul	 eax, DWORD PTR _i$[ebp], 36
  00ad5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  00adb	8b 54 01 1c	 mov	 edx, DWORD PTR [ecx+eax+28]
  00adf	83 e2 40	 and	 edx, 64			; 00000040H
  00ae2	75 0c		 jne	 SHORT $LN121@R_RenderTh
  00ae4	c7 85 6c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv504[ebp], 1
  00aee	eb 0a		 jmp	 SHORT $LN122@R_RenderTh
$LN121@R_RenderTh:
  00af0	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv504[ebp], 0
$LN122@R_RenderTh:
  00afa	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv504[ebp]
  00b00	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _lighteffect$1[ebp], eax

; 887  : 					if (lighteffect)

  00b06	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR _lighteffect$1[ebp], 0
  00b0d	0f 84 1e 01 00
	00		 je	 $LN94@R_RenderTh

; 888  : 					{
; 889  : 						lightnum = rlight->lightnum;

  00b13	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00b19	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00b1c	89 4d f4	 mov	 DWORD PTR _lightnum$[ebp], ecx

; 890  : 
; 891  : 						if (lightnum < 0)

  00b1f	83 7d f4 00	 cmp	 DWORD PTR _lightnum$[ebp], 0
  00b23	7d 16		 jge	 SHORT $LN84@R_RenderTh

; 892  : 							xwalllights = scalelight[0];

  00b25	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00b2a	6b c8 00	 imul	 ecx, eax, 0
  00b2d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  00b33	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _xwalllights$5[ebp], ecx
  00b39	eb 2e		 jmp	 SHORT $LN87@R_RenderTh
$LN84@R_RenderTh:

; 893  : 						else if (lightnum >= LIGHTLEVELS)

  00b3b	83 7d f4 20	 cmp	 DWORD PTR _lightnum$[ebp], 32 ; 00000020H
  00b3f	7c 16		 jl	 SHORT $LN86@R_RenderTh

; 894  : 							xwalllights = scalelight[LIGHTLEVELS-1];

  00b41	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00b46	6b c8 1f	 imul	 ecx, eax, 31
  00b49	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  00b4f	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _xwalllights$5[ebp], ecx
  00b55	eb 12		 jmp	 SHORT $LN87@R_RenderTh
$LN86@R_RenderTh:

; 895  : 						else
; 896  : 							xwalllights = scalelight[lightnum];

  00b57	69 45 f4 c0 00
	00 00		 imul	 eax, DWORD PTR _lightnum$[ebp], 192
  00b5e	05 00 00 00 00	 add	 eax, OFFSET _scalelight
  00b63	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _xwalllights$5[ebp], eax
$LN87@R_RenderTh:

; 897  : 
; 898  : 						pindex = spryscale>>LIGHTSCALESHIFT;

  00b69	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00b6e	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00b71	89 45 fc	 mov	 DWORD PTR _pindex$[ebp], eax

; 899  : 
; 900  : 						if (pindex >=  MAXLIGHTSCALE)

  00b74	83 7d fc 30	 cmp	 DWORD PTR _pindex$[ebp], 48 ; 00000030H
  00b78	72 07		 jb	 SHORT $LN88@R_RenderTh

; 901  : 							pindex = MAXLIGHTSCALE-1;

  00b7a	c7 45 fc 2f 00
	00 00		 mov	 DWORD PTR _pindex$[ebp], 47 ; 0000002fH
$LN88@R_RenderTh:

; 902  : 
; 903  : 						if (pfloor->flags & FF_FOG)

  00b81	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00b84	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00b87	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00b8d	74 58		 je	 SHORT $LN89@R_RenderTh

; 904  : 						{
; 905  : 							if (pfloor->master->frontsector->extra_colormap)

  00b8f	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00b92	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00b95	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00b98	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  00b9f	74 2f		 je	 SHORT $LN91@R_RenderTh

; 906  : 								rlight->rcolormap = pfloor->master->frontsector->extra_colormap->colormap + (xwalllights[pindex] - colormaps);

  00ba1	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00ba4	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00ba7	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00baa	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00bb0	8b 4d fc	 mov	 ecx, DWORD PTR _pindex$[ebp]
  00bb3	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _xwalllights$5[ebp]
  00bb9	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00bbc	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _colormaps
  00bc2	03 48 20	 add	 ecx, DWORD PTR [eax+32]
  00bc5	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00bcb	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  00bce	eb 15		 jmp	 SHORT $LN92@R_RenderTh
$LN91@R_RenderTh:

; 907  : 							else
; 908  : 								rlight->rcolormap = xwalllights[pindex];

  00bd0	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00bd6	8b 4d fc	 mov	 ecx, DWORD PTR _pindex$[ebp]
  00bd9	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _xwalllights$5[ebp]
  00bdf	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00be2	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN92@R_RenderTh:

; 909  : 						}

  00be5	eb 4a		 jmp	 SHORT $LN94@R_RenderTh
$LN89@R_RenderTh:

; 910  : 						else
; 911  : 						{
; 912  : 							if (rlight->extra_colormap)

  00be7	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00bed	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00bf1	74 29		 je	 SHORT $LN93@R_RenderTh

; 913  : 								rlight->rcolormap = rlight->extra_colormap->colormap + (xwalllights[pindex] - colormaps);

  00bf3	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00bf9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00bfc	8b 55 fc	 mov	 edx, DWORD PTR _pindex$[ebp]
  00bff	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _xwalllights$5[ebp]
  00c05	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00c08	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _colormaps
  00c0e	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  00c11	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00c17	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00c1a	eb 15		 jmp	 SHORT $LN94@R_RenderTh
$LN93@R_RenderTh:

; 914  : 							else
; 915  : 								rlight->rcolormap = xwalllights[pindex];

  00c1c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00c22	8b 4d fc	 mov	 ecx, DWORD PTR _pindex$[ebp]
  00c25	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _xwalllights$5[ebp]
  00c2b	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00c2e	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN94@R_RenderTh:

; 916  : 						}
; 917  : 					}
; 918  : 
; 919  : 					// Check if the current light can cut the current 3D floor.
; 920  : 					if (rlight->flags & FF_CUTSOLIDS && !(pfloor->flags & FF_EXTRA))

  00c31	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00c37	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00c3a	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00c40	74 1a		 je	 SHORT $LN95@R_RenderTh
  00c42	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00c45	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00c48	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00c4e	75 0c		 jne	 SHORT $LN95@R_RenderTh

; 921  : 						solid = 1;

  00c50	c7 85 b4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _solid$2[ebp], 1
  00c5a	eb 63		 jmp	 SHORT $LN98@R_RenderTh
$LN95@R_RenderTh:

; 922  : 					else if (rlight->flags & FF_CUTEXTRA && pfloor->flags & FF_EXTRA)

  00c5c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00c62	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00c65	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00c6b	74 48		 je	 SHORT $LN97@R_RenderTh
  00c6d	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00c70	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00c73	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00c79	74 3a		 je	 SHORT $LN97@R_RenderTh

; 923  : 					{
; 924  : 						if (rlight->flags & FF_EXTRA)

  00c7b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00c81	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00c84	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00c8a	74 1d		 je	 SHORT $LN99@R_RenderTh

; 925  : 						{
; 926  : 							// The light is from an extra 3D floor... Check the flags so
; 927  : 							// there are no undesired cuts.
; 928  : 							if (rlight->flags == pfloor->flags) // Only merge with your own kind

  00c8c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00c92	8b 4d 14	 mov	 ecx, DWORD PTR _pfloor$[ebp]
  00c95	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00c98	3b 51 34	 cmp	 edx, DWORD PTR [ecx+52]
  00c9b	75 0a		 jne	 SHORT $LN101@R_RenderTh

; 929  : 								solid = 1;

  00c9d	c7 85 b4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _solid$2[ebp], 1
$LN101@R_RenderTh:

; 930  : 						}

  00ca7	eb 0a		 jmp	 SHORT $LN100@R_RenderTh
$LN99@R_RenderTh:

; 931  : 						else
; 932  : 							solid = 1;

  00ca9	c7 85 b4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _solid$2[ebp], 1
$LN100@R_RenderTh:

; 933  : 					}

  00cb3	eb 0a		 jmp	 SHORT $LN98@R_RenderTh
$LN97@R_RenderTh:

; 934  : 					else
; 935  : 						solid = 0;

  00cb5	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _solid$2[ebp], 0
$LN98@R_RenderTh:

; 936  : 
; 937  : 					rlight->height += rlight->heightstep;

  00cbf	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00cc5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc7	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00ccd	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00cd0	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00cd6	89 08		 mov	 DWORD PTR [eax], ecx

; 938  : 					height = rlight->height;

  00cd8	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00cde	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ce0	89 8d bc fe ff
	ff		 mov	 DWORD PTR _height$4[ebp], ecx

; 939  : 
; 940  : 					if (solid)

  00ce6	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _solid$2[ebp], 0
  00ced	74 30		 je	 SHORT $LN102@R_RenderTh

; 941  : 					{
; 942  : 						rlight->botheight += rlight->botheightstep;

  00cef	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00cf5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00cf8	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00cfe	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  00d01	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00d07	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 943  : 						bheight = rlight->botheight - (FRACUNIT >> 1);

  00d0a	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00d10	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00d13	81 e9 00 80 00
	00		 sub	 ecx, 32768		; 00008000H
  00d19	89 8d b8 fe ff
	ff		 mov	 DWORD PTR _bheight$3[ebp], ecx
$LN102@R_RenderTh:

; 944  : 					}
; 945  : 
; 946  : 					if (height <= windowtop)

  00d1f	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _height$4[ebp]
  00d25	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _windowtop
  00d2b	7f 3e		 jg	 SHORT $LN103@R_RenderTh

; 947  : 					{
; 948  : 						if (lighteffect)

  00d2d	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR _lighteffect$1[ebp], 0
  00d34	74 0f		 je	 SHORT $LN104@R_RenderTh

; 949  : 							dc_colormap = rlight->rcolormap;

  00d36	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00d3c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00d3f	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, ecx
$LN104@R_RenderTh:

; 950  : 						if (solid && windowtop < bheight)

  00d45	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _solid$2[ebp], 0
  00d4c	74 18		 je	 SHORT $LN105@R_RenderTh
  00d4e	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowtop
  00d53	3b 85 b8 fe ff
	ff		 cmp	 eax, DWORD PTR _bheight$3[ebp]
  00d59	7d 0b		 jge	 SHORT $LN105@R_RenderTh

; 951  : 							windowtop = bheight;

  00d5b	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _bheight$3[ebp]
  00d61	a3 00 00 00 00	 mov	 DWORD PTR _windowtop, eax
$LN105@R_RenderTh:

; 952  : 						continue;

  00d66	e9 2f fd ff ff	 jmp	 $LN11@R_RenderTh
$LN103@R_RenderTh:

; 953  : 					}
; 954  : 
; 955  : 					windowbottom = height;

  00d6b	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _height$4[ebp]
  00d71	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax

; 956  : 					if (windowbottom >= sprbotscreen)

  00d76	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowbottom
  00d7b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _sprbotscreen
  00d81	0f 8c a4 00 00
	00		 jl	 $LN106@R_RenderTh

; 957  : 					{
; 958  : 						windowbottom = sprbotscreen;

  00d87	a1 00 00 00 00	 mov	 eax, DWORD PTR _sprbotscreen
  00d8c	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax

; 959  : 						colfunc_2s (col);

  00d91	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00d94	50		 push	 eax
  00d95	ff 95 cc fe ff
	ff		 call	 DWORD PTR _colfunc_2s$[ebp]
  00d9b	83 c4 04	 add	 esp, 4

; 960  : 						for (i++; i < dc_numlights; i++)

  00d9e	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00da4	83 c0 01	 add	 eax, 1
  00da7	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
  00dad	eb 0f		 jmp	 SHORT $LN16@R_RenderTh
$LN14@R_RenderTh:
  00daf	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00db5	83 c0 01	 add	 eax, 1
  00db8	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN16@R_RenderTh:
  00dbe	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00dc4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  00dca	7d 5a		 jge	 SHORT $LN15@R_RenderTh

; 961  : 						{
; 962  : 							rlight = &dc_lightlist[i];

  00dcc	6b 85 f0 fe ff
	ff 24		 imul	 eax, DWORD PTR _i$[ebp], 36
  00dd3	03 05 00 00 00
	00		 add	 eax, DWORD PTR _dc_lightlist
  00dd9	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _rlight$[ebp], eax

; 963  : 							rlight->height += rlight->heightstep;

  00ddf	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00de5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00de7	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00ded	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00df0	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00df6	89 08		 mov	 DWORD PTR [eax], ecx

; 964  : 							if (rlight->flags & FF_CUTLEVEL)

  00df8	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00dfe	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00e01	81 e1 80 01 00
	00		 and	 ecx, 384		; 00000180H
  00e07	74 1b		 je	 SHORT $LN107@R_RenderTh

; 965  : 								rlight->botheight += rlight->botheightstep;

  00e09	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00e0f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00e12	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _rlight$[ebp]
  00e18	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  00e1b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00e21	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN107@R_RenderTh:

; 966  : 						}

  00e24	eb 89		 jmp	 SHORT $LN14@R_RenderTh
$LN15@R_RenderTh:

; 967  : 						continue;

  00e26	e9 6f fc ff ff	 jmp	 $LN11@R_RenderTh
$LN106@R_RenderTh:

; 968  : 					}
; 969  : 					colfunc_2s (col);

  00e2b	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00e2e	50		 push	 eax
  00e2f	ff 95 cc fe ff
	ff		 call	 DWORD PTR _colfunc_2s$[ebp]
  00e35	83 c4 04	 add	 esp, 4

; 970  : 					if (solid)

  00e38	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _solid$2[ebp], 0
  00e3f	74 0d		 je	 SHORT $LN108@R_RenderTh

; 971  : 						windowtop = bheight;

  00e41	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _bheight$3[ebp]
  00e47	a3 00 00 00 00	 mov	 DWORD PTR _windowtop, eax
  00e4c	eb 0d		 jmp	 SHORT $LN109@R_RenderTh
$LN108@R_RenderTh:

; 972  : 					else
; 973  : 						windowtop = windowbottom + 1;

  00e4e	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowbottom
  00e53	83 c0 01	 add	 eax, 1
  00e56	a3 00 00 00 00	 mov	 DWORD PTR _windowtop, eax
$LN109@R_RenderTh:

; 974  : 					if (lighteffect)

  00e5b	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR _lighteffect$1[ebp], 0
  00e62	74 0f		 je	 SHORT $LN110@R_RenderTh

; 975  : 						dc_colormap = rlight->rcolormap;

  00e64	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _rlight$[ebp]
  00e6a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00e6d	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, ecx
$LN110@R_RenderTh:

; 976  : 				}

  00e73	e9 22 fc ff ff	 jmp	 $LN11@R_RenderTh
$LN12@R_RenderTh:

; 977  : 				windowbottom = sprbotscreen;

  00e78	a1 00 00 00 00	 mov	 eax, DWORD PTR _sprbotscreen
  00e7d	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax

; 978  : 				if (windowtop < windowbottom)

  00e82	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowtop
  00e87	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _windowbottom
  00e8d	7d 0d		 jge	 SHORT $LN111@R_RenderTh

; 979  : 					colfunc_2s (col);

  00e8f	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00e92	50		 push	 eax
  00e93	ff 95 cc fe ff
	ff		 call	 DWORD PTR _colfunc_2s$[ebp]
  00e99	83 c4 04	 add	 esp, 4
$LN111@R_RenderTh:

; 980  : 
; 981  : 				spryscale += rw_scalestep;

  00e9c	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00ea1	03 05 00 00 00
	00		 add	 eax, DWORD PTR _rw_scalestep
  00ea7	a3 00 00 00 00	 mov	 DWORD PTR _spryscale, eax

; 982  : 				continue;

  00eac	e9 2e fa ff ff	 jmp	 $LN5@R_RenderTh
$LN79@R_RenderTh:

; 983  : 			}
; 984  : 
; 985  : 			// calculate lighting
; 986  : 			pindex = spryscale>>LIGHTSCALESHIFT;

  00eb1	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00eb6	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00eb9	89 45 fc	 mov	 DWORD PTR _pindex$[ebp], eax

; 987  : 
; 988  : 			if (pindex >= MAXLIGHTSCALE)

  00ebc	83 7d fc 30	 cmp	 DWORD PTR _pindex$[ebp], 48 ; 00000030H
  00ec0	72 07		 jb	 SHORT $LN112@R_RenderTh

; 989  : 				pindex = MAXLIGHTSCALE - 1;

  00ec2	c7 45 fc 2f 00
	00 00		 mov	 DWORD PTR _pindex$[ebp], 47 ; 0000002fH
$LN112@R_RenderTh:

; 990  : 
; 991  : 			dc_colormap = walllights[pindex];

  00ec9	8b 45 fc	 mov	 eax, DWORD PTR _pindex$[ebp]
  00ecc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _walllights
  00ed2	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00ed5	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, edx

; 992  : 			if (frontsector->extra_colormap)

  00edb	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00ee0	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00ee7	74 20		 je	 SHORT $LN113@R_RenderTh

; 993  : 				dc_colormap = frontsector->extra_colormap->colormap + (dc_colormap - colormaps);

  00ee9	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00eee	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00ef4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_colormap
  00efa	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _colormaps
  00f00	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  00f03	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, edx
$LN113@R_RenderTh:

; 994  : 			if (pfloor->flags & FF_FOG && pfloor->master->frontsector->extra_colormap)

  00f09	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00f0c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00f0f	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00f15	74 36		 je	 SHORT $LN114@R_RenderTh
  00f17	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00f1a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00f1d	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00f20	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  00f27	74 24		 je	 SHORT $LN114@R_RenderTh

; 995  : 				dc_colormap = pfloor->master->frontsector->extra_colormap->colormap + (dc_colormap - colormaps);

  00f29	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00f2c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00f2f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00f32	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00f38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_colormap
  00f3e	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _colormaps
  00f44	03 48 20	 add	 ecx, DWORD PTR [eax+32]
  00f47	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, ecx
$LN114@R_RenderTh:

; 996  : 
; 997  : 			//Handle over/underflows before they happen.  This fixes the textures part of the FOF rendering bug.
; 998  : 			//...for the most part, anyway.
; 999  : 			if (((signed)dc_texturemid > 0 && (spryscale>>FRACBITS > INT32_MAX / (signed)dc_texturemid))
; 1000 : 			 || ((signed)dc_texturemid < 0 && (spryscale) && (signed)(dc_texturemid)>>FRACBITS < (INT32_MIN / spryscale)))

  00f4d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dc_texturemid, 0
  00f54	7e 19		 jle	 SHORT $LN117@R_RenderTh
  00f56	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _spryscale
  00f5c	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00f5f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00f64	99		 cdq
  00f65	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _dc_texturemid
  00f6b	3b c8		 cmp	 ecx, eax
  00f6d	7f 2b		 jg	 SHORT $LN116@R_RenderTh
$LN117@R_RenderTh:
  00f6f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dc_texturemid, 0
  00f76	7d 37		 jge	 SHORT $LN115@R_RenderTh
  00f78	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _spryscale, 0
  00f7f	74 2e		 je	 SHORT $LN115@R_RenderTh
  00f81	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_texturemid
  00f87	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00f8a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00f8f	99		 cdq
  00f90	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _spryscale
  00f96	3b c8		 cmp	 ecx, eax
  00f98	7d 15		 jge	 SHORT $LN115@R_RenderTh
$LN116@R_RenderTh:

; 1001 : 			{
; 1002 : 				spryscale += rw_scalestep;

  00f9a	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00f9f	03 05 00 00 00
	00		 add	 eax, DWORD PTR _rw_scalestep
  00fa5	a3 00 00 00 00	 mov	 DWORD PTR _spryscale, eax

; 1003 : 				continue;

  00faa	e9 30 f9 ff ff	 jmp	 $LN5@R_RenderTh
$LN115@R_RenderTh:

; 1004 : 			}
; 1005 : 
; 1006 : 			sprtopscreen = windowtop = (centeryfrac - FixedMul((dc_texturemid - offsetvalue), spryscale));

  00faf	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00fb4	50		 push	 eax
  00fb5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_texturemid
  00fbb	2b 8d e0 fe ff
	ff		 sub	 ecx, DWORD PTR _offsetvalue$[ebp]
  00fc1	51		 push	 ecx
  00fc2	e8 00 00 00 00	 call	 _FixedMul
  00fc7	83 c4 08	 add	 esp, 8
  00fca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _centeryfrac
  00fd0	2b d0		 sub	 edx, eax
  00fd2	89 15 00 00 00
	00		 mov	 DWORD PTR _windowtop, edx
  00fd8	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowtop
  00fdd	a3 00 00 00 00	 mov	 DWORD PTR _sprtopscreen, eax

; 1007 : 			sprbotscreen = windowbottom = FixedMul(*pfloor->topheight - *pfloor->bottomheight, spryscale) + sprtopscreen;

  00fe2	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00fe7	50		 push	 eax
  00fe8	8b 4d 14	 mov	 ecx, DWORD PTR _pfloor$[ebp]
  00feb	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fed	8b 45 14	 mov	 eax, DWORD PTR _pfloor$[ebp]
  00ff0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00ff3	8b 12		 mov	 edx, DWORD PTR [edx]
  00ff5	2b 11		 sub	 edx, DWORD PTR [ecx]
  00ff7	52		 push	 edx
  00ff8	e8 00 00 00 00	 call	 _FixedMul
  00ffd	83 c4 08	 add	 esp, 8
  01000	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sprtopscreen
  01006	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax
  0100b	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowbottom
  01010	a3 00 00 00 00	 mov	 DWORD PTR _sprbotscreen, eax

; 1008 : 			dc_iscale = 0xffffffffu / (unsigned)spryscale;

  01015	83 c8 ff	 or	 eax, -1
  01018	33 d2		 xor	 edx, edx
  0101a	f7 35 00 00 00
	00		 div	 DWORD PTR _spryscale
  01020	a3 00 00 00 00	 mov	 DWORD PTR _dc_iscale, eax

; 1009 : 
; 1010 : 			// draw the texture
; 1011 : 			col = (column_t *)((UINT8 *)R_GetColumn(texnum,maskedtexturecol[dc_x]) - 3);

  01025	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  0102a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maskedtexturecol
  01030	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  01034	52		 push	 edx
  01035	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  01038	50		 push	 eax
  01039	e8 00 00 00 00	 call	 _R_GetColumn
  0103e	83 c4 08	 add	 esp, 8
  01041	83 e8 03	 sub	 eax, 3
  01044	89 45 f8	 mov	 DWORD PTR _col$[ebp], eax

; 1012 : 
; 1013 : 			colfunc_2s (col);

  01047	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  0104a	50		 push	 eax
  0104b	ff 95 cc fe ff
	ff		 call	 DWORD PTR _colfunc_2s$[ebp]
  01051	83 c4 04	 add	 esp, 4

; 1014 : 			spryscale += rw_scalestep;

  01054	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  01059	03 05 00 00 00
	00		 add	 eax, DWORD PTR _rw_scalestep
  0105f	a3 00 00 00 00	 mov	 DWORD PTR _spryscale, eax
$LN78@R_RenderTh:

; 1015 : 		}
; 1016 : 	}

  01064	e9 76 f8 ff ff	 jmp	 $LN5@R_RenderTh
$LN6@R_RenderTh:

; 1017 : 	colfunc = wallcolfunc;

  01069	a1 00 00 00 00	 mov	 eax, DWORD PTR _wallcolfunc
  0106e	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax
$LN1@R_RenderTh:

; 1018 : }

  01073	5f		 pop	 edi
  01074	5e		 pop	 esi
  01075	5b		 pop	 ebx
  01076	8b e5		 mov	 esp, ebp
  01078	5d		 pop	 ebp
  01079	c3		 ret	 0
_R_RenderThickSideRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_segs.c
;	COMDAT _R_RenderMaskedSegRange
_TEXT	SEGMENT
tv74 = -140						; size = 4
tv317 = -140						; size = 4
tv327 = -140						; size = 4
_xwalllights$1 = -72					; size = 4
_low$2 = -68						; size = 4
_high$3 = -64						; size = 4
_repeats$ = -60						; size = 4
_times$ = -56						; size = 4
_back$ = -52						; size = 4
_front$ = -48						; size = 4
_ldef$ = -44						; size = 4
_colfunc_2s$ = -40					; size = 4
_rlight$ = -36						; size = 4
_light$ = -32						; size = 4
_realbot$ = -28						; size = 4
_height$ = -24						; size = 4
_i$ = -20						; size = 4
_texnum$ = -16						; size = 4
_lightnum$ = -12					; size = 4
_col$ = -8						; size = 4
_pindex$ = -4						; size = 4
_ds$ = 8						; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
_R_RenderMaskedSegRange PROC				; COMDAT

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 273  : 	size_t pindex;
; 274  : 	column_t *col;
; 275  : 	INT32 lightnum, texnum, i;
; 276  : 	fixed_t height, realbot;
; 277  : 	lightlist_t *light;
; 278  : 	r_lightlist_t *rlight;
; 279  : 	void (*colfunc_2s)(column_t *);
; 280  : 	line_t *ldef;
; 281  : 	sector_t *front, *back;
; 282  : 	INT32 times, repeats;
; 283  : 
; 284  : 	// Calculate light table.
; 285  : 	// Use different light tables
; 286  : 	//   for horizontal / vertical / diagonal. Diagonal?
; 287  : 	// OPTIMIZE: get rid of LIGHTSEGSHIFT globally
; 288  : 	curline = ds->curline;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 0d 00 00 00
	00		 mov	 DWORD PTR _curline, ecx

; 289  : 	frontsector = curline->frontsector;

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0001c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0001f	89 0d 00 00 00
	00		 mov	 DWORD PTR _frontsector, ecx

; 290  : 	backsector = curline->backsector;

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0002a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0002d	89 0d 00 00 00
	00		 mov	 DWORD PTR _backsector, ecx

; 291  : 	texnum = texturetranslation[curline->sidedef->midtexture];

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00038	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _texturetranslation
  00043	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00046	89 4d f0	 mov	 DWORD PTR _texnum$[ebp], ecx

; 292  : 	windowbottom = windowtop = sprbotscreen = INT32_MAX;

  00049	c7 05 00 00 00
	00 ff ff ff 7f	 mov	 DWORD PTR _sprbotscreen, 2147483647 ; 7fffffffH
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR _sprbotscreen
  00058	a3 00 00 00 00	 mov	 DWORD PTR _windowtop, eax
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _windowtop
  00063	89 0d 00 00 00
	00		 mov	 DWORD PTR _windowbottom, ecx

; 293  : 
; 294  : 	// hack translucent linedef types (900-909 for transtables 1-9)
; 295  : 	ldef = curline->linedef;

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0006e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00071	89 4d d4	 mov	 DWORD PTR _ldef$[ebp], ecx

; 296  : 	switch (ldef->special)

  00074	8b 45 d4	 mov	 eax, DWORD PTR _ldef$[ebp]
  00077	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  0007b	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], ecx
  00081	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR tv74[ebp]
  00087	81 ea 84 03 00
	00		 sub	 edx, 900		; 00000384H
  0008d	89 95 74 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], edx
  00093	83 bd 74 ff ff
	ff 09		 cmp	 DWORD PTR tv74[ebp], 9
  0009a	0f 87 34 01 00
	00		 ja	 $LN29@R_RenderMa
  000a0	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]
  000a6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN98@R_RenderMa[eax*4]
$LN19@R_RenderMa:

; 297  : 	{
; 298  : 		case 900:
; 299  : 			dc_transmap = ((tr_trans10)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  000b2	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 300  : 			colfunc = fuzzcolfunc;

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  000bc	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 301  : 			break;

  000c1	e9 18 01 00 00	 jmp	 $LN2@R_RenderMa
$LN20@R_RenderMa:

; 302  : 		case 901:
; 303  : 			dc_transmap = ((tr_trans20)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  000cb	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  000d0	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 304  : 			colfunc = fuzzcolfunc;

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  000da	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 305  : 			break;

  000df	e9 fa 00 00 00	 jmp	 $LN2@R_RenderMa
$LN21@R_RenderMa:

; 306  : 		case 902:
; 307  : 			dc_transmap = ((tr_trans30)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  000e9	05 00 00 02 00	 add	 eax, 131072		; 00020000H
  000ee	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 308  : 			colfunc = fuzzcolfunc;

  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 309  : 			break;

  000fd	e9 dc 00 00 00	 jmp	 $LN2@R_RenderMa
$LN22@R_RenderMa:

; 310  : 		case 903:
; 311  : 			dc_transmap = ((tr_trans40)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00102	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00107	05 00 00 03 00	 add	 eax, 196608		; 00030000H
  0010c	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 312  : 			colfunc = fuzzcolfunc;

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  00116	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 313  : 			break;

  0011b	e9 be 00 00 00	 jmp	 $LN2@R_RenderMa
$LN23@R_RenderMa:

; 314  : 		case 904:
; 315  : 			dc_transmap = ((tr_trans50)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00125	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  0012a	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 316  : 			colfunc = fuzzcolfunc;

  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  00134	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 317  : 			break;

  00139	e9 a0 00 00 00	 jmp	 $LN2@R_RenderMa
$LN24@R_RenderMa:

; 318  : 		case 905:
; 319  : 			dc_transmap = ((tr_trans60)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00143	05 00 00 05 00	 add	 eax, 327680		; 00050000H
  00148	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 320  : 			colfunc = fuzzcolfunc;

  0014d	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  00152	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 321  : 			break;

  00157	e9 82 00 00 00	 jmp	 $LN2@R_RenderMa
$LN25@R_RenderMa:

; 322  : 		case 906:
; 323  : 			dc_transmap = ((tr_trans70)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00161	05 00 00 06 00	 add	 eax, 393216		; 00060000H
  00166	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 324  : 			colfunc = fuzzcolfunc;

  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  00170	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 325  : 			break;

  00175	eb 67		 jmp	 SHORT $LN2@R_RenderMa
$LN26@R_RenderMa:

; 326  : 		case 907:
; 327  : 			dc_transmap = ((tr_trans80)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  0017c	05 00 00 07 00	 add	 eax, 458752		; 00070000H
  00181	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 328  : 			colfunc = fuzzcolfunc;

  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  0018b	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 329  : 			break;

  00190	eb 4c		 jmp	 SHORT $LN2@R_RenderMa
$LN27@R_RenderMa:

; 330  : 		case 908:
; 331  : 			dc_transmap = ((tr_trans90)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00192	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00197	05 00 00 08 00	 add	 eax, 524288		; 00080000H
  0019c	a3 00 00 00 00	 mov	 DWORD PTR _dc_transmap, eax

; 332  : 			colfunc = fuzzcolfunc;

  001a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  001a6	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 333  : 			break;

  001ab	eb 31		 jmp	 SHORT $LN2@R_RenderMa
$LN28@R_RenderMa:

; 334  : 		case 909:
; 335  : 			colfunc = R_DrawFogColumn_8;

  001ad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _colfunc, OFFSET _R_DrawFogColumn_8

; 336  : 			windowtop = frontsector->ceilingheight;

  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  001bc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001bf	89 0d 00 00 00
	00		 mov	 DWORD PTR _windowtop, ecx

; 337  : 			windowbottom = frontsector->floorheight;

  001c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  001ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cc	89 0d 00 00 00
	00		 mov	 DWORD PTR _windowbottom, ecx

; 338  : 			break;

  001d2	eb 0a		 jmp	 SHORT $LN2@R_RenderMa
$LN29@R_RenderMa:

; 339  : 		default:
; 340  : 			colfunc = wallcolfunc;

  001d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _wallcolfunc
  001d9	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax
$LN2@R_RenderMa:

; 341  : 			break;
; 342  : 	}
; 343  : 
; 344  : 	if (curline->polyseg && curline->polyseg->translucency > 0)

  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  001e3	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  001e7	74 54		 je	 SHORT $LN30@R_RenderMa
  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  001ee	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  001f1	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  001f8	7e 43		 jle	 SHORT $LN30@R_RenderMa

; 345  : 	{
; 346  : 		if (curline->polyseg->translucency >= NUMTRANSMAPS)

  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  001ff	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00202	83 b9 a4 00 00
	00 0a		 cmp	 DWORD PTR [ecx+164], 10	; 0000000aH
  00209	7c 05		 jl	 SHORT $LN31@R_RenderMa

; 347  : 			return;

  0020b	e9 75 09 00 00	 jmp	 $LN1@R_RenderMa
$LN31@R_RenderMa:

; 348  : 
; 349  : 		dc_transmap = ((curline->polyseg->translucency)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00210	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00215	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00218	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0021e	c1 e2 10	 shl	 edx, 16			; 00000010H
  00221	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00226	8d 8c 10 00 00
	ff ff		 lea	 ecx, DWORD PTR [eax+edx-65536]
  0022d	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_transmap, ecx

; 350  : 		colfunc = fuzzcolfunc;

  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR _fuzzcolfunc
  00238	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax
$LN30@R_RenderMa:

; 351  : 	}
; 352  : 
; 353  : 	rw_scalestep = ds->scalestep;

  0023d	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  00240	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00243	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_scalestep, ecx

; 354  : 	spryscale = ds->scale1 + (x1 - ds->x1)*rw_scalestep;

  00249	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  0024c	8b 4d 0c	 mov	 ecx, DWORD PTR _x1$[ebp]
  0024f	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  00252	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR _rw_scalestep
  00259	8b 55 08	 mov	 edx, DWORD PTR _ds$[ebp]
  0025c	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  0025f	89 0d 00 00 00
	00		 mov	 DWORD PTR _spryscale, ecx

; 355  : 
; 356  : 	// handle case where multipatch texture is drawn on a 2sided wall, multi-patch textures
; 357  : 	// are not stored per-column with post info in SRB2
; 358  : 	if (textures[texnum]->patchcount == 1)

  00265	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  00268	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  0026e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00271	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  00275	83 f8 01	 cmp	 eax, 1
  00278	75 09		 jne	 SHORT $LN32@R_RenderMa

; 359  : 		colfunc_2s = R_DrawMaskedColumn; // render the usual 2sided single-patch packed texture

  0027a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _colfunc_2s$[ebp], OFFSET _R_DrawMaskedColumn
  00281	eb 1c		 jmp	 SHORT $LN33@R_RenderMa
$LN32@R_RenderMa:

; 360  : 	else
; 361  : 	{
; 362  : 		colfunc_2s = R_Render2sidedMultiPatchColumn; // render multipatch with no holes (no post_t info)

  00283	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _colfunc_2s$[ebp], OFFSET _R_Render2sidedMultiPatchColumn

; 363  : 		column2s_length = textures[texnum]->height;

  0028a	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  0028d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  00293	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00296	0f bf 42 0a	 movsx	 eax, WORD PTR [edx+10]
  0029a	a3 00 00 00 00	 mov	 DWORD PTR _column2s_length, eax
$LN33@R_RenderMa:

; 364  : 	}
; 365  : 
; 366  : 	// Setup lighting based on the presence/lack-of 3D floors.
; 367  : 	dc_numlights = 0;

  0029f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _dc_numlights, 0

; 368  : 	if (frontsector->numlights)

  002a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  002ae	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  002b5	0f 84 be 01 00
	00		 je	 $LN34@R_RenderMa

; 369  : 	{
; 370  : 		dc_numlights = frontsector->numlights;

  002bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  002c0	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  002c6	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_numlights, ecx

; 371  : 		if (dc_numlights >= dc_maxlights)

  002cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_numlights
  002d1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_maxlights
  002d7	7c 2c		 jl	 SHORT $LN36@R_RenderMa

; 372  : 		{
; 373  : 			dc_maxlights = dc_numlights;

  002d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_numlights
  002de	a3 00 00 00 00	 mov	 DWORD PTR _dc_maxlights, eax

; 374  : 			dc_lightlist = Z_Realloc(dc_lightlist, sizeof (*dc_lightlist) * dc_maxlights, PU_STATIC, NULL);

  002e3	6a 00		 push	 0
  002e5	6a 00		 push	 0
  002e7	6a 01		 push	 1
  002e9	6b 05 00 00 00
	00 24		 imul	 eax, DWORD PTR _dc_maxlights, 36
  002f0	50		 push	 eax
  002f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_lightlist
  002f7	51		 push	 ecx
  002f8	e8 00 00 00 00	 call	 _Z_ReallocAlign
  002fd	83 c4 14	 add	 esp, 20			; 00000014H
  00300	a3 00 00 00 00	 mov	 DWORD PTR _dc_lightlist, eax
$LN36@R_RenderMa:

; 375  : 		}
; 376  : 
; 377  : 		for (i = 0; i < dc_numlights; i++)

  00305	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0030c	eb 09		 jmp	 SHORT $LN6@R_RenderMa
$LN4@R_RenderMa:
  0030e	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00311	83 c0 01	 add	 eax, 1
  00314	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN6@R_RenderMa:
  00317	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  0031a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  00320	0f 8d 4e 01 00
	00		 jge	 $LN5@R_RenderMa

; 378  : 		{
; 379  : 			light = &frontsector->lightlist[i];

  00326	6b 45 ec 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0032a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _frontsector
  00330	03 81 a4 00 00
	00		 add	 eax, DWORD PTR [ecx+164]
  00336	89 45 e0	 mov	 DWORD PTR _light$[ebp], eax

; 380  : 			rlight = &dc_lightlist[i];

  00339	6b 45 ec 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  0033d	03 05 00 00 00
	00		 add	 eax, DWORD PTR _dc_lightlist
  00343	89 45 dc	 mov	 DWORD PTR _rlight$[ebp], eax

; 381  : 			rlight->height = (centeryfrac) - FixedMul((light->height - viewz), spryscale);

  00346	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  0034b	50		 push	 eax
  0034c	8b 4d e0	 mov	 ecx, DWORD PTR _light$[ebp]
  0034f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00351	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _viewz
  00357	52		 push	 edx
  00358	e8 00 00 00 00	 call	 _FixedMul
  0035d	83 c4 08	 add	 esp, 8
  00360	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _centeryfrac
  00366	2b c8		 sub	 ecx, eax
  00368	8b 55 dc	 mov	 edx, DWORD PTR _rlight$[ebp]
  0036b	89 0a		 mov	 DWORD PTR [edx], ecx

; 382  : 			rlight->heightstep = -FixedMul(rw_scalestep, (light->height - viewz));

  0036d	8b 45 e0	 mov	 eax, DWORD PTR _light$[ebp]
  00370	8b 08		 mov	 ecx, DWORD PTR [eax]
  00372	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewz
  00378	51		 push	 ecx
  00379	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_scalestep
  0037f	52		 push	 edx
  00380	e8 00 00 00 00	 call	 _FixedMul
  00385	83 c4 08	 add	 esp, 8
  00388	f7 d8		 neg	 eax
  0038a	8b 4d dc	 mov	 ecx, DWORD PTR _rlight$[ebp]
  0038d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 383  : 			rlight->lightlevel = *light->lightlevel;

  00390	8b 45 e0	 mov	 eax, DWORD PTR _light$[ebp]
  00393	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00396	8b 55 dc	 mov	 edx, DWORD PTR _rlight$[ebp]
  00399	66 8b 01	 mov	 ax, WORD PTR [ecx]
  0039c	66 89 42 10	 mov	 WORD PTR [edx+16], ax

; 384  : 			rlight->extra_colormap = light->extra_colormap;

  003a0	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  003a3	8b 4d e0	 mov	 ecx, DWORD PTR _light$[ebp]
  003a6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  003a9	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 385  : 			rlight->flags = light->flags;

  003ac	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  003af	8b 4d e0	 mov	 ecx, DWORD PTR _light$[ebp]
  003b2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  003b5	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 386  : 
; 387  : 			if (rlight->flags & FF_FOG || (rlight->extra_colormap && rlight->extra_colormap->fog))

  003b8	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  003bb	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  003be	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  003c4	75 15		 jne	 SHORT $LN39@R_RenderMa
  003c6	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  003c9	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  003cd	74 1b		 je	 SHORT $LN37@R_RenderMa
  003cf	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  003d2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003d5	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  003d9	74 0f		 je	 SHORT $LN37@R_RenderMa
$LN39@R_RenderMa:

; 388  : 				lightnum = (rlight->lightlevel >> LIGHTSEGSHIFT);

  003db	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  003de	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  003e2	c1 f9 03	 sar	 ecx, 3
  003e5	89 4d f4	 mov	 DWORD PTR _lightnum$[ebp], ecx
  003e8	eb 23		 jmp	 SHORT $LN41@R_RenderMa
$LN37@R_RenderMa:

; 389  : 			else if (colfunc == fuzzcolfunc)

  003ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _colfunc
  003ef	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _fuzzcolfunc
  003f5	75 09		 jne	 SHORT $LN40@R_RenderMa

; 390  : 				lightnum = LIGHTLEVELS - 1;

  003f7	c7 45 f4 1f 00
	00 00		 mov	 DWORD PTR _lightnum$[ebp], 31 ; 0000001fH
  003fe	eb 0d		 jmp	 SHORT $LN41@R_RenderMa
$LN40@R_RenderMa:

; 391  : 			else
; 392  : 				lightnum = (rlight->lightlevel >> LIGHTSEGSHIFT);

  00400	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00403	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00407	c1 f9 03	 sar	 ecx, 3
  0040a	89 4d f4	 mov	 DWORD PTR _lightnum$[ebp], ecx
$LN41@R_RenderMa:

; 393  : 
; 394  : 			if (rlight->extra_colormap && rlight->extra_colormap->fog)

  0040d	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00410	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00414	74 0e		 je	 SHORT $LN42@R_RenderMa
  00416	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00419	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0041c	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00420	74 02		 je	 SHORT $LN42@R_RenderMa

; 395  : 				;

  00422	eb 42		 jmp	 SHORT $LN46@R_RenderMa
$LN42@R_RenderMa:

; 396  : 			else if (curline->v1->y == curline->v2->y)

  00424	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00429	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  00431	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00434	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00437	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0043a	75 0b		 jne	 SHORT $LN44@R_RenderMa

; 397  : 				lightnum--;

  0043c	8b 45 f4	 mov	 eax, DWORD PTR _lightnum$[ebp]
  0043f	83 e8 01	 sub	 eax, 1
  00442	89 45 f4	 mov	 DWORD PTR _lightnum$[ebp], eax
  00445	eb 1f		 jmp	 SHORT $LN46@R_RenderMa
$LN44@R_RenderMa:

; 398  : 			else if (curline->v1->x == curline->v2->x)

  00447	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0044c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0044e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  00454	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00457	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00459	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0045b	75 09		 jne	 SHORT $LN46@R_RenderMa

; 399  : 				lightnum++;

  0045d	8b 45 f4	 mov	 eax, DWORD PTR _lightnum$[ebp]
  00460	83 c0 01	 add	 eax, 1
  00463	89 45 f4	 mov	 DWORD PTR _lightnum$[ebp], eax
$LN46@R_RenderMa:

; 400  : 
; 401  : 			rlight->lightnum = lightnum;

  00466	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00469	8b 4d f4	 mov	 ecx, DWORD PTR _lightnum$[ebp]
  0046c	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 402  : 		}

  0046f	e9 9a fe ff ff	 jmp	 $LN4@R_RenderMa
$LN5@R_RenderMa:

; 403  : 	}

  00474	e9 0d 01 00 00	 jmp	 $LN60@R_RenderMa
$LN34@R_RenderMa:

; 404  : 	else
; 405  : 	{
; 406  : 		if (colfunc == fuzzcolfunc)

  00479	a1 00 00 00 00	 mov	 eax, DWORD PTR _colfunc
  0047e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _fuzzcolfunc
  00484	75 39		 jne	 SHORT $LN47@R_RenderMa

; 407  : 		{
; 408  : 			if (frontsector->extra_colormap && frontsector->extra_colormap->fog)

  00486	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  0048b	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00492	74 22		 je	 SHORT $LN49@R_RenderMa
  00494	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00499	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0049f	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  004a3	74 11		 je	 SHORT $LN49@R_RenderMa

; 409  : 				lightnum = (frontsector->lightlevel >> LIGHTSEGSHIFT);

  004a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  004aa	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  004ae	c1 f9 03	 sar	 ecx, 3
  004b1	89 4d f4	 mov	 DWORD PTR _lightnum$[ebp], ecx
  004b4	eb 07		 jmp	 SHORT $LN50@R_RenderMa
$LN49@R_RenderMa:

; 410  : 			else
; 411  : 				lightnum = LIGHTLEVELS - 1;

  004b6	c7 45 f4 1f 00
	00 00		 mov	 DWORD PTR _lightnum$[ebp], 31 ; 0000001fH
$LN50@R_RenderMa:

; 412  : 		}

  004bd	eb 0f		 jmp	 SHORT $LN48@R_RenderMa
$LN47@R_RenderMa:

; 413  : 		else
; 414  : 			lightnum = (frontsector->lightlevel >> LIGHTSEGSHIFT);

  004bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  004c4	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  004c8	c1 f9 03	 sar	 ecx, 3
  004cb	89 4d f4	 mov	 DWORD PTR _lightnum$[ebp], ecx
$LN48@R_RenderMa:

; 415  : 
; 416  : 		if (colfunc == R_DrawFogColumn_8
; 417  : 			|| (frontsector->extra_colormap && frontsector->extra_colormap->fog))

  004ce	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _colfunc, OFFSET _R_DrawFogColumn_8
  004d8	74 1f		 je	 SHORT $LN53@R_RenderMa
  004da	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  004df	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  004e6	74 13		 je	 SHORT $LN51@R_RenderMa
  004e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  004ed	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  004f3	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  004f7	74 02		 je	 SHORT $LN51@R_RenderMa
$LN53@R_RenderMa:

; 418  : 			;

  004f9	eb 42		 jmp	 SHORT $LN56@R_RenderMa
$LN51@R_RenderMa:

; 419  : 		else if (curline->v1->y == curline->v2->y)

  004fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00500	8b 08		 mov	 ecx, DWORD PTR [eax]
  00502	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  00508	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0050b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0050e	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00511	75 0b		 jne	 SHORT $LN54@R_RenderMa

; 420  : 			lightnum--;

  00513	8b 45 f4	 mov	 eax, DWORD PTR _lightnum$[ebp]
  00516	83 e8 01	 sub	 eax, 1
  00519	89 45 f4	 mov	 DWORD PTR _lightnum$[ebp], eax
  0051c	eb 1f		 jmp	 SHORT $LN56@R_RenderMa
$LN54@R_RenderMa:

; 421  : 		else if (curline->v1->x == curline->v2->x)

  0051e	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00523	8b 08		 mov	 ecx, DWORD PTR [eax]
  00525	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _curline
  0052b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0052e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00530	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00532	75 09		 jne	 SHORT $LN56@R_RenderMa

; 422  : 			lightnum++;

  00534	8b 45 f4	 mov	 eax, DWORD PTR _lightnum$[ebp]
  00537	83 c0 01	 add	 eax, 1
  0053a	89 45 f4	 mov	 DWORD PTR _lightnum$[ebp], eax
$LN56@R_RenderMa:

; 423  : 
; 424  : 		if (lightnum < 0)

  0053d	83 7d f4 00	 cmp	 DWORD PTR _lightnum$[ebp], 0
  00541	7d 16		 jge	 SHORT $LN57@R_RenderMa

; 425  : 			walllights = scalelight[0];

  00543	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00548	6b c8 00	 imul	 ecx, eax, 0
  0054b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  00551	89 0d 00 00 00
	00		 mov	 DWORD PTR _walllights, ecx
  00557	eb 2d		 jmp	 SHORT $LN60@R_RenderMa
$LN57@R_RenderMa:

; 426  : 		else if (lightnum >= LIGHTLEVELS)

  00559	83 7d f4 20	 cmp	 DWORD PTR _lightnum$[ebp], 32 ; 00000020H
  0055d	7c 16		 jl	 SHORT $LN59@R_RenderMa

; 427  : 			walllights = scalelight[LIGHTLEVELS - 1];

  0055f	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00564	6b c8 1f	 imul	 ecx, eax, 31
  00567	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  0056d	89 0d 00 00 00
	00		 mov	 DWORD PTR _walllights, ecx
  00573	eb 11		 jmp	 SHORT $LN60@R_RenderMa
$LN59@R_RenderMa:

; 428  : 		else
; 429  : 			walllights = scalelight[lightnum];

  00575	69 45 f4 c0 00
	00 00		 imul	 eax, DWORD PTR _lightnum$[ebp], 192
  0057c	05 00 00 00 00	 add	 eax, OFFSET _scalelight
  00581	a3 00 00 00 00	 mov	 DWORD PTR _walllights, eax
$LN60@R_RenderMa:

; 430  : 	}
; 431  : 
; 432  : 	maskedtexturecol = ds->maskedtexturecol;

  00586	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  00589	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0058c	89 0d 00 00 00
	00		 mov	 DWORD PTR _maskedtexturecol, ecx

; 433  : 
; 434  : 	mfloorclip = ds->sprbottomclip;

  00592	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  00595	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00598	89 0d 00 00 00
	00		 mov	 DWORD PTR _mfloorclip, ecx

; 435  : 	mceilingclip = ds->sprtopclip;

  0059e	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  005a1	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  005a4	89 0d 00 00 00
	00		 mov	 DWORD PTR _mceilingclip, ecx

; 436  : 
; 437  : 	if (frontsector->heightsec != -1)

  005aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  005af	83 78 68 ff	 cmp	 DWORD PTR [eax+104], -1
  005b3	74 17		 je	 SHORT $LN61@R_RenderMa

; 438  : 		front = &sectors[frontsector->heightsec];

  005b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  005ba	69 48 68 f8 00
	00 00		 imul	 ecx, DWORD PTR [eax+104], 248
  005c1	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _sectors
  005c7	89 4d d0	 mov	 DWORD PTR _front$[ebp], ecx
  005ca	eb 08		 jmp	 SHORT $LN62@R_RenderMa
$LN61@R_RenderMa:

; 439  : 	else
; 440  : 		front = frontsector;

  005cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  005d1	89 45 d0	 mov	 DWORD PTR _front$[ebp], eax
$LN62@R_RenderMa:

; 441  : 
; 442  : 	if (backsector->heightsec != -1)

  005d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  005d9	83 78 68 ff	 cmp	 DWORD PTR [eax+104], -1
  005dd	74 17		 je	 SHORT $LN63@R_RenderMa

; 443  : 		back = &sectors[backsector->heightsec];

  005df	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  005e4	69 48 68 f8 00
	00 00		 imul	 ecx, DWORD PTR [eax+104], 248
  005eb	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _sectors
  005f1	89 4d cc	 mov	 DWORD PTR _back$[ebp], ecx
  005f4	eb 08		 jmp	 SHORT $LN64@R_RenderMa
$LN63@R_RenderMa:

; 444  : 	else
; 445  : 		back = backsector;

  005f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _backsector
  005fb	89 45 cc	 mov	 DWORD PTR _back$[ebp], eax
$LN64@R_RenderMa:

; 446  : 
; 447  : 	if (ds->curline->sidedef->repeatcnt)

  005fe	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  00601	8b 08		 mov	 ecx, DWORD PTR [eax]
  00603	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00606	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  0060a	85 c0		 test	 eax, eax
  0060c	74 14		 je	 SHORT $LN65@R_RenderMa

; 448  : 		repeats = 1 + ds->curline->sidedef->repeatcnt;

  0060e	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  00611	8b 08		 mov	 ecx, DWORD PTR [eax]
  00613	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00616	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  0061a	83 c0 01	 add	 eax, 1
  0061d	89 45 c4	 mov	 DWORD PTR _repeats$[ebp], eax
  00620	eb 6e		 jmp	 SHORT $LN68@R_RenderMa
$LN65@R_RenderMa:

; 449  : 	else if (ldef->flags & ML_EFFECT5)

  00622	8b 45 d4	 mov	 eax, DWORD PTR _ldef$[ebp]
  00625	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00629	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  0062f	74 58		 je	 SHORT $LN67@R_RenderMa

; 450  : 	{
; 451  : 		fixed_t high, low;
; 452  : 
; 453  : 		if (front->ceilingheight > back->ceilingheight)

  00631	8b 45 d0	 mov	 eax, DWORD PTR _front$[ebp]
  00634	8b 4d cc	 mov	 ecx, DWORD PTR _back$[ebp]
  00637	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0063a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0063d	7e 0b		 jle	 SHORT $LN69@R_RenderMa

; 454  : 			high = back->ceilingheight;

  0063f	8b 45 cc	 mov	 eax, DWORD PTR _back$[ebp]
  00642	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00645	89 4d c0	 mov	 DWORD PTR _high$3[ebp], ecx
  00648	eb 09		 jmp	 SHORT $LN70@R_RenderMa
$LN69@R_RenderMa:

; 455  : 		else
; 456  : 			high = front->ceilingheight;

  0064a	8b 45 d0	 mov	 eax, DWORD PTR _front$[ebp]
  0064d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00650	89 4d c0	 mov	 DWORD PTR _high$3[ebp], ecx
$LN70@R_RenderMa:

; 457  : 
; 458  : 		if (front->floorheight > back->floorheight)

  00653	8b 45 d0	 mov	 eax, DWORD PTR _front$[ebp]
  00656	8b 4d cc	 mov	 ecx, DWORD PTR _back$[ebp]
  00659	8b 10		 mov	 edx, DWORD PTR [eax]
  0065b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0065d	7e 0a		 jle	 SHORT $LN71@R_RenderMa

; 459  : 			low = front->floorheight;

  0065f	8b 45 d0	 mov	 eax, DWORD PTR _front$[ebp]
  00662	8b 08		 mov	 ecx, DWORD PTR [eax]
  00664	89 4d bc	 mov	 DWORD PTR _low$2[ebp], ecx
  00667	eb 08		 jmp	 SHORT $LN72@R_RenderMa
$LN71@R_RenderMa:

; 460  : 		else
; 461  : 			low = back->floorheight;

  00669	8b 45 cc	 mov	 eax, DWORD PTR _back$[ebp]
  0066c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0066e	89 4d bc	 mov	 DWORD PTR _low$2[ebp], ecx
$LN72@R_RenderMa:

; 462  : 
; 463  : 		repeats = (high - low)/textureheight[texnum];

  00671	8b 45 c0	 mov	 eax, DWORD PTR _high$3[ebp]
  00674	2b 45 bc	 sub	 eax, DWORD PTR _low$2[ebp]
  00677	8b 4d f0	 mov	 ecx, DWORD PTR _texnum$[ebp]
  0067a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _textureheight
  00680	99		 cdq
  00681	f7 3c 8e	 idiv	 DWORD PTR [esi+ecx*4]
  00684	89 45 c4	 mov	 DWORD PTR _repeats$[ebp], eax

; 464  : 	}

  00687	eb 07		 jmp	 SHORT $LN68@R_RenderMa
$LN67@R_RenderMa:

; 465  : 	else
; 466  : 		repeats = 1;

  00689	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _repeats$[ebp], 1
$LN68@R_RenderMa:

; 467  : 
; 468  : 	for (times = 0; times < repeats; times++)

  00690	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _times$[ebp], 0
  00697	eb 09		 jmp	 SHORT $LN9@R_RenderMa
$LN7@R_RenderMa:
  00699	8b 45 c8	 mov	 eax, DWORD PTR _times$[ebp]
  0069c	83 c0 01	 add	 eax, 1
  0069f	89 45 c8	 mov	 DWORD PTR _times$[ebp], eax
$LN9@R_RenderMa:
  006a2	8b 45 c8	 mov	 eax, DWORD PTR _times$[ebp]
  006a5	3b 45 c4	 cmp	 eax, DWORD PTR _repeats$[ebp]
  006a8	0f 8d cd 04 00
	00		 jge	 $LN8@R_RenderMa

; 469  : 	{
; 470  : 		if (times > 0)

  006ae	83 7d c8 00	 cmp	 DWORD PTR _times$[ebp], 0
  006b2	7e 28		 jle	 SHORT $LN73@R_RenderMa

; 471  : 		{
; 472  : 			rw_scalestep = ds->scalestep;

  006b4	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  006b7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  006ba	89 0d 00 00 00
	00		 mov	 DWORD PTR _rw_scalestep, ecx

; 473  : 			spryscale = ds->scale1 + (x1 - ds->x1)*rw_scalestep;

  006c0	8b 45 08	 mov	 eax, DWORD PTR _ds$[ebp]
  006c3	8b 4d 0c	 mov	 ecx, DWORD PTR _x1$[ebp]
  006c6	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  006c9	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR _rw_scalestep
  006d0	8b 55 08	 mov	 edx, DWORD PTR _ds$[ebp]
  006d3	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  006d6	89 0d 00 00 00
	00		 mov	 DWORD PTR _spryscale, ecx
$LN73@R_RenderMa:

; 474  : 		}
; 475  : 
; 476  : 		if (curline->linedef->flags & ML_DONTPEGBOTTOM)

  006dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  006e1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006e4	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  006e8	83 e2 10	 and	 edx, 16			; 00000010H
  006eb	74 50		 je	 SHORT $LN74@R_RenderMa

; 477  : 		{
; 478  : 			dc_texturemid = front->floorheight > back->floorheight

  006ed	8b 45 d0	 mov	 eax, DWORD PTR _front$[ebp]
  006f0	8b 4d cc	 mov	 ecx, DWORD PTR _back$[ebp]
  006f3	8b 10		 mov	 edx, DWORD PTR [eax]
  006f5	3b 11		 cmp	 edx, DWORD PTR [ecx]
  006f7	7e 0d		 jle	 SHORT $LN94@R_RenderMa
  006f9	8b 45 d0	 mov	 eax, DWORD PTR _front$[ebp]
  006fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  006fe	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv317[ebp], ecx
  00704	eb 0b		 jmp	 SHORT $LN95@R_RenderMa
$LN94@R_RenderMa:
  00706	8b 55 cc	 mov	 edx, DWORD PTR _back$[ebp]
  00709	8b 02		 mov	 eax, DWORD PTR [edx]
  0070b	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv317[ebp], eax
$LN95@R_RenderMa:
  00711	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv317[ebp]
  00717	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_texturemid, ecx

; 479  : 				? front->floorheight : back->floorheight;
; 480  : 			dc_texturemid = dc_texturemid + textureheight[texnum] - viewz;

  0071d	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  00720	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  00726	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_texturemid
  0072c	03 14 81	 add	 edx, DWORD PTR [ecx+eax*4]
  0072f	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _viewz
  00735	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texturemid, edx

; 481  : 		}

  0073b	eb 44		 jmp	 SHORT $LN75@R_RenderMa
$LN74@R_RenderMa:

; 482  : 		else
; 483  : 		{
; 484  : 			dc_texturemid = front->ceilingheight < back->ceilingheight

  0073d	8b 45 d0	 mov	 eax, DWORD PTR _front$[ebp]
  00740	8b 4d cc	 mov	 ecx, DWORD PTR _back$[ebp]
  00743	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00746	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00749	7d 0e		 jge	 SHORT $LN96@R_RenderMa
  0074b	8b 45 d0	 mov	 eax, DWORD PTR _front$[ebp]
  0074e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00751	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv327[ebp], ecx
  00757	eb 0c		 jmp	 SHORT $LN97@R_RenderMa
$LN96@R_RenderMa:
  00759	8b 55 cc	 mov	 edx, DWORD PTR _back$[ebp]
  0075c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0075f	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv327[ebp], eax
$LN97@R_RenderMa:
  00765	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv327[ebp]
  0076b	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_texturemid, ecx

; 485  : 				? front->ceilingheight : back->ceilingheight;
; 486  : 			dc_texturemid = dc_texturemid - viewz;

  00771	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_texturemid
  00776	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewz
  0077c	a3 00 00 00 00	 mov	 DWORD PTR _dc_texturemid, eax
$LN75@R_RenderMa:

; 487  : 		}
; 488  : 		dc_texturemid += curline->sidedef->rowoffset;

  00781	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  00786	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00789	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_texturemid
  0078f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00792	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texturemid, edx

; 489  : 
; 490  : 		if (curline->linedef->flags & ML_DONTPEGBOTTOM)

  00798	a1 00 00 00 00	 mov	 eax, DWORD PTR _curline
  0079d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  007a0	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  007a4	83 e2 10	 and	 edx, 16			; 00000010H
  007a7	74 1e		 je	 SHORT $LN76@R_RenderMa

; 491  : 			dc_texturemid += (textureheight[texnum])*times;

  007a9	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  007ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  007b2	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  007b5	0f af 55 c8	 imul	 edx, DWORD PTR _times$[ebp]
  007b9	03 15 00 00 00
	00		 add	 edx, DWORD PTR _dc_texturemid
  007bf	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texturemid, edx
  007c5	eb 1c		 jmp	 SHORT $LN77@R_RenderMa
$LN76@R_RenderMa:

; 492  : 		else
; 493  : 			dc_texturemid -= (textureheight[texnum])*times;

  007c7	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  007ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  007d0	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  007d3	0f af 55 c8	 imul	 edx, DWORD PTR _times$[ebp]
  007d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_texturemid
  007dc	2b c2		 sub	 eax, edx
  007de	a3 00 00 00 00	 mov	 DWORD PTR _dc_texturemid, eax
$LN77@R_RenderMa:

; 494  : 
; 495  : 		dc_texheight = textureheight[texnum]>>FRACBITS;

  007e3	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  007e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  007ec	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  007ef	c1 fa 10	 sar	 edx, 16			; 00000010H
  007f2	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texheight, edx

; 496  : 
; 497  : 		// draw the columns
; 498  : 		for (dc_x = x1; dc_x <= x2; dc_x++)

  007f8	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  007fb	a3 00 00 00 00	 mov	 DWORD PTR _dc_x, eax
  00800	eb 0d		 jmp	 SHORT $LN12@R_RenderMa
$LN10@R_RenderMa:
  00802	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  00807	83 c0 01	 add	 eax, 1
  0080a	a3 00 00 00 00	 mov	 DWORD PTR _dc_x, eax
$LN12@R_RenderMa:
  0080f	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  00814	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  00817	0f 8f 59 03 00
	00		 jg	 $LN11@R_RenderMa

; 499  : 		{
; 500  : 			// calculate lighting
; 501  : 			if (maskedtexturecol[dc_x] != INT16_MAX)

  0081d	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  00822	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maskedtexturecol
  00828	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  0082c	81 fa ff 7f 00
	00		 cmp	 edx, 32767		; 00007fffH
  00832	0f 84 29 03 00
	00		 je	 $LN78@R_RenderMa

; 502  : 			{
; 503  : 				if (dc_numlights)

  00838	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dc_numlights, 0
  0083f	0f 84 65 02 00
	00		 je	 $LN79@R_RenderMa

; 504  : 				{
; 505  : 					lighttable_t **xwalllights;
; 506  : 
; 507  : 					sprbotscreen = INT32_MAX;

  00845	c7 05 00 00 00
	00 ff ff ff 7f	 mov	 DWORD PTR _sprbotscreen, 2147483647 ; 7fffffffH

; 508  : 					sprtopscreen = windowtop = (centeryfrac - FixedMul(dc_texturemid, spryscale));

  0084f	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00854	50		 push	 eax
  00855	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_texturemid
  0085b	51		 push	 ecx
  0085c	e8 00 00 00 00	 call	 _FixedMul
  00861	83 c4 08	 add	 esp, 8
  00864	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _centeryfrac
  0086a	2b d0		 sub	 edx, eax
  0086c	89 15 00 00 00
	00		 mov	 DWORD PTR _windowtop, edx
  00872	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowtop
  00877	a3 00 00 00 00	 mov	 DWORD PTR _sprtopscreen, eax

; 509  : 
; 510  : 					realbot = windowbottom = FixedMul(textureheight[texnum], spryscale) + sprtopscreen;

  0087c	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00881	50		 push	 eax
  00882	8b 4d f0	 mov	 ecx, DWORD PTR _texnum$[ebp]
  00885	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _textureheight
  0088b	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0088e	50		 push	 eax
  0088f	e8 00 00 00 00	 call	 _FixedMul
  00894	83 c4 08	 add	 esp, 8
  00897	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sprtopscreen
  0089d	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax
  008a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _windowbottom
  008a8	89 4d e4	 mov	 DWORD PTR _realbot$[ebp], ecx

; 511  : 					dc_iscale = 0xffffffffu / (unsigned)spryscale;

  008ab	83 c8 ff	 or	 eax, -1
  008ae	33 d2		 xor	 edx, edx
  008b0	f7 35 00 00 00
	00		 div	 DWORD PTR _spryscale
  008b6	a3 00 00 00 00	 mov	 DWORD PTR _dc_iscale, eax

; 512  : 
; 513  : 					// draw the texture
; 514  : 					col = (column_t *)((UINT8 *)R_GetColumn(texnum, maskedtexturecol[dc_x]) - 3);

  008bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  008c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maskedtexturecol
  008c6	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  008ca	52		 push	 edx
  008cb	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  008ce	50		 push	 eax
  008cf	e8 00 00 00 00	 call	 _R_GetColumn
  008d4	83 c4 08	 add	 esp, 8
  008d7	83 e8 03	 sub	 eax, 3
  008da	89 45 f8	 mov	 DWORD PTR _col$[ebp], eax

; 515  : 
; 516  : 					for (i = 0; i < dc_numlights; i++)

  008dd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  008e4	eb 09		 jmp	 SHORT $LN15@R_RenderMa
$LN13@R_RenderMa:
  008e6	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  008e9	83 c0 01	 add	 eax, 1
  008ec	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN15@R_RenderMa:
  008ef	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  008f2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  008f8	0f 8d 78 01 00
	00		 jge	 $LN14@R_RenderMa

; 517  : 					{
; 518  : 						rlight = &dc_lightlist[i];

  008fe	6b 45 ec 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00902	03 05 00 00 00
	00		 add	 eax, DWORD PTR _dc_lightlist
  00908	89 45 dc	 mov	 DWORD PTR _rlight$[ebp], eax

; 519  : 
; 520  : 						if ((rlight->flags & FF_NOSHADE))

  0090b	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  0090e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00911	83 e1 40	 and	 ecx, 64			; 00000040H
  00914	74 02		 je	 SHORT $LN80@R_RenderMa

; 521  : 							continue;

  00916	eb ce		 jmp	 SHORT $LN13@R_RenderMa
$LN80@R_RenderMa:

; 522  : 
; 523  : 						if (rlight->lightnum < 0)

  00918	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  0091b	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0091f	7d 13		 jge	 SHORT $LN81@R_RenderMa

; 524  : 							xwalllights = scalelight[0];

  00921	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00926	6b c8 00	 imul	 ecx, eax, 0
  00929	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  0092f	89 4d b8	 mov	 DWORD PTR _xwalllights$1[ebp], ecx
  00932	eb 2f		 jmp	 SHORT $LN84@R_RenderMa
$LN81@R_RenderMa:

; 525  : 						else if (rlight->lightnum >= LIGHTLEVELS)

  00934	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00937	83 78 20 20	 cmp	 DWORD PTR [eax+32], 32	; 00000020H
  0093b	7c 13		 jl	 SHORT $LN83@R_RenderMa

; 526  : 							xwalllights = scalelight[LIGHTLEVELS-1];

  0093d	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00942	6b c8 1f	 imul	 ecx, eax, 31
  00945	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  0094b	89 4d b8	 mov	 DWORD PTR _xwalllights$1[ebp], ecx
  0094e	eb 13		 jmp	 SHORT $LN84@R_RenderMa
$LN83@R_RenderMa:

; 527  : 						else
; 528  : 							xwalllights = scalelight[rlight->lightnum];

  00950	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00953	69 48 20 c0 00
	00 00		 imul	 ecx, DWORD PTR [eax+32], 192
  0095a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _scalelight
  00960	89 4d b8	 mov	 DWORD PTR _xwalllights$1[ebp], ecx
$LN84@R_RenderMa:

; 529  : 
; 530  : 						pindex = spryscale>>LIGHTSCALESHIFT;

  00963	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00968	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0096b	89 45 fc	 mov	 DWORD PTR _pindex$[ebp], eax

; 531  : 
; 532  : 						if (pindex >= MAXLIGHTSCALE)

  0096e	83 7d fc 30	 cmp	 DWORD PTR _pindex$[ebp], 48 ; 00000030H
  00972	72 07		 jb	 SHORT $LN85@R_RenderMa

; 533  : 							pindex = MAXLIGHTSCALE - 1;

  00974	c7 45 fc 2f 00
	00 00		 mov	 DWORD PTR _pindex$[ebp], 47 ; 0000002fH
$LN85@R_RenderMa:

; 534  : 
; 535  : 						if (rlight->extra_colormap)

  0097b	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  0097e	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00982	74 20		 je	 SHORT $LN86@R_RenderMa

; 536  : 							rlight->rcolormap = rlight->extra_colormap->colormap + (xwalllights[pindex] - colormaps);

  00984	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00987	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0098a	8b 55 fc	 mov	 edx, DWORD PTR _pindex$[ebp]
  0098d	8b 45 b8	 mov	 eax, DWORD PTR _xwalllights$1[ebp]
  00990	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00993	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _colormaps
  00999	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  0099c	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  0099f	89 50 18	 mov	 DWORD PTR [eax+24], edx
  009a2	eb 0f		 jmp	 SHORT $LN87@R_RenderMa
$LN86@R_RenderMa:

; 537  : 						else
; 538  : 							rlight->rcolormap = xwalllights[pindex];

  009a4	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  009a7	8b 4d fc	 mov	 ecx, DWORD PTR _pindex$[ebp]
  009aa	8b 55 b8	 mov	 edx, DWORD PTR _xwalllights$1[ebp]
  009ad	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  009b0	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN87@R_RenderMa:

; 539  : 
; 540  : 						rlight->height += rlight->heightstep;

  009b3	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  009b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  009b8	8b 55 dc	 mov	 edx, DWORD PTR _rlight$[ebp]
  009bb	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  009be	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  009c1	89 08		 mov	 DWORD PTR [eax], ecx

; 541  : 						height = rlight->height;

  009c3	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  009c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  009c8	89 4d e8	 mov	 DWORD PTR _height$[ebp], ecx

; 542  : 
; 543  : 						if (height <= windowtop)

  009cb	8b 45 e8	 mov	 eax, DWORD PTR _height$[ebp]
  009ce	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _windowtop
  009d4	7f 11		 jg	 SHORT $LN88@R_RenderMa

; 544  : 						{
; 545  : 							dc_colormap = rlight->rcolormap;

  009d6	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  009d9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  009dc	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, ecx

; 546  : 							continue;

  009e2	e9 ff fe ff ff	 jmp	 $LN13@R_RenderMa
$LN88@R_RenderMa:

; 547  : 						}
; 548  : 
; 549  : 						windowbottom = height;

  009e7	8b 45 e8	 mov	 eax, DWORD PTR _height$[ebp]
  009ea	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax

; 550  : 						if (windowbottom >= realbot)

  009ef	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowbottom
  009f4	3b 45 e4	 cmp	 eax, DWORD PTR _realbot$[ebp]
  009f7	7c 55		 jl	 SHORT $LN89@R_RenderMa

; 551  : 						{
; 552  : 							windowbottom = realbot;

  009f9	8b 45 e4	 mov	 eax, DWORD PTR _realbot$[ebp]
  009fc	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax

; 553  : 							colfunc_2s(col);

  00a01	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00a04	50		 push	 eax
  00a05	ff 55 d8	 call	 DWORD PTR _colfunc_2s$[ebp]
  00a08	83 c4 04	 add	 esp, 4

; 554  : 							for (i++; i < dc_numlights; i++)

  00a0b	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00a0e	83 c0 01	 add	 eax, 1
  00a11	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  00a14	eb 09		 jmp	 SHORT $LN18@R_RenderMa
$LN16@R_RenderMa:
  00a16	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00a19	83 c0 01	 add	 eax, 1
  00a1c	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN18@R_RenderMa:
  00a1f	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00a22	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_numlights
  00a28	7d 1f		 jge	 SHORT $LN17@R_RenderMa

; 555  : 							{
; 556  : 								rlight = &dc_lightlist[i];

  00a2a	6b 45 ec 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00a2e	03 05 00 00 00
	00		 add	 eax, DWORD PTR _dc_lightlist
  00a34	89 45 dc	 mov	 DWORD PTR _rlight$[ebp], eax

; 557  : 								rlight->height += rlight->heightstep;

  00a37	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00a3a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a3c	8b 55 dc	 mov	 edx, DWORD PTR _rlight$[ebp]
  00a3f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00a42	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00a45	89 08		 mov	 DWORD PTR [eax], ecx

; 558  : 							}

  00a47	eb cd		 jmp	 SHORT $LN16@R_RenderMa
$LN17@R_RenderMa:

; 559  : 
; 560  : 							continue;

  00a49	e9 98 fe ff ff	 jmp	 $LN13@R_RenderMa
$LN89@R_RenderMa:

; 561  : 						}
; 562  : 						colfunc_2s(col);

  00a4e	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00a51	50		 push	 eax
  00a52	ff 55 d8	 call	 DWORD PTR _colfunc_2s$[ebp]
  00a55	83 c4 04	 add	 esp, 4

; 563  : 						windowtop = windowbottom + 1;

  00a58	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowbottom
  00a5d	83 c0 01	 add	 eax, 1
  00a60	a3 00 00 00 00	 mov	 DWORD PTR _windowtop, eax

; 564  : 						dc_colormap = rlight->rcolormap;

  00a65	8b 45 dc	 mov	 eax, DWORD PTR _rlight$[ebp]
  00a68	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00a6b	89 0d 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, ecx

; 565  : 					}

  00a71	e9 70 fe ff ff	 jmp	 $LN13@R_RenderMa
$LN14@R_RenderMa:

; 566  : 					windowbottom = realbot;

  00a76	8b 45 e4	 mov	 eax, DWORD PTR _realbot$[ebp]
  00a79	a3 00 00 00 00	 mov	 DWORD PTR _windowbottom, eax

; 567  : 					if (windowtop < windowbottom)

  00a7e	a1 00 00 00 00	 mov	 eax, DWORD PTR _windowtop
  00a83	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _windowbottom
  00a89	7d 0a		 jge	 SHORT $LN90@R_RenderMa

; 568  : 						colfunc_2s(col);

  00a8b	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00a8e	50		 push	 eax
  00a8f	ff 55 d8	 call	 DWORD PTR _colfunc_2s$[ebp]
  00a92	83 c4 04	 add	 esp, 4
$LN90@R_RenderMa:

; 569  : 
; 570  : 					spryscale += rw_scalestep;

  00a95	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00a9a	03 05 00 00 00
	00		 add	 eax, DWORD PTR _rw_scalestep
  00aa0	a3 00 00 00 00	 mov	 DWORD PTR _spryscale, eax

; 571  : 					continue;

  00aa5	e9 58 fd ff ff	 jmp	 $LN10@R_RenderMa
$LN79@R_RenderMa:

; 572  : 				}
; 573  : 
; 574  : 				// calculate lighting
; 575  : 				pindex = spryscale>>LIGHTSCALESHIFT;

  00aaa	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00aaf	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00ab2	89 45 fc	 mov	 DWORD PTR _pindex$[ebp], eax

; 576  : 
; 577  : 				if (pindex >= MAXLIGHTSCALE)

  00ab5	83 7d fc 30	 cmp	 DWORD PTR _pindex$[ebp], 48 ; 00000030H
  00ab9	72 07		 jb	 SHORT $LN91@R_RenderMa

; 578  : 					pindex = MAXLIGHTSCALE - 1;

  00abb	c7 45 fc 2f 00
	00 00		 mov	 DWORD PTR _pindex$[ebp], 47 ; 0000002fH
$LN91@R_RenderMa:

; 579  : 
; 580  : 				dc_colormap = walllights[pindex];

  00ac2	8b 45 fc	 mov	 eax, DWORD PTR _pindex$[ebp]
  00ac5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _walllights
  00acb	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00ace	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, edx

; 581  : 
; 582  : 				if (frontsector->extra_colormap)

  00ad4	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00ad9	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00ae0	74 20		 je	 SHORT $LN92@R_RenderMa

; 583  : 					dc_colormap = frontsector->extra_colormap->colormap + (dc_colormap - colormaps);

  00ae2	a1 00 00 00 00	 mov	 eax, DWORD PTR _frontsector
  00ae7	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00aed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _dc_colormap
  00af3	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _colormaps
  00af9	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  00afc	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_colormap, edx
$LN92@R_RenderMa:

; 584  : 
; 585  : 				sprtopscreen = centeryfrac - FixedMul(dc_texturemid, spryscale);

  00b02	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00b07	50		 push	 eax
  00b08	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _dc_texturemid
  00b0e	51		 push	 ecx
  00b0f	e8 00 00 00 00	 call	 _FixedMul
  00b14	83 c4 08	 add	 esp, 8
  00b17	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _centeryfrac
  00b1d	2b d0		 sub	 edx, eax
  00b1f	89 15 00 00 00
	00		 mov	 DWORD PTR _sprtopscreen, edx

; 586  : 				dc_iscale = 0xffffffffu / (unsigned)spryscale;

  00b25	83 c8 ff	 or	 eax, -1
  00b28	33 d2		 xor	 edx, edx
  00b2a	f7 35 00 00 00
	00		 div	 DWORD PTR _spryscale
  00b30	a3 00 00 00 00	 mov	 DWORD PTR _dc_iscale, eax

; 587  : 
; 588  : 				// draw the texture
; 589  : 				col = (column_t *)((UINT8 *)R_GetColumn(texnum, maskedtexturecol[dc_x]) - 3);

  00b35	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_x
  00b3a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maskedtexturecol
  00b40	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  00b44	52		 push	 edx
  00b45	8b 45 f0	 mov	 eax, DWORD PTR _texnum$[ebp]
  00b48	50		 push	 eax
  00b49	e8 00 00 00 00	 call	 _R_GetColumn
  00b4e	83 c4 08	 add	 esp, 8
  00b51	83 e8 03	 sub	 eax, 3
  00b54	89 45 f8	 mov	 DWORD PTR _col$[ebp], eax

; 590  : 
; 591  : #ifdef POLYOBJECTS_PLANES
; 592  : 				if (curline->dontrenderme && curline->polyseg && (curline->polyseg->flags & POF_RENDERPLANES))
; 593  : 				{
; 594  : 					fixed_t my_topscreen;
; 595  : 					fixed_t my_bottomscreen;
; 596  : 					fixed_t my_yl, my_yh;
; 597  : 
; 598  : 					my_topscreen = sprtopscreen + spryscale*col->topdelta;
; 599  : 					my_bottomscreen = sprbotscreen == INT32_MAX ? my_topscreen + spryscale*col->length
; 600  : 					                                         : sprbotscreen + spryscale*col->length;
; 601  : 
; 602  : 					my_yl = (my_topscreen+FRACUNIT-1)>>FRACBITS;
; 603  : 					my_yh = (my_bottomscreen-1)>>FRACBITS;
; 604  : 	//				CONS_Printf("my_topscreen: %d\nmy_bottomscreen: %d\nmy_yl: %d\nmy_yh: %d\n", my_topscreen, my_bottomscreen, my_yl, my_yh);
; 605  : 
; 606  : 					if (numffloors)
; 607  : 					{
; 608  : 						INT32 top = my_yl;
; 609  : 						INT32 bottom = my_yh;
; 610  : 
; 611  : 						for (i = 0; i < numffloors; i++)
; 612  : 						{
; 613  : 							if (!ffloor[i].polyobj)
; 614  : 								continue;
; 615  : 
; 616  : 							if (ffloor[i].height < viewz)
; 617  : 							{
; 618  : 								INT32 top_w = ffloor[i].plane->top[dc_x];
; 619  : 
; 620  : 	//							CONS_Printf("Leveltime : %d\n", leveltime);
; 621  : 	//							CONS_Printf("Top is %d, top_w is %d\n", top, top_w);
; 622  : 								if (top_w < top)
; 623  : 								{
; 624  : 									ffloor[i].plane->top[dc_x] = (INT16)top;
; 625  : 									ffloor[i].plane->picnum = 0;
; 626  : 								}
; 627  : 	//							CONS_Printf("top_w is now %d\n", ffloor[i].plane->top[dc_x]);
; 628  : 							}
; 629  : 							else if (ffloor[i].height > viewz)
; 630  : 							{
; 631  : 								INT32 bottom_w = ffloor[i].plane->bottom[dc_x];
; 632  : 
; 633  : 								if (bottom_w > bottom)
; 634  : 								{
; 635  : 									ffloor[i].plane->bottom[dc_x] = (INT16)bottom;
; 636  : 									ffloor[i].plane->picnum = 0;
; 637  : 								}
; 638  : 							}
; 639  : 						}
; 640  : 					}
; 641  : 				}
; 642  : 				else
; 643  : #endif
; 644  : 					colfunc_2s(col);

  00b57	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00b5a	50		 push	 eax
  00b5b	ff 55 d8	 call	 DWORD PTR _colfunc_2s$[ebp]
  00b5e	83 c4 04	 add	 esp, 4
$LN78@R_RenderMa:

; 645  : 			}
; 646  : 			spryscale += rw_scalestep;

  00b61	a1 00 00 00 00	 mov	 eax, DWORD PTR _spryscale
  00b66	03 05 00 00 00
	00		 add	 eax, DWORD PTR _rw_scalestep
  00b6c	a3 00 00 00 00	 mov	 DWORD PTR _spryscale, eax

; 647  : 		}

  00b71	e9 8c fc ff ff	 jmp	 $LN10@R_RenderMa
$LN11@R_RenderMa:

; 648  : 	}

  00b76	e9 1e fb ff ff	 jmp	 $LN7@R_RenderMa
$LN8@R_RenderMa:

; 649  : 	colfunc = wallcolfunc;

  00b7b	a1 00 00 00 00	 mov	 eax, DWORD PTR _wallcolfunc
  00b80	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax
$LN1@R_RenderMa:

; 650  : }

  00b85	5f		 pop	 edi
  00b86	5e		 pop	 esi
  00b87	5b		 pop	 ebx
  00b88	8b e5		 mov	 esp, ebp
  00b8a	5d		 pop	 ebp
  00b8b	c3		 ret	 0
$LN98@R_RenderMa:
  00b8c	00 00 00 00	 DD	 $LN19@R_RenderMa
  00b90	00 00 00 00	 DD	 $LN20@R_RenderMa
  00b94	00 00 00 00	 DD	 $LN21@R_RenderMa
  00b98	00 00 00 00	 DD	 $LN22@R_RenderMa
  00b9c	00 00 00 00	 DD	 $LN23@R_RenderMa
  00ba0	00 00 00 00	 DD	 $LN24@R_RenderMa
  00ba4	00 00 00 00	 DD	 $LN25@R_RenderMa
  00ba8	00 00 00 00	 DD	 $LN26@R_RenderMa
  00bac	00 00 00 00	 DD	 $LN27@R_RenderMa
  00bb0	00 00 00 00	 DD	 $LN28@R_RenderMa
_R_RenderMaskedSegRange ENDP
_TEXT	ENDS
END
