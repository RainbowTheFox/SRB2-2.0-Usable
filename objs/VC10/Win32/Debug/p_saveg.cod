; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\p_saveg.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_savedata:BYTE:014H
COMM	_save_p:DWORD
_DATA	ENDS
PUBLIC	_P_SaveGame
PUBLIC	_P_SaveNetGame
PUBLIC	_P_LoadGame
PUBLIC	_P_LoadNetGame
PUBLIC	??_C@_0DL@HBJMEMDC@Invalid?5sector?5number?5?$CFu?5from?5s@ ; `string'
PUBLIC	??_C@_0CD@KCKDBDPK@Invalid?5line?5number?5?$CFu?5from?5ser@ ; `string'
PUBLIC	??_C@_0M@FAFIBFOK@?$ACnot?5found?6@		; `string'
PUBLIC	??_C@_0L@KMDBPMPG@not?5found?6@			; `string'
PUBLIC	??_C@_0CL@GDNAMFKP@found?5mobj?5with?5unknown?5map?5thi@ ; `string'
PUBLIC	??_C@_0CN@BPDAAKJ@found?5mobj?5with?5unknown?5map?5thi@ ; `string'
PUBLIC	??_C@_0BD@MCNAHAPO@Savegame?5corrupted@		; `string'
PUBLIC	??_C@_0DD@GPDFCACP@P_UnarchiveSpecials?3?5Unknown?5tc@ ; `string'
PUBLIC	??_C@_0DF@BDLHMDIB@P_UnArchivePolyObjects?3?5polyobj@ ; `string'
PUBLIC	??_C@_0BI@EFKODFJI@tracer?5not?5found?5on?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BI@CNJDGCEA@target?5not?5found?5on?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BJ@NACOAMLD@capsule?5not?5found?5on?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BH@GBCONNNL@axis1?5not?5found?5on?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BH@MCHIFLHC@axis2?5not?5found?5on?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BO@FBIHGGPL@awayviewmobj?5not?5found?5on?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CF@JHAPBDAC@Save?5game?5not?5for?5this?5modifica@ ; `string'
PUBLIC	??_C@_0FB@MGJCGEIE@This?5save?5file?5is?5for?5a?5particu@ ; `string'
PUBLIC	??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@		; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_fflush:PROC
EXTRN	_fputs:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_COM_BufAddText:PROC
EXTRN	_CV_SaveNetVars:PROC
EXTRN	_CV_LoadNetVars:PROC
EXTRN	_W_CacheLumpNum:PROC
EXTRN	_P_SpawnHoopsAndRings:PROC
EXTRN	_G_BuildMapName:PROC
EXTRN	_G_DeferedInitNew:PROC
EXTRN	_G_SetGamestate:PROC
EXTRN	_P_GetRandIndex:PROC
EXTRN	_P_SetRandIndex:PROC
EXTRN	_P_SetTarget:PROC
EXTRN	_Polyobj_GetForNum:PROC
EXTRN	_Polyobj_MoveOnLoad:PROC
EXTRN	_T_PolyObjRotate:PROC
EXTRN	_T_PolyObjMove:PROC
EXTRN	_T_PolyObjWaypoint:PROC
EXTRN	_T_PolyDoorSlide:PROC
EXTRN	_T_PolyDoorSwing:PROC
EXTRN	_T_PolyObjFlag:PROC
EXTRN	_P_InitThinkers:PROC
EXTRN	_P_AddThinker:PROC
EXTRN	_P_RemoveSavegameMobj:PROC
EXTRN	_P_MobjThinker:PROC
EXTRN	_P_SetThingPosition:PROC
EXTRN	_P_SwitchWeather:PROC
EXTRN	_P_ChangeSectorTag:PROC
EXTRN	_T_FireFlicker:PROC
EXTRN	_T_LightningFlash:PROC
EXTRN	_T_StrobeFlash:PROC
EXTRN	_T_Glow:PROC
EXTRN	_T_LightFade:PROC
EXTRN	_T_CrushCeiling:PROC
EXTRN	_T_MoveCeiling:PROC
EXTRN	_T_MoveFloor:PROC
EXTRN	_T_MoveElevator:PROC
EXTRN	_T_ContinuousFalling:PROC
EXTRN	_T_BounceCheese:PROC
EXTRN	_T_StartCrumble:PROC
EXTRN	_T_MarioBlock:PROC
EXTRN	_T_SpikeSector:PROC
EXTRN	_T_FloatSector:PROC
EXTRN	_T_BridgeThinker:PROC
EXTRN	_T_ThwompSector:PROC
EXTRN	_T_NoEnemiesSector:PROC
EXTRN	_T_EachTimeThinker:PROC
EXTRN	_T_CameraScanner:PROC
EXTRN	_T_RaiseSector:PROC
EXTRN	_T_ExecutorDelay:PROC
EXTRN	_T_Scroll:PROC
EXTRN	_T_LaserFlash:PROC
EXTRN	_T_Friction:PROC
EXTRN	_T_Disappear:PROC
EXTRN	_T_Pusher:PROC
EXTRN	_P_GetPushThing:PROC
EXTRN	_P_AddLevelFlat:PROC
EXTRN	_P_SetupLevelSky:PROC
EXTRN	_P_SetupLevel:PROC
EXTRN	_R_TextureNumForName:PROC
EXTRN	_R_CheckTextureNumForName:PROC
EXTRN	_SetPlayerSkinByNum:PROC
EXTRN	_Y_EndIntermission:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_MallocAlign:PROC
EXTRN	_Z_CallocAlign:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_gamestate:DWORD
EXTRN	_devparm:DWORD
EXTRN	_states:BYTE
EXTRN	_mobjinfo:BYTE
EXTRN	_playerstatetics:BYTE
EXTRN	_gamemap:WORD
EXTRN	_globalweather:BYTE
EXTRN	_curWeather:DWORD
EXTRN	_lastmapsaved:WORD
EXTRN	_gamecomplete:DWORD
EXTRN	_modifiedgame:DWORD
EXTRN	_paused:BYTE
EXTRN	_consoleplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_spstage_end:WORD
EXTRN	_countdowntimer:DWORD
EXTRN	_countdowntimeup:BYTE
EXTRN	_totalrings:DWORD
EXTRN	_lastmap:WORD
EXTRN	_redflag:DWORD
EXTRN	_blueflag:DWORD
EXTRN	_rflagpoint:DWORD
EXTRN	_bflagpoint:DWORD
EXTRN	_emeralds:WORD
EXTRN	_token:DWORD
EXTRN	_tokenlist:DWORD
EXTRN	_sstimer:DWORD
EXTRN	_bluescore:DWORD
EXTRN	_redscore:DWORD
EXTRN	_countdown:DWORD
EXTRN	_countdown2:DWORD
EXTRN	_gravity:DWORD
EXTRN	_autobalance:WORD
EXTRN	_teamscramble:WORD
EXTRN	_scrambleplayers:ZWORD
EXTRN	_scrambleteams:ZWORD
EXTRN	_scrambletotal:WORD
EXTRN	_scramblecount:WORD
EXTRN	_matchtype:DWORD
EXTRN	_tagtype:DWORD
EXTRN	_hidetime:DWORD
EXTRN	_debugfile:DWORD
EXTRN	_timeattackfolder:ZWORD
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_localangle:DWORD
EXTRN	_localangle2:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_PolyObjects:DWORD
EXTRN	_numPolyObjects:DWORD
EXTRN	_thinkercap:BYTE
EXTRN	_itemrespawnque:BYTE
EXTRN	_itemrespawntime:BYTE
EXTRN	_iquehead:DWORD
EXTRN	_iquetail:DWORD
EXTRN	_cv_viewheight:BYTE
EXTRN	_lastloadedmaplumpnum:DWORD
EXTRN	_levelflats:DWORD
EXTRN	_nummapthings:DWORD
EXTRN	_mapthings:DWORD
EXTRN	_numsectors:DWORD
EXTRN	_sectors:DWORD
EXTRN	_numlines:DWORD
EXTRN	_lines:DWORD
EXTRN	_sides:DWORD
EXTRN	_levelskynum:DWORD
EXTRN	_globallevelskynum:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@
CONST	SEGMENT
??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@ DB 'dummyconsvar 1', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@MGJCGEIE@This?5save?5file?5is?5for?5a?5particu@
CONST	SEGMENT
??_C@_0FB@MGJCGEIE@This?5save?5file?5is?5for?5a?5particu@ DB 'This save f'
	DB	'ile is for a particular mod, it cannot be used with the regul'
	DB	'ar game.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JHAPBDAC@Save?5game?5not?5for?5this?5modifica@
CONST	SEGMENT
??_C@_0CF@JHAPBDAC@Save?5game?5not?5for?5this?5modifica@ DB 'Save game no'
	DB	't for this modification.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FBIHGGPL@awayviewmobj?5not?5found?5on?5?$CFd?6@
CONST	SEGMENT
??_C@_0BO@FBIHGGPL@awayviewmobj?5not?5found?5on?5?$CFd?6@ DB 'awayviewmob'
	DB	'j not found on %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MCHIFLHC@axis2?5not?5found?5on?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@MCHIFLHC@axis2?5not?5found?5on?5?$CFd?6@ DB 'axis2 not found on'
	DB	' %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GBCONNNL@axis1?5not?5found?5on?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@GBCONNNL@axis1?5not?5found?5on?5?$CFd?6@ DB 'axis1 not found on'
	DB	' %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NACOAMLD@capsule?5not?5found?5on?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@NACOAMLD@capsule?5not?5found?5on?5?$CFd?6@ DB 'capsule not foun'
	DB	'd on %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CNJDGCEA@target?5not?5found?5on?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@CNJDGCEA@target?5not?5found?5on?5?$CFd?6@ DB 'target not found '
	DB	'on %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFKODFJI@tracer?5not?5found?5on?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@EFKODFJI@tracer?5not?5found?5on?5?$CFd?6@ DB 'tracer not found '
	DB	'on %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@BDLHMDIB@P_UnArchivePolyObjects?3?5polyobj@
CONST	SEGMENT
??_C@_0DF@BDLHMDIB@P_UnArchivePolyObjects?3?5polyobj@ DB 'P_UnArchivePoly'
	DB	'Objects: polyobj count inconsistency', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GPDFCACP@P_UnarchiveSpecials?3?5Unknown?5tc@
CONST	SEGMENT
??_C@_0DD@GPDFCACP@P_UnarchiveSpecials?3?5Unknown?5tc@ DB 'P_UnarchiveSpe'
	DB	'cials: Unknown tclass %d in savegame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MCNAHAPO@Savegame?5corrupted@
CONST	SEGMENT
??_C@_0BD@MCNAHAPO@Savegame?5corrupted@ DB 'Savegame corrupted', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BPDAAKJ@found?5mobj?5with?5unknown?5map?5thi@
CONST	SEGMENT
??_C@_0CN@BPDAAKJ@found?5mobj?5with?5unknown?5map?5thi@ DB 'found mobj wi'
	DB	'th unknown map thing type NULL', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GDNAMFKP@found?5mobj?5with?5unknown?5map?5thi@
CONST	SEGMENT
??_C@_0CL@GDNAMFKP@found?5mobj?5with?5unknown?5map?5thi@ DB 'found mobj w'
	DB	'ith unknown map thing type %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KMDBPMPG@not?5found?6@
CONST	SEGMENT
??_C@_0L@KMDBPMPG@not?5found?6@ DB 'not found', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FAFIBFOK@?$ACnot?5found?6@
CONST	SEGMENT
??_C@_0M@FAFIBFOK@?$ACnot?5found?6@ DB 02H, 'not found', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KCKDBDPK@Invalid?5line?5number?5?$CFu?5from?5ser@
CONST	SEGMENT
??_C@_0CD@KCKDBDPK@Invalid?5line?5number?5?$CFu?5from?5ser@ DB 'Invalid l'
	DB	'ine number %u from server', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@HBJMEMDC@Invalid?5sector?5number?5?$CFu?5from?5s@
CONST	SEGMENT
??_C@_0DL@HBJMEMDC@Invalid?5sector?5number?5?$CFu?5from?5s@ DB 'Invalid s'
	DB	'ector number %u from server (expected end at %Iu)', 00H ; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	01b1H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetUnArchiveMisc
_TEXT	SEGMENT
tv67 = -80						; size = 4
tv78 = -80						; size = 4
tv164 = -80						; size = 4
tv156 = -77						; size = 1
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_pig$ = -4						; size = 4
_P_NetUnArchiveMisc PROC				; COMDAT

; 2795 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2796 : 	UINT32 pig;
; 2797 : 	INT32 i, j;
; 2798 : 
; 2799 : 	gamemap = READINT16(save_p);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	66 89 0d 00 00
	00 00		 mov	 WORD PTR _gamemap, cx
  00018	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0001e	83 c2 02	 add	 edx, 2
  00021	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2800 : 	G_SetGamestate(READINT16(save_p));

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0002f	89 4d b0	 mov	 DWORD PTR tv67[ebp], ecx
  00032	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00038	83 c2 02	 add	 edx, 2
  0003b	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00041	8b 45 b0	 mov	 eax, DWORD PTR tv67[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _G_SetGamestate
  0004a	83 c4 04	 add	 esp, 4

; 2801 : 
; 2802 : 	tokenlist = READUINT32(save_p);

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	89 0d 00 00 00
	00		 mov	 DWORD PTR _tokenlist, ecx
  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00060	83 c2 04	 add	 edx, 4
  00063	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2803 : 
; 2804 : 	pig = READUINT32(save_p);

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	89 4d fc	 mov	 DWORD PTR _pig$[ebp], ecx
  00073	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00079	83 c2 04	 add	 edx, 4
  0007c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2805 : 
; 2806 : 	for (i = 0; i < MAXPLAYERS; i++)

  00082	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN4@P_NetUnArc
$LN2@P_NetUnArc:
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_NetUnArc:
  00094	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00098	7d 3f		 jge	 SHORT $LN3@P_NetUnArc

; 2807 : 	{
; 2808 : 		playeringame[i] = (pig & (1<<i)) != 0;

  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000a2	d3 e0		 shl	 eax, cl
  000a4	23 45 fc	 and	 eax, DWORD PTR _pig$[ebp]
  000a7	74 09		 je	 SHORT $LN20@P_NetUnArc
  000a9	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  000b0	eb 07		 jmp	 SHORT $LN21@P_NetUnArc
$LN20@P_NetUnArc:
  000b2	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN21@P_NetUnArc:
  000b9	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000bc	8b 55 b0	 mov	 edx, DWORD PTR tv78[ebp]
  000bf	89 14 8d 00 00
	00 00		 mov	 DWORD PTR _playeringame[ecx*4], edx

; 2809 : 		players[i].playerstate = PST_REBORN;

  000c6	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000cd	c7 80 04 00 00
	00 02 00 00 00	 mov	 DWORD PTR _players[eax+4], 2

; 2810 : 	}

  000d7	eb b2		 jmp	 SHORT $LN2@P_NetUnArc
$LN3@P_NetUnArc:

; 2811 : 
; 2812 : 	if (!P_SetupLevel(gamemap, true))

  000d9	6a 01		 push	 1
  000db	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _P_SetupLevel
  000e8	83 c4 08	 add	 esp, 8
  000eb	85 c0		 test	 eax, eax
  000ed	75 07		 jne	 SHORT $LN17@P_NetUnArc

; 2813 : 		return false;

  000ef	33 c0		 xor	 eax, eax
  000f1	e9 5e 03 00 00	 jmp	 $LN1@P_NetUnArc
$LN17@P_NetUnArc:

; 2814 : 	// the "\2" instead of NULL is a hackishly hackish hack to avoid loading precipitation
; 2815 : 
; 2816 : 	for (i = 0; i < MAXPLAYERS; i++)

  000f6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000fd	eb 09		 jmp	 SHORT $LN7@P_NetUnArc
$LN5@P_NetUnArc:
  000ff	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00102	83 c0 01	 add	 eax, 1
  00105	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@P_NetUnArc:
  00108	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0010c	7d 42		 jge	 SHORT $LN6@P_NetUnArc

; 2817 : 		for (j = 0; j < S_PLAY_SUPERTRANS9+1; j++)

  0010e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00115	eb 09		 jmp	 SHORT $LN10@P_NetUnArc
$LN8@P_NetUnArc:
  00117	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  0011a	83 c0 01	 add	 eax, 1
  0011d	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$LN10@P_NetUnArc:
  00120	83 7d f4 3a	 cmp	 DWORD PTR _j$[ebp], 58	; 0000003aH
  00124	7d 28		 jge	 SHORT $LN9@P_NetUnArc

; 2818 : 			playerstatetics[i][j] = READINT32(save_p);

  00126	69 45 f8 e8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 232
  0012d	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00130	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00136	8b 12		 mov	 edx, DWORD PTR [edx]
  00138	89 94 88 00 00
	00 00		 mov	 DWORD PTR _playerstatetics[eax+ecx*4], edx
  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00144	83 c0 04	 add	 eax, 4
  00147	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0014c	eb c9		 jmp	 SHORT $LN8@P_NetUnArc
$LN9@P_NetUnArc:
  0014e	eb af		 jmp	 SHORT $LN5@P_NetUnArc
$LN6@P_NetUnArc:

; 2819 : 
; 2820 : 	// get the time
; 2821 : 	leveltime = READUINT32(save_p);

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00155	8b 08		 mov	 ecx, DWORD PTR [eax]
  00157	89 0d 00 00 00
	00		 mov	 DWORD PTR _leveltime, ecx
  0015d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00163	83 c2 04	 add	 edx, 4
  00166	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2822 : 	totalrings = READUINT32(save_p);

  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00171	8b 08		 mov	 ecx, DWORD PTR [eax]
  00173	89 0d 00 00 00
	00		 mov	 DWORD PTR _totalrings, ecx
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0017f	83 c2 04	 add	 edx, 4
  00182	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2823 : 	lastmap = READINT16(save_p);

  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0018d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00190	66 89 0d 00 00
	00 00		 mov	 WORD PTR _lastmap, cx
  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0019d	83 c2 02	 add	 edx, 2
  001a0	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2824 : 
; 2825 : 	emeralds = READUINT16(save_p);

  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001ab	66 8b 08	 mov	 cx, WORD PTR [eax]
  001ae	66 89 0d 00 00
	00 00		 mov	 WORD PTR _emeralds, cx
  001b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  001bb	83 c2 02	 add	 edx, 2
  001be	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2826 : 
; 2827 : 	token = READUINT32(save_p);

  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cb	89 0d 00 00 00
	00		 mov	 DWORD PTR _token, ecx
  001d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  001d7	83 c2 04	 add	 edx, 4
  001da	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2828 : 	sstimer = READINT32(save_p);

  001e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e7	89 0d 00 00 00
	00		 mov	 DWORD PTR _sstimer, ecx
  001ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  001f3	83 c2 04	 add	 edx, 4
  001f6	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2829 : 	bluescore = READUINT32(save_p);

  001fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00201	8b 08		 mov	 ecx, DWORD PTR [eax]
  00203	89 0d 00 00 00
	00		 mov	 DWORD PTR _bluescore, ecx
  00209	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0020f	83 c2 04	 add	 edx, 4
  00212	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2830 : 	redscore = READUINT32(save_p);

  00218	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0021d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021f	89 0d 00 00 00
	00		 mov	 DWORD PTR _redscore, ecx
  00225	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0022b	83 c2 04	 add	 edx, 4
  0022e	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2831 : 
; 2832 : 	autobalance = READINT16(save_p);

  00234	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00239	66 8b 08	 mov	 cx, WORD PTR [eax]
  0023c	66 89 0d 00 00
	00 00		 mov	 WORD PTR _autobalance, cx
  00243	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00249	83 c2 02	 add	 edx, 2
  0024c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2833 : 	teamscramble = READINT16(save_p);

  00252	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00257	66 8b 08	 mov	 cx, WORD PTR [eax]
  0025a	66 89 0d 00 00
	00 00		 mov	 WORD PTR _teamscramble, cx
  00261	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00267	83 c2 02	 add	 edx, 2
  0026a	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2834 : 
; 2835 : 	for (i = 0; i < MAXPLAYERS; i++)

  00270	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00277	eb 09		 jmp	 SHORT $LN13@P_NetUnArc
$LN11@P_NetUnArc:
  00279	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0027c	83 c0 01	 add	 eax, 1
  0027f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN13@P_NetUnArc:
  00282	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00286	7d 23		 jge	 SHORT $LN12@P_NetUnArc

; 2836 : 		scrambleplayers[i] = READINT16(save_p);

  00288	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0028b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00291	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00294	66 89 14 45 00
	00 00 00	 mov	 WORD PTR _scrambleplayers[eax*2], dx
  0029c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002a1	83 c0 02	 add	 eax, 2
  002a4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002a9	eb ce		 jmp	 SHORT $LN11@P_NetUnArc
$LN12@P_NetUnArc:

; 2837 : 
; 2838 : 	for (i = 0; i < MAXPLAYERS; i++)

  002ab	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002b2	eb 09		 jmp	 SHORT $LN16@P_NetUnArc
$LN14@P_NetUnArc:
  002b4	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002b7	83 c0 01	 add	 eax, 1
  002ba	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN16@P_NetUnArc:
  002bd	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  002c1	7d 23		 jge	 SHORT $LN15@P_NetUnArc

; 2839 : 		scrambleteams[i] = READINT16(save_p);

  002c3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  002cc	66 8b 11	 mov	 dx, WORD PTR [ecx]
  002cf	66 89 14 45 00
	00 00 00	 mov	 WORD PTR _scrambleteams[eax*2], dx
  002d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002dc	83 c0 02	 add	 eax, 2
  002df	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002e4	eb ce		 jmp	 SHORT $LN14@P_NetUnArc
$LN15@P_NetUnArc:

; 2840 : 
; 2841 : 	scrambletotal = READINT16(save_p);

  002e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002eb	66 8b 08	 mov	 cx, WORD PTR [eax]
  002ee	66 89 0d 00 00
	00 00		 mov	 WORD PTR _scrambletotal, cx
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  002fb	83 c2 02	 add	 edx, 2
  002fe	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2842 : 	scramblecount = READINT16(save_p);

  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00309	66 8b 08	 mov	 cx, WORD PTR [eax]
  0030c	66 89 0d 00 00
	00 00		 mov	 WORD PTR _scramblecount, cx
  00313	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00319	83 c2 02	 add	 edx, 2
  0031c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2843 : 
; 2844 : 	countdown = READUINT32(save_p);

  00322	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00327	8b 08		 mov	 ecx, DWORD PTR [eax]
  00329	89 0d 00 00 00
	00		 mov	 DWORD PTR _countdown, ecx
  0032f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00335	83 c2 04	 add	 edx, 4
  00338	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2845 : 	countdown2 = READUINT32(save_p);

  0033e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00343	8b 08		 mov	 ecx, DWORD PTR [eax]
  00345	89 0d 00 00 00
	00		 mov	 DWORD PTR _countdown2, ecx
  0034b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00351	83 c2 04	 add	 edx, 4
  00354	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2846 : 
; 2847 : 	gravity = READFIXED(save_p);

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0035f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00361	89 0d 00 00 00
	00		 mov	 DWORD PTR _gravity, ecx
  00367	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0036d	83 c2 04	 add	 edx, 4
  00370	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2848 : 
; 2849 : 	countdowntimer = READUINT32(save_p);

  00376	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0037b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0037d	89 0d 00 00 00
	00		 mov	 DWORD PTR _countdowntimer, ecx
  00383	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00389	83 c2 04	 add	 edx, 4
  0038c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2850 : 	countdowntimeup = READUINT8(save_p);

  00392	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00397	8a 08		 mov	 cl, BYTE PTR [eax]
  00399	88 0d 00 00 00
	00		 mov	 BYTE PTR _countdowntimeup, cl
  0039f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  003a5	83 c2 01	 add	 edx, 1
  003a8	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2851 : 
; 2852 : 	P_SetRandIndex(READUINT8(save_p));

  003ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003b3	8a 08		 mov	 cl, BYTE PTR [eax]
  003b5	88 4d b3	 mov	 BYTE PTR tv156[ebp], cl
  003b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  003be	83 c2 01	 add	 edx, 1
  003c1	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  003c7	0f b6 45 b3	 movzx	 eax, BYTE PTR tv156[ebp]
  003cb	50		 push	 eax
  003cc	e8 00 00 00 00	 call	 _P_SetRandIndex
  003d1	83 c4 04	 add	 esp, 4

; 2853 : 
; 2854 : 	matchtype = READINT32(save_p);

  003d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003db	89 0d 00 00 00
	00		 mov	 DWORD PTR _matchtype, ecx
  003e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  003e7	83 c2 04	 add	 edx, 4
  003ea	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2855 : 	tagtype = READINT32(save_p);

  003f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f7	89 0d 00 00 00
	00		 mov	 DWORD PTR _tagtype, ecx
  003fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00403	83 c2 04	 add	 edx, 4
  00406	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2856 : 
; 2857 : 	hidetime = READUINT32(save_p);

  0040c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00411	8b 08		 mov	 ecx, DWORD PTR [eax]
  00413	89 0d 00 00 00
	00		 mov	 DWORD PTR _hidetime, ecx
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0041f	83 c2 04	 add	 edx, 4
  00422	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2858 : 
; 2859 : 	// Is it paused?
; 2860 : 	if (READUINT8(save_p) == 0x2f)

  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0042d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00430	89 4d b0	 mov	 DWORD PTR tv164[ebp], ecx
  00433	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00439	83 c2 01	 add	 edx, 1
  0043c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00442	83 7d b0 2f	 cmp	 DWORD PTR tv164[ebp], 47 ; 0000002fH
  00446	75 07		 jne	 SHORT $LN18@P_NetUnArc

; 2861 : 		paused = true;

  00448	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _paused, 1
$LN18@P_NetUnArc:

; 2862 : 
; 2863 : 	return true;

  0044f	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_NetUnArc:

; 2864 : }

  00454	5f		 pop	 edi
  00455	5e		 pop	 esi
  00456	5b		 pop	 ebx
  00457	8b e5		 mov	 esp, ebp
  00459	5d		 pop	 ebp
  0045a	c3		 ret	 0
_P_NetUnArchiveMisc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetArchiveMisc
_TEXT	SEGMENT
tv75 = -200						; size = 4
_p_tmp$1 = -132						; size = 4
_p_tmp$2 = -128						; size = 4
_p_tmp$3 = -124						; size = 4
_p_tmp$4 = -120						; size = 4
_p_tmp$5 = -116						; size = 4
_p_tmp$6 = -112						; size = 4
_p_tmp$7 = -108						; size = 4
_p_tmp$8 = -104						; size = 4
_p_tmp$9 = -100						; size = 4
_p_tmp$10 = -96						; size = 4
_p_tmp$11 = -92						; size = 4
_p_tmp$12 = -88						; size = 4
_p_tmp$13 = -84						; size = 4
_p_tmp$14 = -80						; size = 4
_p_tmp$15 = -76						; size = 4
_p_tmp$16 = -72						; size = 4
_p_tmp$17 = -68						; size = 4
_p_tmp$18 = -64						; size = 4
_p_tmp$19 = -60						; size = 4
_p_tmp$20 = -56						; size = 4
_p_tmp$21 = -52						; size = 4
_p_tmp$22 = -48						; size = 4
_p_tmp$23 = -44						; size = 4
_p_tmp$24 = -40						; size = 4
_p_tmp$25 = -36						; size = 4
_p_tmp$26 = -32						; size = 4
_p_tmp$27 = -28						; size = 4
_p_tmp$28 = -24						; size = 4
_p_tmp$29 = -20						; size = 4
_p_tmp$30 = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_pig$ = -4						; size = 4
_P_NetArchiveMisc PROC					; COMDAT

; 2731 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2732 : 	UINT32 pig = 0;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pig$[ebp], 0
$LN4@P_NetArchi:

; 2733 : 	INT32 i, j;
; 2734 : 
; 2735 : 	WRITEINT16(save_p, gamemap);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00018	89 45 f0	 mov	 DWORD PTR _p_tmp$30[ebp], eax
  0001b	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  0001e	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _gamemap
  00025	66 89 08	 mov	 WORD PTR [eax], cx
  00028	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  0002b	83 c0 02	 add	 eax, 2
  0002e	89 45 f0	 mov	 DWORD PTR _p_tmp$30[ebp], eax
  00031	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  00034	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00039	33 c0		 xor	 eax, eax
  0003b	75 d6		 jne	 SHORT $LN4@P_NetArchi
$LN3@P_NetArchi:

; 2736 : 	WRITEUINT16(save_p, gamestate);

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00042	89 45 ec	 mov	 DWORD PTR _p_tmp$29[ebp], eax
  00045	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  00048	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _gamestate
  0004f	66 89 08	 mov	 WORD PTR [eax], cx
  00052	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  00055	83 c0 02	 add	 eax, 2
  00058	89 45 ec	 mov	 DWORD PTR _p_tmp$29[ebp], eax
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  0005e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00063	33 c0		 xor	 eax, eax
  00065	75 d6		 jne	 SHORT $LN3@P_NetArchi
$LN6@P_NetArchi:

; 2737 : 
; 2738 : 	WRITEUINT32(save_p, tokenlist);

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006c	89 45 e8	 mov	 DWORD PTR _p_tmp$28[ebp], eax
  0006f	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tokenlist
  00078	89 08		 mov	 DWORD PTR [eax], ecx
  0007a	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  0007d	83 c0 04	 add	 eax, 4
  00080	89 45 e8	 mov	 DWORD PTR _p_tmp$28[ebp], eax
  00083	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  00086	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0008b	33 c0		 xor	 eax, eax
  0008d	75 d8		 jne	 SHORT $LN6@P_NetArchi

; 2739 : 
; 2740 : 	for (i = 0; i < MAXPLAYERS; i++)

  0008f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00096	eb 09		 jmp	 SHORT $LN13@P_NetArchi
$LN11@P_NetArchi:
  00098	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0009b	83 c0 01	 add	 eax, 1
  0009e	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN13@P_NetArchi:
  000a1	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  000a5	7d 36		 jge	 SHORT $LN12@P_NetArchi

; 2741 : 		pig |= (playeringame[i] != 0)<<i;

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000aa	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000b2	74 0c		 je	 SHORT $LN110@P_NetArchi
  000b4	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv75[ebp], 1
  000be	eb 0a		 jmp	 SHORT $LN111@P_NetArchi
$LN110@P_NetArchi:
  000c0	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN111@P_NetArchi:
  000ca	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv75[ebp]
  000d0	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000d3	d3 e2		 shl	 edx, cl
  000d5	0b 55 fc	 or	 edx, DWORD PTR _pig$[ebp]
  000d8	89 55 fc	 mov	 DWORD PTR _pig$[ebp], edx
  000db	eb bb		 jmp	 SHORT $LN11@P_NetArchi
$LN12@P_NetArchi:

; 2742 : 
; 2743 : 	WRITEUINT32(save_p, pig);

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000e2	89 45 e4	 mov	 DWORD PTR _p_tmp$27[ebp], eax
  000e5	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _pig$[ebp]
  000eb	89 08		 mov	 DWORD PTR [eax], ecx
  000ed	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  000f0	83 c0 04	 add	 eax, 4
  000f3	89 45 e4	 mov	 DWORD PTR _p_tmp$27[ebp], eax
  000f6	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  000f9	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000fe	33 c0		 xor	 eax, eax
  00100	75 db		 jne	 SHORT $LN12@P_NetArchi

; 2744 : 
; 2745 : 	for (i = 0; i < MAXPLAYERS; i++)

  00102	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00109	eb 09		 jmp	 SHORT $LN19@P_NetArchi
$LN17@P_NetArchi:
  0010b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0010e	83 c0 01	 add	 eax, 1
  00111	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN19@P_NetArchi:
  00114	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00118	7d 4f		 jge	 SHORT $LN18@P_NetArchi

; 2746 : 		for (j = 0; j < S_PLAY_SUPERTRANS9+1; j++)

  0011a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00121	eb 09		 jmp	 SHORT $LN22@P_NetArchi
$LN20@P_NetArchi:
  00123	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00126	83 c0 01	 add	 eax, 1
  00129	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$LN22@P_NetArchi:
  0012c	83 7d f4 3a	 cmp	 DWORD PTR _j$[ebp], 58	; 0000003aH
  00130	7d 35		 jge	 SHORT $LN21@P_NetArchi
$LN25@P_NetArchi:

; 2747 : 			WRITEINT32(save_p, playerstatetics[i][j]);

  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00137	89 45 e0	 mov	 DWORD PTR _p_tmp$26[ebp], eax
  0013a	69 45 f8 e8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 232
  00141	8b 4d e0	 mov	 ecx, DWORD PTR _p_tmp$26[ebp]
  00144	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00147	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR _playerstatetics[eax+edx*4]
  0014e	89 01		 mov	 DWORD PTR [ecx], eax
  00150	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  00153	83 c0 04	 add	 eax, 4
  00156	89 45 e0	 mov	 DWORD PTR _p_tmp$26[ebp], eax
  00159	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  0015c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00161	33 c0		 xor	 eax, eax
  00163	75 cd		 jne	 SHORT $LN25@P_NetArchi
  00165	eb bc		 jmp	 SHORT $LN20@P_NetArchi
$LN21@P_NetArchi:
  00167	eb a2		 jmp	 SHORT $LN17@P_NetArchi
$LN18@P_NetArchi:

; 2748 : 
; 2749 : 	WRITEUINT32(save_p, leveltime);

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0016e	89 45 dc	 mov	 DWORD PTR _p_tmp$25[ebp], eax
  00171	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  00174	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  0017a	89 08		 mov	 DWORD PTR [eax], ecx
  0017c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  0017f	83 c0 04	 add	 eax, 4
  00182	89 45 dc	 mov	 DWORD PTR _p_tmp$25[ebp], eax
  00185	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  00188	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0018d	33 c0		 xor	 eax, eax
  0018f	75 d8		 jne	 SHORT $LN18@P_NetArchi
$LN27@P_NetArchi:

; 2750 : 	WRITEUINT32(save_p, totalrings);

  00191	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00196	89 45 d8	 mov	 DWORD PTR _p_tmp$24[ebp], eax
  00199	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  0019c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _totalrings
  001a2	89 08		 mov	 DWORD PTR [eax], ecx
  001a4	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  001a7	83 c0 04	 add	 eax, 4
  001aa	89 45 d8	 mov	 DWORD PTR _p_tmp$24[ebp], eax
  001ad	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  001b0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001b5	33 c0		 xor	 eax, eax
  001b7	75 d8		 jne	 SHORT $LN27@P_NetArchi
$LN30@P_NetArchi:

; 2751 : 	WRITEINT16(save_p, lastmap);

  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001be	89 45 d4	 mov	 DWORD PTR _p_tmp$23[ebp], eax
  001c1	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  001c4	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _lastmap
  001cb	66 89 08	 mov	 WORD PTR [eax], cx
  001ce	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  001d1	83 c0 02	 add	 eax, 2
  001d4	89 45 d4	 mov	 DWORD PTR _p_tmp$23[ebp], eax
  001d7	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  001da	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001df	33 c0		 xor	 eax, eax
  001e1	75 d6		 jne	 SHORT $LN30@P_NetArchi
$LN33@P_NetArchi:

; 2752 : 
; 2753 : 	WRITEUINT16(save_p, emeralds);

  001e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001e8	89 45 d0	 mov	 DWORD PTR _p_tmp$22[ebp], eax
  001eb	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  001ee	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _emeralds
  001f5	66 89 08	 mov	 WORD PTR [eax], cx
  001f8	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  001fb	83 c0 02	 add	 eax, 2
  001fe	89 45 d0	 mov	 DWORD PTR _p_tmp$22[ebp], eax
  00201	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  00204	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00209	33 c0		 xor	 eax, eax
  0020b	75 d6		 jne	 SHORT $LN33@P_NetArchi
$LN36@P_NetArchi:

; 2754 : 
; 2755 : 	WRITEUINT32(save_p, token);

  0020d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00212	89 45 cc	 mov	 DWORD PTR _p_tmp$21[ebp], eax
  00215	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  00218	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _token
  0021e	89 08		 mov	 DWORD PTR [eax], ecx
  00220	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  00223	83 c0 04	 add	 eax, 4
  00226	89 45 cc	 mov	 DWORD PTR _p_tmp$21[ebp], eax
  00229	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  0022c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00231	33 c0		 xor	 eax, eax
  00233	75 d8		 jne	 SHORT $LN36@P_NetArchi
$LN39@P_NetArchi:

; 2756 : 	WRITEINT32(save_p, sstimer);

  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0023a	89 45 c8	 mov	 DWORD PTR _p_tmp$20[ebp], eax
  0023d	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  00240	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sstimer
  00246	89 08		 mov	 DWORD PTR [eax], ecx
  00248	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  0024b	83 c0 04	 add	 eax, 4
  0024e	89 45 c8	 mov	 DWORD PTR _p_tmp$20[ebp], eax
  00251	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  00254	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00259	33 c0		 xor	 eax, eax
  0025b	75 d8		 jne	 SHORT $LN39@P_NetArchi
$LN42@P_NetArchi:

; 2757 : 	WRITEUINT32(save_p, bluescore);

  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00262	89 45 c4	 mov	 DWORD PTR _p_tmp$19[ebp], eax
  00265	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  00268	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bluescore
  0026e	89 08		 mov	 DWORD PTR [eax], ecx
  00270	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  00273	83 c0 04	 add	 eax, 4
  00276	89 45 c4	 mov	 DWORD PTR _p_tmp$19[ebp], eax
  00279	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  0027c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00281	33 c0		 xor	 eax, eax
  00283	75 d8		 jne	 SHORT $LN42@P_NetArchi
$LN45@P_NetArchi:

; 2758 : 	WRITEUINT32(save_p, redscore);

  00285	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0028a	89 45 c0	 mov	 DWORD PTR _p_tmp$18[ebp], eax
  0028d	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  00290	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _redscore
  00296	89 08		 mov	 DWORD PTR [eax], ecx
  00298	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  0029b	83 c0 04	 add	 eax, 4
  0029e	89 45 c0	 mov	 DWORD PTR _p_tmp$18[ebp], eax
  002a1	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  002a4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002a9	33 c0		 xor	 eax, eax
  002ab	75 d8		 jne	 SHORT $LN45@P_NetArchi
$LN48@P_NetArchi:

; 2759 : 
; 2760 : 	WRITEINT16(save_p, autobalance);

  002ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002b2	89 45 bc	 mov	 DWORD PTR _p_tmp$17[ebp], eax
  002b5	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  002b8	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _autobalance
  002bf	66 89 08	 mov	 WORD PTR [eax], cx
  002c2	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  002c5	83 c0 02	 add	 eax, 2
  002c8	89 45 bc	 mov	 DWORD PTR _p_tmp$17[ebp], eax
  002cb	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  002ce	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002d3	33 c0		 xor	 eax, eax
  002d5	75 d6		 jne	 SHORT $LN48@P_NetArchi
$LN51@P_NetArchi:

; 2761 : 	WRITEINT16(save_p, teamscramble);

  002d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002dc	89 45 b8	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  002df	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  002e2	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _teamscramble
  002e9	66 89 08	 mov	 WORD PTR [eax], cx
  002ec	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  002ef	83 c0 02	 add	 eax, 2
  002f2	89 45 b8	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  002f5	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  002f8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002fd	33 c0		 xor	 eax, eax
  002ff	75 d6		 jne	 SHORT $LN51@P_NetArchi

; 2762 : 
; 2763 : 	for (i = 0; i < MAXPLAYERS; i++)

  00301	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00308	eb 09		 jmp	 SHORT $LN58@P_NetArchi
$LN56@P_NetArchi:
  0030a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0030d	83 c0 01	 add	 eax, 1
  00310	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN58@P_NetArchi:
  00313	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00317	7d 30		 jge	 SHORT $LN57@P_NetArchi
$LN61@P_NetArchi:

; 2764 : 		WRITEINT16(save_p, scrambleplayers[i]);

  00319	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0031e	89 45 b4	 mov	 DWORD PTR _p_tmp$15[ebp], eax
  00321	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  00324	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00327	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _scrambleplayers[ecx*2]
  0032f	66 89 10	 mov	 WORD PTR [eax], dx
  00332	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  00335	83 c0 02	 add	 eax, 2
  00338	89 45 b4	 mov	 DWORD PTR _p_tmp$15[ebp], eax
  0033b	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  0033e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00343	33 c0		 xor	 eax, eax
  00345	75 d2		 jne	 SHORT $LN61@P_NetArchi
  00347	eb c1		 jmp	 SHORT $LN56@P_NetArchi
$LN57@P_NetArchi:

; 2765 : 
; 2766 : 	for (i = 0; i < MAXPLAYERS; i++)

  00349	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00350	eb 09		 jmp	 SHORT $LN64@P_NetArchi
$LN62@P_NetArchi:
  00352	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00355	83 c0 01	 add	 eax, 1
  00358	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN64@P_NetArchi:
  0035b	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0035f	7d 30		 jge	 SHORT $LN63@P_NetArchi
$LN67@P_NetArchi:

; 2767 : 		WRITEINT16(save_p, scrambleteams[i]);

  00361	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00366	89 45 b0	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00369	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  0036c	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0036f	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _scrambleteams[ecx*2]
  00377	66 89 10	 mov	 WORD PTR [eax], dx
  0037a	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  0037d	83 c0 02	 add	 eax, 2
  00380	89 45 b0	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00383	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00386	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0038b	33 c0		 xor	 eax, eax
  0038d	75 d2		 jne	 SHORT $LN67@P_NetArchi
  0038f	eb c1		 jmp	 SHORT $LN62@P_NetArchi
$LN63@P_NetArchi:

; 2768 : 
; 2769 : 	WRITEINT16(save_p, scrambletotal);

  00391	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00396	89 45 ac	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00399	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0039c	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _scrambletotal
  003a3	66 89 08	 mov	 WORD PTR [eax], cx
  003a6	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  003a9	83 c0 02	 add	 eax, 2
  003ac	89 45 ac	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  003af	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  003b2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  003b7	33 c0		 xor	 eax, eax
  003b9	75 d6		 jne	 SHORT $LN63@P_NetArchi
$LN69@P_NetArchi:

; 2770 : 	WRITEINT16(save_p, scramblecount);

  003bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003c0	89 45 a8	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  003c3	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  003c6	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _scramblecount
  003cd	66 89 08	 mov	 WORD PTR [eax], cx
  003d0	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  003d3	83 c0 02	 add	 eax, 2
  003d6	89 45 a8	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  003d9	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  003dc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  003e1	33 c0		 xor	 eax, eax
  003e3	75 d6		 jne	 SHORT $LN69@P_NetArchi
$LN72@P_NetArchi:

; 2771 : 
; 2772 : 	WRITEUINT32(save_p, countdown);

  003e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003ea	89 45 a4	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  003ed	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  003f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _countdown
  003f6	89 08		 mov	 DWORD PTR [eax], ecx
  003f8	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  003fb	83 c0 04	 add	 eax, 4
  003fe	89 45 a4	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00401	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00404	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00409	33 c0		 xor	 eax, eax
  0040b	75 d8		 jne	 SHORT $LN72@P_NetArchi
$LN75@P_NetArchi:

; 2773 : 	WRITEUINT32(save_p, countdown2);

  0040d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00412	89 45 a0	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00415	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00418	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _countdown2
  0041e	89 08		 mov	 DWORD PTR [eax], ecx
  00420	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00423	83 c0 04	 add	 eax, 4
  00426	89 45 a0	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00429	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0042c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00431	33 c0		 xor	 eax, eax
  00433	75 d8		 jne	 SHORT $LN75@P_NetArchi
$LN78@P_NetArchi:

; 2774 : 
; 2775 : 	WRITEFIXED(save_p, gravity);

  00435	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0043a	89 45 9c	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  0043d	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00440	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gravity
  00446	89 08		 mov	 DWORD PTR [eax], ecx
  00448	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0044b	83 c0 04	 add	 eax, 4
  0044e	89 45 9c	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00451	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00454	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00459	33 c0		 xor	 eax, eax
  0045b	75 d8		 jne	 SHORT $LN78@P_NetArchi
$LN81@P_NetArchi:

; 2776 : 
; 2777 : 	WRITEUINT32(save_p, countdowntimer);

  0045d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00462	89 45 98	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00465	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00468	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _countdowntimer
  0046e	89 08		 mov	 DWORD PTR [eax], ecx
  00470	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00473	83 c0 04	 add	 eax, 4
  00476	89 45 98	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00479	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0047c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00481	33 c0		 xor	 eax, eax
  00483	75 d8		 jne	 SHORT $LN81@P_NetArchi
$LN84@P_NetArchi:

; 2778 : 	WRITEUINT8(save_p, countdowntimeup);

  00485	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0048a	89 45 94	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  0048d	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00490	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _countdowntimeup
  00496	88 08		 mov	 BYTE PTR [eax], cl
  00498	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0049b	83 c0 01	 add	 eax, 1
  0049e	89 45 94	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  004a1	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  004a4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  004a9	33 c0		 xor	 eax, eax
  004ab	75 d8		 jne	 SHORT $LN84@P_NetArchi
$LN87@P_NetArchi:

; 2779 : 
; 2780 : 	WRITEUINT8(save_p, P_GetRandIndex());

  004ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004b2	89 45 90	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  004b5	e8 00 00 00 00	 call	 _P_GetRandIndex
  004ba	8b 4d 90	 mov	 ecx, DWORD PTR _p_tmp$6[ebp]
  004bd	88 01		 mov	 BYTE PTR [ecx], al
  004bf	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  004c2	83 c0 01	 add	 eax, 1
  004c5	89 45 90	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  004c8	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  004cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  004d0	33 c0		 xor	 eax, eax
  004d2	75 d9		 jne	 SHORT $LN87@P_NetArchi
$LN90@P_NetArchi:

; 2781 : 
; 2782 : 	WRITEINT32(save_p, matchtype);

  004d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004d9	89 45 8c	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  004dc	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  004df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _matchtype
  004e5	89 08		 mov	 DWORD PTR [eax], ecx
  004e7	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  004ea	83 c0 04	 add	 eax, 4
  004ed	89 45 8c	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  004f0	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  004f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  004f8	33 c0		 xor	 eax, eax
  004fa	75 d8		 jne	 SHORT $LN90@P_NetArchi
$LN93@P_NetArchi:

; 2783 : 	WRITEINT32(save_p, tagtype);

  004fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00501	89 45 88	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00504	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00507	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tagtype
  0050d	89 08		 mov	 DWORD PTR [eax], ecx
  0050f	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00512	83 c0 04	 add	 eax, 4
  00515	89 45 88	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00518	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0051b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00520	33 c0		 xor	 eax, eax
  00522	75 d8		 jne	 SHORT $LN93@P_NetArchi
$LN96@P_NetArchi:

; 2784 : 
; 2785 : 	WRITEUINT32(save_p, hidetime);

  00524	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00529	89 45 84	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0052c	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0052f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hidetime
  00535	89 08		 mov	 DWORD PTR [eax], ecx
  00537	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0053a	83 c0 04	 add	 eax, 4
  0053d	89 45 84	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00540	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00543	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00548	33 c0		 xor	 eax, eax
  0054a	75 d8		 jne	 SHORT $LN96@P_NetArchi

; 2786 : 
; 2787 : 	// Is it paused?
; 2788 : 	if (paused)

  0054c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _paused
  00553	85 c0		 test	 eax, eax
  00555	74 25		 je	 SHORT $LN107@P_NetArchi
$LN103@P_NetArchi:

; 2789 : 		WRITEUINT8(save_p, 0x2f);

  00557	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0055c	89 45 80	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0055f	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00562	c6 00 2f	 mov	 BYTE PTR [eax], 47	; 0000002fH
  00565	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00568	83 c0 01	 add	 eax, 1
  0056b	89 45 80	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0056e	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00571	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00576	33 c0		 xor	 eax, eax
  00578	75 dd		 jne	 SHORT $LN103@P_NetArchi
  0057a	eb 32		 jmp	 SHORT $LN105@P_NetArchi
$LN107@P_NetArchi:

; 2790 : 	else
; 2791 : 		WRITEUINT8(save_p, 0x2e);

  0057c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00581	89 85 7c ff ff
	ff		 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00587	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0058d	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00590	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00596	83 c0 01	 add	 eax, 1
  00599	89 85 7c ff ff
	ff		 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0059f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  005a5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  005aa	33 c0		 xor	 eax, eax
  005ac	75 ce		 jne	 SHORT $LN107@P_NetArchi
$LN105@P_NetArchi:

; 2792 : }

  005ae	5f		 pop	 edi
  005af	5e		 pop	 esi
  005b0	5b		 pop	 ebx
  005b1	8b e5		 mov	 esp, ebp
  005b3	5d		 pop	 ebp
  005b4	c3		 ret	 0
_P_NetArchiveMisc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_UnArchiveSPGame
_TEXT	SEGMENT
tv80 = -144						; size = 4
$T1 = -140						; size = 4
_tmp_i$2 = -72						; size = 4
_testname$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_mapoverride$ = 8					; size = 2
_P_UnArchiveSPGame PROC					; COMDAT

; 2689 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2690 : 	char testname[sizeof(timeattackfolder)];
; 2691 : 
; 2692 : 	gamemap = READINT16(save_p);

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0001b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0001e	66 89 0d 00 00
	00 00		 mov	 WORD PTR _gamemap, cx
  00025	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0002b	83 c2 02	 add	 edx, 2
  0002e	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2693 : 
; 2694 : 	if (mapoverride != 0)

  00034	0f bf 45 08	 movsx	 eax, WORD PTR _mapoverride$[ebp]
  00038	85 c0		 test	 eax, eax
  0003a	74 16		 je	 SHORT $LN5@P_UnArchiv

; 2695 : 	{
; 2696 : 		gamemap = mapoverride;

  0003c	66 8b 45 08	 mov	 ax, WORD PTR _mapoverride$[ebp]
  00040	66 a3 00 00 00
	00		 mov	 WORD PTR _gamemap, ax

; 2697 : 		gamecomplete = true;

  00046	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _gamecomplete, 1

; 2698 : 	}

  00050	eb 0a		 jmp	 SHORT $LN6@P_UnArchiv
$LN5@P_UnArchiv:

; 2699 : 	else
; 2700 : 		gamecomplete = false;

  00052	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gamecomplete, 0
$LN6@P_UnArchiv:

; 2701 : 
; 2702 : 	lastmapsaved = gamemap;

  0005c	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _gamemap
  00062	66 a3 00 00 00
	00		 mov	 WORD PTR _lastmapsaved, ax

; 2703 : 
; 2704 : 	tokenlist = 0;

  00068	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tokenlist, 0

; 2705 : 	token = 0;

  00072	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _token, 0

; 2706 : 
; 2707 : 	savedata.emeralds = (UINT16)(READUINT16(save_p)-357);

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00081	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00084	81 e9 65 01 00
	00		 sub	 ecx, 357		; 00000165H
  0008a	66 89 0d 10 00
	00 00		 mov	 WORD PTR _savedata+16, cx
  00091	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00097	83 c2 02	 add	 edx, 2
  0009a	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2708 : 
; 2709 : 	READSTRINGN(save_p, testname, sizeof(testname));

  000a0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _tmp_i$2[ebp], 0
  000a7	eb 09		 jmp	 SHORT $LN4@P_UnArchiv
$LN2@P_UnArchiv:
  000a9	8b 45 b8	 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  000ac	83 c0 01	 add	 eax, 1
  000af	89 45 b8	 mov	 DWORD PTR _tmp_i$2[ebp], eax
$LN4@P_UnArchiv:
  000b2	83 7d b8 40	 cmp	 DWORD PTR _tmp_i$2[ebp], 64 ; 00000040H
  000b6	73 37		 jae	 SHORT $LN3@P_UnArchiv
  000b8	8b 45 b8	 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000c1	8a 11		 mov	 dl, BYTE PTR [ecx]
  000c3	88 54 05 bc	 mov	 BYTE PTR _testname$[ebp+eax], dl
  000c7	8b 45 b8	 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  000ca	0f be 4c 05 bc	 movsx	 ecx, BYTE PTR _testname$[ebp+eax]
  000cf	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  000db	83 c2 01	 add	 edx, 1
  000de	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  000e4	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR tv80[ebp], 0
  000eb	74 02		 je	 SHORT $LN3@P_UnArchiv
  000ed	eb ba		 jmp	 SHORT $LN2@P_UnArchiv
$LN3@P_UnArchiv:
  000ef	8b 45 b8	 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  000f2	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000f8	83 bd 74 ff ff
	ff 40		 cmp	 DWORD PTR $T1[ebp], 64	; 00000040H
  000ff	73 02		 jae	 SHORT $LN11@P_UnArchiv
  00101	eb 06		 jmp	 SHORT $LN12@P_UnArchiv
$LN11@P_UnArchiv:
  00103	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00108	90		 npad	 1
$LN12@P_UnArchiv:
  00109	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0010f	c6 44 0d bc 00	 mov	 BYTE PTR _testname$[ebp+ecx], 0

; 2710 : 
; 2711 : 	if (strcmp(testname, timeattackfolder))

  00114	68 00 00 00 00	 push	 OFFSET _timeattackfolder
  00119	8d 45 bc	 lea	 eax, DWORD PTR _testname$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 _strcmp
  00122	83 c4 08	 add	 esp, 8
  00125	85 c0		 test	 eax, eax
  00127	74 25		 je	 SHORT $LN9@P_UnArchiv

; 2712 : 	{
; 2713 : 		if (modifiedgame)

  00129	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00130	74 0f		 je	 SHORT $LN8@P_UnArchiv

; 2714 : 			I_Error("Save game not for this modification.");

  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JHAPBDAC@Save?5game?5not?5for?5this?5modifica@
  00137	e8 00 00 00 00	 call	 _I_Error
  0013c	83 c4 04	 add	 esp, 4
  0013f	eb 0d		 jmp	 SHORT $LN9@P_UnArchiv
$LN8@P_UnArchiv:

; 2715 : 		else
; 2716 : 			I_Error("This save file is for a particular mod, it cannot be used with the regular game.");

  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@MGJCGEIE@This?5save?5file?5is?5for?5a?5particu@
  00146	e8 00 00 00 00	 call	 _I_Error
  0014b	83 c4 04	 add	 esp, 4
$LN9@P_UnArchiv:

; 2717 : 	}
; 2718 : 
; 2719 : 	memset(playeringame, 0, sizeof(*playeringame));

  0014e	6a 04		 push	 4
  00150	6a 00		 push	 0
  00152	68 00 00 00 00	 push	 OFFSET _playeringame
  00157	e8 00 00 00 00	 call	 _memset
  0015c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2720 : 	playeringame[consoleplayer] = true;

  0015f	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  00164	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _playeringame[eax*4], 1

; 2721 : 
; 2722 : 	P_UnArchivePlayer();

  0016f	e8 00 00 00 00	 call	 _P_UnArchivePlayer
  00174	90		 npad	 1

; 2723 : 
; 2724 : 	G_DeferedInitNew(false, G_BuildMapName(gamemap), savedata.skin, false, true);

  00175	6a 01		 push	 1
  00177	6a 00		 push	 0
  00179	0f b6 05 01 00
	00 00		 movzx	 eax, BYTE PTR _savedata+1
  00180	50		 push	 eax
  00181	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _gamemap
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 _G_BuildMapName
  0018e	83 c4 04	 add	 esp, 4
  00191	50		 push	 eax
  00192	6a 00		 push	 0
  00194	e8 00 00 00 00	 call	 _G_DeferedInitNew
  00199	83 c4 14	 add	 esp, 20			; 00000014H

; 2725 : 	COM_BufAddText("dummyconsvar 1\n"); // G_DeferedInitNew doesn't do this

  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@
  001a1	e8 00 00 00 00	 call	 _COM_BufAddText
  001a6	83 c4 04	 add	 esp, 4

; 2726 : 
; 2727 : 	return true;

  001a9	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_UnArchiv:

; 2728 : }

  001ae	5f		 pop	 edi
  001af	5e		 pop	 esi
  001b0	5b		 pop	 ebx
  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
_P_UnArchiveSPGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_ArchiveMisc
_TEXT	SEGMENT
_p_tmp$1 = -24						; size = 4
_p_tmp$2 = -20						; size = 4
_tmp_i$3 = -16						; size = 4
_p_tmp$4 = -12						; size = 4
_p_tmp$5 = -8						; size = 4
_p_tmp$6 = -4						; size = 4
_P_ArchiveMisc PROC					; COMDAT

; 2676 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2677 : 	if (gamecomplete)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _gamecomplete, 0
  00010	74 2c		 je	 SHORT $LN20@P_ArchiveM
$LN4@P_ArchiveM:

; 2678 : 		WRITEINT16(save_p, spstage_end);

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00017	89 45 fc	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0001d	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _spstage_end
  00024	66 89 08	 mov	 WORD PTR [eax], cx
  00027	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0002a	83 c0 02	 add	 eax, 2
  0002d	89 45 fc	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00030	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00033	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00038	33 c0		 xor	 eax, eax
  0003a	75 d6		 jne	 SHORT $LN4@P_ArchiveM
  0003c	eb 2a		 jmp	 SHORT $LN6@P_ArchiveM
$LN20@P_ArchiveM:

; 2679 : 	else
; 2680 : 		WRITEINT16(save_p, gamemap);

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00043	89 45 f8	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00046	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00049	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _gamemap
  00050	66 89 08	 mov	 WORD PTR [eax], cx
  00053	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00056	83 c0 02	 add	 eax, 2
  00059	89 45 f8	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0005f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00064	33 c0		 xor	 eax, eax
  00066	75 d6		 jne	 SHORT $LN20@P_ArchiveM
$LN6@P_ArchiveM:

; 2681 : 
; 2682 : 	lastmapsaved = gamemap;

  00068	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _gamemap
  0006e	66 a3 00 00 00
	00		 mov	 WORD PTR _lastmapsaved, ax
$LN10@P_ArchiveM:

; 2683 : 
; 2684 : 	WRITEUINT16(save_p, emeralds+357);

  00074	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00079	89 45 f4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0007c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00083	05 65 01 00 00	 add	 eax, 357		; 00000165H
  00088	8b 4d f4	 mov	 ecx, DWORD PTR _p_tmp$4[ebp]
  0008b	66 89 01	 mov	 WORD PTR [ecx], ax
  0008e	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00091	83 c0 02	 add	 eax, 2
  00094	89 45 f4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00097	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0009a	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0009f	33 c0		 xor	 eax, eax
  000a1	75 d1		 jne	 SHORT $LN10@P_ArchiveM

; 2685 : 	WRITESTRINGN(save_p, timeattackfolder, sizeof(timeattackfolder));

  000a3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _tmp_i$3[ebp], 0
  000aa	eb 09		 jmp	 SHORT $LN13@P_ArchiveM
$LN11@P_ArchiveM:
  000ac	8b 45 f0	 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 f0	 mov	 DWORD PTR _tmp_i$3[ebp], eax
$LN13@P_ArchiveM:
  000b5	83 7d f0 40	 cmp	 DWORD PTR _tmp_i$3[ebp], 64 ; 00000040H
  000b9	73 3b		 jae	 SHORT $LN12@P_ArchiveM
  000bb	8b 45 f0	 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  000be	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _timeattackfolder[eax]
  000c5	85 c9		 test	 ecx, ecx
  000c7	74 2d		 je	 SHORT $LN12@P_ArchiveM
$LN16@P_ArchiveM:
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ce	89 45 ec	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000d1	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _tmp_i$3[ebp]
  000d7	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR _timeattackfolder[ecx]
  000dd	88 10		 mov	 BYTE PTR [eax], dl
  000df	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000e2	83 c0 01	 add	 eax, 1
  000e5	89 45 ec	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000e8	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000eb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f0	33 c0		 xor	 eax, eax
  000f2	75 d5		 jne	 SHORT $LN16@P_ArchiveM
  000f4	eb b6		 jmp	 SHORT $LN11@P_ArchiveM
$LN12@P_ArchiveM:
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000fb	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000fe	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00101	c6 00 00	 mov	 BYTE PTR [eax], 0
  00104	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00107	83 c0 01	 add	 eax, 1
  0010a	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0010d	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00110	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00115	33 c0		 xor	 eax, eax
  00117	75 dd		 jne	 SHORT $LN12@P_ArchiveM

; 2686 : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
_P_ArchiveMisc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetUnArchiveSpecials
_TEXT	SEGMENT
tv66 = -76						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_P_NetUnArchiveSpecials PROC				; COMDAT

; 2637 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2638 : 	size_t i;
; 2639 : 	INT32 j;
; 2640 : 
; 2641 : 	// BP: added save itemrespawn queue for deathmatch
; 2642 : 	iquetail = iquehead = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _iquehead, 0
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  00018	a3 00 00 00 00	 mov	 DWORD PTR _iquetail, eax
$LN2@P_NetUnArc:

; 2643 : 	while ((i = READUINT32(save_p)) != 0xffffffff)

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  00027	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0002a	89 55 b4	 mov	 DWORD PTR tv66[ebp], edx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00032	83 c0 04	 add	 eax, 4
  00035	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0003a	83 7d b4 ff	 cmp	 DWORD PTR tv66[ebp], -1
  0003e	74 49		 je	 SHORT $LN3@P_NetUnArc

; 2644 : 	{
; 2645 : 		itemrespawnque[iquehead] = &mapthings[i];

  00040	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00044	03 05 00 00 00
	00		 add	 eax, DWORD PTR _mapthings
  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _iquehead
  00050	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _itemrespawnque[ecx*4], eax

; 2646 : 		itemrespawntime[iquehead++] = READINT32(save_p);

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	89 14 85 00 00
	00 00		 mov	 DWORD PTR _itemrespawntime[eax*4], edx
  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  00070	83 c0 01	 add	 eax, 1
  00073	a3 00 00 00 00	 mov	 DWORD PTR _iquehead, eax
  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007e	83 c1 04	 add	 ecx, 4
  00081	89 0d 00 00 00
	00		 mov	 DWORD PTR _save_p, ecx

; 2647 : 	}

  00087	eb 94		 jmp	 SHORT $LN2@P_NetUnArc
$LN3@P_NetUnArc:

; 2648 : 
; 2649 : 	j = READINT32(save_p);

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx
  00093	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00099	83 c2 04	 add	 edx, 4
  0009c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2650 : 	if (j != globallevelskynum)

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000a5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _globallevelskynum
  000ab	74 22		 je	 SHORT $LN4@P_NetUnArc

; 2651 : 	{
; 2652 : 		globallevelskynum = levelskynum = j;

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000b0	a3 00 00 00 00	 mov	 DWORD PTR _levelskynum, eax
  000b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _levelskynum
  000bb	89 0d 00 00 00
	00		 mov	 DWORD PTR _globallevelskynum, ecx

; 2653 : 		P_SetupLevelSky(levelskynum);

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _levelskynum
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _P_SetupLevelSky
  000cc	83 c4 04	 add	 esp, 4
$LN4@P_NetUnArc:

; 2654 : 	}
; 2655 : 
; 2656 : 	globalweather = READUINT8(save_p);

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d4	8a 08		 mov	 cl, BYTE PTR [eax]
  000d6	88 0d 00 00 00
	00		 mov	 BYTE PTR _globalweather, cl
  000dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  000e2	83 c2 01	 add	 edx, 1
  000e5	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2657 : 
; 2658 : 	if (globalweather)

  000eb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _globalweather
  000f2	85 c0		 test	 eax, eax
  000f4	74 2b		 je	 SHORT $LN5@P_NetUnArc

; 2659 : 	{
; 2660 : 		if (curWeather == globalweather)

  000f6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _globalweather
  000fd	39 05 00 00 00
	00		 cmp	 DWORD PTR _curWeather, eax
  00103	75 0a		 jne	 SHORT $LN7@P_NetUnArc

; 2661 : 			curWeather = PRECIP_NONE;

  00105	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _curWeather, 0
$LN7@P_NetUnArc:

; 2662 : 
; 2663 : 		P_SwitchWeather(globalweather);

  0010f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _globalweather
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 _P_SwitchWeather
  0011c	83 c4 04	 add	 esp, 4

; 2664 : 	}

  0011f	eb 19		 jmp	 SHORT $LN8@P_NetUnArc
$LN5@P_NetUnArc:

; 2665 : 	else // PRECIP_NONE
; 2666 : 	{
; 2667 : 		if (curWeather != PRECIP_NONE)

  00121	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _curWeather, 0
  00128	74 10		 je	 SHORT $LN8@P_NetUnArc

; 2668 : 			P_SwitchWeather(globalweather);

  0012a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _globalweather
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _P_SwitchWeather
  00137	83 c4 04	 add	 esp, 4
$LN8@P_NetUnArc:

; 2669 : 	}
; 2670 : }

  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
_P_NetUnArchiveSpecials ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetArchiveSpecials
_TEXT	SEGMENT
_p_tmp$1 = -28						; size = 4
_p_tmp$2 = -24						; size = 4
_p_tmp$3 = -20						; size = 4
_p_tmp$4 = -16						; size = 4
_p_tmp$5 = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 4
_P_NetArchiveSpecials PROC				; COMDAT

; 2604 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2605 : 	size_t i, z;
; 2606 : 
; 2607 : 	// itemrespawn queue for deathmatch
; 2608 : 	i = iquetail;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquetail
  0000e	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN2@P_NetArchi:

; 2609 : 	while (iquehead != i)

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  00016	3b 45 fc	 cmp	 eax, DWORD PTR _i$[ebp]
  00019	0f 84 9b 00 00
	00		 je	 $LN3@P_NetArchi

; 2610 : 	{
; 2611 : 		for (z = 0; z < nummapthings; z++)

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00026	eb 09		 jmp	 SHORT $LN6@P_NetArchi
$LN4@P_NetArchi:
  00028	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
$LN6@P_NetArchi:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00034	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _nummapthings
  0003a	73 3f		 jae	 SHORT $LN5@P_NetArchi

; 2612 : 		{
; 2613 : 			if (&mapthings[z] == itemrespawnque[i])

  0003c	6b 45 f8 14	 imul	 eax, DWORD PTR _z$[ebp], 20
  00040	03 05 00 00 00
	00		 add	 eax, DWORD PTR _mapthings
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00049	3b 04 8d 00 00
	00 00		 cmp	 eax, DWORD PTR _itemrespawnque[ecx*4]
  00050	75 27		 jne	 SHORT $LN22@P_NetArchi
$LN9@P_NetArchi:

; 2614 : 			{
; 2615 : 				WRITEUINT32(save_p, z);

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00057	89 45 f4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0005a	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  00060	89 08		 mov	 DWORD PTR [eax], ecx
  00062	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00065	83 c0 04	 add	 eax, 4
  00068	89 45 f4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0006b	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0006e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00073	33 c0		 xor	 eax, eax
  00075	75 db		 jne	 SHORT $LN9@P_NetArchi

; 2616 : 				break;

  00077	eb 02		 jmp	 SHORT $LN5@P_NetArchi
$LN22@P_NetArchi:

; 2617 : 			}
; 2618 : 		}

  00079	eb ad		 jmp	 SHORT $LN4@P_NetArchi
$LN5@P_NetArchi:

; 2619 : 		WRITEUINT32(save_p, itemrespawntime[i]);

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00080	89 45 f0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00083	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00089	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _itemrespawntime[ecx*4]
  00090	89 10		 mov	 DWORD PTR [eax], edx
  00092	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00095	83 c0 04	 add	 eax, 4
  00098	89 45 f0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0009b	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0009e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a3	33 c0		 xor	 eax, eax
  000a5	75 d4		 jne	 SHORT $LN5@P_NetArchi

; 2620 : 		i = (i + 1) & (ITEMQUESIZE-1);

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000aa	83 c0 01	 add	 eax, 1
  000ad	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  000b2	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 2621 : 	}

  000b5	e9 57 ff ff ff	 jmp	 $LN2@P_NetArchi
$LN3@P_NetArchi:

; 2622 : 
; 2623 : 	// end delimiter
; 2624 : 	WRITEUINT32(save_p, 0xffffffff);

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bf	89 45 ec	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000c2	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000c5	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  000cb	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000ce	83 c0 04	 add	 eax, 4
  000d1	89 45 ec	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000d4	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000d7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000dc	33 c0		 xor	 eax, eax
  000de	75 da		 jne	 SHORT $LN3@P_NetArchi
$LN14@P_NetArchi:

; 2625 : 
; 2626 : 	// Sky number
; 2627 : 	WRITEINT32(save_p, globallevelskynum);

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000e5	89 45 e8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000e8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _globallevelskynum
  000f1	89 08		 mov	 DWORD PTR [eax], ecx
  000f3	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000f6	83 c0 04	 add	 eax, 4
  000f9	89 45 e8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000fc	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000ff	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00104	33 c0		 xor	 eax, eax
  00106	75 d8		 jne	 SHORT $LN14@P_NetArchi
$LN17@P_NetArchi:

; 2628 : 
; 2629 : 	// Current global weather type
; 2630 : 	WRITEUINT8(save_p, globalweather);

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0010d	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00110	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00113	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _globalweather
  00119	88 08		 mov	 BYTE PTR [eax], cl
  0011b	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0011e	83 c0 01	 add	 eax, 1
  00121	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00124	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00127	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0012c	33 c0		 xor	 eax, eax
  0012e	75 d8		 jne	 SHORT $LN17@P_NetArchi

; 2631 : }

  00130	5f		 pop	 edi
  00131	5e		 pop	 esi
  00132	5b		 pop	 ebx
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
_P_NetArchiveSpecials ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_RelinkPointers
_TEXT	SEGMENT
_temp$ = -12						; size = 4
_mobj$ = -8						; size = 4
_currentthinker$ = -4					; size = 4
_P_RelinkPointers PROC					; COMDAT

; 2538 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2539 : 	thinker_t *currentthinker;
; 2540 : 	mobj_t *mobj;
; 2541 : 	UINT32 temp;
; 2542 : 
; 2543 : 	// use info field (value = oldposition) to relink mobjs
; 2544 : 	for (currentthinker = thinkercap.next; currentthinker != &thinkercap;

  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0000e	89 45 fc	 mov	 DWORD PTR _currentthinker$[ebp], eax
  00011	eb 09		 jmp	 SHORT $LN4@P_RelinkPo
$LN2@P_RelinkPo:

; 2545 : 		currentthinker = currentthinker->next)

  00013	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	89 4d fc	 mov	 DWORD PTR _currentthinker$[ebp], ecx
$LN4@P_RelinkPo:

; 2539 : 	thinker_t *currentthinker;
; 2540 : 	mobj_t *mobj;
; 2541 : 	UINT32 temp;
; 2542 : 
; 2543 : 	// use info field (value = oldposition) to relink mobjs
; 2544 : 	for (currentthinker = thinkercap.next; currentthinker != &thinkercap;

  0001c	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _currentthinker$[ebp], OFFSET _thinkercap
  00023	0f 84 f9 02 00
	00		 je	 $LN3@P_RelinkPo

; 2546 : 	{
; 2547 : 		if (currentthinker->function.acp1 == (actionf_p1)P_MobjThinker)

  00029	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  0002c	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00033	0f 85 e4 02 00
	00		 jne	 $LN19@P_RelinkPo

; 2548 : 		{
; 2549 : 			mobj = (mobj_t *)currentthinker;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  0003c	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 2550 : 
; 2551 : 			if (mobj->type == MT_HOOP || mobj->type == MT_HOOPCOLLIDE || mobj->type == MT_HOOPCENTER)

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00042	81 78 7c f8 00
	00 00		 cmp	 DWORD PTR [eax+124], 248 ; 000000f8H
  00049	74 18		 je	 SHORT $LN7@P_RelinkPo
  0004b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004e	81 78 7c f9 00
	00 00		 cmp	 DWORD PTR [eax+124], 249 ; 000000f9H
  00055	74 0c		 je	 SHORT $LN7@P_RelinkPo
  00057	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0005a	81 78 7c fa 00
	00 00		 cmp	 DWORD PTR [eax+124], 250 ; 000000faH
  00061	75 02		 jne	 SHORT $LN6@P_RelinkPo
$LN7@P_RelinkPo:

; 2552 : 				continue;

  00063	eb ae		 jmp	 SHORT $LN2@P_RelinkPo
$LN6@P_RelinkPo:

; 2553 : 
; 2554 : 			if (mobj->tracer)

  00065	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00068	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0006f	74 50		 je	 SHORT $LN9@P_RelinkPo

; 2555 : 			{
; 2556 : 				temp = (UINT32)(size_t)mobj->tracer;

  00071	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00074	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0007a	89 4d f4	 mov	 DWORD PTR _temp$[ebp], ecx

; 2557 : 				mobj->tracer = NULL;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00080	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 2558 : 				if (!P_SetTarget(&mobj->tracer, FindNewPosition(temp)))

  0008a	8b 45 f4	 mov	 eax, DWORD PTR _temp$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _FindNewPosition
  00093	83 c4 04	 add	 esp, 4
  00096	50		 push	 eax
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0009a	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 _P_SetTarget
  000a6	83 c4 08	 add	 esp, 8
  000a9	85 c0		 test	 eax, eax
  000ab	75 14		 jne	 SHORT $LN9@P_RelinkPo

; 2559 : 					CONS_Printf("tracer not found on %d\n", mobj->type);

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b0	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000b3	51		 push	 ecx
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EFKODFJI@tracer?5not?5found?5on?5?$CFd?6@
  000b9	e8 00 00 00 00	 call	 _CONS_Printf
  000be	83 c4 08	 add	 esp, 8
$LN9@P_RelinkPo:

; 2560 : 			}
; 2561 : 			if (mobj->target)

  000c1	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c4	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000cb	74 50		 je	 SHORT $LN11@P_RelinkPo

; 2562 : 			{
; 2563 : 				temp = (UINT32)(size_t)mobj->target;

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d0	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000d6	89 4d f4	 mov	 DWORD PTR _temp$[ebp], ecx

; 2564 : 				mobj->target = NULL;

  000d9	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000dc	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+152], 0

; 2565 : 				if (!P_SetTarget(&mobj->target, FindNewPosition(temp)))

  000e6	8b 45 f4	 mov	 eax, DWORD PTR _temp$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _FindNewPosition
  000ef	83 c4 04	 add	 esp, 4
  000f2	50		 push	 eax
  000f3	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000f6	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  000fc	51		 push	 ecx
  000fd	e8 00 00 00 00	 call	 _P_SetTarget
  00102	83 c4 08	 add	 esp, 8
  00105	85 c0		 test	 eax, eax
  00107	75 14		 jne	 SHORT $LN11@P_RelinkPo

; 2566 : 					CONS_Printf("target not found on %d\n", mobj->type);

  00109	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0010c	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0010f	51		 push	 ecx
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CNJDGCEA@target?5not?5found?5on?5?$CFd?6@
  00115	e8 00 00 00 00	 call	 _CONS_Printf
  0011a	83 c4 08	 add	 esp, 8
$LN11@P_RelinkPo:

; 2567 : 			}
; 2568 : 			if (mobj->player && mobj->player->capsule)

  0011d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00120	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00127	74 74		 je	 SHORT $LN13@P_RelinkPo
  00129	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0012c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00132	83 b9 d0 01 00
	00 00		 cmp	 DWORD PTR [ecx+464], 0
  00139	74 62		 je	 SHORT $LN13@P_RelinkPo

; 2569 : 			{
; 2570 : 				temp = (UINT32)(size_t)mobj->player->capsule;

  0013b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0013e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00144	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  0014a	89 55 f4	 mov	 DWORD PTR _temp$[ebp], edx

; 2571 : 				mobj->player->capsule = NULL;

  0014d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00150	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00156	c7 81 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+464], 0

; 2572 : 				if (!P_SetTarget(&mobj->player->capsule, FindNewPosition(temp)))

  00160	8b 45 f4	 mov	 eax, DWORD PTR _temp$[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 _FindNewPosition
  00169	83 c4 04	 add	 esp, 4
  0016c	50		 push	 eax
  0016d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00170	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00176	81 c2 d0 01 00
	00		 add	 edx, 464		; 000001d0H
  0017c	52		 push	 edx
  0017d	e8 00 00 00 00	 call	 _P_SetTarget
  00182	83 c4 08	 add	 esp, 8
  00185	85 c0		 test	 eax, eax
  00187	75 14		 jne	 SHORT $LN13@P_RelinkPo

; 2573 : 					CONS_Printf("capsule not found on %d\n", mobj->type);

  00189	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0018c	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0018f	51		 push	 ecx
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NACOAMLD@capsule?5not?5found?5on?5?$CFd?6@
  00195	e8 00 00 00 00	 call	 _CONS_Printf
  0019a	83 c4 08	 add	 esp, 8
$LN13@P_RelinkPo:

; 2574 : 			}
; 2575 : 			if (mobj->player && mobj->player->axis1)

  0019d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001a0	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  001a7	74 74		 je	 SHORT $LN15@P_RelinkPo
  001a9	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ac	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001b2	83 b9 a4 01 00
	00 00		 cmp	 DWORD PTR [ecx+420], 0
  001b9	74 62		 je	 SHORT $LN15@P_RelinkPo

; 2576 : 			{
; 2577 : 				temp = (UINT32)(size_t)mobj->player->axis1;

  001bb	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001be	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001c4	8b 91 a4 01 00
	00		 mov	 edx, DWORD PTR [ecx+420]
  001ca	89 55 f4	 mov	 DWORD PTR _temp$[ebp], edx

; 2578 : 				mobj->player->axis1 = NULL;

  001cd	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001d0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001d6	c7 81 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+420], 0

; 2579 : 				if (!P_SetTarget(&mobj->player->axis1, FindNewPosition(temp)))

  001e0	8b 45 f4	 mov	 eax, DWORD PTR _temp$[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _FindNewPosition
  001e9	83 c4 04	 add	 esp, 4
  001ec	50		 push	 eax
  001ed	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001f0	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  001f6	81 c2 a4 01 00
	00		 add	 edx, 420		; 000001a4H
  001fc	52		 push	 edx
  001fd	e8 00 00 00 00	 call	 _P_SetTarget
  00202	83 c4 08	 add	 esp, 8
  00205	85 c0		 test	 eax, eax
  00207	75 14		 jne	 SHORT $LN15@P_RelinkPo

; 2580 : 					CONS_Printf("axis1 not found on %d\n", mobj->type);

  00209	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0020c	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0020f	51		 push	 ecx
  00210	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GBCONNNL@axis1?5not?5found?5on?5?$CFd?6@
  00215	e8 00 00 00 00	 call	 _CONS_Printf
  0021a	83 c4 08	 add	 esp, 8
$LN15@P_RelinkPo:

; 2581 : 			}
; 2582 : 			if (mobj->player && mobj->player->axis2)

  0021d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00220	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00227	74 74		 je	 SHORT $LN17@P_RelinkPo
  00229	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0022c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00232	83 b9 a8 01 00
	00 00		 cmp	 DWORD PTR [ecx+424], 0
  00239	74 62		 je	 SHORT $LN17@P_RelinkPo

; 2583 : 			{
; 2584 : 				temp = (UINT32)(size_t)mobj->player->axis2;

  0023b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0023e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00244	8b 91 a8 01 00
	00		 mov	 edx, DWORD PTR [ecx+424]
  0024a	89 55 f4	 mov	 DWORD PTR _temp$[ebp], edx

; 2585 : 				mobj->player->axis2 = NULL;

  0024d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00250	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00256	c7 81 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+424], 0

; 2586 : 				if (!P_SetTarget(&mobj->player->axis2, FindNewPosition(temp)))

  00260	8b 45 f4	 mov	 eax, DWORD PTR _temp$[ebp]
  00263	50		 push	 eax
  00264	e8 00 00 00 00	 call	 _FindNewPosition
  00269	83 c4 04	 add	 esp, 4
  0026c	50		 push	 eax
  0026d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00270	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00276	81 c2 a8 01 00
	00		 add	 edx, 424		; 000001a8H
  0027c	52		 push	 edx
  0027d	e8 00 00 00 00	 call	 _P_SetTarget
  00282	83 c4 08	 add	 esp, 8
  00285	85 c0		 test	 eax, eax
  00287	75 14		 jne	 SHORT $LN17@P_RelinkPo

; 2587 : 					CONS_Printf("axis2 not found on %d\n", mobj->type);

  00289	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0028c	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0028f	51		 push	 ecx
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MCHIFLHC@axis2?5not?5found?5on?5?$CFd?6@
  00295	e8 00 00 00 00	 call	 _CONS_Printf
  0029a	83 c4 08	 add	 esp, 8
$LN17@P_RelinkPo:

; 2588 : 			}
; 2589 : 			if (mobj->player && mobj->player->awayviewmobj)

  0029d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002a0	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  002a7	74 74		 je	 SHORT $LN19@P_RelinkPo
  002a9	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002ac	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002b2	83 b9 e8 01 00
	00 00		 cmp	 DWORD PTR [ecx+488], 0
  002b9	74 62		 je	 SHORT $LN19@P_RelinkPo

; 2590 : 			{
; 2591 : 				temp = (UINT32)(size_t)mobj->player->awayviewmobj;

  002bb	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002be	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002c4	8b 91 e8 01 00
	00		 mov	 edx, DWORD PTR [ecx+488]
  002ca	89 55 f4	 mov	 DWORD PTR _temp$[ebp], edx

; 2592 : 				mobj->player->awayviewmobj = NULL;

  002cd	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002d0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002d6	c7 81 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+488], 0

; 2593 : 				if (!P_SetTarget(&mobj->player->awayviewmobj, FindNewPosition(temp)))

  002e0	8b 45 f4	 mov	 eax, DWORD PTR _temp$[ebp]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 _FindNewPosition
  002e9	83 c4 04	 add	 esp, 4
  002ec	50		 push	 eax
  002ed	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  002f0	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  002f6	81 c2 e8 01 00
	00		 add	 edx, 488		; 000001e8H
  002fc	52		 push	 edx
  002fd	e8 00 00 00 00	 call	 _P_SetTarget
  00302	83 c4 08	 add	 esp, 8
  00305	85 c0		 test	 eax, eax
  00307	75 14		 jne	 SHORT $LN19@P_RelinkPo

; 2594 : 					CONS_Printf("awayviewmobj not found on %d\n", mobj->type);

  00309	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0030c	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0030f	51		 push	 ecx
  00310	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FBIHGGPL@awayviewmobj?5not?5found?5on?5?$CFd?6@
  00315	e8 00 00 00 00	 call	 _CONS_Printf
  0031a	83 c4 08	 add	 esp, 8
$LN19@P_RelinkPo:

; 2595 : 			}
; 2596 : 		}
; 2597 : 	}

  0031d	e9 f1 fc ff ff	 jmp	 $LN2@P_RelinkPo
$LN3@P_RelinkPo:

; 2598 : }

  00322	5f		 pop	 edi
  00323	5e		 pop	 esi
  00324	5b		 pop	 ebx
  00325	8b e5		 mov	 esp, ebp
  00327	5d		 pop	 ebp
  00328	c3		 ret	 0
_P_RelinkPointers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_FinishMobjs
_TEXT	SEGMENT
_mobj$ = -8						; size = 4
_currentthinker$ = -4					; size = 4
_P_FinishMobjs PROC					; COMDAT

; 2521 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2522 : 	thinker_t *currentthinker;
; 2523 : 	mobj_t *mobj;
; 2524 : 
; 2525 : 	// put info field there real value
; 2526 : 	for (currentthinker = thinkercap.next; currentthinker != &thinkercap;

  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0000e	89 45 fc	 mov	 DWORD PTR _currentthinker$[ebp], eax
  00011	eb 09		 jmp	 SHORT $LN4@P_FinishMo
$LN2@P_FinishMo:

; 2527 : 		currentthinker = currentthinker->next)

  00013	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	89 4d fc	 mov	 DWORD PTR _currentthinker$[ebp], ecx
$LN4@P_FinishMo:

; 2522 : 	thinker_t *currentthinker;
; 2523 : 	mobj_t *mobj;
; 2524 : 
; 2525 : 	// put info field there real value
; 2526 : 	for (currentthinker = thinkercap.next; currentthinker != &thinkercap;

  0001c	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _currentthinker$[ebp], OFFSET _thinkercap
  00023	74 2a		 je	 SHORT $LN3@P_FinishMo

; 2528 : 	{
; 2529 : 		if (currentthinker->function.acp1 == (actionf_p1)P_MobjThinker)

  00025	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00028	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0002f	75 1c		 jne	 SHORT $LN5@P_FinishMo

; 2530 : 		{
; 2531 : 			mobj = (mobj_t *)currentthinker;

  00031	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00034	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 2532 : 			mobj->info = &mobjinfo[mobj->type];

  00037	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0003a	6b 48 7c 60	 imul	 ecx, DWORD PTR [eax+124], 96
  0003e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mobjinfo
  00044	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00047	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx
$LN5@P_FinishMo:

; 2533 : 		}
; 2534 : 	}

  0004d	eb c4		 jmp	 SHORT $LN2@P_FinishMo
$LN3@P_FinishMo:

; 2535 : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_P_FinishMobjs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_UnArchivePolyObjects
_TEXT	SEGMENT
_numSavedPolys$ = -8					; size = 4
_i$ = -4						; size = 4
_P_UnArchivePolyObjects PROC				; COMDAT

; 2505 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2506 : 	INT32 i, numSavedPolys;
; 2507 : 
; 2508 : 	numSavedPolys = READINT32(save_p);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d f8	 mov	 DWORD PTR _numSavedPolys$[ebp], ecx
  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00019	83 c2 04	 add	 edx, 4
  0001c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2509 : 
; 2510 : 	if (numSavedPolys != numPolyObjects)

  00022	8b 45 f8	 mov	 eax, DWORD PTR _numSavedPolys$[ebp]
  00025	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numPolyObjects
  0002b	74 0d		 je	 SHORT $LN5@P_UnArchiv

; 2511 : 		I_Error("P_UnArchivePolyObjects: polyobj count inconsistency\n");

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@BDLHMDIB@P_UnArchivePolyObjects?3?5polyobj@
  00032	e8 00 00 00 00	 call	 _I_Error
  00037	83 c4 04	 add	 esp, 4
$LN5@P_UnArchiv:

; 2512 : 
; 2513 : 	for (i = 0; i < numSavedPolys; ++i)

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00041	eb 09		 jmp	 SHORT $LN4@P_UnArchiv
$LN2@P_UnArchiv:
  00043	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_UnArchiv:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004f	3b 45 f8	 cmp	 eax, DWORD PTR _numSavedPolys$[ebp]
  00052	7d 18		 jge	 SHORT $LN3@P_UnArchiv

; 2514 : 		P_UnArchivePolyObj(&PolyObjects[i]);

  00054	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 168
  0005b	03 05 00 00 00
	00		 add	 eax, DWORD PTR _PolyObjects
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _P_UnArchivePolyObj
  00067	83 c4 04	 add	 esp, 4
  0006a	eb d7		 jmp	 SHORT $LN2@P_UnArchiv
$LN3@P_UnArchiv:

; 2515 : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_P_UnArchivePolyObjects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_ArchivePolyObjects
_TEXT	SEGMENT
_p_tmp$1 = -8						; size = 4
_i$ = -4						; size = 4
_P_ArchivePolyObjects PROC				; COMDAT

; 2494 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@P_ArchiveP:

; 2495 : 	INT32 i;
; 2496 : 
; 2497 : 	// save number of polyobjects
; 2498 : 	WRITEINT32(save_p, numPolyObjects);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0000e	89 45 f8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00011	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _numPolyObjects
  0001a	89 08		 mov	 DWORD PTR [eax], ecx
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0001f	83 c0 04	 add	 eax, 4
  00022	89 45 f8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00025	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00028	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0002d	33 c0		 xor	 eax, eax
  0002f	75 d8		 jne	 SHORT $LN4@P_ArchiveP

; 2499 : 
; 2500 : 	for (i = 0; i < numPolyObjects; ++i)

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN7@P_ArchiveP
$LN5@P_ArchiveP:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@P_ArchiveP:
  00043	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00046	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numPolyObjects
  0004c	7d 18		 jge	 SHORT $LN6@P_ArchiveP

; 2501 : 		P_ArchivePolyObj(&PolyObjects[i]);

  0004e	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 168
  00055	03 05 00 00 00
	00		 add	 eax, DWORD PTR _PolyObjects
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _P_ArchivePolyObj
  00061	83 c4 04	 add	 esp, 4
  00064	eb d4		 jmp	 SHORT $LN5@P_ArchiveP
$LN6@P_ArchiveP:

; 2502 : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_P_ArchivePolyObjects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_UnArchivePolyObj
_TEXT	SEGMENT
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_angle$ = -8						; size = 4
_id$ = -4						; size = 4
_po$ = 8						; size = 4
_P_UnArchivePolyObj PROC				; COMDAT

; 2467 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2468 : 	INT32 id;
; 2469 : 	UINT32 angle;
; 2470 : 	fixed_t x, y;
; 2471 : 
; 2472 : 	// nullify all polyobject thinker pointers;
; 2473 : 	// the thinkers themselves will fight over who gets the field
; 2474 : 	// when they first start to run.
; 2475 : 	po->thinker = NULL;

  00009	8b 45 08	 mov	 eax, DWORD PTR _po$[ebp]
  0000c	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 2476 : 
; 2477 : 	id = READINT32(save_p);

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	89 4d fc	 mov	 DWORD PTR _id$[ebp], ecx
  00020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00026	83 c2 04	 add	 edx, 4
  00029	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2478 : 
; 2479 : 	angle = READANGLE(save_p);

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	89 4d f8	 mov	 DWORD PTR _angle$[ebp], ecx
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0003f	83 c2 04	 add	 edx, 4
  00042	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2480 : 
; 2481 : 	x = READFIXED(save_p);

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	89 4d f4	 mov	 DWORD PTR _x$[ebp], ecx
  00052	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00058	83 c2 04	 add	 edx, 4
  0005b	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2482 : 	y = READFIXED(save_p);

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	89 4d f0	 mov	 DWORD PTR _y$[ebp], ecx
  0006b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00071	83 c2 04	 add	 edx, 4
  00074	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2483 : 
; 2484 : 	// if the object is bad or isn't in the id hash, we can do nothing more
; 2485 : 	// with it, so return now
; 2486 : 	if (po->isBad || po != Polyobj_GetForNum(id))

  0007a	8b 45 08	 mov	 eax, DWORD PTR _po$[ebp]
  0007d	0f b6 88 a0 00
	00 00		 movzx	 ecx, BYTE PTR [eax+160]
  00084	85 c9		 test	 ecx, ecx
  00086	75 11		 jne	 SHORT $LN3@P_UnArchiv
  00088	8b 45 fc	 mov	 eax, DWORD PTR _id$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _Polyobj_GetForNum
  00091	83 c4 04	 add	 esp, 4
  00094	39 45 08	 cmp	 DWORD PTR _po$[ebp], eax
  00097	74 02		 je	 SHORT $LN2@P_UnArchiv
$LN3@P_UnArchiv:

; 2487 : 		return;

  00099	eb 18		 jmp	 SHORT $LN1@P_UnArchiv
$LN2@P_UnArchiv:

; 2488 : 
; 2489 : 	// rotate and translate polyobject
; 2490 : 	Polyobj_MoveOnLoad(po, angle, x, y);

  0009b	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  000a2	51		 push	 ecx
  000a3	8b 55 f8	 mov	 edx, DWORD PTR _angle$[ebp]
  000a6	52		 push	 edx
  000a7	8b 45 08	 mov	 eax, DWORD PTR _po$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _Polyobj_MoveOnLoad
  000b0	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@P_UnArchiv:

; 2491 : }

  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_P_UnArchivePolyObj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_ArchivePolyObj
_TEXT	SEGMENT
_p_tmp$1 = -16						; size = 4
_p_tmp$2 = -12						; size = 4
_p_tmp$3 = -8						; size = 4
_p_tmp$4 = -4						; size = 4
_po$ = 8						; size = 4
_P_ArchivePolyObj PROC					; COMDAT

; 2458 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@P_ArchiveP:

; 2459 : 	WRITEINT32(save_p, po->id);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0000e	89 45 fc	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00011	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _po$[ebp]
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 10		 mov	 DWORD PTR [eax], edx
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0001f	83 c0 04	 add	 eax, 4
  00022	89 45 fc	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00025	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00028	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0002d	33 c0		 xor	 eax, eax
  0002f	75 d8		 jne	 SHORT $LN4@P_ArchiveP
$LN3@P_ArchiveP:

; 2460 : 	WRITEANGLE(save_p, po->angle);

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00036	89 45 f8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00039	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _po$[ebp]
  0003f	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00042	89 10		 mov	 DWORD PTR [eax], edx
  00044	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00047	83 c0 04	 add	 eax, 4
  0004a	89 45 f8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0004d	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00050	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00055	33 c0		 xor	 eax, eax
  00057	75 d8		 jne	 SHORT $LN3@P_ArchiveP
$LN6@P_ArchiveP:

; 2461 : 
; 2462 : 	WRITEFIXED(save_p, po->spawnSpot.x);

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0005e	89 45 f4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00061	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _po$[ebp]
  00067	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0006a	89 10		 mov	 DWORD PTR [eax], edx
  0006c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0006f	83 c0 04	 add	 eax, 4
  00072	89 45 f4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00075	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00078	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0007d	33 c0		 xor	 eax, eax
  0007f	75 d8		 jne	 SHORT $LN6@P_ArchiveP
$LN9@P_ArchiveP:

; 2463 : 	WRITEFIXED(save_p, po->spawnSpot.y);

  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00086	89 45 f0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00089	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _po$[ebp]
  0008f	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00092	89 10		 mov	 DWORD PTR [eax], edx
  00094	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00097	83 c0 04	 add	 eax, 4
  0009a	89 45 f0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0009d	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000a0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a5	33 c0		 xor	 eax, eax
  000a7	75 d8		 jne	 SHORT $LN9@P_ArchiveP

; 2464 : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_P_ArchivePolyObj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetUnArchiveThinkers
_TEXT	SEGMENT
tv74 = -116						; size = 4
_mobjnum$1 = -48					; size = 4
_delay$2 = -44						; size = 4
_spawnpointnum$3 = -40					; size = 2
_ceilingz$ = -36					; size = 4
_floorz$ = -32						; size = 4
_z$ = -28						; size = 4
_restoreNum$ = -22					; size = 1
_tclass$ = -21						; size = 1
_i$ = -20						; size = 4
_diff$ = -16						; size = 4
_mobj$ = -12						; size = 4
_next$ = -8						; size = 4
_currentthinker$ = -4					; size = 4
_P_NetUnArchiveThinkers PROC				; COMDAT

; 2062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2063 : 	thinker_t *currentthinker;
; 2064 : 	thinker_t *next;
; 2065 : 	mobj_t *mobj;
; 2066 : 	UINT32 diff;
; 2067 : 	INT32 i;
; 2068 : 	UINT8 tclass;
; 2069 : 	UINT8 restoreNum = false;

  00009	c6 45 ea 00	 mov	 BYTE PTR _restoreNum$[ebp], 0

; 2070 : 	fixed_t z, floorz, ceilingz;
; 2071 : 
; 2072 : 	// remove all the current thinkers
; 2073 : 	currentthinker = thinkercap.next;

  0000d	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00012	89 45 fc	 mov	 DWORD PTR _currentthinker$[ebp], eax

; 2074 : 	for (currentthinker = thinkercap.next; currentthinker != &thinkercap; currentthinker = next)

  00015	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0001a	89 45 fc	 mov	 DWORD PTR _currentthinker$[ebp], eax
  0001d	eb 06		 jmp	 SHORT $LN4@P_NetUnArc
$LN2@P_NetUnArc:
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00022	89 45 fc	 mov	 DWORD PTR _currentthinker$[ebp], eax
$LN4@P_NetUnArc:
  00025	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _currentthinker$[ebp], OFFSET _thinkercap
  0002c	74 37		 je	 SHORT $LN3@P_NetUnArc

; 2075 : 	{
; 2076 : 		next = currentthinker->next;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	89 4d f8	 mov	 DWORD PTR _next$[ebp], ecx

; 2077 : 
; 2078 : 		mobj = (mobj_t *)currentthinker;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  0003a	89 45 f4	 mov	 DWORD PTR _mobj$[ebp], eax

; 2079 : 		if (currentthinker->function.acp1 == (actionf_p1)P_MobjThinker)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00040	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00047	75 0e		 jne	 SHORT $LN16@P_NetUnArc

; 2080 : 			P_RemoveSavegameMobj((mobj_t *)currentthinker); // item isn't saved, don't remove it

  00049	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _P_RemoveSavegameMobj
  00052	83 c4 04	 add	 esp, 4
  00055	eb 0c		 jmp	 SHORT $LN17@P_NetUnArc
$LN16@P_NetUnArc:

; 2081 : 		else
; 2082 : 			Z_Free(currentthinker);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _Z_Free
  00060	83 c4 04	 add	 esp, 4
$LN17@P_NetUnArc:

; 2083 : 	}

  00063	eb ba		 jmp	 SHORT $LN2@P_NetUnArc
$LN3@P_NetUnArc:

; 2084 : 
; 2085 : 	// we don't want the removed mobjs to come back
; 2086 : 	iquetail = iquehead = 0;

  00065	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _iquehead, 0
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  00074	a3 00 00 00 00	 mov	 DWORD PTR _iquetail, eax

; 2087 : 	P_InitThinkers();

  00079	e8 00 00 00 00	 call	 _P_InitThinkers
  0007e	90		 npad	 1
$LN5@P_NetUnArc:

; 2088 : 
; 2089 : 	// read in saved thinkers
; 2090 : 	for (;;)
; 2091 : 	{
; 2092 : 		tclass = READUINT8(save_p);

  0007f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00084	8a 08		 mov	 cl, BYTE PTR [eax]
  00086	88 4d eb	 mov	 BYTE PTR _tclass$[ebp], cl
  00089	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0008f	83 c2 01	 add	 edx, 1
  00092	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2093 : 
; 2094 : 		if (tclass == tc_end)

  00098	0f b6 45 eb	 movzx	 eax, BYTE PTR _tclass$[ebp]
  0009c	83 f8 22	 cmp	 eax, 34			; 00000022H
  0009f	75 05		 jne	 SHORT $LN18@P_NetUnArc

; 2095 : 			break; // leave the saved thinker reading loop

  000a1	e9 1b 0c 00 00	 jmp	 $LN6@P_NetUnArc
$LN18@P_NetUnArc:

; 2096 : 
; 2097 : 		switch (tclass)

  000a6	0f b6 45 eb	 movzx	 eax, BYTE PTR _tclass$[ebp]
  000aa	89 45 8c	 mov	 DWORD PTR tv74[ebp], eax
  000ad	83 7d 8c 21	 cmp	 DWORD PTR tv74[ebp], 33	; 00000021H
  000b1	0f 87 f3 0b 00
	00		 ja	 $LN111@P_NetUnArc
  000b7	8b 4d 8c	 mov	 ecx, DWORD PTR tv74[ebp]
  000ba	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN116@P_NetUnArc[ecx*4]
$LN19@P_NetUnArc:

; 2098 : 		{
; 2099 : 			case tc_mobj:
; 2100 : 				diff = READUINT32(save_p);

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c8	89 4d f0	 mov	 DWORD PTR _diff$[ebp], ecx
  000cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  000d1	83 c2 04	 add	 edx, 4
  000d4	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2101 : 
; 2102 : 				next = (void *)(size_t)READUINT32(save_p);

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	89 4d f8	 mov	 DWORD PTR _next$[ebp], ecx
  000e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  000ea	83 c2 04	 add	 edx, 4
  000ed	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2103 : 
; 2104 : 				z = READFIXED(save_p); // Force this so 3dfloor problems don't arise.

  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	89 4d e4	 mov	 DWORD PTR _z$[ebp], ecx
  000fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00103	83 c2 04	 add	 edx, 4
  00106	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2105 : 				floorz = READFIXED(save_p);

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00111	8b 08		 mov	 ecx, DWORD PTR [eax]
  00113	89 4d e0	 mov	 DWORD PTR _floorz$[ebp], ecx
  00116	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0011c	83 c2 04	 add	 edx, 4
  0011f	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2106 : 				ceilingz = READFIXED(save_p);

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0012a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012c	89 4d dc	 mov	 DWORD PTR _ceilingz$[ebp], ecx
  0012f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00135	83 c2 04	 add	 edx, 4
  00138	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2107 : 
; 2108 : 				if (diff & MD_SPAWNPOINT)

  0013e	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00141	83 e0 01	 and	 eax, 1
  00144	0f 84 91 00 00
	00		 je	 $LN20@P_NetUnArc

; 2109 : 				{
; 2110 : 					UINT16 spawnpointnum = READUINT16(save_p);

  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0014f	66 8b 08	 mov	 cx, WORD PTR [eax]
  00152	66 89 4d d8	 mov	 WORD PTR _spawnpointnum$3[ebp], cx
  00156	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0015c	83 c2 02	 add	 edx, 2
  0015f	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2111 : 
; 2112 : 					if (mapthings[spawnpointnum].type == 1705) // NiGHTS Hoop special case

  00165	0f b7 45 d8	 movzx	 eax, WORD PTR _spawnpointnum$3[ebp]
  00169	6b c8 14	 imul	 ecx, eax, 20
  0016c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _mapthings
  00172	0f b7 44 0a 06	 movzx	 eax, WORD PTR [edx+ecx+6]
  00177	3d a9 06 00 00	 cmp	 eax, 1705		; 000006a9H
  0017c	75 1b		 jne	 SHORT $LN22@P_NetUnArc

; 2113 : 					{
; 2114 : 						P_SpawnHoopsAndRings(&mapthings[spawnpointnum]);

  0017e	0f b7 45 d8	 movzx	 eax, WORD PTR _spawnpointnum$3[ebp]
  00182	6b c8 14	 imul	 ecx, eax, 20
  00185	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _mapthings
  0018b	51		 push	 ecx
  0018c	e8 00 00 00 00	 call	 _P_SpawnHoopsAndRings
  00191	83 c4 04	 add	 esp, 4

; 2115 : 						continue;

  00194	e9 e6 fe ff ff	 jmp	 $LN5@P_NetUnArc
$LN22@P_NetUnArc:

; 2116 : 					}
; 2117 : 
; 2118 : 					mobj = Z_Calloc(sizeof (*mobj), PU_LEVEL, NULL);

  00199	6a 00		 push	 0
  0019b	6a 00		 push	 0
  0019d	6a 32		 push	 50			; 00000032H
  0019f	68 d4 00 00 00	 push	 212			; 000000d4H
  001a4	e8 00 00 00 00	 call	 _Z_CallocAlign
  001a9	83 c4 10	 add	 esp, 16			; 00000010H
  001ac	89 45 f4	 mov	 DWORD PTR _mobj$[ebp], eax

; 2119 : 
; 2120 : 					mobj->spawnpoint = &mapthings[spawnpointnum];

  001af	0f b7 45 d8	 movzx	 eax, WORD PTR _spawnpointnum$3[ebp]
  001b3	6b c8 14	 imul	 ecx, eax, 20
  001b6	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _mapthings
  001bc	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  001bf	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2121 : 					mapthings[spawnpointnum].mobj = mobj;

  001c5	0f b7 45 d8	 movzx	 eax, WORD PTR _spawnpointnum$3[ebp]
  001c9	6b c8 14	 imul	 ecx, eax, 20
  001cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _mapthings
  001d2	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  001d5	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 2122 : 				}

  001d9	eb 16		 jmp	 SHORT $LN21@P_NetUnArc
$LN20@P_NetUnArc:

; 2123 : 				else
; 2124 : 					mobj = Z_Calloc(sizeof (*mobj), PU_LEVEL, NULL);

  001db	6a 00		 push	 0
  001dd	6a 00		 push	 0
  001df	6a 32		 push	 50			; 00000032H
  001e1	68 d4 00 00 00	 push	 212			; 000000d4H
  001e6	e8 00 00 00 00	 call	 _Z_CallocAlign
  001eb	83 c4 10	 add	 esp, 16			; 00000010H
  001ee	89 45 f4	 mov	 DWORD PTR _mobj$[ebp], eax
$LN21@P_NetUnArc:

; 2125 : 
; 2126 : 				mobj->z = z;

  001f1	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  001f4	8b 4d e4	 mov	 ecx, DWORD PTR _z$[ebp]
  001f7	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2127 : 				mobj->floorz = floorz;

  001fa	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  001fd	8b 4d e0	 mov	 ecx, DWORD PTR _floorz$[ebp]
  00200	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 2128 : 				mobj->ceilingz = ceilingz;

  00203	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00206	8b 4d dc	 mov	 ecx, DWORD PTR _ceilingz$[ebp]
  00209	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 2129 : 
; 2130 : 				if (diff & MD_TYPE)

  0020c	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  0020f	83 e0 04	 and	 eax, 4
  00212	74 20		 je	 SHORT $LN23@P_NetUnArc

; 2131 : 					mobj->type = READUINT32(save_p);

  00214	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00217	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0021d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0021f	89 50 7c	 mov	 DWORD PTR [eax+124], edx
  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00227	83 c0 04	 add	 eax, 4
  0022a	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0022f	e9 99 00 00 00	 jmp	 $LN24@P_NetUnArc
$LN23@P_NetUnArc:

; 2132 : 				else
; 2133 : 				{
; 2134 : 					for (i = 0; i < NUMMOBJTYPES; i++)

  00234	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0023b	eb 09		 jmp	 SHORT $LN12@P_NetUnArc
$LN10@P_NetUnArc:
  0023d	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00240	83 c0 01	 add	 eax, 1
  00243	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN12@P_NetUnArc:
  00246	81 7d ec be 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 446	; 000001beH
  0024d	7d 29		 jge	 SHORT $LN11@P_NetUnArc

; 2135 : 						if (mobj->spawnpoint && mobj->spawnpoint->type == mobjinfo[i].doomednum)

  0024f	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00252	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  00259	74 1b		 je	 SHORT $LN25@P_NetUnArc
  0025b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0025e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00264	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  00268	6b 45 ec 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  0026c	3b 90 00 00 00
	00		 cmp	 edx, DWORD PTR _mobjinfo[eax]
  00272	75 02		 jne	 SHORT $LN25@P_NetUnArc

; 2136 : 							break;

  00274	eb 02		 jmp	 SHORT $LN11@P_NetUnArc
$LN25@P_NetUnArc:
  00276	eb c5		 jmp	 SHORT $LN10@P_NetUnArc
$LN11@P_NetUnArc:

; 2137 : 					if (i == NUMMOBJTYPES)

  00278	81 7d ec be 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 446	; 000001beH
  0027f	75 43		 jne	 SHORT $LN26@P_NetUnArc

; 2138 : 					{
; 2139 : 						if (mobj->spawnpoint)

  00281	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00284	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  0028b	74 1d		 je	 SHORT $LN27@P_NetUnArc

; 2140 : 							CONS_Printf("found mobj with unknown map thing type %d\n",

  0028d	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00290	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00296	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  0029a	52		 push	 edx
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@GDNAMFKP@found?5mobj?5with?5unknown?5map?5thi@
  002a0	e8 00 00 00 00	 call	 _CONS_Printf
  002a5	83 c4 08	 add	 esp, 8
  002a8	eb 0d		 jmp	 SHORT $LN28@P_NetUnArc
$LN27@P_NetUnArc:

; 2141 : 							mobj->spawnpoint->type);
; 2142 : 						else
; 2143 : 							CONS_Printf("found mobj with unknown map thing type NULL\n");

  002aa	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@BPDAAKJ@found?5mobj?5with?5unknown?5map?5thi@
  002af	e8 00 00 00 00	 call	 _CONS_Printf
  002b4	83 c4 04	 add	 esp, 4
$LN28@P_NetUnArc:

; 2144 : 						I_Error("Savegame corrupted");

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MCNAHAPO@Savegame?5corrupted@
  002bc	e8 00 00 00 00	 call	 _I_Error
  002c1	83 c4 04	 add	 esp, 4
$LN26@P_NetUnArc:

; 2145 : 					}
; 2146 : 					mobj->type = i;

  002c4	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  002c7	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  002ca	89 48 7c	 mov	 DWORD PTR [eax+124], ecx
$LN24@P_NetUnArc:

; 2147 : 				}
; 2148 : 				mobj->info = &mobjinfo[mobj->type];

  002cd	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  002d0	6b 48 7c 60	 imul	 ecx, DWORD PTR [eax+124], 96
  002d4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mobjinfo
  002da	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  002dd	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx

; 2149 : 				if (diff & MD_POS)

  002e3	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  002e6	83 e0 02	 and	 eax, 2
  002e9	74 53		 je	 SHORT $LN29@P_NetUnArc

; 2150 : 				{
; 2151 : 					mobj->x = READFIXED(save_p);

  002eb	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  002ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  002f4	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f6	89 50 10	 mov	 DWORD PTR [eax+16], edx
  002f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002fe	83 c0 04	 add	 eax, 4
  00301	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2152 : 					mobj->y = READFIXED(save_p);

  00306	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00309	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0030f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00311	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00314	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00319	83 c0 04	 add	 eax, 4
  0031c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2153 : 					mobj->angle = READANGLE(save_p);

  00321	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00324	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0032a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0032c	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0032f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00334	83 c0 04	 add	 eax, 4
  00337	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2154 : 				}

  0033c	eb 49		 jmp	 SHORT $LN30@P_NetUnArc
$LN29@P_NetUnArc:

; 2155 : 				else
; 2156 : 				{
; 2157 : 					mobj->x = mobj->spawnpoint->x << FRACBITS;

  0033e	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00341	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00347	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0034a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0034d	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00350	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 2158 : 					mobj->y = mobj->spawnpoint->y << FRACBITS;

  00353	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00356	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0035c	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  00360	c1 e2 10	 shl	 edx, 16			; 00000010H
  00363	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00366	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 2159 : 					mobj->angle = ANGLE_45 * (mobj->spawnpoint->angle/45); /// \bug unknown

  00369	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0036c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00372	0f bf 41 04	 movsx	 eax, WORD PTR [ecx+4]
  00376	99		 cdq
  00377	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  0037c	f7 f9		 idiv	 ecx
  0037e	c1 e0 1d	 shl	 eax, 29			; 0000001dH
  00381	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  00384	89 42 24	 mov	 DWORD PTR [edx+36], eax
$LN30@P_NetUnArc:

; 2160 : 				}
; 2161 : 				if (diff & MD_MOM)

  00387	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  0038a	83 e0 08	 and	 eax, 8
  0038d	74 51		 je	 SHORT $LN31@P_NetUnArc

; 2162 : 				{
; 2163 : 					mobj->momx = READFIXED(save_p);

  0038f	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00392	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00398	8b 11		 mov	 edx, DWORD PTR [ecx]
  0039a	89 50 48	 mov	 DWORD PTR [eax+72], edx
  0039d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003a2	83 c0 04	 add	 eax, 4
  003a5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2164 : 					mobj->momy = READFIXED(save_p);

  003aa	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  003b3	8b 11		 mov	 edx, DWORD PTR [ecx]
  003b5	89 50 4c	 mov	 DWORD PTR [eax+76], edx
  003b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003bd	83 c0 04	 add	 eax, 4
  003c0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2165 : 					mobj->momz = READFIXED(save_p);

  003c5	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  003ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d0	89 50 50	 mov	 DWORD PTR [eax+80], edx
  003d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003d8	83 c0 04	 add	 eax, 4
  003db	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN31@P_NetUnArc:

; 2166 : 				} // otherwise they're zero, and the memset took care of it
; 2167 : 
; 2168 : 				if (diff & MD_RADIUS)

  003e0	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  003e3	83 e0 10	 and	 eax, 16			; 00000010H
  003e6	74 1d		 je	 SHORT $LN32@P_NetUnArc

; 2169 : 					mobj->radius = READFIXED(save_p);

  003e8	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  003f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f3	89 50 40	 mov	 DWORD PTR [eax+64], edx
  003f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003fb	83 c0 04	 add	 eax, 4
  003fe	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00403	eb 12		 jmp	 SHORT $LN33@P_NetUnArc
$LN32@P_NetUnArc:

; 2170 : 				else
; 2171 : 					mobj->radius = mobj->info->radius;

  00405	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00408	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0040e	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  00411	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  00414	89 42 40	 mov	 DWORD PTR [edx+64], eax
$LN33@P_NetUnArc:

; 2172 : 				if (diff & MD_HEIGHT)

  00417	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  0041a	83 e0 20	 and	 eax, 32			; 00000020H
  0041d	74 1d		 je	 SHORT $LN34@P_NetUnArc

; 2173 : 					mobj->height = READFIXED(save_p);

  0041f	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00422	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00428	8b 11		 mov	 edx, DWORD PTR [ecx]
  0042a	89 50 44	 mov	 DWORD PTR [eax+68], edx
  0042d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00432	83 c0 04	 add	 eax, 4
  00435	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0043a	eb 12		 jmp	 SHORT $LN35@P_NetUnArc
$LN34@P_NetUnArc:

; 2174 : 				else
; 2175 : 					mobj->height = mobj->info->height;

  0043c	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0043f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00445	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  00448	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  0044b	89 42 44	 mov	 DWORD PTR [edx+68], eax
$LN35@P_NetUnArc:

; 2176 : 				if (diff & MD_FLAGS)

  0044e	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00451	83 e0 40	 and	 eax, 64			; 00000040H
  00454	74 46		 je	 SHORT $LN36@P_NetUnArc

; 2177 : 				{
; 2178 : 					mobj->flags = READINT32(save_p);

  00456	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00459	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0045f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00461	89 50 60	 mov	 DWORD PTR [eax+96], edx
  00464	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00469	83 c0 04	 add	 eax, 4
  0046c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2179 : 					if (mobj->flags & MF_TRANSLATION)

  00471	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00474	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00477	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  0047d	74 1b		 je	 SHORT $LN38@P_NetUnArc

; 2180 : 						mobj->color = READUINT8(save_p);

  0047f	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00482	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00488	8a 11		 mov	 dl, BYTE PTR [ecx]
  0048a	88 50 68	 mov	 BYTE PTR [eax+104], dl
  0048d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00492	83 c0 01	 add	 eax, 1
  00495	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN38@P_NetUnArc:

; 2181 : 				}

  0049a	eb 12		 jmp	 SHORT $LN37@P_NetUnArc
$LN36@P_NetUnArc:

; 2182 : 				else
; 2183 : 					mobj->flags = mobj->info->flags;

  0049c	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0049f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  004a5	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  004a8	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  004ab	89 42 60	 mov	 DWORD PTR [edx+96], eax
$LN37@P_NetUnArc:

; 2184 : 				mobj->flags2 = READINT32(save_p);

  004ae	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  004b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  004b9	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx
  004bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004c4	83 c0 04	 add	 eax, 4
  004c7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2185 : 				if (diff & MD_HEALTH)

  004cc	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  004cf	25 80 00 00 00	 and	 eax, 128		; 00000080H
  004d4	74 20		 je	 SHORT $LN39@P_NetUnArc

; 2186 : 					mobj->health = READINT32(save_p);

  004d6	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  004df	8b 11		 mov	 edx, DWORD PTR [ecx]
  004e1	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx
  004e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004ec	83 c0 04	 add	 eax, 4
  004ef	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  004f4	eb 15		 jmp	 SHORT $LN40@P_NetUnArc
$LN39@P_NetUnArc:

; 2187 : 				else
; 2188 : 					mobj->health = mobj->info->spawnhealth;

  004f6	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004f9	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  004ff	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  00502	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00505	89 82 8c 00 00
	00		 mov	 DWORD PTR [edx+140], eax
$LN40@P_NetUnArc:

; 2189 : 				if (diff & MD_RTIME)

  0050b	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  0050e	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00513	74 20		 je	 SHORT $LN41@P_NetUnArc

; 2190 : 					mobj->reactiontime = READINT32(save_p);

  00515	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00518	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0051e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00520	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  00526	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0052b	83 c0 04	 add	 eax, 4
  0052e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00533	eb 15		 jmp	 SHORT $LN42@P_NetUnArc
$LN41@P_NetUnArc:

; 2191 : 				else
; 2192 : 					mobj->reactiontime = mobj->info->reactiontime;

  00535	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00538	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0053e	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  00541	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00544	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax
$LN42@P_NetUnArc:

; 2193 : 
; 2194 : 				if (diff & MD_STATE)

  0054a	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  0054d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00552	74 28		 je	 SHORT $LN43@P_NetUnArc

; 2195 : 					mobj->state = &states[READUINT16(save_p)];

  00554	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00559	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0055c	6b d1 1c	 imul	 edx, ecx, 28
  0055f	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00565	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00568	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  0056b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00571	83 c1 02	 add	 ecx, 2
  00574	89 0d 00 00 00
	00		 mov	 DWORD PTR _save_p, ecx
  0057a	eb 19		 jmp	 SHORT $LN44@P_NetUnArc
$LN43@P_NetUnArc:

; 2196 : 				else
; 2197 : 					mobj->state = &states[mobj->info->spawnstate];

  0057c	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0057f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00585	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  00589	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  0058f	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00592	89 50 5c	 mov	 DWORD PTR [eax+92], edx
$LN44@P_NetUnArc:

; 2198 : 				if (diff & MD_TICS)

  00595	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00598	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0059d	74 1d		 je	 SHORT $LN45@P_NetUnArc

; 2199 : 					mobj->tics = READINT32(save_p);

  0059f	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  005a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  005a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  005aa	89 50 58	 mov	 DWORD PTR [eax+88], edx
  005ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005b2	83 c0 04	 add	 eax, 4
  005b5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  005ba	eb 0f		 jmp	 SHORT $LN46@P_NetUnArc
$LN45@P_NetUnArc:

; 2200 : 				else
; 2201 : 					mobj->tics = mobj->state->tics;

  005bc	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  005bf	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  005c2	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  005c5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  005c8	89 42 58	 mov	 DWORD PTR [edx+88], eax
$LN46@P_NetUnArc:

; 2202 : 				if (diff & MD_SPRITE)

  005cb	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  005ce	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  005d3	74 1d		 je	 SHORT $LN47@P_NetUnArc

; 2203 : 					mobj->sprite = READUINT16(save_p);

  005d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005da	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  005dd	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  005e0	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
  005e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005e8	83 c0 02	 add	 eax, 2
  005eb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  005f0	eb 0e		 jmp	 SHORT $LN48@P_NetUnArc
$LN47@P_NetUnArc:

; 2204 : 				else
; 2205 : 					mobj->sprite = mobj->state->sprite;

  005f2	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  005f5	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  005f8	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  005fb	8b 01		 mov	 eax, DWORD PTR [ecx]
  005fd	89 42 28	 mov	 DWORD PTR [edx+40], eax
$LN48@P_NetUnArc:

; 2206 : 				if (diff & MD_FRAME)

  00600	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00603	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00608	74 1d		 je	 SHORT $LN49@P_NetUnArc

; 2207 : 					mobj->frame = READUINT32(save_p);

  0060a	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0060d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00613	8b 11		 mov	 edx, DWORD PTR [ecx]
  00615	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00618	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0061d	83 c0 04	 add	 eax, 4
  00620	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00625	eb 0f		 jmp	 SHORT $LN50@P_NetUnArc
$LN49@P_NetUnArc:

; 2208 : 				else
; 2209 : 					mobj->frame = mobj->state->frame;

  00627	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0062a	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0062d	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  00630	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00633	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN50@P_NetUnArc:

; 2210 : 				if (diff & MD_EFLAGS)

  00636	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00639	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0063e	74 1e		 je	 SHORT $LN51@P_NetUnArc

; 2211 : 					mobj->eflags = READUINT32(save_p);

  00640	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00643	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00649	8b 11		 mov	 edx, DWORD PTR [ecx]
  0064b	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx
  00651	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00656	83 c0 04	 add	 eax, 4
  00659	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN51@P_NetUnArc:

; 2212 : 				if (diff & MD_PLAYER)

  0065e	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00661	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00666	74 69		 je	 SHORT $LN54@P_NetUnArc

; 2213 : 				{
; 2214 : 					i = READUINT8(save_p);

  00668	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0066d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00670	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
  00673	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00679	83 c2 01	 add	 edx, 1
  0067c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2215 : 					mobj->player = &players[i];

  00682	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00689	05 00 00 00 00	 add	 eax, OFFSET _players
  0068e	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00691	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 2216 : 					mobj->player->mo = mobj;

  00697	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0069a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  006a0	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  006a3	89 11		 mov	 DWORD PTR [ecx], edx

; 2217 : 					// added for angle prediction
; 2218 : 					if (consoleplayer == i)

  006a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  006aa	3b 45 ec	 cmp	 eax, DWORD PTR _i$[ebp]
  006ad	75 0c		 jne	 SHORT $LN53@P_NetUnArc

; 2219 : 						localangle = mobj->angle;

  006af	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  006b2	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  006b5	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle, ecx
$LN53@P_NetUnArc:

; 2220 : 					if (secondarydisplayplayer == i)

  006bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _secondarydisplayplayer
  006c0	3b 45 ec	 cmp	 eax, DWORD PTR _i$[ebp]
  006c3	75 0c		 jne	 SHORT $LN54@P_NetUnArc

; 2221 : 						localangle2 = mobj->angle;

  006c5	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  006c8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  006cb	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle2, ecx
$LN54@P_NetUnArc:

; 2222 : 				}
; 2223 : 				if (diff & MD_MOVEDIR)

  006d1	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  006d4	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  006d9	74 1e		 je	 SHORT $LN55@P_NetUnArc

; 2224 : 					mobj->movedir = READANGLE(save_p);

  006db	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  006de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  006e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  006e6	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx
  006ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  006f1	83 c0 04	 add	 eax, 4
  006f4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN55@P_NetUnArc:

; 2225 : 				if (diff & MD_MOVECOUNT)

  006f9	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  006fc	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  00701	74 1e		 je	 SHORT $LN56@P_NetUnArc

; 2226 : 					mobj->movecount = READINT32(save_p);

  00703	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00706	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0070c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0070e	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx
  00714	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00719	83 c0 04	 add	 eax, 4
  0071c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN56@P_NetUnArc:

; 2227 : 				if (diff & MD_THRESHOLD)

  00721	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00724	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  00729	74 1e		 je	 SHORT $LN57@P_NetUnArc

; 2228 : 					mobj->threshold = READINT32(save_p);

  0072b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0072e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00734	8b 11		 mov	 edx, DWORD PTR [ecx]
  00736	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx
  0073c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00741	83 c0 04	 add	 eax, 4
  00744	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN57@P_NetUnArc:

; 2229 : 				if (diff & MD_LASTLOOK)

  00749	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  0074c	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00751	74 20		 je	 SHORT $LN58@P_NetUnArc

; 2230 : 					mobj->lastlook = READINT32(save_p);

  00753	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00756	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0075c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0075e	89 90 a8 00 00
	00		 mov	 DWORD PTR [eax+168], edx
  00764	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00769	83 c0 04	 add	 eax, 4
  0076c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00771	eb 0d		 jmp	 SHORT $LN59@P_NetUnArc
$LN58@P_NetUnArc:

; 2231 : 				else
; 2232 : 					mobj->lastlook = -1;

  00773	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00776	c7 80 a8 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+168], -1
$LN59@P_NetUnArc:

; 2233 : 				if (diff & MD_TARGET)

  00780	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00783	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  00788	74 1e		 je	 SHORT $LN60@P_NetUnArc

; 2234 : 					mobj->target = (mobj_t *)(size_t)READUINT32(save_p);

  0078a	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0078d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00793	8b 11		 mov	 edx, DWORD PTR [ecx]
  00795	89 90 98 00 00
	00		 mov	 DWORD PTR [eax+152], edx
  0079b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007a0	83 c0 04	 add	 eax, 4
  007a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN60@P_NetUnArc:

; 2235 : 				if (diff & MD_TRACER)

  007a8	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  007ab	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  007b0	74 1e		 je	 SHORT $LN61@P_NetUnArc

; 2236 : 					mobj->tracer = (mobj_t *)(size_t)READUINT32(save_p);

  007b2	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  007b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  007bb	8b 11		 mov	 edx, DWORD PTR [ecx]
  007bd	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx
  007c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007c8	83 c0 04	 add	 eax, 4
  007cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN61@P_NetUnArc:

; 2237 : 				if (diff & MD_FRICTION)

  007d0	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  007d3	25 00 00 20 00	 and	 eax, 2097152		; 00200000H
  007d8	74 20		 je	 SHORT $LN62@P_NetUnArc

; 2238 : 					mobj->friction = READINT32(save_p);

  007da	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  007dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  007e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  007e5	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx
  007eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007f0	83 c0 04	 add	 eax, 4
  007f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  007f8	eb 0d		 jmp	 SHORT $LN63@P_NetUnArc
$LN62@P_NetUnArc:

; 2239 : 				else
; 2240 : 					mobj->friction = ORIG_FRICTION;

  007fa	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  007fd	c7 80 b4 00 00
	00 00 e8 00 00	 mov	 DWORD PTR [eax+180], 59392 ; 0000e800H
$LN63@P_NetUnArc:

; 2241 : 				if (diff & MD_MOVEFACTOR)

  00807	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  0080a	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  0080f	74 20		 je	 SHORT $LN64@P_NetUnArc

; 2242 : 					mobj->movefactor = READINT32(save_p);

  00811	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00814	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0081a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0081c	89 90 b8 00 00
	00		 mov	 DWORD PTR [eax+184], edx
  00822	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00827	83 c0 04	 add	 eax, 4
  0082a	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0082f	eb 0d		 jmp	 SHORT $LN65@P_NetUnArc
$LN64@P_NetUnArc:

; 2243 : 				else
; 2244 : 					mobj->movefactor = ORIG_FRICTION_FACTOR;

  00831	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00834	c7 80 b8 00 00
	00 00 08 00 00	 mov	 DWORD PTR [eax+184], 2048 ; 00000800H
$LN65@P_NetUnArc:

; 2245 : 				if (diff & MD_FUSE)

  0083e	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00841	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00846	74 1e		 je	 SHORT $LN66@P_NetUnArc

; 2246 : 					mobj->fuse = READINT32(save_p);

  00848	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0084b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00851	8b 11		 mov	 edx, DWORD PTR [ecx]
  00853	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx
  00859	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0085e	83 c0 04	 add	 eax, 4
  00861	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN66@P_NetUnArc:

; 2247 : 				if (diff & MD_WATERTOP)

  00866	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00869	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0086e	74 1e		 je	 SHORT $LN67@P_NetUnArc

; 2248 : 					mobj->watertop = READINT32(save_p);

  00870	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00873	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00879	8b 11		 mov	 edx, DWORD PTR [ecx]
  0087b	89 90 c0 00 00
	00		 mov	 DWORD PTR [eax+192], edx
  00881	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00886	83 c0 04	 add	 eax, 4
  00889	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN67@P_NetUnArc:

; 2249 : 				if (diff & MD_WATERBOTTOM)

  0088e	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00891	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00896	74 1e		 je	 SHORT $LN68@P_NetUnArc

; 2250 : 					mobj->waterbottom = READINT32(save_p);

  00898	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0089b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  008a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  008a3	89 90 c4 00 00
	00		 mov	 DWORD PTR [eax+196], edx
  008a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  008ae	83 c0 04	 add	 eax, 4
  008b1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN68@P_NetUnArc:

; 2251 : 				if (diff & MD_SCALE)

  008b6	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  008b9	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  008be	74 22		 je	 SHORT $LN69@P_NetUnArc

; 2252 : 					mobj->scale = READUINT16(save_p);

  008c0	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  008c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  008c9	66 8b 11	 mov	 dx, WORD PTR [ecx]
  008cc	66 89 90 cc 00
	00 00		 mov	 WORD PTR [eax+204], dx
  008d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  008d8	83 c0 02	 add	 eax, 2
  008db	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  008e0	eb 0f		 jmp	 SHORT $LN70@P_NetUnArc
$LN69@P_NetUnArc:

; 2253 : 				else
; 2254 : 					mobj->scale = 100;

  008e2	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  008e7	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  008ea	66 89 81 cc 00
	00 00		 mov	 WORD PTR [ecx+204], ax
$LN70@P_NetUnArc:

; 2255 : 				if (diff & MD_DSCALE)

  008f1	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  008f4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008f9	74 22		 je	 SHORT $LN71@P_NetUnArc

; 2256 : 					mobj->destscale = READUINT16(save_p);

  008fb	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  008fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00904	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00907	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx
  0090e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00913	83 c0 02	 add	 eax, 2
  00916	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0091b	eb 14		 jmp	 SHORT $LN72@P_NetUnArc
$LN71@P_NetUnArc:

; 2257 : 				else
; 2258 : 					mobj->destscale = mobj->scale;

  0091d	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00920	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00923	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  0092a	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx
$LN72@P_NetUnArc:

; 2259 : 
; 2260 : 				if (diff & MD_REDFLAG)

  00931	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00934	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00939	74 17		 je	 SHORT $LN73@P_NetUnArc

; 2261 : 				{
; 2262 : 					redflag = mobj;

  0093b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0093e	a3 00 00 00 00	 mov	 DWORD PTR _redflag, eax

; 2263 : 					rflagpoint = mobj->spawnpoint;

  00943	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00946	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0094c	89 0d 00 00 00
	00		 mov	 DWORD PTR _rflagpoint, ecx
$LN73@P_NetUnArc:

; 2264 : 				}
; 2265 : 				if (diff & MD_BLUEFLAG)

  00952	8b 45 f0	 mov	 eax, DWORD PTR _diff$[ebp]
  00955	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0095a	74 17		 je	 SHORT $LN74@P_NetUnArc

; 2266 : 				{
; 2267 : 					blueflag = mobj;

  0095c	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0095f	a3 00 00 00 00	 mov	 DWORD PTR _blueflag, eax

; 2268 : 					bflagpoint = mobj->spawnpoint;

  00964	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00967	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0096d	89 0d 00 00 00
	00		 mov	 DWORD PTR _bflagpoint, ecx
$LN74@P_NetUnArc:

; 2269 : 				}
; 2270 : 
; 2271 : 				mobj->scalespeed = READUINT8(save_p);

  00973	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00976	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0097c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0097e	88 90 d0 00 00
	00		 mov	 BYTE PTR [eax+208], dl
  00984	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00989	83 c0 01	 add	 eax, 1
  0098c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2272 : 
; 2273 : 				// now set deductable field
; 2274 : 				/// \todo save this too
; 2275 : 				mobj->skin = NULL;

  00991	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00994	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0

; 2276 : 
; 2277 : 				// set sprev, snext, bprev, bnext, subsector
; 2278 : 				P_SetThingPosition(mobj);

  0099b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0099e	50		 push	 eax
  0099f	e8 00 00 00 00	 call	 _P_SetThingPosition
  009a4	83 c4 04	 add	 esp, 4

; 2279 : 
; 2280 : 				mobj->mobjnum = READUINT32(save_p);

  009a7	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  009aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  009b0	8b 11		 mov	 edx, DWORD PTR [ecx]
  009b2	89 90 c8 00 00
	00		 mov	 DWORD PTR [eax+200], edx
  009b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  009bd	83 c0 04	 add	 eax, 4
  009c0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2281 : 
; 2282 : 				if (mobj->player)

  009c5	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  009c8	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  009cf	74 5a		 je	 SHORT $LN77@P_NetUnArc

; 2283 : 				{
; 2284 : 					if (mobj->eflags & MFE_VERTICALFLIP)

  009d1	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  009d4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  009da	83 e1 20	 and	 ecx, 32			; 00000020H
  009dd	74 26		 je	 SHORT $LN76@P_NetUnArc

; 2285 : 						mobj->player->viewz = mobj->z + mobj->height - mobj->player->viewheight;

  009df	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  009e2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  009e5	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  009e8	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  009eb	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  009ee	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  009f4	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  009f7	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  009fa	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  00a00	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00a03	eb 26		 jmp	 SHORT $LN77@P_NetUnArc
$LN76@P_NetUnArc:

; 2286 : 					else
; 2287 : 						mobj->player->viewz = mobj->player->mo->z + mobj->player->viewheight;

  00a05	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a08	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a0e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a10	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a13	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a19	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00a1c	03 51 14	 add	 edx, DWORD PTR [ecx+20]
  00a1f	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a22	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a28	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$LN77@P_NetUnArc:

; 2288 : 				}
; 2289 : 
; 2290 : 				mobj->thinker.function.acp1 = (actionf_p1)P_MobjThinker;

  00a2b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a2e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _P_MobjThinker

; 2291 : 				P_AddThinker(&mobj->thinker);

  00a35	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a38	50		 push	 eax
  00a39	e8 00 00 00 00	 call	 _P_AddThinker
  00a3e	83 c4 04	 add	 esp, 4

; 2292 : 
; 2293 : 				mobj->info = (mobjinfo_t *)next; // temporarily, set when leave this function

  00a41	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a44	8b 4d f8	 mov	 ecx, DWORD PTR _next$[ebp]
  00a47	89 88 80 00 00
	00		 mov	 DWORD PTR [eax+128], ecx

; 2294 : 				break;

  00a4d	e9 6a 02 00 00	 jmp	 $LN8@P_NetUnArc
$LN78@P_NetUnArc:

; 2295 : 
; 2296 : 			case tc_ceiling:
; 2297 : 				LoadCeilingThinker((actionf_p1)T_MoveCeiling);

  00a52	68 00 00 00 00	 push	 OFFSET _T_MoveCeiling
  00a57	e8 00 00 00 00	 call	 _LoadCeilingThinker
  00a5c	83 c4 04	 add	 esp, 4

; 2298 : 				break;

  00a5f	e9 58 02 00 00	 jmp	 $LN8@P_NetUnArc
$LN79@P_NetUnArc:

; 2299 : 
; 2300 : 			case tc_crushceiling:
; 2301 : 				LoadCeilingThinker((actionf_p1)T_CrushCeiling);

  00a64	68 00 00 00 00	 push	 OFFSET _T_CrushCeiling
  00a69	e8 00 00 00 00	 call	 _LoadCeilingThinker
  00a6e	83 c4 04	 add	 esp, 4

; 2302 : 				break;

  00a71	e9 46 02 00 00	 jmp	 $LN8@P_NetUnArc
$LN80@P_NetUnArc:

; 2303 : 
; 2304 : 			case tc_floor:
; 2305 : 				LoadFloormoveThinker((actionf_p1)T_MoveFloor);

  00a76	68 00 00 00 00	 push	 OFFSET _T_MoveFloor
  00a7b	e8 00 00 00 00	 call	 _LoadFloormoveThinker
  00a80	83 c4 04	 add	 esp, 4

; 2306 : 				break;

  00a83	e9 34 02 00 00	 jmp	 $LN8@P_NetUnArc
$LN81@P_NetUnArc:

; 2307 : 
; 2308 : 			case tc_flash:
; 2309 : 				LoadLightflashThinker((actionf_p1)T_LightningFlash);

  00a88	68 00 00 00 00	 push	 OFFSET _T_LightningFlash
  00a8d	e8 00 00 00 00	 call	 _LoadLightflashThinker
  00a92	83 c4 04	 add	 esp, 4

; 2310 : 				break;

  00a95	e9 22 02 00 00	 jmp	 $LN8@P_NetUnArc
$LN82@P_NetUnArc:

; 2311 : 
; 2312 : 			case tc_strobe:
; 2313 : 				LoadStrobeThinker((actionf_p1)T_StrobeFlash);

  00a9a	68 00 00 00 00	 push	 OFFSET _T_StrobeFlash
  00a9f	e8 00 00 00 00	 call	 _LoadStrobeThinker
  00aa4	83 c4 04	 add	 esp, 4

; 2314 : 				break;

  00aa7	e9 10 02 00 00	 jmp	 $LN8@P_NetUnArc
$LN83@P_NetUnArc:

; 2315 : 
; 2316 : 			case tc_glow:
; 2317 : 				LoadGlowThinker((actionf_p1)T_Glow);

  00aac	68 00 00 00 00	 push	 OFFSET _T_Glow
  00ab1	e8 00 00 00 00	 call	 _LoadGlowThinker
  00ab6	83 c4 04	 add	 esp, 4

; 2318 : 				break;

  00ab9	e9 fe 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN84@P_NetUnArc:

; 2319 : 
; 2320 : 			case tc_fireflicker:
; 2321 : 				LoadFireflickerThinker((actionf_p1)T_FireFlicker);

  00abe	68 00 00 00 00	 push	 OFFSET _T_FireFlicker
  00ac3	e8 00 00 00 00	 call	 _LoadFireflickerThinker
  00ac8	83 c4 04	 add	 esp, 4

; 2322 : 				break;

  00acb	e9 ec 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN85@P_NetUnArc:

; 2323 : 
; 2324 : 			case tc_elevator:
; 2325 : 				LoadElevatorThinker((actionf_p1)T_MoveElevator, 3);

  00ad0	6a 03		 push	 3
  00ad2	68 00 00 00 00	 push	 OFFSET _T_MoveElevator
  00ad7	e8 00 00 00 00	 call	 _LoadElevatorThinker
  00adc	83 c4 08	 add	 esp, 8

; 2326 : 				break;

  00adf	e9 d8 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN86@P_NetUnArc:

; 2327 : 
; 2328 : 			case tc_continuousfalling:
; 2329 : 				LoadSpecialLevelThinker((actionf_p1)T_ContinuousFalling, 3);

  00ae4	6a 03		 push	 3
  00ae6	68 00 00 00 00	 push	 OFFSET _T_ContinuousFalling
  00aeb	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00af0	83 c4 08	 add	 esp, 8

; 2330 : 				break;

  00af3	e9 c4 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN87@P_NetUnArc:

; 2331 : 
; 2332 : 			case tc_thwomp:
; 2333 : 				LoadSpecialLevelThinker((actionf_p1)T_ThwompSector, 3);

  00af8	6a 03		 push	 3
  00afa	68 00 00 00 00	 push	 OFFSET _T_ThwompSector
  00aff	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00b04	83 c4 08	 add	 esp, 8

; 2334 : 				break;

  00b07	e9 b0 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN88@P_NetUnArc:

; 2335 : 
; 2336 : 			case tc_noenemies:
; 2337 : 				LoadSpecialLevelThinker((actionf_p1)T_NoEnemiesSector, 0);

  00b0c	6a 00		 push	 0
  00b0e	68 00 00 00 00	 push	 OFFSET _T_NoEnemiesSector
  00b13	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00b18	83 c4 08	 add	 esp, 8

; 2338 : 				break;

  00b1b	e9 9c 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN89@P_NetUnArc:

; 2339 : 
; 2340 : 			case tc_eachtime:
; 2341 : 				LoadSpecialLevelThinker((actionf_p1)T_EachTimeThinker, 0);

  00b20	6a 00		 push	 0
  00b22	68 00 00 00 00	 push	 OFFSET _T_EachTimeThinker
  00b27	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00b2c	83 c4 08	 add	 esp, 8

; 2342 : 				break;

  00b2f	e9 88 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN90@P_NetUnArc:

; 2343 : 
; 2344 : 			case tc_raisesector:
; 2345 : 				LoadSpecialLevelThinker((actionf_p1)T_RaiseSector, 0);

  00b34	6a 00		 push	 0
  00b36	68 00 00 00 00	 push	 OFFSET _T_RaiseSector
  00b3b	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00b40	83 c4 08	 add	 esp, 8

; 2346 : 				break;

  00b43	e9 74 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN91@P_NetUnArc:

; 2347 : 
; 2348 : 			/// \todo rewrite all the shit that uses an elevator_t but isn't an elevator
; 2349 : 			/// \note working on it!
; 2350 : 			case tc_camerascanner:
; 2351 : 				LoadElevatorThinker((actionf_p1)T_CameraScanner, 0);

  00b48	6a 00		 push	 0
  00b4a	68 00 00 00 00	 push	 OFFSET _T_CameraScanner
  00b4f	e8 00 00 00 00	 call	 _LoadElevatorThinker
  00b54	83 c4 08	 add	 esp, 8

; 2352 : 				break;

  00b57	e9 60 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN92@P_NetUnArc:

; 2353 : 
; 2354 : 			case tc_bouncecheese:
; 2355 : 				LoadSpecialLevelThinker((actionf_p1)T_BounceCheese, 2);

  00b5c	6a 02		 push	 2
  00b5e	68 00 00 00 00	 push	 OFFSET _T_BounceCheese
  00b63	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00b68	83 c4 08	 add	 esp, 8

; 2356 : 				break;

  00b6b	e9 4c 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN93@P_NetUnArc:

; 2357 : 
; 2358 : 			case tc_startcrumble:
; 2359 : 				LoadElevatorThinker((actionf_p1)T_StartCrumble, 1);

  00b70	6a 01		 push	 1
  00b72	68 00 00 00 00	 push	 OFFSET _T_StartCrumble
  00b77	e8 00 00 00 00	 call	 _LoadElevatorThinker
  00b7c	83 c4 08	 add	 esp, 8

; 2360 : 				break;

  00b7f	e9 38 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN94@P_NetUnArc:

; 2361 : 
; 2362 : 			case tc_marioblock:
; 2363 : 				LoadSpecialLevelThinker((actionf_p1)T_MarioBlock, 3);

  00b84	6a 03		 push	 3
  00b86	68 00 00 00 00	 push	 OFFSET _T_MarioBlock
  00b8b	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00b90	83 c4 08	 add	 esp, 8

; 2364 : 				break;

  00b93	e9 24 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN95@P_NetUnArc:

; 2365 : 
; 2366 : 			case tc_spikesector:
; 2367 : 				LoadSpecialLevelThinker((actionf_p1)T_SpikeSector, 0);

  00b98	6a 00		 push	 0
  00b9a	68 00 00 00 00	 push	 OFFSET _T_SpikeSector
  00b9f	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00ba4	83 c4 08	 add	 esp, 8

; 2368 : 				break;

  00ba7	e9 10 01 00 00	 jmp	 $LN8@P_NetUnArc
$LN96@P_NetUnArc:

; 2369 : 
; 2370 : 			case tc_floatsector:
; 2371 : 				LoadSpecialLevelThinker((actionf_p1)T_FloatSector, 0);

  00bac	6a 00		 push	 0
  00bae	68 00 00 00 00	 push	 OFFSET _T_FloatSector
  00bb3	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00bb8	83 c4 08	 add	 esp, 8

; 2372 : 				break;

  00bbb	e9 fc 00 00 00	 jmp	 $LN8@P_NetUnArc
$LN97@P_NetUnArc:

; 2373 : 
; 2374 : 			case tc_bridgethinker:
; 2375 : 				LoadSpecialLevelThinker((actionf_p1)T_BridgeThinker, 3);

  00bc0	6a 03		 push	 3
  00bc2	68 00 00 00 00	 push	 OFFSET _T_BridgeThinker
  00bc7	e8 00 00 00 00	 call	 _LoadSpecialLevelThinker
  00bcc	83 c4 08	 add	 esp, 8

; 2376 : 				break;

  00bcf	e9 e8 00 00 00	 jmp	 $LN8@P_NetUnArc
$LN98@P_NetUnArc:

; 2377 : 
; 2378 : 			case tc_laserflash:
; 2379 : 				LoadLaserThinker((actionf_p1)T_LaserFlash);

  00bd4	68 00 00 00 00	 push	 OFFSET _T_LaserFlash
  00bd9	e8 00 00 00 00	 call	 _LoadLaserThinker
  00bde	83 c4 04	 add	 esp, 4

; 2380 : 				break;

  00be1	e9 d6 00 00 00	 jmp	 $LN8@P_NetUnArc
$LN99@P_NetUnArc:

; 2381 : 
; 2382 : 			case tc_lightfade:
; 2383 : 				LoadLightlevelThinker((actionf_p1)T_LightFade);

  00be6	68 00 00 00 00	 push	 OFFSET _T_LightFade
  00beb	e8 00 00 00 00	 call	 _LoadLightlevelThinker
  00bf0	83 c4 04	 add	 esp, 4

; 2384 : 				break;

  00bf3	e9 c4 00 00 00	 jmp	 $LN8@P_NetUnArc
$LN100@P_NetUnArc:

; 2385 : 
; 2386 : 			case tc_executor:
; 2387 : 				LoadExecutorThinker((actionf_p1)T_ExecutorDelay);

  00bf8	68 00 00 00 00	 push	 OFFSET _T_ExecutorDelay
  00bfd	e8 00 00 00 00	 call	 _LoadExecutorThinker
  00c02	83 c4 04	 add	 esp, 4

; 2388 : 				restoreNum = true;

  00c05	c6 45 ea 01	 mov	 BYTE PTR _restoreNum$[ebp], 1

; 2389 : 				break;

  00c09	e9 ae 00 00 00	 jmp	 $LN8@P_NetUnArc
$LN101@P_NetUnArc:

; 2390 : 
; 2391 : 			case tc_disappear:
; 2392 : 				LoadDisappearThinker((actionf_p1)T_Disappear);

  00c0e	68 00 00 00 00	 push	 OFFSET _T_Disappear
  00c13	e8 00 00 00 00	 call	 _LoadDisappearThinker
  00c18	83 c4 04	 add	 esp, 4

; 2393 : 				break;

  00c1b	e9 9c 00 00 00	 jmp	 $LN8@P_NetUnArc
$LN102@P_NetUnArc:

; 2394 : #ifdef POLYOBJECTS
; 2395 : 			case tc_polyrotate:
; 2396 : 				LoadPolyrotatetThinker((actionf_p1)T_PolyObjRotate);

  00c20	68 00 00 00 00	 push	 OFFSET _T_PolyObjRotate
  00c25	e8 00 00 00 00	 call	 _LoadPolyrotatetThinker
  00c2a	83 c4 04	 add	 esp, 4

; 2397 : 				break;

  00c2d	e9 8a 00 00 00	 jmp	 $LN8@P_NetUnArc
$LN103@P_NetUnArc:

; 2398 : 
; 2399 : 			case tc_polymove:
; 2400 : 				LoadPolymoveThinker((actionf_p1)T_PolyObjMove);

  00c32	68 00 00 00 00	 push	 OFFSET _T_PolyObjMove
  00c37	e8 00 00 00 00	 call	 _LoadPolymoveThinker
  00c3c	83 c4 04	 add	 esp, 4

; 2401 : 				break;

  00c3f	eb 7b		 jmp	 SHORT $LN8@P_NetUnArc
$LN104@P_NetUnArc:

; 2402 : 
; 2403 : 			case tc_polywaypoint:
; 2404 : 				LoadPolywaypointThinker((actionf_p1)T_PolyObjWaypoint);

  00c41	68 00 00 00 00	 push	 OFFSET _T_PolyObjWaypoint
  00c46	e8 00 00 00 00	 call	 _LoadPolywaypointThinker
  00c4b	83 c4 04	 add	 esp, 4

; 2405 : 				break;

  00c4e	eb 6c		 jmp	 SHORT $LN8@P_NetUnArc
$LN105@P_NetUnArc:

; 2406 : 
; 2407 : 			case tc_polyslidedoor:
; 2408 : 				LoadPolyslidedoorThinker((actionf_p1)T_PolyDoorSlide);

  00c50	68 00 00 00 00	 push	 OFFSET _T_PolyDoorSlide
  00c55	e8 00 00 00 00	 call	 _LoadPolyslidedoorThinker
  00c5a	83 c4 04	 add	 esp, 4

; 2409 : 				break;

  00c5d	eb 5d		 jmp	 SHORT $LN8@P_NetUnArc
$LN106@P_NetUnArc:

; 2410 : 
; 2411 : 			case tc_polyswingdoor:
; 2412 : 				LoadPolyswingdoorThinker((actionf_p1)T_PolyDoorSwing);

  00c5f	68 00 00 00 00	 push	 OFFSET _T_PolyDoorSwing
  00c64	e8 00 00 00 00	 call	 _LoadPolyswingdoorThinker
  00c69	83 c4 04	 add	 esp, 4

; 2413 : 				break;

  00c6c	eb 4e		 jmp	 SHORT $LN8@P_NetUnArc
$LN107@P_NetUnArc:

; 2414 : 			case tc_polyflag:
; 2415 : 				LoadPolymoveThinker((actionf_p1)T_PolyObjFlag);

  00c6e	68 00 00 00 00	 push	 OFFSET _T_PolyObjFlag
  00c73	e8 00 00 00 00	 call	 _LoadPolymoveThinker
  00c78	83 c4 04	 add	 esp, 4

; 2416 : 				break;

  00c7b	eb 3f		 jmp	 SHORT $LN8@P_NetUnArc
$LN108@P_NetUnArc:

; 2417 : #endif
; 2418 : 			case tc_scroll:
; 2419 : 				LoadScrollThinker((actionf_p1)T_Scroll);

  00c7d	68 00 00 00 00	 push	 OFFSET _T_Scroll
  00c82	e8 00 00 00 00	 call	 _LoadScrollThinker
  00c87	83 c4 04	 add	 esp, 4

; 2420 : 				break;

  00c8a	eb 30		 jmp	 SHORT $LN8@P_NetUnArc
$LN109@P_NetUnArc:

; 2421 : 
; 2422 : 			case tc_friction:
; 2423 : 				LoadFrictionThinker((actionf_p1)T_Friction);

  00c8c	68 00 00 00 00	 push	 OFFSET _T_Friction
  00c91	e8 00 00 00 00	 call	 _LoadFrictionThinker
  00c96	83 c4 04	 add	 esp, 4

; 2424 : 				break;

  00c99	eb 21		 jmp	 SHORT $LN8@P_NetUnArc
$LN110@P_NetUnArc:

; 2425 : 
; 2426 : 			case tc_pusher:
; 2427 : 				LoadPusherThinker((actionf_p1)T_Pusher);

  00c9b	68 00 00 00 00	 push	 OFFSET _T_Pusher
  00ca0	e8 00 00 00 00	 call	 _LoadPusherThinker
  00ca5	83 c4 04	 add	 esp, 4

; 2428 : 				break;

  00ca8	eb 12		 jmp	 SHORT $LN8@P_NetUnArc
$LN111@P_NetUnArc:

; 2429 : 
; 2430 : 			default:
; 2431 : 				I_Error("P_UnarchiveSpecials: Unknown tclass %d in savegame", tclass);

  00caa	0f b6 45 eb	 movzx	 eax, BYTE PTR _tclass$[ebp]
  00cae	50		 push	 eax
  00caf	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GPDFCACP@P_UnarchiveSpecials?3?5Unknown?5tc@
  00cb4	e8 00 00 00 00	 call	 _I_Error
  00cb9	83 c4 08	 add	 esp, 8
$LN8@P_NetUnArc:

; 2432 : 		}
; 2433 : 	}

  00cbc	e9 be f3 ff ff	 jmp	 $LN5@P_NetUnArc
$LN6@P_NetUnArc:

; 2434 : 
; 2435 : 	if (restoreNum)

  00cc1	0f b6 45 ea	 movzx	 eax, BYTE PTR _restoreNum$[ebp]
  00cc5	85 c0		 test	 eax, eax
  00cc7	74 58		 je	 SHORT $LN14@P_NetUnArc

; 2436 : 	{
; 2437 : 		executor_t *delay = NULL;

  00cc9	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _delay$2[ebp], 0

; 2438 : 		UINT32 mobjnum;
; 2439 : 		for (currentthinker = thinkercap.next; currentthinker != &thinkercap;

  00cd0	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00cd5	89 45 fc	 mov	 DWORD PTR _currentthinker$[ebp], eax
  00cd8	eb 09		 jmp	 SHORT $LN15@P_NetUnArc
$LN13@P_NetUnArc:

; 2440 : 			currentthinker = currentthinker->next)

  00cda	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00cdd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00ce0	89 4d fc	 mov	 DWORD PTR _currentthinker$[ebp], ecx
$LN15@P_NetUnArc:

; 2438 : 		UINT32 mobjnum;
; 2439 : 		for (currentthinker = thinkercap.next; currentthinker != &thinkercap;

  00ce3	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _currentthinker$[ebp], OFFSET _thinkercap
  00cea	74 35		 je	 SHORT $LN14@P_NetUnArc

; 2441 : 		{
; 2442 : 			if (currentthinker->function.acp1 == (actionf_p1)T_ExecutorDelay)

  00cec	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00cef	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_ExecutorDelay
  00cf6	75 27		 jne	 SHORT $LN114@P_NetUnArc

; 2443 : 			{
; 2444 : 				delay = (void *)currentthinker;

  00cf8	8b 45 fc	 mov	 eax, DWORD PTR _currentthinker$[ebp]
  00cfb	89 45 d4	 mov	 DWORD PTR _delay$2[ebp], eax

; 2445 : 				if ((mobjnum = (UINT32)(size_t)delay->caller))

  00cfe	8b 45 d4	 mov	 eax, DWORD PTR _delay$2[ebp]
  00d01	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00d04	89 4d d0	 mov	 DWORD PTR _mobjnum$1[ebp], ecx
  00d07	83 7d d0 00	 cmp	 DWORD PTR _mobjnum$1[ebp], 0
  00d0b	74 12		 je	 SHORT $LN114@P_NetUnArc

; 2446 : 					delay->caller = FindNewPosition(mobjnum);

  00d0d	8b 45 d0	 mov	 eax, DWORD PTR _mobjnum$1[ebp]
  00d10	50		 push	 eax
  00d11	e8 00 00 00 00	 call	 _FindNewPosition
  00d16	83 c4 04	 add	 esp, 4
  00d19	8b 4d d4	 mov	 ecx, DWORD PTR _delay$2[ebp]
  00d1c	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN114@P_NetUnArc:

; 2447 : 			}
; 2448 : 		}

  00d1f	eb b9		 jmp	 SHORT $LN13@P_NetUnArc
$LN14@P_NetUnArc:

; 2449 : 	}
; 2450 : }

  00d21	5f		 pop	 edi
  00d22	5e		 pop	 esi
  00d23	5b		 pop	 ebx
  00d24	8b e5		 mov	 esp, ebp
  00d26	5d		 pop	 ebp
  00d27	c3		 ret	 0
$LN116@P_NetUnArc:
  00d28	00 00 00 00	 DD	 $LN19@P_NetUnArc
  00d2c	00 00 00 00	 DD	 $LN78@P_NetUnArc
  00d30	00 00 00 00	 DD	 $LN80@P_NetUnArc
  00d34	00 00 00 00	 DD	 $LN81@P_NetUnArc
  00d38	00 00 00 00	 DD	 $LN82@P_NetUnArc
  00d3c	00 00 00 00	 DD	 $LN83@P_NetUnArc
  00d40	00 00 00 00	 DD	 $LN84@P_NetUnArc
  00d44	00 00 00 00	 DD	 $LN87@P_NetUnArc
  00d48	00 00 00 00	 DD	 $LN91@P_NetUnArc
  00d4c	00 00 00 00	 DD	 $LN85@P_NetUnArc
  00d50	00 00 00 00	 DD	 $LN86@P_NetUnArc
  00d54	00 00 00 00	 DD	 $LN92@P_NetUnArc
  00d58	00 00 00 00	 DD	 $LN93@P_NetUnArc
  00d5c	00 00 00 00	 DD	 $LN94@P_NetUnArc
  00d60	00 00 00 00	 DD	 $LN95@P_NetUnArc
  00d64	00 00 00 00	 DD	 $LN96@P_NetUnArc
  00d68	00 00 00 00	 DD	 $LN97@P_NetUnArc
  00d6c	00 00 00 00	 DD	 $LN79@P_NetUnArc
  00d70	00 00 00 00	 DD	 $LN108@P_NetUnArc
  00d74	00 00 00 00	 DD	 $LN109@P_NetUnArc
  00d78	00 00 00 00	 DD	 $LN110@P_NetUnArc
  00d7c	00 00 00 00	 DD	 $LN98@P_NetUnArc
  00d80	00 00 00 00	 DD	 $LN99@P_NetUnArc
  00d84	00 00 00 00	 DD	 $LN100@P_NetUnArc
  00d88	00 00 00 00	 DD	 $LN90@P_NetUnArc
  00d8c	00 00 00 00	 DD	 $LN88@P_NetUnArc
  00d90	00 00 00 00	 DD	 $LN89@P_NetUnArc
  00d94	00 00 00 00	 DD	 $LN101@P_NetUnArc
  00d98	00 00 00 00	 DD	 $LN102@P_NetUnArc
  00d9c	00 00 00 00	 DD	 $LN103@P_NetUnArc
  00da0	00 00 00 00	 DD	 $LN104@P_NetUnArc
  00da4	00 00 00 00	 DD	 $LN105@P_NetUnArc
  00da8	00 00 00 00	 DD	 $LN106@P_NetUnArc
  00dac	00 00 00 00	 DD	 $LN107@P_NetUnArc
_P_NetUnArchiveThinkers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadPolyswingdoorThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadPolyswingdoorThinker PROC				; COMDAT

; 2030 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2031 : 	polyswingdoor_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 30		 push	 48			; 00000030H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 2032 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 2033 : 	ht->polyObjNum = READINT32(save_p);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 04	 add	 eax, 4
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2034 : 	ht->delay = READINT32(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2035 : 	ht->delayCount = READINT32(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2036 : 	ht->initSpeed = READINT32(save_p);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	83 c0 04	 add	 eax, 4
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2037 : 	ht->speed = READINT32(save_p);

  00091	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a4	83 c0 04	 add	 eax, 4
  000a7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2038 : 	ht->initDistance = READINT32(save_p);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bf	83 c0 04	 add	 eax, 4
  000c2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2039 : 	ht->distance = READINT32(save_p);

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d2	89 50 28	 mov	 DWORD PTR [eax+40], edx
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000da	83 c0 04	 add	 eax, 4
  000dd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2040 : 	ht->closing = READUINT8(save_p);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000eb	8a 11		 mov	 dl, BYTE PTR [ecx]
  000ed	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f5	83 c0 01	 add	 eax, 1
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2041 : 	P_AddThinker(&ht->thinker);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 _P_AddThinker
  00106	83 c4 04	 add	 esp, 4

; 2042 : }

  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
_LoadPolyswingdoorThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadPolyslidedoorThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadPolyslidedoorThinker PROC				; COMDAT

; 2005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2006 : 	polyslidedoor_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 44		 push	 68			; 00000044H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 2007 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 2008 : 	ht->polyObjNum = READINT32(save_p);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 04	 add	 eax, 4
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2009 : 	ht->delay = READINT32(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2010 : 	ht->delayCount = READINT32(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2011 : 	ht->initSpeed = READINT32(save_p);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	83 c0 04	 add	 eax, 4
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2012 : 	ht->speed = READINT32(save_p);

  00091	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a4	83 c0 04	 add	 eax, 4
  000a7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2013 : 	ht->initDistance = READINT32(save_p);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bf	83 c0 04	 add	 eax, 4
  000c2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2014 : 	ht->distance = READINT32(save_p);

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d2	89 50 28	 mov	 DWORD PTR [eax+40], edx
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000da	83 c0 04	 add	 eax, 4
  000dd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2015 : 	ht->initAngle = READUINT32(save_p);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f5	83 c0 04	 add	 eax, 4
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2016 : 	ht->angle = READUINT32(save_p);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00106	8b 11		 mov	 edx, DWORD PTR [ecx]
  00108	89 50 30	 mov	 DWORD PTR [eax+48], edx
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00110	83 c0 04	 add	 eax, 4
  00113	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2017 : 	ht->revAngle = READUINT32(save_p);

  00118	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0011b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00121	8b 11		 mov	 edx, DWORD PTR [ecx]
  00123	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0012b	83 c0 04	 add	 eax, 4
  0012e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2018 : 	ht->momx = READFIXED(save_p);

  00133	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0013c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013e	89 50 38	 mov	 DWORD PTR [eax+56], edx
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00146	83 c0 04	 add	 eax, 4
  00149	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2019 : 	ht->momy = READFIXED(save_p);

  0014e	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00161	83 c0 04	 add	 eax, 4
  00164	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2020 : 	ht->closing = READUINT8(save_p);

  00169	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00172	8a 11		 mov	 dl, BYTE PTR [ecx]
  00174	88 50 40	 mov	 BYTE PTR [eax+64], dl
  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0017c	83 c0 01	 add	 eax, 1
  0017f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2021 : 	P_AddThinker(&ht->thinker);

  00184	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 _P_AddThinker
  0018d	83 c4 04	 add	 esp, 4

; 2022 : }

  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	5b		 pop	 ebx
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c3		 ret	 0
_LoadPolyslidedoorThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadPolywaypointThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadPolywaypointThinker PROC				; COMDAT

; 1981 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1982 : 	polywaypoint_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 34		 push	 52			; 00000034H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1983 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1984 : 	ht->polyObjNum = READINT32(save_p);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 04	 add	 eax, 4
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1985 : 	ht->speed = READINT32(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1986 : 	ht->sequence = READINT32(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1987 : 	ht->pointnum = READINT32(save_p);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	83 c0 04	 add	 eax, 4
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1988 : 	ht->direction = READINT32(save_p);

  00091	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a4	83 c0 04	 add	 eax, 4
  000a7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1989 : 	ht->comeback = READUINT8(save_p);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000b5	8a 11		 mov	 dl, BYTE PTR [ecx]
  000b7	88 50 24	 mov	 BYTE PTR [eax+36], dl
  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bf	83 c0 01	 add	 eax, 1
  000c2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1990 : 	ht->wrap = READUINT8(save_p);

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000d0	8a 11		 mov	 dl, BYTE PTR [ecx]
  000d2	88 50 25	 mov	 BYTE PTR [eax+37], dl
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000da	83 c0 01	 add	 eax, 1
  000dd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1991 : 	ht->continuous = READUINT8(save_p);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000eb	8a 11		 mov	 dl, BYTE PTR [ecx]
  000ed	88 50 26	 mov	 BYTE PTR [eax+38], dl
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f5	83 c0 01	 add	 eax, 1
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1992 : 	ht->stophere = READUINT8(save_p);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00106	8a 11		 mov	 dl, BYTE PTR [ecx]
  00108	88 50 27	 mov	 BYTE PTR [eax+39], dl
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00110	83 c0 01	 add	 eax, 1
  00113	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1993 : 	ht->diffx = READFIXED(save_p);

  00118	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0011b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00121	8b 11		 mov	 edx, DWORD PTR [ecx]
  00123	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0012b	83 c0 04	 add	 eax, 4
  0012e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1994 : 	ht->diffy = READFIXED(save_p);

  00133	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0013c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013e	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00146	83 c0 04	 add	 eax, 4
  00149	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1995 : 	ht->diffz = READFIXED(save_p);

  0014e	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	89 50 30	 mov	 DWORD PTR [eax+48], edx
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00161	83 c0 04	 add	 eax, 4
  00164	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1996 : 	P_AddThinker(&ht->thinker);

  00169	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _P_AddThinker
  00172	83 c4 04	 add	 esp, 4

; 1997 : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
_LoadPolywaypointThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadPolymoveThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadPolymoveThinker PROC				; COMDAT

; 1963 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1964 : 	polymove_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 28		 push	 40			; 00000028H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1965 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1966 : 	ht->polyObjNum = READINT32(save_p);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 04	 add	 eax, 4
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1967 : 	ht->speed = READINT32(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1968 : 	ht->momx = READFIXED(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1969 : 	ht->momy = READFIXED(save_p);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	83 c0 04	 add	 eax, 4
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1970 : 	ht->distance = READINT32(save_p);

  00091	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a4	83 c0 04	 add	 eax, 4
  000a7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1971 : 	ht->angle = READANGLE(save_p);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bf	83 c0 04	 add	 eax, 4
  000c2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1972 : 	P_AddThinker(&ht->thinker);

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _P_AddThinker
  000d0	83 c4 04	 add	 esp, 4

; 1973 : }

  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
_LoadPolymoveThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadPolyrotatetThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadPolyrotatetThinker PROC				; COMDAT

; 1948 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1949 : 	polyrotate_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1950 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1951 : 	ht->polyObjNum = READINT32(save_p);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 04	 add	 eax, 4
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1952 : 	ht->speed = READINT32(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1953 : 	ht->distance = READINT32(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1954 : 	P_AddThinker(&ht->thinker);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _P_AddThinker
  0007f	83 c4 04	 add	 esp, 4

; 1955 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
_LoadPolyrotatetThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadDisappearThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadDisappearThinker PROC				; COMDAT

; 1927 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1928 : 	disappear_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 2c		 push	 44			; 0000002cH
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1929 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1930 : 	ht->appeartime = READUINT32(save_p);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 04	 add	 eax, 4
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1931 : 	ht->disappeartime = READUINT32(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1932 : 	ht->offset = READUINT32(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1933 : 	ht->timer = READUINT32(save_p);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	83 c0 04	 add	 eax, 4
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1934 : 	ht->affectee = READINT32(save_p);

  00091	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a4	83 c0 04	 add	 eax, 4
  000a7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1935 : 	ht->sourceline = READINT32(save_p);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bf	83 c0 04	 add	 eax, 4
  000c2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1936 : 	ht->exists = READINT32(save_p);

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d2	89 50 28	 mov	 DWORD PTR [eax+40], edx
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000da	83 c0 04	 add	 eax, 4
  000dd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1937 : 	P_AddThinker(&ht->thinker);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 _P_AddThinker
  000eb	83 c4 04	 add	 esp, 4

; 1938 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
_LoadDisappearThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadExecutorThinker
_TEXT	SEGMENT
tv73 = -72						; size = 4
tv78 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadExecutorThinker PROC				; COMDAT

; 1912 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1913 : 	executor_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1914 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1915 : 	ht->line = LoadLine(READUINT32(save_p));

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b8	 mov	 DWORD PTR tv73[ebp], ecx
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00035	83 c2 04	 add	 edx, 4
  00038	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0003e	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _LoadLine
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0004d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1916 : 	ht->caller = LoadMobj(READUINT32(save_p));

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	89 4d b8	 mov	 DWORD PTR tv78[ebp], ecx
  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00060	83 c2 04	 add	 edx, 4
  00063	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00069	8b 45 b8	 mov	 eax, DWORD PTR tv78[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _LoadMobj
  00072	83 c4 04	 add	 esp, 4
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00078	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1917 : 	ht->timer = READINT32(save_p);

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
  00086	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0008e	83 c0 04	 add	 eax, 4
  00091	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1918 : 	P_AddThinker(&ht->thinker);

  00096	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _P_AddThinker
  0009f	83 c4 04	 add	 esp, 4

; 1919 : }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_LoadExecutorThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadLightlevelThinker
_TEXT	SEGMENT
tv73 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadLightlevelThinker PROC				; COMDAT

; 1895 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1896 : 	lightlevel_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1897 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1898 : 	ht->sector = LoadSector(READUINT32(save_p));

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b8	 mov	 DWORD PTR tv73[ebp], ecx
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00035	83 c2 04	 add	 edx, 4
  00038	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0003e	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _LoadSector
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0004d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1899 : 	ht->destlevel = READINT32(save_p);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00063	83 c0 04	 add	 eax, 4
  00066	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1900 : 	ht->speed = READINT32(save_p);

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0007e	83 c0 04	 add	 eax, 4
  00081	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1901 : 	if (ht->sector)

  00086	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00089	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008d	74 0c		 je	 SHORT $LN2@LoadLightl

; 1902 : 		ht->sector->lightingdata = ht;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00092	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00095	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00098	89 51 4c	 mov	 DWORD PTR [ecx+76], edx
$LN2@LoadLightl:

; 1903 : 	P_AddThinker(&ht->thinker);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _P_AddThinker
  000a4	83 c4 04	 add	 esp, 4

; 1904 : }

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_LoadLightlevelThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadLaserThinker
_TEXT	SEGMENT
tv73 = -72						; size = 4
tv79 = -72						; size = 4
tv84 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadLaserThinker PROC					; COMDAT

; 1879 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1880 : 	laserthink_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 20		 push	 32			; 00000020H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1881 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1882 : 	ht->sector = LoadSector(READUINT32(save_p));

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b8	 mov	 DWORD PTR tv73[ebp], ecx
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00035	83 c2 04	 add	 edx, 4
  00038	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0003e	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _LoadSector
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0004d	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1883 : 	ht->ffloor = NULL;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00053	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1884 : 	ht->sec = LoadSector(READUINT32(save_p));

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	89 4d b8	 mov	 DWORD PTR tv79[ebp], ecx
  00064	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0006a	83 c2 04	 add	 edx, 4
  0006d	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00073	8b 45 b8	 mov	 eax, DWORD PTR tv79[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _LoadSector
  0007c	83 c4 04	 add	 esp, 4
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00082	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1885 : 	ht->sourceline = LoadLine(READUINT32(save_p));

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	89 4d b8	 mov	 DWORD PTR tv84[ebp], ecx
  0008f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00095	83 c2 04	 add	 edx, 4
  00098	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0009e	8b 45 b8	 mov	 eax, DWORD PTR tv84[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _LoadLine
  000a7	83 c4 04	 add	 esp, 4
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ad	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1886 : 	P_AddThinker(&ht->thinker);

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _P_AddThinker
  000b9	83 c4 04	 add	 esp, 4

; 1887 : }

  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_LoadLaserThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadPusherThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadPusherThinker PROC					; COMDAT

; 1853 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1854 : 	pusher_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 48		 push	 72			; 00000048H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1855 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1856 : 	ht->type = READUINT8(save_p);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00030	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 01	 add	 eax, 1
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1857 : 	ht->x_mag = READINT32(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1858 : 	ht->y_mag = READINT32(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1859 : 	ht->magnitude = READINT32(save_p);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 20	 mov	 DWORD PTR [eax+32], edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	83 c0 04	 add	 eax, 4
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1860 : 	ht->radius = READINT32(save_p);

  00091	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a4	83 c0 04	 add	 eax, 4
  000a7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1861 : 	ht->x = READINT32(save_p);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	89 50 28	 mov	 DWORD PTR [eax+40], edx
  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bf	83 c0 04	 add	 eax, 4
  000c2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1862 : 	ht->y = READINT32(save_p);

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d2	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000da	83 c0 04	 add	 eax, 4
  000dd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1863 : 	ht->z = READINT32(save_p);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	89 50 30	 mov	 DWORD PTR [eax+48], edx
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f5	83 c0 04	 add	 eax, 4
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1864 : 	ht->affectee = READINT32(save_p);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00106	8b 11		 mov	 edx, DWORD PTR [ecx]
  00108	89 50 34	 mov	 DWORD PTR [eax+52], edx
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00110	83 c0 04	 add	 eax, 4
  00113	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1865 : 	ht->roverpusher = READUINT8(save_p);

  00118	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0011b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00121	8a 11		 mov	 dl, BYTE PTR [ecx]
  00123	88 50 38	 mov	 BYTE PTR [eax+56], dl
  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0012b	83 c0 01	 add	 eax, 1
  0012e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1866 : 	ht->referrer = READINT32(save_p);

  00133	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0013c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013e	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00146	83 c0 04	 add	 eax, 4
  00149	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1867 : 	ht->exclusive = READINT32(save_p);

  0014e	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	89 50 40	 mov	 DWORD PTR [eax+64], edx
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00161	83 c0 04	 add	 eax, 4
  00164	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1868 : 	ht->slider = READINT32(save_p);

  00169	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00172	8b 11		 mov	 edx, DWORD PTR [ecx]
  00174	89 50 44	 mov	 DWORD PTR [eax+68], edx
  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0017c	83 c0 04	 add	 eax, 4
  0017f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1869 : 	ht->source = P_GetPushThing(ht->affectee);

  00184	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00187	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0018a	51		 push	 ecx
  0018b	e8 00 00 00 00	 call	 _P_GetPushThing
  00190	83 c4 04	 add	 esp, 4
  00193	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00196	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1870 : 	P_AddThinker(&ht->thinker);

  00199	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _P_AddThinker
  001a2	83 c4 04	 add	 esp, 4

; 1871 : }

  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	5b		 pop	 ebx
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
_LoadPusherThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadFrictionThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadFrictionThinker PROC				; COMDAT

; 1836 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1837 : 	friction_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 24		 push	 36			; 00000024H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1838 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1839 : 	ht->friction = READINT32(save_p);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 04	 add	 eax, 4
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1840 : 	ht->movefactor = READINT32(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1841 : 	ht->affectee = READINT32(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1842 : 	ht->referrer = READINT32(save_p);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	83 c0 04	 add	 eax, 4
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1843 : 	ht->roverfriction = READUINT8(save_p);

  00091	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009a	8a 11		 mov	 dl, BYTE PTR [ecx]
  0009c	88 50 20	 mov	 BYTE PTR [eax+32], dl
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a4	83 c0 01	 add	 eax, 1
  000a7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1844 : 	P_AddThinker(&ht->thinker);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _P_AddThinker
  000b5	83 c4 04	 add	 esp, 4

; 1845 : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
_LoadFrictionThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadScrollThinker
_TEXT	SEGMENT
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadScrollThinker PROC					; COMDAT

; 1814 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1815 : 	scroll_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 38		 push	 56			; 00000038H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1816 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1817 : 	ht->dx = READFIXED(save_p);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 04	 add	 eax, 4
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1818 : 	ht->dy = READFIXED(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 04	 add	 eax, 4
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1819 : 	ht->affectee = READINT32(save_p);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006e	83 c0 04	 add	 eax, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1820 : 	ht->control = READINT32(save_p);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	83 c0 04	 add	 eax, 4
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1821 : 	ht->last_height = READFIXED(save_p);

  00091	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a4	83 c0 04	 add	 eax, 4
  000a7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1822 : 	ht->vdx = READFIXED(save_p);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bf	83 c0 04	 add	 eax, 4
  000c2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1823 : 	ht->vdy = READFIXED(save_p);

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d2	89 50 28	 mov	 DWORD PTR [eax+40], edx
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000da	83 c0 04	 add	 eax, 4
  000dd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1824 : 	ht->accel = READINT32(save_p);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f5	83 c0 04	 add	 eax, 4
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1825 : 	ht->exclusive = READINT32(save_p);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00106	8b 11		 mov	 edx, DWORD PTR [ecx]
  00108	89 50 30	 mov	 DWORD PTR [eax+48], edx
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00110	83 c0 04	 add	 eax, 4
  00113	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1826 : 	ht->type = READUINT8(save_p);

  00118	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0011d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00120	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00123	89 4a 34	 mov	 DWORD PTR [edx+52], ecx
  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0012b	83 c0 01	 add	 eax, 1
  0012e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1827 : 	P_AddThinker(&ht->thinker);

  00133	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _P_AddThinker
  0013c	83 c4 04	 add	 esp, 4

; 1828 : }

  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
_LoadScrollThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadElevatorThinker
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv81 = -72						; size = 4
tv142 = -72						; size = 4
tv147 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_floorOrCeiling$ = 12					; size = 1
_LoadElevatorThinker PROC				; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1777 : 	elevator_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 54		 push	 84			; 00000054H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1778 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1779 : 	ht->type = READUINT8(save_p);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00030	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 01	 add	 eax, 1
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1780 : 	ht->sector = LoadSector(READUINT32(save_p));

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 4d b8	 mov	 DWORD PTR tv76[ebp], ecx
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00050	83 c2 04	 add	 edx, 4
  00053	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00059	8b 45 b8	 mov	 eax, DWORD PTR tv76[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _LoadSector
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00068	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1781 : 	ht->actionsector = LoadSector(READUINT32(save_p));

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	89 4d b8	 mov	 DWORD PTR tv81[ebp], ecx
  00075	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0007b	83 c2 04	 add	 edx, 4
  0007e	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00084	8b 45 b8	 mov	 eax, DWORD PTR tv81[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _LoadSector
  0008d	83 c4 04	 add	 esp, 4
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00093	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1782 : 	ht->direction = READINT32(save_p);

  00096	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0009f	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a1	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a9	83 c0 04	 add	 eax, 4
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1783 : 	ht->floordestheight = READFIXED(save_p);

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bc	89 50 20	 mov	 DWORD PTR [eax+32], edx
  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000c4	83 c0 04	 add	 eax, 4
  000c7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1784 : 	ht->ceilingdestheight = READFIXED(save_p);

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000d5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000df	83 c0 04	 add	 eax, 4
  000e2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1785 : 	ht->speed = READFIXED(save_p);

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f2	89 50 28	 mov	 DWORD PTR [eax+40], edx
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000fa	83 c0 04	 add	 eax, 4
  000fd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1786 : 	ht->origspeed = READFIXED(save_p);

  00102	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0010b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010d	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00115	83 c0 04	 add	 eax, 4
  00118	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1787 : 	ht->low = READFIXED(save_p);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00120	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00126	8b 11		 mov	 edx, DWORD PTR [ecx]
  00128	89 50 30	 mov	 DWORD PTR [eax+48], edx
  0012b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00130	83 c0 04	 add	 eax, 4
  00133	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1788 : 	ht->high = READFIXED(save_p);

  00138	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00141	8b 11		 mov	 edx, DWORD PTR [ecx]
  00143	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0014b	83 c0 04	 add	 eax, 4
  0014e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1789 : 	ht->distance = READFIXED(save_p);

  00153	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0015c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015e	89 50 38	 mov	 DWORD PTR [eax+56], edx
  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00166	83 c0 04	 add	 eax, 4
  00169	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1790 : 	ht->delay = READFIXED(save_p);

  0016e	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00171	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00177	8b 11		 mov	 edx, DWORD PTR [ecx]
  00179	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  0017c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00181	83 c0 04	 add	 eax, 4
  00184	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1791 : 	ht->delaytimer = READFIXED(save_p);

  00189	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00192	8b 11		 mov	 edx, DWORD PTR [ecx]
  00194	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0019c	83 c0 04	 add	 eax, 4
  0019f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1792 : 	ht->floorwasheight = READFIXED(save_p);

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  001a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  001ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  001af	89 50 44	 mov	 DWORD PTR [eax+68], edx
  001b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001b7	83 c0 04	 add	 eax, 4
  001ba	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1793 : 	ht->ceilingwasheight = READFIXED(save_p);

  001bf	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  001c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  001c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ca	89 50 48	 mov	 DWORD PTR [eax+72], edx
  001cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001d2	83 c0 04	 add	 eax, 4
  001d5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1794 : 	ht->player = LoadPlayer(READUINT32(save_p)); // was dummy

  001da	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	89 4d b8	 mov	 DWORD PTR tv142[ebp], ecx
  001e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  001ea	83 c2 04	 add	 edx, 4
  001ed	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  001f3	8b 45 b8	 mov	 eax, DWORD PTR tv142[ebp]
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 _LoadPlayer
  001fc	83 c4 04	 add	 esp, 4
  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00202	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1795 : 	ht->sourceline = LoadLine(READUINT32(save_p));

  00205	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0020a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020c	89 4d b8	 mov	 DWORD PTR tv147[ebp], ecx
  0020f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00215	83 c2 04	 add	 edx, 4
  00218	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0021e	8b 45 b8	 mov	 eax, DWORD PTR tv147[ebp]
  00221	50		 push	 eax
  00222	e8 00 00 00 00	 call	 _LoadLine
  00227	83 c4 04	 add	 esp, 4
  0022a	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0022d	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 1796 : 
; 1797 : 	if (ht->sector)

  00230	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00233	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00237	74 2a		 je	 SHORT $LN4@LoadElevat

; 1798 : 	{
; 1799 : 		if (floorOrCeiling & 2)

  00239	0f b6 45 0c	 movzx	 eax, BYTE PTR _floorOrCeiling$[ebp]
  0023d	83 e0 02	 and	 eax, 2
  00240	74 0c		 je	 SHORT $LN3@LoadElevat

; 1800 : 			ht->sector->ceilingdata = ht;

  00242	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00245	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00248	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  0024b	89 51 48	 mov	 DWORD PTR [ecx+72], edx
$LN3@LoadElevat:

; 1801 : 		if (floorOrCeiling & 1)

  0024e	0f b6 45 0c	 movzx	 eax, BYTE PTR _floorOrCeiling$[ebp]
  00252	83 e0 01	 and	 eax, 1
  00255	74 0c		 je	 SHORT $LN4@LoadElevat

; 1802 : 			ht->sector->floordata = ht;

  00257	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0025a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0025d	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00260	89 51 44	 mov	 DWORD PTR [ecx+68], edx
$LN4@LoadElevat:

; 1803 : 	}
; 1804 : 
; 1805 : 	P_AddThinker(&ht->thinker);

  00263	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 _P_AddThinker
  0026c	83 c4 04	 add	 esp, 4

; 1806 : }

  0026f	5f		 pop	 edi
  00270	5e		 pop	 esi
  00271	5b		 pop	 ebx
  00272	8b e5		 mov	 esp, ebp
  00274	5d		 pop	 ebp
  00275	c3		 ret	 0
_LoadElevatorThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadFireflickerThinker
_TEXT	SEGMENT
tv73 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadFireflickerThinker PROC				; COMDAT

; 1758 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1759 : 	fireflicker_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 24		 push	 36			; 00000024H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1760 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1761 : 	ht->sector = LoadSector(READUINT32(save_p));

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b8	 mov	 DWORD PTR tv73[ebp], ecx
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00035	83 c2 04	 add	 edx, 4
  00038	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0003e	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _LoadSector
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0004d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1762 : 	ht->count = READINT32(save_p);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00063	83 c0 04	 add	 eax, 4
  00066	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1763 : 	ht->resetcount = READINT32(save_p);

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0007e	83 c0 04	 add	 eax, 4
  00081	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1764 : 	ht->maxlight = READINT32(save_p);

  00086	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00099	83 c0 04	 add	 eax, 4
  0009c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1765 : 	ht->minlight = READINT32(save_p);

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	89 50 20	 mov	 DWORD PTR [eax+32], edx
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b4	83 c0 04	 add	 eax, 4
  000b7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1766 : 	if (ht->sector)

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000bf	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000c3	74 0c		 je	 SHORT $LN2@LoadFirefl

; 1767 : 		ht->sector->lightingdata = ht;

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000c8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000cb	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  000ce	89 51 4c	 mov	 DWORD PTR [ecx+76], edx
$LN2@LoadFirefl:

; 1768 : 	P_AddThinker(&ht->thinker);

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _P_AddThinker
  000da	83 c4 04	 add	 esp, 4

; 1769 : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_LoadFireflickerThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadGlowThinker
_TEXT	SEGMENT
tv73 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadGlowThinker PROC					; COMDAT

; 1740 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1741 : 	glow_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 24		 push	 36			; 00000024H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1742 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1743 : 	ht->sector = LoadSector(READUINT32(save_p));

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b8	 mov	 DWORD PTR tv73[ebp], ecx
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00035	83 c2 04	 add	 edx, 4
  00038	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0003e	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _LoadSector
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0004d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1744 : 	ht->minlight = READINT32(save_p);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00063	83 c0 04	 add	 eax, 4
  00066	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1745 : 	ht->maxlight = READINT32(save_p);

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0007e	83 c0 04	 add	 eax, 4
  00081	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1746 : 	ht->direction = READINT32(save_p);

  00086	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00099	83 c0 04	 add	 eax, 4
  0009c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1747 : 	ht->speed = READINT32(save_p);

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	89 50 20	 mov	 DWORD PTR [eax+32], edx
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b4	83 c0 04	 add	 eax, 4
  000b7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1748 : 	if (ht->sector)

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000bf	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000c3	74 0c		 je	 SHORT $LN2@LoadGlowTh

; 1749 : 		ht->sector->lightingdata = ht;

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000c8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000cb	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  000ce	89 51 4c	 mov	 DWORD PTR [ecx+76], edx
$LN2@LoadGlowTh:

; 1750 : 	P_AddThinker(&ht->thinker);

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _P_AddThinker
  000da	83 c4 04	 add	 esp, 4

; 1751 : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_LoadGlowThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadStrobeThinker
_TEXT	SEGMENT
tv73 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadStrobeThinker PROC					; COMDAT

; 1720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1721 : 	strobe_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 28		 push	 40			; 00000028H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1722 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1723 : 	ht->sector = LoadSector(READUINT32(save_p));

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b8	 mov	 DWORD PTR tv73[ebp], ecx
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00035	83 c2 04	 add	 edx, 4
  00038	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0003e	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _LoadSector
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0004d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1724 : 	ht->count = READINT32(save_p);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00063	83 c0 04	 add	 eax, 4
  00066	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1725 : 	ht->minlight = READINT32(save_p);

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0007e	83 c0 04	 add	 eax, 4
  00081	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1726 : 	ht->maxlight = READINT32(save_p);

  00086	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00099	83 c0 04	 add	 eax, 4
  0009c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1727 : 	ht->darktime = READINT32(save_p);

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	89 50 20	 mov	 DWORD PTR [eax+32], edx
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b4	83 c0 04	 add	 eax, 4
  000b7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1728 : 	ht->brighttime = READINT32(save_p);

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000cf	83 c0 04	 add	 eax, 4
  000d2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1729 : 	if (ht->sector)

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000da	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000de	74 0c		 je	 SHORT $LN2@LoadStrobe

; 1730 : 		ht->sector->lightingdata = ht;

  000e0	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000e3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  000e9	89 51 4c	 mov	 DWORD PTR [ecx+76], edx
$LN2@LoadStrobe:

; 1731 : 	P_AddThinker(&ht->thinker);

  000ec	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _P_AddThinker
  000f5	83 c4 04	 add	 esp, 4

; 1732 : }

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_LoadStrobeThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadLightflashThinker
_TEXT	SEGMENT
tv73 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadLightflashThinker PROC				; COMDAT

; 1703 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1704 : 	lightflash_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1705 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1706 : 	ht->sector = LoadSector(READUINT32(save_p));

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b8	 mov	 DWORD PTR tv73[ebp], ecx
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00035	83 c2 04	 add	 edx, 4
  00038	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  0003e	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _LoadSector
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0004d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1707 : 	ht->maxlight = READINT32(save_p);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00063	83 c0 04	 add	 eax, 4
  00066	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1708 : 	ht->minlight = READINT32(save_p);

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0007e	83 c0 04	 add	 eax, 4
  00081	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1709 : 	if (ht->sector)

  00086	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00089	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008d	74 0c		 je	 SHORT $LN2@LoadLightf

; 1710 : 		ht->sector->lightingdata = ht;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00092	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00095	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00098	89 51 4c	 mov	 DWORD PTR [ecx+76], edx
$LN2@LoadLightf:

; 1711 : 	P_AddThinker(&ht->thinker);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _P_AddThinker
  000a4	83 c4 04	 add	 esp, 4

; 1712 : }

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_LoadLightflashThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadFloormoveThinker
_TEXT	SEGMENT
tv78 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadFloormoveThinker PROC				; COMDAT

; 1679 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1680 : 	floormove_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 38		 push	 56			; 00000038H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1681 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1682 : 	ht->type = READUINT8(save_p);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00030	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 01	 add	 eax, 1
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1683 : 	ht->crush = READUINT8(save_p);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00049	8a 11		 mov	 dl, BYTE PTR [ecx]
  0004b	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	83 c0 01	 add	 eax, 1
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1684 : 	ht->sector = LoadSector(READUINT32(save_p));

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	89 4d b8	 mov	 DWORD PTR tv78[ebp], ecx
  00065	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0006b	83 c2 04	 add	 edx, 4
  0006e	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00074	8b 45 b8	 mov	 eax, DWORD PTR tv78[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _LoadSector
  0007d	83 c4 04	 add	 esp, 4
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00083	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1685 : 	ht->direction = READINT32(save_p);

  00086	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00099	83 c0 04	 add	 eax, 4
  0009c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1686 : 	ht->texture = READINT32(save_p);

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	89 50 20	 mov	 DWORD PTR [eax+32], edx
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b4	83 c0 04	 add	 eax, 4
  000b7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1687 : 	ht->floordestheight = READFIXED(save_p);

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000cf	83 c0 04	 add	 eax, 4
  000d2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1688 : 	ht->speed = READFIXED(save_p);

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e2	89 50 28	 mov	 DWORD PTR [eax+40], edx
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ea	83 c0 04	 add	 eax, 4
  000ed	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1689 : 	ht->origspeed = READFIXED(save_p);

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fd	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00105	83 c0 04	 add	 eax, 4
  00108	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1690 : 	ht->delay = READFIXED(save_p);

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00110	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00116	8b 11		 mov	 edx, DWORD PTR [ecx]
  00118	89 50 30	 mov	 DWORD PTR [eax+48], edx
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00120	83 c0 04	 add	 eax, 4
  00123	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1691 : 	ht->delaytimer = READFIXED(save_p);

  00128	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0012b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00131	8b 11		 mov	 edx, DWORD PTR [ecx]
  00133	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0013b	83 c0 04	 add	 eax, 4
  0013e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1692 : 	if (ht->sector)

  00143	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00146	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0014a	74 0c		 je	 SHORT $LN2@LoadFloorm

; 1693 : 		ht->sector->floordata = ht;

  0014c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0014f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00152	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00155	89 51 44	 mov	 DWORD PTR [ecx+68], edx
$LN2@LoadFloorm:

; 1694 : 	P_AddThinker(&ht->thinker);

  00158	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _P_AddThinker
  00161	83 c4 04	 add	 esp, 4

; 1695 : }

  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
_LoadFloormoveThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadCeilingThinker
_TEXT	SEGMENT
tv76 = -72						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_LoadCeilingThinker PROC				; COMDAT

; 1650 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1651 : 	ceiling_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 4c		 push	 76			; 0000004cH
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1652 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1653 : 	ht->type = READUINT8(save_p);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  00030	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00038	83 c0 01	 add	 eax, 1
  0003b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1654 : 	ht->sector = LoadSector(READUINT32(save_p));

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 4d b8	 mov	 DWORD PTR tv76[ebp], ecx
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00050	83 c2 04	 add	 edx, 4
  00053	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00059	8b 45 b8	 mov	 eax, DWORD PTR tv76[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _LoadSector
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00068	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1655 : 	ht->bottomheight = READFIXED(save_p);

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0007e	83 c0 04	 add	 eax, 4
  00081	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1656 : 	ht->topheight = READFIXED(save_p);

  00086	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00099	83 c0 04	 add	 eax, 4
  0009c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1657 : 	ht->speed = READFIXED(save_p);

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	89 50 20	 mov	 DWORD PTR [eax+32], edx
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b4	83 c0 04	 add	 eax, 4
  000b7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1658 : 	ht->oldspeed = READFIXED(save_p);

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c7	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000cf	83 c0 04	 add	 eax, 4
  000d2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1659 : 	ht->delay = READFIXED(save_p);

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e2	89 50 28	 mov	 DWORD PTR [eax+40], edx
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ea	83 c0 04	 add	 eax, 4
  000ed	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1660 : 	ht->delaytimer = READFIXED(save_p);

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fd	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00105	83 c0 04	 add	 eax, 4
  00108	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1661 : 	ht->crush = READUINT8(save_p);

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00110	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00116	8a 11		 mov	 dl, BYTE PTR [ecx]
  00118	88 50 30	 mov	 BYTE PTR [eax+48], dl
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00120	83 c0 01	 add	 eax, 1
  00123	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1662 : 	ht->texture = READINT32(save_p);

  00128	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0012b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00131	8b 11		 mov	 edx, DWORD PTR [ecx]
  00133	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0013b	83 c0 04	 add	 eax, 4
  0013e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1663 : 	ht->direction = READINT32(save_p);

  00143	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00146	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0014c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014e	89 50 38	 mov	 DWORD PTR [eax+56], edx
  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00156	83 c0 04	 add	 eax, 4
  00159	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1664 : 	ht->tag = READINT32(save_p);

  0015e	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00167	8b 11		 mov	 edx, DWORD PTR [ecx]
  00169	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00171	83 c0 04	 add	 eax, 4
  00174	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1665 : 	ht->olddirection = READINT32(save_p);

  00179	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0017c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00182	8b 11		 mov	 edx, DWORD PTR [ecx]
  00184	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00187	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0018c	83 c0 04	 add	 eax, 4
  0018f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1666 : 	ht->origspeed = READFIXED(save_p);

  00194	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00197	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0019d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019f	89 50 44	 mov	 DWORD PTR [eax+68], edx
  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001a7	83 c0 04	 add	 eax, 4
  001aa	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1667 : 	ht->sourceline = READFIXED(save_p);

  001af	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  001b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  001b8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ba	89 50 48	 mov	 DWORD PTR [eax+72], edx
  001bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001c2	83 c0 04	 add	 eax, 4
  001c5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 1668 : 	if (ht->sector)

  001ca	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  001cd	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  001d1	74 0c		 je	 SHORT $LN2@LoadCeilin

; 1669 : 		ht->sector->ceilingdata = ht;

  001d3	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  001d6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001d9	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  001dc	89 51 48	 mov	 DWORD PTR [ecx+72], edx
$LN2@LoadCeilin:

; 1670 : 	P_AddThinker(&ht->thinker);

  001df	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 _P_AddThinker
  001e8	83 c4 04	 add	 esp, 4

; 1671 : }

  001eb	5f		 pop	 edi
  001ec	5e		 pop	 esi
  001ed	5b		 pop	 ebx
  001ee	8b e5		 mov	 esp, ebp
  001f0	5d		 pop	 ebp
  001f1	c3		 ret	 0
_LoadCeilingThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadSpecialLevelThinker
_TEXT	SEGMENT
tv79 = -76						; size = 4
tv84 = -76						; size = 4
_i$ = -8						; size = 4
_ht$ = -4						; size = 4
_thinker$ = 8						; size = 4
_floorOrCeiling$ = 12					; size = 1
_LoadSpecialLevelThinker PROC				; COMDAT

; 1624 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1625 : 	levelspecthink_t *ht = Z_Malloc(sizeof (*ht), PU_LEVSPEC, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 33		 push	 51			; 00000033H
  0000f	6a 58		 push	 88			; 00000058H
  00011	e8 00 00 00 00	 call	 _Z_MallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax

; 1626 : 	size_t i;
; 1627 : 	ht->thinker.function.acp1 = thinker;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _thinker$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1628 : 	for (i = 0; i < 16; i++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN4@LoadSpecia
$LN2@LoadSpecia:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@LoadSpecia:
  00037	83 7d f8 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0003b	73 21		 jae	 SHORT $LN3@LoadSpecia

; 1629 : 		ht->vars[i] = READFIXED(save_p); //var[16]

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00043	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00049	8b 12		 mov	 edx, DWORD PTR [edx]
  0004b	89 54 81 10	 mov	 DWORD PTR [ecx+eax*4+16], edx
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00054	83 c0 04	 add	 eax, 4
  00057	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0005c	eb d0		 jmp	 SHORT $LN2@LoadSpecia
$LN3@LoadSpecia:

; 1630 : 	ht->sourceline = LoadLine(READUINT32(save_p));

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	89 4d b4	 mov	 DWORD PTR tv79[ebp], ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0006e	83 c2 04	 add	 edx, 4
  00071	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00077	8b 45 b4	 mov	 eax, DWORD PTR tv79[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _LoadLine
  00080	83 c4 04	 add	 esp, 4
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00086	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 1631 : 	ht->sector = LoadSector(READUINT32(save_p));

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	89 4d b4	 mov	 DWORD PTR tv84[ebp], ecx
  00093	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00099	83 c2 04	 add	 edx, 4
  0009c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  000a2	8b 45 b4	 mov	 eax, DWORD PTR tv84[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _LoadSector
  000ab	83 c4 04	 add	 esp, 4
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000b1	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1632 : 
; 1633 : 	if (ht->sector)

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000b7	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  000bb	74 2a		 je	 SHORT $LN7@LoadSpecia

; 1634 : 	{
; 1635 : 		if (floorOrCeiling & 2)

  000bd	0f b6 45 0c	 movzx	 eax, BYTE PTR _floorOrCeiling$[ebp]
  000c1	83 e0 02	 and	 eax, 2
  000c4	74 0c		 je	 SHORT $LN6@LoadSpecia

; 1636 : 			ht->sector->ceilingdata = ht;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000c9	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  000cf	89 51 48	 mov	 DWORD PTR [ecx+72], edx
$LN6@LoadSpecia:

; 1637 : 		if (floorOrCeiling & 1)

  000d2	0f b6 45 0c	 movzx	 eax, BYTE PTR _floorOrCeiling$[ebp]
  000d6	83 e0 01	 and	 eax, 1
  000d9	74 0c		 je	 SHORT $LN7@LoadSpecia

; 1638 : 			ht->sector->floordata = ht;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000de	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000e1	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  000e4	89 51 44	 mov	 DWORD PTR [ecx+68], edx
$LN7@LoadSpecia:

; 1639 : 	}
; 1640 : 
; 1641 : 	P_AddThinker(&ht->thinker);

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 _P_AddThinker
  000f0	83 c4 04	 add	 esp, 4

; 1642 : }

  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
_LoadSpecialLevelThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadPlayer
_TEXT	SEGMENT
_player$ = 8						; size = 4
_LoadPlayer PROC					; COMDAT

; 1607 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1608 : 	if (player >= MAXPLAYERS) return NULL;

  00009	83 7d 08 20	 cmp	 DWORD PTR _player$[ebp], 32 ; 00000020H
  0000d	72 04		 jb	 SHORT $LN2@LoadPlayer
  0000f	33 c0		 xor	 eax, eax
  00011	eb 0c		 jmp	 SHORT $LN1@LoadPlayer
$LN2@LoadPlayer:

; 1609 : 	return &players[player];

  00013	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0001a	05 00 00 00 00	 add	 eax, OFFSET _players
$LN1@LoadPlayer:

; 1610 : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_LoadPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadLine
_TEXT	SEGMENT
_line$ = 8						; size = 4
_LoadLine PROC						; COMDAT

; 1601 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1602 : 	if (line >= numlines) return NULL;

  00009	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numlines
  00012	72 04		 jb	 SHORT $LN2@LoadLine
  00014	33 c0		 xor	 eax, eax
  00016	eb 0a		 jmp	 SHORT $LN1@LoadLine
$LN2@LoadLine:

; 1603 : 	return &lines[line];

  00018	6b 45 08 4c	 imul	 eax, DWORD PTR _line$[ebp], 76
  0001c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _lines
$LN1@LoadLine:

; 1604 : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_LoadLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadSector
_TEXT	SEGMENT
_sector$ = 8						; size = 4
_LoadSector PROC					; COMDAT

; 1595 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1596 : 	if (sector >= numsectors) return NULL;

  00009	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsectors
  00012	72 04		 jb	 SHORT $LN2@LoadSector
  00014	33 c0		 xor	 eax, eax
  00016	eb 0d		 jmp	 SHORT $LN1@LoadSector
$LN2@LoadSector:

; 1597 : 	return &sectors[sector];

  00018	69 45 08 f8 00
	00 00		 imul	 eax, DWORD PTR _sector$[ebp], 248
  0001f	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
$LN1@LoadSector:

; 1598 : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_LoadSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _LoadMobj
_TEXT	SEGMENT
_mobjnum$ = 8						; size = 4
_LoadMobj PROC						; COMDAT

; 1589 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1590 : 	if (mobjnum == 0) return NULL;

  00009	83 7d 08 00	 cmp	 DWORD PTR _mobjnum$[ebp], 0
  0000d	75 04		 jne	 SHORT $LN2@LoadMobj
  0000f	33 c0		 xor	 eax, eax
  00011	eb 03		 jmp	 SHORT $LN1@LoadMobj
$LN2@LoadMobj:

; 1591 : 	return (mobj_t *)(size_t)mobjnum;

  00013	8b 45 08	 mov	 eax, DWORD PTR _mobjnum$[ebp]
$LN1@LoadMobj:

; 1592 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_LoadMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _FindNewPosition
_TEXT	SEGMENT
_mobj$ = -8						; size = 4
_th$ = -4						; size = 4
_oldposition$ = 8					; size = 4
_FindNewPosition PROC					; COMDAT

; 1569 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1570 : 	thinker_t *th;
; 1571 : 	mobj_t *mobj;
; 1572 : 
; 1573 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0000e	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  00011	eb 09		 jmp	 SHORT $LN4@FindNewPos
$LN2@FindNewPos:
  00013	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@FindNewPos:
  0001c	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00023	74 29		 je	 SHORT $LN3@FindNewPos

; 1574 : 	{
; 1575 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00025	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00028	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0002f	74 02		 je	 SHORT $LN5@FindNewPos

; 1576 : 			continue;

  00031	eb e0		 jmp	 SHORT $LN2@FindNewPos
$LN5@FindNewPos:

; 1577 : 
; 1578 : 		mobj = (mobj_t *)th;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 1579 : 		if (mobj->mobjnum == oldposition)

  00039	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0003c	8b 88 c8 00 00
	00		 mov	 ecx, DWORD PTR [eax+200]
  00042	3b 4d 08	 cmp	 ecx, DWORD PTR _oldposition$[ebp]
  00045	75 05		 jne	 SHORT $LN6@FindNewPos

; 1580 : 			return mobj;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004a	eb 44		 jmp	 SHORT $LN1@FindNewPos
$LN6@FindNewPos:

; 1581 : 	}

  0004c	eb c5		 jmp	 SHORT $LN2@FindNewPos
$LN3@FindNewPos:

; 1582 : 	if (devparm)

  0004e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00055	74 0d		 je	 SHORT $LN7@FindNewPos

; 1583 : 		CONS_Printf("\2not found\n");

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FAFIBFOK@?$ACnot?5found?6@
  0005c	e8 00 00 00 00	 call	 _CONS_Printf
  00061	83 c4 04	 add	 esp, 4
$LN7@FindNewPos:

; 1584 : 	DEBFILE("not found\n");

  00064	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0006b	74 21		 je	 SHORT $LN8@FindNewPos
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KMDBPMPG@not?5found?6@
  00078	e8 00 00 00 00	 call	 _fputs
  0007d	83 c4 08	 add	 esp, 8
  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _fflush
  0008b	83 c4 04	 add	 esp, 4
$LN8@FindNewPos:

; 1585 : 	return NULL;

  0008e	33 c0		 xor	 eax, eax
$LN1@FindNewPos:

; 1586 : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_FindNewPosition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetArchiveThinkers
_TEXT	SEGMENT
_p_tmp$1 = -188						; size = 4
_p_tmp$2 = -184						; size = 4
_p_tmp$3 = -180						; size = 4
_p_tmp$4 = -176						; size = 4
_p_tmp$5 = -172						; size = 4
_p_tmp$6 = -168						; size = 4
_p_tmp$7 = -164						; size = 4
_p_tmp$8 = -160						; size = 4
_p_tmp$9 = -156						; size = 4
_p_tmp$10 = -152					; size = 4
_p_tmp$11 = -148					; size = 4
_p_tmp$12 = -144					; size = 4
_p_tmp$13 = -140					; size = 4
_p_tmp$14 = -136					; size = 4
_p_tmp$15 = -132					; size = 4
_p_tmp$16 = -128					; size = 4
_p_tmp$17 = -124					; size = 4
_p_tmp$18 = -120					; size = 4
_p_tmp$19 = -116					; size = 4
_p_tmp$20 = -112					; size = 4
_p_tmp$21 = -108					; size = 4
_p_tmp$22 = -104					; size = 4
_p_tmp$23 = -100					; size = 4
_p_tmp$24 = -96						; size = 4
_p_tmp$25 = -92						; size = 4
_p_tmp$26 = -88						; size = 4
_p_tmp$27 = -84						; size = 4
_p_tmp$28 = -80						; size = 4
_p_tmp$29 = -76						; size = 4
_p_tmp$30 = -72						; size = 4
_p_tmp$31 = -68						; size = 4
_p_tmp$32 = -64						; size = 4
_p_tmp$33 = -60						; size = 4
_p_tmp$34 = -56						; size = 4
_p_tmp$35 = -52						; size = 4
_p_tmp$36 = -48						; size = 4
_p_tmp$37 = -44						; size = 4
_z$38 = -40						; size = 4
_p_tmp$39 = -36						; size = 4
_p_tmp$40 = -32						; size = 4
_p_tmp$41 = -28						; size = 4
_p_tmp$42 = -24						; size = 4
_p_tmp$43 = -20						; size = 4
_p_tmp$44 = -16						; size = 4
_diff$ = -12						; size = 4
_mobj$ = -8						; size = 4
_th$ = -4						; size = 4
_P_NetArchiveThinkers PROC				; COMDAT

; 1188 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1189 : 	const thinker_t *th;
; 1190 : 	const mobj_t *mobj;
; 1191 : 	UINT32 diff;
; 1192 : 
; 1193 : 	// save off the current thinkers
; 1194 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0000c	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00011	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  00014	eb 09		 jmp	 SHORT $LN4@P_NetArchi
$LN2@P_NetArchi:
  00016	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00019	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001c	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_NetArchi:
  0001f	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00026	0f 84 cb 11 00
	00		 je	 $LN3@P_NetArchi

; 1195 : 	{
; 1196 : 		if (th->function.acp1 == (actionf_p1)P_MobjThinker)

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0002f	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00036	0f 85 20 0d 00
	00		 jne	 $LN137@P_NetArchi

; 1197 : 		{
; 1198 : 			mobj = (const mobj_t *)th;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0003f	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 1199 : 
; 1200 : 			// Ignore stationary hoops - these will be respawned from mapthings.
; 1201 : 			if (mobj->type == MT_HOOP)

  00042	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00045	81 78 7c f8 00
	00 00		 cmp	 DWORD PTR [eax+124], 248 ; 000000f8H
  0004c	75 02		 jne	 SHORT $LN139@P_NetArchi

; 1202 : 				continue;

  0004e	eb c6		 jmp	 SHORT $LN2@P_NetArchi
$LN139@P_NetArchi:

; 1203 : 
; 1204 : 			// These are NEVER saved.
; 1205 : 			if (mobj->type == MT_HOOPCOLLIDE)

  00050	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00053	81 78 7c f9 00
	00 00		 cmp	 DWORD PTR [eax+124], 249 ; 000000f9H
  0005a	75 02		 jne	 SHORT $LN140@P_NetArchi

; 1206 : 				continue;

  0005c	eb b8		 jmp	 SHORT $LN2@P_NetArchi
$LN140@P_NetArchi:

; 1207 : 
; 1208 : 			// This hoop has already been collected.
; 1209 : 			if (mobj->type == MT_HOOPCENTER && mobj->threshold == 4242)

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00061	81 78 7c fa 00
	00 00		 cmp	 DWORD PTR [eax+124], 250 ; 000000faH
  00068	75 11		 jne	 SHORT $LN141@P_NetArchi
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0006d	81 b8 a0 00 00
	00 92 10 00 00	 cmp	 DWORD PTR [eax+160], 4242 ; 00001092H
  00077	75 02		 jne	 SHORT $LN141@P_NetArchi

; 1210 : 				continue;

  00079	eb 9b		 jmp	 SHORT $LN2@P_NetArchi
$LN141@P_NetArchi:

; 1211 : 
; 1212 : 			if (mobj->spawnpoint && (mobj->info->doomednum != -1 || mobj->type == MT_HOOPCENTER))

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0007e	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  00085	0f 84 ae 00 00
	00		 je	 $LN142@P_NetArchi
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0008e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00094	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  00097	75 10		 jne	 SHORT $LN144@P_NetArchi
  00099	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0009c	81 78 7c fa 00
	00 00		 cmp	 DWORD PTR [eax+124], 250 ; 000000faH
  000a3	0f 85 90 00 00
	00		 jne	 $LN142@P_NetArchi
$LN144@P_NetArchi:

; 1213 : 			{
; 1214 : 				// spawnpoint is not modified but we must save it since it is an identifier
; 1215 : 				diff = MD_SPAWNPOINT;

  000a9	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _diff$[ebp], 1

; 1216 : 
; 1217 : 				if (mobj->type != MT_HOOPCENTER)

  000b0	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b3	81 78 7c fa 00
	00 00		 cmp	 DWORD PTR [eax+124], 250 ; 000000faH
  000ba	74 7b		 je	 SHORT $LN148@P_NetArchi

; 1218 : 				{
; 1219 : 					if ((mobj->x != mobj->spawnpoint->x << FRACBITS) ||
; 1220 : 						(mobj->y != mobj->spawnpoint->y << FRACBITS) ||

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000bf	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000c5	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  000c8	c1 e2 10	 shl	 edx, 16			; 00000010H
  000cb	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ce	39 50 10	 cmp	 DWORD PTR [eax+16], edx
  000d1	75 38		 jne	 SHORT $LN147@P_NetArchi
  000d3	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000dc	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  000e0	c1 e2 10	 shl	 edx, 16			; 00000010H
  000e3	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e6	39 50 14	 cmp	 DWORD PTR [eax+20], edx
  000e9	75 20		 jne	 SHORT $LN147@P_NetArchi
  000eb	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ee	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000f4	0f bf 41 04	 movsx	 eax, WORD PTR [ecx+4]
  000f8	99		 cdq
  000f9	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  000fe	f7 f9		 idiv	 ecx
  00100	c1 e0 1d	 shl	 eax, 29			; 0000001dH
  00103	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00106	39 42 24	 cmp	 DWORD PTR [edx+36], eax
  00109	74 09		 je	 SHORT $LN146@P_NetArchi
$LN147@P_NetArchi:

; 1221 : 						(mobj->angle != (angle_t)(ANGLE_45 * (mobj->spawnpoint->angle/45))))
; 1222 : 						diff |= MD_POS;

  0010b	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0010e	83 c8 02	 or	 eax, 2
  00111	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN146@P_NetArchi:

; 1223 : 
; 1224 : 					if (mobj->info->doomednum != mobj->spawnpoint->type)

  00114	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00117	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0011d	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00120	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  00126	0f b7 50 06	 movzx	 edx, WORD PTR [eax+6]
  0012a	39 11		 cmp	 DWORD PTR [ecx], edx
  0012c	74 09		 je	 SHORT $LN148@P_NetArchi

; 1225 : 						diff |= MD_TYPE;

  0012e	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00131	83 c8 04	 or	 eax, 4
  00134	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN148@P_NetArchi:

; 1226 : 				}
; 1227 : 			}

  00137	eb 07		 jmp	 SHORT $LN143@P_NetArchi
$LN142@P_NetArchi:

; 1228 : 			else
; 1229 : 				diff = MD_POS | MD_TYPE; // not a map spawned thing so make it from scratch

  00139	c7 45 f4 06 00
	00 00		 mov	 DWORD PTR _diff$[ebp], 6
$LN143@P_NetArchi:

; 1230 : 
; 1231 : 			// not the default but the most probable
; 1232 : 			if (mobj->momx != 0 || mobj->momy != 0 || mobj->momz != 0)

  00140	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00143	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00147	75 12		 jne	 SHORT $LN150@P_NetArchi
  00149	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0014c	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00150	75 09		 jne	 SHORT $LN150@P_NetArchi
  00152	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00155	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00159	74 09		 je	 SHORT $LN149@P_NetArchi
$LN150@P_NetArchi:

; 1233 : 				diff |= MD_MOM;

  0015b	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0015e	83 c8 08	 or	 eax, 8
  00161	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN149@P_NetArchi:

; 1234 : 			if (mobj->radius != mobj->info->radius)

  00164	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00167	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0016d	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00170	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00173	3b 41 40	 cmp	 eax, DWORD PTR [ecx+64]
  00176	74 09		 je	 SHORT $LN151@P_NetArchi

; 1235 : 				diff |= MD_RADIUS;

  00178	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0017b	83 c8 10	 or	 eax, 16			; 00000010H
  0017e	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN151@P_NetArchi:

; 1236 : 			if (mobj->height != mobj->info->height)

  00181	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00184	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0018a	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0018d	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00190	3b 41 44	 cmp	 eax, DWORD PTR [ecx+68]
  00193	74 09		 je	 SHORT $LN152@P_NetArchi

; 1237 : 				diff |= MD_HEIGHT;

  00195	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00198	83 c8 20	 or	 eax, 32			; 00000020H
  0019b	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN152@P_NetArchi:

; 1238 : 			if (mobj->flags != mobj->info->flags || mobj->flags & MF_TRANSLATION)

  0019e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001a1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001a7	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  001aa	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  001ad	3b 41 58	 cmp	 eax, DWORD PTR [ecx+88]
  001b0	75 0e		 jne	 SHORT $LN154@P_NetArchi
  001b2	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001b5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001b8	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  001be	74 09		 je	 SHORT $LN153@P_NetArchi
$LN154@P_NetArchi:

; 1239 : 				diff |= MD_FLAGS;

  001c0	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  001c3	83 c8 40	 or	 eax, 64			; 00000040H
  001c6	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN153@P_NetArchi:

; 1240 : 			diff |= MD_FLAGS2; // Force saving of flags2

  001c9	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  001cc	0d 00 00 80 00	 or	 eax, 8388608		; 00800000H
  001d1	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax

; 1241 : 			if (mobj->health != mobj->info->spawnhealth)

  001d4	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001d7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001dd	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  001e0	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  001e6	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  001e9	74 0b		 je	 SHORT $LN155@P_NetArchi

; 1242 : 				diff |= MD_HEALTH;

  001eb	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  001ee	0d 80 00 00 00	 or	 eax, 128		; 00000080H
  001f3	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN155@P_NetArchi:

; 1243 : 			if (mobj->reactiontime != mobj->info->reactiontime)

  001f6	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001f9	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001ff	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00202	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00208	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  0020b	74 0b		 je	 SHORT $LN156@P_NetArchi

; 1244 : 				diff |= MD_RTIME;

  0020d	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00210	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  00215	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN156@P_NetArchi:

; 1245 : 			if ((statenum_t)(mobj->state-states) != mobj->info->spawnstate)

  00218	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0021b	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  0021e	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00223	99		 cdq
  00224	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00229	f7 f9		 idiv	 ecx
  0022b	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0022e	8b 8a 80 00 00
	00		 mov	 ecx, DWORD PTR [edx+128]
  00234	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00237	74 0b		 je	 SHORT $LN157@P_NetArchi

; 1246 : 				diff |= MD_STATE;

  00239	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0023c	0d 00 02 00 00	 or	 eax, 512		; 00000200H
  00241	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN157@P_NetArchi:

; 1247 : 			if (mobj->tics != mobj->state->tics)

  00244	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00247	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0024a	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0024d	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00250	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00253	74 0b		 je	 SHORT $LN158@P_NetArchi

; 1248 : 				diff |= MD_TICS;

  00255	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00258	0d 00 04 00 00	 or	 eax, 1024		; 00000400H
  0025d	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN158@P_NetArchi:

; 1249 : 			if (mobj->sprite != mobj->state->sprite)

  00260	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00263	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00266	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00269	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0026c	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0026e	74 0b		 je	 SHORT $LN159@P_NetArchi

; 1250 : 				diff |= MD_SPRITE;

  00270	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00273	0d 00 08 00 00	 or	 eax, 2048		; 00000800H
  00278	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN159@P_NetArchi:

; 1251 : 			if (mobj->frame != mobj->state->frame)

  0027b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0027e	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00281	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00284	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00287	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0028a	74 0b		 je	 SHORT $LN160@P_NetArchi

; 1252 : 				diff |= MD_FRAME;

  0028c	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0028f	0d 00 10 00 00	 or	 eax, 4096		; 00001000H
  00294	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN160@P_NetArchi:

; 1253 : 			if (mobj->eflags)

  00297	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0029a	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  002a1	74 0b		 je	 SHORT $LN161@P_NetArchi

; 1254 : 				diff |= MD_EFLAGS;

  002a3	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  002a6	0d 00 20 00 00	 or	 eax, 8192		; 00002000H
  002ab	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN161@P_NetArchi:

; 1255 : 			if (mobj->player)

  002ae	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002b1	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  002b8	74 0b		 je	 SHORT $LN162@P_NetArchi

; 1256 : 				diff |= MD_PLAYER;

  002ba	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  002bd	0d 00 40 00 00	 or	 eax, 16384		; 00004000H
  002c2	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN162@P_NetArchi:

; 1257 : 
; 1258 : 			if (mobj->movedir)

  002c5	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002c8	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  002cf	74 0b		 je	 SHORT $LN163@P_NetArchi

; 1259 : 				diff |= MD_MOVEDIR;

  002d1	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  002d4	0d 00 80 00 00	 or	 eax, 32768		; 00008000H
  002d9	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN163@P_NetArchi:

; 1260 : 			if (mobj->movecount)

  002dc	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002df	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  002e6	74 0b		 je	 SHORT $LN164@P_NetArchi

; 1261 : 				diff |= MD_MOVECOUNT;

  002e8	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  002eb	0d 00 00 01 00	 or	 eax, 65536		; 00010000H
  002f0	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN164@P_NetArchi:

; 1262 : 			if (mobj->threshold)

  002f3	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002f6	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  002fd	74 0b		 je	 SHORT $LN165@P_NetArchi

; 1263 : 				diff |= MD_THRESHOLD;

  002ff	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00302	0d 00 00 02 00	 or	 eax, 131072		; 00020000H
  00307	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN165@P_NetArchi:

; 1264 : 			if (mobj->lastlook != -1)

  0030a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0030d	83 b8 a8 00 00
	00 ff		 cmp	 DWORD PTR [eax+168], -1
  00314	74 0b		 je	 SHORT $LN166@P_NetArchi

; 1265 : 				diff |= MD_LASTLOOK;

  00316	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00319	0d 00 00 04 00	 or	 eax, 262144		; 00040000H
  0031e	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN166@P_NetArchi:

; 1266 : 			if (mobj->target)

  00321	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00324	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0032b	74 0b		 je	 SHORT $LN167@P_NetArchi

; 1267 : 				diff |= MD_TARGET;

  0032d	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00330	0d 00 00 08 00	 or	 eax, 524288		; 00080000H
  00335	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN167@P_NetArchi:

; 1268 : 			if (mobj->tracer)

  00338	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0033b	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00342	74 0b		 je	 SHORT $LN168@P_NetArchi

; 1269 : 				diff |= MD_TRACER;

  00344	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00347	0d 00 00 10 00	 or	 eax, 1048576		; 00100000H
  0034c	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN168@P_NetArchi:

; 1270 : 			if (mobj->friction != ORIG_FRICTION)

  0034f	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00352	81 b8 b4 00 00
	00 00 e8 00 00	 cmp	 DWORD PTR [eax+180], 59392 ; 0000e800H
  0035c	74 0b		 je	 SHORT $LN169@P_NetArchi

; 1271 : 				diff |= MD_FRICTION;

  0035e	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00361	0d 00 00 20 00	 or	 eax, 2097152		; 00200000H
  00366	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN169@P_NetArchi:

; 1272 : 			if (mobj->movefactor != ORIG_FRICTION_FACTOR)

  00369	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0036c	81 b8 b8 00 00
	00 00 08 00 00	 cmp	 DWORD PTR [eax+184], 2048 ; 00000800H
  00376	74 0b		 je	 SHORT $LN170@P_NetArchi

; 1273 : 				diff |= MD_MOVEFACTOR;

  00378	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0037b	0d 00 00 40 00	 or	 eax, 4194304		; 00400000H
  00380	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN170@P_NetArchi:

; 1274 : 			if (mobj->fuse)

  00383	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00386	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  0038d	74 0b		 je	 SHORT $LN171@P_NetArchi

; 1275 : 				diff |= MD_FUSE;

  0038f	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00392	0d 00 00 00 01	 or	 eax, 16777216		; 01000000H
  00397	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN171@P_NetArchi:

; 1276 : 			if (mobj->watertop)

  0039a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0039d	83 b8 c0 00 00
	00 00		 cmp	 DWORD PTR [eax+192], 0
  003a4	74 0b		 je	 SHORT $LN172@P_NetArchi

; 1277 : 				diff |= MD_WATERTOP;

  003a6	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  003a9	0d 00 00 00 02	 or	 eax, 33554432		; 02000000H
  003ae	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN172@P_NetArchi:

; 1278 : 			if (mobj->waterbottom)

  003b1	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  003b4	83 b8 c4 00 00
	00 00		 cmp	 DWORD PTR [eax+196], 0
  003bb	74 0b		 je	 SHORT $LN173@P_NetArchi

; 1279 : 				diff |= MD_WATERBOTTOM;

  003bd	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  003c0	0d 00 00 00 04	 or	 eax, 67108864		; 04000000H
  003c5	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN173@P_NetArchi:

; 1280 : 			if (mobj->scale != 100)

  003c8	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  003cb	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  003d2	83 f9 64	 cmp	 ecx, 100		; 00000064H
  003d5	74 0b		 je	 SHORT $LN174@P_NetArchi

; 1281 : 				diff |= MD_SCALE;

  003d7	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  003da	0d 00 00 00 08	 or	 eax, 134217728		; 08000000H
  003df	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN174@P_NetArchi:

; 1282 : 			if (mobj->destscale != mobj->scale)

  003e2	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  003e5	0f b7 88 ce 00
	00 00		 movzx	 ecx, WORD PTR [eax+206]
  003ec	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  003ef	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  003f6	3b c8		 cmp	 ecx, eax
  003f8	74 0b		 je	 SHORT $LN175@P_NetArchi

; 1283 : 				diff |= MD_DSCALE;

  003fa	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  003fd	0d 00 00 00 10	 or	 eax, 268435456		; 10000000H
  00402	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN175@P_NetArchi:

; 1284 : 			if (mobj == redflag)

  00405	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00408	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _redflag
  0040e	75 0b		 jne	 SHORT $LN176@P_NetArchi

; 1285 : 				diff |= MD_REDFLAG;

  00410	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00413	0d 00 00 00 40	 or	 eax, 1073741824		; 40000000H
  00418	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN176@P_NetArchi:

; 1286 : 			if (mobj == blueflag)

  0041b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0041e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _blueflag
  00424	75 0b		 jne	 SHORT $LN177@P_NetArchi

; 1287 : 				diff |= MD_BLUEFLAG;

  00426	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00429	0d 00 00 00 20	 or	 eax, 536870912		; 20000000H
  0042e	89 45 f4	 mov	 DWORD PTR _diff$[ebp], eax
$LN177@P_NetArchi:

; 1288 : 
; 1289 : 			WRITEUINT8(save_p, tc_mobj);

  00431	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00436	89 45 f0	 mov	 DWORD PTR _p_tmp$44[ebp], eax
  00439	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$44[ebp]
  0043c	c6 00 00	 mov	 BYTE PTR [eax], 0
  0043f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$44[ebp]
  00442	83 c0 01	 add	 eax, 1
  00445	89 45 f0	 mov	 DWORD PTR _p_tmp$44[ebp], eax
  00448	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$44[ebp]
  0044b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00450	33 c0		 xor	 eax, eax
  00452	75 dd		 jne	 SHORT $LN177@P_NetArchi
$LN6@P_NetArchi:

; 1290 : 			WRITEUINT32(save_p, diff);

  00454	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00459	89 45 ec	 mov	 DWORD PTR _p_tmp$43[ebp], eax
  0045c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$43[ebp]
  0045f	8b 4d f4	 mov	 ecx, DWORD PTR _diff$[ebp]
  00462	89 08		 mov	 DWORD PTR [eax], ecx
  00464	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$43[ebp]
  00467	83 c0 04	 add	 eax, 4
  0046a	89 45 ec	 mov	 DWORD PTR _p_tmp$43[ebp], eax
  0046d	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$43[ebp]
  00470	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00475	33 c0		 xor	 eax, eax
  00477	75 db		 jne	 SHORT $LN6@P_NetArchi
$LN9@P_NetArchi:

; 1291 : 
; 1292 : 			// save pointer, at load time we will search this pointer to reinitilize pointers
; 1293 : 			WRITEUINT32(save_p, (size_t)mobj);

  00479	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0047e	89 45 e8	 mov	 DWORD PTR _p_tmp$42[ebp], eax
  00481	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$42[ebp]
  00484	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00487	89 08		 mov	 DWORD PTR [eax], ecx
  00489	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$42[ebp]
  0048c	83 c0 04	 add	 eax, 4
  0048f	89 45 e8	 mov	 DWORD PTR _p_tmp$42[ebp], eax
  00492	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$42[ebp]
  00495	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0049a	33 c0		 xor	 eax, eax
  0049c	75 db		 jne	 SHORT $LN9@P_NetArchi
$LN12@P_NetArchi:

; 1294 : 
; 1295 : 			WRITEFIXED(save_p, mobj->z); // Force this so 3dfloor problems don't arise.

  0049e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004a3	89 45 e4	 mov	 DWORD PTR _p_tmp$41[ebp], eax
  004a6	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$41[ebp]
  004a9	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  004ac	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004af	89 10		 mov	 DWORD PTR [eax], edx
  004b1	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$41[ebp]
  004b4	83 c0 04	 add	 eax, 4
  004b7	89 45 e4	 mov	 DWORD PTR _p_tmp$41[ebp], eax
  004ba	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$41[ebp]
  004bd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  004c2	33 c0		 xor	 eax, eax
  004c4	75 d8		 jne	 SHORT $LN12@P_NetArchi
$LN15@P_NetArchi:

; 1296 : 			WRITEFIXED(save_p, mobj->floorz);

  004c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004cb	89 45 e0	 mov	 DWORD PTR _p_tmp$40[ebp], eax
  004ce	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$40[ebp]
  004d1	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  004d4	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  004d7	89 10		 mov	 DWORD PTR [eax], edx
  004d9	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$40[ebp]
  004dc	83 c0 04	 add	 eax, 4
  004df	89 45 e0	 mov	 DWORD PTR _p_tmp$40[ebp], eax
  004e2	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$40[ebp]
  004e5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  004ea	33 c0		 xor	 eax, eax
  004ec	75 d8		 jne	 SHORT $LN15@P_NetArchi
$LN18@P_NetArchi:

; 1297 : 			WRITEFIXED(save_p, mobj->ceilingz);

  004ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004f3	89 45 dc	 mov	 DWORD PTR _p_tmp$39[ebp], eax
  004f6	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$39[ebp]
  004f9	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  004fc	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  004ff	89 10		 mov	 DWORD PTR [eax], edx
  00501	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$39[ebp]
  00504	83 c0 04	 add	 eax, 4
  00507	89 45 dc	 mov	 DWORD PTR _p_tmp$39[ebp], eax
  0050a	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$39[ebp]
  0050d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00512	33 c0		 xor	 eax, eax
  00514	75 d8		 jne	 SHORT $LN18@P_NetArchi

; 1298 : 
; 1299 : 			if (diff & MD_SPAWNPOINT)

  00516	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00519	83 e0 01	 and	 eax, 1
  0051c	74 6c		 je	 SHORT $LN180@P_NetArchi

; 1300 : 			{
; 1301 : 				size_t z;
; 1302 : 
; 1303 : 				for (z = 0; z < nummapthings; z++)

  0051e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _z$38[ebp], 0
  00525	eb 09		 jmp	 SHORT $LN25@P_NetArchi
$LN23@P_NetArchi:
  00527	8b 45 d8	 mov	 eax, DWORD PTR _z$38[ebp]
  0052a	83 c0 01	 add	 eax, 1
  0052d	89 45 d8	 mov	 DWORD PTR _z$38[ebp], eax
$LN25@P_NetArchi:
  00530	8b 45 d8	 mov	 eax, DWORD PTR _z$38[ebp]
  00533	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _nummapthings
  00539	73 3e		 jae	 SHORT $LN24@P_NetArchi

; 1304 : 					if (&mapthings[z] == mobj->spawnpoint)

  0053b	6b 45 d8 14	 imul	 eax, DWORD PTR _z$38[ebp], 20
  0053f	03 05 00 00 00
	00		 add	 eax, DWORD PTR _mapthings
  00545	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00548	3b 81 ac 00 00
	00		 cmp	 eax, DWORD PTR [ecx+172]
  0054e	75 27		 jne	 SHORT $LN27@P_NetArchi
$LN28@P_NetArchi:

; 1305 : 						WRITEUINT16(save_p, z);

  00550	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00555	89 45 d4	 mov	 DWORD PTR _p_tmp$37[ebp], eax
  00558	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$37[ebp]
  0055b	66 8b 4d d8	 mov	 cx, WORD PTR _z$38[ebp]
  0055f	66 89 08	 mov	 WORD PTR [eax], cx
  00562	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$37[ebp]
  00565	83 c0 02	 add	 eax, 2
  00568	89 45 d4	 mov	 DWORD PTR _p_tmp$37[ebp], eax
  0056b	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$37[ebp]
  0056e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00573	33 c0		 xor	 eax, eax
  00575	75 d9		 jne	 SHORT $LN28@P_NetArchi
$LN27@P_NetArchi:
  00577	eb ae		 jmp	 SHORT $LN23@P_NetArchi
$LN24@P_NetArchi:

; 1306 : 
; 1307 : 				if (mobj->type == MT_HOOPCENTER)

  00579	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0057c	81 78 7c fa 00
	00 00		 cmp	 DWORD PTR [eax+124], 250 ; 000000faH
  00583	75 05		 jne	 SHORT $LN180@P_NetArchi

; 1308 : 					continue;

  00585	e9 8c fa ff ff	 jmp	 $LN2@P_NetArchi
$LN180@P_NetArchi:

; 1309 : 			}
; 1310 : 
; 1311 : 			if (diff & MD_TYPE)

  0058a	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0058d	83 e0 04	 and	 eax, 4
  00590	74 28		 je	 SHORT $LN30@P_NetArchi
$LN31@P_NetArchi:

; 1312 : 				WRITEUINT32(save_p, mobj->type);

  00592	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00597	89 45 d0	 mov	 DWORD PTR _p_tmp$36[ebp], eax
  0059a	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$36[ebp]
  0059d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  005a0	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  005a3	89 10		 mov	 DWORD PTR [eax], edx
  005a5	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$36[ebp]
  005a8	83 c0 04	 add	 eax, 4
  005ab	89 45 d0	 mov	 DWORD PTR _p_tmp$36[ebp], eax
  005ae	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$36[ebp]
  005b1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  005b6	33 c0		 xor	 eax, eax
  005b8	75 d8		 jne	 SHORT $LN31@P_NetArchi
$LN30@P_NetArchi:

; 1313 : 			if (diff & MD_POS)

  005ba	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  005bd	83 e0 02	 and	 eax, 2
  005c0	74 78		 je	 SHORT $LN39@P_NetArchi
$LN34@P_NetArchi:

; 1314 : 			{
; 1315 : 				WRITEFIXED(save_p, mobj->x);

  005c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005c7	89 45 cc	 mov	 DWORD PTR _p_tmp$35[ebp], eax
  005ca	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$35[ebp]
  005cd	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  005d0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  005d3	89 10		 mov	 DWORD PTR [eax], edx
  005d5	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$35[ebp]
  005d8	83 c0 04	 add	 eax, 4
  005db	89 45 cc	 mov	 DWORD PTR _p_tmp$35[ebp], eax
  005de	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$35[ebp]
  005e1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  005e6	33 c0		 xor	 eax, eax
  005e8	75 d8		 jne	 SHORT $LN34@P_NetArchi
$LN33@P_NetArchi:

; 1316 : 				WRITEFIXED(save_p, mobj->y);

  005ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005ef	89 45 c8	 mov	 DWORD PTR _p_tmp$34[ebp], eax
  005f2	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$34[ebp]
  005f5	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  005f8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005fb	89 10		 mov	 DWORD PTR [eax], edx
  005fd	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$34[ebp]
  00600	83 c0 04	 add	 eax, 4
  00603	89 45 c8	 mov	 DWORD PTR _p_tmp$34[ebp], eax
  00606	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$34[ebp]
  00609	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0060e	33 c0		 xor	 eax, eax
  00610	75 d8		 jne	 SHORT $LN33@P_NetArchi
$LN36@P_NetArchi:

; 1317 : 				WRITEANGLE(save_p, mobj->angle);

  00612	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00617	89 45 c4	 mov	 DWORD PTR _p_tmp$33[ebp], eax
  0061a	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$33[ebp]
  0061d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00620	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00623	89 10		 mov	 DWORD PTR [eax], edx
  00625	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$33[ebp]
  00628	83 c0 04	 add	 eax, 4
  0062b	89 45 c4	 mov	 DWORD PTR _p_tmp$33[ebp], eax
  0062e	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$33[ebp]
  00631	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00636	33 c0		 xor	 eax, eax
  00638	75 d8		 jne	 SHORT $LN36@P_NetArchi
$LN39@P_NetArchi:

; 1318 : 			}
; 1319 : 			if (diff & MD_MOM)

  0063a	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0063d	83 e0 08	 and	 eax, 8
  00640	74 78		 je	 SHORT $LN48@P_NetArchi
$LN43@P_NetArchi:

; 1320 : 			{
; 1321 : 				WRITEFIXED(save_p, mobj->momx);

  00642	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00647	89 45 c0	 mov	 DWORD PTR _p_tmp$32[ebp], eax
  0064a	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$32[ebp]
  0064d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00650	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00653	89 10		 mov	 DWORD PTR [eax], edx
  00655	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$32[ebp]
  00658	83 c0 04	 add	 eax, 4
  0065b	89 45 c0	 mov	 DWORD PTR _p_tmp$32[ebp], eax
  0065e	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$32[ebp]
  00661	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00666	33 c0		 xor	 eax, eax
  00668	75 d8		 jne	 SHORT $LN43@P_NetArchi
$LN42@P_NetArchi:

; 1322 : 				WRITEFIXED(save_p, mobj->momy);

  0066a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0066f	89 45 bc	 mov	 DWORD PTR _p_tmp$31[ebp], eax
  00672	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$31[ebp]
  00675	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00678	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0067b	89 10		 mov	 DWORD PTR [eax], edx
  0067d	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$31[ebp]
  00680	83 c0 04	 add	 eax, 4
  00683	89 45 bc	 mov	 DWORD PTR _p_tmp$31[ebp], eax
  00686	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$31[ebp]
  00689	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0068e	33 c0		 xor	 eax, eax
  00690	75 d8		 jne	 SHORT $LN42@P_NetArchi
$LN45@P_NetArchi:

; 1323 : 				WRITEFIXED(save_p, mobj->momz);

  00692	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00697	89 45 b8	 mov	 DWORD PTR _p_tmp$30[ebp], eax
  0069a	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  0069d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006a0	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  006a3	89 10		 mov	 DWORD PTR [eax], edx
  006a5	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  006a8	83 c0 04	 add	 eax, 4
  006ab	89 45 b8	 mov	 DWORD PTR _p_tmp$30[ebp], eax
  006ae	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  006b1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  006b6	33 c0		 xor	 eax, eax
  006b8	75 d8		 jne	 SHORT $LN45@P_NetArchi
$LN48@P_NetArchi:

; 1324 : 			}
; 1325 : 			if (diff & MD_RADIUS)

  006ba	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  006bd	83 e0 10	 and	 eax, 16			; 00000010H
  006c0	74 28		 je	 SHORT $LN51@P_NetArchi
$LN52@P_NetArchi:

; 1326 : 				WRITEFIXED(save_p, mobj->radius);

  006c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  006c7	89 45 b4	 mov	 DWORD PTR _p_tmp$29[ebp], eax
  006ca	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  006cd	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006d0	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  006d3	89 10		 mov	 DWORD PTR [eax], edx
  006d5	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  006d8	83 c0 04	 add	 eax, 4
  006db	89 45 b4	 mov	 DWORD PTR _p_tmp$29[ebp], eax
  006de	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  006e1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  006e6	33 c0		 xor	 eax, eax
  006e8	75 d8		 jne	 SHORT $LN52@P_NetArchi
$LN51@P_NetArchi:

; 1327 : 			if (diff & MD_HEIGHT)

  006ea	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  006ed	83 e0 20	 and	 eax, 32			; 00000020H
  006f0	74 28		 je	 SHORT $LN54@P_NetArchi
$LN55@P_NetArchi:

; 1328 : 				WRITEFIXED(save_p, mobj->height);

  006f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  006f7	89 45 b0	 mov	 DWORD PTR _p_tmp$28[ebp], eax
  006fa	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  006fd	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00700	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00703	89 10		 mov	 DWORD PTR [eax], edx
  00705	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  00708	83 c0 04	 add	 eax, 4
  0070b	89 45 b0	 mov	 DWORD PTR _p_tmp$28[ebp], eax
  0070e	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  00711	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00716	33 c0		 xor	 eax, eax
  00718	75 d8		 jne	 SHORT $LN55@P_NetArchi
$LN54@P_NetArchi:

; 1329 : 			if (diff & MD_FLAGS)

  0071a	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0071d	83 e0 40	 and	 eax, 64			; 00000040H
  00720	74 5e		 je	 SHORT $LN60@P_NetArchi
$LN58@P_NetArchi:

; 1330 : 			{
; 1331 : 				WRITEINT32(save_p, mobj->flags);

  00722	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00727	89 45 ac	 mov	 DWORD PTR _p_tmp$27[ebp], eax
  0072a	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  0072d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00730	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00733	89 10		 mov	 DWORD PTR [eax], edx
  00735	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  00738	83 c0 04	 add	 eax, 4
  0073b	89 45 ac	 mov	 DWORD PTR _p_tmp$27[ebp], eax
  0073e	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  00741	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00746	33 c0		 xor	 eax, eax
  00748	75 d8		 jne	 SHORT $LN58@P_NetArchi

; 1332 : 				if (mobj->flags & MF_TRANSLATION)

  0074a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0074d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00750	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  00756	74 28		 je	 SHORT $LN60@P_NetArchi
$LN61@P_NetArchi:

; 1333 : 					WRITEUINT8(save_p, mobj->color);

  00758	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0075d	89 45 a8	 mov	 DWORD PTR _p_tmp$26[ebp], eax
  00760	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  00763	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00766	8a 51 68	 mov	 dl, BYTE PTR [ecx+104]
  00769	88 10		 mov	 BYTE PTR [eax], dl
  0076b	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  0076e	83 c0 01	 add	 eax, 1
  00771	89 45 a8	 mov	 DWORD PTR _p_tmp$26[ebp], eax
  00774	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  00777	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0077c	33 c0		 xor	 eax, eax
  0077e	75 d8		 jne	 SHORT $LN61@P_NetArchi
$LN60@P_NetArchi:

; 1334 : 			}
; 1335 : 			if (diff & MD_FLAGS2)

  00780	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00783	25 00 00 80 00	 and	 eax, 8388608		; 00800000H
  00788	74 2b		 je	 SHORT $LN63@P_NetArchi
$LN64@P_NetArchi:

; 1336 : 				WRITEINT32(save_p, mobj->flags2);

  0078a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0078f	89 45 a4	 mov	 DWORD PTR _p_tmp$25[ebp], eax
  00792	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  00795	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00798	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0079e	89 10		 mov	 DWORD PTR [eax], edx
  007a0	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  007a3	83 c0 04	 add	 eax, 4
  007a6	89 45 a4	 mov	 DWORD PTR _p_tmp$25[ebp], eax
  007a9	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  007ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  007b1	33 c0		 xor	 eax, eax
  007b3	75 d5		 jne	 SHORT $LN64@P_NetArchi
$LN63@P_NetArchi:

; 1337 : 			if (diff & MD_HEALTH)

  007b5	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  007b8	25 80 00 00 00	 and	 eax, 128		; 00000080H
  007bd	74 2b		 je	 SHORT $LN66@P_NetArchi
$LN67@P_NetArchi:

; 1338 : 				WRITEINT32(save_p, mobj->health);

  007bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007c4	89 45 a0	 mov	 DWORD PTR _p_tmp$24[ebp], eax
  007c7	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  007ca	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  007cd	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  007d3	89 10		 mov	 DWORD PTR [eax], edx
  007d5	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  007d8	83 c0 04	 add	 eax, 4
  007db	89 45 a0	 mov	 DWORD PTR _p_tmp$24[ebp], eax
  007de	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  007e1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  007e6	33 c0		 xor	 eax, eax
  007e8	75 d5		 jne	 SHORT $LN67@P_NetArchi
$LN66@P_NetArchi:

; 1339 : 			if (diff & MD_RTIME)

  007ea	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  007ed	25 00 01 00 00	 and	 eax, 256		; 00000100H
  007f2	74 2b		 je	 SHORT $LN69@P_NetArchi
$LN70@P_NetArchi:

; 1340 : 				WRITEINT32(save_p, mobj->reactiontime);

  007f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007f9	89 45 9c	 mov	 DWORD PTR _p_tmp$23[ebp], eax
  007fc	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  007ff	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00802	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  00808	89 10		 mov	 DWORD PTR [eax], edx
  0080a	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  0080d	83 c0 04	 add	 eax, 4
  00810	89 45 9c	 mov	 DWORD PTR _p_tmp$23[ebp], eax
  00813	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  00816	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0081b	33 c0		 xor	 eax, eax
  0081d	75 d5		 jne	 SHORT $LN70@P_NetArchi
$LN69@P_NetArchi:

; 1341 : 			if (diff & MD_STATE)

  0081f	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00822	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00827	74 36		 je	 SHORT $LN72@P_NetArchi
$LN73@P_NetArchi:

; 1342 : 				WRITEUINT16(save_p, mobj->state-states);

  00829	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0082e	89 45 98	 mov	 DWORD PTR _p_tmp$22[ebp], eax
  00831	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00834	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  00837	2d 00 00 00 00	 sub	 eax, OFFSET _states
  0083c	99		 cdq
  0083d	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00842	f7 f9		 idiv	 ecx
  00844	8b 55 98	 mov	 edx, DWORD PTR _p_tmp$22[ebp]
  00847	66 89 02	 mov	 WORD PTR [edx], ax
  0084a	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  0084d	83 c0 02	 add	 eax, 2
  00850	89 45 98	 mov	 DWORD PTR _p_tmp$22[ebp], eax
  00853	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  00856	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0085b	33 c0		 xor	 eax, eax
  0085d	75 ca		 jne	 SHORT $LN73@P_NetArchi
$LN72@P_NetArchi:

; 1343 : 			if (diff & MD_TICS)

  0085f	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00862	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00867	74 28		 je	 SHORT $LN75@P_NetArchi
$LN76@P_NetArchi:

; 1344 : 				WRITEINT32(save_p, mobj->tics);

  00869	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0086e	89 45 94	 mov	 DWORD PTR _p_tmp$21[ebp], eax
  00871	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  00874	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00877	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  0087a	89 10		 mov	 DWORD PTR [eax], edx
  0087c	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  0087f	83 c0 04	 add	 eax, 4
  00882	89 45 94	 mov	 DWORD PTR _p_tmp$21[ebp], eax
  00885	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  00888	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0088d	33 c0		 xor	 eax, eax
  0088f	75 d8		 jne	 SHORT $LN76@P_NetArchi
$LN75@P_NetArchi:

; 1345 : 			if (diff & MD_SPRITE)

  00891	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00894	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00899	74 2a		 je	 SHORT $LN78@P_NetArchi
$LN79@P_NetArchi:

; 1346 : 				WRITEUINT16(save_p, mobj->sprite);

  0089b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  008a0	89 45 90	 mov	 DWORD PTR _p_tmp$20[ebp], eax
  008a3	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  008a6	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  008a9	66 8b 51 28	 mov	 dx, WORD PTR [ecx+40]
  008ad	66 89 10	 mov	 WORD PTR [eax], dx
  008b0	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  008b3	83 c0 02	 add	 eax, 2
  008b6	89 45 90	 mov	 DWORD PTR _p_tmp$20[ebp], eax
  008b9	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  008bc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  008c1	33 c0		 xor	 eax, eax
  008c3	75 d6		 jne	 SHORT $LN79@P_NetArchi
$LN78@P_NetArchi:

; 1347 : 			if (diff & MD_FRAME)

  008c5	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  008c8	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  008cd	74 28		 je	 SHORT $LN81@P_NetArchi
$LN82@P_NetArchi:

; 1348 : 				WRITEUINT32(save_p, mobj->frame);

  008cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  008d4	89 45 8c	 mov	 DWORD PTR _p_tmp$19[ebp], eax
  008d7	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  008da	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  008dd	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  008e0	89 10		 mov	 DWORD PTR [eax], edx
  008e2	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  008e5	83 c0 04	 add	 eax, 4
  008e8	89 45 8c	 mov	 DWORD PTR _p_tmp$19[ebp], eax
  008eb	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  008ee	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  008f3	33 c0		 xor	 eax, eax
  008f5	75 d8		 jne	 SHORT $LN82@P_NetArchi
$LN81@P_NetArchi:

; 1349 : 			if (diff & MD_EFLAGS)

  008f7	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  008fa	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  008ff	74 2b		 je	 SHORT $LN84@P_NetArchi
$LN85@P_NetArchi:

; 1350 : 				WRITEUINT32(save_p, mobj->eflags);

  00901	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00906	89 45 88	 mov	 DWORD PTR _p_tmp$18[ebp], eax
  00909	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  0090c	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0090f	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00915	89 10		 mov	 DWORD PTR [eax], edx
  00917	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  0091a	83 c0 04	 add	 eax, 4
  0091d	89 45 88	 mov	 DWORD PTR _p_tmp$18[ebp], eax
  00920	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  00923	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00928	33 c0		 xor	 eax, eax
  0092a	75 d5		 jne	 SHORT $LN85@P_NetArchi
$LN84@P_NetArchi:

; 1351 : 			if (diff & MD_PLAYER)

  0092c	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  0092f	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00934	74 38		 je	 SHORT $LN87@P_NetArchi
$LN88@P_NetArchi:

; 1352 : 				WRITEUINT8(save_p, mobj->player-players);

  00936	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0093b	89 45 84	 mov	 DWORD PTR _p_tmp$17[ebp], eax
  0093e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00941	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00947	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0094c	99		 cdq
  0094d	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00952	f7 f9		 idiv	 ecx
  00954	8b 55 84	 mov	 edx, DWORD PTR _p_tmp$17[ebp]
  00957	88 02		 mov	 BYTE PTR [edx], al
  00959	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  0095c	83 c0 01	 add	 eax, 1
  0095f	89 45 84	 mov	 DWORD PTR _p_tmp$17[ebp], eax
  00962	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  00965	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0096a	33 c0		 xor	 eax, eax
  0096c	75 c8		 jne	 SHORT $LN88@P_NetArchi
$LN87@P_NetArchi:

; 1353 : 			if (diff & MD_MOVEDIR)

  0096e	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00971	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00976	74 2b		 je	 SHORT $LN90@P_NetArchi
$LN91@P_NetArchi:

; 1354 : 				WRITEANGLE(save_p, mobj->movedir);

  00978	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0097d	89 45 80	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  00980	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  00983	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00986	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0098c	89 10		 mov	 DWORD PTR [eax], edx
  0098e	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  00991	83 c0 04	 add	 eax, 4
  00994	89 45 80	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  00997	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  0099a	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0099f	33 c0		 xor	 eax, eax
  009a1	75 d5		 jne	 SHORT $LN91@P_NetArchi
$LN90@P_NetArchi:

; 1355 : 			if (diff & MD_MOVECOUNT)

  009a3	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  009a6	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  009ab	74 3a		 je	 SHORT $LN93@P_NetArchi
$LN94@P_NetArchi:

; 1356 : 				WRITEINT32(save_p, mobj->movecount);

  009ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  009b2	89 85 7c ff ff
	ff		 mov	 DWORD PTR _p_tmp$15[ebp], eax
  009b8	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  009be	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  009c1	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  009c7	89 10		 mov	 DWORD PTR [eax], edx
  009c9	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  009cf	83 c0 04	 add	 eax, 4
  009d2	89 85 7c ff ff
	ff		 mov	 DWORD PTR _p_tmp$15[ebp], eax
  009d8	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  009de	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  009e3	33 c0		 xor	 eax, eax
  009e5	75 c6		 jne	 SHORT $LN94@P_NetArchi
$LN93@P_NetArchi:

; 1357 : 			if (diff & MD_THRESHOLD)

  009e7	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  009ea	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  009ef	74 3a		 je	 SHORT $LN96@P_NetArchi
$LN97@P_NetArchi:

; 1358 : 				WRITEINT32(save_p, mobj->threshold);

  009f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  009f6	89 85 78 ff ff
	ff		 mov	 DWORD PTR _p_tmp$14[ebp], eax
  009fc	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00a02	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00a05	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00a0b	89 10		 mov	 DWORD PTR [eax], edx
  00a0d	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00a13	83 c0 04	 add	 eax, 4
  00a16	89 85 78 ff ff
	ff		 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00a1c	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00a22	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00a27	33 c0		 xor	 eax, eax
  00a29	75 c6		 jne	 SHORT $LN97@P_NetArchi
$LN96@P_NetArchi:

; 1359 : 			if (diff & MD_LASTLOOK)

  00a2b	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00a2e	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00a33	74 3a		 je	 SHORT $LN99@P_NetArchi
$LN100@P_NetArchi:

; 1360 : 				WRITEINT32(save_p, mobj->lastlook);

  00a35	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a3a	89 85 74 ff ff
	ff		 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00a40	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00a46	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00a49	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  00a4f	89 10		 mov	 DWORD PTR [eax], edx
  00a51	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00a57	83 c0 04	 add	 eax, 4
  00a5a	89 85 74 ff ff
	ff		 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00a60	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00a66	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00a6b	33 c0		 xor	 eax, eax
  00a6d	75 c6		 jne	 SHORT $LN100@P_NetArchi
$LN99@P_NetArchi:

; 1361 : 			if (diff & MD_TARGET)

  00a6f	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00a72	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  00a77	74 40		 je	 SHORT $LN102@P_NetArchi
$LN103@P_NetArchi:

; 1362 : 				WRITEUINT32(save_p, mobj->target->mobjnum);

  00a79	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a7e	89 85 70 ff ff
	ff		 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00a84	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a87	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00a8d	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _p_tmp$12[ebp]
  00a93	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]
  00a99	89 02		 mov	 DWORD PTR [edx], eax
  00a9b	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00aa1	83 c0 04	 add	 eax, 4
  00aa4	89 85 70 ff ff
	ff		 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00aaa	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00ab0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00ab5	33 c0		 xor	 eax, eax
  00ab7	75 c0		 jne	 SHORT $LN103@P_NetArchi
$LN102@P_NetArchi:

; 1363 : 			if (diff & MD_TRACER)

  00ab9	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00abc	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  00ac1	74 40		 je	 SHORT $LN105@P_NetArchi
$LN106@P_NetArchi:

; 1364 : 				WRITEUINT32(save_p, mobj->tracer->mobjnum);

  00ac3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00ac8	89 85 6c ff ff
	ff		 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00ace	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ad1	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00ad7	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _p_tmp$11[ebp]
  00add	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]
  00ae3	89 02		 mov	 DWORD PTR [edx], eax
  00ae5	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00aeb	83 c0 04	 add	 eax, 4
  00aee	89 85 6c ff ff
	ff		 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00af4	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00afa	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00aff	33 c0		 xor	 eax, eax
  00b01	75 c0		 jne	 SHORT $LN106@P_NetArchi
$LN105@P_NetArchi:

; 1365 : 			if (diff & MD_FRICTION)

  00b03	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00b06	25 00 00 20 00	 and	 eax, 2097152		; 00200000H
  00b0b	74 3a		 je	 SHORT $LN108@P_NetArchi
$LN109@P_NetArchi:

; 1366 : 				WRITEINT32(save_p, mobj->friction);

  00b0d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00b12	89 85 68 ff ff
	ff		 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00b18	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00b1e	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00b21	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00b27	89 10		 mov	 DWORD PTR [eax], edx
  00b29	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00b2f	83 c0 04	 add	 eax, 4
  00b32	89 85 68 ff ff
	ff		 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00b38	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00b3e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00b43	33 c0		 xor	 eax, eax
  00b45	75 c6		 jne	 SHORT $LN109@P_NetArchi
$LN108@P_NetArchi:

; 1367 : 			if (diff & MD_MOVEFACTOR)

  00b47	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00b4a	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  00b4f	74 3a		 je	 SHORT $LN111@P_NetArchi
$LN112@P_NetArchi:

; 1368 : 				WRITEINT32(save_p, mobj->movefactor);

  00b51	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00b56	89 85 64 ff ff
	ff		 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00b5c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00b62	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00b65	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  00b6b	89 10		 mov	 DWORD PTR [eax], edx
  00b6d	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00b73	83 c0 04	 add	 eax, 4
  00b76	89 85 64 ff ff
	ff		 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00b7c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00b82	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00b87	33 c0		 xor	 eax, eax
  00b89	75 c6		 jne	 SHORT $LN112@P_NetArchi
$LN111@P_NetArchi:

; 1369 : 			if (diff & MD_FUSE)

  00b8b	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00b8e	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00b93	74 3a		 je	 SHORT $LN114@P_NetArchi
$LN115@P_NetArchi:

; 1370 : 				WRITEINT32(save_p, mobj->fuse);

  00b95	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00b9a	89 85 60 ff ff
	ff		 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00ba0	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00ba6	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00ba9	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00baf	89 10		 mov	 DWORD PTR [eax], edx
  00bb1	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00bb7	83 c0 04	 add	 eax, 4
  00bba	89 85 60 ff ff
	ff		 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00bc0	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00bc6	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00bcb	33 c0		 xor	 eax, eax
  00bcd	75 c6		 jne	 SHORT $LN115@P_NetArchi
$LN114@P_NetArchi:

; 1371 : 			if (diff & MD_WATERTOP)

  00bcf	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00bd2	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00bd7	74 3a		 je	 SHORT $LN117@P_NetArchi
$LN118@P_NetArchi:

; 1372 : 				WRITEINT32(save_p, mobj->watertop);

  00bd9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00bde	89 85 5c ff ff
	ff		 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00be4	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00bea	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00bed	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  00bf3	89 10		 mov	 DWORD PTR [eax], edx
  00bf5	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00bfb	83 c0 04	 add	 eax, 4
  00bfe	89 85 5c ff ff
	ff		 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00c04	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00c0a	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00c0f	33 c0		 xor	 eax, eax
  00c11	75 c6		 jne	 SHORT $LN118@P_NetArchi
$LN117@P_NetArchi:

; 1373 : 			if (diff & MD_WATERBOTTOM)

  00c13	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00c16	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00c1b	74 3a		 je	 SHORT $LN120@P_NetArchi
$LN121@P_NetArchi:

; 1374 : 				WRITEINT32(save_p, mobj->waterbottom);

  00c1d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00c22	89 85 58 ff ff
	ff		 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00c28	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00c2e	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00c31	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  00c37	89 10		 mov	 DWORD PTR [eax], edx
  00c39	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00c3f	83 c0 04	 add	 eax, 4
  00c42	89 85 58 ff ff
	ff		 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00c48	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00c4e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00c53	33 c0		 xor	 eax, eax
  00c55	75 c6		 jne	 SHORT $LN121@P_NetArchi
$LN120@P_NetArchi:

; 1375 : 			if (diff & MD_SCALE)

  00c57	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00c5a	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00c5f	74 3c		 je	 SHORT $LN123@P_NetArchi
$LN124@P_NetArchi:

; 1376 : 				WRITEUINT16(save_p, mobj->scale);

  00c61	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00c66	89 85 54 ff ff
	ff		 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00c6c	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00c72	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00c75	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00c7c	66 89 10	 mov	 WORD PTR [eax], dx
  00c7f	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00c85	83 c0 02	 add	 eax, 2
  00c88	89 85 54 ff ff
	ff		 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00c8e	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00c94	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00c99	33 c0		 xor	 eax, eax
  00c9b	75 c4		 jne	 SHORT $LN124@P_NetArchi
$LN123@P_NetArchi:

; 1377 : 			if (diff & MD_DSCALE)

  00c9d	8b 45 f4	 mov	 eax, DWORD PTR _diff$[ebp]
  00ca0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00ca5	74 3c		 je	 SHORT $LN126@P_NetArchi
$LN127@P_NetArchi:

; 1378 : 				WRITEUINT16(save_p, mobj->destscale);

  00ca7	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00cac	89 85 50 ff ff
	ff		 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00cb2	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00cb8	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00cbb	66 8b 91 ce 00
	00 00		 mov	 dx, WORD PTR [ecx+206]
  00cc2	66 89 10	 mov	 WORD PTR [eax], dx
  00cc5	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00ccb	83 c0 02	 add	 eax, 2
  00cce	89 85 50 ff ff
	ff		 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00cd4	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00cda	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00cdf	33 c0		 xor	 eax, eax
  00ce1	75 c4		 jne	 SHORT $LN127@P_NetArchi
$LN126@P_NetArchi:

; 1379 : 
; 1380 : 			WRITEUINT8(save_p, mobj->scalespeed);

  00ce3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00ce8	89 85 4c ff ff
	ff		 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00cee	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00cf4	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00cf7	8a 91 d0 00 00
	00		 mov	 dl, BYTE PTR [ecx+208]
  00cfd	88 10		 mov	 BYTE PTR [eax], dl
  00cff	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00d05	83 c0 01	 add	 eax, 1
  00d08	89 85 4c ff ff
	ff		 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00d0e	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00d14	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00d19	33 c0		 xor	 eax, eax
  00d1b	75 c6		 jne	 SHORT $LN126@P_NetArchi
$LN129@P_NetArchi:

; 1381 : 
; 1382 : 			WRITEUINT32(save_p, mobj->mobjnum);

  00d1d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00d22	89 85 48 ff ff
	ff		 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00d28	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00d2e	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00d31	8b 91 c8 00 00
	00		 mov	 edx, DWORD PTR [ecx+200]
  00d37	89 10		 mov	 DWORD PTR [eax], edx
  00d39	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00d3f	83 c0 04	 add	 eax, 4
  00d42	89 85 48 ff ff
	ff		 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00d48	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00d4e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00d53	33 c0		 xor	 eax, eax
  00d55	75 c6		 jne	 SHORT $LN129@P_NetArchi

; 1383 : 		}

  00d57	e9 96 04 00 00	 jmp	 $LN274@P_NetArchi
$LN137@P_NetArchi:

; 1384 : #ifdef PARANOIA
; 1385 : 		else if (th->function.acp1 == (actionf_p1)P_RainThinker
; 1386 : 			|| th->function.acp1 == (actionf_p1)P_SnowThinker);
; 1387 : #endif
; 1388 : 		else if (th->function.acp1 == (actionf_p1)T_MoveCeiling)

  00d5c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00d5f	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_MoveCeiling
  00d66	75 18		 jne	 SHORT $LN210@P_NetArchi

; 1389 : 		{
; 1390 : 			SaveCeilingThinker(th, tc_ceiling);

  00d68	6a 01		 push	 1
  00d6a	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00d6d	50		 push	 eax
  00d6e	e8 00 00 00 00	 call	 _SaveCeilingThinker
  00d73	83 c4 08	 add	 esp, 8

; 1391 : 			continue;

  00d76	e9 9b f2 ff ff	 jmp	 $LN2@P_NetArchi

; 1392 : 		}

  00d7b	e9 72 04 00 00	 jmp	 $LN274@P_NetArchi
$LN210@P_NetArchi:

; 1393 : 		else if (th->function.acp1 == (actionf_p1)T_CrushCeiling)

  00d80	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00d83	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_CrushCeiling
  00d8a	75 18		 jne	 SHORT $LN212@P_NetArchi

; 1394 : 		{
; 1395 : 			SaveCeilingThinker(th, tc_crushceiling);

  00d8c	6a 11		 push	 17			; 00000011H
  00d8e	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00d91	50		 push	 eax
  00d92	e8 00 00 00 00	 call	 _SaveCeilingThinker
  00d97	83 c4 08	 add	 esp, 8

; 1396 : 			continue;

  00d9a	e9 77 f2 ff ff	 jmp	 $LN2@P_NetArchi

; 1397 : 		}

  00d9f	e9 4e 04 00 00	 jmp	 $LN274@P_NetArchi
$LN212@P_NetArchi:

; 1398 : 		else if (th->function.acp1 == (actionf_p1)T_MoveFloor)

  00da4	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00da7	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_MoveFloor
  00dae	75 18		 jne	 SHORT $LN214@P_NetArchi

; 1399 : 		{
; 1400 : 			SaveFloormoveThinker(th, tc_floor);

  00db0	6a 02		 push	 2
  00db2	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00db5	50		 push	 eax
  00db6	e8 00 00 00 00	 call	 _SaveFloormoveThinker
  00dbb	83 c4 08	 add	 esp, 8

; 1401 : 			continue;

  00dbe	e9 53 f2 ff ff	 jmp	 $LN2@P_NetArchi

; 1402 : 		}

  00dc3	e9 2a 04 00 00	 jmp	 $LN274@P_NetArchi
$LN214@P_NetArchi:

; 1403 : 		else if (th->function.acp1 == (actionf_p1)T_LightningFlash)

  00dc8	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00dcb	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_LightningFlash
  00dd2	75 18		 jne	 SHORT $LN216@P_NetArchi

; 1404 : 		{
; 1405 : 			SaveLightflashThinker(th, tc_flash);

  00dd4	6a 03		 push	 3
  00dd6	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00dd9	50		 push	 eax
  00dda	e8 00 00 00 00	 call	 _SaveLightflashThinker
  00ddf	83 c4 08	 add	 esp, 8

; 1406 : 			continue;

  00de2	e9 2f f2 ff ff	 jmp	 $LN2@P_NetArchi

; 1407 : 		}

  00de7	e9 06 04 00 00	 jmp	 $LN274@P_NetArchi
$LN216@P_NetArchi:

; 1408 : 		else if (th->function.acp1 == (actionf_p1)T_StrobeFlash)

  00dec	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00def	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_StrobeFlash
  00df6	75 18		 jne	 SHORT $LN218@P_NetArchi

; 1409 : 		{
; 1410 : 			SaveStrobeThinker(th, tc_strobe);

  00df8	6a 04		 push	 4
  00dfa	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00dfd	50		 push	 eax
  00dfe	e8 00 00 00 00	 call	 _SaveStrobeThinker
  00e03	83 c4 08	 add	 esp, 8

; 1411 : 			continue;

  00e06	e9 0b f2 ff ff	 jmp	 $LN2@P_NetArchi

; 1412 : 		}

  00e0b	e9 e2 03 00 00	 jmp	 $LN274@P_NetArchi
$LN218@P_NetArchi:

; 1413 : 		else if (th->function.acp1 == (actionf_p1)T_Glow)

  00e10	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00e13	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_Glow
  00e1a	75 18		 jne	 SHORT $LN220@P_NetArchi

; 1414 : 		{
; 1415 : 			SaveGlowThinker(th, tc_glow);

  00e1c	6a 05		 push	 5
  00e1e	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00e21	50		 push	 eax
  00e22	e8 00 00 00 00	 call	 _SaveGlowThinker
  00e27	83 c4 08	 add	 esp, 8

; 1416 : 			continue;

  00e2a	e9 e7 f1 ff ff	 jmp	 $LN2@P_NetArchi

; 1417 : 		}

  00e2f	e9 be 03 00 00	 jmp	 $LN274@P_NetArchi
$LN220@P_NetArchi:

; 1418 : 		else if (th->function.acp1 == (actionf_p1)T_FireFlicker)

  00e34	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00e37	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_FireFlicker
  00e3e	75 18		 jne	 SHORT $LN222@P_NetArchi

; 1419 : 		{
; 1420 : 			SaveFireflickerThinker(th, tc_fireflicker);

  00e40	6a 06		 push	 6
  00e42	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00e45	50		 push	 eax
  00e46	e8 00 00 00 00	 call	 _SaveFireflickerThinker
  00e4b	83 c4 08	 add	 esp, 8

; 1421 : 			continue;

  00e4e	e9 c3 f1 ff ff	 jmp	 $LN2@P_NetArchi

; 1422 : 		}

  00e53	e9 9a 03 00 00	 jmp	 $LN274@P_NetArchi
$LN222@P_NetArchi:

; 1423 : 		else if (th->function.acp1 == (actionf_p1)T_MoveElevator)

  00e58	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00e5b	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_MoveElevator
  00e62	75 18		 jne	 SHORT $LN224@P_NetArchi

; 1424 : 		{
; 1425 : 			SaveElevatorThinker(th, tc_elevator);

  00e64	6a 09		 push	 9
  00e66	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00e69	50		 push	 eax
  00e6a	e8 00 00 00 00	 call	 _SaveElevatorThinker
  00e6f	83 c4 08	 add	 esp, 8

; 1426 : 			continue;

  00e72	e9 9f f1 ff ff	 jmp	 $LN2@P_NetArchi

; 1427 : 		}

  00e77	e9 76 03 00 00	 jmp	 $LN274@P_NetArchi
$LN224@P_NetArchi:

; 1428 : 		else if (th->function.acp1 == (actionf_p1)T_ContinuousFalling)

  00e7c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00e7f	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_ContinuousFalling
  00e86	75 18		 jne	 SHORT $LN226@P_NetArchi

; 1429 : 		{
; 1430 : 			SaveSpecialLevelThinker(th, tc_continuousfalling);

  00e88	6a 0a		 push	 10			; 0000000aH
  00e8a	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00e8d	50		 push	 eax
  00e8e	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  00e93	83 c4 08	 add	 esp, 8

; 1431 : 			continue;

  00e96	e9 7b f1 ff ff	 jmp	 $LN2@P_NetArchi

; 1432 : 		}

  00e9b	e9 52 03 00 00	 jmp	 $LN274@P_NetArchi
$LN226@P_NetArchi:

; 1433 : 		else if (th->function.acp1 == (actionf_p1)T_ThwompSector)

  00ea0	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00ea3	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_ThwompSector
  00eaa	75 18		 jne	 SHORT $LN228@P_NetArchi

; 1434 : 		{
; 1435 : 			SaveSpecialLevelThinker(th, tc_thwomp);

  00eac	6a 07		 push	 7
  00eae	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00eb1	50		 push	 eax
  00eb2	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  00eb7	83 c4 08	 add	 esp, 8

; 1436 : 			continue;

  00eba	e9 57 f1 ff ff	 jmp	 $LN2@P_NetArchi

; 1437 : 		}

  00ebf	e9 2e 03 00 00	 jmp	 $LN274@P_NetArchi
$LN228@P_NetArchi:

; 1438 : 		else if (th->function.acp1 == (actionf_p1)T_NoEnemiesSector)

  00ec4	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00ec7	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_NoEnemiesSector
  00ece	75 18		 jne	 SHORT $LN230@P_NetArchi

; 1439 : 		{
; 1440 : 			SaveSpecialLevelThinker(th, tc_noenemies);

  00ed0	6a 19		 push	 25			; 00000019H
  00ed2	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00ed5	50		 push	 eax
  00ed6	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  00edb	83 c4 08	 add	 esp, 8

; 1441 : 			continue;

  00ede	e9 33 f1 ff ff	 jmp	 $LN2@P_NetArchi

; 1442 : 		}

  00ee3	e9 0a 03 00 00	 jmp	 $LN274@P_NetArchi
$LN230@P_NetArchi:

; 1443 : 		else if (th->function.acp1 == (actionf_p1)T_EachTimeThinker)

  00ee8	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00eeb	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_EachTimeThinker
  00ef2	75 18		 jne	 SHORT $LN232@P_NetArchi

; 1444 : 		{
; 1445 : 			SaveSpecialLevelThinker(th, tc_eachtime);

  00ef4	6a 1a		 push	 26			; 0000001aH
  00ef6	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00ef9	50		 push	 eax
  00efa	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  00eff	83 c4 08	 add	 esp, 8

; 1446 : 			continue;

  00f02	e9 0f f1 ff ff	 jmp	 $LN2@P_NetArchi

; 1447 : 		}

  00f07	e9 e6 02 00 00	 jmp	 $LN274@P_NetArchi
$LN232@P_NetArchi:

; 1448 : 		else if (th->function.acp1 == (actionf_p1)T_RaiseSector)

  00f0c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f0f	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_RaiseSector
  00f16	75 18		 jne	 SHORT $LN234@P_NetArchi

; 1449 : 		{
; 1450 : 			SaveSpecialLevelThinker(th, tc_raisesector);

  00f18	6a 18		 push	 24			; 00000018H
  00f1a	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f1d	50		 push	 eax
  00f1e	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  00f23	83 c4 08	 add	 esp, 8

; 1451 : 			continue;

  00f26	e9 eb f0 ff ff	 jmp	 $LN2@P_NetArchi

; 1452 : 		}

  00f2b	e9 c2 02 00 00	 jmp	 $LN274@P_NetArchi
$LN234@P_NetArchi:

; 1453 : 		else if (th->function.acp1 == (actionf_p1)T_CameraScanner)

  00f30	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f33	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_CameraScanner
  00f3a	75 18		 jne	 SHORT $LN236@P_NetArchi

; 1454 : 		{
; 1455 : 			SaveElevatorThinker(th, tc_camerascanner);

  00f3c	6a 08		 push	 8
  00f3e	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f41	50		 push	 eax
  00f42	e8 00 00 00 00	 call	 _SaveElevatorThinker
  00f47	83 c4 08	 add	 esp, 8

; 1456 : 			continue;

  00f4a	e9 c7 f0 ff ff	 jmp	 $LN2@P_NetArchi

; 1457 : 		}

  00f4f	e9 9e 02 00 00	 jmp	 $LN274@P_NetArchi
$LN236@P_NetArchi:

; 1458 : 		else if (th->function.acp1 == (actionf_p1)T_Scroll)

  00f54	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f57	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_Scroll
  00f5e	75 18		 jne	 SHORT $LN238@P_NetArchi

; 1459 : 		{
; 1460 : 			SaveScrollThinker(th, tc_scroll);

  00f60	6a 12		 push	 18			; 00000012H
  00f62	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f65	50		 push	 eax
  00f66	e8 00 00 00 00	 call	 _SaveScrollThinker
  00f6b	83 c4 08	 add	 esp, 8

; 1461 : 			continue;

  00f6e	e9 a3 f0 ff ff	 jmp	 $LN2@P_NetArchi

; 1462 : 		}

  00f73	e9 7a 02 00 00	 jmp	 $LN274@P_NetArchi
$LN238@P_NetArchi:

; 1463 : 		else if (th->function.acp1 == (actionf_p1)T_Friction)

  00f78	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f7b	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_Friction
  00f82	75 18		 jne	 SHORT $LN240@P_NetArchi

; 1464 : 		{
; 1465 : 			SaveFrictionThinker(th, tc_friction);

  00f84	6a 13		 push	 19			; 00000013H
  00f86	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f89	50		 push	 eax
  00f8a	e8 00 00 00 00	 call	 _SaveFrictionThinker
  00f8f	83 c4 08	 add	 esp, 8

; 1466 : 			continue;

  00f92	e9 7f f0 ff ff	 jmp	 $LN2@P_NetArchi

; 1467 : 		}

  00f97	e9 56 02 00 00	 jmp	 $LN274@P_NetArchi
$LN240@P_NetArchi:

; 1468 : 		else if (th->function.acp1 == (actionf_p1)T_Pusher)

  00f9c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00f9f	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_Pusher
  00fa6	75 18		 jne	 SHORT $LN242@P_NetArchi

; 1469 : 		{
; 1470 : 			SavePusherThinker(th, tc_pusher);

  00fa8	6a 14		 push	 20			; 00000014H
  00faa	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00fad	50		 push	 eax
  00fae	e8 00 00 00 00	 call	 _SavePusherThinker
  00fb3	83 c4 08	 add	 esp, 8

; 1471 : 			continue;

  00fb6	e9 5b f0 ff ff	 jmp	 $LN2@P_NetArchi

; 1472 : 		}

  00fbb	e9 32 02 00 00	 jmp	 $LN274@P_NetArchi
$LN242@P_NetArchi:

; 1473 : 		else if (th->function.acp1 == (actionf_p1)T_BounceCheese)

  00fc0	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00fc3	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_BounceCheese
  00fca	75 18		 jne	 SHORT $LN244@P_NetArchi

; 1474 : 		{
; 1475 : 			SaveSpecialLevelThinker(th, tc_bouncecheese);

  00fcc	6a 0b		 push	 11			; 0000000bH
  00fce	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00fd1	50		 push	 eax
  00fd2	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  00fd7	83 c4 08	 add	 esp, 8

; 1476 : 			continue;

  00fda	e9 37 f0 ff ff	 jmp	 $LN2@P_NetArchi

; 1477 : 		}

  00fdf	e9 0e 02 00 00	 jmp	 $LN274@P_NetArchi
$LN244@P_NetArchi:

; 1478 : 		else if (th->function.acp1 == (actionf_p1)T_StartCrumble)

  00fe4	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00fe7	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_StartCrumble
  00fee	75 18		 jne	 SHORT $LN246@P_NetArchi

; 1479 : 		{
; 1480 : 			SaveElevatorThinker(th, tc_startcrumble);

  00ff0	6a 0c		 push	 12			; 0000000cH
  00ff2	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00ff5	50		 push	 eax
  00ff6	e8 00 00 00 00	 call	 _SaveElevatorThinker
  00ffb	83 c4 08	 add	 esp, 8

; 1481 : 			continue;

  00ffe	e9 13 f0 ff ff	 jmp	 $LN2@P_NetArchi

; 1482 : 		}

  01003	e9 ea 01 00 00	 jmp	 $LN274@P_NetArchi
$LN246@P_NetArchi:

; 1483 : 		else if (th->function.acp1 == (actionf_p1)T_MarioBlock)

  01008	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0100b	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_MarioBlock
  01012	75 18		 jne	 SHORT $LN248@P_NetArchi

; 1484 : 		{
; 1485 : 			SaveSpecialLevelThinker(th, tc_marioblock);

  01014	6a 0d		 push	 13			; 0000000dH
  01016	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01019	50		 push	 eax
  0101a	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  0101f	83 c4 08	 add	 esp, 8

; 1486 : 			continue;

  01022	e9 ef ef ff ff	 jmp	 $LN2@P_NetArchi

; 1487 : 		}

  01027	e9 c6 01 00 00	 jmp	 $LN274@P_NetArchi
$LN248@P_NetArchi:

; 1488 : 		else if (th->function.acp1 == (actionf_p1)T_SpikeSector)

  0102c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0102f	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_SpikeSector
  01036	75 18		 jne	 SHORT $LN250@P_NetArchi

; 1489 : 		{
; 1490 : 			SaveSpecialLevelThinker(th, tc_spikesector);

  01038	6a 0e		 push	 14			; 0000000eH
  0103a	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0103d	50		 push	 eax
  0103e	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  01043	83 c4 08	 add	 esp, 8

; 1491 : 			continue;

  01046	e9 cb ef ff ff	 jmp	 $LN2@P_NetArchi

; 1492 : 		}

  0104b	e9 a2 01 00 00	 jmp	 $LN274@P_NetArchi
$LN250@P_NetArchi:

; 1493 : 		else if (th->function.acp1 == (actionf_p1)T_FloatSector)

  01050	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01053	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_FloatSector
  0105a	75 18		 jne	 SHORT $LN252@P_NetArchi

; 1494 : 		{
; 1495 : 			SaveSpecialLevelThinker(th, tc_floatsector);

  0105c	6a 0f		 push	 15			; 0000000fH
  0105e	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01061	50		 push	 eax
  01062	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  01067	83 c4 08	 add	 esp, 8

; 1496 : 			continue;

  0106a	e9 a7 ef ff ff	 jmp	 $LN2@P_NetArchi

; 1497 : 		}

  0106f	e9 7e 01 00 00	 jmp	 $LN274@P_NetArchi
$LN252@P_NetArchi:

; 1498 : 		else if (th->function.acp1 == (actionf_p1)T_BridgeThinker)

  01074	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01077	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_BridgeThinker
  0107e	75 18		 jne	 SHORT $LN254@P_NetArchi

; 1499 : 		{
; 1500 : 			SaveSpecialLevelThinker(th, tc_bridgethinker);

  01080	6a 10		 push	 16			; 00000010H
  01082	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01085	50		 push	 eax
  01086	e8 00 00 00 00	 call	 _SaveSpecialLevelThinker
  0108b	83 c4 08	 add	 esp, 8

; 1501 : 			continue;

  0108e	e9 83 ef ff ff	 jmp	 $LN2@P_NetArchi

; 1502 : 		}

  01093	e9 5a 01 00 00	 jmp	 $LN274@P_NetArchi
$LN254@P_NetArchi:

; 1503 : 		else if (th->function.acp1 == (actionf_p1)T_LaserFlash)

  01098	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0109b	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_LaserFlash
  010a2	75 18		 jne	 SHORT $LN256@P_NetArchi

; 1504 : 		{
; 1505 : 			SaveLaserThinker(th, tc_laserflash);

  010a4	6a 15		 push	 21			; 00000015H
  010a6	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  010a9	50		 push	 eax
  010aa	e8 00 00 00 00	 call	 _SaveLaserThinker
  010af	83 c4 08	 add	 esp, 8

; 1506 : 			continue;

  010b2	e9 5f ef ff ff	 jmp	 $LN2@P_NetArchi

; 1507 : 		}

  010b7	e9 36 01 00 00	 jmp	 $LN274@P_NetArchi
$LN256@P_NetArchi:

; 1508 : 		else if (th->function.acp1 == (actionf_p1)T_LightFade)

  010bc	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  010bf	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_LightFade
  010c6	75 18		 jne	 SHORT $LN258@P_NetArchi

; 1509 : 		{
; 1510 : 			SaveLightlevelThinker(th, tc_lightfade);

  010c8	6a 16		 push	 22			; 00000016H
  010ca	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  010cd	50		 push	 eax
  010ce	e8 00 00 00 00	 call	 _SaveLightlevelThinker
  010d3	83 c4 08	 add	 esp, 8

; 1511 : 			continue;

  010d6	e9 3b ef ff ff	 jmp	 $LN2@P_NetArchi

; 1512 : 		}

  010db	e9 12 01 00 00	 jmp	 $LN274@P_NetArchi
$LN258@P_NetArchi:

; 1513 : 		else if (th->function.acp1 == (actionf_p1)T_ExecutorDelay)

  010e0	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  010e3	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_ExecutorDelay
  010ea	75 18		 jne	 SHORT $LN260@P_NetArchi

; 1514 : 		{
; 1515 : 			SaveExecutorThinker(th, tc_executor);

  010ec	6a 17		 push	 23			; 00000017H
  010ee	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  010f1	50		 push	 eax
  010f2	e8 00 00 00 00	 call	 _SaveExecutorThinker
  010f7	83 c4 08	 add	 esp, 8

; 1516 : 			continue;

  010fa	e9 17 ef ff ff	 jmp	 $LN2@P_NetArchi

; 1517 : 		}

  010ff	e9 ee 00 00 00	 jmp	 $LN274@P_NetArchi
$LN260@P_NetArchi:

; 1518 : 		else if (th->function.acp1 == (actionf_p1)T_Disappear)

  01104	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01107	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_Disappear
  0110e	75 18		 jne	 SHORT $LN262@P_NetArchi

; 1519 : 		{
; 1520 : 			SaveDisappearThinker(th, tc_disappear);

  01110	6a 1b		 push	 27			; 0000001bH
  01112	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01115	50		 push	 eax
  01116	e8 00 00 00 00	 call	 _SaveDisappearThinker
  0111b	83 c4 08	 add	 esp, 8

; 1521 : 			continue;

  0111e	e9 f3 ee ff ff	 jmp	 $LN2@P_NetArchi

; 1522 : 		}

  01123	e9 ca 00 00 00	 jmp	 $LN274@P_NetArchi
$LN262@P_NetArchi:

; 1523 : #ifdef POLYOBJECTS
; 1524 : 		else if (th->function.acp1 == (actionf_p1)T_PolyObjRotate)

  01128	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0112b	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_PolyObjRotate
  01132	75 18		 jne	 SHORT $LN264@P_NetArchi

; 1525 : 		{
; 1526 : 			SavePolyrotatetThinker(th, tc_polyrotate);

  01134	6a 1c		 push	 28			; 0000001cH
  01136	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01139	50		 push	 eax
  0113a	e8 00 00 00 00	 call	 _SavePolyrotatetThinker
  0113f	83 c4 08	 add	 esp, 8

; 1527 : 			continue;

  01142	e9 cf ee ff ff	 jmp	 $LN2@P_NetArchi

; 1528 : 		}

  01147	e9 a6 00 00 00	 jmp	 $LN274@P_NetArchi
$LN264@P_NetArchi:

; 1529 : 		else if (th->function.acp1 == (actionf_p1)T_PolyObjMove)

  0114c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0114f	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_PolyObjMove
  01156	75 18		 jne	 SHORT $LN266@P_NetArchi

; 1530 : 		{
; 1531 : 			SavePolymoveThinker(th, tc_polymove);

  01158	6a 1d		 push	 29			; 0000001dH
  0115a	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0115d	50		 push	 eax
  0115e	e8 00 00 00 00	 call	 _SavePolymoveThinker
  01163	83 c4 08	 add	 esp, 8

; 1532 : 			continue;

  01166	e9 ab ee ff ff	 jmp	 $LN2@P_NetArchi

; 1533 : 		}

  0116b	e9 82 00 00 00	 jmp	 $LN274@P_NetArchi
$LN266@P_NetArchi:

; 1534 : 		else if (th->function.acp1 == (actionf_p1)T_PolyObjWaypoint)

  01170	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01173	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_PolyObjWaypoint
  0117a	75 15		 jne	 SHORT $LN268@P_NetArchi

; 1535 : 		{
; 1536 : 			SavePolywaypointThinker(th, tc_polywaypoint);

  0117c	6a 1e		 push	 30			; 0000001eH
  0117e	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01181	50		 push	 eax
  01182	e8 00 00 00 00	 call	 _SavePolywaypointThinker
  01187	83 c4 08	 add	 esp, 8

; 1537 : 			continue;

  0118a	e9 87 ee ff ff	 jmp	 $LN2@P_NetArchi

; 1538 : 		}

  0118f	eb 61		 jmp	 SHORT $LN274@P_NetArchi
$LN268@P_NetArchi:

; 1539 : 		else if (th->function.acp1 == (actionf_p1)T_PolyDoorSlide)

  01191	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  01194	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_PolyDoorSlide
  0119b	75 15		 jne	 SHORT $LN270@P_NetArchi

; 1540 : 		{
; 1541 : 			SavePolyslidedoorThinker(th, tc_polyslidedoor);

  0119d	6a 1f		 push	 31			; 0000001fH
  0119f	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  011a2	50		 push	 eax
  011a3	e8 00 00 00 00	 call	 _SavePolyslidedoorThinker
  011a8	83 c4 08	 add	 esp, 8

; 1542 : 			continue;

  011ab	e9 66 ee ff ff	 jmp	 $LN2@P_NetArchi

; 1543 : 		}

  011b0	eb 40		 jmp	 SHORT $LN274@P_NetArchi
$LN270@P_NetArchi:

; 1544 : 		else if (th->function.acp1 == (actionf_p1)T_PolyDoorSwing)

  011b2	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  011b5	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_PolyDoorSwing
  011bc	75 15		 jne	 SHORT $LN272@P_NetArchi

; 1545 : 		{
; 1546 : 			SavePolyswingdoorThinker(th, tc_polyswingdoor);

  011be	6a 20		 push	 32			; 00000020H
  011c0	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  011c3	50		 push	 eax
  011c4	e8 00 00 00 00	 call	 _SavePolyswingdoorThinker
  011c9	83 c4 08	 add	 esp, 8

; 1547 : 			continue;

  011cc	e9 45 ee ff ff	 jmp	 $LN2@P_NetArchi

; 1548 : 		}

  011d1	eb 1f		 jmp	 SHORT $LN274@P_NetArchi
$LN272@P_NetArchi:

; 1549 : 		else if (th->function.acp1 == (actionf_p1)T_PolyObjFlag)

  011d3	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  011d6	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_PolyObjFlag
  011dd	75 13		 jne	 SHORT $LN274@P_NetArchi

; 1550 : 		{
; 1551 : 			SavePolymoveThinker(th, tc_polyflag);

  011df	6a 21		 push	 33			; 00000021H
  011e1	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  011e4	50		 push	 eax
  011e5	e8 00 00 00 00	 call	 _SavePolymoveThinker
  011ea	83 c4 08	 add	 esp, 8

; 1552 : 			continue;

  011ed	e9 24 ee ff ff	 jmp	 $LN2@P_NetArchi
$LN274@P_NetArchi:

; 1553 : 		}
; 1554 : #endif
; 1555 : #ifdef PARANOIA
; 1556 : 		else if (th->function.acv != P_RemoveThinkerDelayed) // wait garbage collection
; 1557 : 			I_Error("unknown thinker type %p", th->function.acp1);
; 1558 : #endif
; 1559 : 	}

  011f2	e9 1f ee ff ff	 jmp	 $LN2@P_NetArchi
$LN3@P_NetArchi:

; 1560 : 
; 1561 : 	WRITEUINT8(save_p, tc_end);

  011f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  011fc	89 85 44 ff ff
	ff		 mov	 DWORD PTR _p_tmp$1[ebp], eax
  01202	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  01208	c6 00 22	 mov	 BYTE PTR [eax], 34	; 00000022H
  0120b	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  01211	83 c0 01	 add	 eax, 1
  01214	89 85 44 ff ff
	ff		 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0121a	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  01220	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  01225	33 c0		 xor	 eax, eax
  01227	75 ce		 jne	 SHORT $LN3@P_NetArchi

; 1562 : }

  01229	5f		 pop	 edi
  0122a	5e		 pop	 esi
  0122b	5b		 pop	 ebx
  0122c	8b e5		 mov	 esp, ebp
  0122e	5d		 pop	 ebp
  0122f	c3		 ret	 0
_P_NetArchiveThinkers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SavePolyswingdoorThinker
_TEXT	SEGMENT
_p_tmp$1 = -40						; size = 4
_p_tmp$2 = -36						; size = 4
_p_tmp$3 = -32						; size = 4
_p_tmp$4 = -28						; size = 4
_p_tmp$5 = -24						; size = 4
_p_tmp$6 = -20						; size = 4
_p_tmp$7 = -16						; size = 4
_p_tmp$8 = -12						; size = 4
_p_tmp$9 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SavePolyswingdoorThinker PROC				; COMDAT

; 1156 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1157 : 	const polyswingdoor_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SavePolysw:

; 1158 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SavePolysw
$LN3@SavePolysw:

; 1159 : 	WRITEINT32(save_p, ht->polyObjNum);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SavePolysw
$LN6@SavePolysw:

; 1160 : 	WRITEINT32(save_p, ht->delay);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SavePolysw
$LN9@SavePolysw:

; 1161 : 	WRITEINT32(save_p, ht->delayCount);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SavePolysw
$LN12@SavePolysw:

; 1162 : 	WRITEINT32(save_p, ht->initSpeed);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b1	89 45 e8	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000bd	89 10		 mov	 DWORD PTR [eax], edx
  000bf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  000c2	83 c0 04	 add	 eax, 4
  000c5	89 45 e8	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  000cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d0	33 c0		 xor	 eax, eax
  000d2	75 d8		 jne	 SHORT $LN12@SavePolysw
$LN15@SavePolysw:

; 1163 : 	WRITEINT32(save_p, ht->speed);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d9	89 45 e4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000e2	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e5	89 10		 mov	 DWORD PTR [eax], edx
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000ea	83 c0 04	 add	 eax, 4
  000ed	89 45 e4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f8	33 c0		 xor	 eax, eax
  000fa	75 d8		 jne	 SHORT $LN15@SavePolysw
$LN18@SavePolysw:

; 1164 : 	WRITEINT32(save_p, ht->initDistance);

  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00101	89 45 e0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00104	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0010a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0010d	89 10		 mov	 DWORD PTR [eax], edx
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00112	83 c0 04	 add	 eax, 4
  00115	89 45 e0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0011b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00120	33 c0		 xor	 eax, eax
  00122	75 d8		 jne	 SHORT $LN18@SavePolysw
$LN21@SavePolysw:

; 1165 : 	WRITEINT32(save_p, ht->distance);

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00129	89 45 dc	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0012c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00132	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00135	89 10		 mov	 DWORD PTR [eax], edx
  00137	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0013a	83 c0 04	 add	 eax, 4
  0013d	89 45 dc	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00140	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00143	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00148	33 c0		 xor	 eax, eax
  0014a	75 d8		 jne	 SHORT $LN21@SavePolysw
$LN24@SavePolysw:

; 1166 : 	WRITEUINT8(save_p, ht->closing);

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00151	89 45 d8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00154	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0015a	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  0015d	88 10		 mov	 BYTE PTR [eax], dl
  0015f	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00162	83 c0 01	 add	 eax, 1
  00165	89 45 d8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00168	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0016b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00170	33 c0		 xor	 eax, eax
  00172	75 d8		 jne	 SHORT $LN24@SavePolysw

; 1167 : }

  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c3		 ret	 0
_SavePolyswingdoorThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SavePolyslidedoorThinker
_TEXT	SEGMENT
_p_tmp$1 = -60						; size = 4
_p_tmp$2 = -56						; size = 4
_p_tmp$3 = -52						; size = 4
_p_tmp$4 = -48						; size = 4
_p_tmp$5 = -44						; size = 4
_p_tmp$6 = -40						; size = 4
_p_tmp$7 = -36						; size = 4
_p_tmp$8 = -32						; size = 4
_p_tmp$9 = -28						; size = 4
_p_tmp$10 = -24						; size = 4
_p_tmp$11 = -20						; size = 4
_p_tmp$12 = -16						; size = 4
_p_tmp$13 = -12						; size = 4
_p_tmp$14 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SavePolyslidedoorThinker PROC				; COMDAT

; 1132 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1133 : 	const polyslidedoor_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SavePolysl:

; 1134 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SavePolysl
$LN3@SavePolysl:

; 1135 : 	WRITEINT32(save_p, ht->polyObjNum);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SavePolysl
$LN6@SavePolysl:

; 1136 : 	WRITEINT32(save_p, ht->delay);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SavePolysl
$LN9@SavePolysl:

; 1137 : 	WRITEINT32(save_p, ht->delayCount);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SavePolysl
$LN12@SavePolysl:

; 1138 : 	WRITEINT32(save_p, ht->initSpeed);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b1	89 45 e8	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000bd	89 10		 mov	 DWORD PTR [eax], edx
  000bf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000c2	83 c0 04	 add	 eax, 4
  000c5	89 45 e8	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d0	33 c0		 xor	 eax, eax
  000d2	75 d8		 jne	 SHORT $LN12@SavePolysl
$LN15@SavePolysl:

; 1139 : 	WRITEINT32(save_p, ht->speed);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d9	89 45 e4	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000e2	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e5	89 10		 mov	 DWORD PTR [eax], edx
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000ea	83 c0 04	 add	 eax, 4
  000ed	89 45 e4	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f8	33 c0		 xor	 eax, eax
  000fa	75 d8		 jne	 SHORT $LN15@SavePolysl
$LN18@SavePolysl:

; 1140 : 	WRITEINT32(save_p, ht->initDistance);

  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00101	89 45 e0	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00104	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0010a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0010d	89 10		 mov	 DWORD PTR [eax], edx
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00112	83 c0 04	 add	 eax, 4
  00115	89 45 e0	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0011b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00120	33 c0		 xor	 eax, eax
  00122	75 d8		 jne	 SHORT $LN18@SavePolysl
$LN21@SavePolysl:

; 1141 : 	WRITEINT32(save_p, ht->distance);

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00129	89 45 dc	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  0012c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00132	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00135	89 10		 mov	 DWORD PTR [eax], edx
  00137	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0013a	83 c0 04	 add	 eax, 4
  0013d	89 45 dc	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00140	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00143	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00148	33 c0		 xor	 eax, eax
  0014a	75 d8		 jne	 SHORT $LN21@SavePolysl
$LN24@SavePolysl:

; 1142 : 	WRITEUINT32(save_p, ht->initAngle);

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00151	89 45 d8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00154	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0015a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0015d	89 10		 mov	 DWORD PTR [eax], edx
  0015f	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00162	83 c0 04	 add	 eax, 4
  00165	89 45 d8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00168	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0016b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00170	33 c0		 xor	 eax, eax
  00172	75 d8		 jne	 SHORT $LN24@SavePolysl
$LN27@SavePolysl:

; 1143 : 	WRITEUINT32(save_p, ht->angle);

  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00179	89 45 d4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0017c	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0017f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00182	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00185	89 10		 mov	 DWORD PTR [eax], edx
  00187	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0018a	83 c0 04	 add	 eax, 4
  0018d	89 45 d4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00190	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00193	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00198	33 c0		 xor	 eax, eax
  0019a	75 d8		 jne	 SHORT $LN27@SavePolysl
$LN30@SavePolysl:

; 1144 : 	WRITEUINT32(save_p, ht->revAngle);

  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001a1	89 45 d0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  001a4	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001aa	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001ad	89 10		 mov	 DWORD PTR [eax], edx
  001af	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001b2	83 c0 04	 add	 eax, 4
  001b5	89 45 d0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  001b8	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001bb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001c0	33 c0		 xor	 eax, eax
  001c2	75 d8		 jne	 SHORT $LN30@SavePolysl
$LN33@SavePolysl:

; 1145 : 	WRITEFIXED(save_p, ht->momx);

  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001c9	89 45 cc	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  001cc	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001cf	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001d2	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001d5	89 10		 mov	 DWORD PTR [eax], edx
  001d7	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001da	83 c0 04	 add	 eax, 4
  001dd	89 45 cc	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  001e0	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001e3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001e8	33 c0		 xor	 eax, eax
  001ea	75 d8		 jne	 SHORT $LN33@SavePolysl
$LN36@SavePolysl:

; 1146 : 	WRITEFIXED(save_p, ht->momy);

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001f1	89 45 c8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001f4	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001fa	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  001fd	89 10		 mov	 DWORD PTR [eax], edx
  001ff	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00202	83 c0 04	 add	 eax, 4
  00205	89 45 c8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00208	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0020b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00210	33 c0		 xor	 eax, eax
  00212	75 d8		 jne	 SHORT $LN36@SavePolysl
$LN39@SavePolysl:

; 1147 : 	WRITEUINT8(save_p, ht->closing);

  00214	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00219	89 45 c4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0021c	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0021f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00222	8a 51 40	 mov	 dl, BYTE PTR [ecx+64]
  00225	88 10		 mov	 BYTE PTR [eax], dl
  00227	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0022a	83 c0 01	 add	 eax, 1
  0022d	89 45 c4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00230	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00233	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00238	33 c0		 xor	 eax, eax
  0023a	75 d8		 jne	 SHORT $LN39@SavePolysl

; 1148 : }

  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
  0023f	8b e5		 mov	 esp, ebp
  00241	5d		 pop	 ebp
  00242	c3		 ret	 0
_SavePolyslidedoorThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SavePolywaypointThinker
_TEXT	SEGMENT
_p_tmp$1 = -56						; size = 4
_p_tmp$2 = -52						; size = 4
_p_tmp$3 = -48						; size = 4
_p_tmp$4 = -44						; size = 4
_p_tmp$5 = -40						; size = 4
_p_tmp$6 = -36						; size = 4
_p_tmp$7 = -32						; size = 4
_p_tmp$8 = -28						; size = 4
_p_tmp$9 = -24						; size = 4
_p_tmp$10 = -20						; size = 4
_p_tmp$11 = -16						; size = 4
_p_tmp$12 = -12						; size = 4
_p_tmp$13 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SavePolywaypointThinker PROC				; COMDAT

; 1109 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1110 : 	const polywaypoint_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SavePolywa:

; 1111 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SavePolywa
$LN3@SavePolywa:

; 1112 : 	WRITEINT32(save_p, ht->polyObjNum);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SavePolywa
$LN6@SavePolywa:

; 1113 : 	WRITEINT32(save_p, ht->speed);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SavePolywa
$LN9@SavePolywa:

; 1114 : 	WRITEINT32(save_p, ht->sequence);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SavePolywa
$LN12@SavePolywa:

; 1115 : 	WRITEINT32(save_p, ht->pointnum);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b1	89 45 e8	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000bd	89 10		 mov	 DWORD PTR [eax], edx
  000bf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000c2	83 c0 04	 add	 eax, 4
  000c5	89 45 e8	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d0	33 c0		 xor	 eax, eax
  000d2	75 d8		 jne	 SHORT $LN12@SavePolywa
$LN15@SavePolywa:

; 1116 : 	WRITEINT32(save_p, ht->direction);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d9	89 45 e4	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000e2	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e5	89 10		 mov	 DWORD PTR [eax], edx
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000ea	83 c0 04	 add	 eax, 4
  000ed	89 45 e4	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f8	33 c0		 xor	 eax, eax
  000fa	75 d8		 jne	 SHORT $LN15@SavePolywa
$LN18@SavePolywa:

; 1117 : 	WRITEUINT8(save_p, ht->comeback);

  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00101	89 45 e0	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00104	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0010a	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  0010d	88 10		 mov	 BYTE PTR [eax], dl
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00112	83 c0 01	 add	 eax, 1
  00115	89 45 e0	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0011b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00120	33 c0		 xor	 eax, eax
  00122	75 d8		 jne	 SHORT $LN18@SavePolywa
$LN21@SavePolywa:

; 1118 : 	WRITEUINT8(save_p, ht->wrap);

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00129	89 45 dc	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  0012c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00132	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00135	88 10		 mov	 BYTE PTR [eax], dl
  00137	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0013a	83 c0 01	 add	 eax, 1
  0013d	89 45 dc	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00140	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00143	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00148	33 c0		 xor	 eax, eax
  0014a	75 d8		 jne	 SHORT $LN21@SavePolywa
$LN24@SavePolywa:

; 1119 : 	WRITEUINT8(save_p, ht->continuous);

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00151	89 45 d8	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00154	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0015a	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  0015d	88 10		 mov	 BYTE PTR [eax], dl
  0015f	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00162	83 c0 01	 add	 eax, 1
  00165	89 45 d8	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00168	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0016b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00170	33 c0		 xor	 eax, eax
  00172	75 d8		 jne	 SHORT $LN24@SavePolywa
$LN27@SavePolywa:

; 1120 : 	WRITEUINT8(save_p, ht->stophere);

  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00179	89 45 d4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0017c	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0017f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00182	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  00185	88 10		 mov	 BYTE PTR [eax], dl
  00187	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0018a	83 c0 01	 add	 eax, 1
  0018d	89 45 d4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00190	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00193	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00198	33 c0		 xor	 eax, eax
  0019a	75 d8		 jne	 SHORT $LN27@SavePolywa
$LN30@SavePolywa:

; 1121 : 	WRITEFIXED(save_p, ht->diffx);

  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001a1	89 45 d0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  001a4	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001aa	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  001ad	89 10		 mov	 DWORD PTR [eax], edx
  001af	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001b2	83 c0 04	 add	 eax, 4
  001b5	89 45 d0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  001b8	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001bb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001c0	33 c0		 xor	 eax, eax
  001c2	75 d8		 jne	 SHORT $LN30@SavePolywa
$LN33@SavePolywa:

; 1122 : 	WRITEFIXED(save_p, ht->diffy);

  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001c9	89 45 cc	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001cc	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001cf	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001d2	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001d5	89 10		 mov	 DWORD PTR [eax], edx
  001d7	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001da	83 c0 04	 add	 eax, 4
  001dd	89 45 cc	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001e0	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001e3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001e8	33 c0		 xor	 eax, eax
  001ea	75 d8		 jne	 SHORT $LN33@SavePolywa
$LN36@SavePolywa:

; 1123 : 	WRITEFIXED(save_p, ht->diffz);

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001f1	89 45 c8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001f4	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001fa	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001fd	89 10		 mov	 DWORD PTR [eax], edx
  001ff	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00202	83 c0 04	 add	 eax, 4
  00205	89 45 c8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00208	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0020b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00210	33 c0		 xor	 eax, eax
  00212	75 d8		 jne	 SHORT $LN36@SavePolywa

; 1124 : }

  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c3		 ret	 0
_SavePolywaypointThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SavePolymoveThinker
_TEXT	SEGMENT
_p_tmp$1 = -32						; size = 4
_p_tmp$2 = -28						; size = 4
_p_tmp$3 = -24						; size = 4
_p_tmp$4 = -20						; size = 4
_p_tmp$5 = -16						; size = 4
_p_tmp$6 = -12						; size = 4
_p_tmp$7 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SavePolymoveThinker PROC				; COMDAT

; 1092 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1093 : 	const polymove_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SavePolymo:

; 1094 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SavePolymo
$LN3@SavePolymo:

; 1095 : 	WRITEINT32(save_p, ht->polyObjNum);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SavePolymo
$LN6@SavePolymo:

; 1096 : 	WRITEINT32(save_p, ht->speed);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SavePolymo
$LN9@SavePolymo:

; 1097 : 	WRITEFIXED(save_p, ht->momx);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SavePolymo
$LN12@SavePolymo:

; 1098 : 	WRITEFIXED(save_p, ht->momy);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b1	89 45 e8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000bd	89 10		 mov	 DWORD PTR [eax], edx
  000bf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000c2	83 c0 04	 add	 eax, 4
  000c5	89 45 e8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d0	33 c0		 xor	 eax, eax
  000d2	75 d8		 jne	 SHORT $LN12@SavePolymo
$LN15@SavePolymo:

; 1099 : 	WRITEINT32(save_p, ht->distance);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d9	89 45 e4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000e2	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e5	89 10		 mov	 DWORD PTR [eax], edx
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000ea	83 c0 04	 add	 eax, 4
  000ed	89 45 e4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f8	33 c0		 xor	 eax, eax
  000fa	75 d8		 jne	 SHORT $LN15@SavePolymo
$LN18@SavePolymo:

; 1100 : 	WRITEANGLE(save_p, ht->angle);

  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00101	89 45 e0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00104	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0010a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0010d	89 10		 mov	 DWORD PTR [eax], edx
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00112	83 c0 04	 add	 eax, 4
  00115	89 45 e0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0011b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00120	33 c0		 xor	 eax, eax
  00122	75 d8		 jne	 SHORT $LN18@SavePolymo

; 1101 : }

  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
_SavePolymoveThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SavePolyrotatetThinker
_TEXT	SEGMENT
_p_tmp$1 = -20						; size = 4
_p_tmp$2 = -16						; size = 4
_p_tmp$3 = -12						; size = 4
_p_tmp$4 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SavePolyrotatetThinker PROC				; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1079 : 	const polyrotate_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SavePolyro:

; 1080 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SavePolyro
$LN3@SavePolyro:

; 1081 : 	WRITEINT32(save_p, ht->polyObjNum);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SavePolyro
$LN6@SavePolyro:

; 1082 : 	WRITEINT32(save_p, ht->speed);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SavePolyro
$LN9@SavePolyro:

; 1083 : 	WRITEINT32(save_p, ht->distance);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SavePolyro

; 1084 : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_SavePolyrotatetThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveDisappearThinker
_TEXT	SEGMENT
_p_tmp$1 = -36						; size = 4
_p_tmp$2 = -32						; size = 4
_p_tmp$3 = -28						; size = 4
_p_tmp$4 = -24						; size = 4
_p_tmp$5 = -20						; size = 4
_p_tmp$6 = -16						; size = 4
_p_tmp$7 = -12						; size = 4
_p_tmp$8 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveDisappearThinker PROC				; COMDAT

; 1058 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1059 : 	const disappear_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveDisapp:

; 1060 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveDisapp
$LN3@SaveDisapp:

; 1061 : 	WRITEUINT32(save_p, ht->appeartime);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SaveDisapp
$LN6@SaveDisapp:

; 1062 : 	WRITEUINT32(save_p, ht->disappeartime);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SaveDisapp
$LN9@SaveDisapp:

; 1063 : 	WRITEUINT32(save_p, ht->offset);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SaveDisapp
$LN12@SaveDisapp:

; 1064 : 	WRITEUINT32(save_p, ht->timer);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b1	89 45 e8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000bd	89 10		 mov	 DWORD PTR [eax], edx
  000bf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000c2	83 c0 04	 add	 eax, 4
  000c5	89 45 e8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d0	33 c0		 xor	 eax, eax
  000d2	75 d8		 jne	 SHORT $LN12@SaveDisapp
$LN15@SaveDisapp:

; 1065 : 	WRITEINT32(save_p, ht->affectee);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d9	89 45 e4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000e2	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e5	89 10		 mov	 DWORD PTR [eax], edx
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000ea	83 c0 04	 add	 eax, 4
  000ed	89 45 e4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f8	33 c0		 xor	 eax, eax
  000fa	75 d8		 jne	 SHORT $LN15@SaveDisapp
$LN18@SaveDisapp:

; 1066 : 	WRITEINT32(save_p, ht->sourceline);

  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00101	89 45 e0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00104	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0010a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0010d	89 10		 mov	 DWORD PTR [eax], edx
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00112	83 c0 04	 add	 eax, 4
  00115	89 45 e0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0011b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00120	33 c0		 xor	 eax, eax
  00122	75 d8		 jne	 SHORT $LN18@SaveDisapp
$LN21@SaveDisapp:

; 1067 : 	WRITEINT32(save_p, ht->exists);

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00129	89 45 dc	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0012c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00132	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00135	89 10		 mov	 DWORD PTR [eax], edx
  00137	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0013a	83 c0 04	 add	 eax, 4
  0013d	89 45 dc	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00140	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00143	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00148	33 c0		 xor	 eax, eax
  0014a	75 d8		 jne	 SHORT $LN21@SaveDisapp

; 1068 : }

  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
_SaveDisappearThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveExecutorThinker
_TEXT	SEGMENT
_p_tmp$1 = -20						; size = 4
_p_tmp$2 = -16						; size = 4
_p_tmp$3 = -12						; size = 4
_p_tmp$4 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveExecutorThinker PROC				; COMDAT

; 1044 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1045 : 	const executor_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveExecut:

; 1046 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveExecut
$LN3@SaveExecut:

; 1047 : 	WRITEUINT32(save_p, SaveLine(ht->line));

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _SaveLine
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _p_tmp$3[ebp]
  0004e	89 02		 mov	 DWORD PTR [edx], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00059	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00061	33 c0		 xor	 eax, eax
  00063	75 cf		 jne	 SHORT $LN3@SaveExecut
$LN6@SaveExecut:

; 1048 : 	WRITEUINT32(save_p, SaveMobjnum(ht->caller));

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006a	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00070	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 _SaveMobjnum
  00079	83 c4 04	 add	 esp, 4
  0007c	8b 55 f0	 mov	 edx, DWORD PTR _p_tmp$2[ebp]
  0007f	89 02		 mov	 DWORD PTR [edx], eax
  00081	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00084	83 c0 04	 add	 eax, 4
  00087	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0008a	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0008d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00092	33 c0		 xor	 eax, eax
  00094	75 cf		 jne	 SHORT $LN6@SaveExecut
$LN9@SaveExecut:

; 1049 : 	WRITEINT32(save_p, ht->timer);

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0009b	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0009e	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000a4	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000a7	89 10		 mov	 DWORD PTR [eax], edx
  000a9	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000ac	83 c0 04	 add	 eax, 4
  000af	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000b2	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000b5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000ba	33 c0		 xor	 eax, eax
  000bc	75 d8		 jne	 SHORT $LN9@SaveExecut

; 1050 : }

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
_SaveExecutorThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveLightlevelThinker
_TEXT	SEGMENT
_p_tmp$1 = -20						; size = 4
_p_tmp$2 = -16						; size = 4
_p_tmp$3 = -12						; size = 4
_p_tmp$4 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveLightlevelThinker PROC				; COMDAT

; 1030 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1031 : 	const lightlevel_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveLightl:

; 1032 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveLightl
$LN3@SaveLightl:

; 1033 : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _SaveSector
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _p_tmp$3[ebp]
  0004e	89 02		 mov	 DWORD PTR [edx], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00059	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00061	33 c0		 xor	 eax, eax
  00063	75 cf		 jne	 SHORT $LN3@SaveLightl
$LN6@SaveLightl:

; 1034 : 	WRITEINT32(save_p, ht->destlevel);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006a	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0006d	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00073	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00076	89 10		 mov	 DWORD PTR [eax], edx
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0007b	83 c0 04	 add	 eax, 4
  0007e	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00081	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00084	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00089	33 c0		 xor	 eax, eax
  0008b	75 d8		 jne	 SHORT $LN6@SaveLightl
$LN9@SaveLightl:

; 1035 : 	WRITEINT32(save_p, ht->speed);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00092	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00095	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0009b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0009e	89 10		 mov	 DWORD PTR [eax], edx
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000a3	83 c0 04	 add	 eax, 4
  000a6	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000a9	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000b1	33 c0		 xor	 eax, eax
  000b3	75 d8		 jne	 SHORT $LN9@SaveLightl

; 1036 : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_SaveLightlevelThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveLaserThinker
_TEXT	SEGMENT
_p_tmp$1 = -20						; size = 4
_p_tmp$2 = -16						; size = 4
_p_tmp$3 = -12						; size = 4
_p_tmp$4 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveLaserThinker PROC					; COMDAT

; 1016 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1017 : 	const laserthink_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveLaserT:

; 1018 : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveLaserT
$LN3@SaveLaserT:

; 1019 : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0003f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _SaveSector
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _p_tmp$3[ebp]
  0004e	89 02		 mov	 DWORD PTR [edx], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00059	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00061	33 c0		 xor	 eax, eax
  00063	75 cf		 jne	 SHORT $LN3@SaveLaserT
$LN6@SaveLaserT:

; 1020 : 	WRITEUINT32(save_p, SaveSector(ht->sec));

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006a	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00070	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 _SaveSector
  00079	83 c4 04	 add	 esp, 4
  0007c	8b 55 f0	 mov	 edx, DWORD PTR _p_tmp$2[ebp]
  0007f	89 02		 mov	 DWORD PTR [edx], eax
  00081	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00084	83 c0 04	 add	 eax, 4
  00087	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0008a	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0008d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00092	33 c0		 xor	 eax, eax
  00094	75 cf		 jne	 SHORT $LN6@SaveLaserT
$LN9@SaveLaserT:

; 1021 : 	WRITEUINT32(save_p, SaveLine(ht->sourceline));

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0009b	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000a1	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 _SaveLine
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b 55 ec	 mov	 edx, DWORD PTR _p_tmp$1[ebp]
  000b0	89 02		 mov	 DWORD PTR [edx], eax
  000b2	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000b5	83 c0 04	 add	 eax, 4
  000b8	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000bb	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000be	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000c3	33 c0		 xor	 eax, eax
  000c5	75 cf		 jne	 SHORT $LN9@SaveLaserT

; 1022 : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_SaveLaserThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SavePusherThinker
_TEXT	SEGMENT
_p_tmp$1 = -60						; size = 4
_p_tmp$2 = -56						; size = 4
_p_tmp$3 = -52						; size = 4
_p_tmp$4 = -48						; size = 4
_p_tmp$5 = -44						; size = 4
_p_tmp$6 = -40						; size = 4
_p_tmp$7 = -36						; size = 4
_p_tmp$8 = -32						; size = 4
_p_tmp$9 = -28						; size = 4
_p_tmp$10 = -24						; size = 4
_p_tmp$11 = -20						; size = 4
_p_tmp$12 = -16						; size = 4
_p_tmp$13 = -12						; size = 4
_p_tmp$14 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SavePusherThinker PROC					; COMDAT

; 992  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 993  : 	const pusher_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SavePusher:

; 994  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SavePusher
$LN3@SavePusher:

; 995  : 	WRITEUINT8(save_p, ht->type);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00045	88 10		 mov	 BYTE PTR [eax], dl
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0004a	83 c0 01	 add	 eax, 1
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SavePusher
$LN6@SavePusher:

; 996  : 	WRITEINT32(save_p, ht->x_mag);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SavePusher
$LN9@SavePusher:

; 997  : 	WRITEINT32(save_p, ht->y_mag);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SavePusher
$LN12@SavePusher:

; 998  : 	WRITEINT32(save_p, ht->magnitude);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b1	89 45 e8	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ba	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000bd	89 10		 mov	 DWORD PTR [eax], edx
  000bf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000c2	83 c0 04	 add	 eax, 4
  000c5	89 45 e8	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d0	33 c0		 xor	 eax, eax
  000d2	75 d8		 jne	 SHORT $LN12@SavePusher
$LN15@SavePusher:

; 999  : 	WRITEINT32(save_p, ht->radius);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d9	89 45 e4	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000e2	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000e5	89 10		 mov	 DWORD PTR [eax], edx
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000ea	83 c0 04	 add	 eax, 4
  000ed	89 45 e4	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f8	33 c0		 xor	 eax, eax
  000fa	75 d8		 jne	 SHORT $LN15@SavePusher
$LN18@SavePusher:

; 1000 : 	WRITEINT32(save_p, ht->x);

  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00101	89 45 e0	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00104	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0010a	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0010d	89 10		 mov	 DWORD PTR [eax], edx
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00112	83 c0 04	 add	 eax, 4
  00115	89 45 e0	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0011b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00120	33 c0		 xor	 eax, eax
  00122	75 d8		 jne	 SHORT $LN18@SavePusher
$LN21@SavePusher:

; 1001 : 	WRITEINT32(save_p, ht->y);

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00129	89 45 dc	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  0012c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00132	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00135	89 10		 mov	 DWORD PTR [eax], edx
  00137	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0013a	83 c0 04	 add	 eax, 4
  0013d	89 45 dc	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00140	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00143	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00148	33 c0		 xor	 eax, eax
  0014a	75 d8		 jne	 SHORT $LN21@SavePusher
$LN24@SavePusher:

; 1002 : 	WRITEINT32(save_p, ht->z);

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00151	89 45 d8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00154	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0015a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0015d	89 10		 mov	 DWORD PTR [eax], edx
  0015f	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00162	83 c0 04	 add	 eax, 4
  00165	89 45 d8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00168	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0016b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00170	33 c0		 xor	 eax, eax
  00172	75 d8		 jne	 SHORT $LN24@SavePusher
$LN27@SavePusher:

; 1003 : 	WRITEINT32(save_p, ht->affectee);

  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00179	89 45 d4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0017c	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0017f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00182	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00185	89 10		 mov	 DWORD PTR [eax], edx
  00187	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0018a	83 c0 04	 add	 eax, 4
  0018d	89 45 d4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00190	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00193	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00198	33 c0		 xor	 eax, eax
  0019a	75 d8		 jne	 SHORT $LN27@SavePusher
$LN30@SavePusher:

; 1004 : 	WRITEUINT8(save_p, ht->roverpusher);

  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001a1	89 45 d0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  001a4	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001aa	8a 51 38	 mov	 dl, BYTE PTR [ecx+56]
  001ad	88 10		 mov	 BYTE PTR [eax], dl
  001af	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001b2	83 c0 01	 add	 eax, 1
  001b5	89 45 d0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  001b8	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001bb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001c0	33 c0		 xor	 eax, eax
  001c2	75 d8		 jne	 SHORT $LN30@SavePusher
$LN33@SavePusher:

; 1005 : 	WRITEINT32(save_p, ht->referrer);

  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001c9	89 45 cc	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  001cc	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001cf	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001d2	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  001d5	89 10		 mov	 DWORD PTR [eax], edx
  001d7	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001da	83 c0 04	 add	 eax, 4
  001dd	89 45 cc	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  001e0	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001e3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001e8	33 c0		 xor	 eax, eax
  001ea	75 d8		 jne	 SHORT $LN33@SavePusher
$LN36@SavePusher:

; 1006 : 	WRITEINT32(save_p, ht->exclusive);

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001f1	89 45 c8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001f4	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001fa	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  001fd	89 10		 mov	 DWORD PTR [eax], edx
  001ff	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00202	83 c0 04	 add	 eax, 4
  00205	89 45 c8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00208	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0020b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00210	33 c0		 xor	 eax, eax
  00212	75 d8		 jne	 SHORT $LN36@SavePusher
$LN39@SavePusher:

; 1007 : 	WRITEINT32(save_p, ht->slider);

  00214	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00219	89 45 c4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0021c	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0021f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00222	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00225	89 10		 mov	 DWORD PTR [eax], edx
  00227	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0022a	83 c0 04	 add	 eax, 4
  0022d	89 45 c4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00230	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00233	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00238	33 c0		 xor	 eax, eax
  0023a	75 d8		 jne	 SHORT $LN39@SavePusher

; 1008 : }

  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
  0023f	8b e5		 mov	 esp, ebp
  00241	5d		 pop	 ebp
  00242	c3		 ret	 0
_SavePusherThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveFrictionThinker
_TEXT	SEGMENT
_p_tmp$1 = -28						; size = 4
_p_tmp$2 = -24						; size = 4
_p_tmp$3 = -20						; size = 4
_p_tmp$4 = -16						; size = 4
_p_tmp$5 = -12						; size = 4
_p_tmp$6 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveFrictionThinker PROC				; COMDAT

; 976  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 977  : 	const friction_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveFricti:

; 978  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveFricti
$LN3@SaveFricti:

; 979  : 	WRITEINT32(save_p, ht->friction);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SaveFricti
$LN6@SaveFricti:

; 980  : 	WRITEINT32(save_p, ht->movefactor);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SaveFricti
$LN9@SaveFricti:

; 981  : 	WRITEINT32(save_p, ht->affectee);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SaveFricti
$LN12@SaveFricti:

; 982  : 	WRITEINT32(save_p, ht->referrer);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b1	89 45 e8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000bd	89 10		 mov	 DWORD PTR [eax], edx
  000bf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000c2	83 c0 04	 add	 eax, 4
  000c5	89 45 e8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d0	33 c0		 xor	 eax, eax
  000d2	75 d8		 jne	 SHORT $LN12@SaveFricti
$LN15@SaveFricti:

; 983  : 	WRITEUINT8(save_p, ht->roverfriction);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d9	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000e2	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  000e5	88 10		 mov	 BYTE PTR [eax], dl
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000ea	83 c0 01	 add	 eax, 1
  000ed	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f8	33 c0		 xor	 eax, eax
  000fa	75 d8		 jne	 SHORT $LN15@SaveFricti

; 984  : }

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
_SaveFrictionThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveScrollThinker
_TEXT	SEGMENT
_p_tmp$1 = -48						; size = 4
_p_tmp$2 = -44						; size = 4
_p_tmp$3 = -40						; size = 4
_p_tmp$4 = -36						; size = 4
_p_tmp$5 = -32						; size = 4
_p_tmp$6 = -28						; size = 4
_p_tmp$7 = -24						; size = 4
_p_tmp$8 = -20						; size = 4
_p_tmp$9 = -16						; size = 4
_p_tmp$10 = -12						; size = 4
_p_tmp$11 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveScrollThinker PROC					; COMDAT

; 955  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 956  : 	const scroll_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveScroll:

; 957  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveScroll
$LN3@SaveScroll:

; 958  : 	WRITEFIXED(save_p, ht->dx);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SaveScroll
$LN6@SaveScroll:

; 959  : 	WRITEFIXED(save_p, ht->dy);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SaveScroll
$LN9@SaveScroll:

; 960  : 	WRITEINT32(save_p, ht->affectee);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00092	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0009a	83 c0 04	 add	 eax, 4
  0009d	89 45 ec	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000a3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a8	33 c0		 xor	 eax, eax
  000aa	75 d8		 jne	 SHORT $LN9@SaveScroll
$LN12@SaveScroll:

; 961  : 	WRITEINT32(save_p, ht->control);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b1	89 45 e8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000bd	89 10		 mov	 DWORD PTR [eax], edx
  000bf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000c2	83 c0 04	 add	 eax, 4
  000c5	89 45 e8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000cb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d0	33 c0		 xor	 eax, eax
  000d2	75 d8		 jne	 SHORT $LN12@SaveScroll
$LN15@SaveScroll:

; 962  : 	WRITEFIXED(save_p, ht->last_height);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d9	89 45 e4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000e2	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e5	89 10		 mov	 DWORD PTR [eax], edx
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000ea	83 c0 04	 add	 eax, 4
  000ed	89 45 e4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f8	33 c0		 xor	 eax, eax
  000fa	75 d8		 jne	 SHORT $LN15@SaveScroll
$LN18@SaveScroll:

; 963  : 	WRITEFIXED(save_p, ht->vdx);

  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00101	89 45 e0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00104	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0010a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0010d	89 10		 mov	 DWORD PTR [eax], edx
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00112	83 c0 04	 add	 eax, 4
  00115	89 45 e0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0011b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00120	33 c0		 xor	 eax, eax
  00122	75 d8		 jne	 SHORT $LN18@SaveScroll
$LN21@SaveScroll:

; 964  : 	WRITEFIXED(save_p, ht->vdy);

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00129	89 45 dc	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0012c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00132	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00135	89 10		 mov	 DWORD PTR [eax], edx
  00137	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0013a	83 c0 04	 add	 eax, 4
  0013d	89 45 dc	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00140	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00143	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00148	33 c0		 xor	 eax, eax
  0014a	75 d8		 jne	 SHORT $LN21@SaveScroll
$LN24@SaveScroll:

; 965  : 	WRITEINT32(save_p, ht->accel);

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00151	89 45 d8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00154	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0015a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0015d	89 10		 mov	 DWORD PTR [eax], edx
  0015f	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00162	83 c0 04	 add	 eax, 4
  00165	89 45 d8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00168	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0016b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00170	33 c0		 xor	 eax, eax
  00172	75 d8		 jne	 SHORT $LN24@SaveScroll
$LN27@SaveScroll:

; 966  : 	WRITEINT32(save_p, ht->exclusive);

  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00179	89 45 d4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0017c	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0017f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00182	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00185	89 10		 mov	 DWORD PTR [eax], edx
  00187	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0018a	83 c0 04	 add	 eax, 4
  0018d	89 45 d4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00190	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00193	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00198	33 c0		 xor	 eax, eax
  0019a	75 d8		 jne	 SHORT $LN27@SaveScroll
$LN30@SaveScroll:

; 967  : 	WRITEUINT8(save_p, ht->type);

  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001a1	89 45 d0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001a4	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001aa	8a 51 34	 mov	 dl, BYTE PTR [ecx+52]
  001ad	88 10		 mov	 BYTE PTR [eax], dl
  001af	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001b2	83 c0 01	 add	 eax, 1
  001b5	89 45 d0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001b8	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001bb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001c0	33 c0		 xor	 eax, eax
  001c2	75 d8		 jne	 SHORT $LN30@SaveScroll

; 968  : }

  001c4	5f		 pop	 edi
  001c5	5e		 pop	 esi
  001c6	5b		 pop	 ebx
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c3		 ret	 0
_SaveScrollThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveElevatorThinker
_TEXT	SEGMENT
_p_tmp$1 = -76						; size = 4
_p_tmp$2 = -72						; size = 4
_p_tmp$3 = -68						; size = 4
_p_tmp$4 = -64						; size = 4
_p_tmp$5 = -60						; size = 4
_p_tmp$6 = -56						; size = 4
_p_tmp$7 = -52						; size = 4
_p_tmp$8 = -48						; size = 4
_p_tmp$9 = -44						; size = 4
_p_tmp$10 = -40						; size = 4
_p_tmp$11 = -36						; size = 4
_p_tmp$12 = -32						; size = 4
_p_tmp$13 = -28						; size = 4
_p_tmp$14 = -24						; size = 4
_p_tmp$15 = -20						; size = 4
_p_tmp$16 = -16						; size = 4
_p_tmp$17 = -12						; size = 4
_p_tmp$18 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveElevatorThinker PROC				; COMDAT

; 927  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 928  : 	const elevator_t *ht = (const void *)th;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveElevat:

; 929  : 	WRITEUINT8(save_p, type);

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00017	89 45 f8	 mov	 DWORD PTR _p_tmp$18[ebp], eax
  0001a	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  0001d	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  00020	88 08		 mov	 BYTE PTR [eax], cl
  00022	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 f8	 mov	 DWORD PTR _p_tmp$18[ebp], eax
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  0002e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00033	33 c0		 xor	 eax, eax
  00035	75 db		 jne	 SHORT $LN4@SaveElevat
$LN3@SaveElevat:

; 930  : 	WRITEUINT8(save_p, ht->type);

  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0003c	89 45 f4	 mov	 DWORD PTR _p_tmp$17[ebp], eax
  0003f	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00045	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00048	88 10		 mov	 BYTE PTR [eax], dl
  0004a	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 f4	 mov	 DWORD PTR _p_tmp$17[ebp], eax
  00053	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0005b	33 c0		 xor	 eax, eax
  0005d	75 d8		 jne	 SHORT $LN3@SaveElevat
$LN6@SaveElevat:

; 931  : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00064	89 45 f0	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  00067	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0006a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _SaveSector
  00073	83 c4 04	 add	 esp, 4
  00076	8b 55 f0	 mov	 edx, DWORD PTR _p_tmp$16[ebp]
  00079	89 02		 mov	 DWORD PTR [edx], eax
  0007b	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  0007e	83 c0 04	 add	 eax, 4
  00081	89 45 f0	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  00084	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  00087	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0008c	33 c0		 xor	 eax, eax
  0008e	75 cf		 jne	 SHORT $LN6@SaveElevat
$LN9@SaveElevat:

; 932  : 	WRITEUINT32(save_p, SaveSector(ht->actionsector));

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00095	89 45 ec	 mov	 DWORD PTR _p_tmp$15[ebp], eax
  00098	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0009b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 _SaveSector
  000a4	83 c4 04	 add	 esp, 4
  000a7	8b 55 ec	 mov	 edx, DWORD PTR _p_tmp$15[ebp]
  000aa	89 02		 mov	 DWORD PTR [edx], eax
  000ac	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  000af	83 c0 04	 add	 eax, 4
  000b2	89 45 ec	 mov	 DWORD PTR _p_tmp$15[ebp], eax
  000b5	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  000b8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000bd	33 c0		 xor	 eax, eax
  000bf	75 cf		 jne	 SHORT $LN9@SaveElevat
$LN12@SaveElevat:

; 933  : 	WRITEINT32(save_p, ht->direction);

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000c6	89 45 e8	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  000c9	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000cf	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000d2	89 10		 mov	 DWORD PTR [eax], edx
  000d4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  000d7	83 c0 04	 add	 eax, 4
  000da	89 45 e8	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  000dd	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  000e0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000e5	33 c0		 xor	 eax, eax
  000e7	75 d8		 jne	 SHORT $LN12@SaveElevat
$LN15@SaveElevat:

; 934  : 	WRITEFIXED(save_p, ht->floordestheight);

  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ee	89 45 e4	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  000f1	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000f7	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000fa	89 10		 mov	 DWORD PTR [eax], edx
  000fc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  000ff	83 c0 04	 add	 eax, 4
  00102	89 45 e4	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00105	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00108	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0010d	33 c0		 xor	 eax, eax
  0010f	75 d8		 jne	 SHORT $LN15@SaveElevat
$LN18@SaveElevat:

; 935  : 	WRITEFIXED(save_p, ht->ceilingdestheight);

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00116	89 45 e0	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00119	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0011f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00122	89 10		 mov	 DWORD PTR [eax], edx
  00124	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00127	83 c0 04	 add	 eax, 4
  0012a	89 45 e0	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  0012d	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00130	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00135	33 c0		 xor	 eax, eax
  00137	75 d8		 jne	 SHORT $LN18@SaveElevat
$LN21@SaveElevat:

; 936  : 	WRITEFIXED(save_p, ht->speed);

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0013e	89 45 dc	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00141	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00147	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0014a	89 10		 mov	 DWORD PTR [eax], edx
  0014c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0014f	83 c0 04	 add	 eax, 4
  00152	89 45 dc	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00155	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00158	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0015d	33 c0		 xor	 eax, eax
  0015f	75 d8		 jne	 SHORT $LN21@SaveElevat
$LN24@SaveElevat:

; 937  : 	WRITEFIXED(save_p, ht->origspeed);

  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00166	89 45 d8	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00169	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0016f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00172	89 10		 mov	 DWORD PTR [eax], edx
  00174	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00177	83 c0 04	 add	 eax, 4
  0017a	89 45 d8	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  0017d	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00180	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00185	33 c0		 xor	 eax, eax
  00187	75 d8		 jne	 SHORT $LN24@SaveElevat
$LN27@SaveElevat:

; 938  : 	WRITEFIXED(save_p, ht->low);

  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0018e	89 45 d4	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00191	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00197	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0019a	89 10		 mov	 DWORD PTR [eax], edx
  0019c	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0019f	83 c0 04	 add	 eax, 4
  001a2	89 45 d4	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  001a5	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  001a8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001ad	33 c0		 xor	 eax, eax
  001af	75 d8		 jne	 SHORT $LN27@SaveElevat
$LN30@SaveElevat:

; 939  : 	WRITEFIXED(save_p, ht->high);

  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001b6	89 45 d0	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  001b9	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  001bc	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001bf	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001c2	89 10		 mov	 DWORD PTR [eax], edx
  001c4	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  001c7	83 c0 04	 add	 eax, 4
  001ca	89 45 d0	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  001cd	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  001d0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001d5	33 c0		 xor	 eax, eax
  001d7	75 d8		 jne	 SHORT $LN30@SaveElevat
$LN33@SaveElevat:

; 940  : 	WRITEFIXED(save_p, ht->distance);

  001d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001de	89 45 cc	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  001e1	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  001e4	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001e7	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001ea	89 10		 mov	 DWORD PTR [eax], edx
  001ec	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  001ef	83 c0 04	 add	 eax, 4
  001f2	89 45 cc	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  001f5	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  001f8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001fd	33 c0		 xor	 eax, eax
  001ff	75 d8		 jne	 SHORT $LN33@SaveElevat
$LN36@SaveElevat:

; 941  : 	WRITEFIXED(save_p, ht->delay);

  00201	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00206	89 45 c8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00209	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0020c	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0020f	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00212	89 10		 mov	 DWORD PTR [eax], edx
  00214	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00217	83 c0 04	 add	 eax, 4
  0021a	89 45 c8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  0021d	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00220	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00225	33 c0		 xor	 eax, eax
  00227	75 d8		 jne	 SHORT $LN36@SaveElevat
$LN39@SaveElevat:

; 942  : 	WRITEFIXED(save_p, ht->delaytimer);

  00229	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0022e	89 45 c4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00231	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00234	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00237	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0023a	89 10		 mov	 DWORD PTR [eax], edx
  0023c	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0023f	83 c0 04	 add	 eax, 4
  00242	89 45 c4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00245	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00248	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0024d	33 c0		 xor	 eax, eax
  0024f	75 d8		 jne	 SHORT $LN39@SaveElevat
$LN42@SaveElevat:

; 943  : 	WRITEFIXED(save_p, ht->floorwasheight);

  00251	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00256	89 45 c0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00259	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0025c	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0025f	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00262	89 10		 mov	 DWORD PTR [eax], edx
  00264	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00267	83 c0 04	 add	 eax, 4
  0026a	89 45 c0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0026d	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00270	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00275	33 c0		 xor	 eax, eax
  00277	75 d8		 jne	 SHORT $LN42@SaveElevat
$LN45@SaveElevat:

; 944  : 	WRITEFIXED(save_p, ht->ceilingwasheight);

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0027e	89 45 bc	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00281	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00284	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00287	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0028a	89 10		 mov	 DWORD PTR [eax], edx
  0028c	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0028f	83 c0 04	 add	 eax, 4
  00292	89 45 bc	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00295	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00298	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0029d	33 c0		 xor	 eax, eax
  0029f	75 d8		 jne	 SHORT $LN45@SaveElevat
$LN48@SaveElevat:

; 945  : 	WRITEUINT32(save_p, SavePlayer(ht->player)); // was dummy

  002a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002a6	89 45 b8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  002a9	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  002ac	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002af	51		 push	 ecx
  002b0	e8 00 00 00 00	 call	 _SavePlayer
  002b5	83 c4 04	 add	 esp, 4
  002b8	8b 55 b8	 mov	 edx, DWORD PTR _p_tmp$2[ebp]
  002bb	89 02		 mov	 DWORD PTR [edx], eax
  002bd	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  002c0	83 c0 04	 add	 eax, 4
  002c3	89 45 b8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  002c6	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  002c9	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002ce	33 c0		 xor	 eax, eax
  002d0	75 cf		 jne	 SHORT $LN48@SaveElevat
$LN51@SaveElevat:

; 946  : 	WRITEUINT32(save_p, SaveLine(ht->sourceline));

  002d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002d7	89 45 b4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  002da	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  002dd	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  002e0	51		 push	 ecx
  002e1	e8 00 00 00 00	 call	 _SaveLine
  002e6	83 c4 04	 add	 esp, 4
  002e9	8b 55 b4	 mov	 edx, DWORD PTR _p_tmp$1[ebp]
  002ec	89 02		 mov	 DWORD PTR [edx], eax
  002ee	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  002f1	83 c0 04	 add	 eax, 4
  002f4	89 45 b4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  002f7	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  002fa	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002ff	33 c0		 xor	 eax, eax
  00301	75 cf		 jne	 SHORT $LN51@SaveElevat

; 947  : }

  00303	5f		 pop	 edi
  00304	5e		 pop	 esi
  00305	5b		 pop	 ebx
  00306	8b e5		 mov	 esp, ebp
  00308	5d		 pop	 ebp
  00309	c3		 ret	 0
_SaveElevatorThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveFireflickerThinker
_TEXT	SEGMENT
_p_tmp$1 = -28						; size = 4
_p_tmp$2 = -24						; size = 4
_p_tmp$3 = -20						; size = 4
_p_tmp$4 = -16						; size = 4
_p_tmp$5 = -12						; size = 4
_p_tmp$6 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveFireflickerThinker PROC				; COMDAT

; 912  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 913  : 	const fireflicker_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveFirefl:

; 914  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveFirefl
$LN3@SaveFirefl:

; 915  : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _SaveSector
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _p_tmp$5[ebp]
  0004e	89 02		 mov	 DWORD PTR [edx], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 f4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00059	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00061	33 c0		 xor	 eax, eax
  00063	75 cf		 jne	 SHORT $LN3@SaveFirefl
$LN6@SaveFirefl:

; 916  : 	WRITEINT32(save_p, ht->count);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006a	89 45 f0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0006d	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00073	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00076	89 10		 mov	 DWORD PTR [eax], edx
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0007b	83 c0 04	 add	 eax, 4
  0007e	89 45 f0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00081	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00084	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00089	33 c0		 xor	 eax, eax
  0008b	75 d8		 jne	 SHORT $LN6@SaveFirefl
$LN9@SaveFirefl:

; 917  : 	WRITEINT32(save_p, ht->resetcount);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00092	89 45 ec	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00095	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0009b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0009e	89 10		 mov	 DWORD PTR [eax], edx
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000a3	83 c0 04	 add	 eax, 4
  000a6	89 45 ec	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000a9	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000b1	33 c0		 xor	 eax, eax
  000b3	75 d8		 jne	 SHORT $LN9@SaveFirefl
$LN12@SaveFirefl:

; 918  : 	WRITEINT32(save_p, ht->maxlight);

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ba	89 45 e8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000bd	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000c3	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c6	89 10		 mov	 DWORD PTR [eax], edx
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000cb	83 c0 04	 add	 eax, 4
  000ce	89 45 e8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000d1	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000d4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d9	33 c0		 xor	 eax, eax
  000db	75 d8		 jne	 SHORT $LN12@SaveFirefl
$LN15@SaveFirefl:

; 919  : 	WRITEINT32(save_p, ht->minlight);

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000e2	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000e5	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000eb	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ee	89 10		 mov	 DWORD PTR [eax], edx
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000f3	83 c0 04	 add	 eax, 4
  000f6	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000f9	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000fc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00101	33 c0		 xor	 eax, eax
  00103	75 d8		 jne	 SHORT $LN15@SaveFirefl

; 920  : }

  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
_SaveFireflickerThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveGlowThinker
_TEXT	SEGMENT
_p_tmp$1 = -28						; size = 4
_p_tmp$2 = -24						; size = 4
_p_tmp$3 = -20						; size = 4
_p_tmp$4 = -16						; size = 4
_p_tmp$5 = -12						; size = 4
_p_tmp$6 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveGlowThinker PROC					; COMDAT

; 897  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 898  : 	const glow_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveGlowTh:

; 899  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveGlowTh
$LN3@SaveGlowTh:

; 900  : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _SaveSector
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _p_tmp$5[ebp]
  0004e	89 02		 mov	 DWORD PTR [edx], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 f4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00059	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00061	33 c0		 xor	 eax, eax
  00063	75 cf		 jne	 SHORT $LN3@SaveGlowTh
$LN6@SaveGlowTh:

; 901  : 	WRITEINT32(save_p, ht->minlight);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006a	89 45 f0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0006d	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00073	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00076	89 10		 mov	 DWORD PTR [eax], edx
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0007b	83 c0 04	 add	 eax, 4
  0007e	89 45 f0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00081	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00084	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00089	33 c0		 xor	 eax, eax
  0008b	75 d8		 jne	 SHORT $LN6@SaveGlowTh
$LN9@SaveGlowTh:

; 902  : 	WRITEINT32(save_p, ht->maxlight);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00092	89 45 ec	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00095	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0009b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0009e	89 10		 mov	 DWORD PTR [eax], edx
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000a3	83 c0 04	 add	 eax, 4
  000a6	89 45 ec	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000a9	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000b1	33 c0		 xor	 eax, eax
  000b3	75 d8		 jne	 SHORT $LN9@SaveGlowTh
$LN12@SaveGlowTh:

; 903  : 	WRITEINT32(save_p, ht->direction);

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ba	89 45 e8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000bd	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000c3	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c6	89 10		 mov	 DWORD PTR [eax], edx
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000cb	83 c0 04	 add	 eax, 4
  000ce	89 45 e8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000d1	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000d4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d9	33 c0		 xor	 eax, eax
  000db	75 d8		 jne	 SHORT $LN12@SaveGlowTh
$LN15@SaveGlowTh:

; 904  : 	WRITEINT32(save_p, ht->speed);

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000e2	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000e5	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000eb	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ee	89 10		 mov	 DWORD PTR [eax], edx
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000f3	83 c0 04	 add	 eax, 4
  000f6	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000f9	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000fc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00101	33 c0		 xor	 eax, eax
  00103	75 d8		 jne	 SHORT $LN15@SaveGlowTh

; 905  : }

  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
_SaveGlowThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveStrobeThinker
_TEXT	SEGMENT
_p_tmp$1 = -32						; size = 4
_p_tmp$2 = -28						; size = 4
_p_tmp$3 = -24						; size = 4
_p_tmp$4 = -20						; size = 4
_p_tmp$5 = -16						; size = 4
_p_tmp$6 = -12						; size = 4
_p_tmp$7 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveStrobeThinker PROC					; COMDAT

; 880  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 881  : 	const strobe_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveStrobe:

; 882  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveStrobe
$LN3@SaveStrobe:

; 883  : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _SaveSector
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _p_tmp$6[ebp]
  0004e	89 02		 mov	 DWORD PTR [edx], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 f4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00059	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00061	33 c0		 xor	 eax, eax
  00063	75 cf		 jne	 SHORT $LN3@SaveStrobe
$LN6@SaveStrobe:

; 884  : 	WRITEINT32(save_p, ht->count);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006a	89 45 f0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0006d	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00073	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00076	89 10		 mov	 DWORD PTR [eax], edx
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0007b	83 c0 04	 add	 eax, 4
  0007e	89 45 f0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00081	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00084	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00089	33 c0		 xor	 eax, eax
  0008b	75 d8		 jne	 SHORT $LN6@SaveStrobe
$LN9@SaveStrobe:

; 885  : 	WRITEINT32(save_p, ht->minlight);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00092	89 45 ec	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00095	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0009b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0009e	89 10		 mov	 DWORD PTR [eax], edx
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000a3	83 c0 04	 add	 eax, 4
  000a6	89 45 ec	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  000a9	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000b1	33 c0		 xor	 eax, eax
  000b3	75 d8		 jne	 SHORT $LN9@SaveStrobe
$LN12@SaveStrobe:

; 886  : 	WRITEINT32(save_p, ht->maxlight);

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ba	89 45 e8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000bd	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000c3	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c6	89 10		 mov	 DWORD PTR [eax], edx
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000cb	83 c0 04	 add	 eax, 4
  000ce	89 45 e8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  000d1	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  000d4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d9	33 c0		 xor	 eax, eax
  000db	75 d8		 jne	 SHORT $LN12@SaveStrobe
$LN15@SaveStrobe:

; 887  : 	WRITEINT32(save_p, ht->darktime);

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000e2	89 45 e4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000e5	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000eb	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ee	89 10		 mov	 DWORD PTR [eax], edx
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000f3	83 c0 04	 add	 eax, 4
  000f6	89 45 e4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000f9	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000fc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00101	33 c0		 xor	 eax, eax
  00103	75 d8		 jne	 SHORT $LN15@SaveStrobe
$LN18@SaveStrobe:

; 888  : 	WRITEINT32(save_p, ht->brighttime);

  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0010a	89 45 e0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0010d	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00113	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00116	89 10		 mov	 DWORD PTR [eax], edx
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0011b	83 c0 04	 add	 eax, 4
  0011e	89 45 e0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00121	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00124	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00129	33 c0		 xor	 eax, eax
  0012b	75 d8		 jne	 SHORT $LN18@SaveStrobe

; 889  : }

  0012d	5f		 pop	 edi
  0012e	5e		 pop	 esi
  0012f	5b		 pop	 ebx
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
_SaveStrobeThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveLightflashThinker
_TEXT	SEGMENT
_p_tmp$1 = -20						; size = 4
_p_tmp$2 = -16						; size = 4
_p_tmp$3 = -12						; size = 4
_p_tmp$4 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveLightflashThinker PROC				; COMDAT

; 866  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 867  : 	const lightflash_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveLightf:

; 868  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveLightf
$LN3@SaveLightf:

; 869  : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _SaveSector
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _p_tmp$3[ebp]
  0004e	89 02		 mov	 DWORD PTR [edx], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 f4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00059	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00061	33 c0		 xor	 eax, eax
  00063	75 cf		 jne	 SHORT $LN3@SaveLightf
$LN6@SaveLightf:

; 870  : 	WRITEINT32(save_p, ht->maxlight);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006a	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0006d	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00073	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00076	89 10		 mov	 DWORD PTR [eax], edx
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0007b	83 c0 04	 add	 eax, 4
  0007e	89 45 f0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00081	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00084	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00089	33 c0		 xor	 eax, eax
  0008b	75 d8		 jne	 SHORT $LN6@SaveLightf
$LN9@SaveLightf:

; 871  : 	WRITEINT32(save_p, ht->minlight);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00092	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00095	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0009b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0009e	89 10		 mov	 DWORD PTR [eax], edx
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000a3	83 c0 04	 add	 eax, 4
  000a6	89 45 ec	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000a9	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000b1	33 c0		 xor	 eax, eax
  000b3	75 d8		 jne	 SHORT $LN9@SaveLightf

; 872  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_SaveLightflashThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveFloormoveThinker
_TEXT	SEGMENT
_p_tmp$1 = -48						; size = 4
_p_tmp$2 = -44						; size = 4
_p_tmp$3 = -40						; size = 4
_p_tmp$4 = -36						; size = 4
_p_tmp$5 = -32						; size = 4
_p_tmp$6 = -28						; size = 4
_p_tmp$7 = -24						; size = 4
_p_tmp$8 = -20						; size = 4
_p_tmp$9 = -16						; size = 4
_p_tmp$10 = -12						; size = 4
_p_tmp$11 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveFloormoveThinker PROC				; COMDAT

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 846  : 	const floormove_t *ht = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveFloorm:

; 847  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f8	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00017	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00028	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveFloorm
$LN3@SaveFloorm:

; 848  : 	WRITEUINT8(save_p, ht->type);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00039	89 45 f4	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00042	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00045	88 10		 mov	 BYTE PTR [eax], dl
  00047	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0004a	83 c0 01	 add	 eax, 1
  0004d	89 45 f4	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00053	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00058	33 c0		 xor	 eax, eax
  0005a	75 d8		 jne	 SHORT $LN3@SaveFloorm
$LN6@SaveFloorm:

; 849  : 	WRITEUINT8(save_p, ht->crush);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00061	89 45 f0	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0006a	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  0006d	88 10		 mov	 BYTE PTR [eax], dl
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 f0	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00078	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00080	33 c0		 xor	 eax, eax
  00082	75 d8		 jne	 SHORT $LN6@SaveFloorm
$LN9@SaveFloorm:

; 850  : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00089	89 45 ec	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0008f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 _SaveSector
  00098	83 c4 04	 add	 esp, 4
  0009b	8b 55 ec	 mov	 edx, DWORD PTR _p_tmp$8[ebp]
  0009e	89 02		 mov	 DWORD PTR [edx], eax
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000a3	83 c0 04	 add	 eax, 4
  000a6	89 45 ec	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  000a9	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000b1	33 c0		 xor	 eax, eax
  000b3	75 cf		 jne	 SHORT $LN9@SaveFloorm
$LN12@SaveFloorm:

; 851  : 	WRITEINT32(save_p, ht->direction);

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ba	89 45 e8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  000bd	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000c3	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c6	89 10		 mov	 DWORD PTR [eax], edx
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000cb	83 c0 04	 add	 eax, 4
  000ce	89 45 e8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  000d1	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000d4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d9	33 c0		 xor	 eax, eax
  000db	75 d8		 jne	 SHORT $LN12@SaveFloorm
$LN15@SaveFloorm:

; 852  : 	WRITEINT32(save_p, ht->texture);

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000e2	89 45 e4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000e5	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000eb	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ee	89 10		 mov	 DWORD PTR [eax], edx
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000f3	83 c0 04	 add	 eax, 4
  000f6	89 45 e4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000f9	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000fc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00101	33 c0		 xor	 eax, eax
  00103	75 d8		 jne	 SHORT $LN15@SaveFloorm
$LN18@SaveFloorm:

; 853  : 	WRITEFIXED(save_p, ht->floordestheight);

  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0010a	89 45 e0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0010d	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00113	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00116	89 10		 mov	 DWORD PTR [eax], edx
  00118	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0011b	83 c0 04	 add	 eax, 4
  0011e	89 45 e0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00121	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00124	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00129	33 c0		 xor	 eax, eax
  0012b	75 d8		 jne	 SHORT $LN18@SaveFloorm
$LN21@SaveFloorm:

; 854  : 	WRITEFIXED(save_p, ht->speed);

  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00132	89 45 dc	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00135	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00138	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0013b	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0013e	89 10		 mov	 DWORD PTR [eax], edx
  00140	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00143	83 c0 04	 add	 eax, 4
  00146	89 45 dc	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00149	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0014c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00151	33 c0		 xor	 eax, eax
  00153	75 d8		 jne	 SHORT $LN21@SaveFloorm
$LN24@SaveFloorm:

; 855  : 	WRITEFIXED(save_p, ht->origspeed);

  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0015a	89 45 d8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0015d	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00160	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00163	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00166	89 10		 mov	 DWORD PTR [eax], edx
  00168	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0016b	83 c0 04	 add	 eax, 4
  0016e	89 45 d8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00171	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00174	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00179	33 c0		 xor	 eax, eax
  0017b	75 d8		 jne	 SHORT $LN24@SaveFloorm
$LN27@SaveFloorm:

; 856  : 	WRITEFIXED(save_p, ht->delay);

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00182	89 45 d4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00185	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00188	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0018b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0018e	89 10		 mov	 DWORD PTR [eax], edx
  00190	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00193	83 c0 04	 add	 eax, 4
  00196	89 45 d4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00199	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0019c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001a1	33 c0		 xor	 eax, eax
  001a3	75 d8		 jne	 SHORT $LN27@SaveFloorm
$LN30@SaveFloorm:

; 857  : 	WRITEFIXED(save_p, ht->delaytimer);

  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001aa	89 45 d0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001ad	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001b0	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001b3	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001b6	89 10		 mov	 DWORD PTR [eax], edx
  001b8	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001bb	83 c0 04	 add	 eax, 4
  001be	89 45 d0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001c1	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001c4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001c9	33 c0		 xor	 eax, eax
  001cb	75 d8		 jne	 SHORT $LN30@SaveFloorm

; 858  : }

  001cd	5f		 pop	 edi
  001ce	5e		 pop	 esi
  001cf	5b		 pop	 ebx
  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c3		 ret	 0
_SaveFloormoveThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveCeilingThinker
_TEXT	SEGMENT
_p_tmp$1 = -68						; size = 4
_p_tmp$2 = -64						; size = 4
_p_tmp$3 = -60						; size = 4
_p_tmp$4 = -56						; size = 4
_p_tmp$5 = -52						; size = 4
_p_tmp$6 = -48						; size = 4
_p_tmp$7 = -44						; size = 4
_p_tmp$8 = -40						; size = 4
_p_tmp$9 = -36						; size = 4
_p_tmp$10 = -32						; size = 4
_p_tmp$11 = -28						; size = 4
_p_tmp$12 = -24						; size = 4
_p_tmp$13 = -20						; size = 4
_p_tmp$14 = -16						; size = 4
_p_tmp$15 = -12						; size = 4
_p_tmp$16 = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveCeilingThinker PROC				; COMDAT

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 820  : 	const ceiling_t *ht = (const void *)th;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveCeilin:

; 821  : 	WRITEUINT8(save_p, type);

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00017	89 45 f8	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  0001a	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  0001d	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  00020	88 08		 mov	 BYTE PTR [eax], cl
  00022	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 f8	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  0002e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00033	33 c0		 xor	 eax, eax
  00035	75 db		 jne	 SHORT $LN4@SaveCeilin
$LN3@SaveCeilin:

; 822  : 	WRITEUINT8(save_p, ht->type);

  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0003c	89 45 f4	 mov	 DWORD PTR _p_tmp$15[ebp], eax
  0003f	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00045	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00048	88 10		 mov	 BYTE PTR [eax], dl
  0004a	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 f4	 mov	 DWORD PTR _p_tmp$15[ebp], eax
  00053	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  00056	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0005b	33 c0		 xor	 eax, eax
  0005d	75 d8		 jne	 SHORT $LN3@SaveCeilin
$LN6@SaveCeilin:

; 823  : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00064	89 45 f0	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00067	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  0006a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _SaveSector
  00073	83 c4 04	 add	 esp, 4
  00076	8b 55 f0	 mov	 edx, DWORD PTR _p_tmp$14[ebp]
  00079	89 02		 mov	 DWORD PTR [edx], eax
  0007b	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  0007e	83 c0 04	 add	 eax, 4
  00081	89 45 f0	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00084	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00087	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0008c	33 c0		 xor	 eax, eax
  0008e	75 cf		 jne	 SHORT $LN6@SaveCeilin
$LN9@SaveCeilin:

; 824  : 	WRITEFIXED(save_p, ht->bottomheight);

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00095	89 45 ec	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00098	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0009e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000a1	89 10		 mov	 DWORD PTR [eax], edx
  000a3	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  000a6	83 c0 04	 add	 eax, 4
  000a9	89 45 ec	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  000ac	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  000af	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000b4	33 c0		 xor	 eax, eax
  000b6	75 d8		 jne	 SHORT $LN9@SaveCeilin
$LN12@SaveCeilin:

; 825  : 	WRITEFIXED(save_p, ht->topheight);

  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bd	89 45 e8	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  000c0	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000c6	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c9	89 10		 mov	 DWORD PTR [eax], edx
  000cb	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  000ce	83 c0 04	 add	 eax, 4
  000d1	89 45 e8	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  000d4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  000d7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000dc	33 c0		 xor	 eax, eax
  000de	75 d8		 jne	 SHORT $LN12@SaveCeilin
$LN15@SaveCeilin:

; 826  : 	WRITEFIXED(save_p, ht->speed);

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000e5	89 45 e4	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  000e8	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  000ee	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000f1	89 10		 mov	 DWORD PTR [eax], edx
  000f3	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  000f6	83 c0 04	 add	 eax, 4
  000f9	89 45 e4	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  000fc	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  000ff	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00104	33 c0		 xor	 eax, eax
  00106	75 d8		 jne	 SHORT $LN15@SaveCeilin
$LN18@SaveCeilin:

; 827  : 	WRITEFIXED(save_p, ht->oldspeed);

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0010d	89 45 e0	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00110	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00116	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00119	89 10		 mov	 DWORD PTR [eax], edx
  0011b	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0011e	83 c0 04	 add	 eax, 4
  00121	89 45 e0	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00124	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00127	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0012c	33 c0		 xor	 eax, eax
  0012e	75 d8		 jne	 SHORT $LN18@SaveCeilin
$LN21@SaveCeilin:

; 828  : 	WRITEFIXED(save_p, ht->delay);

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00135	89 45 dc	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00138	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0013b	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0013e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00141	89 10		 mov	 DWORD PTR [eax], edx
  00143	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00146	83 c0 04	 add	 eax, 4
  00149	89 45 dc	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  0014c	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0014f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00154	33 c0		 xor	 eax, eax
  00156	75 d8		 jne	 SHORT $LN21@SaveCeilin
$LN24@SaveCeilin:

; 829  : 	WRITEFIXED(save_p, ht->delaytimer);

  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0015d	89 45 d8	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00160	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00163	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00166	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00169	89 10		 mov	 DWORD PTR [eax], edx
  0016b	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0016e	83 c0 04	 add	 eax, 4
  00171	89 45 d8	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00174	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00177	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0017c	33 c0		 xor	 eax, eax
  0017e	75 d8		 jne	 SHORT $LN24@SaveCeilin
$LN27@SaveCeilin:

; 830  : 	WRITEUINT8(save_p, ht->crush);

  00180	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00185	89 45 d4	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00188	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0018b	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0018e	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  00191	88 10		 mov	 BYTE PTR [eax], dl
  00193	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00196	83 c0 01	 add	 eax, 1
  00199	89 45 d4	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  0019c	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0019f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001a4	33 c0		 xor	 eax, eax
  001a6	75 d8		 jne	 SHORT $LN27@SaveCeilin
$LN30@SaveCeilin:

; 831  : 	WRITEINT32(save_p, ht->texture);

  001a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001ad	89 45 d0	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  001b0	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  001b3	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001b6	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001b9	89 10		 mov	 DWORD PTR [eax], edx
  001bb	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  001be	83 c0 04	 add	 eax, 4
  001c1	89 45 d0	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  001c4	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  001c7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001cc	33 c0		 xor	 eax, eax
  001ce	75 d8		 jne	 SHORT $LN30@SaveCeilin
$LN33@SaveCeilin:

; 832  : 	WRITEINT32(save_p, ht->direction);

  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001d5	89 45 cc	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  001d8	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  001db	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  001de	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001e1	89 10		 mov	 DWORD PTR [eax], edx
  001e3	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  001e6	83 c0 04	 add	 eax, 4
  001e9	89 45 cc	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  001ec	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  001ef	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001f4	33 c0		 xor	 eax, eax
  001f6	75 d8		 jne	 SHORT $LN33@SaveCeilin
$LN36@SaveCeilin:

; 833  : 	WRITEINT32(save_p, ht->tag);

  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001fd	89 45 c8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00200	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00203	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00206	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00209	89 10		 mov	 DWORD PTR [eax], edx
  0020b	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0020e	83 c0 04	 add	 eax, 4
  00211	89 45 c8	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00214	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00217	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0021c	33 c0		 xor	 eax, eax
  0021e	75 d8		 jne	 SHORT $LN36@SaveCeilin
$LN39@SaveCeilin:

; 834  : 	WRITEINT32(save_p, ht->olddirection);

  00220	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00225	89 45 c4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00228	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0022e	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00231	89 10		 mov	 DWORD PTR [eax], edx
  00233	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00236	83 c0 04	 add	 eax, 4
  00239	89 45 c4	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0023c	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0023f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00244	33 c0		 xor	 eax, eax
  00246	75 d8		 jne	 SHORT $LN39@SaveCeilin
$LN42@SaveCeilin:

; 835  : 	WRITEFIXED(save_p, ht->origspeed);

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0024d	89 45 c0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00250	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00253	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  00256	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00259	89 10		 mov	 DWORD PTR [eax], edx
  0025b	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0025e	83 c0 04	 add	 eax, 4
  00261	89 45 c0	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00264	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00267	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0026c	33 c0		 xor	 eax, eax
  0026e	75 d8		 jne	 SHORT $LN42@SaveCeilin
$LN45@SaveCeilin:

; 836  : 	WRITEFIXED(save_p, ht->sourceline);

  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00275	89 45 bc	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00278	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0027b	8b 4d fc	 mov	 ecx, DWORD PTR _ht$[ebp]
  0027e	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00281	89 10		 mov	 DWORD PTR [eax], edx
  00283	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00286	83 c0 04	 add	 eax, 4
  00289	89 45 bc	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0028c	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0028f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00294	33 c0		 xor	 eax, eax
  00296	75 d8		 jne	 SHORT $LN45@SaveCeilin

; 837  : }

  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx
  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c3		 ret	 0
_SaveCeilingThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveSpecialLevelThinker
_TEXT	SEGMENT
_p_tmp$1 = -24						; size = 4
_p_tmp$2 = -20						; size = 4
_p_tmp$3 = -16						; size = 4
_p_tmp$4 = -12						; size = 4
_i$ = -8						; size = 4
_ht$ = -4						; size = 4
_th$ = 8						; size = 4
_type$ = 12						; size = 1
_SaveSpecialLevelThinker PROC				; COMDAT

; 803  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 804  : 	const levelspecthink_t *ht  = (const void *)th;

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _ht$[ebp], eax
$LN4@SaveSpecia:

; 805  : 	size_t i;
; 806  : 	WRITEUINT8(save_p, type);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00014	89 45 f4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00017	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0001a	8a 4d 0c	 mov	 cl, BYTE PTR _type$[ebp]
  0001d	88 08		 mov	 BYTE PTR [eax], cl
  0001f	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00028	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00030	33 c0		 xor	 eax, eax
  00032	75 db		 jne	 SHORT $LN4@SaveSpecia

; 807  : 	for (i = 0; i < 16; i++)

  00034	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003b	eb 09		 jmp	 SHORT $LN7@SaveSpecia
$LN5@SaveSpecia:
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00040	83 c0 01	 add	 eax, 1
  00043	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@SaveSpecia:
  00046	83 7d f8 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0004a	73 2e		 jae	 SHORT $LN6@SaveSpecia
$LN10@SaveSpecia:

; 808  : 		WRITEFIXED(save_p, ht->vars[i]); //var[16]

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00051	89 45 f0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00054	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0005a	8b 55 fc	 mov	 edx, DWORD PTR _ht$[ebp]
  0005d	8b 4c 8a 10	 mov	 ecx, DWORD PTR [edx+ecx*4+16]
  00061	89 08		 mov	 DWORD PTR [eax], ecx
  00063	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00066	83 c0 04	 add	 eax, 4
  00069	89 45 f0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0006c	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0006f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00074	33 c0		 xor	 eax, eax
  00076	75 d4		 jne	 SHORT $LN10@SaveSpecia
  00078	eb c3		 jmp	 SHORT $LN5@SaveSpecia
$LN6@SaveSpecia:

; 809  : 	WRITEUINT32(save_p, SaveLine(ht->sourceline));

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0007f	89 45 ec	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00082	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  00085	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 _SaveLine
  0008e	83 c4 04	 add	 esp, 4
  00091	8b 55 ec	 mov	 edx, DWORD PTR _p_tmp$2[ebp]
  00094	89 02		 mov	 DWORD PTR [edx], eax
  00096	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00099	83 c0 04	 add	 eax, 4
  0009c	89 45 ec	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0009f	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000a2	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a7	33 c0		 xor	 eax, eax
  000a9	75 cf		 jne	 SHORT $LN6@SaveSpecia
$LN12@SaveSpecia:

; 810  : 	WRITEUINT32(save_p, SaveSector(ht->sector));

  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000b0	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000b3	8b 45 fc	 mov	 eax, DWORD PTR _ht$[ebp]
  000b6	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _SaveSector
  000bf	83 c4 04	 add	 esp, 4
  000c2	8b 55 e8	 mov	 edx, DWORD PTR _p_tmp$1[ebp]
  000c5	89 02		 mov	 DWORD PTR [edx], eax
  000c7	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000ca	83 c0 04	 add	 eax, 4
  000cd	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000d0	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000d3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000d8	33 c0		 xor	 eax, eax
  000da	75 cf		 jne	 SHORT $LN12@SaveSpecia

; 811  : }

  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
_SaveSpecialLevelThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SavePlayer
_TEXT	SEGMENT
_player$ = 8						; size = 4
_SavePlayer PROC					; COMDAT

; 792  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 793  : 	if (player) return (UINT32)(player - players);

  00009	83 7d 08 00	 cmp	 DWORD PTR _player$[ebp], 0
  0000d	74 12		 je	 SHORT $LN2@SavePlayer
  0000f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00012	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00017	99		 cdq
  00018	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0001d	f7 f9		 idiv	 ecx
  0001f	eb 03		 jmp	 SHORT $LN1@SavePlayer
$LN2@SavePlayer:

; 794  : 	return 0xFFFFFFFF;

  00021	83 c8 ff	 or	 eax, -1
$LN1@SavePlayer:

; 795  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_SavePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveLine
_TEXT	SEGMENT
_line$ = 8						; size = 4
_SaveLine PROC						; COMDAT

; 786  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 787  : 	if (line) return (UINT32)(line - lines);

  00009	83 7d 08 00	 cmp	 DWORD PTR _line$[ebp], 0
  0000d	74 13		 je	 SHORT $LN2@SaveLine
  0000f	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00012	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _lines
  00018	99		 cdq
  00019	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0001e	f7 f9		 idiv	 ecx
  00020	eb 03		 jmp	 SHORT $LN1@SaveLine
$LN2@SaveLine:

; 788  : 	return 0xFFFFFFFF;

  00022	83 c8 ff	 or	 eax, -1
$LN1@SaveLine:

; 789  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_SaveLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveSector
_TEXT	SEGMENT
_sector$ = 8						; size = 4
_SaveSector PROC					; COMDAT

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 781  : 	if (sector) return (UINT32)(sector - sectors);

  00009	83 7d 08 00	 cmp	 DWORD PTR _sector$[ebp], 0
  0000d	74 13		 je	 SHORT $LN2@SaveSector
  0000f	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00012	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _sectors
  00018	99		 cdq
  00019	b9 f8 00 00 00	 mov	 ecx, 248		; 000000f8H
  0001e	f7 f9		 idiv	 ecx
  00020	eb 03		 jmp	 SHORT $LN1@SaveSector
$LN2@SaveSector:

; 782  : 	return 0xFFFFFFFF;

  00022	83 c8 ff	 or	 eax, -1
$LN1@SaveSector:

; 783  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_SaveSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _SaveMobjnum
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_SaveMobjnum PROC					; COMDAT

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 775  : 	if (mobj) return mobj->mobjnum;

  00009	83 7d 08 00	 cmp	 DWORD PTR _mobj$[ebp], 0
  0000d	74 0b		 je	 SHORT $LN2@SaveMobjnu
  0000f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00012	8b 80 c8 00 00
	00		 mov	 eax, DWORD PTR [eax+200]
  00018	eb 02		 jmp	 SHORT $LN1@SaveMobjnu
$LN2@SaveMobjnu:

; 776  : 	return 0;

  0001a	33 c0		 xor	 eax, eax
$LN1@SaveMobjnu:

; 777  : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_SaveMobjnum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetUnArchiveWorld
_TEXT	SEGMENT
_tag$1 = -24						; size = 2
_diff2$ = -18						; size = 1
_diff$ = -17						; size = 1
_get$ = -16						; size = 4
_si$ = -12						; size = 4
_li$ = -8						; size = 4
_i$ = -4						; size = 2
_P_NetUnArchiveWorld PROC				; COMDAT

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 583  : 	UINT16 i;
; 584  : 	line_t *li;
; 585  : 	side_t *si;
; 586  : 	UINT8 *get;
; 587  : 	UINT8 diff, diff2;
; 588  : 
; 589  : 	get = save_p;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0000e	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN2@P_NetUnArc:

; 590  : 
; 591  : 	for (;;)
; 592  : 	{
; 593  : 		i = READUINT16(get);

  00011	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00014	66 8b 08	 mov	 cx, WORD PTR [eax]
  00017	66 89 4d fc	 mov	 WORD PTR _i$[ebp], cx
  0001b	8b 55 f0	 mov	 edx, DWORD PTR _get$[ebp]
  0001e	83 c2 02	 add	 edx, 2
  00021	89 55 f0	 mov	 DWORD PTR _get$[ebp], edx

; 594  : 
; 595  : 		if (i == 0xffff)

  00024	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00028	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0002d	75 05		 jne	 SHORT $LN8@P_NetUnArc

; 596  : 			break;

  0002f	e9 ed 02 00 00	 jmp	 $LN3@P_NetUnArc
$LN8@P_NetUnArc:

; 597  : 
; 598  : 		if (i > numsectors)

  00034	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00038	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsectors
  0003e	76 18		 jbe	 SHORT $LN9@P_NetUnArc

; 599  : 			I_Error("Invalid sector number %u from server (expected end at %"PRIdS")", i, numsectors);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR _numsectors
  00045	50		 push	 eax
  00046	0f b7 4d fc	 movzx	 ecx, WORD PTR _i$[ebp]
  0004a	51		 push	 ecx
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@HBJMEMDC@Invalid?5sector?5number?5?$CFu?5from?5s@
  00050	e8 00 00 00 00	 call	 _I_Error
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@P_NetUnArc:

; 600  : 
; 601  : 		diff = READUINT8(get);

  00058	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  0005b	8a 08		 mov	 cl, BYTE PTR [eax]
  0005d	88 4d ef	 mov	 BYTE PTR _diff$[ebp], cl
  00060	8b 55 f0	 mov	 edx, DWORD PTR _get$[ebp]
  00063	83 c2 01	 add	 edx, 1
  00066	89 55 f0	 mov	 DWORD PTR _get$[ebp], edx

; 602  : 		if (diff & SD_DIFF2)

  00069	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  0006d	83 e0 40	 and	 eax, 64			; 00000040H
  00070	74 13		 je	 SHORT $LN10@P_NetUnArc

; 603  : 			diff2 = READUINT8(get);

  00072	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00075	8a 08		 mov	 cl, BYTE PTR [eax]
  00077	88 4d ee	 mov	 BYTE PTR _diff2$[ebp], cl
  0007a	8b 55 f0	 mov	 edx, DWORD PTR _get$[ebp]
  0007d	83 c2 01	 add	 edx, 1
  00080	89 55 f0	 mov	 DWORD PTR _get$[ebp], edx
  00083	eb 04		 jmp	 SHORT $LN11@P_NetUnArc
$LN10@P_NetUnArc:

; 604  : 		else
; 605  : 			diff2 = 0;

  00085	c6 45 ee 00	 mov	 BYTE PTR _diff2$[ebp], 0
$LN11@P_NetUnArc:

; 606  : 
; 607  : 		if (diff & SD_FLOORHT)

  00089	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  0008d	83 e0 01	 and	 eax, 1
  00090	74 21		 je	 SHORT $LN12@P_NetUnArc

; 608  : 			sectors[i].floorheight = READFIXED(get);

  00092	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00096	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  0009c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  000a2	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  000a5	8b 00		 mov	 eax, DWORD PTR [eax]
  000a7	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
  000aa	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  000ad	83 c1 04	 add	 ecx, 4
  000b0	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN12@P_NetUnArc:

; 609  : 		if (diff & SD_CEILHT)

  000b3	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  000b7	83 e0 02	 and	 eax, 2
  000ba	74 22		 je	 SHORT $LN13@P_NetUnArc

; 610  : 			sectors[i].ceilingheight = READFIXED(get);

  000bc	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  000c0	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  000c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  000cf	8b 00		 mov	 eax, DWORD PTR [eax]
  000d1	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax
  000d5	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  000d8	83 c1 04	 add	 ecx, 4
  000db	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN13@P_NetUnArc:

; 611  : 		if (diff & SD_FLOORPIC)

  000de	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  000e2	83 e0 04	 and	 eax, 4
  000e5	74 2f		 je	 SHORT $LN14@P_NetUnArc

; 612  : 		{
; 613  : 			sectors[i].floorpic = P_AddLevelFlat((char *)get, levelflats);

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _levelflats
  000ec	50		 push	 eax
  000ed	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 _P_AddLevelFlat
  000f6	83 c4 08	 add	 esp, 8
  000f9	0f b7 55 fc	 movzx	 edx, WORD PTR _i$[ebp]
  000fd	69 ca f8 00 00
	00		 imul	 ecx, edx, 248
  00103	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  00109	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 614  : 			get += 8;

  0010d	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00110	83 c0 08	 add	 eax, 8
  00113	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN14@P_NetUnArc:

; 615  : 		}
; 616  : 		if (diff & SD_CEILPIC)

  00116	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  0011a	83 e0 08	 and	 eax, 8
  0011d	74 2f		 je	 SHORT $LN15@P_NetUnArc

; 617  : 		{
; 618  : 			sectors[i].ceilingpic = P_AddLevelFlat((char *)get, levelflats);

  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR _levelflats
  00124	50		 push	 eax
  00125	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 _P_AddLevelFlat
  0012e	83 c4 08	 add	 esp, 8
  00131	0f b7 55 fc	 movzx	 edx, WORD PTR _i$[ebp]
  00135	69 ca f8 00 00
	00		 imul	 ecx, edx, 248
  0013b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  00141	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 619  : 			get += 8;

  00145	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00148	83 c0 08	 add	 eax, 8
  0014b	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN15@P_NetUnArc:

; 620  : 		}
; 621  : 		if (diff & SD_LIGHT)

  0014e	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  00152	83 e0 10	 and	 eax, 16			; 00000010H
  00155	74 24		 je	 SHORT $LN16@P_NetUnArc

; 622  : 			sectors[i].lightlevel = READINT16(get);

  00157	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  0015b	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  00161	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  00167	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  0016a	66 8b 00	 mov	 ax, WORD PTR [eax]
  0016d	66 89 44 0a 10	 mov	 WORD PTR [edx+ecx+16], ax
  00172	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  00175	83 c1 02	 add	 ecx, 2
  00178	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN16@P_NetUnArc:

; 623  : 		if (diff & SD_SPECIAL)

  0017b	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  0017f	83 e0 20	 and	 eax, 32			; 00000020H
  00182	74 24		 je	 SHORT $LN17@P_NetUnArc

; 624  : 			sectors[i].special = READINT16(get);

  00184	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00188	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  0018e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  00194	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00197	66 8b 00	 mov	 ax, WORD PTR [eax]
  0019a	66 89 44 0a 12	 mov	 WORD PTR [edx+ecx+18], ax
  0019f	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  001a2	83 c1 02	 add	 ecx, 2
  001a5	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN17@P_NetUnArc:

; 625  : 
; 626  : 		if (diff2 & SD_FXOFFS)

  001a8	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  001ac	83 e0 01	 and	 eax, 1
  001af	74 22		 je	 SHORT $LN18@P_NetUnArc

; 627  : 			sectors[i].floor_xoffs = READFIXED(get);

  001b1	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  001b5	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  001bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  001c1	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  001c4	8b 00		 mov	 eax, DWORD PTR [eax]
  001c6	89 44 0a 50	 mov	 DWORD PTR [edx+ecx+80], eax
  001ca	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  001cd	83 c1 04	 add	 ecx, 4
  001d0	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN18@P_NetUnArc:

; 628  : 		if (diff2 & SD_FYOFFS)

  001d3	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  001d7	83 e0 02	 and	 eax, 2
  001da	74 22		 je	 SHORT $LN19@P_NetUnArc

; 629  : 			sectors[i].floor_yoffs = READFIXED(get);

  001dc	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  001e0	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  001e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  001ec	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  001ef	8b 00		 mov	 eax, DWORD PTR [eax]
  001f1	89 44 0a 54	 mov	 DWORD PTR [edx+ecx+84], eax
  001f5	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  001f8	83 c1 04	 add	 ecx, 4
  001fb	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN19@P_NetUnArc:

; 630  : 		if (diff2 & SD_CXOFFS)

  001fe	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00202	83 e0 04	 and	 eax, 4
  00205	74 22		 je	 SHORT $LN20@P_NetUnArc

; 631  : 			sectors[i].ceiling_xoffs = READFIXED(get);

  00207	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  0020b	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  00211	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  00217	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  0021a	8b 00		 mov	 eax, DWORD PTR [eax]
  0021c	89 44 0a 58	 mov	 DWORD PTR [edx+ecx+88], eax
  00220	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  00223	83 c1 04	 add	 ecx, 4
  00226	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN20@P_NetUnArc:

; 632  : 		if (diff2 & SD_CYOFFS)

  00229	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  0022d	83 e0 08	 and	 eax, 8
  00230	74 22		 je	 SHORT $LN21@P_NetUnArc

; 633  : 			sectors[i].ceiling_yoffs = READFIXED(get);

  00232	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00236	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  0023c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  00242	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00245	8b 00		 mov	 eax, DWORD PTR [eax]
  00247	89 44 0a 5c	 mov	 DWORD PTR [edx+ecx+92], eax
  0024b	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  0024e	83 c1 04	 add	 ecx, 4
  00251	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN21@P_NetUnArc:

; 634  : 		if (diff2 & SD_TAG)

  00254	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00258	83 e0 10	 and	 eax, 16			; 00000010H
  0025b	74 69		 je	 SHORT $LN22@P_NetUnArc

; 635  : 		{
; 636  : 			INT16 tag;
; 637  : 			tag = READINT16(get);

  0025d	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00260	66 8b 08	 mov	 cx, WORD PTR [eax]
  00263	66 89 4d e8	 mov	 WORD PTR _tag$1[ebp], cx
  00267	8b 55 f0	 mov	 edx, DWORD PTR _get$[ebp]
  0026a	83 c2 02	 add	 edx, 2
  0026d	89 55 f0	 mov	 DWORD PTR _get$[ebp], edx

; 638  : 			sectors[i].firsttag = READINT32(get);

  00270	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00274	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  0027a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  00280	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00283	8b 00		 mov	 eax, DWORD PTR [eax]
  00285	89 44 0a 1c	 mov	 DWORD PTR [edx+ecx+28], eax
  00289	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  0028c	83 c1 04	 add	 ecx, 4
  0028f	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx

; 639  : 			sectors[i].nexttag = READINT32(get);

  00292	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00296	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  0029c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  002a2	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  002a5	8b 00		 mov	 eax, DWORD PTR [eax]
  002a7	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax
  002ab	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  002ae	83 c1 04	 add	 ecx, 4
  002b1	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx

; 640  : 			P_ChangeSectorTag(i, tag);

  002b4	0f b7 45 e8	 movzx	 eax, WORD PTR _tag$1[ebp]
  002b8	50		 push	 eax
  002b9	0f b7 4d fc	 movzx	 ecx, WORD PTR _i$[ebp]
  002bd	51		 push	 ecx
  002be	e8 00 00 00 00	 call	 _P_ChangeSectorTag
  002c3	83 c4 08	 add	 esp, 8
$LN22@P_NetUnArc:

; 641  : 		}
; 642  : 		if (diff2 & SD_FLOORANG)

  002c6	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  002ca	83 e0 20	 and	 eax, 32			; 00000020H
  002cd	74 22		 je	 SHORT $LN23@P_NetUnArc

; 643  : 			sectors[i].floorpic_angle  = READANGLE(get);

  002cf	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  002d3	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  002d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  002df	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  002e2	8b 00		 mov	 eax, DWORD PTR [eax]
  002e4	89 44 0a 60	 mov	 DWORD PTR [edx+ecx+96], eax
  002e8	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  002eb	83 c1 04	 add	 ecx, 4
  002ee	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN23@P_NetUnArc:

; 644  : 		if (diff2 & SD_CEILANG)

  002f1	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  002f5	83 e0 40	 and	 eax, 64			; 00000040H
  002f8	74 22		 je	 SHORT $LN24@P_NetUnArc

; 645  : 			sectors[i].ceilingpic_angle = READANGLE(get);

  002fa	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  002fe	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  00304	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  0030a	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  0030d	8b 00		 mov	 eax, DWORD PTR [eax]
  0030f	89 44 0a 64	 mov	 DWORD PTR [edx+ecx+100], eax
  00313	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  00316	83 c1 04	 add	 ecx, 4
  00319	89 4d f0	 mov	 DWORD PTR _get$[ebp], ecx
$LN24@P_NetUnArc:

; 646  : 	}

  0031c	e9 f0 fc ff ff	 jmp	 $LN2@P_NetUnArc
$LN3@P_NetUnArc:
$LN5@P_NetUnArc:

; 647  : 
; 648  : 	for (;;)
; 649  : 	{
; 650  : 		i = READUINT16(get);

  00321	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00324	66 8b 08	 mov	 cx, WORD PTR [eax]
  00327	66 89 4d fc	 mov	 WORD PTR _i$[ebp], cx
  0032b	8b 55 f0	 mov	 edx, DWORD PTR _get$[ebp]
  0032e	83 c2 02	 add	 edx, 2
  00331	89 55 f0	 mov	 DWORD PTR _get$[ebp], edx

; 651  : 
; 652  : 		if (i == 0xffff)

  00334	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00338	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0033d	75 05		 jne	 SHORT $LN25@P_NetUnArc

; 653  : 			break;

  0033f	e9 c2 01 00 00	 jmp	 $LN6@P_NetUnArc
$LN25@P_NetUnArc:

; 654  : 		if (i > numlines)

  00344	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00348	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numlines
  0034e	76 12		 jbe	 SHORT $LN26@P_NetUnArc

; 655  : 			I_Error("Invalid line number %u from server", i);

  00350	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00354	50		 push	 eax
  00355	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KCKDBDPK@Invalid?5line?5number?5?$CFu?5from?5ser@
  0035a	e8 00 00 00 00	 call	 _I_Error
  0035f	83 c4 08	 add	 esp, 8
$LN26@P_NetUnArc:

; 656  : 
; 657  : 		diff = READUINT8(get);

  00362	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00365	8a 08		 mov	 cl, BYTE PTR [eax]
  00367	88 4d ef	 mov	 BYTE PTR _diff$[ebp], cl
  0036a	8b 55 f0	 mov	 edx, DWORD PTR _get$[ebp]
  0036d	83 c2 01	 add	 edx, 1
  00370	89 55 f0	 mov	 DWORD PTR _get$[ebp], edx

; 658  : 		li = &lines[i];

  00373	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00377	6b c8 4c	 imul	 ecx, eax, 76
  0037a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _lines
  00380	89 4d f8	 mov	 DWORD PTR _li$[ebp], ecx

; 659  : 
; 660  : 		if (diff & LD_DIFF2)

  00383	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  00387	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0038c	74 13		 je	 SHORT $LN27@P_NetUnArc

; 661  : 			diff2 = READUINT8(get);

  0038e	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00391	8a 08		 mov	 cl, BYTE PTR [eax]
  00393	88 4d ee	 mov	 BYTE PTR _diff2$[ebp], cl
  00396	8b 55 f0	 mov	 edx, DWORD PTR _get$[ebp]
  00399	83 c2 01	 add	 edx, 1
  0039c	89 55 f0	 mov	 DWORD PTR _get$[ebp], edx
  0039f	eb 04		 jmp	 SHORT $LN28@P_NetUnArc
$LN27@P_NetUnArc:

; 662  : 		else
; 663  : 			diff2 = 0;

  003a1	c6 45 ee 00	 mov	 BYTE PTR _diff2$[ebp], 0
$LN28@P_NetUnArc:

; 664  : 		if (diff & LD_FLAG)

  003a5	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  003a9	83 e0 01	 and	 eax, 1
  003ac	74 16		 je	 SHORT $LN29@P_NetUnArc

; 665  : 			li->flags = READINT16(get);

  003ae	8b 45 f8	 mov	 eax, DWORD PTR _li$[ebp]
  003b1	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  003b4	66 8b 11	 mov	 dx, WORD PTR [ecx]
  003b7	66 89 50 10	 mov	 WORD PTR [eax+16], dx
  003bb	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  003be	83 c0 02	 add	 eax, 2
  003c1	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN29@P_NetUnArc:

; 666  : 		if (diff & LD_SPECIAL)

  003c4	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  003c8	83 e0 02	 and	 eax, 2
  003cb	74 16		 je	 SHORT $LN30@P_NetUnArc

; 667  : 			li->special = READINT16(get);

  003cd	8b 45 f8	 mov	 eax, DWORD PTR _li$[ebp]
  003d0	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  003d3	66 8b 11	 mov	 dx, WORD PTR [ecx]
  003d6	66 89 50 12	 mov	 WORD PTR [eax+18], dx
  003da	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  003dd	83 c0 02	 add	 eax, 2
  003e0	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN30@P_NetUnArc:

; 668  : 
; 669  : 		si = &sides[li->sidenum[0]];

  003e3	b8 02 00 00 00	 mov	 eax, 2
  003e8	6b c8 00	 imul	 ecx, eax, 0
  003eb	8b 55 f8	 mov	 edx, DWORD PTR _li$[ebp]
  003ee	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  003f3	6b c8 1c	 imul	 ecx, eax, 28
  003f6	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _sides
  003fc	89 4d f4	 mov	 DWORD PTR _si$[ebp], ecx

; 670  : 		if (diff & LD_S1TEXOFF)

  003ff	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  00403	83 e0 08	 and	 eax, 8
  00406	74 13		 je	 SHORT $LN31@P_NetUnArc

; 671  : 			si->textureoffset = READFIXED(get);

  00408	8b 45 f4	 mov	 eax, DWORD PTR _si$[ebp]
  0040b	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  0040e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00410	89 10		 mov	 DWORD PTR [eax], edx
  00412	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00415	83 c0 04	 add	 eax, 4
  00418	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN31@P_NetUnArc:

; 672  : 		if (diff & LD_S1TOPTEX)

  0041b	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  0041f	83 e0 10	 and	 eax, 16			; 00000010H
  00422	74 14		 je	 SHORT $LN32@P_NetUnArc

; 673  : 			si->toptexture = READINT32(get);

  00424	8b 45 f4	 mov	 eax, DWORD PTR _si$[ebp]
  00427	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  0042a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0042c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0042f	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00432	83 c0 04	 add	 eax, 4
  00435	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN32@P_NetUnArc:

; 674  : 		if (diff & LD_S1BOTTEX)

  00438	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  0043c	83 e0 20	 and	 eax, 32			; 00000020H
  0043f	74 14		 je	 SHORT $LN33@P_NetUnArc

; 675  : 			si->bottomtexture = READINT32(get);

  00441	8b 45 f4	 mov	 eax, DWORD PTR _si$[ebp]
  00444	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  00447	8b 11		 mov	 edx, DWORD PTR [ecx]
  00449	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0044c	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  0044f	83 c0 04	 add	 eax, 4
  00452	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN33@P_NetUnArc:

; 676  : 		if (diff & LD_S1MIDTEX)

  00455	0f b6 45 ef	 movzx	 eax, BYTE PTR _diff$[ebp]
  00459	83 e0 40	 and	 eax, 64			; 00000040H
  0045c	74 14		 je	 SHORT $LN34@P_NetUnArc

; 677  : 			si->midtexture = READINT32(get);

  0045e	8b 45 f4	 mov	 eax, DWORD PTR _si$[ebp]
  00461	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  00464	8b 11		 mov	 edx, DWORD PTR [ecx]
  00466	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00469	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  0046c	83 c0 04	 add	 eax, 4
  0046f	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN34@P_NetUnArc:

; 678  : 
; 679  : 		si = &sides[li->sidenum[1]];

  00472	b8 02 00 00 00	 mov	 eax, 2
  00477	c1 e0 00	 shl	 eax, 0
  0047a	8b 4d f8	 mov	 ecx, DWORD PTR _li$[ebp]
  0047d	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00482	6b c2 1c	 imul	 eax, edx, 28
  00485	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sides
  0048b	89 45 f4	 mov	 DWORD PTR _si$[ebp], eax

; 680  : 		if (diff2 & LD_S2TEXOFF)

  0048e	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00492	83 e0 01	 and	 eax, 1
  00495	74 13		 je	 SHORT $LN35@P_NetUnArc

; 681  : 			si->textureoffset = READFIXED(get);

  00497	8b 45 f4	 mov	 eax, DWORD PTR _si$[ebp]
  0049a	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  0049d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0049f	89 10		 mov	 DWORD PTR [eax], edx
  004a1	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  004a4	83 c0 04	 add	 eax, 4
  004a7	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN35@P_NetUnArc:

; 682  : 		if (diff2 & LD_S2TOPTEX)

  004aa	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  004ae	83 e0 02	 and	 eax, 2
  004b1	74 14		 je	 SHORT $LN36@P_NetUnArc

; 683  : 			si->toptexture = READINT32(get);

  004b3	8b 45 f4	 mov	 eax, DWORD PTR _si$[ebp]
  004b6	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  004b9	8b 11		 mov	 edx, DWORD PTR [ecx]
  004bb	89 50 08	 mov	 DWORD PTR [eax+8], edx
  004be	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  004c1	83 c0 04	 add	 eax, 4
  004c4	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN36@P_NetUnArc:

; 684  : 		if (diff2 & LD_S2BOTTEX)

  004c7	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  004cb	83 e0 04	 and	 eax, 4
  004ce	74 14		 je	 SHORT $LN37@P_NetUnArc

; 685  : 			si->bottomtexture = READINT32(get);

  004d0	8b 45 f4	 mov	 eax, DWORD PTR _si$[ebp]
  004d3	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  004d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d8	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  004db	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  004de	83 c0 04	 add	 eax, 4
  004e1	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN37@P_NetUnArc:

; 686  : 		if (diff2 & LD_S2MIDTEX)

  004e4	0f b6 45 ee	 movzx	 eax, BYTE PTR _diff2$[ebp]
  004e8	83 e0 08	 and	 eax, 8
  004eb	74 14		 je	 SHORT $LN38@P_NetUnArc

; 687  : 			si->midtexture = READINT32(get);

  004ed	8b 45 f4	 mov	 eax, DWORD PTR _si$[ebp]
  004f0	8b 4d f0	 mov	 ecx, DWORD PTR _get$[ebp]
  004f3	8b 11		 mov	 edx, DWORD PTR [ecx]
  004f5	89 50 10	 mov	 DWORD PTR [eax+16], edx
  004f8	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  004fb	83 c0 04	 add	 eax, 4
  004fe	89 45 f0	 mov	 DWORD PTR _get$[ebp], eax
$LN38@P_NetUnArc:

; 688  : 	}

  00501	e9 1b fe ff ff	 jmp	 $LN5@P_NetUnArc
$LN6@P_NetUnArc:

; 689  : 
; 690  : 	save_p = get;

  00506	8b 45 f0	 mov	 eax, DWORD PTR _get$[ebp]
  00509	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 691  : }

  0050e	5f		 pop	 edi
  0050f	5e		 pop	 esi
  00510	5b		 pop	 ebx
  00511	8b e5		 mov	 esp, ebp
  00513	5d		 pop	 ebp
  00514	c3		 ret	 0
_P_NetUnArchiveWorld ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetArchiveWorld
_TEXT	SEGMENT
_p_tmp$1 = -168						; size = 4
_p_tmp$2 = -164						; size = 4
_p_tmp$3 = -160						; size = 4
_p_tmp$4 = -156						; size = 4
_p_tmp$5 = -152						; size = 4
_p_tmp$6 = -148						; size = 4
_p_tmp$7 = -144						; size = 4
_p_tmp$8 = -140						; size = 4
_p_tmp$9 = -136						; size = 4
_p_tmp$10 = -132					; size = 4
_p_tmp$11 = -128					; size = 4
_p_tmp$12 = -124					; size = 4
_p_tmp$13 = -120					; size = 4
_p_tmp$14 = -116					; size = 4
_p_tmp$15 = -112					; size = 4
_p_tmp$16 = -108					; size = 4
_p_tmp$17 = -104					; size = 4
_p_tmp$18 = -100					; size = 4
_p_tmp$19 = -96						; size = 4
_p_tmp$20 = -92						; size = 4
_p_tmp$21 = -88						; size = 4
_p_tmp$22 = -84						; size = 4
_p_tmp$23 = -80						; size = 4
_p_tmp$24 = -76						; size = 4
_p_tmp$25 = -72						; size = 4
_p_tmp$26 = -68						; size = 4
_p_tmp$27 = -64						; size = 4
_p_tmp$28 = -60						; size = 4
_p_tmp$29 = -56						; size = 4
_p_tmp$30 = -52						; size = 4
_p_tmp$31 = -48						; size = 4
_diff2$ = -42						; size = 1
_diff$ = -41						; size = 1
_ss$ = -40						; size = 4
_mld$ = -36						; size = 4
_msd$ = -32						; size = 4
_ms$ = -28						; size = 4
_put$ = -24						; size = 4
_si$ = -20						; size = 4
_li$ = -16						; size = 4
_statline$ = -12					; size = 4
_statsec$ = -8						; size = 4
_i$ = -4						; size = 4
_P_NetArchiveWorld PROC					; COMDAT

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 397  : 	size_t i;
; 398  : 	INT32 statsec = 0, statline = 0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _statsec$[ebp], 0
  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _statline$[ebp], 0

; 399  : 	const line_t *li = lines;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR _lines
  0001f	89 45 f0	 mov	 DWORD PTR _li$[ebp], eax

; 400  : 	const side_t *si;
; 401  : 	UINT8 *put = save_p;

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00027	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax

; 402  : 
; 403  : 	// reload the map just to see difference
; 404  : 	const mapsector_t *ms;
; 405  : 	const mapsidedef_t *msd;
; 406  : 	const maplinedef_t *mld;
; 407  : 	const sector_t *ss = sectors;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR _sectors
  0002f	89 45 d8	 mov	 DWORD PTR _ss$[ebp], eax

; 408  : 	UINT8 diff, diff2;
; 409  : 
; 410  : 	ms = W_CacheLumpNum(lastloadedmaplumpnum+ML_SECTORS, PU_CACHE);

  00032	6a 65		 push	 101			; 00000065H
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastloadedmaplumpnum
  00039	83 c0 08	 add	 eax, 8
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _W_CacheLumpNum
  00042	83 c4 08	 add	 esp, 8
  00045	89 45 e4	 mov	 DWORD PTR _ms$[ebp], eax

; 411  : 
; 412  : 	for (i = 0; i < numsectors; i++, ss++, ms++)

  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004f	eb 1e		 jmp	 SHORT $LN4@P_NetArchi
$LN2@P_NetArchi:
  00051	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00054	83 c0 01	 add	 eax, 1
  00057	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  0005a	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  0005d	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  00063	89 4d d8	 mov	 DWORD PTR _ss$[ebp], ecx
  00066	8b 55 e4	 mov	 edx, DWORD PTR _ms$[ebp]
  00069	83 c2 1a	 add	 edx, 26			; 0000001aH
  0006c	89 55 e4	 mov	 DWORD PTR _ms$[ebp], edx
$LN4@P_NetArchi:
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00072	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsectors
  00078	0f 83 8a 04 00
	00		 jae	 $LN3@P_NetArchi

; 413  : 	{
; 414  : 		diff = diff2 = 0;

  0007e	c6 45 d6 00	 mov	 BYTE PTR _diff2$[ebp], 0
  00082	8a 45 d6	 mov	 al, BYTE PTR _diff2$[ebp]
  00085	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al

; 415  : 		if (ss->floorheight != SHORT(ms->floorheight)<<FRACBITS)

  00088	8b 45 e4	 mov	 eax, DWORD PTR _ms$[ebp]
  0008b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0008e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00091	8b 55 d8	 mov	 edx, DWORD PTR _ss$[ebp]
  00094	39 0a		 cmp	 DWORD PTR [edx], ecx
  00096	74 0a		 je	 SHORT $LN101@P_NetArchi

; 416  : 			diff |= SD_FLOORHT;

  00098	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  0009c	83 c8 01	 or	 eax, 1
  0009f	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN101@P_NetArchi:

; 417  : 		if (ss->ceilingheight != SHORT(ms->ceilingheight)<<FRACBITS)

  000a2	8b 45 e4	 mov	 eax, DWORD PTR _ms$[ebp]
  000a5	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000a9	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000ac	8b 55 d8	 mov	 edx, DWORD PTR _ss$[ebp]
  000af	39 4a 04	 cmp	 DWORD PTR [edx+4], ecx
  000b2	74 0a		 je	 SHORT $LN102@P_NetArchi

; 418  : 			diff |= SD_CEILHT;

  000b4	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  000b8	83 c8 02	 or	 eax, 2
  000bb	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN102@P_NetArchi:

; 419  : 		//
; 420  : 		// flats
; 421  : 		//
; 422  : 		// P_AddLevelFlat should not add but just return the number
; 423  : 		if (ss->floorpic != P_AddLevelFlat(ms->floorpic, levelflats))

  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR _levelflats
  000c3	50		 push	 eax
  000c4	8b 4d e4	 mov	 ecx, DWORD PTR _ms$[ebp]
  000c7	83 c1 04	 add	 ecx, 4
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 _P_AddLevelFlat
  000d0	83 c4 08	 add	 esp, 8
  000d3	8b 55 d8	 mov	 edx, DWORD PTR _ss$[ebp]
  000d6	39 42 08	 cmp	 DWORD PTR [edx+8], eax
  000d9	74 0a		 je	 SHORT $LN103@P_NetArchi

; 424  : 			diff |= SD_FLOORPIC;

  000db	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  000df	83 c8 04	 or	 eax, 4
  000e2	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN103@P_NetArchi:

; 425  : 		if (ss->ceilingpic != P_AddLevelFlat(ms->ceilingpic, levelflats))

  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _levelflats
  000ea	50		 push	 eax
  000eb	8b 4d e4	 mov	 ecx, DWORD PTR _ms$[ebp]
  000ee	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 _P_AddLevelFlat
  000f7	83 c4 08	 add	 esp, 8
  000fa	8b 55 d8	 mov	 edx, DWORD PTR _ss$[ebp]
  000fd	39 42 0c	 cmp	 DWORD PTR [edx+12], eax
  00100	74 0a		 je	 SHORT $LN104@P_NetArchi

; 426  : 			diff |= SD_CEILPIC;

  00102	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00106	83 c8 08	 or	 eax, 8
  00109	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN104@P_NetArchi:

; 427  : 
; 428  : 		if (ss->lightlevel != SHORT(ms->lightlevel))

  0010c	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  0010f	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00113	8b 55 e4	 mov	 edx, DWORD PTR _ms$[ebp]
  00116	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  0011a	3b c8		 cmp	 ecx, eax
  0011c	74 0a		 je	 SHORT $LN105@P_NetArchi

; 429  : 			diff |= SD_LIGHT;

  0011e	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00122	83 c8 10	 or	 eax, 16			; 00000010H
  00125	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN105@P_NetArchi:

; 430  : 		if (ss->special != SHORT(ms->special))

  00128	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  0012b	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  0012f	8b 55 e4	 mov	 edx, DWORD PTR _ms$[ebp]
  00132	0f bf 42 16	 movsx	 eax, WORD PTR [edx+22]
  00136	3b c8		 cmp	 ecx, eax
  00138	74 0a		 je	 SHORT $LN106@P_NetArchi

; 431  : 			diff |= SD_SPECIAL;

  0013a	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  0013e	83 c8 20	 or	 eax, 32			; 00000020H
  00141	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN106@P_NetArchi:

; 432  : 
; 433  : 		/// \todo this makes Flat Alignment (linetype 7) increase the savegame size!
; 434  : 		if (ss->floor_xoffs != 0)

  00144	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  00147	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0014b	74 0a		 je	 SHORT $LN107@P_NetArchi

; 435  : 			diff2 |= SD_FXOFFS;

  0014d	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00151	83 c8 01	 or	 eax, 1
  00154	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN107@P_NetArchi:

; 436  : 		if (ss->floor_yoffs != 0)

  00157	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  0015a	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  0015e	74 0a		 je	 SHORT $LN108@P_NetArchi

; 437  : 			diff2 |= SD_FYOFFS;

  00160	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00164	83 c8 02	 or	 eax, 2
  00167	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN108@P_NetArchi:

; 438  : 		if (ss->ceiling_xoffs != 0)

  0016a	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  0016d	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00171	74 0a		 je	 SHORT $LN109@P_NetArchi

; 439  : 			diff2 |= SD_CXOFFS;

  00173	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00177	83 c8 04	 or	 eax, 4
  0017a	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN109@P_NetArchi:

; 440  : 		if (ss->ceiling_yoffs != 0)

  0017d	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  00180	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00184	74 0a		 je	 SHORT $LN110@P_NetArchi

; 441  : 			diff2 |= SD_CYOFFS;

  00186	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  0018a	83 c8 08	 or	 eax, 8
  0018d	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN110@P_NetArchi:

; 442  : 		if (ss->floorpic_angle != 0)

  00190	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  00193	83 78 60 00	 cmp	 DWORD PTR [eax+96], 0
  00197	74 0a		 je	 SHORT $LN111@P_NetArchi

; 443  : 			diff2 |= SD_FLOORANG;

  00199	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  0019d	83 c8 20	 or	 eax, 32			; 00000020H
  001a0	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN111@P_NetArchi:

; 444  : 		if (ss->ceilingpic_angle != 0)

  001a3	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  001a6	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  001aa	74 0a		 je	 SHORT $LN112@P_NetArchi

; 445  : 			diff2 |= SD_CEILANG;

  001ac	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  001b0	83 c8 40	 or	 eax, 64			; 00000040H
  001b3	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN112@P_NetArchi:

; 446  : 
; 447  : 		if (ss->tag != SHORT(ms->tag))

  001b6	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  001b9	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  001bd	8b 55 e4	 mov	 edx, DWORD PTR _ms$[ebp]
  001c0	0f bf 42 18	 movsx	 eax, WORD PTR [edx+24]
  001c4	3b c8		 cmp	 ecx, eax
  001c6	74 0a		 je	 SHORT $LN113@P_NetArchi

; 448  : 			diff2 |= SD_TAG;

  001c8	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  001cc	83 c8 10	 or	 eax, 16			; 00000010H
  001cf	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN113@P_NetArchi:

; 449  : 
; 450  : 		if (diff2)

  001d2	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  001d6	85 c0		 test	 eax, eax
  001d8	74 0a		 je	 SHORT $LN114@P_NetArchi

; 451  : 			diff |= SD_DIFF2;

  001da	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  001de	83 c8 40	 or	 eax, 64			; 00000040H
  001e1	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN114@P_NetArchi:

; 452  : 
; 453  : 		if (diff)

  001e4	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  001e8	85 c0		 test	 eax, eax
  001ea	0f 84 13 03 00
	00		 je	 $LN51@P_NetArchi

; 454  : 		{
; 455  : 			statsec++;

  001f0	8b 45 f8	 mov	 eax, DWORD PTR _statsec$[ebp]
  001f3	83 c0 01	 add	 eax, 1
  001f6	89 45 f8	 mov	 DWORD PTR _statsec$[ebp], eax
$LN7@P_NetArchi:

; 456  : 
; 457  : 			WRITEUINT16(put, i);

  001f9	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  001fc	89 45 d0	 mov	 DWORD PTR _p_tmp$31[ebp], eax
  001ff	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$31[ebp]
  00202	66 8b 4d fc	 mov	 cx, WORD PTR _i$[ebp]
  00206	66 89 08	 mov	 WORD PTR [eax], cx
  00209	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$31[ebp]
  0020c	83 c0 02	 add	 eax, 2
  0020f	89 45 d0	 mov	 DWORD PTR _p_tmp$31[ebp], eax
  00212	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$31[ebp]
  00215	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00218	33 c0		 xor	 eax, eax
  0021a	75 dd		 jne	 SHORT $LN7@P_NetArchi
$LN6@P_NetArchi:

; 458  : 			WRITEUINT8(put, diff);

  0021c	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0021f	89 45 cc	 mov	 DWORD PTR _p_tmp$30[ebp], eax
  00222	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  00225	8a 4d d7	 mov	 cl, BYTE PTR _diff$[ebp]
  00228	88 08		 mov	 BYTE PTR [eax], cl
  0022a	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  0022d	83 c0 01	 add	 eax, 1
  00230	89 45 cc	 mov	 DWORD PTR _p_tmp$30[ebp], eax
  00233	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  00236	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00239	33 c0		 xor	 eax, eax
  0023b	75 df		 jne	 SHORT $LN6@P_NetArchi

; 459  : 			if (diff & SD_DIFF2)

  0023d	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00241	83 e0 40	 and	 eax, 64			; 00000040H
  00244	74 21		 je	 SHORT $LN12@P_NetArchi
$LN13@P_NetArchi:

; 460  : 				WRITEUINT8(put, diff2);

  00246	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00249	89 45 c8	 mov	 DWORD PTR _p_tmp$29[ebp], eax
  0024c	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  0024f	8a 4d d6	 mov	 cl, BYTE PTR _diff2$[ebp]
  00252	88 08		 mov	 BYTE PTR [eax], cl
  00254	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  00257	83 c0 01	 add	 eax, 1
  0025a	89 45 c8	 mov	 DWORD PTR _p_tmp$29[ebp], eax
  0025d	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  00260	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00263	33 c0		 xor	 eax, eax
  00265	75 df		 jne	 SHORT $LN13@P_NetArchi
$LN12@P_NetArchi:

; 461  : 			if (diff & SD_FLOORHT)

  00267	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  0026b	83 e0 01	 and	 eax, 1
  0026e	74 23		 je	 SHORT $LN15@P_NetArchi
$LN16@P_NetArchi:

; 462  : 				WRITEFIXED(put, ss->floorheight);

  00270	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00273	89 45 c4	 mov	 DWORD PTR _p_tmp$28[ebp], eax
  00276	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  00279	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  0027c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0027e	89 10		 mov	 DWORD PTR [eax], edx
  00280	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  00283	83 c0 04	 add	 eax, 4
  00286	89 45 c4	 mov	 DWORD PTR _p_tmp$28[ebp], eax
  00289	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  0028c	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  0028f	33 c0		 xor	 eax, eax
  00291	75 dd		 jne	 SHORT $LN16@P_NetArchi
$LN15@P_NetArchi:

; 463  : 			if (diff & SD_CEILHT)

  00293	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00297	83 e0 02	 and	 eax, 2
  0029a	74 24		 je	 SHORT $LN18@P_NetArchi
$LN19@P_NetArchi:

; 464  : 				WRITEFIXED(put, ss->ceilingheight);

  0029c	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0029f	89 45 c0	 mov	 DWORD PTR _p_tmp$27[ebp], eax
  002a2	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  002a5	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  002a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002ab	89 10		 mov	 DWORD PTR [eax], edx
  002ad	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  002b0	83 c0 04	 add	 eax, 4
  002b3	89 45 c0	 mov	 DWORD PTR _p_tmp$27[ebp], eax
  002b6	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  002b9	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  002bc	33 c0		 xor	 eax, eax
  002be	75 dc		 jne	 SHORT $LN19@P_NetArchi
$LN18@P_NetArchi:

; 465  : 			if (diff & SD_FLOORPIC)

  002c0	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  002c4	83 e0 04	 and	 eax, 4
  002c7	74 27		 je	 SHORT $LN119@P_NetArchi

; 466  : 				WRITEMEM(put, levelflats[ss->floorpic].name, 8);

  002c9	6a 08		 push	 8
  002cb	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  002ce	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002d1	c1 e1 05	 shl	 ecx, 5
  002d4	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _levelflats
  002da	51		 push	 ecx
  002db	8b 55 e8	 mov	 edx, DWORD PTR _put$[ebp]
  002de	52		 push	 edx
  002df	e8 00 00 00 00	 call	 _memcpy
  002e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e7	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  002ea	83 c0 08	 add	 eax, 8
  002ed	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
$LN119@P_NetArchi:

; 467  : 			if (diff & SD_CEILPIC)

  002f0	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  002f4	83 e0 08	 and	 eax, 8
  002f7	74 27		 je	 SHORT $LN120@P_NetArchi

; 468  : 				WRITEMEM(put, levelflats[ss->ceilingpic].name, 8);

  002f9	6a 08		 push	 8
  002fb	8b 45 d8	 mov	 eax, DWORD PTR _ss$[ebp]
  002fe	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00301	c1 e1 05	 shl	 ecx, 5
  00304	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _levelflats
  0030a	51		 push	 ecx
  0030b	8b 55 e8	 mov	 edx, DWORD PTR _put$[ebp]
  0030e	52		 push	 edx
  0030f	e8 00 00 00 00	 call	 _memcpy
  00314	83 c4 0c	 add	 esp, 12			; 0000000cH
  00317	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0031a	83 c0 08	 add	 eax, 8
  0031d	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
$LN120@P_NetArchi:

; 469  : 			if (diff & SD_LIGHT)

  00320	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00324	83 e0 10	 and	 eax, 16			; 00000010H
  00327	74 26		 je	 SHORT $LN21@P_NetArchi
$LN22@P_NetArchi:

; 470  : 				WRITEINT16(put, ss->lightlevel);

  00329	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0032c	89 45 bc	 mov	 DWORD PTR _p_tmp$26[ebp], eax
  0032f	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  00332	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  00335	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  00339	66 89 10	 mov	 WORD PTR [eax], dx
  0033c	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  0033f	83 c0 02	 add	 eax, 2
  00342	89 45 bc	 mov	 DWORD PTR _p_tmp$26[ebp], eax
  00345	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  00348	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  0034b	33 c0		 xor	 eax, eax
  0034d	75 da		 jne	 SHORT $LN22@P_NetArchi
$LN21@P_NetArchi:

; 471  : 			if (diff & SD_SPECIAL)

  0034f	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00353	83 e0 20	 and	 eax, 32			; 00000020H
  00356	74 26		 je	 SHORT $LN24@P_NetArchi
$LN25@P_NetArchi:

; 472  : 				WRITEINT16(put, ss->special);

  00358	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0035b	89 45 b8	 mov	 DWORD PTR _p_tmp$25[ebp], eax
  0035e	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  00361	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  00364	66 8b 51 12	 mov	 dx, WORD PTR [ecx+18]
  00368	66 89 10	 mov	 WORD PTR [eax], dx
  0036b	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  0036e	83 c0 02	 add	 eax, 2
  00371	89 45 b8	 mov	 DWORD PTR _p_tmp$25[ebp], eax
  00374	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  00377	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  0037a	33 c0		 xor	 eax, eax
  0037c	75 da		 jne	 SHORT $LN25@P_NetArchi
$LN24@P_NetArchi:

; 473  : 			if (diff2 & SD_FXOFFS)

  0037e	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00382	83 e0 01	 and	 eax, 1
  00385	74 24		 je	 SHORT $LN27@P_NetArchi
$LN28@P_NetArchi:

; 474  : 				WRITEFIXED(put, ss->floor_xoffs);

  00387	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0038a	89 45 b4	 mov	 DWORD PTR _p_tmp$24[ebp], eax
  0038d	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  00390	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  00393	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00396	89 10		 mov	 DWORD PTR [eax], edx
  00398	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  0039b	83 c0 04	 add	 eax, 4
  0039e	89 45 b4	 mov	 DWORD PTR _p_tmp$24[ebp], eax
  003a1	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  003a4	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  003a7	33 c0		 xor	 eax, eax
  003a9	75 dc		 jne	 SHORT $LN28@P_NetArchi
$LN27@P_NetArchi:

; 475  : 			if (diff2 & SD_FYOFFS)

  003ab	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  003af	83 e0 02	 and	 eax, 2
  003b2	74 24		 je	 SHORT $LN30@P_NetArchi
$LN31@P_NetArchi:

; 476  : 				WRITEFIXED(put, ss->floor_yoffs);

  003b4	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  003b7	89 45 b0	 mov	 DWORD PTR _p_tmp$23[ebp], eax
  003ba	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  003bd	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  003c0	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  003c3	89 10		 mov	 DWORD PTR [eax], edx
  003c5	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  003c8	83 c0 04	 add	 eax, 4
  003cb	89 45 b0	 mov	 DWORD PTR _p_tmp$23[ebp], eax
  003ce	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  003d1	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  003d4	33 c0		 xor	 eax, eax
  003d6	75 dc		 jne	 SHORT $LN31@P_NetArchi
$LN30@P_NetArchi:

; 477  : 			if (diff2 & SD_CXOFFS)

  003d8	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  003dc	83 e0 04	 and	 eax, 4
  003df	74 24		 je	 SHORT $LN33@P_NetArchi
$LN34@P_NetArchi:

; 478  : 				WRITEFIXED(put, ss->ceiling_xoffs);

  003e1	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  003e4	89 45 ac	 mov	 DWORD PTR _p_tmp$22[ebp], eax
  003e7	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  003ea	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  003ed	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  003f0	89 10		 mov	 DWORD PTR [eax], edx
  003f2	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  003f5	83 c0 04	 add	 eax, 4
  003f8	89 45 ac	 mov	 DWORD PTR _p_tmp$22[ebp], eax
  003fb	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  003fe	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00401	33 c0		 xor	 eax, eax
  00403	75 dc		 jne	 SHORT $LN34@P_NetArchi
$LN33@P_NetArchi:

; 479  : 			if (diff2 & SD_CYOFFS)

  00405	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00409	83 e0 08	 and	 eax, 8
  0040c	74 24		 je	 SHORT $LN36@P_NetArchi
$LN37@P_NetArchi:

; 480  : 				WRITEFIXED(put, ss->ceiling_yoffs);

  0040e	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00411	89 45 a8	 mov	 DWORD PTR _p_tmp$21[ebp], eax
  00414	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  00417	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  0041a	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0041d	89 10		 mov	 DWORD PTR [eax], edx
  0041f	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  00422	83 c0 04	 add	 eax, 4
  00425	89 45 a8	 mov	 DWORD PTR _p_tmp$21[ebp], eax
  00428	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  0042b	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  0042e	33 c0		 xor	 eax, eax
  00430	75 dc		 jne	 SHORT $LN37@P_NetArchi
$LN36@P_NetArchi:

; 481  : 			if (diff2 & SD_TAG)

  00432	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00436	83 e0 10	 and	 eax, 16			; 00000010H
  00439	74 6e		 je	 SHORT $LN45@P_NetArchi
$LN40@P_NetArchi:

; 482  : 			{
; 483  : 				WRITEINT16(put, ss->tag);

  0043b	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0043e	89 45 a4	 mov	 DWORD PTR _p_tmp$20[ebp], eax
  00441	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  00444	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  00447	66 8b 51 14	 mov	 dx, WORD PTR [ecx+20]
  0044b	66 89 10	 mov	 WORD PTR [eax], dx
  0044e	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  00451	83 c0 02	 add	 eax, 2
  00454	89 45 a4	 mov	 DWORD PTR _p_tmp$20[ebp], eax
  00457	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  0045a	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  0045d	33 c0		 xor	 eax, eax
  0045f	75 da		 jne	 SHORT $LN40@P_NetArchi
$LN39@P_NetArchi:

; 484  : 				WRITEINT32(put, ss->firsttag);

  00461	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00464	89 45 a0	 mov	 DWORD PTR _p_tmp$19[ebp], eax
  00467	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  0046a	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  0046d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00470	89 10		 mov	 DWORD PTR [eax], edx
  00472	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  00475	83 c0 04	 add	 eax, 4
  00478	89 45 a0	 mov	 DWORD PTR _p_tmp$19[ebp], eax
  0047b	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  0047e	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00481	33 c0		 xor	 eax, eax
  00483	75 dc		 jne	 SHORT $LN39@P_NetArchi
$LN42@P_NetArchi:

; 485  : 				WRITEINT32(put, ss->nexttag);

  00485	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00488	89 45 9c	 mov	 DWORD PTR _p_tmp$18[ebp], eax
  0048b	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  0048e	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  00491	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00494	89 10		 mov	 DWORD PTR [eax], edx
  00496	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  00499	83 c0 04	 add	 eax, 4
  0049c	89 45 9c	 mov	 DWORD PTR _p_tmp$18[ebp], eax
  0049f	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  004a2	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  004a5	33 c0		 xor	 eax, eax
  004a7	75 dc		 jne	 SHORT $LN42@P_NetArchi
$LN45@P_NetArchi:

; 486  : 			}
; 487  : 			if (diff2 & SD_FLOORANG)

  004a9	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  004ad	83 e0 20	 and	 eax, 32			; 00000020H
  004b0	74 24		 je	 SHORT $LN48@P_NetArchi
$LN49@P_NetArchi:

; 488  : 				WRITEANGLE(put, ss->floorpic_angle);

  004b2	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  004b5	89 45 98	 mov	 DWORD PTR _p_tmp$17[ebp], eax
  004b8	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  004bb	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  004be	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  004c1	89 10		 mov	 DWORD PTR [eax], edx
  004c3	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  004c6	83 c0 04	 add	 eax, 4
  004c9	89 45 98	 mov	 DWORD PTR _p_tmp$17[ebp], eax
  004cc	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  004cf	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  004d2	33 c0		 xor	 eax, eax
  004d4	75 dc		 jne	 SHORT $LN49@P_NetArchi
$LN48@P_NetArchi:

; 489  : 			if (diff2 & SD_CEILANG)

  004d6	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  004da	83 e0 40	 and	 eax, 64			; 00000040H
  004dd	74 24		 je	 SHORT $LN51@P_NetArchi
$LN52@P_NetArchi:

; 490  : 				WRITEANGLE(put, ss->ceilingpic_angle);

  004df	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  004e2	89 45 94	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  004e5	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  004e8	8b 4d d8	 mov	 ecx, DWORD PTR _ss$[ebp]
  004eb	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  004ee	89 10		 mov	 DWORD PTR [eax], edx
  004f0	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  004f3	83 c0 04	 add	 eax, 4
  004f6	89 45 94	 mov	 DWORD PTR _p_tmp$16[ebp], eax
  004f9	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  004fc	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  004ff	33 c0		 xor	 eax, eax
  00501	75 dc		 jne	 SHORT $LN52@P_NetArchi
$LN51@P_NetArchi:

; 491  : 		}
; 492  : 	}

  00503	e9 49 fb ff ff	 jmp	 $LN2@P_NetArchi
$LN3@P_NetArchi:

; 493  : 
; 494  : 	WRITEUINT16(put, 0xffff);

  00508	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0050b	89 45 90	 mov	 DWORD PTR _p_tmp$15[ebp], eax
  0050e	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00513	8b 4d 90	 mov	 ecx, DWORD PTR _p_tmp$15[ebp]
  00516	66 89 01	 mov	 WORD PTR [ecx], ax
  00519	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  0051c	83 c0 02	 add	 eax, 2
  0051f	89 45 90	 mov	 DWORD PTR _p_tmp$15[ebp], eax
  00522	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  00525	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00528	33 c0		 xor	 eax, eax
  0052a	75 dc		 jne	 SHORT $LN3@P_NetArchi

; 495  : 
; 496  : 	mld = W_CacheLumpNum(lastloadedmaplumpnum+ML_LINEDEFS, PU_CACHE);

  0052c	6a 65		 push	 101			; 00000065H
  0052e	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastloadedmaplumpnum
  00533	83 c0 02	 add	 eax, 2
  00536	50		 push	 eax
  00537	e8 00 00 00 00	 call	 _W_CacheLumpNum
  0053c	83 c4 08	 add	 esp, 8
  0053f	89 45 dc	 mov	 DWORD PTR _mld$[ebp], eax

; 497  : 	msd = W_CacheLumpNum(lastloadedmaplumpnum+ML_SIDEDEFS, PU_CACHE);

  00542	6a 65		 push	 101			; 00000065H
  00544	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastloadedmaplumpnum
  00549	83 c0 03	 add	 eax, 3
  0054c	50		 push	 eax
  0054d	e8 00 00 00 00	 call	 _W_CacheLumpNum
  00552	83 c4 08	 add	 esp, 8
  00555	89 45 e0	 mov	 DWORD PTR _msd$[ebp], eax

; 498  : 	// do lines
; 499  : 	for (i = 0; i < numlines; i++, mld++, li++)

  00558	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0055f	eb 1b		 jmp	 SHORT $LN58@P_NetArchi
$LN56@P_NetArchi:
  00561	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00564	83 c0 01	 add	 eax, 1
  00567	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  0056a	8b 4d dc	 mov	 ecx, DWORD PTR _mld$[ebp]
  0056d	83 c1 0e	 add	 ecx, 14			; 0000000eH
  00570	89 4d dc	 mov	 DWORD PTR _mld$[ebp], ecx
  00573	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  00576	83 c2 4c	 add	 edx, 76			; 0000004cH
  00579	89 55 f0	 mov	 DWORD PTR _li$[ebp], edx
$LN58@P_NetArchi:
  0057c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0057f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numlines
  00585	0f 83 0c 07 00
	00		 jae	 $LN57@P_NetArchi

; 500  : 	{
; 501  : 		diff = diff2 = 0;

  0058b	c6 45 d6 00	 mov	 BYTE PTR _diff2$[ebp], 0
  0058f	8a 45 d6	 mov	 al, BYTE PTR _diff2$[ebp]
  00592	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al

; 502  : 
; 503  : 		if (li->special != SHORT(mld->special))

  00595	8b 45 f0	 mov	 eax, DWORD PTR _li$[ebp]
  00598	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  0059c	8b 55 dc	 mov	 edx, DWORD PTR _mld$[ebp]
  0059f	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  005a3	3b c8		 cmp	 ecx, eax
  005a5	74 0a		 je	 SHORT $LN130@P_NetArchi

; 504  : 			diff |= LD_SPECIAL;

  005a7	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  005ab	83 c8 02	 or	 eax, 2
  005ae	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN130@P_NetArchi:

; 505  : 
; 506  : 		if (li->sidenum[0] != 0xffff)

  005b1	b8 02 00 00 00	 mov	 eax, 2
  005b6	6b c8 00	 imul	 ecx, eax, 0
  005b9	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  005bc	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  005c1	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  005c6	0f 84 c7 01 00
	00		 je	 $LN135@P_NetArchi

; 507  : 		{
; 508  : 			si = &sides[li->sidenum[0]];

  005cc	b8 02 00 00 00	 mov	 eax, 2
  005d1	6b c8 00	 imul	 ecx, eax, 0
  005d4	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  005d7	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  005dc	6b c8 1c	 imul	 ecx, eax, 28
  005df	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _sides
  005e5	89 4d ec	 mov	 DWORD PTR _si$[ebp], ecx

; 509  : 			if (si->textureoffset != SHORT(msd[li->sidenum[0]].textureoffset)<<FRACBITS)

  005e8	b8 02 00 00 00	 mov	 eax, 2
  005ed	6b c8 00	 imul	 ecx, eax, 0
  005f0	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  005f3	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  005f8	6b c8 1e	 imul	 ecx, eax, 30
  005fb	8b 55 e0	 mov	 edx, DWORD PTR _msd$[ebp]
  005fe	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  00602	c1 e0 10	 shl	 eax, 16			; 00000010H
  00605	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00608	39 01		 cmp	 DWORD PTR [ecx], eax
  0060a	74 0a		 je	 SHORT $LN132@P_NetArchi

; 510  : 				diff |= LD_S1TEXOFF;

  0060c	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00610	83 c8 08	 or	 eax, 8
  00613	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN132@P_NetArchi:

; 511  : 			//SoM: 4/1/2000: Some textures are colormaps. Don't worry about invalid textures.
; 512  : 			if (R_CheckTextureNumForName(msd[li->sidenum[0]].toptexture, li->sidenum[0]) != -1
; 513  : 				&& si->toptexture != R_TextureNumForName(msd[li->sidenum[0]].toptexture, li->sidenum[0]))

  00616	b8 02 00 00 00	 mov	 eax, 2
  0061b	6b c8 00	 imul	 ecx, eax, 0
  0061e	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  00621	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00626	50		 push	 eax
  00627	b9 02 00 00 00	 mov	 ecx, 2
  0062c	6b d1 00	 imul	 edx, ecx, 0
  0062f	8b 45 f0	 mov	 eax, DWORD PTR _li$[ebp]
  00632	0f b7 4c 10 16	 movzx	 ecx, WORD PTR [eax+edx+22]
  00637	6b d1 1e	 imul	 edx, ecx, 30
  0063a	8b 45 e0	 mov	 eax, DWORD PTR _msd$[ebp]
  0063d	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00641	51		 push	 ecx
  00642	e8 00 00 00 00	 call	 _R_CheckTextureNumForName
  00647	83 c4 08	 add	 esp, 8
  0064a	83 f8 ff	 cmp	 eax, -1
  0064d	74 46		 je	 SHORT $LN133@P_NetArchi
  0064f	b8 02 00 00 00	 mov	 eax, 2
  00654	6b c8 00	 imul	 ecx, eax, 0
  00657	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  0065a	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  0065f	50		 push	 eax
  00660	b9 02 00 00 00	 mov	 ecx, 2
  00665	6b d1 00	 imul	 edx, ecx, 0
  00668	8b 45 f0	 mov	 eax, DWORD PTR _li$[ebp]
  0066b	0f b7 4c 10 16	 movzx	 ecx, WORD PTR [eax+edx+22]
  00670	6b d1 1e	 imul	 edx, ecx, 30
  00673	8b 45 e0	 mov	 eax, DWORD PTR _msd$[ebp]
  00676	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0067a	51		 push	 ecx
  0067b	e8 00 00 00 00	 call	 _R_TextureNumForName
  00680	83 c4 08	 add	 esp, 8
  00683	8b 55 ec	 mov	 edx, DWORD PTR _si$[ebp]
  00686	39 42 08	 cmp	 DWORD PTR [edx+8], eax
  00689	74 0a		 je	 SHORT $LN133@P_NetArchi

; 514  : 				diff |= LD_S1TOPTEX;

  0068b	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  0068f	83 c8 10	 or	 eax, 16			; 00000010H
  00692	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN133@P_NetArchi:

; 515  : 			if (R_CheckTextureNumForName(msd[li->sidenum[0]].bottomtexture, li->sidenum[0]) != -1
; 516  : 				&& si->bottomtexture != R_TextureNumForName(msd[li->sidenum[0]].bottomtexture, li->sidenum[0]))

  00695	b8 02 00 00 00	 mov	 eax, 2
  0069a	6b c8 00	 imul	 ecx, eax, 0
  0069d	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  006a0	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  006a5	50		 push	 eax
  006a6	b9 02 00 00 00	 mov	 ecx, 2
  006ab	6b d1 00	 imul	 edx, ecx, 0
  006ae	8b 45 f0	 mov	 eax, DWORD PTR _li$[ebp]
  006b1	0f b7 4c 10 16	 movzx	 ecx, WORD PTR [eax+edx+22]
  006b6	6b d1 1e	 imul	 edx, ecx, 30
  006b9	8b 45 e0	 mov	 eax, DWORD PTR _msd$[ebp]
  006bc	8d 4c 10 0c	 lea	 ecx, DWORD PTR [eax+edx+12]
  006c0	51		 push	 ecx
  006c1	e8 00 00 00 00	 call	 _R_CheckTextureNumForName
  006c6	83 c4 08	 add	 esp, 8
  006c9	83 f8 ff	 cmp	 eax, -1
  006cc	74 46		 je	 SHORT $LN134@P_NetArchi
  006ce	b8 02 00 00 00	 mov	 eax, 2
  006d3	6b c8 00	 imul	 ecx, eax, 0
  006d6	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  006d9	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  006de	50		 push	 eax
  006df	b9 02 00 00 00	 mov	 ecx, 2
  006e4	6b d1 00	 imul	 edx, ecx, 0
  006e7	8b 45 f0	 mov	 eax, DWORD PTR _li$[ebp]
  006ea	0f b7 4c 10 16	 movzx	 ecx, WORD PTR [eax+edx+22]
  006ef	6b d1 1e	 imul	 edx, ecx, 30
  006f2	8b 45 e0	 mov	 eax, DWORD PTR _msd$[ebp]
  006f5	8d 4c 10 0c	 lea	 ecx, DWORD PTR [eax+edx+12]
  006f9	51		 push	 ecx
  006fa	e8 00 00 00 00	 call	 _R_TextureNumForName
  006ff	83 c4 08	 add	 esp, 8
  00702	8b 55 ec	 mov	 edx, DWORD PTR _si$[ebp]
  00705	39 42 0c	 cmp	 DWORD PTR [edx+12], eax
  00708	74 0a		 je	 SHORT $LN134@P_NetArchi

; 517  : 				diff |= LD_S1BOTTEX;

  0070a	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  0070e	83 c8 20	 or	 eax, 32			; 00000020H
  00711	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN134@P_NetArchi:

; 518  : 			if (R_CheckTextureNumForName(msd[li->sidenum[0]].midtexture, li->sidenum[0]) != -1
; 519  : 				&& si->midtexture != R_TextureNumForName(msd[li->sidenum[0]].midtexture, li->sidenum[0]))

  00714	b8 02 00 00 00	 mov	 eax, 2
  00719	6b c8 00	 imul	 ecx, eax, 0
  0071c	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  0071f	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00724	50		 push	 eax
  00725	b9 02 00 00 00	 mov	 ecx, 2
  0072a	6b d1 00	 imul	 edx, ecx, 0
  0072d	8b 45 f0	 mov	 eax, DWORD PTR _li$[ebp]
  00730	0f b7 4c 10 16	 movzx	 ecx, WORD PTR [eax+edx+22]
  00735	6b d1 1e	 imul	 edx, ecx, 30
  00738	8b 45 e0	 mov	 eax, DWORD PTR _msd$[ebp]
  0073b	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  0073f	51		 push	 ecx
  00740	e8 00 00 00 00	 call	 _R_CheckTextureNumForName
  00745	83 c4 08	 add	 esp, 8
  00748	83 f8 ff	 cmp	 eax, -1
  0074b	74 46		 je	 SHORT $LN135@P_NetArchi
  0074d	b8 02 00 00 00	 mov	 eax, 2
  00752	6b c8 00	 imul	 ecx, eax, 0
  00755	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  00758	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  0075d	50		 push	 eax
  0075e	b9 02 00 00 00	 mov	 ecx, 2
  00763	6b d1 00	 imul	 edx, ecx, 0
  00766	8b 45 f0	 mov	 eax, DWORD PTR _li$[ebp]
  00769	0f b7 4c 10 16	 movzx	 ecx, WORD PTR [eax+edx+22]
  0076e	6b d1 1e	 imul	 edx, ecx, 30
  00771	8b 45 e0	 mov	 eax, DWORD PTR _msd$[ebp]
  00774	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  00778	51		 push	 ecx
  00779	e8 00 00 00 00	 call	 _R_TextureNumForName
  0077e	83 c4 08	 add	 esp, 8
  00781	8b 55 ec	 mov	 edx, DWORD PTR _si$[ebp]
  00784	39 42 10	 cmp	 DWORD PTR [edx+16], eax
  00787	74 0a		 je	 SHORT $LN135@P_NetArchi

; 520  : 				diff |= LD_S1MIDTEX;

  00789	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  0078d	83 c8 40	 or	 eax, 64			; 00000040H
  00790	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN135@P_NetArchi:

; 521  : 		}
; 522  : 		if (li->sidenum[1] != 0xffff)

  00793	b8 02 00 00 00	 mov	 eax, 2
  00798	c1 e0 00	 shl	 eax, 0
  0079b	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  0079e	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  007a3	81 fa ff ff 00
	00		 cmp	 edx, 65535		; 0000ffffH
  007a9	0f 84 db 01 00
	00		 je	 $LN141@P_NetArchi

; 523  : 		{
; 524  : 			si = &sides[li->sidenum[1]];

  007af	b8 02 00 00 00	 mov	 eax, 2
  007b4	c1 e0 00	 shl	 eax, 0
  007b7	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  007ba	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  007bf	6b c2 1c	 imul	 eax, edx, 28
  007c2	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sides
  007c8	89 45 ec	 mov	 DWORD PTR _si$[ebp], eax

; 525  : 			if (si->textureoffset != SHORT(msd[li->sidenum[1]].textureoffset)<<FRACBITS)

  007cb	b8 02 00 00 00	 mov	 eax, 2
  007d0	c1 e0 00	 shl	 eax, 0
  007d3	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  007d6	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  007db	6b c2 1e	 imul	 eax, edx, 30
  007de	8b 4d e0	 mov	 ecx, DWORD PTR _msd$[ebp]
  007e1	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  007e5	c1 e2 10	 shl	 edx, 16			; 00000010H
  007e8	8b 45 ec	 mov	 eax, DWORD PTR _si$[ebp]
  007eb	39 10		 cmp	 DWORD PTR [eax], edx
  007ed	74 0a		 je	 SHORT $LN137@P_NetArchi

; 526  : 				diff2 |= LD_S2TEXOFF;

  007ef	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  007f3	83 c8 01	 or	 eax, 1
  007f6	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN137@P_NetArchi:

; 527  : 			if (R_CheckTextureNumForName(msd[li->sidenum[1]].toptexture, li->sidenum[1]) != -1
; 528  : 				&& si->toptexture != R_TextureNumForName(msd[li->sidenum[1]].toptexture, li->sidenum[1]))

  007f9	b8 02 00 00 00	 mov	 eax, 2
  007fe	c1 e0 00	 shl	 eax, 0
  00801	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00804	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00809	52		 push	 edx
  0080a	b8 02 00 00 00	 mov	 eax, 2
  0080f	c1 e0 00	 shl	 eax, 0
  00812	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00815	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  0081a	6b c2 1e	 imul	 eax, edx, 30
  0081d	8b 4d e0	 mov	 ecx, DWORD PTR _msd$[ebp]
  00820	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00824	52		 push	 edx
  00825	e8 00 00 00 00	 call	 _R_CheckTextureNumForName
  0082a	83 c4 08	 add	 esp, 8
  0082d	83 f8 ff	 cmp	 eax, -1
  00830	74 46		 je	 SHORT $LN138@P_NetArchi
  00832	b8 02 00 00 00	 mov	 eax, 2
  00837	c1 e0 00	 shl	 eax, 0
  0083a	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  0083d	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00842	52		 push	 edx
  00843	b8 02 00 00 00	 mov	 eax, 2
  00848	c1 e0 00	 shl	 eax, 0
  0084b	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  0084e	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00853	6b c2 1e	 imul	 eax, edx, 30
  00856	8b 4d e0	 mov	 ecx, DWORD PTR _msd$[ebp]
  00859	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0085d	52		 push	 edx
  0085e	e8 00 00 00 00	 call	 _R_TextureNumForName
  00863	83 c4 08	 add	 esp, 8
  00866	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00869	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  0086c	74 0a		 je	 SHORT $LN138@P_NetArchi

; 529  : 				diff2 |= LD_S2TOPTEX;

  0086e	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00872	83 c8 02	 or	 eax, 2
  00875	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN138@P_NetArchi:

; 530  : 			if (R_CheckTextureNumForName(msd[li->sidenum[1]].bottomtexture, li->sidenum[1]) != -1
; 531  : 				&& si->bottomtexture != R_TextureNumForName(msd[li->sidenum[1]].bottomtexture, li->sidenum[1]))

  00878	b8 02 00 00 00	 mov	 eax, 2
  0087d	c1 e0 00	 shl	 eax, 0
  00880	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00883	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00888	52		 push	 edx
  00889	b8 02 00 00 00	 mov	 eax, 2
  0088e	c1 e0 00	 shl	 eax, 0
  00891	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00894	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00899	6b c2 1e	 imul	 eax, edx, 30
  0089c	8b 4d e0	 mov	 ecx, DWORD PTR _msd$[ebp]
  0089f	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  008a3	52		 push	 edx
  008a4	e8 00 00 00 00	 call	 _R_CheckTextureNumForName
  008a9	83 c4 08	 add	 esp, 8
  008ac	83 f8 ff	 cmp	 eax, -1
  008af	74 46		 je	 SHORT $LN139@P_NetArchi
  008b1	b8 02 00 00 00	 mov	 eax, 2
  008b6	c1 e0 00	 shl	 eax, 0
  008b9	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  008bc	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  008c1	52		 push	 edx
  008c2	b8 02 00 00 00	 mov	 eax, 2
  008c7	c1 e0 00	 shl	 eax, 0
  008ca	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  008cd	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  008d2	6b c2 1e	 imul	 eax, edx, 30
  008d5	8b 4d e0	 mov	 ecx, DWORD PTR _msd$[ebp]
  008d8	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  008dc	52		 push	 edx
  008dd	e8 00 00 00 00	 call	 _R_TextureNumForName
  008e2	83 c4 08	 add	 esp, 8
  008e5	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  008e8	39 41 0c	 cmp	 DWORD PTR [ecx+12], eax
  008eb	74 0a		 je	 SHORT $LN139@P_NetArchi

; 532  : 				diff2 |= LD_S2BOTTEX;

  008ed	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  008f1	83 c8 04	 or	 eax, 4
  008f4	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN139@P_NetArchi:

; 533  : 			if (R_CheckTextureNumForName(msd[li->sidenum[1]].midtexture, li->sidenum[1]) != -1
; 534  : 				&& si->midtexture != R_TextureNumForName(msd[li->sidenum[1]].midtexture, li->sidenum[1]))

  008f7	b8 02 00 00 00	 mov	 eax, 2
  008fc	c1 e0 00	 shl	 eax, 0
  008ff	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00902	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00907	52		 push	 edx
  00908	b8 02 00 00 00	 mov	 eax, 2
  0090d	c1 e0 00	 shl	 eax, 0
  00910	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00913	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00918	6b c2 1e	 imul	 eax, edx, 30
  0091b	8b 4d e0	 mov	 ecx, DWORD PTR _msd$[ebp]
  0091e	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00922	52		 push	 edx
  00923	e8 00 00 00 00	 call	 _R_CheckTextureNumForName
  00928	83 c4 08	 add	 esp, 8
  0092b	83 f8 ff	 cmp	 eax, -1
  0092e	74 46		 je	 SHORT $LN140@P_NetArchi
  00930	b8 02 00 00 00	 mov	 eax, 2
  00935	c1 e0 00	 shl	 eax, 0
  00938	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  0093b	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00940	52		 push	 edx
  00941	b8 02 00 00 00	 mov	 eax, 2
  00946	c1 e0 00	 shl	 eax, 0
  00949	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  0094c	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00951	6b c2 1e	 imul	 eax, edx, 30
  00954	8b 4d e0	 mov	 ecx, DWORD PTR _msd$[ebp]
  00957	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0095b	52		 push	 edx
  0095c	e8 00 00 00 00	 call	 _R_TextureNumForName
  00961	83 c4 08	 add	 esp, 8
  00964	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00967	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  0096a	74 0a		 je	 SHORT $LN140@P_NetArchi

; 535  : 				diff2 |= LD_S2MIDTEX;

  0096c	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00970	83 c8 08	 or	 eax, 8
  00973	88 45 d6	 mov	 BYTE PTR _diff2$[ebp], al
$LN140@P_NetArchi:

; 536  : 			if (diff2)

  00976	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  0097a	85 c0		 test	 eax, eax
  0097c	74 0c		 je	 SHORT $LN141@P_NetArchi

; 537  : 				diff |= LD_DIFF2;

  0097e	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00982	0d 80 00 00 00	 or	 eax, 128		; 00000080H
  00987	88 45 d7	 mov	 BYTE PTR _diff$[ebp], al
$LN141@P_NetArchi:

; 538  : 		}
; 539  : 
; 540  : 		if (diff)

  0098a	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  0098e	85 c0		 test	 eax, eax
  00990	0f 84 fc 02 00
	00		 je	 $LN96@P_NetArchi

; 541  : 		{
; 542  : 			statline++;

  00996	8b 45 f4	 mov	 eax, DWORD PTR _statline$[ebp]
  00999	83 c0 01	 add	 eax, 1
  0099c	89 45 f4	 mov	 DWORD PTR _statline$[ebp], eax
$LN61@P_NetArchi:

; 543  : 			WRITEINT16(put, i);

  0099f	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  009a2	89 45 8c	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  009a5	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  009a8	66 8b 4d fc	 mov	 cx, WORD PTR _i$[ebp]
  009ac	66 89 08	 mov	 WORD PTR [eax], cx
  009af	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  009b2	83 c0 02	 add	 eax, 2
  009b5	89 45 8c	 mov	 DWORD PTR _p_tmp$14[ebp], eax
  009b8	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  009bb	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  009be	33 c0		 xor	 eax, eax
  009c0	75 dd		 jne	 SHORT $LN61@P_NetArchi
$LN60@P_NetArchi:

; 544  : 			WRITEUINT8(put, diff);

  009c2	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  009c5	89 45 88	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  009c8	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  009cb	8a 4d d7	 mov	 cl, BYTE PTR _diff$[ebp]
  009ce	88 08		 mov	 BYTE PTR [eax], cl
  009d0	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  009d3	83 c0 01	 add	 eax, 1
  009d6	89 45 88	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  009d9	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  009dc	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  009df	33 c0		 xor	 eax, eax
  009e1	75 df		 jne	 SHORT $LN60@P_NetArchi

; 545  : 			if (diff & LD_DIFF2)

  009e3	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  009e7	25 80 00 00 00	 and	 eax, 128		; 00000080H
  009ec	74 21		 je	 SHORT $LN66@P_NetArchi
$LN67@P_NetArchi:

; 546  : 				WRITEUINT8(put, diff2);

  009ee	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  009f1	89 45 84	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  009f4	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  009f7	8a 4d d6	 mov	 cl, BYTE PTR _diff2$[ebp]
  009fa	88 08		 mov	 BYTE PTR [eax], cl
  009fc	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  009ff	83 c0 01	 add	 eax, 1
  00a02	89 45 84	 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00a05	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00a08	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00a0b	33 c0		 xor	 eax, eax
  00a0d	75 df		 jne	 SHORT $LN67@P_NetArchi
$LN66@P_NetArchi:

; 547  : 			if (diff & LD_FLAG)

  00a0f	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00a13	83 e0 01	 and	 eax, 1
  00a16	74 26		 je	 SHORT $LN69@P_NetArchi
$LN70@P_NetArchi:

; 548  : 				WRITEINT16(put, li->flags);

  00a18	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00a1b	89 45 80	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00a1e	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00a21	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00a24	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  00a28	66 89 10	 mov	 WORD PTR [eax], dx
  00a2b	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00a2e	83 c0 02	 add	 eax, 2
  00a31	89 45 80	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00a34	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00a37	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00a3a	33 c0		 xor	 eax, eax
  00a3c	75 da		 jne	 SHORT $LN70@P_NetArchi
$LN69@P_NetArchi:

; 549  : 			if (diff & LD_SPECIAL)

  00a3e	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00a42	83 e0 02	 and	 eax, 2
  00a45	74 35		 je	 SHORT $LN72@P_NetArchi
$LN73@P_NetArchi:

; 550  : 				WRITEINT16(put, li->special);

  00a47	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00a4a	89 85 7c ff ff
	ff		 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00a50	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00a56	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00a59	66 8b 51 12	 mov	 dx, WORD PTR [ecx+18]
  00a5d	66 89 10	 mov	 WORD PTR [eax], dx
  00a60	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00a66	83 c0 02	 add	 eax, 2
  00a69	89 85 7c ff ff
	ff		 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00a6f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00a75	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00a78	33 c0		 xor	 eax, eax
  00a7a	75 cb		 jne	 SHORT $LN73@P_NetArchi
$LN72@P_NetArchi:

; 551  : 
; 552  : 			si = &sides[li->sidenum[0]];

  00a7c	b8 02 00 00 00	 mov	 eax, 2
  00a81	6b c8 00	 imul	 ecx, eax, 0
  00a84	8b 55 f0	 mov	 edx, DWORD PTR _li$[ebp]
  00a87	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00a8c	6b c8 1c	 imul	 ecx, eax, 28
  00a8f	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _sides
  00a95	89 4d ec	 mov	 DWORD PTR _si$[ebp], ecx

; 553  : 			if (diff & LD_S1TEXOFF)

  00a98	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00a9c	83 e0 08	 and	 eax, 8
  00a9f	74 32		 je	 SHORT $LN75@P_NetArchi
$LN76@P_NetArchi:

; 554  : 				WRITEFIXED(put, si->textureoffset);

  00aa1	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00aa4	89 85 78 ff ff
	ff		 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00aaa	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00ab0	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00ab3	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ab5	89 10		 mov	 DWORD PTR [eax], edx
  00ab7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00abd	83 c0 04	 add	 eax, 4
  00ac0	89 85 78 ff ff
	ff		 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00ac6	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00acc	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00acf	33 c0		 xor	 eax, eax
  00ad1	75 ce		 jne	 SHORT $LN76@P_NetArchi
$LN75@P_NetArchi:

; 555  : 			if (diff & LD_S1TOPTEX)

  00ad3	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00ad7	83 e0 10	 and	 eax, 16			; 00000010H
  00ada	74 33		 je	 SHORT $LN78@P_NetArchi
$LN79@P_NetArchi:

; 556  : 				WRITEINT32(put, si->toptexture);

  00adc	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00adf	89 85 74 ff ff
	ff		 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00ae5	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00aeb	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00aee	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00af1	89 10		 mov	 DWORD PTR [eax], edx
  00af3	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00af9	83 c0 04	 add	 eax, 4
  00afc	89 85 74 ff ff
	ff		 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00b02	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00b08	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00b0b	33 c0		 xor	 eax, eax
  00b0d	75 cd		 jne	 SHORT $LN79@P_NetArchi
$LN78@P_NetArchi:

; 557  : 			if (diff & LD_S1BOTTEX)

  00b0f	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00b13	83 e0 20	 and	 eax, 32			; 00000020H
  00b16	74 33		 je	 SHORT $LN81@P_NetArchi
$LN82@P_NetArchi:

; 558  : 				WRITEINT32(put, si->bottomtexture);

  00b18	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00b1b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00b21	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00b27	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00b2a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00b2d	89 10		 mov	 DWORD PTR [eax], edx
  00b2f	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00b35	83 c0 04	 add	 eax, 4
  00b38	89 85 70 ff ff
	ff		 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00b3e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00b44	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00b47	33 c0		 xor	 eax, eax
  00b49	75 cd		 jne	 SHORT $LN82@P_NetArchi
$LN81@P_NetArchi:

; 559  : 			if (diff & LD_S1MIDTEX)

  00b4b	0f b6 45 d7	 movzx	 eax, BYTE PTR _diff$[ebp]
  00b4f	83 e0 40	 and	 eax, 64			; 00000040H
  00b52	74 33		 je	 SHORT $LN84@P_NetArchi
$LN85@P_NetArchi:

; 560  : 				WRITEINT32(put, si->midtexture);

  00b54	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00b57	89 85 6c ff ff
	ff		 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00b5d	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00b63	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00b66	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00b69	89 10		 mov	 DWORD PTR [eax], edx
  00b6b	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00b71	83 c0 04	 add	 eax, 4
  00b74	89 85 6c ff ff
	ff		 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00b7a	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00b80	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00b83	33 c0		 xor	 eax, eax
  00b85	75 cd		 jne	 SHORT $LN85@P_NetArchi
$LN84@P_NetArchi:

; 561  : 
; 562  : 			si = &sides[li->sidenum[1]];

  00b87	b8 02 00 00 00	 mov	 eax, 2
  00b8c	c1 e0 00	 shl	 eax, 0
  00b8f	8b 4d f0	 mov	 ecx, DWORD PTR _li$[ebp]
  00b92	0f b7 54 01 16	 movzx	 edx, WORD PTR [ecx+eax+22]
  00b97	6b c2 1c	 imul	 eax, edx, 28
  00b9a	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sides
  00ba0	89 45 ec	 mov	 DWORD PTR _si$[ebp], eax

; 563  : 			if (diff2 & LD_S2TEXOFF)

  00ba3	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00ba7	83 e0 01	 and	 eax, 1
  00baa	74 32		 je	 SHORT $LN87@P_NetArchi
$LN88@P_NetArchi:

; 564  : 				WRITEFIXED(put, si->textureoffset);

  00bac	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00baf	89 85 68 ff ff
	ff		 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00bb5	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00bbb	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00bbe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00bc0	89 10		 mov	 DWORD PTR [eax], edx
  00bc2	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00bc8	83 c0 04	 add	 eax, 4
  00bcb	89 85 68 ff ff
	ff		 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00bd1	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00bd7	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00bda	33 c0		 xor	 eax, eax
  00bdc	75 ce		 jne	 SHORT $LN88@P_NetArchi
$LN87@P_NetArchi:

; 565  : 			if (diff2 & LD_S2TOPTEX)

  00bde	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00be2	83 e0 02	 and	 eax, 2
  00be5	74 33		 je	 SHORT $LN90@P_NetArchi
$LN91@P_NetArchi:

; 566  : 				WRITEINT32(put, si->toptexture);

  00be7	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00bea	89 85 64 ff ff
	ff		 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00bf0	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00bf6	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00bf9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00bfc	89 10		 mov	 DWORD PTR [eax], edx
  00bfe	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00c04	83 c0 04	 add	 eax, 4
  00c07	89 85 64 ff ff
	ff		 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00c0d	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00c13	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00c16	33 c0		 xor	 eax, eax
  00c18	75 cd		 jne	 SHORT $LN91@P_NetArchi
$LN90@P_NetArchi:

; 567  : 			if (diff2 & LD_S2BOTTEX)

  00c1a	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00c1e	83 e0 04	 and	 eax, 4
  00c21	74 33		 je	 SHORT $LN93@P_NetArchi
$LN94@P_NetArchi:

; 568  : 				WRITEINT32(put, si->bottomtexture);

  00c23	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00c26	89 85 60 ff ff
	ff		 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00c2c	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00c32	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00c35	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00c38	89 10		 mov	 DWORD PTR [eax], edx
  00c3a	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00c40	83 c0 04	 add	 eax, 4
  00c43	89 85 60 ff ff
	ff		 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00c49	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00c4f	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00c52	33 c0		 xor	 eax, eax
  00c54	75 cd		 jne	 SHORT $LN94@P_NetArchi
$LN93@P_NetArchi:

; 569  : 			if (diff2 & LD_S2MIDTEX)

  00c56	0f b6 45 d6	 movzx	 eax, BYTE PTR _diff2$[ebp]
  00c5a	83 e0 08	 and	 eax, 8
  00c5d	74 33		 je	 SHORT $LN96@P_NetArchi
$LN97@P_NetArchi:

; 570  : 				WRITEINT32(put, si->midtexture);

  00c5f	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00c62	89 85 5c ff ff
	ff		 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00c68	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00c6e	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  00c71	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00c74	89 10		 mov	 DWORD PTR [eax], edx
  00c76	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00c7c	83 c0 04	 add	 eax, 4
  00c7f	89 85 5c ff ff
	ff		 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00c85	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00c8b	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00c8e	33 c0		 xor	 eax, eax
  00c90	75 cd		 jne	 SHORT $LN97@P_NetArchi
$LN96@P_NetArchi:

; 571  : 		}
; 572  : 	}

  00c92	e9 ca f8 ff ff	 jmp	 $LN56@P_NetArchi
$LN57@P_NetArchi:

; 573  : 	WRITEUINT16(put, 0xffff);

  00c97	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00c9a	89 85 58 ff ff
	ff		 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00ca0	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00ca5	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$1[ebp]
  00cab	66 89 01	 mov	 WORD PTR [ecx], ax
  00cae	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00cb4	83 c0 02	 add	 eax, 2
  00cb7	89 85 58 ff ff
	ff		 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00cbd	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00cc3	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  00cc6	33 c0		 xor	 eax, eax
  00cc8	75 cd		 jne	 SHORT $LN57@P_NetArchi

; 574  : 
; 575  : 	save_p = put;

  00cca	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00ccd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 576  : }

  00cd2	5f		 pop	 edi
  00cd3	5e		 pop	 esi
  00cd4	5b		 pop	 ebx
  00cd5	8b e5		 mov	 esp, ebp
  00cd7	5d		 pop	 ebp
  00cd8	c3		 ret	 0
_P_NetArchiveWorld ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetUnArchivePlayers
_TEXT	SEGMENT
_flags$ = -12						; size = 2
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_P_NetUnArchivePlayers PROC				; COMDAT

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 232  : 	INT32 i, j;
; 233  : 	UINT16 flags;
; 234  : 
; 235  : 	for (i = 0; i < MAXPLAYERS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@P_NetUnArc
$LN2@P_NetUnArc:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_NetUnArc:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0001f	0f 8d fd 0a 00
	00		 jge	 $LN3@P_NetUnArc

; 236  : 	{
; 237  : 		memset(&players[i], 0, sizeof (player_t));

  00025	68 fc 01 00 00	 push	 508			; 000001fcH
  0002a	6a 00		 push	 0
  0002c	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00033	05 00 00 00 00	 add	 eax, OFFSET _players
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 238  : 		if (!playeringame[i])

  00041	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00044	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0004c	75 02		 jne	 SHORT $LN8@P_NetUnArc

; 239  : 			continue;

  0004e	eb c2		 jmp	 SHORT $LN2@P_NetUnArc
$LN8@P_NetUnArc:

; 240  : 
; 241  : 		players[i].aiming = READANGLE(save_p);

  00050	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	89 90 20 00 00
	00		 mov	 DWORD PTR _players[eax+32], edx
  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0006a	83 c0 04	 add	 eax, 4
  0006d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 242  : 		players[i].awayviewaiming = READANGLE(save_p);

  00072	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 90 24 00 00
	00		 mov	 DWORD PTR _players[eax+36], edx
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0008c	83 c0 04	 add	 eax, 4
  0008f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 243  : 		players[i].awayviewtics = READINT32(save_p);

  00094	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a3	89 90 ec 01 00
	00		 mov	 DWORD PTR _players[eax+492], edx
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000ae	83 c0 04	 add	 eax, 4
  000b1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 244  : 		players[i].health = READINT32(save_p);

  000b6	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c5	89 90 28 00 00
	00		 mov	 DWORD PTR _players[eax+40], edx
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d0	83 c0 04	 add	 eax, 4
  000d3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 245  : 
; 246  : 		players[i].currentweapon = READINT32(save_p);

  000d8	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000e5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e7	89 90 2c 00 00
	00		 mov	 DWORD PTR _players[eax+44], edx
  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f2	83 c0 04	 add	 eax, 4
  000f5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 247  : 		players[i].ringweapons = READINT32(save_p);

  000fa	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00101	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00107	8b 11		 mov	 edx, DWORD PTR [ecx]
  00109	89 90 30 00 00
	00		 mov	 DWORD PTR _players[eax+48], edx
  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00114	83 c0 04	 add	 eax, 4
  00117	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 248  : 		players[i].tossstrength = READFIXED(save_p);

  0011c	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00123	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00129	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012b	89 90 34 00 00
	00		 mov	 DWORD PTR _players[eax+52], edx
  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00136	83 c0 04	 add	 eax, 4
  00139	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 249  : 
; 250  : 		for (j = 0; j < NUMPOWERS; j++)

  0013e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00145	eb 09		 jmp	 SHORT $LN7@P_NetUnArc
$LN5@P_NetUnArc:
  00147	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0014a	83 c0 01	 add	 eax, 1
  0014d	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@P_NetUnArc:
  00150	83 7d f8 1d	 cmp	 DWORD PTR _j$[ebp], 29	; 0000001dH
  00154	7d 28		 jge	 SHORT $LN6@P_NetUnArc

; 251  : 			players[i].powers[j] = READINT32(save_p);

  00156	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0015d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00160	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00166	8b 12		 mov	 edx, DWORD PTR [edx]
  00168	89 94 88 38 00
	00 00		 mov	 DWORD PTR _players[eax+ecx*4+56], edx
  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00174	83 c0 04	 add	 eax, 4
  00177	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0017c	eb c9		 jmp	 SHORT $LN5@P_NetUnArc
$LN6@P_NetUnArc:

; 252  : 
; 253  : 		players[i].playerstate = READUINT8(save_p);

  0017e	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00185	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0018b	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0018e	89 90 04 00 00
	00		 mov	 DWORD PTR _players[eax+4], edx
  00194	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00199	83 c0 01	 add	 eax, 1
  0019c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 254  : 		players[i].pflags = READUINT32(save_p);

  001a1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  001ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b0	89 90 ac 00 00
	00		 mov	 DWORD PTR _players[eax+172], edx
  001b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001bb	83 c0 04	 add	 eax, 4
  001be	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 255  : 		players[i].spectator = READUINT8(save_p);

  001c3	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  001d0	8a 11		 mov	 dl, BYTE PTR [ecx]
  001d2	88 90 f0 01 00
	00		 mov	 BYTE PTR _players[eax+496], dl
  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001dd	83 c0 01	 add	 eax, 1
  001e0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 256  : 
; 257  : 		players[i].bonuscount = READINT32(save_p);

  001e5	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  001f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f4	89 90 b0 00 00
	00		 mov	 DWORD PTR _players[eax+176], edx
  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001ff	83 c0 04	 add	 eax, 4
  00202	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 258  : 		players[i].skincolor = READINT32(save_p);

  00207	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0020e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00214	8b 11		 mov	 edx, DWORD PTR [ecx]
  00216	89 90 b4 00 00
	00		 mov	 DWORD PTR _players[eax+180], edx
  0021c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00221	83 c0 04	 add	 eax, 4
  00224	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 259  : 		players[i].skin = READINT32(save_p);

  00229	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00230	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00236	8b 11		 mov	 edx, DWORD PTR [ecx]
  00238	89 90 b8 00 00
	00		 mov	 DWORD PTR _players[eax+184], edx
  0023e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00243	83 c0 04	 add	 eax, 4
  00246	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 260  : 		players[i].score = READUINT32(save_p);

  0024b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00252	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00258	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025a	89 90 bc 00 00
	00		 mov	 DWORD PTR _players[eax+188], edx
  00260	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00265	83 c0 04	 add	 eax, 4
  00268	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 261  : 		players[i].dashspeed = READINT32(save_p); // dashing speed

  0026d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00274	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0027a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0027c	89 90 c0 00 00
	00		 mov	 DWORD PTR _players[eax+192], edx
  00282	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00287	83 c0 04	 add	 eax, 4
  0028a	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 262  : 		players[i].lives = READINT32(save_p);

  0028f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00296	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0029c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029e	89 90 00 01 00
	00		 mov	 DWORD PTR _players[eax+256], edx
  002a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002a9	83 c0 04	 add	 eax, 4
  002ac	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 263  : 		players[i].continues = READINT32(save_p); // continues that player has acquired

  002b1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  002be	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c0	89 90 04 01 00
	00		 mov	 DWORD PTR _players[eax+260], edx
  002c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002cb	83 c0 04	 add	 eax, 4
  002ce	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 264  : 		players[i].xtralife = READINT32(save_p); // Ring Extra Life counter

  002d3	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  002e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e2	89 90 08 01 00
	00		 mov	 DWORD PTR _players[eax+264], edx
  002e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002ed	83 c0 04	 add	 eax, 4
  002f0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 265  : 		players[i].speed = READINT32(save_p); // Player's speed (distance formula of MOMX and MOMY values)

  002f5	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00302	8b 11		 mov	 edx, DWORD PTR [ecx]
  00304	89 90 0c 01 00
	00		 mov	 DWORD PTR _players[eax+268], edx
  0030a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0030f	83 c0 04	 add	 eax, 4
  00312	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 266  : 		players[i].jumping = READINT32(save_p); // Jump counter

  00317	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0031e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00324	8b 11		 mov	 edx, DWORD PTR [ecx]
  00326	89 90 10 01 00
	00		 mov	 DWORD PTR _players[eax+272], edx
  0032c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00331	83 c0 04	 add	 eax, 4
  00334	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 267  : 		players[i].secondjump = READUINT8(save_p);

  00339	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00340	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00346	8a 11		 mov	 dl, BYTE PTR [ecx]
  00348	88 90 14 01 00
	00		 mov	 BYTE PTR _players[eax+276], dl
  0034e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00353	83 c0 01	 add	 eax, 1
  00356	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 268  : 		players[i].fly1 = READINT32(save_p); // Tails flying

  0035b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00362	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00368	8b 11		 mov	 edx, DWORD PTR [ecx]
  0036a	89 90 18 01 00
	00		 mov	 DWORD PTR _players[eax+280], edx
  00370	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00375	83 c0 04	 add	 eax, 4
  00378	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 269  : 		players[i].scoreadd = READUINT32(save_p); // Used for multiple enemy attack bonus

  0037d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00384	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0038a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038c	89 90 1c 01 00
	00		 mov	 DWORD PTR _players[eax+284], edx
  00392	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00397	83 c0 04	 add	 eax, 4
  0039a	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 270  : 		players[i].glidetime = READUINT32(save_p); // Glide counter for thrust

  0039f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  003ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  003ae	89 90 20 01 00
	00		 mov	 DWORD PTR _players[eax+288], edx
  003b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003b9	83 c0 04	 add	 eax, 4
  003bc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 271  : 		players[i].climbing = READINT32(save_p); // Climbing on the wall

  003c1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  003ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d0	89 90 24 01 00
	00		 mov	 DWORD PTR _players[eax+292], edx
  003d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003db	83 c0 04	 add	 eax, 4
  003de	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 272  : 		players[i].deadtimer = READINT32(save_p); // End game if game over lasts too long

  003e3	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  003f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f2	89 90 28 01 00
	00		 mov	 DWORD PTR _players[eax+296], edx
  003f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003fd	83 c0 04	 add	 eax, 4
  00400	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 273  : 		players[i].splish = READINT32(save_p); // Don't make splish repeat tons

  00405	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0040c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00412	8b 11		 mov	 edx, DWORD PTR [ecx]
  00414	89 90 2c 01 00
	00		 mov	 DWORD PTR _players[eax+300], edx
  0041a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0041f	83 c0 04	 add	 eax, 4
  00422	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 274  : 		players[i].exiting = READUINT32(save_p); // Exitlevel timer

  00427	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0042e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00434	8b 11		 mov	 edx, DWORD PTR [ecx]
  00436	89 90 30 01 00
	00		 mov	 DWORD PTR _players[eax+304], edx
  0043c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00441	83 c0 04	 add	 eax, 4
  00444	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 275  : 		players[i].blackow = READINT32(save_p);

  00449	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00450	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00456	8b 11		 mov	 edx, DWORD PTR [ecx]
  00458	89 90 34 01 00
	00		 mov	 DWORD PTR _players[eax+308], edx
  0045e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00463	83 c0 04	 add	 eax, 4
  00466	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 276  : 		players[i].homing = READUINT8(save_p); // Are you homing?

  0046b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00472	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00478	8a 11		 mov	 dl, BYTE PTR [ecx]
  0047a	88 90 38 01 00
	00		 mov	 BYTE PTR _players[eax+312], dl
  00480	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00485	83 c0 01	 add	 eax, 1
  00488	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 277  : 
; 278  : 		////////////////////////////
; 279  : 		// Conveyor Belt Movement //
; 280  : 		////////////////////////////
; 281  : 		players[i].cmomx = READFIXED(save_p); // Conveyor momx

  0048d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00494	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0049a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0049c	89 90 3c 01 00
	00		 mov	 DWORD PTR _players[eax+316], edx
  004a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004a7	83 c0 04	 add	 eax, 4
  004aa	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 282  : 		players[i].cmomy = READFIXED(save_p); // Conveyor momy

  004af	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  004bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  004be	89 90 40 01 00
	00		 mov	 DWORD PTR _players[eax+320], edx
  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004c9	83 c0 04	 add	 eax, 4
  004cc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 283  : 		players[i].rmomx = READFIXED(save_p); // "Real" momx (momx - cmomx)

  004d1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  004de	8b 11		 mov	 edx, DWORD PTR [ecx]
  004e0	89 90 44 01 00
	00		 mov	 DWORD PTR _players[eax+324], edx
  004e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004eb	83 c0 04	 add	 eax, 4
  004ee	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 284  : 		players[i].rmomy = READFIXED(save_p); // "Real" momy (momy - cmomy)

  004f3	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00500	8b 11		 mov	 edx, DWORD PTR [ecx]
  00502	89 90 48 01 00
	00		 mov	 DWORD PTR _players[eax+328], edx
  00508	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0050d	83 c0 04	 add	 eax, 4
  00510	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 285  : 
; 286  : 		/////////////////////
; 287  : 		// Race Mode Stuff //
; 288  : 		/////////////////////
; 289  : 		players[i].numboxes = READINT32(save_p); // Number of item boxes obtained for Race Mode

  00515	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0051c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00522	8b 11		 mov	 edx, DWORD PTR [ecx]
  00524	89 90 4c 01 00
	00		 mov	 DWORD PTR _players[eax+332], edx
  0052a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0052f	83 c0 04	 add	 eax, 4
  00532	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 290  : 		players[i].totalring = READINT32(save_p); // Total number of rings obtained for Race Mode

  00537	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0053e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00544	8b 11		 mov	 edx, DWORD PTR [ecx]
  00546	89 90 50 01 00
	00		 mov	 DWORD PTR _players[eax+336], edx
  0054c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00551	83 c0 04	 add	 eax, 4
  00554	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 291  : 		players[i].realtime = READUINT32(save_p); // integer replacement for leveltime

  00559	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00560	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00566	8b 11		 mov	 edx, DWORD PTR [ecx]
  00568	89 90 54 01 00
	00		 mov	 DWORD PTR _players[eax+340], edx
  0056e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00573	83 c0 04	 add	 eax, 4
  00576	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 292  : 		players[i].racescore = READUINT32(save_p); // Total of won categories

  0057b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00582	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00588	8b 11		 mov	 edx, DWORD PTR [ecx]
  0058a	89 90 58 01 00
	00		 mov	 DWORD PTR _players[eax+344], edx
  00590	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00595	83 c0 04	 add	 eax, 4
  00598	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 293  : 		players[i].laps = READUINT32(save_p); // Number of laps (optional)

  0059d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  005aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  005ac	89 90 5c 01 00
	00		 mov	 DWORD PTR _players[eax+348], edx
  005b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005b7	83 c0 04	 add	 eax, 4
  005ba	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 294  : 
; 295  : 		////////////////////
; 296  : 		// CTF Mode Stuff //
; 297  : 		////////////////////
; 298  : 		players[i].ctfteam = READINT32(save_p); // 1 == Red, 2 == Blue

  005bf	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  005cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  005ce	89 90 60 01 00
	00		 mov	 DWORD PTR _players[eax+352], edx
  005d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005d9	83 c0 04	 add	 eax, 4
  005dc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 299  : 		players[i].gotflag = READUINT16(save_p); // 1 == Red, 2 == Blue Do you have the flag?

  005e1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  005ee	66 8b 11	 mov	 dx, WORD PTR [ecx]
  005f1	66 89 90 64 01
	00 00		 mov	 WORD PTR _players[eax+356], dx
  005f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005fd	83 c0 02	 add	 eax, 2
  00600	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 300  : 
; 301  : 		players[i].dbginfo = READINT32(save_p); // Debugger

  00605	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0060c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00612	8b 11		 mov	 edx, DWORD PTR [ecx]
  00614	89 90 68 01 00
	00		 mov	 DWORD PTR _players[eax+360], edx
  0061a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0061f	83 c0 04	 add	 eax, 4
  00622	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 302  : 		players[i].emeraldhunt = READINT32(save_p); // # of emeralds found

  00627	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0062e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00634	8b 11		 mov	 edx, DWORD PTR [ecx]
  00636	89 90 6c 01 00
	00		 mov	 DWORD PTR _players[eax+364], edx
  0063c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00641	83 c0 04	 add	 eax, 4
  00644	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 303  : 
; 304  : 		players[i].weapondelay = READINT32(save_p);

  00649	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00650	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00656	8b 11		 mov	 edx, DWORD PTR [ecx]
  00658	89 90 70 01 00
	00		 mov	 DWORD PTR _players[eax+368], edx
  0065e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00663	83 c0 04	 add	 eax, 4
  00666	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 305  : 		players[i].tossdelay = READINT32(save_p);

  0066b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00672	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00678	8b 11		 mov	 edx, DWORD PTR [ecx]
  0067a	89 90 74 01 00
	00		 mov	 DWORD PTR _players[eax+372], edx
  00680	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00685	83 c0 04	 add	 eax, 4
  00688	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 306  : 		players[i].shielddelay = READINT32(save_p);

  0068d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00694	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  0069a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0069c	89 90 78 01 00
	00		 mov	 DWORD PTR _players[eax+376], edx
  006a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  006a7	83 c0 04	 add	 eax, 4
  006aa	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 307  : 		players[i].taunttimer = READUINT32(save_p);

  006af	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  006bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  006be	89 90 7c 01 00
	00		 mov	 DWORD PTR _players[eax+380], edx
  006c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  006c9	83 c0 04	 add	 eax, 4
  006cc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 308  : 
; 309  : 		players[i].starposttime = READUINT32(save_p);

  006d1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  006de	8b 11		 mov	 edx, DWORD PTR [ecx]
  006e0	89 90 90 01 00
	00		 mov	 DWORD PTR _players[eax+400], edx
  006e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  006eb	83 c0 04	 add	 eax, 4
  006ee	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 310  : 		players[i].starpostx = READINT32(save_p);

  006f3	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00700	8b 11		 mov	 edx, DWORD PTR [ecx]
  00702	89 90 80 01 00
	00		 mov	 DWORD PTR _players[eax+384], edx
  00708	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0070d	83 c0 04	 add	 eax, 4
  00710	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 311  : 		players[i].starposty = READINT32(save_p);

  00715	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0071c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00722	8b 11		 mov	 edx, DWORD PTR [ecx]
  00724	89 90 84 01 00
	00		 mov	 DWORD PTR _players[eax+388], edx
  0072a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0072f	83 c0 04	 add	 eax, 4
  00732	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 312  : 		players[i].starpostz = READINT32(save_p);

  00737	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0073e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00744	8b 11		 mov	 edx, DWORD PTR [ecx]
  00746	89 90 88 01 00
	00		 mov	 DWORD PTR _players[eax+392], edx
  0074c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00751	83 c0 04	 add	 eax, 4
  00754	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 313  : 		players[i].starpostnum = READINT32(save_p);

  00759	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00760	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00766	8b 11		 mov	 edx, DWORD PTR [ecx]
  00768	89 90 8c 01 00
	00		 mov	 DWORD PTR _players[eax+396], edx
  0076e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00773	83 c0 04	 add	 eax, 4
  00776	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 314  : 		players[i].starpostangle = READANGLE(save_p);

  0077b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00782	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00788	8b 11		 mov	 edx, DWORD PTR [ecx]
  0078a	89 90 94 01 00
	00		 mov	 DWORD PTR _players[eax+404], edx
  00790	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00795	83 c0 04	 add	 eax, 4
  00798	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 315  : 		players[i].starpostbit = READUINT32(save_p);

  0079d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  007aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  007ac	89 90 98 01 00
	00		 mov	 DWORD PTR _players[eax+408], edx
  007b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007b7	83 c0 04	 add	 eax, 4
  007ba	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 316  : 
; 317  : 		players[i].angle_pos = READANGLE(save_p);

  007bf	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  007cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  007ce	89 90 9c 01 00
	00		 mov	 DWORD PTR _players[eax+412], edx
  007d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007d9	83 c0 04	 add	 eax, 4
  007dc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 318  : 		players[i].old_angle_pos = READANGLE(save_p);

  007e1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  007ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  007f0	89 90 a0 01 00
	00		 mov	 DWORD PTR _players[eax+416], edx
  007f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007fb	83 c0 04	 add	 eax, 4
  007fe	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 319  : 
; 320  : 		players[i].flyangle = READINT32(save_p);

  00803	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0080a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00810	8b 11		 mov	 edx, DWORD PTR [ecx]
  00812	89 90 b0 01 00
	00		 mov	 DWORD PTR _players[eax+432], edx
  00818	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0081d	83 c0 04	 add	 eax, 4
  00820	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 321  : 		players[i].drilltimer = READUINT32(save_p);

  00825	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0082c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00832	8b 11		 mov	 edx, DWORD PTR [ecx]
  00834	89 90 b4 01 00
	00		 mov	 DWORD PTR _players[eax+436], edx
  0083a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0083f	83 c0 04	 add	 eax, 4
  00842	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 322  : 		players[i].linkcount = READINT32(save_p);

  00847	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0084e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00854	8b 11		 mov	 edx, DWORD PTR [ecx]
  00856	89 90 b8 01 00
	00		 mov	 DWORD PTR _players[eax+440], edx
  0085c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00861	83 c0 04	 add	 eax, 4
  00864	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 323  : 		players[i].linktimer = READUINT32(save_p);

  00869	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00870	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00876	8b 11		 mov	 edx, DWORD PTR [ecx]
  00878	89 90 bc 01 00
	00		 mov	 DWORD PTR _players[eax+444], edx
  0087e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00883	83 c0 04	 add	 eax, 4
  00886	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 324  : 		players[i].anotherflyangle = READINT32(save_p);

  0088b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00892	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00898	8b 11		 mov	 edx, DWORD PTR [ecx]
  0089a	89 90 c0 01 00
	00		 mov	 DWORD PTR _players[eax+448], edx
  008a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  008a5	83 c0 04	 add	 eax, 4
  008a8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 325  : 		players[i].nightstime = READUINT32(save_p);

  008ad	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  008ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  008bc	89 90 c4 01 00
	00		 mov	 DWORD PTR _players[eax+452], edx
  008c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  008c7	83 c0 04	 add	 eax, 4
  008ca	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 326  : 		players[i].bumpertime = READUINT32(save_p);

  008cf	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  008dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  008de	89 90 ac 01 00
	00		 mov	 DWORD PTR _players[eax+428], edx
  008e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  008e9	83 c0 04	 add	 eax, 4
  008ec	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 327  : 		players[i].drillmeter = READINT32(save_p);

  008f1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  008fe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00900	89 90 c8 01 00
	00		 mov	 DWORD PTR _players[eax+456], edx
  00906	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0090b	83 c0 04	 add	 eax, 4
  0090e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 328  : 		players[i].drilldelay = READUINT8(save_p);

  00913	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0091a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00920	8a 11		 mov	 dl, BYTE PTR [ecx]
  00922	88 90 cc 01 00
	00		 mov	 BYTE PTR _players[eax+460], dl
  00928	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0092d	83 c0 01	 add	 eax, 1
  00930	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 329  : 		players[i].bonustime = READUINT8(save_p);

  00935	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0093c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00942	8a 11		 mov	 dl, BYTE PTR [ecx]
  00944	88 90 cd 01 00
	00		 mov	 BYTE PTR _players[eax+461], dl
  0094a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0094f	83 c0 01	 add	 eax, 1
  00952	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 330  : 		players[i].mare = READUINT8(save_p);

  00957	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0095e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00964	8a 11		 mov	 dl, BYTE PTR [ecx]
  00966	88 90 d4 01 00
	00		 mov	 BYTE PTR _players[eax+468], dl
  0096c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00971	83 c0 01	 add	 eax, 1
  00974	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 331  : 
; 332  : 		players[i].lastsidehit = READINT16(save_p);

  00979	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00980	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00986	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00989	66 89 90 d6 01
	00 00		 mov	 WORD PTR _players[eax+470], dx
  00990	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00995	83 c0 02	 add	 eax, 2
  00998	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 333  : 		players[i].lastlinehit = READINT16(save_p);

  0099d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  009aa	66 8b 11	 mov	 dx, WORD PTR [ecx]
  009ad	66 89 90 d8 01
	00 00		 mov	 WORD PTR _players[eax+472], dx
  009b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  009b9	83 c0 02	 add	 eax, 2
  009bc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 334  : 
; 335  : 		players[i].losscount = READINT32(save_p);

  009c1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  009ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  009d0	89 90 dc 01 00
	00		 mov	 DWORD PTR _players[eax+476], edx
  009d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  009db	83 c0 04	 add	 eax, 4
  009de	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 336  : 
; 337  : 		players[i].onconveyor = READINT32(save_p);

  009e3	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  009f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  009f2	89 90 e4 01 00
	00		 mov	 DWORD PTR _players[eax+484], edx
  009f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  009fd	83 c0 04	 add	 eax, 4
  00a00	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 338  : 
; 339  : 		players[i].jointime = READUINT32(save_p);

  00a05	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00a0c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00a12	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a14	89 90 f4 01 00
	00		 mov	 DWORD PTR _players[eax+500], edx
  00a1a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a1f	83 c0 04	 add	 eax, 4
  00a22	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 340  : 
; 341  : 		flags = READUINT16(save_p);

  00a27	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a2c	66 8b 08	 mov	 cx, WORD PTR [eax]
  00a2f	66 89 4d f4	 mov	 WORD PTR _flags$[ebp], cx
  00a33	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00a39	83 c2 02	 add	 edx, 2
  00a3c	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 342  : 
; 343  : 		if (flags & CAPSULE)

  00a42	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  00a46	83 e0 04	 and	 eax, 4
  00a49	74 22		 je	 SHORT $LN9@P_NetUnArc

; 344  : 			players[i].capsule = (mobj_t *)(size_t)READUINT32(save_p);

  00a4b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00a52	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00a58	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a5a	89 90 d0 01 00
	00		 mov	 DWORD PTR _players[eax+464], edx
  00a60	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a65	83 c0 04	 add	 eax, 4
  00a68	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN9@P_NetUnArc:

; 345  : 
; 346  : 		if (flags & FIRSTAXIS)

  00a6d	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  00a71	83 e0 10	 and	 eax, 16			; 00000010H
  00a74	74 22		 je	 SHORT $LN10@P_NetUnArc

; 347  : 			players[i].axis1 = (mobj_t *)(size_t)READUINT32(save_p);

  00a76	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00a7d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00a83	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a85	89 90 a4 01 00
	00		 mov	 DWORD PTR _players[eax+420], edx
  00a8b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a90	83 c0 04	 add	 eax, 4
  00a93	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN10@P_NetUnArc:

; 348  : 
; 349  : 		if (flags & SECONDAXIS)

  00a98	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  00a9c	83 e0 20	 and	 eax, 32			; 00000020H
  00a9f	74 22		 je	 SHORT $LN11@P_NetUnArc

; 350  : 			players[i].axis2 = (mobj_t *)(size_t)READUINT32(save_p);

  00aa1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00aa8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00aae	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ab0	89 90 a8 01 00
	00		 mov	 DWORD PTR _players[eax+424], edx
  00ab6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00abb	83 c0 04	 add	 eax, 4
  00abe	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN11@P_NetUnArc:

; 351  : 
; 352  : 		if (flags & AWAYVIEW)

  00ac3	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  00ac7	83 e0 08	 and	 eax, 8
  00aca	74 22		 je	 SHORT $LN12@P_NetUnArc

; 353  : 			players[i].awayviewmobj = (mobj_t *)(size_t)READUINT32(save_p);

  00acc	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00ad3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00ad9	8b 11		 mov	 edx, DWORD PTR [ecx]
  00adb	89 90 e8 01 00
	00		 mov	 DWORD PTR _players[eax+488], edx
  00ae1	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00ae6	83 c0 04	 add	 eax, 4
  00ae9	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN12@P_NetUnArc:

; 354  : 
; 355  : 		players[i].viewheight = cv_viewheight.value<<FRACBITS;

  00aee	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_viewheight+20
  00af3	c1 e0 10	 shl	 eax, 16			; 00000010H
  00af6	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  00afd	89 81 14 00 00
	00		 mov	 DWORD PTR _players[ecx+20], eax

; 356  : 
; 357  : 		SetPlayerSkinByNum(i, players[i].skin);

  00b03	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00b0a	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  00b10	51		 push	 ecx
  00b11	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00b14	52		 push	 edx
  00b15	e8 00 00 00 00	 call	 _SetPlayerSkinByNum
  00b1a	83 c4 08	 add	 esp, 8

; 358  : 	}

  00b1d	e9 f0 f4 ff ff	 jmp	 $LN2@P_NetUnArc
$LN3@P_NetUnArc:

; 359  : }

  00b22	5f		 pop	 edi
  00b23	5e		 pop	 esi
  00b24	5b		 pop	 ebx
  00b25	8b e5		 mov	 esp, ebp
  00b27	5d		 pop	 ebp
  00b28	c3		 ret	 0
_P_NetUnArchivePlayers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_NetArchivePlayers
_TEXT	SEGMENT
_p_tmp$1 = -324						; size = 4
_p_tmp$2 = -320						; size = 4
_p_tmp$3 = -316						; size = 4
_p_tmp$4 = -312						; size = 4
_p_tmp$5 = -308						; size = 4
_p_tmp$6 = -304						; size = 4
_p_tmp$7 = -300						; size = 4
_p_tmp$8 = -296						; size = 4
_p_tmp$9 = -292						; size = 4
_p_tmp$10 = -288					; size = 4
_p_tmp$11 = -284					; size = 4
_p_tmp$12 = -280					; size = 4
_p_tmp$13 = -276					; size = 4
_p_tmp$14 = -272					; size = 4
_p_tmp$15 = -268					; size = 4
_p_tmp$16 = -264					; size = 4
_p_tmp$17 = -260					; size = 4
_p_tmp$18 = -256					; size = 4
_p_tmp$19 = -252					; size = 4
_p_tmp$20 = -248					; size = 4
_p_tmp$21 = -244					; size = 4
_p_tmp$22 = -240					; size = 4
_p_tmp$23 = -236					; size = 4
_p_tmp$24 = -232					; size = 4
_p_tmp$25 = -228					; size = 4
_p_tmp$26 = -224					; size = 4
_p_tmp$27 = -220					; size = 4
_p_tmp$28 = -216					; size = 4
_p_tmp$29 = -212					; size = 4
_p_tmp$30 = -208					; size = 4
_p_tmp$31 = -204					; size = 4
_p_tmp$32 = -200					; size = 4
_p_tmp$33 = -196					; size = 4
_p_tmp$34 = -192					; size = 4
_p_tmp$35 = -188					; size = 4
_p_tmp$36 = -184					; size = 4
_p_tmp$37 = -180					; size = 4
_p_tmp$38 = -176					; size = 4
_p_tmp$39 = -172					; size = 4
_p_tmp$40 = -168					; size = 4
_p_tmp$41 = -164					; size = 4
_p_tmp$42 = -160					; size = 4
_p_tmp$43 = -156					; size = 4
_p_tmp$44 = -152					; size = 4
_p_tmp$45 = -148					; size = 4
_p_tmp$46 = -144					; size = 4
_p_tmp$47 = -140					; size = 4
_p_tmp$48 = -136					; size = 4
_p_tmp$49 = -132					; size = 4
_p_tmp$50 = -128					; size = 4
_p_tmp$51 = -124					; size = 4
_p_tmp$52 = -120					; size = 4
_p_tmp$53 = -116					; size = 4
_p_tmp$54 = -112					; size = 4
_p_tmp$55 = -108					; size = 4
_p_tmp$56 = -104					; size = 4
_p_tmp$57 = -100					; size = 4
_p_tmp$58 = -96						; size = 4
_p_tmp$59 = -92						; size = 4
_p_tmp$60 = -88						; size = 4
_p_tmp$61 = -84						; size = 4
_p_tmp$62 = -80						; size = 4
_p_tmp$63 = -76						; size = 4
_p_tmp$64 = -72						; size = 4
_p_tmp$65 = -68						; size = 4
_p_tmp$66 = -64						; size = 4
_p_tmp$67 = -60						; size = 4
_p_tmp$68 = -56						; size = 4
_p_tmp$69 = -52						; size = 4
_p_tmp$70 = -48						; size = 4
_p_tmp$71 = -44						; size = 4
_p_tmp$72 = -40						; size = 4
_p_tmp$73 = -36						; size = 4
_p_tmp$74 = -32						; size = 4
_p_tmp$75 = -28						; size = 4
_p_tmp$76 = -24						; size = 4
_p_tmp$77 = -20						; size = 4
_p_tmp$78 = -16						; size = 4
_flags$ = -12						; size = 2
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_P_NetArchivePlayers PROC				; COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 87   : 	INT32 i, j;
; 88   : 	UINT16 flags;
; 89   : //	size_t q;
; 90   : 
; 91   : 	for (i = 0; i < MAXPLAYERS; i++)

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@P_NetArchi
$LN2@P_NetArchi:
  00015	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_NetArchi:
  0001e	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00022	0f 8d 0f 12 00
	00		 jge	 $LN3@P_NetArchi

; 92   : 	{
; 93   : 		if (!playeringame[i])

  00028	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00033	75 02		 jne	 SHORT $LN242@P_NetArchi

; 94   : 			continue;

  00035	eb de		 jmp	 SHORT $LN2@P_NetArchi
$LN242@P_NetArchi:

; 95   : 
; 96   : 		flags = 0;

  00037	33 c0		 xor	 eax, eax
  00039	66 89 45 f4	 mov	 WORD PTR _flags$[ebp], ax
$LN7@P_NetArchi:

; 97   : 
; 98   : 		WRITEANGLE(save_p, players[i].aiming);

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00042	89 45 f0	 mov	 DWORD PTR _p_tmp$78[ebp], eax
  00045	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _p_tmp$78[ebp]
  0004f	8b 90 20 00 00
	00		 mov	 edx, DWORD PTR _players[eax+32]
  00055	89 11		 mov	 DWORD PTR [ecx], edx
  00057	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$78[ebp]
  0005a	83 c0 04	 add	 eax, 4
  0005d	89 45 f0	 mov	 DWORD PTR _p_tmp$78[ebp], eax
  00060	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$78[ebp]
  00063	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00068	33 c0		 xor	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN7@P_NetArchi
$LN6@P_NetArchi:

; 99   : 		WRITEANGLE(save_p, players[i].awayviewaiming);

  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00071	89 45 ec	 mov	 DWORD PTR _p_tmp$77[ebp], eax
  00074	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0007b	8b 4d ec	 mov	 ecx, DWORD PTR _p_tmp$77[ebp]
  0007e	8b 90 24 00 00
	00		 mov	 edx, DWORD PTR _players[eax+36]
  00084	89 11		 mov	 DWORD PTR [ecx], edx
  00086	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$77[ebp]
  00089	83 c0 04	 add	 eax, 4
  0008c	89 45 ec	 mov	 DWORD PTR _p_tmp$77[ebp], eax
  0008f	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$77[ebp]
  00092	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00097	33 c0		 xor	 eax, eax
  00099	75 d1		 jne	 SHORT $LN6@P_NetArchi
$LN9@P_NetArchi:

; 100  : 		WRITEINT32(save_p, players[i].awayviewtics);

  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a0	89 45 e8	 mov	 DWORD PTR _p_tmp$76[ebp], eax
  000a3	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000aa	8b 4d e8	 mov	 ecx, DWORD PTR _p_tmp$76[ebp]
  000ad	8b 90 ec 01 00
	00		 mov	 edx, DWORD PTR _players[eax+492]
  000b3	89 11		 mov	 DWORD PTR [ecx], edx
  000b5	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$76[ebp]
  000b8	83 c0 04	 add	 eax, 4
  000bb	89 45 e8	 mov	 DWORD PTR _p_tmp$76[ebp], eax
  000be	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$76[ebp]
  000c1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000c6	33 c0		 xor	 eax, eax
  000c8	75 d1		 jne	 SHORT $LN9@P_NetArchi
$LN12@P_NetArchi:

; 101  : 		WRITEINT32(save_p, players[i].health);

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000cf	89 45 e4	 mov	 DWORD PTR _p_tmp$75[ebp], eax
  000d2	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000d9	8b 4d e4	 mov	 ecx, DWORD PTR _p_tmp$75[ebp]
  000dc	8b 90 28 00 00
	00		 mov	 edx, DWORD PTR _players[eax+40]
  000e2	89 11		 mov	 DWORD PTR [ecx], edx
  000e4	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$75[ebp]
  000e7	83 c0 04	 add	 eax, 4
  000ea	89 45 e4	 mov	 DWORD PTR _p_tmp$75[ebp], eax
  000ed	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$75[ebp]
  000f0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000f5	33 c0		 xor	 eax, eax
  000f7	75 d1		 jne	 SHORT $LN12@P_NetArchi
$LN15@P_NetArchi:

; 102  : 
; 103  : 		WRITEINT32(save_p, players[i].currentweapon);

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000fe	89 45 e0	 mov	 DWORD PTR _p_tmp$74[ebp], eax
  00101	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00108	8b 4d e0	 mov	 ecx, DWORD PTR _p_tmp$74[ebp]
  0010b	8b 90 2c 00 00
	00		 mov	 edx, DWORD PTR _players[eax+44]
  00111	89 11		 mov	 DWORD PTR [ecx], edx
  00113	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$74[ebp]
  00116	83 c0 04	 add	 eax, 4
  00119	89 45 e0	 mov	 DWORD PTR _p_tmp$74[ebp], eax
  0011c	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$74[ebp]
  0011f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00124	33 c0		 xor	 eax, eax
  00126	75 d1		 jne	 SHORT $LN15@P_NetArchi
$LN18@P_NetArchi:

; 104  : 		WRITEINT32(save_p, players[i].ringweapons);

  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0012d	89 45 dc	 mov	 DWORD PTR _p_tmp$73[ebp], eax
  00130	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00137	8b 4d dc	 mov	 ecx, DWORD PTR _p_tmp$73[ebp]
  0013a	8b 90 30 00 00
	00		 mov	 edx, DWORD PTR _players[eax+48]
  00140	89 11		 mov	 DWORD PTR [ecx], edx
  00142	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$73[ebp]
  00145	83 c0 04	 add	 eax, 4
  00148	89 45 dc	 mov	 DWORD PTR _p_tmp$73[ebp], eax
  0014b	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$73[ebp]
  0014e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00153	33 c0		 xor	 eax, eax
  00155	75 d1		 jne	 SHORT $LN18@P_NetArchi
$LN21@P_NetArchi:

; 105  : 		WRITEFIXED(save_p, players[i].tossstrength);

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0015c	89 45 d8	 mov	 DWORD PTR _p_tmp$72[ebp], eax
  0015f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00166	8b 4d d8	 mov	 ecx, DWORD PTR _p_tmp$72[ebp]
  00169	8b 90 34 00 00
	00		 mov	 edx, DWORD PTR _players[eax+52]
  0016f	89 11		 mov	 DWORD PTR [ecx], edx
  00171	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$72[ebp]
  00174	83 c0 04	 add	 eax, 4
  00177	89 45 d8	 mov	 DWORD PTR _p_tmp$72[ebp], eax
  0017a	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$72[ebp]
  0017d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00182	33 c0		 xor	 eax, eax
  00184	75 d1		 jne	 SHORT $LN21@P_NetArchi

; 106  : 
; 107  : 		for (j = 0; j < NUMPOWERS; j++)

  00186	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0018d	eb 09		 jmp	 SHORT $LN28@P_NetArchi
$LN26@P_NetArchi:
  0018f	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00192	83 c0 01	 add	 eax, 1
  00195	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN28@P_NetArchi:
  00198	83 7d f8 1d	 cmp	 DWORD PTR _j$[ebp], 29	; 0000001dH
  0019c	7d 35		 jge	 SHORT $LN27@P_NetArchi
$LN31@P_NetArchi:

; 108  : 			WRITEINT32(save_p, players[i].powers[j]);

  0019e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001a3	89 45 d4	 mov	 DWORD PTR _p_tmp$71[ebp], eax
  001a6	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001ad	8b 4d d4	 mov	 ecx, DWORD PTR _p_tmp$71[ebp]
  001b0	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  001b3	8b 84 90 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx*4+56]
  001ba	89 01		 mov	 DWORD PTR [ecx], eax
  001bc	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$71[ebp]
  001bf	83 c0 04	 add	 eax, 4
  001c2	89 45 d4	 mov	 DWORD PTR _p_tmp$71[ebp], eax
  001c5	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$71[ebp]
  001c8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001cd	33 c0		 xor	 eax, eax
  001cf	75 cd		 jne	 SHORT $LN31@P_NetArchi
  001d1	eb bc		 jmp	 SHORT $LN26@P_NetArchi
$LN27@P_NetArchi:

; 109  : 
; 110  : 		WRITEUINT8(save_p, players[i].playerstate);

  001d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001d8	89 45 d0	 mov	 DWORD PTR _p_tmp$70[ebp], eax
  001db	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001e2	8b 4d d0	 mov	 ecx, DWORD PTR _p_tmp$70[ebp]
  001e5	8a 90 04 00 00
	00		 mov	 dl, BYTE PTR _players[eax+4]
  001eb	88 11		 mov	 BYTE PTR [ecx], dl
  001ed	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$70[ebp]
  001f0	83 c0 01	 add	 eax, 1
  001f3	89 45 d0	 mov	 DWORD PTR _p_tmp$70[ebp], eax
  001f6	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$70[ebp]
  001f9	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001fe	33 c0		 xor	 eax, eax
  00200	75 d1		 jne	 SHORT $LN27@P_NetArchi
$LN33@P_NetArchi:

; 111  : 		WRITEUINT32(save_p, players[i].pflags);

  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00207	89 45 cc	 mov	 DWORD PTR _p_tmp$69[ebp], eax
  0020a	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00211	8b 4d cc	 mov	 ecx, DWORD PTR _p_tmp$69[ebp]
  00214	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR _players[eax+172]
  0021a	89 11		 mov	 DWORD PTR [ecx], edx
  0021c	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$69[ebp]
  0021f	83 c0 04	 add	 eax, 4
  00222	89 45 cc	 mov	 DWORD PTR _p_tmp$69[ebp], eax
  00225	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$69[ebp]
  00228	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0022d	33 c0		 xor	 eax, eax
  0022f	75 d1		 jne	 SHORT $LN33@P_NetArchi
$LN36@P_NetArchi:

; 112  : 		WRITEUINT8(save_p, players[i].spectator);

  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00236	89 45 c8	 mov	 DWORD PTR _p_tmp$68[ebp], eax
  00239	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00240	8b 4d c8	 mov	 ecx, DWORD PTR _p_tmp$68[ebp]
  00243	8a 90 f0 01 00
	00		 mov	 dl, BYTE PTR _players[eax+496]
  00249	88 11		 mov	 BYTE PTR [ecx], dl
  0024b	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$68[ebp]
  0024e	83 c0 01	 add	 eax, 1
  00251	89 45 c8	 mov	 DWORD PTR _p_tmp$68[ebp], eax
  00254	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$68[ebp]
  00257	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0025c	33 c0		 xor	 eax, eax
  0025e	75 d1		 jne	 SHORT $LN36@P_NetArchi
$LN39@P_NetArchi:

; 113  : 
; 114  : 		WRITEINT32(save_p, players[i].bonuscount);

  00260	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00265	89 45 c4	 mov	 DWORD PTR _p_tmp$67[ebp], eax
  00268	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0026f	8b 4d c4	 mov	 ecx, DWORD PTR _p_tmp$67[ebp]
  00272	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR _players[eax+176]
  00278	89 11		 mov	 DWORD PTR [ecx], edx
  0027a	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$67[ebp]
  0027d	83 c0 04	 add	 eax, 4
  00280	89 45 c4	 mov	 DWORD PTR _p_tmp$67[ebp], eax
  00283	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$67[ebp]
  00286	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0028b	33 c0		 xor	 eax, eax
  0028d	75 d1		 jne	 SHORT $LN39@P_NetArchi
$LN42@P_NetArchi:

; 115  : 		WRITEINT32(save_p, players[i].skincolor);

  0028f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00294	89 45 c0	 mov	 DWORD PTR _p_tmp$66[ebp], eax
  00297	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0029e	8b 4d c0	 mov	 ecx, DWORD PTR _p_tmp$66[ebp]
  002a1	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+180]
  002a7	89 11		 mov	 DWORD PTR [ecx], edx
  002a9	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$66[ebp]
  002ac	83 c0 04	 add	 eax, 4
  002af	89 45 c0	 mov	 DWORD PTR _p_tmp$66[ebp], eax
  002b2	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$66[ebp]
  002b5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002ba	33 c0		 xor	 eax, eax
  002bc	75 d1		 jne	 SHORT $LN42@P_NetArchi
$LN45@P_NetArchi:

; 116  : 		WRITEINT32(save_p, players[i].skin);

  002be	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002c3	89 45 bc	 mov	 DWORD PTR _p_tmp$65[ebp], eax
  002c6	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002cd	8b 4d bc	 mov	 ecx, DWORD PTR _p_tmp$65[ebp]
  002d0	8b 90 b8 00 00
	00		 mov	 edx, DWORD PTR _players[eax+184]
  002d6	89 11		 mov	 DWORD PTR [ecx], edx
  002d8	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$65[ebp]
  002db	83 c0 04	 add	 eax, 4
  002de	89 45 bc	 mov	 DWORD PTR _p_tmp$65[ebp], eax
  002e1	8b 45 bc	 mov	 eax, DWORD PTR _p_tmp$65[ebp]
  002e4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  002e9	33 c0		 xor	 eax, eax
  002eb	75 d1		 jne	 SHORT $LN45@P_NetArchi
$LN48@P_NetArchi:

; 117  : 		WRITEUINT32(save_p, players[i].score);

  002ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  002f2	89 45 b8	 mov	 DWORD PTR _p_tmp$64[ebp], eax
  002f5	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002fc	8b 4d b8	 mov	 ecx, DWORD PTR _p_tmp$64[ebp]
  002ff	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+188]
  00305	89 11		 mov	 DWORD PTR [ecx], edx
  00307	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$64[ebp]
  0030a	83 c0 04	 add	 eax, 4
  0030d	89 45 b8	 mov	 DWORD PTR _p_tmp$64[ebp], eax
  00310	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$64[ebp]
  00313	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00318	33 c0		 xor	 eax, eax
  0031a	75 d1		 jne	 SHORT $LN48@P_NetArchi
$LN51@P_NetArchi:

; 118  : 		WRITEINT32(save_p, players[i].dashspeed);

  0031c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00321	89 45 b4	 mov	 DWORD PTR _p_tmp$63[ebp], eax
  00324	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0032b	8b 4d b4	 mov	 ecx, DWORD PTR _p_tmp$63[ebp]
  0032e	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR _players[eax+192]
  00334	89 11		 mov	 DWORD PTR [ecx], edx
  00336	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$63[ebp]
  00339	83 c0 04	 add	 eax, 4
  0033c	89 45 b4	 mov	 DWORD PTR _p_tmp$63[ebp], eax
  0033f	8b 45 b4	 mov	 eax, DWORD PTR _p_tmp$63[ebp]
  00342	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00347	33 c0		 xor	 eax, eax
  00349	75 d1		 jne	 SHORT $LN51@P_NetArchi
$LN54@P_NetArchi:

; 119  : 		WRITEINT32(save_p, players[i].lives);

  0034b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00350	89 45 b0	 mov	 DWORD PTR _p_tmp$62[ebp], eax
  00353	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0035a	8b 4d b0	 mov	 ecx, DWORD PTR _p_tmp$62[ebp]
  0035d	8b 90 00 01 00
	00		 mov	 edx, DWORD PTR _players[eax+256]
  00363	89 11		 mov	 DWORD PTR [ecx], edx
  00365	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$62[ebp]
  00368	83 c0 04	 add	 eax, 4
  0036b	89 45 b0	 mov	 DWORD PTR _p_tmp$62[ebp], eax
  0036e	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$62[ebp]
  00371	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00376	33 c0		 xor	 eax, eax
  00378	75 d1		 jne	 SHORT $LN54@P_NetArchi
$LN57@P_NetArchi:

; 120  : 		WRITEINT32(save_p, players[i].continues);

  0037a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0037f	89 45 ac	 mov	 DWORD PTR _p_tmp$61[ebp], eax
  00382	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00389	8b 4d ac	 mov	 ecx, DWORD PTR _p_tmp$61[ebp]
  0038c	8b 90 04 01 00
	00		 mov	 edx, DWORD PTR _players[eax+260]
  00392	89 11		 mov	 DWORD PTR [ecx], edx
  00394	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$61[ebp]
  00397	83 c0 04	 add	 eax, 4
  0039a	89 45 ac	 mov	 DWORD PTR _p_tmp$61[ebp], eax
  0039d	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$61[ebp]
  003a0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  003a5	33 c0		 xor	 eax, eax
  003a7	75 d1		 jne	 SHORT $LN57@P_NetArchi
$LN60@P_NetArchi:

; 121  : 		WRITEINT32(save_p, players[i].xtralife);

  003a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003ae	89 45 a8	 mov	 DWORD PTR _p_tmp$60[ebp], eax
  003b1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003b8	8b 4d a8	 mov	 ecx, DWORD PTR _p_tmp$60[ebp]
  003bb	8b 90 08 01 00
	00		 mov	 edx, DWORD PTR _players[eax+264]
  003c1	89 11		 mov	 DWORD PTR [ecx], edx
  003c3	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$60[ebp]
  003c6	83 c0 04	 add	 eax, 4
  003c9	89 45 a8	 mov	 DWORD PTR _p_tmp$60[ebp], eax
  003cc	8b 45 a8	 mov	 eax, DWORD PTR _p_tmp$60[ebp]
  003cf	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  003d4	33 c0		 xor	 eax, eax
  003d6	75 d1		 jne	 SHORT $LN60@P_NetArchi
$LN63@P_NetArchi:

; 122  : 		WRITEINT32(save_p, players[i].speed);

  003d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  003dd	89 45 a4	 mov	 DWORD PTR _p_tmp$59[ebp], eax
  003e0	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003e7	8b 4d a4	 mov	 ecx, DWORD PTR _p_tmp$59[ebp]
  003ea	8b 90 0c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+268]
  003f0	89 11		 mov	 DWORD PTR [ecx], edx
  003f2	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$59[ebp]
  003f5	83 c0 04	 add	 eax, 4
  003f8	89 45 a4	 mov	 DWORD PTR _p_tmp$59[ebp], eax
  003fb	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$59[ebp]
  003fe	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00403	33 c0		 xor	 eax, eax
  00405	75 d1		 jne	 SHORT $LN63@P_NetArchi
$LN66@P_NetArchi:

; 123  : 		WRITEINT32(save_p, players[i].jumping);

  00407	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0040c	89 45 a0	 mov	 DWORD PTR _p_tmp$58[ebp], eax
  0040f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00416	8b 4d a0	 mov	 ecx, DWORD PTR _p_tmp$58[ebp]
  00419	8b 90 10 01 00
	00		 mov	 edx, DWORD PTR _players[eax+272]
  0041f	89 11		 mov	 DWORD PTR [ecx], edx
  00421	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$58[ebp]
  00424	83 c0 04	 add	 eax, 4
  00427	89 45 a0	 mov	 DWORD PTR _p_tmp$58[ebp], eax
  0042a	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$58[ebp]
  0042d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00432	33 c0		 xor	 eax, eax
  00434	75 d1		 jne	 SHORT $LN66@P_NetArchi
$LN69@P_NetArchi:

; 124  : 		WRITEUINT8(save_p, players[i].secondjump);

  00436	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0043b	89 45 9c	 mov	 DWORD PTR _p_tmp$57[ebp], eax
  0043e	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00445	8b 4d 9c	 mov	 ecx, DWORD PTR _p_tmp$57[ebp]
  00448	8a 90 14 01 00
	00		 mov	 dl, BYTE PTR _players[eax+276]
  0044e	88 11		 mov	 BYTE PTR [ecx], dl
  00450	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$57[ebp]
  00453	83 c0 01	 add	 eax, 1
  00456	89 45 9c	 mov	 DWORD PTR _p_tmp$57[ebp], eax
  00459	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$57[ebp]
  0045c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00461	33 c0		 xor	 eax, eax
  00463	75 d1		 jne	 SHORT $LN69@P_NetArchi
$LN72@P_NetArchi:

; 125  : 		WRITEINT32(save_p, players[i].fly1);

  00465	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0046a	89 45 98	 mov	 DWORD PTR _p_tmp$56[ebp], eax
  0046d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00474	8b 4d 98	 mov	 ecx, DWORD PTR _p_tmp$56[ebp]
  00477	8b 90 18 01 00
	00		 mov	 edx, DWORD PTR _players[eax+280]
  0047d	89 11		 mov	 DWORD PTR [ecx], edx
  0047f	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$56[ebp]
  00482	83 c0 04	 add	 eax, 4
  00485	89 45 98	 mov	 DWORD PTR _p_tmp$56[ebp], eax
  00488	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$56[ebp]
  0048b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00490	33 c0		 xor	 eax, eax
  00492	75 d1		 jne	 SHORT $LN72@P_NetArchi
$LN75@P_NetArchi:

; 126  : 		WRITEUINT32(save_p, players[i].scoreadd);

  00494	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00499	89 45 94	 mov	 DWORD PTR _p_tmp$55[ebp], eax
  0049c	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004a3	8b 4d 94	 mov	 ecx, DWORD PTR _p_tmp$55[ebp]
  004a6	8b 90 1c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+284]
  004ac	89 11		 mov	 DWORD PTR [ecx], edx
  004ae	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$55[ebp]
  004b1	83 c0 04	 add	 eax, 4
  004b4	89 45 94	 mov	 DWORD PTR _p_tmp$55[ebp], eax
  004b7	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$55[ebp]
  004ba	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  004bf	33 c0		 xor	 eax, eax
  004c1	75 d1		 jne	 SHORT $LN75@P_NetArchi
$LN78@P_NetArchi:

; 127  : 		WRITEUINT32(save_p, players[i].glidetime);

  004c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004c8	89 45 90	 mov	 DWORD PTR _p_tmp$54[ebp], eax
  004cb	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004d2	8b 4d 90	 mov	 ecx, DWORD PTR _p_tmp$54[ebp]
  004d5	8b 90 20 01 00
	00		 mov	 edx, DWORD PTR _players[eax+288]
  004db	89 11		 mov	 DWORD PTR [ecx], edx
  004dd	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$54[ebp]
  004e0	83 c0 04	 add	 eax, 4
  004e3	89 45 90	 mov	 DWORD PTR _p_tmp$54[ebp], eax
  004e6	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$54[ebp]
  004e9	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  004ee	33 c0		 xor	 eax, eax
  004f0	75 d1		 jne	 SHORT $LN78@P_NetArchi
$LN81@P_NetArchi:

; 128  : 		WRITEINT32(save_p, players[i].climbing);

  004f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  004f7	89 45 8c	 mov	 DWORD PTR _p_tmp$53[ebp], eax
  004fa	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00501	8b 4d 8c	 mov	 ecx, DWORD PTR _p_tmp$53[ebp]
  00504	8b 90 24 01 00
	00		 mov	 edx, DWORD PTR _players[eax+292]
  0050a	89 11		 mov	 DWORD PTR [ecx], edx
  0050c	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$53[ebp]
  0050f	83 c0 04	 add	 eax, 4
  00512	89 45 8c	 mov	 DWORD PTR _p_tmp$53[ebp], eax
  00515	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$53[ebp]
  00518	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0051d	33 c0		 xor	 eax, eax
  0051f	75 d1		 jne	 SHORT $LN81@P_NetArchi
$LN84@P_NetArchi:

; 129  : 		WRITEINT32(save_p, players[i].deadtimer);

  00521	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00526	89 45 88	 mov	 DWORD PTR _p_tmp$52[ebp], eax
  00529	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00530	8b 4d 88	 mov	 ecx, DWORD PTR _p_tmp$52[ebp]
  00533	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR _players[eax+296]
  00539	89 11		 mov	 DWORD PTR [ecx], edx
  0053b	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$52[ebp]
  0053e	83 c0 04	 add	 eax, 4
  00541	89 45 88	 mov	 DWORD PTR _p_tmp$52[ebp], eax
  00544	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$52[ebp]
  00547	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0054c	33 c0		 xor	 eax, eax
  0054e	75 d1		 jne	 SHORT $LN84@P_NetArchi
$LN87@P_NetArchi:

; 130  : 		WRITEINT32(save_p, players[i].splish);

  00550	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00555	89 45 84	 mov	 DWORD PTR _p_tmp$51[ebp], eax
  00558	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0055f	8b 4d 84	 mov	 ecx, DWORD PTR _p_tmp$51[ebp]
  00562	8b 90 2c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+300]
  00568	89 11		 mov	 DWORD PTR [ecx], edx
  0056a	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$51[ebp]
  0056d	83 c0 04	 add	 eax, 4
  00570	89 45 84	 mov	 DWORD PTR _p_tmp$51[ebp], eax
  00573	8b 45 84	 mov	 eax, DWORD PTR _p_tmp$51[ebp]
  00576	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0057b	33 c0		 xor	 eax, eax
  0057d	75 d1		 jne	 SHORT $LN87@P_NetArchi
$LN90@P_NetArchi:

; 131  : 		WRITEUINT32(save_p, players[i].exiting);

  0057f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00584	89 45 80	 mov	 DWORD PTR _p_tmp$50[ebp], eax
  00587	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0058e	8b 4d 80	 mov	 ecx, DWORD PTR _p_tmp$50[ebp]
  00591	8b 90 30 01 00
	00		 mov	 edx, DWORD PTR _players[eax+304]
  00597	89 11		 mov	 DWORD PTR [ecx], edx
  00599	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$50[ebp]
  0059c	83 c0 04	 add	 eax, 4
  0059f	89 45 80	 mov	 DWORD PTR _p_tmp$50[ebp], eax
  005a2	8b 45 80	 mov	 eax, DWORD PTR _p_tmp$50[ebp]
  005a5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  005aa	33 c0		 xor	 eax, eax
  005ac	75 d1		 jne	 SHORT $LN90@P_NetArchi
$LN93@P_NetArchi:

; 132  : 		WRITEINT32(save_p, players[i].blackow);

  005ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005b3	89 85 7c ff ff
	ff		 mov	 DWORD PTR _p_tmp$49[ebp], eax
  005b9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005c0	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$49[ebp]
  005c6	8b 90 34 01 00
	00		 mov	 edx, DWORD PTR _players[eax+308]
  005cc	89 11		 mov	 DWORD PTR [ecx], edx
  005ce	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$49[ebp]
  005d4	83 c0 04	 add	 eax, 4
  005d7	89 85 7c ff ff
	ff		 mov	 DWORD PTR _p_tmp$49[ebp], eax
  005dd	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$49[ebp]
  005e3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  005e8	33 c0		 xor	 eax, eax
  005ea	75 c2		 jne	 SHORT $LN93@P_NetArchi
$LN96@P_NetArchi:

; 133  : 		WRITEUINT8(save_p, players[i].homing);

  005ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  005f1	89 85 78 ff ff
	ff		 mov	 DWORD PTR _p_tmp$48[ebp], eax
  005f7	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005fe	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$48[ebp]
  00604	8a 90 38 01 00
	00		 mov	 dl, BYTE PTR _players[eax+312]
  0060a	88 11		 mov	 BYTE PTR [ecx], dl
  0060c	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$48[ebp]
  00612	83 c0 01	 add	 eax, 1
  00615	89 85 78 ff ff
	ff		 mov	 DWORD PTR _p_tmp$48[ebp], eax
  0061b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$48[ebp]
  00621	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00626	33 c0		 xor	 eax, eax
  00628	75 c2		 jne	 SHORT $LN96@P_NetArchi
$LN99@P_NetArchi:

; 134  : 
; 135  : 		////////////////////////////
; 136  : 		// Conveyor Belt Movement //
; 137  : 		////////////////////////////
; 138  : 		WRITEFIXED(save_p, players[i].cmomx); // Conveyor momx

  0062a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0062f	89 85 74 ff ff
	ff		 mov	 DWORD PTR _p_tmp$47[ebp], eax
  00635	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0063c	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$47[ebp]
  00642	8b 90 3c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+316]
  00648	89 11		 mov	 DWORD PTR [ecx], edx
  0064a	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$47[ebp]
  00650	83 c0 04	 add	 eax, 4
  00653	89 85 74 ff ff
	ff		 mov	 DWORD PTR _p_tmp$47[ebp], eax
  00659	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$47[ebp]
  0065f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00664	33 c0		 xor	 eax, eax
  00666	75 c2		 jne	 SHORT $LN99@P_NetArchi
$LN102@P_NetArchi:

; 139  : 		WRITEFIXED(save_p, players[i].cmomy); // Conveyor momy

  00668	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0066d	89 85 70 ff ff
	ff		 mov	 DWORD PTR _p_tmp$46[ebp], eax
  00673	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0067a	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$46[ebp]
  00680	8b 90 40 01 00
	00		 mov	 edx, DWORD PTR _players[eax+320]
  00686	89 11		 mov	 DWORD PTR [ecx], edx
  00688	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$46[ebp]
  0068e	83 c0 04	 add	 eax, 4
  00691	89 85 70 ff ff
	ff		 mov	 DWORD PTR _p_tmp$46[ebp], eax
  00697	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$46[ebp]
  0069d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  006a2	33 c0		 xor	 eax, eax
  006a4	75 c2		 jne	 SHORT $LN102@P_NetArchi
$LN105@P_NetArchi:

; 140  : 		WRITEFIXED(save_p, players[i].rmomx); // "Real" momx (momx - cmomx)

  006a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  006ab	89 85 6c ff ff
	ff		 mov	 DWORD PTR _p_tmp$45[ebp], eax
  006b1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006b8	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$45[ebp]
  006be	8b 90 44 01 00
	00		 mov	 edx, DWORD PTR _players[eax+324]
  006c4	89 11		 mov	 DWORD PTR [ecx], edx
  006c6	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$45[ebp]
  006cc	83 c0 04	 add	 eax, 4
  006cf	89 85 6c ff ff
	ff		 mov	 DWORD PTR _p_tmp$45[ebp], eax
  006d5	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$45[ebp]
  006db	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  006e0	33 c0		 xor	 eax, eax
  006e2	75 c2		 jne	 SHORT $LN105@P_NetArchi
$LN108@P_NetArchi:

; 141  : 		WRITEFIXED(save_p, players[i].rmomy); // "Real" momy (momy - cmomy)

  006e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  006e9	89 85 68 ff ff
	ff		 mov	 DWORD PTR _p_tmp$44[ebp], eax
  006ef	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006f6	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$44[ebp]
  006fc	8b 90 48 01 00
	00		 mov	 edx, DWORD PTR _players[eax+328]
  00702	89 11		 mov	 DWORD PTR [ecx], edx
  00704	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$44[ebp]
  0070a	83 c0 04	 add	 eax, 4
  0070d	89 85 68 ff ff
	ff		 mov	 DWORD PTR _p_tmp$44[ebp], eax
  00713	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$44[ebp]
  00719	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0071e	33 c0		 xor	 eax, eax
  00720	75 c2		 jne	 SHORT $LN108@P_NetArchi
$LN111@P_NetArchi:

; 142  : 
; 143  : 		/////////////////////
; 144  : 		// Race Mode Stuff //
; 145  : 		/////////////////////
; 146  : 		WRITEINT32(save_p, players[i].numboxes);

  00722	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00727	89 85 64 ff ff
	ff		 mov	 DWORD PTR _p_tmp$43[ebp], eax
  0072d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00734	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$43[ebp]
  0073a	8b 90 4c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+332]
  00740	89 11		 mov	 DWORD PTR [ecx], edx
  00742	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$43[ebp]
  00748	83 c0 04	 add	 eax, 4
  0074b	89 85 64 ff ff
	ff		 mov	 DWORD PTR _p_tmp$43[ebp], eax
  00751	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$43[ebp]
  00757	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0075c	33 c0		 xor	 eax, eax
  0075e	75 c2		 jne	 SHORT $LN111@P_NetArchi
$LN114@P_NetArchi:

; 147  : 		WRITEINT32(save_p, players[i].totalring);

  00760	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00765	89 85 60 ff ff
	ff		 mov	 DWORD PTR _p_tmp$42[ebp], eax
  0076b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00772	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$42[ebp]
  00778	8b 90 50 01 00
	00		 mov	 edx, DWORD PTR _players[eax+336]
  0077e	89 11		 mov	 DWORD PTR [ecx], edx
  00780	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$42[ebp]
  00786	83 c0 04	 add	 eax, 4
  00789	89 85 60 ff ff
	ff		 mov	 DWORD PTR _p_tmp$42[ebp], eax
  0078f	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$42[ebp]
  00795	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0079a	33 c0		 xor	 eax, eax
  0079c	75 c2		 jne	 SHORT $LN114@P_NetArchi
$LN117@P_NetArchi:

; 148  : 		WRITEUINT32(save_p, players[i].realtime);

  0079e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007a3	89 85 5c ff ff
	ff		 mov	 DWORD PTR _p_tmp$41[ebp], eax
  007a9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007b0	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$41[ebp]
  007b6	8b 90 54 01 00
	00		 mov	 edx, DWORD PTR _players[eax+340]
  007bc	89 11		 mov	 DWORD PTR [ecx], edx
  007be	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$41[ebp]
  007c4	83 c0 04	 add	 eax, 4
  007c7	89 85 5c ff ff
	ff		 mov	 DWORD PTR _p_tmp$41[ebp], eax
  007cd	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$41[ebp]
  007d3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  007d8	33 c0		 xor	 eax, eax
  007da	75 c2		 jne	 SHORT $LN117@P_NetArchi
$LN120@P_NetArchi:

; 149  : 		WRITEUINT32(save_p, players[i].racescore);

  007dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  007e1	89 85 58 ff ff
	ff		 mov	 DWORD PTR _p_tmp$40[ebp], eax
  007e7	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007ee	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$40[ebp]
  007f4	8b 90 58 01 00
	00		 mov	 edx, DWORD PTR _players[eax+344]
  007fa	89 11		 mov	 DWORD PTR [ecx], edx
  007fc	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$40[ebp]
  00802	83 c0 04	 add	 eax, 4
  00805	89 85 58 ff ff
	ff		 mov	 DWORD PTR _p_tmp$40[ebp], eax
  0080b	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$40[ebp]
  00811	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00816	33 c0		 xor	 eax, eax
  00818	75 c2		 jne	 SHORT $LN120@P_NetArchi
$LN123@P_NetArchi:

; 150  : 		WRITEUINT32(save_p, players[i].laps);

  0081a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0081f	89 85 54 ff ff
	ff		 mov	 DWORD PTR _p_tmp$39[ebp], eax
  00825	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0082c	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$39[ebp]
  00832	8b 90 5c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+348]
  00838	89 11		 mov	 DWORD PTR [ecx], edx
  0083a	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$39[ebp]
  00840	83 c0 04	 add	 eax, 4
  00843	89 85 54 ff ff
	ff		 mov	 DWORD PTR _p_tmp$39[ebp], eax
  00849	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$39[ebp]
  0084f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00854	33 c0		 xor	 eax, eax
  00856	75 c2		 jne	 SHORT $LN123@P_NetArchi
$LN126@P_NetArchi:

; 151  : 
; 152  : 		////////////////////
; 153  : 		// CTF Mode Stuff //
; 154  : 		////////////////////
; 155  : 		WRITEINT32(save_p, players[i].ctfteam);

  00858	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0085d	89 85 50 ff ff
	ff		 mov	 DWORD PTR _p_tmp$38[ebp], eax
  00863	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0086a	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$38[ebp]
  00870	8b 90 60 01 00
	00		 mov	 edx, DWORD PTR _players[eax+352]
  00876	89 11		 mov	 DWORD PTR [ecx], edx
  00878	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$38[ebp]
  0087e	83 c0 04	 add	 eax, 4
  00881	89 85 50 ff ff
	ff		 mov	 DWORD PTR _p_tmp$38[ebp], eax
  00887	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$38[ebp]
  0088d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00892	33 c0		 xor	 eax, eax
  00894	75 c2		 jne	 SHORT $LN126@P_NetArchi
$LN129@P_NetArchi:

; 156  : 		WRITEUINT16(save_p, players[i].gotflag);

  00896	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0089b	89 85 4c ff ff
	ff		 mov	 DWORD PTR _p_tmp$37[ebp], eax
  008a1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008a8	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$37[ebp]
  008ae	66 8b 90 64 01
	00 00		 mov	 dx, WORD PTR _players[eax+356]
  008b5	66 89 11	 mov	 WORD PTR [ecx], dx
  008b8	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$37[ebp]
  008be	83 c0 02	 add	 eax, 2
  008c1	89 85 4c ff ff
	ff		 mov	 DWORD PTR _p_tmp$37[ebp], eax
  008c7	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$37[ebp]
  008cd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  008d2	33 c0		 xor	 eax, eax
  008d4	75 c0		 jne	 SHORT $LN129@P_NetArchi
$LN132@P_NetArchi:

; 157  : 
; 158  : 		WRITEINT32(save_p, players[i].dbginfo);

  008d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  008db	89 85 48 ff ff
	ff		 mov	 DWORD PTR _p_tmp$36[ebp], eax
  008e1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008e8	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$36[ebp]
  008ee	8b 90 68 01 00
	00		 mov	 edx, DWORD PTR _players[eax+360]
  008f4	89 11		 mov	 DWORD PTR [ecx], edx
  008f6	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$36[ebp]
  008fc	83 c0 04	 add	 eax, 4
  008ff	89 85 48 ff ff
	ff		 mov	 DWORD PTR _p_tmp$36[ebp], eax
  00905	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$36[ebp]
  0090b	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00910	33 c0		 xor	 eax, eax
  00912	75 c2		 jne	 SHORT $LN132@P_NetArchi
$LN135@P_NetArchi:

; 159  : 		WRITEINT32(save_p, players[i].emeraldhunt);

  00914	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00919	89 85 44 ff ff
	ff		 mov	 DWORD PTR _p_tmp$35[ebp], eax
  0091f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00926	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$35[ebp]
  0092c	8b 90 6c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+364]
  00932	89 11		 mov	 DWORD PTR [ecx], edx
  00934	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$35[ebp]
  0093a	83 c0 04	 add	 eax, 4
  0093d	89 85 44 ff ff
	ff		 mov	 DWORD PTR _p_tmp$35[ebp], eax
  00943	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$35[ebp]
  00949	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0094e	33 c0		 xor	 eax, eax
  00950	75 c2		 jne	 SHORT $LN135@P_NetArchi
$LN138@P_NetArchi:

; 160  : 
; 161  : 		WRITEINT32(save_p, players[i].weapondelay);

  00952	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00957	89 85 40 ff ff
	ff		 mov	 DWORD PTR _p_tmp$34[ebp], eax
  0095d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00964	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$34[ebp]
  0096a	8b 90 70 01 00
	00		 mov	 edx, DWORD PTR _players[eax+368]
  00970	89 11		 mov	 DWORD PTR [ecx], edx
  00972	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$34[ebp]
  00978	83 c0 04	 add	 eax, 4
  0097b	89 85 40 ff ff
	ff		 mov	 DWORD PTR _p_tmp$34[ebp], eax
  00981	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$34[ebp]
  00987	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0098c	33 c0		 xor	 eax, eax
  0098e	75 c2		 jne	 SHORT $LN138@P_NetArchi
$LN141@P_NetArchi:

; 162  : 		WRITEINT32(save_p, players[i].tossdelay);

  00990	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00995	89 85 3c ff ff
	ff		 mov	 DWORD PTR _p_tmp$33[ebp], eax
  0099b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009a2	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$33[ebp]
  009a8	8b 90 74 01 00
	00		 mov	 edx, DWORD PTR _players[eax+372]
  009ae	89 11		 mov	 DWORD PTR [ecx], edx
  009b0	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$33[ebp]
  009b6	83 c0 04	 add	 eax, 4
  009b9	89 85 3c ff ff
	ff		 mov	 DWORD PTR _p_tmp$33[ebp], eax
  009bf	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$33[ebp]
  009c5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  009ca	33 c0		 xor	 eax, eax
  009cc	75 c2		 jne	 SHORT $LN141@P_NetArchi
$LN144@P_NetArchi:

; 163  : 		WRITEINT32(save_p, players[i].shielddelay);

  009ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  009d3	89 85 38 ff ff
	ff		 mov	 DWORD PTR _p_tmp$32[ebp], eax
  009d9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009e0	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$32[ebp]
  009e6	8b 90 78 01 00
	00		 mov	 edx, DWORD PTR _players[eax+376]
  009ec	89 11		 mov	 DWORD PTR [ecx], edx
  009ee	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$32[ebp]
  009f4	83 c0 04	 add	 eax, 4
  009f7	89 85 38 ff ff
	ff		 mov	 DWORD PTR _p_tmp$32[ebp], eax
  009fd	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$32[ebp]
  00a03	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00a08	33 c0		 xor	 eax, eax
  00a0a	75 c2		 jne	 SHORT $LN144@P_NetArchi
$LN147@P_NetArchi:

; 164  : 		WRITEUINT32(save_p, players[i].taunttimer);

  00a0c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a11	89 85 34 ff ff
	ff		 mov	 DWORD PTR _p_tmp$31[ebp], eax
  00a17	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00a1e	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$31[ebp]
  00a24	8b 90 7c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+380]
  00a2a	89 11		 mov	 DWORD PTR [ecx], edx
  00a2c	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$31[ebp]
  00a32	83 c0 04	 add	 eax, 4
  00a35	89 85 34 ff ff
	ff		 mov	 DWORD PTR _p_tmp$31[ebp], eax
  00a3b	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$31[ebp]
  00a41	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00a46	33 c0		 xor	 eax, eax
  00a48	75 c2		 jne	 SHORT $LN147@P_NetArchi
$LN150@P_NetArchi:

; 165  : 
; 166  : 		WRITEUINT32(save_p, players[i].starposttime);

  00a4a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a4f	89 85 30 ff ff
	ff		 mov	 DWORD PTR _p_tmp$30[ebp], eax
  00a55	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00a5c	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$30[ebp]
  00a62	8b 90 90 01 00
	00		 mov	 edx, DWORD PTR _players[eax+400]
  00a68	89 11		 mov	 DWORD PTR [ecx], edx
  00a6a	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  00a70	83 c0 04	 add	 eax, 4
  00a73	89 85 30 ff ff
	ff		 mov	 DWORD PTR _p_tmp$30[ebp], eax
  00a79	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$30[ebp]
  00a7f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00a84	33 c0		 xor	 eax, eax
  00a86	75 c2		 jne	 SHORT $LN150@P_NetArchi
$LN153@P_NetArchi:

; 167  : 		WRITEINT32(save_p, players[i].starpostx);

  00a88	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00a8d	89 85 2c ff ff
	ff		 mov	 DWORD PTR _p_tmp$29[ebp], eax
  00a93	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00a9a	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$29[ebp]
  00aa0	8b 90 80 01 00
	00		 mov	 edx, DWORD PTR _players[eax+384]
  00aa6	89 11		 mov	 DWORD PTR [ecx], edx
  00aa8	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  00aae	83 c0 04	 add	 eax, 4
  00ab1	89 85 2c ff ff
	ff		 mov	 DWORD PTR _p_tmp$29[ebp], eax
  00ab7	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$29[ebp]
  00abd	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00ac2	33 c0		 xor	 eax, eax
  00ac4	75 c2		 jne	 SHORT $LN153@P_NetArchi
$LN156@P_NetArchi:

; 168  : 		WRITEINT32(save_p, players[i].starposty);

  00ac6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00acb	89 85 28 ff ff
	ff		 mov	 DWORD PTR _p_tmp$28[ebp], eax
  00ad1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00ad8	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$28[ebp]
  00ade	8b 90 84 01 00
	00		 mov	 edx, DWORD PTR _players[eax+388]
  00ae4	89 11		 mov	 DWORD PTR [ecx], edx
  00ae6	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  00aec	83 c0 04	 add	 eax, 4
  00aef	89 85 28 ff ff
	ff		 mov	 DWORD PTR _p_tmp$28[ebp], eax
  00af5	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$28[ebp]
  00afb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00b00	33 c0		 xor	 eax, eax
  00b02	75 c2		 jne	 SHORT $LN156@P_NetArchi
$LN159@P_NetArchi:

; 169  : 		WRITEINT32(save_p, players[i].starpostz);

  00b04	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00b09	89 85 24 ff ff
	ff		 mov	 DWORD PTR _p_tmp$27[ebp], eax
  00b0f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00b16	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$27[ebp]
  00b1c	8b 90 88 01 00
	00		 mov	 edx, DWORD PTR _players[eax+392]
  00b22	89 11		 mov	 DWORD PTR [ecx], edx
  00b24	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  00b2a	83 c0 04	 add	 eax, 4
  00b2d	89 85 24 ff ff
	ff		 mov	 DWORD PTR _p_tmp$27[ebp], eax
  00b33	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$27[ebp]
  00b39	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00b3e	33 c0		 xor	 eax, eax
  00b40	75 c2		 jne	 SHORT $LN159@P_NetArchi
$LN162@P_NetArchi:

; 170  : 		WRITEINT32(save_p, players[i].starpostnum);

  00b42	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00b47	89 85 20 ff ff
	ff		 mov	 DWORD PTR _p_tmp$26[ebp], eax
  00b4d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00b54	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$26[ebp]
  00b5a	8b 90 8c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+396]
  00b60	89 11		 mov	 DWORD PTR [ecx], edx
  00b62	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  00b68	83 c0 04	 add	 eax, 4
  00b6b	89 85 20 ff ff
	ff		 mov	 DWORD PTR _p_tmp$26[ebp], eax
  00b71	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$26[ebp]
  00b77	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00b7c	33 c0		 xor	 eax, eax
  00b7e	75 c2		 jne	 SHORT $LN162@P_NetArchi
$LN165@P_NetArchi:

; 171  : 		WRITEANGLE(save_p, players[i].starpostangle);

  00b80	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00b85	89 85 1c ff ff
	ff		 mov	 DWORD PTR _p_tmp$25[ebp], eax
  00b8b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00b92	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$25[ebp]
  00b98	8b 90 94 01 00
	00		 mov	 edx, DWORD PTR _players[eax+404]
  00b9e	89 11		 mov	 DWORD PTR [ecx], edx
  00ba0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  00ba6	83 c0 04	 add	 eax, 4
  00ba9	89 85 1c ff ff
	ff		 mov	 DWORD PTR _p_tmp$25[ebp], eax
  00baf	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$25[ebp]
  00bb5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00bba	33 c0		 xor	 eax, eax
  00bbc	75 c2		 jne	 SHORT $LN165@P_NetArchi
$LN168@P_NetArchi:

; 172  : 		WRITEUINT32(save_p, players[i].starpostbit);

  00bbe	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00bc3	89 85 18 ff ff
	ff		 mov	 DWORD PTR _p_tmp$24[ebp], eax
  00bc9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00bd0	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$24[ebp]
  00bd6	8b 90 98 01 00
	00		 mov	 edx, DWORD PTR _players[eax+408]
  00bdc	89 11		 mov	 DWORD PTR [ecx], edx
  00bde	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  00be4	83 c0 04	 add	 eax, 4
  00be7	89 85 18 ff ff
	ff		 mov	 DWORD PTR _p_tmp$24[ebp], eax
  00bed	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$24[ebp]
  00bf3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00bf8	33 c0		 xor	 eax, eax
  00bfa	75 c2		 jne	 SHORT $LN168@P_NetArchi
$LN171@P_NetArchi:

; 173  : 
; 174  : 		WRITEANGLE(save_p, players[i].angle_pos);

  00bfc	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00c01	89 85 14 ff ff
	ff		 mov	 DWORD PTR _p_tmp$23[ebp], eax
  00c07	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00c0e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$23[ebp]
  00c14	8b 90 9c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+412]
  00c1a	89 11		 mov	 DWORD PTR [ecx], edx
  00c1c	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  00c22	83 c0 04	 add	 eax, 4
  00c25	89 85 14 ff ff
	ff		 mov	 DWORD PTR _p_tmp$23[ebp], eax
  00c2b	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$23[ebp]
  00c31	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00c36	33 c0		 xor	 eax, eax
  00c38	75 c2		 jne	 SHORT $LN171@P_NetArchi
$LN174@P_NetArchi:

; 175  : 		WRITEANGLE(save_p, players[i].old_angle_pos);

  00c3a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00c3f	89 85 10 ff ff
	ff		 mov	 DWORD PTR _p_tmp$22[ebp], eax
  00c45	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00c4c	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$22[ebp]
  00c52	8b 90 a0 01 00
	00		 mov	 edx, DWORD PTR _players[eax+416]
  00c58	89 11		 mov	 DWORD PTR [ecx], edx
  00c5a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  00c60	83 c0 04	 add	 eax, 4
  00c63	89 85 10 ff ff
	ff		 mov	 DWORD PTR _p_tmp$22[ebp], eax
  00c69	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$22[ebp]
  00c6f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00c74	33 c0		 xor	 eax, eax
  00c76	75 c2		 jne	 SHORT $LN174@P_NetArchi
$LN177@P_NetArchi:

; 176  : 
; 177  : 		WRITEINT32(save_p, players[i].flyangle);

  00c78	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00c7d	89 85 0c ff ff
	ff		 mov	 DWORD PTR _p_tmp$21[ebp], eax
  00c83	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00c8a	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$21[ebp]
  00c90	8b 90 b0 01 00
	00		 mov	 edx, DWORD PTR _players[eax+432]
  00c96	89 11		 mov	 DWORD PTR [ecx], edx
  00c98	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  00c9e	83 c0 04	 add	 eax, 4
  00ca1	89 85 0c ff ff
	ff		 mov	 DWORD PTR _p_tmp$21[ebp], eax
  00ca7	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$21[ebp]
  00cad	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00cb2	33 c0		 xor	 eax, eax
  00cb4	75 c2		 jne	 SHORT $LN177@P_NetArchi
$LN180@P_NetArchi:

; 178  : 		WRITEUINT32(save_p, players[i].drilltimer);

  00cb6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00cbb	89 85 08 ff ff
	ff		 mov	 DWORD PTR _p_tmp$20[ebp], eax
  00cc1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00cc8	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$20[ebp]
  00cce	8b 90 b4 01 00
	00		 mov	 edx, DWORD PTR _players[eax+436]
  00cd4	89 11		 mov	 DWORD PTR [ecx], edx
  00cd6	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  00cdc	83 c0 04	 add	 eax, 4
  00cdf	89 85 08 ff ff
	ff		 mov	 DWORD PTR _p_tmp$20[ebp], eax
  00ce5	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$20[ebp]
  00ceb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00cf0	33 c0		 xor	 eax, eax
  00cf2	75 c2		 jne	 SHORT $LN180@P_NetArchi
$LN183@P_NetArchi:

; 179  : 		WRITEINT32(save_p, players[i].linkcount);

  00cf4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00cf9	89 85 04 ff ff
	ff		 mov	 DWORD PTR _p_tmp$19[ebp], eax
  00cff	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00d06	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$19[ebp]
  00d0c	8b 90 b8 01 00
	00		 mov	 edx, DWORD PTR _players[eax+440]
  00d12	89 11		 mov	 DWORD PTR [ecx], edx
  00d14	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  00d1a	83 c0 04	 add	 eax, 4
  00d1d	89 85 04 ff ff
	ff		 mov	 DWORD PTR _p_tmp$19[ebp], eax
  00d23	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$19[ebp]
  00d29	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00d2e	33 c0		 xor	 eax, eax
  00d30	75 c2		 jne	 SHORT $LN183@P_NetArchi
$LN186@P_NetArchi:

; 180  : 		WRITEUINT32(save_p, players[i].linktimer);

  00d32	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00d37	89 85 00 ff ff
	ff		 mov	 DWORD PTR _p_tmp$18[ebp], eax
  00d3d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00d44	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$18[ebp]
  00d4a	8b 90 bc 01 00
	00		 mov	 edx, DWORD PTR _players[eax+444]
  00d50	89 11		 mov	 DWORD PTR [ecx], edx
  00d52	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  00d58	83 c0 04	 add	 eax, 4
  00d5b	89 85 00 ff ff
	ff		 mov	 DWORD PTR _p_tmp$18[ebp], eax
  00d61	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _p_tmp$18[ebp]
  00d67	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00d6c	33 c0		 xor	 eax, eax
  00d6e	75 c2		 jne	 SHORT $LN186@P_NetArchi
$LN189@P_NetArchi:

; 181  : 		WRITEINT32(save_p, players[i].anotherflyangle);

  00d70	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00d75	89 85 fc fe ff
	ff		 mov	 DWORD PTR _p_tmp$17[ebp], eax
  00d7b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00d82	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$17[ebp]
  00d88	8b 90 c0 01 00
	00		 mov	 edx, DWORD PTR _players[eax+448]
  00d8e	89 11		 mov	 DWORD PTR [ecx], edx
  00d90	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  00d96	83 c0 04	 add	 eax, 4
  00d99	89 85 fc fe ff
	ff		 mov	 DWORD PTR _p_tmp$17[ebp], eax
  00d9f	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$17[ebp]
  00da5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00daa	33 c0		 xor	 eax, eax
  00dac	75 c2		 jne	 SHORT $LN189@P_NetArchi
$LN192@P_NetArchi:

; 182  : 		WRITEUINT32(save_p, players[i].nightstime);

  00dae	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00db3	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _p_tmp$16[ebp], eax
  00db9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00dc0	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$16[ebp]
  00dc6	8b 90 c4 01 00
	00		 mov	 edx, DWORD PTR _players[eax+452]
  00dcc	89 11		 mov	 DWORD PTR [ecx], edx
  00dce	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  00dd4	83 c0 04	 add	 eax, 4
  00dd7	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _p_tmp$16[ebp], eax
  00ddd	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$16[ebp]
  00de3	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00de8	33 c0		 xor	 eax, eax
  00dea	75 c2		 jne	 SHORT $LN192@P_NetArchi
$LN195@P_NetArchi:

; 183  : 		WRITEUINT32(save_p, players[i].bumpertime);

  00dec	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00df1	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _p_tmp$15[ebp], eax
  00df7	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00dfe	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$15[ebp]
  00e04	8b 90 ac 01 00
	00		 mov	 edx, DWORD PTR _players[eax+428]
  00e0a	89 11		 mov	 DWORD PTR [ecx], edx
  00e0c	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  00e12	83 c0 04	 add	 eax, 4
  00e15	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _p_tmp$15[ebp], eax
  00e1b	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$15[ebp]
  00e21	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00e26	33 c0		 xor	 eax, eax
  00e28	75 c2		 jne	 SHORT $LN195@P_NetArchi
$LN198@P_NetArchi:

; 184  : 		WRITEINT32(save_p, players[i].drillmeter);

  00e2a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00e2f	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00e35	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00e3c	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$14[ebp]
  00e42	8b 90 c8 01 00
	00		 mov	 edx, DWORD PTR _players[eax+456]
  00e48	89 11		 mov	 DWORD PTR [ecx], edx
  00e4a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00e50	83 c0 04	 add	 eax, 4
  00e53	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _p_tmp$14[ebp], eax
  00e59	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$14[ebp]
  00e5f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00e64	33 c0		 xor	 eax, eax
  00e66	75 c2		 jne	 SHORT $LN198@P_NetArchi
$LN201@P_NetArchi:

; 185  : 		WRITEUINT8(save_p, players[i].drilldelay);

  00e68	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00e6d	89 85 ec fe ff
	ff		 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00e73	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00e7a	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$13[ebp]
  00e80	8a 90 cc 01 00
	00		 mov	 dl, BYTE PTR _players[eax+460]
  00e86	88 11		 mov	 BYTE PTR [ecx], dl
  00e88	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00e8e	83 c0 01	 add	 eax, 1
  00e91	89 85 ec fe ff
	ff		 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00e97	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00e9d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00ea2	33 c0		 xor	 eax, eax
  00ea4	75 c2		 jne	 SHORT $LN201@P_NetArchi
$LN204@P_NetArchi:

; 186  : 		WRITEUINT8(save_p, players[i].bonustime);

  00ea6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00eab	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00eb1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00eb8	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$12[ebp]
  00ebe	8a 90 cd 01 00
	00		 mov	 dl, BYTE PTR _players[eax+461]
  00ec4	88 11		 mov	 BYTE PTR [ecx], dl
  00ec6	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00ecc	83 c0 01	 add	 eax, 1
  00ecf	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _p_tmp$12[ebp], eax
  00ed5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$12[ebp]
  00edb	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00ee0	33 c0		 xor	 eax, eax
  00ee2	75 c2		 jne	 SHORT $LN204@P_NetArchi
$LN207@P_NetArchi:

; 187  : 		WRITEUINT8(save_p, players[i].mare);

  00ee4	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00ee9	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00eef	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00ef6	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$11[ebp]
  00efc	8a 90 d4 01 00
	00		 mov	 dl, BYTE PTR _players[eax+468]
  00f02	88 11		 mov	 BYTE PTR [ecx], dl
  00f04	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00f0a	83 c0 01	 add	 eax, 1
  00f0d	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _p_tmp$11[ebp], eax
  00f13	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00f19	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00f1e	33 c0		 xor	 eax, eax
  00f20	75 c2		 jne	 SHORT $LN207@P_NetArchi

; 188  : 
; 189  : 		if (players[i].capsule)

  00f22	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00f29	83 b8 d0 01 00
	00 00		 cmp	 DWORD PTR _players[eax+464], 0
  00f30	74 0b		 je	 SHORT $LN243@P_NetArchi

; 190  : 			flags |= CAPSULE;

  00f32	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  00f36	83 c8 04	 or	 eax, 4
  00f39	66 89 45 f4	 mov	 WORD PTR _flags$[ebp], ax
$LN243@P_NetArchi:

; 191  : 
; 192  : 		if (players[i].awayviewmobj)

  00f3d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00f44	83 b8 e8 01 00
	00 00		 cmp	 DWORD PTR _players[eax+488], 0
  00f4b	74 0b		 je	 SHORT $LN244@P_NetArchi

; 193  : 			flags |= AWAYVIEW;

  00f4d	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  00f51	83 c8 08	 or	 eax, 8
  00f54	66 89 45 f4	 mov	 WORD PTR _flags$[ebp], ax
$LN244@P_NetArchi:

; 194  : 
; 195  : 		if (players[i].axis1)

  00f58	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00f5f	83 b8 a4 01 00
	00 00		 cmp	 DWORD PTR _players[eax+420], 0
  00f66	74 0b		 je	 SHORT $LN245@P_NetArchi

; 196  : 			flags |= FIRSTAXIS;

  00f68	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  00f6c	83 c8 10	 or	 eax, 16			; 00000010H
  00f6f	66 89 45 f4	 mov	 WORD PTR _flags$[ebp], ax
$LN245@P_NetArchi:

; 197  : 
; 198  : 		if (players[i].axis2)

  00f73	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00f7a	83 b8 a8 01 00
	00 00		 cmp	 DWORD PTR _players[eax+424], 0
  00f81	74 0b		 je	 SHORT $LN246@P_NetArchi

; 199  : 			flags |= SECONDAXIS;

  00f83	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  00f87	83 c8 20	 or	 eax, 32			; 00000020H
  00f8a	66 89 45 f4	 mov	 WORD PTR _flags$[ebp], ax
$LN246@P_NetArchi:

; 200  : 
; 201  : 		WRITEINT16(save_p, players[i].lastsidehit);

  00f8e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00f93	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00f99	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00fa0	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$10[ebp]
  00fa6	66 8b 90 d6 01
	00 00		 mov	 dx, WORD PTR _players[eax+470]
  00fad	66 89 11	 mov	 WORD PTR [ecx], dx
  00fb0	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00fb6	83 c0 02	 add	 eax, 2
  00fb9	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00fbf	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00fc5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00fca	33 c0		 xor	 eax, eax
  00fcc	75 c0		 jne	 SHORT $LN246@P_NetArchi
$LN213@P_NetArchi:

; 202  : 		WRITEINT16(save_p, players[i].lastlinehit);

  00fce	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00fd3	89 85 dc fe ff
	ff		 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00fd9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00fe0	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$9[ebp]
  00fe6	66 8b 90 d8 01
	00 00		 mov	 dx, WORD PTR _players[eax+472]
  00fed	66 89 11	 mov	 WORD PTR [ecx], dx
  00ff0	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00ff6	83 c0 02	 add	 eax, 2
  00ff9	89 85 dc fe ff
	ff		 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00fff	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  01005	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0100a	33 c0		 xor	 eax, eax
  0100c	75 c0		 jne	 SHORT $LN213@P_NetArchi
$LN216@P_NetArchi:

; 203  : 
; 204  : 
; 205  : 		WRITEINT32(save_p, players[i].losscount);

  0100e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  01013	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _p_tmp$8[ebp], eax
  01019	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  01020	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$8[ebp]
  01026	8b 90 dc 01 00
	00		 mov	 edx, DWORD PTR _players[eax+476]
  0102c	89 11		 mov	 DWORD PTR [ecx], edx
  0102e	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  01034	83 c0 04	 add	 eax, 4
  01037	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0103d	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  01043	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  01048	33 c0		 xor	 eax, eax
  0104a	75 c2		 jne	 SHORT $LN216@P_NetArchi
$LN219@P_NetArchi:

; 206  : 
; 207  : 		WRITEINT32(save_p, players[i].onconveyor);

  0104c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  01051	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _p_tmp$7[ebp], eax
  01057	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0105e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$7[ebp]
  01064	8b 90 e4 01 00
	00		 mov	 edx, DWORD PTR _players[eax+484]
  0106a	89 11		 mov	 DWORD PTR [ecx], edx
  0106c	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  01072	83 c0 04	 add	 eax, 4
  01075	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _p_tmp$7[ebp], eax
  0107b	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  01081	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  01086	33 c0		 xor	 eax, eax
  01088	75 c2		 jne	 SHORT $LN219@P_NetArchi
$LN222@P_NetArchi:

; 208  : 
; 209  : 		WRITEUINT32(save_p, players[i].jointime);

  0108a	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0108f	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _p_tmp$6[ebp], eax
  01095	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0109c	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _p_tmp$6[ebp]
  010a2	8b 90 f4 01 00
	00		 mov	 edx, DWORD PTR _players[eax+500]
  010a8	89 11		 mov	 DWORD PTR [ecx], edx
  010aa	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  010b0	83 c0 04	 add	 eax, 4
  010b3	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _p_tmp$6[ebp], eax
  010b9	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  010bf	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  010c4	33 c0		 xor	 eax, eax
  010c6	75 c2		 jne	 SHORT $LN222@P_NetArchi
$LN225@P_NetArchi:

; 210  : 
; 211  : 		WRITEUINT16(save_p, flags);

  010c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  010cd	89 85 cc fe ff
	ff		 mov	 DWORD PTR _p_tmp$5[ebp], eax
  010d3	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  010d9	66 8b 4d f4	 mov	 cx, WORD PTR _flags$[ebp]
  010dd	66 89 08	 mov	 WORD PTR [eax], cx
  010e0	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  010e6	83 c0 02	 add	 eax, 2
  010e9	89 85 cc fe ff
	ff		 mov	 DWORD PTR _p_tmp$5[ebp], eax
  010ef	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  010f5	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  010fa	33 c0		 xor	 eax, eax
  010fc	75 ca		 jne	 SHORT $LN225@P_NetArchi

; 212  : 
; 213  : 		if (flags & CAPSULE)

  010fe	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  01102	83 e0 04	 and	 eax, 4
  01105	74 44		 je	 SHORT $LN231@P_NetArchi
$LN232@P_NetArchi:

; 214  : 			WRITEUINT32(save_p, players[i].capsule->mobjnum);

  01107	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0110c	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _p_tmp$4[ebp], eax
  01112	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  01119	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+464]
  0111f	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _p_tmp$4[ebp]
  01125	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]
  0112b	89 02		 mov	 DWORD PTR [edx], eax
  0112d	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  01133	83 c0 04	 add	 eax, 4
  01136	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0113c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  01142	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  01147	33 c0		 xor	 eax, eax
  01149	75 bc		 jne	 SHORT $LN232@P_NetArchi
$LN231@P_NetArchi:

; 215  : 
; 216  : 		if (flags & FIRSTAXIS)

  0114b	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  0114f	83 e0 10	 and	 eax, 16			; 00000010H
  01152	74 44		 je	 SHORT $LN234@P_NetArchi
$LN235@P_NetArchi:

; 217  : 			WRITEUINT32(save_p, players[i].axis1->mobjnum);

  01154	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  01159	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0115f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  01166	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+420]
  0116c	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _p_tmp$3[ebp]
  01172	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]
  01178	89 02		 mov	 DWORD PTR [edx], eax
  0117a	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  01180	83 c0 04	 add	 eax, 4
  01183	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _p_tmp$3[ebp], eax
  01189	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0118f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  01194	33 c0		 xor	 eax, eax
  01196	75 bc		 jne	 SHORT $LN235@P_NetArchi
$LN234@P_NetArchi:

; 218  : 
; 219  : 		if (flags & SECONDAXIS)

  01198	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  0119c	83 e0 20	 and	 eax, 32			; 00000020H
  0119f	74 44		 je	 SHORT $LN237@P_NetArchi
$LN238@P_NetArchi:

; 220  : 			WRITEUINT32(save_p, players[i].axis2->mobjnum);

  011a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  011a6	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _p_tmp$2[ebp], eax
  011ac	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  011b3	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+424]
  011b9	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _p_tmp$2[ebp]
  011bf	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]
  011c5	89 02		 mov	 DWORD PTR [edx], eax
  011c7	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  011cd	83 c0 04	 add	 eax, 4
  011d0	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _p_tmp$2[ebp], eax
  011d6	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  011dc	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  011e1	33 c0		 xor	 eax, eax
  011e3	75 bc		 jne	 SHORT $LN238@P_NetArchi
$LN237@P_NetArchi:

; 221  : 
; 222  : 		if (flags & AWAYVIEW)

  011e5	0f b7 45 f4	 movzx	 eax, WORD PTR _flags$[ebp]
  011e9	83 e0 08	 and	 eax, 8
  011ec	74 44		 je	 SHORT $LN240@P_NetArchi
$LN241@P_NetArchi:

; 223  : 			WRITEUINT32(save_p, players[i].awayviewmobj->mobjnum);

  011ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  011f3	89 85 bc fe ff
	ff		 mov	 DWORD PTR _p_tmp$1[ebp], eax
  011f9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  01200	8b 88 e8 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+488]
  01206	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _p_tmp$1[ebp]
  0120c	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]
  01212	89 02		 mov	 DWORD PTR [edx], eax
  01214	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0121a	83 c0 04	 add	 eax, 4
  0121d	89 85 bc fe ff
	ff		 mov	 DWORD PTR _p_tmp$1[ebp], eax
  01223	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  01229	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0122e	33 c0		 xor	 eax, eax
  01230	75 bc		 jne	 SHORT $LN241@P_NetArchi
$LN240@P_NetArchi:

; 224  : 	}

  01232	e9 de ed ff ff	 jmp	 $LN2@P_NetArchi
$LN3@P_NetArchi:

; 225  : }

  01237	5f		 pop	 edi
  01238	5e		 pop	 esi
  01239	5b		 pop	 ebx
  0123a	8b e5		 mov	 esp, ebp
  0123c	5d		 pop	 ebp
  0123d	c3		 ret	 0
_P_NetArchivePlayers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_UnArchivePlayer
_TEXT	SEGMENT
_P_UnArchivePlayer PROC					; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 74   : 	savedata.skincolor = READUINT8(save_p);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0000e	8a 08		 mov	 cl, BYTE PTR [eax]
  00010	88 0d 00 00 00
	00		 mov	 BYTE PTR _savedata, cl
  00016	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0001c	83 c2 01	 add	 edx, 1
  0001f	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 75   : 	savedata.skin = READUINT8(save_p);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0002a	8a 08		 mov	 cl, BYTE PTR [eax]
  0002c	88 0d 01 00 00
	00		 mov	 BYTE PTR _savedata+1, cl
  00032	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00038	83 c2 01	 add	 edx, 1
  0003b	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 76   : 
; 77   : 	savedata.score = READINT32(save_p);

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	89 0d 04 00 00
	00		 mov	 DWORD PTR _savedata+4, ecx
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00054	83 c2 04	 add	 edx, 4
  00057	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 78   : 	savedata.lives = READINT32(save_p);

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	89 0d 08 00 00
	00		 mov	 DWORD PTR _savedata+8, ecx
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00070	83 c2 04	 add	 edx, 4
  00073	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 79   : 	savedata.continues = READINT32(save_p);

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	89 0d 0c 00 00
	00		 mov	 DWORD PTR _savedata+12, ecx
  00086	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0008c	83 c2 04	 add	 edx, 4
  0008f	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 80   : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_P_UnArchivePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_ArchivePlayer
_TEXT	SEGMENT
_p_tmp$1 = -24						; size = 4
_p_tmp$2 = -20						; size = 4
_p_tmp$3 = -16						; size = 4
_p_tmp$4 = -12						; size = 4
_p_tmp$5 = -8						; size = 4
_player$ = -4						; size = 4
_P_ArchivePlayer PROC					; COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 59   : 	const player_t *player = &players[consoleplayer];

  00009	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00013	05 00 00 00 00	 add	 eax, OFFSET _players
  00018	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax
$LN4@P_ArchiveP:

; 60   : 
; 61   : 	WRITEUINT8(save_p, player->skincolor);

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00020	89 45 f8	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00023	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00029	8a 91 b4 00 00
	00		 mov	 dl, BYTE PTR [ecx+180]
  0002f	88 10		 mov	 BYTE PTR [eax], dl
  00031	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0003d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00042	33 c0		 xor	 eax, eax
  00044	75 d5		 jne	 SHORT $LN4@P_ArchiveP
$LN3@P_ArchiveP:

; 62   : 	WRITEUINT8(save_p, player->skin);

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0004b	89 45 f4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0004e	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00054	8a 91 b8 00 00
	00		 mov	 dl, BYTE PTR [ecx+184]
  0005a	88 10		 mov	 BYTE PTR [eax], dl
  0005c	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	89 45 f4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00065	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00068	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0006d	33 c0		 xor	 eax, eax
  0006f	75 d5		 jne	 SHORT $LN3@P_ArchiveP
$LN6@P_ArchiveP:

; 63   : 
; 64   : 	WRITEUINT32(save_p, player->score);

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00076	89 45 f0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00079	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0007f	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00085	89 10		 mov	 DWORD PTR [eax], edx
  00087	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0008a	83 c0 04	 add	 eax, 4
  0008d	89 45 f0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00090	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00093	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00098	33 c0		 xor	 eax, eax
  0009a	75 d5		 jne	 SHORT $LN6@P_ArchiveP
$LN9@P_ArchiveP:

; 65   : 	WRITEINT32(save_p, player->lives);

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000a1	89 45 ec	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000a4	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000aa	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  000b0	89 10		 mov	 DWORD PTR [eax], edx
  000b2	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000b5	83 c0 04	 add	 eax, 4
  000b8	89 45 ec	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000bb	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000be	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000c3	33 c0		 xor	 eax, eax
  000c5	75 d5		 jne	 SHORT $LN9@P_ArchiveP
$LN12@P_ArchiveP:

; 66   : 	WRITEINT32(save_p, player->continues);

  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000cc	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000cf	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000d5	8b 91 04 01 00
	00		 mov	 edx, DWORD PTR [ecx+260]
  000db	89 10		 mov	 DWORD PTR [eax], edx
  000dd	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000e0	83 c0 04	 add	 eax, 4
  000e3	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000e6	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000e9	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000ee	33 c0		 xor	 eax, eax
  000f0	75 d5		 jne	 SHORT $LN12@P_ArchiveP

; 67   : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_P_ArchivePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_LoadNetGame
_TEXT	SEGMENT
tv71 = -72						; size = 4
tv70 = -68						; size = 4
_P_LoadNetGame PROC					; COMDAT

; 2917 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2918 : 	CV_LoadNetVars(&save_p);

  00009	68 00 00 00 00	 push	 OFFSET _save_p
  0000e	e8 00 00 00 00	 call	 _CV_LoadNetVars
  00013	83 c4 04	 add	 esp, 4

; 2919 : 	if (!P_NetUnArchiveMisc())

  00016	e8 00 00 00 00	 call	 _P_NetUnArchiveMisc
  0001b	85 c0		 test	 eax, eax
  0001d	75 04		 jne	 SHORT $LN2@P_LoadNetG

; 2920 : 		return false;

  0001f	33 c0		 xor	 eax, eax
  00021	eb 5d		 jmp	 SHORT $LN1@P_LoadNetG
$LN2@P_LoadNetG:

; 2921 : 	P_NetUnArchivePlayers();

  00023	e8 00 00 00 00	 call	 _P_NetUnArchivePlayers
  00028	90		 npad	 1

; 2922 : 	P_NetUnArchiveWorld();

  00029	e8 00 00 00 00	 call	 _P_NetUnArchiveWorld
  0002e	90		 npad	 1

; 2923 : #ifdef POLYOBJECTS
; 2924 : 	P_UnArchivePolyObjects();

  0002f	e8 00 00 00 00	 call	 _P_UnArchivePolyObjects
  00034	90		 npad	 1

; 2925 : #endif
; 2926 : 	P_NetUnArchiveThinkers();

  00035	e8 00 00 00 00	 call	 _P_NetUnArchiveThinkers
  0003a	90		 npad	 1

; 2927 : 	P_NetUnArchiveSpecials();

  0003b	e8 00 00 00 00	 call	 _P_NetUnArchiveSpecials
  00040	90		 npad	 1

; 2928 : 	P_RelinkPointers();

  00041	e8 00 00 00 00	 call	 _P_RelinkPointers
  00046	90		 npad	 1

; 2929 : 	P_FinishMobjs();

  00047	e8 00 00 00 00	 call	 _P_FinishMobjs
  0004c	90		 npad	 1

; 2930 : 
; 2931 : 	// The precipitation would normally be spawned in P_SetupLevel, which is called by
; 2932 : 	// P_NetUnArchiveMisc above. However, that would place it up before P_NetUnArchiveThinkers,
; 2933 : 	// so the thinkers would be deleted later. Therefore, P_SetupLevel will *not* spawn
; 2934 : 	// precipitation when loading a netgame save. Instead, precip has to be spawned here.
; 2935 : 	// This is done in P_NetUnArchiveSpecials now.
; 2936 : 
; 2937 : 	return READUINT8(save_p) == 0x1d;

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00052	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00055	89 4d bc	 mov	 DWORD PTR tv70[ebp], ecx
  00058	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0005e	83 c2 01	 add	 edx, 1
  00061	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00067	83 7d bc 1d	 cmp	 DWORD PTR tv70[ebp], 29	; 0000001dH
  0006b	75 09		 jne	 SHORT $LN4@P_LoadNetG
  0006d	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN5@P_LoadNetG
$LN4@P_LoadNetG:
  00076	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN5@P_LoadNetG:
  0007d	8b 45 b8	 mov	 eax, DWORD PTR tv71[ebp]
$LN1@P_LoadNetG:

; 2938 : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_P_LoadNetGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_LoadGame
_TEXT	SEGMENT
tv73 = -72						; size = 4
tv72 = -68						; size = 4
_mapoverride$ = 8					; size = 2
_P_LoadGame PROC					; COMDAT

; 2905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2906 : 	if (gamestate == GS_INTERMISSION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00010	75 06		 jne	 SHORT $LN2@P_LoadGame

; 2907 : 		Y_EndIntermission();

  00012	e8 00 00 00 00	 call	 _Y_EndIntermission
  00017	90		 npad	 1
$LN2@P_LoadGame:

; 2908 : 	G_SetGamestate(GS_NULL); // should be changed in P_UnArchiveMisc

  00018	6a 00		 push	 0
  0001a	e8 00 00 00 00	 call	 _G_SetGamestate
  0001f	83 c4 04	 add	 esp, 4

; 2909 : 
; 2910 : 	if (!P_UnArchiveSPGame(mapoverride))

  00022	0f b7 45 08	 movzx	 eax, WORD PTR _mapoverride$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _P_UnArchiveSPGame
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	75 04		 jne	 SHORT $LN3@P_LoadGame

; 2911 : 		return false;

  00033	33 c0		 xor	 eax, eax
  00035	eb 33		 jmp	 SHORT $LN1@P_LoadGame
$LN3@P_LoadGame:

; 2912 : 
; 2913 : 	return READUINT8(save_p) == 0x1d;

  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0003c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0003f	89 4d bc	 mov	 DWORD PTR tv72[ebp], ecx
  00042	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  00048	83 c2 01	 add	 edx, 1
  0004b	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx
  00051	83 7d bc 1d	 cmp	 DWORD PTR tv72[ebp], 29	; 0000001dH
  00055	75 09		 jne	 SHORT $LN5@P_LoadGame
  00057	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0005e	eb 07		 jmp	 SHORT $LN6@P_LoadGame
$LN5@P_LoadGame:
  00060	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN6@P_LoadGame:
  00067	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]
$LN1@P_LoadGame:

; 2914 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_P_LoadGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_SaveNetGame
_TEXT	SEGMENT
_p_tmp$1 = -16						; size = 4
_i$ = -12						; size = 4
_mobj$ = -8						; size = 4
_th$ = -4						; size = 4
_P_SaveNetGame PROC					; COMDAT

; 2875 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2876 : 	thinker_t *th;
; 2877 : 	mobj_t *mobj;
; 2878 : 	INT32 i = 0;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 2879 : 
; 2880 : 	CV_SaveNetVars(&save_p);

  00010	68 00 00 00 00	 push	 OFFSET _save_p
  00015	e8 00 00 00 00	 call	 _CV_SaveNetVars
  0001a	83 c4 04	 add	 esp, 4

; 2881 : 	P_NetArchiveMisc();

  0001d	e8 00 00 00 00	 call	 _P_NetArchiveMisc
  00022	90		 npad	 1

; 2882 : 
; 2883 : 	// Assign the mobjnumber for pointer tracking
; 2884 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00023	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00028	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  0002b	eb 09		 jmp	 SHORT $LN4@P_SaveNetG
$LN2@P_SaveNetG:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_SaveNetG:
  00036	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0003d	74 29		 je	 SHORT $LN3@P_SaveNetG

; 2885 : 	{
; 2886 : 		if (th->function.acp1 == (actionf_p1)P_MobjThinker)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00042	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00049	75 1b		 jne	 SHORT $LN8@P_SaveNetG

; 2887 : 		{
; 2888 : 			mobj = (mobj_t *)th;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0004e	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 2889 : 			mobj->mobjnum = i++;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00057	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx
  0005d	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00060	83 c2 01	 add	 edx, 1
  00063	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$LN8@P_SaveNetG:

; 2890 : 		}
; 2891 : 	}

  00066	eb c5		 jmp	 SHORT $LN2@P_SaveNetG
$LN3@P_SaveNetG:

; 2892 : 
; 2893 : 	P_NetArchivePlayers();

  00068	e8 00 00 00 00	 call	 _P_NetArchivePlayers
  0006d	90		 npad	 1

; 2894 : 	P_NetArchiveWorld();

  0006e	e8 00 00 00 00	 call	 _P_NetArchiveWorld
  00073	90		 npad	 1

; 2895 : #ifdef POLYOBJECTS
; 2896 : 	P_ArchivePolyObjects();

  00074	e8 00 00 00 00	 call	 _P_ArchivePolyObjects
  00079	90		 npad	 1

; 2897 : #endif
; 2898 : 	P_NetArchiveThinkers();

  0007a	e8 00 00 00 00	 call	 _P_NetArchiveThinkers
  0007f	90		 npad	 1

; 2899 : 	P_NetArchiveSpecials();

  00080	e8 00 00 00 00	 call	 _P_NetArchiveSpecials
  00085	90		 npad	 1
$LN7@P_SaveNetG:

; 2900 : 
; 2901 : 	WRITEUINT8(save_p, 0x1d); // consistency marker

  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0008b	89 45 f0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0008e	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00091	c6 00 1d	 mov	 BYTE PTR [eax], 29	; 0000001dH
  00094	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00097	83 c0 01	 add	 eax, 1
  0009a	89 45 f0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0009d	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000a0	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000a5	33 c0		 xor	 eax, eax
  000a7	75 dd		 jne	 SHORT $LN7@P_SaveNetG

; 2902 : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_P_SaveNetGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_saveg.c
;	COMDAT _P_SaveGame
_TEXT	SEGMENT
_p_tmp$1 = -4						; size = 4
_P_SaveGame PROC					; COMDAT

; 2867 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2868 : 	P_ArchiveMisc();

  00009	e8 00 00 00 00	 call	 _P_ArchiveMisc
  0000e	90		 npad	 1

; 2869 : 	P_ArchivePlayer();

  0000f	e8 00 00 00 00	 call	 _P_ArchivePlayer
  00014	90		 npad	 1
$LN4@P_SaveGame:

; 2870 : 
; 2871 : 	WRITEUINT8(save_p, 0x1d); // consistency marker

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0001a	89 45 fc	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00020	c6 00 1d	 mov	 BYTE PTR [eax], 29	; 0000001dH
  00023	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00026	83 c0 01	 add	 eax, 1
  00029	89 45 fc	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0002f	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00034	33 c0		 xor	 eax, eax
  00036	75 dd		 jne	 SHORT $LN4@P_SaveGame

; 2872 : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_P_SaveGame ENDP
_TEXT	ENDS
END
