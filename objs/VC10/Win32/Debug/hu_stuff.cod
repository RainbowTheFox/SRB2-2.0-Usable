; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\hu_stuff.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_english_shiftxform
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_shiftxform:DWORD
COMM	_hu_font:DWORD:05eH
COMM	_tinynum:DWORD:0aH
COMM	_lt_font:DWORD:034H
COMM	_cred_font:DWORD:028H
COMM	_emeraldpics:DWORD:07H
COMM	_tinyemeraldpics:DWORD:07H
COMM	_rflagico:DWORD
COMM	_bflagico:DWORD
COMM	_rmatcico:DWORD
COMM	_bmatcico:DWORD
COMM	_tagico:DWORD
COMM	_chat_on:DWORD
COMM	_hu_showscores:DWORD
_DATA	ENDS
_DATA	SEGMENT
_english_shiftxform DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	022H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	03cH
	DB	05fH
	DB	03eH
	DB	03fH
	DB	029H
	DB	021H
	DB	040H
	DB	023H
	DB	024H
	DB	025H
	DB	05eH
	DB	026H
	DB	02aH
	DB	028H
	DB	03aH
	DB	03aH
	DB	03cH
	DB	02bH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	021H
	DB	05dH
	DB	022H
	DB	05fH
	DB	07eH
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_HU_Init
PUBLIC	_HU_LoadGraphics
PUBLIC	_HU_Start
PUBLIC	_HU_Responder
PUBLIC	_HU_Ticker
PUBLIC	_HU_Drawer
PUBLIC	_HU_dequeueChatChar
PUBLIC	_HU_Erase
PUBLIC	_HU_clearChatChars
PUBLIC	_HU_DrawTabRankings
PUBLIC	_HU_DrawTeamTabRankings
PUBLIC	_HU_DrawDualTabRankings
PUBLIC	_HU_DrawEmeralds
PUBLIC	_MatchType_OnChange
PUBLIC	_HU_ClearCEcho
PUBLIC	_HU_SetCEchoDuration
PUBLIC	_HU_SetCEchoFlags
PUBLIC	_HU_DoCEcho
PUBLIC	??_C@_09LKADNJPK@STCFN?$CF?43d@			; `string'
PUBLIC	??_C@_08PHKEIKPI@LTFNT039@			; `string'
PUBLIC	??_C@_08OLPAKNDM@LTFNT048@			; `string'
PUBLIC	??_C@_08PCOLJMHN@LTFNT049@			; `string'
PUBLIC	??_C@_08CCOLENAD@LTFNT050@			; `string'
PUBLIC	??_C@_08DLPAHMEC@LTFNT051@			; `string'
PUBLIC	??_C@_08BANNCPIB@LTFNT052@			; `string'
PUBLIC	??_C@_08JMGBOMA@LTFNT053@			; `string'
PUBLIC	??_C@_08EGIHIIAH@LTFNT054@			; `string'
PUBLIC	??_C@_08FPJMLJEG@LTFNT055@			; `string'
PUBLIC	??_C@_08HELBOKIF@LTFNT056@			; `string'
PUBLIC	??_C@_08GNKKNLME@LTFNT057@			; `string'
PUBLIC	??_C@_09LFOEGCGB@LTFNT?$CF?43d@			; `string'
PUBLIC	??_C@_09DHPFEAGG@CRFNT?$CF?43d@			; `string'
PUBLIC	??_C@_09MHCJPJLD@TINYNUM?$CFd@			; `string'
PUBLIC	??_C@_09MHAODDJB@CROSHAI?$CFc@			; `string'
PUBLIC	??_C@_08FNBLLBPP@EMBLICON@			; `string'
PUBLIC	??_C@_06PKDIGJKN@CHAOS1@			; `string'
PUBLIC	??_C@_06NBBFDKGO@CHAOS2@			; `string'
PUBLIC	??_C@_06MIAOALCP@CHAOS3@			; `string'
PUBLIC	??_C@_06IHEPJNOI@CHAOS4@			; `string'
PUBLIC	??_C@_06JOFEKMKJ@CHAOS5@			; `string'
PUBLIC	??_C@_06LFHJPPGK@CHAOS6@			; `string'
PUBLIC	??_C@_06KMGCMOCL@CHAOS7@			; `string'
PUBLIC	??_C@_06EPFALPGB@TEMER1@			; `string'
PUBLIC	??_C@_06GEHNOMKC@TEMER2@			; `string'
PUBLIC	??_C@_06HNGGNNOD@TEMER3@			; `string'
PUBLIC	??_C@_06DCCHELCE@TEMER4@			; `string'
PUBLIC	??_C@_06CLDMHKGF@TEMER5@			; `string'
PUBLIC	??_C@_06BBCJKG@TEMER6@				; `string'
PUBLIC	??_C@_06BJAKBIOH@TEMER7@			; `string'
PUBLIC	??_C@_03BANJEMDJ@say@				; `string'
PUBLIC	??_C@_05MAHDCHDM@sayto@				; `string'
PUBLIC	??_C@_07CAACFIHO@sayteam@			; `string'
PUBLIC	??_C@_04CJCNGJKF@csay@				; `string'
PUBLIC	??_C@_0DK@KBILCIGH@The?5chat?5is?5muted?4?5You?5can?8t?5sa@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_0BP@JNBOBKFC@say?5?$DMmessage?$DO?3?5send?5a?5message?6@ ; `string'
PUBLIC	??_C@_0EE@GCOEDLAP@sayto?5?$DMplayername?$HMplayernum?$DO?5?$DMm@ ; `string'
PUBLIC	??_C@_0CC@OKMBBEEH@sayto?3?5No?5player?5with?5that?5name@ ; `string'
PUBLIC	??_C@_0DA@BOLEJJDO@sayteam?5?$DMmessage?$DO?3?5send?5a?5messa@ ; `string'
PUBLIC	??_C@_0DI@HCJDFNGG@Dedicated?5servers?5can?8t?5send?5te@ ; `string'
PUBLIC	??_C@_0EI@FKOBKODJ@csay?5?$DMmessage?$DO?3?5send?5a?5message?5@ ; `string'
PUBLIC	??_C@_0CH@HDACFONC@Only?5servers?5and?5admins?5can?5use@ ; `string'
PUBLIC	??_C@_0DC@BGNOAFMJ@Illegal?5say?5command?5received?5fr@ ; `string'
PUBLIC	??_C@_0DB@NAAMLIJ@Illegal?5csay?5command?5received?5f@ ; `string'
PUBLIC	??_C@_0EE@BDAHKPCG@Illegal?5say?5command?5received?5fr@ ; `string'
PUBLIC	??_C@_0BE@GEJNGONP@Server?5message?3?5?$CFs?6@	; `string'
PUBLIC	??_C@_04GIJILCIA@?1me?5@			; `string'
PUBLIC	??_C@_06HNFCPEFM@SERVER@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_01PJKLJHI@?$HO@				; `string'
PUBLIC	??_C@_01EOFPKCAF@?$EA@				; `string'
PUBLIC	??_C@_01IFKFHFEL@?$IA@				; `string'
PUBLIC	??_C@_01PINCIBAO@?$IF@				; `string'
PUBLIC	??_C@_01OBMJLAEP@?$IE@				; `string'
PUBLIC	??_C@_0P@BCFNPOJM@?$AE?$CK?5?$CFs?$CFs?$CFs?5?$IC?$CFs?6@ ; `string'
PUBLIC	??_C@_0O@OAPNNGHL@?$AD?$DM?$CFs?$CFs?$CFs?$DO?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0O@GMFIOPPB@?$AD?$CK?$CFs?$CFs?$CFs?$CK?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BA@BAHHBBOM@?$AD?9?$DO?$CK?$CFs?$CFs?$CFs?$CK?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BH@PNJGMCEO@?$AD?$DO?$DO?$CFs?$CFs?$CFs?$DM?$DM?5?$CIteam?$CJ?5?$CFs?6@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0N@EBPDPFI@sayteam?5?$CC?$CFs?$CC@	; `string'
PUBLIC	??_C@_08GPCNJHOL@say?5?$CC?$CFs?$CC@		; `string'
PUBLIC	??_C@_05MKDKNBAK@Say?3?5@			; `string'
PUBLIC	??_C@_0L@CLLHPOPL@Say?9Team?3?5@		; `string'
PUBLIC	??_C@_0N@CIBLIMGJ@?$CFi?3?$CF02i?4?$CF02i@	; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu@				; `string'
PUBLIC	??_C@_09OGLFPIFG@TIME?5LEFT@			; `string'
PUBLIC	??_C@_08CCCPFIL@OVERTIME@			; `string'
PUBLIC	??_C@_0M@HCFEOADK@POINT?5LIMIT@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0M@ICHGDLLH@TOTAL?5SCORE@			; `string'
PUBLIC	??_C@_0P@IBLBLMCC@NUMBER?5OF?5LAPS@		; `string'
PUBLIC	??_C@_07MLIGLOEF@?9?5?$CFd?1?$CFd@		; `string'
PUBLIC	??_C@_01KICIPPFI@?2@				; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memset:PROC
EXTRN	_strchr:PROC
EXTRN	_strcat:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_strncat:PROC
EXTRN	_strncpy:PROC
EXTRN	_strnicmp:PROC
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	_abs:PROC
EXTRN	_strlcat:PROC
EXTRN	_strlcpy:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_COM_AddCommand:PROC
EXTRN	_COM_Argc:PROC
EXTRN	_COM_Argv:PROC
EXTRN	_COM_BufInsertText:PROC
EXTRN	_W_CachePatchName:PROC
EXTRN	_RegisterNetXCmd:PROC
EXTRN	_SendNetXCmd:PROC
EXTRN	_nametonum:PROC
EXTRN	_G_TicsToMinutes:PROC
EXTRN	_G_TicsToSeconds:PROC
EXTRN	_G_TicsToCentiseconds:PROC
EXTRN	_I_OutputMsg:PROC
EXTRN	_ST_SameTeam:PROC
EXTRN	_R_VideoErase:PROC
EXTRN	_V_DrawScaledPatch:PROC
EXTRN	_V_DrawSmallScaledPatch:PROC
EXTRN	_V_DrawSmallMappedPatch:PROC
EXTRN	_V_DrawSmallTranslucentMappedPatch:PROC
EXTRN	_V_DrawSmallTranslucentPatch:PROC
EXTRN	_V_DrawTranslucentPatch:PROC
EXTRN	_V_DrawFill:PROC
EXTRN	_V_DrawCharacter:PROC
EXTRN	_V_DrawString:PROC
EXTRN	_V_DrawCenteredString:PROC
EXTRN	_V_DrawRightAlignedString:PROC
EXTRN	_HWR_DrawViewBorder:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_gamestate:DWORD
EXTRN	_text:BYTE
EXTRN	_vid:BYTE
EXTRN	_gametype_cons_t:BYTE
EXTRN	_cv_tagtype:BYTE
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_pointlimit:BYTE
EXTRN	_cv_timelimit:BYTE
EXTRN	_cv_numlaps:BYTE
EXTRN	_timelimitintics:DWORD
EXTRN	_cv_mute:BYTE
EXTRN	_cv_overtime:BYTE
EXTRN	_cv_racetype:BYTE
EXTRN	_server:DWORD
EXTRN	_dedicated:DWORD
EXTRN	_modifiedgame:DWORD
EXTRN	_savemoddata:DWORD
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_circuitmap:DWORD
EXTRN	_viewwindowx:DWORD
EXTRN	_viewwindowy:DWORD
EXTRN	_viewwidth:DWORD
EXTRN	_consoleplayer:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_emeralds:WORD
EXTRN	_numemblems:DWORD
EXTRN	_emblemlocations:BYTE
EXTRN	_bluescore:DWORD
EXTRN	_redscore:DWORD
EXTRN	_matchtype:DWORD
EXTRN	_adminplayer:DWORD
EXTRN	_serverplayer:DWORD
EXTRN	_player_names:BYTE
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_demoplayback:DWORD
EXTRN	_cv_crosshair:BYTE
EXTRN	_cv_crosshair2:BYTE
EXTRN	_gamekeydown:BYTE
EXTRN	_gamecontrol:BYTE
EXTRN	_rendermode:DWORD
EXTRN	_faceprefix:BYTE
EXTRN	_superprefix:BYTE
EXTRN	_colormaps:DWORD
EXTRN	_viewheight:DWORD
EXTRN	_cv_chasecam:BYTE
EXTRN	_cv_chasecam2:BYTE
EXTRN	_translationtables:BYTE
EXTRN	_cv_allcaps:BYTE
EXTRN	_con_clearlines:DWORD
EXTRN	_con_hudupdate:DWORD
EXTRN	_automapactive:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_gr_viewheight:DWORD
EXTRN	_gr_basewindowcentery:DWORD
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_plr	DD	01H DUP (?)
_w_chat	DB	0e0H DUP (?)
_headsupactive DD 01H DUP (?)
_hu_tick DB	01H DUP (?)
	ALIGN	4

_emblemicon DD	01H DUP (?)
_crosshair DD	03H DUP (?)
_cechotext DB	0400H DUP (?)
_cechotimer DD	01H DUP (?)
_cechoflags DD	01H DUP (?)
_teamtalk DD	01H DUP (?)
_chatchars DB	0100H DUP (?)
_head	DD	01H DUP (?)
_tail	DD	01H DUP (?)
?shiftdown@?1??HU_Responder@@9@9 DD 01H DUP (?)		; `HU_Responder'::`2'::shiftdown
?altdown@?1??HU_Responder@@9@9 DD 01H DUP (?)		; `HU_Responder'::`2'::altdown
_oldclearlines DD 01H DUP (?)
?secondframelines@?1??HU_Erase@@9@9 DD 01H DUP (?)	; `HU_Erase'::`2'::secondframelines
_BSS	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2@
CONST	SEGMENT
??_C@_01KICIPPFI@?2@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MLIGLOEF@?9?5?$CFd?1?$CFd@
CONST	SEGMENT
??_C@_07MLIGLOEF@?9?5?$CFd?1?$CFd@ DB '- %d/%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IBLBLMCC@NUMBER?5OF?5LAPS@
CONST	SEGMENT
??_C@_0P@IBLBLMCC@NUMBER?5OF?5LAPS@ DB 'NUMBER OF LAPS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ICHGDLLH@TOTAL?5SCORE@
CONST	SEGMENT
??_C@_0M@ICHGDLLH@TOTAL?5SCORE@ DB 'TOTAL SCORE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HCFEOADK@POINT?5LIMIT@
CONST	SEGMENT
??_C@_0M@HCFEOADK@POINT?5LIMIT@ DB 'POINT LIMIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCCPFIL@OVERTIME@
CONST	SEGMENT
??_C@_08CCCPFIL@OVERTIME@ DB 'OVERTIME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OGLFPIFG@TIME?5LEFT@
CONST	SEGMENT
??_C@_09OGLFPIFG@TIME?5LEFT@ DB 'TIME LEFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu@ DB '%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CIBLIMGJ@?$CFi?3?$CF02i?4?$CF02i@
CONST	SEGMENT
??_C@_0N@CIBLIMGJ@?$CFi?3?$CF02i?4?$CF02i@ DB '%i:%02i.%02i', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CLLHPOPL@Say?9Team?3?5@
CONST	SEGMENT
??_C@_0L@CLLHPOPL@Say?9Team?3?5@ DB 'Say-Team: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKDKNBAK@Say?3?5@
CONST	SEGMENT
??_C@_05MKDKNBAK@Say?3?5@ DB 'Say: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GPCNJHOL@say?5?$CC?$CFs?$CC@
CONST	SEGMENT
??_C@_08GPCNJHOL@say?5?$CC?$CFs?$CC@ DB 'say "%s"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EBPDPFI@sayteam?5?$CC?$CFs?$CC@
CONST	SEGMENT
??_C@_0N@EBPDPFI@sayteam?5?$CC?$CFs?$CC@ DB 'sayteam "%s"', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PNJGMCEO@?$AD?$DO?$DO?$CFs?$CFs?$CFs?$DM?$DM?5?$CIteam?$CJ?5?$CFs?6@
CONST	SEGMENT
??_C@_0BH@PNJGMCEO@?$AD?$DO?$DO?$CFs?$CFs?$CFs?$DM?$DM?5?$CIteam?$CJ?5?$CFs?6@ DB 03H
	DB	'>>%s%s%s<< (team) %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BAHHBBOM@?$AD?9?$DO?$CK?$CFs?$CFs?$CFs?$CK?5?$CFs?6@
CONST	SEGMENT
??_C@_0BA@BAHHBBOM@?$AD?9?$DO?$CK?$CFs?$CFs?$CFs?$CK?5?$CFs?6@ DB 03H, '-'
	DB	'>*%s%s%s* %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GMFIOPPB@?$AD?$CK?$CFs?$CFs?$CFs?$CK?5?$CFs?6@
CONST	SEGMENT
??_C@_0O@GMFIOPPB@?$AD?$CK?$CFs?$CFs?$CFs?$CK?5?$CFs?6@ DB 03H, '*%s%s%s*'
	DB	' %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OAPNNGHL@?$AD?$DM?$CFs?$CFs?$CFs?$DO?5?$CFs?6@
CONST	SEGMENT
??_C@_0O@OAPNNGHL@?$AD?$DM?$CFs?$CFs?$CFs?$DO?5?$CFs?6@ DB 03H, '<%s%s%s>'
	DB	' %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCFNPOJM@?$AE?$CK?5?$CFs?$CFs?$CFs?5?$IC?$CFs?6@
CONST	SEGMENT
??_C@_0P@BCFNPOJM@?$AE?$CK?5?$CFs?$CFs?$CFs?5?$IC?$CFs?6@ DB 04H, '* %s%s'
	DB	'%s ', 082H, '%s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OBMJLAEP@?$IE@
CONST	SEGMENT
??_C@_01OBMJLAEP@?$IE@ DB 084H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PINCIBAO@?$IF@
CONST	SEGMENT
??_C@_01PINCIBAO@?$IF@ DB 085H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IFKFHFEL@?$IA@
CONST	SEGMENT
??_C@_01IFKFHFEL@?$IA@ DB 080H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EOFPKCAF@?$EA@
CONST	SEGMENT
??_C@_01EOFPKCAF@?$EA@ DB '@', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PJKLJHI@?$HO@
CONST	SEGMENT
??_C@_01PJKLJHI@?$HO@ DB '~', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNFCPEFM@SERVER@
CONST	SEGMENT
??_C@_06HNFCPEFM@SERVER@ DB 'SERVER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIJILCIA@?1me?5@
CONST	SEGMENT
??_C@_04GIJILCIA@?1me?5@ DB '/me ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GEJNGONP@Server?5message?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BE@GEJNGONP@Server?5message?3?5?$CFs?6@ DB 'Server message: %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@BDAHKPCG@Illegal?5say?5command?5received?5fr@
CONST	SEGMENT
??_C@_0EE@BDAHKPCG@Illegal?5say?5command?5received?5fr@ DB 'Illegal say c'
	DB	'ommand received from %s containing invalid characters', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NAAMLIJ@Illegal?5csay?5command?5received?5f@
CONST	SEGMENT
??_C@_0DB@NAAMLIJ@Illegal?5csay?5command?5received?5f@ DB 'Illegal csay c'
	DB	'ommand received from non-admin %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BGNOAFMJ@Illegal?5say?5command?5received?5fr@
CONST	SEGMENT
??_C@_0DC@BGNOAFMJ@Illegal?5say?5command?5received?5fr@ DB 'Illegal say c'
	DB	'ommand received from %s while muted', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HDACFONC@Only?5servers?5and?5admins?5can?5use@
CONST	SEGMENT
??_C@_0CH@HDACFONC@Only?5servers?5and?5admins?5can?5use@ DB 'Only servers'
	DB	' and admins can use csay.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@FKOBKODJ@csay?5?$DMmessage?$DO?3?5send?5a?5message?5@
CONST	SEGMENT
??_C@_0EI@FKOBKODJ@csay?5?$DMmessage?$DO?3?5send?5a?5message?5@ DB 'csay '
	DB	'<message>: send a message to be shown in the middle of the sc'
	DB	'reen', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HCJDFNGG@Dedicated?5servers?5can?8t?5send?5te@
CONST	SEGMENT
??_C@_0DI@HCJDFNGG@Dedicated?5servers?5can?8t?5send?5te@ DB 'Dedicated se'
	DB	'rvers can''t send team messages. Use "say".', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BOLEJJDO@sayteam?5?$DMmessage?$DO?3?5send?5a?5messa@
CONST	SEGMENT
??_C@_0DA@BOLEJJDO@sayteam?5?$DMmessage?$DO?3?5send?5a?5messa@ DB 'saytea'
	DB	'm <message>: send a message to your team', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OKMBBEEH@sayto?3?5No?5player?5with?5that?5name@
CONST	SEGMENT
??_C@_0CC@OKMBBEEH@sayto?3?5No?5player?5with?5that?5name@ DB 'sayto: No p'
	DB	'layer with that name!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GCOEDLAP@sayto?5?$DMplayername?$HMplayernum?$DO?5?$DMm@
CONST	SEGMENT
??_C@_0EE@GCOEDLAP@sayto?5?$DMplayername?$HMplayernum?$DO?5?$DMm@ DB 'say'
	DB	'to <playername|playernum> <message>: send a message to a play'
	DB	'er', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JNBOBKFC@say?5?$DMmessage?$DO?3?5send?5a?5message?6@
CONST	SEGMENT
??_C@_0BP@JNBOBKFC@say?5?$DMmessage?$DO?3?5send?5a?5message?6@ DB 'say <m'
	DB	'essage>: send a message', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@KBILCIGH@The?5chat?5is?5muted?4?5You?5can?8t?5sa@
CONST	SEGMENT
??_C@_0DK@KBILCIGH@The?5chat?5is?5muted?4?5You?5can?8t?5sa@ DB 'The chat '
	DB	'is muted. You can''t say anything at the moment.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJCNGJKF@csay@
CONST	SEGMENT
??_C@_04CJCNGJKF@csay@ DB 'csay', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07CAACFIHO@sayteam@
CONST	SEGMENT
??_C@_07CAACFIHO@sayteam@ DB 'sayteam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAHDCHDM@sayto@
CONST	SEGMENT
??_C@_05MAHDCHDM@sayto@ DB 'sayto', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BANJEMDJ@say@
CONST	SEGMENT
??_C@_03BANJEMDJ@say@ DB 'say', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BJAKBIOH@TEMER7@
CONST	SEGMENT
??_C@_06BJAKBIOH@TEMER7@ DB 'TEMER7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBCJKG@TEMER6@
CONST	SEGMENT
??_C@_06BBCJKG@TEMER6@ DB 'TEMER6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLDMHKGF@TEMER5@
CONST	SEGMENT
??_C@_06CLDMHKGF@TEMER5@ DB 'TEMER5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DCCHELCE@TEMER4@
CONST	SEGMENT
??_C@_06DCCHELCE@TEMER4@ DB 'TEMER4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNGGNNOD@TEMER3@
CONST	SEGMENT
??_C@_06HNGGNNOD@TEMER3@ DB 'TEMER3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEHNOMKC@TEMER2@
CONST	SEGMENT
??_C@_06GEHNOMKC@TEMER2@ DB 'TEMER2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPFALPGB@TEMER1@
CONST	SEGMENT
??_C@_06EPFALPGB@TEMER1@ DB 'TEMER1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KMGCMOCL@CHAOS7@
CONST	SEGMENT
??_C@_06KMGCMOCL@CHAOS7@ DB 'CHAOS7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFHJPPGK@CHAOS6@
CONST	SEGMENT
??_C@_06LFHJPPGK@CHAOS6@ DB 'CHAOS6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOFEKMKJ@CHAOS5@
CONST	SEGMENT
??_C@_06JOFEKMKJ@CHAOS5@ DB 'CHAOS5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IHEPJNOI@CHAOS4@
CONST	SEGMENT
??_C@_06IHEPJNOI@CHAOS4@ DB 'CHAOS4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIAOALCP@CHAOS3@
CONST	SEGMENT
??_C@_06MIAOALCP@CHAOS3@ DB 'CHAOS3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBBFDKGO@CHAOS2@
CONST	SEGMENT
??_C@_06NBBFDKGO@CHAOS2@ DB 'CHAOS2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKDIGJKN@CHAOS1@
CONST	SEGMENT
??_C@_06PKDIGJKN@CHAOS1@ DB 'CHAOS1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FNBLLBPP@EMBLICON@
CONST	SEGMENT
??_C@_08FNBLLBPP@EMBLICON@ DB 'EMBLICON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MHAODDJB@CROSHAI?$CFc@
CONST	SEGMENT
??_C@_09MHAODDJB@CROSHAI?$CFc@ DB 'CROSHAI%c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MHCJPJLD@TINYNUM?$CFd@
CONST	SEGMENT
??_C@_09MHCJPJLD@TINYNUM?$CFd@ DB 'TINYNUM%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DHPFEAGG@CRFNT?$CF?43d@
CONST	SEGMENT
??_C@_09DHPFEAGG@CRFNT?$CF?43d@ DB 'CRFNT%.3d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFOEGCGB@LTFNT?$CF?43d@
CONST	SEGMENT
??_C@_09LFOEGCGB@LTFNT?$CF?43d@ DB 'LTFNT%.3d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GNKKNLME@LTFNT057@
CONST	SEGMENT
??_C@_08GNKKNLME@LTFNT057@ DB 'LTFNT057', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HELBOKIF@LTFNT056@
CONST	SEGMENT
??_C@_08HELBOKIF@LTFNT056@ DB 'LTFNT056', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FPJMLJEG@LTFNT055@
CONST	SEGMENT
??_C@_08FPJMLJEG@LTFNT055@ DB 'LTFNT055', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGIHIIAH@LTFNT054@
CONST	SEGMENT
??_C@_08EGIHIIAH@LTFNT054@ DB 'LTFNT054', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JMGBOMA@LTFNT053@
CONST	SEGMENT
??_C@_08JMGBOMA@LTFNT053@ DB 'LTFNT053', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BANNCPIB@LTFNT052@
CONST	SEGMENT
??_C@_08BANNCPIB@LTFNT052@ DB 'LTFNT052', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DLPAHMEC@LTFNT051@
CONST	SEGMENT
??_C@_08DLPAHMEC@LTFNT051@ DB 'LTFNT051', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCOLENAD@LTFNT050@
CONST	SEGMENT
??_C@_08CCOLENAD@LTFNT050@ DB 'LTFNT050', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PCOLJMHN@LTFNT049@
CONST	SEGMENT
??_C@_08PCOLJMHN@LTFNT049@ DB 'LTFNT049', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OLPAKNDM@LTFNT048@
CONST	SEGMENT
??_C@_08OLPAKNDM@LTFNT048@ DB 'LTFNT048', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PHKEIKPI@LTFNT039@
CONST	SEGMENT
??_C@_08PHKEIKPI@LTFNT039@ DB 'LTFNT039', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LKADNJPK@STCFN?$CF?43d@
CONST	SEGMENT
??_C@_09LKADNJPK@STCFN?$CF?43d@ DB 'STCFN%.3d', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_cechoduration DD 0afH
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0211H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0136H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	019dH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0220H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0874H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0682H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	045eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0202H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	04b5H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawSpectatorTicker
_TEXT	SEGMENT
_eatenchars$1 = -77					; size = 1
_current$2 = -76					; size = 22
_initial$3 = -52					; size = 22
_pos$4 = -28						; size = 4
_templength$ = -24					; size = 4
_totallength$ = -20					; size = 4
_height$ = -16						; size = 4
_length$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_HU_DrawSpectatorTicker PROC				; COMDAT

; 1412 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1413 : 	int i;
; 1414 : 	int length = 0, height = 174;

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _length$[ebp], 0
  0001d	c7 45 f0 ae 00
	00 00		 mov	 DWORD PTR _height$[ebp], 174 ; 000000aeH

; 1415 : 	int totallength = 0, templength = 0;

  00024	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _totallength$[ebp], 0
  0002b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _templength$[ebp], 0

; 1416 : 
; 1417 : 	for (i = 0; i < MAXPLAYERS; i++)

  00032	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@HU_DrawSpe
$LN2@HU_DrawSpe:
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@HU_DrawSpe:
  00044	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00048	7d 3d		 jge	 SHORT $LN3@HU_DrawSpe

; 1418 : 		if (playeringame[i] && players[i].spectator)

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004d	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00055	74 2e		 je	 SHORT $LN8@HU_DrawSpe
  00057	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0005e	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00065	85 c9		 test	 ecx, ecx
  00067	74 1c		 je	 SHORT $LN8@HU_DrawSpe

; 1419 : 			totallength += (signed)strlen(player_names[i]) * 8 + 16;

  00069	6b 45 f8 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  0006d	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _strlen
  00078	83 c4 04	 add	 esp, 4
  0007b	8b 4d ec	 mov	 ecx, DWORD PTR _totallength$[ebp]
  0007e	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00082	89 55 ec	 mov	 DWORD PTR _totallength$[ebp], edx
$LN8@HU_DrawSpe:
  00085	eb b4		 jmp	 SHORT $LN2@HU_DrawSpe
$LN3@HU_DrawSpe:

; 1420 : 
; 1421 : 	length -= (leveltime % (totallength + BASEVIDWIDTH));

  00087	8b 4d ec	 mov	 ecx, DWORD PTR _totallength$[ebp]
  0008a	81 c1 40 01 00
	00		 add	 ecx, 320		; 00000140H
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00095	33 d2		 xor	 edx, edx
  00097	f7 f1		 div	 ecx
  00099	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  0009c	2b c2		 sub	 eax, edx
  0009e	89 45 f4	 mov	 DWORD PTR _length$[ebp], eax

; 1422 : 	length += BASEVIDWIDTH;

  000a1	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  000a4	05 40 01 00 00	 add	 eax, 320		; 00000140H
  000a9	89 45 f4	 mov	 DWORD PTR _length$[ebp], eax

; 1423 : 
; 1424 : 	for (i = 0; i < MAXPLAYERS; i++)

  000ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b3	eb 09		 jmp	 SHORT $LN7@HU_DrawSpe
$LN5@HU_DrawSpe:
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000b8	83 c0 01	 add	 eax, 1
  000bb	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@HU_DrawSpe:
  000be	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  000c2	0f 8d 46 01 00
	00		 jge	 $LN6@HU_DrawSpe

; 1425 : 		if (playeringame[i] && players[i].spectator)

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000cb	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000d3	0f 84 30 01 00
	00		 je	 $LN9@HU_DrawSpe
  000d9	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000e0	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  000e7	85 c9		 test	 ecx, ecx
  000e9	0f 84 1a 01 00
	00		 je	 $LN9@HU_DrawSpe

; 1426 : 		{
; 1427 : 			char *pos;
; 1428 : 			char initial[MAXPLAYERNAME+1];
; 1429 : 			char current[MAXPLAYERNAME+1];
; 1430 : 
; 1431 : 			strcpy(initial, player_names[i]);

  000ef	6b 45 f8 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  000f3	05 00 00 00 00	 add	 eax, OFFSET _player_names
  000f8	50		 push	 eax
  000f9	8d 4d cc	 lea	 ecx, DWORD PTR _initial$3[ebp]
  000fc	51		 push	 ecx
  000fd	e8 00 00 00 00	 call	 _strcpy
  00102	83 c4 08	 add	 esp, 8

; 1432 : 			pos = initial;

  00105	8d 45 cc	 lea	 eax, DWORD PTR _initial$3[ebp]
  00108	89 45 e4	 mov	 DWORD PTR _pos$4[ebp], eax

; 1433 : 
; 1434 : 			if (length >= -((signed)strlen(player_names[i]) * 8 + 16) && length <= BASEVIDWIDTH)

  0010b	6b 45 f8 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  0010f	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 _strlen
  0011a	83 c4 04	 add	 esp, 4
  0011d	8d 0c c5 10 00
	00 00		 lea	 ecx, DWORD PTR [eax*8+16]
  00124	f7 d9		 neg	 ecx
  00126	39 4d f4	 cmp	 DWORD PTR _length$[ebp], ecx
  00129	0f 8c be 00 00
	00		 jl	 $LN10@HU_DrawSpe
  0012f	81 7d f4 40 01
	00 00		 cmp	 DWORD PTR _length$[ebp], 320 ; 00000140H
  00136	0f 8f b1 00 00
	00		 jg	 $LN10@HU_DrawSpe

; 1435 : 			{
; 1436 : 				if (length < 0)

  0013c	83 7d f4 00	 cmp	 DWORD PTR _length$[ebp], 0
  00140	7d 79		 jge	 SHORT $LN11@HU_DrawSpe

; 1437 : 				{
; 1438 : 					UINT8 eatenchars = (UINT8)(abs(length) / 8 + 1);

  00142	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 _abs
  0014b	83 c4 04	 add	 esp, 4
  0014e	99		 cdq
  0014f	83 e2 07	 and	 edx, 7
  00152	03 c2		 add	 eax, edx
  00154	c1 f8 03	 sar	 eax, 3
  00157	83 c0 01	 add	 eax, 1
  0015a	88 45 b3	 mov	 BYTE PTR _eatenchars$1[ebp], al

; 1439 : 
; 1440 : 					if (eatenchars <= strlen(initial))

  0015d	0f b6 75 b3	 movzx	 esi, BYTE PTR _eatenchars$1[ebp]
  00161	8d 45 cc	 lea	 eax, DWORD PTR _initial$3[ebp]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 _strlen
  0016a	83 c4 04	 add	 esp, 4
  0016d	3b f0		 cmp	 esi, eax
  0016f	77 31		 ja	 SHORT $LN13@HU_DrawSpe

; 1441 : 					{
; 1442 : 						// Eat one letter off the left side,
; 1443 : 						// then compensate the drawing position.
; 1444 : 						pos += eatenchars;

  00171	0f b6 45 b3	 movzx	 eax, BYTE PTR _eatenchars$1[ebp]
  00175	03 45 e4	 add	 eax, DWORD PTR _pos$4[ebp]
  00178	89 45 e4	 mov	 DWORD PTR _pos$4[ebp], eax

; 1445 : 						strcpy(current, pos);

  0017b	8b 45 e4	 mov	 eax, DWORD PTR _pos$4[ebp]
  0017e	50		 push	 eax
  0017f	8d 4d b4	 lea	 ecx, DWORD PTR _current$2[ebp]
  00182	51		 push	 ecx
  00183	e8 00 00 00 00	 call	 _strcpy
  00188	83 c4 08	 add	 esp, 8

; 1446 : 						templength = length % 8 + 8;

  0018b	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  0018e	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00193	79 05		 jns	 SHORT $LN16@HU_DrawSpe
  00195	48		 dec	 eax
  00196	83 c8 f8	 or	 eax, -8			; fffffff8H
  00199	40		 inc	 eax
$LN16@HU_DrawSpe:
  0019a	83 c0 08	 add	 eax, 8
  0019d	89 45 e8	 mov	 DWORD PTR _templength$[ebp], eax

; 1447 : 					}

  001a0	eb 17		 jmp	 SHORT $LN14@HU_DrawSpe
$LN13@HU_DrawSpe:

; 1448 : 					else
; 1449 : 					{
; 1450 : 						strcpy(current, " ");

  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  001a7	8d 45 b4	 lea	 eax, DWORD PTR _current$2[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _strcpy
  001b0	83 c4 08	 add	 esp, 8

; 1451 : 						templength = length;

  001b3	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  001b6	89 45 e8	 mov	 DWORD PTR _templength$[ebp], eax
$LN14@HU_DrawSpe:

; 1452 : 					}
; 1453 : 				}

  001b9	eb 16		 jmp	 SHORT $LN12@HU_DrawSpe
$LN11@HU_DrawSpe:

; 1454 : 				else
; 1455 : 				{
; 1456 : 					strcpy(current, initial);

  001bb	8d 45 cc	 lea	 eax, DWORD PTR _initial$3[ebp]
  001be	50		 push	 eax
  001bf	8d 4d b4	 lea	 ecx, DWORD PTR _current$2[ebp]
  001c2	51		 push	 ecx
  001c3	e8 00 00 00 00	 call	 _strcpy
  001c8	83 c4 08	 add	 esp, 8

; 1457 : 					templength = length;

  001cb	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  001ce	89 45 e8	 mov	 DWORD PTR _templength$[ebp], eax
$LN12@HU_DrawSpe:

; 1458 : 				}
; 1459 : 
; 1460 : 				V_DrawString(templength, height + 8, V_TRANSLUCENT, current);

  001d1	8d 45 b4	 lea	 eax, DWORD PTR _current$2[ebp]
  001d4	50		 push	 eax
  001d5	68 00 00 40 00	 push	 4194304			; 00400000H
  001da	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  001dd	83 c1 08	 add	 ecx, 8
  001e0	51		 push	 ecx
  001e1	8b 55 e8	 mov	 edx, DWORD PTR _templength$[ebp]
  001e4	52		 push	 edx
  001e5	e8 00 00 00 00	 call	 _V_DrawString
  001ea	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@HU_DrawSpe:

; 1461 : 			}
; 1462 : 
; 1463 : 			length += (signed)strlen(player_names[i]) * 8 + 16;

  001ed	6b 45 f8 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  001f1	05 00 00 00 00	 add	 eax, OFFSET _player_names
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 _strlen
  001fc	83 c4 04	 add	 esp, 4
  001ff	8b 4d f4	 mov	 ecx, DWORD PTR _length$[ebp]
  00202	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00206	89 55 f4	 mov	 DWORD PTR _length$[ebp], edx
$LN9@HU_DrawSpe:

; 1464 : 		}

  00209	e9 a7 fe ff ff	 jmp	 $LN5@HU_DrawSpe
$LN6@HU_DrawSpe:

; 1465 : }

  0020e	5f		 pop	 edi
  0020f	5e		 pop	 esi
  00210	5b		 pop	 ebx
  00211	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00214	33 cd		 xor	 ecx, ebp
  00216	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c3		 ret	 0
_HU_DrawSpectatorTicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_drawGametype
_TEXT	SEGMENT
_i$ = -4						; size = 4
_HU_drawGametype PROC					; COMDAT

; 947  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 948  : 	INT32 i = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 949  : 
; 950  : 	if (gametype == GT_COOP)

  00010	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00017	85 c0		 test	 eax, eax
  00019	75 0c		 jne	 SHORT $LN2@HU_drawGam

; 951  : 		i = 0;

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00022	e9 88 00 00 00	 jmp	 $LN16@HU_drawGam
$LN2@HU_drawGam:

; 952  : 	else if (gametype == GT_MATCH)

  00027	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0002e	83 f8 01	 cmp	 eax, 1
  00031	75 1b		 jne	 SHORT $LN4@HU_drawGam

; 953  : 	{
; 954  : 		if (!cv_matchtype.value)

  00033	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0003a	75 09		 jne	 SHORT $LN6@HU_drawGam

; 955  : 			i = 1;

  0003c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00043	eb 07		 jmp	 SHORT $LN7@HU_drawGam
$LN6@HU_drawGam:

; 956  : 		else
; 957  : 			i = 2;

  00045	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
$LN7@HU_drawGam:

; 958  : 	}

  0004c	eb 61		 jmp	 SHORT $LN16@HU_drawGam
$LN4@HU_drawGam:

; 959  : 	else if (gametype == GT_RACE)

  0004e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00055	83 f8 02	 cmp	 eax, 2
  00058	75 1b		 jne	 SHORT $LN8@HU_drawGam

; 960  : 	{
; 961  : 		if (!cv_racetype.value)

  0005a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_racetype+20, 0
  00061	75 09		 jne	 SHORT $LN10@HU_drawGam

; 962  : 			i = 3;

  00063	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _i$[ebp], 3
  0006a	eb 07		 jmp	 SHORT $LN11@HU_drawGam
$LN10@HU_drawGam:

; 963  : 		else
; 964  : 			i = 4;

  0006c	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _i$[ebp], 4
$LN11@HU_drawGam:

; 965  : 	}

  00073	eb 3a		 jmp	 SHORT $LN16@HU_drawGam
$LN8@HU_drawGam:

; 966  : 	else if (gametype == GT_TAG)

  00075	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007c	83 f8 03	 cmp	 eax, 3
  0007f	75 1b		 jne	 SHORT $LN12@HU_drawGam

; 967  : 	{
; 968  : 		if (!cv_tagtype.value)

  00081	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00088	75 09		 jne	 SHORT $LN14@HU_drawGam

; 969  : 			i = 5;

  0008a	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _i$[ebp], 5
  00091	eb 07		 jmp	 SHORT $LN15@HU_drawGam
$LN14@HU_drawGam:

; 970  : 		else
; 971  : 			i = 6;

  00093	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _i$[ebp], 6
$LN15@HU_drawGam:

; 972  : 	}

  0009a	eb 13		 jmp	 SHORT $LN16@HU_drawGam
$LN12@HU_drawGam:

; 973  : 	else if (gametype == GT_CTF)

  0009c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a3	83 f8 04	 cmp	 eax, 4
  000a6	75 07		 jne	 SHORT $LN16@HU_drawGam

; 974  : 		i = 7;

  000a8	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _i$[ebp], 7
$LN16@HU_drawGam:

; 975  : 
; 976  : 	if (splitscreen)

  000af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000b6	74 1e		 je	 SHORT $LN17@HU_drawGam

; 977  : 		V_DrawString(4, 184, 0, gametype_cons_t[i].strvalue);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000bb	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8+4]
  000c2	51		 push	 ecx
  000c3	6a 00		 push	 0
  000c5	68 b8 00 00 00	 push	 184			; 000000b8H
  000ca	6a 04		 push	 4
  000cc	e8 00 00 00 00	 call	 _V_DrawString
  000d1	83 c4 10	 add	 esp, 16			; 00000010H
  000d4	eb 1c		 jmp	 SHORT $LN18@HU_drawGam
$LN17@HU_drawGam:

; 978  : 	else
; 979  : 		V_DrawString(4, 192, 0, gametype_cons_t[i].strvalue);

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d9	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8+4]
  000e0	51		 push	 ecx
  000e1	6a 00		 push	 0
  000e3	68 c0 00 00 00	 push	 192			; 000000c0H
  000e8	6a 04		 push	 4
  000ea	e8 00 00 00 00	 call	 _V_DrawString
  000ef	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@HU_drawGam:

; 980  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_HU_drawGametype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawCrosshair2
_TEXT	SEGMENT
_y$ = -8						; size = 4
_i$ = -4						; size = 4
_HU_DrawCrosshair2 PROC					; COMDAT

; 916  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 917  : 	INT32 i, y;
; 918  : 
; 919  : 	i = cv_crosshair2.value & 3;

  00009	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_crosshair2+20
  0000e	83 e0 03	 and	 eax, 3
  00011	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 920  : 	if (!i)

  00014	75 05		 jne	 SHORT $LN2@HU_DrawCro

; 921  : 		return;

  00016	e9 a1 00 00 00	 jmp	 $LN7@HU_DrawCro
$LN2@HU_DrawCro:

; 922  : 
; 923  : 	if ((netgame || multiplayer) && players[secondarydisplayplayer].spectator)

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00022	75 09		 jne	 SHORT $LN4@HU_DrawCro
  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0002b	74 17		 je	 SHORT $LN3@HU_DrawCro
$LN4@HU_DrawCro:
  0002d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00037	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  0003e	85 c9		 test	 ecx, ecx
  00040	74 02		 je	 SHORT $LN3@HU_DrawCro

; 924  : 		return;

  00042	eb 78		 jmp	 SHORT $LN7@HU_DrawCro
$LN3@HU_DrawCro:

; 925  : 
; 926  : #ifdef HWRENDER
; 927  : 	if (rendermode != render_soft)

  00044	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0004b	74 0d		 je	 SHORT $LN5@HU_DrawCro

; 928  : 		y = (INT32)gr_basewindowcentery;

  0004d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR _gr_basewindowcentery
  00055	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
  00058	eb 10		 jmp	 SHORT $LN6@HU_DrawCro
$LN5@HU_DrawCro:

; 929  : 	else
; 930  : #endif
; 931  : 		y = viewwindowy + (viewheight>>1);

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  0005f	d1 f8		 sar	 eax, 1
  00061	03 05 00 00 00
	00		 add	 eax, DWORD PTR _viewwindowy
  00067	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN6@HU_DrawCro:

; 932  : 
; 933  : 	if (splitscreen)

  0006a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00071	74 49		 je	 SHORT $LN7@HU_DrawCro

; 934  : 	{
; 935  : #ifdef HWRENDER
; 936  : 		if (rendermode != render_soft)

  00073	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0007a	74 10		 je	 SHORT $LN8@HU_DrawCro

; 937  : 			y += (INT32)gr_viewheight;

  0007c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR _gr_viewheight
  00084	03 45 f8	 add	 eax, DWORD PTR _y$[ebp]
  00087	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
  0008a	eb 0c		 jmp	 SHORT $LN9@HU_DrawCro
$LN8@HU_DrawCro:

; 938  : 		else
; 939  : #endif
; 940  : 			y += viewheight;

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0008f	03 05 00 00 00
	00		 add	 eax, DWORD PTR _viewheight
  00095	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN9@HU_DrawCro:

; 941  : 
; 942  : 		V_DrawTranslucentPatch(vid.width>>1, y, V_NOSCALESTART, crosshair[i - 1]);

  00098	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0009b	8b 0c 85 fc ff
	ff ff		 mov	 ecx, DWORD PTR _crosshair[eax*4-4]
  000a2	51		 push	 ecx
  000a3	68 00 00 01 00	 push	 65536			; 00010000H
  000a8	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  000ab	52		 push	 edx
  000ac	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  000b1	d1 f8		 sar	 eax, 1
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@HU_DrawCro:

; 943  : 	}
; 944  : }

  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_HU_DrawCrosshair2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawCrosshair
_TEXT	SEGMENT
_y$ = -8						; size = 4
_i$ = -4						; size = 4
_HU_DrawCrosshair PROC					; COMDAT

; 895  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 896  : 	INT32 i, y;
; 897  : 
; 898  : 	i = cv_crosshair.value & 3;

  00009	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_crosshair+20
  0000e	83 e0 03	 and	 eax, 3
  00011	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 899  : 	if (!i)

  00014	75 02		 jne	 SHORT $LN2@HU_DrawCro

; 900  : 		return;

  00016	eb 73		 jmp	 SHORT $LN1@HU_DrawCro
$LN2@HU_DrawCro:

; 901  : 
; 902  : 	if ((netgame || multiplayer) && players[displayplayer].spectator)

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0001f	75 09		 jne	 SHORT $LN4@HU_DrawCro
  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00028	74 17		 je	 SHORT $LN3@HU_DrawCro
$LN4@HU_DrawCro:
  0002a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00034	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 02		 je	 SHORT $LN3@HU_DrawCro

; 903  : 		return;

  0003f	eb 4a		 jmp	 SHORT $LN1@HU_DrawCro
$LN3@HU_DrawCro:

; 904  : 
; 905  : #ifdef HWRENDER
; 906  : 	if (rendermode != render_soft)

  00041	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00048	74 0d		 je	 SHORT $LN5@HU_DrawCro

; 907  : 		y = (INT32)gr_basewindowcentery;

  0004a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR _gr_basewindowcentery
  00052	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
  00055	eb 10		 jmp	 SHORT $LN6@HU_DrawCro
$LN5@HU_DrawCro:

; 908  : 	else
; 909  : #endif
; 910  : 		y = viewwindowy + (viewheight>>1);

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  0005c	d1 f8		 sar	 eax, 1
  0005e	03 05 00 00 00
	00		 add	 eax, DWORD PTR _viewwindowy
  00064	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN6@HU_DrawCro:

; 911  : 
; 912  : 	V_DrawTranslucentPatch(vid.width>>1, y, V_NOSCALESTART, crosshair[i - 1]);

  00067	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0006a	8b 0c 85 fc ff
	ff ff		 mov	 ecx, DWORD PTR _crosshair[eax*4-4]
  00071	51		 push	 ecx
  00072	68 00 00 01 00	 push	 65536			; 00010000H
  00077	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  0007a	52		 push	 edx
  0007b	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00080	d1 f8		 sar	 eax, 1
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  00088	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@HU_DrawCro:

; 913  : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_HU_DrawCrosshair ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawChat
_TEXT	SEGMENT
tv78 = -100						; size = 4
tv130 = -100						; size = 4
tv70 = -96						; size = 4
tv89 = -96						; size = 4
tv142 = -96						; size = 4
_talk$ = -28						; size = 4
_ttalk$ = -24						; size = 4
_ntalk$ = -20						; size = 4
_i$ = -16						; size = 4
_y$ = -12						; size = 4
_c$ = -8						; size = 4
_t$ = -4						; size = 4
_HU_DrawChat PROC					; COMDAT

; 848  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 849  : 	INT32 t = 0, c = 0, y = HU_INPUTY;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0
  00017	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 850  : 	size_t i = 0;

  0001e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 851  : 	const char *ntalk = "Say: ", *ttalk = "Say-Team: ";

  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ntalk$[ebp], OFFSET ??_C@_05MKDKNBAK@Say?3?5@
  0002c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _ttalk$[ebp], OFFSET ??_C@_0L@CLLHPOPL@Say?9Team?3?5@

; 852  : 	const char *talk = ntalk;

  00033	8b 45 ec	 mov	 eax, DWORD PTR _ntalk$[ebp]
  00036	89 45 e4	 mov	 DWORD PTR _talk$[ebp], eax

; 853  : 
; 854  : 	if (teamtalk)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _teamtalk, 0
  00040	74 06		 je	 SHORT $LN6@HU_DrawCha

; 855  : 	{
; 856  : 		talk = ttalk;

  00042	8b 45 e8	 mov	 eax, DWORD PTR _ttalk$[ebp]
  00045	89 45 e4	 mov	 DWORD PTR _talk$[ebp], eax
$LN6@HU_DrawCha:

; 857  : #if 0
; 858  : 		     if (players[consoleplayer].ctfteam == 1)
; 859  : 			t = 0x500;  // Red
; 860  : 		else if (players[consoleplayer].ctfteam == 2)
; 861  : 			t = 0x400; // Blue
; 862  : #endif
; 863  : 	}
; 864  : 
; 865  : 	while (talk[i])

  00048	8b 45 e4	 mov	 eax, DWORD PTR _talk$[ebp]
  0004b	03 45 f0	 add	 eax, DWORD PTR _i$[ebp]
  0004e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00051	85 c9		 test	 ecx, ecx
  00053	74 60		 je	 SHORT $LN3@HU_DrawCha

; 866  : 	{
; 867  : 		V_DrawCharacter(HU_INPUTX + (c<<3), y, talk[i++] | V_NOSCALEPATCH|V_NOSCALESTART, !cv_allcaps.value);

  00055	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allcaps+20, 0
  0005c	75 09		 jne	 SHORT $LN10@HU_DrawCha
  0005e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00065	eb 07		 jmp	 SHORT $LN11@HU_DrawCha
$LN10@HU_DrawCha:
  00067	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN11@HU_DrawCha:
  0006e	8b 45 e4	 mov	 eax, DWORD PTR _talk$[ebp]
  00071	03 45 f0	 add	 eax, DWORD PTR _i$[ebp]
  00074	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00077	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  0007d	81 c9 00 00 01
	00		 or	 ecx, 65536		; 00010000H
  00083	89 4d 9c	 mov	 DWORD PTR tv78[ebp], ecx
  00086	8b 55 a0	 mov	 edx, DWORD PTR tv70[ebp]
  00089	52		 push	 edx
  0008a	8b 45 9c	 mov	 eax, DWORD PTR tv78[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR _y$[ebp]
  00091	51		 push	 ecx
  00092	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00095	c1 e2 03	 shl	 edx, 3
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 _V_DrawCharacter
  0009e	83 c4 10	 add	 esp, 16			; 00000010H
  000a1	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 868  : 		c++;

  000aa	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000ad	83 c0 01	 add	 eax, 1
  000b0	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax

; 869  : 	}

  000b3	eb 93		 jmp	 SHORT $LN6@HU_DrawCha
$LN3@HU_DrawCha:

; 870  : 
; 871  : 	i = 0;

  000b5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN4@HU_DrawCha:

; 872  : 	while (w_chat[i])

  000bc	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000bf	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _w_chat[eax]
  000c6	85 c9		 test	 ecx, ecx
  000c8	0f 84 84 00 00
	00		 je	 $LN5@HU_DrawCha

; 873  : 	{
; 874  : 		//Hurdler: isn't it better like that?
; 875  : 		V_DrawCharacter(HU_INPUTX + (c<<3), y, w_chat[i++] | V_NOSCALEPATCH|V_NOSCALESTART|t, !cv_allcaps.value);

  000ce	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allcaps+20, 0
  000d5	75 09		 jne	 SHORT $LN12@HU_DrawCha
  000d7	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv89[ebp], 1
  000de	eb 07		 jmp	 SHORT $LN13@HU_DrawCha
$LN12@HU_DrawCha:
  000e0	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN13@HU_DrawCha:
  000e7	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000ea	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _w_chat[eax]
  000f1	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  000f7	81 c9 00 00 01
	00		 or	 ecx, 65536		; 00010000H
  000fd	0b 4d fc	 or	 ecx, DWORD PTR _t$[ebp]
  00100	89 4d 9c	 mov	 DWORD PTR tv130[ebp], ecx
  00103	8b 55 a0	 mov	 edx, DWORD PTR tv89[ebp]
  00106	52		 push	 edx
  00107	8b 45 9c	 mov	 eax, DWORD PTR tv130[ebp]
  0010a	50		 push	 eax
  0010b	8b 4d f4	 mov	 ecx, DWORD PTR _y$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00112	c1 e2 03	 shl	 edx, 3
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 _V_DrawCharacter
  0011b	83 c4 10	 add	 esp, 16			; 00000010H
  0011e	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00121	83 c0 01	 add	 eax, 1
  00124	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 876  : 
; 877  : 		c++;

  00127	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0012a	83 c0 01	 add	 eax, 1
  0012d	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax

; 878  : 		if (c >= (vid.width>>3))

  00130	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00135	c1 f8 03	 sar	 eax, 3
  00138	39 45 f8	 cmp	 DWORD PTR _c$[ebp], eax
  0013b	7c 10		 jl	 SHORT $LN7@HU_DrawCha

; 879  : 		{
; 880  : 			c = 0;

  0013d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0

; 881  : 			y += 8;

  00144	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00147	83 c0 08	 add	 eax, 8
  0014a	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN7@HU_DrawCha:

; 882  : 		}
; 883  : 	}

  0014d	e9 6a ff ff ff	 jmp	 $LN4@HU_DrawCha
$LN5@HU_DrawCha:

; 884  : 
; 885  : 	if (hu_tick < 4)

  00152	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _hu_tick
  00159	83 f8 04	 cmp	 eax, 4
  0015c	7d 3a		 jge	 SHORT $LN8@HU_DrawCha

; 886  : 		V_DrawCharacter(HU_INPUTX + (c<<3), y, '_' | V_NOSCALEPATCH|V_NOSCALESTART|t, !cv_allcaps.value);

  0015e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allcaps+20, 0
  00165	75 09		 jne	 SHORT $LN14@HU_DrawCha
  00167	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv142[ebp], 1
  0016e	eb 07		 jmp	 SHORT $LN15@HU_DrawCha
$LN14@HU_DrawCha:
  00170	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN15@HU_DrawCha:
  00177	8b 45 a0	 mov	 eax, DWORD PTR tv142[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d fc	 mov	 ecx, DWORD PTR _t$[ebp]
  0017e	81 c9 5f 00 09
	00		 or	 ecx, 589919		; 0009005fH
  00184	51		 push	 ecx
  00185	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  00188	52		 push	 edx
  00189	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0018c	c1 e0 03	 shl	 eax, 3
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 _V_DrawCharacter
  00195	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@HU_DrawCha:

; 887  : }

  00198	5f		 pop	 edi
  00199	5e		 pop	 esi
  0019a	5b		 pop	 ebx
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
_HU_DrawChat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_queueChatChar
_TEXT	SEGMENT
_ci$1 = -264						; size = 4
_buf$2 = -260						; size = 255
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 1
_HU_queueChatChar PROC					; COMDAT

; 724  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 725  : 	if (((head + 1) & (QUEUESIZE-1)) == tail)

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _head
  0001b	83 c0 01	 add	 eax, 1
  0001e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00023	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _tail
  00029	75 21		 jne	 SHORT $LN5@HU_queueCh

; 726  : 		CONS_Printf("%s", text[HUSTR_MSGU]); // message not sent

  0002b	b8 04 00 00 00	 mov	 eax, 4
  00030	69 c8 e8 00 00
	00		 imul	 ecx, eax, 232
  00036	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0003c	52		 push	 edx
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00042	e8 00 00 00 00	 call	 _CONS_Printf
  00047	83 c4 08	 add	 esp, 8
  0004a	eb 4a		 jmp	 SHORT $LN8@HU_queueCh
$LN5@HU_queueCh:

; 727  : 	else
; 728  : 	{
; 729  : 		if (c == KEY_BACKSPACE)

  0004c	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  00050	83 f8 08	 cmp	 eax, 8
  00053	75 21		 jne	 SHORT $LN7@HU_queueCh

; 730  : 		{
; 731  : 			if (tail != head)

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR _tail
  0005a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _head
  00060	74 12		 je	 SHORT $LN9@HU_queueCh

; 732  : 				head = (head - 1) & (QUEUESIZE-1);

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR _head
  00067	83 e8 01	 sub	 eax, 1
  0006a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0006f	a3 00 00 00 00	 mov	 DWORD PTR _head, eax
$LN9@HU_queueCh:

; 733  : 		}

  00074	eb 20		 jmp	 SHORT $LN8@HU_queueCh
$LN7@HU_queueCh:

; 734  : 		else
; 735  : 		{
; 736  : 			chatchars[head] = c;

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR _head
  0007b	8a 4d 08	 mov	 cl, BYTE PTR _c$[ebp]
  0007e	88 88 00 00 00
	00		 mov	 BYTE PTR _chatchars[eax], cl

; 737  : 			head = (head + 1) & (QUEUESIZE-1);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _head
  00089	83 c0 01	 add	 eax, 1
  0008c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00091	a3 00 00 00 00	 mov	 DWORD PTR _head, eax
$LN8@HU_queueCh:

; 738  : 		}
; 739  : 	}
; 740  : 
; 741  : 	// send automaticly the message (no more chat char)
; 742  : 	if (c == KEY_ENTER)

  00096	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  0009a	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  0009d	0f 85 90 00 00
	00		 jne	 $LN14@HU_queueCh

; 743  : 	{
; 744  : 		char buf[255];
; 745  : 		size_t ci = 0;

  000a3	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ci$1[ebp], 0
$LN4@HU_queueCh:

; 746  : 
; 747  : 		do {
; 748  : 			c = HU_dequeueChatChar();

  000ad	e8 00 00 00 00	 call	 _HU_dequeueChatChar
  000b2	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 749  : 			if (c != 13) // Graue 07-04-2004: don't know why this has to be done

  000b5	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  000b9	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000bc	74 1f		 je	 SHORT $LN11@HU_queueCh

; 750  : 				buf[ci++]=c;

  000be	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _ci$1[ebp]
  000c4	8a 4d 08	 mov	 cl, BYTE PTR _c$[ebp]
  000c7	88 8c 05 fc fe
	ff ff		 mov	 BYTE PTR _buf$2[ebp+eax], cl
  000ce	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _ci$1[ebp]
  000d4	83 c2 01	 add	 edx, 1
  000d7	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _ci$1[ebp], edx
$LN11@HU_queueCh:

; 751  : 		} while (c);

  000dd	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  000e1	85 c0		 test	 eax, eax
  000e3	75 c8		 jne	 SHORT $LN4@HU_queueCh

; 752  : 		// Graue 09-04-2004: 1 not 2, hell if I know why
; 753  : 		if (ci > 1) // Graue 07-02-2004: 2 not 3, with HU_BROADCAST disposed of

  000e5	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _ci$1[ebp], 1
  000ec	76 45		 jbe	 SHORT $LN14@HU_queueCh

; 754  : 		{
; 755  : 			if (teamtalk)

  000ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _teamtalk, 0
  000f5	74 1f		 je	 SHORT $LN13@HU_queueCh

; 756  : 				COM_BufInsertText(va("sayteam \"%s\"", buf)); // Graue 07-04-2004: quote it!

  000f7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$2[ebp]
  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EBPDPFI@sayteam?5?$CC?$CFs?$CC@
  00103	e8 00 00 00 00	 call	 _va
  00108	83 c4 08	 add	 esp, 8
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _COM_BufInsertText
  00111	83 c4 04	 add	 esp, 4
  00114	eb 1d		 jmp	 SHORT $LN14@HU_queueCh
$LN13@HU_queueCh:

; 757  : 			else
; 758  : 				COM_BufInsertText(va("say \"%s\"", buf)); // Graue 07-04-2004: quote it!

  00116	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$2[ebp]
  0011c	50		 push	 eax
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_08GPCNJHOL@say?5?$CC?$CFs?$CC@
  00122	e8 00 00 00 00	 call	 _va
  00127	83 c4 08	 add	 esp, 8
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _COM_BufInsertText
  00130	83 c4 04	 add	 esp, 4
$LN14@HU_queueCh:

; 759  : 		}
; 760  : 	}
; 761  : }

  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00139	33 cd		 xor	 ecx, ebp
  0013b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
_HU_queueChatChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_keyInChatString
_TEXT	SEGMENT
_l$ = -4						; size = 4
_s$ = 8							; size = 4
_ch$ = 12						; size = 1
_HU_keyInChatString PROC				; COMDAT

; 653  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 654  : 	size_t l;
; 655  : 
; 656  : 	if (ch >= ' ' && (ch <= 'z' || ch == '~' || ch == '`')) /// \note font end hack

  00009	0f be 45 0c	 movsx	 eax, BYTE PTR _ch$[ebp]
  0000d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00010	7c 5d		 jl	 SHORT $LN2@HU_keyInCh
  00012	0f be 45 0c	 movsx	 eax, BYTE PTR _ch$[ebp]
  00016	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00019	7e 12		 jle	 SHORT $LN4@HU_keyInCh
  0001b	0f be 45 0c	 movsx	 eax, BYTE PTR _ch$[ebp]
  0001f	83 f8 7e	 cmp	 eax, 126		; 0000007eH
  00022	74 09		 je	 SHORT $LN4@HU_keyInCh
  00024	0f be 45 0c	 movsx	 eax, BYTE PTR _ch$[ebp]
  00028	83 f8 60	 cmp	 eax, 96			; 00000060H
  0002b	75 42		 jne	 SHORT $LN2@HU_keyInCh
$LN4@HU_keyInCh:

; 657  : 	{
; 658  : 		l = strlen(s);

  0002d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _strlen
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax

; 659  : 		if (l < HU_MAXMSGLEN - 1)

  0003c	81 7d fc df 00
	00 00		 cmp	 DWORD PTR _l$[ebp], 223	; 000000dfH
  00043	73 24		 jae	 SHORT $LN5@HU_keyInCh

; 660  : 		{
; 661  : 			s[l++] = ch;

  00045	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00048	03 45 fc	 add	 eax, DWORD PTR _l$[ebp]
  0004b	8a 4d 0c	 mov	 cl, BYTE PTR _ch$[ebp]
  0004e	88 08		 mov	 BYTE PTR [eax], cl
  00050	8b 55 fc	 mov	 edx, DWORD PTR _l$[ebp]
  00053	83 c2 01	 add	 edx, 1
  00056	89 55 fc	 mov	 DWORD PTR _l$[ebp], edx

; 662  : 			s[l]=0;

  00059	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005c	03 45 fc	 add	 eax, DWORD PTR _l$[ebp]
  0005f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 663  : 			return true;

  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	eb 50		 jmp	 SHORT $LN1@HU_keyInCh
$LN5@HU_keyInCh:

; 664  : 		}
; 665  : 		return false;

  00069	33 c0		 xor	 eax, eax
  0006b	eb 4c		 jmp	 SHORT $LN1@HU_keyInCh

; 666  : 	}

  0006d	eb 45		 jmp	 SHORT $LN10@HU_keyInCh
$LN2@HU_keyInCh:

; 667  : 	else if (ch == KEY_BACKSPACE)

  0006f	0f be 45 0c	 movsx	 eax, BYTE PTR _ch$[ebp]
  00073	83 f8 08	 cmp	 eax, 8
  00076	75 2f		 jne	 SHORT $LN6@HU_keyInCh

; 668  : 	{
; 669  : 		l = strlen(s);

  00078	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _strlen
  00081	83 c4 04	 add	 esp, 4
  00084	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax

; 670  : 		if (l)

  00087	83 7d fc 00	 cmp	 DWORD PTR _l$[ebp], 0
  0008b	74 14		 je	 SHORT $LN8@HU_keyInCh

; 671  : 			s[--l] = 0;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  00090	83 e8 01	 sub	 eax, 1
  00093	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00099	03 4d fc	 add	 ecx, DWORD PTR _l$[ebp]
  0009c	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0009f	eb 04		 jmp	 SHORT $LN9@HU_keyInCh
$LN8@HU_keyInCh:

; 672  : 		else
; 673  : 			return false;

  000a1	33 c0		 xor	 eax, eax
  000a3	eb 14		 jmp	 SHORT $LN1@HU_keyInCh
$LN9@HU_keyInCh:

; 674  : 	}

  000a5	eb 0d		 jmp	 SHORT $LN10@HU_keyInCh
$LN6@HU_keyInCh:

; 675  : 	else if (ch != KEY_ENTER)

  000a7	0f be 45 0c	 movsx	 eax, BYTE PTR _ch$[ebp]
  000ab	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000ae	74 04		 je	 SHORT $LN10@HU_keyInCh

; 676  : 		return false; // did not eat key

  000b0	33 c0		 xor	 eax, eax
  000b2	eb 05		 jmp	 SHORT $LN1@HU_keyInCh
$LN10@HU_keyInCh:

; 677  : 
; 678  : 	return true; // ate the key

  000b4	b8 01 00 00 00	 mov	 eax, 1
$LN1@HU_keyInCh:

; 679  : }

  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_HU_keyInChatString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _DoSayCommand
_TEXT	SEGMENT
_msgspace$ = -276					; size = 4
_msg$ = -272						; size = 4
_ix$ = -268						; size = 4
_numwords$ = -264					; size = 4
_buf$ = -260						; size = 254
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 1
_usedargs$ = 12						; size = 4
_flags$ = 16						; size = 1
_DoSayCommand PROC					; COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 366  : 	XBOXSTATIC char buf[254];
; 367  : 	size_t numwords, ix;
; 368  : 	char *msg = &buf[2];

  00016	b8 01 00 00 00	 mov	 eax, 1
  0001b	d1 e0		 shl	 eax, 1
  0001d	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _buf$[ebp+eax]
  00024	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _msg$[ebp], ecx

; 369  : 	const size_t msgspace = sizeof buf - 2;

  0002a	c7 85 ec fe ff
	ff fc 00 00 00	 mov	 DWORD PTR _msgspace$[ebp], 252 ; 000000fcH

; 370  : 
; 371  : 	numwords = COM_Argc() - usedargs;

  00034	e8 00 00 00 00	 call	 _COM_Argc
  00039	2b 45 0c	 sub	 eax, DWORD PTR _usedargs$[ebp]
  0003c	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _numwords$[ebp], eax

; 372  : 	I_Assert(numwords > 0);
; 373  : 
; 374  : 	if (cv_mute.value && !(server || adminplayer == consoleplayer))

  00042	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  00049	74 28		 je	 SHORT $LN5@DoSayComma
  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00052	75 1f		 jne	 SHORT $LN5@DoSayComma
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00059	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0005f	74 12		 je	 SHORT $LN5@DoSayComma

; 375  : 	{
; 376  : 		CONS_Printf("The chat is muted. You can't say anything at the moment.\n");

  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@KBILCIGH@The?5chat?5is?5muted?4?5You?5can?8t?5sa@
  00066	e8 00 00 00 00	 call	 _CONS_Printf
  0006b	83 c4 04	 add	 esp, 4

; 377  : 		return;

  0006e	e9 27 01 00 00	 jmp	 $LN1@DoSayComma
$LN5@DoSayComma:

; 378  : 	}
; 379  : 
; 380  : 	// Only servers/admins can CSAY.
; 381  : 	if(!server && adminplayer != consoleplayer)

  00073	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0007a	75 17		 jne	 SHORT $LN6@DoSayComma
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00081	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00087	74 0a		 je	 SHORT $LN6@DoSayComma

; 382  : 		flags &= ~HU_CSAY;

  00089	0f b6 45 10	 movzx	 eax, BYTE PTR _flags$[ebp]
  0008d	83 e0 fd	 and	 eax, -3			; fffffffdH
  00090	88 45 10	 mov	 BYTE PTR _flags$[ebp], al
$LN6@DoSayComma:

; 383  : 
; 384  : 	// We handle HU_SERVER_SAY, not the caller.
; 385  : 	flags &= ~HU_SERVER_SAY;

  00093	0f b6 45 10	 movzx	 eax, BYTE PTR _flags$[ebp]
  00097	83 e0 fe	 and	 eax, -2			; fffffffeH
  0009a	88 45 10	 mov	 BYTE PTR _flags$[ebp], al

; 386  : 	if(dedicated && !(flags & HU_CSAY))

  0009d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  000a4	74 13		 je	 SHORT $LN7@DoSayComma
  000a6	0f b6 45 10	 movzx	 eax, BYTE PTR _flags$[ebp]
  000aa	83 e0 02	 and	 eax, 2
  000ad	75 0a		 jne	 SHORT $LN7@DoSayComma

; 387  : 		flags |= HU_SERVER_SAY;

  000af	0f b6 45 10	 movzx	 eax, BYTE PTR _flags$[ebp]
  000b3	83 c8 01	 or	 eax, 1
  000b6	88 45 10	 mov	 BYTE PTR _flags$[ebp], al
$LN7@DoSayComma:

; 388  : 
; 389  : 	buf[0] = target;

  000b9	b8 01 00 00 00	 mov	 eax, 1
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	8a 55 08	 mov	 dl, BYTE PTR _target$[ebp]
  000c4	88 94 0d fc fe
	ff ff		 mov	 BYTE PTR _buf$[ebp+ecx], dl

; 390  : 	buf[1] = flags;

  000cb	b8 01 00 00 00	 mov	 eax, 1
  000d0	c1 e0 00	 shl	 eax, 0
  000d3	8a 4d 10	 mov	 cl, BYTE PTR _flags$[ebp]
  000d6	88 8c 05 fc fe
	ff ff		 mov	 BYTE PTR _buf$[ebp+eax], cl

; 391  : 	msg[0] = '\0';

  000dd	b8 01 00 00 00	 mov	 eax, 1
  000e2	6b c8 00	 imul	 ecx, eax, 0
  000e5	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _msg$[ebp]
  000eb	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 392  : 
; 393  : 	for (ix = 0; ix < numwords; ix++)

  000ef	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ix$[ebp], 0
  000f9	eb 0f		 jmp	 SHORT $LN4@DoSayComma
$LN2@DoSayComma:
  000fb	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _ix$[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _ix$[ebp], eax
$LN4@DoSayComma:
  0010a	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _ix$[ebp]
  00110	3b 85 f8 fe ff
	ff		 cmp	 eax, DWORD PTR _numwords$[ebp]
  00116	73 4f		 jae	 SHORT $LN3@DoSayComma

; 394  : 	{
; 395  : 		if (ix > 0)

  00118	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _ix$[ebp], 0
  0011f	76 1b		 jbe	 SHORT $LN8@DoSayComma

; 396  : 			strlcat(msg, " ", msgspace);

  00121	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _msgspace$[ebp]
  00127	50		 push	 eax
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  0012d	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _msg$[ebp]
  00133	51		 push	 ecx
  00134	e8 00 00 00 00	 call	 _strlcat
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@DoSayComma:

; 397  : 		strlcat(msg, COM_Argv(ix + usedargs), msgspace);

  0013c	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _msgspace$[ebp]
  00142	50		 push	 eax
  00143	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _ix$[ebp]
  00149	03 4d 0c	 add	 ecx, DWORD PTR _usedargs$[ebp]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _COM_Argv
  00152	83 c4 04	 add	 esp, 4
  00155	50		 push	 eax
  00156	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _msg$[ebp]
  0015c	52		 push	 edx
  0015d	e8 00 00 00 00	 call	 _strlcat
  00162	83 c4 0c	 add	 esp, 12			; 0000000cH

; 398  : 	}

  00165	eb 94		 jmp	 SHORT $LN2@DoSayComma
$LN3@DoSayComma:

; 399  : 
; 400  : 	SendNetXCmd(XD_SAY, buf, strlen(msg) + 1 + msg-buf);

  00167	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _msg$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 _strlen
  00173	83 c4 04	 add	 esp, 4
  00176	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _msg$[ebp]
  0017c	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00180	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00186	2b d0		 sub	 edx, eax
  00188	52		 push	 edx
  00189	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0018f	51		 push	 ecx
  00190	6a 05		 push	 5
  00192	e8 00 00 00 00	 call	 _SendNetXCmd
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@DoSayComma:

; 401  : }

  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	5b		 pop	 ebx
  0019d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a0	33 cd		 xor	 ecx, ebp
  001a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
_DoSayCommand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_Stop
_TEXT	SEGMENT
_HU_Stop PROC						; COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 274  : 	headsupactive = false;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _headsupactive, 0

; 275  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_HU_Stop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _Got_Saycmd
_TEXT	SEGMENT
tv78 = -128						; size = 4
tv92 = -128						; size = 4
_tempchar$1 = -60					; size = 4
_fmt$2 = -56						; size = 4
_remotechar$3 = -52					; size = 4
_adminchar$4 = -48					; size = 4
_cend$5 = -44						; size = 4
_cstart$6 = -40						; size = 4
_buf$7 = -36						; size = 2
_j$8 = -32						; size = 4
_i$9 = -28						; size = 4
_buf$10 = -24						; size = 2
_ptr$ = -20						; size = 4
_action$ = -16						; size = 4
_msg$ = -12						; size = 4
_dispname$ = -8						; size = 4
_flags$ = -2						; size = 1
_target$ = -1						; size = 1
_p$ = 8							; size = 4
_playernum$ = 12					; size = 4
_Got_Saycmd PROC					; COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 490  : 	SINT8 target;
; 491  : 	UINT8 flags;
; 492  : 	const char *dispname;
; 493  : 	char *msg;
; 494  : 	boolean action = false;

  0000c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _action$[ebp], 0

; 495  : 	char *ptr;
; 496  : 
; 497  : 	target = READSINT8(*p);

  00013	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	8a 11		 mov	 dl, BYTE PTR [ecx]
  0001a	88 55 ff	 mov	 BYTE PTR _target$[ebp], dl
  0001d	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	83 c1 01	 add	 ecx, 1
  00025	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00028	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 	flags = READUINT8(*p);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00031	88 55 fe	 mov	 BYTE PTR _flags$[ebp], dl
  00034	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	83 c1 01	 add	 ecx, 1
  0003c	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0003f	89 0a		 mov	 DWORD PTR [edx], ecx

; 499  : 
; 500  : 	if ((cv_mute.value || (flags & HU_CSAY)) && playernum != serverplayer && playernum != adminplayer)

  00041	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  00048	75 09		 jne	 SHORT $LN10@Got_Saycmd
  0004a	0f b6 45 fe	 movzx	 eax, BYTE PTR _flags$[ebp]
  0004e	83 e0 02	 and	 eax, 2
  00051	74 7f		 je	 SHORT $LN9@Got_Saycmd
$LN10@Got_Saycmd:
  00053	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00056	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  0005c	74 74		 je	 SHORT $LN9@Got_Saycmd
  0005e	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00061	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00067	74 69		 je	 SHORT $LN9@Got_Saycmd

; 501  : 	{
; 502  : 		CONS_Printf(cv_mute.value ?

  00069	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  00070	74 09		 je	 SHORT $LN46@Got_Saycmd
  00072	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], OFFSET ??_C@_0DC@BGNOAFMJ@Illegal?5say?5command?5received?5fr@
  00079	eb 07		 jmp	 SHORT $LN47@Got_Saycmd
$LN46@Got_Saycmd:
  0007b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], OFFSET ??_C@_0DB@NAAMLIJ@Illegal?5csay?5command?5received?5f@
$LN47@Got_Saycmd:
  00082	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00086	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0008b	50		 push	 eax
  0008c	8b 4d 80	 mov	 ecx, DWORD PTR tv78[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 _CONS_Printf
  00095	83 c4 08	 add	 esp, 8

; 503  : 			"Illegal say command received from %s while muted\n" :
; 504  : 			"Illegal csay command received from non-admin %s\n",
; 505  : 			player_names[playernum]);
; 506  : 		if (server)

  00098	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0009f	74 2c		 je	 SHORT $LN11@Got_Saycmd

; 507  : 		{
; 508  : 			XBOXSTATIC UINT8 buf[2];
; 509  : 
; 510  : 			buf[0] = (UINT8)playernum;

  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	6b c8 00	 imul	 ecx, eax, 0
  000a9	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  000ac	88 54 0d e8	 mov	 BYTE PTR _buf$10[ebp+ecx], dl

; 511  : 			buf[1] = KICK_MSG_CON_FAIL;

  000b0	b8 01 00 00 00	 mov	 eax, 1
  000b5	c1 e0 00	 shl	 eax, 0
  000b8	c6 44 05 e8 02	 mov	 BYTE PTR _buf$10[ebp+eax], 2

; 512  : 			SendNetXCmd(XD_KICK, &buf, 2);

  000bd	6a 02		 push	 2
  000bf	8d 45 e8	 lea	 eax, DWORD PTR _buf$10[ebp]
  000c2	50		 push	 eax
  000c3	6a 03		 push	 3
  000c5	e8 00 00 00 00	 call	 _SendNetXCmd
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@Got_Saycmd:

; 513  : 		}
; 514  : 		return;

  000cd	e9 b5 03 00 00	 jmp	 $LN44@Got_Saycmd
$LN9@Got_Saycmd:

; 515  : 	}
; 516  : 
; 517  : 	msg = (char *)*p;

  000d2	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d7	89 4d f4	 mov	 DWORD PTR _msg$[ebp], ecx
$LN2@Got_Saycmd:

; 518  : 	SKIPSTRING(*p);

  000da	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000e2	89 55 80	 mov	 DWORD PTR tv92[ebp], edx
  000e5	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ea	83 c1 01	 add	 ecx, 1
  000ed	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000f0	89 0a		 mov	 DWORD PTR [edx], ecx
  000f2	83 7d 80 00	 cmp	 DWORD PTR tv92[ebp], 0
  000f6	74 02		 je	 SHORT $LN3@Got_Saycmd
  000f8	eb e0		 jmp	 SHORT $LN2@Got_Saycmd
$LN3@Got_Saycmd:

; 519  : 
; 520  : 	//check for invalid characters (0x80 or above)
; 521  : 	{
; 522  : 		size_t i;
; 523  : 		const size_t j = strlen(msg);

  000fa	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 _strlen
  00103	83 c4 04	 add	 esp, 4
  00106	89 45 e0	 mov	 DWORD PTR _j$8[ebp], eax

; 524  : 		for (i = 0; i < j; i++)

  00109	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$9[ebp], 0
  00110	eb 09		 jmp	 SHORT $LN6@Got_Saycmd
$LN4@Got_Saycmd:
  00112	8b 45 e4	 mov	 eax, DWORD PTR _i$9[ebp]
  00115	83 c0 01	 add	 eax, 1
  00118	89 45 e4	 mov	 DWORD PTR _i$9[ebp], eax
$LN6@Got_Saycmd:
  0011b	8b 45 e4	 mov	 eax, DWORD PTR _i$9[ebp]
  0011e	3b 45 e0	 cmp	 eax, DWORD PTR _j$8[ebp]
  00121	73 64		 jae	 SHORT $LN5@Got_Saycmd

; 525  : 		{
; 526  : 			if (msg[i] & 0x80)

  00123	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  00126	03 45 e4	 add	 eax, DWORD PTR _i$9[ebp]
  00129	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0012c	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00132	74 51		 je	 SHORT $LN12@Got_Saycmd

; 527  : 			{
; 528  : 				CONS_Printf("Illegal say command received from %s containing invalid characters\n",

  00134	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00138	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0013d	50		 push	 eax
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@BDAHKPCG@Illegal?5say?5command?5received?5fr@
  00143	e8 00 00 00 00	 call	 _CONS_Printf
  00148	83 c4 08	 add	 esp, 8

; 529  : 					player_names[playernum]);
; 530  : 				if (server)

  0014b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00152	74 2c		 je	 SHORT $LN13@Got_Saycmd

; 531  : 				{
; 532  : 					XBOXSTATIC char buf[2];
; 533  : 
; 534  : 					buf[0] = (char)playernum;

  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	6b c8 00	 imul	 ecx, eax, 0
  0015c	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  0015f	88 54 0d dc	 mov	 BYTE PTR _buf$7[ebp+ecx], dl

; 535  : 					buf[1] = KICK_MSG_CON_FAIL;

  00163	b8 01 00 00 00	 mov	 eax, 1
  00168	c1 e0 00	 shl	 eax, 0
  0016b	c6 44 05 dc 02	 mov	 BYTE PTR _buf$7[ebp+eax], 2

; 536  : 					SendNetXCmd(XD_KICK, &buf, 2);

  00170	6a 02		 push	 2
  00172	8d 45 dc	 lea	 eax, DWORD PTR _buf$7[ebp]
  00175	50		 push	 eax
  00176	6a 03		 push	 3
  00178	e8 00 00 00 00	 call	 _SendNetXCmd
  0017d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@Got_Saycmd:

; 537  : 				}
; 538  : 				return;

  00180	e9 02 03 00 00	 jmp	 $LN44@Got_Saycmd
$LN12@Got_Saycmd:

; 539  : 			}
; 540  : 		}

  00185	eb 8b		 jmp	 SHORT $LN4@Got_Saycmd
$LN5@Got_Saycmd:

; 541  : 	}
; 542  : 
; 543  : 	// If it's a CSAY, just CECHO and be done with it.
; 544  : 	if(flags & HU_CSAY)

  00187	0f b6 45 fe	 movzx	 eax, BYTE PTR _flags$[ebp]
  0018b	83 e0 02	 and	 eax, 2
  0018e	74 2c		 je	 SHORT $LN14@Got_Saycmd

; 545  : 	{
; 546  : 		HU_SetCEchoDuration(5);

  00190	6a 05		 push	 5
  00192	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00197	83 c4 04	 add	 esp, 4

; 547  : 		I_OutputMsg("Server message: %s\n", msg);

  0019a	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  0019d	50		 push	 eax
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GEJNGONP@Server?5message?3?5?$CFs?6@
  001a3	e8 00 00 00 00	 call	 _I_OutputMsg
  001a8	83 c4 08	 add	 esp, 8

; 548  : 		HU_DoCEcho(msg);

  001ab	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 _HU_DoCEcho
  001b4	83 c4 04	 add	 esp, 4

; 549  : 		return;

  001b7	e9 cb 02 00 00	 jmp	 $LN44@Got_Saycmd
$LN14@Got_Saycmd:

; 550  : 	}
; 551  : 
; 552  : 	// Handle "/me" actions, but only in messages to everyone.
; 553  : 	if (target == 0 && strlen(msg) > 4 && strnicmp(msg, "/me ", 4) == 0)

  001bc	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  001c0	85 c0		 test	 eax, eax
  001c2	75 38		 jne	 SHORT $LN15@Got_Saycmd
  001c4	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 _strlen
  001cd	83 c4 04	 add	 esp, 4
  001d0	83 f8 04	 cmp	 eax, 4
  001d3	76 27		 jbe	 SHORT $LN15@Got_Saycmd
  001d5	6a 04		 push	 4
  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_04GIJILCIA@?1me?5@
  001dc	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 _strnicmp
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e8	85 c0		 test	 eax, eax
  001ea	75 10		 jne	 SHORT $LN15@Got_Saycmd

; 554  : 	{
; 555  : 		msg += 4;

  001ec	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  001ef	83 c0 04	 add	 eax, 4
  001f2	89 45 f4	 mov	 DWORD PTR _msg$[ebp], eax

; 556  : 		action = true;

  001f5	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _action$[ebp], 1
$LN15@Got_Saycmd:

; 557  : 	}
; 558  : 
; 559  : 	if (flags & HU_SERVER_SAY)

  001fc	0f b6 45 fe	 movzx	 eax, BYTE PTR _flags$[ebp]
  00200	83 e0 01	 and	 eax, 1
  00203	74 16		 je	 SHORT $LN16@Got_Saycmd

; 560  : 	{
; 561  : 		if (playernum == 0)

  00205	83 7d 0c 00	 cmp	 DWORD PTR _playernum$[ebp], 0
  00209	75 09		 jne	 SHORT $LN18@Got_Saycmd

; 562  : 			dispname = "SERVER";

  0020b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dispname$[ebp], OFFSET ??_C@_06HNFCPEFM@SERVER@
  00212	eb 05		 jmp	 SHORT $LN19@Got_Saycmd
$LN18@Got_Saycmd:

; 563  : 		else // HAX!
; 564  : 			return;

  00214	e9 6e 02 00 00	 jmp	 $LN44@Got_Saycmd
$LN19@Got_Saycmd:

; 565  : 	}

  00219	eb 0c		 jmp	 SHORT $LN17@Got_Saycmd
$LN16@Got_Saycmd:

; 566  : 	else
; 567  : 		dispname = player_names[playernum];

  0021b	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  0021f	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00224	89 45 f8	 mov	 DWORD PTR _dispname$[ebp], eax
$LN17@Got_Saycmd:

; 568  : 
; 569  : 	// Clean up message a bit
; 570  : 	// If you use a \r character, you can remove your name
; 571  : 	// from before the text and then pretend to be someone else!
; 572  : 	ptr = msg;

  00227	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  0022a	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax
$LN7@Got_Saycmd:

; 573  : 	while (*ptr != '\0')

  0022d	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  00230	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00233	85 c9		 test	 ecx, ecx
  00235	74 1c		 je	 SHORT $LN8@Got_Saycmd

; 574  : 	{
; 575  : 		if (*ptr == '\r')

  00237	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  0023a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0023d	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00240	75 06		 jne	 SHORT $LN20@Got_Saycmd

; 576  : 			*ptr = ' ';

  00242	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  00245	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN20@Got_Saycmd:

; 577  : 
; 578  : 		ptr++;

  00248	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  0024b	83 c0 01	 add	 eax, 1
  0024e	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax

; 579  : 	}

  00251	eb da		 jmp	 SHORT $LN7@Got_Saycmd
$LN8@Got_Saycmd:

; 580  : 
; 581  : 	// Show messages sent by you, to you, to your team, or to everyone:
; 582  : 	if (consoleplayer == playernum // By you
; 583  : 		|| consoleplayer == target-1 // To you
; 584  : 		|| (target < 0 && ST_SameTeam(&players[consoleplayer],
; 585  : 			&players[-target - 1])) // To your team
; 586  : 		|| target == 0) // To everyone

  00253	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  00258	3b 45 0c	 cmp	 eax, DWORD PTR _playernum$[ebp]
  0025b	74 56		 je	 SHORT $LN22@Got_Saycmd
  0025d	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  00261	83 e8 01	 sub	 eax, 1
  00264	39 05 00 00 00
	00		 cmp	 DWORD PTR _consoleplayer, eax
  0026a	74 47		 je	 SHORT $LN22@Got_Saycmd
  0026c	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  00270	85 c0		 test	 eax, eax
  00272	7d 33		 jge	 SHORT $LN23@Got_Saycmd
  00274	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  00278	f7 d8		 neg	 eax
  0027a	83 e8 01	 sub	 eax, 1
  0027d	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  00283	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  00289	51		 push	 ecx
  0028a	69 15 00 00 00
	00 fc 01 00 00	 imul	 edx, DWORD PTR _consoleplayer, 508
  00294	81 c2 00 00 00
	00		 add	 edx, OFFSET _players
  0029a	52		 push	 edx
  0029b	e8 00 00 00 00	 call	 _ST_SameTeam
  002a0	83 c4 08	 add	 esp, 8
  002a3	85 c0		 test	 eax, eax
  002a5	75 0c		 jne	 SHORT $LN22@Got_Saycmd
$LN23@Got_Saycmd:
  002a7	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  002ab	85 c0		 test	 eax, eax
  002ad	0f 85 d4 01 00
	00		 jne	 $LN44@Got_Saycmd
$LN22@Got_Saycmd:

; 587  : 	{
; 588  : 		const char *cstart = "", *cend = "", *adminchar = "~", *remotechar = "@", *fmt;

  002b3	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _cstart$6[ebp], OFFSET ??_C@_00CNPNBAHC@@
  002ba	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _cend$5[ebp], OFFSET ??_C@_00CNPNBAHC@@
  002c1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _adminchar$4[ebp], OFFSET ??_C@_01PJKLJHI@?$HO@
  002c8	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _remotechar$3[ebp], OFFSET ??_C@_01EOFPKCAF@?$EA@

; 589  : 		char *tempchar = NULL;

  002cf	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _tempchar$1[ebp], 0

; 590  : 
; 591  : 		// In CTF and team match, color the player's name.
; 592  : 		if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  002d6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002dd	83 f8 04	 cmp	 eax, 4
  002e0	74 15		 je	 SHORT $LN25@Got_Saycmd
  002e2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002e9	83 f8 01	 cmp	 eax, 1
  002ec	75 40		 jne	 SHORT $LN28@Got_Saycmd
  002ee	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  002f5	74 37		 je	 SHORT $LN28@Got_Saycmd
$LN25@Got_Saycmd:

; 593  : 		{
; 594  : 			cend = "\x80";

  002f7	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _cend$5[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@

; 595  : 			if (players[playernum].ctfteam == 1) // red

  002fe	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00305	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR _players[eax+352], 1
  0030c	75 09		 jne	 SHORT $LN26@Got_Saycmd

; 596  : 				cstart = "\x85";

  0030e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _cstart$6[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  00315	eb 17		 jmp	 SHORT $LN28@Got_Saycmd
$LN26@Got_Saycmd:

; 597  : 			else if (players[playernum].ctfteam == 2) // blue

  00317	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0031e	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR _players[eax+352], 2
  00325	75 07		 jne	 SHORT $LN28@Got_Saycmd

; 598  : 				cstart = "\x84";

  00327	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _cstart$6[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN28@Got_Saycmd:

; 599  : 		}
; 600  : 
; 601  : 		// Give admins and remote admins their symbols.
; 602  : 		if (playernum == serverplayer || playernum == adminplayer)

  0032e	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00331	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00337	74 0f		 je	 SHORT $LN30@Got_Saycmd
  00339	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0033c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00342	0f 85 ae 00 00
	00		 jne	 $LN33@Got_Saycmd
$LN30@Got_Saycmd:

; 603  : 		{
; 604  : 			// Give the admin his special character ala SRB2Live.
; 605  : 			if (playernum == serverplayer)

  00348	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0034b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00351	75 2e		 jne	 SHORT $LN31@Got_Saycmd

; 606  : 				tempchar = (char *)calloc(strlen(cstart) + strlen(adminchar) + 1, sizeof(char));

  00353	6a 01		 push	 1
  00355	8b 45 d8	 mov	 eax, DWORD PTR _cstart$6[ebp]
  00358	50		 push	 eax
  00359	e8 00 00 00 00	 call	 _strlen
  0035e	83 c4 04	 add	 esp, 4
  00361	8b f0		 mov	 esi, eax
  00363	8b 4d d0	 mov	 ecx, DWORD PTR _adminchar$4[ebp]
  00366	51		 push	 ecx
  00367	e8 00 00 00 00	 call	 _strlen
  0036c	83 c4 04	 add	 esp, 4
  0036f	8d 54 06 01	 lea	 edx, DWORD PTR [esi+eax+1]
  00373	52		 push	 edx
  00374	e8 00 00 00 00	 call	 _calloc
  00379	83 c4 08	 add	 esp, 8
  0037c	89 45 c4	 mov	 DWORD PTR _tempchar$1[ebp], eax
  0037f	eb 2c		 jmp	 SHORT $LN32@Got_Saycmd
$LN31@Got_Saycmd:

; 607  : 			else
; 608  : 				tempchar = (char *)calloc(strlen(cstart) + strlen(remotechar) + 1, sizeof(char));

  00381	6a 01		 push	 1
  00383	8b 45 d8	 mov	 eax, DWORD PTR _cstart$6[ebp]
  00386	50		 push	 eax
  00387	e8 00 00 00 00	 call	 _strlen
  0038c	83 c4 04	 add	 esp, 4
  0038f	8b f0		 mov	 esi, eax
  00391	8b 4d cc	 mov	 ecx, DWORD PTR _remotechar$3[ebp]
  00394	51		 push	 ecx
  00395	e8 00 00 00 00	 call	 _strlen
  0039a	83 c4 04	 add	 esp, 4
  0039d	8d 54 06 01	 lea	 edx, DWORD PTR [esi+eax+1]
  003a1	52		 push	 edx
  003a2	e8 00 00 00 00	 call	 _calloc
  003a7	83 c4 08	 add	 esp, 8
  003aa	89 45 c4	 mov	 DWORD PTR _tempchar$1[ebp], eax
$LN32@Got_Saycmd:

; 609  : 
; 610  : 			if (tempchar)

  003ad	83 7d c4 00	 cmp	 DWORD PTR _tempchar$1[ebp], 0
  003b1	74 43		 je	 SHORT $LN33@Got_Saycmd

; 611  : 			{
; 612  : 				strcat(tempchar, cstart);

  003b3	8b 45 d8	 mov	 eax, DWORD PTR _cstart$6[ebp]
  003b6	50		 push	 eax
  003b7	8b 4d c4	 mov	 ecx, DWORD PTR _tempchar$1[ebp]
  003ba	51		 push	 ecx
  003bb	e8 00 00 00 00	 call	 _strcat
  003c0	83 c4 08	 add	 esp, 8

; 613  : 
; 614  : 				if (playernum == serverplayer)

  003c3	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  003c6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  003cc	75 12		 jne	 SHORT $LN34@Got_Saycmd

; 615  : 					strcat(tempchar, adminchar);

  003ce	8b 45 d0	 mov	 eax, DWORD PTR _adminchar$4[ebp]
  003d1	50		 push	 eax
  003d2	8b 4d c4	 mov	 ecx, DWORD PTR _tempchar$1[ebp]
  003d5	51		 push	 ecx
  003d6	e8 00 00 00 00	 call	 _strcat
  003db	83 c4 08	 add	 esp, 8
  003de	eb 10		 jmp	 SHORT $LN35@Got_Saycmd
$LN34@Got_Saycmd:

; 616  : 				else
; 617  : 					strcat(tempchar, remotechar);

  003e0	8b 45 cc	 mov	 eax, DWORD PTR _remotechar$3[ebp]
  003e3	50		 push	 eax
  003e4	8b 4d c4	 mov	 ecx, DWORD PTR _tempchar$1[ebp]
  003e7	51		 push	 ecx
  003e8	e8 00 00 00 00	 call	 _strcat
  003ed	83 c4 08	 add	 esp, 8
$LN35@Got_Saycmd:

; 618  : 
; 619  : 				cstart = tempchar;

  003f0	8b 45 c4	 mov	 eax, DWORD PTR _tempchar$1[ebp]
  003f3	89 45 d8	 mov	 DWORD PTR _cstart$6[ebp], eax
$LN33@Got_Saycmd:

; 620  : 			}
; 621  : 		}
; 622  : 
; 623  : 		// Choose the proper format string for display.
; 624  : 		// Each format includes four strings: color start, display
; 625  : 		// name, color end, and the message itself.
; 626  : 		// '\4' makes the message yellow and beeps; '\3' just beeps.
; 627  : 		if (action)

  003f6	83 7d f0 00	 cmp	 DWORD PTR _action$[ebp], 0
  003fa	74 09		 je	 SHORT $LN36@Got_Saycmd

; 628  : 			fmt = "\4* %s%s%s \x82%s\n";

  003fc	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _fmt$2[ebp], OFFSET ??_C@_0P@BCFNPOJM@?$AE?$CK?5?$CFs?$CFs?$CFs?5?$IC?$CFs?6@
  00403	eb 54		 jmp	 SHORT $LN43@Got_Saycmd
$LN36@Got_Saycmd:

; 629  : 		else if (target == 0) // To everyone

  00405	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  00409	85 c0		 test	 eax, eax
  0040b	75 09		 jne	 SHORT $LN38@Got_Saycmd

; 630  : 			fmt = "\3<%s%s%s> %s\n";

  0040d	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _fmt$2[ebp], OFFSET ??_C@_0O@OAPNNGHL@?$AD?$DM?$CFs?$CFs?$CFs?$DO?5?$CFs?6@
  00414	eb 43		 jmp	 SHORT $LN43@Got_Saycmd
$LN38@Got_Saycmd:

; 631  : 		else if (target-1 == consoleplayer) // To you

  00416	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  0041a	83 e8 01	 sub	 eax, 1
  0041d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00423	75 09		 jne	 SHORT $LN40@Got_Saycmd

; 632  : 			fmt = "\3*%s%s%s* %s\n";

  00425	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _fmt$2[ebp], OFFSET ??_C@_0O@GMFIOPPB@?$AD?$CK?$CFs?$CFs?$CFs?$CK?5?$CFs?6@
  0042c	eb 2b		 jmp	 SHORT $LN43@Got_Saycmd
$LN40@Got_Saycmd:

; 633  : 		else if (target > 0) // By you, to another player

  0042e	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  00432	85 c0		 test	 eax, eax
  00434	7e 1c		 jle	 SHORT $LN42@Got_Saycmd

; 634  : 		{
; 635  : 			// Use target's name.
; 636  : 			dispname = player_names[target-1];

  00436	0f be 45 ff	 movsx	 eax, BYTE PTR _target$[ebp]
  0043a	83 e8 01	 sub	 eax, 1
  0043d	6b c8 16	 imul	 ecx, eax, 22
  00440	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00446	89 4d f8	 mov	 DWORD PTR _dispname$[ebp], ecx

; 637  : 			fmt = "\3->*%s%s%s* %s\n";

  00449	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _fmt$2[ebp], OFFSET ??_C@_0BA@BAHHBBOM@?$AD?9?$DO?$CK?$CFs?$CFs?$CFs?$CK?5?$CFs?6@

; 638  : 		}

  00450	eb 07		 jmp	 SHORT $LN43@Got_Saycmd
$LN42@Got_Saycmd:

; 639  : 		else // To your team
; 640  : 			fmt = "\3>>%s%s%s<< (team) %s\n";

  00452	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _fmt$2[ebp], OFFSET ??_C@_0BH@PNJGMCEO@?$AD?$DO?$DO?$CFs?$CFs?$CFs?$DM?$DM?5?$CIteam?$CJ?5?$CFs?6@
$LN43@Got_Saycmd:

; 641  : 
; 642  : 		CONS_Printf(fmt, cstart, dispname, cend, msg);

  00459	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  0045c	50		 push	 eax
  0045d	8b 4d d4	 mov	 ecx, DWORD PTR _cend$5[ebp]
  00460	51		 push	 ecx
  00461	8b 55 f8	 mov	 edx, DWORD PTR _dispname$[ebp]
  00464	52		 push	 edx
  00465	8b 45 d8	 mov	 eax, DWORD PTR _cstart$6[ebp]
  00468	50		 push	 eax
  00469	8b 4d c8	 mov	 ecx, DWORD PTR _fmt$2[ebp]
  0046c	51		 push	 ecx
  0046d	e8 00 00 00 00	 call	 _CONS_Printf
  00472	83 c4 14	 add	 esp, 20			; 00000014H

; 643  : 
; 644  : 		if (tempchar)

  00475	83 7d c4 00	 cmp	 DWORD PTR _tempchar$1[ebp], 0
  00479	74 0c		 je	 SHORT $LN44@Got_Saycmd

; 645  : 			free(tempchar);

  0047b	8b 45 c4	 mov	 eax, DWORD PTR _tempchar$1[ebp]
  0047e	50		 push	 eax
  0047f	e8 00 00 00 00	 call	 _free
  00484	83 c4 04	 add	 esp, 4
$LN44@Got_Saycmd:

; 646  : 	}
; 647  : }

  00487	5f		 pop	 edi
  00488	5e		 pop	 esi
  00489	5b		 pop	 ebx
  0048a	8b e5		 mov	 esp, ebp
  0048c	5d		 pop	 ebp
  0048d	c3		 ret	 0
_Got_Saycmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _Command_CSay_f
_TEXT	SEGMENT
_Command_CSay_f PROC					; COMDAT

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 469  : 	if (COM_Argc() < 2)

  00009	e8 00 00 00 00	 call	 _COM_Argc
  0000e	83 f8 02	 cmp	 eax, 2
  00011	73 0f		 jae	 SHORT $LN2@Command_CS

; 470  : 	{
; 471  : 		CONS_Printf("csay <message>: send a message to be shown in the middle of the screen\n");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@FKOBKODJ@csay?5?$DMmessage?$DO?3?5send?5a?5message?5@
  00018	e8 00 00 00 00	 call	 _CONS_Printf
  0001d	83 c4 04	 add	 esp, 4

; 472  : 		return;

  00020	eb 33		 jmp	 SHORT $LN1@Command_CS
$LN2@Command_CS:

; 473  : 	}
; 474  : 
; 475  : 	if(!server && adminplayer != consoleplayer)

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00029	75 1c		 jne	 SHORT $LN3@Command_CS
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00030	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00036	74 0f		 je	 SHORT $LN3@Command_CS

; 476  : 	{
; 477  : 		CONS_Printf("Only servers and admins can use csay.\n");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@HDACFONC@Only?5servers?5and?5admins?5can?5use@
  0003d	e8 00 00 00 00	 call	 _CONS_Printf
  00042	83 c4 04	 add	 esp, 4

; 478  : 		return;

  00045	eb 0e		 jmp	 SHORT $LN1@Command_CS
$LN3@Command_CS:

; 479  : 	}
; 480  : 
; 481  : 	DoSayCommand(0, 1, HU_CSAY);

  00047	6a 02		 push	 2
  00049	6a 01		 push	 1
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 _DoSayCommand
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_CS:

; 482  : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_Command_CSay_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _Command_Sayteam_f
_TEXT	SEGMENT
_Command_Sayteam_f PROC					; COMDAT

; 448  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 449  : 	if (COM_Argc() < 2)

  00009	e8 00 00 00 00	 call	 _COM_Argc
  0000e	83 f8 02	 cmp	 eax, 2
  00011	73 0f		 jae	 SHORT $LN2@Command_Sa

; 450  : 	{
; 451  : 		CONS_Printf("sayteam <message>: send a message to your team\n");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BOLEJJDO@sayteam?5?$DMmessage?$DO?3?5send?5a?5messa@
  00018	e8 00 00 00 00	 call	 _CONS_Printf
  0001d	83 c4 04	 add	 esp, 4

; 452  : 		return;

  00020	eb 2f		 jmp	 SHORT $LN1@Command_Sa
$LN2@Command_Sa:

; 453  : 	}
; 454  : 
; 455  : 	if (dedicated)

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00029	74 0f		 je	 SHORT $LN3@Command_Sa

; 456  : 	{
; 457  : 		CONS_Printf("Dedicated servers can't send team messages. Use \"say\".\n");

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HCJDFNGG@Dedicated?5servers?5can?8t?5send?5te@
  00030	e8 00 00 00 00	 call	 _CONS_Printf
  00035	83 c4 04	 add	 esp, 4

; 458  : 		return;

  00038	eb 17		 jmp	 SHORT $LN1@Command_Sa
$LN3@Command_Sa:

; 459  : 	}
; 460  : 
; 461  : 	DoSayCommand((SINT8)(-(consoleplayer+1)), 1, 0);

  0003a	6a 00		 push	 0
  0003c	6a 01		 push	 1
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  00043	83 c0 01	 add	 eax, 1
  00046	f7 d8		 neg	 eax
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _DoSayCommand
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Sa:

; 462  : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_Command_Sayteam_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _Command_Sayto_f
_TEXT	SEGMENT
_target$ = -4						; size = 4
_Command_Sayto_f PROC					; COMDAT

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 424  : 	INT32 target;
; 425  : 
; 426  : 	if (COM_Argc() < 3)

  00009	e8 00 00 00 00	 call	 _COM_Argc
  0000e	83 f8 03	 cmp	 eax, 3
  00011	73 0f		 jae	 SHORT $LN2@Command_Sa

; 427  : 	{
; 428  : 		CONS_Printf("sayto <playername|playernum> <message>: send a message to a player\n");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GCOEDLAP@sayto?5?$DMplayername?$HMplayernum?$DO?5?$DMm@
  00018	e8 00 00 00 00	 call	 _CONS_Printf
  0001d	83 c4 04	 add	 esp, 4

; 429  : 		return;

  00020	eb 48		 jmp	 SHORT $LN1@Command_Sa
$LN2@Command_Sa:

; 430  : 	}
; 431  : 
; 432  : 	target = nametonum(COM_Argv(1));

  00022	6a 01		 push	 1
  00024	e8 00 00 00 00	 call	 _COM_Argv
  00029	83 c4 04	 add	 esp, 4
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _nametonum
  00032	83 c4 04	 add	 esp, 4
  00035	0f be c0	 movsx	 eax, al
  00038	89 45 fc	 mov	 DWORD PTR _target$[ebp], eax

; 433  : 	if (target == -1)

  0003b	83 7d fc ff	 cmp	 DWORD PTR _target$[ebp], -1
  0003f	75 0f		 jne	 SHORT $LN3@Command_Sa

; 434  : 	{
; 435  : 		CONS_Printf("sayto: No player with that name!\n");

  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@OKMBBEEH@sayto?3?5No?5player?5with?5that?5name@
  00046	e8 00 00 00 00	 call	 _CONS_Printf
  0004b	83 c4 04	 add	 esp, 4

; 436  : 		return;

  0004e	eb 1a		 jmp	 SHORT $LN1@Command_Sa
$LN3@Command_Sa:

; 437  : 	}
; 438  : 	target++; // Internally we use 0 to 31, but say command uses 1 to 32.

  00050	8b 45 fc	 mov	 eax, DWORD PTR _target$[ebp]
  00053	83 c0 01	 add	 eax, 1
  00056	89 45 fc	 mov	 DWORD PTR _target$[ebp], eax

; 439  : 
; 440  : 	DoSayCommand((SINT8)target, 2, 0);

  00059	6a 00		 push	 0
  0005b	6a 02		 push	 2
  0005d	0f b6 45 fc	 movzx	 eax, BYTE PTR _target$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _DoSayCommand
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Sa:

; 441  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_Command_Sayto_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _Command_Say_f
_TEXT	SEGMENT
_Command_Say_f PROC					; COMDAT

; 408  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 409  : 	if (COM_Argc() < 2)

  00009	e8 00 00 00 00	 call	 _COM_Argc
  0000e	83 f8 02	 cmp	 eax, 2
  00011	73 0f		 jae	 SHORT $LN2@Command_Sa

; 410  : 	{
; 411  : 		CONS_Printf("say <message>: send a message\n");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JNBOBKFC@say?5?$DMmessage?$DO?3?5send?5a?5message?6@
  00018	e8 00 00 00 00	 call	 _CONS_Printf
  0001d	83 c4 04	 add	 esp, 4

; 412  : 		return;

  00020	eb 0e		 jmp	 SHORT $LN1@Command_Sa
$LN2@Command_Sa:

; 413  : 	}
; 414  : 
; 415  : 	DoSayCommand(0, 1, 0);

  00022	6a 00		 push	 0
  00024	6a 01		 push	 1
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 _DoSayCommand
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Sa:

; 416  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_Command_Say_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawCoopOverlay
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_found$2 = -28						; size = 4
_emblemsfound$3 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_HU_DrawCoopOverlay PROC				; COMDAT

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 1647 : 	if (!netgame && (!modifiedgame || savemoddata))

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0001a	0f 85 b5 00 00
	00		 jne	 $LN5@HU_DrawCoo
  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00027	74 0d		 je	 SHORT $LN6@HU_DrawCoo
  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00030	0f 84 9f 00 00
	00		 je	 $LN5@HU_DrawCoo
$LN6@HU_DrawCoo:

; 1648 : 	{
; 1649 : 		char emblemsfound[20];
; 1650 : 		INT32 found = 0;

  00036	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _found$2[ebp], 0

; 1651 : 		INT32 i;
; 1652 : 
; 1653 : 		for (i = 0; i < MAXEMBLEMS; i++)

  0003d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00044	eb 09		 jmp	 SHORT $LN4@HU_DrawCoo
$LN2@HU_DrawCoo:
  00046	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	89 45 e0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@HU_DrawCoo:
  0004f	81 7d e0 00 02
	00 00		 cmp	 DWORD PTR _i$1[ebp], 512 ; 00000200H
  00056	7d 1a		 jge	 SHORT $LN3@HU_DrawCoo

; 1654 : 		{
; 1655 : 			if (emblemlocations[i].collected)

  00058	6b 45 e0 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  0005c	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+10]
  00063	85 c9		 test	 ecx, ecx
  00065	74 09		 je	 SHORT $LN7@HU_DrawCoo

; 1656 : 				found++;

  00067	8b 45 e4	 mov	 eax, DWORD PTR _found$2[ebp]
  0006a	83 c0 01	 add	 eax, 1
  0006d	89 45 e4	 mov	 DWORD PTR _found$2[ebp], eax
$LN7@HU_DrawCoo:

; 1657 : 		}

  00070	eb d4		 jmp	 SHORT $LN2@HU_DrawCoo
$LN3@HU_DrawCoo:

; 1658 : 
; 1659 : 		sprintf(emblemsfound, "- %d/%d", found, numemblems);

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR _numemblems
  00077	50		 push	 eax
  00078	8b 4d e4	 mov	 ecx, DWORD PTR _found$2[ebp]
  0007b	51		 push	 ecx
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_07MLIGLOEF@?9?5?$CFd?1?$CFd@
  00081	8d 55 e8	 lea	 edx, DWORD PTR _emblemsfound$3[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _sprintf
  0008a	83 c4 10	 add	 esp, 16			; 00000010H

; 1660 : 		V_DrawString(160, 144, 0, emblemsfound);

  0008d	8d 45 e8	 lea	 eax, DWORD PTR _emblemsfound$3[ebp]
  00090	50		 push	 eax
  00091	6a 00		 push	 0
  00093	68 90 00 00 00	 push	 144			; 00000090H
  00098	68 a0 00 00 00	 push	 160			; 000000a0H
  0009d	e8 00 00 00 00	 call	 _V_DrawString
  000a2	83 c4 10	 add	 esp, 16			; 00000010H

; 1661 : 		V_DrawScaledPatch(128, 144 - SHORT(emblemicon->height)/4, 0, emblemicon);

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _emblemicon
  000aa	50		 push	 eax
  000ab	6a 00		 push	 0
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _emblemicon
  000b3	0f bf 41 02	 movsx	 eax, WORD PTR [ecx+2]
  000b7	99		 cdq
  000b8	83 e2 03	 and	 edx, 3
  000bb	03 c2		 add	 eax, edx
  000bd	c1 f8 02	 sar	 eax, 2
  000c0	ba 90 00 00 00	 mov	 edx, 144		; 00000090H
  000c5	2b d0		 sub	 edx, eax
  000c7	52		 push	 edx
  000c8	68 80 00 00 00	 push	 128			; 00000080H
  000cd	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@HU_DrawCoo:

; 1662 : 	}
; 1663 : 
; 1664 : 	if (emeralds & EMERALD1)

  000d5	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  000dc	83 e0 01	 and	 eax, 1
  000df	74 23		 je	 SHORT $LN8@HU_DrawCoo

; 1665 : 		V_DrawScaledPatch((BASEVIDWIDTH/2)-8   , (BASEVIDHEIGHT/3)-32, V_TRANSLUCENT, emeraldpics[0]);

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	6b c8 00	 imul	 ecx, eax, 0
  000e9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _emeraldpics[ecx]
  000ef	52		 push	 edx
  000f0	68 00 00 40 00	 push	 4194304			; 00400000H
  000f5	6a 22		 push	 34			; 00000022H
  000f7	68 98 00 00 00	 push	 152			; 00000098H
  000fc	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00101	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@HU_DrawCoo:

; 1666 : 	if (emeralds & EMERALD2)

  00104	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0010b	83 e0 02	 and	 eax, 2
  0010e	74 23		 je	 SHORT $LN9@HU_DrawCoo

; 1667 : 		V_DrawScaledPatch((BASEVIDWIDTH/2)-8+24, (BASEVIDHEIGHT/3)-16, V_TRANSLUCENT, emeraldpics[1]);

  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	c1 e0 00	 shl	 eax, 0
  00118	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _emeraldpics[eax]
  0011e	51		 push	 ecx
  0011f	68 00 00 40 00	 push	 4194304			; 00400000H
  00124	6a 32		 push	 50			; 00000032H
  00126	68 b0 00 00 00	 push	 176			; 000000b0H
  0012b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00130	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@HU_DrawCoo:

; 1668 : 	if (emeralds & EMERALD3)

  00133	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0013a	83 e0 04	 and	 eax, 4
  0013d	74 22		 je	 SHORT $LN10@HU_DrawCoo

; 1669 : 		V_DrawScaledPatch((BASEVIDWIDTH/2)-8+24, (BASEVIDHEIGHT/3)+16, V_TRANSLUCENT, emeraldpics[2]);

  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	d1 e0		 shl	 eax, 1
  00146	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _emeraldpics[eax]
  0014c	51		 push	 ecx
  0014d	68 00 00 40 00	 push	 4194304			; 00400000H
  00152	6a 52		 push	 82			; 00000052H
  00154	68 b0 00 00 00	 push	 176			; 000000b0H
  00159	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0015e	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@HU_DrawCoo:

; 1670 : 	if (emeralds & EMERALD4)

  00161	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00168	83 e0 08	 and	 eax, 8
  0016b	74 23		 je	 SHORT $LN11@HU_DrawCoo

; 1671 : 		V_DrawScaledPatch((BASEVIDWIDTH/2)-8   , (BASEVIDHEIGHT/3)+32, V_TRANSLUCENT, emeraldpics[3]);

  0016d	b8 04 00 00 00	 mov	 eax, 4
  00172	6b c8 03	 imul	 ecx, eax, 3
  00175	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _emeraldpics[ecx]
  0017b	52		 push	 edx
  0017c	68 00 00 40 00	 push	 4194304			; 00400000H
  00181	6a 62		 push	 98			; 00000062H
  00183	68 98 00 00 00	 push	 152			; 00000098H
  00188	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0018d	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@HU_DrawCoo:

; 1672 : 	if (emeralds & EMERALD5)

  00190	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00197	83 e0 10	 and	 eax, 16			; 00000010H
  0019a	74 23		 je	 SHORT $LN12@HU_DrawCoo

; 1673 : 		V_DrawScaledPatch((BASEVIDWIDTH/2)-8-24, (BASEVIDHEIGHT/3)+16, V_TRANSLUCENT, emeraldpics[4]);

  0019c	b8 04 00 00 00	 mov	 eax, 4
  001a1	c1 e0 02	 shl	 eax, 2
  001a4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _emeraldpics[eax]
  001aa	51		 push	 ecx
  001ab	68 00 00 40 00	 push	 4194304			; 00400000H
  001b0	6a 52		 push	 82			; 00000052H
  001b2	68 80 00 00 00	 push	 128			; 00000080H
  001b7	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001bc	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@HU_DrawCoo:

; 1674 : 	if (emeralds & EMERALD6)

  001bf	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  001c6	83 e0 20	 and	 eax, 32			; 00000020H
  001c9	74 23		 je	 SHORT $LN13@HU_DrawCoo

; 1675 : 		V_DrawScaledPatch((BASEVIDWIDTH/2)-8-24, (BASEVIDHEIGHT/3)-16, V_TRANSLUCENT, emeraldpics[5]);

  001cb	b8 04 00 00 00	 mov	 eax, 4
  001d0	6b c8 05	 imul	 ecx, eax, 5
  001d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _emeraldpics[ecx]
  001d9	52		 push	 edx
  001da	68 00 00 40 00	 push	 4194304			; 00400000H
  001df	6a 32		 push	 50			; 00000032H
  001e1	68 80 00 00 00	 push	 128			; 00000080H
  001e6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001eb	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@HU_DrawCoo:

; 1676 : 	if (emeralds & EMERALD7)

  001ee	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  001f5	83 e0 40	 and	 eax, 64			; 00000040H
  001f8	74 23		 je	 SHORT $LN14@HU_DrawCoo

; 1677 : 		V_DrawScaledPatch((BASEVIDWIDTH/2)-8   , (BASEVIDHEIGHT/3)   , V_TRANSLUCENT, emeraldpics[6]);

  001fa	b8 04 00 00 00	 mov	 eax, 4
  001ff	6b c8 06	 imul	 ecx, eax, 6
  00202	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _emeraldpics[ecx]
  00208	52		 push	 edx
  00209	68 00 00 40 00	 push	 4194304			; 00400000H
  0020e	6a 42		 push	 66			; 00000042H
  00210	68 98 00 00 00	 push	 152			; 00000098H
  00215	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0021a	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@HU_DrawCoo:

; 1678 : }

  0021d	5f		 pop	 edi
  0021e	5e		 pop	 esi
  0021f	5b		 pop	 ebx
  00220	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00223	33 cd		 xor	 ecx, ebp
  00225	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022a	8b e5		 mov	 esp, ebp
  0022c	5d		 pop	 ebp
  0022d	c3		 ret	 0
_HU_DrawCoopOverlay ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawRankings
_TEXT	SEGMENT
tv214 = -932						; size = 4
_totalscore$1 = -800					; size = 4
_timeval$2 = -796					; size = 4
_whiteplayer$ = -792					; size = 4
_completed$ = -788					; size = 128
_scorelines$ = -660					; size = 4
_j$ = -656						; size = 4
_i$ = -652						; size = 4
_tab$ = -648						; size = 640
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_HU_DrawRankings PROC					; COMDAT

; 1471 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 03 00
	00		 sub	 esp, 932		; 000003a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1472 : 	patch_t *p;
; 1473 : 	playersort_t tab[MAXPLAYERS];
; 1474 : 	INT32 i, j, scorelines;
; 1475 : 	boolean completed[MAXPLAYERS];
; 1476 : 	UINT32 whiteplayer;
; 1477 : 
; 1478 : 	// draw the ranking title panel
; 1479 : /*	if (gametype != GT_CTF)
; 1480 : 	{
; 1481 : 		p = W_CachePatchName("RESULT", PU_CACHE);
; 1482 : 		V_DrawScaledPatch((BASEVIDWIDTH - SHORT(p->width))/2, 5, 0, p);
; 1483 : 	}*/
; 1484 : 
; 1485 : 	// draw the current gametype in the lower right
; 1486 : 	HU_drawGametype();

  00016	e8 00 00 00 00	 call	 _HU_drawGametype
  0001b	90		 npad	 1

; 1487 : 
; 1488 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0001c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00023	83 f8 04	 cmp	 eax, 4
  00026	74 1d		 je	 SHORT $LN15@HU_DrawRan
  00028	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0002f	83 f8 01	 cmp	 eax, 1
  00032	0f 85 e1 00 00
	00		 jne	 $LN14@HU_DrawRan
  00038	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0003f	0f 84 d4 00 00
	00		 je	 $LN14@HU_DrawRan
$LN15@HU_DrawRan:

; 1489 : 	{
; 1490 : 		if (gametype == GT_CTF)

  00045	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0004c	83 f8 04	 cmp	 eax, 4
  0004f	75 0a		 jne	 SHORT $LN16@HU_DrawRan

; 1491 : 			p = bflagico;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _bflagico
  00056	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  00059	eb 08		 jmp	 SHORT $LN17@HU_DrawRan
$LN16@HU_DrawRan:

; 1492 : 		else
; 1493 : 			p = bmatcico;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bmatcico
  00060	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
$LN17@HU_DrawRan:

; 1494 : 
; 1495 : 		V_DrawSmallScaledPatch(128 - SHORT(p->width)/4, 4, 0, p);

  00063	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00066	50		 push	 eax
  00067	6a 00		 push	 0
  00069	6a 04		 push	 4
  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0006e	0f bf 01	 movsx	 eax, WORD PTR [ecx]
  00071	99		 cdq
  00072	83 e2 03	 and	 edx, 3
  00075	03 c2		 add	 eax, edx
  00077	c1 f8 02	 sar	 eax, 2
  0007a	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0007f	2b d0		 sub	 edx, eax
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00087	83 c4 10	 add	 esp, 16			; 00000010H

; 1496 : 		V_DrawCenteredString(128, 16, 0, va("%u", bluescore));

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR _bluescore
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00095	e8 00 00 00 00	 call	 _va
  0009a	83 c4 08	 add	 esp, 8
  0009d	50		 push	 eax
  0009e	6a 00		 push	 0
  000a0	6a 10		 push	 16			; 00000010H
  000a2	68 80 00 00 00	 push	 128			; 00000080H
  000a7	e8 00 00 00 00	 call	 _V_DrawCenteredString
  000ac	83 c4 10	 add	 esp, 16			; 00000010H

; 1497 : 
; 1498 : 		if (gametype == GT_CTF)

  000af	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000b6	83 f8 04	 cmp	 eax, 4
  000b9	75 0a		 jne	 SHORT $LN18@HU_DrawRan

; 1499 : 			p = rflagico;

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _rflagico
  000c0	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  000c3	eb 08		 jmp	 SHORT $LN19@HU_DrawRan
$LN18@HU_DrawRan:

; 1500 : 		else
; 1501 : 			p = rmatcico;

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _rmatcico
  000ca	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
$LN19@HU_DrawRan:

; 1502 : 
; 1503 : 		V_DrawSmallScaledPatch(192 - SHORT(p->width)/4, 4, 0, p);

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000d0	50		 push	 eax
  000d1	6a 00		 push	 0
  000d3	6a 04		 push	 4
  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000d8	0f bf 01	 movsx	 eax, WORD PTR [ecx]
  000db	99		 cdq
  000dc	83 e2 03	 and	 edx, 3
  000df	03 c2		 add	 eax, edx
  000e1	c1 f8 02	 sar	 eax, 2
  000e4	ba c0 00 00 00	 mov	 edx, 192		; 000000c0H
  000e9	2b d0		 sub	 edx, eax
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000f1	83 c4 10	 add	 esp, 16			; 00000010H

; 1504 : 		V_DrawCenteredString(192, 16, 0, va("%u", redscore));

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _redscore
  000f9	50		 push	 eax
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  000ff	e8 00 00 00 00	 call	 _va
  00104	83 c4 08	 add	 esp, 8
  00107	50		 push	 eax
  00108	6a 00		 push	 0
  0010a	6a 10		 push	 16			; 00000010H
  0010c	68 c0 00 00 00	 push	 192			; 000000c0H
  00111	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00116	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@HU_DrawRan:

; 1505 : 	}
; 1506 : 
; 1507 : 	if (gametype != GT_RACE && gametype != GT_COOP)

  00119	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00120	83 f8 02	 cmp	 eax, 2
  00123	0f 84 11 01 00
	00		 je	 $LN20@HU_DrawRan
  00129	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00130	85 c0		 test	 eax, eax
  00132	0f 84 02 01 00
	00		 je	 $LN20@HU_DrawRan

; 1508 : 	{
; 1509 : 		if (cv_timelimit.value && timelimitintics > 0)

  00138	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_timelimit+20, 0
  0013f	0f 84 ac 00 00
	00		 je	 $LN24@HU_DrawRan
  00145	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timelimitintics, 0
  0014c	0f 86 9f 00 00
	00		 jbe	 $LN24@HU_DrawRan

; 1510 : 		{
; 1511 : 			INT32 timeval = (timelimitintics+1-leveltime)/TICRATE;

  00152	a1 00 00 00 00	 mov	 eax, DWORD PTR _timelimitintics
  00157	83 c0 01	 add	 eax, 1
  0015a	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _leveltime
  00160	33 d2		 xor	 edx, edx
  00162	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00167	f7 f1		 div	 ecx
  00169	89 85 e4 fc ff
	ff		 mov	 DWORD PTR _timeval$2[ebp], eax

; 1512 : 
; 1513 : 			if (leveltime <= timelimitintics)

  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00174	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _timelimitintics
  0017a	77 36		 ja	 SHORT $LN23@HU_DrawRan

; 1514 : 			{
; 1515 : 				V_DrawCenteredString(64, 8, 0, "TIME LEFT");

  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_09OGLFPIFG@TIME?5LEFT@
  00181	6a 00		 push	 0
  00183	6a 08		 push	 8
  00185	6a 40		 push	 64			; 00000040H
  00187	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0018c	83 c4 10	 add	 esp, 16			; 00000010H

; 1516 : 				V_DrawCenteredString(64, 16, 0, va("%u", timeval));

  0018f	8b 85 e4 fc ff
	ff		 mov	 eax, DWORD PTR _timeval$2[ebp]
  00195	50		 push	 eax
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  0019b	e8 00 00 00 00	 call	 _va
  001a0	83 c4 08	 add	 esp, 8
  001a3	50		 push	 eax
  001a4	6a 00		 push	 0
  001a6	6a 10		 push	 16			; 00000010H
  001a8	6a 40		 push	 64			; 00000040H
  001aa	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001af	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@HU_DrawRan:

; 1517 : 			}
; 1518 : 
; 1519 : 			// overtime
; 1520 : 			if ((leveltime > (timelimitintics + TICRATE/2)) && cv_overtime.value)

  001b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _timelimitintics
  001b7	83 c0 11	 add	 eax, 17			; 00000011H
  001ba	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  001c0	76 2f		 jbe	 SHORT $LN24@HU_DrawRan
  001c2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_overtime+20, 0
  001c9	74 26		 je	 SHORT $LN24@HU_DrawRan

; 1521 : 			{
; 1522 : 				V_DrawCenteredString(64, 8, 0, "TIME LEFT");

  001cb	68 00 00 00 00	 push	 OFFSET ??_C@_09OGLFPIFG@TIME?5LEFT@
  001d0	6a 00		 push	 0
  001d2	6a 08		 push	 8
  001d4	6a 40		 push	 64			; 00000040H
  001d6	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001db	83 c4 10	 add	 esp, 16			; 00000010H

; 1523 : 				V_DrawCenteredString(64, 16, 0, "OVERTIME");

  001de	68 00 00 00 00	 push	 OFFSET ??_C@_08CCCPFIL@OVERTIME@
  001e3	6a 00		 push	 0
  001e5	6a 10		 push	 16			; 00000010H
  001e7	6a 40		 push	 64			; 00000040H
  001e9	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001ee	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@HU_DrawRan:

; 1524 : 			}
; 1525 : 		}
; 1526 : 
; 1527 : 		if (cv_pointlimit.value > 0)

  001f1	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_pointlimit+20, 0
  001f8	7e 3b		 jle	 SHORT $LN25@HU_DrawRan

; 1528 : 		{
; 1529 : 			V_DrawCenteredString(256, 8, 0, "POINT LIMIT");

  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HCFEOADK@POINT?5LIMIT@
  001ff	6a 00		 push	 0
  00201	6a 08		 push	 8
  00203	68 00 01 00 00	 push	 256			; 00000100H
  00208	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0020d	83 c4 10	 add	 esp, 16			; 00000010H

; 1530 : 			V_DrawCenteredString(256, 16, 0, va("%d", cv_pointlimit.value));

  00210	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_pointlimit+20
  00215	50		 push	 eax
  00216	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0021b	e8 00 00 00 00	 call	 _va
  00220	83 c4 08	 add	 esp, 8
  00223	50		 push	 eax
  00224	6a 00		 push	 0
  00226	6a 10		 push	 16			; 00000010H
  00228	68 00 01 00 00	 push	 256			; 00000100H
  0022d	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00232	83 c4 10	 add	 esp, 16			; 00000010H
$LN25@HU_DrawRan:

; 1531 : 		}
; 1532 : 	}

  00235	e9 e7 00 00 00	 jmp	 $LN29@HU_DrawRan
$LN20@HU_DrawRan:

; 1533 : 	else if (gametype == GT_COOP)

  0023a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00241	85 c0		 test	 eax, eax
  00243	0f 85 9a 00 00
	00		 jne	 $LN26@HU_DrawRan

; 1534 : 	{
; 1535 : 		INT32 totalscore = 0;

  00249	c7 85 e0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _totalscore$1[ebp], 0

; 1536 : 		for (i = 0; i < MAXPLAYERS; i++)

  00253	c7 85 74 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0025d	eb 0f		 jmp	 SHORT $LN4@HU_DrawRan
$LN2@HU_DrawRan:
  0025f	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00265	83 c0 01	 add	 eax, 1
  00268	89 85 74 fd ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN4@HU_DrawRan:
  0026e	83 bd 74 fd ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00275	7d 2e		 jge	 SHORT $LN3@HU_DrawRan

; 1537 : 		{
; 1538 : 			if (playeringame[i])

  00277	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0027d	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00285	74 1c		 je	 SHORT $LN28@HU_DrawRan

; 1539 : 				totalscore += players[i].score;

  00287	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00291	8b 8d e0 fc ff
	ff		 mov	 ecx, DWORD PTR _totalscore$1[ebp]
  00297	03 88 bc 00 00
	00		 add	 ecx, DWORD PTR _players[eax+188]
  0029d	89 8d e0 fc ff
	ff		 mov	 DWORD PTR _totalscore$1[ebp], ecx
$LN28@HU_DrawRan:

; 1540 : 		}

  002a3	eb ba		 jmp	 SHORT $LN2@HU_DrawRan
$LN3@HU_DrawRan:

; 1541 : 
; 1542 : 		V_DrawCenteredString(256, 8, 0, "TOTAL SCORE");

  002a5	68 00 00 00 00	 push	 OFFSET ??_C@_0M@ICHGDLLH@TOTAL?5SCORE@
  002aa	6a 00		 push	 0
  002ac	6a 08		 push	 8
  002ae	68 00 01 00 00	 push	 256			; 00000100H
  002b3	e8 00 00 00 00	 call	 _V_DrawCenteredString
  002b8	83 c4 10	 add	 esp, 16			; 00000010H

; 1543 : 		V_DrawCenteredString(256, 16, 0, va("%u", totalscore));

  002bb	8b 85 e0 fc ff
	ff		 mov	 eax, DWORD PTR _totalscore$1[ebp]
  002c1	50		 push	 eax
  002c2	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  002c7	e8 00 00 00 00	 call	 _va
  002cc	83 c4 08	 add	 esp, 8
  002cf	50		 push	 eax
  002d0	6a 00		 push	 0
  002d2	6a 10		 push	 16			; 00000010H
  002d4	68 00 01 00 00	 push	 256			; 00000100H
  002d9	e8 00 00 00 00	 call	 _V_DrawCenteredString
  002de	83 c4 10	 add	 esp, 16			; 00000010H

; 1544 : 	}

  002e1	eb 3e		 jmp	 SHORT $LN29@HU_DrawRan
$LN26@HU_DrawRan:

; 1545 : 	else
; 1546 : 	{
; 1547 : 		if (circuitmap)

  002e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  002ea	74 35		 je	 SHORT $LN29@HU_DrawRan

; 1548 : 		{
; 1549 : 			V_DrawCenteredString(64, 8, 0, "NUMBER OF LAPS");

  002ec	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IBLBLMCC@NUMBER?5OF?5LAPS@
  002f1	6a 00		 push	 0
  002f3	6a 08		 push	 8
  002f5	6a 40		 push	 64			; 00000040H
  002f7	e8 00 00 00 00	 call	 _V_DrawCenteredString
  002fc	83 c4 10	 add	 esp, 16			; 00000010H

; 1550 : 			V_DrawCenteredString(64, 16, 0, va("%d", cv_numlaps.value));

  002ff	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_numlaps+20
  00304	50		 push	 eax
  00305	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0030a	e8 00 00 00 00	 call	 _va
  0030f	83 c4 08	 add	 esp, 8
  00312	50		 push	 eax
  00313	6a 00		 push	 0
  00315	6a 10		 push	 16			; 00000010H
  00317	6a 40		 push	 64			; 00000040H
  00319	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0031e	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@HU_DrawRan:

; 1551 : 		}
; 1552 : 	}
; 1553 : 
; 1554 : 	// When you play, you quickly see your score because your name is displayed in white.
; 1555 : 	// When playing back a demo, you quickly see who's the view.
; 1556 : 	whiteplayer = demoplayback ? displayplayer : consoleplayer;

  00321	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00328	74 0d		 je	 SHORT $LN53@HU_DrawRan
  0032a	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  0032f	89 85 5c fc ff
	ff		 mov	 DWORD PTR tv214[ebp], eax
  00335	eb 0c		 jmp	 SHORT $LN54@HU_DrawRan
$LN53@HU_DrawRan:
  00337	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  0033d	89 8d 5c fc ff
	ff		 mov	 DWORD PTR tv214[ebp], ecx
$LN54@HU_DrawRan:
  00343	8b 95 5c fc ff
	ff		 mov	 edx, DWORD PTR tv214[ebp]
  00349	89 95 e8 fc ff
	ff		 mov	 DWORD PTR _whiteplayer$[ebp], edx

; 1557 : 
; 1558 : 	scorelines = 0;

  0034f	c7 85 6c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _scorelines$[ebp], 0

; 1559 : 	memset(completed, 0, sizeof (completed));

  00359	68 80 00 00 00	 push	 128			; 00000080H
  0035e	6a 00		 push	 0
  00360	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR _completed$[ebp]
  00366	50		 push	 eax
  00367	e8 00 00 00 00	 call	 _memset
  0036c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1560 : 	memset(tab, 0, sizeof (playersort_t)*MAXPLAYERS);

  0036f	68 80 02 00 00	 push	 640			; 00000280H
  00374	6a 00		 push	 0
  00376	8d 85 78 fd ff
	ff		 lea	 eax, DWORD PTR _tab$[ebp]
  0037c	50		 push	 eax
  0037d	e8 00 00 00 00	 call	 _memset
  00382	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1561 : 
; 1562 : 	for (i = 0; i < MAXPLAYERS; i++)

  00385	c7 85 74 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0038f	eb 0f		 jmp	 SHORT $LN7@HU_DrawRan
$LN5@HU_DrawRan:
  00391	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00397	83 c0 01	 add	 eax, 1
  0039a	89 85 74 fd ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN7@HU_DrawRan:
  003a0	83 bd 74 fd ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  003a7	7d 4d		 jge	 SHORT $LN6@HU_DrawRan

; 1563 : 	{
; 1564 : 		tab[i].num = -1;

  003a9	6b 85 74 fd ff
	ff 14		 imul	 eax, DWORD PTR _i$[ebp], 20
  003b0	c7 84 05 7c fd
	ff ff ff ff ff
	ff		 mov	 DWORD PTR _tab$[ebp+eax+4], -1

; 1565 : 		tab[i].name = 0;

  003bb	6b 85 74 fd ff
	ff 14		 imul	 eax, DWORD PTR _i$[ebp], 20
  003c2	c7 84 05 88 fd
	ff ff 00 00 00
	00		 mov	 DWORD PTR _tab$[ebp+eax+16], 0

; 1566 : 
; 1567 : 		if (gametype == GT_RACE && !circuitmap)

  003cd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003d4	83 f8 02	 cmp	 eax, 2
  003d7	75 1b		 jne	 SHORT $LN30@HU_DrawRan
  003d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  003e0	75 12		 jne	 SHORT $LN30@HU_DrawRan

; 1568 : 			tab[i].count = INT32_MAX;

  003e2	6b 85 74 fd ff
	ff 14		 imul	 eax, DWORD PTR _i$[ebp], 20
  003e9	c7 84 05 78 fd
	ff ff ff ff ff
	7f		 mov	 DWORD PTR _tab$[ebp+eax], 2147483647 ; 7fffffffH
$LN30@HU_DrawRan:

; 1569 : 	}

  003f4	eb 9b		 jmp	 SHORT $LN5@HU_DrawRan
$LN6@HU_DrawRan:

; 1570 : 
; 1571 : 	for (j = 0; j < MAXPLAYERS; j++)

  003f6	c7 85 70 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  00400	eb 0f		 jmp	 SHORT $LN10@HU_DrawRan
$LN8@HU_DrawRan:
  00402	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00408	83 c0 01	 add	 eax, 1
  0040b	89 85 70 fd ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$LN10@HU_DrawRan:
  00411	83 bd 70 fd ff
	ff 20		 cmp	 DWORD PTR _j$[ebp], 32	; 00000020H
  00418	0f 8d 87 03 00
	00		 jge	 $LN9@HU_DrawRan

; 1572 : 	{
; 1573 : 		if (!playeringame[j] || players[j].spectator)

  0041e	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00424	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0042c	74 15		 je	 SHORT $LN32@HU_DrawRan
  0042e	69 85 70 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _j$[ebp], 508
  00438	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  0043f	85 c9		 test	 ecx, ecx
  00441	74 02		 je	 SHORT $LN31@HU_DrawRan
$LN32@HU_DrawRan:

; 1574 : 			continue;

  00443	eb bd		 jmp	 SHORT $LN8@HU_DrawRan
$LN31@HU_DrawRan:

; 1575 : 
; 1576 : 		for (i = 0; i < MAXPLAYERS; i++)

  00445	c7 85 74 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0044f	eb 0f		 jmp	 SHORT $LN13@HU_DrawRan
$LN11@HU_DrawRan:
  00451	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00457	83 c0 01	 add	 eax, 1
  0045a	89 85 74 fd ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN13@HU_DrawRan:
  00460	83 bd 74 fd ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00467	0f 8d 0b 03 00
	00		 jge	 $LN12@HU_DrawRan

; 1577 : 		{
; 1578 : 			if (playeringame[i] && !players[i].spectator)

  0046d	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00473	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0047b	0f 84 f2 02 00
	00		 je	 $LN43@HU_DrawRan
  00481	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  0048b	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00492	85 c9		 test	 ecx, ecx
  00494	0f 85 d9 02 00
	00		 jne	 $LN43@HU_DrawRan

; 1579 : 			{
; 1580 : 				if (gametype == GT_TAG)

  0049a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004a1	83 f8 03	 cmp	 eax, 3
  004a4	0f 85 9f 00 00
	00		 jne	 $LN34@HU_DrawRan

; 1581 : 				{
; 1582 : 					if (players[i].score >= tab[scorelines].count && completed[i] == false)

  004aa	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  004b4	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  004bb	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+188]
  004c1	3b 94 0d 78 fd
	ff ff		 cmp	 edx, DWORD PTR _tab$[ebp+ecx]
  004c8	72 7a		 jb	 SHORT $LN36@HU_DrawRan
  004ca	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  004d0	83 bc 85 ec fc
	ff ff 00	 cmp	 DWORD PTR _completed$[ebp+eax*4], 0
  004d8	75 6a		 jne	 SHORT $LN36@HU_DrawRan

; 1583 : 					{
; 1584 : 						tab[scorelines].count = players[i].score;

  004da	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  004e4	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  004eb	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+188]
  004f1	89 94 0d 78 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx], edx

; 1585 : 						tab[scorelines].num = i;

  004f8	6b 85 6c fd ff
	ff 14		 imul	 eax, DWORD PTR _scorelines$[ebp], 20
  004ff	8b 8d 74 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00505	89 8c 05 7c fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+eax+4], ecx

; 1586 : 						tab[scorelines].color = players[i].skincolor;

  0050c	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00516	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  0051d	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+180]
  00523	89 94 0d 80 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+8], edx

; 1587 : 						tab[scorelines].name = player_names[i];

  0052a	6b 85 74 fd ff
	ff 16		 imul	 eax, DWORD PTR _i$[ebp], 22
  00531	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00536	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  0053d	89 84 0d 88 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+16], eax
$LN36@HU_DrawRan:

; 1588 : 					}
; 1589 : 				}

  00544	e9 2a 02 00 00	 jmp	 $LN43@HU_DrawRan
$LN34@HU_DrawRan:

; 1590 : 				else if (gametype == GT_RACE)

  00549	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00550	83 f8 02	 cmp	 eax, 2
  00553	0f 85 51 01 00
	00		 jne	 $LN37@HU_DrawRan

; 1591 : 				{
; 1592 : 					if (circuitmap)

  00559	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  00560	0f 84 a5 00 00
	00		 je	 $LN39@HU_DrawRan

; 1593 : 					{
; 1594 : 						if (players[i].laps+1 >= tab[scorelines].count && completed[i] == false)

  00566	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00570	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+348]
  00576	83 c1 01	 add	 ecx, 1
  00579	6b 95 6c fd ff
	ff 14		 imul	 edx, DWORD PTR _scorelines$[ebp], 20
  00580	3b 8c 15 78 fd
	ff ff		 cmp	 ecx, DWORD PTR _tab$[ebp+edx]
  00587	72 7d		 jb	 SHORT $LN41@HU_DrawRan
  00589	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0058f	83 bc 85 ec fc
	ff ff 00	 cmp	 DWORD PTR _completed$[ebp+eax*4], 0
  00597	75 6d		 jne	 SHORT $LN41@HU_DrawRan

; 1595 : 						{
; 1596 : 							tab[scorelines].count = players[i].laps+1;

  00599	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  005a3	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+348]
  005a9	83 c1 01	 add	 ecx, 1
  005ac	6b 95 6c fd ff
	ff 14		 imul	 edx, DWORD PTR _scorelines$[ebp], 20
  005b3	89 8c 15 78 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+edx], ecx

; 1597 : 							tab[scorelines].num = i;

  005ba	6b 85 6c fd ff
	ff 14		 imul	 eax, DWORD PTR _scorelines$[ebp], 20
  005c1	8b 8d 74 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  005c7	89 8c 05 7c fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+eax+4], ecx

; 1598 : 							tab[scorelines].color = players[i].skincolor;

  005ce	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  005d8	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  005df	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+180]
  005e5	89 94 0d 80 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+8], edx

; 1599 : 							tab[scorelines].name = player_names[i];

  005ec	6b 85 74 fd ff
	ff 16		 imul	 eax, DWORD PTR _i$[ebp], 22
  005f3	05 00 00 00 00	 add	 eax, OFFSET _player_names
  005f8	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  005ff	89 84 0d 88 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+16], eax
$LN41@HU_DrawRan:

; 1600 : 						}
; 1601 : 					}

  00606	e9 9a 00 00 00	 jmp	 $LN42@HU_DrawRan
$LN39@HU_DrawRan:

; 1602 : 					else
; 1603 : 					{
; 1604 : 						if (players[i].realtime <= tab[scorelines].count && completed[i] == false)

  0060b	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00615	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  0061c	8b 90 54 01 00
	00		 mov	 edx, DWORD PTR _players[eax+340]
  00622	3b 94 0d 78 fd
	ff ff		 cmp	 edx, DWORD PTR _tab$[ebp+ecx]
  00629	77 7a		 ja	 SHORT $LN42@HU_DrawRan
  0062b	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00631	83 bc 85 ec fc
	ff ff 00	 cmp	 DWORD PTR _completed$[ebp+eax*4], 0
  00639	75 6a		 jne	 SHORT $LN42@HU_DrawRan

; 1605 : 						{
; 1606 : 							tab[scorelines].count = players[i].realtime;

  0063b	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00645	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  0064c	8b 90 54 01 00
	00		 mov	 edx, DWORD PTR _players[eax+340]
  00652	89 94 0d 78 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx], edx

; 1607 : 							tab[scorelines].num = i;

  00659	6b 85 6c fd ff
	ff 14		 imul	 eax, DWORD PTR _scorelines$[ebp], 20
  00660	8b 8d 74 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00666	89 8c 05 7c fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+eax+4], ecx

; 1608 : 							tab[scorelines].color = players[i].skincolor;

  0066d	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00677	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  0067e	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+180]
  00684	89 94 0d 80 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+8], edx

; 1609 : 							tab[scorelines].name = player_names[i];

  0068b	6b 85 74 fd ff
	ff 16		 imul	 eax, DWORD PTR _i$[ebp], 22
  00692	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00697	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  0069e	89 84 0d 88 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+16], eax
$LN42@HU_DrawRan:

; 1610 : 						}
; 1611 : 					}
; 1612 : 				}

  006a5	e9 c9 00 00 00	 jmp	 $LN43@HU_DrawRan
$LN37@HU_DrawRan:

; 1613 : 				else
; 1614 : 				{
; 1615 : 					if (players[i].score >= tab[scorelines].count && completed[i] == false)

  006aa	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  006b4	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  006bb	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+188]
  006c1	3b 94 0d 78 fd
	ff ff		 cmp	 edx, DWORD PTR _tab$[ebp+ecx]
  006c8	0f 82 a5 00 00
	00		 jb	 $LN43@HU_DrawRan
  006ce	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  006d4	83 bc 85 ec fc
	ff ff 00	 cmp	 DWORD PTR _completed$[ebp+eax*4], 0
  006dc	0f 85 91 00 00
	00		 jne	 $LN43@HU_DrawRan

; 1616 : 					{
; 1617 : 						tab[scorelines].count = players[i].score;

  006e2	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  006ec	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  006f3	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+188]
  006f9	89 94 0d 78 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx], edx

; 1618 : 						tab[scorelines].num = i;

  00700	6b 85 6c fd ff
	ff 14		 imul	 eax, DWORD PTR _scorelines$[ebp], 20
  00707	8b 8d 74 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0070d	89 8c 05 7c fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+eax+4], ecx

; 1619 : 						tab[scorelines].color = players[i].skincolor;

  00714	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  0071e	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  00725	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+180]
  0072b	89 94 0d 80 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+8], edx

; 1620 : 						tab[scorelines].name = player_names[i];

  00732	6b 85 74 fd ff
	ff 16		 imul	 eax, DWORD PTR _i$[ebp], 22
  00739	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0073e	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  00745	89 84 0d 88 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+16], eax

; 1621 : 						tab[scorelines].emeralds = players[i].powers[pw_emeralds];

  0074c	69 85 74 fd ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00756	b9 04 00 00 00	 mov	 ecx, 4
  0075b	6b d1 18	 imul	 edx, ecx, 24
  0075e	6b 8d 6c fd ff
	ff 14		 imul	 ecx, DWORD PTR _scorelines$[ebp], 20
  00765	8b 94 10 38 00
	00 00		 mov	 edx, DWORD PTR _players[eax+edx+56]
  0076c	89 94 0d 84 fd
	ff ff		 mov	 DWORD PTR _tab$[ebp+ecx+12], edx
$LN43@HU_DrawRan:

; 1622 : 					}
; 1623 : 				}
; 1624 : 			}
; 1625 : 		}

  00773	e9 d9 fc ff ff	 jmp	 $LN11@HU_DrawRan
$LN12@HU_DrawRan:

; 1626 : 		completed[tab[scorelines].num] = true;

  00778	6b 85 6c fd ff
	ff 14		 imul	 eax, DWORD PTR _scorelines$[ebp], 20
  0077f	8b 8c 05 7c fd
	ff ff		 mov	 ecx, DWORD PTR _tab$[ebp+eax+4]
  00786	c7 84 8d ec fc
	ff ff 01 00 00
	00		 mov	 DWORD PTR _completed$[ebp+ecx*4], 1

; 1627 : 		scorelines++;

  00791	8b 85 6c fd ff
	ff		 mov	 eax, DWORD PTR _scorelines$[ebp]
  00797	83 c0 01	 add	 eax, 1
  0079a	89 85 6c fd ff
	ff		 mov	 DWORD PTR _scorelines$[ebp], eax

; 1628 : 	}

  007a0	e9 5d fc ff ff	 jmp	 $LN8@HU_DrawRan
$LN9@HU_DrawRan:

; 1629 : 
; 1630 : 	if (scorelines > 20)

  007a5	83 bd 6c fd ff
	ff 14		 cmp	 DWORD PTR _scorelines$[ebp], 20 ; 00000014H
  007ac	7e 0a		 jle	 SHORT $LN44@HU_DrawRan

; 1631 : 		scorelines = 20; //dont draw past bottom of screen, show the best only

  007ae	c7 85 6c fd ff
	ff 14 00 00 00	 mov	 DWORD PTR _scorelines$[ebp], 20 ; 00000014H
$LN44@HU_DrawRan:

; 1632 : 
; 1633 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  007b8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  007bf	83 f8 04	 cmp	 eax, 4
  007c2	74 15		 je	 SHORT $LN47@HU_DrawRan
  007c4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  007cb	83 f8 01	 cmp	 eax, 1
  007ce	75 21		 jne	 SHORT $LN45@HU_DrawRan
  007d0	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  007d7	74 18		 je	 SHORT $LN45@HU_DrawRan
$LN47@HU_DrawRan:

; 1634 : 		HU_DrawTeamTabRankings(tab, whiteplayer); //separate function for Spazzo's silly request

  007d9	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _whiteplayer$[ebp]
  007df	50		 push	 eax
  007e0	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR _tab$[ebp]
  007e6	51		 push	 ecx
  007e7	e8 00 00 00 00	 call	 _HU_DrawTeamTabRankings
  007ec	83 c4 08	 add	 esp, 8
  007ef	eb 4d		 jmp	 SHORT $LN49@HU_DrawRan
$LN45@HU_DrawRan:

; 1635 : 	else if (scorelines <= 9)

  007f1	83 bd 6c fd ff
	ff 09		 cmp	 DWORD PTR _scorelines$[ebp], 9
  007f8	7f 23		 jg	 SHORT $LN48@HU_DrawRan

; 1636 : 		HU_DrawTabRankings(40, 32, tab, scorelines, whiteplayer);

  007fa	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _whiteplayer$[ebp]
  00800	50		 push	 eax
  00801	8b 8d 6c fd ff
	ff		 mov	 ecx, DWORD PTR _scorelines$[ebp]
  00807	51		 push	 ecx
  00808	8d 95 78 fd ff
	ff		 lea	 edx, DWORD PTR _tab$[ebp]
  0080e	52		 push	 edx
  0080f	6a 20		 push	 32			; 00000020H
  00811	6a 28		 push	 40			; 00000028H
  00813	e8 00 00 00 00	 call	 _HU_DrawTabRankings
  00818	83 c4 14	 add	 esp, 20			; 00000014H
  0081b	eb 21		 jmp	 SHORT $LN49@HU_DrawRan
$LN48@HU_DrawRan:

; 1637 : 	else
; 1638 : 		HU_DrawDualTabRankings(32, 32, tab, scorelines, whiteplayer);

  0081d	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _whiteplayer$[ebp]
  00823	50		 push	 eax
  00824	8b 8d 6c fd ff
	ff		 mov	 ecx, DWORD PTR _scorelines$[ebp]
  0082a	51		 push	 ecx
  0082b	8d 95 78 fd ff
	ff		 lea	 edx, DWORD PTR _tab$[ebp]
  00831	52		 push	 edx
  00832	6a 20		 push	 32			; 00000020H
  00834	6a 20		 push	 32			; 00000020H
  00836	e8 00 00 00 00	 call	 _HU_DrawDualTabRankings
  0083b	83 c4 14	 add	 esp, 20			; 00000014H
$LN49@HU_DrawRan:

; 1639 : 
; 1640 : 	// draw spectators in a ticker across the bottom
; 1641 : 	if (!splitscreen && (gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF))

  0083e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00845	75 2a		 jne	 SHORT $LN50@HU_DrawRan
  00847	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0084e	83 f8 01	 cmp	 eax, 1
  00851	74 18		 je	 SHORT $LN51@HU_DrawRan
  00853	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0085a	83 f8 03	 cmp	 eax, 3
  0085d	74 0c		 je	 SHORT $LN51@HU_DrawRan
  0085f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00866	83 f8 04	 cmp	 eax, 4
  00869	75 06		 jne	 SHORT $LN50@HU_DrawRan
$LN51@HU_DrawRan:

; 1642 : 		HU_DrawSpectatorTicker();

  0086b	e8 00 00 00 00	 call	 _HU_DrawSpectatorTicker
  00870	90		 npad	 1
$LN50@HU_DrawRan:

; 1643 : }

  00871	5f		 pop	 edi
  00872	5e		 pop	 esi
  00873	5b		 pop	 ebx
  00874	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00877	33 cd		 xor	 ecx, ebp
  00879	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0087e	8b e5		 mov	 esp, ebp
  00880	5d		 pop	 ebp
  00881	c3		 ret	 0
_HU_DrawRankings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DoCEcho
_TEXT	SEGMENT
$T1 = -68						; size = 4
_msg$ = 8						; size = 4
_HU_DoCEcho PROC					; COMDAT

; 1699 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1700 : 	strncpy(cechotext, msg, sizeof(cechotext));

  00009	68 00 04 00 00	 push	 1024			; 00000400H
  0000e	8b 45 08	 mov	 eax, DWORD PTR _msg$[ebp]
  00011	50		 push	 eax
  00012	68 00 00 00 00	 push	 OFFSET _cechotext
  00017	e8 00 00 00 00	 call	 _strncpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1701 : 	strncat(cechotext, "\\", sizeof(cechotext));

  0001f	68 00 04 00 00	 push	 1024			; 00000400H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2@
  00029	68 00 00 00 00	 push	 OFFSET _cechotext
  0002e	e8 00 00 00 00	 call	 _strncat
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1702 : 	cechotext[sizeof(cechotext) - 1] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	69 c8 ff 03 00
	00		 imul	 ecx, eax, 1023
  00041	89 4d bc	 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 7d bc 00 04
	00 00		 cmp	 DWORD PTR $T1[ebp], 1024 ; 00000400H
  0004b	73 02		 jae	 SHORT $LN3@HU_DoCEcho
  0004d	eb 06		 jmp	 SHORT $LN4@HU_DoCEcho
$LN3@HU_DoCEcho:
  0004f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00054	90		 npad	 1
$LN4@HU_DoCEcho:
  00055	8b 55 bc	 mov	 edx, DWORD PTR $T1[ebp]
  00058	c6 82 00 00 00
	00 00		 mov	 BYTE PTR _cechotext[edx], 0

; 1703 : 	cechotimer = cechoduration;

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR _cechoduration
  00064	a3 00 00 00 00	 mov	 DWORD PTR _cechotimer, eax
$LN1@HU_DoCEcho:

; 1704 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_HU_DoCEcho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_SetCEchoFlags
_TEXT	SEGMENT
_flags$ = 8						; size = 4
_HU_SetCEchoFlags PROC					; COMDAT

; 1694 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1695 : 	cechoflags = flags;

  00009	8b 45 08	 mov	 eax, DWORD PTR _flags$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR _cechoflags, eax

; 1696 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_HU_SetCEchoFlags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_SetCEchoDuration
_TEXT	SEGMENT
_seconds$ = 8						; size = 4
_HU_SetCEchoDuration PROC				; COMDAT

; 1689 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1690 : 	cechoduration = seconds * TICRATE;

  00009	6b 45 08 23	 imul	 eax, DWORD PTR _seconds$[ebp], 35
  0000d	a3 00 00 00 00	 mov	 DWORD PTR _cechoduration, eax

; 1691 : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
_HU_SetCEchoDuration ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_ClearCEcho
_TEXT	SEGMENT
_HU_ClearCEcho PROC					; COMDAT

; 1684 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1685 : 	cechotimer = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cechotimer, 0

; 1686 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_HU_ClearCEcho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _MatchType_OnChange
_TEXT	SEGMENT
_usvalue$1 = -12					; size = 2
_NetPacket$2 = -8					; size = 4
_i$ = -4						; size = 4
_MatchType_OnChange PROC				; COMDAT

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 296  : 	INT32 i;
; 297  : 
; 298  : 	// Do not execute the below code unless absolutely necessary.
; 299  : 	if (gametype != GT_MATCH || gamestate != GS_LEVEL || cv_matchtype.value == matchtype)

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00010	83 f8 01	 cmp	 eax, 1
  00013	75 16		 jne	 SHORT $LN9@MatchType_
  00015	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  0001c	75 0d		 jne	 SHORT $LN9@MatchType_
  0001e	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_matchtype+20
  00023	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _matchtype
  00029	75 05		 jne	 SHORT $LN8@MatchType_
$LN9@MatchType_:

; 300  : 		return;

  0002b	e9 4b 01 00 00	 jmp	 $LN1@MatchType_
$LN8@MatchType_:

; 301  : 
; 302  : 	// If swapping to team match, ensure that all players that aren't already on a team become
; 303  : 	// a spectator, or join the team of their color, if availiable. The quirk of this new gamtype
; 304  : 	// handling causes us to have to do this. -Jazz 3/4/09
; 305  : 	if (cv_matchtype.value)

  00030	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00037	0f 84 ea 00 00
	00		 je	 $LN10@MatchType_

; 306  : 	{
; 307  : 		for (i = 0; i < MAXPLAYERS; i++)

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00044	eb 09		 jmp	 SHORT $LN4@MatchType_
$LN2@MatchType_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@MatchType_:
  0004f	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00053	0f 8d cc 00 00
	00		 jge	 $LN3@MatchType_

; 308  : 		{
; 309  : 			if (playeringame[i] && !players[i].spectator)

  00059	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0005c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00064	0f 84 b6 00 00
	00		 je	 $LN13@MatchType_
  0006a	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00071	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00078	85 c9		 test	 ecx, ecx
  0007a	0f 85 a0 00 00
	00		 jne	 $LN13@MatchType_

; 310  : 			{
; 311  : 				if (server)

  00080	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00087	0f 84 93 00 00
	00		 je	 $LN13@MatchType_

; 312  : 				{
; 313  : 					changeteam_union NetPacket;
; 314  : 					UINT16 usvalue;
; 315  : 					NetPacket.value.l = NetPacket.value.b = 0;

  0008d	33 c0		 xor	 eax, eax
  0008f	66 89 45 fa	 mov	 WORD PTR _NetPacket$2[ebp+2], ax
  00093	66 8b 4d fa	 mov	 cx, WORD PTR _NetPacket$2[ebp+2]
  00097	66 89 4d f8	 mov	 WORD PTR _NetPacket$2[ebp], cx

; 316  : 
; 317  : 					NetPacket.packet.playernum = i;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0009e	83 e0 1f	 and	 eax, 31			; 0000001fH
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _NetPacket$2[ebp]
  000a4	83 e1 e0	 and	 ecx, -32		; ffffffe0H
  000a7	0b c8		 or	 ecx, eax
  000a9	89 4d f8	 mov	 DWORD PTR _NetPacket$2[ebp], ecx

; 318  : 					NetPacket.packet.verification = true;

  000ac	8b 45 f8	 mov	 eax, DWORD PTR _NetPacket$2[ebp]
  000af	0d 00 04 00 00	 or	 eax, 1024		; 00000400H
  000b4	89 45 f8	 mov	 DWORD PTR _NetPacket$2[ebp], eax

; 319  : 
; 320  : 					if (players[i].skincolor == 6) //red

  000b7	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000be	83 b8 b4 00 00
	00 06		 cmp	 DWORD PTR _players[eax+180], 6
  000c5	75 10		 jne	 SHORT $LN14@MatchType_

; 321  : 						NetPacket.packet.newteam = 1;

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _NetPacket$2[ebp]
  000ca	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  000cf	83 c8 20	 or	 eax, 32			; 00000020H
  000d2	89 45 f8	 mov	 DWORD PTR _NetPacket$2[ebp], eax
  000d5	eb 2b		 jmp	 SHORT $LN17@MatchType_
$LN14@MatchType_:

; 322  : 					else if (players[i].skincolor == 7) //blue

  000d7	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000de	83 b8 b4 00 00
	00 07		 cmp	 DWORD PTR _players[eax+180], 7
  000e5	75 10		 jne	 SHORT $LN16@MatchType_

; 323  : 						NetPacket.packet.newteam = 2;

  000e7	8b 45 f8	 mov	 eax, DWORD PTR _NetPacket$2[ebp]
  000ea	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  000ef	83 c8 40	 or	 eax, 64			; 00000040H
  000f2	89 45 f8	 mov	 DWORD PTR _NetPacket$2[ebp], eax
  000f5	eb 0b		 jmp	 SHORT $LN17@MatchType_
$LN16@MatchType_:

; 324  : 					else //swap to spectator
; 325  : 						NetPacket.packet.newteam = 0;

  000f7	8b 45 f8	 mov	 eax, DWORD PTR _NetPacket$2[ebp]
  000fa	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  000ff	89 45 f8	 mov	 DWORD PTR _NetPacket$2[ebp], eax
$LN17@MatchType_:

; 326  : 
; 327  : 					usvalue = SHORT(NetPacket.value.l|NetPacket.value.b);

  00102	0f b7 45 f8	 movzx	 eax, WORD PTR _NetPacket$2[ebp]
  00106	0f b7 4d fa	 movzx	 ecx, WORD PTR _NetPacket$2[ebp+2]
  0010a	0b c1		 or	 eax, ecx
  0010c	66 89 45 f4	 mov	 WORD PTR _usvalue$1[ebp], ax

; 328  : 					SendNetXCmd(XD_TEAMCHANGE, &usvalue, sizeof(usvalue));

  00110	6a 02		 push	 2
  00112	8d 45 f4	 lea	 eax, DWORD PTR _usvalue$1[ebp]
  00115	50		 push	 eax
  00116	6a 0b		 push	 11			; 0000000bH
  00118	e8 00 00 00 00	 call	 _SendNetXCmd
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@MatchType_:

; 329  : 				}
; 330  : 			}
; 331  : 		}

  00120	e9 21 ff ff ff	 jmp	 $LN2@MatchType_
$LN3@MatchType_:

; 332  : 	}

  00125	eb 4a		 jmp	 SHORT $LN6@MatchType_
$LN10@MatchType_:

; 333  : 	else
; 334  : 	{
; 335  : 		for (i = 0; i < MAXPLAYERS; i++)

  00127	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0012e	eb 09		 jmp	 SHORT $LN7@MatchType_
$LN5@MatchType_:
  00130	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00133	83 c0 01	 add	 eax, 1
  00136	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@MatchType_:
  00139	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0013d	7d 32		 jge	 SHORT $LN6@MatchType_

; 336  : 		{
; 337  : 			if (playeringame[i] && !players[i].spectator)

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00142	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0014a	74 23		 je	 SHORT $LN18@MatchType_
  0014c	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00153	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  0015a	85 c9		 test	 ecx, ecx
  0015c	75 11		 jne	 SHORT $LN18@MatchType_

; 338  : 				players[i].ctfteam = 0;

  0015e	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00165	c7 80 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+352], 0
$LN18@MatchType_:

; 339  : 		}

  0016f	eb bf		 jmp	 SHORT $LN5@MatchType_
$LN6@MatchType_:

; 340  : 	}
; 341  : 
; 342  : 	matchtype = cv_matchtype.value;

  00171	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_matchtype+20
  00176	a3 00 00 00 00	 mov	 DWORD PTR _matchtype, eax
$LN1@MatchType_:

; 343  : }

  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c3		 ret	 0
_MatchType_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawEmeralds
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_pemeralds$ = 16					; size = 4
_HU_DrawEmeralds PROC					; COMDAT

; 1384 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1385 : 	//Draw the emeralds, in the CORRECT order, using tiny emerald sprites.
; 1386 : 	if (pemeralds & EMERALD1)

  00009	8b 45 10	 mov	 eax, DWORD PTR _pemeralds$[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	74 24		 je	 SHORT $LN2@HU_DrawEme

; 1387 : 		V_DrawSmallScaledPatch(x  , y-6, 0, tinyemeraldpics[0]);

  00011	b8 04 00 00 00	 mov	 eax, 4
  00016	6b c8 00	 imul	 ecx, eax, 0
  00019	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tinyemeraldpics[ecx]
  0001f	52		 push	 edx
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00025	83 e8 06	 sub	 eax, 6
  00028	50		 push	 eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00032	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@HU_DrawEme:

; 1388 : 
; 1389 : 	if (pemeralds & EMERALD2)

  00035	8b 45 10	 mov	 eax, DWORD PTR _pemeralds$[ebp]
  00038	83 e0 02	 and	 eax, 2
  0003b	74 27		 je	 SHORT $LN3@HU_DrawEme

; 1390 : 		V_DrawSmallScaledPatch(x+4, y-3, 0, tinyemeraldpics[1]);

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	c1 e0 00	 shl	 eax, 0
  00045	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _tinyemeraldpics[eax]
  0004b	51		 push	 ecx
  0004c	6a 00		 push	 0
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00051	83 ea 03	 sub	 edx, 3
  00054	52		 push	 edx
  00055	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00058	83 c0 04	 add	 eax, 4
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@HU_DrawEme:

; 1391 : 
; 1392 : 	if (pemeralds & EMERALD3)

  00064	8b 45 10	 mov	 eax, DWORD PTR _pemeralds$[ebp]
  00067	83 e0 04	 and	 eax, 4
  0006a	74 26		 je	 SHORT $LN4@HU_DrawEme

; 1393 : 		V_DrawSmallScaledPatch(x+4, y+3, 0, tinyemeraldpics[2]);

  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	d1 e0		 shl	 eax, 1
  00073	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _tinyemeraldpics[eax]
  00079	51		 push	 ecx
  0007a	6a 00		 push	 0
  0007c	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0007f	83 c2 03	 add	 edx, 3
  00082	52		 push	 edx
  00083	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00086	83 c0 04	 add	 eax, 4
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@HU_DrawEme:

; 1394 : 
; 1395 : 	if (pemeralds & EMERALD4)

  00092	8b 45 10	 mov	 eax, DWORD PTR _pemeralds$[ebp]
  00095	83 e0 08	 and	 eax, 8
  00098	74 24		 je	 SHORT $LN5@HU_DrawEme

; 1396 : 		V_DrawSmallScaledPatch(x  , y+6, 0, tinyemeraldpics[3]);

  0009a	b8 04 00 00 00	 mov	 eax, 4
  0009f	6b c8 03	 imul	 ecx, eax, 3
  000a2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tinyemeraldpics[ecx]
  000a8	52		 push	 edx
  000a9	6a 00		 push	 0
  000ab	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000ae	83 c0 06	 add	 eax, 6
  000b1	50		 push	 eax
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000bb	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@HU_DrawEme:

; 1397 : 
; 1398 : 	if (pemeralds & EMERALD5)

  000be	8b 45 10	 mov	 eax, DWORD PTR _pemeralds$[ebp]
  000c1	83 e0 10	 and	 eax, 16			; 00000010H
  000c4	74 27		 je	 SHORT $LN6@HU_DrawEme

; 1399 : 		V_DrawSmallScaledPatch(x-4, y+3, 0, tinyemeraldpics[4]);

  000c6	b8 04 00 00 00	 mov	 eax, 4
  000cb	c1 e0 02	 shl	 eax, 2
  000ce	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _tinyemeraldpics[eax]
  000d4	51		 push	 ecx
  000d5	6a 00		 push	 0
  000d7	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  000da	83 c2 03	 add	 edx, 3
  000dd	52		 push	 edx
  000de	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000e1	83 e8 04	 sub	 eax, 4
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000ea	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@HU_DrawEme:

; 1400 : 
; 1401 : 	if (pemeralds & EMERALD6)

  000ed	8b 45 10	 mov	 eax, DWORD PTR _pemeralds$[ebp]
  000f0	83 e0 20	 and	 eax, 32			; 00000020H
  000f3	74 27		 je	 SHORT $LN7@HU_DrawEme

; 1402 : 		V_DrawSmallScaledPatch(x-4, y-3, 0, tinyemeraldpics[5]);

  000f5	b8 04 00 00 00	 mov	 eax, 4
  000fa	6b c8 05	 imul	 ecx, eax, 5
  000fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tinyemeraldpics[ecx]
  00103	52		 push	 edx
  00104	6a 00		 push	 0
  00106	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00109	83 e8 03	 sub	 eax, 3
  0010c	50		 push	 eax
  0010d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00110	83 e9 04	 sub	 ecx, 4
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00119	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@HU_DrawEme:

; 1403 : 
; 1404 : 	if (pemeralds & EMERALD7)

  0011c	8b 45 10	 mov	 eax, DWORD PTR _pemeralds$[ebp]
  0011f	83 e0 40	 and	 eax, 64			; 00000040H
  00122	74 21		 je	 SHORT $LN8@HU_DrawEme

; 1405 : 		V_DrawSmallScaledPatch(x,   y,   0, tinyemeraldpics[6]);

  00124	b8 04 00 00 00	 mov	 eax, 4
  00129	6b c8 06	 imul	 ecx, eax, 6
  0012c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tinyemeraldpics[ecx]
  00132	52		 push	 edx
  00133	6a 00		 push	 0
  00135	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00138	50		 push	 eax
  00139	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00142	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@HU_DrawEme:

; 1406 : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
_HU_DrawEmeralds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawDualTabRankings
_TEXT	SEGMENT
tv145 = -108						; size = 4
tv137 = -104						; size = 4
tv280 = -104						; size = 4
tv405 = -104						; size = 4
tv439 = -104						; size = 4
tv458 = -104						; size = 4
_name$ = -36						; size = 22
_colormap$ = -12					; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_tab$ = 16						; size = 4
_scorelines$ = 20					; size = 4
_whiteplayer$ = 24					; size = 4
_HU_DrawDualTabRankings PROC				; COMDAT

; 1293 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 1294 : 	INT32 i;
; 1295 : 	const UINT8 *colormap;
; 1296 : 	char name[MAXPLAYERNAME+1];
; 1297 : 
; 1298 : 	V_DrawFill(160, 26, 1, 154, 0); //Draw a vertical line to separate the two sides.

  00013	6a 00		 push	 0
  00015	68 9a 00 00 00	 push	 154			; 0000009aH
  0001a	6a 01		 push	 1
  0001c	6a 1a		 push	 26			; 0000001aH
  0001e	68 a0 00 00 00	 push	 160			; 000000a0H
  00023	e8 00 00 00 00	 call	 _V_DrawFill
  00028	83 c4 14	 add	 esp, 20			; 00000014H

; 1299 : 	V_DrawFill(1, 26, 318, 1, 0); //And a horizontal line to make a T.

  0002b	6a 00		 push	 0
  0002d	6a 01		 push	 1
  0002f	68 3e 01 00 00	 push	 318			; 0000013eH
  00034	6a 1a		 push	 26			; 0000001aH
  00036	6a 01		 push	 1
  00038	e8 00 00 00 00	 call	 _V_DrawFill
  0003d	83 c4 14	 add	 esp, 20			; 00000014H

; 1300 : 	V_DrawFill(1, 180, 318, 1, 0); //And a horizontal line near the bottom.

  00040	6a 00		 push	 0
  00042	6a 01		 push	 1
  00044	68 3e 01 00 00	 push	 318			; 0000013eH
  00049	68 b4 00 00 00	 push	 180			; 000000b4H
  0004e	6a 01		 push	 1
  00050	e8 00 00 00 00	 call	 _V_DrawFill
  00055	83 c4 14	 add	 esp, 20			; 00000014H

; 1301 : 
; 1302 : 	if (gametype == GT_RACE || gametype == GT_COOP)

  00058	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0005f	83 f8 02	 cmp	 eax, 2
  00062	74 0b		 je	 SHORT $LN6@HU_DrawDua
  00064	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0006b	85 c0		 test	 eax, eax
  0006d	75 09		 jne	 SHORT $LN5@HU_DrawDua
$LN6@HU_DrawDua:

; 1303 : 		x -= 32; //we need more room!

  0006f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00072	83 e8 20	 sub	 eax, 32			; 00000020H
  00075	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
$LN5@HU_DrawDua:

; 1304 : 
; 1305 : 	for (i = 0; i < scorelines; i++)

  00078	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007f	eb 09		 jmp	 SHORT $LN4@HU_DrawDua
$LN2@HU_DrawDua:
  00081	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00084	83 c0 01	 add	 eax, 1
  00087	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@HU_DrawDua:
  0008a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0008d	3b 45 14	 cmp	 eax, DWORD PTR _scorelines$[ebp]
  00090	0f 8d e9 05 00
	00		 jge	 $LN3@HU_DrawDua

; 1306 : 	{
; 1307 : 		if (players[tab[i].num].spectator)

  00096	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0009a	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0009d	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  000a5	0f b6 82 f0 01
	00 00		 movzx	 eax, BYTE PTR _players[edx+496]
  000ac	85 c0		 test	 eax, eax
  000ae	74 02		 je	 SHORT $LN7@HU_DrawDua

; 1308 : 			continue; //ignore them.

  000b0	eb cf		 jmp	 SHORT $LN2@HU_DrawDua
$LN7@HU_DrawDua:

; 1309 : 
; 1310 : 		strlcpy(name, tab[i].name, 9);

  000b2	6a 09		 push	 9
  000b4	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000b8	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  000bb	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  000bf	52		 push	 edx
  000c0	8d 45 dc	 lea	 eax, DWORD PTR _name$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _strlcpy
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1311 : 		V_DrawString(x + 24, y,

  000cc	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000d0	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  000d3	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000d7	3b 55 18	 cmp	 edx, DWORD PTR _whiteplayer$[ebp]
  000da	75 09		 jne	 SHORT $LN29@HU_DrawDua
  000dc	c7 45 98 00 00
	10 00		 mov	 DWORD PTR tv137[ebp], 1048576 ; 00100000H
  000e3	eb 07		 jmp	 SHORT $LN30@HU_DrawDua
$LN29@HU_DrawDua:
  000e5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN30@HU_DrawDua:
  000ec	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000f0	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  000f3	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  000fb	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  00102	7e 09		 jle	 SHORT $LN31@HU_DrawDua
  00104	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
  0010b	eb 07		 jmp	 SHORT $LN32@HU_DrawDua
$LN31@HU_DrawDua:
  0010d	c7 45 94 00 00
	40 00		 mov	 DWORD PTR tv145[ebp], 4194304 ; 00400000H
$LN32@HU_DrawDua:
  00114	8d 45 dc	 lea	 eax, DWORD PTR _name$[ebp]
  00117	50		 push	 eax
  00118	8b 4d 98	 mov	 ecx, DWORD PTR tv137[ebp]
  0011b	0b 4d 94	 or	 ecx, DWORD PTR tv145[ebp]
  0011e	81 c9 00 00 04
	00		 or	 ecx, 262144		; 00040000H
  00124	51		 push	 ecx
  00125	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00128	52		 push	 edx
  00129	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0012c	83 c0 18	 add	 eax, 24			; 00000018H
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 _V_DrawString
  00135	83 c4 10	 add	 esp, 16			; 00000010H

; 1312 : 		             ((tab[i].num == whiteplayer) ? V_YELLOWMAP : 0)
; 1313 : 		             | ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT)
; 1314 : 		             | V_ALLOWLOWERCASE, name);
; 1315 : 
; 1316 : 		if (gametype == GT_TAG && players[tab[i].num].pflags & PF_TAGIT)

  00138	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0013f	83 f8 03	 cmp	 eax, 3
  00142	75 3a		 jne	 SHORT $LN8@HU_DrawDua
  00144	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00148	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0014b	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00153	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR _players[edx+172]
  00159	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0015e	74 1e		 je	 SHORT $LN8@HU_DrawDua

; 1317 : 			V_DrawSmallScaledPatch(x-28, y-4, 0, tagico);

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR _tagico
  00165	50		 push	 eax
  00166	6a 00		 push	 0
  00168	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0016b	83 e9 04	 sub	 ecx, 4
  0016e	51		 push	 ecx
  0016f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00172	83 ea 1c	 sub	 edx, 28			; 0000001cH
  00175	52		 push	 edx
  00176	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0017b	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@HU_DrawDua:

; 1318 : 
; 1319 : 		// Draw emeralds
; 1320 : 		if (!players[tab[i].num].powers[pw_super]
; 1321 : 			|| ((leveltime/7) & 1))

  0017e	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00182	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00185	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0018d	b8 04 00 00 00	 mov	 eax, 4
  00192	6b c8 0f	 imul	 ecx, eax, 15
  00195	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  0019d	74 13		 je	 SHORT $LN10@HU_DrawDua
  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  001a4	33 d2		 xor	 edx, edx
  001a6	b9 07 00 00 00	 mov	 ecx, 7
  001ab	f7 f1		 div	 ecx
  001ad	83 e0 01	 and	 eax, 1
  001b0	74 22		 je	 SHORT $LN9@HU_DrawDua
$LN10@HU_DrawDua:

; 1322 : 		{
; 1323 : 			HU_DrawEmeralds(x-12,y+2,tab[i].emeralds);

  001b2	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001b6	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  001b9	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  001bd	52		 push	 edx
  001be	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  001c1	83 c0 02	 add	 eax, 2
  001c4	50		 push	 eax
  001c5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001c8	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  001cb	51		 push	 ecx
  001cc	e8 00 00 00 00	 call	 _HU_DrawEmeralds
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@HU_DrawDua:

; 1324 : 		}
; 1325 : 
; 1326 : 		if (tab[i].color == 0)

  001d4	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001d8	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  001db	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  001e0	0f 85 e0 00 00
	00		 jne	 $LN11@HU_DrawDua

; 1327 : 		{
; 1328 : 			colormap = colormaps;

  001e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaps
  001eb	89 45 f4	 mov	 DWORD PTR _colormap$[ebp], eax

; 1329 : 			if (players[tab[i].num].powers[pw_super])

  001ee	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001f2	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  001f5	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  001fd	b8 04 00 00 00	 mov	 eax, 4
  00202	6b c8 0f	 imul	 ecx, eax, 15
  00205	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  0020d	74 34		 je	 SHORT $LN13@HU_DrawDua

; 1330 : 				V_DrawSmallScaledPatch (x, y-4, 0, superprefix[players[tab[i].num].skin]);

  0020f	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00213	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00216	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0021e	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  00224	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _superprefix[eax*4]
  0022b	51		 push	 ecx
  0022c	6a 00		 push	 0
  0022e	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00231	83 ea 04	 sub	 edx, 4
  00234	52		 push	 edx
  00235	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0023e	83 c4 10	 add	 esp, 16			; 00000010H
  00241	eb 7e		 jmp	 SHORT $LN16@HU_DrawDua
$LN13@HU_DrawDua:

; 1331 : 			else
; 1332 : 			{
; 1333 : 				if (players[tab[i].num].health <= 0)

  00243	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00247	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0024a	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00252	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  00259	7f 34		 jg	 SHORT $LN15@HU_DrawDua

; 1334 : 					V_DrawSmallTranslucentPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin]);

  0025b	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0025f	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00262	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0026a	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  00270	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _faceprefix[eax*4]
  00277	51		 push	 ecx
  00278	6a 00		 push	 0
  0027a	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0027d	83 ea 04	 sub	 edx, 4
  00280	52		 push	 edx
  00281	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 _V_DrawSmallTranslucentPatch
  0028a	83 c4 10	 add	 esp, 16			; 00000010H
  0028d	eb 32		 jmp	 SHORT $LN16@HU_DrawDua
$LN15@HU_DrawDua:

; 1335 : 				else
; 1336 : 					V_DrawSmallScaledPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin]);

  0028f	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00293	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00296	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0029e	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  002a4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _faceprefix[eax*4]
  002ab	51		 push	 ecx
  002ac	6a 00		 push	 0
  002ae	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  002b1	83 ea 04	 sub	 edx, 4
  002b4	52		 push	 edx
  002b5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  002b8	50		 push	 eax
  002b9	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  002be	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@HU_DrawDua:

; 1337 : 			}
; 1338 : 		}

  002c1	e9 88 01 00 00	 jmp	 $LN20@HU_DrawDua
$LN11@HU_DrawDua:

; 1339 : 		else
; 1340 : 		{
; 1341 : 			if (players[tab[i].num].powers[pw_super])

  002c6	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  002ca	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  002cd	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  002d5	b8 04 00 00 00	 mov	 eax, 4
  002da	6b c8 0f	 imul	 ecx, eax, 15
  002dd	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  002e5	0f 84 a9 00 00
	00		 je	 $LN17@HU_DrawDua

; 1342 : 			{
; 1343 : 				colormap = (const UINT8 *) translationtables[players[tab[i].num].skin] - 256 + (((players[tab[i].num].powers[pw_super]) ? 15 : players[tab[i].num].skincolor)<<8);

  002eb	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  002ef	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  002f2	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  002fa	b8 04 00 00 00	 mov	 eax, 4
  002ff	6b c8 0f	 imul	 ecx, eax, 15
  00302	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  0030a	74 09		 je	 SHORT $LN33@HU_DrawDua
  0030c	c7 45 98 0f 00
	00 00		 mov	 DWORD PTR tv280[ebp], 15 ; 0000000fH
  00313	eb 18		 jmp	 SHORT $LN34@HU_DrawDua
$LN33@HU_DrawDua:
  00315	6b 55 f8 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  00319	8b 45 10	 mov	 eax, DWORD PTR _tab$[ebp]
  0031c	69 4c 10 04 fc
	01 00 00	 imul	 ecx, DWORD PTR [eax+edx+4], 508
  00324	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+180]
  0032a	89 55 98	 mov	 DWORD PTR tv280[ebp], edx
$LN34@HU_DrawDua:
  0032d	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00331	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00334	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0033c	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  00342	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _translationtables[eax*4]
  00349	8b 55 98	 mov	 edx, DWORD PTR tv280[ebp]
  0034c	c1 e2 08	 shl	 edx, 8
  0034f	8d 84 11 00 ff
	ff ff		 lea	 eax, DWORD PTR [ecx+edx-256]
  00356	89 45 f4	 mov	 DWORD PTR _colormap$[ebp], eax

; 1344 : 				V_DrawSmallMappedPatch (x, y-4, 0, superprefix[players[tab[i].num].skin], colormap);

  00359	8b 45 f4	 mov	 eax, DWORD PTR _colormap$[ebp]
  0035c	50		 push	 eax
  0035d	6b 4d f8 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  00361	8b 55 10	 mov	 edx, DWORD PTR _tab$[ebp]
  00364	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  0036c	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  00372	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _superprefix[ecx*4]
  00379	52		 push	 edx
  0037a	6a 00		 push	 0
  0037c	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0037f	83 e8 04	 sub	 eax, 4
  00382	50		 push	 eax
  00383	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00386	51		 push	 ecx
  00387	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  0038c	83 c4 14	 add	 esp, 20			; 00000014H

; 1345 : 			}

  0038f	e9 ba 00 00 00	 jmp	 $LN20@HU_DrawDua
$LN17@HU_DrawDua:

; 1346 : 			else
; 1347 : 			{
; 1348 : 				colormap = (const UINT8 *) translationtables[players[tab[i].num].skin] - 256 + (tab[i].color<<8);

  00394	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00398	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0039b	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  003a3	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  003a9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _translationtables[eax*4]
  003b0	6b 55 f8 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  003b4	8b 45 10	 mov	 eax, DWORD PTR _tab$[ebp]
  003b7	8b 54 10 08	 mov	 edx, DWORD PTR [eax+edx+8]
  003bb	c1 e2 08	 shl	 edx, 8
  003be	8d 84 11 00 ff
	ff ff		 lea	 eax, DWORD PTR [ecx+edx-256]
  003c5	89 45 f4	 mov	 DWORD PTR _colormap$[ebp], eax

; 1349 : 				if (players[tab[i].num].health <= 0)

  003c8	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003cc	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  003cf	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  003d7	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  003de	7f 38		 jg	 SHORT $LN19@HU_DrawDua

; 1350 : 					V_DrawSmallTranslucentMappedPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin], colormap);

  003e0	8b 45 f4	 mov	 eax, DWORD PTR _colormap$[ebp]
  003e3	50		 push	 eax
  003e4	6b 4d f8 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  003e8	8b 55 10	 mov	 edx, DWORD PTR _tab$[ebp]
  003eb	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  003f3	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  003f9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _faceprefix[ecx*4]
  00400	52		 push	 edx
  00401	6a 00		 push	 0
  00403	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00406	83 e8 04	 sub	 eax, 4
  00409	50		 push	 eax
  0040a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0040d	51		 push	 ecx
  0040e	e8 00 00 00 00	 call	 _V_DrawSmallTranslucentMappedPatch
  00413	83 c4 14	 add	 esp, 20			; 00000014H
  00416	eb 36		 jmp	 SHORT $LN20@HU_DrawDua
$LN19@HU_DrawDua:

; 1351 : 				else
; 1352 : 					V_DrawSmallMappedPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin], colormap);

  00418	8b 45 f4	 mov	 eax, DWORD PTR _colormap$[ebp]
  0041b	50		 push	 eax
  0041c	6b 4d f8 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  00420	8b 55 10	 mov	 edx, DWORD PTR _tab$[ebp]
  00423	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  0042b	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  00431	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _faceprefix[ecx*4]
  00438	52		 push	 edx
  00439	6a 00		 push	 0
  0043b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0043e	83 e8 04	 sub	 eax, 4
  00441	50		 push	 eax
  00442	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00445	51		 push	 ecx
  00446	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  0044b	83 c4 14	 add	 esp, 20			; 00000014H
$LN20@HU_DrawDua:

; 1353 : 			}
; 1354 : 		}
; 1355 : 
; 1356 : 		if (gametype == GT_RACE)

  0044e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00455	83 f8 02	 cmp	 eax, 2
  00458	0f 85 a0 01 00
	00		 jne	 $LN21@HU_DrawDua

; 1357 : 		{
; 1358 : 			if (circuitmap)

  0045e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  00465	0f 84 03 01 00
	00		 je	 $LN23@HU_DrawDua

; 1359 : 			{
; 1360 : 				if (players[tab[i].num].exiting)

  0046b	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0046f	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00472	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0047a	83 ba 30 01 00
	00 00		 cmp	 DWORD PTR _players[edx+304], 0
  00481	0f 84 87 00 00
	00		 je	 $LN25@HU_DrawDua

; 1361 : 					V_DrawRightAlignedString(x+156, y, 0, va("%i:%02i.%02i", G_TicsToMinutes(players[tab[i].num].realtime,true), G_TicsToSeconds(players[tab[i].num].realtime), G_TicsToCentiseconds(players[tab[i].num].realtime)));

  00487	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0048b	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0048e	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00496	8b 82 54 01 00
	00		 mov	 eax, DWORD PTR _players[edx+340]
  0049c	50		 push	 eax
  0049d	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  004a2	83 c4 04	 add	 esp, 4
  004a5	50		 push	 eax
  004a6	6b 4d f8 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  004aa	8b 55 10	 mov	 edx, DWORD PTR _tab$[ebp]
  004ad	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  004b5	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+340]
  004bb	51		 push	 ecx
  004bc	e8 00 00 00 00	 call	 _G_TicsToSeconds
  004c1	83 c4 04	 add	 esp, 4
  004c4	50		 push	 eax
  004c5	6a 01		 push	 1
  004c7	6b 55 f8 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  004cb	8b 45 10	 mov	 eax, DWORD PTR _tab$[ebp]
  004ce	69 4c 10 04 fc
	01 00 00	 imul	 ecx, DWORD PTR [eax+edx+4], 508
  004d6	8b 91 54 01 00
	00		 mov	 edx, DWORD PTR _players[ecx+340]
  004dc	52		 push	 edx
  004dd	e8 00 00 00 00	 call	 _G_TicsToMinutes
  004e2	83 c4 08	 add	 esp, 8
  004e5	50		 push	 eax
  004e6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CIBLIMGJ@?$CFi?3?$CF02i?4?$CF02i@
  004eb	e8 00 00 00 00	 call	 _va
  004f0	83 c4 10	 add	 esp, 16			; 00000010H
  004f3	50		 push	 eax
  004f4	6a 00		 push	 0
  004f6	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  004f9	50		 push	 eax
  004fa	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  004fd	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00503	51		 push	 ecx
  00504	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  00509	83 c4 10	 add	 esp, 16			; 00000010H
  0050c	eb 5b		 jmp	 SHORT $LN26@HU_DrawDua
$LN25@HU_DrawDua:

; 1362 : 				else
; 1363 : 					V_DrawRightAlignedString(x+156, y, ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT), va("%u", tab[i].count));

  0050e	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00512	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00515	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0051d	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  00524	7e 09		 jle	 SHORT $LN35@HU_DrawDua
  00526	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv405[ebp], 0
  0052d	eb 07		 jmp	 SHORT $LN36@HU_DrawDua
$LN35@HU_DrawDua:
  0052f	c7 45 98 00 00
	40 00		 mov	 DWORD PTR tv405[ebp], 4194304 ; 00400000H
$LN36@HU_DrawDua:
  00536	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0053a	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0053d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00540	52		 push	 edx
  00541	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00546	e8 00 00 00 00	 call	 _va
  0054b	83 c4 08	 add	 esp, 8
  0054e	50		 push	 eax
  0054f	8b 45 98	 mov	 eax, DWORD PTR tv405[ebp]
  00552	50		 push	 eax
  00553	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00556	51		 push	 ecx
  00557	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0055a	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  00560	52		 push	 edx
  00561	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  00566	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@HU_DrawDua:

; 1364 : 			}

  00569	e9 8e 00 00 00	 jmp	 $LN24@HU_DrawDua
$LN23@HU_DrawDua:

; 1365 : 			else
; 1366 : 				V_DrawRightAlignedString(x+156, y, ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT), va("%i:%02i.%02i", G_TicsToMinutes(tab[i].count,true), G_TicsToSeconds(tab[i].count), G_TicsToCentiseconds(tab[i].count)));

  0056e	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00572	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00575	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0057d	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  00584	7e 09		 jle	 SHORT $LN37@HU_DrawDua
  00586	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv439[ebp], 0
  0058d	eb 07		 jmp	 SHORT $LN38@HU_DrawDua
$LN37@HU_DrawDua:
  0058f	c7 45 98 00 00
	40 00		 mov	 DWORD PTR tv439[ebp], 4194304 ; 00400000H
$LN38@HU_DrawDua:
  00596	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0059a	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0059d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005a0	52		 push	 edx
  005a1	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  005a6	83 c4 04	 add	 esp, 4
  005a9	50		 push	 eax
  005aa	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  005ae	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  005b1	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005b4	52		 push	 edx
  005b5	e8 00 00 00 00	 call	 _G_TicsToSeconds
  005ba	83 c4 04	 add	 esp, 4
  005bd	50		 push	 eax
  005be	6a 01		 push	 1
  005c0	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  005c4	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  005c7	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005ca	52		 push	 edx
  005cb	e8 00 00 00 00	 call	 _G_TicsToMinutes
  005d0	83 c4 08	 add	 esp, 8
  005d3	50		 push	 eax
  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CIBLIMGJ@?$CFi?3?$CF02i?4?$CF02i@
  005d9	e8 00 00 00 00	 call	 _va
  005de	83 c4 10	 add	 esp, 16			; 00000010H
  005e1	50		 push	 eax
  005e2	8b 45 98	 mov	 eax, DWORD PTR tv439[ebp]
  005e5	50		 push	 eax
  005e6	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  005e9	51		 push	 ecx
  005ea	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  005ed	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  005f3	52		 push	 edx
  005f4	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  005f9	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@HU_DrawDua:

; 1367 : 		}

  005fc	eb 58		 jmp	 SHORT $LN22@HU_DrawDua
$LN21@HU_DrawDua:

; 1368 : 		else
; 1369 : 			V_DrawRightAlignedString(x+120, y, ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT), va("%u", tab[i].count));

  005fe	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00602	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00605	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0060d	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  00614	7e 09		 jle	 SHORT $LN39@HU_DrawDua
  00616	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv458[ebp], 0
  0061d	eb 07		 jmp	 SHORT $LN40@HU_DrawDua
$LN39@HU_DrawDua:
  0061f	c7 45 98 00 00
	40 00		 mov	 DWORD PTR tv458[ebp], 4194304 ; 00400000H
$LN40@HU_DrawDua:
  00626	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0062a	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0062d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00630	52		 push	 edx
  00631	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00636	e8 00 00 00 00	 call	 _va
  0063b	83 c4 08	 add	 esp, 8
  0063e	50		 push	 eax
  0063f	8b 45 98	 mov	 eax, DWORD PTR tv458[ebp]
  00642	50		 push	 eax
  00643	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00646	51		 push	 ecx
  00647	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0064a	83 c2 78	 add	 edx, 120		; 00000078H
  0064d	52		 push	 edx
  0064e	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  00653	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@HU_DrawDua:

; 1370 : 
; 1371 : 		y += 16;

  00656	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00659	83 c0 10	 add	 eax, 16			; 00000010H
  0065c	89 45 0c	 mov	 DWORD PTR _y$[ebp], eax

; 1372 : 		if (y > 160)

  0065f	81 7d 0c a0 00
	00 00		 cmp	 DWORD PTR _y$[ebp], 160	; 000000a0H
  00666	7e 12		 jle	 SHORT $LN27@HU_DrawDua

; 1373 : 		{
; 1374 : 			y = 32;

  00668	c7 45 0c 20 00
	00 00		 mov	 DWORD PTR _y$[ebp], 32	; 00000020H

; 1375 : 			x += BASEVIDWIDTH/2;

  0066f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00672	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00677	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
$LN27@HU_DrawDua:

; 1376 : 		}
; 1377 : 	}

  0067a	e9 02 fa ff ff	 jmp	 $LN2@HU_DrawDua
$LN3@HU_DrawDua:

; 1378 : }

  0067f	5f		 pop	 edi
  00680	5e		 pop	 esi
  00681	5b		 pop	 ebx
  00682	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00685	33 cd		 xor	 ecx, ebp
  00687	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0068c	8b e5		 mov	 esp, ebp
  0068e	5d		 pop	 ebp
  0068f	c3		 ret	 0
_HU_DrawDualTabRankings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawTeamTabRankings
_TEXT	SEGMENT
tv158 = -124						; size = 4
tv95 = -120						; size = 4
tv136 = -120						; size = 4
tv150 = -120						; size = 4
tv250 = -120						; size = 4
tv330 = -120						; size = 4
_name$ = -52						; size = 22
_colormap$ = -28					; size = 4
_blueplayers$ = -24					; size = 4
_redplayers$ = -20					; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_tab$ = 8						; size = 4
_whiteplayer$ = 12					; size = 4
_HU_DrawTeamTabRankings PROC				; COMDAT

; 1219 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 1220 : 	INT32 i,x,y;
; 1221 : 	INT32 redplayers = 0, blueplayers = 0;

  00013	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _redplayers$[ebp], 0
  0001a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _blueplayers$[ebp], 0

; 1222 : 	const UINT8 *colormap;
; 1223 : 	char name[MAXPLAYERNAME+1];
; 1224 : 
; 1225 : 	V_DrawFill(160, 26, 1, 154, 0); //Draw a vertical line to separate the two teams.

  00021	6a 00		 push	 0
  00023	68 9a 00 00 00	 push	 154			; 0000009aH
  00028	6a 01		 push	 1
  0002a	6a 1a		 push	 26			; 0000001aH
  0002c	68 a0 00 00 00	 push	 160			; 000000a0H
  00031	e8 00 00 00 00	 call	 _V_DrawFill
  00036	83 c4 14	 add	 esp, 20			; 00000014H

; 1226 : 	V_DrawFill(1, 26, 318, 1, 0); //And a horizontal line to make a T.

  00039	6a 00		 push	 0
  0003b	6a 01		 push	 1
  0003d	68 3e 01 00 00	 push	 318			; 0000013eH
  00042	6a 1a		 push	 26			; 0000001aH
  00044	6a 01		 push	 1
  00046	e8 00 00 00 00	 call	 _V_DrawFill
  0004b	83 c4 14	 add	 esp, 20			; 00000014H

; 1227 : 	V_DrawFill(1, 180, 318, 1, 0); //And a horizontal line near the bottom.

  0004e	6a 00		 push	 0
  00050	6a 01		 push	 1
  00052	68 3e 01 00 00	 push	 318			; 0000013eH
  00057	68 b4 00 00 00	 push	 180			; 000000b4H
  0005c	6a 01		 push	 1
  0005e	e8 00 00 00 00	 call	 _V_DrawFill
  00063	83 c4 14	 add	 esp, 20			; 00000014H

; 1228 : 
; 1229 : 	for (i = 0; i < MAXPLAYERS; i++)

  00066	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006d	eb 09		 jmp	 SHORT $LN4@HU_DrawTea
$LN2@HU_DrawTea:
  0006f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@HU_DrawTea:
  00078	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0007c	0f 8d d9 03 00
	00		 jge	 $LN3@HU_DrawTea

; 1230 : 	{
; 1231 : 		if (players[tab[i].num].spectator)

  00082	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  00089	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00091	0f b6 82 f0 01
	00 00		 movzx	 eax, BYTE PTR _players[edx+496]
  00098	85 c0		 test	 eax, eax
  0009a	74 02		 je	 SHORT $LN5@HU_DrawTea

; 1232 : 			continue; //ignore them.

  0009c	eb d1		 jmp	 SHORT $LN2@HU_DrawTea
$LN5@HU_DrawTea:

; 1233 : 
; 1234 : 		if (tab[i].color == 6) //red

  0009e	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  000a5	83 7c 01 08 06	 cmp	 DWORD PTR [ecx+eax+8], 6
  000aa	75 2c		 jne	 SHORT $LN6@HU_DrawTea

; 1235 : 		{
; 1236 : 			if (redplayers++ > 8)

  000ac	8b 45 ec	 mov	 eax, DWORD PTR _redplayers$[ebp]
  000af	89 45 88	 mov	 DWORD PTR tv95[ebp], eax
  000b2	8b 4d ec	 mov	 ecx, DWORD PTR _redplayers$[ebp]
  000b5	83 c1 01	 add	 ecx, 1
  000b8	89 4d ec	 mov	 DWORD PTR _redplayers$[ebp], ecx
  000bb	83 7d 88 08	 cmp	 DWORD PTR tv95[ebp], 8
  000bf	7e 02		 jle	 SHORT $LN8@HU_DrawTea

; 1237 : 				continue;

  000c1	eb ac		 jmp	 SHORT $LN2@HU_DrawTea
$LN8@HU_DrawTea:

; 1238 : 			x = 32 + (BASEVIDWIDTH/2);

  000c3	c7 45 f4 c0 00
	00 00		 mov	 DWORD PTR _x$[ebp], 192	; 000000c0H

; 1239 : 			y = (redplayers * 16) + 16;

  000ca	8b 45 ec	 mov	 eax, DWORD PTR _redplayers$[ebp]
  000cd	c1 e0 04	 shl	 eax, 4
  000d0	83 c0 10	 add	 eax, 16			; 00000010H
  000d3	89 45 f0	 mov	 DWORD PTR _y$[ebp], eax

; 1240 : 		}

  000d6	eb 42		 jmp	 SHORT $LN10@HU_DrawTea
$LN6@HU_DrawTea:

; 1241 : 		else if (tab[i].color == 7) //blue

  000d8	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  000df	83 7c 01 08 07	 cmp	 DWORD PTR [ecx+eax+8], 7
  000e4	75 2f		 jne	 SHORT $LN9@HU_DrawTea

; 1242 : 		{
; 1243 : 			if (blueplayers++ > 8)

  000e6	8b 45 e8	 mov	 eax, DWORD PTR _blueplayers$[ebp]
  000e9	89 45 88	 mov	 DWORD PTR tv136[ebp], eax
  000ec	8b 4d e8	 mov	 ecx, DWORD PTR _blueplayers$[ebp]
  000ef	83 c1 01	 add	 ecx, 1
  000f2	89 4d e8	 mov	 DWORD PTR _blueplayers$[ebp], ecx
  000f5	83 7d 88 08	 cmp	 DWORD PTR tv136[ebp], 8
  000f9	7e 05		 jle	 SHORT $LN11@HU_DrawTea

; 1244 : 				continue;

  000fb	e9 6f ff ff ff	 jmp	 $LN2@HU_DrawTea
$LN11@HU_DrawTea:

; 1245 : 			x = 32;

  00100	c7 45 f4 20 00
	00 00		 mov	 DWORD PTR _x$[ebp], 32	; 00000020H

; 1246 : 			y = (blueplayers * 16) + 16;

  00107	8b 45 e8	 mov	 eax, DWORD PTR _blueplayers$[ebp]
  0010a	c1 e0 04	 shl	 eax, 4
  0010d	83 c0 10	 add	 eax, 16			; 00000010H
  00110	89 45 f0	 mov	 DWORD PTR _y$[ebp], eax

; 1247 : 		}

  00113	eb 05		 jmp	 SHORT $LN10@HU_DrawTea
$LN9@HU_DrawTea:

; 1248 : 		else //er?  not on red or blue, so ignore them
; 1249 : 			continue;

  00115	e9 55 ff ff ff	 jmp	 $LN2@HU_DrawTea
$LN10@HU_DrawTea:

; 1250 : 
; 1251 : 		strlcpy(name, tab[i].name, 9);

  0011a	6a 09		 push	 9
  0011c	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00120	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  00123	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00127	52		 push	 edx
  00128	8d 45 cc	 lea	 eax, DWORD PTR _name$[ebp]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 _strlcpy
  00131	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1252 : 		V_DrawString(x + 24, y,

  00134	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00138	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  0013b	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0013f	3b 55 0c	 cmp	 edx, DWORD PTR _whiteplayer$[ebp]
  00142	75 09		 jne	 SHORT $LN23@HU_DrawTea
  00144	c7 45 88 00 00
	10 00		 mov	 DWORD PTR tv150[ebp], 1048576 ; 00100000H
  0014b	eb 07		 jmp	 SHORT $LN24@HU_DrawTea
$LN23@HU_DrawTea:
  0014d	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$LN24@HU_DrawTea:
  00154	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00158	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  0015b	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00163	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  0016a	7e 09		 jle	 SHORT $LN25@HU_DrawTea
  0016c	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
  00173	eb 07		 jmp	 SHORT $LN26@HU_DrawTea
$LN25@HU_DrawTea:
  00175	c7 45 84 00 00
	40 00		 mov	 DWORD PTR tv158[ebp], 4194304 ; 00400000H
$LN26@HU_DrawTea:
  0017c	8d 45 cc	 lea	 eax, DWORD PTR _name$[ebp]
  0017f	50		 push	 eax
  00180	8b 4d 88	 mov	 ecx, DWORD PTR tv150[ebp]
  00183	0b 4d 84	 or	 ecx, DWORD PTR tv158[ebp]
  00186	81 c9 00 00 04
	00		 or	 ecx, 262144		; 00040000H
  0018c	51		 push	 ecx
  0018d	8b 55 f0	 mov	 edx, DWORD PTR _y$[ebp]
  00190	52		 push	 edx
  00191	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00194	83 c0 18	 add	 eax, 24			; 00000018H
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _V_DrawString
  0019d	83 c4 10	 add	 esp, 16			; 00000010H

; 1253 : 		             ((tab[i].num == whiteplayer) ? V_YELLOWMAP : 0)
; 1254 : 		             | ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT)
; 1255 : 		             | V_ALLOWLOWERCASE, name);
; 1256 : 
; 1257 : 		if (gametype == GT_CTF)

  001a0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001a7	83 f8 04	 cmp	 eax, 4
  001aa	75 74		 jne	 SHORT $LN15@HU_DrawTea

; 1258 : 		{
; 1259 : 			if (players[tab[i].num].gotflag & MF_REDFLAG) // Red

  001ac	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001b0	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  001b3	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  001bb	0f b7 82 64 01
	00 00		 movzx	 eax, WORD PTR _players[edx+356]
  001c2	83 e0 01	 and	 eax, 1
  001c5	74 20		 je	 SHORT $LN13@HU_DrawTea

; 1260 : 				V_DrawSmallScaledPatch(x-28, y-4, 0, rflagico);

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _rflagico
  001cc	50		 push	 eax
  001cd	6a 00		 push	 0
  001cf	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  001d2	83 e9 04	 sub	 ecx, 4
  001d5	51		 push	 ecx
  001d6	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  001d9	83 ea 1c	 sub	 edx, 28			; 0000001cH
  001dc	52		 push	 edx
  001dd	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  001e2	83 c4 10	 add	 esp, 16			; 00000010H
  001e5	eb 39		 jmp	 SHORT $LN15@HU_DrawTea
$LN13@HU_DrawTea:

; 1261 : 			else if (players[tab[i].num].gotflag & MF_BLUEFLAG) // Blue

  001e7	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001eb	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  001ee	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  001f6	0f b7 82 64 01
	00 00		 movzx	 eax, WORD PTR _players[edx+356]
  001fd	83 e0 02	 and	 eax, 2
  00200	74 1e		 je	 SHORT $LN15@HU_DrawTea

; 1262 : 				V_DrawSmallScaledPatch(x-28, y-4, 0, bflagico);

  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR _bflagico
  00207	50		 push	 eax
  00208	6a 00		 push	 0
  0020a	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  0020d	83 e9 04	 sub	 ecx, 4
  00210	51		 push	 ecx
  00211	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  00214	83 ea 1c	 sub	 edx, 28			; 0000001cH
  00217	52		 push	 edx
  00218	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0021d	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@HU_DrawTea:

; 1263 : 		}
; 1264 : 
; 1265 : 		// Draw emeralds
; 1266 : 		if (!players[tab[i].num].powers[pw_super]
; 1267 : 			|| ((leveltime/7) & 1))

  00220	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00224	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  00227	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 0f	 imul	 ecx, eax, 15
  00237	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  0023f	74 13		 je	 SHORT $LN17@HU_DrawTea
  00241	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00246	33 d2		 xor	 edx, edx
  00248	b9 07 00 00 00	 mov	 ecx, 7
  0024d	f7 f1		 div	 ecx
  0024f	83 e0 01	 and	 eax, 1
  00252	74 22		 je	 SHORT $LN16@HU_DrawTea
$LN17@HU_DrawTea:

; 1268 : 		{
; 1269 : 			HU_DrawEmeralds(x-12,y+2,tab[i].emeralds);

  00254	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00258	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  0025b	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  0025f	52		 push	 edx
  00260	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  00263	83 c0 02	 add	 eax, 2
  00266	50		 push	 eax
  00267	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  0026a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0026d	51		 push	 ecx
  0026e	e8 00 00 00 00	 call	 _HU_DrawEmeralds
  00273	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@HU_DrawTea:

; 1270 : 		}
; 1271 : 
; 1272 : 		if (players[tab[i].num].powers[pw_super])

  00276	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0027a	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  0027d	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00285	b8 04 00 00 00	 mov	 eax, 4
  0028a	6b c8 0f	 imul	 ecx, eax, 15
  0028d	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  00295	0f 84 a9 00 00
	00		 je	 $LN18@HU_DrawTea

; 1273 : 		{
; 1274 : 			colormap = (const UINT8 *) translationtables[players[tab[i].num].skin] - 256 + (((players[tab[i].num].powers[pw_super]) ? 15 : players[tab[i].num].skincolor)<<8);

  0029b	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0029f	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  002a2	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  002aa	b8 04 00 00 00	 mov	 eax, 4
  002af	6b c8 0f	 imul	 ecx, eax, 15
  002b2	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  002ba	74 09		 je	 SHORT $LN27@HU_DrawTea
  002bc	c7 45 88 0f 00
	00 00		 mov	 DWORD PTR tv250[ebp], 15 ; 0000000fH
  002c3	eb 18		 jmp	 SHORT $LN28@HU_DrawTea
$LN27@HU_DrawTea:
  002c5	6b 55 f8 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  002c9	8b 45 08	 mov	 eax, DWORD PTR _tab$[ebp]
  002cc	69 4c 10 04 fc
	01 00 00	 imul	 ecx, DWORD PTR [eax+edx+4], 508
  002d4	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+180]
  002da	89 55 88	 mov	 DWORD PTR tv250[ebp], edx
$LN28@HU_DrawTea:
  002dd	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  002e1	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  002e4	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  002ec	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  002f2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _translationtables[eax*4]
  002f9	8b 55 88	 mov	 edx, DWORD PTR tv250[ebp]
  002fc	c1 e2 08	 shl	 edx, 8
  002ff	8d 84 11 00 ff
	ff ff		 lea	 eax, DWORD PTR [ecx+edx-256]
  00306	89 45 e4	 mov	 DWORD PTR _colormap$[ebp], eax

; 1275 : 			V_DrawSmallMappedPatch (x, y-4, 0, superprefix[players[tab[i].num].skin], colormap);

  00309	8b 45 e4	 mov	 eax, DWORD PTR _colormap$[ebp]
  0030c	50		 push	 eax
  0030d	6b 4d f8 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  00311	8b 55 08	 mov	 edx, DWORD PTR _tab$[ebp]
  00314	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  0031c	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  00322	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _superprefix[ecx*4]
  00329	52		 push	 edx
  0032a	6a 00		 push	 0
  0032c	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  0032f	83 e8 04	 sub	 eax, 4
  00332	50		 push	 eax
  00333	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00336	51		 push	 ecx
  00337	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  0033c	83 c4 14	 add	 esp, 20			; 00000014H

; 1276 : 		}

  0033f	e9 ba 00 00 00	 jmp	 $LN21@HU_DrawTea
$LN18@HU_DrawTea:

; 1277 : 		else
; 1278 : 		{
; 1279 : 			colormap = (const UINT8 *) translationtables[players[tab[i].num].skin] - 256 + (tab[i].color<<8);

  00344	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00348	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  0034b	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00353	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  00359	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _translationtables[eax*4]
  00360	6b 55 f8 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  00364	8b 45 08	 mov	 eax, DWORD PTR _tab$[ebp]
  00367	8b 54 10 08	 mov	 edx, DWORD PTR [eax+edx+8]
  0036b	c1 e2 08	 shl	 edx, 8
  0036e	8d 84 11 00 ff
	ff ff		 lea	 eax, DWORD PTR [ecx+edx-256]
  00375	89 45 e4	 mov	 DWORD PTR _colormap$[ebp], eax

; 1280 : 			if (players[tab[i].num].health <= 0)

  00378	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0037c	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  0037f	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00387	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  0038e	7f 38		 jg	 SHORT $LN20@HU_DrawTea

; 1281 : 				V_DrawSmallTranslucentMappedPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin], colormap);

  00390	8b 45 e4	 mov	 eax, DWORD PTR _colormap$[ebp]
  00393	50		 push	 eax
  00394	6b 4d f8 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  00398	8b 55 08	 mov	 edx, DWORD PTR _tab$[ebp]
  0039b	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  003a3	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  003a9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _faceprefix[ecx*4]
  003b0	52		 push	 edx
  003b1	6a 00		 push	 0
  003b3	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  003b6	83 e8 04	 sub	 eax, 4
  003b9	50		 push	 eax
  003ba	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 _V_DrawSmallTranslucentMappedPatch
  003c3	83 c4 14	 add	 esp, 20			; 00000014H
  003c6	eb 36		 jmp	 SHORT $LN21@HU_DrawTea
$LN20@HU_DrawTea:

; 1282 : 			else
; 1283 : 				V_DrawSmallMappedPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin], colormap);

  003c8	8b 45 e4	 mov	 eax, DWORD PTR _colormap$[ebp]
  003cb	50		 push	 eax
  003cc	6b 4d f8 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  003d0	8b 55 08	 mov	 edx, DWORD PTR _tab$[ebp]
  003d3	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  003db	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  003e1	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _faceprefix[ecx*4]
  003e8	52		 push	 edx
  003e9	6a 00		 push	 0
  003eb	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  003ee	83 e8 04	 sub	 eax, 4
  003f1	50		 push	 eax
  003f2	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  003f5	51		 push	 ecx
  003f6	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  003fb	83 c4 14	 add	 esp, 20			; 00000014H
$LN21@HU_DrawTea:

; 1284 : 		}
; 1285 : 		V_DrawRightAlignedString(x+120, y, ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT), va("%u", tab[i].count));

  003fe	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00402	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  00405	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0040d	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  00414	7e 09		 jle	 SHORT $LN29@HU_DrawTea
  00416	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv330[ebp], 0
  0041d	eb 07		 jmp	 SHORT $LN30@HU_DrawTea
$LN29@HU_DrawTea:
  0041f	c7 45 88 00 00
	40 00		 mov	 DWORD PTR tv330[ebp], 4194304 ; 00400000H
$LN30@HU_DrawTea:
  00426	6b 45 f8 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0042a	8b 4d 08	 mov	 ecx, DWORD PTR _tab$[ebp]
  0042d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00430	52		 push	 edx
  00431	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00436	e8 00 00 00 00	 call	 _va
  0043b	83 c4 08	 add	 esp, 8
  0043e	50		 push	 eax
  0043f	8b 45 88	 mov	 eax, DWORD PTR tv330[ebp]
  00442	50		 push	 eax
  00443	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  00446	51		 push	 ecx
  00447	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  0044a	83 c2 78	 add	 edx, 120		; 00000078H
  0044d	52		 push	 edx
  0044e	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  00453	83 c4 10	 add	 esp, 16			; 00000010H

; 1286 : 	}

  00456	e9 14 fc ff ff	 jmp	 $LN2@HU_DrawTea
$LN3@HU_DrawTea:

; 1287 : }

  0045b	5f		 pop	 edi
  0045c	5e		 pop	 esi
  0045d	5b		 pop	 ebx
  0045e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00461	33 cd		 xor	 ecx, ebp
  00463	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00468	8b e5		 mov	 esp, ebp
  0046a	5d		 pop	 ebp
  0046b	c3		 ret	 0
_HU_DrawTeamTabRankings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_DrawTabRankings
_TEXT	SEGMENT
tv95 = -80						; size = 4
tv87 = -76						; size = 4
tv246 = -76						; size = 4
tv387 = -76						; size = 4
tv421 = -76						; size = 4
tv440 = -76						; size = 4
_colormap$ = -8						; size = 4
_i$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_tab$ = 16						; size = 4
_scorelines$ = 20					; size = 4
_whiteplayer$ = 24					; size = 4
_HU_DrawTabRankings PROC				; COMDAT

; 1137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1138 : 	INT32 i;
; 1139 : 	const UINT8 *colormap;
; 1140 : 
; 1141 : 	//this function is designed for 9 or less score lines only
; 1142 : 	I_Assert(scorelines <= 9);
; 1143 : 
; 1144 : 	V_DrawFill(1, 26, 318, 1, 0); //Draw a horizontal line because it looks nice!

  00009	6a 00		 push	 0
  0000b	6a 01		 push	 1
  0000d	68 3e 01 00 00	 push	 318			; 0000013eH
  00012	6a 1a		 push	 26			; 0000001aH
  00014	6a 01		 push	 1
  00016	e8 00 00 00 00	 call	 _V_DrawFill
  0001b	83 c4 14	 add	 esp, 20			; 00000014H

; 1145 : 
; 1146 : 	for (i = 0; i < scorelines; i++)

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@HU_DrawTab
$LN2@HU_DrawTab:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@HU_DrawTab:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00033	3b 45 14	 cmp	 eax, DWORD PTR _scorelines$[ebp]
  00036	0f 8d be 05 00
	00		 jge	 $LN3@HU_DrawTab

; 1147 : 	{
; 1148 : 		if (players[tab[i].num].spectator)

  0003c	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00040	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00043	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0004b	0f b6 82 f0 01
	00 00		 movzx	 eax, BYTE PTR _players[edx+496]
  00052	85 c0		 test	 eax, eax
  00054	74 02		 je	 SHORT $LN5@HU_DrawTab

; 1149 : 			continue; //ignore them.

  00056	eb cf		 jmp	 SHORT $LN2@HU_DrawTab
$LN5@HU_DrawTab:

; 1150 : 
; 1151 : 		V_DrawString(x + 24, y,

  00058	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0005f	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00063	3b 55 18	 cmp	 edx, DWORD PTR _whiteplayer$[ebp]
  00066	75 09		 jne	 SHORT $LN26@HU_DrawTab
  00068	c7 45 b4 00 00
	10 00		 mov	 DWORD PTR tv87[ebp], 1048576 ; 00100000H
  0006f	eb 07		 jmp	 SHORT $LN27@HU_DrawTab
$LN26@HU_DrawTab:
  00071	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN27@HU_DrawTab:
  00078	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0007f	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00087	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  0008e	7e 09		 jle	 SHORT $LN28@HU_DrawTab
  00090	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
  00097	eb 07		 jmp	 SHORT $LN29@HU_DrawTab
$LN28@HU_DrawTab:
  00099	c7 45 b0 00 00
	40 00		 mov	 DWORD PTR tv95[ebp], 4194304 ; 00400000H
$LN29@HU_DrawTab:
  000a0	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000a4	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  000a7	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  000ab	52		 push	 edx
  000ac	8b 45 b4	 mov	 eax, DWORD PTR tv87[ebp]
  000af	0b 45 b0	 or	 eax, DWORD PTR tv95[ebp]
  000b2	0d 00 00 04 00	 or	 eax, 262144		; 00040000H
  000b7	50		 push	 eax
  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000bb	51		 push	 ecx
  000bc	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000bf	83 c2 18	 add	 edx, 24			; 00000018H
  000c2	52		 push	 edx
  000c3	e8 00 00 00 00	 call	 _V_DrawString
  000c8	83 c4 10	 add	 esp, 16			; 00000010H

; 1152 : 		             ((tab[i].num == whiteplayer) ? V_YELLOWMAP : 0)
; 1153 : 		             | ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT)
; 1154 : 		             | V_ALLOWLOWERCASE, tab[i].name);
; 1155 : 
; 1156 : 		// Draw emeralds
; 1157 : 		if (!players[tab[i].num].powers[pw_super]
; 1158 : 			|| ((leveltime/7) & 1))

  000cb	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000cf	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  000d2	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  000da	b8 04 00 00 00	 mov	 eax, 4
  000df	6b c8 0f	 imul	 ecx, eax, 15
  000e2	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  000ea	74 13		 je	 SHORT $LN7@HU_DrawTab
  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  000f1	33 d2		 xor	 edx, edx
  000f3	b9 07 00 00 00	 mov	 ecx, 7
  000f8	f7 f1		 div	 ecx
  000fa	83 e0 01	 and	 eax, 1
  000fd	74 22		 je	 SHORT $LN6@HU_DrawTab
$LN7@HU_DrawTab:

; 1159 : 		{
; 1160 : 			HU_DrawEmeralds(x-12,y+2,tab[i].emeralds);

  000ff	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00103	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00106	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  0010a	52		 push	 edx
  0010b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0010e	83 c0 02	 add	 eax, 2
  00111	50		 push	 eax
  00112	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00115	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 _HU_DrawEmeralds
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@HU_DrawTab:

; 1161 : 		}
; 1162 : 
; 1163 : 		if (tab[i].color == 0)

  00121	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00125	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00128	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  0012d	0f 85 e0 00 00
	00		 jne	 $LN8@HU_DrawTab

; 1164 : 		{
; 1165 : 			colormap = colormaps;

  00133	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaps
  00138	89 45 f8	 mov	 DWORD PTR _colormap$[ebp], eax

; 1166 : 			if (players[tab[i].num].powers[pw_super])

  0013b	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0013f	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00142	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0014a	b8 04 00 00 00	 mov	 eax, 4
  0014f	6b c8 0f	 imul	 ecx, eax, 15
  00152	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  0015a	74 34		 je	 SHORT $LN10@HU_DrawTab

; 1167 : 				V_DrawSmallScaledPatch (x, y-4, 0, superprefix[players[tab[i].num].skin]);

  0015c	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00160	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00163	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0016b	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  00171	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _superprefix[eax*4]
  00178	51		 push	 ecx
  00179	6a 00		 push	 0
  0017b	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0017e	83 ea 04	 sub	 edx, 4
  00181	52		 push	 edx
  00182	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0018b	83 c4 10	 add	 esp, 16			; 00000010H
  0018e	eb 7e		 jmp	 SHORT $LN13@HU_DrawTab
$LN10@HU_DrawTab:

; 1168 : 			else
; 1169 : 			{
; 1170 : 				if (players[tab[i].num].health <= 0)

  00190	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00194	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00197	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0019f	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  001a6	7f 34		 jg	 SHORT $LN12@HU_DrawTab

; 1171 : 					V_DrawSmallTranslucentPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin]);

  001a8	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001ac	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  001af	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  001b7	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  001bd	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _faceprefix[eax*4]
  001c4	51		 push	 ecx
  001c5	6a 00		 push	 0
  001c7	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  001ca	83 ea 04	 sub	 edx, 4
  001cd	52		 push	 edx
  001ce	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 _V_DrawSmallTranslucentPatch
  001d7	83 c4 10	 add	 esp, 16			; 00000010H
  001da	eb 32		 jmp	 SHORT $LN13@HU_DrawTab
$LN12@HU_DrawTab:

; 1172 : 				else
; 1173 : 					V_DrawSmallScaledPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin]);

  001dc	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001e0	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  001e3	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  001eb	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  001f1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _faceprefix[eax*4]
  001f8	51		 push	 ecx
  001f9	6a 00		 push	 0
  001fb	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  001fe	83 ea 04	 sub	 edx, 4
  00201	52		 push	 edx
  00202	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0020b	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@HU_DrawTab:

; 1174 : 			}
; 1175 : 		}

  0020e	e9 88 01 00 00	 jmp	 $LN17@HU_DrawTab
$LN8@HU_DrawTab:

; 1176 : 		else
; 1177 : 		{
; 1178 : 			if (players[tab[i].num].powers[pw_super])

  00213	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00217	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0021a	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00222	b8 04 00 00 00	 mov	 eax, 4
  00227	6b c8 0f	 imul	 ecx, eax, 15
  0022a	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  00232	0f 84 a9 00 00
	00		 je	 $LN14@HU_DrawTab

; 1179 : 			{
; 1180 : 				colormap = (const UINT8 *) translationtables[players[tab[i].num].skin] - 256 + (((players[tab[i].num].powers[pw_super]) ? 15 : players[tab[i].num].skincolor)<<8);

  00238	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0023c	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0023f	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00247	b8 04 00 00 00	 mov	 eax, 4
  0024c	6b c8 0f	 imul	 ecx, eax, 15
  0024f	83 bc 0a 38 00
	00 00 00	 cmp	 DWORD PTR _players[edx+ecx+56], 0
  00257	74 09		 je	 SHORT $LN30@HU_DrawTab
  00259	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR tv246[ebp], 15 ; 0000000fH
  00260	eb 18		 jmp	 SHORT $LN31@HU_DrawTab
$LN30@HU_DrawTab:
  00262	6b 55 fc 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  00266	8b 45 10	 mov	 eax, DWORD PTR _tab$[ebp]
  00269	69 4c 10 04 fc
	01 00 00	 imul	 ecx, DWORD PTR [eax+edx+4], 508
  00271	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+180]
  00277	89 55 b4	 mov	 DWORD PTR tv246[ebp], edx
$LN31@HU_DrawTab:
  0027a	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0027e	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00281	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00289	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  0028f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _translationtables[eax*4]
  00296	8b 55 b4	 mov	 edx, DWORD PTR tv246[ebp]
  00299	c1 e2 08	 shl	 edx, 8
  0029c	8d 84 11 00 ff
	ff ff		 lea	 eax, DWORD PTR [ecx+edx-256]
  002a3	89 45 f8	 mov	 DWORD PTR _colormap$[ebp], eax

; 1181 : 				V_DrawSmallMappedPatch (x, y-4, 0, superprefix[players[tab[i].num].skin], colormap);

  002a6	8b 45 f8	 mov	 eax, DWORD PTR _colormap$[ebp]
  002a9	50		 push	 eax
  002aa	6b 4d fc 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  002ae	8b 55 10	 mov	 edx, DWORD PTR _tab$[ebp]
  002b1	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  002b9	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  002bf	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _superprefix[ecx*4]
  002c6	52		 push	 edx
  002c7	6a 00		 push	 0
  002c9	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  002cc	83 e8 04	 sub	 eax, 4
  002cf	50		 push	 eax
  002d0	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  002d3	51		 push	 ecx
  002d4	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  002d9	83 c4 14	 add	 esp, 20			; 00000014H

; 1182 : 			}

  002dc	e9 ba 00 00 00	 jmp	 $LN17@HU_DrawTab
$LN14@HU_DrawTab:

; 1183 : 			else
; 1184 : 			{
; 1185 : 				colormap = (const UINT8 *) translationtables[players[tab[i].num].skin] - 256 + (tab[i].color<<8);

  002e1	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  002e5	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  002e8	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  002f0	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR _players[edx+184]
  002f6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _translationtables[eax*4]
  002fd	6b 55 fc 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  00301	8b 45 10	 mov	 eax, DWORD PTR _tab$[ebp]
  00304	8b 54 10 08	 mov	 edx, DWORD PTR [eax+edx+8]
  00308	c1 e2 08	 shl	 edx, 8
  0030b	8d 84 11 00 ff
	ff ff		 lea	 eax, DWORD PTR [ecx+edx-256]
  00312	89 45 f8	 mov	 DWORD PTR _colormap$[ebp], eax

; 1186 : 				if (players[tab[i].num].health <= 0)

  00315	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00319	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0031c	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00324	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  0032b	7f 38		 jg	 SHORT $LN16@HU_DrawTab

; 1187 : 					V_DrawSmallTranslucentMappedPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin], colormap);

  0032d	8b 45 f8	 mov	 eax, DWORD PTR _colormap$[ebp]
  00330	50		 push	 eax
  00331	6b 4d fc 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  00335	8b 55 10	 mov	 edx, DWORD PTR _tab$[ebp]
  00338	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  00340	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  00346	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _faceprefix[ecx*4]
  0034d	52		 push	 edx
  0034e	6a 00		 push	 0
  00350	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00353	83 e8 04	 sub	 eax, 4
  00356	50		 push	 eax
  00357	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0035a	51		 push	 ecx
  0035b	e8 00 00 00 00	 call	 _V_DrawSmallTranslucentMappedPatch
  00360	83 c4 14	 add	 esp, 20			; 00000014H
  00363	eb 36		 jmp	 SHORT $LN17@HU_DrawTab
$LN16@HU_DrawTab:

; 1188 : 				else
; 1189 : 					V_DrawSmallMappedPatch (x, y-4, 0, faceprefix[players[tab[i].num].skin], colormap);

  00365	8b 45 f8	 mov	 eax, DWORD PTR _colormap$[ebp]
  00368	50		 push	 eax
  00369	6b 4d fc 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  0036d	8b 55 10	 mov	 edx, DWORD PTR _tab$[ebp]
  00370	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  00378	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  0037e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _faceprefix[ecx*4]
  00385	52		 push	 edx
  00386	6a 00		 push	 0
  00388	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0038b	83 e8 04	 sub	 eax, 4
  0038e	50		 push	 eax
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00392	51		 push	 ecx
  00393	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  00398	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@HU_DrawTab:

; 1190 : 			}
; 1191 : 		}
; 1192 : 
; 1193 : 		if (gametype == GT_TAG && players[tab[i].num].pflags & PF_TAGIT)

  0039b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003a2	83 f8 03	 cmp	 eax, 3
  003a5	75 3a		 jne	 SHORT $LN18@HU_DrawTab
  003a7	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003ab	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  003ae	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  003b6	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR _players[edx+172]
  003bc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003c1	74 1e		 je	 SHORT $LN18@HU_DrawTab

; 1194 : 			V_DrawSmallScaledPatch(x-32, y-4, 0, tagico);

  003c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _tagico
  003c8	50		 push	 eax
  003c9	6a 00		 push	 0
  003cb	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  003ce	83 e9 04	 sub	 ecx, 4
  003d1	51		 push	 ecx
  003d2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  003d5	83 ea 20	 sub	 edx, 32			; 00000020H
  003d8	52		 push	 edx
  003d9	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  003de	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@HU_DrawTab:

; 1195 : 
; 1196 : 		if (gametype == GT_RACE)

  003e1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003e8	83 f8 02	 cmp	 eax, 2
  003eb	0f 85 a0 01 00
	00		 jne	 $LN19@HU_DrawTab

; 1197 : 		{
; 1198 : 			if (circuitmap)

  003f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  003f8	0f 84 03 01 00
	00		 je	 $LN21@HU_DrawTab

; 1199 : 			{
; 1200 : 				if (players[tab[i].num].exiting)

  003fe	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00402	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00405	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  0040d	83 ba 30 01 00
	00 00		 cmp	 DWORD PTR _players[edx+304], 0
  00414	0f 84 87 00 00
	00		 je	 $LN23@HU_DrawTab

; 1201 : 					V_DrawRightAlignedString(x+240, y, 0, va("%i:%02i.%02i", G_TicsToMinutes(players[tab[i].num].realtime,true), G_TicsToSeconds(players[tab[i].num].realtime), G_TicsToCentiseconds(players[tab[i].num].realtime)));

  0041a	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0041e	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00421	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00429	8b 82 54 01 00
	00		 mov	 eax, DWORD PTR _players[edx+340]
  0042f	50		 push	 eax
  00430	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00435	83 c4 04	 add	 esp, 4
  00438	50		 push	 eax
  00439	6b 4d fc 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  0043d	8b 55 10	 mov	 edx, DWORD PTR _tab$[ebp]
  00440	69 44 0a 04 fc
	01 00 00	 imul	 eax, DWORD PTR [edx+ecx+4], 508
  00448	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+340]
  0044e	51		 push	 ecx
  0044f	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00454	83 c4 04	 add	 esp, 4
  00457	50		 push	 eax
  00458	6a 01		 push	 1
  0045a	6b 55 fc 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  0045e	8b 45 10	 mov	 eax, DWORD PTR _tab$[ebp]
  00461	69 4c 10 04 fc
	01 00 00	 imul	 ecx, DWORD PTR [eax+edx+4], 508
  00469	8b 91 54 01 00
	00		 mov	 edx, DWORD PTR _players[ecx+340]
  0046f	52		 push	 edx
  00470	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00475	83 c4 08	 add	 esp, 8
  00478	50		 push	 eax
  00479	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CIBLIMGJ@?$CFi?3?$CF02i?4?$CF02i@
  0047e	e8 00 00 00 00	 call	 _va
  00483	83 c4 10	 add	 esp, 16			; 00000010H
  00486	50		 push	 eax
  00487	6a 00		 push	 0
  00489	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0048c	50		 push	 eax
  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00490	81 c1 f0 00 00
	00		 add	 ecx, 240		; 000000f0H
  00496	51		 push	 ecx
  00497	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  0049c	83 c4 10	 add	 esp, 16			; 00000010H
  0049f	eb 5b		 jmp	 SHORT $LN24@HU_DrawTab
$LN23@HU_DrawTab:

; 1202 : 				else
; 1203 : 					V_DrawRightAlignedString(x+240, y, ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT), va("%u", tab[i].count));

  004a1	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  004a5	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  004a8	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  004b0	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  004b7	7e 09		 jle	 SHORT $LN32@HU_DrawTab
  004b9	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv387[ebp], 0
  004c0	eb 07		 jmp	 SHORT $LN33@HU_DrawTab
$LN32@HU_DrawTab:
  004c2	c7 45 b4 00 00
	40 00		 mov	 DWORD PTR tv387[ebp], 4194304 ; 00400000H
$LN33@HU_DrawTab:
  004c9	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  004cd	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  004d0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  004d3	52		 push	 edx
  004d4	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  004d9	e8 00 00 00 00	 call	 _va
  004de	83 c4 08	 add	 esp, 8
  004e1	50		 push	 eax
  004e2	8b 45 b4	 mov	 eax, DWORD PTR tv387[ebp]
  004e5	50		 push	 eax
  004e6	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  004e9	51		 push	 ecx
  004ea	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  004ed	81 c2 f0 00 00
	00		 add	 edx, 240		; 000000f0H
  004f3	52		 push	 edx
  004f4	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  004f9	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@HU_DrawTab:

; 1204 : 			}

  004fc	e9 8e 00 00 00	 jmp	 $LN22@HU_DrawTab
$LN21@HU_DrawTab:

; 1205 : 			else
; 1206 : 				V_DrawRightAlignedString(x+240, y, ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT), va("%i:%02i.%02i", G_TicsToMinutes(tab[i].count,true), G_TicsToSeconds(tab[i].count), G_TicsToCentiseconds(tab[i].count)));

  00501	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00505	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00508	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  00510	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  00517	7e 09		 jle	 SHORT $LN34@HU_DrawTab
  00519	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv421[ebp], 0
  00520	eb 07		 jmp	 SHORT $LN35@HU_DrawTab
$LN34@HU_DrawTab:
  00522	c7 45 b4 00 00
	40 00		 mov	 DWORD PTR tv421[ebp], 4194304 ; 00400000H
$LN35@HU_DrawTab:
  00529	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0052d	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00530	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00533	52		 push	 edx
  00534	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00539	83 c4 04	 add	 esp, 4
  0053c	50		 push	 eax
  0053d	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00541	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00544	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00547	52		 push	 edx
  00548	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0054d	83 c4 04	 add	 esp, 4
  00550	50		 push	 eax
  00551	6a 01		 push	 1
  00553	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00557	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  0055a	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0055d	52		 push	 edx
  0055e	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00563	83 c4 08	 add	 esp, 8
  00566	50		 push	 eax
  00567	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CIBLIMGJ@?$CFi?3?$CF02i?4?$CF02i@
  0056c	e8 00 00 00 00	 call	 _va
  00571	83 c4 10	 add	 esp, 16			; 00000010H
  00574	50		 push	 eax
  00575	8b 45 b4	 mov	 eax, DWORD PTR tv421[ebp]
  00578	50		 push	 eax
  00579	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0057c	51		 push	 ecx
  0057d	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00580	81 c2 f0 00 00
	00		 add	 edx, 240		; 000000f0H
  00586	52		 push	 edx
  00587	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  0058c	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@HU_DrawTab:

; 1207 : 		}

  0058f	eb 5b		 jmp	 SHORT $LN20@HU_DrawTab
$LN19@HU_DrawTab:

; 1208 : 		else
; 1209 : 			V_DrawRightAlignedString(x+240, y, ((players[tab[i].num].health > 0) ? 0 : V_TRANSLUCENT), va("%u", tab[i].count));

  00591	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00595	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  00598	69 54 01 04 fc
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+4], 508
  005a0	83 ba 28 00 00
	00 00		 cmp	 DWORD PTR _players[edx+40], 0
  005a7	7e 09		 jle	 SHORT $LN36@HU_DrawTab
  005a9	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv440[ebp], 0
  005b0	eb 07		 jmp	 SHORT $LN37@HU_DrawTab
$LN36@HU_DrawTab:
  005b2	c7 45 b4 00 00
	40 00		 mov	 DWORD PTR tv440[ebp], 4194304 ; 00400000H
$LN37@HU_DrawTab:
  005b9	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  005bd	8b 4d 10	 mov	 ecx, DWORD PTR _tab$[ebp]
  005c0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005c3	52		 push	 edx
  005c4	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  005c9	e8 00 00 00 00	 call	 _va
  005ce	83 c4 08	 add	 esp, 8
  005d1	50		 push	 eax
  005d2	8b 45 b4	 mov	 eax, DWORD PTR tv440[ebp]
  005d5	50		 push	 eax
  005d6	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  005d9	51		 push	 ecx
  005da	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  005dd	81 c2 f0 00 00
	00		 add	 edx, 240		; 000000f0H
  005e3	52		 push	 edx
  005e4	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  005e9	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@HU_DrawTab:

; 1210 : 
; 1211 : 		y += 16;

  005ec	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  005ef	83 c0 10	 add	 eax, 16			; 00000010H
  005f2	89 45 0c	 mov	 DWORD PTR _y$[ebp], eax

; 1212 : 	}

  005f5	e9 2d fa ff ff	 jmp	 $LN2@HU_DrawTab
$LN3@HU_DrawTab:

; 1213 : }

  005fa	5f		 pop	 edi
  005fb	5e		 pop	 esi
  005fc	5b		 pop	 ebx
  005fd	8b e5		 mov	 esp, ebp
  005ff	5d		 pop	 ebp
  00600	c3		 ret	 0
_HU_DrawTabRankings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_clearChatChars
_TEXT	SEGMENT
_HU_clearChatChars PROC					; COMDAT

; 764  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@HU_clearCh:

; 765  : 	while (tail != head)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _tail
  0000e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _head
  00014	74 0c		 je	 SHORT $LN3@HU_clearCh

; 766  : 		HU_queueChatChar(KEY_BACKSPACE);

  00016	6a 08		 push	 8
  00018	e8 00 00 00 00	 call	 _HU_queueChatChar
  0001d	83 c4 04	 add	 esp, 4
  00020	eb e7		 jmp	 SHORT $LN2@HU_clearCh
$LN3@HU_clearCh:

; 767  : 	chat_on = false;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _chat_on, 0

; 768  : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_HU_clearChatChars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_Erase
_TEXT	SEGMENT
tv68 = -88						; size = 4
_secondframe$ = -20					; size = 4
_yoffset$ = -16						; size = 4
_y$ = -12						; size = 4
_bottomline$ = -8					; size = 4
_topline$ = -4						; size = 4
_HU_Erase PROC						; COMDAT

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1077 : 	INT32 topline, bottomline;
; 1078 : 	INT32 y, yoffset;
; 1079 : 
; 1080 : 	// clear hud msgs on double buffer (OpenGL mode)
; 1081 : 	boolean secondframe;
; 1082 : 	static INT32 secondframelines;
; 1083 : 
; 1084 : 	if (con_clearlines == oldclearlines && !con_hudupdate && !chat_on)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _con_clearlines
  0000e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _oldclearlines
  00014	75 17		 jne	 SHORT $LN5@HU_Erase
  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _con_hudupdate, 0
  0001d	75 0e		 jne	 SHORT $LN5@HU_Erase
  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chat_on, 0
  00026	75 05		 jne	 SHORT $LN5@HU_Erase

; 1085 : 		return;

  00028	e9 44 01 00 00	 jmp	 $LN16@HU_Erase
$LN5@HU_Erase:

; 1086 : 
; 1087 : 	// clear the other frame in double-buffer modes
; 1088 : 	secondframe = (con_clearlines != oldclearlines);

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR _con_clearlines
  00032	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _oldclearlines
  00038	74 09		 je	 SHORT $LN18@HU_Erase
  0003a	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00041	eb 07		 jmp	 SHORT $LN19@HU_Erase
$LN18@HU_Erase:
  00043	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN19@HU_Erase:
  0004a	8b 4d a8	 mov	 ecx, DWORD PTR tv68[ebp]
  0004d	89 4d ec	 mov	 DWORD PTR _secondframe$[ebp], ecx

; 1089 : 	if (secondframe)

  00050	83 7d ec 00	 cmp	 DWORD PTR _secondframe$[ebp], 0
  00054	74 0a		 je	 SHORT $LN6@HU_Erase

; 1090 : 		secondframelines = oldclearlines;

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR _oldclearlines
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?secondframelines@?1??HU_Erase@@9@9, eax
$LN6@HU_Erase:

; 1091 : 
; 1092 : 	// clear the message lines that go away, so use _oldclearlines_
; 1093 : 	bottomline = oldclearlines;

  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR _oldclearlines
  00065	89 45 f8	 mov	 DWORD PTR _bottomline$[ebp], eax

; 1094 : 	oldclearlines = con_clearlines;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR _con_clearlines
  0006d	a3 00 00 00 00	 mov	 DWORD PTR _oldclearlines, eax

; 1095 : 	if (chat_on)

  00072	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chat_on, 0
  00079	74 0d		 je	 SHORT $LN8@HU_Erase

; 1096 : 		if (bottomline < 8)

  0007b	83 7d f8 08	 cmp	 DWORD PTR _bottomline$[ebp], 8
  0007f	7d 07		 jge	 SHORT $LN8@HU_Erase

; 1097 : 			bottomline = 8;

  00081	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR _bottomline$[ebp], 8
$LN8@HU_Erase:

; 1098 : 
; 1099 : 	if (automapactive || viewwindowx == 0) // hud msgs don't need to be cleared

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  0008f	75 09		 jne	 SHORT $LN10@HU_Erase
  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _viewwindowx, 0
  00098	75 05		 jne	 SHORT $LN9@HU_Erase
$LN10@HU_Erase:

; 1100 : 		return;

  0009a	e9 d2 00 00 00	 jmp	 $LN16@HU_Erase
$LN9@HU_Erase:

; 1101 : 
; 1102 : 	// software mode copies view border pattern & beveled edges from the backbuffer
; 1103 : 	if (rendermode == render_soft)

  0009f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  000a6	0f 85 a6 00 00
	00		 jne	 $LN11@HU_Erase

; 1104 : 	{
; 1105 : 		topline = 0;

  000ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _topline$[ebp], 0

; 1106 : 		for (y = topline, yoffset = y*vid.width; y < bottomline; y++, yoffset += vid.width)

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _topline$[ebp]
  000b6	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
  000b9	8b 4d f4	 mov	 ecx, DWORD PTR _y$[ebp]
  000bc	0f af 0d 0c 00
	00 00		 imul	 ecx, DWORD PTR _vid+12
  000c3	89 4d f0	 mov	 DWORD PTR _yoffset$[ebp], ecx
  000c6	eb 15		 jmp	 SHORT $LN4@HU_Erase
$LN2@HU_Erase:
  000c8	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  000cb	83 c0 01	 add	 eax, 1
  000ce	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _yoffset$[ebp]
  000d4	03 0d 0c 00 00
	00		 add	 ecx, DWORD PTR _vid+12
  000da	89 4d f0	 mov	 DWORD PTR _yoffset$[ebp], ecx
$LN4@HU_Erase:
  000dd	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  000e0	3b 45 f8	 cmp	 eax, DWORD PTR _bottomline$[ebp]
  000e3	7d 61		 jge	 SHORT $LN3@HU_Erase

; 1107 : 		{
; 1108 : 			if (y < viewwindowy || y >= viewwindowy + viewheight)

  000e5	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  000e8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _viewwindowy
  000ee	7c 10		 jl	 SHORT $LN15@HU_Erase
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewwindowy
  000f5	03 05 00 00 00
	00		 add	 eax, DWORD PTR _viewheight
  000fb	39 45 f4	 cmp	 DWORD PTR _y$[ebp], eax
  000fe	7c 14		 jl	 SHORT $LN13@HU_Erase
$LN15@HU_Erase:

; 1109 : 				R_VideoErase(yoffset, vid.width); // erase entire line

  00100	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00105	50		 push	 eax
  00106	8b 4d f0	 mov	 ecx, DWORD PTR _yoffset$[ebp]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _R_VideoErase
  0010f	83 c4 08	 add	 esp, 8
  00112	eb 30		 jmp	 SHORT $LN14@HU_Erase
$LN13@HU_Erase:

; 1110 : 			else
; 1111 : 			{
; 1112 : 				R_VideoErase(yoffset, viewwindowx); // erase left border

  00114	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewwindowx
  00119	50		 push	 eax
  0011a	8b 4d f0	 mov	 ecx, DWORD PTR _yoffset$[ebp]
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 _R_VideoErase
  00123	83 c4 08	 add	 esp, 8

; 1113 : 				// erase right border
; 1114 : 				R_VideoErase(yoffset + viewwindowx + viewwidth, viewwindowx);

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewwindowx
  0012b	50		 push	 eax
  0012c	8b 4d f0	 mov	 ecx, DWORD PTR _yoffset$[ebp]
  0012f	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _viewwindowx
  00135	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _viewwidth
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 _R_VideoErase
  00141	83 c4 08	 add	 esp, 8
$LN14@HU_Erase:

; 1115 : 			}
; 1116 : 		}

  00144	eb 82		 jmp	 SHORT $LN2@HU_Erase
$LN3@HU_Erase:

; 1117 : 		con_hudupdate = false; // if it was set..

  00146	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _con_hudupdate, 0

; 1118 : 	}

  00150	eb 1f		 jmp	 SHORT $LN16@HU_Erase
$LN11@HU_Erase:

; 1119 : #ifdef HWRENDER
; 1120 : 	else if (rendermode != render_none)

  00152	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00159	74 16		 je	 SHORT $LN16@HU_Erase

; 1121 : 	{
; 1122 : 		// refresh just what is needed from the view borders
; 1123 : 		HWR_DrawViewBorder(secondframelines);

  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?secondframelines@?1??HU_Erase@@9@9
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _HWR_DrawViewBorder
  00166	83 c4 04	 add	 esp, 4

; 1124 : 		con_hudupdate = secondframe;

  00169	8b 45 ec	 mov	 eax, DWORD PTR _secondframe$[ebp]
  0016c	a3 00 00 00 00	 mov	 DWORD PTR _con_hudupdate, eax
$LN16@HU_Erase:

; 1125 : 	}
; 1126 : #endif
; 1127 : }

  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	5b		 pop	 ebx
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
_HU_Erase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_dequeueChatChar
_TEXT	SEGMENT
_c$ = -1						; size = 1
_HU_dequeueChatChar PROC				; COMDAT

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 708  : 	char c;
; 709  : 
; 710  : 	if (head != tail)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _head
  0000e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _tail
  00014	74 22		 je	 SHORT $LN2@HU_dequeue

; 711  : 	{
; 712  : 		c = chatchars[tail];

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _tail
  0001b	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _chatchars[eax]
  00021	88 4d ff	 mov	 BYTE PTR _c$[ebp], cl

; 713  : 		tail = (tail + 1) & (QUEUESIZE-1);

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _tail
  00029	83 c0 01	 add	 eax, 1
  0002c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00031	a3 00 00 00 00	 mov	 DWORD PTR _tail, eax

; 714  : 	}

  00036	eb 04		 jmp	 SHORT $LN3@HU_dequeue
$LN2@HU_dequeue:

; 715  : 	else
; 716  : 		c = 0;

  00038	c6 45 ff 00	 mov	 BYTE PTR _c$[ebp], 0
$LN3@HU_dequeue:

; 717  : 
; 718  : 	return c;

  0003c	0f b6 45 ff	 movzx	 eax, BYTE PTR _c$[ebp]

; 719  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_HU_dequeueChatChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_Drawer
_TEXT	SEGMENT
_temp$1 = -1048						; size = 1024
_echoptr$2 = -24					; size = 4
_line$3 = -20						; size = 4
_pnumlines$4 = -16					; size = 4
_y$5 = -12						; size = 4
_i$6 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_HU_Drawer PROC						; COMDAT

; 987  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 04 00
	00		 sub	 esp, 1240		; 000004d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 988  : 	// draw chat string plus cursor
; 989  : 	if (chat_on)

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chat_on, 0
  0001d	74 06		 je	 SHORT $LN6@HU_Drawer

; 990  : 		HU_DrawChat();

  0001f	e8 00 00 00 00	 call	 _HU_DrawChat
  00024	90		 npad	 1
$LN6@HU_Drawer:

; 991  : 
; 992  : 	if (gamestate == GS_INTERMISSION || gamestate == GS_CUTSCENE || gamestate == GS_CREDITS)

  00025	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  0002c	74 12		 je	 SHORT $LN8@HU_Drawer
  0002e	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _gamestate, 7
  00035	74 09		 je	 SHORT $LN8@HU_Drawer
  00037	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR _gamestate, 10 ; 0000000aH
  0003e	75 05		 jne	 SHORT $LN7@HU_Drawer
$LN8@HU_Drawer:

; 993  : 		return;

  00040	e9 ba 01 00 00	 jmp	 $LN5@HU_Drawer
$LN7@HU_Drawer:

; 994  : 
; 995  : 	// draw multiplayer rankings
; 996  : 	if (hu_showscores)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  0004c	74 61		 je	 SHORT $LN14@HU_Drawer

; 997  : 	{
; 998  : 		if (gametype == GT_MATCH || gametype == GT_RACE || gametype == GT_TAG || gametype == GT_CTF

  0004e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00055	83 f8 01	 cmp	 eax, 1
  00058	74 24		 je	 SHORT $LN12@HU_Drawer
  0005a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00061	83 f8 02	 cmp	 eax, 2
  00064	74 18		 je	 SHORT $LN12@HU_Drawer
  00066	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0006d	83 f8 03	 cmp	 eax, 3
  00070	74 0c		 je	 SHORT $LN12@HU_Drawer
  00072	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00079	83 f8 04	 cmp	 eax, 4
  0007c	75 08		 jne	 SHORT $LN10@HU_Drawer
$LN12@HU_Drawer:

; 999  : #ifdef CHAOSISNOTDEADYET
; 1000 : 			|| gametype == GT_CHAOS
; 1001 : #endif
; 1002 : 			)
; 1003 : 			HU_DrawRankings();

  0007e	e8 00 00 00 00	 call	 _HU_DrawRankings
  00083	90		 npad	 1
  00084	eb 29		 jmp	 SHORT $LN14@HU_Drawer
$LN10@HU_Drawer:

; 1004 : 		else if (gametype == GT_COOP)

  00086	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0008d	85 c0		 test	 eax, eax
  0008f	75 1e		 jne	 SHORT $LN14@HU_Drawer

; 1005 : 		{
; 1006 : 			HU_DrawCoopOverlay();

  00091	e8 00 00 00 00	 call	 _HU_DrawCoopOverlay
  00096	90		 npad	 1

; 1007 : 
; 1008 : 			if (multiplayer || netgame)

  00097	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0009e	75 09		 jne	 SHORT $LN15@HU_Drawer
  000a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000a7	74 06		 je	 SHORT $LN14@HU_Drawer
$LN15@HU_Drawer:

; 1009 : 				HU_DrawRankings();

  000a9	e8 00 00 00 00	 call	 _HU_DrawRankings
  000ae	90		 npad	 1
$LN14@HU_Drawer:

; 1010 : 		}
; 1011 : 	}
; 1012 : 
; 1013 : 	// draw the crosshair, not when viewing demos nor with chasecam
; 1014 : 	if (!automapactive && cv_crosshair.value && !demoplayback && !cv_chasecam.value)

  000af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  000b6	75 21		 jne	 SHORT $LN16@HU_Drawer
  000b8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_crosshair+20, 0
  000bf	74 18		 je	 SHORT $LN16@HU_Drawer
  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  000c8	75 0f		 jne	 SHORT $LN16@HU_Drawer
  000ca	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  000d1	75 06		 jne	 SHORT $LN16@HU_Drawer

; 1015 : 		HU_DrawCrosshair();

  000d3	e8 00 00 00 00	 call	 _HU_DrawCrosshair
  000d8	90		 npad	 1
$LN16@HU_Drawer:

; 1016 : 
; 1017 : 	if (!automapactive && cv_crosshair2.value && !demoplayback && !cv_chasecam2.value)

  000d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  000e0	75 21		 jne	 SHORT $LN17@HU_Drawer
  000e2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_crosshair2+20, 0
  000e9	74 18		 je	 SHORT $LN17@HU_Drawer
  000eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  000f2	75 0f		 jne	 SHORT $LN17@HU_Drawer
  000f4	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  000fb	75 06		 jne	 SHORT $LN17@HU_Drawer

; 1018 : 		HU_DrawCrosshair2();

  000fd	e8 00 00 00 00	 call	 _HU_DrawCrosshair2
  00102	90		 npad	 1
$LN17@HU_Drawer:

; 1019 : 
; 1020 : 	if (cechotimer)

  00103	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cechotimer, 0
  0010a	0f 84 ef 00 00
	00		 je	 $LN5@HU_Drawer

; 1021 : 	{
; 1022 : 		INT32 i = 0;

  00110	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0

; 1023 : 		INT32 y = (BASEVIDHEIGHT/2)-4;

  00117	c7 45 f4 60 00
	00 00		 mov	 DWORD PTR _y$5[ebp], 96	; 00000060H

; 1024 : 		INT32 pnumlines = 0;

  0011e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pnumlines$4[ebp], 0

; 1025 : 		char *line;
; 1026 : 		char *echoptr;
; 1027 : 		char temp[1024];
; 1028 : 
; 1029 : 		cechotimer--;

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR _cechotimer
  0012a	83 e8 01	 sub	 eax, 1
  0012d	a3 00 00 00 00	 mov	 DWORD PTR _cechotimer, eax
$LN2@HU_Drawer:

; 1030 : 
; 1031 : 		while (cechotext[i] != '\0')

  00132	8b 45 f8	 mov	 eax, DWORD PTR _i$6[ebp]
  00135	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _cechotext[eax]
  0013c	85 c9		 test	 ecx, ecx
  0013e	74 29		 je	 SHORT $LN3@HU_Drawer

; 1032 : 		{
; 1033 : 			if (cechotext[i] == '\\' && pnumlines < MAXCECHOLINES)

  00140	8b 45 f8	 mov	 eax, DWORD PTR _i$6[ebp]
  00143	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _cechotext[eax]
  0014a	83 f9 5c	 cmp	 ecx, 92			; 0000005cH
  0014d	75 0f		 jne	 SHORT $LN19@HU_Drawer
  0014f	83 7d f0 10	 cmp	 DWORD PTR _pnumlines$4[ebp], 16 ; 00000010H
  00153	7d 09		 jge	 SHORT $LN19@HU_Drawer

; 1034 : 				pnumlines++;

  00155	8b 45 f0	 mov	 eax, DWORD PTR _pnumlines$4[ebp]
  00158	83 c0 01	 add	 eax, 1
  0015b	89 45 f0	 mov	 DWORD PTR _pnumlines$4[ebp], eax
$LN19@HU_Drawer:

; 1035 : 
; 1036 : 			i++;

  0015e	8b 45 f8	 mov	 eax, DWORD PTR _i$6[ebp]
  00161	83 c0 01	 add	 eax, 1
  00164	89 45 f8	 mov	 DWORD PTR _i$6[ebp], eax

; 1037 : 		}

  00167	eb c9		 jmp	 SHORT $LN2@HU_Drawer
$LN3@HU_Drawer:

; 1038 : 
; 1039 : 		y -= (pnumlines-1)*6;

  00169	8b 45 f0	 mov	 eax, DWORD PTR _pnumlines$4[ebp]
  0016c	83 e8 01	 sub	 eax, 1
  0016f	6b c8 06	 imul	 ecx, eax, 6
  00172	8b 55 f4	 mov	 edx, DWORD PTR _y$5[ebp]
  00175	2b d1		 sub	 edx, ecx
  00177	89 55 f4	 mov	 DWORD PTR _y$5[ebp], edx

; 1040 : 
; 1041 : 		strcpy(temp, cechotext);

  0017a	68 00 00 00 00	 push	 OFFSET _cechotext
  0017f	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _temp$1[ebp]
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 _strcpy
  0018b	83 c4 08	 add	 esp, 8

; 1042 : 
; 1043 : 		echoptr = &temp[0];

  0018e	b8 01 00 00 00	 mov	 eax, 1
  00193	6b c8 00	 imul	 ecx, eax, 0
  00196	8d 94 0d e8 fb
	ff ff		 lea	 edx, DWORD PTR _temp$1[ebp+ecx]
  0019d	89 55 e8	 mov	 DWORD PTR _echoptr$2[ebp], edx
$LN4@HU_Drawer:

; 1044 : 
; 1045 : 		while (*echoptr != '\0')

  001a0	8b 45 e8	 mov	 eax, DWORD PTR _echoptr$2[ebp]
  001a3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001a6	85 c9		 test	 ecx, ecx
  001a8	74 55		 je	 SHORT $LN5@HU_Drawer

; 1046 : 		{
; 1047 : 			line = strchr(echoptr, '\\');

  001aa	6a 5c		 push	 92			; 0000005cH
  001ac	8b 45 e8	 mov	 eax, DWORD PTR _echoptr$2[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 _strchr
  001b5	83 c4 08	 add	 esp, 8
  001b8	89 45 ec	 mov	 DWORD PTR _line$3[ebp], eax

; 1048 : 
; 1049 : 			if (line == NULL)

  001bb	83 7d ec 00	 cmp	 DWORD PTR _line$3[ebp], 0
  001bf	75 02		 jne	 SHORT $LN20@HU_Drawer

; 1050 : 				return;

  001c1	eb 3c		 jmp	 SHORT $LN5@HU_Drawer
$LN20@HU_Drawer:

; 1051 : 
; 1052 : 			*line = '\0';

  001c3	8b 45 ec	 mov	 eax, DWORD PTR _line$3[ebp]
  001c6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1053 : 
; 1054 : 			V_DrawCenteredString(BASEVIDWIDTH/2, y, cechoflags, echoptr);

  001c9	8b 45 e8	 mov	 eax, DWORD PTR _echoptr$2[ebp]
  001cc	50		 push	 eax
  001cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _cechoflags
  001d3	51		 push	 ecx
  001d4	8b 55 f4	 mov	 edx, DWORD PTR _y$5[ebp]
  001d7	52		 push	 edx
  001d8	68 a0 00 00 00	 push	 160			; 000000a0H
  001dd	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001e2	83 c4 10	 add	 esp, 16			; 00000010H

; 1055 : 			y += 12;

  001e5	8b 45 f4	 mov	 eax, DWORD PTR _y$5[ebp]
  001e8	83 c0 0c	 add	 eax, 12			; 0000000cH
  001eb	89 45 f4	 mov	 DWORD PTR _y$5[ebp], eax

; 1056 : 
; 1057 : 			echoptr = line;

  001ee	8b 45 ec	 mov	 eax, DWORD PTR _line$3[ebp]
  001f1	89 45 e8	 mov	 DWORD PTR _echoptr$2[ebp], eax

; 1058 : 			echoptr++;

  001f4	8b 45 e8	 mov	 eax, DWORD PTR _echoptr$2[ebp]
  001f7	83 c0 01	 add	 eax, 1
  001fa	89 45 e8	 mov	 DWORD PTR _echoptr$2[ebp], eax

; 1059 : 		}

  001fd	eb a1		 jmp	 SHORT $LN4@HU_Drawer
$LN5@HU_Drawer:

; 1060 : 	}
; 1061 : }

  001ff	5f		 pop	 edi
  00200	5e		 pop	 esi
  00201	5b		 pop	 ebx
  00202	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00205	33 cd		 xor	 ecx, ebp
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c3		 ret	 0
_HU_Drawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_Ticker
_TEXT	SEGMENT
tv86 = -68						; size = 4
_HU_Ticker PROC						; COMDAT

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 685  : 	if (dedicated)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00010	74 05		 je	 SHORT $LN2@HU_Ticker

; 686  : 		return;

  00012	e9 8c 00 00 00	 jmp	 $LN4@HU_Ticker
$LN2@HU_Ticker:

; 687  : 
; 688  : 	hu_tick++;

  00017	a0 00 00 00 00	 mov	 al, BYTE PTR _hu_tick
  0001c	04 01		 add	 al, 1
  0001e	a2 00 00 00 00	 mov	 BYTE PTR _hu_tick, al

; 689  : 	hu_tick &= 7; // currently only to blink chat input cursor

  00023	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _hu_tick
  0002a	83 e0 07	 and	 eax, 7
  0002d	a2 00 00 00 00	 mov	 BYTE PTR _hu_tick, al

; 690  : 
; 691  : 	if ((gamekeydown[gamecontrol[gc_scores][0]] || gamekeydown[gamecontrol[gc_scores][1]]))

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	6b c8 1f	 imul	 ecx, eax, 31
  0003a	ba 04 00 00 00	 mov	 edx, 4
  0003f	6b c2 00	 imul	 eax, edx, 0
  00042	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00049	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00050	85 d2		 test	 edx, edx
  00052	75 22		 jne	 SHORT $LN5@HU_Ticker
  00054	b8 08 00 00 00	 mov	 eax, 8
  00059	6b c8 1f	 imul	 ecx, eax, 31
  0005c	ba 04 00 00 00	 mov	 edx, 4
  00061	c1 e2 00	 shl	 edx, 0
  00064	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  0006b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00072	85 c9		 test	 ecx, ecx
  00074	74 23		 je	 SHORT $LN3@HU_Ticker
$LN5@HU_Ticker:

; 692  : 		hu_showscores = !chat_on;

  00076	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chat_on, 0
  0007d	75 09		 jne	 SHORT $LN7@HU_Ticker
  0007f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
  00086	eb 07		 jmp	 SHORT $LN8@HU_Ticker
$LN7@HU_Ticker:
  00088	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN8@HU_Ticker:
  0008f	8b 45 bc	 mov	 eax, DWORD PTR tv86[ebp]
  00092	a3 00 00 00 00	 mov	 DWORD PTR _hu_showscores, eax
  00097	eb 0a		 jmp	 SHORT $LN4@HU_Ticker
$LN3@HU_Ticker:

; 693  : 	else
; 694  : 		hu_showscores = false;

  00099	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _hu_showscores, 0
$LN4@HU_Ticker:

; 695  : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_HU_Ticker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_Responder
_TEXT	SEGMENT
tv70 = -84						; size = 4
tv77 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_c$ = -5						; size = 1
_eatkey$ = -4						; size = 4
_ev$ = 8						; size = 4
_HU_Responder PROC					; COMDAT

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 775  : 	static boolean shiftdown = false, altdown = false;
; 776  : 	boolean eatkey = false;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _eatkey$[ebp], 0

; 777  : 	UINT8 c;
; 778  : 
; 779  : 	if (ev->data1 == KEY_LSHIFT || ev->data1 == KEY_RSHIFT)

  00010	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00013	81 78 04 b6 00
	00 00		 cmp	 DWORD PTR [eax+4], 182	; 000000b6H
  0001a	74 0c		 je	 SHORT $LN4@HU_Respond
  0001c	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0001f	81 78 04 b7 00
	00 00		 cmp	 DWORD PTR [eax+4], 183	; 000000b7H
  00026	75 2d		 jne	 SHORT $LN2@HU_Respond
$LN4@HU_Respond:

; 780  : 	{
; 781  : 		shiftdown = (ev->type == ev_keydown);

  00028	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	75 09		 jne	 SHORT $LN23@HU_Respond
  00030	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00037	eb 07		 jmp	 SHORT $LN24@HU_Respond
$LN23@HU_Respond:
  00039	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN24@HU_Respond:
  00040	8b 4d ac	 mov	 ecx, DWORD PTR tv70[ebp]
  00043	89 0d 00 00 00
	00		 mov	 DWORD PTR ?shiftdown@?1??HU_Responder@@9@9, ecx

; 782  : 		return chat_on;

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _chat_on
  0004e	e9 3c 02 00 00	 jmp	 $LN1@HU_Respond

; 783  : 	}

  00053	eb 40		 jmp	 SHORT $LN5@HU_Respond
$LN2@HU_Respond:

; 784  : 	else if (ev->data1 == KEY_LALT || ev->data1 == KEY_RALT)

  00055	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00058	81 78 04 b8 00
	00 00		 cmp	 DWORD PTR [eax+4], 184	; 000000b8H
  0005f	74 0c		 je	 SHORT $LN6@HU_Respond
  00061	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00064	81 78 04 b9 00
	00 00		 cmp	 DWORD PTR [eax+4], 185	; 000000b9H
  0006b	75 28		 jne	 SHORT $LN5@HU_Respond
$LN6@HU_Respond:

; 785  : 	{
; 786  : 		altdown = (ev->type == ev_keydown);

  0006d	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00070	83 38 00	 cmp	 DWORD PTR [eax], 0
  00073	75 09		 jne	 SHORT $LN25@HU_Respond
  00075	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0007c	eb 07		 jmp	 SHORT $LN26@HU_Respond
$LN25@HU_Respond:
  0007e	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN26@HU_Respond:
  00085	8b 4d ac	 mov	 ecx, DWORD PTR tv77[ebp]
  00088	89 0d 00 00 00
	00		 mov	 DWORD PTR ?altdown@?1??HU_Responder@@9@9, ecx

; 787  : 		return false;

  0008e	33 c0		 xor	 eax, eax
  00090	e9 fa 01 00 00	 jmp	 $LN1@HU_Respond
$LN5@HU_Respond:

; 788  : 	}
; 789  : 
; 790  : 	if (ev->type != ev_keydown)

  00095	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00098	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009b	74 07		 je	 SHORT $LN7@HU_Respond

; 791  : 		return false;

  0009d	33 c0		 xor	 eax, eax
  0009f	e9 eb 01 00 00	 jmp	 $LN1@HU_Respond
$LN7@HU_Respond:

; 792  : 
; 793  : 	// only KeyDown events now...
; 794  : 
; 795  : 	if (!chat_on)

  000a4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chat_on, 0
  000ab	0f 85 55 01 00
	00		 jne	 $LN8@HU_Respond

; 796  : 	{
; 797  : 		// enter chat mode
; 798  : 		if ((ev->data1 == gamecontrol[gc_talkkey][0] || ev->data1 == gamecontrol[gc_talkkey][1])
; 799  : 			&& netgame && (!cv_mute.value || server || (adminplayer == consoleplayer)))

  000b1	b8 08 00 00 00	 mov	 eax, 8
  000b6	6b c8 1d	 imul	 ecx, eax, 29
  000b9	ba 04 00 00 00	 mov	 edx, 4
  000be	6b c2 00	 imul	 eax, edx, 0
  000c1	8b 55 08	 mov	 edx, DWORD PTR _ev$[ebp]
  000c4	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000c7	3b 94 01 00 00
	00 00		 cmp	 edx, DWORD PTR _gamecontrol[ecx+eax]
  000ce	74 1f		 je	 SHORT $LN11@HU_Respond
  000d0	b8 08 00 00 00	 mov	 eax, 8
  000d5	6b c8 1d	 imul	 ecx, eax, 29
  000d8	ba 04 00 00 00	 mov	 edx, 4
  000dd	c1 e2 00	 shl	 edx, 0
  000e0	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  000e3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e6	3b 84 11 00 00
	00 00		 cmp	 eax, DWORD PTR _gamecontrol[ecx+edx]
  000ed	75 6a		 jne	 SHORT $LN10@HU_Respond
$LN11@HU_Respond:
  000ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000f6	74 61		 je	 SHORT $LN10@HU_Respond
  000f8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  000ff	74 16		 je	 SHORT $LN12@HU_Respond
  00101	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00108	75 0d		 jne	 SHORT $LN12@HU_Respond
  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  0010f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00115	75 42		 jne	 SHORT $LN10@HU_Respond
$LN12@HU_Respond:

; 800  : 		{
; 801  : 			eatkey = chat_on = true;

  00117	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _chat_on, 1
  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR _chat_on
  00126	89 45 fc	 mov	 DWORD PTR _eatkey$[ebp], eax

; 802  : 			w_chat[0] = 0;

  00129	b8 01 00 00 00	 mov	 eax, 1
  0012e	6b c8 00	 imul	 ecx, eax, 0
  00131	89 4d b4	 mov	 DWORD PTR $T2[ebp], ecx
  00134	81 7d b4 e0 00
	00 00		 cmp	 DWORD PTR $T2[ebp], 224	; 000000e0H
  0013b	73 02		 jae	 SHORT $LN27@HU_Respond
  0013d	eb 06		 jmp	 SHORT $LN28@HU_Respond
$LN27@HU_Respond:
  0013f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00144	90		 npad	 1
$LN28@HU_Respond:
  00145	8b 55 b4	 mov	 edx, DWORD PTR $T2[ebp]
  00148	c6 82 00 00 00
	00 00		 mov	 BYTE PTR _w_chat[edx], 0

; 803  : 			teamtalk = false;

  0014f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _teamtalk, 0
$LN10@HU_Respond:

; 804  : 		}
; 805  : 		if ((ev->data1 == gamecontrol[gc_teamkey][0] || ev->data1 == gamecontrol[gc_teamkey][1])
; 806  : 			&& netgame && (!cv_mute.value || server || (adminplayer == consoleplayer)))

  00159	b8 08 00 00 00	 mov	 eax, 8
  0015e	6b c8 1e	 imul	 ecx, eax, 30
  00161	ba 04 00 00 00	 mov	 edx, 4
  00166	6b c2 00	 imul	 eax, edx, 0
  00169	8b 55 08	 mov	 edx, DWORD PTR _ev$[ebp]
  0016c	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0016f	3b 94 01 00 00
	00 00		 cmp	 edx, DWORD PTR _gamecontrol[ecx+eax]
  00176	74 1f		 je	 SHORT $LN14@HU_Respond
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	6b c8 1e	 imul	 ecx, eax, 30
  00180	ba 04 00 00 00	 mov	 edx, 4
  00185	c1 e2 00	 shl	 edx, 0
  00188	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0018b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018e	3b 84 11 00 00
	00 00		 cmp	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00195	75 6a		 jne	 SHORT $LN13@HU_Respond
$LN14@HU_Respond:
  00197	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0019e	74 61		 je	 SHORT $LN13@HU_Respond
  001a0	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  001a7	74 16		 je	 SHORT $LN15@HU_Respond
  001a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  001b0	75 0d		 jne	 SHORT $LN15@HU_Respond
  001b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  001b7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  001bd	75 42		 jne	 SHORT $LN13@HU_Respond
$LN15@HU_Respond:

; 807  : 		{
; 808  : 			eatkey = chat_on = true;

  001bf	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _chat_on, 1
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _chat_on
  001ce	89 45 fc	 mov	 DWORD PTR _eatkey$[ebp], eax

; 809  : 			w_chat[0] = 0;

  001d1	b8 01 00 00 00	 mov	 eax, 1
  001d6	6b c8 00	 imul	 ecx, eax, 0
  001d9	89 4d b0	 mov	 DWORD PTR $T1[ebp], ecx
  001dc	81 7d b0 e0 00
	00 00		 cmp	 DWORD PTR $T1[ebp], 224	; 000000e0H
  001e3	73 02		 jae	 SHORT $LN29@HU_Respond
  001e5	eb 06		 jmp	 SHORT $LN30@HU_Respond
$LN29@HU_Respond:
  001e7	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  001ec	90		 npad	 1
$LN30@HU_Respond:
  001ed	8b 55 b0	 mov	 edx, DWORD PTR $T1[ebp]
  001f0	c6 82 00 00 00
	00 00		 mov	 BYTE PTR _w_chat[edx], 0

; 810  : 			teamtalk = true;

  001f7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _teamtalk, 1
$LN13@HU_Respond:

; 811  : 		}
; 812  : 	}

  00201	e9 86 00 00 00	 jmp	 $LN9@HU_Respond
$LN8@HU_Respond:

; 813  : 	else
; 814  : 	{
; 815  : 		c = (UINT8)ev->data1;

  00206	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00209	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  0020c	88 4d fb	 mov	 BYTE PTR _c$[ebp], cl

; 816  : 
; 817  : 		// use console translations
; 818  : 		if (shiftdown)

  0020f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?shiftdown@?1??HU_Responder@@9@9, 0
  00216	74 10		 je	 SHORT $LN16@HU_Respond

; 819  : 			c = shiftxform[c];

  00218	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  0021c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shiftxform
  00222	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00225	88 55 fb	 mov	 BYTE PTR _c$[ebp], dl
$LN16@HU_Respond:

; 820  : 
; 821  : 		if (c == '"') // Graue 07-04-2004: quote marks mess it up

  00228	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  0022c	83 f8 22	 cmp	 eax, 34			; 00000022H
  0022f	75 04		 jne	 SHORT $LN17@HU_Respond

; 822  : 			c = '\'';

  00231	c6 45 fb 27	 mov	 BYTE PTR _c$[ebp], 39	; 00000027H
$LN17@HU_Respond:

; 823  : 
; 824  : 		eatkey = HU_keyInChatString(w_chat,c);

  00235	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  00239	50		 push	 eax
  0023a	68 00 00 00 00	 push	 OFFSET _w_chat
  0023f	e8 00 00 00 00	 call	 _HU_keyInChatString
  00244	83 c4 08	 add	 esp, 8
  00247	89 45 fc	 mov	 DWORD PTR _eatkey$[ebp], eax

; 825  : 		if (eatkey)

  0024a	83 7d fc 00	 cmp	 DWORD PTR _eatkey$[ebp], 0
  0024e	74 0d		 je	 SHORT $LN18@HU_Respond

; 826  : 			HU_queueChatChar(c);

  00250	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 _HU_queueChatChar
  0025a	83 c4 04	 add	 esp, 4
$LN18@HU_Respond:

; 827  : 		if (c == KEY_ENTER)

  0025d	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  00261	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00264	75 0c		 jne	 SHORT $LN19@HU_Respond

; 828  : 			chat_on = false;

  00266	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _chat_on, 0
  00270	eb 13		 jmp	 SHORT $LN21@HU_Respond
$LN19@HU_Respond:

; 829  : 		else if (c == KEY_ESCAPE)

  00272	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  00276	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00279	75 0a		 jne	 SHORT $LN21@HU_Respond

; 830  : 			chat_on = false;

  0027b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _chat_on, 0
$LN21@HU_Respond:

; 831  : 
; 832  : 		eatkey = true;

  00285	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _eatkey$[ebp], 1
$LN9@HU_Respond:

; 833  : 	}
; 834  : 
; 835  : 	return eatkey;

  0028c	8b 45 fc	 mov	 eax, DWORD PTR _eatkey$[ebp]
$LN1@HU_Respond:

; 836  : }

  0028f	5f		 pop	 edi
  00290	5e		 pop	 esi
  00291	5b		 pop	 ebx
  00292	8b e5		 mov	 esp, ebp
  00294	5d		 pop	 ebp
  00295	c3		 ret	 0
_HU_Responder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_Start
_TEXT	SEGMENT
_HU_Start PROC						; COMDAT

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 282  : 	if (headsupactive)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _headsupactive, 0
  00010	74 06		 je	 SHORT $LN2@HU_Start

; 283  : 		HU_Stop();

  00012	e8 00 00 00 00	 call	 _HU_Stop
  00017	90		 npad	 1
$LN2@HU_Start:

; 284  : 
; 285  : 	plr = &players[consoleplayer];

  00018	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00022	05 00 00 00 00	 add	 eax, OFFSET _players
  00027	a3 00 00 00 00	 mov	 DWORD PTR _plr, eax

; 286  : 
; 287  : 	headsupactive = true;

  0002c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _headsupactive, 1

; 288  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_HU_Start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_LoadGraphics
_TEXT	SEGMENT
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_buffer$ = -16						; size = 9
__$ArrayPad$ = -4					; size = 4
_HU_LoadGraphics PROC					; COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 172  : 	char buffer[9];
; 173  : 	INT32 i, j;
; 174  : 
; 175  : 	if (dedicated)

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  0001a	74 05		 je	 SHORT $LN17@HU_LoadGra

; 176  : 		return;

  0001c	e9 91 04 00 00	 jmp	 $LN1@HU_LoadGra
$LN17@HU_LoadGra:

; 177  : 
; 178  : 	// cache the heads-up font for entire game execution
; 179  : 	j = HU_FONTSTART;

  00021	c7 45 e8 21 00
	00 00		 mov	 DWORD PTR _j$[ebp], 33	; 00000021H

; 180  : 	for (i = 0; i < HU_FONTSIZE; i++)

  00028	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@HU_LoadGra
$LN2@HU_LoadGra:
  00031	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN4@HU_LoadGra:
  0003a	83 7d ec 5e	 cmp	 DWORD PTR _i$[ebp], 94	; 0000005eH
  0003e	7d 4c		 jge	 SHORT $LN3@HU_LoadGra

; 181  : 	{
; 182  : 		sprintf(buffer, "STCFN%.3d", j);

  00040	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  00043	50		 push	 eax
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_09LKADNJPK@STCFN?$CF?43d@
  00049	8d 4d f0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _sprintf
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 183  : 		j++;

  00055	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 e8	 mov	 DWORD PTR _j$[ebp], eax

; 184  : 		if (i >= HU_REALFONTSIZE && i != '~' - HU_FONTSTART && i != '`' - HU_FONTSTART) /// \note font end hack

  0005e	83 7d ec 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  00062	7c 0e		 jl	 SHORT $LN18@HU_LoadGra
  00064	83 7d ec 5d	 cmp	 DWORD PTR _i$[ebp], 93	; 0000005dH
  00068	74 08		 je	 SHORT $LN18@HU_LoadGra
  0006a	83 7d ec 3f	 cmp	 DWORD PTR _i$[ebp], 63	; 0000003fH
  0006e	74 02		 je	 SHORT $LN18@HU_LoadGra

; 185  : 			continue;

  00070	eb bf		 jmp	 SHORT $LN2@HU_LoadGra
$LN18@HU_LoadGra:

; 186  : 		hu_font[i] = (patch_t *)W_CachePatchName(buffer, PU_HUDGFX);

  00072	6a 04		 push	 4
  00074	8d 45 f0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _W_CachePatchName
  0007d	83 c4 08	 add	 esp, 8
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _hu_font[ecx*4], eax

; 187  : 	}

  0008a	eb a5		 jmp	 SHORT $LN2@HU_LoadGra
$LN3@HU_LoadGra:

; 188  : 
; 189  : 	// cache the level title font for entire game execution
; 190  : 	lt_font[0] = (patch_t *)W_CachePatchName("LTFNT039", PU_HUDGFX); /// \note fake start hack

  0008c	6a 04		 push	 4
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_08PHKEIKPI@LTFNT039@
  00093	e8 00 00 00 00	 call	 _W_CachePatchName
  00098	83 c4 08	 add	 esp, 8
  0009b	b9 04 00 00 00	 mov	 ecx, 4
  000a0	6b d1 00	 imul	 edx, ecx, 0
  000a3	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 191  : 
; 192  : 	// Number support
; 193  : 	lt_font[9] = (patch_t *)W_CachePatchName("LTFNT048", PU_HUDGFX);

  000a9	6a 04		 push	 4
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_08OLPAKNDM@LTFNT048@
  000b0	e8 00 00 00 00	 call	 _W_CachePatchName
  000b5	83 c4 08	 add	 esp, 8
  000b8	b9 04 00 00 00	 mov	 ecx, 4
  000bd	6b d1 09	 imul	 edx, ecx, 9
  000c0	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 194  : 	lt_font[10] = (patch_t *)W_CachePatchName("LTFNT049", PU_HUDGFX);

  000c6	6a 04		 push	 4
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_08PCOLJMHN@LTFNT049@
  000cd	e8 00 00 00 00	 call	 _W_CachePatchName
  000d2	83 c4 08	 add	 esp, 8
  000d5	b9 04 00 00 00	 mov	 ecx, 4
  000da	6b d1 0a	 imul	 edx, ecx, 10
  000dd	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 195  : 	lt_font[11] = (patch_t *)W_CachePatchName("LTFNT050", PU_HUDGFX);

  000e3	6a 04		 push	 4
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_08CCOLENAD@LTFNT050@
  000ea	e8 00 00 00 00	 call	 _W_CachePatchName
  000ef	83 c4 08	 add	 esp, 8
  000f2	b9 04 00 00 00	 mov	 ecx, 4
  000f7	6b d1 0b	 imul	 edx, ecx, 11
  000fa	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 196  : 	lt_font[12] = (patch_t *)W_CachePatchName("LTFNT051", PU_HUDGFX);

  00100	6a 04		 push	 4
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_08DLPAHMEC@LTFNT051@
  00107	e8 00 00 00 00	 call	 _W_CachePatchName
  0010c	83 c4 08	 add	 esp, 8
  0010f	b9 04 00 00 00	 mov	 ecx, 4
  00114	6b d1 0c	 imul	 edx, ecx, 12
  00117	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 197  : 	lt_font[13] = (patch_t *)W_CachePatchName("LTFNT052", PU_HUDGFX);

  0011d	6a 04		 push	 4
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_08BANNCPIB@LTFNT052@
  00124	e8 00 00 00 00	 call	 _W_CachePatchName
  00129	83 c4 08	 add	 esp, 8
  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 0d	 imul	 edx, ecx, 13
  00134	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 198  : 	lt_font[14] = (patch_t *)W_CachePatchName("LTFNT053", PU_HUDGFX);

  0013a	6a 04		 push	 4
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_08JMGBOMA@LTFNT053@
  00141	e8 00 00 00 00	 call	 _W_CachePatchName
  00146	83 c4 08	 add	 esp, 8
  00149	b9 04 00 00 00	 mov	 ecx, 4
  0014e	6b d1 0e	 imul	 edx, ecx, 14
  00151	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 199  : 	lt_font[15] = (patch_t *)W_CachePatchName("LTFNT054", PU_HUDGFX);

  00157	6a 04		 push	 4
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_08EGIHIIAH@LTFNT054@
  0015e	e8 00 00 00 00	 call	 _W_CachePatchName
  00163	83 c4 08	 add	 esp, 8
  00166	b9 04 00 00 00	 mov	 ecx, 4
  0016b	6b d1 0f	 imul	 edx, ecx, 15
  0016e	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 200  : 	lt_font[16] = (patch_t *)W_CachePatchName("LTFNT055", PU_HUDGFX);

  00174	6a 04		 push	 4
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_08FPJMLJEG@LTFNT055@
  0017b	e8 00 00 00 00	 call	 _W_CachePatchName
  00180	83 c4 08	 add	 esp, 8
  00183	b9 04 00 00 00	 mov	 ecx, 4
  00188	c1 e1 04	 shl	 ecx, 4
  0018b	89 81 00 00 00
	00		 mov	 DWORD PTR _lt_font[ecx], eax

; 201  : 	lt_font[17] = (patch_t *)W_CachePatchName("LTFNT056", PU_HUDGFX);

  00191	6a 04		 push	 4
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_08HELBOKIF@LTFNT056@
  00198	e8 00 00 00 00	 call	 _W_CachePatchName
  0019d	83 c4 08	 add	 esp, 8
  001a0	b9 04 00 00 00	 mov	 ecx, 4
  001a5	6b d1 11	 imul	 edx, ecx, 17
  001a8	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 202  : 	lt_font[18] = (patch_t *)W_CachePatchName("LTFNT057", PU_HUDGFX);

  001ae	6a 04		 push	 4
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_08GNKKNLME@LTFNT057@
  001b5	e8 00 00 00 00	 call	 _W_CachePatchName
  001ba	83 c4 08	 add	 esp, 8
  001bd	b9 04 00 00 00	 mov	 ecx, 4
  001c2	6b d1 12	 imul	 edx, ecx, 18
  001c5	89 82 00 00 00
	00		 mov	 DWORD PTR _lt_font[edx], eax

; 203  : 
; 204  : 	j = LT_REALFONTSTART;

  001cb	c7 45 e8 41 00
	00 00		 mov	 DWORD PTR _j$[ebp], 65	; 00000041H

; 205  : 	for (i = LT_REALFONTSTART - LT_FONTSTART; i < LT_FONTSIZE; i++)

  001d2	c7 45 ec 1a 00
	00 00		 mov	 DWORD PTR _i$[ebp], 26	; 0000001aH
  001d9	eb 09		 jmp	 SHORT $LN7@HU_LoadGra
$LN5@HU_LoadGra:
  001db	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  001de	83 c0 01	 add	 eax, 1
  001e1	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN7@HU_LoadGra:
  001e4	83 7d ec 34	 cmp	 DWORD PTR _i$[ebp], 52	; 00000034H
  001e8	7d 38		 jge	 SHORT $LN6@HU_LoadGra

; 206  : 	{
; 207  : 		sprintf(buffer, "LTFNT%.3d", j);

  001ea	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  001ed	50		 push	 eax
  001ee	68 00 00 00 00	 push	 OFFSET ??_C@_09LFOEGCGB@LTFNT?$CF?43d@
  001f3	8d 4d f0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  001f6	51		 push	 ecx
  001f7	e8 00 00 00 00	 call	 _sprintf
  001fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 		j++;

  001ff	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  00202	83 c0 01	 add	 eax, 1
  00205	89 45 e8	 mov	 DWORD PTR _j$[ebp], eax

; 209  : 		lt_font[i] = (patch_t *)W_CachePatchName(buffer, PU_HUDGFX);

  00208	6a 04		 push	 4
  0020a	8d 45 f0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 _W_CachePatchName
  00213	83 c4 08	 add	 esp, 8
  00216	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00219	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _lt_font[ecx*4], eax

; 210  : 	}

  00220	eb b9		 jmp	 SHORT $LN5@HU_LoadGra
$LN6@HU_LoadGra:

; 211  : 
; 212  : 	// cache the credits font for entire game execution (why not?)
; 213  : 	j = CRED_FONTSTART;

  00222	c7 45 e8 33 00
	00 00		 mov	 DWORD PTR _j$[ebp], 51	; 00000033H

; 214  : 	for (i = 0; i < CRED_FONTSIZE; i++)

  00229	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00230	eb 09		 jmp	 SHORT $LN10@HU_LoadGra
$LN8@HU_LoadGra:
  00232	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00235	83 c0 01	 add	 eax, 1
  00238	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN10@HU_LoadGra:
  0023b	83 7d ec 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  0023f	7d 38		 jge	 SHORT $LN9@HU_LoadGra

; 215  : 	{
; 216  : 		sprintf(buffer, "CRFNT%.3d", j);

  00241	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  00244	50		 push	 eax
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_09DHPFEAGG@CRFNT?$CF?43d@
  0024a	8d 4d f0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0024d	51		 push	 ecx
  0024e	e8 00 00 00 00	 call	 _sprintf
  00253	83 c4 0c	 add	 esp, 12			; 0000000cH

; 217  : 		j++;

  00256	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  00259	83 c0 01	 add	 eax, 1
  0025c	89 45 e8	 mov	 DWORD PTR _j$[ebp], eax

; 218  : 		cred_font[i] = (patch_t *)W_CachePatchName(buffer, PU_HUDGFX);

  0025f	6a 04		 push	 4
  00261	8d 45 f0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00264	50		 push	 eax
  00265	e8 00 00 00 00	 call	 _W_CachePatchName
  0026a	83 c4 08	 add	 esp, 8
  0026d	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00270	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _cred_font[ecx*4], eax

; 219  : 	}

  00277	eb b9		 jmp	 SHORT $LN8@HU_LoadGra
$LN9@HU_LoadGra:

; 220  : 
; 221  : 	//cache tiny numbers too!
; 222  : 	for (i = 0; i < 10; i++)

  00279	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00280	eb 09		 jmp	 SHORT $LN13@HU_LoadGra
$LN11@HU_LoadGra:
  00282	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00285	83 c0 01	 add	 eax, 1
  00288	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN13@HU_LoadGra:
  0028b	83 7d ec 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0028f	7d 2f		 jge	 SHORT $LN12@HU_LoadGra

; 223  : 	{
; 224  : 		sprintf(buffer, "TINYNUM%d", i);

  00291	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00294	50		 push	 eax
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_09MHCJPJLD@TINYNUM?$CFd@
  0029a	8d 4d f0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 _sprintf
  002a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 225  : 		tinynum[i] = (patch_t *) W_CachePatchName(buffer, PU_HUDGFX);

  002a6	6a 04		 push	 4
  002a8	8d 45 f0	 lea	 eax, DWORD PTR _buffer$[ebp]
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 _W_CachePatchName
  002b1	83 c4 08	 add	 esp, 8
  002b4	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  002b7	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _tinynum[ecx*4], eax

; 226  : 	}

  002be	eb c2		 jmp	 SHORT $LN11@HU_LoadGra
$LN12@HU_LoadGra:

; 227  : 
; 228  : 	// cache the crosshairs, don't bother to know which one is being used,
; 229  : 	// just cache all 3, they're so small anyway.
; 230  : 	for (i = 0; i < HU_CROSSHAIRS; i++)

  002c0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002c7	eb 09		 jmp	 SHORT $LN16@HU_LoadGra
$LN14@HU_LoadGra:
  002c9	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  002cc	83 c0 01	 add	 eax, 1
  002cf	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN16@HU_LoadGra:
  002d2	83 7d ec 03	 cmp	 DWORD PTR _i$[ebp], 3
  002d6	7d 32		 jge	 SHORT $LN15@HU_LoadGra

; 231  : 	{
; 232  : 		sprintf(buffer, "CROSHAI%c", '1'+i);

  002d8	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  002db	83 c0 31	 add	 eax, 49			; 00000031H
  002de	50		 push	 eax
  002df	68 00 00 00 00	 push	 OFFSET ??_C@_09MHAODDJB@CROSHAI?$CFc@
  002e4	8d 4d f0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  002e7	51		 push	 ecx
  002e8	e8 00 00 00 00	 call	 _sprintf
  002ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 233  : 		crosshair[i] = (patch_t *)W_CachePatchName(buffer, PU_HUDGFX);

  002f0	6a 04		 push	 4
  002f2	8d 45 f0	 lea	 eax, DWORD PTR _buffer$[ebp]
  002f5	50		 push	 eax
  002f6	e8 00 00 00 00	 call	 _W_CachePatchName
  002fb	83 c4 08	 add	 esp, 8
  002fe	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00301	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _crosshair[ecx*4], eax

; 234  : 	}

  00308	eb bf		 jmp	 SHORT $LN14@HU_LoadGra
$LN15@HU_LoadGra:

; 235  : 
; 236  : 	emblemicon = W_CachePatchName("EMBLICON", PU_HUDGFX);

  0030a	6a 04		 push	 4
  0030c	68 00 00 00 00	 push	 OFFSET ??_C@_08FNBLLBPP@EMBLICON@
  00311	e8 00 00 00 00	 call	 _W_CachePatchName
  00316	83 c4 08	 add	 esp, 8
  00319	a3 00 00 00 00	 mov	 DWORD PTR _emblemicon, eax

; 237  : 	emeraldpics[0] = W_CachePatchName("CHAOS1", PU_HUDGFX);

  0031e	6a 04		 push	 4
  00320	68 00 00 00 00	 push	 OFFSET ??_C@_06PKDIGJKN@CHAOS1@
  00325	e8 00 00 00 00	 call	 _W_CachePatchName
  0032a	83 c4 08	 add	 esp, 8
  0032d	b9 04 00 00 00	 mov	 ecx, 4
  00332	6b d1 00	 imul	 edx, ecx, 0
  00335	89 82 00 00 00
	00		 mov	 DWORD PTR _emeraldpics[edx], eax

; 238  : 	emeraldpics[1] = W_CachePatchName("CHAOS2", PU_HUDGFX);

  0033b	6a 04		 push	 4
  0033d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBBFDKGO@CHAOS2@
  00342	e8 00 00 00 00	 call	 _W_CachePatchName
  00347	83 c4 08	 add	 esp, 8
  0034a	b9 04 00 00 00	 mov	 ecx, 4
  0034f	c1 e1 00	 shl	 ecx, 0
  00352	89 81 00 00 00
	00		 mov	 DWORD PTR _emeraldpics[ecx], eax

; 239  : 	emeraldpics[2] = W_CachePatchName("CHAOS3", PU_HUDGFX);

  00358	6a 04		 push	 4
  0035a	68 00 00 00 00	 push	 OFFSET ??_C@_06MIAOALCP@CHAOS3@
  0035f	e8 00 00 00 00	 call	 _W_CachePatchName
  00364	83 c4 08	 add	 esp, 8
  00367	b9 04 00 00 00	 mov	 ecx, 4
  0036c	d1 e1		 shl	 ecx, 1
  0036e	89 81 00 00 00
	00		 mov	 DWORD PTR _emeraldpics[ecx], eax

; 240  : 	emeraldpics[3] = W_CachePatchName("CHAOS4", PU_HUDGFX);

  00374	6a 04		 push	 4
  00376	68 00 00 00 00	 push	 OFFSET ??_C@_06IHEPJNOI@CHAOS4@
  0037b	e8 00 00 00 00	 call	 _W_CachePatchName
  00380	83 c4 08	 add	 esp, 8
  00383	b9 04 00 00 00	 mov	 ecx, 4
  00388	6b d1 03	 imul	 edx, ecx, 3
  0038b	89 82 00 00 00
	00		 mov	 DWORD PTR _emeraldpics[edx], eax

; 241  : 	emeraldpics[4] = W_CachePatchName("CHAOS5", PU_HUDGFX);

  00391	6a 04		 push	 4
  00393	68 00 00 00 00	 push	 OFFSET ??_C@_06JOFEKMKJ@CHAOS5@
  00398	e8 00 00 00 00	 call	 _W_CachePatchName
  0039d	83 c4 08	 add	 esp, 8
  003a0	b9 04 00 00 00	 mov	 ecx, 4
  003a5	c1 e1 02	 shl	 ecx, 2
  003a8	89 81 00 00 00
	00		 mov	 DWORD PTR _emeraldpics[ecx], eax

; 242  : 	emeraldpics[5] = W_CachePatchName("CHAOS6", PU_HUDGFX);

  003ae	6a 04		 push	 4
  003b0	68 00 00 00 00	 push	 OFFSET ??_C@_06LFHJPPGK@CHAOS6@
  003b5	e8 00 00 00 00	 call	 _W_CachePatchName
  003ba	83 c4 08	 add	 esp, 8
  003bd	b9 04 00 00 00	 mov	 ecx, 4
  003c2	6b d1 05	 imul	 edx, ecx, 5
  003c5	89 82 00 00 00
	00		 mov	 DWORD PTR _emeraldpics[edx], eax

; 243  : 	emeraldpics[6] = W_CachePatchName("CHAOS7", PU_HUDGFX);

  003cb	6a 04		 push	 4
  003cd	68 00 00 00 00	 push	 OFFSET ??_C@_06KMGCMOCL@CHAOS7@
  003d2	e8 00 00 00 00	 call	 _W_CachePatchName
  003d7	83 c4 08	 add	 esp, 8
  003da	b9 04 00 00 00	 mov	 ecx, 4
  003df	6b d1 06	 imul	 edx, ecx, 6
  003e2	89 82 00 00 00
	00		 mov	 DWORD PTR _emeraldpics[edx], eax

; 244  : 	tinyemeraldpics[0] = W_CachePatchName("TEMER1", PU_HUDGFX);

  003e8	6a 04		 push	 4
  003ea	68 00 00 00 00	 push	 OFFSET ??_C@_06EPFALPGB@TEMER1@
  003ef	e8 00 00 00 00	 call	 _W_CachePatchName
  003f4	83 c4 08	 add	 esp, 8
  003f7	b9 04 00 00 00	 mov	 ecx, 4
  003fc	6b d1 00	 imul	 edx, ecx, 0
  003ff	89 82 00 00 00
	00		 mov	 DWORD PTR _tinyemeraldpics[edx], eax

; 245  : 	tinyemeraldpics[1] = W_CachePatchName("TEMER2", PU_HUDGFX);

  00405	6a 04		 push	 4
  00407	68 00 00 00 00	 push	 OFFSET ??_C@_06GEHNOMKC@TEMER2@
  0040c	e8 00 00 00 00	 call	 _W_CachePatchName
  00411	83 c4 08	 add	 esp, 8
  00414	b9 04 00 00 00	 mov	 ecx, 4
  00419	c1 e1 00	 shl	 ecx, 0
  0041c	89 81 00 00 00
	00		 mov	 DWORD PTR _tinyemeraldpics[ecx], eax

; 246  : 	tinyemeraldpics[2] = W_CachePatchName("TEMER3", PU_HUDGFX);

  00422	6a 04		 push	 4
  00424	68 00 00 00 00	 push	 OFFSET ??_C@_06HNGGNNOD@TEMER3@
  00429	e8 00 00 00 00	 call	 _W_CachePatchName
  0042e	83 c4 08	 add	 esp, 8
  00431	b9 04 00 00 00	 mov	 ecx, 4
  00436	d1 e1		 shl	 ecx, 1
  00438	89 81 00 00 00
	00		 mov	 DWORD PTR _tinyemeraldpics[ecx], eax

; 247  : 	tinyemeraldpics[3] = W_CachePatchName("TEMER4", PU_HUDGFX);

  0043e	6a 04		 push	 4
  00440	68 00 00 00 00	 push	 OFFSET ??_C@_06DCCHELCE@TEMER4@
  00445	e8 00 00 00 00	 call	 _W_CachePatchName
  0044a	83 c4 08	 add	 esp, 8
  0044d	b9 04 00 00 00	 mov	 ecx, 4
  00452	6b d1 03	 imul	 edx, ecx, 3
  00455	89 82 00 00 00
	00		 mov	 DWORD PTR _tinyemeraldpics[edx], eax

; 248  : 	tinyemeraldpics[4] = W_CachePatchName("TEMER5", PU_HUDGFX);

  0045b	6a 04		 push	 4
  0045d	68 00 00 00 00	 push	 OFFSET ??_C@_06CLDMHKGF@TEMER5@
  00462	e8 00 00 00 00	 call	 _W_CachePatchName
  00467	83 c4 08	 add	 esp, 8
  0046a	b9 04 00 00 00	 mov	 ecx, 4
  0046f	c1 e1 02	 shl	 ecx, 2
  00472	89 81 00 00 00
	00		 mov	 DWORD PTR _tinyemeraldpics[ecx], eax

; 249  : 	tinyemeraldpics[5] = W_CachePatchName("TEMER6", PU_HUDGFX);

  00478	6a 04		 push	 4
  0047a	68 00 00 00 00	 push	 OFFSET ??_C@_06BBCJKG@TEMER6@
  0047f	e8 00 00 00 00	 call	 _W_CachePatchName
  00484	83 c4 08	 add	 esp, 8
  00487	b9 04 00 00 00	 mov	 ecx, 4
  0048c	6b d1 05	 imul	 edx, ecx, 5
  0048f	89 82 00 00 00
	00		 mov	 DWORD PTR _tinyemeraldpics[edx], eax

; 250  : 	tinyemeraldpics[6] = W_CachePatchName("TEMER7", PU_HUDGFX);

  00495	6a 04		 push	 4
  00497	68 00 00 00 00	 push	 OFFSET ??_C@_06BJAKBIOH@TEMER7@
  0049c	e8 00 00 00 00	 call	 _W_CachePatchName
  004a1	83 c4 08	 add	 esp, 8
  004a4	b9 04 00 00 00	 mov	 ecx, 4
  004a9	6b d1 06	 imul	 edx, ecx, 6
  004ac	89 82 00 00 00
	00		 mov	 DWORD PTR _tinyemeraldpics[edx], eax
$LN1@HU_LoadGra:

; 251  : }

  004b2	5f		 pop	 edi
  004b3	5e		 pop	 esi
  004b4	5b		 pop	 ebx
  004b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b8	33 cd		 xor	 ecx, ebp
  004ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004bf	8b e5		 mov	 esp, ebp
  004c1	5d		 pop	 ebp
  004c2	c3		 ret	 0
_HU_LoadGraphics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\hu_stuff.c
;	COMDAT _HU_Init
_TEXT	SEGMENT
_HU_Init PROC						; COMDAT

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 258  : #ifndef NONET
; 259  : 	COM_AddCommand("say", Command_Say_f);

  00009	68 00 00 00 00	 push	 OFFSET _Command_Say_f
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_03BANJEMDJ@say@
  00013	e8 00 00 00 00	 call	 _COM_AddCommand
  00018	83 c4 08	 add	 esp, 8

; 260  : 	COM_AddCommand("sayto", Command_Sayto_f);

  0001b	68 00 00 00 00	 push	 OFFSET _Command_Sayto_f
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05MAHDCHDM@sayto@
  00025	e8 00 00 00 00	 call	 _COM_AddCommand
  0002a	83 c4 08	 add	 esp, 8

; 261  : 	COM_AddCommand("sayteam", Command_Sayteam_f);

  0002d	68 00 00 00 00	 push	 OFFSET _Command_Sayteam_f
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_07CAACFIHO@sayteam@
  00037	e8 00 00 00 00	 call	 _COM_AddCommand
  0003c	83 c4 08	 add	 esp, 8

; 262  : 	COM_AddCommand("csay", Command_CSay_f);

  0003f	68 00 00 00 00	 push	 OFFSET _Command_CSay_f
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_04CJCNGJKF@csay@
  00049	e8 00 00 00 00	 call	 _COM_AddCommand
  0004e	83 c4 08	 add	 esp, 8

; 263  : 	RegisterNetXCmd(XD_SAY, Got_Saycmd);

  00051	68 00 00 00 00	 push	 OFFSET _Got_Saycmd
  00056	6a 05		 push	 5
  00058	e8 00 00 00 00	 call	 _RegisterNetXCmd
  0005d	83 c4 08	 add	 esp, 8

; 264  : #endif
; 265  : 
; 266  : 	// set shift translation table
; 267  : 	shiftxform = english_shiftxform;

  00060	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _shiftxform, OFFSET _english_shiftxform

; 268  : 
; 269  : 	HU_LoadGraphics();

  0006a	e8 00 00 00 00	 call	 _HU_LoadGraphics
  0006f	90		 npad	 1

; 270  : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
_HU_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1779 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1780 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1458 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1460 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1391 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1397 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
