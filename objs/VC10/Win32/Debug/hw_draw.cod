; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\hw_draw.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_gr_patch_scalex:DWORD
COMM	_gr_patch_scaley:DWORD
_DATA	ENDS
PUBLIC	_HWR_clearAutomap
PUBLIC	_HWR_drawAMline
PUBLIC	_HWR_FadeScreenMenuBack
PUBLIC	_HWR_DrawConsoleBack
PUBLIC	_HWR_DrawViewBorder
PUBLIC	_HWR_DrawFlatFill
PUBLIC	_HWR_GetScreenshot
PUBLIC	_HWR_Screenshot
PUBLIC	_HWR_DrawPatch
PUBLIC	_HWR_DrawClippedPatch
PUBLIC	_HWR_DrawTranslucentPatch
PUBLIC	_HWR_DrawSmallPatch
PUBLIC	_HWR_DrawMappedPatch
PUBLIC	_HWR_DrawFill
PUBLIC	_HWR_DrawPic
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@4040000000000000
PUBLIC	__real@4050000000000000
PUBLIC	__real@4060000000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@4080000000000000
PUBLIC	__real@4090000000000000
PUBLIC	__real@40a0000000000000
PUBLIC	__real@42c80000
PUBLIC	__real@42fe0000
PUBLIC	__real@43200000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memset:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_close:PROC
EXTRN	_open:PROC
EXTRN	_write:PROC
EXTRN	_HWR_GetFlat:PROC
EXTRN	_HWR_GetPatch:PROC
EXTRN	_HWR_GetMappedPatch:PROC
EXTRN	_HWR_GetPic:PROC
EXTRN	_W_LumpLength:PROC
EXTRN	_W_CachePatchNum:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_vid:BYTE
EXTRN	_gr_viewwidth:DWORD
EXTRN	_gr_viewheight:DWORD
EXTRN	_gr_baseviewwindowy:DWORD
EXTRN	_gr_viewwindowx:DWORD
EXTRN	_hwdriver:BYTE
EXTRN	_viewborderlump:BYTE
EXTRN	_cv_grtranslucenthud:BYTE
EXTRN	_pLocalPalette:DWORD
EXTRN	_st_borderpatchnum:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43200000
CONST	SEGMENT
__real@43200000 DD 043200000r			; 160
CONST	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40a0000000000000
CONST	SEGMENT
__real@40a0000000000000 DQ 040a0000000000000r	; 2048
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@4080000000000000
CONST	SEGMENT
__real@4080000000000000 DQ 04080000000000000r	; 512
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@4050000000000000
CONST	SEGMENT
__real@4050000000000000 DQ 04050000000000000r	; 64
CONST	ENDS
;	COMDAT __real@4040000000000000
CONST	SEGMENT
__real@4040000000000000 DQ 04040000000000000r	; 32
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0f7H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02ecH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02adH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	03e3H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	03c3H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	03d6H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	03dfH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0417H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0241H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	025dH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	070H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _saveTGA
_TEXT	SEGMENT
_temp$1 = -37						; size = 1
_buf8$ = -36						; size = 4
_i$ = -32						; size = 4
_tga_hdr$ = -28						; size = 18
_fd$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_file_name$ = 8						; size = 4
_buffer$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_saveTGA PROC						; COMDAT

; 712  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 713  : 	INT32 fd;
; 714  : 	TGAHeader tga_hdr;
; 715  : 	INT32 i;
; 716  : 	UINT8 *buf8 = buffer;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  00016	89 45 dc	 mov	 DWORD PTR _buf8$[ebp], eax

; 717  : 
; 718  : 	fd = open(file_name, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY, 0666);

  00019	68 b6 01 00 00	 push	 438			; 000001b6H
  0001e	68 01 83 00 00	 push	 33537			; 00008301H
  00023	8b 45 08	 mov	 eax, DWORD PTR _file_name$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _open
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	89 45 f8	 mov	 DWORD PTR _fd$[ebp], eax

; 719  : 	if (fd < 0)

  00032	83 7d f8 00	 cmp	 DWORD PTR _fd$[ebp], 0
  00036	7d 07		 jge	 SHORT $LN5@saveTGA

; 720  : 		return false;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 b5 00 00 00	 jmp	 $LN1@saveTGA
$LN5@saveTGA:

; 721  : 
; 722  : 	memset(&tga_hdr, 0, sizeof (tga_hdr));

  0003f	6a 12		 push	 18			; 00000012H
  00041	6a 00		 push	 0
  00043	8d 45 e4	 lea	 eax, DWORD PTR _tga_hdr$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 723  : 	tga_hdr.width = SHORT(width);

  0004f	66 8b 45 10	 mov	 ax, WORD PTR _width$[ebp]
  00053	66 89 45 f0	 mov	 WORD PTR _tga_hdr$[ebp+12], ax

; 724  : 	tga_hdr.height = SHORT(height);

  00057	66 8b 45 14	 mov	 ax, WORD PTR _height$[ebp]
  0005b	66 89 45 f2	 mov	 WORD PTR _tga_hdr$[ebp+14], ax

; 725  : 	tga_hdr.image_pix_size = 24;

  0005f	c6 45 f4 18	 mov	 BYTE PTR _tga_hdr$[ebp+16], 24 ; 00000018H

; 726  : 	tga_hdr.image_type = 2;

  00063	c6 45 e6 02	 mov	 BYTE PTR _tga_hdr$[ebp+2], 2

; 727  : 	tga_hdr.image_descriptor = 32;

  00067	c6 45 f5 20	 mov	 BYTE PTR _tga_hdr$[ebp+17], 32 ; 00000020H

; 728  : 
; 729  : 	write(fd, &tga_hdr, sizeof (TGAHeader));

  0006b	6a 12		 push	 18			; 00000012H
  0006d	8d 45 e4	 lea	 eax, DWORD PTR _tga_hdr$[ebp]
  00070	50		 push	 eax
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _fd$[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _write
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 730  : 	// format to 888 BGR
; 731  : 	for (i = 0; i < width * height * 3; i+=3)

  0007d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00084	eb 09		 jmp	 SHORT $LN4@saveTGA
$LN2@saveTGA:
  00086	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  00089	83 c0 03	 add	 eax, 3
  0008c	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@saveTGA:
  0008f	8b 45 10	 mov	 eax, DWORD PTR _width$[ebp]
  00092	0f af 45 14	 imul	 eax, DWORD PTR _height$[ebp]
  00096	6b c8 03	 imul	 ecx, eax, 3
  00099	39 4d e0	 cmp	 DWORD PTR _i$[ebp], ecx
  0009c	7d 2a		 jge	 SHORT $LN3@saveTGA

; 732  : 	{
; 733  : 		const UINT8 temp = buf8[i];

  0009e	8b 45 dc	 mov	 eax, DWORD PTR _buf8$[ebp]
  000a1	03 45 e0	 add	 eax, DWORD PTR _i$[ebp]
  000a4	8a 08		 mov	 cl, BYTE PTR [eax]
  000a6	88 4d db	 mov	 BYTE PTR _temp$1[ebp], cl

; 734  : 		buf8[i] = buf8[i+2];

  000a9	8b 45 dc	 mov	 eax, DWORD PTR _buf8$[ebp]
  000ac	03 45 e0	 add	 eax, DWORD PTR _i$[ebp]
  000af	8b 4d dc	 mov	 ecx, DWORD PTR _buf8$[ebp]
  000b2	03 4d e0	 add	 ecx, DWORD PTR _i$[ebp]
  000b5	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  000b8	88 10		 mov	 BYTE PTR [eax], dl

; 735  : 		buf8[i+2] = temp;

  000ba	8b 45 dc	 mov	 eax, DWORD PTR _buf8$[ebp]
  000bd	03 45 e0	 add	 eax, DWORD PTR _i$[ebp]
  000c0	8a 4d db	 mov	 cl, BYTE PTR _temp$1[ebp]
  000c3	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 736  : 	}

  000c6	eb be		 jmp	 SHORT $LN2@saveTGA
$LN3@saveTGA:

; 737  : 	write(fd, buffer, width * height * 3);

  000c8	8b 45 10	 mov	 eax, DWORD PTR _width$[ebp]
  000cb	0f af 45 14	 imul	 eax, DWORD PTR _height$[ebp]
  000cf	6b c8 03	 imul	 ecx, eax, 3
  000d2	51		 push	 ecx
  000d3	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  000d6	52		 push	 edx
  000d7	8b 45 f8	 mov	 eax, DWORD PTR _fd$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _write
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 738  : 	close(fd);

  000e3	8b 45 f8	 mov	 eax, DWORD PTR _fd$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _close
  000ec	83 c4 04	 add	 esp, 4

; 739  : 	return true;

  000ef	b8 01 00 00 00	 mov	 eax, 1
$LN1@saveTGA:

; 740  : }

  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
_saveTGA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawPic
_TEXT	SEGMENT
tv76 = -180						; size = 4
tv93 = -180						; size = 4
tv136 = -180						; size = 4
tv153 = -180						; size = 4
_Surf$1 = -112						; size = 8
_patch$ = -104						; size = 4
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_lumpnum$ = 16						; size = 4
_HWR_DrawPic PROC					; COMDAT

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 299  : 	FOutVector      v[4];
; 300  : 	const GLPatch_t    *patch;
; 301  : 
; 302  : 	// make pic ready in hardware cache
; 303  : 	patch = HWR_GetPic(lumpnum);

  00016	8b 45 10	 mov	 eax, DWORD PTR _lumpnum$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _HWR_GetPic
  0001f	83 c4 04	 add	 esp, 4
  00022	89 45 98	 mov	 DWORD PTR _patch$[ebp], eax

; 304  : 
; 305  : //  3--2
; 306  : //  | /|
; 307  : //  |/ |
; 308  : //  0--1
; 309  : 
; 310  : 	v[0].x = v[3].x = 2.0f * (float)x/vid.width - 1;

  00025	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  0002a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00032	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  0003a	f3 0f 5e c1	 divss	 xmm0, xmm1
  0003e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00046	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv76[ebp], xmm0
  0004e	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00053	6b c8 03	 imul	 ecx, eax, 3
  00056	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv76[ebp]
  0005e	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  00064	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00069	6b c2 00	 imul	 eax, edx, 0
  0006c	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv76[ebp]
  00074	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0

; 311  : 	v[2].x = v[1].x = 2.0f * (float)(x + patch->width*vid.fdupx)/vid.width - 1;

  0007a	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  0007f	8b 45 98	 mov	 eax, DWORD PTR _patch$[ebp]
  00082	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00085	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00089	f3 0f 59 0d 28
	00 00 00	 mulss	 xmm1, DWORD PTR _vid+40
  00091	f3 0f 58 c1	 addss	 xmm0, xmm1
  00095	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0009d	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  000a5	f3 0f 5e c1	 divss	 xmm0, xmm1
  000a9	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000b1	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv93[ebp], xmm0
  000b9	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000be	c1 e2 00	 shl	 edx, 0
  000c1	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv93[ebp]
  000c9	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0
  000cf	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000d4	d1 e0		 shl	 eax, 1
  000d6	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv93[ebp]
  000de	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0

; 312  : 	v[0].y = v[1].y = 1.0f - 2.0f * (float)y/vid.height;

  000e4	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  000e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  000f1	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  000f9	f3 0f 5e c1	 divss	 xmm0, xmm1
  000fd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00105	f3 0f 5c c8	 subss	 xmm1, xmm0
  00109	f3 0f 11 8d 4c
	ff ff ff	 movss	 DWORD PTR tv136[ebp], xmm1
  00111	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00116	c1 e0 00	 shl	 eax, 0
  00119	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv136[ebp]
  00121	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0
  00127	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0012c	6b d1 00	 imul	 edx, ecx, 0
  0012f	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv136[ebp]
  00137	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0

; 313  : 	v[2].y = v[3].y = 1.0f - 2.0f * (float)(y + patch->height*vid.fdupy)/vid.height;

  0013d	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  00142	8b 45 98	 mov	 eax, DWORD PTR _patch$[ebp]
  00145	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00149	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  0014d	f3 0f 59 0d 2c
	00 00 00	 mulss	 xmm1, DWORD PTR _vid+44
  00155	f3 0f 58 c1	 addss	 xmm0, xmm1
  00159	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00161	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00169	f3 0f 5e c1	 divss	 xmm0, xmm1
  0016d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00175	f3 0f 5c c8	 subss	 xmm1, xmm0
  00179	f3 0f 11 8d 4c
	ff ff ff	 movss	 DWORD PTR tv153[ebp], xmm1
  00181	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00186	6b c2 03	 imul	 eax, edx, 3
  00189	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv153[ebp]
  00191	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0
  00197	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0019c	d1 e1		 shl	 ecx, 1
  0019e	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv153[ebp]
  001a6	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0

; 314  : 
; 315  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  001ac	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001b1	6b c8 03	 imul	 ecx, eax, 3
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001bc	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  001c2	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001c7	d1 e2		 shl	 edx, 1
  001c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001d1	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  001d7	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001dc	c1 e0 00	 shl	 eax, 0
  001df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001e7	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  001ed	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001f2	6b d1 00	 imul	 edx, ecx, 0
  001f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001fd	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 316  : 
; 317  : 	v[0].sow = v[3].sow =  0;

  00203	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00208	6b c8 03	 imul	 ecx, eax, 3
  0020b	0f 57 c0	 xorps	 xmm0, xmm0
  0020e	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0
  00214	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00219	6b c2 00	 imul	 eax, edx, 0
  0021c	0f 57 c0	 xorps	 xmm0, xmm0
  0021f	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 318  : 	v[2].sow = v[1].sow =  patch->max_s;

  00225	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0022a	c1 e0 00	 shl	 eax, 0
  0022d	8b 4d 98	 mov	 ecx, DWORD PTR _patch$[ebp]
  00230	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00233	89 54 05 ac	 mov	 DWORD PTR _v$[ebp+eax+16], edx
  00237	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0023c	c1 e0 00	 shl	 eax, 0
  0023f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00244	d1 e1		 shl	 ecx, 1
  00246	8b 54 05 ac	 mov	 edx, DWORD PTR _v$[ebp+eax+16]
  0024a	89 54 0d ac	 mov	 DWORD PTR _v$[ebp+ecx+16], edx

; 319  : 	v[0].tow = v[1].tow =  0;

  0024e	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00253	c1 e0 00	 shl	 eax, 0
  00256	0f 57 c0	 xorps	 xmm0, xmm0
  00259	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  0025f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00264	6b d1 00	 imul	 edx, ecx, 0
  00267	0f 57 c0	 xorps	 xmm0, xmm0
  0026a	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 320  : 	v[2].tow = v[3].tow =  patch->max_t;

  00270	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00275	6b c8 03	 imul	 ecx, eax, 3
  00278	8b 55 98	 mov	 edx, DWORD PTR _patch$[ebp]
  0027b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0027e	89 44 0d b0	 mov	 DWORD PTR _v$[ebp+ecx+20], eax
  00282	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00287	6b d1 03	 imul	 edx, ecx, 3
  0028a	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0028f	d1 e0		 shl	 eax, 1
  00291	8b 4c 15 b0	 mov	 ecx, DWORD PTR _v$[ebp+edx+20]
  00295	89 4c 05 b0	 mov	 DWORD PTR _v$[ebp+eax+20], ecx

; 321  : 
; 322  : 
; 323  : 	//Hurdler: Boris, the same comment as above... but maybe for pics
; 324  : 	// it not a problem since they don't have any transparent pixel
; 325  : 	// if I'm right !?
; 326  : 	// But then, the question is: why not 0 instead of PF_Masked ?
; 327  : 	// or maybe PF_Environment ??? (like what I said above)
; 328  : 	// BP: PF_Environment don't change anything ! and 0 is undifined
; 329  : 	if (cv_grtranslucenthud.value != 255)

  00299	81 3d 14 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR _cv_grtranslucenthud+20, 255 ; 000000ffH
  002a3	74 30		 je	 SHORT $LN2@HWR_DrawPi

; 330  : 	{
; 331  : 		FSurfaceInfo Surf;
; 332  : 		Surf.FlatColor.s.red = Surf.FlatColor.s.green = Surf.FlatColor.s.blue = 0xff;

  002a5	c6 45 96 ff	 mov	 BYTE PTR _Surf$1[ebp+6], 255 ; 000000ffH
  002a9	8a 45 96	 mov	 al, BYTE PTR _Surf$1[ebp+6]
  002ac	88 45 95	 mov	 BYTE PTR _Surf$1[ebp+5], al
  002af	8a 4d 95	 mov	 cl, BYTE PTR _Surf$1[ebp+5]
  002b2	88 4d 94	 mov	 BYTE PTR _Surf$1[ebp+4], cl

; 333  : 		Surf.FlatColor.s.alpha = (UINT8)cv_grtranslucenthud.value;

  002b5	a0 14 00 00 00	 mov	 al, BYTE PTR _cv_grtranslucenthud+20
  002ba	88 45 97	 mov	 BYTE PTR _Surf$1[ebp+7], al

; 334  : 		HWD.pfnDrawPolygon(&Surf, v, 4, PF_Modulated | BLENDMODE | PF_NoDepthTest | PF_Clip | PF_NoZClip);

  002bd	68 02 12 00 60	 push	 1610617346		; 60001202H
  002c2	6a 04		 push	 4
  002c4	8d 45 9c	 lea	 eax, DWORD PTR _v$[ebp]
  002c7	50		 push	 eax
  002c8	8d 4d 90	 lea	 ecx, DWORD PTR _Surf$1[ebp]
  002cb	51		 push	 ecx
  002cc	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  002d2	90		 npad	 1

; 335  : 	}

  002d3	eb 14		 jmp	 SHORT $LN3@HWR_DrawPi
$LN2@HWR_DrawPi:

; 336  : 	else
; 337  : 		HWD.pfnDrawPolygon(NULL, v, 4, BLENDMODE | PF_NoDepthTest | PF_Clip | PF_NoZClip);

  002d5	68 02 02 00 60	 push	 1610613250		; 60000202H
  002da	6a 04		 push	 4
  002dc	8d 45 9c	 lea	 eax, DWORD PTR _v$[ebp]
  002df	50		 push	 eax
  002e0	6a 00		 push	 0
  002e2	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  002e8	90		 npad	 1
$LN3@HWR_DrawPi:

; 338  : }

  002e9	5f		 pop	 edi
  002ea	5e		 pop	 esi
  002eb	5b		 pop	 ebx
  002ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ef	33 cd		 xor	 ecx, ebp
  002f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f6	8b e5		 mov	 esp, ebp
  002f8	5d		 pop	 ebp
  002f9	c3		 ret	 0
_HWR_DrawPic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawFill
_TEXT	SEGMENT
tv73 = -176						; size = 4
tv84 = -176						; size = 4
tv95 = -176						; size = 4
tv139 = -176						; size = 4
_Surf$ = -108						; size = 8
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_color$ = 24						; size = 4
_HWR_DrawFill PROC					; COMDAT

; 649  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 650  : 	FOutVector v[4];
; 651  : 	FSurfaceInfo Surf;
; 652  : 
; 653  : //  3--2
; 654  : //  | /|
; 655  : //  |/ |
; 656  : //  0--1
; 657  : 	v[0].x = v[3].x = (x - 160.0f)/160.0f;

  00016	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  0001b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43200000
  00023	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43200000
  0002b	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv73[ebp], xmm0
  00033	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00038	6b c8 03	 imul	 ecx, eax, 3
  0003b	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv73[ebp]
  00043	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  00049	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0004e	6b c2 00	 imul	 eax, edx, 0
  00051	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv73[ebp]
  00059	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0

; 658  : 	v[2].x = v[1].x = ((x+w) - 160.0f)/160.0f;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00062	03 45 10	 add	 eax, DWORD PTR _w$[ebp]
  00065	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00069	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43200000
  00071	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43200000
  00079	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv84[ebp], xmm0
  00081	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00086	c1 e1 00	 shl	 ecx, 0
  00089	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv84[ebp]
  00091	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  00097	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0009c	d1 e2		 shl	 edx, 1
  0009e	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv84[ebp]
  000a6	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 659  : 	v[0].y = v[1].y = -(y - 100.0f)/100.0f;

  000ac	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  000b1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000
  000b9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  000c8	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv95[ebp], xmm0
  000d0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000d5	c1 e0 00	 shl	 eax, 0
  000d8	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv95[ebp]
  000e0	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0
  000e6	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000eb	6b d1 00	 imul	 edx, ecx, 0
  000ee	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv95[ebp]
  000f6	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0

; 660  : 	v[2].y = v[3].y = -((y+h) - 100.0f)/100.0f;

  000fc	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000ff	03 45 14	 add	 eax, DWORD PTR _h$[ebp]
  00102	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00106	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000
  0010e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00115	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  0011d	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv139[ebp], xmm0
  00125	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0012a	6b d1 03	 imul	 edx, ecx, 3
  0012d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv139[ebp]
  00135	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  0013b	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00140	d1 e0		 shl	 eax, 1
  00142	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv139[ebp]
  0014a	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0

; 661  : 
; 662  : 	//Hurdler: do we still use this argb color? if not, we should remove it
; 663  : 	v[0].argb = v[1].argb = v[2].argb = v[3].argb = 0xff00ff00; //;

  00150	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00155	6b c8 03	 imul	 ecx, eax, 3
  00158	c7 44 0d a8 00
	ff 00 ff	 mov	 DWORD PTR _v$[ebp+ecx+12], -16711936 ; ff00ff00H
  00160	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00165	d1 e2		 shl	 edx, 1
  00167	c7 44 15 a8 00
	ff 00 ff	 mov	 DWORD PTR _v$[ebp+edx+12], -16711936 ; ff00ff00H
  0016f	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00174	c1 e0 00	 shl	 eax, 0
  00177	c7 44 05 a8 00
	ff 00 ff	 mov	 DWORD PTR _v$[ebp+eax+12], -16711936 ; ff00ff00H
  0017f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00184	6b d1 00	 imul	 edx, ecx, 0
  00187	c7 44 15 a8 00
	ff 00 ff	 mov	 DWORD PTR _v$[ebp+edx+12], -16711936 ; ff00ff00H

; 664  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  0018f	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00194	6b c8 03	 imul	 ecx, eax, 3
  00197	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0019f	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  001a5	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001aa	d1 e2		 shl	 edx, 1
  001ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001b4	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  001ba	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001bf	c1 e0 00	 shl	 eax, 0
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ca	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  001d0	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001d5	6b d1 00	 imul	 edx, ecx, 0
  001d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001e0	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 665  : 
; 666  : 	v[0].sow = v[3].sow = 0.0f;

  001e6	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001eb	6b c8 03	 imul	 ecx, eax, 3
  001ee	0f 57 c0	 xorps	 xmm0, xmm0
  001f1	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0
  001f7	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001fc	6b c2 00	 imul	 eax, edx, 0
  001ff	0f 57 c0	 xorps	 xmm0, xmm0
  00202	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 667  : 	v[2].sow = v[1].sow = 1.0f;

  00208	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0020d	c1 e0 00	 shl	 eax, 0
  00210	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00218	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0
  0021e	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00223	d1 e1		 shl	 ecx, 1
  00225	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0022d	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0

; 668  : 	v[0].tow = v[1].tow = 0.0f;

  00233	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00238	c1 e0 00	 shl	 eax, 0
  0023b	0f 57 c0	 xorps	 xmm0, xmm0
  0023e	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  00244	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00249	6b d1 00	 imul	 edx, ecx, 0
  0024c	0f 57 c0	 xorps	 xmm0, xmm0
  0024f	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 669  : 	v[2].tow = v[3].tow = 1.0f;

  00255	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0025a	6b c8 03	 imul	 ecx, eax, 3
  0025d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00265	f3 0f 11 44 0d
	b0		 movss	 DWORD PTR _v$[ebp+ecx+20], xmm0
  0026b	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00270	d1 e2		 shl	 edx, 1
  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0027a	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 670  : 
; 671  : 	Surf.FlatColor = V_GetColor(color);

  00280	8b 45 18	 mov	 eax, DWORD PTR _color$[ebp]
  00283	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00288	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _pLocalPalette
  0028e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00291	89 55 98	 mov	 DWORD PTR _Surf$[ebp+4], edx

; 672  : 
; 673  : 	HWD.pfnDrawPolygon(&Surf, v, 4,

  00294	68 00 32 00 00	 push	 12800			; 00003200H
  00299	6a 04		 push	 4
  0029b	8d 45 9c	 lea	 eax, DWORD PTR _v$[ebp]
  0029e	50		 push	 eax
  0029f	8d 4d 94	 lea	 ecx, DWORD PTR _Surf$[ebp]
  002a2	51		 push	 ecx
  002a3	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  002a9	90		 npad	 1

; 674  : 		PF_Modulated|PF_NoTexture|PF_NoDepthTest);
; 675  : }

  002aa	5f		 pop	 edi
  002ab	5e		 pop	 esi
  002ac	5b		 pop	 ebx
  002ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b0	33 cd		 xor	 ecx, ebp
  002b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b7	8b e5		 mov	 esp, ebp
  002b9	5d		 pop	 ebp
  002ba	c3		 ret	 0
_HWR_DrawFill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawMappedPatch
_TEXT	SEGMENT
tv90 = -196						; size = 4
tv142 = -196						; size = 4
tv159 = -196						; size = 4
tv179 = -196						; size = 4
_Surf$1 = -128						; size = 8
_pdupy$ = -120						; size = 4
_pdupx$ = -116						; size = 4
_sdupy$ = -112						; size = 4
_sdupx$ = -108						; size = 4
_flags$ = -104						; size = 4
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_gpatch$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_option$ = 20						; size = 4
_colormap$ = 24						; size = 4
_HWR_DrawMappedPatch PROC				; COMDAT

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 249  : 	FOutVector      v[4];
; 250  : 	FBITFIELD flags;
; 251  : 
; 252  : 	float sdupx = vid.fdupx*2;

  00016	f3 0f 10 05 28
	00 00 00	 movss	 xmm0, DWORD PTR _vid+40
  0001e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00026	f3 0f 11 45 94	 movss	 DWORD PTR _sdupx$[ebp], xmm0

; 253  : 	float sdupy = vid.fdupy*2;

  0002b	f3 0f 10 05 2c
	00 00 00	 movss	 xmm0, DWORD PTR _vid+44
  00033	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0003b	f3 0f 11 45 90	 movss	 DWORD PTR _sdupy$[ebp], xmm0

; 254  : 	float pdupx = vid.fdupx*2;

  00040	f3 0f 10 05 28
	00 00 00	 movss	 xmm0, DWORD PTR _vid+40
  00048	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00050	f3 0f 11 45 8c	 movss	 DWORD PTR _pdupx$[ebp], xmm0

; 255  : 	float pdupy = vid.fdupy*2;

  00055	f3 0f 10 05 2c
	00 00 00	 movss	 xmm0, DWORD PTR _vid+44
  0005d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00065	f3 0f 11 45 88	 movss	 DWORD PTR _pdupy$[ebp], xmm0

; 256  : 
; 257  : 	// make patch ready in hardware cache
; 258  : 	HWR_GetMappedPatch (gpatch, colormap);

  0006a	8b 45 18	 mov	 eax, DWORD PTR _colormap$[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _gpatch$[ebp]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 _HWR_GetMappedPatch
  00077	83 c4 08	 add	 esp, 8

; 259  : 
; 260  : 	if (option & V_NOSCALEPATCH)

  0007a	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0007d	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  00082	74 17		 je	 SHORT $LN2@HWR_DrawMa

; 261  : 		pdupx = pdupy = 2.0f;

  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008c	f3 0f 11 45 88	 movss	 DWORD PTR _pdupy$[ebp], xmm0
  00091	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _pdupy$[ebp]
  00096	f3 0f 11 45 8c	 movss	 DWORD PTR _pdupx$[ebp], xmm0
$LN2@HWR_DrawMa:

; 262  : 	if (option & V_NOSCALESTART)

  0009b	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0009e	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  000a3	74 17		 je	 SHORT $LN3@HWR_DrawMa

; 263  : 		sdupx = sdupy = 2.0f;

  000a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000ad	f3 0f 11 45 90	 movss	 DWORD PTR _sdupy$[ebp], xmm0
  000b2	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _sdupy$[ebp]
  000b7	f3 0f 11 45 94	 movss	 DWORD PTR _sdupx$[ebp], xmm0
$LN3@HWR_DrawMa:

; 264  : 
; 265  : 	v[0].x = v[3].x = (x*sdupx-gpatch->leftoffset*pdupx)/vid.width - 1;

  000bc	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  000c1	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _sdupx$[ebp]
  000c6	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  000c9	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  000cd	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  000d1	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _pdupx$[ebp]
  000d6	f3 0f 5c c1	 subss	 xmm0, xmm1
  000da	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  000e2	f3 0f 5e c1	 divss	 xmm0, xmm1
  000e6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000ee	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv90[ebp], xmm0
  000f6	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000fb	6b c2 03	 imul	 eax, edx, 3
  000fe	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv90[ebp]
  00106	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0
  0010c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00111	6b d1 00	 imul	 edx, ecx, 0
  00114	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv90[ebp]
  0011c	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 266  : 	v[2].x = v[1].x = (x*sdupx+(gpatch->width-gpatch->leftoffset)*pdupx)/vid.width - 1;

  00122	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  00127	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _sdupx$[ebp]
  0012c	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  0012f	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00132	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  00135	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00139	2b c8		 sub	 ecx, eax
  0013b	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  0013f	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _pdupx$[ebp]
  00144	f3 0f 58 c1	 addss	 xmm0, xmm1
  00148	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  00150	f3 0f 5e c1	 divss	 xmm0, xmm1
  00154	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0015c	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv142[ebp], xmm0
  00164	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00169	c1 e1 00	 shl	 ecx, 0
  0016c	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv142[ebp]
  00174	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  0017a	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0017f	d1 e2		 shl	 edx, 1
  00181	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv142[ebp]
  00189	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 267  : 	v[0].y = v[1].y = 1-(y*sdupy-gpatch->topoffset*pdupy)/vid.height;

  0018f	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  00194	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _sdupy$[ebp]
  00199	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  0019c	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  001a0	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  001a4	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _pdupy$[ebp]
  001a9	f3 0f 5c c1	 subss	 xmm0, xmm1
  001ad	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  001b5	f3 0f 5e c1	 divss	 xmm0, xmm1
  001b9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001c1	f3 0f 5c c8	 subss	 xmm1, xmm0
  001c5	f3 0f 11 8d 3c
	ff ff ff	 movss	 DWORD PTR tv159[ebp], xmm1
  001cd	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001d2	c1 e2 00	 shl	 edx, 0
  001d5	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv159[ebp]
  001dd	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  001e3	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001e8	6b c8 00	 imul	 ecx, eax, 0
  001eb	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv159[ebp]
  001f3	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0

; 268  : 	v[2].y = v[3].y = 1-(y*sdupy+(gpatch->height-gpatch->topoffset)*pdupy)/vid.height;

  001f9	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  001fe	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _sdupy$[ebp]
  00203	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  00206	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0020a	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  0020d	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  00211	2b c8		 sub	 ecx, eax
  00213	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00217	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _pdupy$[ebp]
  0021c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00220	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00228	f3 0f 5e c1	 divss	 xmm0, xmm1
  0022c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00234	f3 0f 5c c8	 subss	 xmm1, xmm0
  00238	f3 0f 11 8d 3c
	ff ff ff	 movss	 DWORD PTR tv179[ebp], xmm1
  00240	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00245	6b d1 03	 imul	 edx, ecx, 3
  00248	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv179[ebp]
  00250	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  00256	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0025b	d1 e0		 shl	 eax, 1
  0025d	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv179[ebp]
  00265	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0

; 269  : 
; 270  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  0026b	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00270	6b c8 03	 imul	 ecx, eax, 3
  00273	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0027b	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  00281	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00286	d1 e2		 shl	 edx, 1
  00288	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00290	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  00296	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0029b	c1 e0 00	 shl	 eax, 0
  0029e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002a6	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  002ac	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  002b1	6b d1 00	 imul	 edx, ecx, 0
  002b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002bc	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 271  : 
; 272  : 	v[0].sow = v[3].sow = 0.0f;

  002c2	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002c7	6b c8 03	 imul	 ecx, eax, 3
  002ca	0f 57 c0	 xorps	 xmm0, xmm0
  002cd	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0
  002d3	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  002d8	6b c2 00	 imul	 eax, edx, 0
  002db	0f 57 c0	 xorps	 xmm0, xmm0
  002de	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 273  : 	v[2].sow = v[1].sow = gpatch->max_s;

  002e4	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002e9	c1 e0 00	 shl	 eax, 0
  002ec	8b 4d 08	 mov	 ecx, DWORD PTR _gpatch$[ebp]
  002ef	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002f2	89 54 05 ac	 mov	 DWORD PTR _v$[ebp+eax+16], edx
  002f6	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002fb	c1 e0 00	 shl	 eax, 0
  002fe	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00303	d1 e1		 shl	 ecx, 1
  00305	8b 54 05 ac	 mov	 edx, DWORD PTR _v$[ebp+eax+16]
  00309	89 54 0d ac	 mov	 DWORD PTR _v$[ebp+ecx+16], edx

; 274  : 	v[0].tow = v[1].tow = 0.0f;

  0030d	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00312	c1 e0 00	 shl	 eax, 0
  00315	0f 57 c0	 xorps	 xmm0, xmm0
  00318	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  0031e	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00323	6b d1 00	 imul	 edx, ecx, 0
  00326	0f 57 c0	 xorps	 xmm0, xmm0
  00329	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 275  : 	v[2].tow = v[3].tow = gpatch->max_t;

  0032f	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00334	6b c8 03	 imul	 ecx, eax, 3
  00337	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  0033a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0033d	89 44 0d b0	 mov	 DWORD PTR _v$[ebp+ecx+20], eax
  00341	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00346	6b d1 03	 imul	 edx, ecx, 3
  00349	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0034e	d1 e0		 shl	 eax, 1
  00350	8b 4c 15 b0	 mov	 ecx, DWORD PTR _v$[ebp+edx+20]
  00354	89 4c 05 b0	 mov	 DWORD PTR _v$[ebp+eax+20], ecx

; 276  : 
; 277  : 	flags = BLENDMODE | PF_Clip | PF_NoZClip | PF_NoDepthTest;

  00358	c7 45 98 02 02
	00 60		 mov	 DWORD PTR _flags$[ebp], 1610613250 ; 60000202H

; 278  : 
; 279  : 	if (option & V_WRAPX)

  0035f	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00362	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00367	74 0b		 je	 SHORT $LN4@HWR_DrawMa

; 280  : 		flags |= PF_ForceWrapX;

  00369	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  0036c	0d 00 00 02 00	 or	 eax, 131072		; 00020000H
  00371	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax
$LN4@HWR_DrawMa:

; 281  : 	if (option & V_WRAPY)

  00374	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00377	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  0037c	74 0b		 je	 SHORT $LN5@HWR_DrawMa

; 282  : 		flags |= PF_ForceWrapY;

  0037e	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  00381	0d 00 00 04 00	 or	 eax, 262144		; 00040000H
  00386	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax
$LN5@HWR_DrawMa:

; 283  : 
; 284  : 	// clip it since it is used for bunny scroll in doom I
; 285  : 	if (option & V_TRANSLUCENT)

  00389	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0038c	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  00391	74 3a		 je	 SHORT $LN6@HWR_DrawMa

; 286  : 	{
; 287  : 		FSurfaceInfo Surf;
; 288  : 		Surf.FlatColor.s.red = Surf.FlatColor.s.green = Surf.FlatColor.s.blue = 0xff;

  00393	c6 45 86 ff	 mov	 BYTE PTR _Surf$1[ebp+6], 255 ; 000000ffH
  00397	8a 45 86	 mov	 al, BYTE PTR _Surf$1[ebp+6]
  0039a	88 45 85	 mov	 BYTE PTR _Surf$1[ebp+5], al
  0039d	8a 4d 85	 mov	 cl, BYTE PTR _Surf$1[ebp+5]
  003a0	88 4d 84	 mov	 BYTE PTR _Surf$1[ebp+4], cl

; 289  : 		Surf.FlatColor.s.alpha = (UINT8)cv_grtranslucenthud.value;

  003a3	a0 14 00 00 00	 mov	 al, BYTE PTR _cv_grtranslucenthud+20
  003a8	88 45 87	 mov	 BYTE PTR _Surf$1[ebp+7], al

; 290  : 		flags |= PF_Modulated;

  003ab	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  003ae	0d 00 10 00 00	 or	 eax, 4096		; 00001000H
  003b3	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax

; 291  : 		HWD.pfnDrawPolygon(&Surf, v, 4, flags);

  003b6	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  003b9	50		 push	 eax
  003ba	6a 04		 push	 4
  003bc	8d 4d 9c	 lea	 ecx, DWORD PTR _v$[ebp]
  003bf	51		 push	 ecx
  003c0	8d 55 80	 lea	 edx, DWORD PTR _Surf$1[ebp]
  003c3	52		 push	 edx
  003c4	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  003ca	90		 npad	 1

; 292  : 	}

  003cb	eb 13		 jmp	 SHORT $LN7@HWR_DrawMa
$LN6@HWR_DrawMa:

; 293  : 	else
; 294  : 		HWD.pfnDrawPolygon(NULL, v, 4, flags);

  003cd	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  003d0	50		 push	 eax
  003d1	6a 04		 push	 4
  003d3	8d 4d 9c	 lea	 ecx, DWORD PTR _v$[ebp]
  003d6	51		 push	 ecx
  003d7	6a 00		 push	 0
  003d9	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  003df	90		 npad	 1
$LN7@HWR_DrawMa:

; 295  : }

  003e0	5f		 pop	 edi
  003e1	5e		 pop	 esi
  003e2	5b		 pop	 ebx
  003e3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e6	33 cd		 xor	 ecx, ebp
  003e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ed	8b e5		 mov	 esp, ebp
  003ef	5d		 pop	 ebp
  003f0	c3		 ret	 0
_HWR_DrawMappedPatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawSmallPatch
_TEXT	SEGMENT
tv86 = -196						; size = 4
tv138 = -196						; size = 4
tv155 = -196						; size = 4
tv175 = -196						; size = 4
_Surf$1 = -128						; size = 8
_pdupy$ = -120						; size = 4
_pdupx$ = -116						; size = 4
_sdupy$ = -112						; size = 4
_sdupx$ = -108						; size = 4
_flags$ = -104						; size = 4
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_gpatch$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_option$ = 20						; size = 4
_colormap$ = 24						; size = 4
_HWR_DrawSmallPatch PROC				; COMDAT

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 196  : 	FOutVector      v[4];
; 197  : 	FBITFIELD flags;
; 198  : 
; 199  : 	float sdupx = vid.fdupx;

  00016	f3 0f 10 05 28
	00 00 00	 movss	 xmm0, DWORD PTR _vid+40
  0001e	f3 0f 11 45 94	 movss	 DWORD PTR _sdupx$[ebp], xmm0

; 200  : 	float sdupy = vid.fdupy;

  00023	f3 0f 10 05 2c
	00 00 00	 movss	 xmm0, DWORD PTR _vid+44
  0002b	f3 0f 11 45 90	 movss	 DWORD PTR _sdupy$[ebp], xmm0

; 201  : 	float pdupx = vid.fdupx;

  00030	f3 0f 10 05 28
	00 00 00	 movss	 xmm0, DWORD PTR _vid+40
  00038	f3 0f 11 45 8c	 movss	 DWORD PTR _pdupx$[ebp], xmm0

; 202  : 	float pdupy = vid.fdupy;

  0003d	f3 0f 10 05 2c
	00 00 00	 movss	 xmm0, DWORD PTR _vid+44
  00045	f3 0f 11 45 88	 movss	 DWORD PTR _pdupy$[ebp], xmm0

; 203  : 
; 204  : 	// make patch ready in hardware cache
; 205  : 	HWR_GetMappedPatch (gpatch, colormap);

  0004a	8b 45 18	 mov	 eax, DWORD PTR _colormap$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _gpatch$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _HWR_GetMappedPatch
  00057	83 c4 08	 add	 esp, 8

; 206  : 
; 207  : 	if (option & V_NOSCALEPATCH)

  0005a	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0005d	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  00062	74 17		 je	 SHORT $LN2@HWR_DrawSm

; 208  : 		pdupx = pdupy = 2.0f;

  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0006c	f3 0f 11 45 88	 movss	 DWORD PTR _pdupy$[ebp], xmm0
  00071	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _pdupy$[ebp]
  00076	f3 0f 11 45 8c	 movss	 DWORD PTR _pdupx$[ebp], xmm0
$LN2@HWR_DrawSm:

; 209  : 	if (option & V_NOSCALESTART)

  0007b	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0007e	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  00083	74 17		 je	 SHORT $LN3@HWR_DrawSm

; 210  : 		sdupx = sdupy = 2.0f;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008d	f3 0f 11 45 90	 movss	 DWORD PTR _sdupy$[ebp], xmm0
  00092	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _sdupy$[ebp]
  00097	f3 0f 11 45 94	 movss	 DWORD PTR _sdupx$[ebp], xmm0
$LN3@HWR_DrawSm:

; 211  : 
; 212  : 	v[0].x = v[3].x = (x*sdupx-gpatch->leftoffset*pdupx)/vid.width - 1;

  0009c	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  000a1	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _sdupx$[ebp]
  000a6	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  000a9	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  000ad	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  000b1	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _pdupx$[ebp]
  000b6	f3 0f 5c c1	 subss	 xmm0, xmm1
  000ba	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  000c2	f3 0f 5e c1	 divss	 xmm0, xmm1
  000c6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000ce	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv86[ebp], xmm0
  000d6	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000db	6b c2 03	 imul	 eax, edx, 3
  000de	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv86[ebp]
  000e6	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0
  000ec	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000f1	6b d1 00	 imul	 edx, ecx, 0
  000f4	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv86[ebp]
  000fc	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 213  : 	v[2].x = v[1].x = (x*sdupx+(gpatch->width-gpatch->leftoffset)*pdupx)/vid.width - 1;

  00102	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  00107	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _sdupx$[ebp]
  0010c	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  0010f	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00112	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  00115	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00119	2b c8		 sub	 ecx, eax
  0011b	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  0011f	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _pdupx$[ebp]
  00124	f3 0f 58 c1	 addss	 xmm0, xmm1
  00128	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  00130	f3 0f 5e c1	 divss	 xmm0, xmm1
  00134	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0013c	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv138[ebp], xmm0
  00144	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00149	c1 e1 00	 shl	 ecx, 0
  0014c	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv138[ebp]
  00154	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  0015a	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0015f	d1 e2		 shl	 edx, 1
  00161	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv138[ebp]
  00169	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 214  : 	v[0].y = v[1].y = 1-(y*sdupy-gpatch->topoffset*pdupy)/vid.height;

  0016f	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  00174	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _sdupy$[ebp]
  00179	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  0017c	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00180	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00184	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _pdupy$[ebp]
  00189	f3 0f 5c c1	 subss	 xmm0, xmm1
  0018d	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00195	f3 0f 5e c1	 divss	 xmm0, xmm1
  00199	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001a1	f3 0f 5c c8	 subss	 xmm1, xmm0
  001a5	f3 0f 11 8d 3c
	ff ff ff	 movss	 DWORD PTR tv155[ebp], xmm1
  001ad	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001b2	c1 e2 00	 shl	 edx, 0
  001b5	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv155[ebp]
  001bd	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  001c3	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001c8	6b c8 00	 imul	 ecx, eax, 0
  001cb	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv155[ebp]
  001d3	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0

; 215  : 	v[2].y = v[3].y = 1-(y*sdupy+(gpatch->height-gpatch->topoffset)*pdupy)/vid.height;

  001d9	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  001de	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _sdupy$[ebp]
  001e3	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  001e6	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  001ea	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  001ed	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  001f1	2b c8		 sub	 ecx, eax
  001f3	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  001f7	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _pdupy$[ebp]
  001fc	f3 0f 58 c1	 addss	 xmm0, xmm1
  00200	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00208	f3 0f 5e c1	 divss	 xmm0, xmm1
  0020c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00214	f3 0f 5c c8	 subss	 xmm1, xmm0
  00218	f3 0f 11 8d 3c
	ff ff ff	 movss	 DWORD PTR tv175[ebp], xmm1
  00220	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00225	6b d1 03	 imul	 edx, ecx, 3
  00228	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv175[ebp]
  00230	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  00236	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0023b	d1 e0		 shl	 eax, 1
  0023d	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv175[ebp]
  00245	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0

; 216  : 
; 217  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  0024b	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00250	6b c8 03	 imul	 ecx, eax, 3
  00253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0025b	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  00261	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00266	d1 e2		 shl	 edx, 1
  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00270	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  00276	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0027b	c1 e0 00	 shl	 eax, 0
  0027e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00286	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  0028c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00291	6b d1 00	 imul	 edx, ecx, 0
  00294	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0029c	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 218  : 
; 219  : 	v[0].sow = v[3].sow = 0.0f;

  002a2	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002a7	6b c8 03	 imul	 ecx, eax, 3
  002aa	0f 57 c0	 xorps	 xmm0, xmm0
  002ad	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0
  002b3	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  002b8	6b c2 00	 imul	 eax, edx, 0
  002bb	0f 57 c0	 xorps	 xmm0, xmm0
  002be	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 220  : 	v[2].sow = v[1].sow = gpatch->max_s;

  002c4	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002c9	c1 e0 00	 shl	 eax, 0
  002cc	8b 4d 08	 mov	 ecx, DWORD PTR _gpatch$[ebp]
  002cf	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002d2	89 54 05 ac	 mov	 DWORD PTR _v$[ebp+eax+16], edx
  002d6	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002db	c1 e0 00	 shl	 eax, 0
  002de	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  002e3	d1 e1		 shl	 ecx, 1
  002e5	8b 54 05 ac	 mov	 edx, DWORD PTR _v$[ebp+eax+16]
  002e9	89 54 0d ac	 mov	 DWORD PTR _v$[ebp+ecx+16], edx

; 221  : 	v[0].tow = v[1].tow = 0.0f;

  002ed	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002f2	c1 e0 00	 shl	 eax, 0
  002f5	0f 57 c0	 xorps	 xmm0, xmm0
  002f8	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  002fe	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00303	6b d1 00	 imul	 edx, ecx, 0
  00306	0f 57 c0	 xorps	 xmm0, xmm0
  00309	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 222  : 	v[2].tow = v[3].tow = gpatch->max_t;

  0030f	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00314	6b c8 03	 imul	 ecx, eax, 3
  00317	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  0031a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0031d	89 44 0d b0	 mov	 DWORD PTR _v$[ebp+ecx+20], eax
  00321	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00326	6b d1 03	 imul	 edx, ecx, 3
  00329	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0032e	d1 e0		 shl	 eax, 1
  00330	8b 4c 15 b0	 mov	 ecx, DWORD PTR _v$[ebp+edx+20]
  00334	89 4c 05 b0	 mov	 DWORD PTR _v$[ebp+eax+20], ecx

; 223  : 
; 224  : 	flags = BLENDMODE | PF_Clip | PF_NoZClip | PF_NoDepthTest;

  00338	c7 45 98 02 02
	00 60		 mov	 DWORD PTR _flags$[ebp], 1610613250 ; 60000202H

; 225  : 
; 226  : 	if (option & V_WRAPX)

  0033f	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00342	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00347	74 0b		 je	 SHORT $LN4@HWR_DrawSm

; 227  : 		flags |= PF_ForceWrapX;

  00349	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  0034c	0d 00 00 02 00	 or	 eax, 131072		; 00020000H
  00351	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax
$LN4@HWR_DrawSm:

; 228  : 	if (option & V_WRAPY)

  00354	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00357	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  0035c	74 0b		 je	 SHORT $LN5@HWR_DrawSm

; 229  : 		flags |= PF_ForceWrapY;

  0035e	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  00361	0d 00 00 04 00	 or	 eax, 262144		; 00040000H
  00366	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax
$LN5@HWR_DrawSm:

; 230  : 
; 231  : 	// clip it since it is used for bunny scroll in doom I
; 232  : 	if (option & V_TRANSLUCENT)

  00369	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0036c	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  00371	74 3a		 je	 SHORT $LN6@HWR_DrawSm

; 233  : 	{
; 234  : 		FSurfaceInfo Surf;
; 235  : 		Surf.FlatColor.s.red = Surf.FlatColor.s.green = Surf.FlatColor.s.blue = 0xff;

  00373	c6 45 86 ff	 mov	 BYTE PTR _Surf$1[ebp+6], 255 ; 000000ffH
  00377	8a 45 86	 mov	 al, BYTE PTR _Surf$1[ebp+6]
  0037a	88 45 85	 mov	 BYTE PTR _Surf$1[ebp+5], al
  0037d	8a 4d 85	 mov	 cl, BYTE PTR _Surf$1[ebp+5]
  00380	88 4d 84	 mov	 BYTE PTR _Surf$1[ebp+4], cl

; 236  : 		Surf.FlatColor.s.alpha = (UINT8)cv_grtranslucenthud.value;

  00383	a0 14 00 00 00	 mov	 al, BYTE PTR _cv_grtranslucenthud+20
  00388	88 45 87	 mov	 BYTE PTR _Surf$1[ebp+7], al

; 237  : 		flags |= PF_Modulated;

  0038b	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  0038e	0d 00 10 00 00	 or	 eax, 4096		; 00001000H
  00393	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax

; 238  : 		HWD.pfnDrawPolygon(&Surf, v, 4, flags);

  00396	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  00399	50		 push	 eax
  0039a	6a 04		 push	 4
  0039c	8d 4d 9c	 lea	 ecx, DWORD PTR _v$[ebp]
  0039f	51		 push	 ecx
  003a0	8d 55 80	 lea	 edx, DWORD PTR _Surf$1[ebp]
  003a3	52		 push	 edx
  003a4	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  003aa	90		 npad	 1

; 239  : 	}

  003ab	eb 13		 jmp	 SHORT $LN7@HWR_DrawSm
$LN6@HWR_DrawSm:

; 240  : 	else
; 241  : 		HWD.pfnDrawPolygon(NULL, v, 4, flags);

  003ad	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  003b0	50		 push	 eax
  003b1	6a 04		 push	 4
  003b3	8d 4d 9c	 lea	 ecx, DWORD PTR _v$[ebp]
  003b6	51		 push	 ecx
  003b7	6a 00		 push	 0
  003b9	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  003bf	90		 npad	 1
$LN7@HWR_DrawSm:

; 242  : }

  003c0	5f		 pop	 edi
  003c1	5e		 pop	 esi
  003c2	5b		 pop	 ebx
  003c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c6	33 cd		 xor	 ecx, ebp
  003c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003cd	8b e5		 mov	 esp, ebp
  003cf	5d		 pop	 ebp
  003d0	c3		 ret	 0
_HWR_DrawSmallPatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawTranslucentPatch
_TEXT	SEGMENT
tv89 = -196						; size = 4
tv141 = -196						; size = 4
tv158 = -196						; size = 4
tv178 = -196						; size = 4
_Surf$ = -128						; size = 8
_pdupy$ = -120						; size = 4
_pdupx$ = -116						; size = 4
_sdupy$ = -112						; size = 4
_sdupx$ = -108						; size = 4
_flags$ = -104						; size = 4
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_gpatch$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_option$ = 20						; size = 4
_HWR_DrawTranslucentPatch PROC				; COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 141  : 	FOutVector      v[4];
; 142  : 	FBITFIELD flags;
; 143  : 
; 144  : //  3--2
; 145  : //  | /|
; 146  : //  |/ |
; 147  : //  0--1
; 148  : 	float sdupx = vid.fdupx*2;

  00016	f3 0f 10 05 28
	00 00 00	 movss	 xmm0, DWORD PTR _vid+40
  0001e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00026	f3 0f 11 45 94	 movss	 DWORD PTR _sdupx$[ebp], xmm0

; 149  : 	float sdupy = vid.fdupy*2;

  0002b	f3 0f 10 05 2c
	00 00 00	 movss	 xmm0, DWORD PTR _vid+44
  00033	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0003b	f3 0f 11 45 90	 movss	 DWORD PTR _sdupy$[ebp], xmm0

; 150  : 	float pdupx = vid.fdupx*2;

  00040	f3 0f 10 05 28
	00 00 00	 movss	 xmm0, DWORD PTR _vid+40
  00048	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00050	f3 0f 11 45 8c	 movss	 DWORD PTR _pdupx$[ebp], xmm0

; 151  : 	float pdupy = vid.fdupy*2;

  00055	f3 0f 10 05 2c
	00 00 00	 movss	 xmm0, DWORD PTR _vid+44
  0005d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00065	f3 0f 11 45 88	 movss	 DWORD PTR _pdupy$[ebp], xmm0

; 152  : 	FSurfaceInfo Surf;
; 153  : 
; 154  : 	// make patch ready in hardware cache
; 155  : 	HWR_GetPatch (gpatch);

  0006a	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _HWR_GetPatch
  00073	83 c4 04	 add	 esp, 4

; 156  : 
; 157  : 	if (option & V_NOSCALEPATCH)

  00076	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00079	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  0007e	74 17		 je	 SHORT $LN2@HWR_DrawTr

; 158  : 		pdupx = pdupy = 2.0f;

  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00088	f3 0f 11 45 88	 movss	 DWORD PTR _pdupy$[ebp], xmm0
  0008d	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _pdupy$[ebp]
  00092	f3 0f 11 45 8c	 movss	 DWORD PTR _pdupx$[ebp], xmm0
$LN2@HWR_DrawTr:

; 159  : 	if (option & V_NOSCALESTART)

  00097	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0009a	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  0009f	74 17		 je	 SHORT $LN3@HWR_DrawTr

; 160  : 		sdupx = sdupy = 2.0f;

  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000a9	f3 0f 11 45 90	 movss	 DWORD PTR _sdupy$[ebp], xmm0
  000ae	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _sdupy$[ebp]
  000b3	f3 0f 11 45 94	 movss	 DWORD PTR _sdupx$[ebp], xmm0
$LN3@HWR_DrawTr:

; 161  : 
; 162  : 	v[0].x = v[3].x = (x*sdupx-gpatch->leftoffset*pdupx)/vid.width - 1;

  000b8	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  000bd	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _sdupx$[ebp]
  000c2	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  000c5	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  000c9	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  000cd	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _pdupx$[ebp]
  000d2	f3 0f 5c c1	 subss	 xmm0, xmm1
  000d6	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  000de	f3 0f 5e c1	 divss	 xmm0, xmm1
  000e2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000ea	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv89[ebp], xmm0
  000f2	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000f7	6b c2 03	 imul	 eax, edx, 3
  000fa	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv89[ebp]
  00102	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0
  00108	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0010d	6b d1 00	 imul	 edx, ecx, 0
  00110	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv89[ebp]
  00118	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 163  : 	v[2].x = v[1].x = (x*sdupx+(gpatch->width-gpatch->leftoffset)*pdupx)/vid.width - 1;

  0011e	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  00123	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _sdupx$[ebp]
  00128	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  0012b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0012e	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  00131	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00135	2b c8		 sub	 ecx, eax
  00137	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  0013b	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _pdupx$[ebp]
  00140	f3 0f 58 c1	 addss	 xmm0, xmm1
  00144	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  0014c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00150	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00158	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv141[ebp], xmm0
  00160	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00165	c1 e1 00	 shl	 ecx, 0
  00168	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv141[ebp]
  00170	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  00176	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0017b	d1 e2		 shl	 edx, 1
  0017d	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv141[ebp]
  00185	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 164  : 	v[0].y = v[1].y = 1-(y*sdupy-gpatch->topoffset*pdupy)/vid.height;

  0018b	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  00190	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _sdupy$[ebp]
  00195	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  00198	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0019c	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  001a0	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _pdupy$[ebp]
  001a5	f3 0f 5c c1	 subss	 xmm0, xmm1
  001a9	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  001b1	f3 0f 5e c1	 divss	 xmm0, xmm1
  001b5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001bd	f3 0f 5c c8	 subss	 xmm1, xmm0
  001c1	f3 0f 11 8d 3c
	ff ff ff	 movss	 DWORD PTR tv158[ebp], xmm1
  001c9	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001ce	c1 e2 00	 shl	 edx, 0
  001d1	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv158[ebp]
  001d9	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  001df	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001e4	6b c8 00	 imul	 ecx, eax, 0
  001e7	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv158[ebp]
  001ef	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0

; 165  : 	v[2].y = v[3].y = 1-(y*sdupy+(gpatch->height-gpatch->topoffset)*pdupy)/vid.height;

  001f5	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  001fa	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _sdupy$[ebp]
  001ff	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  00202	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00206	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  00209	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  0020d	2b c8		 sub	 ecx, eax
  0020f	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00213	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _pdupy$[ebp]
  00218	f3 0f 58 c1	 addss	 xmm0, xmm1
  0021c	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00224	f3 0f 5e c1	 divss	 xmm0, xmm1
  00228	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00230	f3 0f 5c c8	 subss	 xmm1, xmm0
  00234	f3 0f 11 8d 3c
	ff ff ff	 movss	 DWORD PTR tv178[ebp], xmm1
  0023c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00241	6b d1 03	 imul	 edx, ecx, 3
  00244	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv178[ebp]
  0024c	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  00252	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00257	d1 e0		 shl	 eax, 1
  00259	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv178[ebp]
  00261	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0

; 166  : 
; 167  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  00267	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0026c	6b c8 03	 imul	 ecx, eax, 3
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00277	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  0027d	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00282	d1 e2		 shl	 edx, 1
  00284	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0028c	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  00292	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00297	c1 e0 00	 shl	 eax, 0
  0029a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002a2	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  002a8	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  002ad	6b d1 00	 imul	 edx, ecx, 0
  002b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b8	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 168  : 
; 169  : 	v[0].sow = v[3].sow = 0.0f;

  002be	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002c3	6b c8 03	 imul	 ecx, eax, 3
  002c6	0f 57 c0	 xorps	 xmm0, xmm0
  002c9	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0
  002cf	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  002d4	6b c2 00	 imul	 eax, edx, 0
  002d7	0f 57 c0	 xorps	 xmm0, xmm0
  002da	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 170  : 	v[2].sow = v[1].sow = gpatch->max_s;

  002e0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002e5	c1 e0 00	 shl	 eax, 0
  002e8	8b 4d 08	 mov	 ecx, DWORD PTR _gpatch$[ebp]
  002eb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002ee	89 54 05 ac	 mov	 DWORD PTR _v$[ebp+eax+16], edx
  002f2	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002f7	c1 e0 00	 shl	 eax, 0
  002fa	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  002ff	d1 e1		 shl	 ecx, 1
  00301	8b 54 05 ac	 mov	 edx, DWORD PTR _v$[ebp+eax+16]
  00305	89 54 0d ac	 mov	 DWORD PTR _v$[ebp+ecx+16], edx

; 171  : 	v[0].tow = v[1].tow = 0.0f;

  00309	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0030e	c1 e0 00	 shl	 eax, 0
  00311	0f 57 c0	 xorps	 xmm0, xmm0
  00314	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  0031a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0031f	6b d1 00	 imul	 edx, ecx, 0
  00322	0f 57 c0	 xorps	 xmm0, xmm0
  00325	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 172  : 	v[2].tow = v[3].tow = gpatch->max_t;

  0032b	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00330	6b c8 03	 imul	 ecx, eax, 3
  00333	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  00336	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00339	89 44 0d b0	 mov	 DWORD PTR _v$[ebp+ecx+20], eax
  0033d	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00342	6b d1 03	 imul	 edx, ecx, 3
  00345	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0034a	d1 e0		 shl	 eax, 1
  0034c	8b 4c 15 b0	 mov	 ecx, DWORD PTR _v$[ebp+edx+20]
  00350	89 4c 05 b0	 mov	 DWORD PTR _v$[ebp+eax+20], ecx

; 173  : 
; 174  : 	flags = PF_Modulated | BLENDMODE | PF_Clip | PF_NoZClip | PF_NoDepthTest;

  00354	c7 45 98 02 12
	00 60		 mov	 DWORD PTR _flags$[ebp], 1610617346 ; 60001202H

; 175  : 
; 176  : 	if (option & V_WRAPX)

  0035b	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0035e	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00363	74 0b		 je	 SHORT $LN4@HWR_DrawTr

; 177  : 		flags |= PF_ForceWrapX;

  00365	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  00368	0d 00 00 02 00	 or	 eax, 131072		; 00020000H
  0036d	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax
$LN4@HWR_DrawTr:

; 178  : 	if (option & V_WRAPY)

  00370	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00373	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  00378	74 0b		 je	 SHORT $LN5@HWR_DrawTr

; 179  : 		flags |= PF_ForceWrapY;

  0037a	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  0037d	0d 00 00 04 00	 or	 eax, 262144		; 00040000H
  00382	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax
$LN5@HWR_DrawTr:

; 180  : 
; 181  : 	Surf.FlatColor.s.red = Surf.FlatColor.s.green = Surf.FlatColor.s.blue = 0xff;

  00385	c6 45 86 ff	 mov	 BYTE PTR _Surf$[ebp+6], 255 ; 000000ffH
  00389	8a 45 86	 mov	 al, BYTE PTR _Surf$[ebp+6]
  0038c	88 45 85	 mov	 BYTE PTR _Surf$[ebp+5], al
  0038f	8a 4d 85	 mov	 cl, BYTE PTR _Surf$[ebp+5]
  00392	88 4d 84	 mov	 BYTE PTR _Surf$[ebp+4], cl

; 182  : 	// Alam_GBC: There, you have translucent HW Draw, OK?
; 183  : 	if ((option & V_TRANSLUCENT) && cv_grtranslucenthud.value != 255)

  00395	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00398	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  0039d	74 1b		 je	 SHORT $LN6@HWR_DrawTr
  0039f	81 3d 14 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR _cv_grtranslucenthud+20, 255 ; 000000ffH
  003a9	74 0f		 je	 SHORT $LN6@HWR_DrawTr

; 184  : 	{
; 185  : 		Surf.FlatColor.s.alpha = (UINT8)(cv_grtranslucenthud.value/2);

  003ab	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_grtranslucenthud+20
  003b0	99		 cdq
  003b1	2b c2		 sub	 eax, edx
  003b3	d1 f8		 sar	 eax, 1
  003b5	88 45 87	 mov	 BYTE PTR _Surf$[ebp+7], al

; 186  : 	}

  003b8	eb 04		 jmp	 SHORT $LN7@HWR_DrawTr
$LN6@HWR_DrawTr:

; 187  : 	else
; 188  : 		Surf.FlatColor.s.alpha = 127;

  003ba	c6 45 87 7f	 mov	 BYTE PTR _Surf$[ebp+7], 127 ; 0000007fH
$LN7@HWR_DrawTr:

; 189  : 
; 190  : 	HWD.pfnDrawPolygon(&Surf, v, 4, flags);

  003be	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  003c1	50		 push	 eax
  003c2	6a 04		 push	 4
  003c4	8d 4d 9c	 lea	 ecx, DWORD PTR _v$[ebp]
  003c7	51		 push	 ecx
  003c8	8d 55 80	 lea	 edx, DWORD PTR _Surf$[ebp]
  003cb	52		 push	 edx
  003cc	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  003d2	90		 npad	 1

; 191  : }

  003d3	5f		 pop	 edi
  003d4	5e		 pop	 esi
  003d5	5b		 pop	 ebx
  003d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003d9	33 cd		 xor	 ecx, ebp
  003db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e0	8b e5		 mov	 esp, ebp
  003e2	5d		 pop	 ebp
  003e3	c3		 ret	 0
_HWR_DrawTranslucentPatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawClippedPatch
_TEXT	SEGMENT
_gpatch$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_option$ = 20						; size = 4
_HWR_DrawClippedPatch PROC				; COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 132  : 	// hardware clips the patch quite nicely anyway :)
; 133  : 	HWR_DrawPatch(gpatch, x, y, option); /// \todo do real cliping

  00009	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _HWR_DrawPatch
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 134  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_HWR_DrawClippedPatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawPatch
_TEXT	SEGMENT
tv89 = -196						; size = 4
tv141 = -196						; size = 4
tv158 = -196						; size = 4
tv178 = -196						; size = 4
_Surf$1 = -128						; size = 8
_pdupy$ = -120						; size = 4
_pdupx$ = -116						; size = 4
_sdupy$ = -112						; size = 4
_sdupx$ = -108						; size = 4
_flags$ = -104						; size = 4
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_gpatch$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_option$ = 20						; size = 4
_HWR_DrawPatch PROC					; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 78   : 	FOutVector v[4];
; 79   : 	FBITFIELD flags;
; 80   : 
; 81   : //  3--2
; 82   : //  | /|
; 83   : //  |/ |
; 84   : //  0--1
; 85   : 	float sdupx = vid.fdupx*2;

  00016	f3 0f 10 05 28
	00 00 00	 movss	 xmm0, DWORD PTR _vid+40
  0001e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00026	f3 0f 11 45 94	 movss	 DWORD PTR _sdupx$[ebp], xmm0

; 86   : 	float sdupy = vid.fdupy*2;

  0002b	f3 0f 10 05 2c
	00 00 00	 movss	 xmm0, DWORD PTR _vid+44
  00033	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0003b	f3 0f 11 45 90	 movss	 DWORD PTR _sdupy$[ebp], xmm0

; 87   : 	float pdupx = vid.fdupx*2;

  00040	f3 0f 10 05 28
	00 00 00	 movss	 xmm0, DWORD PTR _vid+40
  00048	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00050	f3 0f 11 45 8c	 movss	 DWORD PTR _pdupx$[ebp], xmm0

; 88   : 	float pdupy = vid.fdupy*2;

  00055	f3 0f 10 05 2c
	00 00 00	 movss	 xmm0, DWORD PTR _vid+44
  0005d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00065	f3 0f 11 45 88	 movss	 DWORD PTR _pdupy$[ebp], xmm0

; 89   : 
; 90   : 	// make patch ready in hardware cache
; 91   : 	HWR_GetPatch(gpatch);

  0006a	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _HWR_GetPatch
  00073	83 c4 04	 add	 esp, 4

; 92   : 
; 93   : 	if (option & V_NOSCALEPATCH)

  00076	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00079	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  0007e	74 17		 je	 SHORT $LN2@HWR_DrawPa

; 94   : 		pdupx = pdupy = 2.0f;

  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00088	f3 0f 11 45 88	 movss	 DWORD PTR _pdupy$[ebp], xmm0
  0008d	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _pdupy$[ebp]
  00092	f3 0f 11 45 8c	 movss	 DWORD PTR _pdupx$[ebp], xmm0
$LN2@HWR_DrawPa:

; 95   : 	if (option & V_NOSCALESTART)

  00097	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0009a	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  0009f	74 17		 je	 SHORT $LN3@HWR_DrawPa

; 96   : 		sdupx = sdupy = 2.0f;

  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000a9	f3 0f 11 45 90	 movss	 DWORD PTR _sdupy$[ebp], xmm0
  000ae	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _sdupy$[ebp]
  000b3	f3 0f 11 45 94	 movss	 DWORD PTR _sdupx$[ebp], xmm0
$LN3@HWR_DrawPa:

; 97   : 
; 98   : 	v[0].x = v[3].x = (x*sdupx-gpatch->leftoffset*pdupx)/vid.width - 1;

  000b8	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  000bd	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _sdupx$[ebp]
  000c2	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  000c5	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  000c9	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  000cd	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _pdupx$[ebp]
  000d2	f3 0f 5c c1	 subss	 xmm0, xmm1
  000d6	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  000de	f3 0f 5e c1	 divss	 xmm0, xmm1
  000e2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000ea	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv89[ebp], xmm0
  000f2	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000f7	6b c2 03	 imul	 eax, edx, 3
  000fa	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv89[ebp]
  00102	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0
  00108	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0010d	6b d1 00	 imul	 edx, ecx, 0
  00110	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv89[ebp]
  00118	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 99   : 	v[2].x = v[1].x = (x*sdupx+(gpatch->width-gpatch->leftoffset)*pdupx)/vid.width - 1;

  0011e	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  00123	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _sdupx$[ebp]
  00128	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  0012b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0012e	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  00131	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00135	2b c8		 sub	 ecx, eax
  00137	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  0013b	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _pdupx$[ebp]
  00140	f3 0f 58 c1	 addss	 xmm0, xmm1
  00144	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  0014c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00150	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00158	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv141[ebp], xmm0
  00160	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00165	c1 e1 00	 shl	 ecx, 0
  00168	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv141[ebp]
  00170	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  00176	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0017b	d1 e2		 shl	 edx, 1
  0017d	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv141[ebp]
  00185	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 100  : 	v[0].y = v[1].y = 1-(y*sdupy-gpatch->topoffset*pdupy)/vid.height;

  0018b	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  00190	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _sdupy$[ebp]
  00195	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  00198	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0019c	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  001a0	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _pdupy$[ebp]
  001a5	f3 0f 5c c1	 subss	 xmm0, xmm1
  001a9	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  001b1	f3 0f 5e c1	 divss	 xmm0, xmm1
  001b5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001bd	f3 0f 5c c8	 subss	 xmm1, xmm0
  001c1	f3 0f 11 8d 3c
	ff ff ff	 movss	 DWORD PTR tv158[ebp], xmm1
  001c9	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001ce	c1 e2 00	 shl	 edx, 0
  001d1	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv158[ebp]
  001d9	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  001df	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001e4	6b c8 00	 imul	 ecx, eax, 0
  001e7	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv158[ebp]
  001ef	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0

; 101  : 	v[2].y = v[3].y = 1-(y*sdupy+(gpatch->height-gpatch->topoffset)*pdupy)/vid.height;

  001f5	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  001fa	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _sdupy$[ebp]
  001ff	8b 45 08	 mov	 eax, DWORD PTR _gpatch$[ebp]
  00202	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00206	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  00209	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  0020d	2b c8		 sub	 ecx, eax
  0020f	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00213	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _pdupy$[ebp]
  00218	f3 0f 58 c1	 addss	 xmm0, xmm1
  0021c	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00224	f3 0f 5e c1	 divss	 xmm0, xmm1
  00228	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00230	f3 0f 5c c8	 subss	 xmm1, xmm0
  00234	f3 0f 11 8d 3c
	ff ff ff	 movss	 DWORD PTR tv178[ebp], xmm1
  0023c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00241	6b d1 03	 imul	 edx, ecx, 3
  00244	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv178[ebp]
  0024c	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  00252	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00257	d1 e0		 shl	 eax, 1
  00259	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv178[ebp]
  00261	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0

; 102  : 
; 103  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  00267	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0026c	6b c8 03	 imul	 ecx, eax, 3
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00277	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  0027d	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00282	d1 e2		 shl	 edx, 1
  00284	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0028c	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  00292	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00297	c1 e0 00	 shl	 eax, 0
  0029a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002a2	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  002a8	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  002ad	6b d1 00	 imul	 edx, ecx, 0
  002b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b8	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 104  : 
; 105  : 	v[0].sow = v[3].sow = 0.0f;

  002be	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002c3	6b c8 03	 imul	 ecx, eax, 3
  002c6	0f 57 c0	 xorps	 xmm0, xmm0
  002c9	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0
  002cf	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  002d4	6b c2 00	 imul	 eax, edx, 0
  002d7	0f 57 c0	 xorps	 xmm0, xmm0
  002da	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 106  : 	v[2].sow = v[1].sow = gpatch->max_s;

  002e0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002e5	c1 e0 00	 shl	 eax, 0
  002e8	8b 4d 08	 mov	 ecx, DWORD PTR _gpatch$[ebp]
  002eb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002ee	89 54 05 ac	 mov	 DWORD PTR _v$[ebp+eax+16], edx
  002f2	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002f7	c1 e0 00	 shl	 eax, 0
  002fa	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  002ff	d1 e1		 shl	 ecx, 1
  00301	8b 54 05 ac	 mov	 edx, DWORD PTR _v$[ebp+eax+16]
  00305	89 54 0d ac	 mov	 DWORD PTR _v$[ebp+ecx+16], edx

; 107  : 	v[0].tow = v[1].tow = 0.0f;

  00309	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0030e	c1 e0 00	 shl	 eax, 0
  00311	0f 57 c0	 xorps	 xmm0, xmm0
  00314	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  0031a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0031f	6b d1 00	 imul	 edx, ecx, 0
  00322	0f 57 c0	 xorps	 xmm0, xmm0
  00325	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 108  : 	v[2].tow = v[3].tow = gpatch->max_t;

  0032b	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00330	6b c8 03	 imul	 ecx, eax, 3
  00333	8b 55 08	 mov	 edx, DWORD PTR _gpatch$[ebp]
  00336	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00339	89 44 0d b0	 mov	 DWORD PTR _v$[ebp+ecx+20], eax
  0033d	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00342	6b d1 03	 imul	 edx, ecx, 3
  00345	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0034a	d1 e0		 shl	 eax, 1
  0034c	8b 4c 15 b0	 mov	 ecx, DWORD PTR _v$[ebp+edx+20]
  00350	89 4c 05 b0	 mov	 DWORD PTR _v$[ebp+eax+20], ecx

; 109  : 
; 110  : 	flags = BLENDMODE|PF_Clip|PF_NoZClip|PF_NoDepthTest;

  00354	c7 45 98 02 02
	00 60		 mov	 DWORD PTR _flags$[ebp], 1610613250 ; 60000202H

; 111  : 
; 112  : 	if (option & V_WRAPX)

  0035b	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  0035e	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00363	74 0b		 je	 SHORT $LN4@HWR_DrawPa

; 113  : 		flags |= PF_ForceWrapX;

  00365	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  00368	0d 00 00 02 00	 or	 eax, 131072		; 00020000H
  0036d	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax
$LN4@HWR_DrawPa:

; 114  : 	if (option & V_WRAPY)

  00370	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00373	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  00378	74 0b		 je	 SHORT $LN5@HWR_DrawPa

; 115  : 		flags |= PF_ForceWrapY;

  0037a	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  0037d	0d 00 00 04 00	 or	 eax, 262144		; 00040000H
  00382	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax
$LN5@HWR_DrawPa:

; 116  : 
; 117  : 	// clip it since it is used for bunny scroll in doom I
; 118  : 	if (option & V_TRANSLUCENT)

  00385	8b 45 14	 mov	 eax, DWORD PTR _option$[ebp]
  00388	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  0038d	74 3a		 je	 SHORT $LN6@HWR_DrawPa

; 119  : 	{
; 120  : 		FSurfaceInfo Surf;
; 121  : 		Surf.FlatColor.s.red = Surf.FlatColor.s.green = Surf.FlatColor.s.blue = 0xff;

  0038f	c6 45 86 ff	 mov	 BYTE PTR _Surf$1[ebp+6], 255 ; 000000ffH
  00393	8a 45 86	 mov	 al, BYTE PTR _Surf$1[ebp+6]
  00396	88 45 85	 mov	 BYTE PTR _Surf$1[ebp+5], al
  00399	8a 4d 85	 mov	 cl, BYTE PTR _Surf$1[ebp+5]
  0039c	88 4d 84	 mov	 BYTE PTR _Surf$1[ebp+4], cl

; 122  : 		Surf.FlatColor.s.alpha = (UINT8)cv_grtranslucenthud.value;

  0039f	a0 14 00 00 00	 mov	 al, BYTE PTR _cv_grtranslucenthud+20
  003a4	88 45 87	 mov	 BYTE PTR _Surf$1[ebp+7], al

; 123  : 		flags |= PF_Modulated;

  003a7	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  003aa	0d 00 10 00 00	 or	 eax, 4096		; 00001000H
  003af	89 45 98	 mov	 DWORD PTR _flags$[ebp], eax

; 124  : 		HWD.pfnDrawPolygon(&Surf, v, 4, flags);

  003b2	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  003b5	50		 push	 eax
  003b6	6a 04		 push	 4
  003b8	8d 4d 9c	 lea	 ecx, DWORD PTR _v$[ebp]
  003bb	51		 push	 ecx
  003bc	8d 55 80	 lea	 edx, DWORD PTR _Surf$1[ebp]
  003bf	52		 push	 edx
  003c0	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  003c6	90		 npad	 1

; 125  : 	}

  003c7	eb 13		 jmp	 SHORT $LN7@HWR_DrawPa
$LN6@HWR_DrawPa:

; 126  : 	else
; 127  : 		HWD.pfnDrawPolygon(NULL, v, 4, flags);

  003c9	8b 45 98	 mov	 eax, DWORD PTR _flags$[ebp]
  003cc	50		 push	 eax
  003cd	6a 04		 push	 4
  003cf	8d 4d 9c	 lea	 ecx, DWORD PTR _v$[ebp]
  003d2	51		 push	 ecx
  003d3	6a 00		 push	 0
  003d5	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  003db	90		 npad	 1
$LN7@HWR_DrawPa:

; 128  : }

  003dc	5f		 pop	 edi
  003dd	5e		 pop	 esi
  003de	5b		 pop	 ebx
  003df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e2	33 cd		 xor	 ecx, ebp
  003e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e9	8b e5		 mov	 esp, ebp
  003eb	5d		 pop	 ebp
  003ec	c3		 ret	 0
_HWR_DrawPatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_Screenshot
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_ret$ = -4						; size = 4
_lbmname$ = 8						; size = 4
_HWR_Screenshot PROC					; COMDAT

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  : 	boolean ret;
; 761  : 	UINT8 *buf = malloc(vid.width * vid.height * 3 * sizeof (*buf));

  00009	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  0000e	0f af 05 10 00
	00 00		 imul	 eax, DWORD PTR _vid+16
  00015	6b c8 03	 imul	 ecx, eax, 3
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _malloc
  0001e	83 c4 04	 add	 esp, 4
  00021	89 45 f8	 mov	 DWORD PTR _buf$[ebp], eax

; 762  : 
; 763  : 	if (!buf)

  00024	83 7d f8 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00028	75 04		 jne	 SHORT $LN2@HWR_Screen

; 764  : 		return false;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 53		 jmp	 SHORT $LN1@HWR_Screen
$LN2@HWR_Screen:

; 765  : 
; 766  : 	// returns 24bit 888 RGB
; 767  : 	HWD.pfnReadRect(0, 0, vid.width, vid.height, vid.width * 3, (void *)buf);

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _buf$[ebp]
  00031	50		 push	 eax
  00032	6b 0d 0c 00 00
	00 03		 imul	 ecx, DWORD PTR _vid+12, 3
  00039	51		 push	 ecx
  0003a	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _vid+16
  00040	52		 push	 edx
  00041	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00046	50		 push	 eax
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	ff 15 20 00 00
	00		 call	 DWORD PTR _hwdriver+32
  00051	90		 npad	 1

; 768  : 
; 769  : #ifdef USE_PNG
; 770  : 	ret = M_SavePNG(lbmname, buf, vid.width, vid.height, NULL);
; 771  : #else
; 772  : 	ret = saveTGA(lbmname, buf, vid.width, vid.height);

  00052	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00057	50		 push	 eax
  00058	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0005e	51		 push	 ecx
  0005f	8b 55 f8	 mov	 edx, DWORD PTR _buf$[ebp]
  00062	52		 push	 edx
  00063	8b 45 08	 mov	 eax, DWORD PTR _lbmname$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _saveTGA
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 773  : #endif
; 774  : 	free(buf);

  00072	8b 45 f8	 mov	 eax, DWORD PTR _buf$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _free
  0007b	83 c4 04	 add	 esp, 4

; 775  : 	return ret;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
$LN1@HWR_Screen:

; 776  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_HWR_Screenshot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_GetScreenshot
_TEXT	SEGMENT
_buf$ = -4						; size = 4
_HWR_GetScreenshot PROC					; COMDAT

; 748  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 749  : 	UINT8 *buf = malloc(vid.width * vid.height * 3 * sizeof (*buf));

  00009	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  0000e	0f af 05 10 00
	00 00		 imul	 eax, DWORD PTR _vid+16
  00015	6b c8 03	 imul	 ecx, eax, 3
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _malloc
  0001e	83 c4 04	 add	 esp, 4
  00021	89 45 fc	 mov	 DWORD PTR _buf$[ebp], eax

; 750  : 
; 751  : 	if (!buf)

  00024	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00028	75 04		 jne	 SHORT $LN2@HWR_GetScr

; 752  : 		return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 27		 jmp	 SHORT $LN1@HWR_GetScr
$LN2@HWR_GetScr:

; 753  : 	// returns 24bit 888 RGB
; 754  : 	HWD.pfnReadRect(0, 0, vid.width, vid.height, vid.width * 3, (void *)buf);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _buf$[ebp]
  00031	50		 push	 eax
  00032	6b 0d 0c 00 00
	00 03		 imul	 ecx, DWORD PTR _vid+12, 3
  00039	51		 push	 ecx
  0003a	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _vid+16
  00040	52		 push	 edx
  00041	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00046	50		 push	 eax
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	ff 15 20 00 00
	00		 call	 DWORD PTR _hwdriver+32
  00051	90		 npad	 1

; 755  : 	return buf;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _buf$[ebp]
$LN1@HWR_GetScr:

; 756  : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_HWR_GetScreenshot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawFlatFill
_TEXT	SEGMENT
tv66 = -184						; size = 4
tv83 = -184						; size = 4
tv94 = -184						; size = 4
tv137 = -184						; size = 4
tv149 = -184						; size = 4
tv172 = -184						; size = 4
tv187 = -184						; size = 4
tv198 = -184						; size = 4
tv213 = -184						; size = 4
_len$ = -116						; size = 4
_flatflag$ = -112					; size = 4
_dflatsize$ = -108					; size = 8
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_flatlumpnum$ = 24					; size = 4
_HWR_DrawFlatFill PROC					; COMDAT

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 350  : 	FOutVector  v[4];
; 351  : 	double dflatsize;
; 352  : 	INT32 flatflag;
; 353  : 	const size_t len = W_LumpLength(flatlumpnum);

  00016	8b 45 18	 mov	 eax, DWORD PTR _flatlumpnum$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _W_LumpLength
  0001f	83 c4 04	 add	 esp, 4
  00022	89 45 8c	 mov	 DWORD PTR _len$[ebp], eax

; 354  : 
; 355  : 	switch (len)

  00025	8b 45 8c	 mov	 eax, DWORD PTR _len$[ebp]
  00028	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  0002e	81 bd 48 ff ff
	ff 00 00 04 00	 cmp	 DWORD PTR tv66[ebp], 262144 ; 00040000H
  00038	77 3d		 ja	 SHORT $LN12@HWR_DrawFl
  0003a	81 bd 48 ff ff
	ff 00 00 04 00	 cmp	 DWORD PTR tv66[ebp], 262144 ; 00040000H
  00044	74 7d		 je	 SHORT $LN6@HWR_DrawFl
  00046	81 bd 48 ff ff
	ff 00 04 00 00	 cmp	 DWORD PTR tv66[ebp], 1024 ; 00000400H
  00050	0f 84 af 00 00
	00		 je	 $LN9@HWR_DrawFl
  00056	81 bd 48 ff ff
	ff 00 40 00 00	 cmp	 DWORD PTR tv66[ebp], 16384 ; 00004000H
  00060	0f 84 89 00 00
	00		 je	 $LN8@HWR_DrawFl
  00066	81 bd 48 ff ff
	ff 00 00 01 00	 cmp	 DWORD PTR tv66[ebp], 65536 ; 00010000H
  00070	74 67		 je	 SHORT $LN7@HWR_DrawFl
  00072	e9 a4 00 00 00	 jmp	 $LN10@HWR_DrawFl
$LN12@HWR_DrawFl:
  00077	81 bd 48 ff ff
	ff 00 00 10 00	 cmp	 DWORD PTR tv66[ebp], 1048576 ; 00100000H
  00081	74 2a		 je	 SHORT $LN5@HWR_DrawFl
  00083	81 bd 48 ff ff
	ff 00 00 40 00	 cmp	 DWORD PTR tv66[ebp], 4194304 ; 00400000H
  0008d	74 05		 je	 SHORT $LN4@HWR_DrawFl
  0008f	e9 87 00 00 00	 jmp	 $LN10@HWR_DrawFl
$LN4@HWR_DrawFl:

; 356  : 	{
; 357  : 		case 4194304: // 2048x2048 lump
; 358  : 			dflatsize = 2048.0f;

  00094	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40a0000000000000
  0009c	f2 0f 11 45 94	 movsd	 QWORD PTR _dflatsize$[ebp], xmm0

; 359  : 			flatflag = 2047;

  000a1	c7 45 90 ff 07
	00 00		 mov	 DWORD PTR _flatflag$[ebp], 2047 ; 000007ffH

; 360  : 			break;

  000a8	e9 82 00 00 00	 jmp	 $LN2@HWR_DrawFl
$LN5@HWR_DrawFl:

; 361  : 		case 1048576: // 1024x1024 lump
; 362  : 			dflatsize = 1024.0f;

  000ad	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4090000000000000
  000b5	f2 0f 11 45 94	 movsd	 QWORD PTR _dflatsize$[ebp], xmm0

; 363  : 			flatflag = 1023;

  000ba	c7 45 90 ff 03
	00 00		 mov	 DWORD PTR _flatflag$[ebp], 1023 ; 000003ffH

; 364  : 			break;

  000c1	eb 6c		 jmp	 SHORT $LN2@HWR_DrawFl
$LN6@HWR_DrawFl:

; 365  : 		case 262144:// 512x512 lump
; 366  : 			dflatsize = 512.0f;

  000c3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4080000000000000
  000cb	f2 0f 11 45 94	 movsd	 QWORD PTR _dflatsize$[ebp], xmm0

; 367  : 			flatflag = 511;

  000d0	c7 45 90 ff 01
	00 00		 mov	 DWORD PTR _flatflag$[ebp], 511 ; 000001ffH

; 368  : 			break;

  000d7	eb 56		 jmp	 SHORT $LN2@HWR_DrawFl
$LN7@HWR_DrawFl:

; 369  : 		case 65536: // 256x256 lump
; 370  : 			dflatsize = 256.0f;

  000d9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4070000000000000
  000e1	f2 0f 11 45 94	 movsd	 QWORD PTR _dflatsize$[ebp], xmm0

; 371  : 			flatflag = 255;

  000e6	c7 45 90 ff 00
	00 00		 mov	 DWORD PTR _flatflag$[ebp], 255 ; 000000ffH

; 372  : 			break;

  000ed	eb 40		 jmp	 SHORT $LN2@HWR_DrawFl
$LN8@HWR_DrawFl:

; 373  : 		case 16384: // 128x128 lump
; 374  : 			dflatsize = 128.0f;

  000ef	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4060000000000000
  000f7	f2 0f 11 45 94	 movsd	 QWORD PTR _dflatsize$[ebp], xmm0

; 375  : 			flatflag = 127;

  000fc	c7 45 90 7f 00
	00 00		 mov	 DWORD PTR _flatflag$[ebp], 127 ; 0000007fH

; 376  : 			break;

  00103	eb 2a		 jmp	 SHORT $LN2@HWR_DrawFl
$LN9@HWR_DrawFl:

; 377  : 		case 1024: // 32x32 lump
; 378  : 			dflatsize = 32.0f;

  00105	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4040000000000000
  0010d	f2 0f 11 45 94	 movsd	 QWORD PTR _dflatsize$[ebp], xmm0

; 379  : 			flatflag = 31;

  00112	c7 45 90 1f 00
	00 00		 mov	 DWORD PTR _flatflag$[ebp], 31 ; 0000001fH

; 380  : 			break;

  00119	eb 14		 jmp	 SHORT $LN2@HWR_DrawFl
$LN10@HWR_DrawFl:

; 381  : 		default: // 64x64 lump
; 382  : 			dflatsize = 64.0f;

  0011b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4050000000000000
  00123	f2 0f 11 45 94	 movsd	 QWORD PTR _dflatsize$[ebp], xmm0

; 383  : 			flatflag = 63;

  00128	c7 45 90 3f 00
	00 00		 mov	 DWORD PTR _flatflag$[ebp], 63 ; 0000003fH
$LN2@HWR_DrawFl:

; 384  : 			break;
; 385  : 	}
; 386  : 
; 387  : //  3--2
; 388  : //  | /|
; 389  : //  |/ |
; 390  : //  0--1
; 391  : 
; 392  : 	v[0].x = v[3].x = (x - 160.0f)/160.0f;

  0012f	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  00134	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43200000
  0013c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43200000
  00144	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv83[ebp], xmm0
  0014c	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00151	6b c8 03	 imul	 ecx, eax, 3
  00154	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv83[ebp]
  0015c	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  00162	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00167	6b c2 00	 imul	 eax, edx, 0
  0016a	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv83[ebp]
  00172	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0

; 393  : 	v[2].x = v[1].x = ((x+w) - 160.0f)/160.0f;

  00178	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0017b	03 45 10	 add	 eax, DWORD PTR _w$[ebp]
  0017e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00182	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43200000
  0018a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43200000
  00192	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv94[ebp], xmm0
  0019a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0019f	c1 e1 00	 shl	 ecx, 0
  001a2	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv94[ebp]
  001aa	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  001b0	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001b5	d1 e2		 shl	 edx, 1
  001b7	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv94[ebp]
  001bf	f3 0f 11 44 15
	9c		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 394  : 	v[0].y = v[1].y = -(y - 100.0f)/100.0f;

  001c5	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  001ca	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000
  001d2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001d9	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  001e1	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv137[ebp], xmm0
  001e9	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001ee	c1 e0 00	 shl	 eax, 0
  001f1	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv137[ebp]
  001f9	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0
  001ff	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00204	6b d1 00	 imul	 edx, ecx, 0
  00207	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv137[ebp]
  0020f	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0

; 395  : 	v[2].y = v[3].y = -((y+h) - 100.0f)/100.0f;

  00215	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00218	03 45 14	 add	 eax, DWORD PTR _h$[ebp]
  0021b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0021f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000
  00227	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0022e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  00236	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv149[ebp], xmm0
  0023e	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00243	6b d1 03	 imul	 edx, ecx, 3
  00246	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv149[ebp]
  0024e	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0
  00254	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00259	d1 e0		 shl	 eax, 1
  0025b	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv149[ebp]
  00263	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0

; 396  : 
; 397  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  00269	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0026e	6b c8 03	 imul	 ecx, eax, 3
  00271	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00279	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  0027f	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00284	d1 e2		 shl	 edx, 1
  00286	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0028e	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  00294	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00299	c1 e0 00	 shl	 eax, 0
  0029c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002a4	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  002aa	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  002af	6b d1 00	 imul	 edx, ecx, 0
  002b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002ba	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 398  : 
; 399  : 	// flat is 64x64 lod and texture offsets are [0.0, 1.0]
; 400  : 	v[0].sow = v[3].sow = (float)((x & flatflag)/dflatsize);

  002c0	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  002c3	23 45 90	 and	 eax, DWORD PTR _flatflag$[ebp]
  002c6	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  002ca	f2 0f 5e 45 94	 divsd	 xmm0, QWORD PTR _dflatsize$[ebp]
  002cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d3	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv172[ebp], xmm0
  002db	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  002e0	6b d1 03	 imul	 edx, ecx, 3
  002e3	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv172[ebp]
  002eb	f3 0f 11 44 15
	ac		 movss	 DWORD PTR _v$[ebp+edx+16], xmm0
  002f1	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002f6	6b c8 00	 imul	 ecx, eax, 0
  002f9	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv172[ebp]
  00301	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0

; 401  : 	v[2].sow = v[1].sow = (float)(v[0].sow + w/dflatsize);

  00307	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0030c	6b c8 00	 imul	 ecx, eax, 0
  0030f	f3 0f 5a 44 0d
	ac		 cvtss2sd xmm0, DWORD PTR _v$[ebp+ecx+16]
  00315	f2 0f 2a 4d 10	 cvtsi2sd xmm1, DWORD PTR _w$[ebp]
  0031a	f2 0f 5e 4d 94	 divsd	 xmm1, QWORD PTR _dflatsize$[ebp]
  0031f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00323	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00327	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv187[ebp], xmm0
  0032f	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00334	c1 e2 00	 shl	 edx, 0
  00337	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv187[ebp]
  0033f	f3 0f 11 44 15
	ac		 movss	 DWORD PTR _v$[ebp+edx+16], xmm0
  00345	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0034a	d1 e0		 shl	 eax, 1
  0034c	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv187[ebp]
  00354	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 402  : 	v[0].tow = v[1].tow = (float)((y & flatflag)/dflatsize);

  0035a	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0035d	23 45 90	 and	 eax, DWORD PTR _flatflag$[ebp]
  00360	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00364	f2 0f 5e 45 94	 divsd	 xmm0, QWORD PTR _dflatsize$[ebp]
  00369	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0036d	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv198[ebp], xmm0
  00375	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0037a	c1 e1 00	 shl	 ecx, 0
  0037d	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv198[ebp]
  00385	f3 0f 11 44 0d
	b0		 movss	 DWORD PTR _v$[ebp+ecx+20], xmm0
  0038b	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00390	6b c2 00	 imul	 eax, edx, 0
  00393	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv198[ebp]
  0039b	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0

; 403  : 	v[2].tow = v[3].tow = (float)(v[0].tow + h/dflatsize);

  003a1	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  003a6	6b c8 00	 imul	 ecx, eax, 0
  003a9	f3 0f 5a 44 0d
	b0		 cvtss2sd xmm0, DWORD PTR _v$[ebp+ecx+20]
  003af	f2 0f 2a 4d 14	 cvtsi2sd xmm1, DWORD PTR _h$[ebp]
  003b4	f2 0f 5e 4d 94	 divsd	 xmm1, QWORD PTR _dflatsize$[ebp]
  003b9	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003bd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003c1	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv213[ebp], xmm0
  003c9	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  003ce	6b c2 03	 imul	 eax, edx, 3
  003d1	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv213[ebp]
  003d9	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  003df	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  003e4	d1 e1		 shl	 ecx, 1
  003e6	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv213[ebp]
  003ee	f3 0f 11 44 0d
	b0		 movss	 DWORD PTR _v$[ebp+ecx+20], xmm0

; 404  : 
; 405  : 	HWR_GetFlat(flatlumpnum);

  003f4	8b 45 18	 mov	 eax, DWORD PTR _flatlumpnum$[ebp]
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 _HWR_GetFlat
  003fd	83 c4 04	 add	 esp, 4

; 406  : 
; 407  : 	//Hurdler: Boris, the same comment as above... but maybe for pics
; 408  : 	// it not a problem since they don't have any transparent pixel
; 409  : 	// if I'm right !?
; 410  : 	// BTW, I see we put 0 for PFs, and If I'm right, that
; 411  : 	// means we take the previous PFs as default
; 412  : 	// how can we be sure they are ok?
; 413  : 	HWD.pfnDrawPolygon(NULL, v, 4, PF_NoDepthTest); //PF_Translucent);

  00400	68 00 02 00 00	 push	 512			; 00000200H
  00405	6a 04		 push	 4
  00407	8d 45 9c	 lea	 eax, DWORD PTR _v$[ebp]
  0040a	50		 push	 eax
  0040b	6a 00		 push	 0
  0040d	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  00413	90		 npad	 1

; 414  : }

  00414	5f		 pop	 edi
  00415	5e		 pop	 esi
  00416	5b		 pop	 ebx
  00417	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0041a	33 cd		 xor	 ecx, ebp
  0041c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00421	8b e5		 mov	 esp, ebp
  00423	5d		 pop	 ebp
  00424	c3		 ret	 0
_HWR_DrawFlatFill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawViewBorder
_TEXT	SEGMENT
tv79 = -104						; size = 4
tv89 = -104						; size = 4
tv131 = -104						; size = 4
_patch$ = -36						; size = 4
_basewindowy$ = -32					; size = 4
_basewindowx$ = -28					; size = 4
_baseviewheight$ = -24					; size = 4
_baseviewwidth$ = -20					; size = 4
_side$ = -16						; size = 4
_top$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_clearlines$ = 8					; size = 4
_HWR_DrawViewBorder PROC				; COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 490  : 	INT32 x, y;
; 491  : 	INT32 top, side;
; 492  : 	INT32 baseviewwidth, baseviewheight;
; 493  : 	INT32 basewindowx, basewindowy;
; 494  : 	GLPatch_t *patch;
; 495  : 
; 496  : //    if (gr_viewwidth == vid.width)
; 497  : //        return;
; 498  : 
; 499  : 	if (!clearlines)

  00009	83 7d 08 00	 cmp	 DWORD PTR _clearlines$[ebp], 0
  0000d	75 07		 jne	 SHORT $LN14@HWR_DrawVi

; 500  : 		clearlines = BASEVIDHEIGHT; // refresh all

  0000f	c7 45 08 c8 00
	00 00		 mov	 DWORD PTR _clearlines$[ebp], 200 ; 000000c8H
$LN14@HWR_DrawVi:

; 501  : 
; 502  : 	// calc view size based on original game resolution
; 503  : 	baseviewwidth = (INT32)(gr_viewwidth/vid.fdupx); //(cv_viewsize.value * BASEVIDWIDTH/10)&~7;

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _gr_viewwidth
  0001e	f3 0f 5e 05 28
	00 00 00	 divss	 xmm0, DWORD PTR _vid+40
  00026	f3 0f 2c c0	 cvttss2si eax, xmm0
  0002a	89 45 ec	 mov	 DWORD PTR _baseviewwidth$[ebp], eax

; 504  : 	baseviewheight = (INT32)(gr_viewheight/vid.fdupy);

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _gr_viewheight
  00035	f3 0f 5e 05 2c
	00 00 00	 divss	 xmm0, DWORD PTR _vid+44
  0003d	f3 0f 2c c0	 cvttss2si eax, xmm0
  00041	89 45 e8	 mov	 DWORD PTR _baseviewheight$[ebp], eax

; 505  : 	top = (INT32)(gr_baseviewwindowy/vid.fdupy);

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _gr_baseviewwindowy
  0004c	f3 0f 5e 05 2c
	00 00 00	 divss	 xmm0, DWORD PTR _vid+44
  00054	f3 0f 2c c0	 cvttss2si eax, xmm0
  00058	89 45 f4	 mov	 DWORD PTR _top$[ebp], eax

; 506  : 	side = (INT32)(gr_viewwindowx/vid.fdupx);

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _gr_viewwindowx
  00063	f3 0f 5e 05 28
	00 00 00	 divss	 xmm0, DWORD PTR _vid+40
  0006b	f3 0f 2c c0	 cvttss2si eax, xmm0
  0006f	89 45 f0	 mov	 DWORD PTR _side$[ebp], eax

; 507  : 
; 508  : 	// top
; 509  : 	HWR_DrawFlatFill(0, 0,

  00072	8b 45 f4	 mov	 eax, DWORD PTR _top$[ebp]
  00075	3b 45 08	 cmp	 eax, DWORD PTR _clearlines$[ebp]
  00078	7d 08		 jge	 SHORT $LN29@HWR_DrawVi
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR _top$[ebp]
  0007d	89 4d 98	 mov	 DWORD PTR tv79[ebp], ecx
  00080	eb 06		 jmp	 SHORT $LN30@HWR_DrawVi
$LN29@HWR_DrawVi:
  00082	8b 55 08	 mov	 edx, DWORD PTR _clearlines$[ebp]
  00085	89 55 98	 mov	 DWORD PTR tv79[ebp], edx
$LN30@HWR_DrawVi:
  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR _st_borderpatchnum
  0008d	50		 push	 eax
  0008e	8b 4d 98	 mov	 ecx, DWORD PTR tv79[ebp]
  00091	51		 push	 ecx
  00092	68 40 01 00 00	 push	 320			; 00000140H
  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	e8 00 00 00 00	 call	 _HWR_DrawFlatFill
  000a0	83 c4 14	 add	 esp, 20			; 00000014H

; 510  : 		BASEVIDWIDTH, (top < clearlines ? top : clearlines),
; 511  : 		st_borderpatchnum);
; 512  : 
; 513  : 	// left
; 514  : 	if (top < clearlines)

  000a3	8b 45 f4	 mov	 eax, DWORD PTR _top$[ebp]
  000a6	3b 45 08	 cmp	 eax, DWORD PTR _clearlines$[ebp]
  000a9	7d 38		 jge	 SHORT $LN15@HWR_DrawVi

; 515  : 		HWR_DrawFlatFill(0, top, side,

  000ab	8b 45 08	 mov	 eax, DWORD PTR _clearlines$[ebp]
  000ae	2b 45 f4	 sub	 eax, DWORD PTR _top$[ebp]
  000b1	3b 45 e8	 cmp	 eax, DWORD PTR _baseviewheight$[ebp]
  000b4	7d 0b		 jge	 SHORT $LN31@HWR_DrawVi
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _clearlines$[ebp]
  000b9	2b 4d f4	 sub	 ecx, DWORD PTR _top$[ebp]
  000bc	89 4d 98	 mov	 DWORD PTR tv89[ebp], ecx
  000bf	eb 06		 jmp	 SHORT $LN32@HWR_DrawVi
$LN31@HWR_DrawVi:
  000c1	8b 55 e8	 mov	 edx, DWORD PTR _baseviewheight$[ebp]
  000c4	89 55 98	 mov	 DWORD PTR tv89[ebp], edx
$LN32@HWR_DrawVi:
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _st_borderpatchnum
  000cc	50		 push	 eax
  000cd	8b 4d 98	 mov	 ecx, DWORD PTR tv89[ebp]
  000d0	51		 push	 ecx
  000d1	8b 55 f0	 mov	 edx, DWORD PTR _side$[ebp]
  000d4	52		 push	 edx
  000d5	8b 45 f4	 mov	 eax, DWORD PTR _top$[ebp]
  000d8	50		 push	 eax
  000d9	6a 00		 push	 0
  000db	e8 00 00 00 00	 call	 _HWR_DrawFlatFill
  000e0	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@HWR_DrawVi:

; 516  : 			(clearlines-top < baseviewheight ? clearlines-top : baseviewheight),
; 517  : 			st_borderpatchnum);
; 518  : 
; 519  : 	// right
; 520  : 	if (top < clearlines)

  000e3	8b 45 f4	 mov	 eax, DWORD PTR _top$[ebp]
  000e6	3b 45 08	 cmp	 eax, DWORD PTR _clearlines$[ebp]
  000e9	7d 3d		 jge	 SHORT $LN16@HWR_DrawVi

; 521  : 		HWR_DrawFlatFill(side + baseviewwidth, top, side,

  000eb	8b 45 08	 mov	 eax, DWORD PTR _clearlines$[ebp]
  000ee	2b 45 f4	 sub	 eax, DWORD PTR _top$[ebp]
  000f1	3b 45 e8	 cmp	 eax, DWORD PTR _baseviewheight$[ebp]
  000f4	7d 0b		 jge	 SHORT $LN33@HWR_DrawVi
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _clearlines$[ebp]
  000f9	2b 4d f4	 sub	 ecx, DWORD PTR _top$[ebp]
  000fc	89 4d 98	 mov	 DWORD PTR tv131[ebp], ecx
  000ff	eb 06		 jmp	 SHORT $LN34@HWR_DrawVi
$LN33@HWR_DrawVi:
  00101	8b 55 e8	 mov	 edx, DWORD PTR _baseviewheight$[ebp]
  00104	89 55 98	 mov	 DWORD PTR tv131[ebp], edx
$LN34@HWR_DrawVi:
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR _st_borderpatchnum
  0010c	50		 push	 eax
  0010d	8b 4d 98	 mov	 ecx, DWORD PTR tv131[ebp]
  00110	51		 push	 ecx
  00111	8b 55 f0	 mov	 edx, DWORD PTR _side$[ebp]
  00114	52		 push	 edx
  00115	8b 45 f4	 mov	 eax, DWORD PTR _top$[ebp]
  00118	50		 push	 eax
  00119	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  0011c	03 4d ec	 add	 ecx, DWORD PTR _baseviewwidth$[ebp]
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 _HWR_DrawFlatFill
  00125	83 c4 14	 add	 esp, 20			; 00000014H
$LN16@HWR_DrawVi:

; 522  : 			(clearlines-top < baseviewheight ? clearlines-top : baseviewheight),
; 523  : 			st_borderpatchnum);
; 524  : 
; 525  : 	// bottom
; 526  : 	if (top + baseviewheight < clearlines)

  00128	8b 45 f4	 mov	 eax, DWORD PTR _top$[ebp]
  0012b	03 45 e8	 add	 eax, DWORD PTR _baseviewheight$[ebp]
  0012e	3b 45 08	 cmp	 eax, DWORD PTR _clearlines$[ebp]
  00131	7d 21		 jge	 SHORT $LN17@HWR_DrawVi

; 527  : 		HWR_DrawFlatFill(0, top + baseviewheight,

  00133	a1 00 00 00 00	 mov	 eax, DWORD PTR _st_borderpatchnum
  00138	50		 push	 eax
  00139	68 c8 00 00 00	 push	 200			; 000000c8H
  0013e	68 40 01 00 00	 push	 320			; 00000140H
  00143	8b 4d f4	 mov	 ecx, DWORD PTR _top$[ebp]
  00146	03 4d e8	 add	 ecx, DWORD PTR _baseviewheight$[ebp]
  00149	51		 push	 ecx
  0014a	6a 00		 push	 0
  0014c	e8 00 00 00 00	 call	 _HWR_DrawFlatFill
  00151	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@HWR_DrawVi:

; 528  : 			BASEVIDWIDTH, BASEVIDHEIGHT, st_borderpatchnum);
; 529  : 
; 530  : 	//
; 531  : 	// draw the view borders
; 532  : 	//
; 533  : 
; 534  : 	basewindowx = (BASEVIDWIDTH - baseviewwidth)>>1;

  00154	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  00159	2b 45 ec	 sub	 eax, DWORD PTR _baseviewwidth$[ebp]
  0015c	d1 f8		 sar	 eax, 1
  0015e	89 45 e4	 mov	 DWORD PTR _basewindowx$[ebp], eax

; 535  : 	if (baseviewwidth == BASEVIDWIDTH)

  00161	81 7d ec 40 01
	00 00		 cmp	 DWORD PTR _baseviewwidth$[ebp], 320 ; 00000140H
  00168	75 09		 jne	 SHORT $LN18@HWR_DrawVi

; 536  : 		basewindowy = 0;

  0016a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _basewindowy$[ebp], 0
  00171	eb 06		 jmp	 SHORT $LN19@HWR_DrawVi
$LN18@HWR_DrawVi:

; 537  : 	else
; 538  : 		basewindowy = top;

  00173	8b 45 f4	 mov	 eax, DWORD PTR _top$[ebp]
  00176	89 45 e0	 mov	 DWORD PTR _basewindowy$[ebp], eax
$LN19@HWR_DrawVi:

; 539  : 
; 540  : 	// top edge
; 541  : 	if (clearlines > basewindowy - 8)

  00179	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  0017c	83 e8 08	 sub	 eax, 8
  0017f	39 45 08	 cmp	 DWORD PTR _clearlines$[ebp], eax
  00182	7e 54		 jle	 SHORT $LN3@HWR_DrawVi

; 542  : 	{
; 543  : 		patch = W_CachePatchNum(viewborderlump[BRDR_T], PU_CACHE);

  00184	6a 65		 push	 101			; 00000065H
  00186	b8 04 00 00 00	 mov	 eax, 4
  0018b	6b c8 00	 imul	 ecx, eax, 0
  0018e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _viewborderlump[ecx]
  00194	52		 push	 edx
  00195	e8 00 00 00 00	 call	 _W_CachePatchNum
  0019a	83 c4 08	 add	 esp, 8
  0019d	89 45 dc	 mov	 DWORD PTR _patch$[ebp], eax

; 544  : 		for (x = 0; x < baseviewwidth; x += 8)

  001a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001a7	eb 09		 jmp	 SHORT $LN4@HWR_DrawVi
$LN2@HWR_DrawVi:
  001a9	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001ac	83 c0 08	 add	 eax, 8
  001af	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN4@HWR_DrawVi:
  001b2	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001b5	3b 45 ec	 cmp	 eax, DWORD PTR _baseviewwidth$[ebp]
  001b8	7d 1e		 jge	 SHORT $LN3@HWR_DrawVi

; 545  : 			HWR_DrawPatch(patch, basewindowx + x, basewindowy - 8,

  001ba	6a 00		 push	 0
  001bc	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  001bf	83 e8 08	 sub	 eax, 8
  001c2	50		 push	 eax
  001c3	8b 4d e4	 mov	 ecx, DWORD PTR _basewindowx$[ebp]
  001c6	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  001c9	51		 push	 ecx
  001ca	8b 55 dc	 mov	 edx, DWORD PTR _patch$[ebp]
  001cd	52		 push	 edx
  001ce	e8 00 00 00 00	 call	 _HWR_DrawPatch
  001d3	83 c4 10	 add	 esp, 16			; 00000010H
  001d6	eb d1		 jmp	 SHORT $LN2@HWR_DrawVi
$LN3@HWR_DrawVi:

; 546  : 				0);
; 547  : 	}
; 548  : 
; 549  : 	// bottom edge
; 550  : 	if (clearlines > basewindowy + baseviewheight)

  001d8	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  001db	03 45 e8	 add	 eax, DWORD PTR _baseviewheight$[ebp]
  001de	39 45 08	 cmp	 DWORD PTR _clearlines$[ebp], eax
  001e1	7e 54		 jle	 SHORT $LN6@HWR_DrawVi

; 551  : 	{
; 552  : 		patch = W_CachePatchNum(viewborderlump[BRDR_B], PU_CACHE);

  001e3	6a 65		 push	 101			; 00000065H
  001e5	b8 04 00 00 00	 mov	 eax, 4
  001ea	c1 e0 00	 shl	 eax, 0
  001ed	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _viewborderlump[eax]
  001f3	51		 push	 ecx
  001f4	e8 00 00 00 00	 call	 _W_CachePatchNum
  001f9	83 c4 08	 add	 esp, 8
  001fc	89 45 dc	 mov	 DWORD PTR _patch$[ebp], eax

; 553  : 		for (x = 0; x < baseviewwidth; x += 8)

  001ff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00206	eb 09		 jmp	 SHORT $LN7@HWR_DrawVi
$LN5@HWR_DrawVi:
  00208	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0020b	83 c0 08	 add	 eax, 8
  0020e	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@HWR_DrawVi:
  00211	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00214	3b 45 ec	 cmp	 eax, DWORD PTR _baseviewwidth$[ebp]
  00217	7d 1e		 jge	 SHORT $LN6@HWR_DrawVi

; 554  : 			HWR_DrawPatch(patch, basewindowx + x,

  00219	6a 00		 push	 0
  0021b	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  0021e	03 45 e8	 add	 eax, DWORD PTR _baseviewheight$[ebp]
  00221	50		 push	 eax
  00222	8b 4d e4	 mov	 ecx, DWORD PTR _basewindowx$[ebp]
  00225	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  00228	51		 push	 ecx
  00229	8b 55 dc	 mov	 edx, DWORD PTR _patch$[ebp]
  0022c	52		 push	 edx
  0022d	e8 00 00 00 00	 call	 _HWR_DrawPatch
  00232	83 c4 10	 add	 esp, 16			; 00000010H
  00235	eb d1		 jmp	 SHORT $LN5@HWR_DrawVi
$LN6@HWR_DrawVi:

; 555  : 				basewindowy + baseviewheight, 0);
; 556  : 	}
; 557  : 
; 558  : 	// left edge
; 559  : 	if (clearlines > basewindowy)

  00237	8b 45 08	 mov	 eax, DWORD PTR _clearlines$[ebp]
  0023a	3b 45 e0	 cmp	 eax, DWORD PTR _basewindowy$[ebp]
  0023d	7e 5e		 jle	 SHORT $LN9@HWR_DrawVi

; 560  : 	{
; 561  : 		patch = W_CachePatchNum(viewborderlump[BRDR_L], PU_CACHE);

  0023f	6a 65		 push	 101			; 00000065H
  00241	b8 04 00 00 00	 mov	 eax, 4
  00246	d1 e0		 shl	 eax, 1
  00248	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _viewborderlump[eax]
  0024e	51		 push	 ecx
  0024f	e8 00 00 00 00	 call	 _W_CachePatchNum
  00254	83 c4 08	 add	 esp, 8
  00257	89 45 dc	 mov	 DWORD PTR _patch$[ebp], eax

; 562  : 		for (y = 0; y < baseviewheight && basewindowy + y < clearlines;

  0025a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00261	eb 09		 jmp	 SHORT $LN10@HWR_DrawVi
$LN8@HWR_DrawVi:

; 563  : 			y += 8)

  00263	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00266	83 c0 08	 add	 eax, 8
  00269	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN10@HWR_DrawVi:

; 562  : 		for (y = 0; y < baseviewheight && basewindowy + y < clearlines;

  0026c	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0026f	3b 45 e8	 cmp	 eax, DWORD PTR _baseviewheight$[ebp]
  00272	7d 29		 jge	 SHORT $LN9@HWR_DrawVi
  00274	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  00277	03 45 f8	 add	 eax, DWORD PTR _y$[ebp]
  0027a	3b 45 08	 cmp	 eax, DWORD PTR _clearlines$[ebp]
  0027d	7d 1e		 jge	 SHORT $LN9@HWR_DrawVi

; 564  : 		{
; 565  : 			HWR_DrawPatch(patch, basewindowx - 8, basewindowy + y,

  0027f	6a 00		 push	 0
  00281	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  00284	03 45 f8	 add	 eax, DWORD PTR _y$[ebp]
  00287	50		 push	 eax
  00288	8b 4d e4	 mov	 ecx, DWORD PTR _basewindowx$[ebp]
  0028b	83 e9 08	 sub	 ecx, 8
  0028e	51		 push	 ecx
  0028f	8b 55 dc	 mov	 edx, DWORD PTR _patch$[ebp]
  00292	52		 push	 edx
  00293	e8 00 00 00 00	 call	 _HWR_DrawPatch
  00298	83 c4 10	 add	 esp, 16			; 00000010H

; 566  : 				0);
; 567  : 		}

  0029b	eb c6		 jmp	 SHORT $LN8@HWR_DrawVi
$LN9@HWR_DrawVi:

; 568  : 	}
; 569  : 
; 570  : 	// right edge
; 571  : 	if (clearlines > basewindowy)

  0029d	8b 45 08	 mov	 eax, DWORD PTR _clearlines$[ebp]
  002a0	3b 45 e0	 cmp	 eax, DWORD PTR _basewindowy$[ebp]
  002a3	7e 5f		 jle	 SHORT $LN12@HWR_DrawVi

; 572  : 	{
; 573  : 		patch = W_CachePatchNum(viewborderlump[BRDR_R], PU_CACHE);

  002a5	6a 65		 push	 101			; 00000065H
  002a7	b8 04 00 00 00	 mov	 eax, 4
  002ac	6b c8 03	 imul	 ecx, eax, 3
  002af	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _viewborderlump[ecx]
  002b5	52		 push	 edx
  002b6	e8 00 00 00 00	 call	 _W_CachePatchNum
  002bb	83 c4 08	 add	 esp, 8
  002be	89 45 dc	 mov	 DWORD PTR _patch$[ebp], eax

; 574  : 		for (y = 0; y < baseviewheight && basewindowy+y < clearlines;

  002c1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  002c8	eb 09		 jmp	 SHORT $LN13@HWR_DrawVi
$LN11@HWR_DrawVi:

; 575  : 			y += 8)

  002ca	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002cd	83 c0 08	 add	 eax, 8
  002d0	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN13@HWR_DrawVi:

; 574  : 		for (y = 0; y < baseviewheight && basewindowy+y < clearlines;

  002d3	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002d6	3b 45 e8	 cmp	 eax, DWORD PTR _baseviewheight$[ebp]
  002d9	7d 29		 jge	 SHORT $LN12@HWR_DrawVi
  002db	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  002de	03 45 f8	 add	 eax, DWORD PTR _y$[ebp]
  002e1	3b 45 08	 cmp	 eax, DWORD PTR _clearlines$[ebp]
  002e4	7d 1e		 jge	 SHORT $LN12@HWR_DrawVi

; 576  : 		{
; 577  : 			HWR_DrawPatch(patch, basewindowx + baseviewwidth,

  002e6	6a 00		 push	 0
  002e8	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  002eb	03 45 f8	 add	 eax, DWORD PTR _y$[ebp]
  002ee	50		 push	 eax
  002ef	8b 4d e4	 mov	 ecx, DWORD PTR _basewindowx$[ebp]
  002f2	03 4d ec	 add	 ecx, DWORD PTR _baseviewwidth$[ebp]
  002f5	51		 push	 ecx
  002f6	8b 55 dc	 mov	 edx, DWORD PTR _patch$[ebp]
  002f9	52		 push	 edx
  002fa	e8 00 00 00 00	 call	 _HWR_DrawPatch
  002ff	83 c4 10	 add	 esp, 16			; 00000010H

; 578  : 				basewindowy + y, 0);
; 579  : 		}

  00302	eb c6		 jmp	 SHORT $LN11@HWR_DrawVi
$LN12@HWR_DrawVi:

; 580  : 	}
; 581  : 
; 582  : 	// Draw beveled corners.
; 583  : 	if (clearlines > basewindowy - 8)

  00304	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  00307	83 e8 08	 sub	 eax, 8
  0030a	39 45 08	 cmp	 DWORD PTR _clearlines$[ebp], eax
  0030d	7e 32		 jle	 SHORT $LN24@HWR_DrawVi

; 584  : 		HWR_DrawPatch(W_CachePatchNum(viewborderlump[BRDR_TL],

  0030f	6a 00		 push	 0
  00311	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  00314	83 e8 08	 sub	 eax, 8
  00317	50		 push	 eax
  00318	8b 4d e4	 mov	 ecx, DWORD PTR _basewindowx$[ebp]
  0031b	83 e9 08	 sub	 ecx, 8
  0031e	51		 push	 ecx
  0031f	6a 65		 push	 101			; 00000065H
  00321	ba 04 00 00 00	 mov	 edx, 4
  00326	c1 e2 02	 shl	 edx, 2
  00329	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _viewborderlump[edx]
  0032f	50		 push	 eax
  00330	e8 00 00 00 00	 call	 _W_CachePatchNum
  00335	83 c4 08	 add	 esp, 8
  00338	50		 push	 eax
  00339	e8 00 00 00 00	 call	 _HWR_DrawPatch
  0033e	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@HWR_DrawVi:

; 585  : 				PU_CACHE),
; 586  : 			basewindowx - 8, basewindowy - 8, 0);
; 587  : 
; 588  : 	if (clearlines > basewindowy - 8)

  00341	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  00344	83 e8 08	 sub	 eax, 8
  00347	39 45 08	 cmp	 DWORD PTR _clearlines$[ebp], eax
  0034a	7e 32		 jle	 SHORT $LN25@HWR_DrawVi

; 589  : 		HWR_DrawPatch(W_CachePatchNum(viewborderlump[BRDR_TR],

  0034c	6a 00		 push	 0
  0034e	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  00351	83 e8 08	 sub	 eax, 8
  00354	50		 push	 eax
  00355	8b 4d e4	 mov	 ecx, DWORD PTR _basewindowx$[ebp]
  00358	03 4d ec	 add	 ecx, DWORD PTR _baseviewwidth$[ebp]
  0035b	51		 push	 ecx
  0035c	6a 65		 push	 101			; 00000065H
  0035e	ba 04 00 00 00	 mov	 edx, 4
  00363	6b c2 05	 imul	 eax, edx, 5
  00366	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _viewborderlump[eax]
  0036c	51		 push	 ecx
  0036d	e8 00 00 00 00	 call	 _W_CachePatchNum
  00372	83 c4 08	 add	 esp, 8
  00375	50		 push	 eax
  00376	e8 00 00 00 00	 call	 _HWR_DrawPatch
  0037b	83 c4 10	 add	 esp, 16			; 00000010H
$LN25@HWR_DrawVi:

; 590  : 				PU_CACHE),
; 591  : 			basewindowx + baseviewwidth, basewindowy - 8, 0);
; 592  : 
; 593  : 	if (clearlines > basewindowy+baseviewheight)

  0037e	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  00381	03 45 e8	 add	 eax, DWORD PTR _baseviewheight$[ebp]
  00384	39 45 08	 cmp	 DWORD PTR _clearlines$[ebp], eax
  00387	7e 32		 jle	 SHORT $LN26@HWR_DrawVi

; 594  : 		HWR_DrawPatch(W_CachePatchNum(viewborderlump[BRDR_BL],

  00389	6a 00		 push	 0
  0038b	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  0038e	03 45 e8	 add	 eax, DWORD PTR _baseviewheight$[ebp]
  00391	50		 push	 eax
  00392	8b 4d e4	 mov	 ecx, DWORD PTR _basewindowx$[ebp]
  00395	83 e9 08	 sub	 ecx, 8
  00398	51		 push	 ecx
  00399	6a 65		 push	 101			; 00000065H
  0039b	ba 04 00 00 00	 mov	 edx, 4
  003a0	6b c2 06	 imul	 eax, edx, 6
  003a3	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _viewborderlump[eax]
  003a9	51		 push	 ecx
  003aa	e8 00 00 00 00	 call	 _W_CachePatchNum
  003af	83 c4 08	 add	 esp, 8
  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 _HWR_DrawPatch
  003b8	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@HWR_DrawVi:

; 595  : 				PU_CACHE),
; 596  : 			basewindowx - 8, basewindowy + baseviewheight, 0);
; 597  : 
; 598  : 	if (clearlines > basewindowy + baseviewheight)

  003bb	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  003be	03 45 e8	 add	 eax, DWORD PTR _baseviewheight$[ebp]
  003c1	39 45 08	 cmp	 DWORD PTR _clearlines$[ebp], eax
  003c4	7e 32		 jle	 SHORT $LN27@HWR_DrawVi

; 599  : 		HWR_DrawPatch(W_CachePatchNum(viewborderlump[BRDR_BR],

  003c6	6a 00		 push	 0
  003c8	8b 45 e0	 mov	 eax, DWORD PTR _basewindowy$[ebp]
  003cb	03 45 e8	 add	 eax, DWORD PTR _baseviewheight$[ebp]
  003ce	50		 push	 eax
  003cf	8b 4d e4	 mov	 ecx, DWORD PTR _basewindowx$[ebp]
  003d2	03 4d ec	 add	 ecx, DWORD PTR _baseviewwidth$[ebp]
  003d5	51		 push	 ecx
  003d6	6a 65		 push	 101			; 00000065H
  003d8	ba 04 00 00 00	 mov	 edx, 4
  003dd	6b c2 07	 imul	 eax, edx, 7
  003e0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _viewborderlump[eax]
  003e6	51		 push	 ecx
  003e7	e8 00 00 00 00	 call	 _W_CachePatchNum
  003ec	83 c4 08	 add	 esp, 8
  003ef	50		 push	 eax
  003f0	e8 00 00 00 00	 call	 _HWR_DrawPatch
  003f5	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@HWR_DrawVi:

; 600  : 				PU_CACHE),
; 601  : 			basewindowx + baseviewwidth,
; 602  : 			basewindowy + baseviewheight, 0);
; 603  : }

  003f8	5f		 pop	 edi
  003f9	5e		 pop	 esi
  003fa	5b		 pop	 ebx
  003fb	8b e5		 mov	 esp, ebp
  003fd	5d		 pop	 ebp
  003fe	c3		 ret	 0
_HWR_DrawViewBorder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_DrawConsoleBack
_TEXT	SEGMENT
tv88 = -176						; size = 4
_Surf$ = -108						; size = 8
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_color$ = 8						; size = 4
_height$ = 12						; size = 4
_HWR_DrawConsoleBack PROC				; COMDAT

; 451  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 452  : 	FOutVector  v[4];
; 453  : 	FSurfaceInfo Surf;
; 454  : 
; 455  : 	// setup some neat-o translucency effect
; 456  : 	if (!height) //cool hack 0 height is full height

  00016	83 7d 0c 00	 cmp	 DWORD PTR _height$[ebp], 0
  0001a	75 08		 jne	 SHORT $LN2@HWR_DrawCo

; 457  : 		height = vid.height;

  0001c	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00021	89 45 0c	 mov	 DWORD PTR _height$[ebp], eax
$LN2@HWR_DrawCo:

; 458  : 
; 459  : 	v[0].x = v[3].x = -1.0f;

  00024	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00029	6b c8 03	 imul	 ecx, eax, 3
  0002c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00034	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  0003a	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0003f	6b c2 00	 imul	 eax, edx, 0
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0004a	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0

; 460  : 	v[2].x = v[1].x =  1.0f;

  00050	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00055	c1 e0 00	 shl	 eax, 0
  00058	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00060	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0
  00066	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0006b	d1 e1		 shl	 ecx, 1
  0006d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00075	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0

; 461  : 	v[0].y = v[1].y =  1.0f-((height<<1)/(float)vid.height);

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0007e	d1 e0		 shl	 eax, 1
  00080	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00084	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  0008c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00090	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00098	f3 0f 5c c8	 subss	 xmm1, xmm0
  0009c	f3 0f 11 8d 50
	ff ff ff	 movss	 DWORD PTR tv88[ebp], xmm1
  000a4	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000a9	c1 e1 00	 shl	 ecx, 0
  000ac	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv88[ebp]
  000b4	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0
  000ba	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000bf	6b c2 00	 imul	 eax, edx, 0
  000c2	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv88[ebp]
  000ca	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0

; 462  : 	v[2].y = v[3].y =  1.0f;

  000d0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000d5	6b c8 03	 imul	 ecx, eax, 3
  000d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000e0	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0
  000e6	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000eb	d1 e2		 shl	 edx, 1
  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f5	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0

; 463  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  000fb	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00100	6b c8 03	 imul	 ecx, eax, 3
  00103	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0010b	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  00111	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00116	d1 e2		 shl	 edx, 1
  00118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00120	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  00126	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0012b	c1 e0 00	 shl	 eax, 0
  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00136	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  0013c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00141	6b d1 00	 imul	 edx, ecx, 0
  00144	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0014c	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 464  : 
; 465  : 	v[0].sow = v[3].sow = 0.0f;

  00152	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00157	6b c8 03	 imul	 ecx, eax, 3
  0015a	0f 57 c0	 xorps	 xmm0, xmm0
  0015d	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0
  00163	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00168	6b c2 00	 imul	 eax, edx, 0
  0016b	0f 57 c0	 xorps	 xmm0, xmm0
  0016e	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 466  : 	v[2].sow = v[1].sow = 1.0f;

  00174	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00179	c1 e0 00	 shl	 eax, 0
  0017c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00184	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0
  0018a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0018f	d1 e1		 shl	 ecx, 1
  00191	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00199	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0

; 467  : 	v[0].tow = v[1].tow = 1.0f;

  0019f	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001a4	c1 e0 00	 shl	 eax, 0
  001a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001af	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  001b5	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001ba	6b d1 00	 imul	 edx, ecx, 0
  001bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001c5	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 468  : 	v[2].tow = v[3].tow = 0.0f;

  001cb	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001d0	6b c8 03	 imul	 ecx, eax, 3
  001d3	0f 57 c0	 xorps	 xmm0, xmm0
  001d6	f3 0f 11 44 0d
	b0		 movss	 DWORD PTR _v$[ebp+ecx+20], xmm0
  001dc	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001e1	d1 e2		 shl	 edx, 1
  001e3	0f 57 c0	 xorps	 xmm0, xmm0
  001e6	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 469  : 
; 470  : 	Surf.FlatColor.rgba = UINT2RGBA(color);

  001ec	8b 45 08	 mov	 eax, DWORD PTR _color$[ebp]
  001ef	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001f4	c1 e0 18	 shl	 eax, 24			; 00000018H
  001f7	8b 4d 08	 mov	 ecx, DWORD PTR _color$[ebp]
  001fa	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00200	c1 e1 08	 shl	 ecx, 8
  00203	0b c1		 or	 eax, ecx
  00205	8b 55 08	 mov	 edx, DWORD PTR _color$[ebp]
  00208	81 e2 00 00 ff
	00		 and	 edx, 16711680		; 00ff0000H
  0020e	c1 ea 08	 shr	 edx, 8
  00211	0b c2		 or	 eax, edx
  00213	8b 4d 08	 mov	 ecx, DWORD PTR _color$[ebp]
  00216	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  0021c	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0021f	0b c1		 or	 eax, ecx
  00221	89 45 98	 mov	 DWORD PTR _Surf$[ebp+4], eax

; 471  : 	Surf.FlatColor.s.alpha = 0x80;

  00224	c6 45 9b 80	 mov	 BYTE PTR _Surf$[ebp+7], 128 ; 00000080H

; 472  : 
; 473  : 	HWD.pfnDrawPolygon(&Surf, v, 4, PF_NoTexture|PF_Modulated|PF_Translucent|PF_NoDepthTest);

  00228	68 02 32 00 00	 push	 12802			; 00003202H
  0022d	6a 04		 push	 4
  0022f	8d 45 9c	 lea	 eax, DWORD PTR _v$[ebp]
  00232	50		 push	 eax
  00233	8d 4d 94	 lea	 ecx, DWORD PTR _Surf$[ebp]
  00236	51		 push	 ecx
  00237	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  0023d	90		 npad	 1

; 474  : }

  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00244	33 cd		 xor	 ecx, ebp
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
_HWR_DrawConsoleBack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_FadeScreenMenuBack
_TEXT	SEGMENT
tv88 = -176						; size = 4
_Surf$ = -108						; size = 8
_v$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_color$ = 8						; size = 4
_height$ = 12						; size = 4
_HWR_FadeScreenMenuBack PROC				; COMDAT

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 426  : 	FOutVector  v[4];
; 427  : 	FSurfaceInfo Surf;
; 428  : 
; 429  : 	// setup some neat-o translucency effect
; 430  : 	if (!height) //cool hack 0 height is full height

  00016	83 7d 0c 00	 cmp	 DWORD PTR _height$[ebp], 0
  0001a	75 08		 jne	 SHORT $LN2@HWR_FadeSc

; 431  : 		height = vid.height;

  0001c	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00021	89 45 0c	 mov	 DWORD PTR _height$[ebp], eax
$LN2@HWR_FadeSc:

; 432  : 
; 433  : 	v[0].x = v[3].x = -1.0f;

  00024	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00029	6b c8 03	 imul	 ecx, eax, 3
  0002c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00034	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0
  0003a	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0003f	6b c2 00	 imul	 eax, edx, 0
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0004a	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0

; 434  : 	v[2].x = v[1].x =  1.0f;

  00050	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00055	c1 e0 00	 shl	 eax, 0
  00058	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00060	f3 0f 11 44 05
	9c		 movss	 DWORD PTR _v$[ebp+eax], xmm0
  00066	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0006b	d1 e1		 shl	 ecx, 1
  0006d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00075	f3 0f 11 44 0d
	9c		 movss	 DWORD PTR _v$[ebp+ecx], xmm0

; 435  : 	v[0].y = v[1].y =  1.0f-((height<<1)/(float)vid.height);

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0007e	d1 e0		 shl	 eax, 1
  00080	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00084	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  0008c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00090	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00098	f3 0f 5c c8	 subss	 xmm1, xmm0
  0009c	f3 0f 11 8d 50
	ff ff ff	 movss	 DWORD PTR tv88[ebp], xmm1
  000a4	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000a9	c1 e1 00	 shl	 ecx, 0
  000ac	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv88[ebp]
  000b4	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0
  000ba	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000bf	6b c2 00	 imul	 eax, edx, 0
  000c2	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv88[ebp]
  000ca	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _v$[ebp+eax+4], xmm0

; 436  : 	v[2].y = v[3].y =  1.0f;

  000d0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000d5	6b c8 03	 imul	 ecx, eax, 3
  000d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000e0	f3 0f 11 44 0d
	a0		 movss	 DWORD PTR _v$[ebp+ecx+4], xmm0
  000e6	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000eb	d1 e2		 shl	 edx, 1
  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f5	f3 0f 11 44 15
	a0		 movss	 DWORD PTR _v$[ebp+edx+4], xmm0

; 437  : 	v[0].z = v[1].z = v[2].z = v[3].z = 1.0f;

  000fb	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00100	6b c8 03	 imul	 ecx, eax, 3
  00103	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0010b	f3 0f 11 44 0d
	a4		 movss	 DWORD PTR _v$[ebp+ecx+8], xmm0
  00111	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00116	d1 e2		 shl	 edx, 1
  00118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00120	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0
  00126	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0012b	c1 e0 00	 shl	 eax, 0
  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00136	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _v$[ebp+eax+8], xmm0
  0013c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00141	6b d1 00	 imul	 edx, ecx, 0
  00144	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0014c	f3 0f 11 44 15
	a4		 movss	 DWORD PTR _v$[ebp+edx+8], xmm0

; 438  : 
; 439  : 	v[0].sow = v[3].sow = 0.0f;

  00152	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00157	6b c8 03	 imul	 ecx, eax, 3
  0015a	0f 57 c0	 xorps	 xmm0, xmm0
  0015d	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0
  00163	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00168	6b c2 00	 imul	 eax, edx, 0
  0016b	0f 57 c0	 xorps	 xmm0, xmm0
  0016e	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0

; 440  : 	v[2].sow = v[1].sow = 1.0f;

  00174	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00179	c1 e0 00	 shl	 eax, 0
  0017c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00184	f3 0f 11 44 05
	ac		 movss	 DWORD PTR _v$[ebp+eax+16], xmm0
  0018a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0018f	d1 e1		 shl	 ecx, 1
  00191	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00199	f3 0f 11 44 0d
	ac		 movss	 DWORD PTR _v$[ebp+ecx+16], xmm0

; 441  : 	v[0].tow = v[1].tow = 1.0f;

  0019f	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001a4	c1 e0 00	 shl	 eax, 0
  001a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001af	f3 0f 11 44 05
	b0		 movss	 DWORD PTR _v$[ebp+eax+20], xmm0
  001b5	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001ba	6b d1 00	 imul	 edx, ecx, 0
  001bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001c5	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 442  : 	v[2].tow = v[3].tow = 0.0f;

  001cb	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  001d0	6b c8 03	 imul	 ecx, eax, 3
  001d3	0f 57 c0	 xorps	 xmm0, xmm0
  001d6	f3 0f 11 44 0d
	b0		 movss	 DWORD PTR _v$[ebp+ecx+20], xmm0
  001dc	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  001e1	d1 e2		 shl	 edx, 1
  001e3	0f 57 c0	 xorps	 xmm0, xmm0
  001e6	f3 0f 11 44 15
	b0		 movss	 DWORD PTR _v$[ebp+edx+20], xmm0

; 443  : 
; 444  : 	Surf.FlatColor.rgba = UINT2RGBA(color);

  001ec	8b 45 08	 mov	 eax, DWORD PTR _color$[ebp]
  001ef	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001f4	c1 e0 18	 shl	 eax, 24			; 00000018H
  001f7	8b 4d 08	 mov	 ecx, DWORD PTR _color$[ebp]
  001fa	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00200	c1 e1 08	 shl	 ecx, 8
  00203	0b c1		 or	 eax, ecx
  00205	8b 55 08	 mov	 edx, DWORD PTR _color$[ebp]
  00208	81 e2 00 00 ff
	00		 and	 edx, 16711680		; 00ff0000H
  0020e	c1 ea 08	 shr	 edx, 8
  00211	0b c2		 or	 eax, edx
  00213	8b 4d 08	 mov	 ecx, DWORD PTR _color$[ebp]
  00216	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  0021c	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0021f	0b c1		 or	 eax, ecx
  00221	89 45 98	 mov	 DWORD PTR _Surf$[ebp+4], eax

; 445  : 	Surf.FlatColor.s.alpha = (UINT8)((0xff/2) * ((float)height / vid.height)); //calum: varies console alpha

  00224	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _height$[ebp]
  00229	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00231	f3 0f 5e c1	 divss	 xmm0, xmm1
  00235	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42fe0000
  0023d	f3 0f 2c c0	 cvttss2si eax, xmm0
  00241	88 45 9b	 mov	 BYTE PTR _Surf$[ebp+7], al

; 446  : 	HWD.pfnDrawPolygon(&Surf, v, 4, PF_NoTexture|PF_Modulated|PF_Translucent|PF_NoDepthTest);

  00244	68 02 32 00 00	 push	 12802			; 00003202H
  00249	6a 04		 push	 4
  0024b	8d 45 9c	 lea	 eax, DWORD PTR _v$[ebp]
  0024e	50		 push	 eax
  0024f	8d 4d 94	 lea	 ecx, DWORD PTR _Surf$[ebp]
  00252	51		 push	 ecx
  00253	ff 15 10 00 00
	00		 call	 DWORD PTR _hwdriver+16
  00259	90		 npad	 1

; 447  : }

  0025a	5f		 pop	 edi
  0025b	5e		 pop	 esi
  0025c	5b		 pop	 ebx
  0025d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00260	33 cd		 xor	 ecx, ebp
  00262	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00267	8b e5		 mov	 esp, ebp
  00269	5d		 pop	 ebp
  0026a	c3		 ret	 0
_HWR_FadeScreenMenuBack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_drawAMline
_TEXT	SEGMENT
_color_rgba$ = -20					; size = 4
_v2$ = -16						; size = 8
_v1$ = -8						; size = 8
_fl$ = 8						; size = 4
_color$ = 12						; size = 4
_HWR_drawAMline PROC					; COMDAT

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 630  : 	F2DCoord v1, v2;
; 631  : 	RGBA_t color_rgba;
; 632  : 
; 633  : 	color_rgba = V_GetColor(color);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _color$[ebp]
  0000c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _pLocalPalette
  00017	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001a	89 55 ec	 mov	 DWORD PTR _color_rgba$[ebp], edx

; 634  : 
; 635  : 	v1.x = ((float)fl->a.x-(vid.width/2.0f))*(2.0f/vid.width);

  0001d	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00020	f3 0f 2a 00	 cvtsi2ss xmm0, DWORD PTR [eax]
  00024	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  0002c	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00034	f3 0f 5c c1	 subss	 xmm0, xmm1
  00038	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  00040	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40000000
  00048	f3 0f 5e d1	 divss	 xmm2, xmm1
  0004c	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00050	f3 0f 11 45 f8	 movss	 DWORD PTR _v1$[ebp], xmm0

; 636  : 	v1.y = ((float)fl->a.y-(vid.height/2.0f))*(2.0f/vid.height);

  00055	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00058	f3 0f 2a 40 04	 cvtsi2ss xmm0, DWORD PTR [eax+4]
  0005d	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00065	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  0006d	f3 0f 5c c1	 subss	 xmm0, xmm1
  00071	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  00079	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40000000
  00081	f3 0f 5e d1	 divss	 xmm2, xmm1
  00085	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00089	f3 0f 11 45 fc	 movss	 DWORD PTR _v1$[ebp+4], xmm0

; 637  : 
; 638  : 	v2.x = ((float)fl->b.x-(vid.width/2.0f))*(2.0f/vid.width);

  0008e	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00091	f3 0f 2a 40 08	 cvtsi2ss xmm0, DWORD PTR [eax+8]
  00096	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  0009e	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  000a6	f3 0f 5c c1	 subss	 xmm0, xmm1
  000aa	f3 0f 2a 0d 0c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+12
  000b2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40000000
  000ba	f3 0f 5e d1	 divss	 xmm2, xmm1
  000be	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000c2	f3 0f 11 45 f0	 movss	 DWORD PTR _v2$[ebp], xmm0

; 639  : 	v2.y = ((float)fl->b.y-(vid.height/2.0f))*(2.0f/vid.height);

  000c7	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  000ca	f3 0f 2a 40 0c	 cvtsi2ss xmm0, DWORD PTR [eax+12]
  000cf	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  000d7	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  000df	f3 0f 5c c1	 subss	 xmm0, xmm1
  000e3	f3 0f 2a 0d 10
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _vid+16
  000eb	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40000000
  000f3	f3 0f 5e d1	 divss	 xmm2, xmm1
  000f7	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000fb	f3 0f 11 45 f4	 movss	 DWORD PTR _v2$[ebp+4], xmm0

; 640  : 
; 641  : 	HWD.pfnDraw2DLine(&v1, &v2, color_rgba);

  00100	8b 45 ec	 mov	 eax, DWORD PTR _color_rgba$[ebp]
  00103	50		 push	 eax
  00104	8d 4d f0	 lea	 ecx, DWORD PTR _v2$[ebp]
  00107	51		 push	 ecx
  00108	8d 55 f8	 lea	 edx, DWORD PTR _v1$[ebp]
  0010b	52		 push	 edx
  0010c	ff 15 0c 00 00
	00		 call	 DWORD PTR _hwdriver+12
  00112	90		 npad	 1

; 642  : }

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
_HWR_drawAMline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw_draw.c
;	COMDAT _HWR_clearAutomap
_TEXT	SEGMENT
_fColor$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_HWR_clearAutomap PROC					; COMDAT

; 612  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 613  : 	FRGBAFloat fColor = {0, 0, 0, 1};

  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	f3 0f 11 45 ec	 movss	 DWORD PTR _fColor$[ebp], xmm0
  0001b	0f 57 c0	 xorps	 xmm0, xmm0
  0001e	f3 0f 11 45 f0	 movss	 DWORD PTR _fColor$[ebp+4], xmm0
  00023	0f 57 c0	 xorps	 xmm0, xmm0
  00026	f3 0f 11 45 f4	 movss	 DWORD PTR _fColor$[ebp+8], xmm0
  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00033	f3 0f 11 45 f8	 movss	 DWORD PTR _fColor$[ebp+12], xmm0

; 614  : 
; 615  : 	// minx,miny,maxx,maxy
; 616  : 	HWD.pfnGClipRect(0, 0, vid.width, vid.height, NZCLIP_PLANE);

  00038	51		 push	 ecx
  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0004b	50		 push	 eax
  0004c	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00052	51		 push	 ecx
  00053	6a 00		 push	 0
  00055	6a 00		 push	 0
  00057	ff 15 24 00 00
	00		 call	 DWORD PTR _hwdriver+36
  0005d	90		 npad	 1

; 617  : 	HWD.pfnClearBuffer(true, true, &fColor);

  0005e	8d 45 ec	 lea	 eax, DWORD PTR _fColor$[ebp]
  00061	50		 push	 eax
  00062	6a 01		 push	 1
  00064	6a 01		 push	 1
  00066	ff 15 18 00 00
	00		 call	 DWORD PTR _hwdriver+24
  0006c	90		 npad	 1

; 618  : #ifndef HARDWAREFIX
; 619  : 	HWD.pfnGClipRect(0, 0, vid.width, vid.height, NZCLIP_PLANE);
; 620  : #endif
; 621  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_HWR_clearAutomap ENDP
_TEXT	ENDS
END
