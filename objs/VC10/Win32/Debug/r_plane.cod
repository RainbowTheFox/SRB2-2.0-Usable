; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\r_plane.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_floorplane:DWORD
COMM	_ceilingplane:DWORD
COMM	_lastopening:DWORD
COMM	_openings:DWORD
COMM	_maxopenings:DWORD
COMM	_floorclip:WORD:0780H
COMM	_ceilingclip:WORD:0780H
COMM	_frontscale:DWORD:0780H
COMM	_yslopetab:DWORD:012c0H
COMM	_cachedheight:DWORD:04b0H
COMM	_cacheddistance:DWORD:04b0H
COMM	_cachedxstep:DWORD:04b0H
COMM	_cachedystep:DWORD:04b0H
COMM	_basexscale:DWORD
COMM	_baseyscale:DWORD
COMM	_yslope:DWORD
COMM	_distscale:DWORD:0780H
COMM	_ffloor:BYTE:04b640H
COMM	_numffloors:DWORD
_DATA	ENDS
_BSS	SEGMENT
_freetail DD	01H DUP (?)
_BSS	ENDS
PUBLIC	_R_InitPlanes
PUBLIC	_R_ClearPlanes
PUBLIC	_R_MapPlane
PUBLIC	_R_MakeSpans
PUBLIC	_R_DrawPlanes
PUBLIC	_R_FindPlane
PUBLIC	_R_CheckPlane
PUBLIC	_R_ExpandPlane
PUBLIC	_R_PlaneBounds
PUBLIC	_R_DrawSinglePlane
PUBLIC	??_C@_0N@DEENFLGE@new_visplane@			; `string'
PUBLIC	??_C@_0BC@GFOKFIGO@?$CFs?3?5Out?5of?5memory@	; `string'
EXTRN	_memset:PROC
EXTRN	_calloc:PROC
EXTRN	_abs:PROC
EXTRN	_I_Error:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_R_GetColumn:PROC
EXTRN	_R_DrawTranslucentSpan_8:PROC
EXTRN	_R_DrawFogSpan_8:PROC
EXTRN	_VID_BlitLinearScreen:PROC
EXTRN	_W_LumpLength:PROC
EXTRN	_W_CacheLumpNum:PROC
EXTRN	_Z_ChangeTag2:PROC
EXTRN	_con_clipviewtop:DWORD
EXTRN	_finesine:BYTE
EXTRN	_finecosine:DWORD
EXTRN	_splitscreen:DWORD
EXTRN	_viewwidth:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_players:BYTE
EXTRN	_wallcolfunc:DWORD
EXTRN	_spanfunc:DWORD
EXTRN	_basespanfunc:DWORD
EXTRN	_splatfunc:DWORD
EXTRN	_vid:BYTE
EXTRN	_walldrawerfunc:DWORD
EXTRN	_textureheight:DWORD
EXTRN	_colormaps:DWORD
EXTRN	_viewx:DWORD
EXTRN	_viewy:DWORD
EXTRN	_viewz:DWORD
EXTRN	_viewangle:DWORD
EXTRN	_viewplayer:DWORD
EXTRN	_xtoviewangle:BYTE
EXTRN	_viewheight:DWORD
EXTRN	_centerxfrac:DWORD
EXTRN	_zlight:BYTE
EXTRN	_skytexture:DWORD
EXTRN	_skytexturemid:DWORD
EXTRN	_skyscale:DWORD
EXTRN	_skyflatnum:DWORD
EXTRN	_ylookup:BYTE
EXTRN	_columnofs:BYTE
EXTRN	_dc_colormap:DWORD
EXTRN	_dc_x:DWORD
EXTRN	_dc_yl:DWORD
EXTRN	_dc_yh:DWORD
EXTRN	_dc_iscale:DWORD
EXTRN	_dc_texturemid:DWORD
EXTRN	_dc_source:DWORD
EXTRN	_transtables:DWORD
EXTRN	_dc_texheight:DWORD
EXTRN	_ds_y:DWORD
EXTRN	_ds_x1:DWORD
EXTRN	_ds_x2:DWORD
EXTRN	_ds_colormap:DWORD
EXTRN	_ds_xfrac:DWORD
EXTRN	_ds_yfrac:DWORD
EXTRN	_ds_xstep:DWORD
EXTRN	_ds_ystep:DWORD
EXTRN	_ds_source:DWORD
EXTRN	_ds_transmap:DWORD
EXTRN	_nflatxshift:DWORD
EXTRN	_nflatyshift:DWORD
EXTRN	_nflatshiftup:DWORD
EXTRN	_nflatmask:DWORD
EXTRN	_screens:BYTE
EXTRN	_leveltime:DWORD
EXTRN	_levelflats:DWORD
_BSS	SEGMENT
_visplanes DD	0200H DUP (?)
_currentplane DD 01H DUP (?)
_spanstart DD	04b0H DUP (?)
_planezlight DD	01H DUP (?)
_planeheight DD	01H DUP (?)
_xoffs	DD	01H DUP (?)
_yoffs	DD	01H DUP (?)
_bgofs	DD	01H DUP (?)
_wtofs	DD	01H DUP (?)
_waterofs DD	01H DUP (?)
_itswater DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BC@GFOKFIGO@?$CFs?3?5Out?5of?5memory@
CONST	SEGMENT
??_C@_0BC@GFOKFIGO@?$CFs?3?5Out?5of?5memory@ DB '%s: Out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DEENFLGE@new_visplane@
CONST	SEGMENT
??_C@_0N@DEENFLGE@new_visplane@ DB 'new_visplane', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_freehead DD	FLAT:_freetail
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _new_visplane
_TEXT	SEGMENT
_check$ = -4						; size = 4
_hash$ = 8						; size = 4
_new_visplane PROC					; COMDAT

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 364  : 	visplane_t *check = freetail;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _freetail
  0000e	89 45 fc	 mov	 DWORD PTR _check$[ebp], eax

; 365  : 	if (!check)

  00011	83 7d fc 00	 cmp	 DWORD PTR _check$[ebp], 0
  00015	75 2c		 jne	 SHORT $LN2@new_vispla

; 366  : 	{
; 367  : 		check = calloc(1, sizeof (*check));

  00017	68 48 1e 00 00	 push	 7752			; 00001e48H
  0001c	6a 01		 push	 1
  0001e	e8 00 00 00 00	 call	 _calloc
  00023	83 c4 08	 add	 esp, 8
  00026	89 45 fc	 mov	 DWORD PTR _check$[ebp], eax

; 368  : 		if (check == NULL) I_Error("%s: Out of memory", "new_visplane"); // FIXME: ugly

  00029	83 7d fc 00	 cmp	 DWORD PTR _check$[ebp], 0
  0002d	75 12		 jne	 SHORT $LN4@new_vispla
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DEENFLGE@new_visplane@
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GFOKFIGO@?$CFs?3?5Out?5of?5memory@
  00039	e8 00 00 00 00	 call	 _I_Error
  0003e	83 c4 08	 add	 esp, 8
$LN4@new_vispla:

; 369  : 	}

  00041	eb 20		 jmp	 SHORT $LN5@new_vispla
$LN2@new_vispla:

; 370  : 	else
; 371  : 	{
; 372  : 		freetail = freetail->next;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR _freetail
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	89 0d 00 00 00
	00		 mov	 DWORD PTR _freetail, ecx

; 373  : 		if (!freetail)

  00050	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _freetail, 0
  00057	75 0a		 jne	 SHORT $LN5@new_vispla

; 374  : 			freehead = &freetail;

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _freehead, OFFSET _freetail
$LN5@new_vispla:

; 375  : 	}
; 376  : 	check->next = visplanes[hash];

  00063	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _hash$[ebp]
  00069	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _visplanes[ecx*4]
  00070	89 10		 mov	 DWORD PTR [eax], edx

; 377  : 	visplanes[hash] = check;

  00072	8b 45 08	 mov	 eax, DWORD PTR _hash$[ebp]
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _check$[ebp]
  00078	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _visplanes[eax*4], ecx

; 378  : 	return check;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]

; 379  : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
_new_visplane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_DrawTranslucentWaterSpan_8
_TEXT	SEGMENT
tv287 = -104						; size = 4
_count$ = -36						; size = 4
_dsrc$ = -32						; size = 4
_dest$ = -28						; size = 4
_colormap$ = -24					; size = 4
_source$ = -20						; size = 4
_ystep$ = -16						; size = 4
_xstep$ = -12						; size = 4
_yposition$ = -8					; size = 4
_xposition$ = -4					; size = 4
_R_DrawTranslucentWaterSpan_8 PROC			; COMDAT

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 159  : 	UINT32 xposition;
; 160  : 	UINT32 yposition;
; 161  : 	UINT32 xstep, ystep;
; 162  : 
; 163  : 	UINT8 *source;
; 164  : 	UINT8 *colormap;
; 165  : 	UINT8 *dest;
; 166  : 	UINT8 *dsrc;
; 167  : 
; 168  : 	size_t count;
; 169  : 
; 170  : 	// SoM: we only need 6 bits for the integer part (0 thru 63) so the rest
; 171  : 	// can be used for the fraction part. This allows calculation of the memory address in the
; 172  : 	// texture with two shifts, an OR and one AND. (see below)
; 173  : 	// for texture sizes > 64 the amount of precision we can allow will decrease, but only by one
; 174  : 	// bit per power of two (obviously)
; 175  : 	// Ok, because I was able to eliminate the variable spot below, this function is now FASTER
; 176  : 	// than the original span renderer. Whodathunkit?
; 177  : 	xposition = ds_xfrac << nflatshiftup; yposition = (ds_yfrac + waterofs) << nflatshiftup;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_xfrac
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatshiftup
  00014	d3 e0		 shl	 eax, cl
  00016	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_yfrac
  0001e	03 05 00 00 00
	00		 add	 eax, DWORD PTR _waterofs
  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatshiftup
  0002a	d3 e0		 shl	 eax, cl
  0002c	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 178  : 	xstep = ds_xstep << nflatshiftup; ystep = ds_ystep << nflatshiftup;

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_xstep
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatshiftup
  0003a	d3 e0		 shl	 eax, cl
  0003c	89 45 f4	 mov	 DWORD PTR _xstep$[ebp], eax
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_ystep
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatshiftup
  0004a	d3 e0		 shl	 eax, cl
  0004c	89 45 f0	 mov	 DWORD PTR _ystep$[ebp], eax

; 179  : 
; 180  : 	source = ds_source;

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_source
  00054	89 45 ec	 mov	 DWORD PTR _source$[ebp], eax

; 181  : 	colormap = ds_colormap;

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_colormap
  0005c	89 45 e8	 mov	 DWORD PTR _colormap$[ebp], eax

; 182  : 	dest = ylookup[ds_y] + columnofs[ds_x1];

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_y
  00064	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _ylookup[eax*4]
  0006b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_x1
  00071	03 0c 95 00 00
	00 00		 add	 ecx, DWORD PTR _columnofs[edx*4]
  00078	89 4d e4	 mov	 DWORD PTR _dest$[ebp], ecx

; 183  : 	dsrc = screens[1] + (ds_y+bgofs)*vid.width + ds_x1;

  0007b	b8 04 00 00 00	 mov	 eax, 4
  00080	c1 e0 00	 shl	 eax, 0
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ds_y
  00089	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _bgofs
  0008f	0f af 0d 0c 00
	00 00		 imul	 ecx, DWORD PTR _vid+12
  00096	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR _screens[eax]
  0009c	03 d1		 add	 edx, ecx
  0009e	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_x1
  000a4	89 55 e0	 mov	 DWORD PTR _dsrc$[ebp], edx

; 184  : 	count = ds_x2 - ds_x1 + 1;

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_x2
  000ac	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _ds_x1
  000b2	83 c0 01	 add	 eax, 1
  000b5	89 45 dc	 mov	 DWORD PTR _count$[ebp], eax
$LN2@R_DrawTran:

; 185  : 
; 186  : 	while (count >= 8)

  000b8	83 7d dc 08	 cmp	 DWORD PTR _count$[ebp], 8
  000bc	0f 82 4e 03 00
	00		 jb	 $LN3@R_DrawTran

; 187  : 	{
; 188  : 		// SoM: Why didn't I see this earlier? the spot variable is a waste now because we don't
; 189  : 		// have the uber complicated math to calculate it now, so that was a memory write we didn't
; 190  : 		// need!
; 191  : 		dest[0] = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  000cb	d3 e8		 shr	 eax, cl
  000cd	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  000d3	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  000d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  000dc	d3 ea		 shr	 edx, cl
  000de	0b c2		 or	 eax, edx
  000e0	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  000e3	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  000e7	c1 e2 08	 shl	 edx, 8
  000ea	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  000f0	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  000f3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000f6	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	6b c8 00	 imul	 ecx, eax, 0
  00102	8b 45 e4	 mov	 eax, DWORD PTR _dest$[ebp]
  00105	8b 75 e8	 mov	 esi, DWORD PTR _colormap$[ebp]
  00108	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  0010b	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  0010e	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  00111	83 c0 01	 add	 eax, 1
  00114	89 45 e0	 mov	 DWORD PTR _dsrc$[ebp], eax

; 192  : 		xposition += xstep;

  00117	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  0011a	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  0011d	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 193  : 		yposition += ystep;

  00120	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  00123	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  00126	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 194  : 
; 195  : 		dest[1] = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  00129	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  00132	d3 e8		 shr	 eax, cl
  00134	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  0013a	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  0013d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  00143	d3 ea		 shr	 edx, cl
  00145	0b c2		 or	 eax, edx
  00147	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  0014a	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0014e	c1 e2 08	 shl	 edx, 8
  00151	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  00157	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  0015a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0015d	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00161	b8 01 00 00 00	 mov	 eax, 1
  00166	c1 e0 00	 shl	 eax, 0
  00169	8b 4d e4	 mov	 ecx, DWORD PTR _dest$[ebp]
  0016c	8b 75 e8	 mov	 esi, DWORD PTR _colormap$[ebp]
  0016f	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  00172	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00175	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  00178	83 c0 01	 add	 eax, 1
  0017b	89 45 e0	 mov	 DWORD PTR _dsrc$[ebp], eax

; 196  : 		xposition += xstep;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  00181	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  00184	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 197  : 		yposition += ystep;

  00187	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  0018a	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  0018d	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 198  : 
; 199  : 		dest[2] = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  00190	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  00199	d3 e8		 shr	 eax, cl
  0019b	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  001a1	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  001a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  001aa	d3 ea		 shr	 edx, cl
  001ac	0b c2		 or	 eax, edx
  001ae	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  001b1	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  001b5	c1 e2 08	 shl	 edx, 8
  001b8	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  001be	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  001c1	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001c4	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  001c8	b8 01 00 00 00	 mov	 eax, 1
  001cd	d1 e0		 shl	 eax, 1
  001cf	8b 4d e4	 mov	 ecx, DWORD PTR _dest$[ebp]
  001d2	8b 75 e8	 mov	 esi, DWORD PTR _colormap$[ebp]
  001d5	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  001d8	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001db	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  001de	83 c0 01	 add	 eax, 1
  001e1	89 45 e0	 mov	 DWORD PTR _dsrc$[ebp], eax

; 200  : 		xposition += xstep;

  001e4	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  001e7	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  001ea	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 201  : 		yposition += ystep;

  001ed	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  001f0	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  001f3	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 202  : 
; 203  : 		dest[3] = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  001f6	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  001f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  001ff	d3 e8		 shr	 eax, cl
  00201	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  00207	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  0020a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  00210	d3 ea		 shr	 edx, cl
  00212	0b c2		 or	 eax, edx
  00214	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  00217	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0021b	c1 e2 08	 shl	 edx, 8
  0021e	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  00224	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  00227	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0022a	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0022e	b8 01 00 00 00	 mov	 eax, 1
  00233	6b c8 03	 imul	 ecx, eax, 3
  00236	8b 45 e4	 mov	 eax, DWORD PTR _dest$[ebp]
  00239	8b 75 e8	 mov	 esi, DWORD PTR _colormap$[ebp]
  0023c	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  0023f	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00242	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  00245	83 c0 01	 add	 eax, 1
  00248	89 45 e0	 mov	 DWORD PTR _dsrc$[ebp], eax

; 204  : 		xposition += xstep;

  0024b	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  0024e	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  00251	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 205  : 		yposition += ystep;

  00254	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  00257	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  0025a	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 206  : 
; 207  : 		dest[4] = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  0025d	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  00260	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  00266	d3 e8		 shr	 eax, cl
  00268	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  0026e	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  00271	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  00277	d3 ea		 shr	 edx, cl
  00279	0b c2		 or	 eax, edx
  0027b	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  0027e	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00282	c1 e2 08	 shl	 edx, 8
  00285	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  0028b	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  0028e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00291	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00295	b8 01 00 00 00	 mov	 eax, 1
  0029a	c1 e0 02	 shl	 eax, 2
  0029d	8b 4d e4	 mov	 ecx, DWORD PTR _dest$[ebp]
  002a0	8b 75 e8	 mov	 esi, DWORD PTR _colormap$[ebp]
  002a3	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  002a6	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002a9	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  002ac	83 c0 01	 add	 eax, 1
  002af	89 45 e0	 mov	 DWORD PTR _dsrc$[ebp], eax

; 208  : 		xposition += xstep;

  002b2	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  002b5	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  002b8	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 209  : 		yposition += ystep;

  002bb	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  002be	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  002c1	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 210  : 
; 211  : 		dest[5] = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  002c4	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  002c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  002cd	d3 e8		 shr	 eax, cl
  002cf	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  002d5	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  002d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  002de	d3 ea		 shr	 edx, cl
  002e0	0b c2		 or	 eax, edx
  002e2	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  002e5	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  002e9	c1 e2 08	 shl	 edx, 8
  002ec	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  002f2	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  002f5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  002f8	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  002fc	b8 01 00 00 00	 mov	 eax, 1
  00301	6b c8 05	 imul	 ecx, eax, 5
  00304	8b 45 e4	 mov	 eax, DWORD PTR _dest$[ebp]
  00307	8b 75 e8	 mov	 esi, DWORD PTR _colormap$[ebp]
  0030a	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  0030d	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00310	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  00313	83 c0 01	 add	 eax, 1
  00316	89 45 e0	 mov	 DWORD PTR _dsrc$[ebp], eax

; 212  : 		xposition += xstep;

  00319	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  0031c	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  0031f	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 213  : 		yposition += ystep;

  00322	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  00325	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  00328	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 214  : 
; 215  : 		dest[6] = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  0032b	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  0032e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  00334	d3 e8		 shr	 eax, cl
  00336	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  0033c	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  0033f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  00345	d3 ea		 shr	 edx, cl
  00347	0b c2		 or	 eax, edx
  00349	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  0034c	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00350	c1 e2 08	 shl	 edx, 8
  00353	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  00359	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  0035c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0035f	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00363	b8 01 00 00 00	 mov	 eax, 1
  00368	6b c8 06	 imul	 ecx, eax, 6
  0036b	8b 45 e4	 mov	 eax, DWORD PTR _dest$[ebp]
  0036e	8b 75 e8	 mov	 esi, DWORD PTR _colormap$[ebp]
  00371	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  00374	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00377	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  0037a	83 c0 01	 add	 eax, 1
  0037d	89 45 e0	 mov	 DWORD PTR _dsrc$[ebp], eax

; 216  : 		xposition += xstep;

  00380	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  00383	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  00386	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 217  : 		yposition += ystep;

  00389	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  0038c	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  0038f	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 218  : 
; 219  : 		dest[7] = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  00392	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  00395	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  0039b	d3 e8		 shr	 eax, cl
  0039d	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  003a3	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  003a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  003ac	d3 ea		 shr	 edx, cl
  003ae	0b c2		 or	 eax, edx
  003b0	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  003b3	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  003b7	c1 e2 08	 shl	 edx, 8
  003ba	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  003c0	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  003c3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  003c6	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	6b c8 07	 imul	 ecx, eax, 7
  003d2	8b 45 e4	 mov	 eax, DWORD PTR _dest$[ebp]
  003d5	8b 75 e8	 mov	 esi, DWORD PTR _colormap$[ebp]
  003d8	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  003db	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  003de	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  003e1	83 c0 01	 add	 eax, 1
  003e4	89 45 e0	 mov	 DWORD PTR _dsrc$[ebp], eax

; 220  : 		xposition += xstep;

  003e7	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  003ea	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  003ed	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 221  : 		yposition += ystep;

  003f0	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  003f3	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  003f6	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 222  : 
; 223  : 		dest += 8;

  003f9	8b 45 e4	 mov	 eax, DWORD PTR _dest$[ebp]
  003fc	83 c0 08	 add	 eax, 8
  003ff	89 45 e4	 mov	 DWORD PTR _dest$[ebp], eax

; 224  : 		count -= 8;

  00402	8b 45 dc	 mov	 eax, DWORD PTR _count$[ebp]
  00405	83 e8 08	 sub	 eax, 8
  00408	89 45 dc	 mov	 DWORD PTR _count$[ebp], eax

; 225  : 	}

  0040b	e9 a8 fc ff ff	 jmp	 $LN2@R_DrawTran
$LN3@R_DrawTran:

; 226  : 	while (count--)

  00410	8b 45 dc	 mov	 eax, DWORD PTR _count$[ebp]
  00413	89 45 98	 mov	 DWORD PTR tv287[ebp], eax
  00416	8b 4d dc	 mov	 ecx, DWORD PTR _count$[ebp]
  00419	83 e9 01	 sub	 ecx, 1
  0041c	89 4d dc	 mov	 DWORD PTR _count$[ebp], ecx
  0041f	83 7d 98 00	 cmp	 DWORD PTR tv287[ebp], 0
  00423	74 69		 je	 SHORT $LN5@R_DrawTran

; 227  : 	{
; 228  : 		*dest++ = colormap[*(ds_transmap + (source[((yposition >> nflatyshift) & nflatmask) | (xposition >> nflatxshift)] << 8) + *dsrc++)];

  00425	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  00428	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatyshift
  0042e	d3 e8		 shr	 eax, cl
  00430	23 05 00 00 00
	00		 and	 eax, DWORD PTR _nflatmask
  00436	8b 55 fc	 mov	 edx, DWORD PTR _xposition$[ebp]
  00439	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nflatxshift
  0043f	d3 ea		 shr	 edx, cl
  00441	0b c2		 or	 eax, edx
  00443	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  00446	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0044a	c1 e2 08	 shl	 edx, 8
  0044d	03 15 00 00 00
	00		 add	 edx, DWORD PTR _ds_transmap
  00453	8b 45 e0	 mov	 eax, DWORD PTR _dsrc$[ebp]
  00456	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00459	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0045d	8b 45 e4	 mov	 eax, DWORD PTR _dest$[ebp]
  00460	8b 4d e8	 mov	 ecx, DWORD PTR _colormap$[ebp]
  00463	8a 14 11	 mov	 dl, BYTE PTR [ecx+edx]
  00466	88 10		 mov	 BYTE PTR [eax], dl
  00468	8b 45 e4	 mov	 eax, DWORD PTR _dest$[ebp]
  0046b	83 c0 01	 add	 eax, 1
  0046e	89 45 e4	 mov	 DWORD PTR _dest$[ebp], eax
  00471	8b 4d e0	 mov	 ecx, DWORD PTR _dsrc$[ebp]
  00474	83 c1 01	 add	 ecx, 1
  00477	89 4d e0	 mov	 DWORD PTR _dsrc$[ebp], ecx

; 229  : 		xposition += xstep;

  0047a	8b 45 fc	 mov	 eax, DWORD PTR _xposition$[ebp]
  0047d	03 45 f4	 add	 eax, DWORD PTR _xstep$[ebp]
  00480	89 45 fc	 mov	 DWORD PTR _xposition$[ebp], eax

; 230  : 		yposition += ystep;

  00483	8b 45 f8	 mov	 eax, DWORD PTR _yposition$[ebp]
  00486	03 45 f0	 add	 eax, DWORD PTR _ystep$[ebp]
  00489	89 45 f8	 mov	 DWORD PTR _yposition$[ebp], eax

; 231  : 	}

  0048c	eb 82		 jmp	 SHORT $LN3@R_DrawTran
$LN5@R_DrawTran:

; 232  : }

  0048e	5f		 pop	 edi
  0048f	5e		 pop	 esi
  00490	5b		 pop	 ebx
  00491	8b e5		 mov	 esp, ebp
  00493	5d		 pop	 ebp
  00494	c3		 ret	 0
_R_DrawTranslucentWaterSpan_8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_DrawSinglePlane
_TEXT	SEGMENT
tv193 = -96						; size = 4
tv230 = -96						; size = 4
_bottom$1 = -28						; size = 4
_top$2 = -24						; size = 4
_size$ = -20						; size = 4
_angle$ = -16						; size = 4
_stop$ = -12						; size = 4
_x$ = -8						; size = 4
_light$ = -4						; size = 4
_pl$ = 8						; size = 4
_R_DrawSinglePlane PROC					; COMDAT

; 658  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 659  : 	INT32 light = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _light$[ebp], 0

; 660  : 	INT32 x;
; 661  : 	INT32 stop, angle;
; 662  : 	size_t size;
; 663  : 
; 664  : 	if (!(pl->minx <= pl->maxx))

  00010	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00016	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00019	3b 51 20	 cmp	 edx, DWORD PTR [ecx+32]
  0001c	7e 05		 jle	 SHORT $LN7@R_DrawSing

; 665  : 		return;

  0001e	e9 ae 06 00 00	 jmp	 $LN1@R_DrawSing
$LN7@R_DrawSing:

; 666  : 
; 667  : 	itswater = false;

  00023	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _itswater, 0

; 668  : 	spanfunc = basespanfunc;

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR _basespanfunc
  00032	a3 00 00 00 00	 mov	 DWORD PTR _spanfunc, eax

; 669  : 	if (pl->ffloor)

  00037	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0003a	83 b8 44 1e 00
	00 00		 cmp	 DWORD PTR [eax+7748], 0
  00041	0f 84 fe 02 00
	00		 je	 $LN8@R_DrawSing

; 670  : 	{
; 671  : 		if (pl->ffloor->flags & FF_TRANSLUCENT)

  00047	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0004a	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  00050	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00053	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  00059	0f 84 92 01 00
	00		 je	 $LN10@R_DrawSing

; 672  : 		{
; 673  : 			spanfunc = R_DrawTranslucentSpan_8;

  0005f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _spanfunc, OFFSET _R_DrawTranslucentSpan_8

; 674  : 
; 675  : 			// Hacked up support for alpha value in software mode Tails 09-24-2002
; 676  : 			if (pl->ffloor->alpha < 12)

  00069	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0006c	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  00072	83 79 4c 0c	 cmp	 DWORD PTR [ecx+76], 12	; 0000000cH
  00076	7d 0a		 jge	 SHORT $LN12@R_DrawSing

; 677  : 				return; // Don't even draw it

  00078	e9 54 06 00 00	 jmp	 $LN1@R_DrawSing
  0007d	e9 43 01 00 00	 jmp	 $LN31@R_DrawSing
$LN12@R_DrawSing:

; 678  : 			else if (pl->ffloor->alpha < 38)

  00082	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00085	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  0008b	83 79 4c 26	 cmp	 DWORD PTR [ecx+76], 38	; 00000026H
  0008f	7d 14		 jge	 SHORT $LN14@R_DrawSing

; 679  : 				ds_transmap = ((tr_trans90)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00096	05 00 00 08 00	 add	 eax, 524288		; 00080000H
  0009b	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  000a0	e9 20 01 00 00	 jmp	 $LN31@R_DrawSing
$LN14@R_DrawSing:

; 680  : 			else if (pl->ffloor->alpha < 64)

  000a5	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  000a8	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  000ae	83 79 4c 40	 cmp	 DWORD PTR [ecx+76], 64	; 00000040H
  000b2	7d 14		 jge	 SHORT $LN16@R_DrawSing

; 681  : 				ds_transmap = ((tr_trans80)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  000b9	05 00 00 07 00	 add	 eax, 458752		; 00070000H
  000be	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  000c3	e9 fd 00 00 00	 jmp	 $LN31@R_DrawSing
$LN16@R_DrawSing:

; 682  : 			else if (pl->ffloor->alpha < 89)

  000c8	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  000cb	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  000d1	83 79 4c 59	 cmp	 DWORD PTR [ecx+76], 89	; 00000059H
  000d5	7d 14		 jge	 SHORT $LN18@R_DrawSing

; 683  : 				ds_transmap = ((tr_trans70)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  000dc	05 00 00 06 00	 add	 eax, 393216		; 00060000H
  000e1	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  000e6	e9 da 00 00 00	 jmp	 $LN31@R_DrawSing
$LN18@R_DrawSing:

; 684  : 			else if (pl->ffloor->alpha < 115)

  000eb	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  000ee	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  000f4	83 79 4c 73	 cmp	 DWORD PTR [ecx+76], 115	; 00000073H
  000f8	7d 14		 jge	 SHORT $LN20@R_DrawSing

; 685  : 				ds_transmap = ((tr_trans60)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  000ff	05 00 00 05 00	 add	 eax, 327680		; 00050000H
  00104	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  00109	e9 b7 00 00 00	 jmp	 $LN31@R_DrawSing
$LN20@R_DrawSing:

; 686  : 			else if (pl->ffloor->alpha < 140)

  0010e	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00111	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  00117	81 79 4c 8c 00
	00 00		 cmp	 DWORD PTR [ecx+76], 140	; 0000008cH
  0011e	7d 14		 jge	 SHORT $LN22@R_DrawSing

; 687  : 				ds_transmap = ((tr_trans50)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00125	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  0012a	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  0012f	e9 91 00 00 00	 jmp	 $LN31@R_DrawSing
$LN22@R_DrawSing:

; 688  : 			else if (pl->ffloor->alpha < 166)

  00134	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00137	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  0013d	81 79 4c a6 00
	00 00		 cmp	 DWORD PTR [ecx+76], 166	; 000000a6H
  00144	7d 11		 jge	 SHORT $LN24@R_DrawSing

; 689  : 				ds_transmap = ((tr_trans40)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  0014b	05 00 00 03 00	 add	 eax, 196608		; 00030000H
  00150	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  00155	eb 6e		 jmp	 SHORT $LN31@R_DrawSing
$LN24@R_DrawSing:

; 690  : 			else if (pl->ffloor->alpha < 192)

  00157	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0015a	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  00160	81 79 4c c0 00
	00 00		 cmp	 DWORD PTR [ecx+76], 192	; 000000c0H
  00167	7d 11		 jge	 SHORT $LN26@R_DrawSing

; 691  : 				ds_transmap = ((tr_trans30)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  0016e	05 00 00 02 00	 add	 eax, 131072		; 00020000H
  00173	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  00178	eb 4b		 jmp	 SHORT $LN31@R_DrawSing
$LN26@R_DrawSing:

; 692  : 			else if (pl->ffloor->alpha < 217)

  0017a	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0017d	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  00183	81 79 4c d9 00
	00 00		 cmp	 DWORD PTR [ecx+76], 217	; 000000d9H
  0018a	7d 11		 jge	 SHORT $LN28@R_DrawSing

; 693  : 				ds_transmap = ((tr_trans20)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  00191	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  00196	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  0019b	eb 28		 jmp	 SHORT $LN31@R_DrawSing
$LN28@R_DrawSing:

; 694  : 			else if (pl->ffloor->alpha < 243)

  0019d	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  001a0	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  001a6	81 79 4c f3 00
	00 00		 cmp	 DWORD PTR [ecx+76], 243	; 000000f3H
  001ad	7d 0c		 jge	 SHORT $LN30@R_DrawSing

; 695  : 				ds_transmap = ((tr_trans10)<<FF_TRANSSHIFT) - 0x10000 + transtables;

  001af	a1 00 00 00 00	 mov	 eax, DWORD PTR _transtables
  001b4	a3 00 00 00 00	 mov	 DWORD PTR _ds_transmap, eax
  001b9	eb 0a		 jmp	 SHORT $LN31@R_DrawSing
$LN30@R_DrawSing:

; 696  : 			else // Opaque, but allow transparent flat pixels
; 697  : 				spanfunc = splatfunc;

  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _splatfunc
  001c0	a3 00 00 00 00	 mov	 DWORD PTR _spanfunc, eax
$LN31@R_DrawSing:

; 698  : 
; 699  : 			if (pl->extra_colormap && pl->extra_colormap->fog)

  001c5	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  001c8	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  001cc	74 1a		 je	 SHORT $LN32@R_DrawSing
  001ce	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  001d1	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001d4	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  001d8	74 0e		 je	 SHORT $LN32@R_DrawSing

; 700  : 				light = (pl->lightlevel >> LIGHTSEGSHIFT);

  001da	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  001dd	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001e0	c1 f9 03	 sar	 ecx, 3
  001e3	89 4d fc	 mov	 DWORD PTR _light$[ebp], ecx
  001e6	eb 07		 jmp	 SHORT $LN33@R_DrawSing
$LN32@R_DrawSing:

; 701  : 			else
; 702  : 				light = LIGHTLEVELS-1;

  001e8	c7 45 fc 1f 00
	00 00		 mov	 DWORD PTR _light$[ebp], 31 ; 0000001fH
$LN33@R_DrawSing:

; 703  : 		}

  001ef	eb 38		 jmp	 SHORT $LN35@R_DrawSing
$LN10@R_DrawSing:

; 704  : 		else if (pl->ffloor->flags & FF_FOG)

  001f1	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  001f4	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  001fa	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001fd	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  00203	74 18		 je	 SHORT $LN34@R_DrawSing

; 705  : 		{
; 706  : 			spanfunc = R_DrawFogSpan_8;

  00205	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _spanfunc, OFFSET _R_DrawFogSpan_8

; 707  : 			light = (pl->lightlevel >> LIGHTSEGSHIFT);

  0020f	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00212	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00215	c1 f9 03	 sar	 ecx, 3
  00218	89 4d fc	 mov	 DWORD PTR _light$[ebp], ecx

; 708  : 		}

  0021b	eb 0c		 jmp	 SHORT $LN35@R_DrawSing
$LN34@R_DrawSing:

; 709  : 		else light = (pl->lightlevel >> LIGHTSEGSHIFT);

  0021d	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00220	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00223	c1 f9 03	 sar	 ecx, 3
  00226	89 4d fc	 mov	 DWORD PTR _light$[ebp], ecx
$LN35@R_DrawSing:

; 710  : 
; 711  : #ifndef NOWATER
; 712  : 		if (pl->ffloor->flags & FF_RIPPLE)

  00229	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0022c	8b 88 44 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7748]
  00232	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00235	81 e2 00 00 00
	40		 and	 edx, 1073741824		; 40000000H
  0023b	0f 84 02 01 00
	00		 je	 $LN37@R_DrawSing

; 713  : 		{
; 714  : 			INT32 top, bottom;
; 715  : 
; 716  : 			itswater = true;

  00241	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _itswater, 1

; 717  : 			if (spanfunc == R_DrawTranslucentSpan_8)

  0024b	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _spanfunc, OFFSET _R_DrawTranslucentSpan_8
  00255	0f 85 e8 00 00
	00		 jne	 $LN37@R_DrawSing

; 718  : 			{
; 719  : 				spanfunc = R_DrawTranslucentWaterSpan_8;

  0025b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _spanfunc, OFFSET _R_DrawTranslucentWaterSpan_8

; 720  : 
; 721  : 				// Copy the current scene, ugh
; 722  : 				top = pl->high-8;

  00265	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00268	8b 88 30 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7728]
  0026e	83 e9 08	 sub	 ecx, 8
  00271	89 4d e8	 mov	 DWORD PTR _top$2[ebp], ecx

; 723  : 				bottom = pl->low+8;

  00274	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00277	8b 88 34 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7732]
  0027d	83 c1 08	 add	 ecx, 8
  00280	89 4d e4	 mov	 DWORD PTR _bottom$1[ebp], ecx

; 724  : 
; 725  : 				if (top < 0)

  00283	83 7d e8 00	 cmp	 DWORD PTR _top$2[ebp], 0
  00287	7d 07		 jge	 SHORT $LN38@R_DrawSing

; 726  : 					top = 0;

  00289	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _top$2[ebp], 0
$LN38@R_DrawSing:

; 727  : 				if (bottom > vid.height)

  00290	8b 45 e4	 mov	 eax, DWORD PTR _bottom$1[ebp]
  00293	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  00299	7e 08		 jle	 SHORT $LN39@R_DrawSing

; 728  : 					bottom = vid.height;

  0029b	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  002a0	89 45 e4	 mov	 DWORD PTR _bottom$1[ebp], eax
$LN39@R_DrawSing:

; 729  : 
; 730  : 				// Only copy the part of the screen we need
; 731  : 				VID_BlitLinearScreen((splitscreen && viewplayer == &players[secondarydisplayplayer]) ? screens[0] + (top+(vid.height>>1))*vid.width : screens[0]+((top)*vid.width), screens[1]+((top)*vid.width),

  002a3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  002aa	74 3b		 je	 SHORT $LN51@R_DrawSing
  002ac	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  002b6	05 00 00 00 00	 add	 eax, OFFSET _players
  002bb	39 05 00 00 00
	00		 cmp	 DWORD PTR _viewplayer, eax
  002c1	75 24		 jne	 SHORT $LN51@R_DrawSing
  002c3	b9 04 00 00 00	 mov	 ecx, 4
  002c8	6b d1 00	 imul	 edx, ecx, 0
  002cb	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  002d0	d1 f8		 sar	 eax, 1
  002d2	03 45 e8	 add	 eax, DWORD PTR _top$2[ebp]
  002d5	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR _vid+12
  002dc	03 82 00 00 00
	00		 add	 eax, DWORD PTR _screens[edx]
  002e2	89 45 a0	 mov	 DWORD PTR tv193[ebp], eax
  002e5	eb 1b		 jmp	 SHORT $LN52@R_DrawSing
$LN51@R_DrawSing:
  002e7	b9 04 00 00 00	 mov	 ecx, 4
  002ec	6b d1 00	 imul	 edx, ecx, 0
  002ef	8b 45 e8	 mov	 eax, DWORD PTR _top$2[ebp]
  002f2	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR _vid+12
  002f9	03 82 00 00 00
	00		 add	 eax, DWORD PTR _screens[edx]
  002ff	89 45 a0	 mov	 DWORD PTR tv193[ebp], eax
$LN52@R_DrawSing:
  00302	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00308	51		 push	 ecx
  00309	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _vid+12
  0030f	52		 push	 edx
  00310	8b 45 e4	 mov	 eax, DWORD PTR _bottom$1[ebp]
  00313	2b 45 e8	 sub	 eax, DWORD PTR _top$2[ebp]
  00316	50		 push	 eax
  00317	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0031d	51		 push	 ecx
  0031e	ba 04 00 00 00	 mov	 edx, 4
  00323	c1 e2 00	 shl	 edx, 0
  00326	8b 45 e8	 mov	 eax, DWORD PTR _top$2[ebp]
  00329	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR _vid+12
  00330	03 82 00 00 00
	00		 add	 eax, DWORD PTR _screens[edx]
  00336	50		 push	 eax
  00337	8b 4d a0	 mov	 ecx, DWORD PTR tv193[ebp]
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 _VID_BlitLinearScreen
  00340	83 c4 18	 add	 esp, 24			; 00000018H
$LN37@R_DrawSing:

; 732  : 				                     vid.width, bottom-top,
; 733  : 				                     vid.width, vid.width);
; 734  : 			}
; 735  : 		}
; 736  : #endif
; 737  : 	}

  00343	eb 0c		 jmp	 SHORT $LN9@R_DrawSing
$LN8@R_DrawSing:

; 738  : 	else light = (pl->lightlevel >> LIGHTSEGSHIFT);

  00345	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00348	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0034b	c1 f9 03	 sar	 ecx, 3
  0034e	89 4d fc	 mov	 DWORD PTR _light$[ebp], ecx
$LN9@R_DrawSing:

; 739  : 
; 740  : 	if (viewangle != pl->viewangle)

  00351	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00354	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _viewangle
  0035a	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0035d	74 72		 je	 SHORT $LN40@R_DrawSing

; 741  : 	{
; 742  : 		memset(cachedheight, 0, sizeof (cachedheight));

  0035f	68 c0 12 00 00	 push	 4800			; 000012c0H
  00364	6a 00		 push	 0
  00366	68 00 00 00 00	 push	 OFFSET _cachedheight
  0036b	e8 00 00 00 00	 call	 _memset
  00370	83 c4 0c	 add	 esp, 12			; 0000000cH

; 743  : 		angle = (pl->viewangle-ANGLE_90)>>ANGLETOFINESHIFT;

  00373	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00376	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00379	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  0037f	c1 e9 13	 shr	 ecx, 19			; 00000013H
  00382	89 4d f0	 mov	 DWORD PTR _angle$[ebp], ecx

; 744  : 		basexscale = FixedDiv(FINECOSINE(angle),centerxfrac);

  00385	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerxfrac
  0038a	50		 push	 eax
  0038b	8b 4d f0	 mov	 ecx, DWORD PTR _angle$[ebp]
  0038e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00394	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00397	50		 push	 eax
  00398	e8 00 00 00 00	 call	 _FixedDiv
  0039d	83 c4 08	 add	 esp, 8
  003a0	a3 00 00 00 00	 mov	 DWORD PTR _basexscale, eax

; 745  : 		baseyscale = -FixedDiv(FINESINE(angle),centerxfrac);

  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerxfrac
  003aa	50		 push	 eax
  003ab	8b 4d f0	 mov	 ecx, DWORD PTR _angle$[ebp]
  003ae	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  003b5	52		 push	 edx
  003b6	e8 00 00 00 00	 call	 _FixedDiv
  003bb	83 c4 08	 add	 esp, 8
  003be	f7 d8		 neg	 eax
  003c0	a3 00 00 00 00	 mov	 DWORD PTR _baseyscale, eax

; 746  : 		viewangle = pl->viewangle;

  003c5	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  003c8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003cb	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewangle, ecx
$LN40@R_DrawSing:

; 747  : 	}
; 748  : 
; 749  : 	currentplane = pl;

  003d1	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  003d4	a3 00 00 00 00	 mov	 DWORD PTR _currentplane, eax

; 750  : 
; 751  : 	ds_source = (UINT8 *)

  003d9	6a 01		 push	 1
  003db	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  003de	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003e1	c1 e1 05	 shl	 ecx, 5
  003e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _levelflats
  003ea	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 _W_CacheLumpNum
  003f4	83 c4 08	 add	 esp, 8
  003f7	a3 00 00 00 00	 mov	 DWORD PTR _ds_source, eax

; 752  : 		W_CacheLumpNum(levelflats[pl->picnum].lumpnum,
; 753  : 			PU_STATIC); // Stay here until Z_ChangeTag
; 754  : 
; 755  : 	size = W_LumpLength(levelflats[pl->picnum].lumpnum);

  003fc	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  003ff	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00402	c1 e1 05	 shl	 ecx, 5
  00405	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _levelflats
  0040b	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 _W_LumpLength
  00415	83 c4 04	 add	 esp, 4
  00418	89 45 ec	 mov	 DWORD PTR _size$[ebp], eax

; 756  : 
; 757  : 	switch (size)

  0041b	8b 45 ec	 mov	 eax, DWORD PTR _size$[ebp]
  0041e	89 45 a0	 mov	 DWORD PTR tv230[ebp], eax
  00421	81 7d a0 00 00
	04 00		 cmp	 DWORD PTR tv230[ebp], 262144 ; 00040000H
  00428	77 39		 ja	 SHORT $LN53@R_DrawSing
  0042a	81 7d a0 00 00
	04 00		 cmp	 DWORD PTR tv230[ebp], 262144 ; 00040000H
  00431	0f 84 9d 00 00
	00		 je	 $LN43@R_DrawSing
  00437	81 7d a0 00 04
	00 00		 cmp	 DWORD PTR tv230[ebp], 1024 ; 00000400H
  0043e	0f 84 11 01 00
	00		 je	 $LN46@R_DrawSing
  00444	81 7d a0 00 40
	00 00		 cmp	 DWORD PTR tv230[ebp], 16384 ; 00004000H
  0044b	0f 84 da 00 00
	00		 je	 $LN45@R_DrawSing
  00451	81 7d a0 00 00
	01 00		 cmp	 DWORD PTR tv230[ebp], 65536 ; 00010000H
  00458	0f 84 a3 00 00
	00		 je	 $LN44@R_DrawSing
  0045e	e9 1c 01 00 00	 jmp	 $LN47@R_DrawSing
$LN53@R_DrawSing:
  00463	81 7d a0 00 00
	10 00		 cmp	 DWORD PTR tv230[ebp], 1048576 ; 00100000H
  0046a	74 3b		 je	 SHORT $LN42@R_DrawSing
  0046c	81 7d a0 00 00
	40 00		 cmp	 DWORD PTR tv230[ebp], 4194304 ; 00400000H
  00473	74 05		 je	 SHORT $LN41@R_DrawSing
  00475	e9 05 01 00 00	 jmp	 $LN47@R_DrawSing
$LN41@R_DrawSing:

; 758  : 	{
; 759  : 		case 4194304: // 2048x2048 lump
; 760  : 			nflatmask = 0x3FF800;

  0047a	c7 05 00 00 00
	00 00 f8 3f 00	 mov	 DWORD PTR _nflatmask, 4192256 ; 003ff800H

; 761  : 			nflatxshift = 21;

  00484	c7 05 00 00 00
	00 15 00 00 00	 mov	 DWORD PTR _nflatxshift, 21 ; 00000015H

; 762  : 			nflatyshift = 10;

  0048e	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _nflatyshift, 10 ; 0000000aH

; 763  : 			nflatshiftup = 5;

  00498	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR _nflatshiftup, 5

; 764  : 			break;

  004a2	e9 00 01 00 00	 jmp	 $LN2@R_DrawSing
$LN42@R_DrawSing:

; 765  : 		case 1048576: // 1024x1024 lump
; 766  : 			nflatmask = 0xFFC00;

  004a7	c7 05 00 00 00
	00 00 fc 0f 00	 mov	 DWORD PTR _nflatmask, 1047552 ; 000ffc00H

; 767  : 			nflatxshift = 22;

  004b1	c7 05 00 00 00
	00 16 00 00 00	 mov	 DWORD PTR _nflatxshift, 22 ; 00000016H

; 768  : 			nflatyshift = 12;

  004bb	c7 05 00 00 00
	00 0c 00 00 00	 mov	 DWORD PTR _nflatyshift, 12 ; 0000000cH

; 769  : 			nflatshiftup = 6;

  004c5	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR _nflatshiftup, 6

; 770  : 			break;

  004cf	e9 d3 00 00 00	 jmp	 $LN2@R_DrawSing
$LN43@R_DrawSing:

; 771  : 		case 262144:// 512x512 lump'
; 772  : 			nflatmask = 0x3FE00;

  004d4	c7 05 00 00 00
	00 00 fe 03 00	 mov	 DWORD PTR _nflatmask, 261632 ; 0003fe00H

; 773  : 			nflatxshift = 23;

  004de	c7 05 00 00 00
	00 17 00 00 00	 mov	 DWORD PTR _nflatxshift, 23 ; 00000017H

; 774  : 			nflatyshift = 14;

  004e8	c7 05 00 00 00
	00 0e 00 00 00	 mov	 DWORD PTR _nflatyshift, 14 ; 0000000eH

; 775  : 			nflatshiftup = 7;

  004f2	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR _nflatshiftup, 7

; 776  : 			break;

  004fc	e9 a6 00 00 00	 jmp	 $LN2@R_DrawSing
$LN44@R_DrawSing:

; 777  : 		case 65536: // 256x256 lump
; 778  : 			nflatmask = 0xFF00;

  00501	c7 05 00 00 00
	00 00 ff 00 00	 mov	 DWORD PTR _nflatmask, 65280 ; 0000ff00H

; 779  : 			nflatxshift = 24;

  0050b	c7 05 00 00 00
	00 18 00 00 00	 mov	 DWORD PTR _nflatxshift, 24 ; 00000018H

; 780  : 			nflatyshift = 16;

  00515	c7 05 00 00 00
	00 10 00 00 00	 mov	 DWORD PTR _nflatyshift, 16 ; 00000010H

; 781  : 			nflatshiftup = 8;

  0051f	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR _nflatshiftup, 8

; 782  : 			break;

  00529	eb 7c		 jmp	 SHORT $LN2@R_DrawSing
$LN45@R_DrawSing:

; 783  : 		case 16384: // 128x128 lump
; 784  : 			nflatmask = 0x3F80;

  0052b	c7 05 00 00 00
	00 80 3f 00 00	 mov	 DWORD PTR _nflatmask, 16256 ; 00003f80H

; 785  : 			nflatxshift = 25;

  00535	c7 05 00 00 00
	00 19 00 00 00	 mov	 DWORD PTR _nflatxshift, 25 ; 00000019H

; 786  : 			nflatyshift = 18;

  0053f	c7 05 00 00 00
	00 12 00 00 00	 mov	 DWORD PTR _nflatyshift, 18 ; 00000012H

; 787  : 			nflatshiftup = 9;

  00549	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR _nflatshiftup, 9

; 788  : 			break;

  00553	eb 52		 jmp	 SHORT $LN2@R_DrawSing
$LN46@R_DrawSing:

; 789  : 		case 1024: // 32x32 lump
; 790  : 			nflatmask = 0x3E0;

  00555	c7 05 00 00 00
	00 e0 03 00 00	 mov	 DWORD PTR _nflatmask, 992 ; 000003e0H

; 791  : 			nflatxshift = 27;

  0055f	c7 05 00 00 00
	00 1b 00 00 00	 mov	 DWORD PTR _nflatxshift, 27 ; 0000001bH

; 792  : 			nflatyshift = 22;

  00569	c7 05 00 00 00
	00 16 00 00 00	 mov	 DWORD PTR _nflatyshift, 22 ; 00000016H

; 793  : 			nflatshiftup = 11;

  00573	c7 05 00 00 00
	00 0b 00 00 00	 mov	 DWORD PTR _nflatshiftup, 11 ; 0000000bH

; 794  : 			break;

  0057d	eb 28		 jmp	 SHORT $LN2@R_DrawSing
$LN47@R_DrawSing:

; 795  : 		default: // 64x64 lump
; 796  : 			nflatmask = 0xFC0;

  0057f	c7 05 00 00 00
	00 c0 0f 00 00	 mov	 DWORD PTR _nflatmask, 4032 ; 00000fc0H

; 797  : 			nflatxshift = 26;

  00589	c7 05 00 00 00
	00 1a 00 00 00	 mov	 DWORD PTR _nflatxshift, 26 ; 0000001aH

; 798  : 			nflatyshift = 20;

  00593	c7 05 00 00 00
	00 14 00 00 00	 mov	 DWORD PTR _nflatyshift, 20 ; 00000014H

; 799  : 			nflatshiftup = 10;

  0059d	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _nflatshiftup, 10 ; 0000000aH
$LN2@R_DrawSing:

; 800  : 			break;
; 801  : 	}
; 802  : 
; 803  : 	xoffs = pl->xoffs;

  005a7	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  005aa	8b 88 38 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7736]
  005b0	89 0d 00 00 00
	00		 mov	 DWORD PTR _xoffs, ecx

; 804  : 	yoffs = pl->yoffs;

  005b6	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  005b9	8b 88 3c 1e 00
	00		 mov	 ecx, DWORD PTR [eax+7740]
  005bf	89 0d 00 00 00
	00		 mov	 DWORD PTR _yoffs, ecx

; 805  : 	planeheight = abs(pl->height - pl->viewz);

  005c5	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  005c8	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  005cb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  005ce	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  005d1	52		 push	 edx
  005d2	e8 00 00 00 00	 call	 _abs
  005d7	83 c4 04	 add	 esp, 4
  005da	a3 00 00 00 00	 mov	 DWORD PTR _planeheight, eax

; 806  : 
; 807  : 	if (light >= LIGHTLEVELS)

  005df	83 7d fc 20	 cmp	 DWORD PTR _light$[ebp], 32 ; 00000020H
  005e3	7c 07		 jl	 SHORT $LN48@R_DrawSing

; 808  : 		light = LIGHTLEVELS-1;

  005e5	c7 45 fc 1f 00
	00 00		 mov	 DWORD PTR _light$[ebp], 31 ; 0000001fH
$LN48@R_DrawSing:

; 809  : 
; 810  : 	if (light < 0)

  005ec	83 7d fc 00	 cmp	 DWORD PTR _light$[ebp], 0
  005f0	7d 07		 jge	 SHORT $LN49@R_DrawSing

; 811  : 		light = 0;

  005f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _light$[ebp], 0
$LN49@R_DrawSing:

; 812  : 
; 813  : 	planezlight = zlight[light];

  005f9	8b 45 fc	 mov	 eax, DWORD PTR _light$[ebp]
  005fc	c1 e0 09	 shl	 eax, 9
  005ff	05 00 00 00 00	 add	 eax, OFFSET _zlight
  00604	a3 00 00 00 00	 mov	 DWORD PTR _planezlight, eax

; 814  : 
; 815  : 	// set the maximum value for unsigned
; 816  : 	pl->top[pl->maxx+1] = 0xffff;

  00609	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0060c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0060f	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00614	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00617	66 89 54 48 2c	 mov	 WORD PTR [eax+ecx*2+44], dx

; 817  : 	pl->top[pl->minx-1] = 0xffff;

  0061c	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0061f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00622	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00627	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0062a	66 89 54 48 28	 mov	 WORD PTR [eax+ecx*2+40], dx

; 818  : 	pl->bottom[pl->maxx+1] = 0x0000;

  0062f	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00632	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00635	33 d2		 xor	 edx, edx
  00637	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0063a	66 89 94 48 30
	0f 00 00	 mov	 WORD PTR [eax+ecx*2+3888], dx

; 819  : 	pl->bottom[pl->minx-1] = 0x0000;

  00642	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00645	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00648	33 d2		 xor	 edx, edx
  0064a	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0064d	66 89 94 48 2c
	0f 00 00	 mov	 WORD PTR [eax+ecx*2+3884], dx

; 820  : 
; 821  : 	stop = pl->maxx + 1;

  00655	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00658	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0065b	83 c1 01	 add	 ecx, 1
  0065e	89 4d f4	 mov	 DWORD PTR _stop$[ebp], ecx

; 822  : 
; 823  : 	for (x = pl->minx; x <= stop; x++)

  00661	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00664	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00667	89 4d f8	 mov	 DWORD PTR _x$[ebp], ecx
  0066a	eb 09		 jmp	 SHORT $LN6@R_DrawSing
$LN4@R_DrawSing:
  0066c	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0066f	83 c0 01	 add	 eax, 1
  00672	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN6@R_DrawSing:
  00675	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00678	3b 45 f4	 cmp	 eax, DWORD PTR _stop$[ebp]
  0067b	7f 44		 jg	 SHORT $LN5@R_DrawSing

; 824  : 	{
; 825  : 		R_MakeSpans(x, pl->top[x-1], pl->bottom[x-1],

  0067d	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00680	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00683	0f b7 94 41 2e
	0f 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+3886]
  0068b	52		 push	 edx
  0068c	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0068f	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00692	0f b7 54 41 2a	 movzx	 edx, WORD PTR [ecx+eax*2+42]
  00697	52		 push	 edx
  00698	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0069b	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  0069e	0f b7 94 41 2c
	0f 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+3884]
  006a6	52		 push	 edx
  006a7	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  006aa	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  006ad	0f b7 54 41 28	 movzx	 edx, WORD PTR [ecx+eax*2+40]
  006b2	52		 push	 edx
  006b3	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  006b6	50		 push	 eax
  006b7	e8 00 00 00 00	 call	 _R_MakeSpans
  006bc	83 c4 14	 add	 esp, 20			; 00000014H

; 826  : 			pl->top[x], pl->bottom[x]);
; 827  : 	}

  006bf	eb ab		 jmp	 SHORT $LN4@R_DrawSing
$LN5@R_DrawSing:

; 828  : 
; 829  : /*
; 830  : QUINCUNX anti-aliasing technique (sort of)
; 831  : 
; 832  : Normally, Quincunx antialiasing staggers pixels
; 833  : in a 5-die pattern like so:
; 834  : 
; 835  : o   o
; 836  :   o
; 837  : o   o
; 838  : 
; 839  : To simulate this, we offset the plane by
; 840  : FRACUNIT/4 in each direction, and draw
; 841  : at 50% translucency. The result is
; 842  : a 'smoothing' of the texture while
; 843  : using the palette colors.
; 844  : */
; 845  : #ifdef QUINCUNX
; 846  : 	if (spanfunc == R_DrawSpan_8)
; 847  : 	{
; 848  : 		INT32 i;
; 849  : 		ds_transmap = ((tr_trans50)<<FF_TRANSSHIFT) - 0x10000 + transtables;
; 850  : 		spanfunc = R_DrawTranslucentSpan_8;
; 851  : 		for (i=0; i<4; i++)
; 852  : 		{
; 853  : 			xoffs = pl->xoffs;
; 854  : 			yoffs = pl->yoffs;
; 855  : 
; 856  : 			switch(i)
; 857  : 			{
; 858  : 				case 0:
; 859  : 					xoffs -= FRACUNIT/4;
; 860  : 					yoffs -= FRACUNIT/4;
; 861  : 					break;
; 862  : 				case 1:
; 863  : 					xoffs -= FRACUNIT/4;
; 864  : 					yoffs += FRACUNIT/4;
; 865  : 					break;
; 866  : 				case 2:
; 867  : 					xoffs += FRACUNIT/4;
; 868  : 					yoffs -= FRACUNIT/4;
; 869  : 					break;
; 870  : 				case 3:
; 871  : 					xoffs += FRACUNIT/4;
; 872  : 					yoffs += FRACUNIT/4;
; 873  : 					break;
; 874  : 			}
; 875  : 			planeheight = abs(pl->height - pl->viewz);
; 876  : 
; 877  : 			if (light >= LIGHTLEVELS)
; 878  : 				light = LIGHTLEVELS-1;
; 879  : 
; 880  : 			if (light < 0)
; 881  : 				light = 0;
; 882  : 
; 883  : 			planezlight = zlight[light];
; 884  : 
; 885  : 			// set the maximum value for unsigned
; 886  : 			pl->top[pl->maxx+1] = 0xffff;
; 887  : 			pl->top[pl->minx-1] = 0xffff;
; 888  : 			pl->bottom[pl->maxx+1] = 0x0000;
; 889  : 			pl->bottom[pl->minx-1] = 0x0000;
; 890  : 
; 891  : 			stop = pl->maxx + 1;
; 892  : 
; 893  : 			for (x = pl->minx; x <= stop; x++)
; 894  : 				R_MakeSpans(x, pl->top[x-1], pl->bottom[x-1],
; 895  : 					pl->top[x], pl->bottom[x]);
; 896  : 		}
; 897  : 	}
; 898  : #endif
; 899  : 
; 900  : 	Z_ChangeTag(ds_source, PU_CACHE);

  006c1	6a 65		 push	 101			; 00000065H
  006c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _ds_source
  006c8	50		 push	 eax
  006c9	e8 00 00 00 00	 call	 _Z_ChangeTag2
  006ce	83 c4 08	 add	 esp, 8
$LN1@R_DrawSing:

; 901  : }

  006d1	5f		 pop	 edi
  006d2	5e		 pop	 esi
  006d3	5b		 pop	 ebx
  006d4	8b e5		 mov	 esp, ebp
  006d6	5d		 pop	 ebp
  006d7	c3		 ret	 0
_R_DrawSinglePlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_PlaneBounds
_TEXT	SEGMENT
_low$ = -12						; size = 4
_hi$ = -8						; size = 4
_i$ = -4						; size = 4
_plane$ = 8						; size = 4
_R_PlaneBounds PROC					; COMDAT

; 904  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 905  : 	INT32 i;
; 906  : 	INT32 hi, low;
; 907  : 
; 908  : 	hi = plane->top[plane->minx];

  00009	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  0000c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _plane$[ebp]
  00012	0f b7 44 4a 2a	 movzx	 eax, WORD PTR [edx+ecx*2+42]
  00017	89 45 f8	 mov	 DWORD PTR _hi$[ebp], eax

; 909  : 	low = plane->bottom[plane->minx];

  0001a	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  0001d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00020	8b 55 08	 mov	 edx, DWORD PTR _plane$[ebp]
  00023	0f b7 84 4a 2e
	0f 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+3886]
  0002b	89 45 f4	 mov	 DWORD PTR _low$[ebp], eax

; 910  : 
; 911  : 	for (i = plane->minx + 1; i <= plane->maxx; i++)

  0002e	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  00031	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00034	83 c1 01	 add	 ecx, 1
  00037	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  0003a	eb 09		 jmp	 SHORT $LN4@R_PlaneBou
$LN2@R_PlaneBou:
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_PlaneBou:
  00045	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0004b	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  0004e	7f 44		 jg	 SHORT $LN3@R_PlaneBou

; 912  : 	{
; 913  : 		if (plane->top[i] < hi)

  00050	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  00056	0f b7 54 41 2a	 movzx	 edx, WORD PTR [ecx+eax*2+42]
  0005b	3b 55 f8	 cmp	 edx, DWORD PTR _hi$[ebp]
  0005e	7d 0e		 jge	 SHORT $LN5@R_PlaneBou

; 914  : 		hi = plane->top[i];

  00060	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  00066	0f b7 54 41 2a	 movzx	 edx, WORD PTR [ecx+eax*2+42]
  0006b	89 55 f8	 mov	 DWORD PTR _hi$[ebp], edx
$LN5@R_PlaneBou:

; 915  : 		if (plane->bottom[i] > low)

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  00074	0f b7 94 41 2e
	0f 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+3886]
  0007c	3b 55 f4	 cmp	 edx, DWORD PTR _low$[ebp]
  0007f	7e 11		 jle	 SHORT $LN6@R_PlaneBou

; 916  : 		low = plane->bottom[i];

  00081	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  00087	0f b7 94 41 2e
	0f 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+3886]
  0008f	89 55 f4	 mov	 DWORD PTR _low$[ebp], edx
$LN6@R_PlaneBou:

; 917  : 	}

  00092	eb a8		 jmp	 SHORT $LN2@R_PlaneBou
$LN3@R_PlaneBou:

; 918  : 	plane->high = hi;

  00094	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _hi$[ebp]
  0009a	89 88 30 1e 00
	00		 mov	 DWORD PTR [eax+7728], ecx

; 919  : 	plane->low = low;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR _low$[ebp]
  000a6	89 88 34 1e 00
	00		 mov	 DWORD PTR [eax+7732], ecx

; 920  : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_R_PlaneBounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_ExpandPlane
_TEXT	SEGMENT
_unionh$ = -16						; size = 4
_unionl$ = -12						; size = 4
_intrh$ = -8						; size = 4
_intrl$ = -4						; size = 4
_pl$ = 8						; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_R_ExpandPlane PROC					; COMDAT

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 530  : 	INT32 intrl, intrh;
; 531  : 	INT32 unionl, unionh;
; 532  : //	INT32 x;
; 533  : 
; 534  : #ifdef POLYOBJECTS_PLANES
; 535  : 	// Don't expand polyobject planes here - we do that on our own.
; 536  : 	if (pl->polyobj)
; 537  : 		return;
; 538  : #endif
; 539  : 
; 540  : 	if (start < pl->minx)

  00009	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _start$[ebp]
  0000f	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  00012	7d 11		 jge	 SHORT $LN2@R_ExpandPl

; 541  : 	{
; 542  : 		intrl = pl->minx;

  00014	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00017	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0001a	89 4d fc	 mov	 DWORD PTR _intrl$[ebp], ecx

; 543  : 		unionl = start;

  0001d	8b 45 0c	 mov	 eax, DWORD PTR _start$[ebp]
  00020	89 45 f4	 mov	 DWORD PTR _unionl$[ebp], eax

; 544  : 	}

  00023	eb 0f		 jmp	 SHORT $LN3@R_ExpandPl
$LN2@R_ExpandPl:

; 545  : 	else
; 546  : 	{
; 547  : 		unionl = pl->minx;

  00025	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00028	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0002b	89 4d f4	 mov	 DWORD PTR _unionl$[ebp], ecx

; 548  : 		intrl = start;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _start$[ebp]
  00031	89 45 fc	 mov	 DWORD PTR _intrl$[ebp], eax
$LN3@R_ExpandPl:

; 549  : 	}
; 550  : 
; 551  : 	if (stop > pl->maxx)

  00034	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00037	8b 4d 10	 mov	 ecx, DWORD PTR _stop$[ebp]
  0003a	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  0003d	7e 11		 jle	 SHORT $LN4@R_ExpandPl

; 552  : 	{
; 553  : 		intrh = pl->maxx;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00042	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00045	89 4d f8	 mov	 DWORD PTR _intrh$[ebp], ecx

; 554  : 		unionh = stop;

  00048	8b 45 10	 mov	 eax, DWORD PTR _stop$[ebp]
  0004b	89 45 f0	 mov	 DWORD PTR _unionh$[ebp], eax

; 555  : 	}

  0004e	eb 0f		 jmp	 SHORT $LN5@R_ExpandPl
$LN4@R_ExpandPl:

; 556  : 	else
; 557  : 	{
; 558  : 		unionh = pl->maxx;

  00050	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00053	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00056	89 4d f0	 mov	 DWORD PTR _unionh$[ebp], ecx

; 559  : 		intrh = stop;

  00059	8b 45 10	 mov	 eax, DWORD PTR _stop$[ebp]
  0005c	89 45 f8	 mov	 DWORD PTR _intrh$[ebp], eax
$LN5@R_ExpandPl:

; 560  : 	}
; 561  : /*
; 562  : 	for (x = start; x <= stop; x++)
; 563  : 		if (pl->top[x] != 0xffff || pl->bottom[x] != 0x0000)
; 564  : 			break;
; 565  : 
; 566  : 	if (x <= stop)
; 567  : 		I_Error("R_ExpandPlane: planes in same subsector overlap?!\nminx: %d, maxx: %d, start: %d, stop: %d\n", pl->minx, pl->maxx, start, stop);
; 568  : */
; 569  : 	pl->minx = unionl, pl->maxx = unionh;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _unionl$[ebp]
  00065	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00068	8b 55 08	 mov	 edx, DWORD PTR _pl$[ebp]
  0006b	8b 45 f0	 mov	 eax, DWORD PTR _unionh$[ebp]
  0006e	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 570  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_R_ExpandPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_CheckPlane
_TEXT	SEGMENT
_new_pl$1 = -28						; size = 4
_hash$2 = -24						; size = 4
_x$ = -20						; size = 4
_unionh$ = -16						; size = 4
_unionl$ = -12						; size = 4
_intrh$ = -8						; size = 4
_intrl$ = -4						; size = 4
_pl$ = 8						; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_R_CheckPlane PROC					; COMDAT

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 455  : 	INT32 intrl, intrh;
; 456  : 	INT32 unionl, unionh;
; 457  : 	INT32 x;
; 458  : 
; 459  : 	if (start < pl->minx)

  00009	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _start$[ebp]
  0000f	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  00012	7d 11		 jge	 SHORT $LN5@R_CheckPla

; 460  : 	{
; 461  : 		intrl = pl->minx;

  00014	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00017	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0001a	89 4d fc	 mov	 DWORD PTR _intrl$[ebp], ecx

; 462  : 		unionl = start;

  0001d	8b 45 0c	 mov	 eax, DWORD PTR _start$[ebp]
  00020	89 45 f4	 mov	 DWORD PTR _unionl$[ebp], eax

; 463  : 	}

  00023	eb 0f		 jmp	 SHORT $LN6@R_CheckPla
$LN5@R_CheckPla:

; 464  : 	else
; 465  : 	{
; 466  : 		unionl = pl->minx;

  00025	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00028	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0002b	89 4d f4	 mov	 DWORD PTR _unionl$[ebp], ecx

; 467  : 		intrl = start;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _start$[ebp]
  00031	89 45 fc	 mov	 DWORD PTR _intrl$[ebp], eax
$LN6@R_CheckPla:

; 468  : 	}
; 469  : 
; 470  : 	if (stop > pl->maxx)

  00034	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00037	8b 4d 10	 mov	 ecx, DWORD PTR _stop$[ebp]
  0003a	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  0003d	7e 11		 jle	 SHORT $LN7@R_CheckPla

; 471  : 	{
; 472  : 		intrh = pl->maxx;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00042	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00045	89 4d f8	 mov	 DWORD PTR _intrh$[ebp], ecx

; 473  : 		unionh = stop;

  00048	8b 45 10	 mov	 eax, DWORD PTR _stop$[ebp]
  0004b	89 45 f0	 mov	 DWORD PTR _unionh$[ebp], eax

; 474  : 	}

  0004e	eb 0f		 jmp	 SHORT $LN8@R_CheckPla
$LN7@R_CheckPla:

; 475  : 	else
; 476  : 	{
; 477  : 		unionh = pl->maxx;

  00050	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00053	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00056	89 4d f0	 mov	 DWORD PTR _unionh$[ebp], ecx

; 478  : 		intrh = stop;

  00059	8b 45 10	 mov	 eax, DWORD PTR _stop$[ebp]
  0005c	89 45 f8	 mov	 DWORD PTR _intrh$[ebp], eax
$LN8@R_CheckPla:

; 479  : 	}
; 480  : 
; 481  : 	// 0xff is not equal to -1 with shorts...
; 482  : 	for (x = intrl; x <= intrh; x++)

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _intrl$[ebp]
  00062	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax
  00065	eb 09		 jmp	 SHORT $LN4@R_CheckPla
$LN2@R_CheckPla:
  00067	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  0006a	83 c0 01	 add	 eax, 1
  0006d	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax
$LN4@R_CheckPla:
  00070	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  00073	3b 45 f8	 cmp	 eax, DWORD PTR _intrh$[ebp]
  00076	7f 29		 jg	 SHORT $LN3@R_CheckPla

; 483  : 		if (pl->top[x] != 0xffff || pl->bottom[x] != 0x0000)

  00078	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  0007e	0f b7 54 41 2a	 movzx	 edx, WORD PTR [ecx+eax*2+42]
  00083	81 fa ff ff 00
	00		 cmp	 edx, 65535		; 0000ffffH
  00089	75 12		 jne	 SHORT $LN10@R_CheckPla
  0008b	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00091	0f b7 94 41 2e
	0f 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+3886]
  00099	85 d2		 test	 edx, edx
  0009b	74 02		 je	 SHORT $LN9@R_CheckPla
$LN10@R_CheckPla:

; 484  : 			break;

  0009d	eb 02		 jmp	 SHORT $LN3@R_CheckPla
$LN9@R_CheckPla:
  0009f	eb c6		 jmp	 SHORT $LN2@R_CheckPla
$LN3@R_CheckPla:

; 485  : 
; 486  : 	if (x > intrh) /* Can use existing plane; extend range */

  000a1	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  000a4	3b 45 f8	 cmp	 eax, DWORD PTR _intrh$[ebp]
  000a7	7e 17		 jle	 SHORT $LN11@R_CheckPla

; 487  : 	{
; 488  : 		pl->minx = unionl;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR _unionl$[ebp]
  000af	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 489  : 		pl->maxx = unionh;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR _unionh$[ebp]
  000b8	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 490  : 	}

  000bb	e9 01 01 00 00	 jmp	 $LN12@R_CheckPla
$LN11@R_CheckPla:

; 491  : 	else /* Cannot use existing plane; create a new one */
; 492  : 	{
; 493  : 		unsigned hash =

  000c0	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  000c3	6b 48 14 03	 imul	 ecx, DWORD PTR [eax+20], 3
  000c7	8b 55 08	 mov	 edx, DWORD PTR _pl$[ebp]
  000ca	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  000cd	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  000d0	6b 50 04 07	 imul	 edx, DWORD PTR [eax+4], 7
  000d4	03 ca		 add	 ecx, edx
  000d6	81 e1 ff 01 00
	00		 and	 ecx, 511		; 000001ffH
  000dc	89 4d e8	 mov	 DWORD PTR _hash$2[ebp], ecx

; 494  : 			visplane_hash(pl->picnum, pl->lightlevel, pl->height);
; 495  : 		visplane_t *new_pl = new_visplane(hash);

  000df	8b 45 e8	 mov	 eax, DWORD PTR _hash$2[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _new_visplane
  000e8	83 c4 04	 add	 esp, 4
  000eb	89 45 e4	 mov	 DWORD PTR _new_pl$1[ebp], eax

; 496  : 
; 497  : 		new_pl->height = pl->height;

  000ee	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  000f4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f7	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 498  : 		new_pl->picnum = pl->picnum;

  000fa	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  000fd	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00100	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00103	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 499  : 		new_pl->lightlevel = pl->lightlevel;

  00106	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  0010c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0010f	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 500  : 		new_pl->xoffs = pl->xoffs;

  00112	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  00115	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00118	8b 91 38 1e 00
	00		 mov	 edx, DWORD PTR [ecx+7736]
  0011e	89 90 38 1e 00
	00		 mov	 DWORD PTR [eax+7736], edx

; 501  : 		new_pl->yoffs = pl->yoffs;

  00124	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  0012a	8b 91 3c 1e 00
	00		 mov	 edx, DWORD PTR [ecx+7740]
  00130	89 90 3c 1e 00
	00		 mov	 DWORD PTR [eax+7740], edx

; 502  : 		new_pl->extra_colormap = pl->extra_colormap;

  00136	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  00139	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  0013c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0013f	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 503  : 		new_pl->ffloor = pl->ffloor;

  00142	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00148	8b 91 44 1e 00
	00		 mov	 edx, DWORD PTR [ecx+7748]
  0014e	89 90 44 1e 00
	00		 mov	 DWORD PTR [eax+7748], edx

; 504  : 		new_pl->viewz = pl->viewz;

  00154	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  0015a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0015d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 505  : 		new_pl->viewangle = pl->viewangle;

  00160	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  00163	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00166	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00169	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 506  : 		new_pl->plangle = pl->plangle;

  0016c	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  0016f	8b 4d 08	 mov	 ecx, DWORD PTR _pl$[ebp]
  00172	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00175	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 507  : #ifdef POLYOBJECTS_PLANES
; 508  : 		new_pl->polyobj = pl->polyobj;
; 509  : #endif
; 510  : 		pl = new_pl;

  00178	8b 45 e4	 mov	 eax, DWORD PTR _new_pl$1[ebp]
  0017b	89 45 08	 mov	 DWORD PTR _pl$[ebp], eax

; 511  : 		pl->minx = start;

  0017e	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  00181	8b 4d 0c	 mov	 ecx, DWORD PTR _start$[ebp]
  00184	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 512  : 		pl->maxx = stop;

  00187	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0018a	8b 4d 10	 mov	 ecx, DWORD PTR _stop$[ebp]
  0018d	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 513  : 		memset(pl->top, 0xff, sizeof pl->top);

  00190	68 00 0f 00 00	 push	 3840			; 00000f00H
  00195	68 ff 00 00 00	 push	 255			; 000000ffH
  0019a	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  0019d	83 c0 2a	 add	 eax, 42			; 0000002aH
  001a0	50		 push	 eax
  001a1	e8 00 00 00 00	 call	 _memset
  001a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 514  : 		memset(pl->bottom, 0x00, sizeof pl->bottom);

  001a9	68 00 0f 00 00	 push	 3840			; 00000f00H
  001ae	6a 00		 push	 0
  001b0	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]
  001b3	05 2e 0f 00 00	 add	 eax, 3886		; 00000f2eH
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 _memset
  001be	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@R_CheckPla:

; 515  : 	}
; 516  : 	return pl;

  001c1	8b 45 08	 mov	 eax, DWORD PTR _pl$[ebp]

; 517  : }

  001c4	5f		 pop	 edi
  001c5	5e		 pop	 esi
  001c6	5b		 pop	 ebx
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c3		 ret	 0
_R_CheckPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_FindPlane
_TEXT	SEGMENT
_angle$1 = -12						; size = 4
_hash$ = -8						; size = 4
_check$ = -4						; size = 4
_height$ = 8						; size = 4
_picnum$ = 12						; size = 4
_lightlevel$ = 16					; size = 4
_xoff$ = 20						; size = 4
_yoff$ = 24						; size = 4
_plangle$ = 28						; size = 4
_planecolormap$ = 32					; size = 4
_pfloor$ = 36						; size = 4
_R_FindPlane PROC					; COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 390  : 	visplane_t *check;
; 391  : 	unsigned hash;
; 392  : 
; 393  : 	if (plangle != 0)

  00009	83 7d 1c 00	 cmp	 DWORD PTR _plangle$[ebp], 0
  0000d	0f 84 8a 00 00
	00		 je	 $LN5@R_FindPlan

; 394  : 	{
; 395  : 		// Add the view offset, rotated by the plane angle.
; 396  : 		angle_t angle = plangle>>ANGLETOFINESHIFT;

  00013	8b 45 1c	 mov	 eax, DWORD PTR _plangle$[ebp]
  00016	c1 e8 13	 shr	 eax, 19			; 00000013H
  00019	89 45 f4	 mov	 DWORD PTR _angle$1[ebp], eax

; 397  : 		xoff += FixedMul(viewx,FINECOSINE(angle))-FixedMul(viewy,FINESINE(angle));

  0001c	8b 45 f4	 mov	 eax, DWORD PTR _angle$1[ebp]
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00025	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00028	52		 push	 edx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _FixedMul
  00034	83 c4 08	 add	 esp, 8
  00037	8b f0		 mov	 esi, eax
  00039	8b 4d f4	 mov	 ecx, DWORD PTR _angle$1[ebp]
  0003c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00043	52		 push	 edx
  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewy
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _FixedMul
  0004f	83 c4 08	 add	 esp, 8
  00052	2b f0		 sub	 esi, eax
  00054	03 75 14	 add	 esi, DWORD PTR _xoff$[ebp]
  00057	89 75 14	 mov	 DWORD PTR _xoff$[ebp], esi

; 398  : 		yoff += -FixedMul(viewx,FINESINE(angle))-FixedMul(viewy,FINECOSINE(angle));

  0005a	8b 45 f4	 mov	 eax, DWORD PTR _angle$1[ebp]
  0005d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00064	51		 push	 ecx
  00065	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewx
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _FixedMul
  00071	83 c4 08	 add	 esp, 8
  00074	8b f0		 mov	 esi, eax
  00076	f7 de		 neg	 esi
  00078	8b 45 f4	 mov	 eax, DWORD PTR _angle$1[ebp]
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00081	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00084	52		 push	 edx
  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewy
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _FixedMul
  00090	83 c4 08	 add	 esp, 8
  00093	2b f0		 sub	 esi, eax
  00095	03 75 18	 add	 esi, DWORD PTR _yoff$[ebp]
  00098	89 75 18	 mov	 DWORD PTR _yoff$[ebp], esi

; 399  : 	}

  0009b	eb 18		 jmp	 SHORT $LN6@R_FindPlan
$LN5@R_FindPlan:

; 400  : 	else
; 401  : 	{
; 402  : 		xoff += viewx;

  0009d	8b 45 14	 mov	 eax, DWORD PTR _xoff$[ebp]
  000a0	03 05 00 00 00
	00		 add	 eax, DWORD PTR _viewx
  000a6	89 45 14	 mov	 DWORD PTR _xoff$[ebp], eax

; 403  : 		yoff -= viewy;

  000a9	8b 45 18	 mov	 eax, DWORD PTR _yoff$[ebp]
  000ac	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewy
  000b2	89 45 18	 mov	 DWORD PTR _yoff$[ebp], eax
$LN6@R_FindPlan:

; 404  : 	}
; 405  : 
; 406  : 	// This appears to fix the Nimbus Ruins sky bug.
; 407  : 	if (picnum == skyflatnum && pfloor)

  000b5	8b 45 0c	 mov	 eax, DWORD PTR _picnum$[ebp]
  000b8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _skyflatnum
  000be	75 14		 jne	 SHORT $LN7@R_FindPlan
  000c0	83 7d 24 00	 cmp	 DWORD PTR _pfloor$[ebp], 0
  000c4	74 0e		 je	 SHORT $LN7@R_FindPlan

; 408  : 	{
; 409  : 		height = 0; // all skies map together

  000c6	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _height$[ebp], 0

; 410  : 		lightlevel = 0;

  000cd	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _lightlevel$[ebp], 0
$LN7@R_FindPlan:

; 411  : 	}
; 412  : 
; 413  : 	// New visplane algorithm uses hash table
; 414  : 	hash = visplane_hash(picnum, lightlevel, height);

  000d4	6b 45 0c 03	 imul	 eax, DWORD PTR _picnum$[ebp], 3
  000d8	03 45 10	 add	 eax, DWORD PTR _lightlevel$[ebp]
  000db	6b 4d 08 07	 imul	 ecx, DWORD PTR _height$[ebp], 7
  000df	03 c1		 add	 eax, ecx
  000e1	25 ff 01 00 00	 and	 eax, 511		; 000001ffH
  000e6	89 45 f8	 mov	 DWORD PTR _hash$[ebp], eax

; 415  : 
; 416  : 	for (check = visplanes[hash]; check; check = check->next)

  000e9	8b 45 f8	 mov	 eax, DWORD PTR _hash$[ebp]
  000ec	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _visplanes[eax*4]
  000f3	89 4d fc	 mov	 DWORD PTR _check$[ebp], ecx
  000f6	eb 08		 jmp	 SHORT $LN4@R_FindPlan
$LN2@R_FindPlan:
  000f8	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	89 4d fc	 mov	 DWORD PTR _check$[ebp], ecx
$LN4@R_FindPlan:
  00100	83 7d fc 00	 cmp	 DWORD PTR _check$[ebp], 0
  00104	0f 84 83 00 00
	00		 je	 $LN3@R_FindPlan

; 417  : 	{
; 418  : 		if (height == check->height && picnum == check->picnum
; 419  : 			&& lightlevel == check->lightlevel
; 420  : 			&& xoff == check->xoffs && yoff == check->yoffs
; 421  : 			&& planecolormap == check->extra_colormap
; 422  : 			&& !pfloor && !check->ffloor && check->viewz == viewz
; 423  : 			&& check->viewangle == viewangle)

  0010a	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  0010d	8b 4d 08	 mov	 ecx, DWORD PTR _height$[ebp]
  00110	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00113	75 73		 jne	 SHORT $LN8@R_FindPlan
  00115	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  00118	8b 4d 0c	 mov	 ecx, DWORD PTR _picnum$[ebp]
  0011b	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0011e	75 68		 jne	 SHORT $LN8@R_FindPlan
  00120	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  00123	8b 4d 10	 mov	 ecx, DWORD PTR _lightlevel$[ebp]
  00126	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00129	75 5d		 jne	 SHORT $LN8@R_FindPlan
  0012b	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  0012e	8b 4d 14	 mov	 ecx, DWORD PTR _xoff$[ebp]
  00131	3b 88 38 1e 00
	00		 cmp	 ecx, DWORD PTR [eax+7736]
  00137	75 4f		 jne	 SHORT $LN8@R_FindPlan
  00139	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  0013c	8b 4d 18	 mov	 ecx, DWORD PTR _yoff$[ebp]
  0013f	3b 88 3c 1e 00
	00		 cmp	 ecx, DWORD PTR [eax+7740]
  00145	75 41		 jne	 SHORT $LN8@R_FindPlan
  00147	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  0014a	8b 4d 20	 mov	 ecx, DWORD PTR _planecolormap$[ebp]
  0014d	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  00150	75 36		 jne	 SHORT $LN8@R_FindPlan
  00152	83 7d 24 00	 cmp	 DWORD PTR _pfloor$[ebp], 0
  00156	75 30		 jne	 SHORT $LN8@R_FindPlan
  00158	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  0015b	83 b8 44 1e 00
	00 00		 cmp	 DWORD PTR [eax+7748], 0
  00162	75 24		 jne	 SHORT $LN8@R_FindPlan
  00164	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  00167	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0016a	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _viewz
  00170	75 16		 jne	 SHORT $LN8@R_FindPlan
  00172	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  00175	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00178	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _viewangle
  0017e	75 08		 jne	 SHORT $LN8@R_FindPlan

; 424  : 		{
; 425  : 			return check;

  00180	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  00183	e9 c9 00 00 00	 jmp	 $LN1@R_FindPlan
$LN8@R_FindPlan:

; 426  : 		}
; 427  : 	}

  00188	e9 6b ff ff ff	 jmp	 $LN2@R_FindPlan
$LN3@R_FindPlan:

; 428  : 
; 429  : 	check = new_visplane(hash);

  0018d	8b 45 f8	 mov	 eax, DWORD PTR _hash$[ebp]
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 _new_visplane
  00196	83 c4 04	 add	 esp, 4
  00199	89 45 fc	 mov	 DWORD PTR _check$[ebp], eax

; 430  : 
; 431  : 	check->height = height;

  0019c	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  0019f	8b 4d 08	 mov	 ecx, DWORD PTR _height$[ebp]
  001a2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 432  : 	check->picnum = picnum;

  001a5	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001a8	8b 4d 0c	 mov	 ecx, DWORD PTR _picnum$[ebp]
  001ab	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 433  : 	check->lightlevel = lightlevel;

  001ae	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001b1	8b 4d 10	 mov	 ecx, DWORD PTR _lightlevel$[ebp]
  001b4	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 434  : 	check->minx = vid.width;

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001ba	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  001c0	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 435  : 	check->maxx = -1;

  001c3	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001c6	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1

; 436  : 	check->xoffs = xoff;

  001cd	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001d0	8b 4d 14	 mov	 ecx, DWORD PTR _xoff$[ebp]
  001d3	89 88 38 1e 00
	00		 mov	 DWORD PTR [eax+7736], ecx

; 437  : 	check->yoffs = yoff;

  001d9	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001dc	8b 4d 18	 mov	 ecx, DWORD PTR _yoff$[ebp]
  001df	89 88 3c 1e 00
	00		 mov	 DWORD PTR [eax+7740], ecx

; 438  : 	check->extra_colormap = planecolormap;

  001e5	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001e8	8b 4d 20	 mov	 ecx, DWORD PTR _planecolormap$[ebp]
  001eb	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 439  : 	check->ffloor = pfloor;

  001ee	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001f1	8b 4d 24	 mov	 ecx, DWORD PTR _pfloor$[ebp]
  001f4	89 88 44 1e 00
	00		 mov	 DWORD PTR [eax+7748], ecx

; 440  : 	check->viewz = viewz;

  001fa	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  001fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _viewz
  00203	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 441  : 	check->viewangle = viewangle + plangle;

  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewangle
  0020b	03 45 1c	 add	 eax, DWORD PTR _plangle$[ebp]
  0020e	8b 4d fc	 mov	 ecx, DWORD PTR _check$[ebp]
  00211	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 442  : 	check->plangle = plangle;

  00214	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  00217	8b 4d 1c	 mov	 ecx, DWORD PTR _plangle$[ebp]
  0021a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 443  : 
; 444  : 	memset(check->top, 0xff, sizeof (check->top));

  0021d	68 00 0f 00 00	 push	 3840			; 00000f00H
  00222	68 ff 00 00 00	 push	 255			; 000000ffH
  00227	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  0022a	83 c0 2a	 add	 eax, 42			; 0000002aH
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 _memset
  00233	83 c4 0c	 add	 esp, 12			; 0000000cH

; 445  : 	memset(check->bottom, 0x00, sizeof (check->bottom));

  00236	68 00 0f 00 00	 push	 3840			; 00000f00H
  0023b	6a 00		 push	 0
  0023d	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
  00240	05 2e 0f 00 00	 add	 eax, 3886		; 00000f2eH
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 _memset
  0024b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 446  : 
; 447  : 	return check;

  0024e	8b 45 fc	 mov	 eax, DWORD PTR _check$[ebp]
$LN1@R_FindPlan:

; 448  : }

  00251	5f		 pop	 edi
  00252	5e		 pop	 esi
  00253	5b		 pop	 ebx
  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c3		 ret	 0
_R_FindPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_DrawPlanes
_TEXT	SEGMENT
_i$ = -16						; size = 4
_angle$ = -12						; size = 4
_x$ = -8						; size = 4
_pl$ = -4						; size = 4
_R_DrawPlanes PROC					; COMDAT

; 602  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 603  : 	visplane_t *pl;
; 604  : 	INT32 x;
; 605  : 	INT32 angle;
; 606  : 	INT32 i;
; 607  : 
; 608  : 	spanfunc = basespanfunc;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _basespanfunc
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _spanfunc, eax

; 609  : 	wallcolfunc = walldrawerfunc;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _walldrawerfunc
  00018	a3 00 00 00 00	 mov	 DWORD PTR _wallcolfunc, eax

; 610  : 
; 611  : 	for (i = 0; i < MAXVISPLANES; i++, pl++)

  0001d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00024	eb 15		 jmp	 SHORT $LN4@R_DrawPlan
$LN2@R_DrawPlan:
  00026	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _pl$[ebp]
  00032	81 c1 48 1e 00
	00		 add	 ecx, 7752		; 00001e48H
  00038	89 4d fc	 mov	 DWORD PTR _pl$[ebp], ecx
$LN4@R_DrawPlan:
  0003b	81 7d f0 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  00042	0f 8d 27 01 00
	00		 jge	 $LN3@R_DrawPlan

; 612  : 	{
; 613  : 		for (pl = visplanes[i]; pl; pl = pl->next)

  00048	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0004b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _visplanes[eax*4]
  00052	89 4d fc	 mov	 DWORD PTR _pl$[ebp], ecx
  00055	eb 08		 jmp	 SHORT $LN7@R_DrawPlan
$LN5@R_DrawPlan:
  00057	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	89 4d fc	 mov	 DWORD PTR _pl$[ebp], ecx
$LN7@R_DrawPlan:
  0005f	83 7d fc 00	 cmp	 DWORD PTR _pl$[ebp], 0
  00063	0f 84 01 01 00
	00		 je	 $LN6@R_DrawPlan

; 614  : 		{
; 615  : 			// sky flat
; 616  : 			if (pl->picnum == skyflatnum)

  00069	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  0006c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006f	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _skyflatnum
  00075	0f 85 cd 00 00
	00		 jne	 $LN11@R_DrawPlan

; 617  : 			{
; 618  : 				// use correct aspect ratio scale
; 619  : 				dc_iscale = skyscale;

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _skyscale
  00080	a3 00 00 00 00	 mov	 DWORD PTR _dc_iscale, eax

; 620  : 
; 621  : 				// Sky is always drawn full bright,
; 622  : 				//  i.e. colormaps[0] is used.
; 623  : 				// Because of this hack, sky is not affected
; 624  : 				//  by INVUL inverse mapping.
; 625  : 				dc_colormap = colormaps;

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaps
  0008a	a3 00 00 00 00	 mov	 DWORD PTR _dc_colormap, eax

; 626  : 				dc_texturemid = skytexturemid;

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _skytexturemid
  00094	a3 00 00 00 00	 mov	 DWORD PTR _dc_texturemid, eax

; 627  : 				dc_texheight = textureheight[skytexture]

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR _skytexture
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textureheight
  000a4	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000a7	c1 fa 10	 sar	 edx, 16			; 00000010H
  000aa	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_texheight, edx

; 628  : 					>>FRACBITS;
; 629  : 				for (x = pl->minx; x <= pl->maxx; x++)

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  000b3	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000b6	89 4d f8	 mov	 DWORD PTR _x$[ebp], ecx
  000b9	eb 09		 jmp	 SHORT $LN10@R_DrawPlan
$LN8@R_DrawPlan:
  000bb	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  000be	83 c0 01	 add	 eax, 1
  000c1	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN10@R_DrawPlan:
  000c4	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  000c7	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  000ca	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  000cd	7f 74		 jg	 SHORT $LN9@R_DrawPlan

; 630  : 				{
; 631  : 					dc_yl = pl->top[x];

  000cf	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _pl$[ebp]
  000d5	0f b7 54 41 2a	 movzx	 edx, WORD PTR [ecx+eax*2+42]
  000da	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_yl, edx

; 632  : 					dc_yh = pl->bottom[x];

  000e0	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  000e3	8b 4d fc	 mov	 ecx, DWORD PTR _pl$[ebp]
  000e6	0f b7 94 41 2e
	0f 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+3886]
  000ee	89 15 00 00 00
	00		 mov	 DWORD PTR _dc_yh, edx

; 633  : 
; 634  : 					if (dc_yl <= dc_yh)

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _dc_yl
  000f9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _dc_yh
  000ff	7f 3d		 jg	 SHORT $LN12@R_DrawPlan

; 635  : 					{
; 636  : 						angle = (viewangle + xtoviewangle[x])>>ANGLETOSKYSHIFT;

  00101	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _viewangle
  0010a	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _xtoviewangle[eax*4]
  00111	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00114	89 4d f4	 mov	 DWORD PTR _angle$[ebp], ecx

; 637  : 						dc_x = x;

  00117	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0011a	a3 00 00 00 00	 mov	 DWORD PTR _dc_x, eax

; 638  : 						dc_source =

  0011f	8b 45 f4	 mov	 eax, DWORD PTR _angle$[ebp]
  00122	50		 push	 eax
  00123	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _skytexture
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 _R_GetColumn
  0012f	83 c4 08	 add	 esp, 8
  00132	a3 00 00 00 00	 mov	 DWORD PTR _dc_source, eax

; 639  : 							R_GetColumn(skytexture,
; 640  : 								angle);
; 641  : 						wallcolfunc();

  00137	ff 15 00 00 00
	00		 call	 DWORD PTR _wallcolfunc
  0013d	90		 npad	 1
$LN12@R_DrawPlan:

; 642  : 					}
; 643  : 				}

  0013e	e9 78 ff ff ff	 jmp	 $LN8@R_DrawPlan
$LN9@R_DrawPlan:

; 644  : 				continue;

  00143	e9 0f ff ff ff	 jmp	 $LN5@R_DrawPlan
$LN11@R_DrawPlan:

; 645  : 			}
; 646  : 
; 647  : 			if (pl->ffloor != NULL)

  00148	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  0014b	83 b8 44 1e 00
	00 00		 cmp	 DWORD PTR [eax+7748], 0
  00152	74 05		 je	 SHORT $LN13@R_DrawPlan

; 648  : 				continue;

  00154	e9 fe fe ff ff	 jmp	 $LN5@R_DrawPlan
$LN13@R_DrawPlan:

; 649  : 
; 650  : 			R_DrawSinglePlane(pl);

  00159	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _R_DrawSinglePlane
  00162	83 c4 04	 add	 esp, 4

; 651  : 		}

  00165	e9 ed fe ff ff	 jmp	 $LN5@R_DrawPlan
$LN6@R_DrawPlan:

; 652  : 	}

  0016a	e9 b7 fe ff ff	 jmp	 $LN2@R_DrawPlan
$LN3@R_DrawPlan:

; 653  : 	waterofs = (leveltime & 1)*16384;

  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00174	83 e0 01	 and	 eax, 1
  00177	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  0017a	a3 00 00 00 00	 mov	 DWORD PTR _waterofs, eax

; 654  : 	wtofs = leveltime * 75;

  0017f	6b 05 00 00 00
	00 4b		 imul	 eax, DWORD PTR _leveltime, 75
  00186	a3 00 00 00 00	 mov	 DWORD PTR _wtofs, eax

; 655  : }

  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5b		 pop	 ebx
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c3		 ret	 0
_R_DrawPlanes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_MakeSpans
_TEXT	SEGMENT
_x$ = 8							; size = 4
_t1$ = 12						; size = 4
_b1$ = 16						; size = 4
_t2$ = 20						; size = 4
_b2$ = 24						; size = 4
_R_MakeSpans PROC					; COMDAT

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 577  : 	//    Alam: from r_splats's R_RenderFloorSplat
; 578  : 	if (t1 >= vid.height) t1 = vid.height-1;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _t1$[ebp]
  0000c	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  00012	7c 0b		 jl	 SHORT $LN10@R_MakeSpan
  00014	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00019	83 e8 01	 sub	 eax, 1
  0001c	89 45 0c	 mov	 DWORD PTR _t1$[ebp], eax
$LN10@R_MakeSpan:

; 579  : 	if (b1 >= vid.height) b1 = vid.height-1;

  0001f	8b 45 10	 mov	 eax, DWORD PTR _b1$[ebp]
  00022	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  00028	7c 0b		 jl	 SHORT $LN11@R_MakeSpan
  0002a	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0002f	83 e8 01	 sub	 eax, 1
  00032	89 45 10	 mov	 DWORD PTR _b1$[ebp], eax
$LN11@R_MakeSpan:

; 580  : 	if (t2 >= vid.height) t2 = vid.height-1;

  00035	8b 45 14	 mov	 eax, DWORD PTR _t2$[ebp]
  00038	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  0003e	7c 0b		 jl	 SHORT $LN12@R_MakeSpan
  00040	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00045	83 e8 01	 sub	 eax, 1
  00048	89 45 14	 mov	 DWORD PTR _t2$[ebp], eax
$LN12@R_MakeSpan:

; 581  : 	if (b2 >= vid.height) b2 = vid.height-1;

  0004b	8b 45 18	 mov	 eax, DWORD PTR _b2$[ebp]
  0004e	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR _vid+16
  00054	7c 0b		 jl	 SHORT $LN13@R_MakeSpan
  00056	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0005b	83 e8 01	 sub	 eax, 1
  0005e	89 45 18	 mov	 DWORD PTR _b2$[ebp], eax
$LN13@R_MakeSpan:

; 582  : 	if (x-1 >= vid.width) x = vid.width;

  00061	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00064	83 e8 01	 sub	 eax, 1
  00067	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR _vid+12
  0006d	7c 08		 jl	 SHORT $LN14@R_MakeSpan
  0006f	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00074	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
$LN14@R_MakeSpan:

; 583  : 
; 584  : 	while (t1 < t2 && t1 <= b1)

  00077	8b 45 0c	 mov	 eax, DWORD PTR _t1$[ebp]
  0007a	3b 45 14	 cmp	 eax, DWORD PTR _t2$[ebp]
  0007d	7d 31		 jge	 SHORT $LN3@R_MakeSpan
  0007f	8b 45 0c	 mov	 eax, DWORD PTR _t1$[ebp]
  00082	3b 45 10	 cmp	 eax, DWORD PTR _b1$[ebp]
  00085	7f 29		 jg	 SHORT $LN3@R_MakeSpan

; 585  : 	{
; 586  : 		R_MapPlane(t1, spanstart[t1], x - 1);

  00087	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0008a	83 e8 01	 sub	 eax, 1
  0008d	50		 push	 eax
  0008e	8b 4d 0c	 mov	 ecx, DWORD PTR _t1$[ebp]
  00091	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _spanstart[ecx*4]
  00098	52		 push	 edx
  00099	8b 45 0c	 mov	 eax, DWORD PTR _t1$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _R_MapPlane
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 587  : 		t1++;

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _t1$[ebp]
  000a8	83 c0 01	 add	 eax, 1
  000ab	89 45 0c	 mov	 DWORD PTR _t1$[ebp], eax

; 588  : 	}

  000ae	eb c7		 jmp	 SHORT $LN14@R_MakeSpan
$LN3@R_MakeSpan:

; 589  : 	while (b1 > b2 && b1 >= t1)

  000b0	8b 45 10	 mov	 eax, DWORD PTR _b1$[ebp]
  000b3	3b 45 18	 cmp	 eax, DWORD PTR _b2$[ebp]
  000b6	7e 31		 jle	 SHORT $LN5@R_MakeSpan
  000b8	8b 45 10	 mov	 eax, DWORD PTR _b1$[ebp]
  000bb	3b 45 0c	 cmp	 eax, DWORD PTR _t1$[ebp]
  000be	7c 29		 jl	 SHORT $LN5@R_MakeSpan

; 590  : 	{
; 591  : 		R_MapPlane(b1, spanstart[b1], x - 1);

  000c0	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000c3	83 e8 01	 sub	 eax, 1
  000c6	50		 push	 eax
  000c7	8b 4d 10	 mov	 ecx, DWORD PTR _b1$[ebp]
  000ca	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _spanstart[ecx*4]
  000d1	52		 push	 edx
  000d2	8b 45 10	 mov	 eax, DWORD PTR _b1$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _R_MapPlane
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 592  : 		b1--;

  000de	8b 45 10	 mov	 eax, DWORD PTR _b1$[ebp]
  000e1	83 e8 01	 sub	 eax, 1
  000e4	89 45 10	 mov	 DWORD PTR _b1$[ebp], eax

; 593  : 	}

  000e7	eb c7		 jmp	 SHORT $LN3@R_MakeSpan
$LN5@R_MakeSpan:

; 594  : 
; 595  : 	while (t2 < t1 && t2 <= b2)

  000e9	8b 45 14	 mov	 eax, DWORD PTR _t2$[ebp]
  000ec	3b 45 0c	 cmp	 eax, DWORD PTR _t1$[ebp]
  000ef	7d 20		 jge	 SHORT $LN7@R_MakeSpan
  000f1	8b 45 14	 mov	 eax, DWORD PTR _t2$[ebp]
  000f4	3b 45 18	 cmp	 eax, DWORD PTR _b2$[ebp]
  000f7	7f 18		 jg	 SHORT $LN7@R_MakeSpan

; 596  : 		spanstart[t2++] = x;

  000f9	8b 45 14	 mov	 eax, DWORD PTR _t2$[ebp]
  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000ff	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _spanstart[eax*4], ecx
  00106	8b 55 14	 mov	 edx, DWORD PTR _t2$[ebp]
  00109	83 c2 01	 add	 edx, 1
  0010c	89 55 14	 mov	 DWORD PTR _t2$[ebp], edx
  0010f	eb d8		 jmp	 SHORT $LN5@R_MakeSpan
$LN7@R_MakeSpan:

; 597  : 	while (b2 > b1 && b2 >= t2)

  00111	8b 45 18	 mov	 eax, DWORD PTR _b2$[ebp]
  00114	3b 45 10	 cmp	 eax, DWORD PTR _b1$[ebp]
  00117	7e 20		 jle	 SHORT $LN9@R_MakeSpan
  00119	8b 45 18	 mov	 eax, DWORD PTR _b2$[ebp]
  0011c	3b 45 14	 cmp	 eax, DWORD PTR _t2$[ebp]
  0011f	7c 18		 jl	 SHORT $LN9@R_MakeSpan

; 598  : 		spanstart[b2--] = x;

  00121	8b 45 18	 mov	 eax, DWORD PTR _b2$[ebp]
  00124	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00127	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _spanstart[eax*4], ecx
  0012e	8b 55 18	 mov	 edx, DWORD PTR _b2$[ebp]
  00131	83 ea 01	 sub	 edx, 1
  00134	89 55 18	 mov	 DWORD PTR _b2$[ebp], edx
  00137	eb d8		 jmp	 SHORT $LN7@R_MakeSpan
$LN9@R_MakeSpan:

; 599  : }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
_R_MakeSpans ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_MapPlane
_TEXT	SEGMENT
tv73 = -88						; size = 4
tv80 = -88						; size = 4
tv85 = -88						; size = 4
_yay$1 = -20						; size = 4
_pindex$ = -16						; size = 4
_length$ = -12						; size = 4
_distance$ = -8						; size = 4
_angle$ = -4						; size = 4
_y$ = 8							; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
_R_MapPlane PROC					; COMDAT

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 237  : 	angle_t angle;
; 238  : 	fixed_t distance, length;
; 239  : 	size_t pindex;
; 240  : 
; 241  : #ifdef RANGECHECK
; 242  : 	if (x2 < x1 || x1 < 0 || x2 >= viewwidth || y > viewheight)
; 243  : 		I_Error("R_MapPlane: %d, %d at %d", x1, x2, y);
; 244  : #endif
; 245  : 
; 246  : 	// from r_splats's R_RenderFloorSplat
; 247  : 	if (x1 >= vid.width) x1 = vid.width - 1;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  0000c	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR _vid+12
  00012	7c 0b		 jl	 SHORT $LN2@R_MapPlane
  00014	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00019	83 e8 01	 sub	 eax, 1
  0001c	89 45 0c	 mov	 DWORD PTR _x1$[ebp], eax
$LN2@R_MapPlane:

; 248  : 
; 249  : 	if (planeheight != cachedheight[y])

  0001f	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _planeheight
  00028	3b 0c 85 00 00
	00 00		 cmp	 ecx, DWORD PTR _cachedheight[eax*4]
  0002f	0f 84 99 00 00
	00		 je	 $LN3@R_MapPlane

; 250  : 	{
; 251  : 		cachedheight[y] = planeheight;

  00035	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _planeheight
  0003e	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _cachedheight[eax*4], ecx

; 252  : 		distance = cacheddistance[y] = FixedMul(planeheight, yslope[y]);

  00045	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _yslope
  0004e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00051	52		 push	 edx
  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR _planeheight
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _FixedMul
  0005d	83 c4 08	 add	 esp, 8
  00060	89 45 a8	 mov	 DWORD PTR tv73[ebp], eax
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _y$[ebp]
  00066	8b 55 a8	 mov	 edx, DWORD PTR tv73[ebp]
  00069	89 14 8d 00 00
	00 00		 mov	 DWORD PTR _cacheddistance[ecx*4], edx
  00070	8b 45 a8	 mov	 eax, DWORD PTR tv73[ebp]
  00073	89 45 f8	 mov	 DWORD PTR _distance$[ebp], eax

; 253  : 		ds_xstep = cachedxstep[y] = FixedMul(distance, basexscale);

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR _basexscale
  0007b	50		 push	 eax
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _distance$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _FixedMul
  00085	83 c4 08	 add	 esp, 8
  00088	89 45 a8	 mov	 DWORD PTR tv80[ebp], eax
  0008b	8b 55 08	 mov	 edx, DWORD PTR _y$[ebp]
  0008e	8b 45 a8	 mov	 eax, DWORD PTR tv80[ebp]
  00091	89 04 95 00 00
	00 00		 mov	 DWORD PTR _cachedxstep[edx*4], eax
  00098	8b 4d a8	 mov	 ecx, DWORD PTR tv80[ebp]
  0009b	89 0d 00 00 00
	00		 mov	 DWORD PTR _ds_xstep, ecx

; 254  : 		ds_ystep = cachedystep[y] = FixedMul(distance, baseyscale);

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _baseyscale
  000a6	50		 push	 eax
  000a7	8b 4d f8	 mov	 ecx, DWORD PTR _distance$[ebp]
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 _FixedMul
  000b0	83 c4 08	 add	 esp, 8
  000b3	89 45 a8	 mov	 DWORD PTR tv85[ebp], eax
  000b6	8b 55 08	 mov	 edx, DWORD PTR _y$[ebp]
  000b9	8b 45 a8	 mov	 eax, DWORD PTR tv85[ebp]
  000bc	89 04 95 00 00
	00 00		 mov	 DWORD PTR _cachedystep[edx*4], eax
  000c3	8b 4d a8	 mov	 ecx, DWORD PTR tv85[ebp]
  000c6	89 0d 00 00 00
	00		 mov	 DWORD PTR _ds_ystep, ecx

; 255  : 	}

  000cc	eb 2d		 jmp	 SHORT $LN4@R_MapPlane
$LN3@R_MapPlane:

; 256  : 	else
; 257  : 	{
; 258  : 		distance = cacheddistance[y];

  000ce	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  000d1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _cacheddistance[eax*4]
  000d8	89 4d f8	 mov	 DWORD PTR _distance$[ebp], ecx

; 259  : 		ds_xstep = cachedxstep[y];

  000db	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  000de	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _cachedxstep[eax*4]
  000e5	89 0d 00 00 00
	00		 mov	 DWORD PTR _ds_xstep, ecx

; 260  : 		ds_ystep = cachedystep[y];

  000eb	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  000ee	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _cachedystep[eax*4]
  000f5	89 0d 00 00 00
	00		 mov	 DWORD PTR _ds_ystep, ecx
$LN4@R_MapPlane:

; 261  : 	}
; 262  : 
; 263  : 	length = FixedMul (distance,distscale[x1]);

  000fb	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  000fe	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _distscale[eax*4]
  00105	51		 push	 ecx
  00106	8b 55 f8	 mov	 edx, DWORD PTR _distance$[ebp]
  00109	52		 push	 edx
  0010a	e8 00 00 00 00	 call	 _FixedMul
  0010f	83 c4 08	 add	 esp, 8
  00112	89 45 f4	 mov	 DWORD PTR _length$[ebp], eax

; 264  : 	angle = (currentplane->viewangle + xtoviewangle[x1])>>ANGLETOFINESHIFT;

  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentplane
  0011a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0011d	8b 55 0c	 mov	 edx, DWORD PTR _x1$[ebp]
  00120	03 0c 95 00 00
	00 00		 add	 ecx, DWORD PTR _xtoviewangle[edx*4]
  00127	c1 e9 13	 shr	 ecx, 19			; 00000013H
  0012a	89 4d fc	 mov	 DWORD PTR _angle$[ebp], ecx

; 265  : 	/// \note Wouldn't it be faster just to add viewx and viewy
; 266  : 	// to the plane's x/yoffs anyway??
; 267  : 
; 268  : 	ds_xfrac = FixedMul(FINECOSINE(angle), length) + xoffs;

  0012d	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  00130	50		 push	 eax
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0013a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 _FixedMul
  00143	83 c4 08	 add	 esp, 8
  00146	03 05 00 00 00
	00		 add	 eax, DWORD PTR _xoffs
  0014c	a3 00 00 00 00	 mov	 DWORD PTR _ds_xfrac, eax

; 269  : 	ds_yfrac = yoffs - FixedMul(FINESINE(angle), length);

  00151	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  00154	50		 push	 eax
  00155	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  00158	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  0015f	52		 push	 edx
  00160	e8 00 00 00 00	 call	 _FixedMul
  00165	83 c4 08	 add	 esp, 8
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _yoffs
  0016e	2b c8		 sub	 ecx, eax
  00170	89 0d 00 00 00
	00		 mov	 DWORD PTR _ds_yfrac, ecx

; 270  : 
; 271  : 	if (itswater)

  00176	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _itswater, 0
  0017d	0f 84 cc 00 00
	00		 je	 $LN7@R_MapPlane

; 272  : 	{
; 273  : 		const INT32 yay = (wtofs + (distance>>10) ) & 8191;

  00183	8b 45 f8	 mov	 eax, DWORD PTR _distance$[ebp]
  00186	c1 f8 0a	 sar	 eax, 10			; 0000000aH
  00189	03 05 00 00 00
	00		 add	 eax, DWORD PTR _wtofs
  0018f	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  00194	89 45 ec	 mov	 DWORD PTR _yay$1[ebp], eax

; 274  : 		// ripples da water texture
; 275  : 		bgofs = FixedDiv(FINESINE(yay),distance>>9)>>FRACBITS;

  00197	8b 45 f8	 mov	 eax, DWORD PTR _distance$[ebp]
  0019a	c1 f8 09	 sar	 eax, 9
  0019d	50		 push	 eax
  0019e	8b 4d ec	 mov	 ecx, DWORD PTR _yay$1[ebp]
  001a1	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  001a8	52		 push	 edx
  001a9	e8 00 00 00 00	 call	 _FixedDiv
  001ae	83 c4 08	 add	 esp, 8
  001b1	c1 f8 10	 sar	 eax, 16			; 00000010H
  001b4	a3 00 00 00 00	 mov	 DWORD PTR _bgofs, eax

; 276  : 
; 277  : 		angle = (angle + 2048) & 8191;  //90�

  001b9	8b 45 fc	 mov	 eax, DWORD PTR _angle$[ebp]
  001bc	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  001c1	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  001c6	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax

; 278  : 		ds_xfrac += FixedMul(FINECOSINE(angle), (bgofs<<FRACBITS));

  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _bgofs
  001ce	c1 e0 10	 shl	 eax, 16			; 00000010H
  001d1	50		 push	 eax
  001d2	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  001d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  001db	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 _FixedMul
  001e4	83 c4 08	 add	 esp, 8
  001e7	03 05 00 00 00
	00		 add	 eax, DWORD PTR _ds_xfrac
  001ed	a3 00 00 00 00	 mov	 DWORD PTR _ds_xfrac, eax

; 279  : 		ds_yfrac += FixedMul(FINESINE(angle), (bgofs<<FRACBITS));

  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _bgofs
  001f7	c1 e0 10	 shl	 eax, 16			; 00000010H
  001fa	50		 push	 eax
  001fb	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  001fe	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 _FixedMul
  0020b	83 c4 08	 add	 esp, 8
  0020e	03 05 00 00 00
	00		 add	 eax, DWORD PTR _ds_yfrac
  00214	a3 00 00 00 00	 mov	 DWORD PTR _ds_yfrac, eax

; 280  : 
; 281  : 		if (y+bgofs>=viewheight)

  00219	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  0021c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _bgofs
  00222	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _viewheight
  00228	7c 10		 jl	 SHORT $LN6@R_MapPlane

; 282  : 			bgofs = viewheight-y-1;

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  0022f	2b 45 08	 sub	 eax, DWORD PTR _y$[ebp]
  00232	83 e8 01	 sub	 eax, 1
  00235	a3 00 00 00 00	 mov	 DWORD PTR _bgofs, eax
$LN6@R_MapPlane:

; 283  : 		if (y+bgofs<0)

  0023a	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  0023d	03 05 00 00 00
	00		 add	 eax, DWORD PTR _bgofs
  00243	79 0a		 jns	 SHORT $LN7@R_MapPlane

; 284  : 			bgofs = -y;

  00245	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00248	f7 d8		 neg	 eax
  0024a	a3 00 00 00 00	 mov	 DWORD PTR _bgofs, eax
$LN7@R_MapPlane:

; 285  : 	}
; 286  : 
; 287  : 	pindex = distance >> LIGHTZSHIFT;

  0024f	8b 45 f8	 mov	 eax, DWORD PTR _distance$[ebp]
  00252	c1 f8 14	 sar	 eax, 20			; 00000014H
  00255	89 45 f0	 mov	 DWORD PTR _pindex$[ebp], eax

; 288  : 
; 289  : 	if (pindex >= MAXLIGHTZ)

  00258	81 7d f0 80 00
	00 00		 cmp	 DWORD PTR _pindex$[ebp], 128 ; 00000080H
  0025f	72 07		 jb	 SHORT $LN8@R_MapPlane

; 290  : 		pindex = MAXLIGHTZ - 1;

  00261	c7 45 f0 7f 00
	00 00		 mov	 DWORD PTR _pindex$[ebp], 127 ; 0000007fH
$LN8@R_MapPlane:

; 291  : 
; 292  : 	ds_colormap = planezlight[pindex];

  00268	8b 45 f0	 mov	 eax, DWORD PTR _pindex$[ebp]
  0026b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _planezlight
  00271	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00274	89 15 00 00 00
	00		 mov	 DWORD PTR _ds_colormap, edx

; 293  : 
; 294  : 	if (currentplane->extra_colormap)

  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentplane
  0027f	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00283	74 1d		 je	 SHORT $LN9@R_MapPlane

; 295  : 		ds_colormap = currentplane->extra_colormap->colormap + (ds_colormap - colormaps);

  00285	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentplane
  0028a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0028d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ds_colormap
  00293	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _colormaps
  00299	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  0029c	89 15 00 00 00
	00		 mov	 DWORD PTR _ds_colormap, edx
$LN9@R_MapPlane:

; 296  : 
; 297  : 	ds_y = y;

  002a2	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  002a5	a3 00 00 00 00	 mov	 DWORD PTR _ds_y, eax

; 298  : 	ds_x1 = x1;

  002aa	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  002ad	a3 00 00 00 00	 mov	 DWORD PTR _ds_x1, eax

; 299  : 	ds_x2 = x2;

  002b2	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  002b5	a3 00 00 00 00	 mov	 DWORD PTR _ds_x2, eax

; 300  : 
; 301  : 	// profile drawer
; 302  : #ifdef TIMING
; 303  : 	ProfZeroTimer();
; 304  : #endif
; 305  : 
; 306  : 	spanfunc();

  002ba	ff 15 00 00 00
	00		 call	 DWORD PTR _spanfunc
  002c0	90		 npad	 1

; 307  : 
; 308  : #ifdef TIMING
; 309  : 	RDMSR(0x10, &mycount);
; 310  : 	mytotal += mycount; // 64bit add
; 311  : 	if (!(nombre--))
; 312  : 	I_Error("spanfunc() CPU Spy reports: 0x%d %d\n", *((INT32 *)&mytotal+1), (INT32)mytotal);
; 313  : #endif
; 314  : }

  002c1	5f		 pop	 edi
  002c2	5e		 pop	 esi
  002c3	5b		 pop	 ebx
  002c4	8b e5		 mov	 esp, ebp
  002c6	5d		 pop	 ebp
  002c7	c3		 ret	 0
_R_MapPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_ClearPlanes
_TEXT	SEGMENT
_angle$ = -12						; size = 4
_p$ = -8						; size = 4
_i$ = -4						; size = 4
_R_ClearPlanes PROC					; COMDAT

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 324  : 	INT32 i, p;
; 325  : 	angle_t angle;
; 326  : 
; 327  : 	// opening / clipping determination
; 328  : 	for (i = 0; i < viewwidth; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@R_ClearPla
$LN2@R_ClearPla:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_ClearPla:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _viewwidth
  00024	0f 8d 83 00 00
	00		 jge	 $LN3@R_ClearPla

; 329  : 	{
; 330  : 		floorclip[i] = (INT16)viewheight;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002d	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _viewheight
  00034	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _floorclip[eax*2], cx

; 331  : 		ceilingclip[i] = (INT16)con_clipviewtop;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003f	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _con_clipviewtop
  00046	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _ceilingclip[eax*2], cx

; 332  : 		frontscale[i] = INT32_MAX;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00051	c7 04 85 00 00
	00 00 ff ff ff
	7f		 mov	 DWORD PTR _frontscale[eax*4], 2147483647 ; 7fffffffH

; 333  : 		for (p = 0; p < MAXFFLOORS; p++)

  0005c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0
  00063	eb 09		 jmp	 SHORT $LN7@R_ClearPla
$LN5@R_ClearPla:
  00065	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00068	83 c0 01	 add	 eax, 1
  0006b	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
$LN7@R_ClearPla:
  0006e	83 7d f8 28	 cmp	 DWORD PTR _p$[ebp], 40	; 00000028H
  00072	7d 34		 jge	 SHORT $LN6@R_ClearPla

; 334  : 		{
; 335  : 			ffloor[p].f_clip[i] = (INT16)viewheight;

  00074	69 45 f8 28 1e
	00 00		 imul	 eax, DWORD PTR _p$[ebp], 7720
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007e	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR _viewheight
  00085	66 89 94 48 24
	00 00 00	 mov	 WORD PTR _ffloor[eax+ecx*2+36], dx

; 336  : 			ffloor[p].c_clip[i] = (INT16)con_clipviewtop;

  0008d	69 45 f8 28 1e
	00 00		 imul	 eax, DWORD PTR _p$[ebp], 7720
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00097	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR _con_clipviewtop
  0009e	66 89 94 48 24
	0f 00 00	 mov	 WORD PTR _ffloor[eax+ecx*2+3876], dx

; 337  : 		}

  000a6	eb bd		 jmp	 SHORT $LN5@R_ClearPla
$LN6@R_ClearPla:

; 338  : 	}

  000a8	e9 65 ff ff ff	 jmp	 $LN2@R_ClearPla
$LN3@R_ClearPla:

; 339  : 
; 340  : 	numffloors = 0;

  000ad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _numffloors, 0

; 341  : 
; 342  : 	for (i = 0; i < MAXVISPLANES; i++)

  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000be	eb 09		 jmp	 SHORT $LN10@R_ClearPla
$LN8@R_ClearPla:
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c3	83 c0 01	 add	 eax, 1
  000c6	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@R_ClearPla:
  000c9	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  000d0	7d 43		 jge	 SHORT $LN9@R_ClearPla

; 343  : 	for (*freehead = visplanes[i], visplanes[i] = NULL;

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _freehead
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000da	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _visplanes[ecx*4]
  000e1	89 10		 mov	 DWORD PTR [eax], edx
  000e3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e6	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _visplanes[eax*4], 0
$LN11@R_ClearPla:

; 344  : 		freehead && *freehead ;)

  000f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _freehead, 0
  000f8	74 19		 je	 SHORT $LN12@R_ClearPla
  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _freehead
  000ff	83 38 00	 cmp	 DWORD PTR [eax], 0
  00102	74 0f		 je	 SHORT $LN12@R_ClearPla

; 345  : 	{
; 346  : 		freehead = &(*freehead)->next;

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR _freehead
  00109	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010b	89 0d 00 00 00
	00		 mov	 DWORD PTR _freehead, ecx

; 347  : 	}

  00111	eb de		 jmp	 SHORT $LN11@R_ClearPla
$LN12@R_ClearPla:
  00113	eb ab		 jmp	 SHORT $LN8@R_ClearPla
$LN9@R_ClearPla:

; 348  : 
; 349  : 	lastopening = openings;

  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR _openings
  0011a	a3 00 00 00 00	 mov	 DWORD PTR _lastopening, eax

; 350  : 
; 351  : 	// texture calculation
; 352  : 	memset(cachedheight, 0, sizeof (cachedheight));

  0011f	68 c0 12 00 00	 push	 4800			; 000012c0H
  00124	6a 00		 push	 0
  00126	68 00 00 00 00	 push	 OFFSET _cachedheight
  0012b	e8 00 00 00 00	 call	 _memset
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH

; 353  : 
; 354  : 	// left to right mapping
; 355  : 	angle = (viewangle-ANGLE_90)>>ANGLETOFINESHIFT;

  00133	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewangle
  00138	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  0013d	c1 e8 13	 shr	 eax, 19			; 00000013H
  00140	89 45 f4	 mov	 DWORD PTR _angle$[ebp], eax

; 356  : 
; 357  : 	// scale will be unit scale at SCREENWIDTH/2 distance
; 358  : 	basexscale = FixedDiv (FINECOSINE(angle),centerxfrac);

  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerxfrac
  00148	50		 push	 eax
  00149	8b 4d f4	 mov	 ecx, DWORD PTR _angle$[ebp]
  0014c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00152	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 _FixedDiv
  0015b	83 c4 08	 add	 esp, 8
  0015e	a3 00 00 00 00	 mov	 DWORD PTR _basexscale, eax

; 359  : 	baseyscale = -FixedDiv (FINESINE(angle),centerxfrac);

  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerxfrac
  00168	50		 push	 eax
  00169	8b 4d f4	 mov	 ecx, DWORD PTR _angle$[ebp]
  0016c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00173	52		 push	 edx
  00174	e8 00 00 00 00	 call	 _FixedDiv
  00179	83 c4 08	 add	 esp, 8
  0017c	f7 d8		 neg	 eax
  0017e	a3 00 00 00 00	 mov	 DWORD PTR _baseyscale, eax

; 360  : }

  00183	5f		 pop	 edi
  00184	5e		 pop	 esi
  00185	5b		 pop	 ebx
  00186	8b e5		 mov	 esp, ebp
  00188	5d		 pop	 ebp
  00189	c3		 ret	 0
_R_ClearPlanes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_plane.c
;	COMDAT _R_InitPlanes
_TEXT	SEGMENT
_R_InitPlanes PROC					; COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 116  : 	// FIXME: unused
; 117  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_R_InitPlanes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
END
