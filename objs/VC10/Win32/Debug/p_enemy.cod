; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\p_enemy.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_stplyr:DWORD
COMM	_var1:DWORD
COMM	_var2:DWORD
_DATA	ENDS
CONST	SEGMENT
_xspeed	DD	010000H
	DD	0b798H
	DD	00H
	DD	0ffff4868H
	DD	0ffff0000H
	DD	0ffff4868H
	DD	00H
	DD	0b798H
_yspeed	DD	00H
	DD	0b798H
	DD	010000H
	DD	0b798H
	DD	00H
	DD	0ffff4868H
	DD	0ffff0000H
	DD	0ffff4868H
CONST	ENDS
PUBLIC	_A_Explode
PUBLIC	_A_Pain
PUBLIC	_A_Fall
PUBLIC	_A_MonitorPop
PUBLIC	_A_Look
PUBLIC	_A_Chase
PUBLIC	_A_FaceTarget
PUBLIC	_A_Scream
PUBLIC	_A_BossDeath
PUBLIC	_A_CustomPower
PUBLIC	_A_GiveWeapon
PUBLIC	_A_JumpShield
PUBLIC	_A_RingShield
PUBLIC	_A_RingBox
PUBLIC	_A_Invincibility
PUBLIC	_A_SuperSneakers
PUBLIC	_A_BunnyHop
PUBLIC	_A_BubbleSpawn
PUBLIC	_A_BubbleRise
PUBLIC	_A_BubbleCheck
PUBLIC	_A_ExtraLife
PUBLIC	_A_BombShield
PUBLIC	_A_WaterShield
PUBLIC	_A_ForceShield
PUBLIC	_A_GravityBox
PUBLIC	_A_ScoreRise
PUBLIC	_A_ParticleSpawn
PUBLIC	_A_AttractChase
PUBLIC	_A_DropMine
PUBLIC	_A_FishJump
PUBLIC	_A_ThrownRing
PUBLIC	_A_GrenadeRing
PUBLIC	_A_SetSolidSteam
PUBLIC	_A_UnsetSolidSteam
PUBLIC	_A_SignPlayer
PUBLIC	_A_JetChase
PUBLIC	_A_JetbThink
PUBLIC	_A_JetgThink
PUBLIC	_A_JetgShoot
PUBLIC	_A_ShootBullet
PUBLIC	_A_MinusDigging
PUBLIC	_A_MinusPopup
PUBLIC	_A_MinusCheck
PUBLIC	_A_ChickenCheck
PUBLIC	_A_MouseThink
PUBLIC	_A_DetonChase
PUBLIC	_A_CapeChase
PUBLIC	_A_RotateSpikeBall
PUBLIC	_A_MaceRotate
PUBLIC	_A_RockSpawn
PUBLIC	_A_SnowBall
PUBLIC	_A_CrawlaCommanderThink
PUBLIC	_A_SmokeTrailer
PUBLIC	_A_RingExplode
PUBLIC	_A_OldRingExplode
PUBLIC	_A_MixUp
PUBLIC	_A_RecyclePowers
PUBLIC	_A_BossScream
PUBLIC	_A_Invinciblerize
PUBLIC	_A_DeInvinciblerize
PUBLIC	_A_GoopSplat
PUBLIC	_A_Boss2PogoSFX
PUBLIC	_A_EggmanBox
PUBLIC	_A_TurretFire
PUBLIC	_A_SuperTurretFire
PUBLIC	_A_TurretStop
PUBLIC	_A_JetJawRoam
PUBLIC	_A_JetJawChomp
PUBLIC	_A_PointyThink
PUBLIC	_A_CheckBuddy
PUBLIC	_A_HoodThink
PUBLIC	_A_ArrowCheck
PUBLIC	_A_SnailerThink
PUBLIC	_A_SharpChase
PUBLIC	_A_SharpSpin
PUBLIC	_A_VultureVtol
PUBLIC	_A_VultureCheck
PUBLIC	_A_SkimChase
PUBLIC	_A_SkullAttack
PUBLIC	_A_LobShot
PUBLIC	_A_CannonLook
PUBLIC	_A_FireShot
PUBLIC	_A_SuperFireShot
PUBLIC	_A_BossFireShot
PUBLIC	_A_SparkFollow
PUBLIC	_A_BuzzFly
PUBLIC	_A_GuardChase
PUBLIC	_A_SetReactionTime
PUBLIC	_A_Boss3TakeDamage
PUBLIC	_A_LinedefExecute
PUBLIC	_A_PlaySeeSound
PUBLIC	_A_PlayAttackSound
PUBLIC	_A_PlayActiveSound
PUBLIC	_A_1upThinker
PUBLIC	_A_BossZoom
PUBLIC	_A_Boss1Chase
PUBLIC	_A_Boss2Chase
PUBLIC	_A_Boss2Pogo
PUBLIC	_A_BossJetFume
PUBLIC	_A_SpawnObjectAbsolute
PUBLIC	_A_SpawnObjectRelative
PUBLIC	_A_ChangeAngleRelative
PUBLIC	_A_ChangeAngleAbsolute
PUBLIC	_A_PlaySound
PUBLIC	_A_FindTarget
PUBLIC	_A_FindTracer
PUBLIC	_A_SetTics
PUBLIC	_A_SetRandomTics
PUBLIC	_A_ChangeColorRelative
PUBLIC	_A_ChangeColorAbsolute
PUBLIC	_A_MoveRelative
PUBLIC	_A_MoveAbsolute
PUBLIC	_A_Thrust
PUBLIC	_A_ZThrust
PUBLIC	_A_SetTargetsTarget
PUBLIC	_A_SetObjectFlags
PUBLIC	_A_SetObjectFlags2
PUBLIC	_A_RandomState
PUBLIC	_A_RandomStateRange
PUBLIC	_A_DualAction
PUBLIC	_A_RemoteAction
PUBLIC	_A_ToggleFlameJet
PUBLIC	_P_LookForPlayers
PUBLIC	??_C@_0CA@HBHPAGLC@Note?3?5All?5monitors?5turned?5off?4?6@ ; `string'
PUBLIC	??_C@_0DN@MBOAHHBH@Powerup?5item?5not?5defined?5in?5?8da@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BJ@NIACNDHL@Power?5?$CD?$CFd?5out?5of?5range?$CB?6@ ; `string'
PUBLIC	??_C@_0BK@GBBAJBBN@Weapon?5?$CD?$CFd?5out?5of?5range?$CB?6@ ; `string'
PUBLIC	??_C@_0DM@KDHNCGCC@A_CapeChase?5called?5from?5object?5@ ; `string'
PUBLIC	??_C@_0EM@EBJEKIN@Hmm?0?5the?5guy?5I?8m?5chasing?5?$CIobjec@ ; `string'
PUBLIC	??_C@_0CA@KIOCEDCM@Error?3?5Spikeball?5has?5no?5target?6@ ; `string'
PUBLIC	??_C@_0DA@LOLKGCHG@Error?3?5A_RotateSpikeBall?3?5Objec@ ; `string'
PUBLIC	??_C@_0DJ@JDIBCCIP@A_RockSpawn?3?5Unable?5to?5find?5par@ ; `string'
PUBLIC	??_C@_0CO@HCDCGOCL@A_RockSpawn?3?5No?5X?9offset?5detect@ ; `string'
PUBLIC	??_C@_0CG@EOCNPKOM@Mace?5object?5?$CItype?5?$CFd?$CJ?5has?5no?5ta@ ; `string'
PUBLIC	??_C@_0BN@LNAJPBLC@Error?3?5Boss2?5has?5no?5target?$CB?6@ ; `string'
PUBLIC	??_C@_0DM@GFOEBPIJ@A_LinedefExecute?3?5Running?5mobjt@ ; `string'
PUBLIC	??_C@_0EG@ONNIOEE@A_SpawnObjectRelative?5called?5fr@ ; `string'
PUBLIC	??_C@_0DN@LFGBMAGN@A_FindTarget?5called?5from?5object@ ; `string'
PUBLIC	??_C@_0DO@PFKCPHAK@A_FindTarget?3?5Unable?5to?5find?5th@ ; `string'
PUBLIC	??_C@_0BP@KBCIBIGM@A_FindTarget?3?5Found?5a?5target?4?6@ ; `string'
PUBLIC	??_C@_0DN@HMPFMCNB@A_FindTracer?5called?5from?5object@ ; `string'
PUBLIC	??_C@_0DO@DHLMJMKP@A_FindTracer?3?5Unable?5to?5find?5th@ ; `string'
PUBLIC	??_C@_0BP@CJEIHPNN@A_FindTracer?3?5Found?5a?5target?4?6@ ; `string'
PUBLIC	??_C@_0BP@NPKHLJEF@A_Thrust?3?5Var1?5not?5specified?$CB?6@ ; `string'
PUBLIC	??_C@_0CA@FJOJCIAA@A_ZThrust?3?5Var1?5not?5specified?$CB?6@ ; `string'
PUBLIC	??_C@_0DN@HIAODGDM@A_DualAction?5called?5from?5object@ ; `string'
PUBLIC	??_C@_0DC@PIPMHHOL@A_DualAction?3?5Calling?5First?5Act@ ; `string'
PUBLIC	??_C@_0DD@NOLMHMBK@A_DualAction?3?5Calling?5Second?5Ac@ ; `string'
PUBLIC	??_C@_0EA@KMMJNDNE@A_RemoteAction?3?5Unable?5to?5find?5@ ; `string'
PUBLIC	??_C@_0CG@NCFJIBIK@A_RemoteAction?3?5Calling?5action?5@ ; `string'
PUBLIC	??_C@_0BH@EMPAMFHP@var1?5is?5?$CFd?6var2?5is?5?$CFd?6@ ; `string'
PUBLIC	__real@3fb33333
EXTRN	_memset:PROC
EXTRN	_abs:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_AngleFixed:PROC
EXTRN	_FixedAngle:PROC
EXTRN	_P_SpawnParaloop:PROC
EXTRN	_P_SupermanLook4Players:PROC
EXTRN	_P_SetScale:PROC
EXTRN	_P_SetTarget:PROC
EXTRN	_P_AproxDistance:PROC
EXTRN	_P_BlockThingsIterator:PROC
EXTRN	_P_IsLocalPlayer:PROC
EXTRN	_P_SetObjectMomZ:PROC
EXTRN	_P_RestoreMusic:PROC
EXTRN	_P_SpawnShieldOrb:PROC
EXTRN	_P_SpawnGhostMobj:PROC
EXTRN	_P_GivePlayerRings:PROC
EXTRN	_P_GivePlayerLives:PROC
EXTRN	_P_FreezeObjectplace:PROC
EXTRN	_P_DoPlayerExit:PROC
EXTRN	_P_InstaThrust:PROC
EXTRN	_P_ReturnThrustX:PROC
EXTRN	_P_ReturnThrustY:PROC
EXTRN	_P_HomingAttack:PROC
EXTRN	_P_SpawnMobj:PROC
EXTRN	_P_RemoveMobj:PROC
EXTRN	_P_SetMobjState:PROC
EXTRN	_P_MobjThinker:PROC
EXTRN	_P_SpawnMissile:PROC
EXTRN	_P_SpawnXYZMissile:PROC
EXTRN	_P_Attract:PROC
EXTRN	_P_GetClosestAxis:PROC
EXTRN	_P_UnsetThingPosition:PROC
EXTRN	_P_SetThingPosition:PROC
EXTRN	_P_CheckPosition:PROC
EXTRN	_P_TryMove:PROC
EXTRN	_P_CheckSight:PROC
EXTRN	_P_DelSeclist:PROC
EXTRN	_P_RadiusAttack:PROC
EXTRN	_P_DamageMobj:PROC
EXTRN	_P_FindSpecialLineFromTag:PROC
EXTRN	_P_LinedefExecute:PROC
EXTRN	_EV_DoCeiling:PROC
EXTRN	_EV_DoElevator:PROC
EXTRN	_P_MixUp:PROC
EXTRN	_P_SetMobjStateNF:PROC
EXTRN	_P_Thrust:PROC
EXTRN	_P_ExplodeMissile:PROC
EXTRN	_R_PointToAngle2:PROC
EXTRN	_R_PointToDist2:PROC
EXTRN	_R_PointInSubsector:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_S_StopSound:PROC
EXTRN	_S_ChangeMusic:PROC
EXTRN	_S_SpeedMusic:PROC
EXTRN	_S_StopMusic:PROC
EXTRN	_P_Random:PROC
EXTRN	_S_StartAttackSound:PROC
EXTRN	_S_StartScreamSound:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_ultimatemode:BYTE
EXTRN	_M_Memcpy:DWORD
EXTRN	_finesine:BYTE
EXTRN	_finecosine:DWORD
EXTRN	_states:BYTE
EXTRN	_mobjinfo:BYTE
EXTRN	_gamemap:WORD
EXTRN	_maptol:WORD
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_mapheaderinfo:BYTE
EXTRN	_invulntics:DWORD
EXTRN	_sneakertics:DWORD
EXTRN	_extralifetics:DWORD
EXTRN	_gravbootstics:DWORD
EXTRN	_gravity:DWORD
EXTRN	_gametic:DWORD
EXTRN	_text:BYTE
EXTRN	_cv_tagtype:BYTE
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_friendlyfire:BYTE
EXTRN	_cv_teleporters:BYTE
EXTRN	_cv_superring:BYTE
EXTRN	_cv_supersneakers:BYTE
EXTRN	_cv_invincibility:BYTE
EXTRN	_cv_jumpshield:BYTE
EXTRN	_cv_watershield:BYTE
EXTRN	_cv_ringshield:BYTE
EXTRN	_cv_forceshield:BYTE
EXTRN	_cv_bombshield:BYTE
EXTRN	_cv_1up:BYTE
EXTRN	_cv_eggmanbox:BYTE
EXTRN	_cv_recycler:BYTE
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_leveltime:DWORD
EXTRN	_thinkercap:BYTE
EXTRN	_floatok:DWORD
EXTRN	_tmfloorz:DWORD
EXTRN	_tmthing:DWORD
EXTRN	_sector_list:DWORD
EXTRN	_bmaporgx:DWORD
EXTRN	_bmaporgy:DWORD
EXTRN	_lines:DWORD
EXTRN	_sides:DWORD
EXTRN	_skins:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?ret@?1??VectorMatrixMultiply@@9@9 DD 04H DUP (?)	; `VectorMatrixMultiply'::`2'::ret
?ret@?1??RotateXMatrix@@9@9 DD 010H DUP (?)		; `RotateXMatrix'::`2'::ret
?ret@?1??RotateZMatrix@@9@9 DD 010H DUP (?)		; `RotateZMatrix'::`2'::ret
_grenade DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@3fb33333
CONST	SEGMENT
__real@3fb33333 DD 03fb33333r			; 1.4
CONST	ENDS
;	COMDAT ??_C@_0BH@EMPAMFHP@var1?5is?5?$CFd?6var2?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@EMPAMFHP@var1?5is?5?$CFd?6var2?5is?5?$CFd?6@ DB 'var1 is %d', 0aH
	DB	'var2 is %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NCFJIBIK@A_RemoteAction?3?5Calling?5action?5@
CONST	SEGMENT
??_C@_0CG@NCFJIBIK@A_RemoteAction?3?5Calling?5action?5@ DB 'A_RemoteActio'
	DB	'n: Calling action on %p', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@KMMJNDNE@A_RemoteAction?3?5Unable?5to?5find?5@
CONST	SEGMENT
??_C@_0EA@KMMJNDNE@A_RemoteAction?3?5Unable?5to?5find?5@ DB 'A_RemoteActi'
	DB	'on: Unable to find the specified object to target.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NOLMHMBK@A_DualAction?3?5Calling?5Second?5Ac@
CONST	SEGMENT
??_C@_0DD@NOLMHMBK@A_DualAction?3?5Calling?5Second?5Ac@ DB 'A_DualAction:'
	DB	' Calling Second Action (state %d)...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PIPMHHOL@A_DualAction?3?5Calling?5First?5Act@
CONST	SEGMENT
??_C@_0DC@PIPMHHOL@A_DualAction?3?5Calling?5First?5Act@ DB 'A_DualAction:'
	DB	' Calling First Action (state %d)...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@HIAODGDM@A_DualAction?5called?5from?5object@
CONST	SEGMENT
??_C@_0DN@HIAODGDM@A_DualAction?5called?5from?5object@ DB 'A_DualAction c'
	DB	'alled from object type %d, var1: %d, var2: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FJOJCIAA@A_ZThrust?3?5Var1?5not?5specified?$CB?6@
CONST	SEGMENT
??_C@_0CA@FJOJCIAA@A_ZThrust?3?5Var1?5not?5specified?$CB?6@ DB 'A_ZThrust'
	DB	': Var1 not specified!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NPKHLJEF@A_Thrust?3?5Var1?5not?5specified?$CB?6@
CONST	SEGMENT
??_C@_0BP@NPKHLJEF@A_Thrust?3?5Var1?5not?5specified?$CB?6@ DB 'A_Thrust: '
	DB	'Var1 not specified!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CJEIHPNN@A_FindTracer?3?5Found?5a?5target?4?6@
CONST	SEGMENT
??_C@_0BP@CJEIHPNN@A_FindTracer?3?5Found?5a?5target?4?6@ DB 'A_FindTracer'
	DB	': Found a target.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@DHLMJMKP@A_FindTracer?3?5Unable?5to?5find?5th@
CONST	SEGMENT
??_C@_0DO@DHLMJMKP@A_FindTracer?3?5Unable?5to?5find?5th@ DB 'A_FindTracer'
	DB	': Unable to find the specified object to target.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@HMPFMCNB@A_FindTracer?5called?5from?5object@
CONST	SEGMENT
??_C@_0DN@HMPFMCNB@A_FindTracer?5called?5from?5object@ DB 'A_FindTracer c'
	DB	'alled from object type %d, var1: %d, var2: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KBCIBIGM@A_FindTarget?3?5Found?5a?5target?4?6@
CONST	SEGMENT
??_C@_0BP@KBCIBIGM@A_FindTarget?3?5Found?5a?5target?4?6@ DB 'A_FindTarget'
	DB	': Found a target.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PFKCPHAK@A_FindTarget?3?5Unable?5to?5find?5th@
CONST	SEGMENT
??_C@_0DO@PFKCPHAK@A_FindTarget?3?5Unable?5to?5find?5th@ DB 'A_FindTarget'
	DB	': Unable to find the specified object to target.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LFGBMAGN@A_FindTarget?5called?5from?5object@
CONST	SEGMENT
??_C@_0DN@LFGBMAGN@A_FindTarget?5called?5from?5object@ DB 'A_FindTarget c'
	DB	'alled from object type %d, var1: %d, var2: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@ONNIOEE@A_SpawnObjectRelative?5called?5fr@
CONST	SEGMENT
??_C@_0EG@ONNIOEE@A_SpawnObjectRelative?5called?5fr@ DB 'A_SpawnObjectRel'
	DB	'ative called from object type %d, var1: %d, var2: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@GFOEBPIJ@A_LinedefExecute?3?5Running?5mobjt@
CONST	SEGMENT
??_C@_0DM@GFOEBPIJ@A_LinedefExecute?3?5Running?5mobjt@ DB 'A_LinedefExecu'
	DB	'te: Running mobjtype %d''s sector with tag %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LNAJPBLC@Error?3?5Boss2?5has?5no?5target?$CB?6@
CONST	SEGMENT
??_C@_0BN@LNAJPBLC@Error?3?5Boss2?5has?5no?5target?$CB?6@ DB 'Error: Boss'
	DB	'2 has no target!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EOCNPKOM@Mace?5object?5?$CItype?5?$CFd?$CJ?5has?5no?5ta@
CONST	SEGMENT
??_C@_0CG@EOCNPKOM@Mace?5object?5?$CItype?5?$CFd?$CJ?5has?5no?5ta@ DB 'Ma'
	DB	'ce object (type %d) has no target!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HCDCGOCL@A_RockSpawn?3?5No?5X?9offset?5detect@
CONST	SEGMENT
??_C@_0CO@HCDCGOCL@A_RockSpawn?3?5No?5X?9offset?5detect@ DB 'A_RockSpawn:'
	DB	' No X-offset detected! (tag %d)!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@JDIBCCIP@A_RockSpawn?3?5Unable?5to?5find?5par@
CONST	SEGMENT
??_C@_0DJ@JDIBCCIP@A_RockSpawn?3?5Unable?5to?5find?5par@ DB 'A_RockSpawn:'
	DB	' Unable to find parameter line 12 (tag %d)!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LOLKGCHG@Error?3?5A_RotateSpikeBall?3?5Objec@
CONST	SEGMENT
??_C@_0DA@LOLKGCHG@Error?3?5A_RotateSpikeBall?3?5Objec@ DB 'Error: A_Rota'
	DB	'teSpikeBall: Object has no speed.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KIOCEDCM@Error?3?5Spikeball?5has?5no?5target?6@
CONST	SEGMENT
??_C@_0CA@KIOCEDCM@Error?3?5Spikeball?5has?5no?5target?6@ DB 'Error: Spik'
	DB	'eball has no target', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@EBJEKIN@Hmm?0?5the?5guy?5I?8m?5chasing?5?$CIobjec@
CONST	SEGMENT
??_C@_0EM@EBJEKIN@Hmm?0?5the?5guy?5I?8m?5chasing?5?$CIobjec@ DB 'Hmm, the'
	DB	' guy I''m chasing (object type %d) has no health.. so I''ll d'
	DB	'ie too!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KDHNCGCC@A_CapeChase?5called?5from?5object?5@
CONST	SEGMENT
??_C@_0DM@KDHNCGCC@A_CapeChase?5called?5from?5object?5@ DB 'A_CapeChase c'
	DB	'alled from object type %d, var1: %d, var2: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GBBAJBBN@Weapon?5?$CD?$CFd?5out?5of?5range?$CB?6@
CONST	SEGMENT
??_C@_0BK@GBBAJBBN@Weapon?5?$CD?$CFd?5out?5of?5range?$CB?6@ DB 'Weapon #%'
	DB	'd out of range!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NIACNDHL@Power?5?$CD?$CFd?5out?5of?5range?$CB?6@
CONST	SEGMENT
??_C@_0BJ@NIACNDHL@Power?5?$CD?$CFd?5out?5of?5range?$CB?6@ DB 'Power #%d '
	DB	'out of range!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MBOAHHBH@Powerup?5item?5not?5defined?5in?5?8da@
CONST	SEGMENT
??_C@_0DN@MBOAHHBH@Powerup?5item?5not?5defined?5in?5?8da@ DB 'Powerup ite'
	DB	'm not defined in ''damage'' field for A_MonitorPop', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HBHPAGLC@Note?3?5All?5monitors?5turned?5off?4?6@
CONST	SEGMENT
??_C@_0CA@HBHPAGLC@Note?3?5All?5monitors?5turned?5off?4?6@ DB 'Note: All '
	DB	'monitors turned off.', 0aH, 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_opposite DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	0ffffffffH
_diags	DD	03H
	DD	01H
	DD	05H
	DD	07H
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0381H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	044aH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	0896H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0d3cH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	047dH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	05a1H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0747H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _PIT_GrenadeRing
_TEXT	SEGMENT
_thing$ = 8						; size = 4
_PIT_GrenadeRing PROC					; COMDAT

; 3029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3030 : 	if (!grenade)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _grenade, 0
  00010	75 0a		 jne	 SHORT $LN2@PIT_Grenad

; 3031 : 		return true;

  00012	b8 01 00 00 00	 mov	 eax, 1
  00017	e9 a9 01 00 00	 jmp	 $LN1@PIT_Grenad
$LN2@PIT_Grenad:

; 3032 : 
; 3033 : 	if (thing->type != MT_PLAYER) // Don't explode for anything but an actual player.

  0001c	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0001f	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00023	74 0a		 je	 SHORT $LN3@PIT_Grenad

; 3034 : 		return true;

  00025	b8 01 00 00 00	 mov	 eax, 1
  0002a	e9 96 01 00 00	 jmp	 $LN1@PIT_Grenad
$LN3@PIT_Grenad:

; 3035 : 
; 3036 : 	if (thing == grenade->target) // Don't blow up at your owner.

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenade
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00037	3b 88 98 00 00
	00		 cmp	 ecx, DWORD PTR [eax+152]
  0003d	75 0a		 jne	 SHORT $LN4@PIT_Grenad

; 3037 : 		return true;

  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	e9 7c 01 00 00	 jmp	 $LN1@PIT_Grenad
$LN4@PIT_Grenad:

; 3038 : 
; 3039 : 	if ((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))
; 3040 : 		&& !cv_friendlyfire.value && grenade->target->player && thing->player
; 3041 : 		&& grenade->target->player->ctfteam == thing->player->ctfteam) // Don't blow up at your teammates, unless friendlyfire is on

  00049	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00050	83 f8 04	 cmp	 eax, 4
  00053	74 15		 je	 SHORT $LN6@PIT_Grenad
  00055	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0005c	83 f8 01	 cmp	 eax, 1
  0005f	75 64		 jne	 SHORT $LN5@PIT_Grenad
  00061	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00068	74 5b		 je	 SHORT $LN5@PIT_Grenad
$LN6@PIT_Grenad:
  0006a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_friendlyfire+20, 0
  00071	75 52		 jne	 SHORT $LN5@PIT_Grenad
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenade
  00078	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0007e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00085	74 3e		 je	 SHORT $LN5@PIT_Grenad
  00087	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0008a	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00091	74 32		 je	 SHORT $LN5@PIT_Grenad
  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenade
  00098	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0009e	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  000a4	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000a7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000ad	8b 92 60 01 00
	00		 mov	 edx, DWORD PTR [edx+352]
  000b3	3b 91 60 01 00
	00		 cmp	 edx, DWORD PTR [ecx+352]
  000b9	75 0a		 jne	 SHORT $LN5@PIT_Grenad

; 3042 : 		return true;

  000bb	b8 01 00 00 00	 mov	 eax, 1
  000c0	e9 00 01 00 00	 jmp	 $LN1@PIT_Grenad
$LN5@PIT_Grenad:

; 3043 : 
; 3044 : 	// see if it went over / under
; 3045 : 	if (grenade->z > thing->z + thing->height)

  000c5	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000c8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000cb	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  000ce	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenade
  000d6	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  000d9	7e 0a		 jle	 SHORT $LN7@PIT_Grenad

; 3046 : 		return true; // overhead

  000db	b8 01 00 00 00	 mov	 eax, 1
  000e0	e9 e0 00 00 00	 jmp	 $LN1@PIT_Grenad
$LN7@PIT_Grenad:

; 3047 : 	if (grenade->z + grenade->height < thing->z)

  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenade
  000ea	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _grenade
  000f3	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  000f6	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000f9	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  000fc	7d 0a		 jge	 SHORT $LN8@PIT_Grenad

; 3048 : 		return true; // underneath

  000fe	b8 01 00 00 00	 mov	 eax, 1
  00103	e9 bd 00 00 00	 jmp	 $LN1@PIT_Grenad
$LN8@PIT_Grenad:

; 3049 : 
; 3050 : 	if (netgame && thing->player && thing->player->spectator)

  00108	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0010f	74 2a		 je	 SHORT $LN9@PIT_Grenad
  00111	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00114	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0011b	74 1e		 je	 SHORT $LN9@PIT_Grenad
  0011d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00120	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00126	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  0012d	85 d2		 test	 edx, edx
  0012f	74 0a		 je	 SHORT $LN9@PIT_Grenad

; 3051 : 		return true;

  00131	b8 01 00 00 00	 mov	 eax, 1
  00136	e9 8a 00 00 00	 jmp	 $LN1@PIT_Grenad
$LN9@PIT_Grenad:

; 3052 : 
; 3053 : 	if (!(thing->flags & MF_SHOOTABLE))

  0013b	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0013e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00141	83 e1 04	 and	 ecx, 4
  00144	75 07		 jne	 SHORT $LN10@PIT_Grenad

; 3054 : 	{
; 3055 : 		// didn't do any damage
; 3056 : 		return true;

  00146	b8 01 00 00 00	 mov	 eax, 1
  0014b	eb 78		 jmp	 SHORT $LN1@PIT_Grenad
$LN10@PIT_Grenad:

; 3057 : 	}
; 3058 : 
; 3059 : 	if (P_AproxDistance(P_AproxDistance(thing->x - grenade->x, thing->y - grenade->y),
; 3060 : 		thing->z - grenade->z) > grenade->info->painchance)

  0014d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00150	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grenade
  00156	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00159	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  0015c	52		 push	 edx
  0015d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grenade
  00166	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00169	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  0016c	52		 push	 edx
  0016d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grenade
  00176	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00179	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0017c	52		 push	 edx
  0017d	e8 00 00 00 00	 call	 _P_AproxDistance
  00182	83 c4 08	 add	 esp, 8
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 _P_AproxDistance
  0018b	83 c4 08	 add	 esp, 8
  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grenade
  00194	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0019a	3b 42 20	 cmp	 eax, DWORD PTR [edx+32]
  0019d	7e 07		 jle	 SHORT $LN11@PIT_Grenad

; 3061 : 		return true; // Too far away

  0019f	b8 01 00 00 00	 mov	 eax, 1
  001a4	eb 1f		 jmp	 SHORT $LN1@PIT_Grenad
$LN11@PIT_Grenad:

; 3062 : 
; 3063 : 	// Explode!
; 3064 : 	P_SetMobjState(grenade, grenade->info->deathstate);

  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenade
  001ab	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001b1	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001b4	52		 push	 edx
  001b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenade
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 _P_SetMobjState
  001c0	83 c4 08	 add	 esp, 8

; 3065 : 	return false;

  001c3	33 c0		 xor	 eax, eax
$LN1@PIT_Grenad:

; 3066 : }

  001c5	5f		 pop	 edi
  001c6	5e		 pop	 esi
  001c7	5b		 pop	 ebx
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
_PIT_GrenadeRing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _P_LookForShield
_TEXT	SEGMENT
tv89 = -84						; size = 4
_sector$ = -16						; size = 4
_player$ = -12						; size = 4
_stop$ = -8						; size = 4
_c$ = -4						; size = 4
_actor$ = 8						; size = 4
_P_LookForShield PROC					; COMDAT

; 669  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 670  : 	INT32 c = 0, stop;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0

; 671  : 	player_t *player;
; 672  : 	sector_t *sector;
; 673  : 
; 674  : 	sector = actor->subsector->sector;

  00010	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00013	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	89 55 f0	 mov	 DWORD PTR _sector$[ebp], edx

; 675  : 
; 676  : 	// BP: first time init, this allow minimum lastlook changes
; 677  : 	if (actor->lastlook < 0)

  0001b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001e	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00025	7d 11		 jge	 SHORT $LN5@P_LookForS

; 678  : 		actor->lastlook = P_Random();

  00027	e8 00 00 00 00	 call	 _P_Random
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00032	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
$LN5@P_LookForS:

; 679  : 
; 680  : 	actor->lastlook %= MAXPLAYERS;

  00038	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003b	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00041	81 e1 1f 00 00
	80		 and	 ecx, -2147483617	; 8000001fH
  00047	79 05		 jns	 SHORT $LN16@P_LookForS
  00049	49		 dec	 ecx
  0004a	83 c9 e0	 or	 ecx, -32		; ffffffe0H
  0004d	41		 inc	 ecx
$LN16@P_LookForS:
  0004e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00051	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx

; 681  : 
; 682  : 	stop = (actor->lastlook - 1) & PLAYERSMASK;

  00057	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005a	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00060	83 e9 01	 sub	 ecx, 1
  00063	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00066	89 4d f8	 mov	 DWORD PTR _stop$[ebp], ecx
  00069	eb 18		 jmp	 SHORT $LN4@P_LookForS
$LN2@P_LookForS:

; 683  : 
; 684  : 	for (; ; actor->lastlook = ((actor->lastlook + 1) & PLAYERSMASK))

  0006b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006e	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00074	83 c1 01	 add	 ecx, 1
  00077	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0007a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0007d	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx
$LN4@P_LookForS:

; 685  : 	{
; 686  : 		// done looking
; 687  : 		if (actor->lastlook == stop)

  00083	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00086	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  0008c	3b 4d f8	 cmp	 ecx, DWORD PTR _stop$[ebp]
  0008f	75 07		 jne	 SHORT $LN6@P_LookForS

; 688  : 			return false;

  00091	33 c0		 xor	 eax, eax
  00093	e9 07 01 00 00	 jmp	 $LN3@P_LookForS
$LN6@P_LookForS:

; 689  : 
; 690  : 		if (!playeringame[actor->lastlook])

  00098	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009b	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  000a1	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[ecx*4], 0
  000a9	75 02		 jne	 SHORT $LN7@P_LookForS

; 691  : 			continue;

  000ab	eb be		 jmp	 SHORT $LN2@P_LookForS
$LN7@P_LookForS:

; 692  : 
; 693  : 		if (c++ == 2)

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  000b0	89 45 ac	 mov	 DWORD PTR tv89[ebp], eax
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _c$[ebp]
  000b6	83 c1 01	 add	 ecx, 1
  000b9	89 4d fc	 mov	 DWORD PTR _c$[ebp], ecx
  000bc	83 7d ac 02	 cmp	 DWORD PTR tv89[ebp], 2
  000c0	75 07		 jne	 SHORT $LN8@P_LookForS

; 694  : 			return false;

  000c2	33 c0		 xor	 eax, eax
  000c4	e9 d6 00 00 00	 jmp	 $LN3@P_LookForS
$LN8@P_LookForS:

; 695  : 
; 696  : 		player = &players[actor->lastlook];

  000c9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cc	69 88 a8 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR [eax+168], 508
  000d6	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  000dc	89 4d f4	 mov	 DWORD PTR _player$[ebp], ecx

; 697  : 
; 698  : 		if (player->health <= 0 || !player->mo)

  000df	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  000e2	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  000e6	7e 08		 jle	 SHORT $LN10@P_LookForS
  000e8	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  000eb	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ee	75 05		 jne	 SHORT $LN9@P_LookForS
$LN10@P_LookForS:

; 699  : 			continue; // dead

  000f0	e9 76 ff ff ff	 jmp	 $LN2@P_LookForS
$LN9@P_LookForS:

; 700  : 
; 701  : 		//When in CTF, don't pull rings that you cannot pick up.
; 702  : 		if ((actor->type == MT_REDTEAMRING && player->ctfteam != 1) ||

  000f5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f8	83 78 7c 30	 cmp	 DWORD PTR [eax+124], 48	; 00000030H
  000fc	75 0c		 jne	 SHORT $LN13@P_LookForS
  000fe	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00101	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  00108	75 15		 jne	 SHORT $LN12@P_LookForS
$LN13@P_LookForS:
  0010a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010d	83 78 7c 31	 cmp	 DWORD PTR [eax+124], 49	; 00000031H
  00111	75 11		 jne	 SHORT $LN11@P_LookForS
  00113	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00116	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  0011d	74 05		 je	 SHORT $LN11@P_LookForS
$LN12@P_LookForS:

; 703  : 			(actor->type == MT_BLUETEAMRING && player->ctfteam != 2))
; 704  : 			continue;

  0011f	e9 47 ff ff ff	 jmp	 $LN2@P_LookForS
$LN11@P_LookForS:

; 705  : 
; 706  : 		if (player->powers[pw_ringshield]
; 707  : 			&& (P_AproxDistance(P_AproxDistance(actor->x-player->mo->x, actor->y-player->mo->y), actor->z-player->mo->z) < RING_DIST))

  00124	b8 04 00 00 00	 mov	 eax, 4
  00129	6b c8 09	 imul	 ecx, eax, 9
  0012c	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  0012f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00134	74 64		 je	 SHORT $LN14@P_LookForS
  00136	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00139	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0013e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00141	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  00144	50		 push	 eax
  00145	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  00148	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00150	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  00153	51		 push	 ecx
  00154	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  00157	8b 02		 mov	 eax, DWORD PTR [edx]
  00159	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0015c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0015f	2b 50 10	 sub	 edx, DWORD PTR [eax+16]
  00162	52		 push	 edx
  00163	e8 00 00 00 00	 call	 _P_AproxDistance
  00168	83 c4 08	 add	 esp, 8
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 _P_AproxDistance
  00171	83 c4 08	 add	 esp, 8
  00174	3d 00 00 00 02	 cmp	 eax, 33554432		; 02000000H
  00179	7d 1f		 jge	 SHORT $LN14@P_LookForS

; 708  : 		{
; 709  : 			P_SetTarget(&actor->tracer, player->mo);

  0017b	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0017e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00180	51		 push	 ecx
  00181	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00184	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _P_SetTarget
  00190	83 c4 08	 add	 esp, 8

; 710  : 			return true;

  00193	b8 01 00 00 00	 mov	 eax, 1
  00198	eb 05		 jmp	 SHORT $LN3@P_LookForS
$LN14@P_LookForS:

; 711  : 		}
; 712  : 	}

  0019a	e9 cc fe ff ff	 jmp	 $LN2@P_LookForS
$LN3@P_LookForS:

; 713  : 
; 714  : 	//return false;
; 715  : }

  0019f	5f		 pop	 edi
  001a0	5e		 pop	 esi
  001a1	5b		 pop	 ebx
  001a2	8b e5		 mov	 esp, ebp
  001a4	5d		 pop	 ebp
  001a5	c3		 ret	 0
_P_LookForShield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _P_NewChaseDir
_TEXT	SEGMENT
tv135 = -112						; size = 4
tv132 = -108						; size = 4
_newdir$1 = -40						; size = 4
_turnaround$ = -36					; size = 4
_olddir$ = -32						; size = 4
_tdir$ = -28						; size = 4
_d$ = -24						; size = 12
_deltay$ = -12						; size = 4
_deltax$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_actor$ = 8						; size = 4
_P_NewChaseDir PROC					; COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 457  : 	fixed_t deltax, deltay;
; 458  : 	dirtype_t d[3];
; 459  : 	dirtype_t tdir = DI_NODIR, olddir, turnaround;

  00013	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _tdir$[ebp], -1

; 460  : 
; 461  : #ifdef PARANOIA
; 462  : 	if (!actor->target)
; 463  : 		I_Error("P_NewChaseDir: called with no target");
; 464  : #endif
; 465  : 
; 466  : 	olddir = actor->movedir;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00023	89 4d e0	 mov	 DWORD PTR _olddir$[ebp], ecx

; 467  : 
; 468  : 	if (olddir >= NUMDIRS)

  00026	83 7d e0 08	 cmp	 DWORD PTR _olddir$[ebp], 8
  0002a	7c 07		 jl	 SHORT $LN8@P_NewChase

; 469  : 		olddir = DI_NODIR;

  0002c	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _olddir$[ebp], -1
$LN8@P_NewChase:

; 470  : 
; 471  : 	if (olddir != DI_NODIR)

  00033	83 7d e0 ff	 cmp	 DWORD PTR _olddir$[ebp], -1
  00037	74 0f		 je	 SHORT $LN9@P_NewChase

; 472  : 		turnaround = opposite[olddir];

  00039	8b 45 e0	 mov	 eax, DWORD PTR _olddir$[ebp]
  0003c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _opposite[eax*4]
  00043	89 4d dc	 mov	 DWORD PTR _turnaround$[ebp], ecx
  00046	eb 06		 jmp	 SHORT $LN10@P_NewChase
$LN9@P_NewChase:

; 473  : 	else
; 474  : 		turnaround = olddir;

  00048	8b 45 e0	 mov	 eax, DWORD PTR _olddir$[ebp]
  0004b	89 45 dc	 mov	 DWORD PTR _turnaround$[ebp], eax
$LN10@P_NewChase:

; 475  : 
; 476  : 	deltax = actor->target->x - actor->x;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00051	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00057	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0005a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005d	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  00060	89 45 f8	 mov	 DWORD PTR _deltax$[ebp], eax

; 477  : 	deltay = actor->target->y - actor->y;

  00063	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00066	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006f	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00072	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00075	89 45 f4	 mov	 DWORD PTR _deltay$[ebp], eax

; 478  : 
; 479  : 	if (deltax > 10*FRACUNIT)

  00078	81 7d f8 00 00
	0a 00		 cmp	 DWORD PTR _deltax$[ebp], 655360 ; 000a0000H
  0007f	7e 12		 jle	 SHORT $LN11@P_NewChase

; 480  : 		d[1] = DI_EAST;

  00081	b8 04 00 00 00	 mov	 eax, 4
  00086	c1 e0 00	 shl	 eax, 0
  00089	c7 44 05 e8 00
	00 00 00	 mov	 DWORD PTR _d$[ebp+eax], 0
  00091	eb 2b		 jmp	 SHORT $LN14@P_NewChase
$LN11@P_NewChase:

; 481  : 	else if (deltax < -10*FRACUNIT)

  00093	81 7d f8 00 00
	f6 ff		 cmp	 DWORD PTR _deltax$[ebp], -655360 ; fff60000H
  0009a	7d 12		 jge	 SHORT $LN13@P_NewChase

; 482  : 		d[1] = DI_WEST;

  0009c	b8 04 00 00 00	 mov	 eax, 4
  000a1	c1 e0 00	 shl	 eax, 0
  000a4	c7 44 05 e8 04
	00 00 00	 mov	 DWORD PTR _d$[ebp+eax], 4
  000ac	eb 10		 jmp	 SHORT $LN14@P_NewChase
$LN13@P_NewChase:

; 483  : 	else
; 484  : 		d[1] = DI_NODIR;

  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	c1 e0 00	 shl	 eax, 0
  000b6	c7 44 05 e8 ff
	ff ff ff	 mov	 DWORD PTR _d$[ebp+eax], -1
$LN14@P_NewChase:

; 485  : 
; 486  : 	if (deltay < -10*FRACUNIT)

  000be	81 7d f4 00 00
	f6 ff		 cmp	 DWORD PTR _deltay$[ebp], -655360 ; fff60000H
  000c5	7d 11		 jge	 SHORT $LN15@P_NewChase

; 487  : 		d[2] = DI_SOUTH;

  000c7	b8 04 00 00 00	 mov	 eax, 4
  000cc	d1 e0		 shl	 eax, 1
  000ce	c7 44 05 e8 06
	00 00 00	 mov	 DWORD PTR _d$[ebp+eax], 6
  000d6	eb 29		 jmp	 SHORT $LN18@P_NewChase
$LN15@P_NewChase:

; 488  : 	else if (deltay > 10*FRACUNIT)

  000d8	81 7d f4 00 00
	0a 00		 cmp	 DWORD PTR _deltay$[ebp], 655360 ; 000a0000H
  000df	7e 11		 jle	 SHORT $LN17@P_NewChase

; 489  : 		d[2] = DI_NORTH;

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	d1 e0		 shl	 eax, 1
  000e8	c7 44 05 e8 02
	00 00 00	 mov	 DWORD PTR _d$[ebp+eax], 2
  000f0	eb 0f		 jmp	 SHORT $LN18@P_NewChase
$LN17@P_NewChase:

; 490  : 	else
; 491  : 		d[2] = DI_NODIR;

  000f2	b8 04 00 00 00	 mov	 eax, 4
  000f7	d1 e0		 shl	 eax, 1
  000f9	c7 44 05 e8 ff
	ff ff ff	 mov	 DWORD PTR _d$[ebp+eax], -1
$LN18@P_NewChase:

; 492  : 
; 493  : 	// try direct route
; 494  : 	if (d[1] != DI_NODIR && d[2] != DI_NODIR)

  00101	b8 04 00 00 00	 mov	 eax, 4
  00106	c1 e0 00	 shl	 eax, 0
  00109	83 7c 05 e8 ff	 cmp	 DWORD PTR _d$[ebp+eax], -1
  0010e	74 76		 je	 SHORT $LN20@P_NewChase
  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	d1 e0		 shl	 eax, 1
  00117	83 7c 05 e8 ff	 cmp	 DWORD PTR _d$[ebp+eax], -1
  0011c	74 68		 je	 SHORT $LN20@P_NewChase

; 495  : 	{
; 496  : 		dirtype_t newdir = diags[((deltay < 0)<<1) + (deltax > 0)];

  0011e	83 7d f4 00	 cmp	 DWORD PTR _deltay$[ebp], 0
  00122	7d 09		 jge	 SHORT $LN40@P_NewChase
  00124	c7 45 94 01 00
	00 00		 mov	 DWORD PTR tv132[ebp], 1
  0012b	eb 07		 jmp	 SHORT $LN41@P_NewChase
$LN40@P_NewChase:
  0012d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN41@P_NewChase:
  00134	83 7d f8 00	 cmp	 DWORD PTR _deltax$[ebp], 0
  00138	7e 09		 jle	 SHORT $LN42@P_NewChase
  0013a	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
  00141	eb 07		 jmp	 SHORT $LN43@P_NewChase
$LN42@P_NewChase:
  00143	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN43@P_NewChase:
  0014a	8b 45 94	 mov	 eax, DWORD PTR tv132[ebp]
  0014d	8b 4d 90	 mov	 ecx, DWORD PTR tv135[ebp]
  00150	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00153	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _diags[edx*4]
  0015a	89 45 d8	 mov	 DWORD PTR _newdir$1[ebp], eax

; 497  : 
; 498  : 		actor->movedir = newdir;

  0015d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00160	8b 4d d8	 mov	 ecx, DWORD PTR _newdir$1[ebp]
  00163	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 499  : 		if ((newdir != turnaround) && P_TryWalk(actor))

  00169	8b 45 d8	 mov	 eax, DWORD PTR _newdir$1[ebp]
  0016c	3b 45 dc	 cmp	 eax, DWORD PTR _turnaround$[ebp]
  0016f	74 15		 je	 SHORT $LN20@P_NewChase
  00171	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 _P_TryWalk
  0017a	83 c4 04	 add	 esp, 4
  0017d	85 c0		 test	 eax, eax
  0017f	74 05		 je	 SHORT $LN20@P_NewChase

; 500  : 			return;

  00181	e9 f8 01 00 00	 jmp	 $LN1@P_NewChase
$LN20@P_NewChase:

; 501  : 	}
; 502  : 
; 503  : 	// try other directions
; 504  : 	if (P_Random() > 200 || abs(deltay) > abs(deltax))

  00186	e8 00 00 00 00	 call	 _P_Random
  0018b	0f b6 c0	 movzx	 eax, al
  0018e	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00193	7f 1e		 jg	 SHORT $LN22@P_NewChase
  00195	8b 45 f4	 mov	 eax, DWORD PTR _deltay$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 _abs
  0019e	83 c4 04	 add	 esp, 4
  001a1	8b f0		 mov	 esi, eax
  001a3	8b 4d f8	 mov	 ecx, DWORD PTR _deltax$[ebp]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 _abs
  001ac	83 c4 04	 add	 esp, 4
  001af	3b f0		 cmp	 esi, eax
  001b1	7e 34		 jle	 SHORT $LN21@P_NewChase
$LN22@P_NewChase:

; 505  : 	{
; 506  : 		tdir = d[1];

  001b3	b8 04 00 00 00	 mov	 eax, 4
  001b8	c1 e0 00	 shl	 eax, 0
  001bb	8b 4c 05 e8	 mov	 ecx, DWORD PTR _d$[ebp+eax]
  001bf	89 4d e4	 mov	 DWORD PTR _tdir$[ebp], ecx

; 507  : 		d[1] = d[2];

  001c2	b8 04 00 00 00	 mov	 eax, 4
  001c7	d1 e0		 shl	 eax, 1
  001c9	b9 04 00 00 00	 mov	 ecx, 4
  001ce	c1 e1 00	 shl	 ecx, 0
  001d1	8b 54 05 e8	 mov	 edx, DWORD PTR _d$[ebp+eax]
  001d5	89 54 0d e8	 mov	 DWORD PTR _d$[ebp+ecx], edx

; 508  : 		d[2] = tdir;

  001d9	b8 04 00 00 00	 mov	 eax, 4
  001de	d1 e0		 shl	 eax, 1
  001e0	8b 4d e4	 mov	 ecx, DWORD PTR _tdir$[ebp]
  001e3	89 4c 05 e8	 mov	 DWORD PTR _d$[ebp+eax], ecx
$LN21@P_NewChase:

; 509  : 	}
; 510  : 
; 511  : 	if (d[1] == turnaround)

  001e7	b8 04 00 00 00	 mov	 eax, 4
  001ec	c1 e0 00	 shl	 eax, 0
  001ef	8b 4c 05 e8	 mov	 ecx, DWORD PTR _d$[ebp+eax]
  001f3	3b 4d dc	 cmp	 ecx, DWORD PTR _turnaround$[ebp]
  001f6	75 10		 jne	 SHORT $LN23@P_NewChase

; 512  : 		d[1] = DI_NODIR;

  001f8	b8 04 00 00 00	 mov	 eax, 4
  001fd	c1 e0 00	 shl	 eax, 0
  00200	c7 44 05 e8 ff
	ff ff ff	 mov	 DWORD PTR _d$[ebp+eax], -1
$LN23@P_NewChase:

; 513  : 	if (d[2] == turnaround)

  00208	b8 04 00 00 00	 mov	 eax, 4
  0020d	d1 e0		 shl	 eax, 1
  0020f	8b 4c 05 e8	 mov	 ecx, DWORD PTR _d$[ebp+eax]
  00213	3b 4d dc	 cmp	 ecx, DWORD PTR _turnaround$[ebp]
  00216	75 0f		 jne	 SHORT $LN24@P_NewChase

; 514  : 		d[2] = DI_NODIR;

  00218	b8 04 00 00 00	 mov	 eax, 4
  0021d	d1 e0		 shl	 eax, 1
  0021f	c7 44 05 e8 ff
	ff ff ff	 mov	 DWORD PTR _d$[ebp+eax], -1
$LN24@P_NewChase:

; 515  : 
; 516  : 	if (d[1] != DI_NODIR)

  00227	b8 04 00 00 00	 mov	 eax, 4
  0022c	c1 e0 00	 shl	 eax, 0
  0022f	83 7c 05 e8 ff	 cmp	 DWORD PTR _d$[ebp+eax], -1
  00234	74 2a		 je	 SHORT $LN26@P_NewChase

; 517  : 	{
; 518  : 		actor->movedir = d[1];

  00236	b8 04 00 00 00	 mov	 eax, 4
  0023b	c1 e0 00	 shl	 eax, 0
  0023e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00241	8b 54 05 e8	 mov	 edx, DWORD PTR _d$[ebp+eax]
  00245	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 519  : 
; 520  : 		if (P_TryWalk(actor))

  0024b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 _P_TryWalk
  00254	83 c4 04	 add	 esp, 4
  00257	85 c0		 test	 eax, eax
  00259	74 05		 je	 SHORT $LN26@P_NewChase

; 521  : 			return; // either moved forward or attacked

  0025b	e9 1e 01 00 00	 jmp	 $LN1@P_NewChase
$LN26@P_NewChase:

; 522  : 	}
; 523  : 
; 524  : 	if (d[2] != DI_NODIR)

  00260	b8 04 00 00 00	 mov	 eax, 4
  00265	d1 e0		 shl	 eax, 1
  00267	83 7c 05 e8 ff	 cmp	 DWORD PTR _d$[ebp+eax], -1
  0026c	74 29		 je	 SHORT $LN28@P_NewChase

; 525  : 	{
; 526  : 		actor->movedir = d[2];

  0026e	b8 04 00 00 00	 mov	 eax, 4
  00273	d1 e0		 shl	 eax, 1
  00275	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00278	8b 54 05 e8	 mov	 edx, DWORD PTR _d$[ebp+eax]
  0027c	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 527  : 
; 528  : 		if (P_TryWalk(actor))

  00282	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 _P_TryWalk
  0028b	83 c4 04	 add	 esp, 4
  0028e	85 c0		 test	 eax, eax
  00290	74 05		 je	 SHORT $LN28@P_NewChase

; 529  : 			return;

  00292	e9 e7 00 00 00	 jmp	 $LN1@P_NewChase
$LN28@P_NewChase:

; 530  : 	}
; 531  : 
; 532  : 	// there is no direct path to the player, so pick another direction.
; 533  : 	if (olddir != DI_NODIR)

  00297	83 7d e0 ff	 cmp	 DWORD PTR _olddir$[ebp], -1
  0029b	74 21		 je	 SHORT $LN30@P_NewChase

; 534  : 	{
; 535  : 		actor->movedir =olddir;

  0029d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002a0	8b 4d e0	 mov	 ecx, DWORD PTR _olddir$[ebp]
  002a3	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 536  : 
; 537  : 		if (P_TryWalk(actor))

  002a9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _P_TryWalk
  002b2	83 c4 04	 add	 esp, 4
  002b5	85 c0		 test	 eax, eax
  002b7	74 05		 je	 SHORT $LN30@P_NewChase

; 538  : 			return;

  002b9	e9 c0 00 00 00	 jmp	 $LN1@P_NewChase
$LN30@P_NewChase:

; 539  : 	}
; 540  : 
; 541  : 	// randomly determine direction of search
; 542  : 	if (P_Random() & 1)

  002be	e8 00 00 00 00	 call	 _P_Random
  002c3	0f b6 c0	 movzx	 eax, al
  002c6	83 e0 01	 and	 eax, 1
  002c9	74 42		 je	 SHORT $LN31@P_NewChase

; 543  : 	{
; 544  : 		for (tdir = DI_EAST; tdir <= DI_SOUTHEAST; tdir++)

  002cb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tdir$[ebp], 0
  002d2	eb 09		 jmp	 SHORT $LN4@P_NewChase
$LN2@P_NewChase:
  002d4	8b 45 e4	 mov	 eax, DWORD PTR _tdir$[ebp]
  002d7	83 c0 01	 add	 eax, 1
  002da	89 45 e4	 mov	 DWORD PTR _tdir$[ebp], eax
$LN4@P_NewChase:
  002dd	83 7d e4 07	 cmp	 DWORD PTR _tdir$[ebp], 7
  002e1	7f 28		 jg	 SHORT $LN3@P_NewChase

; 545  : 		{
; 546  : 			if (tdir != turnaround)

  002e3	8b 45 e4	 mov	 eax, DWORD PTR _tdir$[ebp]
  002e6	3b 45 dc	 cmp	 eax, DWORD PTR _turnaround$[ebp]
  002e9	74 1e		 je	 SHORT $LN34@P_NewChase

; 547  : 			{
; 548  : 				actor->movedir = tdir;

  002eb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ee	8b 4d e4	 mov	 ecx, DWORD PTR _tdir$[ebp]
  002f1	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 549  : 
; 550  : 				if (P_TryWalk(actor))

  002f7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 _P_TryWalk
  00300	83 c4 04	 add	 esp, 4
  00303	85 c0		 test	 eax, eax
  00305	74 02		 je	 SHORT $LN34@P_NewChase

; 551  : 					return;

  00307	eb 75		 jmp	 SHORT $LN1@P_NewChase
$LN34@P_NewChase:

; 552  : 			}
; 553  : 		}

  00309	eb c9		 jmp	 SHORT $LN2@P_NewChase
$LN3@P_NewChase:

; 554  : 	}

  0030b	eb 40		 jmp	 SHORT $LN6@P_NewChase
$LN31@P_NewChase:

; 555  : 	else
; 556  : 	{
; 557  : 		for (tdir = DI_SOUTHEAST; tdir >= DI_EAST; tdir--)

  0030d	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _tdir$[ebp], 7
  00314	eb 09		 jmp	 SHORT $LN7@P_NewChase
$LN5@P_NewChase:
  00316	8b 45 e4	 mov	 eax, DWORD PTR _tdir$[ebp]
  00319	83 e8 01	 sub	 eax, 1
  0031c	89 45 e4	 mov	 DWORD PTR _tdir$[ebp], eax
$LN7@P_NewChase:
  0031f	83 7d e4 00	 cmp	 DWORD PTR _tdir$[ebp], 0
  00323	7c 28		 jl	 SHORT $LN6@P_NewChase

; 558  : 		{
; 559  : 			if (tdir != turnaround)

  00325	8b 45 e4	 mov	 eax, DWORD PTR _tdir$[ebp]
  00328	3b 45 dc	 cmp	 eax, DWORD PTR _turnaround$[ebp]
  0032b	74 1e		 je	 SHORT $LN36@P_NewChase

; 560  : 			{
; 561  : 				actor->movedir = tdir;

  0032d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00330	8b 4d e4	 mov	 ecx, DWORD PTR _tdir$[ebp]
  00333	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 562  : 
; 563  : 				if (P_TryWalk(actor))

  00339	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 _P_TryWalk
  00342	83 c4 04	 add	 esp, 4
  00345	85 c0		 test	 eax, eax
  00347	74 02		 je	 SHORT $LN36@P_NewChase

; 564  : 					return;

  00349	eb 33		 jmp	 SHORT $LN1@P_NewChase
$LN36@P_NewChase:

; 565  : 			}
; 566  : 		}

  0034b	eb c9		 jmp	 SHORT $LN5@P_NewChase
$LN6@P_NewChase:

; 567  : 	}
; 568  : 
; 569  : 	if (turnaround != DI_NODIR)

  0034d	83 7d dc ff	 cmp	 DWORD PTR _turnaround$[ebp], -1
  00351	74 1e		 je	 SHORT $LN38@P_NewChase

; 570  : 	{
; 571  : 		actor->movedir = turnaround;

  00353	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00356	8b 4d dc	 mov	 ecx, DWORD PTR _turnaround$[ebp]
  00359	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 572  : 
; 573  : 		if (P_TryWalk(actor))

  0035f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00362	50		 push	 eax
  00363	e8 00 00 00 00	 call	 _P_TryWalk
  00368	83 c4 04	 add	 esp, 4
  0036b	85 c0		 test	 eax, eax
  0036d	74 02		 je	 SHORT $LN38@P_NewChase

; 574  : 			return;

  0036f	eb 0d		 jmp	 SHORT $LN1@P_NewChase
$LN38@P_NewChase:

; 575  : 	}
; 576  : 
; 577  : 	actor->movedir = (angle_t)DI_NODIR; // cannot move

  00371	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00374	c7 80 90 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+144], -1
$LN1@P_NewChase:

; 578  : }

  0037e	5f		 pop	 edi
  0037f	5e		 pop	 esi
  00380	5b		 pop	 ebx
  00381	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00384	33 cd		 xor	 ecx, ebp
  00386	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0038b	8b e5		 mov	 esp, ebp
  0038d	5d		 pop	 ebp
  0038e	c3		 ret	 0
_P_NewChaseDir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _P_TryWalk
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_P_TryWalk PROC						; COMDAT

; 448  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 449  : 	if (!P_Move(actor, actor->info->speed))

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00015	52		 push	 edx
  00016	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _P_Move
  0001f	83 c4 08	 add	 esp, 8
  00022	85 c0		 test	 eax, eax
  00024	75 04		 jne	 SHORT $LN2@P_TryWalk

; 450  : 		return false;

  00026	33 c0		 xor	 eax, eax
  00028	eb 19		 jmp	 SHORT $LN1@P_TryWalk
$LN2@P_TryWalk:

; 451  : 	actor->movecount = P_Random() & 15;

  0002a	e8 00 00 00 00	 call	 _P_Random
  0002f	0f b6 c0	 movzx	 eax, al
  00032	83 e0 0f	 and	 eax, 15			; 0000000fH
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00038	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 452  : 	return true;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_TryWalk:

; 453  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_P_TryWalk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _P_Move
_TEXT	SEGMENT
_movedir$ = -12						; size = 4
_tryy$ = -8						; size = 4
_tryx$ = -4						; size = 4
_actor$ = 8						; size = 4
_speed$ = 12						; size = 4
_P_Move	PROC						; COMDAT

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 401  : 	fixed_t tryx, tryy;
; 402  : 	dirtype_t movedir = actor->movedir;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00012	89 4d f4	 mov	 DWORD PTR _movedir$[ebp], ecx

; 403  : 
; 404  : 	if (movedir == DI_NODIR || !actor->health)

  00015	83 7d f4 ff	 cmp	 DWORD PTR _movedir$[ebp], -1
  00019	74 0c		 je	 SHORT $LN3@P_Move
  0001b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001e	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00025	75 07		 jne	 SHORT $LN2@P_Move
$LN3@P_Move:

; 405  : 		return false;

  00027	33 c0		 xor	 eax, eax
  00029	e9 38 01 00 00	 jmp	 $LN1@P_Move
$LN2@P_Move:

; 406  : 
; 407  : 	I_Assert((unsigned)movedir < 8);
; 408  : 
; 409  : 	tryx = actor->x + speed*xspeed[movedir];

  0002e	8b 45 f4	 mov	 eax, DWORD PTR _movedir$[ebp]
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _speed$[ebp]
  00034	0f af 0c 85 00
	00 00 00	 imul	 ecx, DWORD PTR _xspeed[eax*4]
  0003c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003f	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00042	89 4d fc	 mov	 DWORD PTR _tryx$[ebp], ecx

; 410  : 	tryy = actor->y + speed*yspeed[movedir];

  00045	8b 45 f4	 mov	 eax, DWORD PTR _movedir$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _speed$[ebp]
  0004b	0f af 0c 85 00
	00 00 00	 imul	 ecx, DWORD PTR _yspeed[eax*4]
  00053	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00056	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  00059	89 4d f8	 mov	 DWORD PTR _tryy$[ebp], ecx

; 411  : 
; 412  : 	if (actor->type == MT_SKIM && !P_WaterInSector(actor, tryx, tryy)) // bail out if sector lacks water

  0005c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005f	83 78 7c 0a	 cmp	 DWORD PTR [eax+124], 10	; 0000000aH
  00063	75 1f		 jne	 SHORT $LN4@P_Move
  00065	8b 45 f8	 mov	 eax, DWORD PTR _tryy$[ebp]
  00068	50		 push	 eax
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _tryx$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 _P_WaterInSector
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	85 c0		 test	 eax, eax
  0007b	75 07		 jne	 SHORT $LN4@P_Move

; 413  : 		return false;

  0007d	33 c0		 xor	 eax, eax
  0007f	e9 e2 00 00 00	 jmp	 $LN1@P_Move
$LN4@P_Move:

; 414  : 
; 415  : 	if (!P_TryMove(actor, tryx, tryy, false))

  00084	6a 00		 push	 0
  00086	8b 45 f8	 mov	 eax, DWORD PTR _tryy$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _tryx$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 _P_TryMove
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	85 c0		 test	 eax, eax
  0009c	0f 85 aa 00 00
	00		 jne	 $LN5@P_Move

; 416  : 	{
; 417  : 		if (actor->flags & MF_FLOAT && floatok)

  000a2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000a8	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  000ae	0f 84 92 00 00
	00		 je	 $LN7@P_Move
  000b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _floatok, 0
  000bb	0f 84 85 00 00
	00		 je	 $LN7@P_Move

; 418  : 		{
; 419  : 			// must adjust height
; 420  : 			if (actor->z < tmfloorz)

  000c1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000c7	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _tmfloorz
  000cd	7d 14		 jge	 SHORT $LN8@P_Move

; 421  : 				actor->z += FLOATSPEED;

  000cf	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000d5	81 c1 00 00 04
	00		 add	 ecx, 262144		; 00040000H
  000db	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000de	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  000e1	eb 12		 jmp	 SHORT $LN9@P_Move
$LN8@P_Move:

; 422  : 			else
; 423  : 				actor->z -= FLOATSPEED;

  000e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000e9	81 e9 00 00 04
	00		 sub	 ecx, 262144		; 00040000H
  000ef	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000f2	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN9@P_Move:

; 424  : 
; 425  : 			if (actor->type == MT_JETJAW && actor->z + actor->height > actor->watertop)

  000f5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f8	83 78 7c 0e	 cmp	 DWORD PTR [eax+124], 14	; 0000000eH
  000fc	75 2c		 jne	 SHORT $LN10@P_Move
  000fe	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00101	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00104	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00107	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0010a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010d	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  00113	7e 15		 jle	 SHORT $LN10@P_Move

; 426  : 				actor->z = actor->watertop - actor->height;

  00115	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0011b	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  00121	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  00124	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00127	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN10@P_Move:

; 427  : 
; 428  : 			actor->flags2 |= MF2_INFLOAT;

  0012a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0012d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00133	83 c9 20	 or	 ecx, 32			; 00000020H
  00136	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00139	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 429  : 			return true;

  0013f	b8 01 00 00 00	 mov	 eax, 1
  00144	eb 20		 jmp	 SHORT $LN1@P_Move
$LN7@P_Move:

; 430  : 		}
; 431  : 
; 432  : 		return false;

  00146	33 c0		 xor	 eax, eax
  00148	eb 1c		 jmp	 SHORT $LN1@P_Move

; 433  : 	}

  0014a	eb 15		 jmp	 SHORT $LN6@P_Move
$LN5@P_Move:

; 434  : 	else
; 435  : 		actor->flags2 &= ~MF2_INFLOAT;

  0014c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014f	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00155	83 e1 df	 and	 ecx, -33		; ffffffdfH
  00158	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0015b	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN6@P_Move:

; 436  : 
; 437  : 	return true;

  00161	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_Move:

; 438  : }

  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
_P_Move	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _P_WaterInSector
_TEXT	SEGMENT
_rover$1 = -12						; size = 4
_height$ = -8						; size = 4
_sector$ = -4						; size = 4
_mobj$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_P_WaterInSector PROC					; COMDAT

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 362  : 	sector_t *sector;
; 363  : 	fixed_t height = -1;

  00009	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _height$[ebp], -1

; 364  : 
; 365  : 	sector = R_PointInSubsector(x, y)->sector;

  00010	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 _R_PointInSubsector
  0001d	83 c4 08	 add	 esp, 8
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	89 55 fc	 mov	 DWORD PTR _sector$[ebp], edx

; 366  : 
; 367  : 	if (sector->ffloors)

  00025	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00028	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0002f	74 5f		 je	 SHORT $LN3@P_WaterInS

; 368  : 	{
; 369  : 		ffloor_t *rover;
; 370  : 
; 371  : 		for (rover = sector->ffloors; rover; rover = rover->next)

  00031	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00034	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0003a	89 4d f4	 mov	 DWORD PTR _rover$1[ebp], ecx
  0003d	eb 09		 jmp	 SHORT $LN4@P_WaterInS
$LN2@P_WaterInS:
  0003f	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  00042	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00045	89 4d f4	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_WaterInS:
  00048	83 7d f4 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  0004c	74 42		 je	 SHORT $LN3@P_WaterInS

; 372  : 		{
; 373  : 			if (!(rover->flags & FF_EXISTS))

  0004e	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  00051	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00054	83 e1 01	 and	 ecx, 1
  00057	75 02		 jne	 SHORT $LN6@P_WaterInS

; 374  : 				continue;

  00059	eb e4		 jmp	 SHORT $LN2@P_WaterInS
$LN6@P_WaterInS:

; 375  : 
; 376  : 			if (rover->flags & FF_SWIMMABLE)

  0005b	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  0005e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00061	83 e1 20	 and	 ecx, 32			; 00000020H
  00064	74 28		 je	 SHORT $LN8@P_WaterInS

; 377  : 			{
; 378  : 				if (*rover->topheight >= mobj->floorz
; 379  : 					&& *rover->topheight <= mobj->z)

  00066	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0006e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00070	3b 42 38	 cmp	 eax, DWORD PTR [edx+56]
  00073	7c 19		 jl	 SHORT $LN8@P_WaterInS
  00075	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0007d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007f	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  00082	7f 0a		 jg	 SHORT $LN8@P_WaterInS

; 380  : 					height = *rover->topheight;

  00084	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	89 55 f8	 mov	 DWORD PTR _height$[ebp], edx
$LN8@P_WaterInS:

; 381  : 			}
; 382  : 		}

  0008e	eb af		 jmp	 SHORT $LN2@P_WaterInS
$LN3@P_WaterInS:

; 383  : 	}
; 384  : 
; 385  : 	if (height != -1)

  00090	83 7d f8 ff	 cmp	 DWORD PTR _height$[ebp], -1
  00094	74 07		 je	 SHORT $LN9@P_WaterInS

; 386  : 		return true;

  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	eb 02		 jmp	 SHORT $LN1@P_WaterInS
$LN9@P_WaterInS:

; 387  : 
; 388  : 	return false;

  0009d	33 c0		 xor	 eax, eax
$LN1@P_WaterInS:

; 389  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_P_WaterInSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _P_CheckMissileRange
_TEXT	SEGMENT
_dist$ = -4						; size = 4
_actor$ = 8						; size = 4
_P_CheckMissileRange PROC				; COMDAT

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 321  : 	fixed_t dist;
; 322  : 
; 323  : 	if (!P_CheckSight(actor, actor->target))

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _P_CheckSight
  0001c	83 c4 08	 add	 esp, 8
  0001f	85 c0		 test	 eax, eax
  00021	75 07		 jne	 SHORT $LN2@P_CheckMis

; 324  : 		return false;

  00023	33 c0		 xor	 eax, eax
  00025	e9 bc 00 00 00	 jmp	 $LN1@P_CheckMis
$LN2@P_CheckMis:

; 325  : 
; 326  : 	if (actor->reactiontime)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00034	74 07		 je	 SHORT $LN3@P_CheckMis

; 327  : 		return false; // do not attack yet

  00036	33 c0		 xor	 eax, eax
  00038	e9 a9 00 00 00	 jmp	 $LN1@P_CheckMis
$LN3@P_CheckMis:

; 328  : 
; 329  : 	// OPTIMIZE: get this from a global checksight
; 330  : 	dist = P_AproxDistance(actor->x-actor->target->x, actor->y-actor->target->y) - 64*FRACUNIT;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00040	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00046	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00049	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0004c	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00053	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00059	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005f	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _P_AproxDistance
  00068	83 c4 08	 add	 esp, 8
  0006b	2d 00 00 40 00	 sub	 eax, 4194304		; 00400000H
  00070	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 331  : 
; 332  : 	if (!actor->info->meleestate)

  00073	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00076	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0007c	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00080	75 0b		 jne	 SHORT $LN4@P_CheckMis

; 333  : 		dist -= 128*FRACUNIT; // no melee attack, so fire more

  00082	8b 45 fc	 mov	 eax, DWORD PTR _dist$[ebp]
  00085	2d 00 00 80 00	 sub	 eax, 8388608		; 00800000H
  0008a	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax
$LN4@P_CheckMis:

; 334  : 
; 335  : 	dist >>= 16;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _dist$[ebp]
  00090	c1 f8 10	 sar	 eax, 16			; 00000010H
  00093	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 336  : 
; 337  : 	if (actor->type == MT_EGGMOBILE)

  00096	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00099	83 78 7c 1d	 cmp	 DWORD PTR [eax+124], 29	; 0000001dH
  0009d	75 08		 jne	 SHORT $LN5@P_CheckMis

; 338  : 		dist >>= 1;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _dist$[ebp]
  000a2	d1 f8		 sar	 eax, 1
  000a4	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax
$LN5@P_CheckMis:

; 339  : 
; 340  : 	if (dist > 200)

  000a7	81 7d fc c8 00
	00 00		 cmp	 DWORD PTR _dist$[ebp], 200 ; 000000c8H
  000ae	7e 07		 jle	 SHORT $LN6@P_CheckMis

; 341  : 		dist = 200;

  000b0	c7 45 fc c8 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 200 ; 000000c8H
$LN6@P_CheckMis:

; 342  : 
; 343  : 	if (actor->type == MT_EGGMOBILE && dist > 160)

  000b7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ba	83 78 7c 1d	 cmp	 DWORD PTR [eax+124], 29	; 0000001dH
  000be	75 10		 jne	 SHORT $LN7@P_CheckMis
  000c0	81 7d fc a0 00
	00 00		 cmp	 DWORD PTR _dist$[ebp], 160 ; 000000a0H
  000c7	7e 07		 jle	 SHORT $LN7@P_CheckMis

; 344  : 		dist = 160;

  000c9	c7 45 fc a0 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 160 ; 000000a0H
$LN7@P_CheckMis:

; 345  : 
; 346  : 	if (P_Random() < dist)

  000d0	e8 00 00 00 00	 call	 _P_Random
  000d5	0f b6 c0	 movzx	 eax, al
  000d8	3b 45 fc	 cmp	 eax, DWORD PTR _dist$[ebp]
  000db	7d 04		 jge	 SHORT $LN8@P_CheckMis

; 347  : 		return false;

  000dd	33 c0		 xor	 eax, eax
  000df	eb 05		 jmp	 SHORT $LN1@P_CheckMis
$LN8@P_CheckMis:

; 348  : 
; 349  : 	return true;

  000e1	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_CheckMis:

; 350  : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
_P_CheckMissileRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _P_CheckMeleeRange
_TEXT	SEGMENT
tv77 = -76						; size = 4
_dist$ = -8						; size = 4
_pl$ = -4						; size = 4
_actor$ = 8						; size = 4
_P_CheckMeleeRange PROC					; COMDAT

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 264  : 	mobj_t *pl;
; 265  : 	fixed_t dist;
; 266  : 
; 267  : 	if (!actor->target)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	75 07		 jne	 SHORT $LN4@P_CheckMel

; 268  : 		return false;

  00015	33 c0		 xor	 eax, eax
  00017	e9 56 01 00 00	 jmp	 $LN1@P_CheckMel
$LN4@P_CheckMel:

; 269  : 
; 270  : 	pl = actor->target;

  0001c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00025	89 4d fc	 mov	 DWORD PTR _pl$[ebp], ecx

; 271  : 	dist = P_AproxDistance(pl->x-actor->x, pl->y-actor->y);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0002e	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00031	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00034	52		 push	 edx
  00035	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0003b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0003e	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 _P_AproxDistance
  00047	83 c4 08	 add	 esp, 8
  0004a	89 45 f8	 mov	 DWORD PTR _dist$[ebp], eax

; 272  : 
; 273  : 	switch (actor->type)

  0004d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00050	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00053	89 4d b4	 mov	 DWORD PTR tv77[ebp], ecx
  00056	83 7d b4 06	 cmp	 DWORD PTR tv77[ebp], 6
  0005a	74 08		 je	 SHORT $LN5@P_CheckMel
  0005c	83 7d b4 14	 cmp	 DWORD PTR tv77[ebp], 20	; 00000014H
  00060	74 1e		 je	 SHORT $LN7@P_CheckMel
  00062	eb 39		 jmp	 SHORT $LN9@P_CheckMel
$LN5@P_CheckMel:

; 274  : 	{
; 275  : 		case MT_JETTBOMBER:
; 276  : 			if (dist >= (actor->radius + pl->radius)*2)

  00064	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00067	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _pl$[ebp]
  0006d	03 4a 40	 add	 ecx, DWORD PTR [edx+64]
  00070	d1 e1		 shl	 ecx, 1
  00072	39 4d f8	 cmp	 DWORD PTR _dist$[ebp], ecx
  00075	7c 07		 jl	 SHORT $LN6@P_CheckMel

; 277  : 				return false;

  00077	33 c0		 xor	 eax, eax
  00079	e9 f4 00 00 00	 jmp	 $LN1@P_CheckMel
$LN6@P_CheckMel:

; 278  : 			break;

  0007e	eb 35		 jmp	 SHORT $LN2@P_CheckMel
$LN7@P_CheckMel:

; 279  : 		case MT_FACESTABBER:
; 280  : 			if (dist >= (actor->radius + pl->radius)*4)

  00080	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00083	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00086	8b 55 fc	 mov	 edx, DWORD PTR _pl$[ebp]
  00089	03 4a 40	 add	 ecx, DWORD PTR [edx+64]
  0008c	c1 e1 02	 shl	 ecx, 2
  0008f	39 4d f8	 cmp	 DWORD PTR _dist$[ebp], ecx
  00092	7c 07		 jl	 SHORT $LN8@P_CheckMel

; 281  : 				return false;

  00094	33 c0		 xor	 eax, eax
  00096	e9 d7 00 00 00	 jmp	 $LN1@P_CheckMel
$LN8@P_CheckMel:

; 282  : 			break;

  0009b	eb 18		 jmp	 SHORT $LN2@P_CheckMel
$LN9@P_CheckMel:

; 283  : 		default:
; 284  : 			if (dist >= MELEERANGE - 20*FRACUNIT + pl->radius)

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  000a0	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000a3	81 c1 00 00 2c
	00		 add	 ecx, 2883584		; 002c0000H
  000a9	39 4d f8	 cmp	 DWORD PTR _dist$[ebp], ecx
  000ac	7c 07		 jl	 SHORT $LN10@P_CheckMel

; 285  : 				return false;

  000ae	33 c0		 xor	 eax, eax
  000b0	e9 bd 00 00 00	 jmp	 $LN1@P_CheckMel
$LN10@P_CheckMel:
$LN2@P_CheckMel:

; 286  : 			break;
; 287  : 	}
; 288  : 
; 289  : 	// check height now, so that damn crawlas cant attack
; 290  : 	// you if you stand on a higher ledge.
; 291  : 	if (actor->type == MT_JETTBOMBER)

  000b5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b8	83 78 7c 06	 cmp	 DWORD PTR [eax+124], 6
  000bc	75 28		 jne	 SHORT $LN11@P_CheckMel

; 292  : 	{
; 293  : 		if (pl->z + pl->height > actor->z - (40<<FRACBITS))

  000be	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  000c1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _pl$[ebp]
  000c7	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  000ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cd	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000d0	81 ea 00 00 28
	00		 sub	 edx, 2621440		; 00280000H
  000d6	3b ca		 cmp	 ecx, edx
  000d8	7e 07		 jle	 SHORT $LN13@P_CheckMel

; 294  : 			return false;

  000da	33 c0		 xor	 eax, eax
  000dc	e9 91 00 00 00	 jmp	 $LN1@P_CheckMel
$LN13@P_CheckMel:

; 295  : 	}

  000e1	e9 87 00 00 00	 jmp	 $LN19@P_CheckMel
$LN11@P_CheckMel:

; 296  : 	else if (actor->type == MT_SKIM)

  000e6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e9	83 78 7c 0a	 cmp	 DWORD PTR [eax+124], 10	; 0000000aH
  000ed	75 22		 jne	 SHORT $LN14@P_CheckMel

; 297  : 	{
; 298  : 		if (pl->z + pl->height > actor->z - (24<<FRACBITS))

  000ef	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  000f2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000f5	8b 55 fc	 mov	 edx, DWORD PTR _pl$[ebp]
  000f8	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  000fb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fe	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00101	81 ea 00 00 18
	00		 sub	 edx, 1572864		; 00180000H
  00107	3b ca		 cmp	 ecx, edx
  00109	7e 04		 jle	 SHORT $LN16@P_CheckMel

; 299  : 			return false;

  0010b	33 c0		 xor	 eax, eax
  0010d	eb 63		 jmp	 SHORT $LN1@P_CheckMel
$LN16@P_CheckMel:

; 300  : 	}

  0010f	eb 5c		 jmp	 SHORT $LN19@P_CheckMel
$LN14@P_CheckMel:

; 301  : 	else
; 302  : 	{
; 303  : 		if ((pl->z > actor->z + actor->height) || (actor->z > pl->z + pl->height))

  00111	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00114	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00117	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0011a	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0011d	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  00120	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  00123	7f 14		 jg	 SHORT $LN18@P_CheckMel
  00125	8b 45 fc	 mov	 eax, DWORD PTR _pl$[ebp]
  00128	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0012b	8b 55 fc	 mov	 edx, DWORD PTR _pl$[ebp]
  0012e	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00131	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00134	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  00137	7e 04		 jle	 SHORT $LN17@P_CheckMel
$LN18@P_CheckMel:

; 304  : 			return false;

  00139	33 c0		 xor	 eax, eax
  0013b	eb 35		 jmp	 SHORT $LN1@P_CheckMel
$LN17@P_CheckMel:

; 305  : 
; 306  : 		if (actor->type != MT_JETTBOMBER && actor->type != MT_SKIM
; 307  : 			&& !P_CheckSight(actor, actor->target))

  0013d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00140	83 78 7c 06	 cmp	 DWORD PTR [eax+124], 6
  00144	74 27		 je	 SHORT $LN19@P_CheckMel
  00146	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00149	83 78 7c 0a	 cmp	 DWORD PTR [eax+124], 10	; 0000000aH
  0014d	74 1e		 je	 SHORT $LN19@P_CheckMel
  0014f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00152	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00158	51		 push	 ecx
  00159	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0015c	52		 push	 edx
  0015d	e8 00 00 00 00	 call	 _P_CheckSight
  00162	83 c4 08	 add	 esp, 8
  00165	85 c0		 test	 eax, eax
  00167	75 04		 jne	 SHORT $LN19@P_CheckMel

; 308  : 		{
; 309  : 			return false;

  00169	33 c0		 xor	 eax, eax
  0016b	eb 05		 jmp	 SHORT $LN1@P_CheckMel
$LN19@P_CheckMel:

; 310  : 		}
; 311  : 	}
; 312  : 
; 313  : 	return true;

  0016d	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_CheckMel:

; 314  : }

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
_P_CheckMeleeRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _RotateZMatrix
_TEXT	SEGMENT
_sinrad$ = -12						; size = 4
_cosrad$ = -8						; size = 4
_fa$ = -4						; size = 4
_rad$ = 8						; size = 4
_RotateZMatrix PROC					; COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 241  : 	static TMatrix ret;
; 242  : 	const angle_t fa = rad>>ANGLETOFINESHIFT;

  00009	8b 45 08	 mov	 eax, DWORD PTR _rad$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 fc	 mov	 DWORD PTR _fa$[ebp], eax

; 243  : 	const fixed_t cosrad = FINECOSINE(fa), sinrad = FINESINE(fa);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _fa$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0001b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001e	89 55 f8	 mov	 DWORD PTR _cosrad$[ebp], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _fa$[ebp]
  00024	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0002b	89 4d f4	 mov	 DWORD PTR _sinrad$[ebp], ecx

; 244  : 
; 245  : 	ret[0][0] = cosrad;    ret[0][1] = sinrad;   ret[0][2] =        0; ret[0][3] = 0;

  0002e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00033	6b c8 00	 imul	 ecx, eax, 0
  00036	ba 04 00 00 00	 mov	 edx, 4
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	8b 55 f8	 mov	 edx, DWORD PTR _cosrad$[ebp]
  00041	89 94 01 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+eax], edx
  00048	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	ba 04 00 00 00	 mov	 edx, 4
  00055	c1 e2 00	 shl	 edx, 0
  00058	8b 45 f4	 mov	 eax, DWORD PTR _sinrad$[ebp]
  0005b	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], eax
  00062	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	ba 04 00 00 00	 mov	 edx, 4
  0006f	d1 e2		 shl	 edx, 1
  00071	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], 0
  0007c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00081	6b c8 00	 imul	 ecx, eax, 0
  00084	ba 04 00 00 00	 mov	 edx, 4
  00089	6b c2 03	 imul	 eax, edx, 3
  0008c	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+eax], 0

; 246  : 	ret[1][0] = -sinrad;   ret[1][1] = cosrad;   ret[1][2] =        0; ret[1][3] = 0;

  00097	8b 45 f4	 mov	 eax, DWORD PTR _sinrad$[ebp]
  0009a	f7 d8		 neg	 eax
  0009c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000a1	c1 e1 00	 shl	 ecx, 0
  000a4	ba 04 00 00 00	 mov	 edx, 4
  000a9	6b d2 00	 imul	 edx, edx, 0
  000ac	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], eax
  000b3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000b8	c1 e0 00	 shl	 eax, 0
  000bb	b9 04 00 00 00	 mov	 ecx, 4
  000c0	c1 e1 00	 shl	 ecx, 0
  000c3	8b 55 f8	 mov	 edx, DWORD PTR _cosrad$[ebp]
  000c6	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+ecx], edx
  000cd	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d2	c1 e0 00	 shl	 eax, 0
  000d5	b9 04 00 00 00	 mov	 ecx, 4
  000da	d1 e1		 shl	 ecx, 1
  000dc	c7 84 08 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+ecx], 0
  000e7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ec	c1 e0 00	 shl	 eax, 0
  000ef	b9 04 00 00 00	 mov	 ecx, 4
  000f4	6b d1 03	 imul	 edx, ecx, 3
  000f7	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+edx], 0

; 247  : 	ret[2][0] = 0;         ret[2][1] = 0;        ret[2][2] = FRACUNIT; ret[2][3] = 0;

  00102	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00107	d1 e0		 shl	 eax, 1
  00109	b9 04 00 00 00	 mov	 ecx, 4
  0010e	6b d1 00	 imul	 edx, ecx, 0
  00111	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+edx], 0
  0011c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00121	d1 e0		 shl	 eax, 1
  00123	b9 04 00 00 00	 mov	 ecx, 4
  00128	c1 e1 00	 shl	 ecx, 0
  0012b	c7 84 08 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+ecx], 0
  00136	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013b	d1 e0		 shl	 eax, 1
  0013d	b9 04 00 00 00	 mov	 ecx, 4
  00142	d1 e1		 shl	 ecx, 1
  00144	c7 84 08 00 00
	00 00 00 00 01
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+ecx], 65536 ; 00010000H
  0014f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00154	d1 e0		 shl	 eax, 1
  00156	b9 04 00 00 00	 mov	 ecx, 4
  0015b	6b d1 03	 imul	 edx, ecx, 3
  0015e	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+edx], 0

; 248  : 	ret[3][0] = 0;         ret[3][1] = 0;        ret[3][2] =        0; ret[3][3] = FRACUNIT;

  00169	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0016e	6b c8 03	 imul	 ecx, eax, 3
  00171	ba 04 00 00 00	 mov	 edx, 4
  00176	6b c2 00	 imul	 eax, edx, 0
  00179	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+eax], 0
  00184	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00189	6b c8 03	 imul	 ecx, eax, 3
  0018c	ba 04 00 00 00	 mov	 edx, 4
  00191	c1 e2 00	 shl	 edx, 0
  00194	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], 0
  0019f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a4	6b c8 03	 imul	 ecx, eax, 3
  001a7	ba 04 00 00 00	 mov	 edx, 4
  001ac	d1 e2		 shl	 edx, 1
  001ae	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], 0
  001b9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001be	6b c8 03	 imul	 ecx, eax, 3
  001c1	ba 04 00 00 00	 mov	 edx, 4
  001c6	6b c2 03	 imul	 eax, edx, 3
  001c9	c7 84 01 00 00
	00 00 00 00 01
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+eax], 65536 ; 00010000H

; 249  : 
; 250  : 	return &ret;

  001d4	b8 00 00 00 00	 mov	 eax, OFFSET ?ret@?1??RotateZMatrix@@9@9

; 251  : }

  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi
  001db	5b		 pop	 ebx
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c3		 ret	 0
_RotateZMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _RotateXMatrix
_TEXT	SEGMENT
_sinrad$ = -12						; size = 4
_cosrad$ = -8						; size = 4
_fa$ = -4						; size = 4
_rad$ = 8						; size = 4
_RotateXMatrix PROC					; COMDAT

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 211  : 	static TMatrix ret;
; 212  : 	const angle_t fa = rad>>ANGLETOFINESHIFT;

  00009	8b 45 08	 mov	 eax, DWORD PTR _rad$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 fc	 mov	 DWORD PTR _fa$[ebp], eax

; 213  : 	const fixed_t cosrad = FINECOSINE(fa), sinrad = FINESINE(fa);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _fa$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0001b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001e	89 55 f8	 mov	 DWORD PTR _cosrad$[ebp], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _fa$[ebp]
  00024	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0002b	89 4d f4	 mov	 DWORD PTR _sinrad$[ebp], ecx

; 214  : 
; 215  : 	ret[0][0] = FRACUNIT; ret[0][1] =       0; ret[0][2] = 0;        ret[0][3] = 0;

  0002e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00033	6b c8 00	 imul	 ecx, eax, 0
  00036	ba 04 00 00 00	 mov	 edx, 4
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	c7 84 01 00 00
	00 00 00 00 01
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+eax], 65536 ; 00010000H
  00049	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	ba 04 00 00 00	 mov	 edx, 4
  00056	c1 e2 00	 shl	 edx, 0
  00059	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], 0
  00064	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	ba 04 00 00 00	 mov	 edx, 4
  00071	d1 e2		 shl	 edx, 1
  00073	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], 0
  0007e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00083	6b c8 00	 imul	 ecx, eax, 0
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	6b c2 03	 imul	 eax, edx, 3
  0008e	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+eax], 0

; 216  : 	ret[1][0] =        0; ret[1][1] =  cosrad; ret[1][2] = sinrad;   ret[1][3] = 0;

  00099	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0009e	c1 e0 00	 shl	 eax, 0
  000a1	b9 04 00 00 00	 mov	 ecx, 4
  000a6	6b d1 00	 imul	 edx, ecx, 0
  000a9	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+edx], 0
  000b4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000b9	c1 e0 00	 shl	 eax, 0
  000bc	b9 04 00 00 00	 mov	 ecx, 4
  000c1	c1 e1 00	 shl	 ecx, 0
  000c4	8b 55 f8	 mov	 edx, DWORD PTR _cosrad$[ebp]
  000c7	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+ecx], edx
  000ce	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d3	c1 e0 00	 shl	 eax, 0
  000d6	b9 04 00 00 00	 mov	 ecx, 4
  000db	d1 e1		 shl	 ecx, 1
  000dd	8b 55 f4	 mov	 edx, DWORD PTR _sinrad$[ebp]
  000e0	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+ecx], edx
  000e7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ec	c1 e0 00	 shl	 eax, 0
  000ef	b9 04 00 00 00	 mov	 ecx, 4
  000f4	6b d1 03	 imul	 edx, ecx, 3
  000f7	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+edx], 0

; 217  : 	ret[2][0] =        0; ret[2][1] = -sinrad; ret[2][2] = cosrad;   ret[2][3] = 0;

  00102	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00107	d1 e0		 shl	 eax, 1
  00109	b9 04 00 00 00	 mov	 ecx, 4
  0010e	6b d1 00	 imul	 edx, ecx, 0
  00111	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+edx], 0
  0011c	8b 45 f4	 mov	 eax, DWORD PTR _sinrad$[ebp]
  0011f	f7 d8		 neg	 eax
  00121	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00126	d1 e1		 shl	 ecx, 1
  00128	ba 04 00 00 00	 mov	 edx, 4
  0012d	c1 e2 00	 shl	 edx, 0
  00130	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], eax
  00137	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013c	d1 e0		 shl	 eax, 1
  0013e	b9 04 00 00 00	 mov	 ecx, 4
  00143	d1 e1		 shl	 ecx, 1
  00145	8b 55 f8	 mov	 edx, DWORD PTR _cosrad$[ebp]
  00148	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+ecx], edx
  0014f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00154	d1 e0		 shl	 eax, 1
  00156	b9 04 00 00 00	 mov	 ecx, 4
  0015b	6b d1 03	 imul	 edx, ecx, 3
  0015e	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+edx], 0

; 218  : 	ret[3][0] =        0; ret[3][1] =       0; ret[3][2] = 0;        ret[3][3] = FRACUNIT;

  00169	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0016e	6b c8 03	 imul	 ecx, eax, 3
  00171	ba 04 00 00 00	 mov	 edx, 4
  00176	6b c2 00	 imul	 eax, edx, 0
  00179	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+eax], 0
  00184	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00189	6b c8 03	 imul	 ecx, eax, 3
  0018c	ba 04 00 00 00	 mov	 edx, 4
  00191	c1 e2 00	 shl	 edx, 0
  00194	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], 0
  0019f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a4	6b c8 03	 imul	 ecx, eax, 3
  001a7	ba 04 00 00 00	 mov	 edx, 4
  001ac	d1 e2		 shl	 edx, 1
  001ae	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], 0
  001b9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001be	6b c8 03	 imul	 ecx, eax, 3
  001c1	ba 04 00 00 00	 mov	 edx, 4
  001c6	6b c2 03	 imul	 eax, edx, 3
  001c9	c7 84 01 00 00
	00 00 00 00 01
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+eax], 65536 ; 00010000H

; 219  : 
; 220  : 	return &ret;

  001d4	b8 00 00 00 00	 mov	 eax, OFFSET ?ret@?1??RotateXMatrix@@9@9

; 221  : }

  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi
  001db	5b		 pop	 ebx
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c3		 ret	 0
_RotateXMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _VectorMatrixMultiply
_TEXT	SEGMENT
_v$ = 8							; size = 4
_m$ = 12						; size = 4
_VectorMatrixMultiply PROC				; COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 199  : 	static TVector ret;
; 200  : 
; 201  : 	ret[0] = FixedMul(v[0],m[0][0]) + FixedMul(v[1],m[1][0]) + FixedMul(v[2],m[2][0]) + FixedMul(v[3],m[3][0]);

  00009	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  00014	ba 04 00 00 00	 mov	 edx, 4
  00019	6b c2 00	 imul	 eax, edx, 0
  0001c	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  0001f	51		 push	 ecx
  00020	ba 04 00 00 00	 mov	 edx, 4
  00025	6b c2 00	 imul	 eax, edx, 0
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _FixedMul
  00034	83 c4 08	 add	 esp, 8
  00037	8b f0		 mov	 esi, eax
  00039	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003e	c1 e0 00	 shl	 eax, 0
  00041	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  00044	b9 04 00 00 00	 mov	 ecx, 4
  00049	6b d1 00	 imul	 edx, ecx, 0
  0004c	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  0004f	50		 push	 eax
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0005b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _FixedMul
  00064	83 c4 08	 add	 esp, 8
  00067	03 f0		 add	 esi, eax
  00069	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006e	d1 e1		 shl	 ecx, 1
  00070	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  00073	ba 04 00 00 00	 mov	 edx, 4
  00078	6b c2 00	 imul	 eax, edx, 0
  0007b	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  0007e	51		 push	 ecx
  0007f	ba 04 00 00 00	 mov	 edx, 4
  00084	d1 e2		 shl	 edx, 1
  00086	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00089	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _FixedMul
  00092	83 c4 08	 add	 esp, 8
  00095	03 f0		 add	 esi, eax
  00097	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0009c	6b c2 03	 imul	 eax, edx, 3
  0009f	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  000a2	b9 04 00 00 00	 mov	 ecx, 4
  000a7	6b d1 00	 imul	 edx, ecx, 0
  000aa	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  000ad	50		 push	 eax
  000ae	b9 04 00 00 00	 mov	 ecx, 4
  000b3	6b d1 03	 imul	 edx, ecx, 3
  000b6	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000b9	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _FixedMul
  000c2	83 c4 08	 add	 esp, 8
  000c5	03 f0		 add	 esi, eax
  000c7	ba 04 00 00 00	 mov	 edx, 4
  000cc	6b c2 00	 imul	 eax, edx, 0
  000cf	89 b0 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??VectorMatrixMultiply@@9@9[eax], esi

; 202  : 	ret[1] = FixedMul(v[0],m[0][1]) + FixedMul(v[1],m[1][1]) + FixedMul(v[2],m[2][1]) + FixedMul(v[3],m[3][1]);

  000d5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000da	6b c8 00	 imul	 ecx, eax, 0
  000dd	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  000e0	ba 04 00 00 00	 mov	 edx, 4
  000e5	c1 e2 00	 shl	 edx, 0
  000e8	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000eb	50		 push	 eax
  000ec	b9 04 00 00 00	 mov	 ecx, 4
  000f1	6b d1 00	 imul	 edx, ecx, 0
  000f4	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000f7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000fa	51		 push	 ecx
  000fb	e8 00 00 00 00	 call	 _FixedMul
  00100	83 c4 08	 add	 esp, 8
  00103	8b f0		 mov	 esi, eax
  00105	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0010a	c1 e2 00	 shl	 edx, 0
  0010d	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	c1 e0 00	 shl	 eax, 0
  00118	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  0011b	51		 push	 ecx
  0011c	ba 04 00 00 00	 mov	 edx, 4
  00121	c1 e2 00	 shl	 edx, 0
  00124	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00127	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 _FixedMul
  00130	83 c4 08	 add	 esp, 8
  00133	03 f0		 add	 esi, eax
  00135	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0013a	d1 e2		 shl	 edx, 1
  0013c	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	c1 e0 00	 shl	 eax, 0
  00147	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  0014a	51		 push	 ecx
  0014b	ba 04 00 00 00	 mov	 edx, 4
  00150	d1 e2		 shl	 edx, 1
  00152	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00155	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00158	51		 push	 ecx
  00159	e8 00 00 00 00	 call	 _FixedMul
  0015e	83 c4 08	 add	 esp, 8
  00161	03 f0		 add	 esi, eax
  00163	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00168	6b c2 03	 imul	 eax, edx, 3
  0016b	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  0016e	b9 04 00 00 00	 mov	 ecx, 4
  00173	c1 e1 00	 shl	 ecx, 0
  00176	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00179	52		 push	 edx
  0017a	b8 04 00 00 00	 mov	 eax, 4
  0017f	6b c8 03	 imul	 ecx, eax, 3
  00182	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00185	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _FixedMul
  0018e	83 c4 08	 add	 esp, 8
  00191	03 f0		 add	 esi, eax
  00193	b9 04 00 00 00	 mov	 ecx, 4
  00198	c1 e1 00	 shl	 ecx, 0
  0019b	89 b1 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??VectorMatrixMultiply@@9@9[ecx], esi

; 203  : 	ret[2] = FixedMul(v[0],m[0][2]) + FixedMul(v[1],m[1][2]) + FixedMul(v[2],m[2][2]) + FixedMul(v[3],m[3][2]);

  001a1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a6	6b c8 00	 imul	 ecx, eax, 0
  001a9	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  001ac	ba 04 00 00 00	 mov	 edx, 4
  001b1	d1 e2		 shl	 edx, 1
  001b3	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  001b6	50		 push	 eax
  001b7	b9 04 00 00 00	 mov	 ecx, 4
  001bc	6b d1 00	 imul	 edx, ecx, 0
  001bf	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  001c2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001c5	51		 push	 ecx
  001c6	e8 00 00 00 00	 call	 _FixedMul
  001cb	83 c4 08	 add	 esp, 8
  001ce	8b f0		 mov	 esi, eax
  001d0	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001d5	c1 e2 00	 shl	 edx, 0
  001d8	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  001db	b8 04 00 00 00	 mov	 eax, 4
  001e0	d1 e0		 shl	 eax, 1
  001e2	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 00	 shl	 edx, 0
  001ee	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _FixedMul
  001fa	83 c4 08	 add	 esp, 8
  001fd	03 f0		 add	 esi, eax
  001ff	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00204	d1 e2		 shl	 edx, 1
  00206	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  00209	b8 04 00 00 00	 mov	 eax, 4
  0020e	d1 e0		 shl	 eax, 1
  00210	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  00213	51		 push	 ecx
  00214	ba 04 00 00 00	 mov	 edx, 4
  00219	d1 e2		 shl	 edx, 1
  0021b	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0021e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00221	51		 push	 ecx
  00222	e8 00 00 00 00	 call	 _FixedMul
  00227	83 c4 08	 add	 esp, 8
  0022a	03 f0		 add	 esi, eax
  0022c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00231	6b c2 03	 imul	 eax, edx, 3
  00234	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  00237	b9 04 00 00 00	 mov	 ecx, 4
  0023c	d1 e1		 shl	 ecx, 1
  0023e	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00241	52		 push	 edx
  00242	b8 04 00 00 00	 mov	 eax, 4
  00247	6b c8 03	 imul	 ecx, eax, 3
  0024a	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0024d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _FixedMul
  00256	83 c4 08	 add	 esp, 8
  00259	03 f0		 add	 esi, eax
  0025b	b9 04 00 00 00	 mov	 ecx, 4
  00260	d1 e1		 shl	 ecx, 1
  00262	89 b1 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??VectorMatrixMultiply@@9@9[ecx], esi

; 204  : 	ret[3] = FixedMul(v[0],m[0][3]) + FixedMul(v[1],m[1][3]) + FixedMul(v[2],m[2][3]) + FixedMul(v[3],m[3][3]);

  00268	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0026d	6b c8 00	 imul	 ecx, eax, 0
  00270	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  00273	ba 04 00 00 00	 mov	 edx, 4
  00278	6b c2 03	 imul	 eax, edx, 3
  0027b	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  0027e	51		 push	 ecx
  0027f	ba 04 00 00 00	 mov	 edx, 4
  00284	6b c2 00	 imul	 eax, edx, 0
  00287	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0028a	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0028d	52		 push	 edx
  0028e	e8 00 00 00 00	 call	 _FixedMul
  00293	83 c4 08	 add	 esp, 8
  00296	8b f0		 mov	 esi, eax
  00298	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0029d	c1 e0 00	 shl	 eax, 0
  002a0	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 03	 imul	 edx, ecx, 3
  002ab	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  002ae	50		 push	 eax
  002af	b9 04 00 00 00	 mov	 ecx, 4
  002b4	c1 e1 00	 shl	 ecx, 0
  002b7	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  002ba	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002bd	50		 push	 eax
  002be	e8 00 00 00 00	 call	 _FixedMul
  002c3	83 c4 08	 add	 esp, 8
  002c6	03 f0		 add	 esi, eax
  002c8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002cd	d1 e1		 shl	 ecx, 1
  002cf	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  002d2	ba 04 00 00 00	 mov	 edx, 4
  002d7	6b c2 03	 imul	 eax, edx, 3
  002da	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  002dd	51		 push	 ecx
  002de	ba 04 00 00 00	 mov	 edx, 4
  002e3	d1 e2		 shl	 edx, 1
  002e5	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  002e8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002eb	51		 push	 ecx
  002ec	e8 00 00 00 00	 call	 _FixedMul
  002f1	83 c4 08	 add	 esp, 8
  002f4	03 f0		 add	 esi, eax
  002f6	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002fb	6b c2 03	 imul	 eax, edx, 3
  002fe	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  00301	b9 04 00 00 00	 mov	 ecx, 4
  00306	6b d1 03	 imul	 edx, ecx, 3
  00309	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  0030c	50		 push	 eax
  0030d	b9 04 00 00 00	 mov	 ecx, 4
  00312	6b d1 03	 imul	 edx, ecx, 3
  00315	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00318	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0031b	51		 push	 ecx
  0031c	e8 00 00 00 00	 call	 _FixedMul
  00321	83 c4 08	 add	 esp, 8
  00324	03 f0		 add	 esi, eax
  00326	ba 04 00 00 00	 mov	 edx, 4
  0032b	6b c2 03	 imul	 eax, edx, 3
  0032e	89 b0 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??VectorMatrixMultiply@@9@9[eax], esi

; 205  : 
; 206  : 	return &ret;

  00334	b8 00 00 00 00	 mov	 eax, OFFSET ?ret@?1??VectorMatrixMultiply@@9@9

; 207  : }

  00339	5f		 pop	 edi
  0033a	5e		 pop	 esi
  0033b	5b		 pop	 ebx
  0033c	8b e5		 mov	 esp, ebp
  0033e	5d		 pop	 ebp
  0033f	c3		 ret	 0
_VectorMatrixMultiply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _P_LookForPlayers
_TEXT	SEGMENT
tv91 = -88						; size = 4
_an$ = -20						; size = 4
_sector$ = -16						; size = 4
_player$ = -12						; size = 4
_stop$ = -8						; size = 4
_c$ = -4						; size = 4
_actor$ = 8						; size = 4
_allaround$ = 12					; size = 4
_tracer$ = 16						; size = 4
_dist$ = 20						; size = 4
_P_LookForPlayers PROC					; COMDAT

; 590  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 591  : 	INT32 c = 0, stop;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0

; 592  : 	player_t *player;
; 593  : 	sector_t *sector;
; 594  : 	angle_t an;
; 595  : 
; 596  : 	if (P_FreezeObjectplace())

  00010	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  00015	85 c0		 test	 eax, eax
  00017	74 07		 je	 SHORT $LN5@P_LookForP

; 597  : 		return false;

  00019	33 c0		 xor	 eax, eax
  0001b	e9 39 02 00 00	 jmp	 $LN3@P_LookForP
$LN5@P_LookForP:

; 598  : 
; 599  : 	sector = actor->subsector->sector;

  00020	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00023	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	89 55 f0	 mov	 DWORD PTR _sector$[ebp], edx

; 600  : 
; 601  : 	// BP: first time init, this allow minimum lastlook changes
; 602  : 	if (actor->lastlook < 0)

  0002b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002e	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00035	7d 11		 jge	 SHORT $LN6@P_LookForP

; 603  : 		actor->lastlook = P_Random();

  00037	e8 00 00 00 00	 call	 _P_Random
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00042	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
$LN6@P_LookForP:

; 604  : 
; 605  : 	actor->lastlook %= MAXPLAYERS;

  00048	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004b	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00051	81 e1 1f 00 00
	80		 and	 ecx, -2147483617	; 8000001fH
  00057	79 05		 jns	 SHORT $LN22@P_LookForP
  00059	49		 dec	 ecx
  0005a	83 c9 e0	 or	 ecx, -32		; ffffffe0H
  0005d	41		 inc	 ecx
$LN22@P_LookForP:
  0005e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00061	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx

; 606  : 
; 607  : 	stop = (actor->lastlook - 1) & PLAYERSMASK;

  00067	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006a	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00070	83 e9 01	 sub	 ecx, 1
  00073	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00076	89 4d f8	 mov	 DWORD PTR _stop$[ebp], ecx
  00079	eb 18		 jmp	 SHORT $LN4@P_LookForP
$LN2@P_LookForP:

; 608  : 
; 609  : 	for (; ; actor->lastlook = (actor->lastlook + 1) & PLAYERSMASK)

  0007b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007e	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00084	83 c1 01	 add	 ecx, 1
  00087	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0008a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0008d	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx
$LN4@P_LookForP:

; 610  : 	{
; 611  : 		// done looking
; 612  : 		if (actor->lastlook == stop)

  00093	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00096	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  0009c	3b 4d f8	 cmp	 ecx, DWORD PTR _stop$[ebp]
  0009f	75 07		 jne	 SHORT $LN7@P_LookForP

; 613  : 			return false;

  000a1	33 c0		 xor	 eax, eax
  000a3	e9 b1 01 00 00	 jmp	 $LN3@P_LookForP
$LN7@P_LookForP:

; 614  : 
; 615  : 		if (!playeringame[actor->lastlook])

  000a8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ab	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  000b1	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[ecx*4], 0
  000b9	75 02		 jne	 SHORT $LN8@P_LookForP

; 616  : 			continue;

  000bb	eb be		 jmp	 SHORT $LN2@P_LookForP
$LN8@P_LookForP:

; 617  : 
; 618  : 		if (c++ == 2)

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  000c0	89 45 a8	 mov	 DWORD PTR tv91[ebp], eax
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _c$[ebp]
  000c6	83 c1 01	 add	 ecx, 1
  000c9	89 4d fc	 mov	 DWORD PTR _c$[ebp], ecx
  000cc	83 7d a8 02	 cmp	 DWORD PTR tv91[ebp], 2
  000d0	75 07		 jne	 SHORT $LN9@P_LookForP

; 619  : 			return false;

  000d2	33 c0		 xor	 eax, eax
  000d4	e9 80 01 00 00	 jmp	 $LN3@P_LookForP
$LN9@P_LookForP:

; 620  : 
; 621  : 		player = &players[actor->lastlook];

  000d9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000dc	69 88 a8 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR [eax+168], 508
  000e6	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  000ec	89 4d f4	 mov	 DWORD PTR _player$[ebp], ecx

; 622  : 
; 623  : 		if (player->health <= 0)

  000ef	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  000f2	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  000f6	7f 02		 jg	 SHORT $LN10@P_LookForP

; 624  : 			continue; // dead

  000f8	eb 81		 jmp	 SHORT $LN2@P_LookForP
$LN10@P_LookForP:

; 625  : 
; 626  : 		if (!player->mo)

  000fa	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  000fd	83 38 00	 cmp	 DWORD PTR [eax], 0
  00100	75 05		 jne	 SHORT $LN11@P_LookForP

; 627  : 			continue;

  00102	e9 74 ff ff ff	 jmp	 $LN2@P_LookForP
$LN11@P_LookForP:

; 628  : 
; 629  : 		if (!P_CheckSight(actor, player->mo))

  00107	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0010a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010c	51		 push	 ecx
  0010d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00110	52		 push	 edx
  00111	e8 00 00 00 00	 call	 _P_CheckSight
  00116	83 c4 08	 add	 esp, 8
  00119	85 c0		 test	 eax, eax
  0011b	75 05		 jne	 SHORT $LN12@P_LookForP

; 630  : 			continue; // out of sight

  0011d	e9 59 ff ff ff	 jmp	 $LN2@P_LookForP
$LN12@P_LookForP:

; 631  : 
; 632  : 		if ((netgame || multiplayer) && player->spectator)

  00122	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00129	75 09		 jne	 SHORT $LN14@P_LookForP
  0012b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00132	74 13		 je	 SHORT $LN13@P_LookForP
$LN14@P_LookForP:
  00134	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00137	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  0013e	85 c9		 test	 ecx, ecx
  00140	74 05		 je	 SHORT $LN13@P_LookForP

; 633  : 			continue;

  00142	e9 34 ff ff ff	 jmp	 $LN2@P_LookForP
$LN13@P_LookForP:

; 634  : 
; 635  : 		if (dist > 0
; 636  : 			&& P_AproxDistance(P_AproxDistance(player->mo->x - actor->x, player->mo->y - actor->y), player->mo->z - actor->z) > dist)

  00147	83 7d 14 00	 cmp	 DWORD PTR _dist$[ebp], 0
  0014b	7e 48		 jle	 SHORT $LN15@P_LookForP
  0014d	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00150	8b 08		 mov	 ecx, DWORD PTR [eax]
  00152	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00155	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00158	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  0015b	50		 push	 eax
  0015c	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  0015f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00161	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00164	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00167	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0016a	51		 push	 ecx
  0016b	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  0016e	8b 02		 mov	 eax, DWORD PTR [edx]
  00170	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00173	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00176	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 _P_AproxDistance
  0017f	83 c4 08	 add	 esp, 8
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 _P_AproxDistance
  00188	83 c4 08	 add	 esp, 8
  0018b	3b 45 14	 cmp	 eax, DWORD PTR _dist$[ebp]
  0018e	7e 05		 jle	 SHORT $LN15@P_LookForP

; 637  : 			continue; // Too far away

  00190	e9 e6 fe ff ff	 jmp	 $LN2@P_LookForP
$LN15@P_LookForP:

; 638  : 
; 639  : 		if (!allaround)

  00195	83 7d 0c 00	 cmp	 DWORD PTR _allaround$[ebp], 0
  00199	75 7a		 jne	 SHORT $LN18@P_LookForP

; 640  : 		{
; 641  : 			an = R_PointToAngle2(actor->x, actor->y, player->mo->x, player->mo->y) - actor->angle;

  0019b	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0019e	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001a3	52		 push	 edx
  001a4	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  001a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001ac	52		 push	 edx
  001ad	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001b3	51		 push	 ecx
  001b4	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001b7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 _R_PointToAngle2
  001c0	83 c4 10	 add	 esp, 16			; 00000010H
  001c3	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001c6	2b 41 24	 sub	 eax, DWORD PTR [ecx+36]
  001c9	89 45 ec	 mov	 DWORD PTR _an$[ebp], eax

; 642  : 			if (an > ANGLE_90 && an < ANGLE_270)

  001cc	81 7d ec 00 00
	00 40		 cmp	 DWORD PTR _an$[ebp], 1073741824 ; 40000000H
  001d3	76 40		 jbe	 SHORT $LN18@P_LookForP
  001d5	81 7d ec 00 00
	00 c0		 cmp	 DWORD PTR _an$[ebp], -1073741824 ; c0000000H
  001dc	73 37		 jae	 SHORT $LN18@P_LookForP

; 643  : 			{
; 644  : 				dist = P_AproxDistance(player->mo->x - actor->x, player->mo->y - actor->y);

  001de	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  001e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e3	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001e6	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  001e9	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  001ec	50		 push	 eax
  001ed	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  001f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f5	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  001f8	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  001fb	51		 push	 ecx
  001fc	e8 00 00 00 00	 call	 _P_AproxDistance
  00201	83 c4 08	 add	 esp, 8
  00204	89 45 14	 mov	 DWORD PTR _dist$[ebp], eax

; 645  : 				// if real close, react anyway
; 646  : 				if (dist > MELEERANGE)

  00207	81 7d 14 00 00
	40 00		 cmp	 DWORD PTR _dist$[ebp], 4194304 ; 00400000H
  0020e	7e 05		 jle	 SHORT $LN18@P_LookForP

; 647  : 					continue; // behind back

  00210	e9 66 fe ff ff	 jmp	 $LN2@P_LookForP
$LN18@P_LookForP:

; 648  : 			}
; 649  : 		}
; 650  : 
; 651  : 		if (tracer)

  00215	83 7d 10 00	 cmp	 DWORD PTR _tracer$[ebp], 0
  00219	74 1a		 je	 SHORT $LN19@P_LookForP

; 652  : 			P_SetTarget(&actor->tracer, player->mo);

  0021b	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0021e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00220	51		 push	 ecx
  00221	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00224	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  0022a	52		 push	 edx
  0022b	e8 00 00 00 00	 call	 _P_SetTarget
  00230	83 c4 08	 add	 esp, 8
  00233	eb 18		 jmp	 SHORT $LN20@P_LookForP
$LN19@P_LookForP:

; 653  : 		else
; 654  : 			P_SetTarget(&actor->target, player->mo);

  00235	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00238	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023a	51		 push	 ecx
  0023b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0023e	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00244	52		 push	 edx
  00245	e8 00 00 00 00	 call	 _P_SetTarget
  0024a	83 c4 08	 add	 esp, 8
$LN20@P_LookForP:

; 655  : 		return true;

  0024d	b8 01 00 00 00	 mov	 eax, 1
  00252	eb 05		 jmp	 SHORT $LN3@P_LookForP

; 656  : 	}

  00254	e9 22 fe ff ff	 jmp	 $LN2@P_LookForP
$LN3@P_LookForP:

; 657  : 
; 658  : 	//return false;
; 659  : }

  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi
  0025b	5b		 pop	 ebx
  0025c	8b e5		 mov	 esp, ebp
  0025e	5d		 pop	 ebp
  0025f	c3		 ret	 0
_P_LookForPlayers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ToggleFlameJet
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_ToggleFlameJet PROC					; COMDAT

; 6073 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6074 : 	// threshold - off delay
; 6075 : 	// movecount - on timer
; 6076 : 
; 6077 : 	if (actor->flags2 & MF2_FIRING)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00012	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00018	74 35		 je	 SHORT $LN2@A_ToggleFl

; 6078 : 	{
; 6079 : 		actor->flags2 &= ~MF2_FIRING;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00023	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  00029	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002c	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 6080 : 
; 6081 : 		if (actor->threshold)

  00032	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00035	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  0003c	74 0f		 je	 SHORT $LN4@A_ToggleFl

; 6082 : 			actor->tics = actor->threshold;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00044	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  0004a	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN4@A_ToggleFl:

; 6083 : 	}

  0004d	eb 33		 jmp	 SHORT $LN5@A_ToggleFl
$LN2@A_ToggleFl:

; 6084 : 	else
; 6085 : 	{
; 6086 : 		actor->flags2 |= MF2_FIRING;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00052	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00058	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  0005e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00061	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 6087 : 
; 6088 : 		if (actor->movecount)

  00067	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006a	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00071	74 0f		 je	 SHORT $LN5@A_ToggleFl

; 6089 : 			actor->tics = actor->movecount;

  00073	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00079	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0007f	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN5@A_ToggleFl:

; 6090 : 	}
; 6091 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
_A_ToggleFlameJet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RemoteAction
_TEXT	SEGMENT
_dist2$1 = -32						; size = 4
_dist1$2 = -28						; size = 4
_mo2$3 = -24						; size = 4
_th$4 = -20						; size = 4
_targetedmobj$5 = -16					; size = 4
_originaltarget$ = -12					; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_RemoteAction PROC					; COMDAT

; 5989 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5990 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5991 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5992 : 	mobj_t *originaltarget = actor->target; // Hold on to the target for later.

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00022	89 4d f4	 mov	 DWORD PTR _originaltarget$[ebp], ecx

; 5993 : 
; 5994 : 	// If >=0, find the closest target.
; 5995 : 	if (locvar1 >= 0)

  00025	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  00029	0f 8c 30 01 00
	00		 jl	 $LN5@A_RemoteAc

; 5996 : 	{
; 5997 : 		///* DO A_FINDTARGET STUFF *///
; 5998 : 		mobj_t *targetedmobj = NULL;

  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _targetedmobj$5[ebp], 0

; 5999 : 		thinker_t *th;
; 6000 : 		mobj_t *mo2;
; 6001 : 		fixed_t dist1 = 0, dist2 = 0;

  00036	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dist1$2[ebp], 0
  0003d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dist2$1[ebp], 0

; 6002 : 
; 6003 : 		// scan the thinkers
; 6004 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00044	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00049	89 45 ec	 mov	 DWORD PTR _th$4[ebp], eax
  0004c	eb 09		 jmp	 SHORT $LN4@A_RemoteAc
$LN2@A_RemoteAc:
  0004e	8b 45 ec	 mov	 eax, DWORD PTR _th$4[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	89 4d ec	 mov	 DWORD PTR _th$4[ebp], ecx
$LN4@A_RemoteAc:
  00057	81 7d ec 00 00
	00 00		 cmp	 DWORD PTR _th$4[ebp], OFFSET _thinkercap
  0005e	0f 84 ac 00 00
	00		 je	 $LN3@A_RemoteAc

; 6005 : 		{
; 6006 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00064	8b 45 ec	 mov	 eax, DWORD PTR _th$4[ebp]
  00067	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0006e	74 02		 je	 SHORT $LN7@A_RemoteAc

; 6007 : 				continue;

  00070	eb dc		 jmp	 SHORT $LN2@A_RemoteAc
$LN7@A_RemoteAc:

; 6008 : 
; 6009 : 			mo2 = (mobj_t *)th;

  00072	8b 45 ec	 mov	 eax, DWORD PTR _th$4[ebp]
  00075	89 45 e8	 mov	 DWORD PTR _mo2$3[ebp], eax

; 6010 : 
; 6011 : 			if (mo2->type == (mobjtype_t)locvar1)

  00078	8b 45 e8	 mov	 eax, DWORD PTR _mo2$3[ebp]
  0007b	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0007e	3b 4d fc	 cmp	 ecx, DWORD PTR _locvar1$[ebp]
  00081	0f 85 84 00 00
	00		 jne	 $LN11@A_RemoteAc

; 6012 : 			{
; 6013 : 				if (targetedmobj == NULL)

  00087	83 7d f0 00	 cmp	 DWORD PTR _targetedmobj$5[ebp], 0
  0008b	75 2f		 jne	 SHORT $LN9@A_RemoteAc

; 6014 : 				{
; 6015 : 					targetedmobj = mo2;

  0008d	8b 45 e8	 mov	 eax, DWORD PTR _mo2$3[ebp]
  00090	89 45 f0	 mov	 DWORD PTR _targetedmobj$5[ebp], eax

; 6016 : 					dist2 = R_PointToDist2(actor->x, actor->y, mo2->x, mo2->y);

  00093	8b 45 e8	 mov	 eax, DWORD PTR _mo2$3[ebp]
  00096	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00099	51		 push	 ecx
  0009a	8b 55 e8	 mov	 edx, DWORD PTR _mo2$3[ebp]
  0009d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a0	50		 push	 eax
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000a4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000a7	52		 push	 edx
  000a8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ab	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _R_PointToDist2
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
  000b7	89 45 e0	 mov	 DWORD PTR _dist2$1[ebp], eax

; 6017 : 				}

  000ba	eb 4f		 jmp	 SHORT $LN11@A_RemoteAc
$LN9@A_RemoteAc:

; 6018 : 				else
; 6019 : 				{
; 6020 : 					dist1 = R_PointToDist2(actor->x, actor->y, mo2->x, mo2->y);

  000bc	8b 45 e8	 mov	 eax, DWORD PTR _mo2$3[ebp]
  000bf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c2	51		 push	 ecx
  000c3	8b 55 e8	 mov	 edx, DWORD PTR _mo2$3[ebp]
  000c6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000c9	50		 push	 eax
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000cd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000d0	52		 push	 edx
  000d1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 _R_PointToDist2
  000dd	83 c4 10	 add	 esp, 16			; 00000010H
  000e0	89 45 e4	 mov	 DWORD PTR _dist1$2[ebp], eax

; 6021 : 
; 6022 : 					if ((locvar2 && dist1 < dist2) || (!locvar2 && dist1 > dist2))

  000e3	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  000e7	74 08		 je	 SHORT $LN13@A_RemoteAc
  000e9	8b 45 e4	 mov	 eax, DWORD PTR _dist1$2[ebp]
  000ec	3b 45 e0	 cmp	 eax, DWORD PTR _dist2$1[ebp]
  000ef	7c 0e		 jl	 SHORT $LN12@A_RemoteAc
$LN13@A_RemoteAc:
  000f1	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  000f5	75 14		 jne	 SHORT $LN11@A_RemoteAc
  000f7	8b 45 e4	 mov	 eax, DWORD PTR _dist1$2[ebp]
  000fa	3b 45 e0	 cmp	 eax, DWORD PTR _dist2$1[ebp]
  000fd	7e 0c		 jle	 SHORT $LN11@A_RemoteAc
$LN12@A_RemoteAc:

; 6023 : 					{
; 6024 : 						targetedmobj = mo2;

  000ff	8b 45 e8	 mov	 eax, DWORD PTR _mo2$3[ebp]
  00102	89 45 f0	 mov	 DWORD PTR _targetedmobj$5[ebp], eax

; 6025 : 						dist2 = dist1;

  00105	8b 45 e4	 mov	 eax, DWORD PTR _dist1$2[ebp]
  00108	89 45 e0	 mov	 DWORD PTR _dist2$1[ebp], eax
$LN11@A_RemoteAc:

; 6026 : 					}
; 6027 : 				}
; 6028 : 			}
; 6029 : 		}

  0010b	e9 3e ff ff ff	 jmp	 $LN2@A_RemoteAc
$LN3@A_RemoteAc:

; 6030 : 
; 6031 : 		if (!targetedmobj)

  00110	83 7d f0 00	 cmp	 DWORD PTR _targetedmobj$5[ebp], 0
  00114	75 1b		 jne	 SHORT $LN14@A_RemoteAc

; 6032 : 		{
; 6033 : 			if (cv_debug)

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0011d	74 0d		 je	 SHORT $LN15@A_RemoteAc

; 6034 : 				CONS_Printf("A_RemoteAction: Unable to find the specified object to target.\n");

  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@KMMJNDNE@A_RemoteAction?3?5Unable?5to?5find?5@
  00124	e8 00 00 00 00	 call	 _CONS_Printf
  00129	83 c4 04	 add	 esp, 4
$LN15@A_RemoteAc:

; 6035 : 			return; // Oops, nothing found..

  0012c	e9 d9 00 00 00	 jmp	 $LN1@A_RemoteAc
$LN14@A_RemoteAc:

; 6036 : 		}
; 6037 : 
; 6038 : 		if (cv_debug)

  00131	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00138	74 0d		 je	 SHORT $LN16@A_RemoteAc

; 6039 : 			CONS_Printf("A_FindTarget: Found a target.\n");

  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KBCIBIGM@A_FindTarget?3?5Found?5a?5target?4?6@
  0013f	e8 00 00 00 00	 call	 _CONS_Printf
  00144	83 c4 04	 add	 esp, 4
$LN16@A_RemoteAc:

; 6040 : 
; 6041 : 		P_SetTarget(&actor->target, targetedmobj);

  00147	8b 45 f0	 mov	 eax, DWORD PTR _targetedmobj$5[ebp]
  0014a	50		 push	 eax
  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0014e	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00154	51		 push	 ecx
  00155	e8 00 00 00 00	 call	 _P_SetTarget
  0015a	83 c4 08	 add	 esp, 8

; 6042 : 
; 6043 : 		///* END A_FINDTARGET STUFF *///
; 6044 : 	}

  0015d	eb 22		 jmp	 SHORT $LN17@A_RemoteAc
$LN5@A_RemoteAc:

; 6045 : 
; 6046 : 	// If -2, use the tracer as the target
; 6047 : 	else if (locvar1 == -2)

  0015f	83 7d fc fe	 cmp	 DWORD PTR _locvar1$[ebp], -2 ; fffffffeH
  00163	75 1c		 jne	 SHORT $LN17@A_RemoteAc

; 6048 : 		P_SetTarget(&actor->target, actor->tracer);

  00165	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00168	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0016e	51		 push	 ecx
  0016f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00172	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00178	52		 push	 edx
  00179	e8 00 00 00 00	 call	 _P_SetTarget
  0017e	83 c4 08	 add	 esp, 8
$LN17@A_RemoteAc:

; 6049 : 	// if -1 or anything else, just use the target.
; 6050 : 
; 6051 : 	// Steal the var1 and var2 from "locvar2"
; 6052 : 	var1 = states[locvar2].var1;

  00181	6b 45 f8 1c	 imul	 eax, DWORD PTR _locvar2$[ebp], 28
  00185	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _states[eax+16]
  0018b	89 0d 00 00 00
	00		 mov	 DWORD PTR _var1, ecx

; 6053 : 	var2 = states[locvar2].var2;

  00191	6b 45 f8 1c	 imul	 eax, DWORD PTR _locvar2$[ebp], 28
  00195	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _states[eax+20]
  0019b	89 0d 00 00 00
	00		 mov	 DWORD PTR _var2, ecx

; 6054 : 
; 6055 : 	if (cv_debug)

  001a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  001a8	74 31		 je	 SHORT $LN18@A_RemoteAc

; 6056 : 	{
; 6057 : 		CONS_Printf("A_RemoteAction: Calling action on %p\n", actor->target);

  001aa	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ad	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001b3	51		 push	 ecx
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NCFJIBIK@A_RemoteAction?3?5Calling?5action?5@
  001b9	e8 00 00 00 00	 call	 _CONS_Printf
  001be	83 c4 08	 add	 esp, 8

; 6058 : 		CONS_Printf("var1 is %d\nvar2 is %d\n", var1, var2);

  001c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  001c6	50		 push	 eax
  001c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _var1
  001cd	51		 push	 ecx
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EMPAMFHP@var1?5is?5?$CFd?6var2?5is?5?$CFd?6@
  001d3	e8 00 00 00 00	 call	 _CONS_Printf
  001d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@A_RemoteAc:

; 6059 : 	}
; 6060 : 	states[locvar2].action.acp1(actor->target);

  001db	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001de	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001e4	51		 push	 ecx
  001e5	6b 55 f8 1c	 imul	 edx, DWORD PTR _locvar2$[ebp], 28
  001e9	8b 82 0c 00 00
	00		 mov	 eax, DWORD PTR _states[edx+12]
  001ef	ff d0		 call	 eax
  001f1	83 c4 04	 add	 esp, 4

; 6061 : 
; 6062 : 	P_SetTarget(&actor->target, originaltarget); // Restore the original target.

  001f4	8b 45 f4	 mov	 eax, DWORD PTR _originaltarget$[ebp]
  001f7	50		 push	 eax
  001f8	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001fb	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00201	51		 push	 ecx
  00202	e8 00 00 00 00	 call	 _P_SetTarget
  00207	83 c4 08	 add	 esp, 8
$LN1@A_RemoteAc:

; 6063 : }

  0020a	5f		 pop	 edi
  0020b	5e		 pop	 esi
  0020c	5b		 pop	 ebx
  0020d	8b e5		 mov	 esp, ebp
  0020f	5d		 pop	 ebp
  00210	c3		 ret	 0
_A_RemoteAction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_DualAction
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_DualAction PROC					; COMDAT

; 5959 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5960 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5961 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5962 : 
; 5963 : 	if (cv_debug)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00020	74 1c		 je	 SHORT $LN2@A_DualActi

; 5964 : 		CONS_Printf("A_DualAction called from object type %d, var1: %d, var2: %d\n", actor->type, locvar1, locvar2);

  00022	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00025	50		 push	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002d	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@HIAODGDM@A_DualAction?5called?5from?5object@
  00036	e8 00 00 00 00	 call	 _CONS_Printf
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@A_DualActi:

; 5965 : 
; 5966 : 	var1 = states[locvar1].var1;

  0003e	6b 45 fc 1c	 imul	 eax, DWORD PTR _locvar1$[ebp], 28
  00042	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _states[eax+16]
  00048	89 0d 00 00 00
	00		 mov	 DWORD PTR _var1, ecx

; 5967 : 	var2 = states[locvar1].var2;

  0004e	6b 45 fc 1c	 imul	 eax, DWORD PTR _locvar1$[ebp], 28
  00052	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _states[eax+20]
  00058	89 0d 00 00 00
	00		 mov	 DWORD PTR _var2, ecx

; 5968 : 
; 5969 : 	if (cv_debug)

  0005e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00065	74 11		 je	 SHORT $LN3@A_DualActi

; 5970 : 		CONS_Printf("A_DualAction: Calling First Action (state %d)...\n", locvar1);

  00067	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0006a	50		 push	 eax
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PIPMHHOL@A_DualAction?3?5Calling?5First?5Act@
  00070	e8 00 00 00 00	 call	 _CONS_Printf
  00075	83 c4 08	 add	 esp, 8
$LN3@A_DualActi:

; 5971 : 	states[locvar1].action.acp1(actor);

  00078	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007b	50		 push	 eax
  0007c	6b 4d fc 1c	 imul	 ecx, DWORD PTR _locvar1$[ebp], 28
  00080	8b 91 0c 00 00
	00		 mov	 edx, DWORD PTR _states[ecx+12]
  00086	ff d2		 call	 edx
  00088	83 c4 04	 add	 esp, 4

; 5972 : 
; 5973 : 	var1 = states[locvar2].var1;

  0008b	6b 45 f8 1c	 imul	 eax, DWORD PTR _locvar2$[ebp], 28
  0008f	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR _states[eax+16]
  00095	89 0d 00 00 00
	00		 mov	 DWORD PTR _var1, ecx

; 5974 : 	var2 = states[locvar2].var2;

  0009b	6b 45 f8 1c	 imul	 eax, DWORD PTR _locvar2$[ebp], 28
  0009f	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _states[eax+20]
  000a5	89 0d 00 00 00
	00		 mov	 DWORD PTR _var2, ecx

; 5975 : 
; 5976 : 	if (cv_debug)

  000ab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  000b2	74 11		 je	 SHORT $LN4@A_DualActi

; 5977 : 		CONS_Printf("A_DualAction: Calling Second Action (state %d)...\n", locvar2);

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  000b7	50		 push	 eax
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@NOLMHMBK@A_DualAction?3?5Calling?5Second?5Ac@
  000bd	e8 00 00 00 00	 call	 _CONS_Printf
  000c2	83 c4 08	 add	 esp, 8
$LN4@A_DualActi:

; 5978 : 	states[locvar2].action.acp1(actor);

  000c5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c8	50		 push	 eax
  000c9	6b 4d f8 1c	 imul	 ecx, DWORD PTR _locvar2$[ebp], 28
  000cd	8b 91 0c 00 00
	00		 mov	 edx, DWORD PTR _states[ecx+12]
  000d3	ff d2		 call	 edx
  000d5	83 c4 04	 add	 esp, 4

; 5979 : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_A_DualAction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RandomStateRange
_TEXT	SEGMENT
_difference$ = -16					; size = 4
_statenum$ = -12					; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_RandomStateRange PROC				; COMDAT

; 5939 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5940 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5941 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5942 : 	INT32 statenum;
; 5943 : 	INT32 difference = locvar2 - locvar1;

  00019	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0001c	2b 45 fc	 sub	 eax, DWORD PTR _locvar1$[ebp]
  0001f	89 45 f0	 mov	 DWORD PTR _difference$[ebp], eax

; 5944 : 
; 5945 : 	// Scale P_Random() to the difference.
; 5946 : 	statenum = locvar1 + (P_Random() % (difference + 1));

  00022	e8 00 00 00 00	 call	 _P_Random
  00027	0f b6 c0	 movzx	 eax, al
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _difference$[ebp]
  0002d	83 c1 01	 add	 ecx, 1
  00030	99		 cdq
  00031	f7 f9		 idiv	 ecx
  00033	03 55 fc	 add	 edx, DWORD PTR _locvar1$[ebp]
  00036	89 55 f4	 mov	 DWORD PTR _statenum$[ebp], edx

; 5947 : 
; 5948 : 	P_SetMobjState(actor, statenum);

  00039	8b 45 f4	 mov	 eax, DWORD PTR _statenum$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _P_SetMobjState
  00046	83 c4 08	 add	 esp, 8

; 5949 : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_A_RandomStateRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RandomState
_TEXT	SEGMENT
tv69 = -76						; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_RandomState PROC					; COMDAT

; 5924 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5925 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5926 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5927 : 
; 5928 : 	P_SetMobjState(actor, P_Random()&1 ? locvar1 : locvar2);

  00019	e8 00 00 00 00	 call	 _P_Random
  0001e	0f b6 c0	 movzx	 eax, al
  00021	83 e0 01	 and	 eax, 1
  00024	74 08		 je	 SHORT $LN3@A_RandomSt
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00029	89 4d b4	 mov	 DWORD PTR tv69[ebp], ecx
  0002c	eb 06		 jmp	 SHORT $LN4@A_RandomSt
$LN3@A_RandomSt:
  0002e	8b 55 f8	 mov	 edx, DWORD PTR _locvar2$[ebp]
  00031	89 55 b4	 mov	 DWORD PTR tv69[ebp], edx
$LN4@A_RandomSt:
  00034	8b 45 b4	 mov	 eax, DWORD PTR tv69[ebp]
  00037	50		 push	 eax
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _P_SetMobjState
  00041	83 c4 08	 add	 esp, 8

; 5929 : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_A_RandomState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SetObjectFlags2
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SetObjectFlags2 PROC					; COMDAT

; 5854 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5855 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5856 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5857 : 
; 5858 : 	if (locvar2 == 2)

  00019	83 7d f8 02	 cmp	 DWORD PTR _locvar2$[ebp], 2
  0001d	75 17		 jne	 SHORT $LN2@A_SetObjec

; 5859 : 		actor->flags2 |= locvar1;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00022	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00028	0b 4d fc	 or	 ecx, DWORD PTR _locvar1$[ebp]
  0002b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002e	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
  00034	eb 2b		 jmp	 SHORT $LN5@A_SetObjec
$LN2@A_SetObjec:

; 5860 : 	else if (locvar2 == 1)

  00036	83 7d f8 01	 cmp	 DWORD PTR _locvar2$[ebp], 1
  0003a	75 19		 jne	 SHORT $LN4@A_SetObjec

; 5861 : 		actor->flags2 &= ~locvar1;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0003f	f7 d0		 not	 eax
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00044	23 81 88 00 00
	00		 and	 eax, DWORD PTR [ecx+136]
  0004a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004d	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax
  00053	eb 0c		 jmp	 SHORT $LN5@A_SetObjec
$LN4@A_SetObjec:

; 5862 : 	else
; 5863 : 		actor->flags2 = locvar1;

  00055	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  0005b	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx
$LN5@A_SetObjec:

; 5864 : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_A_SetObjectFlags2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SetObjectFlags
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SetObjectFlags PROC					; COMDAT

; 5822 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5823 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5824 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5825 : 
; 5826 : 	P_UnsetThingPosition(actor);

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00022	83 c4 04	 add	 esp, 4

; 5827 : 	if (sector_list)

  00025	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sector_list, 0
  0002c	74 18		 je	 SHORT $LN2@A_SetObjec

; 5828 : 	{
; 5829 : 		P_DelSeclist(sector_list);

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR _sector_list
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _P_DelSeclist
  00039	83 c4 04	 add	 esp, 4

; 5830 : 		sector_list = NULL;

  0003c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sector_list, 0
$LN2@A_SetObjec:

; 5831 : 	}
; 5832 : 
; 5833 : 	if (locvar2 == 2)

  00046	83 7d f8 02	 cmp	 DWORD PTR _locvar2$[ebp], 2
  0004a	75 11		 jne	 SHORT $LN3@A_SetObjec

; 5834 : 		actor->flags |= locvar1;

  0004c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00052	0b 4d fc	 or	 ecx, DWORD PTR _locvar1$[ebp]
  00055	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00058	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
  0005b	eb 22		 jmp	 SHORT $LN6@A_SetObjec
$LN3@A_SetObjec:

; 5835 : 	else if (locvar2 == 1)

  0005d	83 7d f8 01	 cmp	 DWORD PTR _locvar2$[ebp], 1
  00061	75 13		 jne	 SHORT $LN5@A_SetObjec

; 5836 : 		actor->flags &= ~locvar1;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00066	f7 d0		 not	 eax
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0006b	23 41 60	 and	 eax, DWORD PTR [ecx+96]
  0006e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00071	89 42 60	 mov	 DWORD PTR [edx+96], eax
  00074	eb 09		 jmp	 SHORT $LN6@A_SetObjec
$LN5@A_SetObjec:

; 5837 : 	else
; 5838 : 		actor->flags = locvar1;

  00076	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  0007c	89 48 60	 mov	 DWORD PTR [eax+96], ecx
$LN6@A_SetObjec:

; 5839 : 
; 5840 : 	P_SetThingPosition(actor);

  0007f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _P_SetThingPosition
  00088	83 c4 04	 add	 esp, 4

; 5841 : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_A_SetObjectFlags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SetTargetsTarget
_TEXT	SEGMENT
_mo2$ = -12						; size = 4
_th$ = -8						; size = 4
_targetedmobj$ = -4					; size = 4
_actor$ = 8						; size = 4
_A_SetTargetsTarget PROC				; COMDAT

; 5779 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5780 : 	mobj_t *targetedmobj = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _targetedmobj$[ebp], 0

; 5781 : 	thinker_t *th;
; 5782 : 	mobj_t *mo2;
; 5783 : 
; 5784 : 	if (!actor->target)

  00010	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00013	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0001a	75 05		 jne	 SHORT $LN5@A_SetTarge

; 5785 : 		return;

  0001c	e9 80 00 00 00	 jmp	 $LN1@A_SetTarge
$LN5@A_SetTarge:

; 5786 : 
; 5787 : 	if (!actor->target->target)

  00021	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00024	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0002a	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  00031	75 02		 jne	 SHORT $LN6@A_SetTarge

; 5788 : 		return; // Don't search for nothing.

  00033	eb 6c		 jmp	 SHORT $LN1@A_SetTarge
$LN6@A_SetTarge:

; 5789 : 
; 5790 : 	// scan the thinkers
; 5791 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00035	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0003a	89 45 f8	 mov	 DWORD PTR _th$[ebp], eax
  0003d	eb 09		 jmp	 SHORT $LN4@A_SetTarge
$LN2@A_SetTarge:
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	89 4d f8	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@A_SetTarge:
  00048	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0004f	74 32		 je	 SHORT $LN3@A_SetTarge

; 5792 : 	{
; 5793 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00051	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  00054	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0005b	74 02		 je	 SHORT $LN7@A_SetTarge

; 5794 : 			continue;

  0005d	eb e0		 jmp	 SHORT $LN2@A_SetTarge
$LN7@A_SetTarge:

; 5795 : 
; 5796 : 		mo2 = (mobj_t *)th;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  00062	89 45 f4	 mov	 DWORD PTR _mo2$[ebp], eax

; 5797 : 
; 5798 : 		if (mo2 == actor->target->target)

  00065	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00068	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0006e	8b 55 f4	 mov	 edx, DWORD PTR _mo2$[ebp]
  00071	3b 91 98 00 00
	00		 cmp	 edx, DWORD PTR [ecx+152]
  00077	75 08		 jne	 SHORT $LN8@A_SetTarge

; 5799 : 		{
; 5800 : 			targetedmobj = mo2;

  00079	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  0007c	89 45 fc	 mov	 DWORD PTR _targetedmobj$[ebp], eax

; 5801 : 			break;

  0007f	eb 02		 jmp	 SHORT $LN3@A_SetTarge
$LN8@A_SetTarge:

; 5802 : 		}
; 5803 : 	}

  00081	eb bc		 jmp	 SHORT $LN2@A_SetTarge
$LN3@A_SetTarge:

; 5804 : 
; 5805 : 	if (!targetedmobj)

  00083	83 7d fc 00	 cmp	 DWORD PTR _targetedmobj$[ebp], 0
  00087	75 02		 jne	 SHORT $LN9@A_SetTarge

; 5806 : 		return; // Oops, nothing found..

  00089	eb 16		 jmp	 SHORT $LN1@A_SetTarge
$LN9@A_SetTarge:

; 5807 : 
; 5808 : 	P_SetTarget(&actor->target, targetedmobj);

  0008b	8b 45 fc	 mov	 eax, DWORD PTR _targetedmobj$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00092	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _P_SetTarget
  0009e	83 c4 08	 add	 esp, 8
$LN1@A_SetTarge:

; 5809 : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_A_SetTargetsTarget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ZThrust
_TEXT	SEGMENT
tv82 = -76						; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ZThrust PROC						; COMDAT

; 5753 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5754 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5755 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5756 : 
; 5757 : 	if (!locvar1)

  00019	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0001d	75 0d		 jne	 SHORT $LN2@A_ZThrust

; 5758 : 		CONS_Printf("A_ZThrust: Var1 not specified!\n");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FJOJCIAA@A_ZThrust?3?5Var1?5not?5specified?$CB?6@
  00024	e8 00 00 00 00	 call	 _CONS_Printf
  00029	83 c4 04	 add	 esp, 4
$LN2@A_ZThrust:

; 5759 : 
; 5760 : 	if (locvar2)

  0002c	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  00030	74 14		 je	 SHORT $LN3@A_ZThrust

; 5761 : 		actor->momx = actor->momy = 0;

  00032	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00035	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0003f	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN3@A_ZThrust:

; 5762 : 
; 5763 : 	if (actor->eflags & MFE_VERTICALFLIP)

  00046	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00049	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0004f	83 e1 20	 and	 ecx, 32			; 00000020H
  00052	74 11		 je	 SHORT $LN4@A_ZThrust

; 5764 : 		actor->z--;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0005a	83 e9 01	 sub	 ecx, 1
  0005d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00060	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  00063	eb 0f		 jmp	 SHORT $LN5@A_ZThrust
$LN4@A_ZThrust:

; 5765 : 	else
; 5766 : 		actor->z++;

  00065	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00068	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0006b	83 c1 01	 add	 ecx, 1
  0006e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00071	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN5@A_ZThrust:

; 5767 : 
; 5768 : 	P_SetObjectMomZ(actor, locvar1*FRACUNIT, !(locvar2 >> 16));

  00074	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00077	c1 f8 10	 sar	 eax, 16			; 00000010H
  0007a	85 c0		 test	 eax, eax
  0007c	75 09		 jne	 SHORT $LN7@A_ZThrust
  0007e	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv82[ebp], 1
  00085	eb 07		 jmp	 SHORT $LN8@A_ZThrust
$LN7@A_ZThrust:
  00087	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN8@A_ZThrust:
  0008e	8b 4d b4	 mov	 ecx, DWORD PTR tv82[ebp]
  00091	51		 push	 ecx
  00092	8b 55 fc	 mov	 edx, DWORD PTR _locvar1$[ebp]
  00095	c1 e2 10	 shl	 edx, 16			; 00000010H
  00098	52		 push	 edx
  00099	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5769 : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_A_ZThrust ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Thrust
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_Thrust PROC						; COMDAT

; 5730 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5731 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5732 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5733 : 
; 5734 : 	if (!locvar1)

  00019	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0001d	75 0d		 jne	 SHORT $LN2@A_Thrust

; 5735 : 		CONS_Printf("A_Thrust: Var1 not specified!\n");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NPKHLJEF@A_Thrust?3?5Var1?5not?5specified?$CB?6@
  00024	e8 00 00 00 00	 call	 _CONS_Printf
  00029	83 c4 04	 add	 esp, 4
$LN2@A_Thrust:

; 5736 : 
; 5737 : 	if (locvar2)

  0002c	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  00030	74 1c		 je	 SHORT $LN3@A_Thrust

; 5738 : 		P_InstaThrust(actor, actor->angle, locvar1*FRACUNIT);

  00032	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00035	c1 e0 10	 shl	 eax, 16			; 00000010H
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0003c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0003f	52		 push	 edx
  00040	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _P_InstaThrust
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	eb 1a		 jmp	 SHORT $LN4@A_Thrust
$LN3@A_Thrust:

; 5739 : 	else
; 5740 : 		P_Thrust(actor, actor->angle, locvar1*FRACUNIT);

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00051	c1 e0 10	 shl	 eax, 16			; 00000010H
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00058	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0005b	52		 push	 edx
  0005c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _P_Thrust
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@A_Thrust:

; 5741 : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_A_Thrust ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MoveAbsolute
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_MoveAbsolute PROC					; COMDAT

; 5715 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5716 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5717 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5718 : 
; 5719 : 	P_InstaThrust(actor, FixedAngle(locvar1*FRACUNIT), locvar2*FRACUNIT);

  00019	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0001c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00023	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _FixedAngle
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _P_InstaThrust
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5720 : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_A_MoveAbsolute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MoveRelative
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_MoveRelative PROC					; COMDAT

; 5700 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5701 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5702 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5703 : 
; 5704 : 	P_Thrust(actor, actor->angle+FixedAngle(locvar1*FRACUNIT), locvar2*FRACUNIT);

  00019	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0001c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00023	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _FixedAngle
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00032	03 42 24	 add	 eax, DWORD PTR [edx+36]
  00035	50		 push	 eax
  00036	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _P_Thrust
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5705 : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_A_MoveRelative ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ChangeColorAbsolute
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ChangeColorAbsolute PROC				; COMDAT

; 5678 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5679 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5680 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5681 : 
; 5682 : 	actor->flags |= MF_TRANSLATION;

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001f	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  00025	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00028	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5683 : 	if (locvar1)

  0002b	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0002f	74 20		 je	 SHORT $LN2@A_ChangeCo

; 5684 : 	{
; 5685 : 		if (actor->target)

  00031	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00034	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0003b	74 12		 je	 SHORT $LN4@A_ChangeCo

; 5686 : 			actor->color = actor->target->color;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00040	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00046	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00049	8a 41 68	 mov	 al, BYTE PTR [ecx+104]
  0004c	88 42 68	 mov	 BYTE PTR [edx+104], al
$LN4@A_ChangeCo:

; 5687 : 	}

  0004f	eb 09		 jmp	 SHORT $LN3@A_ChangeCo
$LN2@A_ChangeCo:

; 5688 : 	else
; 5689 : 		actor->color = (UINT8)locvar2;

  00051	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00054	8a 4d f8	 mov	 cl, BYTE PTR _locvar2$[ebp]
  00057	88 48 68	 mov	 BYTE PTR [eax+104], cl
$LN3@A_ChangeCo:

; 5690 : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_A_ChangeColorAbsolute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ChangeColorRelative
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ChangeColorRelative PROC				; COMDAT

; 5655 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5656 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5657 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5658 : 
; 5659 : 	actor->flags |= MF_TRANSLATION;

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001f	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  00025	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00028	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5660 : 	if (locvar1)

  0002b	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0002f	74 2a		 je	 SHORT $LN2@A_ChangeCo

; 5661 : 	{
; 5662 : 		// Have you ever seen anything so hideous?
; 5663 : 		if (actor->target)

  00031	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00034	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0003b	74 1c		 je	 SHORT $LN4@A_ChangeCo

; 5664 : 			actor->color = (UINT8)(actor->color + actor->target->color);

  0003d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00040	0f b6 48 68	 movzx	 ecx, BYTE PTR [eax+104]
  00044	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00047	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0004d	0f b6 50 68	 movzx	 edx, BYTE PTR [eax+104]
  00051	03 ca		 add	 ecx, edx
  00053	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00056	88 48 68	 mov	 BYTE PTR [eax+104], cl
$LN4@A_ChangeCo:

; 5665 : 	}

  00059	eb 10		 jmp	 SHORT $LN3@A_ChangeCo
$LN2@A_ChangeCo:

; 5666 : 	else
; 5667 : 		actor->color = (UINT8)(actor->color + locvar2);

  0005b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005e	0f b6 48 68	 movzx	 ecx, BYTE PTR [eax+104]
  00062	03 4d f8	 add	 ecx, DWORD PTR _locvar2$[ebp]
  00065	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00068	88 4a 68	 mov	 BYTE PTR [edx+104], cl
$LN3@A_ChangeCo:

; 5668 : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_A_ChangeColorRelative ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SetRandomTics
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SetRandomTics PROC					; COMDAT

; 5640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5641 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5642 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5643 : 
; 5644 : 	actor->tics = locvar1 + (P_Random() % locvar2);

  00019	e8 00 00 00 00	 call	 _P_Random
  0001e	0f b6 c0	 movzx	 eax, al
  00021	99		 cdq
  00022	f7 7d f8	 idiv	 DWORD PTR _locvar2$[ebp]
  00025	03 55 fc	 add	 edx, DWORD PTR _locvar1$[ebp]
  00028	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002b	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 5645 : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_A_SetRandomTics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SetTics
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SetTics PROC						; COMDAT

; 5622 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5623 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5624 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5625 : 
; 5626 : 	if (locvar1)

  00019	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0001d	74 0b		 je	 SHORT $LN2@A_SetTics

; 5627 : 		actor->tics = locvar1;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00025	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  00028	eb 15		 jmp	 SHORT $LN4@A_SetTics
$LN2@A_SetTics:

; 5628 : 	else if (locvar2)

  0002a	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  0002e	74 0f		 je	 SHORT $LN4@A_SetTics

; 5629 : 		actor->tics = actor->threshold;

  00030	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00036	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  0003c	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN4@A_SetTics:

; 5630 : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_A_SetTics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_FindTracer
_TEXT	SEGMENT
_dist2$ = -28						; size = 4
_dist1$ = -24						; size = 4
_mo2$ = -20						; size = 4
_th$ = -16						; size = 4
_targetedmobj$ = -12					; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_FindTracer PROC					; COMDAT

; 5562 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5563 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5564 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5565 : 	mobj_t *targetedmobj = NULL;

  00019	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _targetedmobj$[ebp], 0

; 5566 : 	thinker_t *th;
; 5567 : 	mobj_t *mo2;
; 5568 : 	fixed_t dist1 = 0, dist2 = 0;

  00020	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dist1$[ebp], 0
  00027	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dist2$[ebp], 0

; 5569 : 
; 5570 : 	if (cv_debug)

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00035	74 1c		 je	 SHORT $LN5@A_FindTrac

; 5571 : 		CONS_Printf("A_FindTracer called from object type %d, var1: %d, var2: %d\n", actor->type, locvar1, locvar2);

  00037	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00042	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@HMPFMCNB@A_FindTracer?5called?5from?5object@
  0004b	e8 00 00 00 00	 call	 _CONS_Printf
  00050	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@A_FindTrac:

; 5572 : 
; 5573 : 	// scan the thinkers
; 5574 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00053	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00058	89 45 f0	 mov	 DWORD PTR _th$[ebp], eax
  0005b	eb 09		 jmp	 SHORT $LN4@A_FindTrac
$LN2@A_FindTrac:
  0005d	8b 45 f0	 mov	 eax, DWORD PTR _th$[ebp]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	89 4d f0	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@A_FindTrac:
  00066	81 7d f0 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0006d	0f 84 ac 00 00
	00		 je	 $LN3@A_FindTrac

; 5575 : 	{
; 5576 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00073	8b 45 f0	 mov	 eax, DWORD PTR _th$[ebp]
  00076	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0007d	74 02		 je	 SHORT $LN6@A_FindTrac

; 5577 : 			continue;

  0007f	eb dc		 jmp	 SHORT $LN2@A_FindTrac
$LN6@A_FindTrac:

; 5578 : 
; 5579 : 		mo2 = (mobj_t *)th;

  00081	8b 45 f0	 mov	 eax, DWORD PTR _th$[ebp]
  00084	89 45 ec	 mov	 DWORD PTR _mo2$[ebp], eax

; 5580 : 
; 5581 : 		if (mo2->type == (mobjtype_t)locvar1)

  00087	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  0008a	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0008d	3b 4d fc	 cmp	 ecx, DWORD PTR _locvar1$[ebp]
  00090	0f 85 84 00 00
	00		 jne	 $LN10@A_FindTrac

; 5582 : 		{
; 5583 : 			if (targetedmobj == NULL)

  00096	83 7d f4 00	 cmp	 DWORD PTR _targetedmobj$[ebp], 0
  0009a	75 2f		 jne	 SHORT $LN8@A_FindTrac

; 5584 : 			{
; 5585 : 				targetedmobj = mo2;

  0009c	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  0009f	89 45 f4	 mov	 DWORD PTR _targetedmobj$[ebp], eax

; 5586 : 				dist2 = R_PointToDist2(actor->x, actor->y, mo2->x, mo2->y);

  000a2	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  000a5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a8	51		 push	 ecx
  000a9	8b 55 ec	 mov	 edx, DWORD PTR _mo2$[ebp]
  000ac	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000af	50		 push	 eax
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000b3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b6	52		 push	 edx
  000b7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ba	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _R_PointToDist2
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	89 45 e4	 mov	 DWORD PTR _dist2$[ebp], eax

; 5587 : 			}

  000c9	eb 4f		 jmp	 SHORT $LN10@A_FindTrac
$LN8@A_FindTrac:

; 5588 : 			else
; 5589 : 			{
; 5590 : 				dist1 = R_PointToDist2(actor->x, actor->y, mo2->x, mo2->y);

  000cb	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  000ce	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d1	51		 push	 ecx
  000d2	8b 55 ec	 mov	 edx, DWORD PTR _mo2$[ebp]
  000d5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000d8	50		 push	 eax
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000dc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000df	52		 push	 edx
  000e0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 _R_PointToDist2
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	89 45 e8	 mov	 DWORD PTR _dist1$[ebp], eax

; 5591 : 
; 5592 : 				if ((!locvar2 && dist1 < dist2) || (locvar2 && dist1 > dist2))

  000f2	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  000f6	75 08		 jne	 SHORT $LN12@A_FindTrac
  000f8	8b 45 e8	 mov	 eax, DWORD PTR _dist1$[ebp]
  000fb	3b 45 e4	 cmp	 eax, DWORD PTR _dist2$[ebp]
  000fe	7c 0e		 jl	 SHORT $LN11@A_FindTrac
$LN12@A_FindTrac:
  00100	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  00104	74 14		 je	 SHORT $LN10@A_FindTrac
  00106	8b 45 e8	 mov	 eax, DWORD PTR _dist1$[ebp]
  00109	3b 45 e4	 cmp	 eax, DWORD PTR _dist2$[ebp]
  0010c	7e 0c		 jle	 SHORT $LN10@A_FindTrac
$LN11@A_FindTrac:

; 5593 : 				{
; 5594 : 					targetedmobj = mo2;

  0010e	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  00111	89 45 f4	 mov	 DWORD PTR _targetedmobj$[ebp], eax

; 5595 : 					dist2 = dist1;

  00114	8b 45 e8	 mov	 eax, DWORD PTR _dist1$[ebp]
  00117	89 45 e4	 mov	 DWORD PTR _dist2$[ebp], eax
$LN10@A_FindTrac:

; 5596 : 				}
; 5597 : 			}
; 5598 : 		}
; 5599 : 	}

  0011a	e9 3e ff ff ff	 jmp	 $LN2@A_FindTrac
$LN3@A_FindTrac:

; 5600 : 
; 5601 : 	if (!targetedmobj)

  0011f	83 7d f4 00	 cmp	 DWORD PTR _targetedmobj$[ebp], 0
  00123	75 18		 jne	 SHORT $LN13@A_FindTrac

; 5602 : 	{
; 5603 : 		if (cv_debug)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0012c	74 0d		 je	 SHORT $LN14@A_FindTrac

; 5604 : 			CONS_Printf("A_FindTracer: Unable to find the specified object to target.\n");

  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@DHLMJMKP@A_FindTracer?3?5Unable?5to?5find?5th@
  00133	e8 00 00 00 00	 call	 _CONS_Printf
  00138	83 c4 04	 add	 esp, 4
$LN14@A_FindTrac:

; 5605 : 		return; // Oops, nothing found..

  0013b	eb 2c		 jmp	 SHORT $LN1@A_FindTrac
$LN13@A_FindTrac:

; 5606 : 	}
; 5607 : 
; 5608 : 	if (cv_debug)

  0013d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00144	74 0d		 je	 SHORT $LN15@A_FindTrac

; 5609 : 		CONS_Printf("A_FindTracer: Found a target.\n");

  00146	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CJEIHPNN@A_FindTracer?3?5Found?5a?5target?4?6@
  0014b	e8 00 00 00 00	 call	 _CONS_Printf
  00150	83 c4 04	 add	 esp, 4
$LN15@A_FindTrac:

; 5610 : 
; 5611 : 	P_SetTarget(&actor->tracer, targetedmobj);

  00153	8b 45 f4	 mov	 eax, DWORD PTR _targetedmobj$[ebp]
  00156	50		 push	 eax
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0015a	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00160	51		 push	 ecx
  00161	e8 00 00 00 00	 call	 _P_SetTarget
  00166	83 c4 08	 add	 esp, 8
$LN1@A_FindTrac:

; 5612 : }

  00169	5f		 pop	 edi
  0016a	5e		 pop	 esi
  0016b	5b		 pop	 ebx
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
_A_FindTracer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_FindTarget
_TEXT	SEGMENT
_dist2$ = -28						; size = 4
_dist1$ = -24						; size = 4
_mo2$ = -20						; size = 4
_th$ = -16						; size = 4
_targetedmobj$ = -12					; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_FindTarget PROC					; COMDAT

; 5502 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5503 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5504 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5505 : 	mobj_t *targetedmobj = NULL;

  00019	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _targetedmobj$[ebp], 0

; 5506 : 	thinker_t *th;
; 5507 : 	mobj_t *mo2;
; 5508 : 	fixed_t dist1 = 0, dist2 = 0;

  00020	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dist1$[ebp], 0
  00027	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dist2$[ebp], 0

; 5509 : 
; 5510 : 	if (cv_debug)

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00035	74 1c		 je	 SHORT $LN5@A_FindTarg

; 5511 : 		CONS_Printf("A_FindTarget called from object type %d, var1: %d, var2: %d\n", actor->type, locvar1, locvar2);

  00037	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00042	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@LFGBMAGN@A_FindTarget?5called?5from?5object@
  0004b	e8 00 00 00 00	 call	 _CONS_Printf
  00050	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@A_FindTarg:

; 5512 : 
; 5513 : 	// scan the thinkers
; 5514 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00053	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00058	89 45 f0	 mov	 DWORD PTR _th$[ebp], eax
  0005b	eb 09		 jmp	 SHORT $LN4@A_FindTarg
$LN2@A_FindTarg:
  0005d	8b 45 f0	 mov	 eax, DWORD PTR _th$[ebp]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	89 4d f0	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@A_FindTarg:
  00066	81 7d f0 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0006d	0f 84 ac 00 00
	00		 je	 $LN3@A_FindTarg

; 5515 : 	{
; 5516 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00073	8b 45 f0	 mov	 eax, DWORD PTR _th$[ebp]
  00076	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0007d	74 02		 je	 SHORT $LN6@A_FindTarg

; 5517 : 			continue;

  0007f	eb dc		 jmp	 SHORT $LN2@A_FindTarg
$LN6@A_FindTarg:

; 5518 : 
; 5519 : 		mo2 = (mobj_t *)th;

  00081	8b 45 f0	 mov	 eax, DWORD PTR _th$[ebp]
  00084	89 45 ec	 mov	 DWORD PTR _mo2$[ebp], eax

; 5520 : 
; 5521 : 		if (mo2->type == (mobjtype_t)locvar1)

  00087	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  0008a	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0008d	3b 4d fc	 cmp	 ecx, DWORD PTR _locvar1$[ebp]
  00090	0f 85 84 00 00
	00		 jne	 $LN10@A_FindTarg

; 5522 : 		{
; 5523 : 			if (targetedmobj == NULL)

  00096	83 7d f4 00	 cmp	 DWORD PTR _targetedmobj$[ebp], 0
  0009a	75 2f		 jne	 SHORT $LN8@A_FindTarg

; 5524 : 			{
; 5525 : 				targetedmobj = mo2;

  0009c	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  0009f	89 45 f4	 mov	 DWORD PTR _targetedmobj$[ebp], eax

; 5526 : 				dist2 = R_PointToDist2(actor->x, actor->y, mo2->x, mo2->y);

  000a2	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  000a5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a8	51		 push	 ecx
  000a9	8b 55 ec	 mov	 edx, DWORD PTR _mo2$[ebp]
  000ac	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000af	50		 push	 eax
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000b3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b6	52		 push	 edx
  000b7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ba	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _R_PointToDist2
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	89 45 e4	 mov	 DWORD PTR _dist2$[ebp], eax

; 5527 : 			}

  000c9	eb 4f		 jmp	 SHORT $LN10@A_FindTarg
$LN8@A_FindTarg:

; 5528 : 			else
; 5529 : 			{
; 5530 : 				dist1 = R_PointToDist2(actor->x, actor->y, mo2->x, mo2->y);

  000cb	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  000ce	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d1	51		 push	 ecx
  000d2	8b 55 ec	 mov	 edx, DWORD PTR _mo2$[ebp]
  000d5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000d8	50		 push	 eax
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000dc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000df	52		 push	 edx
  000e0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 _R_PointToDist2
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	89 45 e8	 mov	 DWORD PTR _dist1$[ebp], eax

; 5531 : 
; 5532 : 				if ((!locvar2 && dist1 < dist2) || (locvar2 && dist1 > dist2))

  000f2	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  000f6	75 08		 jne	 SHORT $LN12@A_FindTarg
  000f8	8b 45 e8	 mov	 eax, DWORD PTR _dist1$[ebp]
  000fb	3b 45 e4	 cmp	 eax, DWORD PTR _dist2$[ebp]
  000fe	7c 0e		 jl	 SHORT $LN11@A_FindTarg
$LN12@A_FindTarg:
  00100	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  00104	74 14		 je	 SHORT $LN10@A_FindTarg
  00106	8b 45 e8	 mov	 eax, DWORD PTR _dist1$[ebp]
  00109	3b 45 e4	 cmp	 eax, DWORD PTR _dist2$[ebp]
  0010c	7e 0c		 jle	 SHORT $LN10@A_FindTarg
$LN11@A_FindTarg:

; 5533 : 				{
; 5534 : 					targetedmobj = mo2;

  0010e	8b 45 ec	 mov	 eax, DWORD PTR _mo2$[ebp]
  00111	89 45 f4	 mov	 DWORD PTR _targetedmobj$[ebp], eax

; 5535 : 					dist2 = dist1;

  00114	8b 45 e8	 mov	 eax, DWORD PTR _dist1$[ebp]
  00117	89 45 e4	 mov	 DWORD PTR _dist2$[ebp], eax
$LN10@A_FindTarg:

; 5536 : 				}
; 5537 : 			}
; 5538 : 		}
; 5539 : 	}

  0011a	e9 3e ff ff ff	 jmp	 $LN2@A_FindTarg
$LN3@A_FindTarg:

; 5540 : 
; 5541 : 	if (!targetedmobj)

  0011f	83 7d f4 00	 cmp	 DWORD PTR _targetedmobj$[ebp], 0
  00123	75 18		 jne	 SHORT $LN13@A_FindTarg

; 5542 : 	{
; 5543 : 		if (cv_debug)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0012c	74 0d		 je	 SHORT $LN14@A_FindTarg

; 5544 : 			CONS_Printf("A_FindTarget: Unable to find the specified object to target.\n");

  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@PFKCPHAK@A_FindTarget?3?5Unable?5to?5find?5th@
  00133	e8 00 00 00 00	 call	 _CONS_Printf
  00138	83 c4 04	 add	 esp, 4
$LN14@A_FindTarg:

; 5545 : 		return; // Oops, nothing found..

  0013b	eb 2c		 jmp	 SHORT $LN1@A_FindTarg
$LN13@A_FindTarg:

; 5546 : 	}
; 5547 : 
; 5548 : 	if (cv_debug)

  0013d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00144	74 0d		 je	 SHORT $LN15@A_FindTarg

; 5549 : 		CONS_Printf("A_FindTarget: Found a target.\n");

  00146	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KBCIBIGM@A_FindTarget?3?5Found?5a?5target?4?6@
  0014b	e8 00 00 00 00	 call	 _CONS_Printf
  00150	83 c4 04	 add	 esp, 4
$LN15@A_FindTarg:

; 5550 : 
; 5551 : 	P_SetTarget(&actor->target, targetedmobj);

  00153	8b 45 f4	 mov	 eax, DWORD PTR _targetedmobj$[ebp]
  00156	50		 push	 eax
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0015a	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00160	51		 push	 ecx
  00161	e8 00 00 00 00	 call	 _P_SetTarget
  00166	83 c4 08	 add	 esp, 8
$LN1@A_FindTarg:

; 5552 : }

  00169	5f		 pop	 edi
  0016a	5e		 pop	 esi
  0016b	5b		 pop	 ebx
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
_A_FindTarget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_PlaySound
_TEXT	SEGMENT
tv66 = -76						; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_PlaySound PROC					; COMDAT

; 5487 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5488 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5489 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5490 : 
; 5491 : 	S_StartSound(locvar2 ? actor : NULL, locvar1);

  00019	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  0001d	74 08		 je	 SHORT $LN3@A_PlaySoun
  0001f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00022	89 45 b4	 mov	 DWORD PTR tv66[ebp], eax
  00025	eb 07		 jmp	 SHORT $LN4@A_PlaySoun
$LN3@A_PlaySoun:
  00027	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@A_PlaySoun:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b4	 mov	 edx, DWORD PTR tv66[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _S_StartSound
  0003b	83 c4 08	 add	 esp, 8

; 5492 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_A_PlaySound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ChangeAngleAbsolute
_TEXT	SEGMENT
_amax$ = -20						; size = 4
_amin$ = -16						; size = 4
_angle$ = -12						; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ChangeAngleAbsolute PROC				; COMDAT

; 5457 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5458 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5459 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5460 : 	angle_t angle = (P_Random()+1)<<24;

  00019	e8 00 00 00 00	 call	 _P_Random
  0001e	0f b6 c0	 movzx	 eax, al
  00021	83 c0 01	 add	 eax, 1
  00024	c1 e0 18	 shl	 eax, 24			; 00000018H
  00027	89 45 f4	 mov	 DWORD PTR _angle$[ebp], eax

; 5461 : 	const angle_t amin = FixedAngle(locvar1*FRACUNIT);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0002d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _FixedAngle
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 f0	 mov	 DWORD PTR _amin$[ebp], eax

; 5462 : 	const angle_t amax = FixedAngle(locvar2*FRACUNIT);

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0003f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _FixedAngle
  00048	83 c4 04	 add	 esp, 4
  0004b	89 45 ec	 mov	 DWORD PTR _amax$[ebp], eax

; 5463 : 
; 5464 : #ifdef PARANOIA
; 5465 : 	if (amin > amax)
; 5466 : 		I_Error("A_ChangeAngleAbsolute: var1 is greater then var2");
; 5467 : #endif
; 5468 : 
; 5469 : 	if (angle < amin)

  0004e	8b 45 f4	 mov	 eax, DWORD PTR _angle$[ebp]
  00051	3b 45 f0	 cmp	 eax, DWORD PTR _amin$[ebp]
  00054	73 06		 jae	 SHORT $LN2@A_ChangeAn

; 5470 : 		angle = amin;

  00056	8b 45 f0	 mov	 eax, DWORD PTR _amin$[ebp]
  00059	89 45 f4	 mov	 DWORD PTR _angle$[ebp], eax
$LN2@A_ChangeAn:

; 5471 : 	if (angle > amax)

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _angle$[ebp]
  0005f	3b 45 ec	 cmp	 eax, DWORD PTR _amax$[ebp]
  00062	76 06		 jbe	 SHORT $LN3@A_ChangeAn

; 5472 : 		angle = amax;

  00064	8b 45 ec	 mov	 eax, DWORD PTR _amax$[ebp]
  00067	89 45 f4	 mov	 DWORD PTR _angle$[ebp], eax
$LN3@A_ChangeAn:

; 5473 : 
; 5474 : 	actor->angle = angle;

  0006a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _angle$[ebp]
  00070	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 5475 : }

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_A_ChangeAngleAbsolute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ChangeAngleRelative
_TEXT	SEGMENT
_amax$ = -20						; size = 4
_amin$ = -16						; size = 4
_angle$ = -12						; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ChangeAngleRelative PROC				; COMDAT

; 5429 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5430 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5431 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5432 : 	angle_t angle = (P_Random()+1)<<24;

  00019	e8 00 00 00 00	 call	 _P_Random
  0001e	0f b6 c0	 movzx	 eax, al
  00021	83 c0 01	 add	 eax, 1
  00024	c1 e0 18	 shl	 eax, 24			; 00000018H
  00027	89 45 f4	 mov	 DWORD PTR _angle$[ebp], eax

; 5433 : 	const angle_t amin = FixedAngle(locvar1*FRACUNIT);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0002d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _FixedAngle
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 f0	 mov	 DWORD PTR _amin$[ebp], eax

; 5434 : 	const angle_t amax = FixedAngle(locvar2*FRACUNIT);

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0003f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _FixedAngle
  00048	83 c4 04	 add	 esp, 4
  0004b	89 45 ec	 mov	 DWORD PTR _amax$[ebp], eax

; 5435 : 
; 5436 : #ifdef PARANOIA
; 5437 : 	if (amin > amax)
; 5438 : 		I_Error("A_ChangeAngleRelative: var1 is greater then var2");
; 5439 : #endif
; 5440 : 
; 5441 : 	if (angle < amin)

  0004e	8b 45 f4	 mov	 eax, DWORD PTR _angle$[ebp]
  00051	3b 45 f0	 cmp	 eax, DWORD PTR _amin$[ebp]
  00054	73 06		 jae	 SHORT $LN2@A_ChangeAn

; 5442 : 		angle = amin;

  00056	8b 45 f0	 mov	 eax, DWORD PTR _amin$[ebp]
  00059	89 45 f4	 mov	 DWORD PTR _angle$[ebp], eax
$LN2@A_ChangeAn:

; 5443 : 	if (angle > amax)

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _angle$[ebp]
  0005f	3b 45 ec	 cmp	 eax, DWORD PTR _amax$[ebp]
  00062	76 06		 jbe	 SHORT $LN3@A_ChangeAn

; 5444 : 		angle = amax;

  00064	8b 45 ec	 mov	 eax, DWORD PTR _amax$[ebp]
  00067	89 45 f4	 mov	 DWORD PTR _angle$[ebp], eax
$LN3@A_ChangeAn:

; 5445 : 
; 5446 : 	actor->angle += angle;

  0006a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00070	03 4d f4	 add	 ecx, DWORD PTR _angle$[ebp]
  00073	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00076	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 5447 : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_A_ChangeAngleRelative ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SpawnObjectRelative
_TEXT	SEGMENT
_locvar2$ = -28						; size = 4
_locvar1$ = -24						; size = 4
_mo$ = -20						; size = 4
_type$ = -16						; size = 4
_z$ = -12						; size = 2
_y$ = -8						; size = 2
_x$ = -4						; size = 2
_actor$ = 8						; size = 4
_A_SpawnObjectRelative PROC				; COMDAT

; 5400 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5401 : 	INT16 x, y, z; // Want to be sure we can use negative values
; 5402 : 	mobjtype_t type;
; 5403 : 	mobj_t *mo;
; 5404 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 e8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5405 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 e4	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5406 : 
; 5407 : 	if (cv_debug)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00020	74 1c		 je	 SHORT $LN2@A_SpawnObj

; 5408 : 		CONS_Printf("A_SpawnObjectRelative called from object type %d, var1: %d, var2: %d\n", actor->type, locvar1, locvar2);

  00022	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00025	50		 push	 eax
  00026	8b 4d e8	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002d	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@ONNIOEE@A_SpawnObjectRelative?5called?5fr@
  00036	e8 00 00 00 00	 call	 _CONS_Printf
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@A_SpawnObj:

; 5409 : 
; 5410 : 	x = (INT16)(locvar1>>16);

  0003e	8b 45 e8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00041	c1 f8 10	 sar	 eax, 16			; 00000010H
  00044	66 89 45 fc	 mov	 WORD PTR _x$[ebp], ax

; 5411 : 	y = (INT16)(locvar1&65535);

  00048	8b 45 e8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0004b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00050	66 89 45 f8	 mov	 WORD PTR _y$[ebp], ax

; 5412 : 	z = (INT16)(locvar2>>16);

  00054	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00057	c1 f8 10	 sar	 eax, 16			; 00000010H
  0005a	66 89 45 f4	 mov	 WORD PTR _z$[ebp], ax

; 5413 : 	type = (mobjtype_t)(locvar2&65535);

  0005e	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00061	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00066	89 45 f0	 mov	 DWORD PTR _type$[ebp], eax

; 5414 : 
; 5415 : 	mo = P_SpawnMobj(actor->x + (x<<FRACBITS), actor->y + (y<<FRACBITS), actor->z + (z<<FRACBITS), type);

  00069	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  0006c	50		 push	 eax
  0006d	0f bf 4d f4	 movsx	 ecx, WORD PTR _z$[ebp]
  00071	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00074	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00077	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  0007a	51		 push	 ecx
  0007b	0f bf 45 f8	 movsx	 eax, WORD PTR _y$[ebp]
  0007f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00085	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00088	50		 push	 eax
  00089	0f bf 55 fc	 movsx	 edx, WORD PTR _x$[ebp]
  0008d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00090	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00093	03 50 10	 add	 edx, DWORD PTR [eax+16]
  00096	52		 push	 edx
  00097	e8 00 00 00 00	 call	 _P_SpawnMobj
  0009c	83 c4 10	 add	 esp, 16			; 00000010H
  0009f	89 45 ec	 mov	 DWORD PTR _mo$[ebp], eax

; 5416 : 
; 5417 : 	if (actor->eflags & MFE_VERTICALFLIP)

  000a2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a5	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000ab	83 e1 20	 and	 ecx, 32			; 00000020H
  000ae	74 18		 je	 SHORT $LN3@A_SpawnObj

; 5418 : 		mo->flags2 |= MF2_OBJECTFLIP;

  000b0	8b 45 ec	 mov	 eax, DWORD PTR _mo$[ebp]
  000b3	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000b9	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  000bf	8b 55 ec	 mov	 edx, DWORD PTR _mo$[ebp]
  000c2	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN3@A_SpawnObj:

; 5419 : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_A_SpawnObjectRelative ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SpawnObjectAbsolute
_TEXT	SEGMENT
_locvar2$ = -28						; size = 4
_locvar1$ = -24						; size = 4
_mo$ = -20						; size = 4
_type$ = -16						; size = 4
_z$ = -12						; size = 2
_y$ = -8						; size = 2
_x$ = -4						; size = 2
_actor$ = 8						; size = 4
_A_SpawnObjectAbsolute PROC				; COMDAT

; 5370 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5371 : 	INT16 x, y, z; // Want to be sure we can use negative values
; 5372 : 	mobjtype_t type;
; 5373 : 	mobj_t *mo;
; 5374 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 e8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5375 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 e4	 mov	 DWORD PTR _locvar2$[ebp], eax

; 5376 : 
; 5377 : 	x = (INT16)(locvar1>>16);

  00019	8b 45 e8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0001c	c1 f8 10	 sar	 eax, 16			; 00000010H
  0001f	66 89 45 fc	 mov	 WORD PTR _x$[ebp], ax

; 5378 : 	y = (INT16)(locvar1&65535);

  00023	8b 45 e8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00026	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002b	66 89 45 f8	 mov	 WORD PTR _y$[ebp], ax

; 5379 : 	z = (INT16)(locvar2>>16);

  0002f	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00032	c1 f8 10	 sar	 eax, 16			; 00000010H
  00035	66 89 45 f4	 mov	 WORD PTR _z$[ebp], ax

; 5380 : 	type = (mobjtype_t)(locvar2&65535);

  00039	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0003c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00041	89 45 f0	 mov	 DWORD PTR _type$[ebp], eax

; 5381 : 
; 5382 : 	mo = P_SpawnMobj(x<<FRACBITS, y<<FRACBITS, z<<FRACBITS, type);

  00044	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  00047	50		 push	 eax
  00048	0f bf 4d f4	 movsx	 ecx, WORD PTR _z$[ebp]
  0004c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0004f	51		 push	 ecx
  00050	0f bf 55 f8	 movsx	 edx, WORD PTR _y$[ebp]
  00054	c1 e2 10	 shl	 edx, 16			; 00000010H
  00057	52		 push	 edx
  00058	0f bf 45 fc	 movsx	 eax, WORD PTR _x$[ebp]
  0005c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _P_SpawnMobj
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	89 45 ec	 mov	 DWORD PTR _mo$[ebp], eax

; 5383 : 
; 5384 : 	if (actor->eflags & MFE_VERTICALFLIP)

  0006b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00074	83 e1 20	 and	 ecx, 32			; 00000020H
  00077	74 18		 je	 SHORT $LN2@A_SpawnObj

; 5385 : 		mo->flags2 |= MF2_OBJECTFLIP;

  00079	8b 45 ec	 mov	 eax, DWORD PTR _mo$[ebp]
  0007c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00082	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  00088	8b 55 ec	 mov	 edx, DWORD PTR _mo$[ebp]
  0008b	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN2@A_SpawnObj:

; 5386 : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_A_SpawnObjectAbsolute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BossJetFume
_TEXT	SEGMENT
_jety$1 = -24						; size = 4
_jetx$2 = -20						; size = 4
_jety$3 = -16						; size = 4
_jetx$4 = -12						; size = 4
_locvar1$ = -8						; size = 4
_filler$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_BossJetFume PROC					; COMDAT

; 5876 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5877 : 	mobj_t *filler;
; 5878 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5879 : 
; 5880 : 	if (locvar1 == 0) // Boss1 jet fumes

  00011	83 7d f8 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  00015	0f 85 a0 01 00
	00		 jne	 $LN2@A_BossJetF

; 5881 : 	{
; 5882 : 		fixed_t jetx, jety;
; 5883 : 
; 5884 : 		jetx = actor->x + P_ReturnThrustX(actor, actor->angle, -64*FRACUNIT);

  0001b	68 00 00 c0 ff	 push	 -4194304		; ffc00000H
  00020	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00023	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00036	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00039	89 45 f4	 mov	 DWORD PTR _jetx$4[ebp], eax

; 5885 : 		jety = actor->y + P_ReturnThrustY(actor, actor->angle, -64*FRACUNIT);

  0003c	68 00 00 c0 ff	 push	 -4194304		; ffc00000H
  00041	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00044	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00047	51		 push	 ecx
  00048	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00057	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  0005a	89 45 f0	 mov	 DWORD PTR _jety$3[ebp], eax

; 5886 : 
; 5887 : 		filler = P_SpawnMobj(jetx, jety, actor->z + 38*FRACUNIT, MT_JETFUME1);

  0005d	6a 1e		 push	 30			; 0000001eH
  0005f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	81 c1 00 00 26
	00		 add	 ecx, 2490368		; 00260000H
  0006b	51		 push	 ecx
  0006c	8b 55 f0	 mov	 edx, DWORD PTR _jety$3[ebp]
  0006f	52		 push	 edx
  00070	8b 45 f4	 mov	 eax, DWORD PTR _jetx$4[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _P_SpawnMobj
  00079	83 c4 10	 add	 esp, 16			; 00000010H
  0007c	89 45 fc	 mov	 DWORD PTR _filler$[ebp], eax

; 5888 : 		P_SetTarget(&filler->target, actor);

  0007f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00082	50		 push	 eax
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _filler$[ebp]
  00086	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _P_SetTarget
  00092	83 c4 08	 add	 esp, 8

; 5889 : 		filler->fuse = 56;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _filler$[ebp]
  00098	c7 80 bc 00 00
	00 38 00 00 00	 mov	 DWORD PTR [eax+188], 56	; 00000038H

; 5890 : 
; 5891 : 		filler = P_SpawnMobj(jetx + P_ReturnThrustX(actor, actor->angle-ANGLE_90, 24*FRACUNIT), jety + P_ReturnThrustY(actor, actor->angle-ANGLE_90, 24*FRACUNIT), actor->z + 12*FRACUNIT, MT_JETFUME1);

  000a2	6a 1e		 push	 30			; 0000001eH
  000a4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000aa	81 c1 00 00 0c
	00		 add	 ecx, 786432		; 000c0000H
  000b0	51		 push	 ecx
  000b1	68 00 00 18 00	 push	 1572864			; 00180000H
  000b6	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000b9	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000bc	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  000c1	50		 push	 eax
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _P_ReturnThrustY
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	03 45 f0	 add	 eax, DWORD PTR _jety$3[ebp]
  000d1	50		 push	 eax
  000d2	68 00 00 18 00	 push	 1572864			; 00180000H
  000d7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000da	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000dd	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  000e2	50		 push	 eax
  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 _P_ReturnThrustX
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ef	03 45 f4	 add	 eax, DWORD PTR _jetx$4[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _P_SpawnMobj
  000f8	83 c4 10	 add	 esp, 16			; 00000010H
  000fb	89 45 fc	 mov	 DWORD PTR _filler$[ebp], eax

; 5892 : 		P_SetTarget(&filler->target, actor);

  000fe	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00101	50		 push	 eax
  00102	8b 4d fc	 mov	 ecx, DWORD PTR _filler$[ebp]
  00105	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 _P_SetTarget
  00111	83 c4 08	 add	 esp, 8

; 5893 : 		filler->fuse = 57;

  00114	8b 45 fc	 mov	 eax, DWORD PTR _filler$[ebp]
  00117	c7 80 bc 00 00
	00 39 00 00 00	 mov	 DWORD PTR [eax+188], 57	; 00000039H

; 5894 : 
; 5895 : 		filler = P_SpawnMobj(jetx + P_ReturnThrustX(actor, actor->angle+ANGLE_90, 24*FRACUNIT), jety + P_ReturnThrustY(actor, actor->angle+ANGLE_90, 24*FRACUNIT), actor->z + 12*FRACUNIT, MT_JETFUME1);

  00121	6a 1e		 push	 30			; 0000001eH
  00123	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00126	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00129	81 c1 00 00 0c
	00		 add	 ecx, 786432		; 000c0000H
  0012f	51		 push	 ecx
  00130	68 00 00 18 00	 push	 1572864			; 00180000H
  00135	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00138	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0013b	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00140	50		 push	 eax
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00144	51		 push	 ecx
  00145	e8 00 00 00 00	 call	 _P_ReturnThrustY
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014d	03 45 f0	 add	 eax, DWORD PTR _jety$3[ebp]
  00150	50		 push	 eax
  00151	68 00 00 18 00	 push	 1572864			; 00180000H
  00156	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00159	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0015c	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00161	50		 push	 eax
  00162	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 _P_ReturnThrustX
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016e	03 45 f4	 add	 eax, DWORD PTR _jetx$4[ebp]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _P_SpawnMobj
  00177	83 c4 10	 add	 esp, 16			; 00000010H
  0017a	89 45 fc	 mov	 DWORD PTR _filler$[ebp], eax

; 5896 : 		P_SetTarget(&filler->target, actor);

  0017d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00180	50		 push	 eax
  00181	8b 4d fc	 mov	 ecx, DWORD PTR _filler$[ebp]
  00184	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0018a	51		 push	 ecx
  0018b	e8 00 00 00 00	 call	 _P_SetTarget
  00190	83 c4 08	 add	 esp, 8

; 5897 : 		filler->fuse = 58;

  00193	8b 45 fc	 mov	 eax, DWORD PTR _filler$[ebp]
  00196	c7 80 bc 00 00
	00 3a 00 00 00	 mov	 DWORD PTR [eax+188], 58	; 0000003aH

; 5898 : 
; 5899 : 		P_SetTarget(&actor->tracer, filler);

  001a0	8b 45 fc	 mov	 eax, DWORD PTR _filler$[ebp]
  001a3	50		 push	 eax
  001a4	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001a7	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 _P_SetTarget
  001b3	83 c4 08	 add	 esp, 8

; 5900 : 	}

  001b6	e9 ac 00 00 00	 jmp	 $LN4@A_BossJetF
$LN2@A_BossJetF:

; 5901 : 	else if (locvar1 == 1) // Boss 3 propeller

  001bb	83 7d f8 01	 cmp	 DWORD PTR _locvar1$[ebp], 1
  001bf	0f 85 a2 00 00
	00		 jne	 $LN4@A_BossJetF

; 5902 : 	{
; 5903 : 		fixed_t jetx, jety;
; 5904 : 
; 5905 : 		jetx = actor->x + P_ReturnThrustX(actor, actor->angle, -60*FRACUNIT);

  001c5	68 00 00 c4 ff	 push	 -3932160		; ffc40000H
  001ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001cd	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001d0	51		 push	 ecx
  001d1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001d4	52		 push	 edx
  001d5	e8 00 00 00 00	 call	 _P_ReturnThrustX
  001da	83 c4 0c	 add	 esp, 12			; 0000000cH
  001dd	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001e0	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  001e3	89 45 ec	 mov	 DWORD PTR _jetx$2[ebp], eax

; 5906 : 		jety = actor->y + P_ReturnThrustY(actor, actor->angle, -60*FRACUNIT);

  001e6	68 00 00 c4 ff	 push	 -3932160		; ffc40000H
  001eb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ee	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001f1	51		 push	 ecx
  001f2	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001f5	52		 push	 edx
  001f6	e8 00 00 00 00	 call	 _P_ReturnThrustY
  001fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fe	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00201	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00204	89 45 e8	 mov	 DWORD PTR _jety$1[ebp], eax

; 5907 : 
; 5908 : 		filler = P_SpawnMobj(jetx, jety, actor->z + 17*FRACUNIT, MT_PROPELLER);

  00207	6a 25		 push	 37			; 00000025H
  00209	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0020c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0020f	81 c1 00 00 11
	00		 add	 ecx, 1114112		; 00110000H
  00215	51		 push	 ecx
  00216	8b 55 e8	 mov	 edx, DWORD PTR _jety$1[ebp]
  00219	52		 push	 edx
  0021a	8b 45 ec	 mov	 eax, DWORD PTR _jetx$2[ebp]
  0021d	50		 push	 eax
  0021e	e8 00 00 00 00	 call	 _P_SpawnMobj
  00223	83 c4 10	 add	 esp, 16			; 00000010H
  00226	89 45 fc	 mov	 DWORD PTR _filler$[ebp], eax

; 5909 : 		P_SetTarget(&filler->target, actor);

  00229	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0022c	50		 push	 eax
  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _filler$[ebp]
  00230	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00236	51		 push	 ecx
  00237	e8 00 00 00 00	 call	 _P_SetTarget
  0023c	83 c4 08	 add	 esp, 8

; 5910 : 		filler->angle = actor->angle - ANGLE_180;

  0023f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00242	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00245	81 e9 00 00 00
	80		 sub	 ecx, -2147483648	; 80000000H
  0024b	8b 55 fc	 mov	 edx, DWORD PTR _filler$[ebp]
  0024e	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 5911 : 
; 5912 : 		P_SetTarget(&actor->tracer, filler);

  00251	8b 45 fc	 mov	 eax, DWORD PTR _filler$[ebp]
  00254	50		 push	 eax
  00255	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00258	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  0025e	51		 push	 ecx
  0025f	e8 00 00 00 00	 call	 _P_SetTarget
  00264	83 c4 08	 add	 esp, 8
$LN4@A_BossJetF:

; 5913 : 	}
; 5914 : }

  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	5b		 pop	 ebx
  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c3		 ret	 0
_A_BossJetFume ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Boss2Pogo
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_fa$2 = -16						; size = 4
_fz$3 = -12						; size = 4
_goop$4 = -8						; size = 4
_ns$5 = -4						; size = 4
_actor$ = 8						; size = 4
_A_Boss2Pogo PROC					; COMDAT

; 4776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4777 : 	if (actor->z <= actor->floorz + 8*FRACUNIT && actor->momz <= 0)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0000f	81 c1 00 00 08
	00		 add	 ecx, 524288		; 00080000H
  00015	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00018	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  0001b	7f 27		 jg	 SHORT $LN5@A_Boss2Pog
  0001d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00020	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00024	7f 1e		 jg	 SHORT $LN5@A_Boss2Pog

; 4778 : 	{
; 4779 : 		P_SetMobjState(actor, actor->info->raisestate);

  00026	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00029	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0002f	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _P_SetMobjState
  0003c	83 c4 08	 add	 esp, 8

; 4780 : 		// Pogo Mode
; 4781 : 	}

  0003f	e9 76 01 00 00	 jmp	 $LN7@A_Boss2Pog
$LN5@A_Boss2Pog:

; 4782 : 	else if (actor->momz < 0 && actor->reactiontime)

  00044	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00047	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0004b	0f 8d 69 01 00
	00		 jge	 $LN7@A_Boss2Pog
  00051	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00054	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  0005b	0f 84 59 01 00
	00		 je	 $LN7@A_Boss2Pog

; 4783 : 	{
; 4784 : 		const fixed_t ns = 3 * FRACUNIT;

  00061	c7 45 fc 00 00
	03 00		 mov	 DWORD PTR _ns$5[ebp], 196608 ; 00030000H

; 4785 : 		mobj_t *goop;
; 4786 : 		fixed_t fz = actor->z+actor->height+56*FRACUNIT;

  00068	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0006e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00071	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00074	8d 8c 01 00 00
	38 00		 lea	 ecx, DWORD PTR [ecx+eax+3670016]
  0007b	89 4d f4	 mov	 DWORD PTR _fz$3[ebp], ecx

; 4787 : 		angle_t fa;
; 4788 : 		INT32 i;
; 4789 : 		// spray in all 8 directions!
; 4790 : 		for (i = 0; i < 8; i++)

  0007e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN4@A_Boss2Pog
$LN2@A_Boss2Pog:
  00087	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@A_Boss2Pog:
  00090	83 7d ec 08	 cmp	 DWORD PTR _i$1[ebp], 8
  00094	0f 8d d3 00 00
	00		 jge	 $LN3@A_Boss2Pog

; 4791 : 		{
; 4792 : 			actor->movedir++;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009d	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000a3	83 c1 01	 add	 ecx, 1
  000a6	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a9	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx

; 4793 : 			actor->movedir %= NUMDIRS;

  000af	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b2	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  000b8	33 d2		 xor	 edx, edx
  000ba	b9 08 00 00 00	 mov	 ecx, 8
  000bf	f7 f1		 div	 ecx
  000c1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c4	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 4794 : 			fa = (actor->movedir*FINEANGLES/8) & FINEMASK;

  000ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cd	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000d3	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  000d6	c1 e9 03	 shr	 ecx, 3
  000d9	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  000df	89 4d f0	 mov	 DWORD PTR _fa$2[ebp], ecx

; 4795 : 
; 4796 : 			goop = P_SpawnMobj(actor->x, actor->y, fz, actor->info->painchance);

  000e2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000eb	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ee	52		 push	 edx
  000ef	8b 45 f4	 mov	 eax, DWORD PTR _fz$3[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000f6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 _P_SpawnMobj
  00106	83 c4 10	 add	 esp, 16			; 00000010H
  00109	89 45 f8	 mov	 DWORD PTR _goop$4[ebp], eax

; 4797 : 			goop->momx = FixedMul(FINESINE(fa),ns);

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _ns$5[ebp]
  0010f	50		 push	 eax
  00110	8b 4d f0	 mov	 ecx, DWORD PTR _fa$2[ebp]
  00113	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 _FixedMul
  00120	83 c4 08	 add	 esp, 8
  00123	8b 4d f8	 mov	 ecx, DWORD PTR _goop$4[ebp]
  00126	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 4798 : 			goop->momy = FixedMul(FINECOSINE(fa),ns);

  00129	8b 45 fc	 mov	 eax, DWORD PTR _ns$5[ebp]
  0012c	50		 push	 eax
  0012d	8b 4d f0	 mov	 ecx, DWORD PTR _fa$2[ebp]
  00130	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00136	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _FixedMul
  0013f	83 c4 08	 add	 esp, 8
  00142	8b 4d f8	 mov	 ecx, DWORD PTR _goop$4[ebp]
  00145	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 4799 : 			goop->momz = 4*FRACUNIT;

  00148	8b 45 f8	 mov	 eax, DWORD PTR _goop$4[ebp]
  0014b	c7 40 50 00 00
	04 00		 mov	 DWORD PTR [eax+80], 262144 ; 00040000H

; 4800 : 
; 4801 : 
; 4802 : #ifdef CHAOSISNOTDEADYET
; 4803 : 			if (gametype == GT_CHAOS)
; 4804 : 				goop->fuse = 15*TICRATE;
; 4805 : 			else
; 4806 : #endif
; 4807 : 				goop->fuse = 30*TICRATE+P_Random();

  00152	e8 00 00 00 00	 call	 _P_Random
  00157	0f b6 c0	 movzx	 eax, al
  0015a	05 1a 04 00 00	 add	 eax, 1050		; 0000041aH
  0015f	8b 4d f8	 mov	 ecx, DWORD PTR _goop$4[ebp]
  00162	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 4808 : 		}

  00168	e9 1a ff ff ff	 jmp	 $LN2@A_Boss2Pog
$LN3@A_Boss2Pog:

; 4809 : 		actor->reactiontime = 0;

  0016d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00170	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 4810 : 		if (actor->info->attacksound)

  0017a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0017d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00183	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00187	74 19		 je	 SHORT $LN8@A_Boss2Pog

; 4811 : 			S_StartAttackSound(actor, actor->info->attacksound);

  00189	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0018c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00192	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00195	52		 push	 edx
  00196	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 _S_StartAttackSound
  0019f	83 c4 08	 add	 esp, 8
$LN8@A_Boss2Pog:

; 4812 : 		actor->flags2 |= MF2_JUSTATTACKED;

  001a2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  001ab	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  001b1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001b4	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN7@A_Boss2Pog:

; 4813 : 	}
; 4814 : }

  001ba	5f		 pop	 edi
  001bb	5e		 pop	 esi
  001bc	5b		 pop	 ebx
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
_A_Boss2Pogo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Boss2Chase
_TEXT	SEGMENT
_fa$1 = -40						; size = 4
_fz$2 = -36						; size = 4
_goop$3 = -32						; size = 4
_ns$4 = -28						; size = 4
_fs$5 = -24						; size = 4
_fc$6 = -20						; size = 4
_fa$7 = -16						; size = 4
_speedvar$ = -12					; size = 4
_reverse$ = -8						; size = 4
_radius$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_Boss2Chase PROC					; COMDAT

; 4678 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4679 : 	fixed_t radius;
; 4680 : 	boolean reverse = false;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _reverse$[ebp], 0

; 4681 : 	INT32 speedvar;
; 4682 : 
; 4683 : 	if (actor->health <= 0)

  00010	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00013	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0001a	7f 05		 jg	 SHORT $LN2@A_Boss2Cha

; 4684 : 		return;

  0001c	e9 9d 03 00 00	 jmp	 $LN9@A_Boss2Cha
$LN2@A_Boss2Cha:

; 4685 : 
; 4686 : 	// When reactiontime hits zero, he will go the other way
; 4687 : 	if (actor->reactiontime)

  00021	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00024	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  0002b	74 15		 je	 SHORT $LN3@A_Boss2Cha

; 4688 : 		actor->reactiontime--;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00030	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003c	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN3@A_Boss2Cha:

; 4689 : 
; 4690 : 	if (actor->reactiontime <= 0)

  00042	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00045	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  0004c	7f 1b		 jg	 SHORT $LN4@A_Boss2Cha

; 4691 : 	{
; 4692 : 		reverse = true;

  0004e	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _reverse$[ebp], 1

; 4693 : 		actor->reactiontime = 2*TICRATE + P_Random();

  00055	e8 00 00 00 00	 call	 _P_Random
  0005a	0f b6 c0	 movzx	 eax, al
  0005d	83 c0 46	 add	 eax, 70			; 00000046H
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00063	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax
$LN4@A_Boss2Cha:

; 4694 : 	}
; 4695 : 
; 4696 : 	P_SetTarget(&actor->target, P_GetClosestAxis(actor));

  00069	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _P_GetClosestAxis
  00072	83 c4 04	 add	 esp, 4
  00075	50		 push	 eax
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00079	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _P_SetTarget
  00085	83 c4 08	 add	 esp, 8

; 4697 : 
; 4698 : 	if (!actor->target) // This should NEVER happen.

  00088	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008b	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00092	75 1e		 jne	 SHORT $LN5@A_Boss2Cha

; 4699 : 	{
; 4700 : 		CONS_Printf("Error: Boss2 has no target!\n");

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LNAJPBLC@Error?3?5Boss2?5has?5no?5target?$CB?6@
  00099	e8 00 00 00 00	 call	 _CONS_Printf
  0009e	83 c4 04	 add	 esp, 4

; 4701 : 		A_BossDeath(actor);

  000a1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _A_BossDeath
  000aa	83 c4 04	 add	 esp, 4

; 4702 : 		return;

  000ad	e9 0c 03 00 00	 jmp	 $LN9@A_Boss2Cha
$LN5@A_Boss2Cha:

; 4703 : 	}
; 4704 : 
; 4705 : 	radius = actor->target->radius;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b5	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000bb	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  000be	89 55 fc	 mov	 DWORD PTR _radius$[ebp], edx

; 4706 : 
; 4707 : 	if (reverse)

  000c1	83 7d f8 00	 cmp	 DWORD PTR _reverse$[ebp], 0
  000c5	74 14		 je	 SHORT $LN6@A_Boss2Cha

; 4708 : 		actor->watertop = -actor->watertop;

  000c7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ca	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  000d0	f7 d9		 neg	 ecx
  000d2	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d5	89 8a c0 00 00
	00		 mov	 DWORD PTR [edx+192], ecx
$LN6@A_Boss2Cha:

; 4709 : 
; 4710 : 	// Only speed up if you have the 'Deaf' flag.
; 4711 : 	if (actor->flags & MF_AMBUSH)

  000db	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000de	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000e1	83 e1 20	 and	 ecx, 32			; 00000020H
  000e4	74 0e		 je	 SHORT $LN7@A_Boss2Cha

; 4712 : 		speedvar = actor->health;

  000e6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e9	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000ef	89 4d f4	 mov	 DWORD PTR _speedvar$[ebp], ecx
  000f2	eb 0f		 jmp	 SHORT $LN8@A_Boss2Cha
$LN7@A_Boss2Cha:

; 4713 : 	else
; 4714 : 		speedvar = actor->info->spawnhealth;

  000f4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000fd	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00100	89 55 f4	 mov	 DWORD PTR _speedvar$[ebp], edx
$LN8@A_Boss2Cha:

; 4715 : 
; 4716 : 	actor->target->angle += FixedAngle(FixedDiv(FixedMul(actor->watertop, (actor->info->spawnhealth*(FRACUNIT/4)*3)), speedvar*FRACUNIT)); // Don't use FixedAngleC!

  00103	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00106	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  0010c	8b 4d f4	 mov	 ecx, DWORD PTR _speedvar$[ebp]
  0010f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00112	51		 push	 ecx
  00113	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00116	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0011c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0011f	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00122	6b d1 03	 imul	 edx, ecx, 3
  00125	52		 push	 edx
  00126	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00129	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 _FixedMul
  00135	83 c4 08	 add	 esp, 8
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 _FixedDiv
  0013e	83 c4 08	 add	 esp, 8
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _FixedAngle
  00147	83 c4 04	 add	 esp, 4
  0014a	03 46 24	 add	 eax, DWORD PTR [esi+36]
  0014d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00150	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  00156	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4717 : 
; 4718 : 	P_UnsetThingPosition(actor);

  00159	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00162	83 c4 04	 add	 esp, 4

; 4719 : 	{
; 4720 : 		const angle_t fa = actor->target->angle>>ANGLETOFINESHIFT;

  00165	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00168	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0016e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00171	c1 ea 13	 shr	 edx, 19			; 00000013H
  00174	89 55 f0	 mov	 DWORD PTR _fa$7[ebp], edx

; 4721 : 		const fixed_t fc = FixedMul(FINECOSINE(fa),radius);

  00177	8b 45 fc	 mov	 eax, DWORD PTR _radius$[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d f0	 mov	 ecx, DWORD PTR _fa$7[ebp]
  0017e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00184	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 _FixedMul
  0018d	83 c4 08	 add	 esp, 8
  00190	89 45 ec	 mov	 DWORD PTR _fc$6[ebp], eax

; 4722 : 		const fixed_t fs = FixedMul(FINESINE(fa),radius);

  00193	8b 45 fc	 mov	 eax, DWORD PTR _radius$[ebp]
  00196	50		 push	 eax
  00197	8b 4d f0	 mov	 ecx, DWORD PTR _fa$7[ebp]
  0019a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  001a1	52		 push	 edx
  001a2	e8 00 00 00 00	 call	 _FixedMul
  001a7	83 c4 08	 add	 esp, 8
  001aa	89 45 e8	 mov	 DWORD PTR _fs$5[ebp], eax

; 4723 : 		actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x + fc, actor->target->y + fs);

  001ad	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b0	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001b6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001b9	03 55 e8	 add	 edx, DWORD PTR _fs$5[ebp]
  001bc	52		 push	 edx
  001bd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001c0	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001c6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001c9	03 55 ec	 add	 edx, DWORD PTR _fc$6[ebp]
  001cc	52		 push	 edx
  001cd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001d0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001d3	51		 push	 ecx
  001d4	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001d7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _R_PointToAngle2
  001e0	83 c4 10	 add	 esp, 16			; 00000010H
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001e6	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4724 : 		actor->x = actor->target->x + fc;

  001e9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ec	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001f2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001f5	03 55 ec	 add	 edx, DWORD PTR _fc$6[ebp]
  001f8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001fb	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 4725 : 		actor->y = actor->target->y + fs;

  001fe	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00201	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00207	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0020a	03 55 e8	 add	 edx, DWORD PTR _fs$5[ebp]
  0020d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00210	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 4726 : 	}
; 4727 : 	P_SetThingPosition(actor);

  00213	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 _P_SetThingPosition
  0021c	83 c4 04	 add	 esp, 4

; 4728 : 
; 4729 : 	// Spray goo once every second
; 4730 : 	if (leveltime % (speedvar*15/10)-1 == 0)

  0021f	6b 45 f4 0f	 imul	 eax, DWORD PTR _speedvar$[ebp], 15
  00223	99		 cdq
  00224	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00229	f7 f9		 idiv	 ecx
  0022b	8b c8		 mov	 ecx, eax
  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00232	33 d2		 xor	 edx, edx
  00234	f7 f1		 div	 ecx
  00236	83 ea 01	 sub	 edx, 1
  00239	0f 85 7f 01 00
	00		 jne	 $LN9@A_Boss2Cha

; 4731 : 	{
; 4732 : 		const fixed_t ns = 3 * FRACUNIT;

  0023f	c7 45 e4 00 00
	03 00		 mov	 DWORD PTR _ns$4[ebp], 196608 ; 00030000H

; 4733 : 		mobj_t *goop;
; 4734 : 		fixed_t fz = actor->z+actor->height+56*FRACUNIT;

  00246	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00249	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0024c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0024f	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00252	8d 8c 01 00 00
	38 00		 lea	 ecx, DWORD PTR [ecx+eax+3670016]
  00259	89 4d dc	 mov	 DWORD PTR _fz$2[ebp], ecx

; 4735 : 		angle_t fa;
; 4736 : 		// actor->movedir is used to determine the last
; 4737 : 		// direction goo was sprayed in. There are 8 possible
; 4738 : 		// directions to spray. (45-degree increments)
; 4739 : 
; 4740 : 		actor->movedir++;

  0025c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0025f	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00265	83 c1 01	 add	 ecx, 1
  00268	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0026b	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx

; 4741 : 		actor->movedir %= NUMDIRS;

  00271	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00274	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0027a	33 d2		 xor	 edx, edx
  0027c	b9 08 00 00 00	 mov	 ecx, 8
  00281	f7 f1		 div	 ecx
  00283	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00286	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 4742 : 		fa = (actor->movedir*FINEANGLES/8) & FINEMASK;

  0028c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0028f	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00295	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  00298	c1 e9 03	 shr	 ecx, 3
  0029b	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  002a1	89 4d d8	 mov	 DWORD PTR _fa$1[ebp], ecx

; 4743 : 
; 4744 : 		goop = P_SpawnMobj(actor->x, actor->y, fz, actor->info->painchance);

  002a4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002a7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002ad	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  002b0	52		 push	 edx
  002b1	8b 45 dc	 mov	 eax, DWORD PTR _fz$2[ebp]
  002b4	50		 push	 eax
  002b5	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002b8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002bb	52		 push	 edx
  002bc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002bf	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002c2	51		 push	 ecx
  002c3	e8 00 00 00 00	 call	 _P_SpawnMobj
  002c8	83 c4 10	 add	 esp, 16			; 00000010H
  002cb	89 45 e0	 mov	 DWORD PTR _goop$3[ebp], eax

; 4745 : 		goop->momx = FixedMul(FINESINE(fa),ns);

  002ce	8b 45 e4	 mov	 eax, DWORD PTR _ns$4[ebp]
  002d1	50		 push	 eax
  002d2	8b 4d d8	 mov	 ecx, DWORD PTR _fa$1[ebp]
  002d5	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  002dc	52		 push	 edx
  002dd	e8 00 00 00 00	 call	 _FixedMul
  002e2	83 c4 08	 add	 esp, 8
  002e5	8b 4d e0	 mov	 ecx, DWORD PTR _goop$3[ebp]
  002e8	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 4746 : 		goop->momy = FixedMul(FINECOSINE(fa),ns);

  002eb	8b 45 e4	 mov	 eax, DWORD PTR _ns$4[ebp]
  002ee	50		 push	 eax
  002ef	8b 4d d8	 mov	 ecx, DWORD PTR _fa$1[ebp]
  002f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  002f8	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  002fb	50		 push	 eax
  002fc	e8 00 00 00 00	 call	 _FixedMul
  00301	83 c4 08	 add	 esp, 8
  00304	8b 4d e0	 mov	 ecx, DWORD PTR _goop$3[ebp]
  00307	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 4747 : 		goop->momz = 4*FRACUNIT;

  0030a	8b 45 e0	 mov	 eax, DWORD PTR _goop$3[ebp]
  0030d	c7 40 50 00 00
	04 00		 mov	 DWORD PTR [eax+80], 262144 ; 00040000H

; 4748 : 		goop->fuse = 30*TICRATE+P_Random();

  00314	e8 00 00 00 00	 call	 _P_Random
  00319	0f b6 c0	 movzx	 eax, al
  0031c	05 1a 04 00 00	 add	 eax, 1050		; 0000041aH
  00321	8b 4d e0	 mov	 ecx, DWORD PTR _goop$3[ebp]
  00324	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 4749 : 
; 4750 : 		if (actor->info->attacksound)

  0032a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0032d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00333	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00337	74 19		 je	 SHORT $LN10@A_Boss2Cha

; 4751 : 			S_StartAttackSound(actor, actor->info->attacksound);

  00339	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0033c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00342	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00345	52		 push	 edx
  00346	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 _S_StartAttackSound
  0034f	83 c4 08	 add	 esp, 8
$LN10@A_Boss2Cha:

; 4752 : 
; 4753 : 		if (P_Random() & 1)

  00352	e8 00 00 00 00	 call	 _P_Random
  00357	0f b6 c0	 movzx	 eax, al
  0035a	83 e0 01	 and	 eax, 1
  0035d	74 1e		 je	 SHORT $LN11@A_Boss2Cha

; 4754 : 		{
; 4755 : 			goop->momx *= 2;

  0035f	8b 45 e0	 mov	 eax, DWORD PTR _goop$3[ebp]
  00362	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00365	d1 e1		 shl	 ecx, 1
  00367	8b 55 e0	 mov	 edx, DWORD PTR _goop$3[ebp]
  0036a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 4756 : 			goop->momy *= 2;

  0036d	8b 45 e0	 mov	 eax, DWORD PTR _goop$3[ebp]
  00370	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00373	d1 e1		 shl	 ecx, 1
  00375	8b 55 e0	 mov	 edx, DWORD PTR _goop$3[ebp]
  00378	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 4757 : 		}

  0037b	eb 29		 jmp	 SHORT $LN13@A_Boss2Cha
$LN11@A_Boss2Cha:

; 4758 : 		else if (P_Random() > 128)

  0037d	e8 00 00 00 00	 call	 _P_Random
  00382	0f b6 c0	 movzx	 eax, al
  00385	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0038a	7e 1a		 jle	 SHORT $LN13@A_Boss2Cha

; 4759 : 		{
; 4760 : 			goop->momx *= 3;

  0038c	8b 45 e0	 mov	 eax, DWORD PTR _goop$3[ebp]
  0038f	6b 48 48 03	 imul	 ecx, DWORD PTR [eax+72], 3
  00393	8b 55 e0	 mov	 edx, DWORD PTR _goop$3[ebp]
  00396	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 4761 : 			goop->momy *= 3;

  00399	8b 45 e0	 mov	 eax, DWORD PTR _goop$3[ebp]
  0039c	6b 48 4c 03	 imul	 ecx, DWORD PTR [eax+76], 3
  003a0	8b 55 e0	 mov	 edx, DWORD PTR _goop$3[ebp]
  003a3	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
$LN13@A_Boss2Cha:

; 4762 : 		}
; 4763 : 
; 4764 : 		actor->flags2 |= MF2_JUSTATTACKED;

  003a6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003a9	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  003af	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  003b5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003b8	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN9@A_Boss2Cha:

; 4765 : 	}
; 4766 : }

  003be	5f		 pop	 edi
  003bf	5e		 pop	 esi
  003c0	5b		 pop	 ebx
  003c1	8b e5		 mov	 esp, ebp
  003c3	5d		 pop	 ebp
  003c4	c3		 ret	 0
_A_Boss2Chase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Boss1Chase
_TEXT	SEGMENT
tv176 = -72						; size = 4
_delta$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_Boss1Chase PROC					; COMDAT

; 4604 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4605 : 	INT32 delta;
; 4606 : 
; 4607 : 	if (actor->reactiontime)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00013	74 15		 je	 SHORT $LN2@A_Boss1Cha

; 4608 : 		actor->reactiontime--;

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00024	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN2@A_Boss1Cha:

; 4609 : 
; 4610 : 	if (actor->z < actor->floorz+33*FRACUNIT)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00030	81 c1 00 00 21
	00		 add	 ecx, 2162688		; 00210000H
  00036	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00039	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  0003c	7d 12		 jge	 SHORT $LN3@A_Boss1Cha

; 4611 : 		actor->z = actor->floorz+33*FRACUNIT;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00041	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00044	81 c1 00 00 21
	00		 add	 ecx, 2162688		; 00210000H
  0004a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004d	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN3@A_Boss1Cha:

; 4612 : 
; 4613 : 	// turn towards movement direction if not there yet
; 4614 : 	if (actor->movedir < NUMDIRS)

  00050	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00053	83 b8 90 00 00
	00 08		 cmp	 DWORD PTR [eax+144], 8
  0005a	73 5b		 jae	 SHORT $LN7@A_Boss1Cha

; 4615 : 	{
; 4616 : 		actor->angle &= (7<<29);

  0005c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00062	81 e1 00 00 00
	e0		 and	 ecx, -536870912		; e0000000H
  00068	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006b	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 4617 : 		delta = actor->angle - (actor->movedir << 29);

  0006e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00071	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00077	c1 e1 1d	 shl	 ecx, 29			; 0000001dH
  0007a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0007d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00080	2b c1		 sub	 eax, ecx
  00082	89 45 fc	 mov	 DWORD PTR _delta$[ebp], eax

; 4618 : 
; 4619 : 		if (delta > 0)

  00085	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  00089	7e 14		 jle	 SHORT $LN5@A_Boss1Cha

; 4620 : 			actor->angle -= ANGLE_45;

  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00091	81 e9 00 00 00
	20		 sub	 ecx, 536870912		; 20000000H
  00097	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0009a	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  0009d	eb 18		 jmp	 SHORT $LN7@A_Boss1Cha
$LN5@A_Boss1Cha:

; 4621 : 		else if (delta < 0)

  0009f	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  000a3	7d 12		 jge	 SHORT $LN7@A_Boss1Cha

; 4622 : 			actor->angle += ANGLE_45;

  000a5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000ab	81 c1 00 00 00
	20		 add	 ecx, 536870912		; 20000000H
  000b1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000b4	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN7@A_Boss1Cha:

; 4623 : 	}
; 4624 : 
; 4625 : 	// do not attack twice in a row
; 4626 : 	if (actor->flags2 & MF2_JUSTATTACKED)

  000b7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ba	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000c0	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000c6	74 29		 je	 SHORT $LN8@A_Boss1Cha

; 4627 : 	{
; 4628 : 		actor->flags2 &= ~MF2_JUSTATTACKED;

  000c8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cb	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000d1	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  000d7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000da	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4629 : 		P_NewChaseDir(actor);

  000e0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _P_NewChaseDir
  000e9	83 c4 04	 add	 esp, 4

; 4630 : 		return;

  000ec	e9 48 01 00 00	 jmp	 $LN18@A_Boss1Cha
$LN8@A_Boss1Cha:

; 4631 : 	}
; 4632 : 
; 4633 : 	if (actor->movecount)

  000f1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f4	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  000fb	74 05		 je	 SHORT $LN9@A_Boss1Cha

; 4634 : 		goto nomissile;

  000fd	e9 bf 00 00 00	 jmp	 $nomissile$21
$LN9@A_Boss1Cha:

; 4635 : 
; 4636 : 	if (!P_CheckMissileRange(actor))

  00102	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _P_CheckMissileRange
  0010b	83 c4 04	 add	 esp, 4
  0010e	85 c0		 test	 eax, eax
  00110	75 05		 jne	 SHORT $LN10@A_Boss1Cha

; 4637 : 		goto nomissile;

  00112	e9 aa 00 00 00	 jmp	 $nomissile$21
$LN10@A_Boss1Cha:

; 4638 : 
; 4639 : 	if (actor->reactiontime <= 0)

  00117	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0011a	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00121	0f 8f 9a 00 00
	00		 jg	 $nomissile$21

; 4640 : 	{
; 4641 : 		if (actor->health > actor->info->damage)

  00127	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0012a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00130	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00133	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00139	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  0013c	7e 43		 jle	 SHORT $LN12@A_Boss1Cha

; 4642 : 		{
; 4643 : 			if (P_Random() & 1)

  0013e	e8 00 00 00 00	 call	 _P_Random
  00143	0f b6 c0	 movzx	 eax, al
  00146	83 e0 01	 and	 eax, 1
  00149	74 1b		 je	 SHORT $LN14@A_Boss1Cha

; 4644 : 				P_SetMobjState(actor, actor->info->missilestate);

  0014b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00154	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00157	52		 push	 edx
  00158	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _P_SetMobjState
  00161	83 c4 08	 add	 esp, 8
  00164	eb 19		 jmp	 SHORT $LN15@A_Boss1Cha
$LN14@A_Boss1Cha:

; 4645 : 			else
; 4646 : 				P_SetMobjState(actor, actor->info->meleestate);

  00166	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00169	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0016f	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00172	52		 push	 edx
  00173	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _P_SetMobjState
  0017c	83 c4 08	 add	 esp, 8
$LN15@A_Boss1Cha:

; 4647 : 		}

  0017f	eb 19		 jmp	 SHORT $LN13@A_Boss1Cha
$LN12@A_Boss1Cha:

; 4648 : 		else
; 4649 : 			P_SetMobjState(actor, actor->info->raisestate);

  00181	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00184	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0018a	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0018d	52		 push	 edx
  0018e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _P_SetMobjState
  00197	83 c4 08	 add	 esp, 8
$LN13@A_Boss1Cha:

; 4650 : 
; 4651 : 		actor->flags2 |= MF2_JUSTATTACKED;

  0019a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0019d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  001a3	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  001a9	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001ac	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4652 : 		actor->reactiontime = 2*TICRATE;

  001b2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b5	c7 80 9c 00 00
	00 46 00 00 00	 mov	 DWORD PTR [eax+156], 70	; 00000046H

; 4653 : 		return;

  001bf	eb 78		 jmp	 SHORT $LN18@A_Boss1Cha
$nomissile$21:

; 4654 : 	}
; 4655 : 
; 4656 : 	// ?
; 4657 : nomissile:
; 4658 : 	// possibly choose another target
; 4659 : 	if (multiplayer && P_Random() < 2)

  001c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  001c8	74 25		 je	 SHORT $LN17@A_Boss1Cha
  001ca	e8 00 00 00 00	 call	 _P_Random
  001cf	0f b6 c0	 movzx	 eax, al
  001d2	83 f8 02	 cmp	 eax, 2
  001d5	7d 18		 jge	 SHORT $LN17@A_Boss1Cha

; 4660 : 	{
; 4661 : 		if (P_LookForPlayers(actor, true, false, 0))

  001d7	6a 00		 push	 0
  001d9	6a 00		 push	 0
  001db	6a 01		 push	 1
  001dd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 _P_LookForPlayers
  001e6	83 c4 10	 add	 esp, 16			; 00000010H
  001e9	85 c0		 test	 eax, eax
  001eb	74 02		 je	 SHORT $LN17@A_Boss1Cha

; 4662 : 			return; // got a new target

  001ed	eb 4a		 jmp	 SHORT $LN18@A_Boss1Cha
$LN17@A_Boss1Cha:

; 4663 : 	}
; 4664 : 
; 4665 : 	// chase towards player
; 4666 : 	if (--actor->movecount < 0 || !P_Move(actor, actor->info->speed))

  001ef	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f2	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  001f8	83 e9 01	 sub	 ecx, 1
  001fb	89 4d b8	 mov	 DWORD PTR tv176[ebp], ecx
  001fe	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00201	8b 45 b8	 mov	 eax, DWORD PTR tv176[ebp]
  00204	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  0020a	83 7d b8 00	 cmp	 DWORD PTR tv176[ebp], 0
  0020e	7c 1d		 jl	 SHORT $LN19@A_Boss1Cha
  00210	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00213	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00219	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0021c	52		 push	 edx
  0021d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 _P_Move
  00226	83 c4 08	 add	 esp, 8
  00229	85 c0		 test	 eax, eax
  0022b	75 0c		 jne	 SHORT $LN18@A_Boss1Cha
$LN19@A_Boss1Cha:

; 4667 : 		P_NewChaseDir(actor);

  0022d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 _P_NewChaseDir
  00236	83 c4 04	 add	 esp, 4
$LN18@A_Boss1Cha:

; 4668 : }

  00239	5f		 pop	 edi
  0023a	5e		 pop	 esi
  0023b	5b		 pop	 ebx
  0023c	8b e5		 mov	 esp, ebp
  0023e	5d		 pop	 ebp
  0023f	c3		 ret	 0
_A_Boss1Chase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BossZoom
_TEXT	SEGMENT
_dist$ = -12						; size = 4
_an$ = -8						; size = 4
_dest$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_BossZoom PROC					; COMDAT

; 1679 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1680 : 	mobj_t *dest;
; 1681 : 	angle_t an;
; 1682 : 	INT32 dist;
; 1683 : 
; 1684 : 	if (!actor->target)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	75 05		 jne	 SHORT $LN2@A_BossZoom

; 1685 : 		return;

  00015	e9 25 01 00 00	 jmp	 $LN1@A_BossZoom
$LN2@A_BossZoom:

; 1686 : 
; 1687 : 	dest = actor->target;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00023	89 4d fc	 mov	 DWORD PTR _dest$[ebp], ecx

; 1688 : 	actor->flags2 |= MF2_SKULLFLY;

  00026	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00029	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0002f	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00035	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00038	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 1689 : 	if (actor->info->attacksound)

  0003e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00041	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00047	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  0004b	74 19		 je	 SHORT $LN3@A_BossZoom

; 1690 : 		S_StartAttackSound(actor, actor->info->attacksound);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00050	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00056	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00059	52		 push	 edx
  0005a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _S_StartAttackSound
  00063	83 c4 08	 add	 esp, 8
$LN3@A_BossZoom:

; 1691 : 	A_FaceTarget(actor);

  00066	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _A_FaceTarget
  0006f	83 c4 04	 add	 esp, 4

; 1692 : 	an = actor->angle >> ANGLETOFINESHIFT;

  00072	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00075	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00078	c1 e9 13	 shr	 ecx, 19			; 00000013H
  0007b	89 4d f8	 mov	 DWORD PTR _an$[ebp], ecx

; 1693 : 	actor->momx = FixedMul(actor->info->speed*5*FRACUNIT, FINECOSINE(an));

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00087	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0008a	52		 push	 edx
  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00094	6b 51 3c 05	 imul	 edx, DWORD PTR [ecx+60], 5
  00098	c1 e2 10	 shl	 edx, 16			; 00000010H
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 _FixedMul
  000a1	83 c4 08	 add	 esp, 8
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000a7	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1694 : 	actor->momy = FixedMul(actor->info->speed*5*FRACUNIT, FINESINE(an));

  000aa	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  000ad	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  000b4	51		 push	 ecx
  000b5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000b8	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  000be	6b 48 3c 05	 imul	 ecx, DWORD PTR [eax+60], 5
  000c2	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _FixedMul
  000cb	83 c4 08	 add	 esp, 8
  000ce	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d1	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 1695 : 	dist = P_AproxDistance(dest->x - actor->x, dest->y - actor->y);

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000da	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000dd	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  000e0	52		 push	 edx
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000e7	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000ea	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 _P_AproxDistance
  000f3	83 c4 08	 add	 esp, 8
  000f6	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 1696 : 	dist = dist / (actor->info->speed*5*FRACUNIT);

  000f9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fc	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00102	6b 49 3c 05	 imul	 ecx, DWORD PTR [ecx+60], 5
  00106	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00109	8b 45 f4	 mov	 eax, DWORD PTR _dist$[ebp]
  0010c	99		 cdq
  0010d	f7 f9		 idiv	 ecx
  0010f	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 1697 : 
; 1698 : 	if (dist < 1)

  00112	83 7d f4 01	 cmp	 DWORD PTR _dist$[ebp], 1
  00116	7d 07		 jge	 SHORT $LN4@A_BossZoom

; 1699 : 		dist = 1;

  00118	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN4@A_BossZoom:

; 1700 : 	actor->momz = (dest->z + (dest->height>>1) - actor->z) / dist;

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  00122	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00125	d1 f9		 sar	 ecx, 1
  00127	8b 55 fc	 mov	 edx, DWORD PTR _dest$[ebp]
  0012a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0012d	03 c1		 add	 eax, ecx
  0012f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00132	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  00135	99		 cdq
  00136	f7 7d f4	 idiv	 DWORD PTR _dist$[ebp]
  00139	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0013c	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN1@A_BossZoom:

; 1701 : }

  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
_A_BossZoom ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_1upThinker
_TEXT	SEGMENT
_closestplayer$1 = -16					; size = 4
_temp$2 = -12						; size = 4
_dist$3 = -8						; size = 4
_i$4 = -4						; size = 4
_actor$ = 8						; size = 4
_A_1upThinker PROC					; COMDAT

; 1783 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1784 : 	#ifdef LIVESBOXDISPLAYPLAYER
; 1785 : 	if (!splitscreen)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00010	75 39		 jne	 SHORT $LN5@A_1upThink

; 1786 : 	{
; 1787 : 		actor->frame = states[S_PLAY_BOX1A].frame;

  00012	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00017	6b c8 3a	 imul	 ecx, eax, 58
  0001a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0001d	8b 81 04 00 00
	00		 mov	 eax, DWORD PTR _states[ecx+4]
  00023	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 1788 : 		actor->skin = &skins[players[displayplayer].skin];

  00026	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00030	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR _players[eax+184], 236
  0003a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _skins
  00040	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00043	89 4a 64	 mov	 DWORD PTR [edx+100], ecx

; 1789 : 	}

  00046	e9 c1 00 00 00	 jmp	 $LN6@A_1upThink
$LN5@A_1upThink:

; 1790 : 	else
; 1791 : 	{
; 1792 : 		INT32 i;
; 1793 : 		fixed_t dist = INT32_MAX;

  0004b	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR _dist$3[ebp], 2147483647 ; 7fffffffH

; 1794 : 		fixed_t temp;
; 1795 : 		INT32 closestplayer = 0;

  00052	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _closestplayer$1[ebp], 0

; 1796 : 
; 1797 : 		for (i = 0; i < MAXPLAYERS; i++)

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  00060	eb 09		 jmp	 SHORT $LN4@A_1upThink
$LN2@A_1upThink:
  00062	8b 45 fc	 mov	 eax, DWORD PTR _i$4[ebp]
  00065	83 c0 01	 add	 eax, 1
  00068	89 45 fc	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@A_1upThink:
  0006b	83 7d fc 20	 cmp	 DWORD PTR _i$4[ebp], 32	; 00000020H
  0006f	7d 70		 jge	 SHORT $LN3@A_1upThink

; 1798 : 		{
; 1799 : 			if (!playeringame[i])

  00071	8b 45 fc	 mov	 eax, DWORD PTR _i$4[ebp]
  00074	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0007c	75 02		 jne	 SHORT $LN7@A_1upThink

; 1800 : 				continue;

  0007e	eb e2		 jmp	 SHORT $LN2@A_1upThink
$LN7@A_1upThink:

; 1801 : 
; 1802 : 			if (!players[i].mo)

  00080	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$4[ebp], 508
  00087	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0008e	75 02		 jne	 SHORT $LN8@A_1upThink

; 1803 : 				continue;

  00090	eb d0		 jmp	 SHORT $LN2@A_1upThink
$LN8@A_1upThink:

; 1804 : 
; 1805 : 			temp = P_AproxDistance(players[i].mo->x-actor->x, players[i].mo->y-actor->y);

  00092	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$4[ebp], 508
  00099	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0009f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a2	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000a5	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  000a8	50		 push	 eax
  000a9	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$4[ebp], 508
  000b0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  000b6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b9	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  000bc	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _P_AproxDistance
  000c5	83 c4 08	 add	 esp, 8
  000c8	89 45 f4	 mov	 DWORD PTR _temp$2[ebp], eax

; 1806 : 
; 1807 : 			if (temp < dist)

  000cb	8b 45 f4	 mov	 eax, DWORD PTR _temp$2[ebp]
  000ce	3b 45 f8	 cmp	 eax, DWORD PTR _dist$3[ebp]
  000d1	7d 0c		 jge	 SHORT $LN9@A_1upThink

; 1808 : 			{
; 1809 : 				closestplayer = i;

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _i$4[ebp]
  000d6	89 45 f0	 mov	 DWORD PTR _closestplayer$1[ebp], eax

; 1810 : 				dist = temp;

  000d9	8b 45 f4	 mov	 eax, DWORD PTR _temp$2[ebp]
  000dc	89 45 f8	 mov	 DWORD PTR _dist$3[ebp], eax
$LN9@A_1upThink:

; 1811 : 			}
; 1812 : 		}

  000df	eb 81		 jmp	 SHORT $LN2@A_1upThink
$LN3@A_1upThink:

; 1813 : 
; 1814 : 		P_SetMobjStateNF(actor, S_PLAY_BOX1A);

  000e1	6a 3a		 push	 58			; 0000003aH
  000e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  000ec	83 c4 08	 add	 esp, 8

; 1815 : 		actor->skin = &skins[players[closestplayer].skin];

  000ef	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _closestplayer$1[ebp], 508
  000f6	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR _players[eax+184], 236
  00100	81 c1 00 00 00
	00		 add	 ecx, OFFSET _skins
  00106	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00109	89 4a 64	 mov	 DWORD PTR [edx+100], ecx
$LN6@A_1upThink:

; 1816 : 	}
; 1817 : 	#else
; 1818 : 	INT32 i;
; 1819 : 	fixed_t dist = INT32_MAX;
; 1820 : 	fixed_t temp;
; 1821 : 	INT32 closestplayer = 0;
; 1822 : 
; 1823 : 	for (i = 0; i < MAXPLAYERS; i++)
; 1824 : 	{
; 1825 : 		if (!playeringame[i])
; 1826 : 			continue;
; 1827 : 
; 1828 : 		if (!players[i].mo)
; 1829 : 			continue;
; 1830 : 
; 1831 : 		temp = P_AproxDistance(players[i].mo->x-actor->x, players[i].mo->y-actor->y);
; 1832 : 
; 1833 : 		if (temp < dist)
; 1834 : 		{
; 1835 : 			closestplayer = i;
; 1836 : 			dist = temp;
; 1837 : 		}
; 1838 : 	}
; 1839 : 
; 1840 : 	P_SetMobjStateNF(actor, S_PLAY_BOX1A);
; 1841 : 	actor->skin = &skins[players[closestplayer].skin];
; 1842 : 	#endif
; 1843 : }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
_A_1upThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_PlayActiveSound
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_PlayActiveSound PROC					; COMDAT

; 5329 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5330 : 	if (actor->info->activesound)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	83 79 54 00	 cmp	 DWORD PTR [ecx+84], 0
  00016	74 19		 je	 SHORT $LN2@A_PlayActi

; 5331 : 		S_StartSound(actor, actor->info->activesound);

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00021	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _S_StartSound
  0002e	83 c4 08	 add	 esp, 8
$LN2@A_PlayActi:

; 5332 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_A_PlayActiveSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_PlayAttackSound
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_PlayAttackSound PROC					; COMDAT

; 5316 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5317 : 	if (actor->info->attacksound)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00016	74 19		 je	 SHORT $LN2@A_PlayAtta

; 5318 : 		S_StartAttackSound(actor, actor->info->attacksound);

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00021	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _S_StartAttackSound
  0002e	83 c4 08	 add	 esp, 8
$LN2@A_PlayAtta:

; 5319 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_A_PlayAttackSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_PlaySeeSound
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_PlaySeeSound PROC					; COMDAT

; 5303 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5304 : 	if (actor->info->seesound)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00016	74 19		 je	 SHORT $LN2@A_PlaySeeS

; 5305 : 		S_StartScreamSound(actor, actor->info->seesound);

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00021	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _S_StartScreamSound
  0002e	83 c4 08	 add	 esp, 8
$LN2@A_PlaySeeS:

; 5306 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_A_PlaySeeSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_LinedefExecute
_TEXT	SEGMENT
_locvar1$ = -8						; size = 4
_tagnum$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_LinedefExecute PROC					; COMDAT

; 5280 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5281 : 	INT32 tagnum;
; 5282 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5283 : 
; 5284 : 	if (locvar1 > 0)

  00011	83 7d f8 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  00015	7e 08		 jle	 SHORT $LN2@A_LinedefE

; 5285 : 		tagnum = locvar1;

  00017	8b 45 f8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR _tagnum$[ebp], eax
  0001d	eb 1b		 jmp	 SHORT $LN3@A_LinedefE
$LN2@A_LinedefE:

; 5286 : 	else
; 5287 : 		tagnum = (INT32)(1000 + (size_t)(actor->state - states));

  0001f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00022	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  00025	2d 00 00 00 00	 sub	 eax, OFFSET _states
  0002a	99		 cdq
  0002b	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00030	f7 f9		 idiv	 ecx
  00032	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  00037	89 45 fc	 mov	 DWORD PTR _tagnum$[ebp], eax
$LN3@A_LinedefE:

; 5288 : 
; 5289 : 	if (cv_debug)

  0003a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00041	74 18		 je	 SHORT $LN4@A_LinedefE

; 5290 : 		CONS_Printf("A_LinedefExecute: Running mobjtype %d's sector with tag %d\n", actor->type, tagnum);

  00043	8b 45 fc	 mov	 eax, DWORD PTR _tagnum$[ebp]
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0004a	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  0004d	52		 push	 edx
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@GFOEBPIJ@A_LinedefExecute?3?5Running?5mobjt@
  00053	e8 00 00 00 00	 call	 _CONS_Printf
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@A_LinedefE:

; 5291 : 
; 5292 : 	P_LinedefExecute(tagnum, actor, actor->subsector->sector);

  0005b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00061	8b 11		 mov	 edx, DWORD PTR [ecx]
  00063	52		 push	 edx
  00064	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00067	50		 push	 eax
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _tagnum$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _P_LinedefExecute
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5293 : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_A_LinedefExecute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Boss3TakeDamage
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_Boss3TakeDamage PROC					; COMDAT

; 5265 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5266 : 	actor->movecount = var1;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _var1
  00012	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx

; 5267 : 
; 5268 : 	if (actor->target && actor->target->spawnpoint)

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00022	74 2e		 je	 SHORT $LN2@A_Boss3Tak
  00024	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00027	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0002d	83 b9 ac 00 00
	00 00		 cmp	 DWORD PTR [ecx+172], 0
  00034	74 1c		 je	 SHORT $LN2@A_Boss3Tak

; 5269 : 		actor->threshold = actor->target->spawnpoint->extrainfo;

  00036	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00039	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0003f	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00045	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0004c	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax
$LN2@A_Boss3Tak:

; 5270 : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_A_Boss3TakeDamage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SetReactionTime
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_SetReactionTime PROC					; COMDAT

; 5250 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5251 : 	if (var1)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _var1, 0
  00010	74 11		 je	 SHORT $LN2@A_SetReact

; 5252 : 		actor->reactiontime = var2;

  00012	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _var2
  0001b	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx
  00021	eb 15		 jmp	 SHORT $LN3@A_SetReact
$LN2@A_SetReact:

; 5253 : 	else
; 5254 : 		actor->reactiontime = actor->info->reactiontime;

  00023	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00026	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0002c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002f	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00032	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax
$LN3@A_SetReact:

; 5255 : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_A_SetReactionTime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_GuardChase
_TEXT	SEGMENT
tv164 = -104						; size = 4
tv175 = -104						; size = 4
_angle$1 = -36						; size = 4
_movey$2 = -32						; size = 4
_movex$3 = -28						; size = 4
_newy$4 = -24						; size = 4
_newx$5 = -20						; size = 4
_blockdist$6 = -16					; size = 4
_player$7 = -12						; size = 4
_i$8 = -8						; size = 4
_delta$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_GuardChase PROC					; COMDAT

; 5135 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5136 : 	INT32 delta;
; 5137 : 
; 5138 : 	if (actor->reactiontime)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00013	74 15		 je	 SHORT $LN5@A_GuardCha

; 5139 : 		actor->reactiontime--;

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00024	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN5@A_GuardCha:

; 5140 : 
; 5141 : 	if (!actor->tracer && actor->threshold != 42)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00034	75 49		 jne	 SHORT $LN6@A_GuardCha
  00036	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00039	83 b8 a0 00 00
	00 2a		 cmp	 DWORD PTR [eax+160], 42	; 0000002aH
  00040	74 3d		 je	 SHORT $LN6@A_GuardCha

; 5142 : 	{
; 5143 : 		actor->threshold = 42;

  00042	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00045	c7 80 a0 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [eax+160], 42	; 0000002aH

; 5144 : 		P_SetMobjState(actor, actor->info->painstate);

  0004f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00052	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00058	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0005b	52		 push	 edx
  0005c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _P_SetMobjState
  00065	83 c4 08	 add	 esp, 8

; 5145 : 		actor->flags |= MF_ENEMY|MF_SPECIAL|MF_SHOOTABLE;

  00068	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0006e	81 c9 05 00 00
	01		 or	 ecx, 16777221		; 01000005H
  00074	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00077	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5146 : 		return;

  0007a	e9 02 04 00 00	 jmp	 $LN3@A_GuardCha
$LN6@A_GuardCha:

; 5147 : 	}
; 5148 : 
; 5149 : 	// turn towards movement direction if not there yet
; 5150 : 	if (actor->movedir < NUMDIRS)

  0007f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00082	83 b8 90 00 00
	00 08		 cmp	 DWORD PTR [eax+144], 8
  00089	73 5b		 jae	 SHORT $LN10@A_GuardCha

; 5151 : 	{
; 5152 : 		actor->angle &= (7<<29);

  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00091	81 e1 00 00 00
	e0		 and	 ecx, -536870912		; e0000000H
  00097	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0009a	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 5153 : 		delta = actor->angle - (actor->movedir << 29);

  0009d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a0	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000a6	c1 e1 1d	 shl	 ecx, 29			; 0000001dH
  000a9	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ac	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000af	2b c1		 sub	 eax, ecx
  000b1	89 45 fc	 mov	 DWORD PTR _delta$[ebp], eax

; 5154 : 
; 5155 : 		if (delta > 0)

  000b4	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  000b8	7e 14		 jle	 SHORT $LN8@A_GuardCha

; 5156 : 			actor->angle -= ANGLE_45;

  000ba	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000bd	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000c0	81 e9 00 00 00
	20		 sub	 ecx, 536870912		; 20000000H
  000c6	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c9	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  000cc	eb 18		 jmp	 SHORT $LN10@A_GuardCha
$LN8@A_GuardCha:

; 5157 : 		else if (delta < 0)

  000ce	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  000d2	7d 12		 jge	 SHORT $LN10@A_GuardCha

; 5158 : 			actor->angle += ANGLE_45;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d7	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000da	81 c1 00 00 00
	20		 add	 ecx, 536870912		; 20000000H
  000e0	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000e3	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN10@A_GuardCha:

; 5159 : 	}
; 5160 : 
; 5161 : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  000e6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e9	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000f0	74 11		 je	 SHORT $LN12@A_GuardCha
  000f2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f5	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000fb	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000fe	83 e2 04	 and	 edx, 4
  00101	75 39		 jne	 SHORT $LN11@A_GuardCha
$LN12@A_GuardCha:

; 5162 : 	{
; 5163 : 		// look for a new target
; 5164 : 		if (P_LookForPlayers(actor, true, false, 0))

  00103	6a 00		 push	 0
  00105	6a 00		 push	 0
  00107	6a 01		 push	 1
  00109	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _P_LookForPlayers
  00112	83 c4 10	 add	 esp, 16			; 00000010H
  00115	85 c0		 test	 eax, eax
  00117	74 05		 je	 SHORT $LN13@A_GuardCha

; 5165 : 			return; // got a new target

  00119	e9 63 03 00 00	 jmp	 $LN3@A_GuardCha
$LN13@A_GuardCha:

; 5166 : 
; 5167 : 		P_SetMobjStateNF(actor, actor->info->spawnstate);

  0011e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00121	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00127	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012a	52		 push	 edx
  0012b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  00134	83 c4 08	 add	 esp, 8

; 5168 : 		return;

  00137	e9 45 03 00 00	 jmp	 $LN3@A_GuardCha
$LN11@A_GuardCha:

; 5169 : 	}
; 5170 : 
; 5171 : 	// possibly choose another target
; 5172 : 	if (multiplayer && (actor->target->health <= 0 || !P_CheckSight(actor, actor->target))
; 5173 : 		&& P_LookForPlayers(actor, true, false, 0))

  0013c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00143	74 47		 je	 SHORT $LN14@A_GuardCha
  00145	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00148	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0014e	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00155	7e 1a		 jle	 SHORT $LN15@A_GuardCha
  00157	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00160	51		 push	 ecx
  00161	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 _P_CheckSight
  0016a	83 c4 08	 add	 esp, 8
  0016d	85 c0		 test	 eax, eax
  0016f	75 1b		 jne	 SHORT $LN14@A_GuardCha
$LN15@A_GuardCha:
  00171	6a 00		 push	 0
  00173	6a 00		 push	 0
  00175	6a 01		 push	 1
  00177	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 _P_LookForPlayers
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	85 c0		 test	 eax, eax
  00185	74 05		 je	 SHORT $LN14@A_GuardCha

; 5174 : 		return; // got a new target

  00187	e9 f5 02 00 00	 jmp	 $LN3@A_GuardCha
$LN14@A_GuardCha:

; 5175 : 
; 5176 : 	// chase towards player
; 5177 : 	if (--actor->movecount < 0 || !P_Move(actor, (actor->flags & MF_AMBUSH) ? actor->info->speed * 2 : actor->info->speed))

  0018c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0018f	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00195	83 e9 01	 sub	 ecx, 1
  00198	89 4d 98	 mov	 DWORD PTR tv164[ebp], ecx
  0019b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0019e	8b 45 98	 mov	 eax, DWORD PTR tv164[ebp]
  001a1	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  001a7	83 7d 98 00	 cmp	 DWORD PTR tv164[ebp], 0
  001ab	7c 41		 jl	 SHORT $LN17@A_GuardCha
  001ad	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b0	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001b3	83 e1 20	 and	 ecx, 32			; 00000020H
  001b6	74 13		 je	 SHORT $LN27@A_GuardCha
  001b8	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001bb	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  001c1	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  001c4	d1 e1		 shl	 ecx, 1
  001c6	89 4d 98	 mov	 DWORD PTR tv175[ebp], ecx
  001c9	eb 0f		 jmp	 SHORT $LN28@A_GuardCha
$LN27@A_GuardCha:
  001cb	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001ce	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  001d4	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  001d7	89 4d 98	 mov	 DWORD PTR tv175[ebp], ecx
$LN28@A_GuardCha:
  001da	8b 55 98	 mov	 edx, DWORD PTR tv175[ebp]
  001dd	52		 push	 edx
  001de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 _P_Move
  001e7	83 c4 08	 add	 esp, 8
  001ea	85 c0		 test	 eax, eax
  001ec	75 21		 jne	 SHORT $LN16@A_GuardCha
$LN17@A_GuardCha:

; 5178 : 	{
; 5179 : 		P_NewChaseDir(actor);

  001ee	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 _P_NewChaseDir
  001f7	83 c4 04	 add	 esp, 4

; 5180 : 		actor->movecount += 5; // Increase tics before change in direction allowed.

  001fa	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001fd	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00203	83 c1 05	 add	 ecx, 5
  00206	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00209	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx
$LN16@A_GuardCha:

; 5181 : 	}
; 5182 : 
; 5183 : 	if (actor->tracer && actor->tracer->type == MT_EGGSHIELD)

  0020f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00212	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00219	0f 84 62 02 00
	00		 je	 $LN3@A_GuardCha
  0021f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00222	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00228	83 79 7c 16	 cmp	 DWORD PTR [ecx+124], 22	; 00000016H
  0022c	0f 85 4f 02 00
	00		 jne	 $LN3@A_GuardCha

; 5184 : 	{
; 5185 : 		INT32 i;
; 5186 : 		player_t *player;
; 5187 : 		fixed_t blockdist;
; 5188 : 		fixed_t newx, newy;
; 5189 : 		fixed_t movex, movey;
; 5190 : 		angle_t angle;
; 5191 : 
; 5192 : 		newx = actor->x + P_ReturnThrustX(actor, actor->angle, FRACUNIT);

  00232	68 00 00 01 00	 push	 65536			; 00010000H
  00237	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0023a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0023d	51		 push	 ecx
  0023e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00241	52		 push	 edx
  00242	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00247	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0024d	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00250	89 45 ec	 mov	 DWORD PTR _newx$5[ebp], eax

; 5193 : 		newy = actor->y + P_ReturnThrustY(actor, actor->angle, FRACUNIT);

  00253	68 00 00 01 00	 push	 65536			; 00010000H
  00258	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0025b	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0025e	51		 push	 ecx
  0025f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00262	52		 push	 edx
  00263	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00268	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0026e	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00271	89 45 e8	 mov	 DWORD PTR _newy$4[ebp], eax

; 5194 : 
; 5195 : 		movex = newx - actor->tracer->x;

  00274	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00277	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0027d	8b 55 ec	 mov	 edx, DWORD PTR _newx$5[ebp]
  00280	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00283	89 55 e4	 mov	 DWORD PTR _movex$3[ebp], edx

; 5196 : 		movey = newy - actor->tracer->y;

  00286	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00289	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0028f	8b 55 e8	 mov	 edx, DWORD PTR _newy$4[ebp]
  00292	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00295	89 55 e0	 mov	 DWORD PTR _movey$2[ebp], edx

; 5197 : 
; 5198 : 		P_UnsetThingPosition(actor->tracer);

  00298	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0029b	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002a1	51		 push	 ecx
  002a2	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  002a7	83 c4 04	 add	 esp, 4

; 5199 : 		actor->tracer->x = newx;

  002aa	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ad	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002b3	8b 55 ec	 mov	 edx, DWORD PTR _newx$5[ebp]
  002b6	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 5200 : 		actor->tracer->y = newy;

  002b9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002bc	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002c2	8b 55 e8	 mov	 edx, DWORD PTR _newy$4[ebp]
  002c5	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 5201 : 		actor->tracer->z = actor->z;

  002c8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002cb	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002d1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002d4	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  002d7	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 5202 : 		actor->tracer->angle = actor->angle;

  002da	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002dd	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002e3	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002e6	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002e9	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 5203 : 		actor->tracer->floorz = actor->floorz;

  002ec	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ef	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002f5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002f8	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  002fb	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 5204 : 		actor->tracer->ceilingz = actor->ceilingz;

  002fe	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00301	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00307	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0030a	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  0030d	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 5205 : 		P_SetThingPosition(actor->tracer);

  00310	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00313	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00319	51		 push	 ecx
  0031a	e8 00 00 00 00	 call	 _P_SetThingPosition
  0031f	83 c4 04	 add	 esp, 4

; 5206 : 
; 5207 : 		// Search for players to push
; 5208 : 		for (i = 0; i < MAXPLAYERS; i++)

  00322	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  00329	eb 09		 jmp	 SHORT $LN4@A_GuardCha
$LN2@A_GuardCha:
  0032b	8b 45 f8	 mov	 eax, DWORD PTR _i$8[ebp]
  0032e	83 c0 01	 add	 eax, 1
  00331	89 45 f8	 mov	 DWORD PTR _i$8[ebp], eax
$LN4@A_GuardCha:
  00334	83 7d f8 20	 cmp	 DWORD PTR _i$8[ebp], 32	; 00000020H
  00338	0f 8d 43 01 00
	00		 jge	 $LN3@A_GuardCha

; 5209 : 		{
; 5210 : 			if (!playeringame[i])

  0033e	8b 45 f8	 mov	 eax, DWORD PTR _i$8[ebp]
  00341	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00349	75 02		 jne	 SHORT $LN19@A_GuardCha

; 5211 : 				continue;

  0034b	eb de		 jmp	 SHORT $LN2@A_GuardCha
$LN19@A_GuardCha:

; 5212 : 
; 5213 : 			player = &players[i];

  0034d	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 508
  00354	05 00 00 00 00	 add	 eax, OFFSET _players
  00359	89 45 f4	 mov	 DWORD PTR _player$7[ebp], eax

; 5214 : 
; 5215 : 			if (!player->mo)

  0035c	8b 45 f4	 mov	 eax, DWORD PTR _player$7[ebp]
  0035f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00362	75 02		 jne	 SHORT $LN20@A_GuardCha

; 5216 : 				continue;

  00364	eb c5		 jmp	 SHORT $LN2@A_GuardCha
$LN20@A_GuardCha:

; 5217 : 
; 5218 : 			if (player->mo->z > actor->tracer->z + actor->tracer->height)

  00366	8b 45 f4	 mov	 eax, DWORD PTR _player$7[ebp]
  00369	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0036e	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00374	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00377	8b 92 b0 00 00
	00		 mov	 edx, DWORD PTR [edx+176]
  0037d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00380	03 42 44	 add	 eax, DWORD PTR [edx+68]
  00383	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00386	7e 02		 jle	 SHORT $LN21@A_GuardCha

; 5219 : 				continue;

  00388	eb a1		 jmp	 SHORT $LN2@A_GuardCha
$LN21@A_GuardCha:

; 5220 : 
; 5221 : 			if (player->mo->z + player->mo->height < actor->tracer->z)

  0038a	8b 45 f4	 mov	 eax, DWORD PTR _player$7[ebp]
  0038d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038f	8b 55 f4	 mov	 edx, DWORD PTR _player$7[ebp]
  00392	8b 02		 mov	 eax, DWORD PTR [edx]
  00394	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00397	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  0039a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0039d	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  003a3	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  003a6	7d 02		 jge	 SHORT $LN22@A_GuardCha

; 5222 : 				continue;

  003a8	eb 81		 jmp	 SHORT $LN2@A_GuardCha
$LN22@A_GuardCha:

; 5223 : 
; 5224 : 			blockdist = actor->tracer->radius + player->mo->radius;

  003aa	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003ad	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  003b3	8b 55 f4	 mov	 edx, DWORD PTR _player$7[ebp]
  003b6	8b 02		 mov	 eax, DWORD PTR [edx]
  003b8	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  003bb	03 48 40	 add	 ecx, DWORD PTR [eax+64]
  003be	89 4d f0	 mov	 DWORD PTR _blockdist$6[ebp], ecx

; 5225 : 
; 5226 : 			if (abs(actor->tracer->x - player->mo->x) >= blockdist || abs(actor->tracer->y - player->mo->y) >= blockdist)

  003c1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003c4	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  003ca	8b 55 f4	 mov	 edx, DWORD PTR _player$7[ebp]
  003cd	8b 02		 mov	 eax, DWORD PTR [edx]
  003cf	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  003d2	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  003d5	51		 push	 ecx
  003d6	e8 00 00 00 00	 call	 _abs
  003db	83 c4 04	 add	 esp, 4
  003de	3b 45 f0	 cmp	 eax, DWORD PTR _blockdist$6[ebp]
  003e1	7d 22		 jge	 SHORT $LN24@A_GuardCha
  003e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003e6	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  003ec	8b 55 f4	 mov	 edx, DWORD PTR _player$7[ebp]
  003ef	8b 02		 mov	 eax, DWORD PTR [edx]
  003f1	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  003f4	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  003f7	51		 push	 ecx
  003f8	e8 00 00 00 00	 call	 _abs
  003fd	83 c4 04	 add	 esp, 4
  00400	3b 45 f0	 cmp	 eax, DWORD PTR _blockdist$6[ebp]
  00403	7c 05		 jl	 SHORT $LN23@A_GuardCha
$LN24@A_GuardCha:

; 5227 : 				continue; // didn't hit it

  00405	e9 21 ff ff ff	 jmp	 $LN2@A_GuardCha
$LN23@A_GuardCha:

; 5228 : 
; 5229 : 			angle = R_PointToAngle2(actor->tracer->x, actor->tracer->y, player->mo->x, player->mo->y) - actor->tracer->angle;

  0040a	8b 45 f4	 mov	 eax, DWORD PTR _player$7[ebp]
  0040d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0040f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00412	52		 push	 edx
  00413	8b 45 f4	 mov	 eax, DWORD PTR _player$7[ebp]
  00416	8b 08		 mov	 ecx, DWORD PTR [eax]
  00418	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0041b	52		 push	 edx
  0041c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0041f	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00425	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00428	52		 push	 edx
  00429	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0042c	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00432	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00435	52		 push	 edx
  00436	e8 00 00 00 00	 call	 _R_PointToAngle2
  0043b	83 c4 10	 add	 esp, 16			; 00000010H
  0043e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00441	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00447	2b 42 24	 sub	 eax, DWORD PTR [edx+36]
  0044a	89 45 dc	 mov	 DWORD PTR _angle$1[ebp], eax

; 5230 : 
; 5231 : 			if (angle > ANGLE_90 && angle < ANGLE_270)

  0044d	81 7d dc 00 00
	00 40		 cmp	 DWORD PTR _angle$1[ebp], 1073741824 ; 40000000H
  00454	76 0e		 jbe	 SHORT $LN25@A_GuardCha
  00456	81 7d dc 00 00
	00 c0		 cmp	 DWORD PTR _angle$1[ebp], -1073741824 ; c0000000H
  0045d	73 05		 jae	 SHORT $LN25@A_GuardCha

; 5232 : 				continue;

  0045f	e9 c7 fe ff ff	 jmp	 $LN2@A_GuardCha
$LN25@A_GuardCha:

; 5233 : 
; 5234 : 			// Blocked by the shield
; 5235 : 			player->mo->momx = movex;

  00464	8b 45 f4	 mov	 eax, DWORD PTR _player$7[ebp]
  00467	8b 08		 mov	 ecx, DWORD PTR [eax]
  00469	8b 55 e4	 mov	 edx, DWORD PTR _movex$3[ebp]
  0046c	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 5236 : 			player->mo->momy = movey;

  0046f	8b 45 f4	 mov	 eax, DWORD PTR _player$7[ebp]
  00472	8b 08		 mov	 ecx, DWORD PTR [eax]
  00474	8b 55 e0	 mov	 edx, DWORD PTR _movey$2[ebp]
  00477	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 5237 : 			return;

  0047a	eb 05		 jmp	 SHORT $LN3@A_GuardCha

; 5238 : 		}

  0047c	e9 aa fe ff ff	 jmp	 $LN2@A_GuardCha
$LN3@A_GuardCha:

; 5239 : 	}
; 5240 : }

  00481	5f		 pop	 edi
  00482	5e		 pop	 esi
  00483	5b		 pop	 ebx
  00484	8b e5		 mov	 esp, ebp
  00486	5d		 pop	 ebp
  00487	c3		 ret	 0
_A_GuardChase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BuzzFly
_TEXT	SEGMENT
_mf$1 = -12						; size = 4
_realspeed$2 = -8					; size = 4
_dist$3 = -4						; size = 4
_actor$ = 8						; size = 4
_A_BuzzFly PROC						; COMDAT

; 5048 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5049 : 	if (actor->flags & MF_AMBUSH)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0000f	83 e1 20	 and	 ecx, 32			; 00000020H
  00012	74 05		 je	 SHORT $LN2@A_BuzzFly

; 5050 : 		return;

  00014	e9 cd 03 00 00	 jmp	 $LN21@A_BuzzFly
$LN2@A_BuzzFly:

; 5051 : 
; 5052 : 	if (actor->reactiontime)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00023	74 15		 je	 SHORT $LN3@A_BuzzFly

; 5053 : 		actor->reactiontime--;

  00025	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00028	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0002e	83 e9 01	 sub	 ecx, 1
  00031	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00034	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN3@A_BuzzFly:

; 5054 : 
; 5055 : 	// modify target threshold
; 5056 : 	if (actor->threshold)

  0003a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003d	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00044	74 42		 je	 SHORT $LN6@A_BuzzFly

; 5057 : 	{
; 5058 : 		if (!actor->target || actor->target->health <= 0)

  00046	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00049	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00050	74 12		 je	 SHORT $LN7@A_BuzzFly
  00052	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00055	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005b	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00062	7f 0f		 jg	 SHORT $LN5@A_BuzzFly
$LN7@A_BuzzFly:

; 5059 : 			actor->threshold = 0;

  00064	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00067	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+160], 0
  00071	eb 15		 jmp	 SHORT $LN6@A_BuzzFly
$LN5@A_BuzzFly:

; 5060 : 		else
; 5061 : 			actor->threshold--;

  00073	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00076	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0007c	83 e9 01	 sub	 ecx, 1
  0007f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00082	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx
$LN6@A_BuzzFly:

; 5062 : 	}
; 5063 : 
; 5064 : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  00088	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008b	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00092	74 11		 je	 SHORT $LN9@A_BuzzFly
  00094	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00097	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0009d	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000a0	83 e2 04	 and	 edx, 4
  000a3	75 57		 jne	 SHORT $LN8@A_BuzzFly
$LN9@A_BuzzFly:

; 5065 : 	{
; 5066 : 		// look for a new target
; 5067 : 		if (P_LookForPlayers(actor, true, false, 0))

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	6a 01		 push	 1
  000ab	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _P_LookForPlayers
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
  000b7	85 c0		 test	 eax, eax
  000b9	74 05		 je	 SHORT $LN10@A_BuzzFly

; 5068 : 			return; // got a new target

  000bb	e9 26 03 00 00	 jmp	 $LN21@A_BuzzFly
$LN10@A_BuzzFly:

; 5069 : 
; 5070 : 		actor->momz = actor->momy = actor->momx = 0;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c3	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000cd	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  000d4	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d7	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0

; 5071 : 		P_SetMobjState(actor, actor->info->spawnstate);

  000de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ea	52		 push	 edx
  000eb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 _P_SetMobjState
  000f4	83 c4 08	 add	 esp, 8

; 5072 : 		return;

  000f7	e9 ea 02 00 00	 jmp	 $LN21@A_BuzzFly
$LN8@A_BuzzFly:

; 5073 : 	}
; 5074 : 
; 5075 : 	// turn towards movement direction if not there yet
; 5076 : 	actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y);

  000fc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ff	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00105	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00108	52		 push	 edx
  00109	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00112	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00115	52		 push	 edx
  00116	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00119	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0011c	51		 push	 ecx
  0011d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00120	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _R_PointToAngle2
  00129	83 c4 10	 add	 esp, 16			; 00000010H
  0012c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0012f	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 5077 : 
; 5078 : 	if (actor->target->health <= 0 || (!actor->threshold && !P_CheckSight(actor, actor->target)))

  00132	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00135	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0013b	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00142	7e 2a		 jle	 SHORT $LN12@A_BuzzFly
  00144	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00147	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  0014e	0f 85 86 00 00
	00		 jne	 $LN11@A_BuzzFly
  00154	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00157	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0015d	51		 push	 ecx
  0015e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00161	52		 push	 edx
  00162	e8 00 00 00 00	 call	 _P_CheckSight
  00167	83 c4 08	 add	 esp, 8
  0016a	85 c0		 test	 eax, eax
  0016c	75 6c		 jne	 SHORT $LN11@A_BuzzFly
$LN12@A_BuzzFly:

; 5079 : 	{
; 5080 : 		if ((multiplayer || netgame) && P_LookForPlayers(actor, true, false, 3072*FRACUNIT))

  0016e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00175	75 09		 jne	 SHORT $LN14@A_BuzzFly
  00177	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0017e	74 1e		 je	 SHORT $LN13@A_BuzzFly
$LN14@A_BuzzFly:
  00180	68 00 00 00 0c	 push	 201326592		; 0c000000H
  00185	6a 00		 push	 0
  00187	6a 01		 push	 1
  00189	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 _P_LookForPlayers
  00192	83 c4 10	 add	 esp, 16			; 00000010H
  00195	85 c0		 test	 eax, eax
  00197	74 05		 je	 SHORT $LN13@A_BuzzFly

; 5081 : 			return; // got a new target

  00199	e9 48 02 00 00	 jmp	 $LN21@A_BuzzFly
$LN13@A_BuzzFly:

; 5082 : 
; 5083 : 		actor->momx = actor->momy = actor->momz = 0;

  0019e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a1	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  001a8	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001ab	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  001b2	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001b5	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 5084 : 		P_SetMobjState(actor, actor->info->spawnstate); // Go back to looking around

  001bc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001bf	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001c5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c8	52		 push	 edx
  001c9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 _P_SetMobjState
  001d2	83 c4 08	 add	 esp, 8

; 5085 : 		return;

  001d5	e9 0c 02 00 00	 jmp	 $LN21@A_BuzzFly
$LN11@A_BuzzFly:

; 5086 : 	}
; 5087 : 
; 5088 : 	// If the player is over 3072 fracunits away, then look for another player
; 5089 : 	if (P_AproxDistance(P_AproxDistance(actor->target->x - actor->x, actor->target->y - actor->y),
; 5090 : 		actor->target->z - actor->z) > 3072*FRACUNIT)

  001da	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001dd	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001e3	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001e6	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  001e9	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  001ec	50		 push	 eax
  001ed	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001f0	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  001f6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f9	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  001fc	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  001ff	51		 push	 ecx
  00200	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00203	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00209	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0020c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0020f	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00212	52		 push	 edx
  00213	e8 00 00 00 00	 call	 _P_AproxDistance
  00218	83 c4 08	 add	 esp, 8
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 _P_AproxDistance
  00221	83 c4 08	 add	 esp, 8
  00224	3d 00 00 00 0c	 cmp	 eax, 201326592		; 0c000000H
  00229	7e 2c		 jle	 SHORT $LN15@A_BuzzFly

; 5091 : 	{
; 5092 : 		if (multiplayer || netgame)

  0022b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00232	75 09		 jne	 SHORT $LN17@A_BuzzFly
  00234	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0023b	74 15		 je	 SHORT $LN16@A_BuzzFly
$LN17@A_BuzzFly:

; 5093 : 			P_LookForPlayers(actor, true, false, 3072*FRACUNIT); // maybe get a new target

  0023d	68 00 00 00 0c	 push	 201326592		; 0c000000H
  00242	6a 00		 push	 0
  00244	6a 01		 push	 1
  00246	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 _P_LookForPlayers
  0024f	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@A_BuzzFly:

; 5094 : 
; 5095 : 		return;

  00252	e9 8f 01 00 00	 jmp	 $LN21@A_BuzzFly
$LN15@A_BuzzFly:

; 5096 : 	}
; 5097 : 
; 5098 : 	// chase towards player
; 5099 : 	{
; 5100 : 		INT32 dist, realspeed;
; 5101 : 		const fixed_t mf = 5*(FRACUNIT/4);

  00257	c7 45 f4 00 40
	01 00		 mov	 DWORD PTR _mf$1[ebp], 81920 ; 00014000H

; 5102 : 
; 5103 : 		if (ultimatemode)

  0025e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00265	85 c0		 test	 eax, eax
  00267	74 1e		 je	 SHORT $LN18@A_BuzzFly

; 5104 : 			realspeed = FixedMul(actor->info->speed,mf);

  00269	8b 45 f4	 mov	 eax, DWORD PTR _mf$1[ebp]
  0026c	50		 push	 eax
  0026d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00270	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00276	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 _FixedMul
  0027f	83 c4 08	 add	 esp, 8
  00282	89 45 f8	 mov	 DWORD PTR _realspeed$2[ebp], eax
  00285	eb 0f		 jmp	 SHORT $LN19@A_BuzzFly
$LN18@A_BuzzFly:

; 5105 : 		else
; 5106 : 			realspeed = actor->info->speed;

  00287	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0028a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00290	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00293	89 55 f8	 mov	 DWORD PTR _realspeed$2[ebp], edx
$LN19@A_BuzzFly:

; 5107 : 
; 5108 : 		dist = P_AproxDistance(P_AproxDistance(actor->target->x - actor->x,

  00296	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00299	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0029f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002a2	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  002a5	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  002a8	50		 push	 eax
  002a9	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002ac	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  002b2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002b5	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  002b8	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  002bb	51		 push	 ecx
  002bc	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002bf	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  002c5	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002c8	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  002cb	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  002ce	52		 push	 edx
  002cf	e8 00 00 00 00	 call	 _P_AproxDistance
  002d4	83 c4 08	 add	 esp, 8
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 _P_AproxDistance
  002dd	83 c4 08	 add	 esp, 8
  002e0	89 45 fc	 mov	 DWORD PTR _dist$3[ebp], eax

; 5109 : 			actor->target->y - actor->y), actor->target->z - actor->z);
; 5110 : 
; 5111 : 		if (dist < 1)

  002e3	83 7d fc 01	 cmp	 DWORD PTR _dist$3[ebp], 1
  002e7	7d 07		 jge	 SHORT $LN20@A_BuzzFly

; 5112 : 			dist = 1;

  002e9	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dist$3[ebp], 1
$LN20@A_BuzzFly:

; 5113 : 
; 5114 : 		actor->momx = FixedMul(FixedDiv(actor->target->x - actor->x, dist), realspeed);

  002f0	8b 45 f8	 mov	 eax, DWORD PTR _realspeed$2[ebp]
  002f3	50		 push	 eax
  002f4	8b 4d fc	 mov	 ecx, DWORD PTR _dist$3[ebp]
  002f7	51		 push	 ecx
  002f8	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002fb	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00301	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00304	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00307	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0030a	52		 push	 edx
  0030b	e8 00 00 00 00	 call	 _FixedDiv
  00310	83 c4 08	 add	 esp, 8
  00313	50		 push	 eax
  00314	e8 00 00 00 00	 call	 _FixedMul
  00319	83 c4 08	 add	 esp, 8
  0031c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0031f	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 5115 : 		actor->momy = FixedMul(FixedDiv(actor->target->y - actor->y, dist), realspeed);

  00322	8b 45 f8	 mov	 eax, DWORD PTR _realspeed$2[ebp]
  00325	50		 push	 eax
  00326	8b 4d fc	 mov	 ecx, DWORD PTR _dist$3[ebp]
  00329	51		 push	 ecx
  0032a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0032d	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00333	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00336	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00339	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  0033c	52		 push	 edx
  0033d	e8 00 00 00 00	 call	 _FixedDiv
  00342	83 c4 08	 add	 esp, 8
  00345	50		 push	 eax
  00346	e8 00 00 00 00	 call	 _FixedMul
  0034b	83 c4 08	 add	 esp, 8
  0034e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00351	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 5116 : 		actor->momz = FixedMul(FixedDiv(actor->target->z - actor->z, dist), realspeed);

  00354	8b 45 f8	 mov	 eax, DWORD PTR _realspeed$2[ebp]
  00357	50		 push	 eax
  00358	8b 4d fc	 mov	 ecx, DWORD PTR _dist$3[ebp]
  0035b	51		 push	 ecx
  0035c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0035f	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00365	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00368	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0036b	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  0036e	52		 push	 edx
  0036f	e8 00 00 00 00	 call	 _FixedDiv
  00374	83 c4 08	 add	 esp, 8
  00377	50		 push	 eax
  00378	e8 00 00 00 00	 call	 _FixedMul
  0037d	83 c4 08	 add	 esp, 8
  00380	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00383	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 5117 : 
; 5118 : 		if (actor->z+actor->momz >= actor->waterbottom && actor->watertop > actor->floorz
; 5119 : 			&& actor->z+actor->momz > actor->watertop - 256*FRACUNIT)

  00386	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00389	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0038c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0038f	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  00392	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00395	3b 88 c4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+196]
  0039b	7c 49		 jl	 SHORT $LN21@A_BuzzFly
  0039d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003a0	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  003a3	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  003a9	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  003ac	7e 38		 jle	 SHORT $LN21@A_BuzzFly
  003ae	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003b1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003b4	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003b7	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  003ba	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003bd	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  003c3	81 ea 00 00 00
	01		 sub	 edx, 16777216		; 01000000H
  003c9	3b ca		 cmp	 ecx, edx
  003cb	7e 19		 jle	 SHORT $LN21@A_BuzzFly

; 5120 : 		{
; 5121 : 			actor->momz = 0;

  003cd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003d0	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 5122 : 			actor->z = actor->watertop;

  003d7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003da	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  003dd	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  003e3	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN21@A_BuzzFly:

; 5123 : 		}
; 5124 : 	}
; 5125 : }

  003e6	5f		 pop	 edi
  003e7	5e		 pop	 esi
  003e8	5b		 pop	 ebx
  003e9	8b e5		 mov	 esp, ebp
  003eb	5d		 pop	 ebp
  003ec	c3		 ret	 0
_A_BuzzFly ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SparkFollow
_TEXT	SEGMENT
_fa$1 = -4						; size = 4
_actor$ = 8						; size = 4
_A_SparkFollow PROC					; COMDAT

; 5018 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5019 : 	if (actor->state == &states[S_DISS])

  00009	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0000e	69 c8 4f 06 00
	00		 imul	 ecx, eax, 1615
  00014	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0001a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0001d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00020	75 05		 jne	 SHORT $LN2@A_SparkFol

; 5020 : 		return;

  00022	e9 46 01 00 00	 jmp	 $LN1@A_SparkFol
$LN2@A_SparkFol:

; 5021 : 
; 5022 : 	if ((!actor->target || (actor->target->health <= 0))
; 5023 : 		|| (actor->target->player && !actor->target->player->powers[pw_super]))

  00027	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002a	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00031	74 42		 je	 SHORT $LN4@A_SparkFol
  00033	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00036	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0003c	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00043	7e 30		 jle	 SHORT $LN4@A_SparkFol
  00045	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00048	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0004e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00055	74 34		 je	 SHORT $LN3@A_SparkFol
  00057	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00060	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	6b c8 0f	 imul	 ecx, eax, 15
  0006e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00073	75 16		 jne	 SHORT $LN3@A_SparkFol
$LN4@A_SparkFol:

; 5024 : 	{
; 5025 : 		P_SetMobjState(actor, S_DISS);

  00075	68 4f 06 00 00	 push	 1615			; 0000064fH
  0007a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _P_SetMobjState
  00083	83 c4 08	 add	 esp, 8

; 5026 : 		return;

  00086	e9 e2 00 00 00	 jmp	 $LN1@A_SparkFol
$LN3@A_SparkFol:

; 5027 : 	}
; 5028 : 
; 5029 : 	actor->angle += FixedAngle(actor->info->damage*FRACUNIT);

  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00094	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00097	c1 e2 10	 shl	 edx, 16			; 00000010H
  0009a	52		 push	 edx
  0009b	e8 00 00 00 00	 call	 _FixedAngle
  000a0	83 c4 04	 add	 esp, 4
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000a6	03 41 24	 add	 eax, DWORD PTR [ecx+36]
  000a9	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ac	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 5030 : 	P_UnsetThingPosition(actor);

  000af	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  000b8	83 c4 04	 add	 esp, 4

; 5031 : 	{
; 5032 : 		const angle_t fa = actor->angle>>ANGLETOFINESHIFT;

  000bb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000be	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000c1	c1 e9 13	 shr	 ecx, 19			; 00000013H
  000c4	89 4d fc	 mov	 DWORD PTR _fa$1[ebp], ecx

; 5033 : 		actor->x = actor->target->x + FixedMul(FINECOSINE(fa),actor->info->speed);

  000c7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ca	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000d3	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  000d9	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000dc	50		 push	 eax
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _fa$1[ebp]
  000e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  000e6	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _FixedMul
  000ef	83 c4 08	 add	 esp, 8
  000f2	03 46 10	 add	 eax, DWORD PTR [esi+16]
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000f8	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 5034 : 		actor->y = actor->target->y + FixedMul(FINESINE(fa),actor->info->speed);

  000fb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fe	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  00104	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00107	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0010d	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00110	50		 push	 eax
  00111	8b 4d fc	 mov	 ecx, DWORD PTR _fa$1[ebp]
  00114	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  0011b	52		 push	 edx
  0011c	e8 00 00 00 00	 call	 _FixedMul
  00121	83 c4 08	 add	 esp, 8
  00124	03 46 14	 add	 eax, DWORD PTR [esi+20]
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0012a	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 5035 : 		actor->z = actor->target->z + FixedDiv(actor->target->height,3*FRACUNIT) - actor->height;

  0012d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00130	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  00136	68 00 00 03 00	 push	 196608			; 00030000H
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0013e	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00144	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 _FixedDiv
  0014d	83 c4 08	 add	 esp, 8
  00150	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00153	03 c8		 add	 ecx, eax
  00155	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00158	2b 4a 44	 sub	 ecx, DWORD PTR [edx+68]
  0015b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015e	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 5036 : 	}
; 5037 : 	P_SetThingPosition(actor);

  00161	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 _P_SetThingPosition
  0016a	83 c4 04	 add	 esp, 4
$LN1@A_SparkFol:

; 5038 : }

  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
_A_SparkFollow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BossFireShot
_TEXT	SEGMENT
tv67 = -88						; size = 4
_locvar2$ = -20						; size = 4
_locvar1$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_BossFireShot PROC					; COMDAT

; 1561 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1562 : 	fixed_t x, y, z;
; 1563 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f0	 mov	 DWORD PTR _locvar1$[ebp], eax

; 1564 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 ec	 mov	 DWORD PTR _locvar2$[ebp], eax

; 1565 : 
; 1566 : 	if (!actor->target)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00023	75 05		 jne	 SHORT $LN4@A_BossFire

; 1567 : 		return;

  00025	e9 bb 02 00 00	 jmp	 $LN1@A_BossFire
$LN4@A_BossFire:

; 1568 : 
; 1569 : 	A_FaceTarget(actor);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _A_FaceTarget
  00033	83 c4 04	 add	 esp, 4

; 1570 : 
; 1571 : 	switch (locvar2)

  00036	8b 45 ec	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00039	89 45 a8	 mov	 DWORD PTR tv67[ebp], eax
  0003c	83 7d a8 05	 cmp	 DWORD PTR tv67[ebp], 5
  00040	0f 87 53 02 00
	00		 ja	 $LN11@A_BossFire
  00046	8b 4d a8	 mov	 ecx, DWORD PTR tv67[ebp]
  00049	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@A_BossFire[ecx*4]
$LN5@A_BossFire:

; 1572 : 	{
; 1573 : 		case 0:
; 1574 : 			x = actor->x + P_ReturnThrustX(actor, actor->angle-ANGLE_90, 43*FRACUNIT);

  00050	68 00 00 2b 00	 push	 2818048			; 002b0000H
  00055	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00058	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0005b	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00061	51		 push	 ecx
  00062	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 _P_ReturnThrustX
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00071	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00074	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1575 : 			y = actor->y + P_ReturnThrustY(actor, actor->angle-ANGLE_90, 43*FRACUNIT);

  00077	68 00 00 2b 00	 push	 2818048			; 002b0000H
  0007c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00082	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00088	51		 push	 ecx
  00089	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00098	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  0009b	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1576 : 			z = actor->z + 48*FRACUNIT;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a4	81 c1 00 00 30
	00		 add	 ecx, 3145728		; 00300000H
  000aa	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 1577 : 			break;

  000ad	e9 0d 02 00 00	 jmp	 $LN2@A_BossFire
$LN6@A_BossFire:

; 1578 : 		case 1:
; 1579 : 			x = actor->x + P_ReturnThrustX(actor, actor->angle+ANGLE_90, 43*FRACUNIT);

  000b2	68 00 00 2b 00	 push	 2818048			; 002b0000H
  000b7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ba	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000bd	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  000c3	51		 push	 ecx
  000c4	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _P_ReturnThrustX
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000d3	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  000d6	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1580 : 			y = actor->y + P_ReturnThrustY(actor, actor->angle+ANGLE_90, 43*FRACUNIT);

  000d9	68 00 00 2b 00	 push	 2818048			; 002b0000H
  000de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e1	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000e4	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  000ea	51		 push	 ecx
  000eb	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 _P_ReturnThrustY
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000fa	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  000fd	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1581 : 			z = actor->z + 48*FRACUNIT;

  00100	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00103	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00106	81 c1 00 00 30
	00		 add	 ecx, 3145728		; 00300000H
  0010c	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 1582 : 			break;

  0010f	e9 ab 01 00 00	 jmp	 $LN2@A_BossFire
$LN7@A_BossFire:

; 1583 : 		case 2:
; 1584 : 			x = actor->x + P_ReturnThrustX(actor, actor->angle-ANGLE_90, 56*FRACUNIT);

  00114	68 00 00 38 00	 push	 3670016			; 00380000H
  00119	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0011c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0011f	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00125	51		 push	 ecx
  00126	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00129	52		 push	 edx
  0012a	e8 00 00 00 00	 call	 _P_ReturnThrustX
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00135	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00138	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1585 : 			y = actor->y + P_ReturnThrustY(actor, actor->angle-ANGLE_90, 56*FRACUNIT);

  0013b	68 00 00 38 00	 push	 3670016			; 00380000H
  00140	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00143	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00146	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  0014c	51		 push	 ecx
  0014d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH
  00159	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0015c	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  0015f	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1586 : 			z = actor->z + 42*FRACUNIT;

  00162	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00165	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00168	81 c1 00 00 2a
	00		 add	 ecx, 2752512		; 002a0000H
  0016e	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 1587 : 			break;

  00171	e9 49 01 00 00	 jmp	 $LN2@A_BossFire
$LN8@A_BossFire:

; 1588 : 		case 3:
; 1589 : 			x = actor->x + P_ReturnThrustX(actor, actor->angle-ANGLE_90, 58*FRACUNIT);

  00176	68 00 00 3a 00	 push	 3801088			; 003a0000H
  0017b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0017e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00181	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00187	51		 push	 ecx
  00188	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0018b	52		 push	 edx
  0018c	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00191	83 c4 0c	 add	 esp, 12			; 0000000cH
  00194	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00197	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  0019a	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1590 : 			y = actor->y + P_ReturnThrustY(actor, actor->angle-ANGLE_90, 58*FRACUNIT);

  0019d	68 00 00 3a 00	 push	 3801088			; 003a0000H
  001a2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a5	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001a8	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  001ae	51		 push	 ecx
  001af	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001b2	52		 push	 edx
  001b3	e8 00 00 00 00	 call	 _P_ReturnThrustY
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bb	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001be	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  001c1	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1591 : 			z = actor->z + 30*FRACUNIT;

  001c4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001c7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001ca	81 c1 00 00 1e
	00		 add	 ecx, 1966080		; 001e0000H
  001d0	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 1592 : 			break;

  001d3	e9 e7 00 00 00	 jmp	 $LN2@A_BossFire
$LN9@A_BossFire:

; 1593 : 		case 4:
; 1594 : 			x = actor->x + P_ReturnThrustX(actor, actor->angle+ANGLE_90, 56*FRACUNIT);

  001d8	68 00 00 38 00	 push	 3670016			; 00380000H
  001dd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001e0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001e3	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  001e9	51		 push	 ecx
  001ea	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001ed	52		 push	 edx
  001ee	e8 00 00 00 00	 call	 _P_ReturnThrustX
  001f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f6	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001f9	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  001fc	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1595 : 			y = actor->y + P_ReturnThrustY(actor, actor->angle+ANGLE_90, 56*FRACUNIT);

  001ff	68 00 00 38 00	 push	 3670016			; 00380000H
  00204	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00207	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0020a	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  00210	51		 push	 ecx
  00211	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00214	52		 push	 edx
  00215	e8 00 00 00 00	 call	 _P_ReturnThrustY
  0021a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00220	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00223	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1596 : 			z = actor->z + 42*FRACUNIT;

  00226	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00229	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0022c	81 c1 00 00 2a
	00		 add	 ecx, 2752512		; 002a0000H
  00232	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 1597 : 			break;

  00235	e9 85 00 00 00	 jmp	 $LN2@A_BossFire
$LN10@A_BossFire:

; 1598 : 		case 5:
; 1599 : 			x = actor->x + P_ReturnThrustX(actor, actor->angle+ANGLE_90, 58*FRACUNIT);

  0023a	68 00 00 3a 00	 push	 3801088			; 003a0000H
  0023f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00242	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00245	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  0024b	51		 push	 ecx
  0024c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0024f	52		 push	 edx
  00250	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00255	83 c4 0c	 add	 esp, 12			; 0000000cH
  00258	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0025b	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  0025e	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1600 : 			y = actor->y + P_ReturnThrustY(actor, actor->angle+ANGLE_90, 58*FRACUNIT);

  00261	68 00 00 3a 00	 push	 3801088			; 003a0000H
  00266	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00269	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0026c	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  00272	51		 push	 ecx
  00273	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00276	52		 push	 edx
  00277	e8 00 00 00 00	 call	 _P_ReturnThrustY
  0027c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00282	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00285	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1601 : 			z = actor->z + 30*FRACUNIT;

  00288	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0028b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0028e	81 c1 00 00 1e
	00		 add	 ecx, 1966080		; 001e0000H
  00294	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 1602 : 			break;

  00297	eb 26		 jmp	 SHORT $LN2@A_BossFire
$LN11@A_BossFire:

; 1603 : 		default:
; 1604 : 			x = actor->x;

  00299	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0029c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0029f	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1605 : 			y = actor->y;

  002a2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002a5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002a8	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 1606 : 			z = actor->z + actor->height/2;

  002ab	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ae	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  002b1	99		 cdq
  002b2	2b c2		 sub	 eax, edx
  002b4	d1 f8		 sar	 eax, 1
  002b6	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002b9	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  002bc	89 45 f4	 mov	 DWORD PTR _z$[ebp], eax
$LN2@A_BossFire:

; 1607 : 			break;
; 1608 : 	}
; 1609 : 
; 1610 : 	P_SpawnXYZMissile(actor, actor->target, locvar1, x, y, z);

  002bf	8b 45 f4	 mov	 eax, DWORD PTR _z$[ebp]
  002c2	50		 push	 eax
  002c3	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  002c6	51		 push	 ecx
  002c7	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  002ca	52		 push	 edx
  002cb	8b 45 f0	 mov	 eax, DWORD PTR _locvar1$[ebp]
  002ce	50		 push	 eax
  002cf	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002d2	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  002d8	52		 push	 edx
  002d9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  002e2	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@A_BossFire:

; 1611 : }

  002e5	5f		 pop	 edi
  002e6	5e		 pop	 esi
  002e7	5b		 pop	 ebx
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c3		 ret	 0
$LN13@A_BossFire:
  002ec	00 00 00 00	 DD	 $LN5@A_BossFire
  002f0	00 00 00 00	 DD	 $LN6@A_BossFire
  002f4	00 00 00 00	 DD	 $LN7@A_BossFire
  002f8	00 00 00 00	 DD	 $LN8@A_BossFire
  002fc	00 00 00 00	 DD	 $LN9@A_BossFire
  00300	00 00 00 00	 DD	 $LN10@A_BossFire
_A_BossFireShot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SuperFireShot
_TEXT	SEGMENT
_locvar2$ = -16						; size = 4
_locvar1$ = -12						; size = 4
_mo$ = -8						; size = 4
_z$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SuperFireShot PROC					; COMDAT

; 1520 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1521 : 	fixed_t z;
; 1522 : 	mobj_t *mo;
; 1523 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f4	 mov	 DWORD PTR _locvar1$[ebp], eax

; 1524 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f0	 mov	 DWORD PTR _locvar2$[ebp], eax

; 1525 : 
; 1526 : 	if (!actor->target)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00023	75 05		 jne	 SHORT $LN2@A_SuperFir

; 1527 : 		return;

  00025	e9 b8 00 00 00	 jmp	 $LN6@A_SuperFir
$LN2@A_SuperFir:

; 1528 : 
; 1529 : 	A_FaceTarget(actor);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _A_FaceTarget
  00033	83 c4 04	 add	 esp, 4

; 1530 : 
; 1531 : 	z = actor->z + 48*FRACUNIT + locvar2*FRACUNIT;

  00036	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00039	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003c	8b 55 f0	 mov	 edx, DWORD PTR _locvar2$[ebp]
  0003f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00042	8d 84 11 00 00
	30 00		 lea	 eax, DWORD PTR [ecx+edx+3145728]
  00049	89 45 fc	 mov	 DWORD PTR _z$[ebp], eax

; 1532 : 
; 1533 : 	mo = P_SpawnXYZMissile(actor, actor->target, locvar1, actor->x, actor->y, z);

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00053	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00056	52		 push	 edx
  00057	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005d	51		 push	 ecx
  0005e	8b 55 f4	 mov	 edx, DWORD PTR _locvar1$[ebp]
  00061	52		 push	 edx
  00062	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00065	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0006b	51		 push	 ecx
  0006c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  00075	83 c4 18	 add	 esp, 24			; 00000018H
  00078	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 1534 : 
; 1535 : 	if (mo)

  0007b	83 7d f8 00	 cmp	 DWORD PTR _mo$[ebp], 0
  0007f	74 18		 je	 SHORT $LN3@A_SuperFir

; 1536 : 		mo->flags2 |= MF2_SUPERFIRE;

  00081	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00084	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0008a	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  00090	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00093	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN3@A_SuperFir:

; 1537 : 
; 1538 : 	if (!(actor->flags & MF_BOSS))

  00099	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0009f	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  000a5	75 3b		 jne	 SHORT $LN6@A_SuperFir

; 1539 : 	{
; 1540 : 		if (ultimatemode)

  000a7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  000ae	85 c0		 test	 eax, eax
  000b0	74 18		 je	 SHORT $LN5@A_SuperFir

; 1541 : 			actor->reactiontime = actor->info->reactiontime*TICRATE;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000bb	6b 51 14 23	 imul	 edx, DWORD PTR [ecx+20], 35
  000bf	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c2	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  000c8	eb 18		 jmp	 SHORT $LN6@A_SuperFir
$LN5@A_SuperFir:

; 1542 : 		else
; 1543 : 			actor->reactiontime = actor->info->reactiontime*TICRATE*2;

  000ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cd	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d3	6b 51 14 23	 imul	 edx, DWORD PTR [ecx+20], 35
  000d7	d1 e2		 shl	 edx, 1
  000d9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000dc	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
$LN6@A_SuperFir:

; 1544 : 	}
; 1545 : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
_A_SuperFireShot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_FireShot
_TEXT	SEGMENT
_locvar2$ = -12						; size = 4
_locvar1$ = -8						; size = 4
_z$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_FireShot PROC					; COMDAT

; 1489 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1490 : 	fixed_t z;
; 1491 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 1492 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f4	 mov	 DWORD PTR _locvar2$[ebp], eax

; 1493 : 
; 1494 : 	if (!actor->target)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00023	75 05		 jne	 SHORT $LN2@A_FireShot

; 1495 : 		return;

  00025	e9 97 00 00 00	 jmp	 $LN5@A_FireShot
$LN2@A_FireShot:

; 1496 : 
; 1497 : 	A_FaceTarget(actor);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _A_FaceTarget
  00033	83 c4 04	 add	 esp, 4

; 1498 : 
; 1499 : 	z = actor->z + 48*FRACUNIT + locvar2*FRACUNIT;

  00036	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00039	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003c	8b 55 f4	 mov	 edx, DWORD PTR _locvar2$[ebp]
  0003f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00042	8d 84 11 00 00
	30 00		 lea	 eax, DWORD PTR [ecx+edx+3145728]
  00049	89 45 fc	 mov	 DWORD PTR _z$[ebp], eax

; 1500 : 
; 1501 : 	P_SpawnXYZMissile(actor, actor->target, locvar1, actor->x, actor->y, z);

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00053	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00056	52		 push	 edx
  00057	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005d	51		 push	 ecx
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _locvar1$[ebp]
  00061	52		 push	 edx
  00062	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00065	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0006b	51		 push	 ecx
  0006c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  00075	83 c4 18	 add	 esp, 24			; 00000018H

; 1502 : 
; 1503 : 	if (!(actor->flags & MF_BOSS))

  00078	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0007e	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00084	75 3b		 jne	 SHORT $LN5@A_FireShot

; 1504 : 	{
; 1505 : 		if (ultimatemode)

  00086	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  0008d	85 c0		 test	 eax, eax
  0008f	74 18		 je	 SHORT $LN4@A_FireShot

; 1506 : 			actor->reactiontime = actor->info->reactiontime*TICRATE;

  00091	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00094	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0009a	6b 51 14 23	 imul	 edx, DWORD PTR [ecx+20], 35
  0009e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a1	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  000a7	eb 18		 jmp	 SHORT $LN5@A_FireShot
$LN4@A_FireShot:

; 1507 : 		else
; 1508 : 			actor->reactiontime = actor->info->reactiontime*TICRATE*2;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ac	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000b2	6b 51 14 23	 imul	 edx, DWORD PTR [ecx+20], 35
  000b6	d1 e2		 shl	 edx, 1
  000b8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000bb	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
$LN5@A_FireShot:

; 1509 : 	}
; 1510 : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
_A_FireShot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_CannonLook
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_CannonLook PROC					; COMDAT

; 1477 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1478 : 	P_LookForPlayers(actor, true, false , 16384*FRACUNIT);

  00009	68 00 00 00 40	 push	 1073741824		; 40000000H
  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _P_LookForPlayers
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 1479 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_A_CannonLook ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_LobShot
_TEXT	SEGMENT
_airtime$ = -36						; size = 4
_horizontal$ = -32					; size = 4
_vertical$ = -28					; size = 4
_dist$ = -24						; size = 4
_an$ = -20						; size = 4
_hitspot$ = -16						; size = 4
_shot$ = -12						; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_LobShot PROC						; COMDAT

; 1398 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1399 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 1400 : 	INT32 locvar2 = var2 >> 16;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	c1 f8 10	 sar	 eax, 16			; 00000010H
  00019	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 1401 : 	mobj_t *shot, *hitspot;
; 1402 : 	angle_t an;
; 1403 : 	fixed_t dist;
; 1404 : 	fixed_t vertical, horizontal;
; 1405 : 	fixed_t airtime = var2 & 65535;

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00021	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00026	89 45 dc	 mov	 DWORD PTR _airtime$[ebp], eax

; 1406 : 
; 1407 : 	if (!actor->target)

  00029	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00033	75 05		 jne	 SHORT $LN2@A_LobShot

; 1408 : 		return;

  00035	e9 f4 01 00 00	 jmp	 $LN6@A_LobShot
$LN2@A_LobShot:

; 1409 : 
; 1410 : 	A_FaceTarget(actor);

  0003a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _A_FaceTarget
  00043	83 c4 04	 add	 esp, 4

; 1411 : 
; 1412 : 	shot = P_SpawnMobj(actor->x, actor->y, actor->z + locvar2*FRACUNIT, locvar1);

  00046	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _locvar2$[ebp]
  0004d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00050	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00053	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  00056	51		 push	 ecx
  00057	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005d	51		 push	 ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _P_SpawnMobj
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	89 45 f4	 mov	 DWORD PTR _shot$[ebp], eax

; 1413 : 
; 1414 : 	// Keep track of where it's going to land
; 1415 : 	hitspot = P_SpawnMobj(actor->target->x&(64*FRACUNIT-1), actor->target->y&(64*FRACUNIT-1), actor->target->subsector->sector->floorheight, MT_DISS);

  00070	68 05 01 00 00	 push	 261			; 00000105H
  00075	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00078	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0007e	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00081	8b 02		 mov	 eax, DWORD PTR [edx]
  00083	8b 08		 mov	 ecx, DWORD PTR [eax]
  00085	51		 push	 ecx
  00086	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00089	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0008f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00092	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  00098	51		 push	 ecx
  00099	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0009c	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  000a2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a5	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 _P_SpawnMobj
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	89 45 f0	 mov	 DWORD PTR _hitspot$[ebp], eax

; 1416 : 	hitspot->tics = airtime;

  000b7	8b 45 f0	 mov	 eax, DWORD PTR _hitspot$[ebp]
  000ba	8b 4d dc	 mov	 ecx, DWORD PTR _airtime$[ebp]
  000bd	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 1417 : 	P_SetTarget(&shot->tracer, hitspot);

  000c0	8b 45 f0	 mov	 eax, DWORD PTR _hitspot$[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR _shot$[ebp]
  000c7	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 _P_SetTarget
  000d3	83 c4 08	 add	 esp, 8

; 1418 : 
; 1419 : 	P_SetTarget(&shot->target, actor); // where it came from

  000d6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d f4	 mov	 ecx, DWORD PTR _shot$[ebp]
  000dd	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _P_SetTarget
  000e9	83 c4 08	 add	 esp, 8

; 1420 : 
; 1421 : 	shot->angle = an = actor->angle;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ef	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000f2	89 4d ec	 mov	 DWORD PTR _an$[ebp], ecx
  000f5	8b 55 f4	 mov	 edx, DWORD PTR _shot$[ebp]
  000f8	8b 45 ec	 mov	 eax, DWORD PTR _an$[ebp]
  000fb	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 1422 : 	an >>= ANGLETOFINESHIFT;

  000fe	8b 45 ec	 mov	 eax, DWORD PTR _an$[ebp]
  00101	c1 e8 13	 shr	 eax, 19			; 00000013H
  00104	89 45 ec	 mov	 DWORD PTR _an$[ebp], eax

; 1423 : 
; 1424 : 	dist = P_AproxDistance(actor->target->x - shot->x, actor->target->y - shot->y);

  00107	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00110	8b 55 f4	 mov	 edx, DWORD PTR _shot$[ebp]
  00113	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00116	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00119	50		 push	 eax
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0011d	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00123	8b 45 f4	 mov	 eax, DWORD PTR _shot$[ebp]
  00126	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00129	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 _P_AproxDistance
  00132	83 c4 08	 add	 esp, 8
  00135	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 1425 : 
; 1426 : 	horizontal = dist / airtime;

  00138	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  0013b	99		 cdq
  0013c	f7 7d dc	 idiv	 DWORD PTR _airtime$[ebp]
  0013f	89 45 e0	 mov	 DWORD PTR _horizontal$[ebp], eax

; 1427 : 	vertical = FIXEDSCALE((gravity*airtime)/2, shot->scale);

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  00147	0f af 45 dc	 imul	 eax, DWORD PTR _airtime$[ebp]
  0014b	99		 cdq
  0014c	2b c2		 sub	 eax, edx
  0014e	d1 f8		 sar	 eax, 1
  00150	50		 push	 eax
  00151	68 00 00 64 00	 push	 6553600			; 00640000H
  00156	8b 45 f4	 mov	 eax, DWORD PTR _shot$[ebp]
  00159	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00160	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 _FixedDiv
  00169	83 c4 08	 add	 esp, 8
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _FixedMul
  00172	83 c4 08	 add	 esp, 8
  00175	89 45 e4	 mov	 DWORD PTR _vertical$[ebp], eax

; 1428 : 
; 1429 : 	shot->momx = FixedMul(horizontal, FINECOSINE(an));

  00178	8b 45 ec	 mov	 eax, DWORD PTR _an$[ebp]
  0017b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00181	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00184	52		 push	 edx
  00185	8b 45 e0	 mov	 eax, DWORD PTR _horizontal$[ebp]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _FixedMul
  0018e	83 c4 08	 add	 esp, 8
  00191	8b 4d f4	 mov	 ecx, DWORD PTR _shot$[ebp]
  00194	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1430 : 	shot->momy = FixedMul(horizontal, FINESINE(an));

  00197	8b 45 ec	 mov	 eax, DWORD PTR _an$[ebp]
  0019a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  001a1	51		 push	 ecx
  001a2	8b 55 e0	 mov	 edx, DWORD PTR _horizontal$[ebp]
  001a5	52		 push	 edx
  001a6	e8 00 00 00 00	 call	 _FixedMul
  001ab	83 c4 08	 add	 esp, 8
  001ae	8b 4d f4	 mov	 ecx, DWORD PTR _shot$[ebp]
  001b1	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1431 : 	shot->momz = vertical;

  001b4	8b 45 f4	 mov	 eax, DWORD PTR _shot$[ebp]
  001b7	8b 4d e4	 mov	 ecx, DWORD PTR _vertical$[ebp]
  001ba	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 1432 : 
; 1433 : /* Try to adjust when destination is not the same height
; 1434 : 	if (actor->z != actor->target->z)
; 1435 : 	{
; 1436 : 		fixed_t launchhyp;
; 1437 : 		fixed_t diff;
; 1438 : 		fixed_t orig;
; 1439 : 
; 1440 : 		diff = actor->z - actor->target->z;
; 1441 : 		{
; 1442 : 			launchhyp = P_AproxDistance(horizontal, vertical);
; 1443 : 
; 1444 : 			orig = FixedMul(FixedDiv(vertical, horizontal), diff);
; 1445 : 
; 1446 : 			CONS_Printf("orig: %d\n", (orig)>>FRACBITS);
; 1447 : 
; 1448 : 			horizontal = dist / airtime;
; 1449 : 			vertical = (gravity*airtime)/2;
; 1450 : 		}
; 1451 : 		dist -= orig;
; 1452 : 		shot->momx = FixedMul(horizontal, FINECOSINE(an));
; 1453 : 		shot->momy = FixedMul(horizontal, FINESINE(an));
; 1454 : 		shot->momz = vertical;
; 1455 : */
; 1456 : 
; 1457 : 	if (shot->info->seesound)

  001bd	8b 45 f4	 mov	 eax, DWORD PTR _shot$[ebp]
  001c0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001c6	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  001ca	74 19		 je	 SHORT $LN3@A_LobShot

; 1458 : 		S_StartSound(shot, shot->info->seesound);

  001cc	8b 45 f4	 mov	 eax, DWORD PTR _shot$[ebp]
  001cf	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001d5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001d8	52		 push	 edx
  001d9	8b 45 f4	 mov	 eax, DWORD PTR _shot$[ebp]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 _S_StartSound
  001e2	83 c4 08	 add	 esp, 8
$LN3@A_LobShot:

; 1459 : 
; 1460 : 	if (!(actor->flags & MF_BOSS))

  001e5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001e8	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001eb	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  001f1	75 3b		 jne	 SHORT $LN6@A_LobShot

; 1461 : 	{
; 1462 : 		if (ultimatemode)

  001f3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  001fa	85 c0		 test	 eax, eax
  001fc	74 18		 je	 SHORT $LN5@A_LobShot

; 1463 : 			actor->reactiontime = actor->info->reactiontime*TICRATE;

  001fe	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00201	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00207	6b 51 14 23	 imul	 edx, DWORD PTR [ecx+20], 35
  0020b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0020e	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  00214	eb 18		 jmp	 SHORT $LN6@A_LobShot
$LN5@A_LobShot:

; 1464 : 		else
; 1465 : 			actor->reactiontime = actor->info->reactiontime*TICRATE*2;

  00216	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00219	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0021f	6b 51 14 23	 imul	 edx, DWORD PTR [ecx+20], 35
  00223	d1 e2		 shl	 edx, 1
  00225	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00228	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
$LN6@A_LobShot:

; 1466 : 	}
; 1467 : }

  0022e	5f		 pop	 edi
  0022f	5e		 pop	 esi
  00230	5b		 pop	 ebx
  00231	8b e5		 mov	 esp, ebp
  00233	5d		 pop	 ebp
  00234	c3		 ret	 0
_A_LobShot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SkullAttack
_TEXT	SEGMENT
_locvar1$ = -20						; size = 4
_speed$ = -16						; size = 4
_dist$ = -12						; size = 4
_an$ = -8						; size = 4
_dest$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SkullAttack PROC					; COMDAT

; 1626 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1627 : 	mobj_t *dest;
; 1628 : 	angle_t an;
; 1629 : 	INT32 dist;
; 1630 : 	INT32 speed;
; 1631 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 ec	 mov	 DWORD PTR _locvar1$[ebp], eax

; 1632 : 	//INT32 locvar2 = var2;
; 1633 : 
; 1634 : 	if (!actor->target)

  00011	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00014	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0001b	75 05		 jne	 SHORT $LN2@A_SkullAtt

; 1635 : 		return;

  0001d	e9 6a 01 00 00	 jmp	 $LN10@A_SkullAtt
$LN2@A_SkullAtt:

; 1636 : 
; 1637 : 	speed = SKULLSPEED;

  00022	c7 45 f0 00 00
	14 00		 mov	 DWORD PTR _speed$[ebp], 1310720 ; 00140000H

; 1638 : 
; 1639 : 	dest = actor->target;

  00029	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00032	89 4d fc	 mov	 DWORD PTR _dest$[ebp], ecx

; 1640 : 	actor->flags2 |= MF2_SKULLFLY;

  00035	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00038	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0003e	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00044	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00047	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 1641 : 	if (actor->info->activesound)

  0004d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00050	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00056	83 79 54 00	 cmp	 DWORD PTR [ecx+84], 0
  0005a	74 19		 je	 SHORT $LN3@A_SkullAtt

; 1642 : 		S_StartSound(actor, actor->info->activesound);

  0005c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00065	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00068	52		 push	 edx
  00069	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _S_StartSound
  00072	83 c4 08	 add	 esp, 8
$LN3@A_SkullAtt:

; 1643 : 	A_FaceTarget(actor);

  00075	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _A_FaceTarget
  0007e	83 c4 04	 add	 esp, 4

; 1644 : 
; 1645 : 	if (locvar1 == 1)

  00081	83 7d ec 01	 cmp	 DWORD PTR _locvar1$[ebp], 1
  00085	75 14		 jne	 SHORT $LN4@A_SkullAtt

; 1646 : 		actor->angle += ANGLE_180;

  00087	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0008d	81 e9 00 00 00
	80		 sub	 ecx, -2147483648	; 80000000H
  00093	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00096	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  00099	eb 39		 jmp	 SHORT $LN8@A_SkullAtt
$LN4@A_SkullAtt:

; 1647 : 	else if (locvar1 == 2)

  0009b	83 7d ec 02	 cmp	 DWORD PTR _locvar1$[ebp], 2
  0009f	75 33		 jne	 SHORT $LN8@A_SkullAtt

; 1648 : 	{
; 1649 : 		if (P_Random() & 1)

  000a1	e8 00 00 00 00	 call	 _P_Random
  000a6	0f b6 c0	 movzx	 eax, al
  000a9	83 e0 01	 and	 eax, 1
  000ac	74 14		 je	 SHORT $LN7@A_SkullAtt

; 1650 : 			actor->angle += ANGLE_90;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b1	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000b4	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  000ba	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000bd	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  000c0	eb 12		 jmp	 SHORT $LN8@A_SkullAtt
$LN7@A_SkullAtt:

; 1651 : 		else
; 1652 : 			actor->angle -= ANGLE_90;

  000c2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c5	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000c8	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  000ce	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d1	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN8@A_SkullAtt:

; 1653 : 	}
; 1654 : 
; 1655 : 	an = actor->angle >> ANGLETOFINESHIFT;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d7	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000da	c1 e9 13	 shr	 ecx, 19			; 00000013H
  000dd	89 4d f8	 mov	 DWORD PTR _an$[ebp], ecx

; 1656 : 
; 1657 : 	actor->momx = FixedMul(speed, FINECOSINE(an));

  000e0	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  000e9	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000ec	52		 push	 edx
  000ed	8b 45 f0	 mov	 eax, DWORD PTR _speed$[ebp]
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 _FixedMul
  000f6	83 c4 08	 add	 esp, 8
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000fc	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1658 : 	actor->momy = FixedMul(speed, FINESINE(an));

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  00102	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00109	51		 push	 ecx
  0010a	8b 55 f0	 mov	 edx, DWORD PTR _speed$[ebp]
  0010d	52		 push	 edx
  0010e	e8 00 00 00 00	 call	 _FixedMul
  00113	83 c4 08	 add	 esp, 8
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00119	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1659 : 	dist = P_AproxDistance(dest->x - actor->x, dest->y - actor->y);

  0011c	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00122	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00125	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00128	52		 push	 edx
  00129	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  0012c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0012f	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00132	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 _P_AproxDistance
  0013b	83 c4 08	 add	 esp, 8
  0013e	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 1660 : 	dist = dist / speed;

  00141	8b 45 f4	 mov	 eax, DWORD PTR _dist$[ebp]
  00144	99		 cdq
  00145	f7 7d f0	 idiv	 DWORD PTR _speed$[ebp]
  00148	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 1661 : 
; 1662 : 	if (dist < 1)

  0014b	83 7d f4 01	 cmp	 DWORD PTR _dist$[ebp], 1
  0014f	7d 07		 jge	 SHORT $LN9@A_SkullAtt

; 1663 : 		dist = 1;

  00151	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN9@A_SkullAtt:

; 1664 : 
; 1665 : 	actor->momz = (dest->z + (dest->height>>1) - actor->z) / dist;

  00158	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  0015b	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0015e	d1 f9		 sar	 ecx, 1
  00160	8b 55 fc	 mov	 edx, DWORD PTR _dest$[ebp]
  00163	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00166	03 c1		 add	 eax, ecx
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0016b	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  0016e	99		 cdq
  0016f	f7 7d f4	 idiv	 DWORD PTR _dist$[ebp]
  00172	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00175	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 1666 : 
; 1667 : 	if (locvar1 == 1)

  00178	83 7d ec 01	 cmp	 DWORD PTR _locvar1$[ebp], 1
  0017c	75 0e		 jne	 SHORT $LN10@A_SkullAtt

; 1668 : 		actor->momz = -actor->momz;

  0017e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00181	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00184	f7 d9		 neg	 ecx
  00186	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00189	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN10@A_SkullAtt:

; 1669 : }

  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi
  0018e	5b		 pop	 ebx
  0018f	8b e5		 mov	 esp, ebp
  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
_A_SkullAttack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SkimChase
_TEXT	SEGMENT
tv199 = -72						; size = 4
_delta$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SkimChase PROC					; COMDAT

; 1294 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1295 : 	INT32 delta;
; 1296 : 
; 1297 : 	if (actor->reactiontime)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00013	74 15		 je	 SHORT $LN2@A_SkimChas

; 1298 : 		actor->reactiontime--;

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00024	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN2@A_SkimChas:

; 1299 : 
; 1300 : 	// modify target threshold
; 1301 : 	if (actor->threshold)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00034	74 42		 je	 SHORT $LN5@A_SkimChas

; 1302 : 	{
; 1303 : 		if (!actor->target || actor->target->health <= 0)

  00036	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00039	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00040	74 12		 je	 SHORT $LN6@A_SkimChas
  00042	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00045	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0004b	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00052	7f 0f		 jg	 SHORT $LN4@A_SkimChas
$LN6@A_SkimChas:

; 1304 : 			actor->threshold = 0;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+160], 0
  00061	eb 15		 jmp	 SHORT $LN5@A_SkimChas
$LN4@A_SkimChas:

; 1305 : 		else
; 1306 : 			actor->threshold--;

  00063	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00066	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0006c	83 e9 01	 sub	 ecx, 1
  0006f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00072	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx
$LN5@A_SkimChas:

; 1307 : 	}
; 1308 : 
; 1309 : 	// turn towards movement direction if not there yet
; 1310 : 	if (actor->movedir < NUMDIRS)

  00078	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007b	83 b8 90 00 00
	00 08		 cmp	 DWORD PTR [eax+144], 8
  00082	73 5b		 jae	 SHORT $LN10@A_SkimChas

; 1311 : 	{
; 1312 : 		actor->angle &= (7<<29);

  00084	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00087	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0008a	81 e1 00 00 00
	e0		 and	 ecx, -536870912		; e0000000H
  00090	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00093	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 1313 : 		delta = actor->angle - (actor->movedir << 29);

  00096	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00099	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0009f	c1 e1 1d	 shl	 ecx, 29			; 0000001dH
  000a2	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a5	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000a8	2b c1		 sub	 eax, ecx
  000aa	89 45 fc	 mov	 DWORD PTR _delta$[ebp], eax

; 1314 : 
; 1315 : 		if (delta > 0)

  000ad	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  000b1	7e 14		 jle	 SHORT $LN8@A_SkimChas

; 1316 : 			actor->angle -= ANGLE_45;

  000b3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b6	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000b9	81 e9 00 00 00
	20		 sub	 ecx, 536870912		; 20000000H
  000bf	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c2	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  000c5	eb 18		 jmp	 SHORT $LN10@A_SkimChas
$LN8@A_SkimChas:

; 1317 : 		else if (delta < 0)

  000c7	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  000cb	7d 12		 jge	 SHORT $LN10@A_SkimChas

; 1318 : 			actor->angle += ANGLE_45;

  000cd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000d3	81 c1 00 00 00
	20		 add	 ecx, 536870912		; 20000000H
  000d9	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000dc	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN10@A_SkimChas:

; 1319 : 	}
; 1320 : 
; 1321 : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  000df	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e2	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000e9	74 11		 je	 SHORT $LN12@A_SkimChas
  000eb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ee	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000f4	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000f7	83 e2 04	 and	 edx, 4
  000fa	75 17		 jne	 SHORT $LN11@A_SkimChas
$LN12@A_SkimChas:

; 1322 : 	{
; 1323 : 		// look for a new target
; 1324 : 		P_LookForPlayers(actor, true, false, 0);

  000fc	6a 00		 push	 0
  000fe	6a 00		 push	 0
  00100	6a 01		 push	 1
  00102	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _P_LookForPlayers
  0010b	83 c4 10	 add	 esp, 16			; 00000010H

; 1325 : 
; 1326 : 		// the spawnstate for skims already calls this function so just return either way
; 1327 : 		// without changing state
; 1328 : 		return;

  0010e	e9 9f 01 00 00	 jmp	 $LN21@A_SkimChas
$LN11@A_SkimChas:

; 1329 : 	}
; 1330 : 
; 1331 : 	// do not attack twice in a row
; 1332 : 	if (actor->flags2 & MF2_JUSTATTACKED)

  00113	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00116	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0011c	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00122	74 23		 je	 SHORT $LN13@A_SkimChas

; 1333 : 	{
; 1334 : 		actor->flags &= ~MF2_JUSTATTACKED;

  00124	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00127	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0012a	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00130	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00133	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1335 : 		P_NewChaseDir(actor);

  00136	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _P_NewChaseDir
  0013f	83 c4 04	 add	 esp, 4

; 1336 : 		return;

  00142	e9 6b 01 00 00	 jmp	 $LN21@A_SkimChas
$LN13@A_SkimChas:

; 1337 : 	}
; 1338 : 
; 1339 : 	// check for melee attack
; 1340 : 	if (actor->info->meleestate && P_CheckMeleeRange(actor))

  00147	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00150	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00154	74 56		 je	 SHORT $LN14@A_SkimChas
  00156	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 _P_CheckMeleeRange
  0015f	83 c4 04	 add	 esp, 4
  00162	85 c0		 test	 eax, eax
  00164	74 46		 je	 SHORT $LN14@A_SkimChas

; 1341 : 	{
; 1342 : 		if (actor->info->attacksound)

  00166	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00169	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0016f	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00173	74 19		 je	 SHORT $LN15@A_SkimChas

; 1343 : 			S_StartAttackSound(actor, actor->info->attacksound);

  00175	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00178	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0017e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00181	52		 push	 edx
  00182	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 _S_StartAttackSound
  0018b	83 c4 08	 add	 esp, 8
$LN15@A_SkimChas:

; 1344 : 
; 1345 : 		P_SetMobjState(actor, actor->info->meleestate);

  0018e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00191	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00197	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0019a	52		 push	 edx
  0019b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _P_SetMobjState
  001a4	83 c4 08	 add	 esp, 8

; 1346 : 		return;

  001a7	e9 06 01 00 00	 jmp	 $LN21@A_SkimChas
$LN14@A_SkimChas:

; 1347 : 	}
; 1348 : 
; 1349 : 	// check for missile attack
; 1350 : 	if (actor->info->missilestate)

  001ac	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001af	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001b5	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  001b9	74 54		 je	 SHORT $nomissile$24

; 1351 : 	{
; 1352 : 		if (actor->movecount || !P_CheckMissileRange(actor))

  001bb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001be	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  001c5	75 10		 jne	 SHORT $LN18@A_SkimChas
  001c7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 _P_CheckMissileRange
  001d0	83 c4 04	 add	 esp, 4
  001d3	85 c0		 test	 eax, eax
  001d5	75 02		 jne	 SHORT $LN17@A_SkimChas
$LN18@A_SkimChas:

; 1353 : 			goto nomissile;

  001d7	eb 36		 jmp	 SHORT $nomissile$24
$LN17@A_SkimChas:

; 1354 : 
; 1355 : 		P_SetMobjState(actor, actor->info->missilestate);

  001d9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001dc	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001e2	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001e5	52		 push	 edx
  001e6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 _P_SetMobjState
  001ef	83 c4 08	 add	 esp, 8

; 1356 : 		actor->flags2 |= MF2_JUSTATTACKED;

  001f2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  001fb	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00201	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00204	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 1357 : 		return;

  0020a	e9 a3 00 00 00	 jmp	 $LN21@A_SkimChas
$nomissile$24:

; 1358 : 	}
; 1359 : 
; 1360 : nomissile:
; 1361 : 	// possibly choose another target
; 1362 : 	if (multiplayer && !actor->threshold && (actor->target->health <= 0 || !P_CheckSight(actor, actor->target))
; 1363 : 		&& P_LookForPlayers(actor, true, false, 0))

  0020f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00216	74 50		 je	 SHORT $LN19@A_SkimChas
  00218	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0021b	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00222	75 44		 jne	 SHORT $LN19@A_SkimChas
  00224	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00227	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0022d	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00234	7e 1a		 jle	 SHORT $LN20@A_SkimChas
  00236	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00239	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0023f	51		 push	 ecx
  00240	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00243	52		 push	 edx
  00244	e8 00 00 00 00	 call	 _P_CheckSight
  00249	83 c4 08	 add	 esp, 8
  0024c	85 c0		 test	 eax, eax
  0024e	75 18		 jne	 SHORT $LN19@A_SkimChas
$LN20@A_SkimChas:
  00250	6a 00		 push	 0
  00252	6a 00		 push	 0
  00254	6a 01		 push	 1
  00256	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _P_LookForPlayers
  0025f	83 c4 10	 add	 esp, 16			; 00000010H
  00262	85 c0		 test	 eax, eax
  00264	74 02		 je	 SHORT $LN19@A_SkimChas

; 1364 : 		return; // got a new target

  00266	eb 4a		 jmp	 SHORT $LN21@A_SkimChas
$LN19@A_SkimChas:

; 1365 : 
; 1366 : 	// chase towards player
; 1367 : 	if (--actor->movecount < 0 || !P_Move(actor, actor->info->speed))

  00268	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0026b	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00271	83 e9 01	 sub	 ecx, 1
  00274	89 4d b8	 mov	 DWORD PTR tv199[ebp], ecx
  00277	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0027a	8b 45 b8	 mov	 eax, DWORD PTR tv199[ebp]
  0027d	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  00283	83 7d b8 00	 cmp	 DWORD PTR tv199[ebp], 0
  00287	7c 1d		 jl	 SHORT $LN22@A_SkimChas
  00289	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0028c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00292	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00295	52		 push	 edx
  00296	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 _P_Move
  0029f	83 c4 08	 add	 esp, 8
  002a2	85 c0		 test	 eax, eax
  002a4	75 0c		 jne	 SHORT $LN21@A_SkimChas
$LN22@A_SkimChas:

; 1368 : 		P_NewChaseDir(actor);

  002a6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002a9	50		 push	 eax
  002aa	e8 00 00 00 00	 call	 _P_NewChaseDir
  002af	83 c4 04	 add	 esp, 4
$LN21@A_SkimChas:

; 1369 : }

  002b2	5f		 pop	 edi
  002b3	5e		 pop	 esi
  002b4	5b		 pop	 ebx
  002b5	8b e5		 mov	 esp, ebp
  002b7	5d		 pop	 ebp
  002b8	c3		 ret	 0
_A_SkimChase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_VultureCheck
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_VultureCheck PROC					; COMDAT

; 1273 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1274 : 	if (actor->momx || actor->momy)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00010	75 09		 jne	 SHORT $LN3@A_VultureC
  00012	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00015	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00019	74 02		 je	 SHORT $LN2@A_VultureC
$LN3@A_VultureC:

; 1275 : 		return;

  0001b	eb 4b		 jmp	 SHORT $LN4@A_VultureC
$LN2@A_VultureC:

; 1276 : 
; 1277 : 	actor->flags &= ~MF_NOGRAVITY; // Fall down

  0001d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00020	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00023	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00029	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002c	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1278 : 
; 1279 : 	if (actor->z <= actor->floorz)

  0002f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00035	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00038	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  0003b	7f 2b		 jg	 SHORT $LN4@A_VultureC

; 1280 : 	{
; 1281 : 		actor->angle -= ANGLE_180; // turn around

  0003d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00040	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00043	81 e9 00 00 00
	80		 sub	 ecx, -2147483648	; 80000000H
  00049	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004c	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 1282 : 		P_SetMobjState(actor, actor->info->spawnstate);

  0004f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00052	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00058	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005b	52		 push	 edx
  0005c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _P_SetMobjState
  00065	83 c4 08	 add	 esp, 8
$LN4@A_VultureC:

; 1283 : 	}
; 1284 : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_A_VultureCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_VultureVtol
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_VultureVtol PROC					; COMDAT

; 1241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1242 : 	if (!actor->target)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	75 05		 jne	 SHORT $LN2@A_VultureV

; 1243 : 		return;

  00015	e9 0a 01 00 00	 jmp	 $LN6@A_VultureV
$LN2@A_VultureV:

; 1244 : 
; 1245 : 	actor->flags |= MF_NOGRAVITY;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00020	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00026	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00029	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1246 : 	actor->flags |= MF_FLOAT;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00032	81 c9 00 40 00
	00		 or	 ecx, 16384		; 00004000H
  00038	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003b	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1247 : 
; 1248 : 	A_FaceTarget(actor);

  0003e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _A_FaceTarget
  00047	83 c4 04	 add	 esp, 4

; 1249 : 
; 1250 : 	S_StopSound(actor);

  0004a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _S_StopSound
  00053	83 c4 04	 add	 esp, 4

; 1251 : 
; 1252 : 	if (actor->z < actor->target->z+(actor->target->height/4) && actor->z + actor->height < actor->ceilingz)

  00056	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00059	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00062	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00068	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0006b	99		 cdq
  0006c	83 e2 03	 and	 edx, 3
  0006f	03 c2		 add	 eax, edx
  00071	c1 f8 02	 sar	 eax, 2
  00074	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00077	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0007a	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0007d	7d 23		 jge	 SHORT $LN3@A_VultureV
  0007f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00082	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00085	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00088	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00091	7d 0f		 jge	 SHORT $LN3@A_VultureV

; 1253 : 		actor->momz = 2*FRACUNIT;

  00093	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00096	c7 40 50 00 00
	02 00		 mov	 DWORD PTR [eax+80], 131072 ; 00020000H
  0009d	e9 82 00 00 00	 jmp	 $LN6@A_VultureV
$LN3@A_VultureV:

; 1254 : 	else if (actor->z > (actor->target->z+(actor->target->height/4)*3) && actor->z > actor->floorz)

  000a2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a5	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000ab	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ae	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  000b4	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000b7	99		 cdq
  000b8	83 e2 03	 and	 edx, 3
  000bb	03 c2		 add	 eax, edx
  000bd	c1 f8 02	 sar	 eax, 2
  000c0	6b d0 03	 imul	 edx, eax, 3
  000c3	03 51 18	 add	 edx, DWORD PTR [ecx+24]
  000c6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c9	39 50 18	 cmp	 DWORD PTR [eax+24], edx
  000cc	7e 1a		 jle	 SHORT $LN5@A_VultureV
  000ce	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000d4	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000d7	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  000da	7e 0c		 jle	 SHORT $LN5@A_VultureV

; 1255 : 		actor->momz = -2*FRACUNIT;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000df	c7 40 50 00 00
	fe ff		 mov	 DWORD PTR [eax+80], -131072 ; fffe0000H
  000e6	eb 3c		 jmp	 SHORT $LN6@A_VultureV
$LN5@A_VultureV:

; 1256 : 	else
; 1257 : 	{
; 1258 : 		// Attack!
; 1259 : 		actor->momz = 0;

  000e8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000eb	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 1260 : 		P_SetMobjState(actor, actor->info->missilestate);

  000f2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000fb	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  000fe	52		 push	 edx
  000ff	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _P_SetMobjState
  00108	83 c4 08	 add	 esp, 8

; 1261 : 		S_StartSound(actor, actor->info->activesound);

  0010b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00114	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00117	52		 push	 edx
  00118	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _S_StartSound
  00121	83 c4 08	 add	 esp, 8
$LN6@A_VultureV:

; 1262 : 	}
; 1263 : }

  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
_A_VultureVtol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SharpSpin
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_SharpSpin PROC					; COMDAT

; 1210 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1211 : 	if (!actor->health)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00013	75 1e		 jne	 SHORT $LN2@A_SharpSpi

; 1212 : 	{
; 1213 : 		P_SetMobjState(actor, actor->info->deathstate);

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0001e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00021	52		 push	 edx
  00022	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _P_SetMobjState
  0002b	83 c4 08	 add	 esp, 8

; 1214 : 		return;

  0002e	e9 0c 01 00 00	 jmp	 $LN4@A_SharpSpi
$LN2@A_SharpSpi:

; 1215 : 	}
; 1216 : 
; 1217 : 	if (actor->threshold && actor->target)

  00033	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00036	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  0003d	0f 84 82 00 00
	00		 je	 $LN3@A_SharpSpi
  00043	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00046	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0004d	74 76		 je	 SHORT $LN3@A_SharpSpi

; 1218 : 	{
; 1219 : 		actor->angle += ANGLE_22h;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00052	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00055	81 c1 00 00 00
	10		 add	 ecx, 268435456		; 10000000H
  0005b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0005e	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 1220 : 		P_Thrust(actor, R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y), actor->info->speed*FRACUNIT);

  00061	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00064	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0006a	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0006d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00070	52		 push	 edx
  00071	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00074	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0007a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0007d	52		 push	 edx
  0007e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00081	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00087	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008a	52		 push	 edx
  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00091	51		 push	 ecx
  00092	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00095	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _R_PointToAngle2
  0009e	83 c4 10	 add	 esp, 16			; 00000010H
  000a1	50		 push	 eax
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 _P_Thrust
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1221 : 		actor->threshold--;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b1	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  000b7	83 e9 01	 sub	 ecx, 1
  000ba	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000bd	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 1222 : 	}

  000c3	eb 7a		 jmp	 SHORT $LN4@A_SharpSpi
$LN3@A_SharpSpi:

; 1223 : 	else
; 1224 : 	{
; 1225 : 		actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y);

  000c5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c8	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000ce	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000d1	52		 push	 edx
  000d2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d5	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000db	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000de	52		 push	 edx
  000df	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000e5	51		 push	 ecx
  000e6	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000e9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _R_PointToAngle2
  000f2	83 c4 10	 add	 esp, 16			; 00000010H
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000f8	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 1226 : 		actor->reactiontime = actor->info->reactiontime;

  000fb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fe	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00104	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00107	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0010a	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax

; 1227 : 		P_SetMobjState(actor, actor->info->spawnstate);

  00110	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00113	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00119	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0011c	52		 push	 edx
  0011d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 _P_SetMobjState
  00126	83 c4 08	 add	 esp, 8

; 1228 : 		var1 = 1;

  00129	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _var1, 1

; 1229 : 		A_Look(actor);

  00133	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _A_Look
  0013c	83 c4 04	 add	 esp, 4
$LN4@A_SharpSpi:

; 1230 : 	}
; 1231 : }

  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
_A_SharpSpin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SharpChase
_TEXT	SEGMENT
tv143 = -72						; size = 4
_delta$1 = -4						; size = 4
_actor$ = 8						; size = 4
_A_SharpChase PROC					; COMDAT

; 1155 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1156 : 	if (!actor->health)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00013	75 1e		 jne	 SHORT $LN2@A_SharpCha

; 1157 : 	{
; 1158 : 		P_SetMobjState(actor, actor->info->deathstate);

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0001e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00021	52		 push	 edx
  00022	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _P_SetMobjState
  0002b	83 c4 08	 add	 esp, 8

; 1159 : 		return;

  0002e	e9 75 01 00 00	 jmp	 $LN4@A_SharpCha
$LN2@A_SharpCha:

; 1160 : 	}
; 1161 : 
; 1162 : 	if (actor->reactiontime)

  00033	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00036	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  0003d	0f 84 1e 01 00
	00		 je	 $LN3@A_SharpCha

; 1163 : 	{
; 1164 : 		INT32 delta;
; 1165 : 
; 1166 : 		actor->reactiontime--;

  00043	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00046	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0004c	83 e9 01	 sub	 ecx, 1
  0004f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00052	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx

; 1167 : 
; 1168 : 		// turn towards movement direction if not there yet
; 1169 : 		if (actor->movedir < NUMDIRS)

  00058	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005b	83 b8 90 00 00
	00 08		 cmp	 DWORD PTR [eax+144], 8
  00062	73 5b		 jae	 SHORT $LN8@A_SharpCha

; 1170 : 		{
; 1171 : 			actor->angle &= (7<<29);

  00064	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00067	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0006a	81 e1 00 00 00
	e0		 and	 ecx, -536870912		; e0000000H
  00070	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00073	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 1172 : 			delta = actor->angle - (actor->movedir << 29);

  00076	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00079	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0007f	c1 e1 1d	 shl	 ecx, 29			; 0000001dH
  00082	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00085	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00088	2b c1		 sub	 eax, ecx
  0008a	89 45 fc	 mov	 DWORD PTR _delta$1[ebp], eax

; 1173 : 
; 1174 : 			if (delta > 0)

  0008d	83 7d fc 00	 cmp	 DWORD PTR _delta$1[ebp], 0
  00091	7e 14		 jle	 SHORT $LN6@A_SharpCha

; 1175 : 				actor->angle -= ANGLE_45;

  00093	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00096	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00099	81 e9 00 00 00
	20		 sub	 ecx, 536870912		; 20000000H
  0009f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a2	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  000a5	eb 18		 jmp	 SHORT $LN8@A_SharpCha
$LN6@A_SharpCha:

; 1176 : 			else if (delta < 0)

  000a7	83 7d fc 00	 cmp	 DWORD PTR _delta$1[ebp], 0
  000ab	7d 12		 jge	 SHORT $LN8@A_SharpCha

; 1177 : 				actor->angle += ANGLE_45;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000b3	81 c1 00 00 00
	20		 add	 ecx, 536870912		; 20000000H
  000b9	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000bc	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN8@A_SharpCha:

; 1178 : 		}
; 1179 : 
; 1180 : 		if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  000bf	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c2	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000c9	74 11		 je	 SHORT $LN10@A_SharpCha
  000cb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ce	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000d4	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000d7	83 e2 04	 and	 edx, 4
  000da	75 39		 jne	 SHORT $LN9@A_SharpCha
$LN10@A_SharpCha:

; 1181 : 		{
; 1182 : 			// look for a new target
; 1183 : 			if (P_LookForPlayers(actor, true, false, 0))

  000dc	6a 00		 push	 0
  000de	6a 00		 push	 0
  000e0	6a 01		 push	 1
  000e2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 _P_LookForPlayers
  000eb	83 c4 10	 add	 esp, 16			; 00000010H
  000ee	85 c0		 test	 eax, eax
  000f0	74 05		 je	 SHORT $LN11@A_SharpCha

; 1184 : 				return; // got a new target

  000f2	e9 b1 00 00 00	 jmp	 $LN4@A_SharpCha
$LN11@A_SharpCha:

; 1185 : 
; 1186 : 			P_SetMobjState(actor, actor->info->spawnstate);

  000f7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fa	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00100	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00103	52		 push	 edx
  00104	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 _P_SetMobjState
  0010d	83 c4 08	 add	 esp, 8

; 1187 : 			return;

  00110	e9 93 00 00 00	 jmp	 $LN4@A_SharpCha
$LN9@A_SharpCha:

; 1188 : 		}
; 1189 : 
; 1190 : 		// chase towards player
; 1191 : 		if (--actor->movecount < 0 || !P_Move(actor, actor->info->speed))

  00115	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00118	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0011e	83 e9 01	 sub	 ecx, 1
  00121	89 4d b8	 mov	 DWORD PTR tv143[ebp], ecx
  00124	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00127	8b 45 b8	 mov	 eax, DWORD PTR tv143[ebp]
  0012a	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  00130	83 7d b8 00	 cmp	 DWORD PTR tv143[ebp], 0
  00134	7c 1d		 jl	 SHORT $LN13@A_SharpCha
  00136	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00139	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0013f	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00142	52		 push	 edx
  00143	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 _P_Move
  0014c	83 c4 08	 add	 esp, 8
  0014f	85 c0		 test	 eax, eax
  00151	75 0c		 jne	 SHORT $LN12@A_SharpCha
$LN13@A_SharpCha:

; 1192 : 			P_NewChaseDir(actor);

  00153	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 _P_NewChaseDir
  0015c	83 c4 04	 add	 esp, 4
$LN12@A_SharpCha:

; 1193 : 	}

  0015f	eb 47		 jmp	 SHORT $LN4@A_SharpCha
$LN3@A_SharpCha:

; 1194 : 	else
; 1195 : 	{
; 1196 : 		actor->threshold = actor->info->painchance;

  00161	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00164	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0016a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0016d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00170	89 82 a0 00 00
	00		 mov	 DWORD PTR [edx+160], eax

; 1197 : 		P_SetMobjState(actor, actor->info->missilestate);

  00176	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00179	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0017f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00182	52		 push	 edx
  00183	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 _P_SetMobjState
  0018c	83 c4 08	 add	 esp, 8

; 1198 : 		S_StartSound(actor, actor->info->attacksound);

  0018f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00192	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00198	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0019b	52		 push	 edx
  0019c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 _S_StartSound
  001a5	83 c4 08	 add	 esp, 8
$LN4@A_SharpCha:

; 1199 : 	}
; 1200 : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c3		 ret	 0
_A_SharpChase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SnailerThink
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_SnailerThink PROC					; COMDAT

; 1120 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1121 : 	if (!actor->target)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	75 1b		 jne	 SHORT $LN3@A_SnailerT

; 1122 : 	{
; 1123 : 		// look for a new target
; 1124 : 		if (!P_LookForPlayers(actor, true, false, 0))

  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 01		 push	 1
  0001b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _P_LookForPlayers
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	85 c0		 test	 eax, eax
  00029	75 05		 jne	 SHORT $LN3@A_SnailerT

; 1125 : 			return;

  0002b	e9 d7 00 00 00	 jmp	 $LN1@A_SnailerT
$LN3@A_SnailerT:

; 1126 : 	}
; 1127 : 
; 1128 : 	// We now have a target. Oh bliss, rapture, and contentment!
; 1129 : 
; 1130 : 	if (actor->target->z > actor->z - 32*FRACUNIT
; 1131 : 		&& actor->target->z < actor->z + actor->height + 32*FRACUNIT
; 1132 : 		&& !(leveltime % (TICRATE*2)))

  00030	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00033	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00039	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0003f	2d 00 00 20 00	 sub	 eax, 2097152		; 00200000H
  00044	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00047	7e 53		 jle	 SHORT $LN4@A_SnailerT
  00049	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00052	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00055	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00058	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0005b	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  0005e	8d 84 10 00 00
	20 00		 lea	 eax, DWORD PTR [eax+edx+2097152]
  00065	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00068	7d 32		 jge	 SHORT $LN4@A_SnailerT
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0006f	33 d2		 xor	 edx, edx
  00071	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00076	f7 f1		 div	 ecx
  00078	85 d2		 test	 edx, edx
  0007a	75 20		 jne	 SHORT $LN4@A_SnailerT

; 1133 : 	{
; 1134 : 		var1 = MT_ROCKET;

  0007c	c7 05 00 00 00
	00 6c 00 00 00	 mov	 DWORD PTR _var1, 108	; 0000006cH

; 1135 : 		var2 = 0;

  00086	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _var2, 0

; 1136 : 		A_FireShot(actor);

  00090	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _A_FireShot
  00099	83 c4 04	 add	 esp, 4
$LN4@A_SnailerT:

; 1137 : 	}
; 1138 : 
; 1139 : 	if (actor->target->z > actor->z)

  0009c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000a5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a8	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000ab	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  000ae	7e 1a		 jle	 SHORT $LN5@A_SnailerT

; 1140 : 		actor->momz += actor->info->speed;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b3	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000b9	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000bc	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  000bf	03 41 3c	 add	 eax, DWORD PTR [ecx+60]
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000c5	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  000c8	eb 2c		 jmp	 SHORT $LN7@A_SnailerT
$LN5@A_SnailerT:

; 1141 : 	else if (actor->target->z < actor->z)

  000ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cd	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000d3	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d6	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000d9	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  000dc	7d 18		 jge	 SHORT $LN7@A_SnailerT

; 1142 : 		actor->momz -= actor->info->speed;

  000de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ea	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  000ed	2b 41 3c	 sub	 eax, DWORD PTR [ecx+60]
  000f0	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000f3	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN7@A_SnailerT:

; 1143 : 
; 1144 : 	actor->momz /= 2;

  000f6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f9	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  000fc	99		 cdq
  000fd	2b c2		 sub	 eax, edx
  000ff	d1 f8		 sar	 eax, 1
  00101	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00104	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN1@A_SnailerT:

; 1145 : }

  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
_A_SnailerThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ArrowCheck
_TEXT	SEGMENT
_dist$ = -20						; size = 4
_angle$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ArrowCheck PROC					; COMDAT

; 1081 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1082 : 	fixed_t x,y,z;
; 1083 : 	angle_t angle;
; 1084 : 	fixed_t dist;
; 1085 : 
; 1086 : 	// Movement vector
; 1087 : 	x = actor->momx;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0000f	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1088 : 	y = actor->momy;

  00012	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00015	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00018	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 1089 : 	z = actor->momz;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001e	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00021	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 1090 : 
; 1091 : 	// Calculate the angle of movement.
; 1092 : 	/*
; 1093 : 	       Z
; 1094 : 	     / |
; 1095 : 	   /   |
; 1096 : 	 /     |
; 1097 : 	0------dist(X,Y)
; 1098 : 	*/
; 1099 : 
; 1100 : 	dist = P_AproxDistance(x, y);

  00024	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 _P_AproxDistance
  00031	83 c4 08	 add	 esp, 8
  00034	89 45 ec	 mov	 DWORD PTR _dist$[ebp], eax

; 1101 : 
; 1102 : 	angle = R_PointToAngle2(0, 0, dist, z);

  00037	8b 45 f4	 mov	 eax, DWORD PTR _z$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d ec	 mov	 ecx, DWORD PTR _dist$[ebp]
  0003e	51		 push	 ecx
  0003f	6a 00		 push	 0
  00041	6a 00		 push	 0
  00043	e8 00 00 00 00	 call	 _R_PointToAngle2
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	89 45 f0	 mov	 DWORD PTR _angle$[ebp], eax

; 1103 : 
; 1104 : 	if (angle > ANG20 && angle <= ANGLE_180)

  0004e	81 7d f0 8e e3
	38 0e		 cmp	 DWORD PTR _angle$[ebp], 238609294 ; 0e38e38eH
  00055	76 24		 jbe	 SHORT $LN2@A_ArrowChe
  00057	81 7d f0 00 00
	00 80		 cmp	 DWORD PTR _angle$[ebp], -2147483648 ; 80000000H
  0005e	77 1b		 ja	 SHORT $LN2@A_ArrowChe

; 1105 : 		P_SetMobjStateNF(actor, actor->info->raisestate);

  00060	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00063	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00069	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0006c	52		 push	 edx
  0006d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  00076	83 c4 08	 add	 esp, 8
  00079	eb 46		 jmp	 SHORT $LN5@A_ArrowChe
$LN2@A_ArrowChe:

; 1106 : 	else if (angle < ANG340 && angle > ANGLE_180)

  0007b	81 7d f0 72 1c
	c7 f1		 cmp	 DWORD PTR _angle$[ebp], -238609294 ; f1c71c72H
  00082	73 24		 jae	 SHORT $LN4@A_ArrowChe
  00084	81 7d f0 00 00
	00 80		 cmp	 DWORD PTR _angle$[ebp], -2147483648 ; 80000000H
  0008b	76 1b		 jbe	 SHORT $LN4@A_ArrowChe

; 1107 : 		P_SetMobjStateNF(actor, actor->info->xdeathstate);

  0008d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00090	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00096	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00099	52		 push	 edx
  0009a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  000a3	83 c4 08	 add	 esp, 8
  000a6	eb 19		 jmp	 SHORT $LN5@A_ArrowChe
$LN4@A_ArrowChe:

; 1108 : 	else
; 1109 : 		P_SetMobjStateNF(actor, actor->info->spawnstate);

  000a8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ab	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000b1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b4	52		 push	 edx
  000b5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  000be	83 c4 08	 add	 esp, 8
$LN5@A_ArrowChe:

; 1110 : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
_A_ArrowCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_HoodThink
_TEXT	SEGMENT
tv134 = -68						; size = 4
_actor$ = 8						; size = 4
_A_HoodThink PROC					; COMDAT

; 1027 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1028 : 	// Currently in the air...
; 1029 : 	if (actor->z > actor->floorz)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0000f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00012	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00015	7e 42		 jle	 SHORT $LN2@A_HoodThin

; 1030 : 	{
; 1031 : 		if (actor->momz > 0)

  00017	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001a	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0001e	7e 1b		 jle	 SHORT $LN3@A_HoodThin

; 1032 : 			P_SetMobjStateNF(actor, actor->info->xdeathstate); // Rising

  00020	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00023	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00029	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0002c	52		 push	 edx
  0002d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  00036	83 c4 08	 add	 esp, 8
  00039	eb 19		 jmp	 SHORT $LN4@A_HoodThin
$LN3@A_HoodThin:

; 1033 : 		else
; 1034 : 			P_SetMobjStateNF(actor, actor->info->raisestate); // Falling

  0003b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00044	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00047	52		 push	 edx
  00048	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  00051	83 c4 08	 add	 esp, 8
$LN4@A_HoodThin:

; 1035 : 
; 1036 : 		return;

  00054	e9 87 01 00 00	 jmp	 $LN1@A_HoodThin
$LN2@A_HoodThin:

; 1037 : 	}
; 1038 : 
; 1039 : 	if (actor->state == &states[actor->info->xdeathstate]
; 1040 : 		|| actor->state == &states[actor->info->raisestate])

  00059	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00062	6b 51 34 1c	 imul	 edx, DWORD PTR [ecx+52], 28
  00066	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  0006c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006f	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00072	74 1b		 je	 SHORT $LN6@A_HoodThin
  00074	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00077	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0007d	6b 51 5c 1c	 imul	 edx, DWORD PTR [ecx+92], 28
  00081	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00087	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008a	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0008d	75 19		 jne	 SHORT $LN5@A_HoodThin
$LN6@A_HoodThin:

; 1041 : 		P_SetMobjStateNF(actor, actor->info->seestate);

  0008f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00092	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00098	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0009b	52		 push	 edx
  0009c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  000a5	83 c4 08	 add	 esp, 8
$LN5@A_HoodThin:

; 1042 : 
; 1043 : 	if (!actor->target)

  000a8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ab	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000b2	75 1e		 jne	 SHORT $LN7@A_HoodThin

; 1044 : 	{
; 1045 : 		P_SetMobjState(actor, actor->info->spawnstate);

  000b4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000bd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c0	52		 push	 edx
  000c1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _P_SetMobjState
  000ca	83 c4 08	 add	 esp, 8

; 1046 : 		return;

  000cd	e9 0e 01 00 00	 jmp	 $LN1@A_HoodThin
$LN7@A_HoodThin:

; 1047 : 	}
; 1048 : 
; 1049 : 	A_FaceTarget(actor); // Aiming... aiming...

  000d2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _A_FaceTarget
  000db	83 c4 04	 add	 esp, 4

; 1050 : 
; 1051 : 	if (--actor->reactiontime > 0)

  000de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e1	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  000e7	83 e9 01	 sub	 ecx, 1
  000ea	89 4d bc	 mov	 DWORD PTR tv134[ebp], ecx
  000ed	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000f0	8b 45 bc	 mov	 eax, DWORD PTR tv134[ebp]
  000f3	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax
  000f9	83 7d bc 00	 cmp	 DWORD PTR tv134[ebp], 0
  000fd	7e 05		 jle	 SHORT $LN8@A_HoodThin

; 1052 : 		return;

  000ff	e9 dc 00 00 00	 jmp	 $LN1@A_HoodThin
$LN8@A_HoodThin:

; 1053 : 
; 1054 : 	// Shoot, if not too close (cheap shots are lame)
; 1055 : 	if (P_AproxDistance(actor->x-actor->target->x, actor->y-actor->target->y) > 64*FRACUNIT)

  00104	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00107	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0010d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00110	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00113	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  00116	50		 push	 eax
  00117	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0011a	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00120	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00123	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00126	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 _P_AproxDistance
  0012f	83 c4 08	 add	 esp, 8
  00132	3d 00 00 40 00	 cmp	 eax, 4194304		; 00400000H
  00137	7e 4e		 jle	 SHORT $LN9@A_HoodThin

; 1056 : 	{
; 1057 : 		P_SetMobjState(actor, actor->info->missilestate);

  00139	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0013c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00142	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00145	52		 push	 edx
  00146	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 _P_SetMobjState
  0014f	83 c4 08	 add	 esp, 8

; 1058 : 
; 1059 : 		if (actor->spawnpoint && (actor->spawnpoint->options & MTF_AMBUSH)) // Don't jump

  00152	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00155	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  0015c	74 27		 je	 SHORT $LN11@A_HoodThin
  0015e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00161	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00167	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0016b	83 e2 08	 and	 edx, 8
  0016e	74 15		 je	 SHORT $LN11@A_HoodThin

; 1060 : 			actor->state->nextstate = actor->info->seestate;

  00170	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00173	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00179	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0017c	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0017f	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00182	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN11@A_HoodThin:

; 1061 : 	}

  00185	eb 44		 jmp	 SHORT $LN12@A_HoodThin
$LN9@A_HoodThin:

; 1062 : 	else if (!(actor->flags & MF_AMBUSH))// But we WILL jump!

  00187	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0018a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0018d	83 e1 20	 and	 ecx, 32			; 00000020H
  00190	75 39		 jne	 SHORT $LN12@A_HoodThin

; 1063 : 	{
; 1064 : 		P_SetMobjState(actor, actor->info->painstate);

  00192	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00195	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0019b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0019e	52		 push	 edx
  0019f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _P_SetMobjState
  001a8	83 c4 08	 add	 esp, 8

; 1065 : 		var1 = 8;

  001ab	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR _var1, 8

; 1066 : 		var2 = 5;

  001b5	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR _var2, 5

; 1067 : 		A_BunnyHop(actor);

  001bf	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _A_BunnyHop
  001c8	83 c4 04	 add	 esp, 4
$LN12@A_HoodThin:

; 1068 : 	}
; 1069 : 
; 1070 : 	actor->reactiontime = actor->info->reactiontime;

  001cb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ce	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001d4	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001d7	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  001da	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax
$LN1@A_HoodThin:

; 1071 : }

  001e0	5f		 pop	 edi
  001e1	5e		 pop	 esi
  001e2	5b		 pop	 ebx
  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c3		 ret	 0
_A_HoodThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_CheckBuddy
_TEXT	SEGMENT
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_CheckBuddy PROC					; COMDAT

; 1010 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1011 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 1012 : 
; 1013 : 	if (locvar1 && (!actor->tracer || actor->tracer->health <= 0))

  00011	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  00015	74 31		 je	 SHORT $LN2@A_CheckBud
  00017	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001a	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00021	74 12		 je	 SHORT $LN4@A_CheckBud
  00023	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00026	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0002c	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00033	7f 13		 jg	 SHORT $LN2@A_CheckBud
$LN4@A_CheckBud:

; 1014 : 		P_SetMobjState(actor, S_DISS);

  00035	68 4f 06 00 00	 push	 1615			; 0000064fH
  0003a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _P_SetMobjState
  00043	83 c4 08	 add	 esp, 8
  00046	eb 35		 jmp	 SHORT $LN5@A_CheckBud
$LN2@A_CheckBud:

; 1015 : 	else if (!locvar1 && (!actor->target || actor->target->health <= 0))

  00048	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0004c	75 2f		 jne	 SHORT $LN5@A_CheckBud
  0004e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00051	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00058	74 12		 je	 SHORT $LN6@A_CheckBud
  0005a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00063	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0006a	7f 11		 jg	 SHORT $LN5@A_CheckBud
$LN6@A_CheckBud:

; 1016 : 		P_SetMobjState(actor, S_DISS);

  0006c	68 4f 06 00 00	 push	 1615			; 0000064fH
  00071	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _P_SetMobjState
  0007a	83 c4 08	 add	 esp, 8
$LN5@A_CheckBud:

; 1017 : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_A_CheckBuddy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_PointyThink
_TEXT	SEGMENT
_sign$ = -52						; size = 4
_firsttime$ = -48					; size = 4
_radius$ = -44						; size = 4
_fa$ = -40						; size = 4
_res$ = -36						; size = 4
_v$ = -32						; size = 16
_ball$ = -16						; size = 4
_player$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_actor$ = 8						; size = 4
_A_PointyThink PROC					; COMDAT

; 907  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 908  : 	INT32 i;
; 909  : 	player_t *player = NULL;

  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _player$[ebp], 0

; 910  : 	mobj_t *ball;
; 911  : 	TVector v;
; 912  : 	TVector *res;
; 913  : 	angle_t fa;
; 914  : 	fixed_t radius = actor->info->radius*actor->info->reactiontime;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00023	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00026	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0002c	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  0002f	0f af 48 14	 imul	 ecx, DWORD PTR [eax+20]
  00033	89 4d d4	 mov	 DWORD PTR _radius$[ebp], ecx

; 915  : 	boolean firsttime = true;

  00036	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _firsttime$[ebp], 1

; 916  : 	INT32 sign;
; 917  : 
; 918  : 	actor->momx = actor->momy = actor->momz = 0;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00040	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0004a	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00054	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 919  : 
; 920  : 	// Find nearest player
; 921  : 	for (i = 0; i < MAXPLAYERS; i++)

  0005b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00062	eb 09		 jmp	 SHORT $LN4@A_PointyTh
$LN2@A_PointyTh:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00067	83 c0 01	 add	 eax, 1
  0006a	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@A_PointyTh:
  0006d	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00071	0f 8d ed 00 00
	00		 jge	 $LN3@A_PointyTh

; 922  : 	{
; 923  : 		if (!playeringame[i])

  00077	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007a	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00082	75 02		 jne	 SHORT $LN7@A_PointyTh

; 924  : 			continue;

  00084	eb de		 jmp	 SHORT $LN2@A_PointyTh
$LN7@A_PointyTh:

; 925  : 
; 926  : 		if (!players[i].mo)

  00086	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0008d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00094	75 02		 jne	 SHORT $LN8@A_PointyTh

; 927  : 			continue;

  00096	eb cc		 jmp	 SHORT $LN2@A_PointyTh
$LN8@A_PointyTh:

; 928  : 
; 929  : 		if (!players[i].mo->health)

  00098	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0009f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  000a5	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  000ac	75 02		 jne	 SHORT $LN9@A_PointyTh

; 930  : 			continue;

  000ae	eb b4		 jmp	 SHORT $LN2@A_PointyTh
$LN9@A_PointyTh:

; 931  : 
; 932  : 		if (!P_CheckSight(actor, players[i].mo))

  000b0	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000b7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  000bd	51		 push	 ecx
  000be	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 _P_CheckSight
  000c7	83 c4 08	 add	 esp, 8
  000ca	85 c0		 test	 eax, eax
  000cc	75 02		 jne	 SHORT $LN10@A_PointyTh

; 933  : 			continue;

  000ce	eb 94		 jmp	 SHORT $LN2@A_PointyTh
$LN10@A_PointyTh:

; 934  : 
; 935  : 		if (firsttime)

  000d0	83 7d d0 00	 cmp	 DWORD PTR _firsttime$[ebp], 0
  000d4	74 18		 je	 SHORT $LN11@A_PointyTh

; 936  : 		{
; 937  : 			firsttime = false;

  000d6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _firsttime$[ebp], 0

; 938  : 			player = &players[i];

  000dd	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000e4	05 00 00 00 00	 add	 eax, OFFSET _players
  000e9	89 45 f4	 mov	 DWORD PTR _player$[ebp], eax

; 939  : 		}

  000ec	eb 71		 jmp	 SHORT $LN13@A_PointyTh
$LN11@A_PointyTh:

; 940  : 		else
; 941  : 		{
; 942  : 			if (P_AproxDistance(players[i].mo->x - actor->x, players[i].mo->y - actor->y) <

  000ee	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000f5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  000fb	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000fe	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00101	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00104	50		 push	 eax
  00105	69 4d f8 fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  0010c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00112	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00115	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00118	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 _P_AproxDistance
  00121	83 c4 08	 add	 esp, 8
  00124	8b f0		 mov	 esi, eax
  00126	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  00129	8b 02		 mov	 eax, DWORD PTR [edx]
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0012e	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00131	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00134	52		 push	 edx
  00135	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00138	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0013d	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00140	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _P_AproxDistance
  00149	83 c4 08	 add	 esp, 8
  0014c	3b f0		 cmp	 esi, eax
  0014e	7d 0f		 jge	 SHORT $LN13@A_PointyTh

; 943  : 				P_AproxDistance(player->mo->x - actor->x, player->mo->y - actor->y))
; 944  : 				player = &players[i];

  00150	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00157	05 00 00 00 00	 add	 eax, OFFSET _players
  0015c	89 45 f4	 mov	 DWORD PTR _player$[ebp], eax
$LN13@A_PointyTh:

; 945  : 		}
; 946  : 	}

  0015f	e9 00 ff ff ff	 jmp	 $LN2@A_PointyTh
$LN3@A_PointyTh:

; 947  : 
; 948  : 	if (!player)

  00164	83 7d f4 00	 cmp	 DWORD PTR _player$[ebp], 0
  00168	75 05		 jne	 SHORT $LN14@A_PointyTh

; 949  : 		return;

  0016a	e9 d8 02 00 00	 jmp	 $LN6@A_PointyTh
$LN14@A_PointyTh:

; 950  : 
; 951  : 	// Okay, we found the closest player. Let's move based on his movement.
; 952  : 	P_SetTarget(&actor->target, player->mo);

  0016f	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	51		 push	 ecx
  00175	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00178	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 _P_SetTarget
  00184	83 c4 08	 add	 esp, 8

; 953  : 	A_FaceTarget(actor);

  00187	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 _A_FaceTarget
  00190	83 c4 04	 add	 esp, 4

; 954  : 
; 955  : 	if (P_AproxDistance(player->mo->x - actor->x, player->mo->y - actor->y) < P_AproxDistance(player->mo->x + player->mo->momx - actor->x, player->mo->y + player->mo->momy - actor->y))

  00193	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00196	8b 08		 mov	 ecx, DWORD PTR [eax]
  00198	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0019b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0019e	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  001a1	50		 push	 eax
  001a2	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  001a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001aa	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  001ad	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  001b0	51		 push	 ecx
  001b1	e8 00 00 00 00	 call	 _P_AproxDistance
  001b6	83 c4 08	 add	 esp, 8
  001b9	8b f0		 mov	 esi, eax
  001bb	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  001be	8b 02		 mov	 eax, DWORD PTR [edx]
  001c0	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  001c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c5	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  001c8	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  001cb	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001ce	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  001d1	50		 push	 eax
  001d2	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  001d5	8b 02		 mov	 eax, DWORD PTR [edx]
  001d7	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  001da	8b 11		 mov	 edx, DWORD PTR [ecx]
  001dc	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  001df	03 42 48	 add	 eax, DWORD PTR [edx+72]
  001e2	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001e5	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 _P_AproxDistance
  001ee	83 c4 08	 add	 esp, 8
  001f1	3b f0		 cmp	 esi, eax
  001f3	7d 09		 jge	 SHORT $LN15@A_PointyTh

; 956  : 		sign = -1; // Player is moving away

  001f5	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _sign$[ebp], -1
  001fc	eb 07		 jmp	 SHORT $LN16@A_PointyTh
$LN15@A_PointyTh:

; 957  : 	else
; 958  : 		sign = 1; // Player is moving closer

  001fe	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _sign$[ebp], 1
$LN16@A_PointyTh:

; 959  : 
; 960  : 	if (player->mo->momx || player->mo->momy)

  00205	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00208	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020a	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  0020e	75 0f		 jne	 SHORT $LN18@A_PointyTh
  00210	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00213	8b 08		 mov	 ecx, DWORD PTR [eax]
  00215	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  00219	0f 84 86 00 00
	00		 je	 $LN17@A_PointyTh
$LN18@A_PointyTh:

; 961  : 	{
; 962  : 		P_InstaThrust(actor, R_PointToAngle2(actor->x, actor->y, player->mo->x, player->mo->y), actor->info->speed*sign);

  0021f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00222	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00228	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0022b	0f af 55 cc	 imul	 edx, DWORD PTR _sign$[ebp]
  0022f	52		 push	 edx
  00230	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00233	8b 08		 mov	 ecx, DWORD PTR [eax]
  00235	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00238	52		 push	 edx
  00239	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0023c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00241	52		 push	 edx
  00242	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00245	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00248	51		 push	 ecx
  00249	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0024c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 _R_PointToAngle2
  00255	83 c4 10	 add	 esp, 16			; 00000010H
  00258	50		 push	 eax
  00259	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0025c	51		 push	 ecx
  0025d	e8 00 00 00 00	 call	 _P_InstaThrust
  00262	83 c4 0c	 add	 esp, 12			; 0000000cH

; 963  : 
; 964  : 		// Rotate our spike balls
; 965  : 		actor->lastlook += actor->info->damage;

  00265	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00268	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0026e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00271	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  00277	03 41 50	 add	 eax, DWORD PTR [ecx+80]
  0027a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0027d	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 966  : 		actor->lastlook %= FINEANGLES/4;

  00283	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00286	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  0028c	81 e1 ff 07 00
	80		 and	 ecx, -2147481601	; 800007ffH
  00292	79 08		 jns	 SHORT $LN21@A_PointyTh
  00294	49		 dec	 ecx
  00295	81 c9 00 f8 ff
	ff		 or	 ecx, -2048		; fffff800H
  0029b	41		 inc	 ecx
$LN21@A_PointyTh:
  0029c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0029f	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx
$LN17@A_PointyTh:

; 967  : 	}
; 968  : 
; 969  : 	if (!actor->tracer) // For some reason we do not have spike balls...

  002a5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002a8	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  002af	75 05		 jne	 SHORT $LN19@A_PointyTh

; 970  : 		return;

  002b1	e9 91 01 00 00	 jmp	 $LN6@A_PointyTh
$LN19@A_PointyTh:

; 971  : 
; 972  : 	// Position spike balls relative to the value of 'lastlook'.
; 973  : 	ball = actor->tracer;

  002b6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002b9	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002bf	89 4d f0	 mov	 DWORD PTR _ball$[ebp], ecx

; 974  : 
; 975  : 	i = 0;

  002c2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN5@A_PointyTh:

; 976  : 	while (ball)

  002c9	83 7d f0 00	 cmp	 DWORD PTR _ball$[ebp], 0
  002cd	0f 84 74 01 00
	00		 je	 $LN6@A_PointyTh

; 977  : 	{
; 978  : 		fa = actor->lastlook+i;

  002d3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002d6	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  002dc	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  002df	89 4d d8	 mov	 DWORD PTR _fa$[ebp], ecx

; 979  : 		v[0] = FixedMul(FINECOSINE(fa),radius);

  002e2	8b 45 d4	 mov	 eax, DWORD PTR _radius$[ebp]
  002e5	50		 push	 eax
  002e6	8b 4d d8	 mov	 ecx, DWORD PTR _fa$[ebp]
  002e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  002ef	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  002f2	50		 push	 eax
  002f3	e8 00 00 00 00	 call	 _FixedMul
  002f8	83 c4 08	 add	 esp, 8
  002fb	b9 04 00 00 00	 mov	 ecx, 4
  00300	6b d1 00	 imul	 edx, ecx, 0
  00303	89 44 15 e0	 mov	 DWORD PTR _v$[ebp+edx], eax

; 980  : 		v[1] = 0;

  00307	b8 04 00 00 00	 mov	 eax, 4
  0030c	c1 e0 00	 shl	 eax, 0
  0030f	c7 44 05 e0 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 981  : 		v[2] = FixedMul(FINESINE(fa),radius);

  00317	8b 45 d4	 mov	 eax, DWORD PTR _radius$[ebp]
  0031a	50		 push	 eax
  0031b	8b 4d d8	 mov	 ecx, DWORD PTR _fa$[ebp]
  0031e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00325	52		 push	 edx
  00326	e8 00 00 00 00	 call	 _FixedMul
  0032b	83 c4 08	 add	 esp, 8
  0032e	b9 04 00 00 00	 mov	 ecx, 4
  00333	d1 e1		 shl	 ecx, 1
  00335	89 44 0d e0	 mov	 DWORD PTR _v$[ebp+ecx], eax

; 982  : 		v[3] = FRACUNIT;

  00339	b8 04 00 00 00	 mov	 eax, 4
  0033e	6b c8 03	 imul	 ecx, eax, 3
  00341	c7 44 0d e0 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 983  : 
; 984  : 		res = VectorMatrixMultiply(v, *RotateXMatrix(FixedAngle(actor->lastlook+i)));

  00349	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0034c	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00352	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  00355	51		 push	 ecx
  00356	e8 00 00 00 00	 call	 _FixedAngle
  0035b	83 c4 04	 add	 esp, 4
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 _RotateXMatrix
  00364	83 c4 04	 add	 esp, 4
  00367	50		 push	 eax
  00368	8d 55 e0	 lea	 edx, DWORD PTR _v$[ebp]
  0036b	52		 push	 edx
  0036c	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00371	83 c4 08	 add	 esp, 8
  00374	89 45 dc	 mov	 DWORD PTR _res$[ebp], eax

; 985  : 		M_Memcpy(&v, res, sizeof (v));

  00377	6a 10		 push	 16			; 00000010H
  00379	8b 45 dc	 mov	 eax, DWORD PTR _res$[ebp]
  0037c	50		 push	 eax
  0037d	8d 4d e0	 lea	 ecx, DWORD PTR _v$[ebp]
  00380	51		 push	 ecx
  00381	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00387	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 		res = VectorMatrixMultiply(v, *RotateZMatrix(actor->angle+ANGLE_180));

  0038a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0038d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00390	81 e9 00 00 00
	80		 sub	 ecx, -2147483648	; 80000000H
  00396	51		 push	 ecx
  00397	e8 00 00 00 00	 call	 _RotateZMatrix
  0039c	83 c4 04	 add	 esp, 4
  0039f	50		 push	 eax
  003a0	8d 55 e0	 lea	 edx, DWORD PTR _v$[ebp]
  003a3	52		 push	 edx
  003a4	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  003a9	83 c4 08	 add	 esp, 8
  003ac	89 45 dc	 mov	 DWORD PTR _res$[ebp], eax

; 987  : 		M_Memcpy(&v, res, sizeof (v));

  003af	6a 10		 push	 16			; 00000010H
  003b1	8b 45 dc	 mov	 eax, DWORD PTR _res$[ebp]
  003b4	50		 push	 eax
  003b5	8d 4d e0	 lea	 ecx, DWORD PTR _v$[ebp]
  003b8	51		 push	 ecx
  003b9	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  003bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 988  : 
; 989  : 		P_UnsetThingPosition(ball);

  003c2	8b 45 f0	 mov	 eax, DWORD PTR _ball$[ebp]
  003c5	50		 push	 eax
  003c6	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  003cb	83 c4 04	 add	 esp, 4

; 990  : 		ball->x = actor->x + v[0];

  003ce	b8 04 00 00 00	 mov	 eax, 4
  003d3	6b c8 00	 imul	 ecx, eax, 0
  003d6	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  003dc	03 44 0d e0	 add	 eax, DWORD PTR _v$[ebp+ecx]
  003e0	8b 4d f0	 mov	 ecx, DWORD PTR _ball$[ebp]
  003e3	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 991  : 		ball->y = actor->y + v[1];

  003e6	b8 04 00 00 00	 mov	 eax, 4
  003eb	c1 e0 00	 shl	 eax, 0
  003ee	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  003f1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003f4	03 54 05 e0	 add	 edx, DWORD PTR _v$[ebp+eax]
  003f8	8b 45 f0	 mov	 eax, DWORD PTR _ball$[ebp]
  003fb	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 992  : 		ball->z = actor->z + (actor->height>>1) + v[2];

  003fe	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00401	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00404	d1 f9		 sar	 ecx, 1
  00406	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00409	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0040c	03 c1		 add	 eax, ecx
  0040e	b9 04 00 00 00	 mov	 ecx, 4
  00413	d1 e1		 shl	 ecx, 1
  00415	03 44 0d e0	 add	 eax, DWORD PTR _v$[ebp+ecx]
  00419	8b 55 f0	 mov	 edx, DWORD PTR _ball$[ebp]
  0041c	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 993  : 		P_SetThingPosition(ball);

  0041f	8b 45 f0	 mov	 eax, DWORD PTR _ball$[ebp]
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 _P_SetThingPosition
  00428	83 c4 04	 add	 esp, 4

; 994  : 
; 995  : 		ball = ball->tracer;

  0042b	8b 45 f0	 mov	 eax, DWORD PTR _ball$[ebp]
  0042e	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00434	89 4d f0	 mov	 DWORD PTR _ball$[ebp], ecx

; 996  : 		i += ANGLE_90 >> ANGLETOFINESHIFT;

  00437	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0043a	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  0043f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 997  : 	}

  00442	e9 82 fe ff ff	 jmp	 $LN5@A_PointyTh
$LN6@A_PointyTh:

; 998  : }

  00447	5f		 pop	 edi
  00448	5e		 pop	 esi
  00449	5b		 pop	 ebx
  0044a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044d	33 cd		 xor	 ecx, ebp
  0044f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00454	8b e5		 mov	 esp, ebp
  00456	5d		 pop	 ebp
  00457	c3		 ret	 0
_A_PointyThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_JetJawChomp
_TEXT	SEGMENT
tv133 = -72						; size = 4
_delta$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_JetJawChomp PROC					; COMDAT

; 871  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 872  : 	INT32 delta;
; 873  : 
; 874  : 	// turn towards movement direction if not there yet
; 875  : 	if (actor->movedir < NUMDIRS)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 90 00 00
	00 08		 cmp	 DWORD PTR [eax+144], 8
  00013	73 5b		 jae	 SHORT $LN5@A_JetJawCh

; 876  : 	{
; 877  : 		actor->angle &= (7<<29);

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0001b	81 e1 00 00 00
	e0		 and	 ecx, -536870912		; e0000000H
  00021	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00024	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 878  : 		delta = actor->angle - (actor->movedir << 29);

  00027	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002a	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00030	c1 e1 1d	 shl	 ecx, 29			; 0000001dH
  00033	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00036	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00039	2b c1		 sub	 eax, ecx
  0003b	89 45 fc	 mov	 DWORD PTR _delta$[ebp], eax

; 879  : 
; 880  : 		if (delta > 0)

  0003e	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  00042	7e 14		 jle	 SHORT $LN3@A_JetJawCh

; 881  : 			actor->angle -= ANGLE_45;

  00044	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00047	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0004a	81 e9 00 00 00
	20		 sub	 ecx, 536870912		; 20000000H
  00050	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00053	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  00056	eb 18		 jmp	 SHORT $LN5@A_JetJawCh
$LN3@A_JetJawCh:

; 882  : 		else if (delta < 0)

  00058	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  0005c	7d 12		 jge	 SHORT $LN5@A_JetJawCh

; 883  : 			actor->angle += ANGLE_45;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00061	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00064	81 c1 00 00 00
	20		 add	 ecx, 536870912		; 20000000H
  0006a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006d	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN5@A_JetJawCh:

; 884  : 	}
; 885  : 
; 886  : 	// Stop chomping if target's dead or you can't see it
; 887  : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE)
; 888  : 		|| actor->target->health <= 0 || !P_CheckSight(actor, actor->target))

  00070	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00073	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0007a	74 3d		 je	 SHORT $LN7@A_JetJawCh
  0007c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00085	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00088	83 e2 04	 and	 edx, 4
  0008b	74 2c		 je	 SHORT $LN7@A_JetJawCh
  0008d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00090	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00096	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0009d	7e 1a		 jle	 SHORT $LN7@A_JetJawCh
  0009f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a2	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000a8	51		 push	 ecx
  000a9	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 _P_CheckSight
  000b2	83 c4 08	 add	 esp, 8
  000b5	85 c0		 test	 eax, eax
  000b7	75 1b		 jne	 SHORT $LN6@A_JetJawCh
$LN7@A_JetJawCh:

; 889  : 	{
; 890  : 		P_SetMobjState(actor, actor->info->spawnstate);

  000b9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000bc	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000c2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c5	52		 push	 edx
  000c6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _P_SetMobjState
  000cf	83 c4 08	 add	 esp, 8

; 891  : 		return;

  000d2	eb 4a		 jmp	 SHORT $LN8@A_JetJawCh
$LN6@A_JetJawCh:

; 892  : 	}
; 893  : 
; 894  : 	// chase towards player
; 895  : 	if (--actor->movecount < 0 || !P_Move(actor, actor->info->speed))

  000d4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d7	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000dd	83 e9 01	 sub	 ecx, 1
  000e0	89 4d b8	 mov	 DWORD PTR tv133[ebp], ecx
  000e3	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000e6	8b 45 b8	 mov	 eax, DWORD PTR tv133[ebp]
  000e9	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  000ef	83 7d b8 00	 cmp	 DWORD PTR tv133[ebp], 0
  000f3	7c 1d		 jl	 SHORT $LN9@A_JetJawCh
  000f5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f8	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000fe	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00101	52		 push	 edx
  00102	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _P_Move
  0010b	83 c4 08	 add	 esp, 8
  0010e	85 c0		 test	 eax, eax
  00110	75 0c		 jne	 SHORT $LN8@A_JetJawCh
$LN9@A_JetJawCh:

; 896  : 		P_NewChaseDir(actor);

  00112	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _P_NewChaseDir
  0011b	83 c4 04	 add	 esp, 4
$LN8@A_JetJawCh:

; 897  : }

  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
_A_JetJawChomp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_JetJawRoam
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_JetJawRoam PROC					; COMDAT

; 847  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 848  : 	if (actor->reactiontime)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00013	74 43		 je	 SHORT $LN2@A_JetJawRo

; 849  : 	{
; 850  : 		actor->reactiontime--;

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00024	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx

; 851  : 		P_InstaThrust(actor, actor->angle, actor->info->speed*FRACUNIT/4);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00033	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00036	c1 e0 10	 shl	 eax, 16			; 00000010H
  00039	99		 cdq
  0003a	83 e2 03	 and	 edx, 3
  0003d	03 c2		 add	 eax, edx
  0003f	c1 f8 02	 sar	 eax, 2
  00042	50		 push	 eax
  00043	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00046	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _P_InstaThrust
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  : 	}

  00056	eb 27		 jmp	 SHORT $LN3@A_JetJawRo
$LN2@A_JetJawRo:

; 853  : 	else
; 854  : 	{
; 855  : 		actor->reactiontime = actor->info->reactiontime;

  00058	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00061	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00064	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00067	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax

; 856  : 		actor->angle += ANGLE_180;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00070	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00073	81 e9 00 00 00
	80		 sub	 ecx, -2147483648	; 80000000H
  00079	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0007c	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN3@A_JetJawRo:

; 857  : 	}
; 858  : 
; 859  : 	if (P_LookForPlayers(actor, false, false, actor->radius * 16))

  0007f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00082	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00085	c1 e1 04	 shl	 ecx, 4
  00088	51		 push	 ecx
  00089	6a 00		 push	 0
  0008b	6a 00		 push	 0
  0008d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 _P_LookForPlayers
  00096	83 c4 10	 add	 esp, 16			; 00000010H
  00099	85 c0		 test	 eax, eax
  0009b	74 19		 je	 SHORT $LN4@A_JetJawRo

; 860  : 		P_SetMobjState(actor, actor->info->seestate);

  0009d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000a6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000a9	52		 push	 edx
  000aa	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _P_SetMobjState
  000b3	83 c4 08	 add	 esp, 8
$LN4@A_JetJawRo:

; 861  : }

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
_A_JetJawRoam ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_TurretStop
_TEXT	SEGMENT
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_TurretStop PROC					; COMDAT

; 5000 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5001 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5002 : 
; 5003 : 	actor->flags2 &= ~MF2_FIRING;

  00011	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00014	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0001a	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  00020	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00023	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 5004 : 	actor->flags2 &= ~MF2_SUPERFIRE;

  00029	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00032	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  00038	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003b	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 5005 : 
; 5006 : 	if (actor->target && actor->info->activesound && !locvar1)

  00041	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00044	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0004b	74 2e		 je	 SHORT $LN2@A_TurretSt
  0004d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00050	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00056	83 79 54 00	 cmp	 DWORD PTR [ecx+84], 0
  0005a	74 1f		 je	 SHORT $LN2@A_TurretSt
  0005c	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  00060	75 19		 jne	 SHORT $LN2@A_TurretSt

; 5007 : 		S_StartSound(actor, actor->info->activesound);

  00062	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00065	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0006b	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0006e	52		 push	 edx
  0006f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _S_StartSound
  00078	83 c4 08	 add	 esp, 8
$LN2@A_TurretSt:

; 5008 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_A_TurretStop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SuperTurretFire
_TEXT	SEGMENT
_locvar2$ = -16						; size = 4
_locvar1$ = -12						; size = 4
_dist$ = -8						; size = 4
_count$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SuperTurretFire PROC					; COMDAT

; 4963 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4964 : 	INT32 count = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 4965 : 	fixed_t dist;
; 4966 : 	INT32 locvar1 = var1;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  00015	89 45 f4	 mov	 DWORD PTR _locvar1$[ebp], eax

; 4967 : 	INT32 locvar2 = var2;

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  0001d	89 45 f0	 mov	 DWORD PTR _locvar2$[ebp], eax

; 4968 : 
; 4969 : 	if (locvar2)

  00020	83 7d f0 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  00024	74 0b		 je	 SHORT $LN4@A_SuperTur

; 4970 : 		dist = locvar2*FRACUNIT;

  00026	8b 45 f0	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00029	c1 e0 10	 shl	 eax, 16			; 00000010H
  0002c	89 45 f8	 mov	 DWORD PTR _dist$[ebp], eax
  0002f	eb 07		 jmp	 SHORT $LN5@A_SuperTur
$LN4@A_SuperTur:

; 4971 : 	else
; 4972 : 		dist = 2048*FRACUNIT;

  00031	c7 45 f8 00 00
	00 08		 mov	 DWORD PTR _dist$[ebp], 134217728 ; 08000000H
$LN5@A_SuperTur:

; 4973 : 
; 4974 : 	if (!locvar1)

  00038	83 7d f4 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0003c	75 07		 jne	 SHORT $LN6@A_SuperTur

; 4975 : 		locvar1 = MT_TURRETLASER;

  0003e	c7 45 f4 70 00
	00 00		 mov	 DWORD PTR _locvar1$[ebp], 112 ; 00000070H
$LN6@A_SuperTur:

; 4976 : 
; 4977 : 	while (P_SupermanLook4Players(actor) && count < MAXPLAYERS)

  00045	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _P_SupermanLook4Players
  0004e	83 c4 04	 add	 esp, 4
  00051	85 c0		 test	 eax, eax
  00053	0f 84 ad 00 00
	00		 je	 $LN3@A_SuperTur
  00059	83 7d fc 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  0005d	0f 8d a3 00 00
	00		 jge	 $LN3@A_SuperTur

; 4978 : 	{
; 4979 : 		if (P_AproxDistance(actor->x - actor->target->x, actor->y - actor->target->y) < dist)

  00063	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00066	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00072	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  00075	50		 push	 eax
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00079	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0007f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00082	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00085	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 _P_AproxDistance
  0008e	83 c4 08	 add	 esp, 8
  00091	3b 45 f8	 cmp	 eax, DWORD PTR _dist$[ebp]
  00094	7d 62		 jge	 SHORT $LN7@A_SuperTur

; 4980 : 		{
; 4981 : 			actor->flags2 |= MF2_FIRING;

  00096	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00099	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0009f	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  000a5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a8	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4982 : 			actor->flags2 |= MF2_SUPERFIRE;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b1	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000b7	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  000bd	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c0	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4983 : 			actor->eflags &= 65535;

  000c6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c9	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000cf	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000d5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d8	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 4984 : 			actor->eflags += (locvar1 << 16); // Upper 16 bits contains mobj #

  000de	8b 45 f4	 mov	 eax, DWORD PTR _locvar1$[ebp]
  000e1	c1 e0 10	 shl	 eax, 16			; 00000010H
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000e7	03 81 84 00 00
	00		 add	 eax, DWORD PTR [ecx+132]
  000ed	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000f0	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 4985 : 			break;

  000f6	eb 0e		 jmp	 SHORT $LN3@A_SuperTur
$LN7@A_SuperTur:

; 4986 : 		}
; 4987 : 
; 4988 : 		count++;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000fb	83 c0 01	 add	 eax, 1
  000fe	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 4989 : 	}

  00101	e9 3f ff ff ff	 jmp	 $LN6@A_SuperTur
$LN3@A_SuperTur:

; 4990 : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
_A_SuperTurretFire ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_TurretFire
_TEXT	SEGMENT
_locvar2$ = -16						; size = 4
_locvar1$ = -12						; size = 4
_dist$ = -8						; size = 4
_count$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_TurretFire PROC					; COMDAT

; 4927 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4928 : 	INT32 count = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 4929 : 	fixed_t dist;
; 4930 : 	INT32 locvar1 = var1;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  00015	89 45 f4	 mov	 DWORD PTR _locvar1$[ebp], eax

; 4931 : 	INT32 locvar2 = var2;

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  0001d	89 45 f0	 mov	 DWORD PTR _locvar2$[ebp], eax

; 4932 : 
; 4933 : 	if (locvar2)

  00020	83 7d f0 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  00024	74 0b		 je	 SHORT $LN4@A_TurretFi

; 4934 : 		dist = locvar2*FRACUNIT;

  00026	8b 45 f0	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00029	c1 e0 10	 shl	 eax, 16			; 00000010H
  0002c	89 45 f8	 mov	 DWORD PTR _dist$[ebp], eax
  0002f	eb 07		 jmp	 SHORT $LN5@A_TurretFi
$LN4@A_TurretFi:

; 4935 : 	else
; 4936 : 		dist = 2048*FRACUNIT;

  00031	c7 45 f8 00 00
	00 08		 mov	 DWORD PTR _dist$[ebp], 134217728 ; 08000000H
$LN5@A_TurretFi:

; 4937 : 
; 4938 : 	if (!locvar1)

  00038	83 7d f4 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0003c	75 07		 jne	 SHORT $LN6@A_TurretFi

; 4939 : 		locvar1 = MT_TURRETLASER;

  0003e	c7 45 f4 70 00
	00 00		 mov	 DWORD PTR _locvar1$[ebp], 112 ; 00000070H
$LN6@A_TurretFi:

; 4940 : 
; 4941 : 	while (P_SupermanLook4Players(actor) && count < MAXPLAYERS)

  00045	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _P_SupermanLook4Players
  0004e	83 c4 04	 add	 esp, 4
  00051	85 c0		 test	 eax, eax
  00053	0f 84 95 00 00
	00		 je	 $LN3@A_TurretFi
  00059	83 7d fc 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  0005d	0f 8d 8b 00 00
	00		 jge	 $LN3@A_TurretFi

; 4942 : 	{
; 4943 : 		if (P_AproxDistance(actor->x - actor->target->x, actor->y - actor->target->y) < dist)

  00063	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00066	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00072	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  00075	50		 push	 eax
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00079	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0007f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00082	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00085	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 _P_AproxDistance
  0008e	83 c4 08	 add	 esp, 8
  00091	3b 45 f8	 cmp	 eax, DWORD PTR _dist$[ebp]
  00094	7d 4a		 jge	 SHORT $LN7@A_TurretFi

; 4944 : 		{
; 4945 : 			actor->flags2 |= MF2_FIRING;

  00096	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00099	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0009f	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  000a5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a8	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4946 : 			actor->eflags &= 65535;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b1	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000b7	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000bd	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c0	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 4947 : 			actor->eflags += (locvar1 << 16); // Upper 16 bits contains mobj #

  000c6	8b 45 f4	 mov	 eax, DWORD PTR _locvar1$[ebp]
  000c9	c1 e0 10	 shl	 eax, 16			; 00000010H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000cf	03 81 84 00 00
	00		 add	 eax, DWORD PTR [ecx+132]
  000d5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d8	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 4948 : 			break;

  000de	eb 0e		 jmp	 SHORT $LN3@A_TurretFi
$LN7@A_TurretFi:

; 4949 : 		}
; 4950 : 
; 4951 : 		count++;

  000e0	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000e3	83 c0 01	 add	 eax, 1
  000e6	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 4952 : 	}

  000e9	e9 57 ff ff ff	 jmp	 $LN6@A_TurretFi
$LN3@A_TurretFi:

; 4953 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
_A_TurretFire ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_EggmanBox
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_EggmanBox PROC					; COMDAT

; 4908 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4909 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_EggmanBo
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2a		 jne	 SHORT $LN2@A_EggmanBo
$LN3@A_EggmanBo:

; 4910 : 	{
; 4911 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_EggmanBo

; 4912 : 			CONS_Printf("%s",text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_EggmanBo:

; 4913 : 		return;

  0004f	eb 1c		 jmp	 SHORT $LN1@A_EggmanBo
$LN2@A_EggmanBo:

; 4914 : 	}
; 4915 : 
; 4916 : 	P_DamageMobj(actor->target, actor, actor, 1); // Ow!

  00051	6a 01		 push	 1
  00053	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00056	50		 push	 eax
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0005e	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _P_DamageMobj
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@A_EggmanBo:

; 4917 : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_A_EggmanBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Boss2PogoSFX
_TEXT	SEGMENT
tv158 = -80						; size = 4
_prandom$1 = -9						; size = 1
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_Boss2PogoSFX PROC					; COMDAT

; 4869 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4870 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 4871 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 4872 : 
; 4873 : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00023	74 11		 je	 SHORT $LN3@A_Boss2Pog
  00025	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00028	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0002e	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00031	83 e2 04	 and	 edx, 4
  00034	75 20		 jne	 SHORT $LN2@A_Boss2Pog
$LN3@A_Boss2Pog:

; 4874 : 	{
; 4875 : 		// look for a new target
; 4876 : 		if (P_LookForPlayers(actor, true, false, 0))

  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 01		 push	 1
  0003c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _P_LookForPlayers
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	85 c0		 test	 eax, eax
  0004a	74 05		 je	 SHORT $LN4@A_Boss2Pog

; 4877 : 			return; // got a new target

  0004c	e9 60 01 00 00	 jmp	 $LN1@A_Boss2Pog
$LN4@A_Boss2Pog:

; 4878 : 
; 4879 : 		return;

  00051	e9 5b 01 00 00	 jmp	 $LN1@A_Boss2Pog
$LN2@A_Boss2Pog:

; 4880 : 	}
; 4881 : 
; 4882 : 	// Boing!
; 4883 : 	if (P_AproxDistance(actor->x-actor->target->x, actor->y-actor->target->y) < 256*FRACUNIT)

  00056	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00059	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00062	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00065	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  00068	50		 push	 eax
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0006c	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00072	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00075	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00078	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 _P_AproxDistance
  00081	83 c4 08	 add	 esp, 8
  00084	3d 00 00 00 01	 cmp	 eax, 16777216		; 01000000H
  00089	7d 5b		 jge	 SHORT $LN5@A_Boss2Pog

; 4884 : 	{
; 4885 : 		actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y);

  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00094	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00097	52		 push	 edx
  00098	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009b	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000a1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a4	52		 push	 edx
  000a5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ab	51		 push	 ecx
  000ac	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000af	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _R_PointToAngle2
  000b8	83 c4 10	 add	 esp, 16			; 00000010H
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000be	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4886 : 		P_InstaThrust(actor, actor->angle, actor->info->speed);

  000c1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c4	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ca	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000cd	52		 push	 edx
  000ce	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d1	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000d4	51		 push	 ecx
  000d5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d8	52		 push	 edx
  000d9	e8 00 00 00 00	 call	 _P_InstaThrust
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4887 : 		// pogo on player
; 4888 : 	}

  000e1	e9 8d 00 00 00	 jmp	 $LN6@A_Boss2Pog
$LN5@A_Boss2Pog:

; 4889 : 	else
; 4890 : 	{
; 4891 : 		UINT8 prandom = P_Random();

  000e6	e8 00 00 00 00	 call	 _P_Random
  000eb	88 45 f7	 mov	 BYTE PTR _prandom$1[ebp], al

; 4892 : 		actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y) + (P_Random() & 1 ? -prandom : +prandom);

  000ee	e8 00 00 00 00	 call	 _P_Random
  000f3	0f b6 c0	 movzx	 eax, al
  000f6	83 e0 01	 and	 eax, 1
  000f9	74 0b		 je	 SHORT $LN9@A_Boss2Pog
  000fb	0f b6 4d f7	 movzx	 ecx, BYTE PTR _prandom$1[ebp]
  000ff	f7 d9		 neg	 ecx
  00101	89 4d b0	 mov	 DWORD PTR tv158[ebp], ecx
  00104	eb 07		 jmp	 SHORT $LN10@A_Boss2Pog
$LN9@A_Boss2Pog:
  00106	0f b6 55 f7	 movzx	 edx, BYTE PTR _prandom$1[ebp]
  0010a	89 55 b0	 mov	 DWORD PTR tv158[ebp], edx
$LN10@A_Boss2Pog:
  0010d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00110	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00116	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00119	52		 push	 edx
  0011a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0011d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00123	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00126	52		 push	 edx
  00127	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0012a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0012d	51		 push	 ecx
  0012e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00131	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _R_PointToAngle2
  0013a	83 c4 10	 add	 esp, 16			; 00000010H
  0013d	03 45 b0	 add	 eax, DWORD PTR tv158[ebp]
  00140	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00143	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4893 : 		P_InstaThrust(actor, actor->angle, FixedMul(actor->info->speed,(locvar2)));

  00146	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00149	50		 push	 eax
  0014a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0014d	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00153	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 _FixedMul
  0015c	83 c4 08	 add	 esp, 8
  0015f	50		 push	 eax
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00163	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00166	52		 push	 edx
  00167	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _P_InstaThrust
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@A_Boss2Pog:

; 4894 : 	}
; 4895 : 	if (actor->info->activesound) S_StartSound(actor, actor->info->activesound);

  00173	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00176	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0017c	83 79 54 00	 cmp	 DWORD PTR [ecx+84], 0
  00180	74 19		 je	 SHORT $LN7@A_Boss2Pog
  00182	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00185	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0018b	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0018e	52		 push	 edx
  0018f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 _S_StartSound
  00198	83 c4 08	 add	 esp, 8
$LN7@A_Boss2Pog:

; 4896 : 	actor->momz = locvar1; // Bounce up in air

  0019b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  001a1	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 4897 : 	actor->reactiontime = 1;

  001a4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a7	c7 80 9c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+156], 1
$LN1@A_Boss2Pog:

; 4898 : }

  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	5b		 pop	 ebx
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
_A_Boss2PogoSFX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_GoopSplat
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_GoopSplat PROC					; COMDAT

; 4850 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4851 : 	P_UnsetThingPosition(actor);

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00012	83 c4 04	 add	 esp, 4

; 4852 : 	if (sector_list)

  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sector_list, 0
  0001c	74 18		 je	 SHORT $LN2@A_GoopSpla

; 4853 : 	{
; 4854 : 		P_DelSeclist(sector_list);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _sector_list
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _P_DelSeclist
  00029	83 c4 04	 add	 esp, 4

; 4855 : 		sector_list = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sector_list, 0
$LN2@A_GoopSpla:

; 4856 : 	}
; 4857 : 	actor->flags = MF_SPECIAL; // Not a typo

  00036	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00039	c7 40 60 01 00
	00 00		 mov	 DWORD PTR [eax+96], 1

; 4858 : 	P_SetThingPosition(actor);

  00040	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _P_SetThingPosition
  00049	83 c4 04	 add	 esp, 4

; 4859 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_A_GoopSplat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_DeInvinciblerize
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_DeInvinciblerize PROC				; COMDAT

; 4838 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4839 : 	actor->movecount = actor->state->tics+TICRATE;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	83 c2 23	 add	 edx, 35			; 00000023H
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx

; 4840 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_A_DeInvinciblerize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Invinciblerize
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_Invinciblerize PROC					; COMDAT

; 4824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4825 : 	A_Pain(actor);

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _A_Pain
  00012	83 c4 04	 add	 esp, 4

; 4826 : 	actor->reactiontime = 1;

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	c7 80 9c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+156], 1

; 4827 : 	actor->movecount = TICRATE;

  00022	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00025	c7 80 94 00 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+148], 35	; 00000023H

; 4828 : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_A_Invinciblerize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BossScream
_TEXT	SEGMENT
_fa$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_BossScream PROC					; COMDAT

; 1711 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1712 : 	fixed_t x, y, z;
; 1713 : 	angle_t fa;
; 1714 : 
; 1715 : 	actor->movecount += actor->info->speed*16;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00015	c1 e2 04	 shl	 edx, 4
  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	03 90 94 00 00
	00		 add	 edx, DWORD PTR [eax+148]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00024	89 91 94 00 00
	00		 mov	 DWORD PTR [ecx+148], edx

; 1716 : 	actor->movecount %= 360;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [eax+148]
  00033	99		 cdq
  00034	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  00039	f7 f9		 idiv	 ecx
  0003b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003e	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx

; 1717 : 	fa = (FixedAngle(actor->movecount*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  00044	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00047	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0004d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _FixedAngle
  00056	83 c4 04	 add	 esp, 4
  00059	c1 e8 13	 shr	 eax, 19			; 00000013H
  0005c	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  00061	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 1718 : 	x = actor->x + FixedMul(FINECOSINE(fa),actor->radius);

  00064	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00067	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0006a	51		 push	 ecx
  0006b	8b 55 f0	 mov	 edx, DWORD PTR _fa$[ebp]
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR _finecosine
  00073	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 _FixedMul
  0007c	83 c4 08	 add	 esp, 8
  0007f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00082	03 42 10	 add	 eax, DWORD PTR [edx+16]
  00085	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1719 : 	y = actor->y + FixedMul(FINESINE(fa),actor->radius);

  00088	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0008e	51		 push	 ecx
  0008f	8b 55 f0	 mov	 edx, DWORD PTR _fa$[ebp]
  00092	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _finesine[edx*4]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _FixedMul
  0009f	83 c4 08	 add	 esp, 8
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000a5	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  000a8	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1720 : 
; 1721 : 	z = actor->z - 8*FRACUNIT + (P_Random()<<(FRACBITS-2));

  000ab	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ae	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  000b1	e8 00 00 00 00	 call	 _P_Random
  000b6	0f b6 c8	 movzx	 ecx, al
  000b9	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  000bc	8d 94 0e 00 00
	f8 ff		 lea	 edx, DWORD PTR [esi+ecx-524288]
  000c3	89 55 f4	 mov	 DWORD PTR _z$[ebp], edx

; 1722 : 	if (actor->info->deathsound) S_StartSound(P_SpawnMobj(x, y, z, MT_BOSSEXPLODE), actor->info->deathsound);

  000c6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c9	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000cf	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  000d3	74 2c		 je	 SHORT $LN2@A_BossScre
  000d5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d8	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000de	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000e1	52		 push	 edx
  000e2	6a 19		 push	 25			; 00000019H
  000e4	8b 45 f4	 mov	 eax, DWORD PTR _z$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  000eb	51		 push	 ecx
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  000ef	52		 push	 edx
  000f0	e8 00 00 00 00	 call	 _P_SpawnMobj
  000f5	83 c4 10	 add	 esp, 16			; 00000010H
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _S_StartSound
  000fe	83 c4 08	 add	 esp, 8
$LN2@A_BossScre:

; 1723 : }

  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_A_BossScream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RecyclePowers
_TEXT	SEGMENT
_recyclefrom$1 = -4256					; size = 4
_prandom$2 = -4252					; size = 4
_j$3 = -4248						; size = 4
_counter$4 = -4244					; size = 4
_pindex$5 = -4240					; size = 128
_weaponheld$6 = -4112					; size = 128
_weapons$7 = -3984					; size = 128
_temp$8 = -3856						; size = 3712
_two$9 = -144						; size = 4
_one$10 = -140						; size = 4
_weaponheld$11 = -136					; size = 4
_weapons$12 = -132					; size = 4
_temp$13 = -128						; size = 116
_numplayers$ = -12					; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_actor$ = 8						; size = 4
_A_RecyclePowers PROC					; COMDAT

; 4465 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 a0 12 00 00	 mov	 eax, 4768		; 000012a0H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi

; 4466 : 	INT32 i, numplayers = 0;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _numplayers$[ebp], 0

; 4467 : 
; 4468 : 	actor = NULL;

  00021	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _actor$[ebp], 0

; 4469 : 	if (!multiplayer)

  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0002f	75 05		 jne	 SHORT $LN29@A_RecycleP

; 4470 : 		return;

  00031	e9 5d 08 00 00	 jmp	 $LN1@A_RecycleP
$LN29@A_RecycleP:

; 4471 : 
; 4472 : 	numplayers = 0;

  00036	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _numplayers$[ebp], 0

; 4473 : 
; 4474 : 	// Count the number of players in the game
; 4475 : 	for (i = 0; i < MAXPLAYERS; i++)

  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00044	eb 09		 jmp	 SHORT $LN4@A_RecycleP
$LN2@A_RecycleP:
  00046	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@A_RecycleP:
  0004f	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00053	0f 8d a2 00 00
	00		 jge	 $LN3@A_RecycleP

; 4476 : 		if (playeringame[i] && players[i].mo && players[i].mo->health > 0 && players[i].playerstate == PST_LIVE
; 4477 : 			&& !players[i].exiting && !players[i].powers[pw_super] && !((netgame || multiplayer) && players[i].spectator))

  00059	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0005c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00064	0f 84 8c 00 00
	00		 je	 $LN30@A_RecycleP
  0006a	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00071	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00078	74 7c		 je	 SHORT $LN30@A_RecycleP
  0007a	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00081	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00087	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0008e	7e 66		 jle	 SHORT $LN30@A_RecycleP
  00090	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00097	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  0009e	75 56		 jne	 SHORT $LN30@A_RecycleP
  000a0	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000a7	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  000ae	75 46		 jne	 SHORT $LN30@A_RecycleP
  000b0	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000b7	b9 04 00 00 00	 mov	 ecx, 4
  000bc	6b d1 0f	 imul	 edx, ecx, 15
  000bf	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  000c7	75 2d		 jne	 SHORT $LN30@A_RecycleP
  000c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000d0	75 09		 jne	 SHORT $LN32@A_RecycleP
  000d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000d9	74 12		 je	 SHORT $LN31@A_RecycleP
$LN32@A_RecycleP:
  000db	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000e2	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  000e9	85 c9		 test	 ecx, ecx
  000eb	75 09		 jne	 SHORT $LN30@A_RecycleP
$LN31@A_RecycleP:

; 4478 : 			numplayers++;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _numplayers$[ebp]
  000f0	83 c0 01	 add	 eax, 1
  000f3	89 45 f4	 mov	 DWORD PTR _numplayers$[ebp], eax
$LN30@A_RecycleP:
  000f6	e9 4b ff ff ff	 jmp	 $LN2@A_RecycleP
$LN3@A_RecycleP:

; 4479 : 
; 4480 : 	if (numplayers <= 1)

  000fb	83 7d f4 01	 cmp	 DWORD PTR _numplayers$[ebp], 1
  000ff	7f 0a		 jg	 SHORT $LN33@A_RecycleP

; 4481 : 		return; //nobody to touch!

  00101	e9 8d 07 00 00	 jmp	 $LN1@A_RecycleP
  00106	e9 7f 06 00 00	 jmp	 $LN21@A_RecycleP
$LN33@A_RecycleP:

; 4482 : 
; 4483 : 	else if (numplayers == 2) //simple swap is all that's needed

  0010b	83 7d f4 02	 cmp	 DWORD PTR _numplayers$[ebp], 2
  0010f	0f 85 98 02 00
	00		 jne	 $LN35@A_RecycleP

; 4484 : 	{
; 4485 : 		INT32 temp[NUMPOWERS];
; 4486 : 		INT32 weapons;
; 4487 : 		INT32 weaponheld;
; 4488 : 
; 4489 : 		INT32 one = -1, two = 0; // default value 0 to make the compiler shut up

  00115	c7 85 74 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _one$10[ebp], -1
  0011f	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _two$9[ebp], 0

; 4490 : 
; 4491 : 		for (i = 0; i < MAXPLAYERS; i++)

  00129	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00130	eb 09		 jmp	 SHORT $LN7@A_RecycleP
$LN5@A_RecycleP:
  00132	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00135	83 c0 01	 add	 eax, 1
  00138	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@A_RecycleP:
  0013b	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0013f	0f 8d ba 00 00
	00		 jge	 $LN6@A_RecycleP

; 4492 : 			if (playeringame[i] && players[i].mo && players[i].mo->health > 0 && players[i].playerstate == PST_LIVE
; 4493 : 				&& !players[i].exiting && !players[i].powers[pw_super] && !((netgame || multiplayer) && players[i].spectator))

  00145	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00148	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00150	0f 84 a4 00 00
	00		 je	 $LN41@A_RecycleP
  00156	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0015d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00164	0f 84 90 00 00
	00		 je	 $LN41@A_RecycleP
  0016a	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00171	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00177	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0017e	7e 7a		 jle	 SHORT $LN41@A_RecycleP
  00180	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00187	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  0018e	75 6a		 jne	 SHORT $LN41@A_RecycleP
  00190	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00197	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  0019e	75 5a		 jne	 SHORT $LN41@A_RecycleP
  001a0	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001a7	b9 04 00 00 00	 mov	 ecx, 4
  001ac	6b d1 0f	 imul	 edx, ecx, 15
  001af	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  001b7	75 41		 jne	 SHORT $LN41@A_RecycleP
  001b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  001c0	75 09		 jne	 SHORT $LN39@A_RecycleP
  001c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  001c9	74 12		 je	 SHORT $LN38@A_RecycleP
$LN39@A_RecycleP:
  001cb	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001d2	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  001d9	85 c9		 test	 ecx, ecx
  001db	75 1d		 jne	 SHORT $LN41@A_RecycleP
$LN38@A_RecycleP:

; 4494 : 			{
; 4495 : 				if (one == -1)

  001dd	83 bd 74 ff ff
	ff ff		 cmp	 DWORD PTR _one$10[ebp], -1
  001e4	75 0b		 jne	 SHORT $LN40@A_RecycleP

; 4496 : 					one = i;

  001e6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001e9	89 85 74 ff ff
	ff		 mov	 DWORD PTR _one$10[ebp], eax
  001ef	eb 09		 jmp	 SHORT $LN41@A_RecycleP
$LN40@A_RecycleP:

; 4497 : 				else
; 4498 : 					two = i;

  001f1	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001f4	89 85 70 ff ff
	ff		 mov	 DWORD PTR _two$9[ebp], eax
$LN41@A_RecycleP:

; 4499 : 			}

  001fa	e9 33 ff ff ff	 jmp	 $LN5@A_RecycleP
$LN6@A_RecycleP:

; 4500 : 		for (i = 0; i < NUMPOWERS; i++)

  001ff	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00206	eb 09		 jmp	 SHORT $LN10@A_RecycleP
$LN8@A_RecycleP:
  00208	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0020b	83 c0 01	 add	 eax, 1
  0020e	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@A_RecycleP:
  00211	83 7d f8 1d	 cmp	 DWORD PTR _i$[ebp], 29	; 0000001dH
  00215	0f 8d 8f 00 00
	00		 jge	 $LN9@A_RecycleP

; 4501 : 		{
; 4502 : 			if (i == pw_flashing || i == pw_underwater || i == pw_spacetime
; 4503 : 			    || i == pw_tailsfly || i == pw_extralife || i == pw_super || i == pw_nocontrol)

  0021b	83 7d f8 02	 cmp	 DWORD PTR _i$[ebp], 2
  0021f	74 24		 je	 SHORT $LN43@A_RecycleP
  00221	83 7d f8 06	 cmp	 DWORD PTR _i$[ebp], 6
  00225	74 1e		 je	 SHORT $LN43@A_RecycleP
  00227	83 7d f8 07	 cmp	 DWORD PTR _i$[ebp], 7
  0022b	74 18		 je	 SHORT $LN43@A_RecycleP
  0022d	83 7d f8 05	 cmp	 DWORD PTR _i$[ebp], 5
  00231	74 12		 je	 SHORT $LN43@A_RecycleP
  00233	83 7d f8 08	 cmp	 DWORD PTR _i$[ebp], 8
  00237	74 0c		 je	 SHORT $LN43@A_RecycleP
  00239	83 7d f8 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  0023d	74 06		 je	 SHORT $LN43@A_RecycleP
  0023f	83 7d f8 1b	 cmp	 DWORD PTR _i$[ebp], 27	; 0000001bH
  00243	75 02		 jne	 SHORT $LN42@A_RecycleP
$LN43@A_RecycleP:

; 4504 : 				continue;

  00245	eb c1		 jmp	 SHORT $LN8@A_RecycleP
$LN42@A_RecycleP:

; 4505 : 			temp[i] = players[one].powers[i];

  00247	69 85 74 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$10[ebp], 508
  00251	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00254	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00257	8b 84 90 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx*4+56]
  0025e	89 44 8d 80	 mov	 DWORD PTR _temp$13[ebp+ecx*4], eax

; 4506 : 			players[one].powers[i] = players[two].powers[i];

  00262	69 85 70 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$9[ebp], 508
  0026c	69 8d 74 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _one$10[ebp], 508
  00276	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00279	8b 75 f8	 mov	 esi, DWORD PTR _i$[ebp]
  0027c	8b 84 b0 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+esi*4+56]
  00283	89 84 91 38 00
	00 00		 mov	 DWORD PTR _players[ecx+edx*4+56], eax

; 4507 : 			players[two].powers[i] = temp[i];

  0028a	69 85 70 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$9[ebp], 508
  00294	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00297	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0029a	8b 54 95 80	 mov	 edx, DWORD PTR _temp$13[ebp+edx*4]
  0029e	89 94 88 38 00
	00 00		 mov	 DWORD PTR _players[eax+ecx*4+56], edx

; 4508 : 		}

  002a5	e9 5e ff ff ff	 jmp	 $LN8@A_RecycleP
$LN9@A_RecycleP:

; 4509 : 		//1.1: weapons need to be swapped too
; 4510 : 		weapons = players[one].ringweapons;

  002aa	69 85 74 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$10[ebp], 508
  002b4	8b 88 30 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+48]
  002ba	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _weapons$12[ebp], ecx

; 4511 : 		players[one].ringweapons = players[two].ringweapons;

  002c0	69 85 70 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$9[ebp], 508
  002ca	69 8d 74 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _one$10[ebp], 508
  002d4	8b 90 30 00 00
	00		 mov	 edx, DWORD PTR _players[eax+48]
  002da	89 91 30 00 00
	00		 mov	 DWORD PTR _players[ecx+48], edx

; 4512 : 		players[two].ringweapons = weapons;

  002e0	69 85 70 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$9[ebp], 508
  002ea	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _weapons$12[ebp]
  002f0	89 88 30 00 00
	00		 mov	 DWORD PTR _players[eax+48], ecx

; 4513 : 
; 4514 : 		weaponheld = players[one].currentweapon;

  002f6	69 85 74 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$10[ebp], 508
  00300	8b 88 2c 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+44]
  00306	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _weaponheld$11[ebp], ecx

; 4515 : 		players[one].currentweapon = players[two].currentweapon;

  0030c	69 85 70 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$9[ebp], 508
  00316	69 8d 74 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _one$10[ebp], 508
  00320	8b 90 2c 00 00
	00		 mov	 edx, DWORD PTR _players[eax+44]
  00326	89 91 2c 00 00
	00		 mov	 DWORD PTR _players[ecx+44], edx

; 4516 : 		players[two].currentweapon = weaponheld;

  0032c	69 85 70 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$9[ebp], 508
  00336	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _weaponheld$11[ebp]
  0033c	89 88 2c 00 00
	00		 mov	 DWORD PTR _players[eax+44], ecx

; 4517 : 
; 4518 : 		P_SpawnShieldOrb(players[one].mo->player);

  00342	69 85 74 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$10[ebp], 508
  0034c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00352	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00358	52		 push	 edx
  00359	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  0035e	83 c4 04	 add	 esp, 4

; 4519 : 		P_SpawnShieldOrb(players[two].mo->player);

  00361	69 85 70 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$9[ebp], 508
  0036b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00371	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00377	52		 push	 edx
  00378	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  0037d	83 c4 04	 add	 esp, 4

; 4520 : 		players[one].bonuscount = players[two].bonuscount = 10;

  00380	69 85 70 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$9[ebp], 508
  0038a	c7 80 b0 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _players[eax+176], 10 ; 0000000aH
  00394	69 8d 74 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _one$10[ebp], 508
  0039e	c7 81 b0 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _players[ecx+176], 10 ; 0000000aH

; 4521 : 		//piece o' cake, eh?
; 4522 : 	}

  003a8	e9 dd 03 00 00	 jmp	 $LN21@A_RecycleP
$LN35@A_RecycleP:

; 4523 : 	else
; 4524 : 	{
; 4525 : 		//well, the cake is a LIE!
; 4526 : 		INT32 temp[MAXPLAYERS][NUMPOWERS];
; 4527 : 		INT32 weapons[MAXPLAYERS];
; 4528 : 		INT32 weaponheld[MAXPLAYERS];
; 4529 : 		INT32 pindex[MAXPLAYERS], counter = 0, j = 0, prandom = 0, recyclefrom = 0;

  003ad	c7 85 6c ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _counter$4[ebp], 0
  003b7	c7 85 68 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$3[ebp], 0
  003c1	c7 85 64 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _prandom$2[ebp], 0
  003cb	c7 85 60 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _recyclefrom$1[ebp], 0

; 4530 : 
; 4531 : 		for (i = 0; i < MAXPLAYERS; i++)

  003d5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003dc	eb 09		 jmp	 SHORT $LN13@A_RecycleP
$LN11@A_RecycleP:
  003de	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003e1	83 c0 01	 add	 eax, 1
  003e4	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN13@A_RecycleP:
  003e7	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  003eb	0f 8d 55 01 00
	00		 jge	 $LN12@A_RecycleP

; 4532 : 		{
; 4533 : 			if (playeringame[i] && players[i].playerstate == PST_LIVE
; 4534 : 				&& players[i].mo && players[i].mo->health > 0 && !players[i].exiting && !players[i].powers[pw_super]
; 4535 : 				&& !((netgame || multiplayer) && players[i].spectator))

  003f1	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003f4	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  003fc	0f 84 3f 01 00
	00		 je	 $LN44@A_RecycleP
  00402	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00409	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  00410	0f 85 2b 01 00
	00		 jne	 $LN44@A_RecycleP
  00416	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0041d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00424	0f 84 17 01 00
	00		 je	 $LN44@A_RecycleP
  0042a	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00431	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00437	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0043e	0f 8e fd 00 00
	00		 jle	 $LN44@A_RecycleP
  00444	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0044b	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  00452	0f 85 e9 00 00
	00		 jne	 $LN44@A_RecycleP
  00458	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0045f	b9 04 00 00 00	 mov	 ecx, 4
  00464	6b d1 0f	 imul	 edx, ecx, 15
  00467	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  0046f	0f 85 cc 00 00
	00		 jne	 $LN44@A_RecycleP
  00475	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0047c	75 09		 jne	 SHORT $LN46@A_RecycleP
  0047e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00485	74 16		 je	 SHORT $LN45@A_RecycleP
$LN46@A_RecycleP:
  00487	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0048e	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00495	85 c9		 test	 ecx, ecx
  00497	0f 85 a4 00 00
	00		 jne	 $LN44@A_RecycleP
$LN45@A_RecycleP:

; 4536 : 			{
; 4537 : 				pindex[counter] = i;

  0049d	8b 85 6c ef ff
	ff		 mov	 eax, DWORD PTR _counter$4[ebp]
  004a3	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  004a6	89 8c 85 70 ef
	ff ff		 mov	 DWORD PTR _pindex$5[ebp+eax*4], ecx

; 4538 : 				for (j = 0; j < NUMPOWERS; j++)

  004ad	c7 85 68 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$3[ebp], 0
  004b7	eb 0f		 jmp	 SHORT $LN16@A_RecycleP
$LN14@A_RecycleP:
  004b9	8b 85 68 ef ff
	ff		 mov	 eax, DWORD PTR _j$3[ebp]
  004bf	83 c0 01	 add	 eax, 1
  004c2	89 85 68 ef ff
	ff		 mov	 DWORD PTR _j$3[ebp], eax
$LN16@A_RecycleP:
  004c8	83 bd 68 ef ff
	ff 1d		 cmp	 DWORD PTR _j$3[ebp], 29	; 0000001dH
  004cf	7d 2d		 jge	 SHORT $LN15@A_RecycleP

; 4539 : 					temp[counter][j] = players[i].powers[j];

  004d1	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004d8	6b 8d 6c ef ff
	ff 74		 imul	 ecx, DWORD PTR _counter$4[ebp], 116
  004df	8d 94 0d f0 f0
	ff ff		 lea	 edx, DWORD PTR _temp$8[ebp+ecx]
  004e6	8b 8d 68 ef ff
	ff		 mov	 ecx, DWORD PTR _j$3[ebp]
  004ec	8b b5 68 ef ff
	ff		 mov	 esi, DWORD PTR _j$3[ebp]
  004f2	8b 84 b0 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+esi*4+56]
  004f9	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  004fc	eb bb		 jmp	 SHORT $LN14@A_RecycleP
$LN15@A_RecycleP:

; 4540 : 				//1.1: ring weapons too
; 4541 : 				weapons[counter] = players[i].ringweapons;

  004fe	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00505	8b 8d 6c ef ff
	ff		 mov	 ecx, DWORD PTR _counter$4[ebp]
  0050b	8b 90 30 00 00
	00		 mov	 edx, DWORD PTR _players[eax+48]
  00511	89 94 8d 70 f0
	ff ff		 mov	 DWORD PTR _weapons$7[ebp+ecx*4], edx

; 4542 : 				weaponheld[counter] = players[i].currentweapon;

  00518	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0051f	8b 8d 6c ef ff
	ff		 mov	 ecx, DWORD PTR _counter$4[ebp]
  00525	8b 90 2c 00 00
	00		 mov	 edx, DWORD PTR _players[eax+44]
  0052b	89 94 8d f0 ef
	ff ff		 mov	 DWORD PTR _weaponheld$6[ebp+ecx*4], edx

; 4543 : 				counter++;

  00532	8b 85 6c ef ff
	ff		 mov	 eax, DWORD PTR _counter$4[ebp]
  00538	83 c0 01	 add	 eax, 1
  0053b	89 85 6c ef ff
	ff		 mov	 DWORD PTR _counter$4[ebp], eax
$LN44@A_RecycleP:

; 4544 : 			}
; 4545 : 		}

  00541	e9 98 fe ff ff	 jmp	 $LN11@A_RecycleP
$LN12@A_RecycleP:

; 4546 : 		counter = 0;

  00546	c7 85 6c ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _counter$4[ebp], 0
$LN17@A_RecycleP:

; 4547 : 
; 4548 : 		// Mix them up!
; 4549 : 		for (;;)
; 4550 : 		{
; 4551 : 			if (counter > 255) // fail-safe to avoid endless loop

  00550	81 bd 6c ef ff
	ff ff 00 00 00	 cmp	 DWORD PTR _counter$4[ebp], 255 ; 000000ffH
  0055a	7e 02		 jle	 SHORT $LN47@A_RecycleP

; 4552 : 				break;

  0055c	eb 3a		 jmp	 SHORT $LN18@A_RecycleP
$LN47@A_RecycleP:

; 4553 : 			prandom = P_Random();

  0055e	e8 00 00 00 00	 call	 _P_Random
  00563	0f b6 c0	 movzx	 eax, al
  00566	89 85 64 ef ff
	ff		 mov	 DWORD PTR _prandom$2[ebp], eax

; 4554 : 			prandom %= numplayers; // I love modular arithmetic, don't you?

  0056c	8b 85 64 ef ff
	ff		 mov	 eax, DWORD PTR _prandom$2[ebp]
  00572	99		 cdq
  00573	f7 7d f4	 idiv	 DWORD PTR _numplayers$[ebp]
  00576	89 95 64 ef ff
	ff		 mov	 DWORD PTR _prandom$2[ebp], edx

; 4555 : 			if (prandom) // Make sure it's not a useless mix

  0057c	83 bd 64 ef ff
	ff 00		 cmp	 DWORD PTR _prandom$2[ebp], 0
  00583	74 02		 je	 SHORT $LN48@A_RecycleP

; 4556 : 				break;

  00585	eb 11		 jmp	 SHORT $LN18@A_RecycleP
$LN48@A_RecycleP:

; 4557 : 			counter++;

  00587	8b 85 6c ef ff
	ff		 mov	 eax, DWORD PTR _counter$4[ebp]
  0058d	83 c0 01	 add	 eax, 1
  00590	89 85 6c ef ff
	ff		 mov	 DWORD PTR _counter$4[ebp], eax

; 4558 : 		}

  00596	eb b8		 jmp	 SHORT $LN17@A_RecycleP
$LN18@A_RecycleP:

; 4559 : 
; 4560 : 		counter = 0;

  00598	c7 85 6c ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _counter$4[ebp], 0

; 4561 : 
; 4562 : 		for (i = 0; i < MAXPLAYERS; i++)

  005a2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  005a9	eb 09		 jmp	 SHORT $LN22@A_RecycleP
$LN20@A_RecycleP:
  005ab	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  005ae	83 c0 01	 add	 eax, 1
  005b1	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN22@A_RecycleP:
  005b4	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  005b8	0f 8d cc 01 00
	00		 jge	 $LN21@A_RecycleP

; 4563 : 		{
; 4564 : 			if (playeringame[i] && players[i].playerstate == PST_LIVE
; 4565 : 				&& players[i].mo && players[i].mo->health > 0 && !players[i].exiting && !players[i].powers[pw_super]
; 4566 : 				&& !((netgame || multiplayer) && players[i].spectator))

  005be	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  005c1	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  005c9	0f 84 b6 01 00
	00		 je	 $LN49@A_RecycleP
  005cf	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005d6	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  005dd	0f 85 a2 01 00
	00		 jne	 $LN49@A_RecycleP
  005e3	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005ea	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  005f1	0f 84 8e 01 00
	00		 je	 $LN49@A_RecycleP
  005f7	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005fe	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00604	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0060b	0f 8e 74 01 00
	00		 jle	 $LN49@A_RecycleP
  00611	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00618	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  0061f	0f 85 60 01 00
	00		 jne	 $LN49@A_RecycleP
  00625	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0062c	b9 04 00 00 00	 mov	 ecx, 4
  00631	6b d1 0f	 imul	 edx, ecx, 15
  00634	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  0063c	0f 85 43 01 00
	00		 jne	 $LN49@A_RecycleP
  00642	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00649	75 09		 jne	 SHORT $LN51@A_RecycleP
  0064b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00652	74 16		 je	 SHORT $LN50@A_RecycleP
$LN51@A_RecycleP:
  00654	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0065b	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00662	85 c9		 test	 ecx, ecx
  00664	0f 85 1b 01 00
	00		 jne	 $LN49@A_RecycleP
$LN50@A_RecycleP:

; 4567 : 			{
; 4568 : 				recyclefrom = (counter + prandom) % numplayers;

  0066a	8b 85 6c ef ff
	ff		 mov	 eax, DWORD PTR _counter$4[ebp]
  00670	03 85 64 ef ff
	ff		 add	 eax, DWORD PTR _prandom$2[ebp]
  00676	99		 cdq
  00677	f7 7d f4	 idiv	 DWORD PTR _numplayers$[ebp]
  0067a	89 95 60 ef ff
	ff		 mov	 DWORD PTR _recyclefrom$1[ebp], edx

; 4569 : 				for (j = 0; j < NUMPOWERS; j++)

  00680	c7 85 68 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$3[ebp], 0
  0068a	eb 0f		 jmp	 SHORT $LN25@A_RecycleP
$LN23@A_RecycleP:
  0068c	8b 85 68 ef ff
	ff		 mov	 eax, DWORD PTR _j$3[ebp]
  00692	83 c0 01	 add	 eax, 1
  00695	89 85 68 ef ff
	ff		 mov	 DWORD PTR _j$3[ebp], eax
$LN25@A_RecycleP:
  0069b	83 bd 68 ef ff
	ff 1d		 cmp	 DWORD PTR _j$3[ebp], 29	; 0000001dH
  006a2	7d 71		 jge	 SHORT $LN24@A_RecycleP

; 4570 : 				{
; 4571 : 					if (j == pw_flashing || j == pw_underwater || j == pw_spacetime
; 4572 : 					    || j == pw_tailsfly || j == pw_extralife || j == pw_super || j == pw_nocontrol)

  006a4	83 bd 68 ef ff
	ff 02		 cmp	 DWORD PTR _j$3[ebp], 2
  006ab	74 36		 je	 SHORT $LN53@A_RecycleP
  006ad	83 bd 68 ef ff
	ff 06		 cmp	 DWORD PTR _j$3[ebp], 6
  006b4	74 2d		 je	 SHORT $LN53@A_RecycleP
  006b6	83 bd 68 ef ff
	ff 07		 cmp	 DWORD PTR _j$3[ebp], 7
  006bd	74 24		 je	 SHORT $LN53@A_RecycleP
  006bf	83 bd 68 ef ff
	ff 05		 cmp	 DWORD PTR _j$3[ebp], 5
  006c6	74 1b		 je	 SHORT $LN53@A_RecycleP
  006c8	83 bd 68 ef ff
	ff 08		 cmp	 DWORD PTR _j$3[ebp], 8
  006cf	74 12		 je	 SHORT $LN53@A_RecycleP
  006d1	83 bd 68 ef ff
	ff 0f		 cmp	 DWORD PTR _j$3[ebp], 15	; 0000000fH
  006d8	74 09		 je	 SHORT $LN53@A_RecycleP
  006da	83 bd 68 ef ff
	ff 1b		 cmp	 DWORD PTR _j$3[ebp], 27	; 0000001bH
  006e1	75 02		 jne	 SHORT $LN52@A_RecycleP
$LN53@A_RecycleP:

; 4573 : 						continue;

  006e3	eb a7		 jmp	 SHORT $LN23@A_RecycleP
$LN52@A_RecycleP:

; 4574 : 					players[i].powers[j] = temp[recyclefrom][j];

  006e5	6b 85 60 ef ff
	ff 74		 imul	 eax, DWORD PTR _recyclefrom$1[ebp], 116
  006ec	8d 8c 05 f0 f0
	ff ff		 lea	 ecx, DWORD PTR _temp$8[ebp+eax]
  006f3	69 55 f8 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  006fa	8b 85 68 ef ff
	ff		 mov	 eax, DWORD PTR _j$3[ebp]
  00700	8b b5 68 ef ff
	ff		 mov	 esi, DWORD PTR _j$3[ebp]
  00706	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00709	89 8c 82 38 00
	00 00		 mov	 DWORD PTR _players[edx+eax*4+56], ecx

; 4575 : 				}

  00710	e9 77 ff ff ff	 jmp	 $LN23@A_RecycleP
$LN24@A_RecycleP:

; 4576 : 				//1.1: weapon rings too
; 4577 : 				players[i].ringweapons = weapons[recyclefrom];

  00715	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0071c	8b 8d 60 ef ff
	ff		 mov	 ecx, DWORD PTR _recyclefrom$1[ebp]
  00722	8b 94 8d 70 f0
	ff ff		 mov	 edx, DWORD PTR _weapons$7[ebp+ecx*4]
  00729	89 90 30 00 00
	00		 mov	 DWORD PTR _players[eax+48], edx

; 4578 : 				players[i].currentweapon = weaponheld[recyclefrom];

  0072f	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00736	8b 8d 60 ef ff
	ff		 mov	 ecx, DWORD PTR _recyclefrom$1[ebp]
  0073c	8b 94 8d f0 ef
	ff ff		 mov	 edx, DWORD PTR _weaponheld$6[ebp+ecx*4]
  00743	89 90 2c 00 00
	00		 mov	 DWORD PTR _players[eax+44], edx

; 4579 : 
; 4580 : 				P_SpawnShieldOrb(players[i].mo->player);

  00749	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00750	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00756	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0075c	52		 push	 edx
  0075d	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  00762	83 c4 04	 add	 esp, 4

; 4581 : 				players[i].bonuscount = 10;

  00765	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0076c	c7 80 b0 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _players[eax+176], 10 ; 0000000aH

; 4582 : 				counter++;

  00776	8b 85 6c ef ff
	ff		 mov	 eax, DWORD PTR _counter$4[ebp]
  0077c	83 c0 01	 add	 eax, 1
  0077f	89 85 6c ef ff
	ff		 mov	 DWORD PTR _counter$4[ebp], eax
$LN49@A_RecycleP:

; 4583 : 			}
; 4584 : 		}

  00785	e9 21 fe ff ff	 jmp	 $LN20@A_RecycleP
$LN21@A_RecycleP:

; 4585 : 	}
; 4586 : 	for (i = 0; i < MAXPLAYERS; i++) //just for sneakers/invinc.

  0078a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00791	eb 09		 jmp	 SHORT $LN28@A_RecycleP
$LN26@A_RecycleP:
  00793	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00796	83 c0 01	 add	 eax, 1
  00799	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN28@A_RecycleP:
  0079c	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  007a0	0f 8d e1 00 00
	00		 jge	 $LN27@A_RecycleP

; 4587 : 		if (playeringame[i] && players[i].playerstate == PST_LIVE
; 4588 : 			&& players[i].mo && players[i].mo->health > 0 && !players[i].exiting && !players[i].powers[pw_super]
; 4589 : 			&& !((netgame || multiplayer) && players[i].spectator))

  007a6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  007a9	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  007b1	0f 84 cb 00 00
	00		 je	 $LN57@A_RecycleP
  007b7	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007be	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  007c5	0f 85 b7 00 00
	00		 jne	 $LN57@A_RecycleP
  007cb	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007d2	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  007d9	0f 84 a3 00 00
	00		 je	 $LN57@A_RecycleP
  007df	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007e6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  007ec	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  007f3	0f 8e 89 00 00
	00		 jle	 $LN57@A_RecycleP
  007f9	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00800	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  00807	75 79		 jne	 SHORT $LN57@A_RecycleP
  00809	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00810	b9 04 00 00 00	 mov	 ecx, 4
  00815	6b d1 0f	 imul	 edx, ecx, 15
  00818	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  00820	75 60		 jne	 SHORT $LN57@A_RecycleP
  00822	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00829	75 09		 jne	 SHORT $LN56@A_RecycleP
  0082b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00832	74 12		 je	 SHORT $LN55@A_RecycleP
$LN56@A_RecycleP:
  00834	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0083b	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00842	85 c9		 test	 ecx, ecx
  00844	75 3c		 jne	 SHORT $LN57@A_RecycleP
$LN55@A_RecycleP:

; 4590 : 			if (P_IsLocalPlayer(players[i].mo->player))

  00846	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0084d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00853	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00859	52		 push	 edx
  0085a	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  0085f	83 c4 04	 add	 esp, 4
  00862	85 c0		 test	 eax, eax
  00864	74 1c		 je	 SHORT $LN57@A_RecycleP

; 4591 : 				P_RestoreMusic(players[i].mo->player);

  00866	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0086d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00873	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00879	52		 push	 edx
  0087a	e8 00 00 00 00	 call	 _P_RestoreMusic
  0087f	83 c4 04	 add	 esp, 4
$LN57@A_RecycleP:
  00882	e9 0c ff ff ff	 jmp	 $LN26@A_RecycleP
$LN27@A_RecycleP:

; 4592 : 
; 4593 : 	S_StartSound(NULL, sfx_gravch); //heh, the sound effect I used is already in

  00887	6a 4d		 push	 77			; 0000004dH
  00889	6a 00		 push	 0
  0088b	e8 00 00 00 00	 call	 _S_StartSound
  00890	83 c4 08	 add	 esp, 8
$LN1@A_RecycleP:

; 4594 : }

  00893	5f		 pop	 edi
  00894	5e		 pop	 esi
  00895	5b		 pop	 ebx
  00896	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00899	33 cd		 xor	 ecx, ebp
  0089b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008a0	8b e5		 mov	 esp, ebp
  008a2	5d		 pop	 ebp
  008a3	c3		 ret	 0
_A_RecyclePowers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MixUp
_TEXT	SEGMENT
_transspeed$1 = -1216					; size = 128
_transflag$2 = -1088					; size = 128
_transtracer$3 = -960					; size = 128
_teleportfrom$4 = -832					; size = 4
_counter$5 = -828					; size = 4
_pindex$6 = -824					; size = 128
_anglepos$7 = -696					; size = 128
_position$8 = -568					; size = 384
_transspeed$9 = -184					; size = 4
_flags2$10 = -180					; size = 4
_flags1$11 = -176					; size = 4
_tempthing$12 = -172					; size = 4
_two$13 = -168						; size = 4
_one$14 = -164						; size = 4
_angle$15 = -160					; size = 4
_z$16 = -156						; size = 4
_y$17 = -152						; size = 4
_x$18 = -148						; size = 4
_prandom$ = -144					; size = 4
_numplayers$ = -140					; size = 4
_i$ = -136						; size = 4
_teleported$ = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_actor$ = 8						; size = 4
_A_MixUp PROC						; COMDAT

; 4254 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 05 00
	00		 sub	 esp, 1408		; 00000580H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4255 : 	boolean teleported[MAXPLAYERS];
; 4256 : 	INT32 i, numplayers = 0, prandom = 0;

  00016	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _numplayers$[ebp], 0
  00020	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _prandom$[ebp], 0

; 4257 : 
; 4258 : 	actor = NULL;

  0002a	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _actor$[ebp], 0

; 4259 : 	if (!multiplayer)

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00038	75 05		 jne	 SHORT $LN23@A_MixUp

; 4260 : 		return;

  0003a	e9 fa 0c 00 00	 jmp	 $LN1@A_MixUp
$LN23@A_MixUp:

; 4261 : 
; 4262 : 	// No mix-up monitors in hide and seek! With so little time to hide,
; 4263 : 	// random factors causing you to lose your hiding spot are unfun.
; 4264 : 	if (gametype == GT_TAG && cv_tagtype.value)

  0003f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00046	83 f8 03	 cmp	 eax, 3
  00049	75 0e		 jne	 SHORT $LN24@A_MixUp
  0004b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00052	74 05		 je	 SHORT $LN24@A_MixUp

; 4265 : 		return;

  00054	e9 e0 0c 00 00	 jmp	 $LN1@A_MixUp
$LN24@A_MixUp:

; 4266 : 
; 4267 : 	numplayers = 0;

  00059	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _numplayers$[ebp], 0

; 4268 : 	memset(teleported, 0, sizeof (teleported));

  00063	68 80 00 00 00	 push	 128			; 00000080H
  00068	6a 00		 push	 0
  0006a	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _teleported$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _memset
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4269 : 
; 4270 : 	// Count the number of players in the game
; 4271 : 	// and grab their xyz coords
; 4272 : 	for (i = 0; i < MAXPLAYERS; i++)

  00079	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00083	eb 0f		 jmp	 SHORT $LN4@A_MixUp
$LN2@A_MixUp:
  00085	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0008b	83 c0 01	 add	 eax, 1
  0008e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN4@A_MixUp:
  00094	83 bd 78 ff ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0009b	0f 8d c6 00 00
	00		 jge	 $LN3@A_MixUp

; 4273 : 		if (playeringame[i] && players[i].mo && players[i].mo->health > 0 && players[i].playerstate == PST_LIVE
; 4274 : 			&& !players[i].exiting && !players[i].powers[pw_super])

  000a1	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000a7	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000af	0f 84 ad 00 00
	00		 je	 $LN25@A_MixUp
  000b5	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  000bf	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  000c6	0f 84 96 00 00
	00		 je	 $LN25@A_MixUp
  000cc	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  000d6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  000dc	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  000e3	7e 7d		 jle	 SHORT $LN25@A_MixUp
  000e5	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  000ef	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  000f6	75 6a		 jne	 SHORT $LN25@A_MixUp
  000f8	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00102	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  00109	75 57		 jne	 SHORT $LN25@A_MixUp
  0010b	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00115	b9 04 00 00 00	 mov	 ecx, 4
  0011a	6b d1 0f	 imul	 edx, ecx, 15
  0011d	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  00125	75 3b		 jne	 SHORT $LN25@A_MixUp

; 4275 : 		{
; 4276 : 			if ((netgame || multiplayer) && players[i].spectator) // Ignore spectators

  00127	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0012e	75 09		 jne	 SHORT $LN27@A_MixUp
  00130	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00137	74 1a		 je	 SHORT $LN26@A_MixUp
$LN27@A_MixUp:
  00139	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00143	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  0014a	85 c9		 test	 ecx, ecx
  0014c	74 05		 je	 SHORT $LN26@A_MixUp

; 4277 : 				continue;

  0014e	e9 32 ff ff ff	 jmp	 $LN2@A_MixUp
$LN26@A_MixUp:

; 4278 : 
; 4279 : 			numplayers++;

  00153	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _numplayers$[ebp]
  00159	83 c0 01	 add	 eax, 1
  0015c	89 85 74 ff ff
	ff		 mov	 DWORD PTR _numplayers$[ebp], eax
$LN25@A_MixUp:

; 4280 : 		}

  00162	e9 1e ff ff ff	 jmp	 $LN2@A_MixUp
$LN3@A_MixUp:

; 4281 : 
; 4282 : 	if (numplayers <= 1) // Not enough players to mix up.

  00167	83 bd 74 ff ff
	ff 01		 cmp	 DWORD PTR _numplayers$[ebp], 1
  0016e	7f 0a		 jg	 SHORT $LN28@A_MixUp

; 4283 : 		return;

  00170	e9 c4 0b 00 00	 jmp	 $LN1@A_MixUp
  00175	e9 01 0a 00 00	 jmp	 $LN18@A_MixUp
$LN28@A_MixUp:

; 4284 : 	else if (numplayers == 2) // Special case -- simple swap

  0017a	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _numplayers$[ebp], 2
  00181	0f 85 e7 03 00
	00		 jne	 $LN30@A_MixUp

; 4285 : 	{
; 4286 : 		fixed_t x, y, z;
; 4287 : 		angle_t angle;
; 4288 : 		INT32 one = -1, two = 0; // default value 0 to make the compiler shut up

  00187	c7 85 5c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _one$14[ebp], -1
  00191	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _two$13[ebp], 0

; 4289 : 
; 4290 : 		// Zoom tube stuff
; 4291 : 		mobj_t *tempthing = NULL; //tracer

  0019b	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempthing$12[ebp], 0

; 4292 : 		pflags_t flags1,flags2;   //player pflags
; 4293 : 		INT32 transspeed;          //player speed
; 4294 : 
; 4295 : 		for (i = 0; i < MAXPLAYERS; i++)

  001a5	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  001af	eb 0f		 jmp	 SHORT $LN7@A_MixUp
$LN5@A_MixUp:
  001b1	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  001b7	83 c0 01	 add	 eax, 1
  001ba	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN7@A_MixUp:
  001c0	83 bd 78 ff ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  001c7	0f 8d e4 00 00
	00		 jge	 $LN6@A_MixUp

; 4296 : 			if (playeringame[i] && players[i].mo && players[i].mo->health > 0 && players[i].playerstate == PST_LIVE
; 4297 : 				&& !players[i].exiting && !players[i].powers[pw_super])

  001cd	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  001d3	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  001db	0f 84 cb 00 00
	00		 je	 $LN36@A_MixUp
  001e1	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  001eb	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  001f2	0f 84 b4 00 00
	00		 je	 $LN36@A_MixUp
  001f8	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00202	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00208	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0020f	0f 8e 97 00 00
	00		 jle	 $LN36@A_MixUp
  00215	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  0021f	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  00226	0f 85 80 00 00
	00		 jne	 $LN36@A_MixUp
  0022c	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00236	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  0023d	75 6d		 jne	 SHORT $LN36@A_MixUp
  0023f	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00249	b9 04 00 00 00	 mov	 ecx, 4
  0024e	6b d1 0f	 imul	 edx, ecx, 15
  00251	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  00259	75 51		 jne	 SHORT $LN36@A_MixUp

; 4298 : 			{
; 4299 : 				if ((netgame || multiplayer) && players[i].spectator) // Ignore spectators

  0025b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00262	75 09		 jne	 SHORT $LN34@A_MixUp
  00264	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0026b	74 1a		 je	 SHORT $LN33@A_MixUp
$LN34@A_MixUp:
  0026d	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00277	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  0027e	85 c9		 test	 ecx, ecx
  00280	74 05		 je	 SHORT $LN33@A_MixUp

; 4300 : 					continue;

  00282	e9 2a ff ff ff	 jmp	 $LN5@A_MixUp
$LN33@A_MixUp:

; 4301 : 
; 4302 : 				if (one == -1)

  00287	83 bd 5c ff ff
	ff ff		 cmp	 DWORD PTR _one$14[ebp], -1
  0028e	75 0e		 jne	 SHORT $LN35@A_MixUp

; 4303 : 					one = i;

  00290	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00296	89 85 5c ff ff
	ff		 mov	 DWORD PTR _one$14[ebp], eax
  0029c	eb 0e		 jmp	 SHORT $LN36@A_MixUp
$LN35@A_MixUp:

; 4304 : 				else
; 4305 : 				{
; 4306 : 					two = i;

  0029e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  002a4	89 85 58 ff ff
	ff		 mov	 DWORD PTR _two$13[ebp], eax

; 4307 : 					break;

  002aa	eb 05		 jmp	 SHORT $LN6@A_MixUp
$LN36@A_MixUp:

; 4308 : 				}
; 4309 : 			}

  002ac	e9 00 ff ff ff	 jmp	 $LN5@A_MixUp
$LN6@A_MixUp:

; 4310 : 
; 4311 : 		//get this done first!
; 4312 : 		tempthing = players[one].mo->tracer;

  002b1	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  002bb	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  002c1	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  002c7	89 95 54 ff ff
	ff		 mov	 DWORD PTR _tempthing$12[ebp], edx

; 4313 : 		P_SetTarget(&players[one].mo->tracer, players[two].mo->tracer);

  002cd	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  002d7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  002dd	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  002e3	52		 push	 edx
  002e4	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  002ee	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  002f4	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  002fa	51		 push	 ecx
  002fb	e8 00 00 00 00	 call	 _P_SetTarget
  00300	83 c4 08	 add	 esp, 8

; 4314 : 		P_SetTarget(&players[two].mo->tracer, tempthing);

  00303	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _tempthing$12[ebp]
  00309	50		 push	 eax
  0030a	69 8d 58 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _two$13[ebp], 508
  00314	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0031a	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  00320	52		 push	 edx
  00321	e8 00 00 00 00	 call	 _P_SetTarget
  00326	83 c4 08	 add	 esp, 8

; 4315 : 
; 4316 : 		//zoom tubes use player->speed to determine direction and speed
; 4317 : 		transspeed = players[one].speed;

  00329	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  00333	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+268]
  00339	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _transspeed$9[ebp], ecx

; 4318 : 		players[one].speed = players[two].speed;

  0033f	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  00349	69 8d 5c ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _one$14[ebp], 508
  00353	8b 90 0c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+268]
  00359	89 91 0c 01 00
	00		 mov	 DWORD PTR _players[ecx+268], edx

; 4319 : 		players[two].speed = transspeed;

  0035f	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  00369	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _transspeed$9[ebp]
  0036f	89 88 0c 01 00
	00		 mov	 DWORD PTR _players[eax+268], ecx

; 4320 : 
; 4321 : 		//set flags variables now but DON'T set them.
; 4322 : 		flags1 = (players[one].pflags & (PF_ITEMHANG|PF_MACESPIN|PF_ROPEHANG|PF_MINECART));

  00375	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  0037f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00385	81 e1 00 00 18
	60		 and	 ecx, 1612185600		; 60180000H
  0038b	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _flags1$11[ebp], ecx

; 4323 : 		flags2 = (players[two].pflags & (PF_ITEMHANG|PF_MACESPIN|PF_ROPEHANG|PF_MINECART));

  00391	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  0039b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  003a1	81 e1 00 00 18
	60		 and	 ecx, 1612185600		; 60180000H
  003a7	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _flags2$10[ebp], ecx

; 4324 : 
; 4325 : 		x = players[one].mo->x;

  003ad	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  003b7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  003bd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003c0	89 95 6c ff ff
	ff		 mov	 DWORD PTR _x$18[ebp], edx

; 4326 : 		y = players[one].mo->y;

  003c6	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  003d0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  003d6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003d9	89 95 68 ff ff
	ff		 mov	 DWORD PTR _y$17[ebp], edx

; 4327 : 		z = players[one].mo->z;

  003df	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  003e9	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  003ef	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  003f2	89 95 64 ff ff
	ff		 mov	 DWORD PTR _z$16[ebp], edx

; 4328 : 		angle = players[one].mo->angle;

  003f8	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  00402	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00408	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0040b	89 95 60 ff ff
	ff		 mov	 DWORD PTR _angle$15[ebp], edx

; 4329 : 
; 4330 : 		P_MixUp(players[one].mo, players[two].mo->x, players[two].mo->y,

  00411	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  0041b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00421	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00424	52		 push	 edx
  00425	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  0042f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00435	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00438	52		 push	 edx
  00439	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  00443	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00449	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0044c	52		 push	 edx
  0044d	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  00457	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0045d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00460	52		 push	 edx
  00461	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  0046b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00471	51		 push	 ecx
  00472	e8 00 00 00 00	 call	 _P_MixUp
  00477	83 c4 14	 add	 esp, 20			; 00000014H

; 4331 : 			players[two].mo->z, players[two].mo->angle);
; 4332 : 
; 4333 : 		P_MixUp(players[two].mo, x, y, z, angle);

  0047a	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _angle$15[ebp]
  00480	50		 push	 eax
  00481	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _z$16[ebp]
  00487	51		 push	 ecx
  00488	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _y$17[ebp]
  0048e	52		 push	 edx
  0048f	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _x$18[ebp]
  00495	50		 push	 eax
  00496	69 8d 58 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _two$13[ebp], 508
  004a0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  004a6	52		 push	 edx
  004a7	e8 00 00 00 00	 call	 _P_MixUp
  004ac	83 c4 14	 add	 esp, 20			; 00000014H

; 4334 : 
; 4335 : 		//flags set after mixup.  Stupid P_ResetPlayer() takes away some of the flags we look for...
; 4336 : 		//but not all of them!  So we need to make sure they aren't set wrong or anything.
; 4337 : 		players[one].pflags &= ~(PF_ITEMHANG|PF_MACESPIN|PF_ROPEHANG|PF_MINECART);

  004af	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  004b9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  004bf	81 e1 ff ff e7
	9f		 and	 ecx, -1612185601	; 9fe7ffffH
  004c5	69 95 5c ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _one$14[ebp], 508
  004cf	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 4338 : 		players[one].pflags |= flags2;

  004d5	69 85 5c ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _one$14[ebp], 508
  004df	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  004e5	0b 8d 4c ff ff
	ff		 or	 ecx, DWORD PTR _flags2$10[ebp]
  004eb	69 95 5c ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _one$14[ebp], 508
  004f5	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 4339 : 		players[two].pflags &= ~(PF_ITEMHANG|PF_MACESPIN|PF_ROPEHANG|PF_MINECART);

  004fb	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  00505	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0050b	81 e1 ff ff e7
	9f		 and	 ecx, -1612185601	; 9fe7ffffH
  00511	69 95 58 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _two$13[ebp], 508
  0051b	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 4340 : 		players[two].pflags |= flags1;

  00521	69 85 58 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _two$13[ebp], 508
  0052b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00531	0b 8d 50 ff ff
	ff		 or	 ecx, DWORD PTR _flags1$11[ebp]
  00537	69 95 58 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _two$13[ebp], 508
  00541	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 4341 : 
; 4342 : 		teleported[one] = true;

  00547	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _one$14[ebp]
  0054d	c7 84 85 7c ff
	ff ff 01 00 00
	00		 mov	 DWORD PTR _teleported$[ebp+eax*4], 1

; 4343 : 		teleported[two] = true;

  00558	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _two$13[ebp]
  0055e	c7 84 85 7c ff
	ff ff 01 00 00
	00		 mov	 DWORD PTR _teleported$[ebp+eax*4], 1

; 4344 : 	}

  00569	e9 0d 06 00 00	 jmp	 $LN18@A_MixUp
$LN30@A_MixUp:

; 4345 : 	else
; 4346 : 	{
; 4347 : 		fixed_t position[MAXPLAYERS][3];
; 4348 : 		angle_t anglepos[MAXPLAYERS];
; 4349 : 		INT32 pindex[MAXPLAYERS], counter = 0, teleportfrom = 0;

  0056e	c7 85 c4 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _counter$5[ebp], 0
  00578	c7 85 c0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _teleportfrom$4[ebp], 0

; 4350 : 
; 4351 : 		// Zoom tube stuff
; 4352 : 		mobj_t *transtracer[MAXPLAYERS]; //tracer
; 4353 : 		pflags_t transflag[MAXPLAYERS];  //player pflags
; 4354 : 		INT32 transspeed[MAXPLAYERS];     //player speed
; 4355 : 
; 4356 : 		for (i = 0; i < MAXPLAYERS; i++)

  00582	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0058c	eb 0f		 jmp	 SHORT $LN10@A_MixUp
$LN8@A_MixUp:
  0058e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00594	83 c0 01	 add	 eax, 1
  00597	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN10@A_MixUp:
  0059d	83 bd 78 ff ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  005a4	0f 8d 8e 00 00
	00		 jge	 $LN9@A_MixUp

; 4357 : 		{
; 4358 : 			position[i][0] = position[i][1] = position[i][2] = anglepos[i] = pindex[i] = -1;

  005aa	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  005b0	c7 84 85 c8 fc
	ff ff ff ff ff
	ff		 mov	 DWORD PTR _pindex$6[ebp+eax*4], -1
  005bb	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  005c1	c7 84 8d 48 fd
	ff ff ff ff ff
	ff		 mov	 DWORD PTR _anglepos$7[ebp+ecx*4], -1
  005cc	6b 95 78 ff ff
	ff 0c		 imul	 edx, DWORD PTR _i$[ebp], 12
  005d3	8d 84 15 c8 fd
	ff ff		 lea	 eax, DWORD PTR _position$8[ebp+edx]
  005da	b9 04 00 00 00	 mov	 ecx, 4
  005df	d1 e1		 shl	 ecx, 1
  005e1	c7 04 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+ecx], -1
  005e8	6b 95 78 ff ff
	ff 0c		 imul	 edx, DWORD PTR _i$[ebp], 12
  005ef	8d 84 15 c8 fd
	ff ff		 lea	 eax, DWORD PTR _position$8[ebp+edx]
  005f6	b9 04 00 00 00	 mov	 ecx, 4
  005fb	c1 e1 00	 shl	 ecx, 0
  005fe	c7 04 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+ecx], -1
  00605	6b 95 78 ff ff
	ff 0c		 imul	 edx, DWORD PTR _i$[ebp], 12
  0060c	8d 84 15 c8 fd
	ff ff		 lea	 eax, DWORD PTR _position$8[ebp+edx]
  00613	b9 04 00 00 00	 mov	 ecx, 4
  00618	6b d1 00	 imul	 edx, ecx, 0
  0061b	c7 04 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+edx], -1

; 4359 : 			teleported[i] = false;

  00622	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00628	c7 84 85 7c ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _teleported$[ebp+eax*4], 0

; 4360 : 		}

  00633	e9 56 ff ff ff	 jmp	 $LN8@A_MixUp
$LN9@A_MixUp:

; 4361 : 
; 4362 : 		for (i = 0; i < MAXPLAYERS; i++)

  00638	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00642	eb 0f		 jmp	 SHORT $LN13@A_MixUp
$LN11@A_MixUp:
  00644	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0064a	83 c0 01	 add	 eax, 1
  0064d	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN13@A_MixUp:
  00653	83 bd 78 ff ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0065a	0f 8d 84 02 00
	00		 jge	 $LN12@A_MixUp

; 4363 : 		{
; 4364 : 			if (playeringame[i] && players[i].playerstate == PST_LIVE
; 4365 : 				&& players[i].mo && players[i].mo->health > 0 && !players[i].exiting && !players[i].powers[pw_super])

  00660	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00666	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0066e	0f 84 6b 02 00
	00		 je	 $LN37@A_MixUp
  00674	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  0067e	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  00685	0f 85 54 02 00
	00		 jne	 $LN37@A_MixUp
  0068b	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00695	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0069c	0f 84 3d 02 00
	00		 je	 $LN37@A_MixUp
  006a2	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  006ac	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  006b2	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  006b9	0f 8e 20 02 00
	00		 jle	 $LN37@A_MixUp
  006bf	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  006c9	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  006d0	0f 85 09 02 00
	00		 jne	 $LN37@A_MixUp
  006d6	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  006e0	b9 04 00 00 00	 mov	 ecx, 4
  006e5	6b d1 0f	 imul	 edx, ecx, 15
  006e8	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  006f0	0f 85 e9 01 00
	00		 jne	 $LN37@A_MixUp

; 4366 : 			{
; 4367 : 				if ((netgame || multiplayer) && players[i].spectator)// Ignore spectators

  006f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  006fd	75 09		 jne	 SHORT $LN39@A_MixUp
  006ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00706	74 1a		 je	 SHORT $LN38@A_MixUp
$LN39@A_MixUp:
  00708	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00712	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00719	85 c9		 test	 ecx, ecx
  0071b	74 05		 je	 SHORT $LN38@A_MixUp

; 4368 : 					continue;

  0071d	e9 22 ff ff ff	 jmp	 $LN11@A_MixUp
$LN38@A_MixUp:

; 4369 : 
; 4370 : 				position[counter][0] = players[i].mo->x;

  00722	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  0072c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00732	6b 95 c4 fc ff
	ff 0c		 imul	 edx, DWORD PTR _counter$5[ebp], 12
  00739	8d 84 15 c8 fd
	ff ff		 lea	 eax, DWORD PTR _position$8[ebp+edx]
  00740	ba 04 00 00 00	 mov	 edx, 4
  00745	6b d2 00	 imul	 edx, edx, 0
  00748	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0074b	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 4371 : 				position[counter][1] = players[i].mo->y;

  0074e	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00758	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0075e	6b 95 c4 fc ff
	ff 0c		 imul	 edx, DWORD PTR _counter$5[ebp], 12
  00765	8d 84 15 c8 fd
	ff ff		 lea	 eax, DWORD PTR _position$8[ebp+edx]
  0076c	ba 04 00 00 00	 mov	 edx, 4
  00771	c1 e2 00	 shl	 edx, 0
  00774	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00777	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 4372 : 				position[counter][2] = players[i].mo->z;

  0077a	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00784	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0078a	6b 95 c4 fc ff
	ff 0c		 imul	 edx, DWORD PTR _counter$5[ebp], 12
  00791	8d 84 15 c8 fd
	ff ff		 lea	 eax, DWORD PTR _position$8[ebp+edx]
  00798	ba 04 00 00 00	 mov	 edx, 4
  0079d	d1 e2		 shl	 edx, 1
  0079f	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  007a2	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 4373 : 				pindex[counter] = i;

  007a5	8b 85 c4 fc ff
	ff		 mov	 eax, DWORD PTR _counter$5[ebp]
  007ab	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  007b1	89 8c 85 c8 fc
	ff ff		 mov	 DWORD PTR _pindex$6[ebp+eax*4], ecx

; 4374 : 				anglepos[counter] = players[i].mo->angle;

  007b8	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  007c2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  007c8	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _counter$5[ebp]
  007ce	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  007d1	89 84 95 48 fd
	ff ff		 mov	 DWORD PTR _anglepos$7[ebp+edx*4], eax

; 4375 : 				players[i].mo->momx = players[i].mo->momy = players[i].mo->momz =

  007d8	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  007e2	c7 80 48 01 00
	00 01 00 00 00	 mov	 DWORD PTR _players[eax+328], 1
  007ec	69 8d 78 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _i$[ebp], 508
  007f6	c7 81 44 01 00
	00 01 00 00 00	 mov	 DWORD PTR _players[ecx+324], 1
  00800	69 95 78 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _i$[ebp], 508
  0080a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  00810	c7 40 50 01 00
	00 00		 mov	 DWORD PTR [eax+80], 1
  00817	69 8d 78 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _i$[ebp], 508
  00821	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00827	c7 42 4c 01 00
	00 00		 mov	 DWORD PTR [edx+76], 1
  0082e	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00838	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0083e	c7 41 48 01 00
	00 00		 mov	 DWORD PTR [ecx+72], 1

; 4376 : 					players[i].rmomx = players[i].rmomy = 1;
; 4377 : 				players[i].cmomx = players[i].cmomy = 0;

  00845	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  0084f	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+320], 0
  00859	69 8d 78 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _i$[ebp], 508
  00863	c7 81 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[ecx+316], 0

; 4378 : 
; 4379 : 				transflag[counter] = (players[i].pflags & (PF_ITEMHANG|PF_MACESPIN|PF_ROPEHANG|PF_MINECART));

  0086d	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00877	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0087d	81 e1 00 00 18
	60		 and	 ecx, 1612185600		; 60180000H
  00883	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _counter$5[ebp]
  00889	89 8c 95 c0 fb
	ff ff		 mov	 DWORD PTR _transflag$2[ebp+edx*4], ecx

; 4380 : 				transspeed[counter] = players[i].speed;

  00890	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  0089a	8b 8d c4 fc ff
	ff		 mov	 ecx, DWORD PTR _counter$5[ebp]
  008a0	8b 90 0c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+268]
  008a6	89 94 8d 40 fb
	ff ff		 mov	 DWORD PTR _transspeed$1[ebp+ecx*4], edx

; 4381 : 				transtracer[counter] = players[i].mo->tracer;

  008ad	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  008b7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  008bd	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _counter$5[ebp]
  008c3	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  008c9	89 84 95 40 fc
	ff ff		 mov	 DWORD PTR _transtracer$3[ebp+edx*4], eax

; 4382 : 
; 4383 : 				counter++;

  008d0	8b 85 c4 fc ff
	ff		 mov	 eax, DWORD PTR _counter$5[ebp]
  008d6	83 c0 01	 add	 eax, 1
  008d9	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _counter$5[ebp], eax
$LN37@A_MixUp:

; 4384 : 			}
; 4385 : 		}

  008df	e9 60 fd ff ff	 jmp	 $LN11@A_MixUp
$LN12@A_MixUp:

; 4386 : 
; 4387 : 		counter = 0;

  008e4	c7 85 c4 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _counter$5[ebp], 0
$LN14@A_MixUp:

; 4388 : 
; 4389 : 		// Mix them up!
; 4390 : 		for (;;)
; 4391 : 		{
; 4392 : 			if (counter > 255) // fail-safe to avoid endless loop

  008ee	81 bd c4 fc ff
	ff ff 00 00 00	 cmp	 DWORD PTR _counter$5[ebp], 255 ; 000000ffH
  008f8	7e 02		 jle	 SHORT $LN40@A_MixUp

; 4393 : 				break;

  008fa	eb 3d		 jmp	 SHORT $LN15@A_MixUp
$LN40@A_MixUp:

; 4394 : 			prandom = P_Random();

  008fc	e8 00 00 00 00	 call	 _P_Random
  00901	0f b6 c0	 movzx	 eax, al
  00904	89 85 70 ff ff
	ff		 mov	 DWORD PTR _prandom$[ebp], eax

; 4395 : 			prandom %= numplayers; // I love modular arithmetic, don't you?

  0090a	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _prandom$[ebp]
  00910	99		 cdq
  00911	f7 bd 74 ff ff
	ff		 idiv	 DWORD PTR _numplayers$[ebp]
  00917	89 95 70 ff ff
	ff		 mov	 DWORD PTR _prandom$[ebp], edx

; 4396 : 			if (prandom) // Make sure it's not a useless mix

  0091d	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _prandom$[ebp], 0
  00924	74 02		 je	 SHORT $LN41@A_MixUp

; 4397 : 				break;

  00926	eb 11		 jmp	 SHORT $LN15@A_MixUp
$LN41@A_MixUp:

; 4398 : 			counter++;

  00928	8b 85 c4 fc ff
	ff		 mov	 eax, DWORD PTR _counter$5[ebp]
  0092e	83 c0 01	 add	 eax, 1
  00931	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _counter$5[ebp], eax

; 4399 : 		}

  00937	eb b5		 jmp	 SHORT $LN14@A_MixUp
$LN15@A_MixUp:

; 4400 : 
; 4401 : 		counter = 0;

  00939	c7 85 c4 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _counter$5[ebp], 0

; 4402 : 
; 4403 : 		for (i = 0; i < MAXPLAYERS; i++)

  00943	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0094d	eb 0f		 jmp	 SHORT $LN19@A_MixUp
$LN17@A_MixUp:
  0094f	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00955	83 c0 01	 add	 eax, 1
  00958	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN19@A_MixUp:
  0095e	83 bd 78 ff ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00965	0f 8d 10 02 00
	00		 jge	 $LN18@A_MixUp

; 4404 : 		{
; 4405 : 			if (playeringame[i] && players[i].playerstate == PST_LIVE
; 4406 : 				&& players[i].mo && players[i].mo->health > 0 && !players[i].exiting && !players[i].powers[pw_super])

  0096b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00971	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00979	0f 84 f7 01 00
	00		 je	 $LN42@A_MixUp
  0097f	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00989	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  00990	0f 85 e0 01 00
	00		 jne	 $LN42@A_MixUp
  00996	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  009a0	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  009a7	0f 84 c9 01 00
	00		 je	 $LN42@A_MixUp
  009ad	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  009b7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  009bd	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  009c4	0f 8e ac 01 00
	00		 jle	 $LN42@A_MixUp
  009ca	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  009d4	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  009db	0f 85 95 01 00
	00		 jne	 $LN42@A_MixUp
  009e1	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  009eb	b9 04 00 00 00	 mov	 ecx, 4
  009f0	6b d1 0f	 imul	 edx, ecx, 15
  009f3	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  009fb	0f 85 75 01 00
	00		 jne	 $LN42@A_MixUp

; 4407 : 			{
; 4408 : 				if ((netgame || multiplayer) && players[i].spectator)// Ignore spectators

  00a01	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00a08	75 09		 jne	 SHORT $LN44@A_MixUp
  00a0a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00a11	74 1a		 je	 SHORT $LN43@A_MixUp
$LN44@A_MixUp:
  00a13	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00a1d	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00a24	85 c9		 test	 ecx, ecx
  00a26	74 05		 je	 SHORT $LN43@A_MixUp

; 4409 : 					continue;

  00a28	e9 22 ff ff ff	 jmp	 $LN17@A_MixUp
$LN43@A_MixUp:

; 4410 : 
; 4411 : 				teleportfrom = (counter + prandom) % numplayers;

  00a2d	8b 85 c4 fc ff
	ff		 mov	 eax, DWORD PTR _counter$5[ebp]
  00a33	03 85 70 ff ff
	ff		 add	 eax, DWORD PTR _prandom$[ebp]
  00a39	99		 cdq
  00a3a	f7 bd 74 ff ff
	ff		 idiv	 DWORD PTR _numplayers$[ebp]
  00a40	89 95 c0 fc ff
	ff		 mov	 DWORD PTR _teleportfrom$4[ebp], edx

; 4412 : 
; 4413 : 				//speed and tracer come before...
; 4414 : 				players[i].speed = transspeed[teleportfrom];

  00a46	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00a50	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _teleportfrom$4[ebp]
  00a56	8b 94 8d 40 fb
	ff ff		 mov	 edx, DWORD PTR _transspeed$1[ebp+ecx*4]
  00a5d	89 90 0c 01 00
	00		 mov	 DWORD PTR _players[eax+268], edx

; 4415 : 				P_SetTarget(&players[i].mo->tracer, transtracer[teleportfrom]);

  00a63	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _teleportfrom$4[ebp]
  00a69	8b 8c 85 40 fc
	ff ff		 mov	 ecx, DWORD PTR _transtracer$3[ebp+eax*4]
  00a70	51		 push	 ecx
  00a71	69 95 78 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _i$[ebp], 508
  00a7b	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  00a81	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  00a86	50		 push	 eax
  00a87	e8 00 00 00 00	 call	 _P_SetTarget
  00a8c	83 c4 08	 add	 esp, 8

; 4416 : 
; 4417 : 				P_MixUp(players[i].mo,

  00a8f	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _teleportfrom$4[ebp]
  00a95	8b 8c 85 48 fd
	ff ff		 mov	 ecx, DWORD PTR _anglepos$7[ebp+eax*4]
  00a9c	51		 push	 ecx
  00a9d	6b 95 c0 fc ff
	ff 0c		 imul	 edx, DWORD PTR _teleportfrom$4[ebp], 12
  00aa4	8d 84 15 c8 fd
	ff ff		 lea	 eax, DWORD PTR _position$8[ebp+edx]
  00aab	b9 04 00 00 00	 mov	 ecx, 4
  00ab0	d1 e1		 shl	 ecx, 1
  00ab2	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00ab5	52		 push	 edx
  00ab6	6b 85 c0 fc ff
	ff 0c		 imul	 eax, DWORD PTR _teleportfrom$4[ebp], 12
  00abd	8d 8c 05 c8 fd
	ff ff		 lea	 ecx, DWORD PTR _position$8[ebp+eax]
  00ac4	ba 04 00 00 00	 mov	 edx, 4
  00ac9	c1 e2 00	 shl	 edx, 0
  00acc	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00acf	50		 push	 eax
  00ad0	6b 8d c0 fc ff
	ff 0c		 imul	 ecx, DWORD PTR _teleportfrom$4[ebp], 12
  00ad7	8d 94 0d c8 fd
	ff ff		 lea	 edx, DWORD PTR _position$8[ebp+ecx]
  00ade	b8 04 00 00 00	 mov	 eax, 4
  00ae3	6b c8 00	 imul	 ecx, eax, 0
  00ae6	8b 14 0a	 mov	 edx, DWORD PTR [edx+ecx]
  00ae9	52		 push	 edx
  00aea	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00af4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00afa	51		 push	 ecx
  00afb	e8 00 00 00 00	 call	 _P_MixUp
  00b00	83 c4 14	 add	 esp, 20			; 00000014H

; 4418 : 					position[teleportfrom][0],
; 4419 : 					position[teleportfrom][1],
; 4420 : 					position[teleportfrom][2],
; 4421 : 					anglepos[teleportfrom]);
; 4422 : 
; 4423 : 				//...flags after.  same reasoning.
; 4424 : 				players[i].pflags &= ~(PF_ITEMHANG|PF_MACESPIN|PF_ROPEHANG|PF_MINECART);

  00b03	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00b0d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00b13	81 e1 ff ff e7
	9f		 and	 ecx, -1612185601	; 9fe7ffffH
  00b19	69 95 78 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _i$[ebp], 508
  00b23	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 4425 : 				players[i].pflags |= transflag[teleportfrom];

  00b29	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00b33	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _teleportfrom$4[ebp]
  00b39	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR _players[eax+172]
  00b3f	0b 94 8d c0 fb
	ff ff		 or	 edx, DWORD PTR _transflag$2[ebp+ecx*4]
  00b46	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00b50	89 90 ac 00 00
	00		 mov	 DWORD PTR _players[eax+172], edx

; 4426 : 
; 4427 : 				teleported[i] = true;

  00b56	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00b5c	c7 84 85 7c ff
	ff ff 01 00 00
	00		 mov	 DWORD PTR _teleported$[ebp+eax*4], 1

; 4428 : 				counter++;

  00b67	8b 85 c4 fc ff
	ff		 mov	 eax, DWORD PTR _counter$5[ebp]
  00b6d	83 c0 01	 add	 eax, 1
  00b70	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _counter$5[ebp], eax
$LN42@A_MixUp:

; 4429 : 			}
; 4430 : 		}

  00b76	e9 d4 fd ff ff	 jmp	 $LN17@A_MixUp
$LN18@A_MixUp:

; 4431 : 	}
; 4432 : 
; 4433 : 	for (i = 0; i < MAXPLAYERS; i++)

  00b7b	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00b85	eb 0f		 jmp	 SHORT $LN22@A_MixUp
$LN20@A_MixUp:
  00b87	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00b8d	83 c0 01	 add	 eax, 1
  00b90	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN22@A_MixUp:
  00b96	83 bd 78 ff ff
	ff 20		 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00b9d	0f 8d 8a 01 00
	00		 jge	 $LN21@A_MixUp

; 4434 : 	{
; 4435 : 		if (teleported[i])

  00ba3	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00ba9	83 bc 85 7c ff
	ff ff 00	 cmp	 DWORD PTR _teleported$[ebp+eax*4], 0
  00bb1	0f 84 71 01 00
	00		 je	 $LN46@A_MixUp

; 4436 : 		{
; 4437 : 			if (playeringame[i] && players[i].playerstate == PST_LIVE
; 4438 : 				&& players[i].mo && players[i].mo->health > 0 && !players[i].exiting && !players[i].powers[pw_super])

  00bb7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00bbd	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00bc5	0f 84 5d 01 00
	00		 je	 $LN46@A_MixUp
  00bcb	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00bd5	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR _players[eax+4], 0
  00bdc	0f 85 46 01 00
	00		 jne	 $LN46@A_MixUp
  00be2	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00bec	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00bf3	0f 84 2f 01 00
	00		 je	 $LN46@A_MixUp
  00bf9	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00c03	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00c09	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00c10	0f 8e 12 01 00
	00		 jle	 $LN46@A_MixUp
  00c16	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00c20	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  00c27	0f 85 fb 00 00
	00		 jne	 $LN46@A_MixUp
  00c2d	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00c37	b9 04 00 00 00	 mov	 ecx, 4
  00c3c	6b d1 0f	 imul	 edx, ecx, 15
  00c3f	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  00c47	0f 85 db 00 00
	00		 jne	 $LN46@A_MixUp

; 4439 : 			{
; 4440 : 				if ((netgame || multiplayer) && players[i].spectator)// Ignore spectators

  00c4d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00c54	75 09		 jne	 SHORT $LN48@A_MixUp
  00c56	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00c5d	74 1a		 je	 SHORT $LN47@A_MixUp
$LN48@A_MixUp:
  00c5f	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00c69	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00c70	85 c9		 test	 ecx, ecx
  00c72	74 05		 je	 SHORT $LN47@A_MixUp

; 4441 : 					continue;

  00c74	e9 0e ff ff ff	 jmp	 $LN20@A_MixUp
$LN47@A_MixUp:

; 4442 : 
; 4443 : 				P_SetThingPosition(players[i].mo);

  00c79	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00c83	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00c89	51		 push	 ecx
  00c8a	e8 00 00 00 00	 call	 _P_SetThingPosition
  00c8f	83 c4 04	 add	 esp, 4

; 4444 : 
; 4445 : 				players[i].mo->floorz = players[i].mo->subsector->sector->floorheight;

  00c92	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00c9c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00ca2	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00ca5	8b 02		 mov	 eax, DWORD PTR [edx]
  00ca7	69 8d 78 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _i$[ebp], 508
  00cb1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00cb7	8b 00		 mov	 eax, DWORD PTR [eax]
  00cb9	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 4446 : 				players[i].mo->ceilingz = players[i].mo->subsector->sector->ceilingheight;

  00cbc	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00cc6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00ccc	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00ccf	8b 02		 mov	 eax, DWORD PTR [edx]
  00cd1	69 8d 78 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _i$[ebp], 508
  00cdb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00ce1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00ce4	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 4447 : 
; 4448 : 				P_CheckPosition(players[i].mo, players[i].mo->x, players[i].mo->y);

  00ce7	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00cf1	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00cf7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00cfa	52		 push	 edx
  00cfb	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00d05	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00d0b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00d0e	52		 push	 edx
  00d0f	69 85 78 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$[ebp], 508
  00d19	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00d1f	51		 push	 ecx
  00d20	e8 00 00 00 00	 call	 _P_CheckPosition
  00d25	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN46@A_MixUp:

; 4449 : 			}
; 4450 : 		}
; 4451 : 	}

  00d28	e9 5a fe ff ff	 jmp	 $LN20@A_MixUp
$LN21@A_MixUp:

; 4452 : 
; 4453 : 	// Play the 'bowrwoosh!' sound
; 4454 : 	S_StartSound(NULL, sfx_mixup);

  00d2d	6a 68		 push	 104			; 00000068H
  00d2f	6a 00		 push	 0
  00d31	e8 00 00 00 00	 call	 _S_StartSound
  00d36	83 c4 08	 add	 esp, 8
$LN1@A_MixUp:

; 4455 : }

  00d39	5f		 pop	 edi
  00d3a	5e		 pop	 esi
  00d3b	5b		 pop	 ebx
  00d3c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00d3f	33 cd		 xor	 ecx, ebp
  00d41	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00d46	8b e5		 mov	 esp, ebp
  00d48	5d		 pop	 ebp
  00d49	c3		 ret	 0
_A_MixUp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_OldRingExplode
_TEXT	SEGMENT
tv69 = -92						; size = 4
_fa$1 = -24						; size = 4
_changecolor$ = -20					; size = 4
_locvar1$ = -16						; size = 4
_ns$ = -12						; size = 4
_mo$ = -8						; size = 4
_i$ = -1						; size = 1
_actor$ = 8						; size = 4
_A_OldRingExplode PROC					; COMDAT

; 4174 : void A_OldRingExplode(mobj_t *actor) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4175 : 	UINT8 i;
; 4176 : 	mobj_t *mo;
; 4177 : 	const fixed_t ns = 20 * FRACUNIT;

  00009	c7 45 f4 00 00
	14 00		 mov	 DWORD PTR _ns$[ebp], 1310720 ; 00140000H

; 4178 : 	INT32 locvar1 = var1;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  00015	89 45 f0	 mov	 DWORD PTR _locvar1$[ebp], eax

; 4179 : 	//INT32 locvar2 = var2;
; 4180 : 	boolean changecolor = (actor->target && actor->target->player);

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00022	74 1b		 je	 SHORT $LN21@A_OldRingE
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00027	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0002d	83 ba a4 00 00
	00 00		 cmp	 DWORD PTR [edx+164], 0
  00034	74 09		 je	 SHORT $LN21@A_OldRingE
  00036	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  0003d	eb 07		 jmp	 SHORT $LN22@A_OldRingE
$LN21@A_OldRingE:
  0003f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN22@A_OldRingE:
  00046	8b 45 a4	 mov	 eax, DWORD PTR tv69[ebp]
  00049	89 45 ec	 mov	 DWORD PTR _changecolor$[ebp], eax

; 4181 : 
; 4182 : 	for (i = 0; i < 32; i++)

  0004c	c6 45 ff 00	 mov	 BYTE PTR _i$[ebp], 0
  00050	eb 08		 jmp	 SHORT $LN4@A_OldRingE
$LN2@A_OldRingE:
  00052	8a 45 ff	 mov	 al, BYTE PTR _i$[ebp]
  00055	04 01		 add	 al, 1
  00057	88 45 ff	 mov	 BYTE PTR _i$[ebp], al
$LN4@A_OldRingE:
  0005a	0f b6 45 ff	 movzx	 eax, BYTE PTR _i$[ebp]
  0005e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00061	0f 8d 3a 01 00
	00		 jge	 $LN3@A_OldRingE

; 4183 : 	{
; 4184 : 		const angle_t fa = (i*FINEANGLES/16) & FINEMASK;

  00067	0f b6 45 ff	 movzx	 eax, BYTE PTR _i$[ebp]
  0006b	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  0006e	99		 cdq
  0006f	83 e2 0f	 and	 edx, 15			; 0000000fH
  00072	03 c2		 add	 eax, edx
  00074	c1 f8 04	 sar	 eax, 4
  00077	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  0007c	89 45 e8	 mov	 DWORD PTR _fa$1[ebp], eax

; 4185 : 
; 4186 : 		mo = P_SpawnMobj(actor->x, actor->y, actor->z, locvar1);

  0007f	8b 45 f0	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00082	50		 push	 eax
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00086	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00089	52		 push	 edx
  0008a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00090	51		 push	 ecx
  00091	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00094	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _P_SpawnMobj
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 4187 : 		P_SetTarget(&mo->target, actor->target); // Transfer target so player gets the points

  000a3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a6	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000ac	51		 push	 ecx
  000ad	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  000b0	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 _P_SetTarget
  000bc	83 c4 08	 add	 esp, 8

; 4188 : 
; 4189 : 		mo->momx = FixedMul(FINESINE(fa),ns);

  000bf	8b 45 f4	 mov	 eax, DWORD PTR _ns$[ebp]
  000c2	50		 push	 eax
  000c3	8b 4d e8	 mov	 ecx, DWORD PTR _fa$1[ebp]
  000c6	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 _FixedMul
  000d3	83 c4 08	 add	 esp, 8
  000d6	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  000d9	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 4190 : 		mo->momy = FixedMul(FINECOSINE(fa),ns);

  000dc	8b 45 f4	 mov	 eax, DWORD PTR _ns$[ebp]
  000df	50		 push	 eax
  000e0	8b 4d e8	 mov	 ecx, DWORD PTR _fa$1[ebp]
  000e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  000e9	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _FixedMul
  000f2	83 c4 08	 add	 esp, 8
  000f5	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  000f8	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 4191 : 
; 4192 : 		if (i > 15)

  000fb	0f b6 45 ff	 movzx	 eax, BYTE PTR _i$[ebp]
  000ff	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00102	7e 1f		 jle	 SHORT $LN7@A_OldRingE

; 4193 : 		{
; 4194 : 			if (i & 1)

  00104	0f b6 45 ff	 movzx	 eax, BYTE PTR _i$[ebp]
  00108	83 e0 01	 and	 eax, 1
  0010b	74 0b		 je	 SHORT $LN6@A_OldRingE

; 4195 : 				mo->momz = ns;

  0010d	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00110	8b 4d f4	 mov	 ecx, DWORD PTR _ns$[ebp]
  00113	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00116	eb 0b		 jmp	 SHORT $LN7@A_OldRingE
$LN6@A_OldRingE:

; 4196 : 			else
; 4197 : 				mo->momz = -ns;

  00118	8b 45 f4	 mov	 eax, DWORD PTR _ns$[ebp]
  0011b	f7 d8		 neg	 eax
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  00120	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN7@A_OldRingE:

; 4198 : 		}
; 4199 : 
; 4200 : 		mo->flags2 |= MF2_DEBRIS;

  00123	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00126	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0012c	83 c9 40	 or	 ecx, 64			; 00000040H
  0012f	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00132	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4201 : 		mo->fuse = TICRATE/(OLDTICRATE/5);

  00138	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  0013b	c7 80 bc 00 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+188], 5

; 4202 : 
; 4203 : 		if (changecolor)

  00145	83 7d ec 00	 cmp	 DWORD PTR _changecolor$[ebp], 0
  00149	74 51		 je	 SHORT $LN11@A_OldRingE

; 4204 : 		{
; 4205 : 			mo->flags |= MF_TRANSLATION;

  0014b	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  0014e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00151	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  00157	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  0015a	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 4206 : 			if (gametype != GT_CTF)

  0015d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00164	83 f8 04	 cmp	 eax, 4
  00167	74 14		 je	 SHORT $LN9@A_OldRingE

; 4207 : 				mo->color = actor->target->color; //copy color

  00169	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0016c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00172	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00175	8a 41 68	 mov	 al, BYTE PTR [ecx+104]
  00178	88 42 68	 mov	 BYTE PTR [edx+104], al
  0017b	eb 1f		 jmp	 SHORT $LN11@A_OldRingE
$LN9@A_OldRingE:

; 4208 : 			else if (actor->target->player->ctfteam == 2)

  0017d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00180	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00186	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0018c	83 ba 60 01 00
	00 02		 cmp	 DWORD PTR [edx+352], 2
  00193	75 07		 jne	 SHORT $LN11@A_OldRingE

; 4209 : 				mo->color = 8;

  00195	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00198	c6 40 68 08	 mov	 BYTE PTR [eax+104], 8
$LN11@A_OldRingE:

; 4210 : 		}
; 4211 : 	}

  0019c	e9 b1 fe ff ff	 jmp	 $LN2@A_OldRingE
$LN3@A_OldRingE:

; 4212 : 
; 4213 : 	mo = P_SpawnMobj(actor->x, actor->y, actor->z, locvar1);

  001a1	8b 45 f0	 mov	 eax, DWORD PTR _locvar1$[ebp]
  001a4	50		 push	 eax
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001a8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  001ab	52		 push	 edx
  001ac	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001af	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001b2	51		 push	 ecx
  001b3	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001b6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _P_SpawnMobj
  001bf	83 c4 10	 add	 esp, 16			; 00000010H
  001c2	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 4214 : 
; 4215 : 	P_SetTarget(&mo->target, actor->target);

  001c5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001c8	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001ce	51		 push	 ecx
  001cf	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  001d2	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  001d8	52		 push	 edx
  001d9	e8 00 00 00 00	 call	 _P_SetTarget
  001de	83 c4 08	 add	 esp, 8

; 4216 : 	mo->momz = ns;

  001e1	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  001e4	8b 4d f4	 mov	 ecx, DWORD PTR _ns$[ebp]
  001e7	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 4217 : 	mo->flags2 |= MF2_DEBRIS;

  001ea	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  001ed	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  001f3	83 c9 40	 or	 ecx, 64			; 00000040H
  001f6	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  001f9	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4218 : 	mo->fuse = TICRATE/(OLDTICRATE/5);

  001ff	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00202	c7 80 bc 00 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+188], 5

; 4219 : 
; 4220 : 	if (changecolor)

  0020c	83 7d ec 00	 cmp	 DWORD PTR _changecolor$[ebp], 0
  00210	74 51		 je	 SHORT $LN15@A_OldRingE

; 4221 : 	{
; 4222 : 		mo->flags |= MF_TRANSLATION;

  00212	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00215	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00218	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  0021e	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00221	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 4223 : 		if (gametype != GT_CTF)

  00224	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0022b	83 f8 04	 cmp	 eax, 4
  0022e	74 14		 je	 SHORT $LN13@A_OldRingE

; 4224 : 			mo->color = actor->target->color; //copy color

  00230	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00233	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00239	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  0023c	8a 41 68	 mov	 al, BYTE PTR [ecx+104]
  0023f	88 42 68	 mov	 BYTE PTR [edx+104], al
  00242	eb 1f		 jmp	 SHORT $LN15@A_OldRingE
$LN13@A_OldRingE:

; 4225 : 		else if (actor->target->player->ctfteam == 2)

  00244	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00247	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0024d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00253	83 ba 60 01 00
	00 02		 cmp	 DWORD PTR [edx+352], 2
  0025a	75 07		 jne	 SHORT $LN15@A_OldRingE

; 4226 : 			mo->color = 8;

  0025c	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  0025f	c6 40 68 08	 mov	 BYTE PTR [eax+104], 8
$LN15@A_OldRingE:

; 4227 : 	}
; 4228 : 
; 4229 : 	mo = P_SpawnMobj(actor->x, actor->y, actor->z, locvar1);

  00263	8b 45 f0	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00266	50		 push	 eax
  00267	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0026a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0026d	52		 push	 edx
  0026e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00271	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00274	51		 push	 ecx
  00275	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00278	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 _P_SpawnMobj
  00281	83 c4 10	 add	 esp, 16			; 00000010H
  00284	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 4230 : 
; 4231 : 	P_SetTarget(&mo->target, actor->target);

  00287	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0028a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00290	51		 push	 ecx
  00291	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00294	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  0029a	52		 push	 edx
  0029b	e8 00 00 00 00	 call	 _P_SetTarget
  002a0	83 c4 08	 add	 esp, 8

; 4232 : 	mo->momz = -ns;

  002a3	8b 45 f4	 mov	 eax, DWORD PTR _ns$[ebp]
  002a6	f7 d8		 neg	 eax
  002a8	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  002ab	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 4233 : 	mo->flags2 |= MF2_DEBRIS;

  002ae	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  002b1	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  002b7	83 c9 40	 or	 ecx, 64			; 00000040H
  002ba	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  002bd	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4234 : 	mo->fuse = TICRATE/(OLDTICRATE/5);

  002c3	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  002c6	c7 80 bc 00 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+188], 5

; 4235 : 
; 4236 : 	if (changecolor)

  002d0	83 7d ec 00	 cmp	 DWORD PTR _changecolor$[ebp], 0
  002d4	74 51		 je	 SHORT $LN19@A_OldRingE

; 4237 : 	{
; 4238 : 		mo->flags |= MF_TRANSLATION;

  002d6	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  002d9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002dc	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  002e2	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  002e5	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 4239 : 		if (gametype != GT_CTF)

  002e8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002ef	83 f8 04	 cmp	 eax, 4
  002f2	74 14		 je	 SHORT $LN17@A_OldRingE

; 4240 : 			mo->color = actor->target->color; //copy color

  002f4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002f7	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  002fd	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00300	8a 41 68	 mov	 al, BYTE PTR [ecx+104]
  00303	88 42 68	 mov	 BYTE PTR [edx+104], al
  00306	eb 1f		 jmp	 SHORT $LN19@A_OldRingE
$LN17@A_OldRingE:

; 4241 : 		else if (actor->target->player->ctfteam == 2)

  00308	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0030b	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00311	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00317	83 ba 60 01 00
	00 02		 cmp	 DWORD PTR [edx+352], 2
  0031e	75 07		 jne	 SHORT $LN19@A_OldRingE

; 4242 : 			mo->color = 8;

  00320	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00323	c6 40 68 08	 mov	 BYTE PTR [eax+104], 8
$LN19@A_OldRingE:

; 4243 : 	}
; 4244 : }

  00327	5f		 pop	 edi
  00328	5e		 pop	 esi
  00329	5b		 pop	 ebx
  0032a	8b e5		 mov	 esp, ebp
  0032c	5d		 pop	 ebp
  0032d	c3		 ret	 0
_A_OldRingExplode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RingExplode
_TEXT	SEGMENT
_d$ = -12						; size = 4
_th$ = -8						; size = 4
_mo2$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_RingExplode PROC					; COMDAT

; 4094 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4095 : 	mobj_t *mo2;
; 4096 : 	thinker_t *th;
; 4097 : 	INT32 d;
; 4098 : 
; 4099 : 	for (d = 0; d < 16; d++)

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _d$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@A_RingExpl
$LN2@A_RingExpl:
  00012	8b 45 f4	 mov	 eax, DWORD PTR _d$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f4	 mov	 DWORD PTR _d$[ebp], eax
$LN4@A_RingExpl:
  0001b	83 7d f4 10	 cmp	 DWORD PTR _d$[ebp], 16	; 00000010H
  0001f	7d 44		 jge	 SHORT $LN3@A_RingExpl

; 4100 : 		P_SpawnParaloop(actor->x, actor->y, actor->z + actor->height, actor->info->painchance, 16, MT_NIGHTSPARKLE, d*(ANGLE_22h), true, false);

  00021	6a 00		 push	 0
  00023	6a 01		 push	 1
  00025	8b 45 f4	 mov	 eax, DWORD PTR _d$[ebp]
  00028	c1 e0 1c	 shl	 eax, 28			; 0000001cH
  0002b	50		 push	 eax
  0002c	68 f6 00 00 00	 push	 246			; 000000f6H
  00031	6a 10		 push	 16			; 00000010H
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00036	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0003c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00043	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00046	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00049	03 50 44	 add	 edx, DWORD PTR [eax+68]
  0004c	52		 push	 edx
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00050	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00053	52		 push	 edx
  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 _P_SpawnParaloop
  00060	83 c4 24	 add	 esp, 36			; 00000024H
  00063	eb ad		 jmp	 SHORT $LN2@A_RingExpl
$LN3@A_RingExpl:

; 4101 : 
; 4102 : 	S_StartSound(actor, sfx_prloop);

  00065	6a 78		 push	 120			; 00000078H
  00067	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _S_StartSound
  00070	83 c4 08	 add	 esp, 8

; 4103 : 
; 4104 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00073	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00078	89 45 f8	 mov	 DWORD PTR _th$[ebp], eax
  0007b	eb 09		 jmp	 SHORT $LN7@A_RingExpl
$LN5@A_RingExpl:
  0007d	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  00080	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00083	89 4d f8	 mov	 DWORD PTR _th$[ebp], ecx
$LN7@A_RingExpl:
  00086	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0008d	0f 84 ac 00 00
	00		 je	 $LN6@A_RingExpl

; 4105 : 	{
; 4106 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00093	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  00096	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0009d	74 02		 je	 SHORT $LN8@A_RingExpl

; 4107 : 			continue;

  0009f	eb dc		 jmp	 SHORT $LN5@A_RingExpl
$LN8@A_RingExpl:

; 4108 : 
; 4109 : 		mo2 = (mobj_t *)th;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  000a4	89 45 fc	 mov	 DWORD PTR _mo2$[ebp], eax

; 4110 : 
; 4111 : 		if (mo2 == actor) // Don't explode yourself! Endless loop!

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _mo2$[ebp]
  000aa	3b 45 08	 cmp	 eax, DWORD PTR _actor$[ebp]
  000ad	75 02		 jne	 SHORT $LN9@A_RingExpl

; 4112 : 			continue;

  000af	eb cc		 jmp	 SHORT $LN5@A_RingExpl
$LN9@A_RingExpl:

; 4113 : 
; 4114 : 		if (P_AproxDistance(P_AproxDistance(mo2->x - actor->x, mo2->y - actor->y), mo2->z - actor->z) > actor->info->painchance)

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _mo2$[ebp]
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000b7	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000ba	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  000bd	52		 push	 edx
  000be	8b 45 fc	 mov	 eax, DWORD PTR _mo2$[ebp]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000c4	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000c7	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  000ca	52		 push	 edx
  000cb	8b 45 fc	 mov	 eax, DWORD PTR _mo2$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000d1	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000d4	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _P_AproxDistance
  000dd	83 c4 08	 add	 esp, 8
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _P_AproxDistance
  000e6	83 c4 08	 add	 esp, 8
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000ec	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  000f2	3b 42 20	 cmp	 eax, DWORD PTR [edx+32]
  000f5	7e 02		 jle	 SHORT $LN10@A_RingExpl

; 4115 : 			continue;

  000f7	eb 84		 jmp	 SHORT $LN5@A_RingExpl
$LN10@A_RingExpl:

; 4116 : 
; 4117 : 		if (mo2->flags & MF_SHOOTABLE)

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _mo2$[ebp]
  000fc	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000ff	83 e1 04	 and	 ecx, 4
  00102	74 36		 je	 SHORT $LN11@A_RingExpl

; 4118 : 		{
; 4119 : 			actor->flags2 |= MF2_DEBRIS;

  00104	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00107	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0010d	83 c9 40	 or	 ecx, 64			; 00000040H
  00110	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00113	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4120 : #if 0
; 4121 : 			// Fun experimental explosion hop code.
; 4122 : 			// TF2 in my SRB2? It's more likely than you think.
; 4123 : 			if (mo2->player && (mo2->player == actor->target->player) && actor->type == MT_THROWNEXPLOSION)
; 4124 : 			{
; 4125 : 				player_t *jumpingplayer;
; 4126 : 				angle_t jumpangle;
; 4127 : 				fixed_t horizdist, vertdist;
; 4128 : 				fixed_t horizmom, vertmom;
; 4129 : 
; 4130 : 				jumpingplayer = actor->target->player;
; 4131 : 				jumpangle = R_PointToAngle2(actor->x, actor->y, jumpingplayer->mo->x, jumpingplayer->mo->y);
; 4132 : 
; 4133 : 				// Scale force based on distance from explosive.
; 4134 : 				horizdist = P_AproxDistance(actor->x - jumpingplayer->mo->x, actor->y - jumpingplayer->mo->y);
; 4135 : 				vertdist = abs(actor->z - jumpingplayer->mo->z);
; 4136 : 				horizmom = FixedMul(20*FRACUNIT, FixedDiv(actor->info->painchance - horizdist, actor->info->painchance));
; 4137 : 				vertmom = FixedMul(20*FRACUNIT, FixedDiv(actor->info->painchance - vertdist, actor->info->painchance));
; 4138 : 
; 4139 : 				//Minimum force
; 4140 : 				if (horizmom < 8*FRACUNIT)
; 4141 : 					horizmom = 8*FRACUNIT;
; 4142 : 				if (vertmom < 8*FRACUNIT)
; 4143 : 					vertmom = 8*FRACUNIT;
; 4144 : 
; 4145 : 				// Horizontal momentum.
; 4146 : 				P_InstaThrust(jumpingplayer->mo, jumpangle, horizmom);
; 4147 : 
; 4148 : 				// If off the ground, apply vertical momentum.
; 4149 : 				if (!P_IsObjectOnGround(jumpingplayer->mo))
; 4150 : 				{
; 4151 : 					if (actor->z > jumpingplayer->mo->z)
; 4152 : 						jumpingplayer->mo->momz -= vertmom;
; 4153 : 					else
; 4154 : 						jumpingplayer->mo->momz += vertmom;
; 4155 : 				}
; 4156 : 			}
; 4157 : 			else
; 4158 : #endif
; 4159 : 				P_DamageMobj(mo2, actor, actor->target, 1);

  00119	6a 01		 push	 1
  0011b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0011e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00124	51		 push	 ecx
  00125	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00128	52		 push	 edx
  00129	8b 45 fc	 mov	 eax, DWORD PTR _mo2$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _P_DamageMobj
  00132	83 c4 10	 add	 esp, 16			; 00000010H

; 4160 : 
; 4161 : 			continue;

  00135	e9 43 ff ff ff	 jmp	 $LN5@A_RingExpl
$LN11@A_RingExpl:

; 4162 : 		}
; 4163 : 	}

  0013a	e9 3e ff ff ff	 jmp	 $LN5@A_RingExpl
$LN6@A_RingExpl:

; 4164 : 	return;
; 4165 : }

  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
_A_RingExplode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SmokeTrailer
_TEXT	SEGMENT
_locvar1$ = -8						; size = 4
_th$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SmokeTrailer PROC					; COMDAT

; 5342 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5343 : 	mobj_t *th;
; 5344 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 5345 : 
; 5346 : 	if (gametic % (4*NEWTICRATERATIO))

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00016	33 d2		 xor	 edx, edx
  00018	b9 04 00 00 00	 mov	 ecx, 4
  0001d	f7 f1		 div	 ecx
  0001f	85 d2		 test	 edx, edx
  00021	74 02		 je	 SHORT $LN2@A_SmokeTra

; 5347 : 		return;

  00023	eb 66		 jmp	 SHORT $LN3@A_SmokeTra
$LN2@A_SmokeTra:

; 5348 : 
; 5349 : 	// add the smoke behind the rocket
; 5350 : 	th = P_SpawnMobj(actor->x-actor->momx, actor->y-actor->momy, actor->z, locvar1);

  00025	8b 45 f8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0002c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002f	52		 push	 edx
  00030	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00036	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00039	2b 51 4c	 sub	 edx, DWORD PTR [ecx+76]
  0003c	52		 push	 edx
  0003d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00043	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00046	2b 51 48	 sub	 edx, DWORD PTR [ecx+72]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax

; 5351 : 
; 5352 : 	th->momz = FRACUNIT;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00058	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 5353 : 	th->tics -= P_Random() & 3;

  0005f	e8 00 00 00 00	 call	 _P_Random
  00064	0f b6 c0	 movzx	 eax, al
  00067	83 e0 03	 and	 eax, 3
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  0006d	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00070	2b d0		 sub	 edx, eax
  00072	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00075	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 5354 : 	if (th->tics < 1)

  00078	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0007b	83 78 58 01	 cmp	 DWORD PTR [eax+88], 1
  0007f	7d 0a		 jge	 SHORT $LN3@A_SmokeTra

; 5355 : 		th->tics = 1;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00084	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1
$LN3@A_SmokeTra:

; 5356 : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_A_SmokeTrailer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_CrawlaCommanderThink
_TEXT	SEGMENT
tv341 = -92						; size = 4
_prandom$1 = -21					; size = 1
_locvar2$ = -20						; size = 4
_locvar1$ = -16						; size = 4
_thefloor$ = -12					; size = 4
_nextsector$ = -8					; size = 4
_dist$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_CrawlaCommanderThink PROC				; COMDAT

; 3953 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3954 : 	fixed_t dist;
; 3955 : 	sector_t *nextsector;
; 3956 : 	fixed_t thefloor;
; 3957 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f0	 mov	 DWORD PTR _locvar1$[ebp], eax

; 3958 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 ec	 mov	 DWORD PTR _locvar2$[ebp], eax

; 3959 : 
; 3960 : 	if (actor->z >= actor->waterbottom && actor->watertop > actor->floorz
; 3961 : 		&& actor->z > actor->watertop - 256*FRACUNIT)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0001f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00022	3b 91 c4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+196]
  00028	7c 36		 jl	 SHORT $LN2@A_CrawlaCo
  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00030	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  00036	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00039	7e 25		 jle	 SHORT $LN2@A_CrawlaCo
  0003b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003e	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00044	81 e9 00 00 00
	01		 sub	 ecx, 16777216		; 01000000H
  0004a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004d	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00050	7e 0e		 jle	 SHORT $LN2@A_CrawlaCo

; 3962 : 		thefloor = actor->watertop;

  00052	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00055	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0005b	89 4d f4	 mov	 DWORD PTR _thefloor$[ebp], ecx
  0005e	eb 09		 jmp	 SHORT $LN3@A_CrawlaCo
$LN2@A_CrawlaCo:

; 3963 : 	else
; 3964 : 		thefloor = actor->floorz;

  00060	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00063	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00066	89 4d f4	 mov	 DWORD PTR _thefloor$[ebp], ecx
$LN3@A_CrawlaCo:

; 3965 : 
; 3966 : 	if (actor->fuse & 1)

  00069	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006c	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00072	83 e1 01	 and	 ecx, 1
  00075	74 1a		 je	 SHORT $LN4@A_CrawlaCo

; 3967 : 		actor->flags2 |= MF2_DONTDRAW;

  00077	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00080	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  00086	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00089	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
  0008f	eb 18		 jmp	 SHORT $LN5@A_CrawlaCo
$LN4@A_CrawlaCo:

; 3968 : 	else
; 3969 : 		actor->flags2 &= ~MF2_DONTDRAW;

  00091	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00094	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0009a	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  000a0	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a3	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN5@A_CrawlaCo:

; 3970 : 
; 3971 : 	if (actor->reactiontime > 0)

  000a9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ac	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  000b3	7e 15		 jle	 SHORT $LN6@A_CrawlaCo

; 3972 : 		actor->reactiontime--;

  000b5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b8	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  000be	83 e9 01	 sub	 ecx, 1
  000c1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c4	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN6@A_CrawlaCo:

; 3973 : 
; 3974 : 	if (actor->fuse < 2)

  000ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cd	83 b8 bc 00 00
	00 02		 cmp	 DWORD PTR [eax+188], 2
  000d4	7d 22		 jge	 SHORT $LN7@A_CrawlaCo

; 3975 : 	{
; 3976 : 		actor->fuse = 0;

  000d6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d9	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+188], 0

; 3977 : 		actor->flags2 &= ~MF2_FRET;

  000e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e6	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000ec	83 e1 ef	 and	 ecx, -17		; ffffffefH
  000ef	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000f2	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN7@A_CrawlaCo:

; 3978 : 	}
; 3979 : 
; 3980 : 	// Hover mode
; 3981 : 	if (actor->health > 1 || actor->fuse)

  000f8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fb	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  00102	7f 0c		 jg	 SHORT $LN9@A_CrawlaCo
  00104	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00107	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  0010e	74 57		 je	 SHORT $LN13@A_CrawlaCo
$LN9@A_CrawlaCo:

; 3982 : 	{
; 3983 : 		if (actor->z < thefloor + (16*FRACUNIT))

  00110	8b 45 f4	 mov	 eax, DWORD PTR _thefloor$[ebp]
  00113	05 00 00 10 00	 add	 eax, 1048576		; 00100000H
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0011b	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0011e	7d 14		 jge	 SHORT $LN10@A_CrawlaCo

; 3984 : 			actor->momz += FRACUNIT;

  00120	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00123	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00126	81 c1 00 00 01
	00		 add	 ecx, 65536		; 00010000H
  0012c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0012f	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  00132	eb 33		 jmp	 SHORT $LN13@A_CrawlaCo
$LN10@A_CrawlaCo:

; 3985 : 		else if (actor->z < thefloor + (32*FRACUNIT))

  00134	8b 45 f4	 mov	 eax, DWORD PTR _thefloor$[ebp]
  00137	05 00 00 20 00	 add	 eax, 2097152		; 00200000H
  0013c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0013f	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00142	7d 14		 jge	 SHORT $LN12@A_CrawlaCo

; 3986 : 			actor->momz += FRACUNIT/2;

  00144	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00147	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0014a	81 c1 00 80 00
	00		 add	 ecx, 32768		; 00008000H
  00150	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00153	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  00156	eb 0f		 jmp	 SHORT $LN13@A_CrawlaCo
$LN12@A_CrawlaCo:

; 3987 : 		else
; 3988 : 			actor->momz += 16;

  00158	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015b	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0015e	83 c1 10	 add	 ecx, 16			; 00000010H
  00161	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00164	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN13@A_CrawlaCo:

; 3989 : 	}
; 3990 : 
; 3991 : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  00167	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0016a	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00171	74 11		 je	 SHORT $LN15@A_CrawlaCo
  00173	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00176	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0017c	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0017f	83 e2 04	 and	 edx, 4
  00182	75 54		 jne	 SHORT $LN14@A_CrawlaCo
$LN15@A_CrawlaCo:

; 3992 : 	{
; 3993 : 		// look for a new target
; 3994 : 		if (P_LookForPlayers(actor, true, false, 0))

  00184	6a 00		 push	 0
  00186	6a 00		 push	 0
  00188	6a 01		 push	 1
  0018a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 _P_LookForPlayers
  00193	83 c4 10	 add	 esp, 16			; 00000010H
  00196	85 c0		 test	 eax, eax
  00198	74 05		 je	 SHORT $LN16@A_CrawlaCo

; 3995 : 			return; // got a new target

  0019a	e9 91 04 00 00	 jmp	 $LN36@A_CrawlaCo
$LN16@A_CrawlaCo:

; 3996 : 
; 3997 : 		if (actor->state != &states[actor->info->spawnstate])

  0019f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a2	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001a8	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  001ac	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  001b2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b5	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  001b8	74 19		 je	 SHORT $LN17@A_CrawlaCo

; 3998 : 			P_SetMobjState(actor, actor->info->spawnstate);

  001ba	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001bd	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001c3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c6	52		 push	 edx
  001c7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 _P_SetMobjState
  001d0	83 c4 08	 add	 esp, 8
$LN17@A_CrawlaCo:

; 3999 : 		return;

  001d3	e9 58 04 00 00	 jmp	 $LN36@A_CrawlaCo
$LN14@A_CrawlaCo:

; 4000 : 	}
; 4001 : 
; 4002 : 	dist = P_AproxDistance(actor->x - actor->target->x, actor->y - actor->target->y);

  001d8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001db	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001e1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001e4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001e7	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  001ea	50		 push	 eax
  001eb	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001ee	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  001f4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001fa	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  001fd	51		 push	 ecx
  001fe	e8 00 00 00 00	 call	 _P_AproxDistance
  00203	83 c4 08	 add	 esp, 8
  00206	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 4003 : 
; 4004 : 	if (actor->target->player && actor->health > 1)

  00209	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0020c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00212	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00219	0f 84 92 00 00
	00		 je	 $LN19@A_CrawlaCo
  0021f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00222	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  00229	0f 8e 82 00 00
	00		 jle	 $LN19@A_CrawlaCo

; 4005 : 	{
; 4006 : 		if (dist < 128*FRACUNIT
; 4007 : 			&& ((actor->target->player->pflags & PF_JUMPED) || (actor->target->player->pflags & PF_SPINNING)))

  0022f	81 7d fc 00 00
	80 00		 cmp	 DWORD PTR _dist$[ebp], 8388608 ; 00800000H
  00236	7d 79		 jge	 SHORT $LN19@A_CrawlaCo
  00238	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0023b	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00241	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00247	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  0024d	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00252	75 1c		 jne	 SHORT $LN20@A_CrawlaCo
  00254	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00257	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0025d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00263	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  00269	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0026e	74 41		 je	 SHORT $LN19@A_CrawlaCo
$LN20@A_CrawlaCo:

; 4008 : 		{
; 4009 : 			// Auugh! He's trying to kill you! Strafe! STRAAAAFFEEE!!
; 4010 : 			if (actor->target->momx || actor->target->momy)

  00270	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00273	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00279	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  0027d	75 0f		 jne	 SHORT $LN22@A_CrawlaCo
  0027f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00282	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00288	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  0028c	74 1e		 je	 SHORT $LN21@A_CrawlaCo
$LN22@A_CrawlaCo:

; 4011 : 			{
; 4012 : 				P_InstaThrust(actor, actor->angle - ANGLE_180, 20*FRACUNIT);

  0028e	68 00 00 14 00	 push	 1310720			; 00140000H
  00293	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00296	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00299	81 e9 00 00 00
	80		 sub	 ecx, -2147483648	; 80000000H
  0029f	51		 push	 ecx
  002a0	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002a3	52		 push	 edx
  002a4	e8 00 00 00 00	 call	 _P_InstaThrust
  002a9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@A_CrawlaCo:

; 4013 : 			}
; 4014 : 			return;

  002ac	e9 7f 03 00 00	 jmp	 $LN36@A_CrawlaCo
$LN19@A_CrawlaCo:

; 4015 : 		}
; 4016 : 	}
; 4017 : 
; 4018 : 	if (locvar1)

  002b1	83 7d f0 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  002b5	74 33		 je	 SHORT $LN24@A_CrawlaCo

; 4019 : 	{
; 4020 : 		if (actor->health < 2 && P_Random() < 2)

  002b7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ba	83 b8 8c 00 00
	00 02		 cmp	 DWORD PTR [eax+140], 2
  002c1	7d 27		 jge	 SHORT $LN24@A_CrawlaCo
  002c3	e8 00 00 00 00	 call	 _P_Random
  002c8	0f b6 c0	 movzx	 eax, al
  002cb	83 f8 02	 cmp	 eax, 2
  002ce	7d 1a		 jge	 SHORT $LN24@A_CrawlaCo

; 4021 : 		{
; 4022 : 			P_SpawnMissile (actor, actor->target, locvar1);

  002d0	8b 45 f0	 mov	 eax, DWORD PTR _locvar1$[ebp]
  002d3	50		 push	 eax
  002d4	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002d7	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  002dd	52		 push	 edx
  002de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 _P_SpawnMissile
  002e7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@A_CrawlaCo:

; 4023 : 		}
; 4024 : 	}
; 4025 : 
; 4026 : 	// Face the player
; 4027 : 	actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y);

  002ea	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ed	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  002f3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002f6	52		 push	 edx
  002f7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002fa	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00300	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00303	52		 push	 edx
  00304	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00307	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0030a	51		 push	 ecx
  0030b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0030e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00311	50		 push	 eax
  00312	e8 00 00 00 00	 call	 _R_PointToAngle2
  00317	83 c4 10	 add	 esp, 16			; 00000010H
  0031a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0031d	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4028 : 
; 4029 : 	if (actor->threshold && dist > 256*FRACUNIT)

  00320	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00323	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  0032a	74 1d		 je	 SHORT $LN25@A_CrawlaCo
  0032c	81 7d fc 00 00
	00 01		 cmp	 DWORD PTR _dist$[ebp], 16777216 ; 01000000H
  00333	7e 14		 jle	 SHORT $LN25@A_CrawlaCo

; 4030 : 		actor->momx = actor->momy = 0;

  00335	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00338	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  0033f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00342	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN25@A_CrawlaCo:

; 4031 : 
; 4032 : 	if (actor->reactiontime && actor->reactiontime <= 2*TICRATE && dist > actor->target->radius - FRACUNIT)

  00349	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0034c	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00353	0f 84 89 00 00
	00		 je	 $LN26@A_CrawlaCo
  00359	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0035c	83 b8 9c 00 00
	00 46		 cmp	 DWORD PTR [eax+156], 70	; 00000046H
  00363	7f 7d		 jg	 SHORT $LN26@A_CrawlaCo
  00365	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00368	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0036e	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00371	81 ea 00 00 01
	00		 sub	 edx, 65536		; 00010000H
  00377	39 55 fc	 cmp	 DWORD PTR _dist$[ebp], edx
  0037a	7e 66		 jle	 SHORT $LN26@A_CrawlaCo

; 4033 : 	{
; 4034 : 		actor->threshold = 0;

  0037c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0037f	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+160], 0

; 4035 : 
; 4036 : 		// Roam around, somewhat in the player's direction.
; 4037 : 		actor->angle += (P_Random()<<10);

  00389	e8 00 00 00 00	 call	 _P_Random
  0038e	0f b6 c0	 movzx	 eax, al
  00391	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00394	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00397	03 41 24	 add	 eax, DWORD PTR [ecx+36]
  0039a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0039d	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 4038 : 		actor->angle -= (P_Random()<<10);

  003a0	e8 00 00 00 00	 call	 _P_Random
  003a5	0f b6 c0	 movzx	 eax, al
  003a8	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  003ab	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  003ae	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  003b1	2b d0		 sub	 edx, eax
  003b3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003b6	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 4039 : 
; 4040 : 		if (actor->health > 1)

  003b9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003bc	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  003c3	7e 18		 jle	 SHORT $LN28@A_CrawlaCo

; 4041 : 			P_InstaThrust(actor, actor->angle, 10*FRACUNIT);

  003c5	68 00 00 0a 00	 push	 655360			; 000a0000H
  003ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003cd	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  003d0	51		 push	 ecx
  003d1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003d4	52		 push	 edx
  003d5	e8 00 00 00 00	 call	 _P_InstaThrust
  003da	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN28@A_CrawlaCo:

; 4042 : 	}

  003dd	e9 99 00 00 00	 jmp	 $LN29@A_CrawlaCo
$LN26@A_CrawlaCo:

; 4043 : 	else if (!actor->reactiontime)

  003e2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003e5	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  003ec	0f 85 89 00 00
	00		 jne	 $LN29@A_CrawlaCo

; 4044 : 	{
; 4045 : 		if (actor->health > 1) // Hover Mode

  003f2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003f5	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  003fc	7e 64		 jle	 SHORT $LN31@A_CrawlaCo

; 4046 : 		{
; 4047 : 			if (dist < 512*FRACUNIT)

  003fe	81 7d fc 00 00
	00 02		 cmp	 DWORD PTR _dist$[ebp], 33554432 ; 02000000H
  00405	7d 5b		 jge	 SHORT $LN31@A_CrawlaCo

; 4048 : 			{
; 4049 : 				actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y);

  00407	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0040a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00410	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00413	52		 push	 edx
  00414	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00417	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0041d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00420	52		 push	 edx
  00421	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00424	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00427	51		 push	 ecx
  00428	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0042b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 _R_PointToAngle2
  00434	83 c4 10	 add	 esp, 16			; 00000010H
  00437	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0043a	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4050 : 				P_InstaThrust(actor, actor->angle, 60*FRACUNIT);

  0043d	68 00 00 3c 00	 push	 3932160			; 003c0000H
  00442	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00445	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00448	51		 push	 ecx
  00449	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0044c	52		 push	 edx
  0044d	e8 00 00 00 00	 call	 _P_InstaThrust
  00452	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4051 : 				actor->threshold = 1;

  00455	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00458	c7 80 a0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+160], 1
$LN31@A_CrawlaCo:

; 4052 : 			}
; 4053 : 		}
; 4054 : 		actor->reactiontime = 2*TICRATE + P_Random()/2;

  00462	e8 00 00 00 00	 call	 _P_Random
  00467	0f b6 c0	 movzx	 eax, al
  0046a	99		 cdq
  0046b	2b c2		 sub	 eax, edx
  0046d	d1 f8		 sar	 eax, 1
  0046f	83 c0 46	 add	 eax, 70			; 00000046H
  00472	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00475	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax
$LN29@A_CrawlaCo:

; 4055 : 	}
; 4056 : 
; 4057 : 	if (actor->health == 1)

  0047b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0047e	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  00485	75 15		 jne	 SHORT $LN32@A_CrawlaCo

; 4058 : 		P_Thrust(actor, actor->angle, 1);

  00487	6a 01		 push	 1
  00489	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0048c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0048f	51		 push	 ecx
  00490	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00493	52		 push	 edx
  00494	e8 00 00 00 00	 call	 _P_Thrust
  00499	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@A_CrawlaCo:

; 4059 : 
; 4060 : 	// Pogo Mode
; 4061 : 	if (!actor->fuse && actor->health == 1 && actor->z <= actor->floorz)

  0049c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0049f	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  004a6	0f 85 1d 01 00
	00		 jne	 $LN35@A_CrawlaCo
  004ac	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  004af	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  004b6	0f 85 0d 01 00
	00		 jne	 $LN35@A_CrawlaCo
  004bc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  004bf	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  004c2	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  004c5	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  004c8	0f 8f fb 00 00
	00		 jg	 $LN35@A_CrawlaCo

; 4062 : 	{
; 4063 : 		if (dist < 256*FRACUNIT)

  004ce	81 7d fc 00 00
	00 01		 cmp	 DWORD PTR _dist$[ebp], 16777216 ; 01000000H
  004d5	7d 64		 jge	 SHORT $LN34@A_CrawlaCo

; 4064 : 		{
; 4065 : 			actor->momz = locvar2;

  004d7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  004da	8b 4d ec	 mov	 ecx, DWORD PTR _locvar2$[ebp]
  004dd	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 4066 : 			actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y);

  004e0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  004e3	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  004e9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004ec	52		 push	 edx
  004ed	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  004f0	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  004f6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  004f9	52		 push	 edx
  004fa	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  004fd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00500	51		 push	 ecx
  00501	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00504	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00507	50		 push	 eax
  00508	e8 00 00 00 00	 call	 _R_PointToAngle2
  0050d	83 c4 10	 add	 esp, 16			; 00000010H
  00510	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00513	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4067 : 			P_InstaThrust(actor, actor->angle, locvar2/8);

  00516	8b 45 ec	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00519	99		 cdq
  0051a	83 e2 07	 and	 edx, 7
  0051d	03 c2		 add	 eax, edx
  0051f	c1 f8 03	 sar	 eax, 3
  00522	50		 push	 eax
  00523	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00526	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00529	51		 push	 ecx
  0052a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0052d	52		 push	 edx
  0052e	e8 00 00 00 00	 call	 _P_InstaThrust
  00533	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4068 : 			// pogo on player
; 4069 : 		}

  00536	e9 8e 00 00 00	 jmp	 $LN35@A_CrawlaCo
$LN34@A_CrawlaCo:

; 4070 : 		else
; 4071 : 		{
; 4072 : 			UINT8 prandom = P_Random();

  0053b	e8 00 00 00 00	 call	 _P_Random
  00540	88 45 eb	 mov	 BYTE PTR _prandom$1[ebp], al

; 4073 : 			actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y) + (P_Random() & 1 ? -prandom : +prandom);

  00543	e8 00 00 00 00	 call	 _P_Random
  00548	0f b6 c0	 movzx	 eax, al
  0054b	83 e0 01	 and	 eax, 1
  0054e	74 0b		 je	 SHORT $LN38@A_CrawlaCo
  00550	0f b6 4d eb	 movzx	 ecx, BYTE PTR _prandom$1[ebp]
  00554	f7 d9		 neg	 ecx
  00556	89 4d a4	 mov	 DWORD PTR tv341[ebp], ecx
  00559	eb 07		 jmp	 SHORT $LN39@A_CrawlaCo
$LN38@A_CrawlaCo:
  0055b	0f b6 55 eb	 movzx	 edx, BYTE PTR _prandom$1[ebp]
  0055f	89 55 a4	 mov	 DWORD PTR tv341[ebp], edx
$LN39@A_CrawlaCo:
  00562	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00565	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0056b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0056e	52		 push	 edx
  0056f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00572	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00578	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0057b	52		 push	 edx
  0057c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0057f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00582	51		 push	 ecx
  00583	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00586	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00589	50		 push	 eax
  0058a	e8 00 00 00 00	 call	 _R_PointToAngle2
  0058f	83 c4 10	 add	 esp, 16			; 00000010H
  00592	03 45 a4	 add	 eax, DWORD PTR tv341[ebp]
  00595	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00598	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4074 : 			P_InstaThrust(actor, actor->angle, FixedDiv(locvar2, 3*FRACUNIT/2));

  0059b	68 00 80 01 00	 push	 98304			; 00018000H
  005a0	8b 45 ec	 mov	 eax, DWORD PTR _locvar2$[ebp]
  005a3	50		 push	 eax
  005a4	e8 00 00 00 00	 call	 _FixedDiv
  005a9	83 c4 08	 add	 esp, 8
  005ac	50		 push	 eax
  005ad	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  005b0	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  005b3	52		 push	 edx
  005b4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  005b7	50		 push	 eax
  005b8	e8 00 00 00 00	 call	 _P_InstaThrust
  005bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4075 : 			actor->momz = locvar2; // Bounce up in air

  005c0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  005c3	8b 4d ec	 mov	 ecx, DWORD PTR _locvar2$[ebp]
  005c6	89 48 50	 mov	 DWORD PTR [eax+80], ecx
$LN35@A_CrawlaCo:

; 4076 : 		}
; 4077 : 	}
; 4078 : 
; 4079 : 	nextsector = R_PointInSubsector(actor->x + actor->momx, actor->y + actor->momy)->sector;

  005c9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  005cc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005cf	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  005d2	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  005d5	51		 push	 ecx
  005d6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  005d9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  005dc	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  005df	03 4a 48	 add	 ecx, DWORD PTR [edx+72]
  005e2	51		 push	 ecx
  005e3	e8 00 00 00 00	 call	 _R_PointInSubsector
  005e8	83 c4 08	 add	 esp, 8
  005eb	8b 00		 mov	 eax, DWORD PTR [eax]
  005ed	89 45 f8	 mov	 DWORD PTR _nextsector$[ebp], eax

; 4080 : 
; 4081 : 	// Move downwards or upwards to go through a passageway.
; 4082 : 	if (nextsector->floorheight > actor->z && nextsector->floorheight - actor->z < 128*FRACUNIT)

  005f0	8b 45 f8	 mov	 eax, DWORD PTR _nextsector$[ebp]
  005f3	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  005f6	8b 10		 mov	 edx, DWORD PTR [eax]
  005f8	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  005fb	7e 33		 jle	 SHORT $LN36@A_CrawlaCo
  005fd	8b 45 f8	 mov	 eax, DWORD PTR _nextsector$[ebp]
  00600	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00603	8b 10		 mov	 edx, DWORD PTR [eax]
  00605	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  00608	81 fa 00 00 80
	00		 cmp	 edx, 8388608		; 00800000H
  0060e	7d 20		 jge	 SHORT $LN36@A_CrawlaCo

; 4083 : 		actor->momz += (nextsector->floorheight - actor->z) / 4;

  00610	8b 45 f8	 mov	 eax, DWORD PTR _nextsector$[ebp]
  00613	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00616	8b 00		 mov	 eax, DWORD PTR [eax]
  00618	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  0061b	99		 cdq
  0061c	83 e2 03	 and	 edx, 3
  0061f	03 c2		 add	 eax, edx
  00621	c1 f8 02	 sar	 eax, 2
  00624	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00627	03 42 50	 add	 eax, DWORD PTR [edx+80]
  0062a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0062d	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN36@A_CrawlaCo:

; 4084 : }

  00630	5f		 pop	 edi
  00631	5e		 pop	 esi
  00632	5b		 pop	 ebx
  00633	8b e5		 mov	 esp, ebp
  00635	5d		 pop	 ebp
  00636	c3		 ret	 0
_A_CrawlaCommanderThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SnowBall
_TEXT	SEGMENT
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SnowBall PROC					; COMDAT

; 3936 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3937 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 3938 : 	//INT32 locvar2 = var2;
; 3939 : 
; 3940 : 	P_InstaThrust(actor, actor->angle, actor->info->speed);

  00011	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00014	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0001a	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0001d	52		 push	 edx
  0001e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00021	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 _P_InstaThrust
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3941 : 	if (!actor->fuse)

  00031	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00034	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  0003b	75 0d		 jne	 SHORT $LN2@A_SnowBall

; 3942 : 		actor->fuse = locvar1*TICRATE;

  0003d	6b 45 fc 23	 imul	 eax, DWORD PTR _locvar1$[ebp], 35
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00044	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax
$LN2@A_SnowBall:

; 3943 : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_A_SnowBall ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RockSpawn
_TEXT	SEGMENT
_randomoomph$ = -24					; size = 4
_dist$ = -20						; size = 4
_line$ = -16						; size = 4
_i$ = -12						; size = 4
_type$ = -8						; size = 4
_mo$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_RockSpawn PROC					; COMDAT

; 3792 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3793 : 	mobj_t *mo;
; 3794 : 	mobjtype_t type;
; 3795 : 	INT32 i = P_FindSpecialLineFromTag(12, (INT16)actor->threshold, -1);

  00009	6a ff		 push	 -1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000e	0f b7 88 a0 00
	00 00		 movzx	 ecx, WORD PTR [eax+160]
  00015	51		 push	 ecx
  00016	6a 0c		 push	 12			; 0000000cH
  00018	e8 00 00 00 00	 call	 _P_FindSpecialLineFromTag
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax

; 3796 : 	line_t *line;
; 3797 : 	fixed_t dist;
; 3798 : 	fixed_t randomoomph;
; 3799 : 
; 3800 : 	if (i == -1)

  00023	83 7d f4 ff	 cmp	 DWORD PTR _i$[ebp], -1
  00027	75 1c		 jne	 SHORT $LN2@A_RockSpaw

; 3801 : 	{
; 3802 : 		CONS_Printf("A_RockSpawn: Unable to find parameter line 12 (tag %d)!\n", actor->threshold);

  00029	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002c	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00032	51		 push	 ecx
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JDIBCCIP@A_RockSpawn?3?5Unable?5to?5find?5par@
  00038	e8 00 00 00 00	 call	 _CONS_Printf
  0003d	83 c4 08	 add	 esp, 8

; 3803 : 		return;

  00040	e9 8a 01 00 00	 jmp	 $LN1@A_RockSpaw
$LN2@A_RockSpaw:

; 3804 : 	}
; 3805 : 
; 3806 : 	line = &lines[i];

  00045	6b 45 f4 4c	 imul	 eax, DWORD PTR _i$[ebp], 76
  00049	03 05 00 00 00
	00		 add	 eax, DWORD PTR _lines
  0004f	89 45 f0	 mov	 DWORD PTR _line$[ebp], eax

; 3807 : 
; 3808 : 	if (!(sides[line->sidenum[0]].textureoffset >> FRACBITS))

  00052	b8 02 00 00 00	 mov	 eax, 2
  00057	6b c8 00	 imul	 ecx, eax, 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR _line$[ebp]
  0005d	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00062	6b c8 1c	 imul	 ecx, eax, 28
  00065	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  0006b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0006e	c1 f8 10	 sar	 eax, 16			; 00000010H
  00071	85 c0		 test	 eax, eax
  00073	75 1c		 jne	 SHORT $LN3@A_RockSpaw

; 3809 : 	{
; 3810 : 		CONS_Printf("A_RockSpawn: No X-offset detected! (tag %d)!\n", actor->threshold);

  00075	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00078	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0007e	51		 push	 ecx
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@HCDCGOCL@A_RockSpawn?3?5No?5X?9offset?5detect@
  00084	e8 00 00 00 00	 call	 _CONS_Printf
  00089	83 c4 08	 add	 esp, 8

; 3811 : 		return;

  0008c	e9 3e 01 00 00	 jmp	 $LN1@A_RockSpaw
$LN3@A_RockSpaw:

; 3812 : 	}
; 3813 : 
; 3814 : 	dist = P_AproxDistance(line->dx, line->dy)/16;

  00091	8b 45 f0	 mov	 eax, DWORD PTR _line$[ebp]
  00094	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00097	51		 push	 ecx
  00098	8b 55 f0	 mov	 edx, DWORD PTR _line$[ebp]
  0009b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _P_AproxDistance
  000a4	83 c4 08	 add	 esp, 8
  000a7	99		 cdq
  000a8	83 e2 0f	 and	 edx, 15			; 0000000fH
  000ab	03 c2		 add	 eax, edx
  000ad	c1 f8 04	 sar	 eax, 4
  000b0	89 45 ec	 mov	 DWORD PTR _dist$[ebp], eax

; 3815 : 
; 3816 : 	if (dist < 1)

  000b3	83 7d ec 01	 cmp	 DWORD PTR _dist$[ebp], 1
  000b7	7d 07		 jge	 SHORT $LN4@A_RockSpaw

; 3817 : 		dist = 1;

  000b9	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN4@A_RockSpaw:

; 3818 : 
; 3819 : 	type = MT_ROCKCRUMBLE1 + (sides[line->sidenum[0]].rowoffset >> FRACBITS);

  000c0	b8 02 00 00 00	 mov	 eax, 2
  000c5	6b c8 00	 imul	 ecx, eax, 0
  000c8	8b 55 f0	 mov	 edx, DWORD PTR _line$[ebp]
  000cb	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  000d0	6b c8 1c	 imul	 ecx, eax, 28
  000d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  000d9	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  000dd	c1 f8 10	 sar	 eax, 16			; 00000010H
  000e0	05 1c 01 00 00	 add	 eax, 284		; 0000011cH
  000e5	89 45 f8	 mov	 DWORD PTR _type$[ebp], eax

; 3820 : 
; 3821 : 	if (line->flags & ML_NOCLIMB)

  000e8	8b 45 f0	 mov	 eax, DWORD PTR _line$[ebp]
  000eb	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  000ef	83 e1 40	 and	 ecx, 64			; 00000040H
  000f2	74 10		 je	 SHORT $LN5@A_RockSpaw

; 3822 : 		randomoomph = P_Random() * (FRACUNIT/32);

  000f4	e8 00 00 00 00	 call	 _P_Random
  000f9	0f b6 c0	 movzx	 eax, al
  000fc	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  000ff	89 45 e8	 mov	 DWORD PTR _randomoomph$[ebp], eax
  00102	eb 07		 jmp	 SHORT $LN6@A_RockSpaw
$LN5@A_RockSpaw:

; 3823 : 	else
; 3824 : 		randomoomph = 0;

  00104	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _randomoomph$[ebp], 0
$LN6@A_RockSpaw:

; 3825 : 
; 3826 : 	mo = P_SpawnMobj(actor->x, actor->y, actor->z, MT_FALLINGROCK);

  0010b	68 1b 01 00 00	 push	 283			; 0000011bH
  00110	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00113	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00116	51		 push	 ecx
  00117	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0011a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0011d	50		 push	 eax
  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00121	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00124	52		 push	 edx
  00125	e8 00 00 00 00	 call	 _P_SpawnMobj
  0012a	83 c4 10	 add	 esp, 16			; 00000010H
  0012d	89 45 fc	 mov	 DWORD PTR _mo$[ebp], eax

; 3827 : 	P_SetMobjState(mo, mobjinfo[type].spawnstate);

  00130	6b 45 f8 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  00134	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+4]
  0013a	51		 push	 ecx
  0013b	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  0013e	52		 push	 edx
  0013f	e8 00 00 00 00	 call	 _P_SetMobjState
  00144	83 c4 08	 add	 esp, 8

; 3828 : 	mo->angle = R_PointToAngle2(line->v2->x, line->v2->y, line->v1->x, line->v1->y);

  00147	8b 45 f0	 mov	 eax, DWORD PTR _line$[ebp]
  0014a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0014f	52		 push	 edx
  00150	8b 45 f0	 mov	 eax, DWORD PTR _line$[ebp]
  00153	8b 08		 mov	 ecx, DWORD PTR [eax]
  00155	8b 11		 mov	 edx, DWORD PTR [ecx]
  00157	52		 push	 edx
  00158	8b 45 f0	 mov	 eax, DWORD PTR _line$[ebp]
  0015b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00161	52		 push	 edx
  00162	8b 45 f0	 mov	 eax, DWORD PTR _line$[ebp]
  00165	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00168	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016a	52		 push	 edx
  0016b	e8 00 00 00 00	 call	 _R_PointToAngle2
  00170	83 c4 10	 add	 esp, 16			; 00000010H
  00173	8b 4d fc	 mov	 ecx, DWORD PTR _mo$[ebp]
  00176	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 3829 : 
; 3830 : 	P_InstaThrust(mo, mo->angle, dist + randomoomph);

  00179	8b 45 ec	 mov	 eax, DWORD PTR _dist$[ebp]
  0017c	03 45 e8	 add	 eax, DWORD PTR _randomoomph$[ebp]
  0017f	50		 push	 eax
  00180	8b 4d fc	 mov	 ecx, DWORD PTR _mo$[ebp]
  00183	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00186	52		 push	 edx
  00187	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 _P_InstaThrust
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3831 : 	mo->momz = dist + randomoomph;

  00193	8b 45 ec	 mov	 eax, DWORD PTR _dist$[ebp]
  00196	03 45 e8	 add	 eax, DWORD PTR _randomoomph$[ebp]
  00199	8b 4d fc	 mov	 ecx, DWORD PTR _mo$[ebp]
  0019c	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 3832 : 
; 3833 : 	var1 = sides[line->sidenum[0]].textureoffset >> FRACBITS;

  0019f	b8 02 00 00 00	 mov	 eax, 2
  001a4	6b c8 00	 imul	 ecx, eax, 0
  001a7	8b 55 f0	 mov	 edx, DWORD PTR _line$[ebp]
  001aa	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  001af	6b c8 1c	 imul	 ecx, eax, 28
  001b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  001b8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  001bb	c1 f8 10	 sar	 eax, 16			; 00000010H
  001be	a3 00 00 00 00	 mov	 DWORD PTR _var1, eax

; 3834 : 	A_SetTics(actor);

  001c3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 _A_SetTics
  001cc	83 c4 04	 add	 esp, 4
$LN1@A_RockSpaw:

; 3835 : }

  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
_A_RockSpawn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MaceRotate
_TEXT	SEGMENT
_fa$1 = -32						; size = 4
_radius$ = -28						; size = 4
_res$ = -24						; size = 4
_v$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_actor$ = 8						; size = 4
_A_MaceRotate PROC					; COMDAT

; 3845 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 3846 : 	TVector v;
; 3847 : 	TVector *res;
; 3848 : 	fixed_t radius = actor->info->speed*actor->reactiontime;

  00013	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00016	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0001c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0001f	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00022	0f af 82 9c 00
	00 00		 imul	 eax, DWORD PTR [edx+156]
  00029	89 45 e4	 mov	 DWORD PTR _radius$[ebp], eax

; 3849 : 
; 3850 : 	if (!actor->target) // This should NEVER happen.

  0002c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002f	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00036	75 33		 jne	 SHORT $LN2@A_MaceRota

; 3851 : 	{
; 3852 : 		if (cv_debug)

  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0003f	74 14		 je	 SHORT $LN3@A_MaceRota

; 3853 : 			CONS_Printf("Mace object (type %d) has no target!\n", actor->type);

  00041	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00044	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00047	51		 push	 ecx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EOCNPKOM@Mace?5object?5?$CItype?5?$CFd?$CJ?5has?5no?5ta@
  0004d	e8 00 00 00 00	 call	 _CONS_Printf
  00052	83 c4 08	 add	 esp, 8
$LN3@A_MaceRota:

; 3854 : 		P_SetMobjState(actor, S_DISS);

  00055	68 4f 06 00 00	 push	 1615			; 0000064fH
  0005a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _P_SetMobjState
  00063	83 c4 08	 add	 esp, 8

; 3855 : 		return;

  00066	e9 0f 04 00 00	 jmp	 $LN11@A_MaceRota
$LN2@A_MaceRota:

; 3856 : 	}
; 3857 : /*
; 3858 : So NOBODY forgets:
; 3859 : 
; 3860 : actor->target->
; 3861 : threshold - X tilt
; 3862 : movecount - Z tilt
; 3863 : reactiontime - link # in the chain (1 is closest)
; 3864 : lastlook - speed
; 3865 : friction - top speed
; 3866 : 
; 3867 : movedir - current angle holder
; 3868 : */
; 3869 : 
; 3870 : 	P_UnsetThingPosition(actor);

  0006b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00074	83 c4 04	 add	 esp, 4

; 3871 : 	actor->x = actor->target->x;

  00077	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00080	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00083	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00086	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 3872 : 	actor->y = actor->target->y;

  00089	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00092	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00095	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00098	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 3873 : 	if (actor->type == MT_SMALLMACECHAIN || actor->type == MT_BIGMACECHAIN)

  0009b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009e	81 78 7c 8a 00
	00 00		 cmp	 DWORD PTR [eax+124], 138 ; 0000008aH
  000a5	74 0c		 je	 SHORT $LN6@A_MaceRota
  000a7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000aa	81 78 7c 8b 00
	00 00		 cmp	 DWORD PTR [eax+124], 139 ; 0000008bH
  000b1	75 25		 jne	 SHORT $LN4@A_MaceRota
$LN6@A_MaceRota:

; 3874 : 		actor->z = actor->target->z - actor->height/4;

  000b3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b6	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000bc	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000bf	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000c2	99		 cdq
  000c3	83 e2 03	 and	 edx, 3
  000c6	03 c2		 add	 eax, edx
  000c8	c1 f8 02	 sar	 eax, 2
  000cb	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  000ce	2b c8		 sub	 ecx, eax
  000d0	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d3	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  000d6	eb 1f		 jmp	 SHORT $LN5@A_MaceRota
$LN4@A_MaceRota:

; 3875 : 	else
; 3876 : 		actor->z = actor->target->z - actor->height/2;

  000d8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000db	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000e1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000e4	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000e7	99		 cdq
  000e8	2b c2		 sub	 eax, edx
  000ea	d1 f8		 sar	 eax, 1
  000ec	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  000ef	2b c8		 sub	 ecx, eax
  000f1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000f4	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN5@A_MaceRota:

; 3877 : 
; 3878 : 	if (actor->target->lastlook > actor->target->friction)

  000f7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fa	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00100	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00103	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00109	8b 89 a8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+168]
  0010f	3b 88 b4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+180]
  00115	7e 1e		 jle	 SHORT $LN7@A_MaceRota

; 3879 : 		actor->target->lastlook = actor->target->friction;

  00117	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0011a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00120	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00123	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00129	8b 89 b4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+180]
  0012f	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx
$LN7@A_MaceRota:

; 3880 : 
; 3881 : 	if (actor->target->type == MT_HANGMACEPOINT || actor->target->type == MT_SWINGMACEPOINT)

  00135	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00138	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0013e	81 79 7c 88 00
	00 00		 cmp	 DWORD PTR [ecx+124], 136 ; 00000088H
  00145	74 16		 je	 SHORT $LN10@A_MaceRota
  00147	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00150	81 79 7c 87 00
	00 00		 cmp	 DWORD PTR [ecx+124], 135 ; 00000087H
  00157	0f 85 31 01 00
	00		 jne	 $LN8@A_MaceRota
$LN10@A_MaceRota:

; 3882 : 	{
; 3883 : 		actor->movecount += actor->target->lastlook;

  0015d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00160	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00166	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00169	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  0016f	03 81 a8 00 00
	00		 add	 eax, DWORD PTR [ecx+168]
  00175	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00178	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 3884 : 		actor->movecount &= FINEMASK;

  0017e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00181	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00187	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  0018d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00190	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 3885 : 
; 3886 : 		actor->threshold = FixedMul(FINECOSINE(actor->movecount), actor->target->lastlook);

  00196	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00199	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0019f	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  001a5	52		 push	 edx
  001a6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a9	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  001af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  001b5	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 _FixedMul
  001be	83 c4 08	 add	 esp, 8
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001c4	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 3887 : 
; 3888 : 		v[0] = FRACUNIT;

  001ca	b8 04 00 00 00	 mov	 eax, 4
  001cf	6b c8 00	 imul	 ecx, eax, 0
  001d2	c7 44 0d ec 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 3889 : 		v[1] = 0;

  001da	b8 04 00 00 00	 mov	 eax, 4
  001df	c1 e0 00	 shl	 eax, 0
  001e2	c7 44 05 ec 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 3890 : 		v[2] = -radius;

  001ea	8b 45 e4	 mov	 eax, DWORD PTR _radius$[ebp]
  001ed	f7 d8		 neg	 eax
  001ef	b9 04 00 00 00	 mov	 ecx, 4
  001f4	d1 e1		 shl	 ecx, 1
  001f6	89 44 0d ec	 mov	 DWORD PTR _v$[ebp+ecx], eax

; 3891 : 		v[3] = FRACUNIT;

  001fa	b8 04 00 00 00	 mov	 eax, 4
  001ff	6b c8 03	 imul	 ecx, eax, 3
  00202	c7 44 0d ec 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 3892 : 
; 3893 : 		res = VectorMatrixMultiply(v, *RotateXMatrix(FixedAngle(actor->threshold<<FRACBITS)));

  0020a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0020d	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00213	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00216	51		 push	 ecx
  00217	e8 00 00 00 00	 call	 _FixedAngle
  0021c	83 c4 04	 add	 esp, 4
  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 _RotateXMatrix
  00225	83 c4 04	 add	 esp, 4
  00228	50		 push	 eax
  00229	8d 55 ec	 lea	 edx, DWORD PTR _v$[ebp]
  0022c	52		 push	 edx
  0022d	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00232	83 c4 08	 add	 esp, 8
  00235	89 45 e8	 mov	 DWORD PTR _res$[ebp], eax

; 3894 : 		M_Memcpy(&v, res, sizeof (v));

  00238	6a 10		 push	 16			; 00000010H
  0023a	8b 45 e8	 mov	 eax, DWORD PTR _res$[ebp]
  0023d	50		 push	 eax
  0023e	8d 4d ec	 lea	 ecx, DWORD PTR _v$[ebp]
  00241	51		 push	 ecx
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00248	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3895 : 		res = VectorMatrixMultiply(v, *RotateZMatrix(actor->target->health<<ANGLETOFINESHIFT));

  0024b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0024e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00254	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  0025a	c1 e2 13	 shl	 edx, 19			; 00000013H
  0025d	52		 push	 edx
  0025e	e8 00 00 00 00	 call	 _RotateZMatrix
  00263	83 c4 04	 add	 esp, 4
  00266	50		 push	 eax
  00267	8d 45 ec	 lea	 eax, DWORD PTR _v$[ebp]
  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00270	83 c4 08	 add	 esp, 8
  00273	89 45 e8	 mov	 DWORD PTR _res$[ebp], eax

; 3896 : 		M_Memcpy(&v, res, sizeof (v));

  00276	6a 10		 push	 16			; 00000010H
  00278	8b 45 e8	 mov	 eax, DWORD PTR _res$[ebp]
  0027b	50		 push	 eax
  0027c	8d 4d ec	 lea	 ecx, DWORD PTR _v$[ebp]
  0027f	51		 push	 ecx
  00280	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00286	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3897 : 	}

  00289	e9 4c 01 00 00	 jmp	 $LN9@A_MaceRota
$LN8@A_MaceRota:

; 3898 : 	else
; 3899 : 	{
; 3900 : 		angle_t fa;
; 3901 : 		actor->threshold += actor->target->lastlook;

  0028e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00291	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00297	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0029a	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  002a0	03 81 a8 00 00
	00		 add	 eax, DWORD PTR [ecx+168]
  002a6	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002a9	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 3902 : 		actor->threshold &= FINEMASK;

  002af	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002b2	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  002b8	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  002be	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002c1	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 3903 : 
; 3904 : 		fa = actor->threshold;

  002c7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ca	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  002d0	89 4d e0	 mov	 DWORD PTR _fa$1[ebp], ecx

; 3905 : 		v[0] = FixedMul(FINECOSINE(fa),radius);

  002d3	8b 45 e4	 mov	 eax, DWORD PTR _radius$[ebp]
  002d6	50		 push	 eax
  002d7	8b 4d e0	 mov	 ecx, DWORD PTR _fa$1[ebp]
  002da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  002e0	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 _FixedMul
  002e9	83 c4 08	 add	 esp, 8
  002ec	b9 04 00 00 00	 mov	 ecx, 4
  002f1	6b d1 00	 imul	 edx, ecx, 0
  002f4	89 44 15 ec	 mov	 DWORD PTR _v$[ebp+edx], eax

; 3906 : 		v[1] = 0;

  002f8	b8 04 00 00 00	 mov	 eax, 4
  002fd	c1 e0 00	 shl	 eax, 0
  00300	c7 44 05 ec 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 3907 : 		v[2] = FixedMul(FINESINE(fa),radius);

  00308	8b 45 e4	 mov	 eax, DWORD PTR _radius$[ebp]
  0030b	50		 push	 eax
  0030c	8b 4d e0	 mov	 ecx, DWORD PTR _fa$1[ebp]
  0030f	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00316	52		 push	 edx
  00317	e8 00 00 00 00	 call	 _FixedMul
  0031c	83 c4 08	 add	 esp, 8
  0031f	b9 04 00 00 00	 mov	 ecx, 4
  00324	d1 e1		 shl	 ecx, 1
  00326	89 44 0d ec	 mov	 DWORD PTR _v$[ebp+ecx], eax

; 3908 : 		v[3] = FRACUNIT;

  0032a	b8 04 00 00 00	 mov	 eax, 4
  0032f	6b c8 03	 imul	 ecx, eax, 3
  00332	c7 44 0d ec 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 3909 : 
; 3910 : 		actor->target->health &= FINEMASK;

  0033a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0033d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00343	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00349	81 e2 ff 1f 00
	00		 and	 edx, 8191		; 00001fffH
  0034f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00352	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00358	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 3911 : 
; 3912 : 		res = VectorMatrixMultiply(v, *RotateXMatrix(actor->target->threshold<<ANGLETOFINESHIFT));

  0035e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00361	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00367	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  0036d	c1 e2 13	 shl	 edx, 19			; 00000013H
  00370	52		 push	 edx
  00371	e8 00 00 00 00	 call	 _RotateXMatrix
  00376	83 c4 04	 add	 esp, 4
  00379	50		 push	 eax
  0037a	8d 45 ec	 lea	 eax, DWORD PTR _v$[ebp]
  0037d	50		 push	 eax
  0037e	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00383	83 c4 08	 add	 esp, 8
  00386	89 45 e8	 mov	 DWORD PTR _res$[ebp], eax

; 3913 : 		M_Memcpy(&v, res, sizeof (v));

  00389	6a 10		 push	 16			; 00000010H
  0038b	8b 45 e8	 mov	 eax, DWORD PTR _res$[ebp]
  0038e	50		 push	 eax
  0038f	8d 4d ec	 lea	 ecx, DWORD PTR _v$[ebp]
  00392	51		 push	 ecx
  00393	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00399	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3914 : 		res = VectorMatrixMultiply(v, *RotateZMatrix(actor->target->health<<ANGLETOFINESHIFT));

  0039c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0039f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  003a5	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  003ab	c1 e2 13	 shl	 edx, 19			; 00000013H
  003ae	52		 push	 edx
  003af	e8 00 00 00 00	 call	 _RotateZMatrix
  003b4	83 c4 04	 add	 esp, 4
  003b7	50		 push	 eax
  003b8	8d 45 ec	 lea	 eax, DWORD PTR _v$[ebp]
  003bb	50		 push	 eax
  003bc	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  003c1	83 c4 08	 add	 esp, 8
  003c4	89 45 e8	 mov	 DWORD PTR _res$[ebp], eax

; 3915 : 		M_Memcpy(&v, res, sizeof (v));

  003c7	6a 10		 push	 16			; 00000010H
  003c9	8b 45 e8	 mov	 eax, DWORD PTR _res$[ebp]
  003cc	50		 push	 eax
  003cd	8d 4d ec	 lea	 ecx, DWORD PTR _v$[ebp]
  003d0	51		 push	 ecx
  003d1	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  003d7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@A_MaceRota:

; 3916 : 	}
; 3917 : 
; 3918 : 	actor->x += v[0];

  003da	b8 04 00 00 00	 mov	 eax, 4
  003df	6b c8 00	 imul	 ecx, eax, 0
  003e2	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003e5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  003e8	03 44 0d ec	 add	 eax, DWORD PTR _v$[ebp+ecx]
  003ec	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  003ef	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 3919 : 	actor->y += v[1];

  003f2	b8 04 00 00 00	 mov	 eax, 4
  003f7	c1 e0 00	 shl	 eax, 0
  003fa	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  003fd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00400	03 54 05 ec	 add	 edx, DWORD PTR _v$[ebp+eax]
  00404	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00407	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 3920 : 	actor->z += v[2];

  0040a	b8 04 00 00 00	 mov	 eax, 4
  0040f	d1 e0		 shl	 eax, 1
  00411	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00414	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00417	03 54 05 ec	 add	 edx, DWORD PTR _v$[ebp+eax]
  0041b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0041e	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 3921 : 
; 3922 : 	P_SetThingPosition(actor);

  00421	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00424	50		 push	 eax
  00425	e8 00 00 00 00	 call	 _P_SetThingPosition
  0042a	83 c4 04	 add	 esp, 4

; 3923 : 
; 3924 : 	if ((leveltime & 63) && (actor->type == MT_BIGMACE || actor->type == MT_SMALLMACE) && actor->target->type == MT_MACEPOINT)

  0042d	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00432	83 e0 3f	 and	 eax, 63			; 0000003fH
  00435	74 43		 je	 SHORT $LN11@A_MaceRota
  00437	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0043a	81 78 7c 8d 00
	00 00		 cmp	 DWORD PTR [eax+124], 141 ; 0000008dH
  00441	74 0c		 je	 SHORT $LN12@A_MaceRota
  00443	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00446	81 78 7c 8c 00
	00 00		 cmp	 DWORD PTR [eax+124], 140 ; 0000008cH
  0044d	75 2b		 jne	 SHORT $LN11@A_MaceRota
$LN12@A_MaceRota:
  0044f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00452	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00458	81 79 7c 86 00
	00 00		 cmp	 DWORD PTR [ecx+124], 134 ; 00000086H
  0045f	75 19		 jne	 SHORT $LN11@A_MaceRota

; 3925 : 		S_StartSound(actor, actor->info->activesound);

  00461	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00464	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0046a	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0046d	52		 push	 edx
  0046e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00471	50		 push	 eax
  00472	e8 00 00 00 00	 call	 _S_StartSound
  00477	83 c4 08	 add	 esp, 8
$LN11@A_MaceRota:

; 3926 : }

  0047a	5f		 pop	 edi
  0047b	5e		 pop	 esi
  0047c	5b		 pop	 ebx
  0047d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00480	33 cd		 xor	 ecx, ebp
  00482	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00487	8b e5		 mov	 esp, ebp
  00489	5d		 pop	 ebp
  0048a	c3		 ret	 0
_A_MaceRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RotateSpikeBall
_TEXT	SEGMENT
_fa$1 = -8						; size = 4
_radius$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_RotateSpikeBall PROC					; COMDAT

; 3754 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3755 : 	const fixed_t radius = 12*actor->info->speed;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	6b 51 3c 0c	 imul	 edx, DWORD PTR [ecx+60], 12
  00016	89 55 fc	 mov	 DWORD PTR _radius$[ebp], edx

; 3756 : 
; 3757 : 	if (actor->type == MT_SPECIALSPIKEBALL)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	83 78 7c 46	 cmp	 DWORD PTR [eax+124], 70	; 00000046H
  00020	75 05		 jne	 SHORT $LN2@A_RotateSp

; 3758 : 		return;

  00022	e9 14 01 00 00	 jmp	 $LN1@A_RotateSp
$LN2@A_RotateSp:

; 3759 : 
; 3760 : 	if (!actor->target) // This should NEVER happen.

  00027	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002a	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00031	75 2c		 jne	 SHORT $LN3@A_RotateSp

; 3761 : 	{
; 3762 : 		if (cv_debug)

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0003a	74 0d		 je	 SHORT $LN4@A_RotateSp

; 3763 : 			CONS_Printf("Error: Spikeball has no target\n");

  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KIOCEDCM@Error?3?5Spikeball?5has?5no?5target?6@
  00041	e8 00 00 00 00	 call	 _CONS_Printf
  00046	83 c4 04	 add	 esp, 4
$LN4@A_RotateSp:

; 3764 : 		P_SetMobjState(actor, S_DISS);

  00049	68 4f 06 00 00	 push	 1615			; 0000064fH
  0004e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _P_SetMobjState
  00057	83 c4 08	 add	 esp, 8

; 3765 : 		return;

  0005a	e9 dc 00 00 00	 jmp	 $LN1@A_RotateSp
$LN3@A_RotateSp:

; 3766 : 	}
; 3767 : 
; 3768 : 	if (!actor->info->speed)

  0005f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00062	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00068	83 79 3c 00	 cmp	 DWORD PTR [ecx+60], 0
  0006c	75 12		 jne	 SHORT $LN5@A_RotateSp

; 3769 : 	{
; 3770 : 		CONS_Printf("Error: A_RotateSpikeBall: Object has no speed.\n");

  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@LOLKGCHG@Error?3?5A_RotateSpikeBall?3?5Objec@
  00073	e8 00 00 00 00	 call	 _CONS_Printf
  00078	83 c4 04	 add	 esp, 4

; 3771 : 		return;

  0007b	e9 bb 00 00 00	 jmp	 $LN1@A_RotateSp
$LN5@A_RotateSp:

; 3772 : 	}
; 3773 : 
; 3774 : 	actor->angle += FixedAngle(actor->info->speed);

  00080	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00083	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00089	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 _FixedAngle
  00092	83 c4 04	 add	 esp, 4
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00098	03 41 24	 add	 eax, DWORD PTR [ecx+36]
  0009b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0009e	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 3775 : 	P_UnsetThingPosition(actor);

  000a1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  000aa	83 c4 04	 add	 esp, 4

; 3776 : 	{
; 3777 : 		const angle_t fa = actor->angle>>ANGLETOFINESHIFT;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000b3	c1 e9 13	 shr	 ecx, 19			; 00000013H
  000b6	89 4d f8	 mov	 DWORD PTR _fa$1[ebp], ecx

; 3778 : 		actor->x = actor->target->x + FixedMul(FINECOSINE(fa),radius);

  000b9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000bc	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _radius$[ebp]
  000c5	51		 push	 ecx
  000c6	8b 55 f8	 mov	 edx, DWORD PTR _fa$1[ebp]
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _finecosine
  000ce	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 _FixedMul
  000d7	83 c4 08	 add	 esp, 8
  000da	03 46 10	 add	 eax, DWORD PTR [esi+16]
  000dd	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000e0	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 3779 : 		actor->y = actor->target->y + FixedMul(FINESINE(fa),radius);

  000e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e6	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _radius$[ebp]
  000ef	51		 push	 ecx
  000f0	8b 55 f8	 mov	 edx, DWORD PTR _fa$1[ebp]
  000f3	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _finesine[edx*4]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _FixedMul
  00100	83 c4 08	 add	 esp, 8
  00103	03 46 14	 add	 eax, DWORD PTR [esi+20]
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00109	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 3780 : 		actor->z = actor->target->z + actor->target->height/2;

  0010c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00115	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00118	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0011e	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00121	99		 cdq
  00122	2b c2		 sub	 eax, edx
  00124	d1 f8		 sar	 eax, 1
  00126	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0012c	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 3781 : 		P_SetThingPosition(actor);

  0012f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _P_SetThingPosition
  00138	83 c4 04	 add	 esp, 4
$LN1@A_RotateSp:

; 3782 : 	}
; 3783 : }

  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	5b		 pop	 ebx
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
_A_RotateSpikeBall ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_CapeChase
_TEXT	SEGMENT
_locvar2$ = -28						; size = 4
_locvar1$ = -24						; size = 4
_boffsety$ = -20					; size = 4
_boffsetx$ = -16					; size = 4
_foffsety$ = -12					; size = 4
_foffsetx$ = -8						; size = 4
_chaser$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_CapeChase PROC					; COMDAT

; 3706 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3707 : 	mobj_t *chaser;
; 3708 : 	fixed_t foffsetx, foffsety, boffsetx, boffsety;
; 3709 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 e8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 3710 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 e4	 mov	 DWORD PTR _locvar2$[ebp], eax

; 3711 : 
; 3712 : 	if (cv_debug)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00020	74 1c		 je	 SHORT $LN2@A_CapeChas

; 3713 : 		CONS_Printf("A_CapeChase called from object type %d, var1: %d, var2: %d\n", actor->type, locvar1, locvar2);

  00022	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00025	50		 push	 eax
  00026	8b 4d e8	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002d	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@KDHNCGCC@A_CapeChase?5called?5from?5object?5@
  00036	e8 00 00 00 00	 call	 _CONS_Printf
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@A_CapeChas:

; 3714 : 
; 3715 : 	if (locvar1 & 65535)

  0003e	8b 45 e8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00041	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00046	74 0e		 je	 SHORT $LN3@A_CapeChas

; 3716 : 		chaser = actor->tracer;

  00048	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004b	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00051	89 4d fc	 mov	 DWORD PTR _chaser$[ebp], ecx
  00054	eb 0c		 jmp	 SHORT $LN4@A_CapeChas
$LN3@A_CapeChas:

; 3717 : 	else
; 3718 : 		chaser = actor->target;

  00056	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00059	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005f	89 4d fc	 mov	 DWORD PTR _chaser$[ebp], ecx
$LN4@A_CapeChas:

; 3719 : 
; 3720 : 	if (actor->state == &states[S_DISS])

  00062	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00067	69 c8 4f 06 00
	00		 imul	 ecx, eax, 1615
  0006d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00073	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00076	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00079	75 05		 jne	 SHORT $LN5@A_CapeChas

; 3721 : 		return;

  0007b	e9 38 01 00 00	 jmp	 $LN1@A_CapeChas
$LN5@A_CapeChas:

; 3722 : 
; 3723 : 	if (!chaser || (chaser->health <= 0))

  00080	83 7d fc 00	 cmp	 DWORD PTR _chaser$[ebp], 0
  00084	74 0c		 je	 SHORT $LN7@A_CapeChas
  00086	8b 45 fc	 mov	 eax, DWORD PTR _chaser$[ebp]
  00089	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00090	7f 39		 jg	 SHORT $LN6@A_CapeChas
$LN7@A_CapeChas:

; 3724 : 	{
; 3725 : 		if (chaser && cv_debug)

  00092	83 7d fc 00	 cmp	 DWORD PTR _chaser$[ebp], 0
  00096	74 1d		 je	 SHORT $LN8@A_CapeChas
  00098	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0009f	74 14		 je	 SHORT $LN8@A_CapeChas

; 3726 : 			CONS_Printf("Hmm, the guy I'm chasing (object type %d) has no health.. so I'll die too!\n", chaser->type);

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _chaser$[ebp]
  000a4	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000a7	51		 push	 ecx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@EBJEKIN@Hmm?0?5the?5guy?5I?8m?5chasing?5?$CIobjec@
  000ad	e8 00 00 00 00	 call	 _CONS_Printf
  000b2	83 c4 08	 add	 esp, 8
$LN8@A_CapeChas:

; 3727 : 
; 3728 : 		P_SetMobjState(actor, S_DISS);

  000b5	68 4f 06 00 00	 push	 1615			; 0000064fH
  000ba	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _P_SetMobjState
  000c3	83 c4 08	 add	 esp, 8

; 3729 : 		return;

  000c6	e9 ed 00 00 00	 jmp	 $LN1@A_CapeChas
$LN6@A_CapeChas:

; 3730 : 	}
; 3731 : 
; 3732 : 	foffsetx = P_ReturnThrustX(chaser, chaser->angle, (locvar2 >> 16)*FRACUNIT);

  000cb	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  000ce	c1 f8 10	 sar	 eax, 16			; 00000010H
  000d1	c1 e0 10	 shl	 eax, 16			; 00000010H
  000d4	50		 push	 eax
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _chaser$[ebp]
  000d8	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000db	52		 push	 edx
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _chaser$[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _P_ReturnThrustX
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e8	89 45 f8	 mov	 DWORD PTR _foffsetx$[ebp], eax

; 3733 : 	foffsety = P_ReturnThrustY(chaser, chaser->angle, (locvar2 >> 16)*FRACUNIT);

  000eb	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  000ee	c1 f8 10	 sar	 eax, 16			; 00000010H
  000f1	c1 e0 10	 shl	 eax, 16			; 00000010H
  000f4	50		 push	 eax
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _chaser$[ebp]
  000f8	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000fb	52		 push	 edx
  000fc	8b 45 fc	 mov	 eax, DWORD PTR _chaser$[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
  00108	89 45 f4	 mov	 DWORD PTR _foffsety$[ebp], eax

; 3734 : 
; 3735 : 	boffsetx = P_ReturnThrustX(chaser, chaser->angle-ANGLE_90, (locvar2 & 65535)*FRACUNIT);

  0010b	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0010e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00113	c1 e0 10	 shl	 eax, 16			; 00000010H
  00116	50		 push	 eax
  00117	8b 4d fc	 mov	 ecx, DWORD PTR _chaser$[ebp]
  0011a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0011d	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  00123	52		 push	 edx
  00124	8b 45 fc	 mov	 eax, DWORD PTR _chaser$[ebp]
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 _P_ReturnThrustX
  0012d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00130	89 45 f0	 mov	 DWORD PTR _boffsetx$[ebp], eax

; 3736 : 	boffsety = P_ReturnThrustY(chaser, chaser->angle-ANGLE_90, (locvar2 & 65535)*FRACUNIT);

  00133	8b 45 e4	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00136	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0013b	c1 e0 10	 shl	 eax, 16			; 00000010H
  0013e	50		 push	 eax
  0013f	8b 4d fc	 mov	 ecx, DWORD PTR _chaser$[ebp]
  00142	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00145	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  0014b	52		 push	 edx
  0014c	8b 45 fc	 mov	 eax, DWORD PTR _chaser$[ebp]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00155	83 c4 0c	 add	 esp, 12			; 0000000cH
  00158	89 45 ec	 mov	 DWORD PTR _boffsety$[ebp], eax

; 3737 : 
; 3738 : 	P_UnsetThingPosition(actor);

  0015b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00164	83 c4 04	 add	 esp, 4

; 3739 : 	actor->x = chaser->x + foffsetx + boffsetx;

  00167	8b 45 fc	 mov	 eax, DWORD PTR _chaser$[ebp]
  0016a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0016d	03 4d f8	 add	 ecx, DWORD PTR _foffsetx$[ebp]
  00170	03 4d f0	 add	 ecx, DWORD PTR _boffsetx$[ebp]
  00173	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00176	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 3740 : 	actor->y = chaser->y + foffsety + boffsety;

  00179	8b 45 fc	 mov	 eax, DWORD PTR _chaser$[ebp]
  0017c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0017f	03 4d f4	 add	 ecx, DWORD PTR _foffsety$[ebp]
  00182	03 4d ec	 add	 ecx, DWORD PTR _boffsety$[ebp]
  00185	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00188	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 3741 : 	actor->z = chaser->z + ((locvar1 >> 16)*FRACUNIT);

  0018b	8b 45 e8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0018e	c1 f8 10	 sar	 eax, 16			; 00000010H
  00191	c1 e0 10	 shl	 eax, 16			; 00000010H
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _chaser$[ebp]
  00197	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0019a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0019d	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 3742 : 	actor->angle = chaser->angle;

  001a0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a3	8b 4d fc	 mov	 ecx, DWORD PTR _chaser$[ebp]
  001a6	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001a9	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 3743 : 	P_SetThingPosition(actor);

  001ac	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 _P_SetThingPosition
  001b5	83 c4 04	 add	 esp, 4
$LN1@A_CapeChas:

; 3744 : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
_A_CapeChase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_DetonChase
_TEXT	SEGMENT
_xyspeed$1 = -20					; size = 4
_oldtracer$ = -16					; size = 4
_dist$ = -12						; size = 4
_xydist$ = -8						; size = 4
_exact$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_DetonChase PROC					; COMDAT

; 3561 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3562 : 	angle_t exact;
; 3563 : 	fixed_t xydist, dist;
; 3564 : 	mobj_t *oldtracer;
; 3565 : 
; 3566 : 	oldtracer = actor->tracer;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00012	89 4d f0	 mov	 DWORD PTR _oldtracer$[ebp], ecx

; 3567 : 
; 3568 : 	// modify tracer threshold
; 3569 : 	if (!actor->tracer || actor->tracer->health <= 0)

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0001f	74 12		 je	 SHORT $LN4@A_DetonCha
  00021	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00024	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0002a	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00031	7f 0f		 jg	 SHORT $LN2@A_DetonCha
$LN4@A_DetonCha:

; 3570 : 		actor->threshold = 0;

  00033	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00036	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+160], 0
  00040	eb 0d		 jmp	 SHORT $LN3@A_DetonCha
$LN2@A_DetonCha:

; 3571 : 	else
; 3572 : 		actor->threshold = 1;

  00042	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00045	c7 80 a0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+160], 1
$LN3@A_DetonCha:

; 3573 : 
; 3574 : 	if (!actor->tracer || !(actor->tracer->flags & MF_SHOOTABLE))

  0004f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00052	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00059	74 11		 je	 SHORT $LN6@A_DetonCha
  0005b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005e	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00064	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00067	83 e2 04	 and	 edx, 4
  0006a	75 57		 jne	 SHORT $LN5@A_DetonCha
$LN6@A_DetonCha:

; 3575 : 	{
; 3576 : 		// look for a new target
; 3577 : 		if (P_LookForPlayers(actor, true, true, 0))

  0006c	6a 00		 push	 0
  0006e	6a 01		 push	 1
  00070	6a 01		 push	 1
  00072	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _P_LookForPlayers
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	85 c0		 test	 eax, eax
  00080	74 05		 je	 SHORT $LN7@A_DetonCha

; 3578 : 			return; // got a new target

  00082	e9 19 05 00 00	 jmp	 $LN29@A_DetonCha
$LN7@A_DetonCha:

; 3579 : 
; 3580 : 		actor->momx = actor->momy = actor->momz = 0;

  00087	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008a	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00094	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  0009b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0009e	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 3581 : 		P_SetMobjState(actor, actor->info->spawnstate);

  000a5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a8	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ae	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b1	52		 push	 edx
  000b2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _P_SetMobjState
  000bb	83 c4 08	 add	 esp, 8

; 3582 : 		return;

  000be	e9 dd 04 00 00	 jmp	 $LN29@A_DetonCha
$LN5@A_DetonCha:

; 3583 : 	}
; 3584 : 
; 3585 : 	if (multiplayer && !actor->threshold && P_LookForPlayers(actor, true, true, 0))

  000c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000ca	74 27		 je	 SHORT $LN8@A_DetonCha
  000cc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cf	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  000d6	75 1b		 jne	 SHORT $LN8@A_DetonCha
  000d8	6a 00		 push	 0
  000da	6a 01		 push	 1
  000dc	6a 01		 push	 1
  000de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 _P_LookForPlayers
  000e7	83 c4 10	 add	 esp, 16			; 00000010H
  000ea	85 c0		 test	 eax, eax
  000ec	74 05		 je	 SHORT $LN8@A_DetonCha

; 3586 : 		return; // got a new target

  000ee	e9 ad 04 00 00	 jmp	 $LN29@A_DetonCha
$LN8@A_DetonCha:

; 3587 : 
; 3588 : 	// Face movement direction if not doing so
; 3589 : 	exact = R_PointToAngle2(actor->x, actor->y, actor->tracer->x, actor->tracer->y);

  000f3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f6	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000fc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000ff	52		 push	 edx
  00100	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00103	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00109	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0010c	52		 push	 edx
  0010d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00110	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00113	51		 push	 ecx
  00114	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00117	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _R_PointToAngle2
  00120	83 c4 10	 add	 esp, 16			; 00000010H
  00123	89 45 fc	 mov	 DWORD PTR _exact$[ebp], eax

; 3590 : 	actor->angle = exact;

  00126	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00129	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  0012c	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 3591 : 	if (exact != actor->angle)

  0012f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  00135	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  00138	74 77		 je	 SHORT $LN13@A_DetonCha

; 3592 : 	{
; 3593 : 		if (exact - actor->angle > ANGLE_180)

  0013a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0013d	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  00140	2b 48 24	 sub	 ecx, DWORD PTR [eax+36]
  00143	81 f9 00 00 00
	80		 cmp	 ecx, -2147483648	; 80000000H
  00149	76 34		 jbe	 SHORT $LN10@A_DetonCha

; 3594 : 		{
; 3595 : 			actor->angle -= actor->info->raisestate;

  0014b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00154	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00157	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0015a	2b 41 5c	 sub	 eax, DWORD PTR [ecx+92]
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00160	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 3596 : 			if (exact - actor->angle < ANGLE_180)

  00163	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00166	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  00169	2b 48 24	 sub	 ecx, DWORD PTR [eax+36]
  0016c	81 f9 00 00 00
	80		 cmp	 ecx, -2147483648	; 80000000H
  00172	73 09		 jae	 SHORT $LN12@A_DetonCha

; 3597 : 				actor->angle = exact;

  00174	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00177	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  0017a	89 48 24	 mov	 DWORD PTR [eax+36], ecx
$LN12@A_DetonCha:

; 3598 : 		}

  0017d	eb 32		 jmp	 SHORT $LN13@A_DetonCha
$LN10@A_DetonCha:

; 3599 : 		else
; 3600 : 		{
; 3601 : 			actor->angle += actor->info->raisestate;

  0017f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00182	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00188	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0018b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0018e	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00191	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00194	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 3602 : 			if (exact - actor->angle > ANGLE_180)

  00197	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0019a	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  0019d	2b 48 24	 sub	 ecx, DWORD PTR [eax+36]
  001a0	81 f9 00 00 00
	80		 cmp	 ecx, -2147483648	; 80000000H
  001a6	76 09		 jbe	 SHORT $LN13@A_DetonCha

; 3603 : 				actor->angle = exact;

  001a8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ab	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  001ae	89 48 24	 mov	 DWORD PTR [eax+36], ecx
$LN13@A_DetonCha:

; 3604 : 		}
; 3605 : 	}
; 3606 : 	// movedir is up/down angle: how much it has to go up as it goes over to the player
; 3607 : 	xydist = P_AproxDistance(actor->tracer->x - actor->x, actor->tracer->y - actor->y);

  001b1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b4	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  001ba	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001bd	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  001c0	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  001c3	50		 push	 eax
  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  001c7	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  001cd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001d0	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  001d3	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  001d6	51		 push	 ecx
  001d7	e8 00 00 00 00	 call	 _P_AproxDistance
  001dc	83 c4 08	 add	 esp, 8
  001df	89 45 f8	 mov	 DWORD PTR _xydist$[ebp], eax

; 3608 : 	exact = R_PointToAngle2(actor->x, actor->z, actor->x + xydist, actor->tracer->z);

  001e2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001e5	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  001eb	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  001ee	52		 push	 edx
  001ef	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001f5	03 4d f8	 add	 ecx, DWORD PTR _xydist$[ebp]
  001f8	51		 push	 ecx
  001f9	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001fc	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001ff	50		 push	 eax
  00200	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00203	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00206	52		 push	 edx
  00207	e8 00 00 00 00	 call	 _R_PointToAngle2
  0020c	83 c4 10	 add	 esp, 16			; 00000010H
  0020f	89 45 fc	 mov	 DWORD PTR _exact$[ebp], eax

; 3609 : 	actor->movedir = exact;

  00212	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00215	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  00218	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 3610 : 	if (exact != actor->movedir)

  0021e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00221	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  00224	3b 88 90 00 00
	00		 cmp	 ecx, DWORD PTR [eax+144]
  0022a	0f 84 92 00 00
	00		 je	 $LN18@A_DetonCha

; 3611 : 	{
; 3612 : 		if (exact - actor->movedir > ANGLE_180)

  00230	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00233	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  00236	2b 88 90 00 00
	00		 sub	 ecx, DWORD PTR [eax+144]
  0023c	81 f9 00 00 00
	80		 cmp	 ecx, -2147483648	; 80000000H
  00242	76 40		 jbe	 SHORT $LN15@A_DetonCha

; 3613 : 		{
; 3614 : 			actor->movedir -= actor->info->raisestate;

  00244	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00247	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0024d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00250	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00256	2b 41 5c	 sub	 eax, DWORD PTR [ecx+92]
  00259	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0025c	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 3615 : 			if (exact - actor->movedir < ANGLE_180)

  00262	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00265	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  00268	2b 88 90 00 00
	00		 sub	 ecx, DWORD PTR [eax+144]
  0026e	81 f9 00 00 00
	80		 cmp	 ecx, -2147483648	; 80000000H
  00274	73 0c		 jae	 SHORT $LN17@A_DetonCha

; 3616 : 				actor->movedir = exact;

  00276	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00279	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  0027c	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx
$LN17@A_DetonCha:

; 3617 : 		}

  00282	eb 3e		 jmp	 SHORT $LN18@A_DetonCha
$LN15@A_DetonCha:

; 3618 : 		else
; 3619 : 		{
; 3620 : 			actor->movedir += actor->info->raisestate;

  00284	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00287	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0028d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00290	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00296	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00299	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0029c	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 3621 : 			if (exact - actor->movedir > ANGLE_180)

  002a2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002a5	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  002a8	2b 88 90 00 00
	00		 sub	 ecx, DWORD PTR [eax+144]
  002ae	81 f9 00 00 00
	80		 cmp	 ecx, -2147483648	; 80000000H
  002b4	76 0c		 jbe	 SHORT $LN18@A_DetonCha

; 3622 : 				actor->movedir = exact;

  002b6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002b9	8b 4d fc	 mov	 ecx, DWORD PTR _exact$[ebp]
  002bc	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx
$LN18@A_DetonCha:

; 3623 : 		}
; 3624 : 	}
; 3625 : 
; 3626 : 	// check for melee attack
; 3627 : 	if (actor->tracer)

  002c2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002c5	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  002cc	0f 84 a1 00 00
	00		 je	 $LN21@A_DetonCha

; 3628 : 	{
; 3629 : 		if (P_AproxDistance(actor->tracer->x-actor->x, actor->tracer->y-actor->y) < actor->radius+actor->tracer->radius)

  002d2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002d5	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002db	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002de	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  002e1	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  002e4	50		 push	 eax
  002e5	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002e8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  002ee	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002f1	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  002f4	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  002f7	51		 push	 ecx
  002f8	e8 00 00 00 00	 call	 _P_AproxDistance
  002fd	83 c4 08	 add	 esp, 8
  00300	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00303	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00309	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0030c	8b 52 40	 mov	 edx, DWORD PTR [edx+64]
  0030f	03 51 40	 add	 edx, DWORD PTR [ecx+64]
  00312	3b c2		 cmp	 eax, edx
  00314	7d 5d		 jge	 SHORT $LN21@A_DetonCha

; 3630 : 		{
; 3631 : 			if (!((actor->tracer->z > actor->z + actor->height) || (actor->z > actor->tracer->z + actor->tracer->height)))

  00316	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00319	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0031f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00322	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00325	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00328	03 42 44	 add	 eax, DWORD PTR [edx+68]
  0032b	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0032e	7f 43		 jg	 SHORT $LN21@A_DetonCha
  00330	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00333	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00339	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0033c	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00342	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00345	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  00348	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0034b	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  0034e	7f 23		 jg	 SHORT $LN21@A_DetonCha

; 3632 : 			{
; 3633 : 				P_ExplodeMissile(actor);

  00350	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00353	50		 push	 eax
  00354	e8 00 00 00 00	 call	 _P_ExplodeMissile
  00359	83 c4 04	 add	 esp, 4

; 3634 : 				P_RadiusAttack(actor, actor, 96);

  0035c	6a 60		 push	 96			; 00000060H
  0035e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00361	50		 push	 eax
  00362	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00365	51		 push	 ecx
  00366	e8 00 00 00 00	 call	 _P_RadiusAttack
  0036b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3635 : 				return;

  0036e	e9 2d 02 00 00	 jmp	 $LN29@A_DetonCha
$LN21@A_DetonCha:

; 3636 : 			}
; 3637 : 		}
; 3638 : 	}
; 3639 : 
; 3640 : 	// chase towards player
; 3641 : 	if ((dist = P_AproxDistance(xydist, actor->tracer->z-actor->z))
; 3642 : 		> (actor->info->painchance << FRACBITS))

  00373	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00376	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0037c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0037f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00382	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00385	50		 push	 eax
  00386	8b 4d f8	 mov	 ecx, DWORD PTR _xydist$[ebp]
  00389	51		 push	 ecx
  0038a	e8 00 00 00 00	 call	 _P_AproxDistance
  0038f	83 c4 08	 add	 esp, 8
  00392	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax
  00395	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00398	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0039e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  003a1	c1 e1 10	 shl	 ecx, 16			; 00000010H
  003a4	39 4d f4	 cmp	 DWORD PTR _dist$[ebp], ecx
  003a7	7e 18		 jle	 SHORT $LN22@A_DetonCha

; 3643 : 	{
; 3644 : 		P_SetTarget(&actor->tracer, NULL); // Too far away

  003a9	6a 00		 push	 0
  003ab	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003ae	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 _P_SetTarget
  003b9	83 c4 08	 add	 esp, 8

; 3645 : 		return;

  003bc	e9 df 01 00 00	 jmp	 $LN29@A_DetonCha
$LN22@A_DetonCha:

; 3646 : 	}
; 3647 : 
; 3648 : 	if (actor->reactiontime == 0)

  003c1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003c4	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  003cb	75 1a		 jne	 SHORT $LN23@A_DetonCha

; 3649 : 	{
; 3650 : 		actor->reactiontime = actor->info->reactiontime;

  003cd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003d0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  003d6	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003d9	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  003dc	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax

; 3651 : 		return;

  003e2	e9 b9 01 00 00	 jmp	 $LN29@A_DetonCha
$LN23@A_DetonCha:

; 3652 : 	}
; 3653 : 
; 3654 : 	if (actor->reactiontime > 1)

  003e7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003ea	83 b8 9c 00 00
	00 01		 cmp	 DWORD PTR [eax+156], 1
  003f1	7e 1a		 jle	 SHORT $LN24@A_DetonCha

; 3655 : 	{
; 3656 : 		actor->reactiontime--;

  003f3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003f6	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  003fc	83 e9 01	 sub	 ecx, 1
  003ff	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00402	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx

; 3657 : 		return;

  00408	e9 93 01 00 00	 jmp	 $LN29@A_DetonCha
$LN24@A_DetonCha:

; 3658 : 	}
; 3659 : 
; 3660 : 	if (actor->reactiontime > 0)

  0040d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00410	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00417	7e 35		 jle	 SHORT $LN26@A_DetonCha

; 3661 : 	{
; 3662 : 		actor->reactiontime = -42;

  00419	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0041c	c7 80 9c 00 00
	00 d6 ff ff ff	 mov	 DWORD PTR [eax+156], -42 ; ffffffd6H

; 3663 : 
; 3664 : 		if (actor->info->seesound)

  00426	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00429	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0042f	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00433	74 19		 je	 SHORT $LN26@A_DetonCha

; 3665 : 			S_StartScreamSound(actor, actor->info->seesound);

  00435	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00438	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0043e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00441	52		 push	 edx
  00442	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00445	50		 push	 eax
  00446	e8 00 00 00 00	 call	 _S_StartScreamSound
  0044b	83 c4 08	 add	 esp, 8
$LN26@A_DetonCha:

; 3666 : 	}
; 3667 : 
; 3668 : 	if (actor->reactiontime == -42)

  0044e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00451	83 b8 9c 00 00
	00 d6		 cmp	 DWORD PTR [eax+156], -42 ; ffffffd6H
  00458	0f 85 42 01 00
	00		 jne	 $LN29@A_DetonCha

; 3669 : 	{
; 3670 : 		fixed_t xyspeed;
; 3671 : 
; 3672 : 		actor->reactiontime = -42;

  0045e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00461	c7 80 9c 00 00
	00 d6 ff ff ff	 mov	 DWORD PTR [eax+156], -42 ; ffffffd6H

; 3673 : 
; 3674 : 		exact = actor->movedir>>ANGLETOFINESHIFT;

  0046b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0046e	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00474	c1 e9 13	 shr	 ecx, 19			; 00000013H
  00477	89 4d fc	 mov	 DWORD PTR _exact$[ebp], ecx

; 3675 : 		xyspeed = FixedMul(actor->tracer->player->normalspeed*3*(FRACUNIT/4), FINECOSINE(exact));

  0047a	8b 45 fc	 mov	 eax, DWORD PTR _exact$[ebp]
  0047d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00483	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00486	52		 push	 edx
  00487	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0048a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00490	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00496	6b 82 c4 00 00
	00 03		 imul	 eax, DWORD PTR [edx+196], 3
  0049d	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  004a0	50		 push	 eax
  004a1	e8 00 00 00 00	 call	 _FixedMul
  004a6	83 c4 08	 add	 esp, 8
  004a9	89 45 ec	 mov	 DWORD PTR _xyspeed$1[ebp], eax

; 3676 : 		actor->momz = FixedMul(actor->tracer->player->normalspeed*3*(FRACUNIT/4), FINESINE(exact));

  004ac	8b 45 fc	 mov	 eax, DWORD PTR _exact$[ebp]
  004af	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  004b6	51		 push	 ecx
  004b7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  004ba	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  004c0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004c6	6b 91 c4 00 00
	00 03		 imul	 edx, DWORD PTR [ecx+196], 3
  004cd	c1 e2 0e	 shl	 edx, 14			; 0000000eH
  004d0	52		 push	 edx
  004d1	e8 00 00 00 00	 call	 _FixedMul
  004d6	83 c4 08	 add	 esp, 8
  004d9	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  004dc	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 3677 : 
; 3678 : 		exact = actor->angle>>ANGLETOFINESHIFT;

  004df	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  004e2	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  004e5	c1 e9 13	 shr	 ecx, 19			; 00000013H
  004e8	89 4d fc	 mov	 DWORD PTR _exact$[ebp], ecx

; 3679 : 		actor->momx = FixedMul(xyspeed, FINECOSINE(exact));

  004eb	8b 45 fc	 mov	 eax, DWORD PTR _exact$[ebp]
  004ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  004f4	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  004f7	52		 push	 edx
  004f8	8b 45 ec	 mov	 eax, DWORD PTR _xyspeed$1[ebp]
  004fb	50		 push	 eax
  004fc	e8 00 00 00 00	 call	 _FixedMul
  00501	83 c4 08	 add	 esp, 8
  00504	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00507	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3680 : 		actor->momy = FixedMul(xyspeed, FINESINE(exact));

  0050a	8b 45 fc	 mov	 eax, DWORD PTR _exact$[ebp]
  0050d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00514	51		 push	 ecx
  00515	8b 55 ec	 mov	 edx, DWORD PTR _xyspeed$1[ebp]
  00518	52		 push	 edx
  00519	e8 00 00 00 00	 call	 _FixedMul
  0051e	83 c4 08	 add	 esp, 8
  00521	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00524	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 3681 : 
; 3682 : 		// Variable re-use
; 3683 : 		xyspeed = (P_AproxDistance(actor->tracer->x - actor->x, P_AproxDistance(actor->tracer->y - actor->y, actor->tracer->z - actor->z))>>(FRACBITS+6));

  00527	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0052a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00530	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00533	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00536	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00539	50		 push	 eax
  0053a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0053d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00543	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00546	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00549	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0054c	51		 push	 ecx
  0054d	e8 00 00 00 00	 call	 _P_AproxDistance
  00552	83 c4 08	 add	 esp, 8
  00555	50		 push	 eax
  00556	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00559	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0055f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00562	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00565	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00568	52		 push	 edx
  00569	e8 00 00 00 00	 call	 _P_AproxDistance
  0056e	83 c4 08	 add	 esp, 8
  00571	c1 f8 16	 sar	 eax, 22			; 00000016H
  00574	89 45 ec	 mov	 DWORD PTR _xyspeed$1[ebp], eax

; 3684 : 
; 3685 : 		if (xyspeed < 1)

  00577	83 7d ec 01	 cmp	 DWORD PTR _xyspeed$1[ebp], 1
  0057b	7d 07		 jge	 SHORT $LN28@A_DetonCha

; 3686 : 			xyspeed = 1;

  0057d	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _xyspeed$1[ebp], 1
$LN28@A_DetonCha:

; 3687 : 
; 3688 : 		if (leveltime % xyspeed == 0)

  00584	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00589	33 d2		 xor	 edx, edx
  0058b	f7 75 ec	 div	 DWORD PTR _xyspeed$1[ebp]
  0058e	85 d2		 test	 edx, edx
  00590	75 0e		 jne	 SHORT $LN29@A_DetonCha

; 3689 : 			S_StartSound(actor, sfx_deton);

  00592	6a 2d		 push	 45			; 0000002dH
  00594	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 _S_StartSound
  0059d	83 c4 08	 add	 esp, 8
$LN29@A_DetonCha:

; 3690 : 	}
; 3691 : }

  005a0	5f		 pop	 edi
  005a1	5e		 pop	 esi
  005a2	5b		 pop	 ebx
  005a3	8b e5		 mov	 esp, ebp
  005a5	5d		 pop	 ebp
  005a6	c3		 ret	 0
_A_DetonChase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MouseThink
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_MouseThink PROC					; COMDAT

; 3537 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3538 : 	if (actor->reactiontime)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00013	74 15		 je	 SHORT $LN2@A_MouseThi

; 3539 : 		actor->reactiontime--;

  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00024	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN2@A_MouseThi:

; 3540 : 
; 3541 : 	if (actor->z == actor->floorz && !actor->reactiontime)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00030	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00033	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00036	75 6c		 jne	 SHORT $LN3@A_MouseThi
  00038	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003b	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00042	75 60		 jne	 SHORT $LN3@A_MouseThi

; 3542 : 	{
; 3543 : 		if (P_Random() & 1)

  00044	e8 00 00 00 00	 call	 _P_Random
  00049	0f b6 c0	 movzx	 eax, al
  0004c	83 e0 01	 and	 eax, 1
  0004f	74 14		 je	 SHORT $LN4@A_MouseThi

; 3544 : 			actor->angle += ANGLE_90;

  00051	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00054	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00057	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  0005d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00060	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  00063	eb 12		 jmp	 SHORT $LN5@A_MouseThi
$LN4@A_MouseThi:

; 3545 : 		else
; 3546 : 			actor->angle -= ANGLE_90;

  00065	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00068	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0006b	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00071	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00074	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN5@A_MouseThi:

; 3547 : 
; 3548 : 		P_InstaThrust(actor, actor->angle, actor->info->speed);

  00077	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00080	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00083	52		 push	 edx
  00084	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00087	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0008a	51		 push	 ecx
  0008b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 _P_InstaThrust
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3549 : 		actor->reactiontime = TICRATE/5;

  00097	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009a	c7 80 9c 00 00
	00 07 00 00 00	 mov	 DWORD PTR [eax+156], 7
$LN3@A_MouseThi:

; 3550 : 	}
; 3551 : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_A_MouseThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ChickenCheck
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_ChickenCheck PROC					; COMDAT

; 3462 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3463 : 	if (actor->z <= actor->floorz)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0000f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00012	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00015	7f 79		 jg	 SHORT $LN2@A_ChickenC

; 3464 : 	{
; 3465 : 		if (!(actor->momx || actor->momy || actor->momz)
; 3466 : 			&& actor->state > &states[actor->info->seestate])

  00017	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001a	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0001e	75 52		 jne	 SHORT $LN3@A_ChickenC
  00020	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00023	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00027	75 49		 jne	 SHORT $LN3@A_ChickenC
  00029	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002c	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00030	75 40		 jne	 SHORT $LN3@A_ChickenC
  00032	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00035	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0003b	6b 51 0c 1c	 imul	 edx, DWORD PTR [ecx+12], 28
  0003f	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00045	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00048	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0004b	76 25		 jbe	 SHORT $LN3@A_ChickenC

; 3467 : 		{
; 3468 : 			A_Chase(actor);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _A_Chase
  00056	83 c4 04	 add	 esp, 4

; 3469 : 			P_SetMobjState(actor, actor->info->seestate);

  00059	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00062	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00065	52		 push	 edx
  00066	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _P_SetMobjState
  0006f	83 c4 08	 add	 esp, 8
$LN3@A_ChickenC:

; 3470 : 		}
; 3471 : 
; 3472 : 		actor->momx >>= 2;

  00072	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00075	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00078	c1 f9 02	 sar	 ecx, 2
  0007b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0007e	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 3473 : 		actor->momy >>= 2;

  00081	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00084	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00087	c1 f9 02	 sar	 ecx, 2
  0008a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0008d	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
$LN2@A_ChickenC:

; 3474 : 	}
; 3475 : 
; 3476 : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_A_ChickenCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MinusCheck
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_MinusCheck PROC					; COMDAT

; 3438 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3439 : 	if (actor->z <= actor->floorz)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0000f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00012	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00015	7f 58		 jg	 SHORT $LN2@A_MinusChe

; 3440 : 	{
; 3441 : 		P_SetMobjState(actor, actor->info->seestate);

  00017	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00020	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00023	52		 push	 edx
  00024	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _P_SetMobjState
  0002d	83 c4 08	 add	 esp, 8

; 3442 : 		actor->flags &= ~MF_SPECIAL;

  00030	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00033	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00036	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00039	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003c	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3443 : 		actor->flags &= ~MF_SHOOTABLE;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00042	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00045	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00048	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004b	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3444 : 		actor->flags &= ~MF_ENEMY;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00051	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00054	81 e1 ff ff ff
	fe		 and	 ecx, -16777217		; feffffffH
  0005a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0005d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3445 : 		actor->reactiontime = TICRATE;

  00060	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00063	c7 80 9c 00 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+156], 35	; 00000023H

; 3446 : 		return;

  0006d	eb 3d		 jmp	 SHORT $LN3@A_MinusChe
$LN2@A_MinusChe:

; 3447 : 	}
; 3448 : 
; 3449 : 	// 'Falling' animation
; 3450 : 	if (actor->momz < 0 && actor->state < &states[actor->info->meleestate])

  0006f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00072	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00076	7d 34		 jge	 SHORT $LN3@A_MinusChe
  00078	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00081	6b 51 28 1c	 imul	 edx, DWORD PTR [ecx+40], 28
  00085	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00091	73 19		 jae	 SHORT $LN3@A_MinusChe

; 3451 : 		P_SetMobjState(actor, actor->info->meleestate);

  00093	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00096	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0009c	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0009f	52		 push	 edx
  000a0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _P_SetMobjState
  000a9	83 c4 08	 add	 esp, 8
$LN3@A_MinusChe:

; 3452 : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_A_MinusCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MinusPopup
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_MinusPopup PROC					; COMDAT

; 3419 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3420 : 	actor->momz = 10*FRACUNIT;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	c7 40 50 00 00
	0a 00		 mov	 DWORD PTR [eax+80], 655360 ; 000a0000H

; 3421 : 
; 3422 : 	actor->flags |= MF_SPECIAL;

  00013	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00016	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00019	83 c9 01	 or	 ecx, 1
  0001c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0001f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3423 : 	actor->flags |= MF_SHOOTABLE;

  00022	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00025	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00028	83 c9 04	 or	 ecx, 4
  0002b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002e	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3424 : 	actor->flags |= MF_ENEMY;

  00031	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00034	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00037	81 c9 00 00 00
	01		 or	 ecx, 16777216		; 01000000H
  0003d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00040	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3425 : 
; 3426 : 	// Sound for busting out of the ground.
; 3427 : 	S_StartSound(actor, actor->info->attacksound);

  00043	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00046	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0004c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004f	52		 push	 edx
  00050	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _S_StartSound
  00059	83 c4 08	 add	 esp, 8

; 3428 : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_A_MinusPopup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MinusDigging
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_MinusDigging PROC					; COMDAT

; 3374 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3375 : 	actor->flags &= ~MF_SPECIAL;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0000f	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00012	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00015	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3376 : 	actor->flags &= ~MF_SHOOTABLE;

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001e	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00021	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00024	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3377 : 	actor->flags &= ~MF_ENEMY;

  00027	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0002d	81 e1 ff ff ff
	fe		 and	 ecx, -16777217		; feffffffH
  00033	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00036	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3378 : 
; 3379 : 	if (!actor->target)

  00039	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00043	75 11		 jne	 SHORT $LN2@A_MinusDig

; 3380 : 	{
; 3381 : 		A_Look(actor);

  00045	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _A_Look
  0004e	83 c4 04	 add	 esp, 4

; 3382 : 		return;

  00051	e9 0d 01 00 00	 jmp	 $LN1@A_MinusDig
$LN2@A_MinusDig:

; 3383 : 	}
; 3384 : 
; 3385 : 	if (actor->reactiontime)

  00056	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00059	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00060	74 1a		 je	 SHORT $LN3@A_MinusDig

; 3386 : 	{
; 3387 : 		actor->reactiontime--;

  00062	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00065	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0006b	83 e9 01	 sub	 ecx, 1
  0006e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00071	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx

; 3388 : 		return;

  00077	e9 e7 00 00 00	 jmp	 $LN1@A_MinusDig
$LN3@A_MinusDig:

; 3389 : 	}
; 3390 : 
; 3391 : 	// Dirt trail
; 3392 : 	P_SpawnGhostMobj(actor);

  0007c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  00085	83 c4 04	 add	 esp, 4

; 3393 : 
; 3394 : 	actor->flags |= MF_NOCLIPTHING;

  00088	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0008e	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  00094	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00097	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3395 : 	var1 = 3;

  0009a	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _var1, 3

; 3396 : 	A_Chase(actor);

  000a4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _A_Chase
  000ad	83 c4 04	 add	 esp, 4

; 3397 : 	actor->flags &= ~MF_NOCLIPTHING;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000b6	81 e1 ff ff ff
	bf		 and	 ecx, -1073741825	; bfffffffH
  000bc	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000bf	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3398 : 
; 3399 : 	// Play digging sound
; 3400 : 	if (!(leveltime & 15))

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  000c7	83 e0 0f	 and	 eax, 15			; 0000000fH
  000ca	75 19		 jne	 SHORT $LN4@A_MinusDig

; 3401 : 		S_StartSound(actor, actor->info->activesound);

  000cc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cf	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d5	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  000d8	52		 push	 edx
  000d9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _S_StartSound
  000e2	83 c4 08	 add	 esp, 8
$LN4@A_MinusDig:

; 3402 : 
; 3403 : 	// If we're close enough to our target, pop out of the ground
; 3404 : 	if (P_AproxDistance(actor->target->x-actor->x, actor->target->y-actor->y) < actor->radius
; 3405 : 		&& abs(actor->target->z - actor->z) < actor->height)

  000e5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e8	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000ee	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000f1	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000f4	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  000f7	50		 push	 eax
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000fb	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00101	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00104	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00107	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 _P_AproxDistance
  00110	83 c4 08	 add	 esp, 8
  00113	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00116	3b 42 40	 cmp	 eax, DWORD PTR [edx+64]
  00119	7d 3c		 jge	 SHORT $LN5@A_MinusDig
  0011b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0011e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00124	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00127	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0012a	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _abs
  00133	83 c4 04	 add	 esp, 4
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00139	3b 41 44	 cmp	 eax, DWORD PTR [ecx+68]
  0013c	7d 19		 jge	 SHORT $LN5@A_MinusDig

; 3406 : 		P_SetMobjState(actor, actor->info->missilestate);

  0013e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00141	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00147	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0014a	52		 push	 edx
  0014b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 _P_SetMobjState
  00154	83 c4 08	 add	 esp, 8
$LN5@A_MinusDig:

; 3407 : 
; 3408 : 	actor->z = actor->floorz; // Snap to ground

  00157	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0015d	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00160	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN1@A_MinusDig:

; 3409 : }

  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
_A_MinusDigging ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ShootBullet
_TEXT	SEGMENT
_dist$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ShootBullet PROC					; COMDAT

; 3348 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3349 : 	fixed_t dist;
; 3350 : 
; 3351 : 	if (!actor->target)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	75 05		 jne	 SHORT $LN2@A_ShootBul

; 3352 : 		return;

  00015	e9 ba 00 00 00	 jmp	 $LN4@A_ShootBul
$LN2@A_ShootBul:

; 3353 : 
; 3354 : 	dist = P_AproxDistance(P_AproxDistance(actor->target->x - actor->x, actor->target->y - actor->y), actor->target->z - actor->z);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00023	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00026	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00029	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  0002c	50		 push	 eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00030	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00036	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00039	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0003c	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0003f	51		 push	 ecx
  00040	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00043	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0004c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0004f	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 _P_AproxDistance
  00058	83 c4 08	 add	 esp, 8
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _P_AproxDistance
  00061	83 c4 08	 add	 esp, 8
  00064	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 3355 : 
; 3356 : 	if (dist > actor->info->painchance*FRACUNIT)

  00067	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00070	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00073	c1 e2 10	 shl	 edx, 16			; 00000010H
  00076	39 55 fc	 cmp	 DWORD PTR _dist$[ebp], edx
  00079	7e 02		 jle	 SHORT $LN3@A_ShootBul

; 3357 : 		return;

  0007b	eb 57		 jmp	 SHORT $LN4@A_ShootBul
$LN3@A_ShootBul:

; 3358 : 
; 3359 : 	A_FaceTarget(actor);

  0007d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _A_FaceTarget
  00086	83 c4 04	 add	 esp, 4

; 3360 : 	P_SpawnMissile(actor, actor->target, actor->info->raisestate);

  00089	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00092	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00095	52		 push	 edx
  00096	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00099	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0009f	51		 push	 ecx
  000a0	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 _P_SpawnMissile
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3361 : 
; 3362 : 	if (actor->info->attacksound)

  000ac	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000af	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000b5	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  000b9	74 19		 je	 SHORT $LN4@A_ShootBul

; 3363 : 		S_StartSound(actor, actor->info->attacksound);

  000bb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000be	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000c4	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000c7	52		 push	 edx
  000c8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _S_StartSound
  000d1	83 c4 08	 add	 esp, 8
$LN4@A_ShootBul:

; 3364 : }

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
_A_ShootBullet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_JetgShoot
_TEXT	SEGMENT
_dist$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_JetgShoot PROC					; COMDAT

; 3311 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3312 : 	fixed_t dist;
; 3313 : 
; 3314 : 	if (!actor->target)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	75 05		 jne	 SHORT $LN2@A_JetgShoo

; 3315 : 		return;

  00015	e9 fb 00 00 00	 jmp	 $LN8@A_JetgShoo
$LN2@A_JetgShoo:

; 3316 : 
; 3317 : 	if (actor->reactiontime)

  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00024	74 05		 je	 SHORT $LN3@A_JetgShoo

; 3318 : 		return;

  00026	e9 ea 00 00 00	 jmp	 $LN8@A_JetgShoo
$LN3@A_JetgShoo:

; 3319 : 
; 3320 : 	dist = P_AproxDistance(actor->target->x - actor->x, actor->target->y - actor->y);

  0002b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00034	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00037	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0003a	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  0003d	50		 push	 eax
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00041	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00047	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004a	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0004d	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _P_AproxDistance
  00056	83 c4 08	 add	 esp, 8
  00059	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 3321 : 
; 3322 : 	if (dist > actor->info->painchance*FRACUNIT)

  0005c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00065	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00068	c1 e2 10	 shl	 edx, 16			; 00000010H
  0006b	39 55 fc	 cmp	 DWORD PTR _dist$[ebp], edx
  0006e	7e 05		 jle	 SHORT $LN4@A_JetgShoo

; 3323 : 		return;

  00070	e9 a0 00 00 00	 jmp	 $LN8@A_JetgShoo
$LN4@A_JetgShoo:

; 3324 : 
; 3325 : 	if (dist < 64*FRACUNIT)

  00075	81 7d fc 00 00
	40 00		 cmp	 DWORD PTR _dist$[ebp], 4194304 ; 00400000H
  0007c	7d 05		 jge	 SHORT $LN5@A_JetgShoo

; 3326 : 		return;

  0007e	e9 92 00 00 00	 jmp	 $LN8@A_JetgShoo
$LN5@A_JetgShoo:

; 3327 : 
; 3328 : 	A_FaceTarget(actor);

  00083	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _A_FaceTarget
  0008c	83 c4 04	 add	 esp, 4

; 3329 : 	P_SpawnMissile(actor, actor->target, actor->info->raisestate);

  0008f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00092	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00098	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0009b	52		 push	 edx
  0009c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000a5	51		 push	 ecx
  000a6	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 _P_SpawnMissile
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3330 : 
; 3331 : 	if (ultimatemode)

  000b2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  000b9	85 c0		 test	 eax, eax
  000bb	74 18		 je	 SHORT $LN6@A_JetgShoo

; 3332 : 		actor->reactiontime = actor->info->reactiontime*TICRATE;

  000bd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000c6	6b 51 14 23	 imul	 edx, DWORD PTR [ecx+20], 35
  000ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cd	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  000d3	eb 18		 jmp	 SHORT $LN7@A_JetgShoo
$LN6@A_JetgShoo:

; 3333 : 	else
; 3334 : 		actor->reactiontime = actor->info->reactiontime*TICRATE*2;

  000d5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d8	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000de	6b 51 14 23	 imul	 edx, DWORD PTR [ecx+20], 35
  000e2	d1 e2		 shl	 edx, 1
  000e4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e7	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
$LN7@A_JetgShoo:

; 3335 : 
; 3336 : 	if (actor->info->attacksound)

  000ed	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000f6	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  000fa	74 19		 je	 SHORT $LN8@A_JetgShoo

; 3337 : 		S_StartSound(actor, actor->info->attacksound);

  000fc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ff	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00105	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00108	52		 push	 edx
  00109	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _S_StartSound
  00112	83 c4 08	 add	 esp, 8
$LN8@A_JetgShoo:

; 3338 : }

  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
_A_JetgShoot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_JetgThink
_TEXT	SEGMENT
_thefloor$ = -8						; size = 4
_nextsector$ = -4					; size = 4
_actor$ = 8						; size = 4
_A_JetgThink PROC					; COMDAT

; 3486 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3487 : 	sector_t *nextsector;
; 3488 : 
; 3489 : 	fixed_t thefloor;
; 3490 : 
; 3491 : 	if (actor->z >= actor->waterbottom && actor->watertop > actor->floorz
; 3492 : 		&& actor->z > actor->watertop - 256*FRACUNIT)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0000f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00012	3b 91 c4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+196]
  00018	7c 36		 jl	 SHORT $LN2@A_JetgThin
  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00020	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  00026	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00029	7e 25		 jle	 SHORT $LN2@A_JetgThin
  0002b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002e	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00034	81 e9 00 00 00
	01		 sub	 ecx, 16777216		; 01000000H
  0003a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003d	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00040	7e 0e		 jle	 SHORT $LN2@A_JetgThin

; 3493 : 		thefloor = actor->watertop;

  00042	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00045	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0004b	89 4d f8	 mov	 DWORD PTR _thefloor$[ebp], ecx
  0004e	eb 09		 jmp	 SHORT $LN3@A_JetgThin
$LN2@A_JetgThin:

; 3494 : 	else
; 3495 : 		thefloor = actor->floorz;

  00050	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00053	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00056	89 4d f8	 mov	 DWORD PTR _thefloor$[ebp], ecx
$LN3@A_JetgThin:

; 3496 : 
; 3497 : 	if (actor->target)

  00059	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00063	74 42		 je	 SHORT $LN4@A_JetgThin

; 3498 : 	{
; 3499 : 		if (P_Random() <= 32 && !actor->reactiontime)

  00065	e8 00 00 00 00	 call	 _P_Random
  0006a	0f b6 c0	 movzx	 eax, al
  0006d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00070	7f 27		 jg	 SHORT $LN6@A_JetgThin
  00072	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00075	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  0007c	75 1b		 jne	 SHORT $LN6@A_JetgThin

; 3500 : 			P_SetMobjState(actor, actor->info->missilestate);

  0007e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00081	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00087	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0008a	52		 push	 edx
  0008b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 _P_SetMobjState
  00094	83 c4 08	 add	 esp, 8
  00097	eb 0c		 jmp	 SHORT $LN7@A_JetgThin
$LN6@A_JetgThin:

; 3501 : 		else
; 3502 : 			A_JetChase (actor);

  00099	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _A_JetChase
  000a2	83 c4 04	 add	 esp, 4
$LN7@A_JetgThin:

; 3503 : 	}

  000a5	eb 37		 jmp	 SHORT $LN8@A_JetgThin
$LN4@A_JetgThin:

; 3504 : 	else if (actor->z - (32<<FRACBITS) < thefloor && !(thefloor + (32<<FRACBITS)

  000a7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000aa	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ad	81 e9 00 00 20
	00		 sub	 ecx, 2097152		; 00200000H
  000b3	3b 4d f8	 cmp	 ecx, DWORD PTR _thefloor$[ebp]
  000b6	7d 26		 jge	 SHORT $LN8@A_JetgThin
  000b8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000bb	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000be	8b 55 f8	 mov	 edx, DWORD PTR _thefloor$[ebp]
  000c1	8d 84 0a 00 00
	20 00		 lea	 eax, DWORD PTR [edx+ecx+2097152]
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000cb	3b 41 3c	 cmp	 eax, DWORD PTR [ecx+60]
  000ce	7f 0e		 jg	 SHORT $LN8@A_JetgThin

; 3505 : 		+ actor->height > actor->ceilingz))
; 3506 : 	{
; 3507 : 		actor->z = thefloor + (32<<FRACBITS);

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _thefloor$[ebp]
  000d3	05 00 00 20 00	 add	 eax, 2097152		; 00200000H
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000db	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN8@A_JetgThin:

; 3508 : 	}
; 3509 : 
; 3510 : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  000de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e1	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000e8	74 11		 je	 SHORT $LN10@A_JetgThin
  000ea	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ed	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000f3	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000f6	83 e2 04	 and	 edx, 4
  000f9	75 36		 jne	 SHORT $LN9@A_JetgThin
$LN10@A_JetgThin:

; 3511 : 	{
; 3512 : 		// look for a new target
; 3513 : 		if (P_LookForPlayers(actor, true, false, 0))

  000fb	6a 00		 push	 0
  000fd	6a 00		 push	 0
  000ff	6a 01		 push	 1
  00101	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _P_LookForPlayers
  0010a	83 c4 10	 add	 esp, 16			; 00000010H
  0010d	85 c0		 test	 eax, eax
  0010f	74 05		 je	 SHORT $LN11@A_JetgThin

; 3514 : 			return; // got a new target

  00111	e9 83 00 00 00	 jmp	 $LN14@A_JetgThin
$LN11@A_JetgThin:

; 3515 : 
; 3516 : 		P_SetMobjState(actor, actor->info->spawnstate);

  00116	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00119	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0011f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00122	52		 push	 edx
  00123	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 _P_SetMobjState
  0012c	83 c4 08	 add	 esp, 8

; 3517 : 		return;

  0012f	eb 68		 jmp	 SHORT $LN14@A_JetgThin
$LN9@A_JetgThin:

; 3518 : 	}
; 3519 : 
; 3520 : 	nextsector = R_PointInSubsector(actor->x + actor->momx, actor->y + actor->momy)->sector;

  00131	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00134	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00137	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0013a	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  0013d	51		 push	 ecx
  0013e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00141	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00144	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00147	03 4a 48	 add	 ecx, DWORD PTR [edx+72]
  0014a	51		 push	 ecx
  0014b	e8 00 00 00 00	 call	 _R_PointInSubsector
  00150	83 c4 08	 add	 esp, 8
  00153	8b 00		 mov	 eax, DWORD PTR [eax]
  00155	89 45 fc	 mov	 DWORD PTR _nextsector$[ebp], eax

; 3521 : 
; 3522 : 	// Move downwards or upwards to go through a passageway.
; 3523 : 	if (nextsector->ceilingheight < actor->height)

  00158	8b 45 fc	 mov	 eax, DWORD PTR _nextsector$[ebp]
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0015e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00161	3b 51 44	 cmp	 edx, DWORD PTR [ecx+68]
  00164	7d 14		 jge	 SHORT $LN12@A_JetgThin

; 3524 : 		actor->momz -= 5*FRACUNIT;

  00166	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00169	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0016c	81 e9 00 00 05
	00		 sub	 ecx, 327680		; 00050000H
  00172	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00175	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  00178	eb 1f		 jmp	 SHORT $LN14@A_JetgThin
$LN12@A_JetgThin:

; 3525 : 	else if (nextsector->floorheight > actor->z)

  0017a	8b 45 fc	 mov	 eax, DWORD PTR _nextsector$[ebp]
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00180	8b 10		 mov	 edx, DWORD PTR [eax]
  00182	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  00185	7e 12		 jle	 SHORT $LN14@A_JetgThin

; 3526 : 		actor->momz += 5*FRACUNIT;

  00187	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0018a	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0018d	81 c1 00 00 05
	00		 add	 ecx, 327680		; 00050000H
  00193	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00196	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN14@A_JetgThin:

; 3527 : }

  00199	5f		 pop	 edi
  0019a	5e		 pop	 esi
  0019b	5b		 pop	 ebx
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
_A_JetgThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_JetbThink
_TEXT	SEGMENT
_thefloor$ = -8						; size = 4
_nextsector$ = -4					; size = 4
_actor$ = 8						; size = 4
_A_JetbThink PROC					; COMDAT

; 3253 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3254 : 	sector_t *nextsector;
; 3255 : 
; 3256 : 	fixed_t thefloor;
; 3257 : 
; 3258 : 	if (actor->z >= actor->waterbottom && actor->watertop > actor->floorz
; 3259 : 		&& actor->z > actor->watertop - 256*FRACUNIT)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0000f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00012	3b 91 c4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+196]
  00018	7c 36		 jl	 SHORT $LN2@A_JetbThin
  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00020	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  00026	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00029	7e 25		 jle	 SHORT $LN2@A_JetbThin
  0002b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002e	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00034	81 e9 00 00 00
	01		 sub	 ecx, 16777216		; 01000000H
  0003a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003d	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00040	7e 0e		 jle	 SHORT $LN2@A_JetbThin

; 3260 : 		thefloor = actor->watertop;

  00042	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00045	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0004b	89 4d f8	 mov	 DWORD PTR _thefloor$[ebp], ecx
  0004e	eb 09		 jmp	 SHORT $LN3@A_JetbThin
$LN2@A_JetbThin:

; 3261 : 	else
; 3262 : 		thefloor = actor->floorz;

  00050	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00053	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00056	89 4d f8	 mov	 DWORD PTR _thefloor$[ebp], ecx
$LN3@A_JetbThin:

; 3263 : 
; 3264 : 	if (actor->target)

  00059	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00063	0f 84 f2 00 00
	00		 je	 $LN4@A_JetbThin

; 3265 : 	{
; 3266 : 		A_JetChase (actor);

  00069	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _A_JetChase
  00072	83 c4 04	 add	 esp, 4

; 3267 : 		// check for melee attack
; 3268 : 		if ((actor->z > (actor->floorz + (32<<FRACBITS)))
; 3269 : 			&& P_CheckMeleeRange (actor) && !actor->reactiontime
; 3270 : 			&& (actor->target->z >= actor->floorz))

  00075	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00078	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0007b	81 c1 00 00 20
	00		 add	 ecx, 2097152		; 00200000H
  00081	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00084	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00087	0f 8e cc 00 00
	00		 jle	 $LN6@A_JetbThin
  0008d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _P_CheckMeleeRange
  00096	83 c4 04	 add	 esp, 4
  00099	85 c0		 test	 eax, eax
  0009b	0f 84 b8 00 00
	00		 je	 $LN6@A_JetbThin
  000a1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a4	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  000ab	0f 85 a8 00 00
	00		 jne	 $LN6@A_JetbThin
  000b1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b4	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000ba	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000bd	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000c0	3b 42 38	 cmp	 eax, DWORD PTR [edx+56]
  000c3	0f 8c 90 00 00
	00		 jl	 $LN6@A_JetbThin

; 3271 : 		{
; 3272 : 			if (actor->info->attacksound)

  000c9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cc	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d2	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  000d6	74 19		 je	 SHORT $LN7@A_JetbThin

; 3273 : 				S_StartAttackSound(actor, actor->info->attacksound);

  000d8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000db	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e1	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000e4	52		 push	 edx
  000e5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _S_StartAttackSound
  000ee	83 c4 08	 add	 esp, 8
$LN7@A_JetbThin:

; 3274 : 
; 3275 : 			// use raisestate instead of MT_MINE
; 3276 : 			P_SetTarget(&P_SpawnMobj(actor->x, actor->y, actor->z - (32<<FRACBITS), actor->info->raisestate)->target, actor);

  000f1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f4	50		 push	 eax
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000f8	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  000fe	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00101	50		 push	 eax
  00102	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00105	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00108	81 ea 00 00 20
	00		 sub	 edx, 2097152		; 00200000H
  0010e	52		 push	 edx
  0010f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00112	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00115	51		 push	 ecx
  00116	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00119	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 _P_SpawnMobj
  00122	83 c4 10	 add	 esp, 16			; 00000010H
  00125	05 98 00 00 00	 add	 eax, 152		; 00000098H
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _P_SetTarget
  00130	83 c4 08	 add	 esp, 8

; 3277 : 			actor->reactiontime = TICRATE; // one second

  00133	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00136	c7 80 9c 00 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+156], 35	; 00000023H

; 3278 : 			S_StartSound(actor, actor->info->attacksound);

  00140	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00143	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00149	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0014c	52		 push	 edx
  0014d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _S_StartSound
  00156	83 c4 08	 add	 esp, 8
$LN6@A_JetbThin:

; 3279 : 		}
; 3280 : 	}

  00159	eb 37		 jmp	 SHORT $LN8@A_JetbThin
$LN4@A_JetbThin:

; 3281 : 	else if (((actor->z - (32<<FRACBITS)) < thefloor) && !((thefloor + (32<<FRACBITS) + actor->height) > actor->ceilingz))

  0015b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00161	81 e9 00 00 20
	00		 sub	 ecx, 2097152		; 00200000H
  00167	3b 4d f8	 cmp	 ecx, DWORD PTR _thefloor$[ebp]
  0016a	7d 26		 jge	 SHORT $LN8@A_JetbThin
  0016c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0016f	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00172	8b 55 f8	 mov	 edx, DWORD PTR _thefloor$[ebp]
  00175	8d 84 0a 00 00
	20 00		 lea	 eax, DWORD PTR [edx+ecx+2097152]
  0017c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0017f	3b 41 3c	 cmp	 eax, DWORD PTR [ecx+60]
  00182	7f 0e		 jg	 SHORT $LN8@A_JetbThin

; 3282 : 			actor->z = thefloor+(32<<FRACBITS);

  00184	8b 45 f8	 mov	 eax, DWORD PTR _thefloor$[ebp]
  00187	05 00 00 20 00	 add	 eax, 2097152		; 00200000H
  0018c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0018f	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN8@A_JetbThin:

; 3283 : 
; 3284 : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  00192	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00195	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0019c	74 11		 je	 SHORT $LN10@A_JetbThin
  0019e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a1	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001a7	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  001aa	83 e2 04	 and	 edx, 4
  001ad	75 36		 jne	 SHORT $LN9@A_JetbThin
$LN10@A_JetbThin:

; 3285 :     {
; 3286 : 		// look for a new target
; 3287 : 		if (P_LookForPlayers(actor, true, false, 0))

  001af	6a 00		 push	 0
  001b1	6a 00		 push	 0
  001b3	6a 01		 push	 1
  001b5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 _P_LookForPlayers
  001be	83 c4 10	 add	 esp, 16			; 00000010H
  001c1	85 c0		 test	 eax, eax
  001c3	74 05		 je	 SHORT $LN11@A_JetbThin

; 3288 : 			return; // got a new target

  001c5	e9 83 00 00 00	 jmp	 $LN14@A_JetbThin
$LN11@A_JetbThin:

; 3289 : 
; 3290 : 		P_SetMobjState(actor, actor->info->spawnstate);

  001ca	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001cd	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001d3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001d6	52		 push	 edx
  001d7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _P_SetMobjState
  001e0	83 c4 08	 add	 esp, 8

; 3291 : 		return;

  001e3	eb 68		 jmp	 SHORT $LN14@A_JetbThin
$LN9@A_JetbThin:

; 3292 : 	}
; 3293 : 
; 3294 : 	nextsector = R_PointInSubsector(actor->x + actor->momx, actor->y + actor->momy)->sector;

  001e5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001e8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001eb	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001ee	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  001f1	51		 push	 ecx
  001f2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001f8	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001fb	03 4a 48	 add	 ecx, DWORD PTR [edx+72]
  001fe	51		 push	 ecx
  001ff	e8 00 00 00 00	 call	 _R_PointInSubsector
  00204	83 c4 08	 add	 esp, 8
  00207	8b 00		 mov	 eax, DWORD PTR [eax]
  00209	89 45 fc	 mov	 DWORD PTR _nextsector$[ebp], eax

; 3295 : 
; 3296 : 	// Move downwards or upwards to go through a passageway.
; 3297 : 	if (nextsector->ceilingheight < actor->height)

  0020c	8b 45 fc	 mov	 eax, DWORD PTR _nextsector$[ebp]
  0020f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00212	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00215	3b 51 44	 cmp	 edx, DWORD PTR [ecx+68]
  00218	7d 14		 jge	 SHORT $LN12@A_JetbThin

; 3298 : 		actor->momz -= 5*FRACUNIT;

  0021a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0021d	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00220	81 e9 00 00 05
	00		 sub	 ecx, 327680		; 00050000H
  00226	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00229	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  0022c	eb 1f		 jmp	 SHORT $LN14@A_JetbThin
$LN12@A_JetbThin:

; 3299 : 	else if (nextsector->floorheight > actor->z)

  0022e	8b 45 fc	 mov	 eax, DWORD PTR _nextsector$[ebp]
  00231	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00234	8b 10		 mov	 edx, DWORD PTR [eax]
  00236	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  00239	7e 12		 jle	 SHORT $LN14@A_JetbThin

; 3300 : 		actor->momz += 5*FRACUNIT;

  0023b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0023e	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00241	81 c1 00 00 05
	00		 add	 ecx, 327680		; 00050000H
  00247	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0024a	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN14@A_JetbThin:

; 3301 : }

  0024d	5f		 pop	 edi
  0024e	5e		 pop	 esi
  0024f	5b		 pop	 ebx
  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c3		 ret	 0
_A_JetbThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_JetChase
_TEXT	SEGMENT
_thefloor$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_JetChase PROC					; COMDAT

; 3161 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3162 : 	fixed_t thefloor;
; 3163 : 
; 3164 : 	if (actor->flags & MF_AMBUSH)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0000f	83 e1 20	 and	 ecx, 32			; 00000020H
  00012	74 05		 je	 SHORT $LN2@A_JetChase

; 3165 : 		return;

  00014	e9 d0 03 00 00	 jmp	 $LN27@A_JetChase
$LN2@A_JetChase:

; 3166 : 
; 3167 : 	if (actor->z >= actor->waterbottom && actor->watertop > actor->floorz
; 3168 : 		&& actor->z > actor->watertop - 256*FRACUNIT)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0001f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00022	3b 91 c4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+196]
  00028	7c 36		 jl	 SHORT $LN3@A_JetChase
  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00030	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  00036	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00039	7e 25		 jle	 SHORT $LN3@A_JetChase
  0003b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003e	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00044	81 e9 00 00 00
	01		 sub	 ecx, 16777216		; 01000000H
  0004a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004d	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00050	7e 0e		 jle	 SHORT $LN3@A_JetChase

; 3169 : 		thefloor = actor->watertop;

  00052	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00055	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0005b	89 4d fc	 mov	 DWORD PTR _thefloor$[ebp], ecx
  0005e	eb 09		 jmp	 SHORT $LN4@A_JetChase
$LN3@A_JetChase:

; 3170 : 	else
; 3171 : 		thefloor = actor->floorz;

  00060	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00063	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00066	89 4d fc	 mov	 DWORD PTR _thefloor$[ebp], ecx
$LN4@A_JetChase:

; 3172 : 
; 3173 : 	if (actor->reactiontime)

  00069	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006c	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00073	74 15		 je	 SHORT $LN5@A_JetChase

; 3174 : 		actor->reactiontime--;

  00075	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00078	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0007e	83 e9 01	 sub	 ecx, 1
  00081	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00084	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN5@A_JetChase:

; 3175 : 
; 3176 : 	if (P_Random() % 32 == 1)

  0008a	e8 00 00 00 00	 call	 _P_Random
  0008f	0f b6 c0	 movzx	 eax, al
  00092	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  00097	79 05		 jns	 SHORT $LN29@A_JetChase
  00099	48		 dec	 eax
  0009a	83 c8 e0	 or	 eax, -32		; ffffffe0H
  0009d	40		 inc	 eax
$LN29@A_JetChase:
  0009e	83 f8 01	 cmp	 eax, 1
  000a1	75 33		 jne	 SHORT $LN6@A_JetChase

; 3177 : 	{
; 3178 : 		actor->momx = actor->momx / 2;

  000a3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a6	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  000a9	99		 cdq
  000aa	2b c2		 sub	 eax, edx
  000ac	d1 f8		 sar	 eax, 1
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000b1	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3179 : 		actor->momy = actor->momy / 2;

  000b4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b7	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  000ba	99		 cdq
  000bb	2b c2		 sub	 eax, edx
  000bd	d1 f8		 sar	 eax, 1
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000c2	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 3180 : 		actor->momz = actor->momz / 2;

  000c5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c8	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  000cb	99		 cdq
  000cc	2b c2		 sub	 eax, edx
  000ce	d1 f8		 sar	 eax, 1
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000d3	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN6@A_JetChase:

; 3181 : 	}
; 3182 : 
; 3183 : 	// Bounce if too close to floor or ceiling -
; 3184 : 	// ideal for Jetty-Syns above you on 3d floors
; 3185 : 	if (actor->momz && ((actor->z - (32<<FRACBITS)) < thefloor) && !((thefloor + 32*FRACUNIT + actor->height) > actor->ceilingz))

  000d6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d9	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  000dd	74 3c		 je	 SHORT $LN7@A_JetChase
  000df	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000e5	81 e9 00 00 20
	00		 sub	 ecx, 2097152		; 00200000H
  000eb	3b 4d fc	 cmp	 ecx, DWORD PTR _thefloor$[ebp]
  000ee	7d 2b		 jge	 SHORT $LN7@A_JetChase
  000f0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f3	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _thefloor$[ebp]
  000f9	8d 84 0a 00 00
	20 00		 lea	 eax, DWORD PTR [edx+ecx+2097152]
  00100	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00103	3b 41 3c	 cmp	 eax, DWORD PTR [ecx+60]
  00106	7f 13		 jg	 SHORT $LN7@A_JetChase

; 3186 : 		actor->momz = -actor->momz/2;

  00108	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010b	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  0010e	f7 d8		 neg	 eax
  00110	99		 cdq
  00111	2b c2		 sub	 eax, edx
  00113	d1 f8		 sar	 eax, 1
  00115	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00118	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN7@A_JetChase:

; 3187 : 
; 3188 : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  0011b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0011e	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00125	74 11		 je	 SHORT $LN9@A_JetChase
  00127	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0012a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00130	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00133	83 e2 04	 and	 edx, 4
  00136	75 57		 jne	 SHORT $LN8@A_JetChase
$LN9@A_JetChase:

; 3189 : 	{
; 3190 : 		// look for a new target
; 3191 : 		if (P_LookForPlayers(actor, true, false, 0))

  00138	6a 00		 push	 0
  0013a	6a 00		 push	 0
  0013c	6a 01		 push	 1
  0013e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _P_LookForPlayers
  00147	83 c4 10	 add	 esp, 16			; 00000010H
  0014a	85 c0		 test	 eax, eax
  0014c	74 05		 je	 SHORT $LN10@A_JetChase

; 3192 : 			return; // got a new target

  0014e	e9 96 02 00 00	 jmp	 $LN27@A_JetChase
$LN10@A_JetChase:

; 3193 : 
; 3194 : 		actor->momx = actor->momy = actor->momz = 0;

  00153	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00156	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00160	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00167	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0016a	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 3195 : 		P_SetMobjState(actor, actor->info->spawnstate);

  00171	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00174	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0017a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0017d	52		 push	 edx
  0017e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 _P_SetMobjState
  00187	83 c4 08	 add	 esp, 8

; 3196 : 		return;

  0018a	e9 5a 02 00 00	 jmp	 $LN27@A_JetChase
$LN8@A_JetChase:

; 3197 : 	}
; 3198 : 
; 3199 : 	// modify target threshold
; 3200 : 	if (actor->threshold)

  0018f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00192	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00199	74 42		 je	 SHORT $LN13@A_JetChase

; 3201 : 	{
; 3202 : 		if (!actor->target || actor->target->health <= 0)

  0019b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0019e	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  001a5	74 12		 je	 SHORT $LN14@A_JetChase
  001a7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001aa	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001b0	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  001b7	7f 0f		 jg	 SHORT $LN12@A_JetChase
$LN14@A_JetChase:

; 3203 : 			actor->threshold = 0;

  001b9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001bc	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+160], 0
  001c6	eb 15		 jmp	 SHORT $LN13@A_JetChase
$LN12@A_JetChase:

; 3204 : 		else
; 3205 : 			actor->threshold--;

  001c8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001cb	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  001d1	83 e9 01	 sub	 ecx, 1
  001d4	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001d7	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx
$LN13@A_JetChase:

; 3206 : 	}
; 3207 : 
; 3208 : 	// turn towards movement direction if not there yet
; 3209 : 	actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y);

  001dd	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001e0	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001e6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001e9	52		 push	 edx
  001ea	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ed	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001f3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001f6	52		 push	 edx
  001f7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001fa	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001fd	51		 push	 ecx
  001fe	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00201	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 _R_PointToAngle2
  0020a	83 c4 10	 add	 esp, 16			; 00000010H
  0020d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00210	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 3210 : 
; 3211 : 	if ((multiplayer || netgame) && !actor->threshold && (actor->target->health <= 0 || !P_CheckSight(actor, actor->target)))

  00213	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0021a	75 09		 jne	 SHORT $LN16@A_JetChase
  0021c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00223	74 53		 je	 SHORT $LN18@A_JetChase
$LN16@A_JetChase:
  00225	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00228	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  0022f	75 47		 jne	 SHORT $LN18@A_JetChase
  00231	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00234	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0023a	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00241	7e 1a		 jle	 SHORT $LN17@A_JetChase
  00243	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00246	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0024c	51		 push	 ecx
  0024d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 _P_CheckSight
  00256	83 c4 08	 add	 esp, 8
  00259	85 c0		 test	 eax, eax
  0025b	75 1b		 jne	 SHORT $LN18@A_JetChase
$LN17@A_JetChase:

; 3212 : 		if (P_LookForPlayers(actor, true, false, 0))

  0025d	6a 00		 push	 0
  0025f	6a 00		 push	 0
  00261	6a 01		 push	 1
  00263	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 _P_LookForPlayers
  0026c	83 c4 10	 add	 esp, 16			; 00000010H
  0026f	85 c0		 test	 eax, eax
  00271	74 05		 je	 SHORT $LN18@A_JetChase

; 3213 : 			return; // got a new target

  00273	e9 71 01 00 00	 jmp	 $LN27@A_JetChase
$LN18@A_JetChase:

; 3214 : 
; 3215 : 	// If the player is over 3072 fracunits away, then look for another player
; 3216 : 	if (P_AproxDistance(P_AproxDistance(actor->target->x - actor->x, actor->target->y - actor->y),
; 3217 : 		actor->target->z - actor->z) > 3072*FRACUNIT && P_LookForPlayers(actor, true, false, 3072*FRACUNIT))

  00278	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0027b	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00281	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00284	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00287	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  0028a	50		 push	 eax
  0028b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0028e	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00294	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00297	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0029a	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0029d	51		 push	 ecx
  0029e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002a1	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  002a7	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  002aa	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  002ad	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  002b0	52		 push	 edx
  002b1	e8 00 00 00 00	 call	 _P_AproxDistance
  002b6	83 c4 08	 add	 esp, 8
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 _P_AproxDistance
  002bf	83 c4 08	 add	 esp, 8
  002c2	3d 00 00 00 0c	 cmp	 eax, 201326592		; 0c000000H
  002c7	7e 1e		 jle	 SHORT $LN19@A_JetChase
  002c9	68 00 00 00 0c	 push	 201326592		; 0c000000H
  002ce	6a 00		 push	 0
  002d0	6a 01		 push	 1
  002d2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002d5	50		 push	 eax
  002d6	e8 00 00 00 00	 call	 _P_LookForPlayers
  002db	83 c4 10	 add	 esp, 16			; 00000010H
  002de	85 c0		 test	 eax, eax
  002e0	74 05		 je	 SHORT $LN19@A_JetChase

; 3218 : 	{
; 3219 : 		return; // got a new target

  002e2	e9 02 01 00 00	 jmp	 $LN27@A_JetChase
$LN19@A_JetChase:

; 3220 : 	}
; 3221 : 
; 3222 : 	// chase towards player
; 3223 : 	if (ultimatemode)

  002e7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  002ee	85 c0		 test	 eax, eax
  002f0	74 27		 je	 SHORT $LN20@A_JetChase

; 3224 : 		P_Thrust(actor, actor->angle, actor->info->speed/2);

  002f2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002f5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002fb	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  002fe	99		 cdq
  002ff	2b c2		 sub	 eax, edx
  00301	d1 f8		 sar	 eax, 1
  00303	50		 push	 eax
  00304	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00307	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0030a	50		 push	 eax
  0030b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0030e	51		 push	 ecx
  0030f	e8 00 00 00 00	 call	 _P_Thrust
  00314	83 c4 0c	 add	 esp, 12			; 0000000cH
  00317	eb 29		 jmp	 SHORT $LN21@A_JetChase
$LN20@A_JetChase:

; 3225 : 	else
; 3226 : 		P_Thrust(actor, actor->angle, actor->info->speed/4);

  00319	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0031c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00322	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00325	99		 cdq
  00326	83 e2 03	 and	 edx, 3
  00329	03 c2		 add	 eax, edx
  0032b	c1 f8 02	 sar	 eax, 2
  0032e	50		 push	 eax
  0032f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00332	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00335	50		 push	 eax
  00336	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00339	51		 push	 ecx
  0033a	e8 00 00 00 00	 call	 _P_Thrust
  0033f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@A_JetChase:

; 3227 : 
; 3228 : 	// must adjust height
; 3229 : 	if (ultimatemode)

  00342	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00349	85 c0		 test	 eax, eax
  0034b	74 4f		 je	 SHORT $LN22@A_JetChase

; 3230 : 	{
; 3231 : 		if (actor->z < (actor->target->z + actor->target->height + (64<<FRACBITS)))

  0034d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00350	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00356	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00359	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0035f	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00362	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  00365	8d 84 11 00 00
	40 00		 lea	 eax, DWORD PTR [ecx+edx+4194304]
  0036c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0036f	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00372	7d 14		 jge	 SHORT $LN24@A_JetChase

; 3232 : 			actor->momz += FRACUNIT/2;

  00374	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00377	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0037a	81 c1 00 80 00
	00		 add	 ecx, 32768		; 00008000H
  00380	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00383	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  00386	eb 12		 jmp	 SHORT $LN25@A_JetChase
$LN24@A_JetChase:

; 3233 : 		else
; 3234 : 			actor->momz -= FRACUNIT/2;

  00388	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0038b	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0038e	81 e9 00 80 00
	00		 sub	 ecx, 32768		; 00008000H
  00394	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00397	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN25@A_JetChase:

; 3235 : 	}

  0039a	eb 4d		 jmp	 SHORT $LN27@A_JetChase
$LN22@A_JetChase:

; 3236 : 	else
; 3237 : 	{
; 3238 : 		if (actor->z < (actor->target->z + actor->target->height + (32<<FRACBITS)))

  0039c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0039f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  003a5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003a8	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  003ae	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  003b1	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  003b4	8d 84 11 00 00
	20 00		 lea	 eax, DWORD PTR [ecx+edx+2097152]
  003bb	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  003be	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  003c1	7d 14		 jge	 SHORT $LN26@A_JetChase

; 3239 : 			actor->momz += FRACUNIT/2;

  003c3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003c6	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  003c9	81 c1 00 80 00
	00		 add	 ecx, 32768		; 00008000H
  003cf	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003d2	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  003d5	eb 12		 jmp	 SHORT $LN27@A_JetChase
$LN26@A_JetChase:

; 3240 : 		else
; 3241 : 			actor->momz -= FRACUNIT/2;

  003d7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003da	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  003dd	81 e9 00 80 00
	00		 sub	 ecx, 32768		; 00008000H
  003e3	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  003e6	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN27@A_JetChase:

; 3242 : 	}
; 3243 : }

  003e9	5f		 pop	 edi
  003ea	5e		 pop	 esi
  003eb	5b		 pop	 ebx
  003ec	8b e5		 mov	 esp, ebp
  003ee	5d		 pop	 ebp
  003ef	c3		 ret	 0
_A_JetChase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SignPlayer
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_SignPlayer PROC					; COMDAT

; 3142 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3143 : 	if (!actor->target)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	75 02		 jne	 SHORT $LN2@A_SignPlay

; 3144 : 		return;

  00015	eb 46		 jmp	 SHORT $LN1@A_SignPlay
$LN2@A_SignPlay:

; 3145 : 
; 3146 : 	if (!actor->target->player)

  00017	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00020	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00027	75 02		 jne	 SHORT $LN3@A_SignPlay

; 3147 : 		return;

  00029	eb 32		 jmp	 SHORT $LN1@A_SignPlay
$LN3@A_SignPlay:

; 3148 : 
; 3149 : 	actor->skin = &skins[actor->target->player->skin];

  0002b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00034	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0003a	69 82 b8 00 00
	00 ec 00 00 00	 imul	 eax, DWORD PTR [edx+184], 236
  00044	05 00 00 00 00	 add	 eax, OFFSET _skins
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0004c	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 3150 : 	P_SetMobjState(actor, S_PLAY_SIGN);

  0004f	6a 3e		 push	 62			; 0000003eH
  00051	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _P_SetMobjState
  0005a	83 c4 08	 add	 esp, 8
$LN1@A_SignPlay:

; 3151 : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_A_SignPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_UnsetSolidSteam
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_UnsetSolidSteam PROC					; COMDAT

; 3129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3130 : 	actor->flags &= ~MF_SOLID;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0000f	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00012	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00015	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3131 : 	actor->flags |= MF_NOCLIP;

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001e	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00024	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00027	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3132 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_A_UnsetSolidSteam ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SetSolidSteam
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_SetSolidSteam PROC					; COMDAT

; 3104 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3105 : 	actor->flags &= ~MF_NOCLIP;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0000f	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  00015	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00018	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3106 : 	actor->flags |= MF_SOLID;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00021	83 c9 02	 or	 ecx, 2
  00024	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00027	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3107 : 	if (!(P_Random() % 8))

  0002a	e8 00 00 00 00	 call	 _P_Random
  0002f	0f b6 c0	 movzx	 eax, al
  00032	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00037	79 05		 jns	 SHORT $LN7@A_SetSolid
  00039	48		 dec	 eax
  0003a	83 c8 f8	 or	 eax, -8			; fffffff8H
  0003d	40		 inc	 eax
$LN7@A_SetSolid:
  0003e	85 c0		 test	 eax, eax
  00040	75 2a		 jne	 SHORT $LN2@A_SetSolid

; 3108 : 	{
; 3109 : 		if (actor->info->deathsound)

  00042	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00045	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0004b	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0004f	74 19		 je	 SHORT $LN4@A_SetSolid

; 3110 : 			S_StartSound(actor, actor->info->deathsound); // Hiss!

  00051	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00054	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0005a	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0005d	52		 push	 edx
  0005e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _S_StartSound
  00067	83 c4 08	 add	 esp, 8
$LN4@A_SetSolid:

; 3111 : 	}

  0006a	eb 28		 jmp	 SHORT $LN5@A_SetSolid
$LN2@A_SetSolid:

; 3112 : 	else
; 3113 : 	{
; 3114 : 		if (actor->info->painsound)

  0006c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00075	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00079	74 19		 je	 SHORT $LN5@A_SetSolid

; 3115 : 			S_StartSound(actor, actor->info->painsound);

  0007b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00084	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00087	52		 push	 edx
  00088	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _S_StartSound
  00091	83 c4 08	 add	 esp, 8
$LN5@A_SetSolid:

; 3116 : 	}
; 3117 : 
; 3118 : 	P_SetObjectMomZ (actor, 1, true);

  00094	6a 01		 push	 1
  00096	6a 01		 push	 1
  00098	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3119 : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_A_SetSolidSteam ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_GrenadeRing
_TEXT	SEGMENT
_explodedist$ = -28					; size = 4
_yh$ = -24						; size = 4
_yl$ = -20						; size = 4
_xh$ = -16						; size = 4
_xl$ = -12						; size = 4
_by$ = -8						; size = 4
_bx$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_GrenadeRing PROC					; COMDAT

; 3076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3077 : 	INT32 bx, by, xl, xh, yl, yh;
; 3078 : 	const fixed_t explodedist = actor->info->painchance;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00015	89 55 e4	 mov	 DWORD PTR _explodedist$[ebp], edx

; 3079 : 
; 3080 : 	if (leveltime % 35 == 0)

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0001d	33 d2		 xor	 edx, edx
  0001f	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00024	f7 f1		 div	 ecx
  00026	85 d2		 test	 edx, edx
  00028	75 19		 jne	 SHORT $LN8@A_GrenadeR

; 3081 : 		S_StartSound(actor, actor->info->activesound);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00033	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00036	52		 push	 edx
  00037	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _S_StartSound
  00040	83 c4 08	 add	 esp, 8
$LN8@A_GrenadeR:

; 3082 : 
; 3083 : 	// Use blockmap to check for nearby shootables
; 3084 : 	yh = (unsigned)(actor->y + explodedist - bmaporgy)>>MAPBLOCKSHIFT;

  00043	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00046	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00049	03 4d e4	 add	 ecx, DWORD PTR _explodedist$[ebp]
  0004c	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgy
  00052	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00055	89 4d e8	 mov	 DWORD PTR _yh$[ebp], ecx

; 3085 : 	yl = (unsigned)(actor->y - explodedist - bmaporgy)>>MAPBLOCKSHIFT;

  00058	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005e	2b 4d e4	 sub	 ecx, DWORD PTR _explodedist$[ebp]
  00061	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgy
  00067	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0006a	89 4d ec	 mov	 DWORD PTR _yl$[ebp], ecx

; 3086 : 	xh = (unsigned)(actor->x + explodedist - bmaporgx)>>MAPBLOCKSHIFT;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00070	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00073	03 4d e4	 add	 ecx, DWORD PTR _explodedist$[ebp]
  00076	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgx
  0007c	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0007f	89 4d f0	 mov	 DWORD PTR _xh$[ebp], ecx

; 3087 : 	xl = (unsigned)(actor->x - explodedist - bmaporgx)>>MAPBLOCKSHIFT;

  00082	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00085	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00088	2b 4d e4	 sub	 ecx, DWORD PTR _explodedist$[ebp]
  0008b	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgx
  00091	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00094	89 4d f4	 mov	 DWORD PTR _xl$[ebp], ecx

; 3088 : 
; 3089 : 	grenade = actor;

  00097	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009a	a3 00 00 00 00	 mov	 DWORD PTR _grenade, eax

; 3090 : 
; 3091 : 	for (by = yl; by <= yh; by++)

  0009f	8b 45 ec	 mov	 eax, DWORD PTR _yl$[ebp]
  000a2	89 45 f8	 mov	 DWORD PTR _by$[ebp], eax
  000a5	eb 09		 jmp	 SHORT $LN4@A_GrenadeR
$LN2@A_GrenadeR:
  000a7	8b 45 f8	 mov	 eax, DWORD PTR _by$[ebp]
  000aa	83 c0 01	 add	 eax, 1
  000ad	89 45 f8	 mov	 DWORD PTR _by$[ebp], eax
$LN4@A_GrenadeR:
  000b0	8b 45 f8	 mov	 eax, DWORD PTR _by$[ebp]
  000b3	3b 45 e8	 cmp	 eax, DWORD PTR _yh$[ebp]
  000b6	7f 32		 jg	 SHORT $LN3@A_GrenadeR

; 3092 : 		for (bx = xl; bx <= xh; bx++)

  000b8	8b 45 f4	 mov	 eax, DWORD PTR _xl$[ebp]
  000bb	89 45 fc	 mov	 DWORD PTR _bx$[ebp], eax
  000be	eb 09		 jmp	 SHORT $LN7@A_GrenadeR
$LN5@A_GrenadeR:
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _bx$[ebp]
  000c3	83 c0 01	 add	 eax, 1
  000c6	89 45 fc	 mov	 DWORD PTR _bx$[ebp], eax
$LN7@A_GrenadeR:
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _bx$[ebp]
  000cc	3b 45 f0	 cmp	 eax, DWORD PTR _xh$[ebp]
  000cf	7f 17		 jg	 SHORT $LN6@A_GrenadeR

; 3093 : 			P_BlockThingsIterator(bx, by, PIT_GrenadeRing);

  000d1	68 00 00 00 00	 push	 OFFSET _PIT_GrenadeRing
  000d6	8b 45 f8	 mov	 eax, DWORD PTR _by$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d fc	 mov	 ecx, DWORD PTR _bx$[ebp]
  000dd	51		 push	 ecx
  000de	e8 00 00 00 00	 call	 _P_BlockThingsIterator
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e6	eb d8		 jmp	 SHORT $LN5@A_GrenadeR
$LN6@A_GrenadeR:
  000e8	eb bd		 jmp	 SHORT $LN2@A_GrenadeR
$LN3@A_GrenadeR:

; 3094 : }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
_A_GrenadeRing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ThrownRing
_TEXT	SEGMENT
tv243 = -88						; size = 4
_temp$1 = -20						; size = 4
_ring$2 = -16						; size = 4
_player$ = -12						; size = 4
_stop$ = -8						; size = 4
_c$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ThrownRing PROC					; COMDAT

; 2886 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2887 : 	INT32 c = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0

; 2888 : 	INT32 stop;
; 2889 : 	player_t *player;
; 2890 : 
; 2891 : 	if (leveltime % (TICRATE/7) == 0)

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00015	33 d2		 xor	 edx, edx
  00017	b9 05 00 00 00	 mov	 ecx, 5
  0001c	f7 f1		 div	 ecx
  0001e	85 d2		 test	 edx, edx
  00020	0f 85 d2 00 00
	00		 jne	 $LN12@A_ThrownRi

; 2892 : 	{
; 2893 : 		mobj_t *ring = NULL;

  00026	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ring$2[ebp], 0

; 2894 : 
; 2895 : 		if (actor->flags2 & MF2_EXPLOSION)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00030	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00036	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  0003c	74 2a		 je	 SHORT $LN6@A_ThrownRi

; 2896 : 			ring = P_SpawnMobj(actor->x, actor->y, actor->z, MT_SMOK);

  0003e	68 b6 00 00 00	 push	 182			; 000000b6H
  00043	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00046	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00049	51		 push	 ecx
  0004a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00054	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _P_SpawnMobj
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	89 45 f0	 mov	 DWORD PTR _ring$2[ebp], eax
  00063	e9 90 00 00 00	 jmp	 $LN12@A_ThrownRi
$LN6@A_ThrownRi:

; 2897 : 		else if (actor->flags2 & MF2_AUTOMATIC)

  00068	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006b	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00071	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00077	74 11		 je	 SHORT $LN8@A_ThrownRi

; 2898 : 			ring = P_SpawnGhostMobj(actor);

  00079	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  00082	83 c4 04	 add	 esp, 4
  00085	89 45 f0	 mov	 DWORD PTR _ring$2[ebp], eax
  00088	eb 6e		 jmp	 SHORT $LN12@A_ThrownRi
$LN8@A_ThrownRi:

; 2899 : 		else if (!(actor->flags2 & MF2_RAILRING))

  0008a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00093	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  00099	75 27		 jne	 SHORT $LN10@A_ThrownRi

; 2900 : 			ring = P_SpawnMobj(actor->x, actor->y, actor->z, MT_SPARK);

  0009b	68 0d 01 00 00	 push	 269			; 0000010dH
  000a0	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a6	51		 push	 ecx
  000a7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000aa	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ad	50		 push	 eax
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000b1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _P_SpawnMobj
  000ba	83 c4 10	 add	 esp, 16			; 00000010H
  000bd	89 45 f0	 mov	 DWORD PTR _ring$2[ebp], eax
  000c0	eb 36		 jmp	 SHORT $LN12@A_ThrownRi
$LN10@A_ThrownRi:

; 2901 : 		else if (!(actor->flags2 & MF2_GRENADE))

  000c2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000cb	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  000d1	75 25		 jne	 SHORT $LN12@A_ThrownRi

; 2902 : 			ring = P_SpawnMobj(actor->x, actor->y, actor->z, MT_SUPERSPARK);

  000d3	68 a4 00 00 00	 push	 164			; 000000a4H
  000d8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000db	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000de	51		 push	 ecx
  000df	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000e2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000e5	50		 push	 eax
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000e9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 _P_SpawnMobj
  000f2	83 c4 10	 add	 esp, 16			; 00000010H
  000f5	89 45 f0	 mov	 DWORD PTR _ring$2[ebp], eax
$LN12@A_ThrownRi:

; 2903 : 
; 2904 : /*		if (ring)
; 2905 : 		{
; 2906 : 			P_SetTarget(&ring->target, actor);
; 2907 : 			ring->color = actor->color; //copy color
; 2908 : 		}*/
; 2909 : 	}
; 2910 : 
; 2911 : 	// decrement bounce ring time
; 2912 : 	if (actor->flags2 & MF2_BOUNCERING)

  000f8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fb	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00101	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00107	74 34		 je	 SHORT $LN15@A_ThrownRi

; 2913 : 	{
; 2914 : 		if (actor->fuse)

  00109	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010c	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  00113	74 17		 je	 SHORT $LN14@A_ThrownRi

; 2915 : 			actor->fuse--;

  00115	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00118	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  0011e	83 e9 01	 sub	 ecx, 1
  00121	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00124	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
  0012a	eb 11		 jmp	 SHORT $LN15@A_ThrownRi
$LN14@A_ThrownRi:

; 2916 : 		else
; 2917 : 			P_SetMobjState(actor, S_DISS);

  0012c	68 4f 06 00 00	 push	 1615			; 0000064fH
  00131	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _P_SetMobjState
  0013a	83 c4 08	 add	 esp, 8
$LN15@A_ThrownRi:

; 2918 : 	}
; 2919 : 
; 2920 : 	// spilled rings (and thrown bounce) flicker before disappearing
; 2921 : 	if (leveltime & 1 && actor->fuse > 0 && actor->fuse < 2*TICRATE)

  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00142	83 e0 01	 and	 eax, 1
  00145	74 32		 je	 SHORT $LN16@A_ThrownRi
  00147	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014a	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  00151	7e 26		 jle	 SHORT $LN16@A_ThrownRi
  00153	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00156	83 b8 bc 00 00
	00 46		 cmp	 DWORD PTR [eax+188], 70	; 00000046H
  0015d	7d 1a		 jge	 SHORT $LN16@A_ThrownRi

; 2922 : 		actor->flags2 |= MF2_DONTDRAW;

  0015f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00162	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00168	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  0016e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00171	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
  00177	eb 18		 jmp	 SHORT $LN17@A_ThrownRi
$LN16@A_ThrownRi:

; 2923 : 	else
; 2924 : 		actor->flags2 &= ~MF2_DONTDRAW;

  00179	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0017c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00182	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  00188	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0018b	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN17@A_ThrownRi:

; 2925 : 
; 2926 : 	if (actor->tracer && actor->tracer->health <= 0)

  00191	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00194	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0019b	74 25		 je	 SHORT $LN18@A_ThrownRi
  0019d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a0	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  001a6	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  001ad	7f 13		 jg	 SHORT $LN18@A_ThrownRi

; 2927 : 		P_SetTarget(&actor->tracer, NULL);

  001af	6a 00		 push	 0
  001b1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b4	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _P_SetTarget
  001bf	83 c4 08	 add	 esp, 8
$LN18@A_ThrownRi:

; 2928 : 
; 2929 : 	// Updated homing ring special capability
; 2930 : 	// If you have a ring shield, all rings thrown
; 2931 : 	// at you become homing (except rail)!
; 2932 : 	if (actor->tracer)

  001c2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001c5	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  001cc	0f 84 2a 01 00
	00		 je	 $LN22@A_ThrownRi

; 2933 : 	{
; 2934 : 		// A non-homing ring getting attracted by a
; 2935 : 		// magnetic player. If he gets too far away, make
; 2936 : 		// sure to stop the attraction!
; 2937 : 		if ((!actor->tracer->health) || (actor->tracer->player && actor->tracer->player->powers[pw_ringshield]

  001d2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001d5	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  001db	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  001e2	0f 84 85 00 00
	00		 je	 $LN21@A_ThrownRi
  001e8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001eb	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  001f1	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  001f8	0f 84 82 00 00
	00		 je	 $LN20@A_ThrownRi
  001fe	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00201	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00207	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0020d	b8 04 00 00 00	 mov	 eax, 4
  00212	6b c8 09	 imul	 ecx, eax, 9
  00215	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0021a	74 64		 je	 SHORT $LN20@A_ThrownRi
  0021c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0021f	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00225	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00228	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0022b	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  0022e	50		 push	 eax
  0022f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00232	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00238	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0023b	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0023e	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00241	51		 push	 ecx
  00242	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00245	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0024b	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0024e	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00251	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00254	52		 push	 edx
  00255	e8 00 00 00 00	 call	 _P_AproxDistance
  0025a	83 c4 08	 add	 esp, 8
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 _P_AproxDistance
  00263	83 c4 08	 add	 esp, 8
  00266	3d 00 00 80 00	 cmp	 eax, 8388608		; 00800000H
  0026b	7e 13		 jle	 SHORT $LN20@A_ThrownRi
$LN21@A_ThrownRi:

; 2938 : 		    && P_AproxDistance(P_AproxDistance(actor->tracer->x-actor->x,
; 2939 : 		    actor->tracer->y-actor->y), actor->tracer->z-actor->z) > RING_DIST/4))
; 2940 : 		{
; 2941 : 			P_SetTarget(&actor->tracer, NULL);

  0026d	6a 00		 push	 0
  0026f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00272	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 _P_SetTarget
  0027d	83 c4 08	 add	 esp, 8
$LN20@A_ThrownRi:

; 2942 : 		}
; 2943 : 
; 2944 : 		if (actor->tracer && (actor->tracer->health)
; 2945 : 			&& (actor->tracer->player->powers[pw_ringshield]))// Already found someone to follow.

  00280	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00283	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0028a	74 70		 je	 SHORT $LN22@A_ThrownRi
  0028c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0028f	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00295	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0029c	74 5e		 je	 SHORT $LN22@A_ThrownRi
  0029e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002a1	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002a7	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  002ad	b8 04 00 00 00	 mov	 eax, 4
  002b2	6b c8 09	 imul	 ecx, eax, 9
  002b5	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  002ba	74 40		 je	 SHORT $LN22@A_ThrownRi

; 2946 : 		{
; 2947 : 			const INT32 temp = actor->threshold;

  002bc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002bf	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  002c5	89 4d ec	 mov	 DWORD PTR _temp$1[ebp], ecx

; 2948 : 			actor->threshold = 32000;

  002c8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002cb	c7 80 a0 00 00
	00 00 7d 00 00	 mov	 DWORD PTR [eax+160], 32000 ; 00007d00H

; 2949 : 			P_HomingAttack(actor, actor->tracer);

  002d5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002d8	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002de	51		 push	 ecx
  002df	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002e2	52		 push	 edx
  002e3	e8 00 00 00 00	 call	 _P_HomingAttack
  002e8	83 c4 08	 add	 esp, 8

; 2950 : 			actor->threshold = temp;

  002eb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ee	8b 4d ec	 mov	 ecx, DWORD PTR _temp$1[ebp]
  002f1	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx

; 2951 : 			return;

  002f7	e9 9e 02 00 00	 jmp	 $LN1@A_ThrownRi
$LN22@A_ThrownRi:

; 2952 : 		}
; 2953 : 	}
; 2954 : 
; 2955 : 	// first time init, this allow minimum lastlook changes
; 2956 : 	if (actor->lastlook < 0)

  002fc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ff	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00306	7d 11		 jge	 SHORT $LN23@A_ThrownRi

; 2957 : 		actor->lastlook = P_Random();

  00308	e8 00 00 00 00	 call	 _P_Random
  0030d	0f b6 c0	 movzx	 eax, al
  00310	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00313	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
$LN23@A_ThrownRi:

; 2958 : 
; 2959 : 	actor->lastlook %= MAXPLAYERS;

  00319	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0031c	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00322	81 e1 1f 00 00
	80		 and	 ecx, -2147483617	; 8000001fH
  00328	79 05		 jns	 SHORT $LN41@A_ThrownRi
  0032a	49		 dec	 ecx
  0032b	83 c9 e0	 or	 ecx, -32		; ffffffe0H
  0032e	41		 inc	 ecx
$LN41@A_ThrownRi:
  0032f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00332	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx

; 2960 : 
; 2961 : 	stop = (actor->lastlook - 1) & PLAYERSMASK;

  00338	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0033b	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00341	83 e9 01	 sub	 ecx, 1
  00344	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00347	89 4d f8	 mov	 DWORD PTR _stop$[ebp], ecx
  0034a	eb 18		 jmp	 SHORT $LN4@A_ThrownRi
$LN2@A_ThrownRi:

; 2962 : 
; 2963 : 	for (; ; actor->lastlook = (actor->lastlook + 1) & PLAYERSMASK)

  0034c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0034f	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00355	83 c1 01	 add	 ecx, 1
  00358	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0035b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0035e	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx
$LN4@A_ThrownRi:

; 2964 : 	{
; 2965 : 		// done looking
; 2966 : 		if (actor->lastlook == stop)

  00364	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00367	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  0036d	3b 4d f8	 cmp	 ecx, DWORD PTR _stop$[ebp]
  00370	75 05		 jne	 SHORT $LN24@A_ThrownRi

; 2967 : 			return;

  00372	e9 23 02 00 00	 jmp	 $LN1@A_ThrownRi
$LN24@A_ThrownRi:

; 2968 : 
; 2969 : 		if (!playeringame[actor->lastlook])

  00377	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0037a	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00380	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[ecx*4], 0
  00388	75 02		 jne	 SHORT $LN25@A_ThrownRi

; 2970 : 			continue;

  0038a	eb c0		 jmp	 SHORT $LN2@A_ThrownRi
$LN25@A_ThrownRi:

; 2971 : 
; 2972 : 		if (c++ == 2)

  0038c	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  0038f	89 45 a8	 mov	 DWORD PTR tv243[ebp], eax
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _c$[ebp]
  00395	83 c1 01	 add	 ecx, 1
  00398	89 4d fc	 mov	 DWORD PTR _c$[ebp], ecx
  0039b	83 7d a8 02	 cmp	 DWORD PTR tv243[ebp], 2
  0039f	75 05		 jne	 SHORT $LN26@A_ThrownRi

; 2973 : 			return;

  003a1	e9 f4 01 00 00	 jmp	 $LN1@A_ThrownRi
$LN26@A_ThrownRi:

; 2974 : 
; 2975 : 		player = &players[actor->lastlook];

  003a6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  003a9	69 88 a8 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR [eax+168], 508
  003b3	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  003b9	89 4d f4	 mov	 DWORD PTR _player$[ebp], ecx

; 2976 : 
; 2977 : 		if (!player->mo)

  003bc	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  003bf	83 38 00	 cmp	 DWORD PTR [eax], 0
  003c2	75 02		 jne	 SHORT $LN27@A_ThrownRi

; 2978 : 			continue;

  003c4	eb 86		 jmp	 SHORT $LN2@A_ThrownRi
$LN27@A_ThrownRi:

; 2979 : 
; 2980 : 		if (player->mo->health <= 0)

  003c6	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  003c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cb	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  003d2	7f 05		 jg	 SHORT $LN28@A_ThrownRi

; 2981 : 			continue; // dead

  003d4	e9 73 ff ff ff	 jmp	 $LN2@A_ThrownRi
$LN28@A_ThrownRi:

; 2982 : 
; 2983 : 		if ((netgame || multiplayer) && player->spectator)

  003d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  003e0	75 09		 jne	 SHORT $LN30@A_ThrownRi
  003e2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  003e9	74 13		 je	 SHORT $LN29@A_ThrownRi
$LN30@A_ThrownRi:
  003eb	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  003ee	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  003f5	85 c9		 test	 ecx, ecx
  003f7	74 05		 je	 SHORT $LN29@A_ThrownRi

; 2984 : 			continue; // spectator

  003f9	e9 4e ff ff ff	 jmp	 $LN2@A_ThrownRi
$LN29@A_ThrownRi:

; 2985 : 
; 2986 : 		if (actor->target && actor->target->player)

  003fe	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00401	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00408	74 58		 je	 SHORT $LN33@A_ThrownRi
  0040a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0040d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00413	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0041a	74 46		 je	 SHORT $LN33@A_ThrownRi

; 2987 : 		{
; 2988 : 			if (player->mo == actor->target)

  0041c	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0041f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00422	8b 10		 mov	 edx, DWORD PTR [eax]
  00424	3b 91 98 00 00
	00		 cmp	 edx, DWORD PTR [ecx+152]
  0042a	75 05		 jne	 SHORT $LN32@A_ThrownRi

; 2989 : 				continue;

  0042c	e9 1b ff ff ff	 jmp	 $LN2@A_ThrownRi
$LN32@A_ThrownRi:

; 2990 : 
; 2991 : 			// Don't home in on teammates.
; 2992 : 			if (gametype == GT_CTF
; 2993 : 				&& actor->target->player->ctfteam == player->ctfteam)

  00431	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00438	83 f8 04	 cmp	 eax, 4
  0043b	75 25		 jne	 SHORT $LN33@A_ThrownRi
  0043d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00440	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00446	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0044c	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0044f	8b 8a 60 01 00
	00		 mov	 ecx, DWORD PTR [edx+352]
  00455	3b 88 60 01 00
	00		 cmp	 ecx, DWORD PTR [eax+352]
  0045b	75 05		 jne	 SHORT $LN33@A_ThrownRi

; 2994 : 				continue;

  0045d	e9 ea fe ff ff	 jmp	 $LN2@A_ThrownRi
$LN33@A_ThrownRi:

; 2995 : 		}
; 2996 : 
; 2997 : 		// check distance
; 2998 : 		if (actor->flags2 & MF2_RAILRING)

  00462	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00465	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0046b	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  00471	74 4c		 je	 SHORT $LN34@A_ThrownRi

; 2999 : 		{
; 3000 : 			if (P_AproxDistance(P_AproxDistance(player->mo->x-actor->x,
; 3001 : 				player->mo->y-actor->y), player->mo->z-actor->z) > RING_DIST/2)

  00473	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00476	8b 08		 mov	 ecx, DWORD PTR [eax]
  00478	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0047b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0047e	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00481	50		 push	 eax
  00482	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  00485	8b 11		 mov	 edx, DWORD PTR [ecx]
  00487	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0048a	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0048d	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00490	51		 push	 ecx
  00491	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  00494	8b 02		 mov	 eax, DWORD PTR [edx]
  00496	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00499	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0049c	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0049f	52		 push	 edx
  004a0	e8 00 00 00 00	 call	 _P_AproxDistance
  004a5	83 c4 08	 add	 esp, 8
  004a8	50		 push	 eax
  004a9	e8 00 00 00 00	 call	 _P_AproxDistance
  004ae	83 c4 08	 add	 esp, 8
  004b1	3d 00 00 00 01	 cmp	 eax, 16777216		; 01000000H
  004b6	7e 05		 jle	 SHORT $LN36@A_ThrownRi

; 3002 : 			{
; 3003 : 				continue;

  004b8	e9 8f fe ff ff	 jmp	 $LN2@A_ThrownRi
$LN36@A_ThrownRi:

; 3004 : 			}
; 3005 : 		}

  004bd	eb 4a		 jmp	 SHORT $LN37@A_ThrownRi
$LN34@A_ThrownRi:

; 3006 : 		else if (P_AproxDistance(P_AproxDistance(player->mo->x-actor->x,
; 3007 : 			player->mo->y-actor->y), player->mo->z-actor->z) > RING_DIST)

  004bf	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  004c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  004c4	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  004c7	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  004ca	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  004cd	50		 push	 eax
  004ce	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  004d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  004d6	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  004d9	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  004dc	51		 push	 ecx
  004dd	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  004e0	8b 02		 mov	 eax, DWORD PTR [edx]
  004e2	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  004e5	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  004e8	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  004eb	52		 push	 edx
  004ec	e8 00 00 00 00	 call	 _P_AproxDistance
  004f1	83 c4 08	 add	 esp, 8
  004f4	50		 push	 eax
  004f5	e8 00 00 00 00	 call	 _P_AproxDistance
  004fa	83 c4 08	 add	 esp, 8
  004fd	3d 00 00 00 02	 cmp	 eax, 33554432		; 02000000H
  00502	7e 05		 jle	 SHORT $LN37@A_ThrownRi

; 3008 : 		{
; 3009 : 			continue;

  00504	e9 43 fe ff ff	 jmp	 $LN2@A_ThrownRi
$LN37@A_ThrownRi:

; 3010 : 		}
; 3011 : 
; 3012 : 		// do this after distance check because it's more computationally expensive
; 3013 : 		if (!P_CheckSight(actor, player->mo))

  00509	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0050c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0050e	51		 push	 ecx
  0050f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00512	52		 push	 edx
  00513	e8 00 00 00 00	 call	 _P_CheckSight
  00518	83 c4 08	 add	 esp, 8
  0051b	85 c0		 test	 eax, eax
  0051d	75 05		 jne	 SHORT $LN38@A_ThrownRi

; 3014 : 			continue; // out of sight

  0051f	e9 28 fe ff ff	 jmp	 $LN2@A_ThrownRi
$LN38@A_ThrownRi:

; 3015 : 
; 3016 : 		if ((player->powers[pw_ringshield] == true
; 3017 : 		    && P_AproxDistance(P_AproxDistance(player->mo->x-actor->x,

  00524	b8 04 00 00 00	 mov	 eax, 4
  00529	6b c8 09	 imul	 ecx, eax, 9
  0052c	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  0052f	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  00534	75 5d		 jne	 SHORT $LN39@A_ThrownRi
  00536	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00539	8b 08		 mov	 ecx, DWORD PTR [eax]
  0053b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0053e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00541	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00544	50		 push	 eax
  00545	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  00548	8b 11		 mov	 edx, DWORD PTR [ecx]
  0054a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0054d	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00550	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00553	51		 push	 ecx
  00554	8b 55 f4	 mov	 edx, DWORD PTR _player$[ebp]
  00557	8b 02		 mov	 eax, DWORD PTR [edx]
  00559	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0055c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0055f	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00562	52		 push	 edx
  00563	e8 00 00 00 00	 call	 _P_AproxDistance
  00568	83 c4 08	 add	 esp, 8
  0056b	50		 push	 eax
  0056c	e8 00 00 00 00	 call	 _P_AproxDistance
  00571	83 c4 08	 add	 esp, 8
  00574	3d 00 00 80 00	 cmp	 eax, 8388608		; 00800000H
  00579	7d 18		 jge	 SHORT $LN39@A_ThrownRi

; 3018 : 		    player->mo->y-actor->y), player->mo->z-actor->z) < RING_DIST/4))
; 3019 : 			P_SetTarget(&actor->tracer, player->mo);

  0057b	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0057e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00580	51		 push	 ecx
  00581	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00584	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  0058a	52		 push	 edx
  0058b	e8 00 00 00 00	 call	 _P_SetTarget
  00590	83 c4 08	 add	 esp, 8
$LN39@A_ThrownRi:

; 3020 : 		return;

  00593	eb 05		 jmp	 SHORT $LN1@A_ThrownRi

; 3021 : 	}

  00595	e9 b2 fd ff ff	 jmp	 $LN2@A_ThrownRi
$LN1@A_ThrownRi:

; 3022 : 
; 3023 : 	return;
; 3024 : }

  0059a	5f		 pop	 edi
  0059b	5e		 pop	 esi
  0059c	5b		 pop	 ebx
  0059d	8b e5		 mov	 esp, ebp
  0059f	5d		 pop	 ebp
  005a0	c3		 ret	 0
_A_ThrownRing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_FishJump
_TEXT	SEGMENT
_jumpval$1 = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_FishJump PROC					; COMDAT

; 2856 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2857 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 2858 : 
; 2859 : 	if ((actor->z <= actor->floorz) || (actor->z <= actor->watertop - (64 << FRACBITS)))

  00011	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00017	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0001a	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  0001d	7e 17		 jle	 SHORT $LN3@A_FishJump
  0001f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00022	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00028	81 e9 00 00 40
	00		 sub	 ecx, 4194304		; 00400000H
  0002e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00031	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00034	7f 5a		 jg	 SHORT $LN2@A_FishJump
$LN3@A_FishJump:

; 2860 : 	{
; 2861 : 		fixed_t jumpval;
; 2862 : 
; 2863 : 		if (locvar1)

  00036	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  0003a	74 0a		 je	 SHORT $LN4@A_FishJump

; 2864 : 			jumpval = var1;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  00041	89 45 f8	 mov	 DWORD PTR _jumpval$1[ebp], eax
  00044	eb 1b		 jmp	 SHORT $LN5@A_FishJump
$LN4@A_FishJump:

; 2865 : 		else
; 2866 : 			jumpval = AngleFixed(actor->angle)/4;

  00046	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00049	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _AngleFixed
  00052	83 c4 04	 add	 esp, 4
  00055	99		 cdq
  00056	83 e2 03	 and	 edx, 3
  00059	03 c2		 add	 eax, edx
  0005b	c1 f8 02	 sar	 eax, 2
  0005e	89 45 f8	 mov	 DWORD PTR _jumpval$1[ebp], eax
$LN5@A_FishJump:

; 2867 : 
; 2868 : 		if (!jumpval) jumpval = 44*(FRACUNIT/4);

  00061	83 7d f8 00	 cmp	 DWORD PTR _jumpval$1[ebp], 0
  00065	75 07		 jne	 SHORT $LN6@A_FishJump
  00067	c7 45 f8 00 00
	0b 00		 mov	 DWORD PTR _jumpval$1[ebp], 720896 ; 000b0000H
$LN6@A_FishJump:

; 2869 : 		actor->momz = jumpval;

  0006e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _jumpval$1[ebp]
  00074	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 2870 : 		P_SetMobjStateNF(actor, actor->info->seestate);

  00077	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00080	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00083	52		 push	 edx
  00084	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0008d	83 c4 08	 add	 esp, 8
$LN2@A_FishJump:

; 2871 : 	}
; 2872 : 
; 2873 : 	if (actor->momz < 0
; 2874 : 		&& (actor->state < &states[actor->info->meleestate] || actor->state > &states[actor->info->xdeathstate]))

  00090	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00093	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00097	7d 4f		 jge	 SHORT $LN7@A_FishJump
  00099	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000a2	6b 51 28 1c	 imul	 edx, DWORD PTR [ecx+40], 28
  000a6	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  000ac	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000af	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  000b2	72 1b		 jb	 SHORT $LN8@A_FishJump
  000b4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000bd	6b 51 34 1c	 imul	 edx, DWORD PTR [ecx+52], 28
  000c1	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  000c7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ca	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  000cd	76 19		 jbe	 SHORT $LN7@A_FishJump
$LN8@A_FishJump:

; 2875 : 		P_SetMobjStateNF(actor, actor->info->meleestate);

  000cf	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d2	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d8	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000db	52		 push	 edx
  000dc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  000e5	83 c4 08	 add	 esp, 8
$LN7@A_FishJump:

; 2876 : }

  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
_A_FishJump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_DropMine
_TEXT	SEGMENT
_target$1 = -16						; size = 4
_dist$2 = -12						; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_DropMine PROC					; COMDAT

; 2818 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2819 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 2820 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 2821 : 
; 2822 : 	if (locvar2 & 65535)

  00019	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0001c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00021	74 66		 je	 SHORT $LN6@A_DropMine

; 2823 : 	{
; 2824 : 		fixed_t dist;
; 2825 : 		mobj_t *target;
; 2826 : 
; 2827 : 		if (locvar2 >> 16)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  00026	c1 f8 10	 sar	 eax, 16			; 00000010H
  00029	85 c0		 test	 eax, eax
  0002b	74 0e		 je	 SHORT $LN3@A_DropMine

; 2828 : 			target = actor->tracer;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00030	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00036	89 4d f0	 mov	 DWORD PTR _target$1[ebp], ecx
  00039	eb 0c		 jmp	 SHORT $LN4@A_DropMine
$LN3@A_DropMine:

; 2829 : 		else
; 2830 : 			target = actor->target;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00044	89 4d f0	 mov	 DWORD PTR _target$1[ebp], ecx
$LN4@A_DropMine:

; 2831 : 
; 2832 : 		if (!target)

  00047	83 7d f0 00	 cmp	 DWORD PTR _target$1[ebp], 0
  0004b	75 05		 jne	 SHORT $LN5@A_DropMine

; 2833 : 			return;

  0004d	e9 96 00 00 00	 jmp	 $LN1@A_DropMine
$LN5@A_DropMine:

; 2834 : 
; 2835 : 		dist = P_AproxDistance(actor->x-target->x, actor->y-target->y)>>FRACBITS;

  00052	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _target$1[ebp]
  00058	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0005b	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  0005e	52		 push	 edx
  0005f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00062	8b 4d f0	 mov	 ecx, DWORD PTR _target$1[ebp]
  00065	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00068	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _P_AproxDistance
  00071	83 c4 08	 add	 esp, 8
  00074	c1 f8 10	 sar	 eax, 16			; 00000010H
  00077	89 45 f4	 mov	 DWORD PTR _dist$2[ebp], eax

; 2836 : 
; 2837 : 		if (dist > (locvar2 & 65535))

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0007d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00082	39 45 f4	 cmp	 DWORD PTR _dist$2[ebp], eax
  00085	7e 02		 jle	 SHORT $LN6@A_DropMine

; 2838 : 			return;

  00087	eb 5f		 jmp	 SHORT $LN1@A_DropMine
$LN6@A_DropMine:

; 2839 : 	}
; 2840 : 
; 2841 : 	// Use raisestate instead of MT_MINE
; 2842 : 	P_SpawnMobj(actor->x, actor->y, actor->z - 12*FRACUNIT + (locvar1*FRACUNIT), actor->info->raisestate)

  00089	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008c	8b 70 50	 mov	 esi, DWORD PTR [eax+80]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00092	03 71 54	 add	 esi, DWORD PTR [ecx+84]
  00095	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00098	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0009e	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  000a1	51		 push	 ecx
  000a2	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000a5	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  000ab	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000ae	8d 94 08 00 00
	f4 ff		 lea	 edx, DWORD PTR [eax+ecx-786432]
  000b5	52		 push	 edx
  000b6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000bc	51		 push	 ecx
  000bd	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _P_SpawnMobj
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
  000cc	89 70 50	 mov	 DWORD PTR [eax+80], esi

; 2843 : 		->momz = actor->momz + actor->pmomz;
; 2844 : 
; 2845 : 	S_StartSound(actor, actor->info->attacksound);

  000cf	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d2	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000db	52		 push	 edx
  000dc	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _S_StartSound
  000e5	83 c4 08	 add	 esp, 8
$LN1@A_DropMine:

; 2846 : }

  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
_A_DropMine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_AttractChase
_TEXT	SEGMENT
_newring$1 = -4						; size = 4
_actor$ = 8						; size = 4
_A_AttractChase PROC					; COMDAT

; 2758 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2759 : 	if (actor->flags2 & MF2_NIGHTSPULL)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00012	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00018	74 05		 je	 SHORT $LN2@A_AttractC

; 2760 : 		return;

  0001a	e9 2e 02 00 00	 jmp	 $LN1@A_AttractC
$LN2@A_AttractC:

; 2761 : 
; 2762 : 	// spilled rings flicker before disappearing
; 2763 : 	if (leveltime & 1 && actor->type == (mobjtype_t)actor->info->reactiontime && actor->fuse && actor->fuse < 2*TICRATE)

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00024	83 e0 01	 and	 eax, 1
  00027	74 46		 je	 SHORT $LN3@A_AttractC
  00029	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00032	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00035	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00038	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  0003b	75 32		 jne	 SHORT $LN3@A_AttractC
  0003d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00040	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  00047	74 26		 je	 SHORT $LN3@A_AttractC
  00049	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004c	83 b8 bc 00 00
	00 46		 cmp	 DWORD PTR [eax+188], 70	; 00000046H
  00053	7d 1a		 jge	 SHORT $LN3@A_AttractC

; 2764 : 		actor->flags2 |= MF2_DONTDRAW;

  00055	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00058	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0005e	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  00064	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00067	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
  0006d	eb 18		 jmp	 SHORT $LN4@A_AttractC
$LN3@A_AttractC:

; 2765 : 	else
; 2766 : 		actor->flags2 &= ~MF2_DONTDRAW;

  0006f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00072	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00078	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  0007e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00081	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN4@A_AttractC:

; 2767 : 
; 2768 : 	// Turn flingrings back into regular rings if attracted.
; 2769 : 	if (actor->tracer && actor->tracer->player
; 2770 : 		&& !actor->tracer->player->powers[pw_ringshield] && actor->info->reactiontime && actor->type != (mobjtype_t)actor->info->reactiontime)

  00087	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008a	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00091	0f 84 bd 00 00
	00		 je	 $LN5@A_AttractC
  00097	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000a0	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  000a7	0f 84 a7 00 00
	00		 je	 $LN5@A_AttractC
  000ad	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b0	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000b6	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  000bc	b8 04 00 00 00	 mov	 eax, 4
  000c1	6b c8 09	 imul	 ecx, eax, 9
  000c4	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000c9	0f 85 85 00 00
	00		 jne	 $LN5@A_AttractC
  000cf	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d2	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d8	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  000dc	74 76		 je	 SHORT $LN5@A_AttractC
  000de	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ea	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  000ed	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  000f0	74 62		 je	 SHORT $LN5@A_AttractC

; 2771 : 	{
; 2772 : 		mobj_t *newring;
; 2773 : 		newring = P_SpawnMobj(actor->x, actor->y, actor->z, actor->info->reactiontime);

  000f2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000fb	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000fe	52		 push	 edx
  000ff	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00102	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00105	51		 push	 ecx
  00106	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00109	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0010c	50		 push	 eax
  0010d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00110	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00113	52		 push	 edx
  00114	e8 00 00 00 00	 call	 _P_SpawnMobj
  00119	83 c4 10	 add	 esp, 16			; 00000010H
  0011c	89 45 fc	 mov	 DWORD PTR _newring$1[ebp], eax

; 2774 : 		newring->momx = actor->momx;

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _newring$1[ebp]
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00125	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00128	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 2775 : 		newring->momy = actor->momy;

  0012b	8b 45 fc	 mov	 eax, DWORD PTR _newring$1[ebp]
  0012e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00131	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00134	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 2776 : 		newring->momz = actor->momz;

  00137	8b 45 fc	 mov	 eax, DWORD PTR _newring$1[ebp]
  0013a	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0013d	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00140	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 2777 : 		P_SetMobjState(actor, S_DISS);

  00143	68 4f 06 00 00	 push	 1615			; 0000064fH
  00148	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _P_SetMobjState
  00151	83 c4 08	 add	 esp, 8
$LN5@A_AttractC:

; 2778 : 	}
; 2779 : 
; 2780 : 	P_LookForShield(actor); // Go find 'em, boy!

  00154	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 _P_LookForShield
  0015d	83 c4 04	 add	 esp, 4

; 2781 : 
; 2782 : 	if (!actor->tracer
; 2783 : 		|| !actor->tracer->player
; 2784 : 		|| !actor->tracer->health
; 2785 : 		|| !P_CheckSight(actor, actor->tracer)) // You have to be able to SEE it...sorta

  00160	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00163	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0016a	74 3e		 je	 SHORT $LN7@A_AttractC
  0016c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0016f	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00175	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0017c	74 2c		 je	 SHORT $LN7@A_AttractC
  0017e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00181	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00187	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0018e	74 1a		 je	 SHORT $LN7@A_AttractC
  00190	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00193	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00199	51		 push	 ecx
  0019a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0019d	52		 push	 edx
  0019e	e8 00 00 00 00	 call	 _P_CheckSight
  001a3	83 c4 08	 add	 esp, 8
  001a6	85 c0		 test	 eax, eax
  001a8	75 18		 jne	 SHORT $LN6@A_AttractC
$LN7@A_AttractC:

; 2786 : 	{
; 2787 : 		P_SetTarget(&actor->tracer, NULL);

  001aa	6a 00		 push	 0
  001ac	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001af	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _P_SetTarget
  001ba	83 c4 08	 add	 esp, 8

; 2788 : 		return;

  001bd	e9 8b 00 00 00	 jmp	 $LN1@A_AttractC
$LN6@A_AttractC:

; 2789 : 	}
; 2790 : 
; 2791 : 	// If a FlingRing gets attracted by a shield, change it into a normal
; 2792 : 	// ring, but don't count towards the total.
; 2793 : 	if (actor->type == (mobjtype_t)actor->info->reactiontime)

  001c2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001c5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001cb	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001ce	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  001d1	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  001d4	75 3b		 jne	 SHORT $LN8@A_AttractC

; 2794 : 	{
; 2795 : 		P_SetMobjState(actor, S_DISS);

  001d6	68 4f 06 00 00	 push	 1615			; 0000064fH
  001db	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 _P_SetMobjState
  001e4	83 c4 08	 add	 esp, 8

; 2796 : 		P_SpawnMobj(actor->x, actor->y, actor->z, actor->info->painchance);

  001e7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ea	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001f0	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001f3	52		 push	 edx
  001f4	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001f7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001fa	51		 push	 ecx
  001fb	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  001fe	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00201	50		 push	 eax
  00202	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00205	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 _P_SpawnMobj
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@A_AttractC:

; 2797 : 	}
; 2798 : 
; 2799 : 	// Keep stuff from going down inside floors and junk
; 2800 : 	actor->flags &= ~MF_NOCLIPHEIGHT;

  00211	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00214	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00217	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  0021d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00220	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2801 : 
; 2802 : 	// Let attracted rings move through walls and such.
; 2803 : 	actor->flags |= MF_NOCLIP;

  00223	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00226	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00229	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  0022f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00232	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2804 : 
; 2805 : 	P_Attract(actor, actor->tracer, false);

  00235	6a 00		 push	 0
  00237	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0023a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00240	51		 push	 ecx
  00241	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00244	52		 push	 edx
  00245	e8 00 00 00 00	 call	 _P_Attract
  0024a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@A_AttractC:

; 2806 : }

  0024d	5f		 pop	 edi
  0024e	5e		 pop	 esi
  0024f	5b		 pop	 ebx
  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c3		 ret	 0
_A_AttractChase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ParticleSpawn
_TEXT	SEGMENT
_spawn$ = -12						; size = 4
_type$ = -8						; size = 4
_speed$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ParticleSpawn PROC					; COMDAT

; 2619 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2620 : 	fixed_t speed;
; 2621 : 	mobjtype_t type;
; 2622 : 	mobj_t *spawn;
; 2623 : 
; 2624 : 	if (!actor->spawnpoint)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  00013	75 16		 jne	 SHORT $LN2@A_Particle

; 2625 : 	{
; 2626 : 		P_SetMobjState(actor, S_DISS);

  00015	68 4f 06 00 00	 push	 1615			; 0000064fH
  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _P_SetMobjState
  00023	83 c4 08	 add	 esp, 8

; 2627 : 		return;

  00026	e9 9d 00 00 00	 jmp	 $LN1@A_Particle
$LN2@A_Particle:

; 2628 : 	}
; 2629 : 
; 2630 : 	type = MT_PARTICLE + (actor->spawnpoint->angle & 15);

  0002b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00034	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  00038	83 e2 0f	 and	 edx, 15			; 0000000fH
  0003b	81 c2 bd 00 00
	00		 add	 edx, 189		; 000000bdH
  00041	89 55 f8	 mov	 DWORD PTR _type$[ebp], edx

; 2631 : 	speed = (actor->spawnpoint->angle >> 12) << FRACBITS;

  00044	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00047	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0004d	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  00051	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00054	c1 e2 10	 shl	 edx, 16			; 00000010H
  00057	89 55 fc	 mov	 DWORD PTR _speed$[ebp], edx

; 2632 : 
; 2633 : 	spawn = P_SpawnMobj(actor->x, actor->y, actor->z, type);

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00061	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00064	52		 push	 edx
  00065	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00068	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006b	51		 push	 ecx
  0006c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _P_SpawnMobj
  00078	83 c4 10	 add	 esp, 16			; 00000010H
  0007b	89 45 f4	 mov	 DWORD PTR _spawn$[ebp], eax

; 2634 : 	spawn->momz = speed;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _spawn$[ebp]
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _speed$[ebp]
  00084	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 2635 : 	spawn->destscale = 1;

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _spawn$[ebp]
  0008f	66 89 81 ce 00
	00 00		 mov	 WORD PTR [ecx+206], ax

; 2636 : 	spawn->scalespeed = (UINT8)((actor->spawnpoint->angle >> 8) & 63);

  00096	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00099	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0009f	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  000a3	c1 fa 08	 sar	 edx, 8
  000a6	83 e2 3f	 and	 edx, 63			; 0000003fH
  000a9	8b 45 f4	 mov	 eax, DWORD PTR _spawn$[ebp]
  000ac	88 90 d0 00 00
	00		 mov	 BYTE PTR [eax+208], dl

; 2637 : 	actor->tics = actor->spawnpoint->extrainfo + 1;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000bb	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  000bf	83 c2 01	 add	 edx, 1
  000c2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c5	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN1@A_Particle:

; 2638 : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_A_ParticleSpawn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ScoreRise
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_ScoreRise PROC					; COMDAT

; 2607 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2608 : 	actor->momz = actor->info->speed; // make logo rise!

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00015	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00018	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 2609 : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_A_ScoreRise ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_GravityBox
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_GravityBox PROC					; COMDAT

; 2583 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2584 : 	player_t *player;
; 2585 : 
; 2586 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_GravityB
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2a		 jne	 SHORT $LN2@A_GravityB
$LN3@A_GravityB:

; 2587 : 	{
; 2588 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_GravityB

; 2589 : 			CONS_Printf("%s",text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_GravityB:

; 2590 : 		return;

  0004f	eb 42		 jmp	 SHORT $LN1@A_GravityB
$LN2@A_GravityB:

; 2591 : 	}
; 2592 : 
; 2593 : 	player = actor->target->player;

  00051	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00054	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005a	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00060	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2594 : 	player->powers[pw_gravityboots] = gravbootstics + 1;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravbootstics
  00068	83 c0 01	 add	 eax, 1
  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	c1 e1 04	 shl	 ecx, 4
  00073	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00076	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 2595 : 
; 2596 : 	S_StartSound(player, actor->info->activesound);

  0007a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0007d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00083	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00086	52		 push	 edx
  00087	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _S_StartSound
  00090	83 c4 08	 add	 esp, 8
$LN1@A_GravityB:

; 2597 : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_A_GravityBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ForceShield
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ForceShield PROC					; COMDAT

; 2549 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2550 : 	player_t *player;
; 2551 : 
; 2552 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_ForceShi
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2d		 jne	 SHORT $LN2@A_ForceShi
$LN3@A_ForceShi:

; 2553 : 	{
; 2554 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_ForceShi

; 2555 : 			CONS_Printf("%s",text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_ForceShi:

; 2556 : 		return;

  0004f	e9 bf 00 00 00	 jmp	 $LN1@A_ForceShi
$LN2@A_ForceShi:

; 2557 : 	}
; 2558 : 
; 2559 : 	player = actor->target->player;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00063	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2560 : 
; 2561 : 	player->powers[pw_bombshield] = player->powers[pw_watershield] = false;

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	6b c8 0b	 imul	 ecx, eax, 11
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00071	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	6b c8 0a	 imul	 ecx, eax, 10
  00081	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00084	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2562 : 	player->powers[pw_ringshield] = player->powers[pw_jumpshield] = false;

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 03	 imul	 ecx, eax, 3
  00094	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00097	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	6b c8 09	 imul	 ecx, eax, 9
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000aa	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2563 : 
; 2564 : 	if (!(player->powers[pw_forceshield]))

  000b2	b8 04 00 00 00	 mov	 eax, 4
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000bd	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  000c2	75 21		 jne	 SHORT $LN5@A_ForceShi

; 2565 : 	{
; 2566 : 		player->powers[pw_forceshield] = 2;

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	c1 e0 02	 shl	 eax, 2
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000cf	c7 44 01 38 02
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 2

; 2567 : 		P_SpawnShieldOrb(player);

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  000e0	83 c4 04	 add	 esp, 4

; 2568 : 	}

  000e3	eb 13		 jmp	 SHORT $LN6@A_ForceShi
$LN5@A_ForceShi:

; 2569 : 	else
; 2570 : 		player->powers[pw_forceshield] = 2;

  000e5	b8 04 00 00 00	 mov	 eax, 4
  000ea	c1 e0 02	 shl	 eax, 2
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000f0	c7 44 01 38 02
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 2
$LN6@A_ForceShi:

; 2571 : 
; 2572 : 	S_StartSound(player->mo, actor->info->seesound);

  000f8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fb	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00101	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00104	52		 push	 edx
  00105	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00108	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 _S_StartSound
  00110	83 c4 08	 add	 esp, 8
$LN1@A_ForceShi:

; 2573 : }

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
_A_ForceShield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_WaterShield
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_WaterShield PROC					; COMDAT

; 2507 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2508 : 	player_t *player;
; 2509 : 
; 2510 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_WaterShi
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2d		 jne	 SHORT $LN2@A_WaterShi
$LN3@A_WaterShi:

; 2511 : 	{
; 2512 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_WaterShi

; 2513 : 			CONS_Printf("%s",text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_WaterShi:

; 2514 : 		return;

  0004f	e9 21 01 00 00	 jmp	 $LN1@A_WaterShi
$LN2@A_WaterShi:

; 2515 : 	}
; 2516 : 
; 2517 : 	player = actor->target->player;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00063	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2518 : 
; 2519 : 	player->powers[pw_bombshield] = player->powers[pw_forceshield] = false;

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	c1 e0 02	 shl	 eax, 2
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00071	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0
  00079	ba 04 00 00 00	 mov	 edx, 4
  0007e	6b c2 0a	 imul	 eax, edx, 10
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00084	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2520 : 	player->powers[pw_ringshield] = player->powers[pw_jumpshield] = false;

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 03	 imul	 ecx, eax, 3
  00094	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00097	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	6b c8 09	 imul	 ecx, eax, 9
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000aa	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2521 : 
; 2522 : 	if (!(player->powers[pw_watershield]))

  000b2	b8 04 00 00 00	 mov	 eax, 4
  000b7	6b c8 0b	 imul	 ecx, eax, 11
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000bd	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000c2	75 1f		 jne	 SHORT $LN5@A_WaterShi

; 2523 : 	{
; 2524 : 		player->powers[pw_watershield] = true;

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	6b c8 0b	 imul	 ecx, eax, 11
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000cf	c7 44 0a 38 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 1

; 2525 : 		P_SpawnShieldOrb(player);

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  000e0	83 c4 04	 add	 esp, 4
$LN5@A_WaterShi:

; 2526 : 	}
; 2527 : 
; 2528 : 	if (player->powers[pw_underwater] && player->powers[pw_underwater] <= 12*TICRATE + 1)

  000e3	b8 04 00 00 00	 mov	 eax, 4
  000e8	6b c8 06	 imul	 ecx, eax, 6
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000ee	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000f3	74 21		 je	 SHORT $LN6@A_WaterShi
  000f5	b8 04 00 00 00	 mov	 eax, 4
  000fa	6b c8 06	 imul	 ecx, eax, 6
  000fd	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00100	81 7c 0a 38 a5
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 421 ; 000001a5H
  00108	7f 0c		 jg	 SHORT $LN6@A_WaterShi

; 2529 : 		P_RestoreMusic(player);

  0010a	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _P_RestoreMusic
  00113	83 c4 04	 add	 esp, 4
$LN6@A_WaterShi:

; 2530 : 
; 2531 : 	player->powers[pw_underwater] = 0;

  00116	b8 04 00 00 00	 mov	 eax, 4
  0011b	6b c8 06	 imul	 ecx, eax, 6
  0011e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00121	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2532 : 
; 2533 : 	if (player->powers[pw_spacetime] > 1)

  00129	b8 04 00 00 00	 mov	 eax, 4
  0012e	6b c8 07	 imul	 ecx, eax, 7
  00131	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00134	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  00139	7e 1f		 jle	 SHORT $LN7@A_WaterShi

; 2534 : 	{
; 2535 : 		player->powers[pw_spacetime] = 0;

  0013b	b8 04 00 00 00	 mov	 eax, 4
  00140	6b c8 07	 imul	 ecx, eax, 7
  00143	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00146	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2536 : 		P_RestoreMusic(player);

  0014e	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 _P_RestoreMusic
  00157	83 c4 04	 add	 esp, 4
$LN7@A_WaterShi:

; 2537 : 	}
; 2538 : 	S_StartSound(player->mo, actor->info->seesound);

  0015a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00163	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00166	52		 push	 edx
  00167	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	51		 push	 ecx
  0016d	e8 00 00 00 00	 call	 _S_StartSound
  00172	83 c4 08	 add	 esp, 8
$LN1@A_WaterShi:

; 2539 : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
_A_WaterShield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BombShield
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_BombShield PROC					; COMDAT

; 2475 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2476 : 	player_t *player;
; 2477 : 
; 2478 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_BombShie
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2d		 jne	 SHORT $LN2@A_BombShie
$LN3@A_BombShie:

; 2479 : 	{
; 2480 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_BombShie

; 2481 : 			CONS_Printf("%s",text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_BombShie:

; 2482 : 		return;

  0004f	e9 aa 00 00 00	 jmp	 $LN1@A_BombShie
$LN2@A_BombShie:

; 2483 : 	}
; 2484 : 
; 2485 : 	player = actor->target->player;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00063	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2486 : 
; 2487 : 	player->powers[pw_watershield] = player->powers[pw_forceshield] = false;

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	c1 e0 02	 shl	 eax, 2
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00071	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0
  00079	ba 04 00 00 00	 mov	 edx, 4
  0007e	6b c2 0b	 imul	 eax, edx, 11
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00084	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2488 : 	player->powers[pw_ringshield] = player->powers[pw_jumpshield] = false;

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 03	 imul	 ecx, eax, 3
  00094	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00097	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	6b c8 09	 imul	 ecx, eax, 9
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000aa	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2489 : 
; 2490 : 	if (!(player->powers[pw_bombshield]))

  000b2	b8 04 00 00 00	 mov	 eax, 4
  000b7	6b c8 0a	 imul	 ecx, eax, 10
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000bd	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000c2	75 1f		 jne	 SHORT $LN5@A_BombShie

; 2491 : 	{
; 2492 : 		player->powers[pw_bombshield] = true;

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	6b c8 0a	 imul	 ecx, eax, 10
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000cf	c7 44 0a 38 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 1

; 2493 : 		P_SpawnShieldOrb(player);

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  000e0	83 c4 04	 add	 esp, 4
$LN5@A_BombShie:

; 2494 : 	}
; 2495 : 
; 2496 : 	S_StartSound(player->mo, actor->info->seesound);

  000e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e6	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ec	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ef	52		 push	 edx
  000f0	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 _S_StartSound
  000fb	83 c4 08	 add	 esp, 8
$LN1@A_BombShie:

; 2497 : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
_A_BombShield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_ExtraLife
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_ExtraLife PROC					; COMDAT

; 2435 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2436 : 	player_t *player;
; 2437 : 
; 2438 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_ExtraLif
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2d		 jne	 SHORT $LN2@A_ExtraLif
$LN3@A_ExtraLif:

; 2439 : 	{
; 2440 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_ExtraLif

; 2441 : 			CONS_Printf("%s",text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_ExtraLif:

; 2442 : 		return;

  0004f	e9 b2 00 00 00	 jmp	 $LN10@A_ExtraLif
$LN2@A_ExtraLif:

; 2443 : 	}
; 2444 : 
; 2445 : 	player = actor->target->player;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00063	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2446 : 
; 2447 : 	// In shooter gametypes, give the player 100 rings instead of an extra life.
; 2448 : 	if (gametype == GT_MATCH || gametype == GT_CTF || gametype == GT_TAG)

  00066	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0006d	83 f8 01	 cmp	 eax, 1
  00070	74 18		 je	 SHORT $LN7@A_ExtraLif
  00072	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00079	83 f8 04	 cmp	 eax, 4
  0007c	74 0c		 je	 SHORT $LN7@A_ExtraLif
  0007e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00085	83 f8 03	 cmp	 eax, 3
  00088	75 12		 jne	 SHORT $LN5@A_ExtraLif
$LN7@A_ExtraLif:

; 2449 : 		P_GivePlayerRings(player, 100, false);

  0008a	6a 00		 push	 0
  0008c	6a 64		 push	 100			; 00000064H
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _P_GivePlayerRings
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	eb 0e		 jmp	 SHORT $LN6@A_ExtraLif
$LN5@A_ExtraLif:

; 2450 : 	else
; 2451 : 		P_GivePlayerLives(player, 1);

  0009c	6a 01		 push	 1
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _P_GivePlayerLives
  000a7	83 c4 08	 add	 esp, 8
$LN6@A_ExtraLif:

; 2452 : 
; 2453 : 	if (mariomode)

  000aa	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  000b1	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000b6	74 12		 je	 SHORT $LN8@A_ExtraLif

; 2454 : 		S_StartSound(player->mo, sfx_marioa);

  000b8	6a 66		 push	 102			; 00000066H
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _S_StartSound
  000c5	83 c4 08	 add	 esp, 8
  000c8	eb 3c		 jmp	 SHORT $LN10@A_ExtraLif
$LN8@A_ExtraLif:

; 2455 : 	else
; 2456 : 	{
; 2457 : 		player->powers[pw_extralife] = extralifetics + 1;

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _extralifetics
  000cf	83 c0 01	 add	 eax, 1
  000d2	b9 04 00 00 00	 mov	 ecx, 4
  000d7	c1 e1 03	 shl	 ecx, 3
  000da	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000dd	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 2458 : 
; 2459 : 		if (P_IsLocalPlayer(player))

  000e1	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  000ea	83 c4 04	 add	 esp, 4
  000ed	85 c0		 test	 eax, eax
  000ef	74 15		 je	 SHORT $LN10@A_ExtraLif

; 2460 : 		{
; 2461 : 			S_StopMusic();

  000f1	e8 00 00 00 00	 call	 _S_StopMusic
  000f6	90		 npad	 1

; 2462 : 			S_ChangeMusic(mus_xtlife, false);

  000f7	6a 00		 push	 0
  000f9	68 14 04 00 00	 push	 1044			; 00000414H
  000fe	e8 00 00 00 00	 call	 _S_ChangeMusic
  00103	83 c4 08	 add	 esp, 8
$LN10@A_ExtraLif:

; 2463 : 		}
; 2464 : 	}
; 2465 : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
_A_ExtraLife ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BubbleCheck
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_BubbleCheck PROC					; COMDAT

; 2743 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2744 : 	if (actor->eflags & MFE_UNDERWATER)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00012	83 e1 08	 and	 ecx, 8
  00015	74 1a		 je	 SHORT $LN2@A_BubbleCh

; 2745 : 		actor->flags2 &= ~MF2_DONTDRAW; // underwater so draw

  00017	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00020	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  00026	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00029	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
  0002f	eb 18		 jmp	 SHORT $LN3@A_BubbleCh
$LN2@A_BubbleCh:

; 2746 : 	else
; 2747 : 		actor->flags2 |= MF2_DONTDRAW; // above water so don't draw

  00031	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00034	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0003a	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  00040	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00043	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN3@A_BubbleCh:

; 2748 : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_A_BubbleCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BubbleRise
_TEXT	SEGMENT
tv90 = -80						; size = 4
tv142 = -80						; size = 4
tv81 = -76						; size = 4
tv132 = -76						; size = 4
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_BubbleRise PROC					; COMDAT

; 2705 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2706 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 2707 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 2708 : 
; 2709 : 	if (actor->type == MT_EXTRALARGEBUBBLE)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	81 78 7c b9 00
	00 00		 cmp	 DWORD PTR [eax+124], 185 ; 000000b9H
  00023	75 1d		 jne	 SHORT $LN2@A_BubbleRi

; 2710 : 	{
; 2711 : 		actor->momz = FixedDiv(6*FRACUNIT,5*FRACUNIT); // make bubbles rise!

  00025	68 00 00 05 00	 push	 327680			; 00050000H
  0002a	68 00 00 06 00	 push	 393216			; 00060000H
  0002f	e8 00 00 00 00	 call	 _FixedDiv
  00034	83 c4 08	 add	 esp, 8
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0003a	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 2712 : 	}

  0003d	e9 e9 00 00 00	 jmp	 $LN7@A_BubbleRi
$LN2@A_BubbleRi:

; 2713 : 	else
; 2714 : 	{
; 2715 : 		actor->momz += locvar2; // make bubbles rise!

  00042	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00045	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00048	03 4d f8	 add	 ecx, DWORD PTR _locvar2$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004e	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 2716 : 
; 2717 : 		// Move around slightly to make it look like it's bending around the water
; 2718 : 
; 2719 : 		if (!locvar1)

  00051	83 7d fc 00	 cmp	 DWORD PTR _locvar1$[ebp], 0
  00055	0f 85 d0 00 00
	00		 jne	 $LN7@A_BubbleRi

; 2720 : 		{
; 2721 : 			if (P_Random() < 32)

  0005b	e8 00 00 00 00	 call	 _P_Random
  00060	0f b6 c0	 movzx	 eax, al
  00063	83 f8 20	 cmp	 eax, 32			; 00000020H
  00066	7d 59		 jge	 SHORT $LN5@A_BubbleRi

; 2722 : 			{
; 2723 : 				P_InstaThrust(actor, P_Random() & 1 ? actor->angle + ANGLE_90 : actor->angle,

  00068	e8 00 00 00 00	 call	 _P_Random
  0006d	0f b6 c0	 movzx	 eax, al
  00070	83 e0 01	 and	 eax, 1
  00073	74 09		 je	 SHORT $LN9@A_BubbleRi
  00075	c7 45 b4 00 80
	00 00		 mov	 DWORD PTR tv81[ebp], 32768 ; 00008000H
  0007c	eb 07		 jmp	 SHORT $LN10@A_BubbleRi
$LN9@A_BubbleRi:
  0007e	c7 45 b4 00 80
	ff ff		 mov	 DWORD PTR tv81[ebp], -32768 ; ffff8000H
$LN10@A_BubbleRi:
  00085	e8 00 00 00 00	 call	 _P_Random
  0008a	0f b6 c8	 movzx	 ecx, al
  0008d	83 e1 01	 and	 ecx, 1
  00090	74 10		 je	 SHORT $LN11@A_BubbleRi
  00092	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00095	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00098	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  0009d	89 45 b0	 mov	 DWORD PTR tv90[ebp], eax
  000a0	eb 09		 jmp	 SHORT $LN12@A_BubbleRi
$LN11@A_BubbleRi:
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000a5	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000a8	89 55 b0	 mov	 DWORD PTR tv90[ebp], edx
$LN12@A_BubbleRi:
  000ab	8b 45 b4	 mov	 eax, DWORD PTR tv81[ebp]
  000ae	50		 push	 eax
  000af	8b 4d b0	 mov	 ecx, DWORD PTR tv90[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 _P_InstaThrust
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2724 : 					P_Random() & 1? FRACUNIT/2 : -FRACUNIT/2);
; 2725 : 			}

  000bf	eb 6a		 jmp	 SHORT $LN7@A_BubbleRi
$LN5@A_BubbleRi:

; 2726 : 			else if (P_Random() < 32)

  000c1	e8 00 00 00 00	 call	 _P_Random
  000c6	0f b6 c0	 movzx	 eax, al
  000c9	83 f8 20	 cmp	 eax, 32			; 00000020H
  000cc	7d 5d		 jge	 SHORT $LN7@A_BubbleRi

; 2727 : 			{
; 2728 : 				P_InstaThrust(actor, P_Random() & 1 ? actor->angle - ANGLE_90 : actor->angle - ANGLE_180,

  000ce	e8 00 00 00 00	 call	 _P_Random
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	83 e0 01	 and	 eax, 1
  000d9	74 09		 je	 SHORT $LN13@A_BubbleRi
  000db	c7 45 b4 00 80
	00 00		 mov	 DWORD PTR tv132[ebp], 32768 ; 00008000H
  000e2	eb 07		 jmp	 SHORT $LN14@A_BubbleRi
$LN13@A_BubbleRi:
  000e4	c7 45 b4 00 80
	ff ff		 mov	 DWORD PTR tv132[ebp], -32768 ; ffff8000H
$LN14@A_BubbleRi:
  000eb	e8 00 00 00 00	 call	 _P_Random
  000f0	0f b6 c8	 movzx	 ecx, al
  000f3	83 e1 01	 and	 ecx, 1
  000f6	74 10		 je	 SHORT $LN15@A_BubbleRi
  000f8	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000fb	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000fe	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00103	89 45 b0	 mov	 DWORD PTR tv142[ebp], eax
  00106	eb 0f		 jmp	 SHORT $LN16@A_BubbleRi
$LN15@A_BubbleRi:
  00108	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0010b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0010e	81 ea 00 00 00
	80		 sub	 edx, -2147483648	; 80000000H
  00114	89 55 b0	 mov	 DWORD PTR tv142[ebp], edx
$LN16@A_BubbleRi:
  00117	8b 45 b4	 mov	 eax, DWORD PTR tv132[ebp]
  0011a	50		 push	 eax
  0011b	8b 4d b0	 mov	 ecx, DWORD PTR tv142[ebp]
  0011e	51		 push	 ecx
  0011f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00122	52		 push	 edx
  00123	e8 00 00 00 00	 call	 _P_InstaThrust
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@A_BubbleRi:

; 2729 : 					P_Random() & 1? FRACUNIT/2 : -FRACUNIT/2);
; 2730 : 			}
; 2731 : 		}
; 2732 : 	}
; 2733 : }

  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
_A_BubbleRise ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BubbleSpawn
_TEXT	SEGMENT
_bubble$ = -8						; size = 4
_prandom$ = -1						; size = 1
_actor$ = 8						; size = 4
_A_BubbleSpawn PROC					; COMDAT

; 2668 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2669 : 	UINT8 prandom;
; 2670 : 	mobj_t *bubble = NULL;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bubble$[ebp], 0

; 2671 : 	if (!(actor->eflags & MFE_UNDERWATER))

  00010	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00013	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00019	83 e1 08	 and	 ecx, 8
  0001c	75 1d		 jne	 SHORT $LN2@A_BubbleSp

; 2672 : 	{
; 2673 : 		// Don't draw or spawn bubbles above water
; 2674 : 		actor->flags2 |= MF2_DONTDRAW;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00021	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00027	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  0002d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00030	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2675 : 		return;

  00036	e9 1a 01 00 00	 jmp	 $LN8@A_BubbleSp
$LN2@A_BubbleSp:

; 2676 : 	}
; 2677 : 
; 2678 : 	actor->flags2 &= ~MF2_DONTDRAW;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00044	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  0004a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004d	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2679 : 	prandom = P_Random();

  00053	e8 00 00 00 00	 call	 _P_Random
  00058	88 45 ff	 mov	 BYTE PTR _prandom$[ebp], al

; 2680 : 
; 2681 : 	if (leveltime % (3*TICRATE) < 8)

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00060	33 d2		 xor	 edx, edx
  00062	b9 69 00 00 00	 mov	 ecx, 105		; 00000069H
  00067	f7 f1		 div	 ecx
  00069	83 fa 08	 cmp	 edx, 8
  0006c	73 35		 jae	 SHORT $LN3@A_BubbleSp

; 2682 : 		bubble = P_SpawnMobj(actor->x, actor->y, actor->z + (actor->height / 2), MT_EXTRALARGEBUBBLE);

  0006e	68 b9 00 00 00	 push	 185			; 000000b9H
  00073	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00076	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00079	99		 cdq
  0007a	2b c2		 sub	 eax, edx
  0007c	d1 f8		 sar	 eax, 1
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00081	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00084	50		 push	 eax
  00085	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00088	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0008b	50		 push	 eax
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0008f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00092	52		 push	 edx
  00093	e8 00 00 00 00	 call	 _P_SpawnMobj
  00098	83 c4 10	 add	 esp, 16			; 00000010H
  0009b	89 45 f8	 mov	 DWORD PTR _bubble$[ebp], eax
  0009e	e9 81 00 00 00	 jmp	 $LN7@A_BubbleSp
$LN3@A_BubbleSp:

; 2683 : 	else if (prandom > 128)

  000a3	0f b6 45 ff	 movzx	 eax, BYTE PTR _prandom$[ebp]
  000a7	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  000ac	7e 32		 jle	 SHORT $LN5@A_BubbleSp

; 2684 : 		bubble = P_SpawnMobj(actor->x, actor->y, actor->z + (actor->height / 2), MT_SMALLBUBBLE);

  000ae	68 b7 00 00 00	 push	 183			; 000000b7H
  000b3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b6	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000b9	99		 cdq
  000ba	2b c2		 sub	 eax, edx
  000bc	d1 f8		 sar	 eax, 1
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000c1	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  000c4	50		 push	 eax
  000c5	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000c8	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000cb	50		 push	 eax
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000cf	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _P_SpawnMobj
  000d8	83 c4 10	 add	 esp, 16			; 00000010H
  000db	89 45 f8	 mov	 DWORD PTR _bubble$[ebp], eax
  000de	eb 44		 jmp	 SHORT $LN7@A_BubbleSp
$LN5@A_BubbleSp:

; 2685 : 	else if (prandom < 128 && prandom > 96)

  000e0	0f b6 45 ff	 movzx	 eax, BYTE PTR _prandom$[ebp]
  000e4	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  000e9	7d 39		 jge	 SHORT $LN7@A_BubbleSp
  000eb	0f b6 45 ff	 movzx	 eax, BYTE PTR _prandom$[ebp]
  000ef	83 f8 60	 cmp	 eax, 96			; 00000060H
  000f2	7e 30		 jle	 SHORT $LN7@A_BubbleSp

; 2686 : 		bubble = P_SpawnMobj(actor->x, actor->y, actor->z + (actor->height / 2), MT_MEDIUMBUBBLE);

  000f4	68 b8 00 00 00	 push	 184			; 000000b8H
  000f9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000fc	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000ff	99		 cdq
  00100	2b c2		 sub	 eax, edx
  00102	d1 f8		 sar	 eax, 1
  00104	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00107	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0010a	50		 push	 eax
  0010b	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0010e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00111	50		 push	 eax
  00112	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00115	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00118	52		 push	 edx
  00119	e8 00 00 00 00	 call	 _P_SpawnMobj
  0011e	83 c4 10	 add	 esp, 16			; 00000010H
  00121	89 45 f8	 mov	 DWORD PTR _bubble$[ebp], eax
$LN7@A_BubbleSp:

; 2687 : 
; 2688 : 	if (bubble)

  00124	83 7d f8 00	 cmp	 DWORD PTR _bubble$[ebp], 0
  00128	74 2b		 je	 SHORT $LN8@A_BubbleSp

; 2689 : 	{
; 2690 : 		bubble->destscale = actor->scale;

  0012a	8b 45 f8	 mov	 eax, DWORD PTR _bubble$[ebp]
  0012d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00130	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00137	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2691 : 		P_SetScale(bubble,actor->scale);

  0013e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00141	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00148	51		 push	 ecx
  00149	8b 55 f8	 mov	 edx, DWORD PTR _bubble$[ebp]
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 _P_SetScale
  00152	83 c4 08	 add	 esp, 8
$LN8@A_BubbleSp:

; 2692 : 	}
; 2693 : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c3		 ret	 0
_A_BubbleSpawn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BunnyHop
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_BunnyHop PROC					; COMDAT

; 2648 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2649 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 2650 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 2651 : 
; 2652 : 	if (actor->z <= actor->floorz)

  00019	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  0001f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00022	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00025	7f 3d		 jg	 SHORT $LN2@A_BunnyHop

; 2653 : 	{
; 2654 : 		actor->momz = locvar1*FRACUNIT; // make it hop!

  00027	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0002a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00030	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 2655 : 		actor->angle += P_Random()*FINEANGLES;

  00033	e8 00 00 00 00	 call	 _P_Random
  00038	0f b6 c0	 movzx	 eax, al
  0003b	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00041	03 41 24	 add	 eax, DWORD PTR [ecx+36]
  00044	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00047	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 2656 : 		P_InstaThrust(actor, actor->angle, locvar2*FRACUNIT); // Launch the hopping action! PHOOM!!

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _locvar2$[ebp]
  0004d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00054	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00057	52		 push	 edx
  00058	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _P_InstaThrust
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@A_BunnyHop:

; 2657 : 	}
; 2658 : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_A_BunnyHop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_SuperSneakers
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_SuperSneakers PROC					; COMDAT

; 2401 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2402 : 	player_t *player;
; 2403 : 
; 2404 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_SuperSne
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2d		 jne	 SHORT $LN2@A_SuperSne
$LN3@A_SuperSne:

; 2405 : 	{
; 2406 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_SuperSne

; 2407 : 			CONS_Printf("%s",text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_SuperSne:

; 2408 : 		return;

  0004f	e9 b2 00 00 00	 jmp	 $LN7@A_SuperSne
$LN2@A_SuperSne:

; 2409 : 	}
; 2410 : 
; 2411 : 	player = actor->target->player;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00063	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2412 : 
; 2413 : 	actor->target->player->powers[pw_sneakers] = sneakertics + 1;

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR _sneakertics
  0006b	83 c0 01	 add	 eax, 1
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00071	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00077	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  0007d	ba 04 00 00 00	 mov	 edx, 4
  00082	c1 e2 00	 shl	 edx, 0
  00085	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 2414 : 
; 2415 : 	if (P_IsLocalPlayer(player) && (!player->powers[pw_super]))

  00089	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  00092	83 c4 04	 add	 esp, 4
  00095	85 c0		 test	 eax, eax
  00097	74 6d		 je	 SHORT $LN7@A_SuperSne
  00099	b8 04 00 00 00	 mov	 eax, 4
  0009e	6b c8 0f	 imul	 ecx, eax, 15
  000a1	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000a4	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000a9	75 5b		 jne	 SHORT $LN7@A_SuperSne

; 2416 : 	{
; 2417 : 		if (S_SpeedMusic(0.0f) && mapheaderinfo[gamemap-1].speedmusic)

  000ab	51		 push	 ecx
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	e8 00 00 00 00	 call	 _S_SpeedMusic
  000b9	83 c4 04	 add	 esp, 4
  000bc	85 c0		 test	 eax, eax
  000be	74 31		 je	 SHORT $LN6@A_SuperSne
  000c0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000c7	83 e8 01	 sub	 eax, 1
  000ca	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000d0	83 b9 2c 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+300], 0
  000d7	74 18		 je	 SHORT $LN6@A_SuperSne

; 2418 : 			S_SpeedMusic(1.4f);

  000d9	51		 push	 ecx
  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fb33333
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	e8 00 00 00 00	 call	 _S_SpeedMusic
  000ec	83 c4 04	 add	 esp, 4
  000ef	eb 15		 jmp	 SHORT $LN7@A_SuperSne
$LN6@A_SuperSne:

; 2419 : 		else
; 2420 : 		{
; 2421 : 			S_StopMusic();

  000f1	e8 00 00 00 00	 call	 _S_StopMusic
  000f6	90		 npad	 1

; 2422 : 			S_ChangeMusic(mus_shoes, false);

  000f7	6a 00		 push	 0
  000f9	68 10 04 00 00	 push	 1040			; 00000410H
  000fe	e8 00 00 00 00	 call	 _S_ChangeMusic
  00103	83 c4 08	 add	 esp, 8
$LN7@A_SuperSne:

; 2423 : 		}
; 2424 : 	}
; 2425 : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
_A_SuperSneakers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Invincibility
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_Invincibility PROC					; COMDAT

; 2370 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2371 : 	player_t *player;
; 2372 : 
; 2373 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_Invincib
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2a		 jne	 SHORT $LN2@A_Invincib
$LN3@A_Invincib:

; 2374 : 	{
; 2375 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_Invincib

; 2376 : 			CONS_Printf("%s",text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_Invincib:

; 2377 : 		return;

  0004f	eb 7f		 jmp	 SHORT $LN7@A_Invincib
$LN2@A_Invincib:

; 2378 : 	}
; 2379 : 
; 2380 : 	player = actor->target->player;

  00051	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00054	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005a	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00060	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2381 : 	player->powers[pw_invulnerability] = invulntics + 1;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR _invulntics
  00068	83 c0 01	 add	 eax, 1
  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 00	 imul	 edx, ecx, 0
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00076	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 2382 : 
; 2383 : 	if (P_IsLocalPlayer(player) && !player->powers[pw_super])

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  00083	83 c4 04	 add	 esp, 4
  00086	85 c0		 test	 eax, eax
  00088	74 46		 je	 SHORT $LN7@A_Invincib
  0008a	b8 04 00 00 00	 mov	 eax, 4
  0008f	6b c8 0f	 imul	 ecx, eax, 15
  00092	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00095	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0009a	75 34		 jne	 SHORT $LN7@A_Invincib

; 2384 : 	{
; 2385 : 		S_StopMusic();

  0009c	e8 00 00 00 00	 call	 _S_StopMusic
  000a1	90		 npad	 1

; 2386 : 		if (mariomode)

  000a2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  000a9	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000ae	74 11		 je	 SHORT $LN6@A_Invincib

; 2387 : 			S_ChangeMusic(mus_minvnc, false);

  000b0	6a 00		 push	 0
  000b2	68 11 04 00 00	 push	 1041			; 00000411H
  000b7	e8 00 00 00 00	 call	 _S_ChangeMusic
  000bc	83 c4 08	 add	 esp, 8
  000bf	eb 0f		 jmp	 SHORT $LN7@A_Invincib
$LN6@A_Invincib:

; 2388 : 		else
; 2389 : 			S_ChangeMusic(mus_invinc, false);

  000c1	6a 00		 push	 0
  000c3	68 0f 04 00 00	 push	 1039			; 0000040fH
  000c8	e8 00 00 00 00	 call	 _S_ChangeMusic
  000cd	83 c4 08	 add	 esp, 8
$LN7@A_Invincib:

; 2390 : 	}
; 2391 : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
_A_Invincibility ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RingBox
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_RingBox PROC						; COMDAT

; 2345 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2346 : 	player_t *player;
; 2347 : 
; 2348 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_RingBox
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2a		 jne	 SHORT $LN2@A_RingBox
$LN3@A_RingBox:

; 2349 : 	{
; 2350 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_RingBox

; 2351 : 			CONS_Printf("%s", text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_RingBox:

; 2352 : 		return;

  0004f	eb 57		 jmp	 SHORT $LN5@A_RingBox
$LN2@A_RingBox:

; 2353 : 	}
; 2354 : 
; 2355 : 	player = actor->target->player;

  00051	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00054	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005a	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00060	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2356 : 
; 2357 : 	P_GivePlayerRings(player, actor->info->reactiontime, false);

  00063	6a 00		 push	 0
  00065	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00068	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0006e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00071	52		 push	 edx
  00072	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _P_GivePlayerRings
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2358 : 	if (actor->info->seesound)

  0007e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00081	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00087	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0008b	74 1b		 je	 SHORT $LN5@A_RingBox

; 2359 : 		S_StartSound(player->mo, actor->info->seesound);

  0008d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00090	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00096	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00099	52		 push	 edx
  0009a	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 _S_StartSound
  000a5	83 c4 08	 add	 esp, 8
$LN5@A_RingBox:

; 2360 : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_A_RingBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_RingShield
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_RingShield PROC					; COMDAT

; 2313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2314 : 	player_t *player;
; 2315 : 
; 2316 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_RingShie
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2d		 jne	 SHORT $LN2@A_RingShie
$LN3@A_RingShie:

; 2317 : 	{
; 2318 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_RingShie

; 2319 : 			CONS_Printf("%s", text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_RingShie:

; 2320 : 		return;

  0004f	e9 aa 00 00 00	 jmp	 $LN1@A_RingShie
$LN2@A_RingShie:

; 2321 : 	}
; 2322 : 
; 2323 : 	player = actor->target->player;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00063	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2324 : 
; 2325 : 	player->powers[pw_bombshield] = player->powers[pw_watershield] = false;

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	6b c8 0b	 imul	 ecx, eax, 11
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00071	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	6b c8 0a	 imul	 ecx, eax, 10
  00081	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00084	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2326 : 	player->powers[pw_forceshield] = player->powers[pw_jumpshield] = false;

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 03	 imul	 ecx, eax, 3
  00094	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00097	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	c1 e0 02	 shl	 eax, 2
  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000aa	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2327 : 
; 2328 : 	if (!(player->powers[pw_ringshield]))

  000b2	b8 04 00 00 00	 mov	 eax, 4
  000b7	6b c8 09	 imul	 ecx, eax, 9
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000bd	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000c2	75 1f		 jne	 SHORT $LN5@A_RingShie

; 2329 : 	{
; 2330 : 		player->powers[pw_ringshield] = true;

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	6b c8 09	 imul	 ecx, eax, 9
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000cf	c7 44 0a 38 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 1

; 2331 : 		P_SpawnShieldOrb(player);

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  000e0	83 c4 04	 add	 esp, 4
$LN5@A_RingShie:

; 2332 : 	}
; 2333 : 
; 2334 : 	S_StartSound(player->mo, actor->info->seesound);

  000e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e6	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ec	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ef	52		 push	 edx
  000f0	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 _S_StartSound
  000fb	83 c4 08	 add	 esp, 8
$LN1@A_RingShie:

; 2335 : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
_A_RingShield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_JumpShield
_TEXT	SEGMENT
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_JumpShield PROC					; COMDAT

; 2281 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2282 : 	player_t *player;
; 2283 : 
; 2284 : 	if (!actor->target || !actor->target->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	74 12		 je	 SHORT $LN3@A_JumpShie
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00025	75 2d		 jne	 SHORT $LN2@A_JumpShie
$LN3@A_JumpShie:

; 2285 : 	{
; 2286 : 		if (cv_debug)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002e	74 1f		 je	 SHORT $LN4@A_JumpShie

; 2287 : 			CONS_Printf("%s", text[POWERUPNOTARGET]);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  0003b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	e8 00 00 00 00	 call	 _CONS_Printf
  0004c	83 c4 08	 add	 esp, 8
$LN4@A_JumpShie:

; 2288 : 		return;

  0004f	e9 aa 00 00 00	 jmp	 $LN1@A_JumpShie
$LN2@A_JumpShie:

; 2289 : 	}
; 2290 : 
; 2291 : 	player = actor->target->player;

  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00063	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2292 : 
; 2293 : 	player->powers[pw_forceshield] = player->powers[pw_bombshield] = false;

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	6b c8 0a	 imul	 ecx, eax, 10
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00071	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	c1 e0 02	 shl	 eax, 2
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00084	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2294 : 	player->powers[pw_watershield] = player->powers[pw_ringshield] = false;

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 09	 imul	 ecx, eax, 9
  00094	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00097	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	6b c8 0b	 imul	 ecx, eax, 11
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000aa	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2295 : 
; 2296 : 	if (!(player->powers[pw_jumpshield]))

  000b2	b8 04 00 00 00	 mov	 eax, 4
  000b7	6b c8 03	 imul	 ecx, eax, 3
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000bd	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000c2	75 1f		 jne	 SHORT $LN5@A_JumpShie

; 2297 : 	{
; 2298 : 		player->powers[pw_jumpshield] = true;

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	6b c8 03	 imul	 ecx, eax, 3
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000cf	c7 44 0a 38 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 1

; 2299 : 		P_SpawnShieldOrb(player);

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  000e0	83 c4 04	 add	 esp, 4
$LN5@A_JumpShie:

; 2300 : 	}
; 2301 : 
; 2302 : 	S_StartSound(player->mo, actor->info->seesound);

  000e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e6	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ec	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ef	52		 push	 edx
  000f0	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 _S_StartSound
  000fb	83 c4 08	 add	 esp, 8
$LN1@A_JumpShie:

; 2303 : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
_A_JumpShield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_GiveWeapon
_TEXT	SEGMENT
_locvar1$ = -8						; size = 4
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_GiveWeapon PROC					; COMDAT

; 2249 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2250 : 	player_t *player;
; 2251 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 2252 : 
; 2253 : 	if (!actor->target || !actor->target->player)

  00011	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00014	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0001b	74 12		 je	 SHORT $LN3@A_GiveWeap
  0001d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00020	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00026	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0002d	75 2a		 jne	 SHORT $LN2@A_GiveWeap
$LN3@A_GiveWeap:

; 2254 : 	{
; 2255 : 		if (cv_debug)

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00036	74 1f		 je	 SHORT $LN4@A_GiveWeap

; 2256 : 			CONS_Printf("%s", text[POWERUPNOTARGET]);

  00038	b8 04 00 00 00	 mov	 eax, 4
  0003d	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  00043	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00049	52		 push	 edx
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0004f	e8 00 00 00 00	 call	 _CONS_Printf
  00054	83 c4 08	 add	 esp, 8
$LN4@A_GiveWeap:

; 2257 : 		return;

  00057	eb 64		 jmp	 SHORT $LN6@A_GiveWeap
$LN2@A_GiveWeap:

; 2258 : 	}
; 2259 : 
; 2260 : 	if (locvar1 >= 64)

  00059	83 7d f8 40	 cmp	 DWORD PTR _locvar1$[ebp], 64 ; 00000040H
  0005d	7c 13		 jl	 SHORT $LN5@A_GiveWeap

; 2261 : 	{
; 2262 : 		CONS_Printf("Weapon #%d out of range!\n", locvar1);

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GBBAJBBN@Weapon?5?$CD?$CFd?5out?5of?5range?$CB?6@
  00068	e8 00 00 00 00	 call	 _CONS_Printf
  0006d	83 c4 08	 add	 esp, 8

; 2263 : 		return;

  00070	eb 4b		 jmp	 SHORT $LN6@A_GiveWeap
$LN5@A_GiveWeap:

; 2264 : 	}
; 2265 : 
; 2266 : 	player = actor->target->player;

  00072	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00075	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0007b	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00081	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2267 : 
; 2268 : 	player->ringweapons |= locvar1;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00087	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0008a	0b 4d f8	 or	 ecx, DWORD PTR _locvar1$[ebp]
  0008d	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00090	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 2269 : 	if (actor->info->seesound)

  00093	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00096	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0009c	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  000a0	74 1b		 je	 SHORT $LN6@A_GiveWeap

; 2270 : 		S_StartSound(player->mo, actor->info->seesound);

  000a2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ab	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ae	52		 push	 edx
  000af	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 _S_StartSound
  000ba	83 c4 08	 add	 esp, 8
$LN6@A_GiveWeap:

; 2271 : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_A_GiveWeapon ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_CustomPower
_TEXT	SEGMENT
_spawnshield$ = -16					; size = 4
_locvar2$ = -12						; size = 4
_locvar1$ = -8						; size = 4
_player$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_CustomPower PROC					; COMDAT

; 2207 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2208 : 	player_t *player;
; 2209 : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 2210 : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f4	 mov	 DWORD PTR _locvar2$[ebp], eax

; 2211 : 	boolean spawnshield = false;

  00019	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _spawnshield$[ebp], 0

; 2212 : 
; 2213 : 	if (!actor->target || !actor->target->player)

  00020	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00023	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0002a	74 12		 je	 SHORT $LN3@A_CustomPo
  0002c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00035	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0003c	75 2d		 jne	 SHORT $LN2@A_CustomPo
$LN3@A_CustomPo:

; 2214 : 	{
; 2215 : 		if (cv_debug)

  0003e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00045	74 1f		 je	 SHORT $LN4@A_CustomPo

; 2216 : 			CONS_Printf("%s", text[POWERUPNOTARGET]);

  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  00052	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00058	52		 push	 edx
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0005e	e8 00 00 00 00	 call	 _CONS_Printf
  00063	83 c4 08	 add	 esp, 8
$LN4@A_CustomPo:

; 2217 : 		return;

  00066	e9 a3 00 00 00	 jmp	 $LN9@A_CustomPo
$LN2@A_CustomPo:

; 2218 : 	}
; 2219 : 
; 2220 : 	if (locvar1 >= NUMPOWERS)

  0006b	83 7d f8 1d	 cmp	 DWORD PTR _locvar1$[ebp], 29 ; 0000001dH
  0006f	7c 16		 jl	 SHORT $LN5@A_CustomPo

; 2221 : 	{
; 2222 : 		CONS_Printf("Power #%d out of range!\n", locvar1);

  00071	8b 45 f8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NIACNDHL@Power?5?$CD?$CFd?5out?5of?5range?$CB?6@
  0007a	e8 00 00 00 00	 call	 _CONS_Printf
  0007f	83 c4 08	 add	 esp, 8

; 2223 : 		return;

  00082	e9 87 00 00 00	 jmp	 $LN9@A_CustomPo
$LN5@A_CustomPo:

; 2224 : 	}
; 2225 : 
; 2226 : 	player = actor->target->player;

  00087	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00090	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00096	89 55 fc	 mov	 DWORD PTR _player$[ebp], edx

; 2227 : 
; 2228 : 	if ((locvar1 == pw_jumpshield || locvar1 == pw_forceshield //outliers!
; 2229 : 		|| (locvar1 >= pw_ringshield && locvar1 <= pw_flameshield))
; 2230 : 		&& !player->powers[locvar1])

  00099	83 7d f8 03	 cmp	 DWORD PTR _locvar1$[ebp], 3
  0009d	74 12		 je	 SHORT $LN7@A_CustomPo
  0009f	83 7d f8 04	 cmp	 DWORD PTR _locvar1$[ebp], 4
  000a3	74 0c		 je	 SHORT $LN7@A_CustomPo
  000a5	83 7d f8 09	 cmp	 DWORD PTR _locvar1$[ebp], 9
  000a9	7c 1a		 jl	 SHORT $LN6@A_CustomPo
  000ab	83 7d f8 0e	 cmp	 DWORD PTR _locvar1$[ebp], 14 ; 0000000eH
  000af	7f 14		 jg	 SHORT $LN6@A_CustomPo
$LN7@A_CustomPo:
  000b1	8b 45 f8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000b7	83 7c 81 38 00	 cmp	 DWORD PTR [ecx+eax*4+56], 0
  000bc	75 07		 jne	 SHORT $LN6@A_CustomPo

; 2231 : 		spawnshield = true;

  000be	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _spawnshield$[ebp], 1
$LN6@A_CustomPo:

; 2232 : 
; 2233 : 	player->powers[locvar1] = locvar2;

  000c5	8b 45 f8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000cb	8b 55 f4	 mov	 edx, DWORD PTR _locvar2$[ebp]
  000ce	89 54 81 38	 mov	 DWORD PTR [ecx+eax*4+56], edx

; 2234 : 	if (actor->info->seesound)

  000d2	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000db	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  000df	74 1b		 je	 SHORT $LN8@A_CustomPo

; 2235 : 		S_StartSound(player->mo, actor->info->seesound);

  000e1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e4	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ea	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ed	52		 push	 edx
  000ee	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 _S_StartSound
  000f9	83 c4 08	 add	 esp, 8
$LN8@A_CustomPo:

; 2236 : 
; 2237 : 	if (spawnshield) //workaround for a bug

  000fc	83 7d f0 00	 cmp	 DWORD PTR _spawnshield$[ebp], 0
  00100	74 0c		 je	 SHORT $LN9@A_CustomPo

; 2238 : 		P_SpawnShieldOrb(player);

  00102	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  0010b	83 c4 04	 add	 esp, 4
$LN9@A_CustomPo:

; 2239 : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
_A_CustomPower ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_BossDeath
_TEXT	SEGMENT
_i$ = -92						; size = 4
_junk$ = -88						; size = 76
_mo2$ = -12						; size = 4
_th$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mo$ = 8						; size = 4
_A_BossDeath PROC					; COMDAT

; 2076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2077 : 	thinker_t *th;
; 2078 : 	mobj_t *mo2;
; 2079 : 	line_t junk;
; 2080 : 	INT32 i;
; 2081 : 
; 2082 : 	if (mo->type == MT_EGGMOBILE || mo->type == MT_EGGMOBILE2)

  00016	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00019	83 78 7c 1d	 cmp	 DWORD PTR [eax+124], 29	; 0000001dH
  0001d	74 09		 je	 SHORT $LN15@A_BossDeat
  0001f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00022	83 78 7c 1f	 cmp	 DWORD PTR [eax+124], 31	; 0000001fH
  00026	75 34		 jne	 SHORT $LN16@A_BossDeat
$LN15@A_BossDeat:

; 2083 : 	{
; 2084 : 		if (mo->flags2 & MF2_CHAOSBOSS)

  00028	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0002b	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00031	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00037	74 23		 je	 SHORT $LN16@A_BossDeat

; 2085 : 		{
; 2086 : 			mo->health = 0;

  00039	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0003c	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 2087 : 			P_SetMobjState(mo, S_DISS);

  00046	68 4f 06 00 00	 push	 1615			; 0000064fH
  0004b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _P_SetMobjState
  00054	83 c4 08	 add	 esp, 8

; 2088 : 			return;

  00057	e9 42 05 00 00	 jmp	 $LN35@A_BossDeat
$LN16@A_BossDeat:

; 2089 : 		}
; 2090 : 	}
; 2091 : 
; 2092 : 	mo->health = 0;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0005f	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 2093 : 
; 2094 : 	// make sure there is a player alive for victory
; 2095 : 	for (i = 0; i < MAXPLAYERS; i++)

  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00070	eb 09		 jmp	 SHORT $LN4@A_BossDeat
$LN2@A_BossDeat:
  00072	8b 45 a4	 mov	 eax, DWORD PTR _i$[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 a4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@A_BossDeat:
  0007b	83 7d a4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0007f	7d 53		 jge	 SHORT $LN3@A_BossDeat

; 2096 : 		if (playeringame[i] && (players[i].health > 0

  00081	8b 45 a4	 mov	 eax, DWORD PTR _i$[ebp]
  00084	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0008c	74 44		 je	 SHORT $LN17@A_BossDeat
  0008e	69 45 a4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00095	83 b8 28 00 00
	00 00		 cmp	 DWORD PTR _players[eax+40], 0
  0009c	7f 32		 jg	 SHORT $LN20@A_BossDeat
  0009e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000a5	75 09		 jne	 SHORT $LN19@A_BossDeat
  000a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000ae	74 22		 je	 SHORT $LN17@A_BossDeat
$LN19@A_BossDeat:
  000b0	69 45 a4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000b7	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR _players[eax+256], 0
  000be	7f 10		 jg	 SHORT $LN20@A_BossDeat
  000c0	69 45 a4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000c7	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR _players[eax+260], 0
  000ce	7e 02		 jle	 SHORT $LN17@A_BossDeat
$LN20@A_BossDeat:

; 2097 : 			|| ((netgame || multiplayer) && (players[i].lives > 0 || players[i].continues > 0))))
; 2098 : 			break;

  000d0	eb 02		 jmp	 SHORT $LN3@A_BossDeat
$LN17@A_BossDeat:
  000d2	eb 9e		 jmp	 SHORT $LN2@A_BossDeat
$LN3@A_BossDeat:

; 2099 : 
; 2100 : 	if (i == MAXPLAYERS)

  000d4	83 7d a4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  000d8	75 05		 jne	 SHORT $LN21@A_BossDeat

; 2101 : 		return; // no one left alive, so do not end game

  000da	e9 bf 04 00 00	 jmp	 $LN35@A_BossDeat
$LN21@A_BossDeat:

; 2102 : 
; 2103 : 	// scan the remaining thinkers to see
; 2104 : 	// if all bosses are dead
; 2105 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  000df	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  000e4	89 45 f8	 mov	 DWORD PTR _th$[ebp], eax
  000e7	eb 09		 jmp	 SHORT $LN7@A_BossDeat
$LN5@A_BossDeat:
  000e9	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  000ec	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ef	89 4d f8	 mov	 DWORD PTR _th$[ebp], ecx
$LN7@A_BossDeat:
  000f2	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  000f9	74 3d		 je	 SHORT $LN6@A_BossDeat

; 2106 : 	{
; 2107 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  000fb	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  000fe	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00105	74 02		 je	 SHORT $LN22@A_BossDeat

; 2108 : 			continue;

  00107	eb e0		 jmp	 SHORT $LN5@A_BossDeat
$LN22@A_BossDeat:

; 2109 : 
; 2110 : 		mo2 = (mobj_t *)th;

  00109	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  0010c	89 45 f4	 mov	 DWORD PTR _mo2$[ebp], eax

; 2111 : 		if (mo2 != mo && (mo2->flags & MF_BOSS) && mo2->health > 0)

  0010f	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  00112	3b 45 08	 cmp	 eax, DWORD PTR _mo$[ebp]
  00115	74 1f		 je	 SHORT $LN23@A_BossDeat
  00117	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  0011a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0011d	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00123	74 11		 je	 SHORT $LN23@A_BossDeat
  00125	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  00128	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0012f	7e 05		 jle	 SHORT $LN23@A_BossDeat

; 2112 : 			return; // other boss not dead

  00131	e9 68 04 00 00	 jmp	 $LN35@A_BossDeat
$LN23@A_BossDeat:

; 2113 : 	}

  00136	eb b1		 jmp	 SHORT $LN5@A_BossDeat
$LN6@A_BossDeat:

; 2114 : 
; 2115 : 	// victory!
; 2116 : 	if (!mariomode)

  00138	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0013f	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00144	0f 85 23 04 00
	00		 jne	 $LN24@A_BossDeat

; 2117 : 	{
; 2118 : 		if (mo->flags2 & MF2_BOSSNOTRAP)

  0014a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0014d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00153	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00159	74 31		 je	 SHORT $LN26@A_BossDeat

; 2119 : 		{
; 2120 : 			for (i = 0; i < MAXPLAYERS; i++)

  0015b	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00162	eb 09		 jmp	 SHORT $LN10@A_BossDeat
$LN8@A_BossDeat:
  00164	8b 45 a4	 mov	 eax, DWORD PTR _i$[ebp]
  00167	83 c0 01	 add	 eax, 1
  0016a	89 45 a4	 mov	 DWORD PTR _i$[ebp], eax
$LN10@A_BossDeat:
  0016d	83 7d a4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00171	7d 17		 jge	 SHORT $LN9@A_BossDeat

; 2121 : 				P_DoPlayerExit(&players[i]);

  00173	69 45 a4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0017a	05 00 00 00 00	 add	 eax, OFFSET _players
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 _P_DoPlayerExit
  00185	83 c4 04	 add	 esp, 4
  00188	eb da		 jmp	 SHORT $LN8@A_BossDeat
$LN9@A_BossDeat:

; 2122 : 		}

  0018a	eb 4b		 jmp	 SHORT $LN27@A_BossDeat
$LN26@A_BossDeat:

; 2123 : 		else
; 2124 : 		{
; 2125 : 			// Bring the egg trap up to the surface
; 2126 : 			junk.tag = 680;

  0018c	b8 a8 02 00 00	 mov	 eax, 680		; 000002a8H
  00191	66 89 45 bc	 mov	 WORD PTR _junk$[ebp+20], ax

; 2127 : 			EV_DoElevator(&junk, elevateHighest, false);

  00195	6a 00		 push	 0
  00197	6a 05		 push	 5
  00199	8d 45 a8	 lea	 eax, DWORD PTR _junk$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _EV_DoElevator
  001a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2128 : 			junk.tag = 681;

  001a5	b8 a9 02 00 00	 mov	 eax, 681		; 000002a9H
  001aa	66 89 45 bc	 mov	 WORD PTR _junk$[ebp+20], ax

; 2129 : 			EV_DoElevator(&junk, elevateUp, false);

  001ae	6a 00		 push	 0
  001b0	6a 00		 push	 0
  001b2	8d 45 a8	 lea	 eax, DWORD PTR _junk$[ebp]
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 _EV_DoElevator
  001bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2130 : 			junk.tag = 682;

  001be	b8 aa 02 00 00	 mov	 eax, 682		; 000002aaH
  001c3	66 89 45 bc	 mov	 WORD PTR _junk$[ebp+20], ax

; 2131 : 			EV_DoElevator(&junk, elevateHighest, false);

  001c7	6a 00		 push	 0
  001c9	6a 05		 push	 5
  001cb	8d 45 a8	 lea	 eax, DWORD PTR _junk$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 _EV_DoElevator
  001d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@A_BossDeat:

; 2132 : 		}
; 2133 : 
; 2134 : 		// Stop exploding and prepare to run.
; 2135 : 		P_SetMobjState(mo, mo->info->xdeathstate);

  001d7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001da	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001e0	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001e3	52		 push	 edx
  001e4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 _P_SetMobjState
  001ed	83 c4 08	 add	 esp, 8

; 2136 : 
; 2137 : 		P_SetTarget(&mo->target, NULL);

  001f0	6a 00		 push	 0
  001f2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001f5	05 98 00 00 00	 add	 eax, 152		; 00000098H
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 _P_SetTarget
  00200	83 c4 08	 add	 esp, 8

; 2138 : 
; 2139 : 		// Flee! Flee! Find a point to escape to! If none, just shoot upward!
; 2140 : 		// scan the thinkers to find the runaway point
; 2141 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00203	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00208	89 45 f8	 mov	 DWORD PTR _th$[ebp], eax
  0020b	eb 09		 jmp	 SHORT $LN13@A_BossDeat
$LN11@A_BossDeat:
  0020d	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  00210	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00213	89 4d f8	 mov	 DWORD PTR _th$[ebp], ecx
$LN13@A_BossDeat:
  00216	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0021d	0f 84 d4 00 00
	00		 je	 $LN12@A_BossDeat

; 2142 : 		{
; 2143 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00223	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  00226	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0022d	74 02		 je	 SHORT $LN28@A_BossDeat

; 2144 : 				continue;

  0022f	eb dc		 jmp	 SHORT $LN11@A_BossDeat
$LN28@A_BossDeat:

; 2145 : 
; 2146 : 			mo2 = (mobj_t *)th;

  00231	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  00234	89 45 f4	 mov	 DWORD PTR _mo2$[ebp], eax

; 2147 : 
; 2148 : 			if (mo2->type == MT_BOSSFLYPOINT)

  00237	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  0023a	83 78 7c 1a	 cmp	 DWORD PTR [eax+124], 26	; 0000001aH
  0023e	0f 85 ae 00 00
	00		 jne	 $LN30@A_BossDeat

; 2149 : 			{
; 2150 : 				// If this one's closer then the last one, go for it.
; 2151 : 				if (!mo->target ||

  00244	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00247	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0024e	0f 84 88 00 00
	00		 je	 $LN31@A_BossDeat
  00254	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00257	8b 4d f4	 mov	 ecx, DWORD PTR _mo2$[ebp]
  0025a	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0025d	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  00260	52		 push	 edx
  00261	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00264	8b 4d f4	 mov	 ecx, DWORD PTR _mo2$[ebp]
  00267	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0026a	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  0026d	52		 push	 edx
  0026e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00271	8b 4d f4	 mov	 ecx, DWORD PTR _mo2$[ebp]
  00274	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00277	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0027a	52		 push	 edx
  0027b	e8 00 00 00 00	 call	 _P_AproxDistance
  00280	83 c4 08	 add	 esp, 8
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 _P_AproxDistance
  00289	83 c4 08	 add	 esp, 8
  0028c	8b f0		 mov	 esi, eax
  0028e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00291	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00297	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0029a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0029d	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  002a0	50		 push	 eax
  002a1	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  002a4	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  002aa	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002ad	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002b0	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  002b3	51		 push	 ecx
  002b4	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002b7	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  002bd	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  002c0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002c3	2b 50 10	 sub	 edx, DWORD PTR [eax+16]
  002c6	52		 push	 edx
  002c7	e8 00 00 00 00	 call	 _P_AproxDistance
  002cc	83 c4 08	 add	 esp, 8
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 _P_AproxDistance
  002d5	83 c4 08	 add	 esp, 8
  002d8	3b f0		 cmp	 esi, eax
  002da	7d 16		 jge	 SHORT $LN30@A_BossDeat
$LN31@A_BossDeat:

; 2152 : 					P_AproxDistance(P_AproxDistance(mo->x - mo2->x, mo->y - mo2->y), mo->z - mo2->z) <
; 2153 : 					P_AproxDistance(P_AproxDistance(mo->x - mo->target->x, mo->y - mo->target->y), mo->z - mo->target->z))
; 2154 : 						P_SetTarget(&mo->target, mo2);

  002dc	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  002df	50		 push	 eax
  002e0	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  002e3	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  002e9	51		 push	 ecx
  002ea	e8 00 00 00 00	 call	 _P_SetTarget
  002ef	83 c4 08	 add	 esp, 8
$LN30@A_BossDeat:

; 2155 : 				// Otherwise... Don't!
; 2156 : 			}
; 2157 : 		}

  002f2	e9 16 ff ff ff	 jmp	 $LN11@A_BossDeat
$LN12@A_BossDeat:

; 2158 : 
; 2159 : 		mo->flags |= MF_NOGRAVITY|MF_NOCLIP;

  002f7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002fa	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002fd	81 c9 00 12 00
	00		 or	 ecx, 4608		; 00001200H
  00303	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00306	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2160 : 		mo->flags |= MF_NOCLIPHEIGHT;

  00309	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0030c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0030f	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  00315	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00318	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2161 : 
; 2162 : 		if (mo->target)

  0031b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0031e	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00325	0f 84 ae 00 00
	00		 je	 $LN32@A_BossDeat

; 2163 : 		{
; 2164 : 			mo->angle = R_PointToAngle2(mo->x, mo->y, mo->target->x, mo->target->y);

  0032b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0032e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00334	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00337	52		 push	 edx
  00338	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0033b	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00341	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00344	52		 push	 edx
  00345	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00348	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0034b	51		 push	 ecx
  0034c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0034f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00352	50		 push	 eax
  00353	e8 00 00 00 00	 call	 _R_PointToAngle2
  00358	83 c4 10	 add	 esp, 16			; 00000010H
  0035b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0035e	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 2165 : 			mo->flags2 |= MF2_BOSSFLEE;

  00361	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00364	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0036a	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  00370	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00373	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2166 : 			mo->momz = FixedMul(FixedDiv(mo->target->z - mo->z, P_AproxDistance(mo->x-mo->target->x,mo->y-mo->target->y)), 2*FRACUNIT);

  00379	68 00 00 02 00	 push	 131072			; 00020000H
  0037e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00381	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00387	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0038a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0038d	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  00390	50		 push	 eax
  00391	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00394	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0039a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0039d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003a0	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  003a3	51		 push	 ecx
  003a4	e8 00 00 00 00	 call	 _P_AproxDistance
  003a9	83 c4 08	 add	 esp, 8
  003ac	50		 push	 eax
  003ad	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  003b0	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  003b6	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  003b9	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  003bc	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  003bf	52		 push	 edx
  003c0	e8 00 00 00 00	 call	 _FixedDiv
  003c5	83 c4 08	 add	 esp, 8
  003c8	50		 push	 eax
  003c9	e8 00 00 00 00	 call	 _FixedMul
  003ce	83 c4 08	 add	 esp, 8
  003d1	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  003d4	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 2167 : 		}

  003d7	eb 0a		 jmp	 SHORT $LN33@A_BossDeat
$LN32@A_BossDeat:

; 2168 : 		else
; 2169 : 			mo->momz = 2*FRACUNIT;

  003d9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003dc	c7 40 50 00 00
	02 00		 mov	 DWORD PTR [eax+80], 131072 ; 00020000H
$LN33@A_BossDeat:

; 2170 : 
; 2171 : 		if (mo->type == MT_EGGMOBILE2)

  003e3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003e6	83 78 7c 1f	 cmp	 DWORD PTR [eax+124], 31	; 0000001fH
  003ea	0f 85 7b 01 00
	00		 jne	 $LN34@A_BossDeat

; 2172 : 		{
; 2173 : 			mo2 = P_SpawnMobj(mo->x + P_ReturnThrustX(mo, mo->angle - ANGLE_90, 32*FRACUNIT),

  003f0	6a 20		 push	 32			; 00000020H
  003f2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003f5	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  003f8	99		 cdq
  003f9	2b c2		 sub	 eax, edx
  003fb	d1 f8		 sar	 eax, 1
  003fd	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00400	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00403	8d 84 02 00 00
	f8 ff		 lea	 eax, DWORD PTR [edx+eax-524288]
  0040a	50		 push	 eax
  0040b	68 00 00 18 00	 push	 1572864			; 00180000H
  00410	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00413	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00416	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  0041c	52		 push	 edx
  0041d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00420	50		 push	 eax
  00421	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00426	83 c4 0c	 add	 esp, 12			; 0000000cH
  00429	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0042c	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  0042f	50		 push	 eax
  00430	68 00 00 20 00	 push	 2097152			; 00200000H
  00435	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00438	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0043b	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00440	50		 push	 eax
  00441	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00444	51		 push	 ecx
  00445	e8 00 00 00 00	 call	 _P_ReturnThrustX
  0044a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0044d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00450	03 42 10	 add	 eax, DWORD PTR [edx+16]
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 _P_SpawnMobj
  00459	83 c4 10	 add	 esp, 16			; 00000010H
  0045c	89 45 f4	 mov	 DWORD PTR _mo2$[ebp], eax

; 2174 : 				mo->y + P_ReturnThrustY(mo, mo->angle-ANGLE_90, 24*FRACUNIT),
; 2175 : 				mo->z + mo->height/2 - 8*FRACUNIT, MT_BOSSTANK1); // Right tank
; 2176 : 			mo2->angle = mo->angle;

  0045f	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  00462	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00465	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00468	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 2177 : 			P_InstaThrust(mo2, mo2->angle - ANGLE_90, 4*FRACUNIT);

  0046b	68 00 00 04 00	 push	 262144			; 00040000H
  00470	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  00473	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00476	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  0047c	51		 push	 ecx
  0047d	8b 55 f4	 mov	 edx, DWORD PTR _mo2$[ebp]
  00480	52		 push	 edx
  00481	e8 00 00 00 00	 call	 _P_InstaThrust
  00486	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2178 : 			mo2->momz = 4*FRACUNIT;

  00489	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  0048c	c7 40 50 00 00
	04 00		 mov	 DWORD PTR [eax+80], 262144 ; 00040000H

; 2179 : 
; 2180 : 			mo2 = P_SpawnMobj(mo->x + P_ReturnThrustX(mo, mo->angle + ANGLE_90, 32*FRACUNIT),

  00493	6a 21		 push	 33			; 00000021H
  00495	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00498	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0049b	99		 cdq
  0049c	2b c2		 sub	 eax, edx
  0049e	d1 f8		 sar	 eax, 1
  004a0	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  004a3	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004a6	8d 84 02 00 00
	f8 ff		 lea	 eax, DWORD PTR [edx+eax-524288]
  004ad	50		 push	 eax
  004ae	68 00 00 18 00	 push	 1572864			; 00180000H
  004b3	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  004b6	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  004b9	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  004bf	52		 push	 edx
  004c0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004c3	50		 push	 eax
  004c4	e8 00 00 00 00	 call	 _P_ReturnThrustY
  004c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  004cc	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  004cf	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  004d2	50		 push	 eax
  004d3	68 00 00 20 00	 push	 2097152			; 00200000H
  004d8	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  004db	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  004de	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  004e3	50		 push	 eax
  004e4	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  004e7	51		 push	 ecx
  004e8	e8 00 00 00 00	 call	 _P_ReturnThrustX
  004ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f0	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  004f3	03 42 10	 add	 eax, DWORD PTR [edx+16]
  004f6	50		 push	 eax
  004f7	e8 00 00 00 00	 call	 _P_SpawnMobj
  004fc	83 c4 10	 add	 esp, 16			; 00000010H
  004ff	89 45 f4	 mov	 DWORD PTR _mo2$[ebp], eax

; 2181 : 				mo->y + P_ReturnThrustY(mo, mo->angle-ANGLE_90, 24*FRACUNIT),
; 2182 : 				mo->z + mo->height/2 - 8*FRACUNIT, MT_BOSSTANK2); // Left tank
; 2183 : 			mo2->angle = mo->angle;

  00502	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  00505	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00508	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0050b	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 2184 : 			P_InstaThrust(mo2, mo2->angle + ANGLE_90, 4*FRACUNIT);

  0050e	68 00 00 04 00	 push	 262144			; 00040000H
  00513	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  00516	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00519	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  0051f	51		 push	 ecx
  00520	8b 55 f4	 mov	 edx, DWORD PTR _mo2$[ebp]
  00523	52		 push	 edx
  00524	e8 00 00 00 00	 call	 _P_InstaThrust
  00529	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2185 : 			mo2->momz = 4*FRACUNIT;

  0052c	8b 45 f4	 mov	 eax, DWORD PTR _mo2$[ebp]
  0052f	c7 40 50 00 00
	04 00		 mov	 DWORD PTR [eax+80], 262144 ; 00040000H

; 2186 : 
; 2187 : 			P_SpawnMobj(mo->x, mo->y, mo->z + mo->height + 32*FRACUNIT, MT_BOSSSPIGOT)->momz = 4*FRACUNIT;

  00536	6a 22		 push	 34			; 00000022H
  00538	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0053b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0053e	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00541	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00544	8d 8c 01 00 00
	20 00		 lea	 ecx, DWORD PTR [ecx+eax+2097152]
  0054b	51		 push	 ecx
  0054c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0054f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00552	50		 push	 eax
  00553	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00556	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00559	52		 push	 edx
  0055a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0055f	83 c4 10	 add	 esp, 16			; 00000010H
  00562	c7 40 50 00 00
	04 00		 mov	 DWORD PTR [eax+80], 262144 ; 00040000H

; 2188 : 			return;

  00569	eb 33		 jmp	 SHORT $LN35@A_BossDeat
$LN34@A_BossDeat:

; 2189 : 		}
; 2190 : 	}

  0056b	eb 31		 jmp	 SHORT $LN35@A_BossDeat
$LN24@A_BossDeat:

; 2191 : 	else if (mariomode && mo->type == MT_KOOPA)

  0056d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00574	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00579	74 23		 je	 SHORT $LN35@A_BossDeat
  0057b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0057e	81 78 7c eb 00
	00 00		 cmp	 DWORD PTR [eax+124], 235 ; 000000ebH
  00585	75 17		 jne	 SHORT $LN35@A_BossDeat

; 2192 : 	{
; 2193 : 		junk.tag = 650;

  00587	b8 8a 02 00 00	 mov	 eax, 650		; 0000028aH
  0058c	66 89 45 bc	 mov	 WORD PTR _junk$[ebp+20], ax

; 2194 : 		EV_DoCeiling(&junk, raiseToHighest);

  00590	6a 00		 push	 0
  00592	8d 45 a8	 lea	 eax, DWORD PTR _junk$[ebp]
  00595	50		 push	 eax
  00596	e8 00 00 00 00	 call	 _EV_DoCeiling
  0059b	83 c4 08	 add	 esp, 8
$LN35@A_BossDeat:

; 2195 : 		return;
; 2196 : 	}
; 2197 : }

  0059e	5f		 pop	 edi
  0059f	5e		 pop	 esi
  005a0	5b		 pop	 ebx
  005a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005a4	33 cd		 xor	 ecx, ebp
  005a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ab	8b e5		 mov	 esp, ebp
  005ad	5d		 pop	 ebp
  005ae	c3		 ret	 0
_A_BossDeath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Scream
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_Scream PROC						; COMDAT

; 1733 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1734 : 	if (actor->tracer && (actor->tracer->type == MT_SHELL || actor->tracer->type == MT_FIREBALL))

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00013	74 34		 je	 SHORT $LN2@A_Scream
  00015	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00018	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0001e	81 79 7c e8 00
	00 00		 cmp	 DWORD PTR [ecx+124], 232 ; 000000e8H
  00025	74 12		 je	 SHORT $LN4@A_Scream
  00027	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00030	81 79 7c e7 00
	00 00		 cmp	 DWORD PTR [ecx+124], 231 ; 000000e7H
  00037	75 10		 jne	 SHORT $LN2@A_Scream
$LN4@A_Scream:

; 1735 : 		S_StartScreamSound(actor, sfx_lose);

  00039	6a 5b		 push	 91			; 0000005bH
  0003b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _S_StartScreamSound
  00044	83 c4 08	 add	 esp, 8
  00047	eb 28		 jmp	 SHORT $LN5@A_Scream
$LN2@A_Scream:

; 1736 : 	else if (actor->info->deathsound)

  00049	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00052	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00056	74 19		 je	 SHORT $LN5@A_Scream

; 1737 : 		S_StartScreamSound(actor, actor->info->deathsound);

  00058	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00061	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00064	52		 push	 edx
  00065	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _S_StartScreamSound
  0006e	83 c4 08	 add	 esp, 8
$LN5@A_Scream:

; 1738 : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_A_Scream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_FaceTarget
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_FaceTarget PROC					; COMDAT

; 1379 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1380 : 	if (!actor->target)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00013	75 02		 jne	 SHORT $LN2@A_FaceTarg

; 1381 : 		return;

  00015	eb 45		 jmp	 SHORT $LN1@A_FaceTarg
$LN2@A_FaceTarg:

; 1382 : 
; 1383 : 	actor->flags &= ~MF_AMBUSH;

  00017	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001d	83 e1 df	 and	 ecx, -33		; ffffffdfH
  00020	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00023	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1384 : 
; 1385 : 	actor->angle = R_PointToAngle2(actor->x, actor->y, actor->target->x, actor->target->y);

  00026	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00029	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0002f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00036	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0003c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0003f	52		 push	 edx
  00040	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00043	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00046	51		 push	 ecx
  00047	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _R_PointToAngle2
  00053	83 c4 10	 add	 esp, 16			; 00000010H
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00059	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN1@A_FaceTarg:

; 1386 : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_A_FaceTarget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Chase
_TEXT	SEGMENT
tv209 = -76						; size = 4
_locvar1$ = -8						; size = 4
_delta$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_Chase PROC						; COMDAT

; 761  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 762  : 	INT32 delta;
; 763  : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 f8	 mov	 DWORD PTR _locvar1$[ebp], eax

; 764  : 
; 765  : 	if (actor->reactiontime)

  00011	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00014	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  0001b	74 15		 je	 SHORT $LN2@A_Chase

; 766  : 		actor->reactiontime--;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00020	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00026	83 e9 01	 sub	 ecx, 1
  00029	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0002c	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN2@A_Chase:

; 767  : 
; 768  : 	// modify target threshold
; 769  : 	if (actor->threshold)

  00032	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00035	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  0003c	74 42		 je	 SHORT $LN5@A_Chase

; 770  : 	{
; 771  : 		if (!actor->target || actor->target->health <= 0)

  0003e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00041	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00048	74 12		 je	 SHORT $LN6@A_Chase
  0004a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00053	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0005a	7f 0f		 jg	 SHORT $LN4@A_Chase
$LN6@A_Chase:

; 772  : 			actor->threshold = 0;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005f	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+160], 0
  00069	eb 15		 jmp	 SHORT $LN5@A_Chase
$LN4@A_Chase:

; 773  : 		else
; 774  : 			actor->threshold--;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006e	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00074	83 e9 01	 sub	 ecx, 1
  00077	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0007a	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx
$LN5@A_Chase:

; 775  : 	}
; 776  : 
; 777  : 	// turn towards movement direction if not there yet
; 778  : 	if (actor->movedir < NUMDIRS)

  00080	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00083	83 b8 90 00 00
	00 08		 cmp	 DWORD PTR [eax+144], 8
  0008a	73 5b		 jae	 SHORT $LN10@A_Chase

; 779  : 	{
; 780  : 		actor->angle &= (7<<29);

  0008c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0008f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00092	81 e1 00 00 00
	e0		 and	 ecx, -536870912		; e0000000H
  00098	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0009b	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 781  : 		delta = actor->angle - (actor->movedir << 29);

  0009e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000a1	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000a7	c1 e1 1d	 shl	 ecx, 29			; 0000001dH
  000aa	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ad	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000b0	2b c1		 sub	 eax, ecx
  000b2	89 45 fc	 mov	 DWORD PTR _delta$[ebp], eax

; 782  : 
; 783  : 		if (delta > 0)

  000b5	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  000b9	7e 14		 jle	 SHORT $LN8@A_Chase

; 784  : 			actor->angle -= ANGLE_45;

  000bb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000be	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000c1	81 e9 00 00 00
	20		 sub	 ecx, 536870912		; 20000000H
  000c7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000ca	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  000cd	eb 18		 jmp	 SHORT $LN10@A_Chase
$LN8@A_Chase:

; 785  : 		else if (delta < 0)

  000cf	83 7d fc 00	 cmp	 DWORD PTR _delta$[ebp], 0
  000d3	7d 12		 jge	 SHORT $LN10@A_Chase

; 786  : 			actor->angle += ANGLE_45;

  000d5	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000d8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000db	81 c1 00 00 00
	20		 add	 ecx, 536870912		; 20000000H
  000e1	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000e4	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN10@A_Chase:

; 787  : 	}
; 788  : 
; 789  : 	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))

  000e7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000ea	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000f1	74 11		 je	 SHORT $LN12@A_Chase
  000f3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000f6	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000fc	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000ff	83 e2 04	 and	 edx, 4
  00102	75 39		 jne	 SHORT $LN11@A_Chase
$LN12@A_Chase:

; 790  : 	{
; 791  : 		// look for a new target
; 792  : 		if (P_LookForPlayers(actor, true, false, 0))

  00104	6a 00		 push	 0
  00106	6a 00		 push	 0
  00108	6a 01		 push	 1
  0010a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _P_LookForPlayers
  00113	83 c4 10	 add	 esp, 16			; 00000010H
  00116	85 c0		 test	 eax, eax
  00118	74 05		 je	 SHORT $LN13@A_Chase

; 793  : 			return; // got a new target

  0011a	e9 d3 01 00 00	 jmp	 $LN22@A_Chase
$LN13@A_Chase:

; 794  : 
; 795  : 		P_SetMobjStateNF(actor, actor->info->spawnstate);

  0011f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00122	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00128	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012b	52		 push	 edx
  0012c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  00135	83 c4 08	 add	 esp, 8

; 796  : 		return;

  00138	e9 b5 01 00 00	 jmp	 $LN22@A_Chase
$LN11@A_Chase:

; 797  : 	}
; 798  : 
; 799  : 	// do not attack twice in a row
; 800  : 	if (actor->flags2 & MF2_JUSTATTACKED)

  0013d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00140	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00146	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  0014c	74 29		 je	 SHORT $LN14@A_Chase

; 801  : 	{
; 802  : 		actor->flags2 &= ~MF2_JUSTATTACKED;

  0014e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00151	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00157	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  0015d	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00160	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 803  : 		P_NewChaseDir(actor);

  00166	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 _P_NewChaseDir
  0016f	83 c4 04	 add	 esp, 4

; 804  : 		return;

  00172	e9 7b 01 00 00	 jmp	 $LN22@A_Chase
$LN14@A_Chase:

; 805  : 	}
; 806  : 
; 807  : 	// check for melee attack
; 808  : 	if (!(locvar1 & 1) && actor->info->meleestate && P_CheckMeleeRange(actor))

  00177	8b 45 f8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0017a	83 e0 01	 and	 eax, 1
  0017d	75 65		 jne	 SHORT $LN15@A_Chase
  0017f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00182	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00188	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0018c	74 56		 je	 SHORT $LN15@A_Chase
  0018e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _P_CheckMeleeRange
  00197	83 c4 04	 add	 esp, 4
  0019a	85 c0		 test	 eax, eax
  0019c	74 46		 je	 SHORT $LN15@A_Chase

; 809  : 	{
; 810  : 		if (actor->info->attacksound)

  0019e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001a1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001a7	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  001ab	74 19		 je	 SHORT $LN16@A_Chase

; 811  : 			S_StartAttackSound(actor, actor->info->attacksound);

  001ad	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001b0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001b6	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  001b9	52		 push	 edx
  001ba	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 _S_StartAttackSound
  001c3	83 c4 08	 add	 esp, 8
$LN16@A_Chase:

; 812  : 
; 813  : 		P_SetMobjState(actor, actor->info->meleestate);

  001c6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001c9	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001cf	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  001d2	52		 push	 edx
  001d3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _P_SetMobjState
  001dc	83 c4 08	 add	 esp, 8

; 814  : 		return;

  001df	e9 0e 01 00 00	 jmp	 $LN22@A_Chase
$LN15@A_Chase:

; 815  : 	}
; 816  : 
; 817  : 	// check for missile attack
; 818  : 	if (!(locvar1 & 2) && actor->info->missilestate)

  001e4	8b 45 f8	 mov	 eax, DWORD PTR _locvar1$[ebp]
  001e7	83 e0 02	 and	 eax, 2
  001ea	75 63		 jne	 SHORT $nomissile$25
  001ec	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001ef	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001f5	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  001f9	74 54		 je	 SHORT $nomissile$25

; 819  : 	{
; 820  : 		if (actor->movecount || !P_CheckMissileRange(actor))

  001fb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  001fe	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00205	75 10		 jne	 SHORT $LN19@A_Chase
  00207	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 _P_CheckMissileRange
  00210	83 c4 04	 add	 esp, 4
  00213	85 c0		 test	 eax, eax
  00215	75 02		 jne	 SHORT $LN18@A_Chase
$LN19@A_Chase:

; 821  : 			goto nomissile;

  00217	eb 36		 jmp	 SHORT $nomissile$25
$LN18@A_Chase:

; 822  : 
; 823  : 		P_SetMobjState(actor, actor->info->missilestate);

  00219	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0021c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00222	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00225	52		 push	 edx
  00226	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 _P_SetMobjState
  0022f	83 c4 08	 add	 esp, 8

; 824  : 		actor->flags2 |= MF2_JUSTATTACKED;

  00232	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00235	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0023b	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00241	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00244	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 825  : 		return;

  0024a	e9 a3 00 00 00	 jmp	 $LN22@A_Chase
$nomissile$25:

; 826  : 	}
; 827  : 
; 828  : nomissile:
; 829  : 	// possibly choose another target
; 830  : 	if (multiplayer && !actor->threshold && (actor->target->health <= 0 || !P_CheckSight(actor, actor->target))
; 831  : 		&& P_LookForPlayers(actor, true, false, 0))

  0024f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00256	74 50		 je	 SHORT $LN20@A_Chase
  00258	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0025b	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00262	75 44		 jne	 SHORT $LN20@A_Chase
  00264	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00267	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0026d	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00274	7e 1a		 jle	 SHORT $LN21@A_Chase
  00276	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00279	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0027f	51		 push	 ecx
  00280	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00283	52		 push	 edx
  00284	e8 00 00 00 00	 call	 _P_CheckSight
  00289	83 c4 08	 add	 esp, 8
  0028c	85 c0		 test	 eax, eax
  0028e	75 18		 jne	 SHORT $LN20@A_Chase
$LN21@A_Chase:
  00290	6a 00		 push	 0
  00292	6a 00		 push	 0
  00294	6a 01		 push	 1
  00296	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 _P_LookForPlayers
  0029f	83 c4 10	 add	 esp, 16			; 00000010H
  002a2	85 c0		 test	 eax, eax
  002a4	74 02		 je	 SHORT $LN20@A_Chase

; 832  : 		return; // got a new target

  002a6	eb 4a		 jmp	 SHORT $LN22@A_Chase
$LN20@A_Chase:

; 833  : 
; 834  : 	// chase towards player
; 835  : 	if (--actor->movecount < 0 || !P_Move(actor, actor->info->speed))

  002a8	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ab	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  002b1	83 e9 01	 sub	 ecx, 1
  002b4	89 4d b4	 mov	 DWORD PTR tv209[ebp], ecx
  002b7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  002ba	8b 45 b4	 mov	 eax, DWORD PTR tv209[ebp]
  002bd	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  002c3	83 7d b4 00	 cmp	 DWORD PTR tv209[ebp], 0
  002c7	7c 1d		 jl	 SHORT $LN23@A_Chase
  002c9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002cc	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002d2	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  002d5	52		 push	 edx
  002d6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 _P_Move
  002df	83 c4 08	 add	 esp, 8
  002e2	85 c0		 test	 eax, eax
  002e4	75 0c		 jne	 SHORT $LN22@A_Chase
$LN23@A_Chase:

; 836  : 		P_NewChaseDir(actor);

  002e6	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002e9	50		 push	 eax
  002ea	e8 00 00 00 00	 call	 _P_NewChaseDir
  002ef	83 c4 04	 add	 esp, 4
$LN22@A_Chase:

; 837  : }

  002f2	5f		 pop	 edi
  002f3	5e		 pop	 esi
  002f4	5b		 pop	 ebx
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c3		 ret	 0
_A_Chase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Look
_TEXT	SEGMENT
_locvar2$ = -8						; size = 4
_locvar1$ = -4						; size = 4
_actor$ = 8						; size = 4
_A_Look	PROC						; COMDAT

; 731  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 732  : 	INT32 locvar1 = var1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _var1
  0000e	89 45 fc	 mov	 DWORD PTR _locvar1$[ebp], eax

; 733  : 	INT32 locvar2 = var2;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _var2
  00016	89 45 f8	 mov	 DWORD PTR _locvar2$[ebp], eax

; 734  : 
; 735  : 	if (!P_LookForPlayers(actor, locvar1 & 65535, false , (locvar1 >> 16)*FRACUNIT))

  00019	8b 45 fc	 mov	 eax, DWORD PTR _locvar1$[ebp]
  0001c	c1 f8 10	 sar	 eax, 16			; 00000010H
  0001f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _locvar1$[ebp]
  00028	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0002e	51		 push	 ecx
  0002f	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 _P_LookForPlayers
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	85 c0		 test	 eax, eax
  0003d	75 02		 jne	 SHORT $LN2@A_Look

; 736  : 		return;

  0003f	eb 60		 jmp	 SHORT $LN7@A_Look
$LN2@A_Look:

; 737  : 
; 738  : 	// go into chase state
; 739  : 	if (!locvar2)

  00041	83 7d f8 00	 cmp	 DWORD PTR _locvar2$[ebp], 0
  00045	75 27		 jne	 SHORT $LN3@A_Look

; 740  : 	{
; 741  : 		P_SetMobjState(actor, actor->info->seestate);

  00047	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00050	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00053	52		 push	 edx
  00054	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _P_SetMobjState
  0005d	83 c4 08	 add	 esp, 8

; 742  : 		A_PlaySeeSound(actor);

  00060	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _A_PlaySeeSound
  00069	83 c4 04	 add	 esp, 4

; 743  : 	}

  0006c	eb 33		 jmp	 SHORT $LN7@A_Look
$LN3@A_Look:

; 744  : 	else if (locvar2 == 1) // Only go into seestate

  0006e	83 7d f8 01	 cmp	 DWORD PTR _locvar2$[ebp], 1
  00072	75 1b		 jne	 SHORT $LN5@A_Look

; 745  : 		P_SetMobjState(actor, actor->info->seestate);

  00074	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00077	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0007d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00080	52		 push	 edx
  00081	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _P_SetMobjState
  0008a	83 c4 08	 add	 esp, 8
  0008d	eb 12		 jmp	 SHORT $LN7@A_Look
$LN5@A_Look:

; 746  : 	else if (locvar2 == 2) // Only play seesound

  0008f	83 7d f8 02	 cmp	 DWORD PTR _locvar2$[ebp], 2
  00093	75 0c		 jne	 SHORT $LN7@A_Look

; 747  : 		A_PlaySeeSound(actor);

  00095	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _A_PlaySeeSound
  0009e	83 c4 04	 add	 esp, 4
$LN7@A_Look:

; 748  : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_A_Look	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_MonitorPop
_TEXT	SEGMENT
tv139 = -296						; size = 4
_newmobj$1 = -228					; size = 4
_numchoices$2 = -224					; size = 4
_oldi$3 = -220						; size = 4
_i$4 = -216						; size = 4
_spawnchance$5 = -212					; size = 192
_newbox$ = -20						; size = 4
_prandom$ = -16						; size = 4
_item$ = -12						; size = 4
_remains$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_actor$ = 8						; size = 4
_A_MonitorPop PROC					; COMDAT

; 1853 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1854 : 	mobj_t *remains;
; 1855 : 	mobjtype_t item = 0;

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _item$[ebp], 0

; 1856 : 	INT32 prandom;
; 1857 : 	mobjtype_t newbox;
; 1858 : 
; 1859 : 	// de-solidify
; 1860 : 	P_UnsetThingPosition(actor);

  0001d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00026	83 c4 04	 add	 esp, 4

; 1861 : 	actor->flags &= ~MF_SOLID;

  00029	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0002f	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00032	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00035	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1862 : 	actor->flags |= MF_NOCLIP;

  00038	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0003e	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00044	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00047	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1863 : 	P_SetThingPosition(actor);

  0004a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _P_SetThingPosition
  00053	83 c4 04	 add	 esp, 4

; 1864 : 
; 1865 : 	remains = P_SpawnMobj(actor->x, actor->y, actor->z, actor->info->speed);

  00056	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00059	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0005f	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00062	52		 push	 edx
  00063	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00066	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00074	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 _P_SpawnMobj
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	89 45 f8	 mov	 DWORD PTR _remains$[ebp], eax

; 1866 : 	remains->type = actor->type; // Transfer type information

  00083	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00089	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  0008c	89 50 7c	 mov	 DWORD PTR [eax+124], edx

; 1867 : 	P_UnsetThingPosition(remains);

  0008f	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00098	83 c4 04	 add	 esp, 4

; 1868 : 	if (sector_list)

  0009b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sector_list, 0
  000a2	74 18		 je	 SHORT $LN40@A_MonitorP

; 1869 : 	{
; 1870 : 		P_DelSeclist(sector_list);

  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _sector_list
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _P_DelSeclist
  000af	83 c4 04	 add	 esp, 4

; 1871 : 		sector_list = NULL;

  000b2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sector_list, 0
$LN40@A_MonitorP:

; 1872 : 	}
; 1873 : 	remains->flags = actor->flags; // Transfer flags

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000c2	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000c5	89 50 60	 mov	 DWORD PTR [eax+96], edx

; 1874 : 	P_SetThingPosition(remains);

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _P_SetThingPosition
  000d1	83 c4 04	 add	 esp, 4

; 1875 : 	remains->flags2 = actor->flags2; // Transfer flags2

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000da	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  000e0	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 1876 : 	remains->fuse = actor->fuse; // Transfer respawn timer

  000e6	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  000ec	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  000f2	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 1877 : 	remains->threshold = 68;

  000f8	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  000fb	c7 80 a0 00 00
	00 44 00 00 00	 mov	 DWORD PTR [eax+160], 68	; 00000044H

; 1878 : 	remains->skin = NULL;

  00105	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  00108	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0

; 1879 : 
; 1880 : 	actor->flags2 |= MF2_BOSSNOTRAP; // Dummy flag to mark this as an exploded TV until it respawns

  0010f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00112	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00118	81 c9 00 40 00
	00		 or	 ecx, 16384		; 00004000H
  0011e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00121	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 1881 : 	tmthing = remains;

  00127	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  0012a	a3 00 00 00 00	 mov	 DWORD PTR _tmthing, eax

; 1882 : 
; 1883 : 	if (actor->info->deathsound) S_StartSound(remains, actor->info->deathsound);

  0012f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00132	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00138	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0013c	74 19		 je	 SHORT $LN41@A_MonitorP
  0013e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00141	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00147	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0014a	52		 push	 edx
  0014b	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 _S_StartSound
  00154	83 c4 08	 add	 esp, 8
$LN41@A_MonitorP:

; 1884 : 
; 1885 : 	switch (actor->type)

  00157	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0015a	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0015d	89 8d d8 fe ff
	ff		 mov	 DWORD PTR tv139[ebp], ecx
  00163	83 bd d8 fe ff
	ff 5d		 cmp	 DWORD PTR tv139[ebp], 93 ; 0000005dH
  0016a	74 05		 je	 SHORT $LN42@A_MonitorP
  0016c	e9 c6 04 00 00	 jmp	 $LN56@A_MonitorP
$LN42@A_MonitorP:

; 1886 : 	{
; 1887 : 		case MT_QUESTIONBOX: // Random!
; 1888 : 		{
; 1889 : 			mobjtype_t spawnchance[48];
; 1890 : 			INT32 i = 0;

  00171	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$4[ebp], 0

; 1891 : 			INT32 oldi = 0;

  0017b	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _oldi$3[ebp], 0

; 1892 : 			INT32 numchoices = 0;

  00185	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _numchoices$2[ebp], 0

; 1893 : 
; 1894 : 			prandom = P_Random(); // Gotta love those random numbers!

  0018f	e8 00 00 00 00	 call	 _P_Random
  00194	0f b6 c0	 movzx	 eax, al
  00197	89 45 f0	 mov	 DWORD PTR _prandom$[ebp], eax

; 1895 : 
; 1896 : 			if (cv_superring.value)

  0019a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_superring+20, 0
  001a1	74 53		 je	 SHORT $LN5@A_MonitorP

; 1897 : 			{
; 1898 : 				oldi = i;

  001a3	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  001a9	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1899 : 
; 1900 : 				for (; i < oldi + cv_superring.value; i++)

  001af	eb 0f		 jmp	 SHORT $LN6@A_MonitorP
$LN4@A_MonitorP:
  001b1	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  001b7	83 c0 01	 add	 eax, 1
  001ba	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN6@A_MonitorP:
  001c0	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  001c6	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_superring+20
  001cc	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  001d2	7d 22		 jge	 SHORT $LN5@A_MonitorP

; 1901 : 				{
; 1902 : 					spawnchance[i] = MT_SUPERRINGBOX;

  001d4	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  001da	c7 84 85 2c ff
	ff ff 4e 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 78 ; 0000004eH

; 1903 : 					numchoices++;

  001e5	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  001eb	83 c0 01	 add	 eax, 1
  001ee	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1904 : 				}

  001f4	eb bb		 jmp	 SHORT $LN4@A_MonitorP
$LN5@A_MonitorP:

; 1905 : 			}
; 1906 : 			if (cv_supersneakers.value)

  001f6	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_supersneakers+20, 0
  001fd	74 53		 je	 SHORT $LN8@A_MonitorP

; 1907 : 			{
; 1908 : 				oldi = i;

  001ff	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00205	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1909 : 
; 1910 : 				for (; i < oldi + cv_supersneakers.value; i++)

  0020b	eb 0f		 jmp	 SHORT $LN9@A_MonitorP
$LN7@A_MonitorP:
  0020d	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00213	83 c0 01	 add	 eax, 1
  00216	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN9@A_MonitorP:
  0021c	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  00222	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_supersneakers+20
  00228	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  0022e	7d 22		 jge	 SHORT $LN8@A_MonitorP

; 1911 : 				{
; 1912 : 					spawnchance[i] = MT_SNEAKERTV;

  00230	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00236	c7 84 85 2c ff
	ff ff 51 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 81 ; 00000051H

; 1913 : 					numchoices++;

  00241	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  00247	83 c0 01	 add	 eax, 1
  0024a	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1914 : 				}

  00250	eb bb		 jmp	 SHORT $LN7@A_MonitorP
$LN8@A_MonitorP:

; 1915 : 			}
; 1916 : 			if (cv_invincibility.value)

  00252	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_invincibility+20, 0
  00259	74 53		 je	 SHORT $LN11@A_MonitorP

; 1917 : 			{
; 1918 : 				oldi = i;

  0025b	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00261	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1919 : 
; 1920 : 				for (; i < oldi + cv_invincibility.value; i++)

  00267	eb 0f		 jmp	 SHORT $LN12@A_MonitorP
$LN10@A_MonitorP:
  00269	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0026f	83 c0 01	 add	 eax, 1
  00272	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN12@A_MonitorP:
  00278	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  0027e	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_invincibility+20
  00284	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  0028a	7d 22		 jge	 SHORT $LN11@A_MonitorP

; 1921 : 				{
; 1922 : 					spawnchance[i] = MT_INV;

  0028c	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00292	c7 84 85 2c ff
	ff ff 52 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 82 ; 00000052H

; 1923 : 					numchoices++;

  0029d	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  002a3	83 c0 01	 add	 eax, 1
  002a6	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1924 : 				}

  002ac	eb bb		 jmp	 SHORT $LN10@A_MonitorP
$LN11@A_MonitorP:

; 1925 : 			}
; 1926 : 			if (cv_jumpshield.value)

  002ae	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_jumpshield+20, 0
  002b5	74 53		 je	 SHORT $LN14@A_MonitorP

; 1927 : 			{
; 1928 : 				oldi = i;

  002b7	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  002bd	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1929 : 
; 1930 : 				for (; i < oldi + cv_jumpshield.value; i++)

  002c3	eb 0f		 jmp	 SHORT $LN15@A_MonitorP
$LN13@A_MonitorP:
  002c5	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  002cb	83 c0 01	 add	 eax, 1
  002ce	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN15@A_MonitorP:
  002d4	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  002da	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_jumpshield+20
  002e0	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  002e6	7d 22		 jge	 SHORT $LN14@A_MonitorP

; 1931 : 				{
; 1932 : 					spawnchance[i] = MT_WHITETV;

  002e8	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  002ee	c7 84 85 2c ff
	ff ff 57 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 87 ; 00000057H

; 1933 : 					numchoices++;

  002f9	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  002ff	83 c0 01	 add	 eax, 1
  00302	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1934 : 				}

  00308	eb bb		 jmp	 SHORT $LN13@A_MonitorP
$LN14@A_MonitorP:

; 1935 : 			}
; 1936 : 			if (cv_watershield.value)

  0030a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_watershield+20, 0
  00311	74 53		 je	 SHORT $LN17@A_MonitorP

; 1937 : 			{
; 1938 : 				oldi = i;

  00313	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00319	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1939 : 
; 1940 : 				for (; i < oldi + cv_watershield.value; i++)

  0031f	eb 0f		 jmp	 SHORT $LN18@A_MonitorP
$LN16@A_MonitorP:
  00321	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00327	83 c0 01	 add	 eax, 1
  0032a	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN18@A_MonitorP:
  00330	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  00336	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_watershield+20
  0033c	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  00342	7d 22		 jge	 SHORT $LN17@A_MonitorP

; 1941 : 				{
; 1942 : 					spawnchance[i] = MT_GREENTV;

  00344	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0034a	c7 84 85 2c ff
	ff ff 58 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 88 ; 00000058H

; 1943 : 					numchoices++;

  00355	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  0035b	83 c0 01	 add	 eax, 1
  0035e	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1944 : 				}

  00364	eb bb		 jmp	 SHORT $LN16@A_MonitorP
$LN17@A_MonitorP:

; 1945 : 			}
; 1946 : 			if (cv_ringshield.value)

  00366	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_ringshield+20, 0
  0036d	74 53		 je	 SHORT $LN20@A_MonitorP

; 1947 : 			{
; 1948 : 				oldi = i;

  0036f	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00375	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1949 : 
; 1950 : 				for (; i < oldi + cv_ringshield.value; i++)

  0037b	eb 0f		 jmp	 SHORT $LN21@A_MonitorP
$LN19@A_MonitorP:
  0037d	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00383	83 c0 01	 add	 eax, 1
  00386	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN21@A_MonitorP:
  0038c	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  00392	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_ringshield+20
  00398	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  0039e	7d 22		 jge	 SHORT $LN20@A_MonitorP

; 1951 : 				{
; 1952 : 					spawnchance[i] = MT_YELLOWTV;

  003a0	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  003a6	c7 84 85 2c ff
	ff ff 54 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 84 ; 00000054H

; 1953 : 					numchoices++;

  003b1	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  003b7	83 c0 01	 add	 eax, 1
  003ba	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1954 : 				}

  003c0	eb bb		 jmp	 SHORT $LN19@A_MonitorP
$LN20@A_MonitorP:

; 1955 : 			}
; 1956 : 			if (cv_forceshield.value)

  003c2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_forceshield+20, 0
  003c9	74 53		 je	 SHORT $LN23@A_MonitorP

; 1957 : 			{
; 1958 : 				oldi = i;

  003cb	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  003d1	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1959 : 
; 1960 : 				for (; i < oldi + cv_forceshield.value; i++)

  003d7	eb 0f		 jmp	 SHORT $LN24@A_MonitorP
$LN22@A_MonitorP:
  003d9	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  003df	83 c0 01	 add	 eax, 1
  003e2	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN24@A_MonitorP:
  003e8	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  003ee	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_forceshield+20
  003f4	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  003fa	7d 22		 jge	 SHORT $LN23@A_MonitorP

; 1961 : 				{
; 1962 : 					spawnchance[i] = MT_BLUETV;

  003fc	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00402	c7 84 85 2c ff
	ff ff 55 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 85 ; 00000055H

; 1963 : 					numchoices++;

  0040d	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  00413	83 c0 01	 add	 eax, 1
  00416	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1964 : 				}

  0041c	eb bb		 jmp	 SHORT $LN22@A_MonitorP
$LN23@A_MonitorP:

; 1965 : 			}
; 1966 : 			if (cv_bombshield.value)

  0041e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_bombshield+20, 0
  00425	74 53		 je	 SHORT $LN26@A_MonitorP

; 1967 : 			{
; 1968 : 				oldi = i;

  00427	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0042d	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1969 : 
; 1970 : 				for (; i < oldi + cv_bombshield.value; i++)

  00433	eb 0f		 jmp	 SHORT $LN27@A_MonitorP
$LN25@A_MonitorP:
  00435	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0043b	83 c0 01	 add	 eax, 1
  0043e	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN27@A_MonitorP:
  00444	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  0044a	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_bombshield+20
  00450	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  00456	7d 22		 jge	 SHORT $LN26@A_MonitorP

; 1971 : 				{
; 1972 : 					spawnchance[i] = MT_BLACKTV;

  00458	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0045e	c7 84 85 2c ff
	ff ff 56 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 86 ; 00000056H

; 1973 : 					numchoices++;

  00469	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  0046f	83 c0 01	 add	 eax, 1
  00472	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1974 : 				}

  00478	eb bb		 jmp	 SHORT $LN25@A_MonitorP
$LN26@A_MonitorP:

; 1975 : 			}
; 1976 : 			if (cv_1up.value)

  0047a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_1up+20, 0
  00481	74 53		 je	 SHORT $LN29@A_MonitorP

; 1977 : 			{
; 1978 : 				oldi = i;

  00483	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00489	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1979 : 
; 1980 : 				for (; i < oldi + cv_1up.value; i++)

  0048f	eb 0f		 jmp	 SHORT $LN30@A_MonitorP
$LN28@A_MonitorP:
  00491	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00497	83 c0 01	 add	 eax, 1
  0049a	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN30@A_MonitorP:
  004a0	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  004a6	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_1up+20
  004ac	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  004b2	7d 22		 jge	 SHORT $LN29@A_MonitorP

; 1981 : 				{
; 1982 : 					spawnchance[i] = MT_PRUP;

  004b4	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  004ba	c7 84 85 2c ff
	ff ff 53 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 83 ; 00000053H

; 1983 : 					numchoices++;

  004c5	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  004cb	83 c0 01	 add	 eax, 1
  004ce	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1984 : 				}

  004d4	eb bb		 jmp	 SHORT $LN28@A_MonitorP
$LN29@A_MonitorP:

; 1985 : 			}
; 1986 : 			if (cv_eggmanbox.value)

  004d6	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_eggmanbox+20, 0
  004dd	74 53		 je	 SHORT $LN32@A_MonitorP

; 1987 : 			{
; 1988 : 				oldi = i;

  004df	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  004e5	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1989 : 
; 1990 : 				for (; i < oldi + cv_eggmanbox.value; i++)

  004eb	eb 0f		 jmp	 SHORT $LN33@A_MonitorP
$LN31@A_MonitorP:
  004ed	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  004f3	83 c0 01	 add	 eax, 1
  004f6	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN33@A_MonitorP:
  004fc	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  00502	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_eggmanbox+20
  00508	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  0050e	7d 22		 jge	 SHORT $LN32@A_MonitorP

; 1991 : 				{
; 1992 : 					spawnchance[i] = MT_EGGMANBOX;

  00510	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00516	c7 84 85 2c ff
	ff ff 59 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 89 ; 00000059H

; 1993 : 					numchoices++;

  00521	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  00527	83 c0 01	 add	 eax, 1
  0052a	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 1994 : 				}

  00530	eb bb		 jmp	 SHORT $LN31@A_MonitorP
$LN32@A_MonitorP:

; 1995 : 			}
; 1996 : 			if (cv_teleporters.value)

  00532	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_teleporters+20, 0
  00539	74 53		 je	 SHORT $LN35@A_MonitorP

; 1997 : 			{
; 1998 : 				oldi = i;

  0053b	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00541	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 1999 : 
; 2000 : 				for (; i < oldi + cv_teleporters.value; i++)

  00547	eb 0f		 jmp	 SHORT $LN36@A_MonitorP
$LN34@A_MonitorP:
  00549	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0054f	83 c0 01	 add	 eax, 1
  00552	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN36@A_MonitorP:
  00558	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  0055e	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_teleporters+20
  00564	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  0056a	7d 22		 jge	 SHORT $LN35@A_MonitorP

; 2001 : 				{
; 2002 : 					spawnchance[i] = MT_MIXUPBOX;

  0056c	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00572	c7 84 85 2c ff
	ff ff 5a 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 90 ; 0000005aH

; 2003 : 					numchoices++;

  0057d	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  00583	83 c0 01	 add	 eax, 1
  00586	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 2004 : 				}

  0058c	eb bb		 jmp	 SHORT $LN34@A_MonitorP
$LN35@A_MonitorP:

; 2005 : 			}
; 2006 : 
; 2007 : 			if (cv_recycler.value)

  0058e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_recycler+20, 0
  00595	74 53		 je	 SHORT $LN38@A_MonitorP

; 2008 : 			{
; 2009 : 				oldi = i;

  00597	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0059d	89 85 24 ff ff
	ff		 mov	 DWORD PTR _oldi$3[ebp], eax

; 2010 : 
; 2011 : 				for (; i < oldi + cv_recycler.value; i++)

  005a3	eb 0f		 jmp	 SHORT $LN39@A_MonitorP
$LN37@A_MonitorP:
  005a5	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  005ab	83 c0 01	 add	 eax, 1
  005ae	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN39@A_MonitorP:
  005b4	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _oldi$3[ebp]
  005ba	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_recycler+20
  005c0	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  005c6	7d 22		 jge	 SHORT $LN38@A_MonitorP

; 2012 : 				{
; 2013 : 					spawnchance[i] = MT_RECYCLETV;

  005c8	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  005ce	c7 84 85 2c ff
	ff ff 5b 00 00
	00		 mov	 DWORD PTR _spawnchance$5[ebp+eax*4], 91 ; 0000005bH

; 2014 : 					numchoices++;

  005d9	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _numchoices$2[ebp]
  005df	83 c0 01	 add	 eax, 1
  005e2	89 85 20 ff ff
	ff		 mov	 DWORD PTR _numchoices$2[ebp], eax

; 2015 : 				}

  005e8	eb bb		 jmp	 SHORT $LN37@A_MonitorP
$LN38@A_MonitorP:

; 2016 : 			}
; 2017 : 
; 2018 : 			if (numchoices == 0)

  005ea	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _numchoices$2[ebp], 0
  005f1	75 12		 jne	 SHORT $LN55@A_MonitorP

; 2019 : 			{
; 2020 : 				CONS_Printf("Note: All monitors turned off.\n");

  005f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HBHPAGLC@Note?3?5All?5monitors?5turned?5off?4?6@
  005f8	e8 00 00 00 00	 call	 _CONS_Printf
  005fd	83 c4 04	 add	 esp, 4

; 2021 : 				return;

  00600	e9 3f 01 00 00	 jmp	 $LN1@A_MonitorP
$LN55@A_MonitorP:

; 2022 : 			}
; 2023 : 
; 2024 : 			newbox = spawnchance[prandom%numchoices];

  00605	8b 45 f0	 mov	 eax, DWORD PTR _prandom$[ebp]
  00608	99		 cdq
  00609	f7 bd 20 ff ff
	ff		 idiv	 DWORD PTR _numchoices$2[ebp]
  0060f	8b 84 95 2c ff
	ff ff		 mov	 eax, DWORD PTR _spawnchance$5[ebp+edx*4]
  00616	89 45 ec	 mov	 DWORD PTR _newbox$[ebp], eax

; 2025 : 			item = mobjinfo[newbox].damage;

  00619	6b 45 ec 60	 imul	 eax, DWORD PTR _newbox$[ebp], 96
  0061d	8b 88 50 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+80]
  00623	89 4d f4	 mov	 DWORD PTR _item$[ebp], ecx

; 2026 : 
; 2027 : 			remains->flags &= ~MF_AMBUSH;

  00626	8b 45 f8	 mov	 eax, DWORD PTR _remains$[ebp]
  00629	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0062c	83 e1 df	 and	 ecx, -33		; ffffffdfH
  0062f	8b 55 f8	 mov	 edx, DWORD PTR _remains$[ebp]
  00632	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2028 : 			break;

  00635	eb 0f		 jmp	 SHORT $LN2@A_MonitorP
$LN56@A_MonitorP:

; 2029 : 		}
; 2030 : 		default:
; 2031 : 			item = actor->info->damage;

  00637	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0063a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00640	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00643	89 55 f4	 mov	 DWORD PTR _item$[ebp], edx
$LN2@A_MonitorP:

; 2032 : 			break;
; 2033 : 	}
; 2034 : 
; 2035 : 	if (item != 0)

  00646	83 7d f4 00	 cmp	 DWORD PTR _item$[ebp], 0
  0064a	0f 84 db 00 00
	00		 je	 $LN57@A_MonitorP

; 2036 : 	{
; 2037 : 		mobj_t *newmobj;
; 2038 : 		newmobj = P_SpawnMobj(actor->x, actor->y, actor->z + 13*FRACUNIT, item);

  00650	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  00653	50		 push	 eax
  00654	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00657	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0065a	81 c2 00 00 0d
	00		 add	 edx, 851968		; 000d0000H
  00660	52		 push	 edx
  00661	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00664	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00667	51		 push	 ecx
  00668	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0066b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0066e	50		 push	 eax
  0066f	e8 00 00 00 00	 call	 _P_SpawnMobj
  00674	83 c4 10	 add	 esp, 16			; 00000010H
  00677	89 85 1c ff ff
	ff		 mov	 DWORD PTR _newmobj$1[ebp], eax

; 2039 : 
; 2040 : 		P_SetTarget(&newmobj->target, actor->target); // Transfer target

  0067d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00680	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00686	51		 push	 ecx
  00687	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _newmobj$1[ebp]
  0068d	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00693	52		 push	 edx
  00694	e8 00 00 00 00	 call	 _P_SetTarget
  00699	83 c4 08	 add	 esp, 8

; 2041 : 		if (actor->eflags & MFE_VERTICALFLIP)

  0069c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0069f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  006a5	83 e1 20	 and	 ecx, 32			; 00000020H
  006a8	74 1b		 je	 SHORT $LN59@A_MonitorP

; 2042 : 			newmobj->eflags |= MFE_VERTICALFLIP;

  006aa	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$1[ebp]
  006b0	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  006b6	83 c9 20	 or	 ecx, 32			; 00000020H
  006b9	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _newmobj$1[ebp]
  006bf	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN59@A_MonitorP:

; 2043 : 
; 2044 : 		if (item == MT_1UPICO && newmobj->target->player)

  006c5	83 7d f4 63	 cmp	 DWORD PTR _item$[ebp], 99 ; 00000063H
  006c9	75 5e		 jne	 SHORT $LN60@A_MonitorP
  006cb	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$1[ebp]
  006d1	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  006d7	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  006de	74 49		 je	 SHORT $LN60@A_MonitorP

; 2045 : 		{
; 2046 : 			newmobj->skin = &skins[newmobj->target->player->skin];

  006e0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$1[ebp]
  006e6	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  006ec	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  006f2	69 82 b8 00 00
	00 ec 00 00 00	 imul	 eax, DWORD PTR [edx+184], 236
  006fc	05 00 00 00 00	 add	 eax, OFFSET _skins
  00701	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _newmobj$1[ebp]
  00707	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 2047 : 			P_SetMobjState(newmobj, newmobj->info->spawnstate);

  0070a	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$1[ebp]
  00710	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00716	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00719	52		 push	 edx
  0071a	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$1[ebp]
  00720	50		 push	 eax
  00721	e8 00 00 00 00	 call	 _P_SetMobjState
  00726	83 c4 08	 add	 esp, 8
$LN60@A_MonitorP:

; 2048 : 		}
; 2049 : 	}

  00729	eb 0d		 jmp	 SHORT $LN58@A_MonitorP
$LN57@A_MonitorP:

; 2050 : 	else
; 2051 : 		CONS_Printf("Powerup item not defined in 'damage' field for A_MonitorPop\n");

  0072b	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@MBOAHHBH@Powerup?5item?5not?5defined?5in?5?8da@
  00730	e8 00 00 00 00	 call	 _CONS_Printf
  00735	83 c4 04	 add	 esp, 4
$LN58@A_MonitorP:

; 2052 : 
; 2053 : 	P_RemoveMobj(actor);

  00738	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0073b	50		 push	 eax
  0073c	e8 00 00 00 00	 call	 _P_RemoveMobj
  00741	83 c4 04	 add	 esp, 4
$LN1@A_MonitorP:

; 2054 : }

  00744	5f		 pop	 edi
  00745	5e		 pop	 esi
  00746	5b		 pop	 ebx
  00747	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0074a	33 cd		 xor	 ecx, ebp
  0074c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00751	8b e5		 mov	 esp, ebp
  00753	5d		 pop	 ebp
  00754	c3		 ret	 0
_A_MonitorPop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Fall
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_Fall	PROC						; COMDAT

; 1761 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1762 : 	// actor is on ground, it can be walked over
; 1763 : 	actor->flags &= ~MF_SOLID;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0000f	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00012	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00015	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1764 : 
; 1765 : 	actor->flags |= MF_NOCLIP;

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001e	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00024	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00027	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1766 : 	actor->flags |= MF_NOGRAVITY;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0002d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00030	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00036	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00039	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1767 : 	actor->flags |= MF_FLOAT;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00042	81 c9 00 40 00
	00		 or	 ecx, 16384		; 00004000H
  00048	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0004b	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1768 : 
; 1769 : 	// So change this if corpse objects
; 1770 : 	// are meant to be obstacles.
; 1771 : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_A_Fall	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Pain
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_Pain	PROC						; COMDAT

; 1748 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1749 : 	if (actor->info->painsound)

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00016	74 19		 je	 SHORT $LN2@A_Pain

; 1750 : 		S_StartSound(actor, actor->info->painsound);

  00018	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00021	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _S_StartSound
  0002e	83 c4 08	 add	 esp, 8
$LN2@A_Pain:

; 1751 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_A_Pain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_enemy.c
;	COMDAT _A_Explode
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_A_Explode PROC						; COMDAT

; 2064 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2065 : 	P_RadiusAttack(actor, actor->target, actor->info->damage);

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00015	52		 push	 edx
  00016	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00019	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0001f	51		 push	 ecx
  00020	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 _P_RadiusAttack
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2066 : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_A_Explode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
END
