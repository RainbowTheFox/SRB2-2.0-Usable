; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\p_user.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_cv_cam_dist
PUBLIC	_cv_cam_still
PUBLIC	_cv_cam_height
PUBLIC	_cv_cam_speed
PUBLIC	_cv_cam_rotate
PUBLIC	_cv_cam_rotspeed
PUBLIC	_cv_cam2_dist
PUBLIC	_cv_cam2_still
PUBLIC	_cv_cam2_height
PUBLIC	_cv_cam2_speed
PUBLIC	_cv_cam2_rotate
PUBLIC	_cv_cam2_rotspeed
PUBLIC	_t_cam_dist
PUBLIC	_t_cam_height
PUBLIC	_t_cam_rotate
PUBLIC	_t_cam2_dist
PUBLIC	_t_cam2_height
PUBLIC	_t_cam2_rotate
PUBLIC	??_C@_03KGHEHEMH@MIN@				; `string'
PUBLIC	??_C@_03LEPPJAKI@MAX@				; `string'
PUBLIC	??_C@_08EAJIGCON@cam_dist@			; `string'
PUBLIC	??_C@_03KGFMDCCC@128@				; `string'
PUBLIC	??_C@_0L@JNGFDGHK@cam_height@			; `string'
PUBLIC	??_C@_02PIBHCBOA@20@				; `string'
PUBLIC	??_C@_09LMIBAGCP@cam_still@			; `string'
PUBLIC	??_C@_03GCDBBDDL@Off@				; `string'
PUBLIC	??_C@_09MENPKONA@cam_speed@			; `string'
PUBLIC	??_C@_04FNMPJLCB@0?425@				; `string'
PUBLIC	??_C@_0L@EKOKDHH@cam_rotate@			; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_0N@NLLCLLPF@cam_rotspeed@			; `string'
PUBLIC	??_C@_02PKFBJPLJ@10@				; `string'
PUBLIC	??_C@_09NDAPAFNB@cam2_dist@			; `string'
PUBLIC	??_C@_0M@DNEACIOJ@cam2_height@			; `string'
PUBLIC	??_C@_0L@JDHNONMP@cam2_still@			; `string'
PUBLIC	??_C@_0L@OLCDEFDA@cam2_speed@			; `string'
PUBLIC	??_C@_0M@KEILLNOE@cam2_rotate@			; `string'
PUBLIC	??_C@_0O@HLNBPPGK@cam2_rotspeed@		; `string'
EXTRN	_CV_OnOff:BYTE
EXTRN	_CV_Unsigned:BYTE
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_camera:BYTE:044H
COMM	_camera2:BYTE:044H
COMM	_playerdeadview:DWORD
_DATA	ENDS
;	COMDAT ??_C@_0O@HLNBPPGK@cam2_rotspeed@
CONST	SEGMENT
??_C@_0O@HLNBPPGK@cam2_rotspeed@ DB 'cam2_rotspeed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KEILLNOE@cam2_rotate@
CONST	SEGMENT
??_C@_0M@KEILLNOE@cam2_rotate@ DB 'cam2_rotate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OLCDEFDA@cam2_speed@
CONST	SEGMENT
??_C@_0L@OLCDEFDA@cam2_speed@ DB 'cam2_speed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDHNONMP@cam2_still@
CONST	SEGMENT
??_C@_0L@JDHNONMP@cam2_still@ DB 'cam2_still', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DNEACIOJ@cam2_height@
CONST	SEGMENT
??_C@_0M@DNEACIOJ@cam2_height@ DB 'cam2_height', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NDAPAFNB@cam2_dist@
CONST	SEGMENT
??_C@_09NDAPAFNB@cam2_dist@ DB 'cam2_dist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PKFBJPLJ@10@
CONST	SEGMENT
??_C@_02PKFBJPLJ@10@ DB '10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLLCLLPF@cam_rotspeed@
CONST	SEGMENT
??_C@_0N@NLLCLLPF@cam_rotspeed@ DB 'cam_rotspeed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EKOKDHH@cam_rotate@
CONST	SEGMENT
??_C@_0L@EKOKDHH@cam_rotate@ DB 'cam_rotate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNMPJLCB@0?425@
CONST	SEGMENT
??_C@_04FNMPJLCB@0?425@ DB '0.25', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09MENPKONA@cam_speed@
CONST	SEGMENT
??_C@_09MENPKONA@cam_speed@ DB 'cam_speed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDBBDDL@Off@
CONST	SEGMENT
??_C@_03GCDBBDDL@Off@ DB 'Off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMIBAGCP@cam_still@
CONST	SEGMENT
??_C@_09LMIBAGCP@cam_still@ DB 'cam_still', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PIBHCBOA@20@
CONST	SEGMENT
??_C@_02PIBHCBOA@20@ DB '20', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JNGFDGHK@cam_height@
CONST	SEGMENT
??_C@_0L@JNGFDGHK@cam_height@ DB 'cam_height', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KGFMDCCC@128@
CONST	SEGMENT
??_C@_03KGFMDCCC@128@ DB '128', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EAJIGCON@cam_dist@
CONST	SEGMENT
??_C@_08EAJIGCON@cam_dist@ DB 'cam_dist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LEPPJAKI@MAX@
CONST	SEGMENT
??_C@_03LEPPJAKI@MAX@ DB 'MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KGHEHEMH@MIN@
CONST	SEGMENT
??_C@_03KGHEHEMH@MIN@ DB 'MIN', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_cv_cam_dist DD	FLAT:??_C@_08EAJIGCON@cam_dist@
	DD	FLAT:??_C@_03KGFMDCCC@128@
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam_still DD FLAT:??_C@_09LMIBAGCP@cam_still@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	00H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam_height DD FLAT:??_C@_0L@JNGFDGHK@cam_height@
	DD	FLAT:??_C@_02PIBHCBOA@20@
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam_speed DD FLAT:??_C@_09MENPKONA@cam_speed@
	DD	FLAT:??_C@_04FNMPJLCB@0?425@
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam_rotate DD FLAT:??_C@_0L@EKOKDHH@cam_rotate@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	0aH
	DD	FLAT:_CV_Unsigned
	DD	FLAT:_CV_CamRotate_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam_rotspeed DD FLAT:??_C@_0N@NLLCLLPF@cam_rotspeed@
	DD	FLAT:??_C@_02PKFBJPLJ@10@
	DD	00H
	DD	FLAT:_rotation_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam2_dist DD FLAT:??_C@_09NDAPAFNB@cam2_dist@
	DD	FLAT:??_C@_03KGFMDCCC@128@
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam2_still DD FLAT:??_C@_0L@JDHNONMP@cam2_still@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	00H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam2_height DD FLAT:??_C@_0M@DNEACIOJ@cam2_height@
	DD	FLAT:??_C@_02PIBHCBOA@20@
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam2_speed DD FLAT:??_C@_0L@OLCDEFDA@cam2_speed@
	DD	FLAT:??_C@_04FNMPJLCB@0?425@
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam2_rotate DD FLAT:??_C@_0M@KEILLNOE@cam2_rotate@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	0aH
	DD	FLAT:_CV_Unsigned
	DD	FLAT:_CV_CamRotate2_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cam2_rotspeed DD FLAT:??_C@_0O@HLNBPPGK@cam2_rotspeed@
	DD	FLAT:??_C@_02PKFBJPLJ@10@
	DD	00H
	DD	FLAT:_rotation_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_t_cam_dist DD	0ffffffd6H
_t_cam_height DD 0ffffffd6H
_t_cam_rotate DD 0ffffffd6H
_t_cam2_dist DD	0ffffffd6H
_t_cam2_height DD 0ffffffd6H
_t_cam2_rotate DD 0ffffffd6H
_rotation_cons_t DD 01H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	02dH
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	_P_GetPlayerHeight
PUBLIC	_P_GetPlayerSpinHeight
PUBLIC	_P_GetPlayerControlDirection
PUBLIC	_P_AddPlayerScore
PUBLIC	_P_ResetCamera
PUBLIC	_P_MoveChaseCamera
PUBLIC	_P_DoPlayerPain
PUBLIC	_P_ResetPlayer
PUBLIC	_P_IsLocalPlayer
PUBLIC	_P_IsObjectOnGround
PUBLIC	_P_SetObjectMomZ
PUBLIC	_P_RestoreMusic
PUBLIC	_P_SpawnShieldOrb
PUBLIC	_P_SpawnGhostMobj
PUBLIC	_P_GivePlayerRings
PUBLIC	_P_GivePlayerLives
PUBLIC	_P_GiveEmerald
PUBLIC	_P_ResetScore
PUBLIC	_P_FreezeObjectplace
PUBLIC	_P_PlayerThink
PUBLIC	_P_PlayerAfterThink
PUBLIC	_P_DoPlayerExit
PUBLIC	_P_NightserizePlayer
PUBLIC	_P_InstaThrust
PUBLIC	_P_ReturnThrustX
PUBLIC	_P_ReturnThrustY
PUBLIC	_P_InstaThrustEvenIn2D
PUBLIC	_P_LookForEnemies
PUBLIC	_P_NukeEnemies
PUBLIC	_P_HomingAttack
PUBLIC	_P_DoJump
PUBLIC	_P_TransferToNextMare
PUBLIC	_P_FindLowestMare
PUBLIC	_P_FindEmerald
PUBLIC	_P_TransferToAxis
PUBLIC	_P_PlayerMoving
PUBLIC	_P_CalcHeight
PUBLIC	_P_Thrust
PUBLIC	_P_DoSuperTransformation
PUBLIC	??_C@_0BH@HBJKBHJA@Lowest?5mare?5found?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0M@NGAGLIEJ@Mare?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_0CK@MOPFLCEE@Transferring?5to?5axis?5?$CFd?6Levelti@ ; `string'
PUBLIC	??_C@_0DK@GBBHHOAI@ERROR?3?5Specified?5axis?5point?5to?5@ ; `string'
PUBLIC	??_C@_0CB@PKJLBCLC@Transferred?5to?5axis?5?$CFd?0?5mare?5?$CFd@ ; `string'
PUBLIC	??_C@_0BF@LJFKFFFI@?$CFs?2is?5now?5super?4?2?2?2?2@ ; `string'
PUBLIC	??_C@_0BC@ELCLDONG@?$CFs?5is?5now?5super?4?6@	; `string'
PUBLIC	??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@ ; `string'
PUBLIC	??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@ ; `string'
PUBLIC	??_C@_0CI@GEOBGIFJ@Mare?5does?5not?5form?5a?5complete?5c@ ; `string'
PUBLIC	??_C@_0BA@IGDIHNBH@Transfer1?5?3?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BA@ILHHKPE@Transfer2?5?3?5?$CFd?6@	; `string'
PUBLIC	??_C@_0CI@DMPCCDBO@Unable?5to?5find?5an?5axis?5?9?5error?5@ ; `string'
PUBLIC	??_C@_09LGJMJNML@transfer?$CB@			; `string'
PUBLIC	??_C@_0CI@DOLEJNEH@Unable?5to?5find?5an?5axis?5?9?5error?5@ ; `string'
PUBLIC	??_C@_0CI@DPHGPHHA@Unable?5to?5find?5an?5axis?5?9?5error?5@ ; `string'
PUBLIC	??_C@_0CI@DKDJOBPF@Unable?5to?5find?5an?5axis?5?9?5error?5@ ; `string'
PUBLIC	??_C@_0BH@EMGHEBGJ@No?5axis?5points?5found?$CB?6@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_08HHHIMPMI@Z?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_0P@ENOLJJLK@Spawned?5at?5?$CFd?6@		; `string'
PUBLIC	??_C@_0BI@IBBIFLJG@Current?5mapthing?5is?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BC@DGJNOOL@below?5top?5ceiling@		; `string'
PUBLIC	??_C@_0BD@MDNKOOPK@above?5bottom?5floor@	; `string'
PUBLIC	??_C@_03IMLOALHE@low@				; `string'
PUBLIC	??_C@_04DGANLAON@high@				; `string'
PUBLIC	??_C@_0DJ@BIDHEMBC@Sorry?0?5you?8re?5too?5?$CFs?5to?5place?5t@ ; `string'
PUBLIC	??_C@_0DB@KDINGLJB@Placed?5object?5mapthingum?5?$CFd?0?5no@ ; `string'
PUBLIC	??_C@_0CJ@HJNKDBMH@Placed?5object?5type?5?$CFd?5at?5?$CFd?0?5?$CFd@ ; `string'
PUBLIC	??_C@_0N@KPNHJII@Deleting?4?4?4?6@		; `string'
PUBLIC	??_C@_09HOADHGNA@Deleted?4?6@			; `string'
PUBLIC	??_C@_0EB@FIHLLDFH@You?5cannot?5delete?5this?5item?5bec@ ; `string'
PUBLIC	??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@		; `string'
PUBLIC	??_C@_0DD@DEDIIPMB@You?5must?5wait?5until?5next?5round?5@ ; `string'
PUBLIC	??_C@_0CE@GFKDEHPF@Server?5does?5not?5allow?5team?5chan@ ; `string'
PUBLIC	??_C@_0P@HLFJDFHH@changeteam?5red@		; `string'
PUBLIC	??_C@_0BA@PEKCJCD@changeteam2?5red@		; `string'
PUBLIC	??_C@_0BA@NGJMDDAH@changeteam?5blue@		; `string'
PUBLIC	??_C@_0BB@LKOOLFPG@changeteam2?5blue@		; `string'
PUBLIC	??_C@_0BO@OPDLNCEP@Looking?5for?5next?5waypoint?4?4?4?6@ ; `string'
PUBLIC	??_C@_0CK@OOJOEGDC@Found?5waypoint?5?$CIsequence?5?$CFd?0?5nu@ ; `string'
PUBLIC	??_C@_0DC@HMALHLBL@Next?5waypoint?5not?5found?0?5releas@ ; `string'
PUBLIC	??_C@_0CP@DPKEPCAD@Next?5waypoint?5not?5found?0?5wrappi@ ; `string'
PUBLIC	??_C@_0BK@JEFHHCNP@Next?5waypoint?5not?5found?$CB?6@ ; `string'
PUBLIC	??_C@_0BI@IBDAHDKJ@?$CFs?5became?5a?5spectator?4?6@ ; `string'
PUBLIC	??_C@_0DK@LPFOPMHP@Note?3?5Player?5?$CFIu?5in?5PST_LIVE?5wi@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3fb33333
EXTRN	_abs:PROC
EXTRN	_atoi:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_FixedHypot:PROC
EXTRN	_I_OutputMsg:PROC
EXTRN	_AngleFixed:PROC
EXTRN	_FixedAngle:PROC
EXTRN	_FixedAngleC:PROC
EXTRN	_A_ChangeColorAbsolute:PROC
EXTRN	_P_MobjCheckWater:PROC
EXTRN	_P_SpawnMapThing:PROC
EXTRN	_P_SpawnHoopsAndRings:PROC
EXTRN	_P_SetScale:PROC
EXTRN	_P_XYMovement:PROC
EXTRN	_COM_ImmedExecute:PROC
EXTRN	_CV_SetValue:PROC
EXTRN	_SendNetXCmd:PROC
EXTRN	_G_ClipAimingPitch:PROC
EXTRN	_G_IsSpecialStage:PROC
EXTRN	_P_SetTarget:PROC
EXTRN	_P_PointInsidePolyobj:PROC
EXTRN	_P_MobjInsidePolyobj:PROC
EXTRN	_P_AproxDistance:PROC
EXTRN	_P_PointOnLineSide:PROC
EXTRN	_P_SpawnMobj:PROC
EXTRN	_P_RemoveMobj:PROC
EXTRN	_P_SetPlayerMobjState:PROC
EXTRN	_P_SetMobjState:PROC
EXTRN	_P_MobjThinker:PROC
EXTRN	_P_RailThinker:PROC
EXTRN	_P_InsideANonSolidFFloor:PROC
EXTRN	_P_SpawnXYZMissile:PROC
EXTRN	_P_SPMAngle:PROC
EXTRN	_P_ColorTeamMissile:PROC
EXTRN	_P_CameraThinker:PROC
EXTRN	_P_UnsetThingPosition:PROC
EXTRN	_P_SetThingPosition:PROC
EXTRN	_P_TryMove:PROC
EXTRN	_P_TeleportMove:PROC
EXTRN	_P_CheckSight:PROC
EXTRN	_P_DamageMobj:PROC
EXTRN	_P_PlayerEmeraldBurst:PROC
EXTRN	_P_PlayerFlagBurst:PROC
EXTRN	_P_CheckSurvivors:PROC
EXTRN	_P_CheckRacers:PROC
EXTRN	_P_PlayTauntSound:PROC
EXTRN	_P_PlayerInSpecialSector:PROC
EXTRN	_P_FindSpecialLineFromTag:PROC
EXTRN	_P_LinedefExecute:PROC
EXTRN	_EV_CrumbleChain:PROC
EXTRN	_EV_StartCrumble:PROC
EXTRN	_T_Scroll:PROC
EXTRN	_P_SetMobjStateNF:PROC
EXTRN	_R_PointToAngle2:PROC
EXTRN	_R_PointToDist2:PROC
EXTRN	_R_PointInSubsector:PROC
EXTRN	_R_IsPointInSubsector:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_S_ChangeMusic:PROC
EXTRN	_S_SpeedMusic:PROC
EXTRN	_S_StopMusic:PROC
EXTRN	_P_Random:PROC
EXTRN	_P_SignedRandom:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_CallocAlign:PROC
EXTRN	_Z_ReallocAlign:PROC
EXTRN	_HU_SetCEchoDuration:PROC
EXTRN	_HU_SetCEchoFlags:PROC
EXTRN	_HU_DoCEcho:PROC
EXTRN	_S_StartScreamSound:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_gamestate:DWORD
EXTRN	_ultimatemode:BYTE
EXTRN	_ticruned:DWORD
EXTRN	_ticmiss:DWORD
EXTRN	_finesine:BYTE
EXTRN	_finecosine:DWORD
EXTRN	_S_music:BYTE
EXTRN	_states:BYTE
EXTRN	_mobjinfo:BYTE
EXTRN	_playerstatetics:BYTE
EXTRN	_gamemap:WORD
EXTRN	_mapmusic:DWORD
EXTRN	_maptol:WORD
EXTRN	_disableSpeedAdjust:DWORD
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_circuitmap:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_postimgtype:DWORD
EXTRN	_consoleplayer:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_spstage_start:WORD
EXTRN	_racestage_start:WORD
EXTRN	_countdowntimeup:BYTE
EXTRN	_nextmapoverride:WORD
EXTRN	_skipstats:DWORD
EXTRN	_mapheaderinfo:BYTE
EXTRN	_emeralds:WORD
EXTRN	_token:DWORD
EXTRN	_tokenlist:DWORD
EXTRN	_tokenbits:DWORD
EXTRN	_bluescore:DWORD
EXTRN	_redscore:DWORD
EXTRN	_CheckForBustableBlocks:DWORD
EXTRN	_CheckForBouncySector:DWORD
EXTRN	_CheckForQuicksand:DWORD
EXTRN	_flashingtics:DWORD
EXTRN	_tailsflytics:DWORD
EXTRN	_extralifetics:DWORD
EXTRN	_hunt1:DWORD
EXTRN	_hunt2:DWORD
EXTRN	_hunt3:DWORD
EXTRN	_countdown:DWORD
EXTRN	_countdown2:DWORD
EXTRN	_gravity:DWORD
EXTRN	_hidetime:DWORD
EXTRN	_text:BYTE
EXTRN	_cv_seenames:BYTE
EXTRN	_cv_allowseenames:BYTE
EXTRN	_cv_tagtype:BYTE
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_allowexitlevel:BYTE
EXTRN	_cv_analog:BYTE
EXTRN	_cv_analog2:BYTE
EXTRN	_cv_countdowntime:BYTE
EXTRN	_cv_allowteamchange:BYTE
EXTRN	_cv_objectplace:BYTE
EXTRN	_cv_objflags:BYTE
EXTRN	_cv_mapthingnum:BYTE
EXTRN	_cv_speed:BYTE
EXTRN	_cv_snapto:BYTE
EXTRN	_cv_grid:BYTE
EXTRN	_cv_playersforexit:BYTE
EXTRN	_cv_resetmusic:BYTE
EXTRN	_cv_ringslinger:BYTE
EXTRN	_server:DWORD
EXTRN	_seenplayer:DWORD
EXTRN	_player_names:BYTE
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_demoplayback:DWORD
EXTRN	_gameovertics:DWORD
EXTRN	_timeinmap:DWORD
EXTRN	_localangle:DWORD
EXTRN	_localangle2:DWORD
EXTRN	_localaiming:DWORD
EXTRN	_localaiming2:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_polyblocklinks:DWORD
EXTRN	_tmbbox:BYTE
EXTRN	_thinkercap:BYTE
EXTRN	_cv_viewheight:BYTE
EXTRN	_var1:DWORD
EXTRN	_var2:DWORD
EXTRN	_tmfloorz:DWORD
EXTRN	_tmceilingz:DWORD
EXTRN	_bmapwidth:DWORD
EXTRN	_bmapheight:DWORD
EXTRN	_bmaporgx:DWORD
EXTRN	_bmaporgy:DWORD
EXTRN	_sectors:DWORD
EXTRN	_lines:DWORD
EXTRN	_validcount:DWORD
EXTRN	_cv_chasecam:BYTE
EXTRN	_cv_chasecam2:BYTE
EXTRN	_mus_playing:DWORD
EXTRN	_skins:BYTE
EXTRN	_skyflatnum:DWORD
EXTRN	_nummapthings:DWORD
EXTRN	_mapthings:DWORD
EXTRN	_rendermode:DWORD
EXTRN	_cv_grfovchange:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_onground DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@3fb33333
CONST	SEGMENT
__real@3fb33333 DD 03fb33333r			; 1.4
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0DK@LPFOPMHP@Note?3?5Player?5?$CFIu?5in?5PST_LIVE?5wi@
CONST	SEGMENT
??_C@_0DK@LPFOPMHP@Note?3?5Player?5?$CFIu?5in?5PST_LIVE?5wi@ DB 'Note: Pl'
	DB	'ayer %Iu in PST_LIVE with 0 health. (Zombie bug)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IBDAHDKJ@?$CFs?5became?5a?5spectator?4?6@
CONST	SEGMENT
??_C@_0BI@IBDAHDKJ@?$CFs?5became?5a?5spectator?4?6@ DB '%s became a spect'
	DB	'ator.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JEFHHCNP@Next?5waypoint?5not?5found?$CB?6@
CONST	SEGMENT
??_C@_0BK@JEFHHCNP@Next?5waypoint?5not?5found?$CB?6@ DB 'Next waypoint no'
	DB	't found!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DPKEPCAD@Next?5waypoint?5not?5found?0?5wrappi@
CONST	SEGMENT
??_C@_0CP@DPKEPCAD@Next?5waypoint?5not?5found?0?5wrappi@ DB 'Next waypoin'
	DB	't not found, wrapping to start...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HMALHLBL@Next?5waypoint?5not?5found?0?5releas@
CONST	SEGMENT
??_C@_0DC@HMALHLBL@Next?5waypoint?5not?5found?0?5releas@ DB 'Next waypoin'
	DB	't not found, releasing from track...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OOJOEGDC@Found?5waypoint?5?$CIsequence?5?$CFd?0?5nu@
CONST	SEGMENT
??_C@_0CK@OOJOEGDC@Found?5waypoint?5?$CIsequence?5?$CFd?0?5nu@ DB 'Found '
	DB	'waypoint (sequence %d, number %d).', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OPDLNCEP@Looking?5for?5next?5waypoint?4?4?4?6@
CONST	SEGMENT
??_C@_0BO@OPDLNCEP@Looking?5for?5next?5waypoint?4?4?4?6@ DB 'Looking for '
	DB	'next waypoint...', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LKOOLFPG@changeteam2?5blue@
CONST	SEGMENT
??_C@_0BB@LKOOLFPG@changeteam2?5blue@ DB 'changeteam2 blue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGJMDDAH@changeteam?5blue@
CONST	SEGMENT
??_C@_0BA@NGJMDDAH@changeteam?5blue@ DB 'changeteam blue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PEKCJCD@changeteam2?5red@
CONST	SEGMENT
??_C@_0BA@PEKCJCD@changeteam2?5red@ DB 'changeteam2 red', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HLFJDFHH@changeteam?5red@
CONST	SEGMENT
??_C@_0P@HLFJDFHH@changeteam?5red@ DB 'changeteam red', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GFKDEHPF@Server?5does?5not?5allow?5team?5chan@
CONST	SEGMENT
??_C@_0CE@GFKDEHPF@Server?5does?5not?5allow?5team?5chan@ DB 'Server does '
	DB	'not allow team change.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@DEDIIPMB@You?5must?5wait?5until?5next?5round?5@
CONST	SEGMENT
??_C@_0DD@DEDIIPMB@You?5must?5wait?5until?5next?5round?5@ DB 'You must wa'
	DB	'it until next round to enter the game.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@
CONST	SEGMENT
??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@ DB '%s is it!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@FIHLLDFH@You?5cannot?5delete?5this?5item?5bec@
CONST	SEGMENT
??_C@_0EB@FIHLLDFH@You?5cannot?5delete?5this?5item?5bec@ DB 'You cannot d'
	DB	'elete this item because it doesn''t have a mapthing!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HOADHGNA@Deleted?4?6@
CONST	SEGMENT
??_C@_09HOADHGNA@Deleted?4?6@ DB 'Deleted.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KPNHJII@Deleting?4?4?4?6@
CONST	SEGMENT
??_C@_0N@KPNHJII@Deleting?4?4?4?6@ DB 'Deleting...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HJNKDBMH@Placed?5object?5type?5?$CFd?5at?5?$CFd?0?5?$CFd@
CONST	SEGMENT
??_C@_0CJ@HJNKDBMH@Placed?5object?5type?5?$CFd?5at?5?$CFd?0?5?$CFd@ DB 'P'
	DB	'laced object type %d at %d, %d, %d, %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KDINGLJB@Placed?5object?5mapthingum?5?$CFd?0?5no@
CONST	SEGMENT
??_C@_0DB@KDINGLJB@Placed?5object?5mapthingum?5?$CFd?0?5no@ DB 'Placed ob'
	DB	'ject mapthingum %d, not the one below.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@BIDHEMBC@Sorry?0?5you?8re?5too?5?$CFs?5to?5place?5t@
CONST	SEGMENT
??_C@_0DJ@BIDHEMBC@Sorry?0?5you?8re?5too?5?$CFs?5to?5place?5t@ DB 'Sorry,'
	DB	' you''re too %s to place this object (max: %d %s).', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGANLAON@high@
CONST	SEGMENT
??_C@_04DGANLAON@high@ DB 'high', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IMLOALHE@low@
CONST	SEGMENT
??_C@_03IMLOALHE@low@ DB 'low', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MDNKOOPK@above?5bottom?5floor@
CONST	SEGMENT
??_C@_0BD@MDNKOOPK@above?5bottom?5floor@ DB 'above bottom floor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DGJNOOL@below?5top?5ceiling@
CONST	SEGMENT
??_C@_0BC@DGJNOOL@below?5top?5ceiling@ DB 'below top ceiling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IBBIFLJG@Current?5mapthing?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@IBBIFLJG@Current?5mapthing?5is?5?$CFd?6@ DB 'Current mapthing i'
	DB	's %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ENOLJJLK@Spawned?5at?5?$CFd?6@
CONST	SEGMENT
??_C@_0P@ENOLJJLK@Spawned?5at?5?$CFd?6@ DB 'Spawned at %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HHHIMPMI@Z?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_08HHHIMPMI@Z?5is?5?$CFd?6@ DB 'Z is %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EMGHEBGJ@No?5axis?5points?5found?$CB?6@
CONST	SEGMENT
??_C@_0BH@EMGHEBGJ@No?5axis?5points?5found?$CB?6@ DB 'No axis points foun'
	DB	'd!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DKDJOBPF@Unable?5to?5find?5an?5axis?5?9?5error?5@
CONST	SEGMENT
??_C@_0CI@DKDJOBPF@Unable?5to?5find?5an?5axis?5?9?5error?5@ DB 'Unable to'
	DB	' find an axis - error code #4', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DPHGPHHA@Unable?5to?5find?5an?5axis?5?9?5error?5@
CONST	SEGMENT
??_C@_0CI@DPHGPHHA@Unable?5to?5find?5an?5axis?5?9?5error?5@ DB 'Unable to'
	DB	' find an axis - error code #3', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DOLEJNEH@Unable?5to?5find?5an?5axis?5?9?5error?5@
CONST	SEGMENT
??_C@_0CI@DOLEJNEH@Unable?5to?5find?5an?5axis?5?9?5error?5@ DB 'Unable to'
	DB	' find an axis - error code #2', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGJMJNML@transfer?$CB@
CONST	SEGMENT
??_C@_09LGJMJNML@transfer?$CB@ DB 'transfer!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DMPCCDBO@Unable?5to?5find?5an?5axis?5?9?5error?5@
CONST	SEGMENT
??_C@_0CI@DMPCCDBO@Unable?5to?5find?5an?5axis?5?9?5error?5@ DB 'Unable to'
	DB	' find an axis - error code #1', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ILHHKPE@Transfer2?5?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BA@ILHHKPE@Transfer2?5?3?5?$CFd?6@ DB 'Transfer2 : %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IGDIHNBH@Transfer1?5?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BA@IGDIHNBH@Transfer1?5?3?5?$CFd?6@ DB 'Transfer1 : %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GEOBGIFJ@Mare?5does?5not?5form?5a?5complete?5c@
CONST	SEGMENT
??_C@_0CI@GEOBGIFJ@Mare?5does?5not?5form?5a?5complete?5c@ DB 'Mare does n'
	DB	'ot form a complete circuit!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@
CONST	SEGMENT
??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@ DB '%s is no longer '
	DB	'super.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@
CONST	SEGMENT
??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@ DB '%s\is no l'
	DB	'onger super.\\\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ELCLDONG@?$CFs?5is?5now?5super?4?6@
CONST	SEGMENT
??_C@_0BC@ELCLDONG@?$CFs?5is?5now?5super?4?6@ DB '%s is now super.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LJFKFFFI@?$CFs?2is?5now?5super?4?2?2?2?2@
CONST	SEGMENT
??_C@_0BF@LJFKFFFI@?$CFs?2is?5now?5super?4?2?2?2?2@ DB '%s\is now super.\'
	DB	'\\\', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PKJLBCLC@Transferred?5to?5axis?5?$CFd?0?5mare?5?$CFd@
CONST	SEGMENT
??_C@_0CB@PKJLBCLC@Transferred?5to?5axis?5?$CFd?0?5mare?5?$CFd@ DB 'Trans'
	DB	'ferred to axis %d, mare %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@GBBHHOAI@ERROR?3?5Specified?5axis?5point?5to?5@
CONST	SEGMENT
??_C@_0DK@GBBHHOAI@ERROR?3?5Specified?5axis?5point?5to?5@ DB 'ERROR: Spec'
	DB	'ified axis point to transfer to not found!', 0aH, '%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MOPFLCEE@Transferring?5to?5axis?5?$CFd?6Levelti@
CONST	SEGMENT
??_C@_0CK@MOPFLCEE@Transferring?5to?5axis?5?$CFd?6Levelti@ DB 'Transferri'
	DB	'ng to axis %d', 0aH, 'Leveltime: %u...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NGAGLIEJ@Mare?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0M@NGAGLIEJ@Mare?5is?5?$CFd?6@ DB 'Mare is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HBJKBHJA@Lowest?5mare?5found?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@HBJKBHJA@Lowest?5mare?5found?3?5?$CFd?6@ DB 'Lowest mare found:'
	DB	' %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	087a8H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0e44H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _CV_CamRotate2_OnChange
_TEXT	SEGMENT
_CV_CamRotate2_OnChange PROC				; COMDAT

; 9095 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9096 : 	if (cv_cam2_rotate.value > 359)

  00009	81 3d 14 00 00
	00 67 01 00 00	 cmp	 DWORD PTR _cv_cam2_rotate+20, 359 ; 00000167H
  00013	7e 0f		 jle	 SHORT $LN2@CV_CamRota

; 9097 : 		CV_SetValue(&cv_cam2_rotate, 0);

  00015	6a 00		 push	 0
  00017	68 00 00 00 00	 push	 OFFSET _cv_cam2_rotate
  0001c	e8 00 00 00 00	 call	 _CV_SetValue
  00021	83 c4 08	 add	 esp, 8
$LN2@CV_CamRota:

; 9098 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_CV_CamRotate2_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _CV_CamRotate_OnChange
_TEXT	SEGMENT
_CV_CamRotate_OnChange PROC				; COMDAT

; 9089 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9090 : 	if (cv_cam_rotate.value > 359)

  00009	81 3d 14 00 00
	00 67 01 00 00	 cmp	 DWORD PTR _cv_cam_rotate+20, 359 ; 00000167H
  00013	7e 0f		 jle	 SHORT $LN2@CV_CamRota

; 9091 : 		CV_SetValue(&cv_cam_rotate, 0);

  00015	6a 00		 push	 0
  00017	68 00 00 00 00	 push	 OFFSET _cv_cam_rotate
  0001c	e8 00 00 00 00	 call	 _CV_SetValue
  00021	83 c4 08	 add	 esp, 8
$LN2@CV_CamRota:

; 9092 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_CV_CamRotate_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DeathThink
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_i$2 = -8						; size = 4
_cmd$ = -4						; size = 4
_player$ = 8						; size = 4
_P_DeathThink PROC					; COMDAT

; 8910 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8911 : 	ticcmd_t *cmd;
; 8912 : 
; 8913 : 	cmd = &player->cmd;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	83 c0 08	 add	 eax, 8
  0000f	89 45 fc	 mov	 DWORD PTR _cmd$[ebp], eax

; 8914 : 
; 8915 : 	// fall to the ground
; 8916 : 	if (player->viewheight > 6*FRACUNIT)

  00012	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00015	81 78 14 00 00
	06 00		 cmp	 DWORD PTR [eax+20], 393216 ; 00060000H
  0001c	7e 12		 jle	 SHORT $LN11@P_DeathThi

; 8917 : 		player->viewheight -= FRACUNIT;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00021	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00024	81 e9 00 00 01
	00		 sub	 ecx, 65536		; 00010000H
  0002a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0002d	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN11@P_DeathThi:

; 8918 : 
; 8919 : 	if (player->viewheight < 6*FRACUNIT)

  00030	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00033	81 78 14 00 00
	06 00		 cmp	 DWORD PTR [eax+20], 393216 ; 00060000H
  0003a	7d 0a		 jge	 SHORT $LN12@P_DeathThi

; 8920 : 		player->viewheight = 6*FRACUNIT;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003f	c7 40 14 00 00
	06 00		 mov	 DWORD PTR [eax+20], 393216 ; 00060000H
$LN12@P_DeathThi:

; 8921 : 
; 8922 : 	player->deltaviewheight = 0;

  00046	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00049	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 8923 : 	onground = P_IsObjectOnGround(player->mo);

  00050	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  0005b	83 c4 04	 add	 esp, 4
  0005e	a3 00 00 00 00	 mov	 DWORD PTR _onground, eax

; 8924 : 
; 8925 : 	P_CalcHeight(player);

  00063	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _P_CalcHeight
  0006c	83 c4 04	 add	 esp, 4

; 8926 : 
; 8927 : 	if (!player->deadtimer)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00072	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [eax+296], 0
  00079	75 0d		 jne	 SHORT $LN13@P_DeathThi

; 8928 : 		player->deadtimer = 60*TICRATE;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007e	c7 80 28 01 00
	00 34 08 00 00	 mov	 DWORD PTR [eax+296], 2100 ; 00000834H
$LN13@P_DeathThi:

; 8929 : 
; 8930 : 	player->deadtimer--;

  00088	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008b	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  00091	83 e9 01	 sub	 ecx, 1
  00094	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00097	89 8a 28 01 00
	00		 mov	 DWORD PTR [edx+296], ecx

; 8931 : 	player->pflags &= ~PF_SLIDING;

  0009d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a0	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000a6	81 e1 ff ff fb
	ff		 and	 ecx, -262145		; fffbffffH
  000ac	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000af	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8932 : 
; 8933 : 	if (!(multiplayer || netgame) && (cmd->buttons & BT_USE || cmd->buttons & BT_JUMP) && (player->lives <= 0) && (player->deadtimer > gameovertics+2) && (player->continues > 0))

  000b5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000bc	75 63		 jne	 SHORT $LN14@P_DeathThi
  000be	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000c5	75 5a		 jne	 SHORT $LN14@P_DeathThi
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  000ca	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000ce	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000d4	75 0f		 jne	 SHORT $LN15@P_DeathThi
  000d6	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  000d9	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000dd	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  000e3	74 3c		 je	 SHORT $LN14@P_DeathThi
$LN15@P_DeathThi:
  000e5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e8	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  000ef	7f 30		 jg	 SHORT $LN14@P_DeathThi
  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  000f6	83 c0 02	 add	 eax, 2
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000fc	39 81 28 01 00
	00		 cmp	 DWORD PTR [ecx+296], eax
  00102	7e 1d		 jle	 SHORT $LN14@P_DeathThi
  00104	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00107	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [eax+260], 0
  0010e	7e 11		 jle	 SHORT $LN14@P_DeathThi

; 8934 : 		player->deadtimer = gameovertics+2;

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  00115	83 c0 02	 add	 eax, 2
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0011b	89 81 28 01 00
	00		 mov	 DWORD PTR [ecx+296], eax
$LN14@P_DeathThi:

; 8935 : 
; 8936 : 	// Respawn as spectator?
; 8937 : 	if ((splitscreen || netgame) && (cmd->buttons & BT_TOSSFLAG) && (!player->spectator))

  00121	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00128	75 0d		 jne	 SHORT $LN17@P_DeathThi
  0012a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00131	0f 84 cd 00 00
	00		 je	 $LN21@P_DeathThi
$LN17@P_DeathThi:
  00137	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0013a	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0013e	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00144	0f 84 ba 00 00
	00		 je	 $LN21@P_DeathThi
  0014a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0014d	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00154	85 c9		 test	 ecx, ecx
  00156	0f 85 a8 00 00
	00		 jne	 $LN21@P_DeathThi

; 8938 : 	{
; 8939 : 		if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  0015c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00163	83 f8 01	 cmp	 eax, 1
  00166	75 09		 jne	 SHORT $LN20@P_DeathThi
  00168	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0016f	74 10		 je	 SHORT $LN19@P_DeathThi
$LN20@P_DeathThi:
  00171	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00178	83 f8 03	 cmp	 eax, 3
  0017b	0f 85 83 00 00
	00		 jne	 $LN21@P_DeathThi
$LN19@P_DeathThi:

; 8940 : 		{
; 8941 : 			player->spectator = true;

  00181	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00184	c6 80 f0 01 00
	00 01		 mov	 BYTE PTR [eax+496], 1

; 8942 : 			player->score = 0;

  0018b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0018e	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+188], 0

; 8943 : 			player->playerstate = PST_REBORN;

  00198	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019b	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2

; 8944 : 			CONS_Printf("%s became a spectator.\n", player_names[player-players]);

  001a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a5	2d 00 00 00 00	 sub	 eax, OFFSET _players
  001aa	99		 cdq
  001ab	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001b0	f7 f9		 idiv	 ecx
  001b2	6b d0 16	 imul	 edx, eax, 22
  001b5	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  001bb	52		 push	 edx
  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IBDAHDKJ@?$CFs?5became?5a?5spectator?4?6@
  001c1	e8 00 00 00 00	 call	 _CONS_Printf
  001c6	83 c4 08	 add	 esp, 8

; 8945 : 
; 8946 : 			if (gametype == GT_TAG)

  001c9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001d0	83 f8 03	 cmp	 eax, 3
  001d3	75 2f		 jne	 SHORT $LN21@P_DeathThi

; 8947 : 			{
; 8948 : 				if (player->pflags & PF_TAGIT)

  001d5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001de	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  001e4	74 18		 je	 SHORT $LN22@P_DeathThi

; 8949 : 					player->pflags &= ~PF_TAGIT;

  001e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001ef	81 e1 ff ff ff
	ef		 and	 ecx, -268435457		; efffffffH
  001f5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001f8	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN22@P_DeathThi:

; 8950 : 
; 8951 : 				P_CheckSurvivors(); //see if you still have a game.

  001fe	e8 00 00 00 00	 call	 _P_CheckSurvivors
  00203	90		 npad	 1
$LN21@P_DeathThi:

; 8952 : 			}
; 8953 : 		}
; 8954 : 	}
; 8955 : 
; 8956 : 	if ((cmd->buttons & BT_JUMP) && (gametype == GT_MATCH

  00204	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00207	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0020b	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00211	74 33		 je	 SHORT $LN23@P_DeathThi
  00213	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0021a	83 f8 01	 cmp	 eax, 1
  0021d	74 18		 je	 SHORT $LN25@P_DeathThi
  0021f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00226	83 f8 03	 cmp	 eax, 3
  00229	74 0c		 je	 SHORT $LN25@P_DeathThi
  0022b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00232	83 f8 04	 cmp	 eax, 4
  00235	75 0f		 jne	 SHORT $LN23@P_DeathThi
$LN25@P_DeathThi:

; 8957 : #ifdef CHAOSISNOTDEADYET
; 8958 : 		|| gametype == GT_CHAOS
; 8959 : #endif
; 8960 : 		|| gametype == GT_TAG || gametype == GT_CTF))
; 8961 : 	{
; 8962 : 		player->playerstate = PST_REBORN;

  00237	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0023a	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2

; 8963 : 	}

  00241	e9 b9 02 00 00	 jmp	 $LN45@P_DeathThi
$LN23@P_DeathThi:

; 8964 : 	else if (player->deadtimer < 30*TICRATE && (gametype != GT_COOP && gametype != GT_RACE))

  00246	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00249	81 b8 28 01 00
	00 1a 04 00 00	 cmp	 DWORD PTR [eax+296], 1050 ; 0000041aH
  00253	7d 26		 jge	 SHORT $LN26@P_DeathThi
  00255	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0025c	85 c0		 test	 eax, eax
  0025e	74 1b		 je	 SHORT $LN26@P_DeathThi
  00260	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00267	83 f8 02	 cmp	 eax, 2
  0026a	74 0f		 je	 SHORT $LN26@P_DeathThi

; 8965 : 	{
; 8966 : 		player->playerstate = PST_REBORN;

  0026c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0026f	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2

; 8967 : 	}

  00276	e9 84 02 00 00	 jmp	 $LN45@P_DeathThi
$LN26@P_DeathThi:

; 8968 : 	else if (player->lives > 0 && !G_IsSpecialStage(gamemap)) // Don't allow "click to respawn" in special stages!

  0027b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0027e	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  00285	0f 8e d2 00 00
	00		 jle	 $LN28@P_DeathThi
  0028b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 _G_IsSpecialStage
  00298	83 c4 04	 add	 esp, 4
  0029b	85 c0		 test	 eax, eax
  0029d	0f 85 ba 00 00
	00		 jne	 $LN28@P_DeathThi

; 8969 : 	{
; 8970 : 		// Respawn with jump button
; 8971 : 		if ((cmd->buttons & BT_JUMP) && player->deadtimer < 59*TICRATE && gametype != GT_RACE)

  002a3	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  002a6	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  002aa	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  002b0	74 25		 je	 SHORT $LN30@P_DeathThi
  002b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002b5	81 b8 28 01 00
	00 11 08 00 00	 cmp	 DWORD PTR [eax+296], 2065 ; 00000811H
  002bf	7d 16		 jge	 SHORT $LN30@P_DeathThi
  002c1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002c8	83 f8 02	 cmp	 eax, 2
  002cb	74 0a		 je	 SHORT $LN30@P_DeathThi

; 8972 : 			player->playerstate = PST_REBORN;

  002cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002d0	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2
$LN30@P_DeathThi:

; 8973 : 
; 8974 : 		if ((cmd->buttons & BT_JUMP) && gametype == GT_RACE)

  002d7	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  002da	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  002de	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  002e4	74 16		 je	 SHORT $LN31@P_DeathThi
  002e6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002ed	83 f8 02	 cmp	 eax, 2
  002f0	75 0a		 jne	 SHORT $LN31@P_DeathThi

; 8975 : 			player->playerstate = PST_REBORN;

  002f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002f5	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2
$LN31@P_DeathThi:

; 8976 : 
; 8977 : 		if (player->deadtimer < 56*TICRATE && gametype == GT_COOP)

  002fc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ff	81 b8 28 01 00
	00 a8 07 00 00	 cmp	 DWORD PTR [eax+296], 1960 ; 000007a8H
  00309	7d 15		 jge	 SHORT $LN32@P_DeathThi
  0030b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00312	85 c0		 test	 eax, eax
  00314	75 0a		 jne	 SHORT $LN32@P_DeathThi

; 8978 : 			player->playerstate = PST_REBORN;

  00316	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00319	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2
$LN32@P_DeathThi:

; 8979 : 
; 8980 : 		if (player->mo->z < R_PointInSubsector(player->mo->x, player->mo->y)->sector->floorheight

  00320	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00323	8b 30		 mov	 esi, DWORD PTR [eax]
  00325	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00328	8b 11		 mov	 edx, DWORD PTR [ecx]
  0032a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0032d	50		 push	 eax
  0032e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00331	8b 11		 mov	 edx, DWORD PTR [ecx]
  00333	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00336	50		 push	 eax
  00337	e8 00 00 00 00	 call	 _R_PointInSubsector
  0033c	83 c4 08	 add	 esp, 8
  0033f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00341	8b 11		 mov	 edx, DWORD PTR [ecx]
  00343	81 ea 00 00 10
	27		 sub	 edx, 655360000		; 27100000H
  00349	39 56 18	 cmp	 DWORD PTR [esi+24], edx
  0034c	7d 0a		 jge	 SHORT $LN33@P_DeathThi

; 8981 : 			- 10000*FRACUNIT)
; 8982 : 		{
; 8983 : 			player->playerstate = PST_REBORN;

  0034e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00351	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2
$LN33@P_DeathThi:

; 8984 : 		}
; 8985 : 	}

  00358	e9 a2 01 00 00	 jmp	 $LN45@P_DeathThi
$LN28@P_DeathThi:

; 8986 : 	else if ((netgame || multiplayer) && player->deadtimer == 48*TICRATE)

  0035d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00364	75 0d		 jne	 SHORT $LN35@P_DeathThi
  00366	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0036d	0f 84 8c 01 00
	00		 je	 $LN45@P_DeathThi
$LN35@P_DeathThi:
  00373	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00376	81 b8 28 01 00
	00 90 06 00 00	 cmp	 DWORD PTR [eax+296], 1680 ; 00000690H
  00380	0f 85 79 01 00
	00		 jne	 $LN45@P_DeathThi

; 8987 : 	{
; 8988 : 		// In a net/multiplayer game, and out of lives
; 8989 : 		if (gametype == GT_RACE)

  00386	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0038d	83 f8 02	 cmp	 eax, 2
  00390	0f 85 8d 00 00
	00		 jne	 $LN41@P_DeathThi

; 8990 : 		{
; 8991 : 			INT32 i;
; 8992 : 
; 8993 : 			for (i = 0; i < MAXPLAYERS; i++)

  00396	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0039d	eb 09		 jmp	 SHORT $LN4@P_DeathThi
$LN2@P_DeathThi:
  0039f	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  003a2	83 c0 01	 add	 eax, 1
  003a5	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@P_DeathThi:
  003a8	83 7d f8 20	 cmp	 DWORD PTR _i$2[ebp], 32	; 00000020H
  003ac	7d 31		 jge	 SHORT $LN3@P_DeathThi

; 8994 : 				if (playeringame[i] && !players[i].exiting && players[i].lives > 0)

  003ae	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  003b1	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  003b9	74 22		 je	 SHORT $LN37@P_DeathThi
  003bb	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$2[ebp], 508
  003c2	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  003c9	75 12		 jne	 SHORT $LN37@P_DeathThi
  003cb	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$2[ebp], 508
  003d2	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR _players[eax+256], 0
  003d9	7e 02		 jle	 SHORT $LN37@P_DeathThi

; 8995 : 					break;

  003db	eb 02		 jmp	 SHORT $LN3@P_DeathThi
$LN37@P_DeathThi:
  003dd	eb c0		 jmp	 SHORT $LN2@P_DeathThi
$LN3@P_DeathThi:

; 8996 : 
; 8997 : 			if (i == MAXPLAYERS)

  003df	83 7d f8 20	 cmp	 DWORD PTR _i$2[ebp], 32	; 00000020H
  003e3	75 3e		 jne	 SHORT $LN41@P_DeathThi

; 8998 : 			{
; 8999 : 				// Everyone's either done with the race, or dead.
; 9000 : 				if (!countdown2)

  003e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _countdown2, 0
  003ec	75 22		 jne	 SHORT $LN39@P_DeathThi

; 9001 : 				{
; 9002 : 					// Everyone just.. died. XD
; 9003 : 					nextmapoverride = racestage_start;

  003ee	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _racestage_start
  003f4	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmapoverride, ax

; 9004 : 					countdown2 = 1*TICRATE;

  003fa	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _countdown2, 35 ; 00000023H

; 9005 : 					skipstats = true;

  00404	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _skipstats, 1

; 9006 : 				}

  0040e	eb 13		 jmp	 SHORT $LN41@P_DeathThi
$LN39@P_DeathThi:

; 9007 : 				else if (countdown2 > 1*TICRATE)

  00410	83 3d 00 00 00
	00 23		 cmp	 DWORD PTR _countdown2, 35 ; 00000023H
  00417	76 0a		 jbe	 SHORT $LN41@P_DeathThi

; 9008 : 					countdown2 = 1*TICRATE;

  00419	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _countdown2, 35 ; 00000023H
$LN41@P_DeathThi:

; 9009 : 			}
; 9010 : 		}
; 9011 : 
; 9012 : 		// In a coop game, and out of lives
; 9013 : 		if (gametype == GT_COOP)

  00423	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0042a	85 c0		 test	 eax, eax
  0042c	0f 85 cd 00 00
	00		 jne	 $LN45@P_DeathThi

; 9014 : 		{
; 9015 : 			INT32 i;
; 9016 : 
; 9017 : 			for (i = 0; i < MAXPLAYERS; i++)

  00432	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00439	eb 09		 jmp	 SHORT $LN7@P_DeathThi
$LN5@P_DeathThi:
  0043b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0043e	83 c0 01	 add	 eax, 1
  00441	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN7@P_DeathThi:
  00444	83 7d f4 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  00448	7d 31		 jge	 SHORT $LN6@P_DeathThi

; 9018 : 				if (playeringame[i] && (players[i].exiting || players[i].lives > 0))

  0044a	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0044d	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00455	74 22		 je	 SHORT $LN43@P_DeathThi
  00457	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  0045e	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  00465	75 10		 jne	 SHORT $LN44@P_DeathThi
  00467	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  0046e	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR _players[eax+256], 0
  00475	7e 02		 jle	 SHORT $LN43@P_DeathThi
$LN44@P_DeathThi:

; 9019 : 					break;

  00477	eb 02		 jmp	 SHORT $LN6@P_DeathThi
$LN43@P_DeathThi:
  00479	eb c0		 jmp	 SHORT $LN5@P_DeathThi
$LN6@P_DeathThi:

; 9020 : 
; 9021 : 			if (i == MAXPLAYERS)

  0047b	83 7d f4 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  0047f	75 7e		 jne	 SHORT $LN45@P_DeathThi

; 9022 : 			{
; 9023 : 				// They're dead, Jim.
; 9024 : 				nextmapoverride = spstage_start;

  00481	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _spstage_start
  00487	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmapoverride, ax

; 9025 : 				countdown2 = 1*TICRATE;

  0048d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _countdown2, 35 ; 00000023H

; 9026 : 				skipstats = true;

  00497	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _skipstats, 1

; 9027 : 
; 9028 : 				for (i = 0; i < MAXPLAYERS; i++)

  004a1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  004a8	eb 09		 jmp	 SHORT $LN10@P_DeathThi
$LN8@P_DeathThi:
  004aa	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  004ad	83 c0 01	 add	 eax, 1
  004b0	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN10@P_DeathThi:
  004b3	83 7d f4 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  004b7	7d 20		 jge	 SHORT $LN9@P_DeathThi

; 9029 : 				{
; 9030 : 					if (playeringame[i])

  004b9	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  004bc	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  004c4	74 11		 je	 SHORT $LN46@P_DeathThi

; 9031 : 						players[i].score = 0;

  004c6	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  004cd	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+188], 0
$LN46@P_DeathThi:

; 9032 : 				}

  004d7	eb d1		 jmp	 SHORT $LN8@P_DeathThi
$LN9@P_DeathThi:

; 9033 : 
; 9034 : 				emeralds = 0;

  004d9	33 c0		 xor	 eax, eax
  004db	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 9035 : 				tokenbits = 0;

  004e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tokenbits, 0

; 9036 : 				tokenlist = 0;

  004eb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tokenlist, 0

; 9037 : 				token = 0;

  004f5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _token, 0
$LN45@P_DeathThi:

; 9038 : 			}
; 9039 : 		}
; 9040 : 	}
; 9041 : 
; 9042 : 	// Stop music when respawning in single player
; 9043 : 	if (cv_resetmusic.value && player->playerstate == PST_REBORN)

  004ff	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_resetmusic+20, 0
  00506	74 39		 je	 SHORT $LN49@P_DeathThi
  00508	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0050b	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  0050f	75 30		 jne	 SHORT $LN49@P_DeathThi

; 9044 : 	{
; 9045 : 		if (!(netgame || multiplayer))

  00511	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00518	75 11		 jne	 SHORT $LN48@P_DeathThi
  0051a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00521	75 08		 jne	 SHORT $LN48@P_DeathThi

; 9046 : 			S_StopMusic();

  00523	e8 00 00 00 00	 call	 _S_StopMusic
  00528	90		 npad	 1
  00529	eb 16		 jmp	 SHORT $LN49@P_DeathThi
$LN48@P_DeathThi:

; 9047 : 		else
; 9048 : 			S_SpeedMusic(1.0f);

  0052b	51		 push	 ecx
  0052c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00534	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00539	e8 00 00 00 00	 call	 _S_SpeedMusic
  0053e	83 c4 04	 add	 esp, 4
$LN49@P_DeathThi:

; 9049 : 	}
; 9050 : 
; 9051 : 	if (player->mo->momz < -30*FRACUNIT)

  00541	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00544	8b 08		 mov	 ecx, DWORD PTR [eax]
  00546	81 79 50 00 00
	e2 ff		 cmp	 DWORD PTR [ecx+80], -1966080 ; ffe20000H
  0054d	7d 0c		 jge	 SHORT $LN50@P_DeathThi

; 9052 : 		player->mo->momz = -30*FRACUNIT;

  0054f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00552	8b 08		 mov	 ecx, DWORD PTR [eax]
  00554	c7 41 50 00 00
	e2 ff		 mov	 DWORD PTR [ecx+80], -1966080 ; ffe20000H
$LN50@P_DeathThi:

; 9053 : 
; 9054 : 	if (player->mo->z + player->mo->momz < player->mo->subsector->sector->floorheight - 5120*FRACUNIT)

  0055b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0055e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00560	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00563	8b 02		 mov	 eax, DWORD PTR [edx]
  00565	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00568	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  0056b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0056e	8b 02		 mov	 eax, DWORD PTR [edx]
  00570	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  00573	8b 02		 mov	 eax, DWORD PTR [edx]
  00575	8b 10		 mov	 edx, DWORD PTR [eax]
  00577	81 ea 00 00 00
	14		 sub	 edx, 335544320		; 14000000H
  0057d	3b ca		 cmp	 ecx, edx
  0057f	7d 26		 jge	 SHORT $LN51@P_DeathThi

; 9055 : 	{
; 9056 : 		player->mo->momz = 0;

  00581	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00584	8b 08		 mov	 ecx, DWORD PTR [eax]
  00586	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 9057 : 		player->mo->z = player->mo->subsector->sector->floorheight - 5120*FRACUNIT;

  0058d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00590	8b 08		 mov	 ecx, DWORD PTR [eax]
  00592	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00595	8b 02		 mov	 eax, DWORD PTR [edx]
  00597	8b 08		 mov	 ecx, DWORD PTR [eax]
  00599	81 e9 00 00 00
	14		 sub	 ecx, 335544320		; 14000000H
  0059f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005a2	8b 02		 mov	 eax, DWORD PTR [edx]
  005a4	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN51@P_DeathThi:

; 9058 : 	}
; 9059 : 
; 9060 : 	if (gametype == GT_RACE || (gametype == GT_COOP && (multiplayer || netgame)))

  005a7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  005ae	83 f8 02	 cmp	 eax, 2
  005b1	74 25		 je	 SHORT $LN54@P_DeathThi
  005b3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  005ba	85 c0		 test	 eax, eax
  005bc	0f 85 cf 00 00
	00		 jne	 $LN61@P_DeathThi
  005c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  005c9	75 0d		 jne	 SHORT $LN54@P_DeathThi
  005cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  005d2	0f 84 b9 00 00
	00		 je	 $LN61@P_DeathThi
$LN54@P_DeathThi:

; 9061 : 	{
; 9062 : 		// Keep time rolling in race mode
; 9063 : 		if (!(countdown2 && !countdown) && !player->exiting && !(player->pflags & PF_TIMEOVER))

  005d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _countdown2, 0
  005df	74 09		 je	 SHORT $LN56@P_DeathThi
  005e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _countdown, 0
  005e8	74 68		 je	 SHORT $LN58@P_DeathThi
$LN56@P_DeathThi:
  005ea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005ed	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  005f4	75 5c		 jne	 SHORT $LN58@P_DeathThi
  005f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005f9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  005ff	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00605	75 4b		 jne	 SHORT $LN58@P_DeathThi

; 9064 : 		{
; 9065 : 			if (gametype == GT_RACE)

  00607	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0060e	83 f8 02	 cmp	 eax, 2
  00611	75 30		 jne	 SHORT $LN57@P_DeathThi

; 9066 : 			{
; 9067 : 				if (leveltime >= 4*TICRATE)

  00613	81 3d 00 00 00
	00 8c 00 00 00	 cmp	 DWORD PTR _leveltime, 140 ; 0000008cH
  0061d	72 15		 jb	 SHORT $LN59@P_DeathThi

; 9068 : 					player->realtime = leveltime - 4*TICRATE;

  0061f	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00624	2d 8c 00 00 00	 sub	 eax, 140		; 0000008cH
  00629	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0062c	89 81 54 01 00
	00		 mov	 DWORD PTR [ecx+340], eax
  00632	eb 0d		 jmp	 SHORT $LN60@P_DeathThi
$LN59@P_DeathThi:

; 9069 : 				else
; 9070 : 					player->realtime = 0;

  00634	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00637	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0
$LN60@P_DeathThi:

; 9071 : 			}

  00641	eb 0f		 jmp	 SHORT $LN58@P_DeathThi
$LN57@P_DeathThi:

; 9072 : 			else
; 9073 : 				player->realtime = leveltime;

  00643	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00646	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  0064c	89 88 54 01 00
	00		 mov	 DWORD PTR [eax+340], ecx
$LN58@P_DeathThi:

; 9074 : 		}
; 9075 : 
; 9076 : 		// Return to level music
; 9077 : 		if (netgame && player->deadtimer == gameovertics && P_IsLocalPlayer(player))

  00652	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00659	74 36		 je	 SHORT $LN61@P_DeathThi
  0065b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0065e	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  00664	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _gameovertics
  0066a	75 25		 jne	 SHORT $LN61@P_DeathThi
  0066c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  00675	83 c4 04	 add	 esp, 4
  00678	85 c0		 test	 eax, eax
  0067a	74 15		 je	 SHORT $LN61@P_DeathThi

; 9078 : 			S_ChangeMusic(mapmusic & 2047, true);

  0067c	6a 01		 push	 1
  0067e	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  00683	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00688	50		 push	 eax
  00689	e8 00 00 00 00	 call	 _S_ChangeMusic
  0068e	83 c4 08	 add	 esp, 8
$LN61@P_DeathThi:

; 9079 : 	}
; 9080 : }

  00691	5f		 pop	 edi
  00692	5e		 pop	 esi
  00693	5b		 pop	 ebx
  00694	8b e5		 mov	 esp, ebp
  00696	5d		 pop	 ebp
  00697	c3		 ret	 0
_P_DeathThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoRopeHang
_TEXT	SEGMENT
_playerz$ = -40						; size = 4
_speedz$ = -36						; size = 4
_speedy$ = -32						; size = 4
_speedx$ = -28						; size = 4
_dist$ = -24						; size = 4
_waypoint$ = -20					; size = 4
_mo2$ = -16						; size = 4
_th$ = -12						; size = 4
_speed$ = -8						; size = 4
_sequence$ = -4						; size = 4
_player$ = 8						; size = 4
_minecart$ = 12						; size = 4
_P_DoRopeHang PROC					; COMDAT

; 8477 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8478 : 	INT32 sequence;
; 8479 : 	fixed_t speed;
; 8480 : 	thinker_t *th;
; 8481 : 	mobj_t *mo2;
; 8482 : 	mobj_t *waypoint = NULL;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _waypoint$[ebp], 0

; 8483 : 	fixed_t dist;
; 8484 : 	fixed_t speedx,speedy,speedz;
; 8485 : 	fixed_t playerz;
; 8486 : 
; 8487 : 	if(!minecart)

  00010	83 7d 0c 00	 cmp	 DWORD PTR _minecart$[ebp], 0
  00014	0f 85 5f 01 00
	00		 jne	 $LN8@P_DoRopeHa

; 8488 : 	{
; 8489 : 		player->mo->height = P_GetPlayerHeight(player);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  00023	83 c4 04	 add	 esp, 4
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 8490 : 
; 8491 : 		if (player->cmd.buttons & BT_USE && !(player->pflags & PF_STASIS || player->powers[pw_nocontrol])) // Drop off of the rope

  0002e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00031	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  00035	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  0003b	0f 84 fa 00 00
	00		 je	 $LN10@P_DoRopeHa
  00041	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00044	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0004a	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  00050	0f 85 e5 00 00
	00		 jne	 $LN10@P_DoRopeHa
  00056	b8 04 00 00 00	 mov	 eax, 4
  0005b	6b c8 1b	 imul	 ecx, eax, 27
  0005e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00061	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00066	0f 85 cf 00 00
	00		 jne	 $LN10@P_DoRopeHa

; 8492 : 		{
; 8493 : 			P_SetTarget(&player->mo->tracer, NULL);

  0006c	6a 00		 push	 0
  0006e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _P_SetTarget
  0007f	83 c4 08	 add	 esp, 8

; 8494 : 
; 8495 : 			player->pflags |= PF_JUMPED;

  00082	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00085	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0008b	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00091	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00094	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8496 : 			player->pflags &= ~PF_ROPEHANG;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0009d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000a3	81 e1 ff ff ff
	df		 and	 ecx, -536870913		; dfffffffH
  000a9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ac	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8497 : 
; 8498 : 			if (!(player->pflags & PF_SLIDING) && (player->pflags & PF_JUMPED) && !player->powers[pw_super]
; 8499 : 			&& (player->mo->state - states < S_PLAY_ATK1
; 8500 : 			|| player->mo->state - states > S_PLAY_ATK4) && player->charability2 == CA2_SPINDASH)

  000b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000bb	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  000c1	75 73		 jne	 SHORT $LN11@P_DoRopeHa
  000c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000cc	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  000d2	74 62		 je	 SHORT $LN11@P_DoRopeHa
  000d4	b8 04 00 00 00	 mov	 eax, 4
  000d9	6b c8 0f	 imul	 ecx, eax, 15
  000dc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000df	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000e4	75 50		 jne	 SHORT $LN11@P_DoRopeHa
  000e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  000ee	2d 00 00 00 00	 sub	 eax, OFFSET _states
  000f3	99		 cdq
  000f4	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  000f9	f7 f9		 idiv	 ecx
  000fb	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  000fe	7c 1a		 jl	 SHORT $LN12@P_DoRopeHa
  00100	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00103	8b 08		 mov	 ecx, DWORD PTR [eax]
  00105	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00108	2d 00 00 00 00	 sub	 eax, OFFSET _states
  0010d	99		 cdq
  0010e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00113	f7 f9		 idiv	 ecx
  00115	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00118	7e 1c		 jle	 SHORT $LN11@P_DoRopeHa
$LN12@P_DoRopeHa:
  0011a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011d	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  00124	75 10		 jne	 SHORT $LN11@P_DoRopeHa

; 8501 : 			{
; 8502 : 				P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  00126	6a 0c		 push	 12			; 0000000cH
  00128	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0012b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00133	83 c4 08	 add	 esp, 8
$LN11@P_DoRopeHa:

; 8503 : 			}
; 8504 : 
; 8505 : 			return;

  00136	e9 f0 05 00 00	 jmp	 $LN17@P_DoRopeHa
$LN10@P_DoRopeHa:

; 8506 : 		}
; 8507 : 
; 8508 : 		// Play the 'clink' sound only if the player is moving.
; 8509 : 		if (!(leveltime & 7) && player->speed)

  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00140	83 e0 07	 and	 eax, 7
  00143	75 1f		 jne	 SHORT $LN13@P_DoRopeHa
  00145	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00148	83 b8 0c 01 00
	00 00		 cmp	 DWORD PTR [eax+268], 0
  0014f	74 13		 je	 SHORT $LN13@P_DoRopeHa

; 8510 : 			S_StartSound(player->mo, sfx_s3k_36);

  00151	68 98 00 00 00	 push	 152			; 00000098H
  00156	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00159	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015b	51		 push	 ecx
  0015c	e8 00 00 00 00	 call	 _S_StartSound
  00161	83 c4 08	 add	 esp, 8
$LN13@P_DoRopeHa:

; 8511 : 
; 8512 : 		playerz = player->mo->z + player->mo->height;

  00164	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0016c	8b 02		 mov	 eax, DWORD PTR [edx]
  0016e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00171	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  00174	89 4d d8	 mov	 DWORD PTR _playerz$[ebp], ecx

; 8513 : 	}

  00177	eb 0b		 jmp	 SHORT $LN9@P_DoRopeHa
$LN8@P_DoRopeHa:

; 8514 : 	else
; 8515 : 		playerz = player->mo->z;

  00179	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0017c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00181	89 55 d8	 mov	 DWORD PTR _playerz$[ebp], edx
$LN9@P_DoRopeHa:

; 8516 : 
; 8517 : //	player->powers[pw_flashing] = 1;
; 8518 : 
; 8519 : 	speed = abs(player->speed);

  00184	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00187	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 _abs
  00193	83 c4 04	 add	 esp, 4
  00196	89 45 f8	 mov	 DWORD PTR _speed$[ebp], eax

; 8520 : 
; 8521 : 	sequence = player->mo->tracer->threshold;

  00199	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  001a4	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  001aa	89 45 fc	 mov	 DWORD PTR _sequence$[ebp], eax

; 8522 : 
; 8523 : 	// change slope
; 8524 : 	dist = P_AproxDistance(P_AproxDistance(player->mo->tracer->x - player->mo->x, player->mo->tracer->y - player->mo->y), player->mo->tracer->z - playerz);

  001ad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  001b8	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001bb	2b 45 d8	 sub	 eax, DWORD PTR _playerz$[ebp]
  001be	50		 push	 eax
  001bf	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c4	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cf	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  001d2	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  001d5	50		 push	 eax
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001d9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001db	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  001e1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e6	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  001e9	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _P_AproxDistance
  001f2	83 c4 08	 add	 esp, 8
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 _P_AproxDistance
  001fb	83 c4 08	 add	 esp, 8
  001fe	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 8525 : 
; 8526 : 	if (dist < 1)

  00201	83 7d e8 01	 cmp	 DWORD PTR _dist$[ebp], 1
  00205	7d 07		 jge	 SHORT $LN14@P_DoRopeHa

; 8527 : 		dist = 1;

  00207	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN14@P_DoRopeHa:

; 8528 : 
; 8529 : 	speedx = FixedMul(FixedDiv(player->mo->tracer->x - player->mo->x, dist), (speed));

  0020e	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  00211	50		 push	 eax
  00212	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  00215	51		 push	 ecx
  00216	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00219	8b 02		 mov	 eax, DWORD PTR [edx]
  0021b	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00221	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00224	8b 02		 mov	 eax, DWORD PTR [edx]
  00226	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00229	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  0022c	51		 push	 ecx
  0022d	e8 00 00 00 00	 call	 _FixedDiv
  00232	83 c4 08	 add	 esp, 8
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 _FixedMul
  0023b	83 c4 08	 add	 esp, 8
  0023e	89 45 e4	 mov	 DWORD PTR _speedx$[ebp], eax

; 8530 : 	speedy = FixedMul(FixedDiv(player->mo->tracer->y - player->mo->y, dist), (speed));

  00241	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  00244	50		 push	 eax
  00245	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  00248	51		 push	 ecx
  00249	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0024c	8b 02		 mov	 eax, DWORD PTR [edx]
  0024e	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00254	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00257	8b 02		 mov	 eax, DWORD PTR [edx]
  00259	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0025c	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0025f	51		 push	 ecx
  00260	e8 00 00 00 00	 call	 _FixedDiv
  00265	83 c4 08	 add	 esp, 8
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 _FixedMul
  0026e	83 c4 08	 add	 esp, 8
  00271	89 45 e0	 mov	 DWORD PTR _speedy$[ebp], eax

; 8531 : 	speedz = FixedMul(FixedDiv(player->mo->tracer->z - playerz, dist), (speed));

  00274	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  00277	50		 push	 eax
  00278	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  0027b	51		 push	 ecx
  0027c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0027f	8b 02		 mov	 eax, DWORD PTR [edx]
  00281	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00287	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0028a	2b 55 d8	 sub	 edx, DWORD PTR _playerz$[ebp]
  0028d	52		 push	 edx
  0028e	e8 00 00 00 00	 call	 _FixedDiv
  00293	83 c4 08	 add	 esp, 8
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 _FixedMul
  0029c	83 c4 08	 add	 esp, 8
  0029f	89 45 dc	 mov	 DWORD PTR _speedz$[ebp], eax

; 8532 : 
; 8533 : 	// If not allowed to move, we're done here.
; 8534 : 	if (!speed)

  002a2	83 7d f8 00	 cmp	 DWORD PTR _speed$[ebp], 0
  002a6	75 05		 jne	 SHORT $LN15@P_DoRopeHa

; 8535 : 		return;

  002a8	e9 7e 04 00 00	 jmp	 $LN17@P_DoRopeHa
$LN15@P_DoRopeHa:

; 8536 : 
; 8537 : 	// Calculate the distance between the player and the waypoint
; 8538 : 	// 'dist' already equals this.
; 8539 : 
; 8540 : 	// Will the player be FURTHER away if the momx/momy/momz is added to
; 8541 : 	// his current coordinates, or closer? (shift down to fracunits to avoid approximation errors)
; 8542 : 	if (dist>>FRACBITS <= P_AproxDistance(P_AproxDistance(player->mo->tracer->x - player->mo->x - speedx, player->mo->tracer->y - player->mo->y - speedy), player->mo->tracer->z - playerz - speedz)>>FRACBITS)

  002ad	8b 75 e8	 mov	 esi, DWORD PTR _dist$[ebp]
  002b0	c1 fe 10	 sar	 esi, 16			; 00000010H
  002b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  002be	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  002c1	2b 45 d8	 sub	 eax, DWORD PTR _playerz$[ebp]
  002c4	2b 45 dc	 sub	 eax, DWORD PTR _speedz$[ebp]
  002c7	50		 push	 eax
  002c8	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002cb	8b 11		 mov	 edx, DWORD PTR [ecx]
  002cd	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  002d3	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d8	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  002db	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  002de	2b 45 e0	 sub	 eax, DWORD PTR _speedy$[ebp]
  002e1	50		 push	 eax
  002e2	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002e5	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e7	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  002ed	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f2	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  002f5	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  002f8	2b 45 e4	 sub	 eax, DWORD PTR _speedx$[ebp]
  002fb	50		 push	 eax
  002fc	e8 00 00 00 00	 call	 _P_AproxDistance
  00301	83 c4 08	 add	 esp, 8
  00304	50		 push	 eax
  00305	e8 00 00 00 00	 call	 _P_AproxDistance
  0030a	83 c4 08	 add	 esp, 8
  0030d	c1 f8 10	 sar	 eax, 16			; 00000010H
  00310	3b f0		 cmp	 esi, eax
  00312	0f 8f f2 03 00
	00		 jg	 $LN16@P_DoRopeHa

; 8543 : 	{
; 8544 : 		// If further away, set XYZ of player to waypoint location
; 8545 : 		P_UnsetThingPosition(player->mo);

  00318	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0031b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031d	51		 push	 ecx
  0031e	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00323	83 c4 04	 add	 esp, 4

; 8546 : 		player->mo->x = player->mo->tracer->x;

  00326	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00329	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00331	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00334	8b 08		 mov	 ecx, DWORD PTR [eax]
  00336	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00339	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 8547 : 		player->mo->y = player->mo->tracer->y;

  0033c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0033f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00341	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00347	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0034a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0034c	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0034f	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 8548 : 
; 8549 : 		if (minecart)

  00352	83 7d 0c 00	 cmp	 DWORD PTR _minecart$[ebp], 0
  00356	74 18		 je	 SHORT $LN18@P_DoRopeHa

; 8550 : 			player->mo->z = player->mo->tracer->z;

  00358	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0035b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0035d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00363	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00366	8b 08		 mov	 ecx, DWORD PTR [eax]
  00368	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  0036b	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0036e	eb 1e		 jmp	 SHORT $LN19@P_DoRopeHa
$LN18@P_DoRopeHa:

; 8551 : 		else
; 8552 : 			player->mo->z = player->mo->tracer->z - player->mo->height;

  00370	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00373	8b 08		 mov	 ecx, DWORD PTR [eax]
  00375	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0037b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0037e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00380	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00383	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  00386	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00389	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038b	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN19@P_DoRopeHa:

; 8553 : 
; 8554 : 		P_SetThingPosition(player->mo);

  0038e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00391	8b 08		 mov	 ecx, DWORD PTR [eax]
  00393	51		 push	 ecx
  00394	e8 00 00 00 00	 call	 _P_SetThingPosition
  00399	83 c4 04	 add	 esp, 4

; 8555 : 
; 8556 : 		if (cv_debug)

  0039c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  003a3	74 0d		 je	 SHORT $LN20@P_DoRopeHa

; 8557 : 			CONS_Printf("Looking for next waypoint...\n");

  003a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OPDLNCEP@Looking?5for?5next?5waypoint?4?4?4?6@
  003aa	e8 00 00 00 00	 call	 _CONS_Printf
  003af	83 c4 04	 add	 esp, 4
$LN20@P_DoRopeHa:

; 8558 : 
; 8559 : 		// Find next waypoint
; 8560 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  003b2	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  003b7	89 45 f4	 mov	 DWORD PTR _th$[ebp], eax
  003ba	eb 09		 jmp	 SHORT $LN4@P_DoRopeHa
$LN2@P_DoRopeHa:
  003bc	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  003bf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003c2	89 4d f4	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_DoRopeHa:
  003c5	81 7d f4 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  003cc	74 59		 je	 SHORT $LN3@P_DoRopeHa

; 8561 : 		{
; 8562 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker) // Not a mobj thinker

  003ce	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  003d1	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  003d8	74 02		 je	 SHORT $LN21@P_DoRopeHa

; 8563 : 				continue;

  003da	eb e0		 jmp	 SHORT $LN2@P_DoRopeHa
$LN21@P_DoRopeHa:

; 8564 : 
; 8565 : 			mo2 = (mobj_t *)th;

  003dc	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  003df	89 45 f0	 mov	 DWORD PTR _mo2$[ebp], eax

; 8566 : 
; 8567 : 			if (mo2->type != MT_TUBEWAYPOINT)

  003e2	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  003e5	81 78 7c 06 01
	00 00		 cmp	 DWORD PTR [eax+124], 262 ; 00000106H
  003ec	74 02		 je	 SHORT $LN22@P_DoRopeHa

; 8568 : 				continue;

  003ee	eb cc		 jmp	 SHORT $LN2@P_DoRopeHa
$LN22@P_DoRopeHa:

; 8569 : 
; 8570 : 			if (mo2->threshold == sequence)

  003f0	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  003f3	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  003f9	3b 4d fc	 cmp	 ecx, DWORD PTR _sequence$[ebp]
  003fc	75 27		 jne	 SHORT $LN24@P_DoRopeHa

; 8571 : 			{
; 8572 : 				if (mo2->health == player->mo->tracer->health + 1)

  003fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00401	8b 08		 mov	 ecx, DWORD PTR [eax]
  00403	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00409	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0040f	83 c0 01	 add	 eax, 1
  00412	8b 4d f0	 mov	 ecx, DWORD PTR _mo2$[ebp]
  00415	39 81 8c 00 00
	00		 cmp	 DWORD PTR [ecx+140], eax
  0041b	75 08		 jne	 SHORT $LN24@P_DoRopeHa

; 8573 : 				{
; 8574 : 					waypoint = mo2;

  0041d	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  00420	89 45 ec	 mov	 DWORD PTR _waypoint$[ebp], eax

; 8575 : 					break;

  00423	eb 02		 jmp	 SHORT $LN3@P_DoRopeHa
$LN24@P_DoRopeHa:

; 8576 : 				}
; 8577 : 			}
; 8578 : 		}

  00425	eb 95		 jmp	 SHORT $LN2@P_DoRopeHa
$LN3@P_DoRopeHa:

; 8579 : 
; 8580 : 		if (!(player->mo->tracer->flags & MF_SLIDEME) && !waypoint)

  00427	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0042a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00432	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00435	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0043a	75 7e		 jne	 SHORT $LN6@P_DoRopeHa
  0043c	83 7d ec 00	 cmp	 DWORD PTR _waypoint$[ebp], 0
  00440	75 78		 jne	 SHORT $LN6@P_DoRopeHa

; 8581 : 		{
; 8582 : 			if (cv_debug)

  00442	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00449	74 0d		 je	 SHORT $LN26@P_DoRopeHa

; 8583 : 				CONS_Printf("Next waypoint not found, wrapping to start...\n");

  0044b	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DPKEPCAD@Next?5waypoint?5not?5found?0?5wrappi@
  00450	e8 00 00 00 00	 call	 _CONS_Printf
  00455	83 c4 04	 add	 esp, 4
$LN26@P_DoRopeHa:

; 8584 : 
; 8585 : 			// Wrap around back to first waypoint
; 8586 : 			for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00458	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0045d	89 45 f4	 mov	 DWORD PTR _th$[ebp], eax
  00460	eb 09		 jmp	 SHORT $LN7@P_DoRopeHa
$LN5@P_DoRopeHa:
  00462	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  00465	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00468	89 4d f4	 mov	 DWORD PTR _th$[ebp], ecx
$LN7@P_DoRopeHa:
  0046b	81 7d f4 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00472	74 46		 je	 SHORT $LN6@P_DoRopeHa

; 8587 : 			{
; 8588 : 				if (th->function.acp1 != (actionf_p1)P_MobjThinker) // Not a mobj thinker

  00474	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  00477	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0047e	74 02		 je	 SHORT $LN27@P_DoRopeHa

; 8589 : 					continue;

  00480	eb e0		 jmp	 SHORT $LN5@P_DoRopeHa
$LN27@P_DoRopeHa:

; 8590 : 
; 8591 : 				mo2 = (mobj_t *)th;

  00482	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  00485	89 45 f0	 mov	 DWORD PTR _mo2$[ebp], eax

; 8592 : 
; 8593 : 				if (mo2->type != MT_TUBEWAYPOINT)

  00488	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  0048b	81 78 7c 06 01
	00 00		 cmp	 DWORD PTR [eax+124], 262 ; 00000106H
  00492	74 02		 je	 SHORT $LN28@P_DoRopeHa

; 8594 : 					continue;

  00494	eb cc		 jmp	 SHORT $LN5@P_DoRopeHa
$LN28@P_DoRopeHa:

; 8595 : 
; 8596 : 				if (mo2->threshold == sequence)

  00496	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  00499	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0049f	3b 4d fc	 cmp	 ecx, DWORD PTR _sequence$[ebp]
  004a2	75 14		 jne	 SHORT $LN30@P_DoRopeHa

; 8597 : 				{
; 8598 : 					if (mo2->health == 0)

  004a4	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  004a7	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  004ae	75 08		 jne	 SHORT $LN30@P_DoRopeHa

; 8599 : 					{
; 8600 : 						waypoint = mo2;

  004b0	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  004b3	89 45 ec	 mov	 DWORD PTR _waypoint$[ebp], eax

; 8601 : 						break;

  004b6	eb 02		 jmp	 SHORT $LN6@P_DoRopeHa
$LN30@P_DoRopeHa:

; 8602 : 					}
; 8603 : 				}
; 8604 : 			}

  004b8	eb a8		 jmp	 SHORT $LN5@P_DoRopeHa
$LN6@P_DoRopeHa:

; 8605 : 		}
; 8606 : 
; 8607 : 		if (waypoint)

  004ba	83 7d ec 00	 cmp	 DWORD PTR _waypoint$[ebp], 0
  004be	0f 84 4b 01 00
	00		 je	 $LN31@P_DoRopeHa

; 8608 : 		{
; 8609 : 			if (cv_debug)

  004c4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  004cb	74 21		 je	 SHORT $LN33@P_DoRopeHa

; 8610 : 				CONS_Printf("Found waypoint (sequence %d, number %d).\n", waypoint->threshold, waypoint->health);

  004cd	8b 45 ec	 mov	 eax, DWORD PTR _waypoint$[ebp]
  004d0	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  004d6	51		 push	 ecx
  004d7	8b 55 ec	 mov	 edx, DWORD PTR _waypoint$[ebp]
  004da	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  004e0	50		 push	 eax
  004e1	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@OOJOEGDC@Found?5waypoint?5?$CIsequence?5?$CFd?0?5nu@
  004e6	e8 00 00 00 00	 call	 _CONS_Printf
  004eb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN33@P_DoRopeHa:

; 8611 : 
; 8612 : 			// calculate MOMX/MOMY/MOMZ for next waypoint
; 8613 : 			// change slope
; 8614 : 			dist = P_AproxDistance(P_AproxDistance(player->mo->tracer->x - player->mo->x, player->mo->tracer->y - player->mo->y), player->mo->tracer->z - playerz);

  004ee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004f3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  004f9	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  004fc	2b 45 d8	 sub	 eax, DWORD PTR _playerz$[ebp]
  004ff	50		 push	 eax
  00500	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00503	8b 11		 mov	 edx, DWORD PTR [ecx]
  00505	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0050b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0050e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00510	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00513	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00516	50		 push	 eax
  00517	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0051a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0051c	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00522	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00525	8b 11		 mov	 edx, DWORD PTR [ecx]
  00527	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0052a	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  0052d	50		 push	 eax
  0052e	e8 00 00 00 00	 call	 _P_AproxDistance
  00533	83 c4 08	 add	 esp, 8
  00536	50		 push	 eax
  00537	e8 00 00 00 00	 call	 _P_AproxDistance
  0053c	83 c4 08	 add	 esp, 8
  0053f	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 8615 : 
; 8616 : 			if (dist < 1)

  00542	83 7d e8 01	 cmp	 DWORD PTR _dist$[ebp], 1
  00546	7d 07		 jge	 SHORT $LN34@P_DoRopeHa

; 8617 : 				dist = 1;

  00548	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN34@P_DoRopeHa:

; 8618 : 
; 8619 : 			player->mo->momx = FixedMul(FixedDiv(player->mo->tracer->x - player->mo->x, dist), (speed));

  0054f	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  00552	50		 push	 eax
  00553	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  00556	51		 push	 ecx
  00557	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0055a	8b 02		 mov	 eax, DWORD PTR [edx]
  0055c	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00562	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00565	8b 02		 mov	 eax, DWORD PTR [edx]
  00567	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0056a	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  0056d	51		 push	 ecx
  0056e	e8 00 00 00 00	 call	 _FixedDiv
  00573	83 c4 08	 add	 esp, 8
  00576	50		 push	 eax
  00577	e8 00 00 00 00	 call	 _FixedMul
  0057c	83 c4 08	 add	 esp, 8
  0057f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00582	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00584	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 8620 : 			player->mo->momy = FixedMul(FixedDiv(player->mo->tracer->y - player->mo->y, dist), (speed));

  00587	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  0058a	50		 push	 eax
  0058b	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  0058e	51		 push	 ecx
  0058f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00592	8b 02		 mov	 eax, DWORD PTR [edx]
  00594	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0059a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0059d	8b 02		 mov	 eax, DWORD PTR [edx]
  0059f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  005a2	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  005a5	51		 push	 ecx
  005a6	e8 00 00 00 00	 call	 _FixedDiv
  005ab	83 c4 08	 add	 esp, 8
  005ae	50		 push	 eax
  005af	e8 00 00 00 00	 call	 _FixedMul
  005b4	83 c4 08	 add	 esp, 8
  005b7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005ba	8b 0a		 mov	 ecx, DWORD PTR [edx]
  005bc	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 8621 : 			player->mo->momz = FixedMul(FixedDiv(player->mo->tracer->z - playerz, dist), (speed));

  005bf	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  005c2	50		 push	 eax
  005c3	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  005c6	51		 push	 ecx
  005c7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005ca	8b 02		 mov	 eax, DWORD PTR [edx]
  005cc	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  005d2	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  005d5	2b 55 d8	 sub	 edx, DWORD PTR _playerz$[ebp]
  005d8	52		 push	 edx
  005d9	e8 00 00 00 00	 call	 _FixedDiv
  005de	83 c4 08	 add	 esp, 8
  005e1	50		 push	 eax
  005e2	e8 00 00 00 00	 call	 _FixedMul
  005e7	83 c4 08	 add	 esp, 8
  005ea	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  005ef	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 8622 : 
; 8623 : 			P_SetTarget(&player->mo->tracer, waypoint);

  005f2	8b 45 ec	 mov	 eax, DWORD PTR _waypoint$[ebp]
  005f5	50		 push	 eax
  005f6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  005fb	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  00601	52		 push	 edx
  00602	e8 00 00 00 00	 call	 _P_SetTarget
  00607	83 c4 08	 add	 esp, 8

; 8624 : 		}

  0060a	e9 f9 00 00 00	 jmp	 $LN38@P_DoRopeHa
$LN31@P_DoRopeHa:

; 8625 : 		else
; 8626 : 		{
; 8627 : 			if (player->mo->tracer->flags & MF_SLIDEME)

  0060f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00612	8b 08		 mov	 ecx, DWORD PTR [eax]
  00614	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0061a	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  0061d	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00622	0f 84 b4 00 00
	00		 je	 $LN36@P_DoRopeHa

; 8628 : 			{
; 8629 : 				player->pflags |= PF_JUMPED;

  00628	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0062b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00631	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00637	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0063a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8630 : 				player->pflags &= ~PF_ROPEHANG;

  00640	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00643	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00649	81 e1 ff ff ff
	df		 and	 ecx, -536870913		; dfffffffH
  0064f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00652	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8631 : 
; 8632 : 				if (!(player->pflags & PF_SLIDING) && (player->pflags & PF_JUMPED) && !player->powers[pw_super]
; 8633 : 				&& (player->mo->state - states < S_PLAY_ATK1
; 8634 : 				|| player->mo->state - states > S_PLAY_ATK4) && player->charability2 == CA2_SPINDASH)

  00658	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0065b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00661	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00667	75 73		 jne	 SHORT $LN36@P_DoRopeHa
  00669	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0066c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00672	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00678	74 62		 je	 SHORT $LN36@P_DoRopeHa
  0067a	b8 04 00 00 00	 mov	 eax, 4
  0067f	6b c8 0f	 imul	 ecx, eax, 15
  00682	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00685	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0068a	75 50		 jne	 SHORT $LN36@P_DoRopeHa
  0068c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0068f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00691	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00694	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00699	99		 cdq
  0069a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0069f	f7 f9		 idiv	 ecx
  006a1	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  006a4	7c 1a		 jl	 SHORT $LN37@P_DoRopeHa
  006a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  006ab	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  006ae	2d 00 00 00 00	 sub	 eax, OFFSET _states
  006b3	99		 cdq
  006b4	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  006b9	f7 f9		 idiv	 ecx
  006bb	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  006be	7e 1c		 jle	 SHORT $LN36@P_DoRopeHa
$LN37@P_DoRopeHa:
  006c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006c3	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  006ca	75 10		 jne	 SHORT $LN36@P_DoRopeHa

; 8635 : 				{
; 8636 : 					P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  006cc	6a 0c		 push	 12			; 0000000cH
  006ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  006d3	51		 push	 ecx
  006d4	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  006d9	83 c4 08	 add	 esp, 8
$LN36@P_DoRopeHa:

; 8637 : 				}
; 8638 : 			}
; 8639 : 
; 8640 : 			P_SetTarget(&player->mo->tracer, NULL);

  006dc	6a 00		 push	 0
  006de	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  006e3	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  006e9	51		 push	 ecx
  006ea	e8 00 00 00 00	 call	 _P_SetTarget
  006ef	83 c4 08	 add	 esp, 8

; 8641 : 
; 8642 : 			if (cv_debug)

  006f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  006f9	74 0d		 je	 SHORT $LN38@P_DoRopeHa

; 8643 : 				CONS_Printf("Next waypoint not found!\n");

  006fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JEFHHCNP@Next?5waypoint?5not?5found?$CB?6@
  00700	e8 00 00 00 00	 call	 _CONS_Printf
  00705	83 c4 04	 add	 esp, 4
$LN38@P_DoRopeHa:

; 8644 : 		}
; 8645 : 	}

  00708	eb 21		 jmp	 SHORT $LN17@P_DoRopeHa
$LN16@P_DoRopeHa:

; 8646 : 	else
; 8647 : 	{
; 8648 : 		player->mo->momx = speedx;

  0070a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0070d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0070f	8b 55 e4	 mov	 edx, DWORD PTR _speedx$[ebp]
  00712	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 8649 : 		player->mo->momy = speedy;

  00715	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00718	8b 08		 mov	 ecx, DWORD PTR [eax]
  0071a	8b 55 e0	 mov	 edx, DWORD PTR _speedy$[ebp]
  0071d	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 8650 : 		player->mo->momz = speedz;

  00720	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00723	8b 08		 mov	 ecx, DWORD PTR [eax]
  00725	8b 55 dc	 mov	 edx, DWORD PTR _speedz$[ebp]
  00728	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN17@P_DoRopeHa:

; 8651 : 	}
; 8652 : }

  0072b	5f		 pop	 edi
  0072c	5e		 pop	 esi
  0072d	5b		 pop	 ebx
  0072e	8b e5		 mov	 esp, ebp
  00730	5d		 pop	 ebp
  00731	c3		 ret	 0
_P_DoRopeHang ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoZoomTube
_TEXT	SEGMENT
_speedz$ = -40						; size = 4
_speedy$ = -36						; size = 4
_speedx$ = -32						; size = 4
_reverse$ = -28						; size = 4
_dist$ = -24						; size = 4
_waypoint$ = -20					; size = 4
_mo2$ = -16						; size = 4
_th$ = -12						; size = 4
_speed$ = -8						; size = 4
_sequence$ = -4						; size = 4
_player$ = 8						; size = 4
_P_DoZoomTube PROC					; COMDAT

; 8341 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8342 : 	INT32 sequence;
; 8343 : 	fixed_t speed;
; 8344 : 	thinker_t *th;
; 8345 : 	mobj_t *mo2;
; 8346 : 	mobj_t *waypoint = NULL;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _waypoint$[ebp], 0

; 8347 : 	fixed_t dist;
; 8348 : 	boolean reverse;
; 8349 : 	fixed_t speedx,speedy,speedz;
; 8350 : 
; 8351 : 	player->mo->height = P_GetPlayerSpinHeight(player);

  00010	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _P_GetPlayerSpinHeight
  00019	83 c4 04	 add	 esp, 4
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 8352 : 
; 8353 : 	if (player->speed > 0)

  00024	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00027	83 b8 0c 01 00
	00 00		 cmp	 DWORD PTR [eax+268], 0
  0002e	7e 09		 jle	 SHORT $LN5@P_DoZoomTu

; 8354 : 		reverse = false;

  00030	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _reverse$[ebp], 0
  00037	eb 07		 jmp	 SHORT $LN6@P_DoZoomTu
$LN5@P_DoZoomTu:

; 8355 : 	else
; 8356 : 		reverse = true;

  00039	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _reverse$[ebp], 1
$LN6@P_DoZoomTu:

; 8357 : 
; 8358 : 	player->powers[pw_flashing] = 1;

  00040	b8 04 00 00 00	 mov	 eax, 4
  00045	d1 e0		 shl	 eax, 1
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0004a	c7 44 01 38 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 1

; 8359 : 
; 8360 : 	speed = abs(player->speed);

  00052	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00055	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 _abs
  00061	83 c4 04	 add	 esp, 4
  00064	89 45 f8	 mov	 DWORD PTR _speed$[ebp], eax

; 8361 : 
; 8362 : 	sequence = player->mo->tracer->threshold;

  00067	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00072	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00078	89 45 fc	 mov	 DWORD PTR _sequence$[ebp], eax

; 8363 : 
; 8364 : 	// change slope
; 8365 : 	dist = P_AproxDistance(P_AproxDistance(player->mo->tracer->x - player->mo->x, player->mo->tracer->y - player->mo->y), player->mo->tracer->z - player->mo->z);

  0007b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00086	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00089	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008b	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  0008e	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  00091	52		 push	 edx
  00092	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0009d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  000a5	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  000a8	52		 push	 edx
  000a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ae	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  000b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  000bc	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 _P_AproxDistance
  000c5	83 c4 08	 add	 esp, 8
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 _P_AproxDistance
  000ce	83 c4 08	 add	 esp, 8
  000d1	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 8366 : 
; 8367 : 	if (dist < 1)

  000d4	83 7d e8 01	 cmp	 DWORD PTR _dist$[ebp], 1
  000d8	7d 07		 jge	 SHORT $LN7@P_DoZoomTu

; 8368 : 		dist = 1;

  000da	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN7@P_DoZoomTu:

; 8369 : 
; 8370 : 	speedx = FixedMul(FixedDiv(player->mo->tracer->x - player->mo->x, dist), (speed));

  000e1	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  000e8	51		 push	 ecx
  000e9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ec	8b 02		 mov	 eax, DWORD PTR [edx]
  000ee	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000f4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000f7	8b 02		 mov	 eax, DWORD PTR [edx]
  000f9	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000fc	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 _FixedDiv
  00105	83 c4 08	 add	 esp, 8
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _FixedMul
  0010e	83 c4 08	 add	 esp, 8
  00111	89 45 e0	 mov	 DWORD PTR _speedx$[ebp], eax

; 8371 : 	speedy = FixedMul(FixedDiv(player->mo->tracer->y - player->mo->y, dist), (speed));

  00114	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  00117	50		 push	 eax
  00118	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0011f	8b 02		 mov	 eax, DWORD PTR [edx]
  00121	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00127	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0012a	8b 02		 mov	 eax, DWORD PTR [edx]
  0012c	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0012f	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 _FixedDiv
  00138	83 c4 08	 add	 esp, 8
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 _FixedMul
  00141	83 c4 08	 add	 esp, 8
  00144	89 45 dc	 mov	 DWORD PTR _speedy$[ebp], eax

; 8372 : 	speedz = FixedMul(FixedDiv(player->mo->tracer->z - player->mo->z, dist), (speed));

  00147	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  0014a	50		 push	 eax
  0014b	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  0014e	51		 push	 ecx
  0014f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00152	8b 02		 mov	 eax, DWORD PTR [edx]
  00154	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0015d	8b 02		 mov	 eax, DWORD PTR [edx]
  0015f	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00162	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 _FixedDiv
  0016b	83 c4 08	 add	 esp, 8
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 _FixedMul
  00174	83 c4 08	 add	 esp, 8
  00177	89 45 d8	 mov	 DWORD PTR _speedz$[ebp], eax

; 8373 : 
; 8374 : 	// Calculate the distance between the player and the waypoint
; 8375 : 	// 'dist' already equals this.
; 8376 : 
; 8377 : 	// Will the player be FURTHER away if the momx/momy/momz is added to
; 8378 : 	// his current coordinates, or closer? (shift down to fracunits to avoid approximation errors)
; 8379 : 	if (dist>>FRACBITS <= P_AproxDistance(P_AproxDistance(player->mo->tracer->x - player->mo->x - speedx, player->mo->tracer->y - player->mo->y - speedy), player->mo->tracer->z - player->mo->z - speedz)>>FRACBITS)

  0017a	8b 75 e8	 mov	 esi, DWORD PTR _dist$[ebp]
  0017d	c1 fe 10	 sar	 esi, 16			; 00000010H
  00180	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00183	8b 08		 mov	 ecx, DWORD PTR [eax]
  00185	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0018b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0018e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00190	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00193	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  00196	2b 55 d8	 sub	 edx, DWORD PTR _speedz$[ebp]
  00199	52		 push	 edx
  0019a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  001a5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001aa	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  001ad	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  001b0	2b 55 dc	 sub	 edx, DWORD PTR _speedy$[ebp]
  001b3	52		 push	 edx
  001b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  001bf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c4	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  001c7	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  001ca	2b 55 e0	 sub	 edx, DWORD PTR _speedx$[ebp]
  001cd	52		 push	 edx
  001ce	e8 00 00 00 00	 call	 _P_AproxDistance
  001d3	83 c4 08	 add	 esp, 8
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _P_AproxDistance
  001dc	83 c4 08	 add	 esp, 8
  001df	c1 f8 10	 sar	 eax, 16			; 00000010H
  001e2	3b f0		 cmp	 esi, eax
  001e4	0f 8f 5d 03 00
	00		 jg	 $LN8@P_DoZoomTu

; 8380 : 	{
; 8381 : 		// If further away, set XYZ of player to waypoint location
; 8382 : 		P_UnsetThingPosition(player->mo);

  001ea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ef	51		 push	 ecx
  001f0	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  001f5	83 c4 04	 add	 esp, 4

; 8383 : 		player->mo->x = player->mo->tracer->x;

  001f8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fd	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00203	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00206	8b 08		 mov	 ecx, DWORD PTR [eax]
  00208	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  0020b	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 8384 : 		player->mo->y = player->mo->tracer->y;

  0020e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00211	8b 08		 mov	 ecx, DWORD PTR [eax]
  00213	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00219	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0021c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021e	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00221	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 8385 : 		player->mo->z = player->mo->tracer->z;

  00224	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00227	8b 08		 mov	 ecx, DWORD PTR [eax]
  00229	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0022f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00232	8b 08		 mov	 ecx, DWORD PTR [eax]
  00234	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00237	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 8386 : 		P_SetThingPosition(player->mo);

  0023a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0023d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023f	51		 push	 ecx
  00240	e8 00 00 00 00	 call	 _P_SetThingPosition
  00245	83 c4 04	 add	 esp, 4

; 8387 : 
; 8388 : 		// ugh, duh!!
; 8389 : 		player->mo->floorz = player->mo->subsector->sector->floorheight;

  00248	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0024b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024d	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00250	8b 02		 mov	 eax, DWORD PTR [edx]
  00252	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00255	8b 11		 mov	 edx, DWORD PTR [ecx]
  00257	8b 00		 mov	 eax, DWORD PTR [eax]
  00259	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 8390 : 		player->mo->ceilingz = player->mo->subsector->sector->ceilingheight;

  0025c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0025f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00261	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00264	8b 02		 mov	 eax, DWORD PTR [edx]
  00266	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00269	8b 11		 mov	 edx, DWORD PTR [ecx]
  0026b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0026e	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 8391 : 
; 8392 : 		if (cv_debug)

  00271	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00278	74 0d		 je	 SHORT $LN10@P_DoZoomTu

; 8393 : 			CONS_Printf("Looking for next waypoint...\n");

  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OPDLNCEP@Looking?5for?5next?5waypoint?4?4?4?6@
  0027f	e8 00 00 00 00	 call	 _CONS_Printf
  00284	83 c4 04	 add	 esp, 4
$LN10@P_DoZoomTu:

; 8394 : 
; 8395 : 		// Find next waypoint
; 8396 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00287	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0028c	89 45 f4	 mov	 DWORD PTR _th$[ebp], eax
  0028f	eb 09		 jmp	 SHORT $LN4@P_DoZoomTu
$LN2@P_DoZoomTu:
  00291	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  00294	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00297	89 4d f4	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_DoZoomTu:
  0029a	81 7d f4 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  002a1	0f 84 87 00 00
	00		 je	 $LN3@P_DoZoomTu

; 8397 : 		{
; 8398 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker) // Not a mobj thinker

  002a7	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  002aa	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  002b1	74 02		 je	 SHORT $LN11@P_DoZoomTu

; 8399 : 				continue;

  002b3	eb dc		 jmp	 SHORT $LN2@P_DoZoomTu
$LN11@P_DoZoomTu:

; 8400 : 
; 8401 : 			mo2 = (mobj_t *)th;

  002b5	8b 45 f4	 mov	 eax, DWORD PTR _th$[ebp]
  002b8	89 45 f0	 mov	 DWORD PTR _mo2$[ebp], eax

; 8402 : 
; 8403 : 			if (mo2->type != MT_TUBEWAYPOINT)

  002bb	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  002be	81 78 7c 06 01
	00 00		 cmp	 DWORD PTR [eax+124], 262 ; 00000106H
  002c5	74 02		 je	 SHORT $LN12@P_DoZoomTu

; 8404 : 				continue;

  002c7	eb c8		 jmp	 SHORT $LN2@P_DoZoomTu
$LN12@P_DoZoomTu:

; 8405 : 
; 8406 : 			if (mo2->threshold == sequence)

  002c9	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  002cc	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  002d2	3b 4d fc	 cmp	 ecx, DWORD PTR _sequence$[ebp]
  002d5	75 52		 jne	 SHORT $LN14@P_DoZoomTu

; 8407 : 			{
; 8408 : 				if ((reverse && mo2->health == player->mo->tracer->health - 1)
; 8409 : 					|| (!reverse && mo2->health == player->mo->tracer->health + 1))

  002d7	83 7d e4 00	 cmp	 DWORD PTR _reverse$[ebp], 0
  002db	74 1f		 je	 SHORT $LN16@P_DoZoomTu
  002dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  002e8	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  002ee	83 e8 01	 sub	 eax, 1
  002f1	8b 4d f0	 mov	 ecx, DWORD PTR _mo2$[ebp]
  002f4	39 81 8c 00 00
	00		 cmp	 DWORD PTR [ecx+140], eax
  002fa	74 25		 je	 SHORT $LN15@P_DoZoomTu
$LN16@P_DoZoomTu:
  002fc	83 7d e4 00	 cmp	 DWORD PTR _reverse$[ebp], 0
  00300	75 27		 jne	 SHORT $LN14@P_DoZoomTu
  00302	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00305	8b 08		 mov	 ecx, DWORD PTR [eax]
  00307	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0030d	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00313	83 c0 01	 add	 eax, 1
  00316	8b 4d f0	 mov	 ecx, DWORD PTR _mo2$[ebp]
  00319	39 81 8c 00 00
	00		 cmp	 DWORD PTR [ecx+140], eax
  0031f	75 08		 jne	 SHORT $LN14@P_DoZoomTu
$LN15@P_DoZoomTu:

; 8410 : 				{
; 8411 : 					waypoint = mo2;

  00321	8b 45 f0	 mov	 eax, DWORD PTR _mo2$[ebp]
  00324	89 45 ec	 mov	 DWORD PTR _waypoint$[ebp], eax

; 8412 : 					break;

  00327	eb 05		 jmp	 SHORT $LN3@P_DoZoomTu
$LN14@P_DoZoomTu:

; 8413 : 				}
; 8414 : 			}
; 8415 : 		}

  00329	e9 63 ff ff ff	 jmp	 $LN2@P_DoZoomTu
$LN3@P_DoZoomTu:

; 8416 : 
; 8417 : 		if (waypoint)

  0032e	83 7d ec 00	 cmp	 DWORD PTR _waypoint$[ebp], 0
  00332	0f 84 e1 01 00
	00		 je	 $LN17@P_DoZoomTu

; 8418 : 		{
; 8419 : 			if (cv_debug)

  00338	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0033f	74 21		 je	 SHORT $LN19@P_DoZoomTu

; 8420 : 				CONS_Printf("Found waypoint (sequence %d, number %d).\n", waypoint->threshold, waypoint->health);

  00341	8b 45 ec	 mov	 eax, DWORD PTR _waypoint$[ebp]
  00344	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0034a	51		 push	 ecx
  0034b	8b 55 ec	 mov	 edx, DWORD PTR _waypoint$[ebp]
  0034e	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00354	50		 push	 eax
  00355	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@OOJOEGDC@Found?5waypoint?5?$CIsequence?5?$CFd?0?5nu@
  0035a	e8 00 00 00 00	 call	 _CONS_Printf
  0035f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@P_DoZoomTu:

; 8421 : 
; 8422 : 			// calculate MOMX/MOMY/MOMZ for next waypoint
; 8423 : 			// change angle
; 8424 : 			player->mo->angle = R_PointToAngle2(player->mo->x, player->mo->y, player->mo->tracer->x, player->mo->tracer->y);

  00362	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00365	8b 08		 mov	 ecx, DWORD PTR [eax]
  00367	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0036d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00370	50		 push	 eax
  00371	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00374	8b 11		 mov	 edx, DWORD PTR [ecx]
  00376	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0037c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0037f	51		 push	 ecx
  00380	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00383	8b 02		 mov	 eax, DWORD PTR [edx]
  00385	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00388	51		 push	 ecx
  00389	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0038c	8b 02		 mov	 eax, DWORD PTR [edx]
  0038e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00391	51		 push	 ecx
  00392	e8 00 00 00 00	 call	 _R_PointToAngle2
  00397	83 c4 10	 add	 esp, 16			; 00000010H
  0039a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0039d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0039f	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 8425 : 
; 8426 : 			if (player == &players[consoleplayer])

  003a2	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  003ac	05 00 00 00 00	 add	 eax, OFFSET _players
  003b1	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  003b4	75 10		 jne	 SHORT $LN20@P_DoZoomTu

; 8427 : 				localangle = player->mo->angle;

  003b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003bb	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  003be	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  003c4	eb 2b		 jmp	 SHORT $LN22@P_DoZoomTu
$LN20@P_DoZoomTu:

; 8428 : 			else if (splitscreen && player == &players[secondarydisplayplayer])

  003c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  003cd	74 22		 je	 SHORT $LN22@P_DoZoomTu
  003cf	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  003d9	05 00 00 00 00	 add	 eax, OFFSET _players
  003de	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  003e1	75 0e		 jne	 SHORT $LN22@P_DoZoomTu

; 8429 : 				localangle2 = player->mo->angle;

  003e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e8	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  003eb	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN22@P_DoZoomTu:

; 8430 : 
; 8431 : 			// change slope
; 8432 : 			dist = P_AproxDistance(P_AproxDistance(player->mo->tracer->x - player->mo->x, player->mo->tracer->y - player->mo->y), player->mo->tracer->z - player->mo->z);

  003f1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f6	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  003fc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00401	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00404	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  00407	52		 push	 edx
  00408	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0040b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0040d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00413	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00416	8b 08		 mov	 ecx, DWORD PTR [eax]
  00418	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0041b	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  0041e	52		 push	 edx
  0041f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00422	8b 08		 mov	 ecx, DWORD PTR [eax]
  00424	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0042a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0042d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042f	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00432	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00435	52		 push	 edx
  00436	e8 00 00 00 00	 call	 _P_AproxDistance
  0043b	83 c4 08	 add	 esp, 8
  0043e	50		 push	 eax
  0043f	e8 00 00 00 00	 call	 _P_AproxDistance
  00444	83 c4 08	 add	 esp, 8
  00447	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 8433 : 
; 8434 : 			if (dist < 1)

  0044a	83 7d e8 01	 cmp	 DWORD PTR _dist$[ebp], 1
  0044e	7d 07		 jge	 SHORT $LN23@P_DoZoomTu

; 8435 : 				dist = 1;

  00450	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN23@P_DoZoomTu:

; 8436 : 
; 8437 : 			player->mo->momx = FixedMul(FixedDiv(player->mo->tracer->x - player->mo->x, dist), (speed));

  00457	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  0045a	50		 push	 eax
  0045b	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  0045e	51		 push	 ecx
  0045f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00462	8b 02		 mov	 eax, DWORD PTR [edx]
  00464	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0046a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0046d	8b 02		 mov	 eax, DWORD PTR [edx]
  0046f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00472	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00475	51		 push	 ecx
  00476	e8 00 00 00 00	 call	 _FixedDiv
  0047b	83 c4 08	 add	 esp, 8
  0047e	50		 push	 eax
  0047f	e8 00 00 00 00	 call	 _FixedMul
  00484	83 c4 08	 add	 esp, 8
  00487	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0048a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0048c	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 8438 : 			player->mo->momy = FixedMul(FixedDiv(player->mo->tracer->y - player->mo->y, dist), (speed));

  0048f	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  00492	50		 push	 eax
  00493	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  00496	51		 push	 ecx
  00497	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0049a	8b 02		 mov	 eax, DWORD PTR [edx]
  0049c	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  004a2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004a5	8b 02		 mov	 eax, DWORD PTR [edx]
  004a7	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  004aa	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  004ad	51		 push	 ecx
  004ae	e8 00 00 00 00	 call	 _FixedDiv
  004b3	83 c4 08	 add	 esp, 8
  004b6	50		 push	 eax
  004b7	e8 00 00 00 00	 call	 _FixedMul
  004bc	83 c4 08	 add	 esp, 8
  004bf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004c2	8b 0a		 mov	 ecx, DWORD PTR [edx]
  004c4	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 8439 : 			player->mo->momz = FixedMul(FixedDiv(player->mo->tracer->z - player->mo->z, dist), (speed));

  004c7	8b 45 f8	 mov	 eax, DWORD PTR _speed$[ebp]
  004ca	50		 push	 eax
  004cb	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  004ce	51		 push	 ecx
  004cf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004d2	8b 02		 mov	 eax, DWORD PTR [edx]
  004d4	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  004da	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004dd	8b 02		 mov	 eax, DWORD PTR [edx]
  004df	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  004e2	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  004e5	51		 push	 ecx
  004e6	e8 00 00 00 00	 call	 _FixedDiv
  004eb	83 c4 08	 add	 esp, 8
  004ee	50		 push	 eax
  004ef	e8 00 00 00 00	 call	 _FixedMul
  004f4	83 c4 08	 add	 esp, 8
  004f7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004fa	8b 0a		 mov	 ecx, DWORD PTR [edx]
  004fc	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 8440 : 
; 8441 : 			P_SetTarget(&player->mo->tracer, waypoint);

  004ff	8b 45 ec	 mov	 eax, DWORD PTR _waypoint$[ebp]
  00502	50		 push	 eax
  00503	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00506	8b 11		 mov	 edx, DWORD PTR [ecx]
  00508	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  0050e	52		 push	 edx
  0050f	e8 00 00 00 00	 call	 _P_SetTarget
  00514	83 c4 08	 add	 esp, 8

; 8442 : 		}

  00517	eb 2c		 jmp	 SHORT $LN24@P_DoZoomTu
$LN17@P_DoZoomTu:

; 8443 : 		else
; 8444 : 		{
; 8445 : 			P_SetTarget(&player->mo->tracer, NULL); // Else, we just let him fly.

  00519	6a 00		 push	 0
  0051b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0051e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00520	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00526	51		 push	 ecx
  00527	e8 00 00 00 00	 call	 _P_SetTarget
  0052c	83 c4 08	 add	 esp, 8

; 8446 : 
; 8447 : 			if (cv_debug)

  0052f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00536	74 0d		 je	 SHORT $LN24@P_DoZoomTu

; 8448 : 				CONS_Printf("Next waypoint not found, releasing from track...\n");

  00538	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HMALHLBL@Next?5waypoint?5not?5found?0?5releas@
  0053d	e8 00 00 00 00	 call	 _CONS_Printf
  00542	83 c4 04	 add	 esp, 4
$LN24@P_DoZoomTu:

; 8449 : 		}
; 8450 : 	}

  00545	eb 21		 jmp	 SHORT $LN9@P_DoZoomTu
$LN8@P_DoZoomTu:

; 8451 : 	else
; 8452 : 	{
; 8453 : 		player->mo->momx = speedx;

  00547	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0054a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0054c	8b 55 e0	 mov	 edx, DWORD PTR _speedx$[ebp]
  0054f	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 8454 : 		player->mo->momy = speedy;

  00552	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00555	8b 08		 mov	 ecx, DWORD PTR [eax]
  00557	8b 55 dc	 mov	 edx, DWORD PTR _speedy$[ebp]
  0055a	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 8455 : 		player->mo->momz = speedz;

  0055d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00560	8b 08		 mov	 ecx, DWORD PTR [eax]
  00562	8b 55 d8	 mov	 edx, DWORD PTR _speedz$[ebp]
  00565	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN9@P_DoZoomTu:

; 8456 : 	}
; 8457 : 
; 8458 : 	// change angle
; 8459 : 	if (player->mo->tracer)

  00568	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0056b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0056d	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00574	0f 84 8f 00 00
	00		 je	 $LN28@P_DoZoomTu

; 8460 : 	{
; 8461 : 		player->mo->angle = R_PointToAngle2(player->mo->x, player->mo->y, player->mo->tracer->x, player->mo->tracer->y);

  0057a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0057d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0057f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00585	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00588	50		 push	 eax
  00589	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0058c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0058e	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00594	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00597	51		 push	 ecx
  00598	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0059b	8b 02		 mov	 eax, DWORD PTR [edx]
  0059d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005a0	51		 push	 ecx
  005a1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005a4	8b 02		 mov	 eax, DWORD PTR [edx]
  005a6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  005a9	51		 push	 ecx
  005aa	e8 00 00 00 00	 call	 _R_PointToAngle2
  005af	83 c4 10	 add	 esp, 16			; 00000010H
  005b2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005b5	8b 0a		 mov	 ecx, DWORD PTR [edx]
  005b7	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 8462 : 
; 8463 : 		if (player == &players[consoleplayer])

  005ba	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  005c4	05 00 00 00 00	 add	 eax, OFFSET _players
  005c9	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  005cc	75 10		 jne	 SHORT $LN26@P_DoZoomTu

; 8464 : 			localangle = player->mo->angle;

  005ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d3	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  005d6	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  005dc	eb 2b		 jmp	 SHORT $LN28@P_DoZoomTu
$LN26@P_DoZoomTu:

; 8465 : 		else if (splitscreen && player == &players[secondarydisplayplayer])

  005de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  005e5	74 22		 je	 SHORT $LN28@P_DoZoomTu
  005e7	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  005f1	05 00 00 00 00	 add	 eax, OFFSET _players
  005f6	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  005f9	75 0e		 jne	 SHORT $LN28@P_DoZoomTu

; 8466 : 			localangle2 = player->mo->angle;

  005fb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  00600	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00603	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN28@P_DoZoomTu:

; 8467 : 	}
; 8468 : }

  00609	5f		 pop	 edi
  0060a	5e		 pop	 esi
  0060b	5b		 pop	 ebx
  0060c	8b e5		 mov	 esp, ebp
  0060e	5d		 pop	 ebp
  0060f	c3		 ret	 0
_P_DoZoomTube ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_MovePlayer
_TEXT	SEGMENT
tv396 = -848						; size = 4
tv2697 = -848						; size = 4
tv2636 = -848						; size = 4
tv2578 = -848						; size = 4
tv1175 = -848						; size = 4
tv3833 = -848						; size = 4
tv2509 = -848						; size = 4
tv5419 = -848						; size = 4
tv242 = -848						; size = 4
tv3436 = -848						; size = 4
tv2755 = -848						; size = 4
_friction$1 = -716					; size = 4
_sinkspeed$2 = -712					; size = 4
_rover$3 = -708						; size = 4
_newmom$4 = -704					; size = 4
_linedist$5 = -700					; size = 4
_top$6 = -696						; size = 4
_rover$7 = -692						; size = 4
_oldz$8 = -688						; size = 4
_oldy$9 = -684						; size = 4
_oldx$10 = -680						; size = 4
_rover$11 = -676					; size = 4
_oldy$12 = -672						; size = 4
_oldx$13 = -668						; size = 4
_rover$14 = -664					; size = 4
_oldy$15 = -660						; size = 4
_oldx$16 = -656						; size = 4
_runnyspeed$17 = -652					; size = 4
_speed$18 = -648					; size = 4
_killer$19 = -644					; size = 4
_oldaim$20 = -640					; size = 4
_mo$21 = -636						; size = 4
_nblockmap$22 = -632					; size = 4
_oldaiming$23 = -628					; size = 4
_shotangle$24 = -624					; size = 4
_oldz$25 = -620						; size = 4
_mo$26 = -616						; size = 4
_mo$27 = -612						; size = 4
_polybottom$28 = -608					; size = 4
_polytop$29 = -604					; size = 4
_polysec$30 = -600					; size = 4
_po$31 = -596						; size = 4
_plink$32 = -592					; size = 4
_offset$33 = -588					; size = 4
_yh$34 = -584						; size = 4
_yl$35 = -580						; size = 4
_xh$36 = -576						; size = 4
_xl$37 = -572						; size = 4
_by$38 = -568						; size = 4
_bx$39 = -564						; size = 4
_rover$40 = -560					; size = 4
_rover$41 = -556					; size = 4
_rover$42 = -552					; size = 4
_rover$43 = -548					; size = 4
_d$44 = -544						; size = 4
_c$45 = -540						; size = 4
_b$46 = -536						; size = 4
_a$47 = -532						; size = 4
_rover$48 = -528					; size = 4
_tiptop$49 = -524					; size = 4
_checkedforteeter$50 = -520				; size = 4
_roverfloor$51 = -516					; size = 4
_teeter$52 = -512					; size = 4
_sideangle$53 = -508					; size = 4
_scroller$54 = -504					; size = 4
_think$55 = -500					; size = 4
_rover$56 = -496					; size = 4
_foundfof$57 = -492					; size = 4
_rover$58 = -488					; size = 4
_foundfof$59 = -484					; size = 4
_foundfof$60 = -480					; size = 4
_roverbelow$61 = -476					; size = 4
_foundfof$62 = -472					; size = 4
_roverbelow$63 = -468					; size = 4
_rover$64 = -464					; size = 4
_skyclimber$65 = -460					; size = 4
_boostup$66 = -456					; size = 4
_thrust$67 = -452					; size = 4
_floorclimb$68 = -448					; size = 4
_climb$69 = -444					; size = 4
_glidesector$70 = -440					; size = 4
_platy$71 = -436					; size = 4
_platx$72 = -432					; size = 4
_item$73 = -428						; size = 4
_travelangle$74 = -424					; size = 4
_flame$75 = -420					; size = 4
_ground$76 = -416					; size = 4
_newy$77 = -412						; size = 4
_newx$78 = -408						; size = 4
_item$79 = -404						; size = 4
_viewingangle$80 = -400					; size = 4
_sparkle$81 = -396					; size = 4
_desty$82 = -392					; size = 4
_destx$83 = -388					; size = 4
_actionspd$84 = -384					; size = 4
_bubble$85 = -380					; size = 4
_stirwaterz$86 = -376					; size = 4
_stirwatery$87 = -372					; size = 4
_stirwaterx$88 = -368					; size = 4
_fa$89 = -364						; size = 4
_radius$90 = -360					; size = 4
_zh$91 = -356						; size = 4
_water$92 = -352					; size = 4
_leeway$93 = -348					; size = 4
_speed$94 = -344					; size = 4
_z$95 = -340						; size = 4
_z$96 = -336						; size = 4
_mo2$97 = -332						; size = 4
_th$98 = -328						; size = 4
_z$99 = -324						; size = 4
_y$100 = -320						; size = 4
_x$101 = -316						; size = 4
_mo2$102 = -312						; size = 4
_th$103 = -308						; size = 4
_bluearray$104 = -304					; size = 128
_redarray$105 = -176					; size = 128
_blue$106 = -48						; size = 4
_red$107 = -44						; size = 4
_changeto$108 = -40					; size = 4
_runspd$ = -36						; size = 4
_thiscam$ = -32						; size = 4
_node$ = -28						; size = 4
_tempangle$ = -24					; size = 4
_tempy$ = -20						; size = 4
_tempx$ = -16						; size = 4
_i$ = -12						; size = 4
_cmd$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_player$ = 8						; size = 4
_P_MovePlayer PROC					; COMDAT

; 5472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 03 00
	00		 sub	 esp, 848		; 00000350H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 5473 : 	ticcmd_t *cmd;
; 5474 : 	INT32 i;
; 5475 : 
; 5476 : 	fixed_t tempx, tempy;
; 5477 : 	angle_t tempangle;
; 5478 : 	msecnode_t *node;
; 5479 : 	camera_t *thiscam;
; 5480 : 	fixed_t runspd;
; 5481 : 
; 5482 : 	if (countdowntimeup)

  00016	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _countdowntimeup
  0001d	85 c0		 test	 eax, eax
  0001f	74 05		 je	 SHORT $LN111@P_MovePlay

; 5483 : 		return;

  00021	e9 7f 87 00 00	 jmp	 $LN109@P_MovePlay
$LN111@P_MovePlay:

; 5484 : 
; 5485 : 	if (splitscreen && player == &players[secondarydisplayplayer])

  00026	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0002d	74 1d		 je	 SHORT $LN112@P_MovePlay
  0002f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00039	05 00 00 00 00	 add	 eax, OFFSET _players
  0003e	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00041	75 09		 jne	 SHORT $LN112@P_MovePlay

; 5486 : 		thiscam = &camera2;

  00043	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  0004a	eb 07		 jmp	 SHORT $LN113@P_MovePlay
$LN112@P_MovePlay:

; 5487 : 	else
; 5488 : 		thiscam = &camera;

  0004c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _thiscam$[ebp], OFFSET _camera
$LN113@P_MovePlay:

; 5489 : 
; 5490 : 	if (player->mo->state >= &states[S_PLAY_SUPERTRANS1] && player->mo->state <= &states[S_PLAY_SUPERTRANS9])

  00053	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0005d	6b c2 31	 imul	 eax, edx, 49
  00060	05 00 00 00 00	 add	 eax, OFFSET _states
  00065	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00068	72 58		 jb	 SHORT $LN114@P_MovePlay
  0006a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  00074	6b c2 39	 imul	 eax, edx, 57
  00077	05 00 00 00 00	 add	 eax, OFFSET _states
  0007c	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0007f	77 41		 ja	 SHORT $LN114@P_MovePlay

; 5491 : 	{
; 5492 : 		P_CheckSneakerAndLivesTimer(player);

  00081	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _P_CheckSneakerAndLivesTimer
  0008a	83 c4 04	 add	 esp, 4

; 5493 : 		P_CheckUnderwaterAndSpaceTimer(player);

  0008d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _P_CheckUnderwaterAndSpaceTimer
  00096	83 c4 04	 add	 esp, 4

; 5494 : 		player->mo->momx = player->mo->momy = player->mo->momz = 0;

  00099	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  000a5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000a8	8b 02		 mov	 eax, DWORD PTR [edx]
  000aa	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b6	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 5495 : 		return;

  000bd	e9 e3 86 00 00	 jmp	 $LN109@P_MovePlay
$LN114@P_MovePlay:

; 5496 : 	}
; 5497 : 
; 5498 : 	cmd = &player->cmd;

  000c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c5	83 c0 08	 add	 eax, 8
  000c8	89 45 f8	 mov	 DWORD PTR _cmd$[ebp], eax

; 5499 : 	runspd = player->runspeed;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ce	8b 88 c8 00 00
	00		 mov	 ecx, DWORD PTR [eax+200]
  000d4	89 4d dc	 mov	 DWORD PTR _runspd$[ebp], ecx

; 5500 : 
; 5501 : 	// Synchronizes the "real" amount of time spent in the level.
; 5502 : 	if (!player->exiting)

  000d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000da	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  000e1	75 4b		 jne	 SHORT $LN117@P_MovePlay

; 5503 : 	{
; 5504 : 		if (gametype == GT_RACE)

  000e3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000ea	83 f8 02	 cmp	 eax, 2
  000ed	75 30		 jne	 SHORT $LN116@P_MovePlay

; 5505 : 		{
; 5506 : 			if (leveltime >= 4*TICRATE)

  000ef	81 3d 00 00 00
	00 8c 00 00 00	 cmp	 DWORD PTR _leveltime, 140 ; 0000008cH
  000f9	72 15		 jb	 SHORT $LN118@P_MovePlay

; 5507 : 				player->realtime = leveltime - 4*TICRATE;

  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00100	2d 8c 00 00 00	 sub	 eax, 140		; 0000008cH
  00105	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00108	89 81 54 01 00
	00		 mov	 DWORD PTR [ecx+340], eax
  0010e	eb 0d		 jmp	 SHORT $LN119@P_MovePlay
$LN118@P_MovePlay:

; 5508 : 			else
; 5509 : 				player->realtime = 0;

  00110	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00113	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0
$LN119@P_MovePlay:

; 5510 : 		}

  0011d	eb 0f		 jmp	 SHORT $LN117@P_MovePlay
$LN116@P_MovePlay:

; 5511 : 		else
; 5512 : 			player->realtime = leveltime;

  0011f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  00128	89 88 54 01 00
	00		 mov	 DWORD PTR [eax+340], ecx
$LN117@P_MovePlay:

; 5513 : 	}
; 5514 : 
; 5515 : 	//Only allow this style of joining the game in normal match and tag.
; 5516 : 	//CTF and team match spectators have to join the game in another method.
; 5517 : 	if ((netgame || splitscreen) && player->spectator && (cmd->buttons & BT_ATTACK) && !player->powers[pw_flashing] &&

  0012e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00135	75 0d		 jne	 SHORT $LN121@P_MovePlay
  00137	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0013e	0f 84 f1 01 00
	00		 je	 $LN125@P_MovePlay
$LN121@P_MovePlay:
  00144	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00147	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  0014e	85 c9		 test	 ecx, ecx
  00150	0f 84 df 01 00
	00		 je	 $LN125@P_MovePlay
  00156	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  00159	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0015d	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00163	0f 84 cc 01 00
	00		 je	 $LN125@P_MovePlay
  00169	b8 04 00 00 00	 mov	 eax, 4
  0016e	d1 e0		 shl	 eax, 1
  00170	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00173	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00178	0f 85 b7 01 00
	00		 jne	 $LN125@P_MovePlay
  0017e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00185	83 f8 01	 cmp	 eax, 1
  00188	75 09		 jne	 SHORT $LN123@P_MovePlay
  0018a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00191	74 10		 je	 SHORT $LN122@P_MovePlay
$LN123@P_MovePlay:
  00193	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0019a	83 f8 03	 cmp	 eax, 3
  0019d	0f 85 92 01 00
	00		 jne	 $LN125@P_MovePlay
$LN122@P_MovePlay:

; 5518 : 		((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG))
; 5519 : 	{
; 5520 : 		if (cv_allowteamchange.value)

  001a3	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowteamchange+20, 0
  001aa	0f 84 59 01 00
	00		 je	 $LN124@P_MovePlay

; 5521 : 		{
; 5522 : 			// Exception for hide and seek. Don't join a game when you simply
; 5523 : 			// respawn in place and sit there for the rest of the round.
; 5524 : 			if (!(gametype == GT_TAG && cv_tagtype.value && leveltime > (hidetime * TICRATE)))

  001b0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001b7	83 f8 03	 cmp	 eax, 3
  001ba	75 1c		 jne	 SHORT $LN128@P_MovePlay
  001bc	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  001c3	74 13		 je	 SHORT $LN128@P_MovePlay
  001c5	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  001cc	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  001d2	0f 87 f3 00 00
	00		 ja	 $LN126@P_MovePlay
$LN128@P_MovePlay:

; 5525 : 			{
; 5526 : 				player->lives++;

  001d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001db	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  001e1	83 c1 01	 add	 ecx, 1
  001e4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001e7	89 8a 00 01 00
	00		 mov	 DWORD PTR [edx+256], ecx

; 5527 : 				P_DamageMobj(player->mo, NULL, NULL, 42000);

  001ed	68 10 a4 00 00	 push	 42000			; 0000a410H
  001f2	6a 00		 push	 0
  001f4	6a 00		 push	 0
  001f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fb	51		 push	 ecx
  001fc	e8 00 00 00 00	 call	 _P_DamageMobj
  00201	83 c4 10	 add	 esp, 16			; 00000010H

; 5528 : 				player->spectator = false;

  00204	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00207	c6 80 f0 01 00
	00 00		 mov	 BYTE PTR [eax+496], 0

; 5529 : 
; 5530 : 				if (gametype == GT_TAG)

  0020e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00215	83 f8 03	 cmp	 eax, 3
  00218	75 54		 jne	 SHORT $LN129@P_MovePlay

; 5531 : 				{
; 5532 : 					//Make joining players "it" after hidetime.
; 5533 : 					if (leveltime > (hidetime * TICRATE))

  0021a	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  00221	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  00227	76 3f		 jbe	 SHORT $LN130@P_MovePlay

; 5534 : 					{
; 5535 : 						CONS_Printf("%s is it!\n", player_names[player-players]); // Tell everyone who is it!

  00229	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0022c	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00231	99		 cdq
  00232	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00237	f7 f9		 idiv	 ecx
  00239	6b d0 16	 imul	 edx, eax, 22
  0023c	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00242	52		 push	 edx
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@
  00248	e8 00 00 00 00	 call	 _CONS_Printf
  0024d	83 c4 08	 add	 esp, 8

; 5536 : 						player->pflags |= PF_TAGIT;

  00250	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00253	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00259	81 c9 00 00 00
	10		 or	 ecx, 268435456		; 10000000H
  0025f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00262	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN130@P_MovePlay:

; 5537 : 					}
; 5538 : 
; 5539 : 					P_CheckSurvivors();

  00268	e8 00 00 00 00	 call	 _P_CheckSurvivors
  0026d	90		 npad	 1
$LN129@P_MovePlay:

; 5540 : 				}
; 5541 : 
; 5542 : 				//Reset away view
; 5543 : 				if (P_IsLocalPlayer(player) && displayplayer != consoleplayer)

  0026e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  00277	83 c4 04	 add	 esp, 4
  0027a	85 c0		 test	 eax, eax
  0027c	74 17		 je	 SHORT $LN131@P_MovePlay
  0027e	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  00283	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00289	74 0a		 je	 SHORT $LN131@P_MovePlay

; 5544 : 					displayplayer = consoleplayer;

  0028b	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  00290	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax
$LN131@P_MovePlay:

; 5545 : 
; 5546 : 				CONS_Printf(text[INGAME_SWITCH], player_names[player-players]);

  00295	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00298	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0029d	99		 cdq
  0029e	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  002a3	f7 f9		 idiv	 ecx
  002a5	6b d0 16	 imul	 edx, eax, 22
  002a8	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  002ae	52		 push	 edx
  002af	b8 04 00 00 00	 mov	 eax, 4
  002b4	69 c8 8c 00 00
	00		 imul	 ecx, eax, 140
  002ba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002c0	52		 push	 edx
  002c1	e8 00 00 00 00	 call	 _CONS_Printf
  002c6	83 c4 08	 add	 esp, 8

; 5547 : 			}

  002c9	eb 3c		 jmp	 SHORT $LN127@P_MovePlay
$LN126@P_MovePlay:

; 5548 : 			else
; 5549 : 			{
; 5550 : 				if (P_IsLocalPlayer(player))

  002cb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  002d4	83 c4 04	 add	 esp, 4
  002d7	85 c0		 test	 eax, eax
  002d9	74 0d		 je	 SHORT $LN132@P_MovePlay

; 5551 : 					CONS_Printf("You must wait until next round to enter the game.\n");

  002db	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@DEDIIPMB@You?5must?5wait?5until?5next?5round?5@
  002e0	e8 00 00 00 00	 call	 _CONS_Printf
  002e5	83 c4 04	 add	 esp, 4
$LN132@P_MovePlay:

; 5552 : 				player->powers[pw_flashing] += 2*TICRATE; //to prevent message spam.

  002e8	b8 04 00 00 00	 mov	 eax, 4
  002ed	d1 e0		 shl	 eax, 1
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002f2	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  002f6	83 c2 46	 add	 edx, 70			; 00000046H
  002f9	b8 04 00 00 00	 mov	 eax, 4
  002fe	d1 e0		 shl	 eax, 1
  00300	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00303	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN127@P_MovePlay:

; 5553 : 			}
; 5554 : 		}

  00307	eb 2c		 jmp	 SHORT $LN125@P_MovePlay
$LN124@P_MovePlay:

; 5555 : 		else
; 5556 : 		{
; 5557 : 			CONS_Printf("Server does not allow team change.\n");

  00309	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@GFKDEHPF@Server?5does?5not?5allow?5team?5chan@
  0030e	e8 00 00 00 00	 call	 _CONS_Printf
  00313	83 c4 04	 add	 esp, 4

; 5558 : 			player->powers[pw_flashing] += 2*TICRATE; //to prevent message spam.

  00316	b8 04 00 00 00	 mov	 eax, 4
  0031b	d1 e0		 shl	 eax, 1
  0031d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00320	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00324	83 c2 46	 add	 edx, 70			; 00000046H
  00327	b8 04 00 00 00	 mov	 eax, 4
  0032c	d1 e0		 shl	 eax, 1
  0032e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00331	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN125@P_MovePlay:

; 5559 : 		}
; 5560 : 	}
; 5561 : 
; 5562 : 	// Team changing in Team Match and CTF
; 5563 : 	// Pressing fire assigns you to a team that needs players if allowed.
; 5564 : 	// Partial code reproduction from p_tick.c autobalance code.
; 5565 : 	if ((netgame || splitscreen) && player->spectator && (cmd->buttons & BT_ATTACK) && !player->powers[pw_flashing] &&

  00335	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0033c	75 0d		 jne	 SHORT $LN134@P_MovePlay
  0033e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00345	0f 84 a7 02 00
	00		 je	 $LN138@P_MovePlay
$LN134@P_MovePlay:
  0034b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0034e	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00355	85 c9		 test	 ecx, ecx
  00357	0f 84 95 02 00
	00		 je	 $LN138@P_MovePlay
  0035d	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  00360	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00364	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0036a	0f 84 82 02 00
	00		 je	 $LN138@P_MovePlay
  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	d1 e0		 shl	 eax, 1
  00377	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0037a	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0037f	0f 85 6d 02 00
	00		 jne	 $LN138@P_MovePlay
  00385	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0038c	83 f8 01	 cmp	 eax, 1
  0038f	75 09		 jne	 SHORT $LN136@P_MovePlay
  00391	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00398	75 10		 jne	 SHORT $LN135@P_MovePlay
$LN136@P_MovePlay:
  0039a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003a1	83 f8 04	 cmp	 eax, 4
  003a4	0f 85 48 02 00
	00		 jne	 $LN138@P_MovePlay
$LN135@P_MovePlay:

; 5566 : 		((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF))
; 5567 : 	{
; 5568 : 		if (cv_allowteamchange.value)

  003aa	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowteamchange+20, 0
  003b1	0f 84 0f 02 00
	00		 je	 $LN137@P_MovePlay

; 5569 : 		{
; 5570 : 			INT32 changeto;
; 5571 : 			INT32 red, blue;
; 5572 : 			INT32 redarray[MAXPLAYERS], bluearray[MAXPLAYERS];
; 5573 : 
; 5574 : 			red = blue = changeto = 0;

  003b7	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _changeto$108[ebp], 0
  003be	8b 45 d8	 mov	 eax, DWORD PTR _changeto$108[ebp]
  003c1	89 45 d0	 mov	 DWORD PTR _blue$106[ebp], eax
  003c4	8b 4d d0	 mov	 ecx, DWORD PTR _blue$106[ebp]
  003c7	89 4d d4	 mov	 DWORD PTR _red$107[ebp], ecx

; 5575 : 
; 5576 : 			//We have to store the players in an array with the rest of their team.
; 5577 : 			//We can then pick which team the player will be assigned to.
; 5578 : 			for (i = 0; i < MAXPLAYERS; i++)

  003ca	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003d1	eb 09		 jmp	 SHORT $LN4@P_MovePlay
$LN2@P_MovePlay:
  003d3	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  003d6	83 c0 01	 add	 eax, 1
  003d9	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_MovePlay:
  003dc	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  003e0	7d 1e		 jge	 SHORT $LN3@P_MovePlay

; 5579 : 			{
; 5580 : 				redarray[i] = 0;

  003e2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  003e5	c7 84 85 50 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _redarray$105[ebp+eax*4], 0

; 5581 : 				bluearray[i] = 0;

  003f0	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  003f3	c7 84 85 d0 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _bluearray$104[ebp+eax*4], 0

; 5582 : 			}

  003fe	eb d3		 jmp	 SHORT $LN2@P_MovePlay
$LN3@P_MovePlay:

; 5583 : 
; 5584 : 			for (i = 0; i < MAXPLAYERS; i++)

  00400	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00407	eb 09		 jmp	 SHORT $LN7@P_MovePlay
$LN5@P_MovePlay:
  00409	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0040c	83 c0 01	 add	 eax, 1
  0040f	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN7@P_MovePlay:
  00412	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00416	7d 66		 jge	 SHORT $LN6@P_MovePlay

; 5585 : 			{
; 5586 : 				if (playeringame[i])

  00418	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0041b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00423	74 57		 je	 SHORT $LN8@P_MovePlay

; 5587 : 				{
; 5588 : 					switch (players[i].ctfteam)

  00425	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0042c	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+352]
  00432	89 8d b0 fc ff
	ff		 mov	 DWORD PTR tv242[ebp], ecx
  00438	83 bd b0 fc ff
	ff 01		 cmp	 DWORD PTR tv242[ebp], 1
  0043f	74 0d		 je	 SHORT $LN141@P_MovePlay
  00441	83 bd b0 fc ff
	ff 02		 cmp	 DWORD PTR tv242[ebp], 2
  00448	74 1c		 je	 SHORT $LN142@P_MovePlay
  0044a	eb 30		 jmp	 SHORT $LN8@P_MovePlay

; 5589 : 					{
; 5590 : 					case 0:
; 5591 : 						break;

  0044c	eb 2e		 jmp	 SHORT $LN8@P_MovePlay
$LN141@P_MovePlay:

; 5592 : 					case 1:
; 5593 : 						redarray[red] = i; //store the player's node.

  0044e	8b 45 d4	 mov	 eax, DWORD PTR _red$107[ebp]
  00451	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00454	89 8c 85 50 ff
	ff ff		 mov	 DWORD PTR _redarray$105[ebp+eax*4], ecx

; 5594 : 						red++;

  0045b	8b 45 d4	 mov	 eax, DWORD PTR _red$107[ebp]
  0045e	83 c0 01	 add	 eax, 1
  00461	89 45 d4	 mov	 DWORD PTR _red$107[ebp], eax

; 5595 : 						break;

  00464	eb 16		 jmp	 SHORT $LN8@P_MovePlay
$LN142@P_MovePlay:

; 5596 : 					case 2:
; 5597 : 						bluearray[blue] = i; //store the player's node.

  00466	8b 45 d0	 mov	 eax, DWORD PTR _blue$106[ebp]
  00469	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0046c	89 8c 85 d0 fe
	ff ff		 mov	 DWORD PTR _bluearray$104[ebp+eax*4], ecx

; 5598 : 						blue++;

  00473	8b 45 d0	 mov	 eax, DWORD PTR _blue$106[ebp]
  00476	83 c0 01	 add	 eax, 1
  00479	89 45 d0	 mov	 DWORD PTR _blue$106[ebp], eax
$LN8@P_MovePlay:

; 5599 : 						break;
; 5600 : 					}
; 5601 : 				}
; 5602 : 			}

  0047c	eb 8b		 jmp	 SHORT $LN5@P_MovePlay
$LN6@P_MovePlay:

; 5603 : 
; 5604 : 			//find a team by players, then by score, or random if all else fails.
; 5605 : 			if (blue > red)

  0047e	8b 45 d0	 mov	 eax, DWORD PTR _blue$106[ebp]
  00481	3b 45 d4	 cmp	 eax, DWORD PTR _red$107[ebp]
  00484	7e 09		 jle	 SHORT $LN143@P_MovePlay

; 5606 : 				changeto = 1;

  00486	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _changeto$108[ebp], 1
  0048d	eb 57		 jmp	 SHORT $LN150@P_MovePlay
$LN143@P_MovePlay:

; 5607 : 			else if (red > blue)

  0048f	8b 45 d4	 mov	 eax, DWORD PTR _red$107[ebp]
  00492	3b 45 d0	 cmp	 eax, DWORD PTR _blue$106[ebp]
  00495	7e 09		 jle	 SHORT $LN145@P_MovePlay

; 5608 : 				changeto = 2;

  00497	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR _changeto$108[ebp], 2
  0049e	eb 46		 jmp	 SHORT $LN150@P_MovePlay
$LN145@P_MovePlay:

; 5609 : 			else if (bluescore > redscore)

  004a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _bluescore
  004a5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _redscore
  004ab	76 09		 jbe	 SHORT $LN147@P_MovePlay

; 5610 : 				changeto = 1;

  004ad	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _changeto$108[ebp], 1
  004b4	eb 30		 jmp	 SHORT $LN150@P_MovePlay
$LN147@P_MovePlay:

; 5611 : 			else if (redscore > bluescore)

  004b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _redscore
  004bb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _bluescore
  004c1	76 09		 jbe	 SHORT $LN149@P_MovePlay

; 5612 : 				changeto = 2;

  004c3	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR _changeto$108[ebp], 2
  004ca	eb 1a		 jmp	 SHORT $LN150@P_MovePlay
$LN149@P_MovePlay:

; 5613 : 			else
; 5614 : 				changeto = (P_Random() % 2) + 1;

  004cc	e8 00 00 00 00	 call	 _P_Random
  004d1	0f b6 c0	 movzx	 eax, al
  004d4	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  004d9	79 05		 jns	 SHORT $LN828@P_MovePlay
  004db	48		 dec	 eax
  004dc	83 c8 fe	 or	 eax, -2			; fffffffeH
  004df	40		 inc	 eax
$LN828@P_MovePlay:
  004e0	83 c0 01	 add	 eax, 1
  004e3	89 45 d8	 mov	 DWORD PTR _changeto$108[ebp], eax
$LN150@P_MovePlay:

; 5615 : 
; 5616 : 			//assign the player
; 5617 : 			player->lives++;

  004e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004e9	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  004ef	83 c1 01	 add	 ecx, 1
  004f2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004f5	89 8a 00 01 00
	00		 mov	 DWORD PTR [edx+256], ecx

; 5618 : 			P_DamageMobj(player->mo, NULL, NULL, 42000);

  004fb	68 10 a4 00 00	 push	 42000			; 0000a410H
  00500	6a 00		 push	 0
  00502	6a 00		 push	 0
  00504	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00507	8b 08		 mov	 ecx, DWORD PTR [eax]
  00509	51		 push	 ecx
  0050a	e8 00 00 00 00	 call	 _P_DamageMobj
  0050f	83 c4 10	 add	 esp, 16			; 00000010H

; 5619 : 			player->spectator = false;

  00512	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00515	c6 80 f0 01 00
	00 00		 mov	 BYTE PTR [eax+496], 0

; 5620 : 
; 5621 : 			if (changeto == 1)

  0051c	83 7d d8 01	 cmp	 DWORD PTR _changeto$108[ebp], 1
  00520	75 4f		 jne	 SHORT $LN151@P_MovePlay

; 5622 : 			{
; 5623 : 				if (player == &players[consoleplayer])

  00522	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0052c	05 00 00 00 00	 add	 eax, OFFSET _players
  00531	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00534	75 0f		 jne	 SHORT $LN153@P_MovePlay

; 5624 : 				{
; 5625 : 					COM_ImmedExecute("changeteam red");

  00536	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HLFJDFHH@changeteam?5red@
  0053b	e8 00 00 00 00	 call	 _COM_ImmedExecute
  00540	83 c4 04	 add	 esp, 4

; 5626 : 				}

  00543	eb 2a		 jmp	 SHORT $LN155@P_MovePlay
$LN153@P_MovePlay:

; 5627 : 				else if (splitscreen && player == &players[secondarydisplayplayer])

  00545	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0054c	74 21		 je	 SHORT $LN155@P_MovePlay
  0054e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00558	05 00 00 00 00	 add	 eax, OFFSET _players
  0055d	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00560	75 0d		 jne	 SHORT $LN155@P_MovePlay

; 5628 : 				{
; 5629 : 					COM_ImmedExecute("changeteam2 red");

  00562	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PEKCJCD@changeteam2?5red@
  00567	e8 00 00 00 00	 call	 _COM_ImmedExecute
  0056c	83 c4 04	 add	 esp, 4
$LN155@P_MovePlay:

; 5630 : 				}
; 5631 : 			}

  0056f	eb 53		 jmp	 SHORT $LN159@P_MovePlay
$LN151@P_MovePlay:

; 5632 : 			else if (changeto == 2)

  00571	83 7d d8 02	 cmp	 DWORD PTR _changeto$108[ebp], 2
  00575	75 4d		 jne	 SHORT $LN159@P_MovePlay

; 5633 : 			{
; 5634 : 				if (player == &players[consoleplayer])

  00577	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00581	05 00 00 00 00	 add	 eax, OFFSET _players
  00586	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00589	75 0f		 jne	 SHORT $LN157@P_MovePlay

; 5635 : 				{
; 5636 : 					COM_ImmedExecute("changeteam blue");

  0058b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NGJMDDAH@changeteam?5blue@
  00590	e8 00 00 00 00	 call	 _COM_ImmedExecute
  00595	83 c4 04	 add	 esp, 4

; 5637 : 				}

  00598	eb 2a		 jmp	 SHORT $LN159@P_MovePlay
$LN157@P_MovePlay:

; 5638 : 				else if (splitscreen && player == &players[secondarydisplayplayer])

  0059a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  005a1	74 21		 je	 SHORT $LN159@P_MovePlay
  005a3	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  005ad	05 00 00 00 00	 add	 eax, OFFSET _players
  005b2	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  005b5	75 0d		 jne	 SHORT $LN159@P_MovePlay

; 5639 : 				{
; 5640 : 					COM_ImmedExecute("changeteam2 blue");

  005b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LKOOLFPG@changeteam2?5blue@
  005bc	e8 00 00 00 00	 call	 _COM_ImmedExecute
  005c1	83 c4 04	 add	 esp, 4
$LN159@P_MovePlay:

; 5641 : 				}
; 5642 : 			}
; 5643 : 		}

  005c4	eb 2c		 jmp	 SHORT $LN138@P_MovePlay
$LN137@P_MovePlay:

; 5644 : 		else
; 5645 : 		{
; 5646 : 			CONS_Printf("Server does not allow team change.\n");

  005c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@GFKDEHPF@Server?5does?5not?5allow?5team?5chan@
  005cb	e8 00 00 00 00	 call	 _CONS_Printf
  005d0	83 c4 04	 add	 esp, 4

; 5647 : 			player->powers[pw_flashing] += 2*TICRATE; //to prevent message spam.

  005d3	b8 04 00 00 00	 mov	 eax, 4
  005d8	d1 e0		 shl	 eax, 1
  005da	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005dd	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  005e1	83 c2 46	 add	 edx, 70			; 00000046H
  005e4	b8 04 00 00 00	 mov	 eax, 4
  005e9	d1 e0		 shl	 eax, 1
  005eb	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005ee	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN138@P_MovePlay:

; 5648 : 		}
; 5649 : 	}
; 5650 : 
; 5651 : 	// Even if not NiGHTS, pull in nearby objects when walking around as John Q. Elliot.
; 5652 : 	if (!cv_objectplace.value && !((netgame || multiplayer) && player->spectator) && ((maptol & TOL_NIGHTS)) && (!(player->pflags & PF_NIGHTSMODE) || player->powers[pw_nightshelper]))

  005f2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  005f9	0f 85 85 01 00
	00		 jne	 $LN11@P_MovePlay
  005ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00606	75 09		 jne	 SHORT $LN162@P_MovePlay
  00608	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0060f	74 12		 je	 SHORT $LN161@P_MovePlay
$LN162@P_MovePlay:
  00611	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00614	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  0061b	85 c9		 test	 ecx, ecx
  0061d	0f 85 61 01 00
	00		 jne	 $LN11@P_MovePlay
$LN161@P_MovePlay:
  00623	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0062a	83 e0 40	 and	 eax, 64			; 00000040H
  0062d	0f 84 51 01 00
	00		 je	 $LN11@P_MovePlay
  00633	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00636	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0063c	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00642	74 16		 je	 SHORT $LN163@P_MovePlay
  00644	b8 04 00 00 00	 mov	 eax, 4
  00649	6b c8 1a	 imul	 ecx, eax, 26
  0064c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0064f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00654	0f 84 2a 01 00
	00		 je	 $LN11@P_MovePlay
$LN163@P_MovePlay:

; 5653 : 	{
; 5654 : 		thinker_t *th;
; 5655 : 		mobj_t *mo2;
; 5656 : 		fixed_t x = player->mo->x;

  0065a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0065d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0065f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00662	89 95 c4 fe ff
	ff		 mov	 DWORD PTR _x$101[ebp], edx

; 5657 : 		fixed_t y = player->mo->y;

  00668	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0066b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0066d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00670	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _y$100[ebp], edx

; 5658 : 		fixed_t z = player->mo->z;

  00676	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00679	8b 08		 mov	 ecx, DWORD PTR [eax]
  0067b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0067e	89 95 bc fe ff
	ff		 mov	 DWORD PTR _z$99[ebp], edx

; 5659 : 
; 5660 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00684	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00689	89 85 cc fe ff
	ff		 mov	 DWORD PTR _th$103[ebp], eax
  0068f	eb 0f		 jmp	 SHORT $LN12@P_MovePlay
$LN10@P_MovePlay:
  00691	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _th$103[ebp]
  00697	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0069a	89 8d cc fe ff
	ff		 mov	 DWORD PTR _th$103[ebp], ecx
$LN12@P_MovePlay:
  006a0	81 bd cc fe ff
	ff 00 00 00 00	 cmp	 DWORD PTR _th$103[ebp], OFFSET _thinkercap
  006aa	0f 84 d4 00 00
	00		 je	 $LN11@P_MovePlay

; 5661 : 		{
; 5662 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  006b0	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _th$103[ebp]
  006b6	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  006bd	74 02		 je	 SHORT $LN164@P_MovePlay

; 5663 : 				continue;

  006bf	eb d0		 jmp	 SHORT $LN10@P_MovePlay
$LN164@P_MovePlay:

; 5664 : 
; 5665 : 			mo2 = (mobj_t *)th;

  006c1	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _th$103[ebp]
  006c7	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _mo2$102[ebp], eax

; 5666 : 
; 5667 : 			if (!(mo2->type == MT_NIGHTSWING || mo2->type == MT_RING || mo2->type == MT_COIN

  006cd	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mo2$102[ebp]
  006d3	81 78 7c fc 00
	00 00		 cmp	 DWORD PTR [eax+124], 252 ; 000000fcH
  006da	74 1d		 je	 SHORT $LN165@P_MovePlay
  006dc	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mo2$102[ebp]
  006e2	83 78 7c 2b	 cmp	 DWORD PTR [eax+124], 43	; 0000002bH
  006e6	74 11		 je	 SHORT $LN165@P_MovePlay
  006e8	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mo2$102[ebp]
  006ee	81 78 7c e1 00
	00 00		 cmp	 DWORD PTR [eax+124], 225 ; 000000e1H
  006f5	74 02		 je	 SHORT $LN165@P_MovePlay

; 5668 : #ifdef BLUE_SPHERES
; 5669 : 			      || mo2->type == MT_BLUEBALL
; 5670 : #endif
; 5671 : 			     ))
; 5672 : 				continue;

  006f7	eb 98		 jmp	 SHORT $LN10@P_MovePlay
$LN165@P_MovePlay:

; 5673 : 
; 5674 : 			if (P_AproxDistance(P_AproxDistance(mo2->x - x, mo2->y - y), mo2->z - z) > 128*FRACUNIT)

  006f9	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mo2$102[ebp]
  006ff	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00702	2b 8d bc fe ff
	ff		 sub	 ecx, DWORD PTR _z$99[ebp]
  00708	51		 push	 ecx
  00709	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _mo2$102[ebp]
  0070f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00712	2b 85 c0 fe ff
	ff		 sub	 eax, DWORD PTR _y$100[ebp]
  00718	50		 push	 eax
  00719	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _mo2$102[ebp]
  0071f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00722	2b 95 c4 fe ff
	ff		 sub	 edx, DWORD PTR _x$101[ebp]
  00728	52		 push	 edx
  00729	e8 00 00 00 00	 call	 _P_AproxDistance
  0072e	83 c4 08	 add	 esp, 8
  00731	50		 push	 eax
  00732	e8 00 00 00 00	 call	 _P_AproxDistance
  00737	83 c4 08	 add	 esp, 8
  0073a	3d 00 00 80 00	 cmp	 eax, 8388608		; 00800000H
  0073f	7e 05		 jle	 SHORT $LN166@P_MovePlay

; 5675 : 				continue;

  00741	e9 4b ff ff ff	 jmp	 $LN10@P_MovePlay
$LN166@P_MovePlay:

; 5676 : 
; 5677 : 			// Yay! The thing's in reach! Pull it in!
; 5678 : 			mo2->flags2 |= MF2_NIGHTSPULL;

  00746	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mo2$102[ebp]
  0074c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00752	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  00758	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _mo2$102[ebp]
  0075e	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 5679 : 			P_SetTarget(&mo2->tracer, player->mo);

  00764	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00767	8b 08		 mov	 ecx, DWORD PTR [eax]
  00769	51		 push	 ecx
  0076a	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _mo2$102[ebp]
  00770	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  00776	52		 push	 edx
  00777	e8 00 00 00 00	 call	 _P_SetTarget
  0077c	83 c4 08	 add	 esp, 8

; 5680 : 		}

  0077f	e9 0d ff ff ff	 jmp	 $LN10@P_MovePlay
$LN11@P_MovePlay:

; 5681 : 	}
; 5682 : 
; 5683 : 	if (player->bonustime > 1)

  00784	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00787	0f b6 88 cd 01
	00 00		 movzx	 ecx, BYTE PTR [eax+461]
  0078e	83 f9 01	 cmp	 ecx, 1
  00791	7e 2e		 jle	 SHORT $LN168@P_MovePlay

; 5684 : 	{
; 5685 : 		player->bonustime--;

  00793	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00796	8a 88 cd 01 00
	00		 mov	 cl, BYTE PTR [eax+461]
  0079c	80 e9 01	 sub	 cl, 1
  0079f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007a2	88 8a cd 01 00
	00		 mov	 BYTE PTR [edx+461], cl

; 5686 : 		if (player->bonustime <= 1)

  007a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007ab	0f b6 88 cd 01
	00 00		 movzx	 ecx, BYTE PTR [eax+461]
  007b2	83 f9 01	 cmp	 ecx, 1
  007b5	7f 0a		 jg	 SHORT $LN168@P_MovePlay

; 5687 : 			player->bonustime = 1;

  007b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007ba	c6 80 cd 01 00
	00 01		 mov	 BYTE PTR [eax+461], 1
$LN168@P_MovePlay:

; 5688 : 	}
; 5689 : 
; 5690 : 	if (player->linktimer)

  007c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007c4	83 b8 bc 01 00
	00 00		 cmp	 DWORD PTR [eax+444], 0
  007cb	74 37		 je	 SHORT $LN170@P_MovePlay

; 5691 : 	{
; 5692 : 		if (--player->linktimer <= 0) // Link timer

  007cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007d0	8b 88 bc 01 00
	00		 mov	 ecx, DWORD PTR [eax+444]
  007d6	83 e9 01	 sub	 ecx, 1
  007d9	89 8d b0 fc ff
	ff		 mov	 DWORD PTR tv396[ebp], ecx
  007df	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007e2	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR tv396[ebp]
  007e8	89 82 bc 01 00
	00		 mov	 DWORD PTR [edx+444], eax
  007ee	83 bd b0 fc ff
	ff 00		 cmp	 DWORD PTR tv396[ebp], 0
  007f5	77 0d		 ja	 SHORT $LN170@P_MovePlay

; 5693 : 			player->linkcount = 0;

  007f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007fa	c7 80 b8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+440], 0
$LN170@P_MovePlay:

; 5694 : 	}
; 5695 : 
; 5696 : 	// Locate the capsule for this mare.
; 5697 : 	if (maptol & TOL_NIGHTS)

  00804	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0080b	83 e0 40	 and	 eax, 64			; 00000040H
  0080e	0f 84 1a 09 00
	00		 je	 $LN202@P_MovePlay

; 5698 : 	{
; 5699 : 		if (!player->capsule && !player->bonustime)

  00814	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00817	83 b8 d0 01 00
	00 00		 cmp	 DWORD PTR [eax+464], 0
  0081e	0f 85 9e 00 00
	00		 jne	 $LN172@P_MovePlay
  00824	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00827	0f b6 88 cd 01
	00 00		 movzx	 ecx, BYTE PTR [eax+461]
  0082e	85 c9		 test	 ecx, ecx
  00830	0f 85 8c 00 00
	00		 jne	 $LN172@P_MovePlay

; 5700 : 		{
; 5701 : 			thinker_t *th;
; 5702 : 			mobj_t *mo2;
; 5703 : 
; 5704 : 			for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00836	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0083b	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _th$98[ebp], eax
  00841	eb 0f		 jmp	 SHORT $LN15@P_MovePlay
$LN13@P_MovePlay:
  00843	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _th$98[ebp]
  00849	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0084c	89 8d b8 fe ff
	ff		 mov	 DWORD PTR _th$98[ebp], ecx
$LN15@P_MovePlay:
  00852	81 bd b8 fe ff
	ff 00 00 00 00	 cmp	 DWORD PTR _th$98[ebp], OFFSET _thinkercap
  0085c	74 5f		 je	 SHORT $LN14@P_MovePlay

; 5705 : 			{
; 5706 : 				if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  0085e	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _th$98[ebp]
  00864	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0086b	74 02		 je	 SHORT $LN174@P_MovePlay

; 5707 : 					continue;

  0086d	eb d4		 jmp	 SHORT $LN13@P_MovePlay
$LN174@P_MovePlay:

; 5708 : 
; 5709 : 				mo2 = (mobj_t *)th;

  0086f	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _th$98[ebp]
  00875	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _mo2$97[ebp], eax

; 5710 : 
; 5711 : 				if (mo2->type == MT_EGGCAPSULE
; 5712 : 					&& mo2->threshold == player->mare)

  0087b	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _mo2$97[ebp]
  00881	81 78 7c 00 01
	00 00		 cmp	 DWORD PTR [eax+124], 256 ; 00000100H
  00888	75 31		 jne	 SHORT $LN175@P_MovePlay
  0088a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0088d	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+468]
  00894	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR _mo2$97[ebp]
  0089a	39 8a a0 00 00
	00		 cmp	 DWORD PTR [edx+160], ecx
  008a0	75 19		 jne	 SHORT $LN175@P_MovePlay

; 5713 : 					P_SetTarget(&player->capsule, mo2);

  008a2	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _mo2$97[ebp]
  008a8	50		 push	 eax
  008a9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  008ac	81 c1 d0 01 00
	00		 add	 ecx, 464		; 000001d0H
  008b2	51		 push	 ecx
  008b3	e8 00 00 00 00	 call	 _P_SetTarget
  008b8	83 c4 08	 add	 esp, 8
$LN175@P_MovePlay:

; 5714 : 			}

  008bb	eb 86		 jmp	 SHORT $LN13@P_MovePlay
$LN14@P_MovePlay:

; 5715 : 		}

  008bd	e9 92 07 00 00	 jmp	 $LN176@P_MovePlay
$LN172@P_MovePlay:

; 5716 : 		else if (player->capsule && player->capsule->reactiontime > 0 && player == &players[player->capsule->reactiontime-1])

  008c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008c5	83 b8 d0 01 00
	00 00		 cmp	 DWORD PTR [eax+464], 0
  008cc	0f 84 82 07 00
	00		 je	 $LN176@P_MovePlay
  008d2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008d5	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  008db	83 b9 9c 00 00
	00 00		 cmp	 DWORD PTR [ecx+156], 0
  008e2	0f 8e 6c 07 00
	00		 jle	 $LN176@P_MovePlay
  008e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008eb	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  008f1	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  008f7	83 ea 01	 sub	 edx, 1
  008fa	69 c2 fc 01 00
	00		 imul	 eax, edx, 508
  00900	05 00 00 00 00	 add	 eax, OFFSET _players
  00905	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00908	0f 85 46 07 00
	00		 jne	 $LN176@P_MovePlay

; 5717 : 		{
; 5718 : 			if ((player->pflags & PF_NIGHTSMODE) && (player->mo->tracer->state < &states[S_NIGHTSHURT1]

  0090e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00911	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00917	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  0091d	74 5b		 je	 SHORT $LN177@P_MovePlay
  0091f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00922	8b 08		 mov	 ecx, DWORD PTR [eax]
  00924	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0092a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0092f	69 c8 db 05 00
	00		 imul	 ecx, eax, 1499
  00935	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0093b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0093e	72 21		 jb	 SHORT $LN178@P_MovePlay
  00940	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00943	8b 08		 mov	 ecx, DWORD PTR [eax]
  00945	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0094b	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00950	69 c8 fa 05 00
	00		 imul	 ecx, eax, 1530
  00956	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0095c	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0095f	76 19		 jbe	 SHORT $LN177@P_MovePlay
$LN178@P_MovePlay:

; 5719 : 				|| player->mo->tracer->state > &states[S_NIGHTSHURT32]))
; 5720 : 				P_SetMobjState(player->mo->tracer, S_NIGHTSHURT1);

  00961	68 db 05 00 00	 push	 1499			; 000005dbH
  00966	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00969	8b 08		 mov	 ecx, DWORD PTR [eax]
  0096b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00971	52		 push	 edx
  00972	e8 00 00 00 00	 call	 _P_SetMobjState
  00977	83 c4 08	 add	 esp, 8
$LN177@P_MovePlay:

; 5721 : 
; 5722 : 			if (player->mo->x <= player->capsule->x + 2*FRACUNIT
; 5723 : 				&& player->mo->x >= player->capsule->x - 2*FRACUNIT)

  0097a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0097d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0097f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00982	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00988	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0098b	81 c2 00 00 02
	00		 add	 edx, 131072		; 00020000H
  00991	39 51 10	 cmp	 DWORD PTR [ecx+16], edx
  00994	7f 58		 jg	 SHORT $LN179@P_MovePlay
  00996	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00999	8b 08		 mov	 ecx, DWORD PTR [eax]
  0099b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0099e	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  009a4	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  009a7	81 ea 00 00 02
	00		 sub	 edx, 131072		; 00020000H
  009ad	39 51 10	 cmp	 DWORD PTR [ecx+16], edx
  009b0	7c 3c		 jl	 SHORT $LN179@P_MovePlay

; 5724 : 			{
; 5725 : 				P_UnsetThingPosition(player->mo);

  009b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  009b7	51		 push	 ecx
  009b8	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  009bd	83 c4 04	 add	 esp, 4

; 5726 : 				player->mo->x = player->capsule->x;

  009c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009c3	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  009c9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  009cc	8b 02		 mov	 eax, DWORD PTR [edx]
  009ce	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  009d1	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 5727 : 				P_SetThingPosition(player->mo);

  009d4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  009d9	51		 push	 ecx
  009da	e8 00 00 00 00	 call	 _P_SetThingPosition
  009df	83 c4 04	 add	 esp, 4

; 5728 : 				player->mo->momx = 0;

  009e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  009e7	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN179@P_MovePlay:

; 5729 : 			}
; 5730 : 
; 5731 : 			if (player->mo->y <= player->capsule->y + 2*FRACUNIT
; 5732 : 				&& player->mo->y >= player->capsule->y - 2*FRACUNIT)

  009ee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  009f3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  009f6	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  009fc	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  009ff	81 c2 00 00 02
	00		 add	 edx, 131072		; 00020000H
  00a05	39 51 14	 cmp	 DWORD PTR [ecx+20], edx
  00a08	7f 58		 jg	 SHORT $LN180@P_MovePlay
  00a0a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a0d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a0f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a12	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00a18	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00a1b	81 ea 00 00 02
	00		 sub	 edx, 131072		; 00020000H
  00a21	39 51 14	 cmp	 DWORD PTR [ecx+20], edx
  00a24	7c 3c		 jl	 SHORT $LN180@P_MovePlay

; 5733 : 			{
; 5734 : 				P_UnsetThingPosition(player->mo);

  00a26	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a29	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a2b	51		 push	 ecx
  00a2c	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00a31	83 c4 04	 add	 esp, 4

; 5735 : 				player->mo->y = player->capsule->y;

  00a34	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a37	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00a3d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a40	8b 02		 mov	 eax, DWORD PTR [edx]
  00a42	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00a45	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 5736 : 				P_SetThingPosition(player->mo);

  00a48	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a4b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a4d	51		 push	 ecx
  00a4e	e8 00 00 00 00	 call	 _P_SetThingPosition
  00a53	83 c4 04	 add	 esp, 4

; 5737 : 				player->mo->momy = 0;

  00a56	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a59	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a5b	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
$LN180@P_MovePlay:

; 5738 : 			}
; 5739 : 
; 5740 : 			if (player->mo->z <= player->capsule->z+(player->capsule->height/3) + 2*FRACUNIT
; 5741 : 				&& player->mo->z >= player->capsule->z+(player->capsule->height/3) - 2*FRACUNIT)

  00a62	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a65	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a67	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a6a	8b b2 d0 01 00
	00		 mov	 esi, DWORD PTR [edx+464]
  00a70	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a73	8b 90 d0 01 00
	00		 mov	 edx, DWORD PTR [eax+464]
  00a79	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00a7c	99		 cdq
  00a7d	bf 03 00 00 00	 mov	 edi, 3
  00a82	f7 ff		 idiv	 edi
  00a84	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00a87	8d 84 02 00 00
	02 00		 lea	 eax, DWORD PTR [edx+eax+131072]
  00a8e	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00a91	7f 65		 jg	 SHORT $LN181@P_MovePlay
  00a93	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a96	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a98	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a9b	8b b2 d0 01 00
	00		 mov	 esi, DWORD PTR [edx+464]
  00aa1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00aa4	8b 90 d0 01 00
	00		 mov	 edx, DWORD PTR [eax+464]
  00aaa	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00aad	99		 cdq
  00aae	bf 03 00 00 00	 mov	 edi, 3
  00ab3	f7 ff		 idiv	 edi
  00ab5	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00ab8	8d 84 02 00 00
	fe ff		 lea	 eax, DWORD PTR [edx+eax-131072]
  00abf	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00ac2	7c 34		 jl	 SHORT $LN181@P_MovePlay

; 5742 : 			{
; 5743 : 				player->mo->z = player->capsule->z+(player->capsule->height/3);

  00ac4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ac7	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00acd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ad0	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00ad6	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00ad9	99		 cdq
  00ada	be 03 00 00 00	 mov	 esi, 3
  00adf	f7 fe		 idiv	 esi
  00ae1	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00ae4	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00ae7	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ae9	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 5744 : 				player->mo->momz = 0;

  00aec	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00aef	8b 08		 mov	 ecx, DWORD PTR [eax]
  00af1	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
$LN181@P_MovePlay:

; 5745 : 			}
; 5746 : 
; 5747 : 			if (player->mo->x > player->capsule->x)

  00af8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00afb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00afd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b00	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00b06	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00b09	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00b0c	7e 0e		 jle	 SHORT $LN182@P_MovePlay

; 5748 : 				player->mo->momx = -2*FRACUNIT;

  00b0e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b11	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b13	c7 41 48 00 00
	fe ff		 mov	 DWORD PTR [ecx+72], -131072 ; fffe0000H
  00b1a	eb 22		 jmp	 SHORT $LN184@P_MovePlay
$LN182@P_MovePlay:

; 5749 : 			else if (player->mo->x < player->capsule->x)

  00b1c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b1f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b21	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b24	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00b2a	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00b2d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00b30	7d 0c		 jge	 SHORT $LN184@P_MovePlay

; 5750 : 				player->mo->momx = 2*FRACUNIT;

  00b32	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b35	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b37	c7 41 48 00 00
	02 00		 mov	 DWORD PTR [ecx+72], 131072 ; 00020000H
$LN184@P_MovePlay:

; 5751 : 
; 5752 : 			if (player->mo->y > player->capsule->y)

  00b3e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b41	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b43	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b46	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00b4c	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00b4f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00b52	7e 0e		 jle	 SHORT $LN185@P_MovePlay

; 5753 : 				player->mo->momy = -2*FRACUNIT;

  00b54	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b57	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b59	c7 41 4c 00 00
	fe ff		 mov	 DWORD PTR [ecx+76], -131072 ; fffe0000H
  00b60	eb 22		 jmp	 SHORT $LN187@P_MovePlay
$LN185@P_MovePlay:

; 5754 : 			else if (player->mo->y < player->capsule->y)

  00b62	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b65	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b67	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b6a	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00b70	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00b73	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00b76	7d 0c		 jge	 SHORT $LN187@P_MovePlay

; 5755 : 				player->mo->momy = 2*FRACUNIT;

  00b78	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b7b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b7d	c7 41 4c 00 00
	02 00		 mov	 DWORD PTR [ecx+76], 131072 ; 00020000H
$LN187@P_MovePlay:

; 5756 : 
; 5757 : 			if (player->mo->z > player->capsule->z+(player->capsule->height/3))

  00b84	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b87	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b89	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b8c	8b b2 d0 01 00
	00		 mov	 esi, DWORD PTR [edx+464]
  00b92	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b95	8b 90 d0 01 00
	00		 mov	 edx, DWORD PTR [eax+464]
  00b9b	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00b9e	99		 cdq
  00b9f	bf 03 00 00 00	 mov	 edi, 3
  00ba4	f7 ff		 idiv	 edi
  00ba6	03 46 18	 add	 eax, DWORD PTR [esi+24]
  00ba9	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00bac	7e 0e		 jle	 SHORT $LN188@P_MovePlay

; 5758 : 				player->mo->momz = -2*FRACUNIT;

  00bae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bb1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bb3	c7 41 50 00 00
	fe ff		 mov	 DWORD PTR [ecx+80], -131072 ; fffe0000H
  00bba	eb 36		 jmp	 SHORT $LN190@P_MovePlay
$LN188@P_MovePlay:

; 5759 : 			else if (player->mo->z < player->capsule->z+(player->capsule->height/3))

  00bbc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bbf	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bc1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bc4	8b b2 d0 01 00
	00		 mov	 esi, DWORD PTR [edx+464]
  00bca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bcd	8b 90 d0 01 00
	00		 mov	 edx, DWORD PTR [eax+464]
  00bd3	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00bd6	99		 cdq
  00bd7	bf 03 00 00 00	 mov	 edi, 3
  00bdc	f7 ff		 idiv	 edi
  00bde	03 46 18	 add	 eax, DWORD PTR [esi+24]
  00be1	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00be4	7d 0c		 jge	 SHORT $LN190@P_MovePlay

; 5760 : 				player->mo->momz = 2*FRACUNIT;

  00be6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00be9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00beb	c7 41 50 00 00
	02 00		 mov	 DWORD PTR [ecx+80], 131072 ; 00020000H
$LN190@P_MovePlay:

; 5761 : 
; 5762 : 			// Time to blow it up!
; 5763 : 			if (player->mo->x == player->capsule->x
; 5764 : 				&& player->mo->y == player->capsule->y
; 5765 : 				&& player->mo->z == player->capsule->z+(player->capsule->height/3))

  00bf2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bf5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bf7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bfa	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00c00	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00c03	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00c06	0f 85 98 03 00
	00		 jne	 $LN193@P_MovePlay
  00c0c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c0f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c11	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c14	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00c1a	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00c1d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00c20	0f 85 7e 03 00
	00		 jne	 $LN193@P_MovePlay
  00c26	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c29	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c2b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c2e	8b b2 d0 01 00
	00		 mov	 esi, DWORD PTR [edx+464]
  00c34	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c37	8b 90 d0 01 00
	00		 mov	 edx, DWORD PTR [eax+464]
  00c3d	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00c40	99		 cdq
  00c41	bf 03 00 00 00	 mov	 edi, 3
  00c46	f7 ff		 idiv	 edi
  00c48	03 46 18	 add	 eax, DWORD PTR [esi+24]
  00c4b	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00c4e	0f 85 50 03 00
	00		 jne	 $LN193@P_MovePlay

; 5766 : 			{
; 5767 : 				if (player->mo->health > 1)

  00c54	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c57	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c59	83 b9 8c 00 00
	00 01		 cmp	 DWORD PTR [ecx+140], 1
  00c60	0f 8e 08 02 00
	00		 jle	 $LN192@P_MovePlay

; 5768 : 				{
; 5769 : 					player->mo->health--;

  00c66	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c69	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c6b	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00c71	83 ea 01	 sub	 edx, 1
  00c74	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c77	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c79	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 5770 : 					player->health--;

  00c7f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c82	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00c85	83 e9 01	 sub	 ecx, 1
  00c88	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c8b	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 5771 : 					player->capsule->health--;

  00c8e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c91	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00c97	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00c9d	83 ea 01	 sub	 edx, 1
  00ca0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ca3	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00ca9	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 5772 : 
; 5773 : 					// Spawn a 'pop' for each ring you deposit
; 5774 : 					S_StartSound(P_SpawnMobj(player->capsule->x + ((P_SignedRandom()/3)<<FRACBITS), player->capsule->y + ((P_SignedRandom()/3)<<FRACBITS), player->capsule->z + (player->capsule->height/2) + ((P_SignedRandom()/3)<<FRACBITS), MT_EXPLODE), sfx_pop);

  00caf	6a 77		 push	 119			; 00000077H
  00cb1	68 0e 01 00 00	 push	 270			; 0000010eH
  00cb6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cb9	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00cbf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00cc2	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00cc8	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00ccb	99		 cdq
  00ccc	2b c2		 sub	 eax, edx
  00cce	d1 f8		 sar	 eax, 1
  00cd0	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00cd3	03 f0		 add	 esi, eax
  00cd5	e8 00 00 00 00	 call	 _P_SignedRandom
  00cda	99		 cdq
  00cdb	b9 03 00 00 00	 mov	 ecx, 3
  00ce0	f7 f9		 idiv	 ecx
  00ce2	c1 e0 10	 shl	 eax, 16			; 00000010H
  00ce5	03 f0		 add	 esi, eax
  00ce7	56		 push	 esi
  00ce8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ceb	8b b2 d0 01 00
	00		 mov	 esi, DWORD PTR [edx+464]
  00cf1	e8 00 00 00 00	 call	 _P_SignedRandom
  00cf6	99		 cdq
  00cf7	b9 03 00 00 00	 mov	 ecx, 3
  00cfc	f7 f9		 idiv	 ecx
  00cfe	c1 e0 10	 shl	 eax, 16			; 00000010H
  00d01	03 46 14	 add	 eax, DWORD PTR [esi+20]
  00d04	50		 push	 eax
  00d05	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d08	8b b2 d0 01 00
	00		 mov	 esi, DWORD PTR [edx+464]
  00d0e	e8 00 00 00 00	 call	 _P_SignedRandom
  00d13	99		 cdq
  00d14	b9 03 00 00 00	 mov	 ecx, 3
  00d19	f7 f9		 idiv	 ecx
  00d1b	c1 e0 10	 shl	 eax, 16			; 00000010H
  00d1e	03 46 10	 add	 eax, DWORD PTR [esi+16]
  00d21	50		 push	 eax
  00d22	e8 00 00 00 00	 call	 _P_SpawnMobj
  00d27	83 c4 10	 add	 esp, 16			; 00000010H
  00d2a	50		 push	 eax
  00d2b	e8 00 00 00 00	 call	 _S_StartSound
  00d30	83 c4 08	 add	 esp, 8

; 5775 : 
; 5776 : 					if (player->capsule->health <= 0)

  00d33	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d36	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00d3c	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00d43	0f 8f 20 01 00
	00		 jg	 $LN194@P_MovePlay

; 5777 : 					{
; 5778 : 						player->capsule->flags &= ~MF_NOGRAVITY;

  00d49	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d4c	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00d52	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00d55	81 e2 ff fd ff
	ff		 and	 edx, -513		; fffffdffH
  00d5b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d5e	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00d64	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 5779 : 						player->capsule->momz = 5*FRACUNIT;

  00d67	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d6a	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00d70	c7 41 50 00 00
	05 00		 mov	 DWORD PTR [ecx+80], 327680 ; 00050000H

; 5780 : 
; 5781 : 						for (i = 0; i < MAXPLAYERS; i++)

  00d77	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00d7e	eb 09		 jmp	 SHORT $LN18@P_MovePlay
$LN16@P_MovePlay:
  00d80	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00d83	83 c0 01	 add	 eax, 1
  00d86	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN18@P_MovePlay:
  00d89	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00d8d	7d 39		 jge	 SHORT $LN17@P_MovePlay

; 5782 : 						{
; 5783 : 							if (players[i].mare == player->mare)

  00d8f	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00d96	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+468]
  00d9d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00da0	0f b6 82 d4 01
	00 00		 movzx	 eax, BYTE PTR [edx+468]
  00da7	3b c8		 cmp	 ecx, eax
  00da9	75 1b		 jne	 SHORT $LN195@P_MovePlay

; 5784 : 							{
; 5785 : 								players[i].bonustime = 3*TICRATE;

  00dab	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00db2	c6 80 cd 01 00
	00 69		 mov	 BYTE PTR _players[eax+461], 105 ; 00000069H

; 5786 : 								player->bonuscount = 10;

  00db9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dbc	c7 80 b0 00 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+176], 10	; 0000000aH
$LN195@P_MovePlay:

; 5787 : 							}
; 5788 : 						}

  00dc6	eb b8		 jmp	 SHORT $LN16@P_MovePlay
$LN17@P_MovePlay:

; 5789 : 
; 5790 : 						{
; 5791 : 							fixed_t z;
; 5792 : 
; 5793 : 							z = player->capsule->z + player->capsule->height/2;

  00dc8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dcb	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00dd1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00dd4	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00dda	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00ddd	99		 cdq
  00dde	2b c2		 sub	 eax, edx
  00de0	d1 f8		 sar	 eax, 1
  00de2	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00de5	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _z$96[ebp], eax

; 5794 : 							for (i = 0; i < 16; i++)

  00deb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00df2	eb 09		 jmp	 SHORT $LN21@P_MovePlay
$LN19@P_MovePlay:
  00df4	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00df7	83 c0 01	 add	 eax, 1
  00dfa	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN21@P_MovePlay:
  00dfd	83 7d f4 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  00e01	7d 30		 jge	 SHORT $LN20@P_MovePlay

; 5795 : 								P_SpawnMobj(player->capsule->x, player->capsule->y, z, MT_BIRD);

  00e03	68 a5 00 00 00	 push	 165			; 000000a5H
  00e08	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _z$96[ebp]
  00e0e	50		 push	 eax
  00e0f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e12	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00e18	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00e1b	50		 push	 eax
  00e1c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e1f	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00e25	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00e28	50		 push	 eax
  00e29	e8 00 00 00 00	 call	 _P_SpawnMobj
  00e2e	83 c4 10	 add	 esp, 16			; 00000010H
  00e31	eb c1		 jmp	 SHORT $LN19@P_MovePlay
$LN20@P_MovePlay:

; 5796 : 						}
; 5797 : 						player->capsule->reactiontime = 0;

  00e33	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e36	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00e3c	c7 81 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+156], 0

; 5798 : 						P_SetTarget(&player->capsule, NULL);

  00e46	6a 00		 push	 0
  00e48	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e4b	05 d0 01 00 00	 add	 eax, 464		; 000001d0H
  00e50	50		 push	 eax
  00e51	e8 00 00 00 00	 call	 _P_SetTarget
  00e56	83 c4 08	 add	 esp, 8

; 5799 : 						S_StartScreamSound(player->mo, sfx_ngdone);

  00e59	6a 6d		 push	 109			; 0000006dH
  00e5b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e5e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e60	51		 push	 ecx
  00e61	e8 00 00 00 00	 call	 _S_StartScreamSound
  00e66	83 c4 08	 add	 esp, 8
$LN194@P_MovePlay:

; 5800 : 					}
; 5801 : 				}

  00e69	e9 36 01 00 00	 jmp	 $LN193@P_MovePlay
$LN192@P_MovePlay:

; 5802 : 				else
; 5803 : 				{
; 5804 : 					if (player->capsule->health <= 0)

  00e6e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e71	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00e77	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00e7e	0f 8f fa 00 00
	00		 jg	 $LN196@P_MovePlay

; 5805 : 					{
; 5806 : 						player->capsule->flags &= ~MF_NOGRAVITY;

  00e84	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e87	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00e8d	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00e90	81 e2 ff fd ff
	ff		 and	 edx, -513		; fffffdffH
  00e96	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e99	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00e9f	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 5807 : 						player->capsule->momz = 5*FRACUNIT;

  00ea2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ea5	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00eab	c7 41 50 00 00
	05 00		 mov	 DWORD PTR [ecx+80], 327680 ; 00050000H

; 5808 : 
; 5809 : 						for (i = 0; i < MAXPLAYERS; i++)

  00eb2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00eb9	eb 09		 jmp	 SHORT $LN24@P_MovePlay
$LN22@P_MovePlay:
  00ebb	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00ebe	83 c0 01	 add	 eax, 1
  00ec1	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN24@P_MovePlay:
  00ec4	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00ec8	7d 39		 jge	 SHORT $LN23@P_MovePlay

; 5810 : 						{
; 5811 : 							if (players[i].mare == player->mare)

  00eca	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00ed1	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+468]
  00ed8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00edb	0f b6 82 d4 01
	00 00		 movzx	 eax, BYTE PTR [edx+468]
  00ee2	3b c8		 cmp	 ecx, eax
  00ee4	75 1b		 jne	 SHORT $LN197@P_MovePlay

; 5812 : 							{
; 5813 : 								players[i].bonustime = 3*TICRATE;

  00ee6	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00eed	c6 80 cd 01 00
	00 69		 mov	 BYTE PTR _players[eax+461], 105 ; 00000069H

; 5814 : 								player->bonuscount = 10;

  00ef4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ef7	c7 80 b0 00 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+176], 10	; 0000000aH
$LN197@P_MovePlay:

; 5815 : 							}
; 5816 : 						}

  00f01	eb b8		 jmp	 SHORT $LN22@P_MovePlay
$LN23@P_MovePlay:

; 5817 : 
; 5818 : 						{
; 5819 : 							fixed_t z;
; 5820 : 
; 5821 : 							z = player->capsule->z + player->capsule->height/2;

  00f03	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f06	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00f0c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f0f	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00f15	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00f18	99		 cdq
  00f19	2b c2		 sub	 eax, edx
  00f1b	d1 f8		 sar	 eax, 1
  00f1d	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00f20	89 85 ac fe ff
	ff		 mov	 DWORD PTR _z$95[ebp], eax

; 5822 : 							for (i = 0; i < 16; i++)

  00f26	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00f2d	eb 09		 jmp	 SHORT $LN27@P_MovePlay
$LN25@P_MovePlay:
  00f2f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00f32	83 c0 01	 add	 eax, 1
  00f35	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN27@P_MovePlay:
  00f38	83 7d f4 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  00f3c	7d 30		 jge	 SHORT $LN26@P_MovePlay

; 5823 : 								P_SpawnMobj(player->capsule->x, player->capsule->y, z, MT_BIRD);

  00f3e	68 a5 00 00 00	 push	 165			; 000000a5H
  00f43	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _z$95[ebp]
  00f49	50		 push	 eax
  00f4a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00f4d	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00f53	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00f56	50		 push	 eax
  00f57	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00f5a	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00f60	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00f63	50		 push	 eax
  00f64	e8 00 00 00 00	 call	 _P_SpawnMobj
  00f69	83 c4 10	 add	 esp, 16			; 00000010H
  00f6c	eb c1		 jmp	 SHORT $LN25@P_MovePlay
$LN26@P_MovePlay:

; 5824 : 							S_StartScreamSound(player->mo, sfx_ngdone);

  00f6e	6a 6d		 push	 109			; 0000006dH
  00f70	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f73	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f75	51		 push	 ecx
  00f76	e8 00 00 00 00	 call	 _S_StartScreamSound
  00f7b	83 c4 08	 add	 esp, 8
$LN196@P_MovePlay:

; 5825 : 						}
; 5826 : 					}
; 5827 : 					player->capsule->reactiontime = 0;

  00f7e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f81	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00f87	c7 81 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+156], 0

; 5828 : 					P_SetTarget(&player->capsule, NULL);

  00f91	6a 00		 push	 0
  00f93	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f96	05 d0 01 00 00	 add	 eax, 464		; 000001d0H
  00f9b	50		 push	 eax
  00f9c	e8 00 00 00 00	 call	 _P_SetTarget
  00fa1	83 c4 08	 add	 esp, 8
$LN193@P_MovePlay:

; 5829 : 				}
; 5830 : 			}
; 5831 : 
; 5832 : 			if (player->pflags & PF_NIGHTSMODE)

  00fa4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fa7	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00fad	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00fb3	0f 84 96 00 00
	00		 je	 $LN198@P_MovePlay

; 5833 : 			{
; 5834 : 				P_UnsetThingPosition(player->mo->tracer);

  00fb9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fbc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fbe	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00fc4	52		 push	 edx
  00fc5	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00fca	83 c4 04	 add	 esp, 4

; 5835 : 				player->mo->tracer->x = player->mo->x;

  00fcd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fd0	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00fd5	8b 02		 mov	 eax, DWORD PTR [edx]
  00fd7	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00fdd	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00fe0	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 5836 : 				player->mo->tracer->y = player->mo->y;

  00fe3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fe6	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fe8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00feb	8b 02		 mov	 eax, DWORD PTR [edx]
  00fed	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00ff3	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00ff6	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 5837 : 				player->mo->tracer->z = player->mo->z;

  00ff9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ffc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ffe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01001	8b 02		 mov	 eax, DWORD PTR [edx]
  01003	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  01009	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0100c	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 5838 : 				player->mo->tracer->floorz = player->mo->floorz;

  0100f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01012	8b 08		 mov	 ecx, DWORD PTR [eax]
  01014	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01017	8b 02		 mov	 eax, DWORD PTR [edx]
  01019	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  0101f	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  01022	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 5839 : 				player->mo->tracer->ceilingz = player->mo->ceilingz;

  01025	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0102a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0102d	8b 02		 mov	 eax, DWORD PTR [edx]
  0102f	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  01035	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  01038	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 5840 : 				P_SetThingPosition(player->mo->tracer);

  0103b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0103e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01040	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01046	52		 push	 edx
  01047	e8 00 00 00 00	 call	 _P_SetThingPosition
  0104c	83 c4 04	 add	 esp, 4
$LN198@P_MovePlay:

; 5841 : 			}
; 5842 : 			return;

  0104f	e9 51 77 00 00	 jmp	 $LN109@P_MovePlay
$LN176@P_MovePlay:

; 5843 : 		}
; 5844 : 
; 5845 : 		// Test revamped NiGHTS movement.
; 5846 : 		if (player->pflags & PF_NIGHTSMODE)

  01054	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01057	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0105d	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  01063	74 11		 je	 SHORT $LN199@P_MovePlay

; 5847 : 		{
; 5848 : 			P_NiGHTSMovement(player);

  01065	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01068	50		 push	 eax
  01069	e8 00 00 00 00	 call	 _P_NiGHTSMovement
  0106e	83 c4 04	 add	 esp, 4

; 5849 : 			// Retarded hack alert. If we want bustable blocks in NiGHTS,
; 5850 : 			// we have to execute parts of the code below this point.
; 5851 : 			// todo: Fix this ugly hack.
; 5852 : 			goto blockchecking;

  01071	e9 db 69 00 00	 jmp	 $blockchecking$830
$LN199@P_MovePlay:

; 5853 : 		}
; 5854 : 
; 5855 : 		if ((player->pflags & PF_NIGHTSFALL) && P_IsObjectOnGround(player->mo))

  01076	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01079	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0107f	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  01085	0f 84 a3 00 00
	00		 je	 $LN202@P_MovePlay
  0108b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0108e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01090	51		 push	 ecx
  01091	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  01096	83 c4 04	 add	 esp, 4
  01099	85 c0		 test	 eax, eax
  0109b	0f 84 8d 00 00
	00		 je	 $LN202@P_MovePlay

; 5856 : 		{
; 5857 : 			if (player->health > 1)

  010a1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010a4	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  010a8	7e 14		 jle	 SHORT $LN201@P_MovePlay

; 5858 : 				P_DamageMobj(player->mo, NULL, NULL, 1);

  010aa	6a 01		 push	 1
  010ac	6a 00		 push	 0
  010ae	6a 00		 push	 0
  010b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  010b5	51		 push	 ecx
  010b6	e8 00 00 00 00	 call	 _P_DamageMobj
  010bb	83 c4 10	 add	 esp, 16			; 00000010H
$LN201@P_MovePlay:

; 5859 : 
; 5860 : 			player->pflags &= ~PF_NIGHTSFALL;

  010be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010c1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  010c7	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  010cd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  010d0	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5861 : 
; 5862 : 			if (G_IsSpecialStage(gamemap))

  010d6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  010dd	50		 push	 eax
  010de	e8 00 00 00 00	 call	 _G_IsSpecialStage
  010e3	83 c4 04	 add	 esp, 4
  010e6	85 c0		 test	 eax, eax
  010e8	74 44		 je	 SHORT $LN202@P_MovePlay

; 5863 : 			{
; 5864 : 				for (i = 0; i < MAXPLAYERS; i++)

  010ea	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  010f1	eb 09		 jmp	 SHORT $LN30@P_MovePlay
$LN28@P_MovePlay:
  010f3	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  010f6	83 c0 01	 add	 eax, 1
  010f9	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN30@P_MovePlay:
  010fc	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  01100	7d 20		 jge	 SHORT $LN29@P_MovePlay

; 5865 : 				{
; 5866 : 					if (playeringame[i])

  01102	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01105	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0110d	74 11		 je	 SHORT $LN203@P_MovePlay

; 5867 : 						players[i].exiting = (14*TICRATE)/5 + 1;

  0110f	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  01116	c7 80 30 01 00
	00 63 00 00 00	 mov	 DWORD PTR _players[eax+304], 99 ; 00000063H
$LN203@P_MovePlay:

; 5868 : 				}

  01120	eb d1		 jmp	 SHORT $LN28@P_MovePlay
$LN29@P_MovePlay:

; 5869 : 
; 5870 : 				S_StartSound(NULL, sfx_lose);

  01122	6a 5b		 push	 91			; 0000005bH
  01124	6a 00		 push	 0
  01126	e8 00 00 00 00	 call	 _S_StartSound
  0112b	83 c4 08	 add	 esp, 8
$LN202@P_MovePlay:

; 5871 : 			}
; 5872 : 		}
; 5873 : 	}
; 5874 : 
; 5875 : 	if (P_FreezeObjectplace())

  0112e	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  01133	85 c0		 test	 eax, eax
  01135	74 13		 je	 SHORT $LN204@P_MovePlay

; 5876 : 	{
; 5877 : 		P_ObjectplaceMovement(player);

  01137	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0113a	50		 push	 eax
  0113b	e8 00 00 00 00	 call	 _P_ObjectplaceMovement
  01140	83 c4 04	 add	 esp, 4

; 5878 : 		return;

  01143	e9 5d 76 00 00	 jmp	 $LN109@P_MovePlay

; 5879 : 	}

  01148	eb 1f		 jmp	 SHORT $LN206@P_MovePlay
$LN204@P_MovePlay:

; 5880 : 	else if (player->spectator)

  0114a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0114d	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  01154	85 c9		 test	 ecx, ecx
  01156	74 11		 je	 SHORT $LN206@P_MovePlay

; 5881 : 	{
; 5882 : 		P_SpectatorMovement(player);

  01158	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0115b	50		 push	 eax
  0115c	e8 00 00 00 00	 call	 _P_SpectatorMovement
  01161	83 c4 04	 add	 esp, 4

; 5883 : 		return;

  01164	e9 3c 76 00 00	 jmp	 $LN109@P_MovePlay
$LN206@P_MovePlay:

; 5884 : 	}
; 5885 : 
; 5886 : 	//////////////////////
; 5887 : 	// MOVEMENT CODE	//
; 5888 : 	//////////////////////
; 5889 : 
; 5890 : 	if (twodlevel || (player->mo->flags2 & MF2_TWOD)) // 2d-level, so special control applies.

  01169	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  01170	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01175	75 13		 jne	 SHORT $LN209@P_MovePlay
  01177	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0117a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0117c	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  01182	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  01188	74 11		 je	 SHORT $LN207@P_MovePlay
$LN209@P_MovePlay:

; 5891 : 	{
; 5892 : 		P_2dMovement(player);

  0118a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0118d	50		 push	 eax
  0118e	e8 00 00 00 00	 call	 _P_2dMovement
  01193	83 c4 04	 add	 esp, 4

; 5893 : 	}

  01196	e9 ad 00 00 00	 jmp	 $LN208@P_MovePlay
$LN207@P_MovePlay:

; 5894 : 	else
; 5895 : 	{
; 5896 : 		if (!player->climbing && (netgame || (player == &players[consoleplayer]

  0119b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0119e	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  011a5	75 6f		 jne	 SHORT $LN210@P_MovePlay
  011a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  011ae	75 54		 jne	 SHORT $LN211@P_MovePlay
  011b0	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  011ba	05 00 00 00 00	 add	 eax, OFFSET _players
  011bf	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  011c2	75 09		 jne	 SHORT $LN212@P_MovePlay
  011c4	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  011cb	74 37		 je	 SHORT $LN211@P_MovePlay
$LN212@P_MovePlay:
  011cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  011d4	74 1d		 je	 SHORT $LN213@P_MovePlay
  011d6	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  011e0	05 00 00 00 00	 add	 eax, OFFSET _players
  011e5	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  011e8	75 09		 jne	 SHORT $LN213@P_MovePlay
  011ea	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  011f1	74 11		 je	 SHORT $LN211@P_MovePlay
$LN213@P_MovePlay:
  011f3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011f6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  011fc	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  01202	74 12		 je	 SHORT $LN210@P_MovePlay
$LN211@P_MovePlay:

; 5897 : 			&& !cv_analog.value) || (splitscreen
; 5898 : 			&& player == &players[secondarydisplayplayer] && !cv_analog2.value)
; 5899 : 			|| (player->pflags & PF_SPINNING)))
; 5900 : 		{
; 5901 : 			player->mo->angle = (cmd->angleturn<<16 /* not FRACBITS */);

  01204	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  01207	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0120b	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0120e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01211	8b 02		 mov	 eax, DWORD PTR [edx]
  01213	89 48 24	 mov	 DWORD PTR [eax+36], ecx
$LN210@P_MovePlay:

; 5902 : 		}
; 5903 : 
; 5904 : 		ticruned++;

  01216	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticruned
  0121b	83 c0 01	 add	 eax, 1
  0121e	a3 00 00 00 00	 mov	 DWORD PTR _ticruned, eax

; 5905 : 		if ((cmd->angleturn & TICCMD_RECEIVED) == 0)

  01223	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  01226	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0122a	83 e1 01	 and	 ecx, 1
  0122d	75 0d		 jne	 SHORT $LN214@P_MovePlay

; 5906 : 			ticmiss++;

  0122f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticmiss
  01234	83 c0 01	 add	 eax, 1
  01237	a3 00 00 00 00	 mov	 DWORD PTR _ticmiss, eax
$LN214@P_MovePlay:

; 5907 : 
; 5908 : 		P_3dMovement(player);

  0123c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0123f	50		 push	 eax
  01240	e8 00 00 00 00	 call	 _P_3dMovement
  01245	83 c4 04	 add	 esp, 4
$LN208@P_MovePlay:

; 5909 : 	}
; 5910 : 
; 5911 : 	if (maptol & TOL_SRB1)

  01248	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0124f	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  01254	74 10		 je	 SHORT $LN215@P_MovePlay

; 5912 : 		runspd = (runspd / 3) * 2;

  01256	8b 45 dc	 mov	 eax, DWORD PTR _runspd$[ebp]
  01259	99		 cdq
  0125a	b9 03 00 00 00	 mov	 ecx, 3
  0125f	f7 f9		 idiv	 ecx
  01261	d1 e0		 shl	 eax, 1
  01263	89 45 dc	 mov	 DWORD PTR _runspd$[ebp], eax
$LN215@P_MovePlay:

; 5913 : 
; 5914 : 	/////////////////////////
; 5915 : 	// MOVEMENT ANIMATIONS //
; 5916 : 	/////////////////////////
; 5917 : 
; 5918 : 	// Flag variables so it's easy to check
; 5919 : 	// what state the player is in.
; 5920 : 	if (player->mo->state == &states[S_PLAY_RUN1] || player->mo->state == &states[S_PLAY_RUN2] || player->mo->state == &states[S_PLAY_RUN3] || player->mo->state == &states[S_PLAY_RUN4] || player->mo->state == &states[S_PLAY_RUN5] || player->mo->state == &states[S_PLAY_RUN6] || player->mo->state == &states[S_PLAY_RUN7] || player->mo->state == &states[S_PLAY_RUN8]
; 5921 : 		|| player->mo->state == &states[S_PLAY_SUPERWALK1] || player->mo->state == &states[S_PLAY_SUPERWALK2])

  01266	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0126b	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01270	c1 e2 02	 shl	 edx, 2
  01273	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  01279	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  0127c	0f 84 dc 00 00
	00		 je	 $LN218@P_MovePlay
  01282	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01285	8b 08		 mov	 ecx, DWORD PTR [eax]
  01287	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0128c	6b c2 05	 imul	 eax, edx, 5
  0128f	05 00 00 00 00	 add	 eax, OFFSET _states
  01294	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01297	0f 84 c1 00 00
	00		 je	 $LN218@P_MovePlay
  0129d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  012a2	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  012a7	6b c2 06	 imul	 eax, edx, 6
  012aa	05 00 00 00 00	 add	 eax, OFFSET _states
  012af	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  012b2	0f 84 a6 00 00
	00		 je	 $LN218@P_MovePlay
  012b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  012bd	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  012c2	6b c2 07	 imul	 eax, edx, 7
  012c5	05 00 00 00 00	 add	 eax, OFFSET _states
  012ca	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  012cd	0f 84 8b 00 00
	00		 je	 $LN218@P_MovePlay
  012d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  012d8	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  012dd	c1 e2 03	 shl	 edx, 3
  012e0	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  012e6	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  012e9	74 73		 je	 SHORT $LN218@P_MovePlay
  012eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  012f0	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  012f5	6b c2 09	 imul	 eax, edx, 9
  012f8	05 00 00 00 00	 add	 eax, OFFSET _states
  012fd	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01300	74 5c		 je	 SHORT $LN218@P_MovePlay
  01302	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01305	8b 08		 mov	 ecx, DWORD PTR [eax]
  01307	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0130c	6b c2 0a	 imul	 eax, edx, 10
  0130f	05 00 00 00 00	 add	 eax, OFFSET _states
  01314	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01317	74 45		 je	 SHORT $LN218@P_MovePlay
  01319	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0131c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0131e	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01323	6b c2 0b	 imul	 eax, edx, 11
  01326	05 00 00 00 00	 add	 eax, OFFSET _states
  0132b	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0132e	74 2e		 je	 SHORT $LN218@P_MovePlay
  01330	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01333	8b 08		 mov	 ecx, DWORD PTR [eax]
  01335	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0133a	6b c2 2b	 imul	 eax, edx, 43
  0133d	05 00 00 00 00	 add	 eax, OFFSET _states
  01342	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01345	74 17		 je	 SHORT $LN218@P_MovePlay
  01347	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0134a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0134c	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01351	6b c2 2c	 imul	 eax, edx, 44
  01354	05 00 00 00 00	 add	 eax, OFFSET _states
  01359	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0135c	75 4d		 jne	 SHORT $LN216@P_MovePlay
$LN218@P_MovePlay:

; 5922 : 	{
; 5923 : 		player->pflags |= PF_WALKINGANIM;

  0135e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01361	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01367	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  0136d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01370	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5924 : 		player->pflags &= ~PF_RUNNINGANIM;

  01376	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01379	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0137f	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  01385	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01388	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5925 : 		player->pflags &= ~PF_SPINNINGANIM;

  0138e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01391	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01397	81 e1 ff f7 ff
	ff		 and	 ecx, -2049		; fffff7ffH
  0139d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  013a0	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5926 : 	}

  013a6	e9 c5 01 00 00	 jmp	 $LN223@P_MovePlay
$LN216@P_MovePlay:

; 5927 : 	else if (player->mo->state == &states[S_PLAY_SPD1] || player->mo->state == &states[S_PLAY_SPD2] || player->mo->state == &states[S_PLAY_SPD3] || player->mo->state == &states[S_PLAY_SPD4] || player->mo->state == &states[S_PLAY_SUPERFLY1] || player->mo->state == &states[S_PLAY_SUPERFLY2])

  013ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  013b0	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  013b5	6b c2 11	 imul	 eax, edx, 17
  013b8	05 00 00 00 00	 add	 eax, OFFSET _states
  013bd	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  013c0	74 73		 je	 SHORT $LN221@P_MovePlay
  013c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  013c7	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  013cc	6b c2 12	 imul	 eax, edx, 18
  013cf	05 00 00 00 00	 add	 eax, OFFSET _states
  013d4	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  013d7	74 5c		 je	 SHORT $LN221@P_MovePlay
  013d9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  013de	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  013e3	6b c2 13	 imul	 eax, edx, 19
  013e6	05 00 00 00 00	 add	 eax, OFFSET _states
  013eb	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  013ee	74 45		 je	 SHORT $LN221@P_MovePlay
  013f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  013f5	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  013fa	6b c2 14	 imul	 eax, edx, 20
  013fd	05 00 00 00 00	 add	 eax, OFFSET _states
  01402	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01405	74 2e		 je	 SHORT $LN221@P_MovePlay
  01407	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0140a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0140c	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01411	6b c2 2d	 imul	 eax, edx, 45
  01414	05 00 00 00 00	 add	 eax, OFFSET _states
  01419	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0141c	74 17		 je	 SHORT $LN221@P_MovePlay
  0141e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01421	8b 08		 mov	 ecx, DWORD PTR [eax]
  01423	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01428	6b c2 2e	 imul	 eax, edx, 46
  0142b	05 00 00 00 00	 add	 eax, OFFSET _states
  01430	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01433	75 4d		 jne	 SHORT $LN219@P_MovePlay
$LN221@P_MovePlay:

; 5928 : 	{
; 5929 : 		player->pflags |= PF_RUNNINGANIM;

  01435	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01438	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0143e	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  01444	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01447	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5930 : 		player->pflags &= ~PF_WALKINGANIM;

  0144d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01450	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01456	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  0145c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0145f	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5931 : 		player->pflags &= ~PF_SPINNINGANIM;

  01465	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01468	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0146e	81 e1 ff f7 ff
	ff		 and	 ecx, -2049		; fffff7ffH
  01474	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01477	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5932 : 	}

  0147d	e9 ee 00 00 00	 jmp	 $LN223@P_MovePlay
$LN219@P_MovePlay:

; 5933 : 	else if (player->mo->state == &states[S_PLAY_ATK1] || player->mo->state == &states[S_PLAY_ATK2] || player->mo->state == &states[S_PLAY_ATK3] || player->mo->state == &states[S_PLAY_ATK4])

  01482	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01485	8b 08		 mov	 ecx, DWORD PTR [eax]
  01487	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0148c	6b c2 0c	 imul	 eax, edx, 12
  0148f	05 00 00 00 00	 add	 eax, OFFSET _states
  01494	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01497	74 45		 je	 SHORT $LN224@P_MovePlay
  01499	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0149c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0149e	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  014a3	6b c2 0d	 imul	 eax, edx, 13
  014a6	05 00 00 00 00	 add	 eax, OFFSET _states
  014ab	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  014ae	74 2e		 je	 SHORT $LN224@P_MovePlay
  014b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  014b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  014b5	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  014ba	6b c2 0e	 imul	 eax, edx, 14
  014bd	05 00 00 00 00	 add	 eax, OFFSET _states
  014c2	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  014c5	74 17		 je	 SHORT $LN224@P_MovePlay
  014c7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  014ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  014cc	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  014d1	6b c2 0f	 imul	 eax, edx, 15
  014d4	05 00 00 00 00	 add	 eax, OFFSET _states
  014d9	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  014dc	75 4a		 jne	 SHORT $LN222@P_MovePlay
$LN224@P_MovePlay:

; 5934 : 	{
; 5935 : 		player->pflags |= PF_SPINNINGANIM;

  014de	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  014e1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  014e7	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  014ed	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  014f0	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5936 : 		player->pflags &= ~PF_RUNNINGANIM;

  014f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  014f9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  014ff	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  01505	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01508	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5937 : 		player->pflags &= ~PF_WALKINGANIM;

  0150e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01511	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01517	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  0151d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01520	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5938 : 	}

  01526	eb 48		 jmp	 SHORT $LN223@P_MovePlay
$LN222@P_MovePlay:

; 5939 : 	else
; 5940 : 	{
; 5941 : 		player->pflags &= ~PF_WALKINGANIM;

  01528	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0152b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01531	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  01537	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0153a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5942 : 		player->pflags &= ~PF_RUNNINGANIM;

  01540	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01543	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01549	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  0154f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01552	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5943 : 		player->pflags &= ~PF_SPINNINGANIM;

  01558	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0155b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01561	81 e1 ff f7 ff
	ff		 and	 ecx, -2049		; fffff7ffH
  01567	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0156a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN223@P_MovePlay:

; 5944 : 	}
; 5945 : 
; 5946 : 	if ((cmd->forwardmove != 0 || cmd->sidemove != 0) || (player->powers[pw_super] && player->mo->z > player->mo->floorz))

  01570	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  01573	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  01576	85 c9		 test	 ecx, ecx
  01578	75 37		 jne	 SHORT $LN226@P_MovePlay
  0157a	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  0157d	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  01581	85 c9		 test	 ecx, ecx
  01583	75 2c		 jne	 SHORT $LN226@P_MovePlay
  01585	b8 04 00 00 00	 mov	 eax, 4
  0158a	6b c8 0f	 imul	 ecx, eax, 15
  0158d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01590	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  01595	0f 84 52 01 00
	00		 je	 $LN230@P_MovePlay
  0159b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0159e	8b 08		 mov	 ecx, DWORD PTR [eax]
  015a0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  015a3	8b 02		 mov	 eax, DWORD PTR [edx]
  015a5	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  015a8	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  015ab	0f 8e 3c 01 00
	00		 jle	 $LN230@P_MovePlay
$LN226@P_MovePlay:

; 5947 : 	{
; 5948 : 		// If the player is moving fast enough,
; 5949 : 		// break into a run!
; 5950 : 		if ((player->speed > runspd) && (player->pflags & PF_WALKINGANIM) && (onground || player->powers[pw_super]))

  015b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  015b4	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  015ba	3b 4d dc	 cmp	 ecx, DWORD PTR _runspd$[ebp]
  015bd	7e 41		 jle	 SHORT $LN227@P_MovePlay
  015bf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  015c2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  015c8	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  015ce	74 30		 je	 SHORT $LN227@P_MovePlay
  015d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  015d7	75 12		 jne	 SHORT $LN229@P_MovePlay
  015d9	b8 04 00 00 00	 mov	 eax, 4
  015de	6b c8 0f	 imul	 ecx, eax, 15
  015e1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  015e4	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  015e9	74 15		 je	 SHORT $LN227@P_MovePlay
$LN229@P_MovePlay:

; 5951 : 			P_SetPlayerMobjState (player->mo, S_PLAY_SPD1);

  015eb	6a 11		 push	 17			; 00000011H
  015ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  015f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  015f2	51		 push	 ecx
  015f3	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  015f8	83 c4 08	 add	 esp, 8
  015fb	e9 ed 00 00 00	 jmp	 $LN230@P_MovePlay
$LN227@P_MovePlay:

; 5952 : 
; 5953 : 		// Otherwise, just walk.
; 5954 : 		else if ((player->rmomx || player->rmomy) && (player->mo->state == &states[S_PLAY_STND] || player->mo->state == &states[S_PLAY_CARRY] || player->mo->state == &states[S_PLAY_TAP1] || player->mo->state == &states[S_PLAY_TAP2] || player->mo->state == &states[S_PLAY_TEETER1] || player->mo->state == &states[S_PLAY_TEETER2] || player->mo->state == &states[S_PLAY_SUPERSTAND] || player->mo->state == &states[S_PLAY_SUPERTEETER]))

  01600	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01603	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  0160a	75 10		 jne	 SHORT $LN231@P_MovePlay
  0160c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0160f	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  01616	0f 84 d1 00 00
	00		 je	 $LN230@P_MovePlay
$LN231@P_MovePlay:
  0161c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0161f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01621	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01626	c1 e2 00	 shl	 edx, 0
  01629	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  0162f	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  01632	0f 84 a5 00 00
	00		 je	 $LN232@P_MovePlay
  01638	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0163b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0163d	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01642	6b c2 29	 imul	 eax, edx, 41
  01645	05 00 00 00 00	 add	 eax, OFFSET _states
  0164a	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0164d	0f 84 8a 00 00
	00		 je	 $LN232@P_MovePlay
  01653	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01656	8b 08		 mov	 ecx, DWORD PTR [eax]
  01658	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0165d	d1 e2		 shl	 edx, 1
  0165f	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  01665	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  01668	74 73		 je	 SHORT $LN232@P_MovePlay
  0166a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0166d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0166f	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01674	6b c2 03	 imul	 eax, edx, 3
  01677	05 00 00 00 00	 add	 eax, OFFSET _states
  0167c	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0167f	74 5c		 je	 SHORT $LN232@P_MovePlay
  01681	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01684	8b 08		 mov	 ecx, DWORD PTR [eax]
  01686	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0168b	6b c2 25	 imul	 eax, edx, 37
  0168e	05 00 00 00 00	 add	 eax, OFFSET _states
  01693	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01696	74 45		 je	 SHORT $LN232@P_MovePlay
  01698	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0169b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0169d	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  016a2	6b c2 26	 imul	 eax, edx, 38
  016a5	05 00 00 00 00	 add	 eax, OFFSET _states
  016aa	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  016ad	74 2e		 je	 SHORT $LN232@P_MovePlay
  016af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  016b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  016b4	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  016b9	6b c2 2a	 imul	 eax, edx, 42
  016bc	05 00 00 00 00	 add	 eax, OFFSET _states
  016c1	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  016c4	74 17		 je	 SHORT $LN232@P_MovePlay
  016c6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  016c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  016cb	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  016d0	6b c2 2f	 imul	 eax, edx, 47
  016d3	05 00 00 00 00	 add	 eax, OFFSET _states
  016d8	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  016db	75 10		 jne	 SHORT $LN230@P_MovePlay
$LN232@P_MovePlay:

; 5955 : 			P_SetPlayerMobjState (player->mo, S_PLAY_RUN1);

  016dd	6a 04		 push	 4
  016df	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  016e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  016e4	51		 push	 ecx
  016e5	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  016ea	83 c4 08	 add	 esp, 8
$LN230@P_MovePlay:

; 5956 : 	}
; 5957 : 
; 5958 : 	// Adjust the player's animation speed to match their velocity.
; 5959 : 	if (P_IsLocalPlayer(player) && !disableSpeedAdjust)

  016ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  016f0	50		 push	 eax
  016f1	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  016f6	83 c4 04	 add	 esp, 4
  016f9	85 c0		 test	 eax, eax
  016fb	0f 84 b0 03 00
	00		 je	 $LN256@P_MovePlay
  01701	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _disableSpeedAdjust, 0
  01708	0f 85 a3 03 00
	00		 jne	 $LN256@P_MovePlay

; 5960 : 	{
; 5961 : 		if (onground || (player->powers[pw_super] && player->mo->z > player->mo->floorz)) // Only if on the ground.

  0170e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  01715	75 2c		 jne	 SHORT $LN236@P_MovePlay
  01717	b8 04 00 00 00	 mov	 eax, 4
  0171c	6b c8 0f	 imul	 ecx, eax, 15
  0171f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01722	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  01727	0f 84 85 01 00
	00		 je	 $LN234@P_MovePlay
  0172d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01730	8b 08		 mov	 ecx, DWORD PTR [eax]
  01732	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01735	8b 02		 mov	 eax, DWORD PTR [edx]
  01737	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0173a	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  0173d	0f 8e 6f 01 00
	00		 jle	 $LN234@P_MovePlay
$LN236@P_MovePlay:

; 5962 : 		{
; 5963 : 			if (player->pflags & PF_WALKINGANIM)

  01743	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01746	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0174c	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  01752	0f 84 cb 00 00
	00		 je	 $LN237@P_MovePlay

; 5964 : 			{
; 5965 : 				if (player->speed > 12*100/player->mo->scale)

  01758	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0175b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0175d	0f b7 89 cc 00
	00 00		 movzx	 ecx, WORD PTR [ecx+204]
  01764	b8 b0 04 00 00	 mov	 eax, 1200		; 000004b0H
  01769	99		 cdq
  0176a	f7 f9		 idiv	 ecx
  0176c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0176f	39 82 0c 01 00
	00		 cmp	 DWORD PTR [edx+268], eax
  01775	7e 2e		 jle	 SHORT $LN239@P_MovePlay

; 5966 : 					playerstatetics[player-players][player->mo->state->nextstate] = 2*NEWTICRATERATIO;

  01777	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0177a	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0177f	99		 cdq
  01780	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  01785	f7 f9		 idiv	 ecx
  01787	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  0178d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01790	8b 08		 mov	 ecx, DWORD PTR [eax]
  01792	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  01795	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01798	c7 84 8a 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 2
  017a3	eb 79		 jmp	 SHORT $LN242@P_MovePlay
$LN239@P_MovePlay:

; 5967 : 				else if (player->speed > 6*100/player->mo->scale)

  017a5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  017a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  017aa	0f b7 89 cc 00
	00 00		 movzx	 ecx, WORD PTR [ecx+204]
  017b1	b8 58 02 00 00	 mov	 eax, 600		; 00000258H
  017b6	99		 cdq
  017b7	f7 f9		 idiv	 ecx
  017b9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  017bc	39 82 0c 01 00
	00		 cmp	 DWORD PTR [edx+268], eax
  017c2	7e 2e		 jle	 SHORT $LN241@P_MovePlay

; 5968 : 					playerstatetics[player-players][player->mo->state->nextstate] = 3*NEWTICRATERATIO;

  017c4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  017c7	2d 00 00 00 00	 sub	 eax, OFFSET _players
  017cc	99		 cdq
  017cd	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  017d2	f7 f9		 idiv	 ecx
  017d4	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  017da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  017dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  017df	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  017e2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  017e5	c7 84 8a 00 00
	00 00 03 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 3
  017f0	eb 2c		 jmp	 SHORT $LN242@P_MovePlay
$LN241@P_MovePlay:

; 5969 : 				else
; 5970 : 					playerstatetics[player-players][player->mo->state->nextstate] = 4*NEWTICRATERATIO;

  017f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  017f5	2d 00 00 00 00	 sub	 eax, OFFSET _players
  017fa	99		 cdq
  017fb	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  01800	f7 f9		 idiv	 ecx
  01802	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  01808	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0180b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0180d	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  01810	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01813	c7 84 8a 00 00
	00 00 04 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 4
$LN242@P_MovePlay:

; 5971 : 			}

  0181e	e9 8a 00 00 00	 jmp	 $LN245@P_MovePlay
$LN237@P_MovePlay:

; 5972 : 			else if (player->pflags & PF_RUNNINGANIM)

  01823	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01826	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0182c	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  01832	74 79		 je	 SHORT $LN245@P_MovePlay

; 5973 : 			{
; 5974 : 				if (player->speed > 52*100/player->mo->scale)

  01834	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01837	8b 08		 mov	 ecx, DWORD PTR [eax]
  01839	0f b7 89 cc 00
	00 00		 movzx	 ecx, WORD PTR [ecx+204]
  01840	b8 50 14 00 00	 mov	 eax, 5200		; 00001450H
  01845	99		 cdq
  01846	f7 f9		 idiv	 ecx
  01848	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0184b	39 82 0c 01 00
	00		 cmp	 DWORD PTR [edx+268], eax
  01851	7e 2e		 jle	 SHORT $LN244@P_MovePlay

; 5975 : 					playerstatetics[player-players][player->mo->state->nextstate] = 1*NEWTICRATERATIO;

  01853	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01856	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0185b	99		 cdq
  0185c	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  01861	f7 f9		 idiv	 ecx
  01863	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  01869	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0186c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0186e	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  01871	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01874	c7 84 8a 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 1
  0187f	eb 2c		 jmp	 SHORT $LN245@P_MovePlay
$LN244@P_MovePlay:

; 5976 : 				else
; 5977 : 					playerstatetics[player-players][player->mo->state->nextstate] = 2*NEWTICRATERATIO;

  01881	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01884	2d 00 00 00 00	 sub	 eax, OFFSET _players
  01889	99		 cdq
  0188a	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0188f	f7 f9		 idiv	 ecx
  01891	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  01897	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0189a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0189c	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0189f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  018a2	c7 84 8a 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 2
$LN245@P_MovePlay:

; 5978 : 			}
; 5979 : 		}

  018ad	e9 75 01 00 00	 jmp	 $LN253@P_MovePlay
$LN234@P_MovePlay:

; 5980 : 		else if (player->mo->state == &states[S_PLAY_FALL1] || player->mo->state == &states[S_PLAY_FALL2])

  018b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  018b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  018b7	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  018bc	6b c2 27	 imul	 eax, edx, 39
  018bf	05 00 00 00 00	 add	 eax, OFFSET _states
  018c4	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  018c7	74 1b		 je	 SHORT $LN247@P_MovePlay
  018c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  018cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  018ce	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  018d3	6b c2 28	 imul	 eax, edx, 40
  018d6	05 00 00 00 00	 add	 eax, OFFSET _states
  018db	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  018de	0f 85 43 01 00
	00		 jne	 $LN253@P_MovePlay
$LN247@P_MovePlay:

; 5981 : 		{
; 5982 : 			fixed_t speed;
; 5983 : 			speed = FIXEDUNSCALE(abs(player->mo->momz), player->mo->scale);

  018e4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  018e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  018e9	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  018f0	85 d2		 test	 edx, edx
  018f2	75 0c		 jne	 SHORT $LN816@P_MovePlay
  018f4	c7 85 b0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1175[ebp], 0
  018fe	eb 3e		 jmp	 SHORT $LN817@P_MovePlay
$LN816@P_MovePlay:
  01900	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01903	8b 08		 mov	 ecx, DWORD PTR [eax]
  01905	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  01908	52		 push	 edx
  01909	e8 00 00 00 00	 call	 _abs
  0190e	83 c4 04	 add	 esp, 4
  01911	50		 push	 eax
  01912	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01915	8b 08		 mov	 ecx, DWORD PTR [eax]
  01917	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0191e	c1 e2 10	 shl	 edx, 16			; 00000010H
  01921	52		 push	 edx
  01922	68 00 00 64 00	 push	 6553600			; 00640000H
  01927	e8 00 00 00 00	 call	 _FixedDiv
  0192c	83 c4 08	 add	 esp, 8
  0192f	50		 push	 eax
  01930	e8 00 00 00 00	 call	 _FixedMul
  01935	83 c4 08	 add	 esp, 8
  01938	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv1175[ebp], eax
$LN817@P_MovePlay:
  0193e	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR tv1175[ebp]
  01944	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _speed$94[ebp], eax

; 5984 : 			if (speed < 10*FRACUNIT)

  0194a	81 bd a8 fe ff
	ff 00 00 0a 00	 cmp	 DWORD PTR _speed$94[ebp], 655360 ; 000a0000H
  01954	7d 31		 jge	 SHORT $LN248@P_MovePlay

; 5985 : 				playerstatetics[player-players][player->mo->state->nextstate] = 4*NEWTICRATERATIO;

  01956	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01959	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0195e	99		 cdq
  0195f	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  01964	f7 f9		 idiv	 ecx
  01966	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  0196c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0196f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01971	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  01974	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01977	c7 84 8a 00 00
	00 00 04 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 4
  01982	e9 a0 00 00 00	 jmp	 $LN253@P_MovePlay
$LN248@P_MovePlay:

; 5986 : 			else if (speed < 20*FRACUNIT)

  01987	81 bd a8 fe ff
	ff 00 00 14 00	 cmp	 DWORD PTR _speed$94[ebp], 1310720 ; 00140000H
  01991	7d 2e		 jge	 SHORT $LN250@P_MovePlay

; 5987 : 				playerstatetics[player-players][player->mo->state->nextstate] = 3*NEWTICRATERATIO;

  01993	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01996	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0199b	99		 cdq
  0199c	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  019a1	f7 f9		 idiv	 ecx
  019a3	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  019a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  019ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  019ae	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  019b1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  019b4	c7 84 8a 00 00
	00 00 03 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 3
  019bf	eb 66		 jmp	 SHORT $LN253@P_MovePlay
$LN250@P_MovePlay:

; 5988 : 			else if (speed < 30*FRACUNIT)

  019c1	81 bd a8 fe ff
	ff 00 00 1e 00	 cmp	 DWORD PTR _speed$94[ebp], 1966080 ; 001e0000H
  019cb	7d 2e		 jge	 SHORT $LN252@P_MovePlay

; 5989 : 				playerstatetics[player-players][player->mo->state->nextstate] = 2*NEWTICRATERATIO;

  019cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  019d0	2d 00 00 00 00	 sub	 eax, OFFSET _players
  019d5	99		 cdq
  019d6	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  019db	f7 f9		 idiv	 ecx
  019dd	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  019e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  019e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  019e8	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  019eb	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  019ee	c7 84 8a 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 2
  019f9	eb 2c		 jmp	 SHORT $LN253@P_MovePlay
$LN252@P_MovePlay:

; 5990 : 			else
; 5991 : 				playerstatetics[player-players][player->mo->state->nextstate] = 1*NEWTICRATERATIO;

  019fb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  019fe	2d 00 00 00 00	 sub	 eax, OFFSET _players
  01a03	99		 cdq
  01a04	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  01a09	f7 f9		 idiv	 ecx
  01a0b	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  01a11	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a14	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a16	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  01a19	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a1c	c7 84 8a 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 1
$LN253@P_MovePlay:

; 5992 : 		}
; 5993 : 
; 5994 : 		if (player->pflags & PF_SPINNINGANIM)

  01a27	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a2a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01a30	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  01a36	74 79		 je	 SHORT $LN256@P_MovePlay

; 5995 : 		{
; 5996 : 			if (player->speed > 16*100/player->mo->scale)

  01a38	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a3b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a3d	0f b7 89 cc 00
	00 00		 movzx	 ecx, WORD PTR [ecx+204]
  01a44	b8 40 06 00 00	 mov	 eax, 1600		; 00000640H
  01a49	99		 cdq
  01a4a	f7 f9		 idiv	 ecx
  01a4c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01a4f	39 82 0c 01 00
	00		 cmp	 DWORD PTR [edx+268], eax
  01a55	7e 2e		 jle	 SHORT $LN255@P_MovePlay

; 5997 : 				playerstatetics[player-players][player->mo->state->nextstate] = 1*NEWTICRATERATIO;

  01a57	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a5a	2d 00 00 00 00	 sub	 eax, OFFSET _players
  01a5f	99		 cdq
  01a60	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  01a65	f7 f9		 idiv	 ecx
  01a67	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  01a6d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a70	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a72	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  01a75	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a78	c7 84 8a 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 1
  01a83	eb 2c		 jmp	 SHORT $LN256@P_MovePlay
$LN255@P_MovePlay:

; 5998 : 			else
; 5999 : 				playerstatetics[player-players][player->mo->state->nextstate] = 2*NEWTICRATERATIO;

  01a85	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a88	2d 00 00 00 00	 sub	 eax, OFFSET _players
  01a8d	99		 cdq
  01a8e	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  01a93	f7 f9		 idiv	 ecx
  01a95	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  01a9b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a9e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01aa0	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  01aa3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01aa6	c7 84 8a 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR _playerstatetics[edx+ecx*4], 2
$LN256@P_MovePlay:

; 6000 : 		}
; 6001 : 	}
; 6002 : 
; 6003 : 	// If your running animation is playing, and you're
; 6004 : 	// going too slow, switch back to the walking frames.
; 6005 : 	if ((player->pflags & PF_RUNNINGANIM) && !(player->speed > runspd))

  01ab1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ab4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01aba	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  01ac0	74 1e		 je	 SHORT $LN257@P_MovePlay
  01ac2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ac5	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  01acb	3b 4d dc	 cmp	 ecx, DWORD PTR _runspd$[ebp]
  01ace	7f 10		 jg	 SHORT $LN257@P_MovePlay

; 6006 : 		P_SetPlayerMobjState(player->mo, S_PLAY_RUN1);

  01ad0	6a 04		 push	 4
  01ad2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ad5	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ad7	51		 push	 ecx
  01ad8	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  01add	83 c4 08	 add	 esp, 8
$LN257@P_MovePlay:

; 6007 : 
; 6008 : 	// If Springing, but travelling DOWNWARD, change back!
; 6009 : 	if (player->mo->state == &states[S_PLAY_PLG1] && player->mo->momz < 0)

  01ae0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ae3	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ae5	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01aea	c1 e2 04	 shl	 edx, 4
  01aed	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  01af3	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  01af6	75 20		 jne	 SHORT $LN258@P_MovePlay
  01af8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01afb	8b 08		 mov	 ecx, DWORD PTR [eax]
  01afd	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  01b01	7d 15		 jge	 SHORT $LN258@P_MovePlay

; 6010 : 		P_SetPlayerMobjState(player->mo, S_PLAY_FALL1);

  01b03	6a 27		 push	 39			; 00000027H
  01b05	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b08	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b0a	51		 push	 ecx
  01b0b	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  01b10	83 c4 08	 add	 esp, 8
  01b13	e9 81 00 00 00	 jmp	 $LN260@P_MovePlay
$LN258@P_MovePlay:

; 6011 : 	// If Springing but on the ground, change back!
; 6012 : 	else if (onground && (player->mo->state == &states[S_PLAY_PLG1] || player->mo->state == &states[S_PLAY_FALL1] || player->mo->state == &states[S_PLAY_FALL2] || player->mo->state == &states[S_PLAY_CARRY]) && !player->mo->momz)

  01b18	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  01b1f	74 78		 je	 SHORT $LN260@P_MovePlay
  01b21	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b24	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b26	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01b2b	c1 e2 04	 shl	 edx, 4
  01b2e	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  01b34	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  01b37	74 45		 je	 SHORT $LN261@P_MovePlay
  01b39	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b3c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b3e	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01b43	6b c2 27	 imul	 eax, edx, 39
  01b46	05 00 00 00 00	 add	 eax, OFFSET _states
  01b4b	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01b4e	74 2e		 je	 SHORT $LN261@P_MovePlay
  01b50	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b53	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b55	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01b5a	6b c2 28	 imul	 eax, edx, 40
  01b5d	05 00 00 00 00	 add	 eax, OFFSET _states
  01b62	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01b65	74 17		 je	 SHORT $LN261@P_MovePlay
  01b67	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b6a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b6c	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  01b71	6b c2 29	 imul	 eax, edx, 41
  01b74	05 00 00 00 00	 add	 eax, OFFSET _states
  01b79	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  01b7c	75 1b		 jne	 SHORT $LN260@P_MovePlay
$LN261@P_MovePlay:
  01b7e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b81	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b83	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  01b87	75 10		 jne	 SHORT $LN260@P_MovePlay

; 6013 : 		P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  01b89	6a 01		 push	 1
  01b8b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b8e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b90	51		 push	 ecx
  01b91	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  01b96	83 c4 08	 add	 esp, 8
$LN260@P_MovePlay:

; 6014 : 
; 6015 : 	// If you are stopped and are still walking, stand still!
; 6016 : 	if (!player->mo->momx && !player->mo->momy && !player->mo->momz && (player->pflags & PF_WALKINGANIM))

  01b99	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b9c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b9e	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  01ba2	75 37		 jne	 SHORT $LN262@P_MovePlay
  01ba4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ba7	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ba9	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  01bad	75 2c		 jne	 SHORT $LN262@P_MovePlay
  01baf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01bb2	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bb4	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  01bb8	75 21		 jne	 SHORT $LN262@P_MovePlay
  01bba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01bbd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01bc3	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  01bc9	74 10		 je	 SHORT $LN262@P_MovePlay

; 6017 : 		P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  01bcb	6a 01		 push	 1
  01bcd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01bd0	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bd2	51		 push	 ecx
  01bd3	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  01bd8	83 c4 08	 add	 esp, 8
$LN262@P_MovePlay:

; 6018 : 
; 6019 : 
; 6020 : //////////////////
; 6021 : //GAMEPLAY STUFF//
; 6022 : //////////////////
; 6023 : 
; 6024 : 	// Make sure you're not "jumping" on the ground
; 6025 : 	if (onground && (player->pflags & PF_JUMPED) && !player->mo->momz && !player->homing)

  01bdb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  01be2	74 74		 je	 SHORT $LN263@P_MovePlay
  01be4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01be7	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01bed	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  01bf3	74 63		 je	 SHORT $LN263@P_MovePlay
  01bf5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01bf8	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bfa	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  01bfe	75 58		 jne	 SHORT $LN263@P_MovePlay
  01c00	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c03	0f b6 88 38 01
	00 00		 movzx	 ecx, BYTE PTR [eax+312]
  01c0a	85 c9		 test	 ecx, ecx
  01c0c	75 4a		 jne	 SHORT $LN263@P_MovePlay

; 6026 : 	{
; 6027 : 		player->pflags &= ~PF_JUMPED;

  01c0e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c11	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01c17	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  01c1d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01c20	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 6028 : 		player->secondjump = 0;

  01c26	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c29	c6 80 14 01 00
	00 00		 mov	 BYTE PTR [eax+276], 0

; 6029 : 		player->pflags &= ~PF_THOKKED;

  01c30	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c33	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01c39	81 e1 ff 7f ff
	ff		 and	 ecx, -32769		; ffff7fffH
  01c3f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01c42	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 6030 : 		P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  01c48	6a 01		 push	 1
  01c4a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c4d	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c4f	51		 push	 ecx
  01c50	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  01c55	83 c4 08	 add	 esp, 8
$LN263@P_MovePlay:

; 6031 : 	}
; 6032 : 
; 6033 : 	// Cap the speed limit on a spindash
; 6034 : 	// Up the 60*FRACUNIT number to boost faster, you speed demon you!
; 6035 : 	// Note: You must change the MAXMOVE variable in p_local.h to see any effect over 60.
; 6036 : 	if (player->dashspeed > FIXEDSCALE(player->maxdash<<FRACBITS, player->mo->scale))

  01c58	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c5b	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  01c61	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01c64	51		 push	 ecx
  01c65	68 00 00 64 00	 push	 6553600			; 00640000H
  01c6a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01c6d	8b 02		 mov	 eax, DWORD PTR [edx]
  01c6f	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  01c76	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01c79	51		 push	 ecx
  01c7a	e8 00 00 00 00	 call	 _FixedDiv
  01c7f	83 c4 08	 add	 esp, 8
  01c82	50		 push	 eax
  01c83	e8 00 00 00 00	 call	 _FixedMul
  01c88	83 c4 08	 add	 esp, 8
  01c8b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01c8e	39 82 c0 00 00
	00		 cmp	 DWORD PTR [edx+192], eax
  01c94	7e 41		 jle	 SHORT $LN264@P_MovePlay

; 6037 : 		player->dashspeed = FIXEDSCALE(player->maxdash<<FRACBITS, player->mo->scale);

  01c96	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c99	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  01c9f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01ca2	51		 push	 ecx
  01ca3	68 00 00 64 00	 push	 6553600			; 00640000H
  01ca8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01cab	8b 02		 mov	 eax, DWORD PTR [edx]
  01cad	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  01cb4	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01cb7	51		 push	 ecx
  01cb8	e8 00 00 00 00	 call	 _FixedDiv
  01cbd	83 c4 08	 add	 esp, 8
  01cc0	50		 push	 eax
  01cc1	e8 00 00 00 00	 call	 _FixedMul
  01cc6	83 c4 08	 add	 esp, 8
  01cc9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01ccc	89 82 c0 00 00
	00		 mov	 DWORD PTR [edx+192], eax
  01cd2	e9 86 00 00 00	 jmp	 $LN266@P_MovePlay
$LN264@P_MovePlay:

; 6038 : 	else if (player->dashspeed > 0 && player->dashspeed < FIXEDSCALE(player->mindash*FRACUNIT, player->mo->scale)/NEWTICRATERATIO)

  01cd7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01cda	83 b8 c0 00 00
	00 00		 cmp	 DWORD PTR [eax+192], 0
  01ce1	7e 7a		 jle	 SHORT $LN266@P_MovePlay
  01ce3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ce6	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  01cec	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01cef	51		 push	 ecx
  01cf0	68 00 00 64 00	 push	 6553600			; 00640000H
  01cf5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01cf8	8b 02		 mov	 eax, DWORD PTR [edx]
  01cfa	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  01d01	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01d04	51		 push	 ecx
  01d05	e8 00 00 00 00	 call	 _FixedDiv
  01d0a	83 c4 08	 add	 esp, 8
  01d0d	50		 push	 eax
  01d0e	e8 00 00 00 00	 call	 _FixedMul
  01d13	83 c4 08	 add	 esp, 8
  01d16	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01d19	39 82 c0 00 00
	00		 cmp	 DWORD PTR [edx+192], eax
  01d1f	7d 3c		 jge	 SHORT $LN266@P_MovePlay

; 6039 : 		player->dashspeed = FIXEDSCALE(player->mindash*FRACUNIT, player->mo->scale)/NEWTICRATERATIO;

  01d21	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d24	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  01d2a	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01d2d	51		 push	 ecx
  01d2e	68 00 00 64 00	 push	 6553600			; 00640000H
  01d33	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01d36	8b 02		 mov	 eax, DWORD PTR [edx]
  01d38	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  01d3f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01d42	51		 push	 ecx
  01d43	e8 00 00 00 00	 call	 _FixedDiv
  01d48	83 c4 08	 add	 esp, 8
  01d4b	50		 push	 eax
  01d4c	e8 00 00 00 00	 call	 _FixedMul
  01d51	83 c4 08	 add	 esp, 8
  01d54	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01d57	89 82 c0 00 00
	00		 mov	 DWORD PTR [edx+192], eax
$LN266@P_MovePlay:

; 6040 : 
; 6041 : 	// Glide MOMZ
; 6042 : 	// AKA my own gravity. =)
; 6043 : 	if (player->pflags & PF_GLIDING)

  01d5d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d60	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01d66	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  01d6c	0f 84 b6 01 00
	00		 je	 $LN267@P_MovePlay

; 6044 : 	{
; 6045 : 		fixed_t leeway;
; 6046 : 
; 6047 : 		if (player->mo->momz == (-2*FRACUNIT)/NEWTICRATERATIO)

  01d72	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d75	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d77	81 79 50 00 00
	fe ff		 cmp	 DWORD PTR [ecx+80], -131072 ; fffe0000H
  01d7e	75 0e		 jne	 SHORT $LN269@P_MovePlay

; 6048 : 			player->mo->momz = (-2*FRACUNIT)/NEWTICRATERATIO;

  01d80	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d83	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d85	c7 41 50 00 00
	fe ff		 mov	 DWORD PTR [ecx+80], -131072 ; fffe0000H
  01d8c	eb 24		 jmp	 SHORT $LN271@P_MovePlay
$LN269@P_MovePlay:

; 6049 : 		else if (player->mo->momz < (-2*FRACUNIT)/NEWTICRATERATIO)

  01d8e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d91	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d93	81 79 50 00 00
	fe ff		 cmp	 DWORD PTR [ecx+80], -131072 ; fffe0000H
  01d9a	7d 16		 jge	 SHORT $LN271@P_MovePlay

; 6050 : 			player->mo->momz += (3*(FRACUNIT/4))/NEWTICRATERATIO;

  01d9c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d9f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01da1	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  01da4	81 c2 00 c0 00
	00		 add	 edx, 49152		; 0000c000H
  01daa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01dad	8b 08		 mov	 ecx, DWORD PTR [eax]
  01daf	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN271@P_MovePlay:

; 6051 : 
; 6052 : 		// Strafing while gliding.
; 6053 : 		leeway = FixedAngle(cmd->sidemove*(FRACUNIT/2));

  01db2	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  01db5	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  01db9	c1 e1 0f	 shl	 ecx, 15			; 0000000fH
  01dbc	51		 push	 ecx
  01dbd	e8 00 00 00 00	 call	 _FixedAngle
  01dc2	83 c4 04	 add	 esp, 4
  01dc5	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _leeway$93[ebp], eax

; 6054 : 
; 6055 : 		if ((player->mo->eflags & MFE_UNDERWATER))

  01dcb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01dce	8b 08		 mov	 ecx, DWORD PTR [eax]
  01dd0	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01dd6	83 e2 08	 and	 edx, 8
  01dd9	74 40		 je	 SHORT $LN272@P_MovePlay

; 6056 : 			P_InstaThrust(player->mo, player->mo->angle-leeway, (((player->actionspd<<FRACBITS)/2) + player->glidetime*750)/NEWTICRATERATIO);

  01ddb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01dde	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [eax+236]
  01de4	c1 e0 10	 shl	 eax, 16			; 00000010H
  01de7	99		 cdq
  01de8	2b c2		 sub	 eax, edx
  01dea	d1 f8		 sar	 eax, 1
  01dec	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01def	69 91 20 01 00
	00 ee 02 00 00	 imul	 edx, DWORD PTR [ecx+288], 750
  01df9	03 c2		 add	 eax, edx
  01dfb	50		 push	 eax
  01dfc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01dff	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e01	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  01e04	2b 95 a4 fe ff
	ff		 sub	 edx, DWORD PTR _leeway$93[ebp]
  01e0a	52		 push	 edx
  01e0b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e0e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e10	51		 push	 ecx
  01e11	e8 00 00 00 00	 call	 _P_InstaThrust
  01e16	83 c4 0c	 add	 esp, 12			; 0000000cH
  01e19	eb 39		 jmp	 SHORT $LN273@P_MovePlay
$LN272@P_MovePlay:

; 6057 : 		else
; 6058 : 			P_InstaThrust(player->mo, player->mo->angle-leeway, ((player->actionspd<<FRACBITS) + player->glidetime*1500)/NEWTICRATERATIO);

  01e1b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e1e	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  01e24	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01e27	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01e2a	69 82 20 01 00
	00 dc 05 00 00	 imul	 eax, DWORD PTR [edx+288], 1500
  01e34	03 c8		 add	 ecx, eax
  01e36	51		 push	 ecx
  01e37	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01e3a	8b 11		 mov	 edx, DWORD PTR [ecx]
  01e3c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01e3f	2b 85 a4 fe ff
	ff		 sub	 eax, DWORD PTR _leeway$93[ebp]
  01e45	50		 push	 eax
  01e46	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01e49	8b 11		 mov	 edx, DWORD PTR [ecx]
  01e4b	52		 push	 edx
  01e4c	e8 00 00 00 00	 call	 _P_InstaThrust
  01e51	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN273@P_MovePlay:

; 6059 : 
; 6060 : 		player->glidetime++;

  01e54	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e57	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  01e5d	83 c1 01	 add	 ecx, 1
  01e60	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01e63	89 8a 20 01 00
	00		 mov	 DWORD PTR [edx+288], ecx

; 6061 : 
; 6062 : 		if (!(player->pflags & PF_JUMPDOWN)) // If not holding the jump button

  01e69	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e6c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01e72	83 e1 08	 and	 ecx, 8
  01e75	0f 85 ab 00 00
	00		 jne	 $LN276@P_MovePlay

; 6063 : 		{
; 6064 : 			P_ResetPlayer(player); // down, stop gliding.

  01e7b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e7e	50		 push	 eax
  01e7f	e8 00 00 00 00	 call	 _P_ResetPlayer
  01e84	83 c4 04	 add	 esp, 4

; 6065 : 			if ((player->charability2 == CA2_MULTIABILITY)
; 6066 : 				|| (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]) && player->charability == CA_GLIDEANDCLIMB))

  01e87	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e8a	83 b8 dc 00 00
	00 01		 cmp	 DWORD PTR [eax+220], 1
  01e91	74 35		 je	 SHORT $LN277@P_MovePlay
  01e93	b8 04 00 00 00	 mov	 eax, 4
  01e98	6b c8 0f	 imul	 ecx, eax, 15
  01e9b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01e9e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  01ea3	74 4d		 je	 SHORT $LN275@P_MovePlay
  01ea5	b8 04 00 00 00	 mov	 eax, 4
  01eaa	6b c8 18	 imul	 ecx, eax, 24
  01ead	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01eb0	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  01eb4	83 e0 7f	 and	 eax, 127		; 0000007fH
  01eb7	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  01eba	75 36		 jne	 SHORT $LN275@P_MovePlay
  01ebc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ebf	83 b8 d8 00 00
	00 02		 cmp	 DWORD PTR [eax+216], 2
  01ec6	75 2a		 jne	 SHORT $LN275@P_MovePlay
$LN277@P_MovePlay:

; 6067 : 			{
; 6068 : 				player->pflags |= PF_JUMPED;

  01ec8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ecb	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01ed1	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  01ed7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01eda	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 6069 : 				P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  01ee0	6a 0c		 push	 12			; 0000000cH
  01ee2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ee5	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ee7	51		 push	 ecx
  01ee8	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  01eed	83 c4 08	 add	 esp, 8

; 6070 : 			}

  01ef0	eb 34		 jmp	 SHORT $LN276@P_MovePlay
$LN275@P_MovePlay:

; 6071 : 			else
; 6072 : 			{
; 6073 : 				player->mo->momx >>= 1;

  01ef2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ef5	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ef7	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  01efa	d1 fa		 sar	 edx, 1
  01efc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01eff	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f01	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 6074 : 				player->mo->momy >>= 1;

  01f04	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f07	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f09	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  01f0c	d1 fa		 sar	 edx, 1
  01f0e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f11	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f13	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 6075 : 				P_SetPlayerMobjState(player->mo, S_PLAY_FALL1);

  01f16	6a 27		 push	 39			; 00000027H
  01f18	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f1b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f1d	51		 push	 ecx
  01f1e	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  01f23	83 c4 08	 add	 esp, 8
$LN276@P_MovePlay:

; 6076 : 			}
; 6077 : 		}
; 6078 : 	}

  01f26	eb 50		 jmp	 SHORT $LN281@P_MovePlay
$LN267@P_MovePlay:

; 6079 : 	else if (player->climbing) // 'Deceleration' for climbing on walls.

  01f28	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f2b	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  01f32	74 44		 je	 SHORT $LN281@P_MovePlay

; 6080 : 	{
; 6081 : 		if (player->mo->momz > 0)

  01f34	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f37	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f39	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  01f3d	7e 18		 jle	 SHORT $LN279@P_MovePlay

; 6082 : 			player->mo->momz -= FRACUNIT/(NEWTICRATERATIO*2);

  01f3f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f42	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f44	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  01f47	81 ea 00 80 00
	00		 sub	 edx, 32768		; 00008000H
  01f4d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f50	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f52	89 51 50	 mov	 DWORD PTR [ecx+80], edx
  01f55	eb 21		 jmp	 SHORT $LN281@P_MovePlay
$LN279@P_MovePlay:

; 6083 : 		else if (player->mo->momz < 0)

  01f57	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f5c	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  01f60	7d 16		 jge	 SHORT $LN281@P_MovePlay

; 6084 : 			player->mo->momz += FRACUNIT/(NEWTICRATERATIO*2);

  01f62	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f65	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f67	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  01f6a	81 c2 00 80 00
	00		 add	 edx, 32768		; 00008000H
  01f70	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f73	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f75	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN281@P_MovePlay:

; 6085 : 	}
; 6086 : 
; 6087 : 	if (!(player->charability == CA_GLIDEANDCLIMB)) // If you can't glide, then why the heck would you be gliding?

  01f78	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f7b	83 b8 d8 00 00
	00 02		 cmp	 DWORD PTR [eax+216], 2
  01f82	74 32		 je	 SHORT $LN282@P_MovePlay

; 6088 : 	{
; 6089 : 		player->pflags &= ~PF_GLIDING;

  01f84	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f87	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01f8d	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  01f93	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01f96	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 6090 : 		player->glidetime = 0;

  01f9c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f9f	c7 80 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+288], 0

; 6091 : 		player->climbing = 0;

  01fa9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01fac	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0
$LN282@P_MovePlay:

; 6092 : 	}
; 6093 : 
; 6094 : 	// If you're running fast enough, you can create splashes as you run in shallow water.
; 6095 : 	if (!player->climbing && player->mo->z + player->mo->height >= player->mo->watertop && player->mo->z <= player->mo->watertop && (player->speed > runspd || (player->pflags & PF_STARTDASH))
; 6096 : 		&& leveltime % (TICRATE/7) == 0 && player->mo->momz == 0 && !player->spectator)

  01fb6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01fb9	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  01fc0	0f 85 e9 00 00
	00		 jne	 $LN283@P_MovePlay
  01fc6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01fc9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fcb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01fce	8b 02		 mov	 eax, DWORD PTR [edx]
  01fd0	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  01fd3	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  01fd6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01fd9	8b 02		 mov	 eax, DWORD PTR [edx]
  01fdb	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  01fe1	0f 8c c8 00 00
	00		 jl	 $LN283@P_MovePlay
  01fe7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01fea	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fec	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01fef	8b 02		 mov	 eax, DWORD PTR [edx]
  01ff1	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  01ff4	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  01ffa	0f 8f af 00 00
	00		 jg	 $LN283@P_MovePlay
  02000	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02003	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  02009	3b 4d dc	 cmp	 ecx, DWORD PTR _runspd$[ebp]
  0200c	7f 15		 jg	 SHORT $LN284@P_MovePlay
  0200e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02011	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02017	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  0201d	0f 84 8c 00 00
	00		 je	 $LN283@P_MovePlay
$LN284@P_MovePlay:
  02023	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02028	33 d2		 xor	 edx, edx
  0202a	b9 05 00 00 00	 mov	 ecx, 5
  0202f	f7 f1		 div	 ecx
  02031	85 d2		 test	 edx, edx
  02033	75 7a		 jne	 SHORT $LN283@P_MovePlay
  02035	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0203a	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  0203e	75 6f		 jne	 SHORT $LN283@P_MovePlay
  02040	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02043	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  0204a	85 c9		 test	 ecx, ecx
  0204c	75 61		 jne	 SHORT $LN283@P_MovePlay

; 6097 : 	{
; 6098 : 		mobj_t *water = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->watertop, MT_SPLISH);

  0204e	68 b5 00 00 00	 push	 181			; 000000b5H
  02053	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02056	8b 08		 mov	 ecx, DWORD PTR [eax]
  02058	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  0205e	52		 push	 edx
  0205f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02062	8b 08		 mov	 ecx, DWORD PTR [eax]
  02064	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  02067	52		 push	 edx
  02068	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0206b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0206d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02070	52		 push	 edx
  02071	e8 00 00 00 00	 call	 _P_SpawnMobj
  02076	83 c4 10	 add	 esp, 16			; 00000010H
  02079	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _water$92[ebp], eax

; 6099 : 		S_StartSound(water, sfx_wslap);

  0207f	68 f0 00 00 00	 push	 240			; 000000f0H
  02084	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _water$92[ebp]
  0208a	50		 push	 eax
  0208b	e8 00 00 00 00	 call	 _S_StartSound
  02090	83 c4 08	 add	 esp, 8

; 6100 : 		P_SetScale(water, player->mo->scale);	}

  02093	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02096	8b 08		 mov	 ecx, DWORD PTR [eax]
  02098	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0209f	52		 push	 edx
  020a0	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _water$92[ebp]
  020a6	50		 push	 eax
  020a7	e8 00 00 00 00	 call	 _P_SetScale
  020ac	83 c4 08	 add	 esp, 8
$LN283@P_MovePlay:

; 6101 : 
; 6102 : 	// Little water sound while touching water - just a nicety.
; 6103 : 	if ((player->mo->eflags & MFE_TOUCHWATER) && !(player->mo->eflags & MFE_UNDERWATER) && !player->spectator)

  020af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  020b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  020b4	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  020ba	83 e2 04	 and	 edx, 4
  020bd	74 4d		 je	 SHORT $LN286@P_MovePlay
  020bf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  020c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  020c4	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  020ca	83 e2 08	 and	 edx, 8
  020cd	75 3d		 jne	 SHORT $LN286@P_MovePlay
  020cf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  020d2	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  020d9	85 c9		 test	 ecx, ecx
  020db	75 2f		 jne	 SHORT $LN286@P_MovePlay

; 6104 : 	{
; 6105 : 		if (P_Random() & 1 && leveltime % TICRATE == 0)

  020dd	e8 00 00 00 00	 call	 _P_Random
  020e2	0f b6 c0	 movzx	 eax, al
  020e5	83 e0 01	 and	 eax, 1
  020e8	74 22		 je	 SHORT $LN286@P_MovePlay
  020ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  020ef	33 d2		 xor	 edx, edx
  020f1	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  020f6	f7 f1		 div	 ecx
  020f8	85 d2		 test	 edx, edx
  020fa	75 10		 jne	 SHORT $LN286@P_MovePlay

; 6106 : 			S_StartSound(player->mo, sfx_floush);

  020fc	6a 46		 push	 70			; 00000046H
  020fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02101	8b 08		 mov	 ecx, DWORD PTR [eax]
  02103	51		 push	 ecx
  02104	e8 00 00 00 00	 call	 _S_StartSound
  02109	83 c4 08	 add	 esp, 8
$LN286@P_MovePlay:

; 6107 : 	}
; 6108 : 
; 6109 : //////////////////////////
; 6110 : // RING & SCORE			//
; 6111 : // EXTRA LIFE BONUSES	//
; 6112 : //////////////////////////
; 6113 : 
; 6114 : 	// Ahh ahh! No ring shields in special stages!
; 6115 : 	if (player->powers[pw_ringshield] && G_IsSpecialStage(gamemap))

  0210c	b8 04 00 00 00	 mov	 eax, 4
  02111	6b c8 09	 imul	 ecx, eax, 9
  02114	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02117	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0211c	74 28		 je	 SHORT $LN287@P_MovePlay
  0211e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  02125	50		 push	 eax
  02126	e8 00 00 00 00	 call	 _G_IsSpecialStage
  0212b	83 c4 04	 add	 esp, 4
  0212e	85 c0		 test	 eax, eax
  02130	74 14		 je	 SHORT $LN287@P_MovePlay

; 6116 : 		P_DamageMobj(player->mo, NULL, NULL, 1);

  02132	6a 01		 push	 1
  02134	6a 00		 push	 0
  02136	6a 00		 push	 0
  02138	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0213b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0213d	51		 push	 ecx
  0213e	e8 00 00 00 00	 call	 _P_DamageMobj
  02143	83 c4 10	 add	 esp, 16			; 00000010H
$LN287@P_MovePlay:

; 6117 : 
; 6118 : 	if (!G_IsSpecialStage(gamemap)
; 6119 : 		&& (gametype == GT_COOP || gametype == GT_RACE)
; 6120 : 		&& !(mapheaderinfo[gamemap-1].typeoflevel & TOL_NIGHTS)) // Don't do it in special stages.

  02146	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0214d	50		 push	 eax
  0214e	e8 00 00 00 00	 call	 _G_IsSpecialStage
  02153	83 c4 04	 add	 esp, 4
  02156	85 c0		 test	 eax, eax
  02158	0f 85 6e 01 00
	00		 jne	 $LN294@P_MovePlay
  0215e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  02165	85 c0		 test	 eax, eax
  02167	74 10		 je	 SHORT $LN289@P_MovePlay
  02169	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  02170	83 f8 02	 cmp	 eax, 2
  02173	0f 85 53 01 00
	00		 jne	 $LN294@P_MovePlay
$LN289@P_MovePlay:
  02179	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  02180	83 e8 01	 sub	 eax, 1
  02183	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  02189	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  02190	83 e2 40	 and	 edx, 64			; 00000040H
  02193	0f 85 33 01 00
	00		 jne	 $LN294@P_MovePlay

; 6121 : 	{
; 6122 : 		if ((player->health > 100) && (!player->xtralife))

  02199	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0219c	83 78 28 64	 cmp	 DWORD PTR [eax+40], 100	; 00000064H
  021a0	0f 8e 83 00 00
	00		 jle	 $LN290@P_MovePlay
  021a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  021a9	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [eax+264], 0
  021b0	75 77		 jne	 SHORT $LN290@P_MovePlay

; 6123 : 		{
; 6124 : 			P_GivePlayerLives(player, 1);

  021b2	6a 01		 push	 1
  021b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  021b7	50		 push	 eax
  021b8	e8 00 00 00 00	 call	 _P_GivePlayerLives
  021bd	83 c4 08	 add	 esp, 8

; 6125 : 
; 6126 : 			if (mariomode)

  021c0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  021c7	25 00 01 00 00	 and	 eax, 256		; 00000100H
  021cc	74 12		 je	 SHORT $LN291@P_MovePlay

; 6127 : 				S_StartSound(player->mo, sfx_marioa);

  021ce	6a 66		 push	 102			; 00000066H
  021d0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  021d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  021d5	51		 push	 ecx
  021d6	e8 00 00 00 00	 call	 _S_StartSound
  021db	83 c4 08	 add	 esp, 8
  021de	eb 3c		 jmp	 SHORT $LN292@P_MovePlay
$LN291@P_MovePlay:

; 6128 : 			else
; 6129 : 			{
; 6130 : 				if (P_IsLocalPlayer(player))

  021e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  021e3	50		 push	 eax
  021e4	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  021e9	83 c4 04	 add	 esp, 4
  021ec	85 c0		 test	 eax, eax
  021ee	74 15		 je	 SHORT $LN293@P_MovePlay

; 6131 : 				{
; 6132 : 					S_StopMusic();

  021f0	e8 00 00 00 00	 call	 _S_StopMusic
  021f5	90		 npad	 1

; 6133 : 					S_ChangeMusic(mus_xtlife, false);

  021f6	6a 00		 push	 0
  021f8	68 14 04 00 00	 push	 1044			; 00000414H
  021fd	e8 00 00 00 00	 call	 _S_ChangeMusic
  02202	83 c4 08	 add	 esp, 8
$LN293@P_MovePlay:

; 6134 : 				}
; 6135 : 				player->powers[pw_extralife] = extralifetics + 1;

  02205	a1 00 00 00 00	 mov	 eax, DWORD PTR _extralifetics
  0220a	83 c0 01	 add	 eax, 1
  0220d	b9 04 00 00 00	 mov	 ecx, 4
  02212	c1 e1 03	 shl	 ecx, 3
  02215	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02218	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
$LN292@P_MovePlay:

; 6136 : 			}
; 6137 : 			player->xtralife = 1;

  0221c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0221f	c7 80 08 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+264], 1
$LN290@P_MovePlay:

; 6138 : 		}
; 6139 : 
; 6140 : 		if ((player->health > 200) && (player->xtralife > 0 && player->xtralife < 2))

  02229	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0222c	81 78 28 c8 00
	00 00		 cmp	 DWORD PTR [eax+40], 200	; 000000c8H
  02233	0f 8e 93 00 00
	00		 jle	 $LN294@P_MovePlay
  02239	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0223c	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [eax+264], 0
  02243	0f 8e 83 00 00
	00		 jle	 $LN294@P_MovePlay
  02249	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0224c	83 b8 08 01 00
	00 02		 cmp	 DWORD PTR [eax+264], 2
  02253	7d 77		 jge	 SHORT $LN294@P_MovePlay

; 6141 : 		{
; 6142 : 			P_GivePlayerLives(player, 1);

  02255	6a 01		 push	 1
  02257	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0225a	50		 push	 eax
  0225b	e8 00 00 00 00	 call	 _P_GivePlayerLives
  02260	83 c4 08	 add	 esp, 8

; 6143 : 
; 6144 : 			if (mariomode)

  02263	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0226a	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0226f	74 12		 je	 SHORT $LN295@P_MovePlay

; 6145 : 				S_StartSound(player->mo, sfx_marioa);

  02271	6a 66		 push	 102			; 00000066H
  02273	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02276	8b 08		 mov	 ecx, DWORD PTR [eax]
  02278	51		 push	 ecx
  02279	e8 00 00 00 00	 call	 _S_StartSound
  0227e	83 c4 08	 add	 esp, 8
  02281	eb 3c		 jmp	 SHORT $LN296@P_MovePlay
$LN295@P_MovePlay:

; 6146 : 			else
; 6147 : 			{
; 6148 : 				if (P_IsLocalPlayer(player))

  02283	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02286	50		 push	 eax
  02287	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  0228c	83 c4 04	 add	 esp, 4
  0228f	85 c0		 test	 eax, eax
  02291	74 15		 je	 SHORT $LN297@P_MovePlay

; 6149 : 				{
; 6150 : 					S_StopMusic();

  02293	e8 00 00 00 00	 call	 _S_StopMusic
  02298	90		 npad	 1

; 6151 : 					S_ChangeMusic(mus_xtlife, false);

  02299	6a 00		 push	 0
  0229b	68 14 04 00 00	 push	 1044			; 00000414H
  022a0	e8 00 00 00 00	 call	 _S_ChangeMusic
  022a5	83 c4 08	 add	 esp, 8
$LN297@P_MovePlay:

; 6152 : 				}
; 6153 : 				player->powers[pw_extralife] = extralifetics + 1;

  022a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _extralifetics
  022ad	83 c0 01	 add	 eax, 1
  022b0	b9 04 00 00 00	 mov	 ecx, 4
  022b5	c1 e1 03	 shl	 ecx, 3
  022b8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  022bb	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
$LN296@P_MovePlay:

; 6154 : 			}
; 6155 : 			player->xtralife = 2;

  022bf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  022c2	c7 80 08 01 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+264], 2
$LN294@P_MovePlay:

; 6156 : 		}
; 6157 : 	}
; 6158 : 
; 6159 : 	//////////////////////////
; 6160 : 	// SUPER SONIC STUFF	//
; 6161 : 	//////////////////////////
; 6162 : 
; 6163 : 	P_DoSuperStuff(player);

  022cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  022cf	50		 push	 eax
  022d0	e8 00 00 00 00	 call	 _P_DoSuperStuff
  022d5	83 c4 04	 add	 esp, 4

; 6164 : 
; 6165 : 	/////////////////////////
; 6166 : 	//Special Music Changes//
; 6167 : 	/////////////////////////
; 6168 : 
; 6169 : 	P_CheckSneakerAndLivesTimer(player);

  022d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  022db	50		 push	 eax
  022dc	e8 00 00 00 00	 call	 _P_CheckSneakerAndLivesTimer
  022e1	83 c4 04	 add	 esp, 4

; 6170 : 
; 6171 : ///////////////////////////
; 6172 : //LOTS OF UNDERWATER CODE//
; 6173 : ///////////////////////////
; 6174 : 
; 6175 : 	// Spawn Sonic's bubbles
; 6176 : 	if (player->mo->eflags & MFE_UNDERWATER && !(player->powers[pw_watershield]) && !player->spectator)

  022e4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  022e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  022e9	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  022ef	83 e2 08	 and	 edx, 8
  022f2	0f 84 05 03 00
	00		 je	 $LN304@P_MovePlay
  022f8	b8 04 00 00 00	 mov	 eax, 4
  022fd	6b c8 0b	 imul	 ecx, eax, 11
  02300	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02303	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  02308	0f 85 ef 02 00
	00		 jne	 $LN304@P_MovePlay
  0230e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02311	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  02318	85 c9		 test	 ecx, ecx
  0231a	0f 85 dd 02 00
	00		 jne	 $LN304@P_MovePlay

; 6177 : 	{
; 6178 : 		fixed_t zh;
; 6179 : 
; 6180 : 		if (player->mo->eflags & MFE_VERTICALFLIP)

  02320	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02323	8b 08		 mov	 ecx, DWORD PTR [eax]
  02325	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0232b	83 e2 20	 and	 edx, 32			; 00000020H
  0232e	74 30		 je	 SHORT $LN299@P_MovePlay

; 6181 : 			zh = player->mo->z + player->mo->height - FixedDiv(player->mo->height,5*(FRACUNIT/4));

  02330	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02333	8b 08		 mov	 ecx, DWORD PTR [eax]
  02335	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02338	8b 02		 mov	 eax, DWORD PTR [edx]
  0233a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0233d	03 70 44	 add	 esi, DWORD PTR [eax+68]
  02340	68 00 40 01 00	 push	 81920			; 00014000H
  02345	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02348	8b 11		 mov	 edx, DWORD PTR [ecx]
  0234a	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0234d	50		 push	 eax
  0234e	e8 00 00 00 00	 call	 _FixedDiv
  02353	83 c4 08	 add	 esp, 8
  02356	2b f0		 sub	 esi, eax
  02358	89 b5 9c fe ff
	ff		 mov	 DWORD PTR _zh$91[ebp], esi
  0235e	eb 24		 jmp	 SHORT $LN300@P_MovePlay
$LN299@P_MovePlay:

; 6182 : 		else
; 6183 : 			zh = player->mo->z + FixedDiv(player->mo->height,5*(FRACUNIT/4));

  02360	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02363	8b 30		 mov	 esi, DWORD PTR [eax]
  02365	68 00 40 01 00	 push	 81920			; 00014000H
  0236a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0236d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0236f	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  02372	50		 push	 eax
  02373	e8 00 00 00 00	 call	 _FixedDiv
  02378	83 c4 08	 add	 esp, 8
  0237b	03 46 18	 add	 eax, DWORD PTR [esi+24]
  0237e	89 85 9c fe ff
	ff		 mov	 DWORD PTR _zh$91[ebp], eax
$LN300@P_MovePlay:

; 6184 : 
; 6185 : 		if (!(P_Random() % 16))

  02384	e8 00 00 00 00	 call	 _P_Random
  02389	0f b6 c0	 movzx	 eax, al
  0238c	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  02391	79 05		 jns	 SHORT $LN829@P_MovePlay
  02393	48		 dec	 eax
  02394	83 c8 f0	 or	 eax, -16		; fffffff0H
  02397	40		 inc	 eax
$LN829@P_MovePlay:
  02398	85 c0		 test	 eax, eax
  0239a	75 32		 jne	 SHORT $LN301@P_MovePlay

; 6186 : 			P_SpawnMobj(player->mo->x, player->mo->y, zh, MT_SMALLBUBBLE)->threshold = 42;

  0239c	68 b7 00 00 00	 push	 183			; 000000b7H
  023a1	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _zh$91[ebp]
  023a7	50		 push	 eax
  023a8	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  023ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  023ad	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  023b0	50		 push	 eax
  023b1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  023b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  023b6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  023b9	50		 push	 eax
  023ba	e8 00 00 00 00	 call	 _P_SpawnMobj
  023bf	83 c4 10	 add	 esp, 16			; 00000010H
  023c2	c7 80 a0 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [eax+160], 42	; 0000002aH
  023cc	eb 44		 jmp	 SHORT $LN303@P_MovePlay
$LN301@P_MovePlay:

; 6187 : 		else if (!(P_Random() % 96))

  023ce	e8 00 00 00 00	 call	 _P_Random
  023d3	0f b6 c0	 movzx	 eax, al
  023d6	99		 cdq
  023d7	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  023dc	f7 f9		 idiv	 ecx
  023de	85 d2		 test	 edx, edx
  023e0	75 30		 jne	 SHORT $LN303@P_MovePlay

; 6188 : 			P_SpawnMobj(player->mo->x, player->mo->y, zh, MT_MEDIUMBUBBLE)->threshold = 42;

  023e2	68 b8 00 00 00	 push	 184			; 000000b8H
  023e7	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _zh$91[ebp]
  023ed	50		 push	 eax
  023ee	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  023f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  023f3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  023f6	50		 push	 eax
  023f7	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  023fa	8b 11		 mov	 edx, DWORD PTR [ecx]
  023fc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  023ff	50		 push	 eax
  02400	e8 00 00 00 00	 call	 _P_SpawnMobj
  02405	83 c4 10	 add	 esp, 16			; 00000010H
  02408	c7 80 a0 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [eax+160], 42	; 0000002aH
$LN303@P_MovePlay:

; 6189 : 
; 6190 : 		// Tails stirs up the water while flying in it
; 6191 : 		if (player->powers[pw_tailsfly] && (leveltime & 1) && player->charability != CA_SWIM)

  02412	b8 04 00 00 00	 mov	 eax, 4
  02417	6b c8 05	 imul	 ecx, eax, 5
  0241a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0241d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  02422	0f 84 d5 01 00
	00		 je	 $LN304@P_MovePlay
  02428	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0242d	83 e0 01	 and	 eax, 1
  02430	0f 84 c7 01 00
	00		 je	 $LN304@P_MovePlay
  02436	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02439	83 b8 d8 00 00
	00 06		 cmp	 DWORD PTR [eax+216], 6
  02440	0f 84 b7 01 00
	00		 je	 $LN304@P_MovePlay

; 6192 : 		{
; 6193 : 			fixed_t radius = (3*player->mo->radius)>>1;

  02446	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02449	8b 08		 mov	 ecx, DWORD PTR [eax]
  0244b	6b 51 40 03	 imul	 edx, DWORD PTR [ecx+64], 3
  0244f	d1 fa		 sar	 edx, 1
  02451	89 95 98 fe ff
	ff		 mov	 DWORD PTR _radius$90[ebp], edx

; 6194 : 			angle_t fa = ((leveltime%45)*FINEANGLES/8) & FINEMASK;

  02457	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0245c	33 d2		 xor	 edx, edx
  0245e	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  02463	f7 f1		 div	 ecx
  02465	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  02468	c1 ea 03	 shr	 edx, 3
  0246b	81 e2 ff 1f 00
	00		 and	 edx, 8191		; 00001fffH
  02471	89 95 94 fe ff
	ff		 mov	 DWORD PTR _fa$89[ebp], edx

; 6195 : 			fixed_t stirwaterx = FixedMul(FINECOSINE(fa),radius);

  02477	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _radius$90[ebp]
  0247d	50		 push	 eax
  0247e	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$89[ebp]
  02484	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0248a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0248d	50		 push	 eax
  0248e	e8 00 00 00 00	 call	 _FixedMul
  02493	83 c4 08	 add	 esp, 8
  02496	89 85 90 fe ff
	ff		 mov	 DWORD PTR _stirwaterx$88[ebp], eax

; 6196 : 			fixed_t stirwatery = FixedMul(FINESINE(fa),radius);

  0249c	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _radius$90[ebp]
  024a2	50		 push	 eax
  024a3	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$89[ebp]
  024a9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  024b0	52		 push	 edx
  024b1	e8 00 00 00 00	 call	 _FixedMul
  024b6	83 c4 08	 add	 esp, 8
  024b9	89 85 8c fe ff
	ff		 mov	 DWORD PTR _stirwatery$87[ebp], eax

; 6197 : 			fixed_t stirwaterz;
; 6198 : 			mobj_t *bubble;
; 6199 : 
; 6200 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  024bf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  024c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  024c4	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  024ca	83 e2 20	 and	 edx, 32			; 00000020H
  024cd	74 30		 je	 SHORT $LN305@P_MovePlay

; 6201 : 				stirwaterz = player->mo->z + player->mo->height - FixedDiv(player->mo->height,3*FRACUNIT/2);

  024cf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  024d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  024d4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  024d7	8b 02		 mov	 eax, DWORD PTR [edx]
  024d9	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  024dc	03 70 44	 add	 esi, DWORD PTR [eax+68]
  024df	68 00 80 01 00	 push	 98304			; 00018000H
  024e4	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  024e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  024e9	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  024ec	50		 push	 eax
  024ed	e8 00 00 00 00	 call	 _FixedDiv
  024f2	83 c4 08	 add	 esp, 8
  024f5	2b f0		 sub	 esi, eax
  024f7	89 b5 88 fe ff
	ff		 mov	 DWORD PTR _stirwaterz$86[ebp], esi
  024fd	eb 24		 jmp	 SHORT $LN306@P_MovePlay
$LN305@P_MovePlay:

; 6202 : 			else
; 6203 : 				stirwaterz = player->mo->z + FixedDiv(player->mo->height,3*FRACUNIT/2);

  024ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02502	8b 30		 mov	 esi, DWORD PTR [eax]
  02504	68 00 80 01 00	 push	 98304			; 00018000H
  02509	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0250c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0250e	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  02511	50		 push	 eax
  02512	e8 00 00 00 00	 call	 _FixedDiv
  02517	83 c4 08	 add	 esp, 8
  0251a	03 46 18	 add	 eax, DWORD PTR [esi+24]
  0251d	89 85 88 fe ff
	ff		 mov	 DWORD PTR _stirwaterz$86[ebp], eax
$LN306@P_MovePlay:

; 6204 : 
; 6205 : 			bubble = P_SpawnMobj(

  02523	68 b7 00 00 00	 push	 183			; 000000b7H
  02528	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _stirwaterz$86[ebp]
  0252e	50		 push	 eax
  0252f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02532	8b 11		 mov	 edx, DWORD PTR [ecx]
  02534	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02537	03 85 8c fe ff
	ff		 add	 eax, DWORD PTR _stirwatery$87[ebp]
  0253d	50		 push	 eax
  0253e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02541	8b 11		 mov	 edx, DWORD PTR [ecx]
  02543	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  02546	03 85 90 fe ff
	ff		 add	 eax, DWORD PTR _stirwaterx$88[ebp]
  0254c	50		 push	 eax
  0254d	e8 00 00 00 00	 call	 _P_SpawnMobj
  02552	83 c4 10	 add	 esp, 16			; 00000010H
  02555	89 85 84 fe ff
	ff		 mov	 DWORD PTR _bubble$85[ebp], eax

; 6206 : 				player->mo->x + stirwaterx,
; 6207 : 				player->mo->y + stirwatery,
; 6208 : 				stirwaterz, MT_SMALLBUBBLE);
; 6209 : 			bubble->destscale = player->mo->scale;

  0255b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0255e	8b 08		 mov	 ecx, DWORD PTR [eax]
  02560	8b 95 84 fe ff
	ff		 mov	 edx, DWORD PTR _bubble$85[ebp]
  02566	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  0256d	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 6210 : 			P_SetScale(bubble,player->mo->scale);

  02574	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02577	8b 08		 mov	 ecx, DWORD PTR [eax]
  02579	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  02580	52		 push	 edx
  02581	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _bubble$85[ebp]
  02587	50		 push	 eax
  02588	e8 00 00 00 00	 call	 _P_SetScale
  0258d	83 c4 08	 add	 esp, 8

; 6211 : 
; 6212 : 			bubble = P_SpawnMobj(

  02590	68 b7 00 00 00	 push	 183			; 000000b7H
  02595	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _stirwaterz$86[ebp]
  0259b	50		 push	 eax
  0259c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0259f	8b 11		 mov	 edx, DWORD PTR [ecx]
  025a1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  025a4	2b 85 8c fe ff
	ff		 sub	 eax, DWORD PTR _stirwatery$87[ebp]
  025aa	50		 push	 eax
  025ab	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  025ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  025b0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  025b3	2b 85 90 fe ff
	ff		 sub	 eax, DWORD PTR _stirwaterx$88[ebp]
  025b9	50		 push	 eax
  025ba	e8 00 00 00 00	 call	 _P_SpawnMobj
  025bf	83 c4 10	 add	 esp, 16			; 00000010H
  025c2	89 85 84 fe ff
	ff		 mov	 DWORD PTR _bubble$85[ebp], eax

; 6213 : 				player->mo->x - stirwaterx,
; 6214 : 				player->mo->y - stirwatery,
; 6215 : 				stirwaterz, MT_SMALLBUBBLE);
; 6216 : 			bubble->destscale = player->mo->scale;

  025c8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  025cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  025cd	8b 95 84 fe ff
	ff		 mov	 edx, DWORD PTR _bubble$85[ebp]
  025d3	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  025da	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 6217 : 			P_SetScale(bubble,player->mo->scale);

  025e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  025e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  025e6	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  025ed	52		 push	 edx
  025ee	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _bubble$85[ebp]
  025f4	50		 push	 eax
  025f5	e8 00 00 00 00	 call	 _P_SetScale
  025fa	83 c4 08	 add	 esp, 8
$LN304@P_MovePlay:

; 6218 : 		}
; 6219 : 	}
; 6220 : 
; 6221 : 	// Display the countdown drown numbers!
; 6222 : 	P_CheckUnderwaterAndSpaceTimer(player);

  025fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02600	50		 push	 eax
  02601	e8 00 00 00 00	 call	 _P_CheckUnderwaterAndSpaceTimer
  02606	83 c4 04	 add	 esp, 4

; 6223 : 
; 6224 : 	////////////////
; 6225 : 	//TAILS FLYING//
; 6226 : 	////////////////
; 6227 : 
; 6228 : 	// If not in a fly position, don't think you're flying!
; 6229 : 	if (!(player->mo->state == &states[S_PLAY_ABL1] || player->mo->state == &states[S_PLAY_ABL2]))

  02609	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0260c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0260e	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  02613	6b c2 15	 imul	 eax, edx, 21
  02616	05 00 00 00 00	 add	 eax, OFFSET _states
  0261b	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0261e	74 2a		 je	 SHORT $LN307@P_MovePlay
  02620	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02623	8b 08		 mov	 ecx, DWORD PTR [eax]
  02625	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0262a	6b c2 16	 imul	 eax, edx, 22
  0262d	05 00 00 00 00	 add	 eax, OFFSET _states
  02632	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  02635	74 13		 je	 SHORT $LN307@P_MovePlay

; 6230 : 		player->powers[pw_tailsfly] = 0;

  02637	b8 04 00 00 00	 mov	 eax, 4
  0263c	6b c8 05	 imul	 ecx, eax, 5
  0263f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02642	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN307@P_MovePlay:

; 6231 : 
; 6232 : 	if ((player->charability == CA_FLY || player->charability == CA_SWIM) && !(player->pflags & PF_STASIS || player->powers[pw_nocontrol]))

  0264a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0264d	83 b8 d8 00 00
	00 01		 cmp	 DWORD PTR [eax+216], 1
  02654	74 10		 je	 SHORT $LN309@P_MovePlay
  02656	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02659	83 b8 d8 00 00
	00 06		 cmp	 DWORD PTR [eax+216], 6
  02660	0f 85 82 02 00
	00		 jne	 $LN327@P_MovePlay
$LN309@P_MovePlay:
  02666	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02669	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0266f	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  02675	0f 85 6d 02 00
	00		 jne	 $LN327@P_MovePlay
  0267b	b8 04 00 00 00	 mov	 eax, 4
  02680	6b c8 1b	 imul	 ecx, eax, 27
  02683	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02686	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0268b	0f 85 57 02 00
	00		 jne	 $LN327@P_MovePlay

; 6233 : 	{
; 6234 : 		// Fly counter for Tails.
; 6235 : 		if (player->powers[pw_tailsfly])

  02691	b8 04 00 00 00	 mov	 eax, 4
  02696	6b c8 05	 imul	 ecx, eax, 5
  02699	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0269c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  026a1	0f 84 99 01 00
	00		 je	 $LN310@P_MovePlay

; 6236 : 		{
; 6237 : 			const fixed_t actionspd = (atoi(skins[player->skin].actionspd)<<FRACBITS)/100; //Tails uses an unscaled actionspd.

  026a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  026aa	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  026b4	81 c1 5a 00 00
	00		 add	 ecx, OFFSET _skins+90
  026ba	51		 push	 ecx
  026bb	e8 00 00 00 00	 call	 _atoi
  026c0	83 c4 04	 add	 esp, 4
  026c3	c1 e0 10	 shl	 eax, 16			; 00000010H
  026c6	99		 cdq
  026c7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  026cc	f7 f9		 idiv	 ecx
  026ce	89 85 80 fe ff
	ff		 mov	 DWORD PTR _actionspd$84[ebp], eax

; 6238 : 
; 6239 : 			if (player->charability2 == CA2_MULTIABILITY)

  026d4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  026d7	83 b8 dc 00 00
	00 01		 cmp	 DWORD PTR [eax+220], 1
  026de	75 31		 jne	 SHORT $LN312@P_MovePlay

; 6240 : 			{
; 6241 : 				// Adventure-style flying by just holding the button down
; 6242 : 				if (cmd->buttons & BT_JUMP)

  026e0	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  026e3	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  026e7	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  026ed	74 20		 je	 SHORT $LN314@P_MovePlay

; 6243 : 					P_SetObjectMomZ(player->mo, (actionspd/4)/NEWTICRATERATIO, true);

  026ef	6a 01		 push	 1
  026f1	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _actionspd$84[ebp]
  026f7	99		 cdq
  026f8	83 e2 03	 and	 edx, 3
  026fb	03 c2		 add	 eax, edx
  026fd	c1 f8 02	 sar	 eax, 2
  02700	50		 push	 eax
  02701	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02704	8b 08		 mov	 ecx, DWORD PTR [eax]
  02706	51		 push	 ecx
  02707	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0270c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN314@P_MovePlay:

; 6244 : 			}

  0270f	eb 7f		 jmp	 SHORT $LN315@P_MovePlay
$LN312@P_MovePlay:

; 6245 : 			else
; 6246 : 			{
; 6247 : 				// Classic flying
; 6248 : 				if (player->fly1)

  02711	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02714	83 b8 18 01 00
	00 00		 cmp	 DWORD PTR [eax+280], 0
  0271b	74 73		 je	 SHORT $LN315@P_MovePlay

; 6249 : 				{
; 6250 : 					if ((!(player->mo->eflags & MFE_VERTICALFLIP) && player->mo->momz < (5*actionspd)/NEWTICRATERATIO)
; 6251 : 						|| ((player->mo->eflags & MFE_VERTICALFLIP) && player->mo->momz > (-5*actionspd)/NEWTICRATERATIO))

  0271d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02720	8b 08		 mov	 ecx, DWORD PTR [eax]
  02722	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02728	83 e2 20	 and	 edx, 32			; 00000020H
  0272b	75 11		 jne	 SHORT $LN318@P_MovePlay
  0272d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02730	8b 08		 mov	 ecx, DWORD PTR [eax]
  02732	6b 95 80 fe ff
	ff 05		 imul	 edx, DWORD PTR _actionspd$84[ebp], 5
  02739	39 51 50	 cmp	 DWORD PTR [ecx+80], edx
  0273c	7c 21		 jl	 SHORT $LN317@P_MovePlay
$LN318@P_MovePlay:
  0273e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02741	8b 08		 mov	 ecx, DWORD PTR [eax]
  02743	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02749	83 e2 20	 and	 edx, 32			; 00000020H
  0274c	74 2d		 je	 SHORT $LN316@P_MovePlay
  0274e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02751	8b 08		 mov	 ecx, DWORD PTR [eax]
  02753	6b 95 80 fe ff
	ff fb		 imul	 edx, DWORD PTR _actionspd$84[ebp], -5
  0275a	39 51 50	 cmp	 DWORD PTR [ecx+80], edx
  0275d	7e 1c		 jle	 SHORT $LN316@P_MovePlay
$LN317@P_MovePlay:

; 6252 : 						P_SetObjectMomZ(player->mo, (actionspd/2)/NEWTICRATERATIO, true);

  0275f	6a 01		 push	 1
  02761	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _actionspd$84[ebp]
  02767	99		 cdq
  02768	2b c2		 sub	 eax, edx
  0276a	d1 f8		 sar	 eax, 1
  0276c	50		 push	 eax
  0276d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02770	8b 08		 mov	 ecx, DWORD PTR [eax]
  02772	51		 push	 ecx
  02773	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  02778	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN316@P_MovePlay:

; 6253 : 
; 6254 : 					player->fly1--;

  0277b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0277e	8b 88 18 01 00
	00		 mov	 ecx, DWORD PTR [eax+280]
  02784	83 e9 01	 sub	 ecx, 1
  02787	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0278a	89 8a 18 01 00
	00		 mov	 DWORD PTR [edx+280], ecx
$LN315@P_MovePlay:

; 6255 : 				}
; 6256 : 			}
; 6257 : 
; 6258 : 			// Tails Put-Put noise
; 6259 : 			if (player->charability == CA_FLY && leveltime % 10 == 0 && !player->spectator)

  02790	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02793	83 b8 d8 00 00
	00 01		 cmp	 DWORD PTR [eax+216], 1
  0279a	75 30		 jne	 SHORT $LN319@P_MovePlay
  0279c	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  027a1	33 d2		 xor	 edx, edx
  027a3	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  027a8	f7 f1		 div	 ecx
  027aa	85 d2		 test	 edx, edx
  027ac	75 1e		 jne	 SHORT $LN319@P_MovePlay
  027ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  027b1	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  027b8	85 c9		 test	 ecx, ecx
  027ba	75 10		 jne	 SHORT $LN319@P_MovePlay

; 6260 : 				S_StartSound(player->mo, sfx_putput);

  027bc	6a 7c		 push	 124			; 0000007cH
  027be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  027c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  027c3	51		 push	 ecx
  027c4	e8 00 00 00 00	 call	 _S_StartSound
  027c9	83 c4 08	 add	 esp, 8
$LN319@P_MovePlay:

; 6261 : 
; 6262 : 			// Descend
; 6263 : 			if (cmd->buttons & BT_USE)

  027cc	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  027cf	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  027d3	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  027d9	74 60		 je	 SHORT $LN324@P_MovePlay

; 6264 : 			{
; 6265 : 				if (player->mo->eflags & MFE_VERTICALFLIP)

  027db	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  027de	8b 08		 mov	 ecx, DWORD PTR [eax]
  027e0	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  027e6	83 e2 20	 and	 edx, 32			; 00000020H
  027e9	74 29		 je	 SHORT $LN321@P_MovePlay

; 6266 : 				{
; 6267 : 					if (player->mo->momz < (5*actionspd)/NEWTICRATERATIO)

  027eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  027ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  027f0	6b 95 80 fe ff
	ff 05		 imul	 edx, DWORD PTR _actionspd$84[ebp], 5
  027f7	39 51 50	 cmp	 DWORD PTR [ecx+80], edx
  027fa	7d 16		 jge	 SHORT $LN323@P_MovePlay

; 6268 : 						player->mo->momz += (actionspd)/NEWTICRATERATIO;

  027fc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  027ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  02801	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  02804	03 95 80 fe ff
	ff		 add	 edx, DWORD PTR _actionspd$84[ebp]
  0280a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0280d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0280f	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN323@P_MovePlay:

; 6269 : 				}

  02812	eb 27		 jmp	 SHORT $LN324@P_MovePlay
$LN321@P_MovePlay:

; 6270 : 				else if (player->mo->momz > (-5*actionspd)/NEWTICRATERATIO)

  02814	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02817	8b 08		 mov	 ecx, DWORD PTR [eax]
  02819	6b 95 80 fe ff
	ff fb		 imul	 edx, DWORD PTR _actionspd$84[ebp], -5
  02820	39 51 50	 cmp	 DWORD PTR [ecx+80], edx
  02823	7e 16		 jle	 SHORT $LN324@P_MovePlay

; 6271 : 					player->mo->momz -= (actionspd)/NEWTICRATERATIO;

  02825	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02828	8b 08		 mov	 ecx, DWORD PTR [eax]
  0282a	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0282d	2b 95 80 fe ff
	ff		 sub	 edx, DWORD PTR _actionspd$84[ebp]
  02833	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02836	8b 08		 mov	 ecx, DWORD PTR [eax]
  02838	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN324@P_MovePlay:

; 6272 : 			}
; 6273 : 
; 6274 : 		}

  0283b	e9 a8 00 00 00	 jmp	 $LN327@P_MovePlay
$LN310@P_MovePlay:

; 6275 : 		else
; 6276 : 		{
; 6277 : 			// Tails-gets-tired Stuff
; 6278 : 			if (player->mo->state == &states[S_PLAY_ABL1]
; 6279 : 				|| player->mo->state == &states[S_PLAY_ABL2])

  02840	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02843	8b 08		 mov	 ecx, DWORD PTR [eax]
  02845	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0284a	6b c2 15	 imul	 eax, edx, 21
  0284d	05 00 00 00 00	 add	 eax, OFFSET _states
  02852	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  02855	74 17		 je	 SHORT $LN326@P_MovePlay
  02857	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0285a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0285c	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  02861	6b c2 16	 imul	 eax, edx, 22
  02864	05 00 00 00 00	 add	 eax, OFFSET _states
  02869	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0286c	75 10		 jne	 SHORT $LN325@P_MovePlay
$LN326@P_MovePlay:

; 6280 : 				P_SetPlayerMobjState(player->mo, S_PLAY_SPC4);

  0286e	6a 1a		 push	 26			; 0000001aH
  02870	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02873	8b 08		 mov	 ecx, DWORD PTR [eax]
  02875	51		 push	 ecx
  02876	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0287b	83 c4 08	 add	 esp, 8
$LN325@P_MovePlay:

; 6281 : 
; 6282 : 			if (player->charability == CA_FLY && (leveltime % 10 == 0)
; 6283 : 				&& player->mo->state >= &states[S_PLAY_SPC1]
; 6284 : 				&& player->mo->state <= &states[S_PLAY_SPC4]
; 6285 : 				&& !player->spectator)

  0287e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02881	83 b8 d8 00 00
	00 01		 cmp	 DWORD PTR [eax+216], 1
  02888	75 5e		 jne	 SHORT $LN327@P_MovePlay
  0288a	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0288f	33 d2		 xor	 edx, edx
  02891	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  02896	f7 f1		 div	 ecx
  02898	85 d2		 test	 edx, edx
  0289a	75 4c		 jne	 SHORT $LN327@P_MovePlay
  0289c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0289f	8b 08		 mov	 ecx, DWORD PTR [eax]
  028a1	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  028a6	6b c2 17	 imul	 eax, edx, 23
  028a9	05 00 00 00 00	 add	 eax, OFFSET _states
  028ae	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  028b1	72 35		 jb	 SHORT $LN327@P_MovePlay
  028b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  028b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  028b8	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  028bd	6b c2 1a	 imul	 eax, edx, 26
  028c0	05 00 00 00 00	 add	 eax, OFFSET _states
  028c5	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  028c8	77 1e		 ja	 SHORT $LN327@P_MovePlay
  028ca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  028cd	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  028d4	85 c9		 test	 ecx, ecx
  028d6	75 10		 jne	 SHORT $LN327@P_MovePlay

; 6286 : 				S_StartSound(player->mo, sfx_pudpud);

  028d8	6a 7b		 push	 123			; 0000007bH
  028da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  028dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  028df	51		 push	 ecx
  028e0	e8 00 00 00 00	 call	 _S_StartSound
  028e5	83 c4 08	 add	 esp, 8
$LN327@P_MovePlay:

; 6287 : 		}
; 6288 : 	}
; 6289 : 
; 6290 : 	// Uncomment this to invoke a 10-minute time limit on levels.
; 6291 : 	/*if (leveltime > 20999) // one tic off so the time doesn't display 10 : 00
; 6292 : 		P_DamageMobj(player->mo, NULL, NULL, 10000);*/
; 6293 : 
; 6294 : 	// Spawn Invincibility Sparkles
; 6295 : 	if (mariomode && player->powers[pw_invulnerability] && !player->powers[pw_super])

  028e8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  028ef	25 00 01 00 00	 and	 eax, 256		; 00000100H
  028f4	74 55		 je	 SHORT $LN328@P_MovePlay
  028f6	b8 04 00 00 00	 mov	 eax, 4
  028fb	6b c8 00	 imul	 ecx, eax, 0
  028fe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02901	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  02906	74 43		 je	 SHORT $LN328@P_MovePlay
  02908	b8 04 00 00 00	 mov	 eax, 4
  0290d	6b c8 0f	 imul	 ecx, eax, 15
  02910	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02913	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  02918	75 31		 jne	 SHORT $LN328@P_MovePlay

; 6296 : 	{
; 6297 : 		player->mo->flags |= MF_TRANSLATION;

  0291a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0291d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0291f	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  02922	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  02928	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0292b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0292d	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 6298 : 		player->mo->color = (UINT8)(leveltime % MAXSKINCOLORS);

  02930	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02935	33 d2		 xor	 edx, edx
  02937	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0293c	f7 f1		 div	 ecx
  0293e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02941	8b 08		 mov	 ecx, DWORD PTR [eax]
  02943	88 51 68	 mov	 BYTE PTR [ecx+104], dl

; 6299 : 	}

  02946	e9 ad 02 00 00	 jmp	 $LN337@P_MovePlay
$LN328@P_MovePlay:

; 6300 : 	else
; 6301 : 	{
; 6302 : 		if ((player->powers[pw_invulnerability] || (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]) && !(player->skin == 0))) && leveltime % (TICRATE/7) == 0
; 6303 : 			&& (!player->powers[pw_super] || (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]) && !(player->skin == 0))))

  0294b	b8 04 00 00 00	 mov	 eax, 4
  02950	6b c8 00	 imul	 ecx, eax, 0
  02953	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02956	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0295b	75 41		 jne	 SHORT $LN331@P_MovePlay
  0295d	b8 04 00 00 00	 mov	 eax, 4
  02962	6b c8 0f	 imul	 ecx, eax, 15
  02965	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02968	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0296d	0f 84 0e 02 00
	00		 je	 $LN330@P_MovePlay
  02973	b8 04 00 00 00	 mov	 eax, 4
  02978	6b c8 18	 imul	 ecx, eax, 24
  0297b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0297e	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02982	83 e0 7f	 and	 eax, 127		; 0000007fH
  02985	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  02988	0f 85 f3 01 00
	00		 jne	 $LN330@P_MovePlay
  0298e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02991	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  02998	0f 84 e3 01 00
	00		 je	 $LN330@P_MovePlay
$LN331@P_MovePlay:
  0299e	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  029a3	33 d2		 xor	 edx, edx
  029a5	b9 05 00 00 00	 mov	 ecx, 5
  029aa	f7 f1		 div	 ecx
  029ac	85 d2		 test	 edx, edx
  029ae	0f 85 cd 01 00
	00		 jne	 $LN330@P_MovePlay
  029b4	b8 04 00 00 00	 mov	 eax, 4
  029b9	6b c8 0f	 imul	 ecx, eax, 15
  029bc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  029bf	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  029c4	74 41		 je	 SHORT $LN332@P_MovePlay
  029c6	b8 04 00 00 00	 mov	 eax, 4
  029cb	6b c8 0f	 imul	 ecx, eax, 15
  029ce	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  029d1	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  029d6	0f 84 a5 01 00
	00		 je	 $LN330@P_MovePlay
  029dc	b8 04 00 00 00	 mov	 eax, 4
  029e1	6b c8 18	 imul	 ecx, eax, 24
  029e4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  029e7	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  029eb	83 e0 7f	 and	 eax, 127		; 0000007fH
  029ee	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  029f1	0f 85 8a 01 00
	00		 jne	 $LN330@P_MovePlay
  029f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  029fa	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  02a01	0f 84 7a 01 00
	00		 je	 $LN330@P_MovePlay
$LN332@P_MovePlay:

; 6304 : 		{
; 6305 : 			fixed_t destx, desty;
; 6306 : 			mobj_t *sparkle;
; 6307 : 
; 6308 : 			if (!splitscreen && rendermode != render_soft)

  02a07	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  02a0e	0f 85 f2 00 00
	00		 jne	 $LN333@P_MovePlay
  02a14	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  02a1b	0f 84 e5 00 00
	00		 je	 $LN333@P_MovePlay

; 6309 : 			{
; 6310 : 				angle_t viewingangle;
; 6311 : 
; 6312 : 				if (!cv_chasecam.value && players[displayplayer].mo)

  02a21	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  02a28	75 5d		 jne	 SHORT $LN335@P_MovePlay
  02a2a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  02a34	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  02a3b	74 4a		 je	 SHORT $LN335@P_MovePlay

; 6313 : 					viewingangle = R_PointToAngle2(player->mo->x, player->mo->y, players[displayplayer].mo->x, players[displayplayer].mo->y);

  02a3d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  02a47	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  02a4d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  02a50	52		 push	 edx
  02a51	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  02a5b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  02a61	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02a64	52		 push	 edx
  02a65	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02a68	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a6a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  02a6d	52		 push	 edx
  02a6e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02a71	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a73	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02a76	52		 push	 edx
  02a77	e8 00 00 00 00	 call	 _R_PointToAngle2
  02a7c	83 c4 10	 add	 esp, 16			; 00000010H
  02a7f	89 85 70 fe ff
	ff		 mov	 DWORD PTR _viewingangle$80[ebp], eax
  02a85	eb 2d		 jmp	 SHORT $LN336@P_MovePlay
$LN335@P_MovePlay:

; 6314 : 				else
; 6315 : 					viewingangle = R_PointToAngle2(player->mo->x, player->mo->y, camera.x, camera.y);

  02a87	a1 14 00 00 00	 mov	 eax, DWORD PTR _camera+20
  02a8c	50		 push	 eax
  02a8d	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _camera+16
  02a93	51		 push	 ecx
  02a94	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02a97	8b 02		 mov	 eax, DWORD PTR [edx]
  02a99	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  02a9c	51		 push	 ecx
  02a9d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02aa0	8b 02		 mov	 eax, DWORD PTR [edx]
  02aa2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02aa5	51		 push	 ecx
  02aa6	e8 00 00 00 00	 call	 _R_PointToAngle2
  02aab	83 c4 10	 add	 esp, 16			; 00000010H
  02aae	89 85 70 fe ff
	ff		 mov	 DWORD PTR _viewingangle$80[ebp], eax
$LN336@P_MovePlay:

; 6316 : 
; 6317 : 				destx = player->mo->x + P_ReturnThrustX(player->mo, viewingangle, FRACUNIT);

  02ab4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02ab7	8b 30		 mov	 esi, DWORD PTR [eax]
  02ab9	68 00 00 01 00	 push	 65536			; 00010000H
  02abe	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _viewingangle$80[ebp]
  02ac4	51		 push	 ecx
  02ac5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02ac8	8b 02		 mov	 eax, DWORD PTR [edx]
  02aca	50		 push	 eax
  02acb	e8 00 00 00 00	 call	 _P_ReturnThrustX
  02ad0	83 c4 0c	 add	 esp, 12			; 0000000cH
  02ad3	03 46 10	 add	 eax, DWORD PTR [esi+16]
  02ad6	89 85 7c fe ff
	ff		 mov	 DWORD PTR _destx$83[ebp], eax

; 6318 : 				desty = player->mo->y + P_ReturnThrustY(player->mo, viewingangle, FRACUNIT);

  02adc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02adf	8b 30		 mov	 esi, DWORD PTR [eax]
  02ae1	68 00 00 01 00	 push	 65536			; 00010000H
  02ae6	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _viewingangle$80[ebp]
  02aec	51		 push	 ecx
  02aed	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02af0	8b 02		 mov	 eax, DWORD PTR [edx]
  02af2	50		 push	 eax
  02af3	e8 00 00 00 00	 call	 _P_ReturnThrustY
  02af8	83 c4 0c	 add	 esp, 12			; 0000000cH
  02afb	03 46 14	 add	 eax, DWORD PTR [esi+20]
  02afe	89 85 78 fe ff
	ff		 mov	 DWORD PTR _desty$82[ebp], eax

; 6319 : 			}

  02b04	eb 1c		 jmp	 SHORT $LN334@P_MovePlay
$LN333@P_MovePlay:

; 6320 : 			else
; 6321 : 			{
; 6322 : 				destx = player->mo->x;

  02b06	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b09	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b0b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02b0e	89 95 7c fe ff
	ff		 mov	 DWORD PTR _destx$83[ebp], edx

; 6323 : 				desty = player->mo->y;

  02b14	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b17	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b19	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  02b1c	89 95 78 fe ff
	ff		 mov	 DWORD PTR _desty$82[ebp], edx
$LN334@P_MovePlay:

; 6324 : 			}
; 6325 : 
; 6326 : 			sparkle = P_SpawnMobj(destx, desty, player->mo->z, MT_IVSP);

  02b22	68 a3 00 00 00	 push	 163			; 000000a3H
  02b27	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b2a	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b2c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  02b2f	52		 push	 edx
  02b30	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _desty$82[ebp]
  02b36	50		 push	 eax
  02b37	8b 8d 7c fe ff
	ff		 mov	 ecx, DWORD PTR _destx$83[ebp]
  02b3d	51		 push	 ecx
  02b3e	e8 00 00 00 00	 call	 _P_SpawnMobj
  02b43	83 c4 10	 add	 esp, 16			; 00000010H
  02b46	89 85 74 fe ff
	ff		 mov	 DWORD PTR _sparkle$81[ebp], eax

; 6327 : 			sparkle->destscale = player->mo->scale;

  02b4c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b4f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b51	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR _sparkle$81[ebp]
  02b57	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  02b5e	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 6328 : 			P_SetScale(sparkle, player->mo->scale);

  02b65	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b68	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b6a	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  02b71	52		 push	 edx
  02b72	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _sparkle$81[ebp]
  02b78	50		 push	 eax
  02b79	e8 00 00 00 00	 call	 _P_SetScale
  02b7e	83 c4 08	 add	 esp, 8
$LN330@P_MovePlay:

; 6329 : 		}
; 6330 : 
; 6331 : 		if ((player->powers[pw_super]) && (cmd->forwardmove != 0 || cmd->sidemove != 0)
; 6332 : 			&& !(leveltime % TICRATE) && (player->mo->momx || player->mo->momy))

  02b81	b8 04 00 00 00	 mov	 eax, 4
  02b86	6b c8 0f	 imul	 ecx, eax, 15
  02b89	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02b8c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  02b91	74 65		 je	 SHORT $LN337@P_MovePlay
  02b93	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  02b96	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  02b99	85 c9		 test	 ecx, ecx
  02b9b	75 0b		 jne	 SHORT $LN338@P_MovePlay
  02b9d	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  02ba0	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  02ba4	85 c9		 test	 ecx, ecx
  02ba6	74 50		 je	 SHORT $LN337@P_MovePlay
$LN338@P_MovePlay:
  02ba8	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02bad	33 d2		 xor	 edx, edx
  02baf	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  02bb4	f7 f1		 div	 ecx
  02bb6	85 d2		 test	 edx, edx
  02bb8	75 3e		 jne	 SHORT $LN337@P_MovePlay
  02bba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02bbd	8b 08		 mov	 ecx, DWORD PTR [eax]
  02bbf	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  02bc3	75 0b		 jne	 SHORT $LN339@P_MovePlay
  02bc5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02bc8	8b 08		 mov	 ecx, DWORD PTR [eax]
  02bca	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  02bce	74 28		 je	 SHORT $LN337@P_MovePlay
$LN339@P_MovePlay:

; 6333 : 		{
; 6334 : 			P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z, MT_SUPERSPARK);

  02bd0	68 a4 00 00 00	 push	 164			; 000000a4H
  02bd5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02bd8	8b 08		 mov	 ecx, DWORD PTR [eax]
  02bda	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  02bdd	52		 push	 edx
  02bde	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02be1	8b 08		 mov	 ecx, DWORD PTR [eax]
  02be3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  02be6	52		 push	 edx
  02be7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02bea	8b 08		 mov	 ecx, DWORD PTR [eax]
  02bec	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02bef	52		 push	 edx
  02bf0	e8 00 00 00 00	 call	 _P_SpawnMobj
  02bf5	83 c4 10	 add	 esp, 16			; 00000010H
$LN337@P_MovePlay:

; 6335 : 		}
; 6336 : 	}
; 6337 : 
; 6338 : 	// Resume normal music stuff.
; 6339 : 	if (player->powers[pw_invulnerability] == 1 && (!player->powers[pw_super] ||  mapheaderinfo[gamemap-1].nossmusic))

  02bf8	b8 04 00 00 00	 mov	 eax, 4
  02bfd	6b c8 00	 imul	 ecx, eax, 0
  02c00	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02c03	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  02c08	0f 85 95 00 00
	00		 jne	 $LN340@P_MovePlay
  02c0e	b8 04 00 00 00	 mov	 eax, 4
  02c13	6b c8 0f	 imul	 ecx, eax, 15
  02c16	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02c19	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  02c1e	74 19		 je	 SHORT $LN341@P_MovePlay
  02c20	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  02c27	83 e8 01	 sub	 eax, 1
  02c2a	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  02c30	83 b9 28 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+296], 0
  02c37	74 6a		 je	 SHORT $LN340@P_MovePlay
$LN341@P_MovePlay:

; 6340 : 	{
; 6341 : 		if (mariomode)

  02c39	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  02c40	25 00 01 00 00	 and	 eax, 256		; 00000100H
  02c45	74 44		 je	 SHORT $LN344@P_MovePlay

; 6342 : 		{
; 6343 : 			player->mo->flags |= MF_TRANSLATION;

  02c47	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c4a	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c4c	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  02c4f	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  02c55	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c58	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c5a	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 6344 : 			if (player->powers[pw_fireflower])

  02c5d	b8 04 00 00 00	 mov	 eax, 4
  02c62	6b c8 11	 imul	 ecx, eax, 17
  02c65	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02c68	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  02c6d	74 0b		 je	 SHORT $LN343@P_MovePlay

; 6345 : 				player->mo->color = 13;

  02c6f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c72	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c74	c6 41 68 0d	 mov	 BYTE PTR [ecx+104], 13	; 0000000dH
  02c78	eb 11		 jmp	 SHORT $LN344@P_MovePlay
$LN343@P_MovePlay:

; 6346 : 			else
; 6347 : 				player->mo->color = (UINT8)player->skincolor;

  02c7a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c7d	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c7f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02c82	8a 82 b4 00 00
	00		 mov	 al, BYTE PTR [edx+180]
  02c88	88 41 68	 mov	 BYTE PTR [ecx+104], al
$LN344@P_MovePlay:

; 6348 : 		}
; 6349 : 
; 6350 : 		P_RestoreMusic(player);

  02c8b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c8e	50		 push	 eax
  02c8f	e8 00 00 00 00	 call	 _P_RestoreMusic
  02c94	83 c4 04	 add	 esp, 4

; 6351 : 
; 6352 : 		// If you had a shield, restore its visual significance
; 6353 : 		P_SpawnShieldOrb(player);

  02c97	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c9a	50		 push	 eax
  02c9b	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  02ca0	83 c4 04	 add	 esp, 4
$LN340@P_MovePlay:

; 6354 : 	}
; 6355 : 
; 6356 : 	// Show the "THOK!" graphic when spinning quickly across the ground.
; 6357 : 	if ((player->pflags & PF_SPINNING) && player->speed > 15 && !(player->pflags & PF_JUMPED))

  02ca3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02ca6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02cac	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  02cb2	0f 84 aa 00 00
	00		 je	 $LN348@P_MovePlay
  02cb8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02cbb	83 b8 0c 01 00
	00 0f		 cmp	 DWORD PTR [eax+268], 15	; 0000000fH
  02cc2	0f 8e 9a 00 00
	00		 jle	 $LN348@P_MovePlay
  02cc8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02ccb	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02cd1	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  02cd7	0f 85 85 00 00
	00		 jne	 $LN348@P_MovePlay

; 6358 : 	{
; 6359 : 		mobj_t *item;
; 6360 : 		if (player->spinitem > 0)

  02cdd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02ce0	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [eax+232], 0
  02ce7	7e 1e		 jle	 SHORT $LN346@P_MovePlay

; 6361 : 			item = P_SpawnSpinMobj(player, player->spinitem);

  02ce9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02cec	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  02cf2	51		 push	 ecx
  02cf3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02cf6	52		 push	 edx
  02cf7	e8 00 00 00 00	 call	 _P_SpawnSpinMobj
  02cfc	83 c4 08	 add	 esp, 8
  02cff	89 85 6c fe ff
	ff		 mov	 DWORD PTR _item$79[ebp], eax
  02d05	eb 21		 jmp	 SHORT $LN347@P_MovePlay
$LN346@P_MovePlay:

; 6362 : 		else
; 6363 : 			item = P_SpawnSpinMobj(player, player->mo->info->damage);

  02d07	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d0a	8b 08		 mov	 ecx, DWORD PTR [eax]
  02d0c	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  02d12	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  02d15	50		 push	 eax
  02d16	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02d19	51		 push	 ecx
  02d1a	e8 00 00 00 00	 call	 _P_SpawnSpinMobj
  02d1f	83 c4 08	 add	 esp, 8
  02d22	89 85 6c fe ff
	ff		 mov	 DWORD PTR _item$79[ebp], eax
$LN347@P_MovePlay:

; 6364 : 
; 6365 : 		if (item && (player->charflags & SF_GHOSTSPINITEM))

  02d28	83 bd 6c fe ff
	ff 00		 cmp	 DWORD PTR _item$79[ebp], 0
  02d2f	74 31		 je	 SHORT $LN348@P_MovePlay
  02d31	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d34	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  02d3a	83 e1 08	 and	 ecx, 8
  02d3d	74 23		 je	 SHORT $LN348@P_MovePlay

; 6366 : 		{
; 6367 : 			P_SpawnGhostMobj(item);

  02d3f	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _item$79[ebp]
  02d45	50		 push	 eax
  02d46	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  02d4b	83 c4 04	 add	 esp, 4

; 6368 : 			P_SetMobjState(item, S_DISS);

  02d4e	68 4f 06 00 00	 push	 1615			; 0000064fH
  02d53	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _item$79[ebp]
  02d59	50		 push	 eax
  02d5a	e8 00 00 00 00	 call	 _P_SetMobjState
  02d5f	83 c4 08	 add	 esp, 8
$LN348@P_MovePlay:

; 6369 : 		}
; 6370 : 	}
; 6371 : 
; 6372 : 
; 6373 : 	////////////////////////////
; 6374 : 	//SPINNING AND SPINDASHING//
; 6375 : 	////////////////////////////
; 6376 : 
; 6377 : 	// If the player isn't on the ground, make sure they aren't in a "starting dash" position.
; 6378 : 	if (!onground)

  02d62	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  02d69	75 25		 jne	 SHORT $LN349@P_MovePlay

; 6379 : 	{
; 6380 : 		player->pflags &= ~PF_STARTDASH;

  02d6b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d6e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02d74	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  02d7a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02d7d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 6381 : 		player->dashspeed = 0;

  02d83	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d86	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+192], 0
$LN349@P_MovePlay:

; 6382 : 	}
; 6383 : 
; 6384 : 	if (player->powers[pw_watershield] && (player->pflags & PF_SPINNING) && (player->speed > 4) && onground && (leveltime & 1)
; 6385 : 		&& !(player->mo->eflags & MFE_UNDERWATER) && !(player->mo->eflags & MFE_TOUCHWATER))

  02d90	b8 04 00 00 00	 mov	 eax, 4
  02d95	6b c8 0b	 imul	 ecx, eax, 11
  02d98	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02d9b	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  02da0	0f 84 d8 03 00
	00		 je	 $LN362@P_MovePlay
  02da6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02da9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02daf	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  02db5	0f 84 c3 03 00
	00		 je	 $LN362@P_MovePlay
  02dbb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02dbe	83 b8 0c 01 00
	00 04		 cmp	 DWORD PTR [eax+268], 4
  02dc5	0f 8e b3 03 00
	00		 jle	 $LN362@P_MovePlay
  02dcb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  02dd2	0f 84 a6 03 00
	00		 je	 $LN362@P_MovePlay
  02dd8	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02ddd	83 e0 01	 and	 eax, 1
  02de0	0f 84 98 03 00
	00		 je	 $LN362@P_MovePlay
  02de6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02de9	8b 08		 mov	 ecx, DWORD PTR [eax]
  02deb	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02df1	83 e2 08	 and	 edx, 8
  02df4	0f 85 84 03 00
	00		 jne	 $LN362@P_MovePlay
  02dfa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02dfd	8b 08		 mov	 ecx, DWORD PTR [eax]
  02dff	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02e05	83 e2 04	 and	 edx, 4
  02e08	0f 85 70 03 00
	00		 jne	 $LN362@P_MovePlay

; 6386 : 	{
; 6387 : 		fixed_t newx;
; 6388 : 		fixed_t newy;
; 6389 : 		fixed_t ground;
; 6390 : 		mobj_t *flame;
; 6391 : 		angle_t travelangle;
; 6392 : 
; 6393 : 		if (player->mo->eflags & MFE_VERTICALFLIP)

  02e0e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e11	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e13	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02e19	83 e2 20	 and	 edx, 32			; 00000020H
  02e1c	74 21		 je	 SHORT $LN351@P_MovePlay

; 6394 : 			ground = player->mo->ceilingz - mobjinfo[MT_SPINFIRE].height - 1;

  02e1e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e21	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e23	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  02e28	6b c2 47	 imul	 eax, edx, 71
  02e2b	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  02e2e	2b 88 44 00 00
	00		 sub	 ecx, DWORD PTR _mobjinfo[eax+68]
  02e34	83 e9 01	 sub	 ecx, 1
  02e37	89 8d 60 fe ff
	ff		 mov	 DWORD PTR _ground$76[ebp], ecx
  02e3d	eb 11		 jmp	 SHORT $LN352@P_MovePlay
$LN351@P_MovePlay:

; 6395 : 		else
; 6396 : 			ground = player->mo->floorz + 1;

  02e3f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e42	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e44	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  02e47	83 c2 01	 add	 edx, 1
  02e4a	89 95 60 fe ff
	ff		 mov	 DWORD PTR _ground$76[ebp], edx
$LN352@P_MovePlay:

; 6397 : 
; 6398 : 		travelangle = R_PointToAngle2(player->mo->x, player->mo->y, player->rmomx + player->mo->x, player->rmomy + player->mo->y);

  02e50	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e53	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e55	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02e58	8b 82 48 01 00
	00		 mov	 eax, DWORD PTR [edx+328]
  02e5e	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  02e61	50		 push	 eax
  02e62	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02e65	8b 11		 mov	 edx, DWORD PTR [ecx]
  02e67	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e6a	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  02e70	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  02e73	51		 push	 ecx
  02e74	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02e77	8b 02		 mov	 eax, DWORD PTR [edx]
  02e79	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  02e7c	51		 push	 ecx
  02e7d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02e80	8b 02		 mov	 eax, DWORD PTR [edx]
  02e82	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02e85	51		 push	 ecx
  02e86	e8 00 00 00 00	 call	 _R_PointToAngle2
  02e8b	83 c4 10	 add	 esp, 16			; 00000010H
  02e8e	89 85 58 fe ff
	ff		 mov	 DWORD PTR _travelangle$74[ebp], eax

; 6399 : 
; 6400 : 		newx = player->mo->x + P_ReturnThrustX(player->mo, travelangle + ANGLE_135, 24*FRACUNIT);

  02e94	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e97	8b 30		 mov	 esi, DWORD PTR [eax]
  02e99	68 00 00 18 00	 push	 1572864			; 00180000H
  02e9e	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _travelangle$74[ebp]
  02ea4	81 c1 00 00 00
	60		 add	 ecx, 1610612736		; 60000000H
  02eaa	51		 push	 ecx
  02eab	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02eae	8b 02		 mov	 eax, DWORD PTR [edx]
  02eb0	50		 push	 eax
  02eb1	e8 00 00 00 00	 call	 _P_ReturnThrustX
  02eb6	83 c4 0c	 add	 esp, 12			; 0000000cH
  02eb9	03 46 10	 add	 eax, DWORD PTR [esi+16]
  02ebc	89 85 68 fe ff
	ff		 mov	 DWORD PTR _newx$78[ebp], eax

; 6401 : 		newy = player->mo->y + P_ReturnThrustY(player->mo, travelangle + ANGLE_135, 24*FRACUNIT);

  02ec2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02ec5	8b 30		 mov	 esi, DWORD PTR [eax]
  02ec7	68 00 00 18 00	 push	 1572864			; 00180000H
  02ecc	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _travelangle$74[ebp]
  02ed2	81 c1 00 00 00
	60		 add	 ecx, 1610612736		; 60000000H
  02ed8	51		 push	 ecx
  02ed9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02edc	8b 02		 mov	 eax, DWORD PTR [edx]
  02ede	50		 push	 eax
  02edf	e8 00 00 00 00	 call	 _P_ReturnThrustY
  02ee4	83 c4 0c	 add	 esp, 12			; 0000000cH
  02ee7	03 46 14	 add	 eax, DWORD PTR [esi+20]
  02eea	89 85 64 fe ff
	ff		 mov	 DWORD PTR _newy$77[ebp], eax

; 6402 : 		flame = P_SpawnMobj(newx, newy, ground, MT_SPINFIRE);

  02ef0	6a 47		 push	 71			; 00000047H
  02ef2	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _ground$76[ebp]
  02ef8	50		 push	 eax
  02ef9	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _newy$77[ebp]
  02eff	51		 push	 ecx
  02f00	8b 95 68 fe ff
	ff		 mov	 edx, DWORD PTR _newx$78[ebp]
  02f06	52		 push	 edx
  02f07	e8 00 00 00 00	 call	 _P_SpawnMobj
  02f0c	83 c4 10	 add	 esp, 16			; 00000010H
  02f0f	89 85 5c fe ff
	ff		 mov	 DWORD PTR _flame$75[ebp], eax

; 6403 : 		P_SetTarget(&flame->target, player->mo);

  02f15	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02f18	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f1a	51		 push	 ecx
  02f1b	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _flame$75[ebp]
  02f21	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  02f27	52		 push	 edx
  02f28	e8 00 00 00 00	 call	 _P_SetTarget
  02f2d	83 c4 08	 add	 esp, 8

; 6404 : 		flame->angle = travelangle;

  02f30	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02f36	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _travelangle$74[ebp]
  02f3c	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 6405 : 		flame->fuse = TICRATE*6;

  02f3f	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02f45	c7 80 bc 00 00
	00 d2 00 00 00	 mov	 DWORD PTR [eax+188], 210 ; 000000d2H

; 6406 : 		if (player->mo->eflags & MFE_VERTICALFLIP)

  02f4f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02f52	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f54	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02f5a	83 e2 20	 and	 edx, 32			; 00000020H
  02f5d	74 1b		 je	 SHORT $LN353@P_MovePlay

; 6407 : 			flame->eflags |= MFE_VERTICALFLIP;

  02f5f	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02f65	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02f6b	83 c9 20	 or	 ecx, 32			; 00000020H
  02f6e	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _flame$75[ebp]
  02f74	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN353@P_MovePlay:

; 6408 : 
; 6409 : 		flame->momx = 8;

  02f7a	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02f80	c7 40 48 08 00
	00 00		 mov	 DWORD PTR [eax+72], 8

; 6410 : 		P_XYMovement(flame);

  02f87	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02f8d	50		 push	 eax
  02f8e	e8 00 00 00 00	 call	 _P_XYMovement
  02f93	83 c4 04	 add	 esp, 4

; 6411 : 
; 6412 : 		if (player->mo->eflags & MFE_VERTICALFLIP)

  02f96	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02f99	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f9b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02fa1	83 e2 20	 and	 edx, 32			; 00000020H
  02fa4	74 38		 je	 SHORT $LN354@P_MovePlay

; 6413 : 		{
; 6414 : 			if (flame->z + flame->height < flame->ceilingz-1)

  02fa6	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02fac	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02faf	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _flame$75[ebp]
  02fb5	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  02fb8	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02fbe	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  02fc1	83 ea 01	 sub	 edx, 1
  02fc4	3b ca		 cmp	 ecx, edx
  02fc6	7d 14		 jge	 SHORT $LN356@P_MovePlay

; 6415 : 				P_SetMobjState(flame, S_DISS);

  02fc8	68 4f 06 00 00	 push	 1615			; 0000064fH
  02fcd	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02fd3	50		 push	 eax
  02fd4	e8 00 00 00 00	 call	 _P_SetMobjState
  02fd9	83 c4 08	 add	 esp, 8
$LN356@P_MovePlay:

; 6416 : 		}

  02fdc	eb 2b		 jmp	 SHORT $LN357@P_MovePlay
$LN354@P_MovePlay:

; 6417 : 		else if (flame->z > flame->floorz+1)

  02fde	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  02fe4	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  02fe7	83 c1 01	 add	 ecx, 1
  02fea	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _flame$75[ebp]
  02ff0	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  02ff3	7e 14		 jle	 SHORT $LN357@P_MovePlay

; 6418 : 			P_SetMobjState(flame, S_DISS);

  02ff5	68 4f 06 00 00	 push	 1615			; 0000064fH
  02ffa	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  03000	50		 push	 eax
  03001	e8 00 00 00 00	 call	 _P_SetMobjState
  03006	83 c4 08	 add	 esp, 8
$LN357@P_MovePlay:

; 6419 : 
; 6420 : 		newx = player->mo->x + P_ReturnThrustX(player->mo, travelangle - ANGLE_135, 24*FRACUNIT);

  03009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0300c	8b 30		 mov	 esi, DWORD PTR [eax]
  0300e	68 00 00 18 00	 push	 1572864			; 00180000H
  03013	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _travelangle$74[ebp]
  03019	81 e9 00 00 00
	60		 sub	 ecx, 1610612736		; 60000000H
  0301f	51		 push	 ecx
  03020	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03023	8b 02		 mov	 eax, DWORD PTR [edx]
  03025	50		 push	 eax
  03026	e8 00 00 00 00	 call	 _P_ReturnThrustX
  0302b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0302e	03 46 10	 add	 eax, DWORD PTR [esi+16]
  03031	89 85 68 fe ff
	ff		 mov	 DWORD PTR _newx$78[ebp], eax

; 6421 : 		newy = player->mo->y + P_ReturnThrustY(player->mo, travelangle - ANGLE_135, 24*FRACUNIT);

  03037	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0303a	8b 30		 mov	 esi, DWORD PTR [eax]
  0303c	68 00 00 18 00	 push	 1572864			; 00180000H
  03041	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _travelangle$74[ebp]
  03047	81 e9 00 00 00
	60		 sub	 ecx, 1610612736		; 60000000H
  0304d	51		 push	 ecx
  0304e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03051	8b 02		 mov	 eax, DWORD PTR [edx]
  03053	50		 push	 eax
  03054	e8 00 00 00 00	 call	 _P_ReturnThrustY
  03059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0305c	03 46 14	 add	 eax, DWORD PTR [esi+20]
  0305f	89 85 64 fe ff
	ff		 mov	 DWORD PTR _newy$77[ebp], eax

; 6422 : 		flame = P_SpawnMobj(newx, newy, ground, MT_SPINFIRE);

  03065	6a 47		 push	 71			; 00000047H
  03067	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _ground$76[ebp]
  0306d	50		 push	 eax
  0306e	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _newy$77[ebp]
  03074	51		 push	 ecx
  03075	8b 95 68 fe ff
	ff		 mov	 edx, DWORD PTR _newx$78[ebp]
  0307b	52		 push	 edx
  0307c	e8 00 00 00 00	 call	 _P_SpawnMobj
  03081	83 c4 10	 add	 esp, 16			; 00000010H
  03084	89 85 5c fe ff
	ff		 mov	 DWORD PTR _flame$75[ebp], eax

; 6423 : 		P_SetTarget(&flame->target, player->mo);

  0308a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0308d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0308f	51		 push	 ecx
  03090	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _flame$75[ebp]
  03096	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  0309c	52		 push	 edx
  0309d	e8 00 00 00 00	 call	 _P_SetTarget
  030a2	83 c4 08	 add	 esp, 8

; 6424 : 		flame->angle = travelangle;

  030a5	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  030ab	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _travelangle$74[ebp]
  030b1	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 6425 : 		flame->fuse = TICRATE*6;

  030b4	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  030ba	c7 80 bc 00 00
	00 d2 00 00 00	 mov	 DWORD PTR [eax+188], 210 ; 000000d2H

; 6426 : 		if (player->mo->eflags & MFE_VERTICALFLIP)

  030c4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  030c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  030c9	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  030cf	83 e2 20	 and	 edx, 32			; 00000020H
  030d2	74 1b		 je	 SHORT $LN358@P_MovePlay

; 6427 : 			flame->eflags |= MFE_VERTICALFLIP;

  030d4	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  030da	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  030e0	83 c9 20	 or	 ecx, 32			; 00000020H
  030e3	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _flame$75[ebp]
  030e9	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN358@P_MovePlay:

; 6428 : 
; 6429 : 		flame->momx = 8;

  030ef	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  030f5	c7 40 48 08 00
	00 00		 mov	 DWORD PTR [eax+72], 8

; 6430 : 		P_XYMovement(flame);

  030fc	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  03102	50		 push	 eax
  03103	e8 00 00 00 00	 call	 _P_XYMovement
  03108	83 c4 04	 add	 esp, 4

; 6431 : 
; 6432 : 		if (player->mo->eflags & MFE_VERTICALFLIP)

  0310b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0310e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03110	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  03116	83 e2 20	 and	 edx, 32			; 00000020H
  03119	74 38		 je	 SHORT $LN359@P_MovePlay

; 6433 : 		{
; 6434 : 			if (flame->z + flame->height < flame->ceilingz-1)

  0311b	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  03121	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  03124	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _flame$75[ebp]
  0312a	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0312d	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  03133	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  03136	83 ea 01	 sub	 edx, 1
  03139	3b ca		 cmp	 ecx, edx
  0313b	7d 14		 jge	 SHORT $LN361@P_MovePlay

; 6435 : 				P_SetMobjState(flame, S_DISS);

  0313d	68 4f 06 00 00	 push	 1615			; 0000064fH
  03142	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  03148	50		 push	 eax
  03149	e8 00 00 00 00	 call	 _P_SetMobjState
  0314e	83 c4 08	 add	 esp, 8
$LN361@P_MovePlay:

; 6436 : 		}

  03151	eb 2b		 jmp	 SHORT $LN362@P_MovePlay
$LN359@P_MovePlay:

; 6437 : 		else if (flame->z > flame->floorz+1)

  03153	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  03159	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0315c	83 c1 01	 add	 ecx, 1
  0315f	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _flame$75[ebp]
  03165	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  03168	7e 14		 jle	 SHORT $LN362@P_MovePlay

; 6438 : 			P_SetMobjState(flame, S_DISS);

  0316a	68 4f 06 00 00	 push	 1615			; 0000064fH
  0316f	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _flame$75[ebp]
  03175	50		 push	 eax
  03176	e8 00 00 00 00	 call	 _P_SetMobjState
  0317b	83 c4 08	 add	 esp, 8
$LN362@P_MovePlay:

; 6439 : 	}
; 6440 : 
; 6441 : 	P_DoSpinDash(player, cmd);

  0317e	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  03181	50		 push	 eax
  03182	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03185	51		 push	 ecx
  03186	e8 00 00 00 00	 call	 _P_DoSpinDash
  0318b	83 c4 08	 add	 esp, 8

; 6442 : 
; 6443 : 	// jumping
; 6444 : 	P_DoJumpStuff(player, cmd);

  0318e	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  03191	50		 push	 eax
  03192	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03195	51		 push	 ecx
  03196	e8 00 00 00 00	 call	 _P_DoJumpStuff
  0319b	83 c4 08	 add	 esp, 8

; 6445 : 
; 6446 : 	// If you're not spinning, you'd better not be spindashing!
; 6447 : 	if (!(player->pflags & PF_SPINNING))

  0319e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  031a1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  031a7	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  031ad	75 18		 jne	 SHORT $LN363@P_MovePlay

; 6448 : 		player->pflags &= ~PF_STARTDASH;

  031af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  031b2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  031b8	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  031be	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  031c1	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN363@P_MovePlay:

; 6449 : 
; 6450 : //////////////////
; 6451 : //TAG MODE STUFF//
; 6452 : //////////////////
; 6453 : if (gametype == GT_TAG)

  031c7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  031ce	83 f8 03	 cmp	 eax, 3
  031d1	0f 85 e0 02 00
	00		 jne	 $LN364@P_MovePlay

; 6454 : {
; 6455 : 
; 6456 : 	if (cv_tagtype.value == 1) //hide and seek.

  031d7	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_tagtype+20, 1
  031de	75 7c		 jne	 SHORT $LN32@P_MovePlay

; 6457 : 	{
; 6458 : 		for (i = 0; i < MAXPLAYERS; i++)

  031e0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  031e7	eb 09		 jmp	 SHORT $LN33@P_MovePlay
$LN31@P_MovePlay:
  031e9	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  031ec	83 c0 01	 add	 eax, 1
  031ef	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN33@P_MovePlay:
  031f2	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  031f6	7d 64		 jge	 SHORT $LN32@P_MovePlay

; 6459 : 		{ //already tagged players are invincible and cannot down.
; 6460 : 			if (players[i].pflags & PF_TAGGED)

  031f8	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  031ff	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  03205	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  0320b	74 4d		 je	 SHORT $LN367@P_MovePlay

; 6461 : 			{
; 6462 : 				players[i].powers[pw_flashing] = 5;

  0320d	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  03214	b9 04 00 00 00	 mov	 ecx, 4
  03219	d1 e1		 shl	 ecx, 1
  0321b	c7 84 08 38 00
	00 00 05 00 00
	00		 mov	 DWORD PTR _players[eax+ecx+56], 5

; 6463 : 				players[i].powers[pw_underwater] = players[i].powers[pw_spacetime] = 0;

  03226	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0322d	b9 04 00 00 00	 mov	 ecx, 4
  03232	6b d1 07	 imul	 edx, ecx, 7
  03235	c7 84 10 38 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _players[eax+edx+56], 0
  03240	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  03247	b9 04 00 00 00	 mov	 ecx, 4
  0324c	6b d1 06	 imul	 edx, ecx, 6
  0324f	c7 84 10 38 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _players[eax+edx+56], 0
$LN367@P_MovePlay:

; 6464 : 			}
; 6465 : 		}

  0325a	eb 8d		 jmp	 SHORT $LN31@P_MovePlay
$LN32@P_MovePlay:

; 6466 : 	}
; 6467 : 
; 6468 : 	//During hide time, taggers cannot move.
; 6469 : 	if (leveltime < hidetime * TICRATE)

  0325c	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  03263	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  03269	0f 83 88 00 00
	00		 jae	 $LN368@P_MovePlay

; 6470 : 	{
; 6471 : 		for (i = 0; i < MAXPLAYERS; i++)

  0326f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  03276	eb 09		 jmp	 SHORT $LN36@P_MovePlay
$LN34@P_MovePlay:
  03278	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0327b	83 c0 01	 add	 eax, 1
  0327e	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN36@P_MovePlay:
  03281	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  03285	7d 6b		 jge	 SHORT $LN35@P_MovePlay

; 6472 : 		{
; 6473 : 			if (players[i].pflags & PF_TAGIT)

  03287	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0328e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  03294	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0329a	74 20		 je	 SHORT $LN370@P_MovePlay

; 6474 : 				players[i].pflags |= PF_STASIS;

  0329c	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  032a3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  032a9	81 c9 00 00 00
	08		 or	 ecx, 134217728		; 08000000H
  032af	69 55 f4 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  032b6	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx
$LN370@P_MovePlay:

; 6475 : 			//Don't let stationary taggers drown before they have a chance to move!
; 6476 : 			players[i].powers[pw_underwater] = players[i].powers[pw_spacetime] = 0;

  032bc	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  032c3	b9 04 00 00 00	 mov	 ecx, 4
  032c8	6b d1 07	 imul	 edx, ecx, 7
  032cb	c7 84 10 38 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _players[eax+edx+56], 0
  032d6	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  032dd	b9 04 00 00 00	 mov	 ecx, 4
  032e2	6b d1 06	 imul	 edx, ecx, 6
  032e5	c7 84 10 38 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _players[eax+edx+56], 0

; 6477 : 		}

  032f0	eb 86		 jmp	 SHORT $LN34@P_MovePlay
$LN35@P_MovePlay:

; 6478 : 	}

  032f2	e9 c7 00 00 00	 jmp	 $LN38@P_MovePlay
$LN368@P_MovePlay:

; 6479 : 	else //taggers can now move, but if in hide and seek, hiding players cannot, spectators can always move.
; 6480 : 	{
; 6481 : 		for (i = 0; i < MAXPLAYERS; i++)

  032f7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  032fe	eb 09		 jmp	 SHORT $LN39@P_MovePlay
$LN37@P_MovePlay:
  03300	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  03303	83 c0 01	 add	 eax, 1
  03306	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN39@P_MovePlay:
  03309	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0330d	0f 8d ab 00 00
	00		 jge	 $LN38@P_MovePlay

; 6482 : 		{
; 6483 : 			if (players[i].pflags & PF_TAGIT)

  03313	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0331a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  03320	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  03326	74 22		 je	 SHORT $LN371@P_MovePlay

; 6484 : 				players[i].pflags &= ~PF_STASIS;

  03328	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0332f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  03335	81 e1 ff ff ff
	f7		 and	 ecx, -134217729		; f7ffffffH
  0333b	69 55 f4 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  03342	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx
  03348	eb 6f		 jmp	 SHORT $LN373@P_MovePlay
$LN371@P_MovePlay:

; 6485 : 			else
; 6486 : 			{
; 6487 : 				if (cv_tagtype.value == 1 && !players[i].spectator) //hide and seek.

  0334a	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_tagtype+20, 1
  03351	75 66		 jne	 SHORT $LN373@P_MovePlay
  03353	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0335a	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  03361	85 c9		 test	 ecx, ecx
  03363	75 54		 jne	 SHORT $LN373@P_MovePlay

; 6488 : 				{
; 6489 : 					players[i].pflags |= PF_STASIS;

  03365	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0336c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  03372	81 c9 00 00 00
	08		 or	 ecx, 134217728		; 08000000H
  03378	69 55 f4 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  0337f	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 6490 : 					players[i].powers[pw_underwater] = players[i].powers[pw_spacetime] = 0;//Don't let stationary hiding players drown!

  03385	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0338c	b9 04 00 00 00	 mov	 ecx, 4
  03391	6b d1 07	 imul	 edx, ecx, 7
  03394	c7 84 10 38 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _players[eax+edx+56], 0
  0339f	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  033a6	b9 04 00 00 00	 mov	 ecx, 4
  033ab	6b d1 06	 imul	 edx, ecx, 6
  033ae	c7 84 10 38 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _players[eax+edx+56], 0
$LN373@P_MovePlay:

; 6491 : 				}
; 6492 : 			}
; 6493 : 		}

  033b9	e9 42 ff ff ff	 jmp	 $LN37@P_MovePlay
$LN38@P_MovePlay:

; 6494 : 	}
; 6495 : 
; 6496 : 	// If you're "IT", show a big "IT" over your head for others to see.
; 6497 : 	if (player->pflags & PF_TAGIT)

  033be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  033c1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  033c7	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  033cd	0f 84 df 00 00
	00		 je	 $LN377@P_MovePlay

; 6498 : 	{
; 6499 : 		if (!(player == &players[consoleplayer] || player == &players[secondarydisplayplayer] || player == &players[displayplayer])) // Don't display it on your own view.

  033d3	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  033dd	05 00 00 00 00	 add	 eax, OFFSET _players
  033e2	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  033e5	0f 84 c7 00 00
	00		 je	 $LN377@P_MovePlay
  033eb	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  033f5	05 00 00 00 00	 add	 eax, OFFSET _players
  033fa	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  033fd	0f 84 af 00 00
	00		 je	 $LN377@P_MovePlay
  03403	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0340d	05 00 00 00 00	 add	 eax, OFFSET _players
  03412	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  03415	0f 84 97 00 00
	00		 je	 $LN377@P_MovePlay

; 6500 : 		{
; 6501 : 			if (!(player->mo->eflags & MFE_VERTICALFLIP))

  0341b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0341e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03420	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  03426	83 e2 20	 and	 edx, 32			; 00000020H
  03429	75 32		 jne	 SHORT $LN376@P_MovePlay

; 6502 : 				P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z + player->mo->height, MT_TAG);

  0342b	68 c2 00 00 00	 push	 194			; 000000c2H
  03430	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03433	8b 08		 mov	 ecx, DWORD PTR [eax]
  03435	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03438	8b 02		 mov	 eax, DWORD PTR [edx]
  0343a	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0343d	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  03440	51		 push	 ecx
  03441	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03444	8b 02		 mov	 eax, DWORD PTR [edx]
  03446	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  03449	51		 push	 ecx
  0344a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0344d	8b 02		 mov	 eax, DWORD PTR [edx]
  0344f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  03452	51		 push	 ecx
  03453	e8 00 00 00 00	 call	 _P_SpawnMobj
  03458	83 c4 10	 add	 esp, 16			; 00000010H
  0345b	eb 55		 jmp	 SHORT $LN377@P_MovePlay
$LN376@P_MovePlay:

; 6503 : 			else
; 6504 : 				P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z - (player->mo->height/2), MT_TAG)->eflags |= MFE_VERTICALFLIP;

  0345d	68 c2 00 00 00	 push	 194			; 000000c2H
  03462	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03465	8b 08		 mov	 ecx, DWORD PTR [eax]
  03467	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0346a	8b 02		 mov	 eax, DWORD PTR [edx]
  0346c	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0346f	99		 cdq
  03470	2b c2		 sub	 eax, edx
  03472	d1 f8		 sar	 eax, 1
  03474	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  03477	2b c8		 sub	 ecx, eax
  03479	51		 push	 ecx
  0347a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0347d	8b 02		 mov	 eax, DWORD PTR [edx]
  0347f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  03482	51		 push	 ecx
  03483	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03486	8b 02		 mov	 eax, DWORD PTR [edx]
  03488	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0348b	51		 push	 ecx
  0348c	e8 00 00 00 00	 call	 _P_SpawnMobj
  03491	83 c4 10	 add	 esp, 16			; 00000010H
  03494	05 84 00 00 00	 add	 eax, 132		; 00000084H
  03499	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv2509[ebp], eax
  0349f	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR tv2509[ebp]
  034a5	8b 02		 mov	 eax, DWORD PTR [edx]
  034a7	83 c8 20	 or	 eax, 32			; 00000020H
  034aa	8b 8d b0 fc ff
	ff		 mov	 ecx, DWORD PTR tv2509[ebp]
  034b0	89 01		 mov	 DWORD PTR [ecx], eax
$LN377@P_MovePlay:

; 6505 : 		}
; 6506 : 		//note: time dictated by leveltime.
; 6507 : 	}
; 6508 : }

  034b2	e9 10 04 00 00	 jmp	 $LN395@P_MovePlay
$LN364@P_MovePlay:

; 6509 : //////////////////////////
; 6510 : //CAPTURE THE FLAG STUFF//
; 6511 : //////////////////////////
; 6512 : 
; 6513 : 	else if (gametype == GT_CTF)

  034b7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  034be	83 f8 04	 cmp	 eax, 4
  034c1	0f 85 00 04 00
	00		 jne	 $LN395@P_MovePlay

; 6514 : 	{
; 6515 : 		if (player->gotflag & MF_REDFLAG || player->gotflag & MF_BLUEFLAG) // If you have the flag (duh).

  034c7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  034ca	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  034d1	83 e1 01	 and	 ecx, 1
  034d4	75 13		 jne	 SHORT $LN380@P_MovePlay
  034d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  034d9	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  034e0	83 e1 02	 and	 ecx, 2
  034e3	0f 84 de 03 00
	00		 je	 $LN395@P_MovePlay
$LN380@P_MovePlay:

; 6516 : 		{
; 6517 : 			// Spawn a got-flag message over the head of the player that
; 6518 : 			// has it (but not on your own screen if you have the flag).
; 6519 : 			if (splitscreen)

  034e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  034f0	0f 84 df 01 00
	00		 je	 $LN381@P_MovePlay

; 6520 : 			{
; 6521 : 				if (player->gotflag & MF_REDFLAG)

  034f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  034f9	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  03500	83 e1 01	 and	 ecx, 1
  03503	0f 84 da 00 00
	00		 je	 $LN385@P_MovePlay

; 6522 : 				{
; 6523 : 					if (!(player->mo->eflags & MFE_VERTICALFLIP))

  03509	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0350c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0350e	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  03514	83 e2 20	 and	 edx, 32			; 00000020H
  03517	75 57		 jne	 SHORT $LN384@P_MovePlay

; 6524 : 						P_SpawnMobj(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z + P_GetPlayerHeight(player)+16*FRACUNIT+ player->mo->momz, MT_GOTFLAG);

  03519	68 c3 00 00 00	 push	 195			; 000000c3H
  0351e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03521	8b 30		 mov	 esi, DWORD PTR [eax]
  03523	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03526	51		 push	 ecx
  03527	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  0352c	83 c4 04	 add	 esp, 4
  0352f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  03532	03 d0		 add	 edx, eax
  03534	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03537	8b 08		 mov	 ecx, DWORD PTR [eax]
  03539	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  0353c	8d 8c 02 00 00
	10 00		 lea	 ecx, DWORD PTR [edx+eax+1048576]
  03543	51		 push	 ecx
  03544	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03547	8b 02		 mov	 eax, DWORD PTR [edx]
  03549	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0354c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0354e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  03551	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  03554	50		 push	 eax
  03555	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03558	8b 11		 mov	 edx, DWORD PTR [ecx]
  0355a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0355d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0355f	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  03562	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  03565	52		 push	 edx
  03566	e8 00 00 00 00	 call	 _P_SpawnMobj
  0356b	83 c4 10	 add	 esp, 16			; 00000010H
  0356e	eb 73		 jmp	 SHORT $LN385@P_MovePlay
$LN384@P_MovePlay:

; 6525 : 					else
; 6526 : 						P_SpawnMobj(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z - P_GetPlayerHeight(player)+24*FRACUNIT+ player->mo->momz, MT_GOTFLAG)->eflags |= MFE_VERTICALFLIP;

  03570	68 c3 00 00 00	 push	 195			; 000000c3H
  03575	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03578	8b 30		 mov	 esi, DWORD PTR [eax]
  0357a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0357d	51		 push	 ecx
  0357e	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  03583	83 c4 04	 add	 esp, 4
  03586	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  03589	2b d0		 sub	 edx, eax
  0358b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0358e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03590	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  03593	8d 8c 02 00 00
	18 00		 lea	 ecx, DWORD PTR [edx+eax+1572864]
  0359a	51		 push	 ecx
  0359b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0359e	8b 02		 mov	 eax, DWORD PTR [edx]
  035a0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  035a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  035a5	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  035a8	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  035ab	50		 push	 eax
  035ac	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  035af	8b 11		 mov	 edx, DWORD PTR [ecx]
  035b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  035b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  035b6	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  035b9	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  035bc	52		 push	 edx
  035bd	e8 00 00 00 00	 call	 _P_SpawnMobj
  035c2	83 c4 10	 add	 esp, 16			; 00000010H
  035c5	05 84 00 00 00	 add	 eax, 132		; 00000084H
  035ca	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv2578[ebp], eax
  035d0	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR tv2578[ebp]
  035d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  035d8	83 c9 20	 or	 ecx, 32			; 00000020H
  035db	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR tv2578[ebp]
  035e1	89 0a		 mov	 DWORD PTR [edx], ecx
$LN385@P_MovePlay:

; 6527 : 				}
; 6528 : 				if (player->gotflag & MF_BLUEFLAG)

  035e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  035e6	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  035ed	83 e1 02	 and	 ecx, 2
  035f0	0f 84 da 00 00
	00		 je	 $LN388@P_MovePlay

; 6529 : 				{
; 6530 : 					if (!(player->mo->eflags & MFE_VERTICALFLIP))

  035f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  035f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  035fb	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  03601	83 e2 20	 and	 edx, 32			; 00000020H
  03604	75 57		 jne	 SHORT $LN387@P_MovePlay

; 6531 : 						P_SpawnMobj(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z + P_GetPlayerHeight(player)+16*FRACUNIT+ player->mo->momz, MT_GOTFLAG2);

  03606	68 c4 00 00 00	 push	 196			; 000000c4H
  0360b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0360e	8b 30		 mov	 esi, DWORD PTR [eax]
  03610	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03613	51		 push	 ecx
  03614	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  03619	83 c4 04	 add	 esp, 4
  0361c	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0361f	03 d0		 add	 edx, eax
  03621	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03624	8b 08		 mov	 ecx, DWORD PTR [eax]
  03626	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  03629	8d 8c 02 00 00
	10 00		 lea	 ecx, DWORD PTR [edx+eax+1048576]
  03630	51		 push	 ecx
  03631	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03634	8b 02		 mov	 eax, DWORD PTR [edx]
  03636	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03639	8b 11		 mov	 edx, DWORD PTR [ecx]
  0363b	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0363e	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  03641	50		 push	 eax
  03642	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03645	8b 11		 mov	 edx, DWORD PTR [ecx]
  03647	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0364a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0364c	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  0364f	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  03652	52		 push	 edx
  03653	e8 00 00 00 00	 call	 _P_SpawnMobj
  03658	83 c4 10	 add	 esp, 16			; 00000010H
  0365b	eb 73		 jmp	 SHORT $LN388@P_MovePlay
$LN387@P_MovePlay:

; 6532 : 					else
; 6533 : 						P_SpawnMobj(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z - P_GetPlayerHeight(player)+24*FRACUNIT+ player->mo->momz, MT_GOTFLAG2)->eflags |= MFE_VERTICALFLIP;

  0365d	68 c4 00 00 00	 push	 196			; 000000c4H
  03662	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03665	8b 30		 mov	 esi, DWORD PTR [eax]
  03667	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0366a	51		 push	 ecx
  0366b	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  03670	83 c4 04	 add	 esp, 4
  03673	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  03676	2b d0		 sub	 edx, eax
  03678	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0367b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0367d	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  03680	8d 8c 02 00 00
	18 00		 lea	 ecx, DWORD PTR [edx+eax+1572864]
  03687	51		 push	 ecx
  03688	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0368b	8b 02		 mov	 eax, DWORD PTR [edx]
  0368d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03690	8b 11		 mov	 edx, DWORD PTR [ecx]
  03692	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  03695	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  03698	50		 push	 eax
  03699	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0369c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0369e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  036a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  036a3	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  036a6	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  036a9	52		 push	 edx
  036aa	e8 00 00 00 00	 call	 _P_SpawnMobj
  036af	83 c4 10	 add	 esp, 16			; 00000010H
  036b2	05 84 00 00 00	 add	 eax, 132		; 00000084H
  036b7	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv2636[ebp], eax
  036bd	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR tv2636[ebp]
  036c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  036c5	83 c9 20	 or	 ecx, 32			; 00000020H
  036c8	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR tv2636[ebp]
  036ce	89 0a		 mov	 DWORD PTR [edx], ecx
$LN388@P_MovePlay:

; 6534 : 				}
; 6535 : 			}

  036d0	e9 f2 01 00 00	 jmp	 $LN395@P_MovePlay
$LN381@P_MovePlay:

; 6536 : 			else if ((player != &players[consoleplayer]))

  036d5	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  036df	05 00 00 00 00	 add	 eax, OFFSET _players
  036e4	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  036e7	0f 84 da 01 00
	00		 je	 $LN395@P_MovePlay

; 6537 : 			{
; 6538 : 				if (player->gotflag & MF_REDFLAG)

  036ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  036f0	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  036f7	83 e1 01	 and	 ecx, 1
  036fa	0f 84 da 00 00
	00		 je	 $LN392@P_MovePlay

; 6539 : 				{
; 6540 : 					if (!(player->mo->eflags & MFE_VERTICALFLIP))

  03700	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03703	8b 08		 mov	 ecx, DWORD PTR [eax]
  03705	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0370b	83 e2 20	 and	 edx, 32			; 00000020H
  0370e	75 57		 jne	 SHORT $LN391@P_MovePlay

; 6541 : 						P_SpawnMobj(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z + P_GetPlayerHeight(player)+16*FRACUNIT+ player->mo->momz, MT_GOTFLAG);

  03710	68 c3 00 00 00	 push	 195			; 000000c3H
  03715	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03718	8b 30		 mov	 esi, DWORD PTR [eax]
  0371a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0371d	51		 push	 ecx
  0371e	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  03723	83 c4 04	 add	 esp, 4
  03726	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  03729	03 d0		 add	 edx, eax
  0372b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0372e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03730	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  03733	8d 8c 02 00 00
	10 00		 lea	 ecx, DWORD PTR [edx+eax+1048576]
  0373a	51		 push	 ecx
  0373b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0373e	8b 02		 mov	 eax, DWORD PTR [edx]
  03740	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03743	8b 11		 mov	 edx, DWORD PTR [ecx]
  03745	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  03748	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  0374b	50		 push	 eax
  0374c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0374f	8b 11		 mov	 edx, DWORD PTR [ecx]
  03751	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03754	8b 08		 mov	 ecx, DWORD PTR [eax]
  03756	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  03759	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  0375c	52		 push	 edx
  0375d	e8 00 00 00 00	 call	 _P_SpawnMobj
  03762	83 c4 10	 add	 esp, 16			; 00000010H
  03765	eb 73		 jmp	 SHORT $LN392@P_MovePlay
$LN391@P_MovePlay:

; 6542 : 					else
; 6543 : 						P_SpawnMobj(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z - P_GetPlayerHeight(player)+24*FRACUNIT+ player->mo->momz, MT_GOTFLAG)->eflags |= MFE_VERTICALFLIP;

  03767	68 c3 00 00 00	 push	 195			; 000000c3H
  0376c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0376f	8b 30		 mov	 esi, DWORD PTR [eax]
  03771	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03774	51		 push	 ecx
  03775	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  0377a	83 c4 04	 add	 esp, 4
  0377d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  03780	2b d0		 sub	 edx, eax
  03782	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03785	8b 08		 mov	 ecx, DWORD PTR [eax]
  03787	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  0378a	8d 8c 02 00 00
	18 00		 lea	 ecx, DWORD PTR [edx+eax+1572864]
  03791	51		 push	 ecx
  03792	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03795	8b 02		 mov	 eax, DWORD PTR [edx]
  03797	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0379a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0379c	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0379f	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  037a2	50		 push	 eax
  037a3	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  037a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  037a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  037ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  037ad	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  037b0	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  037b3	52		 push	 edx
  037b4	e8 00 00 00 00	 call	 _P_SpawnMobj
  037b9	83 c4 10	 add	 esp, 16			; 00000010H
  037bc	05 84 00 00 00	 add	 eax, 132		; 00000084H
  037c1	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv2697[ebp], eax
  037c7	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR tv2697[ebp]
  037cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  037cf	83 c9 20	 or	 ecx, 32			; 00000020H
  037d2	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR tv2697[ebp]
  037d8	89 0a		 mov	 DWORD PTR [edx], ecx
$LN392@P_MovePlay:

; 6544 : 				}
; 6545 : 				if (player->gotflag & MF_BLUEFLAG)

  037da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  037dd	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  037e4	83 e1 02	 and	 ecx, 2
  037e7	0f 84 da 00 00
	00		 je	 $LN395@P_MovePlay

; 6546 : 				{
; 6547 : 					if (!(player->mo->eflags & MFE_VERTICALFLIP))

  037ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  037f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  037f2	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  037f8	83 e2 20	 and	 edx, 32			; 00000020H
  037fb	75 57		 jne	 SHORT $LN394@P_MovePlay

; 6548 : 						P_SpawnMobj(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z + P_GetPlayerHeight(player)+16*FRACUNIT+ player->mo->momz, MT_GOTFLAG2);

  037fd	68 c4 00 00 00	 push	 196			; 000000c4H
  03802	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03805	8b 30		 mov	 esi, DWORD PTR [eax]
  03807	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0380a	51		 push	 ecx
  0380b	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  03810	83 c4 04	 add	 esp, 4
  03813	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  03816	03 d0		 add	 edx, eax
  03818	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0381b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0381d	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  03820	8d 8c 02 00 00
	10 00		 lea	 ecx, DWORD PTR [edx+eax+1048576]
  03827	51		 push	 ecx
  03828	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0382b	8b 02		 mov	 eax, DWORD PTR [edx]
  0382d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03830	8b 11		 mov	 edx, DWORD PTR [ecx]
  03832	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  03835	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  03838	50		 push	 eax
  03839	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0383c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0383e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03841	8b 08		 mov	 ecx, DWORD PTR [eax]
  03843	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  03846	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  03849	52		 push	 edx
  0384a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0384f	83 c4 10	 add	 esp, 16			; 00000010H
  03852	eb 73		 jmp	 SHORT $LN395@P_MovePlay
$LN394@P_MovePlay:

; 6549 : 					else
; 6550 : 						P_SpawnMobj(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z - P_GetPlayerHeight(player)+24*FRACUNIT+ player->mo->momz, MT_GOTFLAG2)->eflags |= MFE_VERTICALFLIP;

  03854	68 c4 00 00 00	 push	 196			; 000000c4H
  03859	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0385c	8b 30		 mov	 esi, DWORD PTR [eax]
  0385e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03861	51		 push	 ecx
  03862	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  03867	83 c4 04	 add	 esp, 4
  0386a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0386d	2b d0		 sub	 edx, eax
  0386f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03872	8b 08		 mov	 ecx, DWORD PTR [eax]
  03874	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  03877	8d 8c 02 00 00
	18 00		 lea	 ecx, DWORD PTR [edx+eax+1572864]
  0387e	51		 push	 ecx
  0387f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03882	8b 02		 mov	 eax, DWORD PTR [edx]
  03884	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03887	8b 11		 mov	 edx, DWORD PTR [ecx]
  03889	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0388c	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  0388f	50		 push	 eax
  03890	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03893	8b 11		 mov	 edx, DWORD PTR [ecx]
  03895	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03898	8b 08		 mov	 ecx, DWORD PTR [eax]
  0389a	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  0389d	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  038a0	52		 push	 edx
  038a1	e8 00 00 00 00	 call	 _P_SpawnMobj
  038a6	83 c4 10	 add	 esp, 16			; 00000010H
  038a9	05 84 00 00 00	 add	 eax, 132		; 00000084H
  038ae	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv2755[ebp], eax
  038b4	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR tv2755[ebp]
  038ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  038bc	83 c9 20	 or	 ecx, 32			; 00000020H
  038bf	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR tv2755[ebp]
  038c5	89 0a		 mov	 DWORD PTR [edx], ecx
$LN395@P_MovePlay:

; 6551 : 				}
; 6552 : 			}
; 6553 : 		}
; 6554 : 
; 6555 : 	}
; 6556 : 
; 6557 : //////////////////
; 6558 : //ANALOG CONTROL//
; 6559 : //////////////////
; 6560 : 
; 6561 : 	if (!netgame && ((player == &players[consoleplayer] && cv_analog.value) || (splitscreen && player == &players[secondarydisplayplayer] && cv_analog2.value))
; 6562 : 		&& (cmd->forwardmove != 0 || cmd->sidemove != 0) && !player->climbing && !twodlevel && !(player->mo && (player->mo->flags2 & MF2_TWOD)))

  038c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  038ce	0f 85 85 03 00
	00		 jne	 $LN409@P_MovePlay
  038d4	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  038de	05 00 00 00 00	 add	 eax, OFFSET _players
  038e3	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  038e6	75 09		 jne	 SHORT $LN398@P_MovePlay
  038e8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  038ef	75 32		 jne	 SHORT $LN397@P_MovePlay
$LN398@P_MovePlay:
  038f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  038f8	0f 84 5b 03 00
	00		 je	 $LN409@P_MovePlay
  038fe	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  03908	05 00 00 00 00	 add	 eax, OFFSET _players
  0390d	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  03910	0f 85 43 03 00
	00		 jne	 $LN409@P_MovePlay
  03916	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  0391d	0f 84 36 03 00
	00		 je	 $LN409@P_MovePlay
$LN397@P_MovePlay:
  03923	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  03926	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  03929	85 c9		 test	 ecx, ecx
  0392b	75 0f		 jne	 SHORT $LN399@P_MovePlay
  0392d	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  03930	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  03934	85 c9		 test	 ecx, ecx
  03936	0f 84 1d 03 00
	00		 je	 $LN409@P_MovePlay
$LN399@P_MovePlay:
  0393c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0393f	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  03946	0f 85 0d 03 00
	00		 jne	 $LN409@P_MovePlay
  0394c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  03953	25 00 02 00 00	 and	 eax, 512		; 00000200H
  03958	0f 85 fb 02 00
	00		 jne	 $LN409@P_MovePlay
  0395e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03961	83 38 00	 cmp	 DWORD PTR [eax], 0
  03964	74 17		 je	 SHORT $LN400@P_MovePlay
  03966	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03969	8b 08		 mov	 ecx, DWORD PTR [eax]
  0396b	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  03971	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  03977	0f 85 dc 02 00
	00		 jne	 $LN409@P_MovePlay
$LN400@P_MovePlay:

; 6563 : 	{
; 6564 : 		// If travelling slow enough, face the way the controls
; 6565 : 		// point and not your direction of movement.
; 6566 : 		if (player->speed < 5*player->mo->scale/100 || (player->pflags & PF_GLIDING) || player->mo->z > player->mo->floorz)

  0397d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03980	8b 08		 mov	 ecx, DWORD PTR [eax]
  03982	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  03989	6b c2 05	 imul	 eax, edx, 5
  0398c	99		 cdq
  0398d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03992	f7 f9		 idiv	 ecx
  03994	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03997	39 82 0c 01 00
	00		 cmp	 DWORD PTR [edx+268], eax
  0399d	7c 27		 jl	 SHORT $LN403@P_MovePlay
  0399f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  039a2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  039a8	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  039ae	75 16		 jne	 SHORT $LN403@P_MovePlay
  039b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  039b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  039b5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  039b8	8b 02		 mov	 eax, DWORD PTR [edx]
  039ba	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  039bd	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  039c0	0f 8e 0e 01 00
	00		 jle	 $LN401@P_MovePlay
$LN403@P_MovePlay:

; 6567 : 		{
; 6568 : 			tempx = tempy = 0;

  039c6	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _tempy$[ebp], 0
  039cd	8b 45 ec	 mov	 eax, DWORD PTR _tempy$[ebp]
  039d0	89 45 f0	 mov	 DWORD PTR _tempx$[ebp], eax

; 6569 : 
; 6570 : 			tempangle = thiscam->angle;

  039d3	8b 45 e0	 mov	 eax, DWORD PTR _thiscam$[ebp]
  039d6	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  039d9	89 4d e8	 mov	 DWORD PTR _tempangle$[ebp], ecx

; 6571 : 			tempangle >>= ANGLETOFINESHIFT;

  039dc	8b 45 e8	 mov	 eax, DWORD PTR _tempangle$[ebp]
  039df	c1 e8 13	 shr	 eax, 19			; 00000013H
  039e2	89 45 e8	 mov	 DWORD PTR _tempangle$[ebp], eax

; 6572 : 			tempx += FixedMul(cmd->forwardmove,FINECOSINE(tempangle));

  039e5	8b 45 e8	 mov	 eax, DWORD PTR _tempangle$[ebp]
  039e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  039ee	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  039f1	52		 push	 edx
  039f2	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  039f5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  039f8	51		 push	 ecx
  039f9	e8 00 00 00 00	 call	 _FixedMul
  039fe	83 c4 08	 add	 esp, 8
  03a01	03 45 f0	 add	 eax, DWORD PTR _tempx$[ebp]
  03a04	89 45 f0	 mov	 DWORD PTR _tempx$[ebp], eax

; 6573 : 			tempy += FixedMul(cmd->forwardmove,FINESINE(tempangle));

  03a07	8b 45 e8	 mov	 eax, DWORD PTR _tempangle$[ebp]
  03a0a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  03a11	51		 push	 ecx
  03a12	8b 55 f8	 mov	 edx, DWORD PTR _cmd$[ebp]
  03a15	0f be 02	 movsx	 eax, BYTE PTR [edx]
  03a18	50		 push	 eax
  03a19	e8 00 00 00 00	 call	 _FixedMul
  03a1e	83 c4 08	 add	 esp, 8
  03a21	03 45 ec	 add	 eax, DWORD PTR _tempy$[ebp]
  03a24	89 45 ec	 mov	 DWORD PTR _tempy$[ebp], eax

; 6574 : 
; 6575 : 			tempangle = thiscam->angle-ANGLE_90;

  03a27	8b 45 e0	 mov	 eax, DWORD PTR _thiscam$[ebp]
  03a2a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  03a2d	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  03a33	89 4d e8	 mov	 DWORD PTR _tempangle$[ebp], ecx

; 6576 : 			tempangle >>= ANGLETOFINESHIFT;

  03a36	8b 45 e8	 mov	 eax, DWORD PTR _tempangle$[ebp]
  03a39	c1 e8 13	 shr	 eax, 19			; 00000013H
  03a3c	89 45 e8	 mov	 DWORD PTR _tempangle$[ebp], eax

; 6577 : 			tempx += FixedMul(cmd->sidemove,FINECOSINE(tempangle));

  03a3f	8b 45 e8	 mov	 eax, DWORD PTR _tempangle$[ebp]
  03a42	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  03a48	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  03a4b	52		 push	 edx
  03a4c	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  03a4f	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  03a53	51		 push	 ecx
  03a54	e8 00 00 00 00	 call	 _FixedMul
  03a59	83 c4 08	 add	 esp, 8
  03a5c	03 45 f0	 add	 eax, DWORD PTR _tempx$[ebp]
  03a5f	89 45 f0	 mov	 DWORD PTR _tempx$[ebp], eax

; 6578 : 			tempy += FixedMul(cmd->sidemove,FINESINE(tempangle));

  03a62	8b 45 e8	 mov	 eax, DWORD PTR _tempangle$[ebp]
  03a65	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  03a6c	51		 push	 ecx
  03a6d	8b 55 f8	 mov	 edx, DWORD PTR _cmd$[ebp]
  03a70	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  03a74	50		 push	 eax
  03a75	e8 00 00 00 00	 call	 _FixedMul
  03a7a	83 c4 08	 add	 esp, 8
  03a7d	03 45 ec	 add	 eax, DWORD PTR _tempy$[ebp]
  03a80	89 45 ec	 mov	 DWORD PTR _tempy$[ebp], eax

; 6579 : 
; 6580 : 			tempx = tempx*FRACUNIT;

  03a83	8b 45 f0	 mov	 eax, DWORD PTR _tempx$[ebp]
  03a86	c1 e0 10	 shl	 eax, 16			; 00000010H
  03a89	89 45 f0	 mov	 DWORD PTR _tempx$[ebp], eax

; 6581 : 			tempy = tempy*FRACUNIT;

  03a8c	8b 45 ec	 mov	 eax, DWORD PTR _tempy$[ebp]
  03a8f	c1 e0 10	 shl	 eax, 16			; 00000010H
  03a92	89 45 ec	 mov	 DWORD PTR _tempy$[ebp], eax

; 6582 : 
; 6583 : 			player->mo->angle = R_PointToAngle2(player->mo->x, player->mo->y, player->mo->x + tempx, player->mo->y + tempy);

  03a95	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03a98	8b 08		 mov	 ecx, DWORD PTR [eax]
  03a9a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  03a9d	03 55 ec	 add	 edx, DWORD PTR _tempy$[ebp]
  03aa0	52		 push	 edx
  03aa1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03aa4	8b 08		 mov	 ecx, DWORD PTR [eax]
  03aa6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  03aa9	03 55 f0	 add	 edx, DWORD PTR _tempx$[ebp]
  03aac	52		 push	 edx
  03aad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ab0	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ab2	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  03ab5	52		 push	 edx
  03ab6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ab9	8b 08		 mov	 ecx, DWORD PTR [eax]
  03abb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  03abe	52		 push	 edx
  03abf	e8 00 00 00 00	 call	 _R_PointToAngle2
  03ac4	83 c4 10	 add	 esp, 16			; 00000010H
  03ac7	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03aca	8b 11		 mov	 edx, DWORD PTR [ecx]
  03acc	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 6584 : 		}

  03acf	e9 36 01 00 00	 jmp	 $LN404@P_MovePlay
$LN401@P_MovePlay:

; 6585 : 		// Otherwise, face the direction you're travelling.
; 6586 : 		else if ((player->pflags & PF_WALKINGANIM) || (player->pflags & PF_RUNNINGANIM) || (player->pflags & PF_SPINNINGANIM) || ((player->mo->state == &states[S_PLAY_ABL1] || player->mo->state == &states[S_PLAY_ABL1] || player->mo->state == &states[S_PLAY_ABL2] || player->mo->state == &states[S_PLAY_SPC1] || player->mo->state == &states[S_PLAY_SPC2] || player->mo->state == &states[S_PLAY_SPC3] || player->mo->state == &states[S_PLAY_SPC4]) && player->charability == CA_FLY))

  03ad4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ad7	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03add	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  03ae3	0f 85 db 00 00
	00		 jne	 $LN405@P_MovePlay
  03ae9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03aec	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03af2	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  03af8	0f 85 c6 00 00
	00		 jne	 $LN405@P_MovePlay
  03afe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b01	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03b07	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  03b0d	0f 85 b1 00 00
	00		 jne	 $LN405@P_MovePlay
  03b13	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b16	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b18	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03b1d	6b c2 15	 imul	 eax, edx, 21
  03b20	05 00 00 00 00	 add	 eax, OFFSET _states
  03b25	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03b28	0f 84 8a 00 00
	00		 je	 $LN406@P_MovePlay
  03b2e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b31	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b33	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03b38	6b c2 15	 imul	 eax, edx, 21
  03b3b	05 00 00 00 00	 add	 eax, OFFSET _states
  03b40	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03b43	74 73		 je	 SHORT $LN406@P_MovePlay
  03b45	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b48	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b4a	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03b4f	6b c2 16	 imul	 eax, edx, 22
  03b52	05 00 00 00 00	 add	 eax, OFFSET _states
  03b57	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03b5a	74 5c		 je	 SHORT $LN406@P_MovePlay
  03b5c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b5f	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b61	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03b66	6b c2 17	 imul	 eax, edx, 23
  03b69	05 00 00 00 00	 add	 eax, OFFSET _states
  03b6e	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03b71	74 45		 je	 SHORT $LN406@P_MovePlay
  03b73	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b76	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b78	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03b7d	6b c2 18	 imul	 eax, edx, 24
  03b80	05 00 00 00 00	 add	 eax, OFFSET _states
  03b85	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03b88	74 2e		 je	 SHORT $LN406@P_MovePlay
  03b8a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b8d	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b8f	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03b94	6b c2 19	 imul	 eax, edx, 25
  03b97	05 00 00 00 00	 add	 eax, OFFSET _states
  03b9c	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03b9f	74 17		 je	 SHORT $LN406@P_MovePlay
  03ba1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ba4	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ba6	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03bab	6b c2 1a	 imul	 eax, edx, 26
  03bae	05 00 00 00 00	 add	 eax, OFFSET _states
  03bb3	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03bb6	75 52		 jne	 SHORT $LN404@P_MovePlay
$LN406@P_MovePlay:
  03bb8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03bbb	83 b8 d8 00 00
	00 01		 cmp	 DWORD PTR [eax+216], 1
  03bc2	75 46		 jne	 SHORT $LN404@P_MovePlay
$LN405@P_MovePlay:

; 6587 : 			player->mo->angle = R_PointToAngle2(player->mo->x, player->mo->y, player->rmomx + player->mo->x, player->rmomy + player->mo->y);

  03bc4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03bc7	8b 08		 mov	 ecx, DWORD PTR [eax]
  03bc9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03bcc	8b 82 48 01 00
	00		 mov	 eax, DWORD PTR [edx+328]
  03bd2	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  03bd5	50		 push	 eax
  03bd6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03bd9	8b 11		 mov	 edx, DWORD PTR [ecx]
  03bdb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03bde	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  03be4	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  03be7	51		 push	 ecx
  03be8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03beb	8b 02		 mov	 eax, DWORD PTR [edx]
  03bed	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  03bf0	51		 push	 ecx
  03bf1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03bf4	8b 02		 mov	 eax, DWORD PTR [edx]
  03bf6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  03bf9	51		 push	 ecx
  03bfa	e8 00 00 00 00	 call	 _R_PointToAngle2
  03bff	83 c4 10	 add	 esp, 16			; 00000010H
  03c02	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03c05	8b 0a		 mov	 ecx, DWORD PTR [edx]
  03c07	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN404@P_MovePlay:

; 6588 : 
; 6589 : 		// Update the local angle control.
; 6590 : 		if (player == &players[consoleplayer])

  03c0a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  03c14	05 00 00 00 00	 add	 eax, OFFSET _players
  03c19	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  03c1c	75 10		 jne	 SHORT $LN407@P_MovePlay

; 6591 : 			localangle = player->mo->angle;

  03c1e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c21	8b 08		 mov	 ecx, DWORD PTR [eax]
  03c23	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  03c26	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  03c2c	eb 2b		 jmp	 SHORT $LN409@P_MovePlay
$LN407@P_MovePlay:

; 6592 : 		else if (splitscreen && player == &players[secondarydisplayplayer])

  03c2e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  03c35	74 22		 je	 SHORT $LN409@P_MovePlay
  03c37	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  03c41	05 00 00 00 00	 add	 eax, OFFSET _players
  03c46	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  03c49	75 0e		 jne	 SHORT $LN409@P_MovePlay

; 6593 : 			localangle2 = player->mo->angle;

  03c4b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c4e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03c50	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  03c53	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN409@P_MovePlay:

; 6594 : 	}
; 6595 : 
; 6596 : 	///////////////////////////
; 6597 : 	//BOMB SHIELD ACTIVATION,//
; 6598 : 	//HOMING, AND OTHER COOL //
; 6599 : 	//STUFF!                 //
; 6600 : 	///////////////////////////
; 6601 : 
; 6602 : 	// Jump shield activation
; 6603 : 	if (cmd->buttons & BT_USE && !(player->pflags & PF_USEDOWN) && !(player->mo->state == &states[S_PLAY_PLG1])
; 6604 : 		&& !(player->mo->state == &states[S_PLAY_PAIN]) && !player->climbing && !(player->pflags & PF_GLIDING) && !(player->pflags & PF_SLIDING)
; 6605 : 		&& !(player->pflags & PF_THOKKED) && !player->powers[pw_tailsfly]
; 6606 : 		&& !onground && !(player->mo->state >= &states[S_PLAY_FALL1] && player->mo->state <= &states[S_PLAY_FALL2]))

  03c59	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  03c5c	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  03c60	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  03c66	0f 84 72 01 00
	00		 je	 $LN414@P_MovePlay
  03c6c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c6f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03c75	83 e1 04	 and	 ecx, 4
  03c78	0f 85 60 01 00
	00		 jne	 $LN414@P_MovePlay
  03c7e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c81	8b 08		 mov	 ecx, DWORD PTR [eax]
  03c83	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03c88	c1 e2 04	 shl	 edx, 4
  03c8b	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  03c91	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  03c94	0f 84 44 01 00
	00		 je	 $LN414@P_MovePlay
  03c9a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c9d	8b 08		 mov	 ecx, DWORD PTR [eax]
  03c9f	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03ca4	6b c2 21	 imul	 eax, edx, 33
  03ca7	05 00 00 00 00	 add	 eax, OFFSET _states
  03cac	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03caf	0f 84 29 01 00
	00		 je	 $LN414@P_MovePlay
  03cb5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03cb8	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  03cbf	0f 85 19 01 00
	00		 jne	 $LN414@P_MovePlay
  03cc5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03cc8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03cce	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  03cd4	0f 85 04 01 00
	00		 jne	 $LN414@P_MovePlay
  03cda	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03cdd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03ce3	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  03ce9	0f 85 ef 00 00
	00		 jne	 $LN414@P_MovePlay
  03cef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03cf2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03cf8	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  03cfe	0f 85 da 00 00
	00		 jne	 $LN414@P_MovePlay
  03d04	b8 04 00 00 00	 mov	 eax, 4
  03d09	6b c8 05	 imul	 ecx, eax, 5
  03d0c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03d0f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03d14	0f 85 c4 00 00
	00		 jne	 $LN414@P_MovePlay
  03d1a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  03d21	0f 85 b7 00 00
	00		 jne	 $LN414@P_MovePlay
  03d27	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d2a	8b 08		 mov	 ecx, DWORD PTR [eax]
  03d2c	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03d31	6b c2 27	 imul	 eax, edx, 39
  03d34	05 00 00 00 00	 add	 eax, OFFSET _states
  03d39	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03d3c	72 1b		 jb	 SHORT $LN411@P_MovePlay
  03d3e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d41	8b 08		 mov	 ecx, DWORD PTR [eax]
  03d43	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03d48	6b c2 28	 imul	 eax, edx, 40
  03d4b	05 00 00 00 00	 add	 eax, OFFSET _states
  03d50	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03d53	0f 86 85 00 00
	00		 jbe	 $LN414@P_MovePlay
$LN411@P_MovePlay:

; 6607 : 	{
; 6608 : 		if (player->powers[pw_jumpshield] && !player->powers[pw_super])

  03d59	b8 04 00 00 00	 mov	 eax, 4
  03d5e	6b c8 03	 imul	 ecx, eax, 3
  03d61	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03d64	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03d69	74 20		 je	 SHORT $LN412@P_MovePlay
  03d6b	b8 04 00 00 00	 mov	 eax, 4
  03d70	6b c8 0f	 imul	 ecx, eax, 15
  03d73	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03d76	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03d7b	75 0e		 jne	 SHORT $LN412@P_MovePlay

; 6609 : 			P_DoJumpShield(player);

  03d7d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d80	50		 push	 eax
  03d81	e8 00 00 00 00	 call	 _P_DoJumpShield
  03d86	83 c4 04	 add	 esp, 4
  03d89	eb 53		 jmp	 SHORT $LN414@P_MovePlay
$LN412@P_MovePlay:

; 6610 : 		else if (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]) && player->charability == CA_FLY)

  03d8b	b8 04 00 00 00	 mov	 eax, 4
  03d90	6b c8 0f	 imul	 ecx, eax, 15
  03d93	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03d96	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03d9b	74 41		 je	 SHORT $LN414@P_MovePlay
  03d9d	b8 04 00 00 00	 mov	 eax, 4
  03da2	6b c8 18	 imul	 ecx, eax, 24
  03da5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03da8	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  03dac	83 e0 7f	 and	 eax, 127		; 0000007fH
  03daf	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  03db2	75 2a		 jne	 SHORT $LN414@P_MovePlay
  03db4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03db7	83 b8 d8 00 00
	00 01		 cmp	 DWORD PTR [eax+216], 1
  03dbe	75 1e		 jne	 SHORT $LN414@P_MovePlay

; 6611 : 		{
; 6612 : 			P_DoJumpShield(player);

  03dc0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03dc3	50		 push	 eax
  03dc4	e8 00 00 00 00	 call	 _P_DoJumpShield
  03dc9	83 c4 04	 add	 esp, 4

; 6613 : 			player->mo->momz *= 2;

  03dcc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03dcf	8b 08		 mov	 ecx, DWORD PTR [eax]
  03dd1	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  03dd4	d1 e2		 shl	 edx, 1
  03dd6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03dd9	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ddb	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN414@P_MovePlay:

; 6614 : 		}
; 6615 : 	}
; 6616 : 
; 6617 : 	// Bomb shield and force shield activation and Super Sonic move
; 6618 : 	if (cmd->buttons & BT_USE)

  03dde	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  03de1	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  03de5	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  03deb	0f 84 8b 01 00
	00		 je	 $LN426@P_MovePlay

; 6619 : 	{
; 6620 : 		if (player->pflags & PF_JUMPED)

  03df1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03df4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03dfa	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  03e00	0f 84 76 01 00
	00		 je	 $LN426@P_MovePlay

; 6621 : 		{
; 6622 : 			if (player->skin == 0 && player->powers[pw_super] && player->speed > 5 && ((player->mo->momz <= 0 && !(player->mo->eflags & MFE_VERTICALFLIP)) || (player->mo->momz >= 0 && (player->mo->eflags & MFE_VERTICALFLIP))))

  03e06	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e09	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  03e10	0f 85 de 00 00
	00		 jne	 $LN417@P_MovePlay
  03e16	b8 04 00 00 00	 mov	 eax, 4
  03e1b	6b c8 0f	 imul	 ecx, eax, 15
  03e1e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03e21	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03e26	0f 84 c8 00 00
	00		 je	 $LN417@P_MovePlay
  03e2c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e2f	83 b8 0c 01 00
	00 05		 cmp	 DWORD PTR [eax+268], 5
  03e36	0f 8e b8 00 00
	00		 jle	 $LN417@P_MovePlay
  03e3c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e3f	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e41	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  03e45	7f 10		 jg	 SHORT $LN420@P_MovePlay
  03e47	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e4a	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e4c	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  03e52	83 e2 20	 and	 edx, 32			; 00000020H
  03e55	74 1f		 je	 SHORT $LN419@P_MovePlay
$LN420@P_MovePlay:
  03e57	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e5c	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  03e60	0f 8c 8e 00 00
	00		 jl	 $LN417@P_MovePlay
  03e66	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e69	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e6b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  03e71	83 e2 20	 and	 edx, 32			; 00000020H
  03e74	74 7e		 je	 SHORT $LN417@P_MovePlay
$LN419@P_MovePlay:

; 6623 : 			{
; 6624 : 				if ((player->mo->state >= &states[S_PLAY_ATK1]
; 6625 : 					&& player->mo->state <= &states[S_PLAY_ATK4])
; 6626 : 					|| player->mo->state == &states[S_PLAY_PAIN])

  03e76	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e79	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e7b	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03e80	6b c2 0c	 imul	 eax, edx, 12
  03e83	05 00 00 00 00	 add	 eax, OFFSET _states
  03e88	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03e8b	72 17		 jb	 SHORT $LN423@P_MovePlay
  03e8d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e90	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e92	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03e97	6b c2 0f	 imul	 eax, edx, 15
  03e9a	05 00 00 00 00	 add	 eax, OFFSET _states
  03e9f	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03ea2	76 17		 jbe	 SHORT $LN422@P_MovePlay
$LN423@P_MovePlay:
  03ea4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ea7	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ea9	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  03eae	6b c2 21	 imul	 eax, edx, 33
  03eb1	05 00 00 00 00	 add	 eax, OFFSET _states
  03eb6	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  03eb9	75 10		 jne	 SHORT $LN421@P_MovePlay
$LN422@P_MovePlay:

; 6627 : 					P_SetPlayerMobjState(player->mo, S_PLAY_SUPERWALK1);

  03ebb	6a 2b		 push	 43			; 0000002bH
  03ebd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ec0	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ec2	51		 push	 ecx
  03ec3	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  03ec8	83 c4 08	 add	 esp, 8
$LN421@P_MovePlay:

; 6628 : 
; 6629 : 				player->mo->momz = 0;

  03ecb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ece	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ed0	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 6630 : 				player->pflags &= ~PF_SPINNING;

  03ed7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03eda	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03ee0	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  03ee6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03ee9	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 6631 : 			}

  03eef	e9 88 00 00 00	 jmp	 $LN426@P_MovePlay
$LN417@P_MovePlay:

; 6632 : 			else if (!player->powers[pw_super] && (player->powers[pw_bombshield]) && !(player->pflags & PF_USEDOWN))

  03ef4	b8 04 00 00 00	 mov	 eax, 4
  03ef9	6b c8 0f	 imul	 ecx, eax, 15
  03efc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03eff	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03f04	75 76		 jne	 SHORT $LN426@P_MovePlay
  03f06	b8 04 00 00 00	 mov	 eax, 4
  03f0b	6b c8 0a	 imul	 ecx, eax, 10
  03f0e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03f11	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03f16	74 64		 je	 SHORT $LN426@P_MovePlay
  03f18	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03f1b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03f21	83 e1 04	 and	 ecx, 4
  03f24	75 56		 jne	 SHORT $LN426@P_MovePlay

; 6633 : 			{
; 6634 : 				// Don't let Super Sonic or invincibility use it
; 6635 : 				if (!(player->powers[pw_super] || player->powers[pw_invulnerability]))

  03f26	b8 04 00 00 00	 mov	 eax, 4
  03f2b	6b c8 0f	 imul	 ecx, eax, 15
  03f2e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03f31	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03f36	75 44		 jne	 SHORT $LN426@P_MovePlay
  03f38	b8 04 00 00 00	 mov	 eax, 4
  03f3d	6b c8 00	 imul	 ecx, eax, 0
  03f40	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03f43	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03f48	75 32		 jne	 SHORT $LN426@P_MovePlay

; 6636 : 				{
; 6637 : 					if (player->powers[pw_bombshield])

  03f4a	b8 04 00 00 00	 mov	 eax, 4
  03f4f	6b c8 0a	 imul	 ecx, eax, 10
  03f52	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03f55	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03f5a	74 20		 je	 SHORT $LN426@P_MovePlay

; 6638 : 					{
; 6639 : 						player->blackow = 1; // This signals for the BOOM to take effect, as seen below.

  03f5c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03f5f	c7 80 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+308], 1

; 6640 : 						player->powers[pw_bombshield] = false;

  03f69	b8 04 00 00 00	 mov	 eax, 4
  03f6e	6b c8 0a	 imul	 ecx, eax, 10
  03f71	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03f74	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN426@P_MovePlay:

; 6641 : 					}
; 6642 : 				}
; 6643 : 			}
; 6644 : 		}
; 6645 : #if 0 //activated reflect code
; 6646 : 		if (!player->powers[pw_super] && !player->shielddelay && (player->powers[pw_forceshield]) && !(player->pflags & PF_USEDOWN))
; 6647 : 		{
; 6648 : 			thinker_t *think;
; 6649 : 			mobj_t *mo;
; 6650 : 			fixed_t dist;
; 6651 : 
; 6652 : 			player->shielddelay = 5*TICRATE;
; 6653 : 
; 6654 : 			S_StartSound(player->mo, sfx_shield);
; 6655 : 
; 6656 : 			for (think = thinkercap.next; think != &thinkercap; think = think->next)
; 6657 : 			{
; 6658 : 				if (think->function.acp1 != (actionf_p1)P_MobjThinker) // Not a mobj thinker
; 6659 : 					continue;
; 6660 : 
; 6661 : 				mo =(mobj_t *)think;
; 6662 : 
; 6663 : 				if (mo->flags & MF_MISSILE)
; 6664 : 				{
; 6665 : 					dist = P_AproxDistance((mo->x+mo->momx)-player->mo->x, (mo->y+mo->momy)-player->mo->y);
; 6666 : 
; 6667 : 					if (dist > player->mo->radius*8)
; 6668 : 						continue;
; 6669 : 
; 6670 : 					if (abs((mo->z+mo->momz)-player->mo->z) > player->mo->height*8)
; 6671 : 						continue;
; 6672 : 
; 6673 : 					mo->momx = -mo->momx;
; 6674 : 					mo->momy = -mo->momy;
; 6675 : 					mo->momz = -mo->momz;
; 6676 : 
; 6677 : 					P_SetTarget(&mo->target, player->mo);
; 6678 : 
; 6679 : 					if (mo->type == MT_DETON)
; 6680 : 						P_SetMobjState(mo, mo->info->xdeathstate);
; 6681 : 				}
; 6682 : 				else if (mo->type == MT_BIGMACE || mo->type == MT_SMALLMACE) // Reverse the direction of a swinging mace
; 6683 : 				{
; 6684 : 					dist = P_AproxDistance((mo->x+mo->momx)-player->mo->x, (mo->y+mo->momy)-player->mo->y);
; 6685 : 
; 6686 : 					if (dist > player->mo->radius*8)
; 6687 : 						continue;
; 6688 : 
; 6689 : 					if (abs((mo->z+mo->momz)-player->mo->z) > player->mo->height*8)
; 6690 : 						continue;
; 6691 : 
; 6692 : 					if (mo->target && mo->target->type == MT_MACEPOINT)
; 6693 : 						mo->target->lastlook = -mo->target->lastlook;
; 6694 : 				}
; 6695 : 			}
; 6696 : 		}
; 6697 : #endif
; 6698 : 	}
; 6699 : 
; 6700 : 	// This is separate so that P_DamageMobj in p_inter.c can call it, too.
; 6701 : 	if (player->blackow)

  03f7c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03f7f	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR [eax+308], 0
  03f86	0f 84 dc 00 00
	00		 je	 $LN427@P_MovePlay

; 6702 : 	{
; 6703 : 		if (player->blackow == 2)

  03f8c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03f8f	83 b8 34 01 00
	00 02		 cmp	 DWORD PTR [eax+308], 2
  03f96	75 15		 jne	 SHORT $LN428@P_MovePlay

; 6704 : 			S_StartSound (player->mo, sfx_zoom);

  03f98	68 f2 00 00 00	 push	 242			; 000000f2H
  03f9d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03fa0	8b 08		 mov	 ecx, DWORD PTR [eax]
  03fa2	51		 push	 ecx
  03fa3	e8 00 00 00 00	 call	 _S_StartSound
  03fa8	83 c4 08	 add	 esp, 8
  03fab	eb 10		 jmp	 SHORT $LN429@P_MovePlay
$LN428@P_MovePlay:

; 6705 : 		else
; 6706 : 			S_StartSound (player->mo, sfx_bkpoof); // Sound the BANG!

  03fad	6a 21		 push	 33			; 00000021H
  03faf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03fb2	8b 08		 mov	 ecx, DWORD PTR [eax]
  03fb4	51		 push	 ecx
  03fb5	e8 00 00 00 00	 call	 _S_StartSound
  03fba	83 c4 08	 add	 esp, 8
$LN429@P_MovePlay:

; 6707 : 
; 6708 : 		for (i = 0; i < MAXPLAYERS; i++)

  03fbd	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  03fc4	eb 09		 jmp	 SHORT $LN42@P_MovePlay
$LN40@P_MovePlay:
  03fc6	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  03fc9	83 c0 01	 add	 eax, 1
  03fcc	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN42@P_MovePlay:
  03fcf	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  03fd3	7d 6d		 jge	 SHORT $LN41@P_MovePlay

; 6709 : 			if (playeringame[i] && P_AproxDistance(player->mo->x - players[i].mo->x,

  03fd5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  03fd8	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  03fe0	74 5e		 je	 SHORT $LN430@P_MovePlay
  03fe2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03fe5	8b 08		 mov	 ecx, DWORD PTR [eax]
  03fe7	69 55 f4 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  03fee	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  03ff4	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  03ff7	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  03ffa	51		 push	 ecx
  03ffb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03ffe	8b 02		 mov	 eax, DWORD PTR [edx]
  04000	69 4d f4 fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  04007	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0400d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  04010	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  04013	50		 push	 eax
  04014	e8 00 00 00 00	 call	 _P_AproxDistance
  04019	83 c4 08	 add	 esp, 8
  0401c	3d 00 00 00 06	 cmp	 eax, 100663296		; 06000000H
  04021	7d 1d		 jge	 SHORT $LN430@P_MovePlay

; 6710 : 				player->mo->y - players[i].mo->y) < 1536*FRACUNIT)
; 6711 : 			{
; 6712 : 				players[i].bonuscount += 10; // Flash the palette.

  04023	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0402a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+176]
  04030	83 c1 0a	 add	 ecx, 10			; 0000000aH
  04033	69 55 f4 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  0403a	89 8a b0 00 00
	00		 mov	 DWORD PTR _players[edx+176], ecx
$LN430@P_MovePlay:

; 6713 : 			}

  04040	eb 84		 jmp	 SHORT $LN40@P_MovePlay
$LN41@P_MovePlay:

; 6714 : 
; 6715 : 		player->blackow = 3;

  04042	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04045	c7 80 34 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+308], 3

; 6716 : 		P_NukeEnemies(player); // Search for all nearby enemies and nuke their pants off!

  0404f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04052	50		 push	 eax
  04053	e8 00 00 00 00	 call	 _P_NukeEnemies
  04058	83 c4 04	 add	 esp, 4

; 6717 : 		player->blackow = 0;

  0405b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0405e	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
$LN427@P_MovePlay:

; 6718 : 	}
; 6719 : 
; 6720 : 	// HOMING option.
; 6721 : 	if (player->charability == CA_HOMINGTHOK)

  04068	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0406b	83 b8 d8 00 00
	00 07		 cmp	 DWORD PTR [eax+216], 7
  04072	0f 85 aa 01 00
	00		 jne	 $LN431@P_MovePlay

; 6722 : 	{
; 6723 : 		// If you've got a target, chase after it!
; 6724 : 		if (player->homing && player->mo->tracer)

  04078	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0407b	0f b6 88 38 01
	00 00		 movzx	 ecx, BYTE PTR [eax+312]
  04082	85 c9		 test	 ecx, ecx
  04084	0f 84 7b 01 00
	00		 je	 $LN440@P_MovePlay
  0408a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0408d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0408f	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  04096	0f 84 69 01 00
	00		 je	 $LN440@P_MovePlay

; 6725 : 		{
; 6726 : 			mobj_t *item = P_SpawnThokMobj(player);

  0409c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0409f	50		 push	 eax
  040a0	e8 00 00 00 00	 call	 _P_SpawnThokMobj
  040a5	83 c4 04	 add	 esp, 4
  040a8	89 85 54 fe ff
	ff		 mov	 DWORD PTR _item$73[ebp], eax

; 6727 : 
; 6728 : 			if (item && (player->charflags & SF_GHOSTTHOKITEM))

  040ae	83 bd 54 fe ff
	ff 00		 cmp	 DWORD PTR _item$73[ebp], 0
  040b5	74 31		 je	 SHORT $LN434@P_MovePlay
  040b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  040ba	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  040c0	83 e1 04	 and	 ecx, 4
  040c3	74 23		 je	 SHORT $LN434@P_MovePlay

; 6729 : 			{
; 6730 : 				P_SpawnGhostMobj(item);

  040c5	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _item$73[ebp]
  040cb	50		 push	 eax
  040cc	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  040d1	83 c4 04	 add	 esp, 4

; 6731 : 				P_SetMobjState(item, S_DISS);

  040d4	68 4f 06 00 00	 push	 1615			; 0000064fH
  040d9	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _item$73[ebp]
  040df	50		 push	 eax
  040e0	e8 00 00 00 00	 call	 _P_SetMobjState
  040e5	83 c4 08	 add	 esp, 8
$LN434@P_MovePlay:

; 6732 : 			}
; 6733 : 
; 6734 : 			P_HomingAttack(player->mo, player->mo->tracer);

  040e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  040eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  040ed	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  040f3	52		 push	 edx
  040f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  040f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  040f9	51		 push	 ecx
  040fa	e8 00 00 00 00	 call	 _P_HomingAttack
  040ff	83 c4 08	 add	 esp, 8

; 6735 : 
; 6736 : 			// But if you don't, then stop homing.
; 6737 : 			if (player->mo->tracer->health <= 0 || (player->mo->tracer->flags2 & MF2_FRET))

  04102	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04105	8b 08		 mov	 ecx, DWORD PTR [eax]
  04107	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0410d	83 ba 8c 00 00
	00 00		 cmp	 DWORD PTR [edx+140], 0
  04114	7e 1a		 jle	 SHORT $LN436@P_MovePlay
  04116	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04119	8b 08		 mov	 ecx, DWORD PTR [eax]
  0411b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04121	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  04127	83 e0 10	 and	 eax, 16			; 00000010H
  0412a	0f 84 d5 00 00
	00		 je	 $LN440@P_MovePlay
$LN436@P_MovePlay:

; 6738 : 			{
; 6739 : 				if (player->mo->eflags & MFE_UNDERWATER)

  04130	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04133	8b 08		 mov	 ecx, DWORD PTR [eax]
  04135	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0413b	83 e2 08	 and	 edx, 8
  0413e	74 25		 je	 SHORT $LN437@P_MovePlay

; 6740 : 				{
; 6741 : 					P_SetObjectMomZ(player->mo, FixedDiv(457*FRACUNIT,72*FRACUNIT), false);

  04140	6a 00		 push	 0
  04142	68 00 00 48 00	 push	 4718592			; 00480000H
  04147	68 00 00 c9 01	 push	 29949952		; 01c90000H
  0414c	e8 00 00 00 00	 call	 _FixedDiv
  04151	83 c4 08	 add	 esp, 8
  04154	50		 push	 eax
  04155	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0415a	51		 push	 ecx
  0415b	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  04160	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6742 : 				}

  04163	eb 15		 jmp	 SHORT $LN438@P_MovePlay
$LN437@P_MovePlay:

; 6743 : 				else
; 6744 : 					P_SetObjectMomZ(player->mo, 10*FRACUNIT/NEWTICRATERATIO, false);

  04165	6a 00		 push	 0
  04167	68 00 00 0a 00	 push	 655360			; 000a0000H
  0416c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0416f	8b 08		 mov	 ecx, DWORD PTR [eax]
  04171	51		 push	 ecx
  04172	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  04177	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN438@P_MovePlay:

; 6745 : 
; 6746 : 				player->mo->momx = player->mo->momy = player->homing = 0;

  0417a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0417d	c6 80 38 01 00
	00 00		 mov	 BYTE PTR [eax+312], 0
  04184	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  04187	8b 11		 mov	 edx, DWORD PTR [ecx]
  04189	c7 42 4c 00 00
	00 00		 mov	 DWORD PTR [edx+76], 0
  04190	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04193	8b 08		 mov	 ecx, DWORD PTR [eax]
  04195	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 6747 : 
; 6748 : 				if (player->mo->tracer->flags2 & MF2_FRET)

  0419c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0419f	8b 08		 mov	 ecx, DWORD PTR [eax]
  041a1	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  041a7	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  041ad	83 e0 10	 and	 eax, 16			; 00000010H
  041b0	74 26		 je	 SHORT $LN439@P_MovePlay

; 6749 : 					P_InstaThrust(player->mo, player->mo->angle, -(player->speed <<(FRACBITS-3)));

  041b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  041b5	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  041bb	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  041be	f7 d9		 neg	 ecx
  041c0	51		 push	 ecx
  041c1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  041c4	8b 02		 mov	 eax, DWORD PTR [edx]
  041c6	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  041c9	51		 push	 ecx
  041ca	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  041cd	8b 02		 mov	 eax, DWORD PTR [edx]
  041cf	50		 push	 eax
  041d0	e8 00 00 00 00	 call	 _P_InstaThrust
  041d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN439@P_MovePlay:

; 6750 : 
; 6751 : 				if (!(player->mo->tracer->flags & MF_BOSS))

  041d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  041db	8b 08		 mov	 ecx, DWORD PTR [eax]
  041dd	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  041e3	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  041e6	25 80 00 00 00	 and	 eax, 128		; 00000080H
  041eb	75 18		 jne	 SHORT $LN440@P_MovePlay

; 6752 : 					player->pflags &= ~PF_THOKKED;

  041ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  041f0	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  041f6	81 e1 ff 7f ff
	ff		 and	 ecx, -32769		; ffff7fffH
  041fc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  041ff	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN440@P_MovePlay:

; 6753 : 			}
; 6754 : 		}
; 6755 : 
; 6756 : 		// If you're not jumping, then you obviously wouldn't be homing.
; 6757 : 		if (!(player->pflags & PF_JUMPED))

  04205	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04208	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0420e	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  04214	75 0a		 jne	 SHORT $LN441@P_MovePlay

; 6758 : 			player->homing = 0;

  04216	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04219	c6 80 38 01 00
	00 00		 mov	 BYTE PTR [eax+312], 0
$LN441@P_MovePlay:

; 6759 : 	}

  04220	eb 0a		 jmp	 SHORT $LN432@P_MovePlay
$LN431@P_MovePlay:

; 6760 : 	else
; 6761 : 		player->homing = 0;

  04222	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04225	c6 80 38 01 00
	00 00		 mov	 BYTE PTR [eax+312], 0
$LN432@P_MovePlay:

; 6762 : 
; 6763 : 	if (player->climbing == 1)

  0422c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0422f	83 b8 24 01 00
	00 01		 cmp	 DWORD PTR [eax+292], 1
  04236	0f 85 a5 11 00
	00		 jne	 $LN543@P_MovePlay

; 6764 : 	{
; 6765 : 		fixed_t platx;
; 6766 : 		fixed_t platy;
; 6767 : 		subsector_t *glidesector;
; 6768 : 		boolean climb = true;

  0423c	c7 85 44 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 1

; 6769 : 
; 6770 : 		platx = P_ReturnThrustX(player->mo, player->mo->angle, player->mo->radius + 8*FRACUNIT);

  04246	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04249	8b 08		 mov	 ecx, DWORD PTR [eax]
  0424b	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0424e	81 c2 00 00 08
	00		 add	 edx, 524288		; 00080000H
  04254	52		 push	 edx
  04255	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04258	8b 08		 mov	 ecx, DWORD PTR [eax]
  0425a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0425d	52		 push	 edx
  0425e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04261	8b 08		 mov	 ecx, DWORD PTR [eax]
  04263	51		 push	 ecx
  04264	e8 00 00 00 00	 call	 _P_ReturnThrustX
  04269	83 c4 0c	 add	 esp, 12			; 0000000cH
  0426c	89 85 50 fe ff
	ff		 mov	 DWORD PTR _platx$72[ebp], eax

; 6771 : 		platy = P_ReturnThrustY(player->mo, player->mo->angle, player->mo->radius + 8*FRACUNIT);

  04272	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04275	8b 08		 mov	 ecx, DWORD PTR [eax]
  04277	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0427a	81 c2 00 00 08
	00		 add	 edx, 524288		; 00080000H
  04280	52		 push	 edx
  04281	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04284	8b 08		 mov	 ecx, DWORD PTR [eax]
  04286	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  04289	52		 push	 edx
  0428a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0428d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0428f	51		 push	 ecx
  04290	e8 00 00 00 00	 call	 _P_ReturnThrustY
  04295	83 c4 0c	 add	 esp, 12			; 0000000cH
  04298	89 85 4c fe ff
	ff		 mov	 DWORD PTR _platy$71[ebp], eax

; 6772 : 
; 6773 : 		glidesector = R_PointInSubsector(player->mo->x + platx, player->mo->y + platy);

  0429e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  042a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  042a3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  042a6	03 95 4c fe ff
	ff		 add	 edx, DWORD PTR _platy$71[ebp]
  042ac	52		 push	 edx
  042ad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  042b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  042b2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  042b5	03 95 50 fe ff
	ff		 add	 edx, DWORD PTR _platx$72[ebp]
  042bb	52		 push	 edx
  042bc	e8 00 00 00 00	 call	 _R_PointInSubsector
  042c1	83 c4 08	 add	 esp, 8
  042c4	89 85 48 fe ff
	ff		 mov	 DWORD PTR _glidesector$70[ebp], eax

; 6774 : 
; 6775 : 		if (glidesector->sector != player->mo->subsector->sector)

  042ca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  042cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  042cf	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  042d2	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  042d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  042da	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  042dc	0f 84 61 0e 00
	00		 je	 $LN443@P_MovePlay

; 6776 : 		{
; 6777 : 			boolean floorclimb;
; 6778 : 			boolean thrust;
; 6779 : 			boolean boostup;
; 6780 : 			boolean skyclimber;
; 6781 : 			thrust = false;

  042e2	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _thrust$67[ebp], 0

; 6782 : 			floorclimb = false;

  042ec	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 0

; 6783 : 			boostup = false;

  042f6	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 0

; 6784 : 			skyclimber = false;

  04300	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _skyclimber$65[ebp], 0

; 6785 : 
; 6786 : 			if (glidesector->sector->ffloors)

  0430a	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04310	8b 08		 mov	 ecx, DWORD PTR [eax]
  04312	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  04319	0f 84 3e 05 00
	00		 je	 $LN44@P_MovePlay

; 6787 : 			{
; 6788 : 				ffloor_t *rover;
; 6789 : 				for (rover = glidesector->sector->ffloors; rover; rover = rover->next)

  0431f	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04325	8b 08		 mov	 ecx, DWORD PTR [eax]
  04327	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0432d	89 95 30 fe ff
	ff		 mov	 DWORD PTR _rover$64[ebp], edx
  04333	eb 0f		 jmp	 SHORT $LN45@P_MovePlay
$LN43@P_MovePlay:
  04335	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  0433b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0433e	89 8d 30 fe ff
	ff		 mov	 DWORD PTR _rover$64[ebp], ecx
$LN45@P_MovePlay:
  04344	83 bd 30 fe ff
	ff 00		 cmp	 DWORD PTR _rover$64[ebp], 0
  0434b	0f 84 0c 05 00
	00		 je	 $LN44@P_MovePlay

; 6790 : 				{
; 6791 : 					if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_BLOCKPLAYER) || (rover->flags & FF_BUSTUP))

  04351	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04357	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0435a	83 e1 01	 and	 ecx, 1
  0435d	74 1f		 je	 SHORT $LN447@P_MovePlay
  0435f	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04365	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04368	83 e1 02	 and	 ecx, 2
  0436b	74 11		 je	 SHORT $LN447@P_MovePlay
  0436d	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04373	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04376	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  0437c	74 02		 je	 SHORT $LN446@P_MovePlay
$LN447@P_MovePlay:

; 6792 : 						continue;

  0437e	eb b5		 jmp	 SHORT $LN43@P_MovePlay
$LN446@P_MovePlay:

; 6793 : 
; 6794 : 					floorclimb = true;

  04380	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 1

; 6795 : 
; 6796 : 					// Only supports rovers that are moving like an 'elevator', not just the top or bottom.
; 6797 : 					if (rover->master->frontsector->floorspeed && rover->master->frontsector->ceilspeed == 42)

  0438a	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04390	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  04393	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  04396	83 ba e8 00 00
	00 00		 cmp	 DWORD PTR [edx+232], 0
  0439d	0f 84 06 01 00
	00		 je	 $LN453@P_MovePlay
  043a3	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  043a9	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  043ac	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  043af	83 ba ec 00 00
	00 2a		 cmp	 DWORD PTR [edx+236], 42	; 0000002aH
  043b6	0f 85 ed 00 00
	00		 jne	 $LN453@P_MovePlay

; 6798 : 					{
; 6799 : 						if ((!(player->mo->eflags & MFE_VERTICALFLIP) && (*rover->bottomheight < player->mo->z+player->mo->height) && (*rover->topheight >= player->mo->z + 16*FRACUNIT))
; 6800 : 							|| ((player->mo->eflags & MFE_VERTICALFLIP) && (*rover->topheight > player->mo->z+player->mo->height) && (*rover->bottomheight <= player->mo->z + player->mo->height - 16*FRACUNIT)))

  043bc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  043bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  043c1	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  043c7	83 e2 20	 and	 edx, 32			; 00000020H
  043ca	75 37		 jne	 SHORT $LN451@P_MovePlay
  043cc	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  043d2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  043d5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  043d8	8b 02		 mov	 eax, DWORD PTR [edx]
  043da	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  043dd	8b 12		 mov	 edx, DWORD PTR [edx]
  043df	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  043e2	03 42 44	 add	 eax, DWORD PTR [edx+68]
  043e5	39 01		 cmp	 DWORD PTR [ecx], eax
  043e7	7d 1a		 jge	 SHORT $LN451@P_MovePlay
  043e9	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  043ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  043f1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  043f4	8b 02		 mov	 eax, DWORD PTR [edx]
  043f6	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  043f9	81 c2 00 00 10
	00		 add	 edx, 1048576		; 00100000H
  043ff	39 11		 cmp	 DWORD PTR [ecx], edx
  04401	7d 54		 jge	 SHORT $LN450@P_MovePlay
$LN451@P_MovePlay:
  04403	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04406	8b 08		 mov	 ecx, DWORD PTR [eax]
  04408	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0440e	83 e2 20	 and	 edx, 32			; 00000020H
  04411	0f 84 92 00 00
	00		 je	 $LN453@P_MovePlay
  04417	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  0441d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0441f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04422	8b 02		 mov	 eax, DWORD PTR [edx]
  04424	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04427	8b 12		 mov	 edx, DWORD PTR [edx]
  04429	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0442c	03 42 44	 add	 eax, DWORD PTR [edx+68]
  0442f	39 01		 cmp	 DWORD PTR [ecx], eax
  04431	7e 76		 jle	 SHORT $LN453@P_MovePlay
  04433	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04439	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0443c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0443f	8b 02		 mov	 eax, DWORD PTR [edx]
  04441	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04444	8b 12		 mov	 edx, DWORD PTR [edx]
  04446	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  04449	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  0444c	8d 84 10 00 00
	f0 ff		 lea	 eax, DWORD PTR [eax+edx-1048576]
  04453	39 01		 cmp	 DWORD PTR [ecx], eax
  04455	7f 52		 jg	 SHORT $LN453@P_MovePlay
$LN450@P_MovePlay:

; 6801 : 						{
; 6802 : 							if (cmd->forwardmove != 0)

  04457	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  0445a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0445d	85 c9		 test	 ecx, ecx
  0445f	74 24		 je	 SHORT $LN452@P_MovePlay

; 6803 : 								player->mo->momz += rover->master->frontsector->floorspeed;

  04461	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04464	8b 08		 mov	 ecx, DWORD PTR [eax]
  04466	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _rover$64[ebp]
  0446c	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0446f	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  04472	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  04475	03 82 e8 00 00
	00		 add	 eax, DWORD PTR [edx+232]
  0447b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0447e	8b 11		 mov	 edx, DWORD PTR [ecx]
  04480	89 42 50	 mov	 DWORD PTR [edx+80], eax
  04483	eb 24		 jmp	 SHORT $LN453@P_MovePlay
$LN452@P_MovePlay:

; 6804 : 							else
; 6805 : 							{
; 6806 : 								player->mo->momz = rover->master->frontsector->floorspeed;

  04485	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  0448b	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0448e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  04491	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04494	8b 08		 mov	 ecx, DWORD PTR [eax]
  04496	8b 92 e8 00 00
	00		 mov	 edx, DWORD PTR [edx+232]
  0449c	89 51 50	 mov	 DWORD PTR [ecx+80], edx

; 6807 : 								climb = false;

  0449f	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 0
$LN453@P_MovePlay:

; 6808 : 							}
; 6809 : 						}
; 6810 : 					}
; 6811 : 
; 6812 : 					// Gravity is flipped, so the comments are, too.
; 6813 : 					if (player->mo->eflags & MFE_VERTICALFLIP)

  044a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  044ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  044ae	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  044b4	83 e2 20	 and	 edx, 32			; 00000020H
  044b7	0f 84 8a 01 00
	00		 je	 $LN454@P_MovePlay

; 6814 : 					{
; 6815 : 						// Trying to climb down past the bottom of the FOF
; 6816 : 						if ((*rover->topheight >= player->mo->z + player->mo->height) && ((player->mo->z + player->mo->height + player->mo->momz) >= *rover->topheight))

  044bd	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  044c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  044c5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  044c8	8b 02		 mov	 eax, DWORD PTR [edx]
  044ca	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  044cd	8b 12		 mov	 edx, DWORD PTR [edx]
  044cf	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  044d2	03 42 44	 add	 eax, DWORD PTR [edx+68]
  044d5	39 01		 cmp	 DWORD PTR [ecx], eax
  044d7	0f 8c f1 00 00
	00		 jl	 $LN461@P_MovePlay
  044dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  044e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  044e2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  044e5	8b 02		 mov	 eax, DWORD PTR [edx]
  044e7	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  044ea	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  044ed	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  044f0	8b 02		 mov	 eax, DWORD PTR [edx]
  044f2	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  044f5	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _rover$64[ebp]
  044fb	8b 02		 mov	 eax, DWORD PTR [edx]
  044fd	3b 08		 cmp	 ecx, DWORD PTR [eax]
  044ff	0f 8c c9 00 00
	00		 jl	 $LN461@P_MovePlay

; 6817 : 						{
; 6818 : 							ffloor_t *roverbelow;
; 6819 : 							boolean foundfof = false;

  04505	c7 85 28 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _foundfof$62[ebp], 0

; 6820 : 							floorclimb = true;

  0450f	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 1

; 6821 : 							boostup = false;

  04519	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 0

; 6822 : 
; 6823 : 							// Is there a FOF directly below this one that we can move onto?
; 6824 : 							for (roverbelow = glidesector->sector->ffloors; roverbelow; roverbelow = roverbelow->next)

  04523	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04529	8b 08		 mov	 ecx, DWORD PTR [eax]
  0452b	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  04531	89 95 2c fe ff
	ff		 mov	 DWORD PTR _roverbelow$63[ebp], edx
  04537	eb 0f		 jmp	 SHORT $LN48@P_MovePlay
$LN46@P_MovePlay:
  04539	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$63[ebp]
  0453f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  04542	89 8d 2c fe ff
	ff		 mov	 DWORD PTR _roverbelow$63[ebp], ecx
$LN48@P_MovePlay:
  04548	83 bd 2c fe ff
	ff 00		 cmp	 DWORD PTR _roverbelow$63[ebp], 0
  0454f	74 68		 je	 SHORT $LN47@P_MovePlay

; 6825 : 							{
; 6826 : 								if (!(roverbelow->flags & FF_EXISTS) || !(roverbelow->flags & FF_BLOCKPLAYER) || (roverbelow->flags & FF_BUSTUP))

  04551	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$63[ebp]
  04557	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0455a	83 e1 01	 and	 ecx, 1
  0455d	74 1f		 je	 SHORT $LN458@P_MovePlay
  0455f	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$63[ebp]
  04565	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04568	83 e1 02	 and	 ecx, 2
  0456b	74 11		 je	 SHORT $LN458@P_MovePlay
  0456d	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$63[ebp]
  04573	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04576	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  0457c	74 02		 je	 SHORT $LN457@P_MovePlay
$LN458@P_MovePlay:

; 6827 : 									continue;

  0457e	eb b9		 jmp	 SHORT $LN46@P_MovePlay
$LN457@P_MovePlay:

; 6828 : 
; 6829 : 								if (roverbelow == rover)

  04580	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$63[ebp]
  04586	3b 85 30 fe ff
	ff		 cmp	 eax, DWORD PTR _rover$64[ebp]
  0458c	75 02		 jne	 SHORT $LN459@P_MovePlay

; 6830 : 									continue;

  0458e	eb a9		 jmp	 SHORT $LN46@P_MovePlay
$LN459@P_MovePlay:

; 6831 : 
; 6832 : 								if (*roverbelow->bottomheight < *rover->topheight + 16*FRACUNIT)

  04590	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$63[ebp]
  04596	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  04599	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _rover$64[ebp]
  0459f	8b 02		 mov	 eax, DWORD PTR [edx]
  045a1	8b 10		 mov	 edx, DWORD PTR [eax]
  045a3	81 c2 00 00 10
	00		 add	 edx, 1048576		; 00100000H
  045a9	39 11		 cmp	 DWORD PTR [ecx], edx
  045ab	7d 0a		 jge	 SHORT $LN460@P_MovePlay

; 6833 : 									foundfof = true;

  045ad	c7 85 28 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _foundfof$62[ebp], 1
$LN460@P_MovePlay:

; 6834 : 							}

  045b7	eb 80		 jmp	 SHORT $LN46@P_MovePlay
$LN47@P_MovePlay:

; 6835 : 
; 6836 : 							if (!foundfof)

  045b9	83 bd 28 fe ff
	ff 00		 cmp	 DWORD PTR _foundfof$62[ebp], 0
  045c0	75 0c		 jne	 SHORT $LN461@P_MovePlay

; 6837 : 								player->mo->momz = 0;

  045c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  045c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  045c7	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
$LN461@P_MovePlay:

; 6838 : 						}
; 6839 : 
; 6840 : 						// Below the FOF
; 6841 : 						if (*rover->topheight <= player->mo->z)

  045ce	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  045d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  045d6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  045d9	8b 02		 mov	 eax, DWORD PTR [edx]
  045db	8b 09		 mov	 ecx, DWORD PTR [ecx]
  045dd	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  045e0	7f 1e		 jg	 SHORT $LN462@P_MovePlay

; 6842 : 						{
; 6843 : 							floorclimb = false;

  045e2	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 0

; 6844 : 							boostup = false;

  045ec	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 0

; 6845 : 							thrust = false;

  045f6	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _thrust$67[ebp], 0
$LN462@P_MovePlay:

; 6846 : 						}
; 6847 : 
; 6848 : 						// Above the FOF
; 6849 : 						if (*rover->bottomheight > player->mo->z + player->mo->height - 16*FRACUNIT)

  04600	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04606	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  04609	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0460c	8b 02		 mov	 eax, DWORD PTR [edx]
  0460e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04611	8b 12		 mov	 edx, DWORD PTR [edx]
  04613	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  04616	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  04619	8d 84 10 00 00
	f0 ff		 lea	 eax, DWORD PTR [eax+edx-1048576]
  04620	39 01		 cmp	 DWORD PTR [ecx], eax
  04622	7e 1e		 jle	 SHORT $LN463@P_MovePlay

; 6850 : 						{
; 6851 : 							floorclimb = false;

  04624	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 0

; 6852 : 							thrust = true;

  0462e	c7 85 3c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _thrust$67[ebp], 1

; 6853 : 							boostup = true;

  04638	c7 85 38 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 1
$LN463@P_MovePlay:

; 6854 : 						}
; 6855 : 					}

  04642	e9 76 01 00 00	 jmp	 $LN471@P_MovePlay
$LN454@P_MovePlay:

; 6856 : 					else
; 6857 : 					{
; 6858 : 						// Trying to climb down past the bottom of a FOF
; 6859 : 						if ((*rover->bottomheight <= player->mo->z) && ((player->mo->z + player->mo->momz) <= *rover->bottomheight))

  04647	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  0464d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  04650	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04653	8b 02		 mov	 eax, DWORD PTR [edx]
  04655	8b 09		 mov	 ecx, DWORD PTR [ecx]
  04657	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0465a	0f 8f ea 00 00
	00		 jg	 $LN469@P_MovePlay
  04660	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04663	8b 08		 mov	 ecx, DWORD PTR [eax]
  04665	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04668	8b 02		 mov	 eax, DWORD PTR [edx]
  0466a	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0466d	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  04670	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _rover$64[ebp]
  04676	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  04679	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0467b	0f 8f c9 00 00
	00		 jg	 $LN469@P_MovePlay

; 6860 : 						{
; 6861 : 							ffloor_t *roverbelow;
; 6862 : 							boolean foundfof = false;

  04681	c7 85 20 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _foundfof$60[ebp], 0

; 6863 : 							floorclimb = true;

  0468b	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 1

; 6864 : 							boostup = false;

  04695	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 0

; 6865 : 
; 6866 : 							// Is there a FOF directly below this one that we can move onto?
; 6867 : 							for (roverbelow = glidesector->sector->ffloors; roverbelow; roverbelow = roverbelow->next)

  0469f	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  046a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  046a7	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  046ad	89 95 24 fe ff
	ff		 mov	 DWORD PTR _roverbelow$61[ebp], edx
  046b3	eb 0f		 jmp	 SHORT $LN51@P_MovePlay
$LN49@P_MovePlay:
  046b5	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$61[ebp]
  046bb	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  046be	89 8d 24 fe ff
	ff		 mov	 DWORD PTR _roverbelow$61[ebp], ecx
$LN51@P_MovePlay:
  046c4	83 bd 24 fe ff
	ff 00		 cmp	 DWORD PTR _roverbelow$61[ebp], 0
  046cb	74 68		 je	 SHORT $LN50@P_MovePlay

; 6868 : 							{
; 6869 : 								if (!(roverbelow->flags & FF_EXISTS) || !(roverbelow->flags & FF_BLOCKPLAYER) || (roverbelow->flags & FF_BUSTUP))

  046cd	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$61[ebp]
  046d3	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  046d6	83 e1 01	 and	 ecx, 1
  046d9	74 1f		 je	 SHORT $LN466@P_MovePlay
  046db	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$61[ebp]
  046e1	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  046e4	83 e1 02	 and	 ecx, 2
  046e7	74 11		 je	 SHORT $LN466@P_MovePlay
  046e9	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$61[ebp]
  046ef	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  046f2	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  046f8	74 02		 je	 SHORT $LN465@P_MovePlay
$LN466@P_MovePlay:

; 6870 : 									continue;

  046fa	eb b9		 jmp	 SHORT $LN49@P_MovePlay
$LN465@P_MovePlay:

; 6871 : 
; 6872 : 								if (roverbelow == rover)

  046fc	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$61[ebp]
  04702	3b 85 30 fe ff
	ff		 cmp	 eax, DWORD PTR _rover$64[ebp]
  04708	75 02		 jne	 SHORT $LN467@P_MovePlay

; 6873 : 									continue;

  0470a	eb a9		 jmp	 SHORT $LN49@P_MovePlay
$LN467@P_MovePlay:

; 6874 : 
; 6875 : 								if (*roverbelow->topheight > *rover->bottomheight - 16*FRACUNIT)

  0470c	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _roverbelow$61[ebp]
  04712	8b 08		 mov	 ecx, DWORD PTR [eax]
  04714	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _rover$64[ebp]
  0471a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0471d	8b 10		 mov	 edx, DWORD PTR [eax]
  0471f	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  04725	39 11		 cmp	 DWORD PTR [ecx], edx
  04727	7e 0a		 jle	 SHORT $LN468@P_MovePlay

; 6876 : 									foundfof = true;

  04729	c7 85 20 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _foundfof$60[ebp], 1
$LN468@P_MovePlay:

; 6877 : 							}

  04733	eb 80		 jmp	 SHORT $LN49@P_MovePlay
$LN50@P_MovePlay:

; 6878 : 
; 6879 : 							if (!foundfof)

  04735	83 bd 20 fe ff
	ff 00		 cmp	 DWORD PTR _foundfof$60[ebp], 0
  0473c	75 0c		 jne	 SHORT $LN469@P_MovePlay

; 6880 : 								player->mo->momz = 0;

  0473e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04741	8b 08		 mov	 ecx, DWORD PTR [eax]
  04743	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
$LN469@P_MovePlay:

; 6881 : 						}
; 6882 : 
; 6883 : 						// Below the FOF
; 6884 : 						if (*rover->bottomheight >= player->mo->z + player->mo->height)

  0474a	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04750	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  04753	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04756	8b 02		 mov	 eax, DWORD PTR [edx]
  04758	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0475b	8b 12		 mov	 edx, DWORD PTR [edx]
  0475d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  04760	03 42 44	 add	 eax, DWORD PTR [edx+68]
  04763	39 01		 cmp	 DWORD PTR [ecx], eax
  04765	7c 1e		 jl	 SHORT $LN470@P_MovePlay

; 6885 : 						{
; 6886 : 							floorclimb = false;

  04767	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 0

; 6887 : 							boostup = false;

  04771	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 0

; 6888 : 							thrust = false;

  0477b	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _thrust$67[ebp], 0
$LN470@P_MovePlay:

; 6889 : 						}
; 6890 : 
; 6891 : 						// Above the FOF
; 6892 : 						if (*rover->topheight < player->mo->z + 16*FRACUNIT)

  04785	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  0478b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0478d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04790	8b 02		 mov	 eax, DWORD PTR [edx]
  04792	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  04795	81 c2 00 00 10
	00		 add	 edx, 1048576		; 00100000H
  0479b	39 11		 cmp	 DWORD PTR [ecx], edx
  0479d	7d 1e		 jge	 SHORT $LN471@P_MovePlay

; 6893 : 						{
; 6894 : 							floorclimb = false;

  0479f	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 0

; 6895 : 							thrust = true;

  047a9	c7 85 3c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _thrust$67[ebp], 1

; 6896 : 							boostup = true;

  047b3	c7 85 38 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 1
$LN471@P_MovePlay:

; 6897 : 						}
; 6898 : 					}
; 6899 : 
; 6900 : 					if (rover->flags & FF_CRUMBLE && !(netgame && player->spectator))

  047bd	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  047c3	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  047c6	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  047cc	74 7f		 je	 SHORT $LN472@P_MovePlay
  047ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  047d5	74 0e		 je	 SHORT $LN473@P_MovePlay
  047d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  047da	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  047e1	85 c9		 test	 ecx, ecx
  047e3	75 68		 jne	 SHORT $LN472@P_MovePlay
$LN473@P_MovePlay:

; 6901 : 						EV_StartCrumble(rover->master->frontsector, rover, (rover->flags & FF_FLOATBOB), player, rover->alpha, !(rover->flags & FF_NORETURN));

  047e5	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  047eb	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  047ee	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  047f4	75 0c		 jne	 SHORT $LN818@P_MovePlay
  047f6	c7 85 b0 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv3436[ebp], 1
  04800	eb 0a		 jmp	 SHORT $LN819@P_MovePlay
$LN818@P_MovePlay:
  04802	c7 85 b0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv3436[ebp], 0
$LN819@P_MovePlay:
  0480c	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR tv3436[ebp]
  04812	52		 push	 edx
  04813	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04819	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0481c	51		 push	 ecx
  0481d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04820	52		 push	 edx
  04821	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  04827	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0482a	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  04830	51		 push	 ecx
  04831	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _rover$64[ebp]
  04837	52		 push	 edx
  04838	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _rover$64[ebp]
  0483e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  04841	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  04844	52		 push	 edx
  04845	e8 00 00 00 00	 call	 _EV_StartCrumble
  0484a	83 c4 18	 add	 esp, 24			; 00000018H
$LN472@P_MovePlay:

; 6902 : 
; 6903 : 					if (floorclimb)

  0484d	83 bd 40 fe ff
	ff 00		 cmp	 DWORD PTR _floorclimb$68[ebp], 0
  04854	74 02		 je	 SHORT $LN474@P_MovePlay

; 6904 : 						break;

  04856	eb 05		 jmp	 SHORT $LN44@P_MovePlay
$LN474@P_MovePlay:

; 6905 : 				}

  04858	e9 d8 fa ff ff	 jmp	 $LN43@P_MovePlay
$LN44@P_MovePlay:

; 6906 : 			}
; 6907 : 
; 6908 : 			// Gravity is flipped, so are comments.
; 6909 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  0485d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04860	8b 08		 mov	 ecx, DWORD PTR [eax]
  04862	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  04868	83 e2 20	 and	 edx, 32			; 00000020H
  0486b	0f 84 81 01 00
	00		 je	 $LN475@P_MovePlay

; 6910 : 			{
; 6911 : 				// Trying to climb down past the upper texture area
; 6912 : 				if ((glidesector->sector->floorheight >= player->mo->z + player->mo->height) && ((player->mo->z + player->mo->height + player->mo->momz) >= glidesector->sector->floorheight))

  04871	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04877	8b 08		 mov	 ecx, DWORD PTR [eax]
  04879	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0487c	8b 02		 mov	 eax, DWORD PTR [edx]
  0487e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04881	8b 12		 mov	 edx, DWORD PTR [edx]
  04883	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  04886	03 42 44	 add	 eax, DWORD PTR [edx+68]
  04889	39 01		 cmp	 DWORD PTR [ecx], eax
  0488b	0f 8c ee 00 00
	00		 jl	 $LN482@P_MovePlay
  04891	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04894	8b 08		 mov	 ecx, DWORD PTR [eax]
  04896	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04899	8b 02		 mov	 eax, DWORD PTR [edx]
  0489b	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0489e	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  048a1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  048a4	8b 02		 mov	 eax, DWORD PTR [edx]
  048a6	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  048a9	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  048af	8b 02		 mov	 eax, DWORD PTR [edx]
  048b1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  048b3	0f 8c c6 00 00
	00		 jl	 $LN482@P_MovePlay

; 6913 : 				{
; 6914 : 					boolean foundfof = false;

  048b9	c7 85 1c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _foundfof$59[ebp], 0

; 6915 : 					floorclimb = true;

  048c3	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 1

; 6916 : 
; 6917 : 					// Is there a FOF directly below that we can move onto?
; 6918 : 					if (glidesector->sector->ffloors)

  048cd	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  048d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  048d5	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  048dc	0f 84 88 00 00
	00		 je	 $LN53@P_MovePlay

; 6919 : 					{
; 6920 : 						ffloor_t *rover;
; 6921 : 						for (rover = glidesector->sector->ffloors; rover; rover = rover->next)

  048e2	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  048e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  048ea	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  048f0	89 95 18 fe ff
	ff		 mov	 DWORD PTR _rover$58[ebp], edx
  048f6	eb 0f		 jmp	 SHORT $LN54@P_MovePlay
$LN52@P_MovePlay:
  048f8	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _rover$58[ebp]
  048fe	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  04901	89 8d 18 fe ff
	ff		 mov	 DWORD PTR _rover$58[ebp], ecx
$LN54@P_MovePlay:
  04907	83 bd 18 fe ff
	ff 00		 cmp	 DWORD PTR _rover$58[ebp], 0
  0490e	74 5a		 je	 SHORT $LN53@P_MovePlay

; 6922 : 						{
; 6923 : 							if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_BLOCKPLAYER) || (rover->flags & FF_BUSTUP))

  04910	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _rover$58[ebp]
  04916	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04919	83 e1 01	 and	 ecx, 1
  0491c	74 1f		 je	 SHORT $LN480@P_MovePlay
  0491e	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _rover$58[ebp]
  04924	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04927	83 e1 02	 and	 ecx, 2
  0492a	74 11		 je	 SHORT $LN480@P_MovePlay
  0492c	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _rover$58[ebp]
  04932	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04935	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  0493b	74 02		 je	 SHORT $LN479@P_MovePlay
$LN480@P_MovePlay:

; 6924 : 								continue;

  0493d	eb b9		 jmp	 SHORT $LN52@P_MovePlay
$LN479@P_MovePlay:

; 6925 : 
; 6926 : 							if (*rover->bottomheight < glidesector->sector->floorheight + 16*FRACUNIT)

  0493f	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _rover$58[ebp]
  04945	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  04948	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  0494e	8b 02		 mov	 eax, DWORD PTR [edx]
  04950	8b 10		 mov	 edx, DWORD PTR [eax]
  04952	81 c2 00 00 10
	00		 add	 edx, 1048576		; 00100000H
  04958	39 11		 cmp	 DWORD PTR [ecx], edx
  0495a	7d 0c		 jge	 SHORT $LN481@P_MovePlay

; 6927 : 							{
; 6928 : 								foundfof = true;

  0495c	c7 85 1c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _foundfof$59[ebp], 1

; 6929 : 								break;

  04966	eb 02		 jmp	 SHORT $LN53@P_MovePlay
$LN481@P_MovePlay:

; 6930 : 							}
; 6931 : 						}

  04968	eb 8e		 jmp	 SHORT $LN52@P_MovePlay
$LN53@P_MovePlay:

; 6932 : 					}
; 6933 : 
; 6934 : 					if (!foundfof)

  0496a	83 bd 1c fe ff
	ff 00		 cmp	 DWORD PTR _foundfof$59[ebp], 0
  04971	75 0c		 jne	 SHORT $LN482@P_MovePlay

; 6935 : 						player->mo->momz = 0;

  04973	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04976	8b 08		 mov	 ecx, DWORD PTR [eax]
  04978	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
$LN482@P_MovePlay:

; 6936 : 				}
; 6937 : 
; 6938 : 				// Reached the top of the lower texture area
; 6939 : 				if (!floorclimb && glidesector->sector->ceilingheight > player->mo->z + player->mo->height - 16*FRACUNIT && (glidesector->sector->ceilingpic == skyflatnum || glidesector->sector->floorheight < (player->mo->z - 8*FRACUNIT)))

  0497f	83 bd 40 fe ff
	ff 00		 cmp	 DWORD PTR _floorclimb$68[ebp], 0
  04986	75 65		 jne	 SHORT $LN483@P_MovePlay
  04988	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  0498e	8b 08		 mov	 ecx, DWORD PTR [eax]
  04990	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04993	8b 02		 mov	 eax, DWORD PTR [edx]
  04995	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04998	8b 12		 mov	 edx, DWORD PTR [edx]
  0499a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0499d	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  049a0	8d 84 10 00 00
	f0 ff		 lea	 eax, DWORD PTR [eax+edx-1048576]
  049a7	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  049aa	7e 41		 jle	 SHORT $LN483@P_MovePlay
  049ac	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  049b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  049b4	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  049b7	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  049bd	74 1a		 je	 SHORT $LN484@P_MovePlay
  049bf	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  049c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  049c7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  049ca	8b 02		 mov	 eax, DWORD PTR [edx]
  049cc	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  049cf	81 ea 00 00 08
	00		 sub	 edx, 524288		; 00080000H
  049d5	39 11		 cmp	 DWORD PTR [ecx], edx
  049d7	7d 14		 jge	 SHORT $LN483@P_MovePlay
$LN484@P_MovePlay:

; 6940 : 				{
; 6941 : 					thrust = true;

  049d9	c7 85 3c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _thrust$67[ebp], 1

; 6942 : 					boostup = true;

  049e3	c7 85 38 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 1
$LN483@P_MovePlay:

; 6943 : 					// Play climb-up animation here
; 6944 : 				}
; 6945 : 			}

  049ed	e9 a7 01 00 00	 jmp	 $LN492@P_MovePlay
$LN475@P_MovePlay:

; 6946 : 			else
; 6947 : 			{
; 6948 : 				// Trying to climb down past the upper texture area
; 6949 : 				if ((glidesector->sector->ceilingheight <= player->mo->z) && ((player->mo->z + player->mo->momz) <= glidesector->sector->ceilingheight))

  049f2	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  049f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  049fa	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  049fd	8b 02		 mov	 eax, DWORD PTR [edx]
  049ff	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  04a02	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  04a05	0f 8f e7 00 00
	00		 jg	 $LN490@P_MovePlay
  04a0b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04a0e	8b 08		 mov	 ecx, DWORD PTR [eax]
  04a10	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04a13	8b 02		 mov	 eax, DWORD PTR [edx]
  04a15	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  04a18	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  04a1b	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  04a21	8b 02		 mov	 eax, DWORD PTR [edx]
  04a23	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  04a26	0f 8f c6 00 00
	00		 jg	 $LN490@P_MovePlay

; 6950 : 				{
; 6951 : 					boolean foundfof = false;

  04a2c	c7 85 14 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _foundfof$57[ebp], 0

; 6952 : 					floorclimb = true;

  04a36	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 1

; 6953 : 
; 6954 : 					// Is there a FOF directly below that we can move onto?
; 6955 : 					if (glidesector->sector->ffloors)

  04a40	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04a46	8b 08		 mov	 ecx, DWORD PTR [eax]
  04a48	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  04a4f	0f 84 88 00 00
	00		 je	 $LN56@P_MovePlay

; 6956 : 					{
; 6957 : 						ffloor_t *rover;
; 6958 : 						for (rover = glidesector->sector->ffloors; rover; rover = rover->next)

  04a55	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04a5b	8b 08		 mov	 ecx, DWORD PTR [eax]
  04a5d	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  04a63	89 95 10 fe ff
	ff		 mov	 DWORD PTR _rover$56[ebp], edx
  04a69	eb 0f		 jmp	 SHORT $LN57@P_MovePlay
$LN55@P_MovePlay:
  04a6b	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _rover$56[ebp]
  04a71	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  04a74	89 8d 10 fe ff
	ff		 mov	 DWORD PTR _rover$56[ebp], ecx
$LN57@P_MovePlay:
  04a7a	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _rover$56[ebp], 0
  04a81	74 5a		 je	 SHORT $LN56@P_MovePlay

; 6959 : 						{
; 6960 : 							if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_BLOCKPLAYER) || (rover->flags & FF_BUSTUP))

  04a83	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _rover$56[ebp]
  04a89	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04a8c	83 e1 01	 and	 ecx, 1
  04a8f	74 1f		 je	 SHORT $LN488@P_MovePlay
  04a91	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _rover$56[ebp]
  04a97	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04a9a	83 e1 02	 and	 ecx, 2
  04a9d	74 11		 je	 SHORT $LN488@P_MovePlay
  04a9f	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _rover$56[ebp]
  04aa5	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04aa8	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  04aae	74 02		 je	 SHORT $LN487@P_MovePlay
$LN488@P_MovePlay:

; 6961 : 								continue;

  04ab0	eb b9		 jmp	 SHORT $LN55@P_MovePlay
$LN487@P_MovePlay:

; 6962 : 
; 6963 : 							if (*rover->topheight > glidesector->sector->ceilingheight - 16*FRACUNIT)

  04ab2	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _rover$56[ebp]
  04ab8	8b 08		 mov	 ecx, DWORD PTR [eax]
  04aba	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  04ac0	8b 02		 mov	 eax, DWORD PTR [edx]
  04ac2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  04ac5	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  04acb	39 11		 cmp	 DWORD PTR [ecx], edx
  04acd	7e 0c		 jle	 SHORT $LN489@P_MovePlay

; 6964 : 							{
; 6965 : 								foundfof = true;

  04acf	c7 85 14 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _foundfof$57[ebp], 1

; 6966 : 								break;

  04ad9	eb 02		 jmp	 SHORT $LN56@P_MovePlay
$LN489@P_MovePlay:

; 6967 : 							}
; 6968 : 						}

  04adb	eb 8e		 jmp	 SHORT $LN55@P_MovePlay
$LN56@P_MovePlay:

; 6969 : 					}
; 6970 : 
; 6971 : 					if (!foundfof)

  04add	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _foundfof$57[ebp], 0
  04ae4	75 0c		 jne	 SHORT $LN490@P_MovePlay

; 6972 : 						player->mo->momz = 0;

  04ae6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ae9	8b 08		 mov	 ecx, DWORD PTR [eax]
  04aeb	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
$LN490@P_MovePlay:

; 6973 : 				}
; 6974 : 
; 6975 : 				// Allow climbing from a FOF or lower texture onto the upper texture and vice versa.
; 6976 : 				if (player->mo->z > glidesector->sector->ceilingheight - 16*FRACUNIT)

  04af2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04af5	8b 08		 mov	 ecx, DWORD PTR [eax]
  04af7	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  04afd	8b 02		 mov	 eax, DWORD PTR [edx]
  04aff	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  04b02	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  04b08	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  04b0b	7e 1e		 jle	 SHORT $LN491@P_MovePlay

; 6977 : 				{
; 6978 : 					floorclimb = true;

  04b0d	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 1

; 6979 : 					thrust = false;

  04b17	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _thrust$67[ebp], 0

; 6980 : 					boostup = false;

  04b21	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 0
$LN491@P_MovePlay:

; 6981 : 				}
; 6982 : 
; 6983 : 				// Reached the top of the lower texture area
; 6984 : 				if (!floorclimb && glidesector->sector->floorheight < player->mo->z + 16*FRACUNIT && (glidesector->sector->ceilingpic == skyflatnum || glidesector->sector->ceilingheight > (player->mo->z + player->mo->height + 8*FRACUNIT)))

  04b2b	83 bd 40 fe ff
	ff 00		 cmp	 DWORD PTR _floorclimb$68[ebp], 0
  04b32	75 65		 jne	 SHORT $LN492@P_MovePlay
  04b34	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04b3a	8b 08		 mov	 ecx, DWORD PTR [eax]
  04b3c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04b3f	8b 02		 mov	 eax, DWORD PTR [edx]
  04b41	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  04b44	81 c2 00 00 10
	00		 add	 edx, 1048576		; 00100000H
  04b4a	39 11		 cmp	 DWORD PTR [ecx], edx
  04b4c	7d 4b		 jge	 SHORT $LN492@P_MovePlay
  04b4e	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04b54	8b 08		 mov	 ecx, DWORD PTR [eax]
  04b56	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  04b59	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  04b5f	74 24		 je	 SHORT $LN493@P_MovePlay
  04b61	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04b67	8b 08		 mov	 ecx, DWORD PTR [eax]
  04b69	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04b6c	8b 02		 mov	 eax, DWORD PTR [edx]
  04b6e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04b71	8b 12		 mov	 edx, DWORD PTR [edx]
  04b73	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  04b76	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  04b79	8d 84 10 00 00
	08 00		 lea	 eax, DWORD PTR [eax+edx+524288]
  04b80	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  04b83	7e 14		 jle	 SHORT $LN492@P_MovePlay
$LN493@P_MovePlay:

; 6985 : 				{
; 6986 : 					thrust = true;

  04b85	c7 85 3c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _thrust$67[ebp], 1

; 6987 : 					boostup = true;

  04b8f	c7 85 38 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _boostup$66[ebp], 1
$LN492@P_MovePlay:

; 6988 : 					// Play climb-up animation here
; 6989 : 				}
; 6990 : 			}
; 6991 : 
; 6992 : 			// Trying to climb on the sky
; 6993 : 			if ((glidesector->sector->ceilingheight < player->mo->z) && glidesector->sector->ceilingpic == skyflatnum)

  04b99	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04b9f	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ba1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04ba4	8b 02		 mov	 eax, DWORD PTR [edx]
  04ba6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  04ba9	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  04bac	7d 1d		 jge	 SHORT $LN494@P_MovePlay
  04bae	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04bb4	8b 08		 mov	 ecx, DWORD PTR [eax]
  04bb6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  04bb9	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  04bbf	75 0a		 jne	 SHORT $LN494@P_MovePlay

; 6994 : 			{
; 6995 : 				skyclimber = true;

  04bc1	c7 85 34 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _skyclimber$65[ebp], 1
$LN494@P_MovePlay:

; 6996 : 			}
; 6997 : 
; 6998 : 			// Climbing on the lower texture area?
; 6999 : 			if ((!(player->mo->eflags & MFE_VERTICALFLIP) && player->mo->z + 16*FRACUNIT < glidesector->sector->floorheight)
; 7000 : 				|| ((player->mo->eflags & MFE_VERTICALFLIP) && player->mo->z + player->mo->height <= glidesector->sector->floorheight))

  04bcb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04bce	8b 08		 mov	 ecx, DWORD PTR [eax]
  04bd0	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  04bd6	83 e2 20	 and	 edx, 32			; 00000020H
  04bd9	75 1a		 jne	 SHORT $LN498@P_MovePlay
  04bdb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04bde	8b 08		 mov	 ecx, DWORD PTR [eax]
  04be0	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  04be3	81 c2 00 00 10
	00		 add	 edx, 1048576		; 00100000H
  04be9	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04bef	8b 08		 mov	 ecx, DWORD PTR [eax]
  04bf1	3b 11		 cmp	 edx, DWORD PTR [ecx]
  04bf3	7c 30		 jl	 SHORT $LN497@P_MovePlay
$LN498@P_MovePlay:
  04bf5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04bf8	8b 08		 mov	 ecx, DWORD PTR [eax]
  04bfa	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  04c00	83 e2 20	 and	 edx, 32			; 00000020H
  04c03	0f 84 86 00 00
	00		 je	 $LN495@P_MovePlay
  04c09	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04c0c	8b 08		 mov	 ecx, DWORD PTR [eax]
  04c0e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04c11	8b 02		 mov	 eax, DWORD PTR [edx]
  04c13	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  04c16	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  04c19	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  04c1f	8b 02		 mov	 eax, DWORD PTR [edx]
  04c21	3b 08		 cmp	 ecx, DWORD PTR [eax]
  04c23	7f 6a		 jg	 SHORT $LN495@P_MovePlay
$LN497@P_MovePlay:

; 7001 : 			{
; 7002 : 				floorclimb = true;

  04c25	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 1

; 7003 : 
; 7004 : 				if (glidesector->sector->floorspeed)

  04c2f	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04c35	8b 08		 mov	 ecx, DWORD PTR [eax]
  04c37	83 b9 e8 00 00
	00 00		 cmp	 DWORD PTR [ecx+232], 0
  04c3e	74 4a		 je	 SHORT $LN501@P_MovePlay

; 7005 : 				{
; 7006 : 					if (cmd->forwardmove != 0)

  04c40	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  04c43	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  04c46	85 c9		 test	 ecx, ecx
  04c48	74 20		 je	 SHORT $LN500@P_MovePlay

; 7007 : 						player->mo->momz += glidesector->sector->floorspeed;

  04c4a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04c4d	8b 08		 mov	 ecx, DWORD PTR [eax]
  04c4f	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  04c55	8b 02		 mov	 eax, DWORD PTR [edx]
  04c57	8b 49 50	 mov	 ecx, DWORD PTR [ecx+80]
  04c5a	03 88 e8 00 00
	00		 add	 ecx, DWORD PTR [eax+232]
  04c60	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04c63	8b 02		 mov	 eax, DWORD PTR [edx]
  04c65	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  04c68	eb 20		 jmp	 SHORT $LN501@P_MovePlay
$LN500@P_MovePlay:

; 7008 : 					else
; 7009 : 					{
; 7010 : 						player->mo->momz = glidesector->sector->floorspeed;

  04c6a	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04c70	8b 08		 mov	 ecx, DWORD PTR [eax]
  04c72	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04c75	8b 02		 mov	 eax, DWORD PTR [edx]
  04c77	8b 89 e8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+232]
  04c7d	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 7011 : 						climb = false;

  04c80	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 0
$LN501@P_MovePlay:

; 7012 : 					}
; 7013 : 				}
; 7014 : 			}

  04c8a	e9 c2 00 00 00	 jmp	 $LN507@P_MovePlay
$LN495@P_MovePlay:

; 7015 : 			// Climbing on the upper texture area?
; 7016 : 			else if ((!(player->mo->eflags & MFE_VERTICALFLIP) && player->mo->z >= glidesector->sector->ceilingheight)
; 7017 : 				|| ((player->mo->eflags & MFE_VERTICALFLIP) && player->mo->z + player->mo->height - 16*FRACUNIT > glidesector->sector->ceilingheight))

  04c8f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04c92	8b 08		 mov	 ecx, DWORD PTR [eax]
  04c94	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  04c9a	83 e2 20	 and	 edx, 32			; 00000020H
  04c9d	75 15		 jne	 SHORT $LN504@P_MovePlay
  04c9f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ca2	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ca4	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  04caa	8b 02		 mov	 eax, DWORD PTR [edx]
  04cac	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  04caf	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  04cb2	7d 38		 jge	 SHORT $LN503@P_MovePlay
$LN504@P_MovePlay:
  04cb4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04cb7	8b 08		 mov	 ecx, DWORD PTR [eax]
  04cb9	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  04cbf	83 e2 20	 and	 edx, 32			; 00000020H
  04cc2	0f 84 89 00 00
	00		 je	 $LN507@P_MovePlay
  04cc8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ccb	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ccd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04cd0	8b 02		 mov	 eax, DWORD PTR [edx]
  04cd2	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  04cd5	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  04cd8	8d 84 11 00 00
	f0 ff		 lea	 eax, DWORD PTR [ecx+edx-1048576]
  04cdf	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR _glidesector$70[ebp]
  04ce5	8b 11		 mov	 edx, DWORD PTR [ecx]
  04ce7	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  04cea	7e 65		 jle	 SHORT $LN507@P_MovePlay
$LN503@P_MovePlay:

; 7018 : 			{
; 7019 : 				floorclimb = true;

  04cec	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _floorclimb$68[ebp], 1

; 7020 : 
; 7021 : 				if (glidesector->sector->ceilspeed)

  04cf6	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04cfc	8b 08		 mov	 ecx, DWORD PTR [eax]
  04cfe	83 b9 ec 00 00
	00 00		 cmp	 DWORD PTR [ecx+236], 0
  04d05	74 4a		 je	 SHORT $LN507@P_MovePlay

; 7022 : 				{
; 7023 : 					if (cmd->forwardmove != 0)

  04d07	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  04d0a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  04d0d	85 c9		 test	 ecx, ecx
  04d0f	74 20		 je	 SHORT $LN506@P_MovePlay

; 7024 : 						player->mo->momz += glidesector->sector->ceilspeed;

  04d11	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04d14	8b 08		 mov	 ecx, DWORD PTR [eax]
  04d16	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _glidesector$70[ebp]
  04d1c	8b 02		 mov	 eax, DWORD PTR [edx]
  04d1e	8b 49 50	 mov	 ecx, DWORD PTR [ecx+80]
  04d21	03 88 ec 00 00
	00		 add	 ecx, DWORD PTR [eax+236]
  04d27	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04d2a	8b 02		 mov	 eax, DWORD PTR [edx]
  04d2c	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  04d2f	eb 20		 jmp	 SHORT $LN507@P_MovePlay
$LN506@P_MovePlay:

; 7025 : 					else
; 7026 : 					{
; 7027 : 						player->mo->momz = glidesector->sector->ceilspeed;

  04d31	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _glidesector$70[ebp]
  04d37	8b 08		 mov	 ecx, DWORD PTR [eax]
  04d39	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04d3c	8b 02		 mov	 eax, DWORD PTR [edx]
  04d3e	8b 89 ec 00 00
	00		 mov	 ecx, DWORD PTR [ecx+236]
  04d44	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 7028 : 						climb = false;

  04d47	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 0
$LN507@P_MovePlay:

; 7029 : 					}
; 7030 : 				}
; 7031 : 			}
; 7032 : 
; 7033 : 			if (player->lastsidehit != -1 && player->lastlinehit != -1)

  04d51	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04d54	0f bf 88 d6 01
	00 00		 movsx	 ecx, WORD PTR [eax+470]
  04d5b	83 f9 ff	 cmp	 ecx, -1
  04d5e	0f 84 a1 01 00
	00		 je	 $LN59@P_MovePlay
  04d64	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04d67	0f bf 88 d8 01
	00 00		 movsx	 ecx, WORD PTR [eax+472]
  04d6e	83 f9 ff	 cmp	 ecx, -1
  04d71	0f 84 8e 01 00
	00		 je	 $LN59@P_MovePlay

; 7034 : 			{
; 7035 : 				thinker_t *think;
; 7036 : 				scroll_t *scroller;
; 7037 : 				angle_t sideangle;
; 7038 : 
; 7039 : 				for (think = thinkercap.next; think != &thinkercap; think = think->next)

  04d77	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  04d7c	89 85 0c fe ff
	ff		 mov	 DWORD PTR _think$55[ebp], eax
  04d82	eb 0f		 jmp	 SHORT $LN60@P_MovePlay
$LN58@P_MovePlay:
  04d84	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _think$55[ebp]
  04d8a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  04d8d	89 8d 0c fe ff
	ff		 mov	 DWORD PTR _think$55[ebp], ecx
$LN60@P_MovePlay:
  04d93	81 bd 0c fe ff
	ff 00 00 00 00	 cmp	 DWORD PTR _think$55[ebp], OFFSET _thinkercap
  04d9d	0f 84 62 01 00
	00		 je	 $LN59@P_MovePlay

; 7040 : 				{
; 7041 : 					if (think->function.acp1 != (actionf_p1)T_Scroll)

  04da3	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _think$55[ebp]
  04da9	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _T_Scroll
  04db0	74 02		 je	 SHORT $LN509@P_MovePlay

; 7042 : 						continue;

  04db2	eb d0		 jmp	 SHORT $LN58@P_MovePlay
$LN509@P_MovePlay:

; 7043 : 
; 7044 : 					scroller = (scroll_t *)think;

  04db4	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _think$55[ebp]
  04dba	89 85 08 fe ff
	ff		 mov	 DWORD PTR _scroller$54[ebp], eax

; 7045 : 
; 7046 : 					if (scroller->type != sc_side)

  04dc0	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _scroller$54[ebp]
  04dc6	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  04dca	74 02		 je	 SHORT $LN510@P_MovePlay

; 7047 : 						continue;

  04dcc	eb b6		 jmp	 SHORT $LN58@P_MovePlay
$LN510@P_MovePlay:

; 7048 : 
; 7049 : 					if (scroller->affectee != player->lastsidehit)

  04dce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04dd1	0f bf 88 d6 01
	00 00		 movsx	 ecx, WORD PTR [eax+470]
  04dd8	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR _scroller$54[ebp]
  04dde	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  04de1	74 02		 je	 SHORT $LN511@P_MovePlay

; 7050 : 						continue;

  04de3	eb 9f		 jmp	 SHORT $LN58@P_MovePlay
$LN511@P_MovePlay:

; 7051 : 
; 7052 : 					if (cmd->forwardmove != 0)

  04de5	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  04de8	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  04deb	85 c9		 test	 ecx, ecx
  04ded	74 25		 je	 SHORT $LN512@P_MovePlay

; 7053 : 					{
; 7054 : 						player->mo->momz += scroller->dy;

  04def	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04df2	8b 08		 mov	 ecx, DWORD PTR [eax]
  04df4	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  04df7	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _scroller$54[ebp]
  04dfd	03 50 14	 add	 edx, DWORD PTR [eax+20]
  04e00	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  04e03	8b 01		 mov	 eax, DWORD PTR [ecx]
  04e05	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 7055 : 						climb = true;

  04e08	c7 85 44 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 1

; 7056 : 					}

  04e12	eb 1b		 jmp	 SHORT $LN513@P_MovePlay
$LN512@P_MovePlay:

; 7057 : 					else
; 7058 : 					{
; 7059 : 						player->mo->momz = scroller->dy;

  04e14	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04e17	8b 08		 mov	 ecx, DWORD PTR [eax]
  04e19	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR _scroller$54[ebp]
  04e1f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  04e22	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 7060 : 						climb = false;

  04e25	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 0
$LN513@P_MovePlay:

; 7061 : 					}
; 7062 : 
; 7063 : 					sideangle = R_PointToAngle2(lines[player->lastlinehit].v2->x,lines[player->lastlinehit].v2->y,lines[player->lastlinehit].v1->x,lines[player->lastlinehit].v1->y);

  04e2f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04e32	0f bf 88 d8 01
	00 00		 movsx	 ecx, WORD PTR [eax+472]
  04e39	6b d1 4c	 imul	 edx, ecx, 76
  04e3c	a1 00 00 00 00	 mov	 eax, DWORD PTR _lines
  04e41	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  04e44	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  04e47	52		 push	 edx
  04e48	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04e4b	0f bf 88 d8 01
	00 00		 movsx	 ecx, WORD PTR [eax+472]
  04e52	6b d1 4c	 imul	 edx, ecx, 76
  04e55	a1 00 00 00 00	 mov	 eax, DWORD PTR _lines
  04e5a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  04e5d	8b 11		 mov	 edx, DWORD PTR [ecx]
  04e5f	52		 push	 edx
  04e60	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04e63	0f bf 88 d8 01
	00 00		 movsx	 ecx, WORD PTR [eax+472]
  04e6a	6b d1 4c	 imul	 edx, ecx, 76
  04e6d	a1 00 00 00 00	 mov	 eax, DWORD PTR _lines
  04e72	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  04e76	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  04e79	52		 push	 edx
  04e7a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04e7d	0f bf 88 d8 01
	00 00		 movsx	 ecx, WORD PTR [eax+472]
  04e84	6b d1 4c	 imul	 edx, ecx, 76
  04e87	a1 00 00 00 00	 mov	 eax, DWORD PTR _lines
  04e8c	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  04e90	8b 11		 mov	 edx, DWORD PTR [ecx]
  04e92	52		 push	 edx
  04e93	e8 00 00 00 00	 call	 _R_PointToAngle2
  04e98	83 c4 10	 add	 esp, 16			; 00000010H
  04e9b	89 85 04 fe ff
	ff		 mov	 DWORD PTR _sideangle$53[ebp], eax

; 7064 : 
; 7065 : 					if (cmd->sidemove != 0)

  04ea1	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  04ea4	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  04ea8	85 c9		 test	 ecx, ecx
  04eaa	74 2b		 je	 SHORT $LN514@P_MovePlay

; 7066 : 					{
; 7067 : 						P_Thrust(player->mo, sideangle, scroller->dx);

  04eac	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _scroller$54[ebp]
  04eb2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  04eb5	51		 push	 ecx
  04eb6	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _sideangle$53[ebp]
  04ebc	52		 push	 edx
  04ebd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ec0	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ec2	51		 push	 ecx
  04ec3	e8 00 00 00 00	 call	 _P_Thrust
  04ec8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7068 : 						climb = true;

  04ecb	c7 85 44 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 1

; 7069 : 					}

  04ed5	eb 29		 jmp	 SHORT $LN515@P_MovePlay
$LN514@P_MovePlay:

; 7070 : 					else
; 7071 : 					{
; 7072 : 						P_InstaThrust(player->mo, sideangle, scroller->dx);

  04ed7	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _scroller$54[ebp]
  04edd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  04ee0	51		 push	 ecx
  04ee1	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _sideangle$53[ebp]
  04ee7	52		 push	 edx
  04ee8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04eeb	8b 08		 mov	 ecx, DWORD PTR [eax]
  04eed	51		 push	 ecx
  04eee	e8 00 00 00 00	 call	 _P_InstaThrust
  04ef3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7073 : 						climb = false;

  04ef6	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 0
$LN515@P_MovePlay:

; 7074 : 					}
; 7075 : 				}

  04f00	e9 7f fe ff ff	 jmp	 $LN58@P_MovePlay
$LN59@P_MovePlay:

; 7076 : 			}
; 7077 : 
; 7078 : 			if (cmd->sidemove != 0 || cmd->forwardmove != 0)

  04f05	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  04f08	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  04f0c	85 c9		 test	 ecx, ecx
  04f0e	75 0a		 jne	 SHORT $LN518@P_MovePlay
  04f10	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  04f13	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  04f16	85 c9		 test	 ecx, ecx
  04f18	74 0c		 je	 SHORT $LN516@P_MovePlay
$LN518@P_MovePlay:

; 7079 : 				climb = true;

  04f1a	c7 85 44 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 1
  04f24	eb 0a		 jmp	 SHORT $LN517@P_MovePlay
$LN516@P_MovePlay:

; 7080 : 			else
; 7081 : 				climb = false;

  04f26	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 0
$LN517@P_MovePlay:

; 7082 : 
; 7083 : 			if (player->climbing && climb && (player->mo->momx || player->mo->momy || player->mo->momz)
; 7084 : 				&& !(player->mo->state == &states[S_PLAY_CLIMB2]

  04f30	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f33	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  04f3a	0f 84 9c 00 00
	00		 je	 $LN519@P_MovePlay
  04f40	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR _climb$69[ebp], 0
  04f47	0f 84 8f 00 00
	00		 je	 $LN519@P_MovePlay
  04f4d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f50	8b 08		 mov	 ecx, DWORD PTR [eax]
  04f52	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  04f56	75 16		 jne	 SHORT $LN521@P_MovePlay
  04f58	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f5b	8b 08		 mov	 ecx, DWORD PTR [eax]
  04f5d	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  04f61	75 0b		 jne	 SHORT $LN521@P_MovePlay
  04f63	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f66	8b 08		 mov	 ecx, DWORD PTR [eax]
  04f68	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  04f6c	74 6e		 je	 SHORT $LN519@P_MovePlay
$LN521@P_MovePlay:
  04f6e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f71	8b 08		 mov	 ecx, DWORD PTR [eax]
  04f73	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  04f78	6b c2 1c	 imul	 eax, edx, 28
  04f7b	05 00 00 00 00	 add	 eax, OFFSET _states
  04f80	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  04f83	74 57		 je	 SHORT $LN519@P_MovePlay
  04f85	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f88	8b 08		 mov	 ecx, DWORD PTR [eax]
  04f8a	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  04f8f	6b c2 1d	 imul	 eax, edx, 29
  04f92	05 00 00 00 00	 add	 eax, OFFSET _states
  04f97	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  04f9a	74 40		 je	 SHORT $LN519@P_MovePlay
  04f9c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f9f	8b 08		 mov	 ecx, DWORD PTR [eax]
  04fa1	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  04fa6	6b c2 1e	 imul	 eax, edx, 30
  04fa9	05 00 00 00 00	 add	 eax, OFFSET _states
  04fae	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  04fb1	74 29		 je	 SHORT $LN519@P_MovePlay
  04fb3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04fb6	8b 08		 mov	 ecx, DWORD PTR [eax]
  04fb8	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  04fbd	6b c2 1f	 imul	 eax, edx, 31
  04fc0	05 00 00 00 00	 add	 eax, OFFSET _states
  04fc5	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  04fc8	74 12		 je	 SHORT $LN519@P_MovePlay

; 7085 : 					|| player->mo->state == &states[S_PLAY_CLIMB3]
; 7086 : 					|| player->mo->state == &states[S_PLAY_CLIMB4]
; 7087 : 					|| player->mo->state == &states[S_PLAY_CLIMB5]))
; 7088 : 				P_SetPlayerMobjState(player->mo, S_PLAY_CLIMB2);

  04fca	6a 1c		 push	 28			; 0000001cH
  04fcc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04fcf	8b 08		 mov	 ecx, DWORD PTR [eax]
  04fd1	51		 push	 ecx
  04fd2	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  04fd7	83 c4 08	 add	 esp, 8
  04fda	eb 51		 jmp	 SHORT $LN522@P_MovePlay
$LN519@P_MovePlay:

; 7089 : 			else if ((!(player->mo->momx || player->mo->momy || player->mo->momz) || !climb) && player->mo->state != &states[S_PLAY_CLIMB1])

  04fdc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04fdf	8b 08		 mov	 ecx, DWORD PTR [eax]
  04fe1	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  04fe5	75 16		 jne	 SHORT $LN524@P_MovePlay
  04fe7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04fea	8b 08		 mov	 ecx, DWORD PTR [eax]
  04fec	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  04ff0	75 0b		 jne	 SHORT $LN524@P_MovePlay
  04ff2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ff5	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ff7	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  04ffb	74 09		 je	 SHORT $LN523@P_MovePlay
$LN524@P_MovePlay:
  04ffd	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR _climb$69[ebp], 0
  05004	75 27		 jne	 SHORT $LN522@P_MovePlay
$LN523@P_MovePlay:
  05006	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0500b	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05010	6b c2 1b	 imul	 eax, edx, 27
  05013	05 00 00 00 00	 add	 eax, OFFSET _states
  05018	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0501b	74 10		 je	 SHORT $LN522@P_MovePlay

; 7090 : 				P_SetPlayerMobjState(player->mo, S_PLAY_CLIMB1);

  0501d	6a 1b		 push	 27			; 0000001bH
  0501f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05022	8b 08		 mov	 ecx, DWORD PTR [eax]
  05024	51		 push	 ecx
  05025	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0502a	83 c4 08	 add	 esp, 8
$LN522@P_MovePlay:

; 7091 : 
; 7092 : 			if (!floorclimb)

  0502d	83 bd 40 fe ff
	ff 00		 cmp	 DWORD PTR _floorclimb$68[ebp], 0
  05034	0f 85 c9 00 00
	00		 jne	 $LN525@P_MovePlay

; 7093 : 			{
; 7094 : 				if (boostup)

  0503a	83 bd 38 fe ff
	ff 00		 cmp	 DWORD PTR _boostup$66[ebp], 0
  05041	74 3f		 je	 SHORT $LN526@P_MovePlay

; 7095 : 					player->mo->momz += (player->mo->eflags & MFE_VERTICALFLIP ? -2 : 2)*FRACUNIT/NEWTICRATERATIO; // Don't scale this.

  05043	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05046	8b 08		 mov	 ecx, DWORD PTR [eax]
  05048	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0504e	83 e2 20	 and	 edx, 32			; 00000020H
  05051	74 0c		 je	 SHORT $LN820@P_MovePlay
  05053	c7 85 b0 fc ff
	ff fe ff ff ff	 mov	 DWORD PTR tv3833[ebp], -2 ; fffffffeH
  0505d	eb 0a		 jmp	 SHORT $LN821@P_MovePlay
$LN820@P_MovePlay:
  0505f	c7 85 b0 fc ff
	ff 02 00 00 00	 mov	 DWORD PTR tv3833[ebp], 2
$LN821@P_MovePlay:
  05069	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0506c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0506e	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR tv3833[ebp]
  05074	c1 e2 10	 shl	 edx, 16			; 00000010H
  05077	03 51 50	 add	 edx, DWORD PTR [ecx+80]
  0507a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0507d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0507f	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN526@P_MovePlay:

; 7096 : 				if (thrust)

  05082	83 bd 3c fe ff
	ff 00		 cmp	 DWORD PTR _thrust$67[ebp], 0
  05089	74 43		 je	 SHORT $LN527@P_MovePlay

; 7097 : 					P_InstaThrust(player->mo, player->mo->angle, FIXEDSCALE(4*FRACUNIT, player->mo->scale)); // Lil' boost up.

  0508b	68 00 00 04 00	 push	 262144			; 00040000H
  05090	68 00 00 64 00	 push	 6553600			; 00640000H
  05095	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05098	8b 08		 mov	 ecx, DWORD PTR [eax]
  0509a	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  050a1	c1 e2 10	 shl	 edx, 16			; 00000010H
  050a4	52		 push	 edx
  050a5	e8 00 00 00 00	 call	 _FixedDiv
  050aa	83 c4 08	 add	 esp, 8
  050ad	50		 push	 eax
  050ae	e8 00 00 00 00	 call	 _FixedMul
  050b3	83 c4 08	 add	 esp, 8
  050b6	50		 push	 eax
  050b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  050ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  050bc	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  050bf	52		 push	 edx
  050c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  050c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  050c5	51		 push	 ecx
  050c6	e8 00 00 00 00	 call	 _P_InstaThrust
  050cb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN527@P_MovePlay:

; 7098 : 
; 7099 : 				player->climbing = 0;

  050ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  050d1	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 7100 : 				player->pflags |= PF_JUMPED;

  050db	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  050de	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  050e4	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  050ea	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  050ed	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 7101 : 				P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  050f3	6a 0c		 push	 12			; 0000000cH
  050f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  050f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  050fa	51		 push	 ecx
  050fb	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  05100	83 c4 08	 add	 esp, 8
$LN525@P_MovePlay:

; 7102 : 			}
; 7103 : 
; 7104 : 			if (skyclimber)

  05103	83 bd 34 fe ff
	ff 00		 cmp	 DWORD PTR _skyclimber$65[ebp], 0
  0510a	74 35		 je	 SHORT $LN528@P_MovePlay

; 7105 : 			{
; 7106 : 				player->climbing = 0;

  0510c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0510f	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 7107 : 				player->pflags |= PF_JUMPED;

  05119	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0511c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  05122	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  05128	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0512b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 7108 : 				P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  05131	6a 0c		 push	 12			; 0000000cH
  05133	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05136	8b 08		 mov	 ecx, DWORD PTR [eax]
  05138	51		 push	 ecx
  05139	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0513e	83 c4 08	 add	 esp, 8
$LN528@P_MovePlay:

; 7109 : 			}
; 7110 : 		}

  05141	eb 35		 jmp	 SHORT $LN444@P_MovePlay
$LN443@P_MovePlay:

; 7111 : 		else
; 7112 : 		{
; 7113 : 			player->climbing = 0;

  05143	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05146	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 7114 : 			player->pflags |= PF_JUMPED;

  05150	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05153	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  05159	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  0515f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05162	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 7115 : 			P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  05168	6a 0c		 push	 12			; 0000000cH
  0516a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0516d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0516f	51		 push	 ecx
  05170	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  05175	83 c4 08	 add	 esp, 8
$LN444@P_MovePlay:

; 7116 : 		}
; 7117 : 
; 7118 : 		if (cmd->sidemove != 0 || cmd->forwardmove != 0)

  05178	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  0517b	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  0517f	85 c9		 test	 ecx, ecx
  05181	75 0a		 jne	 SHORT $LN531@P_MovePlay
  05183	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  05186	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  05189	85 c9		 test	 ecx, ecx
  0518b	74 0c		 je	 SHORT $LN529@P_MovePlay
$LN531@P_MovePlay:

; 7119 : 			climb = true;

  0518d	c7 85 44 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 1
  05197	eb 0a		 jmp	 SHORT $LN530@P_MovePlay
$LN529@P_MovePlay:

; 7120 : 		else
; 7121 : 			climb = false;

  05199	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _climb$69[ebp], 0
$LN530@P_MovePlay:

; 7122 : 
; 7123 : 		if (player->climbing && climb && (player->mo->momx || player->mo->momy || player->mo->momz)
; 7124 : 			&& !(player->mo->state == &states[S_PLAY_CLIMB2]

  051a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  051a6	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  051ad	0f 84 9c 00 00
	00		 je	 $LN532@P_MovePlay
  051b3	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR _climb$69[ebp], 0
  051ba	0f 84 8f 00 00
	00		 je	 $LN532@P_MovePlay
  051c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  051c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  051c5	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  051c9	75 16		 jne	 SHORT $LN534@P_MovePlay
  051cb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  051ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  051d0	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  051d4	75 0b		 jne	 SHORT $LN534@P_MovePlay
  051d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  051d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  051db	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  051df	74 6e		 je	 SHORT $LN532@P_MovePlay
$LN534@P_MovePlay:
  051e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  051e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  051e6	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  051eb	6b c2 1c	 imul	 eax, edx, 28
  051ee	05 00 00 00 00	 add	 eax, OFFSET _states
  051f3	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  051f6	74 57		 je	 SHORT $LN532@P_MovePlay
  051f8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  051fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  051fd	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05202	6b c2 1d	 imul	 eax, edx, 29
  05205	05 00 00 00 00	 add	 eax, OFFSET _states
  0520a	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0520d	74 40		 je	 SHORT $LN532@P_MovePlay
  0520f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05212	8b 08		 mov	 ecx, DWORD PTR [eax]
  05214	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05219	6b c2 1e	 imul	 eax, edx, 30
  0521c	05 00 00 00 00	 add	 eax, OFFSET _states
  05221	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  05224	74 29		 je	 SHORT $LN532@P_MovePlay
  05226	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05229	8b 08		 mov	 ecx, DWORD PTR [eax]
  0522b	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05230	6b c2 1f	 imul	 eax, edx, 31
  05233	05 00 00 00 00	 add	 eax, OFFSET _states
  05238	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0523b	74 12		 je	 SHORT $LN532@P_MovePlay

; 7125 : 				|| player->mo->state == &states[S_PLAY_CLIMB3]
; 7126 : 				|| player->mo->state == &states[S_PLAY_CLIMB4]
; 7127 : 				|| player->mo->state == &states[S_PLAY_CLIMB5]))
; 7128 : 			P_SetPlayerMobjState(player->mo, S_PLAY_CLIMB2);

  0523d	6a 1c		 push	 28			; 0000001cH
  0523f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05242	8b 08		 mov	 ecx, DWORD PTR [eax]
  05244	51		 push	 ecx
  05245	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0524a	83 c4 08	 add	 esp, 8
  0524d	eb 51		 jmp	 SHORT $LN535@P_MovePlay
$LN532@P_MovePlay:

; 7129 : 		else if ((!(player->mo->momx || player->mo->momy || player->mo->momz) || !climb) && player->mo->state != &states[S_PLAY_CLIMB1])

  0524f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05252	8b 08		 mov	 ecx, DWORD PTR [eax]
  05254	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  05258	75 16		 jne	 SHORT $LN537@P_MovePlay
  0525a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0525d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0525f	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  05263	75 0b		 jne	 SHORT $LN537@P_MovePlay
  05265	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05268	8b 08		 mov	 ecx, DWORD PTR [eax]
  0526a	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  0526e	74 09		 je	 SHORT $LN536@P_MovePlay
$LN537@P_MovePlay:
  05270	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR _climb$69[ebp], 0
  05277	75 27		 jne	 SHORT $LN535@P_MovePlay
$LN536@P_MovePlay:
  05279	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0527c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0527e	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05283	6b c2 1b	 imul	 eax, edx, 27
  05286	05 00 00 00 00	 add	 eax, OFFSET _states
  0528b	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0528e	74 10		 je	 SHORT $LN535@P_MovePlay

; 7130 : 			P_SetPlayerMobjState(player->mo, S_PLAY_CLIMB1);

  05290	6a 1b		 push	 27			; 0000001bH
  05292	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05295	8b 08		 mov	 ecx, DWORD PTR [eax]
  05297	51		 push	 ecx
  05298	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0529d	83 c4 08	 add	 esp, 8
$LN535@P_MovePlay:

; 7131 : 
; 7132 : 		if (cmd->buttons & BT_USE && !(player->pflags & PF_STASIS || player->powers[pw_nocontrol]))

  052a0	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  052a3	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  052a7	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  052ad	0f 84 89 00 00
	00		 je	 $LN538@P_MovePlay
  052b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  052b6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  052bc	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  052c2	75 78		 jne	 SHORT $LN538@P_MovePlay
  052c4	b8 04 00 00 00	 mov	 eax, 4
  052c9	6b c8 1b	 imul	 ecx, eax, 27
  052cc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  052cf	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  052d4	75 66		 jne	 SHORT $LN538@P_MovePlay

; 7133 : 		{
; 7134 : 			player->climbing = 0;

  052d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  052d9	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 7135 : 			player->pflags |= PF_JUMPED;

  052e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  052e6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  052ec	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  052f2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  052f5	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 7136 : 			P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  052fb	6a 0c		 push	 12			; 0000000cH
  052fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05300	8b 08		 mov	 ecx, DWORD PTR [eax]
  05302	51		 push	 ecx
  05303	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  05308	83 c4 08	 add	 esp, 8

; 7137 : 			P_SetObjectMomZ(player->mo, 4*FRACUNIT, false);

  0530b	6a 00		 push	 0
  0530d	68 00 00 04 00	 push	 262144			; 00040000H
  05312	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05315	8b 08		 mov	 ecx, DWORD PTR [eax]
  05317	51		 push	 ecx
  05318	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0531d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7138 : 			P_InstaThrust(player->mo, player->mo->angle, -4*FRACUNIT);

  05320	68 00 00 fc ff	 push	 -262144			; fffc0000H
  05325	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05328	8b 08		 mov	 ecx, DWORD PTR [eax]
  0532a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0532d	52		 push	 edx
  0532e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05331	8b 08		 mov	 ecx, DWORD PTR [eax]
  05333	51		 push	 ecx
  05334	e8 00 00 00 00	 call	 _P_InstaThrust
  05339	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN538@P_MovePlay:

; 7139 : 		}
; 7140 : 
; 7141 : 		if (player == &players[consoleplayer])

  0533c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  05346	05 00 00 00 00	 add	 eax, OFFSET _players
  0534b	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0534e	75 10		 jne	 SHORT $LN539@P_MovePlay

; 7142 : 			localangle = player->mo->angle;

  05350	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05353	8b 08		 mov	 ecx, DWORD PTR [eax]
  05355	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  05358	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  0535e	eb 2b		 jmp	 SHORT $LN541@P_MovePlay
$LN539@P_MovePlay:

; 7143 : 		else if (splitscreen && player == &players[secondarydisplayplayer])

  05360	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  05367	74 22		 je	 SHORT $LN541@P_MovePlay
  05369	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  05373	05 00 00 00 00	 add	 eax, OFFSET _players
  05378	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0537b	75 0e		 jne	 SHORT $LN541@P_MovePlay

; 7144 : 			localangle2 = player->mo->angle;

  0537d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05380	8b 08		 mov	 ecx, DWORD PTR [eax]
  05382	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  05385	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN541@P_MovePlay:

; 7145 : 
; 7146 : 		if (player->climbing == 0)

  0538b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0538e	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  05395	75 10		 jne	 SHORT $LN542@P_MovePlay

; 7147 : 			P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  05397	6a 0c		 push	 12			; 0000000cH
  05399	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0539c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0539e	51		 push	 ecx
  0539f	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  053a4	83 c4 08	 add	 esp, 8
$LN542@P_MovePlay:

; 7148 : 
; 7149 : 		if (player->climbing && P_IsObjectOnGround(player->mo))

  053a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053aa	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  053b1	74 2e		 je	 SHORT $LN543@P_MovePlay
  053b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  053b8	51		 push	 ecx
  053b9	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  053be	83 c4 04	 add	 esp, 4
  053c1	85 c0		 test	 eax, eax
  053c3	74 1c		 je	 SHORT $LN543@P_MovePlay

; 7150 : 		{
; 7151 : 			P_ResetPlayer(player);

  053c5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053c8	50		 push	 eax
  053c9	e8 00 00 00 00	 call	 _P_ResetPlayer
  053ce	83 c4 04	 add	 esp, 4

; 7152 : 			P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  053d1	6a 01		 push	 1
  053d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  053d8	51		 push	 ecx
  053d9	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  053de	83 c4 08	 add	 esp, 8
$LN543@P_MovePlay:

; 7153 : 		}
; 7154 : 	}
; 7155 : 
; 7156 : 	if (player->climbing > 1)

  053e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053e4	83 b8 24 01 00
	00 01		 cmp	 DWORD PTR [eax+292], 1
  053eb	7e 31		 jle	 SHORT $LN544@P_MovePlay

; 7157 : 	{
; 7158 : 		P_InstaThrust(player->mo, player->mo->angle, 4*FRACUNIT); // Shove up against the wall

  053ed	68 00 00 04 00	 push	 262144			; 00040000H
  053f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  053f7	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  053fa	52		 push	 edx
  053fb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  05400	51		 push	 ecx
  05401	e8 00 00 00 00	 call	 _P_InstaThrust
  05406	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7159 : 		player->climbing--;

  05409	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0540c	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  05412	83 e9 01	 sub	 ecx, 1
  05415	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05418	89 8a 24 01 00
	00		 mov	 DWORD PTR [edx+292], ecx
$LN544@P_MovePlay:

; 7160 : 	}
; 7161 : 
; 7162 : 	if (!player->climbing)

  0541e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05421	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  05428	75 1a		 jne	 SHORT $LN545@P_MovePlay

; 7163 : 	{
; 7164 : 		player->lastsidehit = -1;

  0542a	83 c8 ff	 or	 eax, -1
  0542d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  05430	66 89 81 d6 01
	00 00		 mov	 WORD PTR [ecx+470], ax

; 7165 : 		player->lastlinehit = -1;

  05437	83 c8 ff	 or	 eax, -1
  0543a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0543d	66 89 81 d8 01
	00 00		 mov	 WORD PTR [ecx+472], ax
$LN545@P_MovePlay:

; 7166 : 	}
; 7167 : 
; 7168 : 	// Make sure you're not teetering when you shouldn't be.
; 7169 : 	if ((player->mo->state == &states[S_PLAY_TEETER1] || player->mo->state == &states[S_PLAY_TEETER2] || player->mo->state == &states[S_PLAY_SUPERTEETER])
; 7170 : 		&& (player->mo->momx || player->mo->momy || player->mo->momz))

  05444	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05447	8b 08		 mov	 ecx, DWORD PTR [eax]
  05449	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0544e	6b c2 25	 imul	 eax, edx, 37
  05451	05 00 00 00 00	 add	 eax, OFFSET _states
  05456	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  05459	74 2e		 je	 SHORT $LN547@P_MovePlay
  0545b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0545e	8b 08		 mov	 ecx, DWORD PTR [eax]
  05460	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05465	6b c2 26	 imul	 eax, edx, 38
  05468	05 00 00 00 00	 add	 eax, OFFSET _states
  0546d	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  05470	74 17		 je	 SHORT $LN547@P_MovePlay
  05472	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05475	8b 08		 mov	 ecx, DWORD PTR [eax]
  05477	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0547c	6b c2 2f	 imul	 eax, edx, 47
  0547f	05 00 00 00 00	 add	 eax, OFFSET _states
  05484	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  05487	75 31		 jne	 SHORT $LN546@P_MovePlay
$LN547@P_MovePlay:
  05489	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0548c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0548e	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  05492	75 16		 jne	 SHORT $LN548@P_MovePlay
  05494	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05497	8b 08		 mov	 ecx, DWORD PTR [eax]
  05499	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  0549d	75 0b		 jne	 SHORT $LN548@P_MovePlay
  0549f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  054a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  054a4	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  054a8	74 10		 je	 SHORT $LN546@P_MovePlay
$LN548@P_MovePlay:

; 7171 : 		P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  054aa	6a 01		 push	 1
  054ac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  054af	8b 08		 mov	 ecx, DWORD PTR [eax]
  054b1	51		 push	 ecx
  054b2	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  054b7	83 c4 08	 add	 esp, 8
$LN546@P_MovePlay:

; 7172 : 
; 7173 : 	// Check for teeter!
; 7174 : 	if (!player->mo->momz &&

  054ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  054bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  054bf	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  054c3	0f 85 86 13 00
	00		 jne	 $LN667@P_MovePlay
  054c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  054cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  054ce	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  054d2	0f 85 77 13 00
	00		 jne	 $LN667@P_MovePlay
  054d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  054db	8b 08		 mov	 ecx, DWORD PTR [eax]
  054dd	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  054e1	0f 85 68 13 00
	00		 jne	 $LN667@P_MovePlay
  054e7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  054ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  054ec	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  054f1	c1 e2 00	 shl	 edx, 0
  054f4	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  054fa	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  054fd	0f 84 8e 00 00
	00		 je	 $LN550@P_MovePlay
  05503	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05506	8b 08		 mov	 ecx, DWORD PTR [eax]
  05508	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0550d	d1 e2		 shl	 edx, 1
  0550f	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  05515	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  05518	74 77		 je	 SHORT $LN550@P_MovePlay
  0551a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0551d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0551f	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05524	6b c2 03	 imul	 eax, edx, 3
  05527	05 00 00 00 00	 add	 eax, OFFSET _states
  0552c	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0552f	74 60		 je	 SHORT $LN550@P_MovePlay
  05531	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05534	8b 08		 mov	 ecx, DWORD PTR [eax]
  05536	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0553b	6b c2 25	 imul	 eax, edx, 37
  0553e	05 00 00 00 00	 add	 eax, OFFSET _states
  05543	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  05546	74 49		 je	 SHORT $LN550@P_MovePlay
  05548	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0554b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0554d	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05552	6b c2 26	 imul	 eax, edx, 38
  05555	05 00 00 00 00	 add	 eax, OFFSET _states
  0555a	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0555d	74 32		 je	 SHORT $LN550@P_MovePlay
  0555f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05562	8b 08		 mov	 ecx, DWORD PTR [eax]
  05564	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05569	6b c2 2a	 imul	 eax, edx, 42
  0556c	05 00 00 00 00	 add	 eax, OFFSET _states
  05571	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  05574	74 1b		 je	 SHORT $LN550@P_MovePlay
  05576	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05579	8b 08		 mov	 ecx, DWORD PTR [eax]
  0557b	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  05580	6b c2 2f	 imul	 eax, edx, 47
  05583	05 00 00 00 00	 add	 eax, OFFSET _states
  05588	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0558b	0f 85 be 12 00
	00		 jne	 $LN667@P_MovePlay
$LN550@P_MovePlay:

; 7175 : 		((!(player->mo->momx || player->mo->momy) && (player->mo->state == &states[S_PLAY_STND]
; 7176 : 		|| player->mo->state == &states[S_PLAY_TAP1] || player->mo->state == &states[S_PLAY_TAP2]
; 7177 : 		|| player->mo->state == &states[S_PLAY_TEETER1] || player->mo->state == &states[S_PLAY_TEETER2]
; 7178 : 		|| player->mo->state == &states[S_PLAY_SUPERSTAND] || player->mo->state == &states[S_PLAY_SUPERTEETER]))))
; 7179 : 	{
; 7180 : 		boolean teeter = false;

  05591	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7181 : 		boolean roverfloor; // solid 3d floors?
; 7182 : 		boolean checkedforteeter = false;

  0559b	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _checkedforteeter$50[ebp], 0

; 7183 : 		const fixed_t tiptop = 12*FRACUNIT; // Distance you have to be above the ground in order to teeter.

  055a5	c7 85 f4 fd ff
	ff 00 00 0c 00	 mov	 DWORD PTR _tiptop$49[ebp], 786432 ; 000c0000H

; 7184 : 
; 7185 : 		for (node = player->mo->touching_sectorlist; node; node = node->m_snext)

  055af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  055b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  055b4	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  055b7	89 55 e4	 mov	 DWORD PTR _node$[ebp], edx
  055ba	eb 09		 jmp	 SHORT $LN63@P_MovePlay
$LN61@P_MovePlay:
  055bc	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  055bf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  055c2	89 4d e4	 mov	 DWORD PTR _node$[ebp], ecx
$LN63@P_MovePlay:
  055c5	83 7d e4 00	 cmp	 DWORD PTR _node$[ebp], 0
  055c9	0f 84 c2 02 00
	00		 je	 $LN62@P_MovePlay

; 7186 : 		{
; 7187 : 			// Ledge teetering. Check if any nearby sectors are low enough from your current one.
; 7188 : 			checkedforteeter = true;

  055cf	c7 85 f8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _checkedforteeter$50[ebp], 1

; 7189 : 			roverfloor = false;

  055d9	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 0

; 7190 : 			if (node->m_sector->ffloors)

  055e3	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  055e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  055e8	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  055ef	0f 84 28 02 00
	00		 je	 $LN65@P_MovePlay

; 7191 : 			{
; 7192 : 				ffloor_t *rover;
; 7193 : 				for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  055f5	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  055f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  055fa	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  05600	89 95 f0 fd ff
	ff		 mov	 DWORD PTR _rover$48[ebp], edx
  05606	eb 0f		 jmp	 SHORT $LN66@P_MovePlay
$LN64@P_MovePlay:
  05608	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  0560e	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  05611	89 8d f0 fd ff
	ff		 mov	 DWORD PTR _rover$48[ebp], ecx
$LN66@P_MovePlay:
  05617	83 bd f0 fd ff
	ff 00		 cmp	 DWORD PTR _rover$48[ebp], 0
  0561e	0f 84 f9 01 00
	00		 je	 $LN65@P_MovePlay

; 7194 : 				{
; 7195 : 					if (!(rover->flags & FF_EXISTS)) continue;

  05624	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  0562a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0562d	83 e1 01	 and	 ecx, 1
  05630	75 02		 jne	 SHORT $LN552@P_MovePlay
  05632	eb d4		 jmp	 SHORT $LN64@P_MovePlay
$LN552@P_MovePlay:

; 7196 : 
; 7197 : 					if ((rover->flags & FF_SWIMMABLE) && GETSECSPECIAL(rover->master->frontsector->special, 1) == 3
; 7198 : 						&& !(rover->master->flags & ML_BLOCKMONSTERS) && ((rover->master->flags & ML_EFFECT3)

  05634	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  0563a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0563d	83 e1 20	 and	 ecx, 32			; 00000020H
  05640	74 65		 je	 SHORT $LN553@P_MovePlay
  05642	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  05648	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0564b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0564e	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  05652	83 e0 0f	 and	 eax, 15			; 0000000fH
  05655	83 f8 03	 cmp	 eax, 3
  05658	75 4d		 jne	 SHORT $LN553@P_MovePlay
  0565a	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  05660	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05663	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  05667	83 e2 02	 and	 edx, 2
  0566a	75 3b		 jne	 SHORT $LN553@P_MovePlay
  0566c	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  05672	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05675	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  05679	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  0567f	75 24		 jne	 SHORT $LN555@P_MovePlay
  05681	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05684	8b 08		 mov	 ecx, DWORD PTR [eax]
  05686	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05689	8b 02		 mov	 eax, DWORD PTR [edx]
  0568b	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0568e	2b 48 50	 sub	 ecx, DWORD PTR [eax+80]
  05691	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _rover$48[ebp]
  05697	8b 02		 mov	 eax, DWORD PTR [edx]
  05699	8b 10		 mov	 edx, DWORD PTR [eax]
  0569b	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  056a1	3b ca		 cmp	 ecx, edx
  056a3	7e 02		 jle	 SHORT $LN553@P_MovePlay
$LN555@P_MovePlay:

; 7199 : 						|| player->mo->z - player->mo->momz > *rover->topheight - 16*FRACUNIT))
; 7200 : 						;

  056a5	eb 24		 jmp	 SHORT $LN556@P_MovePlay
$LN553@P_MovePlay:

; 7201 : 					else if (!(rover->flags & FF_BLOCKPLAYER || rover->flags & FF_QUICKSAND))

  056a7	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  056ad	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  056b0	83 e1 02	 and	 ecx, 2
  056b3	75 16		 jne	 SHORT $LN556@P_MovePlay
  056b5	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  056bb	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  056be	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  056c4	75 05		 jne	 SHORT $LN556@P_MovePlay

; 7202 : 						continue; // intangible 3d floor

  056c6	e9 3d ff ff ff	 jmp	 $LN64@P_MovePlay
$LN556@P_MovePlay:

; 7203 : 
; 7204 : 					if (player->mo->eflags & MFE_VERTICALFLIP)

  056cb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  056ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  056d0	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  056d6	83 e2 20	 and	 edx, 32			; 00000020H
  056d9	0f 84 a7 00 00
	00		 je	 $LN557@P_MovePlay

; 7205 : 					{
; 7206 : 						if (*rover->bottomheight > node->m_sector->ceilingheight) // Above the ceiling

  056df	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  056e5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  056e8	8b 55 e4	 mov	 edx, DWORD PTR _node$[ebp]
  056eb	8b 02		 mov	 eax, DWORD PTR [edx]
  056ed	8b 09		 mov	 ecx, DWORD PTR [ecx]
  056ef	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  056f2	7e 05		 jle	 SHORT $LN559@P_MovePlay

; 7207 : 							continue;

  056f4	e9 0f ff ff ff	 jmp	 $LN64@P_MovePlay
$LN559@P_MovePlay:

; 7208 : 
; 7209 : 						if (*rover->bottomheight > player->mo->z + player->mo->height + tiptop
; 7210 : 							|| (*rover->topheight < player->mo->z

  056f9	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  056ff	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05702	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05705	8b 02		 mov	 eax, DWORD PTR [edx]
  05707	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0570a	8b 12		 mov	 edx, DWORD PTR [edx]
  0570c	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0570f	03 42 44	 add	 eax, DWORD PTR [edx+68]
  05712	03 85 f4 fd ff
	ff		 add	 eax, DWORD PTR _tiptop$49[ebp]
  05718	39 01		 cmp	 DWORD PTR [ecx], eax
  0571a	7f 36		 jg	 SHORT $LN562@P_MovePlay
  0571c	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  05722	8b 08		 mov	 ecx, DWORD PTR [eax]
  05724	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05727	8b 02		 mov	 eax, DWORD PTR [edx]
  05729	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0572b	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0572e	7d 38		 jge	 SHORT $LN560@P_MovePlay
  05730	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05733	8b 08		 mov	 ecx, DWORD PTR [eax]
  05735	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05738	8b 02		 mov	 eax, DWORD PTR [edx]
  0573a	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0573d	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  05740	8b 55 e4	 mov	 edx, DWORD PTR _node$[ebp]
  05743	8b 02		 mov	 eax, DWORD PTR [edx]
  05745	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05748	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  0574e	3b ca		 cmp	 ecx, edx
  05750	7d 16		 jge	 SHORT $LN560@P_MovePlay
$LN562@P_MovePlay:

; 7211 : 							&& player->mo->z + player->mo->height < node->m_sector->ceilingheight - tiptop))
; 7212 : 						{
; 7213 : 							teeter = true;

  05752	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7214 : 							roverfloor = true;

  0575c	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7215 : 						}

  05766	eb 19		 jmp	 SHORT $LN561@P_MovePlay
$LN560@P_MovePlay:

; 7216 : 						else
; 7217 : 						{
; 7218 : 							teeter = false;

  05768	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7219 : 							roverfloor = true;

  05772	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7220 : 							break;

  0577c	e9 9c 00 00 00	 jmp	 $LN65@P_MovePlay
$LN561@P_MovePlay:

; 7221 : 						}
; 7222 : 					}

  05781	e9 92 00 00 00	 jmp	 $LN565@P_MovePlay
$LN557@P_MovePlay:

; 7223 : 					else
; 7224 : 					{
; 7225 : 						if (*rover->topheight < node->m_sector->floorheight) // Below the floor

  05786	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  0578c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0578e	8b 55 e4	 mov	 edx, DWORD PTR _node$[ebp]
  05791	8b 02		 mov	 eax, DWORD PTR [edx]
  05793	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05795	3b 08		 cmp	 ecx, DWORD PTR [eax]
  05797	7d 05		 jge	 SHORT $LN563@P_MovePlay

; 7226 : 							continue;

  05799	e9 6a fe ff ff	 jmp	 $LN64@P_MovePlay
$LN563@P_MovePlay:

; 7227 : 
; 7228 : 						if (*rover->topheight < player->mo->z - tiptop
; 7229 : 							|| (*rover->bottomheight > player->mo->z + player->mo->height

  0579e	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  057a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  057a6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  057a9	8b 02		 mov	 eax, DWORD PTR [edx]
  057ab	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  057ae	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  057b4	39 11		 cmp	 DWORD PTR [ecx], edx
  057b6	7c 34		 jl	 SHORT $LN566@P_MovePlay
  057b8	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$48[ebp]
  057be	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  057c1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  057c4	8b 02		 mov	 eax, DWORD PTR [edx]
  057c6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  057c9	8b 12		 mov	 edx, DWORD PTR [edx]
  057cb	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  057ce	03 42 44	 add	 eax, DWORD PTR [edx+68]
  057d1	39 01		 cmp	 DWORD PTR [ecx], eax
  057d3	7e 2d		 jle	 SHORT $LN564@P_MovePlay
  057d5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  057d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  057da	8b 55 e4	 mov	 edx, DWORD PTR _node$[ebp]
  057dd	8b 02		 mov	 eax, DWORD PTR [edx]
  057df	8b 10		 mov	 edx, DWORD PTR [eax]
  057e1	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  057e7	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  057ea	7e 16		 jle	 SHORT $LN564@P_MovePlay
$LN566@P_MovePlay:

; 7230 : 							&& player->mo->z > node->m_sector->floorheight + tiptop))
; 7231 : 						{
; 7232 : 							teeter = true;

  057ec	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7233 : 							roverfloor = true;

  057f6	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7234 : 						}

  05800	eb 16		 jmp	 SHORT $LN565@P_MovePlay
$LN564@P_MovePlay:

; 7235 : 						else
; 7236 : 						{
; 7237 : 							teeter = false;

  05802	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7238 : 							roverfloor = true;

  0580c	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7239 : 							break;

  05816	eb 05		 jmp	 SHORT $LN65@P_MovePlay
$LN565@P_MovePlay:

; 7240 : 						}
; 7241 : 					}
; 7242 : 				}

  05818	e9 eb fd ff ff	 jmp	 $LN64@P_MovePlay
$LN65@P_MovePlay:

; 7243 : 			}
; 7244 : 
; 7245 : 			if (!teeter && !roverfloor)

  0581d	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _teeter$52[ebp], 0
  05824	75 66		 jne	 SHORT $LN571@P_MovePlay
  05826	83 bd fc fd ff
	ff 00		 cmp	 DWORD PTR _roverfloor$51[ebp], 0
  0582d	75 5d		 jne	 SHORT $LN571@P_MovePlay

; 7246 : 			{
; 7247 : 				if (player->mo->eflags & MFE_VERTICALFLIP)

  0582f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05832	8b 08		 mov	 ecx, DWORD PTR [eax]
  05834	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0583a	83 e2 20	 and	 edx, 32			; 00000020H
  0583d	74 2c		 je	 SHORT $LN568@P_MovePlay

; 7248 : 				{
; 7249 : 					if (node->m_sector->ceilingheight > player->mo->z + player->mo->height + tiptop)

  0583f	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  05842	8b 08		 mov	 ecx, DWORD PTR [eax]
  05844	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05847	8b 02		 mov	 eax, DWORD PTR [edx]
  05849	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0584c	8b 12		 mov	 edx, DWORD PTR [edx]
  0584e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  05851	03 42 44	 add	 eax, DWORD PTR [edx+68]
  05854	03 85 f4 fd ff
	ff		 add	 eax, DWORD PTR _tiptop$49[ebp]
  0585a	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  0585d	7e 0a		 jle	 SHORT $LN570@P_MovePlay

; 7250 : 						teeter = true;

  0585f	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1
$LN570@P_MovePlay:

; 7251 : 				}

  05869	eb 21		 jmp	 SHORT $LN571@P_MovePlay
$LN568@P_MovePlay:

; 7252 : 				else
; 7253 : 				{
; 7254 : 					if (node->m_sector->floorheight < player->mo->z - tiptop)

  0586b	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  0586e	8b 08		 mov	 ecx, DWORD PTR [eax]
  05870	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05873	8b 02		 mov	 eax, DWORD PTR [edx]
  05875	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  05878	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  0587e	39 11		 cmp	 DWORD PTR [ecx], edx
  05880	7d 0a		 jge	 SHORT $LN571@P_MovePlay

; 7255 : 						teeter = true;

  05882	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1
$LN571@P_MovePlay:

; 7256 : 				}
; 7257 : 			}
; 7258 : 		}

  0588c	e9 2b fd ff ff	 jmp	 $LN61@P_MovePlay
$LN62@P_MovePlay:

; 7259 : 
; 7260 : 		if (checkedforteeter && !teeter) // Backup code

  05891	83 bd f8 fd ff
	ff 00		 cmp	 DWORD PTR _checkedforteeter$50[ebp], 0
  05898	0f 84 35 0b 00
	00		 je	 $LN644@P_MovePlay
  0589e	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _teeter$52[ebp], 0
  058a5	0f 85 28 0b 00
	00		 jne	 $LN644@P_MovePlay

; 7261 : 		{
; 7262 : 			subsector_t *a = R_PointInSubsector(player->mo->x + 5*FRACUNIT, player->mo->y + 5*FRACUNIT);

  058ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  058ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  058b0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  058b3	81 c2 00 00 05
	00		 add	 edx, 327680		; 00050000H
  058b9	52		 push	 edx
  058ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  058bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  058bf	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  058c2	81 c2 00 00 05
	00		 add	 edx, 327680		; 00050000H
  058c8	52		 push	 edx
  058c9	e8 00 00 00 00	 call	 _R_PointInSubsector
  058ce	83 c4 08	 add	 esp, 8
  058d1	89 85 ec fd ff
	ff		 mov	 DWORD PTR _a$47[ebp], eax

; 7263 : 			subsector_t *b = R_PointInSubsector(player->mo->x - 5*FRACUNIT, player->mo->y + 5*FRACUNIT);

  058d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  058da	8b 08		 mov	 ecx, DWORD PTR [eax]
  058dc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  058df	81 c2 00 00 05
	00		 add	 edx, 327680		; 00050000H
  058e5	52		 push	 edx
  058e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  058e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  058eb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  058ee	81 ea 00 00 05
	00		 sub	 edx, 327680		; 00050000H
  058f4	52		 push	 edx
  058f5	e8 00 00 00 00	 call	 _R_PointInSubsector
  058fa	83 c4 08	 add	 esp, 8
  058fd	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _b$46[ebp], eax

; 7264 : 			subsector_t *c = R_PointInSubsector(player->mo->x + 5*FRACUNIT, player->mo->y - 5*FRACUNIT);

  05903	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05906	8b 08		 mov	 ecx, DWORD PTR [eax]
  05908	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0590b	81 ea 00 00 05
	00		 sub	 edx, 327680		; 00050000H
  05911	52		 push	 edx
  05912	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05915	8b 08		 mov	 ecx, DWORD PTR [eax]
  05917	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0591a	81 c2 00 00 05
	00		 add	 edx, 327680		; 00050000H
  05920	52		 push	 edx
  05921	e8 00 00 00 00	 call	 _R_PointInSubsector
  05926	83 c4 08	 add	 esp, 8
  05929	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _c$45[ebp], eax

; 7265 : 			subsector_t *d = R_PointInSubsector(player->mo->x - 5*FRACUNIT, player->mo->y - 5*FRACUNIT);

  0592f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05932	8b 08		 mov	 ecx, DWORD PTR [eax]
  05934	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  05937	81 ea 00 00 05
	00		 sub	 edx, 327680		; 00050000H
  0593d	52		 push	 edx
  0593e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05941	8b 08		 mov	 ecx, DWORD PTR [eax]
  05943	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  05946	81 ea 00 00 05
	00		 sub	 edx, 327680		; 00050000H
  0594c	52		 push	 edx
  0594d	e8 00 00 00 00	 call	 _R_PointInSubsector
  05952	83 c4 08	 add	 esp, 8
  05955	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _d$44[ebp], eax

; 7266 : 			teeter = false;

  0595b	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7267 : 			roverfloor = false;

  05965	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 0

; 7268 : 			if (a->sector->ffloors)

  0596f	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _a$47[ebp]
  05975	8b 08		 mov	 ecx, DWORD PTR [eax]
  05977	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  0597e	0f 84 3c 02 00
	00		 je	 $LN573@P_MovePlay

; 7269 : 			{
; 7270 : 				ffloor_t *rover;
; 7271 : 				for (rover = a->sector->ffloors; rover; rover = rover->next)

  05984	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _a$47[ebp]
  0598a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0598c	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  05992	89 95 dc fd ff
	ff		 mov	 DWORD PTR _rover$43[ebp], edx
  05998	eb 0f		 jmp	 SHORT $LN69@P_MovePlay
$LN67@P_MovePlay:
  0599a	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  059a0	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  059a3	89 8d dc fd ff
	ff		 mov	 DWORD PTR _rover$43[ebp], ecx
$LN69@P_MovePlay:
  059a9	83 bd dc fd ff
	ff 00		 cmp	 DWORD PTR _rover$43[ebp], 0
  059b0	0f 84 05 02 00
	00		 je	 $LN68@P_MovePlay

; 7272 : 				{
; 7273 : 					if (!(rover->flags & FF_EXISTS)) continue;

  059b6	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  059bc	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  059bf	83 e1 01	 and	 ecx, 1
  059c2	75 02		 jne	 SHORT $LN575@P_MovePlay
  059c4	eb d4		 jmp	 SHORT $LN67@P_MovePlay
$LN575@P_MovePlay:

; 7274 : 
; 7275 : 					if ((rover->flags & FF_SWIMMABLE) && GETSECSPECIAL(rover->master->frontsector->special, 1) == 3
; 7276 : 						&& !(rover->master->flags & ML_BLOCKMONSTERS) && ((rover->master->flags & ML_EFFECT3)

  059c6	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  059cc	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  059cf	83 e1 20	 and	 ecx, 32			; 00000020H
  059d2	74 65		 je	 SHORT $LN576@P_MovePlay
  059d4	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  059da	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  059dd	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  059e0	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  059e4	83 e0 0f	 and	 eax, 15			; 0000000fH
  059e7	83 f8 03	 cmp	 eax, 3
  059ea	75 4d		 jne	 SHORT $LN576@P_MovePlay
  059ec	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  059f2	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  059f5	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  059f9	83 e2 02	 and	 edx, 2
  059fc	75 3b		 jne	 SHORT $LN576@P_MovePlay
  059fe	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05a04	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05a07	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  05a0b	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  05a11	75 24		 jne	 SHORT $LN578@P_MovePlay
  05a13	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05a16	8b 08		 mov	 ecx, DWORD PTR [eax]
  05a18	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05a1b	8b 02		 mov	 eax, DWORD PTR [edx]
  05a1d	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  05a20	2b 48 50	 sub	 ecx, DWORD PTR [eax+80]
  05a23	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _rover$43[ebp]
  05a29	8b 02		 mov	 eax, DWORD PTR [edx]
  05a2b	8b 10		 mov	 edx, DWORD PTR [eax]
  05a2d	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  05a33	3b ca		 cmp	 ecx, edx
  05a35	7e 02		 jle	 SHORT $LN576@P_MovePlay
$LN578@P_MovePlay:

; 7277 : 						|| player->mo->z - player->mo->momz > *rover->topheight - 16*FRACUNIT))
; 7278 : 						;

  05a37	eb 24		 jmp	 SHORT $LN579@P_MovePlay
$LN576@P_MovePlay:

; 7279 : 					else if (!(rover->flags & FF_BLOCKPLAYER || rover->flags & FF_QUICKSAND))

  05a39	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05a3f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05a42	83 e1 02	 and	 ecx, 2
  05a45	75 16		 jne	 SHORT $LN579@P_MovePlay
  05a47	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05a4d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05a50	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  05a56	75 05		 jne	 SHORT $LN579@P_MovePlay

; 7280 : 						continue; // intangible 3d floor

  05a58	e9 3d ff ff ff	 jmp	 $LN67@P_MovePlay
$LN579@P_MovePlay:

; 7281 : 
; 7282 : 					if (player->mo->eflags & MFE_VERTICALFLIP)

  05a5d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05a60	8b 08		 mov	 ecx, DWORD PTR [eax]
  05a62	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  05a68	83 e2 20	 and	 edx, 32			; 00000020H
  05a6b	0f 84 ad 00 00
	00		 je	 $LN580@P_MovePlay

; 7283 : 					{
; 7284 : 						if (*rover->bottomheight > a->sector->ceilingheight) // Above the ceiling

  05a71	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05a77	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05a7a	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _a$47[ebp]
  05a80	8b 02		 mov	 eax, DWORD PTR [edx]
  05a82	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05a84	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  05a87	7e 05		 jle	 SHORT $LN582@P_MovePlay

; 7285 : 							continue;

  05a89	e9 0c ff ff ff	 jmp	 $LN67@P_MovePlay
$LN582@P_MovePlay:

; 7286 : 
; 7287 : 						if (*rover->bottomheight > player->mo->z + player->mo->height + tiptop
; 7288 : 							|| (*rover->topheight < player->mo->z

  05a8e	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05a94	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05a97	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05a9a	8b 02		 mov	 eax, DWORD PTR [edx]
  05a9c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05a9f	8b 12		 mov	 edx, DWORD PTR [edx]
  05aa1	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  05aa4	03 42 44	 add	 eax, DWORD PTR [edx+68]
  05aa7	03 85 f4 fd ff
	ff		 add	 eax, DWORD PTR _tiptop$49[ebp]
  05aad	39 01		 cmp	 DWORD PTR [ecx], eax
  05aaf	7f 39		 jg	 SHORT $LN585@P_MovePlay
  05ab1	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05ab7	8b 08		 mov	 ecx, DWORD PTR [eax]
  05ab9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05abc	8b 02		 mov	 eax, DWORD PTR [edx]
  05abe	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05ac0	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  05ac3	7d 3b		 jge	 SHORT $LN583@P_MovePlay
  05ac5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05ac8	8b 08		 mov	 ecx, DWORD PTR [eax]
  05aca	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05acd	8b 02		 mov	 eax, DWORD PTR [edx]
  05acf	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  05ad2	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  05ad5	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _a$47[ebp]
  05adb	8b 02		 mov	 eax, DWORD PTR [edx]
  05add	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05ae0	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  05ae6	3b ca		 cmp	 ecx, edx
  05ae8	7d 16		 jge	 SHORT $LN583@P_MovePlay
$LN585@P_MovePlay:

; 7289 : 							&& player->mo->z + player->mo->height < a->sector->ceilingheight - tiptop))
; 7290 : 						{
; 7291 : 							teeter = true;

  05aea	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7292 : 							roverfloor = true;

  05af4	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7293 : 						}

  05afe	eb 19		 jmp	 SHORT $LN584@P_MovePlay
$LN583@P_MovePlay:

; 7294 : 						else
; 7295 : 						{
; 7296 : 							teeter = false;

  05b00	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7297 : 							roverfloor = true;

  05b0a	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7298 : 							break;

  05b14	e9 a2 00 00 00	 jmp	 $LN68@P_MovePlay
$LN584@P_MovePlay:

; 7299 : 						}
; 7300 : 					}

  05b19	e9 98 00 00 00	 jmp	 $LN588@P_MovePlay
$LN580@P_MovePlay:

; 7301 : 					else
; 7302 : 					{
; 7303 : 						if (*rover->topheight < a->sector->floorheight) // Below the floor

  05b1e	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05b24	8b 08		 mov	 ecx, DWORD PTR [eax]
  05b26	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _a$47[ebp]
  05b2c	8b 02		 mov	 eax, DWORD PTR [edx]
  05b2e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05b30	3b 08		 cmp	 ecx, DWORD PTR [eax]
  05b32	7d 05		 jge	 SHORT $LN586@P_MovePlay

; 7304 : 							continue;

  05b34	e9 61 fe ff ff	 jmp	 $LN67@P_MovePlay
$LN586@P_MovePlay:

; 7305 : 
; 7306 : 						if (*rover->topheight < player->mo->z - tiptop
; 7307 : 							|| (*rover->bottomheight > player->mo->z + player->mo->height

  05b39	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05b3f	8b 08		 mov	 ecx, DWORD PTR [eax]
  05b41	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05b44	8b 02		 mov	 eax, DWORD PTR [edx]
  05b46	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  05b49	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  05b4f	39 11		 cmp	 DWORD PTR [ecx], edx
  05b51	7c 37		 jl	 SHORT $LN589@P_MovePlay
  05b53	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _rover$43[ebp]
  05b59	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05b5c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05b5f	8b 02		 mov	 eax, DWORD PTR [edx]
  05b61	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05b64	8b 12		 mov	 edx, DWORD PTR [edx]
  05b66	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  05b69	03 42 44	 add	 eax, DWORD PTR [edx+68]
  05b6c	39 01		 cmp	 DWORD PTR [ecx], eax
  05b6e	7e 30		 jle	 SHORT $LN587@P_MovePlay
  05b70	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05b73	8b 08		 mov	 ecx, DWORD PTR [eax]
  05b75	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _a$47[ebp]
  05b7b	8b 02		 mov	 eax, DWORD PTR [edx]
  05b7d	8b 10		 mov	 edx, DWORD PTR [eax]
  05b7f	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  05b85	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  05b88	7e 16		 jle	 SHORT $LN587@P_MovePlay
$LN589@P_MovePlay:

; 7308 : 							&& player->mo->z > a->sector->floorheight + tiptop))
; 7309 : 						{
; 7310 : 							teeter = true;

  05b8a	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7311 : 							roverfloor = true;

  05b94	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7312 : 						}

  05b9e	eb 16		 jmp	 SHORT $LN588@P_MovePlay
$LN587@P_MovePlay:

; 7313 : 						else
; 7314 : 						{
; 7315 : 							teeter = false;

  05ba0	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7316 : 							roverfloor = true;

  05baa	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7317 : 							break;

  05bb4	eb 05		 jmp	 SHORT $LN68@P_MovePlay
$LN588@P_MovePlay:

; 7318 : 						}
; 7319 : 					}
; 7320 : 				}

  05bb6	e9 df fd ff ff	 jmp	 $LN67@P_MovePlay
$LN68@P_MovePlay:

; 7321 : 			}

  05bbb	e9 ee 06 00 00	 jmp	 $LN77@P_MovePlay
$LN573@P_MovePlay:

; 7322 : 			else if (b->sector->ffloors)

  05bc0	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _b$46[ebp]
  05bc6	8b 08		 mov	 ecx, DWORD PTR [eax]
  05bc8	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  05bcf	0f 84 3c 02 00
	00		 je	 $LN590@P_MovePlay

; 7323 : 			{
; 7324 : 				ffloor_t *rover;
; 7325 : 				for (rover = b->sector->ffloors; rover; rover = rover->next)

  05bd5	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _b$46[ebp]
  05bdb	8b 08		 mov	 ecx, DWORD PTR [eax]
  05bdd	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  05be3	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _rover$42[ebp], edx
  05be9	eb 0f		 jmp	 SHORT $LN72@P_MovePlay
$LN70@P_MovePlay:
  05beb	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05bf1	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  05bf4	89 8d d8 fd ff
	ff		 mov	 DWORD PTR _rover$42[ebp], ecx
$LN72@P_MovePlay:
  05bfa	83 bd d8 fd ff
	ff 00		 cmp	 DWORD PTR _rover$42[ebp], 0
  05c01	0f 84 05 02 00
	00		 je	 $LN71@P_MovePlay

; 7326 : 				{
; 7327 : 					if (!(rover->flags & FF_EXISTS)) continue;

  05c07	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05c0d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05c10	83 e1 01	 and	 ecx, 1
  05c13	75 02		 jne	 SHORT $LN592@P_MovePlay
  05c15	eb d4		 jmp	 SHORT $LN70@P_MovePlay
$LN592@P_MovePlay:

; 7328 : 
; 7329 : 					if ((rover->flags & FF_SWIMMABLE) && GETSECSPECIAL(rover->master->frontsector->special, 1) == 3
; 7330 : 						&& !(rover->master->flags & ML_BLOCKMONSTERS) && ((rover->master->flags & ML_EFFECT3)

  05c17	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05c1d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05c20	83 e1 20	 and	 ecx, 32			; 00000020H
  05c23	74 65		 je	 SHORT $LN593@P_MovePlay
  05c25	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05c2b	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05c2e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  05c31	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  05c35	83 e0 0f	 and	 eax, 15			; 0000000fH
  05c38	83 f8 03	 cmp	 eax, 3
  05c3b	75 4d		 jne	 SHORT $LN593@P_MovePlay
  05c3d	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05c43	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05c46	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  05c4a	83 e2 02	 and	 edx, 2
  05c4d	75 3b		 jne	 SHORT $LN593@P_MovePlay
  05c4f	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05c55	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05c58	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  05c5c	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  05c62	75 24		 jne	 SHORT $LN595@P_MovePlay
  05c64	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05c67	8b 08		 mov	 ecx, DWORD PTR [eax]
  05c69	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05c6c	8b 02		 mov	 eax, DWORD PTR [edx]
  05c6e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  05c71	2b 48 50	 sub	 ecx, DWORD PTR [eax+80]
  05c74	8b 95 d8 fd ff
	ff		 mov	 edx, DWORD PTR _rover$42[ebp]
  05c7a	8b 02		 mov	 eax, DWORD PTR [edx]
  05c7c	8b 10		 mov	 edx, DWORD PTR [eax]
  05c7e	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  05c84	3b ca		 cmp	 ecx, edx
  05c86	7e 02		 jle	 SHORT $LN593@P_MovePlay
$LN595@P_MovePlay:

; 7331 : 						|| player->mo->z - player->mo->momz > *rover->topheight - 16*FRACUNIT))
; 7332 : 						;

  05c88	eb 24		 jmp	 SHORT $LN596@P_MovePlay
$LN593@P_MovePlay:

; 7333 : 					else if (!(rover->flags & FF_BLOCKPLAYER || rover->flags & FF_QUICKSAND))

  05c8a	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05c90	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05c93	83 e1 02	 and	 ecx, 2
  05c96	75 16		 jne	 SHORT $LN596@P_MovePlay
  05c98	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05c9e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05ca1	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  05ca7	75 05		 jne	 SHORT $LN596@P_MovePlay

; 7334 : 						continue; // intangible 3d floor

  05ca9	e9 3d ff ff ff	 jmp	 $LN70@P_MovePlay
$LN596@P_MovePlay:

; 7335 : 
; 7336 : 					if (player->mo->eflags & MFE_VERTICALFLIP)

  05cae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05cb1	8b 08		 mov	 ecx, DWORD PTR [eax]
  05cb3	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  05cb9	83 e2 20	 and	 edx, 32			; 00000020H
  05cbc	0f 84 ad 00 00
	00		 je	 $LN597@P_MovePlay

; 7337 : 					{
; 7338 : 						if (*rover->bottomheight > b->sector->ceilingheight) // Above the ceiling

  05cc2	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05cc8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05ccb	8b 95 e8 fd ff
	ff		 mov	 edx, DWORD PTR _b$46[ebp]
  05cd1	8b 02		 mov	 eax, DWORD PTR [edx]
  05cd3	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05cd5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  05cd8	7e 05		 jle	 SHORT $LN599@P_MovePlay

; 7339 : 							continue;

  05cda	e9 0c ff ff ff	 jmp	 $LN70@P_MovePlay
$LN599@P_MovePlay:

; 7340 : 
; 7341 : 						if (*rover->bottomheight > player->mo->z + player->mo->height + tiptop
; 7342 : 							|| (*rover->topheight < player->mo->z

  05cdf	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05ce5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05ce8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05ceb	8b 02		 mov	 eax, DWORD PTR [edx]
  05ced	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05cf0	8b 12		 mov	 edx, DWORD PTR [edx]
  05cf2	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  05cf5	03 42 44	 add	 eax, DWORD PTR [edx+68]
  05cf8	03 85 f4 fd ff
	ff		 add	 eax, DWORD PTR _tiptop$49[ebp]
  05cfe	39 01		 cmp	 DWORD PTR [ecx], eax
  05d00	7f 39		 jg	 SHORT $LN602@P_MovePlay
  05d02	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05d08	8b 08		 mov	 ecx, DWORD PTR [eax]
  05d0a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05d0d	8b 02		 mov	 eax, DWORD PTR [edx]
  05d0f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05d11	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  05d14	7d 3b		 jge	 SHORT $LN600@P_MovePlay
  05d16	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05d19	8b 08		 mov	 ecx, DWORD PTR [eax]
  05d1b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05d1e	8b 02		 mov	 eax, DWORD PTR [edx]
  05d20	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  05d23	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  05d26	8b 95 e8 fd ff
	ff		 mov	 edx, DWORD PTR _b$46[ebp]
  05d2c	8b 02		 mov	 eax, DWORD PTR [edx]
  05d2e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05d31	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  05d37	3b ca		 cmp	 ecx, edx
  05d39	7d 16		 jge	 SHORT $LN600@P_MovePlay
$LN602@P_MovePlay:

; 7343 : 							&& player->mo->z + player->mo->height < b->sector->ceilingheight - tiptop))
; 7344 : 						{
; 7345 : 							teeter = true;

  05d3b	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7346 : 							roverfloor = true;

  05d45	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7347 : 						}

  05d4f	eb 19		 jmp	 SHORT $LN601@P_MovePlay
$LN600@P_MovePlay:

; 7348 : 						else
; 7349 : 						{
; 7350 : 							teeter = false;

  05d51	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7351 : 							roverfloor = true;

  05d5b	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7352 : 							break;

  05d65	e9 a2 00 00 00	 jmp	 $LN71@P_MovePlay
$LN601@P_MovePlay:

; 7353 : 						}
; 7354 : 					}

  05d6a	e9 98 00 00 00	 jmp	 $LN605@P_MovePlay
$LN597@P_MovePlay:

; 7355 : 					else
; 7356 : 					{
; 7357 : 						if (*rover->topheight < b->sector->floorheight) // Below the floor

  05d6f	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05d75	8b 08		 mov	 ecx, DWORD PTR [eax]
  05d77	8b 95 e8 fd ff
	ff		 mov	 edx, DWORD PTR _b$46[ebp]
  05d7d	8b 02		 mov	 eax, DWORD PTR [edx]
  05d7f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05d81	3b 08		 cmp	 ecx, DWORD PTR [eax]
  05d83	7d 05		 jge	 SHORT $LN603@P_MovePlay

; 7358 : 							continue;

  05d85	e9 61 fe ff ff	 jmp	 $LN70@P_MovePlay
$LN603@P_MovePlay:

; 7359 : 
; 7360 : 						if (*rover->topheight < player->mo->z - tiptop
; 7361 : 							|| (*rover->bottomheight > player->mo->z + player->mo->height

  05d8a	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05d90	8b 08		 mov	 ecx, DWORD PTR [eax]
  05d92	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05d95	8b 02		 mov	 eax, DWORD PTR [edx]
  05d97	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  05d9a	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  05da0	39 11		 cmp	 DWORD PTR [ecx], edx
  05da2	7c 37		 jl	 SHORT $LN606@P_MovePlay
  05da4	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _rover$42[ebp]
  05daa	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05dad	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05db0	8b 02		 mov	 eax, DWORD PTR [edx]
  05db2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05db5	8b 12		 mov	 edx, DWORD PTR [edx]
  05db7	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  05dba	03 42 44	 add	 eax, DWORD PTR [edx+68]
  05dbd	39 01		 cmp	 DWORD PTR [ecx], eax
  05dbf	7e 30		 jle	 SHORT $LN604@P_MovePlay
  05dc1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05dc4	8b 08		 mov	 ecx, DWORD PTR [eax]
  05dc6	8b 95 e8 fd ff
	ff		 mov	 edx, DWORD PTR _b$46[ebp]
  05dcc	8b 02		 mov	 eax, DWORD PTR [edx]
  05dce	8b 10		 mov	 edx, DWORD PTR [eax]
  05dd0	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  05dd6	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  05dd9	7e 16		 jle	 SHORT $LN604@P_MovePlay
$LN606@P_MovePlay:

; 7362 : 							&& player->mo->z > b->sector->floorheight + tiptop))
; 7363 : 						{
; 7364 : 							teeter = true;

  05ddb	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7365 : 							roverfloor = true;

  05de5	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7366 : 						}

  05def	eb 16		 jmp	 SHORT $LN605@P_MovePlay
$LN604@P_MovePlay:

; 7367 : 						else
; 7368 : 						{
; 7369 : 							teeter = false;

  05df1	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7370 : 							roverfloor = true;

  05dfb	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7371 : 							break;

  05e05	eb 05		 jmp	 SHORT $LN71@P_MovePlay
$LN605@P_MovePlay:

; 7372 : 						}
; 7373 : 					}
; 7374 : 				}

  05e07	e9 df fd ff ff	 jmp	 $LN70@P_MovePlay
$LN71@P_MovePlay:

; 7375 : 			}

  05e0c	e9 9d 04 00 00	 jmp	 $LN77@P_MovePlay
$LN590@P_MovePlay:

; 7376 : 			else if (c->sector->ffloors)

  05e11	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _c$45[ebp]
  05e17	8b 08		 mov	 ecx, DWORD PTR [eax]
  05e19	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  05e20	0f 84 3c 02 00
	00		 je	 $LN607@P_MovePlay

; 7377 : 			{
; 7378 : 				ffloor_t *rover;
; 7379 : 				for (rover = c->sector->ffloors; rover; rover = rover->next)

  05e26	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _c$45[ebp]
  05e2c	8b 08		 mov	 ecx, DWORD PTR [eax]
  05e2e	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  05e34	89 95 d4 fd ff
	ff		 mov	 DWORD PTR _rover$41[ebp], edx
  05e3a	eb 0f		 jmp	 SHORT $LN75@P_MovePlay
$LN73@P_MovePlay:
  05e3c	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05e42	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  05e45	89 8d d4 fd ff
	ff		 mov	 DWORD PTR _rover$41[ebp], ecx
$LN75@P_MovePlay:
  05e4b	83 bd d4 fd ff
	ff 00		 cmp	 DWORD PTR _rover$41[ebp], 0
  05e52	0f 84 05 02 00
	00		 je	 $LN74@P_MovePlay

; 7380 : 				{
; 7381 : 					if (!(rover->flags & FF_EXISTS)) continue;

  05e58	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05e5e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05e61	83 e1 01	 and	 ecx, 1
  05e64	75 02		 jne	 SHORT $LN609@P_MovePlay
  05e66	eb d4		 jmp	 SHORT $LN73@P_MovePlay
$LN609@P_MovePlay:

; 7382 : 
; 7383 : 					if ((rover->flags & FF_SWIMMABLE) && GETSECSPECIAL(rover->master->frontsector->special, 1) == 3
; 7384 : 						&& !(rover->master->flags & ML_BLOCKMONSTERS) && ((rover->master->flags & ML_EFFECT3)

  05e68	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05e6e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05e71	83 e1 20	 and	 ecx, 32			; 00000020H
  05e74	74 65		 je	 SHORT $LN610@P_MovePlay
  05e76	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05e7c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05e7f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  05e82	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  05e86	83 e0 0f	 and	 eax, 15			; 0000000fH
  05e89	83 f8 03	 cmp	 eax, 3
  05e8c	75 4d		 jne	 SHORT $LN610@P_MovePlay
  05e8e	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05e94	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05e97	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  05e9b	83 e2 02	 and	 edx, 2
  05e9e	75 3b		 jne	 SHORT $LN610@P_MovePlay
  05ea0	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05ea6	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  05ea9	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  05ead	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  05eb3	75 24		 jne	 SHORT $LN612@P_MovePlay
  05eb5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05eb8	8b 08		 mov	 ecx, DWORD PTR [eax]
  05eba	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05ebd	8b 02		 mov	 eax, DWORD PTR [edx]
  05ebf	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  05ec2	2b 48 50	 sub	 ecx, DWORD PTR [eax+80]
  05ec5	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR _rover$41[ebp]
  05ecb	8b 02		 mov	 eax, DWORD PTR [edx]
  05ecd	8b 10		 mov	 edx, DWORD PTR [eax]
  05ecf	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  05ed5	3b ca		 cmp	 ecx, edx
  05ed7	7e 02		 jle	 SHORT $LN610@P_MovePlay
$LN612@P_MovePlay:

; 7385 : 						|| player->mo->z - player->mo->momz > *rover->topheight - 16*FRACUNIT))
; 7386 : 						;

  05ed9	eb 24		 jmp	 SHORT $LN613@P_MovePlay
$LN610@P_MovePlay:

; 7387 : 					else if (!(rover->flags & FF_BLOCKPLAYER || rover->flags & FF_QUICKSAND))

  05edb	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05ee1	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05ee4	83 e1 02	 and	 ecx, 2
  05ee7	75 16		 jne	 SHORT $LN613@P_MovePlay
  05ee9	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05eef	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  05ef2	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  05ef8	75 05		 jne	 SHORT $LN613@P_MovePlay

; 7388 : 						continue; // intangible 3d floor

  05efa	e9 3d ff ff ff	 jmp	 $LN73@P_MovePlay
$LN613@P_MovePlay:

; 7389 : 
; 7390 : 					if (player->mo->eflags & MFE_VERTICALFLIP)

  05eff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05f02	8b 08		 mov	 ecx, DWORD PTR [eax]
  05f04	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  05f0a	83 e2 20	 and	 edx, 32			; 00000020H
  05f0d	0f 84 ad 00 00
	00		 je	 $LN614@P_MovePlay

; 7391 : 					{
; 7392 : 						if (*rover->bottomheight > c->sector->ceilingheight) // Above the ceiling

  05f13	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05f19	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05f1c	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _c$45[ebp]
  05f22	8b 02		 mov	 eax, DWORD PTR [edx]
  05f24	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05f26	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  05f29	7e 05		 jle	 SHORT $LN616@P_MovePlay

; 7393 : 							continue;

  05f2b	e9 0c ff ff ff	 jmp	 $LN73@P_MovePlay
$LN616@P_MovePlay:

; 7394 : 
; 7395 : 						if (*rover->bottomheight > player->mo->z + player->mo->height + tiptop
; 7396 : 							|| (*rover->topheight < player->mo->z

  05f30	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05f36	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05f39	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05f3c	8b 02		 mov	 eax, DWORD PTR [edx]
  05f3e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05f41	8b 12		 mov	 edx, DWORD PTR [edx]
  05f43	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  05f46	03 42 44	 add	 eax, DWORD PTR [edx+68]
  05f49	03 85 f4 fd ff
	ff		 add	 eax, DWORD PTR _tiptop$49[ebp]
  05f4f	39 01		 cmp	 DWORD PTR [ecx], eax
  05f51	7f 39		 jg	 SHORT $LN619@P_MovePlay
  05f53	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05f59	8b 08		 mov	 ecx, DWORD PTR [eax]
  05f5b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05f5e	8b 02		 mov	 eax, DWORD PTR [edx]
  05f60	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05f62	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  05f65	7d 3b		 jge	 SHORT $LN617@P_MovePlay
  05f67	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05f6a	8b 08		 mov	 ecx, DWORD PTR [eax]
  05f6c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05f6f	8b 02		 mov	 eax, DWORD PTR [edx]
  05f71	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  05f74	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  05f77	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _c$45[ebp]
  05f7d	8b 02		 mov	 eax, DWORD PTR [edx]
  05f7f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05f82	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  05f88	3b ca		 cmp	 ecx, edx
  05f8a	7d 16		 jge	 SHORT $LN617@P_MovePlay
$LN619@P_MovePlay:

; 7397 : 							&& player->mo->z + player->mo->height < c->sector->ceilingheight - tiptop))
; 7398 : 						{
; 7399 : 							teeter = true;

  05f8c	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7400 : 							roverfloor = true;

  05f96	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7401 : 						}

  05fa0	eb 19		 jmp	 SHORT $LN618@P_MovePlay
$LN617@P_MovePlay:

; 7402 : 						else
; 7403 : 						{
; 7404 : 							teeter = false;

  05fa2	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7405 : 							roverfloor = true;

  05fac	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7406 : 							break;

  05fb6	e9 a2 00 00 00	 jmp	 $LN74@P_MovePlay
$LN618@P_MovePlay:

; 7407 : 						}
; 7408 : 					}

  05fbb	e9 98 00 00 00	 jmp	 $LN622@P_MovePlay
$LN614@P_MovePlay:

; 7409 : 					else
; 7410 : 					{
; 7411 : 						if (*rover->topheight < c->sector->floorheight) // Below the floor

  05fc0	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05fc6	8b 08		 mov	 ecx, DWORD PTR [eax]
  05fc8	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _c$45[ebp]
  05fce	8b 02		 mov	 eax, DWORD PTR [edx]
  05fd0	8b 09		 mov	 ecx, DWORD PTR [ecx]
  05fd2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  05fd4	7d 05		 jge	 SHORT $LN620@P_MovePlay

; 7412 : 							continue;

  05fd6	e9 61 fe ff ff	 jmp	 $LN73@P_MovePlay
$LN620@P_MovePlay:

; 7413 : 
; 7414 : 						if (*rover->topheight < player->mo->z - tiptop
; 7415 : 							|| (*rover->bottomheight > player->mo->z + player->mo->height

  05fdb	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05fe1	8b 08		 mov	 ecx, DWORD PTR [eax]
  05fe3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05fe6	8b 02		 mov	 eax, DWORD PTR [edx]
  05fe8	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  05feb	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  05ff1	39 11		 cmp	 DWORD PTR [ecx], edx
  05ff3	7c 37		 jl	 SHORT $LN623@P_MovePlay
  05ff5	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _rover$41[ebp]
  05ffb	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  05ffe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06001	8b 02		 mov	 eax, DWORD PTR [edx]
  06003	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06006	8b 12		 mov	 edx, DWORD PTR [edx]
  06008	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0600b	03 42 44	 add	 eax, DWORD PTR [edx+68]
  0600e	39 01		 cmp	 DWORD PTR [ecx], eax
  06010	7e 30		 jle	 SHORT $LN621@P_MovePlay
  06012	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06015	8b 08		 mov	 ecx, DWORD PTR [eax]
  06017	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _c$45[ebp]
  0601d	8b 02		 mov	 eax, DWORD PTR [edx]
  0601f	8b 10		 mov	 edx, DWORD PTR [eax]
  06021	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  06027	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  0602a	7e 16		 jle	 SHORT $LN621@P_MovePlay
$LN623@P_MovePlay:

; 7416 : 							&& player->mo->z > c->sector->floorheight + tiptop))
; 7417 : 						{
; 7418 : 							teeter = true;

  0602c	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7419 : 							roverfloor = true;

  06036	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7420 : 						}

  06040	eb 16		 jmp	 SHORT $LN622@P_MovePlay
$LN621@P_MovePlay:

; 7421 : 						else
; 7422 : 						{
; 7423 : 							teeter = false;

  06042	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7424 : 							roverfloor = true;

  0604c	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7425 : 							break;

  06056	eb 05		 jmp	 SHORT $LN74@P_MovePlay
$LN622@P_MovePlay:

; 7426 : 						}
; 7427 : 					}
; 7428 : 				}

  06058	e9 df fd ff ff	 jmp	 $LN73@P_MovePlay
$LN74@P_MovePlay:

; 7429 : 			}

  0605d	e9 4c 02 00 00	 jmp	 $LN77@P_MovePlay
$LN607@P_MovePlay:

; 7430 : 			else if (d->sector->ffloors)

  06062	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _d$44[ebp]
  06068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0606a	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  06071	0f 84 37 02 00
	00		 je	 $LN77@P_MovePlay

; 7431 : 			{
; 7432 : 				ffloor_t *rover;
; 7433 : 				for (rover = d->sector->ffloors; rover; rover = rover->next)

  06077	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _d$44[ebp]
  0607d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0607f	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  06085	89 95 d0 fd ff
	ff		 mov	 DWORD PTR _rover$40[ebp], edx
  0608b	eb 0f		 jmp	 SHORT $LN78@P_MovePlay
$LN76@P_MovePlay:
  0608d	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  06093	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  06096	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _rover$40[ebp], ecx
$LN78@P_MovePlay:
  0609c	83 bd d0 fd ff
	ff 00		 cmp	 DWORD PTR _rover$40[ebp], 0
  060a3	0f 84 05 02 00
	00		 je	 $LN77@P_MovePlay

; 7434 : 				{
; 7435 : 					if (!(rover->flags & FF_EXISTS)) continue;

  060a9	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  060af	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  060b2	83 e1 01	 and	 ecx, 1
  060b5	75 02		 jne	 SHORT $LN625@P_MovePlay
  060b7	eb d4		 jmp	 SHORT $LN76@P_MovePlay
$LN625@P_MovePlay:

; 7436 : 
; 7437 : 					if ((rover->flags & FF_SWIMMABLE) && GETSECSPECIAL(rover->master->frontsector->special, 1) == 3
; 7438 : 						&& !(rover->master->flags & ML_BLOCKMONSTERS) && ((rover->master->flags & ML_EFFECT3)

  060b9	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  060bf	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  060c2	83 e1 20	 and	 ecx, 32			; 00000020H
  060c5	74 65		 je	 SHORT $LN626@P_MovePlay
  060c7	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  060cd	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  060d0	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  060d3	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  060d7	83 e0 0f	 and	 eax, 15			; 0000000fH
  060da	83 f8 03	 cmp	 eax, 3
  060dd	75 4d		 jne	 SHORT $LN626@P_MovePlay
  060df	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  060e5	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  060e8	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  060ec	83 e2 02	 and	 edx, 2
  060ef	75 3b		 jne	 SHORT $LN626@P_MovePlay
  060f1	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  060f7	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  060fa	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  060fe	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  06104	75 24		 jne	 SHORT $LN628@P_MovePlay
  06106	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06109	8b 08		 mov	 ecx, DWORD PTR [eax]
  0610b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0610e	8b 02		 mov	 eax, DWORD PTR [edx]
  06110	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  06113	2b 48 50	 sub	 ecx, DWORD PTR [eax+80]
  06116	8b 95 d0 fd ff
	ff		 mov	 edx, DWORD PTR _rover$40[ebp]
  0611c	8b 02		 mov	 eax, DWORD PTR [edx]
  0611e	8b 10		 mov	 edx, DWORD PTR [eax]
  06120	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  06126	3b ca		 cmp	 ecx, edx
  06128	7e 02		 jle	 SHORT $LN626@P_MovePlay
$LN628@P_MovePlay:

; 7439 : 						|| player->mo->z - player->mo->momz > *rover->topheight - 16*FRACUNIT))
; 7440 : 						;

  0612a	eb 24		 jmp	 SHORT $LN629@P_MovePlay
$LN626@P_MovePlay:

; 7441 : 					else if (!(rover->flags & FF_BLOCKPLAYER || rover->flags & FF_QUICKSAND))

  0612c	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  06132	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  06135	83 e1 02	 and	 ecx, 2
  06138	75 16		 jne	 SHORT $LN629@P_MovePlay
  0613a	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  06140	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  06143	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  06149	75 05		 jne	 SHORT $LN629@P_MovePlay

; 7442 : 						continue; // intangible 3d floor

  0614b	e9 3d ff ff ff	 jmp	 $LN76@P_MovePlay
$LN629@P_MovePlay:

; 7443 : 
; 7444 : 					if (player->mo->eflags & MFE_VERTICALFLIP)

  06150	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06153	8b 08		 mov	 ecx, DWORD PTR [eax]
  06155	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0615b	83 e2 20	 and	 edx, 32			; 00000020H
  0615e	0f 84 ad 00 00
	00		 je	 $LN630@P_MovePlay

; 7445 : 					{
; 7446 : 						if (*rover->bottomheight > d->sector->ceilingheight) // Above the ceiling

  06164	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  0616a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0616d	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _d$44[ebp]
  06173	8b 02		 mov	 eax, DWORD PTR [edx]
  06175	8b 09		 mov	 ecx, DWORD PTR [ecx]
  06177	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0617a	7e 05		 jle	 SHORT $LN632@P_MovePlay

; 7447 : 							continue;

  0617c	e9 0c ff ff ff	 jmp	 $LN76@P_MovePlay
$LN632@P_MovePlay:

; 7448 : 
; 7449 : 						if (*rover->bottomheight > player->mo->z + player->mo->height + tiptop
; 7450 : 							|| (*rover->topheight < player->mo->z

  06181	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  06187	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0618a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0618d	8b 02		 mov	 eax, DWORD PTR [edx]
  0618f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06192	8b 12		 mov	 edx, DWORD PTR [edx]
  06194	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  06197	03 42 44	 add	 eax, DWORD PTR [edx+68]
  0619a	03 85 f4 fd ff
	ff		 add	 eax, DWORD PTR _tiptop$49[ebp]
  061a0	39 01		 cmp	 DWORD PTR [ecx], eax
  061a2	7f 39		 jg	 SHORT $LN635@P_MovePlay
  061a4	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  061aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  061ac	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  061af	8b 02		 mov	 eax, DWORD PTR [edx]
  061b1	8b 09		 mov	 ecx, DWORD PTR [ecx]
  061b3	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  061b6	7d 3b		 jge	 SHORT $LN633@P_MovePlay
  061b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  061bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  061bd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  061c0	8b 02		 mov	 eax, DWORD PTR [edx]
  061c2	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  061c5	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  061c8	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _d$44[ebp]
  061ce	8b 02		 mov	 eax, DWORD PTR [edx]
  061d0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  061d3	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  061d9	3b ca		 cmp	 ecx, edx
  061db	7d 16		 jge	 SHORT $LN633@P_MovePlay
$LN635@P_MovePlay:

; 7451 : 							&& player->mo->z + player->mo->height < d->sector->ceilingheight - tiptop))
; 7452 : 						{
; 7453 : 							teeter = true;

  061dd	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7454 : 							roverfloor = true;

  061e7	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7455 : 						}

  061f1	eb 19		 jmp	 SHORT $LN634@P_MovePlay
$LN633@P_MovePlay:

; 7456 : 						else
; 7457 : 						{
; 7458 : 							teeter = false;

  061f3	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7459 : 							roverfloor = true;

  061fd	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7460 : 							break;

  06207	e9 a2 00 00 00	 jmp	 $LN77@P_MovePlay
$LN634@P_MovePlay:

; 7461 : 						}
; 7462 : 					}

  0620c	e9 98 00 00 00	 jmp	 $LN638@P_MovePlay
$LN630@P_MovePlay:

; 7463 : 					else
; 7464 : 					{
; 7465 : 						if (*rover->topheight < d->sector->floorheight) // Below the floor

  06211	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  06217	8b 08		 mov	 ecx, DWORD PTR [eax]
  06219	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _d$44[ebp]
  0621f	8b 02		 mov	 eax, DWORD PTR [edx]
  06221	8b 09		 mov	 ecx, DWORD PTR [ecx]
  06223	3b 08		 cmp	 ecx, DWORD PTR [eax]
  06225	7d 05		 jge	 SHORT $LN636@P_MovePlay

; 7466 : 							continue;

  06227	e9 61 fe ff ff	 jmp	 $LN76@P_MovePlay
$LN636@P_MovePlay:

; 7467 : 
; 7468 : 						if (*rover->topheight < player->mo->z - tiptop
; 7469 : 							|| (*rover->bottomheight > player->mo->z + player->mo->height

  0622c	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  06232	8b 08		 mov	 ecx, DWORD PTR [eax]
  06234	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06237	8b 02		 mov	 eax, DWORD PTR [edx]
  06239	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0623c	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  06242	39 11		 cmp	 DWORD PTR [ecx], edx
  06244	7c 37		 jl	 SHORT $LN639@P_MovePlay
  06246	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _rover$40[ebp]
  0624c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0624f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06252	8b 02		 mov	 eax, DWORD PTR [edx]
  06254	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06257	8b 12		 mov	 edx, DWORD PTR [edx]
  06259	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0625c	03 42 44	 add	 eax, DWORD PTR [edx+68]
  0625f	39 01		 cmp	 DWORD PTR [ecx], eax
  06261	7e 30		 jle	 SHORT $LN637@P_MovePlay
  06263	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06266	8b 08		 mov	 ecx, DWORD PTR [eax]
  06268	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _d$44[ebp]
  0626e	8b 02		 mov	 eax, DWORD PTR [edx]
  06270	8b 10		 mov	 edx, DWORD PTR [eax]
  06272	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  06278	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  0627b	7e 16		 jle	 SHORT $LN637@P_MovePlay
$LN639@P_MovePlay:

; 7470 : 							&& player->mo->z > d->sector->floorheight + tiptop))
; 7471 : 						{
; 7472 : 							teeter = true;

  0627d	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7473 : 							roverfloor = true;

  06287	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7474 : 						}

  06291	eb 16		 jmp	 SHORT $LN638@P_MovePlay
$LN637@P_MovePlay:

; 7475 : 						else
; 7476 : 						{
; 7477 : 							teeter = false;

  06293	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7478 : 							roverfloor = true;

  0629d	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7479 : 							break;

  062a7	eb 05		 jmp	 SHORT $LN77@P_MovePlay
$LN638@P_MovePlay:

; 7480 : 						}
; 7481 : 					}
; 7482 : 				}

  062a9	e9 df fd ff ff	 jmp	 $LN76@P_MovePlay
$LN77@P_MovePlay:

; 7483 : 			}
; 7484 : 
; 7485 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  062ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  062b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  062b3	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  062b9	83 e2 20	 and	 edx, 32			; 00000020H
  062bc	0f 84 8d 00 00
	00		 je	 $LN640@P_MovePlay

; 7486 : 			{
; 7487 : 				if (!teeter && !roverfloor && (a->sector->ceilingheight > player->mo->ceilingz + tiptop

  062c2	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _teeter$52[ebp], 0
  062c9	75 7f		 jne	 SHORT $LN642@P_MovePlay
  062cb	83 bd fc fd ff
	ff 00		 cmp	 DWORD PTR _roverfloor$51[ebp], 0
  062d2	75 76		 jne	 SHORT $LN642@P_MovePlay
  062d4	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _a$47[ebp]
  062da	8b 08		 mov	 ecx, DWORD PTR [eax]
  062dc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  062df	8b 02		 mov	 eax, DWORD PTR [edx]
  062e1	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  062e4	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  062ea	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  062ed	7f 51		 jg	 SHORT $LN643@P_MovePlay
  062ef	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _b$46[ebp]
  062f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  062f7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  062fa	8b 02		 mov	 eax, DWORD PTR [edx]
  062fc	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  062ff	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  06305	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  06308	7f 36		 jg	 SHORT $LN643@P_MovePlay
  0630a	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _c$45[ebp]
  06310	8b 08		 mov	 ecx, DWORD PTR [eax]
  06312	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06315	8b 02		 mov	 eax, DWORD PTR [edx]
  06317	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  0631a	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  06320	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  06323	7f 1b		 jg	 SHORT $LN643@P_MovePlay
  06325	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _d$44[ebp]
  0632b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0632d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06330	8b 02		 mov	 eax, DWORD PTR [edx]
  06332	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  06335	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  0633b	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  0633e	7e 0a		 jle	 SHORT $LN642@P_MovePlay
$LN643@P_MovePlay:

; 7488 : 					|| b->sector->ceilingheight > player->mo->ceilingz + tiptop
; 7489 : 					|| c->sector->ceilingheight > player->mo->ceilingz + tiptop
; 7490 : 					|| d->sector->ceilingheight > player->mo->ceilingz + tiptop))
; 7491 : 						teeter = true;

  06340	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1
$LN642@P_MovePlay:

; 7492 : 			}

  0634a	e9 84 00 00 00	 jmp	 $LN644@P_MovePlay
$LN640@P_MovePlay:

; 7493 : 			else
; 7494 : 			{
; 7495 : 				if (!teeter && !roverfloor && (a->sector->floorheight < player->mo->floorz - tiptop

  0634f	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _teeter$52[ebp], 0
  06356	75 7b		 jne	 SHORT $LN644@P_MovePlay
  06358	83 bd fc fd ff
	ff 00		 cmp	 DWORD PTR _roverfloor$51[ebp], 0
  0635f	75 72		 jne	 SHORT $LN644@P_MovePlay
  06361	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _a$47[ebp]
  06367	8b 08		 mov	 ecx, DWORD PTR [eax]
  06369	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0636c	8b 02		 mov	 eax, DWORD PTR [edx]
  0636e	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  06371	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  06377	39 11		 cmp	 DWORD PTR [ecx], edx
  06379	7c 4e		 jl	 SHORT $LN645@P_MovePlay
  0637b	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _b$46[ebp]
  06381	8b 08		 mov	 ecx, DWORD PTR [eax]
  06383	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06386	8b 02		 mov	 eax, DWORD PTR [edx]
  06388	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0638b	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  06391	39 11		 cmp	 DWORD PTR [ecx], edx
  06393	7c 34		 jl	 SHORT $LN645@P_MovePlay
  06395	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _c$45[ebp]
  0639b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0639d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  063a0	8b 02		 mov	 eax, DWORD PTR [edx]
  063a2	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  063a5	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  063ab	39 11		 cmp	 DWORD PTR [ecx], edx
  063ad	7c 1a		 jl	 SHORT $LN645@P_MovePlay
  063af	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _d$44[ebp]
  063b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  063b7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  063ba	8b 02		 mov	 eax, DWORD PTR [edx]
  063bc	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  063bf	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  063c5	39 11		 cmp	 DWORD PTR [ecx], edx
  063c7	7d 0a		 jge	 SHORT $LN644@P_MovePlay
$LN645@P_MovePlay:

; 7496 : 					|| b->sector->floorheight < player->mo->floorz - tiptop
; 7497 : 					|| c->sector->floorheight < player->mo->floorz - tiptop
; 7498 : 					|| d->sector->floorheight < player->mo->floorz - tiptop))
; 7499 : 						teeter = true;

  063c9	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1
$LN644@P_MovePlay:

; 7500 : 			}
; 7501 : 		}
; 7502 : 
; 7503 : #ifdef POLYOBJECTS
; 7504 : 		// Polyobjects
; 7505 : 		{
; 7506 : 			INT32 bx, by, xl, xh, yl, yh;
; 7507 : 
; 7508 : 			validcount++;

  063d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _validcount
  063d8	83 c0 01	 add	 eax, 1
  063db	a3 00 00 00 00	 mov	 DWORD PTR _validcount, eax

; 7509 : 
; 7510 : 			yh = (unsigned)(player->mo->y + player->mo->radius - bmaporgy)>>MAPBLOCKSHIFT;

  063e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  063e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  063e5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  063e8	8b 02		 mov	 eax, DWORD PTR [edx]
  063ea	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  063ed	03 48 40	 add	 ecx, DWORD PTR [eax+64]
  063f0	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgy
  063f6	c1 e9 17	 shr	 ecx, 23			; 00000017H
  063f9	89 8d b8 fd ff
	ff		 mov	 DWORD PTR _yh$34[ebp], ecx

; 7511 : 			yl = (unsigned)(player->mo->y - player->mo->radius - bmaporgy)>>MAPBLOCKSHIFT;

  063ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06402	8b 08		 mov	 ecx, DWORD PTR [eax]
  06404	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06407	8b 02		 mov	 eax, DWORD PTR [edx]
  06409	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0640c	2b 48 40	 sub	 ecx, DWORD PTR [eax+64]
  0640f	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgy
  06415	c1 e9 17	 shr	 ecx, 23			; 00000017H
  06418	89 8d bc fd ff
	ff		 mov	 DWORD PTR _yl$35[ebp], ecx

; 7512 : 			xh = (unsigned)(player->mo->x + player->mo->radius - bmaporgx)>>MAPBLOCKSHIFT;

  0641e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06421	8b 08		 mov	 ecx, DWORD PTR [eax]
  06423	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06426	8b 02		 mov	 eax, DWORD PTR [edx]
  06428	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0642b	03 48 40	 add	 ecx, DWORD PTR [eax+64]
  0642e	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgx
  06434	c1 e9 17	 shr	 ecx, 23			; 00000017H
  06437	89 8d c0 fd ff
	ff		 mov	 DWORD PTR _xh$36[ebp], ecx

; 7513 : 			xl = (unsigned)(player->mo->x - player->mo->radius - bmaporgx)>>MAPBLOCKSHIFT;

  0643d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06440	8b 08		 mov	 ecx, DWORD PTR [eax]
  06442	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06445	8b 02		 mov	 eax, DWORD PTR [edx]
  06447	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0644a	2b 48 40	 sub	 ecx, DWORD PTR [eax+64]
  0644d	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgx
  06453	c1 e9 17	 shr	 ecx, 23			; 00000017H
  06456	89 8d c4 fd ff
	ff		 mov	 DWORD PTR _xl$37[ebp], ecx

; 7514 : 
; 7515 : 			for (by = yl; by <= yh; by++)

  0645c	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _yl$35[ebp]
  06462	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _by$38[ebp], eax
  06468	eb 0f		 jmp	 SHORT $LN81@P_MovePlay
$LN79@P_MovePlay:
  0646a	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _by$38[ebp]
  06470	83 c0 01	 add	 eax, 1
  06473	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _by$38[ebp], eax
$LN81@P_MovePlay:
  06479	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _by$38[ebp]
  0647f	3b 85 b8 fd ff
	ff		 cmp	 eax, DWORD PTR _yh$34[ebp]
  06485	0f 8f ee 02 00
	00		 jg	 $LN80@P_MovePlay

; 7516 : 				for (bx = xl; bx <= xh; bx++)

  0648b	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _xl$37[ebp]
  06491	89 85 cc fd ff
	ff		 mov	 DWORD PTR _bx$39[ebp], eax
  06497	eb 0f		 jmp	 SHORT $LN84@P_MovePlay
$LN82@P_MovePlay:
  06499	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _bx$39[ebp]
  0649f	83 c0 01	 add	 eax, 1
  064a2	89 85 cc fd ff
	ff		 mov	 DWORD PTR _bx$39[ebp], eax
$LN84@P_MovePlay:
  064a8	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _bx$39[ebp]
  064ae	3b 85 c0 fd ff
	ff		 cmp	 eax, DWORD PTR _xh$36[ebp]
  064b4	0f 8f ba 02 00
	00		 jg	 $LN83@P_MovePlay

; 7517 : 				{
; 7518 : 					INT32 offset;
; 7519 : 					polymaplink_t *plink; // haleyjd 02/22/06
; 7520 : 
; 7521 : 					if (bx < 0 || by < 0 || bx >= bmapwidth || by >= bmapheight)

  064ba	83 bd cc fd ff
	ff 00		 cmp	 DWORD PTR _bx$39[ebp], 0
  064c1	7c 25		 jl	 SHORT $LN647@P_MovePlay
  064c3	83 bd c8 fd ff
	ff 00		 cmp	 DWORD PTR _by$38[ebp], 0
  064ca	7c 1c		 jl	 SHORT $LN647@P_MovePlay
  064cc	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _bx$39[ebp]
  064d2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _bmapwidth
  064d8	7d 0e		 jge	 SHORT $LN647@P_MovePlay
  064da	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _by$38[ebp]
  064e0	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _bmapheight
  064e6	7c 02		 jl	 SHORT $LN646@P_MovePlay
$LN647@P_MovePlay:

; 7522 : 						continue;

  064e8	eb af		 jmp	 SHORT $LN82@P_MovePlay
$LN646@P_MovePlay:

; 7523 : 
; 7524 : 					offset = by*bmapwidth + bx;

  064ea	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _by$38[ebp]
  064f0	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _bmapwidth
  064f7	03 85 cc fd ff
	ff		 add	 eax, DWORD PTR _bx$39[ebp]
  064fd	89 85 b4 fd ff
	ff		 mov	 DWORD PTR _offset$33[ebp], eax

; 7525 : 
; 7526 : 					// haleyjd 02/22/06: consider polyobject lines
; 7527 : 					plink = polyblocklinks[offset];

  06503	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _offset$33[ebp]
  06509	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _polyblocklinks
  0650f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  06512	89 95 b0 fd ff
	ff		 mov	 DWORD PTR _plink$32[ebp], edx
$LN827@P_MovePlay:

; 7528 : 
; 7529 : 					while (plink)

  06518	83 bd b0 fd ff
	ff 00		 cmp	 DWORD PTR _plink$32[ebp], 0
  0651f	0f 84 4a 02 00
	00		 je	 $LN86@P_MovePlay

; 7530 : 					{
; 7531 : 						polyobj_t *po = plink->po;

  06525	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _plink$32[ebp]
  0652b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0652e	89 8d ac fd ff
	ff		 mov	 DWORD PTR _po$31[ebp], ecx

; 7532 : 
; 7533 : 						if (po->validcount != validcount) // if polyobj hasn't been checked

  06534	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _po$31[ebp]
  0653a	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  06540	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _validcount
  06546	0f 84 10 02 00
	00		 je	 $LN661@P_MovePlay

; 7534 : 						{
; 7535 : 							sector_t *polysec;
; 7536 : 							fixed_t polytop, polybottom;
; 7537 : 
; 7538 : 							po->validcount = validcount;

  0654c	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _po$31[ebp]
  06552	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _validcount
  06558	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 7539 : 
; 7540 : 							if (!(po->flags & POF_SOLID))

  0655e	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _po$31[ebp]
  06564	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0656a	83 e1 03	 and	 ecx, 3
  0656d	75 10		 jne	 SHORT $LN649@P_MovePlay

; 7541 : 							{
; 7542 : 								plink = (polymaplink_t *)(plink->link.next);

  0656f	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _plink$32[ebp]
  06575	8b 08		 mov	 ecx, DWORD PTR [eax]
  06577	89 8d b0 fd ff
	ff		 mov	 DWORD PTR _plink$32[ebp], ecx

; 7543 : 								continue;

  0657d	eb 99		 jmp	 SHORT $LN827@P_MovePlay
$LN649@P_MovePlay:

; 7544 : 							}
; 7545 : 
; 7546 : 							if (!P_MobjInsidePolyobj(po, player->mo))

  0657f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06582	8b 08		 mov	 ecx, DWORD PTR [eax]
  06584	51		 push	 ecx
  06585	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _po$31[ebp]
  0658b	52		 push	 edx
  0658c	e8 00 00 00 00	 call	 _P_MobjInsidePolyobj
  06591	83 c4 08	 add	 esp, 8
  06594	85 c0		 test	 eax, eax
  06596	75 13		 jne	 SHORT $LN650@P_MovePlay

; 7547 : 							{
; 7548 : 								plink = (polymaplink_t *)(plink->link.next);

  06598	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _plink$32[ebp]
  0659e	8b 08		 mov	 ecx, DWORD PTR [eax]
  065a0	89 8d b0 fd ff
	ff		 mov	 DWORD PTR _plink$32[ebp], ecx

; 7549 : 								continue;

  065a6	e9 6d ff ff ff	 jmp	 $LN827@P_MovePlay
$LN650@P_MovePlay:

; 7550 : 							}
; 7551 : 
; 7552 : 							// We're inside it! Yess...
; 7553 : 							polysec = po->lines[0]->backsector;

  065ab	b8 04 00 00 00	 mov	 eax, 4
  065b0	6b c8 00	 imul	 ecx, eax, 0
  065b3	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _po$31[ebp]
  065b9	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  065bc	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  065bf	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  065c2	89 95 a8 fd ff
	ff		 mov	 DWORD PTR _polysec$30[ebp], edx

; 7554 : 
; 7555 : 							if (po->flags & POF_CLIPPLANES)

  065c8	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _po$31[ebp]
  065ce	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  065d4	83 e1 02	 and	 ecx, 2
  065d7	74 1f		 je	 SHORT $LN651@P_MovePlay

; 7556 : 							{
; 7557 : 								polytop = polysec->ceilingheight;

  065d9	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR _polysec$30[ebp]
  065df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  065e2	89 8d a4 fd ff
	ff		 mov	 DWORD PTR _polytop$29[ebp], ecx

; 7558 : 								polybottom = polysec->floorheight;

  065e8	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR _polysec$30[ebp]
  065ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  065f0	89 8d a0 fd ff
	ff		 mov	 DWORD PTR _polybottom$28[ebp], ecx

; 7559 : 							}

  065f6	eb 14		 jmp	 SHORT $LN652@P_MovePlay
$LN651@P_MovePlay:

; 7560 : 							else
; 7561 : 							{
; 7562 : 								polytop = INT32_MAX;

  065f8	c7 85 a4 fd ff
	ff ff ff ff 7f	 mov	 DWORD PTR _polytop$29[ebp], 2147483647 ; 7fffffffH

; 7563 : 								polybottom = INT32_MIN;

  06602	c7 85 a0 fd ff
	ff 00 00 00 80	 mov	 DWORD PTR _polybottom$28[ebp], -2147483648 ; 80000000H
$LN652@P_MovePlay:

; 7564 : 							}
; 7565 : 
; 7566 : 							if (player->mo->eflags & MFE_VERTICALFLIP)

  0660c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0660f	8b 08		 mov	 ecx, DWORD PTR [eax]
  06611	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  06617	83 e2 20	 and	 edx, 32			; 00000020H
  0661a	0f 84 a7 00 00
	00		 je	 $LN653@P_MovePlay

; 7567 : 							{
; 7568 : 								if (polybottom > player->mo->ceilingz) // Above the ceiling

  06620	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06623	8b 08		 mov	 ecx, DWORD PTR [eax]
  06625	8b 95 a0 fd ff
	ff		 mov	 edx, DWORD PTR _polybottom$28[ebp]
  0662b	3b 51 3c	 cmp	 edx, DWORD PTR [ecx+60]
  0662e	7e 13		 jle	 SHORT $LN655@P_MovePlay

; 7569 : 								{
; 7570 : 									plink = (polymaplink_t *)(plink->link.next);

  06630	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _plink$32[ebp]
  06636	8b 08		 mov	 ecx, DWORD PTR [eax]
  06638	89 8d b0 fd ff
	ff		 mov	 DWORD PTR _plink$32[ebp], ecx

; 7571 : 									continue;

  0663e	e9 d5 fe ff ff	 jmp	 $LN827@P_MovePlay
$LN655@P_MovePlay:

; 7572 : 								}
; 7573 : 
; 7574 : 								if (polybottom > player->mo->z + player->mo->height + tiptop
; 7575 : 										|| (polybottom < player->mo->z

  06643	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06646	8b 08		 mov	 ecx, DWORD PTR [eax]
  06648	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0664b	8b 02		 mov	 eax, DWORD PTR [edx]
  0664d	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  06650	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  06653	03 8d f4 fd ff
	ff		 add	 ecx, DWORD PTR _tiptop$49[ebp]
  06659	39 8d a0 fd ff
	ff		 cmp	 DWORD PTR _polybottom$28[ebp], ecx
  0665f	7f 32		 jg	 SHORT $LN658@P_MovePlay
  06661	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06664	8b 08		 mov	 ecx, DWORD PTR [eax]
  06666	8b 95 a0 fd ff
	ff		 mov	 edx, DWORD PTR _polybottom$28[ebp]
  0666c	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  0666f	7d 38		 jge	 SHORT $LN656@P_MovePlay
  06671	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06674	8b 08		 mov	 ecx, DWORD PTR [eax]
  06676	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06679	8b 02		 mov	 eax, DWORD PTR [edx]
  0667b	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0667e	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  06681	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06684	8b 02		 mov	 eax, DWORD PTR [edx]
  06686	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  06689	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  0668f	3b ca		 cmp	 ecx, edx
  06691	7d 16		 jge	 SHORT $LN656@P_MovePlay
$LN658@P_MovePlay:

; 7576 : 										&& player->mo->z + player->mo->height < player->mo->ceilingz - tiptop))
; 7577 : 								{
; 7578 : 									teeter = true;

  06693	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7579 : 									roverfloor = true;

  0669d	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7580 : 								}

  066a7	eb 19		 jmp	 SHORT $LN657@P_MovePlay
$LN656@P_MovePlay:

; 7581 : 								else
; 7582 : 								{
; 7583 : 									teeter = false;

  066a9	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7584 : 									roverfloor = true;

  066b3	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7585 : 									break;

  066bd	e9 ad 00 00 00	 jmp	 $LN86@P_MovePlay
$LN657@P_MovePlay:

; 7586 : 								}
; 7587 : 							}

  066c2	e9 95 00 00 00	 jmp	 $LN661@P_MovePlay
$LN653@P_MovePlay:

; 7588 : 							else
; 7589 : 							{
; 7590 : 								if (polytop < player->mo->floorz) // Below the floor

  066c7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  066ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  066cc	8b 95 a4 fd ff
	ff		 mov	 edx, DWORD PTR _polytop$29[ebp]
  066d2	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  066d5	7d 13		 jge	 SHORT $LN659@P_MovePlay

; 7591 : 								{
; 7592 : 									plink = (polymaplink_t *)(plink->link.next);

  066d7	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _plink$32[ebp]
  066dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  066df	89 8d b0 fd ff
	ff		 mov	 DWORD PTR _plink$32[ebp], ecx

; 7593 : 									continue;

  066e5	e9 2e fe ff ff	 jmp	 $LN827@P_MovePlay
$LN659@P_MovePlay:

; 7594 : 								}
; 7595 : 
; 7596 : 								if (polytop < player->mo->z - tiptop
; 7597 : 										|| (polytop > player->mo->z + player->mo->height

  066ea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  066ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  066ef	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  066f2	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _tiptop$49[ebp]
  066f8	39 95 a4 fd ff
	ff		 cmp	 DWORD PTR _polytop$29[ebp], edx
  066fe	7c 30		 jl	 SHORT $LN662@P_MovePlay
  06700	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06703	8b 08		 mov	 ecx, DWORD PTR [eax]
  06705	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06708	8b 02		 mov	 eax, DWORD PTR [edx]
  0670a	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0670d	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  06710	39 8d a4 fd ff
	ff		 cmp	 DWORD PTR _polytop$29[ebp], ecx
  06716	7e 2e		 jle	 SHORT $LN660@P_MovePlay
  06718	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0671b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0671d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06720	8b 02		 mov	 eax, DWORD PTR [edx]
  06722	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  06725	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _tiptop$49[ebp]
  0672b	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  0672e	7e 16		 jle	 SHORT $LN660@P_MovePlay
$LN662@P_MovePlay:

; 7598 : 										&& player->mo->z > player->mo->floorz + tiptop))
; 7599 : 								{
; 7600 : 									teeter = true;

  06730	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 1

; 7601 : 									roverfloor = true;

  0673a	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7602 : 								}

  06744	eb 16		 jmp	 SHORT $LN661@P_MovePlay
$LN660@P_MovePlay:

; 7603 : 								else
; 7604 : 								{
; 7605 : 									teeter = false;

  06746	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _teeter$52[ebp], 0

; 7606 : 									roverfloor = true;

  06750	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _roverfloor$51[ebp], 1

; 7607 : 									break;

  0675a	eb 13		 jmp	 SHORT $LN86@P_MovePlay
$LN661@P_MovePlay:

; 7608 : 								}
; 7609 : 							}
; 7610 : 						}
; 7611 : 						plink = (polymaplink_t *)(plink->link.next);

  0675c	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _plink$32[ebp]
  06762	8b 08		 mov	 ecx, DWORD PTR [eax]
  06764	89 8d b0 fd ff
	ff		 mov	 DWORD PTR _plink$32[ebp], ecx

; 7612 : 					}

  0676a	e9 a9 fd ff ff	 jmp	 $LN827@P_MovePlay
$LN86@P_MovePlay:

; 7613 : 				}

  0676f	e9 25 fd ff ff	 jmp	 $LN82@P_MovePlay
$LN83@P_MovePlay:
  06774	e9 f1 fc ff ff	 jmp	 $LN79@P_MovePlay
$LN80@P_MovePlay:

; 7614 : 		}
; 7615 : #endif
; 7616 : 		if (teeter)

  06779	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _teeter$52[ebp], 0
  06780	74 6f		 je	 SHORT $LN663@P_MovePlay

; 7617 : 		{
; 7618 : 			if ((player->mo->state == &states[S_PLAY_STND] || player->mo->state == &states[S_PLAY_TAP1] || player->mo->state == &states[S_PLAY_TAP2] || player->mo->state == &states[S_PLAY_SUPERSTAND]))

  06782	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06785	8b 08		 mov	 ecx, DWORD PTR [eax]
  06787	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0678c	c1 e2 00	 shl	 edx, 0
  0678f	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  06795	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  06798	74 45		 je	 SHORT $LN666@P_MovePlay
  0679a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0679d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0679f	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  067a4	d1 e2		 shl	 edx, 1
  067a6	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  067ac	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  067af	74 2e		 je	 SHORT $LN666@P_MovePlay
  067b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  067b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  067b6	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  067bb	6b c2 03	 imul	 eax, edx, 3
  067be	05 00 00 00 00	 add	 eax, OFFSET _states
  067c3	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  067c6	74 17		 je	 SHORT $LN666@P_MovePlay
  067c8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  067cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  067cd	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  067d2	6b c2 2a	 imul	 eax, edx, 42
  067d5	05 00 00 00 00	 add	 eax, OFFSET _states
  067da	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  067dd	75 10		 jne	 SHORT $LN665@P_MovePlay
$LN666@P_MovePlay:

; 7619 : 				P_SetPlayerMobjState(player->mo, S_PLAY_TEETER1);

  067df	6a 25		 push	 37			; 00000025H
  067e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  067e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  067e6	51		 push	 ecx
  067e7	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  067ec	83 c4 08	 add	 esp, 8
$LN665@P_MovePlay:

; 7620 : 		}

  067ef	eb 5e		 jmp	 SHORT $LN667@P_MovePlay
$LN663@P_MovePlay:

; 7621 : 		else if (checkedforteeter && (player->mo->state == &states[S_PLAY_TEETER1] || player->mo->state == &states[S_PLAY_TEETER2] || player->mo->state == &states[S_PLAY_SUPERTEETER]))

  067f1	83 bd f8 fd ff
	ff 00		 cmp	 DWORD PTR _checkedforteeter$50[ebp], 0
  067f8	74 55		 je	 SHORT $LN667@P_MovePlay
  067fa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  067fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  067ff	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  06804	6b c2 25	 imul	 eax, edx, 37
  06807	05 00 00 00 00	 add	 eax, OFFSET _states
  0680c	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0680f	74 2e		 je	 SHORT $LN668@P_MovePlay
  06811	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06814	8b 08		 mov	 ecx, DWORD PTR [eax]
  06816	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0681b	6b c2 26	 imul	 eax, edx, 38
  0681e	05 00 00 00 00	 add	 eax, OFFSET _states
  06823	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  06826	74 17		 je	 SHORT $LN668@P_MovePlay
  06828	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0682b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0682d	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  06832	6b c2 2f	 imul	 eax, edx, 47
  06835	05 00 00 00 00	 add	 eax, OFFSET _states
  0683a	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0683d	75 10		 jne	 SHORT $LN667@P_MovePlay
$LN668@P_MovePlay:

; 7622 : 			P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  0683f	6a 01		 push	 1
  06841	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06844	8b 08		 mov	 ecx, DWORD PTR [eax]
  06846	51		 push	 ecx
  06847	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0684c	83 c4 08	 add	 esp, 8
$LN667@P_MovePlay:

; 7623 : 	}
; 7624 : 
; 7625 : /////////////////
; 7626 : // FIRING CODE //
; 7627 : /////////////////
; 7628 : 
; 7629 : // These make stuff WAAAAYY easier to understand!
; 7630 : 	// Toss a flag
; 7631 : 	if ((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))
; 7632 : 		&& (cmd->buttons & BT_TOSSFLAG) && !(player->powers[pw_super]) && !(player->tossdelay))

  0684f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  06856	83 f8 04	 cmp	 eax, 4
  06859	74 15		 je	 SHORT $LN670@P_MovePlay
  0685b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  06862	83 f8 01	 cmp	 eax, 1
  06865	75 72		 jne	 SHORT $LN672@P_MovePlay
  06867	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0686e	74 69		 je	 SHORT $LN672@P_MovePlay
$LN670@P_MovePlay:
  06870	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  06873	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  06877	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0687d	74 5a		 je	 SHORT $LN672@P_MovePlay
  0687f	b8 04 00 00 00	 mov	 eax, 4
  06884	6b c8 0f	 imul	 ecx, eax, 15
  06887	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0688a	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0688f	75 48		 jne	 SHORT $LN672@P_MovePlay
  06891	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06894	83 b8 74 01 00
	00 00		 cmp	 DWORD PTR [eax+372], 0
  0689b	75 3c		 jne	 SHORT $LN672@P_MovePlay

; 7633 : 	{
; 7634 : 		if (!(player->gotflag & MF_REDFLAG || player->gotflag & MF_BLUEFLAG))

  0689d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  068a0	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  068a7	83 e1 01	 and	 ecx, 1
  068aa	75 1f		 jne	 SHORT $LN671@P_MovePlay
  068ac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  068af	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  068b6	83 e1 02	 and	 ecx, 2
  068b9	75 10		 jne	 SHORT $LN671@P_MovePlay

; 7635 : 			P_PlayerEmeraldBurst(player, true); // Toss emeralds

  068bb	6a 01		 push	 1
  068bd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  068c0	50		 push	 eax
  068c1	e8 00 00 00 00	 call	 _P_PlayerEmeraldBurst
  068c6	83 c4 08	 add	 esp, 8
  068c9	eb 0e		 jmp	 SHORT $LN672@P_MovePlay
$LN671@P_MovePlay:

; 7636 : 		else
; 7637 : 			P_PlayerFlagBurst(player, true);

  068cb	6a 01		 push	 1
  068cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  068d0	50		 push	 eax
  068d1	e8 00 00 00 00	 call	 _P_PlayerFlagBurst
  068d6	83 c4 08	 add	 esp, 8
$LN672@P_MovePlay:

; 7638 : 	}
; 7639 : 
; 7640 : 	// check for fire
; 7641 : 	if (cmd->buttons & BT_ATTACK || cmd->buttons & BT_FIRENORMAL)

  068d9	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  068dc	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  068e0	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  068e6	75 13		 jne	 SHORT $LN675@P_MovePlay
  068e8	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  068eb	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  068ef	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  068f5	0f 84 3d 0b 00
	00		 je	 $LN673@P_MovePlay
$LN675@P_MovePlay:

; 7642 : 	{
; 7643 : 		if (mariomode)

  068fb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  06902	25 00 01 00 00	 and	 eax, 256		; 00000100H
  06907	74 7d		 je	 SHORT $LN676@P_MovePlay

; 7644 : 		{
; 7645 : 			if (!(player->pflags & PF_ATTACKDOWN) && player->powers[pw_fireflower]
; 7646 : 				&& !player->climbing)

  06909	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0690c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  06912	83 e1 02	 and	 ecx, 2
  06915	75 6a		 jne	 SHORT $LN678@P_MovePlay
  06917	b8 04 00 00 00	 mov	 eax, 4
  0691c	6b c8 11	 imul	 ecx, eax, 17
  0691f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06922	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  06927	74 58		 je	 SHORT $LN678@P_MovePlay
  06929	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0692c	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  06933	75 4c		 jne	 SHORT $LN678@P_MovePlay

; 7647 : 			{
; 7648 : 				player->pflags |= PF_ATTACKDOWN;

  06935	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06938	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0693e	83 c9 02	 or	 ecx, 2
  06941	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06944	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 7649 : 				P_SPMAngle(player->mo, MT_FIREBALL, player->mo->angle, true, true, 0, false);

  0694a	6a 00		 push	 0
  0694c	6a 00		 push	 0
  0694e	6a 01		 push	 1
  06950	6a 01		 push	 1
  06952	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06955	8b 08		 mov	 ecx, DWORD PTR [eax]
  06957	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0695a	52		 push	 edx
  0695b	68 e7 00 00 00	 push	 231			; 000000e7H
  06960	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06963	8b 08		 mov	 ecx, DWORD PTR [eax]
  06965	51		 push	 ecx
  06966	e8 00 00 00 00	 call	 _P_SPMAngle
  0696b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7650 : 				S_StartSound(player->mo, sfx_thok);

  0696e	68 e4 00 00 00	 push	 228			; 000000e4H
  06973	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06976	8b 08		 mov	 ecx, DWORD PTR [eax]
  06978	51		 push	 ecx
  06979	e8 00 00 00 00	 call	 _S_StartSound
  0697e	83 c4 08	 add	 esp, 8
$LN678@P_MovePlay:

; 7651 : 			}
; 7652 : 		}

  06981	e9 ad 0a 00 00	 jmp	 $LN683@P_MovePlay
$LN676@P_MovePlay:

; 7653 : 		else if (player->currentweapon == WEP_GRENADE && !player->weapondelay && !(cmd->buttons & BT_FIRENORMAL))

  06986	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06989	83 78 2c 04	 cmp	 DWORD PTR [eax+44], 4
  0698d	75 5e		 jne	 SHORT $LN679@P_MovePlay
  0698f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06992	83 b8 70 01 00
	00 00		 cmp	 DWORD PTR [eax+368], 0
  06999	75 52		 jne	 SHORT $LN679@P_MovePlay
  0699b	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  0699e	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  069a2	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  069a8	75 43		 jne	 SHORT $LN679@P_MovePlay

; 7654 : 		{
; 7655 : 			if (player->tossstrength < 8*FRACUNIT)

  069aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  069ad	81 78 34 00 00
	08 00		 cmp	 DWORD PTR [eax+52], 524288 ; 00080000H
  069b4	7d 0a		 jge	 SHORT $LN681@P_MovePlay

; 7656 : 				player->tossstrength = 8*FRACUNIT;

  069b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  069b9	c7 40 34 00 00
	08 00		 mov	 DWORD PTR [eax+52], 524288 ; 00080000H
$LN681@P_MovePlay:

; 7657 : 
; 7658 : 			player->tossstrength += FRACUNIT/2;

  069c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  069c3	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  069c6	81 c1 00 80 00
	00		 add	 ecx, 32768		; 00008000H
  069cc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  069cf	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 7659 : 
; 7660 : 			if (player->tossstrength > (MAXMOVE/4))

  069d2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  069d5	81 78 34 00 00
	0f 00		 cmp	 DWORD PTR [eax+52], 983040 ; 000f0000H
  069dc	7e 0a		 jle	 SHORT $LN682@P_MovePlay

; 7661 : 				player->tossstrength = (MAXMOVE/4);

  069de	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  069e1	c7 40 34 00 00
	0f 00		 mov	 DWORD PTR [eax+52], 983040 ; 000f0000H
$LN682@P_MovePlay:

; 7662 : 		}

  069e8	e9 46 0a 00 00	 jmp	 $LN683@P_MovePlay
$LN679@P_MovePlay:

; 7663 : 		else if ((((gametype == GT_MATCH || gametype == GT_CTF || cv_ringslinger.value)
; 7664 : 			&& player->mo->health > 1 && (((!(player->pflags & PF_ATTACKDOWN) || (player->currentweapon == WEP_AUTO && player->powers[pw_automaticring] && cmd->buttons & BT_ATTACK)) && !player->weapondelay)))
; 7665 : 			|| (gametype == GT_TAG &&
; 7666 : 			player->mo->health > 1 && (((!(player->pflags & PF_ATTACKDOWN) || (player->currentweapon == WEP_AUTO && player->powers[pw_automaticring] && cmd->buttons & BT_ATTACK)) && !player->weapondelay))
; 7667 : 			&& (player->pflags & PF_TAGIT))) && !player->climbing && !player->exiting) // don't fire when you're already done

  069ed	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  069f4	83 f8 01	 cmp	 eax, 1
  069f7	74 15		 je	 SHORT $LN686@P_MovePlay
  069f9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  06a00	83 f8 04	 cmp	 eax, 4
  06a03	74 09		 je	 SHORT $LN686@P_MovePlay
  06a05	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_ringslinger+20, 0
  06a0c	74 56		 je	 SHORT $LN687@P_MovePlay
$LN686@P_MovePlay:
  06a0e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06a11	8b 08		 mov	 ecx, DWORD PTR [eax]
  06a13	83 b9 8c 00 00
	00 01		 cmp	 DWORD PTR [ecx+140], 1
  06a1a	7e 48		 jle	 SHORT $LN687@P_MovePlay
  06a1c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06a1f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  06a25	83 e1 02	 and	 ecx, 2
  06a28	74 2a		 je	 SHORT $LN688@P_MovePlay
  06a2a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06a2d	83 78 2c 01	 cmp	 DWORD PTR [eax+44], 1
  06a31	75 31		 jne	 SHORT $LN687@P_MovePlay
  06a33	b8 04 00 00 00	 mov	 eax, 4
  06a38	6b c8 14	 imul	 ecx, eax, 20
  06a3b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06a3e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  06a43	74 1f		 je	 SHORT $LN687@P_MovePlay
  06a45	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  06a48	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  06a4c	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  06a52	74 10		 je	 SHORT $LN687@P_MovePlay
$LN688@P_MovePlay:
  06a54	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06a57	83 b8 70 01 00
	00 00		 cmp	 DWORD PTR [eax+368], 0
  06a5e	0f 84 8b 00 00
	00		 je	 $LN684@P_MovePlay
$LN687@P_MovePlay:
  06a64	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  06a6b	83 f8 03	 cmp	 eax, 3
  06a6e	0f 85 bf 09 00
	00		 jne	 $LN683@P_MovePlay
  06a74	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06a77	8b 08		 mov	 ecx, DWORD PTR [eax]
  06a79	83 b9 8c 00 00
	00 01		 cmp	 DWORD PTR [ecx+140], 1
  06a80	0f 8e ad 09 00
	00		 jle	 $LN683@P_MovePlay
  06a86	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06a89	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  06a8f	83 e1 02	 and	 ecx, 2
  06a92	74 36		 je	 SHORT $LN689@P_MovePlay
  06a94	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06a97	83 78 2c 01	 cmp	 DWORD PTR [eax+44], 1
  06a9b	0f 85 92 09 00
	00		 jne	 $LN683@P_MovePlay
  06aa1	b8 04 00 00 00	 mov	 eax, 4
  06aa6	6b c8 14	 imul	 ecx, eax, 20
  06aa9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06aac	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  06ab1	0f 84 7c 09 00
	00		 je	 $LN683@P_MovePlay
  06ab7	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  06aba	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  06abe	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  06ac4	0f 84 69 09 00
	00		 je	 $LN683@P_MovePlay
$LN689@P_MovePlay:
  06aca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06acd	83 b8 70 01 00
	00 00		 cmp	 DWORD PTR [eax+368], 0
  06ad4	0f 85 59 09 00
	00		 jne	 $LN683@P_MovePlay
  06ada	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06add	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  06ae3	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  06ae9	0f 84 44 09 00
	00		 je	 $LN683@P_MovePlay
$LN684@P_MovePlay:
  06aef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06af2	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  06af9	0f 85 34 09 00
	00		 jne	 $LN683@P_MovePlay
  06aff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b02	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  06b09	0f 85 24 09 00
	00		 jne	 $LN683@P_MovePlay

; 7668 : 		{
; 7669 : 			player->pflags |= PF_ATTACKDOWN;

  06b0f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b12	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  06b18	83 c9 02	 or	 ecx, 2
  06b1b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06b1e	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 7670 : 
; 7671 : 			//Just like with jump height, adjust the firing height slightly when in reverse gravity.
; 7672 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  06b24	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b27	8b 08		 mov	 ecx, DWORD PTR [eax]
  06b29	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  06b2f	83 e2 20	 and	 edx, 32			; 00000020H
  06b32	74 16		 je	 SHORT $LN690@P_MovePlay

; 7673 : 				player->mo->z -= 8*FRACUNIT;

  06b34	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b37	8b 08		 mov	 ecx, DWORD PTR [eax]
  06b39	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  06b3c	81 ea 00 00 08
	00		 sub	 edx, 524288		; 00080000H
  06b42	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b45	8b 08		 mov	 ecx, DWORD PTR [eax]
  06b47	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN690@P_MovePlay:

; 7674 : 
; 7675 : 			if (cmd->buttons & BT_FIRENORMAL) // No powers, just a regular ring.

  06b4a	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  06b4d	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  06b51	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  06b57	0f 84 ba 00 00
	00		 je	 $LN691@P_MovePlay

; 7676 : 			{
; 7677 : 				mobj_t *mo;
; 7678 : 				player->weapondelay = TICRATE/4;

  06b5d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b60	c7 80 70 01 00
	00 08 00 00 00	 mov	 DWORD PTR [eax+368], 8

; 7679 : 
; 7680 : 				if (player->skin == 2) // Knuckles

  06b6a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b6d	83 b8 b8 00 00
	00 02		 cmp	 DWORD PTR [eax+184], 2
  06b74	75 2e		 jne	 SHORT $LN693@P_MovePlay

; 7681 : 				{
; 7682 : 					player->weapondelay /= 3;

  06b76	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b79	8b 80 70 01 00
	00		 mov	 eax, DWORD PTR [eax+368]
  06b7f	99		 cdq
  06b80	b9 03 00 00 00	 mov	 ecx, 3
  06b85	f7 f9		 idiv	 ecx
  06b87	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06b8a	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax

; 7683 : 					player->weapondelay *= 2;

  06b90	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06b93	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  06b99	d1 e1		 shl	 ecx, 1
  06b9b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06b9e	89 8a 70 01 00
	00		 mov	 DWORD PTR [edx+368], ecx
$LN693@P_MovePlay:

; 7684 : 				}
; 7685 : 
; 7686 : 				mo = P_SpawnPlayerMissile(player->mo, MT_REDRING, 0, false);

  06ba4	6a 00		 push	 0
  06ba6	6a 00		 push	 0
  06ba8	6a 00		 push	 0
  06baa	6a 00		 push	 0
  06bac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06baf	8b 08		 mov	 ecx, DWORD PTR [eax]
  06bb1	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  06bb4	52		 push	 edx
  06bb5	68 cf 00 00 00	 push	 207			; 000000cfH
  06bba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06bbd	8b 08		 mov	 ecx, DWORD PTR [eax]
  06bbf	51		 push	 ecx
  06bc0	e8 00 00 00 00	 call	 _P_SPMAngle
  06bc5	83 c4 1c	 add	 esp, 28			; 0000001cH
  06bc8	89 85 9c fd ff
	ff		 mov	 DWORD PTR _mo$27[ebp], eax

; 7687 : 
; 7688 : 				if (mo)

  06bce	83 bd 9c fd ff
	ff 00		 cmp	 DWORD PTR _mo$27[ebp], 0
  06bd5	74 13		 je	 SHORT $LN694@P_MovePlay

; 7689 : 					P_ColorTeamMissile(mo, player);

  06bd7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06bda	50		 push	 eax
  06bdb	8b 8d 9c fd ff
	ff		 mov	 ecx, DWORD PTR _mo$27[ebp]
  06be1	51		 push	 ecx
  06be2	e8 00 00 00 00	 call	 _P_ColorTeamMissile
  06be7	83 c4 08	 add	 esp, 8
$LN694@P_MovePlay:

; 7690 : 
; 7691 : 				player->mo->health--;

  06bea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06bed	8b 08		 mov	 ecx, DWORD PTR [eax]
  06bef	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  06bf5	83 ea 01	 sub	 edx, 1
  06bf8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06bfb	8b 08		 mov	 ecx, DWORD PTR [eax]
  06bfd	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 7692 : 				player->health--;

  06c03	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06c06	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  06c09	83 e9 01	 sub	 ecx, 1
  06c0c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06c0f	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 7693 : 			}

  06c12	e9 f1 07 00 00	 jmp	 $LN719@P_MovePlay
$LN691@P_MovePlay:

; 7694 : 			else
; 7695 : 			{
; 7696 : 				mobj_t *mo = NULL;

  06c17	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _mo$26[ebp], 0

; 7697 : 
; 7698 : 				if (player->currentweapon == WEP_BOUNCE && player->powers[pw_bouncering])

  06c21	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06c24	83 78 2c 02	 cmp	 DWORD PTR [eax+44], 2
  06c28	0f 85 f1 00 00
	00		 jne	 $LN695@P_MovePlay
  06c2e	b8 04 00 00 00	 mov	 eax, 4
  06c33	6b c8 12	 imul	 ecx, eax, 18
  06c36	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06c39	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  06c3e	0f 84 db 00 00
	00		 je	 $LN695@P_MovePlay

; 7699 : 				{
; 7700 : 					// Bounce ring
; 7701 : 
; 7702 : 					player->weapondelay = TICRATE/3;

  06c44	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06c47	c7 80 70 01 00
	00 0b 00 00 00	 mov	 DWORD PTR [eax+368], 11	; 0000000bH

; 7703 : 
; 7704 : 					if (player->skin == 2) // Knuckles

  06c51	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06c54	83 b8 b8 00 00
	00 02		 cmp	 DWORD PTR [eax+184], 2
  06c5b	75 2e		 jne	 SHORT $LN697@P_MovePlay

; 7705 : 					{
; 7706 : 						player->weapondelay /= 3;

  06c5d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06c60	8b 80 70 01 00
	00		 mov	 eax, DWORD PTR [eax+368]
  06c66	99		 cdq
  06c67	b9 03 00 00 00	 mov	 ecx, 3
  06c6c	f7 f9		 idiv	 ecx
  06c6e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06c71	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax

; 7707 : 						player->weapondelay *= 2;

  06c77	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06c7a	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  06c80	d1 e1		 shl	 ecx, 1
  06c82	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06c85	89 8a 70 01 00
	00		 mov	 DWORD PTR [edx+368], ecx
$LN697@P_MovePlay:

; 7708 : 					}
; 7709 : 
; 7710 : 					mo = P_SpawnPlayerMissile(player->mo, MT_THROWNBOUNCE, MF2_BOUNCERING, false);

  06c8b	6a 00		 push	 0
  06c8d	68 00 00 04 00	 push	 262144			; 00040000H
  06c92	6a 00		 push	 0
  06c94	6a 00		 push	 0
  06c96	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06c99	8b 08		 mov	 ecx, DWORD PTR [eax]
  06c9b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  06c9e	52		 push	 edx
  06c9f	68 dc 00 00 00	 push	 220			; 000000dcH
  06ca4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06ca7	8b 08		 mov	 ecx, DWORD PTR [eax]
  06ca9	51		 push	 ecx
  06caa	e8 00 00 00 00	 call	 _P_SPMAngle
  06caf	83 c4 1c	 add	 esp, 28			; 0000001cH
  06cb2	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7711 : 
; 7712 : 					if (mo)

  06cb8	83 bd 98 fd ff
	ff 00		 cmp	 DWORD PTR _mo$26[ebp], 0
  06cbf	74 10		 je	 SHORT $LN698@P_MovePlay

; 7713 : 						mo->fuse = 3*TICRATE; // Bounce Ring time

  06cc1	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  06cc7	c7 80 bc 00 00
	00 69 00 00 00	 mov	 DWORD PTR [eax+188], 105 ; 00000069H
$LN698@P_MovePlay:

; 7714 : 
; 7715 : 					player->powers[pw_bouncering]--;

  06cd1	b8 04 00 00 00	 mov	 eax, 4
  06cd6	6b c8 12	 imul	 ecx, eax, 18
  06cd9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06cdc	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  06ce0	83 e8 01	 sub	 eax, 1
  06ce3	b9 04 00 00 00	 mov	 ecx, 4
  06ce8	6b d1 12	 imul	 edx, ecx, 18
  06ceb	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  06cee	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 7716 : 					player->mo->health--;

  06cf2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06cf5	8b 08		 mov	 ecx, DWORD PTR [eax]
  06cf7	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  06cfd	83 ea 01	 sub	 edx, 1
  06d00	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06d03	8b 08		 mov	 ecx, DWORD PTR [eax]
  06d05	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 7717 : 					player->health--;

  06d0b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06d0e	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  06d11	83 e9 01	 sub	 ecx, 1
  06d14	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06d17	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 7718 : 				}

  06d1a	e9 ad 05 00 00	 jmp	 $LN709@P_MovePlay
$LN695@P_MovePlay:

; 7719 : 				else if (player->currentweapon == WEP_RAIL && player->powers[pw_railring])

  06d1f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06d22	83 78 2c 06	 cmp	 DWORD PTR [eax+44], 6
  06d26	0f 85 d8 00 00
	00		 jne	 $LN699@P_MovePlay
  06d2c	b8 04 00 00 00	 mov	 eax, 4
  06d31	6b c8 13	 imul	 ecx, eax, 19
  06d34	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06d37	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  06d3c	0f 84 c2 00 00
	00		 je	 $LN699@P_MovePlay

; 7720 : 				{
; 7721 : 					// Rail ring
; 7722 : 
; 7723 : 					player->weapondelay = (3*TICRATE)/2;

  06d42	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06d45	c7 80 70 01 00
	00 34 00 00 00	 mov	 DWORD PTR [eax+368], 52	; 00000034H

; 7724 : 
; 7725 : 					if (player->skin == 2) // Knuckles

  06d4f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06d52	83 b8 b8 00 00
	00 02		 cmp	 DWORD PTR [eax+184], 2
  06d59	75 2e		 jne	 SHORT $LN701@P_MovePlay

; 7726 : 					{
; 7727 : 						player->weapondelay /= 3;

  06d5b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06d5e	8b 80 70 01 00
	00		 mov	 eax, DWORD PTR [eax+368]
  06d64	99		 cdq
  06d65	b9 03 00 00 00	 mov	 ecx, 3
  06d6a	f7 f9		 idiv	 ecx
  06d6c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06d6f	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax

; 7728 : 						player->weapondelay *= 2;

  06d75	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06d78	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  06d7e	d1 e1		 shl	 ecx, 1
  06d80	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06d83	89 8a 70 01 00
	00		 mov	 DWORD PTR [edx+368], ecx
$LN701@P_MovePlay:

; 7729 : 					}
; 7730 : 
; 7731 : 					mo = P_SpawnPlayerMissile(player->mo, MT_REDRING, MF2_RAILRING|MF2_DONTDRAW, false);

  06d89	6a 00		 push	 0
  06d8b	68 00 00 42 00	 push	 4325376			; 00420000H
  06d90	6a 00		 push	 0
  06d92	6a 00		 push	 0
  06d94	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06d97	8b 08		 mov	 ecx, DWORD PTR [eax]
  06d99	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  06d9c	52		 push	 edx
  06d9d	68 cf 00 00 00	 push	 207			; 000000cfH
  06da2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06da5	8b 08		 mov	 ecx, DWORD PTR [eax]
  06da7	51		 push	 ecx
  06da8	e8 00 00 00 00	 call	 _P_SPMAngle
  06dad	83 c4 1c	 add	 esp, 28			; 0000001cH
  06db0	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7732 : 
; 7733 : #ifdef WEAPON_SFX
; 7734 : 					//Due to the fact that the rail has no unique thrown object, this hack is necessary.
; 7735 : 					S_StartSound(player->mo, sfx_rail);
; 7736 : #endif
; 7737 : 
; 7738 : 					player->powers[pw_railring]--;

  06db6	b8 04 00 00 00	 mov	 eax, 4
  06dbb	6b c8 13	 imul	 ecx, eax, 19
  06dbe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06dc1	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  06dc5	83 e8 01	 sub	 eax, 1
  06dc8	b9 04 00 00 00	 mov	 ecx, 4
  06dcd	6b d1 13	 imul	 edx, ecx, 19
  06dd0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  06dd3	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 7739 : 					player->mo->health--;

  06dd7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06dda	8b 08		 mov	 ecx, DWORD PTR [eax]
  06ddc	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  06de2	83 ea 01	 sub	 edx, 1
  06de5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06de8	8b 08		 mov	 ecx, DWORD PTR [eax]
  06dea	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 7740 : 					player->health--;

  06df0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06df3	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  06df6	83 e9 01	 sub	 ecx, 1
  06df9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06dfc	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 7741 : 				}

  06dff	e9 c8 04 00 00	 jmp	 $LN709@P_MovePlay
$LN699@P_MovePlay:

; 7742 : 				else if (player->currentweapon == WEP_AUTO && player->powers[pw_automaticring])

  06e04	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06e07	83 78 2c 01	 cmp	 DWORD PTR [eax+44], 1
  06e0b	0f 85 b7 00 00
	00		 jne	 $LN702@P_MovePlay
  06e11	b8 04 00 00 00	 mov	 eax, 4
  06e16	6b c8 14	 imul	 ecx, eax, 20
  06e19	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06e1c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  06e21	0f 84 a1 00 00
	00		 je	 $LN702@P_MovePlay

; 7743 : 				{
; 7744 : 					// Automatic
; 7745 : 					// These delay values look stupid, but now they'll work
; 7746 : 					// if the TICRATE changes to something else.
; 7747 : 					player->weapondelay = (2 * TICRATE) / OLDTICRATE;

  06e27	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06e2a	c7 80 70 01 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+368], 2

; 7748 : 
; 7749 : 					if (player->skin == 2) // Knuckles

  06e34	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06e37	83 b8 b8 00 00
	00 02		 cmp	 DWORD PTR [eax+184], 2
  06e3e	75 0d		 jne	 SHORT $LN704@P_MovePlay

; 7750 : 						player->weapondelay = TICRATE / OLDTICRATE;

  06e40	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06e43	c7 80 70 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+368], 1
$LN704@P_MovePlay:

; 7751 : 
; 7752 : 					mo = P_SpawnPlayerMissile(player->mo, MT_THROWNAUTOMATIC, MF2_AUTOMATIC, false);

  06e4d	6a 00		 push	 0
  06e4f	68 00 00 01 00	 push	 65536			; 00010000H
  06e54	6a 00		 push	 0
  06e56	6a 00		 push	 0
  06e58	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06e5b	8b 08		 mov	 ecx, DWORD PTR [eax]
  06e5d	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  06e60	52		 push	 edx
  06e61	68 dd 00 00 00	 push	 221			; 000000ddH
  06e66	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06e69	8b 08		 mov	 ecx, DWORD PTR [eax]
  06e6b	51		 push	 ecx
  06e6c	e8 00 00 00 00	 call	 _P_SPMAngle
  06e71	83 c4 1c	 add	 esp, 28			; 0000001cH
  06e74	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7753 : 
; 7754 : 					player->powers[pw_automaticring]--;

  06e7a	b8 04 00 00 00	 mov	 eax, 4
  06e7f	6b c8 14	 imul	 ecx, eax, 20
  06e82	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06e85	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  06e89	83 e8 01	 sub	 eax, 1
  06e8c	b9 04 00 00 00	 mov	 ecx, 4
  06e91	6b d1 14	 imul	 edx, ecx, 20
  06e94	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  06e97	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 7755 : 					player->mo->health--;

  06e9b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06e9e	8b 08		 mov	 ecx, DWORD PTR [eax]
  06ea0	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  06ea6	83 ea 01	 sub	 edx, 1
  06ea9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06eac	8b 08		 mov	 ecx, DWORD PTR [eax]
  06eae	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 7756 : 					player->health--;

  06eb4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06eb7	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  06eba	83 e9 01	 sub	 ecx, 1
  06ebd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06ec0	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 7757 : 				}

  06ec3	e9 04 04 00 00	 jmp	 $LN709@P_MovePlay
$LN702@P_MovePlay:

; 7758 : 				else if (player->currentweapon == WEP_EXPLODE && player->powers[pw_explosionring])

  06ec8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06ecb	83 78 2c 05	 cmp	 DWORD PTR [eax+44], 5
  06ecf	0f 85 d8 00 00
	00		 jne	 $LN705@P_MovePlay
  06ed5	b8 04 00 00 00	 mov	 eax, 4
  06eda	6b c8 15	 imul	 ecx, eax, 21
  06edd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06ee0	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  06ee5	0f 84 c2 00 00
	00		 je	 $LN705@P_MovePlay

; 7759 : 				{
; 7760 : 					// Exploding
; 7761 : 					player->weapondelay = (TICRATE/4)*3;

  06eeb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06eee	c7 80 70 01 00
	00 18 00 00 00	 mov	 DWORD PTR [eax+368], 24	; 00000018H

; 7762 : 
; 7763 : 					if (player->skin == 2) // Knuckles

  06ef8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06efb	83 b8 b8 00 00
	00 02		 cmp	 DWORD PTR [eax+184], 2
  06f02	75 2e		 jne	 SHORT $LN707@P_MovePlay

; 7764 : 					{
; 7765 : 						player->weapondelay /= 3;

  06f04	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06f07	8b 80 70 01 00
	00		 mov	 eax, DWORD PTR [eax+368]
  06f0d	99		 cdq
  06f0e	b9 03 00 00 00	 mov	 ecx, 3
  06f13	f7 f9		 idiv	 ecx
  06f15	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06f18	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax

; 7766 : 						player->weapondelay *= 2;

  06f1e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06f21	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  06f27	d1 e1		 shl	 ecx, 1
  06f29	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06f2c	89 8a 70 01 00
	00		 mov	 DWORD PTR [edx+368], ecx
$LN707@P_MovePlay:

; 7767 : 					}
; 7768 : 
; 7769 : 					mo = P_SpawnPlayerMissile(player->mo, MT_THROWNEXPLOSION, MF2_EXPLOSION, false);

  06f32	6a 00		 push	 0
  06f34	68 00 00 08 00	 push	 524288			; 00080000H
  06f39	6a 00		 push	 0
  06f3b	6a 00		 push	 0
  06f3d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06f40	8b 08		 mov	 ecx, DWORD PTR [eax]
  06f42	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  06f45	52		 push	 edx
  06f46	68 df 00 00 00	 push	 223			; 000000dfH
  06f4b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06f4e	8b 08		 mov	 ecx, DWORD PTR [eax]
  06f50	51		 push	 ecx
  06f51	e8 00 00 00 00	 call	 _P_SPMAngle
  06f56	83 c4 1c	 add	 esp, 28			; 0000001cH
  06f59	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7770 : 
; 7771 : 					player->powers[pw_explosionring]--;

  06f5f	b8 04 00 00 00	 mov	 eax, 4
  06f64	6b c8 15	 imul	 ecx, eax, 21
  06f67	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06f6a	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  06f6e	83 e8 01	 sub	 eax, 1
  06f71	b9 04 00 00 00	 mov	 ecx, 4
  06f76	6b d1 15	 imul	 edx, ecx, 21
  06f79	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  06f7c	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 7772 : 					player->mo->health--;

  06f80	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06f83	8b 08		 mov	 ecx, DWORD PTR [eax]
  06f85	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  06f8b	83 ea 01	 sub	 edx, 1
  06f8e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06f91	8b 08		 mov	 ecx, DWORD PTR [eax]
  06f93	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 7773 : 					player->health--;

  06f99	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06f9c	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  06f9f	83 e9 01	 sub	 ecx, 1
  06fa2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06fa5	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 7774 : 				}

  06fa8	e9 1f 03 00 00	 jmp	 $LN709@P_MovePlay
$LN705@P_MovePlay:

; 7775 : 				else if (player->currentweapon == WEP_SCATTER && player->powers[pw_scatterring])

  06fad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06fb0	83 78 2c 03	 cmp	 DWORD PTR [eax+44], 3
  06fb4	0f 85 5d 02 00
	00		 jne	 $LN708@P_MovePlay
  06fba	b8 04 00 00 00	 mov	 eax, 4
  06fbf	6b c8 16	 imul	 ecx, eax, 22
  06fc2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  06fc5	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  06fca	0f 84 47 02 00
	00		 je	 $LN708@P_MovePlay

; 7776 : 				{
; 7777 : 					fixed_t oldz;
; 7778 : 					angle_t shotangle = player->mo->angle;

  06fd0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06fd3	8b 08		 mov	 ecx, DWORD PTR [eax]
  06fd5	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  06fd8	89 95 90 fd ff
	ff		 mov	 DWORD PTR _shotangle$24[ebp], edx

; 7779 : 					angle_t oldaiming = player->aiming;

  06fde	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06fe1	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  06fe4	89 8d 8c fd ff
	ff		 mov	 DWORD PTR _oldaiming$23[ebp], ecx

; 7780 : 
; 7781 : 					// Scatter
; 7782 : 
; 7783 : 					player->weapondelay = (TICRATE/3)*2;

  06fea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06fed	c7 80 70 01 00
	00 16 00 00 00	 mov	 DWORD PTR [eax+368], 22	; 00000016H

; 7784 : 
; 7785 : 					if (player->skin == 2) // Knuckles

  06ff7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  06ffa	83 b8 b8 00 00
	00 02		 cmp	 DWORD PTR [eax+184], 2
  07001	75 2e		 jne	 SHORT $LN710@P_MovePlay

; 7786 : 					{
; 7787 : 						player->weapondelay /= 3;

  07003	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07006	8b 80 70 01 00
	00		 mov	 eax, DWORD PTR [eax+368]
  0700c	99		 cdq
  0700d	b9 03 00 00 00	 mov	 ecx, 3
  07012	f7 f9		 idiv	 ecx
  07014	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07017	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax

; 7788 : 						player->weapondelay *= 2;

  0701d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07020	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  07026	d1 e1		 shl	 ecx, 1
  07028	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0702b	89 8a 70 01 00
	00		 mov	 DWORD PTR [edx+368], ecx
$LN710@P_MovePlay:

; 7789 : 					}
; 7790 : 
; 7791 : 					oldz = player->mo->z;

  07031	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07034	8b 08		 mov	 ecx, DWORD PTR [eax]
  07036	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  07039	89 95 94 fd ff
	ff		 mov	 DWORD PTR _oldz$25[ebp], edx

; 7792 : 
; 7793 : 					// Center
; 7794 : 					mo = P_SpawnPlayerMissile(player->mo, MT_THROWNSCATTER, MF2_SCATTER, false);

  0703f	6a 00		 push	 0
  07041	68 00 00 10 00	 push	 1048576			; 00100000H
  07046	6a 00		 push	 0
  07048	6a 00		 push	 0
  0704a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0704d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0704f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  07052	52		 push	 edx
  07053	68 de 00 00 00	 push	 222			; 000000deH
  07058	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0705b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0705d	51		 push	 ecx
  0705e	e8 00 00 00 00	 call	 _P_SPMAngle
  07063	83 c4 1c	 add	 esp, 28			; 0000001cH
  07066	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7795 : 					if (mo)

  0706c	83 bd 98 fd ff
	ff 00		 cmp	 DWORD PTR _mo$26[ebp], 0
  07073	74 34		 je	 SHORT $LN711@P_MovePlay

; 7796 : 					{
; 7797 : 						//P_ColorTeamMissile(mo, player);
; 7798 : 						shotangle = R_PointToAngle2(player->mo->x, player->mo->y, mo->x, mo->y);

  07075	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  0707b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0707e	51		 push	 ecx
  0707f	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _mo$26[ebp]
  07085	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  07088	50		 push	 eax
  07089	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0708c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0708e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  07091	50		 push	 eax
  07092	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  07095	8b 11		 mov	 edx, DWORD PTR [ecx]
  07097	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0709a	50		 push	 eax
  0709b	e8 00 00 00 00	 call	 _R_PointToAngle2
  070a0	83 c4 10	 add	 esp, 16			; 00000010H
  070a3	89 85 90 fd ff
	ff		 mov	 DWORD PTR _shotangle$24[ebp], eax
$LN711@P_MovePlay:

; 7799 : 					}
; 7800 : 
; 7801 : 					// Left
; 7802 : 					mo = P_SPMAngle(player->mo, MT_THROWNSCATTER, shotangle-ANG2, false, true, MF2_SCATTER, false);

  070a9	6a 00		 push	 0
  070ab	68 00 00 10 00	 push	 1048576			; 00100000H
  070b0	6a 01		 push	 1
  070b2	6a 00		 push	 0
  070b4	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _shotangle$24[ebp]
  070ba	2d c1 16 6c 01	 sub	 eax, 23860929		; 016c16c1H
  070bf	50		 push	 eax
  070c0	68 de 00 00 00	 push	 222			; 000000deH
  070c5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  070c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  070ca	52		 push	 edx
  070cb	e8 00 00 00 00	 call	 _P_SPMAngle
  070d0	83 c4 1c	 add	 esp, 28			; 0000001cH
  070d3	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7803 : 					//if (mo)
; 7804 : 						//P_ColorTeamMissile(mo, player);
; 7805 : 
; 7806 : 					// Right
; 7807 : 					mo = P_SPMAngle(player->mo, MT_THROWNSCATTER, shotangle+ANG2, false, true, MF2_SCATTER, false);

  070d9	6a 00		 push	 0
  070db	68 00 00 10 00	 push	 1048576			; 00100000H
  070e0	6a 01		 push	 1
  070e2	6a 00		 push	 0
  070e4	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _shotangle$24[ebp]
  070ea	05 c1 16 6c 01	 add	 eax, 23860929		; 016c16c1H
  070ef	50		 push	 eax
  070f0	68 de 00 00 00	 push	 222			; 000000deH
  070f5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  070f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  070fa	52		 push	 edx
  070fb	e8 00 00 00 00	 call	 _P_SPMAngle
  07100	83 c4 1c	 add	 esp, 28			; 0000001cH
  07103	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7808 : 					//if (mo)
; 7809 : 						//P_ColorTeamMissile(mo, player);
; 7810 : 
; 7811 : 					// Down
; 7812 : 					player->mo->z += 12*FRACUNIT;

  07109	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0710c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0710e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  07111	81 c2 00 00 0c
	00		 add	 edx, 786432		; 000c0000H
  07117	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0711a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0711c	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 7813 : 					player->aiming += ANG1;

  0711f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07122	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  07125	81 c1 61 0b b6
	00		 add	 ecx, 11930465		; 00b60b61H
  0712b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0712e	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 7814 : 					mo = P_SPMAngle(player->mo, MT_THROWNSCATTER, shotangle, false, true, MF2_SCATTER, false);

  07131	6a 00		 push	 0
  07133	68 00 00 10 00	 push	 1048576			; 00100000H
  07138	6a 01		 push	 1
  0713a	6a 00		 push	 0
  0713c	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _shotangle$24[ebp]
  07142	50		 push	 eax
  07143	68 de 00 00 00	 push	 222			; 000000deH
  07148	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0714b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0714d	52		 push	 edx
  0714e	e8 00 00 00 00	 call	 _P_SPMAngle
  07153	83 c4 1c	 add	 esp, 28			; 0000001cH
  07156	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7815 : 					//if (mo)
; 7816 : 						//P_ColorTeamMissile(mo, player);
; 7817 : 
; 7818 : 					// Up
; 7819 : 					player->mo->z -= 24*FRACUNIT;

  0715c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0715f	8b 08		 mov	 ecx, DWORD PTR [eax]
  07161	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  07164	81 ea 00 00 18
	00		 sub	 edx, 1572864		; 00180000H
  0716a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0716d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0716f	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 7820 : 					player->aiming -= ANG2;

  07172	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07175	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  07178	81 e9 c1 16 6c
	01		 sub	 ecx, 23860929		; 016c16c1H
  0717e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07181	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 7821 : 					mo = P_SPMAngle(player->mo, MT_THROWNSCATTER, shotangle, false, true, MF2_SCATTER, false);

  07184	6a 00		 push	 0
  07186	68 00 00 10 00	 push	 1048576			; 00100000H
  0718b	6a 01		 push	 1
  0718d	6a 00		 push	 0
  0718f	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _shotangle$24[ebp]
  07195	50		 push	 eax
  07196	68 de 00 00 00	 push	 222			; 000000deH
  0719b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0719e	8b 11		 mov	 edx, DWORD PTR [ecx]
  071a0	52		 push	 edx
  071a1	e8 00 00 00 00	 call	 _P_SPMAngle
  071a6	83 c4 1c	 add	 esp, 28			; 0000001cH
  071a9	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7822 : 					//if (mo)
; 7823 : 						//P_ColorTeamMissile(mo, player);
; 7824 : 
; 7825 : #ifdef WEAPON_SFX
; 7826 : 					//Due to the fact that the scatter has no unique thrown object, this hack is necessary.
; 7827 : 					S_StartSound(player->mo, sfx_s3k_26);
; 7828 : #endif
; 7829 : 
; 7830 : 					player->mo->z = oldz;

  071af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  071b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  071b4	8b 95 94 fd ff
	ff		 mov	 edx, DWORD PTR _oldz$25[ebp]
  071ba	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 7831 : 					player->aiming = oldaiming;

  071bd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  071c0	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _oldaiming$23[ebp]
  071c6	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 7832 : 
; 7833 : 					player->powers[pw_scatterring]--;

  071c9	b8 04 00 00 00	 mov	 eax, 4
  071ce	6b c8 16	 imul	 ecx, eax, 22
  071d1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  071d4	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  071d8	83 e8 01	 sub	 eax, 1
  071db	b9 04 00 00 00	 mov	 ecx, 4
  071e0	6b d1 16	 imul	 edx, ecx, 22
  071e3	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  071e6	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 7834 : 					player->mo->health--;

  071ea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  071ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  071ef	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  071f5	83 ea 01	 sub	 edx, 1
  071f8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  071fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  071fd	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 7835 : 					player->health--;

  07203	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07206	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  07209	83 e9 01	 sub	 ecx, 1
  0720c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0720f	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 7836 : 				}

  07212	e9 b5 00 00 00	 jmp	 $LN709@P_MovePlay
$LN708@P_MovePlay:

; 7837 : 				else // No powers, just a regular ring.
; 7838 : 				{
; 7839 : 					player->weapondelay = TICRATE/4;

  07217	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0721a	c7 80 70 01 00
	00 08 00 00 00	 mov	 DWORD PTR [eax+368], 8

; 7840 : 
; 7841 : 					if (player->skin == 2) // Knuckles

  07224	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07227	83 b8 b8 00 00
	00 02		 cmp	 DWORD PTR [eax+184], 2
  0722e	75 2e		 jne	 SHORT $LN712@P_MovePlay

; 7842 : 					{
; 7843 : 						player->weapondelay /= 3;

  07230	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07233	8b 80 70 01 00
	00		 mov	 eax, DWORD PTR [eax+368]
  07239	99		 cdq
  0723a	b9 03 00 00 00	 mov	 ecx, 3
  0723f	f7 f9		 idiv	 ecx
  07241	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07244	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax

; 7844 : 						player->weapondelay *= 2;

  0724a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0724d	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  07253	d1 e1		 shl	 ecx, 1
  07255	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07258	89 8a 70 01 00
	00		 mov	 DWORD PTR [edx+368], ecx
$LN712@P_MovePlay:

; 7845 : 					}
; 7846 : 
; 7847 : 					mo = P_SpawnPlayerMissile(player->mo, MT_REDRING, 0, false);

  0725e	6a 00		 push	 0
  07260	6a 00		 push	 0
  07262	6a 00		 push	 0
  07264	6a 00		 push	 0
  07266	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0726b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0726e	52		 push	 edx
  0726f	68 cf 00 00 00	 push	 207			; 000000cfH
  07274	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07277	8b 08		 mov	 ecx, DWORD PTR [eax]
  07279	51		 push	 ecx
  0727a	e8 00 00 00 00	 call	 _P_SPMAngle
  0727f	83 c4 1c	 add	 esp, 28			; 0000001cH
  07282	89 85 98 fd ff
	ff		 mov	 DWORD PTR _mo$26[ebp], eax

; 7848 : 
; 7849 : 					if (mo)

  07288	83 bd 98 fd ff
	ff 00		 cmp	 DWORD PTR _mo$26[ebp], 0
  0728f	74 13		 je	 SHORT $LN713@P_MovePlay

; 7850 : 						P_ColorTeamMissile(mo, player);

  07291	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07294	50		 push	 eax
  07295	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _mo$26[ebp]
  0729b	51		 push	 ecx
  0729c	e8 00 00 00 00	 call	 _P_ColorTeamMissile
  072a1	83 c4 08	 add	 esp, 8
$LN713@P_MovePlay:

; 7851 : 
; 7852 : 					player->mo->health--;

  072a4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  072a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  072a9	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  072af	83 ea 01	 sub	 edx, 1
  072b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  072b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  072b7	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 7853 : 					player->health--;

  072bd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  072c0	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  072c3	83 e9 01	 sub	 ecx, 1
  072c6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  072c9	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$LN709@P_MovePlay:

; 7854 : 				}
; 7855 : 				if (mo)

  072cc	83 bd 98 fd ff
	ff 00		 cmp	 DWORD PTR _mo$26[ebp], 0
  072d3	0f 84 2f 01 00
	00		 je	 $LN719@P_MovePlay

; 7856 : 				{
; 7857 : 					if ((mo->flags & MF_MISSILE) && ((mo->flags2 & MF2_RAILRING)))

  072d9	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  072df	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  072e2	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  072e8	0f 84 ec 00 00
	00		 je	 $LN715@P_MovePlay
  072ee	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  072f4	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  072fa	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  07300	0f 84 d4 00 00
	00		 je	 $LN715@P_MovePlay

; 7858 : 					{
; 7859 : 						const boolean nblockmap = !(mo->flags & MF_NOBLOCKMAP);

  07306	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  0730c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0730f	83 e1 10	 and	 ecx, 16			; 00000010H
  07312	75 0c		 jne	 SHORT $LN822@P_MovePlay
  07314	c7 85 b0 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv5419[ebp], 1
  0731e	eb 0a		 jmp	 SHORT $LN823@P_MovePlay
$LN822@P_MovePlay:
  07320	c7 85 b0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv5419[ebp], 0
$LN823@P_MovePlay:
  0732a	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR tv5419[ebp]
  07330	89 95 88 fd ff
	ff		 mov	 DWORD PTR _nblockmap$22[ebp], edx

; 7860 : 						for (i = 0; i < 256; i++)

  07336	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0733d	eb 09		 jmp	 SHORT $LN89@P_MovePlay
$LN87@P_MovePlay:
  0733f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  07342	83 c0 01	 add	 eax, 1
  07345	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN89@P_MovePlay:
  07348	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0734f	0f 8d 83 00 00
	00		 jge	 $LN88@P_MovePlay

; 7861 : 						{
; 7862 : 							if (nblockmap)

  07355	83 bd 88 fd ff
	ff 00		 cmp	 DWORD PTR _nblockmap$22[ebp], 0
  0735c	74 33		 je	 SHORT $LN717@P_MovePlay

; 7863 : 							{
; 7864 : 								P_UnsetThingPosition(mo);

  0735e	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  07364	50		 push	 eax
  07365	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  0736a	83 c4 04	 add	 esp, 4

; 7865 : 								mo->flags |= MF_NOBLOCKMAP;

  0736d	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  07373	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  07376	83 c9 10	 or	 ecx, 16			; 00000010H
  07379	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _mo$26[ebp]
  0737f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 7866 : 								P_SetThingPosition(mo);

  07382	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  07388	50		 push	 eax
  07389	e8 00 00 00 00	 call	 _P_SetThingPosition
  0738e	83 c4 04	 add	 esp, 4
$LN717@P_MovePlay:

; 7867 : 							}
; 7868 : 
; 7869 : 							if (i&1)

  07391	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  07394	83 e0 01	 and	 eax, 1
  07397	74 2b		 je	 SHORT $LN718@P_MovePlay

; 7870 : 								P_SpawnMobj(mo->x, mo->y, mo->z, MT_SPARK);

  07399	68 0d 01 00 00	 push	 269			; 0000010dH
  0739e	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  073a4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  073a7	51		 push	 ecx
  073a8	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _mo$26[ebp]
  073ae	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  073b1	50		 push	 eax
  073b2	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _mo$26[ebp]
  073b8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  073bb	52		 push	 edx
  073bc	e8 00 00 00 00	 call	 _P_SpawnMobj
  073c1	83 c4 10	 add	 esp, 16			; 00000010H
$LN718@P_MovePlay:

; 7871 : 
; 7872 : 							P_RailThinker(mo);

  073c4	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  073ca	50		 push	 eax
  073cb	e8 00 00 00 00	 call	 _P_RailThinker
  073d0	83 c4 04	 add	 esp, 4

; 7873 : 						}

  073d3	e9 67 ff ff ff	 jmp	 $LN87@P_MovePlay
$LN88@P_MovePlay:

; 7874 : 					}

  073d8	eb 2e		 jmp	 SHORT $LN719@P_MovePlay
$LN715@P_MovePlay:

; 7875 : 					else //All other rings are flipped if fired in reverse gravity.
; 7876 : 					{
; 7877 : 						if (player->mo->eflags & MFE_VERTICALFLIP)

  073da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  073dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  073df	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  073e5	83 e2 20	 and	 edx, 32			; 00000020H
  073e8	74 1e		 je	 SHORT $LN719@P_MovePlay

; 7878 : 							mo->flags2 |= MF2_OBJECTFLIP;

  073ea	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _mo$26[ebp]
  073f0	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  073f6	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  073fc	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _mo$26[ebp]
  07402	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN719@P_MovePlay:

; 7879 : 					}
; 7880 : 				}
; 7881 : 			}
; 7882 : 
; 7883 : 			//Since we adjusted the player's height in reverse gravity, put it back.
; 7884 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  07408	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0740b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0740d	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  07413	83 e2 20	 and	 edx, 32			; 00000020H
  07416	74 16		 je	 SHORT $LN720@P_MovePlay

; 7885 : 				player->mo->z += 8*FRACUNIT;

  07418	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0741b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0741d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  07420	81 c2 00 00 08
	00		 add	 edx, 524288		; 00080000H
  07426	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07429	8b 08		 mov	 ecx, DWORD PTR [eax]
  0742b	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN720@P_MovePlay:

; 7886 : 
; 7887 : 			return;

  0742e	e9 72 13 00 00	 jmp	 $LN109@P_MovePlay
$LN683@P_MovePlay:

; 7888 : 		}
; 7889 : 	}

  07433	e9 98 02 00 00	 jmp	 $LN674@P_MovePlay
$LN673@P_MovePlay:

; 7890 : 	else
; 7891 : 	{
; 7892 : 		if (player->currentweapon == WEP_GRENADE && player->powers[pw_grenadering] && player->tossstrength
; 7893 : 			&& (gametype == GT_MATCH || gametype == GT_CTF || (gametype == GT_TAG && player->pflags & PF_TAGIT) || cv_ringslinger.value)
; 7894 : 			&& player->mo->health > 1 && !player->climbing)

  07438	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0743b	83 78 2c 04	 cmp	 DWORD PTR [eax+44], 4
  0743f	0f 85 6c 02 00
	00		 jne	 $LN729@P_MovePlay
  07445	b8 04 00 00 00	 mov	 eax, 4
  0744a	6b c8 17	 imul	 ecx, eax, 23
  0744d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07450	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  07455	0f 84 56 02 00
	00		 je	 $LN729@P_MovePlay
  0745b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0745e	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  07462	0f 84 49 02 00
	00		 je	 $LN729@P_MovePlay
  07468	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0746f	83 f8 01	 cmp	 eax, 1
  07472	74 36		 je	 SHORT $LN722@P_MovePlay
  07474	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0747b	83 f8 04	 cmp	 eax, 4
  0747e	74 2a		 je	 SHORT $LN722@P_MovePlay
  07480	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  07487	83 f8 03	 cmp	 eax, 3
  0748a	75 11		 jne	 SHORT $LN723@P_MovePlay
  0748c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0748f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07495	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0749b	75 0d		 jne	 SHORT $LN722@P_MovePlay
$LN723@P_MovePlay:
  0749d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_ringslinger+20, 0
  074a4	0f 84 07 02 00
	00		 je	 $LN729@P_MovePlay
$LN722@P_MovePlay:
  074aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  074ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  074af	83 b9 8c 00 00
	00 01		 cmp	 DWORD PTR [ecx+140], 1
  074b6	0f 8e f5 01 00
	00		 jle	 $LN729@P_MovePlay
  074bc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  074bf	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  074c6	0f 85 e5 01 00
	00		 jne	 $LN729@P_MovePlay

; 7895 : 		{
; 7896 : 			mobj_t *mo;
; 7897 : 			angle_t oldaim = player->aiming;

  074cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  074cf	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  074d2	89 8d 80 fd ff
	ff		 mov	 DWORD PTR _oldaim$20[ebp], ecx

; 7898 : 
; 7899 : 			//Just like with jump height, adjust the firing height slightly when in reverse gravity.
; 7900 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  074d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  074db	8b 08		 mov	 ecx, DWORD PTR [eax]
  074dd	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  074e3	83 e2 20	 and	 edx, 32			; 00000020H
  074e6	74 16		 je	 SHORT $LN724@P_MovePlay

; 7901 : 				player->mo->z -= 8*FRACUNIT;

  074e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  074eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  074ed	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  074f0	81 ea 00 00 08
	00		 sub	 edx, 524288		; 00080000H
  074f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  074f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  074fb	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN724@P_MovePlay:

; 7902 : 
; 7903 : 			// Toss the grenade!
; 7904 : 			player->weapondelay = TICRATE;

  074fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07501	c7 80 70 01 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+368], 35	; 00000023H

; 7905 : 
; 7906 : 			if (player->skin == 2) // Knuckles

  0750b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0750e	83 b8 b8 00 00
	00 02		 cmp	 DWORD PTR [eax+184], 2
  07515	75 17		 jne	 SHORT $LN725@P_MovePlay

; 7907 : 				player->weapondelay /= 2;

  07517	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0751a	8b 80 70 01 00
	00		 mov	 eax, DWORD PTR [eax+368]
  07520	99		 cdq
  07521	2b c2		 sub	 eax, edx
  07523	d1 f8		 sar	 eax, 1
  07525	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  07528	89 81 70 01 00
	00		 mov	 DWORD PTR [ecx+368], eax
$LN725@P_MovePlay:

; 7908 : 
; 7909 : 			player->aiming += ANGLE_22h;

  0752e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07531	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  07534	81 c1 00 00 00
	10		 add	 ecx, 268435456		; 10000000H
  0753a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0753d	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 7910 : 
; 7911 : 			if (player->aiming > ANGLE_90-1)

  07540	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07543	81 78 20 ff ff
	ff 3f		 cmp	 DWORD PTR [eax+32], 1073741823 ; 3fffffffH
  0754a	76 0a		 jbe	 SHORT $LN726@P_MovePlay

; 7912 : 				player->aiming = ANGLE_90-1;

  0754c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0754f	c7 40 20 ff ff
	ff 3f		 mov	 DWORD PTR [eax+32], 1073741823 ; 3fffffffH
$LN726@P_MovePlay:

; 7913 : 
; 7914 : 			mo = P_SPMAngle(player->mo, MT_THROWNGRENADE, player->mo->angle, true, true, MF2_GRENADE, false);

  07556	6a 00		 push	 0
  07558	68 00 00 20 00	 push	 2097152			; 00200000H
  0755d	6a 01		 push	 1
  0755f	6a 01		 push	 1
  07561	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07564	8b 08		 mov	 ecx, DWORD PTR [eax]
  07566	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  07569	52		 push	 edx
  0756a	68 e0 00 00 00	 push	 224			; 000000e0H
  0756f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07572	8b 08		 mov	 ecx, DWORD PTR [eax]
  07574	51		 push	 ecx
  07575	e8 00 00 00 00	 call	 _P_SPMAngle
  0757a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0757d	89 85 84 fd ff
	ff		 mov	 DWORD PTR _mo$21[ebp], eax

; 7915 : 
; 7916 : 			player->aiming = oldaim;

  07583	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07586	8b 8d 80 fd ff
	ff		 mov	 ecx, DWORD PTR _oldaim$20[ebp]
  0758c	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 7917 : 
; 7918 : 			if (mo)

  0758f	83 bd 84 fd ff
	ff 00		 cmp	 DWORD PTR _mo$21[ebp], 0
  07596	0f 84 a6 00 00
	00		 je	 $LN727@P_MovePlay

; 7919 : 			{
; 7920 : 				P_InstaThrust(mo, player->mo->angle, player->tossstrength);

  0759c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0759f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  075a2	51		 push	 ecx
  075a3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  075a6	8b 02		 mov	 eax, DWORD PTR [edx]
  075a8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  075ab	51		 push	 ecx
  075ac	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _mo$21[ebp]
  075b2	52		 push	 edx
  075b3	e8 00 00 00 00	 call	 _P_InstaThrust
  075b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7921 : 				mo->momz = player->tossstrength;

  075bb	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _mo$21[ebp]
  075c1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  075c4	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  075c7	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 7922 : 				if (player->mo->eflags & MFE_VERTICALFLIP)

  075ca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  075cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  075cf	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  075d5	83 e2 20	 and	 edx, 32			; 00000020H
  075d8	74 32		 je	 SHORT $LN728@P_MovePlay

; 7923 : 				{
; 7924 : 					mo->flags2 |= MF2_OBJECTFLIP;

  075da	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _mo$21[ebp]
  075e0	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  075e6	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  075ec	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _mo$21[ebp]
  075f2	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 7925 : 					mo->momz = -mo->momz; //Toss "up" not "down."

  075f8	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _mo$21[ebp]
  075fe	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  07601	f7 d9		 neg	 ecx
  07603	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _mo$21[ebp]
  07609	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN728@P_MovePlay:

; 7926 : 				}
; 7927 : 				mo->fuse = mo->info->mass;

  0760c	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _mo$21[ebp]
  07612	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  07618	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _mo$21[ebp]
  0761e	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  07621	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax

; 7928 : 				P_SetTarget(&mo->target, player->mo);

  07627	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0762a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0762c	51		 push	 ecx
  0762d	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _mo$21[ebp]
  07633	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  07639	52		 push	 edx
  0763a	e8 00 00 00 00	 call	 _P_SetTarget
  0763f	83 c4 08	 add	 esp, 8
$LN727@P_MovePlay:

; 7929 : 			}
; 7930 : 
; 7931 : 			player->powers[pw_grenadering]--;

  07642	b8 04 00 00 00	 mov	 eax, 4
  07647	6b c8 17	 imul	 ecx, eax, 23
  0764a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0764d	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  07651	83 e8 01	 sub	 eax, 1
  07654	b9 04 00 00 00	 mov	 ecx, 4
  07659	6b d1 17	 imul	 edx, ecx, 23
  0765c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0765f	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 7932 : 			player->mo->health--;

  07663	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07666	8b 08		 mov	 ecx, DWORD PTR [eax]
  07668	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  0766e	83 ea 01	 sub	 edx, 1
  07671	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07674	8b 08		 mov	 ecx, DWORD PTR [eax]
  07676	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 7933 : 			player->health--;

  0767c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0767f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  07682	83 e9 01	 sub	 ecx, 1
  07685	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07688	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 7934 : 
; 7935 : 			//Since we adjusted the player's height in reverse gravity, put it back.
; 7936 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  0768b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0768e	8b 08		 mov	 ecx, DWORD PTR [eax]
  07690	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  07696	83 e2 20	 and	 edx, 32			; 00000020H
  07699	74 16		 je	 SHORT $LN729@P_MovePlay

; 7937 : 				player->mo->z += 8*FRACUNIT;

  0769b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0769e	8b 08		 mov	 ecx, DWORD PTR [eax]
  076a0	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  076a3	81 c2 00 00 08
	00		 add	 edx, 524288		; 00080000H
  076a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  076ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  076ae	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN729@P_MovePlay:

; 7938 : 		}
; 7939 : 		player->pflags &= ~PF_ATTACKDOWN;

  076b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  076b4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  076ba	83 e1 fd	 and	 ecx, -3			; fffffffdH
  076bd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  076c0	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 7940 : 		player->tossstrength = 0;

  076c6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  076c9	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
$LN674@P_MovePlay:

; 7941 : 	}
; 7942 : 
; 7943 : 	// Less height while spinning. Good for spinning under things...?
; 7944 : 	if ((player->mo->state == &states[player->mo->info->painstate]
; 7945 : 		|| player->mo->state == &states[S_PLAY_SUPERHIT])
; 7946 : 		|| ((player->charability2 == CA2_SPINDASH) && ((player->pflags & PF_SPINNING) || (player->pflags & PF_JUMPED)))
; 7947 : 		|| (player->powers[pw_tailsfly])
; 7948 : 		|| (player->pflags & PF_GLIDING) || (player->charability == CA_FLY

  076d0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  076d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  076d5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  076d8	8b 02		 mov	 eax, DWORD PTR [edx]
  076da	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  076e0	6b 42 1c 1c	 imul	 eax, DWORD PTR [edx+28], 28
  076e4	05 00 00 00 00	 add	 eax, OFFSET _states
  076e9	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  076ec	0f 84 a6 00 00
	00		 je	 $LN732@P_MovePlay
  076f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  076f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  076f7	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  076fc	6b c2 30	 imul	 eax, edx, 48
  076ff	05 00 00 00 00	 add	 eax, OFFSET _states
  07704	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  07707	0f 84 8b 00 00
	00		 je	 $LN732@P_MovePlay
  0770d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07710	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  07717	75 22		 jne	 SHORT $LN733@P_MovePlay
  07719	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0771c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07722	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  07728	75 6e		 jne	 SHORT $LN732@P_MovePlay
  0772a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0772d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07733	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  07739	75 5d		 jne	 SHORT $LN732@P_MovePlay
$LN733@P_MovePlay:
  0773b	b8 04 00 00 00	 mov	 eax, 4
  07740	6b c8 05	 imul	 ecx, eax, 5
  07743	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07746	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0774b	75 4b		 jne	 SHORT $LN732@P_MovePlay
  0774d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07750	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07756	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  0775c	75 3a		 jne	 SHORT $LN732@P_MovePlay
  0775e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07761	83 b8 d8 00 00
	00 01		 cmp	 DWORD PTR [eax+216], 1
  07768	75 44		 jne	 SHORT $LN730@P_MovePlay
  0776a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0776d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0776f	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  07774	6b c2 17	 imul	 eax, edx, 23
  07777	05 00 00 00 00	 add	 eax, OFFSET _states
  0777c	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0777f	72 2d		 jb	 SHORT $LN730@P_MovePlay
  07781	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07784	8b 08		 mov	 ecx, DWORD PTR [eax]
  07786	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0778b	6b c2 1a	 imul	 eax, edx, 26
  0778e	05 00 00 00 00	 add	 eax, OFFSET _states
  07793	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  07796	77 16		 ja	 SHORT $LN730@P_MovePlay
$LN732@P_MovePlay:

; 7949 : 		&& (player->mo->state >= &states[S_PLAY_SPC1]
; 7950 : 		&& player->mo->state <= &states[S_PLAY_SPC4])))
; 7951 : 	{
; 7952 : 		player->mo->height = P_GetPlayerSpinHeight(player);

  07798	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0779b	50		 push	 eax
  0779c	e8 00 00 00 00	 call	 _P_GetPlayerSpinHeight
  077a1	83 c4 04	 add	 esp, 4
  077a4	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  077a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  077a9	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 7953 : 	}

  077ac	eb 14		 jmp	 SHORT $LN731@P_MovePlay
$LN730@P_MovePlay:

; 7954 : 	else
; 7955 : 		player->mo->height = P_GetPlayerHeight(player);

  077ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  077b1	50		 push	 eax
  077b2	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  077b7	83 c4 04	 add	 esp, 4
  077ba	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  077bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  077bf	89 42 44	 mov	 DWORD PTR [edx+68], eax
$LN731@P_MovePlay:

; 7956 : 
; 7957 : 	// Crush test...
; 7958 : 	if ((player->mo->ceilingz - player->mo->floorz < player->mo->height)
; 7959 : 		&& !(player->mo->flags & MF_NOCLIP))

  077c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  077c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  077c7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  077ca	8b 02		 mov	 eax, DWORD PTR [edx]
  077cc	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  077cf	2b 48 38	 sub	 ecx, DWORD PTR [eax+56]
  077d2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  077d5	8b 02		 mov	 eax, DWORD PTR [edx]
  077d7	3b 48 44	 cmp	 ecx, DWORD PTR [eax+68]
  077da	0f 8d 2e 01 00
	00		 jge	 $LN741@P_MovePlay
  077e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  077e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  077e5	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  077e8	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  077ee	0f 85 1a 01 00
	00		 jne	 $LN741@P_MovePlay

; 7960 : 	{
; 7961 : 		if ((player->charability2 == CA2_SPINDASH) && !(player->pflags & PF_SPINNING))

  077f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  077f7	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  077fe	75 4a		 jne	 SHORT $LN735@P_MovePlay
  07800	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07803	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07809	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0780f	75 39		 jne	 SHORT $LN735@P_MovePlay

; 7962 : 		{
; 7963 : 			P_ResetScore(player);

  07811	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07814	50		 push	 eax
  07815	e8 00 00 00 00	 call	 _P_ResetScore
  0781a	83 c4 04	 add	 esp, 4

; 7964 : 			player->pflags |= PF_SPINNING;

  0781d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07820	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07826	81 c9 00 20 00
	00		 or	 ecx, 8192		; 00002000H
  0782c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0782f	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 7965 : 			P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  07835	6a 0c		 push	 12			; 0000000cH
  07837	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0783a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0783c	51		 push	 ecx
  0783d	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  07842	83 c4 08	 add	 esp, 8

; 7966 : 		}

  07845	e9 c4 00 00 00	 jmp	 $LN741@P_MovePlay
$LN735@P_MovePlay:

; 7967 : 		else if (player->mo->ceilingz - player->mo->floorz < player->mo->height)

  0784a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0784d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0784f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07852	8b 02		 mov	 eax, DWORD PTR [edx]
  07854	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  07857	2b 48 38	 sub	 ecx, DWORD PTR [eax+56]
  0785a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0785d	8b 02		 mov	 eax, DWORD PTR [edx]
  0785f	3b 48 44	 cmp	 ecx, DWORD PTR [eax+68]
  07862	0f 8d a6 00 00
	00		 jge	 $LN741@P_MovePlay

; 7968 : 		{
; 7969 : 			if ((netgame || multiplayer) && player->spectator)

  07868	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0786f	75 09		 jne	 SHORT $LN740@P_MovePlay
  07871	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  07878	74 27		 je	 SHORT $LN738@P_MovePlay
$LN740@P_MovePlay:
  0787a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0787d	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  07884	85 c9		 test	 ecx, ecx
  07886	74 19		 je	 SHORT $LN738@P_MovePlay

; 7970 : 				P_DamageMobj(player->mo, NULL, NULL, 42000); // Respawn crushed spectators

  07888	68 10 a4 00 00	 push	 42000			; 0000a410H
  0788d	6a 00		 push	 0
  0788f	6a 00		 push	 0
  07891	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07894	8b 08		 mov	 ecx, DWORD PTR [eax]
  07896	51		 push	 ecx
  07897	e8 00 00 00 00	 call	 _P_DamageMobj
  0789c	83 c4 10	 add	 esp, 16			; 00000010H
  0789f	eb 5f		 jmp	 SHORT $LN739@P_MovePlay
$LN738@P_MovePlay:

; 7971 : 			else
; 7972 : 			{
; 7973 : 				mobj_t *killer;
; 7974 : 
; 7975 : 				killer = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z, MT_DISS);

  078a1	68 05 01 00 00	 push	 261			; 00000105H
  078a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  078a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  078ab	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  078ae	52		 push	 edx
  078af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  078b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  078b4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  078b7	52		 push	 edx
  078b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  078bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  078bd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  078c0	52		 push	 edx
  078c1	e8 00 00 00 00	 call	 _P_SpawnMobj
  078c6	83 c4 10	 add	 esp, 16			; 00000010H
  078c9	89 85 7c fd ff
	ff		 mov	 DWORD PTR _killer$19[ebp], eax

; 7976 : 				killer->threshold = 44; // Special flag that it was crushing which killed you.

  078cf	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _killer$19[ebp]
  078d5	c7 80 a0 00 00
	00 2c 00 00 00	 mov	 DWORD PTR [eax+160], 44	; 0000002cH

; 7977 : 
; 7978 : 				P_DamageMobj(player->mo, killer, killer, 10000);

  078df	68 10 27 00 00	 push	 10000			; 00002710H
  078e4	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _killer$19[ebp]
  078ea	50		 push	 eax
  078eb	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR _killer$19[ebp]
  078f1	51		 push	 ecx
  078f2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  078f5	8b 02		 mov	 eax, DWORD PTR [edx]
  078f7	50		 push	 eax
  078f8	e8 00 00 00 00	 call	 _P_DamageMobj
  078fd	83 c4 10	 add	 esp, 16			; 00000010H
$LN739@P_MovePlay:

; 7979 : 			}
; 7980 : 
; 7981 : 			if (player->playerstate == PST_DEAD)

  07900	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07903	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  07907	75 05		 jne	 SHORT $LN741@P_MovePlay

; 7982 : 				return;

  07909	e9 97 0e 00 00	 jmp	 $LN109@P_MovePlay
$LN741@P_MovePlay:

; 7983 : 		}
; 7984 : 	}
; 7985 : 
; 7986 : 	// Check for taunt button
; 7987 : 	if ((netgame || multiplayer) && (cmd->buttons & BT_TAUNT) && !player->taunttimer)

  0790e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  07915	75 09		 jne	 SHORT $LN743@P_MovePlay
  07917	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0791e	74 36		 je	 SHORT $LN742@P_MovePlay
$LN743@P_MovePlay:
  07920	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  07923	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  07927	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  0792d	74 27		 je	 SHORT $LN742@P_MovePlay
  0792f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07932	83 b8 7c 01 00
	00 00		 cmp	 DWORD PTR [eax+380], 0
  07939	75 1b		 jne	 SHORT $LN742@P_MovePlay

; 7988 : 	{
; 7989 : 		P_PlayTauntSound(player->mo);

  0793b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0793e	8b 08		 mov	 ecx, DWORD PTR [eax]
  07940	51		 push	 ecx
  07941	e8 00 00 00 00	 call	 _P_PlayTauntSound
  07946	83 c4 04	 add	 esp, 4

; 7990 : 		player->taunttimer = 3*TICRATE; // Don't you just hate people who hammer the taunt key?

  07949	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0794c	c7 80 7c 01 00
	00 69 00 00 00	 mov	 DWORD PTR [eax+380], 105 ; 00000069H
$LN742@P_MovePlay:

; 7991 : 	}
; 7992 : 
; 7993 : #ifdef HWRENDER
; 7994 : 	if (rendermode != render_soft && rendermode != render_none && cv_grfovchange.value)

  07956	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0795d	0f 84 e1 00 00
	00		 je	 $LN744@P_MovePlay
  07963	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  0796a	0f 84 d4 00 00
	00		 je	 $LN744@P_MovePlay
  07970	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_grfovchange+20, 0
  07977	0f 84 c7 00 00
	00		 je	 $LN744@P_MovePlay

; 7995 : 	{
; 7996 : 		fixed_t speed;
; 7997 : 		const fixed_t runnyspeed = 20*FRACUNIT;

  0797d	c7 85 74 fd ff
	ff 00 00 14 00	 mov	 DWORD PTR _runnyspeed$17[ebp], 1310720 ; 00140000H

; 7998 : 
; 7999 : 		speed = R_PointToDist2(player->mo->x + player->rmomx, player->mo->y + player->rmomy, player->mo->x, player->mo->y);

  07987	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0798a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0798c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0798f	52		 push	 edx
  07990	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07993	8b 08		 mov	 ecx, DWORD PTR [eax]
  07995	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  07998	52		 push	 edx
  07999	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0799c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0799e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  079a1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  079a4	03 90 48 01 00
	00		 add	 edx, DWORD PTR [eax+328]
  079aa	52		 push	 edx
  079ab	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  079ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  079b0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  079b3	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  079b6	03 81 44 01 00
	00		 add	 eax, DWORD PTR [ecx+324]
  079bc	50		 push	 eax
  079bd	e8 00 00 00 00	 call	 _R_PointToDist2
  079c2	83 c4 10	 add	 esp, 16			; 00000010H
  079c5	89 85 78 fd ff
	ff		 mov	 DWORD PTR _speed$18[ebp], eax

; 8000 : 
; 8001 : 		if (speed > (player->normalspeed-5)*FRACUNIT)

  079cb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  079ce	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  079d4	83 e9 05	 sub	 ecx, 5
  079d7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  079da	39 8d 78 fd ff
	ff		 cmp	 DWORD PTR _speed$18[ebp], ecx
  079e0	7e 15		 jle	 SHORT $LN746@P_MovePlay

; 8002 : 			speed = (player->normalspeed-5)*FRACUNIT;

  079e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  079e5	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  079eb	83 e9 05	 sub	 ecx, 5
  079ee	c1 e1 10	 shl	 ecx, 16			; 00000010H
  079f1	89 8d 78 fd ff
	ff		 mov	 DWORD PTR _speed$18[ebp], ecx
$LN746@P_MovePlay:

; 8003 : 
; 8004 : 		if (speed >= runnyspeed)

  079f7	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR _speed$18[ebp]
  079fd	3b 85 74 fd ff
	ff		 cmp	 eax, DWORD PTR _runnyspeed$17[ebp]
  07a03	7c 17		 jl	 SHORT $LN747@P_MovePlay

; 8005 : 			player->fovadd = speed-runnyspeed;

  07a05	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR _speed$18[ebp]
  07a0b	2b 85 74 fd ff
	ff		 sub	 eax, DWORD PTR _runnyspeed$17[ebp]
  07a11	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  07a14	89 81 f8 01 00
	00		 mov	 DWORD PTR [ecx+504], eax
  07a1a	eb 0d		 jmp	 SHORT $LN748@P_MovePlay
$LN747@P_MovePlay:

; 8006 : 		else
; 8007 : 			player->fovadd = 0*FRACUNIT;

  07a1c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07a1f	c7 80 f8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+504], 0
$LN748@P_MovePlay:

; 8008 : 
; 8009 : 		if (player->fovadd < 0*FRACUNIT)

  07a29	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07a2c	83 b8 f8 01 00
	00 00		 cmp	 DWORD PTR [eax+504], 0
  07a33	7d 0d		 jge	 SHORT $LN749@P_MovePlay

; 8010 : 			player->fovadd = 0*FRACUNIT;

  07a35	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07a38	c7 80 f8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+504], 0
$LN749@P_MovePlay:

; 8011 : 	}

  07a42	eb 0d		 jmp	 SHORT $blockchecking$830
$LN744@P_MovePlay:

; 8012 : 	else
; 8013 : 		player->fovadd = 0*FRACUNIT;

  07a44	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07a47	c7 80 f8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+504], 0
$blockchecking$830:

; 8014 : #endif
; 8015 : 
; 8016 : #ifdef FLOORSPLATS
; 8017 : 	if (cv_shadow.value && rendermode == render_soft)
; 8018 : 		R_AddFloorSplat(player->mo->subsector, player->mo, "SHADOW", player->mo->x,
; 8019 : 			player->mo->y, player->mo->floorz, SPLATDRAWMODE_OPAQUE);
; 8020 : #endif
; 8021 : 
; 8022 : blockchecking:
; 8023 : 
; 8024 : 	// Look for blocks to bust up
; 8025 : 	// Because of FF_SHATTER, we should look for blocks constantly,
; 8026 : 	// not just when spinning or playing as Knuckles
; 8027 : 	if (CheckForBustableBlocks && !((netgame || multiplayer) && player->spectator))

  07a51	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CheckForBustableBlocks, 0
  07a58	0f 84 46 04 00
	00		 je	 $LN750@P_MovePlay
  07a5e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  07a65	75 09		 jne	 SHORT $LN752@P_MovePlay
  07a67	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  07a6e	74 12		 je	 SHORT $LN751@P_MovePlay
$LN752@P_MovePlay:
  07a70	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07a73	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  07a7a	85 c9		 test	 ecx, ecx
  07a7c	0f 85 22 04 00
	00		 jne	 $LN750@P_MovePlay
$LN751@P_MovePlay:

; 8028 : 	{
; 8029 : 		fixed_t oldx;
; 8030 : 		fixed_t oldy;
; 8031 : 		//boolean spinonfloor = (player->mo->z == player->mo->floorz);
; 8032 : 
; 8033 : 		oldx = player->mo->x;

  07a82	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07a85	8b 08		 mov	 ecx, DWORD PTR [eax]
  07a87	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  07a8a	89 95 70 fd ff
	ff		 mov	 DWORD PTR _oldx$16[ebp], edx

; 8034 : 		oldy = player->mo->y;

  07a90	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07a93	8b 08		 mov	 ecx, DWORD PTR [eax]
  07a95	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  07a98	89 95 6c fd ff
	ff		 mov	 DWORD PTR _oldy$15[ebp], edx

; 8035 : 
; 8036 : 		P_UnsetThingPosition(player->mo);

  07a9e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07aa1	8b 08		 mov	 ecx, DWORD PTR [eax]
  07aa3	51		 push	 ecx
  07aa4	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  07aa9	83 c4 04	 add	 esp, 4

; 8037 : 		player->mo->x += player->mo->momx;

  07aac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07aaf	8b 08		 mov	 ecx, DWORD PTR [eax]
  07ab1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07ab4	8b 02		 mov	 eax, DWORD PTR [edx]
  07ab6	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  07ab9	03 48 48	 add	 ecx, DWORD PTR [eax+72]
  07abc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07abf	8b 02		 mov	 eax, DWORD PTR [edx]
  07ac1	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 8038 : 		player->mo->y += player->mo->momy;

  07ac4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07ac7	8b 08		 mov	 ecx, DWORD PTR [eax]
  07ac9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07acc	8b 02		 mov	 eax, DWORD PTR [edx]
  07ace	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  07ad1	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  07ad4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07ad7	8b 02		 mov	 eax, DWORD PTR [edx]
  07ad9	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 8039 : 		P_SetThingPosition(player->mo);

  07adc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07adf	8b 08		 mov	 ecx, DWORD PTR [eax]
  07ae1	51		 push	 ecx
  07ae2	e8 00 00 00 00	 call	 _P_SetThingPosition
  07ae7	83 c4 04	 add	 esp, 4

; 8040 : 
; 8041 : 		for (node = player->mo->touching_sectorlist; node; node = node->m_snext)

  07aea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07aed	8b 08		 mov	 ecx, DWORD PTR [eax]
  07aef	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  07af2	89 55 e4	 mov	 DWORD PTR _node$[ebp], edx
  07af5	eb 09		 jmp	 SHORT $LN92@P_MovePlay
$LN90@P_MovePlay:
  07af7	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07afa	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  07afd	89 4d e4	 mov	 DWORD PTR _node$[ebp], ecx
$LN92@P_MovePlay:
  07b00	83 7d e4 00	 cmp	 DWORD PTR _node$[ebp], 0
  07b04	0f 84 62 03 00
	00		 je	 $bustupdone$831

; 8042 : 		{
; 8043 : 			if (!node->m_sector)

  07b0a	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07b0d	83 38 00	 cmp	 DWORD PTR [eax], 0
  07b10	75 05		 jne	 SHORT $LN753@P_MovePlay

; 8044 : 				break;

  07b12	e9 55 03 00 00	 jmp	 $bustupdone$831
$LN753@P_MovePlay:

; 8045 : 
; 8046 : 			if (node->m_sector->ffloors)

  07b17	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07b1a	8b 08		 mov	 ecx, DWORD PTR [eax]
  07b1c	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  07b23	0f 84 3e 03 00
	00		 je	 $LN94@P_MovePlay

; 8047 : 			{
; 8048 : 				ffloor_t *rover;
; 8049 : 
; 8050 : 				for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  07b29	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07b2c	8b 08		 mov	 ecx, DWORD PTR [eax]
  07b2e	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  07b34	89 95 68 fd ff
	ff		 mov	 DWORD PTR _rover$14[ebp], edx
  07b3a	eb 0f		 jmp	 SHORT $LN95@P_MovePlay
$LN93@P_MovePlay:
  07b3c	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07b42	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  07b45	89 8d 68 fd ff
	ff		 mov	 DWORD PTR _rover$14[ebp], ecx
$LN95@P_MovePlay:
  07b4b	83 bd 68 fd ff
	ff 00		 cmp	 DWORD PTR _rover$14[ebp], 0
  07b52	0f 84 0f 03 00
	00		 je	 $LN94@P_MovePlay

; 8051 : 				{
; 8052 : 					if (!(rover->flags & FF_EXISTS)) continue;

  07b58	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07b5e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07b61	83 e1 01	 and	 ecx, 1
  07b64	75 02		 jne	 SHORT $LN755@P_MovePlay
  07b66	eb d4		 jmp	 SHORT $LN93@P_MovePlay
$LN755@P_MovePlay:

; 8053 : 
; 8054 : 					if ((rover->flags & FF_BUSTUP)/* && !rover->master->frontsector->crumblestate*/)

  07b68	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07b6e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07b71	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  07b77	0f 84 e5 02 00
	00		 je	 $LN756@P_MovePlay

; 8055 : 					{
; 8056 : 						// If it's an FF_SPINBUST, you have to either be jumping, or coming down
; 8057 : 						// onto the top from a spin.
; 8058 : 						if (rover->flags & FF_SPINBUST && ((!(player->pflags & PF_JUMPED) && !(player->pflags & PF_SPINNING)) || (player->pflags & PF_STARTDASH)))

  07b7d	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07b83	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07b86	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  07b8c	74 38		 je	 SHORT $LN757@P_MovePlay
  07b8e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07b91	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07b97	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  07b9d	75 11		 jne	 SHORT $LN759@P_MovePlay
  07b9f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07ba2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07ba8	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  07bae	74 11		 je	 SHORT $LN758@P_MovePlay
$LN759@P_MovePlay:
  07bb0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07bb3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07bb9	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  07bbf	74 05		 je	 SHORT $LN757@P_MovePlay
$LN758@P_MovePlay:

; 8059 : 							continue;

  07bc1	e9 76 ff ff ff	 jmp	 $LN93@P_MovePlay
$LN757@P_MovePlay:

; 8060 : 
; 8061 : 						// if it's not an FF_SHATTER, you must be spinning
; 8062 : 						// or have Knuckles's abilities (or Super Sonic)
; 8063 : 						// ...or are drilling in NiGHTS.
; 8064 : 						if (!(rover->flags & FF_SHATTER) && !(rover->flags & FF_SPINBUST)
; 8065 : 							&& !((player->pflags & PF_SPINNING)/* && spinonfloor*/)
; 8066 : 							&& (player->charability != CA_GLIDEANDCLIMB && !player->powers[pw_super])
; 8067 : 							&& !(player->pflags & PF_DRILLING))

  07bc6	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07bcc	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07bcf	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  07bd5	75 56		 jne	 SHORT $LN760@P_MovePlay
  07bd7	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07bdd	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07be0	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  07be6	75 45		 jne	 SHORT $LN760@P_MovePlay
  07be8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07beb	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07bf1	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  07bf7	75 34		 jne	 SHORT $LN760@P_MovePlay
  07bf9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07bfc	83 b8 d8 00 00
	00 02		 cmp	 DWORD PTR [eax+216], 2
  07c03	74 28		 je	 SHORT $LN760@P_MovePlay
  07c05	b8 04 00 00 00	 mov	 eax, 4
  07c0a	6b c8 0f	 imul	 ecx, eax, 15
  07c0d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07c10	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  07c15	75 16		 jne	 SHORT $LN760@P_MovePlay
  07c17	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07c1a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07c20	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  07c26	75 05		 jne	 SHORT $LN760@P_MovePlay

; 8068 : 							continue;

  07c28	e9 0f ff ff ff	 jmp	 $LN93@P_MovePlay
$LN760@P_MovePlay:

; 8069 : 
; 8070 : 						// Only Knuckles can break this rock...
; 8071 : 						if (!(rover->flags & FF_SHATTER) && (rover->flags & FF_ONLYKNUX) && !(player->charability == CA_GLIDEANDCLIMB))

  07c2d	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07c33	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07c36	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  07c3c	75 22		 jne	 SHORT $LN761@P_MovePlay
  07c3e	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07c44	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07c47	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  07c4d	74 11		 je	 SHORT $LN761@P_MovePlay
  07c4f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07c52	83 b8 d8 00 00
	00 02		 cmp	 DWORD PTR [eax+216], 2
  07c59	74 05		 je	 SHORT $LN761@P_MovePlay

; 8072 : 							continue;

  07c5b	e9 dc fe ff ff	 jmp	 $LN93@P_MovePlay
$LN761@P_MovePlay:

; 8073 : 
; 8074 : 						// Height checks
; 8075 : 						if (rover->flags & FF_SHATTERBOTTOM)

  07c60	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07c66	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07c69	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  07c6f	74 51		 je	 SHORT $LN762@P_MovePlay

; 8076 : 						{
; 8077 : 							if (player->mo->z+player->mo->momz + player->mo->height < *rover->bottomheight)

  07c71	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07c74	8b 08		 mov	 ecx, DWORD PTR [eax]
  07c76	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07c79	8b 02		 mov	 eax, DWORD PTR [edx]
  07c7b	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07c7e	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  07c81	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07c84	8b 02		 mov	 eax, DWORD PTR [edx]
  07c86	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  07c89	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07c8f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  07c92	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07c94	7d 05		 jge	 SHORT $LN764@P_MovePlay

; 8078 : 								continue;

  07c96	e9 a1 fe ff ff	 jmp	 $LN93@P_MovePlay
$LN764@P_MovePlay:

; 8079 : 
; 8080 : 							if (player->mo->z+player->mo->height > *rover->bottomheight)

  07c9b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07c9e	8b 08		 mov	 ecx, DWORD PTR [eax]
  07ca0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07ca3	8b 02		 mov	 eax, DWORD PTR [edx]
  07ca5	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07ca8	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  07cab	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07cb1	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  07cb4	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07cb6	7e 05		 jle	 SHORT $LN765@P_MovePlay

; 8081 : 								continue;

  07cb8	e9 7f fe ff ff	 jmp	 $LN93@P_MovePlay
$LN765@P_MovePlay:

; 8082 : 						}

  07cbd	e9 f2 00 00 00	 jmp	 $LN775@P_MovePlay
$LN762@P_MovePlay:

; 8083 : 						else if (rover->flags & FF_SPINBUST)

  07cc2	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07cc8	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07ccb	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  07cd1	74 48		 je	 SHORT $LN766@P_MovePlay

; 8084 : 						{
; 8085 : 							if (player->mo->z+player->mo->momz > *rover->topheight)

  07cd3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07cd6	8b 08		 mov	 ecx, DWORD PTR [eax]
  07cd8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07cdb	8b 02		 mov	 eax, DWORD PTR [edx]
  07cdd	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07ce0	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  07ce3	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07ce9	8b 02		 mov	 eax, DWORD PTR [edx]
  07ceb	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07ced	7e 05		 jle	 SHORT $LN768@P_MovePlay

; 8086 : 								continue;

  07cef	e9 48 fe ff ff	 jmp	 $LN93@P_MovePlay
$LN768@P_MovePlay:

; 8087 : 
; 8088 : 							if (player->mo->z + player->mo->height < *rover->bottomheight)

  07cf4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07cf7	8b 08		 mov	 ecx, DWORD PTR [eax]
  07cf9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07cfc	8b 02		 mov	 eax, DWORD PTR [edx]
  07cfe	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07d01	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  07d04	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07d0a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  07d0d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07d0f	7d 05		 jge	 SHORT $LN769@P_MovePlay

; 8089 : 								continue;

  07d11	e9 26 fe ff ff	 jmp	 $LN93@P_MovePlay
$LN769@P_MovePlay:

; 8090 : 						}

  07d16	e9 99 00 00 00	 jmp	 $LN775@P_MovePlay
$LN766@P_MovePlay:

; 8091 : 						else if (rover->flags & FF_SHATTER)

  07d1b	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07d21	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07d24	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  07d2a	74 4d		 je	 SHORT $LN770@P_MovePlay

; 8092 : 						{
; 8093 : 							if (player->mo->z + player->mo->momz > *rover->topheight)

  07d2c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07d2f	8b 08		 mov	 ecx, DWORD PTR [eax]
  07d31	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07d34	8b 02		 mov	 eax, DWORD PTR [edx]
  07d36	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07d39	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  07d3c	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07d42	8b 02		 mov	 eax, DWORD PTR [edx]
  07d44	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07d46	7e 05		 jle	 SHORT $LN772@P_MovePlay

; 8094 : 								continue;

  07d48	e9 ef fd ff ff	 jmp	 $LN93@P_MovePlay
$LN772@P_MovePlay:

; 8095 : 
; 8096 : 							if (player->mo->z+player->mo->momz + player->mo->height < *rover->bottomheight)

  07d4d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07d50	8b 08		 mov	 ecx, DWORD PTR [eax]
  07d52	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07d55	8b 02		 mov	 eax, DWORD PTR [edx]
  07d57	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07d5a	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  07d5d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07d60	8b 02		 mov	 eax, DWORD PTR [edx]
  07d62	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  07d65	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07d6b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  07d6e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07d70	7d 05		 jge	 SHORT $LN773@P_MovePlay

; 8097 : 								continue;

  07d72	e9 c5 fd ff ff	 jmp	 $LN93@P_MovePlay
$LN773@P_MovePlay:

; 8098 : 						}

  07d77	eb 3b		 jmp	 SHORT $LN775@P_MovePlay
$LN770@P_MovePlay:

; 8099 : 						else
; 8100 : 						{
; 8101 : 							if (player->mo->z >= *rover->topheight)

  07d79	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07d7c	8b 08		 mov	 ecx, DWORD PTR [eax]
  07d7e	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07d84	8b 02		 mov	 eax, DWORD PTR [edx]
  07d86	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07d89	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07d8b	7c 05		 jl	 SHORT $LN774@P_MovePlay

; 8102 : 								continue;

  07d8d	e9 aa fd ff ff	 jmp	 $LN93@P_MovePlay
$LN774@P_MovePlay:

; 8103 : 
; 8104 : 							if (player->mo->z + player->mo->height < *rover->bottomheight)

  07d92	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07d95	8b 08		 mov	 ecx, DWORD PTR [eax]
  07d97	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07d9a	8b 02		 mov	 eax, DWORD PTR [edx]
  07d9c	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07d9f	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  07da2	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07da8	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  07dab	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07dad	7d 05		 jge	 SHORT $LN775@P_MovePlay

; 8105 : 								continue;

  07daf	e9 88 fd ff ff	 jmp	 $LN93@P_MovePlay
$LN775@P_MovePlay:

; 8106 : 						}
; 8107 : 
; 8108 : 						// Impede the player's fall a bit
; 8109 : 						if (((rover->flags & FF_SPINBUST) || (rover->flags & FF_SHATTER)) && player->mo->z >= *rover->topheight)

  07db4	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07dba	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07dbd	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  07dc3	75 11		 jne	 SHORT $LN777@P_MovePlay
  07dc5	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07dcb	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07dce	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  07dd4	74 26		 je	 SHORT $LN776@P_MovePlay
$LN777@P_MovePlay:
  07dd6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07dd9	8b 08		 mov	 ecx, DWORD PTR [eax]
  07ddb	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _rover$14[ebp]
  07de1	8b 02		 mov	 eax, DWORD PTR [edx]
  07de3	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  07de6	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07de8	7c 12		 jl	 SHORT $LN776@P_MovePlay

; 8110 : 							player->mo->momz >>= 1;

  07dea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07ded	8b 08		 mov	 ecx, DWORD PTR [eax]
  07def	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  07df2	d1 fa		 sar	 edx, 1
  07df4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07df7	8b 08		 mov	 ecx, DWORD PTR [eax]
  07df9	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN776@P_MovePlay:

; 8111 : 
; 8112 : 						EV_CrumbleChain(node->m_sector, rover);

  07dfc	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07e02	50		 push	 eax
  07e03	8b 4d e4	 mov	 ecx, DWORD PTR _node$[ebp]
  07e06	8b 11		 mov	 edx, DWORD PTR [ecx]
  07e08	52		 push	 edx
  07e09	e8 00 00 00 00	 call	 _EV_CrumbleChain
  07e0e	83 c4 08	 add	 esp, 8

; 8113 : 
; 8114 : 						// Run a linedef executor??
; 8115 : 						if (rover->master->flags & ML_EFFECT5)

  07e11	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _rover$14[ebp]
  07e17	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  07e1a	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  07e1e	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  07e24	74 3a		 je	 SHORT $LN778@P_MovePlay

; 8116 : 							P_LinedefExecute(P_AproxDistance(rover->master->dx, rover->master->dy)>>FRACBITS, player->mo, node->m_sector);

  07e26	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07e29	8b 08		 mov	 ecx, DWORD PTR [eax]
  07e2b	51		 push	 ecx
  07e2c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07e2f	8b 02		 mov	 eax, DWORD PTR [edx]
  07e31	50		 push	 eax
  07e32	8b 8d 68 fd ff
	ff		 mov	 ecx, DWORD PTR _rover$14[ebp]
  07e38	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  07e3b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  07e3e	50		 push	 eax
  07e3f	8b 8d 68 fd ff
	ff		 mov	 ecx, DWORD PTR _rover$14[ebp]
  07e45	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  07e48	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  07e4b	50		 push	 eax
  07e4c	e8 00 00 00 00	 call	 _P_AproxDistance
  07e51	83 c4 08	 add	 esp, 8
  07e54	c1 f8 10	 sar	 eax, 16			; 00000010H
  07e57	50		 push	 eax
  07e58	e8 00 00 00 00	 call	 _P_LinedefExecute
  07e5d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN778@P_MovePlay:

; 8117 : 
; 8118 : 						goto bustupdone;

  07e60	eb 0a		 jmp	 SHORT $bustupdone$831
$LN756@P_MovePlay:

; 8119 : 					}
; 8120 : 				}

  07e62	e9 d5 fc ff ff	 jmp	 $LN93@P_MovePlay
$LN94@P_MovePlay:

; 8121 : 			}
; 8122 : 		}

  07e67	e9 8b fc ff ff	 jmp	 $LN90@P_MovePlay
$bustupdone$831:

; 8123 : bustupdone:
; 8124 : 		P_UnsetThingPosition(player->mo);

  07e6c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07e6f	8b 08		 mov	 ecx, DWORD PTR [eax]
  07e71	51		 push	 ecx
  07e72	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  07e77	83 c4 04	 add	 esp, 4

; 8125 : 		player->mo->x = oldx;

  07e7a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07e7d	8b 08		 mov	 ecx, DWORD PTR [eax]
  07e7f	8b 95 70 fd ff
	ff		 mov	 edx, DWORD PTR _oldx$16[ebp]
  07e85	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 8126 : 		player->mo->y = oldy;

  07e88	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07e8b	8b 08		 mov	 ecx, DWORD PTR [eax]
  07e8d	8b 95 6c fd ff
	ff		 mov	 edx, DWORD PTR _oldy$15[ebp]
  07e93	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 8127 : 		P_SetThingPosition(player->mo);

  07e96	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07e99	8b 08		 mov	 ecx, DWORD PTR [eax]
  07e9b	51		 push	 ecx
  07e9c	e8 00 00 00 00	 call	 _P_SetThingPosition
  07ea1	83 c4 04	 add	 esp, 4
$LN750@P_MovePlay:

; 8128 : 	}
; 8129 : 
; 8130 : 	// Special handling for
; 8131 : 	// gliding in 2D mode
; 8132 : 	if ((twodlevel || (player->mo->flags2 & MF2_TWOD)) && (player->pflags & PF_GLIDING) && player->charability == CA_GLIDEANDCLIMB
; 8133 : 		&& !(player->mo->flags & MF_NOCLIP))

  07ea4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  07eab	25 00 02 00 00	 and	 eax, 512		; 00000200H
  07eb0	75 17		 jne	 SHORT $LN780@P_MovePlay
  07eb2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07eb5	8b 08		 mov	 ecx, DWORD PTR [eax]
  07eb7	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  07ebd	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  07ec3	0f 84 68 02 00
	00		 je	 $LN779@P_MovePlay
$LN780@P_MovePlay:
  07ec9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07ecc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  07ed2	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  07ed8	0f 84 53 02 00
	00		 je	 $LN779@P_MovePlay
  07ede	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07ee1	83 b8 d8 00 00
	00 02		 cmp	 DWORD PTR [eax+216], 2
  07ee8	0f 85 43 02 00
	00		 jne	 $LN779@P_MovePlay
  07eee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07ef1	8b 08		 mov	 ecx, DWORD PTR [eax]
  07ef3	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  07ef6	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  07efc	0f 85 2f 02 00
	00		 jne	 $LN779@P_MovePlay

; 8134 : 	{
; 8135 : 		fixed_t oldx;
; 8136 : 		fixed_t oldy;
; 8137 : 
; 8138 : 		oldx = player->mo->x;

  07f02	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07f05	8b 08		 mov	 ecx, DWORD PTR [eax]
  07f07	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  07f0a	89 95 64 fd ff
	ff		 mov	 DWORD PTR _oldx$13[ebp], edx

; 8139 : 		oldy = player->mo->y;

  07f10	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07f13	8b 08		 mov	 ecx, DWORD PTR [eax]
  07f15	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  07f18	89 95 60 fd ff
	ff		 mov	 DWORD PTR _oldy$12[ebp], edx

; 8140 : 
; 8141 : 		P_UnsetThingPosition(player->mo);

  07f1e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07f21	8b 08		 mov	 ecx, DWORD PTR [eax]
  07f23	51		 push	 ecx
  07f24	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  07f29	83 c4 04	 add	 esp, 4

; 8142 : 		player->mo->x += player->mo->momx;

  07f2c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07f2f	8b 08		 mov	 ecx, DWORD PTR [eax]
  07f31	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07f34	8b 02		 mov	 eax, DWORD PTR [edx]
  07f36	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  07f39	03 48 48	 add	 ecx, DWORD PTR [eax+72]
  07f3c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07f3f	8b 02		 mov	 eax, DWORD PTR [edx]
  07f41	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 8143 : 		player->mo->y += player->mo->momy;

  07f44	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07f47	8b 08		 mov	 ecx, DWORD PTR [eax]
  07f49	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07f4c	8b 02		 mov	 eax, DWORD PTR [edx]
  07f4e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  07f51	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  07f54	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  07f57	8b 02		 mov	 eax, DWORD PTR [edx]
  07f59	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 8144 : 		P_SetThingPosition(player->mo);

  07f5c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07f5f	8b 08		 mov	 ecx, DWORD PTR [eax]
  07f61	51		 push	 ecx
  07f62	e8 00 00 00 00	 call	 _P_SetThingPosition
  07f67	83 c4 04	 add	 esp, 4

; 8145 : 
; 8146 : 		for (node = player->mo->touching_sectorlist; node; node = node->m_snext)

  07f6a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  07f6d	8b 08		 mov	 ecx, DWORD PTR [eax]
  07f6f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  07f72	89 55 e4	 mov	 DWORD PTR _node$[ebp], edx
  07f75	eb 09		 jmp	 SHORT $LN98@P_MovePlay
$LN96@P_MovePlay:
  07f77	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07f7a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  07f7d	89 4d e4	 mov	 DWORD PTR _node$[ebp], ecx
$LN98@P_MovePlay:
  07f80	83 7d e4 00	 cmp	 DWORD PTR _node$[ebp], 0
  07f84	0f 84 6f 01 00
	00		 je	 $LN97@P_MovePlay

; 8147 : 		{
; 8148 : 			if (!node->m_sector)

  07f8a	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07f8d	83 38 00	 cmp	 DWORD PTR [eax], 0
  07f90	75 05		 jne	 SHORT $LN781@P_MovePlay

; 8149 : 				break;

  07f92	e9 62 01 00 00	 jmp	 $LN97@P_MovePlay
$LN781@P_MovePlay:

; 8150 : 
; 8151 : 			if (node->m_sector->ffloors)

  07f97	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07f9a	8b 08		 mov	 ecx, DWORD PTR [eax]
  07f9c	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  07fa3	0f 84 ba 00 00
	00		 je	 $LN100@P_MovePlay

; 8152 : 			{
; 8153 : 				ffloor_t *rover;
; 8154 : 
; 8155 : 				for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  07fa9	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  07fac	8b 08		 mov	 ecx, DWORD PTR [eax]
  07fae	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  07fb4	89 95 5c fd ff
	ff		 mov	 DWORD PTR _rover$11[ebp], edx
  07fba	eb 0f		 jmp	 SHORT $LN101@P_MovePlay
$LN99@P_MovePlay:
  07fbc	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR _rover$11[ebp]
  07fc2	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  07fc5	89 8d 5c fd ff
	ff		 mov	 DWORD PTR _rover$11[ebp], ecx
$LN101@P_MovePlay:
  07fcb	83 bd 5c fd ff
	ff 00		 cmp	 DWORD PTR _rover$11[ebp], 0
  07fd2	0f 84 8b 00 00
	00		 je	 $LN100@P_MovePlay

; 8156 : 				{
; 8157 : 					if (!(rover->flags & FF_EXISTS)) continue;

  07fd8	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR _rover$11[ebp]
  07fde	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07fe1	83 e1 01	 and	 ecx, 1
  07fe4	75 02		 jne	 SHORT $LN783@P_MovePlay
  07fe6	eb d4		 jmp	 SHORT $LN99@P_MovePlay
$LN783@P_MovePlay:

; 8158 : 
; 8159 : 					if ((rover->flags & FF_BLOCKPLAYER))

  07fe8	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR _rover$11[ebp]
  07fee	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  07ff1	83 e1 02	 and	 ecx, 2
  07ff4	74 68		 je	 SHORT $LN785@P_MovePlay

; 8160 : 					{
; 8161 : 						if (*rover->topheight > player->mo->z && *rover->bottomheight < player->mo->z)

  07ff6	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR _rover$11[ebp]
  07ffc	8b 08		 mov	 ecx, DWORD PTR [eax]
  07ffe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08001	8b 02		 mov	 eax, DWORD PTR [edx]
  08003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  08005	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  08008	7e 54		 jle	 SHORT $LN785@P_MovePlay
  0800a	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR _rover$11[ebp]
  08010	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  08013	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08016	8b 02		 mov	 eax, DWORD PTR [edx]
  08018	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0801a	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0801d	7d 3f		 jge	 SHORT $LN785@P_MovePlay

; 8162 : 						{
; 8163 : 							P_ResetPlayer(player);

  0801f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08022	50		 push	 eax
  08023	e8 00 00 00 00	 call	 _P_ResetPlayer
  08028	83 c4 04	 add	 esp, 4

; 8164 : 							player->climbing = 5;

  0802b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0802e	c7 80 24 01 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+292], 5

; 8165 : 							player->mo->momx = player->mo->momy = player->mo->momz = 0;

  08038	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0803b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0803d	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  08044	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08047	8b 02		 mov	 eax, DWORD PTR [edx]
  08049	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  08050	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  08053	8b 11		 mov	 edx, DWORD PTR [ecx]
  08055	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 8166 : 							break;

  0805c	eb 05		 jmp	 SHORT $LN100@P_MovePlay
$LN785@P_MovePlay:

; 8167 : 						}
; 8168 : 					}
; 8169 : 				}

  0805e	e9 59 ff ff ff	 jmp	 $LN99@P_MovePlay
$LN100@P_MovePlay:

; 8170 : 			}
; 8171 : 
; 8172 : 			if (player->mo->z+player->mo->height > node->m_sector->ceilingheight
; 8173 : 				&& node->m_sector->ceilingpic == skyflatnum)

  08063	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08066	8b 08		 mov	 ecx, DWORD PTR [eax]
  08068	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0806b	8b 02		 mov	 eax, DWORD PTR [edx]
  0806d	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  08070	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  08073	8b 55 e4	 mov	 edx, DWORD PTR _node$[ebp]
  08076	8b 02		 mov	 eax, DWORD PTR [edx]
  08078	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0807b	7e 15		 jle	 SHORT $LN786@P_MovePlay
  0807d	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  08080	8b 08		 mov	 ecx, DWORD PTR [eax]
  08082	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  08085	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  0808b	75 05		 jne	 SHORT $LN786@P_MovePlay

; 8174 : 				continue;

  0808d	e9 e5 fe ff ff	 jmp	 $LN96@P_MovePlay
$LN786@P_MovePlay:

; 8175 : 
; 8176 : 			if (node->m_sector->floorheight > player->mo->z
; 8177 : 				|| node->m_sector->ceilingheight < player->mo->z)

  08092	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  08095	8b 08		 mov	 ecx, DWORD PTR [eax]
  08097	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0809a	8b 02		 mov	 eax, DWORD PTR [edx]
  0809c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0809e	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  080a1	7f 12		 jg	 SHORT $LN788@P_MovePlay
  080a3	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  080a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  080a8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  080ab	8b 02		 mov	 eax, DWORD PTR [edx]
  080ad	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  080b0	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  080b3	7d 3f		 jge	 SHORT $LN787@P_MovePlay
$LN788@P_MovePlay:

; 8178 : 			{
; 8179 : 				P_ResetPlayer(player);

  080b5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  080b8	50		 push	 eax
  080b9	e8 00 00 00 00	 call	 _P_ResetPlayer
  080be	83 c4 04	 add	 esp, 4

; 8180 : 				player->climbing = 5;

  080c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  080c4	c7 80 24 01 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+292], 5

; 8181 : 				player->mo->momx = player->mo->momy = player->mo->momz = 0;

  080ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  080d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  080d3	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  080da	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  080dd	8b 02		 mov	 eax, DWORD PTR [edx]
  080df	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  080e6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  080e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  080eb	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 8182 : 				break;

  080f2	eb 05		 jmp	 SHORT $LN97@P_MovePlay
$LN787@P_MovePlay:

; 8183 : 			}
; 8184 : 		}

  080f4	e9 7e fe ff ff	 jmp	 $LN96@P_MovePlay
$LN97@P_MovePlay:

; 8185 : 		P_UnsetThingPosition(player->mo);

  080f9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  080fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  080fe	51		 push	 ecx
  080ff	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  08104	83 c4 04	 add	 esp, 4

; 8186 : 		player->mo->x = oldx;

  08107	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0810a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0810c	8b 95 64 fd ff
	ff		 mov	 edx, DWORD PTR _oldx$13[ebp]
  08112	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 8187 : 		player->mo->y = oldy;

  08115	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0811a	8b 95 60 fd ff
	ff		 mov	 edx, DWORD PTR _oldy$12[ebp]
  08120	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 8188 : 		P_SetThingPosition(player->mo);

  08123	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08126	8b 08		 mov	 ecx, DWORD PTR [eax]
  08128	51		 push	 ecx
  08129	e8 00 00 00 00	 call	 _P_SetThingPosition
  0812e	83 c4 04	 add	 esp, 4
$LN779@P_MovePlay:

; 8189 : 	}
; 8190 : 
; 8191 : 	// Check for a BOUNCY sector!
; 8192 : 	if (CheckForBouncySector)

  08131	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CheckForBouncySector, 0
  08138	0f 84 aa 04 00
	00		 je	 $LN789@P_MovePlay

; 8193 : 	{
; 8194 : 		fixed_t oldx;
; 8195 : 		fixed_t oldy;
; 8196 : 		fixed_t oldz;
; 8197 : 
; 8198 : 		oldx = player->mo->x;

  0813e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08141	8b 08		 mov	 ecx, DWORD PTR [eax]
  08143	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  08146	89 95 58 fd ff
	ff		 mov	 DWORD PTR _oldx$10[ebp], edx

; 8199 : 		oldy = player->mo->y;

  0814c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0814f	8b 08		 mov	 ecx, DWORD PTR [eax]
  08151	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  08154	89 95 54 fd ff
	ff		 mov	 DWORD PTR _oldy$9[ebp], edx

; 8200 : 		oldz = player->mo->z;

  0815a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0815d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0815f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  08162	89 95 50 fd ff
	ff		 mov	 DWORD PTR _oldz$8[ebp], edx

; 8201 : 
; 8202 : 		P_UnsetThingPosition(player->mo);

  08168	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0816b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0816d	51		 push	 ecx
  0816e	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  08173	83 c4 04	 add	 esp, 4

; 8203 : 		player->mo->x += player->mo->momx;

  08176	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08179	8b 08		 mov	 ecx, DWORD PTR [eax]
  0817b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0817e	8b 02		 mov	 eax, DWORD PTR [edx]
  08180	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  08183	03 48 48	 add	 ecx, DWORD PTR [eax+72]
  08186	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08189	8b 02		 mov	 eax, DWORD PTR [edx]
  0818b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 8204 : 		player->mo->y += player->mo->momy;

  0818e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08191	8b 08		 mov	 ecx, DWORD PTR [eax]
  08193	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08196	8b 02		 mov	 eax, DWORD PTR [edx]
  08198	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0819b	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  0819e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  081a1	8b 02		 mov	 eax, DWORD PTR [edx]
  081a3	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 8205 : 		player->mo->z += player->mo->momz;

  081a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  081a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  081ab	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  081ae	8b 02		 mov	 eax, DWORD PTR [edx]
  081b0	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  081b3	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  081b6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  081b9	8b 02		 mov	 eax, DWORD PTR [edx]
  081bb	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 8206 : 		P_SetThingPosition(player->mo);

  081be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  081c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  081c3	51		 push	 ecx
  081c4	e8 00 00 00 00	 call	 _P_SetThingPosition
  081c9	83 c4 04	 add	 esp, 4

; 8207 : 
; 8208 : 		for (node = player->mo->touching_sectorlist; node; node = node->m_snext)

  081cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  081cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  081d1	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  081d4	89 55 e4	 mov	 DWORD PTR _node$[ebp], edx
  081d7	eb 09		 jmp	 SHORT $LN104@P_MovePlay
$LN102@P_MovePlay:
  081d9	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  081dc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  081df	89 4d e4	 mov	 DWORD PTR _node$[ebp], ecx
$LN104@P_MovePlay:
  081e2	83 7d e4 00	 cmp	 DWORD PTR _node$[ebp], 0
  081e6	0f 84 b6 03 00
	00		 je	 $bouncydone$832

; 8209 : 		{
; 8210 : 			if (!node->m_sector)

  081ec	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  081ef	83 38 00	 cmp	 DWORD PTR [eax], 0
  081f2	75 05		 jne	 SHORT $LN790@P_MovePlay

; 8211 : 				break;

  081f4	e9 a9 03 00 00	 jmp	 $bouncydone$832
$LN790@P_MovePlay:

; 8212 : 
; 8213 : 			if (node->m_sector->ffloors)

  081f9	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  081fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  081fe	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  08205	0f 84 92 03 00
	00		 je	 $LN106@P_MovePlay

; 8214 : 			{
; 8215 : 				ffloor_t *rover;
; 8216 : 				boolean top = true;

  0820b	c7 85 48 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _top$6[ebp], 1

; 8217 : 
; 8218 : 				for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  08215	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  08218	8b 08		 mov	 ecx, DWORD PTR [eax]
  0821a	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  08220	89 95 4c fd ff
	ff		 mov	 DWORD PTR _rover$7[ebp], edx
  08226	eb 0f		 jmp	 SHORT $LN107@P_MovePlay
$LN105@P_MovePlay:
  08228	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _rover$7[ebp]
  0822e	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  08231	89 8d 4c fd ff
	ff		 mov	 DWORD PTR _rover$7[ebp], ecx
$LN107@P_MovePlay:
  08237	83 bd 4c fd ff
	ff 00		 cmp	 DWORD PTR _rover$7[ebp], 0
  0823e	0f 84 59 03 00
	00		 je	 $LN106@P_MovePlay

; 8219 : 				{
; 8220 : 					if (player->mo->z > *rover->topheight)

  08244	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08247	8b 08		 mov	 ecx, DWORD PTR [eax]
  08249	8b 95 4c fd ff
	ff		 mov	 edx, DWORD PTR _rover$7[ebp]
  0824f	8b 02		 mov	 eax, DWORD PTR [edx]
  08251	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  08254	3b 08		 cmp	 ecx, DWORD PTR [eax]
  08256	7e 02		 jle	 SHORT $LN792@P_MovePlay

; 8221 : 						continue;

  08258	eb ce		 jmp	 SHORT $LN105@P_MovePlay
$LN792@P_MovePlay:

; 8222 : 
; 8223 : 					if (player->mo->z + player->mo->height < *rover->bottomheight)

  0825a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0825d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0825f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08262	8b 02		 mov	 eax, DWORD PTR [edx]
  08264	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  08267	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  0826a	8b 95 4c fd ff
	ff		 mov	 edx, DWORD PTR _rover$7[ebp]
  08270	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  08273	3b 08		 cmp	 ecx, DWORD PTR [eax]
  08275	7d 02		 jge	 SHORT $LN793@P_MovePlay

; 8224 : 						continue;

  08277	eb af		 jmp	 SHORT $LN105@P_MovePlay
$LN793@P_MovePlay:

; 8225 : 
; 8226 : 					if (oldz < *rover->topheight && oldz > *rover->bottomheight)

  08279	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _rover$7[ebp]
  0827f	8b 08		 mov	 ecx, DWORD PTR [eax]
  08281	8b 95 50 fd ff
	ff		 mov	 edx, DWORD PTR _oldz$8[ebp]
  08287	3b 11		 cmp	 edx, DWORD PTR [ecx]
  08289	7d 1d		 jge	 SHORT $LN794@P_MovePlay
  0828b	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _rover$7[ebp]
  08291	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  08294	8b 95 50 fd ff
	ff		 mov	 edx, DWORD PTR _oldz$8[ebp]
  0829a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0829c	7e 0a		 jle	 SHORT $LN794@P_MovePlay

; 8227 : 						top = false;

  0829e	c7 85 48 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _top$6[ebp], 0
$LN794@P_MovePlay:

; 8228 : 
; 8229 : 					if (GETSECSPECIAL(rover->master->frontsector->special, 1) == 15)

  082a8	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _rover$7[ebp]
  082ae	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  082b1	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  082b4	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  082b8	83 e0 0f	 and	 eax, 15			; 0000000fH
  082bb	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  082be	0f 85 d4 02 00
	00		 jne	 $LN795@P_MovePlay

; 8230 : 					{
; 8231 : 						fixed_t linedist;
; 8232 : 
; 8233 : 						linedist = P_AproxDistance(rover->master->v1->x-rover->master->v2->x, rover->master->v1->y-rover->master->v2->y);

  082c4	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _rover$7[ebp]
  082ca	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  082cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  082cf	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _rover$7[ebp]
  082d5	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  082d8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  082db	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  082de	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  082e1	51		 push	 ecx
  082e2	8b 95 4c fd ff
	ff		 mov	 edx, DWORD PTR _rover$7[ebp]
  082e8	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  082eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  082ed	8b 95 4c fd ff
	ff		 mov	 edx, DWORD PTR _rover$7[ebp]
  082f3	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  082f6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  082f9	8b 01		 mov	 eax, DWORD PTR [ecx]
  082fb	2b 02		 sub	 eax, DWORD PTR [edx]
  082fd	50		 push	 eax
  082fe	e8 00 00 00 00	 call	 _P_AproxDistance
  08303	83 c4 08	 add	 esp, 8
  08306	89 85 44 fd ff
	ff		 mov	 DWORD PTR _linedist$5[ebp], eax

; 8234 : 
; 8235 : 						linedist = FixedDiv(linedist,100*FRACUNIT);

  0830c	68 00 00 64 00	 push	 6553600			; 00640000H
  08311	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR _linedist$5[ebp]
  08317	50		 push	 eax
  08318	e8 00 00 00 00	 call	 _FixedDiv
  0831d	83 c4 08	 add	 esp, 8
  08320	89 85 44 fd ff
	ff		 mov	 DWORD PTR _linedist$5[ebp], eax

; 8236 : 
; 8237 : 						if (top)

  08326	83 bd 48 fd ff
	ff 00		 cmp	 DWORD PTR _top$6[ebp], 0
  0832d	0f 84 6e 01 00
	00		 je	 $LN796@P_MovePlay

; 8238 : 						{
; 8239 : 							fixed_t newmom;
; 8240 : 
; 8241 : 							newmom = -FixedMul(player->mo->momz,linedist);

  08333	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR _linedist$5[ebp]
  08339	50		 push	 eax
  0833a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0833d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0833f	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  08342	50		 push	 eax
  08343	e8 00 00 00 00	 call	 _FixedMul
  08348	83 c4 08	 add	 esp, 8
  0834b	f7 d8		 neg	 eax
  0834d	89 85 40 fd ff
	ff		 mov	 DWORD PTR _newmom$4[ebp], eax

; 8242 : 
; 8243 : 							if (newmom < (linedist*2)
; 8244 : 								&& newmom > -(linedist*2))

  08353	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR _linedist$5[ebp]
  08359	d1 e0		 shl	 eax, 1
  0835b	39 85 40 fd ff
	ff		 cmp	 DWORD PTR _newmom$4[ebp], eax
  08361	7d 17		 jge	 SHORT $LN798@P_MovePlay
  08363	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR _linedist$5[ebp]
  08369	d1 e0		 shl	 eax, 1
  0836b	f7 d8		 neg	 eax
  0836d	39 85 40 fd ff
	ff		 cmp	 DWORD PTR _newmom$4[ebp], eax
  08373	7e 05		 jle	 SHORT $LN798@P_MovePlay

; 8245 : 							{
; 8246 : 								goto bouncydone;

  08375	e9 28 02 00 00	 jmp	 $bouncydone$832
$LN798@P_MovePlay:

; 8247 : 							}
; 8248 : 
; 8249 : 							if (!(rover->master->flags & ML_BOUNCY))

  0837a	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _rover$7[ebp]
  08380	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  08383	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  08387	81 e2 00 40 00
	00		 and	 edx, 16384		; 00004000H
  0838d	75 40		 jne	 SHORT $LN803@P_MovePlay

; 8250 : 							{
; 8251 : 								if (newmom > 0)

  0838f	83 bd 40 fd ff
	ff 00		 cmp	 DWORD PTR _newmom$4[ebp], 0
  08396	7e 18		 jle	 SHORT $LN800@P_MovePlay

; 8252 : 								{
; 8253 : 									if (newmom < 8*FRACUNIT)

  08398	81 bd 40 fd ff
	ff 00 00 08 00	 cmp	 DWORD PTR _newmom$4[ebp], 524288 ; 00080000H
  083a2	7d 0a		 jge	 SHORT $LN802@P_MovePlay

; 8254 : 										newmom = 8*FRACUNIT;

  083a4	c7 85 40 fd ff
	ff 00 00 08 00	 mov	 DWORD PTR _newmom$4[ebp], 524288 ; 00080000H
$LN802@P_MovePlay:

; 8255 : 								}

  083ae	eb 1f		 jmp	 SHORT $LN803@P_MovePlay
$LN800@P_MovePlay:

; 8256 : 								else if (newmom > -8*FRACUNIT && newmom != 0)

  083b0	81 bd 40 fd ff
	ff 00 00 f8 ff	 cmp	 DWORD PTR _newmom$4[ebp], -524288 ; fff80000H
  083ba	7e 13		 jle	 SHORT $LN803@P_MovePlay
  083bc	83 bd 40 fd ff
	ff 00		 cmp	 DWORD PTR _newmom$4[ebp], 0
  083c3	74 0a		 je	 SHORT $LN803@P_MovePlay

; 8257 : 									newmom = -8*FRACUNIT;

  083c5	c7 85 40 fd ff
	ff 00 00 f8 ff	 mov	 DWORD PTR _newmom$4[ebp], -524288 ; fff80000H
$LN803@P_MovePlay:

; 8258 : 							}
; 8259 : 
; 8260 : 							if (newmom > P_GetPlayerHeight(player)/2)

  083cf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  083d2	50		 push	 eax
  083d3	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  083d8	83 c4 04	 add	 esp, 4
  083db	99		 cdq
  083dc	2b c2		 sub	 eax, edx
  083de	d1 f8		 sar	 eax, 1
  083e0	39 85 40 fd ff
	ff		 cmp	 DWORD PTR _newmom$4[ebp], eax
  083e6	7e 19		 jle	 SHORT $LN804@P_MovePlay

; 8261 : 								newmom = P_GetPlayerHeight(player)/2;

  083e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  083eb	50		 push	 eax
  083ec	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  083f1	83 c4 04	 add	 esp, 4
  083f4	99		 cdq
  083f5	2b c2		 sub	 eax, edx
  083f7	d1 f8		 sar	 eax, 1
  083f9	89 85 40 fd ff
	ff		 mov	 DWORD PTR _newmom$4[ebp], eax
  083ff	eb 34		 jmp	 SHORT $LN806@P_MovePlay
$LN804@P_MovePlay:

; 8262 : 							else if (newmom < -P_GetPlayerHeight(player)/2)

  08401	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08404	50		 push	 eax
  08405	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  0840a	83 c4 04	 add	 esp, 4
  0840d	f7 d8		 neg	 eax
  0840f	99		 cdq
  08410	2b c2		 sub	 eax, edx
  08412	d1 f8		 sar	 eax, 1
  08414	39 85 40 fd ff
	ff		 cmp	 DWORD PTR _newmom$4[ebp], eax
  0841a	7d 19		 jge	 SHORT $LN806@P_MovePlay

; 8263 : 								newmom = -P_GetPlayerHeight(player)/2;

  0841c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0841f	50		 push	 eax
  08420	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  08425	83 c4 04	 add	 esp, 4
  08428	f7 d8		 neg	 eax
  0842a	99		 cdq
  0842b	2b c2		 sub	 eax, edx
  0842d	d1 f8		 sar	 eax, 1
  0842f	89 85 40 fd ff
	ff		 mov	 DWORD PTR _newmom$4[ebp], eax
$LN806@P_MovePlay:

; 8264 : 
; 8265 : 							player->mo->momz = newmom;

  08435	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08438	8b 08		 mov	 ecx, DWORD PTR [eax]
  0843a	8b 95 40 fd ff
	ff		 mov	 edx, DWORD PTR _newmom$4[ebp]
  08440	89 51 50	 mov	 DWORD PTR [ecx+80], edx

; 8266 : 
; 8267 : 							if (player->pflags & PF_SPINNING)

  08443	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08446	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0844c	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  08452	74 48		 je	 SHORT $LN807@P_MovePlay

; 8268 : 							{
; 8269 : 								player->pflags &= ~PF_SPINNING;

  08454	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08457	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0845d	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  08463	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08466	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8270 : 								player->pflags |= PF_JUMPED;

  0846c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0846f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  08475	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  0847b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0847e	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8271 : 								player->pflags |= PF_THOKKED;

  08484	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08487	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0848d	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  08493	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08496	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN807@P_MovePlay:

; 8272 : 							}
; 8273 : 						}

  0849c	e9 9d 00 00 00	 jmp	 $LN808@P_MovePlay
$LN796@P_MovePlay:

; 8274 : 						else
; 8275 : 						{
; 8276 : 							player->mo->momx = -FixedMul(player->mo->momx,linedist);

  084a1	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR _linedist$5[ebp]
  084a7	50		 push	 eax
  084a8	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  084ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  084ad	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  084b0	50		 push	 eax
  084b1	e8 00 00 00 00	 call	 _FixedMul
  084b6	83 c4 08	 add	 esp, 8
  084b9	f7 d8		 neg	 eax
  084bb	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  084be	8b 11		 mov	 edx, DWORD PTR [ecx]
  084c0	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 8277 : 							player->mo->momy = -FixedMul(player->mo->momy,linedist);

  084c3	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR _linedist$5[ebp]
  084c9	50		 push	 eax
  084ca	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  084cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  084cf	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  084d2	50		 push	 eax
  084d3	e8 00 00 00 00	 call	 _FixedMul
  084d8	83 c4 08	 add	 esp, 8
  084db	f7 d8		 neg	 eax
  084dd	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  084e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  084e2	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 8278 : 
; 8279 : 							if (player->pflags & PF_SPINNING)

  084e5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  084e8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  084ee	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  084f4	74 48		 je	 SHORT $LN808@P_MovePlay

; 8280 : 							{
; 8281 : 								player->pflags &= ~PF_SPINNING;

  084f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  084f9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  084ff	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  08505	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08508	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8282 : 								player->pflags |= PF_JUMPED;

  0850e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08511	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  08517	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  0851d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08520	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8283 : 								player->pflags |= PF_THOKKED;

  08526	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08529	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0852f	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  08535	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08538	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN808@P_MovePlay:

; 8284 : 							}
; 8285 : 						}
; 8286 : 
; 8287 : 						if ((player->pflags & PF_SPINNING) && player->speed < 1 && player->mo->momz)

  0853e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08541	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  08547	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0854d	74 47		 je	 SHORT $LN809@P_MovePlay
  0854f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08552	83 b8 0c 01 00
	00 01		 cmp	 DWORD PTR [eax+268], 1
  08559	7d 3b		 jge	 SHORT $LN809@P_MovePlay
  0855b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0855e	8b 08		 mov	 ecx, DWORD PTR [eax]
  08560	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  08564	74 30		 je	 SHORT $LN809@P_MovePlay

; 8288 : 						{
; 8289 : 							player->pflags &= ~PF_SPINNING;

  08566	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08569	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0856f	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  08575	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08578	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 8290 : 							player->pflags |= PF_JUMPED;

  0857e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08581	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  08587	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  0858d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08590	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN809@P_MovePlay:

; 8291 : 						}
; 8292 : 
; 8293 : 						goto bouncydone;

  08596	eb 0a		 jmp	 SHORT $bouncydone$832
$LN795@P_MovePlay:

; 8294 : 					}
; 8295 : 				}

  08598	e9 8b fc ff ff	 jmp	 $LN105@P_MovePlay
$LN106@P_MovePlay:

; 8296 : 			}
; 8297 : 		}

  0859d	e9 37 fc ff ff	 jmp	 $LN102@P_MovePlay
$bouncydone$832:

; 8298 : bouncydone:
; 8299 : 		P_UnsetThingPosition(player->mo);

  085a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  085a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  085a7	51		 push	 ecx
  085a8	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  085ad	83 c4 04	 add	 esp, 4

; 8300 : 		player->mo->x = oldx;

  085b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  085b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  085b5	8b 95 58 fd ff
	ff		 mov	 edx, DWORD PTR _oldx$10[ebp]
  085bb	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 8301 : 		player->mo->y = oldy;

  085be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  085c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  085c3	8b 95 54 fd ff
	ff		 mov	 edx, DWORD PTR _oldy$9[ebp]
  085c9	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 8302 : 		player->mo->z = oldz;

  085cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  085cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  085d1	8b 95 50 fd ff
	ff		 mov	 edx, DWORD PTR _oldz$8[ebp]
  085d7	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 8303 : 		P_SetThingPosition(player->mo);

  085da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  085dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  085df	51		 push	 ecx
  085e0	e8 00 00 00 00	 call	 _P_SetThingPosition
  085e5	83 c4 04	 add	 esp, 4
$LN789@P_MovePlay:

; 8304 : 	}
; 8305 : 
; 8306 : 
; 8307 : 	// Look for Quicksand!
; 8308 : 	if (CheckForQuicksand && player->mo->subsector->sector->ffloors && player->mo->momz <= 0)

  085e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CheckForQuicksand, 0
  085ef	0f 84 b0 01 00
	00		 je	 $LN109@P_MovePlay
  085f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  085f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  085fa	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  085fd	8b 02		 mov	 eax, DWORD PTR [edx]
  085ff	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  08606	0f 84 99 01 00
	00		 je	 $LN109@P_MovePlay
  0860c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0860f	8b 08		 mov	 ecx, DWORD PTR [eax]
  08611	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  08615	0f 8f 8a 01 00
	00		 jg	 $LN109@P_MovePlay

; 8309 : 	{
; 8310 : 		ffloor_t *rover;
; 8311 : 		fixed_t sinkspeed, friction;
; 8312 : 
; 8313 : 		for (rover = player->mo->subsector->sector->ffloors; rover; rover = rover->next)

  0861b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0861e	8b 08		 mov	 ecx, DWORD PTR [eax]
  08620	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  08623	8b 02		 mov	 eax, DWORD PTR [edx]
  08625	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0862b	89 8d 3c fd ff
	ff		 mov	 DWORD PTR _rover$3[ebp], ecx
  08631	eb 0f		 jmp	 SHORT $LN110@P_MovePlay
$LN108@P_MovePlay:
  08633	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  08639	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0863c	89 8d 3c fd ff
	ff		 mov	 DWORD PTR _rover$3[ebp], ecx
$LN110@P_MovePlay:
  08642	83 bd 3c fd ff
	ff 00		 cmp	 DWORD PTR _rover$3[ebp], 0
  08649	0f 84 56 01 00
	00		 je	 $LN109@P_MovePlay

; 8314 : 		{
; 8315 : 			if (!(rover->flags & FF_EXISTS)) continue;

  0864f	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  08655	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  08658	83 e1 01	 and	 ecx, 1
  0865b	75 02		 jne	 SHORT $LN811@P_MovePlay
  0865d	eb d4		 jmp	 SHORT $LN108@P_MovePlay
$LN811@P_MovePlay:

; 8316 : 
; 8317 : 			if (!(rover->flags & FF_QUICKSAND))

  0865f	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  08665	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  08668	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0866e	75 02		 jne	 SHORT $LN812@P_MovePlay

; 8318 : 				continue;

  08670	eb c1		 jmp	 SHORT $LN108@P_MovePlay
$LN812@P_MovePlay:

; 8319 : 
; 8320 : 			if (*rover->topheight >= player->mo->z && *rover->bottomheight < player->mo->z + player->mo->height)

  08672	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  08678	8b 08		 mov	 ecx, DWORD PTR [eax]
  0867a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0867d	8b 02		 mov	 eax, DWORD PTR [edx]
  0867f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  08681	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  08684	0f 8c 16 01 00
	00		 jl	 $LN813@P_MovePlay
  0868a	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  08690	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  08693	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  08696	8b 02		 mov	 eax, DWORD PTR [edx]
  08698	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0869b	8b 12		 mov	 edx, DWORD PTR [edx]
  0869d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  086a0	03 42 44	 add	 eax, DWORD PTR [edx+68]
  086a3	39 01		 cmp	 DWORD PTR [ecx], eax
  086a5	0f 8d f5 00 00
	00		 jge	 $LN813@P_MovePlay

; 8321 : 			{
; 8322 : 				sinkspeed = abs(rover->master->v1->x - rover->master->v2->x)>>1;

  086ab	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  086b1	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  086b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  086b6	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  086bc	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  086bf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  086c2	8b 0a		 mov	 ecx, DWORD PTR [edx]
  086c4	2b 08		 sub	 ecx, DWORD PTR [eax]
  086c6	51		 push	 ecx
  086c7	e8 00 00 00 00	 call	 _abs
  086cc	83 c4 04	 add	 esp, 4
  086cf	d1 f8		 sar	 eax, 1
  086d1	89 85 38 fd ff
	ff		 mov	 DWORD PTR _sinkspeed$2[ebp], eax

; 8323 : 
; 8324 : 				sinkspeed = FixedDiv(sinkspeed,TICRATE*FRACUNIT);

  086d7	68 00 00 23 00	 push	 2293760			; 00230000H
  086dc	8b 85 38 fd ff
	ff		 mov	 eax, DWORD PTR _sinkspeed$2[ebp]
  086e2	50		 push	 eax
  086e3	e8 00 00 00 00	 call	 _FixedDiv
  086e8	83 c4 08	 add	 esp, 8
  086eb	89 85 38 fd ff
	ff		 mov	 DWORD PTR _sinkspeed$2[ebp], eax

; 8325 : 
; 8326 : 				player->mo->z -= sinkspeed;

  086f1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  086f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  086f6	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  086f9	2b 95 38 fd ff
	ff		 sub	 edx, DWORD PTR _sinkspeed$2[ebp]
  086ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08702	8b 08		 mov	 ecx, DWORD PTR [eax]
  08704	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 8327 : 
; 8328 : 				if (player->mo->z <= player->mo->subsector->sector->floorheight)

  08707	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0870a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0870c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0870f	8b 02		 mov	 eax, DWORD PTR [edx]
  08711	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  08714	8b 02		 mov	 eax, DWORD PTR [edx]
  08716	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  08719	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0871b	7f 14		 jg	 SHORT $LN814@P_MovePlay

; 8329 : 					player->mo->z = player->mo->subsector->sector->floorheight;

  0871d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  08720	8b 08		 mov	 ecx, DWORD PTR [eax]
  08722	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  08725	8b 02		 mov	 eax, DWORD PTR [edx]
  08727	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0872a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0872c	8b 00		 mov	 eax, DWORD PTR [eax]
  0872e	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN814@P_MovePlay:

; 8330 : 
; 8331 : 				friction = abs(rover->master->v1->y - rover->master->v2->y)>>6;

  08731	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  08737	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0873a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0873c	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR _rover$3[ebp]
  08742	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  08745	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  08748	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0874b	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  0874e	51		 push	 ecx
  0874f	e8 00 00 00 00	 call	 _abs
  08754	83 c4 04	 add	 esp, 4
  08757	c1 f8 06	 sar	 eax, 6
  0875a	89 85 34 fd ff
	ff		 mov	 DWORD PTR _friction$1[ebp], eax

; 8332 : 
; 8333 : 				player->mo->momx = FixedMul(player->mo->momx, friction);

  08760	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _friction$1[ebp]
  08766	50		 push	 eax
  08767	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0876a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0876c	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0876f	50		 push	 eax
  08770	e8 00 00 00 00	 call	 _FixedMul
  08775	83 c4 08	 add	 esp, 8
  08778	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0877b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0877d	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 8334 : 				player->mo->momy = FixedMul(player->mo->momy, friction);

  08780	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _friction$1[ebp]
  08786	50		 push	 eax
  08787	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0878a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0878c	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  0878f	50		 push	 eax
  08790	e8 00 00 00 00	 call	 _FixedMul
  08795	83 c4 08	 add	 esp, 8
  08798	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0879b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0879d	89 42 4c	 mov	 DWORD PTR [edx+76], eax
$LN813@P_MovePlay:

; 8335 : 			}
; 8336 : 		}

  087a0	e9 8e fe ff ff	 jmp	 $LN108@P_MovePlay
$LN109@P_MovePlay:

; 8337 : 	}
; 8338 : }

  087a5	5f		 pop	 edi
  087a6	5e		 pop	 esi
  087a7	5b		 pop	 ebx
  087a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  087ab	33 cd		 xor	 ecx, ebp
  087ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  087b2	8b e5		 mov	 esp, ebp
  087b4	5d		 pop	 ebp
  087b5	c3		 ret	 0
_P_MovePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_ObjectplaceMovement
_TEXT	SEGMENT
tv561 = -148						; size = 4
tv611 = -148						; size = 4
tv553 = -144						; size = 4
tv571 = -144						; size = 4
tv709 = -144						; size = 4
_z$1 = -76						; size = 4
_newmt$2 = -72						; size = 4
_oldmt$3 = -68						; size = 4
_oldmapthings$4 = -64					; size = 4
_i$5 = -60						; size = 4
_mt$6 = -56						; size = 4
_done$7 = -52						; size = 4
_mo2$8 = -48						; size = 4
_th$9 = -44						; size = 4
_adjust$10 = -40					; size = 4
_zshift$11 = -33					; size = 1
_z$12 = -32						; size = 2
_y$13 = -28						; size = 2
_x$14 = -24						; size = 2
_newthing$15 = -20					; size = 4
_oldmapthings$16 = -16					; size = 4
_mt$17 = -12						; size = 4
_currentitem$ = -8					; size = 4
_cmd$ = -4						; size = 4
_player$ = 8						; size = 4
_P_ObjectplaceMovement PROC				; COMDAT

; 5068 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5069 : 	ticcmd_t *cmd = &player->cmd;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	89 45 fc	 mov	 DWORD PTR _cmd$[ebp], eax

; 5070 : 	mobj_t *currentitem;
; 5071 : 
; 5072 : 	if (!player->climbing && (netgame || (player == &players[consoleplayer]

  00015	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00018	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0001f	75 6f		 jne	 SHORT $LN17@P_Objectpl
  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00028	75 54		 jne	 SHORT $LN18@P_Objectpl
  0002a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00034	05 00 00 00 00	 add	 eax, OFFSET _players
  00039	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0003c	75 09		 jne	 SHORT $LN19@P_Objectpl
  0003e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00045	74 37		 je	 SHORT $LN18@P_Objectpl
$LN19@P_Objectpl:
  00047	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0004e	74 1d		 je	 SHORT $LN20@P_Objectpl
  00050	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0005a	05 00 00 00 00	 add	 eax, OFFSET _players
  0005f	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00062	75 09		 jne	 SHORT $LN20@P_Objectpl
  00064	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  0006b	74 11		 je	 SHORT $LN18@P_Objectpl
$LN20@P_Objectpl:
  0006d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00070	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00076	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0007c	74 12		 je	 SHORT $LN17@P_Objectpl
$LN18@P_Objectpl:

; 5073 : 		&& !cv_analog.value) || (splitscreen
; 5074 : 		&& player == &players[secondarydisplayplayer] && !cv_analog2.value)
; 5075 : 		|| (player->pflags & PF_SPINNING)))
; 5076 : 	{
; 5077 : 		player->mo->angle = (cmd->angleturn<<16 /* not FRACBITS */);

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00081	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00085	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00088	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0008b	8b 02		 mov	 eax, DWORD PTR [edx]
  0008d	89 48 24	 mov	 DWORD PTR [eax+36], ecx
$LN17@P_Objectpl:

; 5078 : 	}
; 5079 : 
; 5080 : 	ticruned++;

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticruned
  00095	83 c0 01	 add	 eax, 1
  00098	a3 00 00 00 00	 mov	 DWORD PTR _ticruned, eax

; 5081 : 	if (!(cmd->angleturn & TICCMD_RECEIVED))

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  000a0	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000a4	83 e1 01	 and	 ecx, 1
  000a7	75 0d		 jne	 SHORT $LN21@P_Objectpl

; 5082 : 		ticmiss++;

  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticmiss
  000ae	83 c0 01	 add	 eax, 1
  000b1	a3 00 00 00 00	 mov	 DWORD PTR _ticmiss, eax
$LN21@P_Objectpl:

; 5083 : 
; 5084 : 	if (cmd->buttons & BT_JUMP)

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  000b9	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000bd	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  000c3	74 1b		 je	 SHORT $LN22@P_Objectpl

; 5085 : 		player->mo->z += FRACUNIT*cv_speed.value;

  000c5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_speed+20
  000d0	c1 e2 10	 shl	 edx, 16			; 00000010H
  000d3	03 51 18	 add	 edx, DWORD PTR [ecx+24]
  000d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  000de	eb 2a		 jmp	 SHORT $LN24@P_Objectpl
$LN22@P_Objectpl:

; 5086 : 	else if (cmd->buttons & BT_USE)

  000e0	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  000e3	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000e7	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000ed	74 1b		 je	 SHORT $LN24@P_Objectpl

; 5087 : 		player->mo->z -= FRACUNIT*cv_speed.value;

  000ef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f4	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_speed+20
  000fa	c1 e2 10	 shl	 edx, 16			; 00000010H
  000fd	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00100	2b c2		 sub	 eax, edx
  00102	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN24@P_Objectpl:

; 5088 : 
; 5089 : 	if (player->mo->target && player->mo->z > player->mo->ceilingz - player->mo->target->height)

  0010a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0010d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010f	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  00116	74 40		 je	 SHORT $LN25@P_Objectpl
  00118	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00120	8b 02		 mov	 eax, DWORD PTR [edx]
  00122	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00125	8b 12		 mov	 edx, DWORD PTR [edx]
  00127	8b 92 98 00 00
	00		 mov	 edx, DWORD PTR [edx+152]
  0012d	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00130	2b 42 44	 sub	 eax, DWORD PTR [edx+68]
  00133	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00136	7e 20		 jle	 SHORT $LN25@P_Objectpl

; 5090 : 		player->mo->z = player->mo->ceilingz - player->mo->target->height;

  00138	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0013b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00140	8b 02		 mov	 eax, DWORD PTR [edx]
  00142	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00148	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0014b	2b 42 44	 sub	 eax, DWORD PTR [edx+68]
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00151	8b 11		 mov	 edx, DWORD PTR [ecx]
  00153	89 42 18	 mov	 DWORD PTR [edx+24], eax
  00156	eb 40		 jmp	 SHORT $LN27@P_Objectpl
$LN25@P_Objectpl:

; 5091 : 	else if (!player->mo->target && player->mo->z > player->mo->ceilingz - player->mo->height)

  00158	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  00164	75 32		 jne	 SHORT $LN27@P_Objectpl
  00166	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00169	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0016e	8b 02		 mov	 eax, DWORD PTR [edx]
  00170	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00173	8b 12		 mov	 edx, DWORD PTR [edx]
  00175	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00178	2b 42 44	 sub	 eax, DWORD PTR [edx+68]
  0017b	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0017e	7e 18		 jle	 SHORT $LN27@P_Objectpl

; 5092 : 		player->mo->z = player->mo->ceilingz - player->mo->height;

  00180	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00183	8b 08		 mov	 ecx, DWORD PTR [eax]
  00185	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00188	8b 02		 mov	 eax, DWORD PTR [edx]
  0018a	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  0018d	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  00190	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00193	8b 02		 mov	 eax, DWORD PTR [edx]
  00195	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN27@P_Objectpl:

; 5093 : 	if (player->mo->z < player->mo->floorz)

  00198	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001a0	8b 02		 mov	 eax, DWORD PTR [edx]
  001a2	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  001a5	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  001a8	7d 10		 jge	 SHORT $LN28@P_Objectpl

; 5094 : 		player->mo->z = player->mo->floorz;

  001aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  001af	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001b2	8b 02		 mov	 eax, DWORD PTR [edx]
  001b4	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  001b7	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN28@P_Objectpl:

; 5095 : 
; 5096 : 	if (cmd->forwardmove != 0)

  001ba	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  001bd	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001c0	85 c9		 test	 ecx, ecx
  001c2	74 72		 je	 SHORT $LN29@P_Objectpl

; 5097 : 	{
; 5098 : 		P_Thrust(player->mo, player->mo->angle, cmd->forwardmove*(FRACUNIT/4));

  001c4	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  001c7	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001ca	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  001cd	51		 push	 ecx
  001ce	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001d1	8b 02		 mov	 eax, DWORD PTR [edx]
  001d3	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001d6	51		 push	 ecx
  001d7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001da	8b 02		 mov	 eax, DWORD PTR [edx]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 _P_Thrust
  001e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5099 : 		P_TeleportMove(player->mo, player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z);

  001e5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ea	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  001ed	52		 push	 edx
  001ee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001f6	8b 02		 mov	 eax, DWORD PTR [edx]
  001f8	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  001fb	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  001fe	51		 push	 ecx
  001ff	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00202	8b 02		 mov	 eax, DWORD PTR [edx]
  00204	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00207	8b 11		 mov	 edx, DWORD PTR [ecx]
  00209	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0020c	03 42 48	 add	 eax, DWORD PTR [edx+72]
  0020f	50		 push	 eax
  00210	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00213	8b 11		 mov	 edx, DWORD PTR [ecx]
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 _P_TeleportMove
  0021b	83 c4 10	 add	 esp, 16			; 00000010H

; 5100 : 		player->mo->momx = player->mo->momy = 0;

  0021e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  0022a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0022d	8b 02		 mov	 eax, DWORD PTR [edx]
  0022f	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
$LN29@P_Objectpl:

; 5101 : 	}
; 5102 : 	if (cmd->sidemove != 0)

  00236	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00239	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  0023d	85 c9		 test	 ecx, ecx
  0023f	74 79		 je	 SHORT $LN30@P_Objectpl

; 5103 : 	{
; 5104 : 		P_Thrust(player->mo, player->mo->angle-ANGLE_90, cmd->sidemove*(FRACUNIT/4));

  00241	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00244	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00248	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  0024b	51		 push	 ecx
  0024c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0024f	8b 02		 mov	 eax, DWORD PTR [edx]
  00251	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00254	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  0025a	51		 push	 ecx
  0025b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0025e	8b 02		 mov	 eax, DWORD PTR [edx]
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 _P_Thrust
  00266	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5105 : 		P_TeleportMove(player->mo, player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, player->mo->z);

  00269	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0026c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00271	52		 push	 edx
  00272	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00275	8b 08		 mov	 ecx, DWORD PTR [eax]
  00277	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0027a	8b 02		 mov	 eax, DWORD PTR [edx]
  0027c	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0027f	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  00282	51		 push	 ecx
  00283	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00286	8b 02		 mov	 eax, DWORD PTR [edx]
  00288	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0028b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0028d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00290	03 42 48	 add	 eax, DWORD PTR [edx+72]
  00293	50		 push	 eax
  00294	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00297	8b 11		 mov	 edx, DWORD PTR [ecx]
  00299	52		 push	 edx
  0029a	e8 00 00 00 00	 call	 _P_TeleportMove
  0029f	83 c4 10	 add	 esp, 16			; 00000010H

; 5106 : 		player->mo->momx = player->mo->momy = 0;

  002a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a7	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  002ae	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002b1	8b 02		 mov	 eax, DWORD PTR [edx]
  002b3	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
$LN30@P_Objectpl:

; 5107 : 	}
; 5108 : 
; 5109 : 	if (cmd->buttons & BT_CAMLEFT && !(player->pflags & PF_SKIDDOWN))

  002ba	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  002bd	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  002c1	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  002c7	0f 84 16 01 00
	00		 je	 $LN31@P_Objectpl
  002cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002d0	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002d6	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  002dc	0f 85 01 01 00
	00		 jne	 $LN31@P_Objectpl
$LN104@P_Objectpl:

; 5110 : 	{
; 5111 : 		do
; 5112 : 		{
; 5113 : 			player->currentthing--;

  002e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e5	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  002eb	83 e9 01	 sub	 ecx, 1
  002ee	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002f1	89 8a e0 01 00
	00		 mov	 DWORD PTR [edx+480], ecx

; 5114 : 			if (player->currentthing <= 0)

  002f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002fa	83 b8 e0 01 00
	00 00		 cmp	 DWORD PTR [eax+480], 0
  00301	7f 0d		 jg	 SHORT $LN33@P_Objectpl

; 5115 : 				player->currentthing = NUMMOBJTYPES-1;

  00303	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00306	c7 80 e0 01 00
	00 bd 01 00 00	 mov	 DWORD PTR [eax+480], 445 ; 000001bdH
$LN33@P_Objectpl:

; 5116 : 		}while (mobjinfo[player->currentthing].doomednum == -1
; 5117 : 			|| player->currentthing == MT_NIGHTSDRONE
; 5118 : 			|| mobjinfo[player->currentthing].flags & MF_AMBIENT
; 5119 : 			|| mobjinfo[player->currentthing].flags & MF_NOSECTOR
; 5120 : 			|| mobjinfo[player->currentthing].flags & MF_BOSS
; 5121 : 			|| (states[mobjinfo[player->currentthing].spawnstate].sprite == SPR_DISS && player->currentthing != MT_MINUS));

  00310	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00313	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  0031a	83 b9 00 00 00
	00 ff		 cmp	 DWORD PTR _mobjinfo[ecx], -1
  00321	74 bf		 je	 SHORT $LN104@P_Objectpl
  00323	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00326	81 b8 e0 01 00
	00 f4 00 00 00	 cmp	 DWORD PTR [eax+480], 244 ; 000000f4H
  00330	74 b0		 je	 SHORT $LN104@P_Objectpl
  00332	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00335	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  0033c	8b 91 58 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+88]
  00342	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00348	75 98		 jne	 SHORT $LN104@P_Objectpl
  0034a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0034d	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  00354	8b 91 58 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+88]
  0035a	83 e2 08	 and	 edx, 8
  0035d	75 83		 jne	 SHORT $LN104@P_Objectpl
  0035f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00362	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  00369	8b 91 58 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+88]
  0036f	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00375	0f 85 67 ff ff
	ff		 jne	 $LN104@P_Objectpl
  0037b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0037e	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  00385	6b 91 04 00 00
	00 1c		 imul	 edx, DWORD PTR _mobjinfo[ecx+4], 28
  0038c	81 ba 00 00 00
	00 c1 00 00 00	 cmp	 DWORD PTR _states[edx], 193 ; 000000c1H
  00396	75 10		 jne	 SHORT $LN34@P_Objectpl
  00398	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0039b	83 b8 e0 01 00
	00 18		 cmp	 DWORD PTR [eax+480], 24	; 00000018H
  003a2	0f 85 3a ff ff
	ff		 jne	 $LN104@P_Objectpl
$LN34@P_Objectpl:

; 5122 : 
; 5123 : 		CONS_Printf("Current mapthing is %d\n", mobjinfo[player->currentthing].doomednum);

  003a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ab	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  003b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx]
  003b8	52		 push	 edx
  003b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IBBIFLJG@Current?5mapthing?5is?5?$CFd?6@
  003be	e8 00 00 00 00	 call	 _CONS_Printf
  003c3	83 c4 08	 add	 esp, 8

; 5124 : 		player->pflags |= PF_SKIDDOWN;

  003c6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003c9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  003cf	81 c9 00 00 00
	02		 or	 ecx, 33554432		; 02000000H
  003d5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003d8	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5125 : 	}

  003de	e9 21 01 00 00	 jmp	 $LN35@P_Objectpl
$LN31@P_Objectpl:

; 5126 : 	else if (cmd->buttons & BT_CAMRIGHT && !(player->pflags & PF_JUMPDOWN))

  003e3	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  003e6	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  003ea	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  003f0	0f 84 0e 01 00
	00		 je	 $LN35@P_Objectpl
  003f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003f9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  003ff	83 e1 08	 and	 ecx, 8
  00402	0f 85 fc 00 00
	00		 jne	 $LN35@P_Objectpl
$LN109@P_Objectpl:

; 5127 : 	{
; 5128 : 		do
; 5129 : 		{
; 5130 : 			player->currentthing++;

  00408	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0040b	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  00411	83 c1 01	 add	 ecx, 1
  00414	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00417	89 8a e0 01 00
	00		 mov	 DWORD PTR [edx+480], ecx

; 5131 : 			if (player->currentthing >= NUMMOBJTYPES)

  0041d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00420	81 b8 e0 01 00
	00 be 01 00 00	 cmp	 DWORD PTR [eax+480], 446 ; 000001beH
  0042a	7c 0d		 jl	 SHORT $LN36@P_Objectpl

; 5132 : 				player->currentthing = 0;

  0042c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0042f	c7 80 e0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+480], 0
$LN36@P_Objectpl:

; 5133 : 		}while (mobjinfo[player->currentthing].doomednum == -1
; 5134 : 			|| player->currentthing == MT_NIGHTSDRONE
; 5135 : 			|| mobjinfo[player->currentthing].flags & MF_AMBIENT
; 5136 : 			|| mobjinfo[player->currentthing].flags & MF_NOSECTOR
; 5137 : 			|| mobjinfo[player->currentthing].flags & MF_BOSS
; 5138 : 			|| (states[mobjinfo[player->currentthing].spawnstate].sprite == SPR_DISS && player->currentthing != MT_MINUS));

  00439	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0043c	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  00443	83 b9 00 00 00
	00 ff		 cmp	 DWORD PTR _mobjinfo[ecx], -1
  0044a	74 bc		 je	 SHORT $LN109@P_Objectpl
  0044c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0044f	81 b8 e0 01 00
	00 f4 00 00 00	 cmp	 DWORD PTR [eax+480], 244 ; 000000f4H
  00459	74 ad		 je	 SHORT $LN109@P_Objectpl
  0045b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0045e	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  00465	8b 91 58 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+88]
  0046b	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00471	75 95		 jne	 SHORT $LN109@P_Objectpl
  00473	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00476	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  0047d	8b 91 58 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+88]
  00483	83 e2 08	 and	 edx, 8
  00486	75 80		 jne	 SHORT $LN109@P_Objectpl
  00488	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0048b	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  00492	8b 91 58 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+88]
  00498	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  0049e	0f 85 64 ff ff
	ff		 jne	 $LN109@P_Objectpl
  004a4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004a7	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  004ae	6b 91 04 00 00
	00 1c		 imul	 edx, DWORD PTR _mobjinfo[ecx+4], 28
  004b5	81 ba 00 00 00
	00 c1 00 00 00	 cmp	 DWORD PTR _states[edx], 193 ; 000000c1H
  004bf	75 10		 jne	 SHORT $LN37@P_Objectpl
  004c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004c4	83 b8 e0 01 00
	00 18		 cmp	 DWORD PTR [eax+480], 24	; 00000018H
  004cb	0f 85 37 ff ff
	ff		 jne	 $LN109@P_Objectpl
$LN37@P_Objectpl:

; 5139 : 
; 5140 : 		CONS_Printf("Current mapthing is %d\n", mobjinfo[player->currentthing].doomednum);

  004d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004d4	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  004db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx]
  004e1	52		 push	 edx
  004e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IBBIFLJG@Current?5mapthing?5is?5?$CFd?6@
  004e7	e8 00 00 00 00	 call	 _CONS_Printf
  004ec	83 c4 08	 add	 esp, 8

; 5141 : 		player->pflags |= PF_JUMPDOWN;

  004ef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004f2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  004f8	83 c9 08	 or	 ecx, 8
  004fb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004fe	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN35@P_Objectpl:

; 5142 : 	}
; 5143 : 
; 5144 : 	// Place an object and add it to the maplist
; 5145 : 	if (player->mo->target)

  00504	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00507	8b 08		 mov	 ecx, DWORD PTR [eax]
  00509	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  00510	0f 84 56 06 00
	00		 je	 $LN39@P_Objectpl

; 5146 : 		if (cmd->buttons & BT_ATTACK && !(player->pflags & PF_ATTACKDOWN))

  00516	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00519	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0051d	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00523	0f 84 43 06 00
	00		 je	 $LN39@P_Objectpl
  00529	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0052c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00532	83 e1 02	 and	 ecx, 2
  00535	0f 85 31 06 00
	00		 jne	 $LN39@P_Objectpl

; 5147 : 		{
; 5148 : 			mapthing_t *mt;
; 5149 : 			mapthing_t *oldmapthings;
; 5150 : 			mobj_t *newthing;
; 5151 : 			INT16 x,y,z = 0;

  0053b	33 c0		 xor	 eax, eax
  0053d	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax

; 5152 : 			UINT8 zshift;
; 5153 : 
; 5154 : 			if (player->mo->target->flags & MF_SPAWNCEILING)

  00541	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00544	8b 08		 mov	 ecx, DWORD PTR [eax]
  00546	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0054c	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  0054f	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00554	0f 84 67 01 00
	00		 je	 $LN40@P_Objectpl

; 5155 : 			{
; 5156 : 				// Move down from the ceiling
; 5157 : 
; 5158 : 				if (cv_snapto.value)

  0055a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_snapto+20, 0
  00561	0f 84 aa 00 00
	00		 je	 $LN42@P_Objectpl

; 5159 : 				{
; 5160 : 					if (cv_snapto.value == 1) // Snap to floor

  00567	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_snapto+20, 1
  0056e	75 1e		 jne	 SHORT $LN44@P_Objectpl

; 5161 : 						z = (INT16)((player->mo->subsector->sector->ceilingheight - player->mo->floorz)>>FRACBITS);

  00570	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00573	8b 08		 mov	 ecx, DWORD PTR [eax]
  00575	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00578	8b 02		 mov	 eax, DWORD PTR [edx]
  0057a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0057d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0057f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00582	2b 42 38	 sub	 eax, DWORD PTR [edx+56]
  00585	c1 f8 10	 sar	 eax, 16			; 00000010H
  00588	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax
  0058c	eb 7e		 jmp	 SHORT $LN48@P_Objectpl
$LN44@P_Objectpl:

; 5162 : 					else if (cv_snapto.value == 2) // Snap to ceiling

  0058e	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_snapto+20, 2
  00595	75 2c		 jne	 SHORT $LN46@P_Objectpl

; 5163 : 						z = (INT16)((player->mo->subsector->sector->ceilingheight - player->mo->ceilingz - player->mo->target->height)>>FRACBITS);

  00597	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0059a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0059c	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0059f	8b 02		 mov	 eax, DWORD PTR [edx]
  005a1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  005a6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  005a9	2b 42 3c	 sub	 eax, DWORD PTR [edx+60]
  005ac	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005af	8b 11		 mov	 edx, DWORD PTR [ecx]
  005b1	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  005b7	2b 41 44	 sub	 eax, DWORD PTR [ecx+68]
  005ba	c1 f8 10	 sar	 eax, 16			; 00000010H
  005bd	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax
  005c1	eb 49		 jmp	 SHORT $LN48@P_Objectpl
$LN46@P_Objectpl:

; 5164 : 					else if (cv_snapto.value == 3) // Snap to middle

  005c3	83 3d 14 00 00
	00 03		 cmp	 DWORD PTR _cv_snapto+20, 3
  005ca	75 40		 jne	 SHORT $LN48@P_Objectpl

; 5165 : 						z = (INT16)((player->mo->subsector->sector->ceilingheight - (player->mo->ceilingz - player->mo->floorz)/2 - player->mo->target->height/2)>>FRACBITS);

  005cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d1	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  005d4	8b 0a		 mov	 ecx, DWORD PTR [edx]
  005d6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005d9	8b 02		 mov	 eax, DWORD PTR [edx]
  005db	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005de	8b 12		 mov	 edx, DWORD PTR [edx]
  005e0	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  005e3	2b 42 38	 sub	 eax, DWORD PTR [edx+56]
  005e6	99		 cdq
  005e7	2b c2		 sub	 eax, edx
  005e9	d1 f8		 sar	 eax, 1
  005eb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  005ee	2b c8		 sub	 ecx, eax
  005f0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005f3	8b 02		 mov	 eax, DWORD PTR [edx]
  005f5	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  005fb	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  005fe	99		 cdq
  005ff	2b c2		 sub	 eax, edx
  00601	d1 f8		 sar	 eax, 1
  00603	2b c8		 sub	 ecx, eax
  00605	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00608	66 89 4d e0	 mov	 WORD PTR _z$12[ebp], cx
$LN48@P_Objectpl:

; 5166 : 				}

  0060c	e9 ab 00 00 00	 jmp	 $LN50@P_Objectpl
$LN42@P_Objectpl:

; 5167 : 				else
; 5168 : 				{
; 5169 : 					if (cv_grid.value)

  00611	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_grid+20, 0
  00618	0f 84 82 00 00
	00		 je	 $LN49@P_Objectpl

; 5170 : 					{
; 5171 : 						INT32 adjust;
; 5172 : 
; 5173 : 						adjust = cv_grid.value - (((player->mo->subsector->sector->ceilingheight -

  0061e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00621	8b 08		 mov	 ecx, DWORD PTR [eax]
  00623	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00626	8b 02		 mov	 eax, DWORD PTR [edx]
  00628	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0062b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0062d	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
  00630	8b 11		 mov	 edx, DWORD PTR [ecx]
  00632	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00635	2b 02		 sub	 eax, DWORD PTR [edx]
  00637	c1 f8 10	 sar	 eax, 16			; 00000010H
  0063a	99		 cdq
  0063b	f7 3d 14 00 00
	00		 idiv	 DWORD PTR _cv_grid+20
  00641	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_grid+20
  00646	2b c2		 sub	 eax, edx
  00648	89 45 d8	 mov	 DWORD PTR _adjust$10[ebp], eax

; 5174 : 							player->mo->subsector->sector->floorheight)>>FRACBITS) % cv_grid.value);
; 5175 : 
; 5176 : 						z = (INT16)(((player->mo->subsector->sector->ceilingheight - player->mo->z))>>FRACBITS);

  0064b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0064e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00650	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00653	8b 02		 mov	 eax, DWORD PTR [edx]
  00655	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00658	8b 11		 mov	 edx, DWORD PTR [ecx]
  0065a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0065d	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00660	c1 f8 10	 sar	 eax, 16			; 00000010H
  00663	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax

; 5177 : 						z = (INT16)(z + (INT16)adjust);

  00667	0f bf 45 e0	 movsx	 eax, WORD PTR _z$12[ebp]
  0066b	0f bf 4d d8	 movsx	 ecx, WORD PTR _adjust$10[ebp]
  0066f	03 c1		 add	 eax, ecx
  00671	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax

; 5178 : 
; 5179 : 						// round to the nearest cv_grid.value
; 5180 : 						z = (INT16)((z + cv_grid.value/2) % cv_grid.value);

  00675	0f bf 4d e0	 movsx	 ecx, WORD PTR _z$12[ebp]
  00679	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_grid+20
  0067e	99		 cdq
  0067f	2b c2		 sub	 eax, edx
  00681	d1 f8		 sar	 eax, 1
  00683	03 c1		 add	 eax, ecx
  00685	99		 cdq
  00686	f7 3d 14 00 00
	00		 idiv	 DWORD PTR _cv_grid+20
  0068c	66 89 55 e0	 mov	 WORD PTR _z$12[ebp], dx

; 5181 : 						z = (INT16)(z - (INT16)adjust);

  00690	0f bf 45 e0	 movsx	 eax, WORD PTR _z$12[ebp]
  00694	0f bf 4d d8	 movsx	 ecx, WORD PTR _adjust$10[ebp]
  00698	2b c1		 sub	 eax, ecx
  0069a	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax

; 5182 : 					}

  0069e	eb 1c		 jmp	 SHORT $LN50@P_Objectpl
$LN49@P_Objectpl:

; 5183 : 					else
; 5184 : 						z = (INT16)((player->mo->subsector->sector->ceilingheight - player->mo->z)>>FRACBITS);

  006a0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  006a5	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  006a8	8b 02		 mov	 eax, DWORD PTR [edx]
  006aa	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  006ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  006af	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  006b2	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  006b5	c1 f8 10	 sar	 eax, 16			; 00000010H
  006b8	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax
$LN50@P_Objectpl:

; 5185 : 				}
; 5186 : 			}

  006bc	e9 10 01 00 00	 jmp	 $LN59@P_Objectpl
$LN40@P_Objectpl:

; 5187 : 			else
; 5188 : 			{
; 5189 : 				if (cv_snapto.value)

  006c1	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_snapto+20, 0
  006c8	0f 84 a6 00 00
	00		 je	 $LN51@P_Objectpl

; 5190 : 				{
; 5191 : 					if (cv_snapto.value == 1) // Snap to floor

  006ce	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_snapto+20, 1
  006d5	75 1d		 jne	 SHORT $LN53@P_Objectpl

; 5192 : 						z = (INT16)((player->mo->floorz - player->mo->subsector->sector->floorheight)>>FRACBITS);

  006d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006da	8b 08		 mov	 ecx, DWORD PTR [eax]
  006dc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006df	8b 02		 mov	 eax, DWORD PTR [edx]
  006e1	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  006e4	8b 02		 mov	 eax, DWORD PTR [edx]
  006e6	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  006e9	2b 08		 sub	 ecx, DWORD PTR [eax]
  006eb	c1 f9 10	 sar	 ecx, 16			; 00000010H
  006ee	66 89 4d e0	 mov	 WORD PTR _z$12[ebp], cx
  006f2	eb 7e		 jmp	 SHORT $LN57@P_Objectpl
$LN53@P_Objectpl:

; 5193 : 					else if (cv_snapto.value == 2) // Snap to ceiling

  006f4	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_snapto+20, 2
  006fb	75 2b		 jne	 SHORT $LN55@P_Objectpl

; 5194 : 						z = (INT16)((player->mo->ceilingz - player->mo->target->height - player->mo->subsector->sector->floorheight)>>FRACBITS);

  006fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00700	8b 08		 mov	 ecx, DWORD PTR [eax]
  00702	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00705	8b 02		 mov	 eax, DWORD PTR [edx]
  00707	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  0070d	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00710	2b 42 44	 sub	 eax, DWORD PTR [edx+68]
  00713	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00716	8b 11		 mov	 edx, DWORD PTR [ecx]
  00718	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
  0071b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0071d	2b 02		 sub	 eax, DWORD PTR [edx]
  0071f	c1 f8 10	 sar	 eax, 16			; 00000010H
  00722	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax
  00726	eb 4a		 jmp	 SHORT $LN57@P_Objectpl
$LN55@P_Objectpl:

; 5195 : 					else if (cv_snapto.value == 3) // Snap to middle

  00728	83 3d 14 00 00
	00 03		 cmp	 DWORD PTR _cv_snapto+20, 3
  0072f	75 41		 jne	 SHORT $LN57@P_Objectpl

; 5196 : 						z = (INT16)((((player->mo->ceilingz - player->mo->floorz)/2)-(player->mo->target->height/2)-player->mo->subsector->sector->floorheight)>>FRACBITS);

  00731	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00734	8b 08		 mov	 ecx, DWORD PTR [eax]
  00736	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00739	8b 02		 mov	 eax, DWORD PTR [edx]
  0073b	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  0073e	2b 48 38	 sub	 ecx, DWORD PTR [eax+56]
  00741	8b c1		 mov	 eax, ecx
  00743	99		 cdq
  00744	2b c2		 sub	 eax, edx
  00746	8b c8		 mov	 ecx, eax
  00748	d1 f9		 sar	 ecx, 1
  0074a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0074d	8b 02		 mov	 eax, DWORD PTR [edx]
  0074f	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00755	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00758	99		 cdq
  00759	2b c2		 sub	 eax, edx
  0075b	d1 f8		 sar	 eax, 1
  0075d	2b c8		 sub	 ecx, eax
  0075f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00762	8b 10		 mov	 edx, DWORD PTR [eax]
  00764	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00767	8b 10		 mov	 edx, DWORD PTR [eax]
  00769	2b 0a		 sub	 ecx, DWORD PTR [edx]
  0076b	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0076e	66 89 4d e0	 mov	 WORD PTR _z$12[ebp], cx
$LN57@P_Objectpl:

; 5197 : 				}

  00772	eb 5d		 jmp	 SHORT $LN59@P_Objectpl
$LN51@P_Objectpl:

; 5198 : 				else
; 5199 : 				{
; 5200 : 					if (cv_grid.value)

  00774	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_grid+20, 0
  0077b	74 39		 je	 SHORT $LN58@P_Objectpl

; 5201 : 					{
; 5202 : 						z = (INT16)(((player->mo->subsector->sector->ceilingheight - player->mo->z))>>FRACBITS);

  0077d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00780	8b 08		 mov	 ecx, DWORD PTR [eax]
  00782	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00785	8b 02		 mov	 eax, DWORD PTR [edx]
  00787	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0078a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0078c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0078f	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00792	c1 f8 10	 sar	 eax, 16			; 00000010H
  00795	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax

; 5203 : 
; 5204 : 						// round to the nearest cv_grid.value
; 5205 : 						z = (INT16)((z + cv_grid.value/2) % cv_grid.value);

  00799	0f bf 4d e0	 movsx	 ecx, WORD PTR _z$12[ebp]
  0079d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_grid+20
  007a2	99		 cdq
  007a3	2b c2		 sub	 eax, edx
  007a5	d1 f8		 sar	 eax, 1
  007a7	03 c1		 add	 eax, ecx
  007a9	99		 cdq
  007aa	f7 3d 14 00 00
	00		 idiv	 DWORD PTR _cv_grid+20
  007b0	66 89 55 e0	 mov	 WORD PTR _z$12[ebp], dx

; 5206 : 					}

  007b4	eb 1b		 jmp	 SHORT $LN59@P_Objectpl
$LN58@P_Objectpl:

; 5207 : 					else
; 5208 : 						z = (INT16)((player->mo->z - player->mo->subsector->sector->floorheight)>>FRACBITS);

  007b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  007bb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007be	8b 02		 mov	 eax, DWORD PTR [edx]
  007c0	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  007c3	8b 02		 mov	 eax, DWORD PTR [edx]
  007c5	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  007c8	2b 08		 sub	 ecx, DWORD PTR [eax]
  007ca	c1 f9 10	 sar	 ecx, 16			; 00000010H
  007cd	66 89 4d e0	 mov	 WORD PTR _z$12[ebp], cx
$LN59@P_Objectpl:

; 5209 : 				}
; 5210 : 			}
; 5211 : 
; 5212 : 			// Starts have height limitations for some reason.
; 5213 : 			if (cv_mapthingnum.value >= 1 && cv_mapthingnum.value <= 99)

  007d1	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_mapthingnum+20, 1
  007d8	0f 8c 9d 00 00
	00		 jl	 $LN60@P_Objectpl
  007de	83 3d 14 00 00
	00 63		 cmp	 DWORD PTR _cv_mapthingnum+20, 99 ; 00000063H
  007e5	0f 8f 90 00 00
	00		 jg	 $LN60@P_Objectpl

; 5214 : 			{
; 5215 : 				if (z >= (1 << (16-(ZSHIFT+1))))

  007eb	0f bf 45 e0	 movsx	 eax, WORD PTR _z$12[ebp]
  007ef	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  007f4	7c 7c		 jl	 SHORT $LN62@P_Objectpl

; 5216 : 				{
; 5217 : 					CONS_Printf("Sorry, you're too %s to place this object (max: %d %s).\n",

  007f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  007fb	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00801	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00804	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00809	74 0c		 je	 SHORT $LN90@P_Objectpl
  0080b	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv553[ebp], OFFSET ??_C@_0BC@DGJNOOL@below?5top?5ceiling@
  00815	eb 0a		 jmp	 SHORT $LN91@P_Objectpl
$LN90@P_Objectpl:
  00817	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv553[ebp], OFFSET ??_C@_0BD@MDNKOOPK@above?5bottom?5floor@
$LN91@P_Objectpl:
  00821	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00824	8b 11		 mov	 edx, DWORD PTR [ecx]
  00826	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0082c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0082f	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00835	74 0c		 je	 SHORT $LN92@P_Objectpl
  00837	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv561[ebp], OFFSET ??_C@_03IMLOALHE@low@
  00841	eb 0a		 jmp	 SHORT $LN93@P_Objectpl
$LN92@P_Objectpl:
  00843	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv561[ebp], OFFSET ??_C@_04DGANLAON@high@
$LN93@P_Objectpl:
  0084d	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv553[ebp]
  00853	52		 push	 edx
  00854	68 00 08 00 00	 push	 2048			; 00000800H
  00859	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv561[ebp]
  0085f	50		 push	 eax
  00860	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@BIDHEMBC@Sorry?0?5you?8re?5too?5?$CFs?5to?5place?5t@
  00865	e8 00 00 00 00	 call	 _CONS_Printf
  0086a	83 c4 10	 add	 esp, 16			; 00000010H

; 5218 : 						player->mo->target->flags & MF_SPAWNCEILING ? "low" : "high",
; 5219 : 						(1 << (16-(ZSHIFT+1))),
; 5220 : 						player->mo->target->flags & MF_SPAWNCEILING ? "below top ceiling" : "above bottom floor");
; 5221 : 					return;

  0086d	e9 9b 07 00 00	 jmp	 $LN88@P_Objectpl
$LN62@P_Objectpl:

; 5222 : 				}
; 5223 : 				zshift = ZSHIFT+1; // Shift it over 5 bits to make room for the flag info.

  00872	c6 45 df 05	 mov	 BYTE PTR _zshift$11[ebp], 5

; 5224 : 			}

  00876	e9 8b 00 00 00	 jmp	 $LN61@P_Objectpl
$LN60@P_Objectpl:

; 5225 : 			else
; 5226 : 			{
; 5227 : 				if (z >= (1 << (16-ZSHIFT)))

  0087b	0f bf 45 e0	 movsx	 eax, WORD PTR _z$12[ebp]
  0087f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00884	7c 7c		 jl	 SHORT $LN63@P_Objectpl

; 5228 : 				{
; 5229 : 					CONS_Printf("Sorry, you're too %s to place this object (max: %d %s).\n",

  00886	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00889	8b 08		 mov	 ecx, DWORD PTR [eax]
  0088b	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00891	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00894	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00899	74 0c		 je	 SHORT $LN94@P_Objectpl
  0089b	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv571[ebp], OFFSET ??_C@_0BC@DGJNOOL@below?5top?5ceiling@
  008a5	eb 0a		 jmp	 SHORT $LN95@P_Objectpl
$LN94@P_Objectpl:
  008a7	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv571[ebp], OFFSET ??_C@_0BD@MDNKOOPK@above?5bottom?5floor@
$LN95@P_Objectpl:
  008b1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  008b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  008b6	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  008bc	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  008bf	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  008c5	74 0c		 je	 SHORT $LN96@P_Objectpl
  008c7	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv611[ebp], OFFSET ??_C@_03IMLOALHE@low@
  008d1	eb 0a		 jmp	 SHORT $LN97@P_Objectpl
$LN96@P_Objectpl:
  008d3	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv611[ebp], OFFSET ??_C@_04DGANLAON@high@
$LN97@P_Objectpl:
  008dd	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv571[ebp]
  008e3	52		 push	 edx
  008e4	68 00 10 00 00	 push	 4096			; 00001000H
  008e9	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv611[ebp]
  008ef	50		 push	 eax
  008f0	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@BIDHEMBC@Sorry?0?5you?8re?5too?5?$CFs?5to?5place?5t@
  008f5	e8 00 00 00 00	 call	 _CONS_Printf
  008fa	83 c4 10	 add	 esp, 16			; 00000010H

; 5230 : 						player->mo->target->flags & MF_SPAWNCEILING ? "low" : "high",
; 5231 : 						(1 << (16-ZSHIFT)),
; 5232 : 						player->mo->target->flags & MF_SPAWNCEILING ? "below top ceiling" : "above bottom floor");
; 5233 : 					return;

  008fd	e9 0b 07 00 00	 jmp	 $LN88@P_Objectpl
$LN63@P_Objectpl:

; 5234 : 				}
; 5235 : 				zshift = ZSHIFT;

  00902	c6 45 df 04	 mov	 BYTE PTR _zshift$11[ebp], 4
$LN61@P_Objectpl:

; 5236 : 			}
; 5237 : 
; 5238 : 			z <<= zshift;

  00906	66 0f b6 4d df	 movzx	 cx, BYTE PTR _zshift$11[ebp]
  0090b	66 8b 45 e0	 mov	 ax, WORD PTR _z$12[ebp]
  0090f	66 d3 e0	 shl	 ax, cl
  00912	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax

; 5239 : 
; 5240 : 			// Currently only the Starpost uses this
; 5241 : 			if (player->mo->target->flags & MF_SPECIALFLAGS)

  00916	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00919	8b 08		 mov	 ecx, DWORD PTR [eax]
  0091b	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00921	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00924	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00929	74 1b		 je	 SHORT $LN64@P_Objectpl

; 5242 : 			{
; 5243 : 				if (player->mo->target->type == MT_STARPOST)

  0092b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0092e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00930	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00936	83 7a 7c 4a	 cmp	 DWORD PTR [edx+124], 74	; 0000004aH
  0093a	75 08		 jne	 SHORT $LN66@P_Objectpl

; 5244 : 					z = (INT16)z;

  0093c	66 8b 45 e0	 mov	 ax, WORD PTR _z$12[ebp]
  00940	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax
$LN66@P_Objectpl:

; 5245 : 			}

  00944	eb 11		 jmp	 SHORT $LN65@P_Objectpl
$LN64@P_Objectpl:

; 5246 : 			else
; 5247 : 				z = (INT16)(z + (INT16)cv_objflags.value); // Easy/med/hard/ambush/etc.

  00946	0f bf 45 e0	 movsx	 eax, WORD PTR _z$12[ebp]
  0094a	0f bf 0d 14 00
	00 00		 movsx	 ecx, WORD PTR _cv_objflags+20
  00951	03 c1		 add	 eax, ecx
  00953	66 89 45 e0	 mov	 WORD PTR _z$12[ebp], ax
$LN65@P_Objectpl:

; 5248 : 
; 5249 : 			oldmapthings = mapthings;

  00957	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  0095c	89 45 f0	 mov	 DWORD PTR _oldmapthings$16[ebp], eax

; 5250 : 			nummapthings++;

  0095f	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummapthings
  00964	83 c0 01	 add	 eax, 1
  00967	a3 00 00 00 00	 mov	 DWORD PTR _nummapthings, eax

; 5251 : #if 0
; 5252 : 			mapthings = M_Memcpy(Z_Calloc(nummapthings * sizeof (*mapthings), PU_LEVEL, NULL), oldmapthings, sizeof (mapthing_t)*(nummapthings-1));
; 5253 : 
; 5254 : 			Z_Free(oldmapthings);
; 5255 : #else
; 5256 : 			mapthings = Z_Realloc(oldmapthings, nummapthings * sizeof (*mapthings), PU_LEVEL, NULL);

  0096c	6a 00		 push	 0
  0096e	6a 00		 push	 0
  00970	6a 32		 push	 50			; 00000032H
  00972	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  00979	50		 push	 eax
  0097a	8b 4d f0	 mov	 ecx, DWORD PTR _oldmapthings$16[ebp]
  0097d	51		 push	 ecx
  0097e	e8 00 00 00 00	 call	 _Z_ReallocAlign
  00983	83 c4 14	 add	 esp, 20			; 00000014H
  00986	a3 00 00 00 00	 mov	 DWORD PTR _mapthings, eax

; 5257 : #endif
; 5258 : 
; 5259 : 			mt = mapthings + nummapthings-1;

  0098b	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  00992	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mapthings
  00998	8d 54 01 ec	 lea	 edx, DWORD PTR [ecx+eax-20]
  0099c	89 55 f4	 mov	 DWORD PTR _mt$17[ebp], edx

; 5260 : 
; 5261 : 			if (cv_grid.value)

  0099f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_grid+20, 0
  009a6	74 32		 je	 SHORT $LN67@P_Objectpl

; 5262 : 			{
; 5263 : 				x = (INT16)(P_GridSnap(player->mo->x)>>FRACBITS);

  009a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  009ad	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  009b0	52		 push	 edx
  009b1	e8 00 00 00 00	 call	 _P_GridSnap
  009b6	83 c4 04	 add	 esp, 4
  009b9	c1 f8 10	 sar	 eax, 16			; 00000010H
  009bc	66 89 45 e8	 mov	 WORD PTR _x$14[ebp], ax

; 5264 : 				y = (INT16)(P_GridSnap(player->mo->y)>>FRACBITS);

  009c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  009c5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  009c8	52		 push	 edx
  009c9	e8 00 00 00 00	 call	 _P_GridSnap
  009ce	83 c4 04	 add	 esp, 4
  009d1	c1 f8 10	 sar	 eax, 16			; 00000010H
  009d4	66 89 45 e4	 mov	 WORD PTR _y$13[ebp], ax

; 5265 : 			}

  009d8	eb 1e		 jmp	 SHORT $LN68@P_Objectpl
$LN67@P_Objectpl:

; 5266 : 			else
; 5267 : 			{
; 5268 : 				x = (INT16)(player->mo->x>>FRACBITS);

  009da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  009df	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  009e2	c1 fa 10	 sar	 edx, 16			; 00000010H
  009e5	66 89 55 e8	 mov	 WORD PTR _x$14[ebp], dx

; 5269 : 				y = (INT16)(player->mo->y>>FRACBITS);

  009e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  009ee	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  009f1	c1 fa 10	 sar	 edx, 16			; 00000010H
  009f4	66 89 55 e4	 mov	 WORD PTR _y$13[ebp], dx
$LN68@P_Objectpl:

; 5270 : 			}
; 5271 : 
; 5272 : 			mt->x = x;

  009f8	8b 45 f4	 mov	 eax, DWORD PTR _mt$17[ebp]
  009fb	66 8b 4d e8	 mov	 cx, WORD PTR _x$14[ebp]
  009ff	66 89 08	 mov	 WORD PTR [eax], cx

; 5273 : 			mt->y = y;

  00a02	8b 45 f4	 mov	 eax, DWORD PTR _mt$17[ebp]
  00a05	66 8b 4d e4	 mov	 cx, WORD PTR _y$13[ebp]
  00a09	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 5274 : 			mt->angle = (INT16)FixedInt(AngleFixed(player->mo->angle));

  00a0d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a10	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a12	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00a15	52		 push	 edx
  00a16	e8 00 00 00 00	 call	 _AngleFixed
  00a1b	83 c4 04	 add	 esp, 4
  00a1e	50		 push	 eax
  00a1f	e8 00 00 00 00	 call	 _FixedInt
  00a24	83 c4 04	 add	 esp, 4
  00a27	8b 4d f4	 mov	 ecx, DWORD PTR _mt$17[ebp]
  00a2a	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 5275 : 
; 5276 : 			if (cv_mapthingnum.value != 0)

  00a2e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mapthingnum+20, 0
  00a35	74 25		 je	 SHORT $LN69@P_Objectpl

; 5277 : 			{
; 5278 : 				mt->type = (INT16)cv_mapthingnum.value;

  00a37	8b 45 f4	 mov	 eax, DWORD PTR _mt$17[ebp]
  00a3a	66 8b 0d 14 00
	00 00		 mov	 cx, WORD PTR _cv_mapthingnum+20
  00a41	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 5279 : 				CONS_Printf("Placed object mapthingum %d, not the one below.\n", mt->type);

  00a45	8b 45 f4	 mov	 eax, DWORD PTR _mt$17[ebp]
  00a48	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00a4c	51		 push	 ecx
  00a4d	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KDINGLJB@Placed?5object?5mapthingum?5?$CFd?0?5no@
  00a52	e8 00 00 00 00	 call	 _CONS_Printf
  00a57	83 c4 08	 add	 esp, 8

; 5280 : 			}

  00a5a	eb 18		 jmp	 SHORT $LN70@P_Objectpl
$LN69@P_Objectpl:

; 5281 : 			else
; 5282 : 				mt->type = (INT16)mobjinfo[player->currentthing].doomednum;

  00a5c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a5f	6b 88 e0 01 00
	00 60		 imul	 ecx, DWORD PTR [eax+480], 96
  00a66	8b 55 f4	 mov	 edx, DWORD PTR _mt$17[ebp]
  00a69	66 8b 81 00 00
	00 00		 mov	 ax, WORD PTR _mobjinfo[ecx]
  00a70	66 89 42 06	 mov	 WORD PTR [edx+6], ax
$LN70@P_Objectpl:

; 5283 : 
; 5284 : 			mt->options = z;

  00a74	8b 45 f4	 mov	 eax, DWORD PTR _mt$17[ebp]
  00a77	66 8b 4d e0	 mov	 cx, WORD PTR _z$12[ebp]
  00a7b	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 5285 : 
; 5286 : 			newthing = P_SpawnMobj(x << FRACBITS, y << FRACBITS, player->mo->target->flags & MF_SPAWNCEILING ? player->mo->subsector->sector->ceilingheight - ((z>>zshift)<<FRACBITS) : player->mo->subsector->sector->floorheight + ((z>>zshift)<<FRACBITS), player->currentthing);

  00a7f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a82	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a84	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00a8a	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00a8d	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00a92	74 24		 je	 SHORT $LN98@P_Objectpl
  00a94	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a97	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a99	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00a9c	8b 10		 mov	 edx, DWORD PTR [eax]
  00a9e	0f bf 45 e0	 movsx	 eax, WORD PTR _z$12[ebp]
  00aa2	0f b6 4d df	 movzx	 ecx, BYTE PTR _zshift$11[ebp]
  00aa6	d3 f8		 sar	 eax, cl
  00aa8	c1 e0 10	 shl	 eax, 16			; 00000010H
  00aab	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00aae	2b c8		 sub	 ecx, eax
  00ab0	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv709[ebp], ecx
  00ab6	eb 1f		 jmp	 SHORT $LN99@P_Objectpl
$LN98@P_Objectpl:
  00ab8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00abb	8b 02		 mov	 eax, DWORD PTR [edx]
  00abd	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00ac0	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ac2	0f bf 45 e0	 movsx	 eax, WORD PTR _z$12[ebp]
  00ac6	0f b6 4d df	 movzx	 ecx, BYTE PTR _zshift$11[ebp]
  00aca	d3 f8		 sar	 eax, cl
  00acc	c1 e0 10	 shl	 eax, 16			; 00000010H
  00acf	03 02		 add	 eax, DWORD PTR [edx]
  00ad1	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv709[ebp], eax
$LN99@P_Objectpl:
  00ad7	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00ada	8b 91 e0 01 00
	00		 mov	 edx, DWORD PTR [ecx+480]
  00ae0	52		 push	 edx
  00ae1	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv709[ebp]
  00ae7	50		 push	 eax
  00ae8	0f bf 4d e4	 movsx	 ecx, WORD PTR _y$13[ebp]
  00aec	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00aef	51		 push	 ecx
  00af0	0f bf 55 e8	 movsx	 edx, WORD PTR _x$14[ebp]
  00af4	c1 e2 10	 shl	 edx, 16			; 00000010H
  00af7	52		 push	 edx
  00af8	e8 00 00 00 00	 call	 _P_SpawnMobj
  00afd	83 c4 10	 add	 esp, 16			; 00000010H
  00b00	89 45 ec	 mov	 DWORD PTR _newthing$15[ebp], eax

; 5287 : 			newthing->angle = player->mo->angle;

  00b03	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b06	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b08	8b 55 ec	 mov	 edx, DWORD PTR _newthing$15[ebp]
  00b0b	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00b0e	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 5288 : 			newthing->spawnpoint = mt;

  00b11	8b 45 ec	 mov	 eax, DWORD PTR _newthing$15[ebp]
  00b14	8b 4d f4	 mov	 ecx, DWORD PTR _mt$17[ebp]
  00b17	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 5289 : 			CONS_Printf("Placed object type %d at %d, %d, %d, %d\n", newthing->info->doomednum, mt->x, mt->y, newthing->z>>FRACBITS, mt->angle);

  00b1d	8b 45 f4	 mov	 eax, DWORD PTR _mt$17[ebp]
  00b20	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00b24	51		 push	 ecx
  00b25	8b 55 ec	 mov	 edx, DWORD PTR _newthing$15[ebp]
  00b28	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00b2b	c1 f8 10	 sar	 eax, 16			; 00000010H
  00b2e	50		 push	 eax
  00b2f	8b 4d f4	 mov	 ecx, DWORD PTR _mt$17[ebp]
  00b32	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  00b36	52		 push	 edx
  00b37	8b 45 f4	 mov	 eax, DWORD PTR _mt$17[ebp]
  00b3a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00b3d	51		 push	 ecx
  00b3e	8b 55 ec	 mov	 edx, DWORD PTR _newthing$15[ebp]
  00b41	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00b47	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b49	51		 push	 ecx
  00b4a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@HJNKDBMH@Placed?5object?5type?5?$CFd?5at?5?$CFd?0?5?$CFd@
  00b4f	e8 00 00 00 00	 call	 _CONS_Printf
  00b54	83 c4 18	 add	 esp, 24			; 00000018H

; 5290 : 
; 5291 : 			player->pflags |= PF_ATTACKDOWN;

  00b57	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b5a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00b60	83 c9 02	 or	 ecx, 2
  00b63	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b66	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN39@P_Objectpl:

; 5292 : 		}
; 5293 : 
; 5294 : 	if (cmd->buttons & BT_TAUNT) // Remove any objects near you

  00b6c	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00b6f	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00b73	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00b79	0f 84 48 02 00
	00		 je	 $LN9@P_Objectpl

; 5295 : 	{
; 5296 : 		thinker_t *th;
; 5297 : 		mobj_t *mo2;
; 5298 : 		boolean done = false;

  00b7f	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _done$7[ebp], 0

; 5299 : 
; 5300 : 		// scan the thinkers
; 5301 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00b86	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00b8b	89 45 d4	 mov	 DWORD PTR _th$9[ebp], eax
  00b8e	eb 09		 jmp	 SHORT $LN10@P_Objectpl
$LN8@P_Objectpl:
  00b90	8b 45 d4	 mov	 eax, DWORD PTR _th$9[ebp]
  00b93	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00b96	89 4d d4	 mov	 DWORD PTR _th$9[ebp], ecx
$LN10@P_Objectpl:
  00b99	81 7d d4 00 00
	00 00		 cmp	 DWORD PTR _th$9[ebp], OFFSET _thinkercap
  00ba0	0f 84 21 02 00
	00		 je	 $LN9@P_Objectpl

; 5302 : 		{
; 5303 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00ba6	8b 45 d4	 mov	 eax, DWORD PTR _th$9[ebp]
  00ba9	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00bb0	74 02		 je	 SHORT $LN72@P_Objectpl

; 5304 : 				continue;

  00bb2	eb dc		 jmp	 SHORT $LN8@P_Objectpl
$LN72@P_Objectpl:

; 5305 : 
; 5306 : 			mo2 = (mobj_t *)th;

  00bb4	8b 45 d4	 mov	 eax, DWORD PTR _th$9[ebp]
  00bb7	89 45 d0	 mov	 DWORD PTR _mo2$8[ebp], eax

; 5307 : 
; 5308 : 			if (mo2 == player->mo->target)

  00bba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bbd	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bbf	8b 55 d0	 mov	 edx, DWORD PTR _mo2$8[ebp]
  00bc2	3b 91 98 00 00
	00		 cmp	 edx, DWORD PTR [ecx+152]
  00bc8	75 02		 jne	 SHORT $LN73@P_Objectpl

; 5309 : 				continue;

  00bca	eb c4		 jmp	 SHORT $LN8@P_Objectpl
$LN73@P_Objectpl:

; 5310 : 
; 5311 : 			if (mo2 == player->mo)

  00bcc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bcf	8b 4d d0	 mov	 ecx, DWORD PTR _mo2$8[ebp]
  00bd2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00bd4	75 02		 jne	 SHORT $LN74@P_Objectpl

; 5312 : 				continue;

  00bd6	eb b8		 jmp	 SHORT $LN8@P_Objectpl
$LN74@P_Objectpl:

; 5313 : 
; 5314 : 			if (P_AproxDistance(P_AproxDistance(mo2->x - player->mo->x, mo2->y - player->mo->y), mo2->z - player->mo->z) < player->mo->radius)

  00bd8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bdb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bdd	8b 55 d0	 mov	 edx, DWORD PTR _mo2$8[ebp]
  00be0	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00be3	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  00be6	50		 push	 eax
  00be7	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00bea	8b 11		 mov	 edx, DWORD PTR [ecx]
  00bec	8b 45 d0	 mov	 eax, DWORD PTR _mo2$8[ebp]
  00bef	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00bf2	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  00bf5	51		 push	 ecx
  00bf6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bf9	8b 02		 mov	 eax, DWORD PTR [edx]
  00bfb	8b 4d d0	 mov	 ecx, DWORD PTR _mo2$8[ebp]
  00bfe	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00c01	2b 50 10	 sub	 edx, DWORD PTR [eax+16]
  00c04	52		 push	 edx
  00c05	e8 00 00 00 00	 call	 _P_AproxDistance
  00c0a	83 c4 08	 add	 esp, 8
  00c0d	50		 push	 eax
  00c0e	e8 00 00 00 00	 call	 _P_AproxDistance
  00c13	83 c4 08	 add	 esp, 8
  00c16	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00c19	8b 11		 mov	 edx, DWORD PTR [ecx]
  00c1b	3b 42 40	 cmp	 eax, DWORD PTR [edx+64]
  00c1e	0f 8d 97 01 00
	00		 jge	 $LN77@P_Objectpl

; 5315 : 			{
; 5316 : 				if (mo2->spawnpoint)

  00c24	8b 45 d0	 mov	 eax, DWORD PTR _mo2$8[ebp]
  00c27	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  00c2e	0f 84 7a 01 00
	00		 je	 $LN76@P_Objectpl

; 5317 : 				{
; 5318 : 					mapthing_t *mt;
; 5319 : 					size_t i;
; 5320 : 
; 5321 : 					P_SetMobjState(mo2, S_DISS);

  00c34	68 4f 06 00 00	 push	 1615			; 0000064fH
  00c39	8b 45 d0	 mov	 eax, DWORD PTR _mo2$8[ebp]
  00c3c	50		 push	 eax
  00c3d	e8 00 00 00 00	 call	 _P_SetMobjState
  00c42	83 c4 08	 add	 esp, 8

; 5322 : 					mt = mapthings;

  00c45	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  00c4a	89 45 c8	 mov	 DWORD PTR _mt$6[ebp], eax

; 5323 : 					for (i = 0; i < nummapthings; i++, mt++)

  00c4d	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  00c54	eb 12		 jmp	 SHORT $LN13@P_Objectpl
$LN11@P_Objectpl:
  00c56	8b 45 c4	 mov	 eax, DWORD PTR _i$5[ebp]
  00c59	83 c0 01	 add	 eax, 1
  00c5c	89 45 c4	 mov	 DWORD PTR _i$5[ebp], eax
  00c5f	8b 4d c8	 mov	 ecx, DWORD PTR _mt$6[ebp]
  00c62	83 c1 14	 add	 ecx, 20			; 00000014H
  00c65	89 4d c8	 mov	 DWORD PTR _mt$6[ebp], ecx
$LN13@P_Objectpl:
  00c68	8b 45 c4	 mov	 eax, DWORD PTR _i$5[ebp]
  00c6b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _nummapthings
  00c71	0f 83 35 01 00
	00		 jae	 $LN12@P_Objectpl

; 5324 : 					{
; 5325 : 						if (done)

  00c77	83 7d cc 00	 cmp	 DWORD PTR _done$7[ebp], 0
  00c7b	74 02		 je	 SHORT $LN78@P_Objectpl

; 5326 : 							continue;

  00c7d	eb d7		 jmp	 SHORT $LN11@P_Objectpl
$LN78@P_Objectpl:

; 5327 : 
; 5328 : 						if (mt->mobj == mo2) // Found it! Now to delete...

  00c7f	8b 45 c8	 mov	 eax, DWORD PTR _mt$6[ebp]
  00c82	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00c85	3b 4d d0	 cmp	 ecx, DWORD PTR _mo2$8[ebp]
  00c88	0f 85 19 01 00
	00		 jne	 $LN79@P_Objectpl

; 5329 : 						{
; 5330 : 							mapthing_t *oldmapthings;
; 5331 : 							mapthing_t *oldmt;
; 5332 : 							mapthing_t *newmt;
; 5333 : 							size_t z;
; 5334 : 
; 5335 : 							CONS_Printf("Deleting...\n");

  00c8e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KPNHJII@Deleting?4?4?4?6@
  00c93	e8 00 00 00 00	 call	 _CONS_Printf
  00c98	83 c4 04	 add	 esp, 4

; 5336 : 
; 5337 : 							oldmapthings = mapthings;

  00c9b	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  00ca0	89 45 c0	 mov	 DWORD PTR _oldmapthings$4[ebp], eax

; 5338 : 							nummapthings--;

  00ca3	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummapthings
  00ca8	83 e8 01	 sub	 eax, 1
  00cab	a3 00 00 00 00	 mov	 DWORD PTR _nummapthings, eax

; 5339 : 							mapthings = Z_Calloc(nummapthings * sizeof (*mapthings), PU_LEVEL, NULL);

  00cb0	6a 00		 push	 0
  00cb2	6a 00		 push	 0
  00cb4	6a 32		 push	 50			; 00000032H
  00cb6	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  00cbd	50		 push	 eax
  00cbe	e8 00 00 00 00	 call	 _Z_CallocAlign
  00cc3	83 c4 10	 add	 esp, 16			; 00000010H
  00cc6	a3 00 00 00 00	 mov	 DWORD PTR _mapthings, eax

; 5340 : 
; 5341 : 							// Gotta rebuild the WHOLE MAPTHING LIST,
; 5342 : 							// otherwise it doesn't work!
; 5343 : 							oldmt = oldmapthings;

  00ccb	8b 45 c0	 mov	 eax, DWORD PTR _oldmapthings$4[ebp]
  00cce	89 45 bc	 mov	 DWORD PTR _oldmt$3[ebp], eax

; 5344 : 							newmt = mapthings;

  00cd1	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  00cd6	89 45 b8	 mov	 DWORD PTR _newmt$2[ebp], eax

; 5345 : 							for (z = 0; z < nummapthings+1; z++, oldmt++, newmt++)

  00cd9	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _z$1[ebp], 0
  00ce0	eb 1b		 jmp	 SHORT $LN16@P_Objectpl
$LN14@P_Objectpl:
  00ce2	8b 45 b4	 mov	 eax, DWORD PTR _z$1[ebp]
  00ce5	83 c0 01	 add	 eax, 1
  00ce8	89 45 b4	 mov	 DWORD PTR _z$1[ebp], eax
  00ceb	8b 4d bc	 mov	 ecx, DWORD PTR _oldmt$3[ebp]
  00cee	83 c1 14	 add	 ecx, 20			; 00000014H
  00cf1	89 4d bc	 mov	 DWORD PTR _oldmt$3[ebp], ecx
  00cf4	8b 55 b8	 mov	 edx, DWORD PTR _newmt$2[ebp]
  00cf7	83 c2 14	 add	 edx, 20			; 00000014H
  00cfa	89 55 b8	 mov	 DWORD PTR _newmt$2[ebp], edx
$LN16@P_Objectpl:
  00cfd	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummapthings
  00d02	83 c0 01	 add	 eax, 1
  00d05	39 45 b4	 cmp	 DWORD PTR _z$1[ebp], eax
  00d08	0f 83 86 00 00
	00		 jae	 $LN15@P_Objectpl

; 5346 : 							{
; 5347 : 								if (oldmt->mobj == mo2)

  00d0e	8b 45 bc	 mov	 eax, DWORD PTR _oldmt$3[ebp]
  00d11	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00d14	3b 4d d0	 cmp	 ecx, DWORD PTR _mo2$8[ebp]
  00d17	75 18		 jne	 SHORT $LN80@P_Objectpl

; 5348 : 								{
; 5349 : 									CONS_Printf("Deleted.\n");

  00d19	68 00 00 00 00	 push	 OFFSET ??_C@_09HOADHGNA@Deleted?4?6@
  00d1e	e8 00 00 00 00	 call	 _CONS_Printf
  00d23	83 c4 04	 add	 esp, 4

; 5350 : 									newmt--;

  00d26	8b 45 b8	 mov	 eax, DWORD PTR _newmt$2[ebp]
  00d29	83 e8 14	 sub	 eax, 20			; 00000014H
  00d2c	89 45 b8	 mov	 DWORD PTR _newmt$2[ebp], eax

; 5351 : 									continue;

  00d2f	eb b1		 jmp	 SHORT $LN14@P_Objectpl
$LN80@P_Objectpl:

; 5352 : 								}
; 5353 : 
; 5354 : 								newmt->x = oldmt->x;

  00d31	8b 45 b8	 mov	 eax, DWORD PTR _newmt$2[ebp]
  00d34	8b 4d bc	 mov	 ecx, DWORD PTR _oldmt$3[ebp]
  00d37	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00d3a	66 89 10	 mov	 WORD PTR [eax], dx

; 5355 : 								newmt->y = oldmt->y;

  00d3d	8b 45 b8	 mov	 eax, DWORD PTR _newmt$2[ebp]
  00d40	8b 4d bc	 mov	 ecx, DWORD PTR _oldmt$3[ebp]
  00d43	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  00d47	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 5356 : 								newmt->angle = oldmt->angle;

  00d4b	8b 45 b8	 mov	 eax, DWORD PTR _newmt$2[ebp]
  00d4e	8b 4d bc	 mov	 ecx, DWORD PTR _oldmt$3[ebp]
  00d51	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00d55	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 5357 : 								newmt->type = oldmt->type;

  00d59	8b 45 b8	 mov	 eax, DWORD PTR _newmt$2[ebp]
  00d5c	8b 4d bc	 mov	 ecx, DWORD PTR _oldmt$3[ebp]
  00d5f	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  00d63	66 89 50 06	 mov	 WORD PTR [eax+6], dx

; 5358 : 								newmt->options = oldmt->options;

  00d67	8b 45 b8	 mov	 eax, DWORD PTR _newmt$2[ebp]
  00d6a	8b 4d bc	 mov	 ecx, DWORD PTR _oldmt$3[ebp]
  00d6d	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  00d71	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 5359 : 
; 5360 : 								newmt->z = oldmt->z;

  00d75	8b 45 b8	 mov	 eax, DWORD PTR _newmt$2[ebp]
  00d78	8b 4d bc	 mov	 ecx, DWORD PTR _oldmt$3[ebp]
  00d7b	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  00d7f	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 5361 : 								newmt->mobj = oldmt->mobj;

  00d83	8b 45 b8	 mov	 eax, DWORD PTR _newmt$2[ebp]
  00d86	8b 4d bc	 mov	 ecx, DWORD PTR _oldmt$3[ebp]
  00d89	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00d8c	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 5362 : 							}

  00d8f	e9 4e ff ff ff	 jmp	 $LN14@P_Objectpl
$LN15@P_Objectpl:

; 5363 : 
; 5364 : 							Z_Free(oldmapthings);

  00d94	8b 45 c0	 mov	 eax, DWORD PTR _oldmapthings$4[ebp]
  00d97	50		 push	 eax
  00d98	e8 00 00 00 00	 call	 _Z_Free
  00d9d	83 c4 04	 add	 esp, 4

; 5365 : 							done = true;

  00da0	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _done$7[ebp], 1
$LN79@P_Objectpl:

; 5366 : 						}
; 5367 : 					}

  00da7	e9 aa fe ff ff	 jmp	 $LN11@P_Objectpl
$LN12@P_Objectpl:

; 5368 : 				}

  00dac	eb 0d		 jmp	 SHORT $LN77@P_Objectpl
$LN76@P_Objectpl:

; 5369 : 				else
; 5370 : 					CONS_Printf("You cannot delete this item because it doesn't have a mapthing!\n");

  00dae	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@FIHLLDFH@You?5cannot?5delete?5this?5item?5bec@
  00db3	e8 00 00 00 00	 call	 _CONS_Printf
  00db8	83 c4 04	 add	 esp, 4
$LN77@P_Objectpl:

; 5371 : 			}
; 5372 : 			done = false;

  00dbb	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _done$7[ebp], 0

; 5373 : 		}

  00dc2	e9 c9 fd ff ff	 jmp	 $LN8@P_Objectpl
$LN9@P_Objectpl:

; 5374 : 	}
; 5375 : 
; 5376 : 	if (!(cmd->buttons & BT_ATTACK))

  00dc7	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00dca	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00dce	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00dd4	75 15		 jne	 SHORT $LN81@P_Objectpl

; 5377 : 		player->pflags &= ~PF_ATTACKDOWN;

  00dd6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dd9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00ddf	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00de2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00de5	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN81@P_Objectpl:

; 5378 : 
; 5379 : 	if (!(cmd->buttons & BT_CAMLEFT))

  00deb	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00dee	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00df2	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00df8	75 18		 jne	 SHORT $LN82@P_Objectpl

; 5380 : 		player->pflags &= ~PF_SKIDDOWN;

  00dfa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dfd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00e03	81 e1 ff ff ff
	fd		 and	 ecx, -33554433		; fdffffffH
  00e09	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e0c	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN82@P_Objectpl:

; 5381 : 
; 5382 : 	if (!(cmd->buttons & BT_CAMRIGHT))

  00e12	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00e15	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00e19	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00e1f	75 15		 jne	 SHORT $LN83@P_Objectpl

; 5383 : 		player->pflags &= ~PF_JUMPDOWN;

  00e21	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e24	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00e2a	83 e1 f7	 and	 ecx, -9			; fffffff7H
  00e2d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e30	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN83@P_Objectpl:

; 5384 : 
; 5385 : 	if (!player->mo->target || player->currentthing != player->mo->target->type)

  00e36	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e39	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e3b	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  00e42	74 1d		 je	 SHORT $LN86@P_Objectpl
  00e44	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e47	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e49	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00e4f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e52	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  00e58	3b 4a 7c	 cmp	 ecx, DWORD PTR [edx+124]
  00e5b	0f 84 ee 00 00
	00		 je	 $LN84@P_Objectpl
$LN86@P_Objectpl:

; 5386 : 	{
; 5387 : 		if (player->mo->target)

  00e61	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e64	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e66	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  00e6d	74 14		 je	 SHORT $LN87@P_Objectpl

; 5388 : 			P_RemoveMobj(player->mo->target); // The object has MF_NOTHINK, so S_DISS would never pass.

  00e6f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e72	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e74	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00e7a	52		 push	 edx
  00e7b	e8 00 00 00 00	 call	 _P_RemoveMobj
  00e80	83 c4 04	 add	 esp, 4
$LN87@P_Objectpl:

; 5389 : 
; 5390 : 		currentitem = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z, player->currentthing);

  00e83	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e86	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  00e8c	51		 push	 ecx
  00e8d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e90	8b 02		 mov	 eax, DWORD PTR [edx]
  00e92	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00e95	51		 push	 ecx
  00e96	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e99	8b 02		 mov	 eax, DWORD PTR [edx]
  00e9b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00e9e	51		 push	 ecx
  00e9f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ea2	8b 02		 mov	 eax, DWORD PTR [edx]
  00ea4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00ea7	51		 push	 ecx
  00ea8	e8 00 00 00 00	 call	 _P_SpawnMobj
  00ead	83 c4 10	 add	 esp, 16			; 00000010H
  00eb0	89 45 f8	 mov	 DWORD PTR _currentitem$[ebp], eax

; 5391 : 		currentitem->flags |= MF_NOTHINK;

  00eb3	8b 45 f8	 mov	 eax, DWORD PTR _currentitem$[ebp]
  00eb6	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00eb9	81 c9 00 00 20
	00		 or	 ecx, 2097152		; 00200000H
  00ebf	8b 55 f8	 mov	 edx, DWORD PTR _currentitem$[ebp]
  00ec2	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5392 : 		currentitem->angle = player->mo->angle;

  00ec5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ec8	8b 08		 mov	 ecx, DWORD PTR [eax]
  00eca	8b 55 f8	 mov	 edx, DWORD PTR _currentitem$[ebp]
  00ecd	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00ed0	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 5393 : 		currentitem->tics = -1;

  00ed3	8b 45 f8	 mov	 eax, DWORD PTR _currentitem$[ebp]
  00ed6	c7 40 58 ff ff
	ff ff		 mov	 DWORD PTR [eax+88], -1

; 5394 : 
; 5395 : 		P_SetTarget(&player->mo->target, currentitem);

  00edd	8b 45 f8	 mov	 eax, DWORD PTR _currentitem$[ebp]
  00ee0	50		 push	 eax
  00ee1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00ee4	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ee6	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00eec	52		 push	 edx
  00eed	e8 00 00 00 00	 call	 _P_SetTarget
  00ef2	83 c4 08	 add	 esp, 8

; 5396 : 		P_UnsetThingPosition(currentitem);

  00ef5	8b 45 f8	 mov	 eax, DWORD PTR _currentitem$[ebp]
  00ef8	50		 push	 eax
  00ef9	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00efe	83 c4 04	 add	 esp, 4

; 5397 : 		currentitem->flags |= MF_NOBLOCKMAP;

  00f01	8b 45 f8	 mov	 eax, DWORD PTR _currentitem$[ebp]
  00f04	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00f07	83 c9 10	 or	 ecx, 16			; 00000010H
  00f0a	8b 55 f8	 mov	 edx, DWORD PTR _currentitem$[ebp]
  00f0d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5398 : 		currentitem->flags |= MF_NOCLIP;

  00f10	8b 45 f8	 mov	 eax, DWORD PTR _currentitem$[ebp]
  00f13	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00f16	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00f1c	8b 55 f8	 mov	 edx, DWORD PTR _currentitem$[ebp]
  00f1f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5399 : 		P_SetThingPosition(currentitem);

  00f22	8b 45 f8	 mov	 eax, DWORD PTR _currentitem$[ebp]
  00f25	50		 push	 eax
  00f26	e8 00 00 00 00	 call	 _P_SetThingPosition
  00f2b	83 c4 04	 add	 esp, 4

; 5400 : 		currentitem->floorz = player->mo->floorz;

  00f2e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f31	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f33	8b 55 f8	 mov	 edx, DWORD PTR _currentitem$[ebp]
  00f36	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00f39	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 5401 : 		currentitem->ceilingz = player->mo->ceilingz;

  00f3c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f3f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f41	8b 55 f8	 mov	 edx, DWORD PTR _currentitem$[ebp]
  00f44	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00f47	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 5402 : 	}

  00f4a	e9 be 00 00 00	 jmp	 $LN88@P_Objectpl
$LN84@P_Objectpl:

; 5403 : 	else if (player->mo->target)

  00f4f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f52	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f54	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  00f5b	0f 84 ac 00 00
	00		 je	 $LN88@P_Objectpl

; 5404 : 	{
; 5405 : 		P_UnsetThingPosition(player->mo->target);

  00f61	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f64	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f66	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00f6c	52		 push	 edx
  00f6d	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00f72	83 c4 04	 add	 esp, 4

; 5406 : 		player->mo->target->x = player->mo->x;

  00f75	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f78	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f7a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f7d	8b 02		 mov	 eax, DWORD PTR [edx]
  00f7f	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00f85	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00f88	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 5407 : 		player->mo->target->y = player->mo->y;

  00f8b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f8e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f90	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f93	8b 02		 mov	 eax, DWORD PTR [edx]
  00f95	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00f9b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00f9e	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 5408 : 		player->mo->target->z = player->mo->z;

  00fa1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fa4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fa6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00fa9	8b 02		 mov	 eax, DWORD PTR [edx]
  00fab	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00fb1	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00fb4	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 5409 : 		P_SetThingPosition(player->mo->target);

  00fb7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fba	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fbc	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00fc2	52		 push	 edx
  00fc3	e8 00 00 00 00	 call	 _P_SetThingPosition
  00fc8	83 c4 04	 add	 esp, 4

; 5410 : 		player->mo->target->angle = player->mo->angle;

  00fcb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fce	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00fd3	8b 02		 mov	 eax, DWORD PTR [edx]
  00fd5	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00fdb	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00fde	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 5411 : 		player->mo->target->floorz = player->mo->floorz;

  00fe1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fe4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fe6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00fe9	8b 02		 mov	 eax, DWORD PTR [edx]
  00feb	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00ff1	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00ff4	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 5412 : 		player->mo->target->ceilingz = player->mo->ceilingz;

  00ff7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ffa	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ffc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00fff	8b 02		 mov	 eax, DWORD PTR [edx]
  01001	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  01007	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0100a	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$LN88@P_Objectpl:

; 5413 : 	}
; 5414 : }

  0100d	5f		 pop	 edi
  0100e	5e		 pop	 esi
  0100f	5b		 pop	 ebx
  01010	8b e5		 mov	 esp, ebp
  01012	5d		 pop	 ebp
  01013	c3		 ret	 0
_P_ObjectplaceMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_NiGHTSMovement
_TEXT	SEGMENT
tv3150 = -400						; size = 4
tv3093 = -400						; size = 4
tv3036 = -400						; size = 4
tv2979 = -400						; size = 4
tv2922 = -400						; size = 4
tv2865 = -400						; size = 4
tv2434 = -400						; size = 4
tv2320 = -400						; size = 4
tv2377 = -400						; size = 4
tv2263 = -400						; size = 4
tv2206 = -400						; size = 4
tv2149 = -400						; size = 4
tv2092 = -400						; size = 4
tv2035 = -400						; size = 4
tv1978 = -400						; size = 4
tv1921 = -400						; size = 4
tv1864 = -400						; size = 4
tv1807 = -400						; size = 4
tv1750 = -400						; size = 4
tv1693 = -400						; size = 4
tv1636 = -400						; size = 4
tv1579 = -400						; size = 4
tv1522 = -400						; size = 4
tv2605 = -400						; size = 4
tv1465 = -400						; size = 4
tv3207 = -400						; size = 4
tv3305 = -400						; size = 4
tv2776 = -400						; size = 4
tv2719 = -400						; size = 4
tv2662 = -400						; size = 4
tv1408 = -400						; size = 4
tv761 = -400						; size = 4
tv807 = -400						; size = 4
tv2548 = -400						; size = 4
tv2491 = -400						; size = 4
_angle$1 = -332						; size = 2
_shift$2 = -328						; size = 4
_oldmapthings$3 = -324					; size = 4
_mt$4 = -320						; size = 4
_oldmapthings$5 = -316					; size = 4
_mt$6 = -312						; size = 4
_oldmapthings$7 = -308					; size = 4
_mt$8 = -304						; size = 4
_oldmapthings$9 = -300					; size = 4
_mt$10 = -296						; size = 4
_temp$11 = -292						; size = 2
_angle$12 = -288					; size = 2
_oldmapthings$13 = -284					; size = 4
_mt$14 = -280						; size = 4
_framenum$15 = -276					; size = 4
_framenum$16 = -272					; size = 4
_framenum$17 = -268					; size = 4
_framenum$18 = -264					; size = 4
_framenum$19 = -260					; size = 4
_framenum$20 = -256					; size = 4
_framenum$21 = -252					; size = 4
_framenum$22 = -248					; size = 4
_framenum$23 = -244					; size = 4
_framenum$24 = -240					; size = 4
_framenum$25 = -236					; size = 4
_framenum$26 = -232					; size = 4
_framenum$27 = -228					; size = 4
_framenum$28 = -224					; size = 4
_framenum$29 = -220					; size = 4
_framenum$30 = -216					; size = 4
_framenum$31 = -212					; size = 4
_framenum$32 = -208					; size = 4
_framenum$33 = -204					; size = 4
_framenum$34 = -200					; size = 4
_framenum$35 = -196					; size = 4
_framenum$36 = -192					; size = 4
_framenum$37 = -188					; size = 4
_framenum$38 = -184					; size = 4
_framenum$39 = -180					; size = 4
_framenum$40 = -176					; size = 4
_framenum$41 = -172					; size = 4
_framenum$42 = -168					; size = 4
_framenum$43 = -164					; size = 4
_framenum$44 = -160					; size = 4
_framenum$45 = -156					; size = 4
_framenum$46 = -152					; size = 4
_bubble$47 = -148					; size = 4
_zh$48 = -144						; size = 4
_water$49 = -140					; size = 4
_speed$50 = -136					; size = 4
_fa$51 = -132						; size = 4
_dist$52 = -128						; size = 4
_fside$53 = -124					; size = 4
_fforward$54 = -120					; size = 4
_spawndist$55 = -116					; size = 4
_secondmobj$56 = -112					; size = 4
_firstmobj$57 = -108					; size = 4
_fa$58 = -104						; size = 4
_fa$59 = -100						; size = 4
_speed$60 = -96						; size = 4
_fa$61 = -92						; size = 4
_rover$62 = -88						; size = 4
_no3dfloorgrav$63 = -84					; size = 4
_dist2$64 = -80						; size = 4
_dist1$65 = -76						; size = 4
_i$ = -72						; size = 4
_thrustfactor$ = -68					; size = 4
_cmd$ = -64						; size = 4
_movingangle$ = -60					; size = 4
_radius$ = -56						; size = 4
_newy$ = -52						; size = 4
_newx$ = -48						; size = 4
_closestaxis$ = -44					; size = 4
_mo2$ = -40						; size = 4
_th$ = -36						; size = 4
_yspeed$ = -32						; size = 4
_xspeed$ = -28						; size = 4
_newangle$ = -24					; size = 2
_firstdrill$ = -20					; size = 4
_backwardaxis$ = -16					; size = 4
_moved$ = -12						; size = 4
_still$ = -8						; size = 4
_drillamt$ = -4						; size = 4
_player$ = 8						; size = 4
_P_NiGHTSMovement PROC					; COMDAT

; 3365 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3366 : 	fixed_t drillamt = 0;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _drillamt$[ebp], 0

; 3367 : 	boolean still = false, moved = false, backwardaxis = false, firstdrill;

  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _still$[ebp], 0
  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 0
  00021	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _backwardaxis$[ebp], 0

; 3368 : 	INT16 newangle = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 e8	 mov	 WORD PTR _newangle$[ebp], ax

; 3369 : 	fixed_t xspeed, yspeed;
; 3370 : 	thinker_t *th;
; 3371 : 	mobj_t *mo2;
; 3372 : 	mobj_t *closestaxis = NULL;

  0002e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _closestaxis$[ebp], 0

; 3373 : 	fixed_t newx, newy, radius;
; 3374 : 	angle_t movingangle;
; 3375 : 	ticcmd_t *cmd = &player->cmd;

  00035	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00038	83 c0 08	 add	 eax, 8
  0003b	89 45 c0	 mov	 DWORD PTR _cmd$[ebp], eax

; 3376 : 	INT32 thrustfactor;
; 3377 : 	INT32 i;
; 3378 : 
; 3379 : 	player->pflags &= ~PF_DRILLING;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00041	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00047	81 e1 ff ff ff
	fe		 and	 ecx, -16777217		; feffffffH
  0004d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00050	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3380 : 
; 3381 : 	firstdrill = false;

  00056	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _firstdrill$[ebp], 0

; 3382 : 
; 3383 : 	if (player->drillmeter > 96*20)

  0005d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00060	81 b8 c8 01 00
	00 80 07 00 00	 cmp	 DWORD PTR [eax+456], 1920 ; 00000780H
  0006a	7e 0d		 jle	 SHORT $LN11@P_NiGHTSMo

; 3384 : 		player->drillmeter = 96*20;

  0006c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006f	c7 80 c8 01 00
	00 80 07 00 00	 mov	 DWORD PTR [eax+456], 1920 ; 00000780H
$LN11@P_NiGHTSMo:

; 3385 : 
; 3386 : 	if (player->drilldelay)

  00079	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007c	0f b6 88 cc 01
	00 00		 movzx	 ecx, BYTE PTR [eax+460]
  00083	85 c9		 test	 ecx, ecx
  00085	74 15		 je	 SHORT $LN12@P_NiGHTSMo

; 3387 : 		player->drilldelay--;

  00087	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008a	8a 88 cc 01 00
	00		 mov	 cl, BYTE PTR [eax+460]
  00090	80 e9 01	 sub	 cl, 1
  00093	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00096	88 8a cc 01 00
	00		 mov	 BYTE PTR [edx+460], cl
$LN12@P_NiGHTSMo:

; 3388 : 
; 3389 : 	if (!(cmd->buttons & BT_JUMP))

  0009c	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  0009f	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000a3	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  000a9	75 19		 jne	 SHORT $LN14@P_NiGHTSMo

; 3390 : 	{
; 3391 : 		// Always have just a TINY bit of drill power.
; 3392 : 		if (player->drillmeter <= 0)

  000ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ae	83 b8 c8 01 00
	00 00		 cmp	 DWORD PTR [eax+456], 0
  000b5	7f 0d		 jg	 SHORT $LN14@P_NiGHTSMo

; 3393 : 			player->drillmeter = (TICRATE/10)/NEWTICRATERATIO;

  000b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ba	c7 80 c8 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+456], 3
$LN14@P_NiGHTSMo:

; 3394 : 	}
; 3395 : 
; 3396 : 	if (!player->mo->tracer)

  000c4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  000d0	75 11		 jne	 SHORT $LN15@P_NiGHTSMo

; 3397 : 	{
; 3398 : 		P_DeNightserizePlayer(player);

  000d2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _P_DeNightserizePlayer
  000db	83 c4 04	 add	 esp, 4

; 3399 : 		return;

  000de	e9 22 56 00 00	 jmp	 $LN539@P_NiGHTSMo
$LN15@P_NiGHTSMo:

; 3400 : 	}
; 3401 : 
; 3402 : 	if (leveltime % TICRATE == 0 && gametype != GT_RACE)

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  000e8	33 d2		 xor	 edx, edx
  000ea	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  000ef	f7 f1		 div	 ecx
  000f1	85 d2		 test	 edx, edx
  000f3	75 21		 jne	 SHORT $LN16@P_NiGHTSMo
  000f5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000fc	83 f8 02	 cmp	 eax, 2
  000ff	74 15		 je	 SHORT $LN16@P_NiGHTSMo

; 3403 : 		player->nightstime--;

  00101	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00104	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  0010a	83 e9 01	 sub	 ecx, 1
  0010d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00110	89 8a c4 01 00
	00		 mov	 DWORD PTR [edx+452], ecx
$LN16@P_NiGHTSMo:

; 3404 : 
; 3405 : 	if (!player->nightstime)

  00116	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00119	83 b8 c4 01 00
	00 00		 cmp	 DWORD PTR [eax+452], 0
  00120	75 21		 jne	 SHORT $LN17@P_NiGHTSMo

; 3406 : 	{
; 3407 : 		P_DeNightserizePlayer(player);

  00122	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 _P_DeNightserizePlayer
  0012b	83 c4 04	 add	 esp, 4

; 3408 : 		S_StartScreamSound(player->mo, sfx_lose);

  0012e	6a 5b		 push	 91			; 0000005bH
  00130	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00133	8b 08		 mov	 ecx, DWORD PTR [eax]
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 _S_StartScreamSound
  0013b	83 c4 08	 add	 esp, 8

; 3409 : 		return;

  0013e	e9 c2 55 00 00	 jmp	 $LN539@P_NiGHTSMo
$LN17@P_NiGHTSMo:

; 3410 : 	}
; 3411 : 
; 3412 : 	if (player->mo->z < player->mo->floorz)

  00143	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00146	8b 08		 mov	 ecx, DWORD PTR [eax]
  00148	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0014b	8b 02		 mov	 eax, DWORD PTR [edx]
  0014d	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00150	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  00153	7d 10		 jge	 SHORT $LN18@P_NiGHTSMo

; 3413 : 		player->mo->z = player->mo->floorz;

  00155	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0015d	8b 02		 mov	 eax, DWORD PTR [edx]
  0015f	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  00162	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN18@P_NiGHTSMo:

; 3414 : 
; 3415 : 	if (player->mo->z+player->mo->height > player->mo->ceilingz)

  00165	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0016d	8b 02		 mov	 eax, DWORD PTR [edx]
  0016f	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00172	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  00175	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00178	8b 02		 mov	 eax, DWORD PTR [edx]
  0017a	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  0017d	7e 18		 jle	 SHORT $LN19@P_NiGHTSMo

; 3416 : 		player->mo->z = player->mo->ceilingz - player->mo->height;

  0017f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00182	8b 08		 mov	 ecx, DWORD PTR [eax]
  00184	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00187	8b 02		 mov	 eax, DWORD PTR [edx]
  00189	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  0018c	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  0018f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00192	8b 02		 mov	 eax, DWORD PTR [edx]
  00194	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN19@P_NiGHTSMo:

; 3417 : 
; 3418 : 	newx = P_ReturnThrustX(player->mo, player->mo->angle, 3*FRACUNIT)+player->mo->x;

  00197	68 00 00 03 00	 push	 196608			; 00030000H
  0019c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019f	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a1	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001a4	52		 push	 edx
  001a5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001aa	51		 push	 ecx
  001ab	e8 00 00 00 00	 call	 _P_ReturnThrustX
  001b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001b6	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001b8	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  001bb	89 45 d0	 mov	 DWORD PTR _newx$[ebp], eax

; 3419 : 	newy = P_ReturnThrustY(player->mo, player->mo->angle, 3*FRACUNIT)+player->mo->y;

  001be	68 00 00 03 00	 push	 196608			; 00030000H
  001c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c8	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001cb	52		 push	 edx
  001cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d1	51		 push	 ecx
  001d2	e8 00 00 00 00	 call	 _P_ReturnThrustY
  001d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001da	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001dd	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001df	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  001e2	89 45 cc	 mov	 DWORD PTR _newy$[ebp], eax

; 3420 : 
; 3421 : 	if (!player->mo->target)

  001e5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ea	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  001f1	0f 85 ed 00 00
	00		 jne	 $LN20@P_NiGHTSMo

; 3422 : 	{
; 3423 : 		fixed_t dist1, dist2 = 0;

  001f7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _dist2$64[ebp], 0

; 3424 : 
; 3425 : 		// scan the thinkers
; 3426 : 		// to find the closest axis point
; 3427 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  001fe	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00203	89 45 dc	 mov	 DWORD PTR _th$[ebp], eax
  00206	eb 09		 jmp	 SHORT $LN4@P_NiGHTSMo
$LN2@P_NiGHTSMo:
  00208	8b 45 dc	 mov	 eax, DWORD PTR _th$[ebp]
  0020b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0020e	89 4d dc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_NiGHTSMo:
  00211	81 7d dc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00218	0f 84 ae 00 00
	00		 je	 $LN3@P_NiGHTSMo

; 3428 : 		{
; 3429 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  0021e	8b 45 dc	 mov	 eax, DWORD PTR _th$[ebp]
  00221	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00228	74 02		 je	 SHORT $LN21@P_NiGHTSMo

; 3430 : 				continue;

  0022a	eb dc		 jmp	 SHORT $LN2@P_NiGHTSMo
$LN21@P_NiGHTSMo:

; 3431 : 
; 3432 : 			mo2 = (mobj_t *)th;

  0022c	8b 45 dc	 mov	 eax, DWORD PTR _th$[ebp]
  0022f	89 45 d8	 mov	 DWORD PTR _mo2$[ebp], eax

; 3433 : 
; 3434 : 			if (mo2->type == MT_AXIS)

  00232	8b 45 d8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00235	81 78 7c f1 00
	00 00		 cmp	 DWORD PTR [eax+124], 241 ; 000000f1H
  0023c	0f 85 85 00 00
	00		 jne	 $LN26@P_NiGHTSMo

; 3435 : 			{
; 3436 : 				if (mo2->threshold == player->mare)

  00242	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00245	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+468]
  0024c	8b 55 d8	 mov	 edx, DWORD PTR _mo2$[ebp]
  0024f	39 8a a0 00 00
	00		 cmp	 DWORD PTR [edx+160], ecx
  00255	75 70		 jne	 SHORT $LN26@P_NiGHTSMo

; 3437 : 				{
; 3438 : 					if (closestaxis == NULL)

  00257	83 7d d4 00	 cmp	 DWORD PTR _closestaxis$[ebp], 0
  0025b	75 2f		 jne	 SHORT $LN24@P_NiGHTSMo

; 3439 : 					{
; 3440 : 						closestaxis = mo2;

  0025d	8b 45 d8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00260	89 45 d4	 mov	 DWORD PTR _closestaxis$[ebp], eax

; 3441 : 						dist2 = R_PointToDist2(newx, newy, mo2->x, mo2->y)-mo2->radius;

  00263	8b 45 d8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00266	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00269	51		 push	 ecx
  0026a	8b 55 d8	 mov	 edx, DWORD PTR _mo2$[ebp]
  0026d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00270	50		 push	 eax
  00271	8b 4d cc	 mov	 ecx, DWORD PTR _newy$[ebp]
  00274	51		 push	 ecx
  00275	8b 55 d0	 mov	 edx, DWORD PTR _newx$[ebp]
  00278	52		 push	 edx
  00279	e8 00 00 00 00	 call	 _R_PointToDist2
  0027e	83 c4 10	 add	 esp, 16			; 00000010H
  00281	8b 4d d8	 mov	 ecx, DWORD PTR _mo2$[ebp]
  00284	2b 41 40	 sub	 eax, DWORD PTR [ecx+64]
  00287	89 45 b0	 mov	 DWORD PTR _dist2$64[ebp], eax

; 3442 : 					}

  0028a	eb 3b		 jmp	 SHORT $LN26@P_NiGHTSMo
$LN24@P_NiGHTSMo:

; 3443 : 					else
; 3444 : 					{
; 3445 : 						dist1 = R_PointToDist2(newx, newy, mo2->x, mo2->y)-mo2->radius;

  0028c	8b 45 d8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0028f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00292	51		 push	 ecx
  00293	8b 55 d8	 mov	 edx, DWORD PTR _mo2$[ebp]
  00296	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00299	50		 push	 eax
  0029a	8b 4d cc	 mov	 ecx, DWORD PTR _newy$[ebp]
  0029d	51		 push	 ecx
  0029e	8b 55 d0	 mov	 edx, DWORD PTR _newx$[ebp]
  002a1	52		 push	 edx
  002a2	e8 00 00 00 00	 call	 _R_PointToDist2
  002a7	83 c4 10	 add	 esp, 16			; 00000010H
  002aa	8b 4d d8	 mov	 ecx, DWORD PTR _mo2$[ebp]
  002ad	2b 41 40	 sub	 eax, DWORD PTR [ecx+64]
  002b0	89 45 b4	 mov	 DWORD PTR _dist1$65[ebp], eax

; 3446 : 
; 3447 : 						if (dist1 < dist2)

  002b3	8b 45 b4	 mov	 eax, DWORD PTR _dist1$65[ebp]
  002b6	3b 45 b0	 cmp	 eax, DWORD PTR _dist2$64[ebp]
  002b9	7d 0c		 jge	 SHORT $LN26@P_NiGHTSMo

; 3448 : 						{
; 3449 : 							closestaxis = mo2;

  002bb	8b 45 d8	 mov	 eax, DWORD PTR _mo2$[ebp]
  002be	89 45 d4	 mov	 DWORD PTR _closestaxis$[ebp], eax

; 3450 : 							dist2 = dist1;

  002c1	8b 45 b4	 mov	 eax, DWORD PTR _dist1$65[ebp]
  002c4	89 45 b0	 mov	 DWORD PTR _dist2$64[ebp], eax
$LN26@P_NiGHTSMo:

; 3451 : 						}
; 3452 : 					}
; 3453 : 				}
; 3454 : 			}
; 3455 : 		}

  002c7	e9 3c ff ff ff	 jmp	 $LN2@P_NiGHTSMo
$LN3@P_NiGHTSMo:

; 3456 : 
; 3457 : 		P_SetTarget(&player->mo->target, closestaxis);

  002cc	8b 45 d4	 mov	 eax, DWORD PTR _closestaxis$[ebp]
  002cf	50		 push	 eax
  002d0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002d3	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d5	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  002db	52		 push	 edx
  002dc	e8 00 00 00 00	 call	 _P_SetTarget
  002e1	83 c4 08	 add	 esp, 8
$LN20@P_NiGHTSMo:

; 3458 : 	}
; 3459 : 
; 3460 : 	if (!player->mo->target) // Uh-oh!

  002e4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e9	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  002f0	75 12		 jne	 SHORT $LN27@P_NiGHTSMo

; 3461 : 	{
; 3462 : 		CONS_Printf("No axis points found!\n");

  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EMGHEBGJ@No?5axis?5points?5found?$CB?6@
  002f7	e8 00 00 00 00	 call	 _CONS_Printf
  002fc	83 c4 04	 add	 esp, 4

; 3463 : 		return;

  002ff	e9 01 54 00 00	 jmp	 $LN539@P_NiGHTSMo
$LN27@P_NiGHTSMo:

; 3464 : 	}
; 3465 : 
; 3466 : 	// The 'ambush' flag says you should rotate
; 3467 : 	// the other way around the axis.
; 3468 : 	if (player->mo->target->flags & MF_AMBUSH)

  00304	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00307	8b 08		 mov	 ecx, DWORD PTR [eax]
  00309	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0030f	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00312	83 e0 20	 and	 eax, 32			; 00000020H
  00315	74 07		 je	 SHORT $LN28@P_NiGHTSMo

; 3469 : 		backwardaxis = true;

  00317	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _backwardaxis$[ebp], 1
$LN28@P_NiGHTSMo:

; 3470 : 
; 3471 : 	player->angle_pos = R_PointToAngle2(player->mo->target->x, player->mo->target->y, player->mo->x, player->mo->y);

  0031e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00321	8b 08		 mov	 ecx, DWORD PTR [eax]
  00323	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00326	52		 push	 edx
  00327	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0032f	52		 push	 edx
  00330	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00333	8b 08		 mov	 ecx, DWORD PTR [eax]
  00335	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0033b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0033e	50		 push	 eax
  0033f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00342	8b 11		 mov	 edx, DWORD PTR [ecx]
  00344	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0034a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0034d	51		 push	 ecx
  0034e	e8 00 00 00 00	 call	 _R_PointToAngle2
  00353	83 c4 10	 add	 esp, 16			; 00000010H
  00356	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00359	89 82 9c 01 00
	00		 mov	 DWORD PTR [edx+412], eax

; 3472 : 
; 3473 : 	player->old_angle_pos = player->angle_pos;

  0035f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00362	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00365	8b 91 9c 01 00
	00		 mov	 edx, DWORD PTR [ecx+412]
  0036b	89 90 a0 01 00
	00		 mov	 DWORD PTR [eax+416], edx

; 3474 : 
; 3475 : 	radius = player->mo->target->radius;

  00371	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00374	8b 08		 mov	 ecx, DWORD PTR [eax]
  00376	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0037c	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0037f	89 45 c8	 mov	 DWORD PTR _radius$[ebp], eax

; 3476 : 
; 3477 : 	player->mo->flags |= MF_NOGRAVITY;

  00382	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00385	8b 08		 mov	 ecx, DWORD PTR [eax]
  00387	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0038a	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  00390	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00393	8b 08		 mov	 ecx, DWORD PTR [eax]
  00395	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 3478 : 	player->mo->flags2 |= MF2_DONTDRAW;

  00398	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0039b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039d	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  003a3	81 ca 00 00 40
	00		 or	 edx, 4194304		; 00400000H
  003a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ae	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 3479 : 	P_SetScale(player->mo->tracer, player->mo->scale);

  003b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b9	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  003c0	52		 push	 edx
  003c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c6	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  003cc	52		 push	 edx
  003cd	e8 00 00 00 00	 call	 _P_SetScale
  003d2	83 c4 08	 add	 esp, 8

; 3480 : 
; 3481 : 	// Check for flipped 'gravity'
; 3482 : 	{
; 3483 : 		boolean no3dfloorgrav = true; // Custom gravity

  003d5	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _no3dfloorgrav$63[ebp], 1

; 3484 : 
; 3485 : 		if (player->playerstate != PST_DEAD)

  003dc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003df	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  003e3	74 19		 je	 SHORT $LN29@P_NiGHTSMo

; 3486 : 			player->mo->eflags &= ~MFE_VERTICALFLIP;

  003e5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ea	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  003f0	83 e2 df	 and	 edx, -33		; ffffffdfH
  003f3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f8	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx
$LN29@P_NiGHTSMo:

; 3487 : 
; 3488 : 		if (player->mo->subsector->sector->ffloors) // Check for 3D floor gravity too.

  003fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00401	8b 08		 mov	 ecx, DWORD PTR [eax]
  00403	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00406	8b 02		 mov	 eax, DWORD PTR [edx]
  00408	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0040f	0f 84 9b 00 00
	00		 je	 $LN6@P_NiGHTSMo

; 3489 : 		{
; 3490 : 			ffloor_t *rover;
; 3491 : 
; 3492 : 			for (rover = player->mo->subsector->sector->ffloors; rover; rover = rover->next)

  00415	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00418	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041a	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0041d	8b 02		 mov	 eax, DWORD PTR [edx]
  0041f	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00425	89 4d a8	 mov	 DWORD PTR _rover$62[ebp], ecx
  00428	eb 09		 jmp	 SHORT $LN7@P_NiGHTSMo
$LN5@P_NiGHTSMo:
  0042a	8b 45 a8	 mov	 eax, DWORD PTR _rover$62[ebp]
  0042d	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00430	89 4d a8	 mov	 DWORD PTR _rover$62[ebp], ecx
$LN7@P_NiGHTSMo:
  00433	83 7d a8 00	 cmp	 DWORD PTR _rover$62[ebp], 0
  00437	74 77		 je	 SHORT $LN6@P_NiGHTSMo

; 3493 : 			{
; 3494 : 				if (!(rover->flags & FF_EXISTS))

  00439	8b 45 a8	 mov	 eax, DWORD PTR _rover$62[ebp]
  0043c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0043f	83 e1 01	 and	 ecx, 1
  00442	75 02		 jne	 SHORT $LN31@P_NiGHTSMo

; 3495 : 					continue;

  00444	eb e4		 jmp	 SHORT $LN5@P_NiGHTSMo
$LN31@P_NiGHTSMo:

; 3496 : 
; 3497 : 				if (P_InsideANonSolidFFloor(player->mo, rover))

  00446	8b 45 a8	 mov	 eax, DWORD PTR _rover$62[ebp]
  00449	50		 push	 eax
  0044a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0044d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0044f	52		 push	 edx
  00450	e8 00 00 00 00	 call	 _P_InsideANonSolidFFloor
  00455	83 c4 08	 add	 esp, 8
  00458	85 c0		 test	 eax, eax
  0045a	74 4f		 je	 SHORT $LN33@P_NiGHTSMo

; 3498 : 				{
; 3499 : 					if (rover->master->frontsector->gravity)

  0045c	8b 45 a8	 mov	 eax, DWORD PTR _rover$62[ebp]
  0045f	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00462	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00465	83 ba d8 00 00
	00 00		 cmp	 DWORD PTR [edx+216], 0
  0046c	74 3d		 je	 SHORT $LN33@P_NiGHTSMo

; 3500 : 					{
; 3501 : 						if (rover->master->frontsector->verticalflip)

  0046e	8b 45 a8	 mov	 eax, DWORD PTR _rover$62[ebp]
  00471	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00474	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00477	83 ba dc 00 00
	00 00		 cmp	 DWORD PTR [edx+220], 0
  0047e	74 22		 je	 SHORT $LN35@P_NiGHTSMo

; 3502 : 						{
; 3503 : 							if (player->playerstate != PST_DEAD)

  00480	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00483	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00487	74 19		 je	 SHORT $LN35@P_NiGHTSMo

; 3504 : 								player->mo->eflags |= MFE_VERTICALFLIP;

  00489	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0048c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048e	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00494	83 ca 20	 or	 edx, 32			; 00000020H
  00497	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0049a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0049c	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx
$LN35@P_NiGHTSMo:

; 3505 : 						}
; 3506 : 
; 3507 : 						no3dfloorgrav = false;

  004a2	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _no3dfloorgrav$63[ebp], 0

; 3508 : 						break;

  004a9	eb 05		 jmp	 SHORT $LN6@P_NiGHTSMo
$LN33@P_NiGHTSMo:

; 3509 : 					}
; 3510 : 				}
; 3511 : 			}

  004ab	e9 7a ff ff ff	 jmp	 $LN5@P_NiGHTSMo
$LN6@P_NiGHTSMo:

; 3512 : 		}
; 3513 : 
; 3514 : 		if (no3dfloorgrav)

  004b0	83 7d ac 00	 cmp	 DWORD PTR _no3dfloorgrav$63[ebp], 0
  004b4	74 35		 je	 SHORT $LN38@P_NiGHTSMo

; 3515 : 		{
; 3516 : 			if (player->mo->subsector->sector->verticalflip)

  004b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  004bb	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  004be	8b 02		 mov	 eax, DWORD PTR [edx]
  004c0	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  004c7	74 22		 je	 SHORT $LN38@P_NiGHTSMo

; 3517 : 			{
; 3518 : 				if (player->playerstate != PST_DEAD)

  004c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004cc	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  004d0	74 19		 je	 SHORT $LN38@P_NiGHTSMo

; 3519 : 					player->mo->eflags |= MFE_VERTICALFLIP;

  004d2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d7	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  004dd	83 ca 20	 or	 edx, 32			; 00000020H
  004e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e5	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx
$LN38@P_NiGHTSMo:

; 3520 : 			}
; 3521 : 		}
; 3522 : 	}
; 3523 : 
; 3524 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  004eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  004f0	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  004f6	83 e2 20	 and	 edx, 32			; 00000020H
  004f9	74 27		 je	 SHORT $LN39@P_NiGHTSMo

; 3525 : 		player->mo->tracer->eflags |= MFE_VERTICALFLIP;

  004fb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  00500	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00506	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0050c	83 c8 20	 or	 eax, 32			; 00000020H
  0050f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00512	8b 11		 mov	 edx, DWORD PTR [ecx]
  00514	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  0051a	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax
  00520	eb 25		 jmp	 SHORT $LN40@P_NiGHTSMo
$LN39@P_NiGHTSMo:

; 3526 : 	else
; 3527 : 		player->mo->tracer->eflags &= ~MFE_VERTICALFLIP;

  00522	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00525	8b 08		 mov	 ecx, DWORD PTR [eax]
  00527	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0052d	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00533	83 e0 df	 and	 eax, -33		; ffffffdfH
  00536	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00539	8b 11		 mov	 edx, DWORD PTR [ecx]
  0053b	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00541	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax
$LN40@P_NiGHTSMo:

; 3528 : 
; 3529 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  00547	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0054a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0054c	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00552	83 e2 20	 and	 edx, 32			; 00000020H
  00555	74 0d		 je	 SHORT $LN41@P_NiGHTSMo

; 3530 : 		cmd->forwardmove = (SINT8)(-cmd->forwardmove);

  00557	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  0055a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0055d	f7 d9		 neg	 ecx
  0055f	8b 55 c0	 mov	 edx, DWORD PTR _cmd$[ebp]
  00562	88 0a		 mov	 BYTE PTR [edx], cl
$LN41@P_NiGHTSMo:

; 3531 : 
; 3532 : 	// Currently reeling from being hit.
; 3533 : 	if (player->powers[pw_flashing] > (2*flashingtics)/3)

  00564	b9 04 00 00 00	 mov	 ecx, 4
  00569	d1 e1		 shl	 ecx, 1
  0056b	a1 00 00 00 00	 mov	 eax, DWORD PTR _flashingtics
  00570	d1 e0		 shl	 eax, 1
  00572	99		 cdq
  00573	be 03 00 00 00	 mov	 esi, 3
  00578	f7 fe		 idiv	 esi
  0057a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0057d	39 44 0a 38	 cmp	 DWORD PTR [edx+ecx+56], eax
  00581	0f 8e 98 02 00
	00		 jle	 $LN42@P_NiGHTSMo

; 3534 : 	{
; 3535 : 		{
; 3536 : 			const angle_t fa = (FixedAngle(player->flyangle*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  00587	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0058a	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00590	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00593	51		 push	 ecx
  00594	e8 00 00 00 00	 call	 _FixedAngle
  00599	83 c4 04	 add	 esp, 4
  0059c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0059f	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  005a4	89 45 a4	 mov	 DWORD PTR _fa$61[ebp], eax

; 3537 : 			const fixed_t speed = FixedDiv(player->speed*FRACUNIT,50*FRACUNIT);

  005a7	68 00 00 32 00	 push	 3276800			; 00320000H
  005ac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005af	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  005b5	c1 e1 10	 shl	 ecx, 16			; 00000010H
  005b8	51		 push	 ecx
  005b9	e8 00 00 00 00	 call	 _FixedDiv
  005be	83 c4 08	 add	 esp, 8
  005c1	89 45 a0	 mov	 DWORD PTR _speed$60[ebp], eax

; 3538 : 
; 3539 : 			xspeed = FixedMul(FINECOSINE(fa),speed);

  005c4	8b 45 a0	 mov	 eax, DWORD PTR _speed$60[ebp]
  005c7	50		 push	 eax
  005c8	8b 4d a4	 mov	 ecx, DWORD PTR _fa$61[ebp]
  005cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  005d1	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  005d4	50		 push	 eax
  005d5	e8 00 00 00 00	 call	 _FixedMul
  005da	83 c4 08	 add	 esp, 8
  005dd	89 45 e4	 mov	 DWORD PTR _xspeed$[ebp], eax

; 3540 : 			yspeed = FixedMul(FINESINE(fa),speed);

  005e0	8b 45 a0	 mov	 eax, DWORD PTR _speed$60[ebp]
  005e3	50		 push	 eax
  005e4	8b 4d a4	 mov	 ecx, DWORD PTR _fa$61[ebp]
  005e7	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  005ee	52		 push	 edx
  005ef	e8 00 00 00 00	 call	 _FixedMul
  005f4	83 c4 08	 add	 esp, 8
  005f7	89 45 e0	 mov	 DWORD PTR _yspeed$[ebp], eax

; 3541 : 		}
; 3542 : 
; 3543 : 		if (!(player->pflags & PF_TRANSFERTOCLOSEST))

  005fa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005fd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00603	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  00609	75 6a		 jne	 SHORT $LN43@P_NiGHTSMo

; 3544 : 		{
; 3545 : 			xspeed = FixedMul(xspeed, FixedDiv(1024*FRACUNIT, player->mo->target->radius));

  0060b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0060e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00610	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00616	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00619	50		 push	 eax
  0061a	68 00 00 00 04	 push	 67108864		; 04000000H
  0061f	e8 00 00 00 00	 call	 _FixedDiv
  00624	83 c4 08	 add	 esp, 8
  00627	50		 push	 eax
  00628	8b 4d e4	 mov	 ecx, DWORD PTR _xspeed$[ebp]
  0062b	51		 push	 ecx
  0062c	e8 00 00 00 00	 call	 _FixedMul
  00631	83 c4 08	 add	 esp, 8
  00634	89 45 e4	 mov	 DWORD PTR _xspeed$[ebp], eax

; 3546 : 
; 3547 : 			if (backwardaxis)

  00637	83 7d f0 00	 cmp	 DWORD PTR _backwardaxis$[ebp], 0
  0063b	74 07		 je	 SHORT $LN44@P_NiGHTSMo

; 3548 : 				xspeed *= -1;

  0063d	6b 45 e4 ff	 imul	 eax, DWORD PTR _xspeed$[ebp], -1
  00641	89 45 e4	 mov	 DWORD PTR _xspeed$[ebp], eax
$LN44@P_NiGHTSMo:

; 3549 : 
; 3550 : 			player->angle_pos += FixedAngleC(FixedDiv(xspeed,5*FRACUNIT),40*FRACUNIT);

  00644	68 00 00 28 00	 push	 2621440			; 00280000H
  00649	68 00 00 05 00	 push	 327680			; 00050000H
  0064e	8b 45 e4	 mov	 eax, DWORD PTR _xspeed$[ebp]
  00651	50		 push	 eax
  00652	e8 00 00 00 00	 call	 _FixedDiv
  00657	83 c4 08	 add	 esp, 8
  0065a	50		 push	 eax
  0065b	e8 00 00 00 00	 call	 _FixedAngleC
  00660	83 c4 08	 add	 esp, 8
  00663	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00666	03 81 9c 01 00
	00		 add	 eax, DWORD PTR [ecx+412]
  0066c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0066f	89 82 9c 01 00
	00		 mov	 DWORD PTR [edx+412], eax
$LN43@P_NiGHTSMo:

; 3551 : 		}
; 3552 : 
; 3553 : 		if (player->pflags & PF_TRANSFERTOCLOSEST)

  00675	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00678	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0067e	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  00684	74 5f		 je	 SHORT $LN45@P_NiGHTSMo

; 3554 : 		{
; 3555 : 			const angle_t fa = R_PointToAngle2(player->axis1->x, player->axis1->y, player->axis2->x, player->axis2->y);

  00686	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00689	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  0068f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00692	52		 push	 edx
  00693	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00696	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  0069c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0069f	52		 push	 edx
  006a0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006a3	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  006a9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  006ac	52		 push	 edx
  006ad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006b0	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  006b6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  006b9	52		 push	 edx
  006ba	e8 00 00 00 00	 call	 _R_PointToAngle2
  006bf	83 c4 10	 add	 esp, 16			; 00000010H
  006c2	89 45 9c	 mov	 DWORD PTR _fa$59[ebp], eax

; 3556 : 			P_InstaThrust(player->mo, fa, xspeed/10);

  006c5	8b 45 e4	 mov	 eax, DWORD PTR _xspeed$[ebp]
  006c8	99		 cdq
  006c9	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  006ce	f7 f9		 idiv	 ecx
  006d0	50		 push	 eax
  006d1	8b 55 9c	 mov	 edx, DWORD PTR _fa$59[ebp]
  006d4	52		 push	 edx
  006d5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  006da	51		 push	 ecx
  006db	e8 00 00 00 00	 call	 _P_InstaThrust
  006e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3557 : 		}

  006e3	eb 7f		 jmp	 SHORT $LN46@P_NiGHTSMo
$LN45@P_NiGHTSMo:

; 3558 : 		else
; 3559 : 		{
; 3560 : 			const angle_t fa = player->angle_pos>>ANGLETOFINESHIFT;

  006e5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006e8	8b 88 9c 01 00
	00		 mov	 ecx, DWORD PTR [eax+412]
  006ee	c1 e9 13	 shr	 ecx, 19			; 00000013H
  006f1	89 4d 98	 mov	 DWORD PTR _fa$58[ebp], ecx

; 3561 : 
; 3562 : 			player->mo->momx = player->mo->target->x + FixedMul(FINECOSINE(fa),radius) - player->mo->x;

  006f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f9	8b b1 98 00 00
	00		 mov	 esi, DWORD PTR [ecx+152]
  006ff	8b 55 c8	 mov	 edx, DWORD PTR _radius$[ebp]
  00702	52		 push	 edx
  00703	8b 45 98	 mov	 eax, DWORD PTR _fa$58[ebp]
  00706	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0070c	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0070f	52		 push	 edx
  00710	e8 00 00 00 00	 call	 _FixedMul
  00715	83 c4 08	 add	 esp, 8
  00718	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0071b	03 c8		 add	 ecx, eax
  0071d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00720	8b 02		 mov	 eax, DWORD PTR [edx]
  00722	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00725	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00728	8b 02		 mov	 eax, DWORD PTR [edx]
  0072a	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 3563 : 			player->mo->momy = player->mo->target->y + FixedMul(FINESINE(fa),radius) - player->mo->y;

  0072d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00730	8b 08		 mov	 ecx, DWORD PTR [eax]
  00732	8b b1 98 00 00
	00		 mov	 esi, DWORD PTR [ecx+152]
  00738	8b 55 c8	 mov	 edx, DWORD PTR _radius$[ebp]
  0073b	52		 push	 edx
  0073c	8b 45 98	 mov	 eax, DWORD PTR _fa$58[ebp]
  0073f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00746	51		 push	 ecx
  00747	e8 00 00 00 00	 call	 _FixedMul
  0074c	83 c4 08	 add	 esp, 8
  0074f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00752	03 d0		 add	 edx, eax
  00754	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00757	8b 08		 mov	 ecx, DWORD PTR [eax]
  00759	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  0075c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0075f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00761	89 51 4c	 mov	 DWORD PTR [ecx+76], edx
$LN46@P_NiGHTSMo:

; 3564 : 		}
; 3565 : 
; 3566 : 		player->mo->momz = 0;

  00764	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00767	8b 08		 mov	 ecx, DWORD PTR [eax]
  00769	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 3567 : 
; 3568 : 		P_NightsTransferPoints(player, xspeed, radius);

  00770	8b 45 c8	 mov	 eax, DWORD PTR _radius$[ebp]
  00773	50		 push	 eax
  00774	8b 4d e4	 mov	 ecx, DWORD PTR _xspeed$[ebp]
  00777	51		 push	 ecx
  00778	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0077b	52		 push	 edx
  0077c	e8 00 00 00 00	 call	 _P_NightsTransferPoints
  00781	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3569 : 
; 3570 : 		P_UnsetThingPosition(player->mo->tracer);

  00784	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00787	8b 08		 mov	 ecx, DWORD PTR [eax]
  00789	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0078f	52		 push	 edx
  00790	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00795	83 c4 04	 add	 esp, 4

; 3571 : 		player->mo->tracer->x = player->mo->x;

  00798	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0079b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0079d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007a0	8b 02		 mov	 eax, DWORD PTR [edx]
  007a2	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  007a8	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  007ab	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 3572 : 		player->mo->tracer->y = player->mo->y;

  007ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  007b3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007b6	8b 02		 mov	 eax, DWORD PTR [edx]
  007b8	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  007be	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  007c1	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 3573 : 		player->mo->tracer->z = player->mo->z;

  007c4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  007c9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007cc	8b 02		 mov	 eax, DWORD PTR [edx]
  007ce	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  007d4	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  007d7	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 3574 : 		player->mo->tracer->floorz = player->mo->floorz;

  007da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  007df	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007e2	8b 02		 mov	 eax, DWORD PTR [edx]
  007e4	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  007ea	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  007ed	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 3575 : 		player->mo->tracer->ceilingz = player->mo->ceilingz;

  007f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  007f5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007f8	8b 02		 mov	 eax, DWORD PTR [edx]
  007fa	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00800	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00803	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 3576 : 		P_SetThingPosition(player->mo->tracer);

  00806	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00809	8b 08		 mov	 ecx, DWORD PTR [eax]
  0080b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00811	52		 push	 edx
  00812	e8 00 00 00 00	 call	 _P_SetThingPosition
  00817	83 c4 04	 add	 esp, 4

; 3577 : 		return;

  0081a	e9 e6 4e 00 00	 jmp	 $LN539@P_NiGHTSMo
$LN42@P_NiGHTSMo:

; 3578 : 	}
; 3579 : 
; 3580 : 	if (player->mo->tracer->state >= &states[S_SUPERTRANS1]
; 3581 : 		&& player->mo->tracer->state <= &states[S_SUPERTRANS9])

  0081f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00822	8b 08		 mov	 ecx, DWORD PTR [eax]
  00824	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0082a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0082f	69 c8 50 06 00
	00		 imul	 ecx, eax, 1616
  00835	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0083b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0083e	0f 82 e4 00 00
	00		 jb	 $LN47@P_NiGHTSMo
  00844	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00847	8b 08		 mov	 ecx, DWORD PTR [eax]
  00849	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0084f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00854	69 c8 58 06 00
	00		 imul	 ecx, eax, 1624
  0085a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00860	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00863	0f 87 bf 00 00
	00		 ja	 $LN47@P_NiGHTSMo

; 3582 : 	{
; 3583 : 		player->mo->momx = player->mo->momy = player->mo->momz = 0;

  00869	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0086c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0086e	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  00875	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00878	8b 02		 mov	 eax, DWORD PTR [edx]
  0087a	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  00881	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00884	8b 11		 mov	 edx, DWORD PTR [ecx]
  00886	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 3584 : 
; 3585 : 		P_UnsetThingPosition(player->mo->tracer);

  0088d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00890	8b 08		 mov	 ecx, DWORD PTR [eax]
  00892	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00898	52		 push	 edx
  00899	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  0089e	83 c4 04	 add	 esp, 4

; 3586 : 		player->mo->tracer->x = player->mo->x;

  008a1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  008a6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008a9	8b 02		 mov	 eax, DWORD PTR [edx]
  008ab	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  008b1	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  008b4	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 3587 : 		player->mo->tracer->y = player->mo->y;

  008b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  008bc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008bf	8b 02		 mov	 eax, DWORD PTR [edx]
  008c1	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  008c7	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  008ca	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 3588 : 		player->mo->tracer->z = player->mo->z;

  008cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008d5	8b 02		 mov	 eax, DWORD PTR [edx]
  008d7	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  008dd	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  008e0	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 3589 : 		player->mo->tracer->floorz = player->mo->floorz;

  008e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  008e8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008eb	8b 02		 mov	 eax, DWORD PTR [edx]
  008ed	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  008f3	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  008f6	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 3590 : 		player->mo->tracer->ceilingz = player->mo->ceilingz;

  008f9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  008fe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00901	8b 02		 mov	 eax, DWORD PTR [edx]
  00903	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00909	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0090c	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 3591 : 		P_SetThingPosition(player->mo->tracer);

  0090f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00912	8b 08		 mov	 ecx, DWORD PTR [eax]
  00914	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0091a	52		 push	 edx
  0091b	e8 00 00 00 00	 call	 _P_SetThingPosition
  00920	83 c4 04	 add	 esp, 4

; 3592 : 		return;

  00923	e9 dd 4d 00 00	 jmp	 $LN539@P_NiGHTSMo
$LN47@P_NiGHTSMo:

; 3593 : 	}
; 3594 : 
; 3595 : 	if (player->exiting > 0 && player->exiting < 2*TICRATE)

  00928	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0092b	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00932	0f 86 8e 01 00
	00		 jbe	 $LN48@P_NiGHTSMo
  00938	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0093b	83 b8 30 01 00
	00 46		 cmp	 DWORD PTR [eax+304], 70	; 00000046H
  00942	0f 83 7e 01 00
	00		 jae	 $LN48@P_NiGHTSMo

; 3596 : 	{
; 3597 : 		player->mo->momx = player->mo->momy = 0;

  00948	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0094b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0094d	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00954	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00957	8b 02		 mov	 eax, DWORD PTR [edx]
  00959	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 3598 : 
; 3599 : 		if (gametype != GT_RACE)

  00960	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00967	83 f8 02	 cmp	 eax, 2
  0096a	74 0c		 je	 SHORT $LN49@P_NiGHTSMo

; 3600 : 			player->mo->momz = 30*FRACUNIT;

  0096c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0096f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00971	c7 41 50 00 00
	1e 00		 mov	 DWORD PTR [ecx+80], 1966080 ; 001e0000H
$LN49@P_NiGHTSMo:

; 3601 : 
; 3602 : 		player->mo->tracer->angle += ANGLE_11hh;

  00978	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0097b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0097d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00983	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00986	05 00 00 00 08	 add	 eax, 134217728		; 08000000H
  0098b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0098e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00990	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00996	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 3603 : 
; 3604 : 		if (!(player->mo->tracer->state  >= &states[S_NIGHTSDRONE1]

  00999	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0099c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0099e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  009a4	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  009a9	69 c8 c7 05 00
	00		 imul	 ecx, eax, 1479
  009af	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  009b5	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  009b8	72 21		 jb	 SHORT $LN51@P_NiGHTSMo
  009ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  009bf	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  009c5	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  009ca	69 c8 c8 05 00
	00		 imul	 ecx, eax, 1480
  009d0	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  009d6	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  009d9	76 19		 jbe	 SHORT $LN50@P_NiGHTSMo
$LN51@P_NiGHTSMo:

; 3605 : 			&& player->mo->tracer->state <= &states[S_NIGHTSDRONE2]))
; 3606 : 			P_SetMobjState(player->mo->tracer, S_NIGHTSDRONE1);

  009db	68 c7 05 00 00	 push	 1479			; 000005c7H
  009e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  009e5	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  009eb	52		 push	 edx
  009ec	e8 00 00 00 00	 call	 _P_SetMobjState
  009f1	83 c4 08	 add	 esp, 8
$LN50@P_NiGHTSMo:

; 3607 : 
; 3608 : 		player->mo->tracer->flags |= MF_NOCLIPHEIGHT;

  009f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  009f9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  009ff	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00a02	0d 00 00 80 00	 or	 eax, 8388608		; 00800000H
  00a07	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a0a	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a0c	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00a12	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 3609 : 		player->mo->flags |= MF_NOCLIPHEIGHT;

  00a15	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a18	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a1a	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00a1d	81 ca 00 00 80
	00		 or	 edx, 8388608		; 00800000H
  00a23	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a26	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a28	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 3610 : 
; 3611 : 		P_UnsetThingPosition(player->mo->tracer);

  00a2b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a2e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a30	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00a36	52		 push	 edx
  00a37	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00a3c	83 c4 04	 add	 esp, 4

; 3612 : 		player->mo->tracer->x = player->mo->x;

  00a3f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a42	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a44	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a47	8b 02		 mov	 eax, DWORD PTR [edx]
  00a49	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00a4f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00a52	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 3613 : 		player->mo->tracer->y = player->mo->y;

  00a55	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a58	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a5a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a5d	8b 02		 mov	 eax, DWORD PTR [edx]
  00a5f	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00a65	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00a68	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 3614 : 		player->mo->tracer->z = player->mo->z;

  00a6b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a6e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a70	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a73	8b 02		 mov	 eax, DWORD PTR [edx]
  00a75	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00a7b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00a7e	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 3615 : 		player->mo->tracer->floorz = player->mo->floorz;

  00a81	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a84	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a86	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a89	8b 02		 mov	 eax, DWORD PTR [edx]
  00a8b	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00a91	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00a94	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 3616 : 		player->mo->tracer->ceilingz = player->mo->ceilingz;

  00a97	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a9a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a9c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a9f	8b 02		 mov	 eax, DWORD PTR [edx]
  00aa1	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00aa7	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00aaa	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 3617 : 		P_SetThingPosition(player->mo->tracer);

  00aad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ab0	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ab2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00ab8	52		 push	 edx
  00ab9	e8 00 00 00 00	 call	 _P_SetThingPosition
  00abe	83 c4 04	 add	 esp, 4

; 3618 : 		return;

  00ac1	e9 3f 4c 00 00	 jmp	 $LN539@P_NiGHTSMo
$LN48@P_NiGHTSMo:

; 3619 : 	}
; 3620 : 
; 3621 : 	// Spawn the little sparkles on each side of the player.
; 3622 : 	if (leveltime & 1)

  00ac6	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00acb	83 e0 01	 and	 eax, 1
  00ace	0f 84 b1 01 00
	00		 je	 $LN52@P_NiGHTSMo

; 3623 : 	{
; 3624 : 		mobj_t *firstmobj;
; 3625 : 		mobj_t *secondmobj;
; 3626 : 		fixed_t spawndist = FIXEDSCALE(16*FRACUNIT, player->mo->scale);

  00ad4	68 00 00 10 00	 push	 1048576			; 00100000H
  00ad9	68 00 00 64 00	 push	 6553600			; 00640000H
  00ade	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ae1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ae3	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00aea	c1 e2 10	 shl	 edx, 16			; 00000010H
  00aed	52		 push	 edx
  00aee	e8 00 00 00 00	 call	 _FixedDiv
  00af3	83 c4 08	 add	 esp, 8
  00af6	50		 push	 eax
  00af7	e8 00 00 00 00	 call	 _FixedMul
  00afc	83 c4 08	 add	 esp, 8
  00aff	89 45 8c	 mov	 DWORD PTR _spawndist$55[ebp], eax

; 3627 : 
; 3628 : 		firstmobj = P_SpawnMobj(player->mo->x + P_ReturnThrustX(player->mo, player->mo->angle+ANGLE_90, spawndist), player->mo->y + P_ReturnThrustY(player->mo, player->mo->angle+ANGLE_90, spawndist), player->mo->z + player->mo->height/2, MT_NIGHTSPARKLE);

  00b02	68 f6 00 00 00	 push	 246			; 000000f6H
  00b07	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b0a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b0c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b0f	8b 02		 mov	 eax, DWORD PTR [edx]
  00b11	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00b14	99		 cdq
  00b15	2b c2		 sub	 eax, edx
  00b17	d1 f8		 sar	 eax, 1
  00b19	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00b1c	50		 push	 eax
  00b1d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b20	8b 31		 mov	 esi, DWORD PTR [ecx]
  00b22	8b 55 8c	 mov	 edx, DWORD PTR _spawndist$55[ebp]
  00b25	52		 push	 edx
  00b26	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b29	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b2b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00b2e	81 c2 00 00 00
	40		 add	 edx, 1073741824		; 40000000H
  00b34	52		 push	 edx
  00b35	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b38	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b3a	51		 push	 ecx
  00b3b	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00b40	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b43	03 46 14	 add	 eax, DWORD PTR [esi+20]
  00b46	50		 push	 eax
  00b47	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b4a	8b 32		 mov	 esi, DWORD PTR [edx]
  00b4c	8b 45 8c	 mov	 eax, DWORD PTR _spawndist$55[ebp]
  00b4f	50		 push	 eax
  00b50	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b53	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b55	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00b58	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00b5d	50		 push	 eax
  00b5e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b61	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b63	52		 push	 edx
  00b64	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00b69	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b6c	03 46 10	 add	 eax, DWORD PTR [esi+16]
  00b6f	50		 push	 eax
  00b70	e8 00 00 00 00	 call	 _P_SpawnMobj
  00b75	83 c4 10	 add	 esp, 16			; 00000010H
  00b78	89 45 94	 mov	 DWORD PTR _firstmobj$57[ebp], eax

; 3629 : 		secondmobj = P_SpawnMobj(player->mo->x + P_ReturnThrustX(player->mo, player->mo->angle-ANGLE_90, spawndist), player->mo->y + P_ReturnThrustY(player->mo, player->mo->angle-ANGLE_90, spawndist), player->mo->z + player->mo->height/2, MT_NIGHTSPARKLE);

  00b7b	68 f6 00 00 00	 push	 246			; 000000f6H
  00b80	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b83	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b85	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b88	8b 02		 mov	 eax, DWORD PTR [edx]
  00b8a	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00b8d	99		 cdq
  00b8e	2b c2		 sub	 eax, edx
  00b90	d1 f8		 sar	 eax, 1
  00b92	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00b95	50		 push	 eax
  00b96	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b99	8b 31		 mov	 esi, DWORD PTR [ecx]
  00b9b	8b 55 8c	 mov	 edx, DWORD PTR _spawndist$55[ebp]
  00b9e	52		 push	 edx
  00b9f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ba2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ba4	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00ba7	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  00bad	52		 push	 edx
  00bae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bb1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bb3	51		 push	 ecx
  00bb4	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00bb9	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bbc	03 46 14	 add	 eax, DWORD PTR [esi+20]
  00bbf	50		 push	 eax
  00bc0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bc3	8b 32		 mov	 esi, DWORD PTR [edx]
  00bc5	8b 45 8c	 mov	 eax, DWORD PTR _spawndist$55[ebp]
  00bc8	50		 push	 eax
  00bc9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00bcc	8b 11		 mov	 edx, DWORD PTR [ecx]
  00bce	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00bd1	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00bd6	50		 push	 eax
  00bd7	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00bda	8b 11		 mov	 edx, DWORD PTR [ecx]
  00bdc	52		 push	 edx
  00bdd	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00be2	83 c4 0c	 add	 esp, 12			; 0000000cH
  00be5	03 46 10	 add	 eax, DWORD PTR [esi+16]
  00be8	50		 push	 eax
  00be9	e8 00 00 00 00	 call	 _P_SpawnMobj
  00bee	83 c4 10	 add	 esp, 16			; 00000010H
  00bf1	89 45 90	 mov	 DWORD PTR _secondmobj$56[ebp], eax

; 3630 : 
; 3631 : 		firstmobj->fuse = leveltime;

  00bf4	8b 45 94	 mov	 eax, DWORD PTR _firstmobj$57[ebp]
  00bf7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  00bfd	89 88 bc 00 00
	00		 mov	 DWORD PTR [eax+188], ecx

; 3632 : 		P_SetTarget(&firstmobj->target, player->mo);

  00c03	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c06	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c08	51		 push	 ecx
  00c09	8b 55 94	 mov	 edx, DWORD PTR _firstmobj$57[ebp]
  00c0c	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00c12	52		 push	 edx
  00c13	e8 00 00 00 00	 call	 _P_SetTarget
  00c18	83 c4 08	 add	 esp, 8

; 3633 : 		P_SetScale(firstmobj, player->mo->scale);

  00c1b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c1e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c20	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00c27	52		 push	 edx
  00c28	8b 45 94	 mov	 eax, DWORD PTR _firstmobj$57[ebp]
  00c2b	50		 push	 eax
  00c2c	e8 00 00 00 00	 call	 _P_SetScale
  00c31	83 c4 08	 add	 esp, 8

; 3634 : 
; 3635 : 		secondmobj->fuse = leveltime;

  00c34	8b 45 90	 mov	 eax, DWORD PTR _secondmobj$56[ebp]
  00c37	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  00c3d	89 88 bc 00 00
	00		 mov	 DWORD PTR [eax+188], ecx

; 3636 : 		P_SetTarget(&secondmobj->target, player->mo);

  00c43	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c46	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c48	51		 push	 ecx
  00c49	8b 55 90	 mov	 edx, DWORD PTR _secondmobj$56[ebp]
  00c4c	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00c52	52		 push	 edx
  00c53	e8 00 00 00 00	 call	 _P_SetTarget
  00c58	83 c4 08	 add	 esp, 8

; 3637 : 		P_SetScale(secondmobj, player->mo->scale);

  00c5b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c5e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c60	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00c67	52		 push	 edx
  00c68	8b 45 90	 mov	 eax, DWORD PTR _secondmobj$56[ebp]
  00c6b	50		 push	 eax
  00c6c	e8 00 00 00 00	 call	 _P_SetScale
  00c71	83 c4 08	 add	 esp, 8

; 3638 : 
; 3639 : 		player->mo->fuse = leveltime;

  00c74	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c77	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c79	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _leveltime
  00c7f	89 91 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], edx
$LN52@P_NiGHTSMo:

; 3640 : 	}
; 3641 : 
; 3642 : 	if (player->bumpertime)

  00c85	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c88	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [eax+428], 0
  00c8f	74 2a		 je	 SHORT $LN53@P_NiGHTSMo

; 3643 : 	{
; 3644 : 		player->jumping = 1;

  00c91	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c94	c7 80 10 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+272], 1

; 3645 : 		player->pflags |= PF_DRILLING;

  00c9e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ca1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00ca7	81 c9 00 00 00
	01		 or	 ecx, 16777216		; 01000000H
  00cad	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00cb0	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3646 : 	}

  00cb6	e9 a5 00 00 00	 jmp	 $LN59@P_NiGHTSMo
$LN53@P_NiGHTSMo:

; 3647 : 	else if (cmd->buttons & BT_JUMP && player->drillmeter && player->drilldelay == 0)

  00cbb	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  00cbe	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00cc2	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00cc8	74 54		 je	 SHORT $LN55@P_NiGHTSMo
  00cca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ccd	83 b8 c8 01 00
	00 00		 cmp	 DWORD PTR [eax+456], 0
  00cd4	74 48		 je	 SHORT $LN55@P_NiGHTSMo
  00cd6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cd9	0f b6 88 cc 01
	00 00		 movzx	 ecx, BYTE PTR [eax+460]
  00ce0	85 c9		 test	 ecx, ecx
  00ce2	75 3a		 jne	 SHORT $LN55@P_NiGHTSMo

; 3648 : 	{
; 3649 : 		if (!player->jumping)

  00ce4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ce7	83 b8 10 01 00
	00 00		 cmp	 DWORD PTR [eax+272], 0
  00cee	75 07		 jne	 SHORT $LN57@P_NiGHTSMo

; 3650 : 			firstdrill = true;

  00cf0	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _firstdrill$[ebp], 1
$LN57@P_NiGHTSMo:

; 3651 : 
; 3652 : 		player->jumping = 1;

  00cf7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cfa	c7 80 10 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+272], 1

; 3653 : 		player->pflags |= PF_DRILLING;

  00d04	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d07	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00d0d	81 c9 00 00 00
	01		 or	 ecx, 16777216		; 01000000H
  00d13	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d16	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3654 : 	}

  00d1c	eb 42		 jmp	 SHORT $LN59@P_NiGHTSMo
$LN55@P_NiGHTSMo:

; 3655 : 	else
; 3656 : 	{
; 3657 : 		player->jumping = 0;

  00d1e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d21	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0

; 3658 : 
; 3659 : 		if (cmd->sidemove != 0)

  00d2b	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  00d2e	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00d32	85 c9		 test	 ecx, ecx
  00d34	74 07		 je	 SHORT $LN58@P_NiGHTSMo

; 3660 : 			moved = true;

  00d36	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 1
$LN58@P_NiGHTSMo:

; 3661 : 
; 3662 : 		if (player->drillmeter & 1)

  00d3d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d40	8b 88 c8 01 00
	00		 mov	 ecx, DWORD PTR [eax+456]
  00d46	83 e1 01	 and	 ecx, 1
  00d49	74 15		 je	 SHORT $LN59@P_NiGHTSMo

; 3663 : 			player->drillmeter++; // I'll be nice and give them one.

  00d4b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d4e	8b 88 c8 01 00
	00		 mov	 ecx, DWORD PTR [eax+456]
  00d54	83 c1 01	 add	 ecx, 1
  00d57	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d5a	89 8a c8 01 00
	00		 mov	 DWORD PTR [edx+456], ecx
$LN59@P_NiGHTSMo:

; 3664 : 	}
; 3665 : 
; 3666 : 	if (cmd->forwardmove != 0)

  00d60	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  00d63	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00d66	85 c9		 test	 ecx, ecx
  00d68	74 07		 je	 SHORT $LN60@P_NiGHTSMo

; 3667 : 		moved = true;

  00d6a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 1
$LN60@P_NiGHTSMo:

; 3668 : 
; 3669 : 	if (player->bumpertime)

  00d71	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d74	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [eax+428], 0
  00d7b	74 0c		 je	 SHORT $LN61@P_NiGHTSMo

; 3670 : 		drillamt = 0;

  00d7d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _drillamt$[ebp], 0
  00d84	e9 a4 00 00 00	 jmp	 $LN65@P_NiGHTSMo
$LN61@P_NiGHTSMo:

; 3671 : 	else if (moved)

  00d89	83 7d f4 00	 cmp	 DWORD PTR _moved$[ebp], 0
  00d8d	0f 84 9a 00 00
	00		 je	 $LN65@P_NiGHTSMo

; 3672 : 	{
; 3673 : 		if (player->pflags & PF_DRILLING)

  00d93	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d96	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00d9c	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00da2	74 0d		 je	 SHORT $LN64@P_NiGHTSMo

; 3674 : 		{
; 3675 : 			drillamt += 50*FRACUNIT;

  00da4	8b 45 fc	 mov	 eax, DWORD PTR _drillamt$[ebp]
  00da7	05 00 00 32 00	 add	 eax, 3276800		; 00320000H
  00dac	89 45 fc	 mov	 DWORD PTR _drillamt$[ebp], eax

; 3676 : 		}

  00daf	eb 7c		 jmp	 SHORT $LN65@P_NiGHTSMo
$LN64@P_NiGHTSMo:

; 3677 : 		else
; 3678 : 		{
; 3679 : 			const fixed_t fforward = abs(cmd->forwardmove)*FRACUNIT;

  00db1	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  00db4	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00db7	51		 push	 ecx
  00db8	e8 00 00 00 00	 call	 _abs
  00dbd	83 c4 04	 add	 esp, 4
  00dc0	c1 e0 10	 shl	 eax, 16			; 00000010H
  00dc3	89 45 88	 mov	 DWORD PTR _fforward$54[ebp], eax

; 3680 : 			const fixed_t fside = abs(cmd->sidemove)*FRACUNIT;

  00dc6	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  00dc9	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00dcd	51		 push	 ecx
  00dce	e8 00 00 00 00	 call	 _abs
  00dd3	83 c4 04	 add	 esp, 4
  00dd6	c1 e0 10	 shl	 eax, 16			; 00000010H
  00dd9	89 45 84	 mov	 DWORD PTR _fside$53[ebp], eax

; 3681 : 			const fixed_t dist = FixedHypot(fforward, fside);

  00ddc	8b 45 84	 mov	 eax, DWORD PTR _fside$53[ebp]
  00ddf	50		 push	 eax
  00de0	8b 4d 88	 mov	 ecx, DWORD PTR _fforward$54[ebp]
  00de3	51		 push	 ecx
  00de4	e8 00 00 00 00	 call	 _FixedHypot
  00de9	83 c4 08	 add	 esp, 8
  00dec	89 45 80	 mov	 DWORD PTR _dist$52[ebp], eax

; 3682 : 
; 3683 : 			drillamt += dist > 50*FRACUNIT ? 50*FRACUNIT : dist;

  00def	81 7d 80 00 00
	32 00		 cmp	 DWORD PTR _dist$52[ebp], 3276800 ; 00320000H
  00df6	7e 0c		 jle	 SHORT $LN541@P_NiGHTSMo
  00df8	c7 85 70 fe ff
	ff 00 00 32 00	 mov	 DWORD PTR tv761[ebp], 3276800 ; 00320000H
  00e02	eb 09		 jmp	 SHORT $LN542@P_NiGHTSMo
$LN541@P_NiGHTSMo:
  00e04	8b 45 80	 mov	 eax, DWORD PTR _dist$52[ebp]
  00e07	89 85 70 fe ff
	ff		 mov	 DWORD PTR tv761[ebp], eax
$LN542@P_NiGHTSMo:
  00e0d	8b 4d fc	 mov	 ecx, DWORD PTR _drillamt$[ebp]
  00e10	03 8d 70 fe ff
	ff		 add	 ecx, DWORD PTR tv761[ebp]
  00e16	89 4d fc	 mov	 DWORD PTR _drillamt$[ebp], ecx

; 3684 : 
; 3685 : 			drillamt = FixedMul(drillamt, 5*FRACUNIT/4);

  00e19	68 00 40 01 00	 push	 81920			; 00014000H
  00e1e	8b 45 fc	 mov	 eax, DWORD PTR _drillamt$[ebp]
  00e21	50		 push	 eax
  00e22	e8 00 00 00 00	 call	 _FixedMul
  00e27	83 c4 08	 add	 esp, 8
  00e2a	89 45 fc	 mov	 DWORD PTR _drillamt$[ebp], eax
$LN65@P_NiGHTSMo:

; 3686 : 		}
; 3687 : 	}
; 3688 : 
; 3689 : 	player->speed += FixedInt(drillamt);

  00e2d	8b 45 fc	 mov	 eax, DWORD PTR _drillamt$[ebp]
  00e30	50		 push	 eax
  00e31	e8 00 00 00 00	 call	 _FixedInt
  00e36	83 c4 04	 add	 esp, 4
  00e39	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e3c	03 81 0c 01 00
	00		 add	 eax, DWORD PTR [ecx+268]
  00e42	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e45	89 82 0c 01 00
	00		 mov	 DWORD PTR [edx+268], eax

; 3690 : 
; 3691 : 	if (!player->bumpertime)

  00e4b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e4e	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [eax+428], 0
  00e55	0f 85 ff 00 00
	00		 jne	 $LN73@P_NiGHTSMo

; 3692 : 	{
; 3693 : 		if (!(player->pflags & PF_DRILLING))

  00e5b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e5e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00e64	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00e6a	75 73		 jne	 SHORT $LN67@P_NiGHTSMo

; 3694 : 		{
; 3695 : 			if (player->speed > MAXDRILLSPEED)

  00e6c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e6f	81 b8 0c 01 00
	00 b0 36 00 00	 cmp	 DWORD PTR [eax+268], 14000 ; 000036b0H
  00e79	7e 25		 jle	 SHORT $LN69@P_NiGHTSMo

; 3696 : 				player->speed -= 100+FixedInt(drillamt);

  00e7b	8b 45 fc	 mov	 eax, DWORD PTR _drillamt$[ebp]
  00e7e	50		 push	 eax
  00e7f	e8 00 00 00 00	 call	 _FixedInt
  00e84	83 c4 04	 add	 esp, 4
  00e87	83 c0 64	 add	 eax, 100		; 00000064H
  00e8a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e8d	8b 91 0c 01 00
	00		 mov	 edx, DWORD PTR [ecx+268]
  00e93	2b d0		 sub	 edx, eax
  00e95	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e98	89 90 0c 01 00
	00		 mov	 DWORD PTR [eax+268], edx
  00e9e	eb 3d		 jmp	 SHORT $LN71@P_NiGHTSMo
$LN69@P_NiGHTSMo:

; 3697 : 			else if (player->speed > MAXNORMALSPEED)

  00ea0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ea3	81 b8 0c 01 00
	00 70 17 00 00	 cmp	 DWORD PTR [eax+268], 6000 ; 00001770H
  00ead	7e 2e		 jle	 SHORT $LN71@P_NiGHTSMo

; 3698 : 				player->speed -= FixedInt(FixedMul(drillamt, 19*FRACUNIT/16));

  00eaf	68 00 30 01 00	 push	 77824			; 00013000H
  00eb4	8b 45 fc	 mov	 eax, DWORD PTR _drillamt$[ebp]
  00eb7	50		 push	 eax
  00eb8	e8 00 00 00 00	 call	 _FixedMul
  00ebd	83 c4 08	 add	 esp, 8
  00ec0	50		 push	 eax
  00ec1	e8 00 00 00 00	 call	 _FixedInt
  00ec6	83 c4 04	 add	 esp, 4
  00ec9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00ecc	8b 91 0c 01 00
	00		 mov	 edx, DWORD PTR [ecx+268]
  00ed2	2b d0		 sub	 edx, eax
  00ed4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ed7	89 90 0c 01 00
	00		 mov	 DWORD PTR [eax+268], edx
$LN71@P_NiGHTSMo:

; 3699 : 		}

  00edd	eb 7b		 jmp	 SHORT $LN73@P_NiGHTSMo
$LN67@P_NiGHTSMo:

; 3700 : 		else
; 3701 : 		{
; 3702 : 			player->speed += 75;

  00edf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ee2	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00ee8	83 c1 4b	 add	 ecx, 75			; 0000004bH
  00eeb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00eee	89 8a 0c 01 00
	00		 mov	 DWORD PTR [edx+268], ecx

; 3703 : 			if (player->speed > MAXDRILLSPEED)

  00ef4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ef7	81 b8 0c 01 00
	00 b0 36 00 00	 cmp	 DWORD PTR [eax+268], 14000 ; 000036b0H
  00f01	7e 23		 jle	 SHORT $LN72@P_NiGHTSMo

; 3704 : 				player->speed -= 100+FixedInt(drillamt);

  00f03	8b 45 fc	 mov	 eax, DWORD PTR _drillamt$[ebp]
  00f06	50		 push	 eax
  00f07	e8 00 00 00 00	 call	 _FixedInt
  00f0c	83 c4 04	 add	 esp, 4
  00f0f	83 c0 64	 add	 eax, 100		; 00000064H
  00f12	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00f15	8b 91 0c 01 00
	00		 mov	 edx, DWORD PTR [ecx+268]
  00f1b	2b d0		 sub	 edx, eax
  00f1d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f20	89 90 0c 01 00
	00		 mov	 DWORD PTR [eax+268], edx
$LN72@P_NiGHTSMo:

; 3705 : 
; 3706 : 			if (--player->drillmeter == 0)

  00f26	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f29	8b 88 c8 01 00
	00		 mov	 ecx, DWORD PTR [eax+456]
  00f2f	83 e9 01	 sub	 ecx, 1
  00f32	89 8d 70 fe ff
	ff		 mov	 DWORD PTR tv807[ebp], ecx
  00f38	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f3b	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv807[ebp]
  00f41	89 82 c8 01 00
	00		 mov	 DWORD PTR [edx+456], eax
  00f47	83 bd 70 fe ff
	ff 00		 cmp	 DWORD PTR tv807[ebp], 0
  00f4e	75 0a		 jne	 SHORT $LN73@P_NiGHTSMo

; 3707 : 				player->drilldelay = TICRATE*2;

  00f50	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f53	c6 80 cc 01 00
	00 46		 mov	 BYTE PTR [eax+460], 70	; 00000046H
$LN73@P_NiGHTSMo:

; 3708 : 		}
; 3709 : 	}
; 3710 : 
; 3711 : 	if (!player->bumpertime)

  00f5a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f5d	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [eax+428], 0
  00f64	0f 85 d1 00 00
	00		 jne	 $LN82@P_NiGHTSMo

; 3712 : 	{
; 3713 : 		if (FixedInt(drillamt) == 0 && player->speed > 0)

  00f6a	8b 45 fc	 mov	 eax, DWORD PTR _drillamt$[ebp]
  00f6d	50		 push	 eax
  00f6e	e8 00 00 00 00	 call	 _FixedInt
  00f73	83 c4 04	 add	 esp, 4
  00f76	85 c0		 test	 eax, eax
  00f78	75 21		 jne	 SHORT $LN75@P_NiGHTSMo
  00f7a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f7d	83 b8 0c 01 00
	00 00		 cmp	 DWORD PTR [eax+268], 0
  00f84	7e 15		 jle	 SHORT $LN75@P_NiGHTSMo

; 3714 : 			player->speed -= 25;

  00f86	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f89	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00f8f	83 e9 19	 sub	 ecx, 25			; 00000019H
  00f92	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f95	89 8a 0c 01 00
	00		 mov	 DWORD PTR [edx+268], ecx
$LN75@P_NiGHTSMo:

; 3715 : 
; 3716 : 		if (player->speed < 0)

  00f9b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f9e	83 b8 0c 01 00
	00 00		 cmp	 DWORD PTR [eax+268], 0
  00fa5	7d 0d		 jge	 SHORT $LN76@P_NiGHTSMo

; 3717 : 			player->speed = 0;

  00fa7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00faa	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+268], 0
$LN76@P_NiGHTSMo:

; 3718 : 
; 3719 : 		if (cmd->sidemove != 0)

  00fb4	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  00fb7	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00fbb	85 c9		 test	 ecx, ecx
  00fbd	74 39		 je	 SHORT $LN77@P_NiGHTSMo

; 3720 : 		{
; 3721 : 			newangle = (INT16)FixedInt(AngleFixed(R_PointToAngle2(0,0, cmd->sidemove*FRACUNIT, cmd->forwardmove*FRACUNIT)));

  00fbf	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  00fc2	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00fc5	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00fc8	51		 push	 ecx
  00fc9	8b 55 c0	 mov	 edx, DWORD PTR _cmd$[ebp]
  00fcc	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  00fd0	c1 e0 10	 shl	 eax, 16			; 00000010H
  00fd3	50		 push	 eax
  00fd4	6a 00		 push	 0
  00fd6	6a 00		 push	 0
  00fd8	e8 00 00 00 00	 call	 _R_PointToAngle2
  00fdd	83 c4 10	 add	 esp, 16			; 00000010H
  00fe0	50		 push	 eax
  00fe1	e8 00 00 00 00	 call	 _AngleFixed
  00fe6	83 c4 04	 add	 esp, 4
  00fe9	50		 push	 eax
  00fea	e8 00 00 00 00	 call	 _FixedInt
  00fef	83 c4 04	 add	 esp, 4
  00ff2	66 89 45 e8	 mov	 WORD PTR _newangle$[ebp], ax

; 3722 : 		}

  00ff6	eb 28		 jmp	 SHORT $LN81@P_NiGHTSMo
$LN77@P_NiGHTSMo:

; 3723 : 		else if (cmd->forwardmove > 0)

  00ff8	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  00ffb	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00ffe	85 c9		 test	 ecx, ecx
  01000	7e 0b		 jle	 SHORT $LN79@P_NiGHTSMo

; 3724 : 			newangle = 90;

  01002	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH
  01007	66 89 45 e8	 mov	 WORD PTR _newangle$[ebp], ax
  0100b	eb 13		 jmp	 SHORT $LN81@P_NiGHTSMo
$LN79@P_NiGHTSMo:

; 3725 : 		else if (cmd->forwardmove < 0)

  0100d	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  01010	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  01013	85 c9		 test	 ecx, ecx
  01015	7d 09		 jge	 SHORT $LN81@P_NiGHTSMo

; 3726 : 			newangle = 269;

  01017	b8 0d 01 00 00	 mov	 eax, 269		; 0000010dH
  0101c	66 89 45 e8	 mov	 WORD PTR _newangle$[ebp], ax
$LN81@P_NiGHTSMo:

; 3727 : 
; 3728 : 		if (newangle < 0 && moved)

  01020	0f bf 45 e8	 movsx	 eax, WORD PTR _newangle$[ebp]
  01024	85 c0		 test	 eax, eax
  01026	7d 13		 jge	 SHORT $LN82@P_NiGHTSMo
  01028	83 7d f4 00	 cmp	 DWORD PTR _moved$[ebp], 0
  0102c	74 0d		 je	 SHORT $LN82@P_NiGHTSMo

; 3729 : 			newangle = (INT16)(360+newangle);

  0102e	0f bf 45 e8	 movsx	 eax, WORD PTR _newangle$[ebp]
  01032	05 68 01 00 00	 add	 eax, 360		; 00000168H
  01037	66 89 45 e8	 mov	 WORD PTR _newangle$[ebp], ax
$LN82@P_NiGHTSMo:

; 3730 : 	}
; 3731 : 
; 3732 : 	if (player->pflags & PF_DRILLING)

  0103b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0103e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01044	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0104a	74 09		 je	 SHORT $LN83@P_NiGHTSMo

; 3733 : 		thrustfactor = 1;

  0104c	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _thrustfactor$[ebp], 1
  01053	eb 07		 jmp	 SHORT $LN84@P_NiGHTSMo
$LN83@P_NiGHTSMo:

; 3734 : 	else
; 3735 : 		thrustfactor = 6;

  01055	c7 45 bc 06 00
	00 00		 mov	 DWORD PTR _thrustfactor$[ebp], 6
$LN84@P_NiGHTSMo:

; 3736 : 
; 3737 : 	for (i = 0; i < thrustfactor; i++)

  0105c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01063	eb 09		 jmp	 SHORT $LN10@P_NiGHTSMo
$LN8@P_NiGHTSMo:
  01065	8b 45 b8	 mov	 eax, DWORD PTR _i$[ebp]
  01068	83 c0 01	 add	 eax, 1
  0106b	89 45 b8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@P_NiGHTSMo:
  0106e	8b 45 b8	 mov	 eax, DWORD PTR _i$[ebp]
  01071	3b 45 bc	 cmp	 eax, DWORD PTR _thrustfactor$[ebp]
  01074	0f 8d c8 00 00
	00		 jge	 $LN9@P_NiGHTSMo

; 3738 : 	{
; 3739 : 		if (moved && player->flyangle != newangle)

  0107a	83 7d f4 00	 cmp	 DWORD PTR _moved$[ebp], 0
  0107e	0f 84 9f 00 00
	00		 je	 $LN87@P_NiGHTSMo
  01084	0f bf 45 e8	 movsx	 eax, WORD PTR _newangle$[ebp]
  01088	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0108b	39 81 b0 01 00
	00		 cmp	 DWORD PTR [ecx+432], eax
  01091	0f 84 8c 00 00
	00		 je	 $LN87@P_NiGHTSMo

; 3740 : 		{
; 3741 : 			// player->flyangle is the one to move
; 3742 : 			// newangle is the "move to"
; 3743 : 			if ((((newangle-player->flyangle)+360)%360)>(((player->flyangle-newangle)+360)%360))

  01097	0f bf 45 e8	 movsx	 eax, WORD PTR _newangle$[ebp]
  0109b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0109e	2b 81 b0 01 00
	00		 sub	 eax, DWORD PTR [ecx+432]
  010a4	05 68 01 00 00	 add	 eax, 360		; 00000168H
  010a9	99		 cdq
  010aa	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  010af	f7 f9		 idiv	 ecx
  010b1	8b ca		 mov	 ecx, edx
  010b3	0f bf 55 e8	 movsx	 edx, WORD PTR _newangle$[ebp]
  010b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010ba	8b 80 b0 01 00
	00		 mov	 eax, DWORD PTR [eax+432]
  010c0	2b c2		 sub	 eax, edx
  010c2	05 68 01 00 00	 add	 eax, 360		; 00000168H
  010c7	99		 cdq
  010c8	be 68 01 00 00	 mov	 esi, 360		; 00000168H
  010cd	f7 fe		 idiv	 esi
  010cf	3b ca		 cmp	 ecx, edx
  010d1	7e 3b		 jle	 SHORT $LN86@P_NiGHTSMo

; 3744 : 			{
; 3745 : 				player->flyangle--;

  010d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010d6	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  010dc	83 e9 01	 sub	 ecx, 1
  010df	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  010e2	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx

; 3746 : 				if (player->flyangle < 0)

  010e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010eb	83 b8 b0 01 00
	00 00		 cmp	 DWORD PTR [eax+432], 0
  010f2	7d 18		 jge	 SHORT $LN88@P_NiGHTSMo

; 3747 : 					player->flyangle = 360 + player->flyangle;

  010f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010f7	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  010fd	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  01103	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01106	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx
$LN88@P_NiGHTSMo:

; 3748 : 			}

  0110c	eb 15		 jmp	 SHORT $LN87@P_NiGHTSMo
$LN86@P_NiGHTSMo:

; 3749 : 			else
; 3750 : 				player->flyangle++;

  0110e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01111	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  01117	83 c1 01	 add	 ecx, 1
  0111a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0111d	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx
$LN87@P_NiGHTSMo:

; 3751 : 		}
; 3752 : 
; 3753 : 		player->flyangle %= 360;

  01123	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01126	8b 80 b0 01 00
	00		 mov	 eax, DWORD PTR [eax+432]
  0112c	99		 cdq
  0112d	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  01132	f7 f9		 idiv	 ecx
  01134	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01137	89 90 b0 01 00
	00		 mov	 DWORD PTR [eax+432], edx

; 3754 : 	}

  0113d	e9 23 ff ff ff	 jmp	 $LN8@P_NiGHTSMo
$LN9@P_NiGHTSMo:

; 3755 : 
; 3756 : 	if (!(player->speed)
; 3757 : 		&& cmd->forwardmove == 0)

  01142	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01145	83 b8 0c 01 00
	00 00		 cmp	 DWORD PTR [eax+268], 0
  0114c	75 11		 jne	 SHORT $LN89@P_NiGHTSMo
  0114e	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  01151	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  01154	85 c9		 test	 ecx, ecx
  01156	75 07		 jne	 SHORT $LN89@P_NiGHTSMo

; 3758 : 		still = true;

  01158	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _still$[ebp], 1
$LN89@P_NiGHTSMo:

; 3759 : 
; 3760 : 	if (((cmd->buttons & BT_CAMLEFT) && (cmd->buttons & BT_CAMRIGHT)) || cmd->buttons & BT_USE)

  0115f	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  01162	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01166	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  0116c	74 0f		 je	 SHORT $LN93@P_NiGHTSMo
  0116e	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  01171	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01175	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0117b	75 0f		 jne	 SHORT $LN92@P_NiGHTSMo
$LN93@P_NiGHTSMo:
  0117d	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  01180	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01184	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  0118a	74 64		 je	 SHORT $LN90@P_NiGHTSMo
$LN92@P_NiGHTSMo:

; 3761 : 	{
; 3762 : 		if (!(player->pflags & PF_SKIDDOWN) && player->speed > 2000)

  0118c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0118f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01195	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  0119b	75 39		 jne	 SHORT $LN94@P_NiGHTSMo
  0119d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011a0	81 b8 0c 01 00
	00 d0 07 00 00	 cmp	 DWORD PTR [eax+268], 2000 ; 000007d0H
  011aa	7e 2a		 jle	 SHORT $LN94@P_NiGHTSMo

; 3763 : 		{
; 3764 : 			player->speed /= 10;

  011ac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011af	8b 80 0c 01 00
	00		 mov	 eax, DWORD PTR [eax+268]
  011b5	99		 cdq
  011b6	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  011bb	f7 f9		 idiv	 ecx
  011bd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  011c0	89 82 0c 01 00
	00		 mov	 DWORD PTR [edx+268], eax

; 3765 : 			S_StartSound(player->mo, sfx_ngskid);

  011c6	6a 6f		 push	 111			; 0000006fH
  011c8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  011cd	51		 push	 ecx
  011ce	e8 00 00 00 00	 call	 _S_StartSound
  011d3	83 c4 08	 add	 esp, 8
$LN94@P_NiGHTSMo:

; 3766 : 		}
; 3767 : 		player->pflags |= PF_SKIDDOWN;

  011d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011d9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  011df	81 c9 00 00 00
	02		 or	 ecx, 33554432		; 02000000H
  011e5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  011e8	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3768 : 	}

  011ee	eb 18		 jmp	 SHORT $LN91@P_NiGHTSMo
$LN90@P_NiGHTSMo:

; 3769 : 	else
; 3770 : 		player->pflags &= ~PF_SKIDDOWN;

  011f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011f3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  011f9	81 e1 ff ff ff
	fd		 and	 ecx, -33554433		; fdffffffH
  011ff	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01202	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN91@P_NiGHTSMo:

; 3771 : 
; 3772 : 	{
; 3773 : 		const angle_t fa = (FixedAngle(player->flyangle*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  01208	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0120b	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  01211	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01214	51		 push	 ecx
  01215	e8 00 00 00 00	 call	 _FixedAngle
  0121a	83 c4 04	 add	 esp, 4
  0121d	c1 e8 13	 shr	 eax, 19			; 00000013H
  01220	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  01225	89 85 7c ff ff
	ff		 mov	 DWORD PTR _fa$51[ebp], eax

; 3774 : 		const fixed_t speed = FixedDiv(player->speed*FRACUNIT,50*FRACUNIT);

  0122b	68 00 00 32 00	 push	 3276800			; 00320000H
  01230	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01233	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  01239	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0123c	51		 push	 ecx
  0123d	e8 00 00 00 00	 call	 _FixedDiv
  01242	83 c4 08	 add	 esp, 8
  01245	89 85 78 ff ff
	ff		 mov	 DWORD PTR _speed$50[ebp], eax

; 3775 : 		xspeed = FixedMul(FINECOSINE(fa),speed);

  0124b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _speed$50[ebp]
  01251	50		 push	 eax
  01252	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _fa$51[ebp]
  01258	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0125e	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  01261	50		 push	 eax
  01262	e8 00 00 00 00	 call	 _FixedMul
  01267	83 c4 08	 add	 esp, 8
  0126a	89 45 e4	 mov	 DWORD PTR _xspeed$[ebp], eax

; 3776 : 		yspeed = FixedMul(FINESINE(fa),speed);

  0126d	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _speed$50[ebp]
  01273	50		 push	 eax
  01274	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _fa$51[ebp]
  0127a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  01281	52		 push	 edx
  01282	e8 00 00 00 00	 call	 _FixedMul
  01287	83 c4 08	 add	 esp, 8
  0128a	89 45 e0	 mov	 DWORD PTR _yspeed$[ebp], eax

; 3777 : 	}
; 3778 : 
; 3779 : 	if (!(player->pflags & PF_TRANSFERTOCLOSEST))

  0128d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01290	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01296	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  0129c	75 6a		 jne	 SHORT $LN95@P_NiGHTSMo

; 3780 : 	{
; 3781 : 		xspeed = FixedMul(xspeed, FixedDiv(1024*FRACUNIT, player->mo->target->radius));

  0129e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  012a3	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  012a9	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  012ac	50		 push	 eax
  012ad	68 00 00 00 04	 push	 67108864		; 04000000H
  012b2	e8 00 00 00 00	 call	 _FixedDiv
  012b7	83 c4 08	 add	 esp, 8
  012ba	50		 push	 eax
  012bb	8b 4d e4	 mov	 ecx, DWORD PTR _xspeed$[ebp]
  012be	51		 push	 ecx
  012bf	e8 00 00 00 00	 call	 _FixedMul
  012c4	83 c4 08	 add	 esp, 8
  012c7	89 45 e4	 mov	 DWORD PTR _xspeed$[ebp], eax

; 3782 : 
; 3783 : 		if (backwardaxis)

  012ca	83 7d f0 00	 cmp	 DWORD PTR _backwardaxis$[ebp], 0
  012ce	74 07		 je	 SHORT $LN96@P_NiGHTSMo

; 3784 : 			xspeed *= -1;

  012d0	6b 45 e4 ff	 imul	 eax, DWORD PTR _xspeed$[ebp], -1
  012d4	89 45 e4	 mov	 DWORD PTR _xspeed$[ebp], eax
$LN96@P_NiGHTSMo:

; 3785 : 
; 3786 : 		player->angle_pos += FixedAngleC(FixedDiv(xspeed,5*FRACUNIT),40*FRACUNIT);

  012d7	68 00 00 28 00	 push	 2621440			; 00280000H
  012dc	68 00 00 05 00	 push	 327680			; 00050000H
  012e1	8b 45 e4	 mov	 eax, DWORD PTR _xspeed$[ebp]
  012e4	50		 push	 eax
  012e5	e8 00 00 00 00	 call	 _FixedDiv
  012ea	83 c4 08	 add	 esp, 8
  012ed	50		 push	 eax
  012ee	e8 00 00 00 00	 call	 _FixedAngleC
  012f3	83 c4 08	 add	 esp, 8
  012f6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  012f9	03 81 9c 01 00
	00		 add	 eax, DWORD PTR [ecx+412]
  012ff	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01302	89 82 9c 01 00
	00		 mov	 DWORD PTR [edx+412], eax
$LN95@P_NiGHTSMo:

; 3787 : 	}
; 3788 : 
; 3789 : 	P_NightsTransferPoints(player, xspeed, radius);

  01308	8b 45 c8	 mov	 eax, DWORD PTR _radius$[ebp]
  0130b	50		 push	 eax
  0130c	8b 4d e4	 mov	 ecx, DWORD PTR _xspeed$[ebp]
  0130f	51		 push	 ecx
  01310	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01313	52		 push	 edx
  01314	e8 00 00 00 00	 call	 _P_NightsTransferPoints
  01319	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3790 : 
; 3791 : 	if (still)

  0131c	83 7d f8 00	 cmp	 DWORD PTR _still$[ebp], 0
  01320	74 0e		 je	 SHORT $LN97@P_NiGHTSMo

; 3792 : 		player->mo->momz = -FRACUNIT;

  01322	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01325	8b 08		 mov	 ecx, DWORD PTR [eax]
  01327	c7 41 50 00 00
	ff ff		 mov	 DWORD PTR [ecx+80], -65536 ; ffff0000H
  0132e	eb 13		 jmp	 SHORT $LN98@P_NiGHTSMo
$LN97@P_NiGHTSMo:

; 3793 : 	else
; 3794 : 		player->mo->momz = yspeed/11;

  01330	8b 45 e0	 mov	 eax, DWORD PTR _yspeed$[ebp]
  01333	99		 cdq
  01334	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  01339	f7 f9		 idiv	 ecx
  0133b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0133e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01340	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN98@P_NiGHTSMo:

; 3795 : 
; 3796 : 	if (player->mo->momz > 20*FRACUNIT)

  01343	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01346	8b 08		 mov	 ecx, DWORD PTR [eax]
  01348	81 79 50 00 00
	14 00		 cmp	 DWORD PTR [ecx+80], 1310720 ; 00140000H
  0134f	7e 0e		 jle	 SHORT $LN99@P_NiGHTSMo

; 3797 : 		player->mo->momz = 20*FRACUNIT;

  01351	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01354	8b 08		 mov	 ecx, DWORD PTR [eax]
  01356	c7 41 50 00 00
	14 00		 mov	 DWORD PTR [ecx+80], 1310720 ; 00140000H
  0135d	eb 1a		 jmp	 SHORT $LN101@P_NiGHTSMo
$LN99@P_NiGHTSMo:

; 3798 : 	else if (player->mo->momz < -20*FRACUNIT)

  0135f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01362	8b 08		 mov	 ecx, DWORD PTR [eax]
  01364	81 79 50 00 00
	ec ff		 cmp	 DWORD PTR [ecx+80], -1310720 ; ffec0000H
  0136b	7d 0c		 jge	 SHORT $LN101@P_NiGHTSMo

; 3799 : 		player->mo->momz = -20*FRACUNIT;

  0136d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01370	8b 08		 mov	 ecx, DWORD PTR [eax]
  01372	c7 41 50 00 00
	ec ff		 mov	 DWORD PTR [ecx+80], -1310720 ; ffec0000H
$LN101@P_NiGHTSMo:

; 3800 : 
; 3801 : 	// You can create splashes as you fly across water.
; 3802 : 	if (player->mo->z + P_GetPlayerHeight(player) >= player->mo->watertop && player->mo->z <= player->mo->watertop && player->speed > 9000
; 3803 : 		&& leveltime % (TICRATE/7) == 0 && !player->spectator)

  01379	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0137c	8b 30		 mov	 esi, DWORD PTR [eax]
  0137e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01381	51		 push	 ecx
  01382	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  01387	83 c4 04	 add	 esp, 4
  0138a	03 46 18	 add	 eax, DWORD PTR [esi+24]
  0138d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01390	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01392	3b 81 c0 00 00
	00		 cmp	 eax, DWORD PTR [ecx+192]
  01398	0f 8c a6 00 00
	00		 jl	 $LN102@P_NiGHTSMo
  0139e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  013a3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  013a6	8b 02		 mov	 eax, DWORD PTR [edx]
  013a8	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  013ab	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  013b1	0f 8f 8d 00 00
	00		 jg	 $LN102@P_NiGHTSMo
  013b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013ba	81 b8 0c 01 00
	00 28 23 00 00	 cmp	 DWORD PTR [eax+268], 9000 ; 00002328H
  013c4	7e 7e		 jle	 SHORT $LN102@P_NiGHTSMo
  013c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  013cb	33 d2		 xor	 edx, edx
  013cd	b9 05 00 00 00	 mov	 ecx, 5
  013d2	f7 f1		 div	 ecx
  013d4	85 d2		 test	 edx, edx
  013d6	75 6c		 jne	 SHORT $LN102@P_NiGHTSMo
  013d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013db	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  013e2	85 c9		 test	 ecx, ecx
  013e4	75 5e		 jne	 SHORT $LN102@P_NiGHTSMo

; 3804 : 	{
; 3805 : 		mobj_t *water = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->watertop, MT_SPLISH);

  013e6	68 b5 00 00 00	 push	 181			; 000000b5H
  013eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  013f0	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  013f6	52		 push	 edx
  013f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  013fc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  013ff	52		 push	 edx
  01400	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01403	8b 08		 mov	 ecx, DWORD PTR [eax]
  01405	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01408	52		 push	 edx
  01409	e8 00 00 00 00	 call	 _P_SpawnMobj
  0140e	83 c4 10	 add	 esp, 16			; 00000010H
  01411	89 85 74 ff ff
	ff		 mov	 DWORD PTR _water$49[ebp], eax

; 3806 : 		S_StartSound(water, sfx_wslap);

  01417	68 f0 00 00 00	 push	 240			; 000000f0H
  0141c	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _water$49[ebp]
  01422	50		 push	 eax
  01423	e8 00 00 00 00	 call	 _S_StartSound
  01428	83 c4 08	 add	 esp, 8

; 3807 : 		water->destscale = player->mo->scale;

  0142b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0142e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01430	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _water$49[ebp]
  01436	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  0143d	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax
$LN102@P_NiGHTSMo:

; 3808 : 	}
; 3809 : 
; 3810 : 	// Spawn Sonic's bubbles
; 3811 : 	if (player->mo->eflags & MFE_UNDERWATER && !player->spectator)

  01444	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01447	8b 08		 mov	 ecx, DWORD PTR [eax]
  01449	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0144f	83 e2 08	 and	 edx, 8
  01452	0f 84 14 01 00
	00		 je	 $LN107@P_NiGHTSMo
  01458	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0145b	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  01462	85 c9		 test	 ecx, ecx
  01464	0f 85 02 01 00
	00		 jne	 $LN107@P_NiGHTSMo

; 3812 : 	{
; 3813 : 		const fixed_t zh = player->mo->z + FixedDiv(player->mo->height, 5*(FRACUNIT/4));

  0146a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0146d	8b 30		 mov	 esi, DWORD PTR [eax]
  0146f	68 00 40 01 00	 push	 81920			; 00014000H
  01474	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01477	8b 11		 mov	 edx, DWORD PTR [ecx]
  01479	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0147c	50		 push	 eax
  0147d	e8 00 00 00 00	 call	 _FixedDiv
  01482	83 c4 08	 add	 esp, 8
  01485	03 46 18	 add	 eax, DWORD PTR [esi+24]
  01488	89 85 70 ff ff
	ff		 mov	 DWORD PTR _zh$48[ebp], eax

; 3814 : 		mobj_t *bubble = NULL;

  0148e	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bubble$47[ebp], 0

; 3815 : 		if (!(P_Random() % 16))

  01498	e8 00 00 00 00	 call	 _P_Random
  0149d	0f b6 c0	 movzx	 eax, al
  014a0	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  014a5	79 05		 jns	 SHORT $LN607@P_NiGHTSMo
  014a7	48		 dec	 eax
  014a8	83 c8 f0	 or	 eax, -16		; fffffff0H
  014ab	40		 inc	 eax
$LN607@P_NiGHTSMo:
  014ac	85 c0		 test	 eax, eax
  014ae	75 2e		 jne	 SHORT $LN104@P_NiGHTSMo

; 3816 : 			bubble = P_SpawnMobj(player->mo->x, player->mo->y, zh, MT_SMALLBUBBLE);

  014b0	68 b7 00 00 00	 push	 183			; 000000b7H
  014b5	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _zh$48[ebp]
  014bb	50		 push	 eax
  014bc	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  014bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  014c1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  014c4	50		 push	 eax
  014c5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  014c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  014ca	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  014cd	50		 push	 eax
  014ce	e8 00 00 00 00	 call	 _P_SpawnMobj
  014d3	83 c4 10	 add	 esp, 16			; 00000010H
  014d6	89 85 6c ff ff
	ff		 mov	 DWORD PTR _bubble$47[ebp], eax
  014dc	eb 40		 jmp	 SHORT $LN106@P_NiGHTSMo
$LN104@P_NiGHTSMo:

; 3817 : 		else if (!(P_Random() % 96))

  014de	e8 00 00 00 00	 call	 _P_Random
  014e3	0f b6 c0	 movzx	 eax, al
  014e6	99		 cdq
  014e7	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  014ec	f7 f9		 idiv	 ecx
  014ee	85 d2		 test	 edx, edx
  014f0	75 2c		 jne	 SHORT $LN106@P_NiGHTSMo

; 3818 : 			bubble = P_SpawnMobj(player->mo->x, player->mo->y, zh, MT_MEDIUMBUBBLE);

  014f2	68 b8 00 00 00	 push	 184			; 000000b8H
  014f7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _zh$48[ebp]
  014fd	50		 push	 eax
  014fe	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01501	8b 11		 mov	 edx, DWORD PTR [ecx]
  01503	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01506	50		 push	 eax
  01507	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0150a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0150c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0150f	50		 push	 eax
  01510	e8 00 00 00 00	 call	 _P_SpawnMobj
  01515	83 c4 10	 add	 esp, 16			; 00000010H
  01518	89 85 6c ff ff
	ff		 mov	 DWORD PTR _bubble$47[ebp], eax
$LN106@P_NiGHTSMo:

; 3819 : 
; 3820 : 		if (bubble)

  0151e	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _bubble$47[ebp], 0
  01525	74 45		 je	 SHORT $LN107@P_NiGHTSMo

; 3821 : 		{
; 3822 : 			bubble->threshold = 42;

  01527	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _bubble$47[ebp]
  0152d	c7 80 a0 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [eax+160], 42	; 0000002aH

; 3823 : 			bubble->destscale = player->mo->scale;

  01537	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0153a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0153c	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _bubble$47[ebp]
  01542	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  01549	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 3824 : 			P_SetScale(bubble,player->mo->scale);

  01550	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01553	8b 08		 mov	 ecx, DWORD PTR [eax]
  01555	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0155c	52		 push	 edx
  0155d	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _bubble$47[ebp]
  01563	50		 push	 eax
  01564	e8 00 00 00 00	 call	 _P_SetScale
  01569	83 c4 08	 add	 esp, 8
$LN107@P_NiGHTSMo:

; 3825 : 		}
; 3826 : 	}
; 3827 : 
; 3828 : 	if (player->mo->momx || player->mo->momy)

  0156c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0156f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01571	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  01575	75 0b		 jne	 SHORT $LN109@P_NiGHTSMo
  01577	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0157a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0157c	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  01580	74 26		 je	 SHORT $LN108@P_NiGHTSMo
$LN109@P_NiGHTSMo:

; 3829 : 		player->mo->angle = R_PointToAngle2(0, 0, player->mo->momx, player->mo->momy);

  01582	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01585	8b 08		 mov	 ecx, DWORD PTR [eax]
  01587	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0158a	52		 push	 edx
  0158b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0158e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01590	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  01593	52		 push	 edx
  01594	6a 00		 push	 0
  01596	6a 00		 push	 0
  01598	e8 00 00 00 00	 call	 _R_PointToAngle2
  0159d	83 c4 10	 add	 esp, 16			; 00000010H
  015a0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  015a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  015a5	89 42 24	 mov	 DWORD PTR [edx+36], eax
$LN108@P_NiGHTSMo:

; 3830 : 
; 3831 : 	if (still)

  015a8	83 7d f8 00	 cmp	 DWORD PTR _still$[ebp], 0
  015ac	74 19		 je	 SHORT $LN110@P_NiGHTSMo

; 3832 : 	{
; 3833 : 		player->anotherflyangle = 0;

  015ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  015b1	c7 80 c0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+448], 0

; 3834 : 		movingangle = 0;

  015bb	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _movingangle$[ebp], 0

; 3835 : 	}

  015c2	e9 bf 03 00 00	 jmp	 $LN125@P_NiGHTSMo
$LN110@P_NiGHTSMo:

; 3836 : 	else if (backwardaxis)

  015c7	83 7d f0 00	 cmp	 DWORD PTR _backwardaxis$[ebp], 0
  015cb	0f 84 dd 01 00
	00		 je	 $LN112@P_NiGHTSMo

; 3837 : 	{
; 3838 : 		// Special cases to prevent the angle from being
; 3839 : 		// calculated incorrectly when wrapped.
; 3840 : 		if (player->old_angle_pos > ANG350 && player->angle_pos < ANG10)

  015d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  015d4	81 b8 a0 01 00
	00 39 8e e3 f8	 cmp	 DWORD PTR [eax+416], -119304647 ; f8e38e39H
  015de	76 74		 jbe	 SHORT $LN114@P_NiGHTSMo
  015e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  015e3	81 b8 9c 01 00
	00 c7 71 1c 07	 cmp	 DWORD PTR [eax+412], 119304647 ; 071c71c7H
  015ed	73 65		 jae	 SHORT $LN114@P_NiGHTSMo

; 3841 : 		{
; 3842 : 			movingangle = R_PointToAngle2(0, player->mo->z, -R_PointToDist2(player->mo->momx, player->mo->momy, 0, 0), player->mo->z + player->mo->momz);

  015ef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  015f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  015f4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  015f7	8b 02		 mov	 eax, DWORD PTR [edx]
  015f9	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  015fc	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  015ff	51		 push	 ecx
  01600	6a 00		 push	 0
  01602	6a 00		 push	 0
  01604	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01607	8b 02		 mov	 eax, DWORD PTR [edx]
  01609	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0160c	51		 push	 ecx
  0160d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01610	8b 02		 mov	 eax, DWORD PTR [edx]
  01612	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  01615	51		 push	 ecx
  01616	e8 00 00 00 00	 call	 _R_PointToDist2
  0161b	83 c4 10	 add	 esp, 16			; 00000010H
  0161e	f7 d8		 neg	 eax
  01620	50		 push	 eax
  01621	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01624	8b 02		 mov	 eax, DWORD PTR [edx]
  01626	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01629	51		 push	 ecx
  0162a	6a 00		 push	 0
  0162c	e8 00 00 00 00	 call	 _R_PointToAngle2
  01631	83 c4 10	 add	 esp, 16			; 00000010H
  01634	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax

; 3843 : 			player->anotherflyangle = (movingangle >> ANGLETOFINESHIFT) * 360/FINEANGLES;

  01637	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  0163a	c1 e8 13	 shr	 eax, 19			; 00000013H
  0163d	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  01643	c1 e9 0d	 shr	 ecx, 13			; 0000000dH
  01646	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01649	89 8a c0 01 00
	00		 mov	 DWORD PTR [edx+448], ecx

; 3844 : 		}

  0164f	e9 55 01 00 00	 jmp	 $LN119@P_NiGHTSMo
$LN114@P_NiGHTSMo:

; 3845 : 		else if (player->old_angle_pos < ANG10 && player->angle_pos > ANG350)

  01654	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01657	81 b8 a0 01 00
	00 c7 71 1c 07	 cmp	 DWORD PTR [eax+416], 119304647 ; 071c71c7H
  01661	73 72		 jae	 SHORT $LN116@P_NiGHTSMo
  01663	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01666	81 b8 9c 01 00
	00 39 8e e3 f8	 cmp	 DWORD PTR [eax+412], -119304647 ; f8e38e39H
  01670	76 63		 jbe	 SHORT $LN116@P_NiGHTSMo

; 3846 : 		{
; 3847 : 			movingangle = R_PointToAngle2(0, player->mo->z, R_PointToDist2(player->mo->momx, player->mo->momy, 0, 0), player->mo->z + player->mo->momz);

  01672	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01675	8b 08		 mov	 ecx, DWORD PTR [eax]
  01677	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0167a	8b 02		 mov	 eax, DWORD PTR [edx]
  0167c	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0167f	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  01682	51		 push	 ecx
  01683	6a 00		 push	 0
  01685	6a 00		 push	 0
  01687	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0168a	8b 02		 mov	 eax, DWORD PTR [edx]
  0168c	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0168f	51		 push	 ecx
  01690	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01693	8b 02		 mov	 eax, DWORD PTR [edx]
  01695	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  01698	51		 push	 ecx
  01699	e8 00 00 00 00	 call	 _R_PointToDist2
  0169e	83 c4 10	 add	 esp, 16			; 00000010H
  016a1	50		 push	 eax
  016a2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  016a5	8b 02		 mov	 eax, DWORD PTR [edx]
  016a7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  016aa	51		 push	 ecx
  016ab	6a 00		 push	 0
  016ad	e8 00 00 00 00	 call	 _R_PointToAngle2
  016b2	83 c4 10	 add	 esp, 16			; 00000010H
  016b5	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax

; 3848 : 			player->anotherflyangle = (movingangle >> ANGLETOFINESHIFT) * 360/FINEANGLES;

  016b8	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  016bb	c1 e8 13	 shr	 eax, 19			; 00000013H
  016be	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  016c4	c1 e9 0d	 shr	 ecx, 13			; 0000000dH
  016c7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  016ca	89 8a c0 01 00
	00		 mov	 DWORD PTR [edx+448], ecx

; 3849 : 		}

  016d0	e9 d4 00 00 00	 jmp	 $LN119@P_NiGHTSMo
$LN116@P_NiGHTSMo:

; 3850 : 		else if (player->angle_pos > player->old_angle_pos)

  016d5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  016d8	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  016db	8b 90 9c 01 00
	00		 mov	 edx, DWORD PTR [eax+412]
  016e1	3b 91 a0 01 00
	00		 cmp	 edx, DWORD PTR [ecx+416]
  016e7	76 62		 jbe	 SHORT $LN118@P_NiGHTSMo

; 3851 : 		{
; 3852 : 			movingangle = R_PointToAngle2(0, player->mo->z, -R_PointToDist2(player->mo->momx, player->mo->momy, 0, 0), player->mo->z + player->mo->momz);

  016e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  016ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  016ee	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  016f1	8b 02		 mov	 eax, DWORD PTR [edx]
  016f3	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  016f6	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  016f9	51		 push	 ecx
  016fa	6a 00		 push	 0
  016fc	6a 00		 push	 0
  016fe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01701	8b 02		 mov	 eax, DWORD PTR [edx]
  01703	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  01706	51		 push	 ecx
  01707	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0170a	8b 02		 mov	 eax, DWORD PTR [edx]
  0170c	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0170f	51		 push	 ecx
  01710	e8 00 00 00 00	 call	 _R_PointToDist2
  01715	83 c4 10	 add	 esp, 16			; 00000010H
  01718	f7 d8		 neg	 eax
  0171a	50		 push	 eax
  0171b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0171e	8b 02		 mov	 eax, DWORD PTR [edx]
  01720	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01723	51		 push	 ecx
  01724	6a 00		 push	 0
  01726	e8 00 00 00 00	 call	 _R_PointToAngle2
  0172b	83 c4 10	 add	 esp, 16			; 00000010H
  0172e	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax

; 3853 : 			player->anotherflyangle = (movingangle >> ANGLETOFINESHIFT) * 360/FINEANGLES;

  01731	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  01734	c1 e8 13	 shr	 eax, 19			; 00000013H
  01737	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  0173d	c1 e9 0d	 shr	 ecx, 13			; 0000000dH
  01740	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01743	89 8a c0 01 00
	00		 mov	 DWORD PTR [edx+448], ecx

; 3854 : 		}

  01749	eb 5e		 jmp	 SHORT $LN119@P_NiGHTSMo
$LN118@P_NiGHTSMo:

; 3855 : 		else
; 3856 : 		{
; 3857 : 			movingangle = R_PointToAngle2(0, player->mo->z, R_PointToDist2(player->mo->momx, player->mo->momy, 0, 0), player->mo->z + player->mo->momz);

  0174b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0174e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01750	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01753	8b 02		 mov	 eax, DWORD PTR [edx]
  01755	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  01758	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  0175b	51		 push	 ecx
  0175c	6a 00		 push	 0
  0175e	6a 00		 push	 0
  01760	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01763	8b 02		 mov	 eax, DWORD PTR [edx]
  01765	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  01768	51		 push	 ecx
  01769	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0176c	8b 02		 mov	 eax, DWORD PTR [edx]
  0176e	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  01771	51		 push	 ecx
  01772	e8 00 00 00 00	 call	 _R_PointToDist2
  01777	83 c4 10	 add	 esp, 16			; 00000010H
  0177a	50		 push	 eax
  0177b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0177e	8b 02		 mov	 eax, DWORD PTR [edx]
  01780	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01783	51		 push	 ecx
  01784	6a 00		 push	 0
  01786	e8 00 00 00 00	 call	 _R_PointToAngle2
  0178b	83 c4 10	 add	 esp, 16			; 00000010H
  0178e	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax

; 3858 : 			player->anotherflyangle = (movingangle >> ANGLETOFINESHIFT) * 360/FINEANGLES;

  01791	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  01794	c1 e8 13	 shr	 eax, 19			; 00000013H
  01797	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  0179d	c1 e9 0d	 shr	 ecx, 13			; 0000000dH
  017a0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  017a3	89 8a c0 01 00
	00		 mov	 DWORD PTR [edx+448], ecx
$LN119@P_NiGHTSMo:

; 3859 : 		}
; 3860 : 	}

  017a9	e9 d8 01 00 00	 jmp	 $LN125@P_NiGHTSMo
$LN112@P_NiGHTSMo:

; 3861 : 	else
; 3862 : 	{
; 3863 : 		// Special cases to prevent the angle from being
; 3864 : 		// calculated incorrectly when wrapped.
; 3865 : 		if (player->old_angle_pos > ANG350 && player->angle_pos < ANG10)

  017ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  017b1	81 b8 a0 01 00
	00 39 8e e3 f8	 cmp	 DWORD PTR [eax+416], -119304647 ; f8e38e39H
  017bb	76 72		 jbe	 SHORT $LN120@P_NiGHTSMo
  017bd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  017c0	81 b8 9c 01 00
	00 c7 71 1c 07	 cmp	 DWORD PTR [eax+412], 119304647 ; 071c71c7H
  017ca	73 63		 jae	 SHORT $LN120@P_NiGHTSMo

; 3866 : 		{
; 3867 : 			movingangle = R_PointToAngle2(0, player->mo->z, R_PointToDist2(player->mo->momx, player->mo->momy, 0, 0), player->mo->z + player->mo->momz);

  017cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  017cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  017d1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  017d4	8b 02		 mov	 eax, DWORD PTR [edx]
  017d6	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  017d9	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  017dc	51		 push	 ecx
  017dd	6a 00		 push	 0
  017df	6a 00		 push	 0
  017e1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  017e4	8b 02		 mov	 eax, DWORD PTR [edx]
  017e6	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  017e9	51		 push	 ecx
  017ea	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  017ed	8b 02		 mov	 eax, DWORD PTR [edx]
  017ef	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  017f2	51		 push	 ecx
  017f3	e8 00 00 00 00	 call	 _R_PointToDist2
  017f8	83 c4 10	 add	 esp, 16			; 00000010H
  017fb	50		 push	 eax
  017fc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  017ff	8b 02		 mov	 eax, DWORD PTR [edx]
  01801	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01804	51		 push	 ecx
  01805	6a 00		 push	 0
  01807	e8 00 00 00 00	 call	 _R_PointToAngle2
  0180c	83 c4 10	 add	 esp, 16			; 00000010H
  0180f	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax

; 3868 : 			player->anotherflyangle = (movingangle >> ANGLETOFINESHIFT) * 360/FINEANGLES;

  01812	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  01815	c1 e8 13	 shr	 eax, 19			; 00000013H
  01818	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  0181e	c1 e9 0d	 shr	 ecx, 13			; 0000000dH
  01821	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01824	89 8a c0 01 00
	00		 mov	 DWORD PTR [edx+448], ecx

; 3869 : 		}

  0182a	e9 57 01 00 00	 jmp	 $LN125@P_NiGHTSMo
$LN120@P_NiGHTSMo:

; 3870 : 		else if (player->old_angle_pos < ANG10 && player->angle_pos > ANG350)

  0182f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01832	81 b8 a0 01 00
	00 c7 71 1c 07	 cmp	 DWORD PTR [eax+416], 119304647 ; 071c71c7H
  0183c	73 74		 jae	 SHORT $LN122@P_NiGHTSMo
  0183e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01841	81 b8 9c 01 00
	00 39 8e e3 f8	 cmp	 DWORD PTR [eax+412], -119304647 ; f8e38e39H
  0184b	76 65		 jbe	 SHORT $LN122@P_NiGHTSMo

; 3871 : 		{
; 3872 : 			movingangle = R_PointToAngle2(0, player->mo->z, -R_PointToDist2(player->mo->momx, player->mo->momy, 0, 0), player->mo->z + player->mo->momz);

  0184d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01850	8b 08		 mov	 ecx, DWORD PTR [eax]
  01852	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01855	8b 02		 mov	 eax, DWORD PTR [edx]
  01857	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0185a	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  0185d	51		 push	 ecx
  0185e	6a 00		 push	 0
  01860	6a 00		 push	 0
  01862	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01865	8b 02		 mov	 eax, DWORD PTR [edx]
  01867	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0186a	51		 push	 ecx
  0186b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0186e	8b 02		 mov	 eax, DWORD PTR [edx]
  01870	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  01873	51		 push	 ecx
  01874	e8 00 00 00 00	 call	 _R_PointToDist2
  01879	83 c4 10	 add	 esp, 16			; 00000010H
  0187c	f7 d8		 neg	 eax
  0187e	50		 push	 eax
  0187f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01882	8b 02		 mov	 eax, DWORD PTR [edx]
  01884	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01887	51		 push	 ecx
  01888	6a 00		 push	 0
  0188a	e8 00 00 00 00	 call	 _R_PointToAngle2
  0188f	83 c4 10	 add	 esp, 16			; 00000010H
  01892	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax

; 3873 : 			player->anotherflyangle = (movingangle >> ANGLETOFINESHIFT) * 360/FINEANGLES;

  01895	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  01898	c1 e8 13	 shr	 eax, 19			; 00000013H
  0189b	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  018a1	c1 e9 0d	 shr	 ecx, 13			; 0000000dH
  018a4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  018a7	89 8a c0 01 00
	00		 mov	 DWORD PTR [edx+448], ecx

; 3874 : 		}

  018ad	e9 d4 00 00 00	 jmp	 $LN125@P_NiGHTSMo
$LN122@P_NiGHTSMo:

; 3875 : 		else if (player->angle_pos < player->old_angle_pos)

  018b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  018b5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  018b8	8b 90 9c 01 00
	00		 mov	 edx, DWORD PTR [eax+412]
  018be	3b 91 a0 01 00
	00		 cmp	 edx, DWORD PTR [ecx+416]
  018c4	73 62		 jae	 SHORT $LN124@P_NiGHTSMo

; 3876 : 		{
; 3877 : 			movingangle = R_PointToAngle2(0, player->mo->z, -R_PointToDist2(player->mo->momx, player->mo->momy, 0, 0), player->mo->z + player->mo->momz);

  018c6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  018c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  018cb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  018ce	8b 02		 mov	 eax, DWORD PTR [edx]
  018d0	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  018d3	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  018d6	51		 push	 ecx
  018d7	6a 00		 push	 0
  018d9	6a 00		 push	 0
  018db	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  018de	8b 02		 mov	 eax, DWORD PTR [edx]
  018e0	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  018e3	51		 push	 ecx
  018e4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  018e7	8b 02		 mov	 eax, DWORD PTR [edx]
  018e9	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  018ec	51		 push	 ecx
  018ed	e8 00 00 00 00	 call	 _R_PointToDist2
  018f2	83 c4 10	 add	 esp, 16			; 00000010H
  018f5	f7 d8		 neg	 eax
  018f7	50		 push	 eax
  018f8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  018fb	8b 02		 mov	 eax, DWORD PTR [edx]
  018fd	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01900	51		 push	 ecx
  01901	6a 00		 push	 0
  01903	e8 00 00 00 00	 call	 _R_PointToAngle2
  01908	83 c4 10	 add	 esp, 16			; 00000010H
  0190b	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax

; 3878 : 			player->anotherflyangle = (movingangle >> ANGLETOFINESHIFT) * 360/FINEANGLES;

  0190e	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  01911	c1 e8 13	 shr	 eax, 19			; 00000013H
  01914	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  0191a	c1 e9 0d	 shr	 ecx, 13			; 0000000dH
  0191d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01920	89 8a c0 01 00
	00		 mov	 DWORD PTR [edx+448], ecx

; 3879 : 		}

  01926	eb 5e		 jmp	 SHORT $LN125@P_NiGHTSMo
$LN124@P_NiGHTSMo:

; 3880 : 		else
; 3881 : 		{
; 3882 : 			movingangle = R_PointToAngle2(0, player->mo->z, R_PointToDist2(player->mo->momx, player->mo->momy, 0, 0), player->mo->z + player->mo->momz);

  01928	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0192b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0192d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01930	8b 02		 mov	 eax, DWORD PTR [edx]
  01932	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  01935	03 48 50	 add	 ecx, DWORD PTR [eax+80]
  01938	51		 push	 ecx
  01939	6a 00		 push	 0
  0193b	6a 00		 push	 0
  0193d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01940	8b 02		 mov	 eax, DWORD PTR [edx]
  01942	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  01945	51		 push	 ecx
  01946	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01949	8b 02		 mov	 eax, DWORD PTR [edx]
  0194b	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0194e	51		 push	 ecx
  0194f	e8 00 00 00 00	 call	 _R_PointToDist2
  01954	83 c4 10	 add	 esp, 16			; 00000010H
  01957	50		 push	 eax
  01958	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0195b	8b 02		 mov	 eax, DWORD PTR [edx]
  0195d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01960	51		 push	 ecx
  01961	6a 00		 push	 0
  01963	e8 00 00 00 00	 call	 _R_PointToAngle2
  01968	83 c4 10	 add	 esp, 16			; 00000010H
  0196b	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax

; 3883 : 			player->anotherflyangle = (movingangle >> ANGLETOFINESHIFT) * 360/FINEANGLES;

  0196e	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  01971	c1 e8 13	 shr	 eax, 19			; 00000013H
  01974	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  0197a	c1 e9 0d	 shr	 ecx, 13			; 0000000dH
  0197d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01980	89 8a c0 01 00
	00		 mov	 DWORD PTR [edx+448], ecx
$LN125@P_NiGHTSMo:

; 3884 : 		}
; 3885 : 	}
; 3886 : 
; 3887 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  01986	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01989	8b 08		 mov	 ecx, DWORD PTR [eax]
  0198b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01991	83 e2 20	 and	 edx, 32			; 00000020H
  01994	0f 84 b8 17 00
	00		 je	 $LN126@P_NiGHTSMo

; 3888 : 	{
; 3889 : 		if (player->anotherflyangle >= 349 || player->anotherflyangle <= 11)

  0199a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0199d	81 b8 c0 01 00
	00 5d 01 00 00	 cmp	 DWORD PTR [eax+448], 349 ; 0000015dH
  019a7	7d 10		 jge	 SHORT $LN130@P_NiGHTSMo
  019a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  019ac	83 b8 c0 01 00
	00 0b		 cmp	 DWORD PTR [eax+448], 11	; 0000000bH
  019b3	0f 8f 58 01 00
	00		 jg	 $LN128@P_NiGHTSMo
$LN130@P_NiGHTSMo:

; 3890 : 		{
; 3891 : 			if (player->pflags & PF_DRILLING)

  019b9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  019bc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  019c2	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  019c8	0f 84 03 01 00
	00		 je	 $LN131@P_NiGHTSMo

; 3892 : 			{
; 3893 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL1A]

  019ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  019d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  019d3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  019d9	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  019de	69 c8 fb 05 00
	00		 imul	 ecx, eax, 1531
  019e4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  019ea	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  019ed	72 25		 jb	 SHORT $LN134@P_NiGHTSMo
  019ef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  019f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  019f4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  019fa	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  019ff	69 c8 fe 05 00
	00		 imul	 ecx, eax, 1534
  01a05	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01a0b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01a0e	0f 86 bb 00 00
	00		 jbe	 $LN136@P_NiGHTSMo
$LN134@P_NiGHTSMo:

; 3894 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL1D]))
; 3895 : 				{
; 3896 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  01a14	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a17	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a19	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01a1f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01a24	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  01a2a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01a30	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01a33	72 21		 jb	 SHORT $LN137@P_NiGHTSMo
  01a35	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a38	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a3a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01a40	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01a45	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  01a4b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01a51	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01a54	76 60		 jbe	 SHORT $LN135@P_NiGHTSMo
$LN137@P_NiGHTSMo:

; 3897 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 3898 : 					{
; 3899 : 						INT32 framenum;
; 3900 : 
; 3901 : 						framenum = player->mo->tracer->state->frame & 3;

  01a56	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a59	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a5b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01a61	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  01a64	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01a67	83 e1 03	 and	 ecx, 3
  01a6a	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _framenum$46[ebp], ecx

; 3902 : 
; 3903 : 						if (framenum == 3) // Drilld special case

  01a70	83 bd 68 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$46[ebp], 3
  01a77	75 1b		 jne	 SHORT $LN138@P_NiGHTSMo

; 3904 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1A);

  01a79	68 fb 05 00 00	 push	 1531			; 000005fbH
  01a7e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01a81	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a83	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01a89	52		 push	 edx
  01a8a	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01a8f	83 c4 08	 add	 esp, 8
  01a92	eb 20		 jmp	 SHORT $LN139@P_NiGHTSMo
$LN138@P_NiGHTSMo:

; 3905 : 						else
; 3906 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1B+framenum);

  01a94	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$46[ebp]
  01a9a	05 fc 05 00 00	 add	 eax, 1532		; 000005fcH
  01a9f	50		 push	 eax
  01aa0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01aa3	8b 11		 mov	 edx, DWORD PTR [ecx]
  01aa5	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  01aab	50		 push	 eax
  01aac	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01ab1	83 c4 08	 add	 esp, 8
$LN139@P_NiGHTSMo:

; 3907 : 					}

  01ab4	eb 19		 jmp	 SHORT $LN136@P_NiGHTSMo
$LN135@P_NiGHTSMo:

; 3908 : 					else
; 3909 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1A);

  01ab6	68 fb 05 00 00	 push	 1531			; 000005fbH
  01abb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01abe	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ac0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01ac6	52		 push	 edx
  01ac7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01acc	83 c4 08	 add	 esp, 8
$LN136@P_NiGHTSMo:

; 3910 : 				}
; 3911 : 			}

  01acf	eb 3b		 jmp	 SHORT $LN132@P_NiGHTSMo
$LN131@P_NiGHTSMo:

; 3912 : 			else
; 3913 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY1A : S_NIGHTSFLY1B);

  01ad1	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01ad6	83 e0 01	 and	 eax, 1
  01ad9	74 0c		 je	 SHORT $LN543@P_NiGHTSMo
  01adb	c7 85 70 fe ff
	ff c9 05 00 00	 mov	 DWORD PTR tv1408[ebp], 1481 ; 000005c9H
  01ae5	eb 0a		 jmp	 SHORT $LN544@P_NiGHTSMo
$LN543@P_NiGHTSMo:
  01ae7	c7 85 70 fe ff
	ff ca 05 00 00	 mov	 DWORD PTR tv1408[ebp], 1482 ; 000005caH
$LN544@P_NiGHTSMo:
  01af1	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1408[ebp]
  01af7	51		 push	 ecx
  01af8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01afb	8b 02		 mov	 eax, DWORD PTR [edx]
  01afd	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01b03	51		 push	 ecx
  01b04	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01b09	83 c4 08	 add	 esp, 8
$LN132@P_NiGHTSMo:

; 3914 : 		}

  01b0c	e9 3c 16 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN128@P_NiGHTSMo:

; 3915 : 		else if (player->anotherflyangle >= 12 && player->anotherflyangle <= 33)

  01b11	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b14	83 b8 c0 01 00
	00 0c		 cmp	 DWORD PTR [eax+448], 12	; 0000000cH
  01b1b	0f 8c 68 01 00
	00		 jl	 $LN140@P_NiGHTSMo
  01b21	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b24	83 b8 c0 01 00
	00 21		 cmp	 DWORD PTR [eax+448], 33	; 00000021H
  01b2b	0f 8f 58 01 00
	00		 jg	 $LN140@P_NiGHTSMo

; 3916 : 		{
; 3917 : 			if (player->pflags & PF_DRILLING)

  01b31	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b34	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01b3a	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  01b40	0f 84 03 01 00
	00		 je	 $LN142@P_NiGHTSMo

; 3918 : 			{
; 3919 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL6A]

  01b46	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b49	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b4b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01b51	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01b56	69 c8 0f 06 00
	00		 imul	 ecx, eax, 1551
  01b5c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01b62	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01b65	72 25		 jb	 SHORT $LN145@P_NiGHTSMo
  01b67	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b6a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b6c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01b72	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01b77	69 c8 12 06 00
	00		 imul	 ecx, eax, 1554
  01b7d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01b83	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01b86	0f 86 bb 00 00
	00		 jbe	 $LN147@P_NiGHTSMo
$LN145@P_NiGHTSMo:

; 3920 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL6D]))
; 3921 : 				{
; 3922 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  01b8c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01b8f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b91	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01b97	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01b9c	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  01ba2	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01ba8	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01bab	72 21		 jb	 SHORT $LN148@P_NiGHTSMo
  01bad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01bb0	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bb2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01bb8	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01bbd	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  01bc3	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01bc9	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01bcc	76 60		 jbe	 SHORT $LN146@P_NiGHTSMo
$LN148@P_NiGHTSMo:

; 3923 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 3924 : 					{
; 3925 : 						INT32 framenum;
; 3926 : 
; 3927 : 						framenum = player->mo->tracer->state->frame & 3;

  01bce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01bd1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bd3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01bd9	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  01bdc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01bdf	83 e1 03	 and	 ecx, 3
  01be2	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _framenum$45[ebp], ecx

; 3928 : 
; 3929 : 						if (framenum == 3) // Drilld special case

  01be8	83 bd 64 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$45[ebp], 3
  01bef	75 1b		 jne	 SHORT $LN149@P_NiGHTSMo

; 3930 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6A);

  01bf1	68 0f 06 00 00	 push	 1551			; 0000060fH
  01bf6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01bf9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bfb	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01c01	52		 push	 edx
  01c02	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01c07	83 c4 08	 add	 esp, 8
  01c0a	eb 20		 jmp	 SHORT $LN150@P_NiGHTSMo
$LN149@P_NiGHTSMo:

; 3931 : 						else
; 3932 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6B+framenum);

  01c0c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$45[ebp]
  01c12	05 10 06 00 00	 add	 eax, 1552		; 00000610H
  01c17	50		 push	 eax
  01c18	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01c1b	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c1d	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  01c23	50		 push	 eax
  01c24	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01c29	83 c4 08	 add	 esp, 8
$LN150@P_NiGHTSMo:

; 3933 : 					}

  01c2c	eb 19		 jmp	 SHORT $LN147@P_NiGHTSMo
$LN146@P_NiGHTSMo:

; 3934 : 					else
; 3935 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6A);

  01c2e	68 0f 06 00 00	 push	 1551			; 0000060fH
  01c33	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c36	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c38	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01c3e	52		 push	 edx
  01c3f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01c44	83 c4 08	 add	 esp, 8
$LN147@P_NiGHTSMo:

; 3936 : 				}
; 3937 : 			}

  01c47	eb 3b		 jmp	 SHORT $LN143@P_NiGHTSMo
$LN142@P_NiGHTSMo:

; 3938 : 			else
; 3939 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY2A : S_NIGHTSFLY2B);

  01c49	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01c4e	83 e0 01	 and	 eax, 1
  01c51	74 0c		 je	 SHORT $LN545@P_NiGHTSMo
  01c53	c7 85 70 fe ff
	ff cb 05 00 00	 mov	 DWORD PTR tv1465[ebp], 1483 ; 000005cbH
  01c5d	eb 0a		 jmp	 SHORT $LN546@P_NiGHTSMo
$LN545@P_NiGHTSMo:
  01c5f	c7 85 70 fe ff
	ff cc 05 00 00	 mov	 DWORD PTR tv1465[ebp], 1484 ; 000005ccH
$LN546@P_NiGHTSMo:
  01c69	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1465[ebp]
  01c6f	51		 push	 ecx
  01c70	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01c73	8b 02		 mov	 eax, DWORD PTR [edx]
  01c75	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01c7b	51		 push	 ecx
  01c7c	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01c81	83 c4 08	 add	 esp, 8
$LN143@P_NiGHTSMo:

; 3940 : 		}

  01c84	e9 c4 14 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN140@P_NiGHTSMo:

; 3941 : 		else if (player->anotherflyangle >= 34 && player->anotherflyangle <= 56)

  01c89	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c8c	83 b8 c0 01 00
	00 22		 cmp	 DWORD PTR [eax+448], 34	; 00000022H
  01c93	0f 8c 68 01 00
	00		 jl	 $LN151@P_NiGHTSMo
  01c99	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01c9c	83 b8 c0 01 00
	00 38		 cmp	 DWORD PTR [eax+448], 56	; 00000038H
  01ca3	0f 8f 58 01 00
	00		 jg	 $LN151@P_NiGHTSMo

; 3942 : 		{
; 3943 : 			if (player->pflags & PF_DRILLING)

  01ca9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01cac	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01cb2	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  01cb8	0f 84 03 01 00
	00		 je	 $LN153@P_NiGHTSMo

; 3944 : 			{
; 3945 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL7A]

  01cbe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01cc1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cc3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01cc9	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01cce	69 c8 13 06 00
	00		 imul	 ecx, eax, 1555
  01cd4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01cda	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01cdd	72 25		 jb	 SHORT $LN156@P_NiGHTSMo
  01cdf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ce2	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ce4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01cea	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01cef	69 c8 16 06 00
	00		 imul	 ecx, eax, 1558
  01cf5	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01cfb	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01cfe	0f 86 bb 00 00
	00		 jbe	 $LN158@P_NiGHTSMo
$LN156@P_NiGHTSMo:

; 3946 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL7D]))
; 3947 : 				{
; 3948 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  01d04	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d07	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d09	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01d0f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01d14	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  01d1a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01d20	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01d23	72 21		 jb	 SHORT $LN159@P_NiGHTSMo
  01d25	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d28	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d2a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01d30	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01d35	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  01d3b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01d41	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01d44	76 60		 jbe	 SHORT $LN157@P_NiGHTSMo
$LN159@P_NiGHTSMo:

; 3949 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 3950 : 					{
; 3951 : 						INT32 framenum;
; 3952 : 
; 3953 : 						framenum = player->mo->tracer->state->frame & 3;

  01d46	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d49	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d4b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01d51	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  01d54	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01d57	83 e1 03	 and	 ecx, 3
  01d5a	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _framenum$44[ebp], ecx

; 3954 : 
; 3955 : 						if (framenum == 3) // Drilld special case

  01d60	83 bd 60 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$44[ebp], 3
  01d67	75 1b		 jne	 SHORT $LN160@P_NiGHTSMo

; 3956 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7A);

  01d69	68 13 06 00 00	 push	 1555			; 00000613H
  01d6e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01d71	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d73	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01d79	52		 push	 edx
  01d7a	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01d7f	83 c4 08	 add	 esp, 8
  01d82	eb 20		 jmp	 SHORT $LN161@P_NiGHTSMo
$LN160@P_NiGHTSMo:

; 3957 : 						else
; 3958 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7B+framenum);

  01d84	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$44[ebp]
  01d8a	05 14 06 00 00	 add	 eax, 1556		; 00000614H
  01d8f	50		 push	 eax
  01d90	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01d93	8b 11		 mov	 edx, DWORD PTR [ecx]
  01d95	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  01d9b	50		 push	 eax
  01d9c	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01da1	83 c4 08	 add	 esp, 8
$LN161@P_NiGHTSMo:

; 3959 : 					}

  01da4	eb 19		 jmp	 SHORT $LN158@P_NiGHTSMo
$LN157@P_NiGHTSMo:

; 3960 : 					else
; 3961 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7A);

  01da6	68 13 06 00 00	 push	 1555			; 00000613H
  01dab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01dae	8b 08		 mov	 ecx, DWORD PTR [eax]
  01db0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01db6	52		 push	 edx
  01db7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01dbc	83 c4 08	 add	 esp, 8
$LN158@P_NiGHTSMo:

; 3962 : 				}
; 3963 : 			}

  01dbf	eb 3b		 jmp	 SHORT $LN154@P_NiGHTSMo
$LN153@P_NiGHTSMo:

; 3964 : 			else
; 3965 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY7A : S_NIGHTSFLY7B);

  01dc1	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01dc6	83 e0 01	 and	 eax, 1
  01dc9	74 0c		 je	 SHORT $LN547@P_NiGHTSMo
  01dcb	c7 85 70 fe ff
	ff d5 05 00 00	 mov	 DWORD PTR tv1522[ebp], 1493 ; 000005d5H
  01dd5	eb 0a		 jmp	 SHORT $LN548@P_NiGHTSMo
$LN547@P_NiGHTSMo:
  01dd7	c7 85 70 fe ff
	ff d6 05 00 00	 mov	 DWORD PTR tv1522[ebp], 1494 ; 000005d6H
$LN548@P_NiGHTSMo:
  01de1	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1522[ebp]
  01de7	51		 push	 ecx
  01de8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01deb	8b 02		 mov	 eax, DWORD PTR [edx]
  01ded	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01df3	51		 push	 ecx
  01df4	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01df9	83 c4 08	 add	 esp, 8
$LN154@P_NiGHTSMo:

; 3966 : 		}

  01dfc	e9 4c 13 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN151@P_NiGHTSMo:

; 3967 : 		else if (player->anotherflyangle >= 57 && player->anotherflyangle <= 79)

  01e01	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e04	83 b8 c0 01 00
	00 39		 cmp	 DWORD PTR [eax+448], 57	; 00000039H
  01e0b	0f 8c 68 01 00
	00		 jl	 $LN162@P_NiGHTSMo
  01e11	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e14	83 b8 c0 01 00
	00 4f		 cmp	 DWORD PTR [eax+448], 79	; 0000004fH
  01e1b	0f 8f 58 01 00
	00		 jg	 $LN162@P_NiGHTSMo

; 3968 : 		{
; 3969 : 			if (player->pflags & PF_DRILLING)

  01e21	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e24	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01e2a	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  01e30	0f 84 03 01 00
	00		 je	 $LN164@P_NiGHTSMo

; 3970 : 			{
; 3971 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL8A]

  01e36	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e39	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e3b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01e41	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01e46	69 c8 17 06 00
	00		 imul	 ecx, eax, 1559
  01e4c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01e52	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01e55	72 25		 jb	 SHORT $LN167@P_NiGHTSMo
  01e57	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e5c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01e62	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01e67	69 c8 1a 06 00
	00		 imul	 ecx, eax, 1562
  01e6d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01e73	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01e76	0f 86 bb 00 00
	00		 jbe	 $LN169@P_NiGHTSMo
$LN167@P_NiGHTSMo:

; 3972 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL8D]))
; 3973 : 				{
; 3974 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  01e7c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01e7f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e81	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01e87	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01e8c	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  01e92	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01e98	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01e9b	72 21		 jb	 SHORT $LN170@P_NiGHTSMo
  01e9d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ea0	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ea2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01ea8	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01ead	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  01eb3	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01eb9	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01ebc	76 60		 jbe	 SHORT $LN168@P_NiGHTSMo
$LN170@P_NiGHTSMo:

; 3975 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 3976 : 					{
; 3977 : 						INT32 framenum;
; 3978 : 
; 3979 : 						framenum = player->mo->tracer->state->frame & 3;

  01ebe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ec1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ec3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01ec9	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  01ecc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01ecf	83 e1 03	 and	 ecx, 3
  01ed2	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _framenum$43[ebp], ecx

; 3980 : 
; 3981 : 						if (framenum == 3) // Drilld special case

  01ed8	83 bd 5c ff ff
	ff 03		 cmp	 DWORD PTR _framenum$43[ebp], 3
  01edf	75 1b		 jne	 SHORT $LN171@P_NiGHTSMo

; 3982 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8A);

  01ee1	68 17 06 00 00	 push	 1559			; 00000617H
  01ee6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ee9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01eeb	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01ef1	52		 push	 edx
  01ef2	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01ef7	83 c4 08	 add	 esp, 8
  01efa	eb 20		 jmp	 SHORT $LN172@P_NiGHTSMo
$LN171@P_NiGHTSMo:

; 3983 : 						else
; 3984 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8B+framenum);

  01efc	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _framenum$43[ebp]
  01f02	05 18 06 00 00	 add	 eax, 1560		; 00000618H
  01f07	50		 push	 eax
  01f08	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01f0b	8b 11		 mov	 edx, DWORD PTR [ecx]
  01f0d	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  01f13	50		 push	 eax
  01f14	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01f19	83 c4 08	 add	 esp, 8
$LN172@P_NiGHTSMo:

; 3985 : 					}

  01f1c	eb 19		 jmp	 SHORT $LN169@P_NiGHTSMo
$LN168@P_NiGHTSMo:

; 3986 : 					else
; 3987 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8A);

  01f1e	68 17 06 00 00	 push	 1559			; 00000617H
  01f23	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f26	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f28	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01f2e	52		 push	 edx
  01f2f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01f34	83 c4 08	 add	 esp, 8
$LN169@P_NiGHTSMo:

; 3988 : 				}
; 3989 : 			}

  01f37	eb 3b		 jmp	 SHORT $LN165@P_NiGHTSMo
$LN164@P_NiGHTSMo:

; 3990 : 			else
; 3991 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY8A : S_NIGHTSFLY8B);

  01f39	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01f3e	83 e0 01	 and	 eax, 1
  01f41	74 0c		 je	 SHORT $LN549@P_NiGHTSMo
  01f43	c7 85 70 fe ff
	ff d7 05 00 00	 mov	 DWORD PTR tv1579[ebp], 1495 ; 000005d7H
  01f4d	eb 0a		 jmp	 SHORT $LN550@P_NiGHTSMo
$LN549@P_NiGHTSMo:
  01f4f	c7 85 70 fe ff
	ff d8 05 00 00	 mov	 DWORD PTR tv1579[ebp], 1496 ; 000005d8H
$LN550@P_NiGHTSMo:
  01f59	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1579[ebp]
  01f5f	51		 push	 ecx
  01f60	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01f63	8b 02		 mov	 eax, DWORD PTR [edx]
  01f65	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01f6b	51		 push	 ecx
  01f6c	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  01f71	83 c4 08	 add	 esp, 8
$LN165@P_NiGHTSMo:

; 3992 : 		}

  01f74	e9 d4 11 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN162@P_NiGHTSMo:

; 3993 : 		else if (player->anotherflyangle >= 80 && player->anotherflyangle <= 101)

  01f79	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f7c	83 b8 c0 01 00
	00 50		 cmp	 DWORD PTR [eax+448], 80	; 00000050H
  01f83	0f 8c 68 01 00
	00		 jl	 $LN173@P_NiGHTSMo
  01f89	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f8c	83 b8 c0 01 00
	00 65		 cmp	 DWORD PTR [eax+448], 101 ; 00000065H
  01f93	0f 8f 58 01 00
	00		 jg	 $LN173@P_NiGHTSMo

; 3994 : 		{
; 3995 : 			if (player->pflags & PF_DRILLING)

  01f99	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01f9c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01fa2	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  01fa8	0f 84 03 01 00
	00		 je	 $LN175@P_NiGHTSMo

; 3996 : 			{
; 3997 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL9A]

  01fae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01fb1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fb3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01fb9	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01fbe	69 c8 1b 06 00
	00		 imul	 ecx, eax, 1563
  01fc4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01fca	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01fcd	72 25		 jb	 SHORT $LN178@P_NiGHTSMo
  01fcf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01fd2	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fd4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01fda	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01fdf	69 c8 1e 06 00
	00		 imul	 ecx, eax, 1566
  01fe5	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01feb	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01fee	0f 86 bb 00 00
	00		 jbe	 $LN180@P_NiGHTSMo
$LN178@P_NiGHTSMo:

; 3998 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL9D]))
; 3999 : 				{
; 4000 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  01ff4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01ff7	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ff9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01fff	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02004	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  0200a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02010	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02013	72 21		 jb	 SHORT $LN181@P_NiGHTSMo
  02015	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0201a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02020	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02025	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0202b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02031	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02034	76 60		 jbe	 SHORT $LN179@P_NiGHTSMo
$LN181@P_NiGHTSMo:

; 4001 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4002 : 					{
; 4003 : 						INT32 framenum;
; 4004 : 
; 4005 : 						framenum = player->mo->tracer->state->frame & 3;

  02036	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0203b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02041	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  02044	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02047	83 e1 03	 and	 ecx, 3
  0204a	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _framenum$42[ebp], ecx

; 4006 : 
; 4007 : 						if (framenum == 3) // Drilld special case

  02050	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$42[ebp], 3
  02057	75 1b		 jne	 SHORT $LN182@P_NiGHTSMo

; 4008 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL9A);

  02059	68 1b 06 00 00	 push	 1563			; 0000061bH
  0205e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02061	8b 08		 mov	 ecx, DWORD PTR [eax]
  02063	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02069	52		 push	 edx
  0206a	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0206f	83 c4 08	 add	 esp, 8
  02072	eb 20		 jmp	 SHORT $LN183@P_NiGHTSMo
$LN182@P_NiGHTSMo:

; 4009 : 						else
; 4010 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL9B+framenum);

  02074	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$42[ebp]
  0207a	05 1c 06 00 00	 add	 eax, 1564		; 0000061cH
  0207f	50		 push	 eax
  02080	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02083	8b 11		 mov	 edx, DWORD PTR [ecx]
  02085	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0208b	50		 push	 eax
  0208c	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02091	83 c4 08	 add	 esp, 8
$LN183@P_NiGHTSMo:

; 4011 : 					}

  02094	eb 19		 jmp	 SHORT $LN180@P_NiGHTSMo
$LN179@P_NiGHTSMo:

; 4012 : 					else
; 4013 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL9A);

  02096	68 1b 06 00 00	 push	 1563			; 0000061bH
  0209b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0209e	8b 08		 mov	 ecx, DWORD PTR [eax]
  020a0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  020a6	52		 push	 edx
  020a7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  020ac	83 c4 08	 add	 esp, 8
$LN180@P_NiGHTSMo:

; 4014 : 				}
; 4015 : 			}

  020af	eb 3b		 jmp	 SHORT $LN176@P_NiGHTSMo
$LN175@P_NiGHTSMo:

; 4016 : 			else
; 4017 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY9A : S_NIGHTSFLY9B);

  020b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  020b6	83 e0 01	 and	 eax, 1
  020b9	74 0c		 je	 SHORT $LN551@P_NiGHTSMo
  020bb	c7 85 70 fe ff
	ff d9 05 00 00	 mov	 DWORD PTR tv1636[ebp], 1497 ; 000005d9H
  020c5	eb 0a		 jmp	 SHORT $LN552@P_NiGHTSMo
$LN551@P_NiGHTSMo:
  020c7	c7 85 70 fe ff
	ff da 05 00 00	 mov	 DWORD PTR tv1636[ebp], 1498 ; 000005daH
$LN552@P_NiGHTSMo:
  020d1	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1636[ebp]
  020d7	51		 push	 ecx
  020d8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  020db	8b 02		 mov	 eax, DWORD PTR [edx]
  020dd	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  020e3	51		 push	 ecx
  020e4	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  020e9	83 c4 08	 add	 esp, 8
$LN176@P_NiGHTSMo:

; 4018 : 		}

  020ec	e9 5c 10 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN173@P_NiGHTSMo:

; 4019 : 		else if (player->anotherflyangle >= 102 && player->anotherflyangle <= 123)

  020f1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  020f4	83 b8 c0 01 00
	00 66		 cmp	 DWORD PTR [eax+448], 102 ; 00000066H
  020fb	0f 8c 68 01 00
	00		 jl	 $LN184@P_NiGHTSMo
  02101	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02104	83 b8 c0 01 00
	00 7b		 cmp	 DWORD PTR [eax+448], 123 ; 0000007bH
  0210b	0f 8f 58 01 00
	00		 jg	 $LN184@P_NiGHTSMo

; 4020 : 		{
; 4021 : 			if (player->pflags & PF_DRILLING)

  02111	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02114	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0211a	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02120	0f 84 03 01 00
	00		 je	 $LN186@P_NiGHTSMo

; 4022 : 			{
; 4023 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL8A]

  02126	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02129	8b 08		 mov	 ecx, DWORD PTR [eax]
  0212b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02131	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02136	69 c8 17 06 00
	00		 imul	 ecx, eax, 1559
  0213c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02142	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02145	72 25		 jb	 SHORT $LN189@P_NiGHTSMo
  02147	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0214a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0214c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02152	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02157	69 c8 1a 06 00
	00		 imul	 ecx, eax, 1562
  0215d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02163	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02166	0f 86 bb 00 00
	00		 jbe	 $LN191@P_NiGHTSMo
$LN189@P_NiGHTSMo:

; 4024 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL8D]))
; 4025 : 				{
; 4026 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  0216c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0216f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02171	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02177	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0217c	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  02182	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02188	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0218b	72 21		 jb	 SHORT $LN192@P_NiGHTSMo
  0218d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02190	8b 08		 mov	 ecx, DWORD PTR [eax]
  02192	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02198	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0219d	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  021a3	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  021a9	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  021ac	76 60		 jbe	 SHORT $LN190@P_NiGHTSMo
$LN192@P_NiGHTSMo:

; 4027 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4028 : 					{
; 4029 : 						INT32 framenum;
; 4030 : 
; 4031 : 						framenum = player->mo->tracer->state->frame & 3;

  021ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  021b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  021b3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  021b9	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  021bc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  021bf	83 e1 03	 and	 ecx, 3
  021c2	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _framenum$41[ebp], ecx

; 4032 : 
; 4033 : 						if (framenum == 3) // Drilld special case

  021c8	83 bd 54 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$41[ebp], 3
  021cf	75 1b		 jne	 SHORT $LN193@P_NiGHTSMo

; 4034 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8A);

  021d1	68 17 06 00 00	 push	 1559			; 00000617H
  021d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  021d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  021db	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  021e1	52		 push	 edx
  021e2	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  021e7	83 c4 08	 add	 esp, 8
  021ea	eb 20		 jmp	 SHORT $LN194@P_NiGHTSMo
$LN193@P_NiGHTSMo:

; 4035 : 						else
; 4036 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8B+framenum);

  021ec	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$41[ebp]
  021f2	05 18 06 00 00	 add	 eax, 1560		; 00000618H
  021f7	50		 push	 eax
  021f8	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  021fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  021fd	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  02203	50		 push	 eax
  02204	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02209	83 c4 08	 add	 esp, 8
$LN194@P_NiGHTSMo:

; 4037 : 					}

  0220c	eb 19		 jmp	 SHORT $LN191@P_NiGHTSMo
$LN190@P_NiGHTSMo:

; 4038 : 					else
; 4039 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8A);

  0220e	68 17 06 00 00	 push	 1559			; 00000617H
  02213	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02216	8b 08		 mov	 ecx, DWORD PTR [eax]
  02218	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0221e	52		 push	 edx
  0221f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02224	83 c4 08	 add	 esp, 8
$LN191@P_NiGHTSMo:

; 4040 : 				}
; 4041 : 			}

  02227	eb 3b		 jmp	 SHORT $LN187@P_NiGHTSMo
$LN186@P_NiGHTSMo:

; 4042 : 			else
; 4043 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY8A : S_NIGHTSFLY8B);

  02229	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0222e	83 e0 01	 and	 eax, 1
  02231	74 0c		 je	 SHORT $LN553@P_NiGHTSMo
  02233	c7 85 70 fe ff
	ff d7 05 00 00	 mov	 DWORD PTR tv1693[ebp], 1495 ; 000005d7H
  0223d	eb 0a		 jmp	 SHORT $LN554@P_NiGHTSMo
$LN553@P_NiGHTSMo:
  0223f	c7 85 70 fe ff
	ff d8 05 00 00	 mov	 DWORD PTR tv1693[ebp], 1496 ; 000005d8H
$LN554@P_NiGHTSMo:
  02249	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1693[ebp]
  0224f	51		 push	 ecx
  02250	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02253	8b 02		 mov	 eax, DWORD PTR [edx]
  02255	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0225b	51		 push	 ecx
  0225c	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02261	83 c4 08	 add	 esp, 8
$LN187@P_NiGHTSMo:

; 4044 : 		}

  02264	e9 e4 0e 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN184@P_NiGHTSMo:

; 4045 : 		else if (player->anotherflyangle >= 124 && player->anotherflyangle <= 146)

  02269	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0226c	83 b8 c0 01 00
	00 7c		 cmp	 DWORD PTR [eax+448], 124 ; 0000007cH
  02273	0f 8c 6b 01 00
	00		 jl	 $LN195@P_NiGHTSMo
  02279	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0227c	81 b8 c0 01 00
	00 92 00 00 00	 cmp	 DWORD PTR [eax+448], 146 ; 00000092H
  02286	0f 8f 58 01 00
	00		 jg	 $LN195@P_NiGHTSMo

; 4046 : 		{
; 4047 : 			if (player->pflags & PF_DRILLING)

  0228c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0228f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02295	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0229b	0f 84 03 01 00
	00		 je	 $LN197@P_NiGHTSMo

; 4048 : 			{
; 4049 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL7A]

  022a1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  022a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  022a6	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  022ac	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  022b1	69 c8 13 06 00
	00		 imul	 ecx, eax, 1555
  022b7	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  022bd	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  022c0	72 25		 jb	 SHORT $LN200@P_NiGHTSMo
  022c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  022c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  022c7	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  022cd	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  022d2	69 c8 16 06 00
	00		 imul	 ecx, eax, 1558
  022d8	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  022de	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  022e1	0f 86 bb 00 00
	00		 jbe	 $LN202@P_NiGHTSMo
$LN200@P_NiGHTSMo:

; 4050 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL7D]))
; 4051 : 				{
; 4052 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  022e7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  022ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  022ec	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  022f2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  022f7	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  022fd	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02303	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02306	72 21		 jb	 SHORT $LN203@P_NiGHTSMo
  02308	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0230b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0230d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02313	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02318	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0231e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02324	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02327	76 60		 jbe	 SHORT $LN201@P_NiGHTSMo
$LN203@P_NiGHTSMo:

; 4053 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4054 : 					{
; 4055 : 						INT32 framenum;
; 4056 : 
; 4057 : 						framenum = player->mo->tracer->state->frame & 3;

  02329	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0232c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0232e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02334	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  02337	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0233a	83 e1 03	 and	 ecx, 3
  0233d	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _framenum$40[ebp], ecx

; 4058 : 
; 4059 : 						if (framenum == 3) // Drilld special case

  02343	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$40[ebp], 3
  0234a	75 1b		 jne	 SHORT $LN204@P_NiGHTSMo

; 4060 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7A);

  0234c	68 13 06 00 00	 push	 1555			; 00000613H
  02351	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02354	8b 08		 mov	 ecx, DWORD PTR [eax]
  02356	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0235c	52		 push	 edx
  0235d	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02362	83 c4 08	 add	 esp, 8
  02365	eb 20		 jmp	 SHORT $LN205@P_NiGHTSMo
$LN204@P_NiGHTSMo:

; 4061 : 						else
; 4062 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7B+framenum);

  02367	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$40[ebp]
  0236d	05 14 06 00 00	 add	 eax, 1556		; 00000614H
  02372	50		 push	 eax
  02373	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02376	8b 11		 mov	 edx, DWORD PTR [ecx]
  02378	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0237e	50		 push	 eax
  0237f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02384	83 c4 08	 add	 esp, 8
$LN205@P_NiGHTSMo:

; 4063 : 					}

  02387	eb 19		 jmp	 SHORT $LN202@P_NiGHTSMo
$LN201@P_NiGHTSMo:

; 4064 : 					else
; 4065 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7A);

  02389	68 13 06 00 00	 push	 1555			; 00000613H
  0238e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02391	8b 08		 mov	 ecx, DWORD PTR [eax]
  02393	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02399	52		 push	 edx
  0239a	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0239f	83 c4 08	 add	 esp, 8
$LN202@P_NiGHTSMo:

; 4066 : 				}
; 4067 : 			}

  023a2	eb 3b		 jmp	 SHORT $LN198@P_NiGHTSMo
$LN197@P_NiGHTSMo:

; 4068 : 			else
; 4069 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY7A : S_NIGHTSFLY7B);

  023a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  023a9	83 e0 01	 and	 eax, 1
  023ac	74 0c		 je	 SHORT $LN555@P_NiGHTSMo
  023ae	c7 85 70 fe ff
	ff d5 05 00 00	 mov	 DWORD PTR tv1750[ebp], 1493 ; 000005d5H
  023b8	eb 0a		 jmp	 SHORT $LN556@P_NiGHTSMo
$LN555@P_NiGHTSMo:
  023ba	c7 85 70 fe ff
	ff d6 05 00 00	 mov	 DWORD PTR tv1750[ebp], 1494 ; 000005d6H
$LN556@P_NiGHTSMo:
  023c4	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1750[ebp]
  023ca	51		 push	 ecx
  023cb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  023ce	8b 02		 mov	 eax, DWORD PTR [edx]
  023d0	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  023d6	51		 push	 ecx
  023d7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  023dc	83 c4 08	 add	 esp, 8
$LN198@P_NiGHTSMo:

; 4070 : 		}

  023df	e9 69 0d 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN195@P_NiGHTSMo:

; 4071 : 		else if (player->anotherflyangle >= 147 && player->anotherflyangle <= 168)

  023e4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  023e7	81 b8 c0 01 00
	00 93 00 00 00	 cmp	 DWORD PTR [eax+448], 147 ; 00000093H
  023f1	0f 8c 6b 01 00
	00		 jl	 $LN206@P_NiGHTSMo
  023f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  023fa	81 b8 c0 01 00
	00 a8 00 00 00	 cmp	 DWORD PTR [eax+448], 168 ; 000000a8H
  02404	0f 8f 58 01 00
	00		 jg	 $LN206@P_NiGHTSMo

; 4072 : 		{
; 4073 : 			if (player->pflags & PF_DRILLING)

  0240a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0240d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02413	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02419	0f 84 03 01 00
	00		 je	 $LN208@P_NiGHTSMo

; 4074 : 			{
; 4075 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL6A]

  0241f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02422	8b 08		 mov	 ecx, DWORD PTR [eax]
  02424	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0242a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0242f	69 c8 0f 06 00
	00		 imul	 ecx, eax, 1551
  02435	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0243b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0243e	72 25		 jb	 SHORT $LN211@P_NiGHTSMo
  02440	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02443	8b 08		 mov	 ecx, DWORD PTR [eax]
  02445	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0244b	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02450	69 c8 12 06 00
	00		 imul	 ecx, eax, 1554
  02456	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0245c	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0245f	0f 86 bb 00 00
	00		 jbe	 $LN213@P_NiGHTSMo
$LN211@P_NiGHTSMo:

; 4076 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL6D]))
; 4077 : 				{
; 4078 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  02465	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02468	8b 08		 mov	 ecx, DWORD PTR [eax]
  0246a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02470	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02475	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  0247b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02481	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02484	72 21		 jb	 SHORT $LN214@P_NiGHTSMo
  02486	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02489	8b 08		 mov	 ecx, DWORD PTR [eax]
  0248b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02491	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02496	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0249c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  024a2	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  024a5	76 60		 jbe	 SHORT $LN212@P_NiGHTSMo
$LN214@P_NiGHTSMo:

; 4079 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4080 : 					{
; 4081 : 						INT32 framenum;
; 4082 : 
; 4083 : 						framenum = player->mo->tracer->state->frame & 3;

  024a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  024aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  024ac	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  024b2	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  024b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  024b8	83 e1 03	 and	 ecx, 3
  024bb	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _framenum$39[ebp], ecx

; 4084 : 
; 4085 : 						if (framenum == 3) // Drilld special case

  024c1	83 bd 4c ff ff
	ff 03		 cmp	 DWORD PTR _framenum$39[ebp], 3
  024c8	75 1b		 jne	 SHORT $LN215@P_NiGHTSMo

; 4086 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6A);

  024ca	68 0f 06 00 00	 push	 1551			; 0000060fH
  024cf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  024d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  024d4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  024da	52		 push	 edx
  024db	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  024e0	83 c4 08	 add	 esp, 8
  024e3	eb 20		 jmp	 SHORT $LN216@P_NiGHTSMo
$LN215@P_NiGHTSMo:

; 4087 : 						else
; 4088 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6B+framenum);

  024e5	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _framenum$39[ebp]
  024eb	05 10 06 00 00	 add	 eax, 1552		; 00000610H
  024f0	50		 push	 eax
  024f1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  024f4	8b 11		 mov	 edx, DWORD PTR [ecx]
  024f6	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  024fc	50		 push	 eax
  024fd	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02502	83 c4 08	 add	 esp, 8
$LN216@P_NiGHTSMo:

; 4089 : 					}

  02505	eb 19		 jmp	 SHORT $LN213@P_NiGHTSMo
$LN212@P_NiGHTSMo:

; 4090 : 					else
; 4091 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6A);

  02507	68 0f 06 00 00	 push	 1551			; 0000060fH
  0250c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0250f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02511	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02517	52		 push	 edx
  02518	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0251d	83 c4 08	 add	 esp, 8
$LN213@P_NiGHTSMo:

; 4092 : 				}
; 4093 : 			}

  02520	eb 3b		 jmp	 SHORT $LN209@P_NiGHTSMo
$LN208@P_NiGHTSMo:

; 4094 : 			else
; 4095 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY6A : S_NIGHTSFLY6B);

  02522	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02527	83 e0 01	 and	 eax, 1
  0252a	74 0c		 je	 SHORT $LN557@P_NiGHTSMo
  0252c	c7 85 70 fe ff
	ff d3 05 00 00	 mov	 DWORD PTR tv1807[ebp], 1491 ; 000005d3H
  02536	eb 0a		 jmp	 SHORT $LN558@P_NiGHTSMo
$LN557@P_NiGHTSMo:
  02538	c7 85 70 fe ff
	ff d4 05 00 00	 mov	 DWORD PTR tv1807[ebp], 1492 ; 000005d4H
$LN558@P_NiGHTSMo:
  02542	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1807[ebp]
  02548	51		 push	 ecx
  02549	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0254c	8b 02		 mov	 eax, DWORD PTR [edx]
  0254e	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  02554	51		 push	 ecx
  02555	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0255a	83 c4 08	 add	 esp, 8
$LN209@P_NiGHTSMo:

; 4096 : 		}

  0255d	e9 eb 0b 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN206@P_NiGHTSMo:

; 4097 : 		else if (player->anotherflyangle >= 169 && player->anotherflyangle <= 191)

  02562	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02565	81 b8 c0 01 00
	00 a9 00 00 00	 cmp	 DWORD PTR [eax+448], 169 ; 000000a9H
  0256f	0f 8c 6b 01 00
	00		 jl	 $LN217@P_NiGHTSMo
  02575	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02578	81 b8 c0 01 00
	00 bf 00 00 00	 cmp	 DWORD PTR [eax+448], 191 ; 000000bfH
  02582	0f 8f 58 01 00
	00		 jg	 $LN217@P_NiGHTSMo

; 4098 : 		{
; 4099 : 			if (player->pflags & PF_DRILLING)

  02588	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0258b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02591	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02597	0f 84 03 01 00
	00		 je	 $LN219@P_NiGHTSMo

; 4100 : 			{
; 4101 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL1A]

  0259d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  025a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  025a2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  025a8	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  025ad	69 c8 fb 05 00
	00		 imul	 ecx, eax, 1531
  025b3	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  025b9	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  025bc	72 25		 jb	 SHORT $LN222@P_NiGHTSMo
  025be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  025c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  025c3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  025c9	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  025ce	69 c8 fe 05 00
	00		 imul	 ecx, eax, 1534
  025d4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  025da	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  025dd	0f 86 bb 00 00
	00		 jbe	 $LN224@P_NiGHTSMo
$LN222@P_NiGHTSMo:

; 4102 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL1D]))
; 4103 : 				{
; 4104 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  025e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  025e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  025e8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  025ee	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  025f3	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  025f9	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  025ff	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02602	72 21		 jb	 SHORT $LN225@P_NiGHTSMo
  02604	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02607	8b 08		 mov	 ecx, DWORD PTR [eax]
  02609	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0260f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02614	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0261a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02620	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02623	76 60		 jbe	 SHORT $LN223@P_NiGHTSMo
$LN225@P_NiGHTSMo:

; 4105 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4106 : 					{
; 4107 : 						INT32 framenum;
; 4108 : 
; 4109 : 						framenum = player->mo->tracer->state->frame & 3;

  02625	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02628	8b 08		 mov	 ecx, DWORD PTR [eax]
  0262a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02630	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  02633	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02636	83 e1 03	 and	 ecx, 3
  02639	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _framenum$38[ebp], ecx

; 4110 : 
; 4111 : 						if (framenum == 3) // Drilld special case

  0263f	83 bd 48 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$38[ebp], 3
  02646	75 1b		 jne	 SHORT $LN226@P_NiGHTSMo

; 4112 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1A);

  02648	68 fb 05 00 00	 push	 1531			; 000005fbH
  0264d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02650	8b 08		 mov	 ecx, DWORD PTR [eax]
  02652	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02658	52		 push	 edx
  02659	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0265e	83 c4 08	 add	 esp, 8
  02661	eb 20		 jmp	 SHORT $LN227@P_NiGHTSMo
$LN226@P_NiGHTSMo:

; 4113 : 						else
; 4114 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1B+framenum);

  02663	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$38[ebp]
  02669	05 fc 05 00 00	 add	 eax, 1532		; 000005fcH
  0266e	50		 push	 eax
  0266f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02672	8b 11		 mov	 edx, DWORD PTR [ecx]
  02674	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0267a	50		 push	 eax
  0267b	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02680	83 c4 08	 add	 esp, 8
$LN227@P_NiGHTSMo:

; 4115 : 					}

  02683	eb 19		 jmp	 SHORT $LN224@P_NiGHTSMo
$LN223@P_NiGHTSMo:

; 4116 : 					else
; 4117 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1A);

  02685	68 fb 05 00 00	 push	 1531			; 000005fbH
  0268a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0268d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0268f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02695	52		 push	 edx
  02696	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0269b	83 c4 08	 add	 esp, 8
$LN224@P_NiGHTSMo:

; 4118 : 				}
; 4119 : 			}

  0269e	eb 3b		 jmp	 SHORT $LN220@P_NiGHTSMo
$LN219@P_NiGHTSMo:

; 4120 : 			else
; 4121 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY1A : S_NIGHTSFLY1B);

  026a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  026a5	83 e0 01	 and	 eax, 1
  026a8	74 0c		 je	 SHORT $LN559@P_NiGHTSMo
  026aa	c7 85 70 fe ff
	ff c9 05 00 00	 mov	 DWORD PTR tv1864[ebp], 1481 ; 000005c9H
  026b4	eb 0a		 jmp	 SHORT $LN560@P_NiGHTSMo
$LN559@P_NiGHTSMo:
  026b6	c7 85 70 fe ff
	ff ca 05 00 00	 mov	 DWORD PTR tv1864[ebp], 1482 ; 000005caH
$LN560@P_NiGHTSMo:
  026c0	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1864[ebp]
  026c6	51		 push	 ecx
  026c7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  026ca	8b 02		 mov	 eax, DWORD PTR [edx]
  026cc	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  026d2	51		 push	 ecx
  026d3	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  026d8	83 c4 08	 add	 esp, 8
$LN220@P_NiGHTSMo:

; 4122 : 		}

  026db	e9 6d 0a 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN217@P_NiGHTSMo:

; 4123 : 		else if (player->anotherflyangle >= 192 && player->anotherflyangle <= 213)

  026e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  026e3	81 b8 c0 01 00
	00 c0 00 00 00	 cmp	 DWORD PTR [eax+448], 192 ; 000000c0H
  026ed	0f 8c 6b 01 00
	00		 jl	 $LN228@P_NiGHTSMo
  026f3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  026f6	81 b8 c0 01 00
	00 d5 00 00 00	 cmp	 DWORD PTR [eax+448], 213 ; 000000d5H
  02700	0f 8f 58 01 00
	00		 jg	 $LN228@P_NiGHTSMo

; 4124 : 		{
; 4125 : 			if (player->pflags & PF_DRILLING)

  02706	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02709	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0270f	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02715	0f 84 03 01 00
	00		 je	 $LN230@P_NiGHTSMo

; 4126 : 			{
; 4127 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL2A]

  0271b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0271e	8b 08		 mov	 ecx, DWORD PTR [eax]
  02720	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02726	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0272b	69 c8 ff 05 00
	00		 imul	 ecx, eax, 1535
  02731	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02737	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0273a	72 25		 jb	 SHORT $LN233@P_NiGHTSMo
  0273c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0273f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02741	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02747	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0274c	69 c8 02 06 00
	00		 imul	 ecx, eax, 1538
  02752	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02758	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0275b	0f 86 bb 00 00
	00		 jbe	 $LN235@P_NiGHTSMo
$LN233@P_NiGHTSMo:

; 4128 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL2D]))
; 4129 : 				{
; 4130 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  02761	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02764	8b 08		 mov	 ecx, DWORD PTR [eax]
  02766	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0276c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02771	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  02777	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0277d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02780	72 21		 jb	 SHORT $LN236@P_NiGHTSMo
  02782	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02785	8b 08		 mov	 ecx, DWORD PTR [eax]
  02787	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0278d	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02792	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  02798	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0279e	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  027a1	76 60		 jbe	 SHORT $LN234@P_NiGHTSMo
$LN236@P_NiGHTSMo:

; 4131 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4132 : 					{
; 4133 : 						INT32 framenum;
; 4134 : 
; 4135 : 						framenum = player->mo->tracer->state->frame & 3;

  027a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  027a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  027a8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  027ae	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  027b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  027b4	83 e1 03	 and	 ecx, 3
  027b7	89 8d 44 ff ff
	ff		 mov	 DWORD PTR _framenum$37[ebp], ecx

; 4136 : 
; 4137 : 						if (framenum == 3) // Drilld special case

  027bd	83 bd 44 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$37[ebp], 3
  027c4	75 1b		 jne	 SHORT $LN237@P_NiGHTSMo

; 4138 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2A);

  027c6	68 ff 05 00 00	 push	 1535			; 000005ffH
  027cb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  027ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  027d0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  027d6	52		 push	 edx
  027d7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  027dc	83 c4 08	 add	 esp, 8
  027df	eb 20		 jmp	 SHORT $LN238@P_NiGHTSMo
$LN237@P_NiGHTSMo:

; 4139 : 						else
; 4140 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2B+framenum);

  027e1	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$37[ebp]
  027e7	05 00 06 00 00	 add	 eax, 1536		; 00000600H
  027ec	50		 push	 eax
  027ed	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  027f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  027f2	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  027f8	50		 push	 eax
  027f9	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  027fe	83 c4 08	 add	 esp, 8
$LN238@P_NiGHTSMo:

; 4141 : 					}

  02801	eb 19		 jmp	 SHORT $LN235@P_NiGHTSMo
$LN234@P_NiGHTSMo:

; 4142 : 					else
; 4143 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2A);

  02803	68 ff 05 00 00	 push	 1535			; 000005ffH
  02808	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0280b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0280d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02813	52		 push	 edx
  02814	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02819	83 c4 08	 add	 esp, 8
$LN235@P_NiGHTSMo:

; 4144 : 				}
; 4145 : 			}

  0281c	eb 3b		 jmp	 SHORT $LN231@P_NiGHTSMo
$LN230@P_NiGHTSMo:

; 4146 : 			else
; 4147 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY2A : S_NIGHTSFLY2B);

  0281e	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02823	83 e0 01	 and	 eax, 1
  02826	74 0c		 je	 SHORT $LN561@P_NiGHTSMo
  02828	c7 85 70 fe ff
	ff cb 05 00 00	 mov	 DWORD PTR tv1921[ebp], 1483 ; 000005cbH
  02832	eb 0a		 jmp	 SHORT $LN562@P_NiGHTSMo
$LN561@P_NiGHTSMo:
  02834	c7 85 70 fe ff
	ff cc 05 00 00	 mov	 DWORD PTR tv1921[ebp], 1484 ; 000005ccH
$LN562@P_NiGHTSMo:
  0283e	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1921[ebp]
  02844	51		 push	 ecx
  02845	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02848	8b 02		 mov	 eax, DWORD PTR [edx]
  0284a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  02850	51		 push	 ecx
  02851	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02856	83 c4 08	 add	 esp, 8
$LN231@P_NiGHTSMo:

; 4148 : 		}

  02859	e9 ef 08 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN228@P_NiGHTSMo:

; 4149 : 		else if (player->anotherflyangle >= 214 && player->anotherflyangle <= 236)

  0285e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02861	81 b8 c0 01 00
	00 d6 00 00 00	 cmp	 DWORD PTR [eax+448], 214 ; 000000d6H
  0286b	0f 8c 6b 01 00
	00		 jl	 $LN239@P_NiGHTSMo
  02871	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02874	81 b8 c0 01 00
	00 ec 00 00 00	 cmp	 DWORD PTR [eax+448], 236 ; 000000ecH
  0287e	0f 8f 58 01 00
	00		 jg	 $LN239@P_NiGHTSMo

; 4150 : 		{
; 4151 : 			if (player->pflags & PF_DRILLING)

  02884	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02887	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0288d	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02893	0f 84 03 01 00
	00		 je	 $LN241@P_NiGHTSMo

; 4152 : 			{
; 4153 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL3A]

  02899	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0289c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0289e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  028a4	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  028a9	69 c8 03 06 00
	00		 imul	 ecx, eax, 1539
  028af	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  028b5	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  028b8	72 25		 jb	 SHORT $LN244@P_NiGHTSMo
  028ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  028bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  028bf	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  028c5	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  028ca	69 c8 06 06 00
	00		 imul	 ecx, eax, 1542
  028d0	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  028d6	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  028d9	0f 86 bb 00 00
	00		 jbe	 $LN246@P_NiGHTSMo
$LN244@P_NiGHTSMo:

; 4154 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL3D]))
; 4155 : 				{
; 4156 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  028df	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  028e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  028e4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  028ea	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  028ef	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  028f5	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  028fb	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  028fe	72 21		 jb	 SHORT $LN247@P_NiGHTSMo
  02900	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02903	8b 08		 mov	 ecx, DWORD PTR [eax]
  02905	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0290b	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02910	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  02916	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0291c	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0291f	76 60		 jbe	 SHORT $LN245@P_NiGHTSMo
$LN247@P_NiGHTSMo:

; 4157 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4158 : 					{
; 4159 : 						INT32 framenum;
; 4160 : 
; 4161 : 						framenum = player->mo->tracer->state->frame & 3;

  02921	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02924	8b 08		 mov	 ecx, DWORD PTR [eax]
  02926	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0292c	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0292f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02932	83 e1 03	 and	 ecx, 3
  02935	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _framenum$36[ebp], ecx

; 4162 : 
; 4163 : 						if (framenum == 3) // Drilld special case

  0293b	83 bd 40 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$36[ebp], 3
  02942	75 1b		 jne	 SHORT $LN248@P_NiGHTSMo

; 4164 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3A);

  02944	68 03 06 00 00	 push	 1539			; 00000603H
  02949	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0294c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0294e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02954	52		 push	 edx
  02955	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0295a	83 c4 08	 add	 esp, 8
  0295d	eb 20		 jmp	 SHORT $LN249@P_NiGHTSMo
$LN248@P_NiGHTSMo:

; 4165 : 						else
; 4166 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3B+framenum);

  0295f	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$36[ebp]
  02965	05 04 06 00 00	 add	 eax, 1540		; 00000604H
  0296a	50		 push	 eax
  0296b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0296e	8b 11		 mov	 edx, DWORD PTR [ecx]
  02970	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  02976	50		 push	 eax
  02977	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0297c	83 c4 08	 add	 esp, 8
$LN249@P_NiGHTSMo:

; 4167 : 					}

  0297f	eb 19		 jmp	 SHORT $LN246@P_NiGHTSMo
$LN245@P_NiGHTSMo:

; 4168 : 					else
; 4169 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3A);

  02981	68 03 06 00 00	 push	 1539			; 00000603H
  02986	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02989	8b 08		 mov	 ecx, DWORD PTR [eax]
  0298b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02991	52		 push	 edx
  02992	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02997	83 c4 08	 add	 esp, 8
$LN246@P_NiGHTSMo:

; 4170 : 				}
; 4171 : 			}

  0299a	eb 3b		 jmp	 SHORT $LN242@P_NiGHTSMo
$LN241@P_NiGHTSMo:

; 4172 : 			else
; 4173 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY3A : S_NIGHTSFLY3B);

  0299c	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  029a1	83 e0 01	 and	 eax, 1
  029a4	74 0c		 je	 SHORT $LN563@P_NiGHTSMo
  029a6	c7 85 70 fe ff
	ff cd 05 00 00	 mov	 DWORD PTR tv1978[ebp], 1485 ; 000005cdH
  029b0	eb 0a		 jmp	 SHORT $LN564@P_NiGHTSMo
$LN563@P_NiGHTSMo:
  029b2	c7 85 70 fe ff
	ff ce 05 00 00	 mov	 DWORD PTR tv1978[ebp], 1486 ; 000005ceH
$LN564@P_NiGHTSMo:
  029bc	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv1978[ebp]
  029c2	51		 push	 ecx
  029c3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  029c6	8b 02		 mov	 eax, DWORD PTR [edx]
  029c8	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  029ce	51		 push	 ecx
  029cf	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  029d4	83 c4 08	 add	 esp, 8
$LN242@P_NiGHTSMo:

; 4174 : 		}

  029d7	e9 71 07 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN239@P_NiGHTSMo:

; 4175 : 		else if (player->anotherflyangle >= 237 && player->anotherflyangle <= 258)

  029dc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  029df	81 b8 c0 01 00
	00 ed 00 00 00	 cmp	 DWORD PTR [eax+448], 237 ; 000000edH
  029e9	0f 8c 6b 01 00
	00		 jl	 $LN250@P_NiGHTSMo
  029ef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  029f2	81 b8 c0 01 00
	00 02 01 00 00	 cmp	 DWORD PTR [eax+448], 258 ; 00000102H
  029fc	0f 8f 58 01 00
	00		 jg	 $LN250@P_NiGHTSMo

; 4176 : 		{
; 4177 : 			if (player->pflags & PF_DRILLING)

  02a02	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02a05	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02a0b	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02a11	0f 84 03 01 00
	00		 je	 $LN252@P_NiGHTSMo

; 4178 : 			{
; 4179 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL4A]

  02a17	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02a1a	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a1c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02a22	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02a27	69 c8 07 06 00
	00		 imul	 ecx, eax, 1543
  02a2d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02a33	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02a36	72 25		 jb	 SHORT $LN255@P_NiGHTSMo
  02a38	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02a3b	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a3d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02a43	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02a48	69 c8 0a 06 00
	00		 imul	 ecx, eax, 1546
  02a4e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02a54	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02a57	0f 86 bb 00 00
	00		 jbe	 $LN257@P_NiGHTSMo
$LN255@P_NiGHTSMo:

; 4180 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL4D]))
; 4181 : 				{
; 4182 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  02a5d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02a60	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a62	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02a68	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02a6d	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  02a73	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02a79	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02a7c	72 21		 jb	 SHORT $LN258@P_NiGHTSMo
  02a7e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02a81	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a83	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02a89	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02a8e	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  02a94	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02a9a	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02a9d	76 60		 jbe	 SHORT $LN256@P_NiGHTSMo
$LN258@P_NiGHTSMo:

; 4183 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4184 : 					{
; 4185 : 						INT32 framenum;
; 4186 : 
; 4187 : 						framenum = player->mo->tracer->state->frame & 3;

  02a9f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02aa2	8b 08		 mov	 ecx, DWORD PTR [eax]
  02aa4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02aaa	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  02aad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02ab0	83 e1 03	 and	 ecx, 3
  02ab3	89 8d 3c ff ff
	ff		 mov	 DWORD PTR _framenum$35[ebp], ecx

; 4188 : 
; 4189 : 						if (framenum == 3) // Drilld special case

  02ab9	83 bd 3c ff ff
	ff 03		 cmp	 DWORD PTR _framenum$35[ebp], 3
  02ac0	75 1b		 jne	 SHORT $LN259@P_NiGHTSMo

; 4190 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4A);

  02ac2	68 07 06 00 00	 push	 1543			; 00000607H
  02ac7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02aca	8b 08		 mov	 ecx, DWORD PTR [eax]
  02acc	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02ad2	52		 push	 edx
  02ad3	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02ad8	83 c4 08	 add	 esp, 8
  02adb	eb 20		 jmp	 SHORT $LN260@P_NiGHTSMo
$LN259@P_NiGHTSMo:

; 4191 : 						else
; 4192 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4B+framenum);

  02add	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _framenum$35[ebp]
  02ae3	05 08 06 00 00	 add	 eax, 1544		; 00000608H
  02ae8	50		 push	 eax
  02ae9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02aec	8b 11		 mov	 edx, DWORD PTR [ecx]
  02aee	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  02af4	50		 push	 eax
  02af5	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02afa	83 c4 08	 add	 esp, 8
$LN260@P_NiGHTSMo:

; 4193 : 					}

  02afd	eb 19		 jmp	 SHORT $LN257@P_NiGHTSMo
$LN256@P_NiGHTSMo:

; 4194 : 					else
; 4195 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4A);

  02aff	68 07 06 00 00	 push	 1543			; 00000607H
  02b04	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b07	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b09	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02b0f	52		 push	 edx
  02b10	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02b15	83 c4 08	 add	 esp, 8
$LN257@P_NiGHTSMo:

; 4196 : 				}
; 4197 : 			}

  02b18	eb 3b		 jmp	 SHORT $LN253@P_NiGHTSMo
$LN252@P_NiGHTSMo:

; 4198 : 			else
; 4199 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY4A : S_NIGHTSFLY4B);

  02b1a	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02b1f	83 e0 01	 and	 eax, 1
  02b22	74 0c		 je	 SHORT $LN565@P_NiGHTSMo
  02b24	c7 85 70 fe ff
	ff cf 05 00 00	 mov	 DWORD PTR tv2035[ebp], 1487 ; 000005cfH
  02b2e	eb 0a		 jmp	 SHORT $LN566@P_NiGHTSMo
$LN565@P_NiGHTSMo:
  02b30	c7 85 70 fe ff
	ff d0 05 00 00	 mov	 DWORD PTR tv2035[ebp], 1488 ; 000005d0H
$LN566@P_NiGHTSMo:
  02b3a	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2035[ebp]
  02b40	51		 push	 ecx
  02b41	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02b44	8b 02		 mov	 eax, DWORD PTR [edx]
  02b46	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  02b4c	51		 push	 ecx
  02b4d	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02b52	83 c4 08	 add	 esp, 8
$LN253@P_NiGHTSMo:

; 4200 : 		}

  02b55	e9 f3 05 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN250@P_NiGHTSMo:

; 4201 : 		else if (player->anotherflyangle >= 259 && player->anotherflyangle <= 281)

  02b5a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b5d	81 b8 c0 01 00
	00 03 01 00 00	 cmp	 DWORD PTR [eax+448], 259 ; 00000103H
  02b67	0f 8c 6b 01 00
	00		 jl	 $LN261@P_NiGHTSMo
  02b6d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b70	81 b8 c0 01 00
	00 19 01 00 00	 cmp	 DWORD PTR [eax+448], 281 ; 00000119H
  02b7a	0f 8f 58 01 00
	00		 jg	 $LN261@P_NiGHTSMo

; 4202 : 		{
; 4203 : 			if (player->pflags & PF_DRILLING)

  02b80	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b83	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02b89	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02b8f	0f 84 03 01 00
	00		 je	 $LN263@P_NiGHTSMo

; 4204 : 			{
; 4205 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL5A]

  02b95	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02b98	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b9a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02ba0	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02ba5	69 c8 0b 06 00
	00		 imul	 ecx, eax, 1547
  02bab	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02bb1	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02bb4	72 25		 jb	 SHORT $LN266@P_NiGHTSMo
  02bb6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02bb9	8b 08		 mov	 ecx, DWORD PTR [eax]
  02bbb	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02bc1	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02bc6	69 c8 0e 06 00
	00		 imul	 ecx, eax, 1550
  02bcc	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02bd2	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02bd5	0f 86 bb 00 00
	00		 jbe	 $LN268@P_NiGHTSMo
$LN266@P_NiGHTSMo:

; 4206 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL5D]))
; 4207 : 				{
; 4208 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  02bdb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02bde	8b 08		 mov	 ecx, DWORD PTR [eax]
  02be0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02be6	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02beb	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  02bf1	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02bf7	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02bfa	72 21		 jb	 SHORT $LN269@P_NiGHTSMo
  02bfc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02bff	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c01	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02c07	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02c0c	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  02c12	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02c18	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02c1b	76 60		 jbe	 SHORT $LN267@P_NiGHTSMo
$LN269@P_NiGHTSMo:

; 4209 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4210 : 					{
; 4211 : 						INT32 framenum;
; 4212 : 
; 4213 : 						framenum = player->mo->tracer->state->frame & 3;

  02c1d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c20	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c22	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02c28	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  02c2b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02c2e	83 e1 03	 and	 ecx, 3
  02c31	89 8d 38 ff ff
	ff		 mov	 DWORD PTR _framenum$34[ebp], ecx

; 4214 : 
; 4215 : 						if (framenum == 3) // Drilld special case

  02c37	83 bd 38 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$34[ebp], 3
  02c3e	75 1b		 jne	 SHORT $LN270@P_NiGHTSMo

; 4216 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL5A);

  02c40	68 0b 06 00 00	 push	 1547			; 0000060bH
  02c45	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c48	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c4a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02c50	52		 push	 edx
  02c51	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02c56	83 c4 08	 add	 esp, 8
  02c59	eb 20		 jmp	 SHORT $LN271@P_NiGHTSMo
$LN270@P_NiGHTSMo:

; 4217 : 						else
; 4218 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL5B+framenum);

  02c5b	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$34[ebp]
  02c61	05 0c 06 00 00	 add	 eax, 1548		; 0000060cH
  02c66	50		 push	 eax
  02c67	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02c6a	8b 11		 mov	 edx, DWORD PTR [ecx]
  02c6c	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  02c72	50		 push	 eax
  02c73	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02c78	83 c4 08	 add	 esp, 8
$LN271@P_NiGHTSMo:

; 4219 : 					}

  02c7b	eb 19		 jmp	 SHORT $LN268@P_NiGHTSMo
$LN267@P_NiGHTSMo:

; 4220 : 					else
; 4221 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL5A);

  02c7d	68 0b 06 00 00	 push	 1547			; 0000060bH
  02c82	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02c85	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c87	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02c8d	52		 push	 edx
  02c8e	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02c93	83 c4 08	 add	 esp, 8
$LN268@P_NiGHTSMo:

; 4222 : 				}
; 4223 : 			}

  02c96	eb 3b		 jmp	 SHORT $LN264@P_NiGHTSMo
$LN263@P_NiGHTSMo:

; 4224 : 			else
; 4225 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY5A : S_NIGHTSFLY5B);

  02c98	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02c9d	83 e0 01	 and	 eax, 1
  02ca0	74 0c		 je	 SHORT $LN567@P_NiGHTSMo
  02ca2	c7 85 70 fe ff
	ff d1 05 00 00	 mov	 DWORD PTR tv2092[ebp], 1489 ; 000005d1H
  02cac	eb 0a		 jmp	 SHORT $LN568@P_NiGHTSMo
$LN567@P_NiGHTSMo:
  02cae	c7 85 70 fe ff
	ff d2 05 00 00	 mov	 DWORD PTR tv2092[ebp], 1490 ; 000005d2H
$LN568@P_NiGHTSMo:
  02cb8	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2092[ebp]
  02cbe	51		 push	 ecx
  02cbf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02cc2	8b 02		 mov	 eax, DWORD PTR [edx]
  02cc4	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  02cca	51		 push	 ecx
  02ccb	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02cd0	83 c4 08	 add	 esp, 8
$LN264@P_NiGHTSMo:

; 4226 : 		}

  02cd3	e9 75 04 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN261@P_NiGHTSMo:

; 4227 : 		else if (player->anotherflyangle >= 282 && player->anotherflyangle <= 304)

  02cd8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02cdb	81 b8 c0 01 00
	00 1a 01 00 00	 cmp	 DWORD PTR [eax+448], 282 ; 0000011aH
  02ce5	0f 8c 6b 01 00
	00		 jl	 $LN272@P_NiGHTSMo
  02ceb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02cee	81 b8 c0 01 00
	00 30 01 00 00	 cmp	 DWORD PTR [eax+448], 304 ; 00000130H
  02cf8	0f 8f 58 01 00
	00		 jg	 $LN272@P_NiGHTSMo

; 4228 : 		{
; 4229 : 			if (player->pflags & PF_DRILLING)

  02cfe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d01	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02d07	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02d0d	0f 84 03 01 00
	00		 je	 $LN274@P_NiGHTSMo

; 4230 : 			{
; 4231 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL4A]

  02d13	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d16	8b 08		 mov	 ecx, DWORD PTR [eax]
  02d18	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02d1e	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02d23	69 c8 07 06 00
	00		 imul	 ecx, eax, 1543
  02d29	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02d2f	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02d32	72 25		 jb	 SHORT $LN277@P_NiGHTSMo
  02d34	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d37	8b 08		 mov	 ecx, DWORD PTR [eax]
  02d39	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02d3f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02d44	69 c8 0a 06 00
	00		 imul	 ecx, eax, 1546
  02d4a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02d50	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02d53	0f 86 bb 00 00
	00		 jbe	 $LN279@P_NiGHTSMo
$LN277@P_NiGHTSMo:

; 4232 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL4D]))
; 4233 : 				{
; 4234 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  02d59	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d5c	8b 08		 mov	 ecx, DWORD PTR [eax]
  02d5e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02d64	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02d69	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  02d6f	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02d75	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02d78	72 21		 jb	 SHORT $LN280@P_NiGHTSMo
  02d7a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d7d	8b 08		 mov	 ecx, DWORD PTR [eax]
  02d7f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02d85	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02d8a	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  02d90	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02d96	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02d99	76 60		 jbe	 SHORT $LN278@P_NiGHTSMo
$LN280@P_NiGHTSMo:

; 4235 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4236 : 					{
; 4237 : 						INT32 framenum;
; 4238 : 
; 4239 : 						framenum = player->mo->tracer->state->frame & 3;

  02d9b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02d9e	8b 08		 mov	 ecx, DWORD PTR [eax]
  02da0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02da6	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  02da9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02dac	83 e1 03	 and	 ecx, 3
  02daf	89 8d 34 ff ff
	ff		 mov	 DWORD PTR _framenum$33[ebp], ecx

; 4240 : 
; 4241 : 						if (framenum == 3) // Drilld special case

  02db5	83 bd 34 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$33[ebp], 3
  02dbc	75 1b		 jne	 SHORT $LN281@P_NiGHTSMo

; 4242 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4A);

  02dbe	68 07 06 00 00	 push	 1543			; 00000607H
  02dc3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02dc6	8b 08		 mov	 ecx, DWORD PTR [eax]
  02dc8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02dce	52		 push	 edx
  02dcf	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02dd4	83 c4 08	 add	 esp, 8
  02dd7	eb 20		 jmp	 SHORT $LN282@P_NiGHTSMo
$LN281@P_NiGHTSMo:

; 4243 : 						else
; 4244 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4B+framenum);

  02dd9	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$33[ebp]
  02ddf	05 08 06 00 00	 add	 eax, 1544		; 00000608H
  02de4	50		 push	 eax
  02de5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02de8	8b 11		 mov	 edx, DWORD PTR [ecx]
  02dea	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  02df0	50		 push	 eax
  02df1	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02df6	83 c4 08	 add	 esp, 8
$LN282@P_NiGHTSMo:

; 4245 : 					}

  02df9	eb 19		 jmp	 SHORT $LN279@P_NiGHTSMo
$LN278@P_NiGHTSMo:

; 4246 : 					else
; 4247 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4A);

  02dfb	68 07 06 00 00	 push	 1543			; 00000607H
  02e00	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e03	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e05	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02e0b	52		 push	 edx
  02e0c	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02e11	83 c4 08	 add	 esp, 8
$LN279@P_NiGHTSMo:

; 4248 : 				}
; 4249 : 			}

  02e14	eb 3b		 jmp	 SHORT $LN275@P_NiGHTSMo
$LN274@P_NiGHTSMo:

; 4250 : 			else
; 4251 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY4A : S_NIGHTSFLY4B);

  02e16	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02e1b	83 e0 01	 and	 eax, 1
  02e1e	74 0c		 je	 SHORT $LN569@P_NiGHTSMo
  02e20	c7 85 70 fe ff
	ff cf 05 00 00	 mov	 DWORD PTR tv2149[ebp], 1487 ; 000005cfH
  02e2a	eb 0a		 jmp	 SHORT $LN570@P_NiGHTSMo
$LN569@P_NiGHTSMo:
  02e2c	c7 85 70 fe ff
	ff d0 05 00 00	 mov	 DWORD PTR tv2149[ebp], 1488 ; 000005d0H
$LN570@P_NiGHTSMo:
  02e36	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2149[ebp]
  02e3c	51		 push	 ecx
  02e3d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02e40	8b 02		 mov	 eax, DWORD PTR [edx]
  02e42	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  02e48	51		 push	 ecx
  02e49	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02e4e	83 c4 08	 add	 esp, 8
$LN275@P_NiGHTSMo:

; 4252 : 		}

  02e51	e9 f7 02 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN272@P_NiGHTSMo:

; 4253 : 		else if (player->anotherflyangle >= 305 && player->anotherflyangle <= 326)

  02e56	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e59	81 b8 c0 01 00
	00 31 01 00 00	 cmp	 DWORD PTR [eax+448], 305 ; 00000131H
  02e63	0f 8c 6b 01 00
	00		 jl	 $LN283@P_NiGHTSMo
  02e69	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e6c	81 b8 c0 01 00
	00 46 01 00 00	 cmp	 DWORD PTR [eax+448], 326 ; 00000146H
  02e76	0f 8f 58 01 00
	00		 jg	 $LN283@P_NiGHTSMo

; 4254 : 		{
; 4255 : 			if (player->pflags & PF_DRILLING)

  02e7c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e7f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02e85	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  02e8b	0f 84 03 01 00
	00		 je	 $LN285@P_NiGHTSMo

; 4256 : 			{
; 4257 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL3A]

  02e91	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02e94	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e96	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02e9c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02ea1	69 c8 03 06 00
	00		 imul	 ecx, eax, 1539
  02ea7	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02ead	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02eb0	72 25		 jb	 SHORT $LN288@P_NiGHTSMo
  02eb2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02eb5	8b 08		 mov	 ecx, DWORD PTR [eax]
  02eb7	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02ebd	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02ec2	69 c8 06 06 00
	00		 imul	 ecx, eax, 1542
  02ec8	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02ece	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02ed1	0f 86 bb 00 00
	00		 jbe	 $LN290@P_NiGHTSMo
$LN288@P_NiGHTSMo:

; 4258 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL3D]))
; 4259 : 				{
; 4260 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  02ed7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02eda	8b 08		 mov	 ecx, DWORD PTR [eax]
  02edc	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02ee2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02ee7	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  02eed	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02ef3	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02ef6	72 21		 jb	 SHORT $LN291@P_NiGHTSMo
  02ef8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02efb	8b 08		 mov	 ecx, DWORD PTR [eax]
  02efd	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02f03	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  02f08	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  02f0e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  02f14	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  02f17	76 60		 jbe	 SHORT $LN289@P_NiGHTSMo
$LN291@P_NiGHTSMo:

; 4261 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4262 : 					{
; 4263 : 						INT32 framenum;
; 4264 : 
; 4265 : 						framenum = player->mo->tracer->state->frame & 3;

  02f19	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02f1c	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f1e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02f24	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  02f27	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02f2a	83 e1 03	 and	 ecx, 3
  02f2d	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _framenum$32[ebp], ecx

; 4266 : 
; 4267 : 						if (framenum == 3) // Drilld special case

  02f33	83 bd 30 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$32[ebp], 3
  02f3a	75 1b		 jne	 SHORT $LN292@P_NiGHTSMo

; 4268 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3A);

  02f3c	68 03 06 00 00	 push	 1539			; 00000603H
  02f41	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02f44	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f46	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02f4c	52		 push	 edx
  02f4d	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02f52	83 c4 08	 add	 esp, 8
  02f55	eb 20		 jmp	 SHORT $LN293@P_NiGHTSMo
$LN292@P_NiGHTSMo:

; 4269 : 						else
; 4270 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3B+framenum);

  02f57	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$32[ebp]
  02f5d	05 04 06 00 00	 add	 eax, 1540		; 00000604H
  02f62	50		 push	 eax
  02f63	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  02f66	8b 11		 mov	 edx, DWORD PTR [ecx]
  02f68	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  02f6e	50		 push	 eax
  02f6f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02f74	83 c4 08	 add	 esp, 8
$LN293@P_NiGHTSMo:

; 4271 : 					}

  02f77	eb 19		 jmp	 SHORT $LN290@P_NiGHTSMo
$LN289@P_NiGHTSMo:

; 4272 : 					else
; 4273 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3A);

  02f79	68 03 06 00 00	 push	 1539			; 00000603H
  02f7e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02f81	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f83	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  02f89	52		 push	 edx
  02f8a	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02f8f	83 c4 08	 add	 esp, 8
$LN290@P_NiGHTSMo:

; 4274 : 				}
; 4275 : 			}

  02f92	eb 3b		 jmp	 SHORT $LN286@P_NiGHTSMo
$LN285@P_NiGHTSMo:

; 4276 : 			else
; 4277 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY3A : S_NIGHTSFLY3B);

  02f94	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  02f99	83 e0 01	 and	 eax, 1
  02f9c	74 0c		 je	 SHORT $LN571@P_NiGHTSMo
  02f9e	c7 85 70 fe ff
	ff cd 05 00 00	 mov	 DWORD PTR tv2206[ebp], 1485 ; 000005cdH
  02fa8	eb 0a		 jmp	 SHORT $LN572@P_NiGHTSMo
$LN571@P_NiGHTSMo:
  02faa	c7 85 70 fe ff
	ff ce 05 00 00	 mov	 DWORD PTR tv2206[ebp], 1486 ; 000005ceH
$LN572@P_NiGHTSMo:
  02fb4	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2206[ebp]
  02fba	51		 push	 ecx
  02fbb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  02fbe	8b 02		 mov	 eax, DWORD PTR [edx]
  02fc0	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  02fc6	51		 push	 ecx
  02fc7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  02fcc	83 c4 08	 add	 esp, 8
$LN286@P_NiGHTSMo:

; 4278 : 		}

  02fcf	e9 79 01 00 00	 jmp	 $LN296@P_NiGHTSMo
$LN283@P_NiGHTSMo:

; 4279 : 		else if (player->anotherflyangle >= 327 && player->anotherflyangle <= 348)

  02fd4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02fd7	81 b8 c0 01 00
	00 47 01 00 00	 cmp	 DWORD PTR [eax+448], 327 ; 00000147H
  02fe1	0f 8c 66 01 00
	00		 jl	 $LN296@P_NiGHTSMo
  02fe7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02fea	81 b8 c0 01 00
	00 5c 01 00 00	 cmp	 DWORD PTR [eax+448], 348 ; 0000015cH
  02ff4	0f 8f 53 01 00
	00		 jg	 $LN296@P_NiGHTSMo

; 4280 : 		{
; 4281 : 			if (player->pflags & PF_DRILLING)

  02ffa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  02ffd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03003	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  03009	0f 84 03 01 00
	00		 je	 $LN295@P_NiGHTSMo

; 4282 : 			{
; 4283 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL2A]

  0300f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03012	8b 08		 mov	 ecx, DWORD PTR [eax]
  03014	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0301a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0301f	69 c8 ff 05 00
	00		 imul	 ecx, eax, 1535
  03025	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0302b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0302e	72 25		 jb	 SHORT $LN298@P_NiGHTSMo
  03030	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03033	8b 08		 mov	 ecx, DWORD PTR [eax]
  03035	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0303b	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03040	69 c8 02 06 00
	00		 imul	 ecx, eax, 1538
  03046	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0304c	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0304f	0f 86 bb 00 00
	00		 jbe	 $LN300@P_NiGHTSMo
$LN298@P_NiGHTSMo:

; 4284 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL2D]))
; 4285 : 				{
; 4286 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  03055	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0305a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03060	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03065	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  0306b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03071	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03074	72 21		 jb	 SHORT $LN301@P_NiGHTSMo
  03076	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0307b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03081	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03086	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0308c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03092	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03095	76 60		 jbe	 SHORT $LN299@P_NiGHTSMo
$LN301@P_NiGHTSMo:

; 4287 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4288 : 					{
; 4289 : 						INT32 framenum;
; 4290 : 
; 4291 : 						framenum = player->mo->tracer->state->frame & 3;

  03097	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0309a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0309c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  030a2	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  030a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  030a8	83 e1 03	 and	 ecx, 3
  030ab	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _framenum$31[ebp], ecx

; 4292 : 
; 4293 : 						if (framenum == 3) // Drilld special case

  030b1	83 bd 2c ff ff
	ff 03		 cmp	 DWORD PTR _framenum$31[ebp], 3
  030b8	75 1b		 jne	 SHORT $LN302@P_NiGHTSMo

; 4294 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2A);

  030ba	68 ff 05 00 00	 push	 1535			; 000005ffH
  030bf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  030c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  030c4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  030ca	52		 push	 edx
  030cb	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  030d0	83 c4 08	 add	 esp, 8
  030d3	eb 20		 jmp	 SHORT $LN303@P_NiGHTSMo
$LN302@P_NiGHTSMo:

; 4295 : 						else
; 4296 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2B+framenum);

  030d5	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _framenum$31[ebp]
  030db	05 00 06 00 00	 add	 eax, 1536		; 00000600H
  030e0	50		 push	 eax
  030e1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  030e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  030e6	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  030ec	50		 push	 eax
  030ed	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  030f2	83 c4 08	 add	 esp, 8
$LN303@P_NiGHTSMo:

; 4297 : 					}

  030f5	eb 19		 jmp	 SHORT $LN300@P_NiGHTSMo
$LN299@P_NiGHTSMo:

; 4298 : 					else
; 4299 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2A);

  030f7	68 ff 05 00 00	 push	 1535			; 000005ffH
  030fc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  030ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  03101	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03107	52		 push	 edx
  03108	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0310d	83 c4 08	 add	 esp, 8
$LN300@P_NiGHTSMo:

; 4300 : 				}
; 4301 : 			}

  03110	eb 3b		 jmp	 SHORT $LN296@P_NiGHTSMo
$LN295@P_NiGHTSMo:

; 4302 : 			else
; 4303 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY2A : S_NIGHTSFLY2B);

  03112	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  03117	83 e0 01	 and	 eax, 1
  0311a	74 0c		 je	 SHORT $LN573@P_NiGHTSMo
  0311c	c7 85 70 fe ff
	ff cb 05 00 00	 mov	 DWORD PTR tv2263[ebp], 1483 ; 000005cbH
  03126	eb 0a		 jmp	 SHORT $LN574@P_NiGHTSMo
$LN573@P_NiGHTSMo:
  03128	c7 85 70 fe ff
	ff cc 05 00 00	 mov	 DWORD PTR tv2263[ebp], 1484 ; 000005ccH
$LN574@P_NiGHTSMo:
  03132	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2263[ebp]
  03138	51		 push	 ecx
  03139	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0313c	8b 02		 mov	 eax, DWORD PTR [edx]
  0313e	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  03144	51		 push	 ecx
  03145	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0314a	83 c4 08	 add	 esp, 8
$LN296@P_NiGHTSMo:

; 4304 : 		}
; 4305 : 	}

  0314d	e9 b3 17 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN126@P_NiGHTSMo:

; 4306 : 	/////////////////////////////////////////////////////
; 4307 : 	////////////////////////////////////////////////////////
; 4308 : 	////////////////////////////////////////////////////////
; 4309 : 	//////////////////////////////////////////////////////
; 4310 : 	else
; 4311 : 	{
; 4312 : 		if (player->anotherflyangle >= 349 || player->anotherflyangle <= 11)

  03152	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03155	81 b8 c0 01 00
	00 5d 01 00 00	 cmp	 DWORD PTR [eax+448], 349 ; 0000015dH
  0315f	7d 10		 jge	 SHORT $LN306@P_NiGHTSMo
  03161	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03164	83 b8 c0 01 00
	00 0b		 cmp	 DWORD PTR [eax+448], 11	; 0000000bH
  0316b	0f 8f 58 01 00
	00		 jg	 $LN304@P_NiGHTSMo
$LN306@P_NiGHTSMo:

; 4313 : 		{
; 4314 : 			if (player->pflags & PF_DRILLING)

  03171	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03174	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0317a	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  03180	0f 84 03 01 00
	00		 je	 $LN307@P_NiGHTSMo

; 4315 : 			{
; 4316 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL1A]

  03186	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03189	8b 08		 mov	 ecx, DWORD PTR [eax]
  0318b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03191	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03196	69 c8 fb 05 00
	00		 imul	 ecx, eax, 1531
  0319c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  031a2	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  031a5	72 25		 jb	 SHORT $LN310@P_NiGHTSMo
  031a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  031aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  031ac	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  031b2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  031b7	69 c8 fe 05 00
	00		 imul	 ecx, eax, 1534
  031bd	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  031c3	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  031c6	0f 86 bb 00 00
	00		 jbe	 $LN312@P_NiGHTSMo
$LN310@P_NiGHTSMo:

; 4317 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL1D]))
; 4318 : 				{
; 4319 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  031cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  031cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  031d1	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  031d7	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  031dc	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  031e2	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  031e8	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  031eb	72 21		 jb	 SHORT $LN313@P_NiGHTSMo
  031ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  031f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  031f2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  031f8	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  031fd	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  03203	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03209	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0320c	76 60		 jbe	 SHORT $LN311@P_NiGHTSMo
$LN313@P_NiGHTSMo:

; 4320 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4321 : 					{
; 4322 : 						INT32 framenum;
; 4323 : 
; 4324 : 						framenum = player->mo->tracer->state->frame & 3;

  0320e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03211	8b 08		 mov	 ecx, DWORD PTR [eax]
  03213	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03219	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0321c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0321f	83 e1 03	 and	 ecx, 3
  03222	89 8d 28 ff ff
	ff		 mov	 DWORD PTR _framenum$30[ebp], ecx

; 4325 : 
; 4326 : 						if (framenum == 3) // Drilld special case

  03228	83 bd 28 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$30[ebp], 3
  0322f	75 1b		 jne	 SHORT $LN314@P_NiGHTSMo

; 4327 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1A);

  03231	68 fb 05 00 00	 push	 1531			; 000005fbH
  03236	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03239	8b 08		 mov	 ecx, DWORD PTR [eax]
  0323b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03241	52		 push	 edx
  03242	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03247	83 c4 08	 add	 esp, 8
  0324a	eb 20		 jmp	 SHORT $LN315@P_NiGHTSMo
$LN314@P_NiGHTSMo:

; 4328 : 						else
; 4329 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1B+framenum);

  0324c	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$30[ebp]
  03252	05 fc 05 00 00	 add	 eax, 1532		; 000005fcH
  03257	50		 push	 eax
  03258	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0325b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0325d	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  03263	50		 push	 eax
  03264	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03269	83 c4 08	 add	 esp, 8
$LN315@P_NiGHTSMo:

; 4330 : 					}

  0326c	eb 19		 jmp	 SHORT $LN312@P_NiGHTSMo
$LN311@P_NiGHTSMo:

; 4331 : 					else
; 4332 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1A);

  0326e	68 fb 05 00 00	 push	 1531			; 000005fbH
  03273	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03276	8b 08		 mov	 ecx, DWORD PTR [eax]
  03278	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0327e	52		 push	 edx
  0327f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03284	83 c4 08	 add	 esp, 8
$LN312@P_NiGHTSMo:

; 4333 : 				}
; 4334 : 			}

  03287	eb 3b		 jmp	 SHORT $LN308@P_NiGHTSMo
$LN307@P_NiGHTSMo:

; 4335 : 			else
; 4336 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY1A : S_NIGHTSFLY1B);

  03289	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0328e	83 e0 01	 and	 eax, 1
  03291	74 0c		 je	 SHORT $LN575@P_NiGHTSMo
  03293	c7 85 70 fe ff
	ff c9 05 00 00	 mov	 DWORD PTR tv2320[ebp], 1481 ; 000005c9H
  0329d	eb 0a		 jmp	 SHORT $LN576@P_NiGHTSMo
$LN575@P_NiGHTSMo:
  0329f	c7 85 70 fe ff
	ff ca 05 00 00	 mov	 DWORD PTR tv2320[ebp], 1482 ; 000005caH
$LN576@P_NiGHTSMo:
  032a9	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2320[ebp]
  032af	51		 push	 ecx
  032b0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  032b3	8b 02		 mov	 eax, DWORD PTR [edx]
  032b5	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  032bb	51		 push	 ecx
  032bc	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  032c1	83 c4 08	 add	 esp, 8
$LN308@P_NiGHTSMo:

; 4337 : 		}

  032c4	e9 3c 16 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN304@P_NiGHTSMo:

; 4338 : 		else if (player->anotherflyangle >= 12 && player->anotherflyangle <= 33)

  032c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  032cc	83 b8 c0 01 00
	00 0c		 cmp	 DWORD PTR [eax+448], 12	; 0000000cH
  032d3	0f 8c 68 01 00
	00		 jl	 $LN316@P_NiGHTSMo
  032d9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  032dc	83 b8 c0 01 00
	00 21		 cmp	 DWORD PTR [eax+448], 33	; 00000021H
  032e3	0f 8f 58 01 00
	00		 jg	 $LN316@P_NiGHTSMo

; 4339 : 		{
; 4340 : 			if (player->pflags & PF_DRILLING)

  032e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  032ec	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  032f2	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  032f8	0f 84 03 01 00
	00		 je	 $LN318@P_NiGHTSMo

; 4341 : 			{
; 4342 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL2A]

  032fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03301	8b 08		 mov	 ecx, DWORD PTR [eax]
  03303	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03309	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0330e	69 c8 ff 05 00
	00		 imul	 ecx, eax, 1535
  03314	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0331a	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0331d	72 25		 jb	 SHORT $LN321@P_NiGHTSMo
  0331f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03322	8b 08		 mov	 ecx, DWORD PTR [eax]
  03324	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0332a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0332f	69 c8 02 06 00
	00		 imul	 ecx, eax, 1538
  03335	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0333b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0333e	0f 86 bb 00 00
	00		 jbe	 $LN323@P_NiGHTSMo
$LN321@P_NiGHTSMo:

; 4343 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL2D]))
; 4344 : 				{
; 4345 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  03344	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03347	8b 08		 mov	 ecx, DWORD PTR [eax]
  03349	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0334f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03354	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  0335a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03360	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03363	72 21		 jb	 SHORT $LN324@P_NiGHTSMo
  03365	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03368	8b 08		 mov	 ecx, DWORD PTR [eax]
  0336a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03370	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03375	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0337b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03381	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03384	76 60		 jbe	 SHORT $LN322@P_NiGHTSMo
$LN324@P_NiGHTSMo:

; 4346 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4347 : 					{
; 4348 : 						INT32 framenum;
; 4349 : 
; 4350 : 						framenum = player->mo->tracer->state->frame & 3;

  03386	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03389	8b 08		 mov	 ecx, DWORD PTR [eax]
  0338b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03391	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  03394	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03397	83 e1 03	 and	 ecx, 3
  0339a	89 8d 24 ff ff
	ff		 mov	 DWORD PTR _framenum$29[ebp], ecx

; 4351 : 
; 4352 : 						if (framenum == 3) // Drilld special case

  033a0	83 bd 24 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$29[ebp], 3
  033a7	75 1b		 jne	 SHORT $LN325@P_NiGHTSMo

; 4353 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2A);

  033a9	68 ff 05 00 00	 push	 1535			; 000005ffH
  033ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  033b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  033b3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  033b9	52		 push	 edx
  033ba	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  033bf	83 c4 08	 add	 esp, 8
  033c2	eb 20		 jmp	 SHORT $LN326@P_NiGHTSMo
$LN325@P_NiGHTSMo:

; 4354 : 						else
; 4355 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2B+framenum);

  033c4	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$29[ebp]
  033ca	05 00 06 00 00	 add	 eax, 1536		; 00000600H
  033cf	50		 push	 eax
  033d0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  033d3	8b 11		 mov	 edx, DWORD PTR [ecx]
  033d5	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  033db	50		 push	 eax
  033dc	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  033e1	83 c4 08	 add	 esp, 8
$LN326@P_NiGHTSMo:

; 4356 : 					}

  033e4	eb 19		 jmp	 SHORT $LN323@P_NiGHTSMo
$LN322@P_NiGHTSMo:

; 4357 : 					else
; 4358 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2A);

  033e6	68 ff 05 00 00	 push	 1535			; 000005ffH
  033eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  033ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  033f0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  033f6	52		 push	 edx
  033f7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  033fc	83 c4 08	 add	 esp, 8
$LN323@P_NiGHTSMo:

; 4359 : 				}
; 4360 : 			}

  033ff	eb 3b		 jmp	 SHORT $LN319@P_NiGHTSMo
$LN318@P_NiGHTSMo:

; 4361 : 			else
; 4362 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY2A : S_NIGHTSFLY2B);

  03401	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  03406	83 e0 01	 and	 eax, 1
  03409	74 0c		 je	 SHORT $LN577@P_NiGHTSMo
  0340b	c7 85 70 fe ff
	ff cb 05 00 00	 mov	 DWORD PTR tv2377[ebp], 1483 ; 000005cbH
  03415	eb 0a		 jmp	 SHORT $LN578@P_NiGHTSMo
$LN577@P_NiGHTSMo:
  03417	c7 85 70 fe ff
	ff cc 05 00 00	 mov	 DWORD PTR tv2377[ebp], 1484 ; 000005ccH
$LN578@P_NiGHTSMo:
  03421	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2377[ebp]
  03427	51		 push	 ecx
  03428	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0342b	8b 02		 mov	 eax, DWORD PTR [edx]
  0342d	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  03433	51		 push	 ecx
  03434	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03439	83 c4 08	 add	 esp, 8
$LN319@P_NiGHTSMo:

; 4363 : 		}

  0343c	e9 c4 14 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN316@P_NiGHTSMo:

; 4364 : 		else if (player->anotherflyangle >= 34 && player->anotherflyangle <= 56)

  03441	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03444	83 b8 c0 01 00
	00 22		 cmp	 DWORD PTR [eax+448], 34	; 00000022H
  0344b	0f 8c 68 01 00
	00		 jl	 $LN327@P_NiGHTSMo
  03451	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03454	83 b8 c0 01 00
	00 38		 cmp	 DWORD PTR [eax+448], 56	; 00000038H
  0345b	0f 8f 58 01 00
	00		 jg	 $LN327@P_NiGHTSMo

; 4365 : 		{
; 4366 : 			if (player->pflags & PF_DRILLING)

  03461	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03464	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0346a	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  03470	0f 84 03 01 00
	00		 je	 $LN329@P_NiGHTSMo

; 4367 : 			{
; 4368 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL3A]

  03476	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03479	8b 08		 mov	 ecx, DWORD PTR [eax]
  0347b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03481	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03486	69 c8 03 06 00
	00		 imul	 ecx, eax, 1539
  0348c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03492	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03495	72 25		 jb	 SHORT $LN332@P_NiGHTSMo
  03497	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0349a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0349c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  034a2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  034a7	69 c8 06 06 00
	00		 imul	 ecx, eax, 1542
  034ad	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  034b3	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  034b6	0f 86 bb 00 00
	00		 jbe	 $LN334@P_NiGHTSMo
$LN332@P_NiGHTSMo:

; 4369 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL3D]))
; 4370 : 				{
; 4371 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  034bc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  034bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  034c1	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  034c7	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  034cc	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  034d2	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  034d8	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  034db	72 21		 jb	 SHORT $LN335@P_NiGHTSMo
  034dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  034e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  034e2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  034e8	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  034ed	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  034f3	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  034f9	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  034fc	76 60		 jbe	 SHORT $LN333@P_NiGHTSMo
$LN335@P_NiGHTSMo:

; 4372 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4373 : 					{
; 4374 : 						INT32 framenum;
; 4375 : 
; 4376 : 						framenum = player->mo->tracer->state->frame & 3;

  034fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03501	8b 08		 mov	 ecx, DWORD PTR [eax]
  03503	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03509	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0350c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0350f	83 e1 03	 and	 ecx, 3
  03512	89 8d 20 ff ff
	ff		 mov	 DWORD PTR _framenum$28[ebp], ecx

; 4377 : 
; 4378 : 						if (framenum == 3) // Drilld special case

  03518	83 bd 20 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$28[ebp], 3
  0351f	75 1b		 jne	 SHORT $LN336@P_NiGHTSMo

; 4379 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3A);

  03521	68 03 06 00 00	 push	 1539			; 00000603H
  03526	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03529	8b 08		 mov	 ecx, DWORD PTR [eax]
  0352b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03531	52		 push	 edx
  03532	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03537	83 c4 08	 add	 esp, 8
  0353a	eb 20		 jmp	 SHORT $LN337@P_NiGHTSMo
$LN336@P_NiGHTSMo:

; 4380 : 						else
; 4381 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3B+framenum);

  0353c	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$28[ebp]
  03542	05 04 06 00 00	 add	 eax, 1540		; 00000604H
  03547	50		 push	 eax
  03548	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0354b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0354d	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  03553	50		 push	 eax
  03554	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03559	83 c4 08	 add	 esp, 8
$LN337@P_NiGHTSMo:

; 4382 : 					}

  0355c	eb 19		 jmp	 SHORT $LN334@P_NiGHTSMo
$LN333@P_NiGHTSMo:

; 4383 : 					else
; 4384 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3A);

  0355e	68 03 06 00 00	 push	 1539			; 00000603H
  03563	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03566	8b 08		 mov	 ecx, DWORD PTR [eax]
  03568	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0356e	52		 push	 edx
  0356f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03574	83 c4 08	 add	 esp, 8
$LN334@P_NiGHTSMo:

; 4385 : 				}
; 4386 : 			}

  03577	eb 3b		 jmp	 SHORT $LN330@P_NiGHTSMo
$LN329@P_NiGHTSMo:

; 4387 : 			else
; 4388 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY3A : S_NIGHTSFLY3B);

  03579	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0357e	83 e0 01	 and	 eax, 1
  03581	74 0c		 je	 SHORT $LN579@P_NiGHTSMo
  03583	c7 85 70 fe ff
	ff cd 05 00 00	 mov	 DWORD PTR tv2434[ebp], 1485 ; 000005cdH
  0358d	eb 0a		 jmp	 SHORT $LN580@P_NiGHTSMo
$LN579@P_NiGHTSMo:
  0358f	c7 85 70 fe ff
	ff ce 05 00 00	 mov	 DWORD PTR tv2434[ebp], 1486 ; 000005ceH
$LN580@P_NiGHTSMo:
  03599	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2434[ebp]
  0359f	51		 push	 ecx
  035a0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  035a3	8b 02		 mov	 eax, DWORD PTR [edx]
  035a5	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  035ab	51		 push	 ecx
  035ac	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  035b1	83 c4 08	 add	 esp, 8
$LN330@P_NiGHTSMo:

; 4389 : 		}

  035b4	e9 4c 13 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN327@P_NiGHTSMo:

; 4390 : 		else if (player->anotherflyangle >= 57 && player->anotherflyangle <= 79)

  035b9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  035bc	83 b8 c0 01 00
	00 39		 cmp	 DWORD PTR [eax+448], 57	; 00000039H
  035c3	0f 8c 68 01 00
	00		 jl	 $LN338@P_NiGHTSMo
  035c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  035cc	83 b8 c0 01 00
	00 4f		 cmp	 DWORD PTR [eax+448], 79	; 0000004fH
  035d3	0f 8f 58 01 00
	00		 jg	 $LN338@P_NiGHTSMo

; 4391 : 		{
; 4392 : 			if (player->pflags & PF_DRILLING)

  035d9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  035dc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  035e2	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  035e8	0f 84 03 01 00
	00		 je	 $LN340@P_NiGHTSMo

; 4393 : 			{
; 4394 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL4A]

  035ee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  035f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  035f3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  035f9	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  035fe	69 c8 07 06 00
	00		 imul	 ecx, eax, 1543
  03604	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0360a	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0360d	72 25		 jb	 SHORT $LN343@P_NiGHTSMo
  0360f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03612	8b 08		 mov	 ecx, DWORD PTR [eax]
  03614	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0361a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0361f	69 c8 0a 06 00
	00		 imul	 ecx, eax, 1546
  03625	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0362b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0362e	0f 86 bb 00 00
	00		 jbe	 $LN345@P_NiGHTSMo
$LN343@P_NiGHTSMo:

; 4395 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL4D]))
; 4396 : 				{
; 4397 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  03634	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03637	8b 08		 mov	 ecx, DWORD PTR [eax]
  03639	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0363f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03644	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  0364a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03650	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03653	72 21		 jb	 SHORT $LN346@P_NiGHTSMo
  03655	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03658	8b 08		 mov	 ecx, DWORD PTR [eax]
  0365a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03660	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03665	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0366b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03671	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03674	76 60		 jbe	 SHORT $LN344@P_NiGHTSMo
$LN346@P_NiGHTSMo:

; 4398 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4399 : 					{
; 4400 : 						INT32 framenum;
; 4401 : 
; 4402 : 						framenum = player->mo->tracer->state->frame & 3;

  03676	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03679	8b 08		 mov	 ecx, DWORD PTR [eax]
  0367b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03681	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  03684	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03687	83 e1 03	 and	 ecx, 3
  0368a	89 8d 1c ff ff
	ff		 mov	 DWORD PTR _framenum$27[ebp], ecx

; 4403 : 
; 4404 : 						if (framenum == 3) // Drilld special case

  03690	83 bd 1c ff ff
	ff 03		 cmp	 DWORD PTR _framenum$27[ebp], 3
  03697	75 1b		 jne	 SHORT $LN347@P_NiGHTSMo

; 4405 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4A);

  03699	68 07 06 00 00	 push	 1543			; 00000607H
  0369e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  036a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  036a3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  036a9	52		 push	 edx
  036aa	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  036af	83 c4 08	 add	 esp, 8
  036b2	eb 20		 jmp	 SHORT $LN348@P_NiGHTSMo
$LN347@P_NiGHTSMo:

; 4406 : 						else
; 4407 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4B+framenum);

  036b4	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _framenum$27[ebp]
  036ba	05 08 06 00 00	 add	 eax, 1544		; 00000608H
  036bf	50		 push	 eax
  036c0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  036c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  036c5	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  036cb	50		 push	 eax
  036cc	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  036d1	83 c4 08	 add	 esp, 8
$LN348@P_NiGHTSMo:

; 4408 : 					}

  036d4	eb 19		 jmp	 SHORT $LN345@P_NiGHTSMo
$LN344@P_NiGHTSMo:

; 4409 : 					else
; 4410 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4A);

  036d6	68 07 06 00 00	 push	 1543			; 00000607H
  036db	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  036de	8b 08		 mov	 ecx, DWORD PTR [eax]
  036e0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  036e6	52		 push	 edx
  036e7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  036ec	83 c4 08	 add	 esp, 8
$LN345@P_NiGHTSMo:

; 4411 : 				}
; 4412 : 			}

  036ef	eb 3b		 jmp	 SHORT $LN341@P_NiGHTSMo
$LN340@P_NiGHTSMo:

; 4413 : 			else
; 4414 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY4A : S_NIGHTSFLY4B);

  036f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  036f6	83 e0 01	 and	 eax, 1
  036f9	74 0c		 je	 SHORT $LN581@P_NiGHTSMo
  036fb	c7 85 70 fe ff
	ff cf 05 00 00	 mov	 DWORD PTR tv2491[ebp], 1487 ; 000005cfH
  03705	eb 0a		 jmp	 SHORT $LN582@P_NiGHTSMo
$LN581@P_NiGHTSMo:
  03707	c7 85 70 fe ff
	ff d0 05 00 00	 mov	 DWORD PTR tv2491[ebp], 1488 ; 000005d0H
$LN582@P_NiGHTSMo:
  03711	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2491[ebp]
  03717	51		 push	 ecx
  03718	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0371b	8b 02		 mov	 eax, DWORD PTR [edx]
  0371d	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  03723	51		 push	 ecx
  03724	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03729	83 c4 08	 add	 esp, 8
$LN341@P_NiGHTSMo:

; 4415 : 		}

  0372c	e9 d4 11 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN338@P_NiGHTSMo:

; 4416 : 		else if (player->anotherflyangle >= 80 && player->anotherflyangle <= 101)

  03731	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03734	83 b8 c0 01 00
	00 50		 cmp	 DWORD PTR [eax+448], 80	; 00000050H
  0373b	0f 8c 68 01 00
	00		 jl	 $LN349@P_NiGHTSMo
  03741	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03744	83 b8 c0 01 00
	00 65		 cmp	 DWORD PTR [eax+448], 101 ; 00000065H
  0374b	0f 8f 58 01 00
	00		 jg	 $LN349@P_NiGHTSMo

; 4417 : 		{
; 4418 : 			if (player->pflags & PF_DRILLING)

  03751	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03754	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0375a	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  03760	0f 84 03 01 00
	00		 je	 $LN351@P_NiGHTSMo

; 4419 : 			{
; 4420 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL5A]

  03766	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03769	8b 08		 mov	 ecx, DWORD PTR [eax]
  0376b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03771	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03776	69 c8 0b 06 00
	00		 imul	 ecx, eax, 1547
  0377c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03782	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03785	72 25		 jb	 SHORT $LN354@P_NiGHTSMo
  03787	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0378a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0378c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03792	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03797	69 c8 0e 06 00
	00		 imul	 ecx, eax, 1550
  0379d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  037a3	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  037a6	0f 86 bb 00 00
	00		 jbe	 $LN356@P_NiGHTSMo
$LN354@P_NiGHTSMo:

; 4421 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL5D]))
; 4422 : 				{
; 4423 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  037ac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  037af	8b 08		 mov	 ecx, DWORD PTR [eax]
  037b1	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  037b7	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  037bc	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  037c2	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  037c8	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  037cb	72 21		 jb	 SHORT $LN357@P_NiGHTSMo
  037cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  037d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  037d2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  037d8	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  037dd	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  037e3	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  037e9	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  037ec	76 60		 jbe	 SHORT $LN355@P_NiGHTSMo
$LN357@P_NiGHTSMo:

; 4424 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4425 : 					{
; 4426 : 						INT32 framenum;
; 4427 : 
; 4428 : 						framenum = player->mo->tracer->state->frame & 3;

  037ee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  037f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  037f3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  037f9	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  037fc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  037ff	83 e1 03	 and	 ecx, 3
  03802	89 8d 18 ff ff
	ff		 mov	 DWORD PTR _framenum$26[ebp], ecx

; 4429 : 
; 4430 : 						if (framenum == 3) // Drilld special case

  03808	83 bd 18 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$26[ebp], 3
  0380f	75 1b		 jne	 SHORT $LN358@P_NiGHTSMo

; 4431 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL5A);

  03811	68 0b 06 00 00	 push	 1547			; 0000060bH
  03816	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03819	8b 08		 mov	 ecx, DWORD PTR [eax]
  0381b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03821	52		 push	 edx
  03822	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03827	83 c4 08	 add	 esp, 8
  0382a	eb 20		 jmp	 SHORT $LN359@P_NiGHTSMo
$LN358@P_NiGHTSMo:

; 4432 : 						else
; 4433 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL5B+framenum);

  0382c	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$26[ebp]
  03832	05 0c 06 00 00	 add	 eax, 1548		; 0000060cH
  03837	50		 push	 eax
  03838	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0383b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0383d	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  03843	50		 push	 eax
  03844	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03849	83 c4 08	 add	 esp, 8
$LN359@P_NiGHTSMo:

; 4434 : 					}

  0384c	eb 19		 jmp	 SHORT $LN356@P_NiGHTSMo
$LN355@P_NiGHTSMo:

; 4435 : 					else
; 4436 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL5A);

  0384e	68 0b 06 00 00	 push	 1547			; 0000060bH
  03853	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03856	8b 08		 mov	 ecx, DWORD PTR [eax]
  03858	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0385e	52		 push	 edx
  0385f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03864	83 c4 08	 add	 esp, 8
$LN356@P_NiGHTSMo:

; 4437 : 				}
; 4438 : 			}

  03867	eb 3b		 jmp	 SHORT $LN352@P_NiGHTSMo
$LN351@P_NiGHTSMo:

; 4439 : 			else
; 4440 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY5A : S_NIGHTSFLY5B);

  03869	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0386e	83 e0 01	 and	 eax, 1
  03871	74 0c		 je	 SHORT $LN583@P_NiGHTSMo
  03873	c7 85 70 fe ff
	ff d1 05 00 00	 mov	 DWORD PTR tv2548[ebp], 1489 ; 000005d1H
  0387d	eb 0a		 jmp	 SHORT $LN584@P_NiGHTSMo
$LN583@P_NiGHTSMo:
  0387f	c7 85 70 fe ff
	ff d2 05 00 00	 mov	 DWORD PTR tv2548[ebp], 1490 ; 000005d2H
$LN584@P_NiGHTSMo:
  03889	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2548[ebp]
  0388f	51		 push	 ecx
  03890	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03893	8b 02		 mov	 eax, DWORD PTR [edx]
  03895	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0389b	51		 push	 ecx
  0389c	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  038a1	83 c4 08	 add	 esp, 8
$LN352@P_NiGHTSMo:

; 4441 : 		}

  038a4	e9 5c 10 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN349@P_NiGHTSMo:

; 4442 : 		else if (player->anotherflyangle >= 102 && player->anotherflyangle <= 123)

  038a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  038ac	83 b8 c0 01 00
	00 66		 cmp	 DWORD PTR [eax+448], 102 ; 00000066H
  038b3	0f 8c 68 01 00
	00		 jl	 $LN360@P_NiGHTSMo
  038b9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  038bc	83 b8 c0 01 00
	00 7b		 cmp	 DWORD PTR [eax+448], 123 ; 0000007bH
  038c3	0f 8f 58 01 00
	00		 jg	 $LN360@P_NiGHTSMo

; 4443 : 		{
; 4444 : 			if (player->pflags & PF_DRILLING)

  038c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  038cc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  038d2	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  038d8	0f 84 03 01 00
	00		 je	 $LN362@P_NiGHTSMo

; 4445 : 			{
; 4446 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL4A]

  038de	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  038e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  038e3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  038e9	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  038ee	69 c8 07 06 00
	00		 imul	 ecx, eax, 1543
  038f4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  038fa	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  038fd	72 25		 jb	 SHORT $LN365@P_NiGHTSMo
  038ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03902	8b 08		 mov	 ecx, DWORD PTR [eax]
  03904	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0390a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0390f	69 c8 0a 06 00
	00		 imul	 ecx, eax, 1546
  03915	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0391b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0391e	0f 86 bb 00 00
	00		 jbe	 $LN367@P_NiGHTSMo
$LN365@P_NiGHTSMo:

; 4447 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL4D]))
; 4448 : 				{
; 4449 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  03924	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03927	8b 08		 mov	 ecx, DWORD PTR [eax]
  03929	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0392f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03934	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  0393a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03940	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03943	72 21		 jb	 SHORT $LN368@P_NiGHTSMo
  03945	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03948	8b 08		 mov	 ecx, DWORD PTR [eax]
  0394a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03950	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03955	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0395b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03961	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03964	76 60		 jbe	 SHORT $LN366@P_NiGHTSMo
$LN368@P_NiGHTSMo:

; 4450 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4451 : 					{
; 4452 : 						INT32 framenum;
; 4453 : 
; 4454 : 						framenum = player->mo->tracer->state->frame & 3;

  03966	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03969	8b 08		 mov	 ecx, DWORD PTR [eax]
  0396b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03971	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  03974	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03977	83 e1 03	 and	 ecx, 3
  0397a	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _framenum$25[ebp], ecx

; 4455 : 
; 4456 : 						if (framenum == 3) // Drilld special case

  03980	83 bd 14 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$25[ebp], 3
  03987	75 1b		 jne	 SHORT $LN369@P_NiGHTSMo

; 4457 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4A);

  03989	68 07 06 00 00	 push	 1543			; 00000607H
  0398e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03991	8b 08		 mov	 ecx, DWORD PTR [eax]
  03993	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03999	52		 push	 edx
  0399a	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0399f	83 c4 08	 add	 esp, 8
  039a2	eb 20		 jmp	 SHORT $LN370@P_NiGHTSMo
$LN369@P_NiGHTSMo:

; 4458 : 						else
; 4459 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4B+framenum);

  039a4	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$25[ebp]
  039aa	05 08 06 00 00	 add	 eax, 1544		; 00000608H
  039af	50		 push	 eax
  039b0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  039b3	8b 11		 mov	 edx, DWORD PTR [ecx]
  039b5	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  039bb	50		 push	 eax
  039bc	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  039c1	83 c4 08	 add	 esp, 8
$LN370@P_NiGHTSMo:

; 4460 : 					}

  039c4	eb 19		 jmp	 SHORT $LN367@P_NiGHTSMo
$LN366@P_NiGHTSMo:

; 4461 : 					else
; 4462 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL4A);

  039c6	68 07 06 00 00	 push	 1543			; 00000607H
  039cb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  039ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  039d0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  039d6	52		 push	 edx
  039d7	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  039dc	83 c4 08	 add	 esp, 8
$LN367@P_NiGHTSMo:

; 4463 : 				}
; 4464 : 			}

  039df	eb 3b		 jmp	 SHORT $LN363@P_NiGHTSMo
$LN362@P_NiGHTSMo:

; 4465 : 			else
; 4466 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY4A : S_NIGHTSFLY4B);

  039e1	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  039e6	83 e0 01	 and	 eax, 1
  039e9	74 0c		 je	 SHORT $LN585@P_NiGHTSMo
  039eb	c7 85 70 fe ff
	ff cf 05 00 00	 mov	 DWORD PTR tv2605[ebp], 1487 ; 000005cfH
  039f5	eb 0a		 jmp	 SHORT $LN586@P_NiGHTSMo
$LN585@P_NiGHTSMo:
  039f7	c7 85 70 fe ff
	ff d0 05 00 00	 mov	 DWORD PTR tv2605[ebp], 1488 ; 000005d0H
$LN586@P_NiGHTSMo:
  03a01	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2605[ebp]
  03a07	51		 push	 ecx
  03a08	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03a0b	8b 02		 mov	 eax, DWORD PTR [edx]
  03a0d	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  03a13	51		 push	 ecx
  03a14	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03a19	83 c4 08	 add	 esp, 8
$LN363@P_NiGHTSMo:

; 4467 : 		}

  03a1c	e9 e4 0e 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN360@P_NiGHTSMo:

; 4468 : 		else if (player->anotherflyangle >= 124 && player->anotherflyangle <= 146)

  03a21	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03a24	83 b8 c0 01 00
	00 7c		 cmp	 DWORD PTR [eax+448], 124 ; 0000007cH
  03a2b	0f 8c 6b 01 00
	00		 jl	 $LN371@P_NiGHTSMo
  03a31	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03a34	81 b8 c0 01 00
	00 92 00 00 00	 cmp	 DWORD PTR [eax+448], 146 ; 00000092H
  03a3e	0f 8f 58 01 00
	00		 jg	 $LN371@P_NiGHTSMo

; 4469 : 		{
; 4470 : 			if (player->pflags & PF_DRILLING)

  03a44	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03a47	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03a4d	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  03a53	0f 84 03 01 00
	00		 je	 $LN373@P_NiGHTSMo

; 4471 : 			{
; 4472 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL3A]

  03a59	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03a5c	8b 08		 mov	 ecx, DWORD PTR [eax]
  03a5e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03a64	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03a69	69 c8 03 06 00
	00		 imul	 ecx, eax, 1539
  03a6f	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03a75	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03a78	72 25		 jb	 SHORT $LN376@P_NiGHTSMo
  03a7a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03a7d	8b 08		 mov	 ecx, DWORD PTR [eax]
  03a7f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03a85	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03a8a	69 c8 06 06 00
	00		 imul	 ecx, eax, 1542
  03a90	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03a96	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03a99	0f 86 bb 00 00
	00		 jbe	 $LN378@P_NiGHTSMo
$LN376@P_NiGHTSMo:

; 4473 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL3D]))
; 4474 : 				{
; 4475 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  03a9f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03aa2	8b 08		 mov	 ecx, DWORD PTR [eax]
  03aa4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03aaa	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03aaf	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  03ab5	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03abb	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03abe	72 21		 jb	 SHORT $LN379@P_NiGHTSMo
  03ac0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ac3	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ac5	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03acb	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03ad0	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  03ad6	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03adc	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03adf	76 60		 jbe	 SHORT $LN377@P_NiGHTSMo
$LN379@P_NiGHTSMo:

; 4476 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4477 : 					{
; 4478 : 						INT32 framenum;
; 4479 : 
; 4480 : 						framenum = player->mo->tracer->state->frame & 3;

  03ae1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ae4	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ae6	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03aec	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  03aef	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03af2	83 e1 03	 and	 ecx, 3
  03af5	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _framenum$24[ebp], ecx

; 4481 : 
; 4482 : 						if (framenum == 3) // Drilld special case

  03afb	83 bd 10 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$24[ebp], 3
  03b02	75 1b		 jne	 SHORT $LN380@P_NiGHTSMo

; 4483 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3A);

  03b04	68 03 06 00 00	 push	 1539			; 00000603H
  03b09	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b0c	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b0e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03b14	52		 push	 edx
  03b15	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03b1a	83 c4 08	 add	 esp, 8
  03b1d	eb 20		 jmp	 SHORT $LN381@P_NiGHTSMo
$LN380@P_NiGHTSMo:

; 4484 : 						else
; 4485 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3B+framenum);

  03b1f	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$24[ebp]
  03b25	05 04 06 00 00	 add	 eax, 1540		; 00000604H
  03b2a	50		 push	 eax
  03b2b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03b2e	8b 11		 mov	 edx, DWORD PTR [ecx]
  03b30	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  03b36	50		 push	 eax
  03b37	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03b3c	83 c4 08	 add	 esp, 8
$LN381@P_NiGHTSMo:

; 4486 : 					}

  03b3f	eb 19		 jmp	 SHORT $LN378@P_NiGHTSMo
$LN377@P_NiGHTSMo:

; 4487 : 					else
; 4488 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL3A);

  03b41	68 03 06 00 00	 push	 1539			; 00000603H
  03b46	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b49	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b4b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03b51	52		 push	 edx
  03b52	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03b57	83 c4 08	 add	 esp, 8
$LN378@P_NiGHTSMo:

; 4489 : 				}
; 4490 : 			}

  03b5a	eb 3b		 jmp	 SHORT $LN374@P_NiGHTSMo
$LN373@P_NiGHTSMo:

; 4491 : 			else
; 4492 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY3A : S_NIGHTSFLY3B);

  03b5c	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  03b61	83 e0 01	 and	 eax, 1
  03b64	74 0c		 je	 SHORT $LN587@P_NiGHTSMo
  03b66	c7 85 70 fe ff
	ff cd 05 00 00	 mov	 DWORD PTR tv2662[ebp], 1485 ; 000005cdH
  03b70	eb 0a		 jmp	 SHORT $LN588@P_NiGHTSMo
$LN587@P_NiGHTSMo:
  03b72	c7 85 70 fe ff
	ff ce 05 00 00	 mov	 DWORD PTR tv2662[ebp], 1486 ; 000005ceH
$LN588@P_NiGHTSMo:
  03b7c	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2662[ebp]
  03b82	51		 push	 ecx
  03b83	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03b86	8b 02		 mov	 eax, DWORD PTR [edx]
  03b88	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  03b8e	51		 push	 ecx
  03b8f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03b94	83 c4 08	 add	 esp, 8
$LN374@P_NiGHTSMo:

; 4493 : 		}

  03b97	e9 69 0d 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN371@P_NiGHTSMo:

; 4494 : 		else if (player->anotherflyangle >= 147 && player->anotherflyangle <= 168)

  03b9c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03b9f	81 b8 c0 01 00
	00 93 00 00 00	 cmp	 DWORD PTR [eax+448], 147 ; 00000093H
  03ba9	0f 8c 6b 01 00
	00		 jl	 $LN382@P_NiGHTSMo
  03baf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03bb2	81 b8 c0 01 00
	00 a8 00 00 00	 cmp	 DWORD PTR [eax+448], 168 ; 000000a8H
  03bbc	0f 8f 58 01 00
	00		 jg	 $LN382@P_NiGHTSMo

; 4495 : 		{
; 4496 : 			if (player->pflags & PF_DRILLING)

  03bc2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03bc5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03bcb	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  03bd1	0f 84 03 01 00
	00		 je	 $LN384@P_NiGHTSMo

; 4497 : 			{
; 4498 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL2A]

  03bd7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03bda	8b 08		 mov	 ecx, DWORD PTR [eax]
  03bdc	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03be2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03be7	69 c8 ff 05 00
	00		 imul	 ecx, eax, 1535
  03bed	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03bf3	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03bf6	72 25		 jb	 SHORT $LN387@P_NiGHTSMo
  03bf8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03bfb	8b 08		 mov	 ecx, DWORD PTR [eax]
  03bfd	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03c03	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03c08	69 c8 02 06 00
	00		 imul	 ecx, eax, 1538
  03c0e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03c14	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03c17	0f 86 bb 00 00
	00		 jbe	 $LN389@P_NiGHTSMo
$LN387@P_NiGHTSMo:

; 4499 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL2D]))
; 4500 : 				{
; 4501 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  03c1d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c20	8b 08		 mov	 ecx, DWORD PTR [eax]
  03c22	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03c28	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03c2d	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  03c33	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03c39	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03c3c	72 21		 jb	 SHORT $LN390@P_NiGHTSMo
  03c3e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c41	8b 08		 mov	 ecx, DWORD PTR [eax]
  03c43	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03c49	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03c4e	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  03c54	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03c5a	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03c5d	76 60		 jbe	 SHORT $LN388@P_NiGHTSMo
$LN390@P_NiGHTSMo:

; 4502 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4503 : 					{
; 4504 : 						INT32 framenum;
; 4505 : 
; 4506 : 						framenum = player->mo->tracer->state->frame & 3;

  03c5f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c62	8b 08		 mov	 ecx, DWORD PTR [eax]
  03c64	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03c6a	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  03c6d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03c70	83 e1 03	 and	 ecx, 3
  03c73	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _framenum$23[ebp], ecx

; 4507 : 
; 4508 : 						if (framenum == 3) // Drilld special case

  03c79	83 bd 0c ff ff
	ff 03		 cmp	 DWORD PTR _framenum$23[ebp], 3
  03c80	75 1b		 jne	 SHORT $LN391@P_NiGHTSMo

; 4509 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2A);

  03c82	68 ff 05 00 00	 push	 1535			; 000005ffH
  03c87	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03c8a	8b 08		 mov	 ecx, DWORD PTR [eax]
  03c8c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03c92	52		 push	 edx
  03c93	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03c98	83 c4 08	 add	 esp, 8
  03c9b	eb 20		 jmp	 SHORT $LN392@P_NiGHTSMo
$LN391@P_NiGHTSMo:

; 4510 : 						else
; 4511 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2B+framenum);

  03c9d	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _framenum$23[ebp]
  03ca3	05 00 06 00 00	 add	 eax, 1536		; 00000600H
  03ca8	50		 push	 eax
  03ca9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03cac	8b 11		 mov	 edx, DWORD PTR [ecx]
  03cae	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  03cb4	50		 push	 eax
  03cb5	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03cba	83 c4 08	 add	 esp, 8
$LN392@P_NiGHTSMo:

; 4512 : 					}

  03cbd	eb 19		 jmp	 SHORT $LN389@P_NiGHTSMo
$LN388@P_NiGHTSMo:

; 4513 : 					else
; 4514 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL2A);

  03cbf	68 ff 05 00 00	 push	 1535			; 000005ffH
  03cc4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03cc7	8b 08		 mov	 ecx, DWORD PTR [eax]
  03cc9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03ccf	52		 push	 edx
  03cd0	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03cd5	83 c4 08	 add	 esp, 8
$LN389@P_NiGHTSMo:

; 4515 : 				}
; 4516 : 			}

  03cd8	eb 3b		 jmp	 SHORT $LN385@P_NiGHTSMo
$LN384@P_NiGHTSMo:

; 4517 : 			else
; 4518 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY2A : S_NIGHTSFLY2B);

  03cda	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  03cdf	83 e0 01	 and	 eax, 1
  03ce2	74 0c		 je	 SHORT $LN589@P_NiGHTSMo
  03ce4	c7 85 70 fe ff
	ff cb 05 00 00	 mov	 DWORD PTR tv2719[ebp], 1483 ; 000005cbH
  03cee	eb 0a		 jmp	 SHORT $LN590@P_NiGHTSMo
$LN589@P_NiGHTSMo:
  03cf0	c7 85 70 fe ff
	ff cc 05 00 00	 mov	 DWORD PTR tv2719[ebp], 1484 ; 000005ccH
$LN590@P_NiGHTSMo:
  03cfa	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2719[ebp]
  03d00	51		 push	 ecx
  03d01	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03d04	8b 02		 mov	 eax, DWORD PTR [edx]
  03d06	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  03d0c	51		 push	 ecx
  03d0d	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03d12	83 c4 08	 add	 esp, 8
$LN385@P_NiGHTSMo:

; 4519 : 		}

  03d15	e9 eb 0b 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN382@P_NiGHTSMo:

; 4520 : 		else if (player->anotherflyangle >= 169 && player->anotherflyangle <= 191)

  03d1a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d1d	81 b8 c0 01 00
	00 a9 00 00 00	 cmp	 DWORD PTR [eax+448], 169 ; 000000a9H
  03d27	0f 8c 6b 01 00
	00		 jl	 $LN393@P_NiGHTSMo
  03d2d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d30	81 b8 c0 01 00
	00 bf 00 00 00	 cmp	 DWORD PTR [eax+448], 191 ; 000000bfH
  03d3a	0f 8f 58 01 00
	00		 jg	 $LN393@P_NiGHTSMo

; 4521 : 		{
; 4522 : 			if (player->pflags & PF_DRILLING)

  03d40	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d43	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03d49	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  03d4f	0f 84 03 01 00
	00		 je	 $LN395@P_NiGHTSMo

; 4523 : 			{
; 4524 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL1A]

  03d55	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d58	8b 08		 mov	 ecx, DWORD PTR [eax]
  03d5a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03d60	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03d65	69 c8 fb 05 00
	00		 imul	 ecx, eax, 1531
  03d6b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03d71	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03d74	72 25		 jb	 SHORT $LN398@P_NiGHTSMo
  03d76	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d79	8b 08		 mov	 ecx, DWORD PTR [eax]
  03d7b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03d81	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03d86	69 c8 fe 05 00
	00		 imul	 ecx, eax, 1534
  03d8c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03d92	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03d95	0f 86 bb 00 00
	00		 jbe	 $LN400@P_NiGHTSMo
$LN398@P_NiGHTSMo:

; 4525 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL1D]))
; 4526 : 				{
; 4527 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  03d9b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03d9e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03da0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03da6	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03dab	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  03db1	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03db7	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03dba	72 21		 jb	 SHORT $LN401@P_NiGHTSMo
  03dbc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03dbf	8b 08		 mov	 ecx, DWORD PTR [eax]
  03dc1	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03dc7	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03dcc	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  03dd2	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03dd8	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03ddb	76 60		 jbe	 SHORT $LN399@P_NiGHTSMo
$LN401@P_NiGHTSMo:

; 4528 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4529 : 					{
; 4530 : 						INT32 framenum;
; 4531 : 
; 4532 : 						framenum = player->mo->tracer->state->frame & 3;

  03ddd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03de0	8b 08		 mov	 ecx, DWORD PTR [eax]
  03de2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03de8	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  03deb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03dee	83 e1 03	 and	 ecx, 3
  03df1	89 8d 08 ff ff
	ff		 mov	 DWORD PTR _framenum$22[ebp], ecx

; 4533 : 
; 4534 : 						if (framenum == 3) // Drilld special case

  03df7	83 bd 08 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$22[ebp], 3
  03dfe	75 1b		 jne	 SHORT $LN402@P_NiGHTSMo

; 4535 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1A);

  03e00	68 fb 05 00 00	 push	 1531			; 000005fbH
  03e05	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e08	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e0a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03e10	52		 push	 edx
  03e11	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03e16	83 c4 08	 add	 esp, 8
  03e19	eb 20		 jmp	 SHORT $LN403@P_NiGHTSMo
$LN402@P_NiGHTSMo:

; 4536 : 						else
; 4537 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1B+framenum);

  03e1b	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$22[ebp]
  03e21	05 fc 05 00 00	 add	 eax, 1532		; 000005fcH
  03e26	50		 push	 eax
  03e27	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03e2a	8b 11		 mov	 edx, DWORD PTR [ecx]
  03e2c	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  03e32	50		 push	 eax
  03e33	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03e38	83 c4 08	 add	 esp, 8
$LN403@P_NiGHTSMo:

; 4538 : 					}

  03e3b	eb 19		 jmp	 SHORT $LN400@P_NiGHTSMo
$LN399@P_NiGHTSMo:

; 4539 : 					else
; 4540 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL1A);

  03e3d	68 fb 05 00 00	 push	 1531			; 000005fbH
  03e42	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e45	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e47	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03e4d	52		 push	 edx
  03e4e	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03e53	83 c4 08	 add	 esp, 8
$LN400@P_NiGHTSMo:

; 4541 : 				}
; 4542 : 			}

  03e56	eb 3b		 jmp	 SHORT $LN396@P_NiGHTSMo
$LN395@P_NiGHTSMo:

; 4543 : 			else
; 4544 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY1A : S_NIGHTSFLY1B);

  03e58	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  03e5d	83 e0 01	 and	 eax, 1
  03e60	74 0c		 je	 SHORT $LN591@P_NiGHTSMo
  03e62	c7 85 70 fe ff
	ff c9 05 00 00	 mov	 DWORD PTR tv2776[ebp], 1481 ; 000005c9H
  03e6c	eb 0a		 jmp	 SHORT $LN592@P_NiGHTSMo
$LN591@P_NiGHTSMo:
  03e6e	c7 85 70 fe ff
	ff ca 05 00 00	 mov	 DWORD PTR tv2776[ebp], 1482 ; 000005caH
$LN592@P_NiGHTSMo:
  03e78	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2776[ebp]
  03e7e	51		 push	 ecx
  03e7f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  03e82	8b 02		 mov	 eax, DWORD PTR [edx]
  03e84	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  03e8a	51		 push	 ecx
  03e8b	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03e90	83 c4 08	 add	 esp, 8
$LN396@P_NiGHTSMo:

; 4545 : 		}

  03e93	e9 6d 0a 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN393@P_NiGHTSMo:

; 4546 : 		else if (player->anotherflyangle >= 192 && player->anotherflyangle <= 213)

  03e98	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03e9b	81 b8 c0 01 00
	00 c0 00 00 00	 cmp	 DWORD PTR [eax+448], 192 ; 000000c0H
  03ea5	0f 8c 6b 01 00
	00		 jl	 $LN404@P_NiGHTSMo
  03eab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03eae	81 b8 c0 01 00
	00 d5 00 00 00	 cmp	 DWORD PTR [eax+448], 213 ; 000000d5H
  03eb8	0f 8f 58 01 00
	00		 jg	 $LN404@P_NiGHTSMo

; 4547 : 		{
; 4548 : 			if (player->pflags & PF_DRILLING)

  03ebe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ec1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03ec7	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  03ecd	0f 84 03 01 00
	00		 je	 $LN406@P_NiGHTSMo

; 4549 : 			{
; 4550 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL6A]

  03ed3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ed6	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ed8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03ede	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03ee3	69 c8 0f 06 00
	00		 imul	 ecx, eax, 1551
  03ee9	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03eef	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03ef2	72 25		 jb	 SHORT $LN409@P_NiGHTSMo
  03ef4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03ef7	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ef9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03eff	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03f04	69 c8 12 06 00
	00		 imul	 ecx, eax, 1554
  03f0a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03f10	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03f13	0f 86 bb 00 00
	00		 jbe	 $LN411@P_NiGHTSMo
$LN409@P_NiGHTSMo:

; 4551 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL6D]))
; 4552 : 				{
; 4553 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  03f19	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03f1c	8b 08		 mov	 ecx, DWORD PTR [eax]
  03f1e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03f24	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03f29	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  03f2f	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03f35	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03f38	72 21		 jb	 SHORT $LN412@P_NiGHTSMo
  03f3a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03f3d	8b 08		 mov	 ecx, DWORD PTR [eax]
  03f3f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03f45	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  03f4a	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  03f50	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  03f56	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  03f59	76 60		 jbe	 SHORT $LN410@P_NiGHTSMo
$LN412@P_NiGHTSMo:

; 4554 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4555 : 					{
; 4556 : 						INT32 framenum;
; 4557 : 
; 4558 : 						framenum = player->mo->tracer->state->frame & 3;

  03f5b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03f5e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03f60	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03f66	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  03f69	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03f6c	83 e1 03	 and	 ecx, 3
  03f6f	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _framenum$21[ebp], ecx

; 4559 : 
; 4560 : 						if (framenum == 3) // Drilld special case

  03f75	83 bd 04 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$21[ebp], 3
  03f7c	75 1b		 jne	 SHORT $LN413@P_NiGHTSMo

; 4561 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6A);

  03f7e	68 0f 06 00 00	 push	 1551			; 0000060fH
  03f83	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03f86	8b 08		 mov	 ecx, DWORD PTR [eax]
  03f88	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03f8e	52		 push	 edx
  03f8f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03f94	83 c4 08	 add	 esp, 8
  03f97	eb 20		 jmp	 SHORT $LN414@P_NiGHTSMo
$LN413@P_NiGHTSMo:

; 4562 : 						else
; 4563 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6B+framenum);

  03f99	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$21[ebp]
  03f9f	05 10 06 00 00	 add	 eax, 1552		; 00000610H
  03fa4	50		 push	 eax
  03fa5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  03fa8	8b 11		 mov	 edx, DWORD PTR [ecx]
  03faa	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  03fb0	50		 push	 eax
  03fb1	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03fb6	83 c4 08	 add	 esp, 8
$LN414@P_NiGHTSMo:

; 4564 : 					}

  03fb9	eb 19		 jmp	 SHORT $LN411@P_NiGHTSMo
$LN410@P_NiGHTSMo:

; 4565 : 					else
; 4566 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6A);

  03fbb	68 0f 06 00 00	 push	 1551			; 0000060fH
  03fc0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  03fc3	8b 08		 mov	 ecx, DWORD PTR [eax]
  03fc5	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  03fcb	52		 push	 edx
  03fcc	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  03fd1	83 c4 08	 add	 esp, 8
$LN411@P_NiGHTSMo:

; 4567 : 				}
; 4568 : 			}

  03fd4	eb 3b		 jmp	 SHORT $LN407@P_NiGHTSMo
$LN406@P_NiGHTSMo:

; 4569 : 			else
; 4570 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY6A : S_NIGHTSFLY6B);

  03fd6	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  03fdb	83 e0 01	 and	 eax, 1
  03fde	74 0c		 je	 SHORT $LN593@P_NiGHTSMo
  03fe0	c7 85 70 fe ff
	ff d3 05 00 00	 mov	 DWORD PTR tv2865[ebp], 1491 ; 000005d3H
  03fea	eb 0a		 jmp	 SHORT $LN594@P_NiGHTSMo
$LN593@P_NiGHTSMo:
  03fec	c7 85 70 fe ff
	ff d4 05 00 00	 mov	 DWORD PTR tv2865[ebp], 1492 ; 000005d4H
$LN594@P_NiGHTSMo:
  03ff6	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2865[ebp]
  03ffc	51		 push	 ecx
  03ffd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04000	8b 02		 mov	 eax, DWORD PTR [edx]
  04002	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  04008	51		 push	 ecx
  04009	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0400e	83 c4 08	 add	 esp, 8
$LN407@P_NiGHTSMo:

; 4571 : 		}

  04011	e9 ef 08 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN404@P_NiGHTSMo:

; 4572 : 		else if (player->anotherflyangle >= 214 && player->anotherflyangle <= 236)

  04016	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04019	81 b8 c0 01 00
	00 d6 00 00 00	 cmp	 DWORD PTR [eax+448], 214 ; 000000d6H
  04023	0f 8c 6b 01 00
	00		 jl	 $LN415@P_NiGHTSMo
  04029	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0402c	81 b8 c0 01 00
	00 ec 00 00 00	 cmp	 DWORD PTR [eax+448], 236 ; 000000ecH
  04036	0f 8f 58 01 00
	00		 jg	 $LN415@P_NiGHTSMo

; 4573 : 		{
; 4574 : 			if (player->pflags & PF_DRILLING)

  0403c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0403f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  04045	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0404b	0f 84 03 01 00
	00		 je	 $LN417@P_NiGHTSMo

; 4575 : 			{
; 4576 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL7A]

  04051	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04054	8b 08		 mov	 ecx, DWORD PTR [eax]
  04056	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0405c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  04061	69 c8 13 06 00
	00		 imul	 ecx, eax, 1555
  04067	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0406d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04070	72 25		 jb	 SHORT $LN420@P_NiGHTSMo
  04072	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04075	8b 08		 mov	 ecx, DWORD PTR [eax]
  04077	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0407d	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  04082	69 c8 16 06 00
	00		 imul	 ecx, eax, 1558
  04088	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0408e	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04091	0f 86 bb 00 00
	00		 jbe	 $LN422@P_NiGHTSMo
$LN420@P_NiGHTSMo:

; 4577 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL7D]))
; 4578 : 				{
; 4579 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  04097	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0409a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0409c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  040a2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  040a7	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  040ad	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  040b3	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  040b6	72 21		 jb	 SHORT $LN423@P_NiGHTSMo
  040b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  040bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  040bd	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  040c3	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  040c8	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  040ce	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  040d4	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  040d7	76 60		 jbe	 SHORT $LN421@P_NiGHTSMo
$LN423@P_NiGHTSMo:

; 4580 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4581 : 					{
; 4582 : 						INT32 framenum;
; 4583 : 
; 4584 : 						framenum = player->mo->tracer->state->frame & 3;

  040d9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  040dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  040de	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  040e4	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  040e7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  040ea	83 e1 03	 and	 ecx, 3
  040ed	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _framenum$20[ebp], ecx

; 4585 : 
; 4586 : 						if (framenum == 3) // Drilld special case

  040f3	83 bd 00 ff ff
	ff 03		 cmp	 DWORD PTR _framenum$20[ebp], 3
  040fa	75 1b		 jne	 SHORT $LN424@P_NiGHTSMo

; 4587 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7A);

  040fc	68 13 06 00 00	 push	 1555			; 00000613H
  04101	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04104	8b 08		 mov	 ecx, DWORD PTR [eax]
  04106	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0410c	52		 push	 edx
  0410d	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04112	83 c4 08	 add	 esp, 8
  04115	eb 20		 jmp	 SHORT $LN425@P_NiGHTSMo
$LN424@P_NiGHTSMo:

; 4588 : 						else
; 4589 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7B+framenum);

  04117	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _framenum$20[ebp]
  0411d	05 14 06 00 00	 add	 eax, 1556		; 00000614H
  04122	50		 push	 eax
  04123	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  04126	8b 11		 mov	 edx, DWORD PTR [ecx]
  04128	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0412e	50		 push	 eax
  0412f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04134	83 c4 08	 add	 esp, 8
$LN425@P_NiGHTSMo:

; 4590 : 					}

  04137	eb 19		 jmp	 SHORT $LN422@P_NiGHTSMo
$LN421@P_NiGHTSMo:

; 4591 : 					else
; 4592 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7A);

  04139	68 13 06 00 00	 push	 1555			; 00000613H
  0413e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04141	8b 08		 mov	 ecx, DWORD PTR [eax]
  04143	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04149	52		 push	 edx
  0414a	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0414f	83 c4 08	 add	 esp, 8
$LN422@P_NiGHTSMo:

; 4593 : 				}
; 4594 : 			}

  04152	eb 3b		 jmp	 SHORT $LN418@P_NiGHTSMo
$LN417@P_NiGHTSMo:

; 4595 : 			else
; 4596 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY7A : S_NIGHTSFLY7B);

  04154	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  04159	83 e0 01	 and	 eax, 1
  0415c	74 0c		 je	 SHORT $LN595@P_NiGHTSMo
  0415e	c7 85 70 fe ff
	ff d5 05 00 00	 mov	 DWORD PTR tv2922[ebp], 1493 ; 000005d5H
  04168	eb 0a		 jmp	 SHORT $LN596@P_NiGHTSMo
$LN595@P_NiGHTSMo:
  0416a	c7 85 70 fe ff
	ff d6 05 00 00	 mov	 DWORD PTR tv2922[ebp], 1494 ; 000005d6H
$LN596@P_NiGHTSMo:
  04174	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2922[ebp]
  0417a	51		 push	 ecx
  0417b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0417e	8b 02		 mov	 eax, DWORD PTR [edx]
  04180	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  04186	51		 push	 ecx
  04187	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0418c	83 c4 08	 add	 esp, 8
$LN418@P_NiGHTSMo:

; 4597 : 		}

  0418f	e9 71 07 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN415@P_NiGHTSMo:

; 4598 : 		else if (player->anotherflyangle >= 237 && player->anotherflyangle <= 258)

  04194	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04197	81 b8 c0 01 00
	00 ed 00 00 00	 cmp	 DWORD PTR [eax+448], 237 ; 000000edH
  041a1	0f 8c 6b 01 00
	00		 jl	 $LN426@P_NiGHTSMo
  041a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  041aa	81 b8 c0 01 00
	00 02 01 00 00	 cmp	 DWORD PTR [eax+448], 258 ; 00000102H
  041b4	0f 8f 58 01 00
	00		 jg	 $LN426@P_NiGHTSMo

; 4599 : 		{
; 4600 : 			if (player->pflags & PF_DRILLING)

  041ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  041bd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  041c3	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  041c9	0f 84 03 01 00
	00		 je	 $LN428@P_NiGHTSMo

; 4601 : 			{
; 4602 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL8A]

  041cf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  041d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  041d4	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  041da	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  041df	69 c8 17 06 00
	00		 imul	 ecx, eax, 1559
  041e5	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  041eb	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  041ee	72 25		 jb	 SHORT $LN431@P_NiGHTSMo
  041f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  041f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  041f5	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  041fb	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  04200	69 c8 1a 06 00
	00		 imul	 ecx, eax, 1562
  04206	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0420c	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0420f	0f 86 bb 00 00
	00		 jbe	 $LN433@P_NiGHTSMo
$LN431@P_NiGHTSMo:

; 4603 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL8D]))
; 4604 : 				{
; 4605 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  04215	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04218	8b 08		 mov	 ecx, DWORD PTR [eax]
  0421a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04220	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  04225	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  0422b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  04231	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04234	72 21		 jb	 SHORT $LN434@P_NiGHTSMo
  04236	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04239	8b 08		 mov	 ecx, DWORD PTR [eax]
  0423b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04241	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  04246	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  0424c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  04252	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04255	76 60		 jbe	 SHORT $LN432@P_NiGHTSMo
$LN434@P_NiGHTSMo:

; 4606 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4607 : 					{
; 4608 : 						INT32 framenum;
; 4609 : 
; 4610 : 						framenum = player->mo->tracer->state->frame & 3;

  04257	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0425a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0425c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04262	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  04265	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  04268	83 e1 03	 and	 ecx, 3
  0426b	89 8d fc fe ff
	ff		 mov	 DWORD PTR _framenum$19[ebp], ecx

; 4611 : 
; 4612 : 						if (framenum == 3) // Drilld special case

  04271	83 bd fc fe ff
	ff 03		 cmp	 DWORD PTR _framenum$19[ebp], 3
  04278	75 1b		 jne	 SHORT $LN435@P_NiGHTSMo

; 4613 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8A);

  0427a	68 17 06 00 00	 push	 1559			; 00000617H
  0427f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04282	8b 08		 mov	 ecx, DWORD PTR [eax]
  04284	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0428a	52		 push	 edx
  0428b	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04290	83 c4 08	 add	 esp, 8
  04293	eb 20		 jmp	 SHORT $LN436@P_NiGHTSMo
$LN435@P_NiGHTSMo:

; 4614 : 						else
; 4615 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8B+framenum);

  04295	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _framenum$19[ebp]
  0429b	05 18 06 00 00	 add	 eax, 1560		; 00000618H
  042a0	50		 push	 eax
  042a1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  042a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  042a6	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  042ac	50		 push	 eax
  042ad	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  042b2	83 c4 08	 add	 esp, 8
$LN436@P_NiGHTSMo:

; 4616 : 					}

  042b5	eb 19		 jmp	 SHORT $LN433@P_NiGHTSMo
$LN432@P_NiGHTSMo:

; 4617 : 					else
; 4618 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8A);

  042b7	68 17 06 00 00	 push	 1559			; 00000617H
  042bc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  042bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  042c1	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  042c7	52		 push	 edx
  042c8	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  042cd	83 c4 08	 add	 esp, 8
$LN433@P_NiGHTSMo:

; 4619 : 				}
; 4620 : 			}

  042d0	eb 3b		 jmp	 SHORT $LN429@P_NiGHTSMo
$LN428@P_NiGHTSMo:

; 4621 : 			else
; 4622 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY8A : S_NIGHTSFLY8B);

  042d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  042d7	83 e0 01	 and	 eax, 1
  042da	74 0c		 je	 SHORT $LN597@P_NiGHTSMo
  042dc	c7 85 70 fe ff
	ff d7 05 00 00	 mov	 DWORD PTR tv2979[ebp], 1495 ; 000005d7H
  042e6	eb 0a		 jmp	 SHORT $LN598@P_NiGHTSMo
$LN597@P_NiGHTSMo:
  042e8	c7 85 70 fe ff
	ff d8 05 00 00	 mov	 DWORD PTR tv2979[ebp], 1496 ; 000005d8H
$LN598@P_NiGHTSMo:
  042f2	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv2979[ebp]
  042f8	51		 push	 ecx
  042f9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  042fc	8b 02		 mov	 eax, DWORD PTR [edx]
  042fe	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  04304	51		 push	 ecx
  04305	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0430a	83 c4 08	 add	 esp, 8
$LN429@P_NiGHTSMo:

; 4623 : 		}

  0430d	e9 f3 05 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN426@P_NiGHTSMo:

; 4624 : 		else if (player->anotherflyangle >= 259 && player->anotherflyangle <= 281)

  04312	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04315	81 b8 c0 01 00
	00 03 01 00 00	 cmp	 DWORD PTR [eax+448], 259 ; 00000103H
  0431f	0f 8c 6b 01 00
	00		 jl	 $LN437@P_NiGHTSMo
  04325	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04328	81 b8 c0 01 00
	00 19 01 00 00	 cmp	 DWORD PTR [eax+448], 281 ; 00000119H
  04332	0f 8f 58 01 00
	00		 jg	 $LN437@P_NiGHTSMo

; 4625 : 		{
; 4626 : 			if (player->pflags & PF_DRILLING)

  04338	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0433b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  04341	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  04347	0f 84 03 01 00
	00		 je	 $LN439@P_NiGHTSMo

; 4627 : 			{
; 4628 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL9A]

  0434d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04350	8b 08		 mov	 ecx, DWORD PTR [eax]
  04352	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04358	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0435d	69 c8 1b 06 00
	00		 imul	 ecx, eax, 1563
  04363	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  04369	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0436c	72 25		 jb	 SHORT $LN442@P_NiGHTSMo
  0436e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04371	8b 08		 mov	 ecx, DWORD PTR [eax]
  04373	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04379	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0437e	69 c8 1e 06 00
	00		 imul	 ecx, eax, 1566
  04384	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0438a	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0438d	0f 86 bb 00 00
	00		 jbe	 $LN444@P_NiGHTSMo
$LN442@P_NiGHTSMo:

; 4629 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL9D]))
; 4630 : 				{
; 4631 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  04393	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04396	8b 08		 mov	 ecx, DWORD PTR [eax]
  04398	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0439e	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  043a3	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  043a9	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  043af	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  043b2	72 21		 jb	 SHORT $LN445@P_NiGHTSMo
  043b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  043b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  043b9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  043bf	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  043c4	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  043ca	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  043d0	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  043d3	76 60		 jbe	 SHORT $LN443@P_NiGHTSMo
$LN445@P_NiGHTSMo:

; 4632 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4633 : 					{
; 4634 : 						INT32 framenum;
; 4635 : 
; 4636 : 						framenum = player->mo->tracer->state->frame & 3;

  043d5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  043d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  043da	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  043e0	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  043e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  043e6	83 e1 03	 and	 ecx, 3
  043e9	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _framenum$18[ebp], ecx

; 4637 : 
; 4638 : 						if (framenum == 3) // Drilld special case

  043ef	83 bd f8 fe ff
	ff 03		 cmp	 DWORD PTR _framenum$18[ebp], 3
  043f6	75 1b		 jne	 SHORT $LN446@P_NiGHTSMo

; 4639 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL9A);

  043f8	68 1b 06 00 00	 push	 1563			; 0000061bH
  043fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04400	8b 08		 mov	 ecx, DWORD PTR [eax]
  04402	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04408	52		 push	 edx
  04409	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0440e	83 c4 08	 add	 esp, 8
  04411	eb 20		 jmp	 SHORT $LN447@P_NiGHTSMo
$LN446@P_NiGHTSMo:

; 4640 : 						else
; 4641 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL9B+framenum);

  04413	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _framenum$18[ebp]
  04419	05 1c 06 00 00	 add	 eax, 1564		; 0000061cH
  0441e	50		 push	 eax
  0441f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  04422	8b 11		 mov	 edx, DWORD PTR [ecx]
  04424	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0442a	50		 push	 eax
  0442b	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04430	83 c4 08	 add	 esp, 8
$LN447@P_NiGHTSMo:

; 4642 : 					}

  04433	eb 19		 jmp	 SHORT $LN444@P_NiGHTSMo
$LN443@P_NiGHTSMo:

; 4643 : 					else
; 4644 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL9A);

  04435	68 1b 06 00 00	 push	 1563			; 0000061bH
  0443a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0443d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0443f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04445	52		 push	 edx
  04446	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0444b	83 c4 08	 add	 esp, 8
$LN444@P_NiGHTSMo:

; 4645 : 				}
; 4646 : 			}

  0444e	eb 3b		 jmp	 SHORT $LN440@P_NiGHTSMo
$LN439@P_NiGHTSMo:

; 4647 : 			else
; 4648 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY9A : S_NIGHTSFLY9B);

  04450	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  04455	83 e0 01	 and	 eax, 1
  04458	74 0c		 je	 SHORT $LN599@P_NiGHTSMo
  0445a	c7 85 70 fe ff
	ff d9 05 00 00	 mov	 DWORD PTR tv3036[ebp], 1497 ; 000005d9H
  04464	eb 0a		 jmp	 SHORT $LN600@P_NiGHTSMo
$LN599@P_NiGHTSMo:
  04466	c7 85 70 fe ff
	ff da 05 00 00	 mov	 DWORD PTR tv3036[ebp], 1498 ; 000005daH
$LN600@P_NiGHTSMo:
  04470	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv3036[ebp]
  04476	51		 push	 ecx
  04477	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0447a	8b 02		 mov	 eax, DWORD PTR [edx]
  0447c	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  04482	51		 push	 ecx
  04483	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04488	83 c4 08	 add	 esp, 8
$LN440@P_NiGHTSMo:

; 4649 : 		}

  0448b	e9 75 04 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN437@P_NiGHTSMo:

; 4650 : 		else if (player->anotherflyangle >= 282 && player->anotherflyangle <= 304)

  04490	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04493	81 b8 c0 01 00
	00 1a 01 00 00	 cmp	 DWORD PTR [eax+448], 282 ; 0000011aH
  0449d	0f 8c 6b 01 00
	00		 jl	 $LN448@P_NiGHTSMo
  044a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  044a6	81 b8 c0 01 00
	00 30 01 00 00	 cmp	 DWORD PTR [eax+448], 304 ; 00000130H
  044b0	0f 8f 58 01 00
	00		 jg	 $LN448@P_NiGHTSMo

; 4651 : 		{
; 4652 : 			if (player->pflags & PF_DRILLING)

  044b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  044b9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  044bf	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  044c5	0f 84 03 01 00
	00		 je	 $LN450@P_NiGHTSMo

; 4653 : 			{
; 4654 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL8A]

  044cb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  044ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  044d0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  044d6	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  044db	69 c8 17 06 00
	00		 imul	 ecx, eax, 1559
  044e1	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  044e7	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  044ea	72 25		 jb	 SHORT $LN453@P_NiGHTSMo
  044ec	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  044ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  044f1	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  044f7	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  044fc	69 c8 1a 06 00
	00		 imul	 ecx, eax, 1562
  04502	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  04508	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0450b	0f 86 bb 00 00
	00		 jbe	 $LN455@P_NiGHTSMo
$LN453@P_NiGHTSMo:

; 4655 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL8D]))
; 4656 : 				{
; 4657 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  04511	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04514	8b 08		 mov	 ecx, DWORD PTR [eax]
  04516	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0451c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  04521	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  04527	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0452d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04530	72 21		 jb	 SHORT $LN456@P_NiGHTSMo
  04532	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04535	8b 08		 mov	 ecx, DWORD PTR [eax]
  04537	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0453d	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  04542	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  04548	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0454e	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04551	76 60		 jbe	 SHORT $LN454@P_NiGHTSMo
$LN456@P_NiGHTSMo:

; 4658 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4659 : 					{
; 4660 : 						INT32 framenum;
; 4661 : 
; 4662 : 						framenum = player->mo->tracer->state->frame & 3;

  04553	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04556	8b 08		 mov	 ecx, DWORD PTR [eax]
  04558	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0455e	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  04561	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  04564	83 e1 03	 and	 ecx, 3
  04567	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _framenum$17[ebp], ecx

; 4663 : 
; 4664 : 						if (framenum == 3) // Drilld special case

  0456d	83 bd f4 fe ff
	ff 03		 cmp	 DWORD PTR _framenum$17[ebp], 3
  04574	75 1b		 jne	 SHORT $LN457@P_NiGHTSMo

; 4665 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8A);

  04576	68 17 06 00 00	 push	 1559			; 00000617H
  0457b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0457e	8b 08		 mov	 ecx, DWORD PTR [eax]
  04580	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04586	52		 push	 edx
  04587	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0458c	83 c4 08	 add	 esp, 8
  0458f	eb 20		 jmp	 SHORT $LN458@P_NiGHTSMo
$LN457@P_NiGHTSMo:

; 4666 : 						else
; 4667 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8B+framenum);

  04591	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _framenum$17[ebp]
  04597	05 18 06 00 00	 add	 eax, 1560		; 00000618H
  0459c	50		 push	 eax
  0459d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  045a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  045a2	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  045a8	50		 push	 eax
  045a9	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  045ae	83 c4 08	 add	 esp, 8
$LN458@P_NiGHTSMo:

; 4668 : 					}

  045b1	eb 19		 jmp	 SHORT $LN455@P_NiGHTSMo
$LN454@P_NiGHTSMo:

; 4669 : 					else
; 4670 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL8A);

  045b3	68 17 06 00 00	 push	 1559			; 00000617H
  045b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  045bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  045bd	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  045c3	52		 push	 edx
  045c4	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  045c9	83 c4 08	 add	 esp, 8
$LN455@P_NiGHTSMo:

; 4671 : 				}
; 4672 : 			}

  045cc	eb 3b		 jmp	 SHORT $LN451@P_NiGHTSMo
$LN450@P_NiGHTSMo:

; 4673 : 			else
; 4674 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY8A : S_NIGHTSFLY8B);

  045ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  045d3	83 e0 01	 and	 eax, 1
  045d6	74 0c		 je	 SHORT $LN601@P_NiGHTSMo
  045d8	c7 85 70 fe ff
	ff d7 05 00 00	 mov	 DWORD PTR tv3093[ebp], 1495 ; 000005d7H
  045e2	eb 0a		 jmp	 SHORT $LN602@P_NiGHTSMo
$LN601@P_NiGHTSMo:
  045e4	c7 85 70 fe ff
	ff d8 05 00 00	 mov	 DWORD PTR tv3093[ebp], 1496 ; 000005d8H
$LN602@P_NiGHTSMo:
  045ee	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv3093[ebp]
  045f4	51		 push	 ecx
  045f5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  045f8	8b 02		 mov	 eax, DWORD PTR [edx]
  045fa	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  04600	51		 push	 ecx
  04601	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04606	83 c4 08	 add	 esp, 8
$LN451@P_NiGHTSMo:

; 4675 : 		}

  04609	e9 f7 02 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN448@P_NiGHTSMo:

; 4676 : 		else if (player->anotherflyangle >= 305 && player->anotherflyangle <= 326)

  0460e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04611	81 b8 c0 01 00
	00 31 01 00 00	 cmp	 DWORD PTR [eax+448], 305 ; 00000131H
  0461b	0f 8c 6b 01 00
	00		 jl	 $LN459@P_NiGHTSMo
  04621	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04624	81 b8 c0 01 00
	00 46 01 00 00	 cmp	 DWORD PTR [eax+448], 326 ; 00000146H
  0462e	0f 8f 58 01 00
	00		 jg	 $LN459@P_NiGHTSMo

; 4677 : 		{
; 4678 : 			if (player->pflags & PF_DRILLING)

  04634	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04637	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0463d	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  04643	0f 84 03 01 00
	00		 je	 $LN461@P_NiGHTSMo

; 4679 : 			{
; 4680 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL7A]

  04649	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0464c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0464e	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04654	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  04659	69 c8 13 06 00
	00		 imul	 ecx, eax, 1555
  0465f	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  04665	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04668	72 25		 jb	 SHORT $LN464@P_NiGHTSMo
  0466a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0466d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0466f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04675	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0467a	69 c8 16 06 00
	00		 imul	 ecx, eax, 1558
  04680	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  04686	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04689	0f 86 bb 00 00
	00		 jbe	 $LN466@P_NiGHTSMo
$LN464@P_NiGHTSMo:

; 4681 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL7D]))
; 4682 : 				{
; 4683 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  0468f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04692	8b 08		 mov	 ecx, DWORD PTR [eax]
  04694	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0469a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0469f	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  046a5	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  046ab	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  046ae	72 21		 jb	 SHORT $LN467@P_NiGHTSMo
  046b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  046b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  046b5	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  046bb	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  046c0	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  046c6	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  046cc	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  046cf	76 60		 jbe	 SHORT $LN465@P_NiGHTSMo
$LN467@P_NiGHTSMo:

; 4684 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4685 : 					{
; 4686 : 						INT32 framenum;
; 4687 : 
; 4688 : 						framenum = player->mo->tracer->state->frame & 3;

  046d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  046d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  046d6	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  046dc	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  046df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  046e2	83 e1 03	 and	 ecx, 3
  046e5	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _framenum$16[ebp], ecx

; 4689 : 
; 4690 : 						if (framenum == 3) // Drilld special case

  046eb	83 bd f0 fe ff
	ff 03		 cmp	 DWORD PTR _framenum$16[ebp], 3
  046f2	75 1b		 jne	 SHORT $LN468@P_NiGHTSMo

; 4691 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7A);

  046f4	68 13 06 00 00	 push	 1555			; 00000613H
  046f9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  046fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  046fe	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04704	52		 push	 edx
  04705	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0470a	83 c4 08	 add	 esp, 8
  0470d	eb 20		 jmp	 SHORT $LN469@P_NiGHTSMo
$LN468@P_NiGHTSMo:

; 4692 : 						else
; 4693 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7B+framenum);

  0470f	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _framenum$16[ebp]
  04715	05 14 06 00 00	 add	 eax, 1556		; 00000614H
  0471a	50		 push	 eax
  0471b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0471e	8b 11		 mov	 edx, DWORD PTR [ecx]
  04720	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  04726	50		 push	 eax
  04727	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0472c	83 c4 08	 add	 esp, 8
$LN469@P_NiGHTSMo:

; 4694 : 					}

  0472f	eb 19		 jmp	 SHORT $LN466@P_NiGHTSMo
$LN465@P_NiGHTSMo:

; 4695 : 					else
; 4696 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL7A);

  04731	68 13 06 00 00	 push	 1555			; 00000613H
  04736	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04739	8b 08		 mov	 ecx, DWORD PTR [eax]
  0473b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04741	52		 push	 edx
  04742	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04747	83 c4 08	 add	 esp, 8
$LN466@P_NiGHTSMo:

; 4697 : 				}
; 4698 : 			}

  0474a	eb 3b		 jmp	 SHORT $LN462@P_NiGHTSMo
$LN461@P_NiGHTSMo:

; 4699 : 			else
; 4700 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY7A : S_NIGHTSFLY7B);

  0474c	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  04751	83 e0 01	 and	 eax, 1
  04754	74 0c		 je	 SHORT $LN603@P_NiGHTSMo
  04756	c7 85 70 fe ff
	ff d5 05 00 00	 mov	 DWORD PTR tv3150[ebp], 1493 ; 000005d5H
  04760	eb 0a		 jmp	 SHORT $LN604@P_NiGHTSMo
$LN603@P_NiGHTSMo:
  04762	c7 85 70 fe ff
	ff d6 05 00 00	 mov	 DWORD PTR tv3150[ebp], 1494 ; 000005d6H
$LN604@P_NiGHTSMo:
  0476c	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv3150[ebp]
  04772	51		 push	 ecx
  04773	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04776	8b 02		 mov	 eax, DWORD PTR [edx]
  04778	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0477e	51		 push	 ecx
  0477f	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04784	83 c4 08	 add	 esp, 8
$LN462@P_NiGHTSMo:

; 4701 : 		}

  04787	e9 79 01 00 00	 jmp	 $LN472@P_NiGHTSMo
$LN459@P_NiGHTSMo:

; 4702 : 		else if (player->anotherflyangle >= 327 && player->anotherflyangle <= 348)

  0478c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0478f	81 b8 c0 01 00
	00 47 01 00 00	 cmp	 DWORD PTR [eax+448], 327 ; 00000147H
  04799	0f 8c 66 01 00
	00		 jl	 $LN472@P_NiGHTSMo
  0479f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  047a2	81 b8 c0 01 00
	00 5c 01 00 00	 cmp	 DWORD PTR [eax+448], 348 ; 0000015cH
  047ac	0f 8f 53 01 00
	00		 jg	 $LN472@P_NiGHTSMo

; 4703 : 		{
; 4704 : 			if (player->pflags & PF_DRILLING)

  047b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  047b5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  047bb	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  047c1	0f 84 03 01 00
	00		 je	 $LN471@P_NiGHTSMo

; 4705 : 			{
; 4706 : 				if (!(player->mo->tracer->state >= &states[S_NIGHTSDRILL6A]

  047c7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  047ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  047cc	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  047d2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  047d7	69 c8 0f 06 00
	00		 imul	 ecx, eax, 1551
  047dd	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  047e3	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  047e6	72 25		 jb	 SHORT $LN474@P_NiGHTSMo
  047e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  047eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  047ed	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  047f3	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  047f8	69 c8 12 06 00
	00		 imul	 ecx, eax, 1554
  047fe	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  04804	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  04807	0f 86 bb 00 00
	00		 jbe	 $LN476@P_NiGHTSMo
$LN474@P_NiGHTSMo:

; 4707 : 					&& player->mo->tracer->state <= &states[S_NIGHTSDRILL6D]))
; 4708 : 				{
; 4709 : 					if (!(player->mo->tracer->state >= &states[S_NIGHTSFLY1A]

  0480d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04810	8b 08		 mov	 ecx, DWORD PTR [eax]
  04812	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04818	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0481d	69 c8 c9 05 00
	00		 imul	 ecx, eax, 1481
  04823	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  04829	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0482c	72 21		 jb	 SHORT $LN477@P_NiGHTSMo
  0482e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04831	8b 08		 mov	 ecx, DWORD PTR [eax]
  04833	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04839	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0483e	69 c8 da 05 00
	00		 imul	 ecx, eax, 1498
  04844	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0484a	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0484d	76 60		 jbe	 SHORT $LN475@P_NiGHTSMo
$LN477@P_NiGHTSMo:

; 4710 : 						&& player->mo->tracer->state <= &states[S_NIGHTSFLY9B]))
; 4711 : 					{
; 4712 : 						INT32 framenum;
; 4713 : 
; 4714 : 						framenum = player->mo->tracer->state->frame & 3;

  0484f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04852	8b 08		 mov	 ecx, DWORD PTR [eax]
  04854	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0485a	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0485d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  04860	83 e1 03	 and	 ecx, 3
  04863	89 8d ec fe ff
	ff		 mov	 DWORD PTR _framenum$15[ebp], ecx

; 4715 : 
; 4716 : 						if (framenum == 3) // Drilld special case

  04869	83 bd ec fe ff
	ff 03		 cmp	 DWORD PTR _framenum$15[ebp], 3
  04870	75 1b		 jne	 SHORT $LN478@P_NiGHTSMo

; 4717 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6A);

  04872	68 0f 06 00 00	 push	 1551			; 0000060fH
  04877	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0487a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0487c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04882	52		 push	 edx
  04883	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04888	83 c4 08	 add	 esp, 8
  0488b	eb 20		 jmp	 SHORT $LN479@P_NiGHTSMo
$LN478@P_NiGHTSMo:

; 4718 : 						else
; 4719 : 							P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6B+framenum);

  0488d	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _framenum$15[ebp]
  04893	05 10 06 00 00	 add	 eax, 1552		; 00000610H
  04898	50		 push	 eax
  04899	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0489c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0489e	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  048a4	50		 push	 eax
  048a5	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  048aa	83 c4 08	 add	 esp, 8
$LN479@P_NiGHTSMo:

; 4720 : 					}

  048ad	eb 19		 jmp	 SHORT $LN476@P_NiGHTSMo
$LN475@P_NiGHTSMo:

; 4721 : 					else
; 4722 : 						P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRILL6A);

  048af	68 0f 06 00 00	 push	 1551			; 0000060fH
  048b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  048b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  048b9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  048bf	52		 push	 edx
  048c0	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  048c5	83 c4 08	 add	 esp, 8
$LN476@P_NiGHTSMo:

; 4723 : 				}
; 4724 : 			}

  048c8	eb 3b		 jmp	 SHORT $LN472@P_NiGHTSMo
$LN471@P_NiGHTSMo:

; 4725 : 			else
; 4726 : 				P_SetMobjStateNF(player->mo->tracer, leveltime & 1 ? S_NIGHTSFLY6A : S_NIGHTSFLY6B);

  048ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  048cf	83 e0 01	 and	 eax, 1
  048d2	74 0c		 je	 SHORT $LN605@P_NiGHTSMo
  048d4	c7 85 70 fe ff
	ff d3 05 00 00	 mov	 DWORD PTR tv3207[ebp], 1491 ; 000005d3H
  048de	eb 0a		 jmp	 SHORT $LN606@P_NiGHTSMo
$LN605@P_NiGHTSMo:
  048e0	c7 85 70 fe ff
	ff d4 05 00 00	 mov	 DWORD PTR tv3207[ebp], 1492 ; 000005d4H
$LN606@P_NiGHTSMo:
  048ea	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv3207[ebp]
  048f0	51		 push	 ecx
  048f1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  048f4	8b 02		 mov	 eax, DWORD PTR [edx]
  048f6	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  048fc	51		 push	 ecx
  048fd	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04902	83 c4 08	 add	 esp, 8
$LN472@P_NiGHTSMo:

; 4727 : 		}
; 4728 : 	}
; 4729 : 
; 4730 : 	if (player == &players[consoleplayer])

  04905	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0490f	05 00 00 00 00	 add	 eax, OFFSET _players
  04914	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  04917	75 10		 jne	 SHORT $LN480@P_NiGHTSMo

; 4731 : 		localangle = player->mo->angle;

  04919	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0491c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0491e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  04921	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  04927	eb 2b		 jmp	 SHORT $LN482@P_NiGHTSMo
$LN480@P_NiGHTSMo:

; 4732 : 	else if (splitscreen && player == &players[secondarydisplayplayer])

  04929	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  04930	74 22		 je	 SHORT $LN482@P_NiGHTSMo
  04932	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0493c	05 00 00 00 00	 add	 eax, OFFSET _players
  04941	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  04944	75 0e		 jne	 SHORT $LN482@P_NiGHTSMo

; 4733 : 		localangle2 = player->mo->angle;

  04946	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04949	8b 08		 mov	 ecx, DWORD PTR [eax]
  0494b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0494e	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN482@P_NiGHTSMo:

; 4734 : 
; 4735 : 	if (still)

  04954	83 7d f8 00	 cmp	 DWORD PTR _still$[ebp], 0
  04958	74 2f		 je	 SHORT $LN483@P_NiGHTSMo

; 4736 : 	{
; 4737 : 		P_SetMobjStateNF(player->mo->tracer, S_NIGHTSDRONE1);

  0495a	68 c7 05 00 00	 push	 1479			; 000005c7H
  0495f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04962	8b 08		 mov	 ecx, DWORD PTR [eax]
  04964	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0496a	52		 push	 edx
  0496b	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  04970	83 c4 08	 add	 esp, 8

; 4738 : 		player->mo->tracer->angle = player->mo->angle;

  04973	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04976	8b 08		 mov	 ecx, DWORD PTR [eax]
  04978	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0497b	8b 02		 mov	 eax, DWORD PTR [edx]
  0497d	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  04983	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  04986	89 42 24	 mov	 DWORD PTR [edx+36], eax
$LN483@P_NiGHTSMo:

; 4739 : 	}
; 4740 : 
; 4741 : 	// Synchronizes the "real" amount of time spent in the level.
; 4742 : 	if (!player->exiting)

  04989	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0498c	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  04993	75 4b		 jne	 SHORT $LN486@P_NiGHTSMo

; 4743 : 	{
; 4744 : 		if (gametype == GT_RACE)

  04995	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0499c	83 f8 02	 cmp	 eax, 2
  0499f	75 30		 jne	 SHORT $LN485@P_NiGHTSMo

; 4745 : 		{
; 4746 : 			if (leveltime >= 4*TICRATE)

  049a1	81 3d 00 00 00
	00 8c 00 00 00	 cmp	 DWORD PTR _leveltime, 140 ; 0000008cH
  049ab	72 15		 jb	 SHORT $LN487@P_NiGHTSMo

; 4747 : 				player->realtime = leveltime - 4*TICRATE;

  049ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  049b2	2d 8c 00 00 00	 sub	 eax, 140		; 0000008cH
  049b7	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  049ba	89 81 54 01 00
	00		 mov	 DWORD PTR [ecx+340], eax
  049c0	eb 0d		 jmp	 SHORT $LN488@P_NiGHTSMo
$LN487@P_NiGHTSMo:

; 4748 : 			else
; 4749 : 				player->realtime = 0;

  049c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  049c5	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0
$LN488@P_NiGHTSMo:

; 4750 : 		}

  049cf	eb 0f		 jmp	 SHORT $LN486@P_NiGHTSMo
$LN485@P_NiGHTSMo:

; 4751 : 		else
; 4752 : 			player->realtime = leveltime;

  049d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  049d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  049da	89 88 54 01 00
	00		 mov	 DWORD PTR [eax+340], ecx
$LN486@P_NiGHTSMo:

; 4753 : 	}
; 4754 : 
; 4755 : 	P_UnsetThingPosition(player->mo->tracer);

  049e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  049e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  049e5	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  049eb	52		 push	 edx
  049ec	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  049f1	83 c4 04	 add	 esp, 4

; 4756 : 	player->mo->tracer->x = player->mo->x;

  049f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  049f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  049f9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  049fc	8b 02		 mov	 eax, DWORD PTR [edx]
  049fe	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  04a04	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  04a07	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 4757 : 	player->mo->tracer->y = player->mo->y;

  04a0a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04a0d	8b 08		 mov	 ecx, DWORD PTR [eax]
  04a0f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04a12	8b 02		 mov	 eax, DWORD PTR [edx]
  04a14	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  04a1a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  04a1d	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 4758 : 	player->mo->tracer->z = player->mo->z;

  04a20	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04a23	8b 08		 mov	 ecx, DWORD PTR [eax]
  04a25	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04a28	8b 02		 mov	 eax, DWORD PTR [edx]
  04a2a	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  04a30	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  04a33	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 4759 : 	player->mo->tracer->floorz = player->mo->floorz;

  04a36	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04a39	8b 08		 mov	 ecx, DWORD PTR [eax]
  04a3b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04a3e	8b 02		 mov	 eax, DWORD PTR [edx]
  04a40	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  04a46	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  04a49	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 4760 : 	player->mo->tracer->ceilingz = player->mo->ceilingz;

  04a4c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04a4f	8b 08		 mov	 ecx, DWORD PTR [eax]
  04a51	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04a54	8b 02		 mov	 eax, DWORD PTR [edx]
  04a56	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  04a5c	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  04a5f	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 4761 : 	P_SetThingPosition(player->mo->tracer);

  04a62	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04a65	8b 08		 mov	 ecx, DWORD PTR [eax]
  04a67	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  04a6d	52		 push	 edx
  04a6e	e8 00 00 00 00	 call	 _P_SetThingPosition
  04a73	83 c4 04	 add	 esp, 4

; 4762 : 
; 4763 : 	if (movingangle >= ANGLE_90 && movingangle <= ANGLE_180)

  04a76	81 7d c4 00 00
	00 40		 cmp	 DWORD PTR _movingangle$[ebp], 1073741824 ; 40000000H
  04a7d	72 16		 jb	 SHORT $LN489@P_NiGHTSMo
  04a7f	81 7d c4 00 00
	00 80		 cmp	 DWORD PTR _movingangle$[ebp], -2147483648 ; 80000000H
  04a86	77 0d		 ja	 SHORT $LN489@P_NiGHTSMo

; 4764 : 		movingangle = movingangle - ANGLE_180;

  04a88	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  04a8b	2d 00 00 00 80	 sub	 eax, -2147483648	; 80000000H
  04a90	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax
  04a93	eb 34		 jmp	 SHORT $LN493@P_NiGHTSMo
$LN489@P_NiGHTSMo:

; 4765 : 	else if (movingangle >= ANGLE_180 && movingangle <= ANGLE_270)

  04a95	81 7d c4 00 00
	00 80		 cmp	 DWORD PTR _movingangle$[ebp], -2147483648 ; 80000000H
  04a9c	72 16		 jb	 SHORT $LN491@P_NiGHTSMo
  04a9e	81 7d c4 00 00
	00 c0		 cmp	 DWORD PTR _movingangle$[ebp], -1073741824 ; c0000000H
  04aa5	77 0d		 ja	 SHORT $LN491@P_NiGHTSMo

; 4766 : 		movingangle = movingangle - ANGLE_180;

  04aa7	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  04aaa	2d 00 00 00 80	 sub	 eax, -2147483648	; 80000000H
  04aaf	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax
  04ab2	eb 15		 jmp	 SHORT $LN493@P_NiGHTSMo
$LN491@P_NiGHTSMo:

; 4767 : 	else if (movingangle >= ANGLE_270)

  04ab4	81 7d c4 00 00
	00 c0		 cmp	 DWORD PTR _movingangle$[ebp], -1073741824 ; c0000000H
  04abb	72 0c		 jb	 SHORT $LN493@P_NiGHTSMo

; 4768 : 		movingangle = ANGLE_MAX-movingangle+1;

  04abd	83 c8 ff	 or	 eax, -1
  04ac0	2b 45 c4	 sub	 eax, DWORD PTR _movingangle$[ebp]
  04ac3	83 c0 01	 add	 eax, 1
  04ac6	89 45 c4	 mov	 DWORD PTR _movingangle$[ebp], eax
$LN493@P_NiGHTSMo:

; 4769 : 
; 4770 : 	if (player == &players[consoleplayer])

  04ac9	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  04ad3	05 00 00 00 00	 add	 eax, OFFSET _players
  04ad8	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  04adb	75 0a		 jne	 SHORT $LN494@P_NiGHTSMo

; 4771 : 		localaiming = movingangle;

  04add	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  04ae0	a3 00 00 00 00	 mov	 DWORD PTR _localaiming, eax
  04ae5	eb 25		 jmp	 SHORT $LN496@P_NiGHTSMo
$LN494@P_NiGHTSMo:

; 4772 : 	else if (splitscreen && player == &players[secondarydisplayplayer])

  04ae7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  04aee	74 1c		 je	 SHORT $LN496@P_NiGHTSMo
  04af0	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  04afa	05 00 00 00 00	 add	 eax, OFFSET _players
  04aff	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  04b02	75 08		 jne	 SHORT $LN496@P_NiGHTSMo

; 4773 : 		localaiming2 = movingangle;

  04b04	8b 45 c4	 mov	 eax, DWORD PTR _movingangle$[ebp]
  04b07	a3 00 00 00 00	 mov	 DWORD PTR _localaiming2, eax
$LN496@P_NiGHTSMo:

; 4774 : 
; 4775 : 	player->mo->tracer->angle = player->mo->angle;

  04b0c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04b0f	8b 08		 mov	 ecx, DWORD PTR [eax]
  04b11	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04b14	8b 02		 mov	 eax, DWORD PTR [edx]
  04b16	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  04b1c	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  04b1f	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 4776 : 
; 4777 : 	if ((player->pflags & PF_DRILLING) && !player->bumpertime)

  04b22	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04b25	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  04b2b	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  04b31	74 78		 je	 SHORT $LN500@P_NiGHTSMo
  04b33	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04b36	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [eax+428], 0
  04b3d	75 6c		 jne	 SHORT $LN500@P_NiGHTSMo

; 4778 : 	{
; 4779 : 		if (firstdrill)

  04b3f	83 7d ec 00	 cmp	 DWORD PTR _firstdrill$[ebp], 0
  04b43	74 1f		 je	 SHORT $LN498@P_NiGHTSMo

; 4780 : 		{
; 4781 : 			S_StartSound(player->mo, sfx_drill1);

  04b45	6a 35		 push	 53			; 00000035H
  04b47	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04b4a	8b 08		 mov	 ecx, DWORD PTR [eax]
  04b4c	51		 push	 ecx
  04b4d	e8 00 00 00 00	 call	 _S_StartSound
  04b52	83 c4 08	 add	 esp, 8

; 4782 : 			player->drilltimer = 32 * NEWTICRATERATIO;

  04b55	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04b58	c7 80 b4 01 00
	00 20 00 00 00	 mov	 DWORD PTR [eax+436], 32	; 00000020H

; 4783 : 		}

  04b62	eb 47		 jmp	 SHORT $LN500@P_NiGHTSMo
$LN498@P_NiGHTSMo:

; 4784 : 		else if (--player->drilltimer <= 0)

  04b64	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04b67	8b 88 b4 01 00
	00		 mov	 ecx, DWORD PTR [eax+436]
  04b6d	83 e9 01	 sub	 ecx, 1
  04b70	89 8d 70 fe ff
	ff		 mov	 DWORD PTR tv3305[ebp], ecx
  04b76	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04b79	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv3305[ebp]
  04b7f	89 82 b4 01 00
	00		 mov	 DWORD PTR [edx+436], eax
  04b85	83 bd 70 fe ff
	ff 00		 cmp	 DWORD PTR tv3305[ebp], 0
  04b8c	77 1d		 ja	 SHORT $LN500@P_NiGHTSMo

; 4785 : 		{
; 4786 : 			player->drilltimer = 10 * NEWTICRATERATIO;

  04b8e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04b91	c7 80 b4 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+436], 10	; 0000000aH

; 4787 : 			S_StartSound(player->mo, sfx_drill2);

  04b9b	6a 36		 push	 54			; 00000036H
  04b9d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ba0	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ba2	51		 push	 ecx
  04ba3	e8 00 00 00 00	 call	 _S_StartSound
  04ba8	83 c4 08	 add	 esp, 8
$LN500@P_NiGHTSMo:

; 4788 : 		}
; 4789 : 	}
; 4790 : 
; 4791 : 	if (player->powers[pw_extralife] == 1) // Extra Life!

  04bab	b8 04 00 00 00	 mov	 eax, 4
  04bb0	c1 e0 03	 shl	 eax, 3
  04bb3	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  04bb6	83 7c 01 38 01	 cmp	 DWORD PTR [ecx+eax+56], 1
  04bbb	75 0c		 jne	 SHORT $LN501@P_NiGHTSMo

; 4792 : 		P_RestoreMusic(player);

  04bbd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04bc0	50		 push	 eax
  04bc1	e8 00 00 00 00	 call	 _P_RestoreMusic
  04bc6	83 c4 04	 add	 esp, 4
$LN501@P_NiGHTSMo:

; 4793 : 
; 4794 : 	if (cv_objectplace.value)

  04bc9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  04bd0	0f 84 2f 0b 00
	00		 je	 $LN539@P_NiGHTSMo

; 4795 : 	{
; 4796 : 		player->nightstime = 3;

  04bd6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04bd9	c7 80 c4 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+452], 3

; 4797 : 		player->drillmeter = TICRATE;

  04be3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04be6	c7 80 c8 01 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+456], 35	; 00000023H

; 4798 : 
; 4799 : 		// This places a hoop!
; 4800 : 		if (cmd->buttons & BT_ATTACK && !(player->pflags & PF_ATTACKDOWN))

  04bf0	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  04bf3	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  04bf7	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  04bfd	0f 84 d8 01 00
	00		 je	 $LN503@P_NiGHTSMo
  04c03	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04c06	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  04c0c	83 e1 02	 and	 ecx, 2
  04c0f	0f 85 c6 01 00
	00		 jne	 $LN503@P_NiGHTSMo

; 4801 : 		{
; 4802 : 			mapthing_t *mt;
; 4803 : 			mapthing_t *oldmapthings;
; 4804 : 			UINT16 angle;
; 4805 : 			INT16 temp;
; 4806 : 
; 4807 : 			angle = (UINT16)(player->anotherflyangle % 360);

  04c15	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04c18	8b 80 c0 01 00
	00		 mov	 eax, DWORD PTR [eax+448]
  04c1e	99		 cdq
  04c1f	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  04c24	f7 f9		 idiv	 ecx
  04c26	66 89 95 e0 fe
	ff ff		 mov	 WORD PTR _angle$12[ebp], dx

; 4808 : 
; 4809 : 			oldmapthings = mapthings;

  04c2d	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  04c32	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _oldmapthings$13[ebp], eax

; 4810 : 			nummapthings++;

  04c38	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummapthings
  04c3d	83 c0 01	 add	 eax, 1
  04c40	a3 00 00 00 00	 mov	 DWORD PTR _nummapthings, eax

; 4811 : #if 0
; 4812 : 			mapthings = M_Memcpy(Z_Calloc(nummapthings * sizeof (*mapthings), PU_LEVEL, NULL), oldmapthings, sizeof (mapthing_t)*(nummapthings-1));
; 4813 : 
; 4814 : 			Z_Free(oldmapthings);
; 4815 : #else
; 4816 : 			mapthings = Z_Realloc(oldmapthings, nummapthings * sizeof (*mapthings), PU_LEVEL, NULL);

  04c45	6a 00		 push	 0
  04c47	6a 00		 push	 0
  04c49	6a 32		 push	 50			; 00000032H
  04c4b	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  04c52	50		 push	 eax
  04c53	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _oldmapthings$13[ebp]
  04c59	51		 push	 ecx
  04c5a	e8 00 00 00 00	 call	 _Z_ReallocAlign
  04c5f	83 c4 14	 add	 esp, 20			; 00000014H
  04c62	a3 00 00 00 00	 mov	 DWORD PTR _mapthings, eax

; 4817 : #endif
; 4818 : 
; 4819 : 			mt = mapthings+nummapthings-1;

  04c67	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  04c6e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mapthings
  04c74	8d 54 01 ec	 lea	 edx, DWORD PTR [ecx+eax-20]
  04c78	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _mt$14[ebp], edx

; 4820 : 
; 4821 : 			mt->x = (INT16)(player->mo->x>>FRACBITS);

  04c7e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04c81	8b 08		 mov	 ecx, DWORD PTR [eax]
  04c83	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  04c86	c1 fa 10	 sar	 edx, 16			; 00000010H
  04c89	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$14[ebp]
  04c8f	66 89 10	 mov	 WORD PTR [eax], dx

; 4822 : 			mt->y = (INT16)(player->mo->y>>FRACBITS);

  04c92	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04c95	8b 08		 mov	 ecx, DWORD PTR [eax]
  04c97	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  04c9a	c1 fa 10	 sar	 edx, 16			; 00000010H
  04c9d	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$14[ebp]
  04ca3	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 4823 : 
; 4824 : 			// Tilt
; 4825 : 			mt->angle = (INT16)FixedInt(FixedDiv(angle*FRACUNIT, 360*(FRACUNIT/256)));

  04ca7	68 00 68 01 00	 push	 92160			; 00016800H
  04cac	0f b7 85 e0 fe
	ff ff		 movzx	 eax, WORD PTR _angle$12[ebp]
  04cb3	c1 e0 10	 shl	 eax, 16			; 00000010H
  04cb6	50		 push	 eax
  04cb7	e8 00 00 00 00	 call	 _FixedDiv
  04cbc	83 c4 08	 add	 esp, 8
  04cbf	50		 push	 eax
  04cc0	e8 00 00 00 00	 call	 _FixedInt
  04cc5	83 c4 04	 add	 esp, 4
  04cc8	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _mt$14[ebp]
  04cce	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 4826 : 
; 4827 : 			// Traditional 2D Angle
; 4828 : 			temp = (INT16)FixedInt(AngleFixed(player->mo->angle));

  04cd2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04cd5	8b 08		 mov	 ecx, DWORD PTR [eax]
  04cd7	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  04cda	52		 push	 edx
  04cdb	e8 00 00 00 00	 call	 _AngleFixed
  04ce0	83 c4 04	 add	 esp, 4
  04ce3	50		 push	 eax
  04ce4	e8 00 00 00 00	 call	 _FixedInt
  04ce9	83 c4 04	 add	 esp, 4
  04cec	66 89 85 dc fe
	ff ff		 mov	 WORD PTR _temp$11[ebp], ax

; 4829 : 
; 4830 : 			if (player->anotherflyangle < 90 || player->anotherflyangle > 270)

  04cf3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04cf6	83 b8 c0 01 00
	00 5a		 cmp	 DWORD PTR [eax+448], 90	; 0000005aH
  04cfd	7c 0f		 jl	 SHORT $LN507@P_NiGHTSMo
  04cff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04d02	81 b8 c0 01 00
	00 0e 01 00 00	 cmp	 DWORD PTR [eax+448], 270 ; 0000010eH
  04d0c	7e 13		 jle	 SHORT $LN505@P_NiGHTSMo
$LN507@P_NiGHTSMo:

; 4831 : 				temp -= 90;

  04d0e	0f bf 85 dc fe
	ff ff		 movsx	 eax, WORD PTR _temp$11[ebp]
  04d15	83 e8 5a	 sub	 eax, 90			; 0000005aH
  04d18	66 89 85 dc fe
	ff ff		 mov	 WORD PTR _temp$11[ebp], ax
  04d1f	eb 11		 jmp	 SHORT $LN506@P_NiGHTSMo
$LN505@P_NiGHTSMo:

; 4832 : 			else
; 4833 : 				temp += 90;

  04d21	0f bf 85 dc fe
	ff ff		 movsx	 eax, WORD PTR _temp$11[ebp]
  04d28	83 c0 5a	 add	 eax, 90			; 0000005aH
  04d2b	66 89 85 dc fe
	ff ff		 mov	 WORD PTR _temp$11[ebp], ax
$LN506@P_NiGHTSMo:

; 4834 : 
; 4835 : 			temp %= 360;

  04d32	0f bf 85 dc fe
	ff ff		 movsx	 eax, WORD PTR _temp$11[ebp]
  04d39	99		 cdq
  04d3a	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  04d3f	f7 f9		 idiv	 ecx
  04d41	66 89 95 dc fe
	ff ff		 mov	 WORD PTR _temp$11[ebp], dx

; 4836 : 
; 4837 : 			mt->type = 1705;

  04d48	b8 a9 06 00 00	 mov	 eax, 1705		; 000006a9H
  04d4d	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _mt$14[ebp]
  04d53	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 4838 : 
; 4839 : 			mt->options = (UINT16)((player->mo->z -

  04d57	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04d5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  04d5c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04d5f	8b 02		 mov	 eax, DWORD PTR [edx]
  04d61	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  04d64	8b 02		 mov	 eax, DWORD PTR [edx]
  04d66	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  04d69	2b 08		 sub	 ecx, DWORD PTR [eax]
  04d6b	c1 f9 10	 sar	 ecx, 16			; 00000010H
  04d6e	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _mt$14[ebp]
  04d74	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 4840 : 				player->mo->subsector->sector->floorheight)>>FRACBITS);
; 4841 : 
; 4842 : 			/*'Fixed' version that doesn't work
; 4843 : 			mt->angle = (INT16)(mt->angle+(INT16)(FixedDiv(FixedDiv(temp*FRACUNIT, 360*(FRACUNIT/256)),1)<<8));
; 4844 : 			*/
; 4845 : 
; 4846 : 			/* old version before FixedInt
; 4847 : 			mt->angle = (INT16)(mt->angle+(INT16)((FixedDiv(temp*FRACUNIT, 360*(FRACUNIT/256))/FRACUNIT)<<8));
; 4848 : 			*/
; 4849 : 
; 4850 : 			mt->angle = (INT16)(mt->angle+(INT16)((FixedInt(FixedDiv(temp*FRACUNIT, 360*(FRACUNIT/256))))<<8));

  04d78	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$14[ebp]
  04d7e	0f bf 70 04	 movsx	 esi, WORD PTR [eax+4]
  04d82	68 00 68 01 00	 push	 92160			; 00016800H
  04d87	0f bf 8d dc fe
	ff ff		 movsx	 ecx, WORD PTR _temp$11[ebp]
  04d8e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  04d91	51		 push	 ecx
  04d92	e8 00 00 00 00	 call	 _FixedDiv
  04d97	83 c4 08	 add	 esp, 8
  04d9a	50		 push	 eax
  04d9b	e8 00 00 00 00	 call	 _FixedInt
  04da0	83 c4 04	 add	 esp, 4
  04da3	c1 e0 08	 shl	 eax, 8
  04da6	0f bf d0	 movsx	 edx, ax
  04da9	03 f2		 add	 esi, edx
  04dab	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$14[ebp]
  04db1	66 89 70 04	 mov	 WORD PTR [eax+4], si

; 4851 : 
; 4852 : 			P_SpawnHoopsAndRings(mt);

  04db5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$14[ebp]
  04dbb	50		 push	 eax
  04dbc	e8 00 00 00 00	 call	 _P_SpawnHoopsAndRings
  04dc1	83 c4 04	 add	 esp, 4

; 4853 : 
; 4854 : 			player->pflags |= PF_ATTACKDOWN;

  04dc4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04dc7	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  04dcd	83 c9 02	 or	 ecx, 2
  04dd0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04dd3	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 4855 : 		}

  04dd9	eb 24		 jmp	 SHORT $LN508@P_NiGHTSMo
$LN503@P_NiGHTSMo:

; 4856 : 		else if (!(cmd->buttons & BT_ATTACK))

  04ddb	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  04dde	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  04de2	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  04de8	75 15		 jne	 SHORT $LN508@P_NiGHTSMo

; 4857 : 			player->pflags &= ~PF_ATTACKDOWN;

  04dea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ded	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  04df3	83 e1 fd	 and	 ecx, -3			; fffffffdH
  04df6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04df9	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN508@P_NiGHTSMo:

; 4858 : 
; 4859 : 		// This places a bumper!
; 4860 : 		if (cmd->buttons & BT_TOSSFLAG && !player->weapondelay)

  04dff	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  04e02	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  04e06	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  04e0c	0f 84 64 01 00
	00		 je	 $LN509@P_NiGHTSMo
  04e12	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04e15	83 b8 70 01 00
	00 00		 cmp	 DWORD PTR [eax+368], 0
  04e1c	0f 85 54 01 00
	00		 jne	 $LN509@P_NiGHTSMo

; 4861 : 		{
; 4862 : 			mapthing_t *mt;
; 4863 : 			mapthing_t *oldmapthings;
; 4864 : 
; 4865 : 			if (((player->mo->z - player->mo->subsector->sector->floorheight)>>FRACBITS) >= (1 << (16-ZSHIFT)))

  04e22	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04e25	8b 08		 mov	 ecx, DWORD PTR [eax]
  04e27	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04e2a	8b 02		 mov	 eax, DWORD PTR [edx]
  04e2c	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  04e2f	8b 02		 mov	 eax, DWORD PTR [edx]
  04e31	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  04e34	2b 08		 sub	 ecx, DWORD PTR [eax]
  04e36	c1 f9 10	 sar	 ecx, 16			; 00000010H
  04e39	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  04e3f	7c 24		 jl	 SHORT $LN511@P_NiGHTSMo

; 4866 : 			{
; 4867 : 				CONS_Printf("%s",text[TOOHIGH_4095]);

  04e41	b8 04 00 00 00	 mov	 eax, 4
  04e46	69 c8 33 01 00
	00		 imul	 ecx, eax, 307
  04e4c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  04e52	52		 push	 edx
  04e53	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  04e58	e8 00 00 00 00	 call	 _CONS_Printf
  04e5d	83 c4 08	 add	 esp, 8

; 4868 : 				return;

  04e60	e9 a0 08 00 00	 jmp	 $LN539@P_NiGHTSMo
$LN511@P_NiGHTSMo:

; 4869 : 			}
; 4870 : 
; 4871 : 			oldmapthings = mapthings;

  04e65	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  04e6a	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _oldmapthings$9[ebp], eax

; 4872 : 			nummapthings++;

  04e70	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummapthings
  04e75	83 c0 01	 add	 eax, 1
  04e78	a3 00 00 00 00	 mov	 DWORD PTR _nummapthings, eax

; 4873 : #if 0
; 4874 : 			mapthings = M_Memcpy(Z_Calloc(nummapthings * sizeof (*mapthings), PU_LEVEL, NULL), oldmapthings, sizeof (mapthing_t)*(nummapthings-1));
; 4875 : 
; 4876 : 			Z_Free(oldmapthings);
; 4877 : #else
; 4878 : 			mapthings = Z_Realloc(oldmapthings, nummapthings * sizeof (*mapthings), PU_LEVEL, NULL);

  04e7d	6a 00		 push	 0
  04e7f	6a 00		 push	 0
  04e81	6a 32		 push	 50			; 00000032H
  04e83	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  04e8a	50		 push	 eax
  04e8b	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _oldmapthings$9[ebp]
  04e91	51		 push	 ecx
  04e92	e8 00 00 00 00	 call	 _Z_ReallocAlign
  04e97	83 c4 14	 add	 esp, 20			; 00000014H
  04e9a	a3 00 00 00 00	 mov	 DWORD PTR _mapthings, eax

; 4879 : #endif
; 4880 : 
; 4881 : 			mt = mapthings+nummapthings-1;

  04e9f	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  04ea6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mapthings
  04eac	8d 54 01 ec	 lea	 edx, DWORD PTR [ecx+eax-20]
  04eb0	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _mt$10[ebp], edx

; 4882 : 
; 4883 : 			mt->x = (INT16)(player->mo->x>>FRACBITS);

  04eb6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04eb9	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ebb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  04ebe	c1 fa 10	 sar	 edx, 16			; 00000010H
  04ec1	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$10[ebp]
  04ec7	66 89 10	 mov	 WORD PTR [eax], dx

; 4884 : 			mt->y = (INT16)(player->mo->y>>FRACBITS);

  04eca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ecd	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ecf	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  04ed2	c1 fa 10	 sar	 edx, 16			; 00000010H
  04ed5	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$10[ebp]
  04edb	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 4885 : 			mt->angle = (INT16)(FixedInt(AngleFixed(player->mo->angle)));

  04edf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04ee2	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ee4	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  04ee7	52		 push	 edx
  04ee8	e8 00 00 00 00	 call	 _AngleFixed
  04eed	83 c4 04	 add	 esp, 4
  04ef0	50		 push	 eax
  04ef1	e8 00 00 00 00	 call	 _FixedInt
  04ef6	83 c4 04	 add	 esp, 4
  04ef9	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _mt$10[ebp]
  04eff	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 4886 : 
; 4887 : 			mt->type = (UINT16)mobjinfo[MT_NIGHTSBUMPER].doomednum;

  04f03	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  04f08	69 c8 f7 00 00
	00		 imul	 ecx, eax, 247
  04f0e	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _mt$10[ebp]
  04f14	66 8b 81 00 00
	00 00		 mov	 ax, WORD PTR _mobjinfo[ecx]
  04f1b	66 89 42 06	 mov	 WORD PTR [edx+6], ax

; 4888 : 
; 4889 : 			mt->options = (UINT16)((player->mo->z - player->mo->subsector->sector->floorheight)>>FRACBITS);

  04f1f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f22	8b 08		 mov	 ecx, DWORD PTR [eax]
  04f24	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  04f27	8b 02		 mov	 eax, DWORD PTR [edx]
  04f29	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  04f2c	8b 02		 mov	 eax, DWORD PTR [edx]
  04f2e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  04f31	2b 08		 sub	 ecx, DWORD PTR [eax]
  04f33	c1 f9 10	 sar	 ecx, 16			; 00000010H
  04f36	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _mt$10[ebp]
  04f3c	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 4890 : 
; 4891 : 			mt->options <<= ZSHIFT;

  04f40	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$10[ebp]
  04f46	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  04f4a	66 c1 e1 04	 shl	 cx, 4
  04f4e	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _mt$10[ebp]
  04f54	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 4892 : 
; 4893 : 			P_SpawnMapThing(mt);

  04f58	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$10[ebp]
  04f5e	50		 push	 eax
  04f5f	e8 00 00 00 00	 call	 _P_SpawnMapThing
  04f64	83 c4 04	 add	 esp, 4

; 4894 : 
; 4895 : 			player->weapondelay = TICRATE*TICRATE;

  04f67	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f6a	c7 80 70 01 00
	00 c9 04 00 00	 mov	 DWORD PTR [eax+368], 1225 ; 000004c9H

; 4896 : 		}

  04f74	eb 1c		 jmp	 SHORT $LN512@P_NiGHTSMo
$LN509@P_NiGHTSMo:

; 4897 : 		else if (!(cmd->buttons & BT_TOSSFLAG))

  04f76	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  04f79	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  04f7d	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  04f83	75 0d		 jne	 SHORT $LN512@P_NiGHTSMo

; 4898 : 			player->weapondelay = false;

  04f85	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04f88	c7 80 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+368], 0
$LN512@P_NiGHTSMo:

; 4899 : 
; 4900 : 		// This places a ring!
; 4901 : 		if (cmd->buttons & BT_CAMRIGHT && !player->dbginfo)

  04f92	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  04f95	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  04f99	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  04f9f	0f 84 23 01 00
	00		 je	 $LN513@P_NiGHTSMo
  04fa5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  04fa8	83 b8 68 01 00
	00 00		 cmp	 DWORD PTR [eax+360], 0
  04faf	0f 85 13 01 00
	00		 jne	 $LN513@P_NiGHTSMo

; 4902 : 		{
; 4903 : 			mapthing_t *mt;
; 4904 : 			mapthing_t *oldmapthings;
; 4905 : 
; 4906 : 			oldmapthings = mapthings;

  04fb5	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  04fba	89 85 cc fe ff
	ff		 mov	 DWORD PTR _oldmapthings$7[ebp], eax

; 4907 : 			nummapthings++;

  04fc0	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummapthings
  04fc5	83 c0 01	 add	 eax, 1
  04fc8	a3 00 00 00 00	 mov	 DWORD PTR _nummapthings, eax

; 4908 : #if 0
; 4909 : 			mapthings = M_Memcpy(Z_Calloc(nummapthings * sizeof (*mapthings), PU_LEVEL, NULL), oldmapthings, sizeof (mapthing_t)*(nummapthings-1));
; 4910 : 
; 4911 : 			Z_Free(oldmapthings);
; 4912 : #else
; 4913 : 			mapthings = Z_Realloc(oldmapthings, nummapthings * sizeof (*mapthings), PU_LEVEL, NULL);

  04fcd	6a 00		 push	 0
  04fcf	6a 00		 push	 0
  04fd1	6a 32		 push	 50			; 00000032H
  04fd3	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  04fda	50		 push	 eax
  04fdb	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _oldmapthings$7[ebp]
  04fe1	51		 push	 ecx
  04fe2	e8 00 00 00 00	 call	 _Z_ReallocAlign
  04fe7	83 c4 14	 add	 esp, 20			; 00000014H
  04fea	a3 00 00 00 00	 mov	 DWORD PTR _mapthings, eax

; 4914 : #endif
; 4915 : 
; 4916 : 			mt = mapthings + nummapthings-1;

  04fef	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  04ff6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mapthings
  04ffc	8d 54 01 ec	 lea	 edx, DWORD PTR [ecx+eax-20]
  05000	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _mt$8[ebp], edx

; 4917 : 
; 4918 : 			mt->x = (INT16)(player->mo->x>>FRACBITS);

  05006	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0500b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0500e	c1 fa 10	 sar	 edx, 16			; 00000010H
  05011	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$8[ebp]
  05017	66 89 10	 mov	 WORD PTR [eax], dx

; 4919 : 			mt->y = (INT16)(player->mo->y>>FRACBITS);

  0501a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0501d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0501f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  05022	c1 fa 10	 sar	 edx, 16			; 00000010H
  05025	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$8[ebp]
  0502b	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 4920 : 			mt->angle = 0;

  0502f	33 c0		 xor	 eax, eax
  05031	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _mt$8[ebp]
  05037	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 4921 : 			mt->type = (UINT16)mobjinfo[MT_RING].doomednum;

  0503b	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  05040	6b c8 2b	 imul	 ecx, eax, 43
  05043	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _mt$8[ebp]
  05049	66 8b 81 00 00
	00 00		 mov	 ax, WORD PTR _mobjinfo[ecx]
  05050	66 89 42 06	 mov	 WORD PTR [edx+6], ax

; 4922 : 
; 4923 : 			mt->options = (UINT16)((player->mo->z - player->mo->subsector->sector->floorheight)>>FRACBITS);

  05054	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05057	8b 08		 mov	 ecx, DWORD PTR [eax]
  05059	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0505c	8b 02		 mov	 eax, DWORD PTR [edx]
  0505e	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  05061	8b 02		 mov	 eax, DWORD PTR [edx]
  05063	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  05066	2b 08		 sub	 ecx, DWORD PTR [eax]
  05068	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0506b	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _mt$8[ebp]
  05071	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 4924 : 			mt->options <<= ZSHIFT;

  05075	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$8[ebp]
  0507b	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  0507f	66 c1 e1 04	 shl	 cx, 4
  05083	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _mt$8[ebp]
  05089	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 4925 : 
; 4926 : 			mt->options = (UINT16)(mt->options + (UINT16)cv_objflags.value);

  0508d	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$8[ebp]
  05093	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  05097	0f b7 15 14 00
	00 00		 movzx	 edx, WORD PTR _cv_objflags+20
  0509e	03 ca		 add	 ecx, edx
  050a0	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$8[ebp]
  050a6	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 4927 : 			P_SpawnHoopsAndRings(mt);

  050aa	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$8[ebp]
  050b0	50		 push	 eax
  050b1	e8 00 00 00 00	 call	 _P_SpawnHoopsAndRings
  050b6	83 c4 04	 add	 esp, 4

; 4928 : 
; 4929 : 			player->dbginfo = true;

  050b9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  050bc	c7 80 68 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+360], 1

; 4930 : 		}

  050c6	eb 1c		 jmp	 SHORT $LN515@P_NiGHTSMo
$LN513@P_NiGHTSMo:

; 4931 : 		else if (!(cmd->buttons & BT_CAMRIGHT))

  050c8	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  050cb	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  050cf	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  050d5	75 0d		 jne	 SHORT $LN515@P_NiGHTSMo

; 4932 : 			player->dbginfo = false;

  050d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  050da	c7 80 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+360], 0
$LN515@P_NiGHTSMo:

; 4933 : 
; 4934 : 		// This places a wing item!
; 4935 : 		if (cmd->buttons & BT_CAMLEFT && !(player->pflags & PF_JUMPED))

  050e4	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  050e7	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  050eb	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  050f1	0f 84 4e 01 00
	00		 je	 $LN516@P_NiGHTSMo
  050f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  050fa	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  05100	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  05106	0f 85 39 01 00
	00		 jne	 $LN516@P_NiGHTSMo

; 4936 : 		{
; 4937 : 			mapthing_t *mt;
; 4938 : 			mapthing_t *oldmapthings;
; 4939 : 
; 4940 : 			oldmapthings = mapthings;

  0510c	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  05111	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _oldmapthings$5[ebp], eax

; 4941 : 			nummapthings++;

  05117	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummapthings
  0511c	83 c0 01	 add	 eax, 1
  0511f	a3 00 00 00 00	 mov	 DWORD PTR _nummapthings, eax

; 4942 : #if 0
; 4943 : 			mapthings = M_Memcpy(Z_Calloc(nummapthings * sizeof (*mapthings), PU_LEVEL, NULL), oldmapthings, sizeof (mapthing_t)*(nummapthings-1));
; 4944 : 
; 4945 : 			Z_Free(oldmapthings);
; 4946 : #else
; 4947 : 			mapthings = Z_Realloc(oldmapthings, nummapthings * sizeof (*mapthings), PU_LEVEL, NULL);

  05124	6a 00		 push	 0
  05126	6a 00		 push	 0
  05128	6a 32		 push	 50			; 00000032H
  0512a	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  05131	50		 push	 eax
  05132	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _oldmapthings$5[ebp]
  05138	51		 push	 ecx
  05139	e8 00 00 00 00	 call	 _Z_ReallocAlign
  0513e	83 c4 14	 add	 esp, 20			; 00000014H
  05141	a3 00 00 00 00	 mov	 DWORD PTR _mapthings, eax

; 4948 : #endif
; 4949 : 
; 4950 : 			mt = mapthings + nummapthings-1;

  05146	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  0514d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mapthings
  05153	8d 54 01 ec	 lea	 edx, DWORD PTR [ecx+eax-20]
  05157	89 95 c8 fe ff
	ff		 mov	 DWORD PTR _mt$6[ebp], edx

; 4951 : 
; 4952 : 			mt->x = (INT16)(player->mo->x>>FRACBITS);

  0515d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05160	8b 08		 mov	 ecx, DWORD PTR [eax]
  05162	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  05165	c1 fa 10	 sar	 edx, 16			; 00000010H
  05168	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$6[ebp]
  0516e	66 89 10	 mov	 WORD PTR [eax], dx

; 4953 : 			mt->y = (INT16)(player->mo->y>>FRACBITS);

  05171	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05174	8b 08		 mov	 ecx, DWORD PTR [eax]
  05176	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  05179	c1 fa 10	 sar	 edx, 16			; 00000010H
  0517c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$6[ebp]
  05182	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 4954 : 			mt->angle = 0;

  05186	33 c0		 xor	 eax, eax
  05188	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _mt$6[ebp]
  0518e	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 4955 : 			mt->type = (UINT16)mobjinfo[MT_NIGHTSWING].doomednum;

  05192	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  05197	69 c8 fc 00 00
	00		 imul	 ecx, eax, 252
  0519d	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _mt$6[ebp]
  051a3	66 8b 81 00 00
	00 00		 mov	 ax, WORD PTR _mobjinfo[ecx]
  051aa	66 89 42 06	 mov	 WORD PTR [edx+6], ax

; 4956 : 
; 4957 : 			mt->options = (UINT16)((player->mo->z - player->mo->subsector->sector->floorheight)>>FRACBITS);

  051ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  051b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  051b3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  051b6	8b 02		 mov	 eax, DWORD PTR [edx]
  051b8	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  051bb	8b 02		 mov	 eax, DWORD PTR [edx]
  051bd	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  051c0	2b 08		 sub	 ecx, DWORD PTR [eax]
  051c2	c1 f9 10	 sar	 ecx, 16			; 00000010H
  051c5	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _mt$6[ebp]
  051cb	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 4958 : 
; 4959 : 			CONS_Printf("Z is %d\n", mt->options);

  051cf	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$6[ebp]
  051d5	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  051d9	51		 push	 ecx
  051da	68 00 00 00 00	 push	 OFFSET ??_C@_08HHHIMPMI@Z?5is?5?$CFd?6@
  051df	e8 00 00 00 00	 call	 _CONS_Printf
  051e4	83 c4 08	 add	 esp, 8

; 4960 : 
; 4961 : 			mt->options <<= ZSHIFT;

  051e7	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$6[ebp]
  051ed	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  051f1	66 c1 e1 04	 shl	 cx, 4
  051f5	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _mt$6[ebp]
  051fb	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 4962 : 
; 4963 : 			mt->options = (UINT16)(mt->options + (UINT16)cv_objflags.value);

  051ff	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$6[ebp]
  05205	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  05209	0f b7 15 14 00
	00 00		 movzx	 edx, WORD PTR _cv_objflags+20
  05210	03 ca		 add	 ecx, edx
  05212	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$6[ebp]
  05218	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 4964 : 
; 4965 : 			P_SpawnHoopsAndRings(mt);

  0521c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _mt$6[ebp]
  05222	50		 push	 eax
  05223	e8 00 00 00 00	 call	 _P_SpawnHoopsAndRings
  05228	83 c4 04	 add	 esp, 4

; 4966 : 
; 4967 : 			player->pflags |= PF_JUMPED;

  0522b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0522e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  05234	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  0523a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0523d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 4968 : 		}

  05243	eb 27		 jmp	 SHORT $LN518@P_NiGHTSMo
$LN516@P_NiGHTSMo:

; 4969 : 		else if (!(cmd->buttons & BT_CAMLEFT))

  05245	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  05248	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0524c	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  05252	75 18		 jne	 SHORT $LN518@P_NiGHTSMo

; 4970 : 			player->pflags &= ~PF_JUMPED;

  05254	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05257	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0525d	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  05263	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  05266	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN518@P_NiGHTSMo:

; 4971 : 
; 4972 : 		// This places a custom object as defined in the console cv_mapthingnum.
; 4973 : 		if (cmd->buttons & BT_USE && !(player->pflags & PF_USEDOWN) && cv_mapthingnum.value)

  0526c	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  0526f	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  05273	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  05279	0f 84 62 04 00
	00		 je	 $LN519@P_NiGHTSMo
  0527f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05282	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  05288	83 e1 04	 and	 ecx, 4
  0528b	0f 85 50 04 00
	00		 jne	 $LN519@P_NiGHTSMo
  05291	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mapthingnum+20, 0
  05298	0f 84 43 04 00
	00		 je	 $LN519@P_NiGHTSMo

; 4974 : 		{
; 4975 : 			mapthing_t *mt;
; 4976 : 			mapthing_t *oldmapthings;
; 4977 : 			INT32 shift;
; 4978 : 			UINT16 angle;
; 4979 : 
; 4980 : 			angle = (UINT16)((360-player->anotherflyangle) % 360);

  0529e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  052a1	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  052a6	2b 88 c0 01 00
	00		 sub	 ecx, DWORD PTR [eax+448]
  052ac	8b c1		 mov	 eax, ecx
  052ae	99		 cdq
  052af	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  052b4	f7 f9		 idiv	 ecx
  052b6	66 89 95 b4 fe
	ff ff		 mov	 WORD PTR _angle$1[ebp], dx

; 4981 : 			if (angle > 90 && angle < 270)

  052bd	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _angle$1[ebp]
  052c4	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  052c7	7e 37		 jle	 SHORT $LN521@P_NiGHTSMo
  052c9	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _angle$1[ebp]
  052d0	3d 0e 01 00 00	 cmp	 eax, 270		; 0000010eH
  052d5	7d 29		 jge	 SHORT $LN521@P_NiGHTSMo

; 4982 : 			{
; 4983 : 				angle += 180;

  052d7	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _angle$1[ebp]
  052de	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  052e3	66 89 85 b4 fe
	ff ff		 mov	 WORD PTR _angle$1[ebp], ax

; 4984 : 				angle %= 360;

  052ea	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _angle$1[ebp]
  052f1	99		 cdq
  052f2	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  052f7	f7 f9		 idiv	 ecx
  052f9	66 89 95 b4 fe
	ff ff		 mov	 WORD PTR _angle$1[ebp], dx
$LN521@P_NiGHTSMo:

; 4985 : 			}
; 4986 : 
; 4987 : 			if (player->mo->target->flags & MF_AMBUSH)

  05300	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05303	8b 08		 mov	 ecx, DWORD PTR [eax]
  05305	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0530b	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  0530e	83 e0 20	 and	 eax, 32			; 00000020H
  05311	74 13		 je	 SHORT $LN522@P_NiGHTSMo

; 4988 : 				angle = (UINT16)player->anotherflyangle;

  05313	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05316	66 8b 88 c0 01
	00 00		 mov	 cx, WORD PTR [eax+448]
  0531d	66 89 8d b4 fe
	ff ff		 mov	 WORD PTR _angle$1[ebp], cx
  05324	eb 62		 jmp	 SHORT $LN524@P_NiGHTSMo
$LN522@P_NiGHTSMo:

; 4989 : 			else
; 4990 : 			{
; 4991 : 				angle = (UINT16)((360-player->anotherflyangle) % 360);

  05326	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05329	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  0532e	2b 88 c0 01 00
	00		 sub	 ecx, DWORD PTR [eax+448]
  05334	8b c1		 mov	 eax, ecx
  05336	99		 cdq
  05337	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  0533c	f7 f9		 idiv	 ecx
  0533e	66 89 95 b4 fe
	ff ff		 mov	 WORD PTR _angle$1[ebp], dx

; 4992 : 				if (angle > 90 && angle < 270)

  05345	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _angle$1[ebp]
  0534c	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0534f	7e 37		 jle	 SHORT $LN524@P_NiGHTSMo
  05351	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _angle$1[ebp]
  05358	3d 0e 01 00 00	 cmp	 eax, 270		; 0000010eH
  0535d	7d 29		 jge	 SHORT $LN524@P_NiGHTSMo

; 4993 : 				{
; 4994 : 					angle += 180;

  0535f	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _angle$1[ebp]
  05366	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  0536b	66 89 85 b4 fe
	ff ff		 mov	 WORD PTR _angle$1[ebp], ax

; 4995 : 					angle %= 360;

  05372	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _angle$1[ebp]
  05379	99		 cdq
  0537a	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  0537f	f7 f9		 idiv	 ecx
  05381	66 89 95 b4 fe
	ff ff		 mov	 WORD PTR _angle$1[ebp], dx
$LN524@P_NiGHTSMo:

; 4996 : 				}
; 4997 : 			}
; 4998 : 
; 4999 : 			if ((cv_mapthingnum.value == 16 || cv_mapthingnum.value == 2008) && ((player->mo->z - player->mo->subsector->sector->floorheight)>>FRACBITS) >= (1 << (16-(ZSHIFT+1))))

  05388	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR _cv_mapthingnum+20, 16 ; 00000010H
  0538f	74 0c		 je	 SHORT $LN527@P_NiGHTSMo
  05391	81 3d 14 00 00
	00 d8 07 00 00	 cmp	 DWORD PTR _cv_mapthingnum+20, 2008 ; 000007d8H
  0539b	75 45		 jne	 SHORT $LN525@P_NiGHTSMo
$LN527@P_NiGHTSMo:
  0539d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  053a2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  053a5	8b 02		 mov	 eax, DWORD PTR [edx]
  053a7	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  053aa	8b 02		 mov	 eax, DWORD PTR [edx]
  053ac	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  053af	2b 08		 sub	 ecx, DWORD PTR [eax]
  053b1	c1 f9 10	 sar	 ecx, 16			; 00000010H
  053b4	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  053ba	7c 26		 jl	 SHORT $LN525@P_NiGHTSMo

; 5000 : 			{
; 5001 : 				CONS_Printf("%s", text[TOOHIGH_2047]);

  053bc	b8 04 00 00 00	 mov	 eax, 4
  053c1	69 c8 34 01 00
	00		 imul	 ecx, eax, 308
  053c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  053cd	52		 push	 edx
  053ce	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  053d3	e8 00 00 00 00	 call	 _CONS_Printf
  053d8	83 c4 08	 add	 esp, 8

; 5002 : 				return;

  053db	e9 25 03 00 00	 jmp	 $LN539@P_NiGHTSMo

; 5003 : 			}

  053e0	eb 43		 jmp	 SHORT $LN528@P_NiGHTSMo
$LN525@P_NiGHTSMo:

; 5004 : 			else if (((player->mo->z - player->mo->subsector->sector->floorheight)>>FRACBITS) >= (1 << (16-ZSHIFT)))

  053e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  053e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  053e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  053ea	8b 02		 mov	 eax, DWORD PTR [edx]
  053ec	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  053ef	8b 02		 mov	 eax, DWORD PTR [edx]
  053f1	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  053f4	2b 08		 sub	 ecx, DWORD PTR [eax]
  053f6	c1 f9 10	 sar	 ecx, 16			; 00000010H
  053f9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  053ff	7c 24		 jl	 SHORT $LN528@P_NiGHTSMo

; 5005 : 			{
; 5006 : 				CONS_Printf("%s", text[TOOHIGH_4095]);

  05401	b8 04 00 00 00	 mov	 eax, 4
  05406	69 c8 33 01 00
	00		 imul	 ecx, eax, 307
  0540c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  05412	52		 push	 edx
  05413	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  05418	e8 00 00 00 00	 call	 _CONS_Printf
  0541d	83 c4 08	 add	 esp, 8

; 5007 : 				return;

  05420	e9 e0 02 00 00	 jmp	 $LN539@P_NiGHTSMo
$LN528@P_NiGHTSMo:

; 5008 : 			}
; 5009 : 
; 5010 : 			oldmapthings = mapthings;

  05425	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapthings
  0542a	89 85 bc fe ff
	ff		 mov	 DWORD PTR _oldmapthings$3[ebp], eax

; 5011 : 			nummapthings++;

  05430	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummapthings
  05435	83 c0 01	 add	 eax, 1
  05438	a3 00 00 00 00	 mov	 DWORD PTR _nummapthings, eax

; 5012 : #if 0
; 5013 : 			mapthings = M_Memcpy(Z_Calloc(nummapthings * sizeof (*mapthings), PU_LEVEL, NULL), oldmapthings, sizeof (mapthing_t)*(nummapthings-1));
; 5014 : 
; 5015 : 			Z_Free(oldmapthings);
; 5016 : #else
; 5017 : 			mapthings = Z_Realloc(oldmapthings, nummapthings * sizeof (*mapthings), PU_LEVEL, NULL);

  0543d	6a 00		 push	 0
  0543f	6a 00		 push	 0
  05441	6a 32		 push	 50			; 00000032H
  05443	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  0544a	50		 push	 eax
  0544b	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _oldmapthings$3[ebp]
  05451	51		 push	 ecx
  05452	e8 00 00 00 00	 call	 _Z_ReallocAlign
  05457	83 c4 14	 add	 esp, 20			; 00000014H
  0545a	a3 00 00 00 00	 mov	 DWORD PTR _mapthings, eax

; 5018 : #endif
; 5019 : 
; 5020 : 			mt = mapthings+nummapthings-1;

  0545f	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _nummapthings, 20
  05466	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mapthings
  0546c	8d 54 01 ec	 lea	 edx, DWORD PTR [ecx+eax-20]
  05470	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _mt$4[ebp], edx

; 5021 : 
; 5022 : 			mt->x = (INT16)(player->mo->x>>FRACBITS);

  05476	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  05479	8b 08		 mov	 ecx, DWORD PTR [eax]
  0547b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0547e	c1 fa 10	 sar	 edx, 16			; 00000010H
  05481	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05487	66 89 10	 mov	 WORD PTR [eax], dx

; 5023 : 			mt->y = (INT16)(player->mo->y>>FRACBITS);

  0548a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0548d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0548f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  05492	c1 fa 10	 sar	 edx, 16			; 00000010H
  05495	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  0549b	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 5024 : 			mt->angle = angle;

  0549f	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  054a5	66 8b 8d b4 fe
	ff ff		 mov	 cx, WORD PTR _angle$1[ebp]
  054ac	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 5025 : 			mt->type = (INT16)cv_mapthingnum.value;

  054b0	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  054b6	66 8b 0d 14 00
	00 00		 mov	 cx, WORD PTR _cv_mapthingnum+20
  054bd	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 5026 : 
; 5027 : 			mt->options = (UINT16)((player->mo->z - player->mo->subsector->sector->floorheight)>>FRACBITS);

  054c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  054c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  054c6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  054c9	8b 02		 mov	 eax, DWORD PTR [edx]
  054cb	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  054ce	8b 02		 mov	 eax, DWORD PTR [edx]
  054d0	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  054d3	2b 08		 sub	 ecx, DWORD PTR [eax]
  054d5	c1 f9 10	 sar	 ecx, 16			; 00000010H
  054d8	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _mt$4[ebp]
  054de	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 5028 : 
; 5029 : 			if (mt->type == 200 || mt->type == 201) // Eggmobile 1 & 2

  054e2	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  054e8	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  054ec	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  054f2	74 12		 je	 SHORT $LN531@P_NiGHTSMo
  054f4	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  054fa	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  054fe	81 f9 c9 00 00
	00		 cmp	 ecx, 201		; 000000c9H
  05504	75 0c		 jne	 SHORT $LN529@P_NiGHTSMo
$LN531@P_NiGHTSMo:

; 5030 : 				shift = ZSHIFT+1; // Why you would want to place these in a NiGHTS map, I have NO idea!

  05506	c7 85 b8 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR _shift$2[ebp], 5
  05510	eb 28		 jmp	 SHORT $LN533@P_NiGHTSMo
$LN529@P_NiGHTSMo:

; 5031 : 			else if (mt->type == 502) // Stupid starpost...

  05512	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05518	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0551c	81 f9 f6 01 00
	00		 cmp	 ecx, 502		; 000001f6H
  05522	75 0c		 jne	 SHORT $LN532@P_NiGHTSMo

; 5032 : 				shift = 0;

  05524	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _shift$2[ebp], 0
  0552e	eb 0a		 jmp	 SHORT $LN533@P_NiGHTSMo
$LN532@P_NiGHTSMo:

; 5033 : 			else
; 5034 : 				shift = ZSHIFT;

  05530	c7 85 b8 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _shift$2[ebp], 4
$LN533@P_NiGHTSMo:

; 5035 : 
; 5036 : 			if (shift)

  0553a	83 bd b8 fe ff
	ff 00		 cmp	 DWORD PTR _shift$2[ebp], 0
  05541	74 20		 je	 SHORT $LN534@P_NiGHTSMo

; 5037 : 				mt->options <<= shift;

  05543	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05549	66 8b 50 08	 mov	 dx, WORD PTR [eax+8]
  0554d	66 8b 8d b8 fe
	ff ff		 mov	 cx, WORD PTR _shift$2[ebp]
  05554	66 d3 e2	 shl	 dx, cl
  05557	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  0555d	66 89 50 08	 mov	 WORD PTR [eax+8], dx
  05561	eb 0c		 jmp	 SHORT $LN535@P_NiGHTSMo
$LN534@P_NiGHTSMo:

; 5038 : 			else
; 5039 : 				mt->options = 0;

  05563	33 c0		 xor	 eax, eax
  05565	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _mt$4[ebp]
  0556b	66 89 41 08	 mov	 WORD PTR [ecx+8], ax
$LN535@P_NiGHTSMo:

; 5040 : 
; 5041 : 			mt->options = (UINT16)(mt->options + (UINT16)cv_objflags.value);

  0556f	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05575	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  05579	0f b7 15 14 00
	00 00		 movzx	 edx, WORD PTR _cv_objflags+20
  05580	03 ca		 add	 ecx, edx
  05582	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05588	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 5042 : 
; 5043 : 			if (mt->type == 1705 || mt->type == 600 || mt->type == 601 || mt->type == 602
; 5044 : 				|| mt->type == 603 || mt->type == 604 || mt->type == 300 || mt->type == 605
; 5045 : 				|| mt->type == 606 || mt->type == 607 || mt->type == 608
; 5046 : 				|| mt->type == 609 || mt->type == 1706)

  0558c	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05592	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  05596	81 f9 a9 06 00
	00		 cmp	 ecx, 1705		; 000006a9H
  0559c	0f 84 e8 00 00
	00		 je	 $LN538@P_NiGHTSMo
  055a2	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  055a8	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  055ac	81 f9 58 02 00
	00		 cmp	 ecx, 600		; 00000258H
  055b2	0f 84 d2 00 00
	00		 je	 $LN538@P_NiGHTSMo
  055b8	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  055be	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  055c2	81 f9 59 02 00
	00		 cmp	 ecx, 601		; 00000259H
  055c8	0f 84 bc 00 00
	00		 je	 $LN538@P_NiGHTSMo
  055ce	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  055d4	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  055d8	81 f9 5a 02 00
	00		 cmp	 ecx, 602		; 0000025aH
  055de	0f 84 a6 00 00
	00		 je	 $LN538@P_NiGHTSMo
  055e4	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  055ea	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  055ee	81 f9 5b 02 00
	00		 cmp	 ecx, 603		; 0000025bH
  055f4	0f 84 90 00 00
	00		 je	 $LN538@P_NiGHTSMo
  055fa	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05600	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  05604	81 f9 5c 02 00
	00		 cmp	 ecx, 604		; 0000025cH
  0560a	74 7e		 je	 SHORT $LN538@P_NiGHTSMo
  0560c	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05612	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  05616	81 f9 2c 01 00
	00		 cmp	 ecx, 300		; 0000012cH
  0561c	74 6c		 je	 SHORT $LN538@P_NiGHTSMo
  0561e	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05624	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  05628	81 f9 5d 02 00
	00		 cmp	 ecx, 605		; 0000025dH
  0562e	74 5a		 je	 SHORT $LN538@P_NiGHTSMo
  05630	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05636	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0563a	81 f9 5e 02 00
	00		 cmp	 ecx, 606		; 0000025eH
  05640	74 48		 je	 SHORT $LN538@P_NiGHTSMo
  05642	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05648	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0564c	81 f9 5f 02 00
	00		 cmp	 ecx, 607		; 0000025fH
  05652	74 36		 je	 SHORT $LN538@P_NiGHTSMo
  05654	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  0565a	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0565e	81 f9 60 02 00
	00		 cmp	 ecx, 608		; 00000260H
  05664	74 24		 je	 SHORT $LN538@P_NiGHTSMo
  05666	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  0566c	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  05670	81 f9 61 02 00
	00		 cmp	 ecx, 609		; 00000261H
  05676	74 12		 je	 SHORT $LN538@P_NiGHTSMo
  05678	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  0567e	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  05682	81 f9 aa 06 00
	00		 cmp	 ecx, 1706		; 000006aaH
  05688	75 11		 jne	 SHORT $LN536@P_NiGHTSMo
$LN538@P_NiGHTSMo:

; 5047 : 			{
; 5048 : 				P_SpawnHoopsAndRings(mt);

  0568a	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  05690	50		 push	 eax
  05691	e8 00 00 00 00	 call	 _P_SpawnHoopsAndRings
  05696	83 c4 04	 add	 esp, 4

; 5049 : 			}

  05699	eb 0f		 jmp	 SHORT $LN537@P_NiGHTSMo
$LN536@P_NiGHTSMo:

; 5050 : 			else
; 5051 : 				P_SpawnMapThing(mt);

  0569b	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  056a1	50		 push	 eax
  056a2	e8 00 00 00 00	 call	 _P_SpawnMapThing
  056a7	83 c4 04	 add	 esp, 4
$LN537@P_NiGHTSMo:

; 5052 : 
; 5053 : 			CONS_Printf("Spawned at %d\n", mt->options >> shift);

  056aa	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _mt$4[ebp]
  056b0	0f b7 50 08	 movzx	 edx, WORD PTR [eax+8]
  056b4	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _shift$2[ebp]
  056ba	d3 fa		 sar	 edx, cl
  056bc	52		 push	 edx
  056bd	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENOLJJLK@Spawned?5at?5?$CFd?6@
  056c2	e8 00 00 00 00	 call	 _CONS_Printf
  056c7	83 c4 08	 add	 esp, 8

; 5054 : 
; 5055 : 			player->pflags |= PF_USEDOWN;

  056ca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  056cd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  056d3	83 c9 04	 or	 ecx, 4
  056d6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  056d9	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 5056 : 		}

  056df	eb 24		 jmp	 SHORT $LN539@P_NiGHTSMo
$LN519@P_NiGHTSMo:

; 5057 : 		else if (!(cmd->buttons & BT_USE))

  056e1	8b 45 c0	 mov	 eax, DWORD PTR _cmd$[ebp]
  056e4	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  056e8	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  056ee	75 15		 jne	 SHORT $LN539@P_NiGHTSMo

; 5058 : 			player->pflags &= ~PF_USEDOWN;

  056f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  056f3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  056f9	83 e1 fb	 and	 ecx, -5			; fffffffbH
  056fc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  056ff	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN539@P_NiGHTSMo:

; 5059 : 	}
; 5060 : }

  05705	5f		 pop	 edi
  05706	5e		 pop	 esi
  05707	5b		 pop	 ebx
  05708	8b e5		 mov	 esp, ebp
  0570a	5d		 pop	 ebp
  0570b	c3		 ret	 0
_P_NiGHTSMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_NightsTransferPoints
_TEXT	SEGMENT
_vertices$1 = -244					; size = 48
_transfer2last$2 = -196					; size = 4
_transfer1last$3 = -192					; size = 4
_transfer2line$4 = -188					; size = 76
_transfer1line$5 = -112					; size = 76
_th$6 = -36						; size = 4
_mo2$7 = -32						; size = 4
_axis$8 = -28						; size = 4
_transfer2$9 = -24					; size = 4
_transfer1$10 = -20					; size = 4
_sequence$11 = -16					; size = 4
_fa$12 = -12						; size = 4
_fa$13 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_player$ = 8						; size = 4
_xspeed$ = 12						; size = 4
_radius$ = 16						; size = 4
_P_NightsTransferPoints PROC				; COMDAT

; 2973 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2974 : 	if (player->pflags & PF_TRANSFERTOCLOSEST)

  00016	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00019	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0001f	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  00025	74 5f		 je	 SHORT $LN11@P_NightsTr

; 2975 : 	{
; 2976 : 		const angle_t fa = R_PointToAngle2(player->axis1->x, player->axis1->y, player->axis2->x, player->axis2->y);

  00027	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0002a	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  00030	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00037	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  0003d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00044	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  0004a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0004d	52		 push	 edx
  0004e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00051	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  00057	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 _R_PointToAngle2
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	89 45 f8	 mov	 DWORD PTR _fa$13[ebp], eax

; 2977 : 		P_InstaThrust(player->mo, fa, xspeed/10);

  00066	8b 45 0c	 mov	 eax, DWORD PTR _xspeed$[ebp]
  00069	99		 cdq
  0006a	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0006f	f7 f9		 idiv	 ecx
  00071	50		 push	 eax
  00072	8b 55 f8	 mov	 edx, DWORD PTR _fa$13[ebp]
  00075	52		 push	 edx
  00076	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 _P_InstaThrust
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2978 : 	}

  00084	eb 7f		 jmp	 SHORT $LN12@P_NightsTr
$LN11@P_NightsTr:

; 2979 : 	else
; 2980 : 	{
; 2981 : 		const angle_t fa = player->angle_pos>>ANGLETOFINESHIFT;

  00086	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00089	8b 88 9c 01 00
	00		 mov	 ecx, DWORD PTR [eax+412]
  0008f	c1 e9 13	 shr	 ecx, 19			; 00000013H
  00092	89 4d f4	 mov	 DWORD PTR _fa$12[ebp], ecx

; 2982 : 
; 2983 : 		player->mo->momx = player->mo->target->x + FixedMul(FINECOSINE(fa),radius) - player->mo->x;

  00095	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00098	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009a	8b b1 98 00 00
	00		 mov	 esi, DWORD PTR [ecx+152]
  000a0	8b 55 10	 mov	 edx, DWORD PTR _radius$[ebp]
  000a3	52		 push	 edx
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _fa$12[ebp]
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  000ad	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 _FixedMul
  000b6	83 c4 08	 add	 esp, 8
  000b9	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000bc	03 c8		 add	 ecx, eax
  000be	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000c1	8b 02		 mov	 eax, DWORD PTR [edx]
  000c3	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000c6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000c9	8b 02		 mov	 eax, DWORD PTR [edx]
  000cb	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 2984 : 
; 2985 : 		player->mo->momy = player->mo->target->y + FixedMul(FINESINE(fa),radius) - player->mo->y;

  000ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d3	8b b1 98 00 00
	00		 mov	 esi, DWORD PTR [ecx+152]
  000d9	8b 55 10	 mov	 edx, DWORD PTR _radius$[ebp]
  000dc	52		 push	 edx
  000dd	8b 45 f4	 mov	 eax, DWORD PTR _fa$12[ebp]
  000e0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _FixedMul
  000ed	83 c4 08	 add	 esp, 8
  000f0	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f3	03 d0		 add	 edx, eax
  000f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  000fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00100	8b 08		 mov	 ecx, DWORD PTR [eax]
  00102	89 51 4c	 mov	 DWORD PTR [ecx+76], edx
$LN12@P_NightsTr:

; 2986 : 	}
; 2987 : 
; 2988 : 	{
; 2989 : 		const INT32 sequence = player->mo->target->threshold;

  00105	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00108	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010a	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00110	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00116	89 45 f0	 mov	 DWORD PTR _sequence$11[ebp], eax

; 2990 : 		mobj_t *transfer1 = NULL;

  00119	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _transfer1$10[ebp], 0

; 2991 : 		mobj_t *transfer2 = NULL;

  00120	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _transfer2$9[ebp], 0

; 2992 : 		mobj_t *axis;
; 2993 : 		mobj_t *mo2;
; 2994 : 		thinker_t *th;
; 2995 : 		line_t transfer1line;
; 2996 : 		line_t transfer2line;
; 2997 : 		boolean transfer1last = false;

  00127	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _transfer1last$3[ebp], 0

; 2998 : 		boolean transfer2last = false;

  00131	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _transfer2last$2[ebp], 0

; 2999 : 		vertex_t vertices[4];
; 3000 : 
; 3001 : 		// Find next waypoint
; 3002 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0013b	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00140	89 45 dc	 mov	 DWORD PTR _th$6[ebp], eax
  00143	eb 09		 jmp	 SHORT $LN4@P_NightsTr
$LN2@P_NightsTr:
  00145	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  00148	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014b	89 4d dc	 mov	 DWORD PTR _th$6[ebp], ecx
$LN4@P_NightsTr:
  0014e	81 7d dc 00 00
	00 00		 cmp	 DWORD PTR _th$6[ebp], OFFSET _thinkercap
  00155	0f 84 f8 00 00
	00		 je	 $LN3@P_NightsTr

; 3003 : 		{
; 3004 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker) // Not a mobj thinker

  0015b	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  0015e	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00165	74 02		 je	 SHORT $LN13@P_NightsTr

; 3005 : 				continue;

  00167	eb dc		 jmp	 SHORT $LN2@P_NightsTr
$LN13@P_NightsTr:

; 3006 : 
; 3007 : 			mo2 = (mobj_t *)th;

  00169	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  0016c	89 45 e0	 mov	 DWORD PTR _mo2$7[ebp], eax

; 3008 : 
; 3009 : 			// Axis things are only at beginning of list.
; 3010 : 			if (!(mo2->flags2 & MF2_AXIS))

  0016f	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00172	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00178	83 e1 02	 and	 ecx, 2
  0017b	75 05		 jne	 SHORT $LN14@P_NightsTr

; 3011 : 				break;

  0017d	e9 d1 00 00 00	 jmp	 $LN3@P_NightsTr
$LN14@P_NightsTr:

; 3012 : 
; 3013 : 			if ((mo2->type == MT_AXISTRANSFER || mo2->type == MT_AXISTRANSFERLINE)
; 3014 : 				&& mo2->threshold == sequence)

  00182	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00185	81 78 7c f2 00
	00 00		 cmp	 DWORD PTR [eax+124], 242 ; 000000f2H
  0018c	74 10		 je	 SHORT $LN16@P_NightsTr
  0018e	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00191	81 78 7c f3 00
	00 00		 cmp	 DWORD PTR [eax+124], 243 ; 000000f3H
  00198	0f 85 b0 00 00
	00		 jne	 $LN24@P_NightsTr
$LN16@P_NightsTr:
  0019e	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  001a1	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  001a7	3b 4d f0	 cmp	 ecx, DWORD PTR _sequence$11[ebp]
  001aa	0f 85 9e 00 00
	00		 jne	 $LN24@P_NightsTr

; 3015 : 			{
; 3016 : 				if (player->pflags & PF_TRANSFERTOCLOSEST)

  001b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001b9	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  001bf	74 44		 je	 SHORT $LN17@P_NightsTr

; 3017 : 				{
; 3018 : 					if (mo2->health == player->axis1->health)

  001c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001c4	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  001ca	8b 55 e0	 mov	 edx, DWORD PTR _mo2$7[ebp]
  001cd	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  001d3	3b 81 8c 00 00
	00		 cmp	 eax, DWORD PTR [ecx+140]
  001d9	75 08		 jne	 SHORT $LN19@P_NightsTr

; 3019 : 						transfer1 = mo2;

  001db	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  001de	89 45 ec	 mov	 DWORD PTR _transfer1$10[ebp], eax
  001e1	eb 20		 jmp	 SHORT $LN21@P_NightsTr
$LN19@P_NightsTr:

; 3020 : 					else if (mo2->health == player->axis2->health)

  001e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e6	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  001ec	8b 55 e0	 mov	 edx, DWORD PTR _mo2$7[ebp]
  001ef	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  001f5	3b 81 8c 00 00
	00		 cmp	 eax, DWORD PTR [ecx+140]
  001fb	75 06		 jne	 SHORT $LN21@P_NightsTr

; 3021 : 						transfer2 = mo2;

  001fd	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00200	89 45 e8	 mov	 DWORD PTR _transfer2$9[ebp], eax
$LN21@P_NightsTr:

; 3022 : 				}

  00203	eb 49		 jmp	 SHORT $LN24@P_NightsTr
$LN17@P_NightsTr:

; 3023 : 				else
; 3024 : 				{
; 3025 : 					if (mo2->health == player->mo->target->health)

  00205	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00208	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020a	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00210	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00213	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00219	3b 8a 8c 00 00
	00		 cmp	 ecx, DWORD PTR [edx+140]
  0021f	75 08		 jne	 SHORT $LN22@P_NightsTr

; 3026 : 						transfer1 = mo2;

  00221	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00224	89 45 ec	 mov	 DWORD PTR _transfer1$10[ebp], eax
  00227	eb 25		 jmp	 SHORT $LN24@P_NightsTr
$LN22@P_NightsTr:

; 3027 : 					else if (mo2->health == player->mo->target->health + 1)

  00229	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0022c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022e	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00234	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0023a	83 c0 01	 add	 eax, 1
  0023d	8b 4d e0	 mov	 ecx, DWORD PTR _mo2$7[ebp]
  00240	39 81 8c 00 00
	00		 cmp	 DWORD PTR [ecx+140], eax
  00246	75 06		 jne	 SHORT $LN24@P_NightsTr

; 3028 : 						transfer2 = mo2;

  00248	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  0024b	89 45 e8	 mov	 DWORD PTR _transfer2$9[ebp], eax
$LN24@P_NightsTr:

; 3029 : 				}
; 3030 : 			}
; 3031 : 		}

  0024e	e9 f2 fe ff ff	 jmp	 $LN2@P_NightsTr
$LN3@P_NightsTr:

; 3032 : 
; 3033 : 		// It might be possible that one wasn't found.
; 3034 : 		// Is it because we're at the end of the track?
; 3035 : 		// Look for a wrapper point.
; 3036 : 		if (!transfer1)

  00253	83 7d ec 00	 cmp	 DWORD PTR _transfer1$10[ebp], 0
  00257	0f 85 ab 00 00
	00		 jne	 $LN6@P_NightsTr

; 3037 : 		{
; 3038 : 			for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0025d	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00262	89 45 dc	 mov	 DWORD PTR _th$6[ebp], eax
  00265	eb 09		 jmp	 SHORT $LN7@P_NightsTr
$LN5@P_NightsTr:
  00267	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  0026a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0026d	89 4d dc	 mov	 DWORD PTR _th$6[ebp], ecx
$LN7@P_NightsTr:
  00270	81 7d dc 00 00
	00 00		 cmp	 DWORD PTR _th$6[ebp], OFFSET _thinkercap
  00277	0f 84 8b 00 00
	00		 je	 $LN6@P_NightsTr

; 3039 : 			{
; 3040 : 				if (th->function.acp1 != (actionf_p1)P_MobjThinker) // Not a mobj thinker

  0027d	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  00280	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00287	74 02		 je	 SHORT $LN26@P_NightsTr

; 3041 : 					continue;

  00289	eb dc		 jmp	 SHORT $LN5@P_NightsTr
$LN26@P_NightsTr:

; 3042 : 
; 3043 : 				mo2 = (mobj_t *)th;

  0028b	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  0028e	89 45 e0	 mov	 DWORD PTR _mo2$7[ebp], eax

; 3044 : 
; 3045 : 				// Axis things are only at beginning of list.
; 3046 : 				if (!(mo2->flags2 & MF2_AXIS))

  00291	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00294	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0029a	83 e1 02	 and	 ecx, 2
  0029d	75 02		 jne	 SHORT $LN27@P_NightsTr

; 3047 : 					break;

  0029f	eb 67		 jmp	 SHORT $LN6@P_NightsTr
$LN27@P_NightsTr:

; 3048 : 
; 3049 : 				if (mo2->threshold == sequence && (mo2->type == MT_AXISTRANSFER || mo2->type == MT_AXISTRANSFERLINE))

  002a1	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  002a4	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  002aa	3b 4d f0	 cmp	 ecx, DWORD PTR _sequence$11[ebp]
  002ad	75 54		 jne	 SHORT $LN32@P_NightsTr
  002af	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  002b2	81 78 7c f2 00
	00 00		 cmp	 DWORD PTR [eax+124], 242 ; 000000f2H
  002b9	74 0c		 je	 SHORT $LN29@P_NightsTr
  002bb	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  002be	81 78 7c f3 00
	00 00		 cmp	 DWORD PTR [eax+124], 243 ; 000000f3H
  002c5	75 3c		 jne	 SHORT $LN32@P_NightsTr
$LN29@P_NightsTr:

; 3050 : 				{
; 3051 : 					if (!transfer1)

  002c7	83 7d ec 00	 cmp	 DWORD PTR _transfer1$10[ebp], 0
  002cb	75 12		 jne	 SHORT $LN30@P_NightsTr

; 3052 : 					{
; 3053 : 						transfer1 = mo2;

  002cd	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  002d0	89 45 ec	 mov	 DWORD PTR _transfer1$10[ebp], eax

; 3054 : 						transfer1last = true;

  002d3	c7 85 40 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _transfer1last$3[ebp], 1

; 3055 : 					}

  002dd	eb 24		 jmp	 SHORT $LN32@P_NightsTr
$LN30@P_NightsTr:

; 3056 : 					else if (mo2->health > transfer1->health)

  002df	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  002e2	8b 4d ec	 mov	 ecx, DWORD PTR _transfer1$10[ebp]
  002e5	8b 90 8c 00 00
	00		 mov	 edx, DWORD PTR [eax+140]
  002eb	3b 91 8c 00 00
	00		 cmp	 edx, DWORD PTR [ecx+140]
  002f1	7e 10		 jle	 SHORT $LN32@P_NightsTr

; 3057 : 					{
; 3058 : 						transfer1 = mo2;

  002f3	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  002f6	89 45 ec	 mov	 DWORD PTR _transfer1$10[ebp], eax

; 3059 : 						transfer1last = true;

  002f9	c7 85 40 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _transfer1last$3[ebp], 1
$LN32@P_NightsTr:

; 3060 : 					}
; 3061 : 				}
; 3062 : 			}

  00303	e9 5f ff ff ff	 jmp	 $LN5@P_NightsTr
$LN6@P_NightsTr:

; 3063 : 		}
; 3064 : 		if (!transfer2)

  00308	83 7d e8 00	 cmp	 DWORD PTR _transfer2$9[ebp], 0
  0030c	0f 85 ab 00 00
	00		 jne	 $LN9@P_NightsTr

; 3065 : 		{
; 3066 : 			for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00312	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00317	89 45 dc	 mov	 DWORD PTR _th$6[ebp], eax
  0031a	eb 09		 jmp	 SHORT $LN10@P_NightsTr
$LN8@P_NightsTr:
  0031c	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  0031f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00322	89 4d dc	 mov	 DWORD PTR _th$6[ebp], ecx
$LN10@P_NightsTr:
  00325	81 7d dc 00 00
	00 00		 cmp	 DWORD PTR _th$6[ebp], OFFSET _thinkercap
  0032c	0f 84 8b 00 00
	00		 je	 $LN9@P_NightsTr

; 3067 : 			{
; 3068 : 				if (th->function.acp1 != (actionf_p1)P_MobjThinker) // Not a mobj thinker

  00332	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  00335	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0033c	74 02		 je	 SHORT $LN34@P_NightsTr

; 3069 : 					continue;

  0033e	eb dc		 jmp	 SHORT $LN8@P_NightsTr
$LN34@P_NightsTr:

; 3070 : 
; 3071 : 				mo2 = (mobj_t *)th;

  00340	8b 45 dc	 mov	 eax, DWORD PTR _th$6[ebp]
  00343	89 45 e0	 mov	 DWORD PTR _mo2$7[ebp], eax

; 3072 : 
; 3073 : 				// Axis things are only at beginning of list.
; 3074 : 				if (!(mo2->flags2 & MF2_AXIS))

  00346	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00349	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0034f	83 e1 02	 and	 ecx, 2
  00352	75 02		 jne	 SHORT $LN35@P_NightsTr

; 3075 : 					break;

  00354	eb 67		 jmp	 SHORT $LN9@P_NightsTr
$LN35@P_NightsTr:

; 3076 : 
; 3077 : 				if (mo2->threshold == sequence && (mo2->type == MT_AXISTRANSFER || mo2->type == MT_AXISTRANSFERLINE))

  00356	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00359	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0035f	3b 4d f0	 cmp	 ecx, DWORD PTR _sequence$11[ebp]
  00362	75 54		 jne	 SHORT $LN40@P_NightsTr
  00364	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00367	81 78 7c f2 00
	00 00		 cmp	 DWORD PTR [eax+124], 242 ; 000000f2H
  0036e	74 0c		 je	 SHORT $LN37@P_NightsTr
  00370	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00373	81 78 7c f3 00
	00 00		 cmp	 DWORD PTR [eax+124], 243 ; 000000f3H
  0037a	75 3c		 jne	 SHORT $LN40@P_NightsTr
$LN37@P_NightsTr:

; 3078 : 				{
; 3079 : 					if (!transfer2)

  0037c	83 7d e8 00	 cmp	 DWORD PTR _transfer2$9[ebp], 0
  00380	75 12		 jne	 SHORT $LN38@P_NightsTr

; 3080 : 					{
; 3081 : 						transfer2 = mo2;

  00382	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00385	89 45 e8	 mov	 DWORD PTR _transfer2$9[ebp], eax

; 3082 : 						transfer2last = true;

  00388	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _transfer2last$2[ebp], 1

; 3083 : 					}

  00392	eb 24		 jmp	 SHORT $LN40@P_NightsTr
$LN38@P_NightsTr:

; 3084 : 					else if (mo2->health > transfer2->health)

  00394	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  00397	8b 4d e8	 mov	 ecx, DWORD PTR _transfer2$9[ebp]
  0039a	8b 90 8c 00 00
	00		 mov	 edx, DWORD PTR [eax+140]
  003a0	3b 91 8c 00 00
	00		 cmp	 edx, DWORD PTR [ecx+140]
  003a6	7e 10		 jle	 SHORT $LN40@P_NightsTr

; 3085 : 					{
; 3086 : 						transfer2 = mo2;

  003a8	8b 45 e0	 mov	 eax, DWORD PTR _mo2$7[ebp]
  003ab	89 45 e8	 mov	 DWORD PTR _transfer2$9[ebp], eax

; 3087 : 						transfer2last = true;

  003ae	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _transfer2last$2[ebp], 1
$LN40@P_NightsTr:

; 3088 : 					}
; 3089 : 				}
; 3090 : 			}

  003b8	e9 5f ff ff ff	 jmp	 $LN8@P_NightsTr
$LN9@P_NightsTr:

; 3091 : 		}
; 3092 : 
; 3093 : 		if (!(transfer1 && transfer2)) // We can't continue...

  003bd	83 7d ec 00	 cmp	 DWORD PTR _transfer1$10[ebp], 0
  003c1	74 06		 je	 SHORT $LN42@P_NightsTr
  003c3	83 7d e8 00	 cmp	 DWORD PTR _transfer2$9[ebp], 0
  003c7	75 0d		 jne	 SHORT $LN41@P_NightsTr
$LN42@P_NightsTr:

; 3094 : 			I_Error("Mare does not form a complete circuit!\n");

  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@GEOBGIFJ@Mare?5does?5not?5form?5a?5complete?5c@
  003ce	e8 00 00 00 00	 call	 _I_Error
  003d3	83 c4 04	 add	 esp, 4
$LN41@P_NightsTr:

; 3095 : 
; 3096 : 		transfer1line.v1 = &vertices[0];

  003d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003db	6b c8 00	 imul	 ecx, eax, 0
  003de	8d 94 0d 0c ff
	ff ff		 lea	 edx, DWORD PTR _vertices$1[ebp+ecx]
  003e5	89 55 90	 mov	 DWORD PTR _transfer1line$5[ebp], edx

; 3097 : 		transfer1line.v2 = &vertices[1];

  003e8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003ed	c1 e0 00	 shl	 eax, 0
  003f0	8d 8c 05 0c ff
	ff ff		 lea	 ecx, DWORD PTR _vertices$1[ebp+eax]
  003f7	89 4d 94	 mov	 DWORD PTR _transfer1line$5[ebp+4], ecx

; 3098 : 		transfer2line.v1 = &vertices[2];

  003fa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003ff	d1 e0		 shl	 eax, 1
  00401	8d 8c 05 0c ff
	ff ff		 lea	 ecx, DWORD PTR _vertices$1[ebp+eax]
  00408	89 8d 44 ff ff
	ff		 mov	 DWORD PTR _transfer2line$4[ebp], ecx

; 3099 : 		transfer2line.v2 = &vertices[3];

  0040e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00413	6b c8 03	 imul	 ecx, eax, 3
  00416	8d 94 0d 0c ff
	ff ff		 lea	 edx, DWORD PTR _vertices$1[ebp+ecx]
  0041d	89 95 48 ff ff
	ff		 mov	 DWORD PTR _transfer2line$4[ebp+4], edx

; 3100 : 
; 3101 : 		if (cv_debug && (leveltime % TICRATE == 0))

  00423	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0042a	74 40		 je	 SHORT $LN43@P_NightsTr
  0042c	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00431	33 d2		 xor	 edx, edx
  00433	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00438	f7 f1		 div	 ecx
  0043a	85 d2		 test	 edx, edx
  0043c	75 2e		 jne	 SHORT $LN43@P_NightsTr

; 3102 : 		{
; 3103 : 			CONS_Printf("Transfer1 : %d\n", transfer1->health);

  0043e	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  00441	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00447	51		 push	 ecx
  00448	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IGDIHNBH@Transfer1?5?3?5?$CFd?6@
  0044d	e8 00 00 00 00	 call	 _CONS_Printf
  00452	83 c4 08	 add	 esp, 8

; 3104 : 			CONS_Printf("Transfer2 : %d\n", transfer2->health);

  00455	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00458	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0045e	51		 push	 ecx
  0045f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ILHHKPE@Transfer2?5?3?5?$CFd?6@
  00464	e8 00 00 00 00	 call	 _CONS_Printf
  00469	83 c4 08	 add	 esp, 8
$LN43@P_NightsTr:

; 3105 : 		}
; 3106 : 
; 3107 : 		//CONS_Printf("T1 is at %d, %d\n", transfer1->x>>FRACBITS, transfer1->y>>FRACBITS);
; 3108 : 		//CONS_Printf("T2 is at %d, %d\n", transfer2->x>>FRACBITS, transfer2->y>>FRACBITS);
; 3109 : 		//CONS_Printf("Distance from T1: %d\n", P_AproxDistance(transfer1->x - player->mo->x, transfer1->y - player->mo->y)>>FRACBITS);
; 3110 : 		//CONS_Printf("Distance from T2: %d\n", P_AproxDistance(transfer2->x - player->mo->x, transfer2->y - player->mo->y)>>FRACBITS);
; 3111 : 
; 3112 : 		// Transfer1 is closer to the player than transfer2
; 3113 : 		if (P_AproxDistance(transfer1->x - player->mo->x, transfer1->y - player->mo->y)>>FRACBITS
; 3114 : 			< P_AproxDistance(transfer2->x - player->mo->x, transfer2->y - player->mo->y)>>FRACBITS)

  0046c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0046f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00471	8b 55 ec	 mov	 edx, DWORD PTR _transfer1$10[ebp]
  00474	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00477	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  0047a	50		 push	 eax
  0047b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0047e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00480	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  00483	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00486	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  00489	51		 push	 ecx
  0048a	e8 00 00 00 00	 call	 _P_AproxDistance
  0048f	83 c4 08	 add	 esp, 8
  00492	8b f0		 mov	 esi, eax
  00494	c1 fe 10	 sar	 esi, 16			; 00000010H
  00497	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0049a	8b 02		 mov	 eax, DWORD PTR [edx]
  0049c	8b 4d e8	 mov	 ecx, DWORD PTR _transfer2$9[ebp]
  0049f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004a2	2b 50 14	 sub	 edx, DWORD PTR [eax+20]
  004a5	52		 push	 edx
  004a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ab	8b 55 e8	 mov	 edx, DWORD PTR _transfer2$9[ebp]
  004ae	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004b1	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  004b4	50		 push	 eax
  004b5	e8 00 00 00 00	 call	 _P_AproxDistance
  004ba	83 c4 08	 add	 esp, 8
  004bd	c1 f8 10	 sar	 eax, 16			; 00000010H
  004c0	3b f0		 cmp	 esi, eax
  004c2	0f 8d 54 04 00
	00		 jge	 $LN44@P_NightsTr

; 3115 : 		{
; 3116 : 			if (transfer1->type == MT_AXISTRANSFERLINE)

  004c8	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  004cb	81 78 7c f3 00
	00 00		 cmp	 DWORD PTR [eax+124], 243 ; 000000f3H
  004d2	0f 85 42 02 00
	00		 jne	 $LN46@P_NightsTr

; 3117 : 			{
; 3118 : 				if (transfer1last)

  004d8	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _transfer1last$3[ebp], 0
  004df	74 24		 je	 SHORT $LN48@P_NightsTr

; 3119 : 					axis = P_FindAxis(transfer1->threshold, transfer1->health-2);

  004e1	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  004e4	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  004ea	83 e9 02	 sub	 ecx, 2
  004ed	51		 push	 ecx
  004ee	8b 55 ec	 mov	 edx, DWORD PTR _transfer1$10[ebp]
  004f1	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  004f7	50		 push	 eax
  004f8	e8 00 00 00 00	 call	 _P_FindAxis
  004fd	83 c4 08	 add	 esp, 8
  00500	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
  00503	eb 54		 jmp	 SHORT $LN51@P_NightsTr
$LN48@P_NightsTr:

; 3120 : 				else if (player->pflags & PF_TRANSFERTOCLOSEST)

  00505	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00508	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0050e	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  00514	74 24		 je	 SHORT $LN50@P_NightsTr

; 3121 : 					axis = P_FindAxis(transfer1->threshold, transfer1->health-1);

  00516	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  00519	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0051f	83 e9 01	 sub	 ecx, 1
  00522	51		 push	 ecx
  00523	8b 55 ec	 mov	 edx, DWORD PTR _transfer1$10[ebp]
  00526	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  0052c	50		 push	 eax
  0052d	e8 00 00 00 00	 call	 _P_FindAxis
  00532	83 c4 08	 add	 esp, 8
  00535	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
  00538	eb 1f		 jmp	 SHORT $LN51@P_NightsTr
$LN50@P_NightsTr:

; 3122 : 				else
; 3123 : 					axis = P_FindAxis(transfer1->threshold, transfer1->health);

  0053a	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  0053d	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00543	51		 push	 ecx
  00544	8b 55 ec	 mov	 edx, DWORD PTR _transfer1$10[ebp]
  00547	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  0054d	50		 push	 eax
  0054e	e8 00 00 00 00	 call	 _P_FindAxis
  00553	83 c4 08	 add	 esp, 8
  00556	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
$LN51@P_NightsTr:

; 3124 : 
; 3125 : 				if (!axis)

  00559	83 7d e4 00	 cmp	 DWORD PTR _axis$8[ebp], 0
  0055d	75 12		 jne	 SHORT $LN52@P_NightsTr

; 3126 : 				{
; 3127 : 					CONS_Printf("Unable to find an axis - error code #1\n");

  0055f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DMPCCDBO@Unable?5to?5find?5an?5axis?5?9?5error?5@
  00564	e8 00 00 00 00	 call	 _CONS_Printf
  00569	83 c4 04	 add	 esp, 4

; 3128 : 					return;

  0056c	e9 d0 08 00 00	 jmp	 $LN97@P_NightsTr
$LN52@P_NightsTr:

; 3129 : 				}
; 3130 : 
; 3131 : 				//CONS_Printf("Drawing a line from %d to ", axis->health);
; 3132 : 
; 3133 : 				transfer1line.v1->x = axis->x;

  00571	8b 45 90	 mov	 eax, DWORD PTR _transfer1line$5[ebp]
  00574	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  00577	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0057a	89 10		 mov	 DWORD PTR [eax], edx

; 3134 : 				transfer1line.v1->y = axis->y;

  0057c	8b 45 90	 mov	 eax, DWORD PTR _transfer1line$5[ebp]
  0057f	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  00582	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00585	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3135 : 
; 3136 : 				transfer1line.v2->x = transfer1->x;

  00588	8b 45 94	 mov	 eax, DWORD PTR _transfer1line$5[ebp+4]
  0058b	8b 4d ec	 mov	 ecx, DWORD PTR _transfer1$10[ebp]
  0058e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00591	89 10		 mov	 DWORD PTR [eax], edx

; 3137 : 				transfer1line.v2->y = transfer1->y;

  00593	8b 45 94	 mov	 eax, DWORD PTR _transfer1line$5[ebp+4]
  00596	8b 4d ec	 mov	 ecx, DWORD PTR _transfer1$10[ebp]
  00599	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0059c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3138 : 
; 3139 : 				if (cv_debug)

  0059f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  005a6	74 19		 je	 SHORT $LN53@P_NightsTr

; 3140 : 					P_ShootLine(axis, transfer1, player->mo->z);

  005a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  005ad	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  005b0	52		 push	 edx
  005b1	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  005b4	50		 push	 eax
  005b5	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  005b8	51		 push	 ecx
  005b9	e8 00 00 00 00	 call	 _P_ShootLine
  005be	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN53@P_NightsTr:

; 3141 : 
; 3142 : 				//CONS_Printf("closest %d\n", transfer1->health);
; 3143 : 
; 3144 : 				transfer1line.dx = transfer1line.v2->x - transfer1line.v1->x;

  005c1	8b 45 94	 mov	 eax, DWORD PTR _transfer1line$5[ebp+4]
  005c4	8b 4d 90	 mov	 ecx, DWORD PTR _transfer1line$5[ebp]
  005c7	8b 10		 mov	 edx, DWORD PTR [eax]
  005c9	2b 11		 sub	 edx, DWORD PTR [ecx]
  005cb	89 55 98	 mov	 DWORD PTR _transfer1line$5[ebp+8], edx

; 3145 : 				transfer1line.dy = transfer1line.v2->y - transfer1line.v1->y;

  005ce	8b 45 94	 mov	 eax, DWORD PTR _transfer1line$5[ebp+4]
  005d1	8b 4d 90	 mov	 ecx, DWORD PTR _transfer1line$5[ebp]
  005d4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  005d7	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  005da	89 55 9c	 mov	 DWORD PTR _transfer1line$5[ebp+12], edx

; 3146 : 
; 3147 : 				if (P_PointOnLineSide(player->mo->x, player->mo->y, &transfer1line)
; 3148 : 						!= P_PointOnLineSide(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, &transfer1line))

  005dd	8d 45 90	 lea	 eax, DWORD PTR _transfer1line$5[ebp]
  005e0	50		 push	 eax
  005e1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  005e6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  005e9	50		 push	 eax
  005ea	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  005ef	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005f2	50		 push	 eax
  005f3	e8 00 00 00 00	 call	 _P_PointOnLineSide
  005f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  005fb	8b f0		 mov	 esi, eax
  005fd	8d 4d 90	 lea	 ecx, DWORD PTR _transfer1line$5[ebp]
  00600	51		 push	 ecx
  00601	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00604	8b 02		 mov	 eax, DWORD PTR [edx]
  00606	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00609	8b 11		 mov	 edx, DWORD PTR [ecx]
  0060b	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0060e	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  00611	50		 push	 eax
  00612	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00615	8b 11		 mov	 edx, DWORD PTR [ecx]
  00617	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0061a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0061c	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  0061f	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  00622	52		 push	 edx
  00623	e8 00 00 00 00	 call	 _P_PointOnLineSide
  00628	83 c4 0c	 add	 esp, 12			; 0000000cH
  0062b	3b f0		 cmp	 esi, eax
  0062d	0f 84 e2 00 00
	00		 je	 $LN57@P_NightsTr

; 3149 : 				{
; 3150 : 					if (cv_debug)

  00633	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0063a	74 30		 je	 SHORT $LN55@P_NightsTr

; 3151 : 					{
; 3152 : 						HU_SetCEchoDuration(1);

  0063c	6a 01		 push	 1
  0063e	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00643	83 c4 04	 add	 esp, 4

; 3153 : 						HU_DoCEcho("transfer!");

  00646	68 00 00 00 00	 push	 OFFSET ??_C@_09LGJMJNML@transfer?$CB@
  0064b	e8 00 00 00 00	 call	 _HU_DoCEcho
  00650	83 c4 04	 add	 esp, 4

; 3154 : 						HU_SetCEchoDuration(5);

  00653	6a 05		 push	 5
  00655	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  0065a	83 c4 04	 add	 esp, 4

; 3155 : 						S_StartSound(NULL, sfx_strpst);

  0065d	68 dd 00 00 00	 push	 221			; 000000ddH
  00662	6a 00		 push	 0
  00664	e8 00 00 00 00	 call	 _S_StartSound
  00669	83 c4 08	 add	 esp, 8
$LN55@P_NightsTr:

; 3156 : 					}
; 3157 : 					if (player->pflags & PF_TRANSFERTOCLOSEST)

  0066c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0066f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00675	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  0067b	74 33		 je	 SHORT $LN56@P_NightsTr

; 3158 : 					{
; 3159 : 						player->pflags &= ~PF_TRANSFERTOCLOSEST;

  0067d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00680	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00686	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  0068c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0068f	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3160 : 						P_TransferToAxis(player, transfer1->health - 1);

  00695	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  00698	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0069e	83 e9 01	 sub	 ecx, 1
  006a1	51		 push	 ecx
  006a2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006a5	52		 push	 edx
  006a6	e8 00 00 00 00	 call	 _P_TransferToAxis
  006ab	83 c4 08	 add	 esp, 8

; 3161 : 					}

  006ae	eb 65		 jmp	 SHORT $LN57@P_NightsTr
$LN56@P_NightsTr:

; 3162 : 					else
; 3163 : 					{
; 3164 : 						player->pflags |= PF_TRANSFERTOCLOSEST;

  006b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006b3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006b9	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  006bf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006c2	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3165 : 						P_SetTarget(&player->axis2, transfer1);

  006c8	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  006cb	50		 push	 eax
  006cc	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  006cf	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  006d5	51		 push	 ecx
  006d6	e8 00 00 00 00	 call	 _P_SetTarget
  006db	83 c4 08	 add	 esp, 8

; 3166 : 						P_SetTarget(&player->axis1, P_FindAxisTransfer(transfer1->threshold, transfer1->health-1, MT_AXISTRANSFERLINE));//P_FindAxis(transfer1->threshold, axis->health-2);

  006de	68 f3 00 00 00	 push	 243			; 000000f3H
  006e3	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  006e6	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  006ec	83 e9 01	 sub	 ecx, 1
  006ef	51		 push	 ecx
  006f0	8b 55 ec	 mov	 edx, DWORD PTR _transfer1$10[ebp]
  006f3	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  006f9	50		 push	 eax
  006fa	e8 00 00 00 00	 call	 _P_FindAxisTransfer
  006ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00702	50		 push	 eax
  00703	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00706	81 c1 a4 01 00
	00		 add	 ecx, 420		; 000001a4H
  0070c	51		 push	 ecx
  0070d	e8 00 00 00 00	 call	 _P_SetTarget
  00712	83 c4 08	 add	 esp, 8
$LN57@P_NightsTr:

; 3167 : 					}
; 3168 : 				}
; 3169 : 			}

  00715	e9 fd 01 00 00	 jmp	 $LN68@P_NightsTr
$LN46@P_NightsTr:

; 3170 : 			else
; 3171 : 			{
; 3172 : 				// Transfer1
; 3173 : 				if (transfer1last)

  0071a	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _transfer1last$3[ebp], 0
  00721	74 19		 je	 SHORT $LN58@P_NightsTr

; 3174 : 					axis = P_FindAxis(transfer1->threshold, 1);

  00723	6a 01		 push	 1
  00725	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  00728	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0072e	51		 push	 ecx
  0072f	e8 00 00 00 00	 call	 _P_FindAxis
  00734	83 c4 08	 add	 esp, 8
  00737	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
  0073a	eb 1f		 jmp	 SHORT $LN59@P_NightsTr
$LN58@P_NightsTr:

; 3175 : 				else
; 3176 : 					axis = P_FindAxis(transfer1->threshold, transfer1->health);

  0073c	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  0073f	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00745	51		 push	 ecx
  00746	8b 55 ec	 mov	 edx, DWORD PTR _transfer1$10[ebp]
  00749	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  0074f	50		 push	 eax
  00750	e8 00 00 00 00	 call	 _P_FindAxis
  00755	83 c4 08	 add	 esp, 8
  00758	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
$LN59@P_NightsTr:

; 3177 : 
; 3178 : 				if (!axis)

  0075b	83 7d e4 00	 cmp	 DWORD PTR _axis$8[ebp], 0
  0075f	75 12		 jne	 SHORT $LN60@P_NightsTr

; 3179 : 				{
; 3180 : 					CONS_Printf("Unable to find an axis - error code #2\n");

  00761	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DOLEJNEH@Unable?5to?5find?5an?5axis?5?9?5error?5@
  00766	e8 00 00 00 00	 call	 _CONS_Printf
  0076b	83 c4 04	 add	 esp, 4

; 3181 : 					return;

  0076e	e9 ce 06 00 00	 jmp	 $LN97@P_NightsTr
$LN60@P_NightsTr:

; 3182 : 				}
; 3183 : 
; 3184 : 				//CONS_Printf("Drawing a line from %d to ", axis->health);
; 3185 : 
; 3186 : 				transfer1line.v1->x = axis->x;

  00773	8b 45 90	 mov	 eax, DWORD PTR _transfer1line$5[ebp]
  00776	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  00779	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0077c	89 10		 mov	 DWORD PTR [eax], edx

; 3187 : 				transfer1line.v1->y = axis->y;

  0077e	8b 45 90	 mov	 eax, DWORD PTR _transfer1line$5[ebp]
  00781	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  00784	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00787	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3188 : 
; 3189 : 				if (cv_debug)

  0078a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00791	74 35		 je	 SHORT $LN61@P_NightsTr

; 3190 : 					P_ShootLine(transfer1, P_FindAxis(transfer1->threshold, transfer1->health-1), player->mo->z);

  00793	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00796	8b 08		 mov	 ecx, DWORD PTR [eax]
  00798	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0079b	52		 push	 edx
  0079c	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  0079f	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  007a5	83 e9 01	 sub	 ecx, 1
  007a8	51		 push	 ecx
  007a9	8b 55 ec	 mov	 edx, DWORD PTR _transfer1$10[ebp]
  007ac	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  007b2	50		 push	 eax
  007b3	e8 00 00 00 00	 call	 _P_FindAxis
  007b8	83 c4 08	 add	 esp, 8
  007bb	50		 push	 eax
  007bc	8b 4d ec	 mov	 ecx, DWORD PTR _transfer1$10[ebp]
  007bf	51		 push	 ecx
  007c0	e8 00 00 00 00	 call	 _P_ShootLine
  007c5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN61@P_NightsTr:

; 3191 : 
; 3192 : 				//axis = P_FindAxis(transfer1->threshold, transfer1->health-1);
; 3193 : 
; 3194 : 				//CONS_Printf("%d\n", axis->health);
; 3195 : 
; 3196 : 				transfer1line.v2->x = transfer1->x;

  007c8	8b 45 94	 mov	 eax, DWORD PTR _transfer1line$5[ebp+4]
  007cb	8b 4d ec	 mov	 ecx, DWORD PTR _transfer1$10[ebp]
  007ce	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  007d1	89 10		 mov	 DWORD PTR [eax], edx

; 3197 : 				transfer1line.v2->y = transfer1->y;

  007d3	8b 45 94	 mov	 eax, DWORD PTR _transfer1line$5[ebp+4]
  007d6	8b 4d ec	 mov	 ecx, DWORD PTR _transfer1$10[ebp]
  007d9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  007dc	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3198 : 
; 3199 : 				transfer1line.dx = transfer1line.v2->x - transfer1line.v1->x;

  007df	8b 45 94	 mov	 eax, DWORD PTR _transfer1line$5[ebp+4]
  007e2	8b 4d 90	 mov	 ecx, DWORD PTR _transfer1line$5[ebp]
  007e5	8b 10		 mov	 edx, DWORD PTR [eax]
  007e7	2b 11		 sub	 edx, DWORD PTR [ecx]
  007e9	89 55 98	 mov	 DWORD PTR _transfer1line$5[ebp+8], edx

; 3200 : 				transfer1line.dy = transfer1line.v2->y - transfer1line.v1->y;

  007ec	8b 45 94	 mov	 eax, DWORD PTR _transfer1line$5[ebp+4]
  007ef	8b 4d 90	 mov	 ecx, DWORD PTR _transfer1line$5[ebp]
  007f2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  007f5	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  007f8	89 55 9c	 mov	 DWORD PTR _transfer1line$5[ebp+12], edx

; 3201 : 
; 3202 : 				if (P_PointOnLineSide(player->mo->x, player->mo->y, &transfer1line)
; 3203 : 					!= P_PointOnLineSide(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, &transfer1line))

  007fb	8d 45 90	 lea	 eax, DWORD PTR _transfer1line$5[ebp]
  007fe	50		 push	 eax
  007ff	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00802	8b 11		 mov	 edx, DWORD PTR [ecx]
  00804	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00807	50		 push	 eax
  00808	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0080b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0080d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00810	50		 push	 eax
  00811	e8 00 00 00 00	 call	 _P_PointOnLineSide
  00816	83 c4 0c	 add	 esp, 12			; 0000000cH
  00819	8b f0		 mov	 esi, eax
  0081b	8d 4d 90	 lea	 ecx, DWORD PTR _transfer1line$5[ebp]
  0081e	51		 push	 ecx
  0081f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00822	8b 02		 mov	 eax, DWORD PTR [edx]
  00824	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00827	8b 11		 mov	 edx, DWORD PTR [ecx]
  00829	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0082c	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  0082f	50		 push	 eax
  00830	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00833	8b 11		 mov	 edx, DWORD PTR [ecx]
  00835	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00838	8b 08		 mov	 ecx, DWORD PTR [eax]
  0083a	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  0083d	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  00840	52		 push	 edx
  00841	e8 00 00 00 00	 call	 _P_PointOnLineSide
  00846	83 c4 0c	 add	 esp, 12			; 0000000cH
  00849	3b f0		 cmp	 esi, eax
  0084b	0f 84 c6 00 00
	00		 je	 $LN68@P_NightsTr

; 3204 : 				{
; 3205 : 					if (cv_debug)

  00851	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00858	74 30		 je	 SHORT $LN63@P_NightsTr

; 3206 : 					{
; 3207 : 						HU_SetCEchoDuration(1);

  0085a	6a 01		 push	 1
  0085c	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00861	83 c4 04	 add	 esp, 4

; 3208 : 						HU_DoCEcho("transfer!");

  00864	68 00 00 00 00	 push	 OFFSET ??_C@_09LGJMJNML@transfer?$CB@
  00869	e8 00 00 00 00	 call	 _HU_DoCEcho
  0086e	83 c4 04	 add	 esp, 4

; 3209 : 						HU_SetCEchoDuration(5);

  00871	6a 05		 push	 5
  00873	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00878	83 c4 04	 add	 esp, 4

; 3210 : 						S_StartSound(NULL, sfx_strpst);

  0087b	68 dd 00 00 00	 push	 221			; 000000ddH
  00880	6a 00		 push	 0
  00882	e8 00 00 00 00	 call	 _S_StartSound
  00887	83 c4 08	 add	 esp, 8
$LN63@P_NightsTr:

; 3211 : 					}
; 3212 : 					if (player->mo->target->health < transfer1->health)

  0088a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0088d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0088f	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00895	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  00898	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  0089e	3b 88 8c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+140]
  008a4	7d 3c		 jge	 SHORT $LN64@P_NightsTr

; 3213 : 					{
; 3214 : 						// Find the next axis with a ->health
; 3215 : 						// +1 from the current axis.
; 3216 : 						if (transfer1last)

  008a6	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _transfer1last$3[ebp], 0
  008ad	74 1b		 je	 SHORT $LN66@P_NightsTr

; 3217 : 							P_TransferToAxis(player, transfer1->health - 1);

  008af	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  008b2	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  008b8	83 e9 01	 sub	 ecx, 1
  008bb	51		 push	 ecx
  008bc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008bf	52		 push	 edx
  008c0	e8 00 00 00 00	 call	 _P_TransferToAxis
  008c5	83 c4 08	 add	 esp, 8
  008c8	eb 16		 jmp	 SHORT $LN67@P_NightsTr
$LN66@P_NightsTr:

; 3218 : 						else
; 3219 : 							P_TransferToAxis(player, transfer1->health);

  008ca	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  008cd	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  008d3	51		 push	 ecx
  008d4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008d7	52		 push	 edx
  008d8	e8 00 00 00 00	 call	 _P_TransferToAxis
  008dd	83 c4 08	 add	 esp, 8
$LN67@P_NightsTr:

; 3220 : 					}

  008e0	eb 35		 jmp	 SHORT $LN68@P_NightsTr
$LN64@P_NightsTr:

; 3221 : 					else if (player->mo->target->health >= transfer1->health)

  008e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  008e7	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  008ed	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  008f0	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  008f6	3b 88 8c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+140]
  008fc	7c 19		 jl	 SHORT $LN68@P_NightsTr

; 3222 : 					{
; 3223 : 						// Find the next axis with a ->health
; 3224 : 						// -1 from the current axis.
; 3225 : 						P_TransferToAxis(player, transfer1->health - 1);

  008fe	8b 45 ec	 mov	 eax, DWORD PTR _transfer1$10[ebp]
  00901	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00907	83 e9 01	 sub	 ecx, 1
  0090a	51		 push	 ecx
  0090b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0090e	52		 push	 edx
  0090f	e8 00 00 00 00	 call	 _P_TransferToAxis
  00914	83 c4 08	 add	 esp, 8
$LN68@P_NightsTr:

; 3226 : 					}
; 3227 : 				}
; 3228 : 			}
; 3229 : 		}

  00917	e9 25 05 00 00	 jmp	 $LN97@P_NightsTr
$LN44@P_NightsTr:

; 3230 : 		else
; 3231 : 		{
; 3232 : 			if (transfer2->type == MT_AXISTRANSFERLINE)

  0091c	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  0091f	81 78 7c f3 00
	00 00		 cmp	 DWORD PTR [eax+124], 243 ; 000000f3H
  00926	0f 85 b8 02 00
	00		 jne	 $LN69@P_NightsTr

; 3233 : 			{
; 3234 : 				if (transfer2last)

  0092c	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _transfer2last$2[ebp], 0
  00933	74 19		 je	 SHORT $LN71@P_NightsTr

; 3235 : 					axis = P_FindAxis(transfer2->threshold, 1);

  00935	6a 01		 push	 1
  00937	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  0093a	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00940	51		 push	 ecx
  00941	e8 00 00 00 00	 call	 _P_FindAxis
  00946	83 c4 08	 add	 esp, 8
  00949	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
  0094c	eb 54		 jmp	 SHORT $LN74@P_NightsTr
$LN71@P_NightsTr:

; 3236 : 				else if (player->pflags & PF_TRANSFERTOCLOSEST)

  0094e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00951	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00957	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  0095d	74 21		 je	 SHORT $LN73@P_NightsTr

; 3237 : 					axis = P_FindAxis(transfer2->threshold, transfer2->health);

  0095f	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00962	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00968	51		 push	 ecx
  00969	8b 55 e8	 mov	 edx, DWORD PTR _transfer2$9[ebp]
  0096c	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00972	50		 push	 eax
  00973	e8 00 00 00 00	 call	 _P_FindAxis
  00978	83 c4 08	 add	 esp, 8
  0097b	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
  0097e	eb 22		 jmp	 SHORT $LN74@P_NightsTr
$LN73@P_NightsTr:

; 3238 : 				else
; 3239 : 					axis = P_FindAxis(transfer2->threshold, transfer2->health - 1);

  00980	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00983	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00989	83 e9 01	 sub	 ecx, 1
  0098c	51		 push	 ecx
  0098d	8b 55 e8	 mov	 edx, DWORD PTR _transfer2$9[ebp]
  00990	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00996	50		 push	 eax
  00997	e8 00 00 00 00	 call	 _P_FindAxis
  0099c	83 c4 08	 add	 esp, 8
  0099f	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
$LN74@P_NightsTr:

; 3240 : 
; 3241 : 				if (!axis)

  009a2	83 7d e4 00	 cmp	 DWORD PTR _axis$8[ebp], 0
  009a6	75 17		 jne	 SHORT $LN75@P_NightsTr

; 3242 : 					axis = P_FindAxis(transfer2->threshold, 1);

  009a8	6a 01		 push	 1
  009aa	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  009ad	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  009b3	51		 push	 ecx
  009b4	e8 00 00 00 00	 call	 _P_FindAxis
  009b9	83 c4 08	 add	 esp, 8
  009bc	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
$LN75@P_NightsTr:

; 3243 : 
; 3244 : 				if (!axis)

  009bf	83 7d e4 00	 cmp	 DWORD PTR _axis$8[ebp], 0
  009c3	75 12		 jne	 SHORT $LN76@P_NightsTr

; 3245 : 				{
; 3246 : 					CONS_Printf("Unable to find an axis - error code #3\n");

  009c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DPHGPHHA@Unable?5to?5find?5an?5axis?5?9?5error?5@
  009ca	e8 00 00 00 00	 call	 _CONS_Printf
  009cf	83 c4 04	 add	 esp, 4

; 3247 : 					return;

  009d2	e9 6a 04 00 00	 jmp	 $LN97@P_NightsTr
$LN76@P_NightsTr:

; 3248 : 				}
; 3249 : 
; 3250 : 				//CONS_Printf("Drawing a line from %d to ", axis->health);
; 3251 : 
; 3252 : 				transfer2line.v1->x = axis->x;

  009d7	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp]
  009dd	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  009e0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  009e3	89 10		 mov	 DWORD PTR [eax], edx

; 3253 : 				transfer2line.v1->y = axis->y;

  009e5	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp]
  009eb	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  009ee	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  009f1	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3254 : 
; 3255 : 				transfer2line.v2->x = transfer2->x;

  009f4	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp+4]
  009fa	8b 4d e8	 mov	 ecx, DWORD PTR _transfer2$9[ebp]
  009fd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00a00	89 10		 mov	 DWORD PTR [eax], edx

; 3256 : 				transfer2line.v2->y = transfer2->y;

  00a02	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp+4]
  00a08	8b 4d e8	 mov	 ecx, DWORD PTR _transfer2$9[ebp]
  00a0b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00a0e	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3257 : 
; 3258 : 				//CONS_Printf("closest %d\n", transfer2->health);
; 3259 : 
; 3260 : 				if (cv_debug)

  00a11	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00a18	74 19		 je	 SHORT $LN77@P_NightsTr

; 3261 : 					P_ShootLine(axis, transfer2, player->mo->z);

  00a1a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a1d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a1f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00a22	52		 push	 edx
  00a23	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00a26	50		 push	 eax
  00a27	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  00a2a	51		 push	 ecx
  00a2b	e8 00 00 00 00	 call	 _P_ShootLine
  00a30	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN77@P_NightsTr:

; 3262 : 
; 3263 : 				transfer2line.dx = transfer2line.v2->x - transfer2line.v1->x;

  00a33	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp+4]
  00a39	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _transfer2line$4[ebp]
  00a3f	8b 10		 mov	 edx, DWORD PTR [eax]
  00a41	2b 11		 sub	 edx, DWORD PTR [ecx]
  00a43	89 95 4c ff ff
	ff		 mov	 DWORD PTR _transfer2line$4[ebp+8], edx

; 3264 : 				transfer2line.dy = transfer2line.v2->y - transfer2line.v1->y;

  00a49	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp+4]
  00a4f	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _transfer2line$4[ebp]
  00a55	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00a58	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00a5b	89 95 50 ff ff
	ff		 mov	 DWORD PTR _transfer2line$4[ebp+12], edx

; 3265 : 
; 3266 : 				if (P_PointOnLineSide(player->mo->x, player->mo->y, &transfer2line)
; 3267 : 						!= P_PointOnLineSide(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, &transfer2line))

  00a61	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _transfer2line$4[ebp]
  00a67	50		 push	 eax
  00a68	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a6b	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a6d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a70	50		 push	 eax
  00a71	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a74	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a76	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00a79	50		 push	 eax
  00a7a	e8 00 00 00 00	 call	 _P_PointOnLineSide
  00a7f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a82	8b f0		 mov	 esi, eax
  00a84	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _transfer2line$4[ebp]
  00a8a	51		 push	 ecx
  00a8b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a8e	8b 02		 mov	 eax, DWORD PTR [edx]
  00a90	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a93	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a95	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00a98	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  00a9b	50		 push	 eax
  00a9c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a9f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00aa1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00aa4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00aa6	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00aa9	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  00aac	52		 push	 edx
  00aad	e8 00 00 00 00	 call	 _P_PointOnLineSide
  00ab2	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ab5	3b f0		 cmp	 esi, eax
  00ab7	0f 84 22 01 00
	00		 je	 $LN81@P_NightsTr

; 3268 : 				{
; 3269 : 					if (cv_debug)

  00abd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00ac4	74 30		 je	 SHORT $LN79@P_NightsTr

; 3270 : 					{
; 3271 : 						HU_SetCEchoDuration(1);

  00ac6	6a 01		 push	 1
  00ac8	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00acd	83 c4 04	 add	 esp, 4

; 3272 : 						HU_DoCEcho("transfer!");

  00ad0	68 00 00 00 00	 push	 OFFSET ??_C@_09LGJMJNML@transfer?$CB@
  00ad5	e8 00 00 00 00	 call	 _HU_DoCEcho
  00ada	83 c4 04	 add	 esp, 4

; 3273 : 						HU_SetCEchoDuration(5);

  00add	6a 05		 push	 5
  00adf	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00ae4	83 c4 04	 add	 esp, 4

; 3274 : 						S_StartSound(NULL, sfx_strpst);

  00ae7	68 dd 00 00 00	 push	 221			; 000000ddH
  00aec	6a 00		 push	 0
  00aee	e8 00 00 00 00	 call	 _S_StartSound
  00af3	83 c4 08	 add	 esp, 8
$LN79@P_NightsTr:

; 3275 : 					}
; 3276 : 					if (player->pflags & PF_TRANSFERTOCLOSEST)

  00af6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00af9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00aff	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  00b05	74 73		 je	 SHORT $LN80@P_NightsTr

; 3277 : 					{
; 3278 : 						player->pflags &= ~PF_TRANSFERTOCLOSEST;

  00b07	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b0a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00b10	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  00b16	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b19	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3279 : 
; 3280 : 						if (!P_FindAxis(transfer2->threshold, transfer2->health))

  00b1f	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00b22	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00b28	51		 push	 ecx
  00b29	8b 55 e8	 mov	 edx, DWORD PTR _transfer2$9[ebp]
  00b2c	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00b32	50		 push	 eax
  00b33	e8 00 00 00 00	 call	 _P_FindAxis
  00b38	83 c4 08	 add	 esp, 8
  00b3b	85 c0		 test	 eax, eax
  00b3d	75 0a		 jne	 SHORT $LN82@P_NightsTr

; 3281 : 							transfer2last = true;

  00b3f	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _transfer2last$2[ebp], 1
$LN82@P_NightsTr:

; 3282 : 
; 3283 : 						if (transfer2last)

  00b49	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _transfer2last$2[ebp], 0
  00b50	74 10		 je	 SHORT $LN83@P_NightsTr

; 3284 : 							P_TransferToAxis(player, 1);

  00b52	6a 01		 push	 1
  00b54	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b57	50		 push	 eax
  00b58	e8 00 00 00 00	 call	 _P_TransferToAxis
  00b5d	83 c4 08	 add	 esp, 8
  00b60	eb 16		 jmp	 SHORT $LN84@P_NightsTr
$LN83@P_NightsTr:

; 3285 : 						else
; 3286 : 							P_TransferToAxis(player, transfer2->health);

  00b62	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00b65	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00b6b	51		 push	 ecx
  00b6c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b6f	52		 push	 edx
  00b70	e8 00 00 00 00	 call	 _P_TransferToAxis
  00b75	83 c4 08	 add	 esp, 8
$LN84@P_NightsTr:

; 3287 : 					}

  00b78	eb 65		 jmp	 SHORT $LN81@P_NightsTr
$LN80@P_NightsTr:

; 3288 : 					else
; 3289 : 					{
; 3290 : 						player->pflags |= PF_TRANSFERTOCLOSEST;

  00b7a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b7d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00b83	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  00b89	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b8c	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3291 : 						P_SetTarget(&player->axis1, transfer2);

  00b92	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00b95	50		 push	 eax
  00b96	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b99	81 c1 a4 01 00
	00		 add	 ecx, 420		; 000001a4H
  00b9f	51		 push	 ecx
  00ba0	e8 00 00 00 00	 call	 _P_SetTarget
  00ba5	83 c4 08	 add	 esp, 8

; 3292 : 						P_SetTarget(&player->axis2, P_FindAxisTransfer(transfer2->threshold, transfer2->health+1, MT_AXISTRANSFERLINE));//P_FindAxis(transfer2->threshold, axis->health + 2);

  00ba8	68 f3 00 00 00	 push	 243			; 000000f3H
  00bad	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00bb0	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00bb6	83 c1 01	 add	 ecx, 1
  00bb9	51		 push	 ecx
  00bba	8b 55 e8	 mov	 edx, DWORD PTR _transfer2$9[ebp]
  00bbd	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00bc3	50		 push	 eax
  00bc4	e8 00 00 00 00	 call	 _P_FindAxisTransfer
  00bc9	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bcc	50		 push	 eax
  00bcd	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00bd0	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  00bd6	51		 push	 ecx
  00bd7	e8 00 00 00 00	 call	 _P_SetTarget
  00bdc	83 c4 08	 add	 esp, 8
$LN81@P_NightsTr:

; 3293 : 					}
; 3294 : 				}
; 3295 : 			}

  00bdf	e9 5d 02 00 00	 jmp	 $LN97@P_NightsTr
$LN69@P_NightsTr:

; 3296 : 			else
; 3297 : 			{
; 3298 : 				// Transfer2
; 3299 : 				if (transfer2last)

  00be4	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _transfer2last$2[ebp], 0
  00beb	74 19		 je	 SHORT $LN85@P_NightsTr

; 3300 : 					axis = P_FindAxis(transfer2->threshold, 1);

  00bed	6a 01		 push	 1
  00bef	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00bf2	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00bf8	51		 push	 ecx
  00bf9	e8 00 00 00 00	 call	 _P_FindAxis
  00bfe	83 c4 08	 add	 esp, 8
  00c01	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
  00c04	eb 1f		 jmp	 SHORT $LN86@P_NightsTr
$LN85@P_NightsTr:

; 3301 : 				else
; 3302 : 					axis = P_FindAxis(transfer2->threshold, transfer2->health);

  00c06	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00c09	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00c0f	51		 push	 ecx
  00c10	8b 55 e8	 mov	 edx, DWORD PTR _transfer2$9[ebp]
  00c13	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00c19	50		 push	 eax
  00c1a	e8 00 00 00 00	 call	 _P_FindAxis
  00c1f	83 c4 08	 add	 esp, 8
  00c22	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
$LN86@P_NightsTr:

; 3303 : 
; 3304 : 				if (!axis)

  00c25	83 7d e4 00	 cmp	 DWORD PTR _axis$8[ebp], 0
  00c29	75 17		 jne	 SHORT $LN87@P_NightsTr

; 3305 : 					axis = P_FindAxis(transfer2->threshold, 1);

  00c2b	6a 01		 push	 1
  00c2d	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00c30	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00c36	51		 push	 ecx
  00c37	e8 00 00 00 00	 call	 _P_FindAxis
  00c3c	83 c4 08	 add	 esp, 8
  00c3f	89 45 e4	 mov	 DWORD PTR _axis$8[ebp], eax
$LN87@P_NightsTr:

; 3306 : 
; 3307 : 				if (!axis)

  00c42	83 7d e4 00	 cmp	 DWORD PTR _axis$8[ebp], 0
  00c46	75 12		 jne	 SHORT $LN88@P_NightsTr

; 3308 : 				{
; 3309 : 					CONS_Printf("Unable to find an axis - error code #4\n");

  00c48	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DKDJOBPF@Unable?5to?5find?5an?5axis?5?9?5error?5@
  00c4d	e8 00 00 00 00	 call	 _CONS_Printf
  00c52	83 c4 04	 add	 esp, 4

; 3310 : 					return;

  00c55	e9 e7 01 00 00	 jmp	 $LN97@P_NightsTr
$LN88@P_NightsTr:

; 3311 : 				}
; 3312 : 
; 3313 : 				//CONS_Printf("Drawing a line from %d to ", axis->health);
; 3314 : 
; 3315 : 				transfer2line.v1->x = axis->x;

  00c5a	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp]
  00c60	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  00c63	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00c66	89 10		 mov	 DWORD PTR [eax], edx

; 3316 : 				transfer2line.v1->y = axis->y;

  00c68	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp]
  00c6e	8b 4d e4	 mov	 ecx, DWORD PTR _axis$8[ebp]
  00c71	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00c74	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3317 : 
; 3318 : 				if (cv_debug)

  00c77	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00c7e	74 35		 je	 SHORT $LN89@P_NightsTr

; 3319 : 					P_ShootLine(transfer2, P_FindAxis(transfer2->threshold, transfer2->health-1), player->mo->z);

  00c80	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c83	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c85	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00c88	52		 push	 edx
  00c89	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00c8c	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00c92	83 e9 01	 sub	 ecx, 1
  00c95	51		 push	 ecx
  00c96	8b 55 e8	 mov	 edx, DWORD PTR _transfer2$9[ebp]
  00c99	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00c9f	50		 push	 eax
  00ca0	e8 00 00 00 00	 call	 _P_FindAxis
  00ca5	83 c4 08	 add	 esp, 8
  00ca8	50		 push	 eax
  00ca9	8b 4d e8	 mov	 ecx, DWORD PTR _transfer2$9[ebp]
  00cac	51		 push	 ecx
  00cad	e8 00 00 00 00	 call	 _P_ShootLine
  00cb2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN89@P_NightsTr:

; 3320 : 
; 3321 : 				//axis = P_FindAxis(transfer2->threshold, transfer2->health-1);
; 3322 : 
; 3323 : 				//CONS_Printf("%d\n", axis->health);
; 3324 : 
; 3325 : 				transfer2line.v2->x = transfer2->x;

  00cb5	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp+4]
  00cbb	8b 4d e8	 mov	 ecx, DWORD PTR _transfer2$9[ebp]
  00cbe	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00cc1	89 10		 mov	 DWORD PTR [eax], edx

; 3326 : 				transfer2line.v2->y = transfer2->y;

  00cc3	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp+4]
  00cc9	8b 4d e8	 mov	 ecx, DWORD PTR _transfer2$9[ebp]
  00ccc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00ccf	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3327 : 
; 3328 : 				transfer2line.dx = transfer2line.v2->x - transfer2line.v1->x;

  00cd2	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp+4]
  00cd8	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _transfer2line$4[ebp]
  00cde	8b 10		 mov	 edx, DWORD PTR [eax]
  00ce0	2b 11		 sub	 edx, DWORD PTR [ecx]
  00ce2	89 95 4c ff ff
	ff		 mov	 DWORD PTR _transfer2line$4[ebp+8], edx

; 3329 : 				transfer2line.dy = transfer2line.v2->y - transfer2line.v1->y;

  00ce8	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _transfer2line$4[ebp+4]
  00cee	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _transfer2line$4[ebp]
  00cf4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00cf7	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00cfa	89 95 50 ff ff
	ff		 mov	 DWORD PTR _transfer2line$4[ebp+12], edx

; 3330 : 
; 3331 : 				if (P_PointOnLineSide(player->mo->x, player->mo->y, &transfer2line)
; 3332 : 					!= P_PointOnLineSide(player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, &transfer2line))

  00d00	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _transfer2line$4[ebp]
  00d06	50		 push	 eax
  00d07	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d0a	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d0c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00d0f	50		 push	 eax
  00d10	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d13	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d15	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00d18	50		 push	 eax
  00d19	e8 00 00 00 00	 call	 _P_PointOnLineSide
  00d1e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d21	8b f0		 mov	 esi, eax
  00d23	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _transfer2line$4[ebp]
  00d29	51		 push	 ecx
  00d2a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d2d	8b 02		 mov	 eax, DWORD PTR [edx]
  00d2f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d32	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d34	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00d37	03 42 4c	 add	 eax, DWORD PTR [edx+76]
  00d3a	50		 push	 eax
  00d3b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d3e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d40	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d43	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d45	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00d48	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  00d4b	52		 push	 edx
  00d4c	e8 00 00 00 00	 call	 _P_PointOnLineSide
  00d51	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d54	3b f0		 cmp	 esi, eax
  00d56	0f 84 e5 00 00
	00		 je	 $LN97@P_NightsTr

; 3333 : 				{
; 3334 : 					if (cv_debug)

  00d5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00d63	74 30		 je	 SHORT $LN91@P_NightsTr

; 3335 : 					{
; 3336 : 						HU_SetCEchoDuration(1);

  00d65	6a 01		 push	 1
  00d67	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00d6c	83 c4 04	 add	 esp, 4

; 3337 : 						HU_DoCEcho("transfer!");

  00d6f	68 00 00 00 00	 push	 OFFSET ??_C@_09LGJMJNML@transfer?$CB@
  00d74	e8 00 00 00 00	 call	 _HU_DoCEcho
  00d79	83 c4 04	 add	 esp, 4

; 3338 : 						HU_SetCEchoDuration(5);

  00d7c	6a 05		 push	 5
  00d7e	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00d83	83 c4 04	 add	 esp, 4

; 3339 : 						S_StartSound(NULL, sfx_strpst);

  00d86	68 dd 00 00 00	 push	 221			; 000000ddH
  00d8b	6a 00		 push	 0
  00d8d	e8 00 00 00 00	 call	 _S_StartSound
  00d92	83 c4 08	 add	 esp, 8
$LN91@P_NightsTr:

; 3340 : 					}
; 3341 : 					if (player->mo->target->health < transfer2->health)

  00d95	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d98	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d9a	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00da0	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00da3	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  00da9	3b 88 8c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+140]
  00daf	7d 5b		 jge	 SHORT $LN92@P_NightsTr

; 3342 : 					{
; 3343 : 						if (!P_FindAxis(transfer2->threshold, transfer2->health))

  00db1	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00db4	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00dba	51		 push	 ecx
  00dbb	8b 55 e8	 mov	 edx, DWORD PTR _transfer2$9[ebp]
  00dbe	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00dc4	50		 push	 eax
  00dc5	e8 00 00 00 00	 call	 _P_FindAxis
  00dca	83 c4 08	 add	 esp, 8
  00dcd	85 c0		 test	 eax, eax
  00dcf	75 0a		 jne	 SHORT $LN94@P_NightsTr

; 3344 : 							transfer2last = true;

  00dd1	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _transfer2last$2[ebp], 1
$LN94@P_NightsTr:

; 3345 : 
; 3346 : 						if (transfer2last)

  00ddb	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _transfer2last$2[ebp], 0
  00de2	74 10		 je	 SHORT $LN95@P_NightsTr

; 3347 : 							P_TransferToAxis(player, 1);

  00de4	6a 01		 push	 1
  00de6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00de9	50		 push	 eax
  00dea	e8 00 00 00 00	 call	 _P_TransferToAxis
  00def	83 c4 08	 add	 esp, 8
  00df2	eb 16		 jmp	 SHORT $LN96@P_NightsTr
$LN95@P_NightsTr:

; 3348 : 						else
; 3349 : 							P_TransferToAxis(player, transfer2->health);

  00df4	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00df7	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00dfd	51		 push	 ecx
  00dfe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e01	52		 push	 edx
  00e02	e8 00 00 00 00	 call	 _P_TransferToAxis
  00e07	83 c4 08	 add	 esp, 8
$LN96@P_NightsTr:

; 3350 : 					}

  00e0a	eb 35		 jmp	 SHORT $LN97@P_NightsTr
$LN92@P_NightsTr:

; 3351 : 					else if (player->mo->target->health >= transfer2->health)

  00e0c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e0f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e11	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00e17	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00e1a	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  00e20	3b 88 8c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+140]
  00e26	7c 19		 jl	 SHORT $LN97@P_NightsTr

; 3352 : 						P_TransferToAxis(player, transfer2->health - 1);

  00e28	8b 45 e8	 mov	 eax, DWORD PTR _transfer2$9[ebp]
  00e2b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00e31	83 e9 01	 sub	 ecx, 1
  00e34	51		 push	 ecx
  00e35	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e38	52		 push	 edx
  00e39	e8 00 00 00 00	 call	 _P_TransferToAxis
  00e3e	83 c4 08	 add	 esp, 8
$LN97@P_NightsTr:

; 3353 : 				}
; 3354 : 			}
; 3355 : 		}
; 3356 : 	}
; 3357 : }

  00e41	5f		 pop	 edi
  00e42	5e		 pop	 esi
  00e43	5b		 pop	 ebx
  00e44	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e47	33 cd		 xor	 ecx, ebp
  00e49	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e4e	8b e5		 mov	 esp, ebp
  00e50	5d		 pop	 ebp
  00e51	c3		 ret	 0
_P_NightsTransferPoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_ShootLine
_TEXT	SEGMENT
_seesound$ = -20					; size = 4
_speed$ = -16						; size = 4
_temp$ = -12						; size = 4
_i$ = -8						; size = 4
_mo$ = -4						; size = 4
_source$ = 8						; size = 4
_dest$ = 12						; size = 4
_height$ = 16						; size = 4
_P_ShootLine PROC					; COMDAT

; 2912 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2913 : 	mobj_t *mo;
; 2914 : 	INT32 i;
; 2915 : 	fixed_t temp;
; 2916 : 	INT32 speed, seesound;
; 2917 : 
; 2918 : 	temp = dest->z;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0000c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0000f	89 4d f4	 mov	 DWORD PTR _temp$[ebp], ecx

; 2919 : 	dest->z = height;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _height$[ebp]
  00018	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2920 : 
; 2921 : 	seesound = mobjinfo[MT_REDRING].seesound;

  0001b	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00020	69 c8 cf 00 00
	00		 imul	 ecx, eax, 207
  00026	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+16]
  0002c	89 55 ec	 mov	 DWORD PTR _seesound$[ebp], edx

; 2922 : 	speed = mobjinfo[MT_REDRING].speed;

  0002f	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00034	69 c8 cf 00 00
	00		 imul	 ecx, eax, 207
  0003a	8b 91 3c 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+60]
  00040	89 55 f0	 mov	 DWORD PTR _speed$[ebp], edx

; 2923 : 	mobjinfo[MT_REDRING].seesound = sfx_None;

  00043	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00048	69 c8 cf 00 00
	00		 imul	 ecx, eax, 207
  0004e	c7 81 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mobjinfo[ecx+16], 0

; 2924 : 	mobjinfo[MT_REDRING].speed = 20*FRACUNIT;

  00058	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  0005d	69 c8 cf 00 00
	00		 imul	 ecx, eax, 207
  00063	c7 81 3c 00 00
	00 00 00 14 00	 mov	 DWORD PTR _mobjinfo[ecx+60], 1310720 ; 00140000H

; 2925 : 
; 2926 : 	mo = P_SpawnXYZMissile(source, dest, MT_REDRING, source->x, source->y, height);

  0006d	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00074	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00077	52		 push	 edx
  00078	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0007b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007e	51		 push	 ecx
  0007f	68 cf 00 00 00	 push	 207			; 000000cfH
  00084	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00087	52		 push	 edx
  00088	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  00091	83 c4 18	 add	 esp, 24			; 00000018H
  00094	89 45 fc	 mov	 DWORD PTR _mo$[ebp], eax

; 2927 : 
; 2928 : 	dest->z = temp;

  00097	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0009a	8b 4d f4	 mov	 ecx, DWORD PTR _temp$[ebp]
  0009d	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2929 : 	if (mo)

  000a0	83 7d fc 00	 cmp	 DWORD PTR _mo$[ebp], 0
  000a4	74 73		 je	 SHORT $LN5@P_ShootLin

; 2930 : 	{
; 2931 : 		mo->flags2 |= MF2_RAILRING;

  000a6	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  000a9	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000af	81 c9 00 00 02
	00		 or	 ecx, 131072		; 00020000H
  000b5	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  000b8	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2932 : 		mo->flags2 |= MF2_DONTDRAW;

  000be	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  000c1	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000c7	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  000cd	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  000d0	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2933 : 		mo->flags |= MF_NOCLIPHEIGHT;

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  000d9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000dc	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  000e2	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  000e5	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2934 : 		mo->flags |= MF_NOCLIP;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  000eb	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000ee	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  000f4	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  000f7	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2935 : 		mo->flags &= ~MF_MISSILE;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  000fd	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00100	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  00106	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  00109	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2936 : 		mo->fuse = 3;

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  0010f	c7 80 bc 00 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+188], 3
$LN5@P_ShootLin:

; 2937 : 	}
; 2938 : 
; 2939 : 	for (i = 0; i < 32; i++)

  00119	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00120	eb 09		 jmp	 SHORT $LN4@P_ShootLin
$LN2@P_ShootLin:
  00122	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00125	83 c0 01	 add	 eax, 1
  00128	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_ShootLin:
  0012b	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0012f	0f 8d e5 00 00
	00		 jge	 $LN3@P_ShootLin

; 2940 : 	{
; 2941 : 		if (mo)

  00135	83 7d fc 00	 cmp	 DWORD PTR _mo$[ebp], 0
  00139	0f 84 ac 00 00
	00		 je	 $LN6@P_ShootLin

; 2942 : 		{
; 2943 : 			if (!(mo->flags & MF_NOBLOCKMAP))

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00142	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00145	83 e1 10	 and	 ecx, 16			; 00000010H
  00148	75 27		 jne	 SHORT $LN8@P_ShootLin

; 2944 : 			{
; 2945 : 				P_UnsetThingPosition(mo);

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00153	83 c4 04	 add	 esp, 4

; 2946 : 				mo->flags |= MF_NOBLOCKMAP;

  00156	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00159	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0015c	83 c9 10	 or	 ecx, 16			; 00000010H
  0015f	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  00162	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2947 : 				P_SetThingPosition(mo);

  00165	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 _P_SetThingPosition
  0016e	83 c4 04	 add	 esp, 4
$LN8@P_ShootLin:

; 2948 : 			}
; 2949 : 			if (i&1)

  00171	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00174	83 e0 01	 and	 eax, 1
  00177	74 22		 je	 SHORT $LN9@P_ShootLin

; 2950 : 				P_SpawnMobj(mo->x, mo->y, mo->z, MT_SPARK);

  00179	68 0d 01 00 00	 push	 269			; 0000010dH
  0017e	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00181	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00184	51		 push	 ecx
  00185	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  00188	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0018b	50		 push	 eax
  0018c	8b 4d fc	 mov	 ecx, DWORD PTR _mo$[ebp]
  0018f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00192	52		 push	 edx
  00193	e8 00 00 00 00	 call	 _P_SpawnMobj
  00198	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@P_ShootLin:

; 2951 : 
; 2952 : 			P_UnsetThingPosition(mo);

  0019b	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  001a4	83 c4 04	 add	 esp, 4

; 2953 : 			mo->x += mo->momx;

  001a7	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  001aa	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001ad	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  001b0	03 4a 48	 add	 ecx, DWORD PTR [edx+72]
  001b3	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  001b6	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2954 : 			mo->y += mo->momy;

  001b9	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  001bc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001bf	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  001c2	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  001c5	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  001c8	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2955 : 			mo->z += mo->momz;

  001cb	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  001ce	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001d1	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  001d4	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  001d7	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  001da	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2956 : 			P_SetThingPosition(mo);

  001dd	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 _P_SetThingPosition
  001e6	83 c4 04	 add	 esp, 4

; 2957 : 		}

  001e9	eb 2a		 jmp	 SHORT $LN7@P_ShootLin
$LN6@P_ShootLin:

; 2958 : 		else
; 2959 : 		{
; 2960 : 			mobjinfo[MT_REDRING].seesound = seesound;

  001eb	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  001f0	69 c8 cf 00 00
	00		 imul	 ecx, eax, 207
  001f6	8b 55 ec	 mov	 edx, DWORD PTR _seesound$[ebp]
  001f9	89 91 10 00 00
	00		 mov	 DWORD PTR _mobjinfo[ecx+16], edx

; 2961 : 			mobjinfo[MT_REDRING].speed = speed;

  001ff	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00204	69 c8 cf 00 00
	00		 imul	 ecx, eax, 207
  0020a	8b 55 f0	 mov	 edx, DWORD PTR _speed$[ebp]
  0020d	89 91 3c 00 00
	00		 mov	 DWORD PTR _mobjinfo[ecx+60], edx

; 2962 : 			return;

  00213	eb 2d		 jmp	 SHORT $LN1@P_ShootLin
$LN7@P_ShootLin:

; 2963 : 		}
; 2964 : 	}

  00215	e9 08 ff ff ff	 jmp	 $LN2@P_ShootLin
$LN3@P_ShootLin:

; 2965 : 	mobjinfo[MT_REDRING].seesound = seesound;

  0021a	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  0021f	69 c8 cf 00 00
	00		 imul	 ecx, eax, 207
  00225	8b 55 ec	 mov	 edx, DWORD PTR _seesound$[ebp]
  00228	89 91 10 00 00
	00		 mov	 DWORD PTR _mobjinfo[ecx+16], edx

; 2966 : 	mobjinfo[MT_REDRING].speed = speed;

  0022e	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00233	69 c8 cf 00 00
	00		 imul	 ecx, eax, 207
  00239	8b 55 f0	 mov	 edx, DWORD PTR _speed$[ebp]
  0023c	89 91 3c 00 00
	00		 mov	 DWORD PTR _mobjinfo[ecx+60], edx
$LN1@P_ShootLin:

; 2967 : }

  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c3		 ret	 0
_P_ShootLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_SpectatorMovement
_TEXT	SEGMENT
_cmd$ = -4						; size = 4
_player$ = 8						; size = 4
_P_SpectatorMovement PROC				; COMDAT

; 2870 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2871 : 	ticcmd_t *cmd = &player->cmd;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	83 c0 08	 add	 eax, 8
  0000f	89 45 fc	 mov	 DWORD PTR _cmd$[ebp], eax

; 2872 : 
; 2873 : 	player->mo->angle = (cmd->angleturn<<16 /* not FRACBITS */);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00015	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00019	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0001c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0001f	8b 02		 mov	 eax, DWORD PTR [edx]
  00021	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 2874 : 
; 2875 : 	ticruned++;

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticruned
  00029	83 c0 01	 add	 eax, 1
  0002c	a3 00 00 00 00	 mov	 DWORD PTR _ticruned, eax

; 2876 : 	if (!(cmd->angleturn & TICCMD_RECEIVED))

  00031	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00034	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00038	83 e1 01	 and	 ecx, 1
  0003b	75 0d		 jne	 SHORT $LN2@P_Spectato

; 2877 : 		ticmiss++;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticmiss
  00042	83 c0 01	 add	 eax, 1
  00045	a3 00 00 00 00	 mov	 DWORD PTR _ticmiss, eax
$LN2@P_Spectato:

; 2878 : 
; 2879 : 	if (cmd->buttons & BT_JUMP)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0004d	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00051	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00057	74 1b		 je	 SHORT $LN3@P_Spectato

; 2880 : 		player->mo->z += FRACUNIT*cv_speed.value;

  00059	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_speed+20
  00064	c1 e2 10	 shl	 edx, 16			; 00000010H
  00067	03 51 18	 add	 edx, DWORD PTR [ecx+24]
  0006a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  00072	eb 2a		 jmp	 SHORT $LN5@P_Spectato
$LN3@P_Spectato:

; 2881 : 	else if (cmd->buttons & BT_USE)

  00074	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00077	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0007b	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00081	74 1b		 je	 SHORT $LN5@P_Spectato

; 2882 : 		player->mo->z -= FRACUNIT*cv_speed.value;

  00083	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_speed+20
  0008e	c1 e2 10	 shl	 edx, 16			; 00000010H
  00091	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00094	2b c2		 sub	 eax, edx
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN5@P_Spectato:

; 2883 : 
; 2884 : 	if (player->mo->z > player->mo->ceilingz - player->mo->height)

  0009e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000a6	8b 02		 mov	 eax, DWORD PTR [edx]
  000a8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ab	8b 12		 mov	 edx, DWORD PTR [edx]
  000ad	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  000b0	2b 42 44	 sub	 eax, DWORD PTR [edx+68]
  000b3	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  000b6	7e 18		 jle	 SHORT $LN6@P_Spectato

; 2885 : 		player->mo->z = player->mo->ceilingz - player->mo->height;

  000b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000c0	8b 02		 mov	 eax, DWORD PTR [edx]
  000c2	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  000c5	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  000c8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000cb	8b 02		 mov	 eax, DWORD PTR [edx]
  000cd	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN6@P_Spectato:

; 2886 : 	if (player->mo->z < player->mo->floorz)

  000d0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  000dd	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  000e0	7d 10		 jge	 SHORT $LN7@P_Spectato

; 2887 : 		player->mo->z = player->mo->floorz;

  000e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ea	8b 02		 mov	 eax, DWORD PTR [edx]
  000ec	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  000ef	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN7@P_Spectato:

; 2888 : 
; 2889 : 	// Aiming needed for SEENAMES, etc.
; 2890 : 	// We may not need to fire as a spectator, but this is still handy!
; 2891 : 	player->aiming = cmd->aiming<<FRACBITS;

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  000f5	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  000f9	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000fc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ff	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 2892 : 
; 2893 : 	player->mo->momx = player->mo->momy = player->mo->momz = 0;

  00102	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00105	8b 08		 mov	 ecx, DWORD PTR [eax]
  00107	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  0010e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00111	8b 02		 mov	 eax, DWORD PTR [edx]
  00113	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0011d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011f	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 2894 : 	if (cmd->forwardmove != 0)

  00126	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00129	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0012c	85 c9		 test	 ecx, ecx
  0012e	74 21		 je	 SHORT $LN8@P_Spectato

; 2895 : 	{
; 2896 : 		P_Thrust(player->mo, player->mo->angle, cmd->forwardmove*(FRACUNIT/2));

  00130	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00133	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00136	c1 e1 0f	 shl	 ecx, 15			; 0000000fH
  00139	51		 push	 ecx
  0013a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0013d	8b 02		 mov	 eax, DWORD PTR [edx]
  0013f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00142	51		 push	 ecx
  00143	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00146	8b 02		 mov	 eax, DWORD PTR [edx]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _P_Thrust
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@P_Spectato:

; 2897 : 	}
; 2898 : 	if (cmd->sidemove != 0)

  00151	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00154	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00158	85 c9		 test	 ecx, ecx
  0015a	74 28		 je	 SHORT $LN9@P_Spectato

; 2899 : 	{
; 2900 : 		P_Thrust(player->mo, player->mo->angle-ANGLE_90, cmd->sidemove*(FRACUNIT/2));

  0015c	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0015f	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00163	c1 e1 0f	 shl	 ecx, 15			; 0000000fH
  00166	51		 push	 ecx
  00167	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0016a	8b 02		 mov	 eax, DWORD PTR [edx]
  0016c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0016f	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00175	51		 push	 ecx
  00176	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00179	8b 02		 mov	 eax, DWORD PTR [edx]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _P_Thrust
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@P_Spectato:

; 2901 : 	}
; 2902 : }

  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
_P_SpectatorMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_3dMovement
_TEXT	SEGMENT
tv376 = -164						; size = 4
_sideangle$1 = -96					; size = 4
_mleft$2 = -92						; size = 4
_mright$3 = -88						; size = 4
_value$4 = -84						; size = 4
_cbackward$5 = -80					; size = 4
_cforward$6 = -76					; size = 4
_tempangle$7 = -72					; size = 4
_tempy$8 = -68						; size = 4
_tempx$9 = -64						; size = 4
_controlplayerdirection$10 = -60			; size = 4
_controllerdirection$11 = -56				; size = 4
_controldirection$12 = -52				; size = 4
_normalspd$ = -48					; size = 4
_thiscam$ = -44						; size = 4
_mbackward$ = -40					; size = 4
_mforward$ = -36					; size = 4
_movepushside$ = -32					; size = 4
_movepushforward$ = -28					; size = 4
_thrustfactor$ = -24					; size = 4
_acceleration$ = -20					; size = 4
_topspeed$ = -16					; size = 4
_movepushsideangle$ = -12				; size = 4
_movepushangle$ = -8					; size = 4
_cmd$ = -4						; size = 4
_player$ = 8						; size = 4
_P_3dMovement PROC					; COMDAT

; 2466 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2467 : 	ticcmd_t *cmd;
; 2468 : 	angle_t movepushangle, movepushsideangle; // Analog
; 2469 : 	INT32 topspeed, acceleration, thrustfactor;
; 2470 : 	fixed_t movepushforward = 0, movepushside = 0;

  0000c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _movepushforward$[ebp], 0
  00013	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _movepushside$[ebp], 0

; 2471 : 	INT32 mforward = 0, mbackward = 0;

  0001a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 0
  00021	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 0

; 2472 : 	camera_t *thiscam;
; 2473 : 	fixed_t normalspd = player->normalspeed;

  00028	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0002b	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  00031	89 4d d0	 mov	 DWORD PTR _normalspd$[ebp], ecx

; 2474 : 
; 2475 : 	if (splitscreen && player == &players[secondarydisplayplayer])

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0003b	74 1d		 je	 SHORT $LN2@P_3dMoveme
  0003d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00047	05 00 00 00 00	 add	 eax, OFFSET _players
  0004c	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0004f	75 09		 jne	 SHORT $LN2@P_3dMoveme

; 2476 : 		thiscam = &camera2;

  00051	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  00058	eb 07		 jmp	 SHORT $LN3@P_3dMoveme
$LN2@P_3dMoveme:

; 2477 : 	else
; 2478 : 		thiscam = &camera;

  0005a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _thiscam$[ebp], OFFSET _camera
$LN3@P_3dMoveme:

; 2479 : 
; 2480 : 	cmd = &player->cmd;

  00061	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00064	83 c0 08	 add	 eax, 8
  00067	89 45 fc	 mov	 DWORD PTR _cmd$[ebp], eax

; 2481 : 
; 2482 : 	if (player->exiting
; 2483 : 		|| (player->pflags & PF_STASIS)
; 2484 : 		|| (player->powers[pw_nocontrol]) || (player->powers[pw_ingoop]))

  0006a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006d	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00074	75 35		 jne	 SHORT $LN5@P_3dMoveme
  00076	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00079	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0007f	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  00085	75 24		 jne	 SHORT $LN5@P_3dMoveme
  00087	b8 04 00 00 00	 mov	 eax, 4
  0008c	6b c8 1b	 imul	 ecx, eax, 27
  0008f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00092	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00097	75 12		 jne	 SHORT $LN5@P_3dMoveme
  00099	b8 04 00 00 00	 mov	 eax, 4
  0009e	6b c8 1c	 imul	 ecx, eax, 28
  000a1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000a4	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000a9	74 7b		 je	 SHORT $LN7@P_3dMoveme
$LN5@P_3dMoveme:

; 2485 : 	{
; 2486 : 		cmd->forwardmove = cmd->sidemove = 0;

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  000ae	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _cmd$[ebp]
  000b5	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 2487 : 		if (player->pflags & PF_GLIDING)

  000b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000bb	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000c1	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  000c7	74 18		 je	 SHORT $LN6@P_3dMoveme

; 2488 : 			player->pflags &= ~PF_GLIDING;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000cc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000d2	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  000d8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000db	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN6@P_3dMoveme:

; 2489 : 		if (player->pflags & PF_SPINNING && !player->exiting)

  000e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000ea	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  000f0	74 34		 je	 SHORT $LN7@P_3dMoveme
  000f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f5	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  000fc	75 28		 jne	 SHORT $LN7@P_3dMoveme

; 2490 : 		{
; 2491 : 			player->pflags &= ~PF_SPINNING;

  000fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00101	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00107	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  0010d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00110	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2492 : 			P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  00116	6a 01		 push	 1
  00118	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00123	83 c4 08	 add	 esp, 8
$LN7@P_3dMoveme:

; 2493 : 		}
; 2494 : 	}
; 2495 : 
; 2496 : 	if (!netgame && ((player == &players[consoleplayer] && cv_analog.value) || (splitscreen && player == &players[secondarydisplayplayer] && cv_analog2.value)))

  00126	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0012d	75 5d		 jne	 SHORT $LN8@P_3dMoveme
  0012f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00139	05 00 00 00 00	 add	 eax, OFFSET _players
  0013e	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00141	75 09		 jne	 SHORT $LN11@P_3dMoveme
  00143	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  0014a	75 26		 jne	 SHORT $LN10@P_3dMoveme
$LN11@P_3dMoveme:
  0014c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00153	74 37		 je	 SHORT $LN8@P_3dMoveme
  00155	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0015f	05 00 00 00 00	 add	 eax, OFFSET _players
  00164	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00167	75 23		 jne	 SHORT $LN8@P_3dMoveme
  00169	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00170	74 1a		 je	 SHORT $LN8@P_3dMoveme
$LN10@P_3dMoveme:

; 2497 : 	{
; 2498 : 		movepushangle = thiscam->angle;

  00172	8b 45 d4	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00175	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00178	89 4d f8	 mov	 DWORD PTR _movepushangle$[ebp], ecx

; 2499 : 		movepushsideangle = thiscam->angle-ANGLE_90;

  0017b	8b 45 d4	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0017e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00181	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00187	89 4d f4	 mov	 DWORD PTR _movepushsideangle$[ebp], ecx

; 2500 : 	}

  0018a	eb 1c		 jmp	 SHORT $LN9@P_3dMoveme
$LN8@P_3dMoveme:

; 2501 : 	else
; 2502 : 	{
; 2503 : 		movepushangle = player->mo->angle;

  0018c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0018f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00191	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00194	89 55 f8	 mov	 DWORD PTR _movepushangle$[ebp], edx

; 2504 : 		movepushsideangle = player->mo->angle-ANGLE_90;

  00197	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0019f	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  001a5	89 55 f4	 mov	 DWORD PTR _movepushsideangle$[ebp], edx
$LN9@P_3dMoveme:

; 2505 : 	}
; 2506 : 
; 2507 : 	// cmomx/cmomy stands for the conveyor belt speed.
; 2508 : 	if (player->onconveyor == 2) // Wind/Current

  001a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ab	83 b8 e4 01 00
	00 02		 cmp	 DWORD PTR [eax+484], 2
  001b2	75 3c		 jne	 SHORT $LN12@P_3dMoveme

; 2509 : 	{
; 2510 : 		//if (player->mo->z > player->mo->watertop || player->mo->z + player->mo->height < player->mo->waterbottom)
; 2511 : 		if (!(player->mo->eflags & MFE_UNDERWATER) && !(player->mo->eflags & MFE_TOUCHWATER))

  001b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b9	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  001bf	83 e2 08	 and	 edx, 8
  001c2	75 2a		 jne	 SHORT $LN14@P_3dMoveme
  001c4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  001cf	83 e2 04	 and	 edx, 4
  001d2	75 1a		 jne	 SHORT $LN14@P_3dMoveme

; 2512 : 			player->cmomx = player->cmomy = 0;

  001d4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d7	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0
  001e1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001e4	c7 81 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+316], 0
$LN14@P_3dMoveme:

; 2513 : 	}

  001ee	eb 6c		 jmp	 SHORT $LN17@P_3dMoveme
$LN12@P_3dMoveme:

; 2514 : 	else if (player->onconveyor == 4 && !P_IsObjectOnGround(player->mo)) // Actual conveyor belt

  001f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f3	83 b8 e4 01 00
	00 04		 cmp	 DWORD PTR [eax+484], 4
  001fa	75 2e		 jne	 SHORT $LN15@P_3dMoveme
  001fc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00201	51		 push	 ecx
  00202	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  00207	83 c4 04	 add	 esp, 4
  0020a	85 c0		 test	 eax, eax
  0020c	75 1c		 jne	 SHORT $LN15@P_3dMoveme

; 2515 : 		player->cmomx = player->cmomy = 0;

  0020e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00211	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0
  0021b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0021e	c7 81 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+316], 0
  00228	eb 32		 jmp	 SHORT $LN17@P_3dMoveme
$LN15@P_3dMoveme:

; 2516 : 	else if (player->onconveyor != 2 && player->onconveyor != 4)

  0022a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0022d	83 b8 e4 01 00
	00 02		 cmp	 DWORD PTR [eax+484], 2
  00234	74 26		 je	 SHORT $LN17@P_3dMoveme
  00236	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00239	83 b8 e4 01 00
	00 04		 cmp	 DWORD PTR [eax+484], 4
  00240	74 1a		 je	 SHORT $LN17@P_3dMoveme

; 2517 : 		player->cmomx = player->cmomy = 0;

  00242	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00245	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0
  0024f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00252	c7 81 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+316], 0
$LN17@P_3dMoveme:

; 2518 : 
; 2519 : 	player->rmomx = player->mo->momx - player->cmomx;

  0025c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0025f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00261	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00264	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00267	2b 82 3c 01 00
	00		 sub	 eax, DWORD PTR [edx+316]
  0026d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00270	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 2520 : 	player->rmomy = player->mo->momy - player->cmomy;

  00276	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00279	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0027e	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00281	2b 82 40 01 00
	00		 sub	 eax, DWORD PTR [edx+320]
  00287	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0028a	89 81 48 01 00
	00		 mov	 DWORD PTR [ecx+328], eax

; 2521 : 
; 2522 : 	// Calculates player's speed based on distance-of-a-line formula
; 2523 : 	player->speed = P_AproxDistance(player->rmomx, player->rmomy)>>FRACBITS;

  00290	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00293	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [eax+328]
  00299	51		 push	 ecx
  0029a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0029d	8b 82 44 01 00
	00		 mov	 eax, DWORD PTR [edx+324]
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 _P_AproxDistance
  002a9	83 c4 08	 add	 esp, 8
  002ac	c1 f8 10	 sar	 eax, 16			; 00000010H
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002b2	89 81 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], eax

; 2524 : 
; 2525 : 	// This determines if the player is facing the direction they are travelling or not.
; 2526 : 	// Didn't your teacher say to pay attention in Geometry/Trigonometry class? ;)
; 2527 : 	// forward
; 2528 : 	if ((player->rmomx > 0 && player->rmomy > 0) && (/*player->mo->angle >= 0 &&*/ player->mo->angle < ANGLE_90)) // Quadrant 1

  002b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002bb	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  002c2	7e 26		 jle	 SHORT $LN18@P_3dMoveme
  002c4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002c7	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  002ce	7e 1a		 jle	 SHORT $LN18@P_3dMoveme
  002d0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d5	81 79 24 00 00
	00 40		 cmp	 DWORD PTR [ecx+36], 1073741824 ; 40000000H
  002dc	73 0c		 jae	 SHORT $LN18@P_3dMoveme

; 2529 : 		mforward = 1;

  002de	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 1
  002e5	e9 80 01 00 00	 jmp	 $LN34@P_3dMoveme
$LN18@P_3dMoveme:

; 2530 : 	else if ((player->rmomx < 0 && player->rmomy > 0) && (player->mo->angle >= ANGLE_90 && player->mo->angle < ANGLE_180)) // Quadrant 2

  002ea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ed	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  002f4	7d 34		 jge	 SHORT $LN20@P_3dMoveme
  002f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002f9	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  00300	7e 28		 jle	 SHORT $LN20@P_3dMoveme
  00302	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00305	8b 08		 mov	 ecx, DWORD PTR [eax]
  00307	81 79 24 00 00
	00 40		 cmp	 DWORD PTR [ecx+36], 1073741824 ; 40000000H
  0030e	72 1a		 jb	 SHORT $LN20@P_3dMoveme
  00310	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00313	8b 08		 mov	 ecx, DWORD PTR [eax]
  00315	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  0031c	73 0c		 jae	 SHORT $LN20@P_3dMoveme

; 2531 : 		mforward = 1;

  0031e	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 1
  00325	e9 40 01 00 00	 jmp	 $LN34@P_3dMoveme
$LN20@P_3dMoveme:

; 2532 : 	else if ((player->rmomx < 0 && player->rmomy < 0) && (player->mo->angle >= ANGLE_180 && player->mo->angle < ANGLE_270)) // Quadrant 3

  0032a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032d	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  00334	7d 34		 jge	 SHORT $LN22@P_3dMoveme
  00336	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00339	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  00340	7d 28		 jge	 SHORT $LN22@P_3dMoveme
  00342	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00345	8b 08		 mov	 ecx, DWORD PTR [eax]
  00347	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  0034e	72 1a		 jb	 SHORT $LN22@P_3dMoveme
  00350	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00353	8b 08		 mov	 ecx, DWORD PTR [eax]
  00355	81 79 24 00 00
	00 c0		 cmp	 DWORD PTR [ecx+36], -1073741824 ; c0000000H
  0035c	73 0c		 jae	 SHORT $LN22@P_3dMoveme

; 2533 : 		mforward = 1;

  0035e	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 1
  00365	e9 00 01 00 00	 jmp	 $LN34@P_3dMoveme
$LN22@P_3dMoveme:

; 2534 : 	else if ((player->rmomx > 0 && player->rmomy < 0) && ((player->mo->angle >= ANGLE_270 /*&& (player->mo->angle <= ANGLE_MAX)*/) || (/*player->mo->angle >= 0 &&*/ player->mo->angle <= ANGLE_45))) // Quadrant 4

  0036a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0036d	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  00374	7e 34		 jle	 SHORT $LN24@P_3dMoveme
  00376	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00379	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  00380	7d 28		 jge	 SHORT $LN24@P_3dMoveme
  00382	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00385	8b 08		 mov	 ecx, DWORD PTR [eax]
  00387	81 79 24 00 00
	00 c0		 cmp	 DWORD PTR [ecx+36], -1073741824 ; c0000000H
  0038e	73 0e		 jae	 SHORT $LN26@P_3dMoveme
  00390	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00393	8b 08		 mov	 ecx, DWORD PTR [eax]
  00395	81 79 24 00 00
	00 20		 cmp	 DWORD PTR [ecx+36], 536870912 ; 20000000H
  0039c	77 0c		 ja	 SHORT $LN24@P_3dMoveme
$LN26@P_3dMoveme:

; 2535 : 		mforward = 1;

  0039e	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 1
  003a5	e9 c0 00 00 00	 jmp	 $LN34@P_3dMoveme
$LN24@P_3dMoveme:

; 2536 : 	else if (player->rmomx > 0 && ((player->mo->angle >= ANGLE_315 /*&& player->mo->angle <= ANGLE_MAX*/)))

  003aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ad	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  003b4	7e 1a		 jle	 SHORT $LN27@P_3dMoveme
  003b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003bb	81 79 24 00 00
	00 e0		 cmp	 DWORD PTR [ecx+36], -536870912 ; e0000000H
  003c2	72 0c		 jb	 SHORT $LN27@P_3dMoveme

; 2537 : 		mforward = 1;

  003c4	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 1
  003cb	e9 9a 00 00 00	 jmp	 $LN34@P_3dMoveme
$LN27@P_3dMoveme:

; 2538 : 	else if (player->rmomx < 0 && (player->mo->angle >= ANGLE_135 && player->mo->angle <= ANGLE_225))

  003d0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003d3	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  003da	7d 25		 jge	 SHORT $LN29@P_3dMoveme
  003dc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003df	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e1	81 79 24 00 00
	00 60		 cmp	 DWORD PTR [ecx+36], 1610612736 ; 60000000H
  003e8	72 17		 jb	 SHORT $LN29@P_3dMoveme
  003ea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	81 79 24 00 00
	00 a0		 cmp	 DWORD PTR [ecx+36], -1610612736 ; a0000000H
  003f6	77 09		 ja	 SHORT $LN29@P_3dMoveme

; 2539 : 		mforward = 1;

  003f8	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 1
  003ff	eb 69		 jmp	 SHORT $LN34@P_3dMoveme
$LN29@P_3dMoveme:

; 2540 : 	else if (player->rmomy > 0 && (player->mo->angle >= ANGLE_45 && player->mo->angle <= ANGLE_135))

  00401	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00404	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  0040b	7e 25		 jle	 SHORT $LN31@P_3dMoveme
  0040d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00410	8b 08		 mov	 ecx, DWORD PTR [eax]
  00412	81 79 24 00 00
	00 20		 cmp	 DWORD PTR [ecx+36], 536870912 ; 20000000H
  00419	72 17		 jb	 SHORT $LN31@P_3dMoveme
  0041b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0041e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00420	81 79 24 00 00
	00 60		 cmp	 DWORD PTR [ecx+36], 1610612736 ; 60000000H
  00427	77 09		 ja	 SHORT $LN31@P_3dMoveme

; 2541 : 		mforward = 1;

  00429	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 1
  00430	eb 38		 jmp	 SHORT $LN34@P_3dMoveme
$LN31@P_3dMoveme:

; 2542 : 	else if (player->rmomy < 0 && (player->mo->angle >= ANGLE_225 && player->mo->angle <= ANGLE_315))

  00432	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00435	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  0043c	7d 25		 jge	 SHORT $LN33@P_3dMoveme
  0043e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00441	8b 08		 mov	 ecx, DWORD PTR [eax]
  00443	81 79 24 00 00
	00 a0		 cmp	 DWORD PTR [ecx+36], -1610612736 ; a0000000H
  0044a	72 17		 jb	 SHORT $LN33@P_3dMoveme
  0044c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0044f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00451	81 79 24 00 00
	00 e0		 cmp	 DWORD PTR [ecx+36], -536870912 ; e0000000H
  00458	77 09		 ja	 SHORT $LN33@P_3dMoveme

; 2543 : 		mforward = 1;

  0045a	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 1
  00461	eb 07		 jmp	 SHORT $LN34@P_3dMoveme
$LN33@P_3dMoveme:

; 2544 : 	else
; 2545 : 		mforward = 0;

  00463	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _mforward$[ebp], 0
$LN34@P_3dMoveme:

; 2546 : 	// backward
; 2547 : 	if ((player->rmomx > 0 && player->rmomy > 0) && (player->mo->angle >= ANGLE_180 && player->mo->angle < ANGLE_270)) // Quadrant 3

  0046a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0046d	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  00474	7e 34		 jle	 SHORT $LN35@P_3dMoveme
  00476	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00479	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  00480	7e 28		 jle	 SHORT $LN35@P_3dMoveme
  00482	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00485	8b 08		 mov	 ecx, DWORD PTR [eax]
  00487	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  0048e	72 1a		 jb	 SHORT $LN35@P_3dMoveme
  00490	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00493	8b 08		 mov	 ecx, DWORD PTR [eax]
  00495	81 79 24 00 00
	00 c0		 cmp	 DWORD PTR [ecx+36], -1073741824 ; c0000000H
  0049c	73 0c		 jae	 SHORT $LN35@P_3dMoveme

; 2548 : 		mbackward = 1;

  0049e	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 1
  004a5	e9 72 01 00 00	 jmp	 $LN51@P_3dMoveme
$LN35@P_3dMoveme:

; 2549 : 	else if ((player->rmomx < 0 && player->rmomy > 0) && (player->mo->angle >= ANGLE_270 /*&& (player->mo->angle <= ANGLE_MAX)*/)) // Quadrant 4

  004aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004ad	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  004b4	7d 26		 jge	 SHORT $LN37@P_3dMoveme
  004b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004b9	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  004c0	7e 1a		 jle	 SHORT $LN37@P_3dMoveme
  004c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  004c7	81 79 24 00 00
	00 c0		 cmp	 DWORD PTR [ecx+36], -1073741824 ; c0000000H
  004ce	72 0c		 jb	 SHORT $LN37@P_3dMoveme

; 2550 : 		mbackward = 1;

  004d0	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 1
  004d7	e9 40 01 00 00	 jmp	 $LN51@P_3dMoveme
$LN37@P_3dMoveme:

; 2551 : 	else if ((player->rmomx < 0 && player->rmomy < 0) && (/*player->mo->angle >= 0 &&*/ player->mo->angle < ANGLE_90)) // Quadrant 1

  004dc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004df	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  004e6	7d 26		 jge	 SHORT $LN39@P_3dMoveme
  004e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004eb	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  004f2	7d 1a		 jge	 SHORT $LN39@P_3dMoveme
  004f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  004f9	81 79 24 00 00
	00 40		 cmp	 DWORD PTR [ecx+36], 1073741824 ; 40000000H
  00500	73 0c		 jae	 SHORT $LN39@P_3dMoveme

; 2552 : 		mbackward = 1;

  00502	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 1
  00509	e9 0e 01 00 00	 jmp	 $LN51@P_3dMoveme
$LN39@P_3dMoveme:

; 2553 : 	else if ((player->rmomx > 0 && player->rmomy < 0) && (player->mo->angle >= ANGLE_90 && player->mo->angle < ANGLE_180)) // Quadrant 2

  0050e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00511	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  00518	7e 34		 jle	 SHORT $LN41@P_3dMoveme
  0051a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0051d	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  00524	7d 28		 jge	 SHORT $LN41@P_3dMoveme
  00526	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00529	8b 08		 mov	 ecx, DWORD PTR [eax]
  0052b	81 79 24 00 00
	00 40		 cmp	 DWORD PTR [ecx+36], 1073741824 ; 40000000H
  00532	72 1a		 jb	 SHORT $LN41@P_3dMoveme
  00534	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00537	8b 08		 mov	 ecx, DWORD PTR [eax]
  00539	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  00540	73 0c		 jae	 SHORT $LN41@P_3dMoveme

; 2554 : 		mbackward = 1;

  00542	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 1
  00549	e9 ce 00 00 00	 jmp	 $LN51@P_3dMoveme
$LN41@P_3dMoveme:

; 2555 : 	else if (player->rmomx < 0 && ((player->mo->angle >= ANGLE_315 /*&& player->mo->angle <= ANGLE_MAX*/) || (/*player->mo->angle >= 0 &&*/ player->mo->angle <= ANGLE_45)))

  0054e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00551	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  00558	7d 28		 jge	 SHORT $LN43@P_3dMoveme
  0055a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0055d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0055f	81 79 24 00 00
	00 e0		 cmp	 DWORD PTR [ecx+36], -536870912 ; e0000000H
  00566	73 0e		 jae	 SHORT $LN45@P_3dMoveme
  00568	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0056b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0056d	81 79 24 00 00
	00 20		 cmp	 DWORD PTR [ecx+36], 536870912 ; 20000000H
  00574	77 0c		 ja	 SHORT $LN43@P_3dMoveme
$LN45@P_3dMoveme:

; 2556 : 		mbackward = 1;

  00576	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 1
  0057d	e9 9a 00 00 00	 jmp	 $LN51@P_3dMoveme
$LN43@P_3dMoveme:

; 2557 : 	else if (player->rmomx > 0 && (player->mo->angle >= ANGLE_135 && player->mo->angle <= ANGLE_225))

  00582	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00585	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  0058c	7e 25		 jle	 SHORT $LN46@P_3dMoveme
  0058e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00591	8b 08		 mov	 ecx, DWORD PTR [eax]
  00593	81 79 24 00 00
	00 60		 cmp	 DWORD PTR [ecx+36], 1610612736 ; 60000000H
  0059a	72 17		 jb	 SHORT $LN46@P_3dMoveme
  0059c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0059f	8b 08		 mov	 ecx, DWORD PTR [eax]
  005a1	81 79 24 00 00
	00 a0		 cmp	 DWORD PTR [ecx+36], -1610612736 ; a0000000H
  005a8	77 09		 ja	 SHORT $LN46@P_3dMoveme

; 2558 : 		mbackward = 1;

  005aa	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 1
  005b1	eb 69		 jmp	 SHORT $LN51@P_3dMoveme
$LN46@P_3dMoveme:

; 2559 : 	else if (player->rmomy < 0 && (player->mo->angle >= ANGLE_45 && player->mo->angle <= ANGLE_135))

  005b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005b6	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  005bd	7d 25		 jge	 SHORT $LN48@P_3dMoveme
  005bf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  005c4	81 79 24 00 00
	00 20		 cmp	 DWORD PTR [ecx+36], 536870912 ; 20000000H
  005cb	72 17		 jb	 SHORT $LN48@P_3dMoveme
  005cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d2	81 79 24 00 00
	00 60		 cmp	 DWORD PTR [ecx+36], 1610612736 ; 60000000H
  005d9	77 09		 ja	 SHORT $LN48@P_3dMoveme

; 2560 : 		mbackward = 1;

  005db	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 1
  005e2	eb 38		 jmp	 SHORT $LN51@P_3dMoveme
$LN48@P_3dMoveme:

; 2561 : 	else if (player->rmomy > 0 && (player->mo->angle >= ANGLE_225 && player->mo->angle <= ANGLE_315))

  005e4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005e7	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  005ee	7e 25		 jle	 SHORT $LN50@P_3dMoveme
  005f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  005f5	81 79 24 00 00
	00 a0		 cmp	 DWORD PTR [ecx+36], -1610612736 ; a0000000H
  005fc	72 17		 jb	 SHORT $LN50@P_3dMoveme
  005fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00601	8b 08		 mov	 ecx, DWORD PTR [eax]
  00603	81 79 24 00 00
	00 e0		 cmp	 DWORD PTR [ecx+36], -536870912 ; e0000000H
  0060a	77 09		 ja	 SHORT $LN50@P_3dMoveme

; 2562 : 		mbackward = 1;

  0060c	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 1
  00613	eb 07		 jmp	 SHORT $LN51@P_3dMoveme
$LN50@P_3dMoveme:

; 2563 : 	else // Put in 'or' checks here!
; 2564 : 		mbackward = 0;

  00615	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _mbackward$[ebp], 0
$LN51@P_3dMoveme:

; 2565 : 
; 2566 : 	// When sliding, don't allow forward/back
; 2567 : 	if (player->pflags & PF_SLIDING)

  0061c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0061f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00625	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  0062b	74 06		 je	 SHORT $LN52@P_3dMoveme

; 2568 : 		cmd->forwardmove = 0;

  0062d	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00630	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN52@P_3dMoveme:

; 2569 : 
; 2570 : 	// Do not let the player control movement if not onground.
; 2571 : 	onground = P_IsObjectOnGround(player->mo);

  00633	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00636	8b 08		 mov	 ecx, DWORD PTR [eax]
  00638	51		 push	 ecx
  00639	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  0063e	83 c4 04	 add	 esp, 4
  00641	a3 00 00 00 00	 mov	 DWORD PTR _onground, eax

; 2572 : 
; 2573 : 	player->aiming = cmd->aiming<<FRACBITS;

  00646	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00649	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0064d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00650	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00653	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 2574 : 
; 2575 : 	// Set the player speeds.
; 2576 : 	if (maptol & TOL_SRB1)

  00656	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0065d	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00662	74 10		 je	 SHORT $LN53@P_3dMoveme

; 2577 : 		normalspd = (normalspd / 3) * 2;

  00664	8b 45 d0	 mov	 eax, DWORD PTR _normalspd$[ebp]
  00667	99		 cdq
  00668	b9 03 00 00 00	 mov	 ecx, 3
  0066d	f7 f9		 idiv	 ecx
  0066f	d1 e0		 shl	 eax, 1
  00671	89 45 d0	 mov	 DWORD PTR _normalspd$[ebp], eax
$LN53@P_3dMoveme:

; 2578 : 
; 2579 : 	if (player->powers[pw_super] || player->powers[pw_sneakers])

  00674	b8 04 00 00 00	 mov	 eax, 4
  00679	6b c8 0f	 imul	 ecx, eax, 15
  0067c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0067f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00684	75 16		 jne	 SHORT $LN56@P_3dMoveme
  00686	b8 04 00 00 00	 mov	 eax, 4
  0068b	c1 e0 00	 shl	 eax, 0
  0068e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00691	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00696	0f 84 c5 00 00
	00		 je	 $LN54@P_3dMoveme
$LN56@P_3dMoveme:

; 2580 : 	{
; 2581 : 		thrustfactor = player->thrustfactor*2;

  0069c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0069f	8b 88 cc 00 00
	00		 mov	 ecx, DWORD PTR [eax+204]
  006a5	d1 e1		 shl	 ecx, 1
  006a7	89 4d e8	 mov	 DWORD PTR _thrustfactor$[ebp], ecx

; 2582 : 		acceleration = player->accelstart/4 + player->speed*(player->acceleration/4);

  006aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006ad	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [eax+208]
  006b3	99		 cdq
  006b4	83 e2 03	 and	 edx, 3
  006b7	03 c2		 add	 eax, edx
  006b9	8b c8		 mov	 ecx, eax
  006bb	c1 f9 02	 sar	 ecx, 2
  006be	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006c1	8b 82 d4 00 00
	00		 mov	 eax, DWORD PTR [edx+212]
  006c7	99		 cdq
  006c8	83 e2 03	 and	 edx, 3
  006cb	03 c2		 add	 eax, edx
  006cd	c1 f8 02	 sar	 eax, 2
  006d0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006d3	0f af 82 0c 01
	00 00		 imul	 eax, DWORD PTR [edx+268]
  006da	03 c8		 add	 ecx, eax
  006dc	89 4d ec	 mov	 DWORD PTR _acceleration$[ebp], ecx

; 2583 : 
; 2584 : 		if (player->powers[pw_tailsfly])

  006df	b8 04 00 00 00	 mov	 eax, 4
  006e4	6b c8 05	 imul	 ecx, eax, 5
  006e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006ea	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  006ef	74 08		 je	 SHORT $LN57@P_3dMoveme

; 2585 : 			topspeed = normalspd;

  006f1	8b 45 d0	 mov	 eax, DWORD PTR _normalspd$[ebp]
  006f4	89 45 f0	 mov	 DWORD PTR _topspeed$[ebp], eax
  006f7	eb 63		 jmp	 SHORT $LN60@P_3dMoveme
$LN57@P_3dMoveme:

; 2586 : 		else if (player->mo->eflags & MFE_UNDERWATER && !(player->pflags & PF_SLIDING))

  006f9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  006fe	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00704	83 e2 08	 and	 edx, 8
  00707	74 29		 je	 SHORT $LN59@P_3dMoveme
  00709	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0070c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00712	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00718	75 18		 jne	 SHORT $LN59@P_3dMoveme

; 2587 : 		{
; 2588 : 			topspeed = normalspd;

  0071a	8b 45 d0	 mov	 eax, DWORD PTR _normalspd$[ebp]
  0071d	89 45 f0	 mov	 DWORD PTR _topspeed$[ebp], eax

; 2589 : 			acceleration = (acceleration * 2) / 3;

  00720	8b 45 ec	 mov	 eax, DWORD PTR _acceleration$[ebp]
  00723	d1 e0		 shl	 eax, 1
  00725	99		 cdq
  00726	b9 03 00 00 00	 mov	 ecx, 3
  0072b	f7 f9		 idiv	 ecx
  0072d	89 45 ec	 mov	 DWORD PTR _acceleration$[ebp], eax

; 2590 : 		}

  00730	eb 2a		 jmp	 SHORT $LN60@P_3dMoveme
$LN59@P_3dMoveme:

; 2591 : 		else
; 2592 : 			topspeed = normalspd * 2 > 50 ? 50 : normalspd * 2;

  00732	8b 45 d0	 mov	 eax, DWORD PTR _normalspd$[ebp]
  00735	d1 e0		 shl	 eax, 1
  00737	83 f8 32	 cmp	 eax, 50			; 00000032H
  0073a	7e 0c		 jle	 SHORT $LN179@P_3dMoveme
  0073c	c7 85 5c ff ff
	ff 32 00 00 00	 mov	 DWORD PTR tv376[ebp], 50 ; 00000032H
  00746	eb 0b		 jmp	 SHORT $LN180@P_3dMoveme
$LN179@P_3dMoveme:
  00748	8b 4d d0	 mov	 ecx, DWORD PTR _normalspd$[ebp]
  0074b	d1 e1		 shl	 ecx, 1
  0074d	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv376[ebp], ecx
$LN180@P_3dMoveme:
  00753	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR tv376[ebp]
  00759	89 55 f0	 mov	 DWORD PTR _topspeed$[ebp], edx
$LN60@P_3dMoveme:

; 2593 : 	}

  0075c	e9 8e 00 00 00	 jmp	 $LN64@P_3dMoveme
$LN54@P_3dMoveme:

; 2594 : 	else
; 2595 : 	{
; 2596 : 		thrustfactor = player->thrustfactor;

  00761	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00764	8b 88 cc 00 00
	00		 mov	 ecx, DWORD PTR [eax+204]
  0076a	89 4d e8	 mov	 DWORD PTR _thrustfactor$[ebp], ecx

; 2597 : 		acceleration = player->accelstart + player->speed*player->acceleration;

  0076d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00770	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00773	8b 90 0c 01 00
	00		 mov	 edx, DWORD PTR [eax+268]
  00779	0f af 91 d4 00
	00 00		 imul	 edx, DWORD PTR [ecx+212]
  00780	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00783	03 90 d0 00 00
	00		 add	 edx, DWORD PTR [eax+208]
  00789	89 55 ec	 mov	 DWORD PTR _acceleration$[ebp], edx

; 2598 : 
; 2599 : 		if (player->powers[pw_tailsfly])

  0078c	b8 04 00 00 00	 mov	 eax, 4
  00791	6b c8 05	 imul	 ecx, eax, 5
  00794	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00797	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0079c	74 0d		 je	 SHORT $LN61@P_3dMoveme

; 2600 : 			topspeed = normalspd/2;

  0079e	8b 45 d0	 mov	 eax, DWORD PTR _normalspd$[ebp]
  007a1	99		 cdq
  007a2	2b c2		 sub	 eax, edx
  007a4	d1 f8		 sar	 eax, 1
  007a6	89 45 f0	 mov	 DWORD PTR _topspeed$[ebp], eax
  007a9	eb 44		 jmp	 SHORT $LN64@P_3dMoveme
$LN61@P_3dMoveme:

; 2601 : 		else if (player->mo->eflags & MFE_UNDERWATER && !(player->pflags & PF_SLIDING))

  007ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  007b0	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  007b6	83 e2 08	 and	 edx, 8
  007b9	74 2e		 je	 SHORT $LN63@P_3dMoveme
  007bb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007be	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  007c4	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  007ca	75 1d		 jne	 SHORT $LN63@P_3dMoveme

; 2602 : 		{
; 2603 : 			topspeed = normalspd/2;

  007cc	8b 45 d0	 mov	 eax, DWORD PTR _normalspd$[ebp]
  007cf	99		 cdq
  007d0	2b c2		 sub	 eax, edx
  007d2	d1 f8		 sar	 eax, 1
  007d4	89 45 f0	 mov	 DWORD PTR _topspeed$[ebp], eax

; 2604 : 			acceleration = (acceleration * 2) / 3;

  007d7	8b 45 ec	 mov	 eax, DWORD PTR _acceleration$[ebp]
  007da	d1 e0		 shl	 eax, 1
  007dc	99		 cdq
  007dd	b9 03 00 00 00	 mov	 ecx, 3
  007e2	f7 f9		 idiv	 ecx
  007e4	89 45 ec	 mov	 DWORD PTR _acceleration$[ebp], eax

; 2605 : 		}

  007e7	eb 06		 jmp	 SHORT $LN64@P_3dMoveme
$LN63@P_3dMoveme:

; 2606 : 		else
; 2607 : 			topspeed = normalspd;

  007e9	8b 45 d0	 mov	 eax, DWORD PTR _normalspd$[ebp]
  007ec	89 45 f0	 mov	 DWORD PTR _topspeed$[ebp], eax
$LN64@P_3dMoveme:

; 2608 : 	}
; 2609 : 
; 2610 : 	// Better maneuverability while flying
; 2611 : 	if(player->powers[pw_tailsfly])

  007ef	b8 04 00 00 00	 mov	 eax, 4
  007f4	6b c8 05	 imul	 ecx, eax, 5
  007f7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007fa	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  007ff	74 2d		 je	 SHORT $LN65@P_3dMoveme

; 2612 : 	{
; 2613 : 		thrustfactor = player->thrustfactor*2;

  00801	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00804	8b 88 cc 00 00
	00		 mov	 ecx, DWORD PTR [eax+204]
  0080a	d1 e1		 shl	 ecx, 1
  0080c	89 4d e8	 mov	 DWORD PTR _thrustfactor$[ebp], ecx

; 2614 : 		acceleration = player->accelstart + player->speed*player->acceleration;

  0080f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00812	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00815	8b 90 0c 01 00
	00		 mov	 edx, DWORD PTR [eax+268]
  0081b	0f af 91 d4 00
	00 00		 imul	 edx, DWORD PTR [ecx+212]
  00822	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00825	03 90 d0 00 00
	00		 add	 edx, DWORD PTR [eax+208]
  0082b	89 55 ec	 mov	 DWORD PTR _acceleration$[ebp], edx
$LN65@P_3dMoveme:

; 2615 : 	}
; 2616 : 
; 2617 : 	if ((netgame || (player == &players[consoleplayer] && !cv_analog.value)
; 2618 : 		|| (splitscreen && player == &players[secondarydisplayplayer] && !cv_analog2.value))
; 2619 : 		&& cmd->forwardmove != 0 && !((player->pflags & PF_GLIDING) || player->exiting

  0082e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00835	75 4f		 jne	 SHORT $LN67@P_3dMoveme
  00837	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00841	05 00 00 00 00	 add	 eax, OFFSET _players
  00846	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00849	75 09		 jne	 SHORT $LN68@P_3dMoveme
  0084b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00852	74 32		 je	 SHORT $LN67@P_3dMoveme
$LN68@P_3dMoveme:
  00854	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0085b	0f 84 c2 02 00
	00		 je	 $LN92@P_3dMoveme
  00861	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0086b	05 00 00 00 00	 add	 eax, OFFSET _players
  00870	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00873	0f 85 aa 02 00
	00		 jne	 $LN92@P_3dMoveme
  00879	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00880	0f 85 9d 02 00
	00		 jne	 $LN92@P_3dMoveme
$LN67@P_3dMoveme:
  00886	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00889	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0088c	85 c9		 test	 ecx, ecx
  0088e	0f 84 8f 02 00
	00		 je	 $LN92@P_3dMoveme
  00894	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00897	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0089d	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  008a3	0f 85 7a 02 00
	00		 jne	 $LN92@P_3dMoveme
  008a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008ac	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  008b3	0f 85 6a 02 00
	00		 jne	 $LN92@P_3dMoveme
  008b9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008bc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  008c2	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  008c8	75 3c		 jne	 SHORT $LN69@P_3dMoveme
  008ca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  008cf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008d2	8b 02		 mov	 eax, DWORD PTR [edx]
  008d4	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  008da	6b 42 1c 1c	 imul	 eax, DWORD PTR [edx+28], 28
  008de	05 00 00 00 00	 add	 eax, OFFSET _states
  008e3	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  008e6	75 1e		 jne	 SHORT $LN69@P_3dMoveme
  008e8	b8 04 00 00 00	 mov	 eax, 4
  008ed	d1 e0		 shl	 eax, 1
  008ef	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  008f2	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  008f7	74 0d		 je	 SHORT $LN69@P_3dMoveme
  008f9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  00900	0f 84 1d 02 00
	00		 je	 $LN92@P_3dMoveme
$LN69@P_3dMoveme:

; 2620 : 		|| (!(player->pflags & PF_SLIDING) && player->mo->state == &states[player->mo->info->painstate] && player->powers[pw_flashing]
; 2621 : 		&& !onground)))
; 2622 : 	{
; 2623 : 		if (player->climbing)

  00906	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00909	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00910	74 65		 je	 SHORT $LN70@P_3dMoveme

; 2624 : 		{
; 2625 : 			P_SetObjectMomZ(player->mo, FixedDiv(cmd->forwardmove*FRACUNIT,10*FRACUNIT), false);

  00912	6a 00		 push	 0
  00914	68 00 00 0a 00	 push	 655360			; 000a0000H
  00919	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0091c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0091f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00922	51		 push	 ecx
  00923	e8 00 00 00 00	 call	 _FixedDiv
  00928	83 c4 08	 add	 esp, 8
  0092b	50		 push	 eax
  0092c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0092f	8b 02		 mov	 eax, DWORD PTR [edx]
  00931	50		 push	 eax
  00932	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00937	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2626 : 
; 2627 : 			if (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]))

  0093a	b8 04 00 00 00	 mov	 eax, 4
  0093f	6b c8 0f	 imul	 ecx, eax, 15
  00942	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00945	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0094a	74 29		 je	 SHORT $LN72@P_3dMoveme
  0094c	b8 04 00 00 00	 mov	 eax, 4
  00951	6b c8 18	 imul	 ecx, eax, 24
  00954	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00957	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0095b	83 e0 7f	 and	 eax, 127		; 0000007fH
  0095e	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00961	75 12		 jne	 SHORT $LN72@P_3dMoveme

; 2628 : 				player->mo->momz *= 2;

  00963	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00966	8b 08		 mov	 ecx, DWORD PTR [eax]
  00968	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0096b	d1 e2		 shl	 edx, 1
  0096d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00970	8b 08		 mov	 ecx, DWORD PTR [eax]
  00972	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN72@P_3dMoveme:

; 2629 : 		}

  00975	eb 4e		 jmp	 SHORT $LN74@P_3dMoveme
$LN70@P_3dMoveme:

; 2630 : 		else if (player->powers[pw_sneakers] || player->powers[pw_super]) // super sneakers?

  00977	b8 04 00 00 00	 mov	 eax, 4
  0097c	c1 e0 00	 shl	 eax, 0
  0097f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00982	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00987	75 12		 jne	 SHORT $LN75@P_3dMoveme
  00989	b8 04 00 00 00	 mov	 eax, 4
  0098e	6b c8 0f	 imul	 ecx, eax, 15
  00991	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00994	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00999	74 17		 je	 SHORT $LN73@P_3dMoveme
$LN75@P_3dMoveme:

; 2631 : 			movepushforward = cmd->forwardmove * ((thrustfactor*2)*acceleration);

  0099b	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0099e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  009a1	8b 55 e8	 mov	 edx, DWORD PTR _thrustfactor$[ebp]
  009a4	d1 e2		 shl	 edx, 1
  009a6	0f af 55 ec	 imul	 edx, DWORD PTR _acceleration$[ebp]
  009aa	0f af ca	 imul	 ecx, edx
  009ad	89 4d e4	 mov	 DWORD PTR _movepushforward$[ebp], ecx
  009b0	eb 13		 jmp	 SHORT $LN74@P_3dMoveme
$LN73@P_3dMoveme:

; 2632 : 		else // if not, then run normally
; 2633 : 			movepushforward = cmd->forwardmove * (thrustfactor*acceleration);

  009b2	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  009b5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  009b8	8b 55 e8	 mov	 edx, DWORD PTR _thrustfactor$[ebp]
  009bb	0f af 55 ec	 imul	 edx, DWORD PTR _acceleration$[ebp]
  009bf	0f af ca	 imul	 ecx, edx
  009c2	89 4d e4	 mov	 DWORD PTR _movepushforward$[ebp], ecx
$LN74@P_3dMoveme:

; 2634 : 
; 2635 : 		// allow very small movement while in air for gameplay
; 2636 : 		if (!onground)

  009c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  009cc	75 09		 jne	 SHORT $LN76@P_3dMoveme

; 2637 : 			movepushforward >>= 2; // proper air movement

  009ce	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  009d1	c1 f8 02	 sar	 eax, 2
  009d4	89 45 e4	 mov	 DWORD PTR _movepushforward$[ebp], eax
$LN76@P_3dMoveme:

; 2638 : 
; 2639 : 		// Allow a bit of movement while spinning
; 2640 : 		if (player->pflags & PF_SPINNING)

  009d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009da	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  009e0	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  009e6	74 57		 je	 SHORT $LN83@P_3dMoveme

; 2641 : 		{
; 2642 : 			if ((mforward && cmd->forwardmove > 0) || (mbackward && cmd->forwardmove < 0))

  009e8	83 7d dc 00	 cmp	 DWORD PTR _mforward$[ebp], 0
  009ec	74 0a		 je	 SHORT $LN81@P_3dMoveme
  009ee	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  009f1	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  009f4	85 c9		 test	 ecx, ecx
  009f6	7f 10		 jg	 SHORT $LN80@P_3dMoveme
$LN81@P_3dMoveme:
  009f8	83 7d d8 00	 cmp	 DWORD PTR _mbackward$[ebp], 0
  009fc	74 13		 je	 SHORT $LN78@P_3dMoveme
  009fe	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00a01	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00a04	85 c9		 test	 ecx, ecx
  00a06	7d 09		 jge	 SHORT $LN78@P_3dMoveme
$LN80@P_3dMoveme:

; 2643 : 				movepushforward = 0;

  00a08	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _movepushforward$[ebp], 0
  00a0f	eb 2e		 jmp	 SHORT $LN83@P_3dMoveme
$LN78@P_3dMoveme:

; 2644 : 			else if (!(player->pflags & PF_STARTDASH))

  00a11	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a14	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a1a	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00a20	75 16		 jne	 SHORT $LN82@P_3dMoveme

; 2645 : 				movepushforward = FixedDiv(movepushforward,16*FRACUNIT);

  00a22	68 00 00 10 00	 push	 1048576			; 00100000H
  00a27	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00a2a	50		 push	 eax
  00a2b	e8 00 00 00 00	 call	 _FixedDiv
  00a30	83 c4 08	 add	 esp, 8
  00a33	89 45 e4	 mov	 DWORD PTR _movepushforward$[ebp], eax
  00a36	eb 07		 jmp	 SHORT $LN83@P_3dMoveme
$LN82@P_3dMoveme:

; 2646 : 			else
; 2647 : 				movepushforward = 0;

  00a38	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _movepushforward$[ebp], 0
$LN83@P_3dMoveme:

; 2648 : 		}
; 2649 : 
; 2650 : 		if ((player->speed < topspeed) && (mforward) && (cmd->forwardmove > 0)) // Sonic's Speed

  00a3f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a42	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00a48	3b 4d f0	 cmp	 ecx, DWORD PTR _topspeed$[ebp]
  00a4b	7d 2b		 jge	 SHORT $LN84@P_3dMoveme
  00a4d	83 7d dc 00	 cmp	 DWORD PTR _mforward$[ebp], 0
  00a51	74 25		 je	 SHORT $LN84@P_3dMoveme
  00a53	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00a56	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00a59	85 c9		 test	 ecx, ecx
  00a5b	7e 1b		 jle	 SHORT $LN84@P_3dMoveme

; 2651 : 			P_Thrust(player->mo, movepushangle, movepushforward);

  00a5d	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00a60	50		 push	 eax
  00a61	8b 4d f8	 mov	 ecx, DWORD PTR _movepushangle$[ebp]
  00a64	51		 push	 ecx
  00a65	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a68	8b 02		 mov	 eax, DWORD PTR [edx]
  00a6a	50		 push	 eax
  00a6b	e8 00 00 00 00	 call	 _P_Thrust
  00a70	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a73	e9 ab 00 00 00	 jmp	 $LN92@P_3dMoveme
$LN84@P_3dMoveme:

; 2652 : 		else if ((mforward) && (cmd->forwardmove < 0))

  00a78	83 7d dc 00	 cmp	 DWORD PTR _mforward$[ebp], 0
  00a7c	74 25		 je	 SHORT $LN86@P_3dMoveme
  00a7e	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00a81	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00a84	85 c9		 test	 ecx, ecx
  00a86	7d 1b		 jge	 SHORT $LN86@P_3dMoveme

; 2653 : 			P_Thrust(player->mo, movepushangle, movepushforward);

  00a88	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00a8b	50		 push	 eax
  00a8c	8b 4d f8	 mov	 ecx, DWORD PTR _movepushangle$[ebp]
  00a8f	51		 push	 ecx
  00a90	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a93	8b 02		 mov	 eax, DWORD PTR [edx]
  00a95	50		 push	 eax
  00a96	e8 00 00 00 00	 call	 _P_Thrust
  00a9b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a9e	e9 80 00 00 00	 jmp	 $LN92@P_3dMoveme
$LN86@P_3dMoveme:

; 2654 : 		else if ((player->speed < topspeed) && (mbackward) && (cmd->forwardmove < 0))

  00aa3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00aa6	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00aac	3b 4d f0	 cmp	 ecx, DWORD PTR _topspeed$[ebp]
  00aaf	7d 28		 jge	 SHORT $LN88@P_3dMoveme
  00ab1	83 7d d8 00	 cmp	 DWORD PTR _mbackward$[ebp], 0
  00ab5	74 22		 je	 SHORT $LN88@P_3dMoveme
  00ab7	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00aba	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00abd	85 c9		 test	 ecx, ecx
  00abf	7d 18		 jge	 SHORT $LN88@P_3dMoveme

; 2655 : 			P_Thrust(player->mo, movepushangle, movepushforward);

  00ac1	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00ac4	50		 push	 eax
  00ac5	8b 4d f8	 mov	 ecx, DWORD PTR _movepushangle$[ebp]
  00ac8	51		 push	 ecx
  00ac9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00acc	8b 02		 mov	 eax, DWORD PTR [edx]
  00ace	50		 push	 eax
  00acf	e8 00 00 00 00	 call	 _P_Thrust
  00ad4	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ad7	eb 4a		 jmp	 SHORT $LN92@P_3dMoveme
$LN88@P_3dMoveme:

; 2656 : 		else if ((mbackward) && (cmd->forwardmove > 0))

  00ad9	83 7d d8 00	 cmp	 DWORD PTR _mbackward$[ebp], 0
  00add	74 22		 je	 SHORT $LN90@P_3dMoveme
  00adf	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00ae2	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00ae5	85 c9		 test	 ecx, ecx
  00ae7	7e 18		 jle	 SHORT $LN90@P_3dMoveme

; 2657 : 			P_Thrust(player->mo, movepushangle, movepushforward);

  00ae9	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00aec	50		 push	 eax
  00aed	8b 4d f8	 mov	 ecx, DWORD PTR _movepushangle$[ebp]
  00af0	51		 push	 ecx
  00af1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00af4	8b 02		 mov	 eax, DWORD PTR [edx]
  00af6	50		 push	 eax
  00af7	e8 00 00 00 00	 call	 _P_Thrust
  00afc	83 c4 0c	 add	 esp, 12			; 0000000cH
  00aff	eb 22		 jmp	 SHORT $LN92@P_3dMoveme
$LN90@P_3dMoveme:

; 2658 : 		else if (!mforward && !mbackward)

  00b01	83 7d dc 00	 cmp	 DWORD PTR _mforward$[ebp], 0
  00b05	75 1c		 jne	 SHORT $LN92@P_3dMoveme
  00b07	83 7d d8 00	 cmp	 DWORD PTR _mbackward$[ebp], 0
  00b0b	75 16		 jne	 SHORT $LN92@P_3dMoveme

; 2659 : 			P_Thrust(player->mo, movepushangle, movepushforward);

  00b0d	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00b10	50		 push	 eax
  00b11	8b 4d f8	 mov	 ecx, DWORD PTR _movepushangle$[ebp]
  00b14	51		 push	 ecx
  00b15	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b18	8b 02		 mov	 eax, DWORD PTR [edx]
  00b1a	50		 push	 eax
  00b1b	e8 00 00 00 00	 call	 _P_Thrust
  00b20	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN92@P_3dMoveme:

; 2660 : 	}
; 2661 : 	// Analog movement control
; 2662 : 	if (!netgame && ((player == &players[consoleplayer] && cv_analog.value)
; 2663 : 		|| (splitscreen && player == &players[secondarydisplayplayer]
; 2664 : 		&& cv_analog2.value)) && thiscam->chase)

  00b23	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00b2a	0f 85 8a 04 00
	00		 jne	 $LN93@P_3dMoveme
  00b30	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00b3a	05 00 00 00 00	 add	 eax, OFFSET _players
  00b3f	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00b42	75 09		 jne	 SHORT $LN96@P_3dMoveme
  00b44	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00b4b	75 32		 jne	 SHORT $LN95@P_3dMoveme
$LN96@P_3dMoveme:
  00b4d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00b54	0f 84 60 04 00
	00		 je	 $LN93@P_3dMoveme
  00b5a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00b64	05 00 00 00 00	 add	 eax, OFFSET _players
  00b69	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00b6c	0f 85 48 04 00
	00		 jne	 $LN93@P_3dMoveme
  00b72	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00b79	0f 84 3b 04 00
	00		 je	 $LN93@P_3dMoveme
$LN95@P_3dMoveme:
  00b7f	8b 45 d4	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00b82	83 38 00	 cmp	 DWORD PTR [eax], 0
  00b85	0f 84 2f 04 00
	00		 je	 $LN93@P_3dMoveme

; 2665 : 	{
; 2666 : 		if (!((player->pflags & PF_GLIDING) || player->exiting || (!(player->pflags & PF_SLIDING) && player->mo->state == &states[player->mo->info->painstate]

  00b8b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b8e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00b94	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00b9a	0f 85 15 04 00
	00		 jne	 $LN122@P_3dMoveme
  00ba0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ba3	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00baa	0f 85 05 04 00
	00		 jne	 $LN122@P_3dMoveme
  00bb0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bb3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00bb9	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00bbf	75 33		 jne	 SHORT $LN98@P_3dMoveme
  00bc1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bc4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bc6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bc9	8b 02		 mov	 eax, DWORD PTR [edx]
  00bcb	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  00bd1	6b 42 1c 1c	 imul	 eax, DWORD PTR [edx+28], 28
  00bd5	05 00 00 00 00	 add	 eax, OFFSET _states
  00bda	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00bdd	75 15		 jne	 SHORT $LN98@P_3dMoveme
  00bdf	b8 04 00 00 00	 mov	 eax, 4
  00be4	d1 e0		 shl	 eax, 1
  00be6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00be9	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00bee	0f 85 c1 03 00
	00		 jne	 $LN122@P_3dMoveme
$LN98@P_3dMoveme:

; 2667 : 			&& player->powers[pw_flashing])))
; 2668 : 		{
; 2669 : 			angle_t controldirection, controllerdirection, controlplayerdirection;
; 2670 : 			fixed_t tempx, tempy;
; 2671 : 			angle_t tempangle;
; 2672 : 			boolean cforward; // controls pointing forward from the player
; 2673 : 			boolean cbackward; // controls pointing backward from the player
; 2674 : 
; 2675 : 			tempx = tempy = 0;

  00bf4	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _tempy$8[ebp], 0
  00bfb	8b 45 bc	 mov	 eax, DWORD PTR _tempy$8[ebp]
  00bfe	89 45 c0	 mov	 DWORD PTR _tempx$9[ebp], eax

; 2676 : 			cforward = cbackward = false;

  00c01	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _cbackward$5[ebp], 0
  00c08	8b 45 b0	 mov	 eax, DWORD PTR _cbackward$5[ebp]
  00c0b	89 45 b4	 mov	 DWORD PTR _cforward$6[ebp], eax

; 2677 : 
; 2678 : 			// Calculate the angle at which the controls are pointing
; 2679 : 			// to figure out the proper mforward and mbackward.
; 2680 : 			tempangle = thiscam->angle;

  00c0e	8b 45 d4	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00c11	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00c14	89 4d b8	 mov	 DWORD PTR _tempangle$7[ebp], ecx

; 2681 : 			tempangle >>= ANGLETOFINESHIFT;

  00c17	8b 45 b8	 mov	 eax, DWORD PTR _tempangle$7[ebp]
  00c1a	c1 e8 13	 shr	 eax, 19			; 00000013H
  00c1d	89 45 b8	 mov	 DWORD PTR _tempangle$7[ebp], eax

; 2682 : 			tempx += FixedMul(cmd->forwardmove,FINECOSINE(tempangle));

  00c20	8b 45 b8	 mov	 eax, DWORD PTR _tempangle$7[ebp]
  00c23	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00c29	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00c2c	52		 push	 edx
  00c2d	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00c30	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00c33	51		 push	 ecx
  00c34	e8 00 00 00 00	 call	 _FixedMul
  00c39	83 c4 08	 add	 esp, 8
  00c3c	03 45 c0	 add	 eax, DWORD PTR _tempx$9[ebp]
  00c3f	89 45 c0	 mov	 DWORD PTR _tempx$9[ebp], eax

; 2683 : 			tempy += FixedMul(cmd->forwardmove,FINESINE(tempangle));

  00c42	8b 45 b8	 mov	 eax, DWORD PTR _tempangle$7[ebp]
  00c45	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00c4c	51		 push	 ecx
  00c4d	8b 55 fc	 mov	 edx, DWORD PTR _cmd$[ebp]
  00c50	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00c53	50		 push	 eax
  00c54	e8 00 00 00 00	 call	 _FixedMul
  00c59	83 c4 08	 add	 esp, 8
  00c5c	03 45 bc	 add	 eax, DWORD PTR _tempy$8[ebp]
  00c5f	89 45 bc	 mov	 DWORD PTR _tempy$8[ebp], eax

; 2684 : 
; 2685 : 			tempangle = thiscam->angle-ANGLE_90;

  00c62	8b 45 d4	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00c65	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00c68	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00c6e	89 4d b8	 mov	 DWORD PTR _tempangle$7[ebp], ecx

; 2686 : 			tempangle >>= ANGLETOFINESHIFT;

  00c71	8b 45 b8	 mov	 eax, DWORD PTR _tempangle$7[ebp]
  00c74	c1 e8 13	 shr	 eax, 19			; 00000013H
  00c77	89 45 b8	 mov	 DWORD PTR _tempangle$7[ebp], eax

; 2687 : 			tempx += FixedMul(cmd->sidemove,FINECOSINE(tempangle));

  00c7a	8b 45 b8	 mov	 eax, DWORD PTR _tempangle$7[ebp]
  00c7d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00c83	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00c86	52		 push	 edx
  00c87	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00c8a	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00c8e	51		 push	 ecx
  00c8f	e8 00 00 00 00	 call	 _FixedMul
  00c94	83 c4 08	 add	 esp, 8
  00c97	03 45 c0	 add	 eax, DWORD PTR _tempx$9[ebp]
  00c9a	89 45 c0	 mov	 DWORD PTR _tempx$9[ebp], eax

; 2688 : 			tempy += FixedMul(cmd->sidemove,FINESINE(tempangle));

  00c9d	8b 45 b8	 mov	 eax, DWORD PTR _tempangle$7[ebp]
  00ca0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00ca7	51		 push	 ecx
  00ca8	8b 55 fc	 mov	 edx, DWORD PTR _cmd$[ebp]
  00cab	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  00caf	50		 push	 eax
  00cb0	e8 00 00 00 00	 call	 _FixedMul
  00cb5	83 c4 08	 add	 esp, 8
  00cb8	03 45 bc	 add	 eax, DWORD PTR _tempy$8[ebp]
  00cbb	89 45 bc	 mov	 DWORD PTR _tempy$8[ebp], eax

; 2689 : 
; 2690 : 			tempx = tempx*FRACUNIT;

  00cbe	8b 45 c0	 mov	 eax, DWORD PTR _tempx$9[ebp]
  00cc1	c1 e0 10	 shl	 eax, 16			; 00000010H
  00cc4	89 45 c0	 mov	 DWORD PTR _tempx$9[ebp], eax

; 2691 : 			tempy = tempy*FRACUNIT;

  00cc7	8b 45 bc	 mov	 eax, DWORD PTR _tempy$8[ebp]
  00cca	c1 e0 10	 shl	 eax, 16			; 00000010H
  00ccd	89 45 bc	 mov	 DWORD PTR _tempy$8[ebp], eax

; 2692 : 
; 2693 : 			controldirection = controllerdirection =

  00cd0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cd3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cd5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00cd8	03 55 bc	 add	 edx, DWORD PTR _tempy$8[ebp]
  00cdb	52		 push	 edx
  00cdc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cdf	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ce1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00ce4	03 55 c0	 add	 edx, DWORD PTR _tempx$9[ebp]
  00ce7	52		 push	 edx
  00ce8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ceb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ced	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00cf0	52		 push	 edx
  00cf1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cf4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cf6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00cf9	52		 push	 edx
  00cfa	e8 00 00 00 00	 call	 _R_PointToAngle2
  00cff	83 c4 10	 add	 esp, 16			; 00000010H
  00d02	89 45 c8	 mov	 DWORD PTR _controllerdirection$11[ebp], eax
  00d05	8b 45 c8	 mov	 eax, DWORD PTR _controllerdirection$11[ebp]
  00d08	89 45 cc	 mov	 DWORD PTR _controldirection$12[ebp], eax

; 2694 : 				R_PointToAngle2(player->mo->x, player->mo->y, player->mo->x + tempx,
; 2695 : 					player->mo->y + tempy);
; 2696 : 
; 2697 : 			controlplayerdirection = player->mo->angle;

  00d0b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d0e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d10	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00d13	89 55 c4	 mov	 DWORD PTR _controlplayerdirection$10[ebp], edx

; 2698 : 
; 2699 : 			if (controlplayerdirection < ANGLE_90)

  00d16	81 7d c4 00 00
	00 40		 cmp	 DWORD PTR _controlplayerdirection$10[ebp], 1073741824 ; 40000000H
  00d1d	73 18		 jae	 SHORT $LN99@P_3dMoveme

; 2700 : 			{
; 2701 : 				controlplayerdirection += ANGLE_90;

  00d1f	8b 45 c4	 mov	 eax, DWORD PTR _controlplayerdirection$10[ebp]
  00d22	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00d27	89 45 c4	 mov	 DWORD PTR _controlplayerdirection$10[ebp], eax

; 2702 : 				controllerdirection += ANGLE_90;

  00d2a	8b 45 c8	 mov	 eax, DWORD PTR _controllerdirection$11[ebp]
  00d2d	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00d32	89 45 c8	 mov	 DWORD PTR _controllerdirection$11[ebp], eax

; 2703 : 			}

  00d35	eb 1f		 jmp	 SHORT $LN101@P_3dMoveme
$LN99@P_3dMoveme:

; 2704 : 			else if (controlplayerdirection >= ANGLE_270)

  00d37	81 7d c4 00 00
	00 c0		 cmp	 DWORD PTR _controlplayerdirection$10[ebp], -1073741824 ; c0000000H
  00d3e	72 16		 jb	 SHORT $LN101@P_3dMoveme

; 2705 : 			{
; 2706 : 				controlplayerdirection -= ANGLE_90;

  00d40	8b 45 c4	 mov	 eax, DWORD PTR _controlplayerdirection$10[ebp]
  00d43	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00d48	89 45 c4	 mov	 DWORD PTR _controlplayerdirection$10[ebp], eax

; 2707 : 				controllerdirection -= ANGLE_90;

  00d4b	8b 45 c8	 mov	 eax, DWORD PTR _controllerdirection$11[ebp]
  00d4e	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00d53	89 45 c8	 mov	 DWORD PTR _controllerdirection$11[ebp], eax
$LN101@P_3dMoveme:

; 2708 : 			}
; 2709 : 
; 2710 : 			// Controls pointing backwards from player
; 2711 : 			if (controllerdirection > controlplayerdirection + ANGLE_90
; 2712 : 				&& controllerdirection < controlplayerdirection - ANGLE_90)

  00d56	8b 45 c4	 mov	 eax, DWORD PTR _controlplayerdirection$10[ebp]
  00d59	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00d5e	39 45 c8	 cmp	 DWORD PTR _controllerdirection$11[ebp], eax
  00d61	76 16		 jbe	 SHORT $LN102@P_3dMoveme
  00d63	8b 45 c4	 mov	 eax, DWORD PTR _controlplayerdirection$10[ebp]
  00d66	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00d6b	39 45 c8	 cmp	 DWORD PTR _controllerdirection$11[ebp], eax
  00d6e	73 09		 jae	 SHORT $LN102@P_3dMoveme

; 2713 : 			{
; 2714 : 				cbackward = true;

  00d70	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _cbackward$5[ebp], 1

; 2715 : 			}

  00d77	eb 07		 jmp	 SHORT $LN103@P_3dMoveme
$LN102@P_3dMoveme:

; 2716 : 			else // Controls pointing in player's general direction
; 2717 : 				cforward = true;

  00d79	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR _cforward$6[ebp], 1
$LN103@P_3dMoveme:

; 2718 : 
; 2719 : 			if (player->climbing)

  00d80	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d83	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00d8a	0f 84 af 00 00
	00		 je	 $LN104@P_3dMoveme

; 2720 : 			{
; 2721 : 				fixed_t value = 10*FRACUNIT;

  00d90	c7 45 ac 00 00
	0a 00		 mov	 DWORD PTR _value$4[ebp], 655360 ; 000a0000H

; 2722 : 
; 2723 : 				// Thrust in the direction of the controls
; 2724 : 				P_SetObjectMomZ(player->mo, FixedDiv(cmd->forwardmove*FRACUNIT,10*FRACUNIT), false);

  00d97	6a 00		 push	 0
  00d99	68 00 00 0a 00	 push	 655360			; 000a0000H
  00d9e	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00da1	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00da4	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00da7	51		 push	 ecx
  00da8	e8 00 00 00 00	 call	 _FixedDiv
  00dad	83 c4 08	 add	 esp, 8
  00db0	50		 push	 eax
  00db1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00db4	8b 02		 mov	 eax, DWORD PTR [edx]
  00db6	50		 push	 eax
  00db7	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00dbc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2725 : 
; 2726 : 				if (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]))

  00dbf	b8 04 00 00 00	 mov	 eax, 4
  00dc4	6b c8 0f	 imul	 ecx, eax, 15
  00dc7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00dca	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00dcf	74 34		 je	 SHORT $LN106@P_3dMoveme
  00dd1	b8 04 00 00 00	 mov	 eax, 4
  00dd6	6b c8 18	 imul	 ecx, eax, 24
  00dd9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ddc	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00de0	83 e0 7f	 and	 eax, 127		; 0000007fH
  00de3	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00de6	75 1d		 jne	 SHORT $LN106@P_3dMoveme

; 2727 : 				{
; 2728 : 					player->mo->momz *= 2;

  00de8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00deb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ded	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00df0	d1 e2		 shl	 edx, 1
  00df2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00df5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00df7	89 51 50	 mov	 DWORD PTR [ecx+80], edx

; 2729 : 					value /= 2;

  00dfa	8b 45 ac	 mov	 eax, DWORD PTR _value$4[ebp]
  00dfd	99		 cdq
  00dfe	2b c2		 sub	 eax, edx
  00e00	d1 f8		 sar	 eax, 1
  00e02	89 45 ac	 mov	 DWORD PTR _value$4[ebp], eax
$LN106@P_3dMoveme:

; 2730 : 				}
; 2731 : 
; 2732 : 				P_InstaThrust(player->mo, player->mo->angle-ANGLE_90, FixedDiv(cmd->sidemove*FRACUNIT,value));

  00e05	8b 45 ac	 mov	 eax, DWORD PTR _value$4[ebp]
  00e08	50		 push	 eax
  00e09	8b 4d fc	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00e0c	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00e10	c1 e2 10	 shl	 edx, 16			; 00000010H
  00e13	52		 push	 edx
  00e14	e8 00 00 00 00	 call	 _FixedDiv
  00e19	83 c4 08	 add	 esp, 8
  00e1c	50		 push	 eax
  00e1d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e20	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e22	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00e25	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  00e2b	52		 push	 edx
  00e2c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e2f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e31	51		 push	 ecx
  00e32	e8 00 00 00 00	 call	 _P_InstaThrust
  00e37	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2733 : 			}

  00e3a	e9 8a 00 00 00	 jmp	 $LN108@P_3dMoveme
$LN104@P_3dMoveme:

; 2734 : 
; 2735 : 			else if (player->powers[pw_sneakers] || player->powers[pw_super]) // super sneakers?

  00e3f	b8 04 00 00 00	 mov	 eax, 4
  00e44	c1 e0 00	 shl	 eax, 0
  00e47	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e4a	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00e4f	75 12		 jne	 SHORT $LN109@P_3dMoveme
  00e51	b8 04 00 00 00	 mov	 eax, 4
  00e56	6b c8 0f	 imul	 ecx, eax, 15
  00e59	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e5c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00e61	74 35		 je	 SHORT $LN107@P_3dMoveme
$LN109@P_3dMoveme:

; 2736 : 				movepushforward = FixedMul(FixedHypot(cmd->sidemove*FRACUNIT, cmd->forwardmove*FRACUNIT), ((thrustfactor*2)*acceleration));

  00e63	8b 45 e8	 mov	 eax, DWORD PTR _thrustfactor$[ebp]
  00e66	d1 e0		 shl	 eax, 1
  00e68	0f af 45 ec	 imul	 eax, DWORD PTR _acceleration$[ebp]
  00e6c	50		 push	 eax
  00e6d	8b 4d fc	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00e70	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00e73	c1 e2 10	 shl	 edx, 16			; 00000010H
  00e76	52		 push	 edx
  00e77	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00e7a	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00e7e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00e81	51		 push	 ecx
  00e82	e8 00 00 00 00	 call	 _FixedHypot
  00e87	83 c4 08	 add	 esp, 8
  00e8a	50		 push	 eax
  00e8b	e8 00 00 00 00	 call	 _FixedMul
  00e90	83 c4 08	 add	 esp, 8
  00e93	89 45 e4	 mov	 DWORD PTR _movepushforward$[ebp], eax
  00e96	eb 31		 jmp	 SHORT $LN108@P_3dMoveme
$LN107@P_3dMoveme:

; 2737 : 			else // if not, then run normally
; 2738 : 				movepushforward = FixedMul(FixedHypot(cmd->sidemove*FRACUNIT, cmd->forwardmove*FRACUNIT), ((thrustfactor*1)*acceleration));

  00e98	8b 45 e8	 mov	 eax, DWORD PTR _thrustfactor$[ebp]
  00e9b	0f af 45 ec	 imul	 eax, DWORD PTR _acceleration$[ebp]
  00e9f	50		 push	 eax
  00ea0	8b 4d fc	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00ea3	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00ea6	c1 e2 10	 shl	 edx, 16			; 00000010H
  00ea9	52		 push	 edx
  00eaa	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00ead	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00eb1	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00eb4	51		 push	 ecx
  00eb5	e8 00 00 00 00	 call	 _FixedHypot
  00eba	83 c4 08	 add	 esp, 8
  00ebd	50		 push	 eax
  00ebe	e8 00 00 00 00	 call	 _FixedMul
  00ec3	83 c4 08	 add	 esp, 8
  00ec6	89 45 e4	 mov	 DWORD PTR _movepushforward$[ebp], eax
$LN108@P_3dMoveme:

; 2739 : 
; 2740 : 			// allow very small movement while in air for gameplay
; 2741 : 			if (!onground)

  00ec9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  00ed0	75 09		 jne	 SHORT $LN110@P_3dMoveme

; 2742 : 				movepushforward >>= 2; // proper air movement

  00ed2	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00ed5	c1 f8 02	 sar	 eax, 2
  00ed8	89 45 e4	 mov	 DWORD PTR _movepushforward$[ebp], eax
$LN110@P_3dMoveme:

; 2743 : 
; 2744 : 			// Allow a bit of movement while spinning
; 2745 : 			if (player->pflags & PF_SPINNING)

  00edb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ede	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00ee4	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00eea	74 57		 je	 SHORT $LN117@P_3dMoveme

; 2746 : 			{
; 2747 : 				// Stupid little movement prohibitor hack
; 2748 : 				// that REALLY shouldn't belong in analog code.
; 2749 : 				if ((mforward && cmd->forwardmove > 0) || (mbackward && cmd->forwardmove < 0))

  00eec	83 7d dc 00	 cmp	 DWORD PTR _mforward$[ebp], 0
  00ef0	74 0a		 je	 SHORT $LN115@P_3dMoveme
  00ef2	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00ef5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00ef8	85 c9		 test	 ecx, ecx
  00efa	7f 10		 jg	 SHORT $LN114@P_3dMoveme
$LN115@P_3dMoveme:
  00efc	83 7d d8 00	 cmp	 DWORD PTR _mbackward$[ebp], 0
  00f00	74 13		 je	 SHORT $LN112@P_3dMoveme
  00f02	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00f05	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00f08	85 c9		 test	 ecx, ecx
  00f0a	7d 09		 jge	 SHORT $LN112@P_3dMoveme
$LN114@P_3dMoveme:

; 2750 : 					movepushforward = 0;

  00f0c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _movepushforward$[ebp], 0
  00f13	eb 2e		 jmp	 SHORT $LN117@P_3dMoveme
$LN112@P_3dMoveme:

; 2751 : 				else if (!(player->pflags & PF_STARTDASH))

  00f15	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f18	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00f1e	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00f24	75 16		 jne	 SHORT $LN116@P_3dMoveme

; 2752 : 					movepushforward = FixedDiv(movepushforward, 16*FRACUNIT);

  00f26	68 00 00 10 00	 push	 1048576			; 00100000H
  00f2b	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00f2e	50		 push	 eax
  00f2f	e8 00 00 00 00	 call	 _FixedDiv
  00f34	83 c4 08	 add	 esp, 8
  00f37	89 45 e4	 mov	 DWORD PTR _movepushforward$[ebp], eax
  00f3a	eb 07		 jmp	 SHORT $LN117@P_3dMoveme
$LN116@P_3dMoveme:

; 2753 : 				else
; 2754 : 					movepushforward = 0;

  00f3c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _movepushforward$[ebp], 0
$LN117@P_3dMoveme:

; 2755 : 			}
; 2756 : 
; 2757 : 			movepushsideangle = controldirection;

  00f43	8b 45 cc	 mov	 eax, DWORD PTR _controldirection$12[ebp]
  00f46	89 45 f4	 mov	 DWORD PTR _movepushsideangle$[ebp], eax

; 2758 : 
; 2759 : 			if (player->speed < topspeed)

  00f49	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f4c	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00f52	3b 4d f0	 cmp	 ecx, DWORD PTR _topspeed$[ebp]
  00f55	7d 18		 jge	 SHORT $LN118@P_3dMoveme

; 2760 : 				P_Thrust(player->mo, controldirection, movepushforward);

  00f57	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00f5a	50		 push	 eax
  00f5b	8b 4d cc	 mov	 ecx, DWORD PTR _controldirection$12[ebp]
  00f5e	51		 push	 ecx
  00f5f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f62	8b 02		 mov	 eax, DWORD PTR [edx]
  00f64	50		 push	 eax
  00f65	e8 00 00 00 00	 call	 _P_Thrust
  00f6a	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f6d	eb 46		 jmp	 SHORT $LN122@P_3dMoveme
$LN118@P_3dMoveme:

; 2761 : 			else if ((mforward) && (cbackward))

  00f6f	83 7d dc 00	 cmp	 DWORD PTR _mforward$[ebp], 0
  00f73	74 1e		 je	 SHORT $LN120@P_3dMoveme
  00f75	83 7d b0 00	 cmp	 DWORD PTR _cbackward$5[ebp], 0
  00f79	74 18		 je	 SHORT $LN120@P_3dMoveme

; 2762 : 				P_Thrust(player->mo, controldirection, movepushforward);

  00f7b	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00f7e	50		 push	 eax
  00f7f	8b 4d cc	 mov	 ecx, DWORD PTR _controldirection$12[ebp]
  00f82	51		 push	 ecx
  00f83	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f86	8b 02		 mov	 eax, DWORD PTR [edx]
  00f88	50		 push	 eax
  00f89	e8 00 00 00 00	 call	 _P_Thrust
  00f8e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f91	eb 22		 jmp	 SHORT $LN122@P_3dMoveme
$LN120@P_3dMoveme:

; 2763 : 			else if ((mbackward) && (cforward))

  00f93	83 7d d8 00	 cmp	 DWORD PTR _mbackward$[ebp], 0
  00f97	74 1c		 je	 SHORT $LN122@P_3dMoveme
  00f99	83 7d b4 00	 cmp	 DWORD PTR _cforward$6[ebp], 0
  00f9d	74 16		 je	 SHORT $LN122@P_3dMoveme

; 2764 : 				P_Thrust(player->mo, controldirection, movepushforward);

  00f9f	8b 45 e4	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00fa2	50		 push	 eax
  00fa3	8b 4d cc	 mov	 ecx, DWORD PTR _controldirection$12[ebp]
  00fa6	51		 push	 ecx
  00fa7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00faa	8b 02		 mov	 eax, DWORD PTR [edx]
  00fac	50		 push	 eax
  00fad	e8 00 00 00 00	 call	 _P_Thrust
  00fb2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN122@P_3dMoveme:

; 2765 : 		}
; 2766 : 	}

  00fb5	e9 64 06 00 00	 jmp	 $LN177@P_3dMoveme
$LN93@P_3dMoveme:

; 2767 : 	else if (netgame || (player == &players[consoleplayer] && !cv_analog.value)
; 2768 : 		|| (splitscreen && player == &players[secondarydisplayplayer]

  00fba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00fc1	75 4f		 jne	 SHORT $LN124@P_3dMoveme
  00fc3	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00fcd	05 00 00 00 00	 add	 eax, OFFSET _players
  00fd2	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00fd5	75 09		 jne	 SHORT $LN125@P_3dMoveme
  00fd7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00fde	74 32		 je	 SHORT $LN124@P_3dMoveme
$LN125@P_3dMoveme:
  00fe0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00fe7	0f 84 31 06 00
	00		 je	 $LN177@P_3dMoveme
  00fed	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00ff7	05 00 00 00 00	 add	 eax, OFFSET _players
  00ffc	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00fff	0f 85 19 06 00
	00		 jne	 $LN177@P_3dMoveme
  01005	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  0100c	0f 85 0c 06 00
	00		 jne	 $LN177@P_3dMoveme
$LN124@P_3dMoveme:

; 2769 : 		&& !cv_analog2.value))
; 2770 : 	{
; 2771 : 		if (player->climbing)

  01012	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01015	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0101c	0f 84 4c 01 00
	00		 je	 $LN126@P_3dMoveme

; 2772 : 		{
; 2773 : 			if (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]))

  01022	b8 04 00 00 00	 mov	 eax, 4
  01027	6b c8 0f	 imul	 ecx, eax, 15
  0102a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0102d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  01032	74 70		 je	 SHORT $LN128@P_3dMoveme
  01034	b8 04 00 00 00	 mov	 eax, 4
  01039	6b c8 18	 imul	 ecx, eax, 24
  0103c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0103f	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  01043	83 e0 7f	 and	 eax, 127		; 0000007fH
  01046	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  01049	75 59		 jne	 SHORT $LN128@P_3dMoveme

; 2774 : 				P_InstaThrust(player->mo, player->mo->angle-ANGLE_90, FIXEDSCALE((cmd->sidemove/5)*FRACUNIT, player->mo->scale));

  0104b	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0104e	0f be 40 01	 movsx	 eax, BYTE PTR [eax+1]
  01052	99		 cdq
  01053	b9 05 00 00 00	 mov	 ecx, 5
  01058	f7 f9		 idiv	 ecx
  0105a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0105d	50		 push	 eax
  0105e	68 00 00 64 00	 push	 6553600			; 00640000H
  01063	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01066	8b 02		 mov	 eax, DWORD PTR [edx]
  01068	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0106f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01072	51		 push	 ecx
  01073	e8 00 00 00 00	 call	 _FixedDiv
  01078	83 c4 08	 add	 esp, 8
  0107b	50		 push	 eax
  0107c	e8 00 00 00 00	 call	 _FixedMul
  01081	83 c4 08	 add	 esp, 8
  01084	50		 push	 eax
  01085	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01088	8b 02		 mov	 eax, DWORD PTR [edx]
  0108a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0108d	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  01093	51		 push	 ecx
  01094	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01097	8b 02		 mov	 eax, DWORD PTR [edx]
  01099	50		 push	 eax
  0109a	e8 00 00 00 00	 call	 _P_InstaThrust
  0109f	83 c4 0c	 add	 esp, 12			; 0000000cH
  010a2	eb 57		 jmp	 SHORT $LN129@P_3dMoveme
$LN128@P_3dMoveme:

; 2775 : 			else
; 2776 : 				P_InstaThrust(player->mo, player->mo->angle-ANGLE_90, FIXEDSCALE((cmd->sidemove/10)*FRACUNIT, player->mo->scale));

  010a4	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  010a7	0f be 40 01	 movsx	 eax, BYTE PTR [eax+1]
  010ab	99		 cdq
  010ac	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  010b1	f7 f9		 idiv	 ecx
  010b3	c1 e0 10	 shl	 eax, 16			; 00000010H
  010b6	50		 push	 eax
  010b7	68 00 00 64 00	 push	 6553600			; 00640000H
  010bc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  010bf	8b 02		 mov	 eax, DWORD PTR [edx]
  010c1	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  010c8	c1 e1 10	 shl	 ecx, 16			; 00000010H
  010cb	51		 push	 ecx
  010cc	e8 00 00 00 00	 call	 _FixedDiv
  010d1	83 c4 08	 add	 esp, 8
  010d4	50		 push	 eax
  010d5	e8 00 00 00 00	 call	 _FixedMul
  010da	83 c4 08	 add	 esp, 8
  010dd	50		 push	 eax
  010de	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  010e1	8b 02		 mov	 eax, DWORD PTR [edx]
  010e3	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  010e6	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  010ec	51		 push	 ecx
  010ed	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  010f0	8b 02		 mov	 eax, DWORD PTR [edx]
  010f2	50		 push	 eax
  010f3	e8 00 00 00 00	 call	 _P_InstaThrust
  010f8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN129@P_3dMoveme:

; 2777 : 			player->mo->momx = FIXEDSCALE(player->mo->momx,player->mo->scale);

  010fb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  01100	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  01103	52		 push	 edx
  01104	68 00 00 64 00	 push	 6553600			; 00640000H
  01109	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0110c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0110e	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  01115	c1 e2 10	 shl	 edx, 16			; 00000010H
  01118	52		 push	 edx
  01119	e8 00 00 00 00	 call	 _FixedDiv
  0111e	83 c4 08	 add	 esp, 8
  01121	50		 push	 eax
  01122	e8 00 00 00 00	 call	 _FixedMul
  01127	83 c4 08	 add	 esp, 8
  0112a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0112d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0112f	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 2778 : 			player->mo->momy = FIXEDSCALE(player->mo->momy,player->mo->scale);

  01132	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01135	8b 08		 mov	 ecx, DWORD PTR [eax]
  01137	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0113a	52		 push	 edx
  0113b	68 00 00 64 00	 push	 6553600			; 00640000H
  01140	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01143	8b 08		 mov	 ecx, DWORD PTR [eax]
  01145	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0114c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0114f	52		 push	 edx
  01150	e8 00 00 00 00	 call	 _FixedDiv
  01155	83 c4 08	 add	 esp, 8
  01158	50		 push	 eax
  01159	e8 00 00 00 00	 call	 _FixedMul
  0115e	83 c4 08	 add	 esp, 8
  01161	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01164	8b 11		 mov	 edx, DWORD PTR [ecx]
  01166	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 2779 : 		}

  01169	e9 b0 04 00 00	 jmp	 $LN177@P_3dMoveme
$LN126@P_3dMoveme:

; 2780 : 		else if (cmd->sidemove && !(player->pflags & PF_GLIDING) && !player->exiting && !player->climbing && !(!(player->pflags & PF_SLIDING) && player->mo->state == &states[player->mo->info->painstate] && player->powers[pw_flashing]))

  0116e	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  01171	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  01175	85 c9		 test	 ecx, ecx
  01177	0f 84 a1 04 00
	00		 je	 $LN177@P_3dMoveme
  0117d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01180	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01186	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  0118c	0f 85 8c 04 00
	00		 jne	 $LN177@P_3dMoveme
  01192	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01195	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  0119c	0f 85 7c 04 00
	00		 jne	 $LN177@P_3dMoveme
  011a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011a5	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  011ac	0f 85 6c 04 00
	00		 jne	 $LN177@P_3dMoveme
  011b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011b5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  011bb	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  011c1	75 33		 jne	 SHORT $LN131@P_3dMoveme
  011c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  011c8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  011cb	8b 02		 mov	 eax, DWORD PTR [edx]
  011cd	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  011d3	6b 42 1c 1c	 imul	 eax, DWORD PTR [edx+28], 28
  011d7	05 00 00 00 00	 add	 eax, OFFSET _states
  011dc	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  011df	75 15		 jne	 SHORT $LN131@P_3dMoveme
  011e1	b8 04 00 00 00	 mov	 eax, 4
  011e6	d1 e0		 shl	 eax, 1
  011e8	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  011eb	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  011f0	0f 85 28 04 00
	00		 jne	 $LN177@P_3dMoveme
$LN131@P_3dMoveme:

; 2781 : 		{
; 2782 : 			boolean mright;
; 2783 : 			boolean mleft;
; 2784 : 			angle_t sideangle;
; 2785 : 
; 2786 : 			sideangle = player->mo->angle - ANGLE_90;

  011f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  011fb	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  011fe	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  01204	89 55 a0	 mov	 DWORD PTR _sideangle$1[ebp], edx

; 2787 : 
; 2788 : 			// forward
; 2789 : 			if ((player->rmomx > 0 && player->rmomy > 0) && (/*sideangle >= 0 &&*/ sideangle < ANGLE_90)) // Quadrant 1

  01207	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0120a	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  01211	7e 21		 jle	 SHORT $LN132@P_3dMoveme
  01213	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01216	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  0121d	7e 15		 jle	 SHORT $LN132@P_3dMoveme
  0121f	81 7d a0 00 00
	00 40		 cmp	 DWORD PTR _sideangle$1[ebp], 1073741824 ; 40000000H
  01226	73 0c		 jae	 SHORT $LN132@P_3dMoveme

; 2790 : 				mright = 1;

  01228	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 1
  0122f	e9 3c 01 00 00	 jmp	 $LN148@P_3dMoveme
$LN132@P_3dMoveme:

; 2791 : 			else if ((player->rmomx < 0 && player->rmomy > 0) && (sideangle >= ANGLE_90 && sideangle < ANGLE_180)) // Quadrant 2

  01234	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01237	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  0123e	7d 2a		 jge	 SHORT $LN134@P_3dMoveme
  01240	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01243	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  0124a	7e 1e		 jle	 SHORT $LN134@P_3dMoveme
  0124c	81 7d a0 00 00
	00 40		 cmp	 DWORD PTR _sideangle$1[ebp], 1073741824 ; 40000000H
  01253	72 15		 jb	 SHORT $LN134@P_3dMoveme
  01255	81 7d a0 00 00
	00 80		 cmp	 DWORD PTR _sideangle$1[ebp], -2147483648 ; 80000000H
  0125c	73 0c		 jae	 SHORT $LN134@P_3dMoveme

; 2792 : 				mright = 1;

  0125e	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 1
  01265	e9 06 01 00 00	 jmp	 $LN148@P_3dMoveme
$LN134@P_3dMoveme:

; 2793 : 			else if ((player->rmomx < 0 && player->rmomy < 0) && (sideangle >= ANGLE_180 && sideangle < ANGLE_270)) // Quadrant 3

  0126a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0126d	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  01274	7d 2a		 jge	 SHORT $LN136@P_3dMoveme
  01276	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01279	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  01280	7d 1e		 jge	 SHORT $LN136@P_3dMoveme
  01282	81 7d a0 00 00
	00 80		 cmp	 DWORD PTR _sideangle$1[ebp], -2147483648 ; 80000000H
  01289	72 15		 jb	 SHORT $LN136@P_3dMoveme
  0128b	81 7d a0 00 00
	00 c0		 cmp	 DWORD PTR _sideangle$1[ebp], -1073741824 ; c0000000H
  01292	73 0c		 jae	 SHORT $LN136@P_3dMoveme

; 2794 : 				mright = 1;

  01294	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 1
  0129b	e9 d0 00 00 00	 jmp	 $LN148@P_3dMoveme
$LN136@P_3dMoveme:

; 2795 : 			else if ((player->rmomx > 0 && player->rmomy < 0) && ((sideangle >= ANGLE_270 /*&& (sideangle <= ANGLE_MAX)*/) || (/*sideangle >= 0 &&*/ sideangle <= ANGLE_45))) // Quadrant 4

  012a0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012a3	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  012aa	7e 2a		 jle	 SHORT $LN138@P_3dMoveme
  012ac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012af	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  012b6	7d 1e		 jge	 SHORT $LN138@P_3dMoveme
  012b8	81 7d a0 00 00
	00 c0		 cmp	 DWORD PTR _sideangle$1[ebp], -1073741824 ; c0000000H
  012bf	73 09		 jae	 SHORT $LN140@P_3dMoveme
  012c1	81 7d a0 00 00
	00 20		 cmp	 DWORD PTR _sideangle$1[ebp], 536870912 ; 20000000H
  012c8	77 0c		 ja	 SHORT $LN138@P_3dMoveme
$LN140@P_3dMoveme:

; 2796 : 				mright = 1;

  012ca	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 1
  012d1	e9 9a 00 00 00	 jmp	 $LN148@P_3dMoveme
$LN138@P_3dMoveme:

; 2797 : 			else if (player->rmomx > 0 && ((sideangle >= ANGLE_315 /*&& sideangle <= ANGLE_MAX*/)))

  012d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012d9	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  012e0	7e 12		 jle	 SHORT $LN141@P_3dMoveme
  012e2	81 7d a0 00 00
	00 e0		 cmp	 DWORD PTR _sideangle$1[ebp], -536870912 ; e0000000H
  012e9	72 09		 jb	 SHORT $LN141@P_3dMoveme

; 2798 : 				mright = 1;

  012eb	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 1
  012f2	eb 7c		 jmp	 SHORT $LN148@P_3dMoveme
$LN141@P_3dMoveme:

; 2799 : 			else if (player->rmomx < 0 && (sideangle >= ANGLE_135 && sideangle <= ANGLE_225))

  012f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012f7	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  012fe	7d 1b		 jge	 SHORT $LN143@P_3dMoveme
  01300	81 7d a0 00 00
	00 60		 cmp	 DWORD PTR _sideangle$1[ebp], 1610612736 ; 60000000H
  01307	72 12		 jb	 SHORT $LN143@P_3dMoveme
  01309	81 7d a0 00 00
	00 a0		 cmp	 DWORD PTR _sideangle$1[ebp], -1610612736 ; a0000000H
  01310	77 09		 ja	 SHORT $LN143@P_3dMoveme

; 2800 : 				mright = 1;

  01312	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 1
  01319	eb 55		 jmp	 SHORT $LN148@P_3dMoveme
$LN143@P_3dMoveme:

; 2801 : 			else if (player->rmomy > 0 && (sideangle >= ANGLE_45 && sideangle <= ANGLE_135))

  0131b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0131e	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  01325	7e 1b		 jle	 SHORT $LN145@P_3dMoveme
  01327	81 7d a0 00 00
	00 20		 cmp	 DWORD PTR _sideangle$1[ebp], 536870912 ; 20000000H
  0132e	72 12		 jb	 SHORT $LN145@P_3dMoveme
  01330	81 7d a0 00 00
	00 60		 cmp	 DWORD PTR _sideangle$1[ebp], 1610612736 ; 60000000H
  01337	77 09		 ja	 SHORT $LN145@P_3dMoveme

; 2802 : 				mright = 1;

  01339	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 1
  01340	eb 2e		 jmp	 SHORT $LN148@P_3dMoveme
$LN145@P_3dMoveme:

; 2803 : 			else if (player->rmomy < 0 && (sideangle >= ANGLE_225 && sideangle <= ANGLE_315))

  01342	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01345	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  0134c	7d 1b		 jge	 SHORT $LN147@P_3dMoveme
  0134e	81 7d a0 00 00
	00 a0		 cmp	 DWORD PTR _sideangle$1[ebp], -1610612736 ; a0000000H
  01355	72 12		 jb	 SHORT $LN147@P_3dMoveme
  01357	81 7d a0 00 00
	00 e0		 cmp	 DWORD PTR _sideangle$1[ebp], -536870912 ; e0000000H
  0135e	77 09		 ja	 SHORT $LN147@P_3dMoveme

; 2804 : 				mright = 1;

  01360	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 1
  01367	eb 07		 jmp	 SHORT $LN148@P_3dMoveme
$LN147@P_3dMoveme:

; 2805 : 			else
; 2806 : 				mright = 0;

  01369	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _mright$3[ebp], 0
$LN148@P_3dMoveme:

; 2807 : 			// backward
; 2808 : 			if ((player->rmomx > 0 && player->rmomy > 0) && (sideangle >= ANGLE_180 && sideangle < ANGLE_270)) // Quadrant 3

  01370	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01373	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  0137a	7e 2a		 jle	 SHORT $LN149@P_3dMoveme
  0137c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0137f	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  01386	7e 1e		 jle	 SHORT $LN149@P_3dMoveme
  01388	81 7d a0 00 00
	00 80		 cmp	 DWORD PTR _sideangle$1[ebp], -2147483648 ; 80000000H
  0138f	72 15		 jb	 SHORT $LN149@P_3dMoveme
  01391	81 7d a0 00 00
	00 c0		 cmp	 DWORD PTR _sideangle$1[ebp], -1073741824 ; c0000000H
  01398	73 0c		 jae	 SHORT $LN149@P_3dMoveme

; 2809 : 				mleft = 1;

  0139a	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 1
  013a1	e9 33 01 00 00	 jmp	 $LN165@P_3dMoveme
$LN149@P_3dMoveme:

; 2810 : 			else if ((player->rmomx < 0 && player->rmomy > 0) && (sideangle >= ANGLE_270 /*&& (sideangle <= ANGLE_MAX)*/)) // Quadrant 4

  013a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013a9	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  013b0	7d 21		 jge	 SHORT $LN151@P_3dMoveme
  013b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013b5	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  013bc	7e 15		 jle	 SHORT $LN151@P_3dMoveme
  013be	81 7d a0 00 00
	00 c0		 cmp	 DWORD PTR _sideangle$1[ebp], -1073741824 ; c0000000H
  013c5	72 0c		 jb	 SHORT $LN151@P_3dMoveme

; 2811 : 				mleft = 1;

  013c7	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 1
  013ce	e9 06 01 00 00	 jmp	 $LN165@P_3dMoveme
$LN151@P_3dMoveme:

; 2812 : 			else if ((player->rmomx < 0 && player->rmomy < 0) && (/*sideangle >= 0 &&*/ sideangle < ANGLE_90)) // Quadrant 1

  013d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013d6	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  013dd	7d 21		 jge	 SHORT $LN153@P_3dMoveme
  013df	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013e2	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  013e9	7d 15		 jge	 SHORT $LN153@P_3dMoveme
  013eb	81 7d a0 00 00
	00 40		 cmp	 DWORD PTR _sideangle$1[ebp], 1073741824 ; 40000000H
  013f2	73 0c		 jae	 SHORT $LN153@P_3dMoveme

; 2813 : 				mleft = 1;

  013f4	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 1
  013fb	e9 d9 00 00 00	 jmp	 $LN165@P_3dMoveme
$LN153@P_3dMoveme:

; 2814 : 			else if ((player->rmomx > 0 && player->rmomy < 0) && (sideangle >= ANGLE_90 && sideangle < ANGLE_180)) // Quadrant 2

  01400	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01403	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  0140a	7e 2a		 jle	 SHORT $LN155@P_3dMoveme
  0140c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0140f	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  01416	7d 1e		 jge	 SHORT $LN155@P_3dMoveme
  01418	81 7d a0 00 00
	00 40		 cmp	 DWORD PTR _sideangle$1[ebp], 1073741824 ; 40000000H
  0141f	72 15		 jb	 SHORT $LN155@P_3dMoveme
  01421	81 7d a0 00 00
	00 80		 cmp	 DWORD PTR _sideangle$1[ebp], -2147483648 ; 80000000H
  01428	73 0c		 jae	 SHORT $LN155@P_3dMoveme

; 2815 : 				mleft = 1;

  0142a	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 1
  01431	e9 a3 00 00 00	 jmp	 $LN165@P_3dMoveme
$LN155@P_3dMoveme:

; 2816 : 			else if (player->rmomx < 0 && ((sideangle >= ANGLE_315 /*&& sideangle <= ANGLE_MAX*/) || (/*sideangle >= 0 &&*/ sideangle <= ANGLE_45)))

  01436	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01439	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  01440	7d 1b		 jge	 SHORT $LN157@P_3dMoveme
  01442	81 7d a0 00 00
	00 e0		 cmp	 DWORD PTR _sideangle$1[ebp], -536870912 ; e0000000H
  01449	73 09		 jae	 SHORT $LN159@P_3dMoveme
  0144b	81 7d a0 00 00
	00 20		 cmp	 DWORD PTR _sideangle$1[ebp], 536870912 ; 20000000H
  01452	77 09		 ja	 SHORT $LN157@P_3dMoveme
$LN159@P_3dMoveme:

; 2817 : 				mleft = 1;

  01454	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 1
  0145b	eb 7c		 jmp	 SHORT $LN165@P_3dMoveme
$LN157@P_3dMoveme:

; 2818 : 			else if (player->rmomx > 0 && (sideangle >= ANGLE_135 && sideangle <= ANGLE_225))

  0145d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01460	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  01467	7e 1b		 jle	 SHORT $LN160@P_3dMoveme
  01469	81 7d a0 00 00
	00 60		 cmp	 DWORD PTR _sideangle$1[ebp], 1610612736 ; 60000000H
  01470	72 12		 jb	 SHORT $LN160@P_3dMoveme
  01472	81 7d a0 00 00
	00 a0		 cmp	 DWORD PTR _sideangle$1[ebp], -1610612736 ; a0000000H
  01479	77 09		 ja	 SHORT $LN160@P_3dMoveme

; 2819 : 				mleft = 1;

  0147b	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 1
  01482	eb 55		 jmp	 SHORT $LN165@P_3dMoveme
$LN160@P_3dMoveme:

; 2820 : 			else if (player->rmomy < 0 && (sideangle >= ANGLE_45 && sideangle <= ANGLE_135))

  01484	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01487	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  0148e	7d 1b		 jge	 SHORT $LN162@P_3dMoveme
  01490	81 7d a0 00 00
	00 20		 cmp	 DWORD PTR _sideangle$1[ebp], 536870912 ; 20000000H
  01497	72 12		 jb	 SHORT $LN162@P_3dMoveme
  01499	81 7d a0 00 00
	00 60		 cmp	 DWORD PTR _sideangle$1[ebp], 1610612736 ; 60000000H
  014a0	77 09		 ja	 SHORT $LN162@P_3dMoveme

; 2821 : 				mleft = 1;

  014a2	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 1
  014a9	eb 2e		 jmp	 SHORT $LN165@P_3dMoveme
$LN162@P_3dMoveme:

; 2822 : 			else if (player->rmomy > 0 && (sideangle >= ANGLE_225 && sideangle <= ANGLE_315))

  014ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  014ae	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  014b5	7e 1b		 jle	 SHORT $LN164@P_3dMoveme
  014b7	81 7d a0 00 00
	00 a0		 cmp	 DWORD PTR _sideangle$1[ebp], -1610612736 ; a0000000H
  014be	72 12		 jb	 SHORT $LN164@P_3dMoveme
  014c0	81 7d a0 00 00
	00 e0		 cmp	 DWORD PTR _sideangle$1[ebp], -536870912 ; e0000000H
  014c7	77 09		 ja	 SHORT $LN164@P_3dMoveme

; 2823 : 				mleft = 1;

  014c9	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 1
  014d0	eb 07		 jmp	 SHORT $LN165@P_3dMoveme
$LN164@P_3dMoveme:

; 2824 : 			else // Put in 'or' checks here!
; 2825 : 				mleft = 0;

  014d2	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _mleft$2[ebp], 0
$LN165@P_3dMoveme:

; 2826 : 
; 2827 : 			movepushside = cmd->sidemove * (thrustfactor*acceleration);

  014d9	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  014dc	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  014e0	8b 55 e8	 mov	 edx, DWORD PTR _thrustfactor$[ebp]
  014e3	0f af 55 ec	 imul	 edx, DWORD PTR _acceleration$[ebp]
  014e7	0f af ca	 imul	 ecx, edx
  014ea	89 4d e0	 mov	 DWORD PTR _movepushside$[ebp], ecx

; 2828 : 
; 2829 : 			if (player->powers[pw_sneakers] || player->powers[pw_super])

  014ed	b8 04 00 00 00	 mov	 eax, 4
  014f2	c1 e0 00	 shl	 eax, 0
  014f5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  014f8	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  014fd	75 12		 jne	 SHORT $LN167@P_3dMoveme
  014ff	b8 04 00 00 00	 mov	 eax, 4
  01504	6b c8 0f	 imul	 ecx, eax, 15
  01507	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0150a	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0150f	74 08		 je	 SHORT $LN166@P_3dMoveme
$LN167@P_3dMoveme:

; 2830 : 				movepushside *= 2;

  01511	8b 45 e0	 mov	 eax, DWORD PTR _movepushside$[ebp]
  01514	d1 e0		 shl	 eax, 1
  01516	89 45 e0	 mov	 DWORD PTR _movepushside$[ebp], eax
$LN166@P_3dMoveme:

; 2831 : 
; 2832 : 			if (!onground)

  01519	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  01520	75 47		 jne	 SHORT $LN169@P_3dMoveme

; 2833 : 			{
; 2834 : 				movepushside >>= 2;

  01522	8b 45 e0	 mov	 eax, DWORD PTR _movepushside$[ebp]
  01525	c1 f8 02	 sar	 eax, 2
  01528	89 45 e0	 mov	 DWORD PTR _movepushside$[ebp], eax

; 2835 : 
; 2836 : 				//Lower speed if over "max" flight speed and greatly reduce movepushslide.
; 2837 : 				if (player->powers[pw_tailsfly] && player->speed > topspeed)

  0152b	b8 04 00 00 00	 mov	 eax, 4
  01530	6b c8 05	 imul	 ecx, eax, 5
  01533	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01536	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0153b	74 2c		 je	 SHORT $LN169@P_3dMoveme
  0153d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01540	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  01546	3b 4d f0	 cmp	 ecx, DWORD PTR _topspeed$[ebp]
  01549	7e 1e		 jle	 SHORT $LN169@P_3dMoveme

; 2838 : 				{
; 2839 : 					player->speed = topspeed - 1;

  0154b	8b 45 f0	 mov	 eax, DWORD PTR _topspeed$[ebp]
  0154e	83 e8 01	 sub	 eax, 1
  01551	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01554	89 81 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], eax

; 2840 : 					movepushside /= 8;

  0155a	8b 45 e0	 mov	 eax, DWORD PTR _movepushside$[ebp]
  0155d	99		 cdq
  0155e	83 e2 07	 and	 edx, 7
  01561	03 c2		 add	 eax, edx
  01563	c1 f8 03	 sar	 eax, 3
  01566	89 45 e0	 mov	 DWORD PTR _movepushside$[ebp], eax
$LN169@P_3dMoveme:

; 2841 : 				}
; 2842 : 			}
; 2843 : 
; 2844 : 			// Allow a bit of movement while spinning
; 2845 : 			if (player->pflags & PF_SPINNING)

  01569	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0156c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01572	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  01578	74 2e		 je	 SHORT $LN172@P_3dMoveme

; 2846 : 			{
; 2847 : 				if (!(player->pflags & PF_STARTDASH))

  0157a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0157d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01583	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  01589	75 16		 jne	 SHORT $LN171@P_3dMoveme

; 2848 : 					movepushside = FixedDiv(movepushside,16*FRACUNIT);

  0158b	68 00 00 10 00	 push	 1048576			; 00100000H
  01590	8b 45 e0	 mov	 eax, DWORD PTR _movepushside$[ebp]
  01593	50		 push	 eax
  01594	e8 00 00 00 00	 call	 _FixedDiv
  01599	83 c4 08	 add	 esp, 8
  0159c	89 45 e0	 mov	 DWORD PTR _movepushside$[ebp], eax
  0159f	eb 07		 jmp	 SHORT $LN172@P_3dMoveme
$LN171@P_3dMoveme:

; 2849 : 				else
; 2850 : 					movepushside = 0;

  015a1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _movepushside$[ebp], 0
$LN172@P_3dMoveme:

; 2851 : 			}
; 2852 : 
; 2853 : 			// Finally move the player now that his speed/direction has been decided.
; 2854 : 			if (player->speed < topspeed)

  015a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  015ab	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  015b1	3b 4d f0	 cmp	 ecx, DWORD PTR _topspeed$[ebp]
  015b4	7d 18		 jge	 SHORT $LN173@P_3dMoveme

; 2855 : 				P_Thrust(player->mo, movepushsideangle, movepushside);

  015b6	8b 45 e0	 mov	 eax, DWORD PTR _movepushside$[ebp]
  015b9	50		 push	 eax
  015ba	8b 4d f4	 mov	 ecx, DWORD PTR _movepushsideangle$[ebp]
  015bd	51		 push	 ecx
  015be	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  015c1	8b 02		 mov	 eax, DWORD PTR [edx]
  015c3	50		 push	 eax
  015c4	e8 00 00 00 00	 call	 _P_Thrust
  015c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  015cc	eb 50		 jmp	 SHORT $LN177@P_3dMoveme
$LN173@P_3dMoveme:

; 2856 : 			else if ((mright) && (cmd->sidemove < 0))

  015ce	83 7d a8 00	 cmp	 DWORD PTR _mright$3[ebp], 0
  015d2	74 23		 je	 SHORT $LN175@P_3dMoveme
  015d4	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  015d7	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  015db	85 c9		 test	 ecx, ecx
  015dd	7d 18		 jge	 SHORT $LN175@P_3dMoveme

; 2857 : 				P_Thrust(player->mo, movepushsideangle, movepushside);

  015df	8b 45 e0	 mov	 eax, DWORD PTR _movepushside$[ebp]
  015e2	50		 push	 eax
  015e3	8b 4d f4	 mov	 ecx, DWORD PTR _movepushsideangle$[ebp]
  015e6	51		 push	 ecx
  015e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  015ea	8b 02		 mov	 eax, DWORD PTR [edx]
  015ec	50		 push	 eax
  015ed	e8 00 00 00 00	 call	 _P_Thrust
  015f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  015f5	eb 27		 jmp	 SHORT $LN177@P_3dMoveme
$LN175@P_3dMoveme:

; 2858 : 			else if ((mleft) && (cmd->sidemove > 0))

  015f7	83 7d a4 00	 cmp	 DWORD PTR _mleft$2[ebp], 0
  015fb	74 21		 je	 SHORT $LN177@P_3dMoveme
  015fd	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  01600	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  01604	85 c9		 test	 ecx, ecx
  01606	7e 16		 jle	 SHORT $LN177@P_3dMoveme

; 2859 : 				P_Thrust(player->mo, movepushsideangle, movepushside);

  01608	8b 45 e0	 mov	 eax, DWORD PTR _movepushside$[ebp]
  0160b	50		 push	 eax
  0160c	8b 4d f4	 mov	 ecx, DWORD PTR _movepushsideangle$[ebp]
  0160f	51		 push	 ecx
  01610	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01613	8b 02		 mov	 eax, DWORD PTR [edx]
  01615	50		 push	 eax
  01616	e8 00 00 00 00	 call	 _P_Thrust
  0161b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN177@P_3dMoveme:

; 2860 : 		}
; 2861 : 	}
; 2862 : }

  0161e	5f		 pop	 edi
  0161f	5e		 pop	 esi
  01620	5b		 pop	 ebx
  01621	8b e5		 mov	 esp, ebp
  01623	5d		 pop	 ebp
  01624	c3		 ret	 0
_P_3dMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_2dMovement
_TEXT	SEGMENT
tv342 = -96						; size = 4
_normalspd$ = -28					; size = 4
_movepushangle$ = -24					; size = 4
_movepushforward$ = -20					; size = 4
_thrustfactor$ = -16					; size = 4
_acceleration$ = -12					; size = 4
_topspeed$ = -8						; size = 4
_cmd$ = -4						; size = 4
_player$ = 8						; size = 4
_P_2dMovement PROC					; COMDAT

; 2295 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2296 : 	ticcmd_t *cmd;
; 2297 : 	INT32 topspeed, acceleration, thrustfactor;
; 2298 : 	fixed_t movepushforward = 0;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _movepushforward$[ebp], 0

; 2299 : 	angle_t movepushangle = 0;

  00010	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _movepushangle$[ebp], 0

; 2300 : 	fixed_t normalspd = player->normalspeed;

  00017	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001a	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  00020	89 4d e4	 mov	 DWORD PTR _normalspd$[ebp], ecx

; 2301 : 
; 2302 : 	cmd = &player->cmd;

  00023	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00026	83 c0 08	 add	 eax, 8
  00029	89 45 fc	 mov	 DWORD PTR _cmd$[ebp], eax

; 2303 : 
; 2304 : 	if (player->exiting
; 2305 : 		|| (player->pflags & PF_STASIS)
; 2306 : 		|| (player->powers[pw_nocontrol]) || (player->powers[pw_ingoop]))

  0002c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0002f	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00036	75 35		 jne	 SHORT $LN3@P_2dMoveme
  00038	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00041	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  00047	75 24		 jne	 SHORT $LN3@P_2dMoveme
  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	6b c8 1b	 imul	 ecx, eax, 27
  00051	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00054	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00059	75 12		 jne	 SHORT $LN3@P_2dMoveme
  0005b	b8 04 00 00 00	 mov	 eax, 4
  00060	6b c8 1c	 imul	 ecx, eax, 28
  00063	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00066	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0006b	74 7b		 je	 SHORT $LN5@P_2dMoveme
$LN3@P_2dMoveme:

; 2307 : 	{
; 2308 : 		cmd->forwardmove = cmd->sidemove = 0;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00070	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00077	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 2309 : 		if (player->pflags & PF_GLIDING)

  0007a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00083	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00089	74 18		 je	 SHORT $LN4@P_2dMoveme

; 2310 : 			player->pflags &= ~PF_GLIDING;

  0008b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00094	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  0009a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0009d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN4@P_2dMoveme:

; 2311 : 		if (player->pflags & PF_SPINNING && !player->exiting)

  000a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000ac	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  000b2	74 34		 je	 SHORT $LN5@P_2dMoveme
  000b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b7	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  000be	75 28		 jne	 SHORT $LN5@P_2dMoveme

; 2312 : 		{
; 2313 : 			player->pflags &= ~PF_SPINNING;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000c9	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  000cf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000d2	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2314 : 			P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  000d8	6a 01		 push	 1
  000da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  000e5	83 c4 08	 add	 esp, 8
$LN5@P_2dMoveme:

; 2315 : 		}
; 2316 : 	}
; 2317 : 
; 2318 : 	// cmomx/cmomy stands for the conveyor belt speed.
; 2319 : 	if (player->onconveyor == 2) // Wind/Current

  000e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000eb	83 b8 e4 01 00
	00 02		 cmp	 DWORD PTR [eax+484], 2
  000f2	75 3c		 jne	 SHORT $LN6@P_2dMoveme

; 2320 : 	{
; 2321 : 		//if (player->mo->z > player->mo->watertop || player->mo->z + player->mo->height < player->mo->waterbottom)
; 2322 : 		if (!(player->mo->eflags & MFE_UNDERWATER) && !(player->mo->eflags & MFE_TOUCHWATER))

  000f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000ff	83 e2 08	 and	 edx, 8
  00102	75 2a		 jne	 SHORT $LN8@P_2dMoveme
  00104	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00107	8b 08		 mov	 ecx, DWORD PTR [eax]
  00109	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0010f	83 e2 04	 and	 edx, 4
  00112	75 1a		 jne	 SHORT $LN8@P_2dMoveme

; 2323 : 			player->cmomx = player->cmomy = 0;

  00114	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00117	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00124	c7 81 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+316], 0
$LN8@P_2dMoveme:

; 2324 : 	}

  0012e	eb 6c		 jmp	 SHORT $LN11@P_2dMoveme
$LN6@P_2dMoveme:

; 2325 : 	else if (player->onconveyor == 4 && !P_IsObjectOnGround(player->mo)) // Actual conveyor belt

  00130	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00133	83 b8 e4 01 00
	00 04		 cmp	 DWORD PTR [eax+484], 4
  0013a	75 2e		 jne	 SHORT $LN9@P_2dMoveme
  0013c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0013f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  00147	83 c4 04	 add	 esp, 4
  0014a	85 c0		 test	 eax, eax
  0014c	75 1c		 jne	 SHORT $LN9@P_2dMoveme

; 2326 : 		player->cmomx = player->cmomy = 0;

  0014e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00151	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0015e	c7 81 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+316], 0
  00168	eb 32		 jmp	 SHORT $LN11@P_2dMoveme
$LN9@P_2dMoveme:

; 2327 : 	else if (player->onconveyor != 2 && player->onconveyor != 4)

  0016a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0016d	83 b8 e4 01 00
	00 02		 cmp	 DWORD PTR [eax+484], 2
  00174	74 26		 je	 SHORT $LN11@P_2dMoveme
  00176	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00179	83 b8 e4 01 00
	00 04		 cmp	 DWORD PTR [eax+484], 4
  00180	74 1a		 je	 SHORT $LN11@P_2dMoveme

; 2328 : 		player->cmomx = player->cmomy = 0;

  00182	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00185	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0
  0018f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00192	c7 81 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+316], 0
$LN11@P_2dMoveme:

; 2329 : 
; 2330 : 	player->rmomx = player->mo->momx - player->cmomx;

  0019c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019f	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001a4	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  001a7	2b 82 3c 01 00
	00		 sub	 eax, DWORD PTR [edx+316]
  001ad	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001b0	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 2331 : 	player->rmomy = player->mo->momy - player->cmomy;

  001b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001be	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  001c1	2b 82 40 01 00
	00		 sub	 eax, DWORD PTR [edx+320]
  001c7	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001ca	89 81 48 01 00
	00		 mov	 DWORD PTR [ecx+328], eax

; 2332 : 
; 2333 : 	// Calculates player's speed based on distance-of-a-line formula
; 2334 : 	player->speed = abs(player->rmomx)>>FRACBITS;

  001d0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d3	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 _abs
  001df	83 c4 04	 add	 esp, 4
  001e2	c1 f8 10	 sar	 eax, 16			; 00000010H
  001e5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001e8	89 82 0c 01 00
	00		 mov	 DWORD PTR [edx+268], eax

; 2335 : 
; 2336 : 	if (player->pflags & PF_GLIDING)

  001ee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001f7	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  001fd	0f 84 40 01 00
	00		 je	 $LN12@P_2dMoveme

; 2337 : 	{
; 2338 : 		// Angle fix.
; 2339 : 		if (player->mo->angle < ANGLE_180 && player->mo->angle > ANGLE_90)

  00203	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00206	8b 08		 mov	 ecx, DWORD PTR [eax]
  00208	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  0020f	73 1c		 jae	 SHORT $LN14@P_2dMoveme
  00211	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00214	8b 08		 mov	 ecx, DWORD PTR [eax]
  00216	81 79 24 00 00
	00 40		 cmp	 DWORD PTR [ecx+36], 1073741824 ; 40000000H
  0021d	76 0e		 jbe	 SHORT $LN14@P_2dMoveme

; 2340 : 			player->mo->angle = ANGLE_180;

  0021f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00222	8b 08		 mov	 ecx, DWORD PTR [eax]
  00224	c7 41 24 00 00
	00 80		 mov	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  0022b	eb 25		 jmp	 SHORT $LN16@P_2dMoveme
$LN14@P_2dMoveme:

; 2341 : 		else if (player->mo->angle < ANGLE_90 && player->mo->angle > 0)

  0022d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00230	8b 08		 mov	 ecx, DWORD PTR [eax]
  00232	81 79 24 00 00
	00 40		 cmp	 DWORD PTR [ecx+36], 1073741824 ; 40000000H
  00239	73 17		 jae	 SHORT $LN16@P_2dMoveme
  0023b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0023e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00240	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00244	76 0c		 jbe	 SHORT $LN16@P_2dMoveme

; 2342 : 			player->mo->angle = 0;

  00246	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00249	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024b	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
$LN16@P_2dMoveme:

; 2343 : 
; 2344 : 		if (cmd->sidemove > 0 && player->mo->angle != 0 && player->mo->angle >= ANGLE_180)

  00252	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00255	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00259	85 c9		 test	 ecx, ecx
  0025b	7e 34		 jle	 SHORT $LN17@P_2dMoveme
  0025d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00260	8b 08		 mov	 ecx, DWORD PTR [eax]
  00262	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00266	74 29		 je	 SHORT $LN17@P_2dMoveme
  00268	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0026b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026d	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  00274	72 1b		 jb	 SHORT $LN17@P_2dMoveme

; 2345 : 			player->mo->angle += (640/NEWTICRATERATIO)<<FRACBITS;

  00276	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00279	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0027e	81 c2 00 00 80
	02		 add	 edx, 41943040		; 02800000H
  00284	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00287	8b 08		 mov	 ecx, DWORD PTR [eax]
  00289	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0028c	e9 ad 00 00 00	 jmp	 $LN25@P_2dMoveme
$LN17@P_2dMoveme:

; 2346 : 		else if (cmd->sidemove < 0 && player->mo->angle != ANGLE_180 && (player->mo->angle > ANGLE_180 || player->mo->angle == 0))

  00291	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00294	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00298	85 c9		 test	 ecx, ecx
  0029a	7d 3f		 jge	 SHORT $LN19@P_2dMoveme
  0029c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0029f	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a1	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  002a8	74 31		 je	 SHORT $LN19@P_2dMoveme
  002aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  002af	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  002b6	77 0b		 ja	 SHORT $LN21@P_2dMoveme
  002b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002bd	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  002c1	75 18		 jne	 SHORT $LN19@P_2dMoveme
$LN21@P_2dMoveme:

; 2347 : 			player->mo->angle -= (640/NEWTICRATERATIO)<<FRACBITS;

  002c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c8	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  002cb	81 ea 00 00 80
	02		 sub	 edx, 41943040		; 02800000H
  002d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d6	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  002d9	eb 63		 jmp	 SHORT $LN25@P_2dMoveme
$LN19@P_2dMoveme:

; 2348 : 		else if (cmd->sidemove == 0)

  002db	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  002de	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  002e2	85 c9		 test	 ecx, ecx
  002e4	75 58		 jne	 SHORT $LN25@P_2dMoveme

; 2349 : 		{
; 2350 : 			if (player->mo->angle >= ANGLE_270)

  002e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002eb	81 79 24 00 00
	00 c0		 cmp	 DWORD PTR [ecx+36], -1073741824 ; c0000000H
  002f2	72 18		 jb	 SHORT $LN23@P_2dMoveme

; 2351 : 				player->mo->angle += (640/NEWTICRATERATIO)<<FRACBITS;

  002f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f9	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  002fc	81 c2 00 00 80
	02		 add	 edx, 41943040		; 02800000H
  00302	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00305	8b 08		 mov	 ecx, DWORD PTR [eax]
  00307	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0030a	eb 32		 jmp	 SHORT $LN25@P_2dMoveme
$LN23@P_2dMoveme:

; 2352 : 			else if (player->mo->angle < ANGLE_270 && player->mo->angle > ANGLE_180)

  0030c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0030f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00311	81 79 24 00 00
	00 c0		 cmp	 DWORD PTR [ecx+36], -1073741824 ; c0000000H
  00318	73 24		 jae	 SHORT $LN25@P_2dMoveme
  0031a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0031d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031f	81 79 24 00 00
	00 80		 cmp	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
  00326	76 16		 jbe	 SHORT $LN25@P_2dMoveme

; 2353 : 				player->mo->angle -= (640/NEWTICRATERATIO)<<FRACBITS;

  00328	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032d	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00330	81 ea 00 00 80
	02		 sub	 edx, 41943040		; 02800000H
  00336	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00339	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033b	89 51 24	 mov	 DWORD PTR [ecx+36], edx
$LN25@P_2dMoveme:

; 2354 : 		}
; 2355 : 	}

  0033e	e9 87 00 00 00	 jmp	 $LN30@P_2dMoveme
$LN12@P_2dMoveme:

; 2356 : 	else if (cmd->sidemove && !(player->climbing) && !(!(player->pflags & PF_SLIDING) && player->mo->state == &states[player->mo->info->painstate] && player->powers[pw_flashing]))

  00343	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00346	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  0034a	85 c9		 test	 ecx, ecx
  0034c	74 7c		 je	 SHORT $LN30@P_2dMoveme
  0034e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00351	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00358	75 70		 jne	 SHORT $LN30@P_2dMoveme
  0035a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0035d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00363	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00369	75 2f		 jne	 SHORT $LN27@P_2dMoveme
  0036b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0036e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00370	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00373	8b 02		 mov	 eax, DWORD PTR [edx]
  00375	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  0037b	6b 42 1c 1c	 imul	 eax, DWORD PTR [edx+28], 28
  0037f	05 00 00 00 00	 add	 eax, OFFSET _states
  00384	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00387	75 11		 jne	 SHORT $LN27@P_2dMoveme
  00389	b8 04 00 00 00	 mov	 eax, 4
  0038e	d1 e0		 shl	 eax, 1
  00390	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00393	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00398	75 30		 jne	 SHORT $LN30@P_2dMoveme
$LN27@P_2dMoveme:

; 2357 : 	{
; 2358 : 		if (cmd->sidemove > 0)

  0039a	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0039d	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  003a1	85 c9		 test	 ecx, ecx
  003a3	7e 0e		 jle	 SHORT $LN28@P_2dMoveme

; 2359 : 			player->mo->angle = 0;

  003a5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003aa	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  003b1	eb 17		 jmp	 SHORT $LN30@P_2dMoveme
$LN28@P_2dMoveme:

; 2360 : 		else if (cmd->sidemove < 0)

  003b3	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  003b6	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  003ba	85 c9		 test	 ecx, ecx
  003bc	7d 0c		 jge	 SHORT $LN30@P_2dMoveme

; 2361 : 			player->mo->angle = ANGLE_180;

  003be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c3	c7 41 24 00 00
	00 80		 mov	 DWORD PTR [ecx+36], -2147483648 ; 80000000H
$LN30@P_2dMoveme:

; 2362 : 	}
; 2363 : 
; 2364 : 	if (player == &players[consoleplayer])

  003ca	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  003d4	05 00 00 00 00	 add	 eax, OFFSET _players
  003d9	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  003dc	75 10		 jne	 SHORT $LN31@P_2dMoveme

; 2365 : 		localangle = player->mo->angle;

  003de	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e3	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  003e6	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  003ec	eb 2b		 jmp	 SHORT $LN33@P_2dMoveme
$LN31@P_2dMoveme:

; 2366 : 	else if (splitscreen && player == &players[secondarydisplayplayer])

  003ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  003f5	74 22		 je	 SHORT $LN33@P_2dMoveme
  003f7	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00401	05 00 00 00 00	 add	 eax, OFFSET _players
  00406	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00409	75 0e		 jne	 SHORT $LN33@P_2dMoveme

; 2367 : 		localangle2 = player->mo->angle;

  0040b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0040e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00410	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00413	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN33@P_2dMoveme:

; 2368 : 
; 2369 : 	if (player->pflags & PF_GLIDING)

  00419	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0041c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00422	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00428	74 0d		 je	 SHORT $LN34@P_2dMoveme

; 2370 : 		movepushangle = player->mo->angle;

  0042a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0042d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00432	89 55 e8	 mov	 DWORD PTR _movepushangle$[ebp], edx
  00435	eb 33		 jmp	 SHORT $LN39@P_2dMoveme
$LN34@P_2dMoveme:

; 2371 : 	else
; 2372 : 	{
; 2373 : 		if (cmd->sidemove > 0)

  00437	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0043a	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  0043e	85 c9		 test	 ecx, ecx
  00440	7e 09		 jle	 SHORT $LN36@P_2dMoveme

; 2374 : 			movepushangle = 0;

  00442	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _movepushangle$[ebp], 0
  00449	eb 1f		 jmp	 SHORT $LN39@P_2dMoveme
$LN36@P_2dMoveme:

; 2375 : 		else if (cmd->sidemove < 0)

  0044b	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0044e	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00452	85 c9		 test	 ecx, ecx
  00454	7d 09		 jge	 SHORT $LN38@P_2dMoveme

; 2376 : 			movepushangle = ANGLE_180;

  00456	c7 45 e8 00 00
	00 80		 mov	 DWORD PTR _movepushangle$[ebp], -2147483648 ; 80000000H
  0045d	eb 0b		 jmp	 SHORT $LN39@P_2dMoveme
$LN38@P_2dMoveme:

; 2377 : 		else
; 2378 : 			movepushangle = player->mo->angle;

  0045f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00462	8b 08		 mov	 ecx, DWORD PTR [eax]
  00464	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00467	89 55 e8	 mov	 DWORD PTR _movepushangle$[ebp], edx
$LN39@P_2dMoveme:

; 2379 : 	}
; 2380 : 
; 2381 : 	// Do not let the player control movement if not onground.
; 2382 : 	onground = P_IsObjectOnGround(player->mo);

  0046a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0046d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0046f	51		 push	 ecx
  00470	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  00475	83 c4 04	 add	 esp, 4
  00478	a3 00 00 00 00	 mov	 DWORD PTR _onground, eax

; 2383 : 
; 2384 : 	player->aiming = cmd->aiming<<FRACBITS;

  0047d	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00480	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00484	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00487	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0048a	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 2385 : 
; 2386 : 	// Set the player speeds.
; 2387 : 	if (maptol & TOL_SRB1)

  0048d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00494	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00499	74 10		 je	 SHORT $LN40@P_2dMoveme

; 2388 : 		normalspd = (normalspd / 3) * 2;

  0049b	8b 45 e4	 mov	 eax, DWORD PTR _normalspd$[ebp]
  0049e	99		 cdq
  0049f	b9 03 00 00 00	 mov	 ecx, 3
  004a4	f7 f9		 idiv	 ecx
  004a6	d1 e0		 shl	 eax, 1
  004a8	89 45 e4	 mov	 DWORD PTR _normalspd$[ebp], eax
$LN40@P_2dMoveme:

; 2389 : 
; 2390 : 	if (player->powers[pw_super] || player->powers[pw_sneakers])

  004ab	b8 04 00 00 00	 mov	 eax, 4
  004b0	6b c8 0f	 imul	 ecx, eax, 15
  004b3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004b6	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  004bb	75 16		 jne	 SHORT $LN43@P_2dMoveme
  004bd	b8 04 00 00 00	 mov	 eax, 4
  004c2	c1 e0 00	 shl	 eax, 0
  004c5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  004c8	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  004cd	0f 84 bc 00 00
	00		 je	 $LN41@P_2dMoveme
$LN43@P_2dMoveme:

; 2391 : 	{
; 2392 : 		thrustfactor = player->thrustfactor*2;

  004d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004d6	8b 88 cc 00 00
	00		 mov	 ecx, DWORD PTR [eax+204]
  004dc	d1 e1		 shl	 ecx, 1
  004de	89 4d f0	 mov	 DWORD PTR _thrustfactor$[ebp], ecx

; 2393 : 		acceleration = player->accelstart/4 + player->speed*(player->acceleration/4);

  004e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004e4	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [eax+208]
  004ea	99		 cdq
  004eb	83 e2 03	 and	 edx, 3
  004ee	03 c2		 add	 eax, edx
  004f0	8b c8		 mov	 ecx, eax
  004f2	c1 f9 02	 sar	 ecx, 2
  004f5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004f8	8b 82 d4 00 00
	00		 mov	 eax, DWORD PTR [edx+212]
  004fe	99		 cdq
  004ff	83 e2 03	 and	 edx, 3
  00502	03 c2		 add	 eax, edx
  00504	c1 f8 02	 sar	 eax, 2
  00507	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0050a	0f af 82 0c 01
	00 00		 imul	 eax, DWORD PTR [edx+268]
  00511	03 c8		 add	 ecx, eax
  00513	89 4d f4	 mov	 DWORD PTR _acceleration$[ebp], ecx

; 2394 : 
; 2395 : 		if (player->powers[pw_tailsfly])

  00516	b8 04 00 00 00	 mov	 eax, 4
  0051b	6b c8 05	 imul	 ecx, eax, 5
  0051e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00521	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00526	74 08		 je	 SHORT $LN44@P_2dMoveme

; 2396 : 			topspeed = normalspd;

  00528	8b 45 e4	 mov	 eax, DWORD PTR _normalspd$[ebp]
  0052b	89 45 f8	 mov	 DWORD PTR _topspeed$[ebp], eax
  0052e	eb 5a		 jmp	 SHORT $LN47@P_2dMoveme
$LN44@P_2dMoveme:

; 2397 : 		else if (player->mo->eflags & MFE_UNDERWATER && !(player->pflags & PF_SLIDING))

  00530	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00533	8b 08		 mov	 ecx, DWORD PTR [eax]
  00535	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0053b	83 e2 08	 and	 edx, 8
  0053e	74 29		 je	 SHORT $LN46@P_2dMoveme
  00540	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00543	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00549	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  0054f	75 18		 jne	 SHORT $LN46@P_2dMoveme

; 2398 : 		{
; 2399 : 			topspeed = normalspd;

  00551	8b 45 e4	 mov	 eax, DWORD PTR _normalspd$[ebp]
  00554	89 45 f8	 mov	 DWORD PTR _topspeed$[ebp], eax

; 2400 : 			acceleration = (acceleration * 2) / 3;

  00557	8b 45 f4	 mov	 eax, DWORD PTR _acceleration$[ebp]
  0055a	d1 e0		 shl	 eax, 1
  0055c	99		 cdq
  0055d	b9 03 00 00 00	 mov	 ecx, 3
  00562	f7 f9		 idiv	 ecx
  00564	89 45 f4	 mov	 DWORD PTR _acceleration$[ebp], eax

; 2401 : 		}

  00567	eb 21		 jmp	 SHORT $LN47@P_2dMoveme
$LN46@P_2dMoveme:

; 2402 : 		else
; 2403 : 			topspeed = normalspd * 2 > 50 ? 50 : normalspd * 2;

  00569	8b 45 e4	 mov	 eax, DWORD PTR _normalspd$[ebp]
  0056c	d1 e0		 shl	 eax, 1
  0056e	83 f8 32	 cmp	 eax, 50			; 00000032H
  00571	7e 09		 jle	 SHORT $LN67@P_2dMoveme
  00573	c7 45 a0 32 00
	00 00		 mov	 DWORD PTR tv342[ebp], 50 ; 00000032H
  0057a	eb 08		 jmp	 SHORT $LN68@P_2dMoveme
$LN67@P_2dMoveme:
  0057c	8b 4d e4	 mov	 ecx, DWORD PTR _normalspd$[ebp]
  0057f	d1 e1		 shl	 ecx, 1
  00581	89 4d a0	 mov	 DWORD PTR tv342[ebp], ecx
$LN68@P_2dMoveme:
  00584	8b 55 a0	 mov	 edx, DWORD PTR tv342[ebp]
  00587	89 55 f8	 mov	 DWORD PTR _topspeed$[ebp], edx
$LN47@P_2dMoveme:

; 2404 : 	}

  0058a	e9 8e 00 00 00	 jmp	 $LN51@P_2dMoveme
$LN41@P_2dMoveme:

; 2405 : 	else
; 2406 : 	{
; 2407 : 		thrustfactor = player->thrustfactor;

  0058f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00592	8b 88 cc 00 00
	00		 mov	 ecx, DWORD PTR [eax+204]
  00598	89 4d f0	 mov	 DWORD PTR _thrustfactor$[ebp], ecx

; 2408 : 		acceleration = player->accelstart + player->speed*player->acceleration;

  0059b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0059e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  005a1	8b 90 0c 01 00
	00		 mov	 edx, DWORD PTR [eax+268]
  005a7	0f af 91 d4 00
	00 00		 imul	 edx, DWORD PTR [ecx+212]
  005ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005b1	03 90 d0 00 00
	00		 add	 edx, DWORD PTR [eax+208]
  005b7	89 55 f4	 mov	 DWORD PTR _acceleration$[ebp], edx

; 2409 : 
; 2410 : 		if (player->powers[pw_tailsfly])

  005ba	b8 04 00 00 00	 mov	 eax, 4
  005bf	6b c8 05	 imul	 ecx, eax, 5
  005c2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005c5	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  005ca	74 0d		 je	 SHORT $LN48@P_2dMoveme

; 2411 : 		{
; 2412 : 			topspeed = normalspd/2;

  005cc	8b 45 e4	 mov	 eax, DWORD PTR _normalspd$[ebp]
  005cf	99		 cdq
  005d0	2b c2		 sub	 eax, edx
  005d2	d1 f8		 sar	 eax, 1
  005d4	89 45 f8	 mov	 DWORD PTR _topspeed$[ebp], eax

; 2413 : 		}

  005d7	eb 44		 jmp	 SHORT $LN51@P_2dMoveme
$LN48@P_2dMoveme:

; 2414 : 		else if (player->mo->eflags & MFE_UNDERWATER && !(player->pflags & PF_SLIDING))

  005d9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  005de	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  005e4	83 e2 08	 and	 edx, 8
  005e7	74 2e		 je	 SHORT $LN50@P_2dMoveme
  005e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005ec	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  005f2	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  005f8	75 1d		 jne	 SHORT $LN50@P_2dMoveme

; 2415 : 		{
; 2416 : 			topspeed = normalspd/2;

  005fa	8b 45 e4	 mov	 eax, DWORD PTR _normalspd$[ebp]
  005fd	99		 cdq
  005fe	2b c2		 sub	 eax, edx
  00600	d1 f8		 sar	 eax, 1
  00602	89 45 f8	 mov	 DWORD PTR _topspeed$[ebp], eax

; 2417 : 			acceleration = (acceleration * 2) / 3;

  00605	8b 45 f4	 mov	 eax, DWORD PTR _acceleration$[ebp]
  00608	d1 e0		 shl	 eax, 1
  0060a	99		 cdq
  0060b	b9 03 00 00 00	 mov	 ecx, 3
  00610	f7 f9		 idiv	 ecx
  00612	89 45 f4	 mov	 DWORD PTR _acceleration$[ebp], eax

; 2418 : 		}

  00615	eb 06		 jmp	 SHORT $LN51@P_2dMoveme
$LN50@P_2dMoveme:

; 2419 : 		else
; 2420 : 		{
; 2421 : 			topspeed = normalspd;

  00617	8b 45 e4	 mov	 eax, DWORD PTR _normalspd$[ebp]
  0061a	89 45 f8	 mov	 DWORD PTR _topspeed$[ebp], eax
$LN51@P_2dMoveme:

; 2422 : 		}
; 2423 : 	}
; 2424 : 
; 2425 : //////////////////////////////////////
; 2426 : 	if (player->climbing == 1)

  0061d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00620	83 b8 24 01 00
	00 01		 cmp	 DWORD PTR [eax+292], 1
  00627	75 6f		 jne	 SHORT $LN52@P_2dMoveme

; 2427 : 	{
; 2428 : 		P_SetObjectMomZ(player->mo, FixedDiv(cmd->forwardmove*FRACUNIT,10*FRACUNIT), false);

  00629	6a 00		 push	 0
  0062b	68 00 00 0a 00	 push	 655360			; 000a0000H
  00630	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00633	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00636	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00639	51		 push	 ecx
  0063a	e8 00 00 00 00	 call	 _FixedDiv
  0063f	83 c4 08	 add	 esp, 8
  00642	50		 push	 eax
  00643	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00646	8b 02		 mov	 eax, DWORD PTR [edx]
  00648	50		 push	 eax
  00649	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0064e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2429 : 
; 2430 : 		if (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]))

  00651	b8 04 00 00 00	 mov	 eax, 4
  00656	6b c8 0f	 imul	 ecx, eax, 15
  00659	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0065c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00661	74 29		 je	 SHORT $LN53@P_2dMoveme
  00663	b8 04 00 00 00	 mov	 eax, 4
  00668	6b c8 18	 imul	 ecx, eax, 24
  0066b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0066e	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00672	83 e0 7f	 and	 eax, 127		; 0000007fH
  00675	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00678	75 12		 jne	 SHORT $LN53@P_2dMoveme

; 2431 : 			player->mo->momz *= 2;

  0067a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0067d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0067f	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00682	d1 e2		 shl	 edx, 1
  00684	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00687	8b 08		 mov	 ecx, DWORD PTR [eax]
  00689	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN53@P_2dMoveme:

; 2432 : 
; 2433 : 		player->mo->momx = 0;

  0068c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0068f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00691	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN52@P_2dMoveme:

; 2434 : 	}
; 2435 : 
; 2436 : 	if (cmd->sidemove != 0 && !(player->climbing || (player->pflags & PF_GLIDING) || player->exiting

  00698	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0069b	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  0069f	85 c9		 test	 ecx, ecx
  006a1	0f 84 98 01 00
	00		 je	 $LN65@P_2dMoveme
  006a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006aa	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  006b1	0f 85 88 01 00
	00		 jne	 $LN65@P_2dMoveme
  006b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006ba	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006c0	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  006c6	0f 85 73 01 00
	00		 jne	 $LN65@P_2dMoveme
  006cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006cf	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  006d6	0f 85 63 01 00
	00		 jne	 $LN65@P_2dMoveme
  006dc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006df	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006e5	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  006eb	75 3c		 jne	 SHORT $LN55@P_2dMoveme
  006ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006f5	8b 02		 mov	 eax, DWORD PTR [edx]
  006f7	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  006fd	6b 42 1c 1c	 imul	 eax, DWORD PTR [edx+28], 28
  00701	05 00 00 00 00	 add	 eax, OFFSET _states
  00706	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00709	75 1e		 jne	 SHORT $LN55@P_2dMoveme
  0070b	b8 04 00 00 00	 mov	 eax, 4
  00710	d1 e0		 shl	 eax, 1
  00712	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00715	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0071a	74 0d		 je	 SHORT $LN55@P_2dMoveme
  0071c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  00723	0f 84 16 01 00
	00		 je	 $LN65@P_2dMoveme
$LN55@P_2dMoveme:

; 2437 : 		|| (!(player->pflags & PF_SLIDING) && player->mo->state == &states[player->mo->info->painstate] && player->powers[pw_flashing]
; 2438 : 		&& !onground)))
; 2439 : 	{
; 2440 : 		if (player->powers[pw_sneakers] || player->powers[pw_super]) // do you have super sneakers?

  00729	b8 04 00 00 00	 mov	 eax, 4
  0072e	c1 e0 00	 shl	 eax, 0
  00731	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00734	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00739	75 12		 jne	 SHORT $LN58@P_2dMoveme
  0073b	b8 04 00 00 00	 mov	 eax, 4
  00740	6b c8 0f	 imul	 ecx, eax, 15
  00743	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00746	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0074b	74 21		 je	 SHORT $LN56@P_2dMoveme
$LN58@P_2dMoveme:

; 2441 : 			movepushforward = abs(cmd->sidemove) * ((thrustfactor*2)*acceleration);

  0074d	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00750	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00754	51		 push	 ecx
  00755	e8 00 00 00 00	 call	 _abs
  0075a	83 c4 04	 add	 esp, 4
  0075d	8b 55 f0	 mov	 edx, DWORD PTR _thrustfactor$[ebp]
  00760	d1 e2		 shl	 edx, 1
  00762	0f af 55 f4	 imul	 edx, DWORD PTR _acceleration$[ebp]
  00766	0f af c2	 imul	 eax, edx
  00769	89 45 ec	 mov	 DWORD PTR _movepushforward$[ebp], eax
  0076c	eb 1d		 jmp	 SHORT $LN57@P_2dMoveme
$LN56@P_2dMoveme:

; 2442 : 		else // if not, then run normally
; 2443 : 			movepushforward = abs(cmd->sidemove) * (thrustfactor*acceleration);

  0076e	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00771	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00775	51		 push	 ecx
  00776	e8 00 00 00 00	 call	 _abs
  0077b	83 c4 04	 add	 esp, 4
  0077e	8b 55 f0	 mov	 edx, DWORD PTR _thrustfactor$[ebp]
  00781	0f af 55 f4	 imul	 edx, DWORD PTR _acceleration$[ebp]
  00785	0f af c2	 imul	 eax, edx
  00788	89 45 ec	 mov	 DWORD PTR _movepushforward$[ebp], eax
$LN57@P_2dMoveme:

; 2444 : 
; 2445 : 		// allow very small movement while in air for gameplay
; 2446 : 		if (!onground)

  0078b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  00792	75 08		 jne	 SHORT $LN59@P_2dMoveme

; 2447 : 			movepushforward >>= 1; // Proper air movement

  00794	8b 45 ec	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  00797	d1 f8		 sar	 eax, 1
  00799	89 45 ec	 mov	 DWORD PTR _movepushforward$[ebp], eax
$LN59@P_2dMoveme:

; 2448 : 
; 2449 : 		// Allow a bit of movement while spinning
; 2450 : 		if (player->pflags & PF_SPINNING)

  0079c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0079f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  007a5	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  007ab	74 28		 je	 SHORT $LN62@P_2dMoveme

; 2451 : 		{
; 2452 : 			if (!(player->pflags & PF_STARTDASH))

  007ad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007b0	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  007b6	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  007bc	75 10		 jne	 SHORT $LN61@P_2dMoveme

; 2453 : 				movepushforward = movepushforward/48;

  007be	8b 45 ec	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  007c1	99		 cdq
  007c2	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  007c7	f7 f9		 idiv	 ecx
  007c9	89 45 ec	 mov	 DWORD PTR _movepushforward$[ebp], eax
  007cc	eb 07		 jmp	 SHORT $LN62@P_2dMoveme
$LN61@P_2dMoveme:

; 2454 : 			else
; 2455 : 				movepushforward = 0;

  007ce	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _movepushforward$[ebp], 0
$LN62@P_2dMoveme:

; 2456 : 		}
; 2457 : 
; 2458 : 		if (((player->rmomx>>FRACBITS) < topspeed) && (cmd->sidemove > 0)) // Sonic's Speed

  007d5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007d8	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  007de	c1 f9 10	 sar	 ecx, 16			; 00000010H
  007e1	3b 4d f8	 cmp	 ecx, DWORD PTR _topspeed$[ebp]
  007e4	7d 23		 jge	 SHORT $LN63@P_2dMoveme
  007e6	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  007e9	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  007ed	85 c9		 test	 ecx, ecx
  007ef	7e 18		 jle	 SHORT $LN63@P_2dMoveme

; 2459 : 			P_Thrust(player->mo, movepushangle, movepushforward);

  007f1	8b 45 ec	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  007f4	50		 push	 eax
  007f5	8b 4d e8	 mov	 ecx, DWORD PTR _movepushangle$[ebp]
  007f8	51		 push	 ecx
  007f9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007fc	8b 02		 mov	 eax, DWORD PTR [edx]
  007fe	50		 push	 eax
  007ff	e8 00 00 00 00	 call	 _P_Thrust
  00804	83 c4 0c	 add	 esp, 12			; 0000000cH
  00807	eb 36		 jmp	 SHORT $LN65@P_2dMoveme
$LN63@P_2dMoveme:

; 2460 : 		else if (((player->rmomx>>FRACBITS) > -topspeed) && (cmd->sidemove < 0))

  00809	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0080c	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  00812	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00815	8b 55 f8	 mov	 edx, DWORD PTR _topspeed$[ebp]
  00818	f7 da		 neg	 edx
  0081a	3b ca		 cmp	 ecx, edx
  0081c	7e 21		 jle	 SHORT $LN65@P_2dMoveme
  0081e	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00821	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00825	85 c9		 test	 ecx, ecx
  00827	7d 16		 jge	 SHORT $LN65@P_2dMoveme

; 2461 : 			P_Thrust(player->mo, movepushangle, movepushforward);

  00829	8b 45 ec	 mov	 eax, DWORD PTR _movepushforward$[ebp]
  0082c	50		 push	 eax
  0082d	8b 4d e8	 mov	 ecx, DWORD PTR _movepushangle$[ebp]
  00830	51		 push	 ecx
  00831	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00834	8b 02		 mov	 eax, DWORD PTR [edx]
  00836	50		 push	 eax
  00837	e8 00 00 00 00	 call	 _P_Thrust
  0083c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN65@P_2dMoveme:

; 2462 : 	}
; 2463 : }

  0083f	5f		 pop	 edi
  00840	5e		 pop	 esi
  00841	5b		 pop	 ebx
  00842	8b e5		 mov	 esp, ebp
  00844	5d		 pop	 ebp
  00845	c3		 ret	 0
_P_2dMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoJumpStuff
_TEXT	SEGMENT
tv170 = -72						; size = 4
_item$1 = -4						; size = 4
_player$ = 8						; size = 4
_cmd$ = 12						; size = 4
_P_DoJumpStuff PROC					; COMDAT

; 1922 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1923 : 	if (player->pflags & PF_STASIS || (player->powers[pw_nocontrol] && player->powers[pw_nocontrol] < 65536))

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00012	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  00018	75 27		 jne	 SHORT $LN5@P_DoJumpSt
  0001a	b8 04 00 00 00	 mov	 eax, 4
  0001f	6b c8 1b	 imul	 ecx, eax, 27
  00022	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00025	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0002a	74 1a		 je	 SHORT $LN4@P_DoJumpSt
  0002c	b8 04 00 00 00	 mov	 eax, 4
  00031	6b c8 1b	 imul	 ecx, eax, 27
  00034	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00037	81 7c 0a 38 00
	00 01 00	 cmp	 DWORD PTR [edx+ecx+56], 65536 ; 00010000H
  0003f	7d 05		 jge	 SHORT $LN4@P_DoJumpSt
$LN5@P_DoJumpSt:

; 1924 : 		return;

  00041	e9 b9 0f 00 00	 jmp	 $LN97@P_DoJumpSt
$LN4@P_DoJumpSt:

; 1925 : 
; 1926 : 	if (cmd->buttons & BT_JUMP && !(player->pflags & PF_JUMPDOWN) && !player->exiting && !(!(player->pflags & PF_SLIDING) && player->mo->state == &states[player->mo->info->painstate] && player->powers[pw_flashing]))

  00046	8b 45 0c	 mov	 eax, DWORD PTR _cmd$[ebp]
  00049	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0004d	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00053	0f 84 fc 0c 00
	00		 je	 $LN2@P_DoJumpSt
  00059	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0005c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00062	83 e1 08	 and	 ecx, 8
  00065	0f 85 ea 0c 00
	00		 jne	 $LN2@P_DoJumpSt
  0006b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006e	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00075	0f 85 da 0c 00
	00		 jne	 $LN2@P_DoJumpSt
  0007b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00084	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  0008a	75 33		 jne	 SHORT $LN7@P_DoJumpSt
  0008c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  0009c	6b 42 1c 1c	 imul	 eax, DWORD PTR [edx+28], 28
  000a0	05 00 00 00 00	 add	 eax, OFFSET _states
  000a5	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  000a8	75 15		 jne	 SHORT $LN7@P_DoJumpSt
  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	d1 e0		 shl	 eax, 1
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000b4	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  000b9	0f 85 96 0c 00
	00		 jne	 $LN2@P_DoJumpSt
$LN7@P_DoJumpSt:

; 1927 : 	{
; 1928 : 		// can't jump while in air, can't jump while jumping
; 1929 : 		if (onground || player->climbing || (player->pflags & PF_CARRIED) || (player->pflags & PF_ITEMHANG) || (player->pflags & PF_ROPEHANG) || (player->pflags & PF_MINECART))

  000bf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  000c6	75 50		 jne	 SHORT $LN10@P_DoJumpSt
  000c8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000cb	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  000d2	75 44		 jne	 SHORT $LN10@P_DoJumpSt
  000d4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d7	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000dd	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  000e3	75 33		 jne	 SHORT $LN10@P_DoJumpSt
  000e5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000ee	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  000f4	75 22		 jne	 SHORT $LN10@P_DoJumpSt
  000f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000ff	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  00105	75 11		 jne	 SHORT $LN10@P_DoJumpSt
  00107	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0010a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00110	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  00116	74 1d		 je	 SHORT $LN8@P_DoJumpSt
$LN10@P_DoJumpSt:

; 1930 : 		{
; 1931 : 			P_DoJump(player, true);

  00118	6a 01		 push	 1
  0011a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _P_DoJump
  00123	83 c4 08	 add	 esp, 8

; 1932 : 			player->secondjump = 0;

  00126	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00129	c6 80 14 01 00
	00 00		 mov	 BYTE PTR [eax+276], 0

; 1933 : 		}

  00130	e9 20 0c 00 00	 jmp	 $LN2@P_DoJumpSt
$LN8@P_DoJumpSt:

; 1934 : 		else if ((player->pflags & PF_MACESPIN) && player->mo->tracer)

  00135	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00138	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0013e	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00144	74 3d		 je	 SHORT $LN11@P_DoJumpSt
  00146	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00149	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014b	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00152	74 2f		 je	 SHORT $LN11@P_DoJumpSt

; 1935 : 		{
; 1936 : 			player->pflags &= ~PF_MACESPIN;

  00154	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00157	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0015d	81 e1 ff ff ef
	ff		 and	 ecx, -1048577		; ffefffffH
  00163	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00166	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1937 : 			player->powers[pw_flashing] = TICRATE/2;

  0016c	b8 04 00 00 00	 mov	 eax, 4
  00171	d1 e0		 shl	 eax, 1
  00173	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00176	c7 44 01 38 11
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 17 ; 00000011H

; 1938 : 		}

  0017e	e9 d2 0b 00 00	 jmp	 $LN2@P_DoJumpSt
$LN11@P_DoJumpSt:

; 1939 : 		else if (!(player->pflags & PF_SLIDING) && ((gametype != GT_CTF) || (!player->gotflag)))

  00183	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00186	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0018c	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00192	0f 85 bd 0b 00
	00		 jne	 $LN2@P_DoJumpSt
  00198	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0019f	83 f8 04	 cmp	 eax, 4
  001a2	75 12		 jne	 SHORT $LN14@P_DoJumpSt
  001a4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a7	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  001ae	85 c9		 test	 ecx, ecx
  001b0	0f 85 9f 0b 00
	00		 jne	 $LN2@P_DoJumpSt
$LN14@P_DoJumpSt:

; 1940 : 		{
; 1941 : 			switch (player->charability)

  001b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b9	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  001bf	89 4d b8	 mov	 DWORD PTR tv170[ebp], ecx
  001c2	83 7d b8 07	 cmp	 DWORD PTR tv170[ebp], 7
  001c6	0f 87 89 0b 00
	00		 ja	 $LN76@P_DoJumpSt
  001cc	8b 55 b8	 mov	 edx, DWORD PTR tv170[ebp]
  001cf	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN101@P_DoJumpSt[edx*4]
$LN15@P_DoJumpSt:

; 1942 : 			{
; 1943 : 				case CA_THOK:
; 1944 : 				case CA_HOMINGTHOK:
; 1945 : 					// Now it's Sonic's abilities turn!
; 1946 : 					if (player->pflags & PF_JUMPED)

  001d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001df	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  001e5	0f 84 f0 02 00
	00		 je	 $LN17@P_DoJumpSt

; 1947 : 					{
; 1948 : 						// If you can turn super and aren't already,
; 1949 : 						// and you don't have a shield, do it!
; 1950 : 						if ((player->pflags & PF_SUPERREADY) && !player->powers[pw_super]
; 1951 : 							&& !player->powers[pw_jumpshield] && !player->powers[pw_forceshield]
; 1952 : 							&& !player->powers[pw_watershield] && !player->powers[pw_ringshield]
; 1953 : 							&& !player->powers[pw_bombshield] && !player->powers[pw_invulnerability]
; 1954 : 							&& !(maptol & TOL_NIGHTS) // don't turn 'regular super' in nights levels
; 1955 : 							&& ((player->skin == 0) || ALL7EMERALDS(player->powers[pw_emeralds])))

  001eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ee	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001f4	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  001fa	0f 84 cc 00 00
	00		 je	 $LN19@P_DoJumpSt
  00200	b8 04 00 00 00	 mov	 eax, 4
  00205	6b c8 0f	 imul	 ecx, eax, 15
  00208	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0020b	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00210	0f 85 b6 00 00
	00		 jne	 $LN19@P_DoJumpSt
  00216	b8 04 00 00 00	 mov	 eax, 4
  0021b	6b c8 03	 imul	 ecx, eax, 3
  0021e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00221	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00226	0f 85 a0 00 00
	00		 jne	 $LN19@P_DoJumpSt
  0022c	b8 04 00 00 00	 mov	 eax, 4
  00231	c1 e0 02	 shl	 eax, 2
  00234	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00237	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0023c	0f 85 8a 00 00
	00		 jne	 $LN19@P_DoJumpSt
  00242	b8 04 00 00 00	 mov	 eax, 4
  00247	6b c8 0b	 imul	 ecx, eax, 11
  0024a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0024d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00252	75 78		 jne	 SHORT $LN19@P_DoJumpSt
  00254	b8 04 00 00 00	 mov	 eax, 4
  00259	6b c8 09	 imul	 ecx, eax, 9
  0025c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0025f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00264	75 66		 jne	 SHORT $LN19@P_DoJumpSt
  00266	b8 04 00 00 00	 mov	 eax, 4
  0026b	6b c8 0a	 imul	 ecx, eax, 10
  0026e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00271	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00276	75 54		 jne	 SHORT $LN19@P_DoJumpSt
  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 00	 imul	 ecx, eax, 0
  00280	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00283	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00288	75 42		 jne	 SHORT $LN19@P_DoJumpSt
  0028a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00291	83 e0 40	 and	 eax, 64			; 00000040H
  00294	75 36		 jne	 SHORT $LN19@P_DoJumpSt
  00296	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00299	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  002a0	74 17		 je	 SHORT $LN21@P_DoJumpSt
  002a2	b8 04 00 00 00	 mov	 eax, 4
  002a7	6b c8 18	 imul	 ecx, eax, 24
  002aa	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002ad	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  002b1	83 e0 7f	 and	 eax, 127		; 0000007fH
  002b4	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  002b7	75 13		 jne	 SHORT $LN19@P_DoJumpSt
$LN21@P_DoJumpSt:

; 1956 : 						{
; 1957 : 							P_DoSuperTransformation(player, false);

  002b9	6a 00		 push	 0
  002bb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 _P_DoSuperTransformation
  002c4	83 c4 08	 add	 esp, 8

; 1958 : 						}

  002c7	e9 0d 02 00 00	 jmp	 $LN22@P_DoJumpSt
$LN19@P_DoJumpSt:

; 1959 : 						else // Otherwise, THOK!
; 1960 : 						{
; 1961 : 							if (!(player->pflags & PF_THOKKED) || (player->charability2 == CA2_MULTIABILITY))

  002cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002cf	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002d5	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  002db	74 10		 je	 SHORT $LN23@P_DoJumpSt
  002dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e0	83 b8 dc 00 00
	00 01		 cmp	 DWORD PTR [eax+220], 1
  002e7	0f 85 ec 01 00
	00		 jne	 $LN22@P_DoJumpSt
$LN23@P_DoJumpSt:

; 1962 : 							{
; 1963 : 								mobj_t *item;
; 1964 : 								// Catapult the player
; 1965 : 								if ((player->mo->eflags & MFE_UNDERWATER))

  002ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f2	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  002f8	83 e2 08	 and	 edx, 8
  002fb	74 2b		 je	 SHORT $LN24@P_DoJumpSt

; 1966 : 									P_InstaThrust(player->mo, player->mo->angle, (player->actionspd<<FRACBITS)/2);

  002fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00300	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [eax+236]
  00306	c1 e0 10	 shl	 eax, 16			; 00000010H
  00309	99		 cdq
  0030a	2b c2		 sub	 eax, edx
  0030c	d1 f8		 sar	 eax, 1
  0030e	50		 push	 eax
  0030f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00312	8b 11		 mov	 edx, DWORD PTR [ecx]
  00314	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00317	50		 push	 eax
  00318	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0031b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0031d	52		 push	 edx
  0031e	e8 00 00 00 00	 call	 _P_InstaThrust
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH
  00326	eb 24		 jmp	 SHORT $LN25@P_DoJumpSt
$LN24@P_DoJumpSt:

; 1967 : 								else
; 1968 : 									P_InstaThrust(player->mo, player->mo->angle, player->actionspd<<FRACBITS);

  00328	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032b	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  00331	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00334	51		 push	 ecx
  00335	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00338	8b 02		 mov	 eax, DWORD PTR [edx]
  0033a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0033d	51		 push	 ecx
  0033e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00341	8b 02		 mov	 eax, DWORD PTR [edx]
  00343	50		 push	 eax
  00344	e8 00 00 00 00	 call	 _P_InstaThrust
  00349	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@P_DoJumpSt:

; 1969 : 
; 1970 : 								if (maptol & TOL_SRB1)

  0034c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00353	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00358	74 2c		 je	 SHORT $LN26@P_DoJumpSt

; 1971 : 								{
; 1972 : 									player->mo->momx /= 2;

  0035a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0035d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0035f	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00362	99		 cdq
  00363	2b c2		 sub	 eax, edx
  00365	d1 f8		 sar	 eax, 1
  00367	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0036a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0036c	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1973 : 									player->mo->momy /= 2;

  0036f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00372	8b 08		 mov	 ecx, DWORD PTR [eax]
  00374	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00377	99		 cdq
  00378	2b c2		 sub	 eax, edx
  0037a	d1 f8		 sar	 eax, 1
  0037c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0037f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00381	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1974 : 								}

  00384	eb 3c		 jmp	 SHORT $LN28@P_DoJumpSt
$LN26@P_DoJumpSt:

; 1975 : 								else if (player->charability == CA_HOMINGTHOK)

  00386	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00389	83 b8 d8 00 00
	00 07		 cmp	 DWORD PTR [eax+216], 7
  00390	75 30		 jne	 SHORT $LN28@P_DoJumpSt

; 1976 : 								{
; 1977 : 									player->mo->momx /= 3;

  00392	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00395	8b 08		 mov	 ecx, DWORD PTR [eax]
  00397	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  0039a	99		 cdq
  0039b	b9 03 00 00 00	 mov	 ecx, 3
  003a0	f7 f9		 idiv	 ecx
  003a2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003a5	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003a7	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1978 : 									player->mo->momy /= 3;

  003aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  003af	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  003b2	99		 cdq
  003b3	b9 03 00 00 00	 mov	 ecx, 3
  003b8	f7 f9		 idiv	 ecx
  003ba	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003bd	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003bf	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN28@P_DoJumpSt:

; 1979 : 								}
; 1980 : 
; 1981 : 								if (player->mo->info->attacksound && !player->spectator)

  003c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c7	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  003cd	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  003d1	74 2b		 je	 SHORT $LN29@P_DoJumpSt
  003d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003d6	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  003dd	85 c9		 test	 ecx, ecx
  003df	75 1d		 jne	 SHORT $LN29@P_DoJumpSt

; 1982 : 									S_StartSound(player->mo, player->mo->info->attacksound); // Play the THOK sound

  003e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e6	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  003ec	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  003ef	50		 push	 eax
  003f0	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  003f3	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f5	52		 push	 edx
  003f6	e8 00 00 00 00	 call	 _S_StartSound
  003fb	83 c4 08	 add	 esp, 8
$LN29@P_DoJumpSt:

; 1983 : 
; 1984 : 								item = P_SpawnThokMobj(player);

  003fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 _P_SpawnThokMobj
  00407	83 c4 04	 add	 esp, 4
  0040a	89 45 fc	 mov	 DWORD PTR _item$1[ebp], eax

; 1985 : 
; 1986 : 								if (item && (player->charflags & SF_GHOSTTHOKITEM))

  0040d	83 7d fc 00	 cmp	 DWORD PTR _item$1[ebp], 0
  00411	74 2b		 je	 SHORT $LN30@P_DoJumpSt
  00413	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00416	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  0041c	83 e1 04	 and	 ecx, 4
  0041f	74 1d		 je	 SHORT $LN30@P_DoJumpSt

; 1987 : 								{
; 1988 : 									P_SpawnGhostMobj(item);

  00421	8b 45 fc	 mov	 eax, DWORD PTR _item$1[ebp]
  00424	50		 push	 eax
  00425	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  0042a	83 c4 04	 add	 esp, 4

; 1989 : 									P_SetMobjState(item, S_DISS);

  0042d	68 4f 06 00 00	 push	 1615			; 0000064fH
  00432	8b 45 fc	 mov	 eax, DWORD PTR _item$1[ebp]
  00435	50		 push	 eax
  00436	e8 00 00 00 00	 call	 _P_SetMobjState
  0043b	83 c4 08	 add	 esp, 8
$LN30@P_DoJumpSt:

; 1990 : 								}
; 1991 : 
; 1992 : 								if ((player->charability == CA_HOMINGTHOK) && !player->homing && (player->pflags & PF_JUMPED))

  0043e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00441	83 b8 d8 00 00
	00 07		 cmp	 DWORD PTR [eax+216], 7
  00448	75 47		 jne	 SHORT $LN33@P_DoJumpSt
  0044a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0044d	0f b6 88 38 01
	00 00		 movzx	 ecx, BYTE PTR [eax+312]
  00454	85 c9		 test	 ecx, ecx
  00456	75 39		 jne	 SHORT $LN33@P_DoJumpSt
  00458	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0045b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00461	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00467	74 28		 je	 SHORT $LN33@P_DoJumpSt

; 1993 : 								{
; 1994 : 									if (P_LookForEnemies(player))

  00469	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0046c	50		 push	 eax
  0046d	e8 00 00 00 00	 call	 _P_LookForEnemies
  00472	83 c4 04	 add	 esp, 4
  00475	85 c0		 test	 eax, eax
  00477	74 18		 je	 SHORT $LN33@P_DoJumpSt

; 1995 : 									{
; 1996 : 										if (player->mo->tracer)

  00479	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0047c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0047e	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00485	74 0a		 je	 SHORT $LN33@P_DoJumpSt

; 1997 : 											player->homing = 3*TICRATE;

  00487	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0048a	c6 80 38 01 00
	00 69		 mov	 BYTE PTR [eax+312], 105	; 00000069H
$LN33@P_DoJumpSt:

; 1998 : 									}
; 1999 : 								}
; 2000 : 
; 2001 : 								player->pflags &= ~PF_SPINNING;

  00491	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00494	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0049a	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  004a0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004a3	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2002 : 								player->pflags &= ~PF_STARTDASH;

  004a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004ac	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  004b2	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  004b8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004bb	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2003 : 								player->pflags |= PF_THOKKED;

  004c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004c4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  004ca	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  004d0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004d3	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN22@P_DoJumpSt:

; 2004 : 							}
; 2005 : 						}
; 2006 : 					}

  004d9	eb 30		 jmp	 SHORT $LN34@P_DoJumpSt
$LN17@P_DoJumpSt:

; 2007 : 					else if (player->powers[pw_jumpshield] && !player->powers[pw_super])

  004db	b8 04 00 00 00	 mov	 eax, 4
  004e0	6b c8 03	 imul	 ecx, eax, 3
  004e3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004e6	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  004eb	74 1e		 je	 SHORT $LN34@P_DoJumpSt
  004ed	b8 04 00 00 00	 mov	 eax, 4
  004f2	6b c8 0f	 imul	 ecx, eax, 15
  004f5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004f8	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  004fd	75 0c		 jne	 SHORT $LN34@P_DoJumpSt

; 2008 : 						P_DoJumpShield(player);

  004ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00502	50		 push	 eax
  00503	e8 00 00 00 00	 call	 _P_DoJumpShield
  00508	83 c4 04	 add	 esp, 4
$LN34@P_DoJumpSt:

; 2009 : 					break;

  0050b	e9 45 08 00 00	 jmp	 $LN2@P_DoJumpSt
$LN35@P_DoJumpSt:

; 2010 : 
; 2011 : 				case CA_FLY:
; 2012 : 				case CA_SWIM: // Swim
; 2013 : 					// If you can turn super and aren't already,
; 2014 : 					// and you don't have a shield, do it!
; 2015 : 					if ((player->pflags & PF_SUPERREADY) && !player->powers[pw_super] && !player->powers[pw_tailsfly]
; 2016 : 						&& !player->powers[pw_jumpshield] && !player->powers[pw_forceshield]
; 2017 : 						&& !player->powers[pw_watershield] && !player->powers[pw_ringshield]
; 2018 : 						&& !player->powers[pw_bombshield] && !player->powers[pw_invulnerability]
; 2019 : 						&& !(maptol & TOL_NIGHTS) // don't turn 'regular super' in nights levels
; 2020 : 						&& player->pflags & PF_JUMPED
; 2021 : 						&& ((player->skin == 0) || ALL7EMERALDS(player->powers[pw_emeralds])))

  00510	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00513	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00519	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0051f	0f 84 f7 00 00
	00		 je	 $LN37@P_DoJumpSt
  00525	b8 04 00 00 00	 mov	 eax, 4
  0052a	6b c8 0f	 imul	 ecx, eax, 15
  0052d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00530	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00535	0f 85 e1 00 00
	00		 jne	 $LN37@P_DoJumpSt
  0053b	b8 04 00 00 00	 mov	 eax, 4
  00540	6b c8 05	 imul	 ecx, eax, 5
  00543	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00546	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0054b	0f 85 cb 00 00
	00		 jne	 $LN37@P_DoJumpSt
  00551	b8 04 00 00 00	 mov	 eax, 4
  00556	6b c8 03	 imul	 ecx, eax, 3
  00559	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0055c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00561	0f 85 b5 00 00
	00		 jne	 $LN37@P_DoJumpSt
  00567	b8 04 00 00 00	 mov	 eax, 4
  0056c	c1 e0 02	 shl	 eax, 2
  0056f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00572	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00577	0f 85 9f 00 00
	00		 jne	 $LN37@P_DoJumpSt
  0057d	b8 04 00 00 00	 mov	 eax, 4
  00582	6b c8 0b	 imul	 ecx, eax, 11
  00585	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00588	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0058d	0f 85 89 00 00
	00		 jne	 $LN37@P_DoJumpSt
  00593	b8 04 00 00 00	 mov	 eax, 4
  00598	6b c8 09	 imul	 ecx, eax, 9
  0059b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0059e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  005a3	75 77		 jne	 SHORT $LN37@P_DoJumpSt
  005a5	b8 04 00 00 00	 mov	 eax, 4
  005aa	6b c8 0a	 imul	 ecx, eax, 10
  005ad	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005b0	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  005b5	75 65		 jne	 SHORT $LN37@P_DoJumpSt
  005b7	b8 04 00 00 00	 mov	 eax, 4
  005bc	6b c8 00	 imul	 ecx, eax, 0
  005bf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005c2	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  005c7	75 53		 jne	 SHORT $LN37@P_DoJumpSt
  005c9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  005d0	83 e0 40	 and	 eax, 64			; 00000040H
  005d3	75 47		 jne	 SHORT $LN37@P_DoJumpSt
  005d5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005d8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  005de	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  005e4	74 36		 je	 SHORT $LN37@P_DoJumpSt
  005e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005e9	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  005f0	74 17		 je	 SHORT $LN39@P_DoJumpSt
  005f2	b8 04 00 00 00	 mov	 eax, 4
  005f7	6b c8 18	 imul	 ecx, eax, 24
  005fa	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005fd	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00601	83 e0 7f	 and	 eax, 127		; 0000007fH
  00604	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00607	75 13		 jne	 SHORT $LN37@P_DoJumpSt
$LN39@P_DoJumpSt:

; 2022 : 					{
; 2023 : 						P_DoSuperTransformation(player, false);

  00609	6a 00		 push	 0
  0060b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0060e	50		 push	 eax
  0060f	e8 00 00 00 00	 call	 _P_DoSuperTransformation
  00614	83 c4 08	 add	 esp, 8

; 2024 : 					}

  00617	e9 97 01 00 00	 jmp	 $LN49@P_DoJumpSt
$LN37@P_DoJumpSt:

; 2025 : 					// If currently in the air from a jump, and you pressed the
; 2026 : 					// button again and have the ability to fly, do so!
; 2027 : 					else if (!(player->pflags & PF_THOKKED) && !(player->powers[pw_tailsfly]) && (player->pflags & PF_JUMPED) && !(player->charability == CA_SWIM && !(player->mo->eflags & MFE_UNDERWATER)))

  0061c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0061f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00625	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  0062b	0f 85 d7 00 00
	00		 jne	 $LN40@P_DoJumpSt
  00631	b8 04 00 00 00	 mov	 eax, 4
  00636	6b c8 05	 imul	 ecx, eax, 5
  00639	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0063c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00641	0f 85 c1 00 00
	00		 jne	 $LN40@P_DoJumpSt
  00647	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0064a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00650	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00656	0f 84 ac 00 00
	00		 je	 $LN40@P_DoJumpSt
  0065c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0065f	83 b8 d8 00 00
	00 06		 cmp	 DWORD PTR [eax+216], 6
  00666	75 14		 jne	 SHORT $LN42@P_DoJumpSt
  00668	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0066b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0066d	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00673	83 e2 08	 and	 edx, 8
  00676	0f 84 8c 00 00
	00		 je	 $LN40@P_DoJumpSt
$LN42@P_DoJumpSt:

; 2028 : 					{
; 2029 : 						P_SetPlayerMobjState(player->mo, S_PLAY_ABL1); // Change to the flying animation

  0067c	6a 15		 push	 21			; 00000015H
  0067e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00681	8b 08		 mov	 ecx, DWORD PTR [eax]
  00683	51		 push	 ecx
  00684	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00689	83 c4 08	 add	 esp, 8

; 2030 : 
; 2031 : 						player->powers[pw_tailsfly] = tailsflytics + 1; // Set the fly timer

  0068c	a1 00 00 00 00	 mov	 eax, DWORD PTR _tailsflytics
  00691	83 c0 01	 add	 eax, 1
  00694	b9 04 00 00 00	 mov	 ecx, 4
  00699	6b d1 05	 imul	 edx, ecx, 5
  0069c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0069f	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 2032 : 
; 2033 : 						player->pflags &= ~PF_JUMPED;

  006a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006a6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006ac	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  006b2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006b5	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2034 : 						player->pflags &= ~PF_SPINNING;

  006bb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006be	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006c4	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  006ca	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006cd	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2035 : 						player->pflags &= ~PF_STARTDASH;

  006d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006d6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006dc	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  006e2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006e5	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2036 : 						player->pflags |= PF_THOKKED;

  006eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006ee	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006f4	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  006fa	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006fd	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2037 : 					}

  00703	e9 ab 00 00 00	 jmp	 $LN49@P_DoJumpSt
$LN40@P_DoJumpSt:

; 2038 : 					// If currently flying, give an ascend boost.
; 2039 : 					else if (player->powers[pw_tailsfly] && !(player->charability == CA_SWIM && !(player->mo->eflags & MFE_UNDERWATER)))

  00708	b8 04 00 00 00	 mov	 eax, 4
  0070d	6b c8 05	 imul	 ecx, eax, 5
  00710	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00713	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00718	74 69		 je	 SHORT $LN43@P_DoJumpSt
  0071a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0071d	83 b8 d8 00 00
	00 06		 cmp	 DWORD PTR [eax+216], 6
  00724	75 10		 jne	 SHORT $LN45@P_DoJumpSt
  00726	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00729	8b 08		 mov	 ecx, DWORD PTR [eax]
  0072b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00731	83 e2 08	 and	 edx, 8
  00734	74 4d		 je	 SHORT $LN43@P_DoJumpSt
$LN45@P_DoJumpSt:

; 2040 : 					{
; 2041 : 						if (!player->fly1)

  00736	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00739	83 b8 18 01 00
	00 00		 cmp	 DWORD PTR [eax+280], 0
  00740	75 0f		 jne	 SHORT $LN46@P_DoJumpSt

; 2042 : 							player->fly1 = 20;

  00742	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00745	c7 80 18 01 00
	00 14 00 00 00	 mov	 DWORD PTR [eax+280], 20	; 00000014H
  0074f	eb 0d		 jmp	 SHORT $LN47@P_DoJumpSt
$LN46@P_DoJumpSt:

; 2043 : 						else
; 2044 : 							player->fly1 = 2;

  00751	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00754	c7 80 18 01 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+280], 2
$LN47@P_DoJumpSt:

; 2045 : 
; 2046 : 						if (player->charability == CA_SWIM)

  0075e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00761	83 b8 d8 00 00
	00 06		 cmp	 DWORD PTR [eax+216], 6
  00768	75 17		 jne	 SHORT $LN48@P_DoJumpSt

; 2047 : 							player->fly1 /= 2;

  0076a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0076d	8b 80 18 01 00
	00		 mov	 eax, DWORD PTR [eax+280]
  00773	99		 cdq
  00774	2b c2		 sub	 eax, edx
  00776	d1 f8		 sar	 eax, 1
  00778	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0077b	89 81 18 01 00
	00		 mov	 DWORD PTR [ecx+280], eax
$LN48@P_DoJumpSt:

; 2048 : 					}

  00781	eb 30		 jmp	 SHORT $LN49@P_DoJumpSt
$LN43@P_DoJumpSt:

; 2049 : 					else if (player->powers[pw_jumpshield] && !player->powers[pw_super])

  00783	b8 04 00 00 00	 mov	 eax, 4
  00788	6b c8 03	 imul	 ecx, eax, 3
  0078b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0078e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00793	74 1e		 je	 SHORT $LN49@P_DoJumpSt
  00795	b8 04 00 00 00	 mov	 eax, 4
  0079a	6b c8 0f	 imul	 ecx, eax, 15
  0079d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007a0	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  007a5	75 0c		 jne	 SHORT $LN49@P_DoJumpSt

; 2050 : 						P_DoJumpShield(player);

  007a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007aa	50		 push	 eax
  007ab	e8 00 00 00 00	 call	 _P_DoJumpShield
  007b0	83 c4 04	 add	 esp, 4
$LN49@P_DoJumpSt:

; 2051 : 					break;

  007b3	e9 9d 05 00 00	 jmp	 $LN2@P_DoJumpSt
$LN50@P_DoJumpSt:

; 2052 : 
; 2053 : 				case CA_GLIDEANDCLIMB:
; 2054 : 					// Now Knuckles-type abilities are checked.
; 2055 : 					// If you can turn super and aren't already,
; 2056 : 					// and you don't have a shield, do it!
; 2057 : 					if ((player->pflags & PF_SUPERREADY) && !player->powers[pw_super]
; 2058 : 						&& !player->powers[pw_jumpshield] && !player->powers[pw_forceshield]
; 2059 : 						&& !player->powers[pw_watershield] && !player->powers[pw_ringshield]
; 2060 : 						&& !player->powers[pw_bombshield] && !player->powers[pw_invulnerability]
; 2061 : 						&& !(maptol & TOL_NIGHTS) // don't turn 'regular super' in nights levels
; 2062 : 						&& player->pflags & PF_JUMPED
; 2063 : 						&& ((player->skin == 0) || ALL7EMERALDS(player->powers[pw_emeralds])))

  007b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007bb	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  007c1	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  007c7	0f 84 e1 00 00
	00		 je	 $LN51@P_DoJumpSt
  007cd	b8 04 00 00 00	 mov	 eax, 4
  007d2	6b c8 0f	 imul	 ecx, eax, 15
  007d5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007d8	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  007dd	0f 85 cb 00 00
	00		 jne	 $LN51@P_DoJumpSt
  007e3	b8 04 00 00 00	 mov	 eax, 4
  007e8	6b c8 03	 imul	 ecx, eax, 3
  007eb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007ee	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  007f3	0f 85 b5 00 00
	00		 jne	 $LN51@P_DoJumpSt
  007f9	b8 04 00 00 00	 mov	 eax, 4
  007fe	c1 e0 02	 shl	 eax, 2
  00801	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00804	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00809	0f 85 9f 00 00
	00		 jne	 $LN51@P_DoJumpSt
  0080f	b8 04 00 00 00	 mov	 eax, 4
  00814	6b c8 0b	 imul	 ecx, eax, 11
  00817	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0081a	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0081f	0f 85 89 00 00
	00		 jne	 $LN51@P_DoJumpSt
  00825	b8 04 00 00 00	 mov	 eax, 4
  0082a	6b c8 09	 imul	 ecx, eax, 9
  0082d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00830	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00835	75 77		 jne	 SHORT $LN51@P_DoJumpSt
  00837	b8 04 00 00 00	 mov	 eax, 4
  0083c	6b c8 0a	 imul	 ecx, eax, 10
  0083f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00842	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00847	75 65		 jne	 SHORT $LN51@P_DoJumpSt
  00849	b8 04 00 00 00	 mov	 eax, 4
  0084e	6b c8 00	 imul	 ecx, eax, 0
  00851	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00854	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00859	75 53		 jne	 SHORT $LN51@P_DoJumpSt
  0085b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00862	83 e0 40	 and	 eax, 64			; 00000040H
  00865	75 47		 jne	 SHORT $LN51@P_DoJumpSt
  00867	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0086a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00870	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00876	74 36		 je	 SHORT $LN51@P_DoJumpSt
  00878	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0087b	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  00882	74 17		 je	 SHORT $LN53@P_DoJumpSt
  00884	b8 04 00 00 00	 mov	 eax, 4
  00889	6b c8 18	 imul	 ecx, eax, 24
  0088c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0088f	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00893	83 e0 7f	 and	 eax, 127		; 0000007fH
  00896	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00899	75 13		 jne	 SHORT $LN51@P_DoJumpSt
$LN53@P_DoJumpSt:

; 2064 : 					{
; 2065 : 						P_DoSuperTransformation(player, false);

  0089b	6a 00		 push	 0
  0089d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008a0	50		 push	 eax
  008a1	e8 00 00 00 00	 call	 _P_DoSuperTransformation
  008a6	83 c4 08	 add	 esp, 8

; 2066 : 					}

  008a9	e9 c6 01 00 00	 jmp	 $LN59@P_DoJumpSt
$LN51@P_DoJumpSt:

; 2067 : 					else if ((player->pflags & PF_JUMPED) && (!(player->pflags & PF_THOKKED) || player->charability2 == CA2_MULTIABILITY))

  008ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008b1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  008b7	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  008bd	0f 84 81 01 00
	00		 je	 $LN54@P_DoJumpSt
  008c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008c6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  008cc	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  008d2	74 10		 je	 SHORT $LN56@P_DoJumpSt
  008d4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008d7	83 b8 dc 00 00
	00 01		 cmp	 DWORD PTR [eax+220], 1
  008de	0f 85 60 01 00
	00		 jne	 $LN54@P_DoJumpSt
$LN56@P_DoJumpSt:

; 2068 : 					{
; 2069 : 						//INT32 glidespeed = player->actionspd;
; 2070 : 
; 2071 : 						player->pflags |= PF_GLIDING;

  008e4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008e7	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  008ed	81 c9 00 00 01
	00		 or	 ecx, 65536		; 00010000H
  008f3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008f6	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2072 : 						player->pflags |= PF_THOKKED;

  008fc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008ff	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00905	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  0090b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0090e	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2073 : 						player->glidetime = 0;

  00914	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00917	c7 80 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+288], 0

; 2074 : 
; 2075 : 						if (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]))

  00921	b8 04 00 00 00	 mov	 eax, 4
  00926	6b c8 0f	 imul	 ecx, eax, 15
  00929	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0092c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00931	74 6f		 je	 SHORT $LN57@P_DoJumpSt
  00933	b8 04 00 00 00	 mov	 eax, 4
  00938	6b c8 18	 imul	 ecx, eax, 24
  0093b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0093e	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00942	83 e0 7f	 and	 eax, 127		; 0000007fH
  00945	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00948	75 58		 jne	 SHORT $LN57@P_DoJumpSt

; 2076 : 						{
; 2077 : 							// Glide at double speed while super.
; 2078 : 							player->actionspd = atoi(skins[player->skin].actionspd)*player->mo->scale/100 * 2;

  0094a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0094d	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  00957	81 c1 5a 00 00
	00		 add	 ecx, OFFSET _skins+90
  0095d	51		 push	 ecx
  0095e	e8 00 00 00 00	 call	 _atoi
  00963	83 c4 04	 add	 esp, 4
  00966	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00969	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0096b	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00972	0f af c2	 imul	 eax, edx
  00975	99		 cdq
  00976	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0097b	f7 f9		 idiv	 ecx
  0097d	d1 e0		 shl	 eax, 1
  0097f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00982	89 82 ec 00 00
	00		 mov	 DWORD PTR [edx+236], eax

; 2079 : 							player->pflags &= ~PF_THOKKED;

  00988	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0098b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00991	81 e1 ff 7f ff
	ff		 and	 ecx, -32769		; ffff7fffH
  00997	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0099a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2080 : 						}

  009a0	eb 3c		 jmp	 SHORT $LN58@P_DoJumpSt
$LN57@P_DoJumpSt:

; 2081 : 						else
; 2082 : 							player->actionspd = atoi(skins[player->skin].actionspd)*player->mo->scale/100;

  009a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009a5	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  009af	81 c1 5a 00 00
	00		 add	 ecx, OFFSET _skins+90
  009b5	51		 push	 ecx
  009b6	e8 00 00 00 00	 call	 _atoi
  009bb	83 c4 04	 add	 esp, 4
  009be	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  009c1	8b 0a		 mov	 ecx, DWORD PTR [edx]
  009c3	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  009ca	0f af c2	 imul	 eax, edx
  009cd	99		 cdq
  009ce	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  009d3	f7 f9		 idiv	 ecx
  009d5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  009d8	89 82 ec 00 00
	00		 mov	 DWORD PTR [edx+236], eax
$LN58@P_DoJumpSt:

; 2083 : 
; 2084 : 						P_SetPlayerMobjState(player->mo, S_PLAY_ABL1);

  009de	6a 15		 push	 21			; 00000015H
  009e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  009e5	51		 push	 ecx
  009e6	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  009eb	83 c4 08	 add	 esp, 8

; 2085 : 						P_InstaThrust(player->mo, player->mo->angle, (player->actionspd<<FRACBITS)/NEWTICRATERATIO);

  009ee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009f1	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  009f7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  009fa	51		 push	 ecx
  009fb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  009fe	8b 02		 mov	 eax, DWORD PTR [edx]
  00a00	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00a03	51		 push	 ecx
  00a04	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a07	8b 02		 mov	 eax, DWORD PTR [edx]
  00a09	50		 push	 eax
  00a0a	e8 00 00 00 00	 call	 _P_InstaThrust
  00a0f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 : 						player->pflags &= ~PF_SPINNING;

  00a12	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a15	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a1b	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  00a21	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a24	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2087 : 						player->pflags &= ~PF_STARTDASH;

  00a2a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a2d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a33	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  00a39	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a3c	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2088 : 					}

  00a42	eb 30		 jmp	 SHORT $LN59@P_DoJumpSt
$LN54@P_DoJumpSt:

; 2089 : 					else if (player->powers[pw_jumpshield] && !player->powers[pw_super])

  00a44	b8 04 00 00 00	 mov	 eax, 4
  00a49	6b c8 03	 imul	 ecx, eax, 3
  00a4c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a4f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00a54	74 1e		 je	 SHORT $LN59@P_DoJumpSt
  00a56	b8 04 00 00 00	 mov	 eax, 4
  00a5b	6b c8 0f	 imul	 ecx, eax, 15
  00a5e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a61	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00a66	75 0c		 jne	 SHORT $LN59@P_DoJumpSt

; 2090 : 						P_DoJumpShield(player);

  00a68	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a6b	50		 push	 eax
  00a6c	e8 00 00 00 00	 call	 _P_DoJumpShield
  00a71	83 c4 04	 add	 esp, 4
$LN59@P_DoJumpSt:

; 2091 : 					break;

  00a74	e9 dc 02 00 00	 jmp	 $LN2@P_DoJumpSt
$LN60@P_DoJumpSt:

; 2092 : 				case CA_DOUBLEJUMP: // Double-Jump
; 2093 : 					if ((player->pflags & PF_SUPERREADY) && !player->powers[pw_super]
; 2094 : 						&& !player->powers[pw_jumpshield] && !player->powers[pw_forceshield]
; 2095 : 						&& !player->powers[pw_watershield] && !player->powers[pw_ringshield]
; 2096 : 						&& !player->powers[pw_bombshield] && !player->powers[pw_invulnerability]
; 2097 : 						&& !(maptol & TOL_NIGHTS) // don't turn 'regular super' in nights levels
; 2098 : 						&& player->pflags & PF_JUMPED
; 2099 : 						&& ((player->skin == 0) || ALL7EMERALDS(player->powers[pw_emeralds])))

  00a79	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a7c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a82	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00a88	0f 84 e1 00 00
	00		 je	 $LN61@P_DoJumpSt
  00a8e	b8 04 00 00 00	 mov	 eax, 4
  00a93	6b c8 0f	 imul	 ecx, eax, 15
  00a96	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a99	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00a9e	0f 85 cb 00 00
	00		 jne	 $LN61@P_DoJumpSt
  00aa4	b8 04 00 00 00	 mov	 eax, 4
  00aa9	6b c8 03	 imul	 ecx, eax, 3
  00aac	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00aaf	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00ab4	0f 85 b5 00 00
	00		 jne	 $LN61@P_DoJumpSt
  00aba	b8 04 00 00 00	 mov	 eax, 4
  00abf	c1 e0 02	 shl	 eax, 2
  00ac2	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00ac5	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00aca	0f 85 9f 00 00
	00		 jne	 $LN61@P_DoJumpSt
  00ad0	b8 04 00 00 00	 mov	 eax, 4
  00ad5	6b c8 0b	 imul	 ecx, eax, 11
  00ad8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00adb	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00ae0	0f 85 89 00 00
	00		 jne	 $LN61@P_DoJumpSt
  00ae6	b8 04 00 00 00	 mov	 eax, 4
  00aeb	6b c8 09	 imul	 ecx, eax, 9
  00aee	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00af1	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00af6	75 77		 jne	 SHORT $LN61@P_DoJumpSt
  00af8	b8 04 00 00 00	 mov	 eax, 4
  00afd	6b c8 0a	 imul	 ecx, eax, 10
  00b00	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b03	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00b08	75 65		 jne	 SHORT $LN61@P_DoJumpSt
  00b0a	b8 04 00 00 00	 mov	 eax, 4
  00b0f	6b c8 00	 imul	 ecx, eax, 0
  00b12	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b15	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00b1a	75 53		 jne	 SHORT $LN61@P_DoJumpSt
  00b1c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00b23	83 e0 40	 and	 eax, 64			; 00000040H
  00b26	75 47		 jne	 SHORT $LN61@P_DoJumpSt
  00b28	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b2b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00b31	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00b37	74 36		 je	 SHORT $LN61@P_DoJumpSt
  00b39	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b3c	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  00b43	74 17		 je	 SHORT $LN63@P_DoJumpSt
  00b45	b8 04 00 00 00	 mov	 eax, 4
  00b4a	6b c8 18	 imul	 ecx, eax, 24
  00b4d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b50	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00b54	83 e0 7f	 and	 eax, 127		; 0000007fH
  00b57	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00b5a	75 13		 jne	 SHORT $LN61@P_DoJumpSt
$LN63@P_DoJumpSt:

; 2100 : 					{
; 2101 : 						P_DoSuperTransformation(player, false);

  00b5c	6a 00		 push	 0
  00b5e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 _P_DoSuperTransformation
  00b67	83 c4 08	 add	 esp, 8

; 2102 : 					}

  00b6a	e9 93 00 00 00	 jmp	 $LN67@P_DoJumpSt
$LN61@P_DoJumpSt:

; 2103 : 					else if ((player->pflags & PF_JUMPED) && !player->secondjump)

  00b6f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b72	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00b78	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00b7e	74 52		 je	 SHORT $LN64@P_DoJumpSt
  00b80	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b83	0f b6 88 14 01
	00 00		 movzx	 ecx, BYTE PTR [eax+276]
  00b8a	85 c9		 test	 ecx, ecx
  00b8c	75 44		 jne	 SHORT $LN64@P_DoJumpSt

; 2104 : 					{
; 2105 : 						player->pflags &= ~PF_JUMPED;

  00b8e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b91	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00b97	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  00b9d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ba0	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2106 : 						P_DoJump(player, true);

  00ba6	6a 01		 push	 1
  00ba8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bab	50		 push	 eax
  00bac	e8 00 00 00 00	 call	 _P_DoJump
  00bb1	83 c4 08	 add	 esp, 8

; 2107 : 
; 2108 : 						// Allow infinite double jumping if super.
; 2109 : 						if (!player->powers[pw_super])

  00bb4	b8 04 00 00 00	 mov	 eax, 4
  00bb9	6b c8 0f	 imul	 ecx, eax, 15
  00bbc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bbf	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00bc4	75 0a		 jne	 SHORT $LN66@P_DoJumpSt

; 2110 : 							player->secondjump = 1;

  00bc6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bc9	c6 80 14 01 00
	00 01		 mov	 BYTE PTR [eax+276], 1
$LN66@P_DoJumpSt:

; 2111 : 					}

  00bd0	eb 30		 jmp	 SHORT $LN67@P_DoJumpSt
$LN64@P_DoJumpSt:

; 2112 : 					else if (player->powers[pw_jumpshield] && !player->powers[pw_super])

  00bd2	b8 04 00 00 00	 mov	 eax, 4
  00bd7	6b c8 03	 imul	 ecx, eax, 3
  00bda	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bdd	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00be2	74 1e		 je	 SHORT $LN67@P_DoJumpSt
  00be4	b8 04 00 00 00	 mov	 eax, 4
  00be9	6b c8 0f	 imul	 ecx, eax, 15
  00bec	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bef	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00bf4	75 0c		 jne	 SHORT $LN67@P_DoJumpSt

; 2113 : 						P_DoJumpShield(player);

  00bf6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bf9	50		 push	 eax
  00bfa	e8 00 00 00 00	 call	 _P_DoJumpShield
  00bff	83 c4 04	 add	 esp, 4
$LN67@P_DoJumpSt:

; 2114 : 					break;

  00c02	e9 4e 01 00 00	 jmp	 $LN2@P_DoJumpSt
$LN68@P_DoJumpSt:

; 2115 : 				case CA_FLOAT: // Float
; 2116 : 				case CA_SLOWFALL: // Slow descent hover
; 2117 : 					if ((player->pflags & PF_SUPERREADY) && !player->powers[pw_super]
; 2118 : 						&& !player->powers[pw_jumpshield] && !player->powers[pw_forceshield]
; 2119 : 						&& !player->powers[pw_watershield] && !player->powers[pw_ringshield]
; 2120 : 						&& !player->powers[pw_bombshield] && !player->powers[pw_invulnerability]
; 2121 : 						&& !(maptol & TOL_NIGHTS) // don't turn 'regular super' in nights levels
; 2122 : 						&& player->pflags & PF_JUMPED
; 2123 : 						&& ((player->skin == 0) || ALL7EMERALDS(player->powers[pw_emeralds])))

  00c07	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c0a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00c10	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00c16	0f 84 de 00 00
	00		 je	 $LN70@P_DoJumpSt
  00c1c	b8 04 00 00 00	 mov	 eax, 4
  00c21	6b c8 0f	 imul	 ecx, eax, 15
  00c24	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c27	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c2c	0f 85 c8 00 00
	00		 jne	 $LN70@P_DoJumpSt
  00c32	b8 04 00 00 00	 mov	 eax, 4
  00c37	6b c8 03	 imul	 ecx, eax, 3
  00c3a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c3d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c42	0f 85 b2 00 00
	00		 jne	 $LN70@P_DoJumpSt
  00c48	b8 04 00 00 00	 mov	 eax, 4
  00c4d	c1 e0 02	 shl	 eax, 2
  00c50	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00c53	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00c58	0f 85 9c 00 00
	00		 jne	 $LN70@P_DoJumpSt
  00c5e	b8 04 00 00 00	 mov	 eax, 4
  00c63	6b c8 0b	 imul	 ecx, eax, 11
  00c66	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c69	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c6e	0f 85 86 00 00
	00		 jne	 $LN70@P_DoJumpSt
  00c74	b8 04 00 00 00	 mov	 eax, 4
  00c79	6b c8 09	 imul	 ecx, eax, 9
  00c7c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c7f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c84	75 74		 jne	 SHORT $LN70@P_DoJumpSt
  00c86	b8 04 00 00 00	 mov	 eax, 4
  00c8b	6b c8 0a	 imul	 ecx, eax, 10
  00c8e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c91	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c96	75 62		 jne	 SHORT $LN70@P_DoJumpSt
  00c98	b8 04 00 00 00	 mov	 eax, 4
  00c9d	6b c8 00	 imul	 ecx, eax, 0
  00ca0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ca3	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00ca8	75 50		 jne	 SHORT $LN70@P_DoJumpSt
  00caa	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00cb1	83 e0 40	 and	 eax, 64			; 00000040H
  00cb4	75 44		 jne	 SHORT $LN70@P_DoJumpSt
  00cb6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cb9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00cbf	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00cc5	74 33		 je	 SHORT $LN70@P_DoJumpSt
  00cc7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cca	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  00cd1	74 17		 je	 SHORT $LN72@P_DoJumpSt
  00cd3	b8 04 00 00 00	 mov	 eax, 4
  00cd8	6b c8 18	 imul	 ecx, eax, 24
  00cdb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00cde	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00ce2	83 e0 7f	 and	 eax, 127		; 0000007fH
  00ce5	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00ce8	75 10		 jne	 SHORT $LN70@P_DoJumpSt
$LN72@P_DoJumpSt:

; 2124 : 					{
; 2125 : 						P_DoSuperTransformation(player, false);

  00cea	6a 00		 push	 0
  00cec	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cef	50		 push	 eax
  00cf0	e8 00 00 00 00	 call	 _P_DoSuperTransformation
  00cf5	83 c4 08	 add	 esp, 8

; 2126 : 					}

  00cf8	eb 5b		 jmp	 SHORT $LN75@P_DoJumpSt
$LN70@P_DoJumpSt:

; 2127 : 					else if ((player->pflags & PF_JUMPED) && !player->secondjump)

  00cfa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cfd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00d03	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00d09	74 1a		 je	 SHORT $LN73@P_DoJumpSt
  00d0b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d0e	0f b6 88 14 01
	00 00		 movzx	 ecx, BYTE PTR [eax+276]
  00d15	85 c9		 test	 ecx, ecx
  00d17	75 0c		 jne	 SHORT $LN73@P_DoJumpSt

; 2128 : 					{
; 2129 : 						player->secondjump = 1;

  00d19	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d1c	c6 80 14 01 00
	00 01		 mov	 BYTE PTR [eax+276], 1

; 2130 : 					}

  00d23	eb 30		 jmp	 SHORT $LN75@P_DoJumpSt
$LN73@P_DoJumpSt:

; 2131 : 					else if (player->powers[pw_jumpshield] && !player->powers[pw_super])

  00d25	b8 04 00 00 00	 mov	 eax, 4
  00d2a	6b c8 03	 imul	 ecx, eax, 3
  00d2d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d30	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00d35	74 1e		 je	 SHORT $LN75@P_DoJumpSt
  00d37	b8 04 00 00 00	 mov	 eax, 4
  00d3c	6b c8 0f	 imul	 ecx, eax, 15
  00d3f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d42	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00d47	75 0c		 jne	 SHORT $LN75@P_DoJumpSt

; 2132 : 						P_DoJumpShield(player);

  00d49	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d4c	50		 push	 eax
  00d4d	e8 00 00 00 00	 call	 _P_DoJumpShield
  00d52	83 c4 04	 add	 esp, 4
$LN75@P_DoJumpSt:
$LN76@P_DoJumpSt:
$LN2@P_DoJumpSt:

; 2133 : 					break;
; 2134 : 				default:
; 2135 : 					break;
; 2136 : 			}
; 2137 : 		}
; 2138 : 	}
; 2139 : 	player->pflags |= PF_JUMPDOWN;

  00d55	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d58	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00d5e	83 c9 08	 or	 ecx, 8
  00d61	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d64	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2140 : 
; 2141 : 	if (!(cmd->buttons & BT_JUMP))// If not pressing the jump button

  00d6a	8b 45 0c	 mov	 eax, DWORD PTR _cmd$[ebp]
  00d6d	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00d71	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00d77	0f 85 87 00 00
	00		 jne	 $LN82@P_DoJumpSt

; 2142 : 	{
; 2143 : 		player->pflags &= ~PF_JUMPDOWN;

  00d7d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d80	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00d86	83 e1 f7	 and	 ecx, -9			; fffffff7H
  00d89	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d8c	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2144 : 
; 2145 : 		// Repeat abilities, but not double jump!
; 2146 : 		if ((player->charability2 == CA2_MULTIABILITY && player->charability != CA_DOUBLEJUMP)
; 2147 : 			|| (player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds])))

  00d92	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d95	83 b8 dc 00 00
	00 01		 cmp	 DWORD PTR [eax+220], 1
  00d9c	75 0c		 jne	 SHORT $LN81@P_DoJumpSt
  00d9e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00da1	83 b8 d8 00 00
	00 03		 cmp	 DWORD PTR [eax+216], 3
  00da8	75 29		 jne	 SHORT $LN80@P_DoJumpSt
$LN81@P_DoJumpSt:
  00daa	b8 04 00 00 00	 mov	 eax, 4
  00daf	6b c8 0f	 imul	 ecx, eax, 15
  00db2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00db5	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00dba	74 23		 je	 SHORT $LN78@P_DoJumpSt
  00dbc	b8 04 00 00 00	 mov	 eax, 4
  00dc1	6b c8 18	 imul	 ecx, eax, 24
  00dc4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00dc7	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00dcb	83 e0 7f	 and	 eax, 127		; 0000007fH
  00dce	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00dd1	75 0c		 jne	 SHORT $LN78@P_DoJumpSt
$LN80@P_DoJumpSt:

; 2148 : 			player->secondjump = 0;

  00dd3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dd6	c6 80 14 01 00
	00 00		 mov	 BYTE PTR [eax+276], 0
  00ddd	eb 25		 jmp	 SHORT $LN82@P_DoJumpSt
$LN78@P_DoJumpSt:

; 2149 : 		else if ((player->charability == CA_FLOAT) && player->secondjump == 1)

  00ddf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00de2	83 b8 d8 00 00
	00 04		 cmp	 DWORD PTR [eax+216], 4
  00de9	75 19		 jne	 SHORT $LN82@P_DoJumpSt
  00deb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dee	0f b6 88 14 01
	00 00		 movzx	 ecx, BYTE PTR [eax+276]
  00df5	83 f9 01	 cmp	 ecx, 1
  00df8	75 0a		 jne	 SHORT $LN82@P_DoJumpSt

; 2150 : 			player->secondjump = 2;

  00dfa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dfd	c6 80 14 01 00
	00 02		 mov	 BYTE PTR [eax+276], 2
$LN82@P_DoJumpSt:

; 2151 : 	}
; 2152 : 
; 2153 : 	if ((gametype != GT_CTF) || (!player->gotflag))

  00e04	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00e0b	83 f8 04	 cmp	 eax, 4
  00e0e	75 12		 jne	 SHORT $LN84@P_DoJumpSt
  00e10	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e13	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  00e1a	85 c9		 test	 ecx, ecx
  00e1c	0f 85 5d 01 00
	00		 jne	 $LN85@P_DoJumpSt
$LN84@P_DoJumpSt:

; 2154 : 	{
; 2155 : 		if (player->secondjump == 1 && (cmd->buttons & BT_JUMP))

  00e22	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e25	0f b6 88 14 01
	00 00		 movzx	 ecx, BYTE PTR [eax+276]
  00e2c	83 f9 01	 cmp	 ecx, 1
  00e2f	0f 85 4a 01 00
	00		 jne	 $LN85@P_DoJumpSt
  00e35	8b 45 0c	 mov	 eax, DWORD PTR _cmd$[ebp]
  00e38	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00e3c	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00e42	0f 84 37 01 00
	00		 je	 $LN85@P_DoJumpSt

; 2156 : 		{
; 2157 : 			if (player->charability == CA_FLOAT)

  00e48	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e4b	83 b8 d8 00 00
	00 04		 cmp	 DWORD PTR [eax+216], 4
  00e52	75 11		 jne	 SHORT $LN86@P_DoJumpSt

; 2158 : 				player->mo->momz = 0;

  00e54	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e57	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e59	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  00e60	e9 02 01 00 00	 jmp	 $LN96@P_DoJumpSt
$LN86@P_DoJumpSt:

; 2159 : 			else if (player->charability == CA_SLOWFALL)

  00e65	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e68	83 b8 d8 00 00
	00 05		 cmp	 DWORD PTR [eax+216], 5
  00e6f	0f 85 f2 00 00
	00		 jne	 $LN96@P_DoJumpSt

; 2160 : 			{
; 2161 : 				if (!(player->mo->eflags & MFE_VERTICALFLIP))

  00e75	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e78	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e7a	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00e80	83 e2 20	 and	 edx, 32			; 00000020H
  00e83	75 72		 jne	 SHORT $LN89@P_DoJumpSt

; 2162 : 				{
; 2163 : 					if (!player->powers[pw_super] && player->mo->momz < -gravity*4)

  00e85	b8 04 00 00 00	 mov	 eax, 4
  00e8a	6b c8 0f	 imul	 ecx, eax, 15
  00e8d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e90	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00e95	75 29		 jne	 SHORT $LN91@P_DoJumpSt
  00e97	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e9a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e9c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gravity
  00ea2	f7 da		 neg	 edx
  00ea4	c1 e2 02	 shl	 edx, 2
  00ea7	39 51 50	 cmp	 DWORD PTR [ecx+80], edx
  00eaa	7d 14		 jge	 SHORT $LN91@P_DoJumpSt

; 2164 : 						player->mo->momz = -gravity*4;

  00eac	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  00eb1	f7 d8		 neg	 eax
  00eb3	c1 e0 02	 shl	 eax, 2
  00eb6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00eb9	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ebb	89 42 50	 mov	 DWORD PTR [edx+80], eax
  00ebe	eb 35		 jmp	 SHORT $LN93@P_DoJumpSt
$LN91@P_DoJumpSt:

; 2165 : 					else if (player->powers[pw_super] && player->mo->momz < gravity*16)

  00ec0	b8 04 00 00 00	 mov	 eax, 4
  00ec5	6b c8 0f	 imul	 ecx, eax, 15
  00ec8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ecb	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00ed0	74 23		 je	 SHORT $LN93@P_DoJumpSt
  00ed2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ed5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ed7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gravity
  00edd	c1 e2 04	 shl	 edx, 4
  00ee0	39 51 50	 cmp	 DWORD PTR [ecx+80], edx
  00ee3	7d 10		 jge	 SHORT $LN93@P_DoJumpSt

; 2166 : 						player->mo->momz = gravity*16; //Float upward 4x as fast while super.

  00ee5	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  00eea	c1 e0 04	 shl	 eax, 4
  00eed	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00ef0	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ef2	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN93@P_DoJumpSt:

; 2167 : 				}

  00ef5	eb 70		 jmp	 SHORT $LN96@P_DoJumpSt
$LN89@P_DoJumpSt:

; 2168 : 				else
; 2169 : 				{
; 2170 : 					if (!player->powers[pw_super] && player->mo->momz > gravity*4)

  00ef7	b8 04 00 00 00	 mov	 eax, 4
  00efc	6b c8 0f	 imul	 ecx, eax, 15
  00eff	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f02	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00f07	75 25		 jne	 SHORT $LN94@P_DoJumpSt
  00f09	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f0c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f0e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gravity
  00f14	c1 e2 02	 shl	 edx, 2
  00f17	39 51 50	 cmp	 DWORD PTR [ecx+80], edx
  00f1a	7e 12		 jle	 SHORT $LN94@P_DoJumpSt

; 2171 : 						player->mo->momz = gravity*4;

  00f1c	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  00f21	c1 e0 02	 shl	 eax, 2
  00f24	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00f27	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f29	89 42 50	 mov	 DWORD PTR [edx+80], eax
  00f2c	eb 39		 jmp	 SHORT $LN96@P_DoJumpSt
$LN94@P_DoJumpSt:

; 2172 : 					else if (player->powers[pw_super] && player->mo->momz > -gravity*16)

  00f2e	b8 04 00 00 00	 mov	 eax, 4
  00f33	6b c8 0f	 imul	 ecx, eax, 15
  00f36	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f39	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00f3e	74 27		 je	 SHORT $LN96@P_DoJumpSt
  00f40	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f43	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f45	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gravity
  00f4b	f7 da		 neg	 edx
  00f4d	c1 e2 04	 shl	 edx, 4
  00f50	39 51 50	 cmp	 DWORD PTR [ecx+80], edx
  00f53	7e 12		 jle	 SHORT $LN96@P_DoJumpSt

; 2173 : 						player->mo->momz = -gravity*16; //Float "upward" 4x as fast while super.

  00f55	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  00f5a	f7 d8		 neg	 eax
  00f5c	c1 e0 04	 shl	 eax, 4
  00f5f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00f62	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f64	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN96@P_DoJumpSt:

; 2174 : 				}
; 2175 : 			}
; 2176 : 
; 2177 : 			player->pflags &= ~PF_SPINNING;

  00f67	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f6a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00f70	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  00f76	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f79	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN85@P_DoJumpSt:

; 2178 : 		}
; 2179 : 	}
; 2180 : 
; 2181 : 	// If letting go of the jump button while still on ascent, cut the jump height.
; 2182 : 	if (!(player->pflags & PF_JUMPDOWN) && (player->pflags & PF_JUMPED) && ((player->mo->eflags & MFE_VERTICALFLIP && player->mo->momz < 0) || (!(player->mo->eflags & MFE_VERTICALFLIP) && player->mo->momz > 0)) && player->jumping == 1)

  00f7f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f82	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00f88	83 e1 08	 and	 ecx, 8
  00f8b	75 72		 jne	 SHORT $LN97@P_DoJumpSt
  00f8d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f90	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00f96	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00f9c	74 61		 je	 SHORT $LN97@P_DoJumpSt
  00f9e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fa1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fa3	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00fa9	83 e2 20	 and	 edx, 32			; 00000020H
  00fac	74 0b		 je	 SHORT $LN99@P_DoJumpSt
  00fae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fb1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fb3	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  00fb7	7c 1b		 jl	 SHORT $LN98@P_DoJumpSt
$LN99@P_DoJumpSt:
  00fb9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fbc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fbe	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00fc4	83 e2 20	 and	 edx, 32			; 00000020H
  00fc7	75 36		 jne	 SHORT $LN97@P_DoJumpSt
  00fc9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fcc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fce	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  00fd2	7e 2b		 jle	 SHORT $LN97@P_DoJumpSt
$LN98@P_DoJumpSt:
  00fd4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fd7	83 b8 10 01 00
	00 01		 cmp	 DWORD PTR [eax+272], 1
  00fde	75 1f		 jne	 SHORT $LN97@P_DoJumpSt

; 2183 : 	{
; 2184 : 		player->mo->momz >>= 1;

  00fe0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fe3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fe5	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00fe8	d1 fa		 sar	 edx, 1
  00fea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fed	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fef	89 51 50	 mov	 DWORD PTR [ecx+80], edx

; 2185 : 		player->jumping = 0;

  00ff2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ff5	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0
$LN97@P_DoJumpSt:

; 2186 : 	}
; 2187 : }

  00fff	5f		 pop	 edi
  01000	5e		 pop	 esi
  01001	5b		 pop	 ebx
  01002	8b e5		 mov	 esp, ebp
  01004	5d		 pop	 ebp
  01005	c3		 ret	 0
  01006	66 90		 npad	 2
$LN101@P_DoJumpSt:
  01008	00 00 00 00	 DD	 $LN15@P_DoJumpSt
  0100c	00 00 00 00	 DD	 $LN35@P_DoJumpSt
  01010	00 00 00 00	 DD	 $LN50@P_DoJumpSt
  01014	00 00 00 00	 DD	 $LN60@P_DoJumpSt
  01018	00 00 00 00	 DD	 $LN68@P_DoJumpSt
  0101c	00 00 00 00	 DD	 $LN68@P_DoJumpSt
  01020	00 00 00 00	 DD	 $LN35@P_DoJumpSt
  01024	00 00 00 00	 DD	 $LN15@P_DoJumpSt
_P_DoJumpStuff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoJumpShield
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_DoJumpShield PROC					; COMDAT

; 1900 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1901 : 	if (player->mo->state >= &states[S_PLAY_FALL1]
; 1902 : 		&& player->mo->state <= &states[S_PLAY_FALL2])

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  00013	6b c2 27	 imul	 eax, edx, 39
  00016	05 00 00 00 00	 add	 eax, OFFSET _states
  0001b	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  0001e	72 1c		 jb	 SHORT $LN2@P_DoJumpSh
  00020	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0002a	6b c2 28	 imul	 eax, edx, 40
  0002d	05 00 00 00 00	 add	 eax, OFFSET _states
  00032	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00035	77 05		 ja	 SHORT $LN2@P_DoJumpSh

; 1903 : 		return;

  00037	e9 a8 00 00 00	 jmp	 $LN1@P_DoJumpSh
$LN2@P_DoJumpSh:

; 1904 : 
; 1905 : 	player->pflags &= ~PF_JUMPED;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00045	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  0004b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0004e	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1906 : 	P_DoJump(player, false);

  00054	6a 00		 push	 0
  00056	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _P_DoJump
  0005f	83 c4 08	 add	 esp, 8

; 1907 : 	player->pflags &= ~PF_JUMPED;

  00062	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00065	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0006b	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  00071	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00074	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1908 : 	player->secondjump = 0;

  0007a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007d	c6 80 14 01 00
	00 00		 mov	 BYTE PTR [eax+276], 0

; 1909 : 	player->jumping = 0;

  00084	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00087	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0

; 1910 : 	player->pflags |= PF_THOKKED;

  00091	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00094	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0009a	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  000a0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000a3	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1911 : 	player->pflags &= ~PF_SPINNING;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ac	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000b2	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  000b8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000bb	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1912 : 	P_SetPlayerMobjState(player->mo, S_PLAY_FALL1);

  000c1	6a 27		 push	 39			; 00000027H
  000c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  000ce	83 c4 08	 add	 esp, 8

; 1913 : 	S_StartSound(player->mo, sfx_wdjump);

  000d1	68 ef 00 00 00	 push	 239			; 000000efH
  000d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 _S_StartSound
  000e1	83 c4 08	 add	 esp, 8
$LN1@P_DoJumpSh:

; 1914 : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
_P_DoJumpShield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoSpinDash
_TEXT	SEGMENT
_item$1 = -4						; size = 4
_player$ = 8						; size = 4
_cmd$ = 12						; size = 4
_P_DoSpinDash PROC					; COMDAT

; 1792 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1793 : 	if (player->pflags & PF_STASIS || player->powers[pw_nocontrol])

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00012	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  00018	75 12		 jne	 SHORT $LN3@P_DoSpinDa
  0001a	b8 04 00 00 00	 mov	 eax, 4
  0001f	6b c8 1b	 imul	 ecx, eax, 27
  00022	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00025	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0002a	74 05		 je	 SHORT $LN2@P_DoSpinDa
$LN3@P_DoSpinDa:

; 1794 : 		return;

  0002c	e9 6a 07 00 00	 jmp	 $LN31@P_DoSpinDa
$LN2@P_DoSpinDa:

; 1795 : 
; 1796 : 	// Spinning and Spindashing
; 1797 : 	if ((player->charability2 == CA2_SPINDASH) && !(player->pflags & PF_SLIDING) && !player->exiting && !(!(player->pflags & PF_SLIDING) && player->mo->state == &states[player->mo->info->painstate] && player->powers[pw_flashing])) // subsequent revs

  00031	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00034	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  0003b	0f 85 0e 04 00
	00		 jne	 $LN20@P_DoSpinDa
  00041	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00044	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0004a	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00050	0f 85 f9 03 00
	00		 jne	 $LN20@P_DoSpinDa
  00056	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00059	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00060	0f 85 e9 03 00
	00		 jne	 $LN20@P_DoSpinDa
  00066	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00069	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0006f	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00075	75 33		 jne	 SHORT $LN5@P_DoSpinDa
  00077	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0007f	8b 02		 mov	 eax, DWORD PTR [edx]
  00081	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  00087	6b 42 1c 1c	 imul	 eax, DWORD PTR [edx+28], 28
  0008b	05 00 00 00 00	 add	 eax, OFFSET _states
  00090	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00093	75 15		 jne	 SHORT $LN5@P_DoSpinDa
  00095	b8 04 00 00 00	 mov	 eax, 4
  0009a	d1 e0		 shl	 eax, 1
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0009f	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  000a4	0f 85 a5 03 00
	00		 jne	 $LN20@P_DoSpinDa
$LN5@P_DoSpinDa:

; 1798 : 	{
; 1799 : 		if ((cmd->buttons & BT_USE) && player->speed < 5 && !player->mo->momz && onground && !(player->pflags & PF_USEDOWN) && !(player->pflags & PF_SPINNING))

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _cmd$[ebp]
  000ad	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000b1	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000b7	0f 84 3d 01 00
	00		 je	 $LN6@P_DoSpinDa
  000bd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c0	83 b8 0c 01 00
	00 05		 cmp	 DWORD PTR [eax+268], 5
  000c7	0f 8d 2d 01 00
	00		 jge	 $LN6@P_DoSpinDa
  000cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d2	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  000d6	0f 85 1e 01 00
	00		 jne	 $LN6@P_DoSpinDa
  000dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  000e3	0f 84 11 01 00
	00		 je	 $LN6@P_DoSpinDa
  000e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ec	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000f2	83 e1 04	 and	 ecx, 4
  000f5	0f 85 ff 00 00
	00		 jne	 $LN6@P_DoSpinDa
  000fb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000fe	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00104	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0010a	0f 85 ea 00 00
	00		 jne	 $LN6@P_DoSpinDa

; 1800 : 		{
; 1801 : 			P_ResetScore(player);

  00110	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 _P_ResetScore
  00119	83 c4 04	 add	 esp, 4

; 1802 : 			player->mo->momx = player->cmomx;

  0011c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00121	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00124	8b 82 3c 01 00
	00		 mov	 eax, DWORD PTR [edx+316]
  0012a	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1803 : 			player->mo->momy = player->cmomy;

  0012d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00130	8b 08		 mov	 ecx, DWORD PTR [eax]
  00132	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00135	8b 82 40 01 00
	00		 mov	 eax, DWORD PTR [edx+320]
  0013b	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1804 : 			player->pflags |= PF_STARTDASH;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00141	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00147	81 c9 00 40 00
	00		 or	 ecx, 16384		; 00004000H
  0014d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00150	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1805 : 			player->pflags |= PF_SPINNING;

  00156	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00159	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0015f	81 c9 00 20 00
	00		 or	 ecx, 8192		; 00002000H
  00165	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00168	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1806 : 			player->dashspeed = FIXEDSCALE(FRACUNIT, player->mo->scale)/NEWTICRATERATIO;

  0016e	68 00 00 01 00	 push	 65536			; 00010000H
  00173	68 00 00 64 00	 push	 6553600			; 00640000H
  00178	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0017b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017d	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00184	c1 e2 10	 shl	 edx, 16			; 00000010H
  00187	52		 push	 edx
  00188	e8 00 00 00 00	 call	 _FixedDiv
  0018d	83 c4 08	 add	 esp, 8
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 _FixedMul
  00196	83 c4 08	 add	 esp, 8
  00199	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0019c	89 81 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], eax

; 1807 : 			P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  001a2	6a 0c		 push	 12			; 0000000cH
  001a4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a9	51		 push	 ecx
  001aa	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  001af	83 c4 08	 add	 esp, 8

; 1808 : 			player->pflags |= PF_USEDOWN;

  001b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001bb	83 c9 04	 or	 ecx, 4
  001be	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001c1	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1809 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  001c7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cc	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  001d2	83 e2 20	 and	 edx, 32			; 00000020H
  001d5	74 1e		 je	 SHORT $LN8@P_DoSpinDa

; 1810 : 				player->mo->z = player->mo->ceilingz - P_GetPlayerSpinHeight(player);

  001d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001da	8b 30		 mov	 esi, DWORD PTR [eax]
  001dc	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001df	51		 push	 ecx
  001e0	e8 00 00 00 00	 call	 _P_GetPlayerSpinHeight
  001e5	83 c4 04	 add	 esp, 4
  001e8	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  001eb	2b d0		 sub	 edx, eax
  001ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f2	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN8@P_DoSpinDa:

; 1811 : 		}

  001f5	e9 55 02 00 00	 jmp	 $LN20@P_DoSpinDa
$LN6@P_DoSpinDa:

; 1812 : 		else if ((cmd->buttons & BT_USE) && (player->pflags & PF_STARTDASH))

  001fa	8b 45 0c	 mov	 eax, DWORD PTR _cmd$[ebp]
  001fd	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00201	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00207	0f 84 04 01 00
	00		 je	 $LN9@P_DoSpinDa
  0020d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00210	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00216	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  0021c	0f 84 ef 00 00
	00		 je	 $LN9@P_DoSpinDa

; 1813 : 		{
; 1814 : 			player->dashspeed += FIXEDSCALE(FRACUNIT, player->mo->scale)/NEWTICRATERATIO;

  00222	68 00 00 01 00	 push	 65536			; 00010000H
  00227	68 00 00 64 00	 push	 6553600			; 00640000H
  0022c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0022f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00231	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00238	c1 e2 10	 shl	 edx, 16			; 00000010H
  0023b	52		 push	 edx
  0023c	e8 00 00 00 00	 call	 _FixedDiv
  00241	83 c4 08	 add	 esp, 8
  00244	50		 push	 eax
  00245	e8 00 00 00 00	 call	 _FixedMul
  0024a	83 c4 08	 add	 esp, 8
  0024d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00250	03 81 c0 00 00
	00		 add	 eax, DWORD PTR [ecx+192]
  00256	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00259	89 82 c0 00 00
	00		 mov	 DWORD PTR [edx+192], eax

; 1815 : 
; 1816 : 			if ((leveltime % (TICRATE/10)) == 0)

  0025f	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00264	33 d2		 xor	 edx, edx
  00266	b9 03 00 00 00	 mov	 ecx, 3
  0026b	f7 f1		 div	 ecx
  0026d	85 d2		 test	 edx, edx
  0026f	0f 85 97 00 00
	00		 jne	 $LN15@P_DoSpinDa

; 1817 : 			{
; 1818 : 				mobj_t *item;
; 1819 : 
; 1820 : 				if (!player->spectator)

  00275	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00278	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  0027f	85 c9		 test	 ecx, ecx
  00281	75 13		 jne	 SHORT $LN12@P_DoSpinDa

; 1821 : 					S_StartSound(player->mo, sfx_spndsh); // Make the rev sound!

  00283	68 d7 00 00 00	 push	 215			; 000000d7H
  00288	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0028b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028d	51		 push	 ecx
  0028e	e8 00 00 00 00	 call	 _S_StartSound
  00293	83 c4 08	 add	 esp, 8
$LN12@P_DoSpinDa:

; 1822 : 
; 1823 : 				// Now spawn the color thok circle.
; 1824 : 				if (player->spinitem > 0)

  00296	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00299	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [eax+232], 0
  002a0	7e 1b		 jle	 SHORT $LN13@P_DoSpinDa

; 1825 : 					item = P_SpawnSpinMobj(player, player->spinitem);

  002a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002a5	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  002ab	51		 push	 ecx
  002ac	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002af	52		 push	 edx
  002b0	e8 00 00 00 00	 call	 _P_SpawnSpinMobj
  002b5	83 c4 08	 add	 esp, 8
  002b8	89 45 fc	 mov	 DWORD PTR _item$1[ebp], eax
  002bb	eb 1e		 jmp	 SHORT $LN14@P_DoSpinDa
$LN13@P_DoSpinDa:

; 1826 : 				else
; 1827 : 					item = P_SpawnSpinMobj(player, player->mo->info->raisestate);

  002bd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c2	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  002c8	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  002cb	50		 push	 eax
  002cc	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002cf	51		 push	 ecx
  002d0	e8 00 00 00 00	 call	 _P_SpawnSpinMobj
  002d5	83 c4 08	 add	 esp, 8
  002d8	89 45 fc	 mov	 DWORD PTR _item$1[ebp], eax
$LN14@P_DoSpinDa:

; 1828 : 
; 1829 : 				if (item && (player->charflags & SF_GHOSTSPINITEM))

  002db	83 7d fc 00	 cmp	 DWORD PTR _item$1[ebp], 0
  002df	74 2b		 je	 SHORT $LN15@P_DoSpinDa
  002e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e4	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  002ea	83 e1 08	 and	 ecx, 8
  002ed	74 1d		 je	 SHORT $LN15@P_DoSpinDa

; 1830 : 				{
; 1831 : 					P_SpawnGhostMobj(item);

  002ef	8b 45 fc	 mov	 eax, DWORD PTR _item$1[ebp]
  002f2	50		 push	 eax
  002f3	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  002f8	83 c4 04	 add	 esp, 4

; 1832 : 					P_SetMobjState(item, S_DISS);

  002fb	68 4f 06 00 00	 push	 1615			; 0000064fH
  00300	8b 45 fc	 mov	 eax, DWORD PTR _item$1[ebp]
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 _P_SetMobjState
  00309	83 c4 08	 add	 esp, 8
$LN15@P_DoSpinDa:

; 1833 : 				}
; 1834 : 			}
; 1835 : 		}

  0030c	e9 3e 01 00 00	 jmp	 $LN20@P_DoSpinDa
$LN9@P_DoSpinDa:

; 1836 : 		// If not moving up or down, and travelling faster than a speed of four while not holding
; 1837 : 		// down the spin button and not spinning.
; 1838 : 		// AKA Just go into a spin on the ground, you idiot. ;)
; 1839 : 		else if ((cmd->buttons & BT_USE || ((twodlevel || (player->mo->flags2 & MF2_TWOD)) && cmd->forwardmove < -20)) && !player->climbing && !player->mo->momz && onground && player->speed > 5 && !(player->pflags & PF_USEDOWN) && !(player->pflags & PF_SPINNING))

  00311	8b 45 0c	 mov	 eax, DWORD PTR _cmd$[ebp]
  00314	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00318	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  0031e	75 34		 jne	 SHORT $LN17@P_DoSpinDa
  00320	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00327	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0032c	75 17		 jne	 SHORT $LN18@P_DoSpinDa
  0032e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00331	8b 08		 mov	 ecx, DWORD PTR [eax]
  00333	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00339	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  0033f	0f 84 0a 01 00
	00		 je	 $LN20@P_DoSpinDa
$LN18@P_DoSpinDa:
  00345	8b 45 0c	 mov	 eax, DWORD PTR _cmd$[ebp]
  00348	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0034b	83 f9 ec	 cmp	 ecx, -20		; ffffffecH
  0034e	0f 8d fb 00 00
	00		 jge	 $LN20@P_DoSpinDa
$LN17@P_DoSpinDa:
  00354	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00357	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0035e	0f 85 eb 00 00
	00		 jne	 $LN20@P_DoSpinDa
  00364	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00367	8b 08		 mov	 ecx, DWORD PTR [eax]
  00369	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  0036d	0f 85 dc 00 00
	00		 jne	 $LN20@P_DoSpinDa
  00373	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  0037a	0f 84 cf 00 00
	00		 je	 $LN20@P_DoSpinDa
  00380	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00383	83 b8 0c 01 00
	00 05		 cmp	 DWORD PTR [eax+268], 5
  0038a	0f 8e bf 00 00
	00		 jle	 $LN20@P_DoSpinDa
  00390	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00393	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00399	83 e1 04	 and	 ecx, 4
  0039c	0f 85 ad 00 00
	00		 jne	 $LN20@P_DoSpinDa
  003a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003a5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  003ab	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  003b1	0f 85 98 00 00
	00		 jne	 $LN20@P_DoSpinDa

; 1840 : 		{
; 1841 : 			P_ResetScore(player);

  003b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ba	50		 push	 eax
  003bb	e8 00 00 00 00	 call	 _P_ResetScore
  003c0	83 c4 04	 add	 esp, 4

; 1842 : 			player->pflags |= PF_SPINNING;

  003c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003c6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  003cc	81 c9 00 20 00
	00		 or	 ecx, 8192		; 00002000H
  003d2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003d5	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1843 : 			P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  003db	6a 0c		 push	 12			; 0000000cH
  003dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e2	51		 push	 ecx
  003e3	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  003e8	83 c4 08	 add	 esp, 8

; 1844 : 			if (!player->spectator)

  003eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ee	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  003f5	85 c9		 test	 ecx, ecx
  003f7	75 13		 jne	 SHORT $LN19@P_DoSpinDa

; 1845 : 				S_StartSound(player->mo, sfx_spin);

  003f9	68 d3 00 00 00	 push	 211			; 000000d3H
  003fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00401	8b 08		 mov	 ecx, DWORD PTR [eax]
  00403	51		 push	 ecx
  00404	e8 00 00 00 00	 call	 _S_StartSound
  00409	83 c4 08	 add	 esp, 8
$LN19@P_DoSpinDa:

; 1846 : 			player->pflags |= PF_USEDOWN;

  0040c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0040f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00415	83 c9 04	 or	 ecx, 4
  00418	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0041b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1847 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  00421	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00424	8b 08		 mov	 ecx, DWORD PTR [eax]
  00426	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0042c	83 e2 20	 and	 edx, 32			; 00000020H
  0042f	74 1e		 je	 SHORT $LN20@P_DoSpinDa

; 1848 : 				player->mo->z = player->mo->ceilingz - P_GetPlayerSpinHeight(player);

  00431	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00434	8b 30		 mov	 esi, DWORD PTR [eax]
  00436	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00439	51		 push	 ecx
  0043a	e8 00 00 00 00	 call	 _P_GetPlayerSpinHeight
  0043f	83 c4 04	 add	 esp, 4
  00442	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  00445	2b d0		 sub	 edx, eax
  00447	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0044a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0044c	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN20@P_DoSpinDa:

; 1849 : 		}
; 1850 : 	}
; 1851 : 
; 1852 : 	if (onground && (player->pflags & PF_SPINNING) && !(player->pflags & PF_STARTDASH)
; 1853 : 		&& (player->rmomx < FIXEDSCALE(5*FRACUNIT/NEWTICRATERATIO,player->mo->scale)
; 1854 : 		&& player->rmomx > FIXEDSCALE(-5*FRACUNIT/NEWTICRATERATIO,player->mo->scale))
; 1855 : 		&& (player->rmomy < FIXEDSCALE(5*FRACUNIT/NEWTICRATERATIO,player->mo->scale)

  0044f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  00456	0f 84 f0 01 00
	00		 je	 $LN25@P_DoSpinDa
  0045c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0045f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00465	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0046b	0f 84 db 01 00
	00		 je	 $LN25@P_DoSpinDa
  00471	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00474	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0047a	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00480	0f 85 c6 01 00
	00		 jne	 $LN25@P_DoSpinDa
  00486	68 00 00 05 00	 push	 327680			; 00050000H
  0048b	68 00 00 64 00	 push	 6553600			; 00640000H
  00490	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00493	8b 08		 mov	 ecx, DWORD PTR [eax]
  00495	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0049c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0049f	52		 push	 edx
  004a0	e8 00 00 00 00	 call	 _FixedDiv
  004a5	83 c4 08	 add	 esp, 8
  004a8	50		 push	 eax
  004a9	e8 00 00 00 00	 call	 _FixedMul
  004ae	83 c4 08	 add	 esp, 8
  004b1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  004b4	39 81 44 01 00
	00		 cmp	 DWORD PTR [ecx+324], eax
  004ba	0f 8d 8c 01 00
	00		 jge	 $LN25@P_DoSpinDa
  004c0	68 00 00 fb ff	 push	 -327680			; fffb0000H
  004c5	68 00 00 64 00	 push	 6553600			; 00640000H
  004ca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  004cf	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  004d6	c1 e2 10	 shl	 edx, 16			; 00000010H
  004d9	52		 push	 edx
  004da	e8 00 00 00 00	 call	 _FixedDiv
  004df	83 c4 08	 add	 esp, 8
  004e2	50		 push	 eax
  004e3	e8 00 00 00 00	 call	 _FixedMul
  004e8	83 c4 08	 add	 esp, 8
  004eb	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  004ee	39 81 44 01 00
	00		 cmp	 DWORD PTR [ecx+324], eax
  004f4	0f 8e 52 01 00
	00		 jle	 $LN25@P_DoSpinDa
  004fa	68 00 00 05 00	 push	 327680			; 00050000H
  004ff	68 00 00 64 00	 push	 6553600			; 00640000H
  00504	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00507	8b 08		 mov	 ecx, DWORD PTR [eax]
  00509	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00510	c1 e2 10	 shl	 edx, 16			; 00000010H
  00513	52		 push	 edx
  00514	e8 00 00 00 00	 call	 _FixedDiv
  00519	83 c4 08	 add	 esp, 8
  0051c	50		 push	 eax
  0051d	e8 00 00 00 00	 call	 _FixedMul
  00522	83 c4 08	 add	 esp, 8
  00525	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00528	39 81 48 01 00
	00		 cmp	 DWORD PTR [ecx+328], eax
  0052e	0f 8d 18 01 00
	00		 jge	 $LN25@P_DoSpinDa
  00534	68 00 00 fb ff	 push	 -327680			; fffb0000H
  00539	68 00 00 64 00	 push	 6553600			; 00640000H
  0053e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00541	8b 08		 mov	 ecx, DWORD PTR [eax]
  00543	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0054a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0054d	52		 push	 edx
  0054e	e8 00 00 00 00	 call	 _FixedDiv
  00553	83 c4 08	 add	 esp, 8
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 _FixedMul
  0055c	83 c4 08	 add	 esp, 8
  0055f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00562	39 81 48 01 00
	00		 cmp	 DWORD PTR [ecx+328], eax
  00568	0f 8e de 00 00
	00		 jle	 $LN25@P_DoSpinDa

; 1856 : 		&& player->rmomy > FIXEDSCALE(-5*FRACUNIT/NEWTICRATERATIO,player->mo->scale)))
; 1857 : 	{
; 1858 : 		if (GETSECSPECIAL(player->mo->subsector->sector->special, 4) == 7 || (player->mo->ceilingz - player->mo->floorz < P_GetPlayerHeight(player)))

  0056e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00571	8b 08		 mov	 ecx, DWORD PTR [eax]
  00573	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00576	8b 02		 mov	 eax, DWORD PTR [edx]
  00578	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  0057c	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  0057f	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00582	83 f9 07	 cmp	 ecx, 7
  00585	74 20		 je	 SHORT $LN24@P_DoSpinDa
  00587	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0058a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0058c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0058f	8b 02		 mov	 eax, DWORD PTR [edx]
  00591	8b 71 3c	 mov	 esi, DWORD PTR [ecx+60]
  00594	2b 70 38	 sub	 esi, DWORD PTR [eax+56]
  00597	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0059a	51		 push	 ecx
  0059b	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  005a0	83 c4 04	 add	 esp, 4
  005a3	3b f0		 cmp	 esi, eax
  005a5	7d 21		 jge	 SHORT $LN22@P_DoSpinDa
$LN24@P_DoSpinDa:

; 1859 : 			P_InstaThrust(player->mo, player->mo->angle, 10*FRACUNIT);

  005a7	68 00 00 0a 00	 push	 655360			; 000a0000H
  005ac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005af	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b1	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  005b4	52		 push	 edx
  005b5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  005ba	51		 push	 ecx
  005bb	e8 00 00 00 00	 call	 _P_InstaThrust
  005c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  005c3	e9 84 00 00 00	 jmp	 $LN25@P_DoSpinDa
$LN22@P_DoSpinDa:

; 1860 : 		else
; 1861 : 		{
; 1862 : 			player->pflags &= ~PF_SPINNING;

  005c8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005cb	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  005d1	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  005d7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005da	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1863 : 			P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  005e0	6a 01		 push	 1
  005e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  005e7	51		 push	 ecx
  005e8	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  005ed	83 c4 08	 add	 esp, 8

; 1864 : 			player->mo->momx = player->cmomx;

  005f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  005f5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005f8	8b 82 3c 01 00
	00		 mov	 eax, DWORD PTR [edx+316]
  005fe	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1865 : 			player->mo->momy = player->cmomy;

  00601	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00604	8b 08		 mov	 ecx, DWORD PTR [eax]
  00606	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00609	8b 82 40 01 00
	00		 mov	 eax, DWORD PTR [edx+320]
  0060f	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1866 : 			P_ResetScore(player);

  00612	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00615	50		 push	 eax
  00616	e8 00 00 00 00	 call	 _P_ResetScore
  0061b	83 c4 04	 add	 esp, 4

; 1867 : 			if (player->mo->eflags & MFE_VERTICALFLIP)

  0061e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00621	8b 08		 mov	 ecx, DWORD PTR [eax]
  00623	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00629	83 e2 20	 and	 edx, 32			; 00000020H
  0062c	74 1e		 je	 SHORT $LN25@P_DoSpinDa

; 1868 : 				player->mo->z = player->mo->ceilingz - P_GetPlayerHeight(player);

  0062e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00631	8b 30		 mov	 esi, DWORD PTR [eax]
  00633	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00636	51		 push	 ecx
  00637	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  0063c	83 c4 04	 add	 esp, 4
  0063f	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  00642	2b d0		 sub	 edx, eax
  00644	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00647	8b 08		 mov	 ecx, DWORD PTR [eax]
  00649	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN25@P_DoSpinDa:

; 1869 : 		}
; 1870 : 	}
; 1871 : 
; 1872 : 	// Catapult the player from a spindash rev!
; 1873 : 	if (onground && !(player->pflags & PF_USEDOWN) && player->dashspeed && (player->pflags & PF_STARTDASH) && (player->pflags & PF_SPINNING))

  0064c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  00653	0f 84 ea 00 00
	00		 je	 $LN26@P_DoSpinDa
  00659	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0065c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00662	83 e1 04	 and	 ecx, 4
  00665	0f 85 d8 00 00
	00		 jne	 $LN26@P_DoSpinDa
  0066b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0066e	83 b8 c0 00 00
	00 00		 cmp	 DWORD PTR [eax+192], 0
  00675	0f 84 c8 00 00
	00		 je	 $LN26@P_DoSpinDa
  0067b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0067e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00684	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  0068a	0f 84 b3 00 00
	00		 je	 $LN26@P_DoSpinDa
  00690	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00693	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00699	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0069f	0f 84 9e 00 00
	00		 je	 $LN26@P_DoSpinDa

; 1874 : 	{
; 1875 : 		if (player->powers[pw_ingoop])

  006a5	b8 04 00 00 00	 mov	 eax, 4
  006aa	6b c8 1c	 imul	 ecx, eax, 28
  006ad	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006b0	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  006b5	74 0d		 je	 SHORT $LN27@P_DoSpinDa

; 1876 : 			player->dashspeed = 0;

  006b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006ba	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+192], 0
$LN27@P_DoSpinDa:

; 1877 : 
; 1878 : 		player->pflags &= ~PF_STARTDASH;

  006c4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006c7	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006cd	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  006d3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  006d6	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1879 : 		if (!(gametype == GT_RACE && leveltime < 4*TICRATE))

  006dc	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  006e3	83 f8 02	 cmp	 eax, 2
  006e6	75 0c		 jne	 SHORT $LN29@P_DoSpinDa
  006e8	81 3d 00 00 00
	00 8c 00 00 00	 cmp	 DWORD PTR _leveltime, 140 ; 0000008cH
  006f2	72 42		 jb	 SHORT $LN30@P_DoSpinDa
$LN29@P_DoSpinDa:

; 1880 : 		{
; 1881 : 			P_InstaThrust(player->mo, player->mo->angle, player->dashspeed); // catapult forward ho!!

  006f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006f7	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  006fd	51		 push	 ecx
  006fe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00701	8b 02		 mov	 eax, DWORD PTR [edx]
  00703	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00706	51		 push	 ecx
  00707	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0070a	8b 02		 mov	 eax, DWORD PTR [edx]
  0070c	50		 push	 eax
  0070d	e8 00 00 00 00	 call	 _P_InstaThrust
  00712	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1882 : 			if (!player->spectator)

  00715	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00718	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  0071f	85 c9		 test	 ecx, ecx
  00721	75 13		 jne	 SHORT $LN30@P_DoSpinDa

; 1883 : 				S_StartSound(player->mo, sfx_zoom);

  00723	68 f2 00 00 00	 push	 242			; 000000f2H
  00728	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0072b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0072d	51		 push	 ecx
  0072e	e8 00 00 00 00	 call	 _S_StartSound
  00733	83 c4 08	 add	 esp, 8
$LN30@P_DoSpinDa:

; 1884 : 		}
; 1885 : 		player->dashspeed = 0;

  00736	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00739	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+192], 0
$LN26@P_DoSpinDa:

; 1886 : 	}
; 1887 : 
; 1888 : 	if (onground && (player->pflags & PF_SPINNING)
; 1889 : 		&& !(player->mo->state >= &states[S_PLAY_ATK1]

  00743	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _onground, 0
  0074a	74 4f		 je	 SHORT $LN31@P_DoSpinDa
  0074c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0074f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00755	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0075b	74 3e		 je	 SHORT $LN31@P_DoSpinDa
  0075d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00760	8b 08		 mov	 ecx, DWORD PTR [eax]
  00762	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  00767	6b c2 0c	 imul	 eax, edx, 12
  0076a	05 00 00 00 00	 add	 eax, OFFSET _states
  0076f	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00772	72 17		 jb	 SHORT $LN32@P_DoSpinDa
  00774	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00777	8b 08		 mov	 ecx, DWORD PTR [eax]
  00779	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  0077e	6b c2 0f	 imul	 eax, edx, 15
  00781	05 00 00 00 00	 add	 eax, OFFSET _states
  00786	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00789	76 10		 jbe	 SHORT $LN31@P_DoSpinDa
$LN32@P_DoSpinDa:

; 1890 : 		&& player->mo->state <= &states[S_PLAY_ATK4]))
; 1891 : 		P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  0078b	6a 0c		 push	 12			; 0000000cH
  0078d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00790	8b 08		 mov	 ecx, DWORD PTR [eax]
  00792	51		 push	 ecx
  00793	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00798	83 c4 08	 add	 esp, 8
$LN31@P_DoSpinDa:

; 1892 : }

  0079b	5f		 pop	 edi
  0079c	5e		 pop	 esi
  0079d	5b		 pop	 ebx
  0079e	8b e5		 mov	 esp, ebp
  007a0	5d		 pop	 ebp
  007a1	c3		 ret	 0
_P_DoSpinDash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoSuperStuff
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_DoSuperStuff PROC					; COMDAT

; 1549 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1550 : 	// Does player have all emeralds? If so, flag the "Ready For Super!"
; 1551 : 	if ((ALL7EMERALDS(emeralds) || ALL7EMERALDS(player->powers[pw_emeralds])) && player->health > 50)

  00009	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00010	83 e0 7f	 and	 eax, 127		; 0000007fH
  00013	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00016	74 17		 je	 SHORT $LN4@P_DoSuperS
  00018	b8 04 00 00 00	 mov	 eax, 4
  0001d	6b c8 18	 imul	 ecx, eax, 24
  00020	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00023	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00027	83 e0 7f	 and	 eax, 127		; 0000007fH
  0002a	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0002d	75 23		 jne	 SHORT $LN2@P_DoSuperS
$LN4@P_DoSuperS:
  0002f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00032	83 78 28 32	 cmp	 DWORD PTR [eax+40], 50	; 00000032H
  00036	7e 1a		 jle	 SHORT $LN2@P_DoSuperS

; 1552 : 		player->pflags |= PF_SUPERREADY;

  00038	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00041	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  00047	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0004a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
  00050	eb 18		 jmp	 SHORT $LN3@P_DoSuperS
$LN2@P_DoSuperS:

; 1553 : 	else
; 1554 : 		player->pflags &= ~PF_SUPERREADY;

  00052	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00055	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0005b	81 e1 ff fe ff
	ff		 and	 ecx, -257		; fffffeffH
  00061	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00064	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN3@P_DoSuperS:

; 1555 : 
; 1556 : 	if (player->powers[pw_fireflower])

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	6b c8 11	 imul	 ecx, eax, 17
  00072	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00075	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0007a	74 21		 je	 SHORT $LN5@P_DoSuperS

; 1557 : 	{
; 1558 : 		player->mo->flags |= MF_TRANSLATION;

  0007c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00084	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  0008a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 1559 : 		player->mo->color = 13;

  00092	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	c6 41 68 0d	 mov	 BYTE PTR [ecx+104], 13	; 0000000dH

; 1560 : 	}

  0009b	eb 27		 jmp	 SHORT $LN6@P_DoSuperS
$LN5@P_DoSuperS:

; 1561 : 	else
; 1562 : 	{
; 1563 : 		player->mo->flags |= MF_TRANSLATION;

  0009d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000a5	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  000ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 1564 : 		player->mo->color = (UINT8)player->skincolor;

  000b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000bb	8a 82 b4 00 00
	00		 mov	 al, BYTE PTR [edx+180]
  000c1	88 41 68	 mov	 BYTE PTR [ecx+104], al
$LN6@P_DoSuperS:

; 1565 : 	}
; 1566 : 
; 1567 : 	if (player->powers[pw_super])

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	6b c8 0f	 imul	 ecx, eax, 15
  000cc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000cf	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000d4	0f 84 32 03 00
	00		 je	 $LN12@P_DoSuperS

; 1568 : 	{
; 1569 : 		// If you're super and not Sonic, de-superize!
; 1570 : 		if (!((ALL7EMERALDS(emeralds)) && (player->skin == 0)) && !(ALL7EMERALDS(player->powers[pw_emeralds])))

  000da	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  000e1	83 e0 7f	 and	 eax, 127		; 0000007fH
  000e4	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  000e7	75 10		 jne	 SHORT $LN9@P_DoSuperS
  000e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ec	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  000f3	0f 84 cc 00 00
	00		 je	 $LN10@P_DoSuperS
$LN9@P_DoSuperS:
  000f9	b8 04 00 00 00	 mov	 eax, 4
  000fe	6b c8 18	 imul	 ecx, eax, 24
  00101	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00104	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00108	83 e0 7f	 and	 eax, 127		; 0000007fH
  0010b	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0010e	0f 84 b1 00 00
	00		 je	 $LN10@P_DoSuperS

; 1571 : 		{
; 1572 : 			player->powers[pw_super] = 0;

  00114	b8 04 00 00 00	 mov	 eax, 4
  00119	6b c8 0f	 imul	 ecx, eax, 15
  0011c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0011f	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 1573 : 			P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  00127	6a 01		 push	 1
  00129	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	51		 push	 ecx
  0012f	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00134	83 c4 08	 add	 esp, 8

; 1574 : 			P_RestoreMusic(player);

  00137	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 _P_RestoreMusic
  00140	83 c4 04	 add	 esp, 4

; 1575 : 			P_SpawnShieldOrb(player);

  00143	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  0014c	83 c4 04	 add	 esp, 4

; 1576 : 			if (gametype != GT_COOP)

  0014f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00156	85 c0		 test	 eax, eax
  00158	74 6b		 je	 SHORT $LN10@P_DoSuperS

; 1577 : 			{
; 1578 : 				HU_SetCEchoFlags(0);

  0015a	6a 00		 push	 0
  0015c	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00161	83 c4 04	 add	 esp, 4

; 1579 : 				HU_SetCEchoDuration(5);

  00164	6a 05		 push	 5
  00166	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  0016b	83 c4 04	 add	 esp, 4

; 1580 : 				HU_DoCEcho(va("%s\\is no longer super.\\\\\\\\", player_names[player-players]));

  0016e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00171	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00176	99		 cdq
  00177	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0017c	f7 f9		 idiv	 ecx
  0017e	6b d0 16	 imul	 edx, eax, 22
  00181	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00187	52		 push	 edx
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@
  0018d	e8 00 00 00 00	 call	 _va
  00192	83 c4 08	 add	 esp, 8
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 _HU_DoCEcho
  0019b	83 c4 04	 add	 esp, 4

; 1581 : 				I_OutputMsg("%s is no longer super.\n", player_names[player-players]);

  0019e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a1	2d 00 00 00 00	 sub	 eax, OFFSET _players
  001a6	99		 cdq
  001a7	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001ac	f7 f9		 idiv	 ecx
  001ae	6b d0 16	 imul	 edx, eax, 22
  001b1	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  001b7	52		 push	 edx
  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@
  001bd	e8 00 00 00 00	 call	 _I_OutputMsg
  001c2	83 c4 08	 add	 esp, 8
$LN10@P_DoSuperS:

; 1582 : 			}
; 1583 : 		}
; 1584 : 
; 1585 : 		// Deplete one ring every second while super
; 1586 : 		if ((leveltime % TICRATE == 0) && !(player->exiting))

  001c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  001ca	33 d2		 xor	 edx, edx
  001cc	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  001d1	f7 f1		 div	 ecx
  001d3	85 d2		 test	 edx, edx
  001d5	75 34		 jne	 SHORT $LN11@P_DoSuperS
  001d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001da	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  001e1	75 28		 jne	 SHORT $LN11@P_DoSuperS

; 1587 : 		{
; 1588 : 			player->health--;

  001e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e6	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001e9	83 e9 01	 sub	 ecx, 1
  001ec	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001ef	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1589 : 			player->mo->health--;

  001f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f7	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  001fd	83 ea 01	 sub	 edx, 1
  00200	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00203	8b 08		 mov	 ecx, DWORD PTR [eax]
  00205	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx
$LN11@P_DoSuperS:

; 1590 : 		}
; 1591 : 
; 1592 : 		// Yousa yellow now!
; 1593 : 		player->mo->flags |= MF_TRANSLATION;

  0020b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0020e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00210	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00213	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  00219	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0021c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021e	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 1594 : 		player->mo->color = 15;

  00221	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	c6 41 68 0f	 mov	 BYTE PTR [ecx+104], 15	; 0000000fH

; 1595 : 
; 1596 : 		// Ran out of rings while super!
; 1597 : 		if ((player->powers[pw_super]) && (player->health <= 1 || player->exiting))

  0022a	b8 04 00 00 00	 mov	 eax, 4
  0022f	6b c8 0f	 imul	 ecx, eax, 15
  00232	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00235	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0023a	0f 84 cc 01 00
	00		 je	 $LN12@P_DoSuperS
  00240	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00243	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  00247	7e 10		 jle	 SHORT $LN13@P_DoSuperS
  00249	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0024c	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00253	0f 84 b3 01 00
	00		 je	 $LN12@P_DoSuperS
$LN13@P_DoSuperS:

; 1598 : 		{
; 1599 : 			player->powers[pw_emeralds] = 0; // lost the power stones

  00259	b8 04 00 00 00	 mov	 eax, 4
  0025e	6b c8 18	 imul	 ecx, eax, 24
  00261	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00264	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 1600 : 			P_SpawnGhostMobj(player->mo);

  0026c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0026f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  00277	83 c4 04	 add	 esp, 4

; 1601 : 
; 1602 : 			player->powers[pw_super] = 0;

  0027a	b8 04 00 00 00	 mov	 eax, 4
  0027f	6b c8 0f	 imul	 ecx, eax, 15
  00282	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00285	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 1603 : 
; 1604 : 			if (gametype != GT_COOP)

  0028d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00294	85 c0		 test	 eax, eax
  00296	74 16		 je	 SHORT $LN14@P_DoSuperS

; 1605 : 				player->powers[pw_flashing] = flashingtics-1;

  00298	a1 00 00 00 00	 mov	 eax, DWORD PTR _flashingtics
  0029d	83 e8 01	 sub	 eax, 1
  002a0	b9 04 00 00 00	 mov	 ecx, 4
  002a5	d1 e1		 shl	 ecx, 1
  002a7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002aa	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
$LN14@P_DoSuperS:

; 1606 : 
; 1607 : 			if (player->mo->health > 0)

  002ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b3	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  002ba	0f 8e af 00 00
	00		 jle	 $LN23@P_DoSuperS

; 1608 : 			{
; 1609 : 				if ((player->pflags & PF_JUMPED) || (player->pflags & PF_SPINNING))

  002c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002c3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002c9	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  002cf	75 11		 jne	 SHORT $LN18@P_DoSuperS
  002d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002d4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002da	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  002e0	74 12		 je	 SHORT $LN16@P_DoSuperS
$LN18@P_DoSuperS:

; 1610 : 					P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  002e2	6a 0c		 push	 12			; 0000000cH
  002e4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e9	51		 push	 ecx
  002ea	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  002ef	83 c4 08	 add	 esp, 8
  002f2	eb 56		 jmp	 SHORT $LN22@P_DoSuperS
$LN16@P_DoSuperS:

; 1611 : 				else if (player->pflags & PF_RUNNINGANIM)

  002f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002f7	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002fd	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00303	74 12		 je	 SHORT $LN19@P_DoSuperS

; 1612 : 					P_SetPlayerMobjState(player->mo, S_PLAY_SPD1);

  00305	6a 11		 push	 17			; 00000011H
  00307	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0030a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030c	51		 push	 ecx
  0030d	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00312	83 c4 08	 add	 esp, 8
  00315	eb 33		 jmp	 SHORT $LN22@P_DoSuperS
$LN19@P_DoSuperS:

; 1613 : 				else if (player->pflags & PF_WALKINGANIM)

  00317	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0031a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00320	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00326	74 12		 je	 SHORT $LN21@P_DoSuperS

; 1614 : 					P_SetPlayerMobjState(player->mo, S_PLAY_RUN1);

  00328	6a 04		 push	 4
  0032a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032f	51		 push	 ecx
  00330	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00335	83 c4 08	 add	 esp, 8
  00338	eb 10		 jmp	 SHORT $LN22@P_DoSuperS
$LN21@P_DoSuperS:

; 1615 : 				else
; 1616 : 					P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  0033a	6a 01		 push	 1
  0033c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0033f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00341	51		 push	 ecx
  00342	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00347	83 c4 08	 add	 esp, 8
$LN22@P_DoSuperS:

; 1617 : 
; 1618 : 				if (!player->exiting)

  0034a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0034d	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00354	75 19		 jne	 SHORT $LN23@P_DoSuperS

; 1619 : 				{
; 1620 : 					player->health = 1;

  00356	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00359	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1

; 1621 : 					player->mo->health = 1;

  00360	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00363	8b 08		 mov	 ecx, DWORD PTR [eax]
  00365	c7 81 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+140], 1
$LN23@P_DoSuperS:

; 1622 : 				}
; 1623 : 			}
; 1624 : 
; 1625 : 			// Inform the netgame that the champion has fallen in the heat of battle.
; 1626 : 			if (gametype != GT_COOP)

  0036f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00376	85 c0		 test	 eax, eax
  00378	74 7a		 je	 SHORT $LN24@P_DoSuperS

; 1627 : 			{
; 1628 : 				S_StartSound(NULL, sfx_s3k_52); //let all players hear it.

  0037a	68 a6 00 00 00	 push	 166			; 000000a6H
  0037f	6a 00		 push	 0
  00381	e8 00 00 00 00	 call	 _S_StartSound
  00386	83 c4 08	 add	 esp, 8

; 1629 : 				HU_SetCEchoFlags(0);

  00389	6a 00		 push	 0
  0038b	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00390	83 c4 04	 add	 esp, 4

; 1630 : 				HU_SetCEchoDuration(5);

  00393	6a 05		 push	 5
  00395	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  0039a	83 c4 04	 add	 esp, 4

; 1631 : 				HU_DoCEcho(va("%s\\is no longer super.\\\\\\\\", player_names[player-players]));

  0039d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003a0	2d 00 00 00 00	 sub	 eax, OFFSET _players
  003a5	99		 cdq
  003a6	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  003ab	f7 f9		 idiv	 ecx
  003ad	6b d0 16	 imul	 edx, eax, 22
  003b0	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  003b6	52		 push	 edx
  003b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@
  003bc	e8 00 00 00 00	 call	 _va
  003c1	83 c4 08	 add	 esp, 8
  003c4	50		 push	 eax
  003c5	e8 00 00 00 00	 call	 _HU_DoCEcho
  003ca	83 c4 04	 add	 esp, 4

; 1632 : 				I_OutputMsg("%s is no longer super.\n", player_names[player-players]);

  003cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003d0	2d 00 00 00 00	 sub	 eax, OFFSET _players
  003d5	99		 cdq
  003d6	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  003db	f7 f9		 idiv	 ecx
  003dd	6b d0 16	 imul	 edx, eax, 22
  003e0	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  003e6	52		 push	 edx
  003e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@
  003ec	e8 00 00 00 00	 call	 _I_OutputMsg
  003f1	83 c4 08	 add	 esp, 8
$LN24@P_DoSuperS:

; 1633 : 			}
; 1634 : 
; 1635 : 			// Resume normal music if you're the console player
; 1636 : 			P_RestoreMusic(player);

  003f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 _P_RestoreMusic
  003fd	83 c4 04	 add	 esp, 4

; 1637 : 
; 1638 : 			// If you had a shield, restore its visual significance.
; 1639 : 			P_SpawnShieldOrb(player);

  00400	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00403	50		 push	 eax
  00404	e8 00 00 00 00	 call	 _P_SpawnShieldOrb
  00409	83 c4 04	 add	 esp, 4
$LN12@P_DoSuperS:

; 1640 : 		}
; 1641 : 	}
; 1642 : }

  0040c	5f		 pop	 edi
  0040d	5e		 pop	 esi
  0040e	5b		 pop	 ebx
  0040f	8b e5		 mov	 esp, ebp
  00411	5d		 pop	 ebp
  00412	c3		 ret	 0
_P_DoSuperStuff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_CheckUnderwaterAndSpaceTimer
_TEXT	SEGMENT
_killer$1 = -12						; size = 4
_numbermobj$ = -8					; size = 4
_height$ = -4						; size = 4
_player$ = 8						; size = 4
_P_CheckUnderwaterAndSpaceTimer PROC			; COMDAT

; 1434 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1435 : 	fixed_t height;
; 1436 : 	mobj_t *numbermobj = NULL;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _numbermobj$[ebp], 0

; 1437 : 
; 1438 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  00010	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0001b	83 e2 20	 and	 edx, 32			; 00000020H
  0001e	74 4c		 je	 SHORT $LN2@P_CheckUnd

; 1439 : 		height = player->mo->z - FIXEDSCALE(8*FRACUNIT - mobjinfo[MT_DROWNNUMBERS].height, player->mo->scale);

  00020	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00023	8b 30		 mov	 esi, DWORD PTR [eax]
  00025	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0002a	69 d1 c0 00 00
	00		 imul	 edx, ecx, 192
  00030	b8 00 00 08 00	 mov	 eax, 524288		; 00080000H
  00035	2b 82 44 00 00
	00		 sub	 eax, DWORD PTR _mobjinfo[edx+68]
  0003b	50		 push	 eax
  0003c	68 00 00 64 00	 push	 6553600			; 00640000H
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00044	8b 11		 mov	 edx, DWORD PTR [ecx]
  00046	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  0004d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _FixedDiv
  00056	83 c4 08	 add	 esp, 8
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _FixedMul
  0005f	83 c4 08	 add	 esp, 8
  00062	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00065	2b c8		 sub	 ecx, eax
  00067	89 4d fc	 mov	 DWORD PTR _height$[ebp], ecx
  0006a	eb 40		 jmp	 SHORT $LN3@P_CheckUnd
$LN2@P_CheckUnd:

; 1440 : 	else
; 1441 : 		height = player->mo->z + player->mo->height + FIXEDSCALE(8*FRACUNIT, player->mo->scale);

  0006c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00071	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00079	03 70 44	 add	 esi, DWORD PTR [eax+68]
  0007c	68 00 00 08 00	 push	 524288			; 00080000H
  00081	68 00 00 64 00	 push	 6553600			; 00640000H
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  00092	c1 e0 10	 shl	 eax, 16			; 00000010H
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _FixedDiv
  0009b	83 c4 08	 add	 esp, 8
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _FixedMul
  000a4	83 c4 08	 add	 esp, 8
  000a7	03 f0		 add	 esi, eax
  000a9	89 75 fc	 mov	 DWORD PTR _height$[ebp], esi
$LN3@P_CheckUnd:

; 1442 : 
; 1443 : 	if (player->powers[pw_underwater] == 11*TICRATE + 1 || player->powers[pw_spacetime] == 11*TICRATE + 1)

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	6b c8 06	 imul	 ecx, eax, 6
  000b4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000b7	81 7c 0a 38 82
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 386 ; 00000182H
  000bf	74 15		 je	 SHORT $LN6@P_CheckUnd
  000c1	b8 04 00 00 00	 mov	 eax, 4
  000c6	6b c8 07	 imul	 ecx, eax, 7
  000c9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000cc	81 7c 0a 38 82
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 386 ; 00000182H
  000d4	75 47		 jne	 SHORT $LN4@P_CheckUnd
$LN6@P_CheckUnd:

; 1444 : 	{
; 1445 : 		numbermobj = P_SpawnMobj(player->mo->x, player->mo->y, height, MT_DROWNNUMBERS);

  000d6	68 c0 00 00 00	 push	 192			; 000000c0H
  000db	8b 45 fc	 mov	 eax, DWORD PTR _height$[ebp]
  000de	50		 push	 eax
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000e7	50		 push	 eax
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 _P_SpawnMobj
  000f6	83 c4 10	 add	 esp, 16			; 00000010H
  000f9	89 45 f8	 mov	 DWORD PTR _numbermobj$[ebp], eax

; 1446 : 		P_SetMobjState(numbermobj, numbermobj->info->spawnstate+5);

  000fc	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  000ff	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00105	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00108	83 c2 05	 add	 edx, 5
  0010b	52		 push	 edx
  0010c	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _P_SetMobjState
  00115	83 c4 08	 add	 esp, 8

; 1447 : 	}

  00118	e9 0f 03 00 00	 jmp	 $LN26@P_CheckUnd
$LN4@P_CheckUnd:

; 1448 : 	else if (player->powers[pw_underwater] == 9*TICRATE + 1 || player->powers[pw_spacetime] == 9*TICRATE + 1)

  0011d	b8 04 00 00 00	 mov	 eax, 4
  00122	6b c8 06	 imul	 ecx, eax, 6
  00125	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00128	81 7c 0a 38 3c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 316 ; 0000013cH
  00130	74 15		 je	 SHORT $LN9@P_CheckUnd
  00132	b8 04 00 00 00	 mov	 eax, 4
  00137	6b c8 07	 imul	 ecx, eax, 7
  0013a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0013d	81 7c 0a 38 3c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 316 ; 0000013cH
  00145	75 47		 jne	 SHORT $LN7@P_CheckUnd
$LN9@P_CheckUnd:

; 1449 : 	{
; 1450 : 		numbermobj = P_SpawnMobj(player->mo->x, player->mo->y, height, MT_DROWNNUMBERS);

  00147	68 c0 00 00 00	 push	 192			; 000000c0H
  0014c	8b 45 fc	 mov	 eax, DWORD PTR _height$[ebp]
  0014f	50		 push	 eax
  00150	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00158	50		 push	 eax
  00159	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0015c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _P_SpawnMobj
  00167	83 c4 10	 add	 esp, 16			; 00000010H
  0016a	89 45 f8	 mov	 DWORD PTR _numbermobj$[ebp], eax

; 1451 : 		P_SetMobjState(numbermobj, numbermobj->info->spawnstate+4);

  0016d	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  00170	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00176	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00179	83 c2 04	 add	 edx, 4
  0017c	52		 push	 edx
  0017d	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 _P_SetMobjState
  00186	83 c4 08	 add	 esp, 8

; 1452 : 	}

  00189	e9 9e 02 00 00	 jmp	 $LN26@P_CheckUnd
$LN7@P_CheckUnd:

; 1453 : 	else if (player->powers[pw_underwater] == 7*TICRATE + 1 || player->powers[pw_spacetime] == 7*TICRATE + 1)

  0018e	b8 04 00 00 00	 mov	 eax, 4
  00193	6b c8 06	 imul	 ecx, eax, 6
  00196	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00199	81 7c 0a 38 f6
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 246 ; 000000f6H
  001a1	74 15		 je	 SHORT $LN12@P_CheckUnd
  001a3	b8 04 00 00 00	 mov	 eax, 4
  001a8	6b c8 07	 imul	 ecx, eax, 7
  001ab	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001ae	81 7c 0a 38 f6
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 246 ; 000000f6H
  001b6	75 47		 jne	 SHORT $LN10@P_CheckUnd
$LN12@P_CheckUnd:

; 1454 : 	{
; 1455 : 		numbermobj = P_SpawnMobj(player->mo->x, player->mo->y, height, MT_DROWNNUMBERS);

  001b8	68 c0 00 00 00	 push	 192			; 000000c0H
  001bd	8b 45 fc	 mov	 eax, DWORD PTR _height$[ebp]
  001c0	50		 push	 eax
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001c9	50		 push	 eax
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cf	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 _P_SpawnMobj
  001d8	83 c4 10	 add	 esp, 16			; 00000010H
  001db	89 45 f8	 mov	 DWORD PTR _numbermobj$[ebp], eax

; 1456 : 		P_SetMobjState(numbermobj, numbermobj->info->spawnstate+3);

  001de	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  001e1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001e7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001ea	83 c2 03	 add	 edx, 3
  001ed	52		 push	 edx
  001ee	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 _P_SetMobjState
  001f7	83 c4 08	 add	 esp, 8

; 1457 : 	}

  001fa	e9 2d 02 00 00	 jmp	 $LN26@P_CheckUnd
$LN10@P_CheckUnd:

; 1458 : 	else if (player->powers[pw_underwater] == 5*TICRATE + 1 || player->powers[pw_spacetime] == 5*TICRATE + 1)

  001ff	b8 04 00 00 00	 mov	 eax, 4
  00204	6b c8 06	 imul	 ecx, eax, 6
  00207	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0020a	81 7c 0a 38 b0
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 176 ; 000000b0H
  00212	74 15		 je	 SHORT $LN15@P_CheckUnd
  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 07	 imul	 ecx, eax, 7
  0021c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0021f	81 7c 0a 38 b0
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 176 ; 000000b0H
  00227	75 47		 jne	 SHORT $LN13@P_CheckUnd
$LN15@P_CheckUnd:

; 1459 : 	{
; 1460 : 		numbermobj = P_SpawnMobj(player->mo->x, player->mo->y, height, MT_DROWNNUMBERS);

  00229	68 c0 00 00 00	 push	 192			; 000000c0H
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _height$[ebp]
  00231	50		 push	 eax
  00232	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00235	8b 11		 mov	 edx, DWORD PTR [ecx]
  00237	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0023a	50		 push	 eax
  0023b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0023e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00240	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 _P_SpawnMobj
  00249	83 c4 10	 add	 esp, 16			; 00000010H
  0024c	89 45 f8	 mov	 DWORD PTR _numbermobj$[ebp], eax

; 1461 : 		P_SetMobjState(numbermobj, numbermobj->info->spawnstate+2);

  0024f	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  00252	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00258	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0025b	83 c2 02	 add	 edx, 2
  0025e	52		 push	 edx
  0025f	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 _P_SetMobjState
  00268	83 c4 08	 add	 esp, 8

; 1462 : 	}

  0026b	e9 bc 01 00 00	 jmp	 $LN26@P_CheckUnd
$LN13@P_CheckUnd:

; 1463 : 	else if (player->powers[pw_underwater] == 3*TICRATE + 1 || player->powers[pw_spacetime] == 3*TICRATE + 1)

  00270	b8 04 00 00 00	 mov	 eax, 4
  00275	6b c8 06	 imul	 ecx, eax, 6
  00278	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0027b	83 7c 0a 38 6a	 cmp	 DWORD PTR [edx+ecx+56], 106 ; 0000006aH
  00280	74 12		 je	 SHORT $LN18@P_CheckUnd
  00282	b8 04 00 00 00	 mov	 eax, 4
  00287	6b c8 07	 imul	 ecx, eax, 7
  0028a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0028d	83 7c 0a 38 6a	 cmp	 DWORD PTR [edx+ecx+56], 106 ; 0000006aH
  00292	75 47		 jne	 SHORT $LN16@P_CheckUnd
$LN18@P_CheckUnd:

; 1464 : 	{
; 1465 : 		numbermobj = P_SpawnMobj(player->mo->x, player->mo->y, height, MT_DROWNNUMBERS);

  00294	68 c0 00 00 00	 push	 192			; 000000c0H
  00299	8b 45 fc	 mov	 eax, DWORD PTR _height$[ebp]
  0029c	50		 push	 eax
  0029d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002a5	50		 push	 eax
  002a6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ab	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002ae	50		 push	 eax
  002af	e8 00 00 00 00	 call	 _P_SpawnMobj
  002b4	83 c4 10	 add	 esp, 16			; 00000010H
  002b7	89 45 f8	 mov	 DWORD PTR _numbermobj$[ebp], eax

; 1466 : 		P_SetMobjState(numbermobj, numbermobj->info->spawnstate+1);

  002ba	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  002bd	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002c3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002c6	83 c2 01	 add	 edx, 1
  002c9	52		 push	 edx
  002ca	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 _P_SetMobjState
  002d3	83 c4 08	 add	 esp, 8

; 1467 : 	}

  002d6	e9 51 01 00 00	 jmp	 $LN26@P_CheckUnd
$LN16@P_CheckUnd:

; 1468 : 	else if (player->powers[pw_underwater] == 1*TICRATE + 1 || player->powers[pw_spacetime] == 1*TICRATE + 1)

  002db	b8 04 00 00 00	 mov	 eax, 4
  002e0	6b c8 06	 imul	 ecx, eax, 6
  002e3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002e6	83 7c 0a 38 24	 cmp	 DWORD PTR [edx+ecx+56], 36 ; 00000024H
  002eb	74 12		 je	 SHORT $LN21@P_CheckUnd
  002ed	b8 04 00 00 00	 mov	 eax, 4
  002f2	6b c8 07	 imul	 ecx, eax, 7
  002f5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002f8	83 7c 0a 38 24	 cmp	 DWORD PTR [edx+ecx+56], 36 ; 00000024H
  002fd	75 2b		 jne	 SHORT $LN19@P_CheckUnd
$LN21@P_CheckUnd:

; 1469 : 	{
; 1470 : 		numbermobj = P_SpawnMobj(player->mo->x, player->mo->y, height, MT_DROWNNUMBERS);

  002ff	68 c0 00 00 00	 push	 192			; 000000c0H
  00304	8b 45 fc	 mov	 eax, DWORD PTR _height$[ebp]
  00307	50		 push	 eax
  00308	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0030b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0030d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00310	50		 push	 eax
  00311	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00314	8b 11		 mov	 edx, DWORD PTR [ecx]
  00316	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00319	50		 push	 eax
  0031a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0031f	83 c4 10	 add	 esp, 16			; 00000010H
  00322	89 45 f8	 mov	 DWORD PTR _numbermobj$[ebp], eax

; 1471 : 		//P_SetMobjState(numbermobj, numbermobj->info->spawnstate+0);
; 1472 : 	}

  00325	e9 02 01 00 00	 jmp	 $LN26@P_CheckUnd
$LN19@P_CheckUnd:

; 1473 : 	// Underwater timer runs out
; 1474 : 	else if (player->powers[pw_underwater] == 1)

  0032a	b8 04 00 00 00	 mov	 eax, 4
  0032f	6b c8 06	 imul	 ecx, eax, 6
  00332	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00335	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  0033a	0f 85 8c 00 00
	00		 jne	 $LN22@P_CheckUnd

; 1475 : 	{
; 1476 : 		mobj_t *killer;
; 1477 : 
; 1478 : 		if ((netgame || multiplayer) && P_IsLocalPlayer(player))

  00340	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00347	75 09		 jne	 SHORT $LN25@P_CheckUnd
  00349	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00350	74 25		 je	 SHORT $LN24@P_CheckUnd
$LN25@P_CheckUnd:
  00352	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00355	50		 push	 eax
  00356	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  0035b	83 c4 04	 add	 esp, 4
  0035e	85 c0		 test	 eax, eax
  00360	74 15		 je	 SHORT $LN24@P_CheckUnd

; 1479 : 			S_ChangeMusic(mapmusic & 2047, true);

  00362	6a 01		 push	 1
  00364	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  00369	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0036e	50		 push	 eax
  0036f	e8 00 00 00 00	 call	 _S_ChangeMusic
  00374	83 c4 08	 add	 esp, 8
$LN24@P_CheckUnd:

; 1480 : 
; 1481 : 		killer = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z, MT_DISS);

  00377	68 05 01 00 00	 push	 261			; 00000105H
  0037c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0037f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00381	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00384	52		 push	 edx
  00385	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00388	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0038d	52		 push	 edx
  0038e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00391	8b 08		 mov	 ecx, DWORD PTR [eax]
  00393	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00396	52		 push	 edx
  00397	e8 00 00 00 00	 call	 _P_SpawnMobj
  0039c	83 c4 10	 add	 esp, 16			; 00000010H
  0039f	89 45 f4	 mov	 DWORD PTR _killer$1[ebp], eax

; 1482 : 		killer->threshold = 42; // Special flag that it was drowning which killed you.

  003a2	8b 45 f4	 mov	 eax, DWORD PTR _killer$1[ebp]
  003a5	c7 80 a0 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [eax+160], 42	; 0000002aH

; 1483 : 
; 1484 : 		P_DamageMobj(player->mo, killer, killer, 10000);

  003af	68 10 27 00 00	 push	 10000			; 00002710H
  003b4	8b 45 f4	 mov	 eax, DWORD PTR _killer$1[ebp]
  003b7	50		 push	 eax
  003b8	8b 4d f4	 mov	 ecx, DWORD PTR _killer$1[ebp]
  003bb	51		 push	 ecx
  003bc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003bf	8b 02		 mov	 eax, DWORD PTR [edx]
  003c1	50		 push	 eax
  003c2	e8 00 00 00 00	 call	 _P_DamageMobj
  003c7	83 c4 10	 add	 esp, 16			; 00000010H

; 1485 : 	}

  003ca	eb 60		 jmp	 SHORT $LN26@P_CheckUnd
$LN22@P_CheckUnd:

; 1486 : 	else if (player->powers[pw_spacetime] == 1)

  003cc	b8 04 00 00 00	 mov	 eax, 4
  003d1	6b c8 07	 imul	 ecx, eax, 7
  003d4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003d7	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  003dc	75 4e		 jne	 SHORT $LN26@P_CheckUnd

; 1487 : 	{
; 1488 : 		if ((netgame || multiplayer) && P_IsLocalPlayer(player))

  003de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  003e5	75 09		 jne	 SHORT $LN28@P_CheckUnd
  003e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  003ee	74 25		 je	 SHORT $LN27@P_CheckUnd
$LN28@P_CheckUnd:
  003f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003f3	50		 push	 eax
  003f4	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  003f9	83 c4 04	 add	 esp, 4
  003fc	85 c0		 test	 eax, eax
  003fe	74 15		 je	 SHORT $LN27@P_CheckUnd

; 1489 : 			S_ChangeMusic(mapmusic & 2047, true);

  00400	6a 01		 push	 1
  00402	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  00407	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0040c	50		 push	 eax
  0040d	e8 00 00 00 00	 call	 _S_ChangeMusic
  00412	83 c4 08	 add	 esp, 8
$LN27@P_CheckUnd:

; 1490 : 
; 1491 : 		P_DamageMobj(player->mo, NULL, NULL, 10000);

  00415	68 10 27 00 00	 push	 10000			; 00002710H
  0041a	6a 00		 push	 0
  0041c	6a 00		 push	 0
  0041e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00421	8b 08		 mov	 ecx, DWORD PTR [eax]
  00423	51		 push	 ecx
  00424	e8 00 00 00 00	 call	 _P_DamageMobj
  00429	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@P_CheckUnd:

; 1492 : 	}
; 1493 : 
; 1494 : 	if (numbermobj)

  0042c	83 7d f8 00	 cmp	 DWORD PTR _numbermobj$[ebp], 0
  00430	74 64		 je	 SHORT $LN29@P_CheckUnd

; 1495 : 	{
; 1496 : 		P_SetTarget(&numbermobj->target, player->mo);

  00432	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00435	8b 08		 mov	 ecx, DWORD PTR [eax]
  00437	51		 push	 ecx
  00438	8b 55 f8	 mov	 edx, DWORD PTR _numbermobj$[ebp]
  0043b	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00441	52		 push	 edx
  00442	e8 00 00 00 00	 call	 _P_SetTarget
  00447	83 c4 08	 add	 esp, 8

; 1497 : 		numbermobj->threshold = 40;

  0044a	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  0044d	c7 80 a0 00 00
	00 28 00 00 00	 mov	 DWORD PTR [eax+160], 40	; 00000028H

; 1498 : 		S_StartSound(player->mo, sfx_dwnind);

  00457	6a 3c		 push	 60			; 0000003cH
  00459	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0045c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0045e	51		 push	 ecx
  0045f	e8 00 00 00 00	 call	 _S_StartSound
  00464	83 c4 08	 add	 esp, 8

; 1499 : 		numbermobj->destscale = player->mo->scale;

  00467	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0046a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0046c	8b 55 f8	 mov	 edx, DWORD PTR _numbermobj$[ebp]
  0046f	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  00476	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 1500 : 		P_SetScale(numbermobj, player->mo->scale);

  0047d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00480	8b 08		 mov	 ecx, DWORD PTR [eax]
  00482	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00489	52		 push	 edx
  0048a	8b 45 f8	 mov	 eax, DWORD PTR _numbermobj$[ebp]
  0048d	50		 push	 eax
  0048e	e8 00 00 00 00	 call	 _P_SetScale
  00493	83 c4 08	 add	 esp, 8
$LN29@P_CheckUnd:

; 1501 : 	}
; 1502 : 
; 1503 : 	if (!(player->mo->eflags & MFE_UNDERWATER) && player->powers[pw_underwater])

  00496	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00499	8b 08		 mov	 ecx, DWORD PTR [eax]
  0049b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  004a1	83 e2 08	 and	 edx, 8
  004a4	75 46		 jne	 SHORT $LN30@P_CheckUnd
  004a6	b8 04 00 00 00	 mov	 eax, 4
  004ab	6b c8 06	 imul	 ecx, eax, 6
  004ae	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004b1	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  004b6	74 34		 je	 SHORT $LN30@P_CheckUnd

; 1504 : 	{
; 1505 : 		if (player->powers[pw_underwater] <= 12*TICRATE + 1)

  004b8	b8 04 00 00 00	 mov	 eax, 4
  004bd	6b c8 06	 imul	 ecx, eax, 6
  004c0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004c3	81 7c 0a 38 a5
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 421 ; 000001a5H
  004cb	7f 0c		 jg	 SHORT $LN31@P_CheckUnd

; 1506 : 			P_RestoreMusic(player);

  004cd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004d0	50		 push	 eax
  004d1	e8 00 00 00 00	 call	 _P_RestoreMusic
  004d6	83 c4 04	 add	 esp, 4
$LN31@P_CheckUnd:

; 1507 : 
; 1508 : 		player->powers[pw_underwater] = 0;

  004d9	b8 04 00 00 00	 mov	 eax, 4
  004de	6b c8 06	 imul	 ecx, eax, 6
  004e1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004e4	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN30@P_CheckUnd:

; 1509 : 	}
; 1510 : 
; 1511 : 	if (player->powers[pw_spacetime] > 1 && !P_InSpaceSector(player->mo))

  004ec	b8 04 00 00 00	 mov	 eax, 4
  004f1	6b c8 07	 imul	 ecx, eax, 7
  004f4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004f7	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  004fc	7e 31		 jle	 SHORT $LN32@P_CheckUnd
  004fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00501	8b 08		 mov	 ecx, DWORD PTR [eax]
  00503	51		 push	 ecx
  00504	e8 00 00 00 00	 call	 _P_InSpaceSector
  00509	83 c4 04	 add	 esp, 4
  0050c	85 c0		 test	 eax, eax
  0050e	75 1f		 jne	 SHORT $LN32@P_CheckUnd

; 1512 : 	{
; 1513 : 		P_RestoreMusic(player);

  00510	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00513	50		 push	 eax
  00514	e8 00 00 00 00	 call	 _P_RestoreMusic
  00519	83 c4 04	 add	 esp, 4

; 1514 : 		player->powers[pw_spacetime] = 0;

  0051c	b8 04 00 00 00	 mov	 eax, 4
  00521	6b c8 07	 imul	 ecx, eax, 7
  00524	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00527	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN32@P_CheckUnd:

; 1515 : 	}
; 1516 : 
; 1517 : 	// Underwater audio cues
; 1518 : 	if (P_IsLocalPlayer(player))

  0052f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00532	50		 push	 eax
  00533	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  00538	83 c4 04	 add	 esp, 4
  0053b	85 c0		 test	 eax, eax
  0053d	0f 84 9a 00 00
	00		 je	 $LN39@P_CheckUnd

; 1519 : 	{
; 1520 : 		if (player->powers[pw_underwater] == 11*TICRATE + 1)

  00543	b8 04 00 00 00	 mov	 eax, 4
  00548	6b c8 06	 imul	 ecx, eax, 6
  0054b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0054e	81 7c 0a 38 82
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 386 ; 00000182H
  00556	75 15		 jne	 SHORT $LN34@P_CheckUnd

; 1521 : 		{
; 1522 : 			S_StopMusic();

  00558	e8 00 00 00 00	 call	 _S_StopMusic
  0055d	90		 npad	 1

; 1523 : 			S_ChangeMusic(mus_drown, false);

  0055e	6a 00		 push	 0
  00560	68 12 04 00 00	 push	 1042			; 00000412H
  00565	e8 00 00 00 00	 call	 _S_ChangeMusic
  0056a	83 c4 08	 add	 esp, 8
$LN34@P_CheckUnd:

; 1524 : 		}
; 1525 : 
; 1526 : 		if (player->powers[pw_underwater] == 25*TICRATE + 1)

  0056d	b8 04 00 00 00	 mov	 eax, 4
  00572	6b c8 06	 imul	 ecx, eax, 6
  00575	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00578	81 7c 0a 38 6c
	03 00 00	 cmp	 DWORD PTR [edx+ecx+56], 876 ; 0000036cH
  00580	75 11		 jne	 SHORT $LN35@P_CheckUnd

; 1527 : 			S_StartSound(NULL, sfx_wtrdng);

  00582	68 f1 00 00 00	 push	 241			; 000000f1H
  00587	6a 00		 push	 0
  00589	e8 00 00 00 00	 call	 _S_StartSound
  0058e	83 c4 08	 add	 esp, 8
  00591	eb 4a		 jmp	 SHORT $LN39@P_CheckUnd
$LN35@P_CheckUnd:

; 1528 : 		else if (player->powers[pw_underwater] == 20*TICRATE + 1)

  00593	b8 04 00 00 00	 mov	 eax, 4
  00598	6b c8 06	 imul	 ecx, eax, 6
  0059b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0059e	81 7c 0a 38 bd
	02 00 00	 cmp	 DWORD PTR [edx+ecx+56], 701 ; 000002bdH
  005a6	75 11		 jne	 SHORT $LN37@P_CheckUnd

; 1529 : 			S_StartSound(NULL, sfx_wtrdng);

  005a8	68 f1 00 00 00	 push	 241			; 000000f1H
  005ad	6a 00		 push	 0
  005af	e8 00 00 00 00	 call	 _S_StartSound
  005b4	83 c4 08	 add	 esp, 8
  005b7	eb 24		 jmp	 SHORT $LN39@P_CheckUnd
$LN37@P_CheckUnd:

; 1530 : 		else if (player->powers[pw_underwater] == 15*TICRATE + 1)

  005b9	b8 04 00 00 00	 mov	 eax, 4
  005be	6b c8 06	 imul	 ecx, eax, 6
  005c1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005c4	81 7c 0a 38 0e
	02 00 00	 cmp	 DWORD PTR [edx+ecx+56], 526 ; 0000020eH
  005cc	75 0f		 jne	 SHORT $LN39@P_CheckUnd

; 1531 : 			S_StartSound(NULL, sfx_wtrdng);

  005ce	68 f1 00 00 00	 push	 241			; 000000f1H
  005d3	6a 00		 push	 0
  005d5	e8 00 00 00 00	 call	 _S_StartSound
  005da	83 c4 08	 add	 esp, 8
$LN39@P_CheckUnd:

; 1532 : 	}
; 1533 : 
; 1534 : 	if (player->exiting)

  005dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005e0	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  005e7	74 38		 je	 SHORT $LN40@P_CheckUnd

; 1535 : 	{
; 1536 : 		if (player->powers[pw_underwater] > 1)

  005e9	b8 04 00 00 00	 mov	 eax, 4
  005ee	6b c8 06	 imul	 ecx, eax, 6
  005f1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005f4	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  005f9	7e 13		 jle	 SHORT $LN41@P_CheckUnd

; 1537 : 			player->powers[pw_underwater] = 0;

  005fb	b8 04 00 00 00	 mov	 eax, 4
  00600	6b c8 06	 imul	 ecx, eax, 6
  00603	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00606	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN41@P_CheckUnd:

; 1538 : 
; 1539 : 		player->powers[pw_spacetime] = 0;

  0060e	b8 04 00 00 00	 mov	 eax, 4
  00613	6b c8 07	 imul	 ecx, eax, 7
  00616	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00619	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN40@P_CheckUnd:

; 1540 : 	}
; 1541 : }

  00621	5f		 pop	 edi
  00622	5e		 pop	 esi
  00623	5b		 pop	 ebx
  00624	8b e5		 mov	 esp, ebp
  00626	5d		 pop	 ebp
  00627	c3		 ret	 0
_P_CheckUnderwaterAndSpaceTimer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_CheckSneakerAndLivesTimer
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_CheckSneakerAndLivesTimer PROC			; COMDAT

; 1420 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1421 : 	if (player->powers[pw_extralife] == 1) // Extra Life!

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 03	 shl	 eax, 3
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00014	83 7c 01 38 01	 cmp	 DWORD PTR [ecx+eax+56], 1
  00019	75 0c		 jne	 SHORT $LN2@P_CheckSne

; 1422 : 		P_RestoreMusic(player);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _P_RestoreMusic
  00024	83 c4 04	 add	 esp, 4
$LN2@P_CheckSne:

; 1423 : 
; 1424 : 	if (player->powers[pw_sneakers] == 1)

  00027	b8 04 00 00 00	 mov	 eax, 4
  0002c	c1 e0 00	 shl	 eax, 0
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00032	83 7c 01 38 01	 cmp	 DWORD PTR [ecx+eax+56], 1
  00037	75 0c		 jne	 SHORT $LN3@P_CheckSne

; 1425 : 		P_RestoreMusic(player);

  00039	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _P_RestoreMusic
  00042	83 c4 04	 add	 esp, 4
$LN3@P_CheckSne:

; 1426 : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_P_CheckSneakerAndLivesTimer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_InQuicksand
_TEXT	SEGMENT
_rover$1 = -8						; size = 4
_sector$ = -4						; size = 4
_mo$ = 8						; size = 4
_P_InQuicksand PROC					; COMDAT

; 1384 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1385 : 	sector_t *sector;
; 1386 : 
; 1387 : 	sector = mo->subsector->sector;

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 55 fc	 mov	 DWORD PTR _sector$[ebp], edx

; 1388 : 
; 1389 : 	if (sector->ffloors)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00017	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0001e	74 71		 je	 SHORT $LN3@P_InQuicks

; 1390 : 	{
; 1391 : 		ffloor_t *rover;
; 1392 : 
; 1393 : 		for (rover = sector->ffloors; rover; rover = rover->next)

  00020	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00023	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00029	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
  0002c	eb 09		 jmp	 SHORT $LN4@P_InQuicks
$LN2@P_InQuicks:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00031	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00034	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_InQuicks:
  00037	83 7d f8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  0003b	74 54		 je	 SHORT $LN3@P_InQuicks

; 1394 : 		{
; 1395 : 			if (!(rover->flags & FF_EXISTS))

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00040	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00043	83 e1 01	 and	 ecx, 1
  00046	75 02		 jne	 SHORT $LN6@P_InQuicks

; 1396 : 				continue;

  00048	eb e4		 jmp	 SHORT $LN2@P_InQuicks
$LN6@P_InQuicks:

; 1397 : 
; 1398 : 			if (!(rover->flags & FF_QUICKSAND))

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0004d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00050	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00056	75 02		 jne	 SHORT $LN7@P_InQuicks

; 1399 : 				continue;

  00058	eb d4		 jmp	 SHORT $LN2@P_InQuicks
$LN7@P_InQuicks:

; 1400 : 
; 1401 : 			if (mo->z > *rover->topheight)

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00062	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00065	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00067	7e 02		 jle	 SHORT $LN8@P_InQuicks

; 1402 : 				continue;

  00069	eb c3		 jmp	 SHORT $LN2@P_InQuicks
$LN8@P_InQuicks:

; 1403 : 
; 1404 : 			if (mo->z + (mo->height/2) < *rover->bottomheight)

  0006b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0006e	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00071	99		 cdq
  00072	2b c2		 sub	 eax, edx
  00074	d1 f8		 sar	 eax, 1
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00079	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0007c	8b 55 f8	 mov	 edx, DWORD PTR _rover$1[ebp]
  0007f	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00082	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00084	7d 02		 jge	 SHORT $LN9@P_InQuicks

; 1405 : 				continue;

  00086	eb a6		 jmp	 SHORT $LN2@P_InQuicks
$LN9@P_InQuicks:

; 1406 : 
; 1407 : 			return true;

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	eb 04		 jmp	 SHORT $LN1@P_InQuicks

; 1408 : 		}

  0008f	eb 9d		 jmp	 SHORT $LN2@P_InQuicks
$LN3@P_InQuicks:

; 1409 : 	}
; 1410 : 
; 1411 : 	return false; // No sand here, Captain!

  00091	33 c0		 xor	 eax, eax
$LN1@P_InQuicks:

; 1412 : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_P_InQuicksand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_InSpaceSector
_TEXT	SEGMENT
_rover$1 = -8						; size = 4
_sector$ = -4						; size = 4
_mo$ = 8						; size = 4
_P_InSpaceSector PROC					; COMDAT

; 1353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1354 : 	sector_t *sector;
; 1355 : 
; 1356 : 	sector = mo->subsector->sector;

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 55 fc	 mov	 DWORD PTR _sector$[ebp], edx

; 1357 : 
; 1358 : 	if (GETSECSPECIAL(sector->special, 1) == SPACESPECIAL)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00017	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  0001b	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0001e	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  00021	75 07		 jne	 SHORT $LN5@P_InSpaceS

; 1359 : 		return true;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	eb 79		 jmp	 SHORT $LN1@P_InSpaceS
$LN5@P_InSpaceS:

; 1360 : 
; 1361 : 	if (sector->ffloors)

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  0002d	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00034	74 6b		 je	 SHORT $LN3@P_InSpaceS

; 1362 : 	{
; 1363 : 		ffloor_t *rover;
; 1364 : 
; 1365 : 		for (rover = sector->ffloors; rover; rover = rover->next)

  00036	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00039	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0003f	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
  00042	eb 09		 jmp	 SHORT $LN4@P_InSpaceS
$LN2@P_InSpaceS:
  00044	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00047	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0004a	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_InSpaceS:
  0004d	83 7d f8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  00051	74 4e		 je	 SHORT $LN3@P_InSpaceS

; 1366 : 		{
; 1367 : 			if (GETSECSPECIAL(rover->master->frontsector->special, 1) != SPACESPECIAL)

  00053	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00056	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00059	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0005c	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  00060	83 e0 0f	 and	 eax, 15			; 0000000fH
  00063	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  00066	74 02		 je	 SHORT $LN7@P_InSpaceS

; 1368 : 				continue;

  00068	eb da		 jmp	 SHORT $LN2@P_InSpaceS
$LN7@P_InSpaceS:

; 1369 : 
; 1370 : 			if (mo->z > *rover->topheight)

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00072	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00075	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00077	7e 02		 jle	 SHORT $LN8@P_InSpaceS

; 1371 : 				continue;

  00079	eb c9		 jmp	 SHORT $LN2@P_InSpaceS
$LN8@P_InSpaceS:

; 1372 : 
; 1373 : 			if (mo->z + (mo->height/2) < *rover->bottomheight)

  0007b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0007e	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00081	99		 cdq
  00082	2b c2		 sub	 eax, edx
  00084	d1 f8		 sar	 eax, 1
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00089	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0008c	8b 55 f8	 mov	 edx, DWORD PTR _rover$1[ebp]
  0008f	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00092	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00094	7d 02		 jge	 SHORT $LN9@P_InSpaceS

; 1374 : 				continue;

  00096	eb ac		 jmp	 SHORT $LN2@P_InSpaceS
$LN9@P_InSpaceS:

; 1375 : 
; 1376 : 			return true;

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	eb 04		 jmp	 SHORT $LN1@P_InSpaceS

; 1377 : 		}

  0009f	eb a3		 jmp	 SHORT $LN2@P_InSpaceS
$LN3@P_InSpaceS:

; 1378 : 	}
; 1379 : 
; 1380 : 	return false; // No vacuum here, Captain!

  000a1	33 c0		 xor	 eax, eax
$LN1@P_InSpaceS:

; 1381 : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_P_InSpaceSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_SpawnSpinMobj
_TEXT	SEGMENT
tv130 = -76						; size = 4
_zheight$ = -8						; size = 4
_mobj$ = -4						; size = 4
_player$ = 8						; size = 4
_type$ = 12						; size = 4
_P_SpawnSpinMobj PROC					; COMDAT

; 1279 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1280 : 	mobj_t *mobj;
; 1281 : 	fixed_t zheight = player->mo->z - FixedDiv(P_GetPlayerHeight(player) - player->mo->height,3*FRACUNIT);

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 30		 mov	 esi, DWORD PTR [eax]
  0000e	68 00 00 03 00	 push	 196608			; 00030000H
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00022	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00024	2b 41 44	 sub	 eax, DWORD PTR [ecx+68]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _FixedDiv
  0002d	83 c4 08	 add	 esp, 8
  00030	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00033	2b d0		 sub	 edx, eax
  00035	89 55 f8	 mov	 DWORD PTR _zheight$[ebp], edx

; 1282 : 
; 1283 : 	if (player->skincolor == 0)

  00038	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003b	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  00042	75 07		 jne	 SHORT $LN2@P_SpawnSpi

; 1284 : 		return NULL;

  00044	33 c0		 xor	 eax, eax
  00046	e9 2c 01 00 00	 jmp	 $LN1@P_SpawnSpi
$LN2@P_SpawnSpi:

; 1285 : 
; 1286 : 	if (player->spectator)

  0004b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0004e	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00055	85 c9		 test	 ecx, ecx
  00057	74 07		 je	 SHORT $LN3@P_SpawnSpi

; 1287 : 		return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 17 01 00 00	 jmp	 $LN1@P_SpawnSpi
$LN3@P_SpawnSpi:

; 1288 : 
; 1289 : 	//if (zheight < player->mo->floorz)
; 1290 : 		//zheight = player->mo->floorz;
; 1291 : 
; 1292 : 	mobj = P_SpawnMobj(player->mo->x, player->mo->y, zheight, type);

  00060	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00063	50		 push	 eax
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _zheight$[ebp]
  00067	51		 push	 ecx
  00068	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	89 45 fc	 mov	 DWORD PTR _mobj$[ebp], eax

; 1293 : 	mobj->flags |= MF_TRANSLATION;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  00088	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0008b	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  00091	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  00094	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1294 : 	mobj->color = (UINT8)((player->powers[pw_super]) ? 15 : player->skincolor);

  00097	b8 04 00 00 00	 mov	 eax, 4
  0009c	6b c8 0f	 imul	 ecx, eax, 15
  0009f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000a2	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000a7	74 09		 je	 SHORT $LN6@P_SpawnSpi
  000a9	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR tv130[ebp], 15 ; 0000000fH
  000b0	eb 0c		 jmp	 SHORT $LN7@P_SpawnSpi
$LN6@P_SpawnSpi:
  000b2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b5	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000bb	89 4d b4	 mov	 DWORD PTR tv130[ebp], ecx
$LN7@P_SpawnSpi:
  000be	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  000c1	8a 45 b4	 mov	 al, BYTE PTR tv130[ebp]
  000c4	88 42 68	 mov	 BYTE PTR [edx+104], al

; 1295 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  000c7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000d2	83 e2 20	 and	 edx, 32			; 00000020H
  000d5	74 18		 je	 SHORT $LN4@P_SpawnSpi

; 1296 : 		mobj->flags2 |= MF2_OBJECTFLIP;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  000da	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000e0	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  000e9	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN4@P_SpawnSpi:

; 1297 : 	P_SetTarget(&mobj->target, player->mo);

  000ef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f4	51		 push	 ecx
  000f5	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  000f8	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 _P_SetTarget
  00104	83 c4 08	 add	 esp, 8

; 1298 : 	mobj->floorz = mobj->z;

  00107	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  0010a	8b 4d fc	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0010d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00110	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 1299 : 	mobj->ceilingz = mobj->z+mobj->height;

  00113	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  00116	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00119	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  0011c	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0011f	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  00122	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 1300 : 	P_SetScale(mobj, player->mo->scale);

  00125	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00128	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012a	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00131	52		 push	 edx
  00132	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _P_SetScale
  0013b	83 c4 08	 add	 esp, 8

; 1301 : 	mobj->destscale = player->mo->scale;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00141	8b 08		 mov	 ecx, DWORD PTR [eax]
  00143	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  00146	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  0014d	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 1302 : 
; 1303 : 	mobj->eflags |= (player->mo->eflags & MFE_VERTICALFLIP);

  00154	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00157	8b 08		 mov	 ecx, DWORD PTR [eax]
  00159	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0015f	83 e2 20	 and	 edx, 32			; 00000020H
  00162	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  00165	0b 90 84 00 00
	00		 or	 edx, DWORD PTR [eax+132]
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0016e	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx

; 1304 : 
; 1305 : 	return mobj;

  00174	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
$LN1@P_SpawnSpi:

; 1306 : }

  00177	5f		 pop	 edi
  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c3		 ret	 0
_P_SpawnSpinMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_SpawnThokMobj
_TEXT	SEGMENT
tv143 = -76						; size = 4
_type$ = -8						; size = 4
_mobj$ = -4						; size = 4
_player$ = 8						; size = 4
_P_SpawnThokMobj PROC					; COMDAT

; 1241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1242 : 	mobj_t *mobj;
; 1243 : 	mobjtype_t type;
; 1244 : 
; 1245 : 	// Now check the player's color so the right THOK object is displayed.
; 1246 : 	if (player->skincolor == 0)

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  00013	75 07		 jne	 SHORT $LN2@P_SpawnTho

; 1247 : 		return NULL;

  00015	33 c0		 xor	 eax, eax
  00017	e9 80 01 00 00	 jmp	 $LN1@P_SpawnTho
$LN2@P_SpawnTho:

; 1248 : 
; 1249 : 	if (player->spectator)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001f	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00026	85 c9		 test	 ecx, ecx
  00028	74 07		 je	 SHORT $LN3@P_SpawnTho

; 1250 : 		return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	e9 6b 01 00 00	 jmp	 $LN1@P_SpawnTho
$LN3@P_SpawnTho:

; 1251 : 
; 1252 : 	if (player->thokitem > 0)

  00031	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00034	83 b8 e4 00 00
	00 00		 cmp	 DWORD PTR [eax+228], 0
  0003b	7e 0e		 jle	 SHORT $LN4@P_SpawnTho

; 1253 : 		type = player->thokitem;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00040	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  00046	89 4d f8	 mov	 DWORD PTR _type$[ebp], ecx
  00049	eb 11		 jmp	 SHORT $LN5@P_SpawnTho
$LN4@P_SpawnTho:

; 1254 : 	else
; 1255 : 		type = player->mo->info->painchance;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00056	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00059	89 45 f8	 mov	 DWORD PTR _type$[ebp], eax
$LN5@P_SpawnTho:

; 1256 : 
; 1257 : 	mobj = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z - FixedDiv(P_GetPlayerHeight(player) - player->mo->height,3*FRACUNIT), type);

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00063	8b 31		 mov	 esi, DWORD PTR [ecx]
  00065	68 00 00 03 00	 push	 196608			; 00030000H
  0006a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  00073	83 c4 04	 add	 esp, 4
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00079	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007b	2b 42 44	 sub	 eax, DWORD PTR [edx+68]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _FixedDiv
  00084	83 c4 08	 add	 esp, 8
  00087	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0008a	2b c8		 sub	 ecx, eax
  0008c	51		 push	 ecx
  0008d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00090	8b 02		 mov	 eax, DWORD PTR [edx]
  00092	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00095	51		 push	 ecx
  00096	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00099	8b 02		 mov	 eax, DWORD PTR [edx]
  0009b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 _P_SpawnMobj
  000a4	83 c4 10	 add	 esp, 16			; 00000010H
  000a7	89 45 fc	 mov	 DWORD PTR _mobj$[ebp], eax

; 1258 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  000aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000b5	83 e2 20	 and	 edx, 32			; 00000020H
  000b8	74 18		 je	 SHORT $LN6@P_SpawnTho

; 1259 : 		mobj->flags2 |= MF2_OBJECTFLIP;

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  000bd	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000c3	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  000c9	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  000cc	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN6@P_SpawnTho:

; 1260 : 	mobj->flags |= MF_TRANSLATION;

  000d2	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000d8	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  000de	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  000e1	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1261 : 	mobj->color = (UINT8)((player->powers[pw_super]) ? 15 : player->skincolor);

  000e4	b8 04 00 00 00	 mov	 eax, 4
  000e9	6b c8 0f	 imul	 ecx, eax, 15
  000ec	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ef	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000f4	74 09		 je	 SHORT $LN8@P_SpawnTho
  000f6	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR tv143[ebp], 15 ; 0000000fH
  000fd	eb 0c		 jmp	 SHORT $LN9@P_SpawnTho
$LN8@P_SpawnTho:
  000ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00102	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00108	89 4d b4	 mov	 DWORD PTR tv143[ebp], ecx
$LN9@P_SpawnTho:
  0010b	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  0010e	8a 45 b4	 mov	 al, BYTE PTR tv143[ebp]
  00111	88 42 68	 mov	 BYTE PTR [edx+104], al

; 1262 : 	P_SetTarget(&mobj->target, player->mo);

  00114	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00117	8b 08		 mov	 ecx, DWORD PTR [eax]
  00119	51		 push	 ecx
  0011a	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  0011d	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 _P_SetTarget
  00129	83 c4 08	 add	 esp, 8

; 1263 : 	mobj->floorz = mobj->z;

  0012c	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00132	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00135	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 1264 : 	mobj->ceilingz = mobj->z+mobj->height;

  00138	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  0013b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0013e	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  00141	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00144	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  00147	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 1265 : 	P_SetScale(mobj, player->mo->scale);

  0014a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0014d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014f	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00156	52		 push	 edx
  00157	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _P_SetScale
  00160	83 c4 08	 add	 esp, 8

; 1266 : 	mobj->destscale = player->mo->scale;

  00163	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00166	8b 08		 mov	 ecx, DWORD PTR [eax]
  00168	8b 55 fc	 mov	 edx, DWORD PTR _mobj$[ebp]
  0016b	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  00172	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 1267 : 
; 1268 : 	mobj->eflags |= (player->mo->eflags & MFE_VERTICALFLIP);

  00179	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0017c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017e	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00184	83 e2 20	 and	 edx, 32			; 00000020H
  00187	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
  0018a	0b 90 84 00 00
	00		 or	 edx, DWORD PTR [eax+132]
  00190	8b 4d fc	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00193	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx

; 1269 : 
; 1270 : 	return mobj;

  00199	8b 45 fc	 mov	 eax, DWORD PTR _mobj$[ebp]
$LN1@P_SpawnTho:

; 1271 : }

  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	5b		 pop	 ebx
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c3		 ret	 0
_P_SpawnThokMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DeNightserizePlayer
_TEXT	SEGMENT
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_player$ = 8						; size = 4
_P_DeNightserizePlayer PROC				; COMDAT

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 600  : 	thinker_t *th;
; 601  : 	mobj_t *mo2;
; 602  : 
; 603  : 	player->pflags &= ~PF_NIGHTSMODE;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00012	81 e1 ff ff df
	ff		 and	 ecx, -2097153		; ffdfffffH
  00018	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0001b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 604  : 
; 605  : 	//if (player->mo->tracer)
; 606  : 		//P_RemoveMobj(player->mo->tracer);
; 607  : 
; 608  : 	player->powers[pw_underwater] = 0;

  00021	b8 04 00 00 00	 mov	 eax, 4
  00026	6b c8 06	 imul	 ecx, eax, 6
  00029	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0002c	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 609  : 	player->pflags &= ~PF_USEDOWN;

  00034	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00037	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0003d	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00040	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00043	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 610  : 	player->pflags &= ~PF_JUMPDOWN;

  00049	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0004c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00052	83 e1 f7	 and	 ecx, -9			; fffffff7H
  00055	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00058	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 611  : 	player->pflags &= ~PF_ATTACKDOWN;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00061	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00067	83 e1 fd	 and	 ecx, -3			; fffffffdH
  0006a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0006d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 612  : 	player->pflags &= ~PF_WALKINGANIM;

  00073	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00076	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0007c	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00082	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00085	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 613  : 	player->pflags &= ~PF_RUNNINGANIM;

  0008b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00094	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  0009a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0009d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 614  : 	player->pflags &= ~PF_SPINNINGANIM;

  000a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000ac	81 e1 ff f7 ff
	ff		 and	 ecx, -2049		; fffff7ffH
  000b2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000b5	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 615  : 	player->pflags &= ~PF_STARTDASH;

  000bb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000be	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000c4	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  000ca	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000cd	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 616  : 	player->pflags &= ~PF_GLIDING;

  000d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000dc	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  000e2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000e5	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 617  : 	player->pflags &= ~PF_JUMPED;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ee	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000f4	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  000fa	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000fd	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 618  : 	player->pflags &= ~PF_THOKKED;

  00103	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00106	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0010c	81 e1 ff 7f ff
	ff		 and	 ecx, -32769		; ffff7fffH
  00112	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00115	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 619  : 	player->pflags &= ~PF_SPINNING;

  0011b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00124	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  0012a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0012d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 620  : 	player->pflags &= ~PF_DRILLING;

  00133	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00136	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0013c	81 e1 ff ff ff
	fe		 and	 ecx, -16777217		; feffffffH
  00142	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00145	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 621  : 	player->pflags &= ~PF_TRANSFERTOCLOSEST;

  0014b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0014e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00154	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  0015a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0015d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 622  : 	player->secondjump = 0;

  00163	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00166	c6 80 14 01 00
	00 00		 mov	 BYTE PTR [eax+276], 0

; 623  : 	player->dbginfo = 0;

  0016d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00170	c7 80 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+360], 0

; 624  : 	player->jumping = 0;

  0017a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0017d	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0

; 625  : 	player->homing = 0;

  00187	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0018a	c6 80 38 01 00
	00 00		 mov	 BYTE PTR [eax+312], 0

; 626  : 	player->climbing = 0;

  00191	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00194	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 627  : 	player->mo->fuse = 0;

  0019e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a3	c7 81 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+188], 0

; 628  : 	player->speed = 0;

  001ad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b0	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+268], 0

; 629  : 	P_SetTarget(&player->mo->target, NULL);

  001ba	6a 00		 push	 0
  001bc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c1	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  001c7	51		 push	 ecx
  001c8	e8 00 00 00 00	 call	 _P_SetTarget
  001cd	83 c4 08	 add	 esp, 8

; 630  : 	P_SetTarget(&player->axis1, P_SetTarget(&player->axis2, NULL));

  001d0	6a 00		 push	 0
  001d2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d5	05 a8 01 00 00	 add	 eax, 424		; 000001a8H
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _P_SetTarget
  001e0	83 c4 08	 add	 esp, 8
  001e3	50		 push	 eax
  001e4	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001e7	81 c1 a4 01 00
	00		 add	 ecx, 420		; 000001a4H
  001ed	51		 push	 ecx
  001ee	e8 00 00 00 00	 call	 _P_SetTarget
  001f3	83 c4 08	 add	 esp, 8

; 631  : 
; 632  : 	player->mo->flags &= ~MF_NOGRAVITY;

  001f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fb	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  001fe	81 e2 ff fd ff
	ff		 and	 edx, -513		; fffffdffH
  00204	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00207	8b 08		 mov	 ecx, DWORD PTR [eax]
  00209	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 633  : 
; 634  : 	player->mo->flags2 &= ~MF2_DONTDRAW;

  0020c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0020f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00211	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00217	81 e2 ff ff bf
	ff		 and	 edx, -4194305		; ffbfffffH
  0021d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00220	8b 08		 mov	 ecx, DWORD PTR [eax]
  00222	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 635  : 
; 636  : 	if (splitscreen && player == &players[secondarydisplayplayer])

  00228	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0022f	74 4f		 je	 SHORT $LN5@P_DeNights
  00231	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0023b	05 00 00 00 00	 add	 eax, OFFSET _players
  00240	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00243	75 3b		 jne	 SHORT $LN5@P_DeNights

; 637  : 	{
; 638  : 		if (cv_analog2.value)

  00245	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  0024c	74 14		 je	 SHORT $LN7@P_DeNights

; 639  : 			CV_SetValue(&cv_cam2_dist, 192);

  0024e	68 c0 00 00 00	 push	 192			; 000000c0H
  00253	68 00 00 00 00	 push	 OFFSET _cv_cam2_dist
  00258	e8 00 00 00 00	 call	 _CV_SetValue
  0025d	83 c4 08	 add	 esp, 8
  00260	eb 1c		 jmp	 SHORT $LN8@P_DeNights
$LN7@P_DeNights:

; 640  : 		else
; 641  : 			CV_SetValue(&cv_cam2_dist, atoi(cv_cam2_dist.defaultvalue));

  00262	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_dist+4
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 _atoi
  0026d	83 c4 04	 add	 esp, 4
  00270	50		 push	 eax
  00271	68 00 00 00 00	 push	 OFFSET _cv_cam2_dist
  00276	e8 00 00 00 00	 call	 _CV_SetValue
  0027b	83 c4 08	 add	 esp, 8
$LN8@P_DeNights:

; 642  : 	}

  0027e	eb 4d		 jmp	 SHORT $LN11@P_DeNights
$LN5@P_DeNights:

; 643  : 	else if (player == &players[displayplayer])

  00280	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0028a	05 00 00 00 00	 add	 eax, OFFSET _players
  0028f	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00292	75 39		 jne	 SHORT $LN11@P_DeNights

; 644  : 	{
; 645  : 		if (cv_analog.value)

  00294	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  0029b	74 14		 je	 SHORT $LN10@P_DeNights

; 646  : 			CV_SetValue(&cv_cam_dist, 192);

  0029d	68 c0 00 00 00	 push	 192			; 000000c0H
  002a2	68 00 00 00 00	 push	 OFFSET _cv_cam_dist
  002a7	e8 00 00 00 00	 call	 _CV_SetValue
  002ac	83 c4 08	 add	 esp, 8
  002af	eb 1c		 jmp	 SHORT $LN11@P_DeNights
$LN10@P_DeNights:

; 647  : 		else
; 648  : 			CV_SetValue(&cv_cam_dist, atoi(cv_cam_dist.defaultvalue));

  002b1	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_cam_dist+4
  002b6	50		 push	 eax
  002b7	e8 00 00 00 00	 call	 _atoi
  002bc	83 c4 04	 add	 esp, 4
  002bf	50		 push	 eax
  002c0	68 00 00 00 00	 push	 OFFSET _cv_cam_dist
  002c5	e8 00 00 00 00	 call	 _CV_SetValue
  002ca	83 c4 08	 add	 esp, 8
$LN11@P_DeNights:

; 649  : 	}
; 650  : 
; 651  : 	// Restore aiming angle
; 652  : 	if (player == &players[consoleplayer])

  002cd	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  002d7	05 00 00 00 00	 add	 eax, OFFSET _players
  002dc	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  002df	75 0c		 jne	 SHORT $LN12@P_DeNights

; 653  : 		localaiming = 0;

  002e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming, 0
  002eb	eb 27		 jmp	 SHORT $LN14@P_DeNights
$LN12@P_DeNights:

; 654  : 	else if (splitscreen && player == &players[secondarydisplayplayer])

  002ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  002f4	74 1e		 je	 SHORT $LN14@P_DeNights
  002f6	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00300	05 00 00 00 00	 add	 eax, OFFSET _players
  00305	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00308	75 0a		 jne	 SHORT $LN14@P_DeNights

; 655  : 		localaiming2 = 0;

  0030a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming2, 0
$LN14@P_DeNights:

; 656  : 
; 657  : 	if (player->mo->tracer)

  00314	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00317	8b 08		 mov	 ecx, DWORD PTR [eax]
  00319	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00320	74 19		 je	 SHORT $LN15@P_DeNights

; 658  : 		P_SetMobjState(player->mo->tracer, S_DISS);

  00322	68 4f 06 00 00	 push	 1615			; 0000064fH
  00327	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00332	52		 push	 edx
  00333	e8 00 00 00 00	 call	 _P_SetMobjState
  00338	83 c4 08	 add	 esp, 8
$LN15@P_DeNights:

; 659  : 	P_SetPlayerMobjState(player->mo, S_PLAY_FALL1);

  0033b	6a 27		 push	 39			; 00000027H
  0033d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00340	8b 08		 mov	 ecx, DWORD PTR [eax]
  00342	51		 push	 ecx
  00343	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00348	83 c4 08	 add	 esp, 8

; 660  : 	player->pflags |= PF_NIGHTSFALL;

  0034b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0034e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00354	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  0035a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0035d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 661  : 
; 662  : 	// If in a special stage, add some preliminary exit time.
; 663  : 	if (G_IsSpecialStage(gamemap))

  00363	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0036a	50		 push	 eax
  0036b	e8 00 00 00 00	 call	 _G_IsSpecialStage
  00370	83 c4 04	 add	 esp, 4
  00373	85 c0		 test	 eax, eax
  00375	74 0d		 je	 SHORT $LN16@P_DeNights

; 664  : 		player->exiting = TICRATE * 3;

  00377	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0037a	c7 80 30 01 00
	00 69 00 00 00	 mov	 DWORD PTR [eax+304], 105 ; 00000069H
$LN16@P_DeNights:

; 665  : 
; 666  : 	// Check to see if the player should be killed.
; 667  : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00384	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00389	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  0038c	eb 09		 jmp	 SHORT $LN4@P_DeNights
$LN2@P_DeNights:
  0038e	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00391	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00394	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_DeNights:
  00397	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0039e	74 48		 je	 SHORT $LN3@P_DeNights

; 668  : 	{
; 669  : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  003a0	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  003a3	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  003aa	74 02		 je	 SHORT $LN17@P_DeNights

; 670  : 			continue;

  003ac	eb e0		 jmp	 SHORT $LN2@P_DeNights
$LN17@P_DeNights:

; 671  : 
; 672  : 		mo2 = (mobj_t *)th;

  003ae	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  003b1	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 673  : 
; 674  : 		if (!(mo2->type == MT_NIGHTSDRONE))

  003b4	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  003b7	81 78 7c f4 00
	00 00		 cmp	 DWORD PTR [eax+124], 244 ; 000000f4H
  003be	74 02		 je	 SHORT $LN18@P_DeNights

; 675  : 			continue;

  003c0	eb cc		 jmp	 SHORT $LN2@P_DeNights
$LN18@P_DeNights:

; 676  : 
; 677  : 		if (mo2->flags & MF_AMBUSH)

  003c2	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  003c5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  003c8	83 e1 20	 and	 ecx, 32			; 00000020H
  003cb	74 19		 je	 SHORT $LN19@P_DeNights

; 678  : 		{
; 679  : 			P_DamageMobj(player->mo, NULL, NULL, 10000);

  003cd	68 10 27 00 00	 push	 10000			; 00002710H
  003d2	6a 00		 push	 0
  003d4	6a 00		 push	 0
  003d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003db	51		 push	 ecx
  003dc	e8 00 00 00 00	 call	 _P_DamageMobj
  003e1	83 c4 10	 add	 esp, 16			; 00000010H

; 680  : 			break;

  003e4	eb 02		 jmp	 SHORT $LN3@P_DeNights
$LN19@P_DeNights:

; 681  : 		}
; 682  : 	}

  003e6	eb a6		 jmp	 SHORT $LN2@P_DeNights
$LN3@P_DeNights:

; 683  : }

  003e8	5f		 pop	 edi
  003e9	5e		 pop	 esi
  003ea	5b		 pop	 ebx
  003eb	8b e5		 mov	 esp, ebp
  003ed	5d		 pop	 ebp
  003ee	c3		 ret	 0
_P_DeNightserizePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_FindAxisTransfer
_TEXT	SEGMENT
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_mare$ = 8						; size = 4
_axisnum$ = 12						; size = 4
_type$ = 16						; size = 4
_P_FindAxisTransfer PROC				; COMDAT

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 510  : 	thinker_t *th;
; 511  : 	mobj_t *mo2;
; 512  : 
; 513  : 	// scan the thinkers
; 514  : 	// to find the closest axis point
; 515  : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0000e	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  00011	eb 09		 jmp	 SHORT $LN4@P_FindAxis
$LN2@P_FindAxis:
  00013	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_FindAxis:
  0001c	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00023	74 54		 je	 SHORT $LN3@P_FindAxis

; 516  : 	{
; 517  : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00025	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00028	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0002f	74 02		 je	 SHORT $LN5@P_FindAxis

; 518  : 			continue;

  00031	eb e0		 jmp	 SHORT $LN2@P_FindAxis
$LN5@P_FindAxis:

; 519  : 
; 520  : 		mo2 = (mobj_t *)th;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 521  : 
; 522  : 		// Axis things are only at beginning of list.
; 523  : 		if (!(mo2->flags2 & MF2_AXIS))

  00039	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0003c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00042	83 e1 02	 and	 ecx, 2
  00045	75 04		 jne	 SHORT $LN6@P_FindAxis

; 524  : 			return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	eb 30		 jmp	 SHORT $LN1@P_FindAxis
$LN6@P_FindAxis:

; 525  : 
; 526  : 		if (mo2->type == type)

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0004e	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00051	3b 4d 10	 cmp	 ecx, DWORD PTR _type$[ebp]
  00054	75 21		 jne	 SHORT $LN8@P_FindAxis

; 527  : 		{
; 528  : 			if (mo2->health == axisnum && mo2->threshold == mare)

  00056	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00059	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0005f	3b 4d 0c	 cmp	 ecx, DWORD PTR _axisnum$[ebp]
  00062	75 13		 jne	 SHORT $LN8@P_FindAxis
  00064	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00067	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0006d	3b 4d 08	 cmp	 ecx, DWORD PTR _mare$[ebp]
  00070	75 05		 jne	 SHORT $LN8@P_FindAxis

; 529  : 				return mo2;

  00072	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00075	eb 04		 jmp	 SHORT $LN1@P_FindAxis
$LN8@P_FindAxis:

; 530  : 		}
; 531  : 	}

  00077	eb 9a		 jmp	 SHORT $LN2@P_FindAxis
$LN3@P_FindAxis:

; 532  : 
; 533  : 	return NULL;

  00079	33 c0		 xor	 eax, eax
$LN1@P_FindAxis:

; 534  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_P_FindAxisTransfer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_FindAxis
_TEXT	SEGMENT
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_mare$ = 8						; size = 4
_axisnum$ = 12						; size = 4
_P_FindAxis PROC					; COMDAT

; 476  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 477  : 	thinker_t *th;
; 478  : 	mobj_t *mo2;
; 479  : 
; 480  : 	// scan the thinkers
; 481  : 	// to find the closest axis point
; 482  : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0000e	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  00011	eb 09		 jmp	 SHORT $LN4@P_FindAxis
$LN2@P_FindAxis:
  00013	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_FindAxis:
  0001c	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00023	74 55		 je	 SHORT $LN3@P_FindAxis

; 483  : 	{
; 484  : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00025	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00028	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0002f	74 02		 je	 SHORT $LN5@P_FindAxis

; 485  : 			continue;

  00031	eb e0		 jmp	 SHORT $LN2@P_FindAxis
$LN5@P_FindAxis:

; 486  : 
; 487  : 		mo2 = (mobj_t *)th;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 488  : 
; 489  : 		// Axis things are only at beginning of list.
; 490  : 		if (!(mo2->flags2 & MF2_AXIS))

  00039	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0003c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00042	83 e1 02	 and	 ecx, 2
  00045	75 04		 jne	 SHORT $LN6@P_FindAxis

; 491  : 			return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	eb 31		 jmp	 SHORT $LN1@P_FindAxis
$LN6@P_FindAxis:

; 492  : 
; 493  : 		if (mo2->type == MT_AXIS)

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0004e	81 78 7c f1 00
	00 00		 cmp	 DWORD PTR [eax+124], 241 ; 000000f1H
  00055	75 21		 jne	 SHORT $LN8@P_FindAxis

; 494  : 		{
; 495  : 			if (mo2->health == axisnum && mo2->threshold == mare)

  00057	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0005a	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00060	3b 4d 0c	 cmp	 ecx, DWORD PTR _axisnum$[ebp]
  00063	75 13		 jne	 SHORT $LN8@P_FindAxis
  00065	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00068	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0006e	3b 4d 08	 cmp	 ecx, DWORD PTR _mare$[ebp]
  00071	75 05		 jne	 SHORT $LN8@P_FindAxis

; 496  : 				return mo2;

  00073	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00076	eb 04		 jmp	 SHORT $LN1@P_FindAxis
$LN8@P_FindAxis:

; 497  : 		}
; 498  : 	}

  00078	eb 99		 jmp	 SHORT $LN2@P_FindAxis
$LN3@P_FindAxis:

; 499  : 
; 500  : 	return NULL;

  0007a	33 c0		 xor	 eax, eax
$LN1@P_FindAxis:

; 501  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_P_FindAxis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_GridSnap
_TEXT	SEGMENT
tv70 = -76						; size = 4
_poss$ = -8						; size = 4
_pos$ = -4						; size = 4
_value$ = 8						; size = 4
_P_GridSnap PROC					; COMDAT

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 254  : 	fixed_t pos = value/cv_grid.value;

  00009	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0000c	99		 cdq
  0000d	f7 3d 14 00 00
	00		 idiv	 DWORD PTR _cv_grid+20
  00013	89 45 fc	 mov	 DWORD PTR _pos$[ebp], eax

; 255  : 	const fixed_t poss = (pos/FRACBITS)<<FRACBITS;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _pos$[ebp]
  00019	99		 cdq
  0001a	83 e2 0f	 and	 edx, 15			; 0000000fH
  0001d	03 c2		 add	 eax, edx
  0001f	c1 f8 04	 sar	 eax, 4
  00022	c1 e0 10	 shl	 eax, 16			; 00000010H
  00025	89 45 f8	 mov	 DWORD PTR _poss$[ebp], eax

; 256  : 	pos = (pos&FRACMASK) < FRACUNIT/2 ? poss : poss+FRACUNIT;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _pos$[ebp]
  0002b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00030	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  00035	7d 08		 jge	 SHORT $LN3@P_GridSnap
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _poss$[ebp]
  0003a	89 4d b4	 mov	 DWORD PTR tv70[ebp], ecx
  0003d	eb 0c		 jmp	 SHORT $LN4@P_GridSnap
$LN3@P_GridSnap:
  0003f	8b 55 f8	 mov	 edx, DWORD PTR _poss$[ebp]
  00042	81 c2 00 00 01
	00		 add	 edx, 65536		; 00010000H
  00048	89 55 b4	 mov	 DWORD PTR tv70[ebp], edx
$LN4@P_GridSnap:
  0004b	8b 45 b4	 mov	 eax, DWORD PTR tv70[ebp]
  0004e	89 45 fc	 mov	 DWORD PTR _pos$[ebp], eax

; 257  : 	return pos * cv_grid.value;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _pos$[ebp]
  00054	0f af 05 14 00
	00 00		 imul	 eax, DWORD PTR _cv_grid+20

; 258  : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_P_GridSnap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoSuperTransformation
_TEXT	SEGMENT
_player$ = 8						; size = 4
_giverings$ = 12					; size = 4
_P_DoSuperTransformation PROC				; COMDAT

; 923  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 924  : 	player->powers[pw_super] = 1;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 0f	 imul	 ecx, eax, 15
  00011	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00014	c7 44 0a 38 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 1

; 925  : 	if (!mapheaderinfo[gamemap-1].nossmusic && P_IsLocalPlayer(player))

  0001c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00023	83 e8 01	 sub	 eax, 1
  00026	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0002c	83 b9 28 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+296], 0
  00033	75 25		 jne	 SHORT $LN2@P_DoSuperT
  00035	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	74 15		 je	 SHORT $LN2@P_DoSuperT

; 926  : 	{
; 927  : 		S_StopMusic();

  00045	e8 00 00 00 00	 call	 _S_StopMusic
  0004a	90		 npad	 1

; 928  : 		S_ChangeMusic(mus_supers, true);

  0004b	6a 01		 push	 1
  0004d	68 16 04 00 00	 push	 1046			; 00000416H
  00052	e8 00 00 00 00	 call	 _S_ChangeMusic
  00057	83 c4 08	 add	 esp, 8
$LN2@P_DoSuperT:

; 929  : 	}
; 930  : 
; 931  : 	S_StartSound(NULL, sfx_supert); //let all players hear it -mattw_cfi

  0005a	68 de 00 00 00	 push	 222			; 000000deH
  0005f	6a 00		 push	 0
  00061	e8 00 00 00 00	 call	 _S_StartSound
  00066	83 c4 08	 add	 esp, 8

; 932  : 
; 933  : 	// Transformation animation
; 934  : 	if (player->charflags & SF_SUPERANIMS)

  00069	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006c	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00072	83 e1 01	 and	 ecx, 1
  00075	74 10		 je	 SHORT $LN3@P_DoSuperT

; 935  : 		P_SetPlayerMobjState(player->mo, S_PLAY_SUPERTRANS1);

  00077	6a 31		 push	 49			; 00000031H
  00079	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00084	83 c4 08	 add	 esp, 8
$LN3@P_DoSuperT:

; 936  : 
; 937  : 	player->mo->momx >>= 1;

  00087	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0008f	d1 fa		 sar	 edx, 1
  00091	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 938  : 	player->mo->momy >>= 1;

  00099	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000a1	d1 fa		 sar	 edx, 1
  000a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 939  : 	player->mo->momz >>= 1;

  000ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  000b3	d1 fa		 sar	 edx, 1
  000b5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	89 51 50	 mov	 DWORD PTR [ecx+80], edx

; 940  : 
; 941  : 	if (giverings)

  000bd	83 7d 0c 00	 cmp	 DWORD PTR _giverings$[ebp], 0
  000c1	74 20		 je	 SHORT $LN4@P_DoSuperT

; 942  : 	{
; 943  : 		player->mo->health = 51;

  000c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c8	c7 81 8c 00 00
	00 33 00 00 00	 mov	 DWORD PTR [ecx+140], 51	; 00000033H

; 944  : 		player->health = player->mo->health;

  000d2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000da	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  000e0	89 42 28	 mov	 DWORD PTR [edx+40], eax
$LN4@P_DoSuperT:

; 945  : 	}
; 946  : 
; 947  : 	// Just in case.
; 948  : 	if (!mapheaderinfo[gamemap-1].nossmusic)

  000e3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000ea	83 e8 01	 sub	 eax, 1
  000ed	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000f3	83 b9 28 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+296], 0
  000fa	75 26		 jne	 SHORT $LN5@P_DoSuperT

; 949  : 	{
; 950  : 		player->powers[pw_extralife] = 0;

  000fc	b8 04 00 00 00	 mov	 eax, 4
  00101	c1 e0 03	 shl	 eax, 3
  00104	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00107	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 951  : 		player->powers[pw_invulnerability] = 0;

  0010f	b8 04 00 00 00	 mov	 eax, 4
  00114	6b c8 00	 imul	 ecx, eax, 0
  00117	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0011a	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN5@P_DoSuperT:

; 952  : 	}
; 953  : 	player->powers[pw_sneakers] = 0;

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	c1 e0 00	 shl	 eax, 0
  0012a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0012d	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 954  : 
; 955  : 	if (gametype != GT_COOP)

  00135	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0013c	85 c0		 test	 eax, eax
  0013e	74 6b		 je	 SHORT $LN6@P_DoSuperT

; 956  : 	{
; 957  : 		HU_SetCEchoFlags(0);

  00140	6a 00		 push	 0
  00142	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00147	83 c4 04	 add	 esp, 4

; 958  : 		HU_SetCEchoDuration(5);

  0014a	6a 05		 push	 5
  0014c	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00151	83 c4 04	 add	 esp, 4

; 959  : 		HU_DoCEcho(va("%s\\is now super.\\\\\\\\", player_names[player-players]));

  00154	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00157	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0015c	99		 cdq
  0015d	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00162	f7 f9		 idiv	 ecx
  00164	6b d0 16	 imul	 edx, eax, 22
  00167	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  0016d	52		 push	 edx
  0016e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LJFKFFFI@?$CFs?2is?5now?5super?4?2?2?2?2@
  00173	e8 00 00 00 00	 call	 _va
  00178	83 c4 08	 add	 esp, 8
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _HU_DoCEcho
  00181	83 c4 04	 add	 esp, 4

; 960  : 		I_OutputMsg("%s is now super.\n", player_names[player-players]);

  00184	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00187	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0018c	99		 cdq
  0018d	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00192	f7 f9		 idiv	 ecx
  00194	6b d0 16	 imul	 edx, eax, 22
  00197	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  0019d	52		 push	 edx
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ELCLDONG@?$CFs?5is?5now?5super?4?6@
  001a3	e8 00 00 00 00	 call	 _I_OutputMsg
  001a8	83 c4 08	 add	 esp, 8
$LN6@P_DoSuperT:

; 961  : 	}
; 962  : 
; 963  : 	P_PlayerFlagBurst(player, false);

  001ab	6a 00		 push	 0
  001ad	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 _P_PlayerFlagBurst
  001b6	83 c4 08	 add	 esp, 8

; 964  : }

  001b9	5f		 pop	 edi
  001ba	5e		 pop	 esi
  001bb	5b		 pop	 ebx
  001bc	8b e5		 mov	 esp, ebp
  001be	5d		 pop	 ebp
  001bf	c3		 ret	 0
_P_DoSuperTransformation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_Thrust
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_angle$ = 12						; size = 4
_move$ = 16						; size = 4
_P_Thrust PROC						; COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 77   : 	angle >>= ANGLETOFINESHIFT;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 0c	 mov	 DWORD PTR _angle$[ebp], eax

; 78   : 
; 79   : 	mo->momx += FixedMul(move, FINECOSINE(angle));

  00012	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0001b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001e	52		 push	 edx
  0001f	8b 45 10	 mov	 eax, DWORD PTR _move$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _FixedMul
  00028	83 c4 08	 add	 esp, 8
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0002e	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  00031	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00034	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 80   : 
; 81   : 	if (!(twodlevel || (mo->flags2 & MF2_TWOD)))

  00037	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0003e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00043	75 34		 jne	 SHORT $LN2@P_Thrust
  00045	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00048	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0004e	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00054	75 23		 jne	 SHORT $LN2@P_Thrust

; 82   : 		mo->momy += FixedMul(move, FINESINE(angle));

  00056	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  00059	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00060	51		 push	 ecx
  00061	8b 55 10	 mov	 edx, DWORD PTR _move$[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 _FixedMul
  0006a	83 c4 08	 add	 esp, 8
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00070	03 41 4c	 add	 eax, DWORD PTR [ecx+76]
  00073	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00076	89 42 4c	 mov	 DWORD PTR [edx+76], eax
$LN2@P_Thrust:

; 83   : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_P_Thrust ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_CalcHeight
_TEXT	SEGMENT
_mo$ = -16						; size = 4
_pviewheight$ = -12					; size = 4
_bob$ = -8						; size = 4
_angle$ = -4						; size = 4
_player$ = 8						; size = 4
_P_CalcHeight PROC					; COMDAT

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 181  : 	INT32 angle;
; 182  : 	fixed_t bob;
; 183  : 	fixed_t pviewheight;
; 184  : 	mobj_t *mo = player->mo;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d f0	 mov	 DWORD PTR _mo$[ebp], ecx

; 185  : 
; 186  : 	// Regular movement bobbing.
; 187  : 	// Should not be calculated when not on ground (FIXTHIS?)
; 188  : 	// OPTIMIZE: tablify angle
; 189  : 	// Note: a LUT allows for effects
; 190  : 	//  like a ramp with low health.
; 191  : 
; 192  : 	player->bob = ((FixedMul(player->rmomx,player->rmomx)

  00011	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00014	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0001e	8b 82 44 01 00
	00		 mov	 eax, DWORD PTR [edx+324]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _FixedMul
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b f0		 mov	 esi, eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00032	8b 91 48 01 00
	00		 mov	 edx, DWORD PTR [ecx+328]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003c	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [eax+328]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _FixedMul
  00048	83 c4 08	 add	 esp, 8
  0004b	03 f0		 add	 esi, eax
  0004d	c1 fe 02	 sar	 esi, 2
  00050	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00053	89 72 1c	 mov	 DWORD PTR [edx+28], esi

; 193  : 		+ FixedMul(player->rmomy,player->rmomy))*NEWTICRATERATIO)>>2;
; 194  : 
; 195  : 	if (player->bob > MAXBOB)

  00056	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00059	81 78 1c 00 00
	10 00		 cmp	 DWORD PTR [eax+28], 1048576 ; 00100000H
  00060	7e 0a		 jle	 SHORT $LN2@P_CalcHeig

; 196  : 		player->bob = MAXBOB;

  00062	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00065	c7 40 1c 00 00
	10 00		 mov	 DWORD PTR [eax+28], 1048576 ; 00100000H
$LN2@P_CalcHeig:

; 197  : 
; 198  : 	if (!P_IsObjectOnGround(mo))

  0006c	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  00075	83 c4 04	 add	 esp, 4
  00078	85 c0		 test	 eax, eax
  0007a	75 65		 jne	 SHORT $LN3@P_CalcHeig

; 199  : 	{
; 200  : 		if (mo->eflags & MFE_VERTICALFLIP)

  0007c	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  0007f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00085	83 e1 20	 and	 ecx, 32			; 00000020H
  00088	74 1a		 je	 SHORT $LN4@P_CalcHeig

; 201  : 			player->viewz = mo->z + mo->height - player->viewheight;

  0008a	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  0008d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00090	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  00093	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00096	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00099	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0009c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0009f	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  000a2	eb 12		 jmp	 SHORT $LN5@P_CalcHeig
$LN4@P_CalcHeig:

; 202  : 		else
; 203  : 			player->viewz = mo->z + player->viewheight;

  000a4	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  000a7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000aa	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ad	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  000b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b3	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN5@P_CalcHeig:

; 204  : 
; 205  : 		if (player->viewz > mo->ceilingz - FRACUNIT)

  000b6	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  000b9	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000bc	81 e9 00 00 01
	00		 sub	 ecx, 65536		; 00010000H
  000c2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000c5	39 4a 10	 cmp	 DWORD PTR [edx+16], ecx
  000c8	7e 12		 jle	 SHORT $LN6@P_CalcHeig

; 206  : 			player->viewz = mo->ceilingz - FRACUNIT;

  000ca	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  000cd	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000d0	81 e9 00 00 01
	00		 sub	 ecx, 65536		; 00010000H
  000d6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000d9	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN6@P_CalcHeig:

; 207  : 		return;

  000dc	e9 8e 01 00 00	 jmp	 $LN16@P_CalcHeig
$LN3@P_CalcHeig:

; 208  : 	}
; 209  : 
; 210  : 	angle = (FINEANGLES/20*localgametic/NEWTICRATERATIO)&FINEMASK;

  000e1	69 05 00 00 00
	00 99 01 00 00	 imul	 eax, DWORD PTR _leveltime, 409
  000eb	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  000f0	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax

; 211  : 	bob = FixedMul(player->bob/2, FINESINE(angle));

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _angle$[ebp]
  000f6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  000fd	51		 push	 ecx
  000fe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00101	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00104	99		 cdq
  00105	2b c2		 sub	 eax, edx
  00107	d1 f8		 sar	 eax, 1
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 _FixedMul
  0010f	83 c4 08	 add	 esp, 8
  00112	89 45 f8	 mov	 DWORD PTR _bob$[ebp], eax

; 212  : 
; 213  : 	// move viewheight
; 214  : 	pviewheight = FIXEDSCALE(cv_viewheight.value << FRACBITS, mo->scale); // default eye view height

  00115	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_viewheight+20
  0011a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0011d	50		 push	 eax
  0011e	68 00 00 64 00	 push	 6553600			; 00640000H
  00123	8b 4d f0	 mov	 ecx, DWORD PTR _mo$[ebp]
  00126	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0012d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00130	52		 push	 edx
  00131	e8 00 00 00 00	 call	 _FixedDiv
  00136	83 c4 08	 add	 esp, 8
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _FixedMul
  0013f	83 c4 08	 add	 esp, 8
  00142	89 45 f4	 mov	 DWORD PTR _pviewheight$[ebp], eax

; 215  : 
; 216  : 	if (player->playerstate == PST_LIVE)

  00145	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00148	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0014c	0f 85 8f 00 00
	00		 jne	 $LN12@P_CalcHeig

; 217  : 	{
; 218  : 		player->viewheight += player->deltaviewheight;

  00152	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00155	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00158	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0015b	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  0015e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00161	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 219  : 
; 220  : 		if (player->viewheight > pviewheight)

  00164	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00167	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0016a	3b 4d f4	 cmp	 ecx, DWORD PTR _pviewheight$[ebp]
  0016d	7e 13		 jle	 SHORT $LN8@P_CalcHeig

; 221  : 		{
; 222  : 			player->viewheight = pviewheight;

  0016f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00172	8b 4d f4	 mov	 ecx, DWORD PTR _pviewheight$[ebp]
  00175	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 223  : 			player->deltaviewheight = 0;

  00178	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0017b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
$LN8@P_CalcHeig:

; 224  : 		}
; 225  : 
; 226  : 		if (player->viewheight < pviewheight/2)

  00182	8b 45 f4	 mov	 eax, DWORD PTR _pviewheight$[ebp]
  00185	99		 cdq
  00186	2b c2		 sub	 eax, edx
  00188	d1 f8		 sar	 eax, 1
  0018a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0018d	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00190	7d 21		 jge	 SHORT $LN10@P_CalcHeig

; 227  : 		{
; 228  : 			player->viewheight = pviewheight/2;

  00192	8b 45 f4	 mov	 eax, DWORD PTR _pviewheight$[ebp]
  00195	99		 cdq
  00196	2b c2		 sub	 eax, edx
  00198	d1 f8		 sar	 eax, 1
  0019a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0019d	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 229  : 			if (player->deltaviewheight <= 0)

  001a0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a3	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  001a7	7f 0a		 jg	 SHORT $LN10@P_CalcHeig

; 230  : 				player->deltaviewheight = 1;

  001a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ac	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1
$LN10@P_CalcHeig:

; 231  : 		}
; 232  : 
; 233  : 		if (player->deltaviewheight)

  001b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b6	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  001ba	74 25		 je	 SHORT $LN12@P_CalcHeig

; 234  : 		{
; 235  : 			player->deltaviewheight += FRACUNIT/4;

  001bc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001bf	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001c2	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  001c8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001cb	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 236  : 			if (!player->deltaviewheight)

  001ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d1	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  001d5	75 0a		 jne	 SHORT $LN12@P_CalcHeig

; 237  : 				player->deltaviewheight = 1;

  001d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001da	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1
$LN12@P_CalcHeig:

; 238  : 		}
; 239  : 	}
; 240  : 
; 241  : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  001e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e6	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  001ec	83 e2 20	 and	 edx, 32			; 00000020H
  001ef	74 1d		 je	 SHORT $LN13@P_CalcHeig

; 242  : 		player->viewz = mo->z + mo->height - player->viewheight - bob;

  001f1	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  001f4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001f7	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  001fa	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  001fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00200	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00203	2b 4d f8	 sub	 ecx, DWORD PTR _bob$[ebp]
  00206	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00209	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  0020c	eb 15		 jmp	 SHORT $LN14@P_CalcHeig
$LN13@P_CalcHeig:

; 243  : 	else
; 244  : 		player->viewz = mo->z + player->viewheight + bob;

  0020e	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  00211	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00214	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00217	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  0021a	03 4d f8	 add	 ecx, DWORD PTR _bob$[ebp]
  0021d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00220	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN14@P_CalcHeig:

; 245  : 
; 246  : 	if (player->viewz > mo->ceilingz-4*FRACUNIT)

  00223	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  00226	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00229	81 e9 00 00 04
	00		 sub	 ecx, 262144		; 00040000H
  0022f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00232	39 4a 10	 cmp	 DWORD PTR [edx+16], ecx
  00235	7e 12		 jle	 SHORT $LN15@P_CalcHeig

; 247  : 		player->viewz = mo->ceilingz-4*FRACUNIT;

  00237	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  0023a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0023d	81 e9 00 00 04
	00		 sub	 ecx, 262144		; 00040000H
  00243	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00246	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN15@P_CalcHeig:

; 248  : 	if (player->viewz < mo->floorz+4*FRACUNIT)

  00249	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  0024c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0024f	81 c1 00 00 04
	00		 add	 ecx, 262144		; 00040000H
  00255	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00258	39 4a 10	 cmp	 DWORD PTR [edx+16], ecx
  0025b	7d 12		 jge	 SHORT $LN16@P_CalcHeig

; 249  : 		player->viewz = mo->floorz+4*FRACUNIT;

  0025d	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  00260	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00263	81 c1 00 00 04
	00		 add	 ecx, 262144		; 00040000H
  00269	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0026c	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN16@P_CalcHeig:

; 250  : }

  0026f	5f		 pop	 edi
  00270	5e		 pop	 esi
  00271	5b		 pop	 ebx
  00272	8b e5		 mov	 esp, ebp
  00274	5d		 pop	 ebp
  00275	c3		 ret	 0
_P_CalcHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_PlayerMoving
_TEXT	SEGMENT
tv132 = -72						; size = 4
_p$ = -4						; size = 4
_pnum$ = 8						; size = 4
_P_PlayerMoving PROC					; COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 267  : 	player_t *p = &players[pnum];

  00009	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _pnum$[ebp], 508
  00010	05 00 00 00 00	 add	 eax, OFFSET _players
  00015	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 268  : 
; 269  : 	if (p->jointime < 5*TICRATE)

  00018	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0001b	81 b8 f4 01 00
	00 af 00 00 00	 cmp	 DWORD PTR [eax+500], 175 ; 000000afH
  00025	73 07		 jae	 SHORT $LN2@P_PlayerMo

; 270  : 		return false;

  00027	33 c0		 xor	 eax, eax
  00029	e9 d9 00 00 00	 jmp	 $LN1@P_PlayerMo
$LN2@P_PlayerMo:

; 271  : 
; 272  : 	return gamestate == GS_LEVEL && p->mo && p->mo->health > 0

  0002e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00035	0f 85 c2 00 00
	00		 jne	 $LN4@P_PlayerMo
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0003e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00041	0f 84 b6 00 00
	00		 je	 $LN4@P_PlayerMo
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0004a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004c	83 ba 8c 00 00
	00 00		 cmp	 DWORD PTR [edx+140], 0
  00053	0f 8e a4 00 00
	00		 jle	 $LN4@P_PlayerMo
  00059	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0005c	81 b8 44 01 00
	00 00 80 00 00	 cmp	 DWORD PTR [eax+324], 32768 ; 00008000H
  00066	0f 8d 88 00 00
	00		 jge	 $LN5@P_PlayerMo
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0006f	81 b9 44 01 00
	00 00 80 ff ff	 cmp	 DWORD PTR [ecx+324], -32768 ; ffff8000H
  00079	7e 79		 jle	 SHORT $LN5@P_PlayerMo
  0007b	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  0007e	81 ba 48 01 00
	00 00 80 00 00	 cmp	 DWORD PTR [edx+328], 32768 ; 00008000H
  00088	7d 6a		 jge	 SHORT $LN5@P_PlayerMo
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0008d	81 b8 48 01 00
	00 00 80 ff ff	 cmp	 DWORD PTR [eax+328], -32768 ; ffff8000H
  00097	7e 5b		 jle	 SHORT $LN5@P_PlayerMo
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0009c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009e	81 7a 50 00 80
	00 00		 cmp	 DWORD PTR [edx+80], 32768 ; 00008000H
  000a5	7d 4d		 jge	 SHORT $LN5@P_PlayerMo
  000a7	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  000aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ac	81 79 50 00 80
	ff ff		 cmp	 DWORD PTR [ecx+80], -32768 ; ffff8000H
  000b3	7e 3f		 jle	 SHORT $LN5@P_PlayerMo
  000b5	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  000b8	83 ba 24 01 00
	00 00		 cmp	 DWORD PTR [edx+292], 0
  000bf	75 33		 jne	 SHORT $LN5@P_PlayerMo
  000c1	b8 04 00 00 00	 mov	 eax, 4
  000c6	6b c8 05	 imul	 ecx, eax, 5
  000c9	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  000cc	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000d1	75 21		 jne	 SHORT $LN5@P_PlayerMo
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  000d6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000dc	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  000e2	75 10		 jne	 SHORT $LN5@P_PlayerMo
  000e4	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  000e7	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  000ed	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  000f2	74 09		 je	 SHORT $LN4@P_PlayerMo
$LN5@P_PlayerMo:
  000f4	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv132[ebp], 1
  000fb	eb 07		 jmp	 SHORT $LN6@P_PlayerMo
$LN4@P_PlayerMo:
  000fd	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN6@P_PlayerMo:
  00104	8b 45 b8	 mov	 eax, DWORD PTR tv132[ebp]
$LN1@P_PlayerMo:

; 273  : 		&& (
; 274  : 			p->rmomx >= FRACUNIT/2 ||
; 275  : 			p->rmomx <= -FRACUNIT/2 ||
; 276  : 			p->rmomy >= FRACUNIT/2 ||
; 277  : 			p->rmomy <= -FRACUNIT/2 ||
; 278  : 			p->mo->momz >= FRACUNIT/2 ||
; 279  : 			p->mo->momz <= -FRACUNIT/2 ||
; 280  : 			p->climbing ||
; 281  : 			p->powers[pw_tailsfly] ||
; 282  : 			(p->pflags & PF_JUMPED) ||
; 283  : 			(p->pflags & PF_SPINNING));
; 284  : }

  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
_P_PlayerMoving ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_TransferToAxis
_TEXT	SEGMENT
_dist2$ = -24						; size = 4
_dist1$ = -20						; size = 4
_mare$ = -16						; size = 4
_closestaxis$ = -12					; size = 4
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_player$ = 8						; size = 4
_axisnum$ = 12						; size = 4
_P_TransferToAxis PROC					; COMDAT

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 542  : 	thinker_t *th;
; 543  : 	mobj_t *mo2;
; 544  : 	mobj_t *closestaxis;
; 545  : 	INT32 mare = player->mare;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+468]
  00013	89 4d f0	 mov	 DWORD PTR _mare$[ebp], ecx

; 546  : 	fixed_t dist1, dist2 = 0;

  00016	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dist2$[ebp], 0

; 547  : 
; 548  : 	if (cv_debug)

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00024	74 17		 je	 SHORT $LN5@P_Transfer

; 549  : 		CONS_Printf("Transferring to axis %d\nLeveltime: %u...\n", axisnum, leveltime);

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _axisnum$[ebp]
  0002f	51		 push	 ecx
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@MOPFLCEE@Transferring?5to?5axis?5?$CFd?6Levelti@
  00035	e8 00 00 00 00	 call	 _CONS_Printf
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@P_Transfer:

; 550  : 
; 551  : 	closestaxis = NULL;

  0003d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _closestaxis$[ebp], 0

; 552  : 
; 553  : 	// scan the thinkers
; 554  : 	// to find the closest axis point
; 555  : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00044	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00049	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  0004c	eb 09		 jmp	 SHORT $LN4@P_Transfer
$LN2@P_Transfer:
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_Transfer:
  00057	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0005e	0f 84 d1 00 00
	00		 je	 $LN3@P_Transfer

; 556  : 	{
; 557  : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00064	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00067	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0006e	74 02		 je	 SHORT $LN6@P_Transfer

; 558  : 			continue;

  00070	eb dc		 jmp	 SHORT $LN2@P_Transfer
$LN6@P_Transfer:

; 559  : 
; 560  : 		mo2 = (mobj_t *)th;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00075	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 561  : 
; 562  : 		if (mo2->type == MT_AXIS)

  00078	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0007b	81 78 7c f1 00
	00 00		 cmp	 DWORD PTR [eax+124], 241 ; 000000f1H
  00082	0f 85 a8 00 00
	00		 jne	 $LN11@P_Transfer

; 563  : 		{
; 564  : 			if (mo2->health == axisnum && mo2->threshold == mare)

  00088	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0008b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00091	3b 4d 0c	 cmp	 ecx, DWORD PTR _axisnum$[ebp]
  00094	0f 85 96 00 00
	00		 jne	 $LN11@P_Transfer
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0009d	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  000a3	3b 4d f0	 cmp	 ecx, DWORD PTR _mare$[ebp]
  000a6	0f 85 84 00 00
	00		 jne	 $LN11@P_Transfer

; 565  : 			{
; 566  : 				if (closestaxis == NULL)

  000ac	83 7d f4 00	 cmp	 DWORD PTR _closestaxis$[ebp], 0
  000b0	75 39		 jne	 SHORT $LN9@P_Transfer

; 567  : 				{
; 568  : 					closestaxis = mo2;

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  000b5	89 45 f4	 mov	 DWORD PTR _closestaxis$[ebp], eax

; 569  : 					dist2 = R_PointToDist2(player->mo->x, player->mo->y, mo2->x, mo2->y)-mo2->radius;

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  000bb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000be	51		 push	 ecx
  000bf	8b 55 f8	 mov	 edx, DWORD PTR _mo2$[ebp]
  000c2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000c5	50		 push	 eax
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ce	50		 push	 eax
  000cf	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d4	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _R_PointToDist2
  000dd	83 c4 10	 add	 esp, 16			; 00000010H
  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _mo2$[ebp]
  000e3	2b 41 40	 sub	 eax, DWORD PTR [ecx+64]
  000e6	89 45 e8	 mov	 DWORD PTR _dist2$[ebp], eax

; 570  : 				}

  000e9	eb 45		 jmp	 SHORT $LN11@P_Transfer
$LN9@P_Transfer:

; 571  : 				else
; 572  : 				{
; 573  : 					dist1 = R_PointToDist2(player->mo->x, player->mo->y, mo2->x, mo2->y)-mo2->radius;

  000eb	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  000ee	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000f1	51		 push	 ecx
  000f2	8b 55 f8	 mov	 edx, DWORD PTR _mo2$[ebp]
  000f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000f8	50		 push	 eax
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fe	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00101	50		 push	 eax
  00102	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _R_PointToDist2
  00110	83 c4 10	 add	 esp, 16			; 00000010H
  00113	8b 4d f8	 mov	 ecx, DWORD PTR _mo2$[ebp]
  00116	2b 41 40	 sub	 eax, DWORD PTR [ecx+64]
  00119	89 45 ec	 mov	 DWORD PTR _dist1$[ebp], eax

; 574  : 
; 575  : 					if (dist1 < dist2)

  0011c	8b 45 ec	 mov	 eax, DWORD PTR _dist1$[ebp]
  0011f	3b 45 e8	 cmp	 eax, DWORD PTR _dist2$[ebp]
  00122	7d 0c		 jge	 SHORT $LN11@P_Transfer

; 576  : 					{
; 577  : 						closestaxis = mo2;

  00124	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00127	89 45 f4	 mov	 DWORD PTR _closestaxis$[ebp], eax

; 578  : 						dist2 = dist1;

  0012a	8b 45 ec	 mov	 eax, DWORD PTR _dist1$[ebp]
  0012d	89 45 e8	 mov	 DWORD PTR _dist2$[ebp], eax
$LN11@P_Transfer:

; 579  : 					}
; 580  : 				}
; 581  : 			}
; 582  : 		}
; 583  : 	}

  00130	e9 19 ff ff ff	 jmp	 $LN2@P_Transfer
$LN3@P_Transfer:

; 584  : 
; 585  : 	if (!closestaxis)

  00135	83 7d f4 00	 cmp	 DWORD PTR _closestaxis$[ebp], 0
  00139	75 13		 jne	 SHORT $LN12@P_Transfer

; 586  : 		CONS_Printf("ERROR: Specified axis point to transfer to not found!\n%d\n", axisnum);

  0013b	8b 45 0c	 mov	 eax, DWORD PTR _axisnum$[ebp]
  0013e	50		 push	 eax
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GBBHHOAI@ERROR?3?5Specified?5axis?5point?5to?5@
  00144	e8 00 00 00 00	 call	 _CONS_Printf
  00149	83 c4 08	 add	 esp, 8
  0014c	eb 2a		 jmp	 SHORT $LN14@P_Transfer
$LN12@P_Transfer:

; 587  : 	else if (cv_debug)

  0014e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00155	74 21		 je	 SHORT $LN14@P_Transfer

; 588  : 		CONS_Printf("Transferred to axis %d, mare %d\n", closestaxis->health, closestaxis->threshold);

  00157	8b 45 f4	 mov	 eax, DWORD PTR _closestaxis$[ebp]
  0015a	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00160	51		 push	 ecx
  00161	8b 55 f4	 mov	 edx, DWORD PTR _closestaxis$[ebp]
  00164	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0016a	50		 push	 eax
  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PKJLBCLC@Transferred?5to?5axis?5?$CFd?0?5mare?5?$CFd@
  00170	e8 00 00 00 00	 call	 _CONS_Printf
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@P_Transfer:

; 589  : 
; 590  : 	P_SetTarget(&player->mo->target, closestaxis);

  00178	8b 45 f4	 mov	 eax, DWORD PTR _closestaxis$[ebp]
  0017b	50		 push	 eax
  0017c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0017f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00181	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00187	52		 push	 edx
  00188	e8 00 00 00 00	 call	 _P_SetTarget
  0018d	83 c4 08	 add	 esp, 8

; 591  : }

  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	5b		 pop	 ebx
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c3		 ret	 0
_P_TransferToAxis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_FindEmerald
_TEXT	SEGMENT
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_P_FindEmerald PROC					; COMDAT

; 8876 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8877 : 	thinker_t *th;
; 8878 : 	mobj_t *mo2;
; 8879 : 
; 8880 : 	hunt1 = hunt2 = hunt3 = NULL;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _hunt3, 0
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt3
  00018	a3 00 00 00 00	 mov	 DWORD PTR _hunt2, eax
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hunt2
  00023	89 0d 00 00 00
	00		 mov	 DWORD PTR _hunt1, ecx

; 8881 : 
; 8882 : 	// scan the remaining thinkers
; 8883 : 	// to find all emeralds
; 8884 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00029	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0002e	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  00031	eb 09		 jmp	 SHORT $LN4@P_FindEmer
$LN2@P_FindEmer:
  00033	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_FindEmer:
  0003c	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00043	74 56		 je	 SHORT $LN3@P_FindEmer

; 8885 : 	{
; 8886 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00045	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00048	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0004f	74 02		 je	 SHORT $LN5@P_FindEmer

; 8887 : 			continue;

  00051	eb e0		 jmp	 SHORT $LN2@P_FindEmer
$LN5@P_FindEmer:

; 8888 : 
; 8889 : 		mo2 = (mobj_t *)th;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00056	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 8890 : 		if (mo2->type == MT_EMERHUNT)

  00059	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0005c	83 78 7c 3e	 cmp	 DWORD PTR [eax+124], 62	; 0000003eH
  00060	75 37		 jne	 SHORT $LN11@P_FindEmer

; 8891 : 		{
; 8892 : 			if (!hunt1)

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hunt1, 0
  00069	75 0a		 jne	 SHORT $LN7@P_FindEmer

; 8893 : 				hunt1 = mo2;

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0006e	a3 00 00 00 00	 mov	 DWORD PTR _hunt1, eax
  00073	eb 24		 jmp	 SHORT $LN11@P_FindEmer
$LN7@P_FindEmer:

; 8894 : 			else if (!hunt2)

  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hunt2, 0
  0007c	75 0a		 jne	 SHORT $LN9@P_FindEmer

; 8895 : 				hunt2 = mo2;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00081	a3 00 00 00 00	 mov	 DWORD PTR _hunt2, eax
  00086	eb 11		 jmp	 SHORT $LN11@P_FindEmer
$LN9@P_FindEmer:

; 8896 : 			else if (!hunt3)

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hunt3, 0
  0008f	75 08		 jne	 SHORT $LN11@P_FindEmer

; 8897 : 				hunt3 = mo2;

  00091	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00094	a3 00 00 00 00	 mov	 DWORD PTR _hunt3, eax
$LN11@P_FindEmer:

; 8898 : 		}
; 8899 : 	}

  00099	eb 98		 jmp	 SHORT $LN2@P_FindEmer
$LN3@P_FindEmer:

; 8900 : 	return;
; 8901 : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
_P_FindEmerald ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_FindLowestMare
_TEXT	SEGMENT
_threshold$1 = -10					; size = 1
_mare$ = -9						; size = 1
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_P_FindLowestMare PROC					; COMDAT

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 373  : 	thinker_t *th;
; 374  : 	mobj_t *mo2;
; 375  : 	UINT8 mare = UINT8_MAX;

  00009	c6 45 f7 ff	 mov	 BYTE PTR _mare$[ebp], 255 ; 000000ffH

; 376  : 
; 377  : 	if (gametype == GT_RACE)

  0000d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00014	83 f8 02	 cmp	 eax, 2
  00017	75 07		 jne	 SHORT $LN5@P_FindLowe

; 378  : 		return 0;

  00019	32 c0		 xor	 al, al
  0001b	e9 99 00 00 00	 jmp	 $LN1@P_FindLowe
$LN5@P_FindLowe:

; 379  : 
; 380  : 	// scan the thinkers
; 381  : 	// to find the egg capsule with the lowest mare
; 382  : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00020	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00025	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  00028	eb 09		 jmp	 SHORT $LN4@P_FindLowe
$LN2@P_FindLowe:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_FindLowe:
  00033	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  0003a	74 5f		 je	 SHORT $LN3@P_FindLowe

; 383  : 	{
; 384  : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0003f	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00046	74 02		 je	 SHORT $LN6@P_FindLowe

; 385  : 			continue;

  00048	eb e0		 jmp	 SHORT $LN2@P_FindLowe
$LN6@P_FindLowe:

; 386  : 
; 387  : 		mo2 = (mobj_t *)th;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0004d	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 388  : 
; 389  : 		if (mo2->type == MT_EGGCAPSULE && mo2->health > 0)

  00050	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00053	81 78 7c 00 01
	00 00		 cmp	 DWORD PTR [eax+124], 256 ; 00000100H
  0005a	75 3d		 jne	 SHORT $LN10@P_FindLowe
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0005f	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00066	7e 31		 jle	 SHORT $LN10@P_FindLowe

; 390  : 		{
; 391  : 			const UINT8 threshold = (UINT8)mo2->threshold;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0006b	8a 88 a0 00 00
	00		 mov	 cl, BYTE PTR [eax+160]
  00071	88 4d f6	 mov	 BYTE PTR _threshold$1[ebp], cl

; 392  : 			if (mare == 255)

  00074	0f b6 45 f7	 movzx	 eax, BYTE PTR _mare$[ebp]
  00078	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0007d	75 08		 jne	 SHORT $LN8@P_FindLowe

; 393  : 				mare = threshold;

  0007f	8a 45 f6	 mov	 al, BYTE PTR _threshold$1[ebp]
  00082	88 45 f7	 mov	 BYTE PTR _mare$[ebp], al
  00085	eb 12		 jmp	 SHORT $LN10@P_FindLowe
$LN8@P_FindLowe:

; 394  : 			else if (threshold < mare)

  00087	0f b6 45 f6	 movzx	 eax, BYTE PTR _threshold$1[ebp]
  0008b	0f b6 4d f7	 movzx	 ecx, BYTE PTR _mare$[ebp]
  0008f	3b c1		 cmp	 eax, ecx
  00091	7d 06		 jge	 SHORT $LN10@P_FindLowe

; 395  : 				mare = threshold;

  00093	8a 45 f6	 mov	 al, BYTE PTR _threshold$1[ebp]
  00096	88 45 f7	 mov	 BYTE PTR _mare$[ebp], al
$LN10@P_FindLowe:

; 396  : 		}
; 397  : 	}

  00099	eb 8f		 jmp	 SHORT $LN2@P_FindLowe
$LN3@P_FindLowe:

; 398  : 
; 399  : 	if (cv_debug)

  0009b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  000a2	74 12		 je	 SHORT $LN11@P_FindLowe

; 400  : 		CONS_Printf("Lowest mare found: %d\n", mare);

  000a4	0f b6 45 f7	 movzx	 eax, BYTE PTR _mare$[ebp]
  000a8	50		 push	 eax
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HBJKBHJA@Lowest?5mare?5found?3?5?$CFd?6@
  000ae	e8 00 00 00 00	 call	 _CONS_Printf
  000b3	83 c4 08	 add	 esp, 8
$LN11@P_FindLowe:

; 401  : 
; 402  : 	return mare;

  000b6	8a 45 f7	 mov	 al, BYTE PTR _mare$[ebp]
$LN1@P_FindLowe:

; 403  : }

  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_P_FindLowestMare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_TransferToNextMare
_TEXT	SEGMENT
_dist2$ = -28						; size = 4
_dist1$ = -24						; size = 4
_mare$ = -17						; size = 1
_lowestaxisnum$ = -16					; size = 4
_closestaxis$ = -12					; size = 4
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_player$ = 8						; size = 4
_P_TransferToNextMare PROC				; COMDAT

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 414  : 	thinker_t *th;
; 415  : 	mobj_t *mo2;
; 416  : 	mobj_t *closestaxis = NULL;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _closestaxis$[ebp], 0

; 417  : 	INT32 lowestaxisnum = -1;

  00010	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _lowestaxisnum$[ebp], -1

; 418  : 	UINT8 mare = P_FindLowestMare();

  00017	e8 00 00 00 00	 call	 _P_FindLowestMare
  0001c	88 45 ef	 mov	 BYTE PTR _mare$[ebp], al

; 419  : 	fixed_t dist1, dist2 = 0;

  0001f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dist2$[ebp], 0

; 420  : 
; 421  : 	if (mare == 255)

  00026	0f b6 45 ef	 movzx	 eax, BYTE PTR _mare$[ebp]
  0002a	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0002f	75 07		 jne	 SHORT $LN5@P_Transfer

; 422  : 		return false;

  00031	33 c0		 xor	 eax, eax
  00033	e9 54 01 00 00	 jmp	 $LN1@P_Transfer
$LN5@P_Transfer:

; 423  : 
; 424  : 	if (cv_debug)

  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0003f	74 12		 je	 SHORT $LN6@P_Transfer

; 425  : 		CONS_Printf("Mare is %d\n", mare);

  00041	0f b6 45 ef	 movzx	 eax, BYTE PTR _mare$[ebp]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NGAGLIEJ@Mare?5is?5?$CFd?6@
  0004b	e8 00 00 00 00	 call	 _CONS_Printf
  00050	83 c4 08	 add	 esp, 8
$LN6@P_Transfer:

; 426  : 
; 427  : 	player->mare = mare;

  00053	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00056	8a 4d ef	 mov	 cl, BYTE PTR _mare$[ebp]
  00059	88 88 d4 01 00
	00		 mov	 BYTE PTR [eax+468], cl

; 428  : 
; 429  : 	// scan the thinkers
; 430  : 	// to find the closest axis point
; 431  : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0005f	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00064	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  00067	eb 09		 jmp	 SHORT $LN4@P_Transfer
$LN2@P_Transfer:
  00069	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0006c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006f	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_Transfer:
  00072	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00079	0f 84 e6 00 00
	00		 je	 $LN3@P_Transfer

; 432  : 	{
; 433  : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00082	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00089	74 02		 je	 SHORT $LN7@P_Transfer

; 434  : 			continue;

  0008b	eb dc		 jmp	 SHORT $LN2@P_Transfer
$LN7@P_Transfer:

; 435  : 
; 436  : 		mo2 = (mobj_t *)th;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00090	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 437  : 
; 438  : 		if (mo2->type == MT_AXIS)

  00093	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00096	81 78 7c f1 00
	00 00		 cmp	 DWORD PTR [eax+124], 241 ; 000000f1H
  0009d	0f 85 bd 00 00
	00		 jne	 $LN13@P_Transfer

; 439  : 		{
; 440  : 			if (mo2->threshold == mare)

  000a3	0f b6 45 ef	 movzx	 eax, BYTE PTR _mare$[ebp]
  000a7	8b 4d f8	 mov	 ecx, DWORD PTR _mo2$[ebp]
  000aa	39 81 a0 00 00
	00		 cmp	 DWORD PTR [ecx+160], eax
  000b0	0f 85 aa 00 00
	00		 jne	 $LN13@P_Transfer

; 441  : 			{
; 442  : 				if (closestaxis == NULL)

  000b6	83 7d f4 00	 cmp	 DWORD PTR _closestaxis$[ebp], 0
  000ba	75 45		 jne	 SHORT $LN10@P_Transfer

; 443  : 				{
; 444  : 					closestaxis = mo2;

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  000bf	89 45 f4	 mov	 DWORD PTR _closestaxis$[ebp], eax

; 445  : 					lowestaxisnum = mo2->health;

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  000c5	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000cb	89 4d f0	 mov	 DWORD PTR _lowestaxisnum$[ebp], ecx

; 446  : 					dist2 = R_PointToDist2(player->mo->x, player->mo->y, mo2->x, mo2->y)-mo2->radius;

  000ce	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  000d1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d4	51		 push	 ecx
  000d5	8b 55 f8	 mov	 edx, DWORD PTR _mo2$[ebp]
  000d8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000db	50		 push	 eax
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000df	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000e4	50		 push	 eax
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ea	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 _R_PointToDist2
  000f3	83 c4 10	 add	 esp, 16			; 00000010H
  000f6	8b 4d f8	 mov	 ecx, DWORD PTR _mo2$[ebp]
  000f9	2b 41 40	 sub	 eax, DWORD PTR [ecx+64]
  000fc	89 45 e4	 mov	 DWORD PTR _dist2$[ebp], eax

; 447  : 				}

  000ff	eb 5f		 jmp	 SHORT $LN13@P_Transfer
$LN10@P_Transfer:

; 448  : 				else if (mo2->health < lowestaxisnum)

  00101	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00104	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0010a	3b 4d f0	 cmp	 ecx, DWORD PTR _lowestaxisnum$[ebp]
  0010d	7d 51		 jge	 SHORT $LN13@P_Transfer

; 449  : 				{
; 450  : 					dist1 = R_PointToDist2(player->mo->x, player->mo->y, mo2->x, mo2->y)-mo2->radius;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00112	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00115	51		 push	 ecx
  00116	8b 55 f8	 mov	 edx, DWORD PTR _mo2$[ebp]
  00119	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0011c	50		 push	 eax
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00120	8b 11		 mov	 edx, DWORD PTR [ecx]
  00122	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00125	50		 push	 eax
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00129	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 _R_PointToDist2
  00134	83 c4 10	 add	 esp, 16			; 00000010H
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _mo2$[ebp]
  0013a	2b 41 40	 sub	 eax, DWORD PTR [ecx+64]
  0013d	89 45 e8	 mov	 DWORD PTR _dist1$[ebp], eax

; 451  : 
; 452  : 					if (dist1 < dist2)

  00140	8b 45 e8	 mov	 eax, DWORD PTR _dist1$[ebp]
  00143	3b 45 e4	 cmp	 eax, DWORD PTR _dist2$[ebp]
  00146	7d 18		 jge	 SHORT $LN13@P_Transfer

; 453  : 					{
; 454  : 						closestaxis = mo2;

  00148	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0014b	89 45 f4	 mov	 DWORD PTR _closestaxis$[ebp], eax

; 455  : 						lowestaxisnum = mo2->health;

  0014e	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00151	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00157	89 4d f0	 mov	 DWORD PTR _lowestaxisnum$[ebp], ecx

; 456  : 						dist2 = dist1;

  0015a	8b 45 e8	 mov	 eax, DWORD PTR _dist1$[ebp]
  0015d	89 45 e4	 mov	 DWORD PTR _dist2$[ebp], eax
$LN13@P_Transfer:

; 457  : 					}
; 458  : 				}
; 459  : 			}
; 460  : 		}
; 461  : 	}

  00160	e9 04 ff ff ff	 jmp	 $LN2@P_Transfer
$LN3@P_Transfer:

; 462  : 
; 463  : 	if (closestaxis == NULL)

  00165	83 7d f4 00	 cmp	 DWORD PTR _closestaxis$[ebp], 0
  00169	75 04		 jne	 SHORT $LN14@P_Transfer

; 464  : 		return false;

  0016b	33 c0		 xor	 eax, eax
  0016d	eb 1d		 jmp	 SHORT $LN1@P_Transfer
$LN14@P_Transfer:

; 465  : 
; 466  : 	P_SetTarget(&player->mo->target, closestaxis);

  0016f	8b 45 f4	 mov	 eax, DWORD PTR _closestaxis$[ebp]
  00172	50		 push	 eax
  00173	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00176	8b 11		 mov	 edx, DWORD PTR [ecx]
  00178	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 _P_SetTarget
  00184	83 c4 08	 add	 esp, 8

; 467  : 	return true;

  00187	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_Transfer:

; 468  : }

  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi
  0018e	5b		 pop	 ebx
  0018f	8b e5		 mov	 esp, ebp
  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
_P_TransferToNextMare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoJump
_TEXT	SEGMENT
_factor$ = -4						; size = 4
_player$ = 8						; size = 4
_soundandstate$ = 12					; size = 4
_P_DoJump PROC						; COMDAT

; 1650 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1651 : 	fixed_t factor;
; 1652 : 
; 1653 : 	if (player->pflags & PF_STASIS || (player->powers[pw_nocontrol] && player->powers[pw_nocontrol] < 65536))

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00012	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  00018	75 27		 jne	 SHORT $LN3@P_DoJump
  0001a	b8 04 00 00 00	 mov	 eax, 4
  0001f	6b c8 1b	 imul	 ecx, eax, 27
  00022	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00025	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0002a	74 1a		 je	 SHORT $LN2@P_DoJump
  0002c	b8 04 00 00 00	 mov	 eax, 4
  00031	6b c8 1b	 imul	 ecx, eax, 27
  00034	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00037	81 7c 0a 38 00
	00 01 00	 cmp	 DWORD PTR [edx+ecx+56], 65536 ; 00010000H
  0003f	7d 05		 jge	 SHORT $LN2@P_DoJump
$LN3@P_DoJump:

; 1654 : 		return;

  00041	e9 7e 05 00 00	 jmp	 $LN51@P_DoJump
$LN2@P_DoJump:

; 1655 : 
; 1656 : 	if (!player->jumpfactor)

  00046	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00049	83 b8 f8 00 00
	00 00		 cmp	 DWORD PTR [eax+248], 0
  00050	75 05		 jne	 SHORT $LN4@P_DoJump

; 1657 : 		return;

  00052	e9 6d 05 00 00	 jmp	 $LN51@P_DoJump
$LN4@P_DoJump:

; 1658 : 
; 1659 : 	if (player->powers[pw_ingoop])

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	6b c8 1c	 imul	 ecx, eax, 28
  0005f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00062	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00067	74 05		 je	 SHORT $LN5@P_DoJump

; 1660 : 		return;

  00069	e9 56 05 00 00	 jmp	 $LN51@P_DoJump
$LN5@P_DoJump:

; 1661 : 
; 1662 : 	if (player->climbing)

  0006e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00071	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00078	0f 84 04 01 00
	00		 je	 $LN6@P_DoJump

; 1663 : 	{
; 1664 : 		// Jump this high.
; 1665 : 		if (player->powers[pw_super])

  0007e	b8 04 00 00 00	 mov	 eax, 4
  00083	6b c8 0f	 imul	 ecx, eax, 15
  00086	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00089	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0008e	74 0e		 je	 SHORT $LN8@P_DoJump

; 1666 : 			player->mo->momz = 5*FRACUNIT;

  00090	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	c7 41 50 00 00
	05 00		 mov	 DWORD PTR [ecx+80], 327680 ; 00050000H
  0009c	eb 2a		 jmp	 SHORT $LN11@P_DoJump
$LN8@P_DoJump:

; 1667 : 		else if (player->mo->eflags & MFE_UNDERWATER)

  0009e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000a9	83 e2 08	 and	 edx, 8
  000ac	74 0e		 je	 SHORT $LN10@P_DoJump

; 1668 : 			player->mo->momz = 2*FRACUNIT;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b3	c7 41 50 00 00
	02 00		 mov	 DWORD PTR [ecx+80], 131072 ; 00020000H
  000ba	eb 0c		 jmp	 SHORT $LN11@P_DoJump
$LN10@P_DoJump:

; 1669 : 		else
; 1670 : 			player->mo->momz = 15*(FRACUNIT/4);

  000bc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c1	c7 41 50 00 c0
	03 00		 mov	 DWORD PTR [ecx+80], 245760 ; 0003c000H
$LN11@P_DoJump:

; 1671 : 
; 1672 : 		player->mo->angle = player->mo->angle - ANGLE_180; // Turn around from the wall you were climbing.

  000c8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000d0	81 ea 00 00 00
	80		 sub	 edx, -2147483648	; 80000000H
  000d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 1673 : 
; 1674 : 		if (player == &players[consoleplayer])

  000de	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  000e8	05 00 00 00 00	 add	 eax, OFFSET _players
  000ed	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  000f0	75 10		 jne	 SHORT $LN12@P_DoJump

; 1675 : 			localangle = player->mo->angle; // Adjust the local control angle.

  000f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000fa	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  00100	eb 2b		 jmp	 SHORT $LN14@P_DoJump
$LN12@P_DoJump:

; 1676 : 		else if (splitscreen && player == &players[secondarydisplayplayer])

  00102	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00109	74 22		 je	 SHORT $LN14@P_DoJump
  0010b	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00115	05 00 00 00 00	 add	 eax, OFFSET _players
  0011a	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0011d	75 0e		 jne	 SHORT $LN14@P_DoJump

; 1677 : 			localangle2 = player->mo->angle;

  0011f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00122	8b 08		 mov	 ecx, DWORD PTR [eax]
  00124	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00127	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN14@P_DoJump:

; 1678 : 
; 1679 : 		player->climbing = 0; // Stop climbing, duh!

  0012d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00130	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 1680 : 		P_InstaThrust(player->mo, player->mo->angle, FIXEDSCALE(6*FRACUNIT, player->mo->scale)); // Jump off the wall.

  0013a	68 00 00 06 00	 push	 393216			; 00060000H
  0013f	68 00 00 64 00	 push	 6553600			; 00640000H
  00144	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00147	8b 08		 mov	 ecx, DWORD PTR [eax]
  00149	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00150	c1 e2 10	 shl	 edx, 16			; 00000010H
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 _FixedDiv
  00159	83 c4 08	 add	 esp, 8
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _FixedMul
  00162	83 c4 08	 add	 esp, 8
  00165	50		 push	 eax
  00166	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00169	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0016e	52		 push	 edx
  0016f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	51		 push	 ecx
  00175	e8 00 00 00 00	 call	 _P_InstaThrust
  0017a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1681 : 	}

  0017d	e9 91 02 00 00	 jmp	 $LN15@P_DoJump
$LN6@P_DoJump:

; 1682 : 	else if (!(player->pflags & PF_JUMPED)) // Spin Attack

  00182	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00185	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0018b	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00191	0f 85 7c 02 00
	00		 jne	 $LN15@P_DoJump

; 1683 : 	{
; 1684 : 		if (player->mo->ceilingz-player->mo->floorz <= player->mo->height-1)

  00197	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0019f	8b 02		 mov	 eax, DWORD PTR [edx]
  001a1	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  001a4	2b 48 38	 sub	 ecx, DWORD PTR [eax+56]
  001a7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001aa	8b 02		 mov	 eax, DWORD PTR [edx]
  001ac	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  001af	83 ea 01	 sub	 edx, 1
  001b2	3b ca		 cmp	 ecx, edx
  001b4	7f 05		 jg	 SHORT $LN16@P_DoJump

; 1685 : 			return;

  001b6	e9 09 04 00 00	 jmp	 $LN51@P_DoJump
$LN16@P_DoJump:

; 1686 : 
; 1687 : 		// Jump this high.
; 1688 : 		if (player->pflags & PF_CARRIED)

  001bb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001be	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001c4	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  001ca	74 29		 je	 SHORT $LN17@P_DoJump

; 1689 : 		{
; 1690 : 			player->mo->momz = 9*FRACUNIT;

  001cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d1	c7 41 50 00 00
	09 00		 mov	 DWORD PTR [ecx+80], 589824 ; 00090000H

; 1691 : 			player->pflags &= ~PF_CARRIED;

  001d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001db	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001e1	81 e1 ff ff fd
	ff		 and	 ecx, -131073		; fffdffffH
  001e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001ea	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1692 : 		}

  001f0	e9 b1 01 00 00	 jmp	 $LN34@P_DoJump
$LN17@P_DoJump:

; 1693 : 		else if (player->pflags & PF_ITEMHANG)

  001f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001fe	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  00204	74 29		 je	 SHORT $LN19@P_DoJump

; 1694 : 		{
; 1695 : 			player->mo->momz = 9*FRACUNIT;

  00206	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00209	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020b	c7 41 50 00 00
	09 00		 mov	 DWORD PTR [ecx+80], 589824 ; 00090000H

; 1696 : 			player->pflags &= ~PF_ITEMHANG;

  00212	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00215	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0021b	81 e1 ff ff f7
	ff		 and	 ecx, -524289		; fff7ffffH
  00221	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00224	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1697 : 		}

  0022a	e9 77 01 00 00	 jmp	 $LN34@P_DoJump
$LN19@P_DoJump:

; 1698 : 		else if (player->pflags & PF_ROPEHANG)

  0022f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00232	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00238	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  0023e	74 3f		 je	 SHORT $LN21@P_DoJump

; 1699 : 		{
; 1700 : 			player->mo->momz = 12*FRACUNIT;

  00240	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00243	8b 08		 mov	 ecx, DWORD PTR [eax]
  00245	c7 41 50 00 00
	0c 00		 mov	 DWORD PTR [ecx+80], 786432 ; 000c0000H

; 1701 : 			player->pflags &= ~PF_ROPEHANG;

  0024c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0024f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00255	81 e1 ff ff ff
	df		 and	 ecx, -536870913		; dfffffffH
  0025b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0025e	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1702 : 			P_SetTarget(&player->mo->tracer, NULL);

  00264	6a 00		 push	 0
  00266	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026b	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 _P_SetTarget
  00277	83 c4 08	 add	 esp, 8

; 1703 : 		}

  0027a	e9 27 01 00 00	 jmp	 $LN34@P_DoJump
$LN21@P_DoJump:

; 1704 : 		else if (maptol & TOL_NIGHTS)

  0027f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00286	83 e0 40	 and	 eax, 64			; 00000040H
  00289	74 11		 je	 SHORT $LN23@P_DoJump

; 1705 : 			player->mo->momz = 24*FRACUNIT;

  0028b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0028e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00290	c7 41 50 00 00
	18 00		 mov	 DWORD PTR [ecx+80], 1572864 ; 00180000H
  00297	e9 0a 01 00 00	 jmp	 $LN34@P_DoJump
$LN23@P_DoJump:

; 1706 : 		else if (player->powers[pw_super])

  0029c	b8 04 00 00 00	 mov	 eax, 4
  002a1	6b c8 0f	 imul	 ecx, eax, 15
  002a4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002a7	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  002ac	74 7c		 je	 SHORT $LN25@P_DoJump

; 1707 : 		{
; 1708 : 			if (player->charability == CA_FLOAT)

  002ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002b1	83 b8 d8 00 00
	00 04		 cmp	 DWORD PTR [eax+216], 4
  002b8	75 0e		 jne	 SHORT $LN27@P_DoJump

; 1709 : 				player->mo->momz = 28*FRACUNIT; //Obscene jump height anyone?

  002ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  002bf	c7 41 50 00 00
	1c 00		 mov	 DWORD PTR [ecx+80], 1835008 ; 001c0000H
  002c6	eb 26		 jmp	 SHORT $LN30@P_DoJump
$LN27@P_DoJump:

; 1710 : 			else if (player->charability == CA_SLOWFALL)

  002c8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002cb	83 b8 d8 00 00
	00 05		 cmp	 DWORD PTR [eax+216], 5
  002d2	75 0e		 jne	 SHORT $LN29@P_DoJump

; 1711 : 				player->mo->momz = 37*(FRACUNIT/2); //Less obscene because during super, floating propells oneself upward.

  002d4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d9	c7 41 50 00 80
	12 00		 mov	 DWORD PTR [ecx+80], 1212416 ; 00128000H
  002e0	eb 0c		 jmp	 SHORT $LN30@P_DoJump
$LN29@P_DoJump:

; 1712 : 			else // Default super jump momentum.
; 1713 : 				player->mo->momz = 13*FRACUNIT;

  002e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e7	c7 41 50 00 00
	0d 00		 mov	 DWORD PTR [ecx+80], 851968 ; 000d0000H
$LN30@P_DoJump:

; 1714 : 
; 1715 : 			// Add a boost for super characters with float/slowfall and multiability.
; 1716 : 			if (player->charability2 == CA2_MULTIABILITY &&

  002ee	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002f1	83 b8 dc 00 00
	00 01		 cmp	 DWORD PTR [eax+220], 1
  002f8	75 2e		 jne	 SHORT $LN31@P_DoJump
  002fa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002fd	83 b8 d8 00 00
	00 04		 cmp	 DWORD PTR [eax+216], 4
  00304	74 0c		 je	 SHORT $LN32@P_DoJump
  00306	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00309	83 b8 d8 00 00
	00 05		 cmp	 DWORD PTR [eax+216], 5
  00310	75 16		 jne	 SHORT $LN31@P_DoJump
$LN32@P_DoJump:

; 1717 : 				(player->charability == CA_FLOAT || player->charability == CA_SLOWFALL))
; 1718 : 				player->mo->momz += 2*FRACUNIT;

  00312	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00315	8b 08		 mov	 ecx, DWORD PTR [eax]
  00317	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0031a	81 c2 00 00 02
	00		 add	 edx, 131072		; 00020000H
  00320	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00323	8b 08		 mov	 ecx, DWORD PTR [eax]
  00325	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN31@P_DoJump:

; 1719 : 		}

  00328	eb 7c		 jmp	 SHORT $LN34@P_DoJump
$LN25@P_DoJump:

; 1720 : 		else if (player->charability2 == CA2_MULTIABILITY &&

  0032a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032d	83 b8 dc 00 00
	00 01		 cmp	 DWORD PTR [eax+220], 1
  00334	75 64		 jne	 SHORT $LN33@P_DoJump
  00336	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00339	83 b8 d8 00 00
	00 03		 cmp	 DWORD PTR [eax+216], 3
  00340	74 18		 je	 SHORT $LN35@P_DoJump
  00342	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00345	83 b8 d8 00 00
	00 04		 cmp	 DWORD PTR [eax+216], 4
  0034c	74 0c		 je	 SHORT $LN35@P_DoJump
  0034e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00351	83 b8 d8 00 00
	00 05		 cmp	 DWORD PTR [eax+216], 5
  00358	75 40		 jne	 SHORT $LN33@P_DoJump
$LN35@P_DoJump:

; 1721 : 			(player->charability == CA_DOUBLEJUMP || player->charability == CA_FLOAT || player->charability == CA_SLOWFALL))
; 1722 : 		{
; 1723 : 			// Multiability exceptions, since some abilities cannot effectively use it and need a boost.
; 1724 : 			if (player->charability == CA_DOUBLEJUMP)

  0035a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0035d	83 b8 d8 00 00
	00 03		 cmp	 DWORD PTR [eax+216], 3
  00364	75 0e		 jne	 SHORT $LN36@P_DoJump

; 1725 : 				player->mo->momz = 23*(FRACUNIT/2); // Increased jump height instead of infinite jumps.

  00366	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00369	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036b	c7 41 50 00 80
	0b 00		 mov	 DWORD PTR [ecx+80], 753664 ; 000b8000H
  00372	eb 24		 jmp	 SHORT $LN38@P_DoJump
$LN36@P_DoJump:

; 1726 : 			else if (player->charability == CA_FLOAT || player->charability == CA_SLOWFALL)

  00374	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00377	83 b8 d8 00 00
	00 04		 cmp	 DWORD PTR [eax+216], 4
  0037e	74 0c		 je	 SHORT $LN39@P_DoJump
  00380	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00383	83 b8 d8 00 00
	00 05		 cmp	 DWORD PTR [eax+216], 5
  0038a	75 0c		 jne	 SHORT $LN38@P_DoJump
$LN39@P_DoJump:

; 1727 : 				player->mo->momz = 12*FRACUNIT; // Increased jump height due to ineffective repeat.

  0038c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0038f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00391	c7 41 50 00 00
	0c 00		 mov	 DWORD PTR [ecx+80], 786432 ; 000c0000H
$LN38@P_DoJump:

; 1728 : 		}

  00398	eb 0c		 jmp	 SHORT $LN34@P_DoJump
$LN33@P_DoJump:

; 1729 : 		else
; 1730 : 			player->mo->momz = 39*(FRACUNIT/4); // Default jump momentum.

  0039a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0039d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039f	c7 41 50 00 c0
	09 00		 mov	 DWORD PTR [ecx+80], 638976 ; 0009c000H
$LN34@P_DoJump:

; 1731 : 
; 1732 : 		// Reduce player momz by 58.5% when underwater.
; 1733 : 		if (player->mo->eflags & MFE_UNDERWATER)

  003a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ab	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  003b1	83 e2 08	 and	 edx, 8
  003b4	74 2c		 je	 SHORT $LN40@P_DoJump

; 1734 : 		{
; 1735 : 			player->mo->momz = FixedMul(player->mo->momz, FixedDiv(117*FRACUNIT, 200*FRACUNIT));

  003b6	68 00 00 c8 00	 push	 13107200		; 00c80000H
  003bb	68 00 00 75 00	 push	 7667712			; 00750000H
  003c0	e8 00 00 00 00	 call	 _FixedDiv
  003c5	83 c4 08	 add	 esp, 8
  003c8	50		 push	 eax
  003c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ce	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  003d1	52		 push	 edx
  003d2	e8 00 00 00 00	 call	 _FixedMul
  003d7	83 c4 08	 add	 esp, 8
  003da	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  003dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003df	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN40@P_DoJump:

; 1736 : 		}
; 1737 : 
; 1738 : 		// Quicksand bitshift reduction.
; 1739 : 		if (P_InQuicksand(player->mo))

  003e2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e7	51		 push	 ecx
  003e8	e8 00 00 00 00	 call	 _P_InQuicksand
  003ed	83 c4 04	 add	 esp, 4
  003f0	85 c0		 test	 eax, eax
  003f2	74 12		 je	 SHORT $LN41@P_DoJump

; 1740 : 			player->mo->momz = player->mo->momz>>1;

  003f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f9	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  003fc	d1 fa		 sar	 edx, 1
  003fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00401	8b 08		 mov	 ecx, DWORD PTR [eax]
  00403	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN41@P_DoJump:

; 1741 : 
; 1742 : 		player->jumping = 1;

  00406	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00409	c7 80 10 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+272], 1
$LN15@P_DoJump:

; 1743 : 	}
; 1744 : 
; 1745 : 	factor = player->jumpfactor;

  00413	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00416	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  0041c	89 4d fc	 mov	 DWORD PTR _factor$[ebp], ecx

; 1746 : 
; 1747 : 	if (twodlevel || (player->mo->flags2 & MF2_TWOD))

  0041f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00426	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0042b	75 13		 jne	 SHORT $LN43@P_DoJump
  0042d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00430	8b 08		 mov	 ecx, DWORD PTR [eax]
  00432	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00438	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  0043e	74 17		 je	 SHORT $LN42@P_DoJump
$LN43@P_DoJump:

; 1748 : 		factor += player->jumpfactor / 10;

  00440	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00443	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [eax+248]
  00449	99		 cdq
  0044a	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0044f	f7 f9		 idiv	 ecx
  00451	03 45 fc	 add	 eax, DWORD PTR _factor$[ebp]
  00454	89 45 fc	 mov	 DWORD PTR _factor$[ebp], eax
$LN42@P_DoJump:

; 1749 : 
; 1750 : 	P_SetObjectMomZ(player->mo, FixedDiv(factor*player->mo->momz,100*FRACUNIT), false); // Custom height

  00457	6a 00		 push	 0
  00459	68 00 00 64 00	 push	 6553600			; 00640000H
  0045e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00461	8b 08		 mov	 ecx, DWORD PTR [eax]
  00463	8b 55 fc	 mov	 edx, DWORD PTR _factor$[ebp]
  00466	0f af 51 50	 imul	 edx, DWORD PTR [ecx+80]
  0046a	52		 push	 edx
  0046b	e8 00 00 00 00	 call	 _FixedDiv
  00470	83 c4 08	 add	 esp, 8
  00473	50		 push	 eax
  00474	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00477	8b 08		 mov	 ecx, DWORD PTR [eax]
  00479	51		 push	 ecx
  0047a	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0047f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1751 : 
; 1752 : 	// set just an eensy above the ground
; 1753 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  00482	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00485	8b 08		 mov	 ecx, DWORD PTR [eax]
  00487	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0048d	83 e2 20	 and	 edx, 32			; 00000020H
  00490	74 41		 je	 SHORT $LN44@P_DoJump

; 1754 : 	{
; 1755 : 		player->mo->z = player->mo->z + (P_GetPlayerHeight(player) - P_GetPlayerSpinHeight(player));

  00492	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00495	8b 30		 mov	 esi, DWORD PTR [eax]
  00497	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0049a	51		 push	 ecx
  0049b	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  004a0	83 c4 04	 add	 esp, 4
  004a3	8b f8		 mov	 edi, eax
  004a5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004a8	52		 push	 edx
  004a9	e8 00 00 00 00	 call	 _P_GetPlayerSpinHeight
  004ae	83 c4 04	 add	 esp, 4
  004b1	2b f8		 sub	 edi, eax
  004b3	03 7e 18	 add	 edi, DWORD PTR [esi+24]
  004b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  004bb	89 79 18	 mov	 DWORD PTR [ecx+24], edi

; 1756 : 		player->mo->z--;

  004be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004c3	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004c6	83 ea 01	 sub	 edx, 1
  004c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ce	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 1757 : 	}

  004d1	eb 13		 jmp	 SHORT $LN45@P_DoJump
$LN44@P_DoJump:

; 1758 : 	else
; 1759 : 		player->mo->z++;

  004d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004db	83 c2 01	 add	 edx, 1
  004de	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e3	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN45@P_DoJump:

; 1760 : 
; 1761 : 	player->mo->z += player->mo->pmomz; // Solves problem of 'hitting around again after jumping on a moving platform'.

  004e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  004eb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004ee	8b 02		 mov	 eax, DWORD PTR [edx]
  004f0	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  004f3	03 48 54	 add	 ecx, DWORD PTR [eax+84]
  004f6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004f9	8b 02		 mov	 eax, DWORD PTR [edx]
  004fb	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1762 : 
; 1763 : 	if (!(player->pflags & PF_SPINNING))

  004fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00501	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00507	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0050d	75 0c		 jne	 SHORT $LN46@P_DoJump

; 1764 : 		P_ResetScore(player);

  0050f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00512	50		 push	 eax
  00513	e8 00 00 00 00	 call	 _P_ResetScore
  00518	83 c4 04	 add	 esp, 4
$LN46@P_DoJump:

; 1765 : 
; 1766 : 	if (player->pflags & PF_MINECART)

  0051b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0051e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00524	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  0052a	74 2e		 je	 SHORT $LN47@P_DoJump

; 1767 : 	{
; 1768 : 		player->pflags &= ~PF_MINECART;

  0052c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0052f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00535	81 e1 ff ff ff
	bf		 and	 ecx, -1073741825	; bfffffffH
  0053b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0053e	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1769 : 		P_SetTarget(&player->mo->tracer, NULL);

  00544	6a 00		 push	 0
  00546	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00549	8b 08		 mov	 ecx, DWORD PTR [eax]
  0054b	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00551	51		 push	 ecx
  00552	e8 00 00 00 00	 call	 _P_SetTarget
  00557	83 c4 08	 add	 esp, 8
$LN47@P_DoJump:

; 1770 : 	}
; 1771 : 
; 1772 : 	player->pflags |= PF_JUMPED;

  0055a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0055d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00563	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00569	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0056c	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1773 : 
; 1774 : 	if (soundandstate)

  00572	83 7d 0c 00	 cmp	 DWORD PTR _soundandstate$[ebp], 0
  00576	74 4c		 je	 SHORT $LN51@P_DoJump

; 1775 : 	{
; 1776 : 		if (!player->spectator)

  00578	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0057b	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00582	85 c9		 test	 ecx, ecx
  00584	75 10		 jne	 SHORT $LN49@P_DoJump

; 1777 : 			S_StartSound(player->mo, sfx_jump); // Play jump sound!

  00586	6a 54		 push	 84			; 00000054H
  00588	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0058b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0058d	51		 push	 ecx
  0058e	e8 00 00 00 00	 call	 _S_StartSound
  00593	83 c4 08	 add	 esp, 8
$LN49@P_DoJump:

; 1778 : 
; 1779 : 		if (!(player->charability2 == CA2_SPINDASH))

  00596	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00599	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  005a0	74 12		 je	 SHORT $LN50@P_DoJump

; 1780 : 			P_SetPlayerMobjState(player->mo, S_PLAY_PLG1);

  005a2	6a 10		 push	 16			; 00000010H
  005a4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  005a9	51		 push	 ecx
  005aa	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  005af	83 c4 08	 add	 esp, 8
  005b2	eb 10		 jmp	 SHORT $LN51@P_DoJump
$LN50@P_DoJump:

; 1781 : 		else
; 1782 : 			P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  005b4	6a 0c		 push	 12			; 0000000cH
  005b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  005bb	51		 push	 ecx
  005bc	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  005c1	83 c4 08	 add	 esp, 8
$LN51@P_DoJump:

; 1783 : 	}
; 1784 : }

  005c4	5f		 pop	 edi
  005c5	5e		 pop	 esi
  005c6	5b		 pop	 ebx
  005c7	8b e5		 mov	 esp, ebp
  005c9	5d		 pop	 ebp
  005ca	c3		 ret	 0
_P_DoJump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_HomingAttack
_TEXT	SEGMENT
_ns$1 = -16						; size = 4
_ns$2 = -12						; size = 4
_ns$3 = -8						; size = 4
_dist$ = -4						; size = 4
_source$ = 8						; size = 4
_enemy$ = 12						; size = 4
_P_HomingAttack PROC					; COMDAT

; 8816 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8817 : 	fixed_t dist;
; 8818 : 
; 8819 : 	if (!enemy)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _enemy$[ebp], 0
  0000d	75 05		 jne	 SHORT $LN2@P_HomingAt

; 8820 : 		return;

  0000f	e9 f1 03 00 00	 jmp	 $LN15@P_HomingAt
$LN2@P_HomingAt:

; 8821 : 
; 8822 : 	if (!(enemy->health))

  00014	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  00017	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0001e	75 05		 jne	 SHORT $LN3@P_HomingAt

; 8823 : 		return;

  00020	e9 e0 03 00 00	 jmp	 $LN15@P_HomingAt
$LN3@P_HomingAt:

; 8824 : 
; 8825 : 	// change angle
; 8826 : 	source->angle = R_PointToAngle2(source->x, source->y, enemy->x, enemy->y);

  00025	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  00028	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002b	51		 push	 ecx
  0002c	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  0002f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00036	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00039	52		 push	 edx
  0003a	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0003d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _R_PointToAngle2
  00046	83 c4 10	 add	 esp, 16			; 00000010H
  00049	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0004c	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 8827 : 	if (source->player)

  0004f	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00052	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00059	74 57		 je	 SHORT $LN7@P_HomingAt

; 8828 : 	{
; 8829 : 		if (source->player == &players[consoleplayer])

  0005b	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00065	05 00 00 00 00	 add	 eax, OFFSET _players
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0006d	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  00073	75 0e		 jne	 SHORT $LN5@P_HomingAt

; 8830 : 			localangle = source->angle;

  00075	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00078	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0007b	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle, ecx
  00081	eb 2f		 jmp	 SHORT $LN7@P_HomingAt
$LN5@P_HomingAt:

; 8831 : 		else if (splitscreen && source->player == &players[secondarydisplayplayer])

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0008a	74 26		 je	 SHORT $LN7@P_HomingAt
  0008c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00096	05 00 00 00 00	 add	 eax, OFFSET _players
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0009e	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  000a4	75 0c		 jne	 SHORT $LN7@P_HomingAt

; 8832 : 			localangle2 = source->angle;

  000a6	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000a9	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000ac	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle2, ecx
$LN7@P_HomingAt:

; 8833 : 	}
; 8834 : 
; 8835 : 	// change slope
; 8836 : 	dist = P_AproxDistance(P_AproxDistance(enemy->x - source->x, enemy->y - source->y),

  000b2	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000b8	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000bb	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  000be	52		 push	 edx
  000bf	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000c5	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000c8	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  000cb	52		 push	 edx
  000cc	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  000cf	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000d2	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000d5	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  000d8	52		 push	 edx
  000d9	e8 00 00 00 00	 call	 _P_AproxDistance
  000de	83 c4 08	 add	 esp, 8
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 _P_AproxDistance
  000e7	83 c4 08	 add	 esp, 8
  000ea	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 8837 : 		enemy->z - source->z);
; 8838 : 
; 8839 : 	if (dist < 1)

  000ed	83 7d fc 01	 cmp	 DWORD PTR _dist$[ebp], 1
  000f1	7d 07		 jge	 SHORT $LN8@P_HomingAt

; 8840 : 		dist = 1;

  000f3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN8@P_HomingAt:

; 8841 : 
; 8842 : 	if (source->type == MT_DETON && enemy->player) // For Deton Chase

  000fa	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000fd	83 78 7c 09	 cmp	 DWORD PTR [eax+124], 9
  00101	0f 85 ca 00 00
	00		 jne	 $LN9@P_HomingAt
  00107	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  0010a	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00111	0f 84 ba 00 00
	00		 je	 $LN9@P_HomingAt

; 8843 : 	{
; 8844 : 		fixed_t ns = FixedDiv(enemy->player->normalspeed*FRACUNIT, FixedDiv(20*FRACUNIT,17*FRACUNIT));

  00117	68 00 00 11 00	 push	 1114112			; 00110000H
  0011c	68 00 00 14 00	 push	 1310720			; 00140000H
  00121	e8 00 00 00 00	 call	 _FixedDiv
  00126	83 c4 08	 add	 esp, 8
  00129	50		 push	 eax
  0012a	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  0012d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00133	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  00139	c1 e2 10	 shl	 edx, 16			; 00000010H
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 _FixedDiv
  00142	83 c4 08	 add	 esp, 8
  00145	89 45 f8	 mov	 DWORD PTR _ns$3[ebp], eax

; 8845 : 		source->momx = FixedMul(FixedDiv(enemy->x - source->x, dist), ns);

  00148	8b 45 f8	 mov	 eax, DWORD PTR _ns$3[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  0014f	51		 push	 ecx
  00150	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  00153	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00156	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00159	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  0015c	51		 push	 ecx
  0015d	e8 00 00 00 00	 call	 _FixedDiv
  00162	83 c4 08	 add	 esp, 8
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _FixedMul
  0016b	83 c4 08	 add	 esp, 8
  0016e	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00171	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 8846 : 		source->momy = FixedMul(FixedDiv(enemy->y - source->y, dist), ns);

  00174	8b 45 f8	 mov	 eax, DWORD PTR _ns$3[ebp]
  00177	50		 push	 eax
  00178	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  0017b	51		 push	 ecx
  0017c	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  0017f	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00182	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00185	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 _FixedDiv
  0018e	83 c4 08	 add	 esp, 8
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _FixedMul
  00197	83 c4 08	 add	 esp, 8
  0019a	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0019d	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 8847 : 		source->momz = FixedMul(FixedDiv(enemy->z - source->z, dist), ns);

  001a0	8b 45 f8	 mov	 eax, DWORD PTR _ns$3[ebp]
  001a3	50		 push	 eax
  001a4	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  001a7	51		 push	 ecx
  001a8	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  001ab	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  001ae	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  001b1	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 _FixedDiv
  001ba	83 c4 08	 add	 esp, 8
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 _FixedMul
  001c3	83 c4 08	 add	 esp, 8
  001c6	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  001c9	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 8848 : 	}

  001cc	e9 34 02 00 00	 jmp	 $LN15@P_HomingAt
$LN9@P_HomingAt:

; 8849 : 	else if (source->type != MT_PLAYER)

  001d1	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  001d4	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  001d8	0f 84 54 01 00
	00		 je	 $LN11@P_HomingAt

; 8850 : 	{
; 8851 : 		if (source->threshold == 32000)

  001de	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  001e1	81 b8 a0 00 00
	00 00 7d 00 00	 cmp	 DWORD PTR [eax+160], 32000 ; 00007d00H
  001eb	0f 85 9d 00 00
	00		 jne	 $LN13@P_HomingAt

; 8852 : 		{
; 8853 : 			fixed_t ns = source->info->speed/2;

  001f1	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  001f4	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001fa	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  001fd	99		 cdq
  001fe	2b c2		 sub	 eax, edx
  00200	d1 f8		 sar	 eax, 1
  00202	89 45 f4	 mov	 DWORD PTR _ns$2[ebp], eax

; 8854 : 			source->momx = FixedMul(FixedDiv(enemy->x - source->x, dist), ns);

  00205	8b 45 f4	 mov	 eax, DWORD PTR _ns$2[ebp]
  00208	50		 push	 eax
  00209	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  0020c	51		 push	 ecx
  0020d	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  00210	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00213	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00216	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00219	51		 push	 ecx
  0021a	e8 00 00 00 00	 call	 _FixedDiv
  0021f	83 c4 08	 add	 esp, 8
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 _FixedMul
  00228	83 c4 08	 add	 esp, 8
  0022b	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0022e	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 8855 : 			source->momy = FixedMul(FixedDiv(enemy->y - source->y, dist), ns);

  00231	8b 45 f4	 mov	 eax, DWORD PTR _ns$2[ebp]
  00234	50		 push	 eax
  00235	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  00238	51		 push	 ecx
  00239	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  0023c	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0023f	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00242	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00245	51		 push	 ecx
  00246	e8 00 00 00 00	 call	 _FixedDiv
  0024b	83 c4 08	 add	 esp, 8
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 _FixedMul
  00254	83 c4 08	 add	 esp, 8
  00257	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0025a	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 8856 : 			source->momz = FixedMul(FixedDiv(enemy->z - source->z, dist), ns);

  0025d	8b 45 f4	 mov	 eax, DWORD PTR _ns$2[ebp]
  00260	50		 push	 eax
  00261	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  00264	51		 push	 ecx
  00265	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  00268	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0026b	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0026e	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 _FixedDiv
  00277	83 c4 08	 add	 esp, 8
  0027a	50		 push	 eax
  0027b	e8 00 00 00 00	 call	 _FixedMul
  00280	83 c4 08	 add	 esp, 8
  00283	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00286	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 8857 : 		}

  00289	e9 9f 00 00 00	 jmp	 $LN14@P_HomingAt
$LN13@P_HomingAt:

; 8858 : 		else
; 8859 : 		{
; 8860 : 			source->momx = FixedMul(FixedDiv(enemy->x - source->x, dist), source->info->speed);

  0028e	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00291	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00297	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0029a	52		 push	 edx
  0029b	8b 45 fc	 mov	 eax, DWORD PTR _dist$[ebp]
  0029e	50		 push	 eax
  0029f	8b 4d 0c	 mov	 ecx, DWORD PTR _enemy$[ebp]
  002a2	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  002a5	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  002a8	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 _FixedDiv
  002b1	83 c4 08	 add	 esp, 8
  002b4	50		 push	 eax
  002b5	e8 00 00 00 00	 call	 _FixedMul
  002ba	83 c4 08	 add	 esp, 8
  002bd	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  002c0	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 8861 : 			source->momy = FixedMul(FixedDiv(enemy->y - source->y, dist), source->info->speed);

  002c3	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  002c6	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002cc	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  002cf	52		 push	 edx
  002d0	8b 45 fc	 mov	 eax, DWORD PTR _dist$[ebp]
  002d3	50		 push	 eax
  002d4	8b 4d 0c	 mov	 ecx, DWORD PTR _enemy$[ebp]
  002d7	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  002da	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  002dd	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  002e0	50		 push	 eax
  002e1	e8 00 00 00 00	 call	 _FixedDiv
  002e6	83 c4 08	 add	 esp, 8
  002e9	50		 push	 eax
  002ea	e8 00 00 00 00	 call	 _FixedMul
  002ef	83 c4 08	 add	 esp, 8
  002f2	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  002f5	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 8862 : 			source->momz = FixedMul(FixedDiv(enemy->z - source->z, dist), source->info->speed);

  002f8	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  002fb	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00301	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00304	52		 push	 edx
  00305	8b 45 fc	 mov	 eax, DWORD PTR _dist$[ebp]
  00308	50		 push	 eax
  00309	8b 4d 0c	 mov	 ecx, DWORD PTR _enemy$[ebp]
  0030c	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0030f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00312	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 _FixedDiv
  0031b	83 c4 08	 add	 esp, 8
  0031e	50		 push	 eax
  0031f	e8 00 00 00 00	 call	 _FixedMul
  00324	83 c4 08	 add	 esp, 8
  00327	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0032a	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN14@P_HomingAt:

; 8863 : 		}
; 8864 : 	}

  0032d	e9 d3 00 00 00	 jmp	 $LN15@P_HomingAt
$LN11@P_HomingAt:

; 8865 : 	else if (source->player)

  00332	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00335	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0033c	0f 84 c3 00 00
	00		 je	 $LN15@P_HomingAt

; 8866 : 	{
; 8867 : 		const fixed_t ns = source->player->actionspd * FRACUNIT;

  00342	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00345	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0034b	8b 91 ec 00 00
	00		 mov	 edx, DWORD PTR [ecx+236]
  00351	c1 e2 10	 shl	 edx, 16			; 00000010H
  00354	89 55 f0	 mov	 DWORD PTR _ns$1[ebp], edx

; 8868 : 		source->momx = FixedMul(FixedDiv(enemy->x - source->x, dist), FixedDiv(ns,3*FRACUNIT/2));

  00357	68 00 80 01 00	 push	 98304			; 00018000H
  0035c	8b 45 f0	 mov	 eax, DWORD PTR _ns$1[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 _FixedDiv
  00365	83 c4 08	 add	 esp, 8
  00368	50		 push	 eax
  00369	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  0036c	51		 push	 ecx
  0036d	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  00370	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00373	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00376	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00379	51		 push	 ecx
  0037a	e8 00 00 00 00	 call	 _FixedDiv
  0037f	83 c4 08	 add	 esp, 8
  00382	50		 push	 eax
  00383	e8 00 00 00 00	 call	 _FixedMul
  00388	83 c4 08	 add	 esp, 8
  0038b	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0038e	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 8869 : 		source->momy = FixedMul(FixedDiv(enemy->y - source->y, dist), FixedDiv(ns,3*FRACUNIT/2));

  00391	68 00 80 01 00	 push	 98304			; 00018000H
  00396	8b 45 f0	 mov	 eax, DWORD PTR _ns$1[ebp]
  00399	50		 push	 eax
  0039a	e8 00 00 00 00	 call	 _FixedDiv
  0039f	83 c4 08	 add	 esp, 8
  003a2	50		 push	 eax
  003a3	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  003a6	51		 push	 ecx
  003a7	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  003aa	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  003ad	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  003b0	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  003b3	51		 push	 ecx
  003b4	e8 00 00 00 00	 call	 _FixedDiv
  003b9	83 c4 08	 add	 esp, 8
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 _FixedMul
  003c2	83 c4 08	 add	 esp, 8
  003c5	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  003c8	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 8870 : 		source->momz = FixedMul(FixedDiv(enemy->z - source->z, dist), FixedDiv(ns,3*FRACUNIT/2));

  003cb	68 00 80 01 00	 push	 98304			; 00018000H
  003d0	8b 45 f0	 mov	 eax, DWORD PTR _ns$1[ebp]
  003d3	50		 push	 eax
  003d4	e8 00 00 00 00	 call	 _FixedDiv
  003d9	83 c4 08	 add	 esp, 8
  003dc	50		 push	 eax
  003dd	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  003e0	51		 push	 ecx
  003e1	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  003e4	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  003e7	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  003ea	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  003ed	51		 push	 ecx
  003ee	e8 00 00 00 00	 call	 _FixedDiv
  003f3	83 c4 08	 add	 esp, 8
  003f6	50		 push	 eax
  003f7	e8 00 00 00 00	 call	 _FixedMul
  003fc	83 c4 08	 add	 esp, 8
  003ff	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00402	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN15@P_HomingAt:

; 8871 : 	}
; 8872 : }

  00405	5f		 pop	 edi
  00406	5e		 pop	 esi
  00407	5b		 pop	 ebx
  00408	8b e5		 mov	 esp, ebp
  0040a	5d		 pop	 ebp
  0040b	c3		 ret	 0
_P_HomingAttack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_NukeEnemies
_TEXT	SEGMENT
_i$ = -24						; size = 4
_think$ = -20						; size = 4
_fa$ = -16						; size = 4
_mo$ = -12						; size = 4
_ns$ = -8						; size = 4
_dist$ = -4						; size = 4
_player$ = 8						; size = 4
_P_NukeEnemies PROC					; COMDAT

; 8696 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8697 : 	const fixed_t dist = 1536 << FRACBITS;

  00009	c7 45 fc 00 00
	00 06		 mov	 DWORD PTR _dist$[ebp], 100663296 ; 06000000H

; 8698 : 	const fixed_t ns = 60 << FRACBITS;

  00010	c7 45 f8 00 00
	3c 00		 mov	 DWORD PTR _ns$[ebp], 3932160 ; 003c0000H

; 8699 : 	mobj_t *mo;
; 8700 : 	angle_t fa;
; 8701 : 	thinker_t *think;
; 8702 : 	INT32 i;
; 8703 : 
; 8704 : 	for (i = 0; i < 16; i++)

  00017	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@P_NukeEnem
$LN2@P_NukeEnem:
  00020	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_NukeEnem:
  00029	83 7d e8 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0002d	7d 75		 jge	 SHORT $LN3@P_NukeEnem

; 8705 : 	{
; 8706 : 		fa = (i*(FINEANGLES/16));

  0002f	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00032	c1 e0 09	 shl	 eax, 9
  00035	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 8707 : 		mo = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z, MT_SUPERSPARK);

  00038	68 a4 00 00 00	 push	 164			; 000000a4H
  0003d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00045	52		 push	 edx
  00046	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0004e	52		 push	 edx
  0004f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _P_SpawnMobj
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	89 45 f4	 mov	 DWORD PTR _mo$[ebp], eax

; 8708 : 		mo->momx = FixedMul(FINESINE(fa),ns)/NEWTICRATERATIO;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ns$[ebp]
  00066	50		 push	 eax
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  0006a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 _FixedMul
  00077	83 c4 08	 add	 esp, 8
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR _mo$[ebp]
  0007d	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 8709 : 		mo->momy = FixedMul(FINECOSINE(fa),ns)/NEWTICRATERATIO;

  00080	8b 45 f8	 mov	 eax, DWORD PTR _ns$[ebp]
  00083	50		 push	 eax
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0008d	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _FixedMul
  00096	83 c4 08	 add	 esp, 8
  00099	8b 4d f4	 mov	 ecx, DWORD PTR _mo$[ebp]
  0009c	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 8710 : 	}

  0009f	e9 7c ff ff ff	 jmp	 $LN2@P_NukeEnem
$LN3@P_NukeEnem:

; 8711 : 
; 8712 : 	for (think = thinkercap.next; think != &thinkercap; think = think->next)

  000a4	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  000a9	89 45 ec	 mov	 DWORD PTR _think$[ebp], eax
  000ac	eb 09		 jmp	 SHORT $LN7@P_NukeEnem
$LN5@P_NukeEnem:
  000ae	8b 45 ec	 mov	 eax, DWORD PTR _think$[ebp]
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	89 4d ec	 mov	 DWORD PTR _think$[ebp], ecx
$LN7@P_NukeEnem:
  000b7	81 7d ec 00 00
	00 00		 cmp	 DWORD PTR _think$[ebp], OFFSET _thinkercap
  000be	0f 84 f0 00 00
	00		 je	 $LN6@P_NukeEnem

; 8713 : 	{
; 8714 : 		if (think->function.acp1 != (actionf_p1)P_MobjThinker)

  000c4	8b 45 ec	 mov	 eax, DWORD PTR _think$[ebp]
  000c7	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  000ce	74 02		 je	 SHORT $LN8@P_NukeEnem

; 8715 : 			continue; // not a mobj thinker

  000d0	eb dc		 jmp	 SHORT $LN5@P_NukeEnem
$LN8@P_NukeEnem:

; 8716 : 
; 8717 : 		mo = (mobj_t *)think;

  000d2	8b 45 ec	 mov	 eax, DWORD PTR _think$[ebp]
  000d5	89 45 f4	 mov	 DWORD PTR _mo$[ebp], eax

; 8718 : 
; 8719 : 		if (!(mo->flags & MF_SHOOTABLE))

  000d8	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  000db	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000de	83 e1 04	 and	 ecx, 4
  000e1	75 02		 jne	 SHORT $LN9@P_NukeEnem

; 8720 : 			continue;

  000e3	eb c9		 jmp	 SHORT $LN5@P_NukeEnem
$LN9@P_NukeEnem:

; 8721 : 
; 8722 : 		if (mo->flags & MF_MONITOR)

  000e5	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  000e8	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000eb	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  000f1	74 02		 je	 SHORT $LN10@P_NukeEnem

; 8723 : 			continue; // Monitors cannot be 'nuked'.

  000f3	eb b9		 jmp	 SHORT $LN5@P_NukeEnem
$LN10@P_NukeEnem:

; 8724 : 
; 8725 : 		if ((gametype == GT_COOP || gametype == GT_RACE) && mo->type == MT_PLAYER)

  000f5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000fc	85 c0		 test	 eax, eax
  000fe	74 0c		 je	 SHORT $LN12@P_NukeEnem
  00100	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00107	83 f8 02	 cmp	 eax, 2
  0010a	75 0b		 jne	 SHORT $LN11@P_NukeEnem
$LN12@P_NukeEnem:
  0010c	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  0010f	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00113	75 02		 jne	 SHORT $LN11@P_NukeEnem

; 8726 : 			continue; // Don't hurt players in Co-Op!

  00115	eb 97		 jmp	 SHORT $LN5@P_NukeEnem
$LN11@P_NukeEnem:

; 8727 : 
; 8728 : 		if (P_AproxDistance(P_AproxDistance(player->mo->x - mo->x, player->mo->y - mo->y), player->mo->z - mo->z) > dist)

  00117	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	8b 55 f4	 mov	 edx, DWORD PTR _mo$[ebp]
  0011f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00122	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00125	50		 push	 eax
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00129	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012b	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  0012e	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00131	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00134	51		 push	 ecx
  00135	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00138	8b 02		 mov	 eax, DWORD PTR [edx]
  0013a	8b 4d f4	 mov	 ecx, DWORD PTR _mo$[ebp]
  0013d	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00140	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 _P_AproxDistance
  00149	83 c4 08	 add	 esp, 8
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _P_AproxDistance
  00152	83 c4 08	 add	 esp, 8
  00155	3b 45 fc	 cmp	 eax, DWORD PTR _dist$[ebp]
  00158	7e 05		 jle	 SHORT $LN13@P_NukeEnem

; 8729 : 			continue;

  0015a	e9 4f ff ff ff	 jmp	 $LN5@P_NukeEnem
$LN13@P_NukeEnem:

; 8730 : 
; 8731 : 		if (mo->flags & MF_BOSS || mo->type == MT_PLAYER) //don't OHKO bosses nor players!

  0015f	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  00162	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00165	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0016b	75 09		 jne	 SHORT $LN16@P_NukeEnem
  0016d	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  00170	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00174	75 1c		 jne	 SHORT $LN14@P_NukeEnem
$LN16@P_NukeEnem:

; 8732 : 			P_DamageMobj(mo, player->mo, player->mo, 1);

  00176	6a 01		 push	 1
  00178	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0017b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017d	51		 push	 ecx
  0017e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00181	8b 02		 mov	 eax, DWORD PTR [edx]
  00183	50		 push	 eax
  00184	8b 4d f4	 mov	 ecx, DWORD PTR _mo$[ebp]
  00187	51		 push	 ecx
  00188	e8 00 00 00 00	 call	 _P_DamageMobj
  0018d	83 c4 10	 add	 esp, 16			; 00000010H
  00190	eb 1d		 jmp	 SHORT $LN15@P_NukeEnem
$LN14@P_NukeEnem:

; 8733 : 		else
; 8734 : 			P_DamageMobj(mo, player->mo, player->mo, 1000);

  00192	68 e8 03 00 00	 push	 1000			; 000003e8H
  00197	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019c	51		 push	 ecx
  0019d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001a0	8b 02		 mov	 eax, DWORD PTR [edx]
  001a2	50		 push	 eax
  001a3	8b 4d f4	 mov	 ecx, DWORD PTR _mo$[ebp]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 _P_DamageMobj
  001ac	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@P_NukeEnem:

; 8735 : 	}

  001af	e9 fa fe ff ff	 jmp	 $LN5@P_NukeEnem
$LN6@P_NukeEnem:

; 8736 : }

  001b4	5f		 pop	 edi
  001b5	5e		 pop	 esi
  001b6	5b		 pop	 ebx
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c3		 ret	 0
_P_NukeEnemies ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_LookForEnemies
_TEXT	SEGMENT
_an$ = -16						; size = 4
_closestmo$ = -12					; size = 4
_think$ = -8						; size = 4
_mo$ = -4						; size = 4
_player$ = 8						; size = 4
_P_LookForEnemies PROC					; COMDAT

; 8744 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8745 : 	mobj_t *mo;
; 8746 : 	thinker_t *think;
; 8747 : 	mobj_t *closestmo = NULL;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _closestmo$[ebp], 0

; 8748 : 	angle_t an;
; 8749 : 
; 8750 : 	for (think = thinkercap.next; think != &thinkercap; think = think->next)

  00010	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00015	89 45 f8	 mov	 DWORD PTR _think$[ebp], eax
  00018	eb 09		 jmp	 SHORT $LN4@P_LookForE
$LN2@P_LookForE:
  0001a	8b 45 f8	 mov	 eax, DWORD PTR _think$[ebp]
  0001d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00020	89 4d f8	 mov	 DWORD PTR _think$[ebp], ecx
$LN4@P_LookForE:
  00023	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _think$[ebp], OFFSET _thinkercap
  0002a	0f 84 59 02 00
	00		 je	 $LN3@P_LookForE

; 8751 : 	{
; 8752 : 		if (think->function.acp1 != (actionf_p1)P_MobjThinker)

  00030	8b 45 f8	 mov	 eax, DWORD PTR _think$[ebp]
  00033	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0003a	74 02		 je	 SHORT $LN5@P_LookForE

; 8753 : 			continue; // not a mobj thinker

  0003c	eb dc		 jmp	 SHORT $LN2@P_LookForE
$LN5@P_LookForE:

; 8754 : 
; 8755 : 		mo = (mobj_t *)think;

  0003e	8b 45 f8	 mov	 eax, DWORD PTR _think$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _mo$[ebp], eax

; 8756 : 		if (!(mo->flags & MF_ENEMY || mo->flags & MF_BOSS || mo->flags & MF_MONITOR

  00044	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00047	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0004a	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00050	75 2c		 jne	 SHORT $LN6@P_LookForE
  00052	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00055	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00058	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0005e	75 1e		 jne	 SHORT $LN6@P_LookForE
  00060	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00063	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00066	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  0006c	75 10		 jne	 SHORT $LN6@P_LookForE
  0006e	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00071	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00074	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  0007a	75 02		 jne	 SHORT $LN6@P_LookForE

; 8757 : 			|| mo->flags & MF_SPRING))
; 8758 : 		{
; 8759 : 			continue; // not a valid enemy

  0007c	eb 9c		 jmp	 SHORT $LN2@P_LookForE
$LN6@P_LookForE:

; 8760 : 		}
; 8761 : 
; 8762 : 		if (mo->health <= 0) // dead

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00081	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00088	7f 02		 jg	 SHORT $LN7@P_LookForE

; 8763 : 			continue;

  0008a	eb 8e		 jmp	 SHORT $LN2@P_LookForE
$LN7@P_LookForE:

; 8764 : 
; 8765 : 		if (mo == player->mo)

  0008c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _mo$[ebp]
  00092	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00094	75 02		 jne	 SHORT $LN8@P_LookForE

; 8766 : 			continue;

  00096	eb 82		 jmp	 SHORT $LN2@P_LookForE
$LN8@P_LookForE:

; 8767 : 
; 8768 : 		if (mo->flags2 & MF2_FRET)

  00098	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  0009b	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000a1	83 e1 10	 and	 ecx, 16			; 00000010H
  000a4	74 05		 je	 SHORT $LN9@P_LookForE

; 8769 : 			continue;

  000a6	e9 6f ff ff ff	 jmp	 $LN2@P_LookForE
$LN9@P_LookForE:

; 8770 : 
; 8771 : 		if (mo->type == MT_DETON) // Don't be STUPID, Sonic!

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  000ae	83 78 7c 09	 cmp	 DWORD PTR [eax+124], 9
  000b2	75 05		 jne	 SHORT $LN10@P_LookForE

; 8772 : 			continue;

  000b4	e9 61 ff ff ff	 jmp	 $LN2@P_LookForE
$LN10@P_LookForE:

; 8773 : 
; 8774 : 		if (mo->flags & MF_MONITOR && mo->state == &states[S_MONITOREXPLOSION5])

  000b9	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  000bc	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000bf	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  000c5	74 1e		 je	 SHORT $LN11@P_LookForE
  000c7	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  000cc	69 c8 d8 02 00
	00		 imul	 ecx, eax, 728
  000d2	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  000db	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  000de	75 05		 jne	 SHORT $LN11@P_LookForE

; 8775 : 			continue;

  000e0	e9 35 ff ff ff	 jmp	 $LN2@P_LookForE
$LN11@P_LookForE:

; 8776 : 
; 8777 : 		if (mo->z > player->mo->z+MAXSTEPMOVE)

  000e5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ea	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000ed	81 c2 00 00 18
	00		 add	 edx, 1572864		; 00180000H
  000f3	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  000f6	39 50 18	 cmp	 DWORD PTR [eax+24], edx
  000f9	7e 05		 jle	 SHORT $LN12@P_LookForE

; 8778 : 			continue; // Don't home upwards!

  000fb	e9 1a ff ff ff	 jmp	 $LN2@P_LookForE
$LN12@P_LookForE:

; 8779 : 
; 8780 : 		if (P_AproxDistance(P_AproxDistance(player->mo->x-mo->x, player->mo->y-mo->y),
; 8781 : 			player->mo->z-mo->z) > RING_DIST)

  00100	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00103	8b 08		 mov	 ecx, DWORD PTR [eax]
  00105	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  00108	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0010b	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  0010e	50		 push	 eax
  0010f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00112	8b 11		 mov	 edx, DWORD PTR [ecx]
  00114	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00117	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0011a	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0011d	51		 push	 ecx
  0011e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00121	8b 02		 mov	 eax, DWORD PTR [edx]
  00123	8b 4d fc	 mov	 ecx, DWORD PTR _mo$[ebp]
  00126	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00129	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0012c	52		 push	 edx
  0012d	e8 00 00 00 00	 call	 _P_AproxDistance
  00132	83 c4 08	 add	 esp, 8
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _P_AproxDistance
  0013b	83 c4 08	 add	 esp, 8
  0013e	3d 00 00 00 02	 cmp	 eax, 33554432		; 02000000H
  00143	7e 05		 jle	 SHORT $LN13@P_LookForE

; 8782 : 			continue; // out of range

  00145	e9 d0 fe ff ff	 jmp	 $LN2@P_LookForE
$LN13@P_LookForE:

; 8783 : 
; 8784 : 		if (mo->type == MT_PLAYER) // Don't chase after other players!

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  0014d	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00151	75 05		 jne	 SHORT $LN14@P_LookForE

; 8785 : 			continue;

  00153	e9 c2 fe ff ff	 jmp	 $LN2@P_LookForE
$LN14@P_LookForE:

; 8786 : 
; 8787 : 		if (closestmo && P_AproxDistance(P_AproxDistance(player->mo->x-mo->x, player->mo->y-mo->y),

  00158	83 7d f4 00	 cmp	 DWORD PTR _closestmo$[ebp], 0
  0015c	0f 84 87 00 00
	00		 je	 $LN15@P_LookForE
  00162	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00165	8b 08		 mov	 ecx, DWORD PTR [eax]
  00167	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  0016a	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0016d	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00170	50		 push	 eax
  00171	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00174	8b 11		 mov	 edx, DWORD PTR [ecx]
  00176	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00179	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0017c	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0017f	51		 push	 ecx
  00180	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00183	8b 02		 mov	 eax, DWORD PTR [edx]
  00185	8b 4d fc	 mov	 ecx, DWORD PTR _mo$[ebp]
  00188	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0018b	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0018e	52		 push	 edx
  0018f	e8 00 00 00 00	 call	 _P_AproxDistance
  00194	83 c4 08	 add	 esp, 8
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _P_AproxDistance
  0019d	83 c4 08	 add	 esp, 8
  001a0	8b f0		 mov	 esi, eax
  001a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a7	8b 55 f4	 mov	 edx, DWORD PTR _closestmo$[ebp]
  001aa	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  001ad	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  001b0	50		 push	 eax
  001b1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b6	8b 45 f4	 mov	 eax, DWORD PTR _closestmo$[ebp]
  001b9	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  001bc	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  001bf	51		 push	 ecx
  001c0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001c3	8b 02		 mov	 eax, DWORD PTR [edx]
  001c5	8b 4d f4	 mov	 ecx, DWORD PTR _closestmo$[ebp]
  001c8	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  001cb	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  001ce	52		 push	 edx
  001cf	e8 00 00 00 00	 call	 _P_AproxDistance
  001d4	83 c4 08	 add	 esp, 8
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 _P_AproxDistance
  001dd	83 c4 08	 add	 esp, 8
  001e0	3b f0		 cmp	 esi, eax
  001e2	7e 05		 jle	 SHORT $LN15@P_LookForE

; 8788 : 			player->mo->z-mo->z) > P_AproxDistance(P_AproxDistance(player->mo->x-closestmo->x,
; 8789 : 			player->mo->y-closestmo->y), player->mo->z-closestmo->z))
; 8790 : 			continue;

  001e4	e9 31 fe ff ff	 jmp	 $LN2@P_LookForE
$LN15@P_LookForE:

; 8791 : 
; 8792 : 		an = R_PointToAngle2(player->mo->x, player->mo->y, mo->x, mo->y) - player->mo->angle;

  001e9	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  001ec	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001ef	51		 push	 ecx
  001f0	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  001f3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001f6	50		 push	 eax
  001f7	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001fa	8b 11		 mov	 edx, DWORD PTR [ecx]
  001fc	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001ff	50		 push	 eax
  00200	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00203	8b 11		 mov	 edx, DWORD PTR [ecx]
  00205	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 _R_PointToAngle2
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00214	8b 11		 mov	 edx, DWORD PTR [ecx]
  00216	2b 42 24	 sub	 eax, DWORD PTR [edx+36]
  00219	89 45 f0	 mov	 DWORD PTR _an$[ebp], eax

; 8793 : 
; 8794 : 		if (an > ANGLE_90 && an < ANGLE_270)

  0021c	81 7d f0 00 00
	00 40		 cmp	 DWORD PTR _an$[ebp], 1073741824 ; 40000000H
  00223	76 0e		 jbe	 SHORT $LN16@P_LookForE
  00225	81 7d f0 00 00
	00 c0		 cmp	 DWORD PTR _an$[ebp], -1073741824 ; c0000000H
  0022c	73 05		 jae	 SHORT $LN16@P_LookForE

; 8795 : 			continue; // behind back

  0022e	e9 e7 fd ff ff	 jmp	 $LN2@P_LookForE
$LN16@P_LookForE:

; 8796 : 
; 8797 : 		player->mo->angle = R_PointToAngle2(player->mo->x, player->mo->y, mo->x, mo->y);

  00233	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00236	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00239	51		 push	 ecx
  0023a	8b 55 fc	 mov	 edx, DWORD PTR _mo$[ebp]
  0023d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00240	50		 push	 eax
  00241	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00244	8b 11		 mov	 edx, DWORD PTR [ecx]
  00246	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00249	50		 push	 eax
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0024d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00252	50		 push	 eax
  00253	e8 00 00 00 00	 call	 _R_PointToAngle2
  00258	83 c4 10	 add	 esp, 16			; 00000010H
  0025b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0025e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00260	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 8798 : 
; 8799 : 		if (!P_CheckSight(player->mo, mo))

  00263	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00266	50		 push	 eax
  00267	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0026a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0026c	52		 push	 edx
  0026d	e8 00 00 00 00	 call	 _P_CheckSight
  00272	83 c4 08	 add	 esp, 8
  00275	85 c0		 test	 eax, eax
  00277	75 05		 jne	 SHORT $LN17@P_LookForE

; 8800 : 			continue; // out of sight

  00279	e9 9c fd ff ff	 jmp	 $LN2@P_LookForE
$LN17@P_LookForE:

; 8801 : 
; 8802 : 		closestmo = mo;

  0027e	8b 45 fc	 mov	 eax, DWORD PTR _mo$[ebp]
  00281	89 45 f4	 mov	 DWORD PTR _closestmo$[ebp], eax

; 8803 : 	}

  00284	e9 91 fd ff ff	 jmp	 $LN2@P_LookForE
$LN3@P_LookForE:

; 8804 : 
; 8805 : 	if (closestmo)

  00289	83 7d f4 00	 cmp	 DWORD PTR _closestmo$[ebp], 0
  0028d	74 34		 je	 SHORT $LN18@P_LookForE

; 8806 : 	{
; 8807 : 		// Found a target monster
; 8808 : 		P_SetTarget(&player->mo->target, P_SetTarget(&player->mo->tracer, closestmo));

  0028f	8b 45 f4	 mov	 eax, DWORD PTR _closestmo$[ebp]
  00292	50		 push	 eax
  00293	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00296	8b 11		 mov	 edx, DWORD PTR [ecx]
  00298	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  0029e	52		 push	 edx
  0029f	e8 00 00 00 00	 call	 _P_SetTarget
  002a4	83 c4 08	 add	 esp, 8
  002a7	50		 push	 eax
  002a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ad	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  002b3	51		 push	 ecx
  002b4	e8 00 00 00 00	 call	 _P_SetTarget
  002b9	83 c4 08	 add	 esp, 8

; 8809 : 		return true;

  002bc	b8 01 00 00 00	 mov	 eax, 1
  002c1	eb 02		 jmp	 SHORT $LN1@P_LookForE
$LN18@P_LookForE:

; 8810 : 	}
; 8811 : 
; 8812 : 	return false;

  002c3	33 c0		 xor	 eax, eax
$LN1@P_LookForE:

; 8813 : }

  002c5	5f		 pop	 edi
  002c6	5e		 pop	 esi
  002c7	5b		 pop	 ebx
  002c8	8b e5		 mov	 esp, ebp
  002ca	5d		 pop	 ebp
  002cb	c3		 ret	 0
_P_LookForEnemies ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_InstaThrustEvenIn2D
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_angle$ = 12						; size = 4
_move$ = 16						; size = 4
_P_InstaThrustEvenIn2D PROC				; COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	angle >>= ANGLETOFINESHIFT;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 0c	 mov	 DWORD PTR _angle$[ebp], eax

; 145  : 
; 146  : 	mo->momx = FixedMul(move, FINECOSINE(angle));

  00012	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0001b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001e	52		 push	 edx
  0001f	8b 45 10	 mov	 eax, DWORD PTR _move$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _FixedMul
  00028	83 c4 08	 add	 esp, 8
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0002e	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 147  : 	mo->momy = FixedMul(move, FINESINE(angle));

  00031	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  00034	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0003b	51		 push	 ecx
  0003c	8b 55 10	 mov	 edx, DWORD PTR _move$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _FixedMul
  00045	83 c4 08	 add	 esp, 8
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0004b	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 148  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_P_InstaThrustEvenIn2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_ReturnThrustY
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_angle$ = 12						; size = 4
_move$ = 16						; size = 4
_P_ReturnThrustY PROC					; COMDAT

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 159  : 	(void)mo;
; 160  : 	angle >>= ANGLETOFINESHIFT;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 0c	 mov	 DWORD PTR _angle$[ebp], eax

; 161  : 	return FixedMul(move, FINESINE(angle));

  00012	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  00015	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0001c	51		 push	 ecx
  0001d	8b 55 10	 mov	 edx, DWORD PTR _move$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 _FixedMul
  00026	83 c4 08	 add	 esp, 8

; 162  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_P_ReturnThrustY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_ReturnThrustX
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_angle$ = 12						; size = 4
_move$ = 16						; size = 4
_P_ReturnThrustX PROC					; COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 153  : 	(void)mo;
; 154  : 	angle >>= ANGLETOFINESHIFT;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 0c	 mov	 DWORD PTR _angle$[ebp], eax

; 155  : 	return FixedMul(move, FINECOSINE(angle));

  00012	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0001b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001e	52		 push	 edx
  0001f	8b 45 10	 mov	 eax, DWORD PTR _move$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _FixedMul
  00028	83 c4 08	 add	 esp, 8

; 156  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_P_ReturnThrustX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_InstaThrust
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_angle$ = 12						; size = 4
_move$ = 16						; size = 4
_P_InstaThrust PROC					; COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 134  : 	angle >>= ANGLETOFINESHIFT;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 0c	 mov	 DWORD PTR _angle$[ebp], eax

; 135  : 
; 136  : 	mo->momx = FixedMul(move, FINECOSINE(angle));

  00012	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0001b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001e	52		 push	 edx
  0001f	8b 45 10	 mov	 eax, DWORD PTR _move$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _FixedMul
  00028	83 c4 08	 add	 esp, 8
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0002e	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 137  : 
; 138  : 	if (!(twodlevel || (mo->flags2 & MF2_TWOD)))

  00031	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00038	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0003d	75 2e		 jne	 SHORT $LN2@P_InstaThr
  0003f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00042	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00048	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0004e	75 1d		 jne	 SHORT $LN2@P_InstaThr

; 139  : 		mo->momy = FixedMul(move,FINESINE(angle));

  00050	8b 45 0c	 mov	 eax, DWORD PTR _angle$[ebp]
  00053	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0005a	51		 push	 ecx
  0005b	8b 55 10	 mov	 edx, DWORD PTR _move$[ebp]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 _FixedMul
  00064	83 c4 08	 add	 esp, 8
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0006a	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN2@P_InstaThr:

; 140  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_P_InstaThrust ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_NightserizePlayer
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_oldmare$ = -4						; size = 4
_player$ = 8						; size = 4
_nighttime$ = 12					; size = 4
_P_NightserizePlayer PROC				; COMDAT

; 689  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 690  : 	INT32 oldmare;
; 691  : 
; 692  : 	player->pflags &= ~PF_USEDOWN;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00012	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00015	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00018	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 693  : 	player->pflags &= ~PF_JUMPDOWN;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00021	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00027	83 e1 f7	 and	 ecx, -9			; fffffff7H
  0002a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0002d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 694  : 	player->pflags &= ~PF_ATTACKDOWN;

  00033	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00036	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0003c	83 e1 fd	 and	 ecx, -3			; fffffffdH
  0003f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00042	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 695  : 	player->pflags &= ~PF_WALKINGANIM;

  00048	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0004b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00051	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00057	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0005a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 696  : 	player->pflags &= ~PF_RUNNINGANIM;

  00060	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00063	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00069	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  0006f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00072	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 697  : 	player->pflags &= ~PF_SPINNINGANIM;

  00078	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00081	81 e1 ff f7 ff
	ff		 and	 ecx, -2049		; fffff7ffH
  00087	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0008a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 698  : 	player->pflags &= ~PF_STARTDASH;

  00090	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00093	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00099	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  0009f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000a2	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 699  : 	player->pflags &= ~PF_GLIDING;

  000a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ab	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000b1	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  000b7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ba	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 700  : 	player->pflags &= ~PF_JUMPED;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000c9	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  000cf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000d2	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 701  : 	player->pflags &= ~PF_THOKKED;

  000d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000db	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000e1	81 e1 ff 7f ff
	ff		 and	 ecx, -32769		; ffff7fffH
  000e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ea	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 702  : 	player->pflags &= ~PF_SPINNING;

  000f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000f9	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  000ff	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00102	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 703  : 	player->pflags &= ~PF_DRILLING;

  00108	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0010b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00111	81 e1 ff ff ff
	fe		 and	 ecx, -16777217		; feffffffH
  00117	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0011a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 704  : 	player->homing = 0;

  00120	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00123	c6 80 38 01 00
	00 00		 mov	 BYTE PTR [eax+312], 0

; 705  : 	player->mo->fuse = 0;

  0012a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0012d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012f	c7 81 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+188], 0

; 706  : 	player->speed = 0;

  00139	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0013c	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+268], 0

; 707  : 	player->climbing = 0;

  00146	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00149	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 708  : 	player->secondjump = 0;

  00153	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00156	c6 80 14 01 00
	00 00		 mov	 BYTE PTR [eax+276], 0

; 709  : 	player->dbginfo = 0;

  0015d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00160	c7 80 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+360], 0

; 710  : 
; 711  : 	player->powers[pw_jumpshield] = 0;

  0016a	b8 04 00 00 00	 mov	 eax, 4
  0016f	6b c8 03	 imul	 ecx, eax, 3
  00172	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00175	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 712  : 	player->powers[pw_forceshield] = 0;

  0017d	b8 04 00 00 00	 mov	 eax, 4
  00182	c1 e0 02	 shl	 eax, 2
  00185	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00188	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 713  : 	player->powers[pw_watershield] = 0;

  00190	b8 04 00 00 00	 mov	 eax, 4
  00195	6b c8 0b	 imul	 ecx, eax, 11
  00198	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0019b	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 714  : 	player->powers[pw_bombshield] = 0;

  001a3	b8 04 00 00 00	 mov	 eax, 4
  001a8	6b c8 0a	 imul	 ecx, eax, 10
  001ab	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001ae	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 715  : 	player->powers[pw_ringshield] = 0;

  001b6	b8 04 00 00 00	 mov	 eax, 4
  001bb	6b c8 09	 imul	 ecx, eax, 9
  001be	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001c1	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 716  : 
; 717  : 	player->mo->flags |= MF_NOGRAVITY;

  001c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ce	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  001d1	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  001d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001da	8b 08		 mov	 ecx, DWORD PTR [eax]
  001dc	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 718  : 
; 719  : 	player->mo->flags2 |= MF2_DONTDRAW;

  001df	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e4	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  001ea	81 ca 00 00 40
	00		 or	 edx, 4194304		; 00400000H
  001f0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f5	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 720  : 
; 721  : 	if (splitscreen && player == &players[secondarydisplayplayer])

  001fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00202	74 28		 je	 SHORT $LN5@P_Nightser
  00204	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0020e	05 00 00 00 00	 add	 eax, OFFSET _players
  00213	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00216	75 14		 jne	 SHORT $LN5@P_Nightser

; 722  : 		CV_SetValue(&cv_cam2_dist, 320);

  00218	68 40 01 00 00	 push	 320			; 00000140H
  0021d	68 00 00 00 00	 push	 OFFSET _cv_cam2_dist
  00222	e8 00 00 00 00	 call	 _CV_SetValue
  00227	83 c4 08	 add	 esp, 8
  0022a	eb 26		 jmp	 SHORT $LN7@P_Nightser
$LN5@P_Nightser:

; 723  : 	else if (player == &players[displayplayer])

  0022c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00236	05 00 00 00 00	 add	 eax, OFFSET _players
  0023b	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0023e	75 12		 jne	 SHORT $LN7@P_Nightser

; 724  : 		CV_SetValue(&cv_cam_dist, 320);

  00240	68 40 01 00 00	 push	 320			; 00000140H
  00245	68 00 00 00 00	 push	 OFFSET _cv_cam_dist
  0024a	e8 00 00 00 00	 call	 _CV_SetValue
  0024f	83 c4 08	 add	 esp, 8
$LN7@P_Nightser:

; 725  : 
; 726  : 	player->nightstime = nighttime;

  00252	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00255	8b 4d 0c	 mov	 ecx, DWORD PTR _nighttime$[ebp]
  00258	89 88 c4 01 00
	00		 mov	 DWORD PTR [eax+452], ecx

; 727  : 	player->bonustime = false;

  0025e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00261	c6 80 cd 01 00
	00 00		 mov	 BYTE PTR [eax+461], 0

; 728  : 
; 729  : 	P_SetMobjState(player->mo->tracer, S_SUPERTRANS1);

  00268	68 50 06 00 00	 push	 1616			; 00000650H
  0026d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00270	8b 08		 mov	 ecx, DWORD PTR [eax]
  00272	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00278	52		 push	 edx
  00279	e8 00 00 00 00	 call	 _P_SetMobjState
  0027e	83 c4 08	 add	 esp, 8

; 730  : 
; 731  : 	if (gametype == GT_RACE)

  00281	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00288	83 f8 02	 cmp	 eax, 2
  0028b	75 1e		 jne	 SHORT $LN8@P_Nightser

; 732  : 	{
; 733  : 		if (player->drillmeter < 48*20)

  0028d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00290	81 b8 c8 01 00
	00 c0 03 00 00	 cmp	 DWORD PTR [eax+456], 960 ; 000003c0H
  0029a	7d 0d		 jge	 SHORT $LN10@P_Nightser

; 734  : 			player->drillmeter = 48*20;

  0029c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0029f	c7 80 c8 01 00
	00 c0 03 00 00	 mov	 DWORD PTR [eax+456], 960 ; 000003c0H
$LN10@P_Nightser:

; 735  : 	}

  002a9	eb 1c		 jmp	 SHORT $LN11@P_Nightser
$LN8@P_Nightser:

; 736  : 	else
; 737  : 	{
; 738  : 		if (player->drillmeter < 40*20)

  002ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ae	81 b8 c8 01 00
	00 20 03 00 00	 cmp	 DWORD PTR [eax+456], 800 ; 00000320H
  002b8	7d 0d		 jge	 SHORT $LN11@P_Nightser

; 739  : 			player->drillmeter = 40*20;

  002ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002bd	c7 80 c8 01 00
	00 20 03 00 00	 mov	 DWORD PTR [eax+456], 800 ; 00000320H
$LN11@P_Nightser:

; 740  : 	}
; 741  : 
; 742  : 	oldmare = player->mare;

  002c7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ca	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+468]
  002d1	89 4d fc	 mov	 DWORD PTR _oldmare$[ebp], ecx

; 743  : 
; 744  : 	if (P_TransferToNextMare(player) == false)

  002d4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 _P_TransferToNextMare
  002dd	83 c4 04	 add	 esp, 4
  002e0	85 c0		 test	 eax, eax
  002e2	75 45		 jne	 SHORT $LN3@P_Nightser

; 745  : 	{
; 746  : 		INT32 i;
; 747  : 
; 748  : 		P_SetTarget(&player->mo->target, NULL);

  002e4	6a 00		 push	 0
  002e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002eb	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  002f1	51		 push	 ecx
  002f2	e8 00 00 00 00	 call	 _P_SetTarget
  002f7	83 c4 08	 add	 esp, 8

; 749  : 
; 750  : 		for (i = 0; i < MAXPLAYERS; i++)

  002fa	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00301	eb 09		 jmp	 SHORT $LN4@P_Nightser
$LN2@P_Nightser:
  00303	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00306	83 c0 01	 add	 eax, 1
  00309	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@P_Nightser:
  0030c	83 7d f8 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  00310	7d 17		 jge	 SHORT $LN3@P_Nightser

; 751  : 			P_DoPlayerExit(&players[i]);

  00312	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  00319	05 00 00 00 00	 add	 eax, OFFSET _players
  0031e	50		 push	 eax
  0031f	e8 00 00 00 00	 call	 _P_DoPlayerExit
  00324	83 c4 04	 add	 esp, 4
  00327	eb da		 jmp	 SHORT $LN2@P_Nightser
$LN3@P_Nightser:

; 752  : 	}
; 753  : 
; 754  : 	if (oldmare != player->mare)

  00329	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032c	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+468]
  00333	39 4d fc	 cmp	 DWORD PTR _oldmare$[ebp], ecx
  00336	74 19		 je	 SHORT $LN13@P_Nightser

; 755  : 		player->mo->health = player->health = 1;

  00338	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0033b	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1
  00342	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00345	8b 11		 mov	 edx, DWORD PTR [ecx]
  00347	c7 82 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+140], 1
$LN13@P_Nightser:

; 756  : 
; 757  : 	player->pflags |= PF_NIGHTSMODE;

  00351	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00354	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0035a	81 c9 00 00 20
	00		 or	 ecx, 2097152		; 00200000H
  00360	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00363	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 758  : }

  00369	5f		 pop	 edi
  0036a	5e		 pop	 esi
  0036b	5b		 pop	 ebx
  0036c	8b e5		 mov	 esp, ebp
  0036e	5d		 pop	 ebp
  0036f	c3		 ret	 0
_P_NightserizePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoPlayerExit
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_DoPlayerExit PROC					; COMDAT

; 1313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1314 : 	if (player->exiting)

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00013	74 05		 je	 SHORT $LN2@P_DoPlayer

; 1315 : 		return;

  00015	e9 56 01 00 00	 jmp	 $LN11@P_DoPlayer
$LN2@P_DoPlayer:

; 1316 : 
; 1317 : 	if (cv_allowexitlevel.value == 0 && (gametype == GT_MATCH || gametype == GT_TAG

  0001a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowexitlevel+20, 0
  00021	75 2b		 jne	 SHORT $LN3@P_DoPlayer
  00023	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0002a	83 f8 01	 cmp	 eax, 1
  0002d	74 18		 je	 SHORT $LN5@P_DoPlayer
  0002f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00036	83 f8 03	 cmp	 eax, 3
  00039	74 0c		 je	 SHORT $LN5@P_DoPlayer
  0003b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00042	83 f8 04	 cmp	 eax, 4
  00045	75 07		 jne	 SHORT $LN3@P_DoPlayer
$LN5@P_DoPlayer:

; 1318 : 		|| gametype == GT_CTF
; 1319 : #ifdef CHAOSISNOTDEADYET
; 1320 : 		|| gametype == GT_CHAOS
; 1321 : #endif
; 1322 : 		))
; 1323 : 	{
; 1324 : 		return;

  00047	e9 24 01 00 00	 jmp	 $LN11@P_DoPlayer

; 1325 : 	}

  0004c	eb 73		 jmp	 SHORT $LN7@P_DoPlayer
$LN3@P_DoPlayer:

; 1326 : 	else if (gametype == GT_RACE) // If in Race Mode, allow

  0004e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00055	83 f8 02	 cmp	 eax, 2
  00058	75 5a		 jne	 SHORT $LN6@P_DoPlayer

; 1327 : 	{
; 1328 : 
; 1329 : 		if (!countdown) // a 60-second wait ala Sonic 2.

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _countdown, 0
  00061	75 0f		 jne	 SHORT $LN8@P_DoPlayer

; 1330 : 			countdown = cv_countdowntime.value*TICRATE + 1; // Use cv_countdowntime

  00063	6b 05 14 00 00
	00 23		 imul	 eax, DWORD PTR _cv_countdowntime+20, 35
  0006a	83 c0 01	 add	 eax, 1
  0006d	a3 00 00 00 00	 mov	 DWORD PTR _countdown, eax
$LN8@P_DoPlayer:

; 1331 : 
; 1332 : 		player->exiting = 3*TICRATE;

  00072	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00075	c7 80 30 01 00
	00 69 00 00 00	 mov	 DWORD PTR [eax+304], 105 ; 00000069H

; 1333 : 
; 1334 : 		if (!countdown2)

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _countdown2, 0
  00086	75 14		 jne	 SHORT $LN9@P_DoPlayer

; 1335 : 			countdown2 = (11 + cv_countdowntime.value)*TICRATE + 1; // 11sec more than countdowntime

  00088	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_countdowntime+20
  0008d	83 c0 0b	 add	 eax, 11			; 0000000bH
  00090	6b c8 23	 imul	 ecx, eax, 35
  00093	83 c1 01	 add	 ecx, 1
  00096	89 0d 00 00 00
	00		 mov	 DWORD PTR _countdown2, ecx
$LN9@P_DoPlayer:

; 1336 : 
; 1337 : 		if (P_CheckRacers())

  0009c	e8 00 00 00 00	 call	 _P_CheckRacers
  000a1	85 c0		 test	 eax, eax
  000a3	74 0d		 je	 SHORT $LN10@P_DoPlayer

; 1338 : 			player->exiting = (14*TICRATE)/5 + 1;

  000a5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a8	c7 80 30 01 00
	00 63 00 00 00	 mov	 DWORD PTR [eax+304], 99	; 00000063H
$LN10@P_DoPlayer:

; 1339 : 	}

  000b2	eb 0d		 jmp	 SHORT $LN7@P_DoPlayer
$LN6@P_DoPlayer:

; 1340 : 	else
; 1341 : 		player->exiting = (14*TICRATE)/5 + 2; // Accidental death safeguard???

  000b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b7	c7 80 30 01 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+304], 100 ; 00000064H
$LN7@P_DoPlayer:

; 1342 : 
; 1343 : 	player->pflags &= ~PF_GLIDING;

  000c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000ca	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  000d0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000d3	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1344 : 	player->climbing = 0;

  000d9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000dc	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 1345 : 	player->powers[pw_underwater] = 1; // So music resets

  000e6	b8 04 00 00 00	 mov	 eax, 4
  000eb	6b c8 06	 imul	 ecx, eax, 6
  000ee	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000f1	c7 44 0a 38 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 1

; 1346 : 
; 1347 : 	if (playeringame[player-players] && netgame && (gametype == GT_COOP || gametype == GT_RACE) && !circuitmap)

  000f9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000fc	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00101	99		 cdq
  00102	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00107	f7 f9		 idiv	 ecx
  00109	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00111	74 5d		 je	 SHORT $LN11@P_DoPlayer
  00113	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0011a	74 54		 je	 SHORT $LN11@P_DoPlayer
  0011c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00123	85 c0		 test	 eax, eax
  00125	74 0c		 je	 SHORT $LN12@P_DoPlayer
  00127	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0012e	83 f8 02	 cmp	 eax, 2
  00131	75 3d		 jne	 SHORT $LN11@P_DoPlayer
$LN12@P_DoPlayer:
  00133	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  0013a	75 34		 jne	 SHORT $LN11@P_DoPlayer

; 1348 : 		CONS_Printf(text[FINISHEDLEVEL], player_names[player-players]);

  0013c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0013f	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00144	99		 cdq
  00145	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0014a	f7 f9		 idiv	 ecx
  0014c	6b d0 16	 imul	 edx, eax, 22
  0014f	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00155	52		 push	 edx
  00156	b8 04 00 00 00	 mov	 eax, 4
  0015b	69 c8 32 01 00
	00		 imul	 ecx, eax, 306
  00161	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00167	52		 push	 edx
  00168	e8 00 00 00 00	 call	 _CONS_Printf
  0016d	83 c4 08	 add	 esp, 8
$LN11@P_DoPlayer:

; 1349 : }

  00170	5f		 pop	 edi
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_P_DoPlayerExit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_PlayerAfterThink
_TEXT	SEGMENT
tv253 = -92						; size = 4
_rover$1 = -24						; size = 4
_rover$2 = -20						; size = 4
_sector$3 = -16						; size = 4
_weapon$4 = -12						; size = 4
_oldweapon$ = -8					; size = 4
_cmd$ = -4						; size = 4
_player$ = 8						; size = 4
_P_PlayerAfterThink PROC				; COMDAT

; 10111: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10112: 	ticcmd_t *cmd;
; 10113: 	INT32 oldweapon = player->currentweapon;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000f	89 4d f8	 mov	 DWORD PTR _oldweapon$[ebp], ecx

; 10114: 
; 10115: #ifdef PARANOIA
; 10116: 	if (!player->mo)
; 10117: 	{
; 10118: 		const size_t playeri = (size_t)(player - players);
; 10119: 		I_Error("P_PlayerAfterThink: players[%"PRIdS"].mo == NULL", playeri);
; 10120: 	}
; 10121: #endif
; 10122: 
; 10123: 	cmd = &player->cmd;

  00012	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00015	83 c0 08	 add	 eax, 8
  00018	89 45 fc	 mov	 DWORD PTR _cmd$[ebp], eax

; 10124: 
; 10125: 	if (player->playerstate == PST_DEAD)

  0001b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001e	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00022	0f 85 e2 00 00
	00		 jne	 $LN10@P_PlayerAf

; 10126: 	{
; 10127: 		// camera may still move when guy is dead
; 10128: 		//if (!netgame)
; 10129: 		{
; 10130: 			if (splitscreen && player == &players[secondarydisplayplayer] && camera2.chase)

  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0002f	74 32		 je	 SHORT $LN11@P_PlayerAf
  00031	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0003b	05 00 00 00 00	 add	 eax, OFFSET _players
  00040	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00043	75 1e		 jne	 SHORT $LN11@P_PlayerAf
  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _camera2, 0
  0004c	74 15		 je	 SHORT $LN11@P_PlayerAf

; 10131: 				P_MoveChaseCamera(player, &camera2, false);

  0004e	6a 00		 push	 0
  00050	68 00 00 00 00	 push	 OFFSET _camera2
  00055	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _P_MoveChaseCamera
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	eb 30		 jmp	 SHORT $LN13@P_PlayerAf
$LN11@P_PlayerAf:

; 10132: 			else if (camera.chase && player == &players[displayplayer])

  00063	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _camera, 0
  0006a	74 27		 je	 SHORT $LN13@P_PlayerAf
  0006c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00076	05 00 00 00 00	 add	 eax, OFFSET _players
  0007b	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0007e	75 13		 jne	 SHORT $LN13@P_PlayerAf

; 10133: 				P_MoveChaseCamera(player, &camera, false);

  00080	6a 00		 push	 0
  00082	68 00 00 00 00	 push	 OFFSET _camera
  00087	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _P_MoveChaseCamera
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@P_PlayerAf:

; 10134: 		}
; 10135: 
; 10136: 		// Possible zombie fix?
; 10137: 		// Player is stuck in death frames but isn't being counted as dead?
; 10138: 		if (player->mo->flags & MF_SOLID)

  00093	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0009b	83 e2 02	 and	 edx, 2
  0009e	74 65		 je	 SHORT $LN14@P_PlayerAf

; 10139: 		{
; 10140: 			// Stolen from A_Fall()
; 10141: 			player->mo->flags &= ~MF_SOLID;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a5	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000a8	83 e2 fd	 and	 edx, -3			; fffffffdH
  000ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 10142: 			player->mo->flags |= MF_NOCLIP;

  000b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b8	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000bb	81 ca 00 10 00
	00		 or	 edx, 4096		; 00001000H
  000c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 10143: 			player->mo->flags |= MF_NOGRAVITY;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ce	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000d1	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  000d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000da	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dc	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 10144: 			player->mo->flags |= MF_FLOAT;

  000df	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e4	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000e7	81 ca 00 40 00
	00		 or	 edx, 16384		; 00004000H
  000ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f2	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 10145: 
; 10146: 			P_SetMobjState(player->mo, S_PLAY_DIE1);

  000f5	6a 22		 push	 34			; 00000022H
  000f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fc	51		 push	 ecx
  000fd	e8 00 00 00 00	 call	 _P_SetMobjState
  00102	83 c4 08	 add	 esp, 8
$LN14@P_PlayerAf:

; 10147: 		}
; 10148: 
; 10149: 		return;

  00105	e9 f1 10 00 00	 jmp	 $LN124@P_PlayerAf
$LN10@P_PlayerAf:

; 10150: 	}
; 10151: 
; 10152: 	if (!player->mo)

  0010a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0010d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00110	75 05		 jne	 SHORT $LN15@P_PlayerAf

; 10153: 		return;

  00112	e9 e4 10 00 00	 jmp	 $LN124@P_PlayerAf
$LN15@P_PlayerAf:

; 10154: 
; 10155: 	if (player->pflags & PF_NIGHTSMODE)

  00117	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00120	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00126	74 2c		 je	 SHORT $LN16@P_PlayerAf

; 10156: 	{
; 10157: 		player->powers[pw_gravityboots] = 0;

  00128	b8 04 00 00 00	 mov	 eax, 4
  0012d	c1 e0 04	 shl	 eax, 4
  00130	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00133	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 10158: 		player->mo->eflags &= ~MFE_VERTICALFLIP;

  0013b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0013e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00140	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00146	83 e2 df	 and	 edx, -33		; ffffffdfH
  00149	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx
$LN16@P_PlayerAf:

; 10159: 	}
; 10160: 
; 10161: 	if (!(player->pflags & PF_WPNDOWN))

  00154	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00157	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0015d	83 e1 10	 and	 ecx, 16			; 00000010H
  00160	0f 85 8a 03 00
	00		 jne	 $LN2@P_PlayerAf

; 10162: 	{
; 10163: 		if (cmd->buttons & BT_WEAPONNEXT)

  00166	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00169	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0016d	83 e1 10	 and	 ecx, 16			; 00000010H
  00170	74 38		 je	 SHORT $LN18@P_PlayerAf

; 10164: 		{
; 10165: 			player->currentweapon++;

  00172	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00175	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00178	83 c1 01	 add	 ecx, 1
  0017b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0017e	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 10166: 			player->currentweapon %= NUM_WEAPONS;

  00181	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00184	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00187	99		 cdq
  00188	b9 07 00 00 00	 mov	 ecx, 7
  0018d	f7 f9		 idiv	 ecx
  0018f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00192	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 10167: 			player->pflags |= PF_WPNDOWN;

  00195	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00198	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0019e	83 c9 10	 or	 ecx, 16			; 00000010H
  001a1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001a4	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN18@P_PlayerAf:

; 10168: 		}
; 10169: 
; 10170: 		if (cmd->buttons & BT_WEAPONPREV)

  001aa	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  001ad	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001b1	83 e1 20	 and	 ecx, 32			; 00000020H
  001b4	0f 84 57 01 00
	00		 je	 $LN31@P_PlayerAf

; 10171: 		{
; 10172: 			player->currentweapon--;

  001ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001bd	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001c0	83 e9 01	 sub	 ecx, 1
  001c3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001c6	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 10173: 			if (player->currentweapon < 0)

  001c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001cc	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  001d0	7d 0a		 jge	 SHORT $LN20@P_PlayerAf

; 10174: 				player->currentweapon = WEP_RAIL;

  001d2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d5	c7 40 2c 06 00
	00 00		 mov	 DWORD PTR [eax+44], 6
$LN20@P_PlayerAf:

; 10175: 			player->pflags |= PF_WPNDOWN;

  001dc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001df	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001e5	83 c9 10	 or	 ecx, 16			; 00000010H
  001e8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001eb	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 10176: 
; 10177: 			if (player->currentweapon == WEP_RAIL && (!(player->ringweapons & RW_RAIL) || !player->powers[pw_railring]))

  001f1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f4	83 78 2c 06	 cmp	 DWORD PTR [eax+44], 6
  001f8	75 27		 jne	 SHORT $LN21@P_PlayerAf
  001fa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001fd	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00200	83 e1 02	 and	 ecx, 2
  00203	74 12		 je	 SHORT $LN22@P_PlayerAf
  00205	b8 04 00 00 00	 mov	 eax, 4
  0020a	6b c8 13	 imul	 ecx, eax, 19
  0020d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00210	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00215	75 0a		 jne	 SHORT $LN21@P_PlayerAf
$LN22@P_PlayerAf:

; 10178: 				player->currentweapon = WEP_EXPLODE;

  00217	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0021a	c7 40 2c 05 00
	00 00		 mov	 DWORD PTR [eax+44], 5
$LN21@P_PlayerAf:

; 10179: 			if (player->currentweapon == WEP_EXPLODE && (!(player->ringweapons & RW_EXPLODE) || !player->powers[pw_explosionring]))

  00221	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00224	83 78 2c 05	 cmp	 DWORD PTR [eax+44], 5
  00228	75 27		 jne	 SHORT $LN23@P_PlayerAf
  0022a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0022d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00230	83 e1 08	 and	 ecx, 8
  00233	74 12		 je	 SHORT $LN24@P_PlayerAf
  00235	b8 04 00 00 00	 mov	 eax, 4
  0023a	6b c8 15	 imul	 ecx, eax, 21
  0023d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00240	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00245	75 0a		 jne	 SHORT $LN23@P_PlayerAf
$LN24@P_PlayerAf:

; 10180: 				player->currentweapon = WEP_GRENADE;

  00247	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0024a	c7 40 2c 04 00
	00 00		 mov	 DWORD PTR [eax+44], 4
$LN23@P_PlayerAf:

; 10181: 			if (player->currentweapon == WEP_GRENADE && (!(player->ringweapons & RW_GRENADE) || !player->powers[pw_grenadering]))

  00251	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00254	83 78 2c 04	 cmp	 DWORD PTR [eax+44], 4
  00258	75 27		 jne	 SHORT $LN25@P_PlayerAf
  0025a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0025d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00260	83 e1 20	 and	 ecx, 32			; 00000020H
  00263	74 12		 je	 SHORT $LN26@P_PlayerAf
  00265	b8 04 00 00 00	 mov	 eax, 4
  0026a	6b c8 17	 imul	 ecx, eax, 23
  0026d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00270	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00275	75 0a		 jne	 SHORT $LN25@P_PlayerAf
$LN26@P_PlayerAf:

; 10182: 				player->currentweapon = WEP_SCATTER;

  00277	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0027a	c7 40 2c 03 00
	00 00		 mov	 DWORD PTR [eax+44], 3
$LN25@P_PlayerAf:

; 10183: 			if (player->currentweapon == WEP_SCATTER && (!(player->ringweapons & RW_SCATTER) || !player->powers[pw_scatterring]))

  00281	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00284	83 78 2c 03	 cmp	 DWORD PTR [eax+44], 3
  00288	75 27		 jne	 SHORT $LN27@P_PlayerAf
  0028a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0028d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00290	83 e1 10	 and	 ecx, 16			; 00000010H
  00293	74 12		 je	 SHORT $LN28@P_PlayerAf
  00295	b8 04 00 00 00	 mov	 eax, 4
  0029a	6b c8 16	 imul	 ecx, eax, 22
  0029d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002a0	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  002a5	75 0a		 jne	 SHORT $LN27@P_PlayerAf
$LN28@P_PlayerAf:

; 10184: 				player->currentweapon = WEP_BOUNCE;

  002a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002aa	c7 40 2c 02 00
	00 00		 mov	 DWORD PTR [eax+44], 2
$LN27@P_PlayerAf:

; 10185: 			if (player->currentweapon == WEP_BOUNCE && (!(player->ringweapons & RW_BOUNCE) || !player->powers[pw_bouncering]))

  002b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002b4	83 78 2c 02	 cmp	 DWORD PTR [eax+44], 2
  002b8	75 27		 jne	 SHORT $LN29@P_PlayerAf
  002ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002bd	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  002c0	83 e1 01	 and	 ecx, 1
  002c3	74 12		 je	 SHORT $LN30@P_PlayerAf
  002c5	b8 04 00 00 00	 mov	 eax, 4
  002ca	6b c8 12	 imul	 ecx, eax, 18
  002cd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002d0	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  002d5	75 0a		 jne	 SHORT $LN29@P_PlayerAf
$LN30@P_PlayerAf:

; 10186: 				player->currentweapon = WEP_AUTO;

  002d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002da	c7 40 2c 01 00
	00 00		 mov	 DWORD PTR [eax+44], 1
$LN29@P_PlayerAf:

; 10187: 			if (player->currentweapon == WEP_AUTO && (!(player->ringweapons & RW_AUTO) || !player->powers[pw_automaticring]))

  002e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e4	83 78 2c 01	 cmp	 DWORD PTR [eax+44], 1
  002e8	75 27		 jne	 SHORT $LN31@P_PlayerAf
  002ea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ed	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  002f0	83 e1 04	 and	 ecx, 4
  002f3	74 12		 je	 SHORT $LN32@P_PlayerAf
  002f5	b8 04 00 00 00	 mov	 eax, 4
  002fa	6b c8 14	 imul	 ecx, eax, 20
  002fd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00300	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00305	75 0a		 jne	 SHORT $LN31@P_PlayerAf
$LN32@P_PlayerAf:

; 10188: 				player->currentweapon = 0;

  00307	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0030a	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$LN31@P_PlayerAf:

; 10189: 		}
; 10190: 
; 10191: 		if (cmd->buttons & BT_WEAPONMASK)

  00311	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00314	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00318	83 e1 07	 and	 ecx, 7
  0031b	0f 84 cf 01 00
	00		 je	 $LN2@P_PlayerAf

; 10192: 		{
; 10193: 			//Read the bits to determine individual weapon ring selection.
; 10194: 			INT32 weapon = (cmd->buttons & BT_WEAPONMASK);

  00321	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00324	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00328	83 e1 07	 and	 ecx, 7
  0032b	89 4d f4	 mov	 DWORD PTR _weapon$4[ebp], ecx

; 10195: 
; 10196: 			switch (weapon)

  0032e	8b 45 f4	 mov	 eax, DWORD PTR _weapon$4[ebp]
  00331	89 45 a4	 mov	 DWORD PTR tv253[ebp], eax
  00334	8b 4d a4	 mov	 ecx, DWORD PTR tv253[ebp]
  00337	83 e9 01	 sub	 ecx, 1
  0033a	89 4d a4	 mov	 DWORD PTR tv253[ebp], ecx
  0033d	83 7d a4 06	 cmp	 DWORD PTR tv253[ebp], 6
  00341	0f 87 a9 01 00
	00		 ja	 $LN2@P_PlayerAf
  00347	8b 55 a4	 mov	 edx, DWORD PTR tv253[ebp]
  0034a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN126@P_PlayerAf[edx*4]
$LN34@P_PlayerAf:

; 10197: 			{
; 10198: 			case 1: //normal
; 10199: 				player->currentweapon = 0;

  00351	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00354	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 10200: 				player->pflags |= PF_WPNDOWN;

  0035b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0035e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00364	83 c9 10	 or	 ecx, 16			; 00000010H
  00367	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0036a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 10201: 				break;

  00370	e9 7b 01 00 00	 jmp	 $LN2@P_PlayerAf
$LN35@P_PlayerAf:

; 10202: 			case 2: //automatic
; 10203: 				if ((player->ringweapons & RW_AUTO) && player->powers[pw_automaticring])

  00375	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00378	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0037b	83 e1 04	 and	 ecx, 4
  0037e	74 31		 je	 SHORT $LN36@P_PlayerAf
  00380	b8 04 00 00 00	 mov	 eax, 4
  00385	6b c8 14	 imul	 ecx, eax, 20
  00388	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0038b	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00390	74 1f		 je	 SHORT $LN36@P_PlayerAf

; 10204: 				{
; 10205: 					player->currentweapon = WEP_AUTO;

  00392	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00395	c7 40 2c 01 00
	00 00		 mov	 DWORD PTR [eax+44], 1

; 10206: 					player->pflags |= PF_WPNDOWN;

  0039c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0039f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  003a5	83 c9 10	 or	 ecx, 16			; 00000010H
  003a8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003ab	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN36@P_PlayerAf:

; 10207: 				}
; 10208: 				break;

  003b1	e9 3a 01 00 00	 jmp	 $LN2@P_PlayerAf
$LN37@P_PlayerAf:

; 10209: 			case 3: //bounce
; 10210: 				if ((player->ringweapons & RW_BOUNCE) && player->powers[pw_bouncering])

  003b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003b9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003bc	83 e1 01	 and	 ecx, 1
  003bf	74 31		 je	 SHORT $LN38@P_PlayerAf
  003c1	b8 04 00 00 00	 mov	 eax, 4
  003c6	6b c8 12	 imul	 ecx, eax, 18
  003c9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003cc	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  003d1	74 1f		 je	 SHORT $LN38@P_PlayerAf

; 10211: 				{
; 10212: 					player->currentweapon = WEP_BOUNCE;

  003d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003d6	c7 40 2c 02 00
	00 00		 mov	 DWORD PTR [eax+44], 2

; 10213: 					player->pflags |= PF_WPNDOWN;

  003dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e0	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  003e6	83 c9 10	 or	 ecx, 16			; 00000010H
  003e9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003ec	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN38@P_PlayerAf:

; 10214: 				}
; 10215: 				break;

  003f2	e9 f9 00 00 00	 jmp	 $LN2@P_PlayerAf
$LN39@P_PlayerAf:

; 10216: 			case 4: //scatter
; 10217: 				if ((player->ringweapons & RW_SCATTER) && player->powers[pw_scatterring])

  003f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003fa	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003fd	83 e1 10	 and	 ecx, 16			; 00000010H
  00400	74 31		 je	 SHORT $LN40@P_PlayerAf
  00402	b8 04 00 00 00	 mov	 eax, 4
  00407	6b c8 16	 imul	 ecx, eax, 22
  0040a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0040d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00412	74 1f		 je	 SHORT $LN40@P_PlayerAf

; 10218: 				{
; 10219: 					player->currentweapon = WEP_SCATTER;

  00414	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00417	c7 40 2c 03 00
	00 00		 mov	 DWORD PTR [eax+44], 3

; 10220: 					player->pflags |= PF_WPNDOWN;

  0041e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00421	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00427	83 c9 10	 or	 ecx, 16			; 00000010H
  0042a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0042d	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN40@P_PlayerAf:

; 10221: 				}
; 10222: 				break;

  00433	e9 b8 00 00 00	 jmp	 $LN2@P_PlayerAf
$LN41@P_PlayerAf:

; 10223: 			case 5: //grenade
; 10224: 				if ((player->ringweapons & RW_GRENADE) && player->powers[pw_grenadering])

  00438	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0043b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0043e	83 e1 20	 and	 ecx, 32			; 00000020H
  00441	74 31		 je	 SHORT $LN42@P_PlayerAf
  00443	b8 04 00 00 00	 mov	 eax, 4
  00448	6b c8 17	 imul	 ecx, eax, 23
  0044b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0044e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00453	74 1f		 je	 SHORT $LN42@P_PlayerAf

; 10225: 				{
; 10226: 					player->currentweapon = WEP_GRENADE;

  00455	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00458	c7 40 2c 04 00
	00 00		 mov	 DWORD PTR [eax+44], 4

; 10227: 					player->pflags |= PF_WPNDOWN;

  0045f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00462	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00468	83 c9 10	 or	 ecx, 16			; 00000010H
  0046b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0046e	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN42@P_PlayerAf:

; 10228: 				}
; 10229: 				break;

  00474	eb 7a		 jmp	 SHORT $LN2@P_PlayerAf
$LN43@P_PlayerAf:

; 10230: 			case 6: //explosion
; 10231: 				if ((player->ringweapons & RW_EXPLODE) && player->powers[pw_explosionring])

  00476	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00479	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0047c	83 e1 08	 and	 ecx, 8
  0047f	74 31		 je	 SHORT $LN44@P_PlayerAf
  00481	b8 04 00 00 00	 mov	 eax, 4
  00486	6b c8 15	 imul	 ecx, eax, 21
  00489	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0048c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00491	74 1f		 je	 SHORT $LN44@P_PlayerAf

; 10232: 				{
; 10233: 					player->currentweapon = WEP_EXPLODE;

  00493	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00496	c7 40 2c 05 00
	00 00		 mov	 DWORD PTR [eax+44], 5

; 10234: 					player->pflags |= PF_WPNDOWN;

  0049d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004a0	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  004a6	83 c9 10	 or	 ecx, 16			; 00000010H
  004a9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004ac	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN44@P_PlayerAf:

; 10235: 				}
; 10236: 				break;

  004b2	eb 3c		 jmp	 SHORT $LN2@P_PlayerAf
$LN45@P_PlayerAf:

; 10237: 			case 7: //rail
; 10238: 				if ((player->ringweapons & RW_RAIL) && player->powers[pw_railring])

  004b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004b7	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  004ba	83 e1 02	 and	 ecx, 2
  004bd	74 31		 je	 SHORT $LN46@P_PlayerAf
  004bf	b8 04 00 00 00	 mov	 eax, 4
  004c4	6b c8 13	 imul	 ecx, eax, 19
  004c7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004ca	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  004cf	74 1f		 je	 SHORT $LN46@P_PlayerAf

; 10239: 				{
; 10240: 					player->currentweapon = WEP_RAIL;

  004d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004d4	c7 40 2c 06 00
	00 00		 mov	 DWORD PTR [eax+44], 6

; 10241: 					player->pflags |= PF_WPNDOWN;

  004db	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004de	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  004e4	83 c9 10	 or	 ecx, 16			; 00000010H
  004e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  004ea	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN46@P_PlayerAf:
$LN2@P_PlayerAf:

; 10242: 				}
; 10243: 				break;
; 10244: 			}
; 10245: 		}
; 10246: 	}
; 10247: 
; 10248: 	if (!(cmd->buttons & BT_WEAPONNEXT) && !(cmd->buttons & BT_WEAPONPREV)
; 10249: 		&& !(cmd->buttons & BT_WEAPONMASK))

  004f0	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  004f3	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  004f7	83 e1 10	 and	 ecx, 16			; 00000010H
  004fa	75 2d		 jne	 SHORT $LN47@P_PlayerAf
  004fc	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  004ff	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00503	83 e1 20	 and	 ecx, 32			; 00000020H
  00506	75 21		 jne	 SHORT $LN47@P_PlayerAf
  00508	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0050b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0050f	83 e1 07	 and	 ecx, 7
  00512	75 15		 jne	 SHORT $LN47@P_PlayerAf

; 10250: 		player->pflags &= ~PF_WPNDOWN;

  00514	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00517	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0051d	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00520	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00523	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN47@P_PlayerAf:

; 10251: 
; 10252: 	// Weapon cycling if out of ammo for a certain weapon
; 10253: 	if (player->currentweapon == WEP_AUTO && (!(player->ringweapons & RW_AUTO) || !player->powers[pw_automaticring]))

  00529	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0052c	83 78 2c 01	 cmp	 DWORD PTR [eax+44], 1
  00530	75 27		 jne	 SHORT $LN48@P_PlayerAf
  00532	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00535	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00538	83 e1 04	 and	 ecx, 4
  0053b	74 12		 je	 SHORT $LN49@P_PlayerAf
  0053d	b8 04 00 00 00	 mov	 eax, 4
  00542	6b c8 14	 imul	 ecx, eax, 20
  00545	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00548	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0054d	75 0a		 jne	 SHORT $LN48@P_PlayerAf
$LN49@P_PlayerAf:

; 10254: 		player->currentweapon = WEP_BOUNCE;

  0054f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00552	c7 40 2c 02 00
	00 00		 mov	 DWORD PTR [eax+44], 2
$LN48@P_PlayerAf:

; 10255: 	if (player->currentweapon == WEP_BOUNCE && (!(player->ringweapons & RW_BOUNCE) || !player->powers[pw_bouncering]))

  00559	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0055c	83 78 2c 02	 cmp	 DWORD PTR [eax+44], 2
  00560	75 27		 jne	 SHORT $LN50@P_PlayerAf
  00562	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00565	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00568	83 e1 01	 and	 ecx, 1
  0056b	74 12		 je	 SHORT $LN51@P_PlayerAf
  0056d	b8 04 00 00 00	 mov	 eax, 4
  00572	6b c8 12	 imul	 ecx, eax, 18
  00575	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00578	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0057d	75 0a		 jne	 SHORT $LN50@P_PlayerAf
$LN51@P_PlayerAf:

; 10256: 		player->currentweapon = WEP_SCATTER;

  0057f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00582	c7 40 2c 03 00
	00 00		 mov	 DWORD PTR [eax+44], 3
$LN50@P_PlayerAf:

; 10257: 	if (player->currentweapon == WEP_SCATTER && (!(player->ringweapons & RW_SCATTER) || !player->powers[pw_scatterring]))

  00589	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0058c	83 78 2c 03	 cmp	 DWORD PTR [eax+44], 3
  00590	75 27		 jne	 SHORT $LN52@P_PlayerAf
  00592	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00595	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00598	83 e1 10	 and	 ecx, 16			; 00000010H
  0059b	74 12		 je	 SHORT $LN53@P_PlayerAf
  0059d	b8 04 00 00 00	 mov	 eax, 4
  005a2	6b c8 16	 imul	 ecx, eax, 22
  005a5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005a8	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  005ad	75 0a		 jne	 SHORT $LN52@P_PlayerAf
$LN53@P_PlayerAf:

; 10258: 		player->currentweapon = WEP_GRENADE;

  005af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005b2	c7 40 2c 04 00
	00 00		 mov	 DWORD PTR [eax+44], 4
$LN52@P_PlayerAf:

; 10259: 	if (player->currentweapon == WEP_GRENADE && (!(player->ringweapons & RW_GRENADE) || !player->powers[pw_grenadering]))

  005b9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005bc	83 78 2c 04	 cmp	 DWORD PTR [eax+44], 4
  005c0	75 27		 jne	 SHORT $LN54@P_PlayerAf
  005c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005c5	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  005c8	83 e1 20	 and	 ecx, 32			; 00000020H
  005cb	74 12		 je	 SHORT $LN55@P_PlayerAf
  005cd	b8 04 00 00 00	 mov	 eax, 4
  005d2	6b c8 17	 imul	 ecx, eax, 23
  005d5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  005d8	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  005dd	75 0a		 jne	 SHORT $LN54@P_PlayerAf
$LN55@P_PlayerAf:

; 10260: 		player->currentweapon = WEP_EXPLODE;

  005df	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005e2	c7 40 2c 05 00
	00 00		 mov	 DWORD PTR [eax+44], 5
$LN54@P_PlayerAf:

; 10261: 	if (player->currentweapon == WEP_EXPLODE && (!(player->ringweapons & RW_EXPLODE) || !player->powers[pw_explosionring]))

  005e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005ec	83 78 2c 05	 cmp	 DWORD PTR [eax+44], 5
  005f0	75 27		 jne	 SHORT $LN56@P_PlayerAf
  005f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005f5	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  005f8	83 e1 08	 and	 ecx, 8
  005fb	74 12		 je	 SHORT $LN57@P_PlayerAf
  005fd	b8 04 00 00 00	 mov	 eax, 4
  00602	6b c8 15	 imul	 ecx, eax, 21
  00605	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00608	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0060d	75 0a		 jne	 SHORT $LN56@P_PlayerAf
$LN57@P_PlayerAf:

; 10262: 		player->currentweapon = WEP_RAIL;

  0060f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00612	c7 40 2c 06 00
	00 00		 mov	 DWORD PTR [eax+44], 6
$LN56@P_PlayerAf:

; 10263: 	if (player->currentweapon == WEP_RAIL && (!(player->ringweapons & RW_RAIL) || !player->powers[pw_railring]))

  00619	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0061c	83 78 2c 06	 cmp	 DWORD PTR [eax+44], 6
  00620	75 27		 jne	 SHORT $LN58@P_PlayerAf
  00622	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00625	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00628	83 e1 02	 and	 ecx, 2
  0062b	74 12		 je	 SHORT $LN59@P_PlayerAf
  0062d	b8 04 00 00 00	 mov	 eax, 4
  00632	6b c8 13	 imul	 ecx, eax, 19
  00635	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00638	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0063d	75 0a		 jne	 SHORT $LN58@P_PlayerAf
$LN59@P_PlayerAf:

; 10264: 		player->currentweapon = 0;

  0063f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00642	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$LN58@P_PlayerAf:

; 10265: 
; 10266: 	if (P_IsLocalPlayer(player) && (player->pflags & PF_WPNDOWN) && player->currentweapon != oldweapon)

  00649	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0064c	50		 push	 eax
  0064d	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  00652	83 c4 04	 add	 esp, 4
  00655	85 c0		 test	 eax, eax
  00657	74 25		 je	 SHORT $LN60@P_PlayerAf
  00659	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0065c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00662	83 e1 10	 and	 ecx, 16			; 00000010H
  00665	74 17		 je	 SHORT $LN60@P_PlayerAf
  00667	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0066a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0066d	3b 4d f8	 cmp	 ecx, DWORD PTR _oldweapon$[ebp]
  00670	74 0c		 je	 SHORT $LN60@P_PlayerAf

; 10267: 		S_StartSound(NULL, sfx_menu1);

  00672	6a 67		 push	 103			; 00000067H
  00674	6a 00		 push	 0
  00676	e8 00 00 00 00	 call	 _S_StartSound
  0067b	83 c4 08	 add	 esp, 8
$LN60@P_PlayerAf:

; 10268: 
; 10269: 	if (player->pflags & PF_GLIDING)

  0067e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00681	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00687	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  0068d	74 49		 je	 SHORT $LN61@P_PlayerAf

; 10270: 	{
; 10271: 		if (player->mo->state - states < S_PLAY_ABL1 || player->mo->state - states > S_PLAY_ABL2)

  0068f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00692	8b 08		 mov	 ecx, DWORD PTR [eax]
  00694	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00697	2d 00 00 00 00	 sub	 eax, OFFSET _states
  0069c	99		 cdq
  0069d	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  006a2	f7 f9		 idiv	 ecx
  006a4	83 f8 15	 cmp	 eax, 21			; 00000015H
  006a7	7c 1a		 jl	 SHORT $LN64@P_PlayerAf
  006a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  006ae	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  006b1	2d 00 00 00 00	 sub	 eax, OFFSET _states
  006b6	99		 cdq
  006b7	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  006bc	f7 f9		 idiv	 ecx
  006be	83 f8 16	 cmp	 eax, 22			; 00000016H
  006c1	7e 10		 jle	 SHORT $LN63@P_PlayerAf
$LN64@P_PlayerAf:

; 10272: 			P_SetPlayerMobjState(player->mo, S_PLAY_ABL1);

  006c3	6a 15		 push	 21			; 00000015H
  006c5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  006ca	51		 push	 ecx
  006cb	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  006d0	83 c4 08	 add	 esp, 8
$LN63@P_PlayerAf:

; 10273: 	}

  006d3	e9 b4 00 00 00	 jmp	 $LN68@P_PlayerAf
$LN61@P_PlayerAf:

; 10274: 	else if (!(player->pflags & PF_SLIDING) && (player->pflags & PF_JUMPED) && !player->powers[pw_super]
; 10275: 		&& (player->mo->state - states < S_PLAY_ATK1
; 10276: 		|| player->mo->state - states > S_PLAY_ATK4) && player->charability2 == CA2_SPINDASH)

  006d8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006db	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006e1	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  006e7	75 75		 jne	 SHORT $LN65@P_PlayerAf
  006e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006ec	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006f2	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  006f8	74 64		 je	 SHORT $LN65@P_PlayerAf
  006fa	b8 04 00 00 00	 mov	 eax, 4
  006ff	6b c8 0f	 imul	 ecx, eax, 15
  00702	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00705	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0070a	75 52		 jne	 SHORT $LN65@P_PlayerAf
  0070c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0070f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00711	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00714	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00719	99		 cdq
  0071a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0071f	f7 f9		 idiv	 ecx
  00721	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  00724	7c 1a		 jl	 SHORT $LN67@P_PlayerAf
  00726	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00729	8b 08		 mov	 ecx, DWORD PTR [eax]
  0072b	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0072e	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00733	99		 cdq
  00734	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00739	f7 f9		 idiv	 ecx
  0073b	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0073e	7e 1e		 jle	 SHORT $LN65@P_PlayerAf
$LN67@P_PlayerAf:
  00740	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00743	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  0074a	75 12		 jne	 SHORT $LN65@P_PlayerAf

; 10277: 	{
; 10278: 		P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  0074c	6a 0c		 push	 12			; 0000000cH
  0074e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00751	8b 08		 mov	 ecx, DWORD PTR [eax]
  00753	51		 push	 ecx
  00754	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00759	83 c4 08	 add	 esp, 8

; 10279: 	}

  0075c	eb 2e		 jmp	 SHORT $LN68@P_PlayerAf
$LN65@P_PlayerAf:

; 10280: 	else if (player->pflags & PF_SLIDING)

  0075e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00761	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00767	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  0076d	74 1d		 je	 SHORT $LN68@P_PlayerAf

; 10281: 		P_SetPlayerMobjState(player->mo, player->mo->info->painstate);

  0076f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00772	8b 08		 mov	 ecx, DWORD PTR [eax]
  00774	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0077a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0077d	50		 push	 eax
  0077e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00781	8b 11		 mov	 edx, DWORD PTR [ecx]
  00783	52		 push	 edx
  00784	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00789	83 c4 08	 add	 esp, 8
$LN68@P_PlayerAf:

; 10282: 
; 10283: 	if ((player->pflags & PF_CARRIED) && player->mo->tracer)

  0078c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0078f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00795	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  0079b	0f 84 15 03 00
	00		 je	 $LN69@P_PlayerAf
  007a1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  007a6	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  007ad	0f 84 03 03 00
	00		 je	 $LN69@P_PlayerAf

; 10284: 	{
; 10285: 		player->mo->height = FixedDiv(P_GetPlayerHeight(player), FixedDiv(14*FRACUNIT,10*FRACUNIT));

  007b3	68 00 00 0a 00	 push	 655360			; 000a0000H
  007b8	68 00 00 0e 00	 push	 917504			; 000e0000H
  007bd	e8 00 00 00 00	 call	 _FixedDiv
  007c2	83 c4 08	 add	 esp, 8
  007c5	50		 push	 eax
  007c6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007c9	50		 push	 eax
  007ca	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  007cf	83 c4 04	 add	 esp, 4
  007d2	50		 push	 eax
  007d3	e8 00 00 00 00	 call	 _FixedDiv
  007d8	83 c4 08	 add	 esp, 8
  007db	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  007de	8b 11		 mov	 edx, DWORD PTR [ecx]
  007e0	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 10286: 
; 10287: 		if (player->mo->eflags & MFE_VERTICALFLIP)

  007e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  007e8	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  007ee	83 e2 20	 and	 edx, 32			; 00000020H
  007f1	74 7c		 je	 SHORT $LN71@P_PlayerAf

; 10288: 		{
; 10289: 			if ((player->mo->tracer->z + player->mo->tracer->height + player->mo->height + FRACUNIT) <= player->mo->tracer->ceilingz)

  007f3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  007f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  007f8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  007fe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00801	8b 08		 mov	 ecx, DWORD PTR [eax]
  00803	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  00809	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0080c	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  0080f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00812	8b 02		 mov	 eax, DWORD PTR [edx]
  00814	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  00817	8d 84 11 00 00
	01 00		 lea	 eax, DWORD PTR [ecx+edx+65536]
  0081e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00821	8b 11		 mov	 edx, DWORD PTR [ecx]
  00823	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00829	3b 41 3c	 cmp	 eax, DWORD PTR [ecx+60]
  0082c	7f 27		 jg	 SHORT $LN73@P_PlayerAf

; 10290: 				player->mo->z = player->mo->tracer->z + player->mo->height + FRACUNIT;

  0082e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00831	8b 08		 mov	 ecx, DWORD PTR [eax]
  00833	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00839	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0083c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0083e	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00841	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00844	8d 8c 02 00 00
	01 00		 lea	 ecx, DWORD PTR [edx+eax+65536]
  0084b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0084e	8b 02		 mov	 eax, DWORD PTR [edx]
  00850	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00853	eb 18		 jmp	 SHORT $LN74@P_PlayerAf
$LN73@P_PlayerAf:

; 10291: 			else
; 10292: 				player->pflags &= ~PF_CARRIED;

  00855	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00858	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0085e	81 e1 ff ff fd
	ff		 and	 ecx, -131073		; fffdffffH
  00864	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00867	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN74@P_PlayerAf:

; 10293: 		}

  0086d	eb 6a		 jmp	 SHORT $LN76@P_PlayerAf
$LN71@P_PlayerAf:

; 10294: 		else
; 10295: 		{
; 10296: 			if ((player->mo->tracer->z - player->mo->height - FRACUNIT) >= player->mo->tracer->floorz)

  0086f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00872	8b 08		 mov	 ecx, DWORD PTR [eax]
  00874	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0087a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0087d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0087f	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00882	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  00885	81 ea 00 00 01
	00		 sub	 edx, 65536		; 00010000H
  0088b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0088e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00890	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  00896	3b 50 38	 cmp	 edx, DWORD PTR [eax+56]
  00899	7c 26		 jl	 SHORT $LN75@P_PlayerAf

; 10297: 				player->mo->z = player->mo->tracer->z - player->mo->height - FRACUNIT;

  0089b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0089e	8b 08		 mov	 ecx, DWORD PTR [eax]
  008a0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  008a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  008ab	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  008ae	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  008b1	81 ea 00 00 01
	00		 sub	 edx, 65536		; 00010000H
  008b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  008bc	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  008bf	eb 18		 jmp	 SHORT $LN76@P_PlayerAf
$LN75@P_PlayerAf:

; 10298: 			else
; 10299: 				player->pflags &= ~PF_CARRIED;

  008c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008c4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  008ca	81 e1 ff ff fd
	ff		 and	 ecx, -131073		; fffdffffH
  008d0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008d3	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN76@P_PlayerAf:

; 10300: 		}
; 10301: 
; 10302: 		if (player->mo->tracer->health <= 0 || (player->mo->tracer->player && player->mo->tracer->player->powers[pw_flashing]))

  008d9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  008de	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  008e4	83 ba 8c 00 00
	00 00		 cmp	 DWORD PTR [edx+140], 0
  008eb	7e 33		 jle	 SHORT $LN79@P_PlayerAf
  008ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  008f2	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  008f8	83 ba a4 00 00
	00 00		 cmp	 DWORD PTR [edx+164], 0
  008ff	74 3c		 je	 SHORT $LN77@P_PlayerAf
  00901	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00904	8b 08		 mov	 ecx, DWORD PTR [eax]
  00906	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0090c	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00912	b9 04 00 00 00	 mov	 ecx, 4
  00917	d1 e1		 shl	 ecx, 1
  00919	83 7c 08 38 00	 cmp	 DWORD PTR [eax+ecx+56], 0
  0091e	74 1d		 je	 SHORT $LN77@P_PlayerAf
$LN79@P_PlayerAf:

; 10303: 			player->pflags &= ~PF_CARRIED;

  00920	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00923	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00929	81 e1 ff ff fd
	ff		 and	 ecx, -131073		; fffdffffH
  0092f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00932	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
  00938	e9 9c 00 00 00	 jmp	 $LN78@P_PlayerAf
$LN77@P_PlayerAf:

; 10304: 		else
; 10305: 		{
; 10306: 			player->mo->momx = player->mo->tracer->x-player->mo->x;

  0093d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00940	8b 08		 mov	 ecx, DWORD PTR [eax]
  00942	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00948	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0094b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0094d	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00950	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00953	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00956	8b 08		 mov	 ecx, DWORD PTR [eax]
  00958	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 10307: 			player->mo->momy = player->mo->tracer->y-player->mo->y;

  0095b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0095e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00960	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00966	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00969	8b 08		 mov	 ecx, DWORD PTR [eax]
  0096b	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0096e	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00971	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00974	8b 08		 mov	 ecx, DWORD PTR [eax]
  00976	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 10308: 			P_TryMove(player->mo, player->mo->x+player->mo->momx, player->mo->y+player->mo->momy, true);

  00979	6a 01		 push	 1
  0097b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0097e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00980	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00983	8b 02		 mov	 eax, DWORD PTR [edx]
  00985	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00988	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  0098b	51		 push	 ecx
  0098c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0098f	8b 02		 mov	 eax, DWORD PTR [edx]
  00991	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00994	8b 11		 mov	 edx, DWORD PTR [ecx]
  00996	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00999	03 42 48	 add	 eax, DWORD PTR [edx+72]
  0099c	50		 push	 eax
  0099d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  009a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  009a2	52		 push	 edx
  009a3	e8 00 00 00 00	 call	 _P_TryMove
  009a8	83 c4 10	 add	 esp, 16			; 00000010H

; 10309: 			player->mo->momx = player->mo->momy = 0;

  009ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  009b0	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  009b7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  009ba	8b 02		 mov	 eax, DWORD PTR [edx]
  009bc	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 10310: 			player->mo->momz = player->mo->tracer->momz;

  009c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  009c8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  009ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  009d3	8b 52 50	 mov	 edx, DWORD PTR [edx+80]
  009d6	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN78@P_PlayerAf:

; 10311: 		}
; 10312: 
; 10313: 		if (gametype == GT_COOP)

  009d9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  009e0	85 c0		 test	 eax, eax
  009e2	75 65		 jne	 SHORT $LN83@P_PlayerAf

; 10314: 		{
; 10315: 			player->mo->angle = player->mo->tracer->angle;

  009e4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  009e9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  009ef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  009f4	8b 52 24	 mov	 edx, DWORD PTR [edx+36]
  009f7	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 10316: 
; 10317: 			if (player == &players[consoleplayer])

  009fa	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00a04	05 00 00 00 00	 add	 eax, OFFSET _players
  00a09	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00a0c	75 10		 jne	 SHORT $LN81@P_PlayerAf

; 10318: 				localangle = player->mo->angle;

  00a0e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a11	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a13	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00a16	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  00a1c	eb 2b		 jmp	 SHORT $LN83@P_PlayerAf
$LN81@P_PlayerAf:

; 10319: 			else if (splitscreen && player == &players[secondarydisplayplayer])

  00a1e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00a25	74 22		 je	 SHORT $LN83@P_PlayerAf
  00a27	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00a31	05 00 00 00 00	 add	 eax, OFFSET _players
  00a36	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00a39	75 0e		 jne	 SHORT $LN83@P_PlayerAf

; 10320: 				localangle2 = player->mo->angle;

  00a3b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a3e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a40	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00a43	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN83@P_PlayerAf:

; 10321: 		}
; 10322: 
; 10323: 		if (P_AproxDistance(player->mo->x - player->mo->tracer->x, player->mo->y - player->mo->tracer->y) > player->mo->radius)

  00a49	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a4c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a4e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a51	8b 02		 mov	 eax, DWORD PTR [edx]
  00a53	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00a59	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00a5c	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00a5f	50		 push	 eax
  00a60	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a63	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a65	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a68	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a6a	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  00a70	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00a73	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00a76	51		 push	 ecx
  00a77	e8 00 00 00 00	 call	 _P_AproxDistance
  00a7c	83 c4 08	 add	 esp, 8
  00a7f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a82	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00a84	3b 41 40	 cmp	 eax, DWORD PTR [ecx+64]
  00a87	7e 18		 jle	 SHORT $LN84@P_PlayerAf

; 10324: 			player->pflags &= ~PF_CARRIED;

  00a89	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a8c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a92	81 e1 ff ff fd
	ff		 and	 ecx, -131073		; fffdffffH
  00a98	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a9b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN84@P_PlayerAf:

; 10325: 
; 10326: 		P_SetPlayerMobjState(player->mo, S_PLAY_CARRY);

  00aa1	6a 29		 push	 41			; 00000029H
  00aa3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00aa6	8b 08		 mov	 ecx, DWORD PTR [eax]
  00aa8	51		 push	 ecx
  00aa9	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00aae	83 c4 08	 add	 esp, 8

; 10327: 	}

  00ab1	e9 63 04 00 00	 jmp	 $LN97@P_PlayerAf
$LN69@P_PlayerAf:

; 10328: 	else if (player->pflags & PF_ITEMHANG && player->mo->tracer)

  00ab6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ab9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00abf	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  00ac5	0f 84 d0 01 00
	00		 je	 $LN85@P_PlayerAf
  00acb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ace	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ad0	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00ad7	0f 84 be 01 00
	00		 je	 $LN85@P_PlayerAf

; 10329: 	{
; 10330: 		// tracer is what you're hanging onto
; 10331: 		P_UnsetThingPosition(player->mo);

  00add	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ae0	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ae2	51		 push	 ecx
  00ae3	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00ae8	83 c4 04	 add	 esp, 4

; 10332: 		player->mo->x = player->mo->tracer->x;

  00aeb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00aee	8b 08		 mov	 ecx, DWORD PTR [eax]
  00af0	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00af6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00af9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00afb	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00afe	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 10333: 		player->mo->y = player->mo->tracer->y;

  00b01	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b04	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b06	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00b0c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b0f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b11	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00b14	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 10334: 		player->mo->z = player->mo->tracer->z - FixedDiv(player->mo->height, 3*FRACUNIT/2);

  00b17	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b1a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b1c	8b b1 b0 00 00
	00		 mov	 esi, DWORD PTR [ecx+176]
  00b22	68 00 80 01 00	 push	 98304			; 00018000H
  00b27	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b2a	8b 02		 mov	 eax, DWORD PTR [edx]
  00b2c	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00b2f	51		 push	 ecx
  00b30	e8 00 00 00 00	 call	 _FixedDiv
  00b35	83 c4 08	 add	 esp, 8
  00b38	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00b3b	2b d0		 sub	 edx, eax
  00b3d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b40	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b42	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 10335: 		player->mo->momx = player->mo->momy = player->mo->momz = 0;

  00b45	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b48	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b4a	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  00b51	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b54	8b 02		 mov	 eax, DWORD PTR [edx]
  00b56	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  00b5d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b60	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b62	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 10336: 		P_SetThingPosition(player->mo);

  00b69	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b6c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b6e	51		 push	 ecx
  00b6f	e8 00 00 00 00	 call	 _P_SetThingPosition
  00b74	83 c4 04	 add	 esp, 4

; 10337: 		P_SetPlayerMobjState(player->mo, S_PLAY_CARRY);

  00b77	6a 29		 push	 41			; 00000029H
  00b79	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b7c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b7e	51		 push	 ecx
  00b7f	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00b84	83 c4 08	 add	 esp, 8

; 10338: 
; 10339: 		// Controllable missile
; 10340: 		if (player->mo->tracer->type == MT_BLACKEGGMAN_MISSILE)

  00b87	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b8a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b8c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00b92	83 7a 7c 2a	 cmp	 DWORD PTR [edx+124], 42	; 0000002aH
  00b96	0f 85 fa 00 00
	00		 jne	 $LN91@P_PlayerAf

; 10341: 		{
; 10342: 			if (cmd->forwardmove > 0)

  00b9c	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00b9f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00ba2	85 c9		 test	 ecx, ecx
  00ba4	7e 23		 jle	 SHORT $LN88@P_PlayerAf

; 10343: 				player->mo->tracer->momz += FRACUNIT/4;

  00ba6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ba9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bab	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00bb1	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00bb4	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  00bb9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00bbc	8b 11		 mov	 edx, DWORD PTR [ecx]
  00bbe	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00bc4	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  00bc7	eb 2b		 jmp	 SHORT $LN90@P_PlayerAf
$LN88@P_PlayerAf:

; 10344: 			else if (cmd->forwardmove < 0)

  00bc9	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00bcc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00bcf	85 c9		 test	 ecx, ecx
  00bd1	7d 21		 jge	 SHORT $LN90@P_PlayerAf

; 10345: 				player->mo->tracer->momz -= FRACUNIT/4;

  00bd3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bd6	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bd8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00bde	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00be1	2d 00 40 00 00	 sub	 eax, 16384		; 00004000H
  00be6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00be9	8b 11		 mov	 edx, DWORD PTR [ecx]
  00beb	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00bf1	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN90@P_PlayerAf:

; 10346: 
; 10347: 			player->mo->tracer->angle = player->mo->angle;

  00bf4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bf7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bf9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bfc	8b 02		 mov	 eax, DWORD PTR [edx]
  00bfe	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00c04	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00c07	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 10348: 			P_InstaThrust(player->mo->tracer, player->mo->tracer->angle, player->mo->tracer->info->speed);

  00c0a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c0d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c0f	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00c15	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00c1b	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00c1e	51		 push	 ecx
  00c1f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c22	8b 02		 mov	 eax, DWORD PTR [edx]
  00c24	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00c2a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00c2d	52		 push	 edx
  00c2e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c31	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c33	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00c39	52		 push	 edx
  00c3a	e8 00 00 00 00	 call	 _P_InstaThrust
  00c3f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10349: 
; 10350: 			if (player->mo->z <= player->mo->floorz
; 10351: 				|| player->mo->tracer->health <= 0)

  00c42	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c45	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c47	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c4a	8b 02		 mov	 eax, DWORD PTR [edx]
  00c4c	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00c4f	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  00c52	7e 14		 jle	 SHORT $LN92@P_PlayerAf
  00c54	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c57	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c59	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00c5f	83 ba 8c 00 00
	00 00		 cmp	 DWORD PTR [edx+140], 0
  00c66	7f 2e		 jg	 SHORT $LN91@P_PlayerAf
$LN92@P_PlayerAf:

; 10352: 			{
; 10353: 				player->pflags &= ~PF_ITEMHANG;

  00c68	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c6b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00c71	81 e1 ff ff f7
	ff		 and	 ecx, -524289		; fff7ffffH
  00c77	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c7a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 10354: 				P_SetTarget(&player->mo->tracer, NULL);

  00c80	6a 00		 push	 0
  00c82	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c85	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c87	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00c8d	51		 push	 ecx
  00c8e	e8 00 00 00 00	 call	 _P_SetTarget
  00c93	83 c4 08	 add	 esp, 8
$LN91@P_PlayerAf:

; 10355: 			}
; 10356: 		}
; 10357: 	}

  00c96	e9 7e 02 00 00	 jmp	 $LN97@P_PlayerAf
$LN85@P_PlayerAf:

; 10358: 	else if ((player->pflags & PF_MACESPIN) && player->mo->tracer)

  00c9b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c9e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00ca4	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00caa	0f 84 69 02 00
	00		 je	 $LN97@P_PlayerAf
  00cb0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cb3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cb5	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00cbc	0f 84 57 02 00
	00		 je	 $LN97@P_PlayerAf

; 10359: 	{
; 10360: 		// tracer is what you're hanging onto....
; 10361: 		P_UnsetThingPosition(player->mo);

  00cc2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cc5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc7	51		 push	 ecx
  00cc8	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00ccd	83 c4 04	 add	 esp, 4

; 10362: 		player->mo->momx = (player->mo->tracer->x - player->mo->x)*2;

  00cd0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cd3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cd5	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00cdb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cde	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ce0	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00ce3	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00ce6	d1 e2		 shl	 edx, 1
  00ce8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ceb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ced	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 10363: 		player->mo->momy = (player->mo->tracer->y - player->mo->y)*2;

  00cf0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cf3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cf5	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00cfb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cfe	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d00	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00d03	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00d06	d1 e2		 shl	 edx, 1
  00d08	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d0b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d0d	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 10364: 		player->mo->momz = (player->mo->tracer->z - (player->mo->height-player->mo->tracer->height/2) - player->mo->z)*2;

  00d10	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d13	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d15	8b 89 b0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+176]
  00d1b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d1e	8b 32		 mov	 esi, DWORD PTR [edx]
  00d20	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d23	8b 10		 mov	 edx, DWORD PTR [eax]
  00d25	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00d2b	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00d2e	99		 cdq
  00d2f	2b c2		 sub	 eax, edx
  00d31	d1 f8		 sar	 eax, 1
  00d33	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00d36	2b d0		 sub	 edx, eax
  00d38	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00d3b	2b c2		 sub	 eax, edx
  00d3d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d40	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d42	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00d45	d1 e0		 shl	 eax, 1
  00d47	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d4a	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d4c	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 10365: 		player->mo->x = player->mo->tracer->x;

  00d4f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d52	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d54	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00d5a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d5d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d5f	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00d62	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 10366: 		player->mo->y = player->mo->tracer->y;

  00d65	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d68	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d6a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00d70	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d73	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d75	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00d78	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 10367: 		player->mo->z = player->mo->tracer->z - (player->mo->height-player->mo->tracer->height/2);

  00d7b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d7e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d80	8b 89 b0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+176]
  00d86	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d89	8b 32		 mov	 esi, DWORD PTR [edx]
  00d8b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d8e	8b 10		 mov	 edx, DWORD PTR [eax]
  00d90	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00d96	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00d99	99		 cdq
  00d9a	2b c2		 sub	 eax, edx
  00d9c	d1 f8		 sar	 eax, 1
  00d9e	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00da1	2b d0		 sub	 edx, eax
  00da3	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00da6	2b c2		 sub	 eax, edx
  00da8	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00dab	8b 11		 mov	 edx, DWORD PTR [ecx]
  00dad	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 10368: 		P_SetThingPosition(player->mo);

  00db0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00db3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00db5	51		 push	 ecx
  00db6	e8 00 00 00 00	 call	 _P_SetThingPosition
  00dbb	83 c4 04	 add	 esp, 4

; 10369: 		player->pflags |= PF_JUMPED;

  00dbe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dc1	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00dc7	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00dcd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00dd0	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 10370: 		player->secondjump = 0;

  00dd6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dd9	c6 80 14 01 00
	00 00		 mov	 BYTE PTR [eax+276], 0

; 10371: 
; 10372: 		if (cmd->forwardmove > 0)

  00de0	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00de3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00de6	85 c9		 test	 ecx, ecx
  00de8	7e 33		 jle	 SHORT $LN94@P_PlayerAf

; 10373: 			player->mo->tracer->target->lastlook += 2;

  00dea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ded	8b 08		 mov	 ecx, DWORD PTR [eax]
  00def	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00df5	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00dfb	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00e01	83 c1 02	 add	 ecx, 2
  00e04	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e07	8b 02		 mov	 eax, DWORD PTR [edx]
  00e09	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00e0f	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00e15	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx
  00e1b	eb 6b		 jmp	 SHORT $LN96@P_PlayerAf
$LN94@P_PlayerAf:

; 10374: 		else if (cmd->forwardmove < 0 && player->mo->tracer->target->lastlook > player->mo->tracer->target->movecount)

  00e1d	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00e20	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00e23	85 c9		 test	 ecx, ecx
  00e25	7d 61		 jge	 SHORT $LN96@P_PlayerAf
  00e27	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e2a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e2c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00e32	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00e38	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e3b	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e3d	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00e43	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00e49	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [eax+168]
  00e4f	3b 82 94 00 00
	00		 cmp	 eax, DWORD PTR [edx+148]
  00e55	7e 31		 jle	 SHORT $LN96@P_PlayerAf

; 10375: 			player->mo->tracer->target->lastlook -= 2;

  00e57	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e5c	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00e62	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00e68	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00e6e	83 e9 02	 sub	 ecx, 2
  00e71	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e74	8b 02		 mov	 eax, DWORD PTR [edx]
  00e76	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00e7c	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00e82	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx
$LN96@P_PlayerAf:

; 10376: 
; 10377: 		if (!(player->mo->tracer->target->flags & MF_SLIDEME))

  00e88	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e8b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e8d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00e93	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00e99	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00e9c	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00ea2	75 75		 jne	 SHORT $LN97@P_PlayerAf

; 10378: 		{
; 10379: 			if (cmd->buttons & BT_USE)

  00ea4	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00ea7	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00eab	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00eb1	74 31		 je	 SHORT $LN98@P_PlayerAf

; 10380: 				player->mo->tracer->target->health += 50;

  00eb3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00eb6	8b 08		 mov	 ecx, DWORD PTR [eax]
  00eb8	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00ebe	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00ec4	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00eca	83 c1 32	 add	 ecx, 50			; 00000032H
  00ecd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ed0	8b 02		 mov	 eax, DWORD PTR [edx]
  00ed2	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00ed8	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00ede	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx
$LN98@P_PlayerAf:

; 10381: 
; 10382: 			player->mo->tracer->target->health += cmd->sidemove;

  00ee4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ee7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ee9	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00eef	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00ef5	8b 4d fc	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00ef8	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00efc	03 90 8c 00 00
	00		 add	 edx, DWORD PTR [eax+140]
  00f02	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f05	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f07	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  00f0d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00f13	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx
$LN97@P_PlayerAf:

; 10383: 		}
; 10384: 	}
; 10385: 
; 10386: 	// bob view only if looking through the player's eyes
; 10387: 	if (splitscreen && player == &players[secondarydisplayplayer] && !camera2.chase)

  00f19	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00f20	74 2b		 je	 SHORT $LN99@P_PlayerAf
  00f22	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00f2c	05 00 00 00 00	 add	 eax, OFFSET _players
  00f31	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00f34	75 17		 jne	 SHORT $LN99@P_PlayerAf
  00f36	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _camera2, 0
  00f3d	75 0e		 jne	 SHORT $LN99@P_PlayerAf

; 10388: 		P_CalcHeight(player);

  00f3f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f42	50		 push	 eax
  00f43	e8 00 00 00 00	 call	 _P_CalcHeight
  00f48	83 c4 04	 add	 esp, 4
  00f4b	eb 15		 jmp	 SHORT $LN101@P_PlayerAf
$LN99@P_PlayerAf:

; 10389: 	else if (!camera.chase)

  00f4d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _camera, 0
  00f54	75 0c		 jne	 SHORT $LN101@P_PlayerAf

; 10390: 		P_CalcHeight(player);

  00f56	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f59	50		 push	 eax
  00f5a	e8 00 00 00 00	 call	 _P_CalcHeight
  00f5f	83 c4 04	 add	 esp, 4
$LN101@P_PlayerAf:

; 10391: 
; 10392: 	// calculate the camera movement
; 10393: 	//if (!netgame)
; 10394: 	{
; 10395: 		if (splitscreen && player == &players[secondarydisplayplayer] && camera2.chase)

  00f62	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00f69	74 32		 je	 SHORT $LN102@P_PlayerAf
  00f6b	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00f75	05 00 00 00 00	 add	 eax, OFFSET _players
  00f7a	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00f7d	75 1e		 jne	 SHORT $LN102@P_PlayerAf
  00f7f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _camera2, 0
  00f86	74 15		 je	 SHORT $LN102@P_PlayerAf

; 10396: 			P_MoveChaseCamera(player, &camera2, false);

  00f88	6a 00		 push	 0
  00f8a	68 00 00 00 00	 push	 OFFSET _camera2
  00f8f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f92	50		 push	 eax
  00f93	e8 00 00 00 00	 call	 _P_MoveChaseCamera
  00f98	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f9b	eb 30		 jmp	 SHORT $LN104@P_PlayerAf
$LN102@P_PlayerAf:

; 10397: 		else if (camera.chase && player == &players[displayplayer])

  00f9d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _camera, 0
  00fa4	74 27		 je	 SHORT $LN104@P_PlayerAf
  00fa6	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00fb0	05 00 00 00 00	 add	 eax, OFFSET _players
  00fb5	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00fb8	75 13		 jne	 SHORT $LN104@P_PlayerAf

; 10398: 			P_MoveChaseCamera(player, &camera, false);

  00fba	6a 00		 push	 0
  00fbc	68 00 00 00 00	 push	 OFFSET _camera
  00fc1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fc4	50		 push	 eax
  00fc5	e8 00 00 00 00	 call	 _P_MoveChaseCamera
  00fca	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN104@P_PlayerAf:

; 10399: 	}
; 10400: 
; 10401: 	// spectator invisibility and nogravity.
; 10402: 	if ((netgame || multiplayer) && player->spectator)

  00fcd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00fd4	75 09		 jne	 SHORT $LN106@P_PlayerAf
  00fd6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00fdd	74 40		 je	 SHORT $LN105@P_PlayerAf
$LN106@P_PlayerAf:
  00fdf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fe2	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00fe9	85 c9		 test	 ecx, ecx
  00feb	74 32		 je	 SHORT $LN105@P_PlayerAf

; 10403: 	{
; 10404: 		player->mo->flags2 |= MF2_DONTDRAW;

  00fed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ff0	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ff2	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00ff8	81 ca 00 00 40
	00		 or	 edx, 4194304		; 00400000H
  00ffe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01001	8b 08		 mov	 ecx, DWORD PTR [eax]
  01003	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 10405: 		player->mo->flags |= MF_NOGRAVITY;

  01009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0100c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0100e	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  01011	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  01017	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0101a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0101c	89 51 60	 mov	 DWORD PTR [ecx+96], edx
$LN105@P_PlayerAf:

; 10406: 	}
; 10407: 
; 10408: 	if (!splitscreen)

  0101f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  01026	0f 85 cf 01 00
	00		 jne	 $LN124@P_PlayerAf

; 10409: 	{
; 10410: 		if (!cv_chasecam.value)

  0102c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  01033	0f 85 c2 01 00
	00		 jne	 $LN124@P_PlayerAf

; 10411: 		{
; 10412: 			if (player == &players[displayplayer])

  01039	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  01043	05 00 00 00 00	 add	 eax, OFFSET _players
  01048	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0104b	0f 85 aa 01 00
	00		 jne	 $LN124@P_PlayerAf

; 10413: 			{
; 10414: 				sector_t *sector = player->mo->subsector->sector;

  01051	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01054	8b 08		 mov	 ecx, DWORD PTR [eax]
  01056	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01059	8b 02		 mov	 eax, DWORD PTR [edx]
  0105b	89 45 f0	 mov	 DWORD PTR _sector$3[ebp], eax

; 10415: 
; 10416: 				// see if we are in heat (no, not THAT kind of heat...)
; 10417: 
; 10418: 				if (P_FindSpecialLineFromTag(13, sector->tag, -1) != -1)

  0105e	6a ff		 push	 -1
  01060	8b 45 f0	 mov	 eax, DWORD PTR _sector$3[ebp]
  01063	0f b7 48 14	 movzx	 ecx, WORD PTR [eax+20]
  01067	51		 push	 ecx
  01068	6a 0d		 push	 13			; 0000000dH
  0106a	e8 00 00 00 00	 call	 _P_FindSpecialLineFromTag
  0106f	83 c4 0c	 add	 esp, 12			; 0000000cH
  01072	83 f8 ff	 cmp	 eax, -1
  01075	74 0f		 je	 SHORT $LN110@P_PlayerAf

; 10419: 					postimgtype = postimg_heat;

  01077	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR _postimgtype, 4
  01081	e9 b4 00 00 00	 jmp	 $LN5@P_PlayerAf
$LN110@P_PlayerAf:

; 10420: 				else if (sector->ffloors)

  01086	8b 45 f0	 mov	 eax, DWORD PTR _sector$3[ebp]
  01089	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  01090	0f 84 a4 00 00
	00		 je	 $LN5@P_PlayerAf

; 10421: 				{
; 10422: 					ffloor_t *rover;
; 10423: 
; 10424: 					for (rover = sector->ffloors; rover; rover = rover->next)

  01096	8b 45 f0	 mov	 eax, DWORD PTR _sector$3[ebp]
  01099	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0109f	89 4d ec	 mov	 DWORD PTR _rover$2[ebp], ecx
  010a2	eb 09		 jmp	 SHORT $LN6@P_PlayerAf
$LN4@P_PlayerAf:
  010a4	8b 45 ec	 mov	 eax, DWORD PTR _rover$2[ebp]
  010a7	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  010aa	89 4d ec	 mov	 DWORD PTR _rover$2[ebp], ecx
$LN6@P_PlayerAf:
  010ad	83 7d ec 00	 cmp	 DWORD PTR _rover$2[ebp], 0
  010b1	0f 84 83 00 00
	00		 je	 $LN5@P_PlayerAf

; 10425: 					{
; 10426: 						if (!(rover->flags & FF_EXISTS))

  010b7	8b 45 ec	 mov	 eax, DWORD PTR _rover$2[ebp]
  010ba	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  010bd	83 e1 01	 and	 ecx, 1
  010c0	75 02		 jne	 SHORT $LN113@P_PlayerAf

; 10427: 							continue;

  010c2	eb e0		 jmp	 SHORT $LN4@P_PlayerAf
$LN113@P_PlayerAf:

; 10428: 
; 10429: 						if (*rover->topheight <= player->mo->z + player->viewheight
; 10430: 							|| *rover->bottomheight > player->mo->z + player->viewheight)

  010c4	8b 45 ec	 mov	 eax, DWORD PTR _rover$2[ebp]
  010c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  010c9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  010cc	8b 02		 mov	 eax, DWORD PTR [edx]
  010ce	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  010d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010d4	03 50 14	 add	 edx, DWORD PTR [eax+20]
  010d7	39 11		 cmp	 DWORD PTR [ecx], edx
  010d9	7e 18		 jle	 SHORT $LN115@P_PlayerAf
  010db	8b 45 ec	 mov	 eax, DWORD PTR _rover$2[ebp]
  010de	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  010e1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  010e4	8b 02		 mov	 eax, DWORD PTR [edx]
  010e6	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  010e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010ec	03 50 14	 add	 edx, DWORD PTR [eax+20]
  010ef	39 11		 cmp	 DWORD PTR [ecx], edx
  010f1	7e 02		 jle	 SHORT $LN114@P_PlayerAf
$LN115@P_PlayerAf:

; 10431: 							continue;

  010f3	eb af		 jmp	 SHORT $LN4@P_PlayerAf
$LN114@P_PlayerAf:

; 10432: 
; 10433: 						if (player->mo->z + player->viewheight < *rover->topheight)

  010f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  010fa	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  010fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01100	03 50 14	 add	 edx, DWORD PTR [eax+20]
  01103	8b 4d ec	 mov	 ecx, DWORD PTR _rover$2[ebp]
  01106	8b 01		 mov	 eax, DWORD PTR [ecx]
  01108	3b 10		 cmp	 edx, DWORD PTR [eax]
  0110a	7d 29		 jge	 SHORT $LN117@P_PlayerAf

; 10434: 						{
; 10435: 							if (P_FindSpecialLineFromTag(13, rover->master->frontsector->tag, -1) != -1)

  0110c	6a ff		 push	 -1
  0110e	8b 45 ec	 mov	 eax, DWORD PTR _rover$2[ebp]
  01111	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  01114	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01117	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  0111b	50		 push	 eax
  0111c	6a 0d		 push	 13			; 0000000dH
  0111e	e8 00 00 00 00	 call	 _P_FindSpecialLineFromTag
  01123	83 c4 0c	 add	 esp, 12			; 0000000cH
  01126	83 f8 ff	 cmp	 eax, -1
  01129	74 0a		 je	 SHORT $LN117@P_PlayerAf

; 10436: 								postimgtype = postimg_heat;

  0112b	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR _postimgtype, 4
$LN117@P_PlayerAf:

; 10437: 						}
; 10438: 					}

  01135	e9 6a ff ff ff	 jmp	 $LN4@P_PlayerAf
$LN5@P_PlayerAf:

; 10439: 				}
; 10440: 
; 10441: 				// see if we are in water (water trumps heat)
; 10442: 				if (sector->ffloors)

  0113a	8b 45 f0	 mov	 eax, DWORD PTR _sector$3[ebp]
  0113d	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  01144	0f 84 97 00 00
	00		 je	 $LN8@P_PlayerAf

; 10443: 				{
; 10444: 					ffloor_t *rover;
; 10445: 
; 10446: 					for (rover = sector->ffloors; rover; rover = rover->next)

  0114a	8b 45 f0	 mov	 eax, DWORD PTR _sector$3[ebp]
  0114d	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  01153	89 4d e8	 mov	 DWORD PTR _rover$1[ebp], ecx
  01156	eb 09		 jmp	 SHORT $LN9@P_PlayerAf
$LN7@P_PlayerAf:
  01158	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0115b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0115e	89 4d e8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN9@P_PlayerAf:
  01161	83 7d e8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  01165	74 7a		 je	 SHORT $LN8@P_PlayerAf

; 10447: 					{
; 10448: 						if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_SWIMMABLE) || rover->flags & FF_BLOCKPLAYER)

  01167	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0116a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0116d	83 e1 01	 and	 ecx, 1
  01170	74 16		 je	 SHORT $LN120@P_PlayerAf
  01172	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  01175	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01178	83 e1 20	 and	 ecx, 32			; 00000020H
  0117b	74 0b		 je	 SHORT $LN120@P_PlayerAf
  0117d	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  01180	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01183	83 e1 02	 and	 ecx, 2
  01186	74 02		 je	 SHORT $LN119@P_PlayerAf
$LN120@P_PlayerAf:

; 10449: 							continue;

  01188	eb ce		 jmp	 SHORT $LN7@P_PlayerAf
$LN119@P_PlayerAf:

; 10450: 						if (*rover->topheight <= player->mo->z + player->viewheight
; 10451: 							|| *rover->bottomheight > player->mo->z + player->viewheight)

  0118a	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0118d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0118f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01192	8b 02		 mov	 eax, DWORD PTR [edx]
  01194	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  01197	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0119a	03 50 14	 add	 edx, DWORD PTR [eax+20]
  0119d	39 11		 cmp	 DWORD PTR [ecx], edx
  0119f	7e 18		 jle	 SHORT $LN122@P_PlayerAf
  011a1	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  011a4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  011a7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  011aa	8b 02		 mov	 eax, DWORD PTR [edx]
  011ac	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  011af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011b2	03 50 14	 add	 edx, DWORD PTR [eax+20]
  011b5	39 11		 cmp	 DWORD PTR [ecx], edx
  011b7	7e 02		 jle	 SHORT $LN121@P_PlayerAf
$LN122@P_PlayerAf:

; 10452: 							continue;

  011b9	eb 9d		 jmp	 SHORT $LN7@P_PlayerAf
$LN121@P_PlayerAf:

; 10453: 
; 10454: 						if (player->mo->z + player->viewheight < *rover->topheight)

  011bb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011be	8b 08		 mov	 ecx, DWORD PTR [eax]
  011c0	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  011c3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011c6	03 50 14	 add	 edx, DWORD PTR [eax+20]
  011c9	8b 4d e8	 mov	 ecx, DWORD PTR _rover$1[ebp]
  011cc	8b 01		 mov	 eax, DWORD PTR [ecx]
  011ce	3b 10		 cmp	 edx, DWORD PTR [eax]
  011d0	7d 0a		 jge	 SHORT $LN123@P_PlayerAf

; 10455: 							postimgtype = postimg_water;

  011d2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _postimgtype, 1
$LN123@P_PlayerAf:

; 10456: 					}

  011dc	e9 77 ff ff ff	 jmp	 $LN7@P_PlayerAf
$LN8@P_PlayerAf:

; 10457: 				}
; 10458: 
; 10459: 				if (player->mo->eflags & MFE_VERTICALFLIP)

  011e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  011e6	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  011ec	83 e2 20	 and	 edx, 32			; 00000020H
  011ef	74 0a		 je	 SHORT $LN124@P_PlayerAf

; 10460: 					postimgtype = postimg_flip;

  011f1	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _postimgtype, 3
$LN124@P_PlayerAf:

; 10461: 
; 10462: 				/*
; 10463: 				// Motion blur
; 10464: 				if (player->speed > 35)
; 10465: 				{
; 10466: 					postimgtype = postimg_motion;
; 10467: 					postimgparam = (player->speed - 32)/4;
; 10468: 
; 10469: 					if (postimgparam > 5)
; 10470: 						postimgparam = 5;
; 10471: 				}*/
; 10472: 			}
; 10473: 		}
; 10474: 	}
; 10475: }

  011fb	5f		 pop	 edi
  011fc	5e		 pop	 esi
  011fd	5b		 pop	 ebx
  011fe	8b e5		 mov	 esp, ebp
  01200	5d		 pop	 ebp
  01201	c3		 ret	 0
  01202	66 90		 npad	 2
$LN126@P_PlayerAf:
  01204	00 00 00 00	 DD	 $LN34@P_PlayerAf
  01208	00 00 00 00	 DD	 $LN35@P_PlayerAf
  0120c	00 00 00 00	 DD	 $LN37@P_PlayerAf
  01210	00 00 00 00	 DD	 $LN39@P_PlayerAf
  01214	00 00 00 00	 DD	 $LN41@P_PlayerAf
  01218	00 00 00 00	 DD	 $LN43@P_PlayerAf
  0121c	00 00 00 00	 DD	 $LN45@P_PlayerAf
_P_PlayerAfterThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_PlayerThink
_TEXT	SEGMENT
_numplayersexiting$1 = -32				; size = 4
_numplayersingame$2 = -28				; size = 4
_i$3 = -24						; size = 4
_i$4 = -20						; size = 4
_i$5 = -16						; size = 2
_mo$6 = -12						; size = 4
_playeri$ = -8						; size = 4
_cmd$ = -4						; size = 4
_player$ = 8						; size = 4
_P_PlayerThink PROC					; COMDAT

; 9614 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9615 : 	ticcmd_t *cmd;
; 9616 : 	const size_t playeri = (size_t)(player - players);

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00011	99		 cdq
  00012	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00017	f7 f9		 idiv	 ecx
  00019	89 45 f8	 mov	 DWORD PTR _playeri$[ebp], eax

; 9617 : 
; 9618 : #ifdef PARANOIA
; 9619 : 	if (!player->mo)
; 9620 : 		I_Error("p_playerthink: players[%"PRIdS"].mo == NULL", playeri);
; 9621 : #endif
; 9622 : 
; 9623 : 	// todo: Figure out what is actually causing these problems in the first place...
; 9624 : 	if ((player->health <= 0 || player->mo->health <= 0) && player->playerstate == PST_LIVE) //you should be DEAD!

  0001c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001f	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00023	7e 0e		 jle	 SHORT $LN12@P_PlayerTh
  00025	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00031	7f 3f		 jg	 SHORT $LN11@P_PlayerTh
$LN12@P_PlayerTh:
  00033	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00036	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003a	75 36		 jne	 SHORT $LN11@P_PlayerTh

; 9625 : 	{
; 9626 : 		if (server && (netgame || cv_debug))

  0003c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00043	74 23		 je	 SHORT $LN13@P_PlayerTh
  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0004c	75 09		 jne	 SHORT $LN14@P_PlayerTh
  0004e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00055	74 11		 je	 SHORT $LN13@P_PlayerTh
$LN14@P_PlayerTh:

; 9627 : 			CONS_Printf("Note: Player %"PRIdS" in PST_LIVE with 0 health. (Zombie bug)\n", playeri);

  00057	8b 45 f8	 mov	 eax, DWORD PTR _playeri$[ebp]
  0005a	50		 push	 eax
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@LPFOPMHP@Note?3?5Player?5?$CFIu?5in?5PST_LIVE?5wi@
  00060	e8 00 00 00 00	 call	 _CONS_Printf
  00065	83 c4 08	 add	 esp, 8
$LN13@P_PlayerTh:

; 9628 : 		player->playerstate = PST_DEAD;

  00068	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006b	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
$LN11@P_PlayerTh:

; 9629 : 	}
; 9630 : 
; 9631 : #ifdef SEENAMES
; 9632 : 	if (netgame && cv_seenames.value && cv_allowseenames.value && player == &players[displayplayer]
; 9633 : 		&& !(leveltime % (TICRATE/5))
; 9634 : 		&& !(gametype == GT_TAG && player->pflags & PF_TAGIT)

  00072	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00079	0f 84 d9 00 00
	00		 je	 $LN3@P_PlayerTh
  0007f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_seenames+20, 0
  00086	0f 84 cc 00 00
	00		 je	 $LN3@P_PlayerTh
  0008c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowseenames+20, 0
  00093	0f 84 bf 00 00
	00		 je	 $LN3@P_PlayerTh
  00099	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  000a3	05 00 00 00 00	 add	 eax, OFFSET _players
  000a8	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  000ab	0f 85 a7 00 00
	00		 jne	 $LN3@P_PlayerTh
  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  000b6	33 d2		 xor	 edx, edx
  000b8	b9 07 00 00 00	 mov	 ecx, 7
  000bd	f7 f1		 div	 ecx
  000bf	85 d2		 test	 edx, edx
  000c1	0f 85 91 00 00
	00		 jne	 $LN3@P_PlayerTh
  000c7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000ce	83 f8 03	 cmp	 eax, 3
  000d1	75 11		 jne	 SHORT $LN16@P_PlayerTh
  000d3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000d6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000dc	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  000e2	75 74		 jne	 SHORT $LN3@P_PlayerTh
$LN16@P_PlayerTh:

; 9635 : /*		&& !(gametype == GT_MATCH && !cv_matchtype.value)*/)
; 9636 : 	{
; 9637 : 		mobj_t *mo;
; 9638 : 		seenplayer = NULL;

  000e4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _seenplayer, 0

; 9639 : 
; 9640 : 		mo = P_SpawnNameFinder(player->mo, MT_NAMECHECK);

  000ee	6a 00		 push	 0
  000f0	6a 00		 push	 0
  000f2	6a 01		 push	 1
  000f4	6a 00		 push	 0
  000f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fb	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000fe	52		 push	 edx
  000ff	68 3d 01 00 00	 push	 317			; 0000013dH
  00104	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00107	8b 08		 mov	 ecx, DWORD PTR [eax]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _P_SPMAngle
  0010f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00112	89 45 f4	 mov	 DWORD PTR _mo$6[ebp], eax

; 9641 : 
; 9642 : 		if (mo)

  00115	83 7d f4 00	 cmp	 DWORD PTR _mo$6[ebp], 0
  00119	74 3d		 je	 SHORT $LN3@P_PlayerTh

; 9643 : 		{
; 9644 : 			short int i;
; 9645 : 			mo->flags |= MF_NOCLIPHEIGHT;

  0011b	8b 45 f4	 mov	 eax, DWORD PTR _mo$6[ebp]
  0011e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00121	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  00127	8b 55 f4	 mov	 edx, DWORD PTR _mo$6[ebp]
  0012a	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 9646 : 			for (i = 0; i < 32; i++)

  0012d	33 c0		 xor	 eax, eax
  0012f	66 89 45 f0	 mov	 WORD PTR _i$5[ebp], ax
  00133	eb 0c		 jmp	 SHORT $LN4@P_PlayerTh
$LN2@P_PlayerTh:
  00135	66 8b 45 f0	 mov	 ax, WORD PTR _i$5[ebp]
  00139	66 83 c0 01	 add	 ax, 1
  0013d	66 89 45 f0	 mov	 WORD PTR _i$5[ebp], ax
$LN4@P_PlayerTh:
  00141	0f bf 45 f0	 movsx	 eax, WORD PTR _i$5[ebp]
  00145	83 f8 20	 cmp	 eax, 32			; 00000020H
  00148	7d 0e		 jge	 SHORT $LN3@P_PlayerTh

; 9647 : 			{
; 9648 : 				// Debug drawing
; 9649 : //				if (i&1)
; 9650 : //					P_SpawnMobj(mo->x, mo->y, mo->z, MT_SPARK);
; 9651 : 				P_RailThinker(mo);

  0014a	8b 45 f4	 mov	 eax, DWORD PTR _mo$6[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _P_RailThinker
  00153	83 c4 04	 add	 esp, 4

; 9652 : 			}

  00156	eb dd		 jmp	 SHORT $LN2@P_PlayerTh
$LN3@P_PlayerTh:

; 9653 : 		}
; 9654 : 	}
; 9655 : #endif
; 9656 : 	if (player->pflags & PF_GLIDING)

  00158	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0015b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00161	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00167	74 46		 je	 SHORT $LN18@P_PlayerTh

; 9657 : 	{
; 9658 : 		if (player->mo->state - states < S_PLAY_ABL1 || player->mo->state - states > S_PLAY_ABL2)

  00169	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0016c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016e	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00171	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00176	99		 cdq
  00177	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0017c	f7 f9		 idiv	 ecx
  0017e	83 f8 15	 cmp	 eax, 21			; 00000015H
  00181	7c 1a		 jl	 SHORT $LN21@P_PlayerTh
  00183	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00186	8b 08		 mov	 ecx, DWORD PTR [eax]
  00188	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0018b	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00190	99		 cdq
  00191	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00196	f7 f9		 idiv	 ecx
  00198	83 f8 16	 cmp	 eax, 22			; 00000016H
  0019b	7e 10		 jle	 SHORT $LN20@P_PlayerTh
$LN21@P_PlayerTh:

; 9659 : 			P_SetPlayerMobjState(player->mo, S_PLAY_ABL1);

  0019d	6a 15		 push	 21			; 00000015H
  0019f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a4	51		 push	 ecx
  001a5	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  001aa	83 c4 08	 add	 esp, 8
$LN20@P_PlayerTh:

; 9660 : 	}

  001ad	eb 73		 jmp	 SHORT $LN22@P_PlayerTh
$LN18@P_PlayerTh:

; 9661 : 	else if ((player->pflags & PF_JUMPED) && !player->powers[pw_super]
; 9662 : 	          && (player->mo->state - states < S_PLAY_ATK1 || player->mo->state - states > S_PLAY_ATK4
; 9663 : 	         ) && player->charability2 == CA2_SPINDASH)

  001af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001b8	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  001be	74 62		 je	 SHORT $LN22@P_PlayerTh
  001c0	b8 04 00 00 00	 mov	 eax, 4
  001c5	6b c8 0f	 imul	 ecx, eax, 15
  001c8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001cb	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  001d0	75 50		 jne	 SHORT $LN22@P_PlayerTh
  001d2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d7	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  001da	2d 00 00 00 00	 sub	 eax, OFFSET _states
  001df	99		 cdq
  001e0	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  001e5	f7 f9		 idiv	 ecx
  001e7	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  001ea	7c 1a		 jl	 SHORT $LN23@P_PlayerTh
  001ec	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f1	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  001f4	2d 00 00 00 00	 sub	 eax, OFFSET _states
  001f9	99		 cdq
  001fa	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  001ff	f7 f9		 idiv	 ecx
  00201	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00204	7e 1c		 jle	 SHORT $LN22@P_PlayerTh
$LN23@P_PlayerTh:
  00206	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00209	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  00210	75 10		 jne	 SHORT $LN22@P_PlayerTh

; 9664 : 	{
; 9665 : 		P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  00212	6a 0c		 push	 12			; 0000000cH
  00214	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00217	8b 08		 mov	 ecx, DWORD PTR [eax]
  00219	51		 push	 ecx
  0021a	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0021f	83 c4 08	 add	 esp, 8
$LN22@P_PlayerTh:

; 9666 : 	}
; 9667 : 
; 9668 : 	if (player->bonuscount)

  00222	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00225	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0022c	74 15		 je	 SHORT $LN24@P_PlayerTh

; 9669 : 		player->bonuscount--;

  0022e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00231	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00237	83 e9 01	 sub	 ecx, 1
  0023a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0023d	89 8a b0 00 00
	00		 mov	 DWORD PTR [edx+176], ecx
$LN24@P_PlayerTh:

; 9670 : 
; 9671 : 	if (player->awayviewtics)

  00243	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00246	83 b8 ec 01 00
	00 00		 cmp	 DWORD PTR [eax+492], 0
  0024d	74 15		 je	 SHORT $LN25@P_PlayerTh

; 9672 : 		player->awayviewtics--;

  0024f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00252	8b 88 ec 01 00
	00		 mov	 ecx, DWORD PTR [eax+492]
  00258	83 e9 01	 sub	 ecx, 1
  0025b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0025e	89 8a ec 01 00
	00		 mov	 DWORD PTR [edx+492], ecx
$LN25@P_PlayerTh:

; 9673 : 
; 9674 : 	/// \note do this in the cheat code
; 9675 : 	if (player->pflags & PF_NOCLIP)

  00264	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00267	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0026d	83 e1 40	 and	 ecx, 64			; 00000040H
  00270	74 18		 je	 SHORT $LN26@P_PlayerTh

; 9676 : 		player->mo->flags |= MF_NOCLIP;

  00272	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00275	8b 08		 mov	 ecx, DWORD PTR [eax]
  00277	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0027a	81 ca 00 10 00
	00		 or	 edx, 4096		; 00001000H
  00280	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]
  00285	89 51 60	 mov	 DWORD PTR [ecx+96], edx
  00288	eb 1f		 jmp	 SHORT $LN28@P_PlayerTh
$LN26@P_PlayerTh:

; 9677 : 	else if (!cv_objectplace.value)

  0028a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00291	75 16		 jne	 SHORT $LN28@P_PlayerTh

; 9678 : 		player->mo->flags &= ~MF_NOCLIP;

  00293	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00296	8b 08		 mov	 ecx, DWORD PTR [eax]
  00298	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0029b	81 e2 ff ef ff
	ff		 and	 edx, -4097		; ffffefffH
  002a1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a6	89 51 60	 mov	 DWORD PTR [ecx+96], edx
$LN28@P_PlayerTh:

; 9679 : 
; 9680 : 	cmd = &player->cmd;

  002a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ac	83 c0 08	 add	 eax, 8
  002af	89 45 fc	 mov	 DWORD PTR _cmd$[ebp], eax

; 9681 : 
; 9682 : 	// Add some extra randomization.
; 9683 : 	if (cmd->forwardmove)

  002b2	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  002b5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002b8	85 c9		 test	 ecx, ecx
  002ba	74 06		 je	 SHORT $LN29@P_PlayerTh

; 9684 : 		P_Random();

  002bc	e8 00 00 00 00	 call	 _P_Random
  002c1	90		 npad	 1
$LN29@P_PlayerTh:

; 9685 : 
; 9686 : #ifdef PARANOIA
; 9687 : 	if (player->playerstate == PST_REBORN)
; 9688 : 		I_Error("player %"PRIdS" is in PST_REBORN\n", playeri);
; 9689 : #endif
; 9690 : 
; 9691 : 	if (gametype == GT_RACE)

  002c2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002c9	83 f8 02	 cmp	 eax, 2
  002cc	0f 85 8f 01 00
	00		 jne	 $LN40@P_PlayerTh

; 9692 : 	{
; 9693 : 		INT32 i;
; 9694 : 
; 9695 : 		// Check if all the players in the race have finished. If so, end the level.
; 9696 : 		for (i = 0; i < MAXPLAYERS; i++)

  002d2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  002d9	eb 09		 jmp	 SHORT $LN7@P_PlayerTh
$LN5@P_PlayerTh:
  002db	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  002de	83 c0 01	 add	 eax, 1
  002e1	89 45 ec	 mov	 DWORD PTR _i$4[ebp], eax
$LN7@P_PlayerTh:
  002e4	83 7d ec 20	 cmp	 DWORD PTR _i$4[ebp], 32	; 00000020H
  002e8	7d 31		 jge	 SHORT $LN6@P_PlayerTh

; 9697 : 		{
; 9698 : 			if (playeringame[i])

  002ea	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  002ed	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  002f5	74 22		 je	 SHORT $LN32@P_PlayerTh

; 9699 : 			{
; 9700 : 				if (!players[i].exiting && players[i].lives > 0)

  002f7	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$4[ebp], 508
  002fe	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  00305	75 12		 jne	 SHORT $LN32@P_PlayerTh
  00307	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$4[ebp], 508
  0030e	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR _players[eax+256], 0
  00315	7e 02		 jle	 SHORT $LN32@P_PlayerTh

; 9701 : 					break;

  00317	eb 02		 jmp	 SHORT $LN6@P_PlayerTh
$LN32@P_PlayerTh:

; 9702 : 			}
; 9703 : 		}

  00319	eb c0		 jmp	 SHORT $LN5@P_PlayerTh
$LN6@P_PlayerTh:

; 9704 : 
; 9705 : 		if (i == MAXPLAYERS && player->exiting == 3*TICRATE) // finished

  0031b	83 7d ec 20	 cmp	 DWORD PTR _i$4[ebp], 32	; 00000020H
  0031f	75 19		 jne	 SHORT $LN33@P_PlayerTh
  00321	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00324	83 b8 30 01 00
	00 69		 cmp	 DWORD PTR [eax+304], 105 ; 00000069H
  0032b	75 0d		 jne	 SHORT $LN33@P_PlayerTh

; 9706 : 			player->exiting = (14*TICRATE)/5 + 1;

  0032d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00330	c7 80 30 01 00
	00 63 00 00 00	 mov	 DWORD PTR [eax+304], 99	; 00000063H
$LN33@P_PlayerTh:

; 9707 : 
; 9708 : 		// If 10 seconds are left on the timer,
; 9709 : 		// begin the drown music for countdown!
; 9710 : 		if (countdown == 11*TICRATE - 1)

  0033a	81 3d 00 00 00
	00 80 01 00 00	 cmp	 DWORD PTR _countdown, 384 ; 00000180H
  00344	75 24		 jne	 SHORT $LN34@P_PlayerTh

; 9711 : 		{
; 9712 : 			if (P_IsLocalPlayer(player))

  00346	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  0034f	83 c4 04	 add	 esp, 4
  00352	85 c0		 test	 eax, eax
  00354	74 0f		 je	 SHORT $LN36@P_PlayerTh

; 9713 : 				S_ChangeMusic(mus_drown, false);

  00356	6a 00		 push	 0
  00358	68 12 04 00 00	 push	 1042			; 00000412H
  0035d	e8 00 00 00 00	 call	 _S_ChangeMusic
  00362	83 c4 08	 add	 esp, 8
$LN36@P_PlayerTh:

; 9714 : 		}

  00365	e9 f7 00 00 00	 jmp	 $LN40@P_PlayerTh
$LN34@P_PlayerTh:

; 9715 : 
; 9716 : 		// If you've hit the countdown and you haven't made
; 9717 : 		//  it to the exit, you're a goner!
; 9718 : 		else if (countdown == 1 && !player->exiting && player->lives > 0)

  0036a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _countdown, 1
  00371	0f 85 ea 00 00
	00		 jne	 $LN40@P_PlayerTh
  00377	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0037a	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00381	0f 85 da 00 00
	00		 jne	 $LN40@P_PlayerTh
  00387	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0038a	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  00391	0f 8e ca 00 00
	00		 jle	 $LN40@P_PlayerTh

; 9719 : 		{
; 9720 : 			if (netgame && player->health > 0)

  00397	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0039e	74 3d		 je	 SHORT $LN38@P_PlayerTh
  003a0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003a3	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  003a7	7e 34		 jle	 SHORT $LN38@P_PlayerTh

; 9721 : 				CONS_Printf(text[OUT_OF_TIME], player_names[player-players]);

  003a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003ac	2d 00 00 00 00	 sub	 eax, OFFSET _players
  003b1	99		 cdq
  003b2	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  003b7	f7 f9		 idiv	 ecx
  003b9	6b d0 16	 imul	 edx, eax, 22
  003bc	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  003c2	52		 push	 edx
  003c3	b8 04 00 00 00	 mov	 eax, 4
  003c8	69 c8 35 01 00
	00		 imul	 ecx, eax, 309
  003ce	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  003d4	52		 push	 edx
  003d5	e8 00 00 00 00	 call	 _CONS_Printf
  003da	83 c4 08	 add	 esp, 8
$LN38@P_PlayerTh:

; 9722 : 
; 9723 : 			player->pflags |= PF_TIMEOVER;

  003dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e0	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  003e6	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
  003ec	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003ef	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 9724 : 
; 9725 : 			if (player->pflags & PF_NIGHTSMODE)

  003f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003f8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  003fe	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00404	74 1c		 je	 SHORT $LN39@P_PlayerTh

; 9726 : 			{
; 9727 : 				P_DeNightserizePlayer(player);

  00406	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00409	50		 push	 eax
  0040a	e8 00 00 00 00	 call	 _P_DeNightserizePlayer
  0040f	83 c4 04	 add	 esp, 4

; 9728 : 				S_StartScreamSound(player->mo, sfx_lose);

  00412	6a 5b		 push	 91			; 0000005bH
  00414	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00417	8b 08		 mov	 ecx, DWORD PTR [eax]
  00419	51		 push	 ecx
  0041a	e8 00 00 00 00	 call	 _S_StartScreamSound
  0041f	83 c4 08	 add	 esp, 8
$LN39@P_PlayerTh:

; 9729 : 			}
; 9730 : 
; 9731 : 			player->lives = 1; // Starts the game over music

  00422	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00425	c7 80 00 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+256], 1

; 9732 : 			P_DamageMobj(player->mo, NULL, NULL, 10000);

  0042f	68 10 27 00 00	 push	 10000			; 00002710H
  00434	6a 00		 push	 0
  00436	6a 00		 push	 0
  00438	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0043b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0043d	51		 push	 ecx
  0043e	e8 00 00 00 00	 call	 _P_DamageMobj
  00443	83 c4 10	 add	 esp, 16			; 00000010H

; 9733 : 			player->lives = 0;

  00446	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00449	c7 80 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+256], 0

; 9734 : 
; 9735 : 			if (player->playerstate == PST_DEAD)

  00453	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00456	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0045a	75 05		 jne	 SHORT $LN40@P_PlayerTh

; 9736 : 				return;

  0045c	e9 27 0c 00 00	 jmp	 $LN1@P_PlayerTh
$LN40@P_PlayerTh:

; 9737 : 		}
; 9738 : 	}
; 9739 : 
; 9740 : 	// If it is set, start subtracting
; 9741 : 	if (player->exiting && player->exiting < 3*TICRATE)

  00461	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00464	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  0046b	74 21		 je	 SHORT $LN41@P_PlayerTh
  0046d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00470	83 b8 30 01 00
	00 69		 cmp	 DWORD PTR [eax+304], 105 ; 00000069H
  00477	73 15		 jae	 SHORT $LN41@P_PlayerTh

; 9742 : 		player->exiting--;

  00479	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0047c	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  00482	83 e9 01	 sub	 ecx, 1
  00485	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00488	89 8a 30 01 00
	00		 mov	 DWORD PTR [edx+304], ecx
$LN41@P_PlayerTh:

; 9743 : 
; 9744 : 	if (player->exiting && countdown2)

  0048e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00491	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00498	74 16		 je	 SHORT $LN42@P_PlayerTh
  0049a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _countdown2, 0
  004a1	74 0d		 je	 SHORT $LN42@P_PlayerTh

; 9745 : 		player->exiting = 5;

  004a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004a6	c7 80 30 01 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+304], 5
$LN42@P_PlayerTh:

; 9746 : 
; 9747 : 	if (player->exiting == 2 || countdown2 == 2)

  004b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004b3	83 b8 30 01 00
	00 02		 cmp	 DWORD PTR [eax+304], 2
  004ba	74 0d		 je	 SHORT $LN44@P_PlayerTh
  004bc	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _countdown2, 2
  004c3	0f 85 c7 00 00
	00		 jne	 $LN53@P_PlayerTh
$LN44@P_PlayerTh:

; 9748 : 	{
; 9749 : 		if (cv_playersforexit.value) // Count to be sure everyone's exited

  004c9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_playersforexit+20, 0
  004d0	0f 84 a3 00 00
	00		 je	 $LN45@P_PlayerTh

; 9750 : 		{
; 9751 : 			INT32 i;
; 9752 : 			INT32 numplayersingame = 0;

  004d6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _numplayersingame$2[ebp], 0

; 9753 : 			INT32 numplayersexiting = 0;

  004dd	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _numplayersexiting$1[ebp], 0

; 9754 : 
; 9755 : 			for (i = 0; i < MAXPLAYERS; i++)

  004e4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  004eb	eb 09		 jmp	 SHORT $LN10@P_PlayerTh
$LN8@P_PlayerTh:
  004ed	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  004f0	83 c0 01	 add	 eax, 1
  004f3	89 45 e8	 mov	 DWORD PTR _i$3[ebp], eax
$LN10@P_PlayerTh:
  004f6	83 7d e8 20	 cmp	 DWORD PTR _i$3[ebp], 32	; 00000020H
  004fa	7d 45		 jge	 SHORT $LN9@P_PlayerTh

; 9756 : 			{
; 9757 : 				if (!playeringame[i])

  004fc	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  004ff	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00507	75 02		 jne	 SHORT $LN47@P_PlayerTh

; 9758 : 					continue;

  00509	eb e2		 jmp	 SHORT $LN8@P_PlayerTh
$LN47@P_PlayerTh:

; 9759 : 
; 9760 : 				if (players[i].lives <= 0)

  0050b	69 45 e8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 508
  00512	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR _players[eax+256], 0
  00519	7f 02		 jg	 SHORT $LN48@P_PlayerTh

; 9761 : 					continue;

  0051b	eb d0		 jmp	 SHORT $LN8@P_PlayerTh
$LN48@P_PlayerTh:

; 9762 : 
; 9763 : 				numplayersingame++;

  0051d	8b 45 e4	 mov	 eax, DWORD PTR _numplayersingame$2[ebp]
  00520	83 c0 01	 add	 eax, 1
  00523	89 45 e4	 mov	 DWORD PTR _numplayersingame$2[ebp], eax

; 9764 : 
; 9765 : 				if (players[i].exiting)

  00526	69 45 e8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 508
  0052d	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  00534	74 09		 je	 SHORT $LN49@P_PlayerTh

; 9766 : 					numplayersexiting++;

  00536	8b 45 e0	 mov	 eax, DWORD PTR _numplayersexiting$1[ebp]
  00539	83 c0 01	 add	 eax, 1
  0053c	89 45 e0	 mov	 DWORD PTR _numplayersexiting$1[ebp], eax
$LN49@P_PlayerTh:

; 9767 : 			}

  0053f	eb ac		 jmp	 SHORT $LN8@P_PlayerTh
$LN9@P_PlayerTh:

; 9768 : 
; 9769 : 			if (numplayersexiting >= numplayersingame)

  00541	8b 45 e0	 mov	 eax, DWORD PTR _numplayersexiting$1[ebp]
  00544	3b 45 e4	 cmp	 eax, DWORD PTR _numplayersingame$2[ebp]
  00547	7c 19		 jl	 SHORT $LN50@P_PlayerTh

; 9770 : 			{
; 9771 : 				if (server)

  00549	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00550	74 0e		 je	 SHORT $LN52@P_PlayerTh

; 9772 : 					SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  00552	6a 00		 push	 0
  00554	6a 00		 push	 0
  00556	6a 07		 push	 7
  00558	e8 00 00 00 00	 call	 _SendNetXCmd
  0055d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@P_PlayerTh:

; 9773 : 			}

  00560	eb 15		 jmp	 SHORT $LN51@P_PlayerTh
$LN50@P_PlayerTh:

; 9774 : 			else
; 9775 : 				player->exiting++;

  00562	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00565	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  0056b	83 c1 01	 add	 ecx, 1
  0056e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00571	89 8a 30 01 00
	00		 mov	 DWORD PTR [edx+304], ecx
$LN51@P_PlayerTh:

; 9776 : 		}

  00577	eb 17		 jmp	 SHORT $LN53@P_PlayerTh
$LN45@P_PlayerTh:

; 9777 : 		else
; 9778 : 		{
; 9779 : 			if (server)

  00579	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00580	74 0e		 je	 SHORT $LN53@P_PlayerTh

; 9780 : 				SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  00582	6a 00		 push	 0
  00584	6a 00		 push	 0
  00586	6a 07		 push	 7
  00588	e8 00 00 00 00	 call	 _SendNetXCmd
  0058d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN53@P_PlayerTh:

; 9781 : 		}
; 9782 : 	}
; 9783 : 
; 9784 : 	// check water content, set stuff in mobj
; 9785 : 	P_MobjCheckWater(player->mo);

  00590	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00593	8b 08		 mov	 ecx, DWORD PTR [eax]
  00595	51		 push	 ecx
  00596	e8 00 00 00 00	 call	 _P_MobjCheckWater
  0059b	83 c4 04	 add	 esp, 4

; 9786 : 
; 9787 : 	player->onconveyor = 0;

  0059e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005a1	c7 80 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+484], 0

; 9788 : 	// check special sectors : damage & secrets
; 9789 : 
; 9790 : 	if (!player->spectator)

  005ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005ae	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  005b5	85 c9		 test	 ecx, ecx
  005b7	75 0c		 jne	 SHORT $LN54@P_PlayerTh

; 9791 : 		P_PlayerInSpecialSector(player);

  005b9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005bc	50		 push	 eax
  005bd	e8 00 00 00 00	 call	 _P_PlayerInSpecialSector
  005c2	83 c4 04	 add	 esp, 4
$LN54@P_PlayerTh:

; 9792 : 
; 9793 : 	if (player->playerstate == PST_DEAD)

  005c5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005c8	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  005cc	75 4b		 jne	 SHORT $LN55@P_PlayerTh

; 9794 : 	{
; 9795 : 		player->mo->flags2 &= ~MF2_SHADOW;

  005ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d3	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  005d9	81 e2 ff ff ff
	fe		 and	 edx, -16777217		; feffffffH
  005df	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  005e4	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 9796 : 		// show the multiplayer rankings while dead
; 9797 : 		if (player == &players[displayplayer])

  005ea	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  005f4	05 00 00 00 00	 add	 eax, OFFSET _players
  005f9	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  005fc	75 0a		 jne	 SHORT $LN56@P_PlayerTh

; 9798 : 			playerdeadview = true;

  005fe	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _playerdeadview, 1
$LN56@P_PlayerTh:

; 9799 : 
; 9800 : 		P_DeathThink(player);

  00608	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0060b	50		 push	 eax
  0060c	e8 00 00 00 00	 call	 _P_DeathThink
  00611	83 c4 04	 add	 esp, 4

; 9801 : 
; 9802 : 		return;

  00614	e9 6f 0a 00 00	 jmp	 $LN1@P_PlayerTh
$LN55@P_PlayerTh:

; 9803 : 	}
; 9804 : 
; 9805 : 	// Make sure spectators always have a score and ring count of 0.
; 9806 : 	if (player->spectator)

  00619	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0061c	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00623	85 c9		 test	 ecx, ecx
  00625	74 26		 je	 SHORT $LN57@P_PlayerTh

; 9807 : 	{
; 9808 : 		player->score = 0;

  00627	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0062a	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+188], 0

; 9809 : 		player->mo->health = 1;

  00634	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00637	8b 08		 mov	 ecx, DWORD PTR [eax]
  00639	c7 81 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+140], 1

; 9810 : 		player->health = 1;

  00643	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00646	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1
$LN57@P_PlayerTh:

; 9811 : 	}
; 9812 : 
; 9813 : 	if (gametype == GT_RACE)

  0064d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00654	83 f8 02	 cmp	 eax, 2
  00657	75 1b		 jne	 SHORT $LN58@P_PlayerTh

; 9814 : 	{
; 9815 : 		if (player->lives <= 0)

  00659	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0065c	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  00663	7f 0d		 jg	 SHORT $LN60@P_PlayerTh

; 9816 : 			player->lives = 3;

  00665	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00668	c7 80 00 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+256], 3
$LN60@P_PlayerTh:

; 9817 : 	}

  00672	eb 74		 jmp	 SHORT $LN65@P_PlayerTh
$LN58@P_PlayerTh:

; 9818 : 	else if (gametype == GT_COOP && (netgame || multiplayer) && player->lives <= 0)

  00674	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0067b	85 c0		 test	 eax, eax
  0067d	75 69		 jne	 SHORT $LN65@P_PlayerTh
  0067f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00686	75 09		 jne	 SHORT $LN62@P_PlayerTh
  00688	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0068f	74 57		 je	 SHORT $LN65@P_PlayerTh
$LN62@P_PlayerTh:
  00691	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00694	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  0069b	7f 4b		 jg	 SHORT $LN65@P_PlayerTh

; 9819 : 	{
; 9820 : 		// In Co-Op, replenish a user's lives if they are depleted.
; 9821 : 		if (ultimatemode)

  0069d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  006a4	85 c0		 test	 eax, eax
  006a6	74 0f		 je	 SHORT $LN63@P_PlayerTh

; 9822 : 			player->lives = 1;

  006a8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006ab	c7 80 00 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+256], 1
  006b5	eb 0d		 jmp	 SHORT $LN64@P_PlayerTh
$LN63@P_PlayerTh:

; 9823 : 		else
; 9824 : 			player->lives = 3;

  006b7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006ba	c7 80 00 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+256], 3
$LN64@P_PlayerTh:

; 9825 : 
; 9826 : 		if (player->continues == 0 && !ultimatemode)

  006c4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006c7	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [eax+260], 0
  006ce	75 18		 jne	 SHORT $LN65@P_PlayerTh
  006d0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  006d7	85 c0		 test	 eax, eax
  006d9	75 0d		 jne	 SHORT $LN65@P_PlayerTh

; 9827 : 			player->continues = 1;

  006db	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006de	c7 80 04 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+260], 1
$LN65@P_PlayerTh:

; 9828 : 	}
; 9829 : 
; 9830 : 	if (player == &players[displayplayer])

  006e8	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  006f2	05 00 00 00 00	 add	 eax, OFFSET _players
  006f7	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  006fa	75 0a		 jne	 SHORT $LN66@P_PlayerTh

; 9831 : 		playerdeadview = false;

  006fc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _playerdeadview, 0
$LN66@P_PlayerTh:

; 9832 : 
; 9833 : 	if (gametype == GT_RACE && leveltime < 4*TICRATE)

  00706	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0070d	83 f8 02	 cmp	 eax, 2
  00710	75 2d		 jne	 SHORT $LN67@P_PlayerTh
  00712	81 3d 00 00 00
	00 8c 00 00 00	 cmp	 DWORD PTR _leveltime, 140 ; 0000008cH
  0071c	73 21		 jae	 SHORT $LN67@P_PlayerTh

; 9834 : 	{
; 9835 : 		cmd->buttons &= BT_USE; // Remove all buttons except BT_USE

  0071e	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00721	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00725	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  0072b	8b 55 fc	 mov	 edx, DWORD PTR _cmd$[ebp]
  0072e	66 89 4a 06	 mov	 WORD PTR [edx+6], cx

; 9836 : 		cmd->forwardmove = 0;

  00732	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00735	c6 00 00	 mov	 BYTE PTR [eax], 0

; 9837 : 		cmd->sidemove = 0;

  00738	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  0073b	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LN67@P_PlayerTh:

; 9838 : 	}
; 9839 : 
; 9840 : 	// Move around.
; 9841 : 	// Reactiontime is used to prevent movement
; 9842 : 	//  for a bit after a teleport.
; 9843 : 	if (player->mo->reactiontime)

  0073f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00742	8b 08		 mov	 ecx, DWORD PTR [eax]
  00744	83 b9 9c 00 00
	00 00		 cmp	 DWORD PTR [ecx+156], 0
  0074b	74 1e		 je	 SHORT $LN68@P_PlayerTh

; 9844 : 		player->mo->reactiontime--;

  0074d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00750	8b 08		 mov	 ecx, DWORD PTR [eax]
  00752	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  00758	83 ea 01	 sub	 edx, 1
  0075b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0075e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00760	89 91 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], edx
  00766	e9 98 02 00 00	 jmp	 $LN71@P_PlayerTh
$LN68@P_PlayerTh:

; 9845 : 	else if (player->mo->tracer && player->mo->tracer->type == MT_TUBEWAYPOINT)

  0076b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0076e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00770	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00777	0f 84 7a 02 00
	00		 je	 $LN70@P_PlayerTh
  0077d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00780	8b 08		 mov	 ecx, DWORD PTR [eax]
  00782	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00788	81 7a 7c 06 01
	00 00		 cmp	 DWORD PTR [edx+124], 262 ; 00000106H
  0078f	0f 85 62 02 00
	00		 jne	 $LN70@P_PlayerTh

; 9846 : 	{
; 9847 : 		if (player->pflags & PF_ROPEHANG)

  00795	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00798	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0079e	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  007a4	0f 84 ba 00 00
	00		 je	 $LN72@P_PlayerTh

; 9848 : 		{
; 9849 : 			if ((netgame || (player == &players[consoleplayer]
; 9850 : 				&& !cv_analog.value) || (splitscreen

  007aa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  007b1	75 43		 jne	 SHORT $LN75@P_PlayerTh
  007b3	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  007bd	05 00 00 00 00	 add	 eax, OFFSET _players
  007c2	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  007c5	75 09		 jne	 SHORT $LN76@P_PlayerTh
  007c7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  007ce	74 26		 je	 SHORT $LN75@P_PlayerTh
$LN76@P_PlayerTh:
  007d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  007d7	74 2f		 je	 SHORT $LN74@P_PlayerTh
  007d9	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  007e3	05 00 00 00 00	 add	 eax, OFFSET _players
  007e8	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  007eb	75 1b		 jne	 SHORT $LN74@P_PlayerTh
  007ed	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  007f4	75 12		 jne	 SHORT $LN74@P_PlayerTh
$LN75@P_PlayerTh:

; 9851 : 				&& player == &players[secondarydisplayplayer] && !cv_analog2.value)))
; 9852 : 			{
; 9853 : 				player->mo->angle = (cmd->angleturn<<16 /* not FRACBITS */);

  007f6	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  007f9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  007fd	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00800	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00803	8b 02		 mov	 eax, DWORD PTR [edx]
  00805	89 48 24	 mov	 DWORD PTR [eax+36], ecx
$LN74@P_PlayerTh:

; 9854 : 			}
; 9855 : 
; 9856 : 			ticruned++;

  00808	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticruned
  0080d	83 c0 01	 add	 eax, 1
  00810	a3 00 00 00 00	 mov	 DWORD PTR _ticruned, eax

; 9857 : 			if ((cmd->angleturn & TICCMD_RECEIVED) == 0)

  00815	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00818	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0081c	83 e1 01	 and	 ecx, 1
  0081f	75 0d		 jne	 SHORT $LN77@P_PlayerTh

; 9858 : 				ticmiss++;

  00821	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticmiss
  00826	83 c0 01	 add	 eax, 1
  00829	a3 00 00 00 00	 mov	 DWORD PTR _ticmiss, eax
$LN77@P_PlayerTh:

; 9859 : 
; 9860 : 			P_DoRopeHang(player, false);

  0082e	6a 00		 push	 0
  00830	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00833	50		 push	 eax
  00834	e8 00 00 00 00	 call	 _P_DoRopeHang
  00839	83 c4 08	 add	 esp, 8

; 9861 : 			P_SetPlayerMobjState(player->mo, S_PLAY_CARRY);

  0083c	6a 29		 push	 41			; 00000029H
  0083e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00841	8b 08		 mov	 ecx, DWORD PTR [eax]
  00843	51		 push	 ecx
  00844	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00849	83 c4 08	 add	 esp, 8

; 9862 : 			P_DoJumpStuff(player, &player->cmd);

  0084c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0084f	83 c0 08	 add	 eax, 8
  00852	50		 push	 eax
  00853	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00856	51		 push	 ecx
  00857	e8 00 00 00 00	 call	 _P_DoJumpStuff
  0085c	83 c4 08	 add	 esp, 8

; 9863 : 		}

  0085f	e9 18 01 00 00	 jmp	 $LN84@P_PlayerTh
$LN72@P_PlayerTh:

; 9864 : 		else if (player->pflags & PF_MINECART)

  00864	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00867	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0086d	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  00873	0f 84 a7 00 00
	00		 je	 $LN78@P_PlayerTh

; 9865 : 		{
; 9866 : 			if ((netgame || (player == &players[consoleplayer]
; 9867 : 				&& !cv_analog.value) || (splitscreen

  00879	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00880	75 43		 jne	 SHORT $LN81@P_PlayerTh
  00882	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0088c	05 00 00 00 00	 add	 eax, OFFSET _players
  00891	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00894	75 09		 jne	 SHORT $LN82@P_PlayerTh
  00896	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  0089d	74 26		 je	 SHORT $LN81@P_PlayerTh
$LN82@P_PlayerTh:
  0089f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  008a6	74 2f		 je	 SHORT $LN80@P_PlayerTh
  008a8	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  008b2	05 00 00 00 00	 add	 eax, OFFSET _players
  008b7	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  008ba	75 1b		 jne	 SHORT $LN80@P_PlayerTh
  008bc	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  008c3	75 12		 jne	 SHORT $LN80@P_PlayerTh
$LN81@P_PlayerTh:

; 9868 : 				&& player == &players[secondarydisplayplayer] && !cv_analog2.value)))
; 9869 : 			{
; 9870 : 				player->mo->angle = (cmd->angleturn<<16 /* not FRACBITS */);

  008c5	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  008c8	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  008cc	c1 e1 10	 shl	 ecx, 16			; 00000010H
  008cf	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  008d2	8b 02		 mov	 eax, DWORD PTR [edx]
  008d4	89 48 24	 mov	 DWORD PTR [eax+36], ecx
$LN80@P_PlayerTh:

; 9871 : 			}
; 9872 : 
; 9873 : 			ticruned++;

  008d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticruned
  008dc	83 c0 01	 add	 eax, 1
  008df	a3 00 00 00 00	 mov	 DWORD PTR _ticruned, eax

; 9874 : 			if ((cmd->angleturn & TICCMD_RECEIVED) == 0)

  008e4	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  008e7	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  008eb	83 e1 01	 and	 ecx, 1
  008ee	75 0d		 jne	 SHORT $LN83@P_PlayerTh

; 9875 : 				ticmiss++;

  008f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _ticmiss
  008f5	83 c0 01	 add	 eax, 1
  008f8	a3 00 00 00 00	 mov	 DWORD PTR _ticmiss, eax
$LN83@P_PlayerTh:

; 9876 : 
; 9877 : 			P_DoRopeHang(player, true);

  008fd	6a 01		 push	 1
  008ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00902	50		 push	 eax
  00903	e8 00 00 00 00	 call	 _P_DoRopeHang
  00908	83 c4 08	 add	 esp, 8

; 9878 : 			P_DoJumpStuff(player, &player->cmd);

  0090b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0090e	83 c0 08	 add	 eax, 8
  00911	50		 push	 eax
  00912	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00915	51		 push	 ecx
  00916	e8 00 00 00 00	 call	 _P_DoJumpStuff
  0091b	83 c4 08	 add	 esp, 8

; 9879 : 		}

  0091e	eb 5c		 jmp	 SHORT $LN84@P_PlayerTh
$LN78@P_PlayerTh:

; 9880 : 		else
; 9881 : 		{
; 9882 : 			P_DoZoomTube(player);

  00920	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00923	50		 push	 eax
  00924	e8 00 00 00 00	 call	 _P_DoZoomTube
  00929	83 c4 04	 add	 esp, 4

; 9883 : 			if ((player->mo->state - states < S_PLAY_ATK1
; 9884 : 				|| player->mo->state - states > S_PLAY_ATK4) && player->charability2 == CA2_SPINDASH)

  0092c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0092f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00931	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00934	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00939	99		 cdq
  0093a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0093f	f7 f9		 idiv	 ecx
  00941	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  00944	7c 1a		 jl	 SHORT $LN85@P_PlayerTh
  00946	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00949	8b 08		 mov	 ecx, DWORD PTR [eax]
  0094b	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0094e	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00953	99		 cdq
  00954	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00959	f7 f9		 idiv	 ecx
  0095b	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0095e	7e 1c		 jle	 SHORT $LN84@P_PlayerTh
$LN85@P_PlayerTh:
  00960	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00963	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [eax+220], 0
  0096a	75 10		 jne	 SHORT $LN84@P_PlayerTh

; 9885 : 				P_SetPlayerMobjState(player->mo, S_PLAY_ATK1);

  0096c	6a 0c		 push	 12			; 0000000cH
  0096e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00971	8b 08		 mov	 ecx, DWORD PTR [eax]
  00973	51		 push	 ecx
  00974	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00979	83 c4 08	 add	 esp, 8
$LN84@P_PlayerTh:

; 9886 : 		}
; 9887 : 
; 9888 : 		if (!player->exiting)

  0097c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0097f	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00986	75 49		 jne	 SHORT $LN86@P_PlayerTh

; 9889 : 		{
; 9890 : 			if (gametype == GT_RACE)

  00988	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0098f	83 f8 02	 cmp	 eax, 2
  00992	75 2e		 jne	 SHORT $LN89@P_PlayerTh

; 9891 : 			{
; 9892 : 				if (leveltime >= 4*TICRATE)

  00994	81 3d 00 00 00
	00 8c 00 00 00	 cmp	 DWORD PTR _leveltime, 140 ; 0000008cH
  0099e	72 15		 jb	 SHORT $LN88@P_PlayerTh

; 9893 : 					player->realtime = leveltime - 4*TICRATE;

  009a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  009a5	2d 8c 00 00 00	 sub	 eax, 140		; 0000008cH
  009aa	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  009ad	89 81 54 01 00
	00		 mov	 DWORD PTR [ecx+340], eax
  009b3	eb 0d		 jmp	 SHORT $LN89@P_PlayerTh
$LN88@P_PlayerTh:

; 9894 : 				else
; 9895 : 					player->realtime = 0;

  009b5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009b8	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0
$LN89@P_PlayerTh:

; 9896 : 			}
; 9897 : 			player->realtime = leveltime;

  009c2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  009cb	89 88 54 01 00
	00		 mov	 DWORD PTR [eax+340], ecx
$LN86@P_PlayerTh:

; 9898 : 		}
; 9899 : 
; 9900 : 		P_DoSuperStuff(player);

  009d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009d4	50		 push	 eax
  009d5	e8 00 00 00 00	 call	 _P_DoSuperStuff
  009da	83 c4 04	 add	 esp, 4

; 9901 : 		P_CheckSneakerAndLivesTimer(player);

  009dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009e0	50		 push	 eax
  009e1	e8 00 00 00 00	 call	 _P_CheckSneakerAndLivesTimer
  009e6	83 c4 04	 add	 esp, 4

; 9902 : 		P_CheckUnderwaterAndSpaceTimer(player);

  009e9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009ec	50		 push	 eax
  009ed	e8 00 00 00 00	 call	 _P_CheckUnderwaterAndSpaceTimer
  009f2	83 c4 04	 add	 esp, 4

; 9903 : 	}

  009f5	eb 0c		 jmp	 SHORT $LN71@P_PlayerTh
$LN70@P_PlayerTh:

; 9904 : 	else
; 9905 : 		P_MovePlayer(player);

  009f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009fa	50		 push	 eax
  009fb	e8 00 00 00 00	 call	 _P_MovePlayer
  00a00	83 c4 04	 add	 esp, 4
$LN71@P_PlayerTh:

; 9906 : 
; 9907 : 	// check for use
; 9908 : 	if (!(player->pflags & PF_NIGHTSMODE))

  00a03	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a06	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a0c	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00a12	75 49		 jne	 SHORT $LN92@P_PlayerTh

; 9909 : 	{
; 9910 : 		if (cmd->buttons & BT_USE)

  00a14	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00a17	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00a1b	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00a21	74 25		 je	 SHORT $LN91@P_PlayerTh

; 9911 : 		{
; 9912 : 			if (!(player->pflags & PF_USEDOWN))

  00a23	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a26	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a2c	83 e1 04	 and	 ecx, 4
  00a2f	75 15		 jne	 SHORT $LN93@P_PlayerTh

; 9913 : 				player->pflags |= PF_USEDOWN;

  00a31	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a34	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a3a	83 c9 04	 or	 ecx, 4
  00a3d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a40	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN93@P_PlayerTh:

; 9914 : 		}

  00a46	eb 15		 jmp	 SHORT $LN92@P_PlayerTh
$LN91@P_PlayerTh:

; 9915 : 		else
; 9916 : 			player->pflags &= ~PF_USEDOWN;

  00a48	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a4b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a51	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00a54	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a57	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN92@P_PlayerTh:

; 9917 : 	}
; 9918 : 
; 9919 : 	// Counters, time dependent power ups.
; 9920 : 	// Time Bonus & Ring Bonus count settings
; 9921 : 
; 9922 : 	if (player->splish)

  00a5d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a60	83 b8 2c 01 00
	00 00		 cmp	 DWORD PTR [eax+300], 0
  00a67	74 15		 je	 SHORT $LN94@P_PlayerTh

; 9923 : 		player->splish--;

  00a69	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a6c	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  00a72	83 e9 01	 sub	 ecx, 1
  00a75	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a78	89 8a 2c 01 00
	00		 mov	 DWORD PTR [edx+300], ecx
$LN94@P_PlayerTh:

; 9924 : 
; 9925 : 	// Strength counts up to diminish fade.
; 9926 : 	if (player->powers[pw_sneakers])

  00a7e	b8 04 00 00 00	 mov	 eax, 4
  00a83	c1 e0 00	 shl	 eax, 0
  00a86	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a89	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00a8e	74 21		 je	 SHORT $LN95@P_PlayerTh

; 9927 : 		player->powers[pw_sneakers]--;

  00a90	b8 04 00 00 00	 mov	 eax, 4
  00a95	c1 e0 00	 shl	 eax, 0
  00a98	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00a9b	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00a9f	83 ea 01	 sub	 edx, 1
  00aa2	b8 04 00 00 00	 mov	 eax, 4
  00aa7	c1 e0 00	 shl	 eax, 0
  00aaa	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00aad	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN95@P_PlayerTh:

; 9928 : 
; 9929 : 	if (player->powers[pw_invulnerability])

  00ab1	b8 04 00 00 00	 mov	 eax, 4
  00ab6	6b c8 00	 imul	 ecx, eax, 0
  00ab9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00abc	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00ac1	74 21		 je	 SHORT $LN96@P_PlayerTh

; 9930 : 		player->powers[pw_invulnerability]--;

  00ac3	b8 04 00 00 00	 mov	 eax, 4
  00ac8	6b c8 00	 imul	 ecx, eax, 0
  00acb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ace	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00ad2	83 e8 01	 sub	 eax, 1
  00ad5	b9 04 00 00 00	 mov	 ecx, 4
  00ada	6b d1 00	 imul	 edx, ecx, 0
  00add	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00ae0	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN96@P_PlayerTh:

; 9931 : 
; 9932 : 	if (player->powers[pw_flashing] > 0 && ((player->pflags & PF_NIGHTSMODE) || player->powers[pw_flashing] < flashingtics))

  00ae4	b8 04 00 00 00	 mov	 eax, 4
  00ae9	d1 e0		 shl	 eax, 1
  00aeb	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00aee	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00af3	7e 46		 jle	 SHORT $LN97@P_PlayerTh
  00af5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00af8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00afe	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00b04	75 16		 jne	 SHORT $LN98@P_PlayerTh
  00b06	b8 04 00 00 00	 mov	 eax, 4
  00b0b	d1 e0		 shl	 eax, 1
  00b0d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b10	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00b14	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _flashingtics
  00b1a	7d 1f		 jge	 SHORT $LN97@P_PlayerTh
$LN98@P_PlayerTh:

; 9933 : 		player->powers[pw_flashing]--;

  00b1c	b8 04 00 00 00	 mov	 eax, 4
  00b21	d1 e0		 shl	 eax, 1
  00b23	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b26	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00b2a	83 ea 01	 sub	 edx, 1
  00b2d	b8 04 00 00 00	 mov	 eax, 4
  00b32	d1 e0		 shl	 eax, 1
  00b34	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b37	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN97@P_PlayerTh:

; 9934 : 
; 9935 : 	if (player->powers[pw_tailsfly] && player->charability != CA_SWIM && !(player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]))) // tails fly counter

  00b3b	b8 04 00 00 00	 mov	 eax, 4
  00b40	6b c8 05	 imul	 ecx, eax, 5
  00b43	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b46	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00b4b	74 56		 je	 SHORT $LN99@P_PlayerTh
  00b4d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b50	83 b8 d8 00 00
	00 06		 cmp	 DWORD PTR [eax+216], 6
  00b57	74 4a		 je	 SHORT $LN99@P_PlayerTh
  00b59	b8 04 00 00 00	 mov	 eax, 4
  00b5e	6b c8 0f	 imul	 ecx, eax, 15
  00b61	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b64	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00b69	74 17		 je	 SHORT $LN100@P_PlayerTh
  00b6b	b8 04 00 00 00	 mov	 eax, 4
  00b70	6b c8 18	 imul	 ecx, eax, 24
  00b73	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b76	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00b7a	83 e0 7f	 and	 eax, 127		; 0000007fH
  00b7d	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00b80	74 21		 je	 SHORT $LN99@P_PlayerTh
$LN100@P_PlayerTh:

; 9936 : 		player->powers[pw_tailsfly]--;

  00b82	b8 04 00 00 00	 mov	 eax, 4
  00b87	6b c8 05	 imul	 ecx, eax, 5
  00b8a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b8d	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00b91	83 e8 01	 sub	 eax, 1
  00b94	b9 04 00 00 00	 mov	 ecx, 4
  00b99	6b d1 05	 imul	 edx, ecx, 5
  00b9c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00b9f	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN99@P_PlayerTh:

; 9937 : 
; 9938 : 	if (player->powers[pw_underwater] && ((player->pflags & PF_GODMODE) || (player->powers[pw_watershield])))

  00ba3	b8 04 00 00 00	 mov	 eax, 4
  00ba8	6b c8 06	 imul	 ecx, eax, 6
  00bab	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bae	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00bb3	74 56		 je	 SHORT $LN101@P_PlayerTh
  00bb5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bb8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00bbe	83 e1 20	 and	 ecx, 32			; 00000020H
  00bc1	75 12		 jne	 SHORT $LN103@P_PlayerTh
  00bc3	b8 04 00 00 00	 mov	 eax, 4
  00bc8	6b c8 0b	 imul	 ecx, eax, 11
  00bcb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bce	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00bd3	74 36		 je	 SHORT $LN101@P_PlayerTh
$LN103@P_PlayerTh:

; 9939 : 	{
; 9940 : 		if (player->powers[pw_underwater] <= 12*TICRATE+1)

  00bd5	b8 04 00 00 00	 mov	 eax, 4
  00bda	6b c8 06	 imul	 ecx, eax, 6
  00bdd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00be0	81 7c 0a 38 a5
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 421 ; 000001a5H
  00be8	7f 0c		 jg	 SHORT $LN104@P_PlayerTh

; 9941 : 			P_RestoreMusic(player); //incase they were about to drown

  00bea	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bed	50		 push	 eax
  00bee	e8 00 00 00 00	 call	 _P_RestoreMusic
  00bf3	83 c4 04	 add	 esp, 4
$LN104@P_PlayerTh:

; 9942 : 
; 9943 : 		player->powers[pw_underwater] = 0;

  00bf6	b8 04 00 00 00	 mov	 eax, 4
  00bfb	6b c8 06	 imul	 ecx, eax, 6
  00bfe	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c01	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 9944 : 	}

  00c09	eb 5f		 jmp	 SHORT $LN105@P_PlayerTh
$LN101@P_PlayerTh:

; 9945 : 	else if (player->powers[pw_underwater] && !(maptol & TOL_NIGHTS) && !((netgame || multiplayer) && player->spectator)) // underwater timer

  00c0b	b8 04 00 00 00	 mov	 eax, 4
  00c10	6b c8 06	 imul	 ecx, eax, 6
  00c13	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c16	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c1b	74 4d		 je	 SHORT $LN105@P_PlayerTh
  00c1d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00c24	83 e0 40	 and	 eax, 64			; 00000040H
  00c27	75 41		 jne	 SHORT $LN105@P_PlayerTh
  00c29	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00c30	75 09		 jne	 SHORT $LN107@P_PlayerTh
  00c32	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00c39	74 0e		 je	 SHORT $LN106@P_PlayerTh
$LN107@P_PlayerTh:
  00c3b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c3e	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00c45	85 c9		 test	 ecx, ecx
  00c47	75 21		 jne	 SHORT $LN105@P_PlayerTh
$LN106@P_PlayerTh:

; 9946 : 		player->powers[pw_underwater]--;

  00c49	b8 04 00 00 00	 mov	 eax, 4
  00c4e	6b c8 06	 imul	 ecx, eax, 6
  00c51	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c54	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00c58	83 e8 01	 sub	 eax, 1
  00c5b	b9 04 00 00 00	 mov	 ecx, 4
  00c60	6b d1 06	 imul	 edx, ecx, 6
  00c63	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00c66	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN105@P_PlayerTh:

; 9947 : 
; 9948 : 	if (player->powers[pw_spacetime] && ((player->pflags & PF_GODMODE) || (player->powers[pw_watershield])))

  00c6a	b8 04 00 00 00	 mov	 eax, 4
  00c6f	6b c8 07	 imul	 ecx, eax, 7
  00c72	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c75	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c7a	74 35		 je	 SHORT $LN108@P_PlayerTh
  00c7c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c7f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00c85	83 e1 20	 and	 ecx, 32			; 00000020H
  00c88	75 12		 jne	 SHORT $LN110@P_PlayerTh
  00c8a	b8 04 00 00 00	 mov	 eax, 4
  00c8f	6b c8 0b	 imul	 ecx, eax, 11
  00c92	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c95	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c9a	74 15		 je	 SHORT $LN108@P_PlayerTh
$LN110@P_PlayerTh:

; 9949 : 		player->powers[pw_spacetime] = 0;

  00c9c	b8 04 00 00 00	 mov	 eax, 4
  00ca1	6b c8 07	 imul	 ecx, eax, 7
  00ca4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ca7	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
  00caf	eb 5f		 jmp	 SHORT $LN111@P_PlayerTh
$LN108@P_PlayerTh:

; 9950 : 	else if (player->powers[pw_spacetime] && !(maptol & TOL_NIGHTS) && !((netgame || multiplayer) && player->spectator)) // underwater timer

  00cb1	b8 04 00 00 00	 mov	 eax, 4
  00cb6	6b c8 07	 imul	 ecx, eax, 7
  00cb9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00cbc	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00cc1	74 4d		 je	 SHORT $LN111@P_PlayerTh
  00cc3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00cca	83 e0 40	 and	 eax, 64			; 00000040H
  00ccd	75 41		 jne	 SHORT $LN111@P_PlayerTh
  00ccf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00cd6	75 09		 jne	 SHORT $LN113@P_PlayerTh
  00cd8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00cdf	74 0e		 je	 SHORT $LN112@P_PlayerTh
$LN113@P_PlayerTh:
  00ce1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ce4	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00ceb	85 c9		 test	 ecx, ecx
  00ced	75 21		 jne	 SHORT $LN111@P_PlayerTh
$LN112@P_PlayerTh:

; 9951 : 		player->powers[pw_spacetime]--;

  00cef	b8 04 00 00 00	 mov	 eax, 4
  00cf4	6b c8 07	 imul	 ecx, eax, 7
  00cf7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00cfa	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00cfe	83 e8 01	 sub	 eax, 1
  00d01	b9 04 00 00 00	 mov	 ecx, 4
  00d06	6b d1 07	 imul	 edx, ecx, 7
  00d09	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d0c	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN111@P_PlayerTh:

; 9952 : 
; 9953 : 	if (player->powers[pw_gravityboots])

  00d10	b8 04 00 00 00	 mov	 eax, 4
  00d15	c1 e0 04	 shl	 eax, 4
  00d18	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d1b	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00d20	74 21		 je	 SHORT $LN114@P_PlayerTh

; 9954 : 		player->powers[pw_gravityboots]--;

  00d22	b8 04 00 00 00	 mov	 eax, 4
  00d27	c1 e0 04	 shl	 eax, 4
  00d2a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d2d	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00d31	83 ea 01	 sub	 edx, 1
  00d34	b8 04 00 00 00	 mov	 eax, 4
  00d39	c1 e0 04	 shl	 eax, 4
  00d3c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d3f	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN114@P_PlayerTh:

; 9955 : 
; 9956 : 	if (player->powers[pw_extralife])

  00d43	b8 04 00 00 00	 mov	 eax, 4
  00d48	c1 e0 03	 shl	 eax, 3
  00d4b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d4e	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00d53	74 21		 je	 SHORT $LN115@P_PlayerTh

; 9957 : 		player->powers[pw_extralife]--;

  00d55	b8 04 00 00 00	 mov	 eax, 4
  00d5a	c1 e0 03	 shl	 eax, 3
  00d5d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d60	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00d64	83 ea 01	 sub	 edx, 1
  00d67	b8 04 00 00 00	 mov	 eax, 4
  00d6c	c1 e0 03	 shl	 eax, 3
  00d6f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00d72	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN115@P_PlayerTh:

; 9958 : 
; 9959 : 	if (player->powers[pw_superparaloop])

  00d76	b8 04 00 00 00	 mov	 eax, 4
  00d7b	6b c8 19	 imul	 ecx, eax, 25
  00d7e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d81	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00d86	74 21		 je	 SHORT $LN116@P_PlayerTh

; 9960 : 		player->powers[pw_superparaloop]--;

  00d88	b8 04 00 00 00	 mov	 eax, 4
  00d8d	6b c8 19	 imul	 ecx, eax, 25
  00d90	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d93	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00d97	83 e8 01	 sub	 eax, 1
  00d9a	b9 04 00 00 00	 mov	 ecx, 4
  00d9f	6b d1 19	 imul	 edx, ecx, 25
  00da2	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00da5	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN116@P_PlayerTh:

; 9961 : 
; 9962 : 	if (player->powers[pw_nightshelper])

  00da9	b8 04 00 00 00	 mov	 eax, 4
  00dae	6b c8 1a	 imul	 ecx, eax, 26
  00db1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00db4	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00db9	74 21		 je	 SHORT $LN117@P_PlayerTh

; 9963 : 		player->powers[pw_nightshelper]--;

  00dbb	b8 04 00 00 00	 mov	 eax, 4
  00dc0	6b c8 1a	 imul	 ecx, eax, 26
  00dc3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00dc6	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00dca	83 e8 01	 sub	 eax, 1
  00dcd	b9 04 00 00 00	 mov	 ecx, 4
  00dd2	6b d1 1a	 imul	 edx, ecx, 26
  00dd5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00dd8	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN117@P_PlayerTh:

; 9964 : 
; 9965 : 	if (player->powers[pw_nocontrol] & 65535)

  00ddc	b8 04 00 00 00	 mov	 eax, 4
  00de1	6b c8 1b	 imul	 ecx, eax, 27
  00de4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00de7	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00deb	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00df0	74 23		 je	 SHORT $LN118@P_PlayerTh

; 9966 : 		player->powers[pw_nocontrol]--;

  00df2	b8 04 00 00 00	 mov	 eax, 4
  00df7	6b c8 1b	 imul	 ecx, eax, 27
  00dfa	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00dfd	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00e01	83 e8 01	 sub	 eax, 1
  00e04	b9 04 00 00 00	 mov	 ecx, 4
  00e09	6b d1 1b	 imul	 edx, ecx, 27
  00e0c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e0f	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
  00e13	eb 13		 jmp	 SHORT $LN119@P_PlayerTh
$LN118@P_PlayerTh:

; 9967 : 	else
; 9968 : 		player->powers[pw_nocontrol] = 0;

  00e15	b8 04 00 00 00	 mov	 eax, 4
  00e1a	6b c8 1b	 imul	 ecx, eax, 27
  00e1d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e20	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN119@P_PlayerTh:

; 9969 : 
; 9970 : 	//pw_super acts as a timer now
; 9971 : 	if (player->powers[pw_super])

  00e28	b8 04 00 00 00	 mov	 eax, 4
  00e2d	6b c8 0f	 imul	 ecx, eax, 15
  00e30	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e33	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00e38	74 21		 je	 SHORT $LN120@P_PlayerTh

; 9972 : 		player->powers[pw_super]++;

  00e3a	b8 04 00 00 00	 mov	 eax, 4
  00e3f	6b c8 0f	 imul	 ecx, eax, 15
  00e42	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e45	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00e49	83 c0 01	 add	 eax, 1
  00e4c	b9 04 00 00 00	 mov	 ecx, 4
  00e51	6b d1 0f	 imul	 edx, ecx, 15
  00e54	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e57	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN120@P_PlayerTh:

; 9973 : 
; 9974 : 	if (player->powers[pw_ingoop])

  00e5b	b8 04 00 00 00	 mov	 eax, 4
  00e60	6b c8 1c	 imul	 ecx, eax, 28
  00e63	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e66	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00e6b	74 45		 je	 SHORT $LN121@P_PlayerTh

; 9975 : 	{
; 9976 : 		if (player->mo->state == &states[S_PLAY_STND])

  00e6d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e70	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e72	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  00e77	c1 e2 00	 shl	 edx, 0
  00e7a	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00e80	39 51 5c	 cmp	 DWORD PTR [ecx+92], edx
  00e83	75 0c		 jne	 SHORT $LN122@P_PlayerTh

; 9977 : 			player->mo->tics = 2;

  00e85	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e88	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e8a	c7 41 58 02 00
	00 00		 mov	 DWORD PTR [ecx+88], 2
$LN122@P_PlayerTh:

; 9978 : 
; 9979 : 		player->powers[pw_ingoop]--;

  00e91	b8 04 00 00 00	 mov	 eax, 4
  00e96	6b c8 1c	 imul	 ecx, eax, 28
  00e99	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00e9c	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00ea0	83 e8 01	 sub	 eax, 1
  00ea3	b9 04 00 00 00	 mov	 ecx, 4
  00ea8	6b d1 1c	 imul	 edx, ecx, 28
  00eab	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00eae	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN121@P_PlayerTh:

; 9980 : 	}
; 9981 : 
; 9982 : 	if (player->bumpertime)

  00eb2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00eb5	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [eax+428], 0
  00ebc	74 15		 je	 SHORT $LN123@P_PlayerTh

; 9983 : 		player->bumpertime--;

  00ebe	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ec1	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [eax+428]
  00ec7	83 e9 01	 sub	 ecx, 1
  00eca	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ecd	89 8a ac 01 00
	00		 mov	 DWORD PTR [edx+428], ecx
$LN123@P_PlayerTh:

; 9984 : 
; 9985 : 	if (player->weapondelay)

  00ed3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ed6	83 b8 70 01 00
	00 00		 cmp	 DWORD PTR [eax+368], 0
  00edd	74 15		 je	 SHORT $LN124@P_PlayerTh

; 9986 : 		player->weapondelay--;

  00edf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ee2	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  00ee8	83 e9 01	 sub	 ecx, 1
  00eeb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00eee	89 8a 70 01 00
	00		 mov	 DWORD PTR [edx+368], ecx
$LN124@P_PlayerTh:

; 9987 : 
; 9988 : 	if (player->tossdelay)

  00ef4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ef7	83 b8 74 01 00
	00 00		 cmp	 DWORD PTR [eax+372], 0
  00efe	74 15		 je	 SHORT $LN125@P_PlayerTh

; 9989 : 		player->tossdelay--;

  00f00	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f03	8b 88 74 01 00
	00		 mov	 ecx, DWORD PTR [eax+372]
  00f09	83 e9 01	 sub	 ecx, 1
  00f0c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f0f	89 8a 74 01 00
	00		 mov	 DWORD PTR [edx+372], ecx
$LN125@P_PlayerTh:

; 9990 : 
; 9991 : 	if (player->shielddelay)

  00f15	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f18	83 b8 78 01 00
	00 00		 cmp	 DWORD PTR [eax+376], 0
  00f1f	74 15		 je	 SHORT $LN126@P_PlayerTh

; 9992 : 		player->shielddelay--;

  00f21	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f24	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  00f2a	83 e9 01	 sub	 ecx, 1
  00f2d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f30	89 8a 78 01 00
	00		 mov	 DWORD PTR [edx+376], ecx
$LN126@P_PlayerTh:

; 9993 : 
; 9994 : 	if (player->homing)

  00f36	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f39	0f b6 88 38 01
	00 00		 movzx	 ecx, BYTE PTR [eax+312]
  00f40	85 c9		 test	 ecx, ecx
  00f42	74 15		 je	 SHORT $LN127@P_PlayerTh

; 9995 : 		player->homing--;

  00f44	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f47	8a 88 38 01 00
	00		 mov	 cl, BYTE PTR [eax+312]
  00f4d	80 e9 01	 sub	 cl, 1
  00f50	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f53	88 8a 38 01 00
	00		 mov	 BYTE PTR [edx+312], cl
$LN127@P_PlayerTh:

; 9996 : 
; 9997 : 	if (player->taunttimer)

  00f59	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f5c	83 b8 7c 01 00
	00 00		 cmp	 DWORD PTR [eax+380], 0
  00f63	74 15		 je	 SHORT $LN128@P_PlayerTh

; 9998 : 		player->taunttimer--;

  00f65	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f68	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00f6e	83 e9 01	 sub	 ecx, 1
  00f71	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00f74	89 8a 7c 01 00
	00		 mov	 DWORD PTR [edx+380], ecx
$LN128@P_PlayerTh:

; 9999 : 
; 10000: 	// Flash player after being hit.
; 10001: 	if (!(player->pflags & PF_NIGHTSMODE))

  00f7a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f7d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00f83	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00f89	75 76		 jne	 SHORT $LN129@P_PlayerTh

; 10002: 	{
; 10003: 		if (player->powers[pw_flashing] > 0 && player->powers[pw_flashing] < flashingtics && (leveltime & 1))

  00f8b	b8 04 00 00 00	 mov	 eax, 4
  00f90	d1 e0		 shl	 eax, 1
  00f92	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00f95	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00f9a	7e 3e		 jle	 SHORT $LN131@P_PlayerTh
  00f9c	b8 04 00 00 00	 mov	 eax, 4
  00fa1	d1 e0		 shl	 eax, 1
  00fa3	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00fa6	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00faa	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _flashingtics
  00fb0	7d 28		 jge	 SHORT $LN131@P_PlayerTh
  00fb2	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00fb7	83 e0 01	 and	 eax, 1
  00fba	74 1e		 je	 SHORT $LN131@P_PlayerTh

; 10004: 			player->mo->flags2 |= MF2_DONTDRAW;

  00fbc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fbf	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fc1	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00fc7	81 ca 00 00 40
	00		 or	 edx, 4194304		; 00400000H
  00fcd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fd0	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd2	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx
  00fd8	eb 25		 jmp	 SHORT $LN133@P_PlayerTh
$LN131@P_PlayerTh:

; 10005: 		else if (!cv_objectplace.value)

  00fda	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00fe1	75 1c		 jne	 SHORT $LN133@P_PlayerTh

; 10006: 			player->mo->flags2 &= ~MF2_DONTDRAW;

  00fe3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fe6	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fe8	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00fee	81 e2 ff ff bf
	ff		 and	 edx, -4194305		; ffbfffffH
  00ff4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ff7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ff9	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx
$LN133@P_PlayerTh:

; 10007: 	}

  00fff	eb 63		 jmp	 SHORT $LN135@P_PlayerTh
$LN129@P_PlayerTh:

; 10008: 	else
; 10009: 	{
; 10010: 		if (player->powers[pw_flashing] & 1)

  01001	b8 04 00 00 00	 mov	 eax, 4
  01006	d1 e0		 shl	 eax, 1
  01008	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0100b	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  0100f	83 e2 01	 and	 edx, 1
  01012	74 29		 je	 SHORT $LN134@P_PlayerTh

; 10011: 			player->mo->tracer->flags2 |= MF2_DONTDRAW;

  01014	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01017	8b 08		 mov	 ecx, DWORD PTR [eax]
  01019	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0101f	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  01025	0d 00 00 40 00	 or	 eax, 4194304		; 00400000H
  0102a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0102d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0102f	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  01035	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax
  0103b	eb 27		 jmp	 SHORT $LN135@P_PlayerTh
$LN134@P_PlayerTh:

; 10012: 		else
; 10013: 			player->mo->tracer->flags2 &= ~MF2_DONTDRAW;

  0103d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01040	8b 08		 mov	 ecx, DWORD PTR [eax]
  01042	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01048	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  0104e	25 ff ff bf ff	 and	 eax, -4194305		; ffbfffffH
  01053	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  01056	8b 11		 mov	 edx, DWORD PTR [ecx]
  01058	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  0105e	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax
$LN135@P_PlayerTh:

; 10014: 	}
; 10015: 
; 10016: 	player->mo->pmomz = 0;

  01064	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01067	8b 08		 mov	 ecx, DWORD PTR [eax]
  01069	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 10017: 	player->pflags &= ~PF_SLIDING;

  01070	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01073	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01079	81 e1 ff ff fb
	ff		 and	 ecx, -262145		; fffbffffH
  0107f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01082	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN1@P_PlayerTh:

; 10018: 
; 10019: //#define HORIZONTAL_MOVEMENT_TEST
; 10020: #ifdef HORIZONTAL_MOVEMENT_TEST
; 10021: 	{
; 10022: 		// What is this, you ask???
; 10023: 		// It is a poor attempt to move a sector
; 10024: 		// with a 3D floor inside the bounds of another sector.
; 10025: 		// It just so happens to be 'sectors[1]'.
; 10026: 		// This doesn't totally work - needs blockmap
; 10027: 		// collision as well as a few other problems
; 10028: 		// with the nodes, it seems.
; 10029: 		// Feel free to mess around with it.
; 10030: 
; 10031: 		// Oh, this code probably shouldn't be
; 10032: 		// right here at all, either, but it's
; 10033: 		// a good 'testing spot', I suppose.
; 10034: 
; 10035: 		sector_t *sector = &sectors[1];
; 10036: 		line_t *line;
; 10037: 		INT32 i, j;
; 10038: 
; 10039: 		for (i = 0; i < sector->linecount; i++)
; 10040: 		{
; 10041: 			line = sector->lines[i];
; 10042: 
; 10043: 			// Stop moving after awhile so we
; 10044: 			// don't go outside the map.
; 10045: 			if (line->v1->y < -512*FRACUNIT)
; 10046: 				return;
; 10047: 
; 10048: 			line->v1->y -= FRACUNIT;
; 10049: 
; 10050: 			// Move the vertices
; 10051: 			for (j = 0; j < 2; j++)
; 10052: 			{
; 10053: 				if (line->bbox[j] == line->v1->y+FRACUNIT)
; 10054: 					line->bbox[j] -= FRACUNIT;
; 10055: 			}
; 10056: 
; 10057: 			// ...move the nodes?
; 10058: 			// Is this correct???
; 10059: 			for (j = 0; j < numnodes; j++)
; 10060: 			{
; 10061: 				if (nodes[j].y == line->v1->y+FRACUNIT)
; 10062: 					nodes[j].y -= FRACUNIT;
; 10063: 			}
; 10064: 		}
; 10065: 	}
; 10066: #endif
; 10067: 
; 10068: /*
; 10069: //	Colormap verification
; 10070: 	{
; 10071: 		INT32 i,j;
; 10072: 		sector_t *controlsec;
; 10073: 		for (j=0; j<numsectors; j++)
; 10074: 		{
; 10075: 			controlsec = NULL;
; 10076: 			// Does this sector have a water linedef?
; 10077: 			for (i=0; i<numlines;i++)
; 10078: 			{
; 10079: 				if ((lines[i].special == 121 || lines[i].special == 123)
; 10080: 				&& lines[i].tag == sectors[j].tag)
; 10081: 				{
; 10082: 					controlsec = lines[i].frontsector;
; 10083: 					break;
; 10084: 				}
; 10085: 			}
; 10086: 
; 10087: 			if (i < numlines && controlsec)
; 10088: 			{
; 10089: 				// Does this sector have a colormap?
; 10090: 				for (i=0; i<numlines;i++)
; 10091: 				{
; 10092: 					if (lines[i].special == 606 && lines[i].tag == controlsec->tag)
; 10093: 						break;
; 10094: 				}
; 10095: 
; 10096: 				if (i == numlines)
; 10097: 					CONS_Printf("%d, %d\n", j, sectors[j].tag);
; 10098: 			}
; 10099: 		}
; 10100: 
; 10101: 		I_Error("I'm done!\n");
; 10102: 	}*/
; 10103: }

  01088	5f		 pop	 edi
  01089	5e		 pop	 esi
  0108a	5b		 pop	 ebx
  0108b	8b e5		 mov	 esp, ebp
  0108d	5d		 pop	 ebp
  0108e	c3		 ret	 0
_P_PlayerThink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_FreezeObjectplace
_TEXT	SEGMENT
_P_FreezeObjectplace PROC				; COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 166  : 	if (!cv_objectplace.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00010	75 04		 jne	 SHORT $LN2@P_FreezeOb

; 167  : 		return false;

  00012	33 c0		 xor	 eax, eax
  00014	eb 2d		 jmp	 SHORT $LN1@P_FreezeOb
$LN2@P_FreezeOb:

; 168  : 
; 169  : 	if ((maptol & TOL_NIGHTS) && (players[consoleplayer].pflags & PF_NIGHTSMODE))

  00016	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0001d	83 e0 40	 and	 eax, 64			; 00000040H
  00020	74 1c		 je	 SHORT $LN3@P_FreezeOb
  00022	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0002c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00032	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00038	74 04		 je	 SHORT $LN3@P_FreezeOb

; 170  : 		return false;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 05		 jmp	 SHORT $LN1@P_FreezeOb
$LN3@P_FreezeOb:

; 171  : 
; 172  : 	return true;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_FreezeOb:

; 173  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_P_FreezeObjectplace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_ResetScore
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_ResetScore PROC					; COMDAT

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 357  : #ifdef CHAOSISNOTDEADYET
; 358  : 	if (gametype == GT_CHAOS && player->scoreadd >= 5)
; 359  : 		CONS_Printf("%s got a chain of %u!\n", player_names[player-players], player->scoreadd);
; 360  : #endif
; 361  : 
; 362  : 	player->scoreadd = 0;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	c7 80 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+284], 0

; 363  : 	player->shielddelay = 0;

  00016	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00019	c7 80 78 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+376], 0

; 364  : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_P_ResetScore ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_GiveEmerald
_TEXT	SEGMENT
_i$ = -4						; size = 4
_P_GiveEmerald PROC					; COMDAT

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 294  : 	INT32 i;
; 295  : 
; 296  : 	S_StartSound(NULL, sfx_cgot); // Got the emerald!

  00009	6a 29		 push	 41			; 00000029H
  0000b	6a 00		 push	 0
  0000d	e8 00 00 00 00	 call	 _S_StartSound
  00012	83 c4 08	 add	 esp, 8

; 297  : 
; 298  : 	// Check what emeralds the player has so you know which one to award next.
; 299  : 	if (!(emeralds & EMERALD1))

  00015	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0001c	83 e0 01	 and	 eax, 1
  0001f	0f 85 b4 00 00
	00		 jne	 $LN23@P_GiveEmer

; 300  : 	{
; 301  : 		emeralds |= EMERALD1;

  00025	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0002c	83 c8 01	 or	 eax, 1
  0002f	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 302  : 		for (i = 0; i < MAXPLAYERS; i++)

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003c	eb 09		 jmp	 SHORT $LN4@P_GiveEmer
$LN2@P_GiveEmer:
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_GiveEmer:
  00047	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0004b	0f 8d 83 00 00
	00		 jge	 $LN3@P_GiveEmer

; 303  : 			if (playeringame[i])

  00051	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00054	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0005c	74 71		 je	 SHORT $LN25@P_GiveEmer

; 304  : 				P_SetMobjState(P_SpawnMobj(players[i].mo->x, players[i].mo->y, players[i].mo->z + players[i].mo->info->height, MT_GOTEMERALD), mobjinfo[MT_GOTEMERALD].spawnstate);

  0005e	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00063	69 c8 c1 00 00
	00		 imul	 ecx, eax, 193
  00069	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+4]
  0006f	52		 push	 edx
  00070	68 c1 00 00 00	 push	 193			; 000000c1H
  00075	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0007c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00082	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00089	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  0008f	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  00095	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00098	03 42 44	 add	 eax, DWORD PTR [edx+68]
  0009b	50		 push	 eax
  0009c	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  000a3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  000a9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ac	50		 push	 eax
  000ad	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  000b4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  000ba	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _P_SpawnMobj
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _P_SetMobjState
  000cc	83 c4 08	 add	 esp, 8
$LN25@P_GiveEmer:
  000cf	e9 6a ff ff ff	 jmp	 $LN2@P_GiveEmer
$LN3@P_GiveEmer:

; 305  : 	}

  000d4	e9 05 05 00 00	 jmp	 $LN21@P_GiveEmer
$LN23@P_GiveEmer:

; 306  : 	else if ((emeralds & EMERALD1) && !(emeralds & EMERALD2))

  000d9	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  000e0	83 e0 01	 and	 eax, 1
  000e3	0f 84 c7 00 00
	00		 je	 $LN26@P_GiveEmer
  000e9	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  000f0	83 e0 02	 and	 eax, 2
  000f3	0f 85 b7 00 00
	00		 jne	 $LN26@P_GiveEmer

; 307  : 	{
; 308  : 		emeralds |= EMERALD2;

  000f9	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00100	83 c8 02	 or	 eax, 2
  00103	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 309  : 		for (i = 0; i < MAXPLAYERS; i++)

  00109	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00110	eb 09		 jmp	 SHORT $LN7@P_GiveEmer
$LN5@P_GiveEmer:
  00112	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00115	83 c0 01	 add	 eax, 1
  00118	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@P_GiveEmer:
  0011b	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0011f	0f 8d 86 00 00
	00		 jge	 $LN6@P_GiveEmer

; 310  : 			if (playeringame[i])

  00125	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00128	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00130	74 74		 je	 SHORT $LN28@P_GiveEmer

; 311  : 				P_SetMobjState(P_SpawnMobj(players[i].mo->x, players[i].mo->y, players[i].mo->z + players[i].mo->info->height, MT_GOTEMERALD), mobjinfo[MT_GOTEMERALD].spawnstate+1);

  00132	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00137	69 c8 c1 00 00
	00		 imul	 ecx, eax, 193
  0013d	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+4]
  00143	83 c2 01	 add	 edx, 1
  00146	52		 push	 edx
  00147	68 c1 00 00 00	 push	 193			; 000000c1H
  0014c	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00153	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00159	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00160	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  00166	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  0016c	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0016f	03 42 44	 add	 eax, DWORD PTR [edx+68]
  00172	50		 push	 eax
  00173	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  0017a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00180	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00183	50		 push	 eax
  00184	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  0018b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00191	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 _P_SpawnMobj
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 _P_SetMobjState
  001a3	83 c4 08	 add	 esp, 8
$LN28@P_GiveEmer:
  001a6	e9 67 ff ff ff	 jmp	 $LN5@P_GiveEmer
$LN6@P_GiveEmer:

; 312  : 	}

  001ab	e9 2e 04 00 00	 jmp	 $LN21@P_GiveEmer
$LN26@P_GiveEmer:

; 313  : 	else if ((emeralds & EMERALD2) && !(emeralds & EMERALD3))

  001b0	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  001b7	83 e0 02	 and	 eax, 2
  001ba	0f 84 c7 00 00
	00		 je	 $LN29@P_GiveEmer
  001c0	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  001c7	83 e0 04	 and	 eax, 4
  001ca	0f 85 b7 00 00
	00		 jne	 $LN29@P_GiveEmer

; 314  : 	{
; 315  : 		emeralds |= EMERALD3;

  001d0	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  001d7	83 c8 04	 or	 eax, 4
  001da	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 316  : 		for (i = 0; i < MAXPLAYERS; i++)

  001e0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001e7	eb 09		 jmp	 SHORT $LN10@P_GiveEmer
$LN8@P_GiveEmer:
  001e9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001ec	83 c0 01	 add	 eax, 1
  001ef	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@P_GiveEmer:
  001f2	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  001f6	0f 8d 86 00 00
	00		 jge	 $LN9@P_GiveEmer

; 317  : 			if (playeringame[i])

  001fc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001ff	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00207	74 74		 je	 SHORT $LN31@P_GiveEmer

; 318  : 				P_SetMobjState(P_SpawnMobj(players[i].mo->x, players[i].mo->y, players[i].mo->z + players[i].mo->info->height, MT_GOTEMERALD), mobjinfo[MT_GOTEMERALD].spawnstate+2);

  00209	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  0020e	69 c8 c1 00 00
	00		 imul	 ecx, eax, 193
  00214	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+4]
  0021a	83 c2 02	 add	 edx, 2
  0021d	52		 push	 edx
  0021e	68 c1 00 00 00	 push	 193			; 000000c1H
  00223	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0022a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00230	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00237	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  0023d	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  00243	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00246	03 42 44	 add	 eax, DWORD PTR [edx+68]
  00249	50		 push	 eax
  0024a	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  00251	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00257	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0025a	50		 push	 eax
  0025b	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  00262	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00268	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0026b	50		 push	 eax
  0026c	e8 00 00 00 00	 call	 _P_SpawnMobj
  00271	83 c4 10	 add	 esp, 16			; 00000010H
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 _P_SetMobjState
  0027a	83 c4 08	 add	 esp, 8
$LN31@P_GiveEmer:
  0027d	e9 67 ff ff ff	 jmp	 $LN8@P_GiveEmer
$LN9@P_GiveEmer:

; 319  : 	}

  00282	e9 57 03 00 00	 jmp	 $LN21@P_GiveEmer
$LN29@P_GiveEmer:

; 320  : 	else if ((emeralds & EMERALD3) && !(emeralds & EMERALD4))

  00287	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0028e	83 e0 04	 and	 eax, 4
  00291	0f 84 c7 00 00
	00		 je	 $LN32@P_GiveEmer
  00297	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0029e	83 e0 08	 and	 eax, 8
  002a1	0f 85 b7 00 00
	00		 jne	 $LN32@P_GiveEmer

; 321  : 	{
; 322  : 		emeralds |= EMERALD4;

  002a7	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  002ae	83 c8 08	 or	 eax, 8
  002b1	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 323  : 		for (i = 0; i < MAXPLAYERS; i++)

  002b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002be	eb 09		 jmp	 SHORT $LN13@P_GiveEmer
$LN11@P_GiveEmer:
  002c0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002c3	83 c0 01	 add	 eax, 1
  002c6	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN13@P_GiveEmer:
  002c9	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  002cd	0f 8d 86 00 00
	00		 jge	 $LN12@P_GiveEmer

; 324  : 			if (playeringame[i])

  002d3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002d6	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  002de	74 74		 je	 SHORT $LN34@P_GiveEmer

; 325  : 				P_SetMobjState(P_SpawnMobj(players[i].mo->x, players[i].mo->y, players[i].mo->z + players[i].mo->info->height, MT_GOTEMERALD), mobjinfo[MT_GOTEMERALD].spawnstate+3);

  002e0	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  002e5	69 c8 c1 00 00
	00		 imul	 ecx, eax, 193
  002eb	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+4]
  002f1	83 c2 03	 add	 edx, 3
  002f4	52		 push	 edx
  002f5	68 c1 00 00 00	 push	 193			; 000000c1H
  002fa	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00301	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00307	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  0030e	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  00314	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  0031a	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0031d	03 42 44	 add	 eax, DWORD PTR [edx+68]
  00320	50		 push	 eax
  00321	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  00328	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0032e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00331	50		 push	 eax
  00332	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  00339	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0033f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 _P_SpawnMobj
  00348	83 c4 10	 add	 esp, 16			; 00000010H
  0034b	50		 push	 eax
  0034c	e8 00 00 00 00	 call	 _P_SetMobjState
  00351	83 c4 08	 add	 esp, 8
$LN34@P_GiveEmer:
  00354	e9 67 ff ff ff	 jmp	 $LN11@P_GiveEmer
$LN12@P_GiveEmer:

; 326  : 	}

  00359	e9 80 02 00 00	 jmp	 $LN21@P_GiveEmer
$LN32@P_GiveEmer:

; 327  : 	else if ((emeralds & EMERALD4) && !(emeralds & EMERALD5))

  0035e	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00365	83 e0 08	 and	 eax, 8
  00368	0f 84 c7 00 00
	00		 je	 $LN35@P_GiveEmer
  0036e	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00375	83 e0 10	 and	 eax, 16			; 00000010H
  00378	0f 85 b7 00 00
	00		 jne	 $LN35@P_GiveEmer

; 328  : 	{
; 329  : 		emeralds |= EMERALD5;

  0037e	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00385	83 c8 10	 or	 eax, 16			; 00000010H
  00388	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 330  : 		for (i = 0; i < MAXPLAYERS; i++)

  0038e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00395	eb 09		 jmp	 SHORT $LN16@P_GiveEmer
$LN14@P_GiveEmer:
  00397	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0039a	83 c0 01	 add	 eax, 1
  0039d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN16@P_GiveEmer:
  003a0	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  003a4	0f 8d 86 00 00
	00		 jge	 $LN15@P_GiveEmer

; 331  : 			if (playeringame[i])

  003aa	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003ad	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  003b5	74 74		 je	 SHORT $LN37@P_GiveEmer

; 332  : 				P_SetMobjState(P_SpawnMobj(players[i].mo->x, players[i].mo->y, players[i].mo->z + players[i].mo->info->height, MT_GOTEMERALD), mobjinfo[MT_GOTEMERALD].spawnstate+4);

  003b7	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  003bc	69 c8 c1 00 00
	00		 imul	 ecx, eax, 193
  003c2	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+4]
  003c8	83 c2 04	 add	 edx, 4
  003cb	52		 push	 edx
  003cc	68 c1 00 00 00	 push	 193			; 000000c1H
  003d1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003d8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  003de	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  003e5	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  003eb	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  003f1	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  003f4	03 42 44	 add	 eax, DWORD PTR [edx+68]
  003f7	50		 push	 eax
  003f8	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  003ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00405	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00408	50		 push	 eax
  00409	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  00410	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00416	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00419	50		 push	 eax
  0041a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0041f	83 c4 10	 add	 esp, 16			; 00000010H
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 _P_SetMobjState
  00428	83 c4 08	 add	 esp, 8
$LN37@P_GiveEmer:
  0042b	e9 67 ff ff ff	 jmp	 $LN14@P_GiveEmer
$LN15@P_GiveEmer:

; 333  : 	}

  00430	e9 a9 01 00 00	 jmp	 $LN21@P_GiveEmer
$LN35@P_GiveEmer:

; 334  : 	else if ((emeralds & EMERALD5) && !(emeralds & EMERALD6))

  00435	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0043c	83 e0 10	 and	 eax, 16			; 00000010H
  0043f	0f 84 c7 00 00
	00		 je	 $LN38@P_GiveEmer
  00445	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0044c	83 e0 20	 and	 eax, 32			; 00000020H
  0044f	0f 85 b7 00 00
	00		 jne	 $LN38@P_GiveEmer

; 335  : 	{
; 336  : 		emeralds |= EMERALD6;

  00455	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0045c	83 c8 20	 or	 eax, 32			; 00000020H
  0045f	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 337  : 		for (i = 0; i < MAXPLAYERS; i++)

  00465	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0046c	eb 09		 jmp	 SHORT $LN19@P_GiveEmer
$LN17@P_GiveEmer:
  0046e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00471	83 c0 01	 add	 eax, 1
  00474	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN19@P_GiveEmer:
  00477	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0047b	0f 8d 86 00 00
	00		 jge	 $LN18@P_GiveEmer

; 338  : 			if (playeringame[i])

  00481	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00484	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0048c	74 74		 je	 SHORT $LN40@P_GiveEmer

; 339  : 				P_SetMobjState(P_SpawnMobj(players[i].mo->x, players[i].mo->y, players[i].mo->z + players[i].mo->info->height, MT_GOTEMERALD), mobjinfo[MT_GOTEMERALD].spawnstate+5);

  0048e	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00493	69 c8 c1 00 00
	00		 imul	 ecx, eax, 193
  00499	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+4]
  0049f	83 c2 05	 add	 edx, 5
  004a2	52		 push	 edx
  004a3	68 c1 00 00 00	 push	 193			; 000000c1H
  004a8	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004af	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  004b5	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  004bc	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  004c2	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  004c8	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  004cb	03 42 44	 add	 eax, DWORD PTR [edx+68]
  004ce	50		 push	 eax
  004cf	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  004d6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  004dc	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004df	50		 push	 eax
  004e0	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  004e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  004ed	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004f0	50		 push	 eax
  004f1	e8 00 00 00 00	 call	 _P_SpawnMobj
  004f6	83 c4 10	 add	 esp, 16			; 00000010H
  004f9	50		 push	 eax
  004fa	e8 00 00 00 00	 call	 _P_SetMobjState
  004ff	83 c4 08	 add	 esp, 8
$LN40@P_GiveEmer:
  00502	e9 67 ff ff ff	 jmp	 $LN17@P_GiveEmer
$LN18@P_GiveEmer:

; 340  : 	}

  00507	e9 d2 00 00 00	 jmp	 $LN21@P_GiveEmer
$LN38@P_GiveEmer:

; 341  : 	else if ((emeralds & EMERALD6) && !(emeralds & EMERALD7))

  0050c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00513	83 e0 20	 and	 eax, 32			; 00000020H
  00516	0f 84 c2 00 00
	00		 je	 $LN21@P_GiveEmer
  0051c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00523	83 e0 40	 and	 eax, 64			; 00000040H
  00526	0f 85 b2 00 00
	00		 jne	 $LN21@P_GiveEmer

; 342  : 	{
; 343  : 		emeralds |= EMERALD7;

  0052c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00533	83 c8 40	 or	 eax, 64			; 00000040H
  00536	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 344  : 		for (i = 0; i < MAXPLAYERS; i++)

  0053c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00543	eb 09		 jmp	 SHORT $LN22@P_GiveEmer
$LN20@P_GiveEmer:
  00545	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00548	83 c0 01	 add	 eax, 1
  0054b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN22@P_GiveEmer:
  0054e	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00552	0f 8d 86 00 00
	00		 jge	 $LN21@P_GiveEmer

; 345  : 			if (playeringame[i])

  00558	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0055b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00563	74 74		 je	 SHORT $LN42@P_GiveEmer

; 346  : 				P_SetMobjState(P_SpawnMobj(players[i].mo->x, players[i].mo->y, players[i].mo->z + players[i].mo->info->height, MT_GOTEMERALD), mobjinfo[MT_GOTEMERALD].spawnstate+6);

  00565	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  0056a	69 c8 c1 00 00
	00		 imul	 ecx, eax, 193
  00570	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+4]
  00576	83 c2 06	 add	 edx, 6
  00579	52		 push	 edx
  0057a	68 c1 00 00 00	 push	 193			; 000000c1H
  0057f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00586	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0058c	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00593	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  00599	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  0059f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  005a2	03 42 44	 add	 eax, DWORD PTR [edx+68]
  005a5	50		 push	 eax
  005a6	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  005ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  005b3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  005b6	50		 push	 eax
  005b7	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  005be	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  005c4	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005c7	50		 push	 eax
  005c8	e8 00 00 00 00	 call	 _P_SpawnMobj
  005cd	83 c4 10	 add	 esp, 16			; 00000010H
  005d0	50		 push	 eax
  005d1	e8 00 00 00 00	 call	 _P_SetMobjState
  005d6	83 c4 08	 add	 esp, 8
$LN42@P_GiveEmer:
  005d9	e9 67 ff ff ff	 jmp	 $LN20@P_GiveEmer
$LN21@P_GiveEmer:

; 347  : 	}
; 348  : }

  005de	5f		 pop	 edi
  005df	5e		 pop	 esi
  005e0	5b		 pop	 ebx
  005e1	8b e5		 mov	 esp, ebp
  005e3	5d		 pop	 ebp
  005e4	c3		 ret	 0
_P_GiveEmerald ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_GivePlayerLives
_TEXT	SEGMENT
_player$ = 8						; size = 4
_numlives$ = 12						; size = 4
_P_GivePlayerLives PROC					; COMDAT

; 909  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 910  : 	player->lives += numlives;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  00012	03 4d 0c	 add	 ecx, DWORD PTR _numlives$[ebp]
  00015	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00018	89 8a 00 01 00
	00		 mov	 DWORD PTR [edx+256], ecx

; 911  : 
; 912  : 	if (player->lives > 99)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00021	83 b8 00 01 00
	00 63		 cmp	 DWORD PTR [eax+256], 99	; 00000063H
  00028	7e 0f		 jle	 SHORT $LN2@P_GivePlay

; 913  : 		player->lives = 99;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0002d	c7 80 00 01 00
	00 63 00 00 00	 mov	 DWORD PTR [eax+256], 99	; 00000063H
  00037	eb 19		 jmp	 SHORT $LN4@P_GivePlay
$LN2@P_GivePlay:

; 914  : 	else if (player->lives < 1)

  00039	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003c	83 b8 00 01 00
	00 01		 cmp	 DWORD PTR [eax+256], 1
  00043	7d 0d		 jge	 SHORT $LN4@P_GivePlay

; 915  : 		player->lives = 1;

  00045	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00048	c7 80 00 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+256], 1
$LN4@P_GivePlay:

; 916  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_P_GivePlayerLives ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_GivePlayerRings
_TEXT	SEGMENT
_player$ = 8						; size = 4
_num_rings$ = 12					; size = 4
_flingring$ = 16					; size = 4
_P_GivePlayerRings PROC					; COMDAT

; 869  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 870  : #ifdef PARANOIA
; 871  : 	if (!player->mo)
; 872  : 		return;
; 873  : #endif
; 874  : 
; 875  : 	player->mo->health += num_rings;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00014	03 55 0c	 add	 edx, DWORD PTR _num_rings$[ebp]
  00017	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 876  : 	player->health += num_rings;

  00022	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00025	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00028	03 4d 0c	 add	 ecx, DWORD PTR _num_rings$[ebp]
  0002b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0002e	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 877  : 
; 878  : 	if (!flingring)

  00031	83 7d 10 00	 cmp	 DWORD PTR _flingring$[ebp], 0
  00035	75 24		 jne	 SHORT $LN2@P_GivePlay

; 879  : 	{
; 880  : 		player->losscount = 0;

  00037	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003a	c7 80 dc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+476], 0

; 881  : 		player->totalring += num_rings;

  00044	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00047	8b 88 50 01 00
	00		 mov	 ecx, DWORD PTR [eax+336]
  0004d	03 4d 0c	 add	 ecx, DWORD PTR _num_rings$[ebp]
  00050	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00053	89 8a 50 01 00
	00		 mov	 DWORD PTR [edx+336], ecx

; 882  : 	}

  00059	eb 1b		 jmp	 SHORT $LN4@P_GivePlay
$LN2@P_GivePlay:

; 883  : 	else
; 884  : 	{
; 885  : 		if (player->mo->health > 2)

  0005b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	83 b9 8c 00 00
	00 02		 cmp	 DWORD PTR [ecx+140], 2
  00067	7e 0d		 jle	 SHORT $LN4@P_GivePlay

; 886  : 			player->losscount = 0;

  00069	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006c	c7 80 dc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+476], 0
$LN4@P_GivePlay:

; 887  : 	}
; 888  : 
; 889  : 	// Can only get up to 9999 rings, sorry!
; 890  : 	if (player->mo->health > 10000)

  00076	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	81 b9 8c 00 00
	00 10 27 00 00	 cmp	 DWORD PTR [ecx+140], 10000 ; 00002710H
  00085	7e 1b		 jle	 SHORT $LN5@P_GivePlay

; 891  : 	{
; 892  : 		player->mo->health = 10000;

  00087	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	c7 81 8c 00 00
	00 10 27 00 00	 mov	 DWORD PTR [ecx+140], 10000 ; 00002710H

; 893  : 		player->health = 10000;

  00096	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00099	c7 40 28 10 27
	00 00		 mov	 DWORD PTR [eax+40], 10000 ; 00002710H

; 894  : 	}

  000a0	eb 27		 jmp	 SHORT $LN7@P_GivePlay
$LN5@P_GivePlay:

; 895  : 	else if (player->mo->health < 1)

  000a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	83 b9 8c 00 00
	00 01		 cmp	 DWORD PTR [ecx+140], 1
  000ae	7d 19		 jge	 SHORT $LN7@P_GivePlay

; 896  : 	{
; 897  : 		player->mo->health = 1;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b5	c7 81 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+140], 1

; 898  : 		player->health = 1;

  000bf	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c2	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1
$LN7@P_GivePlay:

; 899  : 	}
; 900  : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_P_GivePlayerRings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_SpawnGhostMobj
_TEXT	SEGMENT
tv135 = -72						; size = 4
_ghost$ = -4						; size = 4
_mobj$ = 8						; size = 4
_P_SpawnGhostMobj PROC					; COMDAT

; 1192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1193 : 	mobj_t *ghost;
; 1194 : 
; 1195 : 	ghost = P_SpawnMobj(mobj->x, mobj->y, mobj->z, MT_GHOST);

  00009	68 09 01 00 00	 push	 265			; 00000109H
  0000e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00011	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00018	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0001f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 _P_SpawnMobj
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	89 45 fc	 mov	 DWORD PTR _ghost$[ebp], eax

; 1196 : 
; 1197 : 	if (mobj->eflags & MFE_VERTICALFLIP)

  0002e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00031	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00037	83 e1 20	 and	 ecx, 32			; 00000020H
  0003a	74 4f		 je	 SHORT $LN2@P_SpawnGho

; 1198 : 	{
; 1199 : 		ghost->eflags |= MFE_VERTICALFLIP;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  0003f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00045	83 c9 20	 or	 ecx, 32			; 00000020H
  00048	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  0004b	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 1200 : 		// grr, height changes
; 1201 : 		P_UnsetThingPosition(ghost);

  00051	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  0005a	83 c4 04	 add	 esp, 4

; 1202 : 		ghost->z -= FixedDiv(mobj->height, 4*FRACUNIT);

  0005d	68 00 00 04 00	 push	 262144			; 00040000H
  00062	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00065	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _FixedDiv
  0006e	83 c4 08	 add	 esp, 8
  00071	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  00074	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00077	2b c8		 sub	 ecx, eax
  00079	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  0007c	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 1203 : 		P_SetThingPosition(ghost);

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _P_SetThingPosition
  00088	83 c4 04	 add	 esp, 4
$LN2@P_SpawnGho:

; 1204 : 	}
; 1205 : 
; 1206 : 	if (mobj->flags & MF_TRANSLATION)

  0008b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0008e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00091	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  00097	74 68		 je	 SHORT $LN5@P_SpawnGho

; 1207 : 	{
; 1208 : 		ghost->flags |= MF_TRANSLATION;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  0009c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0009f	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  000a8	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1209 : 		if (mobj->player)

  000ab	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ae	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000b5	74 3e		 je	 SHORT $LN4@P_SpawnGho

; 1210 : 			ghost->color = (UINT8)((mobj->player->powers[pw_super]) ? 15 : mobj->player->skincolor);

  000b7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ba	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	6b c2 0f	 imul	 eax, edx, 15
  000c8	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  000cd	74 09		 je	 SHORT $LN8@P_SpawnGho
  000cf	c7 45 b8 0f 00
	00 00		 mov	 DWORD PTR tv135[ebp], 15 ; 0000000fH
  000d6	eb 12		 jmp	 SHORT $LN9@P_SpawnGho
$LN8@P_SpawnGho:
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000db	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  000e1	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  000e7	89 45 b8	 mov	 DWORD PTR tv135[ebp], eax
$LN9@P_SpawnGho:
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _ghost$[ebp]
  000ed	8a 55 b8	 mov	 dl, BYTE PTR tv135[ebp]
  000f0	88 51 68	 mov	 BYTE PTR [ecx+104], dl
  000f3	eb 0c		 jmp	 SHORT $LN5@P_SpawnGho
$LN4@P_SpawnGho:

; 1211 : 		else
; 1212 : 			ghost->color = mobj->color;

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000fb	8a 51 68	 mov	 dl, BYTE PTR [ecx+104]
  000fe	88 50 68	 mov	 BYTE PTR [eax+104], dl
$LN5@P_SpawnGho:

; 1213 : 	}
; 1214 : 
; 1215 : 	ghost->angle = mobj->angle;

  00101	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  00104	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00107	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0010a	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 1216 : 	ghost->sprite = mobj->sprite;

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  00110	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00113	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00116	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 1217 : 	ghost->frame = mobj->frame;

  00119	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  0011c	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0011f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00122	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 1218 : 	ghost->tics = ghost->info->damage;

  00125	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  00128	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0012e	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  00131	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00134	89 42 58	 mov	 DWORD PTR [edx+88], eax

; 1219 : 	ghost->frame &= ~FF_TRANSMASK;

  00137	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  0013a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0013d	81 e1 ff ff f0
	ff		 and	 ecx, -983041		; fff0ffffH
  00143	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  00146	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 1220 : 	ghost->frame |= tr_trans50<<FF_TRANSSHIFT;

  00149	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  0014c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0014f	81 c9 00 00 05
	00		 or	 ecx, 327680		; 00050000H
  00155	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  00158	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 1221 : 	ghost->fuse = ghost->info->damage;

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  0015e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00164	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  00167	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  0016a	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax

; 1222 : 	ghost->skin = mobj->skin;

  00170	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  00173	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00176	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  00179	89 50 64	 mov	 DWORD PTR [eax+100], edx

; 1223 : 
; 1224 : 	if (mobj->flags2 & MF2_OBJECTFLIP)

  0017c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0017f	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00185	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  0018b	74 12		 je	 SHORT $LN6@P_SpawnGho

; 1225 : 		ghost->flags |= MF2_OBJECTFLIP;

  0018d	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  00190	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00193	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  00199	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  0019c	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN6@P_SpawnGho:

; 1226 : 
; 1227 : 	P_SetScale(ghost, mobj->scale);

  0019f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001a2	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  001a9	51		 push	 ecx
  001aa	8b 55 fc	 mov	 edx, DWORD PTR _ghost$[ebp]
  001ad	52		 push	 edx
  001ae	e8 00 00 00 00	 call	 _P_SetScale
  001b3	83 c4 08	 add	 esp, 8

; 1228 : 	ghost->destscale = mobj->scale;

  001b6	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]
  001b9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001bc	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  001c3	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 1229 : 
; 1230 : 	ghost->height = FIXEDSCALE(mobj->height, mobj->scale);

  001ca	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001cd	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  001d0	51		 push	 ecx
  001d1	68 00 00 64 00	 push	 6553600			; 00640000H
  001d6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001d9	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  001e0	c1 e0 10	 shl	 eax, 16			; 00000010H
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _FixedDiv
  001e9	83 c4 08	 add	 esp, 8
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _FixedMul
  001f2	83 c4 08	 add	 esp, 8
  001f5	8b 4d fc	 mov	 ecx, DWORD PTR _ghost$[ebp]
  001f8	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1231 : 
; 1232 : 	return ghost;

  001fb	8b 45 fc	 mov	 eax, DWORD PTR _ghost$[ebp]

; 1233 : }

  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5b		 pop	 ebx
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c3		 ret	 0
_P_SpawnGhostMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_SpawnShieldOrb
_TEXT	SEGMENT
_shieldobj$ = -12					; size = 4
_th$ = -8						; size = 4
_orbtype$ = -4						; size = 4
_player$ = 8						; size = 4
_P_SpawnShieldOrb PROC					; COMDAT

; 1140 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1141 : 	mobjtype_t orbtype;
; 1142 : 	thinker_t *th;
; 1143 : 	mobj_t *shieldobj = NULL;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _shieldobj$[ebp], 0

; 1144 : 
; 1145 : #ifdef PARANOIA
; 1146 : 	if (!player->mo)
; 1147 : 		I_Error("P_SpawnShieldOrb: player->mo is NULL!\n");
; 1148 : #endif
; 1149 : 
; 1150 : 	if (player->powers[pw_jumpshield])

  00010	b8 04 00 00 00	 mov	 eax, 4
  00015	6b c8 03	 imul	 ecx, eax, 3
  00018	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0001b	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00020	74 09		 je	 SHORT $LN5@P_SpawnShi

; 1151 : 		orbtype = MT_WHITEORB;

  00022	c7 45 fc a2 00
	00 00		 mov	 DWORD PTR _orbtype$[ebp], 162 ; 000000a2H
  00029	eb 71		 jmp	 SHORT $LN14@P_SpawnShi
$LN5@P_SpawnShi:

; 1152 : 	else if (player->powers[pw_ringshield])

  0002b	b8 04 00 00 00	 mov	 eax, 4
  00030	6b c8 09	 imul	 ecx, eax, 9
  00033	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00036	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0003b	74 09		 je	 SHORT $LN7@P_SpawnShi

; 1153 : 		orbtype = MT_YELLOWORB;

  0003d	c7 45 fc 9f 00
	00 00		 mov	 DWORD PTR _orbtype$[ebp], 159 ; 0000009fH
  00044	eb 56		 jmp	 SHORT $LN14@P_SpawnShi
$LN7@P_SpawnShi:

; 1154 : 	else if (player->powers[pw_watershield])

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	6b c8 0b	 imul	 ecx, eax, 11
  0004e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00051	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00056	74 09		 je	 SHORT $LN9@P_SpawnShi

; 1155 : 		orbtype = MT_GREENORB;

  00058	c7 45 fc 9e 00
	00 00		 mov	 DWORD PTR _orbtype$[ebp], 158 ; 0000009eH
  0005f	eb 3b		 jmp	 SHORT $LN14@P_SpawnShi
$LN9@P_SpawnShi:

; 1156 : 	else if (player->powers[pw_bombshield])

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	6b c8 0a	 imul	 ecx, eax, 10
  00069	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0006c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00071	74 09		 je	 SHORT $LN11@P_SpawnShi

; 1157 : 		orbtype = MT_BLACKORB;

  00073	c7 45 fc a1 00
	00 00		 mov	 DWORD PTR _orbtype$[ebp], 161 ; 000000a1H
  0007a	eb 20		 jmp	 SHORT $LN14@P_SpawnShi
$LN11@P_SpawnShi:

; 1158 : 	else if (player->powers[pw_forceshield])

  0007c	b8 04 00 00 00	 mov	 eax, 4
  00081	c1 e0 02	 shl	 eax, 2
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00087	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0008c	74 09		 je	 SHORT $LN13@P_SpawnShi

; 1159 : 		orbtype = MT_BLUEORB;

  0008e	c7 45 fc a0 00
	00 00		 mov	 DWORD PTR _orbtype$[ebp], 160 ; 000000a0H
  00095	eb 05		 jmp	 SHORT $LN14@P_SpawnShi
$LN13@P_SpawnShi:

; 1160 : 	else
; 1161 : 		return;

  00097	e9 ce 00 00 00	 jmp	 $LN17@P_SpawnShi
$LN14@P_SpawnShi:

; 1162 : 
; 1163 : 	// blaze through the thinkers to see if an orb already exists!
; 1164 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0009c	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  000a1	89 45 f8	 mov	 DWORD PTR _th$[ebp], eax
  000a4	eb 09		 jmp	 SHORT $LN4@P_SpawnShi
$LN2@P_SpawnShi:
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  000a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ac	89 4d f8	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_SpawnShi:
  000af	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  000b6	74 42		 je	 SHORT $LN3@P_SpawnShi

; 1165 : 	{
; 1166 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  000bb	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  000c2	74 02		 je	 SHORT $LN15@P_SpawnShi

; 1167 : 			continue;

  000c4	eb e0		 jmp	 SHORT $LN2@P_SpawnShi
$LN15@P_SpawnShi:

; 1168 : 
; 1169 : 		shieldobj = (mobj_t *)th;

  000c6	8b 45 f8	 mov	 eax, DWORD PTR _th$[ebp]
  000c9	89 45 f4	 mov	 DWORD PTR _shieldobj$[ebp], eax

; 1170 : 
; 1171 : 		if (shieldobj->type == orbtype && shieldobj->target == player->mo)

  000cc	8b 45 f4	 mov	 eax, DWORD PTR _shieldobj$[ebp]
  000cf	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000d2	3b 4d fc	 cmp	 ecx, DWORD PTR _orbtype$[ebp]
  000d5	75 21		 jne	 SHORT $LN16@P_SpawnShi
  000d7	8b 45 f4	 mov	 eax, DWORD PTR _shieldobj$[ebp]
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000dd	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  000e3	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000e5	75 11		 jne	 SHORT $LN16@P_SpawnShi

; 1172 : 			P_SetMobjState(shieldobj, S_DISS); //kill the old one(s)

  000e7	68 4f 06 00 00	 push	 1615			; 0000064fH
  000ec	8b 45 f4	 mov	 eax, DWORD PTR _shieldobj$[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _P_SetMobjState
  000f5	83 c4 08	 add	 esp, 8
$LN16@P_SpawnShi:

; 1173 : 	}

  000f8	eb ac		 jmp	 SHORT $LN2@P_SpawnShi
$LN3@P_SpawnShi:

; 1174 : 
; 1175 : 	shieldobj = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z, orbtype);

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _orbtype$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00101	8b 11		 mov	 edx, DWORD PTR [ecx]
  00103	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00106	50		 push	 eax
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0010a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0010f	50		 push	 eax
  00110	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00113	8b 11		 mov	 edx, DWORD PTR [ecx]
  00115	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 _P_SpawnMobj
  0011e	83 c4 10	 add	 esp, 16			; 00000010H
  00121	89 45 f4	 mov	 DWORD PTR _shieldobj$[ebp], eax

; 1176 : 
; 1177 : 	if (shieldobj)

  00124	83 7d f4 00	 cmp	 DWORD PTR _shieldobj$[ebp], 0
  00128	74 40		 je	 SHORT $LN17@P_SpawnShi

; 1178 : 	{
; 1179 : 		P_SetTarget(&shieldobj->target, player->mo);

  0012a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0012d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012f	51		 push	 ecx
  00130	8b 55 f4	 mov	 edx, DWORD PTR _shieldobj$[ebp]
  00133	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00139	52		 push	 edx
  0013a	e8 00 00 00 00	 call	 _P_SetTarget
  0013f	83 c4 08	 add	 esp, 8

; 1180 : 		var1 = 0;

  00142	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _var1, 0

; 1181 : 		var2 = shieldobj->info->painchance;

  0014c	8b 45 f4	 mov	 eax, DWORD PTR _shieldobj$[ebp]
  0014f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00155	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00158	89 15 00 00 00
	00		 mov	 DWORD PTR _var2, edx

; 1182 : 		A_ChangeColorAbsolute(shieldobj);

  0015e	8b 45 f4	 mov	 eax, DWORD PTR _shieldobj$[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _A_ChangeColorAbsolute
  00167	83 c4 04	 add	 esp, 4
$LN17@P_SpawnShi:

; 1183 : 	}
; 1184 : }

  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
_P_SpawnShieldOrb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_RestoreMusic
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_RestoreMusic PROC					; COMDAT

; 1010 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1011 : 	if (!P_IsLocalPlayer(player)) // Only applies to a local player

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  00012	83 c4 04	 add	 esp, 4
  00015	85 c0		 test	 eax, eax
  00017	75 05		 jne	 SHORT $LN2@P_RestoreM

; 1012 : 		return;

  00019	e9 f2 01 00 00	 jmp	 $LN15@P_RestoreM
$LN2@P_RestoreM:

; 1013 : 
; 1014 : 	if ((mus_playing == &S_music[mapmusic & 2047]) //the music is correct! don't come in and wreck our speed changes!
; 1015 : 		&& !(player->powers[pw_super] && !mapheaderinfo[gamemap-1].nossmusic)
; 1016 : 		&& !(player->powers[pw_invulnerability] > 1)
; 1017 : 		&& !(player->powers[pw_sneakers] > 1))

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  00023	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00028	c1 e0 04	 shl	 eax, 4
  0002b	05 00 00 00 00	 add	 eax, OFFSET _S_music
  00030	39 05 00 00 00
	00		 cmp	 DWORD PTR _mus_playing, eax
  00036	75 54		 jne	 SHORT $LN3@P_RestoreM
  00038	b8 04 00 00 00	 mov	 eax, 4
  0003d	6b c8 0f	 imul	 ecx, eax, 15
  00040	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00043	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00048	74 19		 je	 SHORT $LN4@P_RestoreM
  0004a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00051	83 e8 01	 sub	 eax, 1
  00054	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0005a	83 b9 28 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+296], 0
  00061	74 29		 je	 SHORT $LN3@P_RestoreM
$LN4@P_RestoreM:
  00063	b8 04 00 00 00	 mov	 eax, 4
  00068	6b c8 00	 imul	 ecx, eax, 0
  0006b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0006e	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  00073	7f 17		 jg	 SHORT $LN3@P_RestoreM
  00075	b8 04 00 00 00	 mov	 eax, 4
  0007a	c1 e0 00	 shl	 eax, 0
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00080	83 7c 01 38 01	 cmp	 DWORD PTR [ecx+eax+56], 1
  00085	7f 05		 jg	 SHORT $LN3@P_RestoreM

; 1018 : 		return;

  00087	e9 84 01 00 00	 jmp	 $LN15@P_RestoreM
$LN3@P_RestoreM:

; 1019 : 
; 1020 : 	if (player->powers[pw_super] && !mapheaderinfo[gamemap-1].nossmusic)

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 0f	 imul	 ecx, eax, 15
  00094	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00097	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0009c	74 43		 je	 SHORT $LN5@P_RestoreM
  0009e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000a5	83 e8 01	 sub	 eax, 1
  000a8	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000ae	83 b9 28 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+296], 0
  000b5	75 2a		 jne	 SHORT $LN5@P_RestoreM

; 1021 : 	{
; 1022 : 		S_SpeedMusic(1.0f);

  000b7	51		 push	 ecx
  000b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	e8 00 00 00 00	 call	 _S_SpeedMusic
  000ca	83 c4 04	 add	 esp, 4

; 1023 : 		S_ChangeMusic(mus_supers, true);

  000cd	6a 01		 push	 1
  000cf	68 16 04 00 00	 push	 1046			; 00000416H
  000d4	e8 00 00 00 00	 call	 _S_ChangeMusic
  000d9	83 c4 08	 add	 esp, 8

; 1024 : 	}

  000dc	e9 2f 01 00 00	 jmp	 $LN15@P_RestoreM
$LN5@P_RestoreM:

; 1025 : 	else if (player->powers[pw_invulnerability] > 1 && player->powers[pw_extralife] <= 1)

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	6b c8 00	 imul	 ecx, eax, 0
  000e9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ec	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  000f1	7e 5b		 jle	 SHORT $LN7@P_RestoreM
  000f3	b8 04 00 00 00	 mov	 eax, 4
  000f8	c1 e0 03	 shl	 eax, 3
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000fe	83 7c 01 38 01	 cmp	 DWORD PTR [ecx+eax+56], 1
  00103	7f 49		 jg	 SHORT $LN7@P_RestoreM

; 1026 : 	{
; 1027 : 		S_SpeedMusic(1.0f);

  00105	51		 push	 ecx
  00106	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	e8 00 00 00 00	 call	 _S_SpeedMusic
  00118	83 c4 04	 add	 esp, 4

; 1028 : 		if (mariomode)

  0011b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00122	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00127	74 11		 je	 SHORT $LN9@P_RestoreM

; 1029 : 			S_ChangeMusic(mus_minvnc, false);

  00129	6a 00		 push	 0
  0012b	68 11 04 00 00	 push	 1041			; 00000411H
  00130	e8 00 00 00 00	 call	 _S_ChangeMusic
  00135	83 c4 08	 add	 esp, 8
  00138	eb 0f		 jmp	 SHORT $LN10@P_RestoreM
$LN9@P_RestoreM:

; 1030 : 		else
; 1031 : 			S_ChangeMusic(mus_invinc, false);

  0013a	6a 00		 push	 0
  0013c	68 0f 04 00 00	 push	 1039			; 0000040fH
  00141	e8 00 00 00 00	 call	 _S_ChangeMusic
  00146	83 c4 08	 add	 esp, 8
$LN10@P_RestoreM:

; 1032 : 	}

  00149	e9 c2 00 00 00	 jmp	 $LN15@P_RestoreM
$LN7@P_RestoreM:

; 1033 : 	else if (player->powers[pw_sneakers] > 1)

  0014e	b8 04 00 00 00	 mov	 eax, 4
  00153	c1 e0 00	 shl	 eax, 0
  00156	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00159	83 7c 01 38 01	 cmp	 DWORD PTR [ecx+eax+56], 1
  0015e	7e 73		 jle	 SHORT $LN11@P_RestoreM

; 1034 : 	{
; 1035 : 		if (S_SpeedMusic(0.0f) && mapheaderinfo[gamemap-1].speedmusic)

  00160	51		 push	 ecx
  00161	0f 57 c0	 xorps	 xmm0, xmm0
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	e8 00 00 00 00	 call	 _S_SpeedMusic
  0016e	83 c4 04	 add	 esp, 4
  00171	85 c0		 test	 eax, eax
  00173	74 31		 je	 SHORT $LN13@P_RestoreM
  00175	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0017c	83 e8 01	 sub	 eax, 1
  0017f	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00185	83 b9 2c 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+300], 0
  0018c	74 18		 je	 SHORT $LN13@P_RestoreM

; 1036 : 			S_SpeedMusic(1.4f);

  0018e	51		 push	 ecx
  0018f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fb33333
  00197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019c	e8 00 00 00 00	 call	 _S_SpeedMusic
  001a1	83 c4 04	 add	 esp, 4
  001a4	eb 2b		 jmp	 SHORT $LN14@P_RestoreM
$LN13@P_RestoreM:

; 1037 : 		else
; 1038 : 		{
; 1039 : 			S_SpeedMusic(1.0f);

  001a6	51		 push	 ecx
  001a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b4	e8 00 00 00 00	 call	 _S_SpeedMusic
  001b9	83 c4 04	 add	 esp, 4

; 1040 : 			S_ChangeMusic(mapmusic & 2047, true);

  001bc	6a 01		 push	 1
  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  001c3	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 _S_ChangeMusic
  001ce	83 c4 08	 add	 esp, 8
$LN14@P_RestoreM:

; 1041 : 		}
; 1042 : 	}

  001d1	eb 3d		 jmp	 SHORT $LN15@P_RestoreM
$LN11@P_RestoreM:

; 1043 : 	else if (!(player->powers[pw_extralife] > 1))

  001d3	b8 04 00 00 00	 mov	 eax, 4
  001d8	c1 e0 03	 shl	 eax, 3
  001db	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001de	83 7c 01 38 01	 cmp	 DWORD PTR [ecx+eax+56], 1
  001e3	7f 2b		 jg	 SHORT $LN15@P_RestoreM

; 1044 : 	{
; 1045 : 		S_SpeedMusic(1.0f);

  001e5	51		 push	 ecx
  001e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	e8 00 00 00 00	 call	 _S_SpeedMusic
  001f8	83 c4 04	 add	 esp, 4

; 1046 : 		S_ChangeMusic(mapmusic & 2047, true);

  001fb	6a 01		 push	 1
  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  00202	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 _S_ChangeMusic
  0020d	83 c4 08	 add	 esp, 8
$LN15@P_RestoreM:

; 1047 : 	}
; 1048 : }

  00210	5f		 pop	 edi
  00211	5e		 pop	 esi
  00212	5b		 pop	 ebx
  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c3		 ret	 0
_P_RestoreMusic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_SetObjectMomZ
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_value$ = 12						; size = 4
_relative$ = 16						; size = 4
_P_SetObjectMomZ PROC					; COMDAT

; 1080 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1081 : 	if (mo->eflags & MFE_VERTICALFLIP)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00012	83 e1 20	 and	 ecx, 32			; 00000020H
  00015	74 08		 je	 SHORT $LN2@P_SetObjec

; 1082 : 		value = -value;

  00017	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0001a	f7 d8		 neg	 eax
  0001c	89 45 0c	 mov	 DWORD PTR _value$[ebp], eax
$LN2@P_SetObjec:

; 1083 : 
; 1084 : 	if (relative)

  0001f	83 7d 10 00	 cmp	 DWORD PTR _relative$[ebp], 0
  00023	74 4b		 je	 SHORT $LN3@P_SetObjec

; 1085 : 	{
; 1086 : 		if (mo->scale != 100)

  00025	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00028	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0002f	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00032	74 2b		 je	 SHORT $LN5@P_SetObjec

; 1087 : 			value = FIXEDSCALE(value, mo->scale);

  00034	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00037	50		 push	 eax
  00038	68 00 00 64 00	 push	 6553600			; 00640000H
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00040	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00047	c1 e2 10	 shl	 edx, 16			; 00000010H
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 _FixedDiv
  00050	83 c4 08	 add	 esp, 8
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _FixedMul
  00059	83 c4 08	 add	 esp, 8
  0005c	89 45 0c	 mov	 DWORD PTR _value$[ebp], eax
$LN5@P_SetObjec:

; 1088 : 
; 1089 : 		mo->momz += value;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00062	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00065	03 4d 0c	 add	 ecx, DWORD PTR _value$[ebp]
  00068	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0006b	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 1090 : 	}

  0006e	eb 43		 jmp	 SHORT $LN4@P_SetObjec
$LN3@P_SetObjec:

; 1091 : 	else
; 1092 : 	{
; 1093 : 		if (mo->scale != 100)

  00070	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00073	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0007a	83 f9 64	 cmp	 ecx, 100		; 00000064H
  0007d	74 2b		 je	 SHORT $LN6@P_SetObjec

; 1094 : 			value = FIXEDSCALE(value, mo->scale);

  0007f	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00082	50		 push	 eax
  00083	68 00 00 64 00	 push	 6553600			; 00640000H
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0008b	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00092	c1 e2 10	 shl	 edx, 16			; 00000010H
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 _FixedDiv
  0009b	83 c4 08	 add	 esp, 8
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _FixedMul
  000a4	83 c4 08	 add	 esp, 8
  000a7	89 45 0c	 mov	 DWORD PTR _value$[ebp], eax
$LN6@P_SetObjec:

; 1095 : 		mo->momz = value;

  000aa	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000ad	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  000b0	89 48 50	 mov	 DWORD PTR [eax+80], ecx
$LN4@P_SetObjec:

; 1096 : 	}
; 1097 : }

  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_P_SetObjectMomZ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_IsObjectOnGround
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_P_IsObjectOnGround PROC				; COMDAT

; 1058 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1059 : 	if (mo->eflags & MFE_VERTICALFLIP)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00012	83 e1 20	 and	 ecx, 32			; 00000020H
  00015	74 1d		 je	 SHORT $LN2@P_IsObject

; 1060 : 	{
; 1061 : 		if (mo->z+mo->height >= mo->ceilingz)

  00017	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00020	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00023	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00026	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00029	7c 07		 jl	 SHORT $LN4@P_IsObject

; 1062 : 			return true;

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	eb 2a		 jmp	 SHORT $LN1@P_IsObject
$LN4@P_IsObject:

; 1063 : 	}

  00032	eb 26		 jmp	 SHORT $LN5@P_IsObject
$LN2@P_IsObject:

; 1064 : 	else
; 1065 : 	{
; 1066 : 		if ((mo->z <= mo->floorz) || (mo->flags2&(MF2_ONMOBJ)))

  00034	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0003a	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0003d	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00040	7e 11		 jle	 SHORT $LN6@P_IsObject
  00042	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00045	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0004b	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00051	74 07		 je	 SHORT $LN5@P_IsObject
$LN6@P_IsObject:

; 1067 : 			return true;

  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	eb 02		 jmp	 SHORT $LN1@P_IsObject
$LN5@P_IsObject:

; 1068 : 	}
; 1069 : 
; 1070 : 	return false;

  0005a	33 c0		 xor	 eax, eax
$LN1@P_IsObject:

; 1071 : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_P_IsObjectOnGround ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_IsLocalPlayer
_TEXT	SEGMENT
tv71 = -68						; size = 4
_player$ = 8						; size = 4
_P_IsLocalPlayer PROC					; COMDAT

; 1128 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1129 : 	return ((splitscreen && player == &players[secondarydisplayplayer]) || player == &players[consoleplayer]);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00010	74 14		 je	 SHORT $LN3@P_IsLocalP
  00012	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0001c	05 00 00 00 00	 add	 eax, OFFSET _players
  00021	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00024	74 1e		 je	 SHORT $LN4@P_IsLocalP
$LN3@P_IsLocalP:
  00026	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  00030	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  00036	39 4d 08	 cmp	 DWORD PTR _player$[ebp], ecx
  00039	74 09		 je	 SHORT $LN4@P_IsLocalP
  0003b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  00042	eb 07		 jmp	 SHORT $LN5@P_IsLocalP
$LN4@P_IsLocalP:
  00044	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
$LN5@P_IsLocalP:
  0004b	8b 45 bc	 mov	 eax, DWORD PTR tv71[ebp]

; 1130 : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_P_IsLocalPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_ResetPlayer
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_ResetPlayer PROC					; COMDAT

; 844  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 845  : 	player->pflags &= ~PF_MINECART;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00012	81 e1 ff ff ff
	bf		 and	 ecx, -1073741825	; bfffffffH
  00018	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0001b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 846  : 	player->pflags &= ~PF_ROPEHANG;

  00021	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00024	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0002a	81 e1 ff ff ff
	df		 and	 ecx, -536870913		; dfffffffH
  00030	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00033	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 847  : 	player->pflags &= ~PF_ITEMHANG;

  00039	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0003c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00042	81 e1 ff ff f7
	ff		 and	 ecx, -524289		; fff7ffffH
  00048	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0004b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 848  : 	player->pflags &= ~PF_MACESPIN;

  00051	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00054	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0005a	81 e1 ff ff ef
	ff		 and	 ecx, -1048577		; ffefffffH
  00060	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00063	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 849  : 	player->pflags &= ~PF_SPINNING;

  00069	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00072	81 e1 ff df ff
	ff		 and	 ecx, -8193		; ffffdfffH
  00078	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0007b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 850  : 	player->pflags &= ~PF_JUMPED;

  00081	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00084	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0008a	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  00090	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00093	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 851  : 	player->pflags &= ~PF_GLIDING;

  00099	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0009c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000a2	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  000a8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ab	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 852  : 	player->pflags &= ~PF_THOKKED;

  000b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000ba	81 e1 ff 7f ff
	ff		 and	 ecx, -32769		; ffff7fffH
  000c0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000c3	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 853  : 	player->pflags &= ~PF_CARRIED;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000cc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000d2	81 e1 ff ff fd
	ff		 and	 ecx, -131073		; fffdffffH
  000d8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000db	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 854  : 	player->secondjump = 0;

  000e1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e4	c6 80 14 01 00
	00 00		 mov	 BYTE PTR [eax+276], 0

; 855  : 	player->glidetime = 0;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ee	c7 80 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+288], 0

; 856  : 	player->homing = 0;

  000f8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000fb	c6 80 38 01 00
	00 00		 mov	 BYTE PTR [eax+312], 0

; 857  : 	player->climbing = 0;

  00102	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00105	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 858  : 	player->powers[pw_tailsfly] = 0;

  0010f	b8 04 00 00 00	 mov	 eax, 4
  00114	6b c8 05	 imul	 ecx, eax, 5
  00117	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0011a	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 859  : 	player->onconveyor = 0;

  00122	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00125	c7 80 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+484], 0

; 860  : }

  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c3		 ret	 0
_P_ResetPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_DoPlayerPain
_TEXT	SEGMENT
_dist$1 = -12						; size = 4
_fallbackspeed$ = -8					; size = 4
_ang$ = -4						; size = 4
_player$ = 8						; size = 4
_source$ = 12						; size = 4
_inflictor$ = 16					; size = 4
_P_DoPlayerPain PROC					; COMDAT

; 767  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 768  : 	angle_t ang;
; 769  : 	fixed_t fallbackspeed;
; 770  : 
; 771  : 	player->mo->z++;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	83 c2 01	 add	 edx, 1
  00014	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 772  : 
; 773  : 	if (player->mo->eflags & MFE_UNDERWATER)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00027	83 e2 08	 and	 edx, 8
  0002a	74 25		 je	 SHORT $LN2@P_DoPlayer

; 774  : 		P_SetObjectMomZ(player->mo, FixedDiv(10511*FRACUNIT,2600*FRACUNIT), false);

  0002c	6a 00		 push	 0
  0002e	68 00 00 28 0a	 push	 170393600		; 0a280000H
  00033	68 00 00 0f 29	 push	 688848896		; 290f0000H
  00038	e8 00 00 00 00	 call	 _FixedDiv
  0003d	83 c4 08	 add	 esp, 8
  00040	50		 push	 eax
  00041	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	eb 23		 jmp	 SHORT $LN3@P_DoPlayer
$LN2@P_DoPlayer:

; 775  : 	else
; 776  : 		P_SetObjectMomZ(player->mo, FixedDiv(69*FRACUNIT,10*FRACUNIT), false);

  00051	6a 00		 push	 0
  00053	68 00 00 0a 00	 push	 655360			; 000a0000H
  00058	68 00 00 45 00	 push	 4521984			; 00450000H
  0005d	e8 00 00 00 00	 call	 _FixedDiv
  00062	83 c4 08	 add	 esp, 8
  00065	50		 push	 eax
  00066	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@P_DoPlayer:

; 777  : 
; 778  : 	if (inflictor)

  00074	83 7d 10 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00078	0f 84 24 01 00
	00		 je	 $LN4@P_DoPlayer

; 779  : 	{
; 780  : 		ang = R_PointToAngle2(inflictor->x-inflictor->momx,	inflictor->y - inflictor->momy, player->mo->x - player->mo->momx, player->mo->y - player->mo->momy);

  0007e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0008b	2b 48 4c	 sub	 ecx, DWORD PTR [eax+76]
  0008e	51		 push	 ecx
  0008f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00092	8b 02		 mov	 eax, DWORD PTR [edx]
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0009c	2b 42 48	 sub	 eax, DWORD PTR [edx+72]
  0009f	50		 push	 eax
  000a0	8b 4d 10	 mov	 ecx, DWORD PTR _inflictor$[ebp]
  000a3	8b 55 10	 mov	 edx, DWORD PTR _inflictor$[ebp]
  000a6	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000a9	2b 42 4c	 sub	 eax, DWORD PTR [edx+76]
  000ac	50		 push	 eax
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _inflictor$[ebp]
  000b0	8b 55 10	 mov	 edx, DWORD PTR _inflictor$[ebp]
  000b3	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000b6	2b 42 48	 sub	 eax, DWORD PTR [edx+72]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _R_PointToAngle2
  000bf	83 c4 10	 add	 esp, 16			; 00000010H
  000c2	89 45 fc	 mov	 DWORD PTR _ang$[ebp], eax

; 781  : 
; 782  : 		// explosion and rail rings send you farther back, making it more difficult
; 783  : 		// to recover
; 784  : 		if ((inflictor->flags2 & MF2_SCATTER) && source)

  000c5	8b 45 10	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000c8	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000ce	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  000d4	74 75		 je	 SHORT $LN6@P_DoPlayer
  000d6	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  000da	74 6f		 je	 SHORT $LN6@P_DoPlayer

; 785  : 		{
; 786  : 			fixed_t dist = P_AproxDistance(P_AproxDistance(source->x-player->mo->x, source->y-player->mo->y), source->z-player->mo->z);

  000dc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  000e4	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000e7	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  000ea	50		 push	 eax
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f0	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  000f3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000f6	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  000f9	51		 push	 ecx
  000fa	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00102	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00105	2b 50 10	 sub	 edx, DWORD PTR [eax+16]
  00108	52		 push	 edx
  00109	e8 00 00 00 00	 call	 _P_AproxDistance
  0010e	83 c4 08	 add	 esp, 8
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 _P_AproxDistance
  00117	83 c4 08	 add	 esp, 8
  0011a	89 45 f4	 mov	 DWORD PTR _dist$1[ebp], eax

; 787  : 
; 788  : 			dist = 128*FRACUNIT - dist/4;

  0011d	8b 45 f4	 mov	 eax, DWORD PTR _dist$1[ebp]
  00120	99		 cdq
  00121	83 e2 03	 and	 edx, 3
  00124	03 c2		 add	 eax, edx
  00126	c1 f8 02	 sar	 eax, 2
  00129	b9 00 00 80 00	 mov	 ecx, 8388608		; 00800000H
  0012e	2b c8		 sub	 ecx, eax
  00130	89 4d f4	 mov	 DWORD PTR _dist$1[ebp], ecx

; 789  : 
; 790  : 			if (dist < 4*FRACUNIT)

  00133	81 7d f4 00 00
	04 00		 cmp	 DWORD PTR _dist$1[ebp], 262144 ; 00040000H
  0013a	7d 07		 jge	 SHORT $LN8@P_DoPlayer

; 791  : 				dist = 4*FRACUNIT;

  0013c	c7 45 f4 00 00
	04 00		 mov	 DWORD PTR _dist$1[ebp], 262144 ; 00040000H
$LN8@P_DoPlayer:

; 792  : 
; 793  : 			fallbackspeed = dist;

  00143	8b 45 f4	 mov	 eax, DWORD PTR _dist$1[ebp]
  00146	89 45 f8	 mov	 DWORD PTR _fallbackspeed$[ebp], eax

; 794  : 		}

  00149	eb 55		 jmp	 SHORT $LN14@P_DoPlayer
$LN6@P_DoPlayer:

; 795  : 		else if (inflictor->flags2 & MF2_EXPLOSION)

  0014b	8b 45 10	 mov	 eax, DWORD PTR _inflictor$[ebp]
  0014e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00154	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  0015a	74 23		 je	 SHORT $LN9@P_DoPlayer

; 796  : 		{
; 797  : 			if (inflictor->flags2 & MF2_RAILRING)

  0015c	8b 45 10	 mov	 eax, DWORD PTR _inflictor$[ebp]
  0015f	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00165	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  0016b	74 09		 je	 SHORT $LN11@P_DoPlayer

; 798  : 				fallbackspeed = 38*FRACUNIT; // 7x

  0016d	c7 45 f8 00 00
	26 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 2490368 ; 00260000H
  00174	eb 07		 jmp	 SHORT $LN12@P_DoPlayer
$LN11@P_DoPlayer:

; 799  : 			else
; 800  : 				fallbackspeed = 30*FRACUNIT; // 5x

  00176	c7 45 f8 00 00
	1e 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 1966080 ; 001e0000H
$LN12@P_DoPlayer:

; 801  : 		}

  0017d	eb 21		 jmp	 SHORT $LN14@P_DoPlayer
$LN9@P_DoPlayer:

; 802  : 		else if (inflictor->flags2 & MF2_RAILRING)

  0017f	8b 45 10	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00182	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00188	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  0018e	74 09		 je	 SHORT $LN13@P_DoPlayer

; 803  : 			fallbackspeed = 45*FRACUNIT; // 4x

  00190	c7 45 f8 00 00
	2d 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 2949120 ; 002d0000H
  00197	eb 07		 jmp	 SHORT $LN14@P_DoPlayer
$LN13@P_DoPlayer:

; 804  : 		else
; 805  : 			fallbackspeed = 4*FRACUNIT; // the usual amount of force

  00199	c7 45 f8 00 00
	04 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 262144 ; 00040000H
$LN14@P_DoPlayer:

; 806  : 	}

  001a0	eb 46		 jmp	 SHORT $LN5@P_DoPlayer
$LN4@P_DoPlayer:

; 807  : 	else
; 808  : 	{
; 809  : 		ang = R_PointToAngle2(player->mo->x + player->mo->momx, player->mo->y + player->mo->momy, player->mo->x, player->mo->y);

  001a2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001aa	52		 push	 edx
  001ab	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001b3	52		 push	 edx
  001b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001bc	8b 02		 mov	 eax, DWORD PTR [edx]
  001be	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  001c1	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  001c4	51		 push	 ecx
  001c5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001c8	8b 02		 mov	 eax, DWORD PTR [edx]
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cf	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  001d2	03 42 48	 add	 eax, DWORD PTR [edx+72]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _R_PointToAngle2
  001db	83 c4 10	 add	 esp, 16			; 00000010H
  001de	89 45 fc	 mov	 DWORD PTR _ang$[ebp], eax

; 810  : 		fallbackspeed = 4*FRACUNIT;

  001e1	c7 45 f8 00 00
	04 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 262144 ; 00040000H
$LN5@P_DoPlayer:

; 811  : 	}
; 812  : 
; 813  : 	if (maptol & TOL_ERZ3)

  001e8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  001ef	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  001f4	74 1c		 je	 SHORT $LN15@P_DoPlayer

; 814  : 	{
; 815  : 		fallbackspeed >>= 2;

  001f6	8b 45 f8	 mov	 eax, DWORD PTR _fallbackspeed$[ebp]
  001f9	c1 f8 02	 sar	 eax, 2
  001fc	89 45 f8	 mov	 DWORD PTR _fallbackspeed$[ebp], eax

; 816  : 		player->mo->momz >>= 2;

  001ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00202	8b 08		 mov	 ecx, DWORD PTR [eax]
  00204	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00207	c1 fa 02	 sar	 edx, 2
  0020a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0020d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020f	89 51 50	 mov	 DWORD PTR [ecx+80], edx
$LN15@P_DoPlayer:

; 817  : 	}
; 818  : 
; 819  : 	P_InstaThrust(player->mo, ang, fallbackspeed);

  00212	8b 45 f8	 mov	 eax, DWORD PTR _fallbackspeed$[ebp]
  00215	50		 push	 eax
  00216	8b 4d fc	 mov	 ecx, DWORD PTR _ang$[ebp]
  00219	51		 push	 ecx
  0021a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0021d	8b 02		 mov	 eax, DWORD PTR [edx]
  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 _P_InstaThrust
  00225	83 c4 0c	 add	 esp, 12			; 0000000cH

; 820  : 
; 821  : 	if ((player->pflags & PF_ROPEHANG) || (player->pflags & PF_MINECART))

  00228	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0022b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00231	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  00237	75 11		 jne	 SHORT $LN17@P_DoPlayer
  00239	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0023c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00242	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  00248	74 16		 je	 SHORT $LN16@P_DoPlayer
$LN17@P_DoPlayer:

; 822  : 		P_SetTarget(&player->mo->tracer, NULL);

  0024a	6a 00		 push	 0
  0024c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0024f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00251	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00257	51		 push	 ecx
  00258	e8 00 00 00 00	 call	 _P_SetTarget
  0025d	83 c4 08	 add	 esp, 8
$LN16@P_DoPlayer:

; 823  : 
; 824  : 	// Point penalty for hitting a hazard during tag.
; 825  : 	// Discourages players from intentionally hurting themselves to avoid being tagged.
; 826  : 	if (gametype == GT_TAG && (!(player->pflags & PF_TAGGED) && !(player->pflags & PF_TAGIT)))

  00260	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00267	83 f8 03	 cmp	 eax, 3
  0026a	75 52		 jne	 SHORT $LN20@P_DoPlayer
  0026c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0026f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00275	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  0027b	75 41		 jne	 SHORT $LN20@P_DoPlayer
  0027d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00280	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00286	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0028c	75 30		 jne	 SHORT $LN20@P_DoPlayer

; 827  : 	{
; 828  : 		if (player->score >= 50)

  0028e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00291	83 b8 bc 00 00
	00 32		 cmp	 DWORD PTR [eax+188], 50	; 00000032H
  00298	72 17		 jb	 SHORT $LN19@P_DoPlayer

; 829  : 			player->score -= 50;

  0029a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0029d	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  002a3	83 e9 32	 sub	 ecx, 50			; 00000032H
  002a6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002a9	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
  002af	eb 0d		 jmp	 SHORT $LN20@P_DoPlayer
$LN19@P_DoPlayer:

; 830  : 		else
; 831  : 			player->score = 0;

  002b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002b4	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+188], 0
$LN20@P_DoPlayer:

; 832  : 	}
; 833  : 
; 834  : 	P_ResetPlayer(player);

  002be	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 _P_ResetPlayer
  002c7	83 c4 04	 add	 esp, 4

; 835  : 	P_SetPlayerMobjState(player->mo, player->mo->info->painstate);

  002ca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cf	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  002d5	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  002d8	50		 push	 eax
  002d9	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  002de	52		 push	 edx
  002df	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  002e4	83 c4 08	 add	 esp, 8

; 836  : 	player->powers[pw_flashing] = flashingtics;

  002e7	b8 04 00 00 00	 mov	 eax, 4
  002ec	d1 e0		 shl	 eax, 1
  002ee	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _flashingtics
  002f7	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx

; 837  : }

  002fb	5f		 pop	 edi
  002fc	5e		 pop	 esi
  002fd	5b		 pop	 ebx
  002fe	8b e5		 mov	 esp, ebp
  00300	5d		 pop	 ebp
  00301	c3		 ret	 0
_P_DoPlayerPain ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_MoveChaseCamera
_TEXT	SEGMENT
tv902 = -236						; size = 4
tv476 = -236						; size = 4
tv347 = -236						; size = 4
tv337 = -236						; size = 4
_rover$1 = -168						; size = 4
_polybottom$2 = -164					; size = 4
_polytop$3 = -160					; size = 4
_thingtop$4 = -156					; size = 4
_delta2$5 = -152					; size = 4
_delta1$6 = -148					; size = 4
_polysec$7 = -144					; size = 4
_po$8 = -140						; size = 4
_plink$9 = -136						; size = 4
_offset$10 = -132					; size = 4
_by$11 = -128						; size = 4
_bx$12 = -124						; size = 4
_yh$13 = -120						; size = 4
_yl$14 = -116						; size = 4
_xh$15 = -112						; size = 4
_xl$16 = -108						; size = 4
_thingtop$17 = -104					; size = 4
_delta2$18 = -100					; size = 4
_delta1$19 = -96					; size = 4
_rover$20 = -92						; size = 4
_midz$21 = -88						; size = 4
_myceilingz$22 = -84					; size = 4
_myfloorz$23 = -80					; size = 4
_f2$ = -76						; size = 4
_f1$ = -72						; size = 4
_newsubsec$ = -68					; size = 4
_mo$ = -64						; size = 4
_camstill$ = -60					; size = 4
_camrotate$ = -56					; size = 4
_pviewheight$ = -52					; size = 4
_camheight$ = -48					; size = 4
_camdist$ = -44						; size = 4
_camspeed$ = -40					; size = 4
_viewpointy$ = -36					; size = 4
_viewpointx$ = -32					; size = 4
_checkdist$ = -28					; size = 4
_dist$ = -24						; size = 4
_z$ = -20						; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_focusangle$ = -8					; size = 4
_angle$ = -4						; size = 4
_player$ = 8						; size = 4
_thiscam$ = 12						; size = 4
_netcalled$ = 16					; size = 4
_P_MoveChaseCamera PROC					; COMDAT

; 9155 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9156 : 	angle_t angle = 0, focusangle = 0;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _angle$[ebp], 0
  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _focusangle$[ebp], 0

; 9157 : 	fixed_t x, y, z, dist, checkdist, viewpointx, viewpointy, camspeed, camdist, camheight, pviewheight;
; 9158 : 	INT32 camrotate;
; 9159 : 	boolean camstill;
; 9160 : 	mobj_t *mo;
; 9161 : 	subsector_t *newsubsec;
; 9162 : 	fixed_t f1, f2;
; 9163 : 
; 9164 : 	if (!cv_chasecam.value && thiscam == &camera)

  0001a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00021	75 0e		 jne	 SHORT $LN16@P_MoveChas
  00023	81 7d 0c 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  0002a	75 05		 jne	 SHORT $LN16@P_MoveChas

; 9165 : 		return;

  0002c	e9 cb 12 00 00	 jmp	 $LN121@P_MoveChas
$LN16@P_MoveChas:

; 9166 : 
; 9167 : 	if (!cv_chasecam2.value && thiscam == &camera2)

  00031	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  00038	75 0e		 jne	 SHORT $LN17@P_MoveChas
  0003a	81 7d 0c 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  00041	75 05		 jne	 SHORT $LN17@P_MoveChas

; 9168 : 		return;

  00043	e9 b4 12 00 00	 jmp	 $LN121@P_MoveChas
$LN17@P_MoveChas:

; 9169 : 
; 9170 : 	if (!thiscam->chase)

  00048	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0004b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004e	75 10		 jne	 SHORT $LN18@P_MoveChas

; 9171 : 		P_ResetCamera(player, thiscam);

  00050	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00053	50		 push	 eax
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 _P_ResetCamera
  0005d	83 c4 08	 add	 esp, 8
$LN18@P_MoveChas:

; 9172 : 
; 9173 : 	if (!player)

  00060	83 7d 08 00	 cmp	 DWORD PTR _player$[ebp], 0
  00064	75 05		 jne	 SHORT $LN19@P_MoveChas

; 9174 : 		return;

  00066	e9 91 12 00 00	 jmp	 $LN121@P_MoveChas
$LN19@P_MoveChas:

; 9175 : 
; 9176 : 	mo = player->mo;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	89 4d c0	 mov	 DWORD PTR _mo$[ebp], ecx

; 9177 : 
; 9178 : 	thiscam->radius = FIXEDSCALE(20*FRACUNIT, mo->scale);

  00073	68 00 00 14 00	 push	 1310720			; 00140000H
  00078	68 00 00 64 00	 push	 6553600			; 00640000H
  0007d	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00080	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00087	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _FixedDiv
  00090	83 c4 08	 add	 esp, 8
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _FixedMul
  00099	83 c4 08	 add	 esp, 8
  0009c	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  0009f	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 9179 : 	thiscam->height = FIXEDSCALE(16*FRACUNIT, mo->scale);

  000a2	68 00 00 10 00	 push	 1048576			; 00100000H
  000a7	68 00 00 64 00	 push	 6553600			; 00640000H
  000ac	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  000af	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  000b6	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _FixedDiv
  000bf	83 c4 08	 add	 esp, 8
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _FixedMul
  000c8	83 c4 08	 add	 esp, 8
  000cb	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  000ce	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 9180 : 
; 9181 : 	if (!mo)

  000d1	83 7d c0 00	 cmp	 DWORD PTR _mo$[ebp], 0
  000d5	75 05		 jne	 SHORT $LN20@P_MoveChas

; 9182 : 		return;

  000d7	e9 20 12 00 00	 jmp	 $LN121@P_MoveChas
$LN20@P_MoveChas:

; 9183 : 
; 9184 : 	if (leveltime > 0 && timeinmap <= 0) // Don't run while respawning from a starpost

  000dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _leveltime, 0
  000e3	76 0e		 jbe	 SHORT $LN21@P_MoveChas
  000e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeinmap, 0
  000ec	77 05		 ja	 SHORT $LN21@P_MoveChas

; 9185 : 		return;

  000ee	e9 09 12 00 00	 jmp	 $LN121@P_MoveChas
$LN21@P_MoveChas:

; 9186 : 
; 9187 : 	if (netcalled && !demoplayback && displayplayer == consoleplayer)

  000f3	83 7d 10 00	 cmp	 DWORD PTR _netcalled$[ebp], 0
  000f7	74 52		 je	 SHORT $LN22@P_MoveChas
  000f9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00100	75 49		 jne	 SHORT $LN22@P_MoveChas
  00102	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  00107	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0010d	75 3c		 jne	 SHORT $LN22@P_MoveChas

; 9188 : 	{
; 9189 : 		if (player == &players[consoleplayer])

  0010f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00119	05 00 00 00 00	 add	 eax, OFFSET _players
  0011e	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00121	75 0a		 jne	 SHORT $LN24@P_MoveChas

; 9190 : 			focusangle = localangle;

  00123	a1 00 00 00 00	 mov	 eax, DWORD PTR _localangle
  00128	89 45 f8	 mov	 DWORD PTR _focusangle$[ebp], eax
  0012b	eb 1c		 jmp	 SHORT $LN26@P_MoveChas
$LN24@P_MoveChas:

; 9191 : 		else if (player == &players[secondarydisplayplayer])

  0012d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00137	05 00 00 00 00	 add	 eax, OFFSET _players
  0013c	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0013f	75 08		 jne	 SHORT $LN26@P_MoveChas

; 9192 : 			focusangle = localangle2;

  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR _localangle2
  00146	89 45 f8	 mov	 DWORD PTR _focusangle$[ebp], eax
$LN26@P_MoveChas:

; 9193 : 	}

  00149	eb 0b		 jmp	 SHORT $LN23@P_MoveChas
$LN22@P_MoveChas:

; 9194 : 	else
; 9195 : 		focusangle = player->mo->angle;

  0014b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0014e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00150	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00153	89 55 f8	 mov	 DWORD PTR _focusangle$[ebp], edx
$LN23@P_MoveChas:

; 9196 : 
; 9197 : 	P_CameraThinker(player, thiscam);

  00156	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00159	50		 push	 eax
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 _P_CameraThinker
  00163	83 c4 08	 add	 esp, 8

; 9198 : 
; 9199 : 	if (thiscam == &camera)

  00166	81 7d 0c 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  0016d	0f 85 92 00 00
	00		 jne	 $LN27@P_MoveChas

; 9200 : 	{
; 9201 : 		camspeed = cv_cam_speed.value;

  00173	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_speed+20
  00178	89 45 d8	 mov	 DWORD PTR _camspeed$[ebp], eax

; 9202 : 		camstill = cv_cam_still.value;

  0017b	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_still+20
  00180	89 45 c4	 mov	 DWORD PTR _camstill$[ebp], eax

; 9203 : 		camrotate = cv_cam_rotate.value;

  00183	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_rotate+20
  00188	89 45 c8	 mov	 DWORD PTR _camrotate$[ebp], eax

; 9204 : 
; 9205 : 		if (player->pflags & PF_NIGHTSMODE)

  0018b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0018e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00194	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  0019a	74 0a		 je	 SHORT $LN29@P_MoveChas

; 9206 : 			camdist = cv_cam_dist.value;

  0019c	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_dist+20
  001a1	89 45 d4	 mov	 DWORD PTR _camdist$[ebp], eax
  001a4	eb 2d		 jmp	 SHORT $LN30@P_MoveChas
$LN29@P_MoveChas:

; 9207 : 		else
; 9208 : 			camdist = FIXEDSCALE(cv_cam_dist.value, mo->scale);

  001a6	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_dist+20
  001ab	50		 push	 eax
  001ac	68 00 00 64 00	 push	 6553600			; 00640000H
  001b1	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  001b4	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  001bb	c1 e2 10	 shl	 edx, 16			; 00000010H
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 _FixedDiv
  001c4	83 c4 08	 add	 esp, 8
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 _FixedMul
  001cd	83 c4 08	 add	 esp, 8
  001d0	89 45 d4	 mov	 DWORD PTR _camdist$[ebp], eax
$LN30@P_MoveChas:

; 9209 : 
; 9210 : 		camheight = FIXEDSCALE(cv_cam_height.value, mo->scale);

  001d3	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_height+20
  001d8	50		 push	 eax
  001d9	68 00 00 64 00	 push	 6553600			; 00640000H
  001de	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  001e1	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  001e8	c1 e2 10	 shl	 edx, 16			; 00000010H
  001eb	52		 push	 edx
  001ec	e8 00 00 00 00	 call	 _FixedDiv
  001f1	83 c4 08	 add	 esp, 8
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 _FixedMul
  001fa	83 c4 08	 add	 esp, 8
  001fd	89 45 d0	 mov	 DWORD PTR _camheight$[ebp], eax

; 9211 : 	}

  00200	e9 8d 00 00 00	 jmp	 $LN28@P_MoveChas
$LN27@P_MoveChas:

; 9212 : 	else // Camera 2
; 9213 : 	{
; 9214 : 		camspeed = cv_cam2_speed.value;

  00205	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_speed+20
  0020a	89 45 d8	 mov	 DWORD PTR _camspeed$[ebp], eax

; 9215 : 		camstill = cv_cam2_still.value;

  0020d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_still+20
  00212	89 45 c4	 mov	 DWORD PTR _camstill$[ebp], eax

; 9216 : 		camrotate = cv_cam2_rotate.value;

  00215	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_rotate+20
  0021a	89 45 c8	 mov	 DWORD PTR _camrotate$[ebp], eax

; 9217 : 
; 9218 : 		if (player->pflags & PF_NIGHTSMODE)

  0021d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00220	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00226	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  0022c	74 0a		 je	 SHORT $LN31@P_MoveChas

; 9219 : 			camdist = cv_cam2_dist.value;

  0022e	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_dist+20
  00233	89 45 d4	 mov	 DWORD PTR _camdist$[ebp], eax
  00236	eb 2d		 jmp	 SHORT $LN32@P_MoveChas
$LN31@P_MoveChas:

; 9220 : 		else
; 9221 : 			camdist = FIXEDSCALE(cv_cam2_dist.value, mo->scale);

  00238	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_dist+20
  0023d	50		 push	 eax
  0023e	68 00 00 64 00	 push	 6553600			; 00640000H
  00243	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  00246	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0024d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 _FixedDiv
  00256	83 c4 08	 add	 esp, 8
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _FixedMul
  0025f	83 c4 08	 add	 esp, 8
  00262	89 45 d4	 mov	 DWORD PTR _camdist$[ebp], eax
$LN32@P_MoveChas:

; 9222 : 
; 9223 : 		camheight = FIXEDSCALE(cv_cam2_height.value, mo->scale);

  00265	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_height+20
  0026a	50		 push	 eax
  0026b	68 00 00 64 00	 push	 6553600			; 00640000H
  00270	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  00273	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0027a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0027d	52		 push	 edx
  0027e	e8 00 00 00 00	 call	 _FixedDiv
  00283	83 c4 08	 add	 esp, 8
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 _FixedMul
  0028c	83 c4 08	 add	 esp, 8
  0028f	89 45 d0	 mov	 DWORD PTR _camheight$[ebp], eax
$LN28@P_MoveChas:

; 9224 : 	}
; 9225 : 
; 9226 : 	if (twodlevel || (mo->flags2 & MF2_TWOD))

  00292	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00299	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0029e	75 11		 jne	 SHORT $LN35@P_MoveChas
  002a0	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  002a3	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  002a9	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  002af	74 0c		 je	 SHORT $LN33@P_MoveChas
$LN35@P_MoveChas:

; 9227 : 		angle = ANGLE_90;

  002b1	c7 45 fc 00 00
	00 40		 mov	 DWORD PTR _angle$[ebp], 1073741824 ; 40000000H
  002b8	e9 c4 01 00 00	 jmp	 $LN46@P_MoveChas
$LN33@P_MoveChas:

; 9228 : 	else if (camstill)

  002bd	83 7d c4 00	 cmp	 DWORD PTR _camstill$[ebp], 0
  002c1	74 0e		 je	 SHORT $LN36@P_MoveChas

; 9229 : 		angle = thiscam->angle;

  002c3	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  002c6	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002c9	89 4d fc	 mov	 DWORD PTR _angle$[ebp], ecx
  002cc	e9 b0 01 00 00	 jmp	 $LN46@P_MoveChas
$LN36@P_MoveChas:

; 9230 : 	else if (player->pflags & PF_NIGHTSMODE) // NiGHTS Level

  002d1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002d4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002da	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  002e0	0f 84 1a 01 00
	00		 je	 $LN38@P_MoveChas

; 9231 : 	{
; 9232 : 		if ((player->pflags & PF_TRANSFERTOCLOSEST) && player->axis1 && player->axis2)

  002e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002ef	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  002f5	74 67		 je	 SHORT $LN40@P_MoveChas
  002f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002fa	83 b8 a4 01 00
	00 00		 cmp	 DWORD PTR [eax+420], 0
  00301	74 5b		 je	 SHORT $LN40@P_MoveChas
  00303	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00306	83 b8 a8 01 00
	00 00		 cmp	 DWORD PTR [eax+424], 0
  0030d	74 4f		 je	 SHORT $LN40@P_MoveChas

; 9233 : 		{
; 9234 : 			angle = R_PointToAngle2(player->axis1->x, player->axis1->y, player->axis2->x, player->axis2->y);

  0030f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00312	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  00318	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0031b	52		 push	 edx
  0031c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0031f	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  00325	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00328	52		 push	 edx
  00329	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0032c	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  00332	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00335	52		 push	 edx
  00336	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00339	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  0033f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00342	52		 push	 edx
  00343	e8 00 00 00 00	 call	 _R_PointToAngle2
  00348	83 c4 10	 add	 esp, 16			; 00000010H
  0034b	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax

; 9235 : 			angle += ANGLE_90;

  0034e	8b 45 fc	 mov	 eax, DWORD PTR _angle$[ebp]
  00351	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00356	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax

; 9236 : 		}

  00359	e9 9d 00 00 00	 jmp	 $LN44@P_MoveChas
$LN40@P_MoveChas:

; 9237 : 		else if (player->mo->target)

  0035e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00361	8b 08		 mov	 ecx, DWORD PTR [eax]
  00363	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  0036a	0f 84 8b 00 00
	00		 je	 $LN44@P_MoveChas

; 9238 : 		{
; 9239 : 			if (player->mo->target->flags & MF_AMBUSH)

  00370	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00373	8b 08		 mov	 ecx, DWORD PTR [eax]
  00375	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0037b	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  0037e	83 e0 20	 and	 eax, 32			; 00000020H
  00381	74 3d		 je	 SHORT $LN43@P_MoveChas

; 9240 : 				angle = R_PointToAngle2(player->mo->target->x, player->mo->target->y, player->mo->x, player->mo->y);

  00383	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00386	8b 08		 mov	 ecx, DWORD PTR [eax]
  00388	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0038b	52		 push	 edx
  0038c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0038f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00391	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00394	52		 push	 edx
  00395	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00398	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039a	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  003a0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003a3	50		 push	 eax
  003a4	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  003a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  003a9	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  003af	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003b2	51		 push	 ecx
  003b3	e8 00 00 00 00	 call	 _R_PointToAngle2
  003b8	83 c4 10	 add	 esp, 16			; 00000010H
  003bb	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax
  003be	eb 3b		 jmp	 SHORT $LN44@P_MoveChas
$LN43@P_MoveChas:

; 9241 : 			else
; 9242 : 				angle = R_PointToAngle2(player->mo->x, player->mo->y, player->mo->target->x, player->mo->target->y);

  003c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c5	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  003cb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003ce	50		 push	 eax
  003cf	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  003d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d4	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  003da	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003dd	51		 push	 ecx
  003de	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003e1	8b 02		 mov	 eax, DWORD PTR [edx]
  003e3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003e6	51		 push	 ecx
  003e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003ea	8b 02		 mov	 eax, DWORD PTR [edx]
  003ec	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003ef	51		 push	 ecx
  003f0	e8 00 00 00 00	 call	 _R_PointToAngle2
  003f5	83 c4 10	 add	 esp, 16			; 00000010H
  003f8	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax
$LN44@P_MoveChas:

; 9243 : 		}
; 9244 : 	}

  003fb	e9 81 00 00 00	 jmp	 $LN46@P_MoveChas
$LN38@P_MoveChas:

; 9245 : 	else if (((player == &players[consoleplayer] && cv_analog.value)
; 9246 : 		|| (splitscreen && player == &players[secondarydisplayplayer] && cv_analog2.value))) // Analog

  00400	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0040a	05 00 00 00 00	 add	 eax, OFFSET _players
  0040f	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00412	75 09		 jne	 SHORT $LN48@P_MoveChas
  00414	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  0041b	75 26		 jne	 SHORT $LN47@P_MoveChas
$LN48@P_MoveChas:
  0041d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00424	74 46		 je	 SHORT $LN45@P_MoveChas
  00426	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00430	05 00 00 00 00	 add	 eax, OFFSET _players
  00435	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00438	75 32		 jne	 SHORT $LN45@P_MoveChas
  0043a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00441	74 29		 je	 SHORT $LN45@P_MoveChas
$LN47@P_MoveChas:

; 9247 : 	{
; 9248 : 		angle = R_PointToAngle2(thiscam->x, thiscam->y, mo->x, mo->y);

  00443	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00446	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00449	51		 push	 ecx
  0044a	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  0044d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00450	50		 push	 eax
  00451	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00454	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00457	52		 push	 edx
  00458	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0045b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0045e	51		 push	 ecx
  0045f	e8 00 00 00 00	 call	 _R_PointToAngle2
  00464	83 c4 10	 add	 esp, 16			; 00000010H
  00467	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax

; 9249 : 	}

  0046a	eb 15		 jmp	 SHORT $LN46@P_MoveChas
$LN45@P_MoveChas:

; 9250 : 	else
; 9251 : 		angle = focusangle + FixedAngle(camrotate*FRACUNIT);

  0046c	8b 45 c8	 mov	 eax, DWORD PTR _camrotate$[ebp]
  0046f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 _FixedAngle
  00478	83 c4 04	 add	 esp, 4
  0047b	03 45 f8	 add	 eax, DWORD PTR _focusangle$[ebp]
  0047e	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax
$LN46@P_MoveChas:

; 9252 : 
; 9253 : 	if (cv_analog.value && ((thiscam == &camera && t_cam_rotate != -42) || (thiscam == &camera2

  00481	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00488	74 3f		 je	 SHORT $LN49@P_MoveChas
  0048a	81 7d 0c 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  00491	75 09		 jne	 SHORT $LN51@P_MoveChas
  00493	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam_rotate, -42 ; ffffffd6H
  0049a	75 12		 jne	 SHORT $LN50@P_MoveChas
$LN51@P_MoveChas:
  0049c	81 7d 0c 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  004a3	75 24		 jne	 SHORT $LN49@P_MoveChas
  004a5	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam2_rotate, -42 ; ffffffd6H
  004ac	74 1b		 je	 SHORT $LN49@P_MoveChas
$LN50@P_MoveChas:

; 9254 : 		&& t_cam2_rotate != -42)))
; 9255 : 	{
; 9256 : 		angle = FixedAngle(camrotate*FRACUNIT);

  004ae	8b 45 c8	 mov	 eax, DWORD PTR _camrotate$[ebp]
  004b1	c1 e0 10	 shl	 eax, 16			; 00000010H
  004b4	50		 push	 eax
  004b5	e8 00 00 00 00	 call	 _FixedAngle
  004ba	83 c4 04	 add	 esp, 4
  004bd	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax

; 9257 : 		thiscam->angle = angle;

  004c0	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  004c3	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  004c6	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN49@P_MoveChas:

; 9258 : 	}
; 9259 : 
; 9260 : 	if (!cv_objectplace.value && !(twodlevel || (mo->flags2 & MF2_TWOD)))

  004c9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  004d0	0f 85 7c 01 00
	00		 jne	 $LN67@P_MoveChas
  004d6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  004dd	25 00 02 00 00	 and	 eax, 512		; 00000200H
  004e2	0f 85 6a 01 00
	00		 jne	 $LN67@P_MoveChas
  004e8	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  004eb	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  004f1	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  004f7	0f 85 55 01 00
	00		 jne	 $LN67@P_MoveChas

; 9261 : 	{
; 9262 : 		if (player->cmd.buttons & BT_CAMLEFT)

  004fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00500	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  00504	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  0050a	0f 84 bc 00 00
	00		 je	 $LN53@P_MoveChas

; 9263 : 		{
; 9264 : 			if (thiscam == &camera)

  00510	81 7d 0c 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  00517	75 58		 jne	 SHORT $LN55@P_MoveChas

; 9265 : 			{
; 9266 : 				if (cv_analog.value)

  00519	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00520	74 1b		 je	 SHORT $LN57@P_MoveChas

; 9267 : 					angle -= FixedAngle(cv_cam_rotspeed.value*FRACUNIT);

  00522	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_rotspeed+20
  00527	c1 e0 10	 shl	 eax, 16			; 00000010H
  0052a	50		 push	 eax
  0052b	e8 00 00 00 00	 call	 _FixedAngle
  00530	83 c4 04	 add	 esp, 4
  00533	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  00536	2b c8		 sub	 ecx, eax
  00538	89 4d fc	 mov	 DWORD PTR _angle$[ebp], ecx
  0053b	eb 32		 jmp	 SHORT $LN58@P_MoveChas
$LN57@P_MoveChas:

; 9268 : 				else
; 9269 : 					CV_SetValue(&cv_cam_rotate, camrotate == 0 ? 358

  0053d	83 7d c8 00	 cmp	 DWORD PTR _camrotate$[ebp], 0
  00541	75 0c		 jne	 SHORT $LN125@P_MoveChas
  00543	c7 85 14 ff ff
	ff 66 01 00 00	 mov	 DWORD PTR tv337[ebp], 358 ; 00000166H
  0054d	eb 0c		 jmp	 SHORT $LN126@P_MoveChas
$LN125@P_MoveChas:
  0054f	8b 45 c8	 mov	 eax, DWORD PTR _camrotate$[ebp]
  00552	83 e8 02	 sub	 eax, 2
  00555	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv337[ebp], eax
$LN126@P_MoveChas:
  0055b	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR tv337[ebp]
  00561	51		 push	 ecx
  00562	68 00 00 00 00	 push	 OFFSET _cv_cam_rotate
  00567	e8 00 00 00 00	 call	 _CV_SetValue
  0056c	83 c4 08	 add	 esp, 8
$LN58@P_MoveChas:

; 9270 : 						: camrotate - 2);
; 9271 : 			}

  0056f	eb 56		 jmp	 SHORT $LN60@P_MoveChas
$LN55@P_MoveChas:

; 9272 : 			else
; 9273 : 			{
; 9274 : 				if (cv_analog2.value)

  00571	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00578	74 1b		 je	 SHORT $LN59@P_MoveChas

; 9275 : 					angle -= FixedAngle(cv_cam2_rotspeed.value*FRACUNIT);

  0057a	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_rotspeed+20
  0057f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00582	50		 push	 eax
  00583	e8 00 00 00 00	 call	 _FixedAngle
  00588	83 c4 04	 add	 esp, 4
  0058b	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  0058e	2b c8		 sub	 ecx, eax
  00590	89 4d fc	 mov	 DWORD PTR _angle$[ebp], ecx
  00593	eb 32		 jmp	 SHORT $LN60@P_MoveChas
$LN59@P_MoveChas:

; 9276 : 				else
; 9277 : 					CV_SetValue(&cv_cam2_rotate, camrotate == 0 ? 358

  00595	83 7d c8 00	 cmp	 DWORD PTR _camrotate$[ebp], 0
  00599	75 0c		 jne	 SHORT $LN127@P_MoveChas
  0059b	c7 85 14 ff ff
	ff 66 01 00 00	 mov	 DWORD PTR tv347[ebp], 358 ; 00000166H
  005a5	eb 0c		 jmp	 SHORT $LN128@P_MoveChas
$LN127@P_MoveChas:
  005a7	8b 45 c8	 mov	 eax, DWORD PTR _camrotate$[ebp]
  005aa	83 e8 02	 sub	 eax, 2
  005ad	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv347[ebp], eax
$LN128@P_MoveChas:
  005b3	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR tv347[ebp]
  005b9	51		 push	 ecx
  005ba	68 00 00 00 00	 push	 OFFSET _cv_cam2_rotate
  005bf	e8 00 00 00 00	 call	 _CV_SetValue
  005c4	83 c4 08	 add	 esp, 8
$LN60@P_MoveChas:

; 9278 : 						: camrotate - 2);
; 9279 : 			}
; 9280 : 		}

  005c7	e9 86 00 00 00	 jmp	 $LN67@P_MoveChas
$LN53@P_MoveChas:

; 9281 : 		else if (player->cmd.buttons & BT_CAMRIGHT)

  005cc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005cf	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  005d3	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  005d9	74 77		 je	 SHORT $LN67@P_MoveChas

; 9282 : 		{
; 9283 : 			if (thiscam == &camera)

  005db	81 7d 0c 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  005e2	75 38		 jne	 SHORT $LN62@P_MoveChas

; 9284 : 			{
; 9285 : 				if (cv_analog.value)

  005e4	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  005eb	74 19		 je	 SHORT $LN64@P_MoveChas

; 9286 : 					angle += FixedAngle(cv_cam_rotspeed.value*FRACUNIT);

  005ed	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_rotspeed+20
  005f2	c1 e0 10	 shl	 eax, 16			; 00000010H
  005f5	50		 push	 eax
  005f6	e8 00 00 00 00	 call	 _FixedAngle
  005fb	83 c4 04	 add	 esp, 4
  005fe	03 45 fc	 add	 eax, DWORD PTR _angle$[ebp]
  00601	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax
  00604	eb 14		 jmp	 SHORT $LN65@P_MoveChas
$LN64@P_MoveChas:

; 9287 : 				else
; 9288 : 					CV_SetValue(&cv_cam_rotate, camrotate + 2);

  00606	8b 45 c8	 mov	 eax, DWORD PTR _camrotate$[ebp]
  00609	83 c0 02	 add	 eax, 2
  0060c	50		 push	 eax
  0060d	68 00 00 00 00	 push	 OFFSET _cv_cam_rotate
  00612	e8 00 00 00 00	 call	 _CV_SetValue
  00617	83 c4 08	 add	 esp, 8
$LN65@P_MoveChas:

; 9289 : 			}

  0061a	eb 36		 jmp	 SHORT $LN67@P_MoveChas
$LN62@P_MoveChas:

; 9290 : 			else
; 9291 : 			{
; 9292 : 				if (cv_analog2.value)

  0061c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00623	74 19		 je	 SHORT $LN66@P_MoveChas

; 9293 : 					angle += FixedAngle(cv_cam2_rotspeed.value*FRACUNIT);

  00625	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_rotspeed+20
  0062a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0062d	50		 push	 eax
  0062e	e8 00 00 00 00	 call	 _FixedAngle
  00633	83 c4 04	 add	 esp, 4
  00636	03 45 fc	 add	 eax, DWORD PTR _angle$[ebp]
  00639	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax
  0063c	eb 14		 jmp	 SHORT $LN67@P_MoveChas
$LN66@P_MoveChas:

; 9294 : 				else
; 9295 : 					CV_SetValue(&cv_cam2_rotate, camrotate + 2);

  0063e	8b 45 c8	 mov	 eax, DWORD PTR _camrotate$[ebp]
  00641	83 c0 02	 add	 eax, 2
  00644	50		 push	 eax
  00645	68 00 00 00 00	 push	 OFFSET _cv_cam2_rotate
  0064a	e8 00 00 00 00	 call	 _CV_SetValue
  0064f	83 c4 08	 add	 esp, 8
$LN67@P_MoveChas:

; 9296 : 			}
; 9297 : 		}
; 9298 : 	}
; 9299 : 
; 9300 : 	// sets ideal cam pos
; 9301 : 	if (twodlevel || (mo->flags2 & MF2_TWOD))

  00652	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00659	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0065e	75 11		 jne	 SHORT $LN70@P_MoveChas
  00660	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00663	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00669	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0066f	74 09		 je	 SHORT $LN68@P_MoveChas
$LN70@P_MoveChas:

; 9302 : 		dist = 480<<FRACBITS;

  00671	c7 45 e8 00 00
	e0 01		 mov	 DWORD PTR _dist$[ebp], 31457280 ; 01e00000H
  00678	eb 68		 jmp	 SHORT $LN71@P_MoveChas
$LN68@P_MoveChas:

; 9303 : 	else
; 9304 : 	{
; 9305 : 		dist = camdist;

  0067a	8b 45 d4	 mov	 eax, DWORD PTR _camdist$[ebp]
  0067d	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 9306 : 
; 9307 : 		if (player->climbing || (mo->tracer && mo->tracer->type == MT_EGGTRAP) || (player->pflags & PF_MACESPIN) || (player->pflags & PF_ITEMHANG) || (player->pflags & PF_ROPEHANG))

  00680	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00683	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0068a	75 4e		 jne	 SHORT $LN72@P_MoveChas
  0068c	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  0068f	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00696	74 0f		 je	 SHORT $LN73@P_MoveChas
  00698	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  0069b	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  006a1	83 79 7c 1b	 cmp	 DWORD PTR [ecx+124], 27	; 0000001bH
  006a5	74 33		 je	 SHORT $LN72@P_MoveChas
$LN73@P_MoveChas:
  006a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006aa	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006b0	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  006b6	75 22		 jne	 SHORT $LN72@P_MoveChas
  006b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006bb	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006c1	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  006c7	75 11		 jne	 SHORT $LN72@P_MoveChas
  006c9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006cc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  006d2	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  006d8	74 08		 je	 SHORT $LN71@P_MoveChas
$LN72@P_MoveChas:

; 9308 : 			dist <<= 1;

  006da	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  006dd	d1 e0		 shl	 eax, 1
  006df	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax
$LN71@P_MoveChas:

; 9309 : 	}
; 9310 : 
; 9311 : 	checkdist = dist;

  006e2	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  006e5	89 45 e4	 mov	 DWORD PTR _checkdist$[ebp], eax

; 9312 : 
; 9313 : 	if (checkdist < 128*FRACUNIT)

  006e8	81 7d e4 00 00
	80 00		 cmp	 DWORD PTR _checkdist$[ebp], 8388608 ; 00800000H
  006ef	7d 07		 jge	 SHORT $LN74@P_MoveChas

; 9314 : 		checkdist = 128*FRACUNIT;

  006f1	c7 45 e4 00 00
	80 00		 mov	 DWORD PTR _checkdist$[ebp], 8388608 ; 00800000H
$LN74@P_MoveChas:

; 9315 : 
; 9316 : 	x = mo->x - FixedMul(FINECOSINE((angle>>ANGLETOFINESHIFT) & FINEMASK), dist);

  006f8	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  006fb	50		 push	 eax
  006fc	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  006ff	c1 e9 13	 shr	 ecx, 19			; 00000013H
  00702	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  00708	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0070e	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00711	50		 push	 eax
  00712	e8 00 00 00 00	 call	 _FixedMul
  00717	83 c4 08	 add	 esp, 8
  0071a	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  0071d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00720	2b d0		 sub	 edx, eax
  00722	89 55 f4	 mov	 DWORD PTR _x$[ebp], edx

; 9317 : 	y = mo->y - FixedMul(FINESINE((angle>>ANGLETOFINESHIFT) & FINEMASK), dist);

  00725	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  00728	50		 push	 eax
  00729	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  0072c	c1 e9 13	 shr	 ecx, 19			; 00000013H
  0072f	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  00735	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  0073c	52		 push	 edx
  0073d	e8 00 00 00 00	 call	 _FixedMul
  00742	83 c4 08	 add	 esp, 8
  00745	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  00748	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0074b	2b d0		 sub	 edx, eax
  0074d	89 55 f0	 mov	 DWORD PTR _y$[ebp], edx

; 9318 : 
; 9319 : #if 0
; 9320 : 	if (twodlevel || (mo->flags2 & MF2_TWOD))
; 9321 : 	{
; 9322 : 		// Camera doesn't ALWAYS need to move, only when running...
; 9323 : 		if (abs(player->mo->momx) > 10)
; 9324 : 		{
; 9325 : 			// Move the camera all smooth-like, not jerk it around...
; 9326 : 			if (mo->momx > 0)
; 9327 : 			{
; 9328 : 				if (thiscam->relativex < MAXCAMERADIST)
; 9329 : 					thiscam->relativex += 4*FRACUNIT;
; 9330 : 			}
; 9331 : 			else if (mo->momx < 0)
; 9332 : 			{
; 9333 : 				if (thiscam->relativex > -MAXCAMERADIST)
; 9334 : 					thiscam->relativex -= 4*FRACUNIT;
; 9335 : 			}
; 9336 : 		}
; 9337 : 		else // If speed is less than required, start moving the camera back.
; 9338 : 		{
; 9339 : 			if (thiscam->relativex > 0)
; 9340 : 				thiscam->relativex -= 4*FRACUNIT;
; 9341 : 			else if (thiscam->relativex < 0)
; 9342 : 				thiscam->relativex += 4*FRACUNIT;
; 9343 : 		}
; 9344 : 
; 9345 : 		// Add the relative x to the global x
; 9346 : 		x += thiscam->relativex;
; 9347 : 		y += mo->momy << 1;
; 9348 : 	}
; 9349 : #endif // bad 2D camera code
; 9350 : 
; 9351 : 	pviewheight = FIXEDSCALE(cv_viewheight.value<<FRACBITS, mo->scale);

  00750	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_viewheight+20
  00755	c1 e0 10	 shl	 eax, 16			; 00000010H
  00758	50		 push	 eax
  00759	68 00 00 64 00	 push	 6553600			; 00640000H
  0075e	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  00761	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00768	c1 e2 10	 shl	 edx, 16			; 00000010H
  0076b	52		 push	 edx
  0076c	e8 00 00 00 00	 call	 _FixedDiv
  00771	83 c4 08	 add	 esp, 8
  00774	50		 push	 eax
  00775	e8 00 00 00 00	 call	 _FixedMul
  0077a	83 c4 08	 add	 esp, 8
  0077d	89 45 cc	 mov	 DWORD PTR _pviewheight$[ebp], eax

; 9352 : 
; 9353 : 	if (mo->eflags & MFE_VERTICALFLIP)

  00780	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00783	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00789	83 e1 20	 and	 ecx, 32			; 00000020H
  0078c	74 73		 je	 SHORT $LN75@P_MoveChas

; 9354 : 		z = mo->z + FixedDiv(FixedMul(mo->info->height,3),4) -

  0078e	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00791	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00797	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  0079a	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0079d	3b 41 44	 cmp	 eax, DWORD PTR [ecx+68]
  007a0	74 1a		 je	 SHORT $LN129@P_MoveChas
  007a2	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  007a5	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  007ab	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  007ae	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  007b1	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  007b4	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv476[ebp], ecx
  007ba	eb 0a		 jmp	 SHORT $LN130@P_MoveChas
$LN129@P_MoveChas:
  007bc	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv476[ebp], 0
$LN130@P_MoveChas:
  007c6	6a 04		 push	 4
  007c8	6a 03		 push	 3
  007ca	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  007cd	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  007d3	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  007d6	51		 push	 ecx
  007d7	e8 00 00 00 00	 call	 _FixedMul
  007dc	83 c4 08	 add	 esp, 8
  007df	50		 push	 eax
  007e0	e8 00 00 00 00	 call	 _FixedDiv
  007e5	83 c4 08	 add	 esp, 8
  007e8	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  007eb	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  007ee	03 c8		 add	 ecx, eax
  007f0	2b 8d 14 ff ff
	ff		 sub	 ecx, DWORD PTR tv476[ebp]
  007f6	2b 4d cc	 sub	 ecx, DWORD PTR _pviewheight$[ebp]
  007f9	2b 4d d0	 sub	 ecx, DWORD PTR _camheight$[ebp]
  007fc	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
  007ff	eb 0f		 jmp	 SHORT $LN76@P_MoveChas
$LN75@P_MoveChas:

; 9355 : 			((mo->height != mo->info->height) ? mo->info->height - mo->height : 0) - pviewheight -
; 9356 : 			(camheight);
; 9357 : 	else
; 9358 : 		z = mo->z + pviewheight +

  00801	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00804	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00807	03 4d cc	 add	 ecx, DWORD PTR _pviewheight$[ebp]
  0080a	03 4d d0	 add	 ecx, DWORD PTR _camheight$[ebp]
  0080d	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
$LN76@P_MoveChas:

; 9359 : 			(camheight);
; 9360 : 
; 9361 : 	// move camera down to move under lower ceilings
; 9362 : 	newsubsec = R_IsPointInSubsector(((mo->x>>FRACBITS) + (thiscam->x>>FRACBITS))<<(FRACBITS-1), ((mo->y>>FRACBITS) + (thiscam->y>>FRACBITS))<<(FRACBITS-1));

  00810	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00813	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00816	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00819	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  0081c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0081f	c1 f8 10	 sar	 eax, 16			; 00000010H
  00822	03 c8		 add	 ecx, eax
  00824	c1 e1 0f	 shl	 ecx, 15			; 0000000fH
  00827	51		 push	 ecx
  00828	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  0082b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0082e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00831	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00834	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00837	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0083a	03 d1		 add	 edx, ecx
  0083c	c1 e2 0f	 shl	 edx, 15			; 0000000fH
  0083f	52		 push	 edx
  00840	e8 00 00 00 00	 call	 _R_IsPointInSubsector
  00845	83 c4 08	 add	 esp, 8
  00848	89 45 bc	 mov	 DWORD PTR _newsubsec$[ebp], eax

; 9363 : 
; 9364 : 	if (!newsubsec)

  0084b	83 7d bc 00	 cmp	 DWORD PTR _newsubsec$[ebp], 0
  0084f	75 09		 jne	 SHORT $LN77@P_MoveChas

; 9365 : 		newsubsec = thiscam->subsector;

  00851	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00854	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00857	89 4d bc	 mov	 DWORD PTR _newsubsec$[ebp], ecx
$LN77@P_MoveChas:

; 9366 : 
; 9367 : 	if (newsubsec)

  0085a	83 7d bc 00	 cmp	 DWORD PTR _newsubsec$[ebp], 0
  0085e	0f 84 c7 05 00
	00		 je	 $LN14@P_MoveChas

; 9368 : 	{
; 9369 : 		fixed_t myfloorz, myceilingz;
; 9370 : 		fixed_t midz = thiscam->z + (thiscam->z - mo->z)/2;

  00864	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00867	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  0086a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0086d	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  00870	99		 cdq
  00871	2b c2		 sub	 eax, edx
  00873	d1 f8		 sar	 eax, 1
  00875	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00878	03 42 18	 add	 eax, DWORD PTR [edx+24]
  0087b	89 45 a8	 mov	 DWORD PTR _midz$21[ebp], eax

; 9371 : 
; 9372 : 		// Cameras use the heightsec's heights rather then the actual sector heights.
; 9373 : 		// If you can see through it, why not move the camera through it too?
; 9374 : 		if (newsubsec->sector->heightsec >= 0)

  0087e	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  00881	8b 08		 mov	 ecx, DWORD PTR [eax]
  00883	83 79 68 00	 cmp	 DWORD PTR [ecx+104], 0
  00887	7c 31		 jl	 SHORT $LN79@P_MoveChas

; 9375 : 		{
; 9376 : 			myfloorz = sectors[newsubsec->sector->heightsec].floorheight;

  00889	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  0088c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0088e	69 51 68 f8 00
	00 00		 imul	 edx, DWORD PTR [ecx+104], 248
  00895	a1 00 00 00 00	 mov	 eax, DWORD PTR _sectors
  0089a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0089d	89 4d b0	 mov	 DWORD PTR _myfloorz$23[ebp], ecx

; 9377 : 			myceilingz = sectors[newsubsec->sector->heightsec].ceilingheight;

  008a0	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  008a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  008a5	69 51 68 f8 00
	00 00		 imul	 edx, DWORD PTR [ecx+104], 248
  008ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _sectors
  008b1	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  008b5	89 4d ac	 mov	 DWORD PTR _myceilingz$22[ebp], ecx

; 9378 : 		}

  008b8	eb 15		 jmp	 SHORT $LN80@P_MoveChas
$LN79@P_MoveChas:

; 9379 : 		else
; 9380 : 		{
; 9381 : 			myfloorz = newsubsec->sector->floorheight;

  008ba	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  008bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  008bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  008c1	89 55 b0	 mov	 DWORD PTR _myfloorz$23[ebp], edx

; 9382 : 			myceilingz = newsubsec->sector->ceilingheight;

  008c4	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  008c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  008c9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  008cc	89 55 ac	 mov	 DWORD PTR _myceilingz$22[ebp], edx
$LN80@P_MoveChas:

; 9383 : 		}
; 9384 : 
; 9385 : 		// Check list of fake floors and see if floorz/ceilingz need to be altered.
; 9386 : 		if (newsubsec->sector->ffloors)

  008cf	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  008d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d4	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  008db	0f 84 13 01 00
	00		 je	 $LN3@P_MoveChas

; 9387 : 		{
; 9388 : 			ffloor_t *rover;
; 9389 : 			fixed_t delta1, delta2;
; 9390 : 			INT32 thingtop = midz + thiscam->height;

  008e1	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  008e4	8b 4d a8	 mov	 ecx, DWORD PTR _midz$21[ebp]
  008e7	03 48 30	 add	 ecx, DWORD PTR [eax+48]
  008ea	89 4d 98	 mov	 DWORD PTR _thingtop$17[ebp], ecx

; 9391 : 
; 9392 : 			for (rover = newsubsec->sector->ffloors; rover; rover = rover->next)

  008ed	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  008f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  008f2	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  008f8	89 55 a4	 mov	 DWORD PTR _rover$20[ebp], edx
  008fb	eb 09		 jmp	 SHORT $LN4@P_MoveChas
$LN2@P_MoveChas:
  008fd	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  00900	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00903	89 4d a4	 mov	 DWORD PTR _rover$20[ebp], ecx
$LN4@P_MoveChas:
  00906	83 7d a4 00	 cmp	 DWORD PTR _rover$20[ebp], 0
  0090a	0f 84 e4 00 00
	00		 je	 $LN3@P_MoveChas

; 9393 : 			{
; 9394 : 				if (!(rover->flags & FF_BLOCKOTHERS) || !(rover->flags & FF_EXISTS) || !(rover->flags & FF_RENDERALL))

  00910	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  00913	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00916	83 e1 04	 and	 ecx, 4
  00919	74 16		 je	 SHORT $LN83@P_MoveChas
  0091b	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  0091e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00921	83 e1 01	 and	 ecx, 1
  00924	74 0b		 je	 SHORT $LN83@P_MoveChas
  00926	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  00929	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0092c	83 e1 18	 and	 ecx, 24			; 00000018H
  0092f	75 02		 jne	 SHORT $LN82@P_MoveChas
$LN83@P_MoveChas:

; 9395 : 					continue;

  00931	eb ca		 jmp	 SHORT $LN2@P_MoveChas
$LN82@P_MoveChas:

; 9396 : 
; 9397 : 				delta1 = midz - (*rover->bottomheight

  00933	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  00936	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00939	8b 55 a4	 mov	 edx, DWORD PTR _rover$20[ebp]
  0093c	8b 02		 mov	 eax, DWORD PTR [edx]
  0093e	8b 55 a4	 mov	 edx, DWORD PTR _rover$20[ebp]
  00941	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00944	8b 00		 mov	 eax, DWORD PTR [eax]
  00946	2b 02		 sub	 eax, DWORD PTR [edx]
  00948	99		 cdq
  00949	2b c2		 sub	 eax, edx
  0094b	d1 f8		 sar	 eax, 1
  0094d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0094f	03 c8		 add	 ecx, eax
  00951	8b 55 a8	 mov	 edx, DWORD PTR _midz$21[ebp]
  00954	2b d1		 sub	 edx, ecx
  00956	89 55 a0	 mov	 DWORD PTR _delta1$19[ebp], edx

; 9398 : 					+ ((*rover->topheight - *rover->bottomheight)/2));
; 9399 : 				delta2 = thingtop - (*rover->bottomheight

  00959	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  0095c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0095f	8b 55 a4	 mov	 edx, DWORD PTR _rover$20[ebp]
  00962	8b 02		 mov	 eax, DWORD PTR [edx]
  00964	8b 55 a4	 mov	 edx, DWORD PTR _rover$20[ebp]
  00967	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  0096a	8b 00		 mov	 eax, DWORD PTR [eax]
  0096c	2b 02		 sub	 eax, DWORD PTR [edx]
  0096e	99		 cdq
  0096f	2b c2		 sub	 eax, edx
  00971	d1 f8		 sar	 eax, 1
  00973	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00975	03 c8		 add	 ecx, eax
  00977	8b 55 98	 mov	 edx, DWORD PTR _thingtop$17[ebp]
  0097a	2b d1		 sub	 edx, ecx
  0097c	89 55 9c	 mov	 DWORD PTR _delta2$18[ebp], edx

; 9400 : 					+ ((*rover->topheight - *rover->bottomheight)/2));
; 9401 : 				if (*rover->topheight > tmfloorz && abs(delta1) < abs(delta2))

  0097f	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  00982	8b 08		 mov	 ecx, DWORD PTR [eax]
  00984	8b 11		 mov	 edx, DWORD PTR [ecx]
  00986	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _tmfloorz
  0098c	7e 28		 jle	 SHORT $LN84@P_MoveChas
  0098e	8b 45 a0	 mov	 eax, DWORD PTR _delta1$19[ebp]
  00991	50		 push	 eax
  00992	e8 00 00 00 00	 call	 _abs
  00997	83 c4 04	 add	 esp, 4
  0099a	8b f0		 mov	 esi, eax
  0099c	8b 4d 9c	 mov	 ecx, DWORD PTR _delta2$18[ebp]
  0099f	51		 push	 ecx
  009a0	e8 00 00 00 00	 call	 _abs
  009a5	83 c4 04	 add	 esp, 4
  009a8	3b f0		 cmp	 esi, eax
  009aa	7d 0a		 jge	 SHORT $LN84@P_MoveChas

; 9402 : 				{
; 9403 : 					myfloorz = *rover->topheight;

  009ac	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  009af	8b 08		 mov	 ecx, DWORD PTR [eax]
  009b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  009b3	89 55 b0	 mov	 DWORD PTR _myfloorz$23[ebp], edx
$LN84@P_MoveChas:

; 9404 : 				}
; 9405 : 				if (*rover->bottomheight < tmceilingz && abs(delta1) >= abs(delta2))

  009b6	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  009b9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  009bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  009be	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _tmceilingz
  009c4	7d 29		 jge	 SHORT $LN85@P_MoveChas
  009c6	8b 45 a0	 mov	 eax, DWORD PTR _delta1$19[ebp]
  009c9	50		 push	 eax
  009ca	e8 00 00 00 00	 call	 _abs
  009cf	83 c4 04	 add	 esp, 4
  009d2	8b f0		 mov	 esi, eax
  009d4	8b 4d 9c	 mov	 ecx, DWORD PTR _delta2$18[ebp]
  009d7	51		 push	 ecx
  009d8	e8 00 00 00 00	 call	 _abs
  009dd	83 c4 04	 add	 esp, 4
  009e0	3b f0		 cmp	 esi, eax
  009e2	7c 0b		 jl	 SHORT $LN85@P_MoveChas

; 9406 : 				{
; 9407 : 					myceilingz = *rover->bottomheight;

  009e4	8b 45 a4	 mov	 eax, DWORD PTR _rover$20[ebp]
  009e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  009ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  009ec	89 55 ac	 mov	 DWORD PTR _myceilingz$22[ebp], edx
$LN85@P_MoveChas:

; 9408 : 				}
; 9409 : 			}

  009ef	e9 09 ff ff ff	 jmp	 $LN2@P_MoveChas
$LN3@P_MoveChas:

; 9410 : 		}
; 9411 : 
; 9412 : #ifdef POLYOBJECTS
; 9413 : 	// Check polyobjects and see if tmfloorz/tmceilingz need to be altered
; 9414 : 	{
; 9415 : 		INT32 xl, xh, yl, yh, bx, by;
; 9416 : 		validcount++;

  009f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _validcount
  009f9	83 c0 01	 add	 eax, 1
  009fc	a3 00 00 00 00	 mov	 DWORD PTR _validcount, eax

; 9417 : 
; 9418 : 		xl = (unsigned)(tmbbox[BOXLEFT] - bmaporgx)>>MAPBLOCKSHIFT;

  00a01	b8 04 00 00 00	 mov	 eax, 4
  00a06	d1 e0		 shl	 eax, 1
  00a08	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _tmbbox[eax]
  00a0e	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgx
  00a14	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00a17	89 4d 94	 mov	 DWORD PTR _xl$16[ebp], ecx

; 9419 : 		xh = (unsigned)(tmbbox[BOXRIGHT] - bmaporgx)>>MAPBLOCKSHIFT;

  00a1a	b8 04 00 00 00	 mov	 eax, 4
  00a1f	6b c8 03	 imul	 ecx, eax, 3
  00a22	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tmbbox[ecx]
  00a28	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _bmaporgx
  00a2e	c1 ea 17	 shr	 edx, 23			; 00000017H
  00a31	89 55 90	 mov	 DWORD PTR _xh$15[ebp], edx

; 9420 : 		yl = (unsigned)(tmbbox[BOXBOTTOM] - bmaporgy)>>MAPBLOCKSHIFT;

  00a34	b8 04 00 00 00	 mov	 eax, 4
  00a39	c1 e0 00	 shl	 eax, 0
  00a3c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _tmbbox[eax]
  00a42	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _bmaporgy
  00a48	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00a4b	89 4d 8c	 mov	 DWORD PTR _yl$14[ebp], ecx

; 9421 : 		yh = (unsigned)(tmbbox[BOXTOP] - bmaporgy)>>MAPBLOCKSHIFT;

  00a4e	b8 04 00 00 00	 mov	 eax, 4
  00a53	6b c8 00	 imul	 ecx, eax, 0
  00a56	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tmbbox[ecx]
  00a5c	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _bmaporgy
  00a62	c1 ea 17	 shr	 edx, 23			; 00000017H
  00a65	89 55 88	 mov	 DWORD PTR _yh$13[ebp], edx

; 9422 : 
; 9423 : 		for (by = yl; by <= yh; by++)

  00a68	8b 45 8c	 mov	 eax, DWORD PTR _yl$14[ebp]
  00a6b	89 45 80	 mov	 DWORD PTR _by$11[ebp], eax
  00a6e	eb 09		 jmp	 SHORT $LN7@P_MoveChas
$LN5@P_MoveChas:
  00a70	8b 45 80	 mov	 eax, DWORD PTR _by$11[ebp]
  00a73	83 c0 01	 add	 eax, 1
  00a76	89 45 80	 mov	 DWORD PTR _by$11[ebp], eax
$LN7@P_MoveChas:
  00a79	8b 45 80	 mov	 eax, DWORD PTR _by$11[ebp]
  00a7c	3b 45 88	 cmp	 eax, DWORD PTR _yh$13[ebp]
  00a7f	0f 8f 24 02 00
	00		 jg	 $LN6@P_MoveChas

; 9424 : 			for (bx = xl; bx <= xh; bx++)

  00a85	8b 45 94	 mov	 eax, DWORD PTR _xl$16[ebp]
  00a88	89 45 84	 mov	 DWORD PTR _bx$12[ebp], eax
  00a8b	eb 09		 jmp	 SHORT $LN10@P_MoveChas
$LN8@P_MoveChas:
  00a8d	8b 45 84	 mov	 eax, DWORD PTR _bx$12[ebp]
  00a90	83 c0 01	 add	 eax, 1
  00a93	89 45 84	 mov	 DWORD PTR _bx$12[ebp], eax
$LN10@P_MoveChas:
  00a96	8b 45 84	 mov	 eax, DWORD PTR _bx$12[ebp]
  00a99	3b 45 90	 cmp	 eax, DWORD PTR _xh$15[ebp]
  00a9c	0f 8f 02 02 00
	00		 jg	 $LN9@P_MoveChas

; 9425 : 			{
; 9426 : 				INT32 offset;
; 9427 : 				polymaplink_t *plink; // haleyjd 02/22/06
; 9428 : 
; 9429 : 				if (bx < 0 || by < 0 || bx >= bmapwidth || by >= bmapheight)

  00aa2	83 7d 84 00	 cmp	 DWORD PTR _bx$12[ebp], 0
  00aa6	7c 1c		 jl	 SHORT $LN87@P_MoveChas
  00aa8	83 7d 80 00	 cmp	 DWORD PTR _by$11[ebp], 0
  00aac	7c 16		 jl	 SHORT $LN87@P_MoveChas
  00aae	8b 45 84	 mov	 eax, DWORD PTR _bx$12[ebp]
  00ab1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _bmapwidth
  00ab7	7d 0b		 jge	 SHORT $LN87@P_MoveChas
  00ab9	8b 45 80	 mov	 eax, DWORD PTR _by$11[ebp]
  00abc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _bmapheight
  00ac2	7c 02		 jl	 SHORT $LN86@P_MoveChas
$LN87@P_MoveChas:

; 9430 : 					continue;

  00ac4	eb c7		 jmp	 SHORT $LN8@P_MoveChas
$LN86@P_MoveChas:

; 9431 : 
; 9432 : 				offset = by*bmapwidth + bx;

  00ac6	8b 45 80	 mov	 eax, DWORD PTR _by$11[ebp]
  00ac9	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _bmapwidth
  00ad0	03 45 84	 add	 eax, DWORD PTR _bx$12[ebp]
  00ad3	89 85 7c ff ff
	ff		 mov	 DWORD PTR _offset$10[ebp], eax

; 9433 : 
; 9434 : 				// haleyjd 02/22/06: consider polyobject lines
; 9435 : 				plink = polyblocklinks[offset];

  00ad9	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _offset$10[ebp]
  00adf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _polyblocklinks
  00ae5	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00ae8	89 95 78 ff ff
	ff		 mov	 DWORD PTR _plink$9[ebp], edx
$LN133@P_MoveChas:

; 9436 : 
; 9437 : 				while (plink)

  00aee	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _plink$9[ebp], 0
  00af5	0f 84 a4 01 00
	00		 je	 $LN12@P_MoveChas

; 9438 : 				{
; 9439 : 					polyobj_t *po = plink->po;

  00afb	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _plink$9[ebp]
  00b01	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00b04	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _po$8[ebp], ecx

; 9440 : 
; 9441 : 					if (po->validcount != validcount) // if polyobj hasn't been checked

  00b0a	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _po$8[ebp]
  00b10	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00b16	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _validcount
  00b1c	0f 84 6a 01 00
	00		 je	 $LN93@P_MoveChas

; 9442 : 					{
; 9443 : 						sector_t *polysec;
; 9444 : 						fixed_t delta1, delta2, thingtop;
; 9445 : 						fixed_t polytop, polybottom;
; 9446 : 
; 9447 : 						po->validcount = validcount;

  00b22	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _po$8[ebp]
  00b28	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _validcount
  00b2e	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 9448 : 
; 9449 : 						if (!P_PointInsidePolyobj(po, x, y))

  00b34	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  00b37	50		 push	 eax
  00b38	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00b3b	51		 push	 ecx
  00b3c	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _po$8[ebp]
  00b42	52		 push	 edx
  00b43	e8 00 00 00 00	 call	 _P_PointInsidePolyobj
  00b48	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b4b	85 c0		 test	 eax, eax
  00b4d	75 10		 jne	 SHORT $LN89@P_MoveChas

; 9450 : 						{
; 9451 : 							plink = (polymaplink_t *)(plink->link.next);

  00b4f	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _plink$9[ebp]
  00b55	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b57	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _plink$9[ebp], ecx

; 9452 : 							continue;

  00b5d	eb 8f		 jmp	 SHORT $LN133@P_MoveChas
$LN89@P_MoveChas:

; 9453 : 						}
; 9454 : 
; 9455 : 						// We're inside it! Yess...
; 9456 : 						polysec = po->lines[0]->backsector;

  00b5f	b8 04 00 00 00	 mov	 eax, 4
  00b64	6b c8 00	 imul	 ecx, eax, 0
  00b67	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _po$8[ebp]
  00b6d	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00b70	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00b73	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00b76	89 95 70 ff ff
	ff		 mov	 DWORD PTR _polysec$7[ebp], edx

; 9457 : 
; 9458 : 						if (po->flags & POF_CLIPPLANES)

  00b7c	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _po$8[ebp]
  00b82	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00b88	83 e1 02	 and	 ecx, 2
  00b8b	74 1f		 je	 SHORT $LN90@P_MoveChas

; 9459 : 						{
; 9460 : 							polytop = polysec->ceilingheight;

  00b8d	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _polysec$7[ebp]
  00b93	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00b96	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _polytop$3[ebp], ecx

; 9461 : 							polybottom = polysec->floorheight;

  00b9c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _polysec$7[ebp]
  00ba2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ba4	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _polybottom$2[ebp], ecx

; 9462 : 						}

  00baa	eb 14		 jmp	 SHORT $LN91@P_MoveChas
$LN90@P_MoveChas:

; 9463 : 						else
; 9464 : 						{
; 9465 : 							polytop = INT32_MAX;

  00bac	c7 85 60 ff ff
	ff ff ff ff 7f	 mov	 DWORD PTR _polytop$3[ebp], 2147483647 ; 7fffffffH

; 9466 : 							polybottom = INT32_MIN;

  00bb6	c7 85 5c ff ff
	ff 00 00 00 80	 mov	 DWORD PTR _polybottom$2[ebp], -2147483648 ; 80000000H
$LN91@P_MoveChas:

; 9467 : 						}
; 9468 : 
; 9469 : 						thingtop = midz + thiscam->height;

  00bc0	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00bc3	8b 4d a8	 mov	 ecx, DWORD PTR _midz$21[ebp]
  00bc6	03 48 30	 add	 ecx, DWORD PTR [eax+48]
  00bc9	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _thingtop$4[ebp], ecx

; 9470 : 						delta1 = midz - (polybottom + ((polytop - polybottom)/2));

  00bcf	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _polytop$3[ebp]
  00bd5	2b 85 5c ff ff
	ff		 sub	 eax, DWORD PTR _polybottom$2[ebp]
  00bdb	99		 cdq
  00bdc	2b c2		 sub	 eax, edx
  00bde	d1 f8		 sar	 eax, 1
  00be0	03 85 5c ff ff
	ff		 add	 eax, DWORD PTR _polybottom$2[ebp]
  00be6	8b 4d a8	 mov	 ecx, DWORD PTR _midz$21[ebp]
  00be9	2b c8		 sub	 ecx, eax
  00beb	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _delta1$6[ebp], ecx

; 9471 : 						delta2 = thingtop - (polybottom + ((polytop - polybottom)/2));

  00bf1	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _polytop$3[ebp]
  00bf7	2b 85 5c ff ff
	ff		 sub	 eax, DWORD PTR _polybottom$2[ebp]
  00bfd	99		 cdq
  00bfe	2b c2		 sub	 eax, edx
  00c00	d1 f8		 sar	 eax, 1
  00c02	03 85 5c ff ff
	ff		 add	 eax, DWORD PTR _polybottom$2[ebp]
  00c08	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _thingtop$4[ebp]
  00c0e	2b c8		 sub	 ecx, eax
  00c10	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _delta2$5[ebp], ecx

; 9472 : 
; 9473 : 						if (polytop > tmfloorz && abs(delta1) < abs(delta2))

  00c16	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _polytop$3[ebp]
  00c1c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _tmfloorz
  00c22	7e 2d		 jle	 SHORT $LN92@P_MoveChas
  00c24	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _delta1$6[ebp]
  00c2a	50		 push	 eax
  00c2b	e8 00 00 00 00	 call	 _abs
  00c30	83 c4 04	 add	 esp, 4
  00c33	8b f0		 mov	 esi, eax
  00c35	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _delta2$5[ebp]
  00c3b	51		 push	 ecx
  00c3c	e8 00 00 00 00	 call	 _abs
  00c41	83 c4 04	 add	 esp, 4
  00c44	3b f0		 cmp	 esi, eax
  00c46	7d 09		 jge	 SHORT $LN92@P_MoveChas

; 9474 : 							myfloorz = polytop;

  00c48	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _polytop$3[ebp]
  00c4e	89 45 b0	 mov	 DWORD PTR _myfloorz$23[ebp], eax
$LN92@P_MoveChas:

; 9475 : 
; 9476 : 						if (polybottom < tmceilingz && abs(delta1) >= abs(delta2))

  00c51	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _polybottom$2[ebp]
  00c57	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _tmceilingz
  00c5d	7d 2d		 jge	 SHORT $LN93@P_MoveChas
  00c5f	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _delta1$6[ebp]
  00c65	50		 push	 eax
  00c66	e8 00 00 00 00	 call	 _abs
  00c6b	83 c4 04	 add	 esp, 4
  00c6e	8b f0		 mov	 esi, eax
  00c70	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _delta2$5[ebp]
  00c76	51		 push	 ecx
  00c77	e8 00 00 00 00	 call	 _abs
  00c7c	83 c4 04	 add	 esp, 4
  00c7f	3b f0		 cmp	 esi, eax
  00c81	7c 09		 jl	 SHORT $LN93@P_MoveChas

; 9477 : 							myceilingz = polybottom;

  00c83	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _polybottom$2[ebp]
  00c89	89 45 ac	 mov	 DWORD PTR _myceilingz$22[ebp], eax
$LN93@P_MoveChas:

; 9478 : 					}
; 9479 : 					plink = (polymaplink_t *)(plink->link.next);

  00c8c	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _plink$9[ebp]
  00c92	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c94	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _plink$9[ebp], ecx

; 9480 : 				}

  00c9a	e9 4f fe ff ff	 jmp	 $LN133@P_MoveChas
$LN12@P_MoveChas:

; 9481 : 			}

  00c9f	e9 e9 fd ff ff	 jmp	 $LN8@P_MoveChas
$LN9@P_MoveChas:
  00ca4	e9 c7 fd ff ff	 jmp	 $LN5@P_MoveChas
$LN6@P_MoveChas:

; 9482 : 	}
; 9483 : #endif
; 9484 : 
; 9485 : 		// camera fit?
; 9486 : 		if (myceilingz != myfloorz
; 9487 : 			&& myceilingz - thiscam->height < z)

  00ca9	8b 45 ac	 mov	 eax, DWORD PTR _myceilingz$22[ebp]
  00cac	3b 45 b0	 cmp	 eax, DWORD PTR _myfloorz$23[ebp]
  00caf	74 20		 je	 SHORT $LN94@P_MoveChas
  00cb1	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00cb4	8b 4d ac	 mov	 ecx, DWORD PTR _myceilingz$22[ebp]
  00cb7	2b 48 30	 sub	 ecx, DWORD PTR [eax+48]
  00cba	3b 4d ec	 cmp	 ecx, DWORD PTR _z$[ebp]
  00cbd	7d 12		 jge	 SHORT $LN94@P_MoveChas

; 9488 : 		{
; 9489 : 			// no fit
; 9490 : 			z = myceilingz - thiscam->height-11*FRACUNIT;

  00cbf	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00cc2	8b 4d ac	 mov	 ecx, DWORD PTR _myceilingz$22[ebp]
  00cc5	2b 48 30	 sub	 ecx, DWORD PTR [eax+48]
  00cc8	81 e9 00 00 0b
	00		 sub	 ecx, 720896		; 000b0000H
  00cce	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
$LN94@P_MoveChas:

; 9491 : 			// is the camera fit is there own sector
; 9492 : 		}
; 9493 : 
; 9494 : 		// Make the camera a tad smarter with 3d floors
; 9495 : 		if (newsubsec->sector->ffloors)

  00cd1	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  00cd4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cd6	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  00cdd	0f 84 48 01 00
	00		 je	 $LN14@P_MoveChas

; 9496 : 		{
; 9497 : 			ffloor_t *rover;
; 9498 : 
; 9499 : 			for (rover = newsubsec->sector->ffloors; rover; rover = rover->next)

  00ce3	8b 45 bc	 mov	 eax, DWORD PTR _newsubsec$[ebp]
  00ce6	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ce8	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00cee	89 95 58 ff ff
	ff		 mov	 DWORD PTR _rover$1[ebp], edx
  00cf4	eb 0f		 jmp	 SHORT $LN15@P_MoveChas
$LN13@P_MoveChas:
  00cf6	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00cfc	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00cff	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _rover$1[ebp], ecx
$LN15@P_MoveChas:
  00d05	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR _rover$1[ebp], 0
  00d0c	0f 84 19 01 00
	00		 je	 $LN14@P_MoveChas

; 9500 : 			{
; 9501 : 				if ((rover->flags & FF_BLOCKOTHERS) && (rover->flags & FF_RENDERALL) && (rover->flags & FF_EXISTS))

  00d12	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00d18	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00d1b	83 e1 04	 and	 ecx, 4
  00d1e	0f 84 02 01 00
	00		 je	 $LN100@P_MoveChas
  00d24	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00d2a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00d2d	83 e1 18	 and	 ecx, 24			; 00000018H
  00d30	0f 84 f0 00 00
	00		 je	 $LN100@P_MoveChas
  00d36	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00d3c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00d3f	83 e1 01	 and	 ecx, 1
  00d42	0f 84 de 00 00
	00		 je	 $LN100@P_MoveChas

; 9502 : 				{
; 9503 : 					if (*rover->bottomheight - thiscam->height < z
; 9504 : 						&& midz < *rover->bottomheight)

  00d48	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00d4e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00d51	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00d54	8b 01		 mov	 eax, DWORD PTR [ecx]
  00d56	2b 42 30	 sub	 eax, DWORD PTR [edx+48]
  00d59	3b 45 ec	 cmp	 eax, DWORD PTR _z$[ebp]
  00d5c	7d 2b		 jge	 SHORT $LN97@P_MoveChas
  00d5e	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00d64	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00d67	8b 55 a8	 mov	 edx, DWORD PTR _midz$21[ebp]
  00d6a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00d6c	7d 1b		 jge	 SHORT $LN97@P_MoveChas

; 9505 : 						z = *rover->bottomheight - thiscam->height-11*FRACUNIT;

  00d6e	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00d74	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00d77	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00d7a	8b 01		 mov	 eax, DWORD PTR [ecx]
  00d7c	2b 42 30	 sub	 eax, DWORD PTR [edx+48]
  00d7f	2d 00 00 0b 00	 sub	 eax, 720896		; 000b0000H
  00d84	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
  00d87	eb 31		 jmp	 SHORT $LN99@P_MoveChas
$LN97@P_MoveChas:

; 9506 : 
; 9507 : 					else if (*rover->topheight + thiscam->height > z
; 9508 : 						&& midz > *rover->topheight)

  00d89	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00d8f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d91	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d93	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00d96	03 50 30	 add	 edx, DWORD PTR [eax+48]
  00d99	3b 55 ec	 cmp	 edx, DWORD PTR _z$[ebp]
  00d9c	7e 1c		 jle	 SHORT $LN99@P_MoveChas
  00d9e	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00da4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00da6	8b 55 a8	 mov	 edx, DWORD PTR _midz$21[ebp]
  00da9	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00dab	7e 0d		 jle	 SHORT $LN99@P_MoveChas

; 9509 : 						z = *rover->topheight;

  00dad	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00db3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00db5	8b 11		 mov	 edx, DWORD PTR [ecx]
  00db7	89 55 ec	 mov	 DWORD PTR _z$[ebp], edx
$LN99@P_MoveChas:

; 9510 : 
; 9511 : 					if ((mo->z >= *rover->topheight && midz < *rover->bottomheight)
; 9512 : 						|| ((mo->z < *rover->bottomheight && mo->z+mo->height < *rover->topheight) && midz >= *rover->topheight))

  00dba	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00dc0	8b 08		 mov	 ecx, DWORD PTR [eax]
  00dc2	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  00dc5	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00dc8	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00dca	7c 10		 jl	 SHORT $LN102@P_MoveChas
  00dcc	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00dd2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00dd5	8b 55 a8	 mov	 edx, DWORD PTR _midz$21[ebp]
  00dd8	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00dda	7c 3a		 jl	 SHORT $LN101@P_MoveChas
$LN102@P_MoveChas:
  00ddc	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00de2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00de5	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  00de8	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00deb	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00ded	7d 37		 jge	 SHORT $LN100@P_MoveChas
  00def	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00df2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00df5	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  00df8	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00dfb	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00e01	8b 10		 mov	 edx, DWORD PTR [eax]
  00e03	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00e05	7d 1f		 jge	 SHORT $LN100@P_MoveChas
  00e07	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _rover$1[ebp]
  00e0d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e0f	8b 55 a8	 mov	 edx, DWORD PTR _midz$21[ebp]
  00e12	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00e14	7c 10		 jl	 SHORT $LN100@P_MoveChas
$LN101@P_MoveChas:

; 9513 : 					{
; 9514 : 						// Can't see
; 9515 : 						P_ResetCamera(player, thiscam);

  00e16	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00e19	50		 push	 eax
  00e1a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00e1d	51		 push	 ecx
  00e1e	e8 00 00 00 00	 call	 _P_ResetCamera
  00e23	83 c4 08	 add	 esp, 8
$LN100@P_MoveChas:

; 9516 : 					}
; 9517 : 				}
; 9518 : 			}

  00e26	e9 cb fe ff ff	 jmp	 $LN13@P_MoveChas
$LN14@P_MoveChas:

; 9519 : 		}
; 9520 : 	}
; 9521 : 
; 9522 : 	if (thiscam->z < thiscam->floorz)

  00e2b	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00e2e	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00e31	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00e34	3b 51 24	 cmp	 edx, DWORD PTR [ecx+36]
  00e37	7d 0c		 jge	 SHORT $LN103@P_MoveChas

; 9523 : 		thiscam->z = thiscam->floorz;

  00e39	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00e3c	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00e3f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00e42	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN103@P_MoveChas:

; 9524 : 
; 9525 : 	// point viewed by the camera
; 9526 : 	// this point is just 64 unit forward the player
; 9527 : 	dist = FIXEDSCALE(64 << FRACBITS, mo->scale);

  00e45	68 00 00 40 00	 push	 4194304			; 00400000H
  00e4a	68 00 00 64 00	 push	 6553600			; 00640000H
  00e4f	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00e52	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00e59	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00e5c	51		 push	 ecx
  00e5d	e8 00 00 00 00	 call	 _FixedDiv
  00e62	83 c4 08	 add	 esp, 8
  00e65	50		 push	 eax
  00e66	e8 00 00 00 00	 call	 _FixedMul
  00e6b	83 c4 08	 add	 esp, 8
  00e6e	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 9528 : 	viewpointx = mo->x + FixedMul(FINECOSINE((angle>>ANGLETOFINESHIFT) & FINEMASK), dist);

  00e71	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  00e74	50		 push	 eax
  00e75	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  00e78	c1 e9 13	 shr	 ecx, 19			; 00000013H
  00e7b	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  00e81	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00e87	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00e8a	50		 push	 eax
  00e8b	e8 00 00 00 00	 call	 _FixedMul
  00e90	83 c4 08	 add	 esp, 8
  00e93	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  00e96	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00e99	89 45 e0	 mov	 DWORD PTR _viewpointx$[ebp], eax

; 9529 : 	viewpointy = mo->y + FixedMul(FINESINE((angle>>ANGLETOFINESHIFT) & FINEMASK), dist);

  00e9c	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  00e9f	50		 push	 eax
  00ea0	8b 4d fc	 mov	 ecx, DWORD PTR _angle$[ebp]
  00ea3	c1 e9 13	 shr	 ecx, 19			; 00000013H
  00ea6	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  00eac	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00eb3	52		 push	 edx
  00eb4	e8 00 00 00 00	 call	 _FixedMul
  00eb9	83 c4 08	 add	 esp, 8
  00ebc	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  00ebf	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00ec2	89 45 dc	 mov	 DWORD PTR _viewpointy$[ebp], eax

; 9530 : 
; 9531 : 	if (!camstill)

  00ec5	83 7d c4 00	 cmp	 DWORD PTR _camstill$[ebp], 0
  00ec9	75 24		 jne	 SHORT $LN104@P_MoveChas

; 9532 : 		thiscam->angle = R_PointToAngle2(thiscam->x, thiscam->y, viewpointx, viewpointy);

  00ecb	8b 45 dc	 mov	 eax, DWORD PTR _viewpointy$[ebp]
  00ece	50		 push	 eax
  00ecf	8b 4d e0	 mov	 ecx, DWORD PTR _viewpointx$[ebp]
  00ed2	51		 push	 ecx
  00ed3	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00ed6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00ed9	50		 push	 eax
  00eda	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00edd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00ee0	52		 push	 edx
  00ee1	e8 00 00 00 00	 call	 _R_PointToAngle2
  00ee6	83 c4 10	 add	 esp, 16			; 00000010H
  00ee9	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00eec	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$LN104@P_MoveChas:

; 9533 : 
; 9534 : /*
; 9535 : 	if (twodlevel || (mo->flags2 & MF2_TWOD))
; 9536 : 		thiscam->angle = angle;
; 9537 : */
; 9538 : 	// follow the player
; 9539 : 	if (player->playerstate != PST_DEAD && (camspeed) != 0)

  00eef	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ef2	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00ef6	74 5f		 je	 SHORT $LN106@P_MoveChas
  00ef8	83 7d d8 00	 cmp	 DWORD PTR _camspeed$[ebp], 0
  00efc	74 59		 je	 SHORT $LN106@P_MoveChas

; 9540 : 	{
; 9541 : 		if (P_AproxDistance(mo->x - thiscam->x, mo->y - thiscam->y) > checkdist * 4
; 9542 : 			|| abs(mo->z - thiscam->z) > checkdist * 3)

  00efe	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00f01	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00f04	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00f07	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00f0a	52		 push	 edx
  00f0b	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00f0e	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00f11	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00f14	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00f17	52		 push	 edx
  00f18	e8 00 00 00 00	 call	 _P_AproxDistance
  00f1d	83 c4 08	 add	 esp, 8
  00f20	8b 4d e4	 mov	 ecx, DWORD PTR _checkdist$[ebp]
  00f23	c1 e1 02	 shl	 ecx, 2
  00f26	3b c1		 cmp	 eax, ecx
  00f28	7f 1d		 jg	 SHORT $LN107@P_MoveChas
  00f2a	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00f2d	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00f30	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00f33	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  00f36	52		 push	 edx
  00f37	e8 00 00 00 00	 call	 _abs
  00f3c	83 c4 04	 add	 esp, 4
  00f3f	6b 4d e4 03	 imul	 ecx, DWORD PTR _checkdist$[ebp], 3
  00f43	3b c1		 cmp	 eax, ecx
  00f45	7e 10		 jle	 SHORT $LN106@P_MoveChas
$LN107@P_MoveChas:

; 9543 : 			P_ResetCamera(player, thiscam);

  00f47	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00f4a	50		 push	 eax
  00f4b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00f4e	51		 push	 ecx
  00f4f	e8 00 00 00 00	 call	 _P_ResetCamera
  00f54	83 c4 08	 add	 esp, 8
$LN106@P_MoveChas:

; 9544 : 	}
; 9545 : 
; 9546 : 	if (twodlevel || (mo->flags2 & MF2_TWOD))

  00f57	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00f5e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00f63	75 11		 jne	 SHORT $LN110@P_MoveChas
  00f65	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  00f68	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00f6e	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00f74	74 32		 je	 SHORT $LN108@P_MoveChas
$LN110@P_MoveChas:

; 9547 : 	{
; 9548 : 		thiscam->momx = x-thiscam->x;

  00f76	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00f79	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00f7c	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00f7f	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00f82	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 9549 : 		thiscam->momy = y-thiscam->y;

  00f85	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00f88	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  00f8b	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00f8e	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00f91	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 9550 : 		thiscam->momz = z-thiscam->z;

  00f94	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00f97	8b 4d ec	 mov	 ecx, DWORD PTR _z$[ebp]
  00f9a	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  00f9d	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00fa0	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 9551 : 	}

  00fa3	e9 a5 00 00 00	 jmp	 $LN112@P_MoveChas
$LN108@P_MoveChas:

; 9552 : 	else
; 9553 : 	{
; 9554 : 		thiscam->momx = FixedMul(x - thiscam->x, camspeed);

  00fa8	8b 45 d8	 mov	 eax, DWORD PTR _camspeed$[ebp]
  00fab	50		 push	 eax
  00fac	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00faf	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  00fb2	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00fb5	52		 push	 edx
  00fb6	e8 00 00 00 00	 call	 _FixedMul
  00fbb	83 c4 08	 add	 esp, 8
  00fbe	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00fc1	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 9555 : 		thiscam->momy = FixedMul(y - thiscam->y, camspeed);

  00fc4	8b 45 d8	 mov	 eax, DWORD PTR _camspeed$[ebp]
  00fc7	50		 push	 eax
  00fc8	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00fcb	8b 55 f0	 mov	 edx, DWORD PTR _y$[ebp]
  00fce	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00fd1	52		 push	 edx
  00fd2	e8 00 00 00 00	 call	 _FixedMul
  00fd7	83 c4 08	 add	 esp, 8
  00fda	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00fdd	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 9556 : 
; 9557 : 		if (GETSECSPECIAL(thiscam->subsector->sector->special, 1) == 6
; 9558 : 			&& thiscam->z < thiscam->subsector->sector->floorheight + 256*FRACUNIT
; 9559 : 			&& FixedMul(z - thiscam->z, camspeed) < 0)

  00fe0	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00fe3	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00fe6	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fe8	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  00fec	83 e0 0f	 and	 eax, 15			; 0000000fH
  00fef	83 f8 06	 cmp	 eax, 6
  00ff2	75 3d		 jne	 SHORT $LN111@P_MoveChas
  00ff4	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00ff7	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00ffa	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ffc	8b 02		 mov	 eax, DWORD PTR [edx]
  00ffe	05 00 00 00 01	 add	 eax, 16777216		; 01000000H
  01003	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  01006	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  01009	7d 26		 jge	 SHORT $LN111@P_MoveChas
  0100b	8b 45 d8	 mov	 eax, DWORD PTR _camspeed$[ebp]
  0100e	50		 push	 eax
  0100f	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  01012	8b 55 ec	 mov	 edx, DWORD PTR _z$[ebp]
  01015	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  01018	52		 push	 edx
  01019	e8 00 00 00 00	 call	 _FixedMul
  0101e	83 c4 08	 add	 esp, 8
  01021	85 c0		 test	 eax, eax
  01023	7d 0c		 jge	 SHORT $LN111@P_MoveChas

; 9560 : 		{
; 9561 : 			thiscam->momz = 0; // Don't go down a death pit

  01025	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  01028	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 9562 : 		}

  0102f	eb 1c		 jmp	 SHORT $LN112@P_MoveChas
$LN111@P_MoveChas:

; 9563 : 		else
; 9564 : 			thiscam->momz = FixedMul(z - thiscam->z, camspeed);

  01031	8b 45 d8	 mov	 eax, DWORD PTR _camspeed$[ebp]
  01034	50		 push	 eax
  01035	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  01038	8b 55 ec	 mov	 edx, DWORD PTR _z$[ebp]
  0103b	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  0103e	52		 push	 edx
  0103f	e8 00 00 00 00	 call	 _FixedMul
  01044	83 c4 08	 add	 esp, 8
  01047	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  0104a	89 41 40	 mov	 DWORD PTR [ecx+64], eax
$LN112@P_MoveChas:

; 9565 : 	}
; 9566 : 
; 9567 : 	// compute aming to look the viewed point
; 9568 : 	f1 = viewpointx-thiscam->x;

  0104d	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  01050	8b 4d e0	 mov	 ecx, DWORD PTR _viewpointx$[ebp]
  01053	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  01056	89 4d b8	 mov	 DWORD PTR _f1$[ebp], ecx

; 9569 : 	f2 = viewpointy-thiscam->y;

  01059	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0105c	8b 4d dc	 mov	 ecx, DWORD PTR _viewpointy$[ebp]
  0105f	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  01062	89 4d b4	 mov	 DWORD PTR _f2$[ebp], ecx

; 9570 : 	dist = FixedHypot(f1, f2);

  01065	8b 45 b4	 mov	 eax, DWORD PTR _f2$[ebp]
  01068	50		 push	 eax
  01069	8b 4d b8	 mov	 ecx, DWORD PTR _f1$[ebp]
  0106c	51		 push	 ecx
  0106d	e8 00 00 00 00	 call	 _FixedHypot
  01072	83 c4 08	 add	 esp, 8
  01075	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 9571 : 
; 9572 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  01078	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0107b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0107d	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01083	83 e2 20	 and	 edx, 32			; 00000020H
  01086	0f 84 a1 00 00
	00		 je	 $LN113@P_MoveChas

; 9573 : 	// oh jeez, what a headache!
; 9574 : 		angle = R_PointToAngle2(0, thiscam->z, dist,mo->z + (FixedDiv(FixedMul(mo->info->height,3),4) >> 1)

  0108c	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  0108f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01095	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  01098	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0109b	3b 41 44	 cmp	 eax, DWORD PTR [ecx+68]
  0109e	74 1c		 je	 SHORT $LN131@P_MoveChas
  010a0	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  010a3	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  010a9	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  010ac	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  010af	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  010b2	d1 f9		 sar	 ecx, 1
  010b4	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv902[ebp], ecx
  010ba	eb 0a		 jmp	 SHORT $LN132@P_MoveChas
$LN131@P_MoveChas:
  010bc	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv902[ebp], 0
$LN132@P_MoveChas:
  010c6	6a 04		 push	 4
  010c8	6a 03		 push	 3
  010ca	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  010cd	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  010d3	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  010d6	51		 push	 ecx
  010d7	e8 00 00 00 00	 call	 _FixedMul
  010dc	83 c4 08	 add	 esp, 8
  010df	50		 push	 eax
  010e0	e8 00 00 00 00	 call	 _FixedDiv
  010e5	83 c4 08	 add	 esp, 8
  010e8	d1 f8		 sar	 eax, 1
  010ea	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  010ed	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  010f0	03 c8		 add	 ecx, eax
  010f2	2b 8d 14 ff ff
	ff		 sub	 ecx, DWORD PTR tv902[ebp]
  010f8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  010fb	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  010fe	c1 e8 13	 shr	 eax, 19			; 00000013H
  01101	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  01106	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[eax*4]
  0110d	c1 e2 06	 shl	 edx, 6
  01110	03 ca		 add	 ecx, edx
  01112	51		 push	 ecx
  01113	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  01116	50		 push	 eax
  01117	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  0111a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0111d	52		 push	 edx
  0111e	6a 00		 push	 0
  01120	e8 00 00 00 00	 call	 _R_PointToAngle2
  01125	83 c4 10	 add	 esp, 16			; 00000010H
  01128	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax
  0112b	eb 4a		 jmp	 SHORT $LN114@P_MoveChas
$LN113@P_MoveChas:

; 9575 : 			- ((mo->height != mo->info->height) ? (mo->info->height - mo->height) >> 1 : 0)
; 9576 : 			+ (FINESINE((player->aiming>>ANGLETOFINESHIFT) & FINEMASK) * 64));
; 9577 : 	else
; 9578 : 		angle = R_PointToAngle2(0, thiscam->z, dist,mo->z + (P_GetPlayerHeight(player) >> 1)

  0112d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01130	50		 push	 eax
  01131	e8 00 00 00 00	 call	 _P_GetPlayerHeight
  01136	83 c4 04	 add	 esp, 4
  01139	d1 f8		 sar	 eax, 1
  0113b	8b 4d c0	 mov	 ecx, DWORD PTR _mo$[ebp]
  0113e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01141	03 d0		 add	 edx, eax
  01143	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01146	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  01149	c1 e9 13	 shr	 ecx, 19			; 00000013H
  0114c	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  01152	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR _finesine[ecx*4]
  01159	c1 e0 06	 shl	 eax, 6
  0115c	03 d0		 add	 edx, eax
  0115e	52		 push	 edx
  0115f	8b 4d e8	 mov	 ecx, DWORD PTR _dist$[ebp]
  01162	51		 push	 ecx
  01163	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  01166	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  01169	50		 push	 eax
  0116a	6a 00		 push	 0
  0116c	e8 00 00 00 00	 call	 _R_PointToAngle2
  01171	83 c4 10	 add	 esp, 16			; 00000010H
  01174	89 45 fc	 mov	 DWORD PTR _angle$[ebp], eax
$LN114@P_MoveChas:

; 9579 : 			+ (FINESINE((player->aiming>>ANGLETOFINESHIFT) & FINEMASK) * 64));
; 9580 : 
; 9581 : 	if (twodlevel || (mo->flags2 & MF2_TWOD) || !camstill) // Keep the view still...

  01177	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0117e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01183	75 17		 jne	 SHORT $LN116@P_MoveChas
  01185	8b 45 c0	 mov	 eax, DWORD PTR _mo$[ebp]
  01188	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0118e	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  01194	75 06		 jne	 SHORT $LN116@P_MoveChas
  01196	83 7d c4 00	 cmp	 DWORD PTR _camstill$[ebp], 0
  0119a	75 2c		 jne	 SHORT $LN115@P_MoveChas
$LN116@P_MoveChas:

; 9582 : 	{
; 9583 : 		G_ClipAimingPitch((INT32 *)&angle);

  0119c	8d 45 fc	 lea	 eax, DWORD PTR _angle$[ebp]
  0119f	50		 push	 eax
  011a0	e8 00 00 00 00	 call	 _G_ClipAimingPitch
  011a5	83 c4 04	 add	 esp, 4

; 9584 : 		dist = thiscam->aiming - angle;

  011a8	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  011ab	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  011ae	2b 4d fc	 sub	 ecx, DWORD PTR _angle$[ebp]
  011b1	89 4d e8	 mov	 DWORD PTR _dist$[ebp], ecx

; 9585 : 		thiscam->aiming -= (dist>>3);

  011b4	8b 45 e8	 mov	 eax, DWORD PTR _dist$[ebp]
  011b7	c1 f8 03	 sar	 eax, 3
  011ba	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  011bd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  011c0	2b d0		 sub	 edx, eax
  011c2	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  011c5	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN115@P_MoveChas:

; 9586 : 	}
; 9587 : 
; 9588 : 	// Make player translucent if camera is too close (only in single player).
; 9589 : 	if (!(multiplayer || netgame) && !splitscreen
; 9590 : 		&& P_AproxDistance(thiscam->x - player->mo->x, thiscam->y - player->mo->y) < FIXEDSCALE(48*FRACUNIT, mo->scale))

  011c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  011cf	0f 85 85 00 00
	00		 jne	 $LN117@P_MoveChas
  011d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  011dc	75 7c		 jne	 SHORT $LN117@P_MoveChas
  011de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  011e5	75 73		 jne	 SHORT $LN117@P_MoveChas
  011e7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  011ec	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  011ef	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  011f2	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  011f5	50		 push	 eax
  011f6	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  011f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  011fb	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  011fe	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01201	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  01204	51		 push	 ecx
  01205	e8 00 00 00 00	 call	 _P_AproxDistance
  0120a	83 c4 08	 add	 esp, 8
  0120d	8b f0		 mov	 esi, eax
  0120f	68 00 00 30 00	 push	 3145728			; 00300000H
  01214	68 00 00 64 00	 push	 6553600			; 00640000H
  01219	8b 55 c0	 mov	 edx, DWORD PTR _mo$[ebp]
  0121c	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  01223	c1 e0 10	 shl	 eax, 16			; 00000010H
  01226	50		 push	 eax
  01227	e8 00 00 00 00	 call	 _FixedDiv
  0122c	83 c4 08	 add	 esp, 8
  0122f	50		 push	 eax
  01230	e8 00 00 00 00	 call	 _FixedMul
  01235	83 c4 08	 add	 esp, 8
  01238	3b f0		 cmp	 esi, eax
  0123a	7d 1e		 jge	 SHORT $LN117@P_MoveChas

; 9591 : 	{
; 9592 : 		player->mo->flags2 |= MF2_SHADOW;

  0123c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0123f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01241	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  01247	81 ca 00 00 00
	01		 or	 edx, 16777216		; 01000000H
  0124d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01250	8b 08		 mov	 ecx, DWORD PTR [eax]
  01252	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 9593 : 	}

  01258	eb 1c		 jmp	 SHORT $LN118@P_MoveChas
$LN117@P_MoveChas:

; 9594 : 	else
; 9595 : 		player->mo->flags2 &= ~MF2_SHADOW;

  0125a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0125d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0125f	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  01265	81 e2 ff ff ff
	fe		 and	 edx, -16777217		; feffffffH
  0126b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0126e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01270	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx
$LN118@P_MoveChas:

; 9596 : 
; 9597 : 	if (player->playerstate == PST_DEAD || player->playerstate == PST_REBORN)

  01276	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01279	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0127d	74 09		 je	 SHORT $LN120@P_MoveChas
  0127f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01282	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  01286	75 74		 jne	 SHORT $LN121@P_MoveChas
$LN120@P_MoveChas:

; 9598 : 	{
; 9599 : 		thiscam->momz = 0;

  01288	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0128b	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 9600 : 
; 9601 : 		if (player->mo && ((((player->mo->eflags & MFE_VERTICALFLIP) && player->mo->momz >= 0 && (thiscam->aiming>>ANGLETOFINESHIFT) < 4096))

  01292	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01295	83 38 00	 cmp	 DWORD PTR [eax], 0
  01298	74 62		 je	 SHORT $LN121@P_MoveChas
  0129a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0129d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0129f	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  012a5	83 e2 20	 and	 edx, 32			; 00000020H
  012a8	74 1c		 je	 SHORT $LN123@P_MoveChas
  012aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  012af	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  012b3	7c 11		 jl	 SHORT $LN123@P_MoveChas
  012b5	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  012b8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  012bb	c1 e9 13	 shr	 ecx, 19			; 00000013H
  012be	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  012c4	72 2c		 jb	 SHORT $LN122@P_MoveChas
$LN123@P_MoveChas:
  012c6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  012cb	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  012d1	83 e2 20	 and	 edx, 32			; 00000020H
  012d4	75 26		 jne	 SHORT $LN121@P_MoveChas
  012d6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  012db	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  012df	7f 1b		 jg	 SHORT $LN121@P_MoveChas
  012e1	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  012e4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  012e7	c1 e9 13	 shr	 ecx, 19			; 00000013H
  012ea	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  012f0	76 0a		 jbe	 SHORT $LN121@P_MoveChas
$LN122@P_MoveChas:

; 9602 : 			|| ((!(player->mo->eflags & MFE_VERTICALFLIP) && player->mo->momz <= 0 && (thiscam->aiming>>ANGLETOFINESHIFT) > 2048))))
; 9603 : 			thiscam->aiming = 0;

  012f2	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  012f5	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN121@P_MoveChas:

; 9604 : 	}
; 9605 : }

  012fc	5f		 pop	 edi
  012fd	5e		 pop	 esi
  012fe	5b		 pop	 ebx
  012ff	8b e5		 mov	 esp, ebp
  01301	5d		 pop	 ebp
  01302	c3		 ret	 0
_P_MoveChaseCamera ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_ResetCamera
_TEXT	SEGMENT
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_player$ = 8						; size = 4
_thiscam$ = 12						; size = 4
_P_ResetCamera PROC					; COMDAT

; 9125 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9126 : 	fixed_t x, y, z;
; 9127 : 
; 9128 : 	if (!player->mo)

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	75 05		 jne	 SHORT $LN2@P_ResetCam

; 9129 : 		return;

  00011	e9 b3 00 00 00	 jmp	 $LN1@P_ResetCam
$LN2@P_ResetCam:

; 9130 : 
; 9131 : 	if (player->mo->health <= 0)

  00016	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00022	7f 05		 jg	 SHORT $LN3@P_ResetCam

; 9132 : 		return;

  00024	e9 a0 00 00 00	 jmp	 $LN1@P_ResetCam
$LN3@P_ResetCam:

; 9133 : 
; 9134 : 	thiscam->chase = true;

  00029	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0002c	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 9135 : 	x = player->mo->x;

  00032	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0003a	89 55 fc	 mov	 DWORD PTR _x$[ebp], edx

; 9136 : 	y = player->mo->y;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00045	89 55 f8	 mov	 DWORD PTR _y$[ebp], edx

; 9137 : 	z = player->mo->z + (cv_viewheight.value<<FRACBITS);

  00048	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_viewheight+20
  00053	c1 e2 10	 shl	 edx, 16			; 00000010H
  00056	03 51 18	 add	 edx, DWORD PTR [ecx+24]
  00059	89 55 f4	 mov	 DWORD PTR _z$[ebp], edx

; 9138 : 
; 9139 : 	// set bits for the camera
; 9140 : 	thiscam->x = x;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00062	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 9141 : 	thiscam->y = y;

  00065	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00068	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0006b	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 9142 : 	thiscam->z = z;

  0006e	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _z$[ebp]
  00074	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 9143 : 
; 9144 : 	thiscam->angle = player->mo->angle;

  00077	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  0007f	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00082	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 9145 : 	thiscam->aiming = 0;

  00085	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00088	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 9146 : 	thiscam->relativex = 0;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00092	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 9147 : 
; 9148 : 	thiscam->subsector = R_PointInSubsector(thiscam->x,thiscam->y);

  00099	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0009c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0009f	51		 push	 ecx
  000a0	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  000a3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _R_PointInSubsector
  000ac	83 c4 08	 add	 esp, 8
  000af	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  000b2	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 9149 : 
; 9150 : 	thiscam->radius = 20*FRACUNIT;

  000b5	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000b8	c7 40 2c 00 00
	14 00		 mov	 DWORD PTR [eax+44], 1310720 ; 00140000H

; 9151 : 	thiscam->height = 16*FRACUNIT;

  000bf	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000c2	c7 40 30 00 00
	10 00		 mov	 DWORD PTR [eax+48], 1048576 ; 00100000H
$LN1@P_ResetCam:

; 9152 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_P_ResetCamera ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_AddPlayerScore
_TEXT	SEGMENT
_oldscore$ = -4						; size = 4
_player$ = 8						; size = 4
_amount$ = 12						; size = 4
_P_AddPlayerScore PROC					; COMDAT

; 967  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 968  : 	UINT32 oldscore = player->score;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00012	89 4d fc	 mov	 DWORD PTR _oldscore$[ebp], ecx

; 969  : 
; 970  : 	if (player->score + amount < INT32_MAX)

  00015	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00018	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  0001e	03 4d 0c	 add	 ecx, DWORD PTR _amount$[ebp]
  00021	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00027	73 17		 jae	 SHORT $LN2@P_AddPlaye

; 971  : 		player->score += amount;

  00029	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0002c	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00032	03 4d 0c	 add	 ecx, DWORD PTR _amount$[ebp]
  00035	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00038	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
  0003e	eb 0d		 jmp	 SHORT $LN3@P_AddPlaye
$LN2@P_AddPlaye:

; 972  : 	else
; 973  : 		player->score = 0;

  00040	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00043	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+188], 0
$LN3@P_AddPlaye:

; 974  : 
; 975  : 	// check for extra lives every 50000 pts
; 976  : 	if (player->score > oldscore && player->score % 50000 < amount && (gametype == GT_RACE || gametype == GT_COOP)
; 977  : 		&& !(mapheaderinfo[gamemap-1].typeoflevel & TOL_NIGHTS))

  0004d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00050	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00056	3b 4d fc	 cmp	 ecx, DWORD PTR _oldscore$[ebp]
  00059	0f 86 e1 00 00
	00		 jbe	 $LN7@P_AddPlaye
  0005f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00062	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [eax+188]
  00068	33 d2		 xor	 edx, edx
  0006a	b9 50 c3 00 00	 mov	 ecx, 50000		; 0000c350H
  0006f	f7 f1		 div	 ecx
  00071	3b 55 0c	 cmp	 edx, DWORD PTR _amount$[ebp]
  00074	0f 83 c6 00 00
	00		 jae	 $LN7@P_AddPlaye
  0007a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00081	83 f8 02	 cmp	 eax, 2
  00084	74 0f		 je	 SHORT $LN5@P_AddPlaye
  00086	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0008d	85 c0		 test	 eax, eax
  0008f	0f 85 ab 00 00
	00		 jne	 $LN7@P_AddPlaye
$LN5@P_AddPlaye:
  00095	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0009c	83 e8 01	 sub	 eax, 1
  0009f	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000a5	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  000ac	83 e2 40	 and	 edx, 64			; 00000040H
  000af	0f 85 8b 00 00
	00		 jne	 $LN7@P_AddPlaye

; 978  : 	{
; 979  : 		P_GivePlayerLives(player, (player->score/50000) - (oldscore/50000));

  000b5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b8	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [eax+188]
  000be	33 d2		 xor	 edx, edx
  000c0	b9 50 c3 00 00	 mov	 ecx, 50000		; 0000c350H
  000c5	f7 f1		 div	 ecx
  000c7	8b c8		 mov	 ecx, eax
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _oldscore$[ebp]
  000cc	33 d2		 xor	 edx, edx
  000ce	be 50 c3 00 00	 mov	 esi, 50000		; 0000c350H
  000d3	f7 f6		 div	 esi
  000d5	2b c8		 sub	 ecx, eax
  000d7	51		 push	 ecx
  000d8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 _P_GivePlayerLives
  000e1	83 c4 08	 add	 esp, 8

; 980  : 
; 981  : 		if (mariomode)

  000e4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  000eb	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000f0	74 12		 je	 SHORT $LN6@P_AddPlaye

; 982  : 			S_StartSound(player->mo, sfx_marioa);

  000f2	6a 66		 push	 102			; 00000066H
  000f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 _S_StartSound
  000ff	83 c4 08	 add	 esp, 8
  00102	eb 3c		 jmp	 SHORT $LN7@P_AddPlaye
$LN6@P_AddPlaye:

; 983  : 		else
; 984  : 		{
; 985  : 			if (P_IsLocalPlayer(player))

  00104	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  0010d	83 c4 04	 add	 esp, 4
  00110	85 c0		 test	 eax, eax
  00112	74 15		 je	 SHORT $LN8@P_AddPlaye

; 986  : 			{
; 987  : 				S_StopMusic();

  00114	e8 00 00 00 00	 call	 _S_StopMusic
  00119	90		 npad	 1

; 988  : 				S_ChangeMusic(mus_xtlife, false);

  0011a	6a 00		 push	 0
  0011c	68 14 04 00 00	 push	 1044			; 00000414H
  00121	e8 00 00 00 00	 call	 _S_ChangeMusic
  00126	83 c4 08	 add	 esp, 8
$LN8@P_AddPlaye:

; 989  : 			}
; 990  : 			player->powers[pw_extralife] = extralifetics + 1;

  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR _extralifetics
  0012e	83 c0 01	 add	 eax, 1
  00131	b9 04 00 00 00	 mov	 ecx, 4
  00136	c1 e1 03	 shl	 ecx, 3
  00139	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0013c	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
$LN7@P_AddPlaye:

; 991  : 		}
; 992  : 	}
; 993  : 
; 994  : 	// In team match, all awarded points are incremented to the team's running score.
; 995  : 	if (gametype == GT_MATCH && cv_matchtype.value)

  00140	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00147	83 f8 01	 cmp	 eax, 1
  0014a	75 3d		 jne	 SHORT $LN12@P_AddPlaye
  0014c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00153	74 34		 je	 SHORT $LN12@P_AddPlaye

; 996  : 	{
; 997  : 		if (player->ctfteam == 1)

  00155	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00158	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  0015f	75 0f		 jne	 SHORT $LN10@P_AddPlaye

; 998  : 			redscore += amount;

  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR _redscore
  00166	03 45 0c	 add	 eax, DWORD PTR _amount$[ebp]
  00169	a3 00 00 00 00	 mov	 DWORD PTR _redscore, eax
  0016e	eb 19		 jmp	 SHORT $LN12@P_AddPlaye
$LN10@P_AddPlaye:

; 999  : 		else if (player->ctfteam == 2)

  00170	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00173	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  0017a	75 0d		 jne	 SHORT $LN12@P_AddPlaye

; 1000 : 			bluescore += amount;

  0017c	a1 00 00 00 00	 mov	 eax, DWORD PTR _bluescore
  00181	03 45 0c	 add	 eax, DWORD PTR _amount$[ebp]
  00184	a3 00 00 00 00	 mov	 DWORD PTR _bluescore, eax
$LN12@P_AddPlaye:

; 1001 : 	}
; 1002 : }

  00189	5f		 pop	 edi
  0018a	5e		 pop	 esi
  0018b	5b		 pop	 ebx
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c3		 ret	 0
_P_AddPlayerScore ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_GetPlayerControlDirection
_TEXT	SEGMENT
_tempangle$1 = -32					; size = 4
_tempy$2 = -28						; size = 4
_tempx$3 = -24						; size = 4
_thiscam$ = -20						; size = 4
_controlplayerdirection$ = -16				; size = 4
_controllerdirection$ = -12				; size = 4
_controldirection$ = -8					; size = 4
_cmd$ = -4						; size = 4
_player$ = 8						; size = 4
_P_GetPlayerControlDirection PROC			; COMDAT

; 2199 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2200 : 	ticcmd_t *cmd = &player->cmd;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	83 c0 08	 add	 eax, 8
  0000f	89 45 fc	 mov	 DWORD PTR _cmd$[ebp], eax

; 2201 : 	angle_t controldirection, controllerdirection, controlplayerdirection;
; 2202 : 	camera_t *thiscam;
; 2203 : 
; 2204 : 	if (splitscreen && player == &players[secondarydisplayplayer])

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00019	74 1d		 je	 SHORT $LN2@P_GetPlaye
  0001b	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00025	05 00 00 00 00	 add	 eax, OFFSET _players
  0002a	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0002d	75 09		 jne	 SHORT $LN2@P_GetPlaye

; 2205 : 		thiscam = &camera2;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  00036	eb 07		 jmp	 SHORT $LN3@P_GetPlaye
$LN2@P_GetPlaye:

; 2206 : 	else
; 2207 : 		thiscam = &camera;

  00038	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _thiscam$[ebp], OFFSET _camera
$LN3@P_GetPlaye:

; 2208 : 
; 2209 : 	if (!netgame && ((player == &players[consoleplayer] && cv_analog.value)
; 2210 : 		|| (splitscreen && player == &players[secondarydisplayplayer]
; 2211 : 		&& cv_analog2.value)) && thiscam->chase)

  0003f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00046	0f 85 e2 01 00
	00		 jne	 $LN4@P_GetPlaye
  0004c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00056	05 00 00 00 00	 add	 eax, OFFSET _players
  0005b	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0005e	75 09		 jne	 SHORT $LN7@P_GetPlaye
  00060	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00067	75 32		 jne	 SHORT $LN6@P_GetPlaye
$LN7@P_GetPlaye:
  00069	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00070	0f 84 b8 01 00
	00		 je	 $LN4@P_GetPlaye
  00076	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00080	05 00 00 00 00	 add	 eax, OFFSET _players
  00085	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00088	0f 85 a0 01 00
	00		 jne	 $LN4@P_GetPlaye
  0008e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00095	0f 84 93 01 00
	00		 je	 $LN4@P_GetPlaye
$LN6@P_GetPlaye:
  0009b	8b 45 ec	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0009e	83 38 00	 cmp	 DWORD PTR [eax], 0
  000a1	0f 84 87 01 00
	00		 je	 $LN4@P_GetPlaye

; 2212 : 	{
; 2213 : 		fixed_t tempx, tempy;
; 2214 : 		angle_t tempangle;
; 2215 : 
; 2216 : 		tempx = tempy = 0;

  000a7	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tempy$2[ebp], 0
  000ae	8b 45 e4	 mov	 eax, DWORD PTR _tempy$2[ebp]
  000b1	89 45 e8	 mov	 DWORD PTR _tempx$3[ebp], eax

; 2217 : 
; 2218 : 		// Calculate the angle at which the controls are pointing
; 2219 : 		// to figure out the proper mforward and mbackward.
; 2220 : 		tempangle = thiscam->angle;

  000b4	8b 45 ec	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000b7	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000ba	89 4d e0	 mov	 DWORD PTR _tempangle$1[ebp], ecx

; 2221 : 		tempangle >>= ANGLETOFINESHIFT;

  000bd	8b 45 e0	 mov	 eax, DWORD PTR _tempangle$1[ebp]
  000c0	c1 e8 13	 shr	 eax, 19			; 00000013H
  000c3	89 45 e0	 mov	 DWORD PTR _tempangle$1[ebp], eax

; 2222 : 		tempx += FixedMul(cmd->forwardmove,FINECOSINE(tempangle));

  000c6	8b 45 e0	 mov	 eax, DWORD PTR _tempangle$1[ebp]
  000c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  000cf	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000d2	52		 push	 edx
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  000d6	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 _FixedMul
  000df	83 c4 08	 add	 esp, 8
  000e2	03 45 e8	 add	 eax, DWORD PTR _tempx$3[ebp]
  000e5	89 45 e8	 mov	 DWORD PTR _tempx$3[ebp], eax

; 2223 : 		tempy += FixedMul(cmd->forwardmove,FINESINE(tempangle));

  000e8	8b 45 e0	 mov	 eax, DWORD PTR _tempangle$1[ebp]
  000eb	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  000f2	51		 push	 ecx
  000f3	8b 55 fc	 mov	 edx, DWORD PTR _cmd$[ebp]
  000f6	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _FixedMul
  000ff	83 c4 08	 add	 esp, 8
  00102	03 45 e4	 add	 eax, DWORD PTR _tempy$2[ebp]
  00105	89 45 e4	 mov	 DWORD PTR _tempy$2[ebp], eax

; 2224 : 
; 2225 : 		tempangle = thiscam->angle-ANGLE_90;

  00108	8b 45 ec	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0010b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0010e	81 e9 00 00 00
	40		 sub	 ecx, 1073741824		; 40000000H
  00114	89 4d e0	 mov	 DWORD PTR _tempangle$1[ebp], ecx

; 2226 : 		tempangle >>= ANGLETOFINESHIFT;

  00117	8b 45 e0	 mov	 eax, DWORD PTR _tempangle$1[ebp]
  0011a	c1 e8 13	 shr	 eax, 19			; 00000013H
  0011d	89 45 e0	 mov	 DWORD PTR _tempangle$1[ebp], eax

; 2227 : 		tempx += FixedMul(cmd->sidemove,FINECOSINE(tempangle));

  00120	8b 45 e0	 mov	 eax, DWORD PTR _tempangle$1[ebp]
  00123	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00129	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0012c	52		 push	 edx
  0012d	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00130	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00134	51		 push	 ecx
  00135	e8 00 00 00 00	 call	 _FixedMul
  0013a	83 c4 08	 add	 esp, 8
  0013d	03 45 e8	 add	 eax, DWORD PTR _tempx$3[ebp]
  00140	89 45 e8	 mov	 DWORD PTR _tempx$3[ebp], eax

; 2228 : 		tempy += FixedMul(cmd->sidemove,FINESINE(tempangle));

  00143	8b 45 e0	 mov	 eax, DWORD PTR _tempangle$1[ebp]
  00146	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0014d	51		 push	 ecx
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _cmd$[ebp]
  00151	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 _FixedMul
  0015b	83 c4 08	 add	 esp, 8
  0015e	03 45 e4	 add	 eax, DWORD PTR _tempy$2[ebp]
  00161	89 45 e4	 mov	 DWORD PTR _tempy$2[ebp], eax

; 2229 : 
; 2230 : 		tempx = tempx*FRACUNIT;

  00164	8b 45 e8	 mov	 eax, DWORD PTR _tempx$3[ebp]
  00167	c1 e0 10	 shl	 eax, 16			; 00000010H
  0016a	89 45 e8	 mov	 DWORD PTR _tempx$3[ebp], eax

; 2231 : 		tempy = tempy*FRACUNIT;

  0016d	8b 45 e4	 mov	 eax, DWORD PTR _tempy$2[ebp]
  00170	c1 e0 10	 shl	 eax, 16			; 00000010H
  00173	89 45 e4	 mov	 DWORD PTR _tempy$2[ebp], eax

; 2232 : 
; 2233 : 		controldirection = controllerdirection =

  00176	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00179	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0017e	03 55 e4	 add	 edx, DWORD PTR _tempy$2[ebp]
  00181	52		 push	 edx
  00182	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00185	8b 08		 mov	 ecx, DWORD PTR [eax]
  00187	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0018a	03 55 e8	 add	 edx, DWORD PTR _tempx$3[ebp]
  0018d	52		 push	 edx
  0018e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00191	8b 08		 mov	 ecx, DWORD PTR [eax]
  00193	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00196	52		 push	 edx
  00197	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0019f	52		 push	 edx
  001a0	e8 00 00 00 00	 call	 _R_PointToAngle2
  001a5	83 c4 10	 add	 esp, 16			; 00000010H
  001a8	89 45 f4	 mov	 DWORD PTR _controllerdirection$[ebp], eax
  001ab	8b 45 f4	 mov	 eax, DWORD PTR _controllerdirection$[ebp]
  001ae	89 45 f8	 mov	 DWORD PTR _controldirection$[ebp], eax

; 2234 : 			R_PointToAngle2(player->mo->x, player->mo->y, player->mo->x + tempx,
; 2235 : 				player->mo->y + tempy);
; 2236 : 
; 2237 : 		controlplayerdirection = player->mo->angle;

  001b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b6	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001b9	89 55 f0	 mov	 DWORD PTR _controlplayerdirection$[ebp], edx

; 2238 : 
; 2239 : 		if (controlplayerdirection < ANGLE_90)

  001bc	81 7d f0 00 00
	00 40		 cmp	 DWORD PTR _controlplayerdirection$[ebp], 1073741824 ; 40000000H
  001c3	73 18		 jae	 SHORT $LN8@P_GetPlaye

; 2240 : 		{
; 2241 : 			controlplayerdirection += ANGLE_90;

  001c5	8b 45 f0	 mov	 eax, DWORD PTR _controlplayerdirection$[ebp]
  001c8	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  001cd	89 45 f0	 mov	 DWORD PTR _controlplayerdirection$[ebp], eax

; 2242 : 			controllerdirection += ANGLE_90;

  001d0	8b 45 f4	 mov	 eax, DWORD PTR _controllerdirection$[ebp]
  001d3	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  001d8	89 45 f4	 mov	 DWORD PTR _controllerdirection$[ebp], eax

; 2243 : 		}

  001db	eb 1f		 jmp	 SHORT $LN10@P_GetPlaye
$LN8@P_GetPlaye:

; 2244 : 		else if (controlplayerdirection >= ANGLE_270)

  001dd	81 7d f0 00 00
	00 c0		 cmp	 DWORD PTR _controlplayerdirection$[ebp], -1073741824 ; c0000000H
  001e4	72 16		 jb	 SHORT $LN10@P_GetPlaye

; 2245 : 		{
; 2246 : 			controlplayerdirection -= ANGLE_90;

  001e6	8b 45 f0	 mov	 eax, DWORD PTR _controlplayerdirection$[ebp]
  001e9	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  001ee	89 45 f0	 mov	 DWORD PTR _controlplayerdirection$[ebp], eax

; 2247 : 			controllerdirection -= ANGLE_90;

  001f1	8b 45 f4	 mov	 eax, DWORD PTR _controllerdirection$[ebp]
  001f4	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  001f9	89 45 f4	 mov	 DWORD PTR _controllerdirection$[ebp], eax
$LN10@P_GetPlaye:

; 2248 : 		}
; 2249 : 
; 2250 : 		// Controls pointing backwards from player
; 2251 : 		if (controllerdirection > controlplayerdirection + ANGLE_90
; 2252 : 			&& controllerdirection < controlplayerdirection - ANGLE_90)

  001fc	8b 45 f0	 mov	 eax, DWORD PTR _controlplayerdirection$[ebp]
  001ff	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00204	39 45 f4	 cmp	 DWORD PTR _controllerdirection$[ebp], eax
  00207	76 19		 jbe	 SHORT $LN11@P_GetPlaye
  00209	8b 45 f0	 mov	 eax, DWORD PTR _controlplayerdirection$[ebp]
  0020c	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00211	39 45 f4	 cmp	 DWORD PTR _controllerdirection$[ebp], eax
  00214	73 0c		 jae	 SHORT $LN11@P_GetPlaye

; 2253 : 		{
; 2254 : 			return 2;

  00216	b8 02 00 00 00	 mov	 eax, 2
  0021b	e9 09 01 00 00	 jmp	 $LN18@P_GetPlaye

; 2255 : 		}

  00220	eb 0a		 jmp	 SHORT $LN12@P_GetPlaye
$LN11@P_GetPlaye:

; 2256 : 		else // Controls pointing in player's general direction
; 2257 : 			return 1;

  00222	b8 01 00 00 00	 mov	 eax, 1
  00227	e9 fd 00 00 00	 jmp	 $LN18@P_GetPlaye
$LN12@P_GetPlaye:

; 2258 : 	}

  0022c	eb 11		 jmp	 SHORT $LN13@P_GetPlaye
$LN4@P_GetPlaye:

; 2259 : 	else
; 2260 : 	{
; 2261 : 		if (!cmd->forwardmove)

  0022e	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00231	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00234	85 c9		 test	 ecx, ecx
  00236	75 07		 jne	 SHORT $LN13@P_GetPlaye

; 2262 : 			return 0;

  00238	33 c0		 xor	 eax, eax
  0023a	e9 ea 00 00 00	 jmp	 $LN18@P_GetPlaye
$LN13@P_GetPlaye:

; 2263 : 	}
; 2264 : 
; 2265 : 	controldirection = controllerdirection =

  0023f	8b 45 fc	 mov	 eax, DWORD PTR _cmd$[ebp]
  00242	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00245	51		 push	 ecx
  00246	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00249	8b 02		 mov	 eax, DWORD PTR [edx]
  0024b	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0024e	51		 push	 ecx
  0024f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00252	8b 02		 mov	 eax, DWORD PTR [edx]
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 _P_ReturnThrustY
  0025a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025d	50		 push	 eax
  0025e	8b 4d fc	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00261	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00264	52		 push	 edx
  00265	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00268	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0026d	52		 push	 edx
  0026e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00271	8b 08		 mov	 ecx, DWORD PTR [eax]
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027c	50		 push	 eax
  0027d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00280	8b 02		 mov	 eax, DWORD PTR [edx]
  00282	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00285	51		 push	 ecx
  00286	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00289	8b 02		 mov	 eax, DWORD PTR [edx]
  0028b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0028e	51		 push	 ecx
  0028f	e8 00 00 00 00	 call	 _R_PointToAngle2
  00294	83 c4 10	 add	 esp, 16			; 00000010H
  00297	89 45 f4	 mov	 DWORD PTR _controllerdirection$[ebp], eax
  0029a	8b 55 f4	 mov	 edx, DWORD PTR _controllerdirection$[ebp]
  0029d	89 55 f8	 mov	 DWORD PTR _controldirection$[ebp], edx

; 2266 : 		R_PointToAngle2(player->mo->x, player->mo->y, P_ReturnThrustX(player->mo, player->mo->angle, cmd->forwardmove),
; 2267 : 			P_ReturnThrustY(player->mo, player->mo->angle, cmd->forwardmove));
; 2268 : 
; 2269 : 	controlplayerdirection = R_PointToAngle2(0, 0, player->mo->momx,

  002a0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a5	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  002a8	52		 push	 edx
  002a9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ae	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  002b1	52		 push	 edx
  002b2	6a 00		 push	 0
  002b4	6a 00		 push	 0
  002b6	e8 00 00 00 00	 call	 _R_PointToAngle2
  002bb	83 c4 10	 add	 esp, 16			; 00000010H
  002be	89 45 f0	 mov	 DWORD PTR _controlplayerdirection$[ebp], eax

; 2270 : 			player->mo->momy);
; 2271 : 
; 2272 : 	if (controlplayerdirection < ANGLE_90)

  002c1	81 7d f0 00 00
	00 40		 cmp	 DWORD PTR _controlplayerdirection$[ebp], 1073741824 ; 40000000H
  002c8	73 18		 jae	 SHORT $LN14@P_GetPlaye

; 2273 : 	{
; 2274 : 		controlplayerdirection += ANGLE_90;

  002ca	8b 45 f0	 mov	 eax, DWORD PTR _controlplayerdirection$[ebp]
  002cd	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  002d2	89 45 f0	 mov	 DWORD PTR _controlplayerdirection$[ebp], eax

; 2275 : 		controllerdirection += ANGLE_90;

  002d5	8b 45 f4	 mov	 eax, DWORD PTR _controllerdirection$[ebp]
  002d8	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  002dd	89 45 f4	 mov	 DWORD PTR _controllerdirection$[ebp], eax

; 2276 : 	}

  002e0	eb 1f		 jmp	 SHORT $LN16@P_GetPlaye
$LN14@P_GetPlaye:

; 2277 : 	else if (controlplayerdirection >= ANGLE_270)

  002e2	81 7d f0 00 00
	00 c0		 cmp	 DWORD PTR _controlplayerdirection$[ebp], -1073741824 ; c0000000H
  002e9	72 16		 jb	 SHORT $LN16@P_GetPlaye

; 2278 : 	{
; 2279 : 		controlplayerdirection -= ANGLE_90;

  002eb	8b 45 f0	 mov	 eax, DWORD PTR _controlplayerdirection$[ebp]
  002ee	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  002f3	89 45 f0	 mov	 DWORD PTR _controlplayerdirection$[ebp], eax

; 2280 : 		controllerdirection -= ANGLE_90;

  002f6	8b 45 f4	 mov	 eax, DWORD PTR _controllerdirection$[ebp]
  002f9	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  002fe	89 45 f4	 mov	 DWORD PTR _controllerdirection$[ebp], eax
$LN16@P_GetPlaye:

; 2281 : 	}
; 2282 : 
; 2283 : 	// Controls pointing backwards from player
; 2284 : 	if (controllerdirection > controlplayerdirection + ANGLE_90
; 2285 : 		&& controllerdirection < controlplayerdirection - ANGLE_90)

  00301	8b 45 f0	 mov	 eax, DWORD PTR _controlplayerdirection$[ebp]
  00304	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00309	39 45 f4	 cmp	 DWORD PTR _controllerdirection$[ebp], eax
  0030c	76 16		 jbe	 SHORT $LN17@P_GetPlaye
  0030e	8b 45 f0	 mov	 eax, DWORD PTR _controlplayerdirection$[ebp]
  00311	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00316	39 45 f4	 cmp	 DWORD PTR _controllerdirection$[ebp], eax
  00319	73 09		 jae	 SHORT $LN17@P_GetPlaye

; 2286 : 	{
; 2287 : 		return 2;

  0031b	b8 02 00 00 00	 mov	 eax, 2
  00320	eb 07		 jmp	 SHORT $LN18@P_GetPlaye

; 2288 : 	}

  00322	eb 05		 jmp	 SHORT $LN18@P_GetPlaye
$LN17@P_GetPlaye:

; 2289 : 	else // Controls pointing in player's general direction
; 2290 : 		return 1;

  00324	b8 01 00 00 00	 mov	 eax, 1
$LN18@P_GetPlaye:

; 2291 : }

  00329	5f		 pop	 edi
  0032a	5e		 pop	 esi
  0032b	5b		 pop	 ebx
  0032c	8b e5		 mov	 esp, ebp
  0032e	5d		 pop	 ebp
  0032f	c3		 ret	 0
_P_GetPlayerControlDirection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_GetPlayerSpinHeight
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_GetPlayerSpinHeight PROC				; COMDAT

; 1117 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1118 : 	return FixedDiv(FIXEDSCALE(player->mo->info->height, player->mo->scale),7*(FRACUNIT/4));

  00009	68 00 c0 01 00	 push	 114688			; 0001c000H
  0000e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00019	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0001c	50		 push	 eax
  0001d	68 00 00 64 00	 push	 6553600			; 00640000H
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  0002e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _FixedDiv
  00037	83 c4 08	 add	 esp, 8
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _FixedMul
  00040	83 c4 08	 add	 esp, 8
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _FixedDiv
  00049	83 c4 08	 add	 esp, 8

; 1119 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_P_GetPlayerSpinHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_user.c
;	COMDAT _P_GetPlayerHeight
_TEXT	SEGMENT
_player$ = 8						; size = 4
_P_GetPlayerHeight PROC					; COMDAT

; 1106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1107 : 	return FIXEDSCALE(player->mo->info->height, player->mo->scale);

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00014	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00017	50		 push	 eax
  00018	68 00 00 64 00	 push	 6553600			; 00640000H
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  00029	c1 e0 10	 shl	 eax, 16			; 00000010H
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _FixedDiv
  00032	83 c4 08	 add	 esp, 8
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _FixedMul
  0003b	83 c4 08	 add	 esp, 8

; 1108 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_P_GetPlayerHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_FixedInt PROC						; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 222  : 	return FixedMul(a, 1);

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _FixedMul
  00014	83 c4 08	 add	 esp, 8

; 223  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_FixedInt ENDP
_TEXT	ENDS
END
