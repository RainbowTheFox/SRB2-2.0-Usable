; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\p_floor.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
PUBLIC	_T_MovePlane
PUBLIC	_EV_DoFloor
PUBLIC	_EV_DoElevator
PUBLIC	_EV_CrumbleChain
PUBLIC	_EV_BounceSector
PUBLIC	_EV_StartCrumble
PUBLIC	_EV_DoContinuousFall
PUBLIC	_EV_MarioBlock
PUBLIC	_T_MoveFloor
PUBLIC	_T_MoveElevator
PUBLIC	_T_ContinuousFalling
PUBLIC	_T_BounceCheese
PUBLIC	_T_StartCrumble
PUBLIC	_T_MarioBlock
PUBLIC	_T_SpikeSector
PUBLIC	_T_FloatSector
PUBLIC	_T_BridgeThinker
PUBLIC	_T_MarioBlockChecker
PUBLIC	_T_ThwompSector
PUBLIC	_T_NoEnemiesSector
PUBLIC	_T_EachTimeThinker
PUBLIC	_T_CameraScanner
PUBLIC	_T_RaiseSector
PUBLIC	??_C@_0CN@JLNIBKPD@Running?5no?9more?9enemies?5exec?5wi@ ; `string'
PUBLIC	??_C@_0CI@GBJIKHLA@Running?5each?5time?5executor?5with@ ; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_0BH@OPCJOJMF@Can?8t?5lower?5sector?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BH@GHMLCOOH@Can?8t?5raise?5sector?5?$CFd?6@ ; `string'
PUBLIC	__real@47800000
EXTRN	_memcmp:PROC
EXTRN	_abs:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_CV_Set:PROC
EXTRN	_CV_SetValue:PROC
EXTRN	_P_AproxDistance:PROC
EXTRN	_P_AddThinker:PROC
EXTRN	_P_RemoveThinker:PROC
EXTRN	_P_FreezeObjectplace:PROC
EXTRN	_P_SpawnMobj:PROC
EXTRN	_P_RecalcPrecipInSector:PROC
EXTRN	_P_MobjThinker:PROC
EXTRN	_P_UnsetThingPosition:PROC
EXTRN	_P_SetThingPosition:PROC
EXTRN	_P_CheckSector:PROC
EXTRN	_P_FloorzAtPos:PROC
EXTRN	_P_DamageMobj:PROC
EXTRN	_P_TouchSpecialThing:PROC
EXTRN	_P_FindLowestFloorSurrounding:PROC
EXTRN	_P_FindHighestFloorSurrounding:PROC
EXTRN	_P_FindNextHighestFloor:PROC
EXTRN	_P_FindNextLowestFloor:PROC
EXTRN	_P_FindSectorFromLineTag:PROC
EXTRN	_P_FindSectorFromTag:PROC
EXTRN	_P_LinedefExecute:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_Z_CallocAlign:PROC
EXTRN	_R_PointInSubsector:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_splitscreen:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_gravity:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_thinkercap:BYTE
EXTRN	_cv_cam_dist:BYTE
EXTRN	_cv_cam_height:BYTE
EXTRN	_cv_cam_rotate:BYTE
EXTRN	_cv_cam2_dist:BYTE
EXTRN	_cv_cam2_height:BYTE
EXTRN	_cv_cam2_rotate:BYTE
EXTRN	_t_cam_dist:DWORD
EXTRN	_t_cam_height:DWORD
EXTRN	_t_cam_rotate:DWORD
EXTRN	_t_cam2_dist:DWORD
EXTRN	_t_cam2_height:DWORD
EXTRN	_t_cam2_rotate:DWORD
EXTRN	_tmthing:DWORD
EXTRN	_sectors:DWORD
EXTRN	_lines:DWORD
EXTRN	_sides:DWORD
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?camerascanned@?1??T_CameraScanner@@9@9 DD 01H DUP (?)	; `T_CameraScanner'::`2'::camerascanned
?camerascanned2@?1??T_CameraScanner@@9@9 DD 01H DUP (?)	; `T_CameraScanner'::`2'::camerascanned2
_BSS	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT ??_C@_0BH@GHMLCOOH@Can?8t?5raise?5sector?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@GHMLCOOH@Can?8t?5raise?5sector?5?$CFd?6@ DB 'Can''t raise secto'
	DB	'r %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OPCJOJMF@Can?8t?5lower?5sector?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@OPCJOJMF@Can?8t?5lower?5sector?5?$CFd?6@ DB 'Can''t lower secto'
	DB	'r %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?lastleveltime@?1??T_CameraScanner@@9@9 DD 07d00H	; `T_CameraScanner'::`2'::lastleveltime
_DATA	ENDS
;	COMDAT ??_C@_0CI@GBJIKHLA@Running?5each?5time?5executor?5with@
CONST	SEGMENT
??_C@_0CI@GBJIKHLA@Running?5each?5time?5executor?5with@ DB 'Running each '
	DB	'time executor with tag %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JLNIBKPD@Running?5no?9more?9enemies?5exec?5wi@
CONST	SEGMENT
??_C@_0CN@JLNIBKPD@Running?5no?9more?9enemies?5exec?5wi@ DB 'Running no-m'
	DB	'ore-enemies exec with tag of %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	04d4H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _P_HavePlayersEnteredArea
_TEXT	SEGMENT
_i$ = -4						; size = 4
_curPlayers$ = 8					; size = 4
_oldPlayers$ = 12					; size = 4
_inAndOut$ = 16						; size = 4
_P_HavePlayersEnteredArea PROC				; COMDAT

; 1938 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1939 : 	INT32 i;
; 1940 : 
; 1941 : 	// Easy check... nothing has changed
; 1942 : 	if (!memcmp(curPlayers, oldPlayers, sizeof(INT32)*MAXPLAYERS))

  00009	68 80 00 00 00	 push	 128			; 00000080H
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _oldPlayers$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _curPlayers$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _memcmp
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	85 c0		 test	 eax, eax
  00020	75 05		 jne	 SHORT $LN5@P_HavePlay

; 1943 : 		return -1;

  00022	83 c8 ff	 or	 eax, -1
  00025	eb 5d		 jmp	 SHORT $LN1@P_HavePlay
$LN5@P_HavePlay:

; 1944 : 
; 1945 : 	// Otherwise, we have to check if any new players have entered
; 1946 : 	for (i = 0; i < MAXPLAYERS; i++)

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002e	eb 09		 jmp	 SHORT $LN4@P_HavePlay
$LN2@P_HavePlay:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00033	83 c0 01	 add	 eax, 1
  00036	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_HavePlay:
  00039	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0003d	7d 42		 jge	 SHORT $LN3@P_HavePlay

; 1947 : 	{
; 1948 : 		if (inAndOut && !curPlayers[i] && oldPlayers[i])

  0003f	83 7d 10 00	 cmp	 DWORD PTR _inAndOut$[ebp], 0
  00043	74 1d		 je	 SHORT $LN6@P_HavePlay
  00045	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _curPlayers$[ebp]
  0004b	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0004f	75 11		 jne	 SHORT $LN6@P_HavePlay
  00051	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _oldPlayers$[ebp]
  00057	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0005b	74 05		 je	 SHORT $LN6@P_HavePlay

; 1949 : 			return i;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00060	eb 22		 jmp	 SHORT $LN1@P_HavePlay
$LN6@P_HavePlay:

; 1950 : 
; 1951 : 		if (curPlayers[i] && !oldPlayers[i])

  00062	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _curPlayers$[ebp]
  00068	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0006c	74 11		 je	 SHORT $LN7@P_HavePlay
  0006e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _oldPlayers$[ebp]
  00074	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00078	75 05		 jne	 SHORT $LN7@P_HavePlay

; 1952 : 			return i;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0007d	eb 05		 jmp	 SHORT $LN1@P_HavePlay
$LN7@P_HavePlay:

; 1953 : 	}

  0007f	eb af		 jmp	 SHORT $LN2@P_HavePlay
$LN3@P_HavePlay:

; 1954 : 
; 1955 : 	return -1;

  00081	83 c8 ff	 or	 eax, -1
$LN1@P_HavePlay:

; 1956 : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
_P_HavePlayersEnteredArea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _P_SectorCheckWater
_TEXT	SEGMENT
_rover$1 = -8						; size = 4
_watertop$ = -4						; size = 4
_analyzesector$ = 8					; size = 4
_elevatorsec$ = 12					; size = 4
_P_SectorCheckWater PROC				; COMDAT

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 661  : 	fixed_t watertop;
; 662  : 
; 663  : 	// Default if no water exists.
; 664  : 	watertop = -42;

  00009	c7 45 fc d6 ff
	ff ff		 mov	 DWORD PTR _watertop$[ebp], -42 ; ffffffd6H

; 665  : 
; 666  : 	// see if we are in water, and set some flags for later
; 667  : 	if (analyzesector->ffloors)

  00010	8b 45 08	 mov	 eax, DWORD PTR _analyzesector$[ebp]
  00013	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0001a	74 65		 je	 SHORT $LN3@P_SectorCh

; 668  : 	{
; 669  : 		ffloor_t *rover;
; 670  : 
; 671  : 		for (rover = analyzesector->ffloors; rover; rover = rover->next)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _analyzesector$[ebp]
  0001f	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00025	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
  00028	eb 09		 jmp	 SHORT $LN4@P_SectorCh
$LN2@P_SectorCh:
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0002d	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00030	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_SectorCh:
  00033	83 7d f8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  00037	74 48		 je	 SHORT $LN3@P_SectorCh

; 672  : 		{
; 673  : 			if (!(rover->flags & FF_EXISTS)
; 674  : 				|| !(rover->flags & FF_SWIMMABLE)
; 675  : 				|| rover->flags & FF_SOLID)

  00039	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0003c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0003f	83 e1 01	 and	 ecx, 1
  00042	74 16		 je	 SHORT $LN7@P_SectorCh
  00044	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00047	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0004a	83 e1 20	 and	 ecx, 32			; 00000020H
  0004d	74 0b		 je	 SHORT $LN7@P_SectorCh
  0004f	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00052	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00055	83 e1 06	 and	 ecx, 6
  00058	74 02		 je	 SHORT $LN6@P_SectorCh
$LN7@P_SectorCh:

; 676  : 				continue;

  0005a	eb ce		 jmp	 SHORT $LN2@P_SectorCh
$LN6@P_SectorCh:

; 677  : 
; 678  : 			// If the sector is below the water, don't bother.
; 679  : 			if ((elevatorsec->ceilingheight + elevatorsec->floorheight)>>1 < *rover->bottomheight)

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _elevatorsec$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	8b 55 0c	 mov	 edx, DWORD PTR _elevatorsec$[ebp]
  00065	03 0a		 add	 ecx, DWORD PTR [edx]
  00067	d1 f9		 sar	 ecx, 1
  00069	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0006c	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0006f	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00071	7d 02		 jge	 SHORT $LN8@P_SectorCh

; 680  : 				continue;

  00073	eb b5		 jmp	 SHORT $LN2@P_SectorCh
$LN8@P_SectorCh:

; 681  : 
; 682  : 			watertop = *rover->topheight;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007c	89 55 fc	 mov	 DWORD PTR _watertop$[ebp], edx

; 683  : 		}

  0007f	eb a9		 jmp	 SHORT $LN2@P_SectorCh
$LN3@P_SectorCh:

; 684  : 	}
; 685  : 
; 686  : 	if (watertop < analyzesector->floorheight

  00081	8b 45 0c	 mov	 eax, DWORD PTR _elevatorsec$[ebp]
  00084	8b 4d 0c	 mov	 ecx, DWORD PTR _elevatorsec$[ebp]
  00087	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008c	d1 fa		 sar	 edx, 1
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 _abs
  00094	83 c4 04	 add	 esp, 4
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _analyzesector$[ebp]
  0009a	03 01		 add	 eax, DWORD PTR [ecx]
  0009c	39 45 fc	 cmp	 DWORD PTR _watertop$[ebp], eax
  0009f	7d 07		 jge	 SHORT $LN9@P_SectorCh

; 687  : 		+ abs((elevatorsec->ceilingheight
; 688  : 			- elevatorsec->floorheight)>>1))
; 689  : 	{
; 690  : 		watertop = -42;

  000a1	c7 45 fc d6 ff
	ff ff		 mov	 DWORD PTR _watertop$[ebp], -42 ; ffffffd6H
$LN9@P_SectorCh:

; 691  : 	}
; 692  : 
; 693  : 	return watertop;

  000a8	8b 45 fc	 mov	 eax, DWORD PTR _watertop$[ebp]

; 694  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_P_SectorCheckWater ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_RaiseSector
_TEXT	SEGMENT
_origspeed$1 = -40					; size = 4
_origspeed$2 = -36					; size = 4
_res$ = -32						; size = 4
_floordestination$ = -28				; size = 4
_ceilingdestination$ = -24				; size = 4
_playeronme$ = -20					; size = 4
_i$ = -16						; size = 4
_sector$ = -12						; size = 4
_thing$ = -8						; size = 4
_node$ = -4						; size = 4
_raise$ = 8						; size = 4
_T_RaiseSector PROC					; COMDAT

; 2090 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2091 : 	msecnode_t *node;
; 2092 : 	mobj_t *thing;
; 2093 : 	sector_t *sector;
; 2094 : 	INT32 i;
; 2095 : 	boolean playeronme = false;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _playeronme$[ebp], 0

; 2096 : 	fixed_t ceilingdestination, floordestination;
; 2097 : 	result_e res = 0;

  00010	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _res$[ebp], 0

; 2098 : 
; 2099 : 	if (raise->sector->crumblestate >= 3 || raise->sector->ceilingdata)

  00017	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  0001a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0001d	83 79 74 03	 cmp	 DWORD PTR [ecx+116], 3
  00021	7d 0c		 jge	 SHORT $LN12@T_RaiseSec
  00023	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  00026	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00029	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  0002d	74 05		 je	 SHORT $LN11@T_RaiseSec
$LN12@T_RaiseSec:

; 2100 : 		return;

  0002f	e9 3b 07 00 00	 jmp	 $LN9@T_RaiseSec
$LN11@T_RaiseSec:

; 2101 : 
; 2102 : 	for (i = -1; (i = P_FindSectorFromTag(raise->sourceline->tag, i)) >= 0 ;)

  00034	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN2@T_RaiseSec:
  0003b	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  00042	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00045	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  0004f	83 c4 08	 add	 esp, 8
  00052	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
  00055	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  00059	0f 8c be 00 00
	00		 jl	 $LN3@T_RaiseSec

; 2103 : 	{
; 2104 : 		sector = &sectors[i];

  0005f	69 45 f0 f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00066	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  0006c	89 45 f4	 mov	 DWORD PTR _sector$[ebp], eax

; 2105 : 
; 2106 : 		// Is a player standing on me?
; 2107 : 		for (node = sector->touching_thinglist; node; node = node->m_snext)

  0006f	8b 45 f4	 mov	 eax, DWORD PTR _sector$[ebp]
  00072	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00078	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
  0007b	eb 09		 jmp	 SHORT $LN7@T_RaiseSec
$LN5@T_RaiseSec:
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00080	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00083	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
$LN7@T_RaiseSec:
  00086	83 7d fc 00	 cmp	 DWORD PTR _node$[ebp], 0
  0008a	0f 84 88 00 00
	00		 je	 $LN6@T_RaiseSec

; 2108 : 		{
; 2109 : 			thing = node->m_thing;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00093	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00096	89 4d f8	 mov	 DWORD PTR _thing$[ebp], ecx

; 2110 : 
; 2111 : 			if (!thing->player)

  00099	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  0009c	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000a3	75 02		 jne	 SHORT $LN13@T_RaiseSec

; 2112 : 				continue;

  000a5	eb d6		 jmp	 SHORT $LN5@T_RaiseSec
$LN13@T_RaiseSec:

; 2113 : 
; 2114 : 			// Ignore spectators.
; 2115 : 			if (thing->player && thing->player->spectator)

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  000aa	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000b1	74 16		 je	 SHORT $LN14@T_RaiseSec
  000b3	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  000b6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000bc	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  000c3	85 d2		 test	 edx, edx
  000c5	74 02		 je	 SHORT $LN14@T_RaiseSec

; 2116 : 				continue;

  000c7	eb b4		 jmp	 SHORT $LN5@T_RaiseSec
$LN14@T_RaiseSec:

; 2117 : 
; 2118 : 			// Option to require spindashing.
; 2119 : 			if (raise->vars[1] && !(thing->player->pflags & PF_STARTDASH))

  000c9	b8 04 00 00 00	 mov	 eax, 4
  000ce	c1 e0 00	 shl	 eax, 0
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  000d4	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  000d9	74 19		 je	 SHORT $LN15@T_RaiseSec
  000db	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  000de	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000e4	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  000ea	81 e2 00 40 00
	00		 and	 edx, 16384		; 00004000H
  000f0	75 02		 jne	 SHORT $LN15@T_RaiseSec

; 2120 : 				continue;

  000f2	eb 89		 jmp	 SHORT $LN5@T_RaiseSec
$LN15@T_RaiseSec:

; 2121 : 
; 2122 : 			if (!(thing->z == raise->sector->ceilingheight))

  000f4	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  000f7	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000fa	8b 55 f8	 mov	 edx, DWORD PTR _thing$[ebp]
  000fd	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00100	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00103	74 05		 je	 SHORT $LN16@T_RaiseSec

; 2123 : 				continue;

  00105	e9 73 ff ff ff	 jmp	 $LN5@T_RaiseSec
$LN16@T_RaiseSec:

; 2124 : 
; 2125 : 			playeronme = true;

  0010a	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _playeronme$[ebp], 1

; 2126 : 			break;

  00111	eb 05		 jmp	 SHORT $LN6@T_RaiseSec

; 2127 : 		}

  00113	e9 65 ff ff ff	 jmp	 $LN5@T_RaiseSec
$LN6@T_RaiseSec:

; 2128 : 	}

  00118	e9 1e ff ff ff	 jmp	 $LN2@T_RaiseSec
$LN3@T_RaiseSec:

; 2129 : 
; 2130 : 	if (playeronme)

  0011d	83 7d ec 00	 cmp	 DWORD PTR _playeronme$[ebp], 0
  00121	0f 84 ad 01 00
	00		 je	 $LN17@T_RaiseSec

; 2131 : 	{
; 2132 : 		raise->vars[3] = raise->vars[2];

  00127	b8 04 00 00 00	 mov	 eax, 4
  0012c	d1 e0		 shl	 eax, 1
  0012e	b9 04 00 00 00	 mov	 ecx, 4
  00133	6b d1 03	 imul	 edx, ecx, 3
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  00139	8b 75 08	 mov	 esi, DWORD PTR _raise$[ebp]
  0013c	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  00140	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 2133 : 
; 2134 : 		if (raise->vars[0] == 1)

  00144	b8 04 00 00 00	 mov	 eax, 4
  00149	6b c8 00	 imul	 ecx, eax, 0
  0014c	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0014f	83 7c 0a 10 01	 cmp	 DWORD PTR [edx+ecx+16], 1
  00154	0f 85 bd 00 00
	00		 jne	 $LN19@T_RaiseSec

; 2135 : 		{
; 2136 : 			if (raise->sector->ceilingheight <= raise->vars[7])

  0015a	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  0015d	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00160	ba 04 00 00 00	 mov	 edx, 4
  00165	6b c2 07	 imul	 eax, edx, 7
  00168	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0016b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0016e	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  00172	7f 67		 jg	 SHORT $LN21@T_RaiseSec

; 2137 : 			{
; 2138 : 				raise->sector->floorheight = raise->vars[7] - (raise->sector->ceilingheight - raise->sector->floorheight);

  00174	b8 04 00 00 00	 mov	 eax, 4
  00179	6b c8 07	 imul	 ecx, eax, 7
  0017c	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0017f	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00182	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00185	8b 52 54	 mov	 edx, DWORD PTR [edx+84]
  00188	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018b	2b 02		 sub	 eax, DWORD PTR [edx]
  0018d	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00190	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00194	2b c8		 sub	 ecx, eax
  00196	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00199	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0019c	89 08		 mov	 DWORD PTR [eax], ecx

; 2139 : 				raise->sector->ceilingheight = raise->vars[7];

  0019e	b8 04 00 00 00	 mov	 eax, 4
  001a3	6b c8 07	 imul	 ecx, eax, 7
  001a6	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  001a9	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  001ac	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  001af	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  001b3	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2140 : 				raise->sector->ceilspeed = 0;

  001b6	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  001b9	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001bc	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 2141 : 				raise->sector->floorspeed = 0;

  001c6	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  001c9	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001cc	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 2142 : 				return;

  001d6	e9 94 05 00 00	 jmp	 $LN9@T_RaiseSec
$LN21@T_RaiseSec:

; 2143 : 			}
; 2144 : 
; 2145 : 			raise->vars[8] = -1;

  001db	b8 04 00 00 00	 mov	 eax, 4
  001e0	c1 e0 03	 shl	 eax, 3
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  001e6	c7 44 01 10 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax+16], -1

; 2146 : 			ceilingdestination = raise->vars[7];

  001ee	b8 04 00 00 00	 mov	 eax, 4
  001f3	6b c8 07	 imul	 ecx, eax, 7
  001f6	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  001f9	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  001fd	89 45 e8	 mov	 DWORD PTR _ceilingdestination$[ebp], eax

; 2147 : 			floordestination = raise->vars[6];

  00200	b8 04 00 00 00	 mov	 eax, 4
  00205	6b c8 06	 imul	 ecx, eax, 6
  00208	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0020b	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0020f	89 45 e4	 mov	 DWORD PTR _floordestination$[ebp], eax

; 2148 : 		}

  00212	e9 b8 00 00 00	 jmp	 $LN20@T_RaiseSec
$LN19@T_RaiseSec:

; 2149 : 		else // elevateUp
; 2150 : 		{
; 2151 : 			if (raise->sector->ceilingheight >= raise->vars[5])

  00217	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  0021a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0021d	ba 04 00 00 00	 mov	 edx, 4
  00222	6b c2 05	 imul	 eax, edx, 5
  00225	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00228	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0022b	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  0022f	7c 67		 jl	 SHORT $LN22@T_RaiseSec

; 2152 : 			{
; 2153 : 				raise->sector->floorheight = raise->vars[5] - (raise->sector->ceilingheight - raise->sector->floorheight);

  00231	b8 04 00 00 00	 mov	 eax, 4
  00236	6b c8 05	 imul	 ecx, eax, 5
  00239	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0023c	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0023f	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00242	8b 52 54	 mov	 edx, DWORD PTR [edx+84]
  00245	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00248	2b 02		 sub	 eax, DWORD PTR [edx]
  0024a	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0024d	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00251	2b c8		 sub	 ecx, eax
  00253	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00256	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00259	89 08		 mov	 DWORD PTR [eax], ecx

; 2154 : 				raise->sector->ceilingheight = raise->vars[5];

  0025b	b8 04 00 00 00	 mov	 eax, 4
  00260	6b c8 05	 imul	 ecx, eax, 5
  00263	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00266	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00269	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0026c	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00270	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2155 : 				raise->sector->ceilspeed = 0;

  00273	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  00276	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00279	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 2156 : 				raise->sector->floorspeed = 0;

  00283	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  00286	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00289	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 2157 : 				return;

  00293	e9 d7 04 00 00	 jmp	 $LN9@T_RaiseSec
$LN22@T_RaiseSec:

; 2158 : 			}
; 2159 : 
; 2160 : 			raise->vars[8] = 1;

  00298	b8 04 00 00 00	 mov	 eax, 4
  0029d	c1 e0 03	 shl	 eax, 3
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  002a3	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 2161 : 			ceilingdestination = raise->vars[5];

  002ab	b8 04 00 00 00	 mov	 eax, 4
  002b0	6b c8 05	 imul	 ecx, eax, 5
  002b3	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  002b6	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  002ba	89 45 e8	 mov	 DWORD PTR _ceilingdestination$[ebp], eax

; 2162 : 			floordestination = raise->vars[4];

  002bd	b8 04 00 00 00	 mov	 eax, 4
  002c2	c1 e0 02	 shl	 eax, 2
  002c5	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  002c8	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  002cc	89 55 e4	 mov	 DWORD PTR _floordestination$[ebp], edx
$LN20@T_RaiseSec:

; 2163 : 		}
; 2164 : 	}

  002cf	e9 ad 01 00 00	 jmp	 $LN24@T_RaiseSec
$LN17@T_RaiseSec:

; 2165 : 	else
; 2166 : 	{
; 2167 : 		raise->vars[3] = raise->vars[2]/2;

  002d4	b8 04 00 00 00	 mov	 eax, 4
  002d9	d1 e0		 shl	 eax, 1
  002db	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  002de	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  002e2	99		 cdq
  002e3	2b c2		 sub	 eax, edx
  002e5	d1 f8		 sar	 eax, 1
  002e7	ba 04 00 00 00	 mov	 edx, 4
  002ec	6b ca 03	 imul	 ecx, edx, 3
  002ef	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  002f2	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 2168 : 
; 2169 : 		if (raise->vars[0] == 1)

  002f6	b8 04 00 00 00	 mov	 eax, 4
  002fb	6b c8 00	 imul	 ecx, eax, 0
  002fe	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00301	83 7c 0a 10 01	 cmp	 DWORD PTR [edx+ecx+16], 1
  00306	0f 85 bd 00 00
	00		 jne	 $LN23@T_RaiseSec

; 2170 : 		{
; 2171 : 			if (raise->sector->ceilingheight >= raise->vars[5])

  0030c	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  0030f	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00312	ba 04 00 00 00	 mov	 edx, 4
  00317	6b c2 05	 imul	 eax, edx, 5
  0031a	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0031d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00320	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  00324	7c 67		 jl	 SHORT $LN25@T_RaiseSec

; 2172 : 			{
; 2173 : 				raise->sector->floorheight = raise->vars[5] - (raise->sector->ceilingheight - raise->sector->floorheight);

  00326	b8 04 00 00 00	 mov	 eax, 4
  0032b	6b c8 05	 imul	 ecx, eax, 5
  0032e	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00331	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00334	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00337	8b 52 54	 mov	 edx, DWORD PTR [edx+84]
  0033a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0033d	2b 02		 sub	 eax, DWORD PTR [edx]
  0033f	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00342	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00346	2b c8		 sub	 ecx, eax
  00348	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0034b	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0034e	89 08		 mov	 DWORD PTR [eax], ecx

; 2174 : 				raise->sector->ceilingheight = raise->vars[5];

  00350	b8 04 00 00 00	 mov	 eax, 4
  00355	6b c8 05	 imul	 ecx, eax, 5
  00358	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0035b	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0035e	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00361	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00365	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2175 : 				raise->sector->ceilspeed = 0;

  00368	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  0036b	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0036e	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 2176 : 				raise->sector->floorspeed = 0;

  00378	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  0037b	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0037e	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 2177 : 				return;

  00388	e9 e2 03 00 00	 jmp	 $LN9@T_RaiseSec
$LN25@T_RaiseSec:

; 2178 : 			}
; 2179 : 			raise->vars[8] = 1;

  0038d	b8 04 00 00 00	 mov	 eax, 4
  00392	c1 e0 03	 shl	 eax, 3
  00395	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  00398	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 2180 : 			ceilingdestination = raise->vars[5];

  003a0	b8 04 00 00 00	 mov	 eax, 4
  003a5	6b c8 05	 imul	 ecx, eax, 5
  003a8	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  003ab	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  003af	89 45 e8	 mov	 DWORD PTR _ceilingdestination$[ebp], eax

; 2181 : 			floordestination = raise->vars[4];

  003b2	b8 04 00 00 00	 mov	 eax, 4
  003b7	c1 e0 02	 shl	 eax, 2
  003ba	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  003bd	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  003c1	89 55 e4	 mov	 DWORD PTR _floordestination$[ebp], edx

; 2182 : 		}

  003c4	e9 b8 00 00 00	 jmp	 $LN24@T_RaiseSec
$LN23@T_RaiseSec:

; 2183 : 		else // elevateUp
; 2184 : 		{
; 2185 : 			if (raise->sector->ceilingheight <= raise->vars[7])

  003c9	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  003cc	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  003cf	ba 04 00 00 00	 mov	 edx, 4
  003d4	6b c2 07	 imul	 eax, edx, 7
  003d7	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  003da	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  003dd	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  003e1	7f 67		 jg	 SHORT $LN26@T_RaiseSec

; 2186 : 			{
; 2187 : 				raise->sector->floorheight = raise->vars[7] - (raise->sector->ceilingheight - raise->sector->floorheight);

  003e3	b8 04 00 00 00	 mov	 eax, 4
  003e8	6b c8 07	 imul	 ecx, eax, 7
  003eb	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  003ee	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  003f1	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  003f4	8b 52 54	 mov	 edx, DWORD PTR [edx+84]
  003f7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003fa	2b 02		 sub	 eax, DWORD PTR [edx]
  003fc	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  003ff	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00403	2b c8		 sub	 ecx, eax
  00405	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00408	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0040b	89 08		 mov	 DWORD PTR [eax], ecx

; 2188 : 				raise->sector->ceilingheight = raise->vars[7];

  0040d	b8 04 00 00 00	 mov	 eax, 4
  00412	6b c8 07	 imul	 ecx, eax, 7
  00415	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00418	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0041b	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0041e	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00422	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2189 : 				raise->sector->ceilspeed = 0;

  00425	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  00428	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0042b	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 2190 : 				raise->sector->floorspeed = 0;

  00435	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  00438	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0043b	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 2191 : 				return;

  00445	e9 25 03 00 00	 jmp	 $LN9@T_RaiseSec
$LN26@T_RaiseSec:

; 2192 : 			}
; 2193 : 			raise->vars[8] = -1;

  0044a	b8 04 00 00 00	 mov	 eax, 4
  0044f	c1 e0 03	 shl	 eax, 3
  00452	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  00455	c7 44 01 10 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax+16], -1

; 2194 : 			ceilingdestination = raise->vars[7];

  0045d	b8 04 00 00 00	 mov	 eax, 4
  00462	6b c8 07	 imul	 ecx, eax, 7
  00465	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00468	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0046c	89 45 e8	 mov	 DWORD PTR _ceilingdestination$[ebp], eax

; 2195 : 			floordestination = raise->vars[6];

  0046f	b8 04 00 00 00	 mov	 eax, 4
  00474	6b c8 06	 imul	 ecx, eax, 6
  00477	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0047a	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0047e	89 45 e4	 mov	 DWORD PTR _floordestination$[ebp], eax
$LN24@T_RaiseSec:

; 2196 : 		}
; 2197 : 	}
; 2198 : 
; 2199 : 	if ((raise->sector->ceilingheight - raise->vars[7])
; 2200 : 		< (raise->vars[5] - raise->sector->ceilingheight))

  00481	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  00484	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00487	ba 04 00 00 00	 mov	 edx, 4
  0048c	6b c2 07	 imul	 eax, edx, 7
  0048f	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00492	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00495	2b 4c 02 10	 sub	 ecx, DWORD PTR [edx+eax+16]
  00499	ba 04 00 00 00	 mov	 edx, 4
  0049e	6b c2 05	 imul	 eax, edx, 5
  004a1	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  004a4	8b 52 54	 mov	 edx, DWORD PTR [edx+84]
  004a7	8b 75 08	 mov	 esi, DWORD PTR _raise$[ebp]
  004aa	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  004ae	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  004b1	3b c8		 cmp	 ecx, eax
  004b3	0f 8d e2 00 00
	00		 jge	 $LN27@T_RaiseSec

; 2201 : 	{
; 2202 : 		fixed_t origspeed = raise->vars[3];

  004b9	b8 04 00 00 00	 mov	 eax, 4
  004be	6b c8 03	 imul	 ecx, eax, 3
  004c1	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  004c4	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  004c8	89 45 dc	 mov	 DWORD PTR _origspeed$2[ebp], eax

; 2203 : 
; 2204 : 		// Slow down as you get closer to the bottom
; 2205 : 		raise->vars[3] = FixedMul(raise->vars[3],FixedDiv(raise->sector->ceilingheight - raise->vars[7], (raise->vars[5] - raise->vars[7])>>5));

  004cb	b8 04 00 00 00	 mov	 eax, 4
  004d0	6b c8 05	 imul	 ecx, eax, 5
  004d3	ba 04 00 00 00	 mov	 edx, 4
  004d8	6b c2 07	 imul	 eax, edx, 7
  004db	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  004de	8b 75 08	 mov	 esi, DWORD PTR _raise$[ebp]
  004e1	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  004e5	2b 4c 06 10	 sub	 ecx, DWORD PTR [esi+eax+16]
  004e9	c1 f9 05	 sar	 ecx, 5
  004ec	51		 push	 ecx
  004ed	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  004f0	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  004f3	b9 04 00 00 00	 mov	 ecx, 4
  004f8	6b d1 07	 imul	 edx, ecx, 7
  004fb	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  004fe	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00501	2b 44 11 10	 sub	 eax, DWORD PTR [ecx+edx+16]
  00505	50		 push	 eax
  00506	e8 00 00 00 00	 call	 _FixedDiv
  0050b	83 c4 08	 add	 esp, 8
  0050e	50		 push	 eax
  0050f	b9 04 00 00 00	 mov	 ecx, 4
  00514	6b d1 03	 imul	 edx, ecx, 3
  00517	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  0051a	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  0051e	51		 push	 ecx
  0051f	e8 00 00 00 00	 call	 _FixedMul
  00524	83 c4 08	 add	 esp, 8
  00527	ba 04 00 00 00	 mov	 edx, 4
  0052c	6b ca 03	 imul	 ecx, edx, 3
  0052f	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00532	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 2206 : 
; 2207 : 		if (raise->vars[3] <= origspeed/16)

  00536	b8 04 00 00 00	 mov	 eax, 4
  0053b	6b c8 03	 imul	 ecx, eax, 3
  0053e	8b 45 dc	 mov	 eax, DWORD PTR _origspeed$2[ebp]
  00541	99		 cdq
  00542	83 e2 0f	 and	 edx, 15			; 0000000fH
  00545	03 c2		 add	 eax, edx
  00547	c1 f8 04	 sar	 eax, 4
  0054a	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0054d	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  00551	7f 1d		 jg	 SHORT $LN29@T_RaiseSec

; 2208 : 			raise->vars[3] = origspeed/16;

  00553	8b 45 dc	 mov	 eax, DWORD PTR _origspeed$2[ebp]
  00556	99		 cdq
  00557	83 e2 0f	 and	 edx, 15			; 0000000fH
  0055a	03 c2		 add	 eax, edx
  0055c	c1 f8 04	 sar	 eax, 4
  0055f	b9 04 00 00 00	 mov	 ecx, 4
  00564	6b d1 03	 imul	 edx, ecx, 3
  00567	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  0056a	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  0056e	eb 26		 jmp	 SHORT $LN31@T_RaiseSec
$LN29@T_RaiseSec:

; 2209 : 		else if (raise->vars[3] > origspeed)

  00570	b8 04 00 00 00	 mov	 eax, 4
  00575	6b c8 03	 imul	 ecx, eax, 3
  00578	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0057b	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0057f	3b 45 dc	 cmp	 eax, DWORD PTR _origspeed$2[ebp]
  00582	7e 12		 jle	 SHORT $LN31@T_RaiseSec

; 2210 : 			raise->vars[3] = origspeed;

  00584	b8 04 00 00 00	 mov	 eax, 4
  00589	6b c8 03	 imul	 ecx, eax, 3
  0058c	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0058f	8b 45 dc	 mov	 eax, DWORD PTR _origspeed$2[ebp]
  00592	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN31@T_RaiseSec:

; 2211 : 	}

  00596	e9 dd 00 00 00	 jmp	 $LN34@T_RaiseSec
$LN27@T_RaiseSec:

; 2212 : 	else
; 2213 : 	{
; 2214 : 		fixed_t origspeed = raise->vars[3];

  0059b	b8 04 00 00 00	 mov	 eax, 4
  005a0	6b c8 03	 imul	 ecx, eax, 3
  005a3	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  005a6	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  005aa	89 45 d8	 mov	 DWORD PTR _origspeed$1[ebp], eax

; 2215 : 		// Slow down as you get closer to the top
; 2216 : 		raise->vars[3] = FixedMul(raise->vars[3],FixedDiv(raise->vars[5] - raise->sector->ceilingheight, (raise->vars[5] - raise->vars[7])>>5));

  005ad	b8 04 00 00 00	 mov	 eax, 4
  005b2	6b c8 05	 imul	 ecx, eax, 5
  005b5	ba 04 00 00 00	 mov	 edx, 4
  005ba	6b c2 07	 imul	 eax, edx, 7
  005bd	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  005c0	8b 75 08	 mov	 esi, DWORD PTR _raise$[ebp]
  005c3	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  005c7	2b 4c 06 10	 sub	 ecx, DWORD PTR [esi+eax+16]
  005cb	c1 f9 05	 sar	 ecx, 5
  005ce	51		 push	 ecx
  005cf	ba 04 00 00 00	 mov	 edx, 4
  005d4	6b c2 05	 imul	 eax, edx, 5
  005d7	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  005da	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  005dd	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  005e0	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  005e4	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  005e7	50		 push	 eax
  005e8	e8 00 00 00 00	 call	 _FixedDiv
  005ed	83 c4 08	 add	 esp, 8
  005f0	50		 push	 eax
  005f1	b9 04 00 00 00	 mov	 ecx, 4
  005f6	6b d1 03	 imul	 edx, ecx, 3
  005f9	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  005fc	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00600	51		 push	 ecx
  00601	e8 00 00 00 00	 call	 _FixedMul
  00606	83 c4 08	 add	 esp, 8
  00609	ba 04 00 00 00	 mov	 edx, 4
  0060e	6b ca 03	 imul	 ecx, edx, 3
  00611	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00614	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 2217 : 
; 2218 : 		if (raise->vars[3] <= origspeed/16)

  00618	b8 04 00 00 00	 mov	 eax, 4
  0061d	6b c8 03	 imul	 ecx, eax, 3
  00620	8b 45 d8	 mov	 eax, DWORD PTR _origspeed$1[ebp]
  00623	99		 cdq
  00624	83 e2 0f	 and	 edx, 15			; 0000000fH
  00627	03 c2		 add	 eax, edx
  00629	c1 f8 04	 sar	 eax, 4
  0062c	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0062f	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  00633	7f 1d		 jg	 SHORT $LN32@T_RaiseSec

; 2219 : 			raise->vars[3] = origspeed/16;

  00635	8b 45 d8	 mov	 eax, DWORD PTR _origspeed$1[ebp]
  00638	99		 cdq
  00639	83 e2 0f	 and	 edx, 15			; 0000000fH
  0063c	03 c2		 add	 eax, edx
  0063e	c1 f8 04	 sar	 eax, 4
  00641	b9 04 00 00 00	 mov	 ecx, 4
  00646	6b d1 03	 imul	 edx, ecx, 3
  00649	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  0064c	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  00650	eb 26		 jmp	 SHORT $LN34@T_RaiseSec
$LN32@T_RaiseSec:

; 2220 : 		else if (raise->vars[3] > origspeed)

  00652	b8 04 00 00 00	 mov	 eax, 4
  00657	6b c8 03	 imul	 ecx, eax, 3
  0065a	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  0065d	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00661	3b 45 d8	 cmp	 eax, DWORD PTR _origspeed$1[ebp]
  00664	7e 12		 jle	 SHORT $LN34@T_RaiseSec

; 2221 : 			raise->vars[3] = origspeed;

  00666	b8 04 00 00 00	 mov	 eax, 4
  0066b	6b c8 03	 imul	 ecx, eax, 3
  0066e	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00671	8b 45 d8	 mov	 eax, DWORD PTR _origspeed$1[ebp]
  00674	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN34@T_RaiseSec:

; 2222 : 	}
; 2223 : 
; 2224 : 	res = T_MovePlane

  00678	b8 04 00 00 00	 mov	 eax, 4
  0067d	c1 e0 03	 shl	 eax, 3
  00680	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  00683	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00687	52		 push	 edx
  00688	6a 01		 push	 1
  0068a	6a 00		 push	 0
  0068c	8b 45 e8	 mov	 eax, DWORD PTR _ceilingdestination$[ebp]
  0068f	50		 push	 eax
  00690	b9 04 00 00 00	 mov	 ecx, 4
  00695	6b d1 03	 imul	 edx, ecx, 3
  00698	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  0069b	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  0069f	51		 push	 ecx
  006a0	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  006a3	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  006a6	50		 push	 eax
  006a7	e8 00 00 00 00	 call	 _T_MovePlane
  006ac	83 c4 18	 add	 esp, 24			; 00000018H
  006af	89 45 e0	 mov	 DWORD PTR _res$[ebp], eax

; 2225 : 	(
; 2226 : 		raise->sector,         // sector
; 2227 : 		raise->vars[3],          // speed
; 2228 : 		ceilingdestination, // dest
; 2229 : 		0,                        // crush
; 2230 : 		1,                        // floor or ceiling (1 for ceiling)
; 2231 : 		raise->vars[8]       // direction
; 2232 : 	);
; 2233 : 
; 2234 : 	if (res == ok || res == pastdest)

  006b2	83 7d e0 00	 cmp	 DWORD PTR _res$[ebp], 0
  006b6	74 06		 je	 SHORT $LN36@T_RaiseSec
  006b8	83 7d e0 02	 cmp	 DWORD PTR _res$[ebp], 2
  006bc	75 37		 jne	 SHORT $LN35@T_RaiseSec
$LN36@T_RaiseSec:

; 2235 : 		T_MovePlane

  006be	b8 04 00 00 00	 mov	 eax, 4
  006c3	c1 e0 03	 shl	 eax, 3
  006c6	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  006c9	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  006cd	52		 push	 edx
  006ce	6a 00		 push	 0
  006d0	6a 00		 push	 0
  006d2	8b 45 e4	 mov	 eax, DWORD PTR _floordestination$[ebp]
  006d5	50		 push	 eax
  006d6	b9 04 00 00 00	 mov	 ecx, 4
  006db	6b d1 03	 imul	 edx, ecx, 3
  006de	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  006e1	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  006e5	51		 push	 ecx
  006e6	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  006e9	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  006ec	50		 push	 eax
  006ed	e8 00 00 00 00	 call	 _T_MovePlane
  006f2	83 c4 18	 add	 esp, 24			; 00000018H
$LN35@T_RaiseSec:

; 2236 : 		(
; 2237 : 			raise->sector,           // sector
; 2238 : 			raise->vars[3],            // speed
; 2239 : 			floordestination, // dest
; 2240 : 			0,                          // crush
; 2241 : 			0,                          // floor or ceiling (0 for floor)
; 2242 : 			raise->vars[8]         // direction
; 2243 : 		);
; 2244 : 
; 2245 : 	raise->sector->ceilspeed = 42;

  006f5	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  006f8	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  006fb	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 2246 : 	raise->sector->floorspeed = raise->vars[3]*raise->vars[8];

  00705	b8 04 00 00 00	 mov	 eax, 4
  0070a	6b c8 03	 imul	 ecx, eax, 3
  0070d	ba 04 00 00 00	 mov	 edx, 4
  00712	c1 e2 03	 shl	 edx, 3
  00715	8b 45 08	 mov	 eax, DWORD PTR _raise$[ebp]
  00718	8b 75 08	 mov	 esi, DWORD PTR _raise$[ebp]
  0071b	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  0071f	0f af 4c 16 10	 imul	 ecx, DWORD PTR [esi+edx+16]
  00724	8b 55 08	 mov	 edx, DWORD PTR _raise$[ebp]
  00727	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0072a	89 88 e8 00 00
	00		 mov	 DWORD PTR [eax+232], ecx

; 2247 : 
; 2248 : 	for (i = -1; (i = P_FindSectorFromTag(raise->sourceline->tag, i)) >= 0 ;)

  00730	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN8@T_RaiseSec:
  00737	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0073a	50		 push	 eax
  0073b	8b 4d 08	 mov	 ecx, DWORD PTR _raise$[ebp]
  0073e	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00741	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  00745	50		 push	 eax
  00746	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  0074b	83 c4 08	 add	 esp, 8
  0074e	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
  00751	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  00755	7c 18		 jl	 SHORT $LN9@T_RaiseSec

; 2249 : 		P_RecalcPrecipInSector(&sectors[i]);

  00757	69 45 f0 f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  0075e	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00764	50		 push	 eax
  00765	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  0076a	83 c4 04	 add	 esp, 4
  0076d	eb c8		 jmp	 SHORT $LN8@T_RaiseSec
$LN9@T_RaiseSec:

; 2250 : }

  0076f	5f		 pop	 edi
  00770	5e		 pop	 esi
  00771	5b		 pop	 ebx
  00772	8b e5		 mov	 esp, ebp
  00774	5d		 pop	 ebp
  00775	c3		 ret	 0
_T_RaiseSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_CameraScanner
_TEXT	SEGMENT
_elevator$ = 8						; size = 4
_T_CameraScanner PROC					; COMDAT

; 2253 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2254 : 	// leveltime is compared to make multiple scanners in one map function correctly.
; 2255 : 	static tic_t lastleveltime = 32000; // any number other than 0 should do here
; 2256 : 	static boolean camerascanned, camerascanned2;
; 2257 : 
; 2258 : 	if (leveltime != lastleveltime) // Back on the first camera scanner

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0000e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lastleveltime@?1??T_CameraScanner@@9@9
  00014	74 1e		 je	 SHORT $LN2@T_CameraSc

; 2259 : 	{
; 2260 : 		camerascanned = camerascanned2 = false;

  00016	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?camerascanned2@?1??T_CameraScanner@@9@9, 0
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camerascanned2@?1??T_CameraScanner@@9@9
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?camerascanned@?1??T_CameraScanner@@9@9, eax

; 2261 : 		lastleveltime = leveltime;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0002f	a3 00 00 00 00	 mov	 DWORD PTR ?lastleveltime@?1??T_CameraScanner@@9@9, eax
$LN2@T_CameraSc:

; 2262 : 	}
; 2263 : 
; 2264 : 	if (players[displayplayer].mo)

  00034	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0003e	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00045	0f 84 c4 01 00
	00		 je	 $LN9@T_CameraSc

; 2265 : 	{
; 2266 : 		if (players[displayplayer].mo->subsector->sector == elevator->actionsector)

  0004b	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00055	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0005b	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0005e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00061	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00063	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00066	0f 85 9b 00 00
	00		 jne	 $LN4@T_CameraSc

; 2267 : 		{
; 2268 : 			if (t_cam_dist == -42)

  0006c	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam_dist, -42 ; ffffffd6H
  00073	75 0a		 jne	 SHORT $LN6@T_CameraSc

; 2269 : 				t_cam_dist = cv_cam_dist.value;

  00075	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_dist+20
  0007a	a3 00 00 00 00	 mov	 DWORD PTR _t_cam_dist, eax
$LN6@T_CameraSc:

; 2270 : 			if (t_cam_height == -42)

  0007f	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam_height, -42 ; ffffffd6H
  00086	75 0a		 jne	 SHORT $LN7@T_CameraSc

; 2271 : 				t_cam_height = cv_cam_height.value;

  00088	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_height+20
  0008d	a3 00 00 00 00	 mov	 DWORD PTR _t_cam_height, eax
$LN7@T_CameraSc:

; 2272 : 			if (t_cam_rotate == -42)

  00092	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam_rotate, -42 ; ffffffd6H
  00099	75 0a		 jne	 SHORT $LN8@T_CameraSc

; 2273 : 				t_cam_rotate = cv_cam_rotate.value;

  0009b	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_rotate+20
  000a0	a3 00 00 00 00	 mov	 DWORD PTR _t_cam_rotate, eax
$LN8@T_CameraSc:

; 2274 : 			CV_SetValue(&cv_cam_height, FixedInt(elevator->sector->floorheight));

  000a5	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  000a8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 _FixedInt
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET _cv_cam_height
  000bc	e8 00 00 00 00	 call	 _CV_SetValue
  000c1	83 c4 08	 add	 esp, 8

; 2275 : 			CV_SetValue(&cv_cam_dist, FixedInt(elevator->sector->ceilingheight));

  000c4	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  000c7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ca	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 _FixedInt
  000d3	83 c4 04	 add	 esp, 4
  000d6	50		 push	 eax
  000d7	68 00 00 00 00	 push	 OFFSET _cv_cam_dist
  000dc	e8 00 00 00 00	 call	 _CV_SetValue
  000e1	83 c4 08	 add	 esp, 8

; 2276 : 			CV_SetValue(&cv_cam_rotate, elevator->distance);

  000e4	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  000e7	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000ea	51		 push	 ecx
  000eb	68 00 00 00 00	 push	 OFFSET _cv_cam_rotate
  000f0	e8 00 00 00 00	 call	 _CV_SetValue
  000f5	83 c4 08	 add	 esp, 8

; 2277 : 			camerascanned = true;

  000f8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?camerascanned@?1??T_CameraScanner@@9@9, 1

; 2278 : 		}

  00102	e9 08 01 00 00	 jmp	 $LN9@T_CameraSc
$LN4@T_CameraSc:

; 2279 : 		else if (!camerascanned)

  00107	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?camerascanned@?1??T_CameraScanner@@9@9, 0
  0010e	0f 85 fb 00 00
	00		 jne	 $LN9@T_CameraSc

; 2280 : 		{
; 2281 : 			if (t_cam_height != -42 && cv_cam_height.value != t_cam_height)

  00114	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam_height, -42 ; ffffffd6H
  0011b	74 44		 je	 SHORT $LN10@T_CameraSc
  0011d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_height+20
  00122	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _t_cam_height
  00128	74 37		 je	 SHORT $LN10@T_CameraSc

; 2282 : 				CV_Set(&cv_cam_height, va("%f", (double)FIXED_TO_FLOAT(t_cam_height)));

  0012a	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _t_cam_height
  00132	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0013a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0013e	83 ec 08	 sub	 esp, 8
  00141	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00146	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  0014b	e8 00 00 00 00	 call	 _va
  00150	83 c4 0c	 add	 esp, 12			; 0000000cH
  00153	50		 push	 eax
  00154	68 00 00 00 00	 push	 OFFSET _cv_cam_height
  00159	e8 00 00 00 00	 call	 _CV_Set
  0015e	83 c4 08	 add	 esp, 8
$LN10@T_CameraSc:

; 2283 : 			if (t_cam_dist != -42 && cv_cam_dist.value != t_cam_dist)

  00161	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam_dist, -42 ; ffffffd6H
  00168	74 44		 je	 SHORT $LN11@T_CameraSc
  0016a	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_dist+20
  0016f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _t_cam_dist
  00175	74 37		 je	 SHORT $LN11@T_CameraSc

; 2284 : 				CV_Set(&cv_cam_dist, va("%f", (double)FIXED_TO_FLOAT(t_cam_dist)));

  00177	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _t_cam_dist
  0017f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00187	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0018b	83 ec 08	 sub	 esp, 8
  0018e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  00198	e8 00 00 00 00	 call	 _va
  0019d	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a0	50		 push	 eax
  001a1	68 00 00 00 00	 push	 OFFSET _cv_cam_dist
  001a6	e8 00 00 00 00	 call	 _CV_Set
  001ab	83 c4 08	 add	 esp, 8
$LN11@T_CameraSc:

; 2285 : 			if (t_cam_rotate != -42 && cv_cam_rotate.value != t_cam_rotate)

  001ae	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam_rotate, -42 ; ffffffd6H
  001b5	74 38		 je	 SHORT $LN12@T_CameraSc
  001b7	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_rotate+20
  001bc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _t_cam_rotate
  001c2	74 2b		 je	 SHORT $LN12@T_CameraSc

; 2286 : 				CV_Set(&cv_cam_rotate, va("%f", (double)t_cam_rotate));

  001c4	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR _t_cam_rotate
  001cc	83 ec 08	 sub	 esp, 8
  001cf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  001d9	e8 00 00 00 00	 call	 _va
  001de	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e1	50		 push	 eax
  001e2	68 00 00 00 00	 push	 OFFSET _cv_cam_rotate
  001e7	e8 00 00 00 00	 call	 _CV_Set
  001ec	83 c4 08	 add	 esp, 8
$LN12@T_CameraSc:

; 2287 : 
; 2288 : 			t_cam_dist = t_cam_height = t_cam_rotate = -42;

  001ef	c7 05 00 00 00
	00 d6 ff ff ff	 mov	 DWORD PTR _t_cam_rotate, -42 ; ffffffd6H
  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _t_cam_rotate
  001fe	a3 00 00 00 00	 mov	 DWORD PTR _t_cam_height, eax
  00203	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _t_cam_height
  00209	89 0d 00 00 00
	00		 mov	 DWORD PTR _t_cam_dist, ecx
$LN9@T_CameraSc:

; 2289 : 		}
; 2290 : 	}
; 2291 : 
; 2292 : 	if (splitscreen && players[secondarydisplayplayer].mo)

  0020f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00216	0f 84 db 01 00
	00		 je	 $LN19@T_CameraSc
  0021c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00226	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0022d	0f 84 c4 01 00
	00		 je	 $LN19@T_CameraSc

; 2293 : 	{
; 2294 : 		if (players[secondarydisplayplayer].mo->subsector->sector == elevator->actionsector)

  00233	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0023d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00243	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00246	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00249	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0024b	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0024e	0f 85 9b 00 00
	00		 jne	 $LN14@T_CameraSc

; 2295 : 		{
; 2296 : 			if (t_cam2_rotate == -42)

  00254	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam2_rotate, -42 ; ffffffd6H
  0025b	75 0a		 jne	 SHORT $LN16@T_CameraSc

; 2297 : 				t_cam2_dist = cv_cam2_dist.value;

  0025d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_dist+20
  00262	a3 00 00 00 00	 mov	 DWORD PTR _t_cam2_dist, eax
$LN16@T_CameraSc:

; 2298 : 			if (t_cam2_rotate == -42)

  00267	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam2_rotate, -42 ; ffffffd6H
  0026e	75 0a		 jne	 SHORT $LN17@T_CameraSc

; 2299 : 				t_cam2_height = cv_cam2_height.value;

  00270	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_height+20
  00275	a3 00 00 00 00	 mov	 DWORD PTR _t_cam2_height, eax
$LN17@T_CameraSc:

; 2300 : 			if (t_cam2_rotate == -42)

  0027a	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam2_rotate, -42 ; ffffffd6H
  00281	75 0a		 jne	 SHORT $LN18@T_CameraSc

; 2301 : 				t_cam2_rotate = cv_cam2_rotate.value;

  00283	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_rotate+20
  00288	a3 00 00 00 00	 mov	 DWORD PTR _t_cam2_rotate, eax
$LN18@T_CameraSc:

; 2302 : 			CV_SetValue(&cv_cam2_height, FixedInt(elevator->sector->floorheight));

  0028d	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00290	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00293	8b 11		 mov	 edx, DWORD PTR [ecx]
  00295	52		 push	 edx
  00296	e8 00 00 00 00	 call	 _FixedInt
  0029b	83 c4 04	 add	 esp, 4
  0029e	50		 push	 eax
  0029f	68 00 00 00 00	 push	 OFFSET _cv_cam2_height
  002a4	e8 00 00 00 00	 call	 _CV_SetValue
  002a9	83 c4 08	 add	 esp, 8

; 2303 : 			CV_SetValue(&cv_cam2_dist, FixedInt(elevator->sector->ceilingheight));

  002ac	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  002af	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002b2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002b5	52		 push	 edx
  002b6	e8 00 00 00 00	 call	 _FixedInt
  002bb	83 c4 04	 add	 esp, 4
  002be	50		 push	 eax
  002bf	68 00 00 00 00	 push	 OFFSET _cv_cam2_dist
  002c4	e8 00 00 00 00	 call	 _CV_SetValue
  002c9	83 c4 08	 add	 esp, 8

; 2304 : 			CV_SetValue(&cv_cam2_rotate, elevator->distance);

  002cc	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  002cf	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  002d2	51		 push	 ecx
  002d3	68 00 00 00 00	 push	 OFFSET _cv_cam2_rotate
  002d8	e8 00 00 00 00	 call	 _CV_SetValue
  002dd	83 c4 08	 add	 esp, 8

; 2305 : 			camerascanned2 = true;

  002e0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?camerascanned2@?1??T_CameraScanner@@9@9, 1

; 2306 : 		}

  002ea	e9 08 01 00 00	 jmp	 $LN19@T_CameraSc
$LN14@T_CameraSc:

; 2307 : 		else if (!camerascanned2)

  002ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?camerascanned2@?1??T_CameraScanner@@9@9, 0
  002f6	0f 85 fb 00 00
	00		 jne	 $LN19@T_CameraSc

; 2308 : 		{
; 2309 : 			if (t_cam2_height != -42 && cv_cam2_height.value != t_cam2_height)

  002fc	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam2_height, -42 ; ffffffd6H
  00303	74 44		 je	 SHORT $LN20@T_CameraSc
  00305	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_height+20
  0030a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _t_cam2_height
  00310	74 37		 je	 SHORT $LN20@T_CameraSc

; 2310 : 				CV_Set(&cv_cam2_height, va("%f", (double)FIXED_TO_FLOAT(t_cam2_height)));

  00312	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _t_cam2_height
  0031a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00322	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00326	83 ec 08	 sub	 esp, 8
  00329	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  00333	e8 00 00 00 00	 call	 _va
  00338	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033b	50		 push	 eax
  0033c	68 00 00 00 00	 push	 OFFSET _cv_cam2_height
  00341	e8 00 00 00 00	 call	 _CV_Set
  00346	83 c4 08	 add	 esp, 8
$LN20@T_CameraSc:

; 2311 : 			if (t_cam2_dist != -42 && cv_cam2_dist.value != t_cam2_dist)

  00349	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam2_dist, -42 ; ffffffd6H
  00350	74 44		 je	 SHORT $LN21@T_CameraSc
  00352	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_dist+20
  00357	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _t_cam2_dist
  0035d	74 37		 je	 SHORT $LN21@T_CameraSc

; 2312 : 				CV_Set(&cv_cam2_dist, va("%f", (double)FIXED_TO_FLOAT(t_cam2_dist)));

  0035f	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _t_cam2_dist
  00367	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0036f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00373	83 ec 08	 sub	 esp, 8
  00376	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  00380	e8 00 00 00 00	 call	 _va
  00385	83 c4 0c	 add	 esp, 12			; 0000000cH
  00388	50		 push	 eax
  00389	68 00 00 00 00	 push	 OFFSET _cv_cam2_dist
  0038e	e8 00 00 00 00	 call	 _CV_Set
  00393	83 c4 08	 add	 esp, 8
$LN21@T_CameraSc:

; 2313 : 			if (t_cam2_rotate != -42 && cv_cam2_rotate.value != t_cam2_rotate)

  00396	83 3d 00 00 00
	00 d6		 cmp	 DWORD PTR _t_cam2_rotate, -42 ; ffffffd6H
  0039d	74 38		 je	 SHORT $LN22@T_CameraSc
  0039f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_rotate+20
  003a4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _t_cam2_rotate
  003aa	74 2b		 je	 SHORT $LN22@T_CameraSc

; 2314 : 				CV_Set(&cv_cam2_rotate, va("%f", (double)t_cam2_rotate));

  003ac	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR _t_cam2_rotate
  003b4	83 ec 08	 sub	 esp, 8
  003b7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003bc	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  003c1	e8 00 00 00 00	 call	 _va
  003c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c9	50		 push	 eax
  003ca	68 00 00 00 00	 push	 OFFSET _cv_cam2_rotate
  003cf	e8 00 00 00 00	 call	 _CV_Set
  003d4	83 c4 08	 add	 esp, 8
$LN22@T_CameraSc:

; 2315 : 
; 2316 : 			t_cam2_dist = t_cam2_height = t_cam2_rotate = -42;

  003d7	c7 05 00 00 00
	00 d6 ff ff ff	 mov	 DWORD PTR _t_cam2_rotate, -42 ; ffffffd6H
  003e1	a1 00 00 00 00	 mov	 eax, DWORD PTR _t_cam2_rotate
  003e6	a3 00 00 00 00	 mov	 DWORD PTR _t_cam2_height, eax
  003eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _t_cam2_height
  003f1	89 0d 00 00 00
	00		 mov	 DWORD PTR _t_cam2_dist, ecx
$LN19@T_CameraSc:

; 2317 : 		}
; 2318 : 	}
; 2319 : }

  003f7	5f		 pop	 edi
  003f8	5e		 pop	 esi
  003f9	5b		 pop	 ebx
  003fa	8b e5		 mov	 esp, ebp
  003fc	5d		 pop	 ebp
  003fd	c3		 ret	 0
_T_CameraScanner ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_EachTimeThinker
_TEXT	SEGMENT
tv290 = -360						; size = 4
_targetsecnum$1 = -292					; size = 4
_targetsec$ = -288					; size = 4
_FOFsector$ = -284					; size = 4
_affectPlayer$ = -280					; size = 4
_secnum$ = -276						; size = 4
_playersInArea$ = -272					; size = 128
_oldPlayersInArea$ = -144				; size = 128
_sec$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_eachtime$ = 8						; size = 4
_T_EachTimeThinker PROC					; COMDAT

; 1967 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1968 : 	size_t i, j;
; 1969 : 	sector_t *sec = NULL;

  00016	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _sec$[ebp], 0

; 1970 : 	INT32 oldPlayersInArea[MAXPLAYERS];
; 1971 : 	INT32 playersInArea[MAXPLAYERS];
; 1972 : 	INT32 secnum = -1;

  0001d	c7 85 ec fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _secnum$[ebp], -1

; 1973 : 	INT32 affectPlayer = 0;

  00027	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _affectPlayer$[ebp], 0

; 1974 : 	boolean FOFsector = false;

  00031	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _FOFsector$[ebp], 0

; 1975 : 	sector_t *targetsec = NULL;

  0003b	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _targetsec$[ebp], 0

; 1976 : 
; 1977 : 	for (i = 0; i < MAXPLAYERS; i++)

  00045	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004c	eb 09		 jmp	 SHORT $LN4@T_EachTime
$LN2@T_EachTime:
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00051	83 c0 01	 add	 eax, 1
  00054	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@T_EachTime:
  00057	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0005b	73 62		 jae	 SHORT $LN3@T_EachTime

; 1978 : 	{
; 1979 : 		if (i & 1)

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00060	83 e0 01	 and	 eax, 1
  00063	74 31		 je	 SHORT $LN18@T_EachTime

; 1980 : 		{
; 1981 : 			oldPlayersInArea[i] = eachtime->vars[i/2] & 65535;

  00065	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00068	d1 e8		 shr	 eax, 1
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  0006d	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  00071	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00077	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007a	89 94 85 70 ff
	ff ff		 mov	 DWORD PTR _oldPlayersInArea$[ebp+eax*4], edx

; 1982 : 			eachtime->vars[0] = 0;

  00081	b8 04 00 00 00	 mov	 eax, 4
  00086	6b c8 00	 imul	 ecx, eax, 0
  00089	8b 55 08	 mov	 edx, DWORD PTR _eachtime$[ebp]
  0008c	c7 44 0a 10 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+16], 0

; 1983 : 		}

  00094	eb 19		 jmp	 SHORT $LN19@T_EachTime
$LN18@T_EachTime:

; 1984 : 		else
; 1985 : 			oldPlayersInArea[i] = eachtime->vars[i/2] >> 16;

  00096	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00099	d1 e8		 shr	 eax, 1
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  0009e	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  000a2	c1 fa 10	 sar	 edx, 16			; 00000010H
  000a5	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	89 94 85 70 ff
	ff ff		 mov	 DWORD PTR _oldPlayersInArea$[ebp+eax*4], edx
$LN19@T_EachTime:

; 1986 : 
; 1987 : 		playersInArea[i] = 0;

  000af	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000b2	c7 84 85 f0 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _playersInArea$[ebp+eax*4], 0

; 1988 : 	}

  000bd	eb 8f		 jmp	 SHORT $LN2@T_EachTime
$LN3@T_EachTime:

; 1989 : 
; 1990 : 	while ((secnum = P_FindSectorFromLineTag(eachtime->sourceline, secnum)) >= 0)

  000bf	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _secnum$[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  000c9	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 _P_FindSectorFromLineTag
  000d2	83 c4 08	 add	 esp, 8
  000d5	89 85 ec fe ff
	ff		 mov	 DWORD PTR _secnum$[ebp], eax
  000db	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _secnum$[ebp], 0
  000e2	0f 8c 0a 03 00
	00		 jl	 $LN6@T_EachTime

; 1991 : 	{
; 1992 : 		sec = &sectors[secnum];

  000e8	69 85 ec fe ff
	ff f8 00 00 00	 imul	 eax, DWORD PTR _secnum$[ebp], 248
  000f2	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  000f8	89 45 f0	 mov	 DWORD PTR _sec$[ebp], eax

; 1993 : 
; 1994 : 		// Check the lines of this sector, to see if it is a FOF control sector.
; 1995 : 		for (i = 0; i < sec->linecount; i++)

  000fb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00102	eb 09		 jmp	 SHORT $LN9@T_EachTime
$LN7@T_EachTime:
  00104	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00107	83 c0 01	 add	 eax, 1
  0010a	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN9@T_EachTime:
  0010d	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  00110	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00113	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  00119	0f 83 d4 01 00
	00		 jae	 $LN8@T_EachTime

; 1996 : 		{
; 1997 : 			INT32 targetsecnum = -1;

  0011f	c7 85 dc fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _targetsecnum$1[ebp], -1

; 1998 : 
; 1999 : 			if (sec->lines[i]->special < 100 || sec->lines[i]->special >= 300)

  00129	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  0012c	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00132	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00135	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00138	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  0013c	83 f9 64	 cmp	 ecx, 100		; 00000064H
  0013f	7c 1b		 jl	 SHORT $LN21@T_EachTime
  00141	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  00144	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0014a	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0014d	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00150	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  00154	81 f9 2c 01 00
	00		 cmp	 ecx, 300		; 0000012cH
  0015a	7c 02		 jl	 SHORT $LN20@T_EachTime
$LN21@T_EachTime:

; 2000 : 				continue;

  0015c	eb a6		 jmp	 SHORT $LN7@T_EachTime
$LN20@T_EachTime:

; 2001 : 
; 2002 : 			FOFsector = true;

  0015e	c7 85 e4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _FOFsector$[ebp], 1
$LN10@T_EachTime:

; 2003 : 
; 2004 : 			while ((targetsecnum = P_FindSectorFromLineTag(sec->lines[i], targetsecnum)) >= 0)

  00168	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _targetsecnum$1[ebp]
  0016e	50		 push	 eax
  0016f	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  00172	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00178	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0017b	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0017e	51		 push	 ecx
  0017f	e8 00 00 00 00	 call	 _P_FindSectorFromLineTag
  00184	83 c4 08	 add	 esp, 8
  00187	89 85 dc fe ff
	ff		 mov	 DWORD PTR _targetsecnum$1[ebp], eax
  0018d	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _targetsecnum$1[ebp], 0
  00194	0f 8c 54 01 00
	00		 jl	 $LN11@T_EachTime

; 2005 : 			{
; 2006 : 				targetsec = &sectors[targetsecnum];

  0019a	69 85 dc fe ff
	ff f8 00 00 00	 imul	 eax, DWORD PTR _targetsecnum$1[ebp], 248
  001a4	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  001aa	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _targetsec$[ebp], eax

; 2007 : 
; 2008 : 				for (j = 0; j < MAXPLAYERS; j++)

  001b0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  001b7	eb 09		 jmp	 SHORT $LN14@T_EachTime
$LN12@T_EachTime:
  001b9	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  001bc	83 c0 01	 add	 eax, 1
  001bf	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$LN14@T_EachTime:
  001c2	83 7d f4 20	 cmp	 DWORD PTR _j$[ebp], 32	; 00000020H
  001c6	0f 83 1d 01 00
	00		 jae	 $LN13@T_EachTime

; 2009 : 				{
; 2010 : 					if (!playeringame[j])

  001cc	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  001cf	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  001d7	75 02		 jne	 SHORT $LN22@T_EachTime

; 2011 : 						continue;

  001d9	eb de		 jmp	 SHORT $LN12@T_EachTime
$LN22@T_EachTime:

; 2012 : 
; 2013 : 					if (!players[j].mo)

  001db	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _j$[ebp], 508
  001e2	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  001e9	75 02		 jne	 SHORT $LN23@T_EachTime

; 2014 : 						continue;

  001eb	eb cc		 jmp	 SHORT $LN12@T_EachTime
$LN23@T_EachTime:

; 2015 : 
; 2016 : 					if (players[j].mo->health <= 0)

  001ed	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _j$[ebp], 508
  001f4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  001fa	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00201	7f 02		 jg	 SHORT $LN24@T_EachTime

; 2017 : 						continue;

  00203	eb b4		 jmp	 SHORT $LN12@T_EachTime
$LN24@T_EachTime:

; 2018 : 
; 2019 : 					if ((netgame || multiplayer) && players[j].spectator)

  00205	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0020c	75 09		 jne	 SHORT $LN26@T_EachTime
  0020e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00215	74 14		 je	 SHORT $LN25@T_EachTime
$LN26@T_EachTime:
  00217	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _j$[ebp], 508
  0021e	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00225	85 c9		 test	 ecx, ecx
  00227	74 02		 je	 SHORT $LN25@T_EachTime

; 2020 : 						continue;

  00229	eb 8e		 jmp	 SHORT $LN12@T_EachTime
$LN25@T_EachTime:

; 2021 : 
; 2022 : 					if (players[j].mo->subsector->sector != targetsec)

  0022b	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _j$[ebp], 508
  00232	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00238	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0023b	8b 02		 mov	 eax, DWORD PTR [edx]
  0023d	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _targetsec$[ebp]
  00243	74 05		 je	 SHORT $LN27@T_EachTime

; 2023 : 						continue;

  00245	e9 6f ff ff ff	 jmp	 $LN12@T_EachTime
$LN27@T_EachTime:

; 2024 : 
; 2025 : 					if (players[j].mo->z > sec->ceilingheight)

  0024a	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _j$[ebp], 508
  00251	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00257	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  0025a	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0025d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00260	7e 05		 jle	 SHORT $LN28@T_EachTime

; 2026 : 						continue;

  00262	e9 52 ff ff ff	 jmp	 $LN12@T_EachTime
$LN28@T_EachTime:

; 2027 : 
; 2028 : 					if (players[j].mo->z + players[j].mo->height < sec->floorheight)

  00267	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _j$[ebp], 508
  0026e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00274	69 55 f4 fc 01
	00 00		 imul	 edx, DWORD PTR _j$[ebp], 508
  0027b	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  00281	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00284	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  00287	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  0028a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0028c	7d 05		 jge	 SHORT $LN29@T_EachTime

; 2029 : 						continue;

  0028e	e9 26 ff ff ff	 jmp	 $LN12@T_EachTime
$LN29@T_EachTime:

; 2030 : 
; 2031 : 					if (j & 1)

  00293	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00296	83 e0 01	 and	 eax, 1
  00299	74 1d		 je	 SHORT $LN30@T_EachTime

; 2032 : 						eachtime->vars[j/2] |= 1;

  0029b	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  0029e	d1 e8		 shr	 eax, 1
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  002a3	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  002a7	83 ca 01	 or	 edx, 1
  002aa	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  002ad	d1 e8		 shr	 eax, 1
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  002b2	89 54 81 10	 mov	 DWORD PTR [ecx+eax*4+16], edx
  002b6	eb 1e		 jmp	 SHORT $LN31@T_EachTime
$LN30@T_EachTime:

; 2033 : 					else
; 2034 : 						eachtime->vars[j/2] |= 1 << 16;

  002b8	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  002bb	d1 e8		 shr	 eax, 1
  002bd	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  002c0	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  002c4	81 ca 00 00 01
	00		 or	 edx, 65536		; 00010000H
  002ca	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  002cd	d1 e8		 shr	 eax, 1
  002cf	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  002d2	89 54 81 10	 mov	 DWORD PTR [ecx+eax*4+16], edx
$LN31@T_EachTime:

; 2035 : 
; 2036 : 					playersInArea[j] = 1;

  002d6	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  002d9	c7 84 85 f0 fe
	ff ff 01 00 00
	00		 mov	 DWORD PTR _playersInArea$[ebp+eax*4], 1

; 2037 : 				}

  002e4	e9 d0 fe ff ff	 jmp	 $LN12@T_EachTime
$LN13@T_EachTime:

; 2038 : 			}

  002e9	e9 7a fe ff ff	 jmp	 $LN10@T_EachTime
$LN11@T_EachTime:

; 2039 : 		}

  002ee	e9 11 fe ff ff	 jmp	 $LN7@T_EachTime
$LN8@T_EachTime:

; 2040 : 
; 2041 : 		if (!FOFsector)

  002f3	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _FOFsector$[ebp], 0
  002fa	0f 85 ed 00 00
	00		 jne	 $LN16@T_EachTime

; 2042 : 		{
; 2043 : 			for (i = 0; i < MAXPLAYERS; i++)

  00300	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00307	eb 09		 jmp	 SHORT $LN17@T_EachTime
$LN15@T_EachTime:
  00309	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0030c	83 c0 01	 add	 eax, 1
  0030f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN17@T_EachTime:
  00312	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00316	0f 83 d1 00 00
	00		 jae	 $LN16@T_EachTime

; 2044 : 			{
; 2045 : 				if (!playeringame[i])

  0031c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0031f	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00327	75 02		 jne	 SHORT $LN33@T_EachTime

; 2046 : 					continue;

  00329	eb de		 jmp	 SHORT $LN15@T_EachTime
$LN33@T_EachTime:

; 2047 : 
; 2048 : 				if (!players[i].mo)

  0032b	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00332	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00339	75 02		 jne	 SHORT $LN34@T_EachTime

; 2049 : 					continue;

  0033b	eb cc		 jmp	 SHORT $LN15@T_EachTime
$LN34@T_EachTime:

; 2050 : 
; 2051 : 				if (players[i].mo->health <= 0)

  0033d	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00344	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0034a	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00351	7f 02		 jg	 SHORT $LN35@T_EachTime

; 2052 : 					continue;

  00353	eb b4		 jmp	 SHORT $LN15@T_EachTime
$LN35@T_EachTime:

; 2053 : 
; 2054 : 				if ((netgame || multiplayer) && players[i].spectator)

  00355	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0035c	75 09		 jne	 SHORT $LN37@T_EachTime
  0035e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00365	74 14		 je	 SHORT $LN36@T_EachTime
$LN37@T_EachTime:
  00367	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0036e	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00375	85 c9		 test	 ecx, ecx
  00377	74 02		 je	 SHORT $LN36@T_EachTime

; 2055 : 					continue;

  00379	eb 8e		 jmp	 SHORT $LN15@T_EachTime
$LN36@T_EachTime:

; 2056 : 
; 2057 : 				if (players[i].mo->subsector->sector != sec)

  0037b	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00382	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00388	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0038b	8b 02		 mov	 eax, DWORD PTR [edx]
  0038d	3b 45 f0	 cmp	 eax, DWORD PTR _sec$[ebp]
  00390	74 05		 je	 SHORT $LN38@T_EachTime

; 2058 : 					continue;

  00392	e9 72 ff ff ff	 jmp	 $LN15@T_EachTime
$LN38@T_EachTime:

; 2059 : 
; 2060 : 				if (i & 1)

  00397	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0039a	83 e0 01	 and	 eax, 1
  0039d	74 1d		 je	 SHORT $LN39@T_EachTime

; 2061 : 					eachtime->vars[i/2] |= 1;

  0039f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003a2	d1 e8		 shr	 eax, 1
  003a4	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  003a7	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  003ab	83 ca 01	 or	 edx, 1
  003ae	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003b1	d1 e8		 shr	 eax, 1
  003b3	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  003b6	89 54 81 10	 mov	 DWORD PTR [ecx+eax*4+16], edx
  003ba	eb 1e		 jmp	 SHORT $LN40@T_EachTime
$LN39@T_EachTime:

; 2062 : 				else
; 2063 : 					eachtime->vars[i/2] |= 1 << 16;

  003bc	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003bf	d1 e8		 shr	 eax, 1
  003c1	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  003c4	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  003c8	81 ca 00 00 01
	00		 or	 edx, 65536		; 00010000H
  003ce	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003d1	d1 e8		 shr	 eax, 1
  003d3	8b 4d 08	 mov	 ecx, DWORD PTR _eachtime$[ebp]
  003d6	89 54 81 10	 mov	 DWORD PTR [ecx+eax*4+16], edx
$LN40@T_EachTime:

; 2064 : 
; 2065 : 				playersInArea[i] = 1;

  003da	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003dd	c7 84 85 f0 fe
	ff ff 01 00 00
	00		 mov	 DWORD PTR _playersInArea$[ebp+eax*4], 1

; 2066 : 			}

  003e8	e9 1c ff ff ff	 jmp	 $LN15@T_EachTime
$LN16@T_EachTime:

; 2067 : 		}
; 2068 : 	}

  003ed	e9 cd fc ff ff	 jmp	 $LN3@T_EachTime
$LN6@T_EachTime:

; 2069 : 
; 2070 : 	// # of players in this area has changed, so execute.
; 2071 : 	if ((affectPlayer = P_HavePlayersEnteredArea(playersInArea, oldPlayersInArea, eachtime->sourceline->flags & ML_BOUNCY)) != -1)

  003f2	8b 45 08	 mov	 eax, DWORD PTR _eachtime$[ebp]
  003f5	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  003f8	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  003fc	81 e2 00 40 00
	00		 and	 edx, 16384		; 00004000H
  00402	52		 push	 edx
  00403	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _oldPlayersInArea$[ebp]
  00409	50		 push	 eax
  0040a	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _playersInArea$[ebp]
  00410	51		 push	 ecx
  00411	e8 00 00 00 00	 call	 _P_HavePlayersEnteredArea
  00416	83 c4 0c	 add	 esp, 12			; 0000000cH
  00419	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _affectPlayer$[ebp], eax
  0041f	83 bd e8 fe ff
	ff ff		 cmp	 DWORD PTR _affectPlayer$[ebp], -1
  00426	0f 84 a5 00 00
	00		 je	 $LN41@T_EachTime

; 2072 : 	{
; 2073 : 		if (cv_debug)

  0042c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00433	74 18		 je	 SHORT $LN42@T_EachTime

; 2074 : 			CONS_Printf("Running each time executor with tag %d\n", eachtime->sourceline->tag);

  00435	8b 45 08	 mov	 eax, DWORD PTR _eachtime$[ebp]
  00438	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0043b	0f bf 51 14	 movsx	 edx, WORD PTR [ecx+20]
  0043f	52		 push	 edx
  00440	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@GBJIKHLA@Running?5each?5time?5executor?5with@
  00445	e8 00 00 00 00	 call	 _CONS_Printf
  0044a	83 c4 08	 add	 esp, 8
$LN42@T_EachTime:

; 2075 : 
; 2076 : 		// Fake-out P_LinedefExecute into thinking you are a continuous.
; 2077 : 		eachtime->sourceline->special--;

  0044d	8b 45 08	 mov	 eax, DWORD PTR _eachtime$[ebp]
  00450	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00453	66 8b 51 12	 mov	 dx, WORD PTR [ecx+18]
  00457	66 83 ea 01	 sub	 dx, 1
  0045b	8b 45 08	 mov	 eax, DWORD PTR _eachtime$[ebp]
  0045e	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00461	66 89 51 12	 mov	 WORD PTR [ecx+18], dx

; 2078 : 		P_LinedefExecute(eachtime->sourceline->tag, players[affectPlayer].mo, (FOFsector && targetsec) ? targetsec : sec);

  00465	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _FOFsector$[ebp], 0
  0046c	74 17		 je	 SHORT $LN44@T_EachTime
  0046e	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _targetsec$[ebp], 0
  00475	74 0e		 je	 SHORT $LN44@T_EachTime
  00477	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _targetsec$[ebp]
  0047d	89 85 98 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00483	eb 09		 jmp	 SHORT $LN45@T_EachTime
$LN44@T_EachTime:
  00485	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  00488	89 8d 98 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], ecx
$LN45@T_EachTime:
  0048e	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR tv290[ebp]
  00494	52		 push	 edx
  00495	69 85 e8 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _affectPlayer$[ebp], 508
  0049f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  004a5	51		 push	 ecx
  004a6	8b 55 08	 mov	 edx, DWORD PTR _eachtime$[ebp]
  004a9	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  004ac	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  004b0	51		 push	 ecx
  004b1	e8 00 00 00 00	 call	 _P_LinedefExecute
  004b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2079 : 		eachtime->sourceline->special++;

  004b9	8b 45 08	 mov	 eax, DWORD PTR _eachtime$[ebp]
  004bc	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  004bf	66 8b 51 12	 mov	 dx, WORD PTR [ecx+18]
  004c3	66 83 c2 01	 add	 dx, 1
  004c7	8b 45 08	 mov	 eax, DWORD PTR _eachtime$[ebp]
  004ca	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  004cd	66 89 51 12	 mov	 WORD PTR [ecx+18], dx
$LN41@T_EachTime:

; 2080 : 	}
; 2081 : }

  004d1	5f		 pop	 edi
  004d2	5e		 pop	 esi
  004d3	5b		 pop	 ebx
  004d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d7	33 cd		 xor	 ecx, ebp
  004d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004de	8b e5		 mov	 esp, ebp
  004e0	5d		 pop	 ebp
  004e1	c3		 ret	 0
_T_EachTimeThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_NoEnemiesSector
_TEXT	SEGMENT
_exists$ = -32						; size = 4
_thing$ = -28						; size = 4
_node$ = -24						; size = 4
_checksector$ = -20					; size = 4
_s$ = -16						; size = 4
_lowerbound$ = -12					; size = 4
_upperbound$ = -8					; size = 4
_i$ = -4						; size = 4
_nobaddies$ = 8						; size = 4
_T_NoEnemiesSector PROC					; COMDAT

; 1880 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1881 : 	size_t i;
; 1882 : 	fixed_t upperbound, lowerbound;
; 1883 : 	INT32 s;
; 1884 : 	sector_t *checksector;
; 1885 : 	msecnode_t *node;
; 1886 : 	mobj_t *thing;
; 1887 : 	boolean exists = false;

  00009	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _exists$[ebp], 0

; 1888 : 
; 1889 : 	for (i = 0; i < nobaddies->sector->linecount; i++)

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@T_NoEnemie
$LN2@T_NoEnemie:
  00019	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@T_NoEnemie:
  00022	8b 45 08	 mov	 eax, DWORD PTR _nobaddies$[ebp]
  00025	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00028	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0002b	3b 91 88 00 00
	00		 cmp	 edx, DWORD PTR [ecx+136]
  00031	0f 83 f9 00 00
	00		 jae	 $foundenemy$16

; 1890 : 	{
; 1891 : 		if (nobaddies->sector->lines[i]->special == 223)

  00037	8b 45 08	 mov	 eax, DWORD PTR _nobaddies$[ebp]
  0003a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0003d	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00043	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00046	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00049	0f bf 51 12	 movsx	 edx, WORD PTR [ecx+18]
  0004d	81 fa df 00 00
	00		 cmp	 edx, 223		; 000000dfH
  00053	0f 85 d2 00 00
	00		 jne	 $LN6@T_NoEnemie

; 1892 : 		{
; 1893 : 
; 1894 : 			upperbound = nobaddies->sector->ceilingheight;

  00059	8b 45 08	 mov	 eax, DWORD PTR _nobaddies$[ebp]
  0005c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0005f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00062	89 55 f8	 mov	 DWORD PTR _upperbound$[ebp], edx

; 1895 : 			lowerbound = nobaddies->sector->floorheight;

  00065	8b 45 08	 mov	 eax, DWORD PTR _nobaddies$[ebp]
  00068	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0006b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006d	89 55 f4	 mov	 DWORD PTR _lowerbound$[ebp], edx

; 1896 : 
; 1897 : 			for (s = -1; (s = P_FindSectorFromLineTag(nobaddies->sector->lines[i], s)) >= 0 ;)

  00070	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _s$[ebp], -1
$LN5@T_NoEnemie:
  00077	8b 45 f0	 mov	 eax, DWORD PTR _s$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _nobaddies$[ebp]
  0007e	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00081	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008a	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 _P_FindSectorFromLineTag
  00093	83 c4 08	 add	 esp, 8
  00096	89 45 f0	 mov	 DWORD PTR _s$[ebp], eax
  00099	83 7d f0 00	 cmp	 DWORD PTR _s$[ebp], 0
  0009d	0f 8c 88 00 00
	00		 jl	 $LN6@T_NoEnemie

; 1898 : 			{
; 1899 : 				checksector = &sectors[s];

  000a3	69 45 f0 f8 00
	00 00		 imul	 eax, DWORD PTR _s$[ebp], 248
  000aa	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  000b0	89 45 ec	 mov	 DWORD PTR _checksector$[ebp], eax

; 1900 : 
; 1901 : 				node = checksector->touching_thinglist; // things touching this sector

  000b3	8b 45 ec	 mov	 eax, DWORD PTR _checksector$[ebp]
  000b6	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000bc	89 4d e8	 mov	 DWORD PTR _node$[ebp], ecx
$LN8@T_NoEnemie:

; 1902 : 				while (node)

  000bf	83 7d e8 00	 cmp	 DWORD PTR _node$[ebp], 0
  000c3	74 61		 je	 SHORT $LN9@T_NoEnemie

; 1903 : 				{
; 1904 : 					thing = node->m_thing;

  000c5	8b 45 e8	 mov	 eax, DWORD PTR _node$[ebp]
  000c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cb	89 4d e4	 mov	 DWORD PTR _thing$[ebp], ecx

; 1905 : 
; 1906 : 					if (((thing->flags & MF_ENEMY) || (thing->flags & MF_BOSS)) && thing->health > 0
; 1907 : 						&& thing->z < upperbound && thing->z+thing->height > lowerbound)

  000ce	8b 45 e4	 mov	 eax, DWORD PTR _thing$[ebp]
  000d1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000d4	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  000da	75 0e		 jne	 SHORT $LN12@T_NoEnemie
  000dc	8b 45 e4	 mov	 eax, DWORD PTR _thing$[ebp]
  000df	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000e2	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  000e8	74 31		 je	 SHORT $LN11@T_NoEnemie
$LN12@T_NoEnemie:
  000ea	8b 45 e4	 mov	 eax, DWORD PTR _thing$[ebp]
  000ed	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  000f4	7e 25		 jle	 SHORT $LN11@T_NoEnemie
  000f6	8b 45 e4	 mov	 eax, DWORD PTR _thing$[ebp]
  000f9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000fc	3b 4d f8	 cmp	 ecx, DWORD PTR _upperbound$[ebp]
  000ff	7d 1a		 jge	 SHORT $LN11@T_NoEnemie
  00101	8b 45 e4	 mov	 eax, DWORD PTR _thing$[ebp]
  00104	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00107	8b 55 e4	 mov	 edx, DWORD PTR _thing$[ebp]
  0010a	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0010d	3b 4d f4	 cmp	 ecx, DWORD PTR _lowerbound$[ebp]
  00110	7e 09		 jle	 SHORT $LN11@T_NoEnemie

; 1908 : 					{
; 1909 : 						exists = true;

  00112	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _exists$[ebp], 1

; 1910 : 						goto foundenemy;

  00119	eb 15		 jmp	 SHORT $foundenemy$16
$LN11@T_NoEnemie:

; 1911 : 					}
; 1912 : 
; 1913 : 					node = node->m_snext;

  0011b	8b 45 e8	 mov	 eax, DWORD PTR _node$[ebp]
  0011e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00121	89 4d e8	 mov	 DWORD PTR _node$[ebp], ecx

; 1914 : 				}

  00124	eb 99		 jmp	 SHORT $LN8@T_NoEnemie
$LN9@T_NoEnemie:

; 1915 : 			}

  00126	e9 4c ff ff ff	 jmp	 $LN5@T_NoEnemie
$LN6@T_NoEnemie:

; 1916 : 		}
; 1917 : 	}

  0012b	e9 e9 fe ff ff	 jmp	 $LN2@T_NoEnemie
$foundenemy$16:

; 1918 : foundenemy:
; 1919 : 	if (exists)

  00130	83 7d e0 00	 cmp	 DWORD PTR _exists$[ebp], 0
  00134	74 02		 je	 SHORT $LN13@T_NoEnemie

; 1920 : 		return;

  00136	eb 58		 jmp	 SHORT $LN1@T_NoEnemie
$LN13@T_NoEnemie:

; 1921 : 
; 1922 : 	s = P_AproxDistance(nobaddies->sourceline->dx, nobaddies->sourceline->dy)>>FRACBITS;

  00138	8b 45 08	 mov	 eax, DWORD PTR _nobaddies$[ebp]
  0013b	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0013e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00141	52		 push	 edx
  00142	8b 45 08	 mov	 eax, DWORD PTR _nobaddies$[ebp]
  00145	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00148	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 _P_AproxDistance
  00151	83 c4 08	 add	 esp, 8
  00154	c1 f8 10	 sar	 eax, 16			; 00000010H
  00157	89 45 f0	 mov	 DWORD PTR _s$[ebp], eax

; 1923 : 
; 1924 : 	if (cv_debug)

  0015a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00161	74 11		 je	 SHORT $LN14@T_NoEnemie

; 1925 : 		CONS_Printf("Running no-more-enemies exec with tag of %d\n", s);

  00163	8b 45 f0	 mov	 eax, DWORD PTR _s$[ebp]
  00166	50		 push	 eax
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@JLNIBKPD@Running?5no?9more?9enemies?5exec?5wi@
  0016c	e8 00 00 00 00	 call	 _CONS_Printf
  00171	83 c4 08	 add	 esp, 8
$LN14@T_NoEnemie:

; 1926 : 
; 1927 : 	// Otherwise, run the linedef exec and terminate this thinker
; 1928 : 	P_LinedefExecute(s, NULL, NULL);

  00174	6a 00		 push	 0
  00176	6a 00		 push	 0
  00178	8b 45 f0	 mov	 eax, DWORD PTR _s$[ebp]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _P_LinedefExecute
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1929 : 	P_RemoveThinker(&nobaddies->thinker);

  00184	8b 45 08	 mov	 eax, DWORD PTR _nobaddies$[ebp]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 _P_RemoveThinker
  0018d	83 c4 04	 add	 esp, 4
$LN1@T_NoEnemie:

; 1930 : }

  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	5b		 pop	 ebx
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c3		 ret	 0
_T_NoEnemiesSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_ThwompSector
_TEXT	SEGMENT
tv70 = -104						; size = 4
_mo$1 = -36						; size = 4
_th$2 = -32						; size = 4
_mp$3 = -28						; size = 4
_res$4 = -24						; size = 4
_res$5 = -20						; size = 4
_secnum$ = -16						; size = 4
_actionsector$ = -12					; size = 4
_thwompy$ = -8						; size = 4
_thwompx$ = -4						; size = 4
_thwomp$ = 8						; size = 4
_T_ThwompSector PROC					; COMDAT

; 1718 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1719 : #define speed vars[1]
; 1720 : #define direction vars[2]
; 1721 : #define distance vars[3]
; 1722 : #define floorwasheight vars[4]
; 1723 : #define ceilingwasheight vars[5]
; 1724 : 	fixed_t thwompx, thwompy;
; 1725 : 	sector_t *actionsector;
; 1726 : 	INT32 secnum;
; 1727 : 
; 1728 : 	// If you just crashed down, wait a second before coming back up.
; 1729 : 	if (--thwomp->distance > 0)

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  00014	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00018	83 e8 01	 sub	 eax, 1
  0001b	89 45 98	 mov	 DWORD PTR tv70[ebp], eax
  0001e	b9 04 00 00 00	 mov	 ecx, 4
  00023	6b d1 03	 imul	 edx, ecx, 3
  00026	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00029	8b 4d 98	 mov	 ecx, DWORD PTR tv70[ebp]
  0002c	89 4c 10 10	 mov	 DWORD PTR [eax+edx+16], ecx
  00030	83 7d 98 00	 cmp	 DWORD PTR tv70[ebp], 0
  00034	7e 45		 jle	 SHORT $LN5@T_ThwompSe

; 1730 : 	{
; 1731 : 		sides[thwomp->sourceline->sidenum[0]].midtexture = sides[thwomp->sourceline->sidenum[0]].bottomtexture;

  00036	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00039	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0003c	ba 02 00 00 00	 mov	 edx, 2
  00041	6b c2 00	 imul	 eax, edx, 0
  00044	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  00049	6b d1 1c	 imul	 edx, ecx, 28
  0004c	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  0004f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00052	b8 02 00 00 00	 mov	 eax, 2
  00057	6b c0 00	 imul	 eax, eax, 0
  0005a	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  0005f	6b c1 1c	 imul	 eax, ecx, 28
  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  00068	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _sides
  0006e	8b 54 16 0c	 mov	 edx, DWORD PTR [esi+edx+12]
  00072	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 1732 : 		return;

  00076	e9 14 05 00 00	 jmp	 $LN1@T_ThwompSe
$LN5@T_ThwompSe:

; 1733 : 	}
; 1734 : 
; 1735 : 	// Just find the first sector with the tag.
; 1736 : 	// Doesn't work with multiple sectors that have different floor/ceiling heights.
; 1737 : 	secnum = P_FindSectorFromTag((INT16)thwomp->vars[0], -1);

  0007b	6a ff		 push	 -1
  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	6b c8 00	 imul	 ecx, eax, 0
  00085	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  00088	0f b7 44 0a 10	 movzx	 eax, WORD PTR [edx+ecx+16]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00093	83 c4 08	 add	 esp, 8
  00096	89 45 f0	 mov	 DWORD PTR _secnum$[ebp], eax

; 1738 : 
; 1739 : 	if (secnum > 0)

  00099	83 7d f0 00	 cmp	 DWORD PTR _secnum$[ebp], 0
  0009d	7e 12		 jle	 SHORT $LN6@T_ThwompSe

; 1740 : 		actionsector = &sectors[secnum];

  0009f	69 45 f0 f8 00
	00 00		 imul	 eax, DWORD PTR _secnum$[ebp], 248
  000a6	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  000ac	89 45 f4	 mov	 DWORD PTR _actionsector$[ebp], eax
  000af	eb 05		 jmp	 SHORT $LN7@T_ThwompSe
$LN6@T_ThwompSe:

; 1741 : 	else
; 1742 : 		return; // Bad bad bad!

  000b1	e9 d9 04 00 00	 jmp	 $LN1@T_ThwompSe
$LN7@T_ThwompSe:

; 1743 : 
; 1744 : 	thwompx = actionsector->soundorg.x;

  000b6	8b 45 f4	 mov	 eax, DWORD PTR _actionsector$[ebp]
  000b9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000bc	89 4d fc	 mov	 DWORD PTR _thwompx$[ebp], ecx

; 1745 : 	thwompy = actionsector->soundorg.y;

  000bf	8b 45 f4	 mov	 eax, DWORD PTR _actionsector$[ebp]
  000c2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000c5	89 4d f8	 mov	 DWORD PTR _thwompy$[ebp], ecx

; 1746 : 
; 1747 : 	if (thwomp->direction > 0) // Moving back up..

  000c8	b8 04 00 00 00	 mov	 eax, 4
  000cd	d1 e0		 shl	 eax, 1
  000cf	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  000d2	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  000d7	0f 8e 79 01 00
	00		 jle	 $LN8@T_ThwompSe

; 1748 : 	{
; 1749 : 		result_e res = 0;

  000dd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _res$5[ebp], 0

; 1750 : 
; 1751 : 		// Set the texture from the lower one (normal)
; 1752 : 		sides[thwomp->sourceline->sidenum[0]].midtexture = sides[thwomp->sourceline->sidenum[0]].bottomtexture;

  000e4	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  000e7	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  000ea	ba 02 00 00 00	 mov	 edx, 2
  000ef	6b c2 00	 imul	 eax, edx, 0
  000f2	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  000f7	6b d1 1c	 imul	 edx, ecx, 28
  000fa	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  000fd	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00100	b8 02 00 00 00	 mov	 eax, 2
  00105	6b c0 00	 imul	 eax, eax, 0
  00108	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  0010d	6b c1 1c	 imul	 eax, ecx, 28
  00110	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  00116	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _sides
  0011c	8b 54 16 0c	 mov	 edx, DWORD PTR [esi+edx+12]
  00120	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 1753 : 		/// \note this should only have to be done once, but is already done repeatedly, above
; 1754 : 
; 1755 : 		if (thwomp->sourceline->flags & ML_EFFECT5)

  00124	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00127	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0012a	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0012e	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00134	74 23		 je	 SHORT $LN10@T_ThwompSe

; 1756 : 			thwomp->speed = (thwomp->sourceline->dx/8)/NEWTICRATERATIO;

  00136	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00139	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0013c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0013f	99		 cdq
  00140	83 e2 07	 and	 edx, 7
  00143	03 c2		 add	 eax, edx
  00145	c1 f8 03	 sar	 eax, 3
  00148	ba 04 00 00 00	 mov	 edx, 4
  0014d	c1 e2 00	 shl	 edx, 0
  00150	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00153	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  00157	eb 13		 jmp	 SHORT $LN11@T_ThwompSe
$LN10@T_ThwompSe:

; 1757 : 		else
; 1758 : 			thwomp->speed = 2*FRACUNIT/NEWTICRATERATIO;

  00159	b8 04 00 00 00	 mov	 eax, 4
  0015e	c1 e0 00	 shl	 eax, 0
  00161	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00164	c7 44 01 10 00
	00 02 00	 mov	 DWORD PTR [ecx+eax+16], 131072 ; 00020000H
$LN11@T_ThwompSe:

; 1759 : 
; 1760 : 		res = T_MovePlane

  0016c	b8 04 00 00 00	 mov	 eax, 4
  00171	d1 e0		 shl	 eax, 1
  00173	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00176	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0017a	52		 push	 edx
  0017b	6a 00		 push	 0
  0017d	6a 00		 push	 0
  0017f	b8 04 00 00 00	 mov	 eax, 4
  00184	c1 e0 02	 shl	 eax, 2
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  0018a	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0018e	52		 push	 edx
  0018f	b8 04 00 00 00	 mov	 eax, 4
  00194	c1 e0 00	 shl	 eax, 0
  00197	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  0019a	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0019e	52		 push	 edx
  0019f	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  001a2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001a5	51		 push	 ecx
  001a6	e8 00 00 00 00	 call	 _T_MovePlane
  001ab	83 c4 18	 add	 esp, 24			; 00000018H
  001ae	89 45 ec	 mov	 DWORD PTR _res$5[ebp], eax

; 1761 : 		(
; 1762 : 			thwomp->sector,         // sector
; 1763 : 			thwomp->speed,          // speed
; 1764 : 			thwomp->floorwasheight, // dest
; 1765 : 			0,                      // crush
; 1766 : 			0,                      // floor or ceiling (0 for floor)
; 1767 : 			thwomp->direction       // direction
; 1768 : 		);
; 1769 : 
; 1770 : 		if (res == ok || res == pastdest)

  001b1	83 7d ec 00	 cmp	 DWORD PTR _res$5[ebp], 0
  001b5	74 06		 je	 SHORT $LN13@T_ThwompSe
  001b7	83 7d ec 02	 cmp	 DWORD PTR _res$5[ebp], 2
  001bb	75 42		 jne	 SHORT $LN12@T_ThwompSe
$LN13@T_ThwompSe:

; 1771 : 			T_MovePlane

  001bd	b8 04 00 00 00	 mov	 eax, 4
  001c2	d1 e0		 shl	 eax, 1
  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  001c7	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  001cb	52		 push	 edx
  001cc	6a 01		 push	 1
  001ce	6a 00		 push	 0
  001d0	b8 04 00 00 00	 mov	 eax, 4
  001d5	6b c8 05	 imul	 ecx, eax, 5
  001d8	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  001db	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  001df	50		 push	 eax
  001e0	b9 04 00 00 00	 mov	 ecx, 4
  001e5	c1 e1 00	 shl	 ecx, 0
  001e8	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  001eb	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  001ef	50		 push	 eax
  001f0	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  001f3	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  001f6	52		 push	 edx
  001f7	e8 00 00 00 00	 call	 _T_MovePlane
  001fc	83 c4 18	 add	 esp, 24			; 00000018H
$LN12@T_ThwompSe:

; 1772 : 			(
; 1773 : 				thwomp->sector,           // sector
; 1774 : 				thwomp->speed,            // speed
; 1775 : 				thwomp->ceilingwasheight, // dest
; 1776 : 				0,                        // crush
; 1777 : 				1,                        // floor or ceiling (1 for ceiling)
; 1778 : 				thwomp->direction         // direction
; 1779 : 			);
; 1780 : 
; 1781 : 		if (res == pastdest)

  001ff	83 7d ec 02	 cmp	 DWORD PTR _res$5[ebp], 2
  00203	75 12		 jne	 SHORT $LN14@T_ThwompSe

; 1782 : 			thwomp->direction = 0; // stop moving

  00205	b8 04 00 00 00	 mov	 eax, 4
  0020a	d1 e0		 shl	 eax, 1
  0020c	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  0020f	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0
$LN14@T_ThwompSe:

; 1783 : 
; 1784 : 		thwomp->sector->ceilspeed = 42;

  00217	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  0021a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0021d	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 1785 : 		thwomp->sector->floorspeed = thwomp->speed*thwomp->direction;

  00227	b8 04 00 00 00	 mov	 eax, 4
  0022c	c1 e0 00	 shl	 eax, 0
  0022f	b9 04 00 00 00	 mov	 ecx, 4
  00234	d1 e1		 shl	 ecx, 1
  00236	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  00239	8b 75 08	 mov	 esi, DWORD PTR _thwomp$[ebp]
  0023c	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  00240	0f af 44 0e 10	 imul	 eax, DWORD PTR [esi+ecx+16]
  00245	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00248	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0024b	89 82 e8 00 00
	00		 mov	 DWORD PTR [edx+232], eax

; 1786 : 	}

  00251	e9 2d 03 00 00	 jmp	 $LN16@T_ThwompSe
$LN8@T_ThwompSe:

; 1787 : 	else if (thwomp->direction < 0) // Crashing down!

  00256	b8 04 00 00 00	 mov	 eax, 4
  0025b	d1 e0		 shl	 eax, 1
  0025d	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00260	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  00265	0f 8d 66 02 00
	00		 jge	 $LN15@T_ThwompSe

; 1788 : 	{
; 1789 : 		result_e res = 0;

  0026b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _res$4[ebp], 0

; 1790 : 
; 1791 : 		// Set the texture from the upper one (angry)
; 1792 : 		sides[thwomp->sourceline->sidenum[0]].midtexture = sides[thwomp->sourceline->sidenum[0]].toptexture;

  00272	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00275	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00278	ba 02 00 00 00	 mov	 edx, 2
  0027d	6b c2 00	 imul	 eax, edx, 0
  00280	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  00285	6b d1 1c	 imul	 edx, ecx, 28
  00288	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  0028b	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0028e	b8 02 00 00 00	 mov	 eax, 2
  00293	6b c0 00	 imul	 eax, eax, 0
  00296	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  0029b	6b c1 1c	 imul	 eax, ecx, 28
  0029e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  002a4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _sides
  002aa	8b 54 16 08	 mov	 edx, DWORD PTR [esi+edx+8]
  002ae	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 1793 : 
; 1794 : 		if (thwomp->sourceline->flags & ML_EFFECT5)

  002b2	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  002b5	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  002b8	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  002bc	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  002c2	74 23		 je	 SHORT $LN17@T_ThwompSe

; 1795 : 			thwomp->speed = (thwomp->sourceline->dy/8)/NEWTICRATERATIO;

  002c4	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  002c7	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  002ca	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  002cd	99		 cdq
  002ce	83 e2 07	 and	 edx, 7
  002d1	03 c2		 add	 eax, edx
  002d3	c1 f8 03	 sar	 eax, 3
  002d6	ba 04 00 00 00	 mov	 edx, 4
  002db	c1 e2 00	 shl	 edx, 0
  002de	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  002e1	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  002e5	eb 13		 jmp	 SHORT $LN18@T_ThwompSe
$LN17@T_ThwompSe:

; 1796 : 		else
; 1797 : 			thwomp->speed = 10*FRACUNIT/NEWTICRATERATIO;

  002e7	b8 04 00 00 00	 mov	 eax, 4
  002ec	c1 e0 00	 shl	 eax, 0
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  002f2	c7 44 01 10 00
	00 0a 00	 mov	 DWORD PTR [ecx+eax+16], 655360 ; 000a0000H
$LN18@T_ThwompSe:

; 1798 : 
; 1799 : 		res = T_MovePlane

  002fa	b8 04 00 00 00	 mov	 eax, 4
  002ff	d1 e0		 shl	 eax, 1
  00301	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00304	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00308	52		 push	 edx
  00309	6a 00		 push	 0
  0030b	6a 00		 push	 0
  0030d	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00310	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00313	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  00316	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00319	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0031c	2b 08		 sub	 ecx, DWORD PTR [eax]
  0031e	51		 push	 ecx
  0031f	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  00322	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00325	8b 08		 mov	 ecx, DWORD PTR [eax]
  00327	51		 push	 ecx
  00328	8b 55 f8	 mov	 edx, DWORD PTR _thwompy$[ebp]
  0032b	52		 push	 edx
  0032c	8b 45 fc	 mov	 eax, DWORD PTR _thwompx$[ebp]
  0032f	50		 push	 eax
  00330	e8 00 00 00 00	 call	 _P_FloorzAtPos
  00335	83 c4 10	 add	 esp, 16			; 00000010H
  00338	50		 push	 eax
  00339	b9 04 00 00 00	 mov	 ecx, 4
  0033e	c1 e1 00	 shl	 ecx, 0
  00341	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  00344	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00348	50		 push	 eax
  00349	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  0034c	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 _T_MovePlane
  00355	83 c4 18	 add	 esp, 24			; 00000018H
  00358	89 45 e8	 mov	 DWORD PTR _res$4[ebp], eax

; 1800 : 		(
; 1801 : 			thwomp->sector,   // sector
; 1802 : 			thwomp->speed,    // speed
; 1803 : 			P_FloorzAtPos(thwompx, thwompy, thwomp->sector->floorheight,
; 1804 : 				thwomp->sector->ceilingheight - thwomp->sector->floorheight), // dest
; 1805 : 			0,                  // crush
; 1806 : 			0,                  // floor or ceiling (0 for floor)
; 1807 : 			thwomp->direction // direction
; 1808 : 		);
; 1809 : 
; 1810 : 		if (res == ok || res == pastdest)

  0035b	83 7d e8 00	 cmp	 DWORD PTR _res$4[ebp], 0
  0035f	74 0a		 je	 SHORT $LN20@T_ThwompSe
  00361	83 7d e8 02	 cmp	 DWORD PTR _res$4[ebp], 2
  00365	0f 85 9c 00 00
	00		 jne	 $LN19@T_ThwompSe
$LN20@T_ThwompSe:

; 1811 : 			T_MovePlane

  0036b	b8 04 00 00 00	 mov	 eax, 4
  00370	d1 e0		 shl	 eax, 1
  00372	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00375	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00379	52		 push	 edx
  0037a	6a 01		 push	 1
  0037c	6a 00		 push	 0
  0037e	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00381	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00384	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  00387	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0038a	ba 04 00 00 00	 mov	 edx, 4
  0038f	c1 e2 00	 shl	 edx, 0
  00392	8b 00		 mov	 eax, DWORD PTR [eax]
  00394	8b 75 08	 mov	 esi, DWORD PTR _thwomp$[ebp]
  00397	03 44 16 10	 add	 eax, DWORD PTR [esi+edx+16]
  0039b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0039e	2b c8		 sub	 ecx, eax
  003a0	51		 push	 ecx
  003a1	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  003a4	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  003a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a9	51		 push	 ecx
  003aa	8b 55 f8	 mov	 edx, DWORD PTR _thwompy$[ebp]
  003ad	52		 push	 edx
  003ae	8b 45 fc	 mov	 eax, DWORD PTR _thwompx$[ebp]
  003b1	50		 push	 eax
  003b2	e8 00 00 00 00	 call	 _P_FloorzAtPos
  003b7	83 c4 10	 add	 esp, 16			; 00000010H
  003ba	8b c8		 mov	 ecx, eax
  003bc	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  003bf	8b 72 54	 mov	 esi, DWORD PTR [edx+84]
  003c2	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  003c5	8b 78 54	 mov	 edi, DWORD PTR [eax+84]
  003c8	ba 04 00 00 00	 mov	 edx, 4
  003cd	c1 e2 00	 shl	 edx, 0
  003d0	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  003d3	8b 44 10 10	 mov	 eax, DWORD PTR [eax+edx+16]
  003d7	99		 cdq
  003d8	2b c2		 sub	 eax, edx
  003da	d1 f8		 sar	 eax, 1
  003dc	8b 17		 mov	 edx, DWORD PTR [edi]
  003de	03 d0		 add	 edx, eax
  003e0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  003e3	2b c2		 sub	 eax, edx
  003e5	03 c8		 add	 ecx, eax
  003e7	51		 push	 ecx
  003e8	b9 04 00 00 00	 mov	 ecx, 4
  003ed	c1 e1 00	 shl	 ecx, 0
  003f0	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  003f3	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  003f7	50		 push	 eax
  003f8	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  003fb	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  003fe	52		 push	 edx
  003ff	e8 00 00 00 00	 call	 _T_MovePlane
  00404	83 c4 18	 add	 esp, 24			; 00000018H
$LN19@T_ThwompSe:

; 1812 : 			(
; 1813 : 				thwomp->sector,   // sector
; 1814 : 				thwomp->speed,    // speed
; 1815 : 				P_FloorzAtPos(thwompx, thwompy, thwomp->sector->floorheight,
; 1816 : 					thwomp->sector->ceilingheight
; 1817 : 					- (thwomp->sector->floorheight + thwomp->speed))
; 1818 : 					+ (thwomp->sector->ceilingheight
; 1819 : 					- (thwomp->sector->floorheight + thwomp->speed/2)), // dest
; 1820 : 				0,                  // crush
; 1821 : 				1,                  // floor or ceiling (1 for ceiling)
; 1822 : 				thwomp->direction // direction
; 1823 : 			);
; 1824 : 
; 1825 : 		if (res == pastdest)

  00407	83 7d e8 02	 cmp	 DWORD PTR _res$4[ebp], 2
  0040b	0f 85 81 00 00
	00		 jne	 $LN21@T_ThwompSe

; 1826 : 		{
; 1827 : 			mobj_t *mp = (void *)&actionsector->soundorg;

  00411	8b 45 f4	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00414	83 c0 20	 add	 eax, 32			; 00000020H
  00417	89 45 e4	 mov	 DWORD PTR _mp$3[ebp], eax

; 1828 : 
; 1829 : 			if (thwomp->sourceline->flags & ML_EFFECT4)

  0041a	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  0041d	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00420	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00424	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  0042a	74 30		 je	 SHORT $LN22@T_ThwompSe

; 1830 : 				S_StartSound(mp, sides[thwomp->sourceline->sidenum[0]].textureoffset>>FRACBITS);

  0042c	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  0042f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00432	ba 02 00 00 00	 mov	 edx, 2
  00437	6b c2 00	 imul	 eax, edx, 0
  0043a	0f b7 4c 01 16	 movzx	 ecx, WORD PTR [ecx+eax+22]
  0043f	6b d1 1c	 imul	 edx, ecx, 28
  00442	a1 00 00 00 00	 mov	 eax, DWORD PTR _sides
  00447	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0044a	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0044d	51		 push	 ecx
  0044e	8b 55 e4	 mov	 edx, DWORD PTR _mp$3[ebp]
  00451	52		 push	 edx
  00452	e8 00 00 00 00	 call	 _S_StartSound
  00457	83 c4 08	 add	 esp, 8
  0045a	eb 11		 jmp	 SHORT $LN23@T_ThwompSe
$LN22@T_ThwompSe:

; 1831 : 			else
; 1832 : 				S_StartSound(mp, sfx_thwomp);

  0045c	68 e5 00 00 00	 push	 229			; 000000e5H
  00461	8b 45 e4	 mov	 eax, DWORD PTR _mp$3[ebp]
  00464	50		 push	 eax
  00465	e8 00 00 00 00	 call	 _S_StartSound
  0046a	83 c4 08	 add	 esp, 8
$LN23@T_ThwompSe:

; 1833 : 
; 1834 : 			thwomp->direction = 1; // start heading back up

  0046d	b8 04 00 00 00	 mov	 eax, 4
  00472	d1 e0		 shl	 eax, 1
  00474	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00477	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 1835 : 			thwomp->distance = TICRATE; // but only after a small delay

  0047f	b8 04 00 00 00	 mov	 eax, 4
  00484	6b c8 03	 imul	 ecx, eax, 3
  00487	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  0048a	c7 44 0a 10 23
	00 00 00	 mov	 DWORD PTR [edx+ecx+16], 35 ; 00000023H
$LN21@T_ThwompSe:

; 1836 : 		}
; 1837 : 
; 1838 : 		thwomp->sector->ceilspeed = 42;

  00492	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00495	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00498	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 1839 : 		thwomp->sector->floorspeed = thwomp->speed*thwomp->direction;

  004a2	b8 04 00 00 00	 mov	 eax, 4
  004a7	c1 e0 00	 shl	 eax, 0
  004aa	b9 04 00 00 00	 mov	 ecx, 4
  004af	d1 e1		 shl	 ecx, 1
  004b1	8b 55 08	 mov	 edx, DWORD PTR _thwomp$[ebp]
  004b4	8b 75 08	 mov	 esi, DWORD PTR _thwomp$[ebp]
  004b7	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  004bb	0f af 44 0e 10	 imul	 eax, DWORD PTR [esi+ecx+16]
  004c0	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  004c3	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  004c6	89 82 e8 00 00
	00		 mov	 DWORD PTR [edx+232], eax

; 1840 : 	}

  004cc	e9 b2 00 00 00	 jmp	 $LN16@T_ThwompSe
$LN15@T_ThwompSe:

; 1841 : 	else // Not going anywhere, so look for players.
; 1842 : 	{
; 1843 : 		thinker_t *th;
; 1844 : 		mobj_t *mo;
; 1845 : 
; 1846 : 		// scan the thinkers to find players!
; 1847 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  004d1	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  004d6	89 45 e0	 mov	 DWORD PTR _th$2[ebp], eax
  004d9	eb 09		 jmp	 SHORT $LN4@T_ThwompSe
$LN2@T_ThwompSe:
  004db	8b 45 e0	 mov	 eax, DWORD PTR _th$2[ebp]
  004de	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004e1	89 4d e0	 mov	 DWORD PTR _th$2[ebp], ecx
$LN4@T_ThwompSe:
  004e4	81 7d e0 00 00
	00 00		 cmp	 DWORD PTR _th$2[ebp], OFFSET _thinkercap
  004eb	74 76		 je	 SHORT $LN3@T_ThwompSe

; 1848 : 		{
; 1849 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  004ed	8b 45 e0	 mov	 eax, DWORD PTR _th$2[ebp]
  004f0	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  004f7	74 02		 je	 SHORT $LN24@T_ThwompSe

; 1850 : 				continue;

  004f9	eb e0		 jmp	 SHORT $LN2@T_ThwompSe
$LN24@T_ThwompSe:

; 1851 : 
; 1852 : 			mo = (mobj_t *)th;

  004fb	8b 45 e0	 mov	 eax, DWORD PTR _th$2[ebp]
  004fe	89 45 dc	 mov	 DWORD PTR _mo$1[ebp], eax

; 1853 : 			if (mo->type == MT_PLAYER && mo->health && mo->z <= thwomp->sector->ceilingheight
; 1854 : 				&& P_AproxDistance(thwompx - mo->x, thwompy - mo->y) <= 96*FRACUNIT)

  00501	8b 45 dc	 mov	 eax, DWORD PTR _mo$1[ebp]
  00504	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00508	75 54		 jne	 SHORT $LN25@T_ThwompSe
  0050a	8b 45 dc	 mov	 eax, DWORD PTR _mo$1[ebp]
  0050d	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00514	74 48		 je	 SHORT $LN25@T_ThwompSe
  00516	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00519	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0051c	8b 55 dc	 mov	 edx, DWORD PTR _mo$1[ebp]
  0051f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00522	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00525	7f 37		 jg	 SHORT $LN25@T_ThwompSe
  00527	8b 45 dc	 mov	 eax, DWORD PTR _mo$1[ebp]
  0052a	8b 4d f8	 mov	 ecx, DWORD PTR _thwompy$[ebp]
  0052d	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00530	51		 push	 ecx
  00531	8b 55 dc	 mov	 edx, DWORD PTR _mo$1[ebp]
  00534	8b 45 fc	 mov	 eax, DWORD PTR _thwompx$[ebp]
  00537	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  0053a	50		 push	 eax
  0053b	e8 00 00 00 00	 call	 _P_AproxDistance
  00540	83 c4 08	 add	 esp, 8
  00543	3d 00 00 60 00	 cmp	 eax, 6291456		; 00600000H
  00548	7f 14		 jg	 SHORT $LN25@T_ThwompSe

; 1855 : 			{
; 1856 : 				thwomp->direction = -1;

  0054a	b8 04 00 00 00	 mov	 eax, 4
  0054f	d1 e0		 shl	 eax, 1
  00551	8b 4d 08	 mov	 ecx, DWORD PTR _thwomp$[ebp]
  00554	c7 44 01 10 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax+16], -1

; 1857 : 				break;

  0055c	eb 05		 jmp	 SHORT $LN3@T_ThwompSe
$LN25@T_ThwompSe:

; 1858 : 			}
; 1859 : 		}

  0055e	e9 78 ff ff ff	 jmp	 $LN2@T_ThwompSe
$LN3@T_ThwompSe:

; 1860 : 
; 1861 : 		thwomp->sector->ceilspeed = 0;

  00563	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00566	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00569	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 1862 : 		thwomp->sector->floorspeed = 0;

  00573	8b 45 08	 mov	 eax, DWORD PTR _thwomp$[ebp]
  00576	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00579	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0
$LN16@T_ThwompSe:

; 1863 : 	}
; 1864 : 
; 1865 : 	P_RecalcPrecipInSector(actionsector);

  00583	8b 45 f4	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00586	50		 push	 eax
  00587	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  0058c	83 c4 04	 add	 esp, 4
$LN1@T_ThwompSe:

; 1866 : #undef speed
; 1867 : #undef direction
; 1868 : #undef distance
; 1869 : #undef floorwasheight
; 1870 : #undef ceilingwasheight
; 1871 : }

  0058f	5f		 pop	 edi
  00590	5e		 pop	 esi
  00591	5b		 pop	 ebx
  00592	8b e5		 mov	 esp, ebp
  00594	5d		 pop	 ebp
  00595	c3		 ret	 0
_T_ThwompSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_MarioBlockChecker
_TEXT	SEGMENT
_masterline$ = -12					; size = 4
_node$ = -8						; size = 4
_thing$ = -4						; size = 4
_block$ = 8						; size = 4
_T_MarioBlockChecker PROC				; COMDAT

; 1688 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1689 : 	mobj_t *thing = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _thing$[ebp], 0

; 1690 : 	msecnode_t *node = NULL;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _node$[ebp], 0

; 1691 : 	line_t *masterline;
; 1692 : 
; 1693 : 	masterline = block->sourceline;

  00017	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0001a	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0001d	89 4d f4	 mov	 DWORD PTR _masterline$[ebp], ecx

; 1694 : 
; 1695 : 	node = block->sector->touching_thinglist; // things touching this sector

  00020	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00023	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00026	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0002c	89 55 f8	 mov	 DWORD PTR _node$[ebp], edx

; 1696 : 
; 1697 : 	if (node)

  0002f	83 7d f8 00	 cmp	 DWORD PTR _node$[ebp], 0
  00033	0f 84 ee 00 00
	00		 je	 $LN2@T_MarioBlo

; 1698 : 	{
; 1699 : 		thing = node->m_thing;

  00039	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	89 4d fc	 mov	 DWORD PTR _thing$[ebp], ecx

; 1700 : 
; 1701 : 		if (thing && (thing->health))

  00042	83 7d fc 00	 cmp	 DWORD PTR _thing$[ebp], 0
  00046	0f 84 a0 00 00
	00		 je	 $LN4@T_MarioBlo
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0004f	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00056	0f 84 90 00 00
	00		 je	 $LN4@T_MarioBlo

; 1702 : 		{
; 1703 : 			if ((thing->flags & MF_MONITOR) && thing->threshold == 68)

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0005f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00062	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00068	74 47		 je	 SHORT $LN6@T_MarioBlo
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0006d	83 b8 a0 00 00
	00 44		 cmp	 DWORD PTR [eax+160], 68	; 00000044H
  00074	75 3b		 jne	 SHORT $LN6@T_MarioBlo

; 1704 : 				sides[masterline->sidenum[0]].midtexture = sides[masterline->sidenum[0]].toptexture;

  00076	b8 02 00 00 00	 mov	 eax, 2
  0007b	6b c8 00	 imul	 ecx, eax, 0
  0007e	8b 55 f4	 mov	 edx, DWORD PTR _masterline$[ebp]
  00081	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00086	6b c8 1c	 imul	 ecx, eax, 28
  00089	ba 02 00 00 00	 mov	 edx, 2
  0008e	6b c2 00	 imul	 eax, edx, 0
  00091	8b 55 f4	 mov	 edx, DWORD PTR _masterline$[ebp]
  00094	0f b7 44 02 16	 movzx	 eax, WORD PTR [edx+eax+22]
  00099	6b d0 1c	 imul	 edx, eax, 28
  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR _sides
  000a1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _sides
  000a7	8b 4c 0e 08	 mov	 ecx, DWORD PTR [esi+ecx+8]
  000ab	89 4c 10 10	 mov	 DWORD PTR [eax+edx+16], ecx
  000af	eb 39		 jmp	 SHORT $LN7@T_MarioBlo
$LN6@T_MarioBlo:

; 1705 : 			else
; 1706 : 				sides[masterline->sidenum[0]].midtexture = sides[masterline->sidenum[0]].bottomtexture;

  000b1	b8 02 00 00 00	 mov	 eax, 2
  000b6	6b c8 00	 imul	 ecx, eax, 0
  000b9	8b 55 f4	 mov	 edx, DWORD PTR _masterline$[ebp]
  000bc	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  000c1	6b c8 1c	 imul	 ecx, eax, 28
  000c4	ba 02 00 00 00	 mov	 edx, 2
  000c9	6b c2 00	 imul	 eax, edx, 0
  000cc	8b 55 f4	 mov	 edx, DWORD PTR _masterline$[ebp]
  000cf	0f b7 44 02 16	 movzx	 eax, WORD PTR [edx+eax+22]
  000d4	6b d0 1c	 imul	 edx, eax, 28
  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _sides
  000dc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _sides
  000e2	8b 4c 0e 0c	 mov	 ecx, DWORD PTR [esi+ecx+12]
  000e6	89 4c 10 10	 mov	 DWORD PTR [eax+edx+16], ecx
$LN7@T_MarioBlo:

; 1707 : 		}

  000ea	eb 39		 jmp	 SHORT $LN5@T_MarioBlo
$LN4@T_MarioBlo:

; 1708 : 		else
; 1709 : 			sides[masterline->sidenum[0]].midtexture = sides[masterline->sidenum[0]].toptexture;

  000ec	b8 02 00 00 00	 mov	 eax, 2
  000f1	6b c8 00	 imul	 ecx, eax, 0
  000f4	8b 55 f4	 mov	 edx, DWORD PTR _masterline$[ebp]
  000f7	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  000fc	6b c8 1c	 imul	 ecx, eax, 28
  000ff	ba 02 00 00 00	 mov	 edx, 2
  00104	6b c2 00	 imul	 eax, edx, 0
  00107	8b 55 f4	 mov	 edx, DWORD PTR _masterline$[ebp]
  0010a	0f b7 44 02 16	 movzx	 eax, WORD PTR [edx+eax+22]
  0010f	6b d0 1c	 imul	 edx, eax, 28
  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR _sides
  00117	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _sides
  0011d	8b 4c 0e 08	 mov	 ecx, DWORD PTR [esi+ecx+8]
  00121	89 4c 10 10	 mov	 DWORD PTR [eax+edx+16], ecx
$LN5@T_MarioBlo:

; 1710 : 	}

  00125	eb 39		 jmp	 SHORT $LN3@T_MarioBlo
$LN2@T_MarioBlo:

; 1711 : 	else
; 1712 : 		sides[masterline->sidenum[0]].midtexture = sides[masterline->sidenum[0]].toptexture;

  00127	b8 02 00 00 00	 mov	 eax, 2
  0012c	6b c8 00	 imul	 ecx, eax, 0
  0012f	8b 55 f4	 mov	 edx, DWORD PTR _masterline$[ebp]
  00132	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00137	6b c8 1c	 imul	 ecx, eax, 28
  0013a	ba 02 00 00 00	 mov	 edx, 2
  0013f	6b c2 00	 imul	 eax, edx, 0
  00142	8b 55 f4	 mov	 edx, DWORD PTR _masterline$[ebp]
  00145	0f b7 44 02 16	 movzx	 eax, WORD PTR [edx+eax+22]
  0014a	6b d0 1c	 imul	 edx, eax, 28
  0014d	a1 00 00 00 00	 mov	 eax, DWORD PTR _sides
  00152	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _sides
  00158	8b 4c 0e 08	 mov	 ecx, DWORD PTR [esi+ecx+8]
  0015c	89 4c 10 10	 mov	 DWORD PTR [eax+edx+16], ecx
$LN3@T_MarioBlo:

; 1713 : }

  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
_T_MarioBlockChecker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_BridgeThinker
_TEXT	SEGMENT
_origspeed$1 = -112					; size = 4
_origspeed$2 = -108					; size = 4
_origspeed$3 = -104					; size = 4
_origspeed$4 = -100					; size = 4
_origspeed$5 = -96					; size = 4
_origspeed$6 = -92					; size = 4
_plusplusme$7 = -88					; size = 4
_interval$8 = -84					; size = 4
_heightdiff$9 = -80					; size = 4
_divisor$10 = -76					; size = 4
_sourcesec$11 = -72					; size = 4
_origspeed$12 = -68					; size = 4
_origspeed$13 = -64					; size = 4
_midpoint$14 = -60					; size = 4
_dist$15 = -56						; size = 4
_lowfloorheight$ = -52					; size = 4
_lowceilheight$ = -48					; size = 4
_res$ = -44						; size = 4
_floordestination$ = -40				; size = 4
_ceilingdestination$ = -36				; size = 4
_playeronme$ = -32					; size = 4
_j$ = -28						; size = 2
_k$ = -24						; size = 4
_i$ = -20						; size = 4
_controlsec$ = -16					; size = 4
_sector$ = -12						; size = 4
_thing$ = -8						; size = 4
_node$ = -4						; size = 4
_bridge$ = 8						; size = 4
_T_BridgeThinker PROC					; COMDAT

; 1224 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1225 : 	msecnode_t *node;
; 1226 : 	mobj_t *thing;
; 1227 : 	sector_t *sector;
; 1228 : 	sector_t *controlsec = NULL;

  0000c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _controlsec$[ebp], 0

; 1229 : 	INT32 i, k;
; 1230 : 
; 1231 : 	INT16 j;
; 1232 : 	boolean playeronme = false;

  00013	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _playeronme$[ebp], 0

; 1233 : 	fixed_t ceilingdestination = 0, floordestination = 0;

  0001a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _ceilingdestination$[ebp], 0
  00021	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _floordestination$[ebp], 0

; 1234 : 	result_e res = 0;

  00028	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _res$[ebp], 0

; 1235 : 
; 1236 : #define ORIGFLOORHEIGHT (bridge->vars[0])
; 1237 : #define ORIGCEILINGHEIGHT (bridge->vars[1])
; 1238 : #define BASESPEED (bridge->vars[2])
; 1239 : #define CURSPEED (bridge->vars[3])
; 1240 : #define STARTTAG ((INT16)bridge->vars[4])
; 1241 : #define ENDTAG ((INT16)bridge->vars[5])
; 1242 : #define DIRECTION (bridge->vars[8])
; 1243 : #define SAGAMT (8*FRACUNIT)
; 1244 : 	fixed_t lowceilheight = ORIGCEILINGHEIGHT - SAGAMT;

  0002f	b8 04 00 00 00	 mov	 eax, 4
  00034	c1 e0 00	 shl	 eax, 0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0003a	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0003e	81 ea 00 00 08
	00		 sub	 edx, 524288		; 00080000H
  00044	89 55 d0	 mov	 DWORD PTR _lowceilheight$[ebp], edx

; 1245 : 	fixed_t lowfloorheight = ORIGFLOORHEIGHT - SAGAMT;

  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	6b c8 00	 imul	 ecx, eax, 0
  0004f	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00052	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00056	2d 00 00 08 00	 sub	 eax, 524288		; 00080000H
  0005b	89 45 cc	 mov	 DWORD PTR _lowfloorheight$[ebp], eax

; 1246 : #define LOWCEILINGHEIGHT (lowceilheight)
; 1247 : #define LOWFLOORHEIGHT (lowfloorheight)
; 1248 : #define STARTCONTROLTAG (ENDTAG + 1)
; 1249 : #define ENDCONTROLTAG (ENDTAG + (ENDTAG - STARTTAG) + 1)
; 1250 : 
; 1251 : 	// Is someone standing on it?
; 1252 : 	for (j = STARTTAG; j <= ENDTAG; j++)

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	c1 e0 02	 shl	 eax, 2
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00069	66 8b 54 01 10	 mov	 dx, WORD PTR [ecx+eax+16]
  0006e	66 89 55 e4	 mov	 WORD PTR _j$[ebp], dx
  00072	eb 0c		 jmp	 SHORT $LN4@T_BridgeTh
$LN2@T_BridgeTh:
  00074	66 8b 45 e4	 mov	 ax, WORD PTR _j$[ebp]
  00078	66 83 c0 01	 add	 ax, 1
  0007c	66 89 45 e4	 mov	 WORD PTR _j$[ebp], ax
$LN4@T_BridgeTh:
  00080	0f bf 45 e4	 movsx	 eax, WORD PTR _j$[ebp]
  00084	b9 04 00 00 00	 mov	 ecx, 4
  00089	6b d1 05	 imul	 edx, ecx, 5
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0008f	0f bf 54 11 10	 movsx	 edx, WORD PTR [ecx+edx+16]
  00094	3b c2		 cmp	 eax, edx
  00096	0f 8f de 00 00
	00		 jg	 $wegotit$87

; 1253 : 	{
; 1254 : 		for (i = -1; (i = P_FindSectorFromTag(j, i)) >= 0 ;)

  0009c	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN5@T_BridgeTh:
  000a3	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  000a6	50		 push	 eax
  000a7	0f b7 4d e4	 movzx	 ecx, WORD PTR _j$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  000b1	83 c4 08	 add	 esp, 8
  000b4	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  000b7	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  000bb	0f 8c b4 00 00
	00		 jl	 $LN6@T_BridgeTh

; 1255 : 		{
; 1256 : 			sector = &sectors[i];

  000c1	69 45 ec f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  000c8	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  000ce	89 45 f4	 mov	 DWORD PTR _sector$[ebp], eax

; 1257 : 
; 1258 : 			// Nab the control sector that this sector belongs to.
; 1259 : 			k = P_FindSectorFromTag((INT16)(j + (ENDTAG-STARTTAG) + 1), -1);

  000d1	6a ff		 push	 -1
  000d3	0f bf 45 e4	 movsx	 eax, WORD PTR _j$[ebp]
  000d7	b9 04 00 00 00	 mov	 ecx, 4
  000dc	6b d1 05	 imul	 edx, ecx, 5
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  000e2	0f bf 54 11 10	 movsx	 edx, WORD PTR [ecx+edx+16]
  000e7	b9 04 00 00 00	 mov	 ecx, 4
  000ec	c1 e1 02	 shl	 ecx, 2
  000ef	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  000f2	0f bf 4c 0e 10	 movsx	 ecx, WORD PTR [esi+ecx+16]
  000f7	2b d1		 sub	 edx, ecx
  000f9	8d 54 10 01	 lea	 edx, DWORD PTR [eax+edx+1]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00103	83 c4 08	 add	 esp, 8
  00106	89 45 e8	 mov	 DWORD PTR _k$[ebp], eax

; 1260 : 
; 1261 : 			if (k == -1)

  00109	83 7d e8 ff	 cmp	 DWORD PTR _k$[ebp], -1
  0010d	75 02		 jne	 SHORT $LN29@T_BridgeTh

; 1262 : 				break;

  0010f	eb 64		 jmp	 SHORT $LN6@T_BridgeTh
$LN29@T_BridgeTh:

; 1263 : 
; 1264 : 			controlsec = &sectors[k];

  00111	69 45 e8 f8 00
	00 00		 imul	 eax, DWORD PTR _k$[ebp], 248
  00118	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  0011e	89 45 f0	 mov	 DWORD PTR _controlsec$[ebp], eax

; 1265 : 
; 1266 : 			// Is a player standing on me?
; 1267 : 			for (node = sector->touching_thinglist; node; node = node->m_snext)

  00121	8b 45 f4	 mov	 eax, DWORD PTR _sector$[ebp]
  00124	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0012a	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
  0012d	eb 09		 jmp	 SHORT $LN10@T_BridgeTh
$LN8@T_BridgeTh:
  0012f	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00132	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00135	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
$LN10@T_BridgeTh:
  00138	83 7d fc 00	 cmp	 DWORD PTR _node$[ebp], 0
  0013c	74 32		 je	 SHORT $LN9@T_BridgeTh

; 1268 : 			{
; 1269 : 				thing = node->m_thing;

  0013e	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00141	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00144	89 4d f8	 mov	 DWORD PTR _thing$[ebp], ecx

; 1270 : 
; 1271 : 				if (!thing->player)

  00147	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  0014a	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00151	75 02		 jne	 SHORT $LN30@T_BridgeTh

; 1272 : 					continue;

  00153	eb da		 jmp	 SHORT $LN8@T_BridgeTh
$LN30@T_BridgeTh:

; 1273 : 
; 1274 : 				if (!(thing->z == controlsec->ceilingheight))

  00155	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  00158	8b 4d f0	 mov	 ecx, DWORD PTR _controlsec$[ebp]
  0015b	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0015e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00161	74 02		 je	 SHORT $LN31@T_BridgeTh

; 1275 : 					continue;

  00163	eb ca		 jmp	 SHORT $LN8@T_BridgeTh
$LN31@T_BridgeTh:

; 1276 : 
; 1277 : 				playeronme = true;

  00165	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _playeronme$[ebp], 1

; 1278 : 				goto wegotit; // Just take the first one?

  0016c	eb 0c		 jmp	 SHORT $wegotit$87

; 1279 : 			}

  0016e	eb bf		 jmp	 SHORT $LN8@T_BridgeTh
$LN9@T_BridgeTh:

; 1280 : 		}

  00170	e9 2e ff ff ff	 jmp	 $LN5@T_BridgeTh
$LN6@T_BridgeTh:

; 1281 : 	}

  00175	e9 fa fe ff ff	 jmp	 $LN2@T_BridgeTh
$wegotit$87:

; 1282 : wegotit:
; 1283 : 	if (playeronme)
; 1284 : 	{
; 1285 : 		// Lower controlsec like a regular T_RaiseSector
; 1286 : 		// Set the heights of all the other control sectors to
; 1287 : 		// be a gradient of this height toward the edges
; 1288 : 	}
; 1289 : 	else
; 1290 : 	{
; 1291 : 		// Raise controlsec like a regular T_RaiseSector
; 1292 : 		// Set the heights of all the other control sectors to
; 1293 : 		// be a gradient of this height toward the edges.
; 1294 : 	}
; 1295 : 
; 1296 : 	if (playeronme && controlsec)

  0017a	83 7d e0 00	 cmp	 DWORD PTR _playeronme$[ebp], 0
  0017e	0f 84 85 0d 00
	00		 je	 $LN34@T_BridgeTh
  00184	83 7d f0 00	 cmp	 DWORD PTR _controlsec$[ebp], 0
  00188	0f 84 7b 0d 00
	00		 je	 $LN34@T_BridgeTh

; 1297 : 	{
; 1298 : 		INT32 dist;
; 1299 : 
; 1300 : 		bridge->sector = controlsec;

  0018e	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00191	8b 4d f0	 mov	 ecx, DWORD PTR _controlsec$[ebp]
  00194	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 1301 : 		CURSPEED = BASESPEED;

  00197	b8 04 00 00 00	 mov	 eax, 4
  0019c	d1 e0		 shl	 eax, 1
  0019e	b9 04 00 00 00	 mov	 ecx, 4
  001a3	6b d1 03	 imul	 edx, ecx, 3
  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  001a9	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  001ac	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  001b0	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 1302 : 
; 1303 : 		{
; 1304 : 			// Translate tags to - 0 + range
; 1305 : 			/*so you have a number in [min, max].
; 1306 : 			let range = max - min, subtract min
; 1307 : 			from your number to get [0, range].
; 1308 : 			subtract range/2 to get [-range/2, range/2].
; 1309 : 			take absolute value and get [0, range/2] where
; 1310 : 			lower number = closer to midpoint. divide by
; 1311 : 			range/2 to get [0, 1]. subtract that number
; 1312 : 			from 1 to get [0, 1] with higher number = closer
; 1313 : 			to midpoint. multiply this by max sag amount*/
; 1314 : 
; 1315 : 			INT32 midpoint = STARTCONTROLTAG + ((ENDCONTROLTAG-STARTCONTROLTAG) + 1)/2;

  001b4	b8 04 00 00 00	 mov	 eax, 4
  001b9	6b c8 05	 imul	 ecx, eax, 5
  001bc	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  001bf	0f bf 4c 0a 10	 movsx	 ecx, WORD PTR [edx+ecx+16]
  001c4	ba 04 00 00 00	 mov	 edx, 4
  001c9	6b c2 05	 imul	 eax, edx, 5
  001cc	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  001cf	0f bf 44 02 10	 movsx	 eax, WORD PTR [edx+eax+16]
  001d4	ba 04 00 00 00	 mov	 edx, 4
  001d9	6b d2 05	 imul	 edx, edx, 5
  001dc	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  001df	0f bf 54 16 10	 movsx	 edx, WORD PTR [esi+edx+16]
  001e4	be 04 00 00 00	 mov	 esi, 4
  001e9	c1 e6 02	 shl	 esi, 2
  001ec	8b 7d 08	 mov	 edi, DWORD PTR _bridge$[ebp]
  001ef	0f bf 74 37 10	 movsx	 esi, WORD PTR [edi+esi+16]
  001f4	2b d6		 sub	 edx, esi
  001f6	8d 44 10 01	 lea	 eax, DWORD PTR [eax+edx+1]
  001fa	ba 04 00 00 00	 mov	 edx, 4
  001ff	6b d2 05	 imul	 edx, edx, 5
  00202	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00205	0f bf 54 16 10	 movsx	 edx, WORD PTR [esi+edx+16]
  0020a	83 c2 01	 add	 edx, 1
  0020d	2b c2		 sub	 eax, edx
  0020f	83 c0 01	 add	 eax, 1
  00212	99		 cdq
  00213	2b c2		 sub	 eax, edx
  00215	d1 f8		 sar	 eax, 1
  00217	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]
  0021b	89 45 c4	 mov	 DWORD PTR _midpoint$14[ebp], eax

; 1316 : //			INT32 tagstart = STARTTAG - midpoint;
; 1317 : //			INT32 tagend = ENDTAG - midpoint;
; 1318 : 
; 1319 : //			CONS_Printf("tagstart is %d, tagend is %d\n", tagstart, tagend);
; 1320 : 
; 1321 : 			// Sag is adjusted by how close you are to the center
; 1322 : 			dist = ((ENDCONTROLTAG - STARTCONTROLTAG))/2 - abs(bridge->sector->tag - midpoint);

  0021e	b8 04 00 00 00	 mov	 eax, 4
  00223	6b c8 05	 imul	 ecx, eax, 5
  00226	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00229	0f bf 44 0a 10	 movsx	 eax, WORD PTR [edx+ecx+16]
  0022e	b9 04 00 00 00	 mov	 ecx, 4
  00233	6b d1 05	 imul	 edx, ecx, 5
  00236	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00239	0f bf 54 11 10	 movsx	 edx, WORD PTR [ecx+edx+16]
  0023e	b9 04 00 00 00	 mov	 ecx, 4
  00243	c1 e1 02	 shl	 ecx, 2
  00246	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00249	0f bf 4c 0e 10	 movsx	 ecx, WORD PTR [esi+ecx+16]
  0024e	2b d1		 sub	 edx, ecx
  00250	8d 44 10 01	 lea	 eax, DWORD PTR [eax+edx+1]
  00254	ba 04 00 00 00	 mov	 edx, 4
  00259	6b ca 05	 imul	 ecx, edx, 5
  0025c	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0025f	0f bf 4c 0a 10	 movsx	 ecx, WORD PTR [edx+ecx+16]
  00264	83 c1 01	 add	 ecx, 1
  00267	2b c1		 sub	 eax, ecx
  00269	99		 cdq
  0026a	2b c2		 sub	 eax, edx
  0026c	8b f0		 mov	 esi, eax
  0026e	d1 fe		 sar	 esi, 1
  00270	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00273	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00276	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  0027a	2b 4d c4	 sub	 ecx, DWORD PTR _midpoint$14[ebp]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 _abs
  00283	83 c4 04	 add	 esp, 4
  00286	2b f0		 sub	 esi, eax
  00288	89 75 c8	 mov	 DWORD PTR _dist$15[ebp], esi

; 1323 : 
; 1324 : //			CONS_Printf("Dist is %d\n", dist);
; 1325 : 			LOWCEILINGHEIGHT -= (SAGAMT) * dist;

  0028b	8b 45 c8	 mov	 eax, DWORD PTR _dist$15[ebp]
  0028e	c1 e0 13	 shl	 eax, 19			; 00000013H
  00291	8b 4d d0	 mov	 ecx, DWORD PTR _lowceilheight$[ebp]
  00294	2b c8		 sub	 ecx, eax
  00296	89 4d d0	 mov	 DWORD PTR _lowceilheight$[ebp], ecx

; 1326 : 			LOWFLOORHEIGHT -= (SAGAMT) * dist;

  00299	8b 45 c8	 mov	 eax, DWORD PTR _dist$15[ebp]
  0029c	c1 e0 13	 shl	 eax, 19			; 00000013H
  0029f	8b 4d cc	 mov	 ecx, DWORD PTR _lowfloorheight$[ebp]
  002a2	2b c8		 sub	 ecx, eax
  002a4	89 4d cc	 mov	 DWORD PTR _lowfloorheight$[ebp], ecx

; 1327 : 		}
; 1328 : 
; 1329 : 		// go down
; 1330 : 		if (bridge->sector->ceilingheight <= LOWCEILINGHEIGHT)

  002a7	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  002aa	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  002ad	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002b0	3b 55 d0	 cmp	 edx, DWORD PTR _lowceilheight$[ebp]
  002b3	7f 4f		 jg	 SHORT $LN36@T_BridgeTh

; 1331 : 		{
; 1332 : 			bridge->sector->floorheight = LOWCEILINGHEIGHT - (bridge->sector->ceilingheight - bridge->sector->floorheight);

  002b5	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  002b8	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  002bb	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  002be	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  002c1	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  002c4	2b 08		 sub	 ecx, DWORD PTR [eax]
  002c6	8b 55 d0	 mov	 edx, DWORD PTR _lowceilheight$[ebp]
  002c9	2b d1		 sub	 edx, ecx
  002cb	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  002ce	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  002d1	89 11		 mov	 DWORD PTR [ecx], edx

; 1333 : 			bridge->sector->ceilingheight = LOWCEILINGHEIGHT;

  002d3	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  002d6	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  002d9	8b 55 d0	 mov	 edx, DWORD PTR _lowceilheight$[ebp]
  002dc	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1334 : 			bridge->sector->ceilspeed = 0;

  002df	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  002e2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  002e5	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 1335 : 			bridge->sector->floorspeed = 0;

  002ef	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  002f2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  002f5	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 1336 : 			goto dorest;

  002ff	e9 9e 02 00 00	 jmp	 $dorest$88
$LN36@T_BridgeTh:

; 1337 : 		}
; 1338 : 
; 1339 : 		DIRECTION = -1;

  00304	b8 04 00 00 00	 mov	 eax, 4
  00309	c1 e0 03	 shl	 eax, 3
  0030c	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0030f	c7 44 01 10 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax+16], -1

; 1340 : 		ceilingdestination = LOWCEILINGHEIGHT;

  00317	8b 45 d0	 mov	 eax, DWORD PTR _lowceilheight$[ebp]
  0031a	89 45 dc	 mov	 DWORD PTR _ceilingdestination$[ebp], eax

; 1341 : 		floordestination = LOWFLOORHEIGHT;

  0031d	8b 45 cc	 mov	 eax, DWORD PTR _lowfloorheight$[ebp]
  00320	89 45 d8	 mov	 DWORD PTR _floordestination$[ebp], eax

; 1342 : 
; 1343 : 		if ((bridge->sector->ceilingheight - LOWCEILINGHEIGHT)
; 1344 : 			< (ORIGCEILINGHEIGHT - bridge->sector->ceilingheight))

  00323	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00326	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00329	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0032c	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  0032f	b8 04 00 00 00	 mov	 eax, 4
  00334	c1 e0 00	 shl	 eax, 0
  00337	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0033a	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  0033d	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00340	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  00344	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00347	3b d0		 cmp	 edx, eax
  00349	0f 8d ca 00 00
	00		 jge	 $LN37@T_BridgeTh

; 1345 : 		{
; 1346 : 			fixed_t origspeed = CURSPEED;

  0034f	b8 04 00 00 00	 mov	 eax, 4
  00354	6b c8 03	 imul	 ecx, eax, 3
  00357	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0035a	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0035e	89 45 c0	 mov	 DWORD PTR _origspeed$13[ebp], eax

; 1347 : 
; 1348 : 			// Slow down as you get closer to the bottom
; 1349 : 			CURSPEED = FixedMul(CURSPEED,FixedDiv(bridge->sector->ceilingheight - LOWCEILINGHEIGHT, (ORIGCEILINGHEIGHT - LOWCEILINGHEIGHT)>>5));

  00361	b8 04 00 00 00	 mov	 eax, 4
  00366	c1 e0 00	 shl	 eax, 0
  00369	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0036c	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00370	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  00373	c1 fa 05	 sar	 edx, 5
  00376	52		 push	 edx
  00377	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  0037a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0037d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00380	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  00383	52		 push	 edx
  00384	e8 00 00 00 00	 call	 _FixedDiv
  00389	83 c4 08	 add	 esp, 8
  0038c	50		 push	 eax
  0038d	b8 04 00 00 00	 mov	 eax, 4
  00392	6b c8 03	 imul	 ecx, eax, 3
  00395	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00398	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0039c	50		 push	 eax
  0039d	e8 00 00 00 00	 call	 _FixedMul
  003a2	83 c4 08	 add	 esp, 8
  003a5	b9 04 00 00 00	 mov	 ecx, 4
  003aa	6b d1 03	 imul	 edx, ecx, 3
  003ad	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  003b0	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 1350 : 
; 1351 : 			if (CURSPEED <= origspeed/16)

  003b4	b8 04 00 00 00	 mov	 eax, 4
  003b9	6b c8 03	 imul	 ecx, eax, 3
  003bc	8b 45 c0	 mov	 eax, DWORD PTR _origspeed$13[ebp]
  003bf	99		 cdq
  003c0	83 e2 0f	 and	 edx, 15			; 0000000fH
  003c3	03 c2		 add	 eax, edx
  003c5	c1 f8 04	 sar	 eax, 4
  003c8	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  003cb	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  003cf	7f 1d		 jg	 SHORT $LN39@T_BridgeTh

; 1352 : 				CURSPEED = origspeed/16;

  003d1	8b 45 c0	 mov	 eax, DWORD PTR _origspeed$13[ebp]
  003d4	99		 cdq
  003d5	83 e2 0f	 and	 edx, 15			; 0000000fH
  003d8	03 c2		 add	 eax, edx
  003da	c1 f8 04	 sar	 eax, 4
  003dd	b9 04 00 00 00	 mov	 ecx, 4
  003e2	6b d1 03	 imul	 edx, ecx, 3
  003e5	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  003e8	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  003ec	eb 26		 jmp	 SHORT $LN41@T_BridgeTh
$LN39@T_BridgeTh:

; 1353 : 			else if (CURSPEED > origspeed)

  003ee	b8 04 00 00 00	 mov	 eax, 4
  003f3	6b c8 03	 imul	 ecx, eax, 3
  003f6	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  003f9	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  003fd	3b 45 c0	 cmp	 eax, DWORD PTR _origspeed$13[ebp]
  00400	7e 12		 jle	 SHORT $LN41@T_BridgeTh

; 1354 : 				CURSPEED = origspeed;

  00402	b8 04 00 00 00	 mov	 eax, 4
  00407	6b c8 03	 imul	 ecx, eax, 3
  0040a	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0040d	8b 45 c0	 mov	 eax, DWORD PTR _origspeed$13[ebp]
  00410	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN41@T_BridgeTh:

; 1355 : 		}

  00414	e9 d1 00 00 00	 jmp	 $LN44@T_BridgeTh
$LN37@T_BridgeTh:

; 1356 : 		else
; 1357 : 		{
; 1358 : 			fixed_t origspeed = CURSPEED;

  00419	b8 04 00 00 00	 mov	 eax, 4
  0041e	6b c8 03	 imul	 ecx, eax, 3
  00421	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00424	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00428	89 45 bc	 mov	 DWORD PTR _origspeed$12[ebp], eax

; 1359 : 			// Slow down as you get closer to the top
; 1360 : 			CURSPEED = FixedMul(CURSPEED,FixedDiv(ORIGCEILINGHEIGHT - bridge->sector->ceilingheight, (ORIGCEILINGHEIGHT - LOWCEILINGHEIGHT)>>5));

  0042b	b8 04 00 00 00	 mov	 eax, 4
  00430	c1 e0 00	 shl	 eax, 0
  00433	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00436	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0043a	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  0043d	c1 fa 05	 sar	 edx, 5
  00440	52		 push	 edx
  00441	b8 04 00 00 00	 mov	 eax, 4
  00446	c1 e0 00	 shl	 eax, 0
  00449	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0044c	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0044f	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00452	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00456	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 _FixedDiv
  0045f	83 c4 08	 add	 esp, 8
  00462	50		 push	 eax
  00463	b9 04 00 00 00	 mov	 ecx, 4
  00468	6b d1 03	 imul	 edx, ecx, 3
  0046b	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  0046e	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00472	51		 push	 ecx
  00473	e8 00 00 00 00	 call	 _FixedMul
  00478	83 c4 08	 add	 esp, 8
  0047b	ba 04 00 00 00	 mov	 edx, 4
  00480	6b ca 03	 imul	 ecx, edx, 3
  00483	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00486	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 1361 : 
; 1362 : 			if (CURSPEED <= origspeed/16)

  0048a	b8 04 00 00 00	 mov	 eax, 4
  0048f	6b c8 03	 imul	 ecx, eax, 3
  00492	8b 45 bc	 mov	 eax, DWORD PTR _origspeed$12[ebp]
  00495	99		 cdq
  00496	83 e2 0f	 and	 edx, 15			; 0000000fH
  00499	03 c2		 add	 eax, edx
  0049b	c1 f8 04	 sar	 eax, 4
  0049e	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  004a1	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  004a5	7f 1d		 jg	 SHORT $LN42@T_BridgeTh

; 1363 : 				CURSPEED = origspeed/16;

  004a7	8b 45 bc	 mov	 eax, DWORD PTR _origspeed$12[ebp]
  004aa	99		 cdq
  004ab	83 e2 0f	 and	 edx, 15			; 0000000fH
  004ae	03 c2		 add	 eax, edx
  004b0	c1 f8 04	 sar	 eax, 4
  004b3	b9 04 00 00 00	 mov	 ecx, 4
  004b8	6b d1 03	 imul	 edx, ecx, 3
  004bb	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  004be	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  004c2	eb 26		 jmp	 SHORT $LN44@T_BridgeTh
$LN42@T_BridgeTh:

; 1364 : 			else if (CURSPEED > origspeed)

  004c4	b8 04 00 00 00	 mov	 eax, 4
  004c9	6b c8 03	 imul	 ecx, eax, 3
  004cc	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  004cf	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  004d3	3b 45 bc	 cmp	 eax, DWORD PTR _origspeed$12[ebp]
  004d6	7e 12		 jle	 SHORT $LN44@T_BridgeTh

; 1365 : 				CURSPEED = origspeed;

  004d8	b8 04 00 00 00	 mov	 eax, 4
  004dd	6b c8 03	 imul	 ecx, eax, 3
  004e0	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  004e3	8b 45 bc	 mov	 eax, DWORD PTR _origspeed$12[ebp]
  004e6	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN44@T_BridgeTh:

; 1366 : 		}
; 1367 : 
; 1368 : //		CONS_Printf("Curspeed is %d\n", CURSPEED>>FRACBITS);
; 1369 : 
; 1370 : 		res = T_MovePlane

  004ea	b8 04 00 00 00	 mov	 eax, 4
  004ef	c1 e0 03	 shl	 eax, 3
  004f2	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  004f5	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  004f9	52		 push	 edx
  004fa	6a 01		 push	 1
  004fc	6a 00		 push	 0
  004fe	8b 45 dc	 mov	 eax, DWORD PTR _ceilingdestination$[ebp]
  00501	50		 push	 eax
  00502	b9 04 00 00 00	 mov	 ecx, 4
  00507	6b d1 03	 imul	 edx, ecx, 3
  0050a	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  0050d	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00511	51		 push	 ecx
  00512	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00515	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 _T_MovePlane
  0051e	83 c4 18	 add	 esp, 24			; 00000018H
  00521	89 45 d4	 mov	 DWORD PTR _res$[ebp], eax

; 1371 : 		(
; 1372 : 			bridge->sector,         // sector
; 1373 : 			CURSPEED,          // speed
; 1374 : 			ceilingdestination, // dest
; 1375 : 			0,                        // crush
; 1376 : 			1,                        // floor or ceiling (1 for ceiling)
; 1377 : 			DIRECTION       // direction
; 1378 : 		);
; 1379 : 
; 1380 : 		if (res == ok || res == pastdest)

  00524	83 7d d4 00	 cmp	 DWORD PTR _res$[ebp], 0
  00528	74 06		 je	 SHORT $LN46@T_BridgeTh
  0052a	83 7d d4 02	 cmp	 DWORD PTR _res$[ebp], 2
  0052e	75 37		 jne	 SHORT $LN45@T_BridgeTh
$LN46@T_BridgeTh:

; 1381 : 			T_MovePlane

  00530	b8 04 00 00 00	 mov	 eax, 4
  00535	c1 e0 03	 shl	 eax, 3
  00538	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0053b	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0053f	52		 push	 edx
  00540	6a 00		 push	 0
  00542	6a 00		 push	 0
  00544	8b 45 d8	 mov	 eax, DWORD PTR _floordestination$[ebp]
  00547	50		 push	 eax
  00548	b9 04 00 00 00	 mov	 ecx, 4
  0054d	6b d1 03	 imul	 edx, ecx, 3
  00550	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00553	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00557	51		 push	 ecx
  00558	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0055b	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0055e	50		 push	 eax
  0055f	e8 00 00 00 00	 call	 _T_MovePlane
  00564	83 c4 18	 add	 esp, 24			; 00000018H
$LN45@T_BridgeTh:

; 1382 : 			(
; 1383 : 				bridge->sector,           // sector
; 1384 : 				CURSPEED,            // speed
; 1385 : 				floordestination, // dest
; 1386 : 				0,                          // crush
; 1387 : 				0,                          // floor or ceiling (0 for floor)
; 1388 : 				DIRECTION         // direction
; 1389 : 			);
; 1390 : 
; 1391 : 		bridge->sector->ceilspeed = 42;

  00567	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  0056a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0056d	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 1392 : 		bridge->sector->floorspeed = CURSPEED*DIRECTION;

  00577	b8 04 00 00 00	 mov	 eax, 4
  0057c	6b c8 03	 imul	 ecx, eax, 3
  0057f	ba 04 00 00 00	 mov	 edx, 4
  00584	c1 e2 03	 shl	 edx, 3
  00587	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  0058a	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  0058d	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  00591	0f af 4c 16 10	 imul	 ecx, DWORD PTR [esi+edx+16]
  00596	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00599	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0059c	89 88 e8 00 00
	00		 mov	 DWORD PTR [eax+232], ecx
$dorest$88:

; 1393 : 
; 1394 : 	dorest:
; 1395 : 		// Adjust joined sector heights
; 1396 : 		{
; 1397 : 			sector_t *sourcesec = bridge->sector;

  005a2	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  005a5	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  005a8	89 4d b8	 mov	 DWORD PTR _sourcesec$11[ebp], ecx

; 1398 : 
; 1399 : 			INT32 divisor = sourcesec->tag - ENDTAG + 1;

  005ab	8b 45 b8	 mov	 eax, DWORD PTR _sourcesec$11[ebp]
  005ae	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  005b2	ba 04 00 00 00	 mov	 edx, 4
  005b7	6b c2 05	 imul	 eax, edx, 5
  005ba	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  005bd	0f bf 44 02 10	 movsx	 eax, WORD PTR [edx+eax+16]
  005c2	2b c8		 sub	 ecx, eax
  005c4	83 c1 01	 add	 ecx, 1
  005c7	89 4d b4	 mov	 DWORD PTR _divisor$10[ebp], ecx

; 1400 : 			fixed_t heightdiff = ORIGCEILINGHEIGHT - sourcesec->ceilingheight;

  005ca	b8 04 00 00 00	 mov	 eax, 4
  005cf	c1 e0 00	 shl	 eax, 0
  005d2	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  005d5	8b 55 b8	 mov	 edx, DWORD PTR _sourcesec$11[ebp]
  005d8	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  005dc	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  005df	89 45 b0	 mov	 DWORD PTR _heightdiff$9[ebp], eax

; 1401 : 			fixed_t interval;
; 1402 : 			INT32 plusplusme = 0;

  005e2	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _plusplusme$7[ebp], 0

; 1403 : 
; 1404 : 			if (divisor > 0)

  005e9	83 7d b4 00	 cmp	 DWORD PTR _divisor$10[ebp], 0
  005ed	0f 8e 54 04 00
	00		 jle	 $LN12@T_BridgeTh

; 1405 : 			{
; 1406 : 				interval = heightdiff/divisor;

  005f3	8b 45 b0	 mov	 eax, DWORD PTR _heightdiff$9[ebp]
  005f6	99		 cdq
  005f7	f7 7d b4	 idiv	 DWORD PTR _divisor$10[ebp]
  005fa	89 45 ac	 mov	 DWORD PTR _interval$8[ebp], eax

; 1407 : 
; 1408 : //				CONS_Printf("interval is %d\n", interval>>FRACBITS);
; 1409 : 
; 1410 : 				// TODO: Use T_MovePlane
; 1411 : 
; 1412 : 				for (j = (INT16)(ENDTAG+1); j <= sourcesec->tag; j++, plusplusme++)

  005fd	b8 04 00 00 00	 mov	 eax, 4
  00602	6b c8 05	 imul	 ecx, eax, 5
  00605	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00608	0f bf 44 0a 10	 movsx	 eax, WORD PTR [edx+ecx+16]
  0060d	83 c0 01	 add	 eax, 1
  00610	66 89 45 e4	 mov	 WORD PTR _j$[ebp], ax
  00614	eb 15		 jmp	 SHORT $LN13@T_BridgeTh
$LN11@T_BridgeTh:
  00616	66 8b 45 e4	 mov	 ax, WORD PTR _j$[ebp]
  0061a	66 83 c0 01	 add	 ax, 1
  0061e	66 89 45 e4	 mov	 WORD PTR _j$[ebp], ax
  00622	8b 4d a8	 mov	 ecx, DWORD PTR _plusplusme$7[ebp]
  00625	83 c1 01	 add	 ecx, 1
  00628	89 4d a8	 mov	 DWORD PTR _plusplusme$7[ebp], ecx
$LN13@T_BridgeTh:
  0062b	0f bf 45 e4	 movsx	 eax, WORD PTR _j$[ebp]
  0062f	8b 4d b8	 mov	 ecx, DWORD PTR _sourcesec$11[ebp]
  00632	0f bf 51 14	 movsx	 edx, WORD PTR [ecx+20]
  00636	3b c2		 cmp	 eax, edx
  00638	0f 8f 09 04 00
	00		 jg	 $LN12@T_BridgeTh

; 1413 : 				{
; 1414 : 					for (i = -1; (i = P_FindSectorFromTag(j, i)) >= 0 ;)

  0063e	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN14@T_BridgeTh:
  00645	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00648	50		 push	 eax
  00649	0f b7 4d e4	 movzx	 ecx, WORD PTR _j$[ebp]
  0064d	51		 push	 ecx
  0064e	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00653	83 c4 08	 add	 esp, 8
  00656	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  00659	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  0065d	0f 8c df 03 00
	00		 jl	 $LN15@T_BridgeTh

; 1415 : 					{
; 1416 : 						if (sectors[i].ceilingheight >= sourcesec->ceilingheight)

  00663	69 45 ec f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  0066a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sectors
  00670	8b 55 b8	 mov	 edx, DWORD PTR _sourcesec$11[ebp]
  00673	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  00677	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0067a	7c 55		 jl	 SHORT $LN48@T_BridgeTh

; 1417 : 						{
; 1418 : 							sectors[i].ceilingheight = ORIGCEILINGHEIGHT - (interval*plusplusme);

  0067c	b8 04 00 00 00	 mov	 eax, 4
  00681	c1 e0 00	 shl	 eax, 0
  00684	8b 4d ac	 mov	 ecx, DWORD PTR _interval$8[ebp]
  00687	0f af 4d a8	 imul	 ecx, DWORD PTR _plusplusme$7[ebp]
  0068b	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0068e	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  00692	2b c1		 sub	 eax, ecx
  00694	69 4d ec f8 00
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 248
  0069b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sectors
  006a1	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 1419 : 							sectors[i].floorheight = ORIGFLOORHEIGHT - (interval*plusplusme);

  006a5	b8 04 00 00 00	 mov	 eax, 4
  006aa	6b c8 00	 imul	 ecx, eax, 0
  006ad	8b 55 ac	 mov	 edx, DWORD PTR _interval$8[ebp]
  006b0	0f af 55 a8	 imul	 edx, DWORD PTR _plusplusme$7[ebp]
  006b4	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  006b7	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  006bb	2b ca		 sub	 ecx, edx
  006bd	69 55 ec f8 00
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 248
  006c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _sectors
  006c9	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 1420 : 						}

  006cc	e9 6c 03 00 00	 jmp	 $LN49@T_BridgeTh
$LN48@T_BridgeTh:

; 1421 : 						else // Do the regular rise
; 1422 : 						{
; 1423 : 							bridge->sector = &sectors[i];

  006d1	69 45 ec f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  006d8	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  006de	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  006e1	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1424 : 
; 1425 : 							CURSPEED = BASESPEED/2;

  006e4	b8 04 00 00 00	 mov	 eax, 4
  006e9	d1 e0		 shl	 eax, 1
  006eb	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  006ee	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  006f2	99		 cdq
  006f3	2b c2		 sub	 eax, edx
  006f5	d1 f8		 sar	 eax, 1
  006f7	ba 04 00 00 00	 mov	 edx, 4
  006fc	6b ca 03	 imul	 ecx, edx, 3
  006ff	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00702	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 1426 : 
; 1427 : 							// rise back up
; 1428 : 							if (bridge->sector->ceilingheight >= ORIGCEILINGHEIGHT)

  00706	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00709	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0070c	ba 04 00 00 00	 mov	 edx, 4
  00711	c1 e2 00	 shl	 edx, 0
  00714	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00717	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0071a	3b 4c 10 10	 cmp	 ecx, DWORD PTR [eax+edx+16]
  0071e	7c 67		 jl	 SHORT $LN50@T_BridgeTh

; 1429 : 							{
; 1430 : 								bridge->sector->floorheight = ORIGCEILINGHEIGHT - (bridge->sector->ceilingheight - bridge->sector->floorheight);

  00720	b8 04 00 00 00	 mov	 eax, 4
  00725	c1 e0 00	 shl	 eax, 0
  00728	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0072b	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0072e	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00731	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  00734	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00737	2b 11		 sub	 edx, DWORD PTR [ecx]
  00739	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0073c	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00740	2b c2		 sub	 eax, edx
  00742	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00745	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00748	89 02		 mov	 DWORD PTR [edx], eax

; 1431 : 								bridge->sector->ceilingheight = ORIGCEILINGHEIGHT;

  0074a	b8 04 00 00 00	 mov	 eax, 4
  0074f	c1 e0 00	 shl	 eax, 0
  00752	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00755	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00758	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0075b	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  0075f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1432 : 								bridge->sector->ceilspeed = 0;

  00762	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00765	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00768	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 1433 : 								bridge->sector->floorspeed = 0;

  00772	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00775	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00778	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 1434 : 								continue;

  00782	e9 be fe ff ff	 jmp	 $LN14@T_BridgeTh
$LN50@T_BridgeTh:

; 1435 : 							}
; 1436 : 
; 1437 : 							DIRECTION = 1;

  00787	b8 04 00 00 00	 mov	 eax, 4
  0078c	c1 e0 03	 shl	 eax, 3
  0078f	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00792	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 1438 : 							ceilingdestination = ORIGCEILINGHEIGHT;

  0079a	b8 04 00 00 00	 mov	 eax, 4
  0079f	c1 e0 00	 shl	 eax, 0
  007a2	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  007a5	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  007a9	89 55 dc	 mov	 DWORD PTR _ceilingdestination$[ebp], edx

; 1439 : 							floordestination = ORIGFLOORHEIGHT;

  007ac	b8 04 00 00 00	 mov	 eax, 4
  007b1	6b c8 00	 imul	 ecx, eax, 0
  007b4	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  007b7	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  007bb	89 45 d8	 mov	 DWORD PTR _floordestination$[ebp], eax

; 1440 : 
; 1441 : //							CONS_Printf("ceildest: %d, floordest: %d\n", ceilingdestination>>FRACBITS, floordestination>>FRACBITS);
; 1442 : 
; 1443 : 							if ((bridge->sector->ceilingheight - LOWCEILINGHEIGHT)
; 1444 : 								< (ORIGCEILINGHEIGHT - bridge->sector->ceilingheight))

  007be	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  007c1	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  007c4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  007c7	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  007ca	b8 04 00 00 00	 mov	 eax, 4
  007cf	c1 e0 00	 shl	 eax, 0
  007d2	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  007d5	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  007d8	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  007db	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  007df	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  007e2	3b d0		 cmp	 edx, eax
  007e4	0f 8d ca 00 00
	00		 jge	 $LN51@T_BridgeTh

; 1445 : 							{
; 1446 : 								fixed_t origspeed = CURSPEED;

  007ea	b8 04 00 00 00	 mov	 eax, 4
  007ef	6b c8 03	 imul	 ecx, eax, 3
  007f2	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  007f5	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  007f9	89 45 a4	 mov	 DWORD PTR _origspeed$6[ebp], eax

; 1447 : 
; 1448 : 								// Slow down as you get closer to the bottom
; 1449 : 								CURSPEED = FixedMul(CURSPEED,FixedDiv(bridge->sector->ceilingheight - LOWCEILINGHEIGHT, (ORIGCEILINGHEIGHT - LOWCEILINGHEIGHT)>>5));

  007fc	b8 04 00 00 00	 mov	 eax, 4
  00801	c1 e0 00	 shl	 eax, 0
  00804	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00807	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0080b	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  0080e	c1 fa 05	 sar	 edx, 5
  00811	52		 push	 edx
  00812	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00815	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00818	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0081b	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  0081e	52		 push	 edx
  0081f	e8 00 00 00 00	 call	 _FixedDiv
  00824	83 c4 08	 add	 esp, 8
  00827	50		 push	 eax
  00828	b8 04 00 00 00	 mov	 eax, 4
  0082d	6b c8 03	 imul	 ecx, eax, 3
  00830	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00833	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00837	50		 push	 eax
  00838	e8 00 00 00 00	 call	 _FixedMul
  0083d	83 c4 08	 add	 esp, 8
  00840	b9 04 00 00 00	 mov	 ecx, 4
  00845	6b d1 03	 imul	 edx, ecx, 3
  00848	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0084b	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 1450 : 
; 1451 : 								if (CURSPEED <= origspeed/16)

  0084f	b8 04 00 00 00	 mov	 eax, 4
  00854	6b c8 03	 imul	 ecx, eax, 3
  00857	8b 45 a4	 mov	 eax, DWORD PTR _origspeed$6[ebp]
  0085a	99		 cdq
  0085b	83 e2 0f	 and	 edx, 15			; 0000000fH
  0085e	03 c2		 add	 eax, edx
  00860	c1 f8 04	 sar	 eax, 4
  00863	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00866	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  0086a	7f 1d		 jg	 SHORT $LN53@T_BridgeTh

; 1452 : 									CURSPEED = origspeed/16;

  0086c	8b 45 a4	 mov	 eax, DWORD PTR _origspeed$6[ebp]
  0086f	99		 cdq
  00870	83 e2 0f	 and	 edx, 15			; 0000000fH
  00873	03 c2		 add	 eax, edx
  00875	c1 f8 04	 sar	 eax, 4
  00878	b9 04 00 00 00	 mov	 ecx, 4
  0087d	6b d1 03	 imul	 edx, ecx, 3
  00880	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00883	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  00887	eb 26		 jmp	 SHORT $LN55@T_BridgeTh
$LN53@T_BridgeTh:

; 1453 : 								else if (CURSPEED > origspeed)

  00889	b8 04 00 00 00	 mov	 eax, 4
  0088e	6b c8 03	 imul	 ecx, eax, 3
  00891	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00894	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00898	3b 45 a4	 cmp	 eax, DWORD PTR _origspeed$6[ebp]
  0089b	7e 12		 jle	 SHORT $LN55@T_BridgeTh

; 1454 : 									CURSPEED = origspeed;

  0089d	b8 04 00 00 00	 mov	 eax, 4
  008a2	6b c8 03	 imul	 ecx, eax, 3
  008a5	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  008a8	8b 45 a4	 mov	 eax, DWORD PTR _origspeed$6[ebp]
  008ab	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN55@T_BridgeTh:

; 1455 : 							}

  008af	e9 d1 00 00 00	 jmp	 $LN58@T_BridgeTh
$LN51@T_BridgeTh:

; 1456 : 							else
; 1457 : 							{
; 1458 : 								fixed_t origspeed = CURSPEED;

  008b4	b8 04 00 00 00	 mov	 eax, 4
  008b9	6b c8 03	 imul	 ecx, eax, 3
  008bc	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  008bf	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  008c3	89 45 a0	 mov	 DWORD PTR _origspeed$5[ebp], eax

; 1459 : 								// Slow down as you get closer to the top
; 1460 : 								CURSPEED = FixedMul(CURSPEED,FixedDiv(ORIGCEILINGHEIGHT - bridge->sector->ceilingheight, (ORIGCEILINGHEIGHT - LOWCEILINGHEIGHT)>>5));

  008c6	b8 04 00 00 00	 mov	 eax, 4
  008cb	c1 e0 00	 shl	 eax, 0
  008ce	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  008d1	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  008d5	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  008d8	c1 fa 05	 sar	 edx, 5
  008db	52		 push	 edx
  008dc	b8 04 00 00 00	 mov	 eax, 4
  008e1	c1 e0 00	 shl	 eax, 0
  008e4	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  008e7	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  008ea	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  008ed	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  008f1	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  008f4	50		 push	 eax
  008f5	e8 00 00 00 00	 call	 _FixedDiv
  008fa	83 c4 08	 add	 esp, 8
  008fd	50		 push	 eax
  008fe	b9 04 00 00 00	 mov	 ecx, 4
  00903	6b d1 03	 imul	 edx, ecx, 3
  00906	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00909	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  0090d	51		 push	 ecx
  0090e	e8 00 00 00 00	 call	 _FixedMul
  00913	83 c4 08	 add	 esp, 8
  00916	ba 04 00 00 00	 mov	 edx, 4
  0091b	6b ca 03	 imul	 ecx, edx, 3
  0091e	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00921	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 1461 : 
; 1462 : 								if (CURSPEED <= origspeed/16)

  00925	b8 04 00 00 00	 mov	 eax, 4
  0092a	6b c8 03	 imul	 ecx, eax, 3
  0092d	8b 45 a0	 mov	 eax, DWORD PTR _origspeed$5[ebp]
  00930	99		 cdq
  00931	83 e2 0f	 and	 edx, 15			; 0000000fH
  00934	03 c2		 add	 eax, edx
  00936	c1 f8 04	 sar	 eax, 4
  00939	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0093c	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  00940	7f 1d		 jg	 SHORT $LN56@T_BridgeTh

; 1463 : 									CURSPEED = origspeed/16;

  00942	8b 45 a0	 mov	 eax, DWORD PTR _origspeed$5[ebp]
  00945	99		 cdq
  00946	83 e2 0f	 and	 edx, 15			; 0000000fH
  00949	03 c2		 add	 eax, edx
  0094b	c1 f8 04	 sar	 eax, 4
  0094e	b9 04 00 00 00	 mov	 ecx, 4
  00953	6b d1 03	 imul	 edx, ecx, 3
  00956	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00959	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  0095d	eb 26		 jmp	 SHORT $LN58@T_BridgeTh
$LN56@T_BridgeTh:

; 1464 : 								else if (CURSPEED > origspeed)

  0095f	b8 04 00 00 00	 mov	 eax, 4
  00964	6b c8 03	 imul	 ecx, eax, 3
  00967	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0096a	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0096e	3b 45 a0	 cmp	 eax, DWORD PTR _origspeed$5[ebp]
  00971	7e 12		 jle	 SHORT $LN58@T_BridgeTh

; 1465 : 									CURSPEED = origspeed;

  00973	b8 04 00 00 00	 mov	 eax, 4
  00978	6b c8 03	 imul	 ecx, eax, 3
  0097b	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0097e	8b 45 a0	 mov	 eax, DWORD PTR _origspeed$5[ebp]
  00981	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN58@T_BridgeTh:

; 1466 : 							}
; 1467 : 
; 1468 : 							res = T_MovePlane

  00985	b8 04 00 00 00	 mov	 eax, 4
  0098a	c1 e0 03	 shl	 eax, 3
  0098d	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00990	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00994	52		 push	 edx
  00995	6a 01		 push	 1
  00997	6a 00		 push	 0
  00999	8b 45 dc	 mov	 eax, DWORD PTR _ceilingdestination$[ebp]
  0099c	50		 push	 eax
  0099d	b9 04 00 00 00	 mov	 ecx, 4
  009a2	6b d1 03	 imul	 edx, ecx, 3
  009a5	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  009a8	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  009ac	51		 push	 ecx
  009ad	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  009b0	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  009b3	50		 push	 eax
  009b4	e8 00 00 00 00	 call	 _T_MovePlane
  009b9	83 c4 18	 add	 esp, 24			; 00000018H
  009bc	89 45 d4	 mov	 DWORD PTR _res$[ebp], eax

; 1469 : 							(
; 1470 : 								bridge->sector,         // sector
; 1471 : 								CURSPEED,          // speed
; 1472 : 								ceilingdestination, // dest
; 1473 : 								0,                        // crush
; 1474 : 								1,                        // floor or ceiling (1 for ceiling)
; 1475 : 								DIRECTION       // direction
; 1476 : 							);
; 1477 : 
; 1478 : 							if (res == ok || res == pastdest)

  009bf	83 7d d4 00	 cmp	 DWORD PTR _res$[ebp], 0
  009c3	74 06		 je	 SHORT $LN60@T_BridgeTh
  009c5	83 7d d4 02	 cmp	 DWORD PTR _res$[ebp], 2
  009c9	75 37		 jne	 SHORT $LN59@T_BridgeTh
$LN60@T_BridgeTh:

; 1479 : 								T_MovePlane

  009cb	b8 04 00 00 00	 mov	 eax, 4
  009d0	c1 e0 03	 shl	 eax, 3
  009d3	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  009d6	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  009da	52		 push	 edx
  009db	6a 00		 push	 0
  009dd	6a 00		 push	 0
  009df	8b 45 d8	 mov	 eax, DWORD PTR _floordestination$[ebp]
  009e2	50		 push	 eax
  009e3	b9 04 00 00 00	 mov	 ecx, 4
  009e8	6b d1 03	 imul	 edx, ecx, 3
  009eb	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  009ee	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  009f2	51		 push	 ecx
  009f3	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  009f6	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  009f9	50		 push	 eax
  009fa	e8 00 00 00 00	 call	 _T_MovePlane
  009ff	83 c4 18	 add	 esp, 24			; 00000018H
$LN59@T_BridgeTh:

; 1480 : 								(
; 1481 : 									bridge->sector,           // sector
; 1482 : 									CURSPEED,            // speed
; 1483 : 									floordestination, // dest
; 1484 : 									0,                          // crush
; 1485 : 									0,                          // floor or ceiling (0 for floor)
; 1486 : 									DIRECTION         // direction
; 1487 : 								);
; 1488 : 
; 1489 : 							bridge->sector->ceilspeed = 42;

  00a02	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00a05	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00a08	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 1490 : 							bridge->sector->floorspeed = CURSPEED*DIRECTION;

  00a12	b8 04 00 00 00	 mov	 eax, 4
  00a17	6b c8 03	 imul	 ecx, eax, 3
  00a1a	ba 04 00 00 00	 mov	 edx, 4
  00a1f	c1 e2 03	 shl	 edx, 3
  00a22	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00a25	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00a28	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  00a2c	0f af 4c 16 10	 imul	 ecx, DWORD PTR [esi+edx+16]
  00a31	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00a34	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00a37	89 88 e8 00 00
	00		 mov	 DWORD PTR [eax+232], ecx
$LN49@T_BridgeTh:

; 1491 : 						}
; 1492 : 					}

  00a3d	e9 03 fc ff ff	 jmp	 $LN14@T_BridgeTh
$LN15@T_BridgeTh:

; 1493 : 				}

  00a42	e9 cf fb ff ff	 jmp	 $LN11@T_BridgeTh
$LN12@T_BridgeTh:

; 1494 : 			}
; 1495 : 
; 1496 : 			// Now the other side
; 1497 : 			divisor = ENDTAG + (ENDTAG-STARTTAG) + 1;

  00a47	b8 04 00 00 00	 mov	 eax, 4
  00a4c	6b c8 05	 imul	 ecx, eax, 5
  00a4f	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00a52	0f bf 44 0a 10	 movsx	 eax, WORD PTR [edx+ecx+16]
  00a57	b9 04 00 00 00	 mov	 ecx, 4
  00a5c	6b d1 05	 imul	 edx, ecx, 5
  00a5f	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00a62	0f bf 54 11 10	 movsx	 edx, WORD PTR [ecx+edx+16]
  00a67	b9 04 00 00 00	 mov	 ecx, 4
  00a6c	c1 e1 02	 shl	 ecx, 2
  00a6f	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00a72	0f bf 4c 0e 10	 movsx	 ecx, WORD PTR [esi+ecx+16]
  00a77	2b d1		 sub	 edx, ecx
  00a79	8d 54 10 01	 lea	 edx, DWORD PTR [eax+edx+1]
  00a7d	89 55 b4	 mov	 DWORD PTR _divisor$10[ebp], edx

; 1498 : 			divisor -= sourcesec->tag;

  00a80	8b 45 b8	 mov	 eax, DWORD PTR _sourcesec$11[ebp]
  00a83	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  00a87	8b 55 b4	 mov	 edx, DWORD PTR _divisor$10[ebp]
  00a8a	2b d1		 sub	 edx, ecx
  00a8c	89 55 b4	 mov	 DWORD PTR _divisor$10[ebp], edx

; 1499 : 
; 1500 : 			if (divisor > 0)

  00a8f	83 7d b4 00	 cmp	 DWORD PTR _divisor$10[ebp], 0
  00a93	0f 8e 6b 04 00
	00		 jle	 $LN18@T_BridgeTh

; 1501 : 			{
; 1502 : 				interval = heightdiff/divisor;

  00a99	8b 45 b0	 mov	 eax, DWORD PTR _heightdiff$9[ebp]
  00a9c	99		 cdq
  00a9d	f7 7d b4	 idiv	 DWORD PTR _divisor$10[ebp]
  00aa0	89 45 ac	 mov	 DWORD PTR _interval$8[ebp], eax

; 1503 : 				plusplusme = 0;

  00aa3	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _plusplusme$7[ebp], 0

; 1504 : 
; 1505 : //				CONS_Printf("interval2 is %d\n", interval>>FRACBITS);
; 1506 : 
; 1507 : 				for (j = (INT16)(sourcesec->tag+1); j <= ENDTAG + (ENDTAG-STARTTAG) + 1; j++, plusplusme++)

  00aaa	8b 45 b8	 mov	 eax, DWORD PTR _sourcesec$11[ebp]
  00aad	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  00ab1	83 c1 01	 add	 ecx, 1
  00ab4	66 89 4d e4	 mov	 WORD PTR _j$[ebp], cx
  00ab8	eb 15		 jmp	 SHORT $LN19@T_BridgeTh
$LN17@T_BridgeTh:
  00aba	66 8b 45 e4	 mov	 ax, WORD PTR _j$[ebp]
  00abe	66 83 c0 01	 add	 ax, 1
  00ac2	66 89 45 e4	 mov	 WORD PTR _j$[ebp], ax
  00ac6	8b 4d a8	 mov	 ecx, DWORD PTR _plusplusme$7[ebp]
  00ac9	83 c1 01	 add	 ecx, 1
  00acc	89 4d a8	 mov	 DWORD PTR _plusplusme$7[ebp], ecx
$LN19@T_BridgeTh:
  00acf	0f bf 45 e4	 movsx	 eax, WORD PTR _j$[ebp]
  00ad3	b9 04 00 00 00	 mov	 ecx, 4
  00ad8	6b d1 05	 imul	 edx, ecx, 5
  00adb	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00ade	0f bf 54 11 10	 movsx	 edx, WORD PTR [ecx+edx+16]
  00ae3	b9 04 00 00 00	 mov	 ecx, 4
  00ae8	6b c9 05	 imul	 ecx, ecx, 5
  00aeb	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00aee	0f bf 4c 0e 10	 movsx	 ecx, WORD PTR [esi+ecx+16]
  00af3	be 04 00 00 00	 mov	 esi, 4
  00af8	c1 e6 02	 shl	 esi, 2
  00afb	8b 7d 08	 mov	 edi, DWORD PTR _bridge$[ebp]
  00afe	0f bf 74 37 10	 movsx	 esi, WORD PTR [edi+esi+16]
  00b03	2b ce		 sub	 ecx, esi
  00b05	8d 54 0a 01	 lea	 edx, DWORD PTR [edx+ecx+1]
  00b09	3b c2		 cmp	 eax, edx
  00b0b	0f 8f f3 03 00
	00		 jg	 $LN18@T_BridgeTh

; 1508 : 				{
; 1509 : 					for (i = -1; (i = P_FindSectorFromTag(j, i)) >= 0 ;)

  00b11	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN20@T_BridgeTh:
  00b18	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00b1b	50		 push	 eax
  00b1c	0f b7 4d e4	 movzx	 ecx, WORD PTR _j$[ebp]
  00b20	51		 push	 ecx
  00b21	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00b26	83 c4 08	 add	 esp, 8
  00b29	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  00b2c	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  00b30	0f 8c c9 03 00
	00		 jl	 $LN21@T_BridgeTh

; 1510 : 					{
; 1511 : 						if (sectors[i].ceilingheight >= sourcesec->ceilingheight)

  00b36	69 45 ec f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00b3d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sectors
  00b43	8b 55 b8	 mov	 edx, DWORD PTR _sourcesec$11[ebp]
  00b46	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  00b4a	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00b4d	7c 3f		 jl	 SHORT $LN62@T_BridgeTh

; 1512 : 						{
; 1513 : 							sectors[i].ceilingheight = sourcesec->ceilingheight + (interval*plusplusme);

  00b4f	8b 45 ac	 mov	 eax, DWORD PTR _interval$8[ebp]
  00b52	0f af 45 a8	 imul	 eax, DWORD PTR _plusplusme$7[ebp]
  00b56	8b 4d b8	 mov	 ecx, DWORD PTR _sourcesec$11[ebp]
  00b59	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00b5c	69 55 ec f8 00
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 248
  00b63	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sectors
  00b69	89 44 11 04	 mov	 DWORD PTR [ecx+edx+4], eax

; 1514 : 							sectors[i].floorheight = sourcesec->floorheight + (interval*plusplusme);

  00b6d	8b 45 ac	 mov	 eax, DWORD PTR _interval$8[ebp]
  00b70	0f af 45 a8	 imul	 eax, DWORD PTR _plusplusme$7[ebp]
  00b74	8b 4d b8	 mov	 ecx, DWORD PTR _sourcesec$11[ebp]
  00b77	03 01		 add	 eax, DWORD PTR [ecx]
  00b79	69 55 ec f8 00
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 248
  00b80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sectors
  00b86	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 1515 : 						}

  00b89	e9 6c 03 00 00	 jmp	 $LN63@T_BridgeTh
$LN62@T_BridgeTh:

; 1516 : 						else // Do the regular rise
; 1517 : 						{
; 1518 : 							bridge->sector = &sectors[i];

  00b8e	69 45 ec f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00b95	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00b9b	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00b9e	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1519 : 
; 1520 : 							CURSPEED = BASESPEED/2;

  00ba1	b8 04 00 00 00	 mov	 eax, 4
  00ba6	d1 e0		 shl	 eax, 1
  00ba8	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00bab	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00baf	99		 cdq
  00bb0	2b c2		 sub	 eax, edx
  00bb2	d1 f8		 sar	 eax, 1
  00bb4	ba 04 00 00 00	 mov	 edx, 4
  00bb9	6b ca 03	 imul	 ecx, edx, 3
  00bbc	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00bbf	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 1521 : 
; 1522 : 							// rise back up
; 1523 : 							if (bridge->sector->ceilingheight >= ORIGCEILINGHEIGHT)

  00bc3	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00bc6	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00bc9	ba 04 00 00 00	 mov	 edx, 4
  00bce	c1 e2 00	 shl	 edx, 0
  00bd1	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00bd4	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00bd7	3b 4c 10 10	 cmp	 ecx, DWORD PTR [eax+edx+16]
  00bdb	7c 67		 jl	 SHORT $LN64@T_BridgeTh

; 1524 : 							{
; 1525 : 								bridge->sector->floorheight = ORIGCEILINGHEIGHT - (bridge->sector->ceilingheight - bridge->sector->floorheight);

  00bdd	b8 04 00 00 00	 mov	 eax, 4
  00be2	c1 e0 00	 shl	 eax, 0
  00be5	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00be8	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00beb	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00bee	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  00bf1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00bf4	2b 11		 sub	 edx, DWORD PTR [ecx]
  00bf6	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00bf9	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00bfd	2b c2		 sub	 eax, edx
  00bff	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00c02	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00c05	89 02		 mov	 DWORD PTR [edx], eax

; 1526 : 								bridge->sector->ceilingheight = ORIGCEILINGHEIGHT;

  00c07	b8 04 00 00 00	 mov	 eax, 4
  00c0c	c1 e0 00	 shl	 eax, 0
  00c0f	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00c12	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00c15	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00c18	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00c1c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1527 : 								bridge->sector->ceilspeed = 0;

  00c1f	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00c22	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00c25	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 1528 : 								bridge->sector->floorspeed = 0;

  00c2f	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00c32	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00c35	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 1529 : 								continue;

  00c3f	e9 d4 fe ff ff	 jmp	 $LN20@T_BridgeTh
$LN64@T_BridgeTh:

; 1530 : 							}
; 1531 : 
; 1532 : 							DIRECTION = 1;

  00c44	b8 04 00 00 00	 mov	 eax, 4
  00c49	c1 e0 03	 shl	 eax, 3
  00c4c	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00c4f	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 1533 : 							ceilingdestination = ORIGCEILINGHEIGHT;

  00c57	b8 04 00 00 00	 mov	 eax, 4
  00c5c	c1 e0 00	 shl	 eax, 0
  00c5f	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00c62	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00c66	89 55 dc	 mov	 DWORD PTR _ceilingdestination$[ebp], edx

; 1534 : 							floordestination = ORIGFLOORHEIGHT;

  00c69	b8 04 00 00 00	 mov	 eax, 4
  00c6e	6b c8 00	 imul	 ecx, eax, 0
  00c71	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00c74	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00c78	89 45 d8	 mov	 DWORD PTR _floordestination$[ebp], eax

; 1535 : 
; 1536 : //							CONS_Printf("ceildest: %d, floordest: %d\n", ceilingdestination>>FRACBITS, floordestination>>FRACBITS);
; 1537 : 
; 1538 : 							if ((bridge->sector->ceilingheight - LOWCEILINGHEIGHT)
; 1539 : 								< (ORIGCEILINGHEIGHT - bridge->sector->ceilingheight))

  00c7b	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00c7e	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00c81	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00c84	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  00c87	b8 04 00 00 00	 mov	 eax, 4
  00c8c	c1 e0 00	 shl	 eax, 0
  00c8f	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00c92	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  00c95	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00c98	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  00c9c	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00c9f	3b d0		 cmp	 edx, eax
  00ca1	0f 8d ca 00 00
	00		 jge	 $LN65@T_BridgeTh

; 1540 : 							{
; 1541 : 								fixed_t origspeed = CURSPEED;

  00ca7	b8 04 00 00 00	 mov	 eax, 4
  00cac	6b c8 03	 imul	 ecx, eax, 3
  00caf	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00cb2	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00cb6	89 45 9c	 mov	 DWORD PTR _origspeed$4[ebp], eax

; 1542 : 
; 1543 : 								// Slow down as you get closer to the bottom
; 1544 : 								CURSPEED = FixedMul(CURSPEED,FixedDiv(bridge->sector->ceilingheight - LOWCEILINGHEIGHT, (ORIGCEILINGHEIGHT - LOWCEILINGHEIGHT)>>5));

  00cb9	b8 04 00 00 00	 mov	 eax, 4
  00cbe	c1 e0 00	 shl	 eax, 0
  00cc1	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00cc4	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00cc8	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  00ccb	c1 fa 05	 sar	 edx, 5
  00cce	52		 push	 edx
  00ccf	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00cd2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00cd5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00cd8	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  00cdb	52		 push	 edx
  00cdc	e8 00 00 00 00	 call	 _FixedDiv
  00ce1	83 c4 08	 add	 esp, 8
  00ce4	50		 push	 eax
  00ce5	b8 04 00 00 00	 mov	 eax, 4
  00cea	6b c8 03	 imul	 ecx, eax, 3
  00ced	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00cf0	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00cf4	50		 push	 eax
  00cf5	e8 00 00 00 00	 call	 _FixedMul
  00cfa	83 c4 08	 add	 esp, 8
  00cfd	b9 04 00 00 00	 mov	 ecx, 4
  00d02	6b d1 03	 imul	 edx, ecx, 3
  00d05	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00d08	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 1545 : 
; 1546 : 								if (CURSPEED <= origspeed/16)

  00d0c	b8 04 00 00 00	 mov	 eax, 4
  00d11	6b c8 03	 imul	 ecx, eax, 3
  00d14	8b 45 9c	 mov	 eax, DWORD PTR _origspeed$4[ebp]
  00d17	99		 cdq
  00d18	83 e2 0f	 and	 edx, 15			; 0000000fH
  00d1b	03 c2		 add	 eax, edx
  00d1d	c1 f8 04	 sar	 eax, 4
  00d20	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00d23	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  00d27	7f 1d		 jg	 SHORT $LN67@T_BridgeTh

; 1547 : 									CURSPEED = origspeed/16;

  00d29	8b 45 9c	 mov	 eax, DWORD PTR _origspeed$4[ebp]
  00d2c	99		 cdq
  00d2d	83 e2 0f	 and	 edx, 15			; 0000000fH
  00d30	03 c2		 add	 eax, edx
  00d32	c1 f8 04	 sar	 eax, 4
  00d35	b9 04 00 00 00	 mov	 ecx, 4
  00d3a	6b d1 03	 imul	 edx, ecx, 3
  00d3d	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00d40	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  00d44	eb 26		 jmp	 SHORT $LN69@T_BridgeTh
$LN67@T_BridgeTh:

; 1548 : 								else if (CURSPEED > origspeed)

  00d46	b8 04 00 00 00	 mov	 eax, 4
  00d4b	6b c8 03	 imul	 ecx, eax, 3
  00d4e	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00d51	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00d55	3b 45 9c	 cmp	 eax, DWORD PTR _origspeed$4[ebp]
  00d58	7e 12		 jle	 SHORT $LN69@T_BridgeTh

; 1549 : 									CURSPEED = origspeed;

  00d5a	b8 04 00 00 00	 mov	 eax, 4
  00d5f	6b c8 03	 imul	 ecx, eax, 3
  00d62	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00d65	8b 45 9c	 mov	 eax, DWORD PTR _origspeed$4[ebp]
  00d68	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN69@T_BridgeTh:

; 1550 : 							}

  00d6c	e9 d1 00 00 00	 jmp	 $LN72@T_BridgeTh
$LN65@T_BridgeTh:

; 1551 : 							else
; 1552 : 							{
; 1553 : 								fixed_t origspeed = CURSPEED;

  00d71	b8 04 00 00 00	 mov	 eax, 4
  00d76	6b c8 03	 imul	 ecx, eax, 3
  00d79	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00d7c	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00d80	89 45 98	 mov	 DWORD PTR _origspeed$3[ebp], eax

; 1554 : 								// Slow down as you get closer to the top
; 1555 : 								CURSPEED = FixedMul(CURSPEED,FixedDiv(ORIGCEILINGHEIGHT - bridge->sector->ceilingheight, (ORIGCEILINGHEIGHT - LOWCEILINGHEIGHT)>>5));

  00d83	b8 04 00 00 00	 mov	 eax, 4
  00d88	c1 e0 00	 shl	 eax, 0
  00d8b	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00d8e	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00d92	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  00d95	c1 fa 05	 sar	 edx, 5
  00d98	52		 push	 edx
  00d99	b8 04 00 00 00	 mov	 eax, 4
  00d9e	c1 e0 00	 shl	 eax, 0
  00da1	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00da4	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00da7	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00daa	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00dae	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00db1	50		 push	 eax
  00db2	e8 00 00 00 00	 call	 _FixedDiv
  00db7	83 c4 08	 add	 esp, 8
  00dba	50		 push	 eax
  00dbb	b9 04 00 00 00	 mov	 ecx, 4
  00dc0	6b d1 03	 imul	 edx, ecx, 3
  00dc3	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00dc6	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00dca	51		 push	 ecx
  00dcb	e8 00 00 00 00	 call	 _FixedMul
  00dd0	83 c4 08	 add	 esp, 8
  00dd3	ba 04 00 00 00	 mov	 edx, 4
  00dd8	6b ca 03	 imul	 ecx, edx, 3
  00ddb	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00dde	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 1556 : 
; 1557 : 								if (CURSPEED <= origspeed/16)

  00de2	b8 04 00 00 00	 mov	 eax, 4
  00de7	6b c8 03	 imul	 ecx, eax, 3
  00dea	8b 45 98	 mov	 eax, DWORD PTR _origspeed$3[ebp]
  00ded	99		 cdq
  00dee	83 e2 0f	 and	 edx, 15			; 0000000fH
  00df1	03 c2		 add	 eax, edx
  00df3	c1 f8 04	 sar	 eax, 4
  00df6	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00df9	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  00dfd	7f 1d		 jg	 SHORT $LN70@T_BridgeTh

; 1558 : 									CURSPEED = origspeed/16;

  00dff	8b 45 98	 mov	 eax, DWORD PTR _origspeed$3[ebp]
  00e02	99		 cdq
  00e03	83 e2 0f	 and	 edx, 15			; 0000000fH
  00e06	03 c2		 add	 eax, edx
  00e08	c1 f8 04	 sar	 eax, 4
  00e0b	b9 04 00 00 00	 mov	 ecx, 4
  00e10	6b d1 03	 imul	 edx, ecx, 3
  00e13	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00e16	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  00e1a	eb 26		 jmp	 SHORT $LN72@T_BridgeTh
$LN70@T_BridgeTh:

; 1559 : 								else if (CURSPEED > origspeed)

  00e1c	b8 04 00 00 00	 mov	 eax, 4
  00e21	6b c8 03	 imul	 ecx, eax, 3
  00e24	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00e27	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00e2b	3b 45 98	 cmp	 eax, DWORD PTR _origspeed$3[ebp]
  00e2e	7e 12		 jle	 SHORT $LN72@T_BridgeTh

; 1560 : 									CURSPEED = origspeed;

  00e30	b8 04 00 00 00	 mov	 eax, 4
  00e35	6b c8 03	 imul	 ecx, eax, 3
  00e38	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00e3b	8b 45 98	 mov	 eax, DWORD PTR _origspeed$3[ebp]
  00e3e	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN72@T_BridgeTh:

; 1561 : 							}
; 1562 : 
; 1563 : 							res = T_MovePlane

  00e42	b8 04 00 00 00	 mov	 eax, 4
  00e47	c1 e0 03	 shl	 eax, 3
  00e4a	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00e4d	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00e51	52		 push	 edx
  00e52	6a 01		 push	 1
  00e54	6a 00		 push	 0
  00e56	8b 45 dc	 mov	 eax, DWORD PTR _ceilingdestination$[ebp]
  00e59	50		 push	 eax
  00e5a	b9 04 00 00 00	 mov	 ecx, 4
  00e5f	6b d1 03	 imul	 edx, ecx, 3
  00e62	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00e65	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00e69	51		 push	 ecx
  00e6a	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00e6d	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00e70	50		 push	 eax
  00e71	e8 00 00 00 00	 call	 _T_MovePlane
  00e76	83 c4 18	 add	 esp, 24			; 00000018H
  00e79	89 45 d4	 mov	 DWORD PTR _res$[ebp], eax

; 1564 : 							(
; 1565 : 								bridge->sector,         // sector
; 1566 : 								CURSPEED,          // speed
; 1567 : 								ceilingdestination, // dest
; 1568 : 								0,                        // crush
; 1569 : 								1,                        // floor or ceiling (1 for ceiling)
; 1570 : 								DIRECTION       // direction
; 1571 : 							);
; 1572 : 
; 1573 : 							if (res == ok || res == pastdest)

  00e7c	83 7d d4 00	 cmp	 DWORD PTR _res$[ebp], 0
  00e80	74 06		 je	 SHORT $LN74@T_BridgeTh
  00e82	83 7d d4 02	 cmp	 DWORD PTR _res$[ebp], 2
  00e86	75 37		 jne	 SHORT $LN73@T_BridgeTh
$LN74@T_BridgeTh:

; 1574 : 								T_MovePlane

  00e88	b8 04 00 00 00	 mov	 eax, 4
  00e8d	c1 e0 03	 shl	 eax, 3
  00e90	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00e93	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00e97	52		 push	 edx
  00e98	6a 00		 push	 0
  00e9a	6a 00		 push	 0
  00e9c	8b 45 d8	 mov	 eax, DWORD PTR _floordestination$[ebp]
  00e9f	50		 push	 eax
  00ea0	b9 04 00 00 00	 mov	 ecx, 4
  00ea5	6b d1 03	 imul	 edx, ecx, 3
  00ea8	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00eab	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00eaf	51		 push	 ecx
  00eb0	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00eb3	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00eb6	50		 push	 eax
  00eb7	e8 00 00 00 00	 call	 _T_MovePlane
  00ebc	83 c4 18	 add	 esp, 24			; 00000018H
$LN73@T_BridgeTh:

; 1575 : 								(
; 1576 : 									bridge->sector,           // sector
; 1577 : 									CURSPEED,            // speed
; 1578 : 									floordestination, // dest
; 1579 : 									0,                          // crush
; 1580 : 									0,                          // floor or ceiling (0 for floor)
; 1581 : 									DIRECTION         // direction
; 1582 : 								);
; 1583 : 
; 1584 : 							bridge->sector->ceilspeed = 42;

  00ebf	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00ec2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00ec5	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 1585 : 							bridge->sector->floorspeed = CURSPEED*DIRECTION;

  00ecf	b8 04 00 00 00	 mov	 eax, 4
  00ed4	6b c8 03	 imul	 ecx, eax, 3
  00ed7	ba 04 00 00 00	 mov	 edx, 4
  00edc	c1 e2 03	 shl	 edx, 3
  00edf	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00ee2	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00ee5	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  00ee9	0f af 4c 16 10	 imul	 ecx, DWORD PTR [esi+edx+16]
  00eee	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00ef1	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00ef4	89 88 e8 00 00
	00		 mov	 DWORD PTR [eax+232], ecx
$LN63@T_BridgeTh:

; 1586 : 						}
; 1587 : 					}

  00efa	e9 19 fc ff ff	 jmp	 $LN20@T_BridgeTh
$LN21@T_BridgeTh:

; 1588 : 				}

  00eff	e9 b6 fb ff ff	 jmp	 $LN17@T_BridgeTh
$LN18@T_BridgeTh:

; 1589 : 			}
; 1590 : 		}
; 1591 : 
; 1592 : 	//	for (i = -1; (i = P_FindSectorFromTag(bridge->sourceline->tag, i)) >= 0 ;)
; 1593 : 	//		P_RecalcPrecipInSector(&sectors[i]);
; 1594 : 	}

  00f04	e9 02 04 00 00	 jmp	 $LN24@T_BridgeTh
$LN34@T_BridgeTh:

; 1595 : 	else
; 1596 : 	{
; 1597 : 		// Iterate control sectors
; 1598 : 		for (j = (INT16)(ENDTAG+1); j <= (ENDTAG+(ENDTAG-STARTTAG)+1); j++)

  00f09	b8 04 00 00 00	 mov	 eax, 4
  00f0e	6b c8 05	 imul	 ecx, eax, 5
  00f11	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00f14	0f bf 44 0a 10	 movsx	 eax, WORD PTR [edx+ecx+16]
  00f19	83 c0 01	 add	 eax, 1
  00f1c	66 89 45 e4	 mov	 WORD PTR _j$[ebp], ax
  00f20	eb 0c		 jmp	 SHORT $LN25@T_BridgeTh
$LN23@T_BridgeTh:
  00f22	66 8b 45 e4	 mov	 ax, WORD PTR _j$[ebp]
  00f26	66 83 c0 01	 add	 ax, 1
  00f2a	66 89 45 e4	 mov	 WORD PTR _j$[ebp], ax
$LN25@T_BridgeTh:
  00f2e	0f bf 45 e4	 movsx	 eax, WORD PTR _j$[ebp]
  00f32	b9 04 00 00 00	 mov	 ecx, 4
  00f37	6b d1 05	 imul	 edx, ecx, 5
  00f3a	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00f3d	0f bf 54 11 10	 movsx	 edx, WORD PTR [ecx+edx+16]
  00f42	b9 04 00 00 00	 mov	 ecx, 4
  00f47	6b c9 05	 imul	 ecx, ecx, 5
  00f4a	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  00f4d	0f bf 4c 0e 10	 movsx	 ecx, WORD PTR [esi+ecx+16]
  00f52	be 04 00 00 00	 mov	 esi, 4
  00f57	c1 e6 02	 shl	 esi, 2
  00f5a	8b 7d 08	 mov	 edi, DWORD PTR _bridge$[ebp]
  00f5d	0f bf 74 37 10	 movsx	 esi, WORD PTR [edi+esi+16]
  00f62	2b ce		 sub	 ecx, esi
  00f64	8d 54 0a 01	 lea	 edx, DWORD PTR [edx+ecx+1]
  00f68	3b c2		 cmp	 eax, edx
  00f6a	0f 8f 9b 03 00
	00		 jg	 $LN24@T_BridgeTh

; 1599 : 		{
; 1600 : 			for (i = -1; (i = P_FindSectorFromTag(j, i)) >= 0 ;)

  00f70	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN26@T_BridgeTh:
  00f77	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00f7a	50		 push	 eax
  00f7b	0f b7 4d e4	 movzx	 ecx, WORD PTR _j$[ebp]
  00f7f	51		 push	 ecx
  00f80	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00f85	83 c4 08	 add	 esp, 8
  00f88	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  00f8b	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  00f8f	0f 8c 71 03 00
	00		 jl	 $LN27@T_BridgeTh

; 1601 : 			{
; 1602 : 				bridge->sector = &sectors[i];

  00f95	69 45 ec f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00f9c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00fa2	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00fa5	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1603 : 
; 1604 : 				CURSPEED = BASESPEED/2;

  00fa8	b8 04 00 00 00	 mov	 eax, 4
  00fad	d1 e0		 shl	 eax, 1
  00faf	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00fb2	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00fb6	99		 cdq
  00fb7	2b c2		 sub	 eax, edx
  00fb9	d1 f8		 sar	 eax, 1
  00fbb	ba 04 00 00 00	 mov	 edx, 4
  00fc0	6b ca 03	 imul	 ecx, edx, 3
  00fc3	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  00fc6	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 1605 : 
; 1606 : 				// rise back up
; 1607 : 				if (bridge->sector->ceilingheight >= ORIGCEILINGHEIGHT)

  00fca	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00fcd	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00fd0	ba 04 00 00 00	 mov	 edx, 4
  00fd5	c1 e2 00	 shl	 edx, 0
  00fd8	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  00fdb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00fde	3b 4c 10 10	 cmp	 ecx, DWORD PTR [eax+edx+16]
  00fe2	7c 67		 jl	 SHORT $LN75@T_BridgeTh

; 1608 : 				{
; 1609 : 					bridge->sector->floorheight = ORIGCEILINGHEIGHT - (bridge->sector->ceilingheight - bridge->sector->floorheight);

  00fe4	b8 04 00 00 00	 mov	 eax, 4
  00fe9	c1 e0 00	 shl	 eax, 0
  00fec	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00fef	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00ff2	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  00ff5	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  00ff8	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00ffb	2b 11		 sub	 edx, DWORD PTR [ecx]
  00ffd	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01000	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  01004	2b c2		 sub	 eax, edx
  01006	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01009	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0100c	89 02		 mov	 DWORD PTR [edx], eax

; 1610 : 					bridge->sector->ceilingheight = ORIGCEILINGHEIGHT;

  0100e	b8 04 00 00 00	 mov	 eax, 4
  01013	c1 e0 00	 shl	 eax, 0
  01016	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01019	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0101c	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0101f	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  01023	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1611 : 					bridge->sector->ceilspeed = 0;

  01026	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  01029	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0102c	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 1612 : 					bridge->sector->floorspeed = 0;

  01036	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  01039	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0103c	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 1613 : 					continue;

  01046	e9 2c ff ff ff	 jmp	 $LN26@T_BridgeTh
$LN75@T_BridgeTh:

; 1614 : 				}
; 1615 : 
; 1616 : 				DIRECTION = 1;

  0104b	b8 04 00 00 00	 mov	 eax, 4
  01050	c1 e0 03	 shl	 eax, 3
  01053	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01056	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 1617 : 				ceilingdestination = ORIGCEILINGHEIGHT;

  0105e	b8 04 00 00 00	 mov	 eax, 4
  01063	c1 e0 00	 shl	 eax, 0
  01066	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01069	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0106d	89 55 dc	 mov	 DWORD PTR _ceilingdestination$[ebp], edx

; 1618 : 				floordestination = ORIGFLOORHEIGHT;

  01070	b8 04 00 00 00	 mov	 eax, 4
  01075	6b c8 00	 imul	 ecx, eax, 0
  01078	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0107b	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0107f	89 45 d8	 mov	 DWORD PTR _floordestination$[ebp], eax

; 1619 : 
; 1620 : //				CONS_Printf("ceildest: %d, floordest: %d\n", ceilingdestination>>FRACBITS, floordestination>>FRACBITS);
; 1621 : 
; 1622 : 				if ((bridge->sector->ceilingheight - LOWCEILINGHEIGHT)
; 1623 : 					< (ORIGCEILINGHEIGHT - bridge->sector->ceilingheight))

  01082	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  01085	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  01088	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0108b	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  0108e	b8 04 00 00 00	 mov	 eax, 4
  01093	c1 e0 00	 shl	 eax, 0
  01096	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01099	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  0109c	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  0109f	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  010a3	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  010a6	3b d0		 cmp	 edx, eax
  010a8	0f 8d ca 00 00
	00		 jge	 $LN76@T_BridgeTh

; 1624 : 				{
; 1625 : 					fixed_t origspeed = CURSPEED;

  010ae	b8 04 00 00 00	 mov	 eax, 4
  010b3	6b c8 03	 imul	 ecx, eax, 3
  010b6	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  010b9	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  010bd	89 45 94	 mov	 DWORD PTR _origspeed$2[ebp], eax

; 1626 : 
; 1627 : 					// Slow down as you get closer to the bottom
; 1628 : 					CURSPEED = FixedMul(CURSPEED,FixedDiv(bridge->sector->ceilingheight - LOWCEILINGHEIGHT, (ORIGCEILINGHEIGHT - LOWCEILINGHEIGHT)>>5));

  010c0	b8 04 00 00 00	 mov	 eax, 4
  010c5	c1 e0 00	 shl	 eax, 0
  010c8	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  010cb	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  010cf	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  010d2	c1 fa 05	 sar	 edx, 5
  010d5	52		 push	 edx
  010d6	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  010d9	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  010dc	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  010df	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  010e2	52		 push	 edx
  010e3	e8 00 00 00 00	 call	 _FixedDiv
  010e8	83 c4 08	 add	 esp, 8
  010eb	50		 push	 eax
  010ec	b8 04 00 00 00	 mov	 eax, 4
  010f1	6b c8 03	 imul	 ecx, eax, 3
  010f4	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  010f7	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  010fb	50		 push	 eax
  010fc	e8 00 00 00 00	 call	 _FixedMul
  01101	83 c4 08	 add	 esp, 8
  01104	b9 04 00 00 00	 mov	 ecx, 4
  01109	6b d1 03	 imul	 edx, ecx, 3
  0110c	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0110f	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 1629 : 
; 1630 : 					if (CURSPEED <= origspeed/16)

  01113	b8 04 00 00 00	 mov	 eax, 4
  01118	6b c8 03	 imul	 ecx, eax, 3
  0111b	8b 45 94	 mov	 eax, DWORD PTR _origspeed$2[ebp]
  0111e	99		 cdq
  0111f	83 e2 0f	 and	 edx, 15			; 0000000fH
  01122	03 c2		 add	 eax, edx
  01124	c1 f8 04	 sar	 eax, 4
  01127	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0112a	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  0112e	7f 1d		 jg	 SHORT $LN78@T_BridgeTh

; 1631 : 						CURSPEED = origspeed/16;

  01130	8b 45 94	 mov	 eax, DWORD PTR _origspeed$2[ebp]
  01133	99		 cdq
  01134	83 e2 0f	 and	 edx, 15			; 0000000fH
  01137	03 c2		 add	 eax, edx
  01139	c1 f8 04	 sar	 eax, 4
  0113c	b9 04 00 00 00	 mov	 ecx, 4
  01141	6b d1 03	 imul	 edx, ecx, 3
  01144	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01147	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  0114b	eb 26		 jmp	 SHORT $LN80@T_BridgeTh
$LN78@T_BridgeTh:

; 1632 : 					else if (CURSPEED > origspeed)

  0114d	b8 04 00 00 00	 mov	 eax, 4
  01152	6b c8 03	 imul	 ecx, eax, 3
  01155	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  01158	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0115c	3b 45 94	 cmp	 eax, DWORD PTR _origspeed$2[ebp]
  0115f	7e 12		 jle	 SHORT $LN80@T_BridgeTh

; 1633 : 						CURSPEED = origspeed;

  01161	b8 04 00 00 00	 mov	 eax, 4
  01166	6b c8 03	 imul	 ecx, eax, 3
  01169	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0116c	8b 45 94	 mov	 eax, DWORD PTR _origspeed$2[ebp]
  0116f	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN80@T_BridgeTh:

; 1634 : 				}

  01173	e9 d1 00 00 00	 jmp	 $LN83@T_BridgeTh
$LN76@T_BridgeTh:

; 1635 : 				else
; 1636 : 				{
; 1637 : 					fixed_t origspeed = CURSPEED;

  01178	b8 04 00 00 00	 mov	 eax, 4
  0117d	6b c8 03	 imul	 ecx, eax, 3
  01180	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  01183	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  01187	89 45 90	 mov	 DWORD PTR _origspeed$1[ebp], eax

; 1638 : 					// Slow down as you get closer to the top
; 1639 : 					CURSPEED = FixedMul(CURSPEED,FixedDiv(ORIGCEILINGHEIGHT - bridge->sector->ceilingheight, (ORIGCEILINGHEIGHT - LOWCEILINGHEIGHT)>>5));

  0118a	b8 04 00 00 00	 mov	 eax, 4
  0118f	c1 e0 00	 shl	 eax, 0
  01192	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01195	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  01199	2b 55 d0	 sub	 edx, DWORD PTR _lowceilheight$[ebp]
  0119c	c1 fa 05	 sar	 edx, 5
  0119f	52		 push	 edx
  011a0	b8 04 00 00 00	 mov	 eax, 4
  011a5	c1 e0 00	 shl	 eax, 0
  011a8	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  011ab	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  011ae	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  011b1	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  011b5	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  011b8	50		 push	 eax
  011b9	e8 00 00 00 00	 call	 _FixedDiv
  011be	83 c4 08	 add	 esp, 8
  011c1	50		 push	 eax
  011c2	b9 04 00 00 00	 mov	 ecx, 4
  011c7	6b d1 03	 imul	 edx, ecx, 3
  011ca	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  011cd	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  011d1	51		 push	 ecx
  011d2	e8 00 00 00 00	 call	 _FixedMul
  011d7	83 c4 08	 add	 esp, 8
  011da	ba 04 00 00 00	 mov	 edx, 4
  011df	6b ca 03	 imul	 ecx, edx, 3
  011e2	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  011e5	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 1640 : 
; 1641 : 					if (CURSPEED <= origspeed/16)

  011e9	b8 04 00 00 00	 mov	 eax, 4
  011ee	6b c8 03	 imul	 ecx, eax, 3
  011f1	8b 45 90	 mov	 eax, DWORD PTR _origspeed$1[ebp]
  011f4	99		 cdq
  011f5	83 e2 0f	 and	 edx, 15			; 0000000fH
  011f8	03 c2		 add	 eax, edx
  011fa	c1 f8 04	 sar	 eax, 4
  011fd	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  01200	39 44 0a 10	 cmp	 DWORD PTR [edx+ecx+16], eax
  01204	7f 1d		 jg	 SHORT $LN81@T_BridgeTh

; 1642 : 						CURSPEED = origspeed/16;

  01206	8b 45 90	 mov	 eax, DWORD PTR _origspeed$1[ebp]
  01209	99		 cdq
  0120a	83 e2 0f	 and	 edx, 15			; 0000000fH
  0120d	03 c2		 add	 eax, edx
  0120f	c1 f8 04	 sar	 eax, 4
  01212	b9 04 00 00 00	 mov	 ecx, 4
  01217	6b d1 03	 imul	 edx, ecx, 3
  0121a	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0121d	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
  01221	eb 26		 jmp	 SHORT $LN83@T_BridgeTh
$LN81@T_BridgeTh:

; 1643 : 					else if (CURSPEED > origspeed)

  01223	b8 04 00 00 00	 mov	 eax, 4
  01228	6b c8 03	 imul	 ecx, eax, 3
  0122b	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  0122e	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  01232	3b 45 90	 cmp	 eax, DWORD PTR _origspeed$1[ebp]
  01235	7e 12		 jle	 SHORT $LN83@T_BridgeTh

; 1644 : 						CURSPEED = origspeed;

  01237	b8 04 00 00 00	 mov	 eax, 4
  0123c	6b c8 03	 imul	 ecx, eax, 3
  0123f	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  01242	8b 45 90	 mov	 eax, DWORD PTR _origspeed$1[ebp]
  01245	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN83@T_BridgeTh:

; 1645 : 				}
; 1646 : 
; 1647 : 				res = T_MovePlane

  01249	b8 04 00 00 00	 mov	 eax, 4
  0124e	c1 e0 03	 shl	 eax, 3
  01251	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  01254	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  01258	52		 push	 edx
  01259	6a 01		 push	 1
  0125b	6a 00		 push	 0
  0125d	8b 45 dc	 mov	 eax, DWORD PTR _ceilingdestination$[ebp]
  01260	50		 push	 eax
  01261	b9 04 00 00 00	 mov	 ecx, 4
  01266	6b d1 03	 imul	 edx, ecx, 3
  01269	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  0126c	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  01270	51		 push	 ecx
  01271	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  01274	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  01277	50		 push	 eax
  01278	e8 00 00 00 00	 call	 _T_MovePlane
  0127d	83 c4 18	 add	 esp, 24			; 00000018H
  01280	89 45 d4	 mov	 DWORD PTR _res$[ebp], eax

; 1648 : 				(
; 1649 : 					bridge->sector,         // sector
; 1650 : 					CURSPEED,          // speed
; 1651 : 					ceilingdestination, // dest
; 1652 : 					0,                        // crush
; 1653 : 					1,                        // floor or ceiling (1 for ceiling)
; 1654 : 					DIRECTION       // direction
; 1655 : 				);
; 1656 : 
; 1657 : 				if (res == ok || res == pastdest)

  01283	83 7d d4 00	 cmp	 DWORD PTR _res$[ebp], 0
  01287	74 06		 je	 SHORT $LN85@T_BridgeTh
  01289	83 7d d4 02	 cmp	 DWORD PTR _res$[ebp], 2
  0128d	75 37		 jne	 SHORT $LN84@T_BridgeTh
$LN85@T_BridgeTh:

; 1658 : 					T_MovePlane

  0128f	b8 04 00 00 00	 mov	 eax, 4
  01294	c1 e0 03	 shl	 eax, 3
  01297	8b 4d 08	 mov	 ecx, DWORD PTR _bridge$[ebp]
  0129a	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0129e	52		 push	 edx
  0129f	6a 00		 push	 0
  012a1	6a 00		 push	 0
  012a3	8b 45 d8	 mov	 eax, DWORD PTR _floordestination$[ebp]
  012a6	50		 push	 eax
  012a7	b9 04 00 00 00	 mov	 ecx, 4
  012ac	6b d1 03	 imul	 edx, ecx, 3
  012af	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  012b2	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  012b6	51		 push	 ecx
  012b7	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  012ba	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  012bd	50		 push	 eax
  012be	e8 00 00 00 00	 call	 _T_MovePlane
  012c3	83 c4 18	 add	 esp, 24			; 00000018H
$LN84@T_BridgeTh:

; 1659 : 					(
; 1660 : 						bridge->sector,           // sector
; 1661 : 						CURSPEED,            // speed
; 1662 : 						floordestination, // dest
; 1663 : 						0,                          // crush
; 1664 : 						0,                          // floor or ceiling (0 for floor)
; 1665 : 						DIRECTION         // direction
; 1666 : 					);
; 1667 : 
; 1668 : 				bridge->sector->ceilspeed = 42;

  012c6	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  012c9	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  012cc	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 1669 : 				bridge->sector->floorspeed = CURSPEED*DIRECTION;

  012d6	b8 04 00 00 00	 mov	 eax, 4
  012db	6b c8 03	 imul	 ecx, eax, 3
  012de	ba 04 00 00 00	 mov	 edx, 4
  012e3	c1 e2 03	 shl	 edx, 3
  012e6	8b 45 08	 mov	 eax, DWORD PTR _bridge$[ebp]
  012e9	8b 75 08	 mov	 esi, DWORD PTR _bridge$[ebp]
  012ec	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  012f0	0f af 4c 16 10	 imul	 ecx, DWORD PTR [esi+edx+16]
  012f5	8b 55 08	 mov	 edx, DWORD PTR _bridge$[ebp]
  012f8	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  012fb	89 88 e8 00 00
	00		 mov	 DWORD PTR [eax+232], ecx

; 1670 : 			}

  01301	e9 71 fc ff ff	 jmp	 $LN26@T_BridgeTh
$LN27@T_BridgeTh:

; 1671 : 		}

  01306	e9 17 fc ff ff	 jmp	 $LN23@T_BridgeTh
$LN24@T_BridgeTh:

; 1672 : 		// Update precip
; 1673 : 	}
; 1674 : 
; 1675 : #undef SAGAMT
; 1676 : #undef LOWFLOORHEIGHT
; 1677 : #undef LOWCEILINGHEIGHT
; 1678 : #undef ORIGFLOORHEIGHT
; 1679 : #undef ORIGCEILINGHEIGHT
; 1680 : #undef BASESPEED
; 1681 : #undef CURSPEED
; 1682 : #undef STARTTAG
; 1683 : #undef ENDTAG
; 1684 : #undef DIRECTION
; 1685 : }

  0130b	5f		 pop	 edi
  0130c	5e		 pop	 esi
  0130d	5b		 pop	 ebx
  0130e	8b e5		 mov	 esp, ebp
  01310	5d		 pop	 ebp
  01311	c3		 ret	 0
_T_BridgeThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_FloatSector
_TEXT	SEGMENT
_rover$1 = -24						; size = 4
_floatanyway$2 = -20					; size = 4
_tofloat$3 = -16					; size = 4
_secnum$ = -12						; size = 4
_actionsector$ = -8					; size = 4
_cheeseheight$ = -4					; size = 4
_floater$ = 8						; size = 4
_T_FloatSector PROC					; COMDAT

; 1165 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1166 : 	fixed_t cheeseheight;
; 1167 : 	sector_t *actionsector;
; 1168 : 	INT32 secnum;
; 1169 : 
; 1170 : 	cheeseheight = floater->sector->floorheight + (floater->sector->ceilingheight - floater->sector->floorheight)/2;

  00009	8b 45 08	 mov	 eax, DWORD PTR _floater$[ebp]
  0000c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _floater$[ebp]
  00012	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00015	8b 55 08	 mov	 edx, DWORD PTR _floater$[ebp]
  00018	8b 52 54	 mov	 edx, DWORD PTR [edx+84]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	2b 02		 sub	 eax, DWORD PTR [edx]
  00020	99		 cdq
  00021	2b c2		 sub	 eax, edx
  00023	d1 f8		 sar	 eax, 1
  00025	03 01		 add	 eax, DWORD PTR [ecx]
  00027	89 45 fc	 mov	 DWORD PTR _cheeseheight$[ebp], eax

; 1171 : 
; 1172 : 	// Just find the first sector with the tag.
; 1173 : 	// Doesn't work with multiple sectors that have different floor/ceiling heights.
; 1174 : 	secnum = P_FindSectorFromTag((INT16)floater->vars[0], -1);

  0002a	6a ff		 push	 -1
  0002c	b8 04 00 00 00	 mov	 eax, 4
  00031	6b c8 00	 imul	 ecx, eax, 0
  00034	8b 55 08	 mov	 edx, DWORD PTR _floater$[ebp]
  00037	0f b7 44 0a 10	 movzx	 eax, WORD PTR [edx+ecx+16]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00042	83 c4 08	 add	 esp, 8
  00045	89 45 f4	 mov	 DWORD PTR _secnum$[ebp], eax

; 1175 : 
; 1176 : 	if (secnum > 0)

  00048	83 7d f4 00	 cmp	 DWORD PTR _secnum$[ebp], 0
  0004c	7e 12		 jle	 SHORT $LN5@T_FloatSec

; 1177 : 		actionsector = &sectors[secnum];

  0004e	69 45 f4 f8 00
	00 00		 imul	 eax, DWORD PTR _secnum$[ebp], 248
  00055	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  0005b	89 45 f8	 mov	 DWORD PTR _actionsector$[ebp], eax
  0005e	eb 07		 jmp	 SHORT $LN6@T_FloatSec
$LN5@T_FloatSec:

; 1178 : 	else
; 1179 : 		actionsector = NULL;

  00060	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _actionsector$[ebp], 0
$LN6@T_FloatSec:

; 1180 : 
; 1181 : 	if (actionsector)

  00067	83 7d f8 00	 cmp	 DWORD PTR _actionsector$[ebp], 0
  0006b	0f 84 02 01 00
	00		 je	 $LN7@T_FloatSec

; 1182 : 	{
; 1183 : 		boolean tofloat = false;

  00071	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _tofloat$3[ebp], 0

; 1184 : 		boolean floatanyway = false; // Ignore the crumblestate setting.

  00078	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _floatanyway$2[ebp], 0

; 1185 : 
; 1186 : 		if (actionsector->ffloors)

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00082	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00089	0f 84 99 00 00
	00		 je	 $LN3@T_FloatSec

; 1187 : 		{
; 1188 : 			ffloor_t *rover;
; 1189 : 
; 1190 : 			for (rover = actionsector->ffloors; rover; rover = rover->next)

  0008f	8b 45 f8	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00092	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00098	89 4d e8	 mov	 DWORD PTR _rover$1[ebp], ecx
  0009b	eb 09		 jmp	 SHORT $LN4@T_FloatSec
$LN2@T_FloatSec:
  0009d	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000a0	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000a3	89 4d e8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@T_FloatSec:
  000a6	83 7d e8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  000aa	74 7c		 je	 SHORT $LN3@T_FloatSec

; 1191 : 			{
; 1192 : 				if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_SWIMMABLE) || rover->flags & FF_SOLID)

  000ac	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000af	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000b2	83 e1 01	 and	 ecx, 1
  000b5	74 16		 je	 SHORT $LN10@T_FloatSec
  000b7	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000ba	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000bd	83 e1 20	 and	 ecx, 32			; 00000020H
  000c0	74 0b		 je	 SHORT $LN10@T_FloatSec
  000c2	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000c5	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000c8	83 e1 06	 and	 ecx, 6
  000cb	74 02		 je	 SHORT $LN9@T_FloatSec
$LN10@T_FloatSec:

; 1193 : 					continue;

  000cd	eb ce		 jmp	 SHORT $LN2@T_FloatSec
$LN9@T_FloatSec:

; 1194 : 
; 1195 : 				if (cheeseheight != *rover->topheight)

  000cf	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d4	8b 55 fc	 mov	 edx, DWORD PTR _cheeseheight$[ebp]
  000d7	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000d9	74 48		 je	 SHORT $LN13@T_FloatSec

; 1196 : 				{
; 1197 : 					if ((floater->sector->floorheight == actionsector->floorheight && *rover->topheight < cheeseheight)
; 1198 : 						|| (floater->sector->ceilingheight == actionsector->ceilingheight && *rover->topheight > cheeseheight))

  000db	8b 45 08	 mov	 eax, DWORD PTR _floater$[ebp]
  000de	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000e1	8b 55 f8	 mov	 edx, DWORD PTR _actionsector$[ebp]
  000e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e6	3b 02		 cmp	 eax, DWORD PTR [edx]
  000e8	75 0c		 jne	 SHORT $LN15@T_FloatSec
  000ea	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f1	3b 55 fc	 cmp	 edx, DWORD PTR _cheeseheight$[ebp]
  000f4	7c 1d		 jl	 SHORT $LN14@T_FloatSec
$LN15@T_FloatSec:
  000f6	8b 45 08	 mov	 eax, DWORD PTR _floater$[ebp]
  000f9	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000fc	8b 55 f8	 mov	 edx, DWORD PTR _actionsector$[ebp]
  000ff	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00102	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00105	75 15		 jne	 SHORT $LN12@T_FloatSec
  00107	8b 45 e8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0010a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010e	3b 55 fc	 cmp	 edx, DWORD PTR _cheeseheight$[ebp]
  00111	7e 09		 jle	 SHORT $LN12@T_FloatSec
$LN14@T_FloatSec:

; 1199 : 						tofloat = false;

  00113	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _tofloat$3[ebp], 0
  0011a	eb 07		 jmp	 SHORT $LN13@T_FloatSec
$LN12@T_FloatSec:

; 1200 : 					else
; 1201 : 						tofloat = true;

  0011c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _tofloat$3[ebp], 1
$LN13@T_FloatSec:

; 1202 : 				}
; 1203 : 			}

  00123	e9 75 ff ff ff	 jmp	 $LN2@T_FloatSec
$LN3@T_FloatSec:

; 1204 : 		}
; 1205 : 
; 1206 : 		if (tofloat && (floater->sector->crumblestate == 0 || floater->sector->crumblestate >= 3 || floatanyway))

  00128	83 7d f0 00	 cmp	 DWORD PTR _tofloat$3[ebp], 0
  0012c	74 39		 je	 SHORT $LN16@T_FloatSec
  0012e	8b 45 08	 mov	 eax, DWORD PTR _floater$[ebp]
  00131	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00134	83 79 74 00	 cmp	 DWORD PTR [ecx+116], 0
  00138	74 12		 je	 SHORT $LN17@T_FloatSec
  0013a	8b 45 08	 mov	 eax, DWORD PTR _floater$[ebp]
  0013d	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00140	83 79 74 03	 cmp	 DWORD PTR [ecx+116], 3
  00144	7d 06		 jge	 SHORT $LN17@T_FloatSec
  00146	83 7d ec 00	 cmp	 DWORD PTR _floatanyway$2[ebp], 0
  0014a	74 1b		 je	 SHORT $LN16@T_FloatSec
$LN17@T_FloatSec:

; 1207 : 		{
; 1208 : 			EV_BounceSector(floater->sector, FRACUNIT, floater->sourceline);

  0014c	8b 45 08	 mov	 eax, DWORD PTR _floater$[ebp]
  0014f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00152	51		 push	 ecx
  00153	68 00 00 01 00	 push	 65536			; 00010000H
  00158	8b 55 08	 mov	 edx, DWORD PTR _floater$[ebp]
  0015b	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _EV_BounceSector
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@T_FloatSec:

; 1209 : 		}
; 1210 : 
; 1211 : 		P_RecalcPrecipInSector(actionsector);

  00167	8b 45 f8	 mov	 eax, DWORD PTR _actionsector$[ebp]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  00170	83 c4 04	 add	 esp, 4
$LN7@T_FloatSec:

; 1212 : 	}
; 1213 : }

  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c3		 ret	 0
_T_FloatSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_SpikeSector
_TEXT	SEGMENT
_killer$1 = -20						; size = 4
_affectsec$ = -16					; size = 4
_dothepain$ = -12					; size = 4
_node$ = -8						; size = 4
_thing$ = -4						; size = 4
_spikes$ = 8						; size = 4
_T_SpikeSector PROC					; COMDAT

; 1094 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1095 : 	mobj_t *thing;
; 1096 : 	msecnode_t *node;
; 1097 : 	boolean dothepain;
; 1098 : 	sector_t *affectsec;
; 1099 : 
; 1100 : 	node = spikes->sector->touching_thinglist; // things touching this sector

  00009	8b 45 08	 mov	 eax, DWORD PTR _spikes$[ebp]
  0000c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0000f	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00015	89 55 f8	 mov	 DWORD PTR _node$[ebp], edx

; 1101 : 
; 1102 : 	for (; node; node = node->m_snext)

  00018	eb 09		 jmp	 SHORT $LN4@T_SpikeSec
$LN2@T_SpikeSec:
  0001a	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  0001d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00020	89 4d f8	 mov	 DWORD PTR _node$[ebp], ecx
$LN4@T_SpikeSec:
  00023	83 7d f8 00	 cmp	 DWORD PTR _node$[ebp], 0
  00027	0f 84 a9 01 00
	00		 je	 $LN3@T_SpikeSec

; 1103 : 	{
; 1104 : 		thing = node->m_thing;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	89 4d fc	 mov	 DWORD PTR _thing$[ebp], ecx

; 1105 : 		if (!thing->player)

  00036	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  00039	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00040	75 02		 jne	 SHORT $LN5@T_SpikeSec

; 1106 : 			continue;

  00042	eb d6		 jmp	 SHORT $LN2@T_SpikeSec
$LN5@T_SpikeSec:

; 1107 : 
; 1108 : 		dothepain = false;

  00044	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dothepain$[ebp], 0

; 1109 : 		affectsec = &sectors[spikes->vars[0]];

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 00	 imul	 ecx, eax, 0
  00053	8b 55 08	 mov	 edx, DWORD PTR _spikes$[ebp]
  00056	69 44 0a 10 f8
	00 00 00	 imul	 eax, DWORD PTR [edx+ecx+16], 248
  0005e	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00064	89 45 f0	 mov	 DWORD PTR _affectsec$[ebp], eax

; 1110 : 
; 1111 : 		if (affectsec == spikes->sector) // Applied to an actual sector

  00067	8b 45 08	 mov	 eax, DWORD PTR _spikes$[ebp]
  0006a	8b 4d f0	 mov	 ecx, DWORD PTR _affectsec$[ebp]
  0006d	3b 48 54	 cmp	 ecx, DWORD PTR [eax+84]
  00070	0f 85 88 00 00
	00		 jne	 $LN6@T_SpikeSec

; 1112 : 		{
; 1113 : 			if (affectsec->flags & SF_FLIPSPECIAL_FLOOR)

  00076	8b 45 f0	 mov	 eax, DWORD PTR _affectsec$[ebp]
  00079	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  0007f	83 e1 01	 and	 ecx, 1
  00082	74 30		 je	 SHORT $LN10@T_SpikeSec

; 1114 : 			{
; 1115 : 				if (!(thing->eflags & MFE_VERTICALFLIP) && thing->momz > 0)

  00084	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  00087	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0008d	83 e1 20	 and	 ecx, 32			; 00000020H
  00090	75 0e		 jne	 SHORT $LN9@T_SpikeSec
  00092	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  00095	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00099	7e 05		 jle	 SHORT $LN9@T_SpikeSec

; 1116 : 					continue;

  0009b	e9 7a ff ff ff	 jmp	 $LN2@T_SpikeSec
$LN9@T_SpikeSec:

; 1117 : 
; 1118 : 				if (thing->z == affectsec->floorheight)

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _affectsec$[ebp]
  000a6	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000a9	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000ab	75 07		 jne	 SHORT $LN10@T_SpikeSec

; 1119 : 					dothepain = true;

  000ad	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dothepain$[ebp], 1
$LN10@T_SpikeSec:

; 1120 : 			}
; 1121 : 
; 1122 : 			if (affectsec->flags & SF_FLIPSPECIAL_CEILING)

  000b4	8b 45 f0	 mov	 eax, DWORD PTR _affectsec$[ebp]
  000b7	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  000bd	83 e1 02	 and	 ecx, 2
  000c0	74 37		 je	 SHORT $LN13@T_SpikeSec

; 1123 : 			{
; 1124 : 				if ((thing->eflags & MFE_VERTICALFLIP) && thing->momz < 0)

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  000c5	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000cb	83 e1 20	 and	 ecx, 32			; 00000020H
  000ce	74 0e		 je	 SHORT $LN12@T_SpikeSec
  000d0	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  000d3	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  000d7	7d 05		 jge	 SHORT $LN12@T_SpikeSec

; 1125 : 					continue;

  000d9	e9 3c ff ff ff	 jmp	 $LN2@T_SpikeSec
$LN12@T_SpikeSec:

; 1126 : 
; 1127 : 				if (thing->z + thing->height == affectsec->ceilingheight)

  000de	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  000e1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000e4	8b 55 fc	 mov	 edx, DWORD PTR _thing$[ebp]
  000e7	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  000ea	8b 45 f0	 mov	 eax, DWORD PTR _affectsec$[ebp]
  000ed	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000f0	75 07		 jne	 SHORT $LN13@T_SpikeSec

; 1128 : 					dothepain = true;

  000f2	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dothepain$[ebp], 1
$LN13@T_SpikeSec:

; 1129 : 			}
; 1130 : 		}

  000f9	e9 83 00 00 00	 jmp	 $LN19@T_SpikeSec
$LN6@T_SpikeSec:

; 1131 : 		else
; 1132 : 		{
; 1133 : 			if (affectsec->flags & SF_FLIPSPECIAL_FLOOR)

  000fe	8b 45 f0	 mov	 eax, DWORD PTR _affectsec$[ebp]
  00101	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00107	83 e1 01	 and	 ecx, 1
  0010a	74 31		 je	 SHORT $LN16@T_SpikeSec

; 1134 : 			{
; 1135 : 				if (!(thing->eflags & MFE_VERTICALFLIP) && thing->momz > 0)

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0010f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00115	83 e1 20	 and	 ecx, 32			; 00000020H
  00118	75 0e		 jne	 SHORT $LN15@T_SpikeSec
  0011a	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0011d	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00121	7e 05		 jle	 SHORT $LN15@T_SpikeSec

; 1136 : 					continue;

  00123	e9 f2 fe ff ff	 jmp	 $LN2@T_SpikeSec
$LN15@T_SpikeSec:

; 1137 : 
; 1138 : 				if (thing->z == affectsec->ceilingheight)

  00128	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR _affectsec$[ebp]
  0012e	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00131	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00134	75 07		 jne	 SHORT $LN16@T_SpikeSec

; 1139 : 					dothepain = true;

  00136	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dothepain$[ebp], 1
$LN16@T_SpikeSec:

; 1140 : 			}
; 1141 : 
; 1142 : 			if (affectsec->flags & SF_FLIPSPECIAL_CEILING)

  0013d	8b 45 f0	 mov	 eax, DWORD PTR _affectsec$[ebp]
  00140	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00146	83 e1 02	 and	 ecx, 2
  00149	74 36		 je	 SHORT $LN19@T_SpikeSec

; 1143 : 			{
; 1144 : 				if ((thing->eflags & MFE_VERTICALFLIP) && thing->momz < 0)

  0014b	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0014e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00154	83 e1 20	 and	 ecx, 32			; 00000020H
  00157	74 0e		 je	 SHORT $LN18@T_SpikeSec
  00159	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0015c	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00160	7d 05		 jge	 SHORT $LN18@T_SpikeSec

; 1145 : 					continue;

  00162	e9 b3 fe ff ff	 jmp	 $LN2@T_SpikeSec
$LN18@T_SpikeSec:

; 1146 : 
; 1147 : 				if (thing->z + thing->height == affectsec->floorheight)

  00167	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0016a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0016d	8b 55 fc	 mov	 edx, DWORD PTR _thing$[ebp]
  00170	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00173	8b 45 f0	 mov	 eax, DWORD PTR _affectsec$[ebp]
  00176	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00178	75 07		 jne	 SHORT $LN19@T_SpikeSec

; 1148 : 					dothepain = true;

  0017a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dothepain$[ebp], 1
$LN19@T_SpikeSec:

; 1149 : 			}
; 1150 : 		}
; 1151 : 
; 1152 : 		if (dothepain)

  00181	83 7d f4 00	 cmp	 DWORD PTR _dothepain$[ebp], 0
  00185	74 4a		 je	 SHORT $LN20@T_SpikeSec

; 1153 : 		{
; 1154 : 			mobj_t *killer;
; 1155 : 			killer = P_SpawnMobj(thing->x, thing->y, thing->z, MT_DISS);

  00187	68 05 01 00 00	 push	 261			; 00000105H
  0018c	8b 45 fc	 mov	 eax, DWORD PTR _thing$[ebp]
  0018f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00192	51		 push	 ecx
  00193	8b 55 fc	 mov	 edx, DWORD PTR _thing$[ebp]
  00196	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00199	50		 push	 eax
  0019a	8b 4d fc	 mov	 ecx, DWORD PTR _thing$[ebp]
  0019d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001a0	52		 push	 edx
  001a1	e8 00 00 00 00	 call	 _P_SpawnMobj
  001a6	83 c4 10	 add	 esp, 16			; 00000010H
  001a9	89 45 ec	 mov	 DWORD PTR _killer$1[ebp], eax

; 1156 : 			killer->threshold = 43; // Special flag that it was spikes which hurt you.

  001ac	8b 45 ec	 mov	 eax, DWORD PTR _killer$1[ebp]
  001af	c7 80 a0 00 00
	00 2b 00 00 00	 mov	 DWORD PTR [eax+160], 43	; 0000002bH

; 1157 : 
; 1158 : 			P_DamageMobj(thing, killer, killer, 1);

  001b9	6a 01		 push	 1
  001bb	8b 45 ec	 mov	 eax, DWORD PTR _killer$1[ebp]
  001be	50		 push	 eax
  001bf	8b 4d ec	 mov	 ecx, DWORD PTR _killer$1[ebp]
  001c2	51		 push	 ecx
  001c3	8b 55 fc	 mov	 edx, DWORD PTR _thing$[ebp]
  001c6	52		 push	 edx
  001c7	e8 00 00 00 00	 call	 _P_DamageMobj
  001cc	83 c4 10	 add	 esp, 16			; 00000010H

; 1159 : 			break;

  001cf	eb 05		 jmp	 SHORT $LN3@T_SpikeSec
$LN20@T_SpikeSec:

; 1160 : 		}
; 1161 : 	}

  001d1	e9 44 fe ff ff	 jmp	 $LN2@T_SpikeSec
$LN3@T_SpikeSec:

; 1162 : }

  001d6	5f		 pop	 edi
  001d7	5e		 pop	 esi
  001d8	5b		 pop	 ebx
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
_T_SpikeSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_MarioBlock
_TEXT	SEGMENT
_i$ = -4						; size = 4
_block$ = 8						; size = 4
_T_MarioBlock PROC					; COMDAT

; 1039 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1040 : 	INT32 i;
; 1041 : 
; 1042 : #define speed vars[1]
; 1043 : #define direction vars[2]
; 1044 : #define floorwasheight vars[3]
; 1045 : #define ceilingwasheight vars[4]
; 1046 : #define distance vars[5]
; 1047 : #define low vars[6]
; 1048 : 
; 1049 : 	T_MovePlane

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00013	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00017	52		 push	 edx
  00018	6a 01		 push	 1
  0001a	6a 00		 push	 0
  0001c	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0001f	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00022	ba 04 00 00 00	 mov	 edx, 4
  00027	d1 e2		 shl	 edx, 1
  00029	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0002c	69 54 10 10 00
	00 46 00	 imul	 edx, DWORD PTR [eax+edx+16], 4587520
  00034	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00037	52		 push	 edx
  00038	b8 04 00 00 00	 mov	 eax, 4
  0003d	c1 e0 00	 shl	 eax, 0
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00043	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00047	52		 push	 edx
  00048	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0004b	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _T_MovePlane
  00054	83 c4 18	 add	 esp, 24			; 00000018H

; 1050 : 	(
; 1051 : 	  block->sector,
; 1052 : 	  block->speed,
; 1053 : 	  block->sector->ceilingheight + 70*FRACUNIT * block->direction,
; 1054 : 	  0,
; 1055 : 	  1, // move floor
; 1056 : 	  block->direction
; 1057 : 	);
; 1058 : 
; 1059 : 	T_MovePlane

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	d1 e0		 shl	 eax, 1
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00061	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00065	52		 push	 edx
  00066	6a 00		 push	 0
  00068	6a 00		 push	 0
  0006a	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0006d	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00070	ba 04 00 00 00	 mov	 edx, 4
  00075	d1 e2		 shl	 edx, 1
  00077	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0007a	69 54 10 10 00
	00 46 00	 imul	 edx, DWORD PTR [eax+edx+16], 4587520
  00082	03 11		 add	 edx, DWORD PTR [ecx]
  00084	52		 push	 edx
  00085	b8 04 00 00 00	 mov	 eax, 4
  0008a	c1 e0 00	 shl	 eax, 0
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00090	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00094	52		 push	 edx
  00095	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00098	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 _T_MovePlane
  000a1	83 c4 18	 add	 esp, 24			; 00000018H

; 1060 : 	(
; 1061 : 	  block->sector,
; 1062 : 	  block->speed,
; 1063 : 	  block->sector->floorheight + 70*FRACUNIT * block->direction,
; 1064 : 	  0,
; 1065 : 	  0, // move ceiling
; 1066 : 	  block->direction
; 1067 : 	);
; 1068 : 
; 1069 : 	if (block->sector->ceilingheight >= block->ceilingwasheight + 32*FRACUNIT) // Go back down now..

  000a4	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000a7	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000aa	ba 04 00 00 00	 mov	 edx, 4
  000af	c1 e2 02	 shl	 edx, 2
  000b2	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000b5	8b 54 10 10	 mov	 edx, DWORD PTR [eax+edx+16]
  000b9	81 c2 00 00 20
	00		 add	 edx, 2097152		; 00200000H
  000bf	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  000c2	7c 23		 jl	 SHORT $LN5@T_MarioBlo

; 1070 : 		block->direction = -block->direction;

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	d1 e0		 shl	 eax, 1
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  000ce	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  000d2	f7 da		 neg	 edx
  000d4	b8 04 00 00 00	 mov	 eax, 4
  000d9	d1 e0		 shl	 eax, 1
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  000de	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
  000e2	e9 8f 00 00 00	 jmp	 $LN7@T_MarioBlo
$LN5@T_MarioBlo:

; 1071 : 	else if (block->sector->ceilingheight <= block->ceilingwasheight)

  000e7	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000ea	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000ed	ba 04 00 00 00	 mov	 edx, 4
  000f2	c1 e2 02	 shl	 edx, 2
  000f5	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000f8	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000fb	3b 4c 10 10	 cmp	 ecx, DWORD PTR [eax+edx+16]
  000ff	7f 75		 jg	 SHORT $LN7@T_MarioBlo

; 1072 : 	{
; 1073 : 		block->sector->ceilingheight = block->ceilingwasheight;

  00101	b8 04 00 00 00	 mov	 eax, 4
  00106	c1 e0 02	 shl	 eax, 2
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0010c	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0010f	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00112	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00116	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1074 : 		block->sector->floorheight = block->floorwasheight;

  00119	b8 04 00 00 00	 mov	 eax, 4
  0011e	6b c8 03	 imul	 ecx, eax, 3
  00121	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00124	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00127	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0012a	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  0012e	89 08		 mov	 DWORD PTR [eax], ecx

; 1075 : 		P_RemoveThinker(&block->thinker);

  00130	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _P_RemoveThinker
  00139	83 c4 04	 add	 esp, 4

; 1076 : 		block->sector->floordata = NULL;

  0013c	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0013f	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00142	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 1077 : 		block->sector->ceilingdata = NULL;

  00149	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0014c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0014f	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1078 : 		block->sector->floorspeed = 0;

  00156	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00159	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0015c	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 1079 : 		block->sector->ceilspeed = 0;

  00166	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00169	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0016c	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0
$LN7@T_MarioBlo:

; 1080 : 	}
; 1081 : 
; 1082 : 	for (i = -1; (i = P_FindSectorFromTag((INT16)block->vars[0], i)) >= 0 ;)

  00176	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN2@T_MarioBlo:
  0017d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00180	50		 push	 eax
  00181	b9 04 00 00 00	 mov	 ecx, 4
  00186	6b d1 00	 imul	 edx, ecx, 0
  00189	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0018c	0f b7 4c 10 10	 movzx	 ecx, WORD PTR [eax+edx+16]
  00191	51		 push	 ecx
  00192	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00197	83 c4 08	 add	 esp, 8
  0019a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  0019d	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  001a1	7c 18		 jl	 SHORT $LN3@T_MarioBlo

; 1083 : 		P_RecalcPrecipInSector(&sectors[i]);

  001a3	69 45 fc f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  001aa	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  001b6	83 c4 04	 add	 esp, 4
  001b9	eb c2		 jmp	 SHORT $LN2@T_MarioBlo
$LN3@T_MarioBlo:

; 1084 : 
; 1085 : #undef speed
; 1086 : #undef direction
; 1087 : #undef floorwasheight
; 1088 : #undef ceilingwasheight
; 1089 : #undef distance
; 1090 : #undef low
; 1091 : }

  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	5b		 pop	 ebx
  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c3		 ret	 0
_T_MarioBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_StartCrumble
_TEXT	SEGMENT
tv95 = -84						; size = 4
_dest$1 = -16						; size = 4
_i$ = -12						; size = 4
_sector$ = -8						; size = 4
_rover$ = -4						; size = 4
_elevator$ = 8						; size = 4
_T_StartCrumble PROC					; COMDAT

; 865  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 866  : 	ffloor_t *rover;
; 867  : 	sector_t *sector;
; 868  : 	INT32 i;
; 869  : 
; 870  : 	// Once done, the no-return thinker just sits there,
; 871  : 	// constantly 'returning'... kind of an oxymoron, isn't it?
; 872  : 	if (((elevator->floordestheight == 1 && elevator->direction == -1)
; 873  : 		|| (elevator->floordestheight == 0 && elevator->direction == 1))
; 874  : 		&& elevator->type == elevateContinuous) // No return crumbler

  00009	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0000c	83 78 20 01	 cmp	 DWORD PTR [eax+32], 1
  00010	75 09		 jne	 SHORT $LN19@T_StartCru
  00012	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00015	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  00019	74 12		 je	 SHORT $LN18@T_StartCru
$LN19@T_StartCru:
  0001b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0001e	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00022	75 37		 jne	 SHORT $LN17@T_StartCru
  00024	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00027	83 78 1c 01	 cmp	 DWORD PTR [eax+28], 1
  0002b	75 2e		 jne	 SHORT $LN17@T_StartCru
$LN18@T_StartCru:
  0002d	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00030	83 78 10 03	 cmp	 DWORD PTR [eax+16], 3
  00034	75 25		 jne	 SHORT $LN17@T_StartCru

; 875  : 	{
; 876  : 		elevator->sector->ceilspeed = 0;

  00036	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00039	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003c	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 877  : 		elevator->sector->floorspeed = 0;

  00046	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00049	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004c	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 878  : 		return;

  00056	e9 13 05 00 00	 jmp	 $LN15@T_StartCru
$LN17@T_StartCru:

; 879  : 	}
; 880  : 
; 881  : 	if (elevator->distance != 0)

  0005b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0005e	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00062	0f 84 c2 02 00
	00		 je	 $LN35@T_StartCru

; 882  : 	{
; 883  : 		if (elevator->distance > 0) // Count down the timer

  00068	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0006b	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0006f	7e 4e		 jle	 SHORT $LN21@T_StartCru

; 884  : 		{
; 885  : 			elevator->distance--;

  00071	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00074	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00077	83 e9 01	 sub	 ecx, 1
  0007a	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  0007d	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 886  : 			if (elevator->distance <= 0)

  00080	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00083	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00087	7f 0c		 jg	 SHORT $LN23@T_StartCru

; 887  : 				elevator->distance = -15*TICRATE; // Timer until platform returns to original position.

  00089	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0008c	c7 40 38 f3 fd
	ff ff		 mov	 DWORD PTR [eax+56], -525 ; fffffdf3H
  00093	eb 25		 jmp	 SHORT $LN24@T_StartCru
$LN23@T_StartCru:

; 888  : 			else
; 889  : 			{
; 890  : 				// Timer isn't up yet, so just keep waiting.
; 891  : 				elevator->sector->ceilspeed = 0;

  00095	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00098	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0009b	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 892  : 				elevator->sector->floorspeed = 0;

  000a5	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  000a8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ab	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 893  : 				return;

  000b5	e9 b4 04 00 00	 jmp	 $LN15@T_StartCru
$LN24@T_StartCru:

; 894  : 			}
; 895  : 		}

  000ba	e9 16 01 00 00	 jmp	 $LN25@T_StartCru
$LN21@T_StartCru:

; 896  : 		else if (++elevator->distance == 0) // Reposition back to original spot

  000bf	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  000c2	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c5	83 c1 01	 add	 ecx, 1
  000c8	89 4d ac	 mov	 DWORD PTR tv95[ebp], ecx
  000cb	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  000ce	8b 45 ac	 mov	 eax, DWORD PTR tv95[ebp]
  000d1	89 42 38	 mov	 DWORD PTR [edx+56], eax
  000d4	83 7d ac 00	 cmp	 DWORD PTR tv95[ebp], 0
  000d8	0f 85 f7 00 00
	00		 jne	 $LN25@T_StartCru

; 897  : 		{
; 898  : 			for (i = -1; (i = P_FindSectorFromTag(elevator->sourceline->tag, i)) >= 0 ;)

  000de	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN2@T_StartCru:
  000e5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  000ec	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  000ef	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  000f9	83 c4 08	 add	 esp, 8
  000fc	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  000ff	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  00103	0f 8c 88 00 00
	00		 jl	 $LN3@T_StartCru

; 899  : 			{
; 900  : 				sector = &sectors[i];

  00109	69 45 f4 f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00110	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00116	89 45 f8	 mov	 DWORD PTR _sector$[ebp], eax

; 901  : 
; 902  : 				for (rover = sector->ffloors; rover; rover = rover->next)

  00119	8b 45 f8	 mov	 eax, DWORD PTR _sector$[ebp]
  0011c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00122	89 4d fc	 mov	 DWORD PTR _rover$[ebp], ecx
  00125	eb 09		 jmp	 SHORT $LN7@T_StartCru
$LN5@T_StartCru:
  00127	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  0012a	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0012d	89 4d fc	 mov	 DWORD PTR _rover$[ebp], ecx
$LN7@T_StartCru:
  00130	83 7d fc 00	 cmp	 DWORD PTR _rover$[ebp], 0
  00134	74 56		 je	 SHORT $LN6@T_StartCru

; 903  : 				{
; 904  : 					if (rover->flags & FF_CRUMBLE && rover->flags & FF_FLOATBOB
; 905  : 						&& rover->master == elevator->sourceline)

  00136	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  00139	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0013c	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00142	74 46		 je	 SHORT $LN27@T_StartCru
  00144	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  00147	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0014a	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00150	74 38		 je	 SHORT $LN27@T_StartCru
  00152	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  00155	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00158	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0015b	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  0015e	75 2a		 jne	 SHORT $LN27@T_StartCru

; 906  : 					{
; 907  : 						rover->alpha = elevator->origspeed;

  00160	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  00163	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00166	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00169	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 908  : 
; 909  : 						if (rover->alpha == 0xff)

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  0016f	81 78 4c ff 00
	00 00		 cmp	 DWORD PTR [eax+76], 255	; 000000ffH
  00176	75 12		 jne	 SHORT $LN27@T_StartCru

; 910  : 							rover->flags &= ~FF_TRANSLUCENT;

  00178	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  0017b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0017e	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  00184	8b 55 fc	 mov	 edx, DWORD PTR _rover$[ebp]
  00187	89 4a 34	 mov	 DWORD PTR [edx+52], ecx
$LN27@T_StartCru:

; 911  : 					}
; 912  : 				}

  0018a	eb 9b		 jmp	 SHORT $LN5@T_StartCru
$LN6@T_StartCru:

; 913  : 			}

  0018c	e9 54 ff ff ff	 jmp	 $LN2@T_StartCru
$LN3@T_StartCru:

; 914  : 
; 915  : 			// Up!
; 916  : 			if (elevator->floordestheight == 1)

  00191	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00194	83 78 20 01	 cmp	 DWORD PTR [eax+32], 1
  00198	75 0c		 jne	 SHORT $LN28@T_StartCru

; 917  : 				elevator->direction = -1;

  0019a	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0019d	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
  001a4	eb 0a		 jmp	 SHORT $LN29@T_StartCru
$LN28@T_StartCru:

; 918  : 			else
; 919  : 				elevator->direction = 1;

  001a6	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001a9	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
$LN29@T_StartCru:

; 920  : 
; 921  : 			elevator->sector->ceilspeed = 0;

  001b0	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001b3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001b6	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 922  : 			elevator->sector->floorspeed = 0;

  001c0	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001c3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001c6	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 923  : 			return;

  001d0	e9 99 03 00 00	 jmp	 $LN15@T_StartCru
$LN25@T_StartCru:

; 924  : 		}
; 925  : 
; 926  : 		// Flash to indicate that the platform is about to return.
; 927  : 		if (elevator->distance > -224 && (leveltime % ((abs(elevator->distance)/8) + 1) == 0))

  001d5	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001d8	81 78 38 20 ff
	ff ff		 cmp	 DWORD PTR [eax+56], -224 ; ffffff20H
  001df	0f 8e 26 01 00
	00		 jle	 $LN9@T_StartCru
  001e5	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001e8	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 _abs
  001f1	83 c4 04	 add	 esp, 4
  001f4	99		 cdq
  001f5	83 e2 07	 and	 edx, 7
  001f8	03 c2		 add	 eax, edx
  001fa	8b c8		 mov	 ecx, eax
  001fc	c1 f9 03	 sar	 ecx, 3
  001ff	83 c1 01	 add	 ecx, 1
  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00207	33 d2		 xor	 edx, edx
  00209	f7 f1		 div	 ecx
  0020b	85 d2		 test	 edx, edx
  0020d	0f 85 f8 00 00
	00		 jne	 $LN9@T_StartCru

; 928  : 		{
; 929  : 			for (i = -1; (i = P_FindSectorFromTag(elevator->sourceline->tag, i)) >= 0 ;)

  00213	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN8@T_StartCru:
  0021a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0021d	50		 push	 eax
  0021e	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00221	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00224	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  0022e	83 c4 08	 add	 esp, 8
  00231	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  00234	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  00238	0f 8c cd 00 00
	00		 jl	 $LN9@T_StartCru

; 930  : 			{
; 931  : 				sector = &sectors[i];

  0023e	69 45 f4 f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00245	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  0024b	89 45 f8	 mov	 DWORD PTR _sector$[ebp], eax

; 932  : 
; 933  : 				for (rover = sector->ffloors; rover; rover = rover->next)

  0024e	8b 45 f8	 mov	 eax, DWORD PTR _sector$[ebp]
  00251	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00257	89 4d fc	 mov	 DWORD PTR _rover$[ebp], ecx
  0025a	eb 09		 jmp	 SHORT $LN13@T_StartCru
$LN11@T_StartCru:
  0025c	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  0025f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00262	89 4d fc	 mov	 DWORD PTR _rover$[ebp], ecx
$LN13@T_StartCru:
  00265	83 7d fc 00	 cmp	 DWORD PTR _rover$[ebp], 0
  00269	0f 84 97 00 00
	00		 je	 $LN12@T_StartCru

; 934  : 				{
; 935  : 					if (!(rover->flags & FF_NORETURN) && rover->flags & FF_CRUMBLE && rover->flags & FF_FLOATBOB
; 936  : 						&& rover->master == elevator->sourceline)

  0026f	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  00272	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00275	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  0027b	0f 85 80 00 00
	00		 jne	 $LN33@T_StartCru
  00281	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  00284	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00287	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  0028d	74 72		 je	 SHORT $LN33@T_StartCru
  0028f	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  00292	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00295	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  0029b	74 64		 je	 SHORT $LN33@T_StartCru
  0029d	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002a3	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  002a6	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  002a9	75 56		 jne	 SHORT $LN33@T_StartCru

; 937  : 					{
; 938  : 						if (rover->alpha == elevator->origspeed)

  002ab	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  002ae	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002b1	8b 50 4c	 mov	 edx, DWORD PTR [eax+76]
  002b4	3b 51 2c	 cmp	 edx, DWORD PTR [ecx+44]
  002b7	75 1e		 jne	 SHORT $LN32@T_StartCru

; 939  : 						{
; 940  : 							rover->flags |= FF_TRANSLUCENT;

  002b9	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  002bc	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002bf	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  002c5	8b 55 fc	 mov	 edx, DWORD PTR _rover$[ebp]
  002c8	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 941  : 							rover->alpha = 0x00;

  002cb	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  002ce	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 942  : 						}

  002d5	eb 2a		 jmp	 SHORT $LN33@T_StartCru
$LN32@T_StartCru:

; 943  : 						else
; 944  : 						{
; 945  : 							if (elevator->origspeed == 0xff)

  002d7	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  002da	81 78 2c ff 00
	00 00		 cmp	 DWORD PTR [eax+44], 255	; 000000ffH
  002e1	75 12		 jne	 SHORT $LN34@T_StartCru

; 946  : 								rover->flags &= ~FF_TRANSLUCENT;

  002e3	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  002e6	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002e9	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  002ef	8b 55 fc	 mov	 edx, DWORD PTR _rover$[ebp]
  002f2	89 4a 34	 mov	 DWORD PTR [edx+52], ecx
$LN34@T_StartCru:

; 947  : 
; 948  : 							rover->alpha = elevator->origspeed;

  002f5	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  002f8	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002fb	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002fe	89 50 4c	 mov	 DWORD PTR [eax+76], edx
$LN33@T_StartCru:

; 949  : 						}
; 950  : 					}
; 951  : 				}

  00301	e9 56 ff ff ff	 jmp	 $LN11@T_StartCru
$LN12@T_StartCru:

; 952  : 			}

  00306	e9 0f ff ff ff	 jmp	 $LN8@T_StartCru
$LN9@T_StartCru:

; 953  : 		}
; 954  : 
; 955  : 		// We're about to go back to the original position,
; 956  : 		// so set this to let other thinkers know what is
; 957  : 		// about to happen.
; 958  : 		if (elevator->distance < 0 && elevator->distance > -3)

  0030b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0030e	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00312	7d 16		 jge	 SHORT $LN35@T_StartCru
  00314	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00317	83 78 38 fd	 cmp	 DWORD PTR [eax+56], -3	; fffffffdH
  0031b	7e 0d		 jle	 SHORT $LN35@T_StartCru

; 959  : 			elevator->sector->crumblestate = 4; // makes T_BounceCheese remove itself

  0031d	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00320	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00323	c7 41 74 04 00
	00 00		 mov	 DWORD PTR [ecx+116], 4
$LN35@T_StartCru:

; 960  : 	}
; 961  : 
; 962  : 	if ((elevator->floordestheight == 0 && elevator->direction == -1)
; 963  : 		|| (elevator->floordestheight == 1 && elevator->direction == 1)) // Down

  0032a	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0032d	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00331	75 09		 jne	 SHORT $LN39@T_StartCru
  00333	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00336	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  0033a	74 1a		 je	 SHORT $LN38@T_StartCru
$LN39@T_StartCru:
  0033c	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0033f	83 78 20 01	 cmp	 DWORD PTR [eax+32], 1
  00343	0f 85 53 01 00
	00		 jne	 $LN36@T_StartCru
  00349	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0034c	83 78 1c 01	 cmp	 DWORD PTR [eax+28], 1
  00350	0f 85 46 01 00
	00		 jne	 $LN36@T_StartCru
$LN38@T_StartCru:

; 964  : 	{
; 965  : 		elevator->sector->crumblestate = 3; // Allow floating now.

  00356	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00359	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0035c	c7 41 74 03 00
	00 00		 mov	 DWORD PTR [ecx+116], 3

; 966  : 
; 967  : 		// Only fall like this if it isn't meant to float on water
; 968  : 		if (elevator->high != 42)

  00363	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00366	83 78 34 2a	 cmp	 DWORD PTR [eax+52], 42	; 0000002aH
  0036a	0f 84 27 01 00
	00		 je	 $LN41@T_StartCru

; 969  : 		{
; 970  : 			elevator->speed += gravity; // Gain more and more speed

  00370	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00373	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00376	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _gravity
  0037c	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  0037f	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 971  : 
; 972  : 			if ((elevator->floordestheight == 0 && !(elevator->sector->ceilingheight < -16384*FRACUNIT))
; 973  : 				|| (elevator->floordestheight == 1 && !(elevator->sector->ceilingheight > 16384*FRACUNIT)))

  00382	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00385	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00389	75 0f		 jne	 SHORT $LN43@T_StartCru
  0038b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0038e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00391	81 79 04 00 00
	00 c0		 cmp	 DWORD PTR [ecx+4], -1073741824 ; c0000000H
  00398	7d 20		 jge	 SHORT $LN42@T_StartCru
$LN43@T_StartCru:
  0039a	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0039d	83 78 20 01	 cmp	 DWORD PTR [eax+32], 1
  003a1	0f 85 f0 00 00
	00		 jne	 $LN41@T_StartCru
  003a7	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003aa	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003ad	81 79 04 00 00
	00 40		 cmp	 DWORD PTR [ecx+4], 1073741824 ; 40000000H
  003b4	0f 8f dd 00 00
	00		 jg	 $LN41@T_StartCru
$LN42@T_StartCru:

; 974  : 			{
; 975  : 				fixed_t dest;
; 976  : 
; 977  : 				if (elevator->floordestheight == 1)

  003ba	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003bd	83 78 20 01	 cmp	 DWORD PTR [eax+32], 1
  003c1	75 17		 jne	 SHORT $LN44@T_StartCru

; 978  : 					dest = elevator->sector->ceilingheight + (elevator->speed*2);

  003c3	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003c6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003c9	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  003cc	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  003cf	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  003d2	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  003d5	89 55 f0	 mov	 DWORD PTR _dest$1[ebp], edx
  003d8	eb 16		 jmp	 SHORT $LN45@T_StartCru
$LN44@T_StartCru:

; 979  : 				else
; 980  : 					dest = elevator->sector->ceilingheight - (elevator->speed*2);

  003da	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003dd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003e0	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  003e3	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  003e6	d1 e0		 shl	 eax, 1
  003e8	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  003eb	2b c8		 sub	 ecx, eax
  003ed	89 4d f0	 mov	 DWORD PTR _dest$1[ebp], ecx
$LN45@T_StartCru:

; 981  : 
; 982  : 				T_MovePlane             //jff 4/7/98 reverse order of ceiling/floor

  003f0	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003f3	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  003f6	51		 push	 ecx
  003f7	6a 01		 push	 1
  003f9	6a 00		 push	 0
  003fb	8b 55 f0	 mov	 edx, DWORD PTR _dest$1[ebp]
  003fe	52		 push	 edx
  003ff	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00402	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00405	51		 push	 ecx
  00406	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00409	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0040c	50		 push	 eax
  0040d	e8 00 00 00 00	 call	 _T_MovePlane
  00412	83 c4 18	 add	 esp, 24			; 00000018H

; 983  : 				(
; 984  : 				  elevator->sector,
; 985  : 				  elevator->speed,
; 986  : 				  dest,
; 987  : 				  0,
; 988  : 				  1, // move floor
; 989  : 				  elevator->direction
; 990  : 				);
; 991  : 
; 992  : 				if (elevator->floordestheight == 1)

  00415	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00418	83 78 20 01	 cmp	 DWORD PTR [eax+32], 1
  0041c	75 16		 jne	 SHORT $LN46@T_StartCru

; 993  : 					dest = elevator->sector->floorheight + (elevator->speed*2);

  0041e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00421	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00424	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00427	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0042a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0042c	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0042f	89 55 f0	 mov	 DWORD PTR _dest$1[ebp], edx
  00432	eb 15		 jmp	 SHORT $LN47@T_StartCru
$LN46@T_StartCru:

; 994  : 				else
; 995  : 					dest = elevator->sector->floorheight - (elevator->speed*2);

  00434	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00437	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0043a	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  0043d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00440	d1 e0		 shl	 eax, 1
  00442	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00444	2b c8		 sub	 ecx, eax
  00446	89 4d f0	 mov	 DWORD PTR _dest$1[ebp], ecx
$LN47@T_StartCru:

; 996  : 
; 997  : 				  T_MovePlane

  00449	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0044c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0044f	51		 push	 ecx
  00450	6a 00		 push	 0
  00452	6a 00		 push	 0
  00454	8b 55 f0	 mov	 edx, DWORD PTR _dest$1[ebp]
  00457	52		 push	 edx
  00458	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0045b	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0045e	51		 push	 ecx
  0045f	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00462	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00465	50		 push	 eax
  00466	e8 00 00 00 00	 call	 _T_MovePlane
  0046b	83 c4 18	 add	 esp, 24			; 00000018H

; 998  : 				  (
; 999  : 					elevator->sector,
; 1000 : 					elevator->speed,
; 1001 : 					dest,
; 1002 : 					0,
; 1003 : 					0,                        // move ceiling
; 1004 : 					elevator->direction
; 1005 : 				);
; 1006 : 
; 1007 : 				elevator->sector->ceilspeed = 42;

  0046e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00471	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00474	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 1008 : 				elevator->sector->floorspeed = elevator->speed*elevator->direction;

  0047e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00481	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00484	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00487	0f af 51 1c	 imul	 edx, DWORD PTR [ecx+28]
  0048b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0048e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00491	89 91 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], edx
$LN41@T_StartCru:

; 1009 : 			}
; 1010 : 		}
; 1011 : 	}

  00497	e9 80 00 00 00	 jmp	 $LN37@T_StartCru
$LN36@T_StartCru:

; 1012 : 	else // Up (restore to original position)
; 1013 : 	{
; 1014 : 		elevator->sector->crumblestate = 1;

  0049c	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0049f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004a2	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1

; 1015 : 		elevator->sector->ceilingheight = elevator->ceilingwasheight;

  004a9	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004ac	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004af	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  004b2	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  004b5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1016 : 		elevator->sector->floorheight = elevator->floorwasheight;

  004b8	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004bb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004be	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  004c1	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  004c4	89 01		 mov	 DWORD PTR [ecx], eax

; 1017 : 		elevator->sector->floordata = NULL;

  004c6	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004c9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004cc	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 1018 : 		elevator->sector->ceilingdata = NULL;

  004d3	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004d6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004d9	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1019 : 		elevator->sector->ceilspeed = 0;

  004e0	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004e3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004e6	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 1020 : 		elevator->sector->floorspeed = 0;

  004f0	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004f3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004f6	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 1021 : 		elevator->sector->moved = true;

  00500	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00503	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00506	c7 81 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+172], 1

; 1022 : 		P_RemoveThinker(&elevator->thinker);

  00510	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00513	50		 push	 eax
  00514	e8 00 00 00 00	 call	 _P_RemoveThinker
  00519	83 c4 04	 add	 esp, 4
$LN37@T_StartCru:

; 1023 : 	}
; 1024 : 
; 1025 : 	for (i = -1; (i = P_FindSectorFromTag(elevator->sourceline->tag, i)) >= 0 ;)

  0051c	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN14@T_StartCru:
  00523	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00526	50		 push	 eax
  00527	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0052a	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0052d	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  00531	50		 push	 eax
  00532	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00537	83 c4 08	 add	 esp, 8
  0053a	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  0053d	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  00541	7c 2b		 jl	 SHORT $LN15@T_StartCru

; 1026 : 	{
; 1027 : 		sector = &sectors[i];

  00543	69 45 f4 f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  0054a	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00550	89 45 f8	 mov	 DWORD PTR _sector$[ebp], eax

; 1028 : 		sector->moved = true;

  00553	8b 45 f8	 mov	 eax, DWORD PTR _sector$[ebp]
  00556	c7 80 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+172], 1

; 1029 : 		P_RecalcPrecipInSector(sector);

  00560	8b 45 f8	 mov	 eax, DWORD PTR _sector$[ebp]
  00563	50		 push	 eax
  00564	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  00569	83 c4 04	 add	 esp, 4

; 1030 : 	}

  0056c	eb b5		 jmp	 SHORT $LN14@T_StartCru
$LN15@T_StartCru:

; 1031 : }

  0056e	5f		 pop	 edi
  0056f	5e		 pop	 esi
  00570	5b		 pop	 ebx
  00571	8b e5		 mov	 esp, ebp
  00573	5d		 pop	 ebp
  00574	c3		 ret	 0
_T_StartCrumble ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_BounceCheese
_TEXT	SEGMENT
_mp$1 = -28						; size = 4
_mp$2 = -24						; size = 4
_i$ = -20						; size = 4
_actionsector$ = -16					; size = 4
_floorheight$ = -12					; size = 4
_waterheight$ = -8					; size = 4
_halfheight$ = -4					; size = 4
_bouncer$ = 8						; size = 4
_T_BounceCheese PROC					; COMDAT

; 702  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 703  : #define speed vars[0]
; 704  : #define distance vars[1]
; 705  : #define low vars[2]
; 706  : #define ceilingwasheight vars[3]
; 707  : #define floorwasheight vars[4]
; 708  : 	fixed_t halfheight;
; 709  : 	fixed_t waterheight;
; 710  : 	fixed_t floorheight;
; 711  : 	sector_t *actionsector;
; 712  : 	INT32 i;
; 713  : 
; 714  : 	if (bouncer->sector->crumblestate == 4 || bouncer->sector->crumblestate == 1
; 715  : 		|| bouncer->sector->crumblestate == 2) // Oops! Crumbler says to remove yourself!

  00009	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0000c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0000f	83 79 74 04	 cmp	 DWORD PTR [ecx+116], 4
  00013	74 18		 je	 SHORT $LN6@T_BounceCh
  00015	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00018	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0001b	83 79 74 01	 cmp	 DWORD PTR [ecx+116], 1
  0001f	74 0c		 je	 SHORT $LN6@T_BounceCh
  00021	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00024	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00027	83 79 74 02	 cmp	 DWORD PTR [ecx+116], 2
  0002b	75 58		 jne	 SHORT $LN5@T_BounceCh
$LN6@T_BounceCh:

; 716  : 	{
; 717  : 		bouncer->sector->crumblestate = 1;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00030	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00033	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1

; 718  : 		bouncer->sector->ceilingdata = NULL;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0003d	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00040	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 719  : 		bouncer->sector->ceilspeed = 0;

  00047	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0004a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0004d	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 720  : 		bouncer->sector->floordata = NULL;

  00057	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0005a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0005d	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 721  : 		bouncer->sector->floorspeed = 0;

  00064	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00067	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0006a	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 722  : 		P_RemoveThinker(&bouncer->thinker); // remove bouncer from actives

  00074	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _P_RemoveThinker
  0007d	83 c4 04	 add	 esp, 4

; 723  : 		return;

  00080	e9 f3 06 00 00	 jmp	 $LN3@T_BounceCh
$LN5@T_BounceCh:

; 724  : 	}
; 725  : 
; 726  : 	// You can use multiple target sectors, but at your own risk!!!
; 727  : 	for (i = -1; (i = P_FindSectorFromTag(bouncer->sourceline->tag, i)) >= 0 ;)

  00085	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN2@T_BounceCh:
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  00093	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00096	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  000a0	83 c4 08	 add	 esp, 8
  000a3	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  000a6	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  000aa	0f 8c c8 06 00
	00		 jl	 $LN3@T_BounceCh

; 728  : 	{
; 729  : 		actionsector = &sectors[i];

  000b0	69 45 ec f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  000b7	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  000bd	89 45 f0	 mov	 DWORD PTR _actionsector$[ebp], eax

; 730  : 		actionsector->moved = true;

  000c0	8b 45 f0	 mov	 eax, DWORD PTR _actionsector$[ebp]
  000c3	c7 80 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+172], 1

; 731  : 
; 732  : 		halfheight = abs(bouncer->sector->ceilingheight - bouncer->sector->floorheight) >> 1;

  000cd	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  000d0	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000d3	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  000d6	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000d9	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000dc	2b 08		 sub	 ecx, DWORD PTR [eax]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 _abs
  000e4	83 c4 04	 add	 esp, 4
  000e7	d1 f8		 sar	 eax, 1
  000e9	89 45 fc	 mov	 DWORD PTR _halfheight$[ebp], eax

; 733  : 
; 734  : 		waterheight = P_SectorCheckWater(actionsector, bouncer->sector);

  000ec	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  000ef	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000f2	51		 push	 ecx
  000f3	8b 55 f0	 mov	 edx, DWORD PTR _actionsector$[ebp]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _P_SectorCheckWater
  000fc	83 c4 08	 add	 esp, 8
  000ff	89 45 f8	 mov	 DWORD PTR _waterheight$[ebp], eax

; 735  : 
; 736  : 		floorheight = P_FloorzAtPos(actionsector->soundorg.x, actionsector->soundorg.y, bouncer->sector->floorheight, halfheight << 1);

  00102	8b 45 fc	 mov	 eax, DWORD PTR _halfheight$[ebp]
  00105	d1 e0		 shl	 eax, 1
  00107	50		 push	 eax
  00108	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0010b	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0010e	8b 02		 mov	 eax, DWORD PTR [edx]
  00110	50		 push	 eax
  00111	8b 4d f0	 mov	 ecx, DWORD PTR _actionsector$[ebp]
  00114	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00117	52		 push	 edx
  00118	8b 45 f0	 mov	 eax, DWORD PTR _actionsector$[ebp]
  0011b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0011e	51		 push	 ecx
  0011f	e8 00 00 00 00	 call	 _P_FloorzAtPos
  00124	83 c4 10	 add	 esp, 16			; 00000010H
  00127	89 45 f4	 mov	 DWORD PTR _floorheight$[ebp], eax

; 737  : 
; 738  : 		// No water in sector, but still allow it to fall.
; 739  : 		if (waterheight == -42)

  0012a	83 7d f8 d6	 cmp	 DWORD PTR _waterheight$[ebp], -42 ; ffffffd6H
  0012e	75 0e		 jne	 SHORT $LN7@T_BounceCh

; 740  : 			waterheight = actionsector->floorheight - 512*FRACUNIT;

  00130	8b 45 f0	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00133	8b 08		 mov	 ecx, DWORD PTR [eax]
  00135	81 e9 00 00 00
	02		 sub	 ecx, 33554432		; 02000000H
  0013b	89 4d f8	 mov	 DWORD PTR _waterheight$[ebp], ecx
$LN7@T_BounceCh:

; 741  : 
; 742  : 		// Water level is up to the ceiling.
; 743  : 		if (waterheight > bouncer->sector->ceilingheight - halfheight && bouncer->sector->ceilingheight >= actionsector->ceilingheight) // Tails 01-08-2004

  0013e	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00141	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00144	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00147	2b 55 fc	 sub	 edx, DWORD PTR _halfheight$[ebp]
  0014a	39 55 f8	 cmp	 DWORD PTR _waterheight$[ebp], edx
  0014d	0f 8e a8 00 00
	00		 jle	 $LN8@T_BounceCh
  00153	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00156	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00159	8b 55 f0	 mov	 edx, DWORD PTR _actionsector$[ebp]
  0015c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0015f	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00162	0f 8c 93 00 00
	00		 jl	 $LN8@T_BounceCh

; 744  : 		{
; 745  : 			bouncer->sector->ceilingheight = actionsector->ceilingheight;

  00168	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0016b	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0016e	8b 55 f0	 mov	 edx, DWORD PTR _actionsector$[ebp]
  00171	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00174	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 746  : 			bouncer->sector->floorheight = bouncer->sector->ceilingheight - (halfheight*2);

  00177	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0017a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0017d	8b 55 fc	 mov	 edx, DWORD PTR _halfheight$[ebp]
  00180	d1 e2		 shl	 edx, 1
  00182	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00185	2b c2		 sub	 eax, edx
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0018a	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0018d	89 02		 mov	 DWORD PTR [edx], eax

; 747  : 			P_RecalcPrecipInSector(actionsector);

  0018f	8b 45 f0	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  00198	83 c4 04	 add	 esp, 4

; 748  : 			bouncer->sector->ceilingdata = NULL;

  0019b	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0019e	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001a1	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 749  : 			bouncer->sector->floordata = NULL;

  001a8	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  001ab	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001ae	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 750  : 			bouncer->sector->floorspeed = 0;

  001b5	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  001b8	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001bb	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 751  : 			bouncer->sector->ceilspeed = 0;

  001c5	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  001c8	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001cb	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 752  : 			bouncer->sector->moved = true;

  001d5	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  001d8	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001db	c7 81 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+172], 1

; 753  : 			P_RemoveThinker(&bouncer->thinker); // remove bouncer from actives

  001e5	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 _P_RemoveThinker
  001ee	83 c4 04	 add	 esp, 4

; 754  : 			return;

  001f1	e9 82 05 00 00	 jmp	 $LN3@T_BounceCh

; 755  : 		}

  001f6	e9 d5 00 00 00	 jmp	 $LN11@T_BounceCh
$LN8@T_BounceCh:

; 756  : 		// Water level is too shallow.
; 757  : 		else if (waterheight < bouncer->sector->floorheight + halfheight && bouncer->sector->floorheight <= floorheight)

  001fb	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  001fe	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00201	8b 11		 mov	 edx, DWORD PTR [ecx]
  00203	03 55 fc	 add	 edx, DWORD PTR _halfheight$[ebp]
  00206	39 55 f8	 cmp	 DWORD PTR _waterheight$[ebp], edx
  00209	0f 8d 97 00 00
	00		 jge	 $LN10@T_BounceCh
  0020f	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00212	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00215	8b 11		 mov	 edx, DWORD PTR [ecx]
  00217	3b 55 f4	 cmp	 edx, DWORD PTR _floorheight$[ebp]
  0021a	0f 8f 86 00 00
	00		 jg	 $LN10@T_BounceCh

; 758  : 		{
; 759  : 			bouncer->sector->ceilingheight = floorheight + (halfheight << 1);

  00220	8b 45 fc	 mov	 eax, DWORD PTR _halfheight$[ebp]
  00223	8b 4d f4	 mov	 ecx, DWORD PTR _floorheight$[ebp]
  00226	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00229	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0022c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0022f	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 760  : 			bouncer->sector->floorheight = floorheight;

  00232	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00235	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00238	8b 55 f4	 mov	 edx, DWORD PTR _floorheight$[ebp]
  0023b	89 11		 mov	 DWORD PTR [ecx], edx

; 761  : 			P_RecalcPrecipInSector(actionsector);

  0023d	8b 45 f0	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00240	50		 push	 eax
  00241	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  00246	83 c4 04	 add	 esp, 4

; 762  : 			bouncer->sector->ceilingdata = NULL;

  00249	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0024c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0024f	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 763  : 			bouncer->sector->floordata = NULL;

  00256	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00259	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0025c	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 764  : 			bouncer->sector->floorspeed = 0;

  00263	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00266	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00269	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 765  : 			bouncer->sector->ceilspeed = 0;

  00273	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00276	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00279	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 766  : 			bouncer->sector->moved = true;

  00283	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00286	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00289	c7 81 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+172], 1

; 767  : 			P_RemoveThinker(&bouncer->thinker); // remove bouncer from actives

  00293	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 _P_RemoveThinker
  0029c	83 c4 04	 add	 esp, 4

; 768  : 			return;

  0029f	e9 d4 04 00 00	 jmp	 $LN3@T_BounceCh

; 769  : 		}

  002a4	eb 2a		 jmp	 SHORT $LN11@T_BounceCh
$LN10@T_BounceCh:

; 770  : 		else
; 771  : 		{
; 772  : 			bouncer->ceilingwasheight = waterheight + halfheight;

  002a6	8b 45 f8	 mov	 eax, DWORD PTR _waterheight$[ebp]
  002a9	03 45 fc	 add	 eax, DWORD PTR _halfheight$[ebp]
  002ac	b9 04 00 00 00	 mov	 ecx, 4
  002b1	6b d1 03	 imul	 edx, ecx, 3
  002b4	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  002b7	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 773  : 			bouncer->floorwasheight = waterheight - halfheight;

  002bb	8b 45 f8	 mov	 eax, DWORD PTR _waterheight$[ebp]
  002be	2b 45 fc	 sub	 eax, DWORD PTR _halfheight$[ebp]
  002c1	b9 04 00 00 00	 mov	 ecx, 4
  002c6	c1 e1 02	 shl	 ecx, 2
  002c9	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  002cc	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax
$LN11@T_BounceCh:

; 774  : 		}
; 775  : 
; 776  : 		T_MovePlane(bouncer->sector, bouncer->speed/2, bouncer->sector->ceilingheight -

  002d0	6a ff		 push	 -1
  002d2	6a 01		 push	 1
  002d4	6a 00		 push	 0
  002d6	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  002d9	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  002dc	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002df	81 ea 00 00 46
	00		 sub	 edx, 4587520		; 00460000H
  002e5	52		 push	 edx
  002e6	b8 04 00 00 00	 mov	 eax, 4
  002eb	6b c8 00	 imul	 ecx, eax, 0
  002ee	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  002f1	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  002f5	99		 cdq
  002f6	2b c2		 sub	 eax, edx
  002f8	d1 f8		 sar	 eax, 1
  002fa	50		 push	 eax
  002fb	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  002fe	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00301	51		 push	 ecx
  00302	e8 00 00 00 00	 call	 _T_MovePlane
  00307	83 c4 18	 add	 esp, 24			; 00000018H

; 777  : 			70*FRACUNIT, 0, 1, -1); // move floor
; 778  : 		T_MovePlane(bouncer->sector, bouncer->speed/2, bouncer->sector->floorheight - 70*FRACUNIT,

  0030a	6a ff		 push	 -1
  0030c	6a 00		 push	 0
  0030e	6a 00		 push	 0
  00310	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00313	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00316	8b 11		 mov	 edx, DWORD PTR [ecx]
  00318	81 ea 00 00 46
	00		 sub	 edx, 4587520		; 00460000H
  0031e	52		 push	 edx
  0031f	b8 04 00 00 00	 mov	 eax, 4
  00324	6b c8 00	 imul	 ecx, eax, 0
  00327	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  0032a	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0032e	99		 cdq
  0032f	2b c2		 sub	 eax, edx
  00331	d1 f8		 sar	 eax, 1
  00333	50		 push	 eax
  00334	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00337	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 _T_MovePlane
  00340	83 c4 18	 add	 esp, 24			; 00000018H

; 779  : 			0, 0, -1); // move ceiling
; 780  : 
; 781  : 		bouncer->sector->floorspeed = -bouncer->speed/2;

  00343	b8 04 00 00 00	 mov	 eax, 4
  00348	6b c8 00	 imul	 ecx, eax, 0
  0034b	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  0034e	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00352	f7 d8		 neg	 eax
  00354	99		 cdq
  00355	2b c2		 sub	 eax, edx
  00357	d1 f8		 sar	 eax, 1
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0035c	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0035f	89 82 e8 00 00
	00		 mov	 DWORD PTR [edx+232], eax

; 782  : 		bouncer->sector->ceilspeed = 42;

  00365	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00368	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0036b	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 783  : 
; 784  : 		if (bouncer->sector->ceilingheight < bouncer->ceilingwasheight && bouncer->low == 0) // Down

  00375	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00378	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0037b	ba 04 00 00 00	 mov	 edx, 4
  00380	6b c2 03	 imul	 eax, edx, 3
  00383	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00386	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00389	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  0038d	0f 8d ff 00 00
	00		 jge	 $LN12@T_BounceCh
  00393	b8 04 00 00 00	 mov	 eax, 4
  00398	d1 e0		 shl	 eax, 1
  0039a	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0039d	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  003a2	0f 85 ea 00 00
	00		 jne	 $LN12@T_BounceCh

; 785  : 		{
; 786  : 			if (abs(bouncer->speed) < 6*FRACUNIT)

  003a8	b8 04 00 00 00	 mov	 eax, 4
  003ad	6b c8 00	 imul	 ecx, eax, 0
  003b0	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  003b3	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  003b7	50		 push	 eax
  003b8	e8 00 00 00 00	 call	 _abs
  003bd	83 c4 04	 add	 esp, 4
  003c0	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H
  003c5	7d 39		 jge	 SHORT $LN14@T_BounceCh

; 787  : 				bouncer->speed -= bouncer->speed/3;

  003c7	b8 04 00 00 00	 mov	 eax, 4
  003cc	6b c8 00	 imul	 ecx, eax, 0
  003cf	ba 04 00 00 00	 mov	 edx, 4
  003d4	6b c2 00	 imul	 eax, edx, 0
  003d7	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  003da	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  003de	99		 cdq
  003df	be 03 00 00 00	 mov	 esi, 3
  003e4	f7 fe		 idiv	 esi
  003e6	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  003e9	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  003ed	2b c8		 sub	 ecx, eax
  003ef	ba 04 00 00 00	 mov	 edx, 4
  003f4	6b c2 00	 imul	 eax, edx, 0
  003f7	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  003fa	89 4c 02 10	 mov	 DWORD PTR [edx+eax+16], ecx
  003fe	eb 34		 jmp	 SHORT $LN15@T_BounceCh
$LN14@T_BounceCh:

; 788  : 			else
; 789  : 				bouncer->speed -= bouncer->speed/2;

  00400	b8 04 00 00 00	 mov	 eax, 4
  00405	6b c8 00	 imul	 ecx, eax, 0
  00408	ba 04 00 00 00	 mov	 edx, 4
  0040d	6b c2 00	 imul	 eax, edx, 0
  00410	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00413	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  00417	99		 cdq
  00418	2b c2		 sub	 eax, edx
  0041a	d1 f8		 sar	 eax, 1
  0041c	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  0041f	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00423	2b c8		 sub	 ecx, eax
  00425	ba 04 00 00 00	 mov	 edx, 4
  0042a	6b c2 00	 imul	 eax, edx, 0
  0042d	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00430	89 4c 02 10	 mov	 DWORD PTR [edx+eax+16], ecx
$LN15@T_BounceCh:

; 790  : 
; 791  : 			bouncer->low = 1;

  00434	b8 04 00 00 00	 mov	 eax, 4
  00439	d1 e0		 shl	 eax, 1
  0043b	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0043e	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 792  : 			if (abs(bouncer->speed) > 6*FRACUNIT)

  00446	b8 04 00 00 00	 mov	 eax, 4
  0044b	6b c8 00	 imul	 ecx, eax, 0
  0044e	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00451	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 _abs
  0045b	83 c4 04	 add	 esp, 4
  0045e	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H
  00463	7e 28		 jle	 SHORT $LN16@T_BounceCh

; 793  : 			{
; 794  : 				mobj_t *mp = (void *)&actionsector->soundorg;

  00465	8b 45 f0	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00468	83 c0 20	 add	 eax, 32			; 00000020H
  0046b	89 45 e8	 mov	 DWORD PTR _mp$2[ebp], eax

; 795  : 				actionsector->soundorg.z = bouncer->sector->floorheight;

  0046e	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00471	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00474	8b 55 f0	 mov	 edx, DWORD PTR _actionsector$[ebp]
  00477	8b 01		 mov	 eax, DWORD PTR [ecx]
  00479	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 796  : 				S_StartSound(mp, sfx_splash);

  0047c	68 d5 00 00 00	 push	 213			; 000000d5H
  00481	8b 45 e8	 mov	 eax, DWORD PTR _mp$2[ebp]
  00484	50		 push	 eax
  00485	e8 00 00 00 00	 call	 _S_StartSound
  0048a	83 c4 08	 add	 esp, 8
$LN16@T_BounceCh:

; 797  : 			}
; 798  : 		}

  0048d	e9 18 01 00 00	 jmp	 $LN20@T_BounceCh
$LN12@T_BounceCh:

; 799  : 		else if (bouncer->sector->ceilingheight > bouncer->ceilingwasheight && bouncer->low) // Up

  00492	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00495	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00498	ba 04 00 00 00	 mov	 edx, 4
  0049d	6b c2 03	 imul	 eax, edx, 3
  004a0	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  004a3	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  004a6	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  004aa	0f 8e fa 00 00
	00		 jle	 $LN20@T_BounceCh
  004b0	b8 04 00 00 00	 mov	 eax, 4
  004b5	d1 e0		 shl	 eax, 1
  004b7	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  004ba	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  004bf	0f 84 e5 00 00
	00		 je	 $LN20@T_BounceCh

; 800  : 		{
; 801  : 			if (abs(bouncer->speed) < 6*FRACUNIT)

  004c5	b8 04 00 00 00	 mov	 eax, 4
  004ca	6b c8 00	 imul	 ecx, eax, 0
  004cd	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  004d0	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  004d4	50		 push	 eax
  004d5	e8 00 00 00 00	 call	 _abs
  004da	83 c4 04	 add	 esp, 4
  004dd	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H
  004e2	7d 39		 jge	 SHORT $LN18@T_BounceCh

; 802  : 				bouncer->speed -= bouncer->speed/3;

  004e4	b8 04 00 00 00	 mov	 eax, 4
  004e9	6b c8 00	 imul	 ecx, eax, 0
  004ec	ba 04 00 00 00	 mov	 edx, 4
  004f1	6b c2 00	 imul	 eax, edx, 0
  004f4	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  004f7	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  004fb	99		 cdq
  004fc	be 03 00 00 00	 mov	 esi, 3
  00501	f7 fe		 idiv	 esi
  00503	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00506	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  0050a	2b c8		 sub	 ecx, eax
  0050c	ba 04 00 00 00	 mov	 edx, 4
  00511	6b c2 00	 imul	 eax, edx, 0
  00514	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00517	89 4c 02 10	 mov	 DWORD PTR [edx+eax+16], ecx
  0051b	eb 34		 jmp	 SHORT $LN19@T_BounceCh
$LN18@T_BounceCh:

; 803  : 			else
; 804  : 				bouncer->speed -= bouncer->speed/2;

  0051d	b8 04 00 00 00	 mov	 eax, 4
  00522	6b c8 00	 imul	 ecx, eax, 0
  00525	ba 04 00 00 00	 mov	 edx, 4
  0052a	6b c2 00	 imul	 eax, edx, 0
  0052d	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00530	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  00534	99		 cdq
  00535	2b c2		 sub	 eax, edx
  00537	d1 f8		 sar	 eax, 1
  00539	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  0053c	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00540	2b c8		 sub	 ecx, eax
  00542	ba 04 00 00 00	 mov	 edx, 4
  00547	6b c2 00	 imul	 eax, edx, 0
  0054a	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  0054d	89 4c 02 10	 mov	 DWORD PTR [edx+eax+16], ecx
$LN19@T_BounceCh:

; 805  : 
; 806  : 			bouncer->low = 0;

  00551	b8 04 00 00 00	 mov	 eax, 4
  00556	d1 e0		 shl	 eax, 1
  00558	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0055b	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0

; 807  : 			if (abs(bouncer->speed) > 6*FRACUNIT)

  00563	b8 04 00 00 00	 mov	 eax, 4
  00568	6b c8 00	 imul	 ecx, eax, 0
  0056b	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  0056e	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00572	50		 push	 eax
  00573	e8 00 00 00 00	 call	 _abs
  00578	83 c4 04	 add	 esp, 4
  0057b	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H
  00580	7e 28		 jle	 SHORT $LN20@T_BounceCh

; 808  : 			{
; 809  : 				mobj_t *mp = (void *)&actionsector->soundorg;

  00582	8b 45 f0	 mov	 eax, DWORD PTR _actionsector$[ebp]
  00585	83 c0 20	 add	 eax, 32			; 00000020H
  00588	89 45 e4	 mov	 DWORD PTR _mp$1[ebp], eax

; 810  : 				actionsector->soundorg.z = bouncer->sector->floorheight;

  0058b	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0058e	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00591	8b 55 f0	 mov	 edx, DWORD PTR _actionsector$[ebp]
  00594	8b 01		 mov	 eax, DWORD PTR [ecx]
  00596	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 811  : 				S_StartSound(mp, sfx_splash);

  00599	68 d5 00 00 00	 push	 213			; 000000d5H
  0059e	8b 45 e4	 mov	 eax, DWORD PTR _mp$1[ebp]
  005a1	50		 push	 eax
  005a2	e8 00 00 00 00	 call	 _S_StartSound
  005a7	83 c4 08	 add	 esp, 8
$LN20@T_BounceCh:

; 812  : 			}
; 813  : 		}
; 814  : 
; 815  : 		if (bouncer->sector->ceilingheight < bouncer->ceilingwasheight) // Down

  005aa	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  005ad	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  005b0	ba 04 00 00 00	 mov	 edx, 4
  005b5	6b c2 03	 imul	 eax, edx, 3
  005b8	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  005bb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  005be	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  005c2	7d 2f		 jge	 SHORT $LN21@T_BounceCh

; 816  : 		{
; 817  : 			bouncer->speed -= bouncer->distance;

  005c4	b8 04 00 00 00	 mov	 eax, 4
  005c9	6b c8 00	 imul	 ecx, eax, 0
  005cc	ba 04 00 00 00	 mov	 edx, 4
  005d1	c1 e2 00	 shl	 edx, 0
  005d4	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  005d7	8b 75 08	 mov	 esi, DWORD PTR _bouncer$[ebp]
  005da	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  005de	2b 4c 16 10	 sub	 ecx, DWORD PTR [esi+edx+16]
  005e2	ba 04 00 00 00	 mov	 edx, 4
  005e7	6b c2 00	 imul	 eax, edx, 0
  005ea	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  005ed	89 4c 02 10	 mov	 DWORD PTR [edx+eax+16], ecx

; 818  : 		}

  005f1	eb 3e		 jmp	 SHORT $LN23@T_BounceCh
$LN21@T_BounceCh:

; 819  : 		else if (bouncer->sector->ceilingheight > bouncer->ceilingwasheight) // Up

  005f3	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  005f6	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  005f9	ba 04 00 00 00	 mov	 edx, 4
  005fe	6b c2 03	 imul	 eax, edx, 3
  00601	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00604	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00607	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  0060b	7e 24		 jle	 SHORT $LN23@T_BounceCh

; 820  : 		{
; 821  : 			bouncer->speed += gravity;

  0060d	b8 04 00 00 00	 mov	 eax, 4
  00612	6b c8 00	 imul	 ecx, eax, 0
  00615	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00618	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0061c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _gravity
  00622	b9 04 00 00 00	 mov	 ecx, 4
  00627	6b d1 00	 imul	 edx, ecx, 0
  0062a	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0062d	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax
$LN23@T_BounceCh:

; 822  : 		}
; 823  : 
; 824  : 		if (bouncer->speed < 2*FRACUNIT && bouncer->speed > -2*FRACUNIT
; 825  : 			&& bouncer->sector->ceilingheight < bouncer->ceilingwasheight + FRACUNIT/4
; 826  : 			&& bouncer->sector->ceilingheight > bouncer->ceilingwasheight - FRACUNIT/4)

  00631	b8 04 00 00 00	 mov	 eax, 4
  00636	6b c8 00	 imul	 ecx, eax, 0
  00639	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  0063c	81 7c 0a 10 00
	00 02 00	 cmp	 DWORD PTR [edx+ecx+16], 131072 ; 00020000H
  00644	0f 8d e4 00 00
	00		 jge	 $LN24@T_BounceCh
  0064a	b8 04 00 00 00	 mov	 eax, 4
  0064f	6b c8 00	 imul	 ecx, eax, 0
  00652	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00655	81 7c 0a 10 00
	00 fe ff	 cmp	 DWORD PTR [edx+ecx+16], -131072 ; fffe0000H
  0065d	0f 8e cb 00 00
	00		 jle	 $LN24@T_BounceCh
  00663	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00666	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00669	ba 04 00 00 00	 mov	 edx, 4
  0066e	6b c2 03	 imul	 eax, edx, 3
  00671	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00674	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  00678	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  0067d	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  00680	0f 8d a8 00 00
	00		 jge	 $LN24@T_BounceCh
  00686	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00689	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0068c	ba 04 00 00 00	 mov	 edx, 4
  00691	6b c2 03	 imul	 eax, edx, 3
  00694	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  00697	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  0069b	2d 00 40 00 00	 sub	 eax, 16384		; 00004000H
  006a0	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  006a3	0f 8e 85 00 00
	00		 jle	 $LN24@T_BounceCh

; 827  : 		{
; 828  : 			bouncer->sector->floorheight = bouncer->floorwasheight;

  006a9	b8 04 00 00 00	 mov	 eax, 4
  006ae	c1 e0 02	 shl	 eax, 2
  006b1	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  006b4	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  006b7	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  006ba	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  006be	89 02		 mov	 DWORD PTR [edx], eax

; 829  : 			bouncer->sector->ceilingheight = bouncer->ceilingwasheight;

  006c0	b8 04 00 00 00	 mov	 eax, 4
  006c5	6b c8 03	 imul	 ecx, eax, 3
  006c8	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  006cb	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  006ce	8b 55 08	 mov	 edx, DWORD PTR _bouncer$[ebp]
  006d1	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  006d5	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 830  : 			bouncer->sector->ceilingdata = NULL;

  006d8	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  006db	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  006de	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 831  : 			bouncer->sector->floordata = NULL;

  006e5	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  006e8	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  006eb	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 832  : 			bouncer->sector->floorspeed = 0;

  006f2	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  006f5	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  006f8	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 833  : 			bouncer->sector->ceilspeed = 0;

  00702	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00705	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00708	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 834  : 			bouncer->sector->moved = true;

  00712	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00715	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00718	c7 81 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+172], 1

; 835  : 			P_RemoveThinker(&bouncer->thinker);    // remove bouncer from actives

  00722	8b 45 08	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00725	50		 push	 eax
  00726	e8 00 00 00 00	 call	 _P_RemoveThinker
  0072b	83 c4 04	 add	 esp, 4
$LN24@T_BounceCh:

; 836  : 		}
; 837  : 
; 838  : 		if (bouncer->distance > 0)

  0072e	b8 04 00 00 00	 mov	 eax, 4
  00733	c1 e0 00	 shl	 eax, 0
  00736	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  00739	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  0073e	7e 21		 jle	 SHORT $LN25@T_BounceCh

; 839  : 			bouncer->distance--;

  00740	b8 04 00 00 00	 mov	 eax, 4
  00745	c1 e0 00	 shl	 eax, 0
  00748	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0074b	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  0074f	83 ea 01	 sub	 edx, 1
  00752	b8 04 00 00 00	 mov	 eax, 4
  00757	c1 e0 00	 shl	 eax, 0
  0075a	8b 4d 08	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0075d	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
$LN25@T_BounceCh:

; 840  : 
; 841  : 		if (actionsector)

  00761	83 7d f0 00	 cmp	 DWORD PTR _actionsector$[ebp], 0
  00765	74 0c		 je	 SHORT $LN26@T_BounceCh

; 842  : 			P_RecalcPrecipInSector(actionsector);

  00767	8b 45 f0	 mov	 eax, DWORD PTR _actionsector$[ebp]
  0076a	50		 push	 eax
  0076b	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  00770	83 c4 04	 add	 esp, 4
$LN26@T_BounceCh:

; 843  : 	}

  00773	e9 14 f9 ff ff	 jmp	 $LN2@T_BounceCh
$LN3@T_BounceCh:

; 844  : #undef speed
; 845  : #undef distance
; 846  : #undef low
; 847  : #undef ceilingwasheight
; 848  : #undef floorwasheight
; 849  : }

  00778	5f		 pop	 edi
  00779	5e		 pop	 esi
  0077a	5b		 pop	 ebx
  0077b	8b e5		 mov	 esp, ebp
  0077d	5d		 pop	 ebp
  0077e	c3		 ret	 0
_T_BounceCheese ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_ContinuousFalling
_TEXT	SEGMENT
_dist$ = -12						; size = 4
_destceiling$ = -8					; size = 4
_destfloor$ = -4					; size = 4
_faller$ = 8						; size = 4
_T_ContinuousFalling PROC				; COMDAT

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 593  : #define speed vars[0]
; 594  : #define direction vars[1]
; 595  : #define floorwasheight vars[2]
; 596  : #define ceilingwasheight vars[3]
; 597  : #define floordestheight vars[4]
; 598  : #define ceilingdestheight vars[5]
; 599  : 	fixed_t destfloor, destceiling;
; 600  : 	fixed_t dist = faller->ceilingwasheight-faller->floorwasheight;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	d1 e2		 shl	 edx, 1
  00018	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  0001b	8b 75 08	 mov	 esi, DWORD PTR _faller$[ebp]
  0001e	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  00022	2b 4c 16 10	 sub	 ecx, DWORD PTR [esi+edx+16]
  00026	89 4d f4	 mov	 DWORD PTR _dist$[ebp], ecx

; 601  : 
; 602  : 	if (faller->direction == -1) // Down

  00029	b8 04 00 00 00	 mov	 eax, 4
  0002e	c1 e0 00	 shl	 eax, 0
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  00034	83 7c 01 10 ff	 cmp	 DWORD PTR [ecx+eax+16], -1
  00039	75 29		 jne	 SHORT $LN2@T_Continuo

; 603  : 	{
; 604  : 		destceiling = faller->ceilingdestheight;

  0003b	b8 04 00 00 00	 mov	 eax, 4
  00040	6b c8 05	 imul	 ecx, eax, 5
  00043	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  00046	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0004a	89 45 f8	 mov	 DWORD PTR _destceiling$[ebp], eax

; 605  : 		destfloor = faller->ceilingdestheight-dist;

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	6b c8 05	 imul	 ecx, eax, 5
  00055	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  00058	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0005c	2b 45 f4	 sub	 eax, DWORD PTR _dist$[ebp]
  0005f	89 45 fc	 mov	 DWORD PTR _destfloor$[ebp], eax

; 606  : 	}

  00062	eb 27		 jmp	 SHORT $LN3@T_Continuo
$LN2@T_Continuo:

; 607  : 	else // Up!
; 608  : 	{
; 609  : 		destceiling = faller->floordestheight+dist;

  00064	b8 04 00 00 00	 mov	 eax, 4
  00069	c1 e0 02	 shl	 eax, 2
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  0006f	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00073	03 55 f4	 add	 edx, DWORD PTR _dist$[ebp]
  00076	89 55 f8	 mov	 DWORD PTR _destceiling$[ebp], edx

; 610  : 		destfloor = faller->floordestheight;

  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	c1 e0 02	 shl	 eax, 2
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  00084	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00088	89 55 fc	 mov	 DWORD PTR _destfloor$[ebp], edx
$LN3@T_Continuo:

; 611  : 	}
; 612  : 
; 613  : 	if (faller->direction == -1)

  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  00096	83 7c 01 10 ff	 cmp	 DWORD PTR [ecx+eax+16], -1
  0009b	75 42		 jne	 SHORT $LN4@T_Continuo

; 614  : 	{
; 615  : 		faller->sector->ceilingheight -= faller->speed;

  0009d	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  000a0	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000a3	ba 04 00 00 00	 mov	 edx, 4
  000a8	6b c2 00	 imul	 eax, edx, 0
  000ab	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  000ae	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000b1	2b 4c 02 10	 sub	 ecx, DWORD PTR [edx+eax+16]
  000b5	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  000b8	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000bb	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 616  : 		faller->sector->floorheight -= faller->speed;

  000be	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  000c1	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 00	 imul	 eax, edx, 0
  000cc	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  000cf	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000d1	2b 4c 02 10	 sub	 ecx, DWORD PTR [edx+eax+16]
  000d5	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  000d8	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000db	89 08		 mov	 DWORD PTR [eax], ecx

; 617  : 	}

  000dd	eb 40		 jmp	 SHORT $LN5@T_Continuo
$LN4@T_Continuo:

; 618  : 	else
; 619  : 	{
; 620  : 		faller->sector->ceilingheight += faller->speed;

  000df	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  000e2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000e5	ba 04 00 00 00	 mov	 edx, 4
  000ea	6b c2 00	 imul	 eax, edx, 0
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  000f3	03 4c 02 10	 add	 ecx, DWORD PTR [edx+eax+16]
  000f7	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  000fa	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  000fd	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 621  : 		faller->sector->floorheight += faller->speed;

  00100	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  00103	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00106	ba 04 00 00 00	 mov	 edx, 4
  0010b	6b c2 00	 imul	 eax, edx, 0
  0010e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00110	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  00113	03 4c 02 10	 add	 ecx, DWORD PTR [edx+eax+16]
  00117	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  0011a	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  0011d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN5@T_Continuo:

; 622  : 	}
; 623  : 
; 624  : 	P_CheckSector(faller->sector, false);

  0011f	6a 00		 push	 0
  00121	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  00124	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00127	51		 push	 ecx
  00128	e8 00 00 00 00	 call	 _P_CheckSector
  0012d	83 c4 08	 add	 esp, 8

; 625  : 
; 626  : 	if (faller->direction == -1) // Down

  00130	b8 04 00 00 00	 mov	 eax, 4
  00135	c1 e0 00	 shl	 eax, 0
  00138	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  0013b	83 7c 01 10 ff	 cmp	 DWORD PTR [ecx+eax+16], -1
  00140	75 4a		 jne	 SHORT $LN6@T_Continuo

; 627  : 	{
; 628  : 		if (faller->sector->ceilingheight <= faller->ceilingdestheight)            // if destination height acheived

  00142	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  00145	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00148	ba 04 00 00 00	 mov	 edx, 4
  0014d	6b c2 05	 imul	 eax, edx, 5
  00150	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  00153	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00156	3b 4c 02 10	 cmp	 ecx, DWORD PTR [edx+eax+16]
  0015a	7f 2e		 jg	 SHORT $LN8@T_Continuo

; 629  : 		{
; 630  : 			faller->sector->ceilingheight = faller->ceilingwasheight;

  0015c	b8 04 00 00 00	 mov	 eax, 4
  00161	6b c8 03	 imul	 ecx, eax, 3
  00164	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  00167	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0016a	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  0016d	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  00171	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 631  : 			faller->sector->floorheight = faller->floorwasheight;

  00174	b8 04 00 00 00	 mov	 eax, 4
  00179	d1 e0		 shl	 eax, 1
  0017b	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  0017e	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  00184	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00188	89 02		 mov	 DWORD PTR [edx], eax
$LN8@T_Continuo:

; 632  : 		}
; 633  : 	}

  0018a	eb 47		 jmp	 SHORT $LN9@T_Continuo
$LN6@T_Continuo:

; 634  : 	else // Up
; 635  : 	{
; 636  : 		if (faller->sector->floorheight >= faller->floordestheight)            // if destination height acheived

  0018c	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  0018f	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00192	ba 04 00 00 00	 mov	 edx, 4
  00197	c1 e2 02	 shl	 edx, 2
  0019a	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  0019d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0019f	3b 4c 10 10	 cmp	 ecx, DWORD PTR [eax+edx+16]
  001a3	7c 2e		 jl	 SHORT $LN9@T_Continuo

; 637  : 		{
; 638  : 			faller->sector->ceilingheight = faller->ceilingwasheight;

  001a5	b8 04 00 00 00	 mov	 eax, 4
  001aa	6b c8 03	 imul	 ecx, eax, 3
  001ad	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  001b0	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  001b3	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  001b6	8b 4c 0a 10	 mov	 ecx, DWORD PTR [edx+ecx+16]
  001ba	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 639  : 			faller->sector->floorheight = faller->floorwasheight;

  001bd	b8 04 00 00 00	 mov	 eax, 4
  001c2	d1 e0		 shl	 eax, 1
  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  001c7	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _faller$[ebp]
  001cd	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  001d1	89 02		 mov	 DWORD PTR [edx], eax
$LN9@T_Continuo:

; 640  : 		}
; 641  : 	}
; 642  : 
; 643  : 	faller->sector->floorspeed = faller->speed*faller->direction;

  001d3	b8 04 00 00 00	 mov	 eax, 4
  001d8	6b c8 00	 imul	 ecx, eax, 0
  001db	ba 04 00 00 00	 mov	 edx, 4
  001e0	c1 e2 00	 shl	 edx, 0
  001e3	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  001e6	8b 75 08	 mov	 esi, DWORD PTR _faller$[ebp]
  001e9	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  001ed	0f af 4c 16 10	 imul	 ecx, DWORD PTR [esi+edx+16]
  001f2	8b 55 08	 mov	 edx, DWORD PTR _faller$[ebp]
  001f5	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  001f8	89 88 e8 00 00
	00		 mov	 DWORD PTR [eax+232], ecx

; 644  : 	faller->sector->ceilspeed = 42;

  001fe	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  00201	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00204	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 645  : 	faller->sector->moved = true;

  0020e	8b 45 08	 mov	 eax, DWORD PTR _faller$[ebp]
  00211	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00214	c7 81 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+172], 1

; 646  : #undef speed
; 647  : #undef direction
; 648  : #undef floorwasheight
; 649  : #undef ceilingwasheight
; 650  : #undef floordestheight
; 651  : #undef ceilingdestheight
; 652  : }

  0021e	5f		 pop	 edi
  0021f	5e		 pop	 esi
  00220	5b		 pop	 ebx
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c3		 ret	 0
_T_ContinuousFalling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_MoveElevator
_TEXT	SEGMENT
_dc$1 = -48						; size = 4
_wc$2 = -44						; size = 4
_origspeed$3 = -40					; size = 4
_dh$4 = -36						; size = 4
_wh$5 = -32						; size = 4
_origspeed$6 = -28					; size = 4
_oldceiling$ = -24					; size = 4
_oldfloor$ = -20					; size = 4
_dontupdate$ = -16					; size = 4
_res$ = -12						; size = 4
_res2$ = -8						; size = 4
_res1$ = -4						; size = 4
_elevator$ = 8						; size = 4
_T_MoveElevator PROC					; COMDAT

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 343  : 	result_e res1 = 0, res2 = 0, res = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _res1$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _res2$[ebp], 0
  00017	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _res$[ebp], 0

; 344  : 	boolean dontupdate = false;

  0001e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 0

; 345  : 	fixed_t oldfloor, oldceiling;
; 346  : 
; 347  : 	if (P_FreezeObjectplace())

  00025	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  0002a	85 c0		 test	 eax, eax
  0002c	74 05		 je	 SHORT $LN2@T_MoveElev

; 348  : 		return;

  0002e	e9 68 06 00 00	 jmp	 $LN46@T_MoveElev
$LN2@T_MoveElev:

; 349  : 
; 350  : 	if (elevator->delaytimer)

  00033	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00036	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  0003a	74 14		 je	 SHORT $LN3@T_MoveElev

; 351  : 	{
; 352  : 		elevator->delaytimer--;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0003f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00042	83 e9 01	 sub	 ecx, 1
  00045	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00048	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 353  : 		return;

  0004b	e9 4b 06 00 00	 jmp	 $LN46@T_MoveElev
$LN3@T_MoveElev:

; 354  : 	}
; 355  : 
; 356  : 	if (elevator->direction < 0) // moving down

  00050	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00053	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00057	0f 8d cb 01 00
	00		 jge	 $LN4@T_MoveElev

; 357  : 	{
; 358  : 		if (elevator->type == elevateContinuous)

  0005d	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00060	83 78 10 03	 cmp	 DWORD PTR [eax+16], 3
  00064	0f 85 07 01 00
	00		 jne	 $LN14@T_MoveElev

; 359  : 		{
; 360  : 			const fixed_t origspeed = FixedDiv(elevator->origspeed,(ELEVATORSPEED/2));

  0006a	68 00 00 02 00	 push	 131072			; 00020000H
  0006f	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00072	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _FixedDiv
  0007b	83 c4 08	 add	 esp, 8
  0007e	89 45 e4	 mov	 DWORD PTR _origspeed$6[ebp], eax

; 361  : 			const fixed_t wh = abs(elevator->sector->floorheight - elevator->floorwasheight);

  00081	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00084	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00087	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  0008a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008c	2b 42 44	 sub	 eax, DWORD PTR [edx+68]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _abs
  00095	83 c4 04	 add	 esp, 4
  00098	89 45 e0	 mov	 DWORD PTR _wh$5[ebp], eax

; 362  : 			const fixed_t dh = abs(elevator->sector->floorheight - elevator->floordestheight);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0009e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a1	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  000a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a6	2b 42 20	 sub	 eax, DWORD PTR [edx+32]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _abs
  000af	83 c4 04	 add	 esp, 4
  000b2	89 45 dc	 mov	 DWORD PTR _dh$4[ebp], eax

; 363  : 
; 364  : 			// Slow down when reaching destination Tails 12-06-2000
; 365  : 			if (wh < dh)

  000b5	8b 45 e0	 mov	 eax, DWORD PTR _wh$5[ebp]
  000b8	3b 45 dc	 cmp	 eax, DWORD PTR _dh$4[ebp]
  000bb	7d 1e		 jge	 SHORT $LN7@T_MoveElev

; 366  : 				elevator->speed = FixedDiv(wh,25*FRACUNIT) + FRACUNIT/4;

  000bd	68 00 00 19 00	 push	 1638400			; 00190000H
  000c2	8b 45 e0	 mov	 eax, DWORD PTR _wh$5[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _FixedDiv
  000cb	83 c4 08	 add	 esp, 8
  000ce	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  000d6	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  000d9	eb 1c		 jmp	 SHORT $LN8@T_MoveElev
$LN7@T_MoveElev:

; 367  : 			else
; 368  : 				elevator->speed = FixedDiv(dh,25*FRACUNIT) + FRACUNIT/4;

  000db	68 00 00 19 00	 push	 1638400			; 00190000H
  000e0	8b 45 dc	 mov	 eax, DWORD PTR _dh$4[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _FixedDiv
  000e9	83 c4 08	 add	 esp, 8
  000ec	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  000f4	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN8@T_MoveElev:

; 369  : 
; 370  : 			if (elevator->origspeed)

  000f7	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  000fa	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  000fe	74 48		 je	 SHORT $LN9@T_MoveElev

; 371  : 			{
; 372  : 				elevator->speed = FixedMul(elevator->speed,origspeed);

  00100	8b 45 e4	 mov	 eax, DWORD PTR _origspeed$6[ebp]
  00103	50		 push	 eax
  00104	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00107	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 _FixedMul
  00110	83 c4 08	 add	 esp, 8
  00113	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00116	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 373  : 				if (elevator->speed > elevator->origspeed)

  00119	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0011c	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0011f	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00122	3b 51 2c	 cmp	 edx, DWORD PTR [ecx+44]
  00125	7e 0c		 jle	 SHORT $LN11@T_MoveElev

; 374  : 					elevator->speed = (elevator->origspeed);

  00127	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0012a	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0012d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00130	89 50 28	 mov	 DWORD PTR [eax+40], edx
$LN11@T_MoveElev:

; 375  : 				if (elevator->speed < 1)

  00133	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00136	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  0013a	7d 0a		 jge	 SHORT $LN12@T_MoveElev

; 376  : 					elevator->speed = 1/NEWTICRATERATIO;

  0013c	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0013f	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1
$LN12@T_MoveElev:

; 377  : 			}

  00146	eb 29		 jmp	 SHORT $LN14@T_MoveElev
$LN9@T_MoveElev:

; 378  : 			else
; 379  : 			{
; 380  : 				if (elevator->speed > ((3*FRACUNIT)/NEWTICRATERATIO))

  00148	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0014b	81 78 28 00 00
	03 00		 cmp	 DWORD PTR [eax+40], 196608 ; 00030000H
  00152	7e 0a		 jle	 SHORT $LN13@T_MoveElev

; 381  : 					elevator->speed = ((3*FRACUNIT)/NEWTICRATERATIO);

  00154	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00157	c7 40 28 00 00
	03 00		 mov	 DWORD PTR [eax+40], 196608 ; 00030000H
$LN13@T_MoveElev:

; 382  : 				if (elevator->speed < 1)

  0015e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00161	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  00165	7d 0a		 jge	 SHORT $LN14@T_MoveElev

; 383  : 					elevator->speed = 1/NEWTICRATERATIO;

  00167	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0016a	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1
$LN14@T_MoveElev:

; 384  : 			}
; 385  : 		}
; 386  : 
; 387  : 		oldfloor = elevator->sector->floorheight;

  00171	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00174	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00177	8b 11		 mov	 edx, DWORD PTR [ecx]
  00179	89 55 ec	 mov	 DWORD PTR _oldfloor$[ebp], edx

; 388  : 		oldceiling = elevator->sector->ceilingheight;

  0017c	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0017f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00182	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00185	89 55 e8	 mov	 DWORD PTR _oldceiling$[ebp], edx

; 389  : 
; 390  : 		res1 = T_MovePlane             //jff 4/7/98 reverse order of ceiling/floor

  00188	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0018b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0018e	51		 push	 ecx
  0018f	6a 01		 push	 1
  00191	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00194	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00197	50		 push	 eax
  00198	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0019b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0019e	52		 push	 edx
  0019f	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001a2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001a5	51		 push	 ecx
  001a6	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  001a9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 _T_MovePlane
  001b2	83 c4 18	 add	 esp, 24			; 00000018H
  001b5	89 45 fc	 mov	 DWORD PTR _res1$[ebp], eax

; 391  : 		(
; 392  : 			elevator->sector,
; 393  : 			elevator->speed,
; 394  : 			elevator->ceilingdestheight,
; 395  : 			elevator->distance,
; 396  : 			1,                          // move floor
; 397  : 			elevator->direction
; 398  : 		);
; 399  : 
; 400  : 		res2 = T_MovePlane

  001b8	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001bb	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  001be	51		 push	 ecx
  001bf	6a 00		 push	 0
  001c1	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  001c4	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  001c7	50		 push	 eax
  001c8	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  001cb	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001ce	52		 push	 edx
  001cf	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001d2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001d5	51		 push	 ecx
  001d6	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  001d9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 _T_MovePlane
  001e2	83 c4 18	 add	 esp, 24			; 00000018H
  001e5	89 45 f8	 mov	 DWORD PTR _res2$[ebp], eax

; 401  : 		(
; 402  : 			elevator->sector,
; 403  : 			elevator->speed,
; 404  : 			elevator->floordestheight,
; 405  : 			elevator->distance,
; 406  : 			0,                        // move ceiling
; 407  : 			elevator->direction
; 408  : 		);
; 409  : 
; 410  : 		if (elevator->distance && (res1 == crushed || res2 == crushed))

  001e8	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  001eb	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  001ef	74 2c		 je	 SHORT $LN15@T_MoveElev
  001f1	83 7d fc 01	 cmp	 DWORD PTR _res1$[ebp], 1
  001f5	74 06		 je	 SHORT $LN17@T_MoveElev
  001f7	83 7d f8 01	 cmp	 DWORD PTR _res2$[ebp], 1
  001fb	75 20		 jne	 SHORT $LN15@T_MoveElev
$LN17@T_MoveElev:

; 411  : 		{
; 412  : 			res = crushed;

  001fd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _res$[ebp], 1

; 413  : 			elevator->sector->floorheight = oldfloor;

  00204	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00207	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0020a	8b 55 ec	 mov	 edx, DWORD PTR _oldfloor$[ebp]
  0020d	89 11		 mov	 DWORD PTR [ecx], edx

; 414  : 			elevator->sector->ceilingheight = oldceiling;

  0020f	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00212	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00215	8b 55 e8	 mov	 edx, DWORD PTR _oldceiling$[ebp]
  00218	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 415  : 		}

  0021b	eb 06		 jmp	 SHORT $LN16@T_MoveElev
$LN15@T_MoveElev:

; 416  : 		else
; 417  : 			res = res1;

  0021d	8b 45 fc	 mov	 eax, DWORD PTR _res1$[ebp]
  00220	89 45 f4	 mov	 DWORD PTR _res$[ebp], eax
$LN16@T_MoveElev:

; 418  : 	}

  00223	e9 ce 01 00 00	 jmp	 $LN29@T_MoveElev
$LN4@T_MoveElev:

; 419  : 	else // moving up
; 420  : 	{
; 421  : 		if (elevator->type == elevateContinuous)

  00228	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0022b	83 78 10 03	 cmp	 DWORD PTR [eax+16], 3
  0022f	0f 85 09 01 00
	00		 jne	 $LN26@T_MoveElev

; 422  : 		{
; 423  : 			const fixed_t origspeed = FixedDiv(elevator->origspeed,(ELEVATORSPEED/2));

  00235	68 00 00 02 00	 push	 131072			; 00020000H
  0023a	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0023d	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00240	51		 push	 ecx
  00241	e8 00 00 00 00	 call	 _FixedDiv
  00246	83 c4 08	 add	 esp, 8
  00249	89 45 d8	 mov	 DWORD PTR _origspeed$3[ebp], eax

; 424  : 			const fixed_t wc = abs(elevator->sector->ceilingheight - elevator->ceilingwasheight);

  0024c	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0024f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00252	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00255	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00258	2b 42 48	 sub	 eax, DWORD PTR [edx+72]
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 _abs
  00261	83 c4 04	 add	 esp, 4
  00264	89 45 d4	 mov	 DWORD PTR _wc$2[ebp], eax

; 425  : 			const fixed_t dc = abs(elevator->sector->ceilingheight - elevator->ceilingdestheight);

  00267	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0026a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0026d	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00270	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00273	2b 42 24	 sub	 eax, DWORD PTR [edx+36]
  00276	50		 push	 eax
  00277	e8 00 00 00 00	 call	 _abs
  0027c	83 c4 04	 add	 esp, 4
  0027f	89 45 d0	 mov	 DWORD PTR _dc$1[ebp], eax

; 426  : 			// Slow down when reaching destination Tails 12-06-2000
; 427  : 			if (wc < dc)

  00282	8b 45 d4	 mov	 eax, DWORD PTR _wc$2[ebp]
  00285	3b 45 d0	 cmp	 eax, DWORD PTR _dc$1[ebp]
  00288	7d 1e		 jge	 SHORT $LN19@T_MoveElev

; 428  : 				elevator->speed = FixedDiv(wc,25*FRACUNIT) + FRACUNIT/4;

  0028a	68 00 00 19 00	 push	 1638400			; 00190000H
  0028f	8b 45 d4	 mov	 eax, DWORD PTR _wc$2[ebp]
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 _FixedDiv
  00298	83 c4 08	 add	 esp, 8
  0029b	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002a3	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  002a6	eb 1c		 jmp	 SHORT $LN20@T_MoveElev
$LN19@T_MoveElev:

; 429  : 			else
; 430  : 				elevator->speed = FixedDiv(dc,25*FRACUNIT) + FRACUNIT/4;

  002a8	68 00 00 19 00	 push	 1638400			; 00190000H
  002ad	8b 45 d0	 mov	 eax, DWORD PTR _dc$1[ebp]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 _FixedDiv
  002b6	83 c4 08	 add	 esp, 8
  002b9	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  002be	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002c1	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN20@T_MoveElev:

; 431  : 
; 432  : 			if (elevator->origspeed)

  002c4	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  002c7	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  002cb	74 48		 je	 SHORT $LN21@T_MoveElev

; 433  : 			{
; 434  : 				elevator->speed = FixedMul(elevator->speed,origspeed);

  002cd	8b 45 d8	 mov	 eax, DWORD PTR _origspeed$3[ebp]
  002d0	50		 push	 eax
  002d1	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002d4	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  002d7	52		 push	 edx
  002d8	e8 00 00 00 00	 call	 _FixedMul
  002dd	83 c4 08	 add	 esp, 8
  002e0	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002e3	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 435  : 				if (elevator->speed > elevator->origspeed)

  002e6	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  002e9	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002ec	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  002ef	3b 51 2c	 cmp	 edx, DWORD PTR [ecx+44]
  002f2	7e 0c		 jle	 SHORT $LN23@T_MoveElev

; 436  : 					elevator->speed = (elevator->origspeed);

  002f4	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  002f7	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002fa	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002fd	89 50 28	 mov	 DWORD PTR [eax+40], edx
$LN23@T_MoveElev:

; 437  : 				if (elevator->speed < 1)

  00300	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00303	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  00307	7d 0a		 jge	 SHORT $LN24@T_MoveElev

; 438  : 					elevator->speed = 1/NEWTICRATERATIO;

  00309	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0030c	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1
$LN24@T_MoveElev:

; 439  : 			}

  00313	eb 29		 jmp	 SHORT $LN26@T_MoveElev
$LN21@T_MoveElev:

; 440  : 			else
; 441  : 			{
; 442  : 				if (elevator->speed > ((3*FRACUNIT)/NEWTICRATERATIO))

  00315	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00318	81 78 28 00 00
	03 00		 cmp	 DWORD PTR [eax+40], 196608 ; 00030000H
  0031f	7e 0a		 jle	 SHORT $LN25@T_MoveElev

; 443  : 					elevator->speed = ((3*FRACUNIT)/NEWTICRATERATIO);

  00321	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00324	c7 40 28 00 00
	03 00		 mov	 DWORD PTR [eax+40], 196608 ; 00030000H
$LN25@T_MoveElev:

; 444  : 				if (elevator->speed < 1)

  0032b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0032e	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  00332	7d 0a		 jge	 SHORT $LN26@T_MoveElev

; 445  : 					elevator->speed = 1/NEWTICRATERATIO;

  00334	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00337	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1
$LN26@T_MoveElev:

; 446  : 			}
; 447  : 		}
; 448  : 
; 449  : 		oldfloor = elevator->sector->floorheight;

  0033e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00341	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00344	8b 11		 mov	 edx, DWORD PTR [ecx]
  00346	89 55 ec	 mov	 DWORD PTR _oldfloor$[ebp], edx

; 450  : 		oldceiling = elevator->sector->ceilingheight;

  00349	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0034c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0034f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00352	89 55 e8	 mov	 DWORD PTR _oldceiling$[ebp], edx

; 451  : 
; 452  : 		res1 = T_MovePlane             //jff 4/7/98 reverse order of ceiling/floor

  00355	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00358	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0035b	51		 push	 ecx
  0035c	6a 00		 push	 0
  0035e	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00361	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00364	50		 push	 eax
  00365	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00368	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0036b	52		 push	 edx
  0036c	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0036f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00372	51		 push	 ecx
  00373	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00376	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00379	50		 push	 eax
  0037a	e8 00 00 00 00	 call	 _T_MovePlane
  0037f	83 c4 18	 add	 esp, 24			; 00000018H
  00382	89 45 fc	 mov	 DWORD PTR _res1$[ebp], eax

; 453  : 		(
; 454  : 			elevator->sector,
; 455  : 			elevator->speed,
; 456  : 			elevator->floordestheight,
; 457  : 			elevator->distance,
; 458  : 			0,                          // move ceiling
; 459  : 			elevator->direction
; 460  : 		);
; 461  : 
; 462  : 		if (res1 != crushed)

  00385	83 7d fc 01	 cmp	 DWORD PTR _res1$[ebp], 1
  00389	74 30		 je	 SHORT $LN27@T_MoveElev

; 463  : 		{
; 464  : 			res2 = T_MovePlane

  0038b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0038e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00391	51		 push	 ecx
  00392	6a 01		 push	 1
  00394	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00397	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0039a	50		 push	 eax
  0039b	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0039e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  003a1	52		 push	 edx
  003a2	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003a5	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  003a8	51		 push	 ecx
  003a9	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  003ac	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003af	50		 push	 eax
  003b0	e8 00 00 00 00	 call	 _T_MovePlane
  003b5	83 c4 18	 add	 esp, 24			; 00000018H
  003b8	89 45 f8	 mov	 DWORD PTR _res2$[ebp], eax
$LN27@T_MoveElev:

; 465  : 			(
; 466  : 				elevator->sector,
; 467  : 				elevator->speed,
; 468  : 				elevator->ceilingdestheight,
; 469  : 				elevator->distance,
; 470  : 				1,                        // move floor
; 471  : 				elevator->direction
; 472  : 			);
; 473  : 		}
; 474  : 
; 475  : 		if (elevator->distance && (res1 == crushed || res2 == crushed))

  003bb	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003be	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  003c2	74 2c		 je	 SHORT $LN28@T_MoveElev
  003c4	83 7d fc 01	 cmp	 DWORD PTR _res1$[ebp], 1
  003c8	74 06		 je	 SHORT $LN30@T_MoveElev
  003ca	83 7d f8 01	 cmp	 DWORD PTR _res2$[ebp], 1
  003ce	75 20		 jne	 SHORT $LN28@T_MoveElev
$LN30@T_MoveElev:

; 476  : 		{
; 477  : 			res = crushed;

  003d0	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _res$[ebp], 1

; 478  : 			elevator->sector->floorheight = oldfloor;

  003d7	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003da	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003dd	8b 55 ec	 mov	 edx, DWORD PTR _oldfloor$[ebp]
  003e0	89 11		 mov	 DWORD PTR [ecx], edx

; 479  : 			elevator->sector->ceilingheight = oldceiling;

  003e2	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  003e5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003e8	8b 55 e8	 mov	 edx, DWORD PTR _oldceiling$[ebp]
  003eb	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 480  : 		}

  003ee	eb 06		 jmp	 SHORT $LN29@T_MoveElev
$LN28@T_MoveElev:

; 481  : 		else
; 482  : 			res = res1;

  003f0	8b 45 fc	 mov	 eax, DWORD PTR _res1$[ebp]
  003f3	89 45 f4	 mov	 DWORD PTR _res$[ebp], eax
$LN29@T_MoveElev:

; 483  : 	}
; 484  : /*
; 485  : 	// make floor move sound
; 486  : 	if (!(leveltime&7))
; 487  : 		S_StartSound(&elevator->sector->soundorg, sfx_stnmov);
; 488  : */
; 489  : 	if (res == pastdest || res == crushed)            // if destination height acheived

  003f6	83 7d f4 02	 cmp	 DWORD PTR _res$[ebp], 2
  003fa	74 0a		 je	 SHORT $LN32@T_MoveElev
  003fc	83 7d f4 01	 cmp	 DWORD PTR _res$[ebp], 1
  00400	0f 85 2a 02 00
	00		 jne	 $LN34@T_MoveElev
$LN32@T_MoveElev:

; 490  : 	{
; 491  : 		if (elevator->type == elevateContinuous)

  00406	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00409	83 78 10 03	 cmp	 DWORD PTR [eax+16], 3
  0040d	0f 85 d0 01 00
	00		 jne	 $LN33@T_MoveElev

; 492  : 		{
; 493  : 			if (elevator->direction > 0)

  00413	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00416	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0041a	0f 8e dd 00 00
	00		 jle	 $LN35@T_MoveElev

; 494  : 			{
; 495  : 				elevator->high = 1;

  00420	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00423	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [eax+52], 1

; 496  : 				elevator->low = 0;

  0042a	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0042d	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 497  : 				elevator->direction = -1;

  00434	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00437	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 498  : 
; 499  : 				if (elevator->origspeed)

  0043e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00441	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00445	74 0e		 je	 SHORT $LN37@T_MoveElev

; 500  : 					elevator->speed = elevator->origspeed;

  00447	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0044a	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0044d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00450	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00453	eb 0a		 jmp	 SHORT $LN38@T_MoveElev
$LN37@T_MoveElev:

; 501  : 				else
; 502  : 					elevator->speed = ((3*FRACUNIT)/NEWTICRATERATIO);

  00455	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00458	c7 40 28 00 00
	03 00		 mov	 DWORD PTR [eax+40], 196608 ; 00030000H
$LN38@T_MoveElev:

; 503  : 
; 504  : 				elevator->floorwasheight = elevator->floordestheight;

  0045f	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00462	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00465	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00468	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 505  : 				elevator->ceilingwasheight = elevator->ceilingdestheight;

  0046b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0046e	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00471	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00474	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 506  : 
; 507  : 				if (elevator->low)

  00477	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0047a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0047e	74 3d		 je	 SHORT $LN39@T_MoveElev

; 508  : 				{
; 509  : 					elevator->floordestheight =

  00480	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00483	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00486	8b 11		 mov	 edx, DWORD PTR [ecx]
  00488	52		 push	 edx
  00489	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0048c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0048f	51		 push	 ecx
  00490	e8 00 00 00 00	 call	 _P_FindNextHighestFloor
  00495	83 c4 08	 add	 esp, 8
  00498	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  0049b	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 510  : 						P_FindNextHighestFloor(elevator->sector, elevator->sector->floorheight);
; 511  : 					elevator->ceilingdestheight =

  0049e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004a1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004a4	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  004a7	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  004aa	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  004ad	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  004b0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004b3	2b 02		 sub	 eax, DWORD PTR [edx]
  004b5	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  004b8	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 512  : 						elevator->floordestheight + elevator->sector->ceilingheight - elevator->sector->floorheight;
; 513  : 				}

  004bb	eb 3b		 jmp	 SHORT $LN40@T_MoveElev
$LN39@T_MoveElev:

; 514  : 				else
; 515  : 				{
; 516  : 					elevator->floordestheight =

  004bd	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004c0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  004c5	52		 push	 edx
  004c6	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004c9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004cc	51		 push	 ecx
  004cd	e8 00 00 00 00	 call	 _P_FindNextLowestFloor
  004d2	83 c4 08	 add	 esp, 8
  004d5	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  004d8	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 517  : 						P_FindNextLowestFloor(elevator->sector,elevator->sector->floorheight);
; 518  : 					elevator->ceilingdestheight =

  004db	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  004de	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004e1	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  004e4	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  004e7	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  004ea	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  004ed	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004f0	2b 02		 sub	 eax, DWORD PTR [edx]
  004f2	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  004f5	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN40@T_MoveElev:

; 519  : 						elevator->floordestheight + elevator->sector->ceilingheight - elevator->sector->floorheight;
; 520  : 				}
; 521  : //				T_MoveElevator(elevator);
; 522  : 			}

  004f8	e9 d8 00 00 00	 jmp	 $LN44@T_MoveElev
$LN35@T_MoveElev:

; 523  : 			else
; 524  : 			{
; 525  : 				elevator->high = 0;

  004fd	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00500	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 526  : 				elevator->low = 1;

  00507	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0050a	c7 40 30 01 00
	00 00		 mov	 DWORD PTR [eax+48], 1

; 527  : 				elevator->direction = 1;

  00511	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00514	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1

; 528  : 
; 529  : 				if (elevator->origspeed)

  0051b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0051e	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00522	74 0e		 je	 SHORT $LN41@T_MoveElev

; 530  : 					elevator->speed = elevator->origspeed;

  00524	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00527	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0052a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0052d	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00530	eb 0a		 jmp	 SHORT $LN42@T_MoveElev
$LN41@T_MoveElev:

; 531  : 				else
; 532  : 					elevator->speed = ((3*FRACUNIT)/NEWTICRATERATIO);

  00532	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00535	c7 40 28 00 00
	03 00		 mov	 DWORD PTR [eax+40], 196608 ; 00030000H
$LN42@T_MoveElev:

; 533  : 
; 534  : 				elevator->floorwasheight = elevator->floordestheight;

  0053c	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0053f	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00542	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00545	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 535  : 				elevator->ceilingwasheight = elevator->ceilingdestheight;

  00548	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0054b	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0054e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00551	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 536  : 
; 537  : 				if (elevator->low)

  00554	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00557	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0055b	74 3d		 je	 SHORT $LN43@T_MoveElev

; 538  : 				{
; 539  : 					elevator->floordestheight =

  0055d	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00560	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00563	8b 11		 mov	 edx, DWORD PTR [ecx]
  00565	52		 push	 edx
  00566	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00569	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0056c	51		 push	 ecx
  0056d	e8 00 00 00 00	 call	 _P_FindNextHighestFloor
  00572	83 c4 08	 add	 esp, 8
  00575	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00578	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 540  : 						P_FindNextHighestFloor(elevator->sector, elevator->sector->floorheight);
; 541  : 					elevator->ceilingdestheight =

  0057b	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0057e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00581	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  00584	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00587	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0058a	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0058d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00590	2b 02		 sub	 eax, DWORD PTR [edx]
  00592	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00595	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 542  : 						elevator->floordestheight + elevator->sector->ceilingheight - elevator->sector->floorheight;
; 543  : 				}

  00598	eb 3b		 jmp	 SHORT $LN44@T_MoveElev
$LN43@T_MoveElev:

; 544  : 				else
; 545  : 				{
; 546  : 					elevator->floordestheight =

  0059a	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  0059d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  005a2	52		 push	 edx
  005a3	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  005a6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005a9	51		 push	 ecx
  005aa	e8 00 00 00 00	 call	 _P_FindNextLowestFloor
  005af	83 c4 08	 add	 esp, 8
  005b2	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  005b5	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 547  : 						P_FindNextLowestFloor(elevator->sector,elevator->sector->floorheight);
; 548  : 					elevator->ceilingdestheight =

  005b8	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  005bb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005be	8b 55 08	 mov	 edx, DWORD PTR _elevator$[ebp]
  005c1	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  005c4	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  005c7	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  005ca	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005cd	2b 02		 sub	 eax, DWORD PTR [edx]
  005cf	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  005d2	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN44@T_MoveElev:

; 549  : 						elevator->floordestheight + elevator->sector->ceilingheight - elevator->sector->floorheight;
; 550  : 				}
; 551  : //				T_MoveElevator(elevator);
; 552  : 			}
; 553  : 			elevator->delaytimer = elevator->delay;

  005d5	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  005d8	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  005db	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  005de	89 50 40	 mov	 DWORD PTR [eax+64], edx

; 554  : 		}

  005e1	eb 4d		 jmp	 SHORT $LN34@T_MoveElev
$LN33@T_MoveElev:

; 555  : 		else
; 556  : 		{
; 557  : 			elevator->sector->floordata = NULL;     //jff 2/22/98

  005e3	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  005e6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005e9	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 558  : 			elevator->sector->ceilingdata = NULL;   //jff 2/22/98

  005f0	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  005f3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005f6	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 559  : 			elevator->sector->ceilspeed = 0;

  005fd	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00600	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00603	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 560  : 			elevator->sector->floorspeed = 0;

  0060d	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00610	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00613	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 561  : 			P_RemoveThinker(&elevator->thinker);    // remove elevator from actives

  0061d	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00620	50		 push	 eax
  00621	e8 00 00 00 00	 call	 _P_RemoveThinker
  00626	83 c4 04	 add	 esp, 4

; 562  : 			dontupdate = true;

  00629	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 1
$LN34@T_MoveElev:

; 563  : 		}
; 564  : 		// make floor stop sound
; 565  : 		// S_StartSound(&elevator->sector->soundorg, sfx_pstop);
; 566  : 	}
; 567  : 	if (!dontupdate)

  00630	83 7d f0 00	 cmp	 DWORD PTR _dontupdate$[ebp], 0
  00634	75 2b		 jne	 SHORT $LN45@T_MoveElev

; 568  : 	{
; 569  : 		elevator->sector->floorspeed = elevator->speed*elevator->direction;

  00636	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00639	8b 4d 08	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0063c	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0063f	0f af 51 1c	 imul	 edx, DWORD PTR [ecx+28]
  00643	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00646	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00649	89 91 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], edx

; 570  : 		elevator->sector->ceilspeed = 42;

  0064f	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00652	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00655	c7 81 ec 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+236], 42	; 0000002aH

; 571  : 	}

  0065f	eb 3a		 jmp	 SHORT $LN46@T_MoveElev
$LN45@T_MoveElev:

; 572  : 	else
; 573  : 	{
; 574  : 		elevator->sector->floorspeed = 0;

  00661	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00664	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00667	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 575  : 		elevator->sector->ceilspeed = 0;

  00671	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00674	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00677	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 576  : 		elevator->sector->floordata = NULL;

  00681	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00684	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00687	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 577  : 		elevator->sector->ceilingdata = NULL;

  0068e	8b 45 08	 mov	 eax, DWORD PTR _elevator$[ebp]
  00691	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00694	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN46@T_MoveElev:

; 578  : 	}
; 579  : }

  0069b	5f		 pop	 edi
  0069c	5e		 pop	 esi
  0069d	5b		 pop	 ebx
  0069e	8b e5		 mov	 esp, ebp
  006a0	5d		 pop	 ebp
  006a1	c3		 ret	 0
_T_MoveElevator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_MoveFloor
_TEXT	SEGMENT
tv163 = -88						; size = 4
tv201 = -88						; size = 4
tv226 = -88						; size = 4
tv243 = -88						; size = 4
tv257 = -88						; size = 4
tv289 = -88						; size = 4
tv327 = -88						; size = 4
tv352 = -88						; size = 4
tv369 = -88						; size = 4
tv383 = -88						; size = 4
_bs$1 = -20						; size = 4
_fs$2 = -16						; size = 4
_origspeed$3 = -12					; size = 4
_dontupdate$ = -8					; size = 4
_res$ = -4						; size = 4
_movefloor$ = 8						; size = 4
_T_MoveFloor PROC					; COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 187  : 	result_e res = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _res$[ebp], 0

; 188  : 	boolean dontupdate = false;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 0

; 189  : 
; 190  : 	if (P_FreezeObjectplace())

  00017	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  0001c	85 c0		 test	 eax, eax
  0001e	74 05		 je	 SHORT $LN6@T_MoveFloo

; 191  : 		return;

  00020	e9 cc 06 00 00	 jmp	 $LN1@T_MoveFloo
$LN6@T_MoveFloo:

; 192  : 
; 193  : 	if (movefloor->delaytimer)

  00025	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00028	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0002c	74 14		 je	 SHORT $LN7@T_MoveFloo

; 194  : 	{
; 195  : 		movefloor->delaytimer--;

  0002e	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00031	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00034	83 e9 01	 sub	 ecx, 1
  00037	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  0003a	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 196  : 		return;

  0003d	e9 af 06 00 00	 jmp	 $LN1@T_MoveFloo
$LN7@T_MoveFloo:

; 197  : 	}
; 198  : 
; 199  : 	res = T_MovePlane(movefloor->sector,

  00042	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00045	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00048	51		 push	 ecx
  00049	6a 00		 push	 0
  0004b	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  0004e	0f b6 42 14	 movzx	 eax, BYTE PTR [edx+20]
  00052	50		 push	 eax
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00056	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00059	52		 push	 edx
  0005a	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0005d	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00060	51		 push	 ecx
  00061	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  00064	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _T_MovePlane
  0006d	83 c4 18	 add	 esp, 24			; 00000018H
  00070	89 45 fc	 mov	 DWORD PTR _res$[ebp], eax

; 200  : 	                  movefloor->speed,
; 201  : 	                  movefloor->floordestheight,
; 202  : 	                  movefloor->crush, 0, movefloor->direction);
; 203  : 
; 204  : 	if (movefloor->type == bounceFloor)

  00073	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00076	83 78 10 07	 cmp	 DWORD PTR [eax+16], 7
  0007a	0f 85 c0 00 00
	00		 jne	 $LN8@T_MoveFloo

; 205  : 	{
; 206  : 		const fixed_t origspeed = FixedDiv(movefloor->origspeed,(ELEVATORSPEED/2));

  00080	68 00 00 02 00	 push	 131072			; 00020000H
  00085	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00088	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _FixedDiv
  00091	83 c4 08	 add	 esp, 8
  00094	89 45 f4	 mov	 DWORD PTR _origspeed$3[ebp], eax

; 207  : 		const fixed_t fs = abs(movefloor->sector->floorheight - lines[movefloor->texture].frontsector->floorheight);

  00097	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0009a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0009d	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  000a0	6b 42 20 4c	 imul	 eax, DWORD PTR [edx+32], 76
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  000aa	8b 44 02 30	 mov	 eax, DWORD PTR [edx+eax+48]
  000ae	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000b0	2b 08		 sub	 ecx, DWORD PTR [eax]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _abs
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 45 f0	 mov	 DWORD PTR _fs$2[ebp], eax

; 208  : 		const fixed_t bs = abs(movefloor->sector->floorheight - lines[movefloor->texture].backsector->floorheight);

  000be	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  000c1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000c4	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  000c7	6b 42 20 4c	 imul	 eax, DWORD PTR [edx+32], 76
  000cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  000d1	8b 44 02 34	 mov	 eax, DWORD PTR [edx+eax+52]
  000d5	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000d7	2b 08		 sub	 ecx, DWORD PTR [eax]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 _abs
  000df	83 c4 04	 add	 esp, 4
  000e2	89 45 ec	 mov	 DWORD PTR _bs$1[ebp], eax

; 209  : 		if (fs < bs)

  000e5	8b 45 f0	 mov	 eax, DWORD PTR _fs$2[ebp]
  000e8	3b 45 ec	 cmp	 eax, DWORD PTR _bs$1[ebp]
  000eb	7d 1e		 jge	 SHORT $LN9@T_MoveFloo

; 210  : 			movefloor->speed = FixedDiv(fs,25*FRACUNIT) + FRACUNIT/4;

  000ed	68 00 00 19 00	 push	 1638400			; 00190000H
  000f2	8b 45 f0	 mov	 eax, DWORD PTR _fs$2[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _FixedDiv
  000fb	83 c4 08	 add	 esp, 8
  000fe	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00106	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  00109	eb 1c		 jmp	 SHORT $LN10@T_MoveFloo
$LN9@T_MoveFloo:

; 211  : 		else
; 212  : 			movefloor->speed = FixedDiv(bs,25*FRACUNIT) + FRACUNIT/4;

  0010b	68 00 00 19 00	 push	 1638400			; 00190000H
  00110	8b 45 ec	 mov	 eax, DWORD PTR _bs$1[ebp]
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 _FixedDiv
  00119	83 c4 08	 add	 esp, 8
  0011c	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00124	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN10@T_MoveFloo:

; 213  : 
; 214  : 		movefloor->speed = FixedMul(movefloor->speed,origspeed);

  00127	8b 45 f4	 mov	 eax, DWORD PTR _origspeed$3[ebp]
  0012a	50		 push	 eax
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0012e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 _FixedMul
  00137	83 c4 08	 add	 esp, 8
  0013a	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0013d	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN8@T_MoveFloo:

; 215  : 	}
; 216  : 
; 217  : 	if (res == pastdest)

  00140	83 7d fc 02	 cmp	 DWORD PTR _res$[ebp], 2
  00144	0f 85 67 05 00
	00		 jne	 $LN11@T_MoveFloo

; 218  : 	{
; 219  : 		if (movefloor->direction == 1)

  0014a	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0014d	83 78 1c 01	 cmp	 DWORD PTR [eax+28], 1
  00151	0f 85 a2 02 00
	00		 jne	 $LN12@T_MoveFloo

; 220  : 		{
; 221  : 			switch (movefloor->type)

  00157	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0015a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0015d	89 4d a8	 mov	 DWORD PTR tv163[ebp], ecx
  00160	8b 55 a8	 mov	 edx, DWORD PTR tv163[ebp]
  00163	83 ea 03	 sub	 edx, 3
  00166	89 55 a8	 mov	 DWORD PTR tv163[ebp], edx
  00169	83 7d a8 06	 cmp	 DWORD PTR tv163[ebp], 6
  0016d	0f 87 81 02 00
	00		 ja	 $LN25@T_MoveFloo
  00173	8b 45 a8	 mov	 eax, DWORD PTR tv163[ebp]
  00176	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN50@T_MoveFloo[eax*4]
$LN14@T_MoveFloo:

; 222  : 			{
; 223  : 				case moveFloorByFrontSector:
; 224  : 					if (movefloor->texture < -1) // chained linedef executing

  0017d	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00180	83 78 20 ff	 cmp	 DWORD PTR [eax+32], -1
  00184	7d 19		 jge	 SHORT $LN15@T_MoveFloo

; 225  : 						P_LinedefExecute(movefloor->texture + INT16_MAX + 2, NULL, NULL);

  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0018d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00190	81 c1 01 80 00
	00		 add	 ecx, 32769		; 00008001H
  00196	51		 push	 ecx
  00197	e8 00 00 00 00	 call	 _P_LinedefExecute
  0019c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@T_MoveFloo:

; 226  : 				case instantMoveFloorByFrontSector:
; 227  : 					if (movefloor->texture > -1) // flat changing

  0019f	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  001a2	83 78 20 ff	 cmp	 DWORD PTR [eax+32], -1
  001a6	7e 0f		 jle	 SHORT $LN17@T_MoveFloo

; 228  : 						movefloor->sector->floorpic = movefloor->texture;

  001a8	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  001ab	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001ae	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  001b1	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  001b4	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN17@T_MoveFloo:

; 229  : 					break;

  001b7	e9 38 02 00 00	 jmp	 $LN2@T_MoveFloo
$LN18@T_MoveFloo:

; 230  : 				case bounceFloor: // Graue 03-12-2004
; 231  : 					if (movefloor->floordestheight == lines[movefloor->texture].frontsector->floorheight)

  001bc	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  001bf	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  001c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  001c9	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  001cd	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  001d0	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001d3	3b 10		 cmp	 edx, DWORD PTR [eax]
  001d5	75 1b		 jne	 SHORT $LN19@T_MoveFloo

; 232  : 						movefloor->floordestheight = lines[movefloor->texture].backsector->floorheight;

  001d7	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  001da	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  001e4	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  001e8	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  001eb	8b 10		 mov	 edx, DWORD PTR [eax]
  001ed	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  001f0	eb 19		 jmp	 SHORT $LN20@T_MoveFloo
$LN19@T_MoveFloo:

; 233  : 					else
; 234  : 						movefloor->floordestheight = lines[movefloor->texture].frontsector->floorheight;

  001f2	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  001f5	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  001f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  001ff	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  00203	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00206	8b 10		 mov	 edx, DWORD PTR [eax]
  00208	89 51 24	 mov	 DWORD PTR [ecx+36], edx
$LN20@T_MoveFloo:

; 235  : 					movefloor->direction = (movefloor->floordestheight < movefloor->sector->floorheight) ? -1 : 1;

  0020b	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0020e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00211	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  00214	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00217	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00219	7d 09		 jge	 SHORT $LN42@T_MoveFloo
  0021b	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR tv201[ebp], -1
  00222	eb 07		 jmp	 SHORT $LN43@T_MoveFloo
$LN42@T_MoveFloo:
  00224	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv201[ebp], 1
$LN43@T_MoveFloo:
  0022b	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0022e	8b 55 a8	 mov	 edx, DWORD PTR tv201[ebp]
  00231	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 236  : 					movefloor->sector->floorspeed = movefloor->speed * movefloor->direction;

  00234	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00237	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0023a	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0023d	0f af 51 1c	 imul	 edx, DWORD PTR [ecx+28]
  00241	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00244	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00247	89 91 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], edx

; 237  : 					movefloor->delaytimer = movefloor->delay;

  0024d	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00250	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00253	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00256	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 238  : 					P_RecalcPrecipInSector(movefloor->sector);

  00259	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0025c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0025f	51		 push	 ecx
  00260	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  00265	83 c4 04	 add	 esp, 4

; 239  : 					return; // not break, why did this work? Graue 04-03-2004

  00268	e9 84 04 00 00	 jmp	 $LN1@T_MoveFloo
$LN21@T_MoveFloo:

; 240  : 				case bounceFloorCrush: // Graue 03-27-2004
; 241  : 					if (movefloor->floordestheight == lines[movefloor->texture].frontsector->floorheight)

  0026d	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00270	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  00274	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  0027a	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  0027e	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00281	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00284	3b 10		 cmp	 edx, DWORD PTR [eax]
  00286	75 58		 jne	 SHORT $LN22@T_MoveFloo

; 242  : 					{
; 243  : 						movefloor->floordestheight = lines[movefloor->texture].backsector->floorheight;

  00288	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0028b	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  0028f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00295	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  00299	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0029c	8b 10		 mov	 edx, DWORD PTR [eax]
  0029e	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 244  : 						movefloor->speed = movefloor->origspeed = FixedDiv(abs(lines[movefloor->texture].dy),4*FRACUNIT); // return trip, use dy

  002a1	68 00 00 04 00	 push	 262144			; 00040000H
  002a6	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  002a9	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  002ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  002b3	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 _abs
  002bd	83 c4 04	 add	 esp, 4
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 _FixedDiv
  002c6	83 c4 08	 add	 esp, 8
  002c9	89 45 a8	 mov	 DWORD PTR tv226[ebp], eax
  002cc	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  002cf	8b 55 a8	 mov	 edx, DWORD PTR tv226[ebp]
  002d2	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
  002d5	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  002d8	8b 4d a8	 mov	 ecx, DWORD PTR tv226[ebp]
  002db	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 245  : 					}

  002de	eb 56		 jmp	 SHORT $LN23@T_MoveFloo
$LN22@T_MoveFloo:

; 246  : 					else
; 247  : 					{
; 248  : 						movefloor->floordestheight = lines[movefloor->texture].frontsector->floorheight;

  002e0	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  002e3	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  002e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  002ed	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  002f1	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  002f4	8b 10		 mov	 edx, DWORD PTR [eax]
  002f6	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 249  : 						movefloor->speed = movefloor->origspeed = FixedDiv(abs(lines[movefloor->texture].dx),4*FRACUNIT); // forward again, use dx

  002f9	68 00 00 04 00	 push	 262144			; 00040000H
  002fe	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00301	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  00305	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  0030b	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  0030f	50		 push	 eax
  00310	e8 00 00 00 00	 call	 _abs
  00315	83 c4 04	 add	 esp, 4
  00318	50		 push	 eax
  00319	e8 00 00 00 00	 call	 _FixedDiv
  0031e	83 c4 08	 add	 esp, 8
  00321	89 45 a8	 mov	 DWORD PTR tv243[ebp], eax
  00324	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00327	8b 55 a8	 mov	 edx, DWORD PTR tv243[ebp]
  0032a	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
  0032d	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00330	8b 4d a8	 mov	 ecx, DWORD PTR tv243[ebp]
  00333	89 48 28	 mov	 DWORD PTR [eax+40], ecx
$LN23@T_MoveFloo:

; 250  : 					}
; 251  : 					movefloor->direction = (movefloor->floordestheight < movefloor->sector->floorheight) ? -1 : 1;

  00336	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00339	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0033c	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  0033f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00342	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00344	7d 09		 jge	 SHORT $LN44@T_MoveFloo
  00346	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR tv257[ebp], -1
  0034d	eb 07		 jmp	 SHORT $LN45@T_MoveFloo
$LN44@T_MoveFloo:
  0034f	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv257[ebp], 1
$LN45@T_MoveFloo:
  00356	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00359	8b 55 a8	 mov	 edx, DWORD PTR tv257[ebp]
  0035c	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 252  : 					movefloor->sector->floorspeed = movefloor->speed * movefloor->direction;

  0035f	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00362	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00365	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00368	0f af 51 1c	 imul	 edx, DWORD PTR [ecx+28]
  0036c	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0036f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00372	89 91 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], edx

; 253  : 					movefloor->delaytimer = movefloor->delay;

  00378	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0037b	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0037e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00381	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 254  : 					P_RecalcPrecipInSector(movefloor->sector);

  00384	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00387	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0038a	51		 push	 ecx
  0038b	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  00390	83 c4 04	 add	 esp, 4

; 255  : 					return; // not break, why did this work? Graue 04-03-2004

  00393	e9 59 03 00 00	 jmp	 $LN1@T_MoveFloo
$LN24@T_MoveFloo:

; 256  : 				case crushFloorOnce:
; 257  : 					movefloor->floordestheight = lines[movefloor->texture].frontsector->floorheight;

  00398	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0039b	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  0039f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  003a5	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  003a9	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  003ac	8b 10		 mov	 edx, DWORD PTR [eax]
  003ae	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 258  : 					movefloor->direction = -1;

  003b1	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  003b4	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 259  : 					movefloor->sector->soundorg.z = movefloor->sector->floorheight;

  003bb	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  003be	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003c1	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  003c4	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  003c7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  003c9	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 260  : 					S_StartSound(&movefloor->sector->soundorg,sfx_pstop);

  003cc	6a 7a		 push	 122			; 0000007aH
  003ce	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  003d1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003d4	83 c1 20	 add	 ecx, 32			; 00000020H
  003d7	51		 push	 ecx
  003d8	e8 00 00 00 00	 call	 _S_StartSound
  003dd	83 c4 08	 add	 esp, 8

; 261  : 					P_RecalcPrecipInSector(movefloor->sector);

  003e0	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  003e3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003e6	51		 push	 ecx
  003e7	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  003ec	83 c4 04	 add	 esp, 4

; 262  : 					return;

  003ef	e9 fd 02 00 00	 jmp	 $LN1@T_MoveFloo
$LN25@T_MoveFloo:
$LN2@T_MoveFloo:

; 263  : 				default:
; 264  : 					break;
; 265  : 			}
; 266  : 		}

  003f4	e9 88 02 00 00	 jmp	 $LN4@T_MoveFloo
$LN12@T_MoveFloo:

; 267  : 		else if (movefloor->direction == -1)

  003f9	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  003fc	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  00400	0f 85 7b 02 00
	00		 jne	 $LN4@T_MoveFloo

; 268  : 		{
; 269  : 			switch (movefloor->type)

  00406	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00409	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0040c	89 4d a8	 mov	 DWORD PTR tv289[ebp], ecx
  0040f	8b 55 a8	 mov	 edx, DWORD PTR tv289[ebp]
  00412	83 ea 03	 sub	 edx, 3
  00415	89 55 a8	 mov	 DWORD PTR tv289[ebp], edx
  00418	83 7d a8 06	 cmp	 DWORD PTR tv289[ebp], 6
  0041c	0f 87 5f 02 00
	00		 ja	 $LN38@T_MoveFloo
  00422	8b 45 a8	 mov	 eax, DWORD PTR tv289[ebp]
  00425	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN51@T_MoveFloo[eax*4]
$LN27@T_MoveFloo:

; 270  : 			{
; 271  : 				case moveFloorByFrontSector:
; 272  : 					if (movefloor->texture < -1) // chained linedef executing

  0042c	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0042f	83 78 20 ff	 cmp	 DWORD PTR [eax+32], -1
  00433	7d 19		 jge	 SHORT $LN28@T_MoveFloo

; 273  : 						P_LinedefExecute(movefloor->texture + INT16_MAX + 2, NULL, NULL);

  00435	6a 00		 push	 0
  00437	6a 00		 push	 0
  00439	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0043c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0043f	81 c1 01 80 00
	00		 add	 ecx, 32769		; 00008001H
  00445	51		 push	 ecx
  00446	e8 00 00 00 00	 call	 _P_LinedefExecute
  0044b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN28@T_MoveFloo:

; 274  : 				case instantMoveFloorByFrontSector:
; 275  : 					if (movefloor->texture > -1) // flat changing

  0044e	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00451	83 78 20 ff	 cmp	 DWORD PTR [eax+32], -1
  00455	7e 0f		 jle	 SHORT $LN30@T_MoveFloo

; 276  : 						movefloor->sector->floorpic = movefloor->texture;

  00457	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0045a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0045d	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  00460	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00463	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN30@T_MoveFloo:

; 277  : 					break;

  00466	e9 16 02 00 00	 jmp	 $LN4@T_MoveFloo
$LN31@T_MoveFloo:

; 278  : 				case bounceFloor: // Graue 03-12-2004
; 279  : 					if (movefloor->floordestheight == lines[movefloor->texture].frontsector->floorheight)

  0046b	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0046e	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  00472	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00478	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  0047c	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0047f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00482	3b 10		 cmp	 edx, DWORD PTR [eax]
  00484	75 1b		 jne	 SHORT $LN32@T_MoveFloo

; 280  : 						movefloor->floordestheight = lines[movefloor->texture].backsector->floorheight;

  00486	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00489	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  0048d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00493	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  00497	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0049a	8b 10		 mov	 edx, DWORD PTR [eax]
  0049c	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0049f	eb 19		 jmp	 SHORT $LN33@T_MoveFloo
$LN32@T_MoveFloo:

; 281  : 					else
; 282  : 						movefloor->floordestheight = lines[movefloor->texture].frontsector->floorheight;

  004a1	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  004a4	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  004a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  004ae	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  004b2	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  004b5	8b 10		 mov	 edx, DWORD PTR [eax]
  004b7	89 51 24	 mov	 DWORD PTR [ecx+36], edx
$LN33@T_MoveFloo:

; 283  : 					movefloor->direction = (movefloor->floordestheight < movefloor->sector->floorheight) ? -1 : 1;

  004ba	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  004bd	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004c0	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  004c3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  004c6	3b 01		 cmp	 eax, DWORD PTR [ecx]
  004c8	7d 09		 jge	 SHORT $LN46@T_MoveFloo
  004ca	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR tv327[ebp], -1
  004d1	eb 07		 jmp	 SHORT $LN47@T_MoveFloo
$LN46@T_MoveFloo:
  004d3	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv327[ebp], 1
$LN47@T_MoveFloo:
  004da	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  004dd	8b 55 a8	 mov	 edx, DWORD PTR tv327[ebp]
  004e0	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 284  : 					movefloor->sector->floorspeed = movefloor->speed * movefloor->direction;

  004e3	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  004e6	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  004e9	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  004ec	0f af 51 1c	 imul	 edx, DWORD PTR [ecx+28]
  004f0	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  004f3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004f6	89 91 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], edx

; 285  : 					movefloor->delaytimer = movefloor->delay;

  004fc	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  004ff	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00502	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00505	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 286  : 					P_RecalcPrecipInSector(movefloor->sector);

  00508	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0050b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0050e	51		 push	 ecx
  0050f	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  00514	83 c4 04	 add	 esp, 4

; 287  : 					return; // not break, why did this work? Graue 04-03-2004

  00517	e9 d5 01 00 00	 jmp	 $LN1@T_MoveFloo
$LN34@T_MoveFloo:

; 288  : 				case bounceFloorCrush: // Graue 03-27-2004
; 289  : 					if (movefloor->floordestheight == lines[movefloor->texture].frontsector->floorheight)

  0051c	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0051f	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  00523	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00529	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  0052d	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00530	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00533	3b 10		 cmp	 edx, DWORD PTR [eax]
  00535	75 58		 jne	 SHORT $LN35@T_MoveFloo

; 290  : 					{
; 291  : 						movefloor->floordestheight = lines[movefloor->texture].backsector->floorheight;

  00537	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0053a	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  0053e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00544	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  00548	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0054b	8b 10		 mov	 edx, DWORD PTR [eax]
  0054d	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 292  : 						movefloor->speed = movefloor->origspeed = FixedDiv(abs(lines[movefloor->texture].dy),4*FRACUNIT); // return trip, use dy

  00550	68 00 00 04 00	 push	 262144			; 00040000H
  00555	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00558	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  0055c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00562	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  00566	50		 push	 eax
  00567	e8 00 00 00 00	 call	 _abs
  0056c	83 c4 04	 add	 esp, 4
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 _FixedDiv
  00575	83 c4 08	 add	 esp, 8
  00578	89 45 a8	 mov	 DWORD PTR tv352[ebp], eax
  0057b	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0057e	8b 55 a8	 mov	 edx, DWORD PTR tv352[ebp]
  00581	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
  00584	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00587	8b 4d a8	 mov	 ecx, DWORD PTR tv352[ebp]
  0058a	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 293  : 					}

  0058d	eb 56		 jmp	 SHORT $LN36@T_MoveFloo
$LN35@T_MoveFloo:

; 294  : 					else
; 295  : 					{
; 296  : 						movefloor->floordestheight = lines[movefloor->texture].frontsector->floorheight;

  0058f	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00592	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  00596	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  0059c	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  005a0	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  005a3	8b 10		 mov	 edx, DWORD PTR [eax]
  005a5	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 297  : 						movefloor->speed = movefloor->origspeed = FixedDiv(abs(lines[movefloor->texture].dx),4*FRACUNIT); // forward again, use dx

  005a8	68 00 00 04 00	 push	 262144			; 00040000H
  005ad	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  005b0	6b 48 20 4c	 imul	 ecx, DWORD PTR [eax+32], 76
  005b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  005ba	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  005be	50		 push	 eax
  005bf	e8 00 00 00 00	 call	 _abs
  005c4	83 c4 04	 add	 esp, 4
  005c7	50		 push	 eax
  005c8	e8 00 00 00 00	 call	 _FixedDiv
  005cd	83 c4 08	 add	 esp, 8
  005d0	89 45 a8	 mov	 DWORD PTR tv369[ebp], eax
  005d3	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  005d6	8b 55 a8	 mov	 edx, DWORD PTR tv369[ebp]
  005d9	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
  005dc	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  005df	8b 4d a8	 mov	 ecx, DWORD PTR tv369[ebp]
  005e2	89 48 28	 mov	 DWORD PTR [eax+40], ecx
$LN36@T_MoveFloo:

; 298  : 					}
; 299  : 					movefloor->direction = (movefloor->floordestheight < movefloor->sector->floorheight) ? -1 : 1;

  005e5	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  005e8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  005eb	8b 55 08	 mov	 edx, DWORD PTR _movefloor$[ebp]
  005ee	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  005f1	3b 01		 cmp	 eax, DWORD PTR [ecx]
  005f3	7d 09		 jge	 SHORT $LN48@T_MoveFloo
  005f5	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR tv383[ebp], -1
  005fc	eb 07		 jmp	 SHORT $LN49@T_MoveFloo
$LN48@T_MoveFloo:
  005fe	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv383[ebp], 1
$LN49@T_MoveFloo:
  00605	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00608	8b 55 a8	 mov	 edx, DWORD PTR tv383[ebp]
  0060b	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 300  : 					movefloor->sector->floorspeed = movefloor->speed * movefloor->direction;

  0060e	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00611	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  00614	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00617	0f af 51 1c	 imul	 edx, DWORD PTR [ecx+28]
  0061b	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0061e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00621	89 91 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], edx

; 301  : 					movefloor->delaytimer = movefloor->delay;

  00627	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0062a	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  0062d	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00630	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 302  : 					P_RecalcPrecipInSector(movefloor->sector);

  00633	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00636	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00639	51		 push	 ecx
  0063a	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  0063f	83 c4 04	 add	 esp, 4

; 303  : 					return; // not break, why did this work? Graue 04-03-2004

  00642	e9 aa 00 00 00	 jmp	 $LN1@T_MoveFloo
$LN37@T_MoveFloo:

; 304  : 				case crushFloorOnce:
; 305  : 					movefloor->sector->floordata = NULL; // Clear up the thinker so others can use it

  00647	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  0064a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0064d	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 306  : 					P_RemoveThinker(&movefloor->thinker);

  00654	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00657	50		 push	 eax
  00658	e8 00 00 00 00	 call	 _P_RemoveThinker
  0065d	83 c4 04	 add	 esp, 4

; 307  : 					movefloor->sector->floorspeed = 0;

  00660	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00663	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00666	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 308  : 					P_RecalcPrecipInSector(movefloor->sector);

  00670	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00673	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00676	51		 push	 ecx
  00677	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  0067c	83 c4 04	 add	 esp, 4

; 309  : 					return;

  0067f	eb 70		 jmp	 SHORT $LN1@T_MoveFloo
$LN38@T_MoveFloo:
$LN4@T_MoveFloo:

; 310  : 				default:
; 311  : 					break;
; 312  : 			}
; 313  : 		}
; 314  : 
; 315  : 		movefloor->sector->floordata = NULL; // Clear up the thinker so others can use it

  00681	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00684	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00687	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 316  : 		movefloor->sector->floorspeed = 0;

  0068e	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  00691	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00694	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 317  : 		P_RemoveThinker(&movefloor->thinker);

  0069e	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  006a1	50		 push	 eax
  006a2	e8 00 00 00 00	 call	 _P_RemoveThinker
  006a7	83 c4 04	 add	 esp, 4

; 318  : 		dontupdate = true;

  006aa	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 1
$LN11@T_MoveFloo:

; 319  : 	}
; 320  : 	if (!dontupdate)

  006b1	83 7d f8 00	 cmp	 DWORD PTR _dontupdate$[ebp], 0
  006b5	75 1b		 jne	 SHORT $LN39@T_MoveFloo

; 321  : 		movefloor->sector->floorspeed = movefloor->speed*movefloor->direction;

  006b7	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  006ba	8b 4d 08	 mov	 ecx, DWORD PTR _movefloor$[ebp]
  006bd	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  006c0	0f af 51 1c	 imul	 edx, DWORD PTR [ecx+28]
  006c4	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  006c7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006ca	89 91 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], edx
  006d0	eb 10		 jmp	 SHORT $LN40@T_MoveFloo
$LN39@T_MoveFloo:

; 322  : 	else
; 323  : 		movefloor->sector->floorspeed = 0;

  006d2	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  006d5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006d8	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0
$LN40@T_MoveFloo:

; 324  : 
; 325  : 	P_RecalcPrecipInSector(movefloor->sector);

  006e2	8b 45 08	 mov	 eax, DWORD PTR _movefloor$[ebp]
  006e5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006e8	51		 push	 ecx
  006e9	e8 00 00 00 00	 call	 _P_RecalcPrecipInSector
  006ee	83 c4 04	 add	 esp, 4
$LN1@T_MoveFloo:

; 326  : }

  006f1	5f		 pop	 edi
  006f2	5e		 pop	 esi
  006f3	5b		 pop	 ebx
  006f4	8b e5		 mov	 esp, ebp
  006f6	5d		 pop	 ebp
  006f7	c3		 ret	 0
$LN50@T_MoveFloo:
  006f8	00 00 00 00	 DD	 $LN14@T_MoveFloo
  006fc	00 00 00 00	 DD	 $LN15@T_MoveFloo
  00700	00 00 00 00	 DD	 $LN25@T_MoveFloo
  00704	00 00 00 00	 DD	 $LN25@T_MoveFloo
  00708	00 00 00 00	 DD	 $LN18@T_MoveFloo
  0070c	00 00 00 00	 DD	 $LN21@T_MoveFloo
  00710	00 00 00 00	 DD	 $LN24@T_MoveFloo
$LN51@T_MoveFloo:
  00714	00 00 00 00	 DD	 $LN27@T_MoveFloo
  00718	00 00 00 00	 DD	 $LN28@T_MoveFloo
  0071c	00 00 00 00	 DD	 $LN38@T_MoveFloo
  00720	00 00 00 00	 DD	 $LN38@T_MoveFloo
  00724	00 00 00 00	 DD	 $LN31@T_MoveFloo
  00728	00 00 00 00	 DD	 $LN34@T_MoveFloo
  0072c	00 00 00 00	 DD	 $LN37@T_MoveFloo
_T_MoveFloor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _EV_MarioBlock
_TEXT	SEGMENT
_itsamonitor$1 = -24					; size = 4
_oldz$ = -20						; size = 4
_oldy$ = -16						; size = 4
_oldx$ = -12						; size = 4
_thing$ = -8						; size = 4
_block$ = -4						; size = 4
_sec$ = 8						; size = 4
_roversector$ = 12					; size = 4
_topheight$ = 16					; size = 4
_puncher$ = 20						; size = 4
_EV_MarioBlock PROC					; COMDAT

; 2892 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2893 : 	levelspecthink_t *block;
; 2894 : 	mobj_t *thing;
; 2895 : 	fixed_t oldx = 0, oldy = 0, oldz = 0;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _oldx$[ebp], 0
  00010	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _oldy$[ebp], 0
  00017	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _oldz$[ebp], 0

; 2896 : 
; 2897 : 	if (sec->floordata || sec->ceilingdata)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00021	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00025	75 09		 jne	 SHORT $LN3@EV_MarioBl
  00027	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0002a	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0002e	74 07		 je	 SHORT $LN2@EV_MarioBl
$LN3@EV_MarioBl:

; 2898 : 		return 0;

  00030	33 c0		 xor	 eax, eax
  00032	e9 81 02 00 00	 jmp	 $LN1@EV_MarioBl
$LN2@EV_MarioBl:

; 2899 : 
; 2900 : 	if (sec->touching_thinglist && (thing = sec->touching_thinglist->m_thing) != NULL)

  00037	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0003a	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00041	0f 84 5b 02 00
	00		 je	 $LN4@EV_MarioBl
  00047	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0004a	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00050	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00053	89 55 f8	 mov	 DWORD PTR _thing$[ebp], edx
  00056	83 7d f8 00	 cmp	 DWORD PTR _thing$[ebp], 0
  0005a	0f 84 42 02 00
	00		 je	 $LN4@EV_MarioBl

; 2901 : 	{
; 2902 : 		const boolean itsamonitor = thing->flags & MF_MONITOR;

  00060	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  00063	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00066	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  0006c	89 4d e8	 mov	 DWORD PTR _itsamonitor$1[ebp], ecx

; 2903 : 		// things are touching this sector
; 2904 : 		if (itsamonitor && thing->threshold == 68)

  0006f	74 27		 je	 SHORT $LN6@EV_MarioBl
  00071	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  00074	83 b8 a0 00 00
	00 44		 cmp	 DWORD PTR [eax+160], 68	; 00000044H
  0007b	75 1b		 jne	 SHORT $LN6@EV_MarioBl

; 2905 : 		{
; 2906 : 			// "Thunk!" sound
; 2907 : 			S_StartSound(puncher, sfx_tink); // Puncher is "close enough".

  0007d	68 e6 00 00 00	 push	 230			; 000000e6H
  00082	8b 45 14	 mov	 eax, DWORD PTR _puncher$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _S_StartSound
  0008b	83 c4 08	 add	 esp, 8

; 2908 : 			return 1;

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	e9 20 02 00 00	 jmp	 $LN1@EV_MarioBl
$LN6@EV_MarioBl:

; 2909 : 		}
; 2910 : 		// create and initialize new elevator thinker
; 2911 : 
; 2912 : 		block = Z_Calloc(sizeof (*block), PU_LEVSPEC, NULL);

  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	6a 33		 push	 51			; 00000033H
  0009e	6a 58		 push	 88			; 00000058H
  000a0	e8 00 00 00 00	 call	 _Z_CallocAlign
  000a5	83 c4 10	 add	 esp, 16			; 00000010H
  000a8	89 45 fc	 mov	 DWORD PTR _block$[ebp], eax

; 2913 : 		P_AddThinker(&block->thinker);

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _P_AddThinker
  000b4	83 c4 04	 add	 esp, 4

; 2914 : 		sec->floordata = block;

  000b7	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _block$[ebp]
  000bd	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 2915 : 		sec->ceilingdata = block;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _block$[ebp]
  000c6	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 2916 : 		block->thinker.function.acp1 = (actionf_p1)T_MarioBlock;

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  000cc	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_MarioBlock

; 2917 : 
; 2918 : 		// Set up the fields
; 2919 : 		block->sector = sec;

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _sec$[ebp]
  000d9	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 2920 : 		block->vars[0] = roversector->tag; // actionsector

  000dc	b8 04 00 00 00	 mov	 eax, 4
  000e1	6b c8 00	 imul	 ecx, eax, 0
  000e4	8b 55 0c	 mov	 edx, DWORD PTR _roversector$[ebp]
  000e7	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _block$[ebp]
  000ee	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 2921 : 		block->vars[1] = (4*FRACUNIT)/NEWTICRATERATIO; // speed

  000f2	b8 04 00 00 00	 mov	 eax, 4
  000f7	c1 e0 00	 shl	 eax, 0
  000fa	8b 4d fc	 mov	 ecx, DWORD PTR _block$[ebp]
  000fd	c7 44 01 10 00
	00 04 00	 mov	 DWORD PTR [ecx+eax+16], 262144 ; 00040000H

; 2922 : 		block->vars[2] = 1; // Up // direction

  00105	b8 04 00 00 00	 mov	 eax, 4
  0010a	d1 e0		 shl	 eax, 1
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _block$[ebp]
  0010f	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 2923 : 		block->vars[3] = block->sector->floorheight; // floorwasheight

  00117	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  0011a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0011d	ba 04 00 00 00	 mov	 edx, 4
  00122	6b c2 03	 imul	 eax, edx, 3
  00125	8b 55 fc	 mov	 edx, DWORD PTR _block$[ebp]
  00128	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0012a	89 4c 02 10	 mov	 DWORD PTR [edx+eax+16], ecx

; 2924 : 		block->vars[4] = block->sector->ceilingheight; // ceilingwasheight

  0012e	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  00131	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00134	ba 04 00 00 00	 mov	 edx, 4
  00139	c1 e2 02	 shl	 edx, 2
  0013c	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  0013f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00142	89 4c 10 10	 mov	 DWORD PTR [eax+edx+16], ecx

; 2925 : 		block->vars[5] = FRACUNIT; // distance

  00146	b8 04 00 00 00	 mov	 eax, 4
  0014b	6b c8 05	 imul	 ecx, eax, 5
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _block$[ebp]
  00151	c7 44 0a 10 00
	00 01 00	 mov	 DWORD PTR [edx+ecx+16], 65536 ; 00010000H

; 2926 : 		block->vars[6] = 1; // low

  00159	b8 04 00 00 00	 mov	 eax, 4
  0015e	6b c8 06	 imul	 ecx, eax, 6
  00161	8b 55 fc	 mov	 edx, DWORD PTR _block$[ebp]
  00164	c7 44 0a 10 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+16], 1

; 2927 : 
; 2928 : 		if (itsamonitor)

  0016c	83 7d e8 00	 cmp	 DWORD PTR _itsamonitor$1[ebp], 0
  00170	74 1b		 je	 SHORT $LN7@EV_MarioBl

; 2929 : 		{
; 2930 : 			oldx = thing->x;

  00172	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  00175	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00178	89 4d f4	 mov	 DWORD PTR _oldx$[ebp], ecx

; 2931 : 			oldy = thing->y;

  0017b	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  0017e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00181	89 4d f0	 mov	 DWORD PTR _oldy$[ebp], ecx

; 2932 : 			oldz = thing->z;

  00184	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  00187	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0018a	89 4d ec	 mov	 DWORD PTR _oldz$[ebp], ecx
$LN7@EV_MarioBl:

; 2933 : 		}
; 2934 : 
; 2935 : 		P_UnsetThingPosition(thing);

  0018d	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00196	83 c4 04	 add	 esp, 4

; 2936 : 		thing->x = roversector->soundorg.x;

  00199	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  0019c	8b 4d 0c	 mov	 ecx, DWORD PTR _roversector$[ebp]
  0019f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001a2	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 2937 : 		thing->y = roversector->soundorg.y;

  001a5	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  001a8	8b 4d 0c	 mov	 ecx, DWORD PTR _roversector$[ebp]
  001ab	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001ae	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 2938 : 		thing->z = topheight;

  001b1	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  001b4	8b 4d 10	 mov	 ecx, DWORD PTR _topheight$[ebp]
  001b7	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2939 : 		thing->momz = 6*FRACUNIT;

  001ba	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  001bd	c7 40 50 00 00
	06 00		 mov	 DWORD PTR [eax+80], 393216 ; 00060000H

; 2940 : 		P_SetThingPosition(thing);

  001c4	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 _P_SetThingPosition
  001cd	83 c4 04	 add	 esp, 4

; 2941 : 		if (thing->flags & MF_SHOOTABLE)

  001d0	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  001d3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001d6	83 e1 04	 and	 ecx, 4
  001d9	74 18		 je	 SHORT $LN8@EV_MarioBl

; 2942 : 			P_DamageMobj(thing, puncher, puncher, 1);

  001db	6a 01		 push	 1
  001dd	8b 45 14	 mov	 eax, DWORD PTR _puncher$[ebp]
  001e0	50		 push	 eax
  001e1	8b 4d 14	 mov	 ecx, DWORD PTR _puncher$[ebp]
  001e4	51		 push	 ecx
  001e5	8b 55 f8	 mov	 edx, DWORD PTR _thing$[ebp]
  001e8	52		 push	 edx
  001e9	e8 00 00 00 00	 call	 _P_DamageMobj
  001ee	83 c4 10	 add	 esp, 16			; 00000010H
  001f1	eb 52		 jmp	 SHORT $LN11@EV_MarioBl
$LN8@EV_MarioBl:

; 2943 : 		else if (thing->type == MT_RING || thing->type == MT_COIN)

  001f3	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  001f6	83 78 7c 2b	 cmp	 DWORD PTR [eax+124], 43	; 0000002bH
  001fa	74 0c		 je	 SHORT $LN12@EV_MarioBl
  001fc	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  001ff	81 78 7c e1 00
	00 00		 cmp	 DWORD PTR [eax+124], 225 ; 000000e1H
  00206	75 2f		 jne	 SHORT $LN10@EV_MarioBl
$LN12@EV_MarioBl:

; 2944 : 		{
; 2945 : 			thing->momz = 3*FRACUNIT;

  00208	8b 45 f8	 mov	 eax, DWORD PTR _thing$[ebp]
  0020b	c7 40 50 00 00
	03 00		 mov	 DWORD PTR [eax+80], 196608 ; 00030000H

; 2946 : 			P_TouchSpecialThing(thing, puncher, false);

  00212	6a 00		 push	 0
  00214	8b 45 14	 mov	 eax, DWORD PTR _puncher$[ebp]
  00217	50		 push	 eax
  00218	8b 4d f8	 mov	 ecx, DWORD PTR _thing$[ebp]
  0021b	51		 push	 ecx
  0021c	e8 00 00 00 00	 call	 _P_TouchSpecialThing
  00221	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2947 : 			// "Thunk!" sound
; 2948 : 			S_StartSound(puncher, sfx_tink); // Puncher is "close enough"

  00224	68 e6 00 00 00	 push	 230			; 000000e6H
  00229	8b 45 14	 mov	 eax, DWORD PTR _puncher$[ebp]
  0022c	50		 push	 eax
  0022d	e8 00 00 00 00	 call	 _S_StartSound
  00232	83 c4 08	 add	 esp, 8

; 2949 : 		}

  00235	eb 0e		 jmp	 SHORT $LN11@EV_MarioBl
$LN10@EV_MarioBl:

; 2950 : 		else
; 2951 : 		{
; 2952 : 			// "Powerup rise" sound
; 2953 : 			S_StartSound(puncher, sfx_cgot); // Puncher is "close enough"

  00237	6a 29		 push	 41			; 00000029H
  00239	8b 45 14	 mov	 eax, DWORD PTR _puncher$[ebp]
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 _S_StartSound
  00242	83 c4 08	 add	 esp, 8
$LN11@EV_MarioBl:

; 2954 : 		}
; 2955 : 
; 2956 : 		if (itsamonitor)

  00245	83 7d e8 00	 cmp	 DWORD PTR _itsamonitor$1[ebp], 0
  00249	74 55		 je	 SHORT $LN13@EV_MarioBl

; 2957 : 		{
; 2958 : 			P_UnsetThingPosition(tmthing);

  0024b	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmthing
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00256	83 c4 04	 add	 esp, 4

; 2959 : 			tmthing->x = oldx;

  00259	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmthing
  0025e	8b 4d f4	 mov	 ecx, DWORD PTR _oldx$[ebp]
  00261	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2960 : 			tmthing->y = oldy;

  00264	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmthing
  00269	8b 4d f0	 mov	 ecx, DWORD PTR _oldy$[ebp]
  0026c	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2961 : 			tmthing->z = oldz;

  0026f	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmthing
  00274	8b 4d ec	 mov	 ecx, DWORD PTR _oldz$[ebp]
  00277	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2962 : 			tmthing->momx = 1;

  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmthing
  0027f	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [eax+72], 1

; 2963 : 			tmthing->momy = 1;

  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmthing
  0028b	c7 40 4c 01 00
	00 00		 mov	 DWORD PTR [eax+76], 1

; 2964 : 			P_SetThingPosition(tmthing);

  00292	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmthing
  00297	50		 push	 eax
  00298	e8 00 00 00 00	 call	 _P_SetThingPosition
  0029d	83 c4 04	 add	 esp, 4
$LN13@EV_MarioBl:

; 2965 : 		}
; 2966 : 	}

  002a0	eb 11		 jmp	 SHORT $LN5@EV_MarioBl
$LN4@EV_MarioBl:

; 2967 : 	else
; 2968 : 		S_StartSound(puncher, sfx_tink); // "Thunk!" sound - puncher is "close enough".

  002a2	68 e6 00 00 00	 push	 230			; 000000e6H
  002a7	8b 45 14	 mov	 eax, DWORD PTR _puncher$[ebp]
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 _S_StartSound
  002b0	83 c4 08	 add	 esp, 8
$LN5@EV_MarioBl:

; 2969 : 
; 2970 : 	return 1;

  002b3	b8 01 00 00 00	 mov	 eax, 1
$LN1@EV_MarioBl:

; 2971 : }

  002b8	5f		 pop	 edi
  002b9	5e		 pop	 esi
  002ba	5b		 pop	 ebx
  002bb	8b e5		 mov	 esp, ebp
  002bd	5d		 pop	 ebp
  002be	c3		 ret	 0
_EV_MarioBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _EV_DoContinuousFall
_TEXT	SEGMENT
_faller$ = -4						; size = 4
_sec$ = 8						; size = 4
_backsector$ = 12					; size = 4
_spd$ = 16						; size = 4
_backwards$ = 20					; size = 4
_EV_DoContinuousFall PROC				; COMDAT

; 2775 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2776 : #define speed vars[0]
; 2777 : #define direction vars[1]
; 2778 : #define floorwasheight vars[2]
; 2779 : #define ceilingwasheight vars[3]
; 2780 : #define floordestheight vars[4]
; 2781 : #define ceilingdestheight vars[5]
; 2782 : 	levelspecthink_t *faller;
; 2783 : 
; 2784 : 	// workaround for when there is no back sector
; 2785 : 	if (backsector == NULL)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _backsector$[ebp], 0
  0000d	75 06		 jne	 SHORT $LN2@EV_DoConti

; 2786 : 		backsector = sec;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00012	89 45 0c	 mov	 DWORD PTR _backsector$[ebp], eax
$LN2@EV_DoConti:

; 2787 : 
; 2788 : 	// create and initialize new thinker
; 2789 : 	faller = Z_Calloc(sizeof (*faller), PU_LEVSPEC, NULL);

  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 33		 push	 51			; 00000033H
  0001b	6a 58		 push	 88			; 00000058H
  0001d	e8 00 00 00 00	 call	 _Z_CallocAlign
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR _faller$[ebp], eax

; 2790 : 	P_AddThinker(&faller->thinker);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _faller$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _P_AddThinker
  00031	83 c4 04	 add	 esp, 4

; 2791 : 	faller->thinker.function.acp1 = (actionf_p1)T_ContinuousFalling;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _faller$[ebp]
  00037	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_ContinuousFalling

; 2792 : 
; 2793 : 	// set up the fields
; 2794 : 	faller->sector = sec;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _faller$[ebp]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _sec$[ebp]
  00044	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 2795 : 	faller->speed = spd;

  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	6b c8 00	 imul	 ecx, eax, 0
  0004f	8b 55 fc	 mov	 edx, DWORD PTR _faller$[ebp]
  00052	8b 45 10	 mov	 eax, DWORD PTR _spd$[ebp]
  00055	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 2796 : 
; 2797 : 	faller->floorwasheight = sec->floorheight;

  00059	b8 04 00 00 00	 mov	 eax, 4
  0005e	d1 e0		 shl	 eax, 1
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _faller$[ebp]
  00063	8b 55 08	 mov	 edx, DWORD PTR _sec$[ebp]
  00066	8b 12		 mov	 edx, DWORD PTR [edx]
  00068	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 2798 : 	faller->ceilingwasheight = sec->ceilingheight;

  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	6b c8 03	 imul	 ecx, eax, 3
  00074	8b 55 fc	 mov	 edx, DWORD PTR _faller$[ebp]
  00077	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0007a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007d	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 2799 : 
; 2800 : 	if (backwards)

  00081	83 7d 14 00	 cmp	 DWORD PTR _backwards$[ebp], 0
  00085	74 48		 je	 SHORT $LN3@EV_DoConti

; 2801 : 	{
; 2802 : 		faller->ceilingdestheight = backsector->ceilingheight;

  00087	b8 04 00 00 00	 mov	 eax, 4
  0008c	6b c8 05	 imul	 ecx, eax, 5
  0008f	8b 55 fc	 mov	 edx, DWORD PTR _faller$[ebp]
  00092	8b 45 0c	 mov	 eax, DWORD PTR _backsector$[ebp]
  00095	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00098	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 2803 : 		faller->floordestheight = faller->ceilingdestheight;

  0009c	b8 04 00 00 00	 mov	 eax, 4
  000a1	6b c8 05	 imul	 ecx, eax, 5
  000a4	ba 04 00 00 00	 mov	 edx, 4
  000a9	c1 e2 02	 shl	 edx, 2
  000ac	8b 45 fc	 mov	 eax, DWORD PTR _faller$[ebp]
  000af	8b 75 fc	 mov	 esi, DWORD PTR _faller$[ebp]
  000b2	8b 4c 0e 10	 mov	 ecx, DWORD PTR [esi+ecx+16]
  000b6	89 4c 10 10	 mov	 DWORD PTR [eax+edx+16], ecx

; 2804 : 		faller->direction = 1; // Up!

  000ba	b8 04 00 00 00	 mov	 eax, 4
  000bf	c1 e0 00	 shl	 eax, 0
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _faller$[ebp]
  000c5	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 2805 : 	}

  000cd	eb 45		 jmp	 SHORT $LN4@EV_DoConti
$LN3@EV_DoConti:

; 2806 : 	else
; 2807 : 	{
; 2808 : 		faller->floordestheight = backsector->floorheight;

  000cf	b8 04 00 00 00	 mov	 eax, 4
  000d4	c1 e0 02	 shl	 eax, 2
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _faller$[ebp]
  000da	8b 55 0c	 mov	 edx, DWORD PTR _backsector$[ebp]
  000dd	8b 12		 mov	 edx, DWORD PTR [edx]
  000df	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 2809 : 		faller->ceilingdestheight = faller->floordestheight;

  000e3	b8 04 00 00 00	 mov	 eax, 4
  000e8	c1 e0 02	 shl	 eax, 2
  000eb	b9 04 00 00 00	 mov	 ecx, 4
  000f0	6b d1 05	 imul	 edx, ecx, 5
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _faller$[ebp]
  000f6	8b 75 fc	 mov	 esi, DWORD PTR _faller$[ebp]
  000f9	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  000fd	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 2810 : 		faller->direction = -1;

  00101	b8 04 00 00 00	 mov	 eax, 4
  00106	c1 e0 00	 shl	 eax, 0
  00109	8b 4d fc	 mov	 ecx, DWORD PTR _faller$[ebp]
  0010c	c7 44 01 10 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax+16], -1
$LN4@EV_DoConti:

; 2811 : 	}
; 2812 : 
; 2813 : 	return 1;

  00114	b8 01 00 00 00	 mov	 eax, 1

; 2814 : #undef speed
; 2815 : #undef direction
; 2816 : #undef floorwasheight
; 2817 : #undef ceilingwasheight
; 2818 : #undef floordestheight
; 2819 : #undef ceilingdestheight
; 2820 : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
_EV_DoContinuousFall ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _EV_StartCrumble
_TEXT	SEGMENT
tv158 = -80						; size = 4
_i$ = -12						; size = 4
_foundsec$ = -8						; size = 4
_elevator$ = -4						; size = 4
_sec$ = 8						; size = 4
_rover$ = 12						; size = 4
_floating$ = 16						; size = 4
_player$ = 20						; size = 4
_origalpha$ = 24					; size = 4
_crumblereturn$ = 28					; size = 4
_EV_StartCrumble PROC					; COMDAT

; 2825 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2826 : 	elevator_t *elevator;
; 2827 : 	sector_t *foundsec;
; 2828 : 	INT32 i;
; 2829 : 
; 2830 : 	// If floor is already activated, skip it
; 2831 : 	if (sec->floordata)

  00009	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0000c	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00010	74 07		 je	 SHORT $LN5@EV_StartCr

; 2832 : 		return 0;

  00012	33 c0		 xor	 eax, eax
  00014	e9 b0 01 00 00	 jmp	 $LN1@EV_StartCr
$LN5@EV_StartCr:

; 2833 : 
; 2834 : 	if (sec->crumblestate > 1)

  00019	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0001c	83 78 74 01	 cmp	 DWORD PTR [eax+116], 1
  00020	7e 07		 jle	 SHORT $LN6@EV_StartCr

; 2835 : 		return 0;

  00022	33 c0		 xor	 eax, eax
  00024	e9 a0 01 00 00	 jmp	 $LN1@EV_StartCr
$LN6@EV_StartCr:

; 2836 : 
; 2837 : 	// create and initialize new elevator thinker
; 2838 : 	elevator = Z_Calloc(sizeof (*elevator), PU_LEVSPEC, NULL);

  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	6a 33		 push	 51			; 00000033H
  0002f	6a 54		 push	 84			; 00000054H
  00031	e8 00 00 00 00	 call	 _Z_CallocAlign
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	89 45 fc	 mov	 DWORD PTR _elevator$[ebp], eax

; 2839 : 	P_AddThinker(&elevator->thinker);

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _P_AddThinker
  00045	83 c4 04	 add	 esp, 4

; 2840 : 	elevator->thinker.function.acp1 = (actionf_p1)T_StartCrumble;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  0004b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_StartCrumble

; 2841 : 
; 2842 : 	// Does this crumbler return?
; 2843 : 	if (crumblereturn)

  00052	83 7d 1c 00	 cmp	 DWORD PTR _crumblereturn$[ebp], 0
  00056	74 0c		 je	 SHORT $LN7@EV_StartCr

; 2844 : 		elevator->type = elevateBounce;

  00058	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  0005b	c7 40 10 04 00
	00 00		 mov	 DWORD PTR [eax+16], 4
  00062	eb 0a		 jmp	 SHORT $LN8@EV_StartCr
$LN7@EV_StartCr:

; 2845 : 	else
; 2846 : 		elevator->type = elevateContinuous;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  00067	c7 40 10 03 00
	00 00		 mov	 DWORD PTR [eax+16], 3
$LN8@EV_StartCr:

; 2847 : 
; 2848 : 	// set up the fields according to the type of elevator action
; 2849 : 	elevator->sector = sec;

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _sec$[ebp]
  00074	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2850 : 	elevator->speed = 0;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  0007a	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 2851 : 
; 2852 : 	if (player && player->mo && (player->mo->eflags & MFE_VERTICALFLIP))

  00081	83 7d 14 00	 cmp	 DWORD PTR _player$[ebp], 0
  00085	74 2e		 je	 SHORT $LN9@EV_StartCr
  00087	8b 45 14	 mov	 eax, DWORD PTR _player$[ebp]
  0008a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0008d	74 26		 je	 SHORT $LN9@EV_StartCr
  0008f	8b 45 14	 mov	 eax, DWORD PTR _player$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0009a	83 e2 20	 and	 edx, 32			; 00000020H
  0009d	74 16		 je	 SHORT $LN9@EV_StartCr

; 2853 : 	{
; 2854 : 		elevator->direction = 1; // Up

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000a2	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1

; 2855 : 		elevator->floordestheight = 1;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000ac	c7 40 20 01 00
	00 00		 mov	 DWORD PTR [eax+32], 1

; 2856 : 	}

  000b3	eb 14		 jmp	 SHORT $LN10@EV_StartCr
$LN9@EV_StartCr:

; 2857 : 	else
; 2858 : 	{
; 2859 : 		elevator->direction = -1; // Down

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000b8	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 2860 : 		elevator->floordestheight = 0;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000c2	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
$LN10@EV_StartCr:

; 2861 : 	}
; 2862 : 
; 2863 : 	elevator->floorwasheight = elevator->sector->floorheight;

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000cc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000cf	8b 55 fc	 mov	 edx, DWORD PTR _elevator$[ebp]
  000d2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d4	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 2864 : 	elevator->ceilingwasheight = elevator->sector->ceilingheight;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000da	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000dd	8b 55 fc	 mov	 edx, DWORD PTR _elevator$[ebp]
  000e0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000e3	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 2865 : 	elevator->distance = TICRATE; // Used for delay time

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000e9	c7 40 38 23 00
	00 00		 mov	 DWORD PTR [eax+56], 35	; 00000023H

; 2866 : 	elevator->low = 0;

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000f3	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 2867 : 	elevator->player = player;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  000fd	8b 4d 14	 mov	 ecx, DWORD PTR _player$[ebp]
  00100	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 2868 : 	elevator->origspeed = origalpha;

  00103	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  00106	8b 4d 18	 mov	 ecx, DWORD PTR _origalpha$[ebp]
  00109	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 2869 : 
; 2870 : 	elevator->sourceline = rover->master;

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  0010f	8b 4d 0c	 mov	 ecx, DWORD PTR _rover$[ebp]
  00112	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00115	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 2871 : 
; 2872 : 	sec->floordata = elevator;

  00118	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0011e	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 2873 : 
; 2874 : 	if (floating)

  00121	83 7d 10 00	 cmp	 DWORD PTR _floating$[ebp], 0
  00125	74 0c		 je	 SHORT $LN11@EV_StartCr

; 2875 : 		elevator->high = 42;

  00127	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  0012a	c7 40 34 2a 00
	00 00		 mov	 DWORD PTR [eax+52], 42	; 0000002aH
  00131	eb 0a		 jmp	 SHORT $LN12@EV_StartCr
$LN11@EV_StartCr:

; 2876 : 	else
; 2877 : 		elevator->high = 0;

  00133	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  00136	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
$LN12@EV_StartCr:

; 2878 : 
; 2879 : 	elevator->sector->crumblestate = 2;

  0013d	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  00140	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00143	c7 41 74 02 00
	00 00		 mov	 DWORD PTR [ecx+116], 2

; 2880 : 
; 2881 : 	for (i = -1; (i = P_FindSectorFromTag(elevator->sourceline->tag, i)) >= 0 ;)

  0014a	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1
$LN2@EV_StartCr:
  00151	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00154	50		 push	 eax
  00155	8b 4d fc	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00158	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0015b	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _P_FindSectorFromTag
  00165	83 c4 08	 add	 esp, 8
  00168	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  0016b	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  0016f	7c 53		 jl	 SHORT $LN3@EV_StartCr

; 2882 : 	{
; 2883 : 		foundsec = &sectors[i];

  00171	69 45 f4 f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00178	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  0017e	89 45 f8	 mov	 DWORD PTR _foundsec$[ebp], eax

; 2884 : 
; 2885 : 		P_SpawnMobj(foundsec->soundorg.x, foundsec->soundorg.y, elevator->direction == 1 ? elevator->sector->floorheight : elevator->sector->ceilingheight, MT_CRUMBLEOBJ);

  00181	8b 45 fc	 mov	 eax, DWORD PTR _elevator$[ebp]
  00184	83 78 1c 01	 cmp	 DWORD PTR [eax+28], 1
  00188	75 0d		 jne	 SHORT $LN14@EV_StartCr
  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0018d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00190	8b 02		 mov	 eax, DWORD PTR [edx]
  00192	89 45 b0	 mov	 DWORD PTR tv158[ebp], eax
  00195	eb 0c		 jmp	 SHORT $LN15@EV_StartCr
$LN14@EV_StartCr:
  00197	8b 4d fc	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0019a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0019d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001a0	89 45 b0	 mov	 DWORD PTR tv158[ebp], eax
$LN15@EV_StartCr:
  001a3	68 04 01 00 00	 push	 260			; 00000104H
  001a8	8b 4d b0	 mov	 ecx, DWORD PTR tv158[ebp]
  001ab	51		 push	 ecx
  001ac	8b 55 f8	 mov	 edx, DWORD PTR _foundsec$[ebp]
  001af	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  001b2	50		 push	 eax
  001b3	8b 4d f8	 mov	 ecx, DWORD PTR _foundsec$[ebp]
  001b6	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001b9	52		 push	 edx
  001ba	e8 00 00 00 00	 call	 _P_SpawnMobj
  001bf	83 c4 10	 add	 esp, 16			; 00000010H

; 2886 : 	}

  001c2	eb 8d		 jmp	 SHORT $LN2@EV_StartCr
$LN3@EV_StartCr:

; 2887 : 
; 2888 : 	return 1;

  001c4	b8 01 00 00 00	 mov	 eax, 1
$LN1@EV_StartCr:

; 2889 : }

  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c3		 ret	 0
_EV_StartCrumble ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _EV_BounceSector
_TEXT	SEGMENT
_bouncer$ = -4						; size = 4
_sec$ = 8						; size = 4
_momz$ = 12						; size = 4
_sourceline$ = 16					; size = 4
_EV_BounceSector PROC					; COMDAT

; 2745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2746 : #define speed vars[0]
; 2747 : #define distance vars[1]
; 2748 : #define low vars[2]
; 2749 : 	levelspecthink_t *bouncer;
; 2750 : 
; 2751 : 	// create and initialize new thinker
; 2752 : 	if (sec->ceilingdata) // One at a time, ma'am.

  00009	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0000c	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00010	74 07		 je	 SHORT $LN2@EV_BounceS

; 2753 : 		return 0;

  00012	33 c0		 xor	 eax, eax
  00014	e9 8e 00 00 00	 jmp	 $LN1@EV_BounceS
$LN2@EV_BounceS:

; 2754 : 
; 2755 : 	bouncer = Z_Calloc(sizeof (*bouncer), PU_LEVSPEC, NULL);

  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	6a 33		 push	 51			; 00000033H
  0001f	6a 58		 push	 88			; 00000058H
  00021	e8 00 00 00 00	 call	 _Z_CallocAlign
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 fc	 mov	 DWORD PTR _bouncer$[ebp], eax

; 2756 : 	P_AddThinker(&bouncer->thinker);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _P_AddThinker
  00035	83 c4 04	 add	 esp, 4

; 2757 : 	sec->ceilingdata = bouncer;

  00038	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0003e	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 2758 : 	bouncer->thinker.function.acp1 = (actionf_p1)T_BounceCheese;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00044	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_BounceCheese

; 2759 : 
; 2760 : 	// set up the fields according to the type of elevator action
; 2761 : 	bouncer->sector = sec;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _bouncer$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _sec$[ebp]
  00051	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 2762 : 	bouncer->speed = abs(momz)/2;

  00054	8b 45 0c	 mov	 eax, DWORD PTR _momz$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _abs
  0005d	83 c4 04	 add	 esp, 4
  00060	99		 cdq
  00061	2b c2		 sub	 eax, edx
  00063	d1 f8		 sar	 eax, 1
  00065	b9 04 00 00 00	 mov	 ecx, 4
  0006a	6b d1 00	 imul	 edx, ecx, 0
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  00070	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 2763 : 	bouncer->sourceline = sourceline;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _bouncer$[ebp]
  00077	8b 4d 10	 mov	 ecx, DWORD PTR _sourceline$[ebp]
  0007a	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 2764 : 	bouncer->distance = FRACUNIT;

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	c1 e0 00	 shl	 eax, 0
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  00088	c7 44 01 10 00
	00 01 00	 mov	 DWORD PTR [ecx+eax+16], 65536 ; 00010000H

; 2765 : 	bouncer->low = 1;

  00090	b8 04 00 00 00	 mov	 eax, 4
  00095	d1 e0		 shl	 eax, 1
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _bouncer$[ebp]
  0009a	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 2766 : 
; 2767 : 	return 1;

  000a2	b8 01 00 00 00	 mov	 eax, 1
$LN1@EV_BounceS:

; 2768 : #undef speed
; 2769 : #undef distance
; 2770 : #undef low
; 2771 : }

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_EV_BounceSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _EV_CrumbleChain
_TEXT	SEGMENT
_spawned$1 = -56					; size = 4
_c$ = -52						; size = 4
_b$ = -48						; size = 4
_a$ = -44						; size = 4
_topz$ = -40						; size = 4
_bottomy$ = -36						; size = 4
_topy$ = -32						; size = 4
_rightx$ = -28						; size = 4
_leftx$ = -24						; size = 4
_bottommostvertex$ = -20				; size = 4
_topmostvertex$ = -16					; size = 4
_rightmostvertex$ = -12					; size = 4
_leftmostvertex$ = -8					; size = 4
_i$ = -4						; size = 4
_sec$ = 8						; size = 4
_rover$ = 12						; size = 4
_EV_CrumbleChain PROC					; COMDAT

; 2661 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2662 : 	size_t i;
; 2663 : 	size_t leftmostvertex = 0, rightmostvertex = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _leftmostvertex$[ebp], 0
  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _rightmostvertex$[ebp], 0

; 2664 : 	size_t topmostvertex = 0, bottommostvertex = 0;

  00017	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _topmostvertex$[ebp], 0
  0001e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bottommostvertex$[ebp], 0

; 2665 : 	fixed_t leftx, rightx;
; 2666 : 	fixed_t topy, bottomy;
; 2667 : 	fixed_t topz;
; 2668 : 	fixed_t a, b, c;
; 2669 : 
; 2670 : 	// soundorg z height never gets set normally, so MEH.
; 2671 : 	sec->soundorg.z = sec->floorheight;

  00025	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _sec$[ebp]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 2672 : 	S_StartSound(&sec->soundorg, sfx_crumbl);

  00030	6a 2b		 push	 43			; 0000002bH
  00032	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00035	83 c0 20	 add	 eax, 32			; 00000020H
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _S_StartSound
  0003e	83 c4 08	 add	 esp, 8

; 2673 : 
; 2674 : 	// Find the leftmost vertex in the subsector.
; 2675 : 	for (i = 0; i < sec->linecount; i++)

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN4@EV_Crumble
$LN2@EV_Crumble:
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@EV_Crumble:
  00053	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00059	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  0005f	73 30		 jae	 SHORT $LN3@EV_Crumble

; 2676 : 	{
; 2677 : 		if ((sec->lines[i]->v1->x < sec->lines[leftmostvertex]->v1->x))

  00061	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00064	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0006d	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 08	 mov	 edx, DWORD PTR _sec$[ebp]
  00075	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0007b	8b 55 f8	 mov	 edx, DWORD PTR _leftmostvertex$[ebp]
  0007e	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00081	8b 10		 mov	 edx, DWORD PTR [eax]
  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	3b 02		 cmp	 eax, DWORD PTR [edx]
  00087	7d 06		 jge	 SHORT $LN23@EV_Crumble

; 2678 : 		{
; 2679 : 			leftmostvertex = i;

  00089	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0008c	89 45 f8	 mov	 DWORD PTR _leftmostvertex$[ebp], eax
$LN23@EV_Crumble:

; 2680 : 		}
; 2681 : 	}

  0008f	eb b9		 jmp	 SHORT $LN2@EV_Crumble
$LN3@EV_Crumble:

; 2682 : 	// Find the rightmost vertex in the subsector.
; 2683 : 	for (i = 0; i < sec->linecount; i++)

  00091	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00098	eb 09		 jmp	 SHORT $LN7@EV_Crumble
$LN5@EV_Crumble:
  0009a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	83 c0 01	 add	 eax, 1
  000a0	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@EV_Crumble:
  000a3	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000a9	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  000af	73 30		 jae	 SHORT $LN6@EV_Crumble

; 2684 : 	{
; 2685 : 		if ((sec->lines[i]->v1->x > sec->lines[rightmostvertex]->v1->x))

  000b1	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  000b4	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000bd	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c2	8b 55 08	 mov	 edx, DWORD PTR _sec$[ebp]
  000c5	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  000cb	8b 55 f4	 mov	 edx, DWORD PTR _rightmostvertex$[ebp]
  000ce	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  000d1	8b 10		 mov	 edx, DWORD PTR [eax]
  000d3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d5	3b 02		 cmp	 eax, DWORD PTR [edx]
  000d7	7e 06		 jle	 SHORT $LN24@EV_Crumble

; 2686 : 		{
; 2687 : 			rightmostvertex = i;

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000dc	89 45 f4	 mov	 DWORD PTR _rightmostvertex$[ebp], eax
$LN24@EV_Crumble:

; 2688 : 		}
; 2689 : 	}

  000df	eb b9		 jmp	 SHORT $LN5@EV_Crumble
$LN6@EV_Crumble:

; 2690 : 	// Find the topmost vertex in the subsector.
; 2691 : 	for (i = 0; i < sec->linecount; i++)

  000e1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000e8	eb 09		 jmp	 SHORT $LN10@EV_Crumble
$LN8@EV_Crumble:
  000ea	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ed	83 c0 01	 add	 eax, 1
  000f0	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@EV_Crumble:
  000f3	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000f9	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  000ff	73 32		 jae	 SHORT $LN9@EV_Crumble

; 2692 : 	{
; 2693 : 		if ((sec->lines[i]->v1->y > sec->lines[topmostvertex]->v1->y))

  00101	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00104	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0010a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0010d	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00110	8b 08		 mov	 ecx, DWORD PTR [eax]
  00112	8b 55 08	 mov	 edx, DWORD PTR _sec$[ebp]
  00115	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0011b	8b 55 f0	 mov	 edx, DWORD PTR _topmostvertex$[ebp]
  0011e	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00121	8b 10		 mov	 edx, DWORD PTR [eax]
  00123	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00126	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00129	7e 06		 jle	 SHORT $LN25@EV_Crumble

; 2694 : 		{
; 2695 : 			topmostvertex = i;

  0012b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0012e	89 45 f0	 mov	 DWORD PTR _topmostvertex$[ebp], eax
$LN25@EV_Crumble:

; 2696 : 		}
; 2697 : 	}

  00131	eb b7		 jmp	 SHORT $LN8@EV_Crumble
$LN9@EV_Crumble:

; 2698 : 	// Find the bottommost vertex in the subsector.
; 2699 : 	for (i = 0; i < sec->linecount; i++)

  00133	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0013a	eb 09		 jmp	 SHORT $LN13@EV_Crumble
$LN11@EV_Crumble:
  0013c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0013f	83 c0 01	 add	 eax, 1
  00142	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN13@EV_Crumble:
  00145	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00148	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0014b	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  00151	73 32		 jae	 SHORT $LN12@EV_Crumble

; 2700 : 	{
; 2701 : 		if ((sec->lines[i]->v1->y < sec->lines[bottommostvertex]->v1->y))

  00153	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00156	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0015c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0015f	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00162	8b 08		 mov	 ecx, DWORD PTR [eax]
  00164	8b 55 08	 mov	 edx, DWORD PTR _sec$[ebp]
  00167	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0016d	8b 55 ec	 mov	 edx, DWORD PTR _bottommostvertex$[ebp]
  00170	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00173	8b 10		 mov	 edx, DWORD PTR [eax]
  00175	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00178	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0017b	7d 06		 jge	 SHORT $LN26@EV_Crumble

; 2702 : 		{
; 2703 : 			bottommostvertex = i;

  0017d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00180	89 45 ec	 mov	 DWORD PTR _bottommostvertex$[ebp], eax
$LN26@EV_Crumble:

; 2704 : 		}
; 2705 : 	}

  00183	eb b7		 jmp	 SHORT $LN11@EV_Crumble
$LN12@EV_Crumble:

; 2706 : 
; 2707 : 	leftx = sec->lines[leftmostvertex]->v1->x+(16<<FRACBITS);

  00185	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  00188	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0018e	8b 55 f8	 mov	 edx, DWORD PTR _leftmostvertex$[ebp]
  00191	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00194	8b 08		 mov	 ecx, DWORD PTR [eax]
  00196	8b 11		 mov	 edx, DWORD PTR [ecx]
  00198	81 c2 00 00 10
	00		 add	 edx, 1048576		; 00100000H
  0019e	89 55 e8	 mov	 DWORD PTR _leftx$[ebp], edx

; 2708 : 	rightx = sec->lines[rightmostvertex]->v1->x;

  001a1	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  001a4	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  001aa	8b 55 f4	 mov	 edx, DWORD PTR _rightmostvertex$[ebp]
  001ad	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  001b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b4	89 55 e4	 mov	 DWORD PTR _rightx$[ebp], edx

; 2709 : 	topy = sec->lines[topmostvertex]->v1->y-(16<<FRACBITS);

  001b7	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  001ba	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  001c0	8b 55 f0	 mov	 edx, DWORD PTR _topmostvertex$[ebp]
  001c3	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  001c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001cb	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  001d1	89 55 e0	 mov	 DWORD PTR _topy$[ebp], edx

; 2710 : 	bottomy = sec->lines[bottommostvertex]->v1->y;

  001d4	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  001d7	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  001dd	8b 55 ec	 mov	 edx, DWORD PTR _bottommostvertex$[ebp]
  001e0	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  001e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001e8	89 55 dc	 mov	 DWORD PTR _bottomy$[ebp], edx

; 2711 : 	topz = *rover->topheight-(16<<FRACBITS);

  001eb	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  001ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f2	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  001f8	89 55 d8	 mov	 DWORD PTR _topz$[ebp], edx

; 2712 : 
; 2713 : 	for (a = leftx; a < rightx; a += (32<<FRACBITS))

  001fb	8b 45 e8	 mov	 eax, DWORD PTR _leftx$[ebp]
  001fe	89 45 d4	 mov	 DWORD PTR _a$[ebp], eax
  00201	eb 0b		 jmp	 SHORT $LN16@EV_Crumble
$LN14@EV_Crumble:
  00203	8b 45 d4	 mov	 eax, DWORD PTR _a$[ebp]
  00206	05 00 00 20 00	 add	 eax, 2097152		; 00200000H
  0020b	89 45 d4	 mov	 DWORD PTR _a$[ebp], eax
$LN16@EV_Crumble:
  0020e	8b 45 d4	 mov	 eax, DWORD PTR _a$[ebp]
  00211	3b 45 e4	 cmp	 eax, DWORD PTR _rightx$[ebp]
  00214	0f 8d e3 00 00
	00		 jge	 $LN15@EV_Crumble

; 2714 : 	{
; 2715 : 		for (b = topy; b > bottomy; b -= (32<<FRACBITS))

  0021a	8b 45 e0	 mov	 eax, DWORD PTR _topy$[ebp]
  0021d	89 45 d0	 mov	 DWORD PTR _b$[ebp], eax
  00220	eb 0b		 jmp	 SHORT $LN19@EV_Crumble
$LN17@EV_Crumble:
  00222	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00225	2d 00 00 20 00	 sub	 eax, 2097152		; 00200000H
  0022a	89 45 d0	 mov	 DWORD PTR _b$[ebp], eax
$LN19@EV_Crumble:
  0022d	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00230	3b 45 dc	 cmp	 eax, DWORD PTR _bottomy$[ebp]
  00233	0f 8e bf 00 00
	00		 jle	 $LN18@EV_Crumble

; 2716 : 		{
; 2717 : 			if (R_PointInSubsector(a, b)->sector == sec)

  00239	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  0023c	50		 push	 eax
  0023d	8b 4d d4	 mov	 ecx, DWORD PTR _a$[ebp]
  00240	51		 push	 ecx
  00241	e8 00 00 00 00	 call	 _R_PointInSubsector
  00246	83 c4 08	 add	 esp, 8
  00249	8b 10		 mov	 edx, DWORD PTR [eax]
  0024b	3b 55 08	 cmp	 edx, DWORD PTR _sec$[ebp]
  0024e	0f 85 9f 00 00
	00		 jne	 $LN21@EV_Crumble

; 2718 : 			{
; 2719 : 				mobj_t *spawned = NULL;

  00254	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _spawned$1[ebp], 0

; 2720 : 				for (c = topz; c > *rover->bottomheight; c -= (32<<FRACBITS))

  0025b	8b 45 d8	 mov	 eax, DWORD PTR _topz$[ebp]
  0025e	89 45 cc	 mov	 DWORD PTR _c$[ebp], eax
  00261	eb 0b		 jmp	 SHORT $LN22@EV_Crumble
$LN20@EV_Crumble:
  00263	8b 45 cc	 mov	 eax, DWORD PTR _c$[ebp]
  00266	2d 00 00 20 00	 sub	 eax, 2097152		; 00200000H
  0026b	89 45 cc	 mov	 DWORD PTR _c$[ebp], eax
$LN22@EV_Crumble:
  0026e	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  00271	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00274	8b 55 cc	 mov	 edx, DWORD PTR _c$[ebp]
  00277	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00279	7e 78		 jle	 SHORT $LN21@EV_Crumble

; 2721 : 				{
; 2722 : 					// If the control sector has a special
; 2723 : 					// of Section3:8-15, use the custom debris.
; 2724 : 					if (GETSECSPECIAL(rover->master->frontsector->special, 3) >= 8)

  0027b	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  0027e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00281	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00284	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  00288	c1 f8 08	 sar	 eax, 8
  0028b	83 e0 0f	 and	 eax, 15			; 0000000fH
  0028e	83 f8 08	 cmp	 eax, 8
  00291	7c 32		 jl	 SHORT $LN28@EV_Crumble

; 2725 : 						spawned = P_SpawnMobj(a, b, c, MT_ROCKCRUMBLE1+(GETSECSPECIAL(rover->master->frontsector->special, 3)-8));

  00293	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  00296	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00299	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0029c	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  002a0	c1 f8 08	 sar	 eax, 8
  002a3	83 e0 0f	 and	 eax, 15			; 0000000fH
  002a6	05 14 01 00 00	 add	 eax, 276		; 00000114H
  002ab	50		 push	 eax
  002ac	8b 4d cc	 mov	 ecx, DWORD PTR _c$[ebp]
  002af	51		 push	 ecx
  002b0	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  002b3	52		 push	 edx
  002b4	8b 45 d4	 mov	 eax, DWORD PTR _a$[ebp]
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 _P_SpawnMobj
  002bd	83 c4 10	 add	 esp, 16			; 00000010H
  002c0	89 45 c8	 mov	 DWORD PTR _spawned$1[ebp], eax
  002c3	eb 1c		 jmp	 SHORT $LN29@EV_Crumble
$LN28@EV_Crumble:

; 2726 : 					else
; 2727 : 						spawned = P_SpawnMobj(a, b, c, MT_ROCKCRUMBLE1);

  002c5	68 1c 01 00 00	 push	 284			; 0000011cH
  002ca	8b 45 cc	 mov	 eax, DWORD PTR _c$[ebp]
  002cd	50		 push	 eax
  002ce	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  002d1	51		 push	 ecx
  002d2	8b 55 d4	 mov	 edx, DWORD PTR _a$[ebp]
  002d5	52		 push	 edx
  002d6	e8 00 00 00 00	 call	 _P_SpawnMobj
  002db	83 c4 10	 add	 esp, 16			; 00000010H
  002de	89 45 c8	 mov	 DWORD PTR _spawned$1[ebp], eax
$LN29@EV_Crumble:

; 2728 : 
; 2729 : 					spawned->fuse = 3*TICRATE;

  002e1	8b 45 c8	 mov	 eax, DWORD PTR _spawned$1[ebp]
  002e4	c7 80 bc 00 00
	00 69 00 00 00	 mov	 DWORD PTR [eax+188], 105 ; 00000069H

; 2730 : 				}

  002ee	e9 70 ff ff ff	 jmp	 $LN20@EV_Crumble
$LN21@EV_Crumble:

; 2731 : 			}
; 2732 : 		}

  002f3	e9 2a ff ff ff	 jmp	 $LN17@EV_Crumble
$LN18@EV_Crumble:

; 2733 : 	}

  002f8	e9 06 ff ff ff	 jmp	 $LN14@EV_Crumble
$LN15@EV_Crumble:

; 2734 : 
; 2735 : 	// Throw the floor into the ground
; 2736 : 	a = rover->master->frontsector->ceilingheight - rover->master->frontsector->floorheight;

  002fd	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  00300	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00303	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00306	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  00309	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0030c	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0030f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00312	2b 08		 sub	 ecx, DWORD PTR [eax]
  00314	89 4d d4	 mov	 DWORD PTR _a$[ebp], ecx

; 2737 : 	rover->master->frontsector->ceilingheight = sec->floorheight - 64*FRACUNIT;

  00317	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	81 e9 00 00 40
	00		 sub	 ecx, 4194304		; 00400000H
  00322	8b 55 0c	 mov	 edx, DWORD PTR _rover$[ebp]
  00325	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00328	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0032b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 2738 : 	rover->master->frontsector->floorheight = rover->master->frontsector->ceilingheight - a;

  0032e	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  00331	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00334	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00337	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0033a	2b 45 d4	 sub	 eax, DWORD PTR _a$[ebp]
  0033d	8b 4d 0c	 mov	 ecx, DWORD PTR _rover$[ebp]
  00340	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00343	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  00346	89 01		 mov	 DWORD PTR [ecx], eax

; 2739 : 	rover->master->frontsector->moved = true;

  00348	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  0034b	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0034e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00351	c7 82 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+172], 1

; 2740 : 	sec->moved = true;

  0035b	8b 45 08	 mov	 eax, DWORD PTR _sec$[ebp]
  0035e	c7 80 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+172], 1

; 2741 : }

  00368	5f		 pop	 edi
  00369	5e		 pop	 esi
  0036a	5b		 pop	 ebx
  0036b	8b e5		 mov	 esp, ebp
  0036d	5d		 pop	 ebp
  0036e	c3		 ret	 0
_EV_CrumbleChain ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _EV_DoElevator
_TEXT	SEGMENT
tv87 = -84						; size = 4
tv175 = -84						; size = 4
tv199 = -84						; size = 4
_elevator$ = -16					; size = 4
_sec$ = -12						; size = 4
_rtn$ = -8						; size = 4
_secnum$ = -4						; size = 4
_line$ = 8						; size = 4
_elevtype$ = 12						; size = 4
_customspeed$ = 16					; size = 4
_EV_DoElevator PROC					; COMDAT

; 2539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2540 : 	INT32 secnum = -1;

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _secnum$[ebp], -1

; 2541 : 	INT32 rtn = 0;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _rtn$[ebp], 0
$LN24@EV_DoEleva:

; 2542 : 	sector_t *sec;
; 2543 : 	elevator_t *elevator;
; 2544 : 
; 2545 : 	// act on all sectors with the same tag as the triggering linedef
; 2546 : 	while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _secnum$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _P_FindSectorFromLineTag
  00024	83 c4 08	 add	 esp, 8
  00027	89 45 fc	 mov	 DWORD PTR _secnum$[ebp], eax
  0002a	83 7d fc 00	 cmp	 DWORD PTR _secnum$[ebp], 0
  0002e	0f 8c b2 03 00
	00		 jl	 $LN3@EV_DoEleva

; 2547 : 	{
; 2548 : 		sec = &sectors[secnum];

  00034	69 45 fc f8 00
	00 00		 imul	 eax, DWORD PTR _secnum$[ebp], 248
  0003b	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00041	89 45 f4	 mov	 DWORD PTR _sec$[ebp], eax

; 2549 : 
; 2550 : 		// If either floor or ceiling is already activated, skip it
; 2551 : 		if (sec->floordata || sec->ceilingdata)

  00044	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00047	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0004b	75 09		 jne	 SHORT $LN7@EV_DoEleva
  0004d	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00050	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00054	74 02		 je	 SHORT $LN6@EV_DoEleva
$LN7@EV_DoEleva:

; 2552 : 			continue;

  00056	eb bf		 jmp	 SHORT $LN24@EV_DoEleva
$LN6@EV_DoEleva:

; 2553 : 
; 2554 : 		// create and initialize new elevator thinker
; 2555 : 		rtn = 1;

  00058	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _rtn$[ebp], 1

; 2556 : 		elevator = Z_Calloc(sizeof (*elevator), PU_LEVSPEC, NULL);

  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	6a 33		 push	 51			; 00000033H
  00065	6a 54		 push	 84			; 00000054H
  00067	e8 00 00 00 00	 call	 _Z_CallocAlign
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	89 45 f0	 mov	 DWORD PTR _elevator$[ebp], eax

; 2557 : 		P_AddThinker(&elevator->thinker);

  00072	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _P_AddThinker
  0007b	83 c4 04	 add	 esp, 4

; 2558 : 		sec->floordata = elevator;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00081	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00084	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 2559 : 		sec->ceilingdata = elevator;

  00087	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0008d	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 2560 : 		elevator->thinker.function.acp1 = (actionf_p1)T_MoveElevator;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00093	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_MoveElevator

; 2561 : 		elevator->type = elevtype;

  0009a	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _elevtype$[ebp]
  000a0	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2562 : 		elevator->sourceline = line;

  000a3	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  000a9	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 2563 : 		elevator->distance = 1; // Always crush unless otherwise

  000ac	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  000af	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 2564 : 
; 2565 : 		// set up the fields according to the type of elevator action
; 2566 : 		switch (elevtype)

  000b6	8b 45 0c	 mov	 eax, DWORD PTR _elevtype$[ebp]
  000b9	89 45 ac	 mov	 DWORD PTR tv87[ebp], eax
  000bc	83 7d ac 06	 cmp	 DWORD PTR tv87[ebp], 6
  000c0	0f 87 1b 03 00
	00		 ja	 $LN18@EV_DoEleva
  000c6	8b 4d ac	 mov	 ecx, DWORD PTR tv87[ebp]
  000c9	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN25@EV_DoEleva[ecx*4]
$LN8@EV_DoEleva:

; 2567 : 		{
; 2568 : 			// elevator down to next floor
; 2569 : 			case elevateDown:
; 2570 : 				elevator->direction = -1;

  000d0	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  000d3	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 2571 : 				elevator->sector = sec;

  000da	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  000dd	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  000e0	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2572 : 				elevator->speed = ELEVATORSPEED/2; // half speed

  000e3	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  000e6	c7 40 28 00 00
	02 00		 mov	 DWORD PTR [eax+40], 131072 ; 00020000H

; 2573 : 				elevator->floordestheight = P_FindNextLowestFloor(sec, sec->floorheight);

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f2	51		 push	 ecx
  000f3	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _P_FindNextLowestFloor
  000fc	83 c4 08	 add	 esp, 8
  000ff	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00102	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2574 : 				elevator->ceilingdestheight = elevator->floordestheight

  00105	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00108	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0010b	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  0010e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00111	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00114	2b 08		 sub	 ecx, DWORD PTR [eax]
  00116	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  00119	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 2575 : 					+ sec->ceilingheight - sec->floorheight;
; 2576 : 				break;

  0011c	e9 c0 02 00 00	 jmp	 $LN4@EV_DoEleva
$LN9@EV_DoEleva:

; 2577 : 
; 2578 : 			// elevator up to next floor
; 2579 : 			case elevateUp:
; 2580 : 				elevator->direction = 1;

  00121	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00124	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1

; 2581 : 				elevator->sector = sec;

  0012b	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  00131	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2582 : 				elevator->speed = ELEVATORSPEED/4; // quarter speed

  00134	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00137	c7 40 28 00 00
	01 00		 mov	 DWORD PTR [eax+40], 65536 ; 00010000H

; 2583 : 				elevator->floordestheight = P_FindNextHighestFloor(sec, sec->floorheight);

  0013e	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00141	8b 08		 mov	 ecx, DWORD PTR [eax]
  00143	51		 push	 ecx
  00144	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 _P_FindNextHighestFloor
  0014d	83 c4 08	 add	 esp, 8
  00150	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00153	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2584 : 				elevator->ceilingdestheight = elevator->floordestheight

  00156	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00159	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0015c	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  0015f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00162	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00165	2b 08		 sub	 ecx, DWORD PTR [eax]
  00167	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  0016a	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 2585 : 					+ sec->ceilingheight - sec->floorheight;
; 2586 : 				break;

  0016d	e9 6f 02 00 00	 jmp	 $LN4@EV_DoEleva
$LN10@EV_DoEleva:

; 2587 : 
; 2588 : 			// elevator up to highest floor
; 2589 : 			case elevateHighest:
; 2590 : 				elevator->direction = 1;

  00172	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00175	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1

; 2591 : 				elevator->sector = sec;

  0017c	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  0017f	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  00182	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2592 : 				elevator->speed = ELEVATORSPEED/4; // quarter speed

  00185	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00188	c7 40 28 00 00
	01 00		 mov	 DWORD PTR [eax+40], 65536 ; 00010000H

; 2593 : 				elevator->floordestheight = P_FindHighestFloorSurrounding(sec);

  0018f	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 _P_FindHighestFloorSurrounding
  00198	83 c4 04	 add	 esp, 4
  0019b	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0019e	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2594 : 				elevator->ceilingdestheight = elevator->floordestheight

  001a1	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  001a4	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001a7	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  001aa	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001ad	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  001b0	2b 08		 sub	 ecx, DWORD PTR [eax]
  001b2	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  001b5	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 2595 : 					+ sec->ceilingheight - sec->floorheight;
; 2596 : 				break;

  001b8	e9 24 02 00 00	 jmp	 $LN4@EV_DoEleva
$LN11@EV_DoEleva:

; 2597 : 
; 2598 : 			// elevator to floor height of activating switch's front sector
; 2599 : 			case elevateCurrent:
; 2600 : 				elevator->sector = sec;

  001bd	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  001c0	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  001c3	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2601 : 				elevator->speed = ELEVATORSPEED;

  001c6	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  001c9	c7 40 28 00 00
	04 00		 mov	 DWORD PTR [eax+40], 262144 ; 00040000H

; 2602 : 				elevator->floordestheight = line->frontsector->floorheight;

  001d0	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  001d3	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001d6	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  001d9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001db	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 2603 : 				elevator->ceilingdestheight = elevator->floordestheight

  001de	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  001e1	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001e4	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  001e7	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001ea	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  001ed	2b 08		 sub	 ecx, DWORD PTR [eax]
  001ef	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  001f2	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 2604 : 					+ sec->ceilingheight - sec->floorheight;
; 2605 : 				elevator->direction = elevator->floordestheight > sec->floorheight?  1 : -1;

  001f5	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  001f8	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  001fb	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  001fe	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00200	7e 09		 jle	 SHORT $LN20@EV_DoEleva
  00202	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv175[ebp], 1
  00209	eb 07		 jmp	 SHORT $LN21@EV_DoEleva
$LN20@EV_DoEleva:
  0020b	c7 45 ac ff ff
	ff ff		 mov	 DWORD PTR tv175[ebp], -1
$LN21@EV_DoEleva:
  00212	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00215	8b 4d ac	 mov	 ecx, DWORD PTR tv175[ebp]
  00218	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 2606 : 				break;

  0021b	e9 c1 01 00 00	 jmp	 $LN4@EV_DoEleva
$LN12@EV_DoEleva:

; 2607 : 
; 2608 : 			case elevateContinuous:
; 2609 : 				if (customspeed)

  00220	83 7d 10 00	 cmp	 DWORD PTR _customspeed$[ebp], 0
  00224	74 44		 je	 SHORT $LN13@EV_DoEleva

; 2610 : 				{
; 2611 : 					elevator->origspeed = P_AproxDistance(line->dx, line->dy);

  00226	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00229	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0022c	51		 push	 ecx
  0022d	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00230	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00233	50		 push	 eax
  00234	e8 00 00 00 00	 call	 _P_AproxDistance
  00239	83 c4 08	 add	 esp, 8
  0023c	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0023f	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 2612 : 					elevator->origspeed = FixedDiv(elevator->origspeed,NEWTICRATERATIO*4*FRACUNIT);

  00242	68 00 00 04 00	 push	 262144			; 00040000H
  00247	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  0024a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0024d	51		 push	 ecx
  0024e	e8 00 00 00 00	 call	 _FixedDiv
  00253	83 c4 08	 add	 esp, 8
  00256	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  00259	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 2613 : 					elevator->speed = elevator->origspeed;

  0025c	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  0025f	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00262	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00265	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 2614 : 				}

  00268	eb 16		 jmp	 SHORT $LN14@EV_DoEleva
$LN13@EV_DoEleva:

; 2615 : 				else
; 2616 : 				{
; 2617 : 					elevator->speed = ELEVATORSPEED/2;

  0026a	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  0026d	c7 40 28 00 00
	02 00		 mov	 DWORD PTR [eax+40], 131072 ; 00020000H

; 2618 : 					elevator->origspeed = elevator->speed;

  00274	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00277	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0027a	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0027d	89 50 2c	 mov	 DWORD PTR [eax+44], edx
$LN14@EV_DoEleva:

; 2619 : 				}
; 2620 : 
; 2621 : 				elevator->sector = sec;

  00280	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00283	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  00286	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2622 : 				elevator->low = !(line->flags & ML_NOCLIMB); // go down first unless noclimb is on

  00289	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0028c	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00290	83 e1 40	 and	 ecx, 64			; 00000040H
  00293	75 09		 jne	 SHORT $LN22@EV_DoEleva
  00295	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv199[ebp], 1
  0029c	eb 07		 jmp	 SHORT $LN23@EV_DoEleva
$LN22@EV_DoEleva:
  0029e	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
$LN23@EV_DoEleva:
  002a5	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  002a8	8b 45 ac	 mov	 eax, DWORD PTR tv199[ebp]
  002ab	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 2623 : 				if (elevator->low)

  002ae	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  002b1	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  002b5	74 3b		 je	 SHORT $LN15@EV_DoEleva

; 2624 : 				{
; 2625 : 					elevator->direction = 1;

  002b7	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  002ba	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1

; 2626 : 					elevator->floordestheight = P_FindNextHighestFloor(sec, sec->floorheight);

  002c1	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  002c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c6	51		 push	 ecx
  002c7	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  002ca	52		 push	 edx
  002cb	e8 00 00 00 00	 call	 _P_FindNextHighestFloor
  002d0	83 c4 08	 add	 esp, 8
  002d3	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  002d6	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2627 : 					elevator->ceilingdestheight = elevator->floordestheight

  002d9	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  002dc	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002df	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  002e2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  002e5	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  002e8	2b 08		 sub	 ecx, DWORD PTR [eax]
  002ea	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  002ed	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 2628 : 						+ sec->ceilingheight - sec->floorheight;
; 2629 : 				}

  002f0	eb 39		 jmp	 SHORT $LN16@EV_DoEleva
$LN15@EV_DoEleva:

; 2630 : 				else
; 2631 : 				{
; 2632 : 					elevator->direction = -1;

  002f2	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  002f5	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 2633 : 					elevator->floordestheight = P_FindNextLowestFloor(sec,sec->floorheight);

  002fc	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  002ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00301	51		 push	 ecx
  00302	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  00305	52		 push	 edx
  00306	e8 00 00 00 00	 call	 _P_FindNextLowestFloor
  0030b	83 c4 08	 add	 esp, 8
  0030e	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00311	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2634 : 					elevator->ceilingdestheight = elevator->floordestheight

  00314	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00317	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0031a	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  0031d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00320	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00323	2b 08		 sub	 ecx, DWORD PTR [eax]
  00325	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  00328	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN16@EV_DoEleva:

; 2635 : 						+ sec->ceilingheight - sec->floorheight;
; 2636 : 				}
; 2637 : 				elevator->floorwasheight = elevator->sector->floorheight;

  0032b	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  0032e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00331	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  00334	8b 01		 mov	 eax, DWORD PTR [ecx]
  00336	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 2638 : 				elevator->ceilingwasheight = elevator->sector->ceilingheight;

  00339	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  0033c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0033f	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  00342	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00345	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 2639 : 
; 2640 : 				elevator->delay = sides[line->sidenum[0]].textureoffset >> FRACBITS;

  00348	b8 02 00 00 00	 mov	 eax, 2
  0034d	6b c8 00	 imul	 ecx, eax, 0
  00350	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00353	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00358	6b c8 1c	 imul	 ecx, eax, 28
  0035b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00361	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00364	c1 f8 10	 sar	 eax, 16			; 00000010H
  00367	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  0036a	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 2641 : 				elevator->delaytimer = sides[line->sidenum[0]].rowoffset >> FRACBITS; // Initial delay

  0036d	b8 02 00 00 00	 mov	 eax, 2
  00372	6b c8 00	 imul	 ecx, eax, 0
  00375	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00378	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  0037d	6b c8 1c	 imul	 ecx, eax, 28
  00380	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00386	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0038a	c1 f8 10	 sar	 eax, 16			; 00000010H
  0038d	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  00390	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 2642 : 				break;

  00393	eb 4c		 jmp	 SHORT $LN4@EV_DoEleva
$LN17@EV_DoEleva:

; 2643 : 
; 2644 : 			case bridgeFall:
; 2645 : 				elevator->direction = -1;

  00395	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  00398	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 2646 : 				elevator->sector = sec;

  0039f	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  003a2	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  003a5	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2647 : 				elevator->speed = ELEVATORSPEED*4; // quadruple speed

  003a8	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  003ab	c7 40 28 00 00
	10 00		 mov	 DWORD PTR [eax+40], 1048576 ; 00100000H

; 2648 : 				elevator->floordestheight = P_FindNextLowestFloor(sec, sec->floorheight);

  003b2	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  003b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b7	51		 push	 ecx
  003b8	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  003bb	52		 push	 edx
  003bc	e8 00 00 00 00	 call	 _P_FindNextLowestFloor
  003c1	83 c4 08	 add	 esp, 8
  003c4	8b 4d f0	 mov	 ecx, DWORD PTR _elevator$[ebp]
  003c7	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2649 : 				elevator->ceilingdestheight = elevator->floordestheight

  003ca	8b 45 f0	 mov	 eax, DWORD PTR _elevator$[ebp]
  003cd	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  003d0	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  003d3	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003d6	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  003d9	2b 08		 sub	 ecx, DWORD PTR [eax]
  003db	8b 55 f0	 mov	 edx, DWORD PTR _elevator$[ebp]
  003de	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN18@EV_DoEleva:
$LN4@EV_DoEleva:

; 2650 : 					+ sec->ceilingheight - sec->floorheight;
; 2651 : 				break;
; 2652 : 
; 2653 : 			default:
; 2654 : 				break;
; 2655 : 		}
; 2656 : 	}

  003e1	e9 31 fc ff ff	 jmp	 $LN24@EV_DoEleva
$LN3@EV_DoEleva:

; 2657 : 	return rtn;

  003e6	8b 45 f8	 mov	 eax, DWORD PTR _rtn$[ebp]

; 2658 : }

  003e9	5f		 pop	 edi
  003ea	5e		 pop	 esi
  003eb	5b		 pop	 ebx
  003ec	8b e5		 mov	 esp, ebp
  003ee	5d		 pop	 ebp
  003ef	c3		 ret	 0
$LN25@EV_DoEleva:
  003f0	00 00 00 00	 DD	 $LN9@EV_DoEleva
  003f4	00 00 00 00	 DD	 $LN8@EV_DoEleva
  003f8	00 00 00 00	 DD	 $LN11@EV_DoEleva
  003fc	00 00 00 00	 DD	 $LN12@EV_DoEleva
  00400	00 00 00 00	 DD	 $LN18@EV_DoEleva
  00404	00 00 00 00	 DD	 $LN10@EV_DoEleva
  00408	00 00 00 00	 DD	 $LN17@EV_DoEleva
_EV_DoElevator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _EV_DoFloor
_TEXT	SEGMENT
tv86 = -88						; size = 4
_dofloor$ = -20						; size = 4
_sec$ = -16						; size = 4
_secnum$ = -12						; size = 4
_firstone$ = -8						; size = 4
_rtn$ = -4						; size = 4
_line$ = 8						; size = 4
_floortype$ = 12					; size = 4
_EV_DoFloor PROC					; COMDAT

; 2331 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2332 : 	INT32 rtn = 0, firstone = 1;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rtn$[ebp], 0
  00010	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _firstone$[ebp], 1

; 2333 : 	INT32 secnum = -1;

  00017	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _secnum$[ebp], -1

; 2334 : 	sector_t *sec;
; 2335 : 	floormove_t *dofloor;
; 2336 : 
; 2337 : 	if (P_FreezeObjectplace())

  0001e	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  00023	85 c0		 test	 eax, eax
  00025	74 07		 je	 SHORT $LN6@EV_DoFloor

; 2338 : 		return false;

  00027	33 c0		 xor	 eax, eax
  00029	e9 d7 05 00 00	 jmp	 $LN1@EV_DoFloor
$LN6@EV_DoFloor:

; 2339 : 
; 2340 : 	while ((secnum = P_FindSectorFromLineTag(line, secnum)) >= 0)

  0002e	8b 45 f4	 mov	 eax, DWORD PTR _secnum$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 _P_FindSectorFromLineTag
  0003b	83 c4 08	 add	 esp, 8
  0003e	89 45 f4	 mov	 DWORD PTR _secnum$[ebp], eax
  00041	83 7d f4 00	 cmp	 DWORD PTR _secnum$[ebp], 0
  00045	0f 8c b7 05 00
	00		 jl	 $LN3@EV_DoFloor

; 2341 : 	{
; 2342 : 		sec = &sectors[secnum];

  0004b	69 45 f4 f8 00
	00 00		 imul	 eax, DWORD PTR _secnum$[ebp], 248
  00052	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00058	89 45 f0	 mov	 DWORD PTR _sec$[ebp], eax

; 2343 : 
; 2344 : 		if (sec->floordata) // if there's already a thinker on this floor,

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  0005e	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00062	74 02		 je	 SHORT $LN7@EV_DoFloor

; 2345 : 			continue; // then don't add another one

  00064	eb c8		 jmp	 SHORT $LN6@EV_DoFloor
$LN7@EV_DoFloor:

; 2346 : 
; 2347 : 		// new floor thinker
; 2348 : 		rtn = 1;

  00066	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _rtn$[ebp], 1

; 2349 : 		dofloor = Z_Calloc(sizeof (*dofloor), PU_LEVSPEC, NULL);

  0006d	6a 00		 push	 0
  0006f	6a 00		 push	 0
  00071	6a 33		 push	 51			; 00000033H
  00073	6a 38		 push	 56			; 00000038H
  00075	e8 00 00 00 00	 call	 _Z_CallocAlign
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	89 45 ec	 mov	 DWORD PTR _dofloor$[ebp], eax

; 2350 : 		P_AddThinker(&dofloor->thinker);

  00080	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _P_AddThinker
  00089	83 c4 04	 add	 esp, 4

; 2351 : 
; 2352 : 		// make sure another floor thinker won't get started over this one
; 2353 : 		sec->floordata = dofloor;

  0008c	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  00092	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 2354 : 
; 2355 : 		// set up some generic aspects of the floormove_t
; 2356 : 		dofloor->thinker.function.acp1 = (actionf_p1)T_MoveFloor;

  00095	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00098	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_MoveFloor

; 2357 : 		dofloor->type = floortype;

  0009f	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  000a2	8b 4d 0c	 mov	 ecx, DWORD PTR _floortype$[ebp]
  000a5	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2358 : 		dofloor->crush = false; // default: types that crush will change this

  000a8	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  000ab	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0

; 2359 : 		dofloor->sector = sec;

  000af	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  000b5	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2360 : 
; 2361 : 		switch (floortype)

  000b8	8b 45 0c	 mov	 eax, DWORD PTR _floortype$[ebp]
  000bb	89 45 a8	 mov	 DWORD PTR tv86[ebp], eax
  000be	83 7d a8 09	 cmp	 DWORD PTR tv86[ebp], 9
  000c2	0f 87 2e 05 00
	00		 ja	 $LN38@EV_DoFloor
  000c8	8b 4d a8	 mov	 ecx, DWORD PTR tv86[ebp]
  000cb	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN41@EV_DoFloor[ecx*4]
$LN8@EV_DoFloor:

; 2362 : 		{
; 2363 : 			// Lowers a floor to the lowest surrounding floor.
; 2364 : 			case lowerFloorToLowest:
; 2365 : 				dofloor->direction = -1; // down

  000d2	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  000d5	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 2366 : 				dofloor->speed = FLOORSPEED*2; // 2 fracunits per tic

  000dc	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  000df	c7 40 28 00 00
	02 00		 mov	 DWORD PTR [eax+40], 131072 ; 00020000H

; 2367 : 				dofloor->floordestheight = P_FindLowestFloorSurrounding(sec);

  000e6	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _P_FindLowestFloorSurrounding
  000ef	83 c4 04	 add	 esp, 4
  000f2	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  000f5	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 2368 : 				break;

  000f8	e9 f9 04 00 00	 jmp	 $LN4@EV_DoFloor
$LN9@EV_DoFloor:

; 2369 : 
; 2370 : 			// Used for part of the Egg Capsule, when an FOF with type 666 is
; 2371 : 			// contacted by the player.
; 2372 : 			case raiseFloorToNearestFast:
; 2373 : 				dofloor->direction = -1; // down

  000fd	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00100	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 2374 : 				dofloor->speed = FLOORSPEED*4; // 4 fracunits per tic

  00107	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  0010a	c7 40 28 00 00
	04 00		 mov	 DWORD PTR [eax+40], 262144 ; 00040000H

; 2375 : 				dofloor->floordestheight = P_FindNextHighestFloor(sec, sec->floorheight);

  00111	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  00114	8b 08		 mov	 ecx, DWORD PTR [eax]
  00116	51		 push	 ecx
  00117	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 _P_FindNextHighestFloor
  00120	83 c4 08	 add	 esp, 8
  00123	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  00126	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 2376 : 				break;

  00129	e9 c8 04 00 00	 jmp	 $LN4@EV_DoFloor
$LN10@EV_DoFloor:

; 2377 : 
; 2378 : 			// Used for sectors tagged to 50 linedefs (effectively
; 2379 : 			// changing the base height for placing things in that sector).
; 2380 : 			case instantLower:
; 2381 : 				dofloor->direction = -1; // down

  0012e	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00131	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 2382 : 				dofloor->speed = INT32_MAX/2; // "instant" means "takes one tic"

  00138	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  0013b	c7 40 28 ff ff
	ff 3f		 mov	 DWORD PTR [eax+40], 1073741823 ; 3fffffffH

; 2383 : 				dofloor->floordestheight = P_FindLowestFloorSurrounding(sec);

  00142	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 _P_FindLowestFloorSurrounding
  0014b	83 c4 04	 add	 esp, 4
  0014e	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  00151	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 2384 : 				break;

  00154	e9 9d 04 00 00	 jmp	 $LN4@EV_DoFloor
$LN11@EV_DoFloor:

; 2385 : 
; 2386 : 			// Linedef executor command, linetype 101.
; 2387 : 			// Front sector floor = destination height.
; 2388 : 			case instantMoveFloorByFrontSector:
; 2389 : 				dofloor->speed = INT32_MAX/2; // as above, "instant" is one tic

  00159	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  0015c	c7 40 28 ff ff
	ff 3f		 mov	 DWORD PTR [eax+40], 1073741823 ; 3fffffffH

; 2390 : 				dofloor->floordestheight = line->frontsector->floorheight;

  00163	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00166	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00169	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  0016c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016e	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 2391 : 
; 2392 : 				if (dofloor->floordestheight >= sec->floorheight)

  00171	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00174	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  00177	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  0017a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0017c	7c 0c		 jl	 SHORT $LN12@EV_DoFloor

; 2393 : 					dofloor->direction = 1; // up

  0017e	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00181	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
  00188	eb 0a		 jmp	 SHORT $LN13@EV_DoFloor
$LN12@EV_DoFloor:

; 2394 : 				else
; 2395 : 					dofloor->direction = -1; // down

  0018a	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  0018d	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
$LN13@EV_DoFloor:

; 2396 : 
; 2397 : 				// New for 1.09: now you can use the no climb flag to
; 2398 : 				// DISABLE the flat changing. This makes it work
; 2399 : 				// totally opposite the way linetype 106 does. Yet
; 2400 : 				// another reason I'll be glad to break backwards
; 2401 : 				// compatibility for the final.
; 2402 : 				if (line->flags & ML_NOCLIMB)

  00194	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00197	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0019b	83 e1 40	 and	 ecx, 64			; 00000040H
  0019e	74 0c		 je	 SHORT $LN14@EV_DoFloor

; 2403 : 					dofloor->texture = -1; // don't mess with the floorpic

  001a0	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  001a3	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
  001aa	eb 0f		 jmp	 SHORT $LN15@EV_DoFloor
$LN14@EV_DoFloor:

; 2404 : 				else
; 2405 : 					dofloor->texture = line->frontsector->floorpic;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  001af	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001b2	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  001b5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001b8	89 42 20	 mov	 DWORD PTR [edx+32], eax
$LN15@EV_DoFloor:

; 2406 : 				break;

  001bb	e9 36 04 00 00	 jmp	 $LN4@EV_DoFloor
$LN16@EV_DoFloor:

; 2407 : 
; 2408 : 			// Linedef executor command, linetype 106.
; 2409 : 			// Line length = speed, front sector floor = destination height.
; 2410 : 			case moveFloorByFrontSector:
; 2411 : 				dofloor->speed = P_AproxDistance(line->dx, line->dy);

  001c0	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  001c3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001c6	51		 push	 ecx
  001c7	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  001ca	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 _P_AproxDistance
  001d3	83 c4 08	 add	 esp, 8
  001d6	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  001d9	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 2412 : 				dofloor->speed = FixedDiv(dofloor->speed,8*FRACUNIT);

  001dc	68 00 00 08 00	 push	 524288			; 00080000H
  001e1	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  001e4	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001e7	51		 push	 ecx
  001e8	e8 00 00 00 00	 call	 _FixedDiv
  001ed	83 c4 08	 add	 esp, 8
  001f0	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  001f3	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 2413 : 				dofloor->floordestheight = line->frontsector->floorheight;

  001f6	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  001f9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001fc	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  001ff	8b 01		 mov	 eax, DWORD PTR [ecx]
  00201	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 2414 : 
; 2415 : 				if (dofloor->floordestheight >= sec->floorheight)

  00204	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00207	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  0020a	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  0020d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0020f	7c 0c		 jl	 SHORT $LN17@EV_DoFloor

; 2416 : 					dofloor->direction = 1; // up

  00211	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00214	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
  0021b	eb 0a		 jmp	 SHORT $LN18@EV_DoFloor
$LN17@EV_DoFloor:

; 2417 : 				else
; 2418 : 					dofloor->direction = -1; // down

  0021d	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00220	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
$LN18@EV_DoFloor:

; 2419 : 
; 2420 : 				// chained linedef executing ability
; 2421 : 				if (line->flags & ML_BLOCKMONSTERS)

  00227	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0022a	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0022e	83 e1 02	 and	 ecx, 2
  00231	74 5d		 je	 SHORT $LN19@EV_DoFloor

; 2422 : 				{
; 2423 : 					// Only set it on one of the moving sectors (the
; 2424 : 					// smallest numbered) and only if the front side
; 2425 : 					// x offset is positive, indicating a valid tag.
; 2426 : 					if (firstone && sides[line->sidenum[0]].textureoffset > 0)

  00233	83 7d f8 00	 cmp	 DWORD PTR _firstone$[ebp], 0
  00237	74 4b		 je	 SHORT $LN21@EV_DoFloor
  00239	b8 02 00 00 00	 mov	 eax, 2
  0023e	6b c8 00	 imul	 ecx, eax, 0
  00241	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00244	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00249	6b c8 1c	 imul	 ecx, eax, 28
  0024c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00252	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  00256	7e 2c		 jle	 SHORT $LN21@EV_DoFloor

; 2427 : 						dofloor->texture = (sides[line->sidenum[0]].textureoffset>>FRACBITS) - 32769;

  00258	b8 02 00 00 00	 mov	 eax, 2
  0025d	6b c8 00	 imul	 ecx, eax, 0
  00260	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00263	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00268	6b c8 1c	 imul	 ecx, eax, 28
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00271	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00274	c1 f8 10	 sar	 eax, 16			; 00000010H
  00277	2d 01 80 00 00	 sub	 eax, 32769		; 00008001H
  0027c	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  0027f	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00282	eb 0a		 jmp	 SHORT $LN22@EV_DoFloor
$LN21@EV_DoFloor:

; 2428 : 					else
; 2429 : 						dofloor->texture = -1;

  00284	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00287	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
$LN22@EV_DoFloor:

; 2430 : 				}

  0028e	eb 27		 jmp	 SHORT $LN24@EV_DoFloor
$LN19@EV_DoFloor:

; 2431 : 
; 2432 : 				// flat changing ability
; 2433 : 				else if (line->flags & ML_NOCLIMB)

  00290	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00293	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00297	83 e1 40	 and	 ecx, 64			; 00000040H
  0029a	74 11		 je	 SHORT $LN23@EV_DoFloor

; 2434 : 					dofloor->texture = line->frontsector->floorpic;

  0029c	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0029f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  002a2	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  002a5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  002a8	89 42 20	 mov	 DWORD PTR [edx+32], eax
  002ab	eb 0a		 jmp	 SHORT $LN24@EV_DoFloor
$LN23@EV_DoFloor:

; 2435 : 				else
; 2436 : 					dofloor->texture = -1; // nothing special to do after movement completes

  002ad	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  002b0	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
$LN24@EV_DoFloor:

; 2437 : 
; 2438 : 				break;

  002b7	e9 3a 03 00 00	 jmp	 $LN4@EV_DoFloor
$LN25@EV_DoFloor:

; 2439 : 
; 2440 : 			// Linedef executor command, linetype 108.
; 2441 : 			// dx = speed, dy = amount to lower.
; 2442 : 			case lowerFloorByLine:
; 2443 : 				dofloor->direction = -1; // down

  002bc	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  002bf	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 2444 : 				dofloor->speed = FixedDiv(abs(line->dx),8*FRACUNIT);

  002c6	68 00 00 08 00	 push	 524288			; 00080000H
  002cb	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  002ce	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 _abs
  002d7	83 c4 04	 add	 esp, 4
  002da	50		 push	 eax
  002db	e8 00 00 00 00	 call	 _FixedDiv
  002e0	83 c4 08	 add	 esp, 8
  002e3	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  002e6	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 2445 : 				dofloor->floordestheight = sec->floorheight - abs(line->dy);

  002e9	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  002ec	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002ef	51		 push	 ecx
  002f0	e8 00 00 00 00	 call	 _abs
  002f5	83 c4 04	 add	 esp, 4
  002f8	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  002fb	8b 0a		 mov	 ecx, DWORD PTR [edx]
  002fd	2b c8		 sub	 ecx, eax
  002ff	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  00302	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 2446 : 				if (dofloor->floordestheight > sec->floorheight) // wrapped around

  00305	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00308	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  0030b	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  0030e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00310	7e 11		 jle	 SHORT $LN26@EV_DoFloor

; 2447 : 					I_Error("Can't lower sector %d\n", secnum);

  00312	8b 45 f4	 mov	 eax, DWORD PTR _secnum$[ebp]
  00315	50		 push	 eax
  00316	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OPCJOJMF@Can?8t?5lower?5sector?5?$CFd?6@
  0031b	e8 00 00 00 00	 call	 _I_Error
  00320	83 c4 08	 add	 esp, 8
$LN26@EV_DoFloor:

; 2448 : 				break;

  00323	e9 ce 02 00 00	 jmp	 $LN4@EV_DoFloor
$LN27@EV_DoFloor:

; 2449 : 
; 2450 : 			// Linedef executor command, linetype 109.
; 2451 : 			// dx = speed, dy = amount to raise.
; 2452 : 			case raiseFloorByLine:
; 2453 : 				dofloor->direction = 1; // up

  00328	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  0032b	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1

; 2454 : 				dofloor->speed = FixedDiv(abs(line->dx),8*FRACUNIT);

  00332	68 00 00 08 00	 push	 524288			; 00080000H
  00337	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0033a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0033d	51		 push	 ecx
  0033e	e8 00 00 00 00	 call	 _abs
  00343	83 c4 04	 add	 esp, 4
  00346	50		 push	 eax
  00347	e8 00 00 00 00	 call	 _FixedDiv
  0034c	83 c4 08	 add	 esp, 8
  0034f	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  00352	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 2455 : 				dofloor->floordestheight = sec->floorheight + abs(line->dy);

  00355	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00358	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0035b	51		 push	 ecx
  0035c	e8 00 00 00 00	 call	 _abs
  00361	83 c4 04	 add	 esp, 4
  00364	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  00367	03 02		 add	 eax, DWORD PTR [edx]
  00369	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  0036c	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 2456 : 				if (dofloor->floordestheight < sec->floorheight) // wrapped around

  0036f	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00372	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  00375	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00378	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0037a	7d 11		 jge	 SHORT $LN28@EV_DoFloor

; 2457 : 					I_Error("Can't raise sector %d\n", secnum);

  0037c	8b 45 f4	 mov	 eax, DWORD PTR _secnum$[ebp]
  0037f	50		 push	 eax
  00380	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GHMLCOOH@Can?8t?5raise?5sector?5?$CFd?6@
  00385	e8 00 00 00 00	 call	 _I_Error
  0038a	83 c4 08	 add	 esp, 8
$LN28@EV_DoFloor:

; 2458 : 				break;

  0038d	e9 64 02 00 00	 jmp	 $LN4@EV_DoFloor
$LN29@EV_DoFloor:

; 2459 : 
; 2460 : 			// Linetypes 2/3.
; 2461 : 			// Move floor up and down indefinitely like the old elevators.
; 2462 : 			case bounceFloor:
; 2463 : 				dofloor->speed = P_AproxDistance(line->dx, line->dy); // same speed as elevateContinuous

  00392	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00395	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00398	51		 push	 ecx
  00399	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  0039c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0039f	50		 push	 eax
  003a0	e8 00 00 00 00	 call	 _P_AproxDistance
  003a5	83 c4 08	 add	 esp, 8
  003a8	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  003ab	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 2464 : 				dofloor->speed = FixedDiv(dofloor->speed,NEWTICRATERATIO*4*FRACUNIT);

  003ae	68 00 00 04 00	 push	 262144			; 00040000H
  003b3	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  003b6	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  003b9	51		 push	 ecx
  003ba	e8 00 00 00 00	 call	 _FixedDiv
  003bf	83 c4 08	 add	 esp, 8
  003c2	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  003c5	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 2465 : 				dofloor->origspeed = dofloor->speed; // it gets slowed down at the top and bottom

  003c8	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  003cb	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  003ce	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  003d1	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 2466 : 				dofloor->floordestheight = line->frontsector->floorheight;

  003d4	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  003d7	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003da	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  003dd	8b 01		 mov	 eax, DWORD PTR [ecx]
  003df	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 2467 : 
; 2468 : 				if (dofloor->floordestheight >= sec->floorheight)

  003e2	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  003e5	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  003e8	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  003eb	3b 11		 cmp	 edx, DWORD PTR [ecx]
  003ed	7c 0c		 jl	 SHORT $LN30@EV_DoFloor

; 2469 : 					dofloor->direction = 1; // up

  003ef	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  003f2	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
  003f9	eb 0a		 jmp	 SHORT $LN31@EV_DoFloor
$LN30@EV_DoFloor:

; 2470 : 				else
; 2471 : 					dofloor->direction = -1; // down

  003fb	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  003fe	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
$LN31@EV_DoFloor:

; 2472 : 
; 2473 : 				// Any delay?
; 2474 : 				dofloor->delay = sides[line->sidenum[0]].textureoffset >> FRACBITS;

  00405	b8 02 00 00 00	 mov	 eax, 2
  0040a	6b c8 00	 imul	 ecx, eax, 0
  0040d	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00410	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00415	6b c8 1c	 imul	 ecx, eax, 28
  00418	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  0041e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00421	c1 f8 10	 sar	 eax, 16			; 00000010H
  00424	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  00427	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 2475 : 				dofloor->delaytimer = sides[line->sidenum[0]].rowoffset >> FRACBITS; // Initial delay

  0042a	b8 02 00 00 00	 mov	 eax, 2
  0042f	6b c8 00	 imul	 ecx, eax, 0
  00432	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00435	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  0043a	6b c8 1c	 imul	 ecx, eax, 28
  0043d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00443	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  00447	c1 f8 10	 sar	 eax, 16			; 00000010H
  0044a	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  0044d	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 2476 : 
; 2477 : 				dofloor->texture = (fixed_t)(line - lines); // hack: store source line number

  00450	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00453	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _lines
  00459	99		 cdq
  0045a	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0045f	f7 f9		 idiv	 ecx
  00461	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  00464	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 2478 : 				break;

  00467	e9 8a 01 00 00	 jmp	 $LN4@EV_DoFloor
$LN32@EV_DoFloor:

; 2479 : 
; 2480 : 			// Linetypes 6/7.
; 2481 : 			// Like 2/3, but no slowdown at the top and bottom of movement,
; 2482 : 			// and the speed is line->dx the first way, line->dy for the
; 2483 : 			// return trip. Good for crushers.
; 2484 : 			case bounceFloorCrush:
; 2485 : 				dofloor->speed = FixedDiv(abs(line->dx),NEWTICRATERATIO*4*FRACUNIT);

  0046c	68 00 00 04 00	 push	 262144			; 00040000H
  00471	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00474	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00477	51		 push	 ecx
  00478	e8 00 00 00 00	 call	 _abs
  0047d	83 c4 04	 add	 esp, 4
  00480	50		 push	 eax
  00481	e8 00 00 00 00	 call	 _FixedDiv
  00486	83 c4 08	 add	 esp, 8
  00489	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  0048c	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 2486 : 				dofloor->origspeed = dofloor->speed;

  0048f	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00492	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  00495	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00498	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 2487 : 				dofloor->floordestheight = line->frontsector->floorheight;

  0049b	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0049e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  004a1	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  004a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  004a6	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 2488 : 
; 2489 : 				if (dofloor->floordestheight >= sec->floorheight)

  004a9	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  004ac	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  004af	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  004b2	3b 11		 cmp	 edx, DWORD PTR [ecx]
  004b4	7c 0c		 jl	 SHORT $LN33@EV_DoFloor

; 2490 : 					dofloor->direction = 1; // up

  004b6	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  004b9	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
  004c0	eb 0a		 jmp	 SHORT $LN34@EV_DoFloor
$LN33@EV_DoFloor:

; 2491 : 				else
; 2492 : 					dofloor->direction = -1; // down

  004c2	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  004c5	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
$LN34@EV_DoFloor:

; 2493 : 
; 2494 : 				// Any delay?
; 2495 : 				dofloor->delay = sides[line->sidenum[0]].textureoffset >> FRACBITS;

  004cc	b8 02 00 00 00	 mov	 eax, 2
  004d1	6b c8 00	 imul	 ecx, eax, 0
  004d4	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  004d7	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  004dc	6b c8 1c	 imul	 ecx, eax, 28
  004df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  004e5	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004e8	c1 f8 10	 sar	 eax, 16			; 00000010H
  004eb	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  004ee	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 2496 : 				dofloor->delaytimer = sides[line->sidenum[0]].rowoffset >> FRACBITS; // Initial delay

  004f1	b8 02 00 00 00	 mov	 eax, 2
  004f6	6b c8 00	 imul	 ecx, eax, 0
  004f9	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  004fc	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00501	6b c8 1c	 imul	 ecx, eax, 28
  00504	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  0050a	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0050e	c1 f8 10	 sar	 eax, 16			; 00000010H
  00511	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  00514	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 2497 : 
; 2498 : 				dofloor->texture = (fixed_t)(line - lines); // hack: store source line number

  00517	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0051a	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _lines
  00520	99		 cdq
  00521	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00526	f7 f9		 idiv	 ecx
  00528	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  0052b	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 2499 : 				break;

  0052e	e9 c3 00 00 00	 jmp	 $LN4@EV_DoFloor
$LN35@EV_DoFloor:

; 2500 : 
; 2501 : 			case crushFloorOnce:
; 2502 : 				dofloor->speed = FixedDiv(abs(line->dx),NEWTICRATERATIO*4*FRACUNIT);

  00533	68 00 00 04 00	 push	 262144			; 00040000H
  00538	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0053b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0053e	51		 push	 ecx
  0053f	e8 00 00 00 00	 call	 _abs
  00544	83 c4 04	 add	 esp, 4
  00547	50		 push	 eax
  00548	e8 00 00 00 00	 call	 _FixedDiv
  0054d	83 c4 08	 add	 esp, 8
  00550	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  00553	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 2503 : 				dofloor->origspeed = dofloor->speed;

  00556	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00559	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  0055c	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0055f	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 2504 : 				dofloor->floordestheight = line->frontsector->ceilingheight;

  00562	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00565	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00568	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  0056b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0056e	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 2505 : 
; 2506 : 				if (dofloor->floordestheight >= sec->floorheight)

  00571	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00574	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  00577	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  0057a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0057c	7c 0c		 jl	 SHORT $LN36@EV_DoFloor

; 2507 : 					dofloor->direction = 1; // up

  0057e	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  00581	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
  00588	eb 0a		 jmp	 SHORT $LN37@EV_DoFloor
$LN36@EV_DoFloor:

; 2508 : 				else
; 2509 : 					dofloor->direction = -1; // down

  0058a	8b 45 ec	 mov	 eax, DWORD PTR _dofloor$[ebp]
  0058d	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
$LN37@EV_DoFloor:

; 2510 : 
; 2511 : 				// Any delay?
; 2512 : 				dofloor->delay = sides[line->sidenum[0]].textureoffset >> FRACBITS;

  00594	b8 02 00 00 00	 mov	 eax, 2
  00599	6b c8 00	 imul	 ecx, eax, 0
  0059c	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  0059f	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  005a4	6b c8 1c	 imul	 ecx, eax, 28
  005a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  005ad	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005b0	c1 f8 10	 sar	 eax, 16			; 00000010H
  005b3	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  005b6	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 2513 : 				dofloor->delaytimer = sides[line->sidenum[0]].rowoffset >> FRACBITS;

  005b9	b8 02 00 00 00	 mov	 eax, 2
  005be	6b c8 00	 imul	 ecx, eax, 0
  005c1	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  005c4	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  005c9	6b c8 1c	 imul	 ecx, eax, 28
  005cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  005d2	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  005d6	c1 f8 10	 sar	 eax, 16			; 00000010H
  005d9	8b 4d ec	 mov	 ecx, DWORD PTR _dofloor$[ebp]
  005dc	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 2514 : 
; 2515 : 				dofloor->texture = (fixed_t)(line - lines); // hack: store source line number

  005df	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  005e2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _lines
  005e8	99		 cdq
  005e9	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  005ee	f7 f9		 idiv	 ecx
  005f0	8b 55 ec	 mov	 edx, DWORD PTR _dofloor$[ebp]
  005f3	89 42 20	 mov	 DWORD PTR [edx+32], eax
$LN38@EV_DoFloor:
$LN4@EV_DoFloor:

; 2516 : 				break;
; 2517 : 
; 2518 : 			default:
; 2519 : 				break;
; 2520 : 		}
; 2521 : 
; 2522 : 		firstone = 0;

  005f6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _firstone$[ebp], 0

; 2523 : 	}

  005fd	e9 2c fa ff ff	 jmp	 $LN6@EV_DoFloor
$LN3@EV_DoFloor:

; 2524 : 
; 2525 : 	return rtn;

  00602	8b 45 fc	 mov	 eax, DWORD PTR _rtn$[ebp]
$LN1@EV_DoFloor:

; 2526 : }

  00605	5f		 pop	 edi
  00606	5e		 pop	 esi
  00607	5b		 pop	 ebx
  00608	8b e5		 mov	 esp, ebp
  0060a	5d		 pop	 ebp
  0060b	c3		 ret	 0
$LN41@EV_DoFloor:
  0060c	00 00 00 00	 DD	 $LN8@EV_DoFloor
  00610	00 00 00 00	 DD	 $LN9@EV_DoFloor
  00614	00 00 00 00	 DD	 $LN10@EV_DoFloor
  00618	00 00 00 00	 DD	 $LN16@EV_DoFloor
  0061c	00 00 00 00	 DD	 $LN11@EV_DoFloor
  00620	00 00 00 00	 DD	 $LN25@EV_DoFloor
  00624	00 00 00 00	 DD	 $LN27@EV_DoFloor
  00628	00 00 00 00	 DD	 $LN29@EV_DoFloor
  0062c	00 00 00 00	 DD	 $LN32@EV_DoFloor
  00630	00 00 00 00	 DD	 $LN35@EV_DoFloor
_EV_DoFloor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_floor.c
;	COMDAT _T_MovePlane
_TEXT	SEGMENT
tv65 = -80						; size = 4
tv66 = -80						; size = 4
tv129 = -80						; size = 4
tv155 = -80						; size = 4
tv159 = -80						; size = 4
_destheight$ = -12					; size = 4
_lastpos$ = -8						; size = 4
_flag$ = -4						; size = 4
_sector$ = 8						; size = 4
_speed$ = 12						; size = 4
_dest$ = 16						; size = 4
_crush$ = 20						; size = 4
_floorOrCeiling$ = 24					; size = 4
_direction$ = 28					; size = 4
_T_MovePlane PROC					; COMDAT

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 39   : 	boolean flag;
; 40   : 	fixed_t lastpos;
; 41   : 	fixed_t destheight; // used to keep floors/ceilings from moving through each other
; 42   : 
; 43   : 	sector->moved = true;

  00009	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0000c	c7 80 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+172], 1

; 44   : 
; 45   : 	switch (floorOrCeiling)

  00016	8b 45 18	 mov	 eax, DWORD PTR _floorOrCeiling$[ebp]
  00019	89 45 b0	 mov	 DWORD PTR tv65[ebp], eax
  0001c	83 7d b0 00	 cmp	 DWORD PTR tv65[ebp], 0
  00020	74 0f		 je	 SHORT $LN8@T_MovePlan
  00022	83 7d b0 01	 cmp	 DWORD PTR tv65[ebp], 1
  00026	0f 84 b8 01 00
	00		 je	 $LN19@T_MovePlan
  0002c	e9 69 03 00 00	 jmp	 $LN2@T_MovePlan
$LN8@T_MovePlan:

; 46   : 	{
; 47   : 		case 0:
; 48   : 			// moving a floor
; 49   : 			switch (direction)

  00031	8b 45 1c	 mov	 eax, DWORD PTR _direction$[ebp]
  00034	89 45 b0	 mov	 DWORD PTR tv66[ebp], eax
  00037	83 7d b0 ff	 cmp	 DWORD PTR tv66[ebp], -1
  0003b	74 0f		 je	 SHORT $LN9@T_MovePlan
  0003d	83 7d b0 01	 cmp	 DWORD PTR tv66[ebp], 1
  00041	0f 84 cc 00 00
	00		 je	 $LN14@T_MovePlan
  00047	e9 93 01 00 00	 jmp	 $LN4@T_MovePlan
$LN9@T_MovePlan:

; 50   : 			{
; 51   : 				case -1:
; 52   : 					// Moving a floor down
; 53   : 					if (sector->floorheight - speed < dest)

  0004c	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	2b 4d 0c	 sub	 ecx, DWORD PTR _speed$[ebp]
  00054	3b 4d 10	 cmp	 ecx, DWORD PTR _dest$[ebp]
  00057	7d 59		 jge	 SHORT $LN10@T_MovePlan

; 54   : 					{
; 55   : 						lastpos = sector->floorheight;

  00059	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	89 4d f8	 mov	 DWORD PTR _lastpos$[ebp], ecx

; 56   : 						sector->floorheight = dest;

  00061	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00064	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 						flag = P_CheckSector(sector,crush);

  00069	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 _P_CheckSector
  00076	83 c4 08	 add	 esp, 8
  00079	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 58   : 						if (flag && sector->numattached)

  0007c	83 7d fc 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00080	74 24		 je	 SHORT $LN12@T_MovePlan
  00082	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00085	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  0008c	74 18		 je	 SHORT $LN12@T_MovePlan

; 59   : 						{
; 60   : 							sector->floorheight =lastpos;

  0008e	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _lastpos$[ebp]
  00094	89 08		 mov	 DWORD PTR [eax], ecx

; 61   : 							P_CheckSector(sector,crush);

  00096	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 _P_CheckSector
  000a3	83 c4 08	 add	 esp, 8
$LN12@T_MovePlan:

; 62   : 						}
; 63   : 						return pastdest;

  000a6	b8 02 00 00 00	 mov	 eax, 2
  000ab	e9 ec 02 00 00	 jmp	 $LN1@T_MovePlan

; 64   : 					}

  000b0	eb 5c		 jmp	 SHORT $LN13@T_MovePlan
$LN10@T_MovePlan:

; 65   : 					else
; 66   : 					{
; 67   : 						lastpos = sector->floorheight;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	89 4d f8	 mov	 DWORD PTR _lastpos$[ebp], ecx

; 68   : 						sector->floorheight -= speed;

  000ba	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	2b 4d 0c	 sub	 ecx, DWORD PTR _speed$[ebp]
  000c2	8b 55 08	 mov	 edx, DWORD PTR _sector$[ebp]
  000c5	89 0a		 mov	 DWORD PTR [edx], ecx

; 69   : 						flag = P_CheckSector(sector,crush);

  000c7	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 _P_CheckSector
  000d4	83 c4 08	 add	 esp, 8
  000d7	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 70   : 						if (flag && sector->numattached)

  000da	83 7d fc 00	 cmp	 DWORD PTR _flag$[ebp], 0
  000de	74 2e		 je	 SHORT $LN13@T_MovePlan
  000e0	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  000e3	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  000ea	74 22		 je	 SHORT $LN13@T_MovePlan

; 71   : 						{
; 72   : 							sector->floorheight = lastpos;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  000ef	8b 4d f8	 mov	 ecx, DWORD PTR _lastpos$[ebp]
  000f2	89 08		 mov	 DWORD PTR [eax], ecx

; 73   : 							P_CheckSector(sector, crush);

  000f4	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  000f7	50		 push	 eax
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 _P_CheckSector
  00101	83 c4 08	 add	 esp, 8

; 74   : 							return crushed;

  00104	b8 01 00 00 00	 mov	 eax, 1
  00109	e9 8e 02 00 00	 jmp	 $LN1@T_MovePlan
$LN13@T_MovePlan:

; 75   : 						}
; 76   : 					}
; 77   : 					break;

  0010e	e9 cc 00 00 00	 jmp	 $LN4@T_MovePlan
$LN14@T_MovePlan:

; 78   : 
; 79   : 				case 1:
; 80   : 					// Moving a floor up
; 81   : 					// keep floor from moving through ceilings
; 82   : 					destheight = (dest < sector->ceilingheight) ? dest : sector->ceilingheight;

  00113	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00116	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00119	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0011c	7d 08		 jge	 SHORT $LN31@T_MovePlan
  0011e	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00121	89 55 b0	 mov	 DWORD PTR tv129[ebp], edx
  00124	eb 09		 jmp	 SHORT $LN32@T_MovePlan
$LN31@T_MovePlan:
  00126	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00129	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012c	89 4d b0	 mov	 DWORD PTR tv129[ebp], ecx
$LN32@T_MovePlan:
  0012f	8b 55 b0	 mov	 edx, DWORD PTR tv129[ebp]
  00132	89 55 f4	 mov	 DWORD PTR _destheight$[ebp], edx

; 83   : 					if (sector->floorheight + speed > destheight)

  00135	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00138	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013a	03 4d 0c	 add	 ecx, DWORD PTR _speed$[ebp]
  0013d	3b 4d f4	 cmp	 ecx, DWORD PTR _destheight$[ebp]
  00140	7e 4d		 jle	 SHORT $LN15@T_MovePlan

; 84   : 					{
; 85   : 						lastpos = sector->floorheight;

  00142	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00145	8b 08		 mov	 ecx, DWORD PTR [eax]
  00147	89 4d f8	 mov	 DWORD PTR _lastpos$[ebp], ecx

; 86   : 						sector->floorheight = destheight;

  0014a	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0014d	8b 4d f4	 mov	 ecx, DWORD PTR _destheight$[ebp]
  00150	89 08		 mov	 DWORD PTR [eax], ecx

; 87   : 						flag = P_CheckSector(sector,crush);

  00152	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00155	50		 push	 eax
  00156	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  00159	51		 push	 ecx
  0015a	e8 00 00 00 00	 call	 _P_CheckSector
  0015f	83 c4 08	 add	 esp, 8
  00162	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 88   : 						if (flag)

  00165	83 7d fc 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00169	74 18		 je	 SHORT $LN17@T_MovePlan

; 89   : 						{
; 90   : 							sector->floorheight = lastpos;

  0016b	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0016e	8b 4d f8	 mov	 ecx, DWORD PTR _lastpos$[ebp]
  00171	89 08		 mov	 DWORD PTR [eax], ecx

; 91   : 							P_CheckSector(sector, crush);

  00173	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00176	50		 push	 eax
  00177	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  0017a	51		 push	 ecx
  0017b	e8 00 00 00 00	 call	 _P_CheckSector
  00180	83 c4 08	 add	 esp, 8
$LN17@T_MovePlan:

; 92   : 						}
; 93   : 						return pastdest;

  00183	b8 02 00 00 00	 mov	 eax, 2
  00188	e9 0f 02 00 00	 jmp	 $LN1@T_MovePlan

; 94   : 					}

  0018d	eb 50		 jmp	 SHORT $LN18@T_MovePlan
$LN15@T_MovePlan:

; 95   : 					else
; 96   : 					{
; 97   : 						// crushing is possible
; 98   : 						lastpos = sector->floorheight;

  0018f	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00192	8b 08		 mov	 ecx, DWORD PTR [eax]
  00194	89 4d f8	 mov	 DWORD PTR _lastpos$[ebp], ecx

; 99   : 						sector->floorheight += speed;

  00197	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0019a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019c	03 4d 0c	 add	 ecx, DWORD PTR _speed$[ebp]
  0019f	8b 55 08	 mov	 edx, DWORD PTR _sector$[ebp]
  001a2	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 						flag = P_CheckSector(sector, crush);

  001a4	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  001a7	50		 push	 eax
  001a8	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 _P_CheckSector
  001b1	83 c4 08	 add	 esp, 8
  001b4	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 101  : 						if (flag)

  001b7	83 7d fc 00	 cmp	 DWORD PTR _flag$[ebp], 0
  001bb	74 22		 je	 SHORT $LN18@T_MovePlan

; 102  : 						{
; 103  : 							sector->floorheight = lastpos;

  001bd	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  001c0	8b 4d f8	 mov	 ecx, DWORD PTR _lastpos$[ebp]
  001c3	89 08		 mov	 DWORD PTR [eax], ecx

; 104  : 							P_CheckSector(sector, crush);

  001c5	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  001c8	50		 push	 eax
  001c9	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  001cc	51		 push	 ecx
  001cd	e8 00 00 00 00	 call	 _P_CheckSector
  001d2	83 c4 08	 add	 esp, 8

; 105  : 							return crushed;

  001d5	b8 01 00 00 00	 mov	 eax, 1
  001da	e9 bd 01 00 00	 jmp	 $LN1@T_MovePlan
$LN18@T_MovePlan:
$LN4@T_MovePlan:

; 106  : 						}
; 107  : 					}
; 108  : 					break;
; 109  : 			}
; 110  : 			break;

  001df	e9 b6 01 00 00	 jmp	 $LN2@T_MovePlan
$LN19@T_MovePlan:

; 111  : 
; 112  : 		case 1:
; 113  : 			// moving a ceiling
; 114  : 			switch (direction)

  001e4	8b 45 1c	 mov	 eax, DWORD PTR _direction$[ebp]
  001e7	89 45 b0	 mov	 DWORD PTR tv155[ebp], eax
  001ea	83 7d b0 ff	 cmp	 DWORD PTR tv155[ebp], -1
  001ee	74 0f		 je	 SHORT $LN20@T_MovePlan
  001f0	83 7d b0 01	 cmp	 DWORD PTR tv155[ebp], 1
  001f4	0f 84 dc 00 00
	00		 je	 $LN25@T_MovePlan
  001fa	e9 9b 01 00 00	 jmp	 $LN6@T_MovePlan
$LN20@T_MovePlan:

; 115  : 			{
; 116  : 				case -1:
; 117  : 					// moving a ceiling down
; 118  : 					// keep ceiling from moving through floors
; 119  : 					destheight = (dest > sector->floorheight) ? dest : sector->floorheight;

  001ff	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00202	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00205	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00207	7e 08		 jle	 SHORT $LN33@T_MovePlan
  00209	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0020c	89 55 b0	 mov	 DWORD PTR tv159[ebp], edx
  0020f	eb 08		 jmp	 SHORT $LN34@T_MovePlan
$LN33@T_MovePlan:
  00211	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00214	8b 08		 mov	 ecx, DWORD PTR [eax]
  00216	89 4d b0	 mov	 DWORD PTR tv159[ebp], ecx
$LN34@T_MovePlan:
  00219	8b 55 b0	 mov	 edx, DWORD PTR tv159[ebp]
  0021c	89 55 f4	 mov	 DWORD PTR _destheight$[ebp], edx

; 120  : 					if (sector->ceilingheight - speed < destheight)

  0021f	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00222	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00225	2b 4d 0c	 sub	 ecx, DWORD PTR _speed$[ebp]
  00228	3b 4d f4	 cmp	 ecx, DWORD PTR _destheight$[ebp]
  0022b	7d 50		 jge	 SHORT $LN21@T_MovePlan

; 121  : 					{
; 122  : 						lastpos = sector->ceilingheight;

  0022d	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00230	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00233	89 4d f8	 mov	 DWORD PTR _lastpos$[ebp], ecx

; 123  : 						sector->ceilingheight = destheight;

  00236	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00239	8b 4d f4	 mov	 ecx, DWORD PTR _destheight$[ebp]
  0023c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 124  : 						flag = P_CheckSector(sector,crush);

  0023f	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00242	50		 push	 eax
  00243	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  00246	51		 push	 ecx
  00247	e8 00 00 00 00	 call	 _P_CheckSector
  0024c	83 c4 08	 add	 esp, 8
  0024f	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 125  : 
; 126  : 						if (flag)

  00252	83 7d fc 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00256	74 19		 je	 SHORT $LN23@T_MovePlan

; 127  : 						{
; 128  : 							sector->ceilingheight = lastpos;

  00258	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0025b	8b 4d f8	 mov	 ecx, DWORD PTR _lastpos$[ebp]
  0025e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 129  : 							P_CheckSector(sector, crush);

  00261	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00264	50		 push	 eax
  00265	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  00268	51		 push	 ecx
  00269	e8 00 00 00 00	 call	 _P_CheckSector
  0026e	83 c4 08	 add	 esp, 8
$LN23@T_MovePlan:

; 130  : 						}
; 131  : 						return pastdest;

  00271	b8 02 00 00 00	 mov	 eax, 2
  00276	e9 21 01 00 00	 jmp	 $LN1@T_MovePlan

; 132  : 					}

  0027b	eb 54		 jmp	 SHORT $LN24@T_MovePlan
$LN21@T_MovePlan:

; 133  : 					else
; 134  : 					{
; 135  : 						// crushing is possible
; 136  : 						lastpos = sector->ceilingheight;

  0027d	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00280	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00283	89 4d f8	 mov	 DWORD PTR _lastpos$[ebp], ecx

; 137  : 						sector->ceilingheight -= speed;

  00286	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00289	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0028c	2b 4d 0c	 sub	 ecx, DWORD PTR _speed$[ebp]
  0028f	8b 55 08	 mov	 edx, DWORD PTR _sector$[ebp]
  00292	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 138  : 						flag = P_CheckSector(sector, crush);

  00295	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00298	50		 push	 eax
  00299	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  0029c	51		 push	 ecx
  0029d	e8 00 00 00 00	 call	 _P_CheckSector
  002a2	83 c4 08	 add	 esp, 8
  002a5	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 139  : 
; 140  : 						if (flag)

  002a8	83 7d fc 00	 cmp	 DWORD PTR _flag$[ebp], 0
  002ac	74 23		 je	 SHORT $LN24@T_MovePlan

; 141  : 						{
; 142  : 							sector->ceilingheight = lastpos;

  002ae	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  002b1	8b 4d f8	 mov	 ecx, DWORD PTR _lastpos$[ebp]
  002b4	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 143  : 							P_CheckSector(sector, crush);

  002b7	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  002ba	50		 push	 eax
  002bb	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  002be	51		 push	 ecx
  002bf	e8 00 00 00 00	 call	 _P_CheckSector
  002c4	83 c4 08	 add	 esp, 8

; 144  : 							return crushed;

  002c7	b8 01 00 00 00	 mov	 eax, 1
  002cc	e9 cb 00 00 00	 jmp	 $LN1@T_MovePlan
$LN24@T_MovePlan:

; 145  : 						}
; 146  : 					}
; 147  : 					break;

  002d1	e9 c4 00 00 00	 jmp	 $LN6@T_MovePlan
$LN25@T_MovePlan:

; 148  : 
; 149  : 				case 1:
; 150  : 					// moving a ceiling up
; 151  : 					if (sector->ceilingheight + speed > dest)

  002d6	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  002d9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002dc	03 4d 0c	 add	 ecx, DWORD PTR _speed$[ebp]
  002df	3b 4d 10	 cmp	 ecx, DWORD PTR _dest$[ebp]
  002e2	7e 59		 jle	 SHORT $LN26@T_MovePlan

; 152  : 					{
; 153  : 						lastpos = sector->ceilingheight;

  002e4	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  002e7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002ea	89 4d f8	 mov	 DWORD PTR _lastpos$[ebp], ecx

; 154  : 						sector->ceilingheight = dest;

  002ed	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  002f0	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  002f3	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 155  : 						flag = P_CheckSector(sector, crush);

  002f6	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  002f9	50		 push	 eax
  002fa	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  002fd	51		 push	 ecx
  002fe	e8 00 00 00 00	 call	 _P_CheckSector
  00303	83 c4 08	 add	 esp, 8
  00306	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 156  : 						if (flag && sector->numattached)

  00309	83 7d fc 00	 cmp	 DWORD PTR _flag$[ebp], 0
  0030d	74 25		 je	 SHORT $LN28@T_MovePlan
  0030f	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00312	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00319	74 19		 je	 SHORT $LN28@T_MovePlan

; 157  : 						{
; 158  : 							sector->ceilingheight = lastpos;

  0031b	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0031e	8b 4d f8	 mov	 ecx, DWORD PTR _lastpos$[ebp]
  00321	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 159  : 							P_CheckSector(sector, crush);

  00324	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00327	50		 push	 eax
  00328	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  0032b	51		 push	 ecx
  0032c	e8 00 00 00 00	 call	 _P_CheckSector
  00331	83 c4 08	 add	 esp, 8
$LN28@T_MovePlan:

; 160  : 						}
; 161  : 						return pastdest;

  00334	b8 02 00 00 00	 mov	 eax, 2
  00339	eb 61		 jmp	 SHORT $LN1@T_MovePlan

; 162  : 					}

  0033b	eb 5d		 jmp	 SHORT $LN29@T_MovePlan
$LN26@T_MovePlan:

; 163  : 					else
; 164  : 					{
; 165  : 						lastpos = sector->ceilingheight;

  0033d	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00340	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00343	89 4d f8	 mov	 DWORD PTR _lastpos$[ebp], ecx

; 166  : 						sector->ceilingheight += speed;

  00346	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00349	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0034c	03 4d 0c	 add	 ecx, DWORD PTR _speed$[ebp]
  0034f	8b 55 08	 mov	 edx, DWORD PTR _sector$[ebp]
  00352	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 167  : 						flag = P_CheckSector(sector, crush);

  00355	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00358	50		 push	 eax
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  0035c	51		 push	 ecx
  0035d	e8 00 00 00 00	 call	 _P_CheckSector
  00362	83 c4 08	 add	 esp, 8
  00365	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 168  : 						if (flag && sector->numattached)

  00368	83 7d fc 00	 cmp	 DWORD PTR _flag$[ebp], 0
  0036c	74 2c		 je	 SHORT $LN29@T_MovePlan
  0036e	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00371	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00378	74 20		 je	 SHORT $LN29@T_MovePlan

; 169  : 						{
; 170  : 							sector->ceilingheight = lastpos;

  0037a	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0037d	8b 4d f8	 mov	 ecx, DWORD PTR _lastpos$[ebp]
  00380	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 171  : 							P_CheckSector(sector, crush);

  00383	8b 45 14	 mov	 eax, DWORD PTR _crush$[ebp]
  00386	50		 push	 eax
  00387	8b 4d 08	 mov	 ecx, DWORD PTR _sector$[ebp]
  0038a	51		 push	 ecx
  0038b	e8 00 00 00 00	 call	 _P_CheckSector
  00390	83 c4 08	 add	 esp, 8

; 172  : 							return crushed;

  00393	b8 01 00 00 00	 mov	 eax, 1
  00398	eb 02		 jmp	 SHORT $LN1@T_MovePlan
$LN29@T_MovePlan:
$LN6@T_MovePlan:
$LN2@T_MovePlan:

; 173  : 						}
; 174  : 					}
; 175  : 					break;
; 176  : 			}
; 177  : 			break;
; 178  : 	}
; 179  : 	return ok;

  0039a	33 c0		 xor	 eax, eax
$LN1@T_MovePlan:

; 180  : }

  0039c	5f		 pop	 edi
  0039d	5e		 pop	 esi
  0039e	5b		 pop	 ebx
  0039f	8b e5		 mov	 esp, ebp
  003a1	5d		 pop	 ebp
  003a2	c3		 ret	 0
_T_MovePlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_FixedInt PROC						; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 222  : 	return FixedMul(a, 1);

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _FixedMul
  00014	83 c4 08	 add	 esp, 8

; 223  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_FixedInt ENDP
_TEXT	ENDS
END
