; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\f_wipe.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_WipeInAction
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
_BSS	SEGMENT
_WipeInAction DD 01H DUP (?)
_BSS	ENDS
PUBLIC	_F_WipeStartScreen
PUBLIC	_F_WipeEndScreen
PUBLIC	_F_ScreenWipe
PUBLIC	_F_RunWipe
EXTRN	_I_UpdateNoBlit:PROC
EXTRN	_I_FinishUpdate:PROC
EXTRN	_I_ReadScreen:PROC
EXTRN	_V_DrawBlock:PROC
EXTRN	_I_GetTime:PROC
EXTRN	_I_Sleep:PROC
EXTRN	_I_OsPolling:PROC
EXTRN	_M_Drawer:PROC
EXTRN	_HWR_StartScreenWipe:PROC
EXTRN	_HWR_EndScreenWipe:PROC
EXTRN	_HWR_DoScreenWipe:PROC
EXTRN	_rendermode:DWORD
EXTRN	_M_Memcpy:DWORD
EXTRN	_vid:BYTE
EXTRN	_scr_bpp:DWORD
EXTRN	_screens:BYTE
EXTRN	_transtables:DWORD
_BSS	SEGMENT
_wipe_scr_start DD 01H DUP (?)
_wipe_scr_end DD 01H DUP (?)
_wipe_scr DD	01H DUP (?)
?slowdown@?1??F_DoWipe@@9@9 DD 01H DUP (?)		; `F_DoWipe'::`2'::slowdown
_BSS	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_wipe.c
;	COMDAT _F_DoWipe
_TEXT	SEGMENT
tv66 = -84						; size = 4
tv70 = -84						; size = 4
tv142 = -84						; size = 4
_newval$ = -13						; size = 1
_e$ = -12						; size = 4
_w$ = -8						; size = 4
_changed$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_ticks$ = 16						; size = 4
_F_DoWipe PROC						; COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 77   : 	boolean changed = false;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _changed$[ebp], 0
$LN13@F_DoWipe:

; 78   : 	UINT8 *w;
; 79   : 	UINT8 *e;
; 80   : 	UINT8 newval;
; 81   : 	static INT32 slowdown = 0;
; 82   : 
; 83   : 	while (ticks--)

  00010	8b 45 10	 mov	 eax, DWORD PTR _ticks$[ebp]
  00013	89 45 ac	 mov	 DWORD PTR tv66[ebp], eax
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _ticks$[ebp]
  00019	83 e9 01	 sub	 ecx, 1
  0001c	89 4d 10	 mov	 DWORD PTR _ticks$[ebp], ecx
  0001f	83 7d ac 00	 cmp	 DWORD PTR tv66[ebp], 0
  00023	0f 84 3a 01 00
	00		 je	 $LN3@F_DoWipe

; 84   : 	{
; 85   : #if defined (SHUFFLE) && defined (HWRENDER)
; 86   : 		if(rendermode != render_soft)

  00029	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00030	74 0f		 je	 SHORT $LN6@F_DoWipe

; 87   : 		{
; 88   : 
; 89   : 			HWR_DoScreenWipe();

  00032	e8 00 00 00 00	 call	 _HWR_DoScreenWipe
  00037	90		 npad	 1

; 90   : 			changed = true;

  00038	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _changed$[ebp], 1

; 91   : 			continue;

  0003f	eb cf		 jmp	 SHORT $LN13@F_DoWipe
$LN6@F_DoWipe:

; 92   : 		}
; 93   : #endif
; 94   : 
; 95   : 		// slowdown
; 96   : 		if (slowdown++)

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?slowdown@?1??F_DoWipe@@9@9
  00046	89 45 ac	 mov	 DWORD PTR tv70[ebp], eax
  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?slowdown@?1??F_DoWipe@@9@9
  0004f	83 c1 01	 add	 ecx, 1
  00052	89 0d 00 00 00
	00		 mov	 DWORD PTR ?slowdown@?1??F_DoWipe@@9@9, ecx
  00058	83 7d ac 00	 cmp	 DWORD PTR tv70[ebp], 0
  0005c	74 11		 je	 SHORT $LN7@F_DoWipe

; 97   : 		{
; 98   : 			slowdown = 0;

  0005e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?slowdown@?1??F_DoWipe@@9@9, 0

; 99   : 			return false;

  00068	33 c0		 xor	 eax, eax
  0006a	e9 0d 01 00 00	 jmp	 $LN1@F_DoWipe
$LN7@F_DoWipe:

; 100  : 		}
; 101  : 
; 102  : 		w = wipe_scr;

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR _wipe_scr
  00074	89 45 f8	 mov	 DWORD PTR _w$[ebp], eax

; 103  : 		e = wipe_scr_end;

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR _wipe_scr_end
  0007c	89 45 f4	 mov	 DWORD PTR _e$[ebp], eax
$LN4@F_DoWipe:

; 104  : 
; 105  : 		while (w != wipe_scr + width*height)

  0007f	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00082	0f af 45 0c	 imul	 eax, DWORD PTR _height$[ebp]
  00086	03 05 00 00 00
	00		 add	 eax, DWORD PTR _wipe_scr
  0008c	39 45 f8	 cmp	 DWORD PTR _w$[ebp], eax
  0008f	0f 84 c9 00 00
	00		 je	 $LN5@F_DoWipe

; 106  : 		{
; 107  : 			if (*w != *e)

  00095	8b 45 f8	 mov	 eax, DWORD PTR _w$[ebp]
  00098	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0009b	8b 55 f4	 mov	 edx, DWORD PTR _e$[ebp]
  0009e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000a1	3b c8		 cmp	 ecx, eax
  000a3	0f 84 9e 00 00
	00		 je	 $LN8@F_DoWipe

; 108  : 			{
; 109  : 				if (((newval = transtables[(*e<<8) + *w + ((tr_trans80-1)<<FF_TRANSSHIFT)]) == *w)
; 110  : 					&& ((newval = transtables[(*e<<8) + *w + ((tr_trans50-1)<<FF_TRANSSHIFT)]) == *w)
; 111  : 					&& ((newval = transtables[(*w<<8) + *e + ((tr_trans80-1)<<FF_TRANSSHIFT)]) == *w))

  000a9	8b 45 f4	 mov	 eax, DWORD PTR _e$[ebp]
  000ac	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000af	c1 e1 08	 shl	 ecx, 8
  000b2	8b 55 f8	 mov	 edx, DWORD PTR _w$[ebp]
  000b5	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000b8	03 05 00 00 00
	00		 add	 eax, DWORD PTR _transtables
  000be	8a 8c 08 00 00
	07 00		 mov	 cl, BYTE PTR [eax+ecx+458752]
  000c5	88 4d f3	 mov	 BYTE PTR _newval$[ebp], cl
  000c8	0f b6 55 f3	 movzx	 edx, BYTE PTR _newval$[ebp]
  000cc	8b 45 f8	 mov	 eax, DWORD PTR _w$[ebp]
  000cf	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000d2	3b d1		 cmp	 edx, ecx
  000d4	75 62		 jne	 SHORT $LN9@F_DoWipe
  000d6	8b 45 f4	 mov	 eax, DWORD PTR _e$[ebp]
  000d9	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000dc	c1 e1 08	 shl	 ecx, 8
  000df	8b 55 f8	 mov	 edx, DWORD PTR _w$[ebp]
  000e2	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000e5	03 05 00 00 00
	00		 add	 eax, DWORD PTR _transtables
  000eb	8a 8c 08 00 00
	04 00		 mov	 cl, BYTE PTR [eax+ecx+262144]
  000f2	88 4d f3	 mov	 BYTE PTR _newval$[ebp], cl
  000f5	0f b6 55 f3	 movzx	 edx, BYTE PTR _newval$[ebp]
  000f9	8b 45 f8	 mov	 eax, DWORD PTR _w$[ebp]
  000fc	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ff	3b d1		 cmp	 edx, ecx
  00101	75 35		 jne	 SHORT $LN9@F_DoWipe
  00103	8b 45 f8	 mov	 eax, DWORD PTR _w$[ebp]
  00106	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00109	c1 e1 08	 shl	 ecx, 8
  0010c	8b 55 f4	 mov	 edx, DWORD PTR _e$[ebp]
  0010f	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00112	03 05 00 00 00
	00		 add	 eax, DWORD PTR _transtables
  00118	8a 8c 08 00 00
	07 00		 mov	 cl, BYTE PTR [eax+ecx+458752]
  0011f	88 4d f3	 mov	 BYTE PTR _newval$[ebp], cl
  00122	0f b6 55 f3	 movzx	 edx, BYTE PTR _newval$[ebp]
  00126	8b 45 f8	 mov	 eax, DWORD PTR _w$[ebp]
  00129	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0012c	3b d1		 cmp	 edx, ecx
  0012e	75 08		 jne	 SHORT $LN9@F_DoWipe

; 112  : 				{
; 113  : 					newval = *e;

  00130	8b 45 f4	 mov	 eax, DWORD PTR _e$[ebp]
  00133	8a 08		 mov	 cl, BYTE PTR [eax]
  00135	88 4d f3	 mov	 BYTE PTR _newval$[ebp], cl
$LN9@F_DoWipe:

; 114  : 				}
; 115  : 				*w = newval;

  00138	8b 45 f8	 mov	 eax, DWORD PTR _w$[ebp]
  0013b	8a 4d f3	 mov	 cl, BYTE PTR _newval$[ebp]
  0013e	88 08		 mov	 BYTE PTR [eax], cl

; 116  : 				changed = true;

  00140	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _changed$[ebp], 1
$LN8@F_DoWipe:

; 117  : 			}
; 118  : 			w++;

  00147	8b 45 f8	 mov	 eax, DWORD PTR _w$[ebp]
  0014a	83 c0 01	 add	 eax, 1
  0014d	89 45 f8	 mov	 DWORD PTR _w$[ebp], eax

; 119  : 			e++;

  00150	8b 45 f4	 mov	 eax, DWORD PTR _e$[ebp]
  00153	83 c0 01	 add	 eax, 1
  00156	89 45 f4	 mov	 DWORD PTR _e$[ebp], eax

; 120  : 		}

  00159	e9 21 ff ff ff	 jmp	 $LN4@F_DoWipe
$LN5@F_DoWipe:

; 121  : 	}

  0015e	e9 ad fe ff ff	 jmp	 $LN13@F_DoWipe
$LN3@F_DoWipe:

; 122  : 	return !changed;

  00163	83 7d fc 00	 cmp	 DWORD PTR _changed$[ebp], 0
  00167	75 09		 jne	 SHORT $LN11@F_DoWipe
  00169	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv142[ebp], 1
  00170	eb 07		 jmp	 SHORT $LN12@F_DoWipe
$LN11@F_DoWipe:
  00172	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN12@F_DoWipe:
  00179	8b 45 ac	 mov	 eax, DWORD PTR tv142[ebp]
$LN1@F_DoWipe:

; 123  : }

  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
_F_DoWipe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_wipe.c
;	COMDAT _F_InitWipe
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_ticks$ = 16						; size = 4
_F_InitWipe PROC					; COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 58   : 	if(rendermode != render_soft)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00010	74 04		 je	 SHORT $LN2@F_InitWipe

; 59   : 		return 0;

  00012	33 c0		 xor	 eax, eax
  00014	eb 28		 jmp	 SHORT $LN1@F_InitWipe
$LN2@F_InitWipe:

; 60   : 	(void)ticks;
; 61   : 	M_Memcpy(wipe_scr, wipe_scr_start, width*height*scr_bpp);

  00016	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00019	0f af 45 0c	 imul	 eax, DWORD PTR _height$[ebp]
  0001d	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _scr_bpp
  00024	50		 push	 eax
  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _wipe_scr_start
  0002b	51		 push	 ecx
  0002c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _wipe_scr
  00032	52		 push	 edx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 62   : 	return 0;

  0003c	33 c0		 xor	 eax, eax
$LN1@F_InitWipe:

; 63   : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_F_InitWipe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_wipe.c
;	COMDAT _F_RunWipe
_TEXT	SEGMENT
_done$ = -20						; size = 4
_y$ = -16						; size = 4
_nowtime$ = -12						; size = 4
_tics$ = -8						; size = 4
_wipestart$ = -4					; size = 4
_duration$ = 8						; size = 4
_drawMenu$ = 12						; size = 4
_F_RunWipe PROC						; COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 219  : 	tic_t wipestart, tics, nowtime, y;
; 220  : 	boolean done;
; 221  : 
; 222  : 	wipestart = I_GetTime() - 1;

  00009	e8 00 00 00 00	 call	 _I_GetTime
  0000e	83 e8 01	 sub	 eax, 1
  00011	89 45 fc	 mov	 DWORD PTR _wipestart$[ebp], eax

; 223  : 	y = wipestart + duration; // init a timeout

  00014	8b 45 fc	 mov	 eax, DWORD PTR _wipestart$[ebp]
  00017	03 45 08	 add	 eax, DWORD PTR _duration$[ebp]
  0001a	89 45 f0	 mov	 DWORD PTR _y$[ebp], eax
$LN4@F_RunWipe:

; 224  : 	do
; 225  : 	{
; 226  : 		do
; 227  : 		{
; 228  : 			nowtime = I_GetTime();

  0001d	e8 00 00 00 00	 call	 _I_GetTime
  00022	89 45 f4	 mov	 DWORD PTR _nowtime$[ebp], eax

; 229  : 			tics = nowtime - wipestart;

  00025	8b 45 f4	 mov	 eax, DWORD PTR _nowtime$[ebp]
  00028	2b 45 fc	 sub	 eax, DWORD PTR _wipestart$[ebp]
  0002b	89 45 f8	 mov	 DWORD PTR _tics$[ebp], eax

; 230  : 			if (!tics) I_Sleep();

  0002e	75 06		 jne	 SHORT $LN8@F_RunWipe
  00030	e8 00 00 00 00	 call	 _I_Sleep
  00035	90		 npad	 1
$LN8@F_RunWipe:

; 231  : 		} while (!tics);

  00036	83 7d f8 00	 cmp	 DWORD PTR _tics$[ebp], 0
  0003a	74 e1		 je	 SHORT $LN4@F_RunWipe

; 232  : 		wipestart = nowtime;

  0003c	8b 45 f4	 mov	 eax, DWORD PTR _nowtime$[ebp]
  0003f	89 45 fc	 mov	 DWORD PTR _wipestart$[ebp], eax

; 233  : 
; 234  : #ifdef SHUFFLE
; 235  : 		done = F_ScreenWipe(0, 0, vid.width, vid.height, tics);

  00042	8b 45 f8	 mov	 eax, DWORD PTR _tics$[ebp]
  00045	50		 push	 eax
  00046	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _vid+16
  0004c	51		 push	 ecx
  0004d	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _vid+12
  00053	52		 push	 edx
  00054	6a 00		 push	 0
  00056	6a 00		 push	 0
  00058	e8 00 00 00 00	 call	 _F_ScreenWipe
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
  00060	89 45 ec	 mov	 DWORD PTR _done$[ebp], eax

; 236  : #else
; 237  : 		if (rendermode == render_soft)
; 238  : 			done = F_ScreenWipe(0, 0, vid.width, vid.height, tics);
; 239  : 		else
; 240  : 			done = true;
; 241  : #endif
; 242  : 		I_OsPolling();

  00063	e8 00 00 00 00	 call	 _I_OsPolling
  00068	90		 npad	 1

; 243  : 		I_UpdateNoBlit();

  00069	e8 00 00 00 00	 call	 _I_UpdateNoBlit
  0006e	90		 npad	 1

; 244  : 
; 245  : 		if (drawMenu)

  0006f	83 7d 0c 00	 cmp	 DWORD PTR _drawMenu$[ebp], 0
  00073	74 06		 je	 SHORT $LN9@F_RunWipe

; 246  : 			M_Drawer(); // menu is drawn even on top of wipes

  00075	e8 00 00 00 00	 call	 _M_Drawer
  0007a	90		 npad	 1
$LN9@F_RunWipe:

; 247  : 
; 248  : 		if (rendermode == render_soft)

  0007b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00082	75 06		 jne	 SHORT $LN10@F_RunWipe

; 249  : 			I_FinishUpdate(); // page flip or blit buffer

  00084	e8 00 00 00 00	 call	 _I_FinishUpdate
  00089	90		 npad	 1
$LN10@F_RunWipe:

; 250  : 	} while (!done && I_GetTime() < y);

  0008a	83 7d ec 00	 cmp	 DWORD PTR _done$[ebp], 0
  0008e	75 0a		 jne	 SHORT $LN11@F_RunWipe
  00090	e8 00 00 00 00	 call	 _I_GetTime
  00095	3b 45 f0	 cmp	 eax, DWORD PTR _y$[ebp]
  00098	72 83		 jb	 SHORT $LN4@F_RunWipe
$LN11@F_RunWipe:

; 251  : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_F_RunWipe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_wipe.c
;	COMDAT _F_ScreenWipe
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_ticks$ = 24						; size = 4
_F_ScreenWipe PROC					; COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 187  : 	INT32 rc = 1;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 1

; 188  : 	// initial stuff
; 189  : 	(void)x;
; 190  : 	(void)y;
; 191  : #ifdef NOWIPE
; 192  : 	width = height = ticks = 0;
; 193  : #else
; 194  : 	if (!WipeInAction)

  00010	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _WipeInAction, 0
  00017	75 32		 jne	 SHORT $LN2@F_ScreenWi

; 195  : 	{
; 196  : 		WipeInAction = true;

  00019	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _WipeInAction, 1

; 197  : 		wipe_scr = screens[0];

  00023	b8 04 00 00 00	 mov	 eax, 4
  00028	6b c8 00	 imul	 ecx, eax, 0
  0002b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _screens[ecx]
  00031	89 15 00 00 00
	00		 mov	 DWORD PTR _wipe_scr, edx

; 198  : 		F_InitWipe(width, height, ticks);

  00037	8b 45 18	 mov	 eax, DWORD PTR _ticks$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 14	 mov	 ecx, DWORD PTR _height$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _F_InitWipe
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@F_ScreenWi:

; 199  : 	}
; 200  : 
; 201  : 	rc = F_DoWipe(width, height, ticks);

  0004b	8b 45 18	 mov	 eax, DWORD PTR _ticks$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d 14	 mov	 ecx, DWORD PTR _height$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 _F_DoWipe
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	89 45 fc	 mov	 DWORD PTR _rc$[ebp], eax

; 202  : 
; 203  : 	if (rc)

  00062	83 7d fc 00	 cmp	 DWORD PTR _rc$[ebp], 0
  00066	74 0a		 je	 SHORT $LN3@F_ScreenWi

; 204  : 		WipeInAction = false; //Alam: All done?

  00068	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _WipeInAction, 0
$LN3@F_ScreenWi:

; 205  : #endif
; 206  : 	return rc;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]

; 207  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_F_ScreenWipe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_wipe.c
;	COMDAT _F_WipeEndScreen
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_F_WipeEndScreen PROC					; COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 153  : 	if(rendermode != render_soft)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00010	74 08		 je	 SHORT $LN2@F_WipeEndS

; 154  : 	{
; 155  : #if defined (SHUFFLE) && defined (HWRENDER)
; 156  : 		HWR_EndScreenWipe();

  00012	e8 00 00 00 00	 call	 _HWR_EndScreenWipe
  00017	90		 npad	 1

; 157  : #endif
; 158  : 		return;

  00018	eb 42		 jmp	 SHORT $LN1@F_WipeEndS
$LN2@F_WipeEndS:

; 159  : 	}
; 160  : #ifdef NOWIPE
; 161  : 	(void)x;
; 162  : 	(void)y;
; 163  : 	(void)width;
; 164  : 	(void)height;
; 165  : #else
; 166  : 	wipe_scr_end = screens[3];

  0001a	b8 04 00 00 00	 mov	 eax, 4
  0001f	6b c8 03	 imul	 ecx, eax, 3
  00022	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _screens[ecx]
  00028	89 15 00 00 00
	00		 mov	 DWORD PTR _wipe_scr_end, edx

; 167  : 	I_ReadScreen(wipe_scr_end);

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR _wipe_scr_end
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _I_ReadScreen
  00039	83 c4 04	 add	 esp, 4

; 168  : 	V_DrawBlock(x, y, 0, width, height, wipe_scr_start);

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR _wipe_scr_start
  00041	50		 push	 eax
  00042	8b 4d 14	 mov	 ecx, DWORD PTR _height$[ebp]
  00045	51		 push	 ecx
  00046	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00049	52		 push	 edx
  0004a	6a 00		 push	 0
  0004c	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _V_DrawBlock
  00059	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@F_WipeEndS:

; 169  : #endif
; 170  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_F_WipeEndScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_wipe.c
;	COMDAT _F_WipeStartScreen
_TEXT	SEGMENT
_F_WipeStartScreen PROC					; COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 130  : #ifndef NOWIPE
; 131  : 	if(rendermode != render_soft)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00010	74 08		 je	 SHORT $LN2@F_WipeStar

; 132  : 	{
; 133  : #if defined (SHUFFLE) && defined (HWRENDER)
; 134  : 		HWR_StartScreenWipe();

  00012	e8 00 00 00 00	 call	 _HWR_StartScreenWipe
  00017	90		 npad	 1

; 135  : #endif
; 136  : 		return;

  00018	eb 2a		 jmp	 SHORT $LN3@F_WipeStar
$LN2@F_WipeStar:

; 137  : 	}
; 138  : 	wipe_scr_start = screens[2];

  0001a	b8 04 00 00 00	 mov	 eax, 4
  0001f	d1 e0		 shl	 eax, 1
  00021	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _screens[eax]
  00027	89 0d 00 00 00
	00		 mov	 DWORD PTR _wipe_scr_start, ecx

; 139  : 	if(rendermode == render_soft)

  0002d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00034	75 0e		 jne	 SHORT $LN3@F_WipeStar

; 140  : 		I_ReadScreen(wipe_scr_start);

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _wipe_scr_start
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _I_ReadScreen
  00041	83 c4 04	 add	 esp, 4
$LN3@F_WipeStar:

; 141  : #endif
; 142  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_F_WipeStartScreen ENDP
_TEXT	ENDS
END
