; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\r_data.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_textures
PUBLIC	_numtextures
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_textureheight:DWORD
COMM	_spritecachedinfo:DWORD
COMM	_colormaps:DWORD
COMM	_texturetranslation:DWORD
COMM	_numspritelumps:DWORD
_DATA	ENDS
_BSS	SEGMENT
_textures DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_color8to16:WORD:0100H
COMM	_hicolormaps:DWORD
_DATA	ENDS
_BSS	SEGMENT
_numtextures DD	01H DUP (?)
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsnprintf
PUBLIC	___snprintf
PUBLIC	_R_LoadTextures
PUBLIC	_R_FlushTextureCache
PUBLIC	_R_GetColumn
PUBLIC	_R_GetFlat
PUBLIC	_R_InitData
PUBLIC	_R_PrecacheLevel
PUBLIC	_R_GetFlatNumForName
PUBLIC	_R_TextureNumForName
PUBLIC	_R_CheckTextureNumForName
PUBLIC	_R_ReInitColormaps
PUBLIC	_R_ClearColormaps
PUBLIC	_R_ColormapNumForName
PUBLIC	_R_CreateColormap
PUBLIC	_R_CreateColormap2
PUBLIC	_R_MakeColormaps
PUBLIC	_R_ColormapNameForNum
PUBLIC	??_C@_06JPDOBCIP@PNAMES@			; `string'
PUBLIC	??_C@_0CL@LCCIFPHH@Could?5not?5malloc?5?$CFIu?5bytes?5for?5@ ; `string'
PUBLIC	??_C@_08PBOLBFJI@TEXTURE1@			; `string'
PUBLIC	??_C@_08NKMGEGFL@TEXTURE2@			; `string'
PUBLIC	??_C@_0CG@BDOCKIIL@R_LoadTextures?3?5bad?5texture?5dir@ ; `string'
PUBLIC	??_C@_0CM@IACFFKK@R_LoadTextures?3?5Missing?5patch?5i@ ; `string'
PUBLIC	??_C@_07DNJMDCEC@C_START@			; `string'
PUBLIC	??_C@_05DPGJPMEA@C_END@				; `string'
PUBLIC	??_C@_0CN@BAEAJMDD@R_InitExtraColormaps?3?5C_START?5w@ ; `string'
PUBLIC	??_C@_0EB@BNLIPOJB@R_InitExtraColormaps?3?5C_START?5a@ ; `string'
PUBLIC	??_C@_0CA@HFDLPEC@Number?5of?5Extra?5Colormaps?3?5?$CFIu?6@ ; `string'
PUBLIC	??_C@_06COAGKCEK@F_SKY1@			; `string'
PUBLIC	??_C@_0CP@PJOMDGPB@R_GetFlatNumForName?3?5Could?5not?5@ ; `string'
PUBLIC	??_C@_06GLENPBNK@REDFLR@			; `string'
PUBLIC	??_C@_08JDLPAFIO@COLORMAP@			; `string'
PUBLIC	??_C@_07IFICHLAN@CLM?$CF04u@			; `string'
PUBLIC	??_C@_0DL@DBPELGAE@R_ColormapNumForName?3?5Too?5many?5@ ; `string'
PUBLIC	??_C@_0DG@DKNBOBIA@R_ColormapNumForName?3?5Cannot?5fi@ ; `string'
PUBLIC	??_C@_0DH@LMJJLOBN@R_CreateColormap?3?5Too?5many?5colo@ ; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE@				; `string'
PUBLIC	??_C@_0CK@COBEPONN@R_ColormapNameForNum?3?5num?5?$CFd?5is@ ; `string'
PUBLIC	??_C@_07JEEJPFAG@INLEVEL@			; `string'
PUBLIC	??_C@_07FLMOFAHC@PLAYPAL@			; `string'
PUBLIC	??_C@_0BC@CADMMNCF@?6InitHighColor?4?4?4@	; `string'
PUBLIC	??_C@_0BB@FGKIPOKF@?6InitTextures?4?4?4@	; `string'
PUBLIC	??_C@_0BB@DNALODMI@?6InitSprites?4?4?4?6@	; `string'
PUBLIC	??_C@_0BD@GOLHLOGO@?6InitColormaps?4?4?4?6@	; `string'
PUBLIC	??_C@_0EL@ECNOBMHE@WARNING?3?5R_CheckTextureNumForNa@ ; `string'
PUBLIC	??_C@_0GP@BMFPNFBJ@WARNING?3?5R_CheckTextureNumForNa@ ; `string'
PUBLIC	??_C@_07IDPDJOKH@REDWALL@			; `string'
PUBLIC	??_C@_0CO@CNGAOHL@WARNING?3?5R_TextureNumForName?3?5?$CF@ ; `string'
PUBLIC	??_C@_0BA@GDMLHNBI@R_PrecacheLevel@		; `string'
PUBLIC	??_C@_0CF@HNANFJPD@?$CFs?3?5Out?5of?5memory?5looking?5up?5te@ ; `string'
PUBLIC	??_C@_0CF@MDHJPELD@?$CFs?3?5Out?5of?5memory?5looking?5up?5sp@ ; `string'
PUBLIC	??_C@_0FF@GFFPPKOC@Precache?5level?5done?3?6flatmemory@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4038000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strncpy:PROC
EXTRN	_strnicmp:PROC
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_sqrt:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_R_InitSprites:PROC
EXTRN	_P_MobjThinker:PROC
EXTRN	_W_CheckNameForNum:PROC
EXTRN	_W_CheckNumForNamePwad:PROC
EXTRN	_W_CheckNumForName:PROC
EXTRN	_W_GetNumForName:PROC
EXTRN	_W_LumpLength:PROC
EXTRN	_W_ReadLump:PROC
EXTRN	_W_CacheLumpNum:PROC
EXTRN	_W_CacheLumpName:PROC
EXTRN	_W_CachePatchNum:PROC
EXTRN	_Z_ChangeTag2:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_MallocAlign:PROC
EXTRN	_Z_ReallocAlign:PROC
EXTRN	_P_PrecacheLevelFlats:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_M_Memcpy:DWORD
EXTRN	_devparm:DWORD
EXTRN	_dedicated:DWORD
EXTRN	_demoplayback:DWORD
EXTRN	_rendermode:DWORD
EXTRN	_highcolor:DWORD
EXTRN	_num_extra_colormaps:DWORD
EXTRN	_extra_colormaps:BYTE
EXTRN	_numsprites:DWORD
EXTRN	_sprites:DWORD
EXTRN	_numlines:DWORD
EXTRN	_lines:DWORD
EXTRN	_numsides:DWORD
EXTRN	_sides:DWORD
EXTRN	_skytexture:DWORD
EXTRN	_thinkercap:BYTE
EXTRN	_numwadfiles:WORD
EXTRN	_pLocalPalette:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_texturecolumnofs DD 01H DUP (?)
_texturecache DD 01H DUP (?)
_texturewidthmask DD 01H DUP (?)
_flatmemory DD	01H DUP (?)
_spritememory DD 01H DUP (?)
_texturememory DD 01H DUP (?)
_colormaplumps DD 01H DUP (?)
_numcolormaplumps DD 01H DUP (?)
_foundcolormaps DD 03cH DUP (?)
_colormapFixingArray DB 0654H DUP (?)
_carrayindex DD	01H DUP (?)
_deltas	DQ	0300H DUP (?)
_map	DQ	0300H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4038000000000000
CONST	SEGMENT
__real@4038000000000000 DQ 04038000000000000r	; 24
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0FF@GFFPPKOC@Precache?5level?5done?3?6flatmemory@
CONST	SEGMENT
??_C@_0FF@GFFPPKOC@Precache?5level?5done?3?6flatmemory@ DB 'Precache leve'
	DB	'l done:', 0aH, 'flatmemory:    %Iu k', 0aH, 'texturememory: %'
	DB	'Iu k', 0aH, 'spritememory:  %Iu k', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MDHJPELD@?$CFs?3?5Out?5of?5memory?5looking?5up?5sp@
CONST	SEGMENT
??_C@_0CF@MDHJPELD@?$CFs?3?5Out?5of?5memory?5looking?5up?5sp@ DB '%s: Out'
	DB	' of memory looking up sprites', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HNANFJPD@?$CFs?3?5Out?5of?5memory?5looking?5up?5te@
CONST	SEGMENT
??_C@_0CF@HNANFJPD@?$CFs?3?5Out?5of?5memory?5looking?5up?5te@ DB '%s: Out'
	DB	' of memory looking up textues', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GDMLHNBI@R_PrecacheLevel@
CONST	SEGMENT
??_C@_0BA@GDMLHNBI@R_PrecacheLevel@ DB 'R_PrecacheLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CNGAOHL@WARNING?3?5R_TextureNumForName?3?5?$CF@
CONST	SEGMENT
??_C@_0CO@CNGAOHL@WARNING?3?5R_TextureNumForName?3?5?$CF@ DB 'WARNING: R_'
	DB	'TextureNumForName: %.8s not found', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IDPDJOKH@REDWALL@
CONST	SEGMENT
??_C@_07IDPDJOKH@REDWALL@ DB 'REDWALL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GP@BMFPNFBJ@WARNING?3?5R_CheckTextureNumForNa@
CONST	SEGMENT
??_C@_0GP@BMFPNFBJ@WARNING?3?5R_CheckTextureNumForNa@ DB 'WARNING: R_Chec'
	DB	'kTextureNumForName: %.8s not found on sidedef #%d (line #%Iu,'
	DB	' side %d).', 0aH, 'Defaulting to REDWALL.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@ECNOBMHE@WARNING?3?5R_CheckTextureNumForNa@
CONST	SEGMENT
??_C@_0EL@ECNOBMHE@WARNING?3?5R_CheckTextureNumForNa@ DB 'WARNING: R_Chec'
	DB	'kTextureNumForName: %.8s not found.', 0aH, 'Defaulting to RED'
	DB	'WALL.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GOLHLOGO@?6InitColormaps?4?4?4?6@
CONST	SEGMENT
??_C@_0BD@GOLHLOGO@?6InitColormaps?4?4?4?6@ DB 0aH, 'InitColormaps...', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DNALODMI@?6InitSprites?4?4?4?6@
CONST	SEGMENT
??_C@_0BB@DNALODMI@?6InitSprites?4?4?4?6@ DB 0aH, 'InitSprites...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FGKIPOKF@?6InitTextures?4?4?4@
CONST	SEGMENT
??_C@_0BB@FGKIPOKF@?6InitTextures?4?4?4@ DB 0aH, 'InitTextures...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CADMMNCF@?6InitHighColor?4?4?4@
CONST	SEGMENT
??_C@_0BC@CADMMNCF@?6InitHighColor?4?4?4@ DB 0aH, 'InitHighColor...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLMOFAHC@PLAYPAL@
CONST	SEGMENT
??_C@_07FLMOFAHC@PLAYPAL@ DB 'PLAYPAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JEEJPFAG@INLEVEL@
CONST	SEGMENT
??_C@_07JEEJPFAG@INLEVEL@ DB 'INLEVEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@COBEPONN@R_ColormapNameForNum?3?5num?5?$CFd?5is@
CONST	SEGMENT
??_C@_0CK@COBEPONN@R_ColormapNameForNum?3?5num?5?$CFd?5is@ DB 'R_Colormap'
	DB	'NameForNum: num %d is invalid!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE@ DB 'NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@LMJJLOBN@R_CreateColormap?3?5Too?5many?5colo@
CONST	SEGMENT
??_C@_0DH@LMJJLOBN@R_CreateColormap?3?5Too?5many?5colo@ DB 'R_CreateColor'
	DB	'map: Too many colormaps! the limit is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DKNBOBIA@R_ColormapNumForName?3?5Cannot?5fi@
CONST	SEGMENT
??_C@_0DG@DKNBOBIA@R_ColormapNumForName?3?5Cannot?5fi@ DB 'R_ColormapNumF'
	DB	'orName: Cannot find colormap lump %.8s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@DBPELGAE@R_ColormapNumForName?3?5Too?5many?5@
CONST	SEGMENT
??_C@_0DL@DBPELGAE@R_ColormapNumForName?3?5Too?5many?5@ DB 'R_ColormapNum'
	DB	'ForName: Too many colormaps! the limit is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFICHLAN@CLM?$CF04u@
CONST	SEGMENT
??_C@_07IFICHLAN@CLM?$CF04u@ DB 'CLM%04u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JDLPAFIO@COLORMAP@
CONST	SEGMENT
??_C@_08JDLPAFIO@COLORMAP@ DB 'COLORMAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLENPBNK@REDFLR@
CONST	SEGMENT
??_C@_06GLENPBNK@REDFLR@ DB 'REDFLR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PJOMDGPB@R_GetFlatNumForName?3?5Could?5not?5@
CONST	SEGMENT
??_C@_0CP@PJOMDGPB@R_GetFlatNumForName?3?5Could?5not?5@ DB 'R_GetFlatNumF'
	DB	'orName: Could not find flat %.8s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06COAGKCEK@F_SKY1@
CONST	SEGMENT
??_C@_06COAGKCEK@F_SKY1@ DB 'F_SKY1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HFDLPEC@Number?5of?5Extra?5Colormaps?3?5?$CFIu?6@
CONST	SEGMENT
??_C@_0CA@HFDLPEC@Number?5of?5Extra?5Colormaps?3?5?$CFIu?6@ DB 'Number of'
	DB	' Extra Colormaps: %Iu', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@BNLIPOJB@R_InitExtraColormaps?3?5C_START?5a@
CONST	SEGMENT
??_C@_0EB@BNLIPOJB@R_InitExtraColormaps?3?5C_START?5a@ DB 'R_InitExtraCol'
	DB	'ormaps: C_START and C_END in different wad files!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BAEAJMDD@R_InitExtraColormaps?3?5C_START?5w@
CONST	SEGMENT
??_C@_0CN@BAEAJMDD@R_InitExtraColormaps?3?5C_START?5w@ DB 'R_InitExtraCol'
	DB	'ormaps: C_START without C_END', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DPGJPMEA@C_END@
CONST	SEGMENT
??_C@_05DPGJPMEA@C_END@ DB 'C_END', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DNJMDCEC@C_START@
CONST	SEGMENT
??_C@_07DNJMDCEC@C_START@ DB 'C_START', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?maxcolormaplumps@?1??R_InitExtraColormaps@@9@9 DD 010H	; `R_InitExtraColormaps'::`2'::maxcolormaplumps
_DATA	ENDS
;	COMDAT ??_C@_0CM@IACFFKK@R_LoadTextures?3?5Missing?5patch?5i@
CONST	SEGMENT
??_C@_0CM@IACFFKK@R_LoadTextures?3?5Missing?5patch?5i@ DB 'R_LoadTextures'
	DB	': Missing patch in texture %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BDOCKIIL@R_LoadTextures?3?5bad?5texture?5dir@
CONST	SEGMENT
??_C@_0CG@BDOCKIIL@R_LoadTextures?3?5bad?5texture?5dir@ DB 'R_LoadTexture'
	DB	's: bad texture directory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKMGEGFL@TEXTURE2@
CONST	SEGMENT
??_C@_08NKMGEGFL@TEXTURE2@ DB 'TEXTURE2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PBOLBFJI@TEXTURE1@
CONST	SEGMENT
??_C@_08PBOLBFJI@TEXTURE1@ DB 'TEXTURE1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LCCIFPHH@Could?5not?5malloc?5?$CFIu?5bytes?5for?5@
CONST	SEGMENT
??_C@_0CL@LCCIFPHH@Could?5not?5malloc?5?$CFIu?5bytes?5for?5@ DB 'Could no'
	DB	't malloc %Iu bytes for patchloopup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JPDOBCIP@PNAMES@
CONST	SEGMENT
??_C@_06JPDOBCIP@PNAMES@ DB 'PNAMES', 00H		; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	093H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0501H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_Init8to16
_TEXT	SEGMENT
_i$ = -8						; size = 4
_palette$ = -4						; size = 4
_R_Init8to16 PROC					; COMDAT

; 1009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1010 : 	UINT8 *palette;
; 1011 : 	int i;
; 1012 : 
; 1013 : 	palette = W_CacheLumpName("PLAYPAL",PU_CACHE);

  00009	6a 65		 push	 101			; 00000065H
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_07FLMOFAHC@PLAYPAL@
  00010	e8 00 00 00 00	 call	 _W_CacheLumpName
  00015	83 c4 08	 add	 esp, 8
  00018	89 45 fc	 mov	 DWORD PTR _palette$[ebp], eax

; 1014 : 
; 1015 : 	for (i = 0; i < 256; i++)

  0001b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00022	eb 09		 jmp	 SHORT $LN4@R_Init8to1
$LN2@R_Init8to1:
  00024	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_Init8to1:
  0002d	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00034	7d 4d		 jge	 SHORT $LN3@R_Init8to1

; 1016 : 	{
; 1017 : 		// PLAYPAL uses 8 bit values
; 1018 : 		color8to16[i] = (INT16)makecol15(palette[0], palette[1], palette[2]);

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	d1 e0		 shl	 eax, 1
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _palette$[ebp]
  00040	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00044	52		 push	 edx
  00045	b8 01 00 00 00	 mov	 eax, 1
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _palette$[ebp]
  00050	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00054	52		 push	 edx
  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	6b c8 00	 imul	 ecx, eax, 0
  0005d	8b 55 fc	 mov	 edx, DWORD PTR _palette$[ebp]
  00060	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _makecol15
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00070	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR _color8to16[ecx*2], ax

; 1019 : 		palette += 3;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _palette$[ebp]
  0007b	83 c0 03	 add	 eax, 3
  0007e	89 45 fc	 mov	 DWORD PTR _palette$[ebp], eax

; 1020 : 	}

  00081	eb a1		 jmp	 SHORT $LN2@R_Init8to1
$LN3@R_Init8to1:

; 1021 : 
; 1022 : 	// test a big colormap
; 1023 : 	hicolormaps = Z_Malloc(16384*sizeof(*hicolormaps), PU_STATIC, NULL);

  00083	6a 00		 push	 0
  00085	6a 00		 push	 0
  00087	6a 01		 push	 1
  00089	68 00 80 00 00	 push	 32768			; 00008000H
  0008e	e8 00 00 00 00	 call	 _Z_MallocAlign
  00093	83 c4 10	 add	 esp, 16			; 00000010H
  00096	a3 00 00 00 00	 mov	 DWORD PTR _hicolormaps, eax

; 1024 : 	for (i = 0; i < 16384; i++)

  0009b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a2	eb 09		 jmp	 SHORT $LN7@R_Init8to1
$LN5@R_Init8to1:
  000a4	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a7	83 c0 01	 add	 eax, 1
  000aa	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@R_Init8to1:
  000ad	81 7d f8 00 40
	00 00		 cmp	 DWORD PTR _i$[ebp], 16384 ; 00004000H
  000b4	7d 14		 jge	 SHORT $LN6@R_Init8to1

; 1025 : 		hicolormaps[i] = (INT16)(i<<1);

  000b6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000b9	d1 e0		 shl	 eax, 1
  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hicolormaps
  000c4	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000c8	eb da		 jmp	 SHORT $LN5@R_Init8to1
$LN6@R_Init8to1:

; 1026 : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
_R_Init8to16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _makecol15
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_makecol15 PROC						; COMDAT

; 1004 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1005 : 	return (((r >> 3) << 10) | ((g >> 3) << 5) | ((b >> 3)));

  00009	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  0000c	c1 f8 03	 sar	 eax, 3
  0000f	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _g$[ebp]
  00015	c1 f9 03	 sar	 ecx, 3
  00018	c1 e1 05	 shl	 ecx, 5
  0001b	0b c1		 or	 eax, ecx
  0001d	8b 55 10	 mov	 edx, DWORD PTR _b$[ebp]
  00020	c1 fa 03	 sar	 edx, 3
  00023	0b c2		 or	 eax, edx

; 1006 : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_makecol15 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _RoundUp
_TEXT	SEGMENT
_number$ = 8						; size = 8
_RoundUp PROC						; COMDAT

; 967  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 968  : 	if (number > 255.0l)

  00009	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _number$[ebp]
  0000e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  00016	76 07		 jbe	 SHORT $LN2@RoundUp

; 969  : 		return 255;

  00018	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0001d	eb 37		 jmp	 SHORT $LN1@RoundUp
$LN2@RoundUp:

; 970  : 	if (number < 0.0l)

  0001f	0f 57 c0	 xorps	 xmm0, xmm0
  00022	66 0f 2f 45 08	 comisd	 xmm0, QWORD PTR _number$[ebp]
  00027	76 04		 jbe	 SHORT $LN3@RoundUp

; 971  : 		return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 29		 jmp	 SHORT $LN1@RoundUp
$LN3@RoundUp:

; 972  : 
; 973  : 	if ((int)number <= (int)(number - 0.5f))

  0002d	f2 0f 2c 45 08	 cvttsd2si eax, QWORD PTR _number$[ebp]
  00032	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _number$[ebp]
  00037	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0003f	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00043	3b c1		 cmp	 eax, ecx
  00045	7f 0a		 jg	 SHORT $LN4@RoundUp

; 974  : 		return (int)number + 1;

  00047	f2 0f 2c 45 08	 cvttsd2si eax, QWORD PTR _number$[ebp]
  0004c	83 c0 01	 add	 eax, 1
  0004f	eb 05		 jmp	 SHORT $LN1@RoundUp
$LN4@RoundUp:

; 975  : 
; 976  : 	return (int)number;

  00051	f2 0f 2c 45 08	 cvttsd2si eax, QWORD PTR _number$[ebp]
$LN1@RoundUp:

; 977  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_RoundUp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _NearestColor
_TEXT	SEGMENT
_i$ = -28						; size = 4
_bestcolor$ = -24					; size = 4
_bestdistortion$ = -20					; size = 4
_distortion$ = -16					; size = 4
_db$ = -12						; size = 4
_dg$ = -8						; size = 4
_dr$ = -4						; size = 4
_r$ = 8							; size = 1
_g$ = 12						; size = 1
_b$ = 16						; size = 1
_NearestColor PROC					; COMDAT

; 942  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 943  : 	int dr, dg, db;
; 944  : 	int distortion, bestdistortion = 256 * 256 * 4, bestcolor = 0, i;

  00009	c7 45 ec 00 00
	04 00		 mov	 DWORD PTR _bestdistortion$[ebp], 262144 ; 00040000H
  00010	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bestcolor$[ebp], 0

; 945  : 
; 946  : 	for (i = 0; i < 256; i++)

  00017	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@NearestCol
$LN2@NearestCol:
  00020	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@NearestCol:
  00029	81 7d e4 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00030	0f 8d 84 00 00
	00		 jge	 $LN3@NearestCol

; 947  : 	{
; 948  : 		dr = r - pLocalPalette[i].s.red;

  00036	0f b6 45 08	 movzx	 eax, BYTE PTR _r$[ebp]
  0003a	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  0003d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _pLocalPalette
  00043	0f b6 0c 8a	 movzx	 ecx, BYTE PTR [edx+ecx*4]
  00047	2b c1		 sub	 eax, ecx
  00049	89 45 fc	 mov	 DWORD PTR _dr$[ebp], eax

; 949  : 		dg = g - pLocalPalette[i].s.green;

  0004c	0f b6 45 0c	 movzx	 eax, BYTE PTR _g$[ebp]
  00050	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  00053	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _pLocalPalette
  00059	0f b6 4c 8a 01	 movzx	 ecx, BYTE PTR [edx+ecx*4+1]
  0005e	2b c1		 sub	 eax, ecx
  00060	89 45 f8	 mov	 DWORD PTR _dg$[ebp], eax

; 950  : 		db = b - pLocalPalette[i].s.blue;

  00063	0f b6 45 10	 movzx	 eax, BYTE PTR _b$[ebp]
  00067	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _pLocalPalette
  00070	0f b6 4c 8a 02	 movzx	 ecx, BYTE PTR [edx+ecx*4+2]
  00075	2b c1		 sub	 eax, ecx
  00077	89 45 f4	 mov	 DWORD PTR _db$[ebp], eax

; 951  : 		distortion = dr*dr + dg*dg + db*db;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _dr$[ebp]
  0007d	0f af 45 fc	 imul	 eax, DWORD PTR _dr$[ebp]
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _dg$[ebp]
  00084	0f af 4d f8	 imul	 ecx, DWORD PTR _dg$[ebp]
  00088	03 c1		 add	 eax, ecx
  0008a	8b 55 f4	 mov	 edx, DWORD PTR _db$[ebp]
  0008d	0f af 55 f4	 imul	 edx, DWORD PTR _db$[ebp]
  00091	03 c2		 add	 eax, edx
  00093	89 45 f0	 mov	 DWORD PTR _distortion$[ebp], eax

; 952  : 		if (distortion < bestdistortion)

  00096	8b 45 f0	 mov	 eax, DWORD PTR _distortion$[ebp]
  00099	3b 45 ec	 cmp	 eax, DWORD PTR _bestdistortion$[ebp]
  0009c	7d 17		 jge	 SHORT $LN5@NearestCol

; 953  : 		{
; 954  : 			if (!distortion)

  0009e	83 7d f0 00	 cmp	 DWORD PTR _distortion$[ebp], 0
  000a2	75 05		 jne	 SHORT $LN6@NearestCol

; 955  : 				return (UINT8)i;

  000a4	8a 45 e4	 mov	 al, BYTE PTR _i$[ebp]
  000a7	eb 14		 jmp	 SHORT $LN1@NearestCol
$LN6@NearestCol:

; 956  : 
; 957  : 			bestdistortion = distortion;

  000a9	8b 45 f0	 mov	 eax, DWORD PTR _distortion$[ebp]
  000ac	89 45 ec	 mov	 DWORD PTR _bestdistortion$[ebp], eax

; 958  : 			bestcolor = i;

  000af	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  000b2	89 45 e8	 mov	 DWORD PTR _bestcolor$[ebp], eax
$LN5@NearestCol:

; 959  : 		}
; 960  : 	}

  000b5	e9 66 ff ff ff	 jmp	 $LN2@NearestCol
$LN3@NearestCol:

; 961  : 
; 962  : 	return (UINT8)bestcolor;

  000ba	8a 45 e8	 mov	 al, BYTE PTR _bestcolor$[ebp]
$LN1@NearestCol:

; 963  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_NearestColor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_InitColormaps
_TEXT	SEGMENT
_lump$ = -4						; size = 4
_R_InitColormaps PROC					; COMDAT

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 525  : 	lumpnum_t lump;
; 526  : 
; 527  : 	// Load in the light tables, now 64k aligned for smokie...
; 528  : 	lump = W_GetNumForName("COLORMAP");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_08JDLPAFIO@COLORMAP@
  0000e	e8 00 00 00 00	 call	 _W_GetNumForName
  00013	83 c4 04	 add	 esp, 4
  00016	89 45 fc	 mov	 DWORD PTR _lump$[ebp], eax

; 529  : 	colormaps = Z_MallocAlign(W_LumpLength (lump), PU_STATIC, NULL, 16);

  00019	6a 10		 push	 16			; 00000010H
  0001b	6a 00		 push	 0
  0001d	6a 01		 push	 1
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _lump$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _W_LumpLength
  00028	83 c4 04	 add	 esp, 4
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _Z_MallocAlign
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	a3 00 00 00 00	 mov	 DWORD PTR _colormaps, eax

; 530  : 	W_ReadLump(lump, colormaps);

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaps
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _lump$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _W_ReadLump
  00048	83 c4 08	 add	 esp, 8

; 531  : 
; 532  : 	// Init Boom colormaps.
; 533  : 	R_ClearColormaps();

  0004b	e8 00 00 00 00	 call	 _R_ClearColormaps
  00050	90		 npad	 1

; 534  : 	R_InitExtraColormaps();

  00051	e8 00 00 00 00	 call	 _R_InitExtraColormaps
  00056	90		 npad	 1

; 535  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_R_InitColormaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_InitSpriteLumps
_TEXT	SEGMENT
_R_InitSpriteLumps PROC					; COMDAT

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 512  : 	// Doom used to set numspritelumps from S_END - S_START + 1
; 513  : 
; 514  : 	// FIXME: find a better solution for adding new sprites dynamically
; 515  : 	numspritelumps = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _numspritelumps, 0

; 516  : 
; 517  : 	spritecachedinfo = Z_Malloc(MAXSPRITELUMPS*sizeof(*spritecachedinfo), PU_STATIC, NULL);

  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 01		 push	 1
  00019	68 00 00 02 00	 push	 131072			; 00020000H
  0001e	e8 00 00 00 00	 call	 _Z_MallocAlign
  00023	83 c4 10	 add	 esp, 16			; 00000010H
  00026	a3 00 00 00 00	 mov	 DWORD PTR _spritecachedinfo, eax

; 518  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_R_InitSpriteLumps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_InitExtraColormaps
_TEXT	SEGMENT
_clump$ = -16						; size = 2
_cfile$ = -12						; size = 2
_endnum$ = -8						; size = 4
_startnum$ = -4						; size = 4
_R_InitExtraColormaps PROC				; COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 457  : 	lumpnum_t startnum, endnum;
; 458  : 	UINT16 cfile, clump;
; 459  : 	static size_t maxcolormaplumps = 16;
; 460  : 
; 461  : 	for (cfile = clump = 0; cfile < numwadfiles; cfile++, clump = 0)

  00009	33 c0		 xor	 eax, eax
  0000b	66 89 45 f0	 mov	 WORD PTR _clump$[ebp], ax
  0000f	66 8b 4d f0	 mov	 cx, WORD PTR _clump$[ebp]
  00013	66 89 4d f4	 mov	 WORD PTR _cfile$[ebp], cx
  00017	eb 12		 jmp	 SHORT $LN4@R_InitExtr
$LN2@R_InitExtr:
  00019	66 8b 45 f4	 mov	 ax, WORD PTR _cfile$[ebp]
  0001d	66 83 c0 01	 add	 ax, 1
  00021	66 89 45 f4	 mov	 WORD PTR _cfile$[ebp], ax
  00025	33 c9		 xor	 ecx, ecx
  00027	66 89 4d f0	 mov	 WORD PTR _clump$[ebp], cx
$LN4@R_InitExtr:
  0002b	0f b7 45 f4	 movzx	 eax, WORD PTR _cfile$[ebp]
  0002f	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR _numwadfiles
  00036	3b c1		 cmp	 eax, ecx
  00038	0f 8d 12 01 00
	00		 jge	 $LN3@R_InitExtr

; 462  : 	{
; 463  : 		startnum = W_CheckNumForNamePwad("C_START", cfile, clump);

  0003e	0f b7 45 f0	 movzx	 eax, WORD PTR _clump$[ebp]
  00042	50		 push	 eax
  00043	0f b7 4d f4	 movzx	 ecx, WORD PTR _cfile$[ebp]
  00047	51		 push	 ecx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_07DNJMDCEC@C_START@
  0004d	e8 00 00 00 00	 call	 _W_CheckNumForNamePwad
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	0f b7 d0	 movzx	 edx, ax
  00058	89 55 fc	 mov	 DWORD PTR _startnum$[ebp], edx

; 464  : 		if (startnum == LUMPERROR)

  0005b	83 7d fc ff	 cmp	 DWORD PTR _startnum$[ebp], -1
  0005f	75 02		 jne	 SHORT $LN5@R_InitExtr

; 465  : 			continue;

  00061	eb b6		 jmp	 SHORT $LN2@R_InitExtr
$LN5@R_InitExtr:

; 466  : 
; 467  : 		endnum = W_CheckNumForNamePwad("C_END", cfile, clump);

  00063	0f b7 45 f0	 movzx	 eax, WORD PTR _clump$[ebp]
  00067	50		 push	 eax
  00068	0f b7 4d f4	 movzx	 ecx, WORD PTR _cfile$[ebp]
  0006c	51		 push	 ecx
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_05DPGJPMEA@C_END@
  00072	e8 00 00 00 00	 call	 _W_CheckNumForNamePwad
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	0f b7 d0	 movzx	 edx, ax
  0007d	89 55 f8	 mov	 DWORD PTR _endnum$[ebp], edx

; 468  : 
; 469  : 		if (endnum == LUMPERROR)

  00080	83 7d f8 ff	 cmp	 DWORD PTR _endnum$[ebp], -1
  00084	75 0d		 jne	 SHORT $LN6@R_InitExtr

; 470  : 			I_Error("R_InitExtraColormaps: C_START without C_END\n");

  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@BAEAJMDD@R_InitExtraColormaps?3?5C_START?5w@
  0008b	e8 00 00 00 00	 call	 _I_Error
  00090	83 c4 04	 add	 esp, 4
$LN6@R_InitExtr:

; 471  : 
; 472  : 		if (WADFILENUM(startnum) != WADFILENUM(endnum))

  00093	8b 45 fc	 mov	 eax, DWORD PTR _startnum$[ebp]
  00096	c1 e8 10	 shr	 eax, 16			; 00000010H
  00099	0f b7 c8	 movzx	 ecx, ax
  0009c	8b 55 f8	 mov	 edx, DWORD PTR _endnum$[ebp]
  0009f	c1 ea 10	 shr	 edx, 16			; 00000010H
  000a2	0f b7 c2	 movzx	 eax, dx
  000a5	3b c8		 cmp	 ecx, eax
  000a7	74 0d		 je	 SHORT $LN7@R_InitExtr

; 473  : 			I_Error("R_InitExtraColormaps: C_START and C_END in different wad files!\n");

  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@BNLIPOJB@R_InitExtraColormaps?3?5C_START?5a@
  000ae	e8 00 00 00 00	 call	 _I_Error
  000b3	83 c4 04	 add	 esp, 4
$LN7@R_InitExtr:

; 474  : 
; 475  : 		if (numcolormaplumps >= maxcolormaplumps)

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _numcolormaplumps
  000bb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maxcolormaplumps@?1??R_InitExtraColormaps@@9@9
  000c1	72 0c		 jb	 SHORT $LN8@R_InitExtr

; 476  : 			maxcolormaplumps *= 2;

  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?maxcolormaplumps@?1??R_InitExtraColormaps@@9@9
  000c8	d1 e0		 shl	 eax, 1
  000ca	a3 00 00 00 00	 mov	 DWORD PTR ?maxcolormaplumps@?1??R_InitExtraColormaps@@9@9, eax
$LN8@R_InitExtr:

; 477  : 		colormaplumps = Z_Realloc(colormaplumps,

  000cf	6a 00		 push	 0
  000d1	6a 00		 push	 0
  000d3	6a 01		 push	 1
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?maxcolormaplumps@?1??R_InitExtraColormaps@@9@9
  000da	c1 e0 03	 shl	 eax, 3
  000dd	50		 push	 eax
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _colormaplumps
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 _Z_ReallocAlign
  000ea	83 c4 14	 add	 esp, 20			; 00000014H
  000ed	a3 00 00 00 00	 mov	 DWORD PTR _colormaplumps, eax

; 478  : 			sizeof (*colormaplumps) * maxcolormaplumps, PU_STATIC, NULL);
; 479  : 		colormaplumps[numcolormaplumps].wadfile = WADFILENUM(startnum);

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _startnum$[ebp]
  000f5	c1 e8 10	 shr	 eax, 16			; 00000010H
  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _numcolormaplumps
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _colormaplumps
  00104	66 89 04 ca	 mov	 WORD PTR [edx+ecx*8], ax

; 480  : 		colormaplumps[numcolormaplumps].firstlump = LUMPNUM(startnum+1);

  00108	8b 45 fc	 mov	 eax, DWORD PTR _startnum$[ebp]
  0010b	83 c0 01	 add	 eax, 1
  0010e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _numcolormaplumps
  00119	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _colormaplumps
  0011f	66 89 44 ca 02	 mov	 WORD PTR [edx+ecx*8+2], ax

; 481  : 		colormaplumps[numcolormaplumps].numlumps = endnum - (startnum + 1);

  00124	8b 45 fc	 mov	 eax, DWORD PTR _startnum$[ebp]
  00127	83 c0 01	 add	 eax, 1
  0012a	8b 4d f8	 mov	 ecx, DWORD PTR _endnum$[ebp]
  0012d	2b c8		 sub	 ecx, eax
  0012f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _numcolormaplumps
  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaplumps
  0013a	89 4c d0 04	 mov	 DWORD PTR [eax+edx*8+4], ecx

; 482  : 		numcolormaplumps++;

  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR _numcolormaplumps
  00143	83 c0 01	 add	 eax, 1
  00146	a3 00 00 00 00	 mov	 DWORD PTR _numcolormaplumps, eax

; 483  : 	}

  0014b	e9 c9 fe ff ff	 jmp	 $LN2@R_InitExtr
$LN3@R_InitExtr:

; 484  : 	CONS_Printf("Number of Extra Colormaps: %"PRIdS"\n", numcolormaplumps);

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR _numcolormaplumps
  00155	50		 push	 eax
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HFDLPEC@Number?5of?5Extra?5Colormaps?3?5?$CFIu?6@
  0015b	e8 00 00 00 00	 call	 _CONS_Printf
  00160	83 c4 08	 add	 esp, 8

; 485  : }

  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
_R_InitExtraColormaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_CheckNumForNameList
_TEXT	SEGMENT
_lump$ = -8						; size = 2
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_list$ = 12						; size = 4
_listsize$ = 16						; size = 4
_R_CheckNumForNameList PROC				; COMDAT

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 438  : 	size_t i;
; 439  : 	UINT16 lump;
; 440  : 
; 441  : 	for (i = listsize - 1; i < INT16_MAX; i--)

  00009	8b 45 10	 mov	 eax, DWORD PTR _listsize$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00012	eb 09		 jmp	 SHORT $LN4@R_CheckNum
$LN2@R_CheckNum:
  00014	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00017	83 e8 01	 sub	 eax, 1
  0001a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_CheckNum:
  0001d	81 7d fc ff 7f
	00 00		 cmp	 DWORD PTR _i$[ebp], 32767 ; 00007fffH
  00024	73 6a		 jae	 SHORT $LN3@R_CheckNum

; 442  : 	{
; 443  : 		lump = W_CheckNumForNamePwad(name, list[i].wadfile, list[i].firstlump);

  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _list$[ebp]
  0002c	0f b7 54 c1 02	 movzx	 edx, WORD PTR [ecx+eax*8+2]
  00031	52		 push	 edx
  00032	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _list$[ebp]
  00038	0f b7 14 c1	 movzx	 edx, WORD PTR [ecx+eax*8]
  0003c	52		 push	 edx
  0003d	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _W_CheckNumForNamePwad
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
  00049	66 89 45 f8	 mov	 WORD PTR _lump$[ebp], ax

; 444  : 		if (lump == INT16_MAX || lump > (list[i].firstlump + list[i].numlumps))

  0004d	0f b7 45 f8	 movzx	 eax, WORD PTR _lump$[ebp]
  00051	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00056	74 1d		 je	 SHORT $LN7@R_CheckNum
  00058	0f b7 45 f8	 movzx	 eax, WORD PTR _lump$[ebp]
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005f	8b 55 0c	 mov	 edx, DWORD PTR _list$[ebp]
  00062	0f b7 4c ca 02	 movzx	 ecx, WORD PTR [edx+ecx*8+2]
  00067	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0006a	8b 75 0c	 mov	 esi, DWORD PTR _list$[ebp]
  0006d	03 4c d6 04	 add	 ecx, DWORD PTR [esi+edx*8+4]
  00071	3b c1		 cmp	 eax, ecx
  00073	76 04		 jbe	 SHORT $LN5@R_CheckNum
$LN7@R_CheckNum:

; 445  : 			continue;

  00075	eb 9d		 jmp	 SHORT $LN2@R_CheckNum
  00077	eb 15		 jmp	 SHORT $LN6@R_CheckNum
$LN5@R_CheckNum:

; 446  : 		else
; 447  : 			return (list[i].wadfile<<16)+lump;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR _list$[ebp]
  0007f	0f b7 04 c1	 movzx	 eax, WORD PTR [ecx+eax*8]
  00083	c1 e0 10	 shl	 eax, 16			; 00000010H
  00086	0f b7 55 f8	 movzx	 edx, WORD PTR _lump$[ebp]
  0008a	03 c2		 add	 eax, edx
  0008c	eb 05		 jmp	 SHORT $LN1@R_CheckNum
$LN6@R_CheckNum:

; 448  : 	}

  0008e	eb 84		 jmp	 SHORT $LN2@R_CheckNum
$LN3@R_CheckNum:

; 449  : 	return LUMPERROR;

  00090	83 c8 ff	 or	 eax, -1
$LN1@R_CheckNum:

; 450  : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_R_CheckNumForNameList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_GenerateTexture
_TEXT	SEGMENT
_colofs$ = -48						; size = 4
_patchcol$ = -44					; size = 4
_blocksize$ = -40					; size = 4
_i$ = -36						; size = 4
_x2$ = -32						; size = 4
_x1$ = -28						; size = 4
_x$ = -24						; size = 4
_realpatch$ = -20					; size = 4
_patch$ = -16						; size = 4
_texture$ = -12						; size = 4
_blocktex$ = -8						; size = 4
_block$ = -4						; size = 4
_texnum$ = 8						; size = 4
_R_GenerateTexture PROC					; COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 178  : 	UINT8 *block;
; 179  : 	UINT8 *blocktex;
; 180  : 	texture_t *texture;
; 181  : 	texpatch_t *patch;
; 182  : 	patch_t *realpatch;
; 183  : 	int x, x1, x2, i;
; 184  : 	size_t blocksize;
; 185  : 	column_t *patchcol;
; 186  : 	UINT32 *colofs;
; 187  : 
; 188  : 	texture = textures[texnum];

  00009	8b 45 08	 mov	 eax, DWORD PTR _texnum$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  00012	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00015	89 55 f4	 mov	 DWORD PTR _texture$[ebp], edx

; 189  : 
; 190  : 	// allocate texture column offset lookup
; 191  : 	// single-patch textures can have holes in them and may be used on
; 192  : 	// 2sided lines so they need to be kept in 'packed' format
; 193  : 	if (texture->patchcount == 1)

  00018	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  0001b	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  0001f	83 f9 01	 cmp	 ecx, 1
  00022	0f 85 c9 00 00
	00		 jne	 $LN11@R_Generate

; 194  : 	{
; 195  : 		patch = texture->patches;

  00028	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  0002b	83 c0 10	 add	 eax, 16			; 00000010H
  0002e	89 45 f0	 mov	 DWORD PTR _patch$[ebp], eax

; 196  : 		blocksize = W_LumpLength(patch->patch);

  00031	8b 45 f0	 mov	 eax, DWORD PTR _patch$[ebp]
  00034	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _W_LumpLength
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d8	 mov	 DWORD PTR _blocksize$[ebp], eax

; 197  : 
; 198  : 		block = Z_Malloc(blocksize, PU_STATIC, // will change tag at end of this function

  00043	6a 00		 push	 0
  00045	8b 45 08	 mov	 eax, DWORD PTR _texnum$[ebp]
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecache
  0004e	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00051	52		 push	 edx
  00052	6a 01		 push	 1
  00054	8b 45 d8	 mov	 eax, DWORD PTR _blocksize$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _Z_MallocAlign
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	89 45 fc	 mov	 DWORD PTR _block$[ebp], eax

; 199  : 			&texturecache[texnum]);
; 200  : 		realpatch = W_CacheLumpNum(patch->patch, PU_CACHE);

  00063	6a 65		 push	 101			; 00000065H
  00065	8b 45 f0	 mov	 eax, DWORD PTR _patch$[ebp]
  00068	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _W_CacheLumpNum
  00071	83 c4 08	 add	 esp, 8
  00074	89 45 ec	 mov	 DWORD PTR _realpatch$[ebp], eax

; 201  : 		M_Memcpy(block, realpatch, blocksize);

  00077	8b 45 d8	 mov	 eax, DWORD PTR _blocksize$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d ec	 mov	 ecx, DWORD PTR _realpatch$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 fc	 mov	 edx, DWORD PTR _block$[ebp]
  00082	52		 push	 edx
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  : 		texturememory += blocksize;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR _texturememory
  00091	03 45 d8	 add	 eax, DWORD PTR _blocksize$[ebp]
  00094	a3 00 00 00 00	 mov	 DWORD PTR _texturememory, eax

; 203  : 
; 204  : 		// use the patch's column lookup
; 205  : 		colofs = (UINT32 *)(void *)(block + 8);

  00099	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  0009c	83 c0 08	 add	 eax, 8
  0009f	89 45 d0	 mov	 DWORD PTR _colofs$[ebp], eax

; 206  : 		texturecolumnofs[texnum] = colofs;

  000a2	8b 45 08	 mov	 eax, DWORD PTR _texnum$[ebp]
  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecolumnofs
  000ab	8b 55 d0	 mov	 edx, DWORD PTR _colofs$[ebp]
  000ae	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 207  : 		blocktex = block;

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  000b4	89 45 f8	 mov	 DWORD PTR _blocktex$[ebp], eax

; 208  : 		for (i = 0; i < texture->width; i++)

  000b7	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000be	eb 09		 jmp	 SHORT $LN4@R_Generate
$LN2@R_Generate:
  000c0	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  000c3	83 c0 01	 add	 eax, 1
  000c6	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_Generate:
  000c9	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  000cc	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  000d0	39 4d dc	 cmp	 DWORD PTR _i$[ebp], ecx
  000d3	7d 17		 jge	 SHORT $LN3@R_Generate

; 209  : 			colofs[i] = LONG(LONG(colofs[i]) + 3);

  000d5	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  000d8	8b 4d d0	 mov	 ecx, DWORD PTR _colofs$[ebp]
  000db	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000de	83 c2 03	 add	 edx, 3
  000e1	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  000e4	8b 4d d0	 mov	 ecx, DWORD PTR _colofs$[ebp]
  000e7	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  000ea	eb d4		 jmp	 SHORT $LN2@R_Generate
$LN3@R_Generate:

; 210  : 		goto done;

  000ec	e9 8a 01 00 00	 jmp	 $done$16
$LN11@R_Generate:

; 211  : 	}
; 212  : 
; 213  : 	// multi-patch textures (or 'composite')
; 214  : 	blocksize = (texture->width * 4) + (texture->width * texture->height);

  000f1	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  000f4	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  000f8	8b 55 f4	 mov	 edx, DWORD PTR _texture$[ebp]
  000fb	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  000ff	8b 55 f4	 mov	 edx, DWORD PTR _texture$[ebp]
  00102	0f bf 52 0a	 movsx	 edx, WORD PTR [edx+10]
  00106	0f af c2	 imul	 eax, edx
  00109	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0010c	89 45 d8	 mov	 DWORD PTR _blocksize$[ebp], eax

; 215  : 	texturememory += blocksize;

  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR _texturememory
  00114	03 45 d8	 add	 eax, DWORD PTR _blocksize$[ebp]
  00117	a3 00 00 00 00	 mov	 DWORD PTR _texturememory, eax

; 216  : 	block = Z_Malloc(blocksize, PU_STATIC, &texturecache[texnum]);

  0011c	6a 00		 push	 0
  0011e	8b 45 08	 mov	 eax, DWORD PTR _texnum$[ebp]
  00121	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecache
  00127	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0012a	52		 push	 edx
  0012b	6a 01		 push	 1
  0012d	8b 45 d8	 mov	 eax, DWORD PTR _blocksize$[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 _Z_MallocAlign
  00136	83 c4 10	 add	 esp, 16			; 00000010H
  00139	89 45 fc	 mov	 DWORD PTR _block$[ebp], eax

; 217  : 
; 218  : 	memset(block, 247, blocksize); // Transparency hack

  0013c	8b 45 d8	 mov	 eax, DWORD PTR _blocksize$[ebp]
  0013f	50		 push	 eax
  00140	68 f7 00 00 00	 push	 247			; 000000f7H
  00145	8b 4d fc	 mov	 ecx, DWORD PTR _block$[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 _memset
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 219  : 
; 220  : 	// columns lookup table
; 221  : 	colofs = (UINT32 *)(void *)block;

  00151	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  00154	89 45 d0	 mov	 DWORD PTR _colofs$[ebp], eax

; 222  : 	texturecolumnofs[texnum] = colofs;

  00157	8b 45 08	 mov	 eax, DWORD PTR _texnum$[ebp]
  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecolumnofs
  00160	8b 55 d0	 mov	 edx, DWORD PTR _colofs$[ebp]
  00163	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 223  : 
; 224  : 	// texture data before the lookup table
; 225  : 	blocktex = block + (texture->width*4);

  00166	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  00169	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0016d	8b 55 fc	 mov	 edx, DWORD PTR _block$[ebp]
  00170	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00173	89 45 f8	 mov	 DWORD PTR _blocktex$[ebp], eax

; 226  : 
; 227  : 	// Composite the columns together.
; 228  : 	patch = texture->patches;

  00176	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  00179	83 c0 10	 add	 eax, 16			; 00000010H
  0017c	89 45 f0	 mov	 DWORD PTR _patch$[ebp], eax

; 229  : 
; 230  : 	for (i = 0, patch = texture->patches; i < texture->patchcount; i++, patch++)

  0017f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00186	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  00189	83 c0 10	 add	 eax, 16			; 00000010H
  0018c	89 45 f0	 mov	 DWORD PTR _patch$[ebp], eax
  0018f	eb 12		 jmp	 SHORT $LN7@R_Generate
$LN5@R_Generate:
  00191	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00194	83 c0 01	 add	 eax, 1
  00197	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
  0019a	8b 4d f0	 mov	 ecx, DWORD PTR _patch$[ebp]
  0019d	83 c1 08	 add	 ecx, 8
  001a0	89 4d f0	 mov	 DWORD PTR _patch$[ebp], ecx
$LN7@R_Generate:
  001a3	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  001a6	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  001aa	39 4d dc	 cmp	 DWORD PTR _i$[ebp], ecx
  001ad	0f 8d c8 00 00
	00		 jge	 $done$16

; 231  : 	{
; 232  : 		realpatch = W_CacheLumpNum(patch->patch, PU_CACHE);

  001b3	6a 65		 push	 101			; 00000065H
  001b5	8b 45 f0	 mov	 eax, DWORD PTR _patch$[ebp]
  001b8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001bb	51		 push	 ecx
  001bc	e8 00 00 00 00	 call	 _W_CacheLumpNum
  001c1	83 c4 08	 add	 esp, 8
  001c4	89 45 ec	 mov	 DWORD PTR _realpatch$[ebp], eax

; 233  : 		x1 = patch->originx;

  001c7	8b 45 f0	 mov	 eax, DWORD PTR _patch$[ebp]
  001ca	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001cd	89 4d e4	 mov	 DWORD PTR _x1$[ebp], ecx

; 234  : 		x2 = x1 + SHORT(realpatch->width);

  001d0	8b 45 ec	 mov	 eax, DWORD PTR _realpatch$[ebp]
  001d3	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  001d6	03 4d e4	 add	 ecx, DWORD PTR _x1$[ebp]
  001d9	89 4d e0	 mov	 DWORD PTR _x2$[ebp], ecx

; 235  : 
; 236  : 		if (x1 < 0)

  001dc	83 7d e4 00	 cmp	 DWORD PTR _x1$[ebp], 0
  001e0	7d 09		 jge	 SHORT $LN12@R_Generate

; 237  : 			x = 0;

  001e2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001e9	eb 06		 jmp	 SHORT $LN13@R_Generate
$LN12@R_Generate:

; 238  : 		else
; 239  : 			x = x1;

  001eb	8b 45 e4	 mov	 eax, DWORD PTR _x1$[ebp]
  001ee	89 45 e8	 mov	 DWORD PTR _x$[ebp], eax
$LN13@R_Generate:

; 240  : 
; 241  : 		if (x2 > texture->width)

  001f1	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  001f4	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  001f8	39 4d e0	 cmp	 DWORD PTR _x2$[ebp], ecx
  001fb	7e 0a		 jle	 SHORT $LN14@R_Generate

; 242  : 			x2 = texture->width;

  001fd	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  00200	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00204	89 4d e0	 mov	 DWORD PTR _x2$[ebp], ecx
$LN14@R_Generate:

; 243  : 
; 244  : 		for (; x < x2; x++)

  00207	eb 09		 jmp	 SHORT $LN10@R_Generate
$LN8@R_Generate:
  00209	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  0020c	83 c0 01	 add	 eax, 1
  0020f	89 45 e8	 mov	 DWORD PTR _x$[ebp], eax
$LN10@R_Generate:
  00212	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  00215	3b 45 e0	 cmp	 eax, DWORD PTR _x2$[ebp]
  00218	7d 5c		 jge	 SHORT $LN9@R_Generate

; 245  : 		{
; 246  : 			patchcol = (column_t *)((UINT8 *)realpatch + LONG(realpatch->columnofs[x-x1]));

  0021a	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  0021d	2b 45 e4	 sub	 eax, DWORD PTR _x1$[ebp]
  00220	8b 4d ec	 mov	 ecx, DWORD PTR _realpatch$[ebp]
  00223	8b 55 ec	 mov	 edx, DWORD PTR _realpatch$[ebp]
  00226	03 54 81 08	 add	 edx, DWORD PTR [ecx+eax*4+8]
  0022a	89 55 d4	 mov	 DWORD PTR _patchcol$[ebp], edx

; 247  : 
; 248  : 			// generate column ofset lookup
; 249  : 			colofs[x] = LONG((x * texture->height) + (texture->width*4));

  0022d	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  00230	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00234	0f af 4d e8	 imul	 ecx, DWORD PTR _x$[ebp]
  00238	8b 55 f4	 mov	 edx, DWORD PTR _texture$[ebp]
  0023b	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  0023f	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  00242	8b 55 e8	 mov	 edx, DWORD PTR _x$[ebp]
  00245	8b 45 d0	 mov	 eax, DWORD PTR _colofs$[ebp]
  00248	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 250  : 
; 251  : 			R_DrawColumnInCache(patchcol, block + LONG(colofs[x]), patch->originy, texture->height);

  0024b	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  0024e	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00252	51		 push	 ecx
  00253	8b 55 f0	 mov	 edx, DWORD PTR _patch$[ebp]
  00256	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0025a	50		 push	 eax
  0025b	8b 4d e8	 mov	 ecx, DWORD PTR _x$[ebp]
  0025e	8b 55 d0	 mov	 edx, DWORD PTR _colofs$[ebp]
  00261	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  00264	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  00267	50		 push	 eax
  00268	8b 4d d4	 mov	 ecx, DWORD PTR _patchcol$[ebp]
  0026b	51		 push	 ecx
  0026c	e8 00 00 00 00	 call	 _R_DrawColumnInCache
  00271	83 c4 10	 add	 esp, 16			; 00000010H

; 252  : 		}

  00274	eb 93		 jmp	 SHORT $LN8@R_Generate
$LN9@R_Generate:

; 253  : 	}

  00276	e9 16 ff ff ff	 jmp	 $LN5@R_Generate
$done$16:

; 254  : 
; 255  : done:
; 256  : 	// Now that the texture has been built in column cache, it is purgable from zone memory.
; 257  : 	Z_ChangeTag(block, PU_CACHE);

  0027b	6a 65		 push	 101			; 00000065H
  0027d	8b 45 fc	 mov	 eax, DWORD PTR _block$[ebp]
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 _Z_ChangeTag2
  00286	83 c4 08	 add	 esp, 8

; 258  : 
; 259  : 	return blocktex;

  00289	8b 45 f8	 mov	 eax, DWORD PTR _blocktex$[ebp]

; 260  : }

  0028c	5f		 pop	 edi
  0028d	5e		 pop	 esi
  0028e	5b		 pop	 ebx
  0028f	8b e5		 mov	 esp, ebp
  00291	5d		 pop	 ebp
  00292	c3		 ret	 0
_R_GenerateTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_DrawColumnInCache
_TEXT	SEGMENT
_dest$ = -16						; size = 4
_source$ = -12						; size = 4
_position$ = -8						; size = 4
_count$ = -4						; size = 4
_patch$ = 8						; size = 4
_cache$ = 12						; size = 4
_originy$ = 16						; size = 4
_cacheheight$ = 20					; size = 4
_R_DrawColumnInCache PROC				; COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 137  : 	INT32 count, position;
; 138  : 	UINT8 *source;
; 139  : 	UINT8 *dest;
; 140  : 
; 141  : 	dest = (UINT8 *)cache;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _cache$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR _dest$[ebp], eax
$LN2@R_DrawColu:

; 142  : 
; 143  : 	while (patch->topdelta != 0xff)

  0000f	8b 45 08	 mov	 eax, DWORD PTR _patch$[ebp]
  00012	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00015	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0001b	74 79		 je	 SHORT $LN3@R_DrawColu

; 144  : 	{
; 145  : 		source = (UINT8 *)patch + 3;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _patch$[ebp]
  00020	83 c0 03	 add	 eax, 3
  00023	89 45 f4	 mov	 DWORD PTR _source$[ebp], eax

; 146  : 		count = patch->length;

  00026	8b 45 08	 mov	 eax, DWORD PTR _patch$[ebp]
  00029	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0002d	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx

; 147  : 		position = originy + patch->topdelta;

  00030	8b 45 08	 mov	 eax, DWORD PTR _patch$[ebp]
  00033	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00036	03 4d 10	 add	 ecx, DWORD PTR _originy$[ebp]
  00039	89 4d f8	 mov	 DWORD PTR _position$[ebp], ecx

; 148  : 
; 149  : 		if (position < 0)

  0003c	79 10		 jns	 SHORT $LN4@R_DrawColu

; 150  : 		{
; 151  : 			count += position;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00041	03 45 f8	 add	 eax, DWORD PTR _position$[ebp]
  00044	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 152  : 			position = 0;

  00047	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _position$[ebp], 0
$LN4@R_DrawColu:

; 153  : 		}
; 154  : 
; 155  : 		if (position + count > cacheheight)

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _position$[ebp]
  00051	03 45 fc	 add	 eax, DWORD PTR _count$[ebp]
  00054	3b 45 14	 cmp	 eax, DWORD PTR _cacheheight$[ebp]
  00057	7e 09		 jle	 SHORT $LN5@R_DrawColu

; 156  : 			count = cacheheight - position;

  00059	8b 45 14	 mov	 eax, DWORD PTR _cacheheight$[ebp]
  0005c	2b 45 f8	 sub	 eax, DWORD PTR _position$[ebp]
  0005f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN5@R_DrawColu:

; 157  : 
; 158  : 		if (count > 0)

  00062	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00066	7e 18		 jle	 SHORT $LN6@R_DrawColu

; 159  : 			M_Memcpy(cache + position, source, count);

  00068	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _source$[ebp]
  0006f	51		 push	 ecx
  00070	8b 55 0c	 mov	 edx, DWORD PTR _cache$[ebp]
  00073	03 55 f8	 add	 edx, DWORD PTR _position$[ebp]
  00076	52		 push	 edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@R_DrawColu:

; 160  : 
; 161  : 		patch = (column_t *)((UINT8 *)patch + patch->length + 4);

  00080	8b 45 08	 mov	 eax, DWORD PTR _patch$[ebp]
  00083	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00087	8b 55 08	 mov	 edx, DWORD PTR _patch$[ebp]
  0008a	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  0008e	89 45 08	 mov	 DWORD PTR _patch$[ebp], eax

; 162  : 	}

  00091	e9 79 ff ff ff	 jmp	 $LN2@R_DrawColu
$LN3@R_DrawColu:

; 163  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_R_DrawColumnInCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_ColormapNameForNum
_TEXT	SEGMENT
_num$ = 8						; size = 4
_R_ColormapNameForNum PROC				; COMDAT

; 980  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 981  : 	if (num == -1)

  00009	83 7d 08 ff	 cmp	 DWORD PTR _num$[ebp], -1
  0000d	75 07		 jne	 SHORT $LN2@R_Colormap

; 982  : 		return "NONE";

  0000f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04OKGDLNCL@NONE@
  00014	eb 44		 jmp	 SHORT $LN1@R_Colormap
$LN2@R_Colormap:

; 983  : 
; 984  : 	if (num < 0 || num > MAXCOLORMAPS)

  00016	83 7d 08 00	 cmp	 DWORD PTR _num$[ebp], 0
  0001a	7c 06		 jl	 SHORT $LN4@R_Colormap
  0001c	83 7d 08 3c	 cmp	 DWORD PTR _num$[ebp], 60 ; 0000003cH
  00020	7e 11		 jle	 SHORT $LN3@R_Colormap
$LN4@R_Colormap:

; 985  : 		I_Error("R_ColormapNameForNum: num %d is invalid!\n", num);

  00022	8b 45 08	 mov	 eax, DWORD PTR _num$[ebp]
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@COBEPONN@R_ColormapNameForNum?3?5num?5?$CFd?5is@
  0002b	e8 00 00 00 00	 call	 _I_Error
  00030	83 c4 08	 add	 esp, 8
$LN3@R_Colormap:

; 986  : 
; 987  : 	if (foundcolormaps[num] == LUMPERROR)

  00033	8b 45 08	 mov	 eax, DWORD PTR _num$[ebp]
  00036	83 3c 85 00 00
	00 00 ff	 cmp	 DWORD PTR _foundcolormaps[eax*4], -1
  0003e	75 07		 jne	 SHORT $LN5@R_Colormap

; 988  : 		return "INLEVEL";

  00040	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07JEEJPFAG@INLEVEL@
  00045	eb 13		 jmp	 SHORT $LN1@R_Colormap
$LN5@R_Colormap:

; 989  : 
; 990  : 	return W_CheckNameForNum(foundcolormaps[num]);

  00047	8b 45 08	 mov	 eax, DWORD PTR _num$[ebp]
  0004a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _foundcolormaps[eax*4]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _W_CheckNameForNum
  00057	83 c4 04	 add	 esp, 4
$LN1@R_Colormap:

; 991  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_R_ColormapNameForNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_MakeColormaps
_TEXT	SEGMENT
_i$ = -4						; size = 4
_R_MakeColormaps PROC					; COMDAT

; 760  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 761  : 	size_t i;
; 762  : 
; 763  : 	carrayindex = num_extra_colormaps;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_extra_colormaps
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _carrayindex, eax

; 764  : 	num_extra_colormaps = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _num_extra_colormaps, 0

; 765  : 
; 766  : 	for (i = 0; i < carrayindex; i++)

  0001d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@R_MakeColo
$LN2@R_MakeColo:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_MakeColo:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00032	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _carrayindex
  00038	73 45		 jae	 SHORT $LN3@R_MakeColo

; 767  : 		R_CreateColormap2(colormapFixingArray[i][0], colormapFixingArray[i][1],

  0003a	6b 45 fc 1b	 imul	 eax, DWORD PTR _i$[ebp], 27
  0003e	b9 09 00 00 00	 mov	 ecx, 9
  00043	d1 e1		 shl	 ecx, 1
  00045	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _colormapFixingArray[eax+ecx]
  0004c	52		 push	 edx
  0004d	6b 45 fc 1b	 imul	 eax, DWORD PTR _i$[ebp], 27
  00051	b9 09 00 00 00	 mov	 ecx, 9
  00056	c1 e1 00	 shl	 ecx, 0
  00059	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _colormapFixingArray[eax+ecx]
  00060	52		 push	 edx
  00061	6b 45 fc 1b	 imul	 eax, DWORD PTR _i$[ebp], 27
  00065	b9 09 00 00 00	 mov	 ecx, 9
  0006a	6b d1 00	 imul	 edx, ecx, 0
  0006d	8d 84 10 00 00
	00 00		 lea	 eax, DWORD PTR _colormapFixingArray[eax+edx]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _R_CreateColormap2
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	eb a7		 jmp	 SHORT $LN2@R_MakeColo
$LN3@R_MakeColo:

; 768  : 			colormapFixingArray[i][2]);
; 769  : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_R_MakeColormaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_CreateColormap2
_TEXT	SEGMENT
tv1505 = -244						; size = 4
tv1459 = -244						; size = 4
tv1413 = -244						; size = 4
tv727 = -240						; size = 4
tv642 = -240						; size = 4
tv180 = -240						; size = 4
tv265 = -240						; size = 4
tv350 = -240						; size = 4
tv557 = -240						; size = 4
tv728 = -236						; size = 4
tv643 = -236						; size = 4
tv181 = -236						; size = 4
tv351 = -236						; size = 4
tv558 = -236						; size = 4
tv266 = -236						; size = 4
tv644 = -232						; size = 4
tv352 = -232						; size = 4
tv182 = -232						; size = 4
tv1144 = -232						; size = 8
tv559 = -232						; size = 4
tv267 = -232						; size = 4
tv1087 = -232						; size = 8
tv1030 = -232						; size = 8
tv729 = -232						; size = 4
tv308 = -228						; size = 4
tv223 = -228						; size = 4
tv515 = -228						; size = 4
tv600 = -228						; size = 4
tv685 = -228						; size = 4
tv138 = -228						; size = 4
tv1069 = -224						; size = 8
tv1012 = -224						; size = 8
tv686 = -224						; size = 4
tv423 = -224						; size = 4
tv139 = -224						; size = 4
tv224 = -224						; size = 4
tv451 = -224						; size = 4
tv309 = -224						; size = 4
tv472 = -224						; size = 4
tv601 = -224						; size = 4
tv516 = -224						; size = 4
tv1126 = -224						; size = 8
tv1579 = -220						; size = 4
tv602 = -220						; size = 4
tv140 = -220						; size = 4
tv687 = -220						; size = 4
tv1307 = -220						; size = 4
tv1215 = -220						; size = 4
tv1261 = -220						; size = 4
tv310 = -220						; size = 4
tv1513 = -220						; size = 4
tv1549 = -220						; size = 4
tv1564 = -220						; size = 4
tv438 = -220						; size = 4
tv470 = -220						; size = 4
tv517 = -220						; size = 4
tv225 = -220						; size = 4
tv410 = -220						; size = 4
_fadedist$ = -152					; size = 4
_fadeend$ = -148					; size = 4
_fadestart$ = -144					; size = 4
_fadecolor$ = -140					; size = 4
_maskcolor$ = -136					; size = 4
_cb$ = -132						; size = 4
_cg$ = -128						; size = 4
_cr$ = -124						; size = 4
_colormap_p$ = -120					; size = 4
_i$ = -116						; size = 4
_mapnum$ = -112						; size = 4
_fog$ = -108						; size = 4
_p$ = -104						; size = 4
_mask$ = -100						; size = 4
_othermask$ = -96					; size = 8
_maskamt$ = -88						; size = 8
_cbrightness$ = -80					; size = 8
_b$ = -72						; size = 8
_g$ = -64						; size = 8
_r$ = -56						; size = 8
_cdestb$ = -48						; size = 8
_cdestg$ = -40						; size = 8
_cdestr$ = -32						; size = 8
_cmaskb$ = -24						; size = 8
_cmaskg$ = -16						; size = 8
_cmaskr$ = -8						; size = 8
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_p3$ = 16						; size = 4
_R_CreateColormap2 PROC					; COMDAT

; 772  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 773  : 	double cmaskr, cmaskg, cmaskb, cdestr, cdestg, cdestb;
; 774  : 	double r, g, b, cbrightness;
; 775  : 	double maskamt = 0, othermask = 0;

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f2 0f 11 45 a8	 movsd	 QWORD PTR _maskamt$[ebp], xmm0
  00014	0f 57 c0	 xorps	 xmm0, xmm0
  00017	f2 0f 11 45 a0	 movsd	 QWORD PTR _othermask$[ebp], xmm0

; 776  : 	int mask, p, fog = 0;

  0001c	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _fog$[ebp], 0

; 777  : 	size_t mapnum = num_extra_colormaps;

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_extra_colormaps
  00028	89 45 90	 mov	 DWORD PTR _mapnum$[ebp], eax

; 778  : 	size_t i;
; 779  : 	char *colormap_p;
; 780  : 	UINT32 cr, cg, cb, maskcolor, fadecolor;
; 781  : 	UINT32 fadestart = 0, fadeend = 33, fadedist = 33;

  0002b	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fadestart$[ebp], 0
  00035	c7 85 6c ff ff
	ff 21 00 00 00	 mov	 DWORD PTR _fadeend$[ebp], 33 ; 00000021H
  0003f	c7 85 68 ff ff
	ff 21 00 00 00	 mov	 DWORD PTR _fadedist$[ebp], 33 ; 00000021H

; 782  : 
; 783  : #define HEX2INT(x) (UINT32)(x >= '0' && x <= '9' ? x - '0' : x >= 'a' && x <= 'f' ? x - 'a' + 10 : x >= 'A' && x <= 'F' ? x - 'A' + 10 : 0)
; 784  : 	if (p1[0] == '#')

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00054	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00058	83 f8 23	 cmp	 eax, 35			; 00000023H
  0005b	0f 85 3c 07 00
	00		 jne	 $LN14@R_CreateCo

; 785  : 	{
; 786  : 		cr = ((HEX2INT(p1[1]) * 16) + HEX2INT(p1[2]));

  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	c1 e0 00	 shl	 eax, 0
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0006c	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00070	83 fa 30	 cmp	 edx, 48			; 00000030H
  00073	7c 31		 jl	 SHORT $LN42@R_CreateCo
  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	c1 e0 00	 shl	 eax, 0
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00080	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00084	83 fa 39	 cmp	 edx, 57			; 00000039H
  00087	7f 1d		 jg	 SHORT $LN42@R_CreateCo
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	c1 e0 00	 shl	 eax, 0
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00094	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00098	83 ea 30	 sub	 edx, 48			; 00000030H
  0009b	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv140[ebp], edx
  000a1	e9 a6 00 00 00	 jmp	 $LN47@R_CreateCo
$LN42@R_CreateCo:
  000a6	b8 01 00 00 00	 mov	 eax, 1
  000ab	c1 e0 00	 shl	 eax, 0
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000b1	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  000b5	83 fa 61	 cmp	 edx, 97			; 00000061H
  000b8	7c 2e		 jl	 SHORT $LN43@R_CreateCo
  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	c1 e0 00	 shl	 eax, 0
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000c5	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  000c9	83 fa 66	 cmp	 edx, 102		; 00000066H
  000cc	7f 1a		 jg	 SHORT $LN43@R_CreateCo
  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	c1 e0 00	 shl	 eax, 0
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000d9	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  000dd	83 ea 57	 sub	 edx, 87			; 00000057H
  000e0	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv139[ebp], edx
  000e6	eb 58		 jmp	 SHORT $LN46@R_CreateCo
$LN43@R_CreateCo:
  000e8	b8 01 00 00 00	 mov	 eax, 1
  000ed	c1 e0 00	 shl	 eax, 0
  000f0	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000f3	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  000f7	83 fa 41	 cmp	 edx, 65			; 00000041H
  000fa	7c 2e		 jl	 SHORT $LN44@R_CreateCo
  000fc	b8 01 00 00 00	 mov	 eax, 1
  00101	c1 e0 00	 shl	 eax, 0
  00104	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00107	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0010b	83 fa 46	 cmp	 edx, 70			; 00000046H
  0010e	7f 1a		 jg	 SHORT $LN44@R_CreateCo
  00110	b8 01 00 00 00	 mov	 eax, 1
  00115	c1 e0 00	 shl	 eax, 0
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0011b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0011f	83 ea 37	 sub	 edx, 55			; 00000037H
  00122	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv138[ebp], edx
  00128	eb 0a		 jmp	 SHORT $LN45@R_CreateCo
$LN44@R_CreateCo:
  0012a	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN45@R_CreateCo:
  00134	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  0013a	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
$LN46@R_CreateCo:
  00140	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv139[ebp]
  00146	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv140[ebp], ecx
$LN47@R_CreateCo:
  0014c	ba 01 00 00 00	 mov	 edx, 1
  00151	d1 e2		 shl	 edx, 1
  00153	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00156	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0015a	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0015d	7c 2f		 jl	 SHORT $LN48@R_CreateCo
  0015f	ba 01 00 00 00	 mov	 edx, 1
  00164	d1 e2		 shl	 edx, 1
  00166	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00169	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0016d	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00170	7f 1c		 jg	 SHORT $LN48@R_CreateCo
  00172	ba 01 00 00 00	 mov	 edx, 1
  00177	d1 e2		 shl	 edx, 1
  00179	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0017c	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00180	83 e9 30	 sub	 ecx, 48			; 00000030H
  00183	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv182[ebp], ecx
  00189	e9 a0 00 00 00	 jmp	 $LN53@R_CreateCo
$LN48@R_CreateCo:
  0018e	ba 01 00 00 00	 mov	 edx, 1
  00193	d1 e2		 shl	 edx, 1
  00195	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00198	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0019c	83 f9 61	 cmp	 ecx, 97			; 00000061H
  0019f	7c 2c		 jl	 SHORT $LN49@R_CreateCo
  001a1	ba 01 00 00 00	 mov	 edx, 1
  001a6	d1 e2		 shl	 edx, 1
  001a8	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001ab	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  001af	83 f9 66	 cmp	 ecx, 102		; 00000066H
  001b2	7f 19		 jg	 SHORT $LN49@R_CreateCo
  001b4	ba 01 00 00 00	 mov	 edx, 1
  001b9	d1 e2		 shl	 edx, 1
  001bb	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001be	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  001c2	83 e9 57	 sub	 ecx, 87			; 00000057H
  001c5	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv181[ebp], ecx
  001cb	eb 55		 jmp	 SHORT $LN52@R_CreateCo
$LN49@R_CreateCo:
  001cd	ba 01 00 00 00	 mov	 edx, 1
  001d2	d1 e2		 shl	 edx, 1
  001d4	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001d7	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  001db	83 f9 41	 cmp	 ecx, 65			; 00000041H
  001de	7c 2c		 jl	 SHORT $LN50@R_CreateCo
  001e0	ba 01 00 00 00	 mov	 edx, 1
  001e5	d1 e2		 shl	 edx, 1
  001e7	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001ea	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  001ee	83 f9 46	 cmp	 ecx, 70			; 00000046H
  001f1	7f 19		 jg	 SHORT $LN50@R_CreateCo
  001f3	ba 01 00 00 00	 mov	 edx, 1
  001f8	d1 e2		 shl	 edx, 1
  001fa	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001fd	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00201	83 e9 37	 sub	 ecx, 55			; 00000037H
  00204	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv180[ebp], ecx
  0020a	eb 0a		 jmp	 SHORT $LN51@R_CreateCo
$LN50@R_CreateCo:
  0020c	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv180[ebp], 0
$LN51@R_CreateCo:
  00216	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv180[ebp]
  0021c	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv181[ebp], edx
$LN52@R_CreateCo:
  00222	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv181[ebp]
  00228	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv182[ebp], eax
$LN53@R_CreateCo:
  0022e	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv140[ebp]
  00234	c1 e1 04	 shl	 ecx, 4
  00237	03 8d 18 ff ff
	ff		 add	 ecx, DWORD PTR tv182[ebp]
  0023d	89 4d 84	 mov	 DWORD PTR _cr$[ebp], ecx

; 787  : 		cmaskr = cr;

  00240	8b 45 84	 mov	 eax, DWORD PTR _cr$[ebp]
  00243	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv1215[ebp], eax
  00249	f2 0f 2a 85 24
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1215[ebp]
  00251	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv1215[ebp]
  00257	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0025a	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00263	f2 0f 11 45 f8	 movsd	 QWORD PTR _cmaskr$[ebp], xmm0

; 788  : 		cg = ((HEX2INT(p1[3]) * 16) + HEX2INT(p1[4]));

  00268	b8 01 00 00 00	 mov	 eax, 1
  0026d	6b c8 03	 imul	 ecx, eax, 3
  00270	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00273	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00277	83 f8 30	 cmp	 eax, 48			; 00000030H
  0027a	7c 31		 jl	 SHORT $LN54@R_CreateCo
  0027c	b9 01 00 00 00	 mov	 ecx, 1
  00281	6b d1 03	 imul	 edx, ecx, 3
  00284	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00287	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0028b	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0028e	7f 1d		 jg	 SHORT $LN54@R_CreateCo
  00290	ba 01 00 00 00	 mov	 edx, 1
  00295	6b c2 03	 imul	 eax, edx, 3
  00298	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0029b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0029f	83 ea 30	 sub	 edx, 48			; 00000030H
  002a2	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv225[ebp], edx
  002a8	e9 a6 00 00 00	 jmp	 $LN59@R_CreateCo
$LN54@R_CreateCo:
  002ad	b8 01 00 00 00	 mov	 eax, 1
  002b2	6b c8 03	 imul	 ecx, eax, 3
  002b5	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  002b8	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  002bc	83 f8 61	 cmp	 eax, 97			; 00000061H
  002bf	7c 2e		 jl	 SHORT $LN55@R_CreateCo
  002c1	b9 01 00 00 00	 mov	 ecx, 1
  002c6	6b d1 03	 imul	 edx, ecx, 3
  002c9	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  002cc	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  002d0	83 f9 66	 cmp	 ecx, 102		; 00000066H
  002d3	7f 1a		 jg	 SHORT $LN55@R_CreateCo
  002d5	ba 01 00 00 00	 mov	 edx, 1
  002da	6b c2 03	 imul	 eax, edx, 3
  002dd	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  002e0	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  002e4	83 ea 57	 sub	 edx, 87			; 00000057H
  002e7	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv224[ebp], edx
  002ed	eb 58		 jmp	 SHORT $LN58@R_CreateCo
$LN55@R_CreateCo:
  002ef	b8 01 00 00 00	 mov	 eax, 1
  002f4	6b c8 03	 imul	 ecx, eax, 3
  002f7	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  002fa	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  002fe	83 f8 41	 cmp	 eax, 65			; 00000041H
  00301	7c 2e		 jl	 SHORT $LN56@R_CreateCo
  00303	b9 01 00 00 00	 mov	 ecx, 1
  00308	6b d1 03	 imul	 edx, ecx, 3
  0030b	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0030e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00312	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00315	7f 1a		 jg	 SHORT $LN56@R_CreateCo
  00317	ba 01 00 00 00	 mov	 edx, 1
  0031c	6b c2 03	 imul	 eax, edx, 3
  0031f	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00322	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00326	83 ea 37	 sub	 edx, 55			; 00000037H
  00329	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv223[ebp], edx
  0032f	eb 0a		 jmp	 SHORT $LN57@R_CreateCo
$LN56@R_CreateCo:
  00331	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv223[ebp], 0
$LN57@R_CreateCo:
  0033b	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv223[ebp]
  00341	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv224[ebp], eax
$LN58@R_CreateCo:
  00347	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv224[ebp]
  0034d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv225[ebp], ecx
$LN59@R_CreateCo:
  00353	ba 01 00 00 00	 mov	 edx, 1
  00358	c1 e2 02	 shl	 edx, 2
  0035b	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0035e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00362	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00365	7c 31		 jl	 SHORT $LN60@R_CreateCo
  00367	ba 01 00 00 00	 mov	 edx, 1
  0036c	c1 e2 02	 shl	 edx, 2
  0036f	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00372	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00376	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00379	7f 1d		 jg	 SHORT $LN60@R_CreateCo
  0037b	ba 01 00 00 00	 mov	 edx, 1
  00380	c1 e2 02	 shl	 edx, 2
  00383	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00386	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0038a	83 e9 30	 sub	 ecx, 48			; 00000030H
  0038d	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv267[ebp], ecx
  00393	e9 a6 00 00 00	 jmp	 $LN65@R_CreateCo
$LN60@R_CreateCo:
  00398	ba 01 00 00 00	 mov	 edx, 1
  0039d	c1 e2 02	 shl	 edx, 2
  003a0	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003a3	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003a7	83 f9 61	 cmp	 ecx, 97			; 00000061H
  003aa	7c 2e		 jl	 SHORT $LN61@R_CreateCo
  003ac	ba 01 00 00 00	 mov	 edx, 1
  003b1	c1 e2 02	 shl	 edx, 2
  003b4	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003b7	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003bb	83 f9 66	 cmp	 ecx, 102		; 00000066H
  003be	7f 1a		 jg	 SHORT $LN61@R_CreateCo
  003c0	ba 01 00 00 00	 mov	 edx, 1
  003c5	c1 e2 02	 shl	 edx, 2
  003c8	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003cb	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003cf	83 e9 57	 sub	 ecx, 87			; 00000057H
  003d2	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv266[ebp], ecx
  003d8	eb 58		 jmp	 SHORT $LN64@R_CreateCo
$LN61@R_CreateCo:
  003da	ba 01 00 00 00	 mov	 edx, 1
  003df	c1 e2 02	 shl	 edx, 2
  003e2	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003e5	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003e9	83 f9 41	 cmp	 ecx, 65			; 00000041H
  003ec	7c 2e		 jl	 SHORT $LN62@R_CreateCo
  003ee	ba 01 00 00 00	 mov	 edx, 1
  003f3	c1 e2 02	 shl	 edx, 2
  003f6	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003f9	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003fd	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00400	7f 1a		 jg	 SHORT $LN62@R_CreateCo
  00402	ba 01 00 00 00	 mov	 edx, 1
  00407	c1 e2 02	 shl	 edx, 2
  0040a	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0040d	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00411	83 e9 37	 sub	 ecx, 55			; 00000037H
  00414	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv265[ebp], ecx
  0041a	eb 0a		 jmp	 SHORT $LN63@R_CreateCo
$LN62@R_CreateCo:
  0041c	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv265[ebp], 0
$LN63@R_CreateCo:
  00426	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv265[ebp]
  0042c	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv266[ebp], edx
$LN64@R_CreateCo:
  00432	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv266[ebp]
  00438	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv267[ebp], eax
$LN65@R_CreateCo:
  0043e	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv225[ebp]
  00444	c1 e1 04	 shl	 ecx, 4
  00447	03 8d 18 ff ff
	ff		 add	 ecx, DWORD PTR tv267[ebp]
  0044d	89 4d 80	 mov	 DWORD PTR _cg$[ebp], ecx

; 789  : 		cmaskg = cg;

  00450	8b 45 80	 mov	 eax, DWORD PTR _cg$[ebp]
  00453	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv1261[ebp], eax
  00459	f2 0f 2a 85 24
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1261[ebp]
  00461	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv1261[ebp]
  00467	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0046a	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00473	f2 0f 11 45 f0	 movsd	 QWORD PTR _cmaskg$[ebp], xmm0

; 790  : 		cb = ((HEX2INT(p1[5]) * 16) + HEX2INT(p1[6]));

  00478	b8 01 00 00 00	 mov	 eax, 1
  0047d	6b c8 05	 imul	 ecx, eax, 5
  00480	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00483	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00487	83 f8 30	 cmp	 eax, 48			; 00000030H
  0048a	7c 31		 jl	 SHORT $LN66@R_CreateCo
  0048c	b9 01 00 00 00	 mov	 ecx, 1
  00491	6b d1 05	 imul	 edx, ecx, 5
  00494	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00497	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0049b	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0049e	7f 1d		 jg	 SHORT $LN66@R_CreateCo
  004a0	ba 01 00 00 00	 mov	 edx, 1
  004a5	6b c2 05	 imul	 eax, edx, 5
  004a8	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  004ab	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  004af	83 ea 30	 sub	 edx, 48			; 00000030H
  004b2	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv310[ebp], edx
  004b8	e9 a6 00 00 00	 jmp	 $LN71@R_CreateCo
$LN66@R_CreateCo:
  004bd	b8 01 00 00 00	 mov	 eax, 1
  004c2	6b c8 05	 imul	 ecx, eax, 5
  004c5	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  004c8	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  004cc	83 f8 61	 cmp	 eax, 97			; 00000061H
  004cf	7c 2e		 jl	 SHORT $LN67@R_CreateCo
  004d1	b9 01 00 00 00	 mov	 ecx, 1
  004d6	6b d1 05	 imul	 edx, ecx, 5
  004d9	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  004dc	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  004e0	83 f9 66	 cmp	 ecx, 102		; 00000066H
  004e3	7f 1a		 jg	 SHORT $LN67@R_CreateCo
  004e5	ba 01 00 00 00	 mov	 edx, 1
  004ea	6b c2 05	 imul	 eax, edx, 5
  004ed	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  004f0	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  004f4	83 ea 57	 sub	 edx, 87			; 00000057H
  004f7	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv309[ebp], edx
  004fd	eb 58		 jmp	 SHORT $LN70@R_CreateCo
$LN67@R_CreateCo:
  004ff	b8 01 00 00 00	 mov	 eax, 1
  00504	6b c8 05	 imul	 ecx, eax, 5
  00507	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  0050a	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0050e	83 f8 41	 cmp	 eax, 65			; 00000041H
  00511	7c 2e		 jl	 SHORT $LN68@R_CreateCo
  00513	b9 01 00 00 00	 mov	 ecx, 1
  00518	6b d1 05	 imul	 edx, ecx, 5
  0051b	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0051e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00522	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00525	7f 1a		 jg	 SHORT $LN68@R_CreateCo
  00527	ba 01 00 00 00	 mov	 edx, 1
  0052c	6b c2 05	 imul	 eax, edx, 5
  0052f	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00532	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00536	83 ea 37	 sub	 edx, 55			; 00000037H
  00539	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv308[ebp], edx
  0053f	eb 0a		 jmp	 SHORT $LN69@R_CreateCo
$LN68@R_CreateCo:
  00541	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN69@R_CreateCo:
  0054b	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv308[ebp]
  00551	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv309[ebp], eax
$LN70@R_CreateCo:
  00557	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv309[ebp]
  0055d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv310[ebp], ecx
$LN71@R_CreateCo:
  00563	ba 01 00 00 00	 mov	 edx, 1
  00568	6b c2 06	 imul	 eax, edx, 6
  0056b	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0056e	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00572	83 fa 30	 cmp	 edx, 48			; 00000030H
  00575	7c 31		 jl	 SHORT $LN72@R_CreateCo
  00577	b8 01 00 00 00	 mov	 eax, 1
  0057c	6b c8 06	 imul	 ecx, eax, 6
  0057f	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00582	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00586	83 f8 39	 cmp	 eax, 57			; 00000039H
  00589	7f 1d		 jg	 SHORT $LN72@R_CreateCo
  0058b	b9 01 00 00 00	 mov	 ecx, 1
  00590	6b d1 06	 imul	 edx, ecx, 6
  00593	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00596	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0059a	83 e9 30	 sub	 ecx, 48			; 00000030H
  0059d	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv352[ebp], ecx
  005a3	e9 a6 00 00 00	 jmp	 $LN77@R_CreateCo
$LN72@R_CreateCo:
  005a8	ba 01 00 00 00	 mov	 edx, 1
  005ad	6b c2 06	 imul	 eax, edx, 6
  005b0	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  005b3	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  005b7	83 fa 61	 cmp	 edx, 97			; 00000061H
  005ba	7c 2e		 jl	 SHORT $LN73@R_CreateCo
  005bc	b8 01 00 00 00	 mov	 eax, 1
  005c1	6b c8 06	 imul	 ecx, eax, 6
  005c4	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  005c7	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  005cb	83 f8 66	 cmp	 eax, 102		; 00000066H
  005ce	7f 1a		 jg	 SHORT $LN73@R_CreateCo
  005d0	b9 01 00 00 00	 mov	 ecx, 1
  005d5	6b d1 06	 imul	 edx, ecx, 6
  005d8	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  005db	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  005df	83 e9 57	 sub	 ecx, 87			; 00000057H
  005e2	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv351[ebp], ecx
  005e8	eb 58		 jmp	 SHORT $LN76@R_CreateCo
$LN73@R_CreateCo:
  005ea	ba 01 00 00 00	 mov	 edx, 1
  005ef	6b c2 06	 imul	 eax, edx, 6
  005f2	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  005f5	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  005f9	83 fa 41	 cmp	 edx, 65			; 00000041H
  005fc	7c 2e		 jl	 SHORT $LN74@R_CreateCo
  005fe	b8 01 00 00 00	 mov	 eax, 1
  00603	6b c8 06	 imul	 ecx, eax, 6
  00606	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00609	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0060d	83 f8 46	 cmp	 eax, 70			; 00000046H
  00610	7f 1a		 jg	 SHORT $LN74@R_CreateCo
  00612	b9 01 00 00 00	 mov	 ecx, 1
  00617	6b d1 06	 imul	 edx, ecx, 6
  0061a	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0061d	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00621	83 e9 37	 sub	 ecx, 55			; 00000037H
  00624	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv350[ebp], ecx
  0062a	eb 0a		 jmp	 SHORT $LN75@R_CreateCo
$LN74@R_CreateCo:
  0062c	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv350[ebp], 0
$LN75@R_CreateCo:
  00636	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv350[ebp]
  0063c	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv351[ebp], edx
$LN76@R_CreateCo:
  00642	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv351[ebp]
  00648	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv352[ebp], eax
$LN77@R_CreateCo:
  0064e	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv310[ebp]
  00654	c1 e1 04	 shl	 ecx, 4
  00657	03 8d 18 ff ff
	ff		 add	 ecx, DWORD PTR tv352[ebp]
  0065d	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _cb$[ebp], ecx

; 791  : 		cmaskb = cb;

  00663	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _cb$[ebp]
  00669	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv1307[ebp], eax
  0066f	f2 0f 2a 85 24
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1307[ebp]
  00677	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv1307[ebp]
  0067d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00680	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00689	f2 0f 11 45 e8	 movsd	 QWORD PTR _cmaskb$[ebp], xmm0

; 792  : 		// Create a rough approximation of the color (a 16 bit color)
; 793  : 		maskcolor = ((cb) >> 3) + (((cg) >> 2) << 5) + (((cr) >> 3) << 11);

  0068e	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _cb$[ebp]
  00694	c1 e8 03	 shr	 eax, 3
  00697	8b 4d 80	 mov	 ecx, DWORD PTR _cg$[ebp]
  0069a	c1 e9 02	 shr	 ecx, 2
  0069d	c1 e1 05	 shl	 ecx, 5
  006a0	03 c1		 add	 eax, ecx
  006a2	8b 55 84	 mov	 edx, DWORD PTR _cr$[ebp]
  006a5	c1 ea 03	 shr	 edx, 3
  006a8	c1 e2 0b	 shl	 edx, 11			; 0000000bH
  006ab	03 c2		 add	 eax, edx
  006ad	89 85 78 ff ff
	ff		 mov	 DWORD PTR _maskcolor$[ebp], eax

; 794  : 		if (p1[7] >= 'a' && p1[7] <= 'z')

  006b3	b8 01 00 00 00	 mov	 eax, 1
  006b8	6b c8 07	 imul	 ecx, eax, 7
  006bb	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  006be	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  006c2	83 f8 61	 cmp	 eax, 97			; 00000061H
  006c5	7c 2b		 jl	 SHORT $LN16@R_CreateCo
  006c7	b8 01 00 00 00	 mov	 eax, 1
  006cc	6b c8 07	 imul	 ecx, eax, 7
  006cf	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  006d2	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  006d6	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  006d9	7f 17		 jg	 SHORT $LN16@R_CreateCo

; 795  : 			mask = (p1[7] - 'a');

  006db	b8 01 00 00 00	 mov	 eax, 1
  006e0	6b c8 07	 imul	 ecx, eax, 7
  006e3	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  006e6	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  006ea	83 e8 61	 sub	 eax, 97			; 00000061H
  006ed	89 45 9c	 mov	 DWORD PTR _mask$[ebp], eax
  006f0	eb 46		 jmp	 SHORT $LN19@R_CreateCo
$LN16@R_CreateCo:

; 796  : 		else if (p1[7] >= 'A' && p1[7] <= 'Z')

  006f2	b8 01 00 00 00	 mov	 eax, 1
  006f7	6b c8 07	 imul	 ecx, eax, 7
  006fa	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  006fd	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00701	83 f8 41	 cmp	 eax, 65			; 00000041H
  00704	7c 2b		 jl	 SHORT $LN18@R_CreateCo
  00706	b8 01 00 00 00	 mov	 eax, 1
  0070b	6b c8 07	 imul	 ecx, eax, 7
  0070e	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00711	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00715	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  00718	7f 17		 jg	 SHORT $LN18@R_CreateCo

; 797  : 			mask = (p1[7] - 'A');

  0071a	b8 01 00 00 00	 mov	 eax, 1
  0071f	6b c8 07	 imul	 ecx, eax, 7
  00722	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00725	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00729	83 e8 41	 sub	 eax, 65			; 00000041H
  0072c	89 45 9c	 mov	 DWORD PTR _mask$[ebp], eax
  0072f	eb 07		 jmp	 SHORT $LN19@R_CreateCo
$LN18@R_CreateCo:

; 798  : 		else
; 799  : 			mask = 24;

  00731	c7 45 9c 18 00
	00 00		 mov	 DWORD PTR _mask$[ebp], 24 ; 00000018H
$LN19@R_CreateCo:

; 800  : 
; 801  : 		maskamt = (double)(mask/24.0l);

  00738	f2 0f 2a 45 9c	 cvtsi2sd xmm0, DWORD PTR _mask$[ebp]
  0073d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4038000000000000
  00745	f2 0f 11 45 a8	 movsd	 QWORD PTR _maskamt$[ebp], xmm0

; 802  : 
; 803  : 		othermask = 1 - maskamt;

  0074a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00752	f2 0f 5c 45 a8	 subsd	 xmm0, QWORD PTR _maskamt$[ebp]
  00757	f2 0f 11 45 a0	 movsd	 QWORD PTR _othermask$[ebp], xmm0

; 804  : 		maskamt /= 0xff;

  0075c	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _maskamt$[ebp]
  00761	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  00769	f2 0f 11 45 a8	 movsd	 QWORD PTR _maskamt$[ebp], xmm0

; 805  : 		cmaskr *= maskamt;

  0076e	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _cmaskr$[ebp]
  00773	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _maskamt$[ebp]
  00778	f2 0f 11 45 f8	 movsd	 QWORD PTR _cmaskr$[ebp], xmm0

; 806  : 		cmaskg *= maskamt;

  0077d	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _cmaskg$[ebp]
  00782	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _maskamt$[ebp]
  00787	f2 0f 11 45 f0	 movsd	 QWORD PTR _cmaskg$[ebp], xmm0

; 807  : 		cmaskb *= maskamt;

  0078c	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _cmaskb$[ebp]
  00791	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _maskamt$[ebp]
  00796	f2 0f 11 45 e8	 movsd	 QWORD PTR _cmaskb$[ebp], xmm0

; 808  : 	}

  0079b	eb 33		 jmp	 SHORT $LN15@R_CreateCo
$LN14@R_CreateCo:

; 809  : 	else
; 810  : 	{
; 811  : 		cmaskr = cmaskg = cmaskb = 0xff;

  0079d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  007a5	f2 0f 11 45 e8	 movsd	 QWORD PTR _cmaskb$[ebp], xmm0
  007aa	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _cmaskb$[ebp]
  007af	f2 0f 11 45 f0	 movsd	 QWORD PTR _cmaskg$[ebp], xmm0
  007b4	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _cmaskg$[ebp]
  007b9	f2 0f 11 45 f8	 movsd	 QWORD PTR _cmaskr$[ebp], xmm0

; 812  : 		maskamt = 0;

  007be	0f 57 c0	 xorps	 xmm0, xmm0
  007c1	f2 0f 11 45 a8	 movsd	 QWORD PTR _maskamt$[ebp], xmm0

; 813  : 		maskcolor = ((0xff) >> 3) + (((0xff) >> 2) << 5) + (((0xff) >> 3) << 11);

  007c6	c7 85 78 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR _maskcolor$[ebp], 65535 ; 0000ffffH
$LN15@R_CreateCo:

; 814  : 	}
; 815  : 
; 816  : #define NUMFROMCHAR(c) (c >= '0' && c <= '9' ? c - '0' : 0)
; 817  : 	if (p2[0] == '#')

  007d0	b8 01 00 00 00	 mov	 eax, 1
  007d5	6b c8 00	 imul	 ecx, eax, 0
  007d8	8b 55 0c	 mov	 edx, DWORD PTR _p2$[ebp]
  007db	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  007df	83 f8 23	 cmp	 eax, 35			; 00000023H
  007e2	0f 85 08 02 00
	00		 jne	 $LN20@R_CreateCo

; 818  : 	{
; 819  : 		// Get parameters like fadestart, fadeend, and the fogflag
; 820  : 		fadestart = NUMFROMCHAR(p2[3]) + (NUMFROMCHAR(p2[2]) * 10);

  007e8	b8 01 00 00 00	 mov	 eax, 1
  007ed	6b c8 03	 imul	 ecx, eax, 3
  007f0	8b 55 0c	 mov	 edx, DWORD PTR _p2$[ebp]
  007f3	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  007f7	83 f8 30	 cmp	 eax, 48			; 00000030H
  007fa	7c 2e		 jl	 SHORT $LN78@R_CreateCo
  007fc	b9 01 00 00 00	 mov	 ecx, 1
  00801	6b d1 03	 imul	 edx, ecx, 3
  00804	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  00807	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0080b	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0080e	7f 1a		 jg	 SHORT $LN78@R_CreateCo
  00810	ba 01 00 00 00	 mov	 edx, 1
  00815	6b c2 03	 imul	 eax, edx, 3
  00818	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0081b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0081f	83 ea 30	 sub	 edx, 48			; 00000030H
  00822	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv410[ebp], edx
  00828	eb 0a		 jmp	 SHORT $LN79@R_CreateCo
$LN78@R_CreateCo:
  0082a	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv410[ebp], 0
$LN79@R_CreateCo:
  00834	b8 01 00 00 00	 mov	 eax, 1
  00839	d1 e0		 shl	 eax, 1
  0083b	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0083e	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00842	83 fa 30	 cmp	 edx, 48			; 00000030H
  00845	7c 2c		 jl	 SHORT $LN80@R_CreateCo
  00847	b8 01 00 00 00	 mov	 eax, 1
  0084c	d1 e0		 shl	 eax, 1
  0084e	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  00851	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00855	83 fa 39	 cmp	 edx, 57			; 00000039H
  00858	7f 19		 jg	 SHORT $LN80@R_CreateCo
  0085a	b8 01 00 00 00	 mov	 eax, 1
  0085f	d1 e0		 shl	 eax, 1
  00861	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  00864	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00868	83 ea 30	 sub	 edx, 48			; 00000030H
  0086b	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv423[ebp], edx
  00871	eb 0a		 jmp	 SHORT $LN81@R_CreateCo
$LN80@R_CreateCo:
  00873	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv423[ebp], 0
$LN81@R_CreateCo:
  0087d	6b 85 20 ff ff
	ff 0a		 imul	 eax, DWORD PTR tv423[ebp], 10
  00884	03 85 24 ff ff
	ff		 add	 eax, DWORD PTR tv410[ebp]
  0088a	89 85 70 ff ff
	ff		 mov	 DWORD PTR _fadestart$[ebp], eax

; 821  : 		fadeend = NUMFROMCHAR(p2[5]) + (NUMFROMCHAR(p2[4]) * 10);

  00890	b8 01 00 00 00	 mov	 eax, 1
  00895	6b c8 05	 imul	 ecx, eax, 5
  00898	8b 55 0c	 mov	 edx, DWORD PTR _p2$[ebp]
  0089b	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0089f	83 f8 30	 cmp	 eax, 48			; 00000030H
  008a2	7c 2e		 jl	 SHORT $LN82@R_CreateCo
  008a4	b9 01 00 00 00	 mov	 ecx, 1
  008a9	6b d1 05	 imul	 edx, ecx, 5
  008ac	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  008af	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  008b3	83 f9 39	 cmp	 ecx, 57			; 00000039H
  008b6	7f 1a		 jg	 SHORT $LN82@R_CreateCo
  008b8	ba 01 00 00 00	 mov	 edx, 1
  008bd	6b c2 05	 imul	 eax, edx, 5
  008c0	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  008c3	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  008c7	83 ea 30	 sub	 edx, 48			; 00000030H
  008ca	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv438[ebp], edx
  008d0	eb 0a		 jmp	 SHORT $LN83@R_CreateCo
$LN82@R_CreateCo:
  008d2	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv438[ebp], 0
$LN83@R_CreateCo:
  008dc	b8 01 00 00 00	 mov	 eax, 1
  008e1	c1 e0 02	 shl	 eax, 2
  008e4	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  008e7	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  008eb	83 fa 30	 cmp	 edx, 48			; 00000030H
  008ee	7c 2e		 jl	 SHORT $LN84@R_CreateCo
  008f0	b8 01 00 00 00	 mov	 eax, 1
  008f5	c1 e0 02	 shl	 eax, 2
  008f8	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  008fb	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  008ff	83 fa 39	 cmp	 edx, 57			; 00000039H
  00902	7f 1a		 jg	 SHORT $LN84@R_CreateCo
  00904	b8 01 00 00 00	 mov	 eax, 1
  00909	c1 e0 02	 shl	 eax, 2
  0090c	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0090f	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00913	83 ea 30	 sub	 edx, 48			; 00000030H
  00916	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv451[ebp], edx
  0091c	eb 0a		 jmp	 SHORT $LN85@R_CreateCo
$LN84@R_CreateCo:
  0091e	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv451[ebp], 0
$LN85@R_CreateCo:
  00928	6b 85 20 ff ff
	ff 0a		 imul	 eax, DWORD PTR tv451[ebp], 10
  0092f	03 85 24 ff ff
	ff		 add	 eax, DWORD PTR tv438[ebp]
  00935	89 85 6c ff ff
	ff		 mov	 DWORD PTR _fadeend$[ebp], eax

; 822  : 		if (fadestart > 32)

  0093b	83 bd 70 ff ff
	ff 20		 cmp	 DWORD PTR _fadestart$[ebp], 32 ; 00000020H
  00942	76 0a		 jbe	 SHORT $LN21@R_CreateCo

; 823  : 			fadestart = 0;

  00944	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fadestart$[ebp], 0
$LN21@R_CreateCo:

; 824  : 		if (fadeend > 33 || fadeend < 1)

  0094e	83 bd 6c ff ff
	ff 21		 cmp	 DWORD PTR _fadeend$[ebp], 33 ; 00000021H
  00955	77 09		 ja	 SHORT $LN23@R_CreateCo
  00957	83 bd 6c ff ff
	ff 01		 cmp	 DWORD PTR _fadeend$[ebp], 1
  0095e	73 0a		 jae	 SHORT $LN22@R_CreateCo
$LN23@R_CreateCo:

; 825  : 			fadeend = 33;

  00960	c7 85 6c ff ff
	ff 21 00 00 00	 mov	 DWORD PTR _fadeend$[ebp], 33 ; 00000021H
$LN22@R_CreateCo:

; 826  : 		fadedist = fadeend - fadestart;

  0096a	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _fadeend$[ebp]
  00970	2b 85 70 ff ff
	ff		 sub	 eax, DWORD PTR _fadestart$[ebp]
  00976	89 85 68 ff ff
	ff		 mov	 DWORD PTR _fadedist$[ebp], eax

; 827  : 		fog = NUMFROMCHAR(p2[1]) ? 1 : 0;

  0097c	b8 01 00 00 00	 mov	 eax, 1
  00981	c1 e0 00	 shl	 eax, 0
  00984	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  00987	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0098b	83 fa 30	 cmp	 edx, 48			; 00000030H
  0098e	7c 2e		 jl	 SHORT $LN86@R_CreateCo
  00990	b8 01 00 00 00	 mov	 eax, 1
  00995	c1 e0 00	 shl	 eax, 0
  00998	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0099b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0099f	83 fa 39	 cmp	 edx, 57			; 00000039H
  009a2	7f 1a		 jg	 SHORT $LN86@R_CreateCo
  009a4	b8 01 00 00 00	 mov	 eax, 1
  009a9	c1 e0 00	 shl	 eax, 0
  009ac	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  009af	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  009b3	83 ea 30	 sub	 edx, 48			; 00000030H
  009b6	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv470[ebp], edx
  009bc	eb 0a		 jmp	 SHORT $LN87@R_CreateCo
$LN86@R_CreateCo:
  009be	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv470[ebp], 0
$LN87@R_CreateCo:
  009c8	83 bd 24 ff ff
	ff 00		 cmp	 DWORD PTR tv470[ebp], 0
  009cf	74 0c		 je	 SHORT $LN88@R_CreateCo
  009d1	c7 85 20 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv472[ebp], 1
  009db	eb 0a		 jmp	 SHORT $LN89@R_CreateCo
$LN88@R_CreateCo:
  009dd	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv472[ebp], 0
$LN89@R_CreateCo:
  009e7	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv472[ebp]
  009ed	89 45 94	 mov	 DWORD PTR _fog$[ebp], eax
$LN20@R_CreateCo:

; 828  : 	}
; 829  : #undef getnum
; 830  : 
; 831  : 	if (p3[0] == '#')

  009f0	b8 01 00 00 00	 mov	 eax, 1
  009f5	6b c8 00	 imul	 ecx, eax, 0
  009f8	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  009fb	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  009ff	83 f8 23	 cmp	 eax, 35			; 00000023H
  00a02	0f 85 54 06 00
	00		 jne	 $LN24@R_CreateCo

; 832  : 	{
; 833  : 		cdestr = cr = ((HEX2INT(p3[1]) * 16) + HEX2INT(p3[2]));

  00a08	b8 01 00 00 00	 mov	 eax, 1
  00a0d	c1 e0 00	 shl	 eax, 0
  00a10	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a13	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a17	83 fa 30	 cmp	 edx, 48			; 00000030H
  00a1a	7c 31		 jl	 SHORT $LN90@R_CreateCo
  00a1c	b8 01 00 00 00	 mov	 eax, 1
  00a21	c1 e0 00	 shl	 eax, 0
  00a24	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a27	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a2b	83 fa 39	 cmp	 edx, 57			; 00000039H
  00a2e	7f 1d		 jg	 SHORT $LN90@R_CreateCo
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	c1 e0 00	 shl	 eax, 0
  00a38	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a3b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a3f	83 ea 30	 sub	 edx, 48			; 00000030H
  00a42	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv517[ebp], edx
  00a48	e9 a6 00 00 00	 jmp	 $LN95@R_CreateCo
$LN90@R_CreateCo:
  00a4d	b8 01 00 00 00	 mov	 eax, 1
  00a52	c1 e0 00	 shl	 eax, 0
  00a55	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a58	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a5c	83 fa 61	 cmp	 edx, 97			; 00000061H
  00a5f	7c 2e		 jl	 SHORT $LN91@R_CreateCo
  00a61	b8 01 00 00 00	 mov	 eax, 1
  00a66	c1 e0 00	 shl	 eax, 0
  00a69	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a6c	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a70	83 fa 66	 cmp	 edx, 102		; 00000066H
  00a73	7f 1a		 jg	 SHORT $LN91@R_CreateCo
  00a75	b8 01 00 00 00	 mov	 eax, 1
  00a7a	c1 e0 00	 shl	 eax, 0
  00a7d	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a80	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a84	83 ea 57	 sub	 edx, 87			; 00000057H
  00a87	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv516[ebp], edx
  00a8d	eb 58		 jmp	 SHORT $LN94@R_CreateCo
$LN91@R_CreateCo:
  00a8f	b8 01 00 00 00	 mov	 eax, 1
  00a94	c1 e0 00	 shl	 eax, 0
  00a97	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a9a	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a9e	83 fa 41	 cmp	 edx, 65			; 00000041H
  00aa1	7c 2e		 jl	 SHORT $LN92@R_CreateCo
  00aa3	b8 01 00 00 00	 mov	 eax, 1
  00aa8	c1 e0 00	 shl	 eax, 0
  00aab	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00aae	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00ab2	83 fa 46	 cmp	 edx, 70			; 00000046H
  00ab5	7f 1a		 jg	 SHORT $LN92@R_CreateCo
  00ab7	b8 01 00 00 00	 mov	 eax, 1
  00abc	c1 e0 00	 shl	 eax, 0
  00abf	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00ac2	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00ac6	83 ea 37	 sub	 edx, 55			; 00000037H
  00ac9	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv515[ebp], edx
  00acf	eb 0a		 jmp	 SHORT $LN93@R_CreateCo
$LN92@R_CreateCo:
  00ad1	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv515[ebp], 0
$LN93@R_CreateCo:
  00adb	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv515[ebp]
  00ae1	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv516[ebp], eax
$LN94@R_CreateCo:
  00ae7	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv516[ebp]
  00aed	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv517[ebp], ecx
$LN95@R_CreateCo:
  00af3	ba 01 00 00 00	 mov	 edx, 1
  00af8	d1 e2		 shl	 edx, 1
  00afa	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00afd	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b01	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00b04	7c 2f		 jl	 SHORT $LN96@R_CreateCo
  00b06	ba 01 00 00 00	 mov	 edx, 1
  00b0b	d1 e2		 shl	 edx, 1
  00b0d	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b10	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b14	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00b17	7f 1c		 jg	 SHORT $LN96@R_CreateCo
  00b19	ba 01 00 00 00	 mov	 edx, 1
  00b1e	d1 e2		 shl	 edx, 1
  00b20	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b23	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b27	83 e9 30	 sub	 ecx, 48			; 00000030H
  00b2a	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv559[ebp], ecx
  00b30	e9 a0 00 00 00	 jmp	 $LN101@R_CreateCo
$LN96@R_CreateCo:
  00b35	ba 01 00 00 00	 mov	 edx, 1
  00b3a	d1 e2		 shl	 edx, 1
  00b3c	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b3f	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b43	83 f9 61	 cmp	 ecx, 97			; 00000061H
  00b46	7c 2c		 jl	 SHORT $LN97@R_CreateCo
  00b48	ba 01 00 00 00	 mov	 edx, 1
  00b4d	d1 e2		 shl	 edx, 1
  00b4f	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b52	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b56	83 f9 66	 cmp	 ecx, 102		; 00000066H
  00b59	7f 19		 jg	 SHORT $LN97@R_CreateCo
  00b5b	ba 01 00 00 00	 mov	 edx, 1
  00b60	d1 e2		 shl	 edx, 1
  00b62	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b65	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b69	83 e9 57	 sub	 ecx, 87			; 00000057H
  00b6c	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv558[ebp], ecx
  00b72	eb 55		 jmp	 SHORT $LN100@R_CreateCo
$LN97@R_CreateCo:
  00b74	ba 01 00 00 00	 mov	 edx, 1
  00b79	d1 e2		 shl	 edx, 1
  00b7b	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b7e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b82	83 f9 41	 cmp	 ecx, 65			; 00000041H
  00b85	7c 2c		 jl	 SHORT $LN98@R_CreateCo
  00b87	ba 01 00 00 00	 mov	 edx, 1
  00b8c	d1 e2		 shl	 edx, 1
  00b8e	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b91	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b95	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00b98	7f 19		 jg	 SHORT $LN98@R_CreateCo
  00b9a	ba 01 00 00 00	 mov	 edx, 1
  00b9f	d1 e2		 shl	 edx, 1
  00ba1	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00ba4	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00ba8	83 e9 37	 sub	 ecx, 55			; 00000037H
  00bab	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv557[ebp], ecx
  00bb1	eb 0a		 jmp	 SHORT $LN99@R_CreateCo
$LN98@R_CreateCo:
  00bb3	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv557[ebp], 0
$LN99@R_CreateCo:
  00bbd	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv557[ebp]
  00bc3	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv558[ebp], edx
$LN100@R_CreateCo:
  00bc9	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv558[ebp]
  00bcf	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv559[ebp], eax
$LN101@R_CreateCo:
  00bd5	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv517[ebp]
  00bdb	c1 e1 04	 shl	 ecx, 4
  00bde	03 8d 18 ff ff
	ff		 add	 ecx, DWORD PTR tv559[ebp]
  00be4	89 4d 84	 mov	 DWORD PTR _cr$[ebp], ecx
  00be7	8b 55 84	 mov	 edx, DWORD PTR _cr$[ebp]
  00bea	89 95 0c ff ff
	ff		 mov	 DWORD PTR tv1413[ebp], edx
  00bf0	f2 0f 2a 85 0c
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1413[ebp]
  00bf8	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv1413[ebp]
  00bfe	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00c01	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00c0a	f2 0f 11 45 e0	 movsd	 QWORD PTR _cdestr$[ebp], xmm0

; 834  : 		cdestg = cg = ((HEX2INT(p3[3]) * 16) + HEX2INT(p3[4]));

  00c0f	b8 01 00 00 00	 mov	 eax, 1
  00c14	6b c8 03	 imul	 ecx, eax, 3
  00c17	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00c1a	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00c1e	83 f8 30	 cmp	 eax, 48			; 00000030H
  00c21	7c 31		 jl	 SHORT $LN102@R_CreateCo
  00c23	b9 01 00 00 00	 mov	 ecx, 1
  00c28	6b d1 03	 imul	 edx, ecx, 3
  00c2b	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00c2e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00c32	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00c35	7f 1d		 jg	 SHORT $LN102@R_CreateCo
  00c37	ba 01 00 00 00	 mov	 edx, 1
  00c3c	6b c2 03	 imul	 eax, edx, 3
  00c3f	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00c42	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00c46	83 ea 30	 sub	 edx, 48			; 00000030H
  00c49	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv602[ebp], edx
  00c4f	e9 a6 00 00 00	 jmp	 $LN107@R_CreateCo
$LN102@R_CreateCo:
  00c54	b8 01 00 00 00	 mov	 eax, 1
  00c59	6b c8 03	 imul	 ecx, eax, 3
  00c5c	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00c5f	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00c63	83 f8 61	 cmp	 eax, 97			; 00000061H
  00c66	7c 2e		 jl	 SHORT $LN103@R_CreateCo
  00c68	b9 01 00 00 00	 mov	 ecx, 1
  00c6d	6b d1 03	 imul	 edx, ecx, 3
  00c70	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00c73	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00c77	83 f9 66	 cmp	 ecx, 102		; 00000066H
  00c7a	7f 1a		 jg	 SHORT $LN103@R_CreateCo
  00c7c	ba 01 00 00 00	 mov	 edx, 1
  00c81	6b c2 03	 imul	 eax, edx, 3
  00c84	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00c87	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00c8b	83 ea 57	 sub	 edx, 87			; 00000057H
  00c8e	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv601[ebp], edx
  00c94	eb 58		 jmp	 SHORT $LN106@R_CreateCo
$LN103@R_CreateCo:
  00c96	b8 01 00 00 00	 mov	 eax, 1
  00c9b	6b c8 03	 imul	 ecx, eax, 3
  00c9e	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00ca1	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00ca5	83 f8 41	 cmp	 eax, 65			; 00000041H
  00ca8	7c 2e		 jl	 SHORT $LN104@R_CreateCo
  00caa	b9 01 00 00 00	 mov	 ecx, 1
  00caf	6b d1 03	 imul	 edx, ecx, 3
  00cb2	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00cb5	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00cb9	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00cbc	7f 1a		 jg	 SHORT $LN104@R_CreateCo
  00cbe	ba 01 00 00 00	 mov	 edx, 1
  00cc3	6b c2 03	 imul	 eax, edx, 3
  00cc6	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00cc9	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00ccd	83 ea 37	 sub	 edx, 55			; 00000037H
  00cd0	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv600[ebp], edx
  00cd6	eb 0a		 jmp	 SHORT $LN105@R_CreateCo
$LN104@R_CreateCo:
  00cd8	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv600[ebp], 0
$LN105@R_CreateCo:
  00ce2	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv600[ebp]
  00ce8	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv601[ebp], eax
$LN106@R_CreateCo:
  00cee	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv601[ebp]
  00cf4	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv602[ebp], ecx
$LN107@R_CreateCo:
  00cfa	ba 01 00 00 00	 mov	 edx, 1
  00cff	c1 e2 02	 shl	 edx, 2
  00d02	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d05	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d09	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00d0c	7c 31		 jl	 SHORT $LN108@R_CreateCo
  00d0e	ba 01 00 00 00	 mov	 edx, 1
  00d13	c1 e2 02	 shl	 edx, 2
  00d16	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d19	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d1d	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00d20	7f 1d		 jg	 SHORT $LN108@R_CreateCo
  00d22	ba 01 00 00 00	 mov	 edx, 1
  00d27	c1 e2 02	 shl	 edx, 2
  00d2a	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d2d	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d31	83 e9 30	 sub	 ecx, 48			; 00000030H
  00d34	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv644[ebp], ecx
  00d3a	e9 a6 00 00 00	 jmp	 $LN113@R_CreateCo
$LN108@R_CreateCo:
  00d3f	ba 01 00 00 00	 mov	 edx, 1
  00d44	c1 e2 02	 shl	 edx, 2
  00d47	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d4a	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d4e	83 f9 61	 cmp	 ecx, 97			; 00000061H
  00d51	7c 2e		 jl	 SHORT $LN109@R_CreateCo
  00d53	ba 01 00 00 00	 mov	 edx, 1
  00d58	c1 e2 02	 shl	 edx, 2
  00d5b	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d5e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d62	83 f9 66	 cmp	 ecx, 102		; 00000066H
  00d65	7f 1a		 jg	 SHORT $LN109@R_CreateCo
  00d67	ba 01 00 00 00	 mov	 edx, 1
  00d6c	c1 e2 02	 shl	 edx, 2
  00d6f	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d72	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d76	83 e9 57	 sub	 ecx, 87			; 00000057H
  00d79	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv643[ebp], ecx
  00d7f	eb 58		 jmp	 SHORT $LN112@R_CreateCo
$LN109@R_CreateCo:
  00d81	ba 01 00 00 00	 mov	 edx, 1
  00d86	c1 e2 02	 shl	 edx, 2
  00d89	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d8c	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d90	83 f9 41	 cmp	 ecx, 65			; 00000041H
  00d93	7c 2e		 jl	 SHORT $LN110@R_CreateCo
  00d95	ba 01 00 00 00	 mov	 edx, 1
  00d9a	c1 e2 02	 shl	 edx, 2
  00d9d	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00da0	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00da4	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00da7	7f 1a		 jg	 SHORT $LN110@R_CreateCo
  00da9	ba 01 00 00 00	 mov	 edx, 1
  00dae	c1 e2 02	 shl	 edx, 2
  00db1	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00db4	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00db8	83 e9 37	 sub	 ecx, 55			; 00000037H
  00dbb	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv642[ebp], ecx
  00dc1	eb 0a		 jmp	 SHORT $LN111@R_CreateCo
$LN110@R_CreateCo:
  00dc3	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv642[ebp], 0
$LN111@R_CreateCo:
  00dcd	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv642[ebp]
  00dd3	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv643[ebp], edx
$LN112@R_CreateCo:
  00dd9	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv643[ebp]
  00ddf	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv644[ebp], eax
$LN113@R_CreateCo:
  00de5	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv602[ebp]
  00deb	c1 e1 04	 shl	 ecx, 4
  00dee	03 8d 18 ff ff
	ff		 add	 ecx, DWORD PTR tv644[ebp]
  00df4	89 4d 80	 mov	 DWORD PTR _cg$[ebp], ecx
  00df7	8b 55 80	 mov	 edx, DWORD PTR _cg$[ebp]
  00dfa	89 95 0c ff ff
	ff		 mov	 DWORD PTR tv1459[ebp], edx
  00e00	f2 0f 2a 85 0c
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1459[ebp]
  00e08	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv1459[ebp]
  00e0e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00e11	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00e1a	f2 0f 11 45 d8	 movsd	 QWORD PTR _cdestg$[ebp], xmm0

; 835  : 		cdestb = cb = ((HEX2INT(p3[5]) * 16) + HEX2INT(p3[6]));

  00e1f	b8 01 00 00 00	 mov	 eax, 1
  00e24	6b c8 05	 imul	 ecx, eax, 5
  00e27	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00e2a	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00e2e	83 f8 30	 cmp	 eax, 48			; 00000030H
  00e31	7c 31		 jl	 SHORT $LN114@R_CreateCo
  00e33	b9 01 00 00 00	 mov	 ecx, 1
  00e38	6b d1 05	 imul	 edx, ecx, 5
  00e3b	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00e3e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00e42	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00e45	7f 1d		 jg	 SHORT $LN114@R_CreateCo
  00e47	ba 01 00 00 00	 mov	 edx, 1
  00e4c	6b c2 05	 imul	 eax, edx, 5
  00e4f	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00e52	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00e56	83 ea 30	 sub	 edx, 48			; 00000030H
  00e59	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv687[ebp], edx
  00e5f	e9 a6 00 00 00	 jmp	 $LN119@R_CreateCo
$LN114@R_CreateCo:
  00e64	b8 01 00 00 00	 mov	 eax, 1
  00e69	6b c8 05	 imul	 ecx, eax, 5
  00e6c	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00e6f	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00e73	83 f8 61	 cmp	 eax, 97			; 00000061H
  00e76	7c 2e		 jl	 SHORT $LN115@R_CreateCo
  00e78	b9 01 00 00 00	 mov	 ecx, 1
  00e7d	6b d1 05	 imul	 edx, ecx, 5
  00e80	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00e83	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00e87	83 f9 66	 cmp	 ecx, 102		; 00000066H
  00e8a	7f 1a		 jg	 SHORT $LN115@R_CreateCo
  00e8c	ba 01 00 00 00	 mov	 edx, 1
  00e91	6b c2 05	 imul	 eax, edx, 5
  00e94	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00e97	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00e9b	83 ea 57	 sub	 edx, 87			; 00000057H
  00e9e	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv686[ebp], edx
  00ea4	eb 58		 jmp	 SHORT $LN118@R_CreateCo
$LN115@R_CreateCo:
  00ea6	b8 01 00 00 00	 mov	 eax, 1
  00eab	6b c8 05	 imul	 ecx, eax, 5
  00eae	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00eb1	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00eb5	83 f8 41	 cmp	 eax, 65			; 00000041H
  00eb8	7c 2e		 jl	 SHORT $LN116@R_CreateCo
  00eba	b9 01 00 00 00	 mov	 ecx, 1
  00ebf	6b d1 05	 imul	 edx, ecx, 5
  00ec2	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00ec5	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00ec9	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00ecc	7f 1a		 jg	 SHORT $LN116@R_CreateCo
  00ece	ba 01 00 00 00	 mov	 edx, 1
  00ed3	6b c2 05	 imul	 eax, edx, 5
  00ed6	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00ed9	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00edd	83 ea 37	 sub	 edx, 55			; 00000037H
  00ee0	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv685[ebp], edx
  00ee6	eb 0a		 jmp	 SHORT $LN117@R_CreateCo
$LN116@R_CreateCo:
  00ee8	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv685[ebp], 0
$LN117@R_CreateCo:
  00ef2	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv685[ebp]
  00ef8	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv686[ebp], eax
$LN118@R_CreateCo:
  00efe	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv686[ebp]
  00f04	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv687[ebp], ecx
$LN119@R_CreateCo:
  00f0a	ba 01 00 00 00	 mov	 edx, 1
  00f0f	6b c2 06	 imul	 eax, edx, 6
  00f12	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00f15	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00f19	83 fa 30	 cmp	 edx, 48			; 00000030H
  00f1c	7c 31		 jl	 SHORT $LN120@R_CreateCo
  00f1e	b8 01 00 00 00	 mov	 eax, 1
  00f23	6b c8 06	 imul	 ecx, eax, 6
  00f26	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00f29	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00f2d	83 f8 39	 cmp	 eax, 57			; 00000039H
  00f30	7f 1d		 jg	 SHORT $LN120@R_CreateCo
  00f32	b9 01 00 00 00	 mov	 ecx, 1
  00f37	6b d1 06	 imul	 edx, ecx, 6
  00f3a	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00f3d	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00f41	83 e9 30	 sub	 ecx, 48			; 00000030H
  00f44	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv729[ebp], ecx
  00f4a	e9 a6 00 00 00	 jmp	 $LN125@R_CreateCo
$LN120@R_CreateCo:
  00f4f	ba 01 00 00 00	 mov	 edx, 1
  00f54	6b c2 06	 imul	 eax, edx, 6
  00f57	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00f5a	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00f5e	83 fa 61	 cmp	 edx, 97			; 00000061H
  00f61	7c 2e		 jl	 SHORT $LN121@R_CreateCo
  00f63	b8 01 00 00 00	 mov	 eax, 1
  00f68	6b c8 06	 imul	 ecx, eax, 6
  00f6b	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00f6e	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00f72	83 f8 66	 cmp	 eax, 102		; 00000066H
  00f75	7f 1a		 jg	 SHORT $LN121@R_CreateCo
  00f77	b9 01 00 00 00	 mov	 ecx, 1
  00f7c	6b d1 06	 imul	 edx, ecx, 6
  00f7f	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00f82	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00f86	83 e9 57	 sub	 ecx, 87			; 00000057H
  00f89	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv728[ebp], ecx
  00f8f	eb 58		 jmp	 SHORT $LN124@R_CreateCo
$LN121@R_CreateCo:
  00f91	ba 01 00 00 00	 mov	 edx, 1
  00f96	6b c2 06	 imul	 eax, edx, 6
  00f99	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00f9c	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00fa0	83 fa 41	 cmp	 edx, 65			; 00000041H
  00fa3	7c 2e		 jl	 SHORT $LN122@R_CreateCo
  00fa5	b8 01 00 00 00	 mov	 eax, 1
  00faa	6b c8 06	 imul	 ecx, eax, 6
  00fad	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00fb0	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00fb4	83 f8 46	 cmp	 eax, 70			; 00000046H
  00fb7	7f 1a		 jg	 SHORT $LN122@R_CreateCo
  00fb9	b9 01 00 00 00	 mov	 ecx, 1
  00fbe	6b d1 06	 imul	 edx, ecx, 6
  00fc1	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00fc4	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00fc8	83 e9 37	 sub	 ecx, 55			; 00000037H
  00fcb	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv727[ebp], ecx
  00fd1	eb 0a		 jmp	 SHORT $LN123@R_CreateCo
$LN122@R_CreateCo:
  00fd3	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv727[ebp], 0
$LN123@R_CreateCo:
  00fdd	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv727[ebp]
  00fe3	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv728[ebp], edx
$LN124@R_CreateCo:
  00fe9	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv728[ebp]
  00fef	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv729[ebp], eax
$LN125@R_CreateCo:
  00ff5	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv687[ebp]
  00ffb	c1 e1 04	 shl	 ecx, 4
  00ffe	03 8d 18 ff ff
	ff		 add	 ecx, DWORD PTR tv729[ebp]
  01004	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _cb$[ebp], ecx
  0100a	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _cb$[ebp]
  01010	89 95 0c ff ff
	ff		 mov	 DWORD PTR tv1505[ebp], edx
  01016	f2 0f 2a 85 0c
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1505[ebp]
  0101e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv1505[ebp]
  01024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01027	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  01030	f2 0f 11 45 d0	 movsd	 QWORD PTR _cdestb$[ebp], xmm0

; 836  : 		fadecolor = (((cb) >> 3) + (((cg) >> 2) << 5) + (((cr) >> 3) << 11));

  01035	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _cb$[ebp]
  0103b	c1 e8 03	 shr	 eax, 3
  0103e	8b 4d 80	 mov	 ecx, DWORD PTR _cg$[ebp]
  01041	c1 e9 02	 shr	 ecx, 2
  01044	c1 e1 05	 shl	 ecx, 5
  01047	03 c1		 add	 eax, ecx
  01049	8b 55 84	 mov	 edx, DWORD PTR _cr$[ebp]
  0104c	c1 ea 03	 shr	 edx, 3
  0104f	c1 e2 0b	 shl	 edx, 11			; 0000000bH
  01052	03 c2		 add	 eax, edx
  01054	89 85 74 ff ff
	ff		 mov	 DWORD PTR _fadecolor$[ebp], eax

; 837  : 	}

  0105a	eb 49		 jmp	 SHORT $LN25@R_CreateCo
$LN24@R_CreateCo:

; 838  : 	else
; 839  : 		cdestr = cdestg = cdestb = fadecolor = 0;

  0105c	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fadecolor$[ebp], 0
  01066	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _fadecolor$[ebp]
  0106c	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv1513[ebp], eax
  01072	f2 0f 2a 85 24
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1513[ebp]
  0107a	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv1513[ebp]
  01080	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01083	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0108c	f2 0f 11 45 d0	 movsd	 QWORD PTR _cdestb$[ebp], xmm0
  01091	f2 0f 10 45 d0	 movsd	 xmm0, QWORD PTR _cdestb$[ebp]
  01096	f2 0f 11 45 d8	 movsd	 QWORD PTR _cdestg$[ebp], xmm0
  0109b	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR _cdestg$[ebp]
  010a0	f2 0f 11 45 e0	 movsd	 QWORD PTR _cdestr$[ebp], xmm0
$LN25@R_CreateCo:

; 840  : #undef HEX2INT
; 841  : 
; 842  : 	for (i = 0; i < num_extra_colormaps; i++)

  010a5	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  010ac	eb 09		 jmp	 SHORT $LN4@R_CreateCo
$LN2@R_CreateCo:
  010ae	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  010b1	83 c0 01	 add	 eax, 1
  010b4	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_CreateCo:
  010b7	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  010ba	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_extra_colormaps
  010c0	0f 83 8e 00 00
	00		 jae	 $LN3@R_CreateCo

; 843  : 	{
; 844  : 		if (foundcolormaps[i] != LUMPERROR)

  010c6	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  010c9	83 3c 85 00 00
	00 00 ff	 cmp	 DWORD PTR _foundcolormaps[eax*4], -1
  010d1	74 02		 je	 SHORT $LN26@R_CreateCo

; 845  : 			continue;

  010d3	eb d9		 jmp	 SHORT $LN2@R_CreateCo
$LN26@R_CreateCo:

; 846  : 		if (maskcolor == extra_colormaps[i].maskcolor
; 847  : 			&& fadecolor == extra_colormaps[i].fadecolor
; 848  : 			&& (float)maskamt == (float)extra_colormaps[i].maskamt
; 849  : 			&& fadestart == extra_colormaps[i].fadestart
; 850  : 			&& fadeend == extra_colormaps[i].fadeend
; 851  : 			&& fog == extra_colormaps[i].fog)

  010d5	6b 45 8c 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  010d9	0f b7 88 00 00
	00 00		 movzx	 ecx, WORD PTR _extra_colormaps[eax]
  010e0	39 8d 78 ff ff
	ff		 cmp	 DWORD PTR _maskcolor$[ebp], ecx
  010e6	75 67		 jne	 SHORT $LN27@R_CreateCo
  010e8	6b 45 8c 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  010ec	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR _extra_colormaps[eax+2]
  010f3	39 8d 74 ff ff
	ff		 cmp	 DWORD PTR _fadecolor$[ebp], ecx
  010f9	75 54		 jne	 SHORT $LN27@R_CreateCo
  010fb	f2 0f 5a 45 a8	 cvtsd2ss xmm0, QWORD PTR _maskamt$[ebp]
  01100	6b 45 8c 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  01104	f2 0f 5a 88 08
	00 00 00	 cvtsd2ss xmm1, QWORD PTR _extra_colormaps[eax+8]
  0110c	0f 2e c1	 ucomiss xmm0, xmm1
  0110f	9f		 lahf
  01110	f6 c4 44	 test	 ah, 68			; 00000044H
  01113	7a 3a		 jp	 SHORT $LN27@R_CreateCo
  01115	6b 45 8c 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  01119	0f b7 88 10 00
	00 00		 movzx	 ecx, WORD PTR _extra_colormaps[eax+16]
  01120	39 8d 70 ff ff
	ff		 cmp	 DWORD PTR _fadestart$[ebp], ecx
  01126	75 27		 jne	 SHORT $LN27@R_CreateCo
  01128	6b 45 8c 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  0112c	0f b7 88 12 00
	00 00		 movzx	 ecx, WORD PTR _extra_colormaps[eax+18]
  01133	39 8d 6c ff ff
	ff		 cmp	 DWORD PTR _fadeend$[ebp], ecx
  01139	75 14		 jne	 SHORT $LN27@R_CreateCo
  0113b	6b 45 8c 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  0113f	8b 4d 94	 mov	 ecx, DWORD PTR _fog$[ebp]
  01142	3b 88 14 00 00
	00		 cmp	 ecx, DWORD PTR _extra_colormaps[eax+20]
  01148	75 05		 jne	 SHORT $LN27@R_CreateCo

; 852  : 		{
; 853  : 			return;

  0114a	e9 4e 08 00 00	 jmp	 $LN1@R_CreateCo
$LN27@R_CreateCo:

; 854  : 		}
; 855  : 	}

  0114f	e9 5a ff ff ff	 jmp	 $LN2@R_CreateCo
$LN3@R_CreateCo:

; 856  : 
; 857  : 	if (num_extra_colormaps == MAXCOLORMAPS)

  01154	83 3d 00 00 00
	00 3c		 cmp	 DWORD PTR _num_extra_colormaps, 60 ; 0000003cH
  0115b	75 0f		 jne	 SHORT $LN28@R_CreateCo

; 858  : 		I_Error("R_CreateColormap: Too many colormaps! the limit is %d\n", MAXCOLORMAPS);

  0115d	6a 3c		 push	 60			; 0000003cH
  0115f	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LMJJLOBN@R_CreateColormap?3?5Too?5many?5colo@
  01164	e8 00 00 00 00	 call	 _I_Error
  01169	83 c4 08	 add	 esp, 8
$LN28@R_CreateCo:

; 859  : 
; 860  : 	num_extra_colormaps++;

  0116c	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_extra_colormaps
  01171	83 c0 01	 add	 eax, 1
  01174	a3 00 00 00 00	 mov	 DWORD PTR _num_extra_colormaps, eax

; 861  : 
; 862  : 	if (rendermode == render_soft)

  01179	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  01180	0f 85 e2 02 00
	00		 jne	 $LN6@R_CreateCo

; 863  : 	{
; 864  : 		for (i = 0; i < 256; i++)

  01186	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0118d	eb 09		 jmp	 SHORT $LN7@R_CreateCo
$LN5@R_CreateCo:
  0118f	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  01192	83 c0 01	 add	 eax, 1
  01195	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax
$LN7@R_CreateCo:
  01198	81 7d 8c 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0119f	0f 83 c3 02 00
	00		 jae	 $LN6@R_CreateCo

; 865  : 		{
; 866  : 			r = pLocalPalette[i].s.red;

  011a5	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  011a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _pLocalPalette
  011ae	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  011b2	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  011b6	f2 0f 11 45 c8	 movsd	 QWORD PTR _r$[ebp], xmm0

; 867  : 			g = pLocalPalette[i].s.green;

  011bb	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  011be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _pLocalPalette
  011c4	0f b6 54 81 01	 movzx	 edx, BYTE PTR [ecx+eax*4+1]
  011c9	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  011cd	f2 0f 11 45 c0	 movsd	 QWORD PTR _g$[ebp], xmm0

; 868  : 			b = pLocalPalette[i].s.blue;

  011d2	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  011d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _pLocalPalette
  011db	0f b6 54 81 02	 movzx	 edx, BYTE PTR [ecx+eax*4+2]
  011e0	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  011e4	f2 0f 11 45 b8	 movsd	 QWORD PTR _b$[ebp], xmm0

; 869  : 			cbrightness = sqrt((r*r) + (g*g) + (b*b));

  011e9	f2 0f 10 45 c8	 movsd	 xmm0, QWORD PTR _r$[ebp]
  011ee	f2 0f 59 45 c8	 mulsd	 xmm0, QWORD PTR _r$[ebp]
  011f3	f2 0f 10 4d c0	 movsd	 xmm1, QWORD PTR _g$[ebp]
  011f8	f2 0f 59 4d c0	 mulsd	 xmm1, QWORD PTR _g$[ebp]
  011fd	f2 0f 58 c1	 addsd	 xmm0, xmm1
  01201	f2 0f 10 4d b8	 movsd	 xmm1, QWORD PTR _b$[ebp]
  01206	f2 0f 59 4d b8	 mulsd	 xmm1, QWORD PTR _b$[ebp]
  0120b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0120f	83 ec 08	 sub	 esp, 8
  01212	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01217	e8 00 00 00 00	 call	 _sqrt
  0121c	83 c4 08	 add	 esp, 8
  0121f	dd 5d b0	 fstp	 QWORD PTR _cbrightness$[ebp]

; 870  : 
; 871  : 			map[i][0] = (cbrightness * cmaskr) + (r * othermask);

  01222	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR _cbrightness$[ebp]
  01227	f2 0f 59 45 f8	 mulsd	 xmm0, QWORD PTR _cmaskr$[ebp]
  0122c	f2 0f 10 4d c8	 movsd	 xmm1, QWORD PTR _r$[ebp]
  01231	f2 0f 59 4d a0	 mulsd	 xmm1, QWORD PTR _othermask$[ebp]
  01236	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0123a	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0123e	b9 08 00 00 00	 mov	 ecx, 8
  01243	6b d1 00	 imul	 edx, ecx, 0
  01246	f2 0f 11 84 10
	00 00 00 00	 movsd	 QWORD PTR _map[eax+edx], xmm0

; 872  : 			if (map[i][0] > 255.0l)

  0124f	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01253	b9 08 00 00 00	 mov	 ecx, 8
  01258	6b d1 00	 imul	 edx, ecx, 0
  0125b	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+edx]
  01264	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  0126c	76 1d		 jbe	 SHORT $LN30@R_CreateCo

; 873  : 				map[i][0] = 255.0l;

  0126e	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01272	b9 08 00 00 00	 mov	 ecx, 8
  01277	6b d1 00	 imul	 edx, ecx, 0
  0127a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  01282	f2 0f 11 84 10
	00 00 00 00	 movsd	 QWORD PTR _map[eax+edx], xmm0
$LN30@R_CreateCo:

; 874  : 			deltas[i][0] = (map[i][0] - cdestr) / (double)fadedist;

  0128b	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0128f	b9 08 00 00 00	 mov	 ecx, 8
  01294	6b d1 00	 imul	 edx, ecx, 0
  01297	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+edx]
  012a0	f2 0f 5c 45 e0	 subsd	 xmm0, QWORD PTR _cdestr$[ebp]
  012a5	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _fadedist$[ebp]
  012ab	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv1549[ebp], eax
  012b1	f2 0f 2a 8d 24
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv1549[ebp]
  012b9	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv1549[ebp]
  012bf	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  012c2	f2 0f 58 0c cd
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  012cb	f2 0f 5e c1	 divsd	 xmm0, xmm1
  012cf	6b 55 8c 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  012d3	b8 08 00 00 00	 mov	 eax, 8
  012d8	6b c8 00	 imul	 ecx, eax, 0
  012db	f2 0f 11 84 0a
	00 00 00 00	 movsd	 QWORD PTR _deltas[edx+ecx], xmm0

; 875  : 
; 876  : 			map[i][1] = (cbrightness * cmaskg) + (g * othermask);

  012e4	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR _cbrightness$[ebp]
  012e9	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _cmaskg$[ebp]
  012ee	f2 0f 10 4d c0	 movsd	 xmm1, QWORD PTR _g$[ebp]
  012f3	f2 0f 59 4d a0	 mulsd	 xmm1, QWORD PTR _othermask$[ebp]
  012f8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  012fc	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01300	b9 08 00 00 00	 mov	 ecx, 8
  01305	c1 e1 00	 shl	 ecx, 0
  01308	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0

; 877  : 			if (map[i][1] > 255.0l)

  01311	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01315	b9 08 00 00 00	 mov	 ecx, 8
  0131a	c1 e1 00	 shl	 ecx, 0
  0131d	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  01326	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  0132e	76 1d		 jbe	 SHORT $LN31@R_CreateCo

; 878  : 				map[i][1] = 255.0l;

  01330	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01334	b9 08 00 00 00	 mov	 ecx, 8
  01339	c1 e1 00	 shl	 ecx, 0
  0133c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  01344	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0
$LN31@R_CreateCo:

; 879  : 			deltas[i][1] = (map[i][1] - cdestg) / (double)fadedist;

  0134d	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01351	b9 08 00 00 00	 mov	 ecx, 8
  01356	c1 e1 00	 shl	 ecx, 0
  01359	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  01362	f2 0f 5c 45 d8	 subsd	 xmm0, QWORD PTR _cdestg$[ebp]
  01367	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _fadedist$[ebp]
  0136d	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv1564[ebp], edx
  01373	f2 0f 2a 8d 24
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv1564[ebp]
  0137b	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv1564[ebp]
  01381	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01384	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0138d	f2 0f 5e c1	 divsd	 xmm0, xmm1
  01391	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  01395	ba 08 00 00 00	 mov	 edx, 8
  0139a	c1 e2 00	 shl	 edx, 0
  0139d	f2 0f 11 84 11
	00 00 00 00	 movsd	 QWORD PTR _deltas[ecx+edx], xmm0

; 880  : 
; 881  : 			map[i][2] = (cbrightness * cmaskb) + (b * othermask);

  013a6	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR _cbrightness$[ebp]
  013ab	f2 0f 59 45 e8	 mulsd	 xmm0, QWORD PTR _cmaskb$[ebp]
  013b0	f2 0f 10 4d b8	 movsd	 xmm1, QWORD PTR _b$[ebp]
  013b5	f2 0f 59 4d a0	 mulsd	 xmm1, QWORD PTR _othermask$[ebp]
  013ba	f2 0f 58 c1	 addsd	 xmm0, xmm1
  013be	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  013c2	b9 08 00 00 00	 mov	 ecx, 8
  013c7	d1 e1		 shl	 ecx, 1
  013c9	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0

; 882  : 			if (map[i][2] > 255.0l)

  013d2	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  013d6	b9 08 00 00 00	 mov	 ecx, 8
  013db	d1 e1		 shl	 ecx, 1
  013dd	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  013e6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  013ee	76 1c		 jbe	 SHORT $LN32@R_CreateCo

; 883  : 				map[i][2] = 255.0l;

  013f0	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  013f4	b9 08 00 00 00	 mov	 ecx, 8
  013f9	d1 e1		 shl	 ecx, 1
  013fb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  01403	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0
$LN32@R_CreateCo:

; 884  : 			deltas[i][2] = (map[i][2] - cdestb) / (double)fadedist;

  0140c	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01410	b9 08 00 00 00	 mov	 ecx, 8
  01415	d1 e1		 shl	 ecx, 1
  01417	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  01420	f2 0f 5c 45 d0	 subsd	 xmm0, QWORD PTR _cdestb$[ebp]
  01425	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _fadedist$[ebp]
  0142b	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv1579[ebp], edx
  01431	f2 0f 2a 8d 24
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv1579[ebp]
  01439	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv1579[ebp]
  0143f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01442	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0144b	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0144f	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  01453	ba 08 00 00 00	 mov	 edx, 8
  01458	d1 e2		 shl	 edx, 1
  0145a	f2 0f 11 84 11
	00 00 00 00	 movsd	 QWORD PTR _deltas[ecx+edx], xmm0

; 885  : 		}

  01463	e9 27 fd ff ff	 jmp	 $LN5@R_CreateCo
$LN6@R_CreateCo:

; 886  : 	}
; 887  : 
; 888  : 	foundcolormaps[mapnum] = LUMPERROR;

  01468	8b 45 90	 mov	 eax, DWORD PTR _mapnum$[ebp]
  0146b	c7 04 85 00 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR _foundcolormaps[eax*4], -1

; 889  : 
; 890  : 	// aligned on 8 bit for asm code
; 891  : 	extra_colormaps[mapnum].colormap = NULL;

  01476	6b 45 90 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  0147a	c7 80 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR _extra_colormaps[eax+32], 0

; 892  : 	extra_colormaps[mapnum].maskcolor = (UINT16)maskcolor;

  01484	6b 45 90 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  01488	66 8b 8d 78 ff
	ff ff		 mov	 cx, WORD PTR _maskcolor$[ebp]
  0148f	66 89 88 00 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax], cx

; 893  : 	extra_colormaps[mapnum].fadecolor = (UINT16)fadecolor;

  01496	6b 45 90 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  0149a	66 8b 8d 74 ff
	ff ff		 mov	 cx, WORD PTR _fadecolor$[ebp]
  014a1	66 89 88 02 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+2], cx

; 894  : 	extra_colormaps[mapnum].maskamt = maskamt;

  014a8	6b 45 90 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  014ac	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _maskamt$[ebp]
  014b1	f2 0f 11 80 08
	00 00 00	 movsd	 QWORD PTR _extra_colormaps[eax+8], xmm0

; 895  : 	extra_colormaps[mapnum].fadestart = (UINT16)fadestart;

  014b9	6b 45 90 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  014bd	66 8b 8d 70 ff
	ff ff		 mov	 cx, WORD PTR _fadestart$[ebp]
  014c4	66 89 88 10 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+16], cx

; 896  : 	extra_colormaps[mapnum].fadeend = (UINT16)fadeend;

  014cb	6b 45 90 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  014cf	66 8b 8d 6c ff
	ff ff		 mov	 cx, WORD PTR _fadeend$[ebp]
  014d6	66 89 88 12 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+18], cx

; 897  : 	extra_colormaps[mapnum].fog = fog;

  014dd	6b 45 90 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  014e1	8b 4d 94	 mov	 ecx, DWORD PTR _fog$[ebp]
  014e4	89 88 14 00 00
	00		 mov	 DWORD PTR _extra_colormaps[eax+20], ecx

; 898  : 
; 899  : #define ABS2(x) ((x) < 0 ? -(x) : (x))
; 900  : 	if (rendermode == render_soft)

  014ea	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  014f1	0f 85 a6 04 00
	00		 jne	 $LN9@R_CreateCo

; 901  : 	{
; 902  : 		colormap_p = Z_MallocAlign((256 * 34) + 10, PU_LEVEL, NULL, 16);

  014f7	6a 10		 push	 16			; 00000010H
  014f9	6a 00		 push	 0
  014fb	6a 32		 push	 50			; 00000032H
  014fd	68 0a 22 00 00	 push	 8714			; 0000220aH
  01502	e8 00 00 00 00	 call	 _Z_MallocAlign
  01507	83 c4 10	 add	 esp, 16			; 00000010H
  0150a	89 45 88	 mov	 DWORD PTR _colormap_p$[ebp], eax

; 903  : 		extra_colormaps[mapnum].colormap = (UINT8 *)colormap_p;

  0150d	6b 45 90 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  01511	8b 4d 88	 mov	 ecx, DWORD PTR _colormap_p$[ebp]
  01514	89 88 20 00 00
	00		 mov	 DWORD PTR _extra_colormaps[eax+32], ecx

; 904  : 
; 905  : 		for (p = 0; p < 34; p++)

  0151a	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0
  01521	eb 09		 jmp	 SHORT $LN10@R_CreateCo
$LN8@R_CreateCo:
  01523	8b 45 98	 mov	 eax, DWORD PTR _p$[ebp]
  01526	83 c0 01	 add	 eax, 1
  01529	89 45 98	 mov	 DWORD PTR _p$[ebp], eax
$LN10@R_CreateCo:
  0152c	83 7d 98 22	 cmp	 DWORD PTR _p$[ebp], 34	; 00000022H
  01530	0f 8d 67 04 00
	00		 jge	 $LN9@R_CreateCo

; 906  : 		{
; 907  : 			for (i = 0; i < 256; i++)

  01536	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0153d	eb 09		 jmp	 SHORT $LN13@R_CreateCo
$LN11@R_CreateCo:
  0153f	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  01542	83 c0 01	 add	 eax, 1
  01545	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax
$LN13@R_CreateCo:
  01548	81 7d 8c 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0154f	0f 83 43 04 00
	00		 jae	 $LN12@R_CreateCo

; 908  : 			{
; 909  : 				*colormap_p = NearestColor((UINT8)RoundUp(map[i][0]),

  01555	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01559	b9 08 00 00 00	 mov	 ecx, 8
  0155e	d1 e1		 shl	 ecx, 1
  01560	83 ec 08	 sub	 esp, 8
  01563	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  0156c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01571	e8 00 00 00 00	 call	 _RoundUp
  01576	83 c4 08	 add	 esp, 8
  01579	50		 push	 eax
  0157a	6b 55 8c 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  0157e	b8 08 00 00 00	 mov	 eax, 8
  01583	c1 e0 00	 shl	 eax, 0
  01586	83 ec 08	 sub	 esp, 8
  01589	f2 0f 10 84 02
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[edx+eax]
  01592	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01597	e8 00 00 00 00	 call	 _RoundUp
  0159c	83 c4 08	 add	 esp, 8
  0159f	50		 push	 eax
  015a0	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  015a4	ba 08 00 00 00	 mov	 edx, 8
  015a9	6b c2 00	 imul	 eax, edx, 0
  015ac	83 ec 08	 sub	 esp, 8
  015af	f2 0f 10 84 01
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[ecx+eax]
  015b8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  015bd	e8 00 00 00 00	 call	 _RoundUp
  015c2	83 c4 08	 add	 esp, 8
  015c5	50		 push	 eax
  015c6	e8 00 00 00 00	 call	 _NearestColor
  015cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  015ce	8b 4d 88	 mov	 ecx, DWORD PTR _colormap_p$[ebp]
  015d1	88 01		 mov	 BYTE PTR [ecx], al

; 910  : 					(UINT8)RoundUp(map[i][1]),
; 911  : 					(UINT8)RoundUp(map[i][2]));
; 912  : 				colormap_p++;

  015d3	8b 45 88	 mov	 eax, DWORD PTR _colormap_p$[ebp]
  015d6	83 c0 01	 add	 eax, 1
  015d9	89 45 88	 mov	 DWORD PTR _colormap_p$[ebp], eax

; 913  : 
; 914  : 				if ((UINT32)p < fadestart)

  015dc	8b 45 98	 mov	 eax, DWORD PTR _p$[ebp]
  015df	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _fadestart$[ebp]
  015e5	73 05		 jae	 SHORT $LN34@R_CreateCo

; 915  : 					continue;

  015e7	e9 53 ff ff ff	 jmp	 $LN11@R_CreateCo
$LN34@R_CreateCo:

; 916  : 
; 917  : 				if (ABS2(map[i][0] - cdestr) > ABS2(deltas[i][0]))

  015ec	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  015f0	b9 08 00 00 00	 mov	 ecx, 8
  015f5	6b d1 00	 imul	 edx, ecx, 0
  015f8	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+edx]
  01601	f2 0f 5c 45 e0	 subsd	 xmm0, QWORD PTR _cdestr$[ebp]
  01606	0f 57 c9	 xorps	 xmm1, xmm1
  01609	66 0f 2f c8	 comisd	 xmm1, xmm0
  0160d	76 2b		 jbe	 SHORT $LN126@R_CreateCo
  0160f	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01613	b9 08 00 00 00	 mov	 ecx, 8
  01618	6b d1 00	 imul	 edx, ecx, 0
  0161b	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+edx]
  01624	f2 0f 5c 45 e0	 subsd	 xmm0, QWORD PTR _cdestr$[ebp]
  01629	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  01630	f2 0f 11 85 20
	ff ff ff	 movsd	 QWORD PTR tv1012[ebp], xmm0
  01638	eb 22		 jmp	 SHORT $LN127@R_CreateCo
$LN126@R_CreateCo:
  0163a	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0163e	b9 08 00 00 00	 mov	 ecx, 8
  01643	6b d1 00	 imul	 edx, ecx, 0
  01646	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+edx]
  0164f	f2 0f 5c 45 e0	 subsd	 xmm0, QWORD PTR _cdestr$[ebp]
  01654	f2 0f 11 85 20
	ff ff ff	 movsd	 QWORD PTR tv1012[ebp], xmm0
$LN127@R_CreateCo:
  0165c	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01660	b9 08 00 00 00	 mov	 ecx, 8
  01665	6b d1 00	 imul	 edx, ecx, 0
  01668	0f 57 c0	 xorps	 xmm0, xmm0
  0166b	66 0f 2f 84 10
	00 00 00 00	 comisd	 xmm0, QWORD PTR _deltas[eax+edx]
  01674	76 26		 jbe	 SHORT $LN128@R_CreateCo
  01676	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0167a	b9 08 00 00 00	 mov	 ecx, 8
  0167f	6b d1 00	 imul	 edx, ecx, 0
  01682	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _deltas[eax+edx]
  0168b	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  01692	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv1030[ebp], xmm0
  0169a	eb 1d		 jmp	 SHORT $LN129@R_CreateCo
$LN128@R_CreateCo:
  0169c	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  016a0	b9 08 00 00 00	 mov	 ecx, 8
  016a5	6b d1 00	 imul	 edx, ecx, 0
  016a8	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _deltas[eax+edx]
  016b1	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv1030[ebp], xmm0
$LN129@R_CreateCo:
  016b9	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1012[ebp]
  016c1	66 0f 2f 85 18
	ff ff ff	 comisd	 xmm0, QWORD PTR tv1030[ebp]
  016c9	76 41		 jbe	 SHORT $LN35@R_CreateCo

; 918  : 					map[i][0] -= deltas[i][0];

  016cb	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  016cf	b9 08 00 00 00	 mov	 ecx, 8
  016d4	6b d1 00	 imul	 edx, ecx, 0
  016d7	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  016db	be 08 00 00 00	 mov	 esi, 8
  016e0	6b f6 00	 imul	 esi, esi, 0
  016e3	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+edx]
  016ec	f2 0f 5c 84 31
	00 00 00 00	 subsd	 xmm0, QWORD PTR _deltas[ecx+esi]
  016f5	ba 08 00 00 00	 mov	 edx, 8
  016fa	6b c2 00	 imul	 eax, edx, 0
  016fd	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  01701	f2 0f 11 84 01
	00 00 00 00	 movsd	 QWORD PTR _map[ecx+eax], xmm0
  0170a	eb 1a		 jmp	 SHORT $LN36@R_CreateCo
$LN35@R_CreateCo:

; 919  : 				else
; 920  : 					map[i][0] = cdestr;

  0170c	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01710	b9 08 00 00 00	 mov	 ecx, 8
  01715	6b d1 00	 imul	 edx, ecx, 0
  01718	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _cdestr$[ebp]
  0171d	f2 0f 11 84 10
	00 00 00 00	 movsd	 QWORD PTR _map[eax+edx], xmm0
$LN36@R_CreateCo:

; 921  : 
; 922  : 				if (ABS2(map[i][1] - cdestg) > ABS2(deltas[i][1]))

  01726	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0172a	b9 08 00 00 00	 mov	 ecx, 8
  0172f	c1 e1 00	 shl	 ecx, 0
  01732	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  0173b	f2 0f 5c 45 d8	 subsd	 xmm0, QWORD PTR _cdestg$[ebp]
  01740	0f 57 c9	 xorps	 xmm1, xmm1
  01743	66 0f 2f c8	 comisd	 xmm1, xmm0
  01747	76 2b		 jbe	 SHORT $LN130@R_CreateCo
  01749	6b 55 8c 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  0174d	b8 08 00 00 00	 mov	 eax, 8
  01752	c1 e0 00	 shl	 eax, 0
  01755	f2 0f 10 84 02
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[edx+eax]
  0175e	f2 0f 5c 45 d8	 subsd	 xmm0, QWORD PTR _cdestg$[ebp]
  01763	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0176a	f2 0f 11 85 20
	ff ff ff	 movsd	 QWORD PTR tv1069[ebp], xmm0
  01772	eb 22		 jmp	 SHORT $LN131@R_CreateCo
$LN130@R_CreateCo:
  01774	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  01778	ba 08 00 00 00	 mov	 edx, 8
  0177d	c1 e2 00	 shl	 edx, 0
  01780	f2 0f 10 84 11
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[ecx+edx]
  01789	f2 0f 5c 45 d8	 subsd	 xmm0, QWORD PTR _cdestg$[ebp]
  0178e	f2 0f 11 85 20
	ff ff ff	 movsd	 QWORD PTR tv1069[ebp], xmm0
$LN131@R_CreateCo:
  01796	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0179a	b9 08 00 00 00	 mov	 ecx, 8
  0179f	c1 e1 00	 shl	 ecx, 0
  017a2	0f 57 c0	 xorps	 xmm0, xmm0
  017a5	66 0f 2f 84 08
	00 00 00 00	 comisd	 xmm0, QWORD PTR _deltas[eax+ecx]
  017ae	76 26		 jbe	 SHORT $LN132@R_CreateCo
  017b0	6b 55 8c 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  017b4	b8 08 00 00 00	 mov	 eax, 8
  017b9	c1 e0 00	 shl	 eax, 0
  017bc	f2 0f 10 84 02
	00 00 00 00	 movsd	 xmm0, QWORD PTR _deltas[edx+eax]
  017c5	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  017cc	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv1087[ebp], xmm0
  017d4	eb 1d		 jmp	 SHORT $LN133@R_CreateCo
$LN132@R_CreateCo:
  017d6	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  017da	ba 08 00 00 00	 mov	 edx, 8
  017df	c1 e2 00	 shl	 edx, 0
  017e2	f2 0f 10 84 11
	00 00 00 00	 movsd	 xmm0, QWORD PTR _deltas[ecx+edx]
  017eb	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv1087[ebp], xmm0
$LN133@R_CreateCo:
  017f3	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1069[ebp]
  017fb	66 0f 2f 85 18
	ff ff ff	 comisd	 xmm0, QWORD PTR tv1087[ebp]
  01803	76 41		 jbe	 SHORT $LN37@R_CreateCo

; 923  : 					map[i][1] -= deltas[i][1];

  01805	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01809	b9 08 00 00 00	 mov	 ecx, 8
  0180e	c1 e1 00	 shl	 ecx, 0
  01811	6b 55 8c 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  01815	be 08 00 00 00	 mov	 esi, 8
  0181a	c1 e6 00	 shl	 esi, 0
  0181d	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  01826	f2 0f 5c 84 32
	00 00 00 00	 subsd	 xmm0, QWORD PTR _deltas[edx+esi]
  0182f	b8 08 00 00 00	 mov	 eax, 8
  01834	c1 e0 00	 shl	 eax, 0
  01837	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  0183b	f2 0f 11 84 01
	00 00 00 00	 movsd	 QWORD PTR _map[ecx+eax], xmm0
  01844	eb 1a		 jmp	 SHORT $LN38@R_CreateCo
$LN37@R_CreateCo:

; 924  : 				else
; 925  : 					map[i][1] = cdestg;

  01846	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0184a	b9 08 00 00 00	 mov	 ecx, 8
  0184f	c1 e1 00	 shl	 ecx, 0
  01852	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR _cdestg$[ebp]
  01857	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0
$LN38@R_CreateCo:

; 926  : 
; 927  : 				if (ABS2(map[i][2] - cdestb) > ABS2(deltas[i][1]))

  01860	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01864	b9 08 00 00 00	 mov	 ecx, 8
  01869	d1 e1		 shl	 ecx, 1
  0186b	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  01874	f2 0f 5c 45 d0	 subsd	 xmm0, QWORD PTR _cdestb$[ebp]
  01879	0f 57 c9	 xorps	 xmm1, xmm1
  0187c	66 0f 2f c8	 comisd	 xmm1, xmm0
  01880	76 2a		 jbe	 SHORT $LN134@R_CreateCo
  01882	6b 55 8c 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  01886	b8 08 00 00 00	 mov	 eax, 8
  0188b	d1 e0		 shl	 eax, 1
  0188d	f2 0f 10 84 02
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[edx+eax]
  01896	f2 0f 5c 45 d0	 subsd	 xmm0, QWORD PTR _cdestb$[ebp]
  0189b	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  018a2	f2 0f 11 85 20
	ff ff ff	 movsd	 QWORD PTR tv1126[ebp], xmm0
  018aa	eb 21		 jmp	 SHORT $LN135@R_CreateCo
$LN134@R_CreateCo:
  018ac	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  018b0	ba 08 00 00 00	 mov	 edx, 8
  018b5	d1 e2		 shl	 edx, 1
  018b7	f2 0f 10 84 11
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[ecx+edx]
  018c0	f2 0f 5c 45 d0	 subsd	 xmm0, QWORD PTR _cdestb$[ebp]
  018c5	f2 0f 11 85 20
	ff ff ff	 movsd	 QWORD PTR tv1126[ebp], xmm0
$LN135@R_CreateCo:
  018cd	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  018d1	b9 08 00 00 00	 mov	 ecx, 8
  018d6	c1 e1 00	 shl	 ecx, 0
  018d9	0f 57 c0	 xorps	 xmm0, xmm0
  018dc	66 0f 2f 84 08
	00 00 00 00	 comisd	 xmm0, QWORD PTR _deltas[eax+ecx]
  018e5	76 26		 jbe	 SHORT $LN136@R_CreateCo
  018e7	6b 55 8c 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  018eb	b8 08 00 00 00	 mov	 eax, 8
  018f0	c1 e0 00	 shl	 eax, 0
  018f3	f2 0f 10 84 02
	00 00 00 00	 movsd	 xmm0, QWORD PTR _deltas[edx+eax]
  018fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  01903	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv1144[ebp], xmm0
  0190b	eb 1d		 jmp	 SHORT $LN137@R_CreateCo
$LN136@R_CreateCo:
  0190d	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  01911	ba 08 00 00 00	 mov	 edx, 8
  01916	c1 e2 00	 shl	 edx, 0
  01919	f2 0f 10 84 11
	00 00 00 00	 movsd	 xmm0, QWORD PTR _deltas[ecx+edx]
  01922	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv1144[ebp], xmm0
$LN137@R_CreateCo:
  0192a	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1126[ebp]
  01932	66 0f 2f 85 18
	ff ff ff	 comisd	 xmm0, QWORD PTR tv1144[ebp]
  0193a	76 3e		 jbe	 SHORT $LN39@R_CreateCo

; 928  : 					map[i][2] -= deltas[i][2];

  0193c	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01940	b9 08 00 00 00	 mov	 ecx, 8
  01945	d1 e1		 shl	 ecx, 1
  01947	6b 55 8c 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  0194b	be 08 00 00 00	 mov	 esi, 8
  01950	d1 e6		 shl	 esi, 1
  01952	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  0195b	f2 0f 5c 84 32
	00 00 00 00	 subsd	 xmm0, QWORD PTR _deltas[edx+esi]
  01964	b8 08 00 00 00	 mov	 eax, 8
  01969	d1 e0		 shl	 eax, 1
  0196b	6b 4d 8c 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  0196f	f2 0f 11 84 01
	00 00 00 00	 movsd	 QWORD PTR _map[ecx+eax], xmm0
  01978	eb 19		 jmp	 SHORT $LN40@R_CreateCo
$LN39@R_CreateCo:

; 929  : 				else
; 930  : 					map[i][2] = cdestb;

  0197a	6b 45 8c 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0197e	b9 08 00 00 00	 mov	 ecx, 8
  01983	d1 e1		 shl	 ecx, 1
  01985	f2 0f 10 45 d0	 movsd	 xmm0, QWORD PTR _cdestb$[ebp]
  0198a	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0
$LN40@R_CreateCo:

; 931  : 			}

  01993	e9 a7 fb ff ff	 jmp	 $LN11@R_CreateCo
$LN12@R_CreateCo:

; 932  : 		}

  01998	e9 86 fb ff ff	 jmp	 $LN8@R_CreateCo
$LN9@R_CreateCo:
$LN1@R_CreateCo:

; 933  : 	}
; 934  : #undef ABS2
; 935  : 
; 936  : 	return;
; 937  : }

  0199d	5f		 pop	 edi
  0199e	5e		 pop	 esi
  0199f	5b		 pop	 ebx
  019a0	8b e5		 mov	 esp, ebp
  019a2	5d		 pop	 ebp
  019a3	c3		 ret	 0
_R_CreateColormap2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_CreateColormap
_TEXT	SEGMENT
tv1309 = -236						; size = 4
tv1263 = -236						; size = 4
tv1217 = -236						; size = 4
tv265 = -232						; size = 4
tv557 = -232						; size = 4
tv727 = -232						; size = 4
tv180 = -232						; size = 4
tv642 = -232						; size = 4
tv350 = -232						; size = 4
tv728 = -228						; size = 4
tv181 = -228						; size = 4
tv266 = -228						; size = 4
tv558 = -228						; size = 4
tv643 = -228						; size = 4
tv351 = -228						; size = 4
tv729 = -224						; size = 4
tv644 = -224						; size = 4
tv559 = -224						; size = 4
tv267 = -224						; size = 4
tv352 = -224						; size = 4
tv182 = -224						; size = 4
tv515 = -220						; size = 4
tv600 = -220						; size = 4
tv138 = -220						; size = 4
tv308 = -220						; size = 4
tv685 = -220						; size = 4
tv223 = -220						; size = 4
tv451 = -216						; size = 4
tv423 = -216						; size = 4
tv601 = -216						; size = 4
tv309 = -216						; size = 4
tv139 = -216						; size = 4
tv686 = -216						; size = 4
tv472 = -216						; size = 4
tv224 = -216						; size = 4
tv516 = -216						; size = 4
tv1390 = -212						; size = 4
tv140 = -212						; size = 4
tv225 = -212						; size = 4
tv1019 = -212						; size = 4
tv310 = -212						; size = 4
tv410 = -212						; size = 4
tv438 = -212						; size = 4
tv470 = -212						; size = 4
tv517 = -212						; size = 4
tv602 = -212						; size = 4
tv687 = -212						; size = 4
tv1065 = -212						; size = 4
tv1111 = -212						; size = 4
tv1317 = -212						; size = 4
tv1360 = -212						; size = 4
tv1375 = -212						; size = 4
_fadedist$ = -144					; size = 4
_fadeend$ = -140					; size = 4
_fadestart$ = -136					; size = 4
_fadecolor$ = -132					; size = 4
_maskcolor$ = -128					; size = 4
_cb$ = -124						; size = 4
_cg$ = -120						; size = 4
_cr$ = -116						; size = 4
_i$ = -112						; size = 4
_mapnum$ = -108						; size = 4
_fog$ = -104						; size = 4
_mask$ = -100						; size = 4
_othermask$ = -96					; size = 8
_maskamt$ = -88						; size = 8
_cbrightness$ = -80					; size = 8
_b$ = -72						; size = 8
_g$ = -64						; size = 8
_r$ = -56						; size = 8
_cdestb$ = -48						; size = 8
_cdestg$ = -40						; size = 8
_cdestr$ = -32						; size = 8
_cmaskb$ = -24						; size = 8
_cmaskg$ = -16						; size = 8
_cmaskr$ = -8						; size = 8
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_p3$ = 16						; size = 4
_R_CreateColormap PROC					; COMDAT

; 627  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 628  : 	double cmaskr, cmaskg, cmaskb, cdestr, cdestg, cdestb;
; 629  : 	double r, g, b, cbrightness, maskamt = 0, othermask = 0;

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f2 0f 11 45 a8	 movsd	 QWORD PTR _maskamt$[ebp], xmm0
  00014	0f 57 c0	 xorps	 xmm0, xmm0
  00017	f2 0f 11 45 a0	 movsd	 QWORD PTR _othermask$[ebp], xmm0

; 630  : 	int mask, fog = 0;

  0001c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _fog$[ebp], 0

; 631  : 	size_t mapnum = num_extra_colormaps;

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_extra_colormaps
  00028	89 45 94	 mov	 DWORD PTR _mapnum$[ebp], eax

; 632  : 	size_t i;
; 633  : 	UINT32 cr, cg, cb, maskcolor, fadecolor;
; 634  : 	UINT32 fadestart = 0, fadeend = 33, fadedist = 33;

  0002b	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fadestart$[ebp], 0
  00035	c7 85 74 ff ff
	ff 21 00 00 00	 mov	 DWORD PTR _fadeend$[ebp], 33 ; 00000021H
  0003f	c7 85 70 ff ff
	ff 21 00 00 00	 mov	 DWORD PTR _fadedist$[ebp], 33 ; 00000021H

; 635  : 
; 636  : #define HEX2INT(x) (UINT32)(x >= '0' && x <= '9' ? x - '0' : x >= 'a' && x <= 'f' ? x - 'a' + 10 : x >= 'A' && x <= 'F' ? x - 'A' + 10 : 0)
; 637  : 	if (p1[0] == '#')

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00054	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00058	83 f8 23	 cmp	 eax, 35			; 00000023H
  0005b	0f 85 30 07 00
	00		 jne	 $LN8@R_CreateCo

; 638  : 	{
; 639  : 		cr = ((HEX2INT(p1[1]) * 16) + HEX2INT(p1[2]));

  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	c1 e0 00	 shl	 eax, 0
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0006c	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00070	83 fa 30	 cmp	 edx, 48			; 00000030H
  00073	7c 31		 jl	 SHORT $LN28@R_CreateCo
  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	c1 e0 00	 shl	 eax, 0
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00080	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00084	83 fa 39	 cmp	 edx, 57			; 00000039H
  00087	7f 1d		 jg	 SHORT $LN28@R_CreateCo
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	c1 e0 00	 shl	 eax, 0
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00094	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00098	83 ea 30	 sub	 edx, 48			; 00000030H
  0009b	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv140[ebp], edx
  000a1	e9 a6 00 00 00	 jmp	 $LN33@R_CreateCo
$LN28@R_CreateCo:
  000a6	b8 01 00 00 00	 mov	 eax, 1
  000ab	c1 e0 00	 shl	 eax, 0
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000b1	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  000b5	83 fa 61	 cmp	 edx, 97			; 00000061H
  000b8	7c 2e		 jl	 SHORT $LN29@R_CreateCo
  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	c1 e0 00	 shl	 eax, 0
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000c5	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  000c9	83 fa 66	 cmp	 edx, 102		; 00000066H
  000cc	7f 1a		 jg	 SHORT $LN29@R_CreateCo
  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	c1 e0 00	 shl	 eax, 0
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000d9	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  000dd	83 ea 57	 sub	 edx, 87			; 00000057H
  000e0	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv139[ebp], edx
  000e6	eb 58		 jmp	 SHORT $LN32@R_CreateCo
$LN29@R_CreateCo:
  000e8	b8 01 00 00 00	 mov	 eax, 1
  000ed	c1 e0 00	 shl	 eax, 0
  000f0	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000f3	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  000f7	83 fa 41	 cmp	 edx, 65			; 00000041H
  000fa	7c 2e		 jl	 SHORT $LN30@R_CreateCo
  000fc	b8 01 00 00 00	 mov	 eax, 1
  00101	c1 e0 00	 shl	 eax, 0
  00104	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00107	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0010b	83 fa 46	 cmp	 edx, 70			; 00000046H
  0010e	7f 1a		 jg	 SHORT $LN30@R_CreateCo
  00110	b8 01 00 00 00	 mov	 eax, 1
  00115	c1 e0 00	 shl	 eax, 0
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0011b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0011f	83 ea 37	 sub	 edx, 55			; 00000037H
  00122	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv138[ebp], edx
  00128	eb 0a		 jmp	 SHORT $LN31@R_CreateCo
$LN30@R_CreateCo:
  0012a	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN31@R_CreateCo:
  00134	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  0013a	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
$LN32@R_CreateCo:
  00140	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv139[ebp]
  00146	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv140[ebp], ecx
$LN33@R_CreateCo:
  0014c	ba 01 00 00 00	 mov	 edx, 1
  00151	d1 e2		 shl	 edx, 1
  00153	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00156	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0015a	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0015d	7c 2f		 jl	 SHORT $LN34@R_CreateCo
  0015f	ba 01 00 00 00	 mov	 edx, 1
  00164	d1 e2		 shl	 edx, 1
  00166	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00169	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0016d	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00170	7f 1c		 jg	 SHORT $LN34@R_CreateCo
  00172	ba 01 00 00 00	 mov	 edx, 1
  00177	d1 e2		 shl	 edx, 1
  00179	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0017c	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00180	83 e9 30	 sub	 ecx, 48			; 00000030H
  00183	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv182[ebp], ecx
  00189	e9 a0 00 00 00	 jmp	 $LN39@R_CreateCo
$LN34@R_CreateCo:
  0018e	ba 01 00 00 00	 mov	 edx, 1
  00193	d1 e2		 shl	 edx, 1
  00195	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00198	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0019c	83 f9 61	 cmp	 ecx, 97			; 00000061H
  0019f	7c 2c		 jl	 SHORT $LN35@R_CreateCo
  001a1	ba 01 00 00 00	 mov	 edx, 1
  001a6	d1 e2		 shl	 edx, 1
  001a8	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001ab	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  001af	83 f9 66	 cmp	 ecx, 102		; 00000066H
  001b2	7f 19		 jg	 SHORT $LN35@R_CreateCo
  001b4	ba 01 00 00 00	 mov	 edx, 1
  001b9	d1 e2		 shl	 edx, 1
  001bb	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001be	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  001c2	83 e9 57	 sub	 ecx, 87			; 00000057H
  001c5	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv181[ebp], ecx
  001cb	eb 55		 jmp	 SHORT $LN38@R_CreateCo
$LN35@R_CreateCo:
  001cd	ba 01 00 00 00	 mov	 edx, 1
  001d2	d1 e2		 shl	 edx, 1
  001d4	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001d7	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  001db	83 f9 41	 cmp	 ecx, 65			; 00000041H
  001de	7c 2c		 jl	 SHORT $LN36@R_CreateCo
  001e0	ba 01 00 00 00	 mov	 edx, 1
  001e5	d1 e2		 shl	 edx, 1
  001e7	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001ea	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  001ee	83 f9 46	 cmp	 ecx, 70			; 00000046H
  001f1	7f 19		 jg	 SHORT $LN36@R_CreateCo
  001f3	ba 01 00 00 00	 mov	 edx, 1
  001f8	d1 e2		 shl	 edx, 1
  001fa	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  001fd	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00201	83 e9 37	 sub	 ecx, 55			; 00000037H
  00204	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv180[ebp], ecx
  0020a	eb 0a		 jmp	 SHORT $LN37@R_CreateCo
$LN36@R_CreateCo:
  0020c	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv180[ebp], 0
$LN37@R_CreateCo:
  00216	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv180[ebp]
  0021c	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv181[ebp], edx
$LN38@R_CreateCo:
  00222	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv181[ebp]
  00228	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv182[ebp], eax
$LN39@R_CreateCo:
  0022e	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv140[ebp]
  00234	c1 e1 04	 shl	 ecx, 4
  00237	03 8d 20 ff ff
	ff		 add	 ecx, DWORD PTR tv182[ebp]
  0023d	89 4d 8c	 mov	 DWORD PTR _cr$[ebp], ecx

; 640  : 		cmaskr = cr;

  00240	8b 45 8c	 mov	 eax, DWORD PTR _cr$[ebp]
  00243	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv1019[ebp], eax
  00249	f2 0f 2a 85 2c
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1019[ebp]
  00251	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv1019[ebp]
  00257	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0025a	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00263	f2 0f 11 45 f8	 movsd	 QWORD PTR _cmaskr$[ebp], xmm0

; 641  : 		cg = ((HEX2INT(p1[3]) * 16) + HEX2INT(p1[4]));

  00268	b8 01 00 00 00	 mov	 eax, 1
  0026d	6b c8 03	 imul	 ecx, eax, 3
  00270	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00273	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00277	83 f8 30	 cmp	 eax, 48			; 00000030H
  0027a	7c 31		 jl	 SHORT $LN40@R_CreateCo
  0027c	b9 01 00 00 00	 mov	 ecx, 1
  00281	6b d1 03	 imul	 edx, ecx, 3
  00284	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00287	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0028b	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0028e	7f 1d		 jg	 SHORT $LN40@R_CreateCo
  00290	ba 01 00 00 00	 mov	 edx, 1
  00295	6b c2 03	 imul	 eax, edx, 3
  00298	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0029b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0029f	83 ea 30	 sub	 edx, 48			; 00000030H
  002a2	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv225[ebp], edx
  002a8	e9 a6 00 00 00	 jmp	 $LN45@R_CreateCo
$LN40@R_CreateCo:
  002ad	b8 01 00 00 00	 mov	 eax, 1
  002b2	6b c8 03	 imul	 ecx, eax, 3
  002b5	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  002b8	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  002bc	83 f8 61	 cmp	 eax, 97			; 00000061H
  002bf	7c 2e		 jl	 SHORT $LN41@R_CreateCo
  002c1	b9 01 00 00 00	 mov	 ecx, 1
  002c6	6b d1 03	 imul	 edx, ecx, 3
  002c9	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  002cc	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  002d0	83 f9 66	 cmp	 ecx, 102		; 00000066H
  002d3	7f 1a		 jg	 SHORT $LN41@R_CreateCo
  002d5	ba 01 00 00 00	 mov	 edx, 1
  002da	6b c2 03	 imul	 eax, edx, 3
  002dd	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  002e0	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  002e4	83 ea 57	 sub	 edx, 87			; 00000057H
  002e7	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv224[ebp], edx
  002ed	eb 58		 jmp	 SHORT $LN44@R_CreateCo
$LN41@R_CreateCo:
  002ef	b8 01 00 00 00	 mov	 eax, 1
  002f4	6b c8 03	 imul	 ecx, eax, 3
  002f7	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  002fa	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  002fe	83 f8 41	 cmp	 eax, 65			; 00000041H
  00301	7c 2e		 jl	 SHORT $LN42@R_CreateCo
  00303	b9 01 00 00 00	 mov	 ecx, 1
  00308	6b d1 03	 imul	 edx, ecx, 3
  0030b	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0030e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00312	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00315	7f 1a		 jg	 SHORT $LN42@R_CreateCo
  00317	ba 01 00 00 00	 mov	 edx, 1
  0031c	6b c2 03	 imul	 eax, edx, 3
  0031f	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00322	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00326	83 ea 37	 sub	 edx, 55			; 00000037H
  00329	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv223[ebp], edx
  0032f	eb 0a		 jmp	 SHORT $LN43@R_CreateCo
$LN42@R_CreateCo:
  00331	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv223[ebp], 0
$LN43@R_CreateCo:
  0033b	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv223[ebp]
  00341	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv224[ebp], eax
$LN44@R_CreateCo:
  00347	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv224[ebp]
  0034d	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv225[ebp], ecx
$LN45@R_CreateCo:
  00353	ba 01 00 00 00	 mov	 edx, 1
  00358	c1 e2 02	 shl	 edx, 2
  0035b	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0035e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00362	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00365	7c 31		 jl	 SHORT $LN46@R_CreateCo
  00367	ba 01 00 00 00	 mov	 edx, 1
  0036c	c1 e2 02	 shl	 edx, 2
  0036f	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00372	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00376	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00379	7f 1d		 jg	 SHORT $LN46@R_CreateCo
  0037b	ba 01 00 00 00	 mov	 edx, 1
  00380	c1 e2 02	 shl	 edx, 2
  00383	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00386	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0038a	83 e9 30	 sub	 ecx, 48			; 00000030H
  0038d	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv267[ebp], ecx
  00393	e9 a6 00 00 00	 jmp	 $LN51@R_CreateCo
$LN46@R_CreateCo:
  00398	ba 01 00 00 00	 mov	 edx, 1
  0039d	c1 e2 02	 shl	 edx, 2
  003a0	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003a3	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003a7	83 f9 61	 cmp	 ecx, 97			; 00000061H
  003aa	7c 2e		 jl	 SHORT $LN47@R_CreateCo
  003ac	ba 01 00 00 00	 mov	 edx, 1
  003b1	c1 e2 02	 shl	 edx, 2
  003b4	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003b7	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003bb	83 f9 66	 cmp	 ecx, 102		; 00000066H
  003be	7f 1a		 jg	 SHORT $LN47@R_CreateCo
  003c0	ba 01 00 00 00	 mov	 edx, 1
  003c5	c1 e2 02	 shl	 edx, 2
  003c8	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003cb	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003cf	83 e9 57	 sub	 ecx, 87			; 00000057H
  003d2	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv266[ebp], ecx
  003d8	eb 58		 jmp	 SHORT $LN50@R_CreateCo
$LN47@R_CreateCo:
  003da	ba 01 00 00 00	 mov	 edx, 1
  003df	c1 e2 02	 shl	 edx, 2
  003e2	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003e5	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003e9	83 f9 41	 cmp	 ecx, 65			; 00000041H
  003ec	7c 2e		 jl	 SHORT $LN48@R_CreateCo
  003ee	ba 01 00 00 00	 mov	 edx, 1
  003f3	c1 e2 02	 shl	 edx, 2
  003f6	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003f9	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  003fd	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00400	7f 1a		 jg	 SHORT $LN48@R_CreateCo
  00402	ba 01 00 00 00	 mov	 edx, 1
  00407	c1 e2 02	 shl	 edx, 2
  0040a	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0040d	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00411	83 e9 37	 sub	 ecx, 55			; 00000037H
  00414	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv265[ebp], ecx
  0041a	eb 0a		 jmp	 SHORT $LN49@R_CreateCo
$LN48@R_CreateCo:
  0041c	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv265[ebp], 0
$LN49@R_CreateCo:
  00426	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv265[ebp]
  0042c	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv266[ebp], edx
$LN50@R_CreateCo:
  00432	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv266[ebp]
  00438	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv267[ebp], eax
$LN51@R_CreateCo:
  0043e	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv225[ebp]
  00444	c1 e1 04	 shl	 ecx, 4
  00447	03 8d 20 ff ff
	ff		 add	 ecx, DWORD PTR tv267[ebp]
  0044d	89 4d 88	 mov	 DWORD PTR _cg$[ebp], ecx

; 642  : 		cmaskg = cg;

  00450	8b 45 88	 mov	 eax, DWORD PTR _cg$[ebp]
  00453	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv1065[ebp], eax
  00459	f2 0f 2a 85 2c
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1065[ebp]
  00461	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv1065[ebp]
  00467	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0046a	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00473	f2 0f 11 45 f0	 movsd	 QWORD PTR _cmaskg$[ebp], xmm0

; 643  : 		cb = ((HEX2INT(p1[5]) * 16) + HEX2INT(p1[6]));

  00478	b8 01 00 00 00	 mov	 eax, 1
  0047d	6b c8 05	 imul	 ecx, eax, 5
  00480	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00483	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00487	83 f8 30	 cmp	 eax, 48			; 00000030H
  0048a	7c 31		 jl	 SHORT $LN52@R_CreateCo
  0048c	b9 01 00 00 00	 mov	 ecx, 1
  00491	6b d1 05	 imul	 edx, ecx, 5
  00494	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00497	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0049b	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0049e	7f 1d		 jg	 SHORT $LN52@R_CreateCo
  004a0	ba 01 00 00 00	 mov	 edx, 1
  004a5	6b c2 05	 imul	 eax, edx, 5
  004a8	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  004ab	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  004af	83 ea 30	 sub	 edx, 48			; 00000030H
  004b2	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv310[ebp], edx
  004b8	e9 a6 00 00 00	 jmp	 $LN57@R_CreateCo
$LN52@R_CreateCo:
  004bd	b8 01 00 00 00	 mov	 eax, 1
  004c2	6b c8 05	 imul	 ecx, eax, 5
  004c5	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  004c8	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  004cc	83 f8 61	 cmp	 eax, 97			; 00000061H
  004cf	7c 2e		 jl	 SHORT $LN53@R_CreateCo
  004d1	b9 01 00 00 00	 mov	 ecx, 1
  004d6	6b d1 05	 imul	 edx, ecx, 5
  004d9	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  004dc	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  004e0	83 f9 66	 cmp	 ecx, 102		; 00000066H
  004e3	7f 1a		 jg	 SHORT $LN53@R_CreateCo
  004e5	ba 01 00 00 00	 mov	 edx, 1
  004ea	6b c2 05	 imul	 eax, edx, 5
  004ed	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  004f0	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  004f4	83 ea 57	 sub	 edx, 87			; 00000057H
  004f7	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv309[ebp], edx
  004fd	eb 58		 jmp	 SHORT $LN56@R_CreateCo
$LN53@R_CreateCo:
  004ff	b8 01 00 00 00	 mov	 eax, 1
  00504	6b c8 05	 imul	 ecx, eax, 5
  00507	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  0050a	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0050e	83 f8 41	 cmp	 eax, 65			; 00000041H
  00511	7c 2e		 jl	 SHORT $LN54@R_CreateCo
  00513	b9 01 00 00 00	 mov	 ecx, 1
  00518	6b d1 05	 imul	 edx, ecx, 5
  0051b	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0051e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00522	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00525	7f 1a		 jg	 SHORT $LN54@R_CreateCo
  00527	ba 01 00 00 00	 mov	 edx, 1
  0052c	6b c2 05	 imul	 eax, edx, 5
  0052f	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00532	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00536	83 ea 37	 sub	 edx, 55			; 00000037H
  00539	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv308[ebp], edx
  0053f	eb 0a		 jmp	 SHORT $LN55@R_CreateCo
$LN54@R_CreateCo:
  00541	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN55@R_CreateCo:
  0054b	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv308[ebp]
  00551	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv309[ebp], eax
$LN56@R_CreateCo:
  00557	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv309[ebp]
  0055d	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv310[ebp], ecx
$LN57@R_CreateCo:
  00563	ba 01 00 00 00	 mov	 edx, 1
  00568	6b c2 06	 imul	 eax, edx, 6
  0056b	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0056e	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00572	83 fa 30	 cmp	 edx, 48			; 00000030H
  00575	7c 31		 jl	 SHORT $LN58@R_CreateCo
  00577	b8 01 00 00 00	 mov	 eax, 1
  0057c	6b c8 06	 imul	 ecx, eax, 6
  0057f	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00582	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00586	83 f8 39	 cmp	 eax, 57			; 00000039H
  00589	7f 1d		 jg	 SHORT $LN58@R_CreateCo
  0058b	b9 01 00 00 00	 mov	 ecx, 1
  00590	6b d1 06	 imul	 edx, ecx, 6
  00593	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00596	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0059a	83 e9 30	 sub	 ecx, 48			; 00000030H
  0059d	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv352[ebp], ecx
  005a3	e9 a6 00 00 00	 jmp	 $LN63@R_CreateCo
$LN58@R_CreateCo:
  005a8	ba 01 00 00 00	 mov	 edx, 1
  005ad	6b c2 06	 imul	 eax, edx, 6
  005b0	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  005b3	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  005b7	83 fa 61	 cmp	 edx, 97			; 00000061H
  005ba	7c 2e		 jl	 SHORT $LN59@R_CreateCo
  005bc	b8 01 00 00 00	 mov	 eax, 1
  005c1	6b c8 06	 imul	 ecx, eax, 6
  005c4	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  005c7	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  005cb	83 f8 66	 cmp	 eax, 102		; 00000066H
  005ce	7f 1a		 jg	 SHORT $LN59@R_CreateCo
  005d0	b9 01 00 00 00	 mov	 ecx, 1
  005d5	6b d1 06	 imul	 edx, ecx, 6
  005d8	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  005db	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  005df	83 e9 57	 sub	 ecx, 87			; 00000057H
  005e2	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv351[ebp], ecx
  005e8	eb 58		 jmp	 SHORT $LN62@R_CreateCo
$LN59@R_CreateCo:
  005ea	ba 01 00 00 00	 mov	 edx, 1
  005ef	6b c2 06	 imul	 eax, edx, 6
  005f2	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  005f5	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  005f9	83 fa 41	 cmp	 edx, 65			; 00000041H
  005fc	7c 2e		 jl	 SHORT $LN60@R_CreateCo
  005fe	b8 01 00 00 00	 mov	 eax, 1
  00603	6b c8 06	 imul	 ecx, eax, 6
  00606	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00609	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0060d	83 f8 46	 cmp	 eax, 70			; 00000046H
  00610	7f 1a		 jg	 SHORT $LN60@R_CreateCo
  00612	b9 01 00 00 00	 mov	 ecx, 1
  00617	6b d1 06	 imul	 edx, ecx, 6
  0061a	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0061d	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00621	83 e9 37	 sub	 ecx, 55			; 00000037H
  00624	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv350[ebp], ecx
  0062a	eb 0a		 jmp	 SHORT $LN61@R_CreateCo
$LN60@R_CreateCo:
  0062c	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv350[ebp], 0
$LN61@R_CreateCo:
  00636	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv350[ebp]
  0063c	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv351[ebp], edx
$LN62@R_CreateCo:
  00642	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv351[ebp]
  00648	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv352[ebp], eax
$LN63@R_CreateCo:
  0064e	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv310[ebp]
  00654	c1 e1 04	 shl	 ecx, 4
  00657	03 8d 20 ff ff
	ff		 add	 ecx, DWORD PTR tv352[ebp]
  0065d	89 4d 84	 mov	 DWORD PTR _cb$[ebp], ecx

; 644  : 		cmaskb = cb;

  00660	8b 45 84	 mov	 eax, DWORD PTR _cb$[ebp]
  00663	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv1111[ebp], eax
  00669	f2 0f 2a 85 2c
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1111[ebp]
  00671	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv1111[ebp]
  00677	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0067a	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00683	f2 0f 11 45 e8	 movsd	 QWORD PTR _cmaskb$[ebp], xmm0

; 645  : 		// Create a rough approximation of the color (a 16 bit color)
; 646  : 		maskcolor = ((cb) >> 3) + (((cg) >> 2) << 5) + (((cr) >> 3) << 11);

  00688	8b 45 84	 mov	 eax, DWORD PTR _cb$[ebp]
  0068b	c1 e8 03	 shr	 eax, 3
  0068e	8b 4d 88	 mov	 ecx, DWORD PTR _cg$[ebp]
  00691	c1 e9 02	 shr	 ecx, 2
  00694	c1 e1 05	 shl	 ecx, 5
  00697	03 c1		 add	 eax, ecx
  00699	8b 55 8c	 mov	 edx, DWORD PTR _cr$[ebp]
  0069c	c1 ea 03	 shr	 edx, 3
  0069f	c1 e2 0b	 shl	 edx, 11			; 0000000bH
  006a2	03 c2		 add	 eax, edx
  006a4	89 45 80	 mov	 DWORD PTR _maskcolor$[ebp], eax

; 647  : 		if (p1[7] >= 'a' && p1[7] <= 'z')

  006a7	b8 01 00 00 00	 mov	 eax, 1
  006ac	6b c8 07	 imul	 ecx, eax, 7
  006af	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  006b2	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  006b6	83 f8 61	 cmp	 eax, 97			; 00000061H
  006b9	7c 2b		 jl	 SHORT $LN10@R_CreateCo
  006bb	b8 01 00 00 00	 mov	 eax, 1
  006c0	6b c8 07	 imul	 ecx, eax, 7
  006c3	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  006c6	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  006ca	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  006cd	7f 17		 jg	 SHORT $LN10@R_CreateCo

; 648  : 			mask = (p1[7] - 'a');

  006cf	b8 01 00 00 00	 mov	 eax, 1
  006d4	6b c8 07	 imul	 ecx, eax, 7
  006d7	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  006da	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  006de	83 e8 61	 sub	 eax, 97			; 00000061H
  006e1	89 45 9c	 mov	 DWORD PTR _mask$[ebp], eax
  006e4	eb 46		 jmp	 SHORT $LN13@R_CreateCo
$LN10@R_CreateCo:

; 649  : 		else if (p1[7] >= 'A' && p1[7] <= 'Z')

  006e6	b8 01 00 00 00	 mov	 eax, 1
  006eb	6b c8 07	 imul	 ecx, eax, 7
  006ee	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  006f1	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  006f5	83 f8 41	 cmp	 eax, 65			; 00000041H
  006f8	7c 2b		 jl	 SHORT $LN12@R_CreateCo
  006fa	b8 01 00 00 00	 mov	 eax, 1
  006ff	6b c8 07	 imul	 ecx, eax, 7
  00702	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00705	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00709	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0070c	7f 17		 jg	 SHORT $LN12@R_CreateCo

; 650  : 			mask = (p1[7] - 'A');

  0070e	b8 01 00 00 00	 mov	 eax, 1
  00713	6b c8 07	 imul	 ecx, eax, 7
  00716	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00719	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0071d	83 e8 41	 sub	 eax, 65			; 00000041H
  00720	89 45 9c	 mov	 DWORD PTR _mask$[ebp], eax
  00723	eb 07		 jmp	 SHORT $LN13@R_CreateCo
$LN12@R_CreateCo:

; 651  : 		else
; 652  : 			mask = 24;

  00725	c7 45 9c 18 00
	00 00		 mov	 DWORD PTR _mask$[ebp], 24 ; 00000018H
$LN13@R_CreateCo:

; 653  : 
; 654  : 		maskamt = (double)(mask/24.0l);

  0072c	f2 0f 2a 45 9c	 cvtsi2sd xmm0, DWORD PTR _mask$[ebp]
  00731	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4038000000000000
  00739	f2 0f 11 45 a8	 movsd	 QWORD PTR _maskamt$[ebp], xmm0

; 655  : 
; 656  : 		othermask = 1 - maskamt;

  0073e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00746	f2 0f 5c 45 a8	 subsd	 xmm0, QWORD PTR _maskamt$[ebp]
  0074b	f2 0f 11 45 a0	 movsd	 QWORD PTR _othermask$[ebp], xmm0

; 657  : 		maskamt /= 0xff;

  00750	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _maskamt$[ebp]
  00755	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  0075d	f2 0f 11 45 a8	 movsd	 QWORD PTR _maskamt$[ebp], xmm0

; 658  : 		cmaskr *= maskamt;

  00762	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _cmaskr$[ebp]
  00767	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _maskamt$[ebp]
  0076c	f2 0f 11 45 f8	 movsd	 QWORD PTR _cmaskr$[ebp], xmm0

; 659  : 		cmaskg *= maskamt;

  00771	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _cmaskg$[ebp]
  00776	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _maskamt$[ebp]
  0077b	f2 0f 11 45 f0	 movsd	 QWORD PTR _cmaskg$[ebp], xmm0

; 660  : 		cmaskb *= maskamt;

  00780	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _cmaskb$[ebp]
  00785	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _maskamt$[ebp]
  0078a	f2 0f 11 45 e8	 movsd	 QWORD PTR _cmaskb$[ebp], xmm0

; 661  : 	}

  0078f	eb 30		 jmp	 SHORT $LN9@R_CreateCo
$LN8@R_CreateCo:

; 662  : 	else
; 663  : 	{
; 664  : 		cmaskr = cmaskg = cmaskb = 0xff;

  00791	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  00799	f2 0f 11 45 e8	 movsd	 QWORD PTR _cmaskb$[ebp], xmm0
  0079e	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _cmaskb$[ebp]
  007a3	f2 0f 11 45 f0	 movsd	 QWORD PTR _cmaskg$[ebp], xmm0
  007a8	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _cmaskg$[ebp]
  007ad	f2 0f 11 45 f8	 movsd	 QWORD PTR _cmaskr$[ebp], xmm0

; 665  : 		maskamt = 0;

  007b2	0f 57 c0	 xorps	 xmm0, xmm0
  007b5	f2 0f 11 45 a8	 movsd	 QWORD PTR _maskamt$[ebp], xmm0

; 666  : 		maskcolor = ((0xff) >> 3) + (((0xff) >> 2) << 5) + (((0xff) >> 3) << 11);

  007ba	c7 45 80 ff ff
	00 00		 mov	 DWORD PTR _maskcolor$[ebp], 65535 ; 0000ffffH
$LN9@R_CreateCo:

; 667  : 	}
; 668  : 
; 669  : #define NUMFROMCHAR(c) (c >= '0' && c <= '9' ? c - '0' : 0)
; 670  : 	if (p2[0] == '#')

  007c1	b8 01 00 00 00	 mov	 eax, 1
  007c6	6b c8 00	 imul	 ecx, eax, 0
  007c9	8b 55 0c	 mov	 edx, DWORD PTR _p2$[ebp]
  007cc	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  007d0	83 f8 23	 cmp	 eax, 35			; 00000023H
  007d3	0f 85 08 02 00
	00		 jne	 $LN14@R_CreateCo

; 671  : 	{
; 672  : 		// Get parameters like fadestart, fadeend, and the fogflag
; 673  : 		fadestart = NUMFROMCHAR(p2[3]) + (NUMFROMCHAR(p2[2]) * 10);

  007d9	b8 01 00 00 00	 mov	 eax, 1
  007de	6b c8 03	 imul	 ecx, eax, 3
  007e1	8b 55 0c	 mov	 edx, DWORD PTR _p2$[ebp]
  007e4	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  007e8	83 f8 30	 cmp	 eax, 48			; 00000030H
  007eb	7c 2e		 jl	 SHORT $LN64@R_CreateCo
  007ed	b9 01 00 00 00	 mov	 ecx, 1
  007f2	6b d1 03	 imul	 edx, ecx, 3
  007f5	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  007f8	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  007fc	83 f9 39	 cmp	 ecx, 57			; 00000039H
  007ff	7f 1a		 jg	 SHORT $LN64@R_CreateCo
  00801	ba 01 00 00 00	 mov	 edx, 1
  00806	6b c2 03	 imul	 eax, edx, 3
  00809	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0080c	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00810	83 ea 30	 sub	 edx, 48			; 00000030H
  00813	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv410[ebp], edx
  00819	eb 0a		 jmp	 SHORT $LN65@R_CreateCo
$LN64@R_CreateCo:
  0081b	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv410[ebp], 0
$LN65@R_CreateCo:
  00825	b8 01 00 00 00	 mov	 eax, 1
  0082a	d1 e0		 shl	 eax, 1
  0082c	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0082f	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00833	83 fa 30	 cmp	 edx, 48			; 00000030H
  00836	7c 2c		 jl	 SHORT $LN66@R_CreateCo
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	d1 e0		 shl	 eax, 1
  0083f	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  00842	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00846	83 fa 39	 cmp	 edx, 57			; 00000039H
  00849	7f 19		 jg	 SHORT $LN66@R_CreateCo
  0084b	b8 01 00 00 00	 mov	 eax, 1
  00850	d1 e0		 shl	 eax, 1
  00852	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  00855	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00859	83 ea 30	 sub	 edx, 48			; 00000030H
  0085c	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv423[ebp], edx
  00862	eb 0a		 jmp	 SHORT $LN67@R_CreateCo
$LN66@R_CreateCo:
  00864	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv423[ebp], 0
$LN67@R_CreateCo:
  0086e	6b 85 28 ff ff
	ff 0a		 imul	 eax, DWORD PTR tv423[ebp], 10
  00875	03 85 2c ff ff
	ff		 add	 eax, DWORD PTR tv410[ebp]
  0087b	89 85 78 ff ff
	ff		 mov	 DWORD PTR _fadestart$[ebp], eax

; 674  : 		fadeend = NUMFROMCHAR(p2[5]) + (NUMFROMCHAR(p2[4]) * 10);

  00881	b8 01 00 00 00	 mov	 eax, 1
  00886	6b c8 05	 imul	 ecx, eax, 5
  00889	8b 55 0c	 mov	 edx, DWORD PTR _p2$[ebp]
  0088c	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00890	83 f8 30	 cmp	 eax, 48			; 00000030H
  00893	7c 2e		 jl	 SHORT $LN68@R_CreateCo
  00895	b9 01 00 00 00	 mov	 ecx, 1
  0089a	6b d1 05	 imul	 edx, ecx, 5
  0089d	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  008a0	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  008a4	83 f9 39	 cmp	 ecx, 57			; 00000039H
  008a7	7f 1a		 jg	 SHORT $LN68@R_CreateCo
  008a9	ba 01 00 00 00	 mov	 edx, 1
  008ae	6b c2 05	 imul	 eax, edx, 5
  008b1	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  008b4	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  008b8	83 ea 30	 sub	 edx, 48			; 00000030H
  008bb	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv438[ebp], edx
  008c1	eb 0a		 jmp	 SHORT $LN69@R_CreateCo
$LN68@R_CreateCo:
  008c3	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv438[ebp], 0
$LN69@R_CreateCo:
  008cd	b8 01 00 00 00	 mov	 eax, 1
  008d2	c1 e0 02	 shl	 eax, 2
  008d5	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  008d8	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  008dc	83 fa 30	 cmp	 edx, 48			; 00000030H
  008df	7c 2e		 jl	 SHORT $LN70@R_CreateCo
  008e1	b8 01 00 00 00	 mov	 eax, 1
  008e6	c1 e0 02	 shl	 eax, 2
  008e9	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  008ec	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  008f0	83 fa 39	 cmp	 edx, 57			; 00000039H
  008f3	7f 1a		 jg	 SHORT $LN70@R_CreateCo
  008f5	b8 01 00 00 00	 mov	 eax, 1
  008fa	c1 e0 02	 shl	 eax, 2
  008fd	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  00900	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00904	83 ea 30	 sub	 edx, 48			; 00000030H
  00907	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv451[ebp], edx
  0090d	eb 0a		 jmp	 SHORT $LN71@R_CreateCo
$LN70@R_CreateCo:
  0090f	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv451[ebp], 0
$LN71@R_CreateCo:
  00919	6b 85 28 ff ff
	ff 0a		 imul	 eax, DWORD PTR tv451[ebp], 10
  00920	03 85 2c ff ff
	ff		 add	 eax, DWORD PTR tv438[ebp]
  00926	89 85 74 ff ff
	ff		 mov	 DWORD PTR _fadeend$[ebp], eax

; 675  : 		if (fadestart > 32)

  0092c	83 bd 78 ff ff
	ff 20		 cmp	 DWORD PTR _fadestart$[ebp], 32 ; 00000020H
  00933	76 0a		 jbe	 SHORT $LN15@R_CreateCo

; 676  : 			fadestart = 0;

  00935	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fadestart$[ebp], 0
$LN15@R_CreateCo:

; 677  : 		if (fadeend > 33 || fadeend < 1)

  0093f	83 bd 74 ff ff
	ff 21		 cmp	 DWORD PTR _fadeend$[ebp], 33 ; 00000021H
  00946	77 09		 ja	 SHORT $LN17@R_CreateCo
  00948	83 bd 74 ff ff
	ff 01		 cmp	 DWORD PTR _fadeend$[ebp], 1
  0094f	73 0a		 jae	 SHORT $LN16@R_CreateCo
$LN17@R_CreateCo:

; 678  : 			fadeend = 33;

  00951	c7 85 74 ff ff
	ff 21 00 00 00	 mov	 DWORD PTR _fadeend$[ebp], 33 ; 00000021H
$LN16@R_CreateCo:

; 679  : 		fadedist = fadeend - fadestart;

  0095b	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _fadeend$[ebp]
  00961	2b 85 78 ff ff
	ff		 sub	 eax, DWORD PTR _fadestart$[ebp]
  00967	89 85 70 ff ff
	ff		 mov	 DWORD PTR _fadedist$[ebp], eax

; 680  : 		fog = NUMFROMCHAR(p2[1]) ? 1 : 0;

  0096d	b8 01 00 00 00	 mov	 eax, 1
  00972	c1 e0 00	 shl	 eax, 0
  00975	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  00978	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0097c	83 fa 30	 cmp	 edx, 48			; 00000030H
  0097f	7c 2e		 jl	 SHORT $LN72@R_CreateCo
  00981	b8 01 00 00 00	 mov	 eax, 1
  00986	c1 e0 00	 shl	 eax, 0
  00989	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0098c	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00990	83 fa 39	 cmp	 edx, 57			; 00000039H
  00993	7f 1a		 jg	 SHORT $LN72@R_CreateCo
  00995	b8 01 00 00 00	 mov	 eax, 1
  0099a	c1 e0 00	 shl	 eax, 0
  0099d	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  009a0	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  009a4	83 ea 30	 sub	 edx, 48			; 00000030H
  009a7	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv470[ebp], edx
  009ad	eb 0a		 jmp	 SHORT $LN73@R_CreateCo
$LN72@R_CreateCo:
  009af	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv470[ebp], 0
$LN73@R_CreateCo:
  009b9	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR tv470[ebp], 0
  009c0	74 0c		 je	 SHORT $LN74@R_CreateCo
  009c2	c7 85 28 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv472[ebp], 1
  009cc	eb 0a		 jmp	 SHORT $LN75@R_CreateCo
$LN74@R_CreateCo:
  009ce	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv472[ebp], 0
$LN75@R_CreateCo:
  009d8	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR tv472[ebp]
  009de	89 45 98	 mov	 DWORD PTR _fog$[ebp], eax
$LN14@R_CreateCo:

; 681  : 	}
; 682  : #undef getnum
; 683  : 
; 684  : 	if (p3[0] == '#')

  009e1	b8 01 00 00 00	 mov	 eax, 1
  009e6	6b c8 00	 imul	 ecx, eax, 0
  009e9	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  009ec	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  009f0	83 f8 23	 cmp	 eax, 35			; 00000023H
  009f3	0f 85 4b 06 00
	00		 jne	 $LN18@R_CreateCo

; 685  : 	{
; 686  : 		cdestr = cr = ((HEX2INT(p3[1]) * 16) + HEX2INT(p3[2]));

  009f9	b8 01 00 00 00	 mov	 eax, 1
  009fe	c1 e0 00	 shl	 eax, 0
  00a01	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a04	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a08	83 fa 30	 cmp	 edx, 48			; 00000030H
  00a0b	7c 31		 jl	 SHORT $LN76@R_CreateCo
  00a0d	b8 01 00 00 00	 mov	 eax, 1
  00a12	c1 e0 00	 shl	 eax, 0
  00a15	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a18	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a1c	83 fa 39	 cmp	 edx, 57			; 00000039H
  00a1f	7f 1d		 jg	 SHORT $LN76@R_CreateCo
  00a21	b8 01 00 00 00	 mov	 eax, 1
  00a26	c1 e0 00	 shl	 eax, 0
  00a29	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a2c	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a30	83 ea 30	 sub	 edx, 48			; 00000030H
  00a33	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv517[ebp], edx
  00a39	e9 a6 00 00 00	 jmp	 $LN81@R_CreateCo
$LN76@R_CreateCo:
  00a3e	b8 01 00 00 00	 mov	 eax, 1
  00a43	c1 e0 00	 shl	 eax, 0
  00a46	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a49	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a4d	83 fa 61	 cmp	 edx, 97			; 00000061H
  00a50	7c 2e		 jl	 SHORT $LN77@R_CreateCo
  00a52	b8 01 00 00 00	 mov	 eax, 1
  00a57	c1 e0 00	 shl	 eax, 0
  00a5a	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a5d	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a61	83 fa 66	 cmp	 edx, 102		; 00000066H
  00a64	7f 1a		 jg	 SHORT $LN77@R_CreateCo
  00a66	b8 01 00 00 00	 mov	 eax, 1
  00a6b	c1 e0 00	 shl	 eax, 0
  00a6e	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a71	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a75	83 ea 57	 sub	 edx, 87			; 00000057H
  00a78	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv516[ebp], edx
  00a7e	eb 58		 jmp	 SHORT $LN80@R_CreateCo
$LN77@R_CreateCo:
  00a80	b8 01 00 00 00	 mov	 eax, 1
  00a85	c1 e0 00	 shl	 eax, 0
  00a88	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a8b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00a8f	83 fa 41	 cmp	 edx, 65			; 00000041H
  00a92	7c 2e		 jl	 SHORT $LN78@R_CreateCo
  00a94	b8 01 00 00 00	 mov	 eax, 1
  00a99	c1 e0 00	 shl	 eax, 0
  00a9c	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00a9f	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00aa3	83 fa 46	 cmp	 edx, 70			; 00000046H
  00aa6	7f 1a		 jg	 SHORT $LN78@R_CreateCo
  00aa8	b8 01 00 00 00	 mov	 eax, 1
  00aad	c1 e0 00	 shl	 eax, 0
  00ab0	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00ab3	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00ab7	83 ea 37	 sub	 edx, 55			; 00000037H
  00aba	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv515[ebp], edx
  00ac0	eb 0a		 jmp	 SHORT $LN79@R_CreateCo
$LN78@R_CreateCo:
  00ac2	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv515[ebp], 0
$LN79@R_CreateCo:
  00acc	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv515[ebp]
  00ad2	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv516[ebp], eax
$LN80@R_CreateCo:
  00ad8	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv516[ebp]
  00ade	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv517[ebp], ecx
$LN81@R_CreateCo:
  00ae4	ba 01 00 00 00	 mov	 edx, 1
  00ae9	d1 e2		 shl	 edx, 1
  00aeb	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00aee	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00af2	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00af5	7c 2f		 jl	 SHORT $LN82@R_CreateCo
  00af7	ba 01 00 00 00	 mov	 edx, 1
  00afc	d1 e2		 shl	 edx, 1
  00afe	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b01	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b05	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00b08	7f 1c		 jg	 SHORT $LN82@R_CreateCo
  00b0a	ba 01 00 00 00	 mov	 edx, 1
  00b0f	d1 e2		 shl	 edx, 1
  00b11	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b14	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b18	83 e9 30	 sub	 ecx, 48			; 00000030H
  00b1b	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv559[ebp], ecx
  00b21	e9 a0 00 00 00	 jmp	 $LN87@R_CreateCo
$LN82@R_CreateCo:
  00b26	ba 01 00 00 00	 mov	 edx, 1
  00b2b	d1 e2		 shl	 edx, 1
  00b2d	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b30	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b34	83 f9 61	 cmp	 ecx, 97			; 00000061H
  00b37	7c 2c		 jl	 SHORT $LN83@R_CreateCo
  00b39	ba 01 00 00 00	 mov	 edx, 1
  00b3e	d1 e2		 shl	 edx, 1
  00b40	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b43	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b47	83 f9 66	 cmp	 ecx, 102		; 00000066H
  00b4a	7f 19		 jg	 SHORT $LN83@R_CreateCo
  00b4c	ba 01 00 00 00	 mov	 edx, 1
  00b51	d1 e2		 shl	 edx, 1
  00b53	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b56	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b5a	83 e9 57	 sub	 ecx, 87			; 00000057H
  00b5d	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv558[ebp], ecx
  00b63	eb 55		 jmp	 SHORT $LN86@R_CreateCo
$LN83@R_CreateCo:
  00b65	ba 01 00 00 00	 mov	 edx, 1
  00b6a	d1 e2		 shl	 edx, 1
  00b6c	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b6f	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b73	83 f9 41	 cmp	 ecx, 65			; 00000041H
  00b76	7c 2c		 jl	 SHORT $LN84@R_CreateCo
  00b78	ba 01 00 00 00	 mov	 edx, 1
  00b7d	d1 e2		 shl	 edx, 1
  00b7f	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b82	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b86	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00b89	7f 19		 jg	 SHORT $LN84@R_CreateCo
  00b8b	ba 01 00 00 00	 mov	 edx, 1
  00b90	d1 e2		 shl	 edx, 1
  00b92	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00b95	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00b99	83 e9 37	 sub	 ecx, 55			; 00000037H
  00b9c	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv557[ebp], ecx
  00ba2	eb 0a		 jmp	 SHORT $LN85@R_CreateCo
$LN84@R_CreateCo:
  00ba4	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv557[ebp], 0
$LN85@R_CreateCo:
  00bae	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv557[ebp]
  00bb4	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv558[ebp], edx
$LN86@R_CreateCo:
  00bba	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv558[ebp]
  00bc0	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv559[ebp], eax
$LN87@R_CreateCo:
  00bc6	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv517[ebp]
  00bcc	c1 e1 04	 shl	 ecx, 4
  00bcf	03 8d 20 ff ff
	ff		 add	 ecx, DWORD PTR tv559[ebp]
  00bd5	89 4d 8c	 mov	 DWORD PTR _cr$[ebp], ecx
  00bd8	8b 55 8c	 mov	 edx, DWORD PTR _cr$[ebp]
  00bdb	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv1217[ebp], edx
  00be1	f2 0f 2a 85 14
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1217[ebp]
  00be9	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv1217[ebp]
  00bef	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00bf2	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00bfb	f2 0f 11 45 e0	 movsd	 QWORD PTR _cdestr$[ebp], xmm0

; 687  : 		cdestg = cg = ((HEX2INT(p3[3]) * 16) + HEX2INT(p3[4]));

  00c00	b8 01 00 00 00	 mov	 eax, 1
  00c05	6b c8 03	 imul	 ecx, eax, 3
  00c08	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00c0b	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00c0f	83 f8 30	 cmp	 eax, 48			; 00000030H
  00c12	7c 31		 jl	 SHORT $LN88@R_CreateCo
  00c14	b9 01 00 00 00	 mov	 ecx, 1
  00c19	6b d1 03	 imul	 edx, ecx, 3
  00c1c	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00c1f	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00c23	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00c26	7f 1d		 jg	 SHORT $LN88@R_CreateCo
  00c28	ba 01 00 00 00	 mov	 edx, 1
  00c2d	6b c2 03	 imul	 eax, edx, 3
  00c30	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00c33	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00c37	83 ea 30	 sub	 edx, 48			; 00000030H
  00c3a	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv602[ebp], edx
  00c40	e9 a6 00 00 00	 jmp	 $LN93@R_CreateCo
$LN88@R_CreateCo:
  00c45	b8 01 00 00 00	 mov	 eax, 1
  00c4a	6b c8 03	 imul	 ecx, eax, 3
  00c4d	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00c50	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00c54	83 f8 61	 cmp	 eax, 97			; 00000061H
  00c57	7c 2e		 jl	 SHORT $LN89@R_CreateCo
  00c59	b9 01 00 00 00	 mov	 ecx, 1
  00c5e	6b d1 03	 imul	 edx, ecx, 3
  00c61	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00c64	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00c68	83 f9 66	 cmp	 ecx, 102		; 00000066H
  00c6b	7f 1a		 jg	 SHORT $LN89@R_CreateCo
  00c6d	ba 01 00 00 00	 mov	 edx, 1
  00c72	6b c2 03	 imul	 eax, edx, 3
  00c75	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00c78	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00c7c	83 ea 57	 sub	 edx, 87			; 00000057H
  00c7f	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv601[ebp], edx
  00c85	eb 58		 jmp	 SHORT $LN92@R_CreateCo
$LN89@R_CreateCo:
  00c87	b8 01 00 00 00	 mov	 eax, 1
  00c8c	6b c8 03	 imul	 ecx, eax, 3
  00c8f	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00c92	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00c96	83 f8 41	 cmp	 eax, 65			; 00000041H
  00c99	7c 2e		 jl	 SHORT $LN90@R_CreateCo
  00c9b	b9 01 00 00 00	 mov	 ecx, 1
  00ca0	6b d1 03	 imul	 edx, ecx, 3
  00ca3	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00ca6	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00caa	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00cad	7f 1a		 jg	 SHORT $LN90@R_CreateCo
  00caf	ba 01 00 00 00	 mov	 edx, 1
  00cb4	6b c2 03	 imul	 eax, edx, 3
  00cb7	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00cba	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00cbe	83 ea 37	 sub	 edx, 55			; 00000037H
  00cc1	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv600[ebp], edx
  00cc7	eb 0a		 jmp	 SHORT $LN91@R_CreateCo
$LN90@R_CreateCo:
  00cc9	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv600[ebp], 0
$LN91@R_CreateCo:
  00cd3	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv600[ebp]
  00cd9	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv601[ebp], eax
$LN92@R_CreateCo:
  00cdf	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv601[ebp]
  00ce5	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv602[ebp], ecx
$LN93@R_CreateCo:
  00ceb	ba 01 00 00 00	 mov	 edx, 1
  00cf0	c1 e2 02	 shl	 edx, 2
  00cf3	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00cf6	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00cfa	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00cfd	7c 31		 jl	 SHORT $LN94@R_CreateCo
  00cff	ba 01 00 00 00	 mov	 edx, 1
  00d04	c1 e2 02	 shl	 edx, 2
  00d07	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d0a	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d0e	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00d11	7f 1d		 jg	 SHORT $LN94@R_CreateCo
  00d13	ba 01 00 00 00	 mov	 edx, 1
  00d18	c1 e2 02	 shl	 edx, 2
  00d1b	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d1e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d22	83 e9 30	 sub	 ecx, 48			; 00000030H
  00d25	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv644[ebp], ecx
  00d2b	e9 a6 00 00 00	 jmp	 $LN99@R_CreateCo
$LN94@R_CreateCo:
  00d30	ba 01 00 00 00	 mov	 edx, 1
  00d35	c1 e2 02	 shl	 edx, 2
  00d38	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d3b	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d3f	83 f9 61	 cmp	 ecx, 97			; 00000061H
  00d42	7c 2e		 jl	 SHORT $LN95@R_CreateCo
  00d44	ba 01 00 00 00	 mov	 edx, 1
  00d49	c1 e2 02	 shl	 edx, 2
  00d4c	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d4f	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d53	83 f9 66	 cmp	 ecx, 102		; 00000066H
  00d56	7f 1a		 jg	 SHORT $LN95@R_CreateCo
  00d58	ba 01 00 00 00	 mov	 edx, 1
  00d5d	c1 e2 02	 shl	 edx, 2
  00d60	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d63	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d67	83 e9 57	 sub	 ecx, 87			; 00000057H
  00d6a	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv643[ebp], ecx
  00d70	eb 58		 jmp	 SHORT $LN98@R_CreateCo
$LN95@R_CreateCo:
  00d72	ba 01 00 00 00	 mov	 edx, 1
  00d77	c1 e2 02	 shl	 edx, 2
  00d7a	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d7d	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d81	83 f9 41	 cmp	 ecx, 65			; 00000041H
  00d84	7c 2e		 jl	 SHORT $LN96@R_CreateCo
  00d86	ba 01 00 00 00	 mov	 edx, 1
  00d8b	c1 e2 02	 shl	 edx, 2
  00d8e	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00d91	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00d95	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00d98	7f 1a		 jg	 SHORT $LN96@R_CreateCo
  00d9a	ba 01 00 00 00	 mov	 edx, 1
  00d9f	c1 e2 02	 shl	 edx, 2
  00da2	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00da5	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00da9	83 e9 37	 sub	 ecx, 55			; 00000037H
  00dac	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv642[ebp], ecx
  00db2	eb 0a		 jmp	 SHORT $LN97@R_CreateCo
$LN96@R_CreateCo:
  00db4	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv642[ebp], 0
$LN97@R_CreateCo:
  00dbe	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv642[ebp]
  00dc4	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv643[ebp], edx
$LN98@R_CreateCo:
  00dca	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv643[ebp]
  00dd0	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv644[ebp], eax
$LN99@R_CreateCo:
  00dd6	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv602[ebp]
  00ddc	c1 e1 04	 shl	 ecx, 4
  00ddf	03 8d 20 ff ff
	ff		 add	 ecx, DWORD PTR tv644[ebp]
  00de5	89 4d 88	 mov	 DWORD PTR _cg$[ebp], ecx
  00de8	8b 55 88	 mov	 edx, DWORD PTR _cg$[ebp]
  00deb	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv1263[ebp], edx
  00df1	f2 0f 2a 85 14
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1263[ebp]
  00df9	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv1263[ebp]
  00dff	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00e02	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00e0b	f2 0f 11 45 d8	 movsd	 QWORD PTR _cdestg$[ebp], xmm0

; 688  : 		cdestb = cb = ((HEX2INT(p3[5]) * 16) + HEX2INT(p3[6]));

  00e10	b8 01 00 00 00	 mov	 eax, 1
  00e15	6b c8 05	 imul	 ecx, eax, 5
  00e18	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00e1b	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00e1f	83 f8 30	 cmp	 eax, 48			; 00000030H
  00e22	7c 31		 jl	 SHORT $LN100@R_CreateCo
  00e24	b9 01 00 00 00	 mov	 ecx, 1
  00e29	6b d1 05	 imul	 edx, ecx, 5
  00e2c	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00e2f	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00e33	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00e36	7f 1d		 jg	 SHORT $LN100@R_CreateCo
  00e38	ba 01 00 00 00	 mov	 edx, 1
  00e3d	6b c2 05	 imul	 eax, edx, 5
  00e40	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00e43	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00e47	83 ea 30	 sub	 edx, 48			; 00000030H
  00e4a	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv687[ebp], edx
  00e50	e9 a6 00 00 00	 jmp	 $LN105@R_CreateCo
$LN100@R_CreateCo:
  00e55	b8 01 00 00 00	 mov	 eax, 1
  00e5a	6b c8 05	 imul	 ecx, eax, 5
  00e5d	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00e60	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00e64	83 f8 61	 cmp	 eax, 97			; 00000061H
  00e67	7c 2e		 jl	 SHORT $LN101@R_CreateCo
  00e69	b9 01 00 00 00	 mov	 ecx, 1
  00e6e	6b d1 05	 imul	 edx, ecx, 5
  00e71	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00e74	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00e78	83 f9 66	 cmp	 ecx, 102		; 00000066H
  00e7b	7f 1a		 jg	 SHORT $LN101@R_CreateCo
  00e7d	ba 01 00 00 00	 mov	 edx, 1
  00e82	6b c2 05	 imul	 eax, edx, 5
  00e85	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00e88	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00e8c	83 ea 57	 sub	 edx, 87			; 00000057H
  00e8f	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv686[ebp], edx
  00e95	eb 58		 jmp	 SHORT $LN104@R_CreateCo
$LN101@R_CreateCo:
  00e97	b8 01 00 00 00	 mov	 eax, 1
  00e9c	6b c8 05	 imul	 ecx, eax, 5
  00e9f	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00ea2	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00ea6	83 f8 41	 cmp	 eax, 65			; 00000041H
  00ea9	7c 2e		 jl	 SHORT $LN102@R_CreateCo
  00eab	b9 01 00 00 00	 mov	 ecx, 1
  00eb0	6b d1 05	 imul	 edx, ecx, 5
  00eb3	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00eb6	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00eba	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00ebd	7f 1a		 jg	 SHORT $LN102@R_CreateCo
  00ebf	ba 01 00 00 00	 mov	 edx, 1
  00ec4	6b c2 05	 imul	 eax, edx, 5
  00ec7	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00eca	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00ece	83 ea 37	 sub	 edx, 55			; 00000037H
  00ed1	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv685[ebp], edx
  00ed7	eb 0a		 jmp	 SHORT $LN103@R_CreateCo
$LN102@R_CreateCo:
  00ed9	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv685[ebp], 0
$LN103@R_CreateCo:
  00ee3	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv685[ebp]
  00ee9	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv686[ebp], eax
$LN104@R_CreateCo:
  00eef	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv686[ebp]
  00ef5	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv687[ebp], ecx
$LN105@R_CreateCo:
  00efb	ba 01 00 00 00	 mov	 edx, 1
  00f00	6b c2 06	 imul	 eax, edx, 6
  00f03	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00f06	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00f0a	83 fa 30	 cmp	 edx, 48			; 00000030H
  00f0d	7c 31		 jl	 SHORT $LN106@R_CreateCo
  00f0f	b8 01 00 00 00	 mov	 eax, 1
  00f14	6b c8 06	 imul	 ecx, eax, 6
  00f17	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00f1a	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00f1e	83 f8 39	 cmp	 eax, 57			; 00000039H
  00f21	7f 1d		 jg	 SHORT $LN106@R_CreateCo
  00f23	b9 01 00 00 00	 mov	 ecx, 1
  00f28	6b d1 06	 imul	 edx, ecx, 6
  00f2b	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00f2e	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00f32	83 e9 30	 sub	 ecx, 48			; 00000030H
  00f35	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv729[ebp], ecx
  00f3b	e9 a6 00 00 00	 jmp	 $LN111@R_CreateCo
$LN106@R_CreateCo:
  00f40	ba 01 00 00 00	 mov	 edx, 1
  00f45	6b c2 06	 imul	 eax, edx, 6
  00f48	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00f4b	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00f4f	83 fa 61	 cmp	 edx, 97			; 00000061H
  00f52	7c 2e		 jl	 SHORT $LN107@R_CreateCo
  00f54	b8 01 00 00 00	 mov	 eax, 1
  00f59	6b c8 06	 imul	 ecx, eax, 6
  00f5c	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00f5f	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00f63	83 f8 66	 cmp	 eax, 102		; 00000066H
  00f66	7f 1a		 jg	 SHORT $LN107@R_CreateCo
  00f68	b9 01 00 00 00	 mov	 ecx, 1
  00f6d	6b d1 06	 imul	 edx, ecx, 6
  00f70	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00f73	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00f77	83 e9 57	 sub	 ecx, 87			; 00000057H
  00f7a	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv728[ebp], ecx
  00f80	eb 58		 jmp	 SHORT $LN110@R_CreateCo
$LN107@R_CreateCo:
  00f82	ba 01 00 00 00	 mov	 edx, 1
  00f87	6b c2 06	 imul	 eax, edx, 6
  00f8a	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  00f8d	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00f91	83 fa 41	 cmp	 edx, 65			; 00000041H
  00f94	7c 2e		 jl	 SHORT $LN108@R_CreateCo
  00f96	b8 01 00 00 00	 mov	 eax, 1
  00f9b	6b c8 06	 imul	 ecx, eax, 6
  00f9e	8b 55 10	 mov	 edx, DWORD PTR _p3$[ebp]
  00fa1	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00fa5	83 f8 46	 cmp	 eax, 70			; 00000046H
  00fa8	7f 1a		 jg	 SHORT $LN108@R_CreateCo
  00faa	b9 01 00 00 00	 mov	 ecx, 1
  00faf	6b d1 06	 imul	 edx, ecx, 6
  00fb2	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00fb5	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00fb9	83 e9 37	 sub	 ecx, 55			; 00000037H
  00fbc	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv727[ebp], ecx
  00fc2	eb 0a		 jmp	 SHORT $LN109@R_CreateCo
$LN108@R_CreateCo:
  00fc4	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv727[ebp], 0
$LN109@R_CreateCo:
  00fce	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv727[ebp]
  00fd4	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv728[ebp], edx
$LN110@R_CreateCo:
  00fda	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv728[ebp]
  00fe0	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv729[ebp], eax
$LN111@R_CreateCo:
  00fe6	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv687[ebp]
  00fec	c1 e1 04	 shl	 ecx, 4
  00fef	03 8d 20 ff ff
	ff		 add	 ecx, DWORD PTR tv729[ebp]
  00ff5	89 4d 84	 mov	 DWORD PTR _cb$[ebp], ecx
  00ff8	8b 55 84	 mov	 edx, DWORD PTR _cb$[ebp]
  00ffb	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv1309[ebp], edx
  01001	f2 0f 2a 85 14
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1309[ebp]
  01009	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv1309[ebp]
  0100f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01012	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0101b	f2 0f 11 45 d0	 movsd	 QWORD PTR _cdestb$[ebp], xmm0

; 689  : 		fadecolor = (((cb) >> 3) + (((cg) >> 2) << 5) + (((cr) >> 3) << 11));

  01020	8b 45 84	 mov	 eax, DWORD PTR _cb$[ebp]
  01023	c1 e8 03	 shr	 eax, 3
  01026	8b 4d 88	 mov	 ecx, DWORD PTR _cg$[ebp]
  01029	c1 e9 02	 shr	 ecx, 2
  0102c	c1 e1 05	 shl	 ecx, 5
  0102f	03 c1		 add	 eax, ecx
  01031	8b 55 8c	 mov	 edx, DWORD PTR _cr$[ebp]
  01034	c1 ea 03	 shr	 edx, 3
  01037	c1 e2 0b	 shl	 edx, 11			; 0000000bH
  0103a	03 c2		 add	 eax, edx
  0103c	89 85 7c ff ff
	ff		 mov	 DWORD PTR _fadecolor$[ebp], eax

; 690  : 	}

  01042	eb 49		 jmp	 SHORT $LN19@R_CreateCo
$LN18@R_CreateCo:

; 691  : 	else
; 692  : 		cdestr = cdestg = cdestb = fadecolor = 0;

  01044	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fadecolor$[ebp], 0
  0104e	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _fadecolor$[ebp]
  01054	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv1317[ebp], eax
  0105a	f2 0f 2a 85 2c
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv1317[ebp]
  01062	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv1317[ebp]
  01068	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0106b	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  01074	f2 0f 11 45 d0	 movsd	 QWORD PTR _cdestb$[ebp], xmm0
  01079	f2 0f 10 45 d0	 movsd	 xmm0, QWORD PTR _cdestb$[ebp]
  0107e	f2 0f 11 45 d8	 movsd	 QWORD PTR _cdestg$[ebp], xmm0
  01083	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR _cdestg$[ebp]
  01088	f2 0f 11 45 e0	 movsd	 QWORD PTR _cdestr$[ebp], xmm0
$LN19@R_CreateCo:

; 693  : #undef HEX2INT
; 694  : 
; 695  : 	for (i = 0; i < num_extra_colormaps; i++)

  0108d	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01094	eb 09		 jmp	 SHORT $LN4@R_CreateCo
$LN2@R_CreateCo:
  01096	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  01099	83 c0 01	 add	 eax, 1
  0109c	89 45 90	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_CreateCo:
  0109f	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  010a2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_extra_colormaps
  010a8	0f 83 8e 00 00
	00		 jae	 $LN3@R_CreateCo

; 696  : 	{
; 697  : 		if (foundcolormaps[i] != LUMPERROR)

  010ae	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  010b1	83 3c 85 00 00
	00 00 ff	 cmp	 DWORD PTR _foundcolormaps[eax*4], -1
  010b9	74 02		 je	 SHORT $LN20@R_CreateCo

; 698  : 			continue;

  010bb	eb d9		 jmp	 SHORT $LN2@R_CreateCo
$LN20@R_CreateCo:

; 699  : 		if (maskcolor == extra_colormaps[i].maskcolor
; 700  : 			&& fadecolor == extra_colormaps[i].fadecolor
; 701  : 			&& (float)maskamt == (float)extra_colormaps[i].maskamt
; 702  : 			&& fadestart == extra_colormaps[i].fadestart
; 703  : 			&& fadeend == extra_colormaps[i].fadeend
; 704  : 			&& fog == extra_colormaps[i].fog)

  010bd	6b 45 90 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  010c1	0f b7 88 00 00
	00 00		 movzx	 ecx, WORD PTR _extra_colormaps[eax]
  010c8	39 4d 80	 cmp	 DWORD PTR _maskcolor$[ebp], ecx
  010cb	75 6a		 jne	 SHORT $LN21@R_CreateCo
  010cd	6b 45 90 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  010d1	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR _extra_colormaps[eax+2]
  010d8	39 8d 7c ff ff
	ff		 cmp	 DWORD PTR _fadecolor$[ebp], ecx
  010de	75 57		 jne	 SHORT $LN21@R_CreateCo
  010e0	f2 0f 5a 45 a8	 cvtsd2ss xmm0, QWORD PTR _maskamt$[ebp]
  010e5	6b 45 90 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  010e9	f2 0f 5a 88 08
	00 00 00	 cvtsd2ss xmm1, QWORD PTR _extra_colormaps[eax+8]
  010f1	0f 2e c1	 ucomiss xmm0, xmm1
  010f4	9f		 lahf
  010f5	f6 c4 44	 test	 ah, 68			; 00000044H
  010f8	7a 3d		 jp	 SHORT $LN21@R_CreateCo
  010fa	6b 45 90 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  010fe	0f b7 88 10 00
	00 00		 movzx	 ecx, WORD PTR _extra_colormaps[eax+16]
  01105	39 8d 78 ff ff
	ff		 cmp	 DWORD PTR _fadestart$[ebp], ecx
  0110b	75 2a		 jne	 SHORT $LN21@R_CreateCo
  0110d	6b 45 90 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  01111	0f b7 88 12 00
	00 00		 movzx	 ecx, WORD PTR _extra_colormaps[eax+18]
  01118	39 8d 74 ff ff
	ff		 cmp	 DWORD PTR _fadeend$[ebp], ecx
  0111e	75 17		 jne	 SHORT $LN21@R_CreateCo
  01120	6b 45 90 28	 imul	 eax, DWORD PTR _i$[ebp], 40
  01124	8b 4d 98	 mov	 ecx, DWORD PTR _fog$[ebp]
  01127	3b 88 14 00 00
	00		 cmp	 ecx, DWORD PTR _extra_colormaps[eax+20]
  0112d	75 08		 jne	 SHORT $LN21@R_CreateCo

; 705  : 		{
; 706  : 			return (INT32)i;

  0112f	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  01132	e9 09 04 00 00	 jmp	 $LN1@R_CreateCo
$LN21@R_CreateCo:

; 707  : 		}
; 708  : 	}

  01137	e9 5a ff ff ff	 jmp	 $LN2@R_CreateCo
$LN3@R_CreateCo:

; 709  : 
; 710  : 	if (num_extra_colormaps == MAXCOLORMAPS)

  0113c	83 3d 00 00 00
	00 3c		 cmp	 DWORD PTR _num_extra_colormaps, 60 ; 0000003cH
  01143	75 0f		 jne	 SHORT $LN22@R_CreateCo

; 711  : 		I_Error("R_CreateColormap: Too many colormaps! the limit is %d\n", MAXCOLORMAPS);

  01145	6a 3c		 push	 60			; 0000003cH
  01147	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LMJJLOBN@R_CreateColormap?3?5Too?5many?5colo@
  0114c	e8 00 00 00 00	 call	 _I_Error
  01151	83 c4 08	 add	 esp, 8
$LN22@R_CreateCo:

; 712  : 
; 713  : 	strncpy(colormapFixingArray[num_extra_colormaps][0], p1, 8);

  01154	6a 08		 push	 8
  01156	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  01159	50		 push	 eax
  0115a	6b 0d 00 00 00
	00 1b		 imul	 ecx, DWORD PTR _num_extra_colormaps, 27
  01161	ba 09 00 00 00	 mov	 edx, 9
  01166	6b c2 00	 imul	 eax, edx, 0
  01169	8d 8c 01 00 00
	00 00		 lea	 ecx, DWORD PTR _colormapFixingArray[ecx+eax]
  01170	51		 push	 ecx
  01171	e8 00 00 00 00	 call	 _strncpy
  01176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  : 	strncpy(colormapFixingArray[num_extra_colormaps][1], p2, 8);

  01179	6a 08		 push	 8
  0117b	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  0117e	50		 push	 eax
  0117f	6b 0d 00 00 00
	00 1b		 imul	 ecx, DWORD PTR _num_extra_colormaps, 27
  01186	ba 09 00 00 00	 mov	 edx, 9
  0118b	c1 e2 00	 shl	 edx, 0
  0118e	8d 84 11 00 00
	00 00		 lea	 eax, DWORD PTR _colormapFixingArray[ecx+edx]
  01195	50		 push	 eax
  01196	e8 00 00 00 00	 call	 _strncpy
  0119b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 715  : 	strncpy(colormapFixingArray[num_extra_colormaps][2], p3, 8);

  0119e	6a 08		 push	 8
  011a0	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  011a3	50		 push	 eax
  011a4	6b 0d 00 00 00
	00 1b		 imul	 ecx, DWORD PTR _num_extra_colormaps, 27
  011ab	ba 09 00 00 00	 mov	 edx, 9
  011b0	d1 e2		 shl	 edx, 1
  011b2	8d 84 11 00 00
	00 00		 lea	 eax, DWORD PTR _colormapFixingArray[ecx+edx]
  011b9	50		 push	 eax
  011ba	e8 00 00 00 00	 call	 _strncpy
  011bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 716  : 
; 717  : 	num_extra_colormaps++;

  011c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_extra_colormaps
  011c7	83 c0 01	 add	 eax, 1
  011ca	a3 00 00 00 00	 mov	 DWORD PTR _num_extra_colormaps, eax

; 718  : 
; 719  : 	if (rendermode == render_soft)

  011cf	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  011d6	0f 85 e2 02 00
	00		 jne	 $LN6@R_CreateCo

; 720  : 	{
; 721  : 		for (i = 0; i < 256; i++)

  011dc	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  011e3	eb 09		 jmp	 SHORT $LN7@R_CreateCo
$LN5@R_CreateCo:
  011e5	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  011e8	83 c0 01	 add	 eax, 1
  011eb	89 45 90	 mov	 DWORD PTR _i$[ebp], eax
$LN7@R_CreateCo:
  011ee	81 7d 90 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  011f5	0f 83 c3 02 00
	00		 jae	 $LN6@R_CreateCo

; 722  : 		{
; 723  : 			r = pLocalPalette[i].s.red;

  011fb	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  011fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _pLocalPalette
  01204	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  01208	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0120c	f2 0f 11 45 c8	 movsd	 QWORD PTR _r$[ebp], xmm0

; 724  : 			g = pLocalPalette[i].s.green;

  01211	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  01214	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _pLocalPalette
  0121a	0f b6 54 81 01	 movzx	 edx, BYTE PTR [ecx+eax*4+1]
  0121f	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  01223	f2 0f 11 45 c0	 movsd	 QWORD PTR _g$[ebp], xmm0

; 725  : 			b = pLocalPalette[i].s.blue;

  01228	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  0122b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _pLocalPalette
  01231	0f b6 54 81 02	 movzx	 edx, BYTE PTR [ecx+eax*4+2]
  01236	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0123a	f2 0f 11 45 b8	 movsd	 QWORD PTR _b$[ebp], xmm0

; 726  : 			cbrightness = sqrt((r*r) + (g*g) + (b*b));

  0123f	f2 0f 10 45 c8	 movsd	 xmm0, QWORD PTR _r$[ebp]
  01244	f2 0f 59 45 c8	 mulsd	 xmm0, QWORD PTR _r$[ebp]
  01249	f2 0f 10 4d c0	 movsd	 xmm1, QWORD PTR _g$[ebp]
  0124e	f2 0f 59 4d c0	 mulsd	 xmm1, QWORD PTR _g$[ebp]
  01253	f2 0f 58 c1	 addsd	 xmm0, xmm1
  01257	f2 0f 10 4d b8	 movsd	 xmm1, QWORD PTR _b$[ebp]
  0125c	f2 0f 59 4d b8	 mulsd	 xmm1, QWORD PTR _b$[ebp]
  01261	f2 0f 58 c1	 addsd	 xmm0, xmm1
  01265	83 ec 08	 sub	 esp, 8
  01268	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0126d	e8 00 00 00 00	 call	 _sqrt
  01272	83 c4 08	 add	 esp, 8
  01275	dd 5d b0	 fstp	 QWORD PTR _cbrightness$[ebp]

; 727  : 
; 728  : 			map[i][0] = (cbrightness * cmaskr) + (r * othermask);

  01278	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR _cbrightness$[ebp]
  0127d	f2 0f 59 45 f8	 mulsd	 xmm0, QWORD PTR _cmaskr$[ebp]
  01282	f2 0f 10 4d c8	 movsd	 xmm1, QWORD PTR _r$[ebp]
  01287	f2 0f 59 4d a0	 mulsd	 xmm1, QWORD PTR _othermask$[ebp]
  0128c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  01290	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01294	b9 08 00 00 00	 mov	 ecx, 8
  01299	6b d1 00	 imul	 edx, ecx, 0
  0129c	f2 0f 11 84 10
	00 00 00 00	 movsd	 QWORD PTR _map[eax+edx], xmm0

; 729  : 			if (map[i][0] > 255.0l)

  012a5	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  012a9	b9 08 00 00 00	 mov	 ecx, 8
  012ae	6b d1 00	 imul	 edx, ecx, 0
  012b1	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+edx]
  012ba	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  012c2	76 1d		 jbe	 SHORT $LN24@R_CreateCo

; 730  : 				map[i][0] = 255.0l;

  012c4	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  012c8	b9 08 00 00 00	 mov	 ecx, 8
  012cd	6b d1 00	 imul	 edx, ecx, 0
  012d0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  012d8	f2 0f 11 84 10
	00 00 00 00	 movsd	 QWORD PTR _map[eax+edx], xmm0
$LN24@R_CreateCo:

; 731  : 			deltas[i][0] = (map[i][0] - cdestr) / (double)fadedist;

  012e1	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  012e5	b9 08 00 00 00	 mov	 ecx, 8
  012ea	6b d1 00	 imul	 edx, ecx, 0
  012ed	f2 0f 10 84 10
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+edx]
  012f6	f2 0f 5c 45 e0	 subsd	 xmm0, QWORD PTR _cdestr$[ebp]
  012fb	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _fadedist$[ebp]
  01301	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv1360[ebp], eax
  01307	f2 0f 2a 8d 2c
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv1360[ebp]
  0130f	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv1360[ebp]
  01315	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01318	f2 0f 58 0c cd
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  01321	f2 0f 5e c1	 divsd	 xmm0, xmm1
  01325	6b 55 90 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  01329	b8 08 00 00 00	 mov	 eax, 8
  0132e	6b c8 00	 imul	 ecx, eax, 0
  01331	f2 0f 11 84 0a
	00 00 00 00	 movsd	 QWORD PTR _deltas[edx+ecx], xmm0

; 732  : 
; 733  : 			map[i][1] = (cbrightness * cmaskg) + (g * othermask);

  0133a	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR _cbrightness$[ebp]
  0133f	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _cmaskg$[ebp]
  01344	f2 0f 10 4d c0	 movsd	 xmm1, QWORD PTR _g$[ebp]
  01349	f2 0f 59 4d a0	 mulsd	 xmm1, QWORD PTR _othermask$[ebp]
  0134e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  01352	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01356	b9 08 00 00 00	 mov	 ecx, 8
  0135b	c1 e1 00	 shl	 ecx, 0
  0135e	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0

; 734  : 			if (map[i][1] > 255.0l)

  01367	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0136b	b9 08 00 00 00	 mov	 ecx, 8
  01370	c1 e1 00	 shl	 ecx, 0
  01373	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  0137c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  01384	76 1d		 jbe	 SHORT $LN25@R_CreateCo

; 735  : 				map[i][1] = 255.0l;

  01386	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0138a	b9 08 00 00 00	 mov	 ecx, 8
  0138f	c1 e1 00	 shl	 ecx, 0
  01392	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  0139a	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0
$LN25@R_CreateCo:

; 736  : 			deltas[i][1] = (map[i][1] - cdestg) / (double)fadedist;

  013a3	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  013a7	b9 08 00 00 00	 mov	 ecx, 8
  013ac	c1 e1 00	 shl	 ecx, 0
  013af	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  013b8	f2 0f 5c 45 d8	 subsd	 xmm0, QWORD PTR _cdestg$[ebp]
  013bd	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _fadedist$[ebp]
  013c3	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv1375[ebp], edx
  013c9	f2 0f 2a 8d 2c
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv1375[ebp]
  013d1	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv1375[ebp]
  013d7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  013da	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  013e3	f2 0f 5e c1	 divsd	 xmm0, xmm1
  013e7	6b 4d 90 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  013eb	ba 08 00 00 00	 mov	 edx, 8
  013f0	c1 e2 00	 shl	 edx, 0
  013f3	f2 0f 11 84 11
	00 00 00 00	 movsd	 QWORD PTR _deltas[ecx+edx], xmm0

; 737  : 
; 738  : 			map[i][2] = (cbrightness * cmaskb) + (b * othermask);

  013fc	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR _cbrightness$[ebp]
  01401	f2 0f 59 45 e8	 mulsd	 xmm0, QWORD PTR _cmaskb$[ebp]
  01406	f2 0f 10 4d b8	 movsd	 xmm1, QWORD PTR _b$[ebp]
  0140b	f2 0f 59 4d a0	 mulsd	 xmm1, QWORD PTR _othermask$[ebp]
  01410	f2 0f 58 c1	 addsd	 xmm0, xmm1
  01414	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01418	b9 08 00 00 00	 mov	 ecx, 8
  0141d	d1 e1		 shl	 ecx, 1
  0141f	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0

; 739  : 			if (map[i][2] > 255.0l)

  01428	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0142c	b9 08 00 00 00	 mov	 ecx, 8
  01431	d1 e1		 shl	 ecx, 1
  01433	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  0143c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  01444	76 1c		 jbe	 SHORT $LN26@R_CreateCo

; 740  : 				map[i][2] = 255.0l;

  01446	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0144a	b9 08 00 00 00	 mov	 ecx, 8
  0144f	d1 e1		 shl	 ecx, 1
  01451	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  01459	f2 0f 11 84 08
	00 00 00 00	 movsd	 QWORD PTR _map[eax+ecx], xmm0
$LN26@R_CreateCo:

; 741  : 			deltas[i][2] = (map[i][2] - cdestb) / (double)fadedist;

  01462	6b 45 90 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  01466	b9 08 00 00 00	 mov	 ecx, 8
  0146b	d1 e1		 shl	 ecx, 1
  0146d	f2 0f 10 84 08
	00 00 00 00	 movsd	 xmm0, QWORD PTR _map[eax+ecx]
  01476	f2 0f 5c 45 d0	 subsd	 xmm0, QWORD PTR _cdestb$[ebp]
  0147b	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _fadedist$[ebp]
  01481	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv1390[ebp], edx
  01487	f2 0f 2a 8d 2c
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv1390[ebp]
  0148f	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv1390[ebp]
  01495	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01498	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  014a1	f2 0f 5e c1	 divsd	 xmm0, xmm1
  014a5	6b 4d 90 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  014a9	ba 08 00 00 00	 mov	 edx, 8
  014ae	d1 e2		 shl	 edx, 1
  014b0	f2 0f 11 84 11
	00 00 00 00	 movsd	 QWORD PTR _deltas[ecx+edx], xmm0

; 742  : 		}

  014b9	e9 27 fd ff ff	 jmp	 $LN5@R_CreateCo
$LN6@R_CreateCo:

; 743  : 	}
; 744  : 
; 745  : 	foundcolormaps[mapnum] = LUMPERROR;

  014be	8b 45 94	 mov	 eax, DWORD PTR _mapnum$[ebp]
  014c1	c7 04 85 00 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR _foundcolormaps[eax*4], -1

; 746  : 
; 747  : 	// aligned on 8 bit for asm code
; 748  : 	extra_colormaps[mapnum].colormap = NULL;

  014cc	6b 45 94 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  014d0	c7 80 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR _extra_colormaps[eax+32], 0

; 749  : 	extra_colormaps[mapnum].maskcolor = (UINT16)maskcolor;

  014da	6b 45 94 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  014de	66 8b 4d 80	 mov	 cx, WORD PTR _maskcolor$[ebp]
  014e2	66 89 88 00 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax], cx

; 750  : 	extra_colormaps[mapnum].fadecolor = (UINT16)fadecolor;

  014e9	6b 45 94 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  014ed	66 8b 8d 7c ff
	ff ff		 mov	 cx, WORD PTR _fadecolor$[ebp]
  014f4	66 89 88 02 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+2], cx

; 751  : 	extra_colormaps[mapnum].maskamt = maskamt;

  014fb	6b 45 94 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  014ff	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _maskamt$[ebp]
  01504	f2 0f 11 80 08
	00 00 00	 movsd	 QWORD PTR _extra_colormaps[eax+8], xmm0

; 752  : 	extra_colormaps[mapnum].fadestart = (UINT16)fadestart;

  0150c	6b 45 94 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  01510	66 8b 8d 78 ff
	ff ff		 mov	 cx, WORD PTR _fadestart$[ebp]
  01517	66 89 88 10 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+16], cx

; 753  : 	extra_colormaps[mapnum].fadeend = (UINT16)fadeend;

  0151e	6b 45 94 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  01522	66 8b 8d 74 ff
	ff ff		 mov	 cx, WORD PTR _fadeend$[ebp]
  01529	66 89 88 12 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+18], cx

; 754  : 	extra_colormaps[mapnum].fog = fog;

  01530	6b 45 94 28	 imul	 eax, DWORD PTR _mapnum$[ebp], 40
  01534	8b 4d 98	 mov	 ecx, DWORD PTR _fog$[ebp]
  01537	89 88 14 00 00
	00		 mov	 DWORD PTR _extra_colormaps[eax+20], ecx

; 755  : 
; 756  : 	return (INT32)mapnum;

  0153d	8b 45 94	 mov	 eax, DWORD PTR _mapnum$[ebp]
$LN1@R_CreateCo:

; 757  : }

  01540	5f		 pop	 edi
  01541	5e		 pop	 esi
  01542	5b		 pop	 ebx
  01543	8b e5		 mov	 esp, ebp
  01545	5d		 pop	 ebp
  01546	c3		 ret	 0
_R_CreateColormap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_ColormapNumForName
_TEXT	SEGMENT
_i$ = -8						; size = 4
_lump$ = -4						; size = 4
_name$ = 8						; size = 4
_R_ColormapNumForName PROC				; COMDAT

; 580  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 581  : 	lumpnum_t lump, i;
; 582  : 
; 583  : 	if (num_extra_colormaps == MAXCOLORMAPS)

  00009	83 3d 00 00 00
	00 3c		 cmp	 DWORD PTR _num_extra_colormaps, 60 ; 0000003cH
  00010	75 0f		 jne	 SHORT $LN5@R_Colormap

; 584  : 		I_Error("R_ColormapNumForName: Too many colormaps! the limit is %d\n", MAXCOLORMAPS);

  00012	6a 3c		 push	 60			; 0000003cH
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@DBPELGAE@R_ColormapNumForName?3?5Too?5many?5@
  00019	e8 00 00 00 00	 call	 _I_Error
  0001e	83 c4 08	 add	 esp, 8
$LN5@R_Colormap:

; 585  : 
; 586  : 	lump = R_CheckNumForNameList(name, colormaplumps, numcolormaplumps);

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR _numcolormaplumps
  00026	50		 push	 eax
  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _colormaplumps
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 _R_CheckNumForNameList
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	89 45 fc	 mov	 DWORD PTR _lump$[ebp], eax

; 587  : 	if (lump == LUMPERROR)

  0003d	83 7d fc ff	 cmp	 DWORD PTR _lump$[ebp], -1
  00041	75 11		 jne	 SHORT $LN6@R_Colormap

; 588  : 		I_Error("R_ColormapNumForName: Cannot find colormap lump %.8s\n", name);

  00043	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@DKNBOBIA@R_ColormapNumForName?3?5Cannot?5fi@
  0004c	e8 00 00 00 00	 call	 _I_Error
  00051	83 c4 08	 add	 esp, 8
$LN6@R_Colormap:

; 589  : 
; 590  : 	for (i = 0; i < num_extra_colormaps; i++)

  00054	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0005b	eb 09		 jmp	 SHORT $LN4@R_Colormap
$LN2@R_Colormap:
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_Colormap:
  00066	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00069	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_extra_colormaps
  0006f	73 19		 jae	 SHORT $LN3@R_Colormap

; 591  : 		if (lump == foundcolormaps[i])

  00071	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _lump$[ebp]
  00077	3b 0c 85 00 00
	00 00		 cmp	 ecx, DWORD PTR _foundcolormaps[eax*4]
  0007e	75 08		 jne	 SHORT $LN7@R_Colormap

; 592  : 			return i;

  00080	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00083	e9 d1 00 00 00	 jmp	 $LN1@R_Colormap
$LN7@R_Colormap:
  00088	eb d3		 jmp	 SHORT $LN2@R_Colormap
$LN3@R_Colormap:

; 593  : 
; 594  : 	foundcolormaps[num_extra_colormaps] = lump;

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_extra_colormaps
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _lump$[ebp]
  00092	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _foundcolormaps[eax*4], ecx

; 595  : 
; 596  : 	// aligned on 8 bit for asm code
; 597  : 	extra_colormaps[num_extra_colormaps].colormap = Z_MallocAlign(W_LumpLength(lump), PU_LEVEL, NULL, 16);

  00099	6a 10		 push	 16			; 00000010H
  0009b	6a 00		 push	 0
  0009d	6a 32		 push	 50			; 00000032H
  0009f	8b 45 fc	 mov	 eax, DWORD PTR _lump$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _W_LumpLength
  000a8	83 c4 04	 add	 esp, 4
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _Z_MallocAlign
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	6b 0d 00 00 00
	00 28		 imul	 ecx, DWORD PTR _num_extra_colormaps, 40
  000bb	89 81 20 00 00
	00		 mov	 DWORD PTR _extra_colormaps[ecx+32], eax

; 598  : 	W_ReadLump(lump, extra_colormaps[num_extra_colormaps].colormap);

  000c1	6b 05 00 00 00
	00 28		 imul	 eax, DWORD PTR _num_extra_colormaps, 40
  000c8	8b 88 20 00 00
	00		 mov	 ecx, DWORD PTR _extra_colormaps[eax+32]
  000ce	51		 push	 ecx
  000cf	8b 55 fc	 mov	 edx, DWORD PTR _lump$[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _W_ReadLump
  000d8	83 c4 08	 add	 esp, 8

; 599  : 
; 600  : 	// We set all params of the colormap to normal because there
; 601  : 	// is no real way to tell how GL should handle a colormap lump anyway..
; 602  : 	extra_colormaps[num_extra_colormaps].maskcolor = 0xffff;

  000db	6b 05 00 00 00
	00 28		 imul	 eax, DWORD PTR _num_extra_colormaps, 40
  000e2	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000e7	66 89 88 00 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax], cx

; 603  : 	extra_colormaps[num_extra_colormaps].fadecolor = 0x0;

  000ee	6b 05 00 00 00
	00 28		 imul	 eax, DWORD PTR _num_extra_colormaps, 40
  000f5	33 c9		 xor	 ecx, ecx
  000f7	66 89 88 02 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+2], cx

; 604  : 	extra_colormaps[num_extra_colormaps].maskamt = 0x0;

  000fe	6b 05 00 00 00
	00 28		 imul	 eax, DWORD PTR _num_extra_colormaps, 40
  00105	0f 57 c0	 xorps	 xmm0, xmm0
  00108	f2 0f 11 80 08
	00 00 00	 movsd	 QWORD PTR _extra_colormaps[eax+8], xmm0

; 605  : 	extra_colormaps[num_extra_colormaps].fadestart = 0;

  00110	6b 05 00 00 00
	00 28		 imul	 eax, DWORD PTR _num_extra_colormaps, 40
  00117	33 c9		 xor	 ecx, ecx
  00119	66 89 88 10 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+16], cx

; 606  : 	extra_colormaps[num_extra_colormaps].fadeend = 33;

  00120	6b 05 00 00 00
	00 28		 imul	 eax, DWORD PTR _num_extra_colormaps, 40
  00127	b9 21 00 00 00	 mov	 ecx, 33			; 00000021H
  0012c	66 89 88 12 00
	00 00		 mov	 WORD PTR _extra_colormaps[eax+18], cx

; 607  : 	extra_colormaps[num_extra_colormaps].fog = 0;

  00133	6b 05 00 00 00
	00 28		 imul	 eax, DWORD PTR _num_extra_colormaps, 40
  0013a	c7 80 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR _extra_colormaps[eax+20], 0

; 608  : 
; 609  : 	num_extra_colormaps++;

  00144	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_extra_colormaps
  00149	83 c0 01	 add	 eax, 1
  0014c	a3 00 00 00 00	 mov	 DWORD PTR _num_extra_colormaps, eax

; 610  : 	return (INT32)num_extra_colormaps - 1;

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_extra_colormaps
  00156	83 e8 01	 sub	 eax, 1
$LN1@R_Colormap:

; 611  : }

  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
_R_ColormapNumForName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_ClearColormaps
_TEXT	SEGMENT
_i$ = -4						; size = 4
_R_ClearColormaps PROC					; COMDAT

; 566  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 567  : 	size_t i;
; 568  : 
; 569  : 	num_extra_colormaps = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _num_extra_colormaps, 0

; 570  : 
; 571  : 	carrayindex = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _carrayindex, 0

; 572  : 
; 573  : 	for (i = 0; i < MAXCOLORMAPS; i++)

  0001d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@R_ClearCol
$LN2@R_ClearCol:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_ClearCol:
  0002f	83 7d fc 3c	 cmp	 DWORD PTR _i$[ebp], 60	; 0000003cH
  00033	73 10		 jae	 SHORT $LN3@R_ClearCol

; 574  : 		foundcolormaps[i] = LUMPERROR;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00038	c7 04 85 00 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR _foundcolormaps[eax*4], -1
  00043	eb e1		 jmp	 SHORT $LN2@R_ClearCol
$LN3@R_ClearCol:

; 575  : 
; 576  : 	memset(extra_colormaps, 0, sizeof (extra_colormaps));

  00045	68 60 09 00 00	 push	 2400			; 00000960H
  0004a	6a 00		 push	 0
  0004c	68 00 00 00 00	 push	 OFFSET _extra_colormaps
  00051	e8 00 00 00 00	 call	 _memset
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 577  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_R_ClearColormaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_ReInitColormaps
_TEXT	SEGMENT
_lump$ = -20						; size = 4
_colormap$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_num$ = 8						; size = 2
_R_ReInitColormaps PROC					; COMDAT

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 539  : 	char colormap[9] = "COLORMAP";

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08JDLPAFIO@COLORMAP@
  00018	89 45 f0	 mov	 DWORD PTR _colormap$[ebp], eax
  0001b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08JDLPAFIO@COLORMAP@+4
  00021	89 4d f4	 mov	 DWORD PTR _colormap$[ebp+4], ecx
  00024	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08JDLPAFIO@COLORMAP@+8
  0002a	88 55 f8	 mov	 BYTE PTR _colormap$[ebp+8], dl

; 540  : 	lumpnum_t lump;
; 541  : 
; 542  : 	if (num <= 9999)

  0002d	0f b7 45 08	 movzx	 eax, WORD PTR _num$[ebp]
  00031	3d 0f 27 00 00	 cmp	 eax, 9999		; 0000270fH
  00036	7f 1b		 jg	 SHORT $LN2@R_ReInitCo

; 543  : 		_snprintf(colormap, 8, "CLM%04u", num-1);

  00038	0f b7 45 08	 movzx	 eax, WORD PTR _num$[ebp]
  0003c	83 e8 01	 sub	 eax, 1
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_07IFICHLAN@CLM?$CF04u@
  00045	6a 08		 push	 8
  00047	8d 4d f0	 lea	 ecx, DWORD PTR _colormap$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ___snprintf
  00050	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@R_ReInitCo:

; 544  : 
; 545  : 	// Load in the light tables, now 64k aligned for smokie...
; 546  : 	lump = W_GetNumForName(colormap);

  00053	8d 45 f0	 lea	 eax, DWORD PTR _colormap$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _W_GetNumForName
  0005c	83 c4 04	 add	 esp, 4
  0005f	89 45 ec	 mov	 DWORD PTR _lump$[ebp], eax

; 547  : 	if (lump == LUMPERROR)

  00062	83 7d ec ff	 cmp	 DWORD PTR _lump$[ebp], -1
  00066	75 10		 jne	 SHORT $LN3@R_ReInitCo

; 548  : 		lump = W_GetNumForName("COLORMAP");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_08JDLPAFIO@COLORMAP@
  0006d	e8 00 00 00 00	 call	 _W_GetNumForName
  00072	83 c4 04	 add	 esp, 4
  00075	89 45 ec	 mov	 DWORD PTR _lump$[ebp], eax
$LN3@R_ReInitCo:

; 549  : 	W_ReadLump(lump, colormaps);

  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaps
  0007d	50		 push	 eax
  0007e	8b 4d ec	 mov	 ecx, DWORD PTR _lump$[ebp]
  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 _W_ReadLump
  00087	83 c4 08	 add	 esp, 8

; 550  : 
; 551  : 	// Init Boom colormaps.
; 552  : 	R_ClearColormaps();

  0008a	e8 00 00 00 00	 call	 _R_ClearColormaps
  0008f	90		 npad	 1

; 553  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	33 cd		 xor	 ecx, ebp
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_R_ReInitColormaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_CheckTextureNumForName
_TEXT	SEGMENT
_whichside$1 = -12					; size = 4
_linenum$2 = -8						; size = 4
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_sidenum$ = 12						; size = 2
_R_CheckTextureNumForName PROC				; COMDAT

; 1059 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1060 : 	size_t i;
; 1061 : 
; 1062 : 	// "NoTexture" marker.
; 1063 : 	if (name[0] == '-')

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00014	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00018	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0001b	75 07		 jne	 SHORT $LN11@R_CheckTex

; 1064 : 		return 0;

  0001d	33 c0		 xor	 eax, eax
  0001f	e9 8f 01 00 00	 jmp	 $LN1@R_CheckTex
$LN11@R_CheckTex:

; 1065 : 
; 1066 : 	for (i = 0; i < numtextures; i++)

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002b	eb 09		 jmp	 SHORT $LN4@R_CheckTex
$LN2@R_CheckTex:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_CheckTex:
  00036	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00039	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numtextures
  0003f	73 29		 jae	 SHORT $LN3@R_CheckTex

; 1067 : 		if (!strncasecmp(textures[i]->name, name, 8))

  00041	6a 08		 push	 8
  00043	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00046	50		 push	 eax
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _textures
  00050	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _strnicmp
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	85 c0		 test	 eax, eax
  0005e	75 08		 jne	 SHORT $LN12@R_CheckTex

; 1068 : 			return (INT32)i;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00063	e9 4b 01 00 00	 jmp	 $LN1@R_CheckTex
$LN12@R_CheckTex:
  00068	eb c3		 jmp	 SHORT $LN2@R_CheckTex
$LN3@R_CheckTex:

; 1069 : 
; 1070 : 	// Ignore texture errors of colormaps and others in dedicated mode.
; 1071 : 	if (!dedicated && name[0] != '#')

  0006a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00071	0f 85 f5 00 00
	00		 jne	 $LN19@R_CheckTex
  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	6b c8 00	 imul	 ecx, eax, 0
  0007f	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00082	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00086	83 f8 23	 cmp	 eax, 35			; 00000023H
  00089	0f 84 dd 00 00
	00		 je	 $LN19@R_CheckTex

; 1072 : 	{
; 1073 : 		if (sidenum == 0xffff)

  0008f	0f b7 45 0c	 movzx	 eax, WORD PTR _sidenum$[ebp]
  00093	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00098	75 16		 jne	 SHORT $LN14@R_CheckTex

; 1074 : 			CONS_Printf("WARNING: R_CheckTextureNumForName: %.8s not found.\nDefaulting to REDWALL.\n", name);

  0009a	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@ECNOBMHE@WARNING?3?5R_CheckTextureNumForNa@
  000a3	e8 00 00 00 00	 call	 _CONS_Printf
  000a8	83 c4 08	 add	 esp, 8
  000ab	e9 bc 00 00 00	 jmp	 $LN19@R_CheckTex
$LN14@R_CheckTex:

; 1075 : 		else
; 1076 : 		{
; 1077 : 			size_t linenum = (size_t)-1;

  000b0	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _linenum$2[ebp], -1

; 1078 : 			int whichside = -1;

  000b7	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _whichside$1[ebp], -1

; 1079 : 
; 1080 : 			for (i = 0; i < numlines; i++)

  000be	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000c5	eb 09		 jmp	 SHORT $LN7@R_CheckTex
$LN5@R_CheckTex:
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ca	83 c0 01	 add	 eax, 1
  000cd	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@R_CheckTex:
  000d0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numlines
  000d9	73 5c		 jae	 SHORT $LN6@R_CheckTex

; 1081 : 			{
; 1082 : 				if (lines[i].sidenum[0] == sidenum)

  000db	6b 45 fc 4c	 imul	 eax, DWORD PTR _i$[ebp], 76
  000df	03 05 00 00 00
	00		 add	 eax, DWORD PTR _lines
  000e5	b9 02 00 00 00	 mov	 ecx, 2
  000ea	6b d1 00	 imul	 edx, ecx, 0
  000ed	0f b7 44 10 16	 movzx	 eax, WORD PTR [eax+edx+22]
  000f2	0f b7 4d 0c	 movzx	 ecx, WORD PTR _sidenum$[ebp]
  000f6	3b c1		 cmp	 eax, ecx
  000f8	75 0f		 jne	 SHORT $LN16@R_CheckTex

; 1083 : 				{
; 1084 : 					linenum = i;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000fd	89 45 f8	 mov	 DWORD PTR _linenum$2[ebp], eax

; 1085 : 					whichside = 1;

  00100	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _whichside$1[ebp], 1

; 1086 : 				}

  00107	eb 2c		 jmp	 SHORT $LN18@R_CheckTex
$LN16@R_CheckTex:

; 1087 : 				else if (lines[i].sidenum[1] == sidenum)

  00109	6b 45 fc 4c	 imul	 eax, DWORD PTR _i$[ebp], 76
  0010d	03 05 00 00 00
	00		 add	 eax, DWORD PTR _lines
  00113	b9 02 00 00 00	 mov	 ecx, 2
  00118	c1 e1 00	 shl	 ecx, 0
  0011b	0f b7 54 08 16	 movzx	 edx, WORD PTR [eax+ecx+22]
  00120	0f b7 45 0c	 movzx	 eax, WORD PTR _sidenum$[ebp]
  00124	3b d0		 cmp	 edx, eax
  00126	75 0d		 jne	 SHORT $LN18@R_CheckTex

; 1088 : 				{
; 1089 : 					linenum = i;

  00128	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0012b	89 45 f8	 mov	 DWORD PTR _linenum$2[ebp], eax

; 1090 : 					whichside = 2;

  0012e	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _whichside$1[ebp], 2
$LN18@R_CheckTex:

; 1091 : 				}
; 1092 : 			}

  00135	eb 90		 jmp	 SHORT $LN5@R_CheckTex
$LN6@R_CheckTex:

; 1093 : 
; 1094 : 			if (lines[linenum].special != 259) // Make-Your-Own FOF

  00137	6b 45 f8 4c	 imul	 eax, DWORD PTR _linenum$2[ebp], 76
  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00141	0f bf 54 01 12	 movsx	 edx, WORD PTR [ecx+eax+18]
  00146	81 fa 03 01 00
	00		 cmp	 edx, 259		; 00000103H
  0014c	74 1e		 je	 SHORT $LN19@R_CheckTex

; 1095 : 				CONS_Printf("WARNING: R_CheckTextureNumForName: %.8s not found on sidedef #%d (line #%"PRIdS", side %d).\nDefaulting to REDWALL.\n", name, sidenum, linenum, whichside);

  0014e	8b 45 f4	 mov	 eax, DWORD PTR _whichside$1[ebp]
  00151	50		 push	 eax
  00152	8b 4d f8	 mov	 ecx, DWORD PTR _linenum$2[ebp]
  00155	51		 push	 ecx
  00156	0f b7 55 0c	 movzx	 edx, WORD PTR _sidenum$[ebp]
  0015a	52		 push	 edx
  0015b	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0015e	50		 push	 eax
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0GP@BMFPNFBJ@WARNING?3?5R_CheckTextureNumForNa@
  00164	e8 00 00 00 00	 call	 _CONS_Printf
  00169	83 c4 14	 add	 esp, 20			; 00000014H
$LN19@R_CheckTex:

; 1096 : 		}
; 1097 : 	}
; 1098 : 
; 1099 : 	// Use a dummy texture for those not found.
; 1100 : 	for (i = 0; i < numtextures; i++)

  0016c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00173	eb 09		 jmp	 SHORT $LN10@R_CheckTex
$LN8@R_CheckTex:
  00175	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00178	83 c0 01	 add	 eax, 1
  0017b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@R_CheckTex:
  0017e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00181	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numtextures
  00187	73 27		 jae	 SHORT $LN9@R_CheckTex

; 1101 : 		if (!strncasecmp(textures[i]->name, "REDWALL", 8))

  00189	6a 08		 push	 8
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_07IDPDJOKH@REDWALL@
  00190	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  00199	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0019c	52		 push	 edx
  0019d	e8 00 00 00 00	 call	 _strnicmp
  001a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a5	85 c0		 test	 eax, eax
  001a7	75 05		 jne	 SHORT $LN20@R_CheckTex

; 1102 : 			return (INT32)i;

  001a9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001ac	eb 05		 jmp	 SHORT $LN1@R_CheckTex
$LN20@R_CheckTex:
  001ae	eb c5		 jmp	 SHORT $LN8@R_CheckTex
$LN9@R_CheckTex:

; 1103 : 
; 1104 : 	return -1;

  001b0	83 c8 ff	 or	 eax, -1
$LN1@R_CheckTex:

; 1105 : }

  001b3	5f		 pop	 edi
  001b4	5e		 pop	 esi
  001b5	5b		 pop	 ebx
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c3		 ret	 0
_R_CheckTextureNumForName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_TextureNumForName
_TEXT	SEGMENT
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_sidenum$ = 12						; size = 2
_R_TextureNumForName PROC				; COMDAT

; 1113 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1114 : 	const INT32 i = R_CheckTextureNumForName(name, sidenum);

  00009	0f b7 45 0c	 movzx	 eax, WORD PTR _sidenum$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _R_CheckTextureNumForName
  00017	83 c4 08	 add	 esp, 8
  0001a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 1115 : 
; 1116 : 	if (i == -1)

  0001d	83 7d fc ff	 cmp	 DWORD PTR _i$[ebp], -1
  00021	75 18		 jne	 SHORT $LN2@R_TextureN

; 1117 : 	{
; 1118 : 		CONS_Printf("WARNING: R_TextureNumForName: %.8s not found\n", name);

  00023	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@CNGAOHL@WARNING?3?5R_TextureNumForName?3?5?$CF@
  0002c	e8 00 00 00 00	 call	 _CONS_Printf
  00031	83 c4 08	 add	 esp, 8

; 1119 : 		return 1;

  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	eb 03		 jmp	 SHORT $LN1@R_TextureN
$LN2@R_TextureN:

; 1120 : 	}
; 1121 : 	return i;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
$LN1@R_TextureN:

; 1122 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_R_TextureNumForName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_GetFlatNumForName
_TEXT	SEGMENT
_lump$ = -4						; size = 4
_name$ = 8						; size = 4
_R_GetFlatNumForName PROC				; COMDAT

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 489  : 	lumpnum_t lump = W_CheckNumForName(name);

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _W_CheckNumForName
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR _lump$[ebp], eax

; 490  : 
; 491  : 	if (lump == LUMPERROR)

  00018	83 7d fc ff	 cmp	 DWORD PTR _lump$[ebp], -1
  0001c	75 36		 jne	 SHORT $LN2@R_GetFlatN

; 492  : 	{
; 493  : 		if (strcmp(name, "F_SKY1"))

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_06COAGKCEK@F_SKY1@
  00023	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _strcmp
  0002c	83 c4 08	 add	 esp, 8
  0002f	85 c0		 test	 eax, eax
  00031	74 11		 je	 SHORT $LN3@R_GetFlatN

; 494  : 			CONS_Printf("R_GetFlatNumForName: Could not find flat %.8s\n", name);

  00033	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@PJOMDGPB@R_GetFlatNumForName?3?5Could?5not?5@
  0003c	e8 00 00 00 00	 call	 _CONS_Printf
  00041	83 c4 08	 add	 esp, 8
$LN3@R_GetFlatN:

; 495  : 		lump = W_CheckNumForName("REDFLR");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_06GLENPBNK@REDFLR@
  00049	e8 00 00 00 00	 call	 _W_CheckNumForName
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 fc	 mov	 DWORD PTR _lump$[ebp], eax
$LN2@R_GetFlatN:

; 496  : 	}
; 497  : 
; 498  : 	return lump;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _lump$[ebp]

; 499  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_R_GetFlatNumForName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_PrecacheLevel
_TEXT	SEGMENT
_sf$ = -32						; size = 4
_th$ = -28						; size = 4
_lump$ = -24						; size = 4
_k$ = -20						; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_spritepresent$ = -8					; size = 4
_texturepresent$ = -4					; size = 4
_R_PrecacheLevel PROC					; COMDAT

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1131 : 	char *texturepresent, *spritepresent;
; 1132 : 	size_t i, j, k;
; 1133 : 	lumpnum_t lump;
; 1134 : 
; 1135 : 	thinker_t *th;
; 1136 : 	spriteframe_t *sf;
; 1137 : 
; 1138 : 	if (demoplayback)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00010	74 05		 je	 SHORT $LN20@R_Precache

; 1139 : 		return;

  00012	e9 c6 02 00 00	 jmp	 $LN32@R_Precache
$LN20@R_Precache:

; 1140 : 
; 1141 : 	// do not flush the memory, Z_Malloc twice with same user will cause error in Z_CheckHeap()
; 1142 : 	if (rendermode != render_soft)

  00017	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0001e	74 05		 je	 SHORT $LN21@R_Precache

; 1143 : 		return;

  00020	e9 b8 02 00 00	 jmp	 $LN32@R_Precache
$LN21@R_Precache:

; 1144 : 
; 1145 : 	// Precache flats.
; 1146 : 	flatmemory = P_PrecacheLevelFlats();

  00025	e8 00 00 00 00	 call	 _P_PrecacheLevelFlats
  0002a	a3 00 00 00 00	 mov	 DWORD PTR _flatmemory, eax

; 1147 : 
; 1148 : 	//
; 1149 : 	// Precache textures.
; 1150 : 	//
; 1151 : 	// no need to precache all software textures in 3D mode
; 1152 : 	// (note they are still used with the reference software view)
; 1153 : 	texturepresent = calloc(numtextures, sizeof (*texturepresent));

  0002f	6a 01		 push	 1
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _numtextures
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _calloc
  0003c	83 c4 08	 add	 esp, 8
  0003f	89 45 fc	 mov	 DWORD PTR _texturepresent$[ebp], eax

; 1154 : 	if (texturepresent == NULL) I_Error("%s: Out of memory looking up textues", "R_PrecacheLevel");

  00042	83 7d fc 00	 cmp	 DWORD PTR _texturepresent$[ebp], 0
  00046	75 12		 jne	 SHORT $LN22@R_Precache
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GDMLHNBI@R_PrecacheLevel@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@HNANFJPD@?$CFs?3?5Out?5of?5memory?5looking?5up?5te@
  00052	e8 00 00 00 00	 call	 _I_Error
  00057	83 c4 08	 add	 esp, 8
$LN22@R_Precache:

; 1155 : 
; 1156 : 	for (j = 0; j < numsides; j++)

  0005a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN4@R_Precache
$LN2@R_Precache:
  00063	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$LN4@R_Precache:
  0006c	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0006f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsides
  00075	0f 83 86 00 00
	00		 jae	 $LN3@R_Precache

; 1157 : 	{
; 1158 : 		// huh, a potential bug here????
; 1159 : 		if ((size_t)sides[j].toptexture < numtextures)

  0007b	6b 45 f0 1c	 imul	 eax, DWORD PTR _j$[ebp], 28
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  00085	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00089	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _numtextures
  0008f	73 15		 jae	 SHORT $LN23@R_Precache

; 1160 : 			texturepresent[sides[j].toptexture] = 1;

  00091	6b 45 f0 1c	 imul	 eax, DWORD PTR _j$[ebp], 28
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  0009b	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0009f	8b 45 fc	 mov	 eax, DWORD PTR _texturepresent$[ebp]
  000a2	c6 04 10 01	 mov	 BYTE PTR [eax+edx], 1
$LN23@R_Precache:

; 1161 : 		if ((size_t)sides[j].midtexture < numtextures)

  000a6	6b 45 f0 1c	 imul	 eax, DWORD PTR _j$[ebp], 28
  000aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  000b0	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  000b4	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _numtextures
  000ba	73 15		 jae	 SHORT $LN24@R_Precache

; 1162 : 			texturepresent[sides[j].midtexture] = 1;

  000bc	6b 45 f0 1c	 imul	 eax, DWORD PTR _j$[ebp], 28
  000c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  000c6	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  000ca	8b 45 fc	 mov	 eax, DWORD PTR _texturepresent$[ebp]
  000cd	c6 04 10 01	 mov	 BYTE PTR [eax+edx], 1
$LN24@R_Precache:

; 1163 : 		if ((size_t)sides[j].bottomtexture < numtextures)

  000d1	6b 45 f0 1c	 imul	 eax, DWORD PTR _j$[ebp], 28
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  000db	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  000df	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _numtextures
  000e5	73 15		 jae	 SHORT $LN25@R_Precache

; 1164 : 			texturepresent[sides[j].bottomtexture] = 1;

  000e7	6b 45 f0 1c	 imul	 eax, DWORD PTR _j$[ebp], 28
  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sides
  000f1	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  000f5	8b 45 fc	 mov	 eax, DWORD PTR _texturepresent$[ebp]
  000f8	c6 04 10 01	 mov	 BYTE PTR [eax+edx], 1
$LN25@R_Precache:

; 1165 : 	}

  000fc	e9 62 ff ff ff	 jmp	 $LN2@R_Precache
$LN3@R_Precache:

; 1166 : 
; 1167 : 	// Sky texture is always present.
; 1168 : 	// Note that F_SKY1 is the name used to indicate a sky floor/ceiling as a flat,
; 1169 : 	// while the sky texture is stored like a wall texture, with a skynum dependent name.
; 1170 : 	texturepresent[skytexture] = 1;

  00101	8b 45 fc	 mov	 eax, DWORD PTR _texturepresent$[ebp]
  00104	03 05 00 00 00
	00		 add	 eax, DWORD PTR _skytexture
  0010a	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1171 : 
; 1172 : 	texturememory = 0;

  0010d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _texturememory, 0

; 1173 : 	for (j = 0; j < numtextures; j++)

  00117	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0011e	eb 09		 jmp	 SHORT $LN7@R_Precache
$LN5@R_Precache:
  00120	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00123	83 c0 01	 add	 eax, 1
  00126	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$LN7@R_Precache:
  00129	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0012c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numtextures
  00132	73 2c		 jae	 SHORT $LN6@R_Precache

; 1174 : 	{
; 1175 : 		if (!texturepresent[j])

  00134	8b 45 fc	 mov	 eax, DWORD PTR _texturepresent$[ebp]
  00137	03 45 f0	 add	 eax, DWORD PTR _j$[ebp]
  0013a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0013d	85 c9		 test	 ecx, ecx
  0013f	75 02		 jne	 SHORT $LN26@R_Precache

; 1176 : 			continue;

  00141	eb dd		 jmp	 SHORT $LN5@R_Precache
$LN26@R_Precache:

; 1177 : 
; 1178 : 		if (!texturecache[j])

  00143	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00146	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecache
  0014c	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00150	75 0c		 jne	 SHORT $LN27@R_Precache

; 1179 : 			R_GenerateTexture(j);

  00152	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 _R_GenerateTexture
  0015b	83 c4 04	 add	 esp, 4
$LN27@R_Precache:

; 1180 : 		// pre-caching individual patches that compose textures became obsolete,
; 1181 : 		// since we cache entire composite textures
; 1182 : 	}

  0015e	eb c0		 jmp	 SHORT $LN5@R_Precache
$LN6@R_Precache:

; 1183 : 	free(texturepresent);

  00160	8b 45 fc	 mov	 eax, DWORD PTR _texturepresent$[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 _free
  00169	83 c4 04	 add	 esp, 4

; 1184 : 
; 1185 : 	//
; 1186 : 	// Precache sprites.
; 1187 : 	//
; 1188 : 	spritepresent = calloc(numsprites, sizeof (*spritepresent));

  0016c	6a 01		 push	 1
  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR _numsprites
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _calloc
  00179	83 c4 08	 add	 esp, 8
  0017c	89 45 f8	 mov	 DWORD PTR _spritepresent$[ebp], eax

; 1189 : 	if (spritepresent == NULL) I_Error("%s: Out of memory looking up sprites", "R_PrecacheLevel");

  0017f	83 7d f8 00	 cmp	 DWORD PTR _spritepresent$[ebp], 0
  00183	75 12		 jne	 SHORT $LN28@R_Precache
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GDMLHNBI@R_PrecacheLevel@
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MDHJPELD@?$CFs?3?5Out?5of?5memory?5looking?5up?5sp@
  0018f	e8 00 00 00 00	 call	 _I_Error
  00194	83 c4 08	 add	 esp, 8
$LN28@R_Precache:

; 1190 : 
; 1191 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00197	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0019c	89 45 e4	 mov	 DWORD PTR _th$[ebp], eax
  0019f	eb 09		 jmp	 SHORT $LN10@R_Precache
$LN8@R_Precache:
  001a1	8b 45 e4	 mov	 eax, DWORD PTR _th$[ebp]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a7	89 4d e4	 mov	 DWORD PTR _th$[ebp], ecx
$LN10@R_Precache:
  001aa	81 7d e4 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  001b1	74 1b		 je	 SHORT $LN9@R_Precache

; 1192 : 		if (th->function.acp1 == (actionf_p1)P_MobjThinker)

  001b3	8b 45 e4	 mov	 eax, DWORD PTR _th$[ebp]
  001b6	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  001bd	75 0d		 jne	 SHORT $LN29@R_Precache

; 1193 : 			spritepresent[((mobj_t *)th)->sprite] = 1;

  001bf	8b 45 e4	 mov	 eax, DWORD PTR _th$[ebp]
  001c2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001c5	8b 55 f8	 mov	 edx, DWORD PTR _spritepresent$[ebp]
  001c8	c6 04 0a 01	 mov	 BYTE PTR [edx+ecx], 1
$LN29@R_Precache:
  001cc	eb d3		 jmp	 SHORT $LN8@R_Precache
$LN9@R_Precache:

; 1194 : 
; 1195 : 	spritememory = 0;

  001ce	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _spritememory, 0

; 1196 : 	for (i = 0; i < numsprites; i++)

  001d8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001df	eb 09		 jmp	 SHORT $LN13@R_Precache
$LN11@R_Precache:
  001e1	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001e4	83 c0 01	 add	 eax, 1
  001e7	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN13@R_Precache:
  001ea	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001ed	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsprites
  001f3	0f 83 a5 00 00
	00		 jae	 $LN12@R_Precache

; 1197 : 	{
; 1198 : 		if (!spritepresent[i])

  001f9	8b 45 f8	 mov	 eax, DWORD PTR _spritepresent$[ebp]
  001fc	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  001ff	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00202	85 c9		 test	 ecx, ecx
  00204	75 02		 jne	 SHORT $LN30@R_Precache

; 1199 : 			continue;

  00206	eb d9		 jmp	 SHORT $LN11@R_Precache
$LN30@R_Precache:

; 1200 : 
; 1201 : 		for (j = 0; j < sprites[i].numframes; j++)

  00208	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0020f	eb 09		 jmp	 SHORT $LN16@R_Precache
$LN14@R_Precache:
  00211	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00214	83 c0 01	 add	 eax, 1
  00217	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$LN16@R_Precache:
  0021a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0021d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sprites
  00223	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  00226	3b 14 c1	 cmp	 edx, DWORD PTR [ecx+eax*8]
  00229	73 6e		 jae	 SHORT $LN15@R_Precache

; 1202 : 		{
; 1203 : 			sf = &sprites[i].spriteframes[j];

  0022b	6b 45 f0 4c	 imul	 eax, DWORD PTR _j$[ebp], 76
  0022f	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00232	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sprites
  00238	03 44 ca 04	 add	 eax, DWORD PTR [edx+ecx*8+4]
  0023c	89 45 e0	 mov	 DWORD PTR _sf$[ebp], eax

; 1204 : 			for (k = 0; k < 8; k++)

  0023f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
  00246	eb 09		 jmp	 SHORT $LN19@R_Precache
$LN17@R_Precache:
  00248	8b 45 ec	 mov	 eax, DWORD PTR _k$[ebp]
  0024b	83 c0 01	 add	 eax, 1
  0024e	89 45 ec	 mov	 DWORD PTR _k$[ebp], eax
$LN19@R_Precache:
  00251	83 7d ec 08	 cmp	 DWORD PTR _k$[ebp], 8
  00255	73 3d		 jae	 SHORT $LN18@R_Precache

; 1205 : 			{
; 1206 : 				// see R_InitSprites for more about lumppat,lumpid
; 1207 : 				lump = sf->lumppat[k];

  00257	8b 45 ec	 mov	 eax, DWORD PTR _k$[ebp]
  0025a	8b 4d e0	 mov	 ecx, DWORD PTR _sf$[ebp]
  0025d	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00261	89 55 e8	 mov	 DWORD PTR _lump$[ebp], edx

; 1208 : 				if (devparm)

  00264	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  0026b	74 17		 je	 SHORT $LN31@R_Precache

; 1209 : 					spritememory += W_LumpLength(lump);

  0026d	8b 45 e8	 mov	 eax, DWORD PTR _lump$[ebp]
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _W_LumpLength
  00276	83 c4 04	 add	 esp, 4
  00279	03 05 00 00 00
	00		 add	 eax, DWORD PTR _spritememory
  0027f	a3 00 00 00 00	 mov	 DWORD PTR _spritememory, eax
$LN31@R_Precache:

; 1210 : 				W_CachePatchNum(lump, PU_CACHE);

  00284	6a 65		 push	 101			; 00000065H
  00286	8b 45 e8	 mov	 eax, DWORD PTR _lump$[ebp]
  00289	50		 push	 eax
  0028a	e8 00 00 00 00	 call	 _W_CachePatchNum
  0028f	83 c4 08	 add	 esp, 8

; 1211 : 			}

  00292	eb b4		 jmp	 SHORT $LN17@R_Precache
$LN18@R_Precache:

; 1212 : 		}

  00294	e9 78 ff ff ff	 jmp	 $LN14@R_Precache
$LN15@R_Precache:

; 1213 : 	}

  00299	e9 43 ff ff ff	 jmp	 $LN11@R_Precache
$LN12@R_Precache:

; 1214 : 	free(spritepresent);

  0029e	8b 45 f8	 mov	 eax, DWORD PTR _spritepresent$[ebp]
  002a1	50		 push	 eax
  002a2	e8 00 00 00 00	 call	 _free
  002a7	83 c4 04	 add	 esp, 4

; 1215 : 
; 1216 : 	// FIXME: this is no longer correct with OpenGL render mode
; 1217 : 	if (devparm)

  002aa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  002b1	74 2a		 je	 SHORT $LN32@R_Precache

; 1218 : 	{
; 1219 : 		CONS_Printf("Precache level done:\n"

  002b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _spritememory
  002b8	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  002bb	50		 push	 eax
  002bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturememory
  002c2	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  002c5	51		 push	 ecx
  002c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _flatmemory
  002cc	c1 ea 0a	 shr	 edx, 10			; 0000000aH
  002cf	52		 push	 edx
  002d0	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@GFFPPKOC@Precache?5level?5done?3?6flatmemory@
  002d5	e8 00 00 00 00	 call	 _CONS_Printf
  002da	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@R_Precache:

; 1220 : 			"flatmemory:    %"PRIdS" k\n"
; 1221 : 			"texturememory: %"PRIdS" k\n"
; 1222 : 			"spritememory:  %"PRIdS" k\n", flatmemory>>10, texturememory>>10, spritememory>>10);
; 1223 : 	}
; 1224 : }

  002dd	5f		 pop	 edi
  002de	5e		 pop	 esi
  002df	5b		 pop	 ebx
  002e0	8b e5		 mov	 esp, ebp
  002e2	5d		 pop	 ebp
  002e3	c3		 ret	 0
_R_PrecacheLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_InitData
_TEXT	SEGMENT
_R_InitData PROC					; COMDAT

; 1035 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1036 : 	if (highcolor)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _highcolor, 0
  00010	74 13		 je	 SHORT $LN2@R_InitData

; 1037 : 	{
; 1038 : 		CONS_Printf("\nInitHighColor...");

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CADMMNCF@?6InitHighColor?4?4?4@
  00017	e8 00 00 00 00	 call	 _CONS_Printf
  0001c	83 c4 04	 add	 esp, 4

; 1039 : 		R_Init8to16();

  0001f	e8 00 00 00 00	 call	 _R_Init8to16
  00024	90		 npad	 1
$LN2@R_InitData:

; 1040 : 	}
; 1041 : 
; 1042 : 	CONS_Printf("\nInitTextures...");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FGKIPOKF@?6InitTextures?4?4?4@
  0002a	e8 00 00 00 00	 call	 _CONS_Printf
  0002f	83 c4 04	 add	 esp, 4

; 1043 : 	R_LoadTextures();

  00032	e8 00 00 00 00	 call	 _R_LoadTextures
  00037	90		 npad	 1

; 1044 : 
; 1045 : 	CONS_Printf("\nInitSprites...\n");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DNALODMI@?6InitSprites?4?4?4?6@
  0003d	e8 00 00 00 00	 call	 _CONS_Printf
  00042	83 c4 04	 add	 esp, 4

; 1046 : 	R_InitSpriteLumps();

  00045	e8 00 00 00 00	 call	 _R_InitSpriteLumps
  0004a	90		 npad	 1

; 1047 : 	R_InitSprites();

  0004b	e8 00 00 00 00	 call	 _R_InitSprites
  00050	90		 npad	 1

; 1048 : 
; 1049 : 	CONS_Printf("\nInitColormaps...\n");

  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GOLHLOGO@?6InitColormaps?4?4?4?6@
  00056	e8 00 00 00 00	 call	 _CONS_Printf
  0005b	83 c4 04	 add	 esp, 4

; 1050 : 	R_InitColormaps();

  0005e	e8 00 00 00 00	 call	 _R_InitColormaps
  00063	90		 npad	 1

; 1051 : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_R_InitData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_GetFlat
_TEXT	SEGMENT
_flatlumpnum$ = 8					; size = 4
_R_GetFlat PROC						; COMDAT

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 282  : 	return W_CacheLumpNum(flatlumpnum, PU_CACHE);

  00009	6a 65		 push	 101			; 00000065H
  0000b	8b 45 08	 mov	 eax, DWORD PTR _flatlumpnum$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _W_CacheLumpNum
  00014	83 c4 08	 add	 esp, 8

; 283  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_R_GetFlat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_GetColumn
_TEXT	SEGMENT
_data$ = -4						; size = 4
_tex$ = 8						; size = 4
_col$ = 12						; size = 4
_R_GetColumn PROC					; COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 267  : 	UINT8 *data;
; 268  : 
; 269  : 	col &= texturewidthmask[tex];

  00009	8b 45 08	 mov	 eax, DWORD PTR _tex$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturewidthmask
  00012	8b 55 0c	 mov	 edx, DWORD PTR _col$[ebp]
  00015	23 14 81	 and	 edx, DWORD PTR [ecx+eax*4]
  00018	89 55 0c	 mov	 DWORD PTR _col$[ebp], edx

; 270  : 	data = texturecache[tex];

  0001b	8b 45 08	 mov	 eax, DWORD PTR _tex$[ebp]
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecache
  00024	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00027	89 55 fc	 mov	 DWORD PTR _data$[ebp], edx

; 271  : 
; 272  : 	if (!data)

  0002a	83 7d fc 00	 cmp	 DWORD PTR _data$[ebp], 0
  0002e	75 0f		 jne	 SHORT $LN2@R_GetColum

; 273  : 		data = R_GenerateTexture(tex);

  00030	8b 45 08	 mov	 eax, DWORD PTR _tex$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _R_GenerateTexture
  00039	83 c4 04	 add	 esp, 4
  0003c	89 45 fc	 mov	 DWORD PTR _data$[ebp], eax
$LN2@R_GetColum:

; 274  : 
; 275  : 	return data + LONG(texturecolumnofs[tex][col]);

  0003f	8b 45 08	 mov	 eax, DWORD PTR _tex$[ebp]
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecolumnofs
  00048	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _col$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _data$[ebp]
  00051	03 0c 82	 add	 ecx, DWORD PTR [edx+eax*4]
  00054	8b c1		 mov	 eax, ecx

; 276  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_R_GetColumn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_FlushTextureCache
_TEXT	SEGMENT
_i$ = -4						; size = 4
_R_FlushTextureCache PROC				; COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 290  : 	size_t i;
; 291  : 
; 292  : 	if (numtextures)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numtextures, 0
  00010	74 34		 je	 SHORT $LN3@R_FlushTex

; 293  : 		for (i = 0; i < numtextures; i++)

  00012	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00019	eb 09		 jmp	 SHORT $LN4@R_FlushTex
$LN2@R_FlushTex:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	83 c0 01	 add	 eax, 1
  00021	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_FlushTex:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00027	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numtextures
  0002d	73 17		 jae	 SHORT $LN3@R_FlushTex

; 294  : 			Z_Free(texturecache[i]);

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecache
  00038	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 _Z_Free
  00041	83 c4 04	 add	 esp, 4
  00044	eb d5		 jmp	 SHORT $LN2@R_FlushTex
$LN3@R_FlushTex:

; 295  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_R_FlushTextureCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_data.c
;	COMDAT _R_LoadTextures
_TEXT	SEGMENT
tv187 = -168						; size = 4
$T1 = -164						; size = 4
_j$ = -96						; size = 4
_offset$ = -92						; size = 4
_maxoff2$ = -88						; size = 4
_maxoff$ = -84						; size = 4
_i$ = -80						; size = 4
_patchlookup$ = -76					; size = 4
_offset32$ = -72					; size = 4
_numtextures2$ = -68					; size = 4
_numtextures1$ = -64					; size = 4
_nummappatches$ = -60					; size = 4
_directory$ = -56					; size = 4
_maptex1$ = -52						; size = 4
_maptex2$ = -48						; size = 4
_maptex$ = -44						; size = 4
_pnames$ = -40						; size = 4
_name_p$ = -36						; size = 4
_name$ = -32						; size = 9
_patch$ = -20						; size = 4
_mpatch$ = -16						; size = 4
_texture$ = -12						; size = 4
_mtexture$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_R_LoadTextures PROC					; COMDAT

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 303  : 	maptexture_t *mtexture;
; 304  : 	texture_t *texture;
; 305  : 	mappatch_t *mpatch;
; 306  : 	texpatch_t *patch;
; 307  : 	char name[9];
; 308  : 	char *name_p;
; 309  : 	char *pnames;
; 310  : 	UINT32 *maptex, *maptex2, *maptex1, *directory, nummappatches, numtextures1, numtextures2, offset32;
; 311  : 	lumpnum_t *patchlookup;
; 312  : 	size_t i, maxoff, maxoff2, offset;
; 313  : 	int j;
; 314  : 
; 315  : 	// free previous memory before numtextures change
; 316  : 
; 317  : 	for (i = 0; i < numtextures; i++)

  00016	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@R_LoadText
$LN2@R_LoadText:
  0001f	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 b0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_LoadText:
  00028	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  0002b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numtextures
  00031	73 2c		 jae	 SHORT $LN3@R_LoadText

; 318  : 	{
; 319  : 		Z_Free(textures[i]);

  00033	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  0003c	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _Z_Free
  00045	83 c4 04	 add	 esp, 4

; 320  : 		Z_Free(texturecache[i]);

  00048	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecache
  00051	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _Z_Free
  0005a	83 c4 04	 add	 esp, 4

; 321  : 	}

  0005d	eb c0		 jmp	 SHORT $LN2@R_LoadText
$LN3@R_LoadText:

; 322  : 
; 323  : 	// Load the patch names from pnames.lmp.
; 324  : 	name[8] = 0;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	c1 e0 03	 shl	 eax, 3
  00067	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0006d	83 bd 5c ff ff
	ff 09		 cmp	 DWORD PTR $T1[ebp], 9
  00074	73 02		 jae	 SHORT $LN29@R_LoadText
  00076	eb 06		 jmp	 SHORT $LN30@R_LoadText
$LN29@R_LoadText:
  00078	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0007d	90		 npad	 1
$LN30@R_LoadText:
  0007e	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00084	c6 44 0d e0 00	 mov	 BYTE PTR _name$[ebp+ecx], 0

; 325  : 	pnames = W_CacheLumpName("PNAMES", PU_STATIC);

  00089	6a 01		 push	 1
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_06JPDOBCIP@PNAMES@
  00090	e8 00 00 00 00	 call	 _W_CacheLumpName
  00095	83 c4 08	 add	 esp, 8
  00098	89 45 d8	 mov	 DWORD PTR _pnames$[ebp], eax

; 326  : 	M_Memcpy(&nummappatches, pnames, sizeof(UINT32));

  0009b	6a 04		 push	 4
  0009d	8b 45 d8	 mov	 eax, DWORD PTR _pnames$[ebp]
  000a0	50		 push	 eax
  000a1	8d 4d c4	 lea	 ecx, DWORD PTR _nummappatches$[ebp]
  000a4	51		 push	 ecx
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 327  : 	nummappatches = LONG(nummappatches);

  000ae	8b 45 c4	 mov	 eax, DWORD PTR _nummappatches$[ebp]
  000b1	89 45 c4	 mov	 DWORD PTR _nummappatches$[ebp], eax

; 328  : 	name_p = pnames+4;

  000b4	8b 45 d8	 mov	 eax, DWORD PTR _pnames$[ebp]
  000b7	83 c0 04	 add	 eax, 4
  000ba	89 45 dc	 mov	 DWORD PTR _name_p$[ebp], eax

; 329  : 	patchlookup = malloc(nummappatches*sizeof (*patchlookup));

  000bd	8b 45 c4	 mov	 eax, DWORD PTR _nummappatches$[ebp]
  000c0	c1 e0 02	 shl	 eax, 2
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _malloc
  000c9	83 c4 04	 add	 esp, 4
  000cc	89 45 b4	 mov	 DWORD PTR _patchlookup$[ebp], eax

; 330  : 	if (!patchlookup)

  000cf	83 7d b4 00	 cmp	 DWORD PTR _patchlookup$[ebp], 0
  000d3	75 14		 jne	 SHORT $LN22@R_LoadText

; 331  : 		I_Error("Could not malloc %"PRIdS" bytes for patchloopup", (size_t)nummappatches*sizeof (*patchlookup));

  000d5	8b 45 c4	 mov	 eax, DWORD PTR _nummappatches$[ebp]
  000d8	c1 e0 02	 shl	 eax, 2
  000db	50		 push	 eax
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LCCIFPHH@Could?5not?5malloc?5?$CFIu?5bytes?5for?5@
  000e1	e8 00 00 00 00	 call	 _I_Error
  000e6	83 c4 08	 add	 esp, 8
$LN22@R_LoadText:

; 332  : 
; 333  : 	for (i = 0; i < nummappatches; i++)

  000e9	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000f0	eb 09		 jmp	 SHORT $LN7@R_LoadText
$LN5@R_LoadText:
  000f2	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 b0	 mov	 DWORD PTR _i$[ebp], eax
$LN7@R_LoadText:
  000fb	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  000fe	3b 45 c4	 cmp	 eax, DWORD PTR _nummappatches$[ebp]
  00101	73 2f		 jae	 SHORT $LN6@R_LoadText

; 334  : 	{
; 335  : 		strncpy(name, name_p+i*8, 8);

  00103	6a 08		 push	 8
  00105	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  00108	8b 4d dc	 mov	 ecx, DWORD PTR _name_p$[ebp]
  0010b	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  0010e	52		 push	 edx
  0010f	8d 45 e0	 lea	 eax, DWORD PTR _name$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 _strncpy
  00118	83 c4 0c	 add	 esp, 12			; 0000000cH

; 336  : 		patchlookup[i] = W_CheckNumForName(name);

  0011b	8d 45 e0	 lea	 eax, DWORD PTR _name$[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _W_CheckNumForName
  00124	83 c4 04	 add	 esp, 4
  00127	8b 4d b0	 mov	 ecx, DWORD PTR _i$[ebp]
  0012a	8b 55 b4	 mov	 edx, DWORD PTR _patchlookup$[ebp]
  0012d	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 337  : 	}

  00130	eb c0		 jmp	 SHORT $LN5@R_LoadText
$LN6@R_LoadText:

; 338  : 	Z_Free(pnames);

  00132	8b 45 d8	 mov	 eax, DWORD PTR _pnames$[ebp]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _Z_Free
  0013b	83 c4 04	 add	 esp, 4

; 339  : 
; 340  : 	// Load the map texture definitions from textures.lmp.
; 341  : 	// The data is contained in one or two lumps, TEXTURE1 and TEXTURE2.
; 342  : 	maptex = maptex1 = W_CacheLumpName("TEXTURE1", PU_STATIC);

  0013e	6a 01		 push	 1
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_08PBOLBFJI@TEXTURE1@
  00145	e8 00 00 00 00	 call	 _W_CacheLumpName
  0014a	83 c4 08	 add	 esp, 8
  0014d	89 45 cc	 mov	 DWORD PTR _maptex1$[ebp], eax
  00150	8b 45 cc	 mov	 eax, DWORD PTR _maptex1$[ebp]
  00153	89 45 d4	 mov	 DWORD PTR _maptex$[ebp], eax

; 343  : 	numtextures1 = LONG(*maptex);

  00156	8b 45 d4	 mov	 eax, DWORD PTR _maptex$[ebp]
  00159	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015b	89 4d c0	 mov	 DWORD PTR _numtextures1$[ebp], ecx

; 344  : 	maxoff = W_LumpLength(W_GetNumForName("TEXTURE1"));

  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_08PBOLBFJI@TEXTURE1@
  00163	e8 00 00 00 00	 call	 _W_GetNumForName
  00168	83 c4 04	 add	 esp, 4
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 _W_LumpLength
  00171	83 c4 04	 add	 esp, 4
  00174	89 45 ac	 mov	 DWORD PTR _maxoff$[ebp], eax

; 345  : 	directory = maptex+1;

  00177	8b 45 d4	 mov	 eax, DWORD PTR _maptex$[ebp]
  0017a	83 c0 04	 add	 eax, 4
  0017d	89 45 c8	 mov	 DWORD PTR _directory$[ebp], eax

; 346  : 
; 347  : 	if (W_CheckNumForName("TEXTURE2") != LUMPERROR)

  00180	68 00 00 00 00	 push	 OFFSET ??_C@_08NKMGEGFL@TEXTURE2@
  00185	e8 00 00 00 00	 call	 _W_CheckNumForName
  0018a	83 c4 04	 add	 esp, 4
  0018d	83 f8 ff	 cmp	 eax, -1
  00190	74 35		 je	 SHORT $LN23@R_LoadText

; 348  : 	{
; 349  : 		maptex2 = W_CacheLumpName("TEXTURE2", PU_STATIC);

  00192	6a 01		 push	 1
  00194	68 00 00 00 00	 push	 OFFSET ??_C@_08NKMGEGFL@TEXTURE2@
  00199	e8 00 00 00 00	 call	 _W_CacheLumpName
  0019e	83 c4 08	 add	 esp, 8
  001a1	89 45 d0	 mov	 DWORD PTR _maptex2$[ebp], eax

; 350  : 		numtextures2 = LONG(*maptex2);

  001a4	8b 45 d0	 mov	 eax, DWORD PTR _maptex2$[ebp]
  001a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a9	89 4d bc	 mov	 DWORD PTR _numtextures2$[ebp], ecx

; 351  : 		maxoff2 = W_LumpLength(W_GetNumForName("TEXTURE2"));

  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_08NKMGEGFL@TEXTURE2@
  001b1	e8 00 00 00 00	 call	 _W_GetNumForName
  001b6	83 c4 04	 add	 esp, 4
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _W_LumpLength
  001bf	83 c4 04	 add	 esp, 4
  001c2	89 45 a8	 mov	 DWORD PTR _maxoff2$[ebp], eax

; 352  : 	}

  001c5	eb 14		 jmp	 SHORT $LN24@R_LoadText
$LN23@R_LoadText:

; 353  : 	else
; 354  : 	{
; 355  : 		maptex2 = NULL;

  001c7	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _maptex2$[ebp], 0

; 356  : 		maxoff2 = numtextures2 = 0;

  001ce	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _numtextures2$[ebp], 0
  001d5	8b 45 bc	 mov	 eax, DWORD PTR _numtextures2$[ebp]
  001d8	89 45 a8	 mov	 DWORD PTR _maxoff2$[ebp], eax
$LN24@R_LoadText:

; 357  : 	}
; 358  : 	numtextures = numtextures1 + numtextures2;

  001db	8b 45 c0	 mov	 eax, DWORD PTR _numtextures1$[ebp]
  001de	03 45 bc	 add	 eax, DWORD PTR _numtextures2$[ebp]
  001e1	a3 00 00 00 00	 mov	 DWORD PTR _numtextures, eax

; 359  : 
; 360  : 	// there are actually 5 buffers allocated in one for convenience
; 361  : 	Z_Free(textures);

  001e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _textures
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _Z_Free
  001f1	83 c4 04	 add	 esp, 4

; 362  : 
; 363  : 	textures = Z_Malloc(numtextures*sizeof(void *)*5, PU_STATIC, NULL);

  001f4	6a 00		 push	 0
  001f6	6a 00		 push	 0
  001f8	6a 01		 push	 1
  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _numtextures
  001ff	c1 e0 02	 shl	 eax, 2
  00202	6b c8 05	 imul	 ecx, eax, 5
  00205	51		 push	 ecx
  00206	e8 00 00 00 00	 call	 _Z_MallocAlign
  0020b	83 c4 10	 add	 esp, 16			; 00000010H
  0020e	a3 00 00 00 00	 mov	 DWORD PTR _textures, eax

; 364  : 
; 365  : 	texturecolumnofs = (void *)((UINT8 *)textures + numtextures*sizeof(void *)*1);

  00213	a1 00 00 00 00	 mov	 eax, DWORD PTR _numtextures
  00218	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  0021e	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00221	89 15 00 00 00
	00		 mov	 DWORD PTR _texturecolumnofs, edx

; 366  : 	texturecache     = (void *)((UINT8 *)textures + numtextures*sizeof(void *)*2);

  00227	a1 00 00 00 00	 mov	 eax, DWORD PTR _numtextures
  0022c	c1 e0 02	 shl	 eax, 2
  0022f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  00235	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00238	89 15 00 00 00
	00		 mov	 DWORD PTR _texturecache, edx

; 367  : 	texturewidthmask = (void *)((UINT8 *)textures + numtextures*sizeof(void *)*3);

  0023e	a1 00 00 00 00	 mov	 eax, DWORD PTR _numtextures
  00243	c1 e0 02	 shl	 eax, 2
  00246	6b c8 03	 imul	 ecx, eax, 3
  00249	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _textures
  0024f	89 0d 00 00 00
	00		 mov	 DWORD PTR _texturewidthmask, ecx

; 368  : 	textureheight    = (void *)((UINT8 *)textures + numtextures*sizeof(void *)*4);

  00255	a1 00 00 00 00	 mov	 eax, DWORD PTR _numtextures
  0025a	c1 e0 02	 shl	 eax, 2
  0025d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  00263	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00266	89 15 00 00 00
	00		 mov	 DWORD PTR _textureheight, edx

; 369  : 
; 370  : 	for (i = 0; i < numtextures; i++, directory++)

  0026c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00273	eb 12		 jmp	 SHORT $LN10@R_LoadText
$LN8@R_LoadText:
  00275	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  00278	83 c0 01	 add	 eax, 1
  0027b	89 45 b0	 mov	 DWORD PTR _i$[ebp], eax
  0027e	8b 4d c8	 mov	 ecx, DWORD PTR _directory$[ebp]
  00281	83 c1 04	 add	 ecx, 4
  00284	89 4d c8	 mov	 DWORD PTR _directory$[ebp], ecx
$LN10@R_LoadText:
  00287	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  0028a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numtextures
  00290	0f 83 b9 01 00
	00		 jae	 $LN9@R_LoadText

; 371  : 	{
; 372  : 		if (i == numtextures1)

  00296	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  00299	3b 45 c0	 cmp	 eax, DWORD PTR _numtextures1$[ebp]
  0029c	75 15		 jne	 SHORT $LN25@R_LoadText

; 373  : 		{
; 374  : 			// Start looking in second texture file.
; 375  : 			maptex = maptex2;

  0029e	8b 45 d0	 mov	 eax, DWORD PTR _maptex2$[ebp]
  002a1	89 45 d4	 mov	 DWORD PTR _maptex$[ebp], eax

; 376  : 			maxoff = maxoff2;

  002a4	8b 45 a8	 mov	 eax, DWORD PTR _maxoff2$[ebp]
  002a7	89 45 ac	 mov	 DWORD PTR _maxoff$[ebp], eax

; 377  : 			directory = maptex+1;

  002aa	8b 45 d4	 mov	 eax, DWORD PTR _maptex$[ebp]
  002ad	83 c0 04	 add	 eax, 4
  002b0	89 45 c8	 mov	 DWORD PTR _directory$[ebp], eax
$LN25@R_LoadText:

; 378  : 		}
; 379  : 
; 380  : 		// offset to the current texture in TEXTURESn lump
; 381  : 		M_Memcpy(&offset32, directory, sizeof(UINT32));

  002b3	6a 04		 push	 4
  002b5	8b 45 c8	 mov	 eax, DWORD PTR _directory$[ebp]
  002b8	50		 push	 eax
  002b9	8d 4d b8	 lea	 ecx, DWORD PTR _offset32$[ebp]
  002bc	51		 push	 ecx
  002bd	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  002c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 382  : 		offset = LONG(offset32);

  002c6	8b 45 b8	 mov	 eax, DWORD PTR _offset32$[ebp]
  002c9	89 45 a4	 mov	 DWORD PTR _offset$[ebp], eax

; 383  : 
; 384  : 		if (offset > maxoff)

  002cc	8b 45 a4	 mov	 eax, DWORD PTR _offset$[ebp]
  002cf	3b 45 ac	 cmp	 eax, DWORD PTR _maxoff$[ebp]
  002d2	76 0d		 jbe	 SHORT $LN26@R_LoadText

; 385  : 			I_Error("R_LoadTextures: bad texture directory");

  002d4	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BDOCKIIL@R_LoadTextures?3?5bad?5texture?5dir@
  002d9	e8 00 00 00 00	 call	 _I_Error
  002de	83 c4 04	 add	 esp, 4
$LN26@R_LoadText:

; 386  : 
; 387  : 		// maptexture describes texture name, size, and
; 388  : 		// used patches in z order from bottom to top
; 389  : 		mtexture = (maptexture_t *)((UINT8 *)maptex + offset);

  002e1	8b 45 d4	 mov	 eax, DWORD PTR _maptex$[ebp]
  002e4	03 45 a4	 add	 eax, DWORD PTR _offset$[ebp]
  002e7	89 45 f8	 mov	 DWORD PTR _mtexture$[ebp], eax

; 390  : 
; 391  : 		texture = textures[i] = Z_Malloc(sizeof (texture_t)

  002ea	6a 00		 push	 0
  002ec	6a 00		 push	 0
  002ee	6a 01		 push	 1
  002f0	8b 45 f8	 mov	 eax, DWORD PTR _mtexture$[ebp]
  002f3	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  002f7	8d 14 cd 10 00
	00 00		 lea	 edx, DWORD PTR [ecx*8+16]
  002fe	52		 push	 edx
  002ff	e8 00 00 00 00	 call	 _Z_MallocAlign
  00304	83 c4 10	 add	 esp, 16			; 00000010H
  00307	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv187[ebp], eax
  0030d	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  00310	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _textures
  00316	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv187[ebp]
  0031c	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  0031f	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv187[ebp]
  00325	89 45 f4	 mov	 DWORD PTR _texture$[ebp], eax

; 392  : 			+ sizeof (texpatch_t)*(SHORT(mtexture->patchcount)-1), PU_STATIC, NULL);
; 393  : 
; 394  : 		texture->width = SHORT(mtexture->width);

  00328	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  0032b	8b 4d f8	 mov	 ecx, DWORD PTR _mtexture$[ebp]
  0032e	66 8b 51 0c	 mov	 dx, WORD PTR [ecx+12]
  00332	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 395  : 		texture->height = SHORT(mtexture->height);

  00336	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  00339	8b 4d f8	 mov	 ecx, DWORD PTR _mtexture$[ebp]
  0033c	66 8b 51 0e	 mov	 dx, WORD PTR [ecx+14]
  00340	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 396  : 		texture->patchcount = SHORT(mtexture->patchcount);

  00344	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  00347	8b 4d f8	 mov	 ecx, DWORD PTR _mtexture$[ebp]
  0034a	66 8b 51 14	 mov	 dx, WORD PTR [ecx+20]
  0034e	66 89 50 0c	 mov	 WORD PTR [eax+12], dx

; 397  : 
; 398  : 		M_Memcpy(texture->name, mtexture->name, sizeof (texture->name));

  00352	6a 08		 push	 8
  00354	8b 45 f8	 mov	 eax, DWORD PTR _mtexture$[ebp]
  00357	50		 push	 eax
  00358	8b 4d f4	 mov	 ecx, DWORD PTR _texture$[ebp]
  0035b	51		 push	 ecx
  0035c	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00362	83 c4 0c	 add	 esp, 12			; 0000000cH

; 399  : 		mpatch = &mtexture->patches[0];

  00365	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0036a	6b c8 00	 imul	 ecx, eax, 0
  0036d	8b 55 f8	 mov	 edx, DWORD PTR _mtexture$[ebp]
  00370	8d 44 0a 16	 lea	 eax, DWORD PTR [edx+ecx+22]
  00374	89 45 f0	 mov	 DWORD PTR _mpatch$[ebp], eax

; 400  : 		patch = &texture->patches[0];

  00377	b8 08 00 00 00	 mov	 eax, 8
  0037c	6b c8 00	 imul	 ecx, eax, 0
  0037f	8b 55 f4	 mov	 edx, DWORD PTR _texture$[ebp]
  00382	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00386	89 45 ec	 mov	 DWORD PTR _patch$[ebp], eax

; 401  : 
; 402  : 		for (j = 0; j < texture->patchcount; j++, mpatch++, patch++)

  00389	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00390	eb 1b		 jmp	 SHORT $LN13@R_LoadText
$LN11@R_LoadText:
  00392	8b 45 a0	 mov	 eax, DWORD PTR _j$[ebp]
  00395	83 c0 01	 add	 eax, 1
  00398	89 45 a0	 mov	 DWORD PTR _j$[ebp], eax
  0039b	8b 4d f0	 mov	 ecx, DWORD PTR _mpatch$[ebp]
  0039e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  003a1	89 4d f0	 mov	 DWORD PTR _mpatch$[ebp], ecx
  003a4	8b 55 ec	 mov	 edx, DWORD PTR _patch$[ebp]
  003a7	83 c2 08	 add	 edx, 8
  003aa	89 55 ec	 mov	 DWORD PTR _patch$[ebp], edx
$LN13@R_LoadText:
  003ad	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  003b0	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  003b4	39 4d a0	 cmp	 DWORD PTR _j$[ebp], ecx
  003b7	7d 49		 jge	 SHORT $LN12@R_LoadText

; 403  : 		{
; 404  : 			patch->originx = SHORT(mpatch->originx);

  003b9	8b 45 ec	 mov	 eax, DWORD PTR _patch$[ebp]
  003bc	8b 4d f0	 mov	 ecx, DWORD PTR _mpatch$[ebp]
  003bf	66 8b 11	 mov	 dx, WORD PTR [ecx]
  003c2	66 89 10	 mov	 WORD PTR [eax], dx

; 405  : 			patch->originy = SHORT(mpatch->originy);

  003c5	8b 45 ec	 mov	 eax, DWORD PTR _patch$[ebp]
  003c8	8b 4d f0	 mov	 ecx, DWORD PTR _mpatch$[ebp]
  003cb	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  003cf	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 406  : 			patch->patch = patchlookup[SHORT(mpatch->patch)];

  003d3	8b 45 f0	 mov	 eax, DWORD PTR _mpatch$[ebp]
  003d6	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  003da	8b 55 ec	 mov	 edx, DWORD PTR _patch$[ebp]
  003dd	8b 45 b4	 mov	 eax, DWORD PTR _patchlookup$[ebp]
  003e0	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  003e3	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 407  : 			if (patch->patch == LUMPERROR)

  003e6	8b 45 ec	 mov	 eax, DWORD PTR _patch$[ebp]
  003e9	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  003ed	75 11		 jne	 SHORT $LN27@R_LoadText

; 408  : 				I_Error("R_LoadTextures: Missing patch in texture %s", texture->name);

  003ef	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  003f2	50		 push	 eax
  003f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@IACFFKK@R_LoadTextures?3?5Missing?5patch?5i@
  003f8	e8 00 00 00 00	 call	 _I_Error
  003fd	83 c4 08	 add	 esp, 8
$LN27@R_LoadText:

; 409  : 		}

  00400	eb 90		 jmp	 SHORT $LN11@R_LoadText
$LN12@R_LoadText:

; 410  : 
; 411  : 		j = 1;

  00402	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR _j$[ebp], 1
$LN14@R_LoadText:

; 412  : 		while (j*2 <= texture->width)

  00409	8b 45 a0	 mov	 eax, DWORD PTR _j$[ebp]
  0040c	d1 e0		 shl	 eax, 1
  0040e	8b 4d f4	 mov	 ecx, DWORD PTR _texture$[ebp]
  00411	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  00415	3b c2		 cmp	 eax, edx
  00417	7f 0a		 jg	 SHORT $LN15@R_LoadText

; 413  : 			j <<= 1;

  00419	8b 45 a0	 mov	 eax, DWORD PTR _j$[ebp]
  0041c	d1 e0		 shl	 eax, 1
  0041e	89 45 a0	 mov	 DWORD PTR _j$[ebp], eax
  00421	eb e6		 jmp	 SHORT $LN14@R_LoadText
$LN15@R_LoadText:

; 414  : 
; 415  : 		texturewidthmask[i] = j - 1;

  00423	8b 45 a0	 mov	 eax, DWORD PTR _j$[ebp]
  00426	83 e8 01	 sub	 eax, 1
  00429	8b 4d b0	 mov	 ecx, DWORD PTR _i$[ebp]
  0042c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _texturewidthmask
  00432	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 416  : 		textureheight[i] = texture->height<<FRACBITS;

  00435	8b 45 f4	 mov	 eax, DWORD PTR _texture$[ebp]
  00438	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  0043c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0043f	8b 55 b0	 mov	 edx, DWORD PTR _i$[ebp]
  00442	a1 00 00 00 00	 mov	 eax, DWORD PTR _textureheight
  00447	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 417  : 	}

  0044a	e9 26 fe ff ff	 jmp	 $LN8@R_LoadText
$LN9@R_LoadText:

; 418  : 
; 419  : 	free(patchlookup);

  0044f	8b 45 b4	 mov	 eax, DWORD PTR _patchlookup$[ebp]
  00452	50		 push	 eax
  00453	e8 00 00 00 00	 call	 _free
  00458	83 c4 04	 add	 esp, 4

; 420  : 	Z_Free(maptex1);

  0045b	8b 45 cc	 mov	 eax, DWORD PTR _maptex1$[ebp]
  0045e	50		 push	 eax
  0045f	e8 00 00 00 00	 call	 _Z_Free
  00464	83 c4 04	 add	 esp, 4

; 421  : 	Z_Free(maptex2);

  00467	8b 45 d0	 mov	 eax, DWORD PTR _maptex2$[ebp]
  0046a	50		 push	 eax
  0046b	e8 00 00 00 00	 call	 _Z_Free
  00470	83 c4 04	 add	 esp, 4

; 422  : 
; 423  : 	// This takes 90% of texture loading time. Precalculate whatever possible.
; 424  : 	for (i = 0; i < numtextures; i++)

  00473	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0047a	eb 09		 jmp	 SHORT $LN18@R_LoadText
$LN16@R_LoadText:
  0047c	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  0047f	83 c0 01	 add	 eax, 1
  00482	89 45 b0	 mov	 DWORD PTR _i$[ebp], eax
$LN18@R_LoadText:
  00485	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  00488	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numtextures
  0048e	73 12		 jae	 SHORT $LN17@R_LoadText

; 425  : 		texturecache[i] = NULL;

  00490	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  00493	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturecache
  00499	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
  004a0	eb da		 jmp	 SHORT $LN16@R_LoadText
$LN17@R_LoadText:

; 426  : 
; 427  : 	// Create translation table for global animation.
; 428  : 	Z_Free(texturetranslation);

  004a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _texturetranslation
  004a7	50		 push	 eax
  004a8	e8 00 00 00 00	 call	 _Z_Free
  004ad	83 c4 04	 add	 esp, 4

; 429  : 
; 430  : 	texturetranslation = Z_Malloc((numtextures+1)*sizeof(*texturetranslation), PU_STATIC, NULL);

  004b0	6a 00		 push	 0
  004b2	6a 00		 push	 0
  004b4	6a 01		 push	 1
  004b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _numtextures
  004bb	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  004c2	51		 push	 ecx
  004c3	e8 00 00 00 00	 call	 _Z_MallocAlign
  004c8	83 c4 10	 add	 esp, 16			; 00000010H
  004cb	a3 00 00 00 00	 mov	 DWORD PTR _texturetranslation, eax

; 431  : 
; 432  : 	for (i = 0; i < numtextures; i++)

  004d0	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004d7	eb 09		 jmp	 SHORT $LN21@R_LoadText
$LN19@R_LoadText:
  004d9	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  004dc	83 c0 01	 add	 eax, 1
  004df	89 45 b0	 mov	 DWORD PTR _i$[ebp], eax
$LN21@R_LoadText:
  004e2	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  004e5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numtextures
  004eb	73 11		 jae	 SHORT $LN20@R_LoadText

; 433  : 		texturetranslation[i] = (INT32)i;

  004ed	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  004f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _texturetranslation
  004f6	8b 55 b0	 mov	 edx, DWORD PTR _i$[ebp]
  004f9	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  004fc	eb db		 jmp	 SHORT $LN19@R_LoadText
$LN20@R_LoadText:

; 434  : }

  004fe	5f		 pop	 edi
  004ff	5e		 pop	 esi
  00500	5b		 pop	 ebx
  00501	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00504	33 cd		 xor	 ecx, ebp
  00506	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0050b	8b e5		 mov	 esp, ebp
  0050d	5d		 pop	 ebp
  0050e	c3		 ret	 0
_R_LoadTextures ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT ___snprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
___snprintf PROC					; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 __vsnprintf
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1952 :         __crt_va_end(_ArgList);

  0002a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1953 :         return _Result;

  00031	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1954 :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
___snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnprintf PROC					; COMDAT

; 1411 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1413 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1391 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1397 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
