; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\p_mobj.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_cv_itemrespawntime
PUBLIC	_cv_itemrespawn
PUBLIC	_cv_flagtime
PUBLIC	_cv_suddendeath
PUBLIC	_cv_splats
PUBLIC	_cv_viewheight
PUBLIC	??_C@_03KGHEHEMH@MIN@				; `string'
PUBLIC	??_C@_03LEPPJAKI@MAX@				; `string'
PUBLIC	??_C@_0L@MAFIMFPM@viewheight@			; `string'
PUBLIC	??_C@_02OFIBGMBD@41@				; `string'
PUBLIC	??_C@_06DMIDAHGF@splats@			; `string'
PUBLIC	??_C@_02IAAGKKDJ@On@				; `string'
PUBLIC	_numshields
PUBLIC	??_C@_0BA@BKMGIODC@respawnitemtime@		; `string'
PUBLIC	??_C@_02PJNFELNH@30@				; `string'
PUBLIC	??_C@_0M@GJEFPPLD@respawnitem@			; `string'
PUBLIC	??_C@_03GCDBBDDL@Off@				; `string'
PUBLIC	??_C@_08JLACOHCP@flagtime@			; `string'
PUBLIC	??_C@_0M@HNHLHNNE@suddendeath@			; `string'
EXTRN	_CV_OnOff:BYTE
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_actioncachehead:BYTE:010H
COMM	_huntemeralds:DWORD:040H
COMM	_numhuntemeralds:DWORD
COMM	_playerstatetics:DWORD:0740H
COMM	_itemrespawnque:DWORD:0400H
COMM	_itemrespawntime:DWORD:0400H
COMM	_iquehead:DWORD
COMM	_iquetail:DWORD
COMM	_shields:DWORD:040H
_DATA	ENDS
_BSS	SEGMENT
_numshields DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0M@HNHLHNNE@suddendeath@
CONST	SEGMENT
??_C@_0M@HNHLHNNE@suddendeath@ DB 'suddendeath', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JLACOHCP@flagtime@
CONST	SEGMENT
??_C@_08JLACOHCP@flagtime@ DB 'flagtime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDBBDDL@Off@
CONST	SEGMENT
??_C@_03GCDBBDDL@Off@ DB 'Off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GJEFPPLD@respawnitem@
CONST	SEGMENT
??_C@_0M@GJEFPPLD@respawnitem@ DB 'respawnitem', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJNFELNH@30@
CONST	SEGMENT
??_C@_02PJNFELNH@30@ DB '30', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BKMGIODC@respawnitemtime@
CONST	SEGMENT
??_C@_0BA@BKMGIODC@respawnitemtime@ DB 'respawnitemtime', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_xspeed	DD	010000H
	DD	0b798H
	DD	00H
	DD	0ffff4868H
	DD	0ffff0000H
	DD	0ffff4868H
	DD	00H
	DD	0b798H
_yspeed	DD	00H
	DD	0b798H
	DD	010000H
	DD	0b798H
	DD	00H
	DD	0ffff4868H
	DD	0ffff0000H
	DD	0ffff4868H
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DMIDAHGF@splats@
CONST	SEGMENT
??_C@_06DMIDAHGF@splats@ DB 'splats', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OFIBGMBD@41@
CONST	SEGMENT
??_C@_02OFIBGMBD@41@ DB '41', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MAFIMFPM@viewheight@
CONST	SEGMENT
??_C@_0L@MAFIMFPM@viewheight@ DB 'viewheight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LEPPJAKI@MAX@
CONST	SEGMENT
??_C@_03LEPPJAKI@MAX@ DB 'MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KGHEHEMH@MIN@
CONST	SEGMENT
??_C@_03KGHEHEMH@MIN@ DB 'MIN', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_cv_itemrespawntime DD FLAT:??_C@_0BA@BKMGIODC@respawnitemtime@
	DD	FLAT:??_C@_02PJNFELNH@30@
	DD	0804H
	DD	FLAT:_respawnitemtime_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_itemrespawn DD FLAT:??_C@_0M@GJEFPPLD@respawnitem@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	06H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_Respawn_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_flagtime DD	FLAT:??_C@_08JLACOHCP@flagtime@
	DD	FLAT:??_C@_02PJNFELNH@30@
	DD	04H
	DD	FLAT:_flagtime_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_suddendeath DD FLAT:??_C@_0M@HNHLHNNE@suddendeath@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_splats DD	FLAT:??_C@_06DMIDAHGF@splats@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_viewheight DD FLAT:??_C@_0L@MAFIMFPM@viewheight@
	DD	FLAT:??_C@_02OFIBGMBD@41@
	DD	00H
	DD	FLAT:_viewheight_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_viewheight_cons_t DD 010H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	038H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_respawnitemtime_cons_t DD 01H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	012cH
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_flagtime_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	012cH
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	_P_InitCachedActions
PUBLIC	_P_RunCachedActions
PUBLIC	_P_AddCachedAction
PUBLIC	_P_MobjCheckWater
PUBLIC	_P_SpawnMapThing
PUBLIC	_P_SpawnPlayer
PUBLIC	_P_SpawnStarpostPlayer
PUBLIC	_P_SpawnHoopsAndRings
PUBLIC	_P_SpawnHoopOfSomething
PUBLIC	_P_SpawnPrecipitation
PUBLIC	_P_SpawnParaloop
PUBLIC	_P_SupermanLook4Players
PUBLIC	_P_DestroyRobots
PUBLIC	_P_SnowThinker
PUBLIC	_P_RainThinker
PUBLIC	_P_NullPrecipThinker
PUBLIC	_P_RemovePrecipMobj
PUBLIC	_P_SetScale
PUBLIC	_P_XYMovement
PUBLIC	_P_EmeraldManager
PUBLIC	_P_RespawnSpecials
PUBLIC	_P_SpawnMobj
PUBLIC	_P_RecalcPrecipInSector
PUBLIC	_P_RemoveMobj
PUBLIC	_P_RemoveSavegameMobj
PUBLIC	_P_SetPlayerMobjState
PUBLIC	_P_SetMobjState
PUBLIC	_P_RunShields
PUBLIC	_P_MobjThinker
PUBLIC	_P_RailThinker
PUBLIC	_P_PushableThinker
PUBLIC	_P_SceneryThinker
PUBLIC	_P_InsideANonSolidFFloor
PUBLIC	_P_SpawnMissile
PUBLIC	_P_SpawnXYZMissile
PUBLIC	_P_SPMAngle
PUBLIC	_P_ColorTeamMissile
PUBLIC	_P_CameraThinker
PUBLIC	_P_Attract
PUBLIC	_P_GetClosestAxis
PUBLIC	_P_SetMobjStateNF
PUBLIC	_P_CheckMissileSpawn
PUBLIC	_P_ExplodeMissile
PUBLIC	_P_CheckGravity
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0CF@DDAHKJPF@P_EmeraldManager?3?5numtospawn?5is@ ; `string'
PUBLIC	??_C@_0DJ@DLFIOOBB@Error?3?5Boss?53?5was?5unable?5to?5fin@ ; `string'
PUBLIC	??_C@_0DO@BIMLJDCE@Error?3?5Boss?53?5waypoint?5has?5no?5s@ ; `string'
PUBLIC	??_C@_0CK@BLACACMH@BlackEggman?5unable?5to?5find?5wayp@ ; `string'
PUBLIC	??_C@_0BO@MLGIMBMG@ERROR?3?5No?5axis?5points?5found?$CB?6@ ; `string'
PUBLIC	??_C@_0CL@LHKOFENN@You?5forgot?5to?5put?5axis?5points?5i@ ; `string'
PUBLIC	??_C@_0CE@OBMIMBDL@The?5red?5flag?5has?5returned?5to?5ba@ ; `string'
PUBLIC	??_C@_0CF@DECHKNBK@The?5blue?5flag?5has?5returned?5to?5b@ ; `string'
PUBLIC	??_C@_0CP@DEKEAOPC@?$ACP_SpawnMapThing?3?5Unknown?5type?5@ ; `string'
PUBLIC	??_C@_0FJ@EIIDKMOD@Mace?5chain?5?$CImapthing?5?$CD?$CFIu?$CJ?5need@ ; `string'
PUBLIC	??_C@_0BN@NKNBKNLA@Mace?5Chain?5?$CImapthing?5?$CD?$CFIu?$CJ?3?6@ ; `string'
PUBLIC	??_C@_0O@HPLDFMCL@Length?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_0N@POLBKJKB@Speed?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_0O@IHFCAILK@Xspeed?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_0O@GGDMMMBH@Zspeed?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_0BC@FJLCCLED@startangle?5is?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BA@LMPIBDCF@maxspeed?5is?5?$CFd?6@	; `string'
PUBLIC	??_C@_0CH@FDNKKANJ@Only?5one?5flag?5per?5team?5allowed?5@ ; `string'
PUBLIC	??_C@_0FD@EJACLLOD@P_SpawnXYZMissile?5?9?5projectile?5@ ; `string'
PUBLIC	??_C@_0FA@LBLLDKIN@P_SpawnMissile?5?9?5projectile?5has@ ; `string'
EXTRN	_memset:PROC
EXTRN	_abs:PROC
EXTRN	_rand:PROC
EXTRN	_atoi:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_AngleFixed:PROC
EXTRN	_FixedAngle:PROC
EXTRN	_A_FaceTarget:PROC
EXTRN	_A_BossDeath:PROC
EXTRN	_A_LobShot:PROC
EXTRN	_A_LinedefExecute:PROC
EXTRN	_A_Boss1Chase:PROC
EXTRN	_A_Boss2Chase:PROC
EXTRN	_A_Boss2Pogo:PROC
EXTRN	_A_BossJetFume:PROC
EXTRN	_CV_SetValue:PROC
EXTRN	_SV_SpawnPlayer:PROC
EXTRN	_G_PlayerReborn:PROC
EXTRN	_G_IsSpecialStage:PROC
EXTRN	_P_MobjInsidePolyobj:PROC
EXTRN	_ST_Start:PROC
EXTRN	_HU_Start:PROC
EXTRN	_P_RemoveThinkerDelayed:PROC
EXTRN	_P_SetTarget:PROC
EXTRN	_P_AproxDistance:PROC
EXTRN	_P_UnsetPrecipThingPosition:PROC
EXTRN	_P_SetPrecipitationThingPosition:PROC
EXTRN	_P_SceneryTryMove:PROC
EXTRN	_P_AddThinker:PROC
EXTRN	_P_RemoveThinker:PROC
EXTRN	_P_GetPlayerControlDirection:PROC
EXTRN	_P_ResetCamera:PROC
EXTRN	_P_TryCameraMove:PROC
EXTRN	_P_SlideCameraMove:PROC
EXTRN	_P_IsObjectOnGround:PROC
EXTRN	_P_SpawnGhostMobj:PROC
EXTRN	_P_ResetScore:PROC
EXTRN	_P_FreezeObjectplace:PROC
EXTRN	_P_DoPlayerExit:PROC
EXTRN	_P_InstaThrust:PROC
EXTRN	_P_ReturnThrustX:PROC
EXTRN	_P_ReturnThrustY:PROC
EXTRN	_P_HomingAttack:PROC
EXTRN	_P_LookForPlayers:PROC
EXTRN	_P_UnsetThingPosition:PROC
EXTRN	_P_SetThingPosition:PROC
EXTRN	_P_CheckPosition:PROC
EXTRN	_P_CheckCameraPosition:PROC
EXTRN	_P_TryMove:PROC
EXTRN	_P_SlideMove:PROC
EXTRN	_P_BounceMove:PROC
EXTRN	_P_CheckSight:PROC
EXTRN	_P_DelSeclist:PROC
EXTRN	_P_DelPrecipSeclist:PROC
EXTRN	_P_AimLineAttack:PROC
EXTRN	_P_FloorzAtPos:PROC
EXTRN	_P_DamageMobj:PROC
EXTRN	_P_KillMobj:PROC
EXTRN	_P_FindSpecialLineFromTag:PROC
EXTRN	_P_SwitchWeather:PROC
EXTRN	_P_LinedefExecute:PROC
EXTRN	_P_SpawnLightningFlash:PROC
EXTRN	_EV_CrumbleChain:PROC
EXTRN	_EV_BounceSector:PROC
EXTRN	_EV_StartCrumble:PROC
EXTRN	_EV_MarioBlock:PROC
EXTRN	_P_ThingOnSpecial3DFloor:PROC
EXTRN	_P_CheckOnmobj:PROC
EXTRN	_R_PointToAngle:PROC
EXTRN	_R_PointToAngle2:PROC
EXTRN	_R_PointToDist2:PROC
EXTRN	_R_PointInSubsector:PROC
EXTRN	_R_IsPointInSubsector:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_S_StartSoundAtVolume:PROC
EXTRN	_S_StopSound:PROC
EXTRN	_S_CalculateSoundDistance:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_CallocAlign:PROC
EXTRN	_M_Random:PROC
EXTRN	_P_Random:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_ultimatemode:BYTE
EXTRN	_M_Memcpy:DWORD
EXTRN	_finesine:BYTE
EXTRN	_finecosine:DWORD
EXTRN	_states:BYTE
EXTRN	_mobjinfo:BYTE
EXTRN	_runemeraldmanager:DWORD
EXTRN	_numstarposts:DWORD
EXTRN	_gamemap:WORD
EXTRN	_maptol:WORD
EXTRN	_globalweather:BYTE
EXTRN	_curWeather:DWORD
EXTRN	_modifiedgame:DWORD
EXTRN	_savemoddata:DWORD
EXTRN	_timeattacking:DWORD
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_nosound:DWORD
EXTRN	_sound_disabled:DWORD
EXTRN	_postimgtype:DWORD
EXTRN	_consoleplayer:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_redflag:DWORD
EXTRN	_blueflag:DWORD
EXTRN	_rflagpoint:DWORD
EXTRN	_bflagpoint:DWORD
EXTRN	_emeralds:WORD
EXTRN	_nummaprings:DWORD
EXTRN	_tokenlist:DWORD
EXTRN	_tokenbits:DWORD
EXTRN	_CheckForBustableBlocks:DWORD
EXTRN	_CheckForMarioBlocks:DWORD
EXTRN	_CheckForFloatBob:DWORD
EXTRN	_CheckForReverseGravity:DWORD
EXTRN	_flashingtics:DWORD
EXTRN	_underwatertics:DWORD
EXTRN	_gravity:DWORD
EXTRN	_playerstarts:BYTE
EXTRN	_bluectfstarts:BYTE
EXTRN	_redctfstarts:BYTE
EXTRN	_text:BYTE
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_objectplace:BYTE
EXTRN	_cv_ringslinger:BYTE
EXTRN	_cv_specialrings:BYTE
EXTRN	_cv_powerstones:BYTE
EXTRN	_cv_matchboxes:BYTE
EXTRN	_cv_raceitemboxes:BYTE
EXTRN	_dedicated:DWORD
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_localangle:DWORD
EXTRN	_localangle2:DWORD
EXTRN	_cv_allowautoaim:BYTE
EXTRN	_leveltime:DWORD
EXTRN	_thinkercap:BYTE
EXTRN	_camera:BYTE
EXTRN	_camera2:BYTE
EXTRN	_cv_cam_height:BYTE
EXTRN	_cv_cam2_height:BYTE
EXTRN	_var1:DWORD
EXTRN	_var2:DWORD
EXTRN	_floatok:DWORD
EXTRN	_tmfloorz:DWORD
EXTRN	_tmceilingz:DWORD
EXTRN	_tmsprung:DWORD
EXTRN	_tmfloorthing:DWORD
EXTRN	_ceilingline:DWORD
EXTRN	_sector_list:DWORD
EXTRN	_precipsector_list:DWORD
EXTRN	_linetarget:DWORD
EXTRN	_deathmatchstarts:BYTE
EXTRN	_numdmstarts:DWORD
EXTRN	_numredctfstarts:DWORD
EXTRN	_numbluectfstarts:DWORD
EXTRN	_levelloading:DWORD
EXTRN	_mapthings:DWORD
EXTRN	_numsectors:DWORD
EXTRN	_sectors:DWORD
EXTRN	_numsubsectors:DWORD
EXTRN	_subsectors:DWORD
EXTRN	_numlines:DWORD
EXTRN	_lines:DWORD
EXTRN	_sides:DWORD
EXTRN	_cv_chasecam:BYTE
EXTRN	_cv_chasecam2:BYTE
EXTRN	_cv_precipdensity:BYTE
EXTRN	_skins:BYTE
EXTRN	_skyflatnum:DWORD
EXTRN	_rendermode:DWORD
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?seenstate_tab@?1??P_SetPlayerMobjState@@9@9 DD 0a00H DUP (?) ; `P_SetPlayerMobjState'::`2'::seenstate_tab
?recursion@?1??P_SetPlayerMobjState@@9@9 DD 01H DUP (?)	; `P_SetPlayerMobjState'::`2'::recursion
?seenstate_tab@?1??P_SetMobjState@@9@9 DD 0a00H DUP (?)	; `P_SetMobjState'::`2'::seenstate_tab
?recursion@?1??P_SetMobjState@@9@9 DD 01H DUP (?)	; `P_SetMobjState'::`2'::recursion
?ret@?1??VectorMatrixMultiply@@9@9 DD 04H DUP (?)	; `VectorMatrixMultiply'::`2'::ret
?ret@?1??RotateXMatrix@@9@9 DD 010H DUP (?)		; `RotateXMatrix'::`2'::ret
?ret@?1??RotateZMatrix@@9@9 DD 010H DUP (?)		; `RotateZMatrix'::`2'::ret
_BSS	ENDS
;	COMDAT ??_C@_0FA@LBLLDKIN@P_SpawnMissile?5?9?5projectile?5has@
CONST	SEGMENT
??_C@_0FA@LBLLDKIN@P_SpawnMissile?5?9?5projectile?5has@ DB 'P_SpawnMissil'
	DB	'e - projectile has 0 speed! (mobj type %d)', 0aH, 'Please upd'
	DB	'ate this SOC.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@EJACLLOD@P_SpawnXYZMissile?5?9?5projectile?5@
CONST	SEGMENT
??_C@_0FD@EJACLLOD@P_SpawnXYZMissile?5?9?5projectile?5@ DB 'P_SpawnXYZMis'
	DB	'sile - projectile has 0 speed! (mobj type %d)', 0aH, 'Please '
	DB	'update this SOC.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FDNKKANJ@Only?5one?5flag?5per?5team?5allowed?5@
CONST	SEGMENT
??_C@_0CH@FDNKKANJ@Only?5one?5flag?5per?5team?5allowed?5@ DB 'Only one fl'
	DB	'ag per team allowed in CTF!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LMPIBDCF@maxspeed?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0BA@LMPIBDCF@maxspeed?5is?5?$CFd?6@ DB 'maxspeed is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FJLCCLED@startangle?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@FJLCCLED@startangle?5is?5?$CFd?6@ DB 'startangle is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGDMMMBH@Zspeed?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@GGDMMMBH@Zspeed?5is?5?$CFd?6@ DB 'Zspeed is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IHFCAILK@Xspeed?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@IHFCAILK@Xspeed?5is?5?$CFd?6@ DB 'Xspeed is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@POLBKJKB@Speed?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0N@POLBKJKB@Speed?5is?5?$CFd?6@ DB 'Speed is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HPLDFMCL@Length?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@HPLDFMCL@Length?5is?5?$CFd?6@ DB 'Length is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NKNBKNLA@Mace?5Chain?5?$CImapthing?5?$CD?$CFIu?$CJ?3?6@
CONST	SEGMENT
??_C@_0BN@NKNBKNLA@Mace?5Chain?5?$CImapthing?5?$CD?$CFIu?$CJ?3?6@ DB 'Mac'
	DB	'e Chain (mapthing #%Iu):', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@EIIDKMOD@Mace?5chain?5?$CImapthing?5?$CD?$CFIu?$CJ?5need@
CONST	SEGMENT
??_C@_0FJ@EIIDKMOD@Mace?5chain?5?$CImapthing?5?$CD?$CFIu?$CJ?5need@ DB 'M'
	DB	'ace chain (mapthing #%Iu) needs tagged to a #9 parameter line'
	DB	' (trying to find tag %d).', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DEKEAOPC@?$ACP_SpawnMapThing?3?5Unknown?5type?5@
CONST	SEGMENT
??_C@_0CP@DEKEAOPC@?$ACP_SpawnMapThing?3?5Unknown?5type?5@ DB 02H, 'P_Spa'
	DB	'wnMapThing: Unknown type %d at (%d, %d)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DECHKNBK@The?5blue?5flag?5has?5returned?5to?5b@
CONST	SEGMENT
??_C@_0CF@DECHKNBK@The?5blue?5flag?5has?5returned?5to?5b@ DB 'The blue fl'
	DB	'ag has returned to base.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OBMIMBDL@The?5red?5flag?5has?5returned?5to?5ba@
CONST	SEGMENT
??_C@_0CE@OBMIMBDL@The?5red?5flag?5has?5returned?5to?5ba@ DB 'The red fla'
	DB	'g has returned to base.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LHKOFENN@You?5forgot?5to?5put?5axis?5points?5i@
CONST	SEGMENT
??_C@_0CL@LHKOFENN@You?5forgot?5to?5put?5axis?5points?5i@ DB 'You forgot '
	DB	'to put axis points in the map!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MLGIMBMG@ERROR?3?5No?5axis?5points?5found?$CB?6@
CONST	SEGMENT
??_C@_0BO@MLGIMBMG@ERROR?3?5No?5axis?5points?5found?$CB?6@ DB 'ERROR: No '
	DB	'axis points found!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BLACACMH@BlackEggman?5unable?5to?5find?5wayp@
CONST	SEGMENT
??_C@_0CK@BLACACMH@BlackEggman?5unable?5to?5find?5wayp@ DB 'BlackEggman u'
	DB	'nable to find waypoint #%d!', 0aH, 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_opposite DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	0ffffffffH
_diags	DD	03H
	DD	01H
	DD	05H
	DD	07H
_DATA	ENDS
;	COMDAT ??_C@_0DO@BIMLJDCE@Error?3?5Boss?53?5waypoint?5has?5no?5s@
CONST	SEGMENT
??_C@_0DO@BIMLJDCE@Error?3?5Boss?53?5waypoint?5has?5no?5s@ DB 'Error: Bos'
	DB	's 3 waypoint has no spawnpoint associated with it.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DLFIOOBB@Error?3?5Boss?53?5was?5unable?5to?5fin@
CONST	SEGMENT
??_C@_0DJ@DLFIOOBB@Error?3?5Boss?53?5was?5unable?5to?5fin@ DB 'Error: Bos'
	DB	's 3 was unable to find specified waypoint: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DDAHKJPF@P_EmeraldManager?3?5numtospawn?5is@
CONST	SEGMENT
??_C@_0CF@DDAHKJPF@P_EmeraldManager?3?5numtospawn?5is@ DB 'P_EmeraldManag'
	DB	'er: numtospawn is %d!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	01dfH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0381H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02b84H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	01a0H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	0355H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	051bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0c1H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	03b1H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0276H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	01be2H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0ecdH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_ObjectInWater
_TEXT	SEGMENT
_rover$1 = -4						; size = 4
_sector$ = 8						; size = 4
_z$ = 12						; size = 4
_P_ObjectInWater PROC					; COMDAT

; 6730 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6731 : 	if (sector->ffloors)

  00009	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  0000c	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00013	74 57		 je	 SHORT $LN3@P_ObjectIn

; 6732 : 	{
; 6733 : 		ffloor_t *rover;
; 6734 : 
; 6735 : 		for (rover = sector->ffloors; rover; rover = rover->next)

  00015	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00018	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0001e	89 4d fc	 mov	 DWORD PTR _rover$1[ebp], ecx
  00021	eb 09		 jmp	 SHORT $LN4@P_ObjectIn
$LN2@P_ObjectIn:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _rover$1[ebp]
  00026	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00029	89 4d fc	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_ObjectIn:
  0002c	83 7d fc 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  00030	74 3a		 je	 SHORT $LN3@P_ObjectIn

; 6736 : 		{
; 6737 : 			if (!(rover->flags & FF_EXISTS))

  00032	8b 45 fc	 mov	 eax, DWORD PTR _rover$1[ebp]
  00035	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00038	83 e1 01	 and	 ecx, 1
  0003b	75 02		 jne	 SHORT $LN6@P_ObjectIn

; 6738 : 				continue;

  0003d	eb e4		 jmp	 SHORT $LN2@P_ObjectIn
$LN6@P_ObjectIn:

; 6739 : 
; 6740 : 			if (rover->flags & FF_SWIMMABLE)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _rover$1[ebp]
  00042	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00045	83 e1 20	 and	 ecx, 32			; 00000020H
  00048	74 20		 je	 SHORT $LN8@P_ObjectIn

; 6741 : 			{
; 6742 : 				if (*rover->topheight >= z
; 6743 : 					&& *rover->bottomheight <= z)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _rover$1[ebp]
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	3b 55 0c	 cmp	 edx, DWORD PTR _z$[ebp]
  00054	7c 14		 jl	 SHORT $LN8@P_ObjectIn
  00056	8b 45 fc	 mov	 eax, DWORD PTR _rover$1[ebp]
  00059	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0005c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005e	3b 55 0c	 cmp	 edx, DWORD PTR _z$[ebp]
  00061	7f 07		 jg	 SHORT $LN8@P_ObjectIn

; 6744 : 					return true;

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	eb 04		 jmp	 SHORT $LN1@P_ObjectIn
$LN8@P_ObjectIn:

; 6745 : 			}
; 6746 : 		}

  0006a	eb b7		 jmp	 SHORT $LN2@P_ObjectIn
$LN3@P_ObjectIn:

; 6747 : 	}
; 6748 : 	return false;

  0006c	33 c0		 xor	 eax, eax
$LN1@P_ObjectIn:

; 6749 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_P_ObjectInWater ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Rand
_TEXT	SEGMENT
_t$ = -8						; size = 4
_d$ = -4						; size = 4
_P_Rand	PROC						; COMDAT

; 6718 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6719 : //#if RANDMAX > FRACUNIT/2
; 6720 : 	const unsigned d = (unsigned)rand()*FRACUNIT;

  00009	e8 00 00 00 00	 call	 _rand
  0000e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00011	89 45 fc	 mov	 DWORD PTR _d$[ebp], eax

; 6721 : 	const fixed_t t = (fixed_t)(d/RAND_MAX); //RAND_MAX is 2147483647 under linux, eeeee.... vs 0x7FFF(32767) in Window's rand()

  00014	8b 45 fc	 mov	 eax, DWORD PTR _d$[ebp]
  00017	33 d2		 xor	 edx, edx
  00019	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  0001e	f7 f1		 div	 ecx
  00020	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax

; 6722 : //#else
; 6723 : //	const fixed_t d = rand()*FRACUNIT;
; 6724 : //	const fixed_t t = FixedDiv(d,RAND_MAX*FRACUNIT);
; 6725 : //#endif
; 6726 : 	return (t-FRACUNIT/2)<<FRACBITS;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  00026	2d 00 80 00 00	 sub	 eax, 32768		; 00008000H
  0002b	c1 e0 10	 shl	 eax, 16			; 00000010H

; 6727 : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_P_Rand	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _Respawn_OnChange
_TEXT	SEGMENT
_Respawn_OnChange PROC					; COMDAT

; 6704 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6705 : 	// Only restrict this in single player unless in devmode, whew.
; 6706 : 	if (!(netgame || multiplayer) && !cv_debug && gametype == GT_COOP && cv_itemrespawn.value)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	75 35		 jne	 SHORT $LN2@Respawn_On
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00019	75 2c		 jne	 SHORT $LN2@Respawn_On
  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00022	75 23		 jne	 SHORT $LN2@Respawn_On
  00024	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0002b	85 c0		 test	 eax, eax
  0002d	75 18		 jne	 SHORT $LN2@Respawn_On
  0002f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_itemrespawn+20, 0
  00036	74 0f		 je	 SHORT $LN2@Respawn_On

; 6707 : 		CV_SetValue(&cv_itemrespawn, 0);

  00038	6a 00		 push	 0
  0003a	68 00 00 00 00	 push	 OFFSET _cv_itemrespawn
  0003f	e8 00 00 00 00	 call	 _CV_SetValue
  00044	83 c4 08	 add	 esp, 8
$LN2@Respawn_On:

; 6708 : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_Respawn_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnSnowMobj
_TEXT	SEGMENT
_mobj$ = -8						; size = 4
_st$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_type$ = 20						; size = 4
_P_SpawnSnowMobj PROC					; COMDAT

; 6564 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6565 : 	state_t *st;
; 6566 : 	precipmobj_t *mobj = Z_Calloc(sizeof (*mobj), PU_LEVEL, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 32		 push	 50			; 00000032H
  0000f	6a 64		 push	 100			; 00000064H
  00011	e8 00 00 00 00	 call	 _Z_CallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 6567 : 
; 6568 : 	mobj->x = x;

  0001c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00022	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 6569 : 	mobj->y = y;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0002b	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 6570 : 	mobj->flags = mobjinfo[type].flags;

  0002e	6b 45 14 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00035	8b 90 58 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[eax+88]
  0003b	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 6571 : 
; 6572 : 	// do not set the state with P_SetMobjState,
; 6573 : 	// because action routines can not be called yet
; 6574 : 	st = &states[mobjinfo[type].spawnstate];

  0003e	6b 45 14 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  00042	6b 88 04 00 00
	00 1c		 imul	 ecx, DWORD PTR _mobjinfo[eax+4], 28
  00049	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0004f	89 4d fc	 mov	 DWORD PTR _st$[ebp], ecx

; 6575 : 
; 6576 : 	mobj->state = st;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00058	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 6577 : 	mobj->tics = st->tics;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00061	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00064	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 6578 : 	mobj->sprite = st->sprite;

  00067	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  0006d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006f	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 6579 : 	mobj->frame = st->frame; // FF_FRAMEMASK for frame, and other bits..

  00072	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00078	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007b	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 6580 : 
; 6581 : 	// set subsector and/or block links
; 6582 : 	P_SetPrecipitationThingPosition(mobj);

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _P_SetPrecipitationThingPosition
  00087	83 c4 04	 add	 esp, 4

; 6583 : 
; 6584 : 	mobj->floorz = mobj->subsector->sector->floorheight;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0008d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00090	8b 11		 mov	 edx, DWORD PTR [ecx]
  00092	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00095	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00097	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 6585 : 
; 6586 : 	mobj->z = z;

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0009d	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  000a0	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 6587 : 	mobj->momz = mobjinfo[type].speed;

  000a3	6b 45 14 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  000a7	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000aa	8b 90 3c 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[eax+60]
  000b0	89 51 50	 mov	 DWORD PTR [ecx+80], edx

; 6588 : 
; 6589 : 	mobj->thinker.function.acp1 = (actionf_p1)P_SnowThinker;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b6	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _P_SnowThinker

; 6590 : 	P_AddThinker(&mobj->thinker);

  000bd	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _P_AddThinker
  000c6	83 c4 04	 add	 esp, 4

; 6591 : 
; 6592 : 	CalculatePrecipFloor(mobj);

  000c9	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _CalculatePrecipFloor
  000d2	83 c4 04	 add	 esp, 4

; 6593 : 
; 6594 : 	return mobj;

  000d5	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]

; 6595 : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_P_SpawnSnowMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnRainMobj
_TEXT	SEGMENT
_mobj$ = -8						; size = 4
_st$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_type$ = 20						; size = 4
_P_SpawnRainMobj PROC					; COMDAT

; 6530 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6531 : 	state_t *st;
; 6532 : 	precipmobj_t *mobj = Z_Calloc(sizeof (*mobj), PU_LEVEL, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 32		 push	 50			; 00000032H
  0000f	6a 64		 push	 100			; 00000064H
  00011	e8 00 00 00 00	 call	 _Z_CallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 6533 : 
; 6534 : 	mobj->x = x;

  0001c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00022	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 6535 : 	mobj->y = y;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0002b	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 6536 : 	mobj->flags = mobjinfo[type].flags;

  0002e	6b 45 14 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00035	8b 90 58 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[eax+88]
  0003b	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 6537 : 
; 6538 : 	// do not set the state with P_SetMobjState,
; 6539 : 	// because action routines can not be called yet
; 6540 : 	st = &states[mobjinfo[type].spawnstate];

  0003e	6b 45 14 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  00042	6b 88 04 00 00
	00 1c		 imul	 ecx, DWORD PTR _mobjinfo[eax+4], 28
  00049	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0004f	89 4d fc	 mov	 DWORD PTR _st$[ebp], ecx

; 6541 : 
; 6542 : 	mobj->state = st;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00058	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 6543 : 	mobj->tics = st->tics;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00061	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00064	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 6544 : 	mobj->sprite = st->sprite;

  00067	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  0006d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006f	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 6545 : 	mobj->frame = st->frame; // FF_FRAMEMASK for frame, and other bits..

  00072	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00078	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007b	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 6546 : 
; 6547 : 	// set subsector and/or block links
; 6548 : 	P_SetPrecipitationThingPosition(mobj);

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _P_SetPrecipitationThingPosition
  00087	83 c4 04	 add	 esp, 4

; 6549 : 
; 6550 : 	mobj->floorz = mobj->subsector->sector->floorheight;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0008d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00090	8b 11		 mov	 edx, DWORD PTR [ecx]
  00092	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00095	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00097	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 6551 : 
; 6552 : 	mobj->z = z;

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0009d	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  000a0	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 6553 : 	mobj->momz = mobjinfo[type].speed;

  000a3	6b 45 14 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  000a7	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000aa	8b 90 3c 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[eax+60]
  000b0	89 51 50	 mov	 DWORD PTR [ecx+80], edx

; 6554 : 
; 6555 : 	mobj->thinker.function.acp1 = (actionf_p1)P_RainThinker;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b6	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _P_RainThinker

; 6556 : 	P_AddThinker(&mobj->thinker);

  000bd	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _P_AddThinker
  000c6	83 c4 04	 add	 esp, 4

; 6557 : 
; 6558 : 	CalculatePrecipFloor(mobj);

  000c9	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _CalculatePrecipFloor
  000d2	83 c4 04	 add	 esp, 4

; 6559 : 
; 6560 : 	return mobj;

  000d5	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]

; 6561 : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_P_SpawnRainMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_KoopaThinker
_TEXT	SEGMENT
_hammer$1 = -8						; size = 4
_flame$2 = -4						; size = 4
_koopa$ = 8						; size = 4
_P_KoopaThinker PROC					; COMDAT

; 4841 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4842 : 	P_MobjCheckWater(koopa);

  00009	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_MobjCheckWater
  00012	83 c4 04	 add	 esp, 4

; 4843 : 
; 4844 : 	if (koopa->watertop > koopa->z + koopa->height + 128*FRACUNIT && koopa->health > 0)

  00015	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00018	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  0001e	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00021	8d 8c 01 00 00
	80 00		 lea	 ecx, DWORD PTR [ecx+eax+8388608]
  00028	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  0002b	39 8a c0 00 00
	00		 cmp	 DWORD PTR [edx+192], ecx
  00031	7e 3b		 jle	 SHORT $LN2@P_KoopaThi
  00033	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00036	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0003d	7e 2f		 jle	 SHORT $LN2@P_KoopaThi

; 4845 : 	{
; 4846 : 		A_BossDeath(koopa);

  0003f	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _A_BossDeath
  00048	83 c4 04	 add	 esp, 4

; 4847 : 		P_SetMobjState(koopa, S_DISS);

  0004b	68 4f 06 00 00	 push	 1615			; 0000064fH
  00050	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _P_SetMobjState
  00059	83 c4 08	 add	 esp, 8

; 4848 : 		koopa->health = 0;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  0005f	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 4849 : 		return;

  00069	e9 aa 01 00 00	 jmp	 $LN13@P_KoopaThi
$LN2@P_KoopaThi:

; 4850 : 	}
; 4851 : 
; 4852 : 	// Koopa moves ONLY on the X axis!
; 4853 : 	if (koopa->threshold > 0)

  0006e	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00071	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00078	7e 3a		 jle	 SHORT $LN3@P_KoopaThi

; 4854 : 	{
; 4855 : 		koopa->threshold--;

  0007a	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  0007d	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00083	83 e9 01	 sub	 ecx, 1
  00086	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  00089	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 4856 : 		koopa->momx = FRACUNIT;

  0008f	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00092	c7 40 48 00 00
	01 00		 mov	 DWORD PTR [eax+72], 65536 ; 00010000H

; 4857 : 
; 4858 : 		if (!koopa->threshold)

  00099	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  0009c	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  000a3	75 0d		 jne	 SHORT $LN5@P_KoopaThi

; 4859 : 			koopa->threshold = -TICRATE*2;

  000a5	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  000a8	c7 80 a0 00 00
	00 ba ff ff ff	 mov	 DWORD PTR [eax+160], -70 ; ffffffbaH
$LN5@P_KoopaThi:

; 4860 : 	}

  000b2	eb 53		 jmp	 SHORT $LN7@P_KoopaThi
$LN3@P_KoopaThi:

; 4861 : 	else if (koopa->threshold < 0)

  000b4	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  000b7	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  000be	7d 3a		 jge	 SHORT $LN6@P_KoopaThi

; 4862 : 	{
; 4863 : 		koopa->threshold++;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  000c3	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  000c9	83 c1 01	 add	 ecx, 1
  000cc	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  000cf	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 4864 : 		koopa->momx = -FRACUNIT;

  000d5	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  000d8	c7 40 48 00 00
	ff ff		 mov	 DWORD PTR [eax+72], -65536 ; ffff0000H

; 4865 : 
; 4866 : 		if (!koopa->threshold)

  000df	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  000e2	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  000e9	75 0d		 jne	 SHORT $LN8@P_KoopaThi

; 4867 : 			koopa->threshold = TICRATE*2;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  000ee	c7 80 a0 00 00
	00 46 00 00 00	 mov	 DWORD PTR [eax+160], 70	; 00000046H
$LN8@P_KoopaThi:

; 4868 : 	}

  000f8	eb 0d		 jmp	 SHORT $LN7@P_KoopaThi
$LN6@P_KoopaThi:

; 4869 : 	else
; 4870 : 		koopa->threshold = TICRATE*2;

  000fa	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  000fd	c7 80 a0 00 00
	00 46 00 00 00	 mov	 DWORD PTR [eax+160], 70	; 00000046H
$LN7@P_KoopaThi:

; 4871 : 
; 4872 : 	P_XYMovement(koopa);

  00107	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _P_XYMovement
  00110	83 c4 04	 add	 esp, 4

; 4873 : 
; 4874 : 	if (P_Random() < 8 && koopa->z <= koopa->floorz)

  00113	e8 00 00 00 00	 call	 _P_Random
  00118	0f b6 c0	 movzx	 eax, al
  0011b	83 f8 08	 cmp	 eax, 8
  0011e	7d 18		 jge	 SHORT $LN9@P_KoopaThi
  00120	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _koopa$[ebp]
  00126	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00129	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  0012c	7f 0a		 jg	 SHORT $LN9@P_KoopaThi

; 4875 : 		koopa->momz = 5*FRACUNIT;

  0012e	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00131	c7 40 50 00 00
	05 00		 mov	 DWORD PTR [eax+80], 327680 ; 00050000H
$LN9@P_KoopaThi:

; 4876 : 
; 4877 : 	if (koopa->z > koopa->floorz)

  00138	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _koopa$[ebp]
  0013e	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00141	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00144	7e 12		 jle	 SHORT $LN10@P_KoopaThi

; 4878 : 		koopa->momz += FRACUNIT/4;

  00146	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  00149	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0014c	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  00152	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  00155	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN10@P_KoopaThi:

; 4879 : 
; 4880 : 	if (P_Random() < 4)

  00158	e8 00 00 00 00	 call	 _P_Random
  0015d	0f b6 c0	 movzx	 eax, al
  00160	83 f8 04	 cmp	 eax, 4
  00163	7d 5f		 jge	 SHORT $LN11@P_KoopaThi

; 4881 : 	{
; 4882 : 		mobj_t *flame;
; 4883 : 		flame = P_SpawnMobj(koopa->x - koopa->radius + 5*FRACUNIT, koopa->y, koopa->z + (P_Random()<<(FRACBITS-2)), MT_KOOPAFLAME);

  00165	68 ec 00 00 00	 push	 236			; 000000ecH
  0016a	e8 00 00 00 00	 call	 _P_Random
  0016f	0f b6 c0	 movzx	 eax, al
  00172	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00175	8b 4d 08	 mov	 ecx, DWORD PTR _koopa$[ebp]
  00178	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0017b	50		 push	 eax
  0017c	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  0017f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00182	50		 push	 eax
  00183	8b 4d 08	 mov	 ecx, DWORD PTR _koopa$[ebp]
  00186	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  00189	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0018c	2b 42 40	 sub	 eax, DWORD PTR [edx+64]
  0018f	05 00 00 05 00	 add	 eax, 327680		; 00050000H
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 _P_SpawnMobj
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	89 45 fc	 mov	 DWORD PTR _flame$2[ebp], eax

; 4884 : 		flame->momx = -flame->info->speed;

  001a0	8b 45 fc	 mov	 eax, DWORD PTR _flame$2[ebp]
  001a3	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001a9	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  001ac	f7 da		 neg	 edx
  001ae	8b 45 fc	 mov	 eax, DWORD PTR _flame$2[ebp]
  001b1	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 4885 : 		S_StartSound(flame, sfx_koopfr);

  001b4	6a 55		 push	 85			; 00000055H
  001b6	8b 45 fc	 mov	 eax, DWORD PTR _flame$2[ebp]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _S_StartSound
  001bf	83 c4 08	 add	 esp, 8

; 4886 : 	}

  001c2	eb 54		 jmp	 SHORT $LN13@P_KoopaThi
$LN11@P_KoopaThi:

; 4887 : 	else if (P_Random() > 250)

  001c4	e8 00 00 00 00	 call	 _P_Random
  001c9	0f b6 c0	 movzx	 eax, al
  001cc	3d fa 00 00 00	 cmp	 eax, 250		; 000000faH
  001d1	7e 45		 jle	 SHORT $LN13@P_KoopaThi

; 4888 : 	{
; 4889 : 		mobj_t *hammer;
; 4890 : 		hammer = P_SpawnMobj(koopa->x - koopa->radius, koopa->y, koopa->z + koopa->height, MT_HAMMER);

  001d3	68 ea 00 00 00	 push	 234			; 000000eaH
  001d8	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  001db	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001de	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  001e1	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  001e4	51		 push	 ecx
  001e5	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  001e8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001eb	51		 push	 ecx
  001ec	8b 55 08	 mov	 edx, DWORD PTR _koopa$[ebp]
  001ef	8b 45 08	 mov	 eax, DWORD PTR _koopa$[ebp]
  001f2	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  001f5	2b 48 40	 sub	 ecx, DWORD PTR [eax+64]
  001f8	51		 push	 ecx
  001f9	e8 00 00 00 00	 call	 _P_SpawnMobj
  001fe	83 c4 10	 add	 esp, 16			; 00000010H
  00201	89 45 f8	 mov	 DWORD PTR _hammer$1[ebp], eax

; 4891 : 		hammer->momx = -5*FRACUNIT;

  00204	8b 45 f8	 mov	 eax, DWORD PTR _hammer$1[ebp]
  00207	c7 40 48 00 00
	fb ff		 mov	 DWORD PTR [eax+72], -327680 ; fffb0000H

; 4892 : 		hammer->momz = 7*FRACUNIT;

  0020e	8b 45 f8	 mov	 eax, DWORD PTR _hammer$1[ebp]
  00211	c7 40 50 00 00
	07 00		 mov	 DWORD PTR [eax+80], 458752 ; 00070000H
$LN13@P_KoopaThi:

; 4893 : 	}
; 4894 : }

  00218	5f		 pop	 edi
  00219	5e		 pop	 esi
  0021a	5b		 pop	 ebx
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c3		 ret	 0
_P_KoopaThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_AddShield
_TEXT	SEGMENT
tv141 = -68						; size = 4
_thing$ = 8						; size = 4
_P_AddShield PROC					; COMDAT

; 4818 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4819 : 	if (thing->state == &states[S_DISS])

  00009	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0000e	69 c8 4f 06 00
	00		 imul	 ecx, eax, 1615
  00014	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0001a	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  0001d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00020	75 07		 jne	 SHORT $LN2@P_AddShiel

; 4820 : 		return false;

  00022	33 c0		 xor	 eax, eax
  00024	e9 fe 00 00 00	 jmp	 $LN1@P_AddShiel
$LN2@P_AddShiel:

; 4821 : 
; 4822 : 	if (!thing->target || thing->target->health <= 0 || !thing->target->player
; 4823 : 		|| !thing->target->player->powers[thing->info->speed] || thing->target->player->powers[pw_super]
; 4824 : 		|| thing->target->player->powers[pw_invulnerability] > 1)

  00029	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0002c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00033	0f 84 82 00 00
	00		 je	 $LN4@P_AddShiel
  00039	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0003c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00042	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00049	7e 70		 jle	 SHORT $LN4@P_AddShiel
  0004b	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0004e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00054	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0005b	74 5e		 je	 SHORT $LN4@P_AddShiel
  0005d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00060	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00066	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0006c	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0006f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00075	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00078	83 7c 82 38 00	 cmp	 DWORD PTR [edx+eax*4+56], 0
  0007d	74 3c		 je	 SHORT $LN4@P_AddShiel
  0007f	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00082	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00088	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	6b c8 0f	 imul	 ecx, eax, 15
  00096	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0009b	75 1e		 jne	 SHORT $LN4@P_AddShiel
  0009d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000a0	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000a6	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	6b c8 00	 imul	 ecx, eax, 0
  000b4	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  000b9	7e 15		 jle	 SHORT $LN3@P_AddShiel
$LN4@P_AddShiel:

; 4825 : 	{
; 4826 : 		P_SetMobjState(thing, S_DISS);

  000bb	68 4f 06 00 00	 push	 1615			; 0000064fH
  000c0	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _P_SetMobjState
  000c9	83 c4 08	 add	 esp, 8

; 4827 : 		return false;

  000cc	33 c0		 xor	 eax, eax
  000ce	eb 57		 jmp	 SHORT $LN1@P_AddShiel
$LN3@P_AddShiel:

; 4828 : 	}
; 4829 : 
; 4830 : 	// Queue has been hit... why?!?
; 4831 : 	if (numshields >= MAXPLAYERS*2)

  000d0	83 3d 00 00 00
	00 40		 cmp	 DWORD PTR _numshields, 64 ; 00000040H
  000d7	7c 1b		 jl	 SHORT $LN5@P_AddShiel

; 4832 : 		return P_ShieldLook(thing, thing->info->speed);

  000d9	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000dc	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e2	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000e5	52		 push	 edx
  000e6	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _P_ShieldLook
  000ef	83 c4 08	 add	 esp, 8
  000f2	eb 33		 jmp	 SHORT $LN1@P_AddShiel
$LN5@P_AddShiel:

; 4833 : 
; 4834 : 	P_SetTarget(&shields[numshields++], thing);

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _numshields
  000f9	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR _shields[eax*4]
  00100	89 4d bc	 mov	 DWORD PTR tv141[ebp], ecx
  00103	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _numshields
  00109	83 c2 01	 add	 edx, 1
  0010c	89 15 00 00 00
	00		 mov	 DWORD PTR _numshields, edx
  00112	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00115	50		 push	 eax
  00116	8b 4d bc	 mov	 ecx, DWORD PTR tv141[ebp]
  00119	51		 push	 ecx
  0011a	e8 00 00 00 00	 call	 _P_SetTarget
  0011f	83 c4 08	 add	 esp, 8

; 4835 : 	return true;

  00122	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_AddShiel:

; 4836 : }

  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
_P_AddShield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_ShieldLook
_TEXT	SEGMENT
_viewingangle$1 = -12					; size = 4
_desty$ = -8						; size = 4
_destx$ = -4						; size = 4
_thing$ = 8						; size = 4
_power$ = 12						; size = 4
_P_ShieldLook PROC					; COMDAT

; 4745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4746 : 	fixed_t destx, desty;
; 4747 : 
; 4748 : 	if (thing->state == &states[S_DISS])

  00009	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0000e	69 c8 4f 06 00
	00		 imul	 ecx, eax, 1615
  00014	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0001a	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  0001d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00020	75 07		 jne	 SHORT $LN2@P_ShieldLo

; 4749 : 		return false;

  00022	33 c0		 xor	 eax, eax
  00024	e9 46 03 00 00	 jmp	 $LN1@P_ShieldLo
$LN2@P_ShieldLo:

; 4750 : 
; 4751 : 	if (!thing->target || thing->target->health <= 0 || !thing->target->player
; 4752 : 		|| !thing->target->player->powers[power] || thing->target->player->powers[pw_super]
; 4753 : 		|| thing->target->player->powers[pw_invulnerability] > 1)

  00029	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0002c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00033	74 79		 je	 SHORT $LN4@P_ShieldLo
  00035	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00038	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0003e	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00045	7e 67		 jle	 SHORT $LN4@P_ShieldLo
  00047	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0004a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00050	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00057	74 55		 je	 SHORT $LN4@P_ShieldLo
  00059	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0005c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00062	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00068	8b 45 0c	 mov	 eax, DWORD PTR _power$[ebp]
  0006b	83 7c 82 38 00	 cmp	 DWORD PTR [edx+eax*4+56], 0
  00070	74 3c		 je	 SHORT $LN4@P_ShieldLo
  00072	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00075	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0007b	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00081	b8 04 00 00 00	 mov	 eax, 4
  00086	6b c8 0f	 imul	 ecx, eax, 15
  00089	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0008e	75 1e		 jne	 SHORT $LN4@P_ShieldLo
  00090	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00093	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00099	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	6b c8 00	 imul	 ecx, eax, 0
  000a7	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  000ac	7e 18		 jle	 SHORT $LN3@P_ShieldLo
$LN4@P_ShieldLo:

; 4754 : 	{
; 4755 : 		P_SetMobjState(thing, S_DISS);

  000ae	68 4f 06 00 00	 push	 1615			; 0000064fH
  000b3	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _P_SetMobjState
  000bc	83 c4 08	 add	 esp, 8

; 4756 : 		return false;

  000bf	33 c0		 xor	 eax, eax
  000c1	e9 a9 02 00 00	 jmp	 $LN1@P_ShieldLo
$LN3@P_ShieldLo:

; 4757 : 	}
; 4758 : 
; 4759 : 	if (!splitscreen && rendermode != render_soft)

  000c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000cd	0f 85 00 01 00
	00		 jne	 $LN5@P_ShieldLo
  000d3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  000da	0f 84 f3 00 00
	00		 je	 $LN5@P_ShieldLo

; 4760 : 	{
; 4761 : 		angle_t viewingangle;
; 4762 : 
; 4763 : 		if (!cv_chasecam.value && players[displayplayer].mo)

  000e0	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  000e7	75 62		 jne	 SHORT $LN7@P_ShieldLo
  000e9	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  000f3	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  000fa	74 4f		 je	 SHORT $LN7@P_ShieldLo

; 4764 : 			viewingangle = R_PointToAngle2(thing->target->x, thing->target->y, players[displayplayer].mo->x, players[displayplayer].mo->y);

  000fc	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00106	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0010c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0010f	52		 push	 edx
  00110	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0011a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00120	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00123	52		 push	 edx
  00124	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00127	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0012d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00130	52		 push	 edx
  00131	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00134	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0013a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0013d	52		 push	 edx
  0013e	e8 00 00 00 00	 call	 _R_PointToAngle2
  00143	83 c4 10	 add	 esp, 16			; 00000010H
  00146	89 45 f4	 mov	 DWORD PTR _viewingangle$1[ebp], eax
  00149	eb 32		 jmp	 SHORT $LN8@P_ShieldLo
$LN7@P_ShieldLo:

; 4765 : 		else
; 4766 : 			viewingangle = R_PointToAngle2(thing->target->x, thing->target->y, camera.x, camera.y);

  0014b	a1 14 00 00 00	 mov	 eax, DWORD PTR _camera+20
  00150	50		 push	 eax
  00151	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _camera+16
  00157	51		 push	 ecx
  00158	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  0015b	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00161	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00164	51		 push	 ecx
  00165	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00168	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0016e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00171	51		 push	 ecx
  00172	e8 00 00 00 00	 call	 _R_PointToAngle2
  00177	83 c4 10	 add	 esp, 16			; 00000010H
  0017a	89 45 f4	 mov	 DWORD PTR _viewingangle$1[ebp], eax
$LN8@P_ShieldLo:

; 4767 : 
; 4768 : 		destx = thing->target->x + P_ReturnThrustX(thing->target, viewingangle, FRACUNIT);

  0017d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00180	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  00186	68 00 00 01 00	 push	 65536			; 00010000H
  0018b	8b 4d f4	 mov	 ecx, DWORD PTR _viewingangle$1[ebp]
  0018e	51		 push	 ecx
  0018f	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00192	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 _P_ReturnThrustX
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a1	03 46 10	 add	 eax, DWORD PTR [esi+16]
  001a4	89 45 fc	 mov	 DWORD PTR _destx$[ebp], eax

; 4769 : 		desty = thing->target->y + P_ReturnThrustY(thing->target, viewingangle, FRACUNIT);

  001a7	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001aa	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  001b0	68 00 00 01 00	 push	 65536			; 00010000H
  001b5	8b 4d f4	 mov	 ecx, DWORD PTR _viewingangle$1[ebp]
  001b8	51		 push	 ecx
  001b9	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  001bc	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _P_ReturnThrustY
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cb	03 46 14	 add	 eax, DWORD PTR [esi+20]
  001ce	89 45 f8	 mov	 DWORD PTR _desty$[ebp], eax

; 4770 : 	}

  001d1	eb 1e		 jmp	 SHORT $LN6@P_ShieldLo
$LN5@P_ShieldLo:

; 4771 : 	else
; 4772 : 	{
; 4773 : 		destx = thing->target->x;

  001d3	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001d6	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001dc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001df	89 55 fc	 mov	 DWORD PTR _destx$[ebp], edx

; 4774 : 		desty = thing->target->y;

  001e2	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001e5	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001eb	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001ee	89 55 f8	 mov	 DWORD PTR _desty$[ebp], edx
$LN6@P_ShieldLo:

; 4775 : 	}
; 4776 : 
; 4777 : 	if (power == pw_forceshield)

  001f1	83 7d 0c 04	 cmp	 DWORD PTR _power$[ebp], 4
  001f5	75 50		 jne	 SHORT $LN11@P_ShieldLo

; 4778 : 	{
; 4779 : 		if (thing->target->player->powers[pw_forceshield] == 1)

  001f7	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001fa	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00200	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00206	b8 04 00 00 00	 mov	 eax, 4
  0020b	c1 e0 02	 shl	 eax, 2
  0020e	83 7c 02 38 01	 cmp	 DWORD PTR [edx+eax+56], 1
  00213	75 1a		 jne	 SHORT $LN10@P_ShieldLo

; 4780 : 			thing->flags2 |= MF2_SHADOW;

  00215	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00218	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0021e	81 c9 00 00 00
	01		 or	 ecx, 16777216		; 01000000H
  00224	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00227	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
  0022d	eb 18		 jmp	 SHORT $LN11@P_ShieldLo
$LN10@P_ShieldLo:

; 4781 : 		else
; 4782 : 			thing->flags2 &= ~MF2_SHADOW;

  0022f	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00232	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00238	81 e1 ff ff ff
	fe		 and	 ecx, -16777217		; feffffffH
  0023e	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00241	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN11@P_ShieldLo:

; 4783 : 	}
; 4784 : 
; 4785 : 	thing->flags |= MF_NOCLIPHEIGHT;

  00247	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0024a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0024d	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  00253	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00256	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 4786 : 
; 4787 : 	P_UnsetThingPosition(thing);

  00259	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0025c	50		 push	 eax
  0025d	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00262	83 c4 04	 add	 esp, 4

; 4788 : 	thing->x = destx;

  00265	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00268	8b 4d fc	 mov	 ecx, DWORD PTR _destx$[ebp]
  0026b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4789 : 	thing->y = desty;

  0026e	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00271	8b 4d f8	 mov	 ecx, DWORD PTR _desty$[ebp]
  00274	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4790 : 	thing->z = thing->target->z - (FIXEDSCALE(thing->target->info->height, thing->target->scale) - thing->target->height) / 3 + FIXEDSCALE(2*FRACUNIT, thing->target->scale);

  00277	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0027a	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  00280	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00283	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00289	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0028f	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00292	51		 push	 ecx
  00293	68 00 00 64 00	 push	 6553600			; 00640000H
  00298	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  0029b	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  002a1	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  002a8	c1 e1 10	 shl	 ecx, 16			; 00000010H
  002ab	51		 push	 ecx
  002ac	e8 00 00 00 00	 call	 _FixedDiv
  002b1	83 c4 08	 add	 esp, 8
  002b4	50		 push	 eax
  002b5	e8 00 00 00 00	 call	 _FixedMul
  002ba	83 c4 08	 add	 esp, 8
  002bd	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  002c0	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  002c6	2b 41 44	 sub	 eax, DWORD PTR [ecx+68]
  002c9	99		 cdq
  002ca	b9 03 00 00 00	 mov	 ecx, 3
  002cf	f7 f9		 idiv	 ecx
  002d1	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  002d4	2b f0		 sub	 esi, eax
  002d6	68 00 00 02 00	 push	 131072			; 00020000H
  002db	68 00 00 64 00	 push	 6553600			; 00640000H
  002e0	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  002e3	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  002e9	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  002f0	c1 e1 10	 shl	 ecx, 16			; 00000010H
  002f3	51		 push	 ecx
  002f4	e8 00 00 00 00	 call	 _FixedDiv
  002f9	83 c4 08	 add	 esp, 8
  002fc	50		 push	 eax
  002fd	e8 00 00 00 00	 call	 _FixedMul
  00302	83 c4 08	 add	 esp, 8
  00305	03 f0		 add	 esi, eax
  00307	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  0030a	89 72 18	 mov	 DWORD PTR [edx+24], esi

; 4791 : 	P_SetScale(thing, thing->target->scale);

  0030d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00310	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00316	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0031d	52		 push	 edx
  0031e	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 _P_SetScale
  00327	83 c4 08	 add	 esp, 8

; 4792 : 	P_SetThingPosition(thing);

  0032a	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 _P_SetThingPosition
  00333	83 c4 04	 add	 esp, 4

; 4793 : 	P_CheckPosition(thing, thing->x, thing->y);

  00336	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00339	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0033c	51		 push	 ecx
  0033d	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00340	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00343	50		 push	 eax
  00344	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00347	51		 push	 ecx
  00348	e8 00 00 00 00	 call	 _P_CheckPosition
  0034d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4794 : 
; 4795 : 	if (thing->z < thing->floorz)

  00350	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00353	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00356	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00359	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  0035c	7d 0c		 jge	 SHORT $LN12@P_ShieldLo

; 4796 : 		thing->z = thing->floorz;

  0035e	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00361	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00364	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00367	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN12@P_ShieldLo:

; 4797 : 
; 4798 : 	return true;

  0036a	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_ShieldLo:

; 4799 : }

  0036f	5f		 pop	 edi
  00370	5e		 pop	 esi
  00371	5b		 pop	 ebx
  00372	8b e5		 mov	 esp, ebp
  00374	5d		 pop	 ebp
  00375	c3		 ret	 0
_P_ShieldLook ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_NightsItemChase
_TEXT	SEGMENT
_thing$ = 8						; size = 4
_P_NightsItemChase PROC					; COMDAT

; 4730 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4731 : 	if (!thing->tracer)

  00009	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0000c	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00013	75 2d		 jne	 SHORT $LN2@P_NightsIt

; 4732 : 	{
; 4733 : 		P_SetTarget(&thing->tracer, NULL);

  00015	6a 00		 push	 0
  00017	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0001a	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _P_SetTarget
  00025	83 c4 08	 add	 esp, 8

; 4734 : 		thing->flags2 &= ~MF2_NIGHTSPULL;

  00028	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0002b	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00031	81 e1 ff fe ff
	ff		 and	 ecx, -257		; fffffeffH
  00037	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  0003a	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4735 : 		return;

  00040	eb 2c		 jmp	 SHORT $LN1@P_NightsIt
$LN2@P_NightsIt:

; 4736 : 	}
; 4737 : 
; 4738 : 	if (!thing->tracer->player)

  00042	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00045	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0004b	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00052	75 02		 jne	 SHORT $LN3@P_NightsIt

; 4739 : 		return;

  00054	eb 18		 jmp	 SHORT $LN1@P_NightsIt
$LN3@P_NightsIt:

; 4740 : 
; 4741 : 	P_Attract(thing, thing->tracer, true);

  00056	6a 01		 push	 1
  00058	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0005b	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00061	51		 push	 ecx
  00062	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 _P_Attract
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@P_NightsIt:

; 4742 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_P_NightsItemChase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_MoveHoop
_TEXT	SEGMENT
_mthingz$ = -56						; size = 4
_mthingy$ = -52						; size = 4
_mthingx$ = -48						; size = 4
_finalz$ = -44						; size = 4
_finaly$ = -40						; size = 4
_finalx$ = -36						; size = 4
_res$ = -32						; size = 4
_v$ = -28						; size = 16
_fa$ = -12						; size = 4
_fuse$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mobj$ = 8						; size = 4
_P_MoveHoop PROC					; COMDAT

; 4431 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 4432 : 	const fixed_t fuse = (mobj->fuse*8*FRACUNIT);

  00013	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00016	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  0001c	c1 e1 03	 shl	 ecx, 3
  0001f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00022	89 4d f8	 mov	 DWORD PTR _fuse$[ebp], ecx

; 4433 : 	const angle_t fa = mobj->movedir*(FINEANGLES/32);

  00025	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00028	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0002e	c1 e1 08	 shl	 ecx, 8
  00031	89 4d f4	 mov	 DWORD PTR _fa$[ebp], ecx

; 4434 : 	TVector v;
; 4435 : 	TVector *res;
; 4436 : 	fixed_t finalx, finaly, finalz;
; 4437 : 	fixed_t mthingx, mthingy, mthingz;
; 4438 : 
; 4439 : 	mthingx = mobj->target->x;

  00034	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00037	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0003d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00040	89 55 d0	 mov	 DWORD PTR _mthingx$[ebp], edx

; 4440 : 	mthingy = mobj->target->y;

  00043	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00046	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0004c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0004f	89 55 cc	 mov	 DWORD PTR _mthingy$[ebp], edx

; 4441 : 	mthingz = mobj->target->z+mobj->target->height/2;

  00052	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00055	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0005e	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00064	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00067	99		 cdq
  00068	2b c2		 sub	 eax, edx
  0006a	d1 f8		 sar	 eax, 1
  0006c	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0006f	89 45 c8	 mov	 DWORD PTR _mthingz$[ebp], eax

; 4442 : 
; 4443 : 	// Make the sprite travel towards the center of the hoop
; 4444 : 	v[0] = FixedMul(FINECOSINE(fa),fuse);

  00072	8b 45 f8	 mov	 eax, DWORD PTR _fuse$[ebp]
  00075	50		 push	 eax
  00076	8b 4d f4	 mov	 ecx, DWORD PTR _fa$[ebp]
  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0007f	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _FixedMul
  00088	83 c4 08	 add	 esp, 8
  0008b	b9 04 00 00 00	 mov	 ecx, 4
  00090	6b d1 00	 imul	 edx, ecx, 0
  00093	89 44 15 e4	 mov	 DWORD PTR _v$[ebp+edx], eax

; 4445 : 	v[1] = 0;

  00097	b8 04 00 00 00	 mov	 eax, 4
  0009c	c1 e0 00	 shl	 eax, 0
  0009f	c7 44 05 e4 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 4446 : 	v[2] = FixedMul(FINESINE(fa),fuse);

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _fuse$[ebp]
  000aa	50		 push	 eax
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR _fa$[ebp]
  000ae	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  000b5	52		 push	 edx
  000b6	e8 00 00 00 00	 call	 _FixedMul
  000bb	83 c4 08	 add	 esp, 8
  000be	b9 04 00 00 00	 mov	 ecx, 4
  000c3	d1 e1		 shl	 ecx, 1
  000c5	89 44 0d e4	 mov	 DWORD PTR _v$[ebp+ecx], eax

; 4447 : 	v[3] = FRACUNIT;

  000c9	b8 04 00 00 00	 mov	 eax, 4
  000ce	6b c8 03	 imul	 ecx, eax, 3
  000d1	c7 44 0d e4 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 4448 : 
; 4449 : 	res = VectorMatrixMultiply(v, *RotateXMatrix(FixedAngle(mobj->target->movedir*FRACUNIT)));

  000d9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000dc	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000e2	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000e8	c1 e2 10	 shl	 edx, 16			; 00000010H
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 _FixedAngle
  000f1	83 c4 04	 add	 esp, 4
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _RotateXMatrix
  000fa	83 c4 04	 add	 esp, 4
  000fd	50		 push	 eax
  000fe	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00107	83 c4 08	 add	 esp, 8
  0010a	89 45 e0	 mov	 DWORD PTR _res$[ebp], eax

; 4450 : 	M_Memcpy(&v, res, sizeof (v));

  0010d	6a 10		 push	 16			; 00000010H
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _res$[ebp]
  00112	50		 push	 eax
  00113	8d 4d e4	 lea	 ecx, DWORD PTR _v$[ebp]
  00116	51		 push	 ecx
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4451 : 	res = VectorMatrixMultiply(v, *RotateZMatrix(FixedAngle(mobj->target->movecount*FRACUNIT)));

  00120	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00123	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00129	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0012f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 _FixedAngle
  00138	83 c4 04	 add	 esp, 4
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 _RotateZMatrix
  00141	83 c4 04	 add	 esp, 4
  00144	50		 push	 eax
  00145	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  0014e	83 c4 08	 add	 esp, 8
  00151	89 45 e0	 mov	 DWORD PTR _res$[ebp], eax

; 4452 : 	M_Memcpy(&v, res, sizeof (v));

  00154	6a 10		 push	 16			; 00000010H
  00156	8b 45 e0	 mov	 eax, DWORD PTR _res$[ebp]
  00159	50		 push	 eax
  0015a	8d 4d e4	 lea	 ecx, DWORD PTR _v$[ebp]
  0015d	51		 push	 ecx
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4453 : 
; 4454 : 	finalx = mthingx + v[0];

  00167	b8 04 00 00 00	 mov	 eax, 4
  0016c	6b c8 00	 imul	 ecx, eax, 0
  0016f	8b 55 d0	 mov	 edx, DWORD PTR _mthingx$[ebp]
  00172	03 54 0d e4	 add	 edx, DWORD PTR _v$[ebp+ecx]
  00176	89 55 dc	 mov	 DWORD PTR _finalx$[ebp], edx

; 4455 : 	finaly = mthingy + v[1];

  00179	b8 04 00 00 00	 mov	 eax, 4
  0017e	c1 e0 00	 shl	 eax, 0
  00181	8b 4d cc	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  00184	03 4c 05 e4	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00188	89 4d d8	 mov	 DWORD PTR _finaly$[ebp], ecx

; 4456 : 	finalz = mthingz + v[2];

  0018b	b8 04 00 00 00	 mov	 eax, 4
  00190	d1 e0		 shl	 eax, 1
  00192	8b 4d c8	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  00195	03 4c 05 e4	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00199	89 4d d4	 mov	 DWORD PTR _finalz$[ebp], ecx

; 4457 : 
; 4458 : 	P_UnsetThingPosition(mobj);

  0019c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  001a5	83 c4 04	 add	 esp, 4

; 4459 : 	mobj->x = finalx;

  001a8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ab	8b 4d dc	 mov	 ecx, DWORD PTR _finalx$[ebp]
  001ae	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4460 : 	mobj->y = finaly;

  001b1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001b4	8b 4d d8	 mov	 ecx, DWORD PTR _finaly$[ebp]
  001b7	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4461 : 	P_SetThingPosition(mobj);

  001ba	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 _P_SetThingPosition
  001c3	83 c4 04	 add	 esp, 4

; 4462 : 	mobj->z = finalz - mobj->height/2;

  001c6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001c9	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  001cc	99		 cdq
  001cd	2b c2		 sub	 eax, edx
  001cf	d1 f8		 sar	 eax, 1
  001d1	8b 4d d4	 mov	 ecx, DWORD PTR _finalz$[ebp]
  001d4	2b c8		 sub	 ecx, eax
  001d6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001d9	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 4463 : }

  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi
  001de	5b		 pop	 ebx
  001df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e2	33 cd		 xor	 ecx, ebp
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c3		 ret	 0
_P_MoveHoop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_GimmeAxisXYPos
_TEXT	SEGMENT
_fa$ = -4						; size = 4
_closestaxis$ = 8					; size = 4
_mobj$ = 12						; size = 4
_P_GimmeAxisXYPos PROC					; COMDAT

; 4423 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4424 : 	const angle_t fa = R_PointToAngle2(closestaxis->x, closestaxis->y, mobj->x, mobj->y)>>ANGLETOFINESHIFT;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR _mobj$[ebp]
  00013	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _closestaxis$[ebp]
  0001a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0001d	52		 push	 edx
  0001e	8b 45 08	 mov	 eax, DWORD PTR _closestaxis$[ebp]
  00021	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 _R_PointToAngle2
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
  0002d	c1 e8 13	 shr	 eax, 19			; 00000013H
  00030	89 45 fc	 mov	 DWORD PTR _fa$[ebp], eax

; 4425 : 
; 4426 : 	mobj->x = closestaxis->x + FixedMul(FINECOSINE(fa),closestaxis->radius);

  00033	8b 45 08	 mov	 eax, DWORD PTR _closestaxis$[ebp]
  00036	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00039	51		 push	 ecx
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _fa$[ebp]
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _finecosine
  00042	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 _FixedMul
  0004b	83 c4 08	 add	 esp, 8
  0004e	8b 55 08	 mov	 edx, DWORD PTR _closestaxis$[ebp]
  00051	03 42 10	 add	 eax, DWORD PTR [edx+16]
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00057	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 4427 : 	mobj->y = closestaxis->y + FixedMul(FINESINE(fa),closestaxis->radius);

  0005a	8b 45 08	 mov	 eax, DWORD PTR _closestaxis$[ebp]
  0005d	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR _fa$[ebp]
  00064	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _finesine[edx*4]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _FixedMul
  00071	83 c4 08	 add	 esp, 8
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _closestaxis$[ebp]
  00077	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  0007a	8b 55 0c	 mov	 edx, DWORD PTR _mobj$[ebp]
  0007d	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 4428 : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_P_GimmeAxisXYPos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _RotateZMatrix
_TEXT	SEGMENT
_sinrad$ = -12						; size = 4
_cosrad$ = -8						; size = 4
_fa$ = -4						; size = 4
_rad$ = 8						; size = 4
_RotateZMatrix PROC					; COMDAT

; 4364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4365 : 	static TMatrix ret;
; 4366 : 	const angle_t fa = rad>>ANGLETOFINESHIFT;

  00009	8b 45 08	 mov	 eax, DWORD PTR _rad$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 fc	 mov	 DWORD PTR _fa$[ebp], eax

; 4367 : 	const fixed_t cosrad = FINECOSINE(fa), sinrad = FINESINE(fa);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _fa$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0001b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001e	89 55 f8	 mov	 DWORD PTR _cosrad$[ebp], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _fa$[ebp]
  00024	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0002b	89 4d f4	 mov	 DWORD PTR _sinrad$[ebp], ecx

; 4368 : 
; 4369 : 	ret[0][0] = cosrad;    ret[0][1] = sinrad;   ret[0][2] =        0; ret[0][3] = 0;

  0002e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00033	6b c8 00	 imul	 ecx, eax, 0
  00036	ba 04 00 00 00	 mov	 edx, 4
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	8b 55 f8	 mov	 edx, DWORD PTR _cosrad$[ebp]
  00041	89 94 01 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+eax], edx
  00048	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	ba 04 00 00 00	 mov	 edx, 4
  00055	c1 e2 00	 shl	 edx, 0
  00058	8b 45 f4	 mov	 eax, DWORD PTR _sinrad$[ebp]
  0005b	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], eax
  00062	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	ba 04 00 00 00	 mov	 edx, 4
  0006f	d1 e2		 shl	 edx, 1
  00071	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], 0
  0007c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00081	6b c8 00	 imul	 ecx, eax, 0
  00084	ba 04 00 00 00	 mov	 edx, 4
  00089	6b c2 03	 imul	 eax, edx, 3
  0008c	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+eax], 0

; 4370 : 	ret[1][0] = -sinrad;   ret[1][1] = cosrad;   ret[1][2] =        0; ret[1][3] = 0;

  00097	8b 45 f4	 mov	 eax, DWORD PTR _sinrad$[ebp]
  0009a	f7 d8		 neg	 eax
  0009c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000a1	c1 e1 00	 shl	 ecx, 0
  000a4	ba 04 00 00 00	 mov	 edx, 4
  000a9	6b d2 00	 imul	 edx, edx, 0
  000ac	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], eax
  000b3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000b8	c1 e0 00	 shl	 eax, 0
  000bb	b9 04 00 00 00	 mov	 ecx, 4
  000c0	c1 e1 00	 shl	 ecx, 0
  000c3	8b 55 f8	 mov	 edx, DWORD PTR _cosrad$[ebp]
  000c6	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+ecx], edx
  000cd	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d2	c1 e0 00	 shl	 eax, 0
  000d5	b9 04 00 00 00	 mov	 ecx, 4
  000da	d1 e1		 shl	 ecx, 1
  000dc	c7 84 08 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+ecx], 0
  000e7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ec	c1 e0 00	 shl	 eax, 0
  000ef	b9 04 00 00 00	 mov	 ecx, 4
  000f4	6b d1 03	 imul	 edx, ecx, 3
  000f7	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+edx], 0

; 4371 : 	ret[2][0] = 0;         ret[2][1] = 0;        ret[2][2] = FRACUNIT; ret[2][3] = 0;

  00102	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00107	d1 e0		 shl	 eax, 1
  00109	b9 04 00 00 00	 mov	 ecx, 4
  0010e	6b d1 00	 imul	 edx, ecx, 0
  00111	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+edx], 0
  0011c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00121	d1 e0		 shl	 eax, 1
  00123	b9 04 00 00 00	 mov	 ecx, 4
  00128	c1 e1 00	 shl	 ecx, 0
  0012b	c7 84 08 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+ecx], 0
  00136	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013b	d1 e0		 shl	 eax, 1
  0013d	b9 04 00 00 00	 mov	 ecx, 4
  00142	d1 e1		 shl	 ecx, 1
  00144	c7 84 08 00 00
	00 00 00 00 01
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+ecx], 65536 ; 00010000H
  0014f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00154	d1 e0		 shl	 eax, 1
  00156	b9 04 00 00 00	 mov	 ecx, 4
  0015b	6b d1 03	 imul	 edx, ecx, 3
  0015e	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[eax+edx], 0

; 4372 : 	ret[3][0] = 0;         ret[3][1] = 0;        ret[3][2] =        0; ret[3][3] = FRACUNIT;

  00169	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0016e	6b c8 03	 imul	 ecx, eax, 3
  00171	ba 04 00 00 00	 mov	 edx, 4
  00176	6b c2 00	 imul	 eax, edx, 0
  00179	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+eax], 0
  00184	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00189	6b c8 03	 imul	 ecx, eax, 3
  0018c	ba 04 00 00 00	 mov	 edx, 4
  00191	c1 e2 00	 shl	 edx, 0
  00194	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], 0
  0019f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a4	6b c8 03	 imul	 ecx, eax, 3
  001a7	ba 04 00 00 00	 mov	 edx, 4
  001ac	d1 e2		 shl	 edx, 1
  001ae	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+edx], 0
  001b9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001be	6b c8 03	 imul	 ecx, eax, 3
  001c1	ba 04 00 00 00	 mov	 edx, 4
  001c6	6b c2 03	 imul	 eax, edx, 3
  001c9	c7 84 01 00 00
	00 00 00 00 01
	00		 mov	 DWORD PTR ?ret@?1??RotateZMatrix@@9@9[ecx+eax], 65536 ; 00010000H

; 4373 : 
; 4374 : 	return &ret;

  001d4	b8 00 00 00 00	 mov	 eax, OFFSET ?ret@?1??RotateZMatrix@@9@9

; 4375 : }

  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi
  001db	5b		 pop	 ebx
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c3		 ret	 0
_RotateZMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _RotateXMatrix
_TEXT	SEGMENT
_sinrad$ = -12						; size = 4
_cosrad$ = -8						; size = 4
_fa$ = -4						; size = 4
_rad$ = 8						; size = 4
_RotateXMatrix PROC					; COMDAT

; 4334 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4335 : 	static TMatrix ret;
; 4336 : 	const angle_t fa = rad>>ANGLETOFINESHIFT;

  00009	8b 45 08	 mov	 eax, DWORD PTR _rad$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	89 45 fc	 mov	 DWORD PTR _fa$[ebp], eax

; 4337 : 	const fixed_t cosrad = FINECOSINE(fa), sinrad = FINESINE(fa);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _fa$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0001b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0001e	89 55 f8	 mov	 DWORD PTR _cosrad$[ebp], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _fa$[ebp]
  00024	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0002b	89 4d f4	 mov	 DWORD PTR _sinrad$[ebp], ecx

; 4338 : 
; 4339 : 	ret[0][0] = FRACUNIT; ret[0][1] =       0; ret[0][2] = 0;        ret[0][3] = 0;

  0002e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00033	6b c8 00	 imul	 ecx, eax, 0
  00036	ba 04 00 00 00	 mov	 edx, 4
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	c7 84 01 00 00
	00 00 00 00 01
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+eax], 65536 ; 00010000H
  00049	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	ba 04 00 00 00	 mov	 edx, 4
  00056	c1 e2 00	 shl	 edx, 0
  00059	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], 0
  00064	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	ba 04 00 00 00	 mov	 edx, 4
  00071	d1 e2		 shl	 edx, 1
  00073	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], 0
  0007e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00083	6b c8 00	 imul	 ecx, eax, 0
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	6b c2 03	 imul	 eax, edx, 3
  0008e	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+eax], 0

; 4340 : 	ret[1][0] =        0; ret[1][1] =  cosrad; ret[1][2] = sinrad;   ret[1][3] = 0;

  00099	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0009e	c1 e0 00	 shl	 eax, 0
  000a1	b9 04 00 00 00	 mov	 ecx, 4
  000a6	6b d1 00	 imul	 edx, ecx, 0
  000a9	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+edx], 0
  000b4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000b9	c1 e0 00	 shl	 eax, 0
  000bc	b9 04 00 00 00	 mov	 ecx, 4
  000c1	c1 e1 00	 shl	 ecx, 0
  000c4	8b 55 f8	 mov	 edx, DWORD PTR _cosrad$[ebp]
  000c7	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+ecx], edx
  000ce	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d3	c1 e0 00	 shl	 eax, 0
  000d6	b9 04 00 00 00	 mov	 ecx, 4
  000db	d1 e1		 shl	 ecx, 1
  000dd	8b 55 f4	 mov	 edx, DWORD PTR _sinrad$[ebp]
  000e0	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+ecx], edx
  000e7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ec	c1 e0 00	 shl	 eax, 0
  000ef	b9 04 00 00 00	 mov	 ecx, 4
  000f4	6b d1 03	 imul	 edx, ecx, 3
  000f7	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+edx], 0

; 4341 : 	ret[2][0] =        0; ret[2][1] = -sinrad; ret[2][2] = cosrad;   ret[2][3] = 0;

  00102	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00107	d1 e0		 shl	 eax, 1
  00109	b9 04 00 00 00	 mov	 ecx, 4
  0010e	6b d1 00	 imul	 edx, ecx, 0
  00111	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+edx], 0
  0011c	8b 45 f4	 mov	 eax, DWORD PTR _sinrad$[ebp]
  0011f	f7 d8		 neg	 eax
  00121	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00126	d1 e1		 shl	 ecx, 1
  00128	ba 04 00 00 00	 mov	 edx, 4
  0012d	c1 e2 00	 shl	 edx, 0
  00130	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], eax
  00137	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013c	d1 e0		 shl	 eax, 1
  0013e	b9 04 00 00 00	 mov	 ecx, 4
  00143	d1 e1		 shl	 ecx, 1
  00145	8b 55 f8	 mov	 edx, DWORD PTR _cosrad$[ebp]
  00148	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+ecx], edx
  0014f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00154	d1 e0		 shl	 eax, 1
  00156	b9 04 00 00 00	 mov	 ecx, 4
  0015b	6b d1 03	 imul	 edx, ecx, 3
  0015e	c7 84 10 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[eax+edx], 0

; 4342 : 	ret[3][0] =        0; ret[3][1] =       0; ret[3][2] = 0;        ret[3][3] = FRACUNIT;

  00169	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0016e	6b c8 03	 imul	 ecx, eax, 3
  00171	ba 04 00 00 00	 mov	 edx, 4
  00176	6b c2 00	 imul	 eax, edx, 0
  00179	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+eax], 0
  00184	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00189	6b c8 03	 imul	 ecx, eax, 3
  0018c	ba 04 00 00 00	 mov	 edx, 4
  00191	c1 e2 00	 shl	 edx, 0
  00194	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], 0
  0019f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a4	6b c8 03	 imul	 ecx, eax, 3
  001a7	ba 04 00 00 00	 mov	 edx, 4
  001ac	d1 e2		 shl	 edx, 1
  001ae	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+edx], 0
  001b9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001be	6b c8 03	 imul	 ecx, eax, 3
  001c1	ba 04 00 00 00	 mov	 edx, 4
  001c6	6b c2 03	 imul	 eax, edx, 3
  001c9	c7 84 01 00 00
	00 00 00 00 01
	00		 mov	 DWORD PTR ?ret@?1??RotateXMatrix@@9@9[ecx+eax], 65536 ; 00010000H

; 4343 : 
; 4344 : 	return &ret;

  001d4	b8 00 00 00 00	 mov	 eax, OFFSET ?ret@?1??RotateXMatrix@@9@9

; 4345 : }

  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi
  001db	5b		 pop	 ebx
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c3		 ret	 0
_RotateXMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _VectorMatrixMultiply
_TEXT	SEGMENT
_v$ = 8							; size = 4
_m$ = 12						; size = 4
_VectorMatrixMultiply PROC				; COMDAT

; 4321 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4322 : 	static TVector ret;
; 4323 : 
; 4324 : 	ret[0] = FixedMul(v[0],m[0][0]) + FixedMul(v[1],m[1][0]) + FixedMul(v[2],m[2][0]) + FixedMul(v[3],m[3][0]);

  00009	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  00014	ba 04 00 00 00	 mov	 edx, 4
  00019	6b c2 00	 imul	 eax, edx, 0
  0001c	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  0001f	51		 push	 ecx
  00020	ba 04 00 00 00	 mov	 edx, 4
  00025	6b c2 00	 imul	 eax, edx, 0
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _FixedMul
  00034	83 c4 08	 add	 esp, 8
  00037	8b f0		 mov	 esi, eax
  00039	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003e	c1 e0 00	 shl	 eax, 0
  00041	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  00044	b9 04 00 00 00	 mov	 ecx, 4
  00049	6b d1 00	 imul	 edx, ecx, 0
  0004c	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  0004f	50		 push	 eax
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0005b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _FixedMul
  00064	83 c4 08	 add	 esp, 8
  00067	03 f0		 add	 esi, eax
  00069	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006e	d1 e1		 shl	 ecx, 1
  00070	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  00073	ba 04 00 00 00	 mov	 edx, 4
  00078	6b c2 00	 imul	 eax, edx, 0
  0007b	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  0007e	51		 push	 ecx
  0007f	ba 04 00 00 00	 mov	 edx, 4
  00084	d1 e2		 shl	 edx, 1
  00086	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00089	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _FixedMul
  00092	83 c4 08	 add	 esp, 8
  00095	03 f0		 add	 esi, eax
  00097	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0009c	6b c2 03	 imul	 eax, edx, 3
  0009f	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  000a2	b9 04 00 00 00	 mov	 ecx, 4
  000a7	6b d1 00	 imul	 edx, ecx, 0
  000aa	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  000ad	50		 push	 eax
  000ae	b9 04 00 00 00	 mov	 ecx, 4
  000b3	6b d1 03	 imul	 edx, ecx, 3
  000b6	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000b9	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _FixedMul
  000c2	83 c4 08	 add	 esp, 8
  000c5	03 f0		 add	 esi, eax
  000c7	ba 04 00 00 00	 mov	 edx, 4
  000cc	6b c2 00	 imul	 eax, edx, 0
  000cf	89 b0 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??VectorMatrixMultiply@@9@9[eax], esi

; 4325 : 	ret[1] = FixedMul(v[0],m[0][1]) + FixedMul(v[1],m[1][1]) + FixedMul(v[2],m[2][1]) + FixedMul(v[3],m[3][1]);

  000d5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000da	6b c8 00	 imul	 ecx, eax, 0
  000dd	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  000e0	ba 04 00 00 00	 mov	 edx, 4
  000e5	c1 e2 00	 shl	 edx, 0
  000e8	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000eb	50		 push	 eax
  000ec	b9 04 00 00 00	 mov	 ecx, 4
  000f1	6b d1 00	 imul	 edx, ecx, 0
  000f4	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000f7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000fa	51		 push	 ecx
  000fb	e8 00 00 00 00	 call	 _FixedMul
  00100	83 c4 08	 add	 esp, 8
  00103	8b f0		 mov	 esi, eax
  00105	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0010a	c1 e2 00	 shl	 edx, 0
  0010d	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	c1 e0 00	 shl	 eax, 0
  00118	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  0011b	51		 push	 ecx
  0011c	ba 04 00 00 00	 mov	 edx, 4
  00121	c1 e2 00	 shl	 edx, 0
  00124	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00127	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 _FixedMul
  00130	83 c4 08	 add	 esp, 8
  00133	03 f0		 add	 esi, eax
  00135	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0013a	d1 e2		 shl	 edx, 1
  0013c	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	c1 e0 00	 shl	 eax, 0
  00147	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  0014a	51		 push	 ecx
  0014b	ba 04 00 00 00	 mov	 edx, 4
  00150	d1 e2		 shl	 edx, 1
  00152	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00155	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00158	51		 push	 ecx
  00159	e8 00 00 00 00	 call	 _FixedMul
  0015e	83 c4 08	 add	 esp, 8
  00161	03 f0		 add	 esi, eax
  00163	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00168	6b c2 03	 imul	 eax, edx, 3
  0016b	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  0016e	b9 04 00 00 00	 mov	 ecx, 4
  00173	c1 e1 00	 shl	 ecx, 0
  00176	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00179	52		 push	 edx
  0017a	b8 04 00 00 00	 mov	 eax, 4
  0017f	6b c8 03	 imul	 ecx, eax, 3
  00182	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00185	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _FixedMul
  0018e	83 c4 08	 add	 esp, 8
  00191	03 f0		 add	 esi, eax
  00193	b9 04 00 00 00	 mov	 ecx, 4
  00198	c1 e1 00	 shl	 ecx, 0
  0019b	89 b1 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??VectorMatrixMultiply@@9@9[ecx], esi

; 4326 : 	ret[2] = FixedMul(v[0],m[0][2]) + FixedMul(v[1],m[1][2]) + FixedMul(v[2],m[2][2]) + FixedMul(v[3],m[3][2]);

  001a1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a6	6b c8 00	 imul	 ecx, eax, 0
  001a9	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  001ac	ba 04 00 00 00	 mov	 edx, 4
  001b1	d1 e2		 shl	 edx, 1
  001b3	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  001b6	50		 push	 eax
  001b7	b9 04 00 00 00	 mov	 ecx, 4
  001bc	6b d1 00	 imul	 edx, ecx, 0
  001bf	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  001c2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001c5	51		 push	 ecx
  001c6	e8 00 00 00 00	 call	 _FixedMul
  001cb	83 c4 08	 add	 esp, 8
  001ce	8b f0		 mov	 esi, eax
  001d0	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001d5	c1 e2 00	 shl	 edx, 0
  001d8	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  001db	b8 04 00 00 00	 mov	 eax, 4
  001e0	d1 e0		 shl	 eax, 1
  001e2	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 00	 shl	 edx, 0
  001ee	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _FixedMul
  001fa	83 c4 08	 add	 esp, 8
  001fd	03 f0		 add	 esi, eax
  001ff	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00204	d1 e2		 shl	 edx, 1
  00206	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  00209	b8 04 00 00 00	 mov	 eax, 4
  0020e	d1 e0		 shl	 eax, 1
  00210	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  00213	51		 push	 ecx
  00214	ba 04 00 00 00	 mov	 edx, 4
  00219	d1 e2		 shl	 edx, 1
  0021b	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0021e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00221	51		 push	 ecx
  00222	e8 00 00 00 00	 call	 _FixedMul
  00227	83 c4 08	 add	 esp, 8
  0022a	03 f0		 add	 esi, eax
  0022c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00231	6b c2 03	 imul	 eax, edx, 3
  00234	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  00237	b9 04 00 00 00	 mov	 ecx, 4
  0023c	d1 e1		 shl	 ecx, 1
  0023e	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00241	52		 push	 edx
  00242	b8 04 00 00 00	 mov	 eax, 4
  00247	6b c8 03	 imul	 ecx, eax, 3
  0024a	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0024d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _FixedMul
  00256	83 c4 08	 add	 esp, 8
  00259	03 f0		 add	 esi, eax
  0025b	b9 04 00 00 00	 mov	 ecx, 4
  00260	d1 e1		 shl	 ecx, 1
  00262	89 b1 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??VectorMatrixMultiply@@9@9[ecx], esi

; 4327 : 	ret[3] = FixedMul(v[0],m[0][3]) + FixedMul(v[1],m[1][3]) + FixedMul(v[2],m[2][3]) + FixedMul(v[3],m[3][3]);

  00268	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0026d	6b c8 00	 imul	 ecx, eax, 0
  00270	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  00273	ba 04 00 00 00	 mov	 edx, 4
  00278	6b c2 03	 imul	 eax, edx, 3
  0027b	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  0027e	51		 push	 ecx
  0027f	ba 04 00 00 00	 mov	 edx, 4
  00284	6b c2 00	 imul	 eax, edx, 0
  00287	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0028a	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0028d	52		 push	 edx
  0028e	e8 00 00 00 00	 call	 _FixedMul
  00293	83 c4 08	 add	 esp, 8
  00296	8b f0		 mov	 esi, eax
  00298	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0029d	c1 e0 00	 shl	 eax, 0
  002a0	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 03	 imul	 edx, ecx, 3
  002ab	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  002ae	50		 push	 eax
  002af	b9 04 00 00 00	 mov	 ecx, 4
  002b4	c1 e1 00	 shl	 ecx, 0
  002b7	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  002ba	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002bd	50		 push	 eax
  002be	e8 00 00 00 00	 call	 _FixedMul
  002c3	83 c4 08	 add	 esp, 8
  002c6	03 f0		 add	 esi, eax
  002c8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002cd	d1 e1		 shl	 ecx, 1
  002cf	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  002d2	ba 04 00 00 00	 mov	 edx, 4
  002d7	6b c2 03	 imul	 eax, edx, 3
  002da	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  002dd	51		 push	 ecx
  002de	ba 04 00 00 00	 mov	 edx, 4
  002e3	d1 e2		 shl	 edx, 1
  002e5	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  002e8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002eb	51		 push	 ecx
  002ec	e8 00 00 00 00	 call	 _FixedMul
  002f1	83 c4 08	 add	 esp, 8
  002f4	03 f0		 add	 esi, eax
  002f6	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002fb	6b c2 03	 imul	 eax, edx, 3
  002fe	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  00301	b9 04 00 00 00	 mov	 ecx, 4
  00306	6b d1 03	 imul	 edx, ecx, 3
  00309	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  0030c	50		 push	 eax
  0030d	b9 04 00 00 00	 mov	 ecx, 4
  00312	6b d1 03	 imul	 edx, ecx, 3
  00315	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00318	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0031b	51		 push	 ecx
  0031c	e8 00 00 00 00	 call	 _FixedMul
  00321	83 c4 08	 add	 esp, 8
  00324	03 f0		 add	 esi, eax
  00326	ba 04 00 00 00	 mov	 edx, 4
  0032b	6b c2 03	 imul	 eax, edx, 3
  0032e	89 b0 00 00 00
	00		 mov	 DWORD PTR ?ret@?1??VectorMatrixMultiply@@9@9[eax], esi

; 4328 : 
; 4329 : 	return &ret;

  00334	b8 00 00 00 00	 mov	 eax, OFFSET ?ret@?1??VectorMatrixMultiply@@9@9

; 4330 : }

  00339	5f		 pop	 edi
  0033a	5e		 pop	 esi
  0033b	5b		 pop	 ebx
  0033c	8b e5		 mov	 esp, ebp
  0033e	5d		 pop	 ebp
  0033f	c3		 ret	 0
_VectorMatrixMultiply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Boss7Thinker
_TEXT	SEGMENT
tv766 = -396						; size = 4
tv745 = -396						; size = 4
tv422 = -396						; size = 4
tv355 = -396						; size = 4
_fa$1 = -328						; size = 4
_mo2$2 = -324						; size = 4
_z$3 = -320						; size = 4
_y$4 = -316						; size = 4
_x$5 = -312						; size = 4
_ns$6 = -308						; size = 4
_j$7 = -304						; size = 4
_i$8 = -300						; size = 4
_closestNum$9 = -296					; size = 4
_foundgoop$10 = -292					; size = 4
_i$11 = -288						; size = 4
_th$12 = -284						; size = 4
_waypointNum$13 = -280					; size = 4
_airtime$14 = -276					; size = 4
_horizontal$15 = -272					; size = 4
_vertical$16 = -268					; size = 4
_closestdist$17 = -264					; size = 4
_dist$18 = -260						; size = 4
_an$19 = -256						; size = 4
_mo2$20 = -252						; size = 4
_hitspot$21 = -248					; size = 4
_missile$22 = -244					; size = 4
_i$23 = -240						; size = 4
_i$24 = -236						; size = 4
_dummymo$25 = -232					; size = 212
_i$26 = -20						; size = 4
_delta$27 = -16						; size = 4
_mo2$28 = -12						; size = 4
_th$29 = -8						; size = 4
_i$30 = -4						; size = 4
_mobj$ = 8						; size = 4
_P_Boss7Thinker PROC					; COMDAT

; 3791 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3792 : 	if (!mobj->target || !(mobj->target->flags & MF_SHOOTABLE))

  0000c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000f	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00016	74 11		 je	 SHORT $LN41@P_Boss7Thi
  00018	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001b	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00021	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00024	83 e2 04	 and	 edx, 4
  00027	75 39		 jne	 SHORT $LN40@P_Boss7Thi
$LN41@P_Boss7Thi:

; 3793 : 	{
; 3794 : 		// look for a new target
; 3795 : 		if (P_LookForPlayers(mobj, true, false, 0))

  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	6a 01		 push	 1
  0002f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _P_LookForPlayers
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	85 c0		 test	 eax, eax
  0003d	74 05		 je	 SHORT $LN42@P_Boss7Thi

; 3796 : 			return; // got a new target

  0003f	e9 a5 18 00 00	 jmp	 $LN144@P_Boss7Thi
$LN42@P_Boss7Thi:

; 3797 : 
; 3798 : 		P_SetMobjStateNF(mobj, mobj->info->spawnstate);

  00044	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00047	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0004d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00050	52		 push	 edx
  00051	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _P_SetMobjStateNF
  0005a	83 c4 08	 add	 esp, 8

; 3799 : 		return;

  0005d	e9 87 18 00 00	 jmp	 $LN144@P_Boss7Thi
$LN40@P_Boss7Thi:

; 3800 : 	}
; 3801 : 
; 3802 : 	if (mobj->health >= 8 && (leveltime & 14) == 0)

  00062	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00065	83 b8 8c 00 00
	00 08		 cmp	 DWORD PTR [eax+140], 8
  0006c	7c 39		 jl	 SHORT $LN43@P_Boss7Thi
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00073	83 e0 0e	 and	 eax, 14			; 0000000eH
  00076	75 2f		 jne	 SHORT $LN43@P_Boss7Thi

; 3803 : 		P_SpawnMobj(mobj->x, mobj->y, mobj->z + mobj->height, MT_SMOK)->momz = FRACUNIT;

  00078	68 b6 00 00 00	 push	 182			; 000000b6H
  0007d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00080	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00083	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00086	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00089	51		 push	 ecx
  0008a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0008d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00090	51		 push	 ecx
  00091	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00094	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _P_SpawnMobj
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H
$LN43@P_Boss7Thi:

; 3804 : 
; 3805 : 	if (mobj->state == &states[S_BLACKEGG_STND] && mobj->tics == mobj->state->tics)

  000a7	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  000ac	69 c8 88 01 00
	00		 imul	 ecx, eax, 392
  000b2	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  000b8	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000bb	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  000be	75 57		 jne	 SHORT $LN44@P_Boss7Thi
  000c0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c3	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  000c6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000c9	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  000cc	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000cf	75 46		 jne	 SHORT $LN44@P_Boss7Thi

; 3806 : 	{
; 3807 : 		mobj->reactiontime += P_Random();

  000d1	e8 00 00 00 00	 call	 _P_Random
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000dc	03 81 9c 00 00
	00		 add	 eax, DWORD PTR [ecx+156]
  000e2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000e5	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax

; 3808 : 
; 3809 : 		if (mobj->health <= 2)

  000eb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ee	83 b8 8c 00 00
	00 02		 cmp	 DWORD PTR [eax+140], 2
  000f5	7f 1b		 jg	 SHORT $LN46@P_Boss7Thi

; 3810 : 			mobj->reactiontime /= 4;

  000f7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000fa	8b 80 9c 00 00
	00		 mov	 eax, DWORD PTR [eax+156]
  00100	99		 cdq
  00101	83 e2 03	 and	 edx, 3
  00104	03 c2		 add	 eax, edx
  00106	c1 f8 02	 sar	 eax, 2
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0010c	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax
$LN46@P_Boss7Thi:

; 3811 : 	}

  00112	e9 d2 17 00 00	 jmp	 $LN144@P_Boss7Thi
$LN44@P_Boss7Thi:

; 3812 : 	else if (mobj->state == &states[S_BLACKEGG_DIE4] && mobj->tics == mobj->state->tics)

  00117	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0011c	69 c8 bc 01 00
	00		 imul	 ecx, eax, 444
  00122	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00128	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0012b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0012e	0f 85 68 01 00
	00		 jne	 $LN47@P_Boss7Thi
  00134	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00137	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0013a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0013d	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00140	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00143	0f 85 53 01 00
	00		 jne	 $LN47@P_Boss7Thi

; 3813 : 	{
; 3814 : 		INT32 i;
; 3815 : 		thinker_t *th;
; 3816 : 		mobj_t *mo2;
; 3817 : 
; 3818 : 		mobj->health = 0;

  00149	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0014c	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 3819 : 
; 3820 : 		// make sure there is a player alive for victory
; 3821 : 		for (i = 0; i < MAXPLAYERS; i++)

  00156	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$30[ebp], 0
  0015d	eb 09		 jmp	 SHORT $LN4@P_Boss7Thi
$LN2@P_Boss7Thi:
  0015f	8b 45 fc	 mov	 eax, DWORD PTR _i$30[ebp]
  00162	83 c0 01	 add	 eax, 1
  00165	89 45 fc	 mov	 DWORD PTR _i$30[ebp], eax
$LN4@P_Boss7Thi:
  00168	83 7d fc 20	 cmp	 DWORD PTR _i$30[ebp], 32 ; 00000020H
  0016c	7d 53		 jge	 SHORT $LN3@P_Boss7Thi

; 3822 : 			if (playeringame[i] && (players[i].health > 0

  0016e	8b 45 fc	 mov	 eax, DWORD PTR _i$30[ebp]
  00171	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00179	74 44		 je	 SHORT $LN49@P_Boss7Thi
  0017b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$30[ebp], 508
  00182	83 b8 28 00 00
	00 00		 cmp	 DWORD PTR _players[eax+40], 0
  00189	7f 32		 jg	 SHORT $LN52@P_Boss7Thi
  0018b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00192	75 09		 jne	 SHORT $LN51@P_Boss7Thi
  00194	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0019b	74 22		 je	 SHORT $LN49@P_Boss7Thi
$LN51@P_Boss7Thi:
  0019d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$30[ebp], 508
  001a4	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR _players[eax+256], 0
  001ab	7f 10		 jg	 SHORT $LN52@P_Boss7Thi
  001ad	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$30[ebp], 508
  001b4	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR _players[eax+260], 0
  001bb	7e 02		 jle	 SHORT $LN49@P_Boss7Thi
$LN52@P_Boss7Thi:

; 3823 : 				|| ((netgame || multiplayer) && (players[i].lives > 0 || players[i].continues > 0))))
; 3824 : 				break;

  001bd	eb 02		 jmp	 SHORT $LN3@P_Boss7Thi
$LN49@P_Boss7Thi:
  001bf	eb 9e		 jmp	 SHORT $LN2@P_Boss7Thi
$LN3@P_Boss7Thi:

; 3825 : 
; 3826 : 		if (i == MAXPLAYERS)

  001c1	83 7d fc 20	 cmp	 DWORD PTR _i$30[ebp], 32 ; 00000020H
  001c5	75 05		 jne	 SHORT $LN53@P_Boss7Thi

; 3827 : 			return; // no one left alive, so do not end game

  001c7	e9 1d 17 00 00	 jmp	 $LN144@P_Boss7Thi
$LN53@P_Boss7Thi:

; 3828 : 
; 3829 : 		// scan the remaining thinkers to see
; 3830 : 		// if all bosses are dead
; 3831 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  001cc	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  001d1	89 45 f8	 mov	 DWORD PTR _th$29[ebp], eax
  001d4	eb 09		 jmp	 SHORT $LN7@P_Boss7Thi
$LN5@P_Boss7Thi:
  001d6	8b 45 f8	 mov	 eax, DWORD PTR _th$29[ebp]
  001d9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001dc	89 4d f8	 mov	 DWORD PTR _th$29[ebp], ecx
$LN7@P_Boss7Thi:
  001df	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _th$29[ebp], OFFSET _thinkercap
  001e6	74 3d		 je	 SHORT $LN6@P_Boss7Thi

; 3832 : 		{
; 3833 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  001e8	8b 45 f8	 mov	 eax, DWORD PTR _th$29[ebp]
  001eb	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  001f2	74 02		 je	 SHORT $LN54@P_Boss7Thi

; 3834 : 				continue;

  001f4	eb e0		 jmp	 SHORT $LN5@P_Boss7Thi
$LN54@P_Boss7Thi:

; 3835 : 
; 3836 : 			mo2 = (mobj_t *)th;

  001f6	8b 45 f8	 mov	 eax, DWORD PTR _th$29[ebp]
  001f9	89 45 f4	 mov	 DWORD PTR _mo2$28[ebp], eax

; 3837 : 			if (mo2 != mobj && (mo2->flags & MF_BOSS) && mo2->health > 0)

  001fc	8b 45 f4	 mov	 eax, DWORD PTR _mo2$28[ebp]
  001ff	3b 45 08	 cmp	 eax, DWORD PTR _mobj$[ebp]
  00202	74 1f		 je	 SHORT $LN55@P_Boss7Thi
  00204	8b 45 f4	 mov	 eax, DWORD PTR _mo2$28[ebp]
  00207	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0020a	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00210	74 11		 je	 SHORT $LN55@P_Boss7Thi
  00212	8b 45 f4	 mov	 eax, DWORD PTR _mo2$28[ebp]
  00215	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0021c	7e 05		 jle	 SHORT $LN55@P_Boss7Thi

; 3838 : 				return; // other boss not dead

  0021e	e9 c6 16 00 00	 jmp	 $LN144@P_Boss7Thi
$LN55@P_Boss7Thi:

; 3839 : 		}

  00223	eb b1		 jmp	 SHORT $LN5@P_Boss7Thi
$LN6@P_Boss7Thi:

; 3840 : 
; 3841 : 		for (i = 0; i < MAXPLAYERS; i++)

  00225	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$30[ebp], 0
  0022c	eb 09		 jmp	 SHORT $LN10@P_Boss7Thi
$LN8@P_Boss7Thi:
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _i$30[ebp]
  00231	83 c0 01	 add	 eax, 1
  00234	89 45 fc	 mov	 DWORD PTR _i$30[ebp], eax
$LN10@P_Boss7Thi:
  00237	83 7d fc 20	 cmp	 DWORD PTR _i$30[ebp], 32 ; 00000020H
  0023b	7d 17		 jge	 SHORT $LN9@P_Boss7Thi

; 3842 : 				P_DoPlayerExit(&players[i]);

  0023d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$30[ebp], 508
  00244	05 00 00 00 00	 add	 eax, OFFSET _players
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 _P_DoPlayerExit
  0024f	83 c4 04	 add	 esp, 4
  00252	eb da		 jmp	 SHORT $LN8@P_Boss7Thi
$LN9@P_Boss7Thi:

; 3843 : 
; 3844 : 		P_SetTarget(&mobj->target, NULL);

  00254	6a 00		 push	 0
  00256	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00259	05 98 00 00 00	 add	 eax, 152		; 00000098H
  0025e	50		 push	 eax
  0025f	e8 00 00 00 00	 call	 _P_SetTarget
  00264	83 c4 08	 add	 esp, 8

; 3845 : 
; 3846 : 		mobj->flags |= MF_NOCLIP;

  00267	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0026a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0026d	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00273	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00276	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3847 : 		mobj->flags &= ~MF_SPECIAL;

  00279	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0027c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0027f	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00282	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00285	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3848 : 
; 3849 : 		S_StartSound(0, sfx_befall);

  00288	68 0f 01 00 00	 push	 271			; 0000010fH
  0028d	6a 00		 push	 0
  0028f	e8 00 00 00 00	 call	 _S_StartSound
  00294	83 c4 08	 add	 esp, 8

; 3850 : 	}

  00297	e9 4d 16 00 00	 jmp	 $LN144@P_Boss7Thi
$LN47@P_Boss7Thi:

; 3851 : 	else if (mobj->state >= &states[S_BLACKEGG_WALK1]
; 3852 : 		&& mobj->state <= &states[S_BLACKEGG_WALK6])

  0029c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  002a1	69 c8 8a 01 00
	00		 imul	 ecx, eax, 394
  002a7	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  002ad	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  002b0	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  002b3	0f 82 59 05 00
	00		 jb	 $LN56@P_Boss7Thi
  002b9	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  002be	69 c8 8f 01 00
	00		 imul	 ecx, eax, 399
  002c4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  002ca	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  002cd	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  002d0	0f 87 3c 05 00
	00		 ja	 $LN56@P_Boss7Thi

; 3853 : 	{
; 3854 : 		// Chase
; 3855 : 		INT32 delta;
; 3856 : 		INT32 i;
; 3857 : 
; 3858 : 		if (mobj->z != mobj->floorz)

  002d6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002d9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  002dc	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  002df	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  002e2	74 05		 je	 SHORT $LN58@P_Boss7Thi

; 3859 : 			return;

  002e4	e9 00 16 00 00	 jmp	 $LN144@P_Boss7Thi
$LN58@P_Boss7Thi:

; 3860 : 
; 3861 : 		// Self-adjust if stuck on the edge
; 3862 : 		if (mobj->tracer)

  002e9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002ec	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  002f3	74 7f		 je	 SHORT $LN60@P_Boss7Thi

; 3863 : 		{
; 3864 : 			if (P_AproxDistance(mobj->x - mobj->tracer->x, mobj->y - mobj->tracer->y) > 128*FRACUNIT - mobj->radius)

  002f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002f8	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  002fe	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00301	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00304	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  00307	50		 push	 eax
  00308	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0030b	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00311	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00314	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00317	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  0031a	51		 push	 ecx
  0031b	e8 00 00 00 00	 call	 _P_AproxDistance
  00320	83 c4 08	 add	 esp, 8
  00323	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00326	b9 00 00 80 00	 mov	 ecx, 8388608		; 00800000H
  0032b	2b 4a 40	 sub	 ecx, DWORD PTR [edx+64]
  0032e	3b c1		 cmp	 eax, ecx
  00330	7e 42		 jle	 SHORT $LN60@P_Boss7Thi

; 3865 : 				P_InstaThrust(mobj, R_PointToAngle2(mobj->x, mobj->y, mobj->tracer->x, mobj->tracer->y), FRACUNIT);

  00332	68 00 00 01 00	 push	 65536			; 00010000H
  00337	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0033a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00340	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00343	52		 push	 edx
  00344	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00347	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0034d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00350	52		 push	 edx
  00351	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00354	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00357	51		 push	 ecx
  00358	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0035b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 _R_PointToAngle2
  00364	83 c4 10	 add	 esp, 16			; 00000010H
  00367	50		 push	 eax
  00368	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0036b	51		 push	 ecx
  0036c	e8 00 00 00 00	 call	 _P_InstaThrust
  00371	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN60@P_Boss7Thi:

; 3866 : 		}
; 3867 : 
; 3868 : 		if (mobj->flags2 & MF2_FRET)

  00374	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00377	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0037d	83 e1 10	 and	 ecx, 16			; 00000010H
  00380	74 3a		 je	 SHORT $LN61@P_Boss7Thi

; 3869 : 		{
; 3870 : 			P_SetMobjState(mobj, S_BLACKEGG_DESTROYPLAT1);

  00382	68 c4 01 00 00	 push	 452			; 000001c4H
  00387	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0038a	50		 push	 eax
  0038b	e8 00 00 00 00	 call	 _P_SetMobjState
  00390	83 c4 08	 add	 esp, 8

; 3871 : 			S_StartSound(0, sfx_s3k_34);

  00393	68 96 00 00 00	 push	 150			; 00000096H
  00398	6a 00		 push	 0
  0039a	e8 00 00 00 00	 call	 _S_StartSound
  0039f	83 c4 08	 add	 esp, 8

; 3872 : 			mobj->flags2 &= ~MF2_FRET;

  003a2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003a5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  003ab	83 e1 ef	 and	 ecx, -17		; ffffffefH
  003ae	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  003b1	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3873 : 			return;

  003b7	e9 2d 15 00 00	 jmp	 $LN144@P_Boss7Thi
$LN61@P_Boss7Thi:

; 3874 : 		}
; 3875 : 
; 3876 : 		// turn towards movement direction if not there yet
; 3877 : 		if (mobj->movedir < NUMDIRS)

  003bc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003bf	83 b8 90 00 00
	00 08		 cmp	 DWORD PTR [eax+144], 8
  003c6	73 5b		 jae	 SHORT $LN65@P_Boss7Thi

; 3878 : 		{
; 3879 : 			mobj->angle &= (7<<29);

  003c8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003cb	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  003ce	81 e1 00 00 00
	e0		 and	 ecx, -536870912		; e0000000H
  003d4	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  003d7	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 3880 : 			delta = mobj->angle - (mobj->movedir << 29);

  003da	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003dd	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  003e3	c1 e1 1d	 shl	 ecx, 29			; 0000001dH
  003e6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  003e9	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  003ec	2b c1		 sub	 eax, ecx
  003ee	89 45 f0	 mov	 DWORD PTR _delta$27[ebp], eax

; 3881 : 
; 3882 : 			if (delta > 0)

  003f1	83 7d f0 00	 cmp	 DWORD PTR _delta$27[ebp], 0
  003f5	7e 14		 jle	 SHORT $LN63@P_Boss7Thi

; 3883 : 				mobj->angle -= ANGLE_45;

  003f7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003fa	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  003fd	81 e9 00 00 00
	20		 sub	 ecx, 536870912		; 20000000H
  00403	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00406	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
  00409	eb 18		 jmp	 SHORT $LN65@P_Boss7Thi
$LN63@P_Boss7Thi:

; 3884 : 			else if (delta < 0)

  0040b	83 7d f0 00	 cmp	 DWORD PTR _delta$27[ebp], 0
  0040f	7d 12		 jge	 SHORT $LN65@P_Boss7Thi

; 3885 : 				mobj->angle += ANGLE_45;

  00411	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00414	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00417	81 c1 00 00 00
	20		 add	 ecx, 536870912		; 20000000H
  0041d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00420	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN65@P_Boss7Thi:

; 3886 : 		}
; 3887 : 
; 3888 : 		// Is a player on top of us?
; 3889 : 		for (i = 0; i < MAXPLAYERS; i++)

  00423	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$26[ebp], 0
  0042a	eb 09		 jmp	 SHORT $LN13@P_Boss7Thi
$LN11@P_Boss7Thi:
  0042c	8b 45 ec	 mov	 eax, DWORD PTR _i$26[ebp]
  0042f	83 c0 01	 add	 eax, 1
  00432	89 45 ec	 mov	 DWORD PTR _i$26[ebp], eax
$LN13@P_Boss7Thi:
  00435	83 7d ec 20	 cmp	 DWORD PTR _i$26[ebp], 32 ; 00000020H
  00439	0f 8d f8 00 00
	00		 jge	 $LN12@P_Boss7Thi

; 3890 : 		{
; 3891 : 			if (!playeringame[i])

  0043f	8b 45 ec	 mov	 eax, DWORD PTR _i$26[ebp]
  00442	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0044a	75 02		 jne	 SHORT $LN66@P_Boss7Thi

; 3892 : 				continue;

  0044c	eb de		 jmp	 SHORT $LN11@P_Boss7Thi
$LN66@P_Boss7Thi:

; 3893 : 
; 3894 : 			if (!players[i].mo)

  0044e	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$26[ebp], 508
  00455	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0045c	75 02		 jne	 SHORT $LN67@P_Boss7Thi

; 3895 : 				continue;

  0045e	eb cc		 jmp	 SHORT $LN11@P_Boss7Thi
$LN67@P_Boss7Thi:

; 3896 : 
; 3897 : 			if (players[i].mo->health <= 0)

  00460	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$26[ebp], 508
  00467	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0046d	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00474	7f 02		 jg	 SHORT $LN68@P_Boss7Thi

; 3898 : 				continue;

  00476	eb b4		 jmp	 SHORT $LN11@P_Boss7Thi
$LN68@P_Boss7Thi:

; 3899 : 
; 3900 : 			if (P_AproxDistance(players[i].mo->x - mobj->x, players[i].mo->y - mobj->y) > mobj->radius)

  00478	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$26[ebp], 508
  0047f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00485	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00488	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0048b	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  0048e	50		 push	 eax
  0048f	69 4d ec fc 01
	00 00		 imul	 ecx, DWORD PTR _i$26[ebp], 508
  00496	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0049c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0049f	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  004a2	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  004a5	51		 push	 ecx
  004a6	e8 00 00 00 00	 call	 _P_AproxDistance
  004ab	83 c4 08	 add	 esp, 8
  004ae	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004b1	3b 42 40	 cmp	 eax, DWORD PTR [edx+64]
  004b4	7e 05		 jle	 SHORT $LN69@P_Boss7Thi

; 3901 : 				continue;

  004b6	e9 71 ff ff ff	 jmp	 $LN11@P_Boss7Thi
$LN69@P_Boss7Thi:

; 3902 : 
; 3903 : 			if (players[i].mo->z > mobj->z + mobj->height - 2*FRACUNIT
; 3904 : 				&& players[i].mo->z < mobj->z + mobj->height + 32*FRACUNIT)

  004bb	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$26[ebp], 508
  004c2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  004c8	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004cb	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  004ce	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004d1	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  004d4	8d 84 10 00 00
	fe ff		 lea	 eax, DWORD PTR [eax+edx-131072]
  004db	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  004de	7e 52		 jle	 SHORT $LN70@P_Boss7Thi
  004e0	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$26[ebp], 508
  004e7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  004ed	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004f0	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  004f3	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004f6	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  004f9	8d 84 10 00 00
	20 00		 lea	 eax, DWORD PTR [eax+edx+2097152]
  00500	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00503	7d 2d		 jge	 SHORT $LN70@P_Boss7Thi

; 3905 : 			{
; 3906 : 				// Punch him!
; 3907 : 				P_SetMobjState(mobj, mobj->info->meleestate);

  00505	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00508	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0050e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00511	52		 push	 edx
  00512	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00515	50		 push	 eax
  00516	e8 00 00 00 00	 call	 _P_SetMobjState
  0051b	83 c4 08	 add	 esp, 8

; 3908 : 				S_StartSound(0, sfx_begrnd); // warning sound

  0051e	68 13 01 00 00	 push	 275			; 00000113H
  00523	6a 00		 push	 0
  00525	e8 00 00 00 00	 call	 _S_StartSound
  0052a	83 c4 08	 add	 esp, 8

; 3909 : 				return;

  0052d	e9 b7 13 00 00	 jmp	 $LN144@P_Boss7Thi
$LN70@P_Boss7Thi:

; 3910 : 			}
; 3911 : 		}

  00532	e9 f5 fe ff ff	 jmp	 $LN11@P_Boss7Thi
$LN12@P_Boss7Thi:

; 3912 : 
; 3913 : 		if (mobj->health <= 2
; 3914 : 			&& mobj->target
; 3915 : 			&& mobj->target->player
; 3916 : 			&& (mobj->target->player->pflags & PF_ITEMHANG))

  00537	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0053a	83 b8 8c 00 00
	00 02		 cmp	 DWORD PTR [eax+140], 2
  00541	7f 75		 jg	 SHORT $LN71@P_Boss7Thi
  00543	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00546	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0054d	74 69		 je	 SHORT $LN71@P_Boss7Thi
  0054f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00552	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00558	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0055f	74 57		 je	 SHORT $LN71@P_Boss7Thi
  00561	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00564	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0056a	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00570	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  00576	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  0057b	74 3b		 je	 SHORT $LN71@P_Boss7Thi

; 3917 : 		{
; 3918 : 			A_FaceTarget(mobj);

  0057d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00580	50		 push	 eax
  00581	e8 00 00 00 00	 call	 _A_FaceTarget
  00586	83 c4 04	 add	 esp, 4

; 3919 : 			P_SetMobjState(mobj, S_BLACKEGG_SHOOT1);

  00589	68 90 01 00 00	 push	 400			; 00000190H
  0058e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00591	50		 push	 eax
  00592	e8 00 00 00 00	 call	 _P_SetMobjState
  00597	83 c4 08	 add	 esp, 8

; 3920 : 			mobj->movecount = TICRATE + P_Random()/2;

  0059a	e8 00 00 00 00	 call	 _P_Random
  0059f	0f b6 c0	 movzx	 eax, al
  005a2	99		 cdq
  005a3	2b c2		 sub	 eax, edx
  005a5	d1 f8		 sar	 eax, 1
  005a7	83 c0 23	 add	 eax, 35			; 00000023H
  005aa	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  005ad	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 3921 : 			return;

  005b3	e9 31 13 00 00	 jmp	 $LN144@P_Boss7Thi
$LN71@P_Boss7Thi:

; 3922 : 		}
; 3923 : 
; 3924 : 		if (mobj->reactiontime)

  005b8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005bb	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  005c2	74 15		 je	 SHORT $LN72@P_Boss7Thi

; 3925 : 			mobj->reactiontime--;

  005c4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005c7	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  005cd	83 e9 01	 sub	 ecx, 1
  005d0	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  005d3	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx
$LN72@P_Boss7Thi:

; 3926 : 
; 3927 : 		if (mobj->reactiontime <= 0 && mobj->z == mobj->floorz)

  005d9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005dc	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  005e3	0f 8f 77 01 00
	00		 jg	 $LN73@P_Boss7Thi
  005e9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005ec	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  005ef	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  005f2	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  005f5	0f 85 65 01 00
	00		 jne	 $LN73@P_Boss7Thi
$RetryAttack$150:

; 3928 : 		{
; 3929 : 			// Here, we'll call P_Random() and decide what kind of attack to do
; 3930 : RetryAttack:
; 3931 : 			switch(mobj->threshold)

  005fb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005fe	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00604	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv355[ebp], ecx
  0060a	83 bd 74 fe ff
	ff 00		 cmp	 DWORD PTR tv355[ebp], 0
  00611	74 1b		 je	 SHORT $LN74@P_Boss7Thi
  00613	83 bd 74 fe ff
	ff 01		 cmp	 DWORD PTR tv355[ebp], 1
  0061a	74 7a		 je	 SHORT $LN77@P_Boss7Thi
  0061c	83 bd 74 fe ff
	ff 02		 cmp	 DWORD PTR tv355[ebp], 2
  00623	0f 84 cf 00 00
	00		 je	 $LN80@P_Boss7Thi
  00629	e9 fe 00 00 00	 jmp	 $LN14@P_Boss7Thi
$LN74@P_Boss7Thi:

; 3932 : 			{
; 3933 : 				case 0: // Lob cannon balls
; 3934 : 					if (mobj->z < 1056*FRACUNIT)

  0062e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00631	81 78 18 00 00
	20 04		 cmp	 DWORD PTR [eax+24], 69206016 ; 04200000H
  00638	7d 3d		 jge	 SHORT $LN75@P_Boss7Thi

; 3935 : 					{
; 3936 : 						A_FaceTarget(mobj);

  0063a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0063d	50		 push	 eax
  0063e	e8 00 00 00 00	 call	 _A_FaceTarget
  00643	83 c4 04	 add	 esp, 4

; 3937 : 						P_SetMobjState(mobj, mobj->info->xdeathstate);

  00646	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00649	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0064f	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00652	52		 push	 edx
  00653	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00656	50		 push	 eax
  00657	e8 00 00 00 00	 call	 _P_SetMobjState
  0065c	83 c4 08	 add	 esp, 8

; 3938 : 						mobj->movecount = 7*TICRATE + P_Random();

  0065f	e8 00 00 00 00	 call	 _P_Random
  00664	0f b6 c0	 movzx	 eax, al
  00667	05 f5 00 00 00	 add	 eax, 245		; 000000f5H
  0066c	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0066f	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 3939 : 					}

  00675	eb 1a		 jmp	 SHORT $LN76@P_Boss7Thi
$LN75@P_Boss7Thi:

; 3940 : 					else
; 3941 : 					{
; 3942 : 						mobj->threshold++;

  00677	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0067a	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00680	83 c1 01	 add	 ecx, 1
  00683	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00686	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 3943 : 						goto RetryAttack;

  0068c	e9 6a ff ff ff	 jmp	 $RetryAttack$150
$LN76@P_Boss7Thi:

; 3944 : 					}
; 3945 : 					break;

  00691	e9 96 00 00 00	 jmp	 $LN14@P_Boss7Thi
$LN77@P_Boss7Thi:

; 3946 : 				case 1: // Chaingun Goop
; 3947 : 					A_FaceTarget(mobj);

  00696	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00699	50		 push	 eax
  0069a	e8 00 00 00 00	 call	 _A_FaceTarget
  0069f	83 c4 04	 add	 esp, 4

; 3948 : 					P_SetMobjState(mobj, S_BLACKEGG_SHOOT1);

  006a2	68 90 01 00 00	 push	 400			; 00000190H
  006a7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006aa	50		 push	 eax
  006ab	e8 00 00 00 00	 call	 _P_SetMobjState
  006b0	83 c4 08	 add	 esp, 8

; 3949 : 
; 3950 : 					if (mobj->health > 2)

  006b3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006b6	83 b8 8c 00 00
	00 02		 cmp	 DWORD PTR [eax+140], 2
  006bd	7e 1e		 jle	 SHORT $LN78@P_Boss7Thi

; 3951 : 						mobj->movecount = TICRATE + P_Random()/3;

  006bf	e8 00 00 00 00	 call	 _P_Random
  006c4	0f b6 c0	 movzx	 eax, al
  006c7	99		 cdq
  006c8	b9 03 00 00 00	 mov	 ecx, 3
  006cd	f7 f9		 idiv	 ecx
  006cf	83 c0 23	 add	 eax, 35			; 00000023H
  006d2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  006d5	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  006db	eb 19		 jmp	 SHORT $LN79@P_Boss7Thi
$LN78@P_Boss7Thi:

; 3952 : 					else
; 3953 : 						mobj->movecount = TICRATE + P_Random()/2;

  006dd	e8 00 00 00 00	 call	 _P_Random
  006e2	0f b6 c0	 movzx	 eax, al
  006e5	99		 cdq
  006e6	2b c2		 sub	 eax, edx
  006e8	d1 f8		 sar	 eax, 1
  006ea	83 c0 23	 add	 eax, 35			; 00000023H
  006ed	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006f0	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
$LN79@P_Boss7Thi:

; 3954 : 					break;

  006f6	eb 34		 jmp	 SHORT $LN14@P_Boss7Thi
$LN80@P_Boss7Thi:

; 3955 : 				case 2: // Homing Missile
; 3956 : 					A_FaceTarget(mobj);

  006f8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006fb	50		 push	 eax
  006fc	e8 00 00 00 00	 call	 _A_FaceTarget
  00701	83 c4 04	 add	 esp, 4

; 3957 : 					P_SetMobjState(mobj, mobj->info->missilestate);

  00704	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00707	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0070d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00710	52		 push	 edx
  00711	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00714	50		 push	 eax
  00715	e8 00 00 00 00	 call	 _P_SetMobjState
  0071a	83 c4 08	 add	 esp, 8

; 3958 : 					S_StartSound(0, sfx_beflap);

  0071d	68 11 01 00 00	 push	 273			; 00000111H
  00722	6a 00		 push	 0
  00724	e8 00 00 00 00	 call	 _S_StartSound
  00729	83 c4 08	 add	 esp, 8
$LN14@P_Boss7Thi:

; 3959 : 					break;
; 3960 : 			}
; 3961 : 
; 3962 : 			mobj->threshold++;

  0072c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0072f	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00735	83 c1 01	 add	 ecx, 1
  00738	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0073b	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 3963 : 			mobj->threshold %= 3;

  00741	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00744	8b 80 a0 00 00
	00		 mov	 eax, DWORD PTR [eax+160]
  0074a	99		 cdq
  0074b	b9 03 00 00 00	 mov	 ecx, 3
  00750	f7 f9		 idiv	 ecx
  00752	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00755	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 3964 : 			return;

  0075b	e9 89 11 00 00	 jmp	 $LN144@P_Boss7Thi
$LN73@P_Boss7Thi:

; 3965 : 		}
; 3966 : 
; 3967 : 		// possibly choose another target
; 3968 : 		if (multiplayer && (mobj->target->health <= 0 || !P_CheckSight(mobj, mobj->target))
; 3969 : 			&& P_LookForPlayers(mobj, true, false, 0))

  00760	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00767	74 47		 je	 SHORT $LN81@P_Boss7Thi
  00769	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0076c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00772	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00779	7e 1a		 jle	 SHORT $LN82@P_Boss7Thi
  0077b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0077e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00784	51		 push	 ecx
  00785	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00788	52		 push	 edx
  00789	e8 00 00 00 00	 call	 _P_CheckSight
  0078e	83 c4 08	 add	 esp, 8
  00791	85 c0		 test	 eax, eax
  00793	75 1b		 jne	 SHORT $LN81@P_Boss7Thi
$LN82@P_Boss7Thi:
  00795	6a 00		 push	 0
  00797	6a 00		 push	 0
  00799	6a 01		 push	 1
  0079b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0079e	50		 push	 eax
  0079f	e8 00 00 00 00	 call	 _P_LookForPlayers
  007a4	83 c4 10	 add	 esp, 16			; 00000010H
  007a7	85 c0		 test	 eax, eax
  007a9	74 05		 je	 SHORT $LN81@P_Boss7Thi

; 3970 : 			return; // got a new target

  007ab	e9 39 11 00 00	 jmp	 $LN144@P_Boss7Thi
$LN81@P_Boss7Thi:

; 3971 : 
; 3972 : 		if (leveltime & 1)

  007b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  007b5	83 e0 01	 and	 eax, 1
  007b8	74 53		 je	 SHORT $LN84@P_Boss7Thi

; 3973 : 		{
; 3974 : 			// chase towards player
; 3975 : 			if (--mobj->movecount < 0 || !P_Move(mobj, mobj->info->speed))

  007ba	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007bd	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  007c3	83 e9 01	 sub	 ecx, 1
  007c6	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv422[ebp], ecx
  007cc	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007cf	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR tv422[ebp]
  007d5	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  007db	83 bd 74 fe ff
	ff 00		 cmp	 DWORD PTR tv422[ebp], 0
  007e2	7c 1d		 jl	 SHORT $LN85@P_Boss7Thi
  007e4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007e7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  007ed	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  007f0	52		 push	 edx
  007f1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007f4	50		 push	 eax
  007f5	e8 00 00 00 00	 call	 _P_Move
  007fa	83 c4 08	 add	 esp, 8
  007fd	85 c0		 test	 eax, eax
  007ff	75 0c		 jne	 SHORT $LN84@P_Boss7Thi
$LN85@P_Boss7Thi:

; 3976 : 				P_NewChaseDir(mobj);

  00801	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00804	50		 push	 eax
  00805	e8 00 00 00 00	 call	 _P_NewChaseDir
  0080a	83 c4 04	 add	 esp, 4
$LN84@P_Boss7Thi:

; 3977 : 		}
; 3978 : 	}

  0080d	e9 d7 10 00 00	 jmp	 $LN144@P_Boss7Thi
$LN56@P_Boss7Thi:

; 3979 : 	else if (mobj->state == &states[S_BLACKEGG_MISSILE3] && mobj->tics == states[S_BLACKEGG_MISSILE3].tics)

  00812	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00817	69 c8 c0 01 00
	00		 imul	 ecx, eax, 448
  0081d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00823	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00826	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00829	0f 85 0e 03 00
	00		 jne	 $LN86@P_Boss7Thi
  0082f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00834	69 c8 c0 01 00
	00		 imul	 ecx, eax, 448
  0083a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0083d	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00840	3b 81 08 00 00
	00		 cmp	 eax, DWORD PTR _states[ecx+8]
  00846	0f 85 f1 02 00
	00		 jne	 $LN86@P_Boss7Thi

; 3980 : 	{
; 3981 : 		mobj_t dummymo;
; 3982 : 
; 3983 : 		if (!mobj->target)

  0084c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0084f	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00856	75 1e		 jne	 SHORT $LN88@P_Boss7Thi

; 3984 : 		{
; 3985 : 			P_SetMobjState(mobj, mobj->info->spawnstate);

  00858	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0085b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00861	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00864	52		 push	 edx
  00865	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00868	50		 push	 eax
  00869	e8 00 00 00 00	 call	 _P_SetMobjState
  0086e	83 c4 08	 add	 esp, 8

; 3986 : 			return;

  00871	e9 73 10 00 00	 jmp	 $LN144@P_Boss7Thi
$LN88@P_Boss7Thi:

; 3987 : 		}
; 3988 : 
; 3989 : 		A_FaceTarget(mobj);

  00876	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00879	50		 push	 eax
  0087a	e8 00 00 00 00	 call	 _A_FaceTarget
  0087f	83 c4 04	 add	 esp, 4

; 3990 : 
; 3991 : 		// set dummymo's coordinates
; 3992 : 		dummymo.x = mobj->target->x;

  00882	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00885	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0088b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0088e	89 95 28 ff ff
	ff		 mov	 DWORD PTR _dummymo$25[ebp+16], edx

; 3993 : 		dummymo.y = mobj->target->y;

  00894	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00897	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0089d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  008a0	89 95 2c ff ff
	ff		 mov	 DWORD PTR _dummymo$25[ebp+20], edx

; 3994 : 		dummymo.z = mobj->target->z + 16*FRACUNIT; // raised height

  008a6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008a9	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  008af	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  008b2	81 c2 00 00 10
	00		 add	 edx, 1048576		; 00100000H
  008b8	89 95 30 ff ff
	ff		 mov	 DWORD PTR _dummymo$25[ebp+24], edx

; 3995 : 
; 3996 : 		P_SpawnXYZMissile(mobj, &dummymo, MT_BLACKEGGMAN_MISSILE,

  008be	68 00 80 01 00	 push	 98304			; 00018000H
  008c3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008c6	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  008c9	51		 push	 ecx
  008ca	e8 00 00 00 00	 call	 _FixedDiv
  008cf	83 c4 08	 add	 esp, 8
  008d2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  008d5	03 42 18	 add	 eax, DWORD PTR [edx+24]
  008d8	50		 push	 eax
  008d9	68 00 80 01 00	 push	 98304			; 00018000H
  008de	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008e1	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  008e4	51		 push	 ecx
  008e5	e8 00 00 00 00	 call	 _FixedDiv
  008ea	83 c4 08	 add	 esp, 8
  008ed	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  008f2	50		 push	 eax
  008f3	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  008f6	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  008f9	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  008fe	50		 push	 eax
  008ff	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00902	51		 push	 ecx
  00903	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00908	83 c4 0c	 add	 esp, 12			; 0000000cH
  0090b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0090e	03 42 14	 add	 eax, DWORD PTR [edx+20]
  00911	50		 push	 eax
  00912	68 00 80 01 00	 push	 98304			; 00018000H
  00917	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0091a	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0091d	51		 push	 ecx
  0091e	e8 00 00 00 00	 call	 _FixedDiv
  00923	83 c4 08	 add	 esp, 8
  00926	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  0092b	50		 push	 eax
  0092c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0092f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00932	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00937	50		 push	 eax
  00938	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0093b	51		 push	 ecx
  0093c	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00941	83 c4 0c	 add	 esp, 12			; 0000000cH
  00944	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00947	03 42 10	 add	 eax, DWORD PTR [edx+16]
  0094a	50		 push	 eax
  0094b	6a 2a		 push	 42			; 0000002aH
  0094d	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _dummymo$25[ebp]
  00953	50		 push	 eax
  00954	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00957	51		 push	 ecx
  00958	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  0095d	83 c4 18	 add	 esp, 24			; 00000018H

; 3997 : 			mobj->x + P_ReturnThrustX(mobj, mobj->angle-ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 3998 : 			mobj->y + P_ReturnThrustY(mobj, mobj->angle-ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 3999 : 			mobj->z + FixedDiv(mobj->height, 3*FRACUNIT/2));
; 4000 : 
; 4001 : 		P_SpawnXYZMissile(mobj, &dummymo, MT_BLACKEGGMAN_MISSILE,

  00960	68 00 80 01 00	 push	 98304			; 00018000H
  00965	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00968	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0096b	51		 push	 ecx
  0096c	e8 00 00 00 00	 call	 _FixedDiv
  00971	83 c4 08	 add	 esp, 8
  00974	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00977	03 42 18	 add	 eax, DWORD PTR [edx+24]
  0097a	50		 push	 eax
  0097b	68 00 80 01 00	 push	 98304			; 00018000H
  00980	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00983	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00986	51		 push	 ecx
  00987	e8 00 00 00 00	 call	 _FixedDiv
  0098c	83 c4 08	 add	 esp, 8
  0098f	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  00994	50		 push	 eax
  00995	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00998	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0099b	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  009a0	50		 push	 eax
  009a1	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  009a4	51		 push	 ecx
  009a5	e8 00 00 00 00	 call	 _P_ReturnThrustY
  009aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  009ad	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  009b0	03 42 14	 add	 eax, DWORD PTR [edx+20]
  009b3	50		 push	 eax
  009b4	68 00 80 01 00	 push	 98304			; 00018000H
  009b9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  009bc	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  009bf	51		 push	 ecx
  009c0	e8 00 00 00 00	 call	 _FixedDiv
  009c5	83 c4 08	 add	 esp, 8
  009c8	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  009cd	50		 push	 eax
  009ce	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  009d1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  009d4	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  009d9	50		 push	 eax
  009da	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  009dd	51		 push	 ecx
  009de	e8 00 00 00 00	 call	 _P_ReturnThrustX
  009e3	83 c4 0c	 add	 esp, 12			; 0000000cH
  009e6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  009e9	03 42 10	 add	 eax, DWORD PTR [edx+16]
  009ec	50		 push	 eax
  009ed	6a 2a		 push	 42			; 0000002aH
  009ef	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _dummymo$25[ebp]
  009f5	50		 push	 eax
  009f6	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  009f9	51		 push	 ecx
  009fa	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  009ff	83 c4 18	 add	 esp, 24			; 00000018H

; 4002 : 			mobj->x + P_ReturnThrustX(mobj, mobj->angle+ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 4003 : 			mobj->y + P_ReturnThrustY(mobj, mobj->angle+ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 4004 : 			mobj->z + FixedDiv(mobj->height, 3*FRACUNIT/2));
; 4005 : 
; 4006 : 		P_SpawnXYZMissile(mobj, &dummymo, MT_BLACKEGGMAN_MISSILE,

  00a02	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a05	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00a08	99		 cdq
  00a09	2b c2		 sub	 eax, edx
  00a0b	d1 f8		 sar	 eax, 1
  00a0d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00a10	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00a13	50		 push	 eax
  00a14	68 00 80 01 00	 push	 98304			; 00018000H
  00a19	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00a1c	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00a1f	50		 push	 eax
  00a20	e8 00 00 00 00	 call	 _FixedDiv
  00a25	83 c4 08	 add	 esp, 8
  00a28	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  00a2d	50		 push	 eax
  00a2e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00a31	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00a34	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  00a3a	52		 push	 edx
  00a3b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a3e	50		 push	 eax
  00a3f	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00a44	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a47	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00a4a	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00a4d	50		 push	 eax
  00a4e	68 00 80 01 00	 push	 98304			; 00018000H
  00a53	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00a56	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00a59	50		 push	 eax
  00a5a	e8 00 00 00 00	 call	 _FixedDiv
  00a5f	83 c4 08	 add	 esp, 8
  00a62	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  00a67	50		 push	 eax
  00a68	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00a6b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00a6e	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  00a74	52		 push	 edx
  00a75	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a78	50		 push	 eax
  00a79	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00a7e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a81	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00a84	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00a87	50		 push	 eax
  00a88	6a 2a		 push	 42			; 0000002aH
  00a8a	8d 95 18 ff ff
	ff		 lea	 edx, DWORD PTR _dummymo$25[ebp]
  00a90	52		 push	 edx
  00a91	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a94	50		 push	 eax
  00a95	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  00a9a	83 c4 18	 add	 esp, 24			; 00000018H

; 4007 : 			mobj->x + P_ReturnThrustX(mobj, mobj->angle-ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 4008 : 			mobj->y + P_ReturnThrustY(mobj, mobj->angle-ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 4009 : 			mobj->z + mobj->height/2);
; 4010 : 
; 4011 : 		P_SpawnXYZMissile(mobj, &dummymo, MT_BLACKEGGMAN_MISSILE,

  00a9d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00aa0	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00aa3	99		 cdq
  00aa4	2b c2		 sub	 eax, edx
  00aa6	d1 f8		 sar	 eax, 1
  00aa8	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00aab	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00aae	50		 push	 eax
  00aaf	68 00 80 01 00	 push	 98304			; 00018000H
  00ab4	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00ab7	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00aba	50		 push	 eax
  00abb	e8 00 00 00 00	 call	 _FixedDiv
  00ac0	83 c4 08	 add	 esp, 8
  00ac3	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  00ac8	50		 push	 eax
  00ac9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00acc	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00acf	81 c2 00 00 00
	40		 add	 edx, 1073741824		; 40000000H
  00ad5	52		 push	 edx
  00ad6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ad9	50		 push	 eax
  00ada	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00adf	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ae2	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00ae5	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00ae8	50		 push	 eax
  00ae9	68 00 80 01 00	 push	 98304			; 00018000H
  00aee	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00af1	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00af4	50		 push	 eax
  00af5	e8 00 00 00 00	 call	 _FixedDiv
  00afa	83 c4 08	 add	 esp, 8
  00afd	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  00b02	50		 push	 eax
  00b03	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00b06	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00b09	81 c2 00 00 00
	40		 add	 edx, 1073741824		; 40000000H
  00b0f	52		 push	 edx
  00b10	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b13	50		 push	 eax
  00b14	e8 00 00 00 00	 call	 _P_ReturnThrustX
  00b19	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b1c	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00b1f	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00b22	50		 push	 eax
  00b23	6a 2a		 push	 42			; 0000002aH
  00b25	8d 95 18 ff ff
	ff		 lea	 edx, DWORD PTR _dummymo$25[ebp]
  00b2b	52		 push	 edx
  00b2c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b2f	50		 push	 eax
  00b30	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  00b35	83 c4 18	 add	 esp, 24			; 00000018H

; 4012 : 			mobj->x + P_ReturnThrustX(mobj, mobj->angle+ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 4013 : 			mobj->y + P_ReturnThrustY(mobj, mobj->angle+ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 4014 : 			mobj->z + mobj->height/2);
; 4015 : 	}

  00b38	e9 ac 0d 00 00	 jmp	 $LN144@P_Boss7Thi
$LN86@P_Boss7Thi:

; 4016 : 	else if (mobj->state == &states[S_BLACKEGG_PAIN1] && mobj->tics == mobj->state->tics)

  00b3d	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00b42	69 c8 92 01 00
	00		 imul	 ecx, eax, 402
  00b48	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00b4e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b51	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00b54	0f 85 cf 00 00
	00		 jne	 $LN89@P_Boss7Thi
  00b5a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b5d	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00b60	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b63	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00b66	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00b69	0f 85 ba 00 00
	00		 jne	 $LN89@P_Boss7Thi

; 4017 : 	{
; 4018 : 		if (mobj->health > 0)

  00b6f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b72	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00b79	7e 15		 jle	 SHORT $LN91@P_Boss7Thi

; 4019 : 			mobj->health--;

  00b7b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b7e	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00b84	83 e9 01	 sub	 ecx, 1
  00b87	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b8a	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN91@P_Boss7Thi:

; 4020 : 
; 4021 : 		mobj->reactiontime /= 3;

  00b90	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b93	8b 80 9c 00 00
	00		 mov	 eax, DWORD PTR [eax+156]
  00b99	99		 cdq
  00b9a	b9 03 00 00 00	 mov	 ecx, 3
  00b9f	f7 f9		 idiv	 ecx
  00ba1	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00ba4	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax

; 4022 : 
; 4023 : 		if (mobj->health <= 0)

  00baa	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bad	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00bb4	7f 6e		 jg	 SHORT $LN17@P_Boss7Thi

; 4024 : 		{
; 4025 : 			INT32 i;
; 4026 : 
; 4027 : 			P_KillMobj(mobj, NULL, NULL);

  00bb6	6a 00		 push	 0
  00bb8	6a 00		 push	 0
  00bba	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bbd	50		 push	 eax
  00bbe	e8 00 00 00 00	 call	 _P_KillMobj
  00bc3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4028 : 
; 4029 : 			// It was a team effort
; 4030 : 			for (i = 0; i < MAXPLAYERS; i++)

  00bc6	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$24[ebp], 0
  00bd0	eb 0f		 jmp	 SHORT $LN18@P_Boss7Thi
$LN16@P_Boss7Thi:
  00bd2	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _i$24[ebp]
  00bd8	83 c0 01	 add	 eax, 1
  00bdb	89 85 14 ff ff
	ff		 mov	 DWORD PTR _i$24[ebp], eax
$LN18@P_Boss7Thi:
  00be1	83 bd 14 ff ff
	ff 20		 cmp	 DWORD PTR _i$24[ebp], 32 ; 00000020H
  00be8	7d 3a		 jge	 SHORT $LN17@P_Boss7Thi

; 4031 : 			{
; 4032 : 				if (playeringame[i])

  00bea	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _i$24[ebp]
  00bf0	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00bf8	74 02		 je	 SHORT $LN93@P_Boss7Thi

; 4033 : 					continue;

  00bfa	eb d6		 jmp	 SHORT $LN16@P_Boss7Thi
$LN93@P_Boss7Thi:

; 4034 : 
; 4035 : 				players[i].score += 1000;

  00bfc	69 85 14 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$24[ebp], 508
  00c06	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+188]
  00c0c	81 c1 e8 03 00
	00		 add	 ecx, 1000		; 000003e8H
  00c12	69 95 14 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _i$24[ebp], 508
  00c1c	89 8a bc 00 00
	00		 mov	 DWORD PTR _players[edx+188], ecx

; 4036 : 			}

  00c22	eb ae		 jmp	 SHORT $LN16@P_Boss7Thi
$LN17@P_Boss7Thi:

; 4037 : 		}
; 4038 : 	}

  00c24	e9 c0 0c 00 00	 jmp	 $LN144@P_Boss7Thi
$LN89@P_Boss7Thi:

; 4039 : 	else if (mobj->state == &states[S_BLACKEGG_PAIN35] && mobj->tics == 1)

  00c29	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00c2e	69 c8 b4 01 00
	00		 imul	 ecx, eax, 436
  00c34	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00c3a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00c3d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00c40	75 48		 jne	 SHORT $LN94@P_Boss7Thi
  00c42	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c45	83 78 58 01	 cmp	 DWORD PTR [eax+88], 1
  00c49	75 3f		 jne	 SHORT $LN94@P_Boss7Thi

; 4040 : 	{
; 4041 : 		if (mobj->health == 2)

  00c4b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c4e	83 b8 8c 00 00
	00 02		 cmp	 DWORD PTR [eax+140], 2
  00c55	75 2e		 jne	 SHORT $LN96@P_Boss7Thi

; 4042 : 		{
; 4043 : 			// Begin platform destruction
; 4044 : 			mobj->flags2 |= MF2_FRET;

  00c57	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c5a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00c60	83 c9 10	 or	 ecx, 16			; 00000010H
  00c63	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00c66	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4045 : 			P_SetMobjState(mobj, mobj->info->raisestate);

  00c6c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c6f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00c75	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00c78	52		 push	 edx
  00c79	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c7c	50		 push	 eax
  00c7d	e8 00 00 00 00	 call	 _P_SetMobjState
  00c82	83 c4 08	 add	 esp, 8
$LN96@P_Boss7Thi:

; 4046 : 		}
; 4047 : 	}

  00c85	e9 5f 0c 00 00	 jmp	 $LN144@P_Boss7Thi
$LN94@P_Boss7Thi:

; 4048 : 	else if (mobj->state == &states[S_BLACKEGG_HITFACE4] && mobj->tics == mobj->state->tics)

  00c8a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00c8f	69 c8 b8 01 00
	00		 imul	 ecx, eax, 440
  00c95	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00c9b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00c9e	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00ca1	0f 85 bb 01 00
	00		 jne	 $LN97@P_Boss7Thi
  00ca7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00caa	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00cad	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00cb0	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00cb3	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00cb6	0f 85 a6 01 00
	00		 jne	 $LN97@P_Boss7Thi

; 4049 : 	{
; 4050 : 		// This is where Black Eggman hits his face.
; 4051 : 		// If a player is on top of him, the player gets hurt.
; 4052 : 		// But, if the player has managed to escape,
; 4053 : 		// Black Eggman gets hurt!
; 4054 : 		INT32 i;
; 4055 : 		mobj->state->nextstate = mobj->info->painstate; // Reset

  00cbc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00cbf	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00cc5	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00cc8	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00ccb	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00cce	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 4056 : 
; 4057 : 		S_StartSound(0, sfx_bedeen);

  00cd1	68 0b 01 00 00	 push	 267			; 0000010bH
  00cd6	6a 00		 push	 0
  00cd8	e8 00 00 00 00	 call	 _S_StartSound
  00cdd	83 c4 08	 add	 esp, 8

; 4058 : 
; 4059 : 		for (i = 0; i < MAXPLAYERS; i++)

  00ce0	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$23[ebp], 0
  00cea	eb 0f		 jmp	 SHORT $LN21@P_Boss7Thi
$LN19@P_Boss7Thi:
  00cec	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00cf2	83 c0 01	 add	 eax, 1
  00cf5	89 85 10 ff ff
	ff		 mov	 DWORD PTR _i$23[ebp], eax
$LN21@P_Boss7Thi:
  00cfb	83 bd 10 ff ff
	ff 20		 cmp	 DWORD PTR _i$23[ebp], 32 ; 00000020H
  00d02	0f 8d 55 01 00
	00		 jge	 $LN20@P_Boss7Thi

; 4060 : 		{
; 4061 : 			if (!playeringame[i])

  00d08	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00d0e	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00d16	75 02		 jne	 SHORT $LN99@P_Boss7Thi

; 4062 : 				continue;

  00d18	eb d2		 jmp	 SHORT $LN19@P_Boss7Thi
$LN99@P_Boss7Thi:

; 4063 : 
; 4064 : 			if (!players[i].mo)

  00d1a	69 85 10 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$23[ebp], 508
  00d24	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00d2b	75 02		 jne	 SHORT $LN100@P_Boss7Thi

; 4065 : 				continue;

  00d2d	eb bd		 jmp	 SHORT $LN19@P_Boss7Thi
$LN100@P_Boss7Thi:

; 4066 : 
; 4067 : 			if (players[i].mo->health <= 0)

  00d2f	69 85 10 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$23[ebp], 508
  00d39	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00d3f	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00d46	7f 02		 jg	 SHORT $LN101@P_Boss7Thi

; 4068 : 				continue;

  00d48	eb a2		 jmp	 SHORT $LN19@P_Boss7Thi
$LN101@P_Boss7Thi:

; 4069 : 
; 4070 : 			if (P_AproxDistance(players[i].mo->x - mobj->x, players[i].mo->y - mobj->y) > (mobj->radius + players[i].mo->radius))

  00d4a	69 85 10 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$23[ebp], 508
  00d54	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00d5a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00d5d	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00d60	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00d63	50		 push	 eax
  00d64	69 8d 10 ff ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _i$23[ebp], 508
  00d6e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00d74	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d77	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00d7a	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00d7d	51		 push	 ecx
  00d7e	e8 00 00 00 00	 call	 _P_AproxDistance
  00d83	83 c4 08	 add	 esp, 8
  00d86	69 95 10 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _i$23[ebp], 508
  00d90	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  00d96	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00d99	8b 52 40	 mov	 edx, DWORD PTR [edx+64]
  00d9c	03 51 40	 add	 edx, DWORD PTR [ecx+64]
  00d9f	3b c2		 cmp	 eax, edx
  00da1	7e 05		 jle	 SHORT $LN102@P_Boss7Thi

; 4071 : 				continue;

  00da3	e9 44 ff ff ff	 jmp	 $LN19@P_Boss7Thi
$LN102@P_Boss7Thi:

; 4072 : 
; 4073 : 			if (players[i].mo->z > mobj->z + mobj->height - FRACUNIT
; 4074 : 				&& players[i].mo->z < mobj->z + mobj->height + 128*FRACUNIT) // You can't be in the vicinity, either...

  00da8	69 85 10 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$23[ebp], 508
  00db2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00db8	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00dbb	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00dbe	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00dc1	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  00dc4	8d 84 10 00 00
	ff ff		 lea	 eax, DWORD PTR [eax+edx-65536]
  00dcb	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00dce	0f 8e 84 00 00
	00		 jle	 $LN103@P_Boss7Thi
  00dd4	69 85 10 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$23[ebp], 508
  00dde	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00de4	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00de7	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00dea	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00ded	8b 52 44	 mov	 edx, DWORD PTR [edx+68]
  00df0	8d 84 10 00 00
	80 00		 lea	 eax, DWORD PTR [eax+edx+8388608]
  00df7	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00dfa	7d 5c		 jge	 SHORT $LN103@P_Boss7Thi

; 4075 : 			{
; 4076 : 				// Punch him!
; 4077 : 				P_DamageMobj(players[i].mo, mobj, mobj, 1);

  00dfc	6a 01		 push	 1
  00dfe	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e01	50		 push	 eax
  00e02	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00e05	51		 push	 ecx
  00e06	69 95 10 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _i$23[ebp], 508
  00e10	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  00e16	50		 push	 eax
  00e17	e8 00 00 00 00	 call	 _P_DamageMobj
  00e1c	83 c4 10	 add	 esp, 16			; 00000010H

; 4078 : 				mobj->state->nextstate = mobj->info->spawnstate;

  00e1f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e22	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00e28	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00e2b	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00e2e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00e31	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 4079 : 
; 4080 : 				// Laugh
; 4081 : 				S_StartSound(0, sfx_bewar1 + (P_Random() % 4));

  00e34	e8 00 00 00 00	 call	 _P_Random
  00e39	0f b6 c0	 movzx	 eax, al
  00e3c	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00e41	79 05		 jns	 SHORT $LN146@P_Boss7Thi
  00e43	48		 dec	 eax
  00e44	83 c8 fc	 or	 eax, -4			; fffffffcH
  00e47	40		 inc	 eax
$LN146@P_Boss7Thi:
  00e48	05 1c 01 00 00	 add	 eax, 284		; 0000011cH
  00e4d	50		 push	 eax
  00e4e	6a 00		 push	 0
  00e50	e8 00 00 00 00	 call	 _S_StartSound
  00e55	83 c4 08	 add	 esp, 8
$LN103@P_Boss7Thi:

; 4082 : 			}
; 4083 : 		}

  00e58	e9 8f fe ff ff	 jmp	 $LN19@P_Boss7Thi
$LN20@P_Boss7Thi:

; 4084 : 	}

  00e5d	e9 87 0a 00 00	 jmp	 $LN144@P_Boss7Thi
$LN97@P_Boss7Thi:

; 4085 : 	else if (mobj->state == &states[S_BLACKEGG_GOOP])

  00e62	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00e67	69 c8 c1 01 00
	00		 imul	 ecx, eax, 449
  00e6d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00e73	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00e76	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00e79	0f 85 95 00 00
	00		 jne	 $LN104@P_Boss7Thi

; 4086 : 	{
; 4087 : 		// Lob cannon balls
; 4088 : 		if (mobj->movecount-- <= 0 || !mobj->target)

  00e7f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e82	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00e88	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv745[ebp], ecx
  00e8e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00e91	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00e97	83 e8 01	 sub	 eax, 1
  00e9a	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00e9d	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
  00ea3	83 bd 74 fe ff
	ff 00		 cmp	 DWORD PTR tv745[ebp], 0
  00eaa	7e 0c		 jle	 SHORT $LN107@P_Boss7Thi
  00eac	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00eaf	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00eb6	75 1e		 jne	 SHORT $LN106@P_Boss7Thi
$LN107@P_Boss7Thi:

; 4089 : 		{
; 4090 : 			P_SetMobjState(mobj, mobj->info->spawnstate);

  00eb8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ebb	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00ec1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00ec4	52		 push	 edx
  00ec5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ec8	50		 push	 eax
  00ec9	e8 00 00 00 00	 call	 _P_SetMobjState
  00ece	83 c4 08	 add	 esp, 8

; 4091 : 			return;

  00ed1	e9 13 0a 00 00	 jmp	 $LN144@P_Boss7Thi
$LN106@P_Boss7Thi:

; 4092 : 		}
; 4093 : 
; 4094 : 		if ((leveltime & 15) == 0)

  00ed6	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00edb	83 e0 0f	 and	 eax, 15			; 0000000fH
  00ede	75 2f		 jne	 SHORT $LN108@P_Boss7Thi

; 4095 : 		{
; 4096 : 			var1 = MT_CANNONBALL;

  00ee0	c7 05 00 00 00
	00 71 00 00 00	 mov	 DWORD PTR _var1, 113	; 00000071H

; 4097 : 
; 4098 : 			var2 = 2*TICRATE + (80<<16);

  00eea	c7 05 00 00 00
	00 46 00 50 00	 mov	 DWORD PTR _var2, 5242950 ; 00500046H

; 4099 : 
; 4100 : 			A_LobShot(mobj);

  00ef4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ef7	50		 push	 eax
  00ef8	e8 00 00 00 00	 call	 _A_LobShot
  00efd	83 c4 04	 add	 esp, 4

; 4101 : 			S_StartSound(0, sfx_begoop);

  00f00	68 12 01 00 00	 push	 274			; 00000112H
  00f05	6a 00		 push	 0
  00f07	e8 00 00 00 00	 call	 _S_StartSound
  00f0c	83 c4 08	 add	 esp, 8
$LN108@P_Boss7Thi:

; 4102 : 		}
; 4103 : 	}

  00f0f	e9 d5 09 00 00	 jmp	 $LN144@P_Boss7Thi
$LN104@P_Boss7Thi:

; 4104 : 	else if (mobj->state == &states[S_BLACKEGG_SHOOT2])

  00f14	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00f19	69 c8 91 01 00
	00		 imul	 ecx, eax, 401
  00f1f	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00f25	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00f28	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00f2b	0f 85 3b 01 00
	00		 jne	 $LN109@P_Boss7Thi

; 4105 : 	{
; 4106 : 		// Chaingun goop
; 4107 : 		mobj_t *missile;
; 4108 : 
; 4109 : 		if (mobj->movecount-- <= 0 || !mobj->target)

  00f31	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f34	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00f3a	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv766[ebp], ecx
  00f40	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00f43	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00f49	83 e8 01	 sub	 eax, 1
  00f4c	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00f4f	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
  00f55	83 bd 74 fe ff
	ff 00		 cmp	 DWORD PTR tv766[ebp], 0
  00f5c	7e 0c		 jle	 SHORT $LN112@P_Boss7Thi
  00f5e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f61	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00f68	75 1e		 jne	 SHORT $LN111@P_Boss7Thi
$LN112@P_Boss7Thi:

; 4110 : 		{
; 4111 : 			P_SetMobjState(mobj, mobj->info->spawnstate);

  00f6a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f6d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00f73	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00f76	52		 push	 edx
  00f77	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f7a	50		 push	 eax
  00f7b	e8 00 00 00 00	 call	 _P_SetMobjState
  00f80	83 c4 08	 add	 esp, 8

; 4112 : 			return;

  00f83	e9 61 09 00 00	 jmp	 $LN144@P_Boss7Thi
$LN111@P_Boss7Thi:

; 4113 : 		}
; 4114 : 
; 4115 : 		A_FaceTarget(mobj);

  00f88	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f8b	50		 push	 eax
  00f8c	e8 00 00 00 00	 call	 _A_FaceTarget
  00f91	83 c4 04	 add	 esp, 4

; 4116 : 
; 4117 : 		missile = P_SpawnXYZMissile(mobj, mobj->target, MT_BLACKEGGMAN_GOOPFIRE,

  00f94	68 00 80 01 00	 push	 98304			; 00018000H
  00f99	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f9c	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00f9f	51		 push	 ecx
  00fa0	e8 00 00 00 00	 call	 _FixedDiv
  00fa5	83 c4 08	 add	 esp, 8
  00fa8	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00fab	03 42 18	 add	 eax, DWORD PTR [edx+24]
  00fae	50		 push	 eax
  00faf	68 00 80 01 00	 push	 98304			; 00018000H
  00fb4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00fb7	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00fba	51		 push	 ecx
  00fbb	e8 00 00 00 00	 call	 _FixedDiv
  00fc0	83 c4 08	 add	 esp, 8
  00fc3	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  00fc8	50		 push	 eax
  00fc9	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00fcc	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00fcf	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00fd4	50		 push	 eax
  00fd5	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00fd8	51		 push	 ecx
  00fd9	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00fde	83 c4 0c	 add	 esp, 12			; 0000000cH
  00fe1	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00fe4	03 42 14	 add	 eax, DWORD PTR [edx+20]
  00fe7	50		 push	 eax
  00fe8	68 00 80 01 00	 push	 98304			; 00018000H
  00fed	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ff0	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00ff3	51		 push	 ecx
  00ff4	e8 00 00 00 00	 call	 _FixedDiv
  00ff9	83 c4 08	 add	 esp, 8
  00ffc	05 00 00 04 00	 add	 eax, 262144		; 00040000H
  01001	50		 push	 eax
  01002	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01005	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01008	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  0100d	50		 push	 eax
  0100e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01011	51		 push	 ecx
  01012	e8 00 00 00 00	 call	 _P_ReturnThrustX
  01017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0101a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0101d	03 42 10	 add	 eax, DWORD PTR [edx+16]
  01020	50		 push	 eax
  01021	6a 29		 push	 41			; 00000029H
  01023	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01026	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0102c	51		 push	 ecx
  0102d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01030	52		 push	 edx
  01031	e8 00 00 00 00	 call	 _P_SpawnXYZMissile
  01036	83 c4 18	 add	 esp, 24			; 00000018H
  01039	89 85 0c ff ff
	ff		 mov	 DWORD PTR _missile$22[ebp], eax

; 4118 : 			mobj->x + P_ReturnThrustX(mobj, mobj->angle-ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 4119 : 			mobj->y + P_ReturnThrustY(mobj, mobj->angle-ANGLE_90, FixedDiv(mobj->radius, 3*FRACUNIT/2)+(4*FRACUNIT)),
; 4120 : 			mobj->z + FixedDiv(mobj->height, 3*FRACUNIT/2));
; 4121 : 
; 4122 : 		S_StopSound(missile);

  0103f	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _missile$22[ebp]
  01045	50		 push	 eax
  01046	e8 00 00 00 00	 call	 _S_StopSound
  0104b	83 c4 04	 add	 esp, 4

; 4123 : 
; 4124 : 		if (leveltime & 1)

  0104e	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01053	83 e0 01	 and	 eax, 1
  01056	74 0f		 je	 SHORT $LN113@P_Boss7Thi

; 4125 : 			S_StartSound(0, sfx_beshot);

  01058	68 19 01 00 00	 push	 281			; 00000119H
  0105d	6a 00		 push	 0
  0105f	e8 00 00 00 00	 call	 _S_StartSound
  01064	83 c4 08	 add	 esp, 8
$LN113@P_Boss7Thi:

; 4126 : 	}

  01067	e9 7d 08 00 00	 jmp	 $LN144@P_Boss7Thi
$LN109@P_Boss7Thi:

; 4127 : 	else if (mobj->state == &states[S_BLACKEGG_JUMP1] && mobj->tics == 1)

  0106c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01071	69 c8 c2 01 00
	00		 imul	 ecx, eax, 450
  01077	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0107d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01080	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01083	0f 85 00 05 00
	00		 jne	 $LN114@P_Boss7Thi
  01089	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0108c	83 78 58 01	 cmp	 DWORD PTR [eax+88], 1
  01090	0f 85 f3 04 00
	00		 jne	 $LN114@P_Boss7Thi

; 4128 : 	{
; 4129 : 		mobj_t *hitspot = NULL, *mo2;

  01096	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _hitspot$21[ebp], 0

; 4130 : 		angle_t an;
; 4131 : 		fixed_t dist, closestdist;
; 4132 : 		fixed_t vertical, horizontal;
; 4133 : 		fixed_t airtime = 5*TICRATE;

  010a0	c7 85 ec fe ff
	ff af 00 00 00	 mov	 DWORD PTR _airtime$14[ebp], 175 ; 000000afH

; 4134 : 		INT32 waypointNum = 0;

  010aa	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _waypointNum$13[ebp], 0

; 4135 : 		thinker_t *th;
; 4136 : 		INT32 i;
; 4137 : 		boolean foundgoop = false;

  010b4	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _foundgoop$10[ebp], 0

; 4138 : 		INT32 closestNum;
; 4139 : 
; 4140 : 		// Looks for players in goop. If you find one, try to jump on him.
; 4141 : 		for (i = 0; i < MAXPLAYERS; i++)

  010be	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$11[ebp], 0
  010c8	eb 0f		 jmp	 SHORT $LN24@P_Boss7Thi
$LN22@P_Boss7Thi:
  010ca	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _i$11[ebp]
  010d0	83 c0 01	 add	 eax, 1
  010d3	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _i$11[ebp], eax
$LN24@P_Boss7Thi:
  010d9	83 bd e0 fe ff
	ff 20		 cmp	 DWORD PTR _i$11[ebp], 32 ; 00000020H
  010e0	0f 8d 88 01 00
	00		 jge	 $LN23@P_Boss7Thi

; 4142 : 		{
; 4143 : 			if (!playeringame[i])

  010e6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _i$11[ebp]
  010ec	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  010f4	75 02		 jne	 SHORT $LN116@P_Boss7Thi

; 4144 : 				continue;

  010f6	eb d2		 jmp	 SHORT $LN22@P_Boss7Thi
$LN116@P_Boss7Thi:

; 4145 : 
; 4146 : 			if (!players[i].mo)

  010f8	69 85 e0 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$11[ebp], 508
  01102	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  01109	75 02		 jne	 SHORT $LN117@P_Boss7Thi

; 4147 : 				continue;

  0110b	eb bd		 jmp	 SHORT $LN22@P_Boss7Thi
$LN117@P_Boss7Thi:

; 4148 : 
; 4149 : 			if (players[i].mo->health <= 0)

  0110d	69 85 e0 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$11[ebp], 508
  01117	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0111d	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  01124	7f 02		 jg	 SHORT $LN118@P_Boss7Thi

; 4150 : 				continue;

  01126	eb a2		 jmp	 SHORT $LN22@P_Boss7Thi
$LN118@P_Boss7Thi:

; 4151 : 
; 4152 : 			if (players[i].powers[pw_ingoop])

  01128	69 85 e0 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$11[ebp], 508
  01132	b9 04 00 00 00	 mov	 ecx, 4
  01137	6b d1 1c	 imul	 edx, ecx, 28
  0113a	83 bc 10 38 00
	00 00 00	 cmp	 DWORD PTR _players[eax+edx+56], 0
  01142	0f 84 21 01 00
	00		 je	 $LN119@P_Boss7Thi

; 4153 : 			{
; 4154 : 				closestNum = -1;

  01148	c7 85 d8 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _closestNum$9[ebp], -1

; 4155 : 				closestdist = 16384*FRACUNIT; // Just in case...

  01152	c7 85 f8 fe ff
	ff 00 00 00 40	 mov	 DWORD PTR _closestdist$17[ebp], 1073741824 ; 40000000H

; 4156 : 
; 4157 : 				// Find waypoint he is closest to
; 4158 : 				for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0115c	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  01161	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _th$12[ebp], eax
  01167	eb 0f		 jmp	 SHORT $LN27@P_Boss7Thi
$LN25@P_Boss7Thi:
  01169	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _th$12[ebp]
  0116f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01172	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _th$12[ebp], ecx
$LN27@P_Boss7Thi:
  01178	81 bd e4 fe ff
	ff 00 00 00 00	 cmp	 DWORD PTR _th$12[ebp], OFFSET _thinkercap
  01182	0f 84 d3 00 00
	00		 je	 $LN26@P_Boss7Thi

; 4159 : 				{
; 4160 : 					if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  01188	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _th$12[ebp]
  0118e	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  01195	74 02		 je	 SHORT $LN120@P_Boss7Thi

; 4161 : 						continue;

  01197	eb d0		 jmp	 SHORT $LN25@P_Boss7Thi
$LN120@P_Boss7Thi:

; 4162 : 
; 4163 : 					mo2 = (mobj_t *)th;

  01199	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _th$12[ebp]
  0119f	89 85 04 ff ff
	ff		 mov	 DWORD PTR _mo2$20[ebp], eax

; 4164 : 					if (mo2->type == MT_BOSS3WAYPOINT && mo2->spawnpoint)

  011a5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$20[ebp]
  011ab	83 78 7c 1c	 cmp	 DWORD PTR [eax+124], 28	; 0000001cH
  011af	0f 85 a1 00 00
	00		 jne	 $LN122@P_Boss7Thi
  011b5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$20[ebp]
  011bb	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  011c2	0f 84 8e 00 00
	00		 je	 $LN122@P_Boss7Thi

; 4165 : 					{
; 4166 : 						dist = P_AproxDistance(players[i].mo->x - mo2->x, players[i].mo->y - mo2->y);

  011c8	69 85 e0 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$11[ebp], 508
  011d2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  011d8	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _mo2$20[ebp]
  011de	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  011e1	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  011e4	50		 push	 eax
  011e5	69 8d e0 fe ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _i$11[ebp], 508
  011ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  011f5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$20[ebp]
  011fb	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  011fe	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  01201	51		 push	 ecx
  01202	e8 00 00 00 00	 call	 _P_AproxDistance
  01207	83 c4 08	 add	 esp, 8
  0120a	89 85 fc fe ff
	ff		 mov	 DWORD PTR _dist$18[ebp], eax

; 4167 : 
; 4168 : 						if (closestNum == -1 || dist < closestdist)

  01210	83 bd d8 fe ff
	ff ff		 cmp	 DWORD PTR _closestNum$9[ebp], -1
  01217	74 0e		 je	 SHORT $LN123@P_Boss7Thi
  01219	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dist$18[ebp]
  0121f	3b 85 f8 fe ff
	ff		 cmp	 eax, DWORD PTR _closestdist$17[ebp]
  01225	7d 2f		 jge	 SHORT $LN122@P_Boss7Thi
$LN123@P_Boss7Thi:

; 4169 : 						{
; 4170 : 							closestNum = (mo2->spawnpoint->options & 7);

  01227	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$20[ebp]
  0122d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01233	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  01237	83 e2 07	 and	 edx, 7
  0123a	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _closestNum$9[ebp], edx

; 4171 : 							closestdist = dist;

  01240	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dist$18[ebp]
  01246	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _closestdist$17[ebp], eax

; 4172 : 							foundgoop = true;

  0124c	c7 85 dc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _foundgoop$10[ebp], 1
$LN122@P_Boss7Thi:

; 4173 : 						}
; 4174 : 					}
; 4175 : 				}

  01256	e9 0e ff ff ff	 jmp	 $LN25@P_Boss7Thi
$LN26@P_Boss7Thi:

; 4176 : 				waypointNum = closestNum;

  0125b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _closestNum$9[ebp]
  01261	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _waypointNum$13[ebp], eax

; 4177 : 				break;

  01267	eb 05		 jmp	 SHORT $LN23@P_Boss7Thi
$LN119@P_Boss7Thi:

; 4178 : 			}
; 4179 : 		}

  01269	e9 5c fe ff ff	 jmp	 $LN22@P_Boss7Thi
$LN23@P_Boss7Thi:

; 4180 : 
; 4181 : 		if (!foundgoop)

  0126e	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _foundgoop$10[ebp], 0
  01275	75 35		 jne	 SHORT $LN126@P_Boss7Thi

; 4182 : 		{
; 4183 : 			if (mobj->z > 1056*FRACUNIT)

  01277	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0127a	81 78 18 00 00
	20 04		 cmp	 DWORD PTR [eax+24], 69206016 ; 04200000H
  01281	7e 0c		 jle	 SHORT $LN125@P_Boss7Thi

; 4184 : 				waypointNum = 0;

  01283	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _waypointNum$13[ebp], 0
  0128d	eb 1d		 jmp	 SHORT $LN126@P_Boss7Thi
$LN125@P_Boss7Thi:

; 4185 : 			else
; 4186 : 				waypointNum = 1 + (P_Random() % 4);

  0128f	e8 00 00 00 00	 call	 _P_Random
  01294	0f b6 c0	 movzx	 eax, al
  01297	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0129c	79 05		 jns	 SHORT $LN147@P_Boss7Thi
  0129e	48		 dec	 eax
  0129f	83 c8 fc	 or	 eax, -4			; fffffffcH
  012a2	40		 inc	 eax
$LN147@P_Boss7Thi:
  012a3	83 c0 01	 add	 eax, 1
  012a6	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _waypointNum$13[ebp], eax
$LN126@P_Boss7Thi:

; 4187 : 		}
; 4188 : 
; 4189 : 		// Don't jump to the center when health is low.
; 4190 : 		// Force the player to beat you with missiles.
; 4191 : 		if (mobj->health <= 2 && waypointNum == 0)

  012ac	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  012af	83 b8 8c 00 00
	00 02		 cmp	 DWORD PTR [eax+140], 2
  012b6	7f 26		 jg	 SHORT $LN127@P_Boss7Thi
  012b8	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _waypointNum$13[ebp], 0
  012bf	75 1d		 jne	 SHORT $LN127@P_Boss7Thi

; 4192 : 			waypointNum = 1 + (P_Random() %4);

  012c1	e8 00 00 00 00	 call	 _P_Random
  012c6	0f b6 c0	 movzx	 eax, al
  012c9	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  012ce	79 05		 jns	 SHORT $LN148@P_Boss7Thi
  012d0	48		 dec	 eax
  012d1	83 c8 fc	 or	 eax, -4			; fffffffcH
  012d4	40		 inc	 eax
$LN148@P_Boss7Thi:
  012d5	83 c0 01	 add	 eax, 1
  012d8	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _waypointNum$13[ebp], eax
$LN127@P_Boss7Thi:

; 4193 : 
; 4194 : 		if (mobj->tracer && mobj->tracer->type == MT_BOSS3WAYPOINT
; 4195 : 			&& mobj->tracer->spawnpoint && (mobj->tracer->spawnpoint->options & 7) == waypointNum)

  012de	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  012e1	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  012e8	0f 84 97 00 00
	00		 je	 $LN131@P_Boss7Thi
  012ee	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  012f1	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  012f7	83 79 7c 1c	 cmp	 DWORD PTR [ecx+124], 28	; 0000001cH
  012fb	0f 85 84 00 00
	00		 jne	 $LN131@P_Boss7Thi
  01301	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01304	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0130a	83 b9 ac 00 00
	00 00		 cmp	 DWORD PTR [ecx+172], 0
  01311	74 72		 je	 SHORT $LN131@P_Boss7Thi
  01313	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01316	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0131c	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  01322	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  01326	83 e0 07	 and	 eax, 7
  01329	3b 85 e8 fe ff
	ff		 cmp	 eax, DWORD PTR _waypointNum$13[ebp]
  0132f	75 54		 jne	 SHORT $LN131@P_Boss7Thi

; 4196 : 		{
; 4197 : 			if (P_Random() & 1)

  01331	e8 00 00 00 00	 call	 _P_Random
  01336	0f b6 c0	 movzx	 eax, al
  01339	83 e0 01	 and	 eax, 1
  0133c	74 11		 je	 SHORT $LN129@P_Boss7Thi

; 4198 : 				waypointNum++;

  0133e	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _waypointNum$13[ebp]
  01344	83 c0 01	 add	 eax, 1
  01347	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _waypointNum$13[ebp], eax
  0134d	eb 0f		 jmp	 SHORT $LN130@P_Boss7Thi
$LN129@P_Boss7Thi:

; 4199 : 			else
; 4200 : 				waypointNum--;

  0134f	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _waypointNum$13[ebp]
  01355	83 e8 01	 sub	 eax, 1
  01358	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _waypointNum$13[ebp], eax
$LN130@P_Boss7Thi:

; 4201 : 
; 4202 : 			waypointNum %= 5;

  0135e	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _waypointNum$13[ebp]
  01364	99		 cdq
  01365	b9 05 00 00 00	 mov	 ecx, 5
  0136a	f7 f9		 idiv	 ecx
  0136c	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _waypointNum$13[ebp], edx

; 4203 : 
; 4204 : 			if (waypointNum < 0)

  01372	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _waypointNum$13[ebp], 0
  01379	7d 0a		 jge	 SHORT $LN131@P_Boss7Thi

; 4205 : 				waypointNum = 0;

  0137b	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _waypointNum$13[ebp], 0
$LN131@P_Boss7Thi:

; 4206 : 		}
; 4207 : 
; 4208 : 		if (waypointNum == 0 && mobj->health <= 2)

  01385	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _waypointNum$13[ebp], 0
  0138c	75 20		 jne	 SHORT $LN132@P_Boss7Thi
  0138e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01391	83 b8 8c 00 00
	00 02		 cmp	 DWORD PTR [eax+140], 2
  01398	7f 14		 jg	 SHORT $LN132@P_Boss7Thi

; 4209 : 			waypointNum = 1 + (P_Random() & 1);

  0139a	e8 00 00 00 00	 call	 _P_Random
  0139f	0f b6 c0	 movzx	 eax, al
  013a2	83 e0 01	 and	 eax, 1
  013a5	83 c0 01	 add	 eax, 1
  013a8	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _waypointNum$13[ebp], eax
$LN132@P_Boss7Thi:

; 4210 : 
; 4211 : 		// scan the thinkers to find
; 4212 : 		// the waypoint to use
; 4213 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  013ae	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  013b3	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _th$12[ebp], eax
  013b9	eb 0f		 jmp	 SHORT $LN30@P_Boss7Thi
$LN28@P_Boss7Thi:
  013bb	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _th$12[ebp]
  013c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  013c4	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _th$12[ebp], ecx
$LN30@P_Boss7Thi:
  013ca	81 bd e4 fe ff
	ff 00 00 00 00	 cmp	 DWORD PTR _th$12[ebp], OFFSET _thinkercap
  013d4	74 63		 je	 SHORT $LN29@P_Boss7Thi

; 4214 : 		{
; 4215 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  013d6	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _th$12[ebp]
  013dc	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  013e3	74 02		 je	 SHORT $LN133@P_Boss7Thi

; 4216 : 				continue;

  013e5	eb d4		 jmp	 SHORT $LN28@P_Boss7Thi
$LN133@P_Boss7Thi:

; 4217 : 
; 4218 : 			mo2 = (mobj_t *)th;

  013e7	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _th$12[ebp]
  013ed	89 85 04 ff ff
	ff		 mov	 DWORD PTR _mo2$20[ebp], eax

; 4219 : 			if (mo2->type == MT_BOSS3WAYPOINT && mo2->spawnpoint && (mo2->spawnpoint->options & 7) == waypointNum)

  013f3	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$20[ebp]
  013f9	83 78 7c 1c	 cmp	 DWORD PTR [eax+124], 28	; 0000001cH
  013fd	75 38		 jne	 SHORT $LN134@P_Boss7Thi
  013ff	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$20[ebp]
  01405	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  0140c	74 29		 je	 SHORT $LN134@P_Boss7Thi
  0140e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$20[ebp]
  01414	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0141a	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0141e	83 e2 07	 and	 edx, 7
  01421	3b 95 e8 fe ff
	ff		 cmp	 edx, DWORD PTR _waypointNum$13[ebp]
  01427	75 0e		 jne	 SHORT $LN134@P_Boss7Thi

; 4220 : 			{
; 4221 : 				hitspot = mo2;

  01429	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$20[ebp]
  0142f	89 85 08 ff ff
	ff		 mov	 DWORD PTR _hitspot$21[ebp], eax

; 4222 : 				break;

  01435	eb 02		 jmp	 SHORT $LN29@P_Boss7Thi
$LN134@P_Boss7Thi:

; 4223 : 			}
; 4224 : 		}

  01437	eb 82		 jmp	 SHORT $LN28@P_Boss7Thi
$LN29@P_Boss7Thi:

; 4225 : 
; 4226 : 		if (hitspot == NULL)

  01439	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _hitspot$21[ebp], 0
  01440	75 32		 jne	 SHORT $LN135@P_Boss7Thi

; 4227 : 		{
; 4228 : 			CONS_Printf("BlackEggman unable to find waypoint #%d!\n", waypointNum);

  01442	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _waypointNum$13[ebp]
  01448	50		 push	 eax
  01449	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BLACACMH@BlackEggman?5unable?5to?5find?5wayp@
  0144e	e8 00 00 00 00	 call	 _CONS_Printf
  01453	83 c4 08	 add	 esp, 8

; 4229 : 			P_SetMobjState(mobj, mobj->info->spawnstate);

  01456	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01459	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0145f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01462	52		 push	 edx
  01463	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01466	50		 push	 eax
  01467	e8 00 00 00 00	 call	 _P_SetMobjState
  0146c	83 c4 08	 add	 esp, 8

; 4230 : 			return;

  0146f	e9 75 04 00 00	 jmp	 $LN144@P_Boss7Thi
$LN135@P_Boss7Thi:

; 4231 : 		}
; 4232 : 
; 4233 : 		P_SetTarget(&mobj->tracer, hitspot);

  01474	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _hitspot$21[ebp]
  0147a	50		 push	 eax
  0147b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0147e	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  01484	51		 push	 ecx
  01485	e8 00 00 00 00	 call	 _P_SetTarget
  0148a	83 c4 08	 add	 esp, 8

; 4234 : 
; 4235 : 		mobj->angle = R_PointToAngle2(mobj->x, mobj->y, hitspot->x, hitspot->y);

  0148d	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _hitspot$21[ebp]
  01493	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01496	51		 push	 ecx
  01497	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _hitspot$21[ebp]
  0149d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  014a0	50		 push	 eax
  014a1	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  014a4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  014a7	52		 push	 edx
  014a8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  014ab	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  014ae	51		 push	 ecx
  014af	e8 00 00 00 00	 call	 _R_PointToAngle2
  014b4	83 c4 10	 add	 esp, 16			; 00000010H
  014b7	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  014ba	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 4236 : 
; 4237 : 		an = mobj->angle;

  014bd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  014c0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  014c3	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _an$19[ebp], ecx

; 4238 : 		an >>= ANGLETOFINESHIFT;

  014c9	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _an$19[ebp]
  014cf	c1 e8 13	 shr	 eax, 19			; 00000013H
  014d2	89 85 00 ff ff
	ff		 mov	 DWORD PTR _an$19[ebp], eax

; 4239 : 
; 4240 : 		dist = P_AproxDistance(hitspot->x - mobj->x, hitspot->y - mobj->y);

  014d8	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _hitspot$21[ebp]
  014de	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  014e1	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  014e4	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  014e7	52		 push	 edx
  014e8	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _hitspot$21[ebp]
  014ee	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  014f1	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  014f4	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  014f7	52		 push	 edx
  014f8	e8 00 00 00 00	 call	 _P_AproxDistance
  014fd	83 c4 08	 add	 esp, 8
  01500	89 85 fc fe ff
	ff		 mov	 DWORD PTR _dist$18[ebp], eax

; 4241 : 
; 4242 : 		horizontal = dist / airtime;

  01506	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dist$18[ebp]
  0150c	99		 cdq
  0150d	f7 bd ec fe ff
	ff		 idiv	 DWORD PTR _airtime$14[ebp]
  01513	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _horizontal$15[ebp], eax

; 4243 : 		vertical = (gravity*airtime)/2;

  01519	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  0151e	0f af 85 ec fe
	ff ff		 imul	 eax, DWORD PTR _airtime$14[ebp]
  01525	99		 cdq
  01526	2b c2		 sub	 eax, edx
  01528	d1 f8		 sar	 eax, 1
  0152a	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _vertical$16[ebp], eax

; 4244 : 
; 4245 : 		mobj->momx = FixedMul(horizontal, FINECOSINE(an));

  01530	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _an$19[ebp]
  01536	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0153c	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0153f	52		 push	 edx
  01540	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _horizontal$15[ebp]
  01546	50		 push	 eax
  01547	e8 00 00 00 00	 call	 _FixedMul
  0154c	83 c4 08	 add	 esp, 8
  0154f	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01552	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 4246 : 		mobj->momy = FixedMul(horizontal, FINESINE(an));

  01555	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _an$19[ebp]
  0155b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  01562	51		 push	 ecx
  01563	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _horizontal$15[ebp]
  01569	52		 push	 edx
  0156a	e8 00 00 00 00	 call	 _FixedMul
  0156f	83 c4 08	 add	 esp, 8
  01572	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01575	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 4247 : 		mobj->momz = vertical;

  01578	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0157b	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _vertical$16[ebp]
  01581	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 4248 : 
; 4249 : //		mobj->momz = 10*FRACUNIT;
; 4250 : 	}

  01584	e9 60 03 00 00	 jmp	 $LN144@P_Boss7Thi
$LN114@P_Boss7Thi:

; 4251 : 	else if (mobj->state == &states[S_BLACKEGG_JUMP2] && mobj->z <= mobj->floorz)

  01589	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0158e	69 c8 c3 01 00
	00		 imul	 ecx, eax, 451
  01594	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0159a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0159d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  015a0	0f 85 fc 02 00
	00		 jne	 $LN136@P_Boss7Thi
  015a6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  015a9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  015ac	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  015af	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  015b2	0f 8f ea 02 00
	00		 jg	 $LN136@P_Boss7Thi

; 4252 : 	{
; 4253 : 		// BANG! onto the ground
; 4254 : 		INT32 i,j;
; 4255 : 		fixed_t ns;
; 4256 : 		fixed_t x,y,z;
; 4257 : 		mobj_t *mo2;
; 4258 : 
; 4259 : 		S_StartSound(0, sfx_befall);

  015b8	68 0f 01 00 00	 push	 271			; 0000010fH
  015bd	6a 00		 push	 0
  015bf	e8 00 00 00 00	 call	 _S_StartSound
  015c4	83 c4 08	 add	 esp, 8

; 4260 : 
; 4261 : 		z = mobj->floorz;

  015c7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  015ca	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  015cd	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _z$3[ebp], ecx

; 4262 : 		for (j = 0; j < 2; j++)

  015d3	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$7[ebp], 0
  015dd	eb 0f		 jmp	 SHORT $LN33@P_Boss7Thi
$LN31@P_Boss7Thi:
  015df	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _j$7[ebp]
  015e5	83 c0 01	 add	 eax, 1
  015e8	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _j$7[ebp], eax
$LN33@P_Boss7Thi:
  015ee	83 bd d0 fe ff
	ff 02		 cmp	 DWORD PTR _j$7[ebp], 2
  015f5	0f 8d 3e 01 00
	00		 jge	 $LN32@P_Boss7Thi

; 4263 : 		{
; 4264 : 			for (i = 0; i < 32; i++)

  015fb	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$8[ebp], 0
  01605	eb 0f		 jmp	 SHORT $LN36@P_Boss7Thi
$LN34@P_Boss7Thi:
  01607	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$8[ebp]
  0160d	83 c0 01	 add	 eax, 1
  01610	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _i$8[ebp], eax
$LN36@P_Boss7Thi:
  01616	83 bd d4 fe ff
	ff 20		 cmp	 DWORD PTR _i$8[ebp], 32	; 00000020H
  0161d	0f 8d 00 01 00
	00		 jge	 $LN35@P_Boss7Thi

; 4265 : 			{
; 4266 : 				const angle_t fa = (i*FINEANGLES/16) & FINEMASK;

  01623	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$8[ebp]
  01629	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  0162c	99		 cdq
  0162d	83 e2 0f	 and	 edx, 15			; 0000000fH
  01630	03 c2		 add	 eax, edx
  01632	c1 f8 04	 sar	 eax, 4
  01635	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  0163a	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _fa$1[ebp], eax

; 4267 : 				ns = 64 * FRACUNIT;

  01640	c7 85 cc fe ff
	ff 00 00 40 00	 mov	 DWORD PTR _ns$6[ebp], 4194304 ; 00400000H

; 4268 : 				x = mobj->x + FixedMul(FINESINE(fa),ns);

  0164a	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _ns$6[ebp]
  01650	50		 push	 eax
  01651	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$1[ebp]
  01657	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  0165e	52		 push	 edx
  0165f	e8 00 00 00 00	 call	 _FixedMul
  01664	83 c4 08	 add	 esp, 8
  01667	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0166a	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  0166d	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _x$5[ebp], eax

; 4269 : 				y = mobj->y + FixedMul(FINECOSINE(fa),ns);

  01673	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _ns$6[ebp]
  01679	50		 push	 eax
  0167a	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$1[ebp]
  01680	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  01686	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  01689	50		 push	 eax
  0168a	e8 00 00 00 00	 call	 _FixedMul
  0168f	83 c4 08	 add	 esp, 8
  01692	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01695	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  01698	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _y$4[ebp], eax

; 4270 : 
; 4271 : 				mo2 = P_SpawnMobj(x, y, z, MT_EXPLODE);

  0169e	68 0e 01 00 00	 push	 270			; 0000010eH
  016a3	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _z$3[ebp]
  016a9	50		 push	 eax
  016aa	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _y$4[ebp]
  016b0	51		 push	 ecx
  016b1	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _x$5[ebp]
  016b7	52		 push	 edx
  016b8	e8 00 00 00 00	 call	 _P_SpawnMobj
  016bd	83 c4 10	 add	 esp, 16			; 00000010H
  016c0	89 85 bc fe ff
	ff		 mov	 DWORD PTR _mo2$2[ebp], eax

; 4272 : 				ns = 16 * FRACUNIT;

  016c6	c7 85 cc fe ff
	ff 00 00 10 00	 mov	 DWORD PTR _ns$6[ebp], 1048576 ; 00100000H

; 4273 : 				mo2->momx = FixedMul(FINESINE(fa),ns);

  016d0	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _ns$6[ebp]
  016d6	50		 push	 eax
  016d7	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$1[ebp]
  016dd	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  016e4	52		 push	 edx
  016e5	e8 00 00 00 00	 call	 _FixedMul
  016ea	83 c4 08	 add	 esp, 8
  016ed	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _mo2$2[ebp]
  016f3	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 4274 : 				mo2->momy = FixedMul(FINECOSINE(fa),ns);

  016f6	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _ns$6[ebp]
  016fc	50		 push	 eax
  016fd	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$1[ebp]
  01703	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  01709	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0170c	50		 push	 eax
  0170d	e8 00 00 00 00	 call	 _FixedMul
  01712	83 c4 08	 add	 esp, 8
  01715	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _mo2$2[ebp]
  0171b	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 4275 : 			}

  0171e	e9 e4 fe ff ff	 jmp	 $LN34@P_Boss7Thi
$LN35@P_Boss7Thi:

; 4276 : 			z -= 32*FRACUNIT;

  01723	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _z$3[ebp]
  01729	2d 00 00 20 00	 sub	 eax, 2097152		; 00200000H
  0172e	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _z$3[ebp], eax

; 4277 : 		}

  01734	e9 a6 fe ff ff	 jmp	 $LN31@P_Boss7Thi
$LN32@P_Boss7Thi:

; 4278 : 
; 4279 : 		// Hurt player??
; 4280 : 		for (i = 0; i < MAXPLAYERS; i++)

  01739	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$8[ebp], 0
  01743	eb 0f		 jmp	 SHORT $LN39@P_Boss7Thi
$LN37@P_Boss7Thi:
  01745	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$8[ebp]
  0174b	83 c0 01	 add	 eax, 1
  0174e	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _i$8[ebp], eax
$LN39@P_Boss7Thi:
  01754	83 bd d4 fe ff
	ff 20		 cmp	 DWORD PTR _i$8[ebp], 32	; 00000020H
  0175b	0f 8d 26 01 00
	00		 jge	 $LN38@P_Boss7Thi

; 4281 : 		{
; 4282 : 			if (!playeringame[i])

  01761	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$8[ebp]
  01767	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0176f	75 02		 jne	 SHORT $LN138@P_Boss7Thi

; 4283 : 				continue;

  01771	eb d2		 jmp	 SHORT $LN37@P_Boss7Thi
$LN138@P_Boss7Thi:

; 4284 : 
; 4285 : 			if (!players[i].mo)

  01773	69 85 d4 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$8[ebp], 508
  0177d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  01784	75 02		 jne	 SHORT $LN139@P_Boss7Thi

; 4286 : 				continue;

  01786	eb bd		 jmp	 SHORT $LN37@P_Boss7Thi
$LN139@P_Boss7Thi:

; 4287 : 
; 4288 : 			if (players[i].mo->health <= 0)

  01788	69 85 d4 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$8[ebp], 508
  01792	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  01798	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0179f	7f 02		 jg	 SHORT $LN140@P_Boss7Thi

; 4289 : 				continue;

  017a1	eb a2		 jmp	 SHORT $LN37@P_Boss7Thi
$LN140@P_Boss7Thi:

; 4290 : 
; 4291 : 			if (P_AproxDistance(players[i].mo->x - mobj->x, players[i].mo->y - mobj->y) > mobj->radius*4)

  017a3	69 85 d4 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$8[ebp], 508
  017ad	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  017b3	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  017b6	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  017b9	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  017bc	50		 push	 eax
  017bd	69 8d d4 fe ff
	ff fc 01 00 00	 imul	 ecx, DWORD PTR _i$8[ebp], 508
  017c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  017cd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  017d0	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  017d3	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  017d6	51		 push	 ecx
  017d7	e8 00 00 00 00	 call	 _P_AproxDistance
  017dc	83 c4 08	 add	 esp, 8
  017df	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  017e2	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  017e5	c1 e1 02	 shl	 ecx, 2
  017e8	3b c1		 cmp	 eax, ecx
  017ea	7e 05		 jle	 SHORT $LN141@P_Boss7Thi

; 4292 : 				continue;

  017ec	e9 54 ff ff ff	 jmp	 $LN37@P_Boss7Thi
$LN141@P_Boss7Thi:

; 4293 : 
; 4294 : 			if (players[i].mo->z > mobj->z + 128*FRACUNIT)

  017f1	69 85 d4 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$8[ebp], 508
  017fb	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  01801	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01804	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  01807	05 00 00 80 00	 add	 eax, 8388608		; 00800000H
  0180c	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0180f	7e 05		 jle	 SHORT $LN142@P_Boss7Thi

; 4295 : 				continue;

  01811	e9 2f ff ff ff	 jmp	 $LN37@P_Boss7Thi
$LN142@P_Boss7Thi:

; 4296 : 
; 4297 : 			if (players[i].mo->z < mobj->z - 64*FRACUNIT)

  01816	69 85 d4 fe ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _i$8[ebp], 508
  01820	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  01826	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01829	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0182c	2d 00 00 40 00	 sub	 eax, 4194304		; 00400000H
  01831	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  01834	7d 05		 jge	 SHORT $LN143@P_Boss7Thi

; 4298 : 				continue;

  01836	e9 0a ff ff ff	 jmp	 $LN37@P_Boss7Thi
$LN143@P_Boss7Thi:

; 4299 : 
; 4300 : 			P_DamageMobj(players[i].mo, mobj, mobj, 1);

  0183b	6a 01		 push	 1
  0183d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01840	50		 push	 eax
  01841	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01844	51		 push	 ecx
  01845	69 95 d4 fe ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _i$8[ebp], 508
  0184f	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  01855	50		 push	 eax
  01856	e8 00 00 00 00	 call	 _P_DamageMobj
  0185b	83 c4 10	 add	 esp, 16			; 00000010H

; 4301 : 
; 4302 : 			// Laugh
; 4303 : 			S_StartSound(0, sfx_bewar1 + (P_Random() % 4));

  0185e	e8 00 00 00 00	 call	 _P_Random
  01863	0f b6 c0	 movzx	 eax, al
  01866	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0186b	79 05		 jns	 SHORT $LN149@P_Boss7Thi
  0186d	48		 dec	 eax
  0186e	83 c8 fc	 or	 eax, -4			; fffffffcH
  01871	40		 inc	 eax
$LN149@P_Boss7Thi:
  01872	05 1c 01 00 00	 add	 eax, 284		; 0000011cH
  01877	50		 push	 eax
  01878	6a 00		 push	 0
  0187a	e8 00 00 00 00	 call	 _S_StartSound
  0187f	83 c4 08	 add	 esp, 8

; 4304 : 		}

  01882	e9 be fe ff ff	 jmp	 $LN37@P_Boss7Thi
$LN38@P_Boss7Thi:

; 4305 : 
; 4306 : 		P_SetMobjState(mobj, mobj->info->spawnstate);

  01887	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0188a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01890	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01893	52		 push	 edx
  01894	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01897	50		 push	 eax
  01898	e8 00 00 00 00	 call	 _P_SetMobjState
  0189d	83 c4 08	 add	 esp, 8

; 4307 : 	}

  018a0	eb 47		 jmp	 SHORT $LN144@P_Boss7Thi
$LN136@P_Boss7Thi:

; 4308 : 	else if (mobj->state == &states[mobj->info->deathstate] && mobj->tics == mobj->state->tics)

  018a2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  018a5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  018ab	6b 51 30 1c	 imul	 edx, DWORD PTR [ecx+48], 28
  018af	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  018b5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  018b8	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  018bb	75 2c		 jne	 SHORT $LN144@P_Boss7Thi
  018bd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  018c0	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  018c3	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  018c6	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  018c9	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  018cc	75 1b		 jne	 SHORT $LN144@P_Boss7Thi

; 4309 : 	{
; 4310 : 		S_StartSound(0, sfx_bedie1 + (P_Random() & 1));

  018ce	e8 00 00 00 00	 call	 _P_Random
  018d3	0f b6 c0	 movzx	 eax, al
  018d6	83 e0 01	 and	 eax, 1
  018d9	05 0c 01 00 00	 add	 eax, 268		; 0000010cH
  018de	50		 push	 eax
  018df	6a 00		 push	 0
  018e1	e8 00 00 00 00	 call	 _S_StartSound
  018e6	83 c4 08	 add	 esp, 8
$LN144@P_Boss7Thi:

; 4311 : 	}
; 4312 : 
; 4313 : }

  018e9	5f		 pop	 edi
  018ea	5e		 pop	 esi
  018eb	5b		 pop	 ebx
  018ec	8b e5		 mov	 esp, ebp
  018ee	5d		 pop	 ebp
  018ef	c3		 ret	 0
_P_Boss7Thinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_NewChaseDir
_TEXT	SEGMENT
tv135 = -112						; size = 4
tv132 = -108						; size = 4
_newdir$1 = -40						; size = 4
_turnaround$ = -36					; size = 4
_olddir$ = -32						; size = 4
_tdir$ = -28						; size = 4
_d$ = -24						; size = 12
_deltay$ = -12						; size = 4
_deltax$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_actor$ = 8						; size = 4
_P_NewChaseDir PROC					; COMDAT

; 3666 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 3667 : 	fixed_t deltax, deltay;
; 3668 : 	dirtype_t d[3];
; 3669 : 	dirtype_t tdir = DI_NODIR, olddir, turnaround;

  00013	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _tdir$[ebp], -1

; 3670 : 
; 3671 : #ifdef PARANOIA
; 3672 : 	if (!actor->target)
; 3673 : 		I_Error("P_NewChaseDir: called with no target");
; 3674 : #endif
; 3675 : 
; 3676 : 	olddir = actor->movedir;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001d	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00023	89 4d e0	 mov	 DWORD PTR _olddir$[ebp], ecx

; 3677 : 
; 3678 : 	if (olddir >= NUMDIRS)

  00026	83 7d e0 08	 cmp	 DWORD PTR _olddir$[ebp], 8
  0002a	7c 07		 jl	 SHORT $LN8@P_NewChase

; 3679 : 		olddir = DI_NODIR;

  0002c	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _olddir$[ebp], -1
$LN8@P_NewChase:

; 3680 : 
; 3681 : 	if (olddir != DI_NODIR)

  00033	83 7d e0 ff	 cmp	 DWORD PTR _olddir$[ebp], -1
  00037	74 0f		 je	 SHORT $LN9@P_NewChase

; 3682 : 		turnaround = opposite[olddir];

  00039	8b 45 e0	 mov	 eax, DWORD PTR _olddir$[ebp]
  0003c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _opposite[eax*4]
  00043	89 4d dc	 mov	 DWORD PTR _turnaround$[ebp], ecx
  00046	eb 06		 jmp	 SHORT $LN10@P_NewChase
$LN9@P_NewChase:

; 3683 : 	else
; 3684 : 		turnaround = olddir;

  00048	8b 45 e0	 mov	 eax, DWORD PTR _olddir$[ebp]
  0004b	89 45 dc	 mov	 DWORD PTR _turnaround$[ebp], eax
$LN10@P_NewChase:

; 3685 : 
; 3686 : 	deltax = actor->target->x - actor->x;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00051	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00057	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0005a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005d	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  00060	89 45 f8	 mov	 DWORD PTR _deltax$[ebp], eax

; 3687 : 	deltay = actor->target->y - actor->y;

  00063	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00066	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0006f	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00072	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00075	89 45 f4	 mov	 DWORD PTR _deltay$[ebp], eax

; 3688 : 
; 3689 : 	if (deltax > 10*FRACUNIT)

  00078	81 7d f8 00 00
	0a 00		 cmp	 DWORD PTR _deltax$[ebp], 655360 ; 000a0000H
  0007f	7e 12		 jle	 SHORT $LN11@P_NewChase

; 3690 : 		d[1] = DI_EAST;

  00081	b8 04 00 00 00	 mov	 eax, 4
  00086	c1 e0 00	 shl	 eax, 0
  00089	c7 44 05 e8 00
	00 00 00	 mov	 DWORD PTR _d$[ebp+eax], 0
  00091	eb 2b		 jmp	 SHORT $LN14@P_NewChase
$LN11@P_NewChase:

; 3691 : 	else if (deltax < -10*FRACUNIT)

  00093	81 7d f8 00 00
	f6 ff		 cmp	 DWORD PTR _deltax$[ebp], -655360 ; fff60000H
  0009a	7d 12		 jge	 SHORT $LN13@P_NewChase

; 3692 : 		d[1] = DI_WEST;

  0009c	b8 04 00 00 00	 mov	 eax, 4
  000a1	c1 e0 00	 shl	 eax, 0
  000a4	c7 44 05 e8 04
	00 00 00	 mov	 DWORD PTR _d$[ebp+eax], 4
  000ac	eb 10		 jmp	 SHORT $LN14@P_NewChase
$LN13@P_NewChase:

; 3693 : 	else
; 3694 : 		d[1] = DI_NODIR;

  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	c1 e0 00	 shl	 eax, 0
  000b6	c7 44 05 e8 ff
	ff ff ff	 mov	 DWORD PTR _d$[ebp+eax], -1
$LN14@P_NewChase:

; 3695 : 
; 3696 : 	if (deltay < -10*FRACUNIT)

  000be	81 7d f4 00 00
	f6 ff		 cmp	 DWORD PTR _deltay$[ebp], -655360 ; fff60000H
  000c5	7d 11		 jge	 SHORT $LN15@P_NewChase

; 3697 : 		d[2] = DI_SOUTH;

  000c7	b8 04 00 00 00	 mov	 eax, 4
  000cc	d1 e0		 shl	 eax, 1
  000ce	c7 44 05 e8 06
	00 00 00	 mov	 DWORD PTR _d$[ebp+eax], 6
  000d6	eb 29		 jmp	 SHORT $LN18@P_NewChase
$LN15@P_NewChase:

; 3698 : 	else if (deltay > 10*FRACUNIT)

  000d8	81 7d f4 00 00
	0a 00		 cmp	 DWORD PTR _deltay$[ebp], 655360 ; 000a0000H
  000df	7e 11		 jle	 SHORT $LN17@P_NewChase

; 3699 : 		d[2] = DI_NORTH;

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	d1 e0		 shl	 eax, 1
  000e8	c7 44 05 e8 02
	00 00 00	 mov	 DWORD PTR _d$[ebp+eax], 2
  000f0	eb 0f		 jmp	 SHORT $LN18@P_NewChase
$LN17@P_NewChase:

; 3700 : 	else
; 3701 : 		d[2] = DI_NODIR;

  000f2	b8 04 00 00 00	 mov	 eax, 4
  000f7	d1 e0		 shl	 eax, 1
  000f9	c7 44 05 e8 ff
	ff ff ff	 mov	 DWORD PTR _d$[ebp+eax], -1
$LN18@P_NewChase:

; 3702 : 
; 3703 : 	// try direct route
; 3704 : 	if (d[1] != DI_NODIR && d[2] != DI_NODIR)

  00101	b8 04 00 00 00	 mov	 eax, 4
  00106	c1 e0 00	 shl	 eax, 0
  00109	83 7c 05 e8 ff	 cmp	 DWORD PTR _d$[ebp+eax], -1
  0010e	74 76		 je	 SHORT $LN20@P_NewChase
  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	d1 e0		 shl	 eax, 1
  00117	83 7c 05 e8 ff	 cmp	 DWORD PTR _d$[ebp+eax], -1
  0011c	74 68		 je	 SHORT $LN20@P_NewChase

; 3705 : 	{
; 3706 : 		dirtype_t newdir = diags[((deltay < 0)<<1) + (deltax > 0)];

  0011e	83 7d f4 00	 cmp	 DWORD PTR _deltay$[ebp], 0
  00122	7d 09		 jge	 SHORT $LN40@P_NewChase
  00124	c7 45 94 01 00
	00 00		 mov	 DWORD PTR tv132[ebp], 1
  0012b	eb 07		 jmp	 SHORT $LN41@P_NewChase
$LN40@P_NewChase:
  0012d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN41@P_NewChase:
  00134	83 7d f8 00	 cmp	 DWORD PTR _deltax$[ebp], 0
  00138	7e 09		 jle	 SHORT $LN42@P_NewChase
  0013a	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
  00141	eb 07		 jmp	 SHORT $LN43@P_NewChase
$LN42@P_NewChase:
  00143	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN43@P_NewChase:
  0014a	8b 45 94	 mov	 eax, DWORD PTR tv132[ebp]
  0014d	8b 4d 90	 mov	 ecx, DWORD PTR tv135[ebp]
  00150	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00153	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _diags[edx*4]
  0015a	89 45 d8	 mov	 DWORD PTR _newdir$1[ebp], eax

; 3707 : 
; 3708 : 		actor->movedir = newdir;

  0015d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00160	8b 4d d8	 mov	 ecx, DWORD PTR _newdir$1[ebp]
  00163	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 3709 : 		if ((newdir != turnaround) && P_TryWalk(actor))

  00169	8b 45 d8	 mov	 eax, DWORD PTR _newdir$1[ebp]
  0016c	3b 45 dc	 cmp	 eax, DWORD PTR _turnaround$[ebp]
  0016f	74 15		 je	 SHORT $LN20@P_NewChase
  00171	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 _P_TryWalk
  0017a	83 c4 04	 add	 esp, 4
  0017d	85 c0		 test	 eax, eax
  0017f	74 05		 je	 SHORT $LN20@P_NewChase

; 3710 : 			return;

  00181	e9 f8 01 00 00	 jmp	 $LN1@P_NewChase
$LN20@P_NewChase:

; 3711 : 	}
; 3712 : 
; 3713 : 	// try other directions
; 3714 : 	if (P_Random() > 200 || abs(deltay) > abs(deltax))

  00186	e8 00 00 00 00	 call	 _P_Random
  0018b	0f b6 c0	 movzx	 eax, al
  0018e	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00193	7f 1e		 jg	 SHORT $LN22@P_NewChase
  00195	8b 45 f4	 mov	 eax, DWORD PTR _deltay$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 _abs
  0019e	83 c4 04	 add	 esp, 4
  001a1	8b f0		 mov	 esi, eax
  001a3	8b 4d f8	 mov	 ecx, DWORD PTR _deltax$[ebp]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 _abs
  001ac	83 c4 04	 add	 esp, 4
  001af	3b f0		 cmp	 esi, eax
  001b1	7e 34		 jle	 SHORT $LN21@P_NewChase
$LN22@P_NewChase:

; 3715 : 	{
; 3716 : 		tdir = d[1];

  001b3	b8 04 00 00 00	 mov	 eax, 4
  001b8	c1 e0 00	 shl	 eax, 0
  001bb	8b 4c 05 e8	 mov	 ecx, DWORD PTR _d$[ebp+eax]
  001bf	89 4d e4	 mov	 DWORD PTR _tdir$[ebp], ecx

; 3717 : 		d[1] = d[2];

  001c2	b8 04 00 00 00	 mov	 eax, 4
  001c7	d1 e0		 shl	 eax, 1
  001c9	b9 04 00 00 00	 mov	 ecx, 4
  001ce	c1 e1 00	 shl	 ecx, 0
  001d1	8b 54 05 e8	 mov	 edx, DWORD PTR _d$[ebp+eax]
  001d5	89 54 0d e8	 mov	 DWORD PTR _d$[ebp+ecx], edx

; 3718 : 		d[2] = tdir;

  001d9	b8 04 00 00 00	 mov	 eax, 4
  001de	d1 e0		 shl	 eax, 1
  001e0	8b 4d e4	 mov	 ecx, DWORD PTR _tdir$[ebp]
  001e3	89 4c 05 e8	 mov	 DWORD PTR _d$[ebp+eax], ecx
$LN21@P_NewChase:

; 3719 : 	}
; 3720 : 
; 3721 : 	if (d[1] == turnaround)

  001e7	b8 04 00 00 00	 mov	 eax, 4
  001ec	c1 e0 00	 shl	 eax, 0
  001ef	8b 4c 05 e8	 mov	 ecx, DWORD PTR _d$[ebp+eax]
  001f3	3b 4d dc	 cmp	 ecx, DWORD PTR _turnaround$[ebp]
  001f6	75 10		 jne	 SHORT $LN23@P_NewChase

; 3722 : 		d[1] = DI_NODIR;

  001f8	b8 04 00 00 00	 mov	 eax, 4
  001fd	c1 e0 00	 shl	 eax, 0
  00200	c7 44 05 e8 ff
	ff ff ff	 mov	 DWORD PTR _d$[ebp+eax], -1
$LN23@P_NewChase:

; 3723 : 	if (d[2] == turnaround)

  00208	b8 04 00 00 00	 mov	 eax, 4
  0020d	d1 e0		 shl	 eax, 1
  0020f	8b 4c 05 e8	 mov	 ecx, DWORD PTR _d$[ebp+eax]
  00213	3b 4d dc	 cmp	 ecx, DWORD PTR _turnaround$[ebp]
  00216	75 0f		 jne	 SHORT $LN24@P_NewChase

; 3724 : 		d[2] = DI_NODIR;

  00218	b8 04 00 00 00	 mov	 eax, 4
  0021d	d1 e0		 shl	 eax, 1
  0021f	c7 44 05 e8 ff
	ff ff ff	 mov	 DWORD PTR _d$[ebp+eax], -1
$LN24@P_NewChase:

; 3725 : 
; 3726 : 	if (d[1] != DI_NODIR)

  00227	b8 04 00 00 00	 mov	 eax, 4
  0022c	c1 e0 00	 shl	 eax, 0
  0022f	83 7c 05 e8 ff	 cmp	 DWORD PTR _d$[ebp+eax], -1
  00234	74 2a		 je	 SHORT $LN26@P_NewChase

; 3727 : 	{
; 3728 : 		actor->movedir = d[1];

  00236	b8 04 00 00 00	 mov	 eax, 4
  0023b	c1 e0 00	 shl	 eax, 0
  0023e	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00241	8b 54 05 e8	 mov	 edx, DWORD PTR _d$[ebp+eax]
  00245	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 3729 : 
; 3730 : 		if (P_TryWalk(actor))

  0024b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 _P_TryWalk
  00254	83 c4 04	 add	 esp, 4
  00257	85 c0		 test	 eax, eax
  00259	74 05		 je	 SHORT $LN26@P_NewChase

; 3731 : 			return; // either moved forward or attacked

  0025b	e9 1e 01 00 00	 jmp	 $LN1@P_NewChase
$LN26@P_NewChase:

; 3732 : 	}
; 3733 : 
; 3734 : 	if (d[2] != DI_NODIR)

  00260	b8 04 00 00 00	 mov	 eax, 4
  00265	d1 e0		 shl	 eax, 1
  00267	83 7c 05 e8 ff	 cmp	 DWORD PTR _d$[ebp+eax], -1
  0026c	74 29		 je	 SHORT $LN28@P_NewChase

; 3735 : 	{
; 3736 : 		actor->movedir = d[2];

  0026e	b8 04 00 00 00	 mov	 eax, 4
  00273	d1 e0		 shl	 eax, 1
  00275	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00278	8b 54 05 e8	 mov	 edx, DWORD PTR _d$[ebp+eax]
  0027c	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 3737 : 
; 3738 : 		if (P_TryWalk(actor))

  00282	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 _P_TryWalk
  0028b	83 c4 04	 add	 esp, 4
  0028e	85 c0		 test	 eax, eax
  00290	74 05		 je	 SHORT $LN28@P_NewChase

; 3739 : 			return;

  00292	e9 e7 00 00 00	 jmp	 $LN1@P_NewChase
$LN28@P_NewChase:

; 3740 : 	}
; 3741 : 
; 3742 : 	// there is no direct path to the player, so pick another direction.
; 3743 : 	if (olddir != DI_NODIR)

  00297	83 7d e0 ff	 cmp	 DWORD PTR _olddir$[ebp], -1
  0029b	74 21		 je	 SHORT $LN30@P_NewChase

; 3744 : 	{
; 3745 : 		actor->movedir =olddir;

  0029d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002a0	8b 4d e0	 mov	 ecx, DWORD PTR _olddir$[ebp]
  002a3	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 3746 : 
; 3747 : 		if (P_TryWalk(actor))

  002a9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _P_TryWalk
  002b2	83 c4 04	 add	 esp, 4
  002b5	85 c0		 test	 eax, eax
  002b7	74 05		 je	 SHORT $LN30@P_NewChase

; 3748 : 			return;

  002b9	e9 c0 00 00 00	 jmp	 $LN1@P_NewChase
$LN30@P_NewChase:

; 3749 : 	}
; 3750 : 
; 3751 : 	// randomly determine direction of search
; 3752 : 	if (P_Random() & 1)

  002be	e8 00 00 00 00	 call	 _P_Random
  002c3	0f b6 c0	 movzx	 eax, al
  002c6	83 e0 01	 and	 eax, 1
  002c9	74 42		 je	 SHORT $LN31@P_NewChase

; 3753 : 	{
; 3754 : 		for (tdir = DI_EAST; tdir <= DI_SOUTHEAST; tdir++)

  002cb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tdir$[ebp], 0
  002d2	eb 09		 jmp	 SHORT $LN4@P_NewChase
$LN2@P_NewChase:
  002d4	8b 45 e4	 mov	 eax, DWORD PTR _tdir$[ebp]
  002d7	83 c0 01	 add	 eax, 1
  002da	89 45 e4	 mov	 DWORD PTR _tdir$[ebp], eax
$LN4@P_NewChase:
  002dd	83 7d e4 07	 cmp	 DWORD PTR _tdir$[ebp], 7
  002e1	7f 28		 jg	 SHORT $LN3@P_NewChase

; 3755 : 		{
; 3756 : 			if (tdir != turnaround)

  002e3	8b 45 e4	 mov	 eax, DWORD PTR _tdir$[ebp]
  002e6	3b 45 dc	 cmp	 eax, DWORD PTR _turnaround$[ebp]
  002e9	74 1e		 je	 SHORT $LN34@P_NewChase

; 3757 : 			{
; 3758 : 				actor->movedir = tdir;

  002eb	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002ee	8b 4d e4	 mov	 ecx, DWORD PTR _tdir$[ebp]
  002f1	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 3759 : 
; 3760 : 				if (P_TryWalk(actor))

  002f7	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 _P_TryWalk
  00300	83 c4 04	 add	 esp, 4
  00303	85 c0		 test	 eax, eax
  00305	74 02		 je	 SHORT $LN34@P_NewChase

; 3761 : 					return;

  00307	eb 75		 jmp	 SHORT $LN1@P_NewChase
$LN34@P_NewChase:

; 3762 : 			}
; 3763 : 		}

  00309	eb c9		 jmp	 SHORT $LN2@P_NewChase
$LN3@P_NewChase:

; 3764 : 	}

  0030b	eb 40		 jmp	 SHORT $LN6@P_NewChase
$LN31@P_NewChase:

; 3765 : 	else
; 3766 : 	{
; 3767 : 		for (tdir = DI_SOUTHEAST; tdir >= DI_EAST; tdir--)

  0030d	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _tdir$[ebp], 7
  00314	eb 09		 jmp	 SHORT $LN7@P_NewChase
$LN5@P_NewChase:
  00316	8b 45 e4	 mov	 eax, DWORD PTR _tdir$[ebp]
  00319	83 e8 01	 sub	 eax, 1
  0031c	89 45 e4	 mov	 DWORD PTR _tdir$[ebp], eax
$LN7@P_NewChase:
  0031f	83 7d e4 00	 cmp	 DWORD PTR _tdir$[ebp], 0
  00323	7c 28		 jl	 SHORT $LN6@P_NewChase

; 3768 : 		{
; 3769 : 			if (tdir != turnaround)

  00325	8b 45 e4	 mov	 eax, DWORD PTR _tdir$[ebp]
  00328	3b 45 dc	 cmp	 eax, DWORD PTR _turnaround$[ebp]
  0032b	74 1e		 je	 SHORT $LN36@P_NewChase

; 3770 : 			{
; 3771 : 				actor->movedir = tdir;

  0032d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00330	8b 4d e4	 mov	 ecx, DWORD PTR _tdir$[ebp]
  00333	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 3772 : 
; 3773 : 				if (P_TryWalk(actor))

  00339	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 _P_TryWalk
  00342	83 c4 04	 add	 esp, 4
  00345	85 c0		 test	 eax, eax
  00347	74 02		 je	 SHORT $LN36@P_NewChase

; 3774 : 					return;

  00349	eb 33		 jmp	 SHORT $LN1@P_NewChase
$LN36@P_NewChase:

; 3775 : 			}
; 3776 : 		}

  0034b	eb c9		 jmp	 SHORT $LN5@P_NewChase
$LN6@P_NewChase:

; 3777 : 	}
; 3778 : 
; 3779 : 	if (turnaround != DI_NODIR)

  0034d	83 7d dc ff	 cmp	 DWORD PTR _turnaround$[ebp], -1
  00351	74 1e		 je	 SHORT $LN38@P_NewChase

; 3780 : 	{
; 3781 : 		actor->movedir = turnaround;

  00353	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00356	8b 4d dc	 mov	 ecx, DWORD PTR _turnaround$[ebp]
  00359	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 3782 : 
; 3783 : 		if (P_TryWalk(actor))

  0035f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00362	50		 push	 eax
  00363	e8 00 00 00 00	 call	 _P_TryWalk
  00368	83 c4 04	 add	 esp, 4
  0036b	85 c0		 test	 eax, eax
  0036d	74 02		 je	 SHORT $LN38@P_NewChase

; 3784 : 			return;

  0036f	eb 0d		 jmp	 SHORT $LN1@P_NewChase
$LN38@P_NewChase:

; 3785 : 	}
; 3786 : 
; 3787 : 	actor->movedir = (angle_t)DI_NODIR; // cannot move

  00371	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00374	c7 80 90 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+144], -1
$LN1@P_NewChase:

; 3788 : }

  0037e	5f		 pop	 edi
  0037f	5e		 pop	 esi
  00380	5b		 pop	 ebx
  00381	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00384	33 cd		 xor	 ecx, ebp
  00386	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0038b	8b e5		 mov	 esp, ebp
  0038d	5d		 pop	 ebp
  0038e	c3		 ret	 0
_P_NewChaseDir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_TryWalk
_TEXT	SEGMENT
_actor$ = 8						; size = 4
_P_TryWalk PROC						; COMDAT

; 3658 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3659 : 	if (!P_Move(actor, actor->info->speed))

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00012	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00015	52		 push	 edx
  00016	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _P_Move
  0001f	83 c4 08	 add	 esp, 8
  00022	85 c0		 test	 eax, eax
  00024	75 04		 jne	 SHORT $LN2@P_TryWalk

; 3660 : 		return false;

  00026	33 c0		 xor	 eax, eax
  00028	eb 19		 jmp	 SHORT $LN1@P_TryWalk
$LN2@P_TryWalk:

; 3661 : 	actor->movecount = P_Random() & 15;

  0002a	e8 00 00 00 00	 call	 _P_Random
  0002f	0f b6 c0	 movzx	 eax, al
  00032	83 e0 0f	 and	 eax, 15			; 0000000fH
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00038	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 3662 : 	return true;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_TryWalk:

; 3663 : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_P_TryWalk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Move
_TEXT	SEGMENT
_movedir$ = -12						; size = 4
_tryy$ = -8						; size = 4
_tryx$ = -4						; size = 4
_actor$ = 8						; size = 4
_speed$ = 12						; size = 4
_P_Move	PROC						; COMDAT

; 3616 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3617 : 	fixed_t tryx, tryy;
; 3618 : 	dirtype_t movedir = actor->movedir;

  00009	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0000c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00012	89 4d f4	 mov	 DWORD PTR _movedir$[ebp], ecx

; 3619 : 
; 3620 : 	if (movedir == DI_NODIR || !actor->health)

  00015	83 7d f4 ff	 cmp	 DWORD PTR _movedir$[ebp], -1
  00019	74 0c		 je	 SHORT $LN3@P_Move
  0001b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001e	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00025	75 07		 jne	 SHORT $LN2@P_Move
$LN3@P_Move:

; 3621 : 		return false;

  00027	33 c0		 xor	 eax, eax
  00029	e9 cf 00 00 00	 jmp	 $LN1@P_Move
$LN2@P_Move:

; 3622 : 
; 3623 : 	I_Assert((unsigned)movedir < 8);
; 3624 : 
; 3625 : 	tryx = actor->x + speed*xspeed[movedir];

  0002e	8b 45 f4	 mov	 eax, DWORD PTR _movedir$[ebp]
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _speed$[ebp]
  00034	0f af 0c 85 00
	00 00 00	 imul	 ecx, DWORD PTR _xspeed[eax*4]
  0003c	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0003f	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00042	89 4d fc	 mov	 DWORD PTR _tryx$[ebp], ecx

; 3626 : 	tryy = actor->y + speed*yspeed[movedir];

  00045	8b 45 f4	 mov	 eax, DWORD PTR _movedir$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _speed$[ebp]
  0004b	0f af 0c 85 00
	00 00 00	 imul	 ecx, DWORD PTR _yspeed[eax*4]
  00053	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00056	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  00059	89 4d f8	 mov	 DWORD PTR _tryy$[ebp], ecx

; 3627 : 
; 3628 : 	if (!P_TryMove(actor, tryx, tryy, false))

  0005c	6a 00		 push	 0
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _tryy$[ebp]
  00061	50		 push	 eax
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _tryx$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 _P_TryMove
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	85 c0		 test	 eax, eax
  00074	75 6d		 jne	 SHORT $LN4@P_Move

; 3629 : 	{
; 3630 : 		if (actor->flags & MF_FLOAT && floatok)

  00076	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00079	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0007c	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00082	74 59		 je	 SHORT $LN6@P_Move
  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _floatok, 0
  0008b	74 50		 je	 SHORT $LN6@P_Move

; 3631 : 		{
; 3632 : 			// must adjust height
; 3633 : 			if (actor->z < tmfloorz)

  0008d	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00090	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00093	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _tmfloorz
  00099	7d 14		 jge	 SHORT $LN7@P_Move

; 3634 : 				actor->z += FLOATSPEED;

  0009b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a1	81 c1 00 00 04
	00		 add	 ecx, 262144		; 00040000H
  000a7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000aa	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  000ad	eb 12		 jmp	 SHORT $LN8@P_Move
$LN7@P_Move:

; 3635 : 			else
; 3636 : 				actor->z -= FLOATSPEED;

  000af	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000b2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000b5	81 e9 00 00 04
	00		 sub	 ecx, 262144		; 00040000H
  000bb	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000be	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN8@P_Move:

; 3637 : 
; 3638 : 			actor->flags2 |= MF2_INFLOAT;

  000c1	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000c4	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000ca	83 c9 20	 or	 ecx, 32			; 00000020H
  000cd	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000d0	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3639 : 			return true;

  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	eb 20		 jmp	 SHORT $LN1@P_Move
$LN6@P_Move:

; 3640 : 		}
; 3641 : 
; 3642 : 		return false;

  000dd	33 c0		 xor	 eax, eax
  000df	eb 1c		 jmp	 SHORT $LN1@P_Move

; 3643 : 	}

  000e1	eb 15		 jmp	 SHORT $LN5@P_Move
$LN4@P_Move:

; 3644 : 	else
; 3645 : 		actor->flags2 &= ~MF2_INFLOAT;

  000e3	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000e6	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000ec	83 e1 df	 and	 ecx, -33		; ffffffdfH
  000ef	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000f2	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN5@P_Move:

; 3646 : 
; 3647 : 	return true;

  000f8	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_Move:

; 3648 : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
_P_Move	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Boss4Thinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_Boss4Thinker PROC					; COMDAT

; 3565 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3566 : 	(void)mobj; //no AI for now
; 3567 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_P_Boss4Thinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Boss3Thinker
_TEXT	SEGMENT
_speed$1 = -32						; size = 4
_dist2$2 = -28						; size = 4
_dist$3 = -24						; size = 4
_mo2$4 = -20						; size = 4
_th$5 = -16						; size = 4
_i$6 = -12						; size = 4
_rover$7 = -8						; size = 4
_i$8 = -4						; size = 4
_mobj$ = 8						; size = 4
_P_Boss3Thinker PROC					; COMDAT

; 3308 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3309 : 	if (mobj->state->nextstate == mobj->info->spawnstate && mobj->tics == 1)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00012	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00018	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0001b	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0001e	75 30		 jne	 SHORT $LN20@P_Boss3Thi
  00020	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00023	83 78 58 01	 cmp	 DWORD PTR [eax+88], 1
  00027	75 27		 jne	 SHORT $LN20@P_Boss3Thi

; 3310 : 	{
; 3311 : 		mobj->flags2 &= ~MF2_FRET;

  00029	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00032	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00035	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00038	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3312 : 		mobj->flags &= ~MF_TRANSLATION;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00041	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00044	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  0004a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0004d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN20@P_Boss3Thi:

; 3313 : 	}
; 3314 : 
; 3315 : 	if (mobj->flags2 & MF2_FRET)

  00050	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00053	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00059	83 e1 10	 and	 ecx, 16			; 00000010H
  0005c	74 44		 je	 SHORT $LN22@P_Boss3Thi

; 3316 : 	{
; 3317 : 		mobj->movedir = 1;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00061	c7 80 90 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+144], 1

; 3318 : 		if (mobj->health <= mobj->info->damage)

  0006b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0006e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00074	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00077	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0007d	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  00080	7f 20		 jg	 SHORT $LN22@P_Boss3Thi

; 3319 : 		{
; 3320 : 			var1 = 100;

  00082	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR _var1, 100	; 00000064H

; 3321 : 			var2 = 0;

  0008c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _var2, 0

; 3322 : 			A_LinedefExecute(mobj);

  00096	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _A_LinedefExecute
  0009f	83 c4 04	 add	 esp, 4
$LN22@P_Boss3Thi:

; 3323 : 		}
; 3324 : 	}
; 3325 : 
; 3326 : 	if (mobj->movefactor > ORIG_FRICTION_FACTOR)

  000a2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a5	81 b8 b8 00 00
	00 00 08 00 00	 cmp	 DWORD PTR [eax+184], 2048 ; 00000800H
  000af	7e 1a		 jle	 SHORT $LN23@P_Boss3Thi

; 3327 : 	{
; 3328 : 		mobj->movefactor--;

  000b1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b4	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  000ba	83 e9 01	 sub	 ecx, 1
  000bd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000c0	89 8a b8 00 00
	00		 mov	 DWORD PTR [edx+184], ecx

; 3329 : 		return;

  000c6	e9 7a 08 00 00	 jmp	 $LN68@P_Boss3Thi
$LN23@P_Boss3Thi:

; 3330 : 	}
; 3331 : 
; 3332 : 	if (!mobj->tracer)

  000cb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ce	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  000d5	75 16		 jne	 SHORT $LN24@P_Boss3Thi

; 3333 : 	{
; 3334 : 		var1 = 1;

  000d7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _var1, 1

; 3335 : 		A_BossJetFume(mobj);

  000e1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _A_BossJetFume
  000ea	83 c4 04	 add	 esp, 4
$LN24@P_Boss3Thi:

; 3336 : 	}
; 3337 : 
; 3338 : 	if (mobj->health <= 0)

  000ed	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f0	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  000f7	7f 5d		 jg	 SHORT $LN27@P_Boss3Thi

; 3339 : 	{
; 3340 : 		mobj->movecount = 0;

  000f9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000fc	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0

; 3341 : 		mobj->reactiontime = 0;

  00106	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00109	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 3342 : 
; 3343 : 		if (mobj->state < &states[mobj->info->xdeathstate])

  00113	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00116	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0011c	6b 51 34 1c	 imul	 edx, DWORD PTR [ecx+52], 28
  00120	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00126	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00129	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0012c	73 05		 jae	 SHORT $LN26@P_Boss3Thi

; 3344 : 			return;

  0012e	e9 12 08 00 00	 jmp	 $LN68@P_Boss3Thi
$LN26@P_Boss3Thi:

; 3345 : 
; 3346 : 		if (mobj->threshold == -1)

  00133	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00136	83 b8 a0 00 00
	00 ff		 cmp	 DWORD PTR [eax+160], -1
  0013d	75 17		 jne	 SHORT $LN27@P_Boss3Thi

; 3347 : 		{
; 3348 : 			mobj->momz = mobj->info->speed;

  0013f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00142	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00148	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0014b	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0014e	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 3349 : 			return;

  00151	e9 ef 07 00 00	 jmp	 $LN68@P_Boss3Thi
$LN27@P_Boss3Thi:

; 3350 : 		}
; 3351 : 	}
; 3352 : 
; 3353 : 	if (mobj->reactiontime && mobj->health > mobj->info->damage) // Shock mode

  00156	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00159	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00160	0f 84 2c 02 00
	00		 je	 $LN28@P_Boss3Thi
  00166	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00169	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0016f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00172	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00178	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  0017b	0f 8e 11 02 00
	00		 jle	 $LN28@P_Boss3Thi

; 3354 : 	{
; 3355 : 		UINT32 i;
; 3356 : 
; 3357 : 		if (mobj->state != &states[mobj->info->spawnstate])

  00181	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00184	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0018a	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  0018e	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00194	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00197	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0019a	74 19		 je	 SHORT $LN30@P_Boss3Thi

; 3358 : 			P_SetMobjState(mobj, mobj->info->spawnstate);

  0019c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0019f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001a5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001a8	52		 push	 edx
  001a9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 _P_SetMobjState
  001b2	83 c4 08	 add	 esp, 8
$LN30@P_Boss3Thi:

; 3359 : 
; 3360 : 		if (leveltime % 2*TICRATE == 0)

  001b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  001ba	33 d2		 xor	 edx, edx
  001bc	b9 02 00 00 00	 mov	 ecx, 2
  001c1	f7 f1		 div	 ecx
  001c3	6b d2 23	 imul	 edx, edx, 35
  001c6	85 d2		 test	 edx, edx
  001c8	0f 85 42 01 00
	00		 jne	 $LN39@P_Boss3Thi

; 3361 : 		{
; 3362 : 			ffloor_t *rover;
; 3363 : 
; 3364 : 			// Shock the water
; 3365 : 			for (i = 0; i < MAXPLAYERS; i++)

  001ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  001d5	eb 09		 jmp	 SHORT $LN4@P_Boss3Thi
$LN2@P_Boss3Thi:
  001d7	8b 45 fc	 mov	 eax, DWORD PTR _i$8[ebp]
  001da	83 c0 01	 add	 eax, 1
  001dd	89 45 fc	 mov	 DWORD PTR _i$8[ebp], eax
$LN4@P_Boss3Thi:
  001e0	83 7d fc 20	 cmp	 DWORD PTR _i$8[ebp], 32	; 00000020H
  001e4	73 76		 jae	 SHORT $LN3@P_Boss3Thi

; 3366 : 			{
; 3367 : 				if (!playeringame[i])

  001e6	8b 45 fc	 mov	 eax, DWORD PTR _i$8[ebp]
  001e9	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  001f1	75 02		 jne	 SHORT $LN32@P_Boss3Thi

; 3368 : 					continue;

  001f3	eb e2		 jmp	 SHORT $LN2@P_Boss3Thi
$LN32@P_Boss3Thi:

; 3369 : 
; 3370 : 				if (!players[i].mo)

  001f5	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 508
  001fc	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00203	75 02		 jne	 SHORT $LN33@P_Boss3Thi

; 3371 : 					continue;

  00205	eb d0		 jmp	 SHORT $LN2@P_Boss3Thi
$LN33@P_Boss3Thi:

; 3372 : 
; 3373 : 				if (players[i].mo->health <= 0)

  00207	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 508
  0020e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00214	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0021b	7f 02		 jg	 SHORT $LN34@P_Boss3Thi

; 3374 : 					continue;

  0021d	eb b8		 jmp	 SHORT $LN2@P_Boss3Thi
$LN34@P_Boss3Thi:

; 3375 : 
; 3376 : 				if (players[i].mo->eflags & MFE_UNDERWATER)

  0021f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 508
  00226	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0022c	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00232	83 e2 08	 and	 edx, 8
  00235	74 20		 je	 SHORT $LN35@P_Boss3Thi

; 3377 : 					P_DamageMobj(players[i].mo, mobj, mobj, 1);

  00237	6a 01		 push	 1
  00239	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0023c	50		 push	 eax
  0023d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00240	51		 push	 ecx
  00241	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$8[ebp], 508
  00248	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 _P_DamageMobj
  00254	83 c4 10	 add	 esp, 16			; 00000010H
$LN35@P_Boss3Thi:

; 3378 : 			}

  00257	e9 7b ff ff ff	 jmp	 $LN2@P_Boss3Thi
$LN3@P_Boss3Thi:

; 3379 : 
; 3380 : 			// Make the water flash
; 3381 : 			for (i = 0; i < numsectors; i++)

  0025c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  00263	eb 09		 jmp	 SHORT $LN7@P_Boss3Thi
$LN5@P_Boss3Thi:
  00265	8b 45 fc	 mov	 eax, DWORD PTR _i$8[ebp]
  00268	83 c0 01	 add	 eax, 1
  0026b	89 45 fc	 mov	 DWORD PTR _i$8[ebp], eax
$LN7@P_Boss3Thi:
  0026e	8b 45 fc	 mov	 eax, DWORD PTR _i$8[ebp]
  00271	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsectors
  00277	73 76		 jae	 SHORT $LN6@P_Boss3Thi

; 3382 : 			{
; 3383 : 				if (!sectors[i].ffloors)

  00279	69 45 fc f8 00
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 248
  00280	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sectors
  00286	83 bc 01 90 00
	00 00 00	 cmp	 DWORD PTR [ecx+eax+144], 0
  0028e	75 02		 jne	 SHORT $LN36@P_Boss3Thi

; 3384 : 					continue;

  00290	eb d3		 jmp	 SHORT $LN5@P_Boss3Thi
$LN36@P_Boss3Thi:

; 3385 : 
; 3386 : 				for (rover = sectors[i].ffloors; rover; rover = rover->next)

  00292	69 45 fc f8 00
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 248
  00299	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sectors
  0029f	8b 94 01 90 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+144]
  002a6	89 55 f8	 mov	 DWORD PTR _rover$7[ebp], edx
  002a9	eb 09		 jmp	 SHORT $LN10@P_Boss3Thi
$LN8@P_Boss3Thi:
  002ab	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  002ae	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  002b1	89 4d f8	 mov	 DWORD PTR _rover$7[ebp], ecx
$LN10@P_Boss3Thi:
  002b4	83 7d f8 00	 cmp	 DWORD PTR _rover$7[ebp], 0
  002b8	74 30		 je	 SHORT $LN9@P_Boss3Thi

; 3387 : 				{
; 3388 : 					if (!(rover->flags & FF_EXISTS))

  002ba	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  002bd	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002c0	83 e1 01	 and	 ecx, 1
  002c3	75 02		 jne	 SHORT $LN37@P_Boss3Thi

; 3389 : 						continue;

  002c5	eb e4		 jmp	 SHORT $LN8@P_Boss3Thi
$LN37@P_Boss3Thi:

; 3390 : 
; 3391 : 					if (!(rover->flags & FF_SWIMMABLE))

  002c7	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  002ca	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002cd	83 e1 20	 and	 ecx, 32			; 00000020H
  002d0	75 02		 jne	 SHORT $LN38@P_Boss3Thi

; 3392 : 						continue;

  002d2	eb d7		 jmp	 SHORT $LN8@P_Boss3Thi
$LN38@P_Boss3Thi:

; 3393 : 
; 3394 : 					P_SpawnLightningFlash(rover->master->frontsector);

  002d4	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  002d7	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  002da	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  002dd	52		 push	 edx
  002de	e8 00 00 00 00	 call	 _P_SpawnLightningFlash
  002e3	83 c4 04	 add	 esp, 4

; 3395 : 					break;

  002e6	eb 02		 jmp	 SHORT $LN9@P_Boss3Thi

; 3396 : 				}

  002e8	eb c1		 jmp	 SHORT $LN8@P_Boss3Thi
$LN9@P_Boss3Thi:

; 3397 : 			}

  002ea	e9 76 ff ff ff	 jmp	 $LN5@P_Boss3Thi
$LN6@P_Boss3Thi:

; 3398 : 
; 3399 : 			if (leveltime % 35 == 0)

  002ef	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  002f4	33 d2		 xor	 edx, edx
  002f6	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  002fb	f7 f1		 div	 ecx
  002fd	85 d2		 test	 edx, edx
  002ff	75 0f		 jne	 SHORT $LN39@P_Boss3Thi

; 3400 : 				S_StartSound(0, sfx_buzz1);

  00301	68 fb 00 00 00	 push	 251			; 000000fbH
  00306	6a 00		 push	 0
  00308	e8 00 00 00 00	 call	 _S_StartSound
  0030d	83 c4 08	 add	 esp, 8
$LN39@P_Boss3Thi:

; 3401 : 		}
; 3402 : 
; 3403 : 		// If in the center, check to make sure
; 3404 : 		// none of the players are in the water
; 3405 : 		for (i = 0; i < MAXPLAYERS; i++)

  00310	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  00317	eb 09		 jmp	 SHORT $LN13@P_Boss3Thi
$LN11@P_Boss3Thi:
  00319	8b 45 fc	 mov	 eax, DWORD PTR _i$8[ebp]
  0031c	83 c0 01	 add	 eax, 1
  0031f	89 45 fc	 mov	 DWORD PTR _i$8[ebp], eax
$LN13@P_Boss3Thi:
  00322	83 7d fc 20	 cmp	 DWORD PTR _i$8[ebp], 32	; 00000020H
  00326	73 58		 jae	 SHORT $LN12@P_Boss3Thi

; 3406 : 		{
; 3407 : 			if (!playeringame[i])

  00328	8b 45 fc	 mov	 eax, DWORD PTR _i$8[ebp]
  0032b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00333	75 02		 jne	 SHORT $LN40@P_Boss3Thi

; 3408 : 				continue;

  00335	eb e2		 jmp	 SHORT $LN11@P_Boss3Thi
$LN40@P_Boss3Thi:

; 3409 : 
; 3410 : 			if (!players[i].mo)

  00337	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 508
  0033e	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00345	75 02		 jne	 SHORT $LN41@P_Boss3Thi

; 3411 : 				continue;

  00347	eb d0		 jmp	 SHORT $LN11@P_Boss3Thi
$LN41@P_Boss3Thi:

; 3412 : 
; 3413 : 			if (players[i].mo->health <= 0)

  00349	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 508
  00350	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00356	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0035d	7f 02		 jg	 SHORT $LN42@P_Boss3Thi

; 3414 : 				continue;

  0035f	eb b8		 jmp	 SHORT $LN11@P_Boss3Thi
$LN42@P_Boss3Thi:

; 3415 : 
; 3416 : 			if (players[i].mo->eflags & MFE_UNDERWATER)

  00361	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$8[ebp], 508
  00368	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0036e	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00374	83 e2 08	 and	 edx, 8
  00377	74 05		 je	 SHORT $LN43@P_Boss3Thi

; 3417 : 				return; // Stay put

  00379	e9 c7 05 00 00	 jmp	 $LN68@P_Boss3Thi
$LN43@P_Boss3Thi:

; 3418 : 		}

  0037e	eb 99		 jmp	 SHORT $LN11@P_Boss3Thi
$LN12@P_Boss3Thi:

; 3419 : 
; 3420 : 		mobj->reactiontime = 0;

  00380	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00383	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 3421 : 	}

  0038d	e9 b3 05 00 00	 jmp	 $LN68@P_Boss3Thi
$LN28@P_Boss3Thi:

; 3422 : 	else if (mobj->movecount) // Firing mode

  00392	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00395	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  0039c	0f 84 27 01 00
	00		 je	 $LN44@P_Boss3Thi

; 3423 : 	{
; 3424 : 		UINT32 i;
; 3425 : 
; 3426 : 		// look for a new target
; 3427 : 		P_Look4Players(mobj, true);

  003a2	6a 01		 push	 1
  003a4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003a7	50		 push	 eax
  003a8	e8 00 00 00 00	 call	 _P_Look4Players
  003ad	83 c4 08	 add	 esp, 8

; 3428 : 
; 3429 : 		if (!mobj->target || !mobj->target->player)

  003b0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003b3	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  003ba	74 12		 je	 SHORT $LN47@P_Boss3Thi
  003bc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003bf	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  003c5	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  003cc	75 05		 jne	 SHORT $LN46@P_Boss3Thi
$LN47@P_Boss3Thi:

; 3430 : 			return;

  003ce	e9 72 05 00 00	 jmp	 $LN68@P_Boss3Thi
$LN46@P_Boss3Thi:

; 3431 : 
; 3432 : 		// Are there any players underwater? If so, shock them!
; 3433 : 		for (i = 0; i < MAXPLAYERS; i++)

  003d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  003da	eb 09		 jmp	 SHORT $LN16@P_Boss3Thi
$LN14@P_Boss3Thi:
  003dc	8b 45 f4	 mov	 eax, DWORD PTR _i$6[ebp]
  003df	83 c0 01	 add	 eax, 1
  003e2	89 45 f4	 mov	 DWORD PTR _i$6[ebp], eax
$LN16@P_Boss3Thi:
  003e5	83 7d f4 20	 cmp	 DWORD PTR _i$6[ebp], 32	; 00000020H
  003e9	73 7e		 jae	 SHORT $LN15@P_Boss3Thi

; 3434 : 		{
; 3435 : 			if (!playeringame[i])

  003eb	8b 45 f4	 mov	 eax, DWORD PTR _i$6[ebp]
  003ee	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  003f6	75 02		 jne	 SHORT $LN48@P_Boss3Thi

; 3436 : 				continue;

  003f8	eb e2		 jmp	 SHORT $LN14@P_Boss3Thi
$LN48@P_Boss3Thi:

; 3437 : 
; 3438 : 			if (!players[i].mo)

  003fa	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$6[ebp], 508
  00401	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00408	75 02		 jne	 SHORT $LN49@P_Boss3Thi

; 3439 : 				continue;

  0040a	eb d0		 jmp	 SHORT $LN14@P_Boss3Thi
$LN49@P_Boss3Thi:

; 3440 : 
; 3441 : 			if (players[i].mo->health <= 0)

  0040c	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$6[ebp], 508
  00413	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00419	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00420	7f 02		 jg	 SHORT $LN50@P_Boss3Thi

; 3442 : 				continue;

  00422	eb b8		 jmp	 SHORT $LN14@P_Boss3Thi
$LN50@P_Boss3Thi:

; 3443 : 
; 3444 : 			if (players[i].mo->eflags & MFE_UNDERWATER)

  00424	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$6[ebp], 508
  0042b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00431	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00437	83 e2 08	 and	 edx, 8
  0043a	74 28		 je	 SHORT $LN51@P_Boss3Thi

; 3445 : 			{
; 3446 : 				mobj->movecount = 0;

  0043c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0043f	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0

; 3447 : 				P_SetMobjState(mobj, mobj->info->spawnstate);

  00449	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0044c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00452	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00455	52		 push	 edx
  00456	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 _P_SetMobjState
  0045f	83 c4 08	 add	 esp, 8

; 3448 : 				break;

  00462	eb 05		 jmp	 SHORT $LN15@P_Boss3Thi
$LN51@P_Boss3Thi:

; 3449 : 			}
; 3450 : 		}

  00464	e9 73 ff ff ff	 jmp	 $LN14@P_Boss3Thi
$LN15@P_Boss3Thi:

; 3451 : 
; 3452 : 		// Always face your target.
; 3453 : 		A_FaceTarget(mobj);

  00469	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0046c	50		 push	 eax
  0046d	e8 00 00 00 00	 call	 _A_FaceTarget
  00472	83 c4 04	 add	 esp, 4

; 3454 : 
; 3455 : 		// Check if the attack animation is running. If not, play it.
; 3456 : 		if (mobj->state < &states[mobj->info->missilestate] || mobj->state > &states[mobj->info->raisestate])

  00475	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00478	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0047e	6b 51 2c 1c	 imul	 edx, DWORD PTR [ecx+44], 28
  00482	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00488	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0048b	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0048e	72 1b		 jb	 SHORT $LN53@P_Boss3Thi
  00490	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00493	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00499	6b 51 5c 1c	 imul	 edx, DWORD PTR [ecx+92], 28
  0049d	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  004a3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004a6	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  004a9	76 19		 jbe	 SHORT $LN52@P_Boss3Thi
$LN53@P_Boss3Thi:

; 3457 : 			P_SetMobjState(mobj, mobj->info->missilestate);

  004ab	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004ae	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  004b4	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  004b7	52		 push	 edx
  004b8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004bb	50		 push	 eax
  004bc	e8 00 00 00 00	 call	 _P_SetMobjState
  004c1	83 c4 08	 add	 esp, 8
$LN52@P_Boss3Thi:

; 3458 : 	}

  004c4	e9 7c 04 00 00	 jmp	 $LN68@P_Boss3Thi
$LN44@P_Boss3Thi:

; 3459 : 	else if (mobj->threshold >= 0) // Traveling mode

  004c9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004cc	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  004d3	0f 8c 6c 04 00
	00		 jl	 $LN68@P_Boss3Thi

; 3460 : 	{
; 3461 : 		thinker_t *th;
; 3462 : 		mobj_t *mo2;
; 3463 : 		fixed_t dist, dist2;
; 3464 : 		fixed_t speed;
; 3465 : 
; 3466 : 		P_SetTarget(&mobj->target, NULL);

  004d9	6a 00		 push	 0
  004db	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004de	05 98 00 00 00	 add	 eax, 152		; 00000098H
  004e3	50		 push	 eax
  004e4	e8 00 00 00 00	 call	 _P_SetTarget
  004e9	83 c4 08	 add	 esp, 8

; 3467 : 
; 3468 : 		if (mobj->state != &states[mobj->info->spawnstate] && mobj->health > 0
; 3469 : 			&& !(mobj->flags2 & MF2_FRET))

  004ec	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004ef	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  004f5	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  004f9	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  004ff	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00502	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00505	74 33		 je	 SHORT $LN55@P_Boss3Thi
  00507	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0050a	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00511	7e 27		 jle	 SHORT $LN55@P_Boss3Thi
  00513	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00516	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0051c	83 e1 10	 and	 ecx, 16			; 00000010H
  0051f	75 19		 jne	 SHORT $LN55@P_Boss3Thi

; 3470 : 			P_SetMobjState(mobj, mobj->info->spawnstate);

  00521	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00524	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0052a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0052d	52		 push	 edx
  0052e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00531	50		 push	 eax
  00532	e8 00 00 00 00	 call	 _P_SetMobjState
  00537	83 c4 08	 add	 esp, 8
$LN55@P_Boss3Thi:

; 3471 : 
; 3472 : 		// scan the thinkers
; 3473 : 		// to find a point that matches
; 3474 : 		// the number
; 3475 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0053a	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0053f	89 45 f0	 mov	 DWORD PTR _th$5[ebp], eax
  00542	eb 09		 jmp	 SHORT $LN19@P_Boss3Thi
$LN17@P_Boss3Thi:
  00544	8b 45 f0	 mov	 eax, DWORD PTR _th$5[ebp]
  00547	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0054a	89 4d f0	 mov	 DWORD PTR _th$5[ebp], ecx
$LN19@P_Boss3Thi:
  0054d	81 7d f0 00 00
	00 00		 cmp	 DWORD PTR _th$5[ebp], OFFSET _thinkercap
  00554	74 5b		 je	 SHORT $LN18@P_Boss3Thi

; 3476 : 		{
; 3477 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00556	8b 45 f0	 mov	 eax, DWORD PTR _th$5[ebp]
  00559	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00560	74 02		 je	 SHORT $LN56@P_Boss3Thi

; 3478 : 				continue;

  00562	eb e0		 jmp	 SHORT $LN17@P_Boss3Thi
$LN56@P_Boss3Thi:

; 3479 : 
; 3480 : 			mo2 = (mobj_t *)th;

  00564	8b 45 f0	 mov	 eax, DWORD PTR _th$5[ebp]
  00567	89 45 ec	 mov	 DWORD PTR _mo2$4[ebp], eax

; 3481 : 			if (mo2->type == MT_BOSS3WAYPOINT && mo2->spawnpoint && mo2->spawnpoint->angle == mobj->threshold)

  0056a	8b 45 ec	 mov	 eax, DWORD PTR _mo2$4[ebp]
  0056d	83 78 7c 1c	 cmp	 DWORD PTR [eax+124], 28	; 0000001cH
  00571	75 3c		 jne	 SHORT $LN57@P_Boss3Thi
  00573	8b 45 ec	 mov	 eax, DWORD PTR _mo2$4[ebp]
  00576	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  0057d	74 30		 je	 SHORT $LN57@P_Boss3Thi
  0057f	8b 45 ec	 mov	 eax, DWORD PTR _mo2$4[ebp]
  00582	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00588	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  0058c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0058f	3b 90 a0 00 00
	00		 cmp	 edx, DWORD PTR [eax+160]
  00595	75 18		 jne	 SHORT $LN57@P_Boss3Thi

; 3482 : 			{
; 3483 : 				P_SetTarget(&mobj->target, mo2);

  00597	8b 45 ec	 mov	 eax, DWORD PTR _mo2$4[ebp]
  0059a	50		 push	 eax
  0059b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0059e	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  005a4	51		 push	 ecx
  005a5	e8 00 00 00 00	 call	 _P_SetTarget
  005aa	83 c4 08	 add	 esp, 8

; 3484 : 				break;

  005ad	eb 02		 jmp	 SHORT $LN18@P_Boss3Thi
$LN57@P_Boss3Thi:

; 3485 : 			}
; 3486 : 		}

  005af	eb 93		 jmp	 SHORT $LN17@P_Boss3Thi
$LN18@P_Boss3Thi:

; 3487 : 
; 3488 : 		if (!mobj->target) // Should NEVER happen

  005b1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005b4	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  005bb	75 1c		 jne	 SHORT $LN58@P_Boss3Thi

; 3489 : 		{
; 3490 : 			CONS_Printf("Error: Boss 3 was unable to find specified waypoint: %d\n", mobj->threshold);

  005bd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005c0	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  005c6	51		 push	 ecx
  005c7	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@DLFIOOBB@Error?3?5Boss?53?5was?5unable?5to?5fin@
  005cc	e8 00 00 00 00	 call	 _CONS_Printf
  005d1	83 c4 08	 add	 esp, 8

; 3491 : 			return;

  005d4	e9 6c 03 00 00	 jmp	 $LN68@P_Boss3Thi
$LN58@P_Boss3Thi:

; 3492 : 		}
; 3493 : 
; 3494 : 		dist = P_AproxDistance(P_AproxDistance(mobj->target->x - mobj->x, mobj->target->y - mobj->y), mobj->target->z - mobj->z);

  005d9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005dc	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  005e2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  005e5	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  005e8	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  005eb	50		 push	 eax
  005ec	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  005ef	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  005f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005f8	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  005fb	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  005fe	51		 push	 ecx
  005ff	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00602	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00608	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0060b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0060e	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00611	52		 push	 edx
  00612	e8 00 00 00 00	 call	 _P_AproxDistance
  00617	83 c4 08	 add	 esp, 8
  0061a	50		 push	 eax
  0061b	e8 00 00 00 00	 call	 _P_AproxDistance
  00620	83 c4 08	 add	 esp, 8
  00623	89 45 e8	 mov	 DWORD PTR _dist$3[ebp], eax

; 3495 : 
; 3496 : 		if (dist < 1)

  00626	83 7d e8 01	 cmp	 DWORD PTR _dist$3[ebp], 1
  0062a	7d 07		 jge	 SHORT $LN59@P_Boss3Thi

; 3497 : 			dist = 1;

  0062c	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _dist$3[ebp], 1
$LN59@P_Boss3Thi:

; 3498 : 
; 3499 : 		if ((mobj->movedir) || (mobj->health <= mobj->info->damage))

  00633	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00636	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0063d	75 17		 jne	 SHORT $LN62@P_Boss3Thi
  0063f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00642	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00648	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0064b	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00651	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  00654	7f 13		 jg	 SHORT $LN60@P_Boss3Thi
$LN62@P_Boss3Thi:

; 3500 : 			speed = mobj->info->speed * 2;

  00656	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00659	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0065f	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00662	d1 e2		 shl	 edx, 1
  00664	89 55 e0	 mov	 DWORD PTR _speed$1[ebp], edx
  00667	eb 0f		 jmp	 SHORT $LN61@P_Boss3Thi
$LN60@P_Boss3Thi:

; 3501 : 		else
; 3502 : 			speed = mobj->info->speed;

  00669	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0066c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00672	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00675	89 55 e0	 mov	 DWORD PTR _speed$1[ebp], edx
$LN61@P_Boss3Thi:

; 3503 : 
; 3504 : 		mobj->momx = FixedMul(FixedDiv(mobj->target->x - mobj->x, dist), speed);

  00678	8b 45 e0	 mov	 eax, DWORD PTR _speed$1[ebp]
  0067b	50		 push	 eax
  0067c	8b 4d e8	 mov	 ecx, DWORD PTR _dist$3[ebp]
  0067f	51		 push	 ecx
  00680	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00683	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00689	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0068c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0068f	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00692	52		 push	 edx
  00693	e8 00 00 00 00	 call	 _FixedDiv
  00698	83 c4 08	 add	 esp, 8
  0069b	50		 push	 eax
  0069c	e8 00 00 00 00	 call	 _FixedMul
  006a1	83 c4 08	 add	 esp, 8
  006a4	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006a7	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3505 : 		mobj->momy = FixedMul(FixedDiv(mobj->target->y - mobj->y, dist), speed);

  006aa	8b 45 e0	 mov	 eax, DWORD PTR _speed$1[ebp]
  006ad	50		 push	 eax
  006ae	8b 4d e8	 mov	 ecx, DWORD PTR _dist$3[ebp]
  006b1	51		 push	 ecx
  006b2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  006b5	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  006bb	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006be	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  006c1	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  006c4	52		 push	 edx
  006c5	e8 00 00 00 00	 call	 _FixedDiv
  006ca	83 c4 08	 add	 esp, 8
  006cd	50		 push	 eax
  006ce	e8 00 00 00 00	 call	 _FixedMul
  006d3	83 c4 08	 add	 esp, 8
  006d6	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006d9	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 3506 : 		mobj->momz = FixedMul(FixedDiv(mobj->target->z - mobj->z, dist), speed);

  006dc	8b 45 e0	 mov	 eax, DWORD PTR _speed$1[ebp]
  006df	50		 push	 eax
  006e0	8b 4d e8	 mov	 ecx, DWORD PTR _dist$3[ebp]
  006e3	51		 push	 ecx
  006e4	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  006e7	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  006ed	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006f0	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  006f3	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  006f6	52		 push	 edx
  006f7	e8 00 00 00 00	 call	 _FixedDiv
  006fc	83 c4 08	 add	 esp, 8
  006ff	50		 push	 eax
  00700	e8 00 00 00 00	 call	 _FixedMul
  00705	83 c4 08	 add	 esp, 8
  00708	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0070b	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 3507 : 
; 3508 : 		mobj->angle = R_PointToAngle(mobj->momx, mobj->momy);

  0070e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00711	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00714	51		 push	 ecx
  00715	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00718	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0071b	50		 push	 eax
  0071c	e8 00 00 00 00	 call	 _R_PointToAngle
  00721	83 c4 08	 add	 esp, 8
  00724	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00727	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 3509 : 
; 3510 : 		dist2 = P_AproxDistance(P_AproxDistance(mobj->target->x - (mobj->x + mobj->momx), mobj->target->y - (mobj->y + mobj->momy)), mobj->target->z - (mobj->z + mobj->momz));

  0072a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0072d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00733	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00736	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00739	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0073c	03 42 50	 add	 eax, DWORD PTR [edx+80]
  0073f	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00742	2b c8		 sub	 ecx, eax
  00744	51		 push	 ecx
  00745	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00748	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0074e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00751	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00754	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00757	03 51 4c	 add	 edx, DWORD PTR [ecx+76]
  0075a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0075d	2b c2		 sub	 eax, edx
  0075f	50		 push	 eax
  00760	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00763	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00769	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0076c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0076f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00772	03 48 48	 add	 ecx, DWORD PTR [eax+72]
  00775	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00778	2b d1		 sub	 edx, ecx
  0077a	52		 push	 edx
  0077b	e8 00 00 00 00	 call	 _P_AproxDistance
  00780	83 c4 08	 add	 esp, 8
  00783	50		 push	 eax
  00784	e8 00 00 00 00	 call	 _P_AproxDistance
  00789	83 c4 08	 add	 esp, 8
  0078c	89 45 e4	 mov	 DWORD PTR _dist2$2[ebp], eax

; 3511 : 
; 3512 : 		if (dist2 < 1)

  0078f	83 7d e4 01	 cmp	 DWORD PTR _dist2$2[ebp], 1
  00793	7d 07		 jge	 SHORT $LN63@P_Boss3Thi

; 3513 : 			dist2 = 1;

  00795	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _dist2$2[ebp], 1
$LN63@P_Boss3Thi:

; 3514 : 
; 3515 : 		if ((dist >> FRACBITS) <= (dist2 >> FRACBITS))

  0079c	8b 45 e8	 mov	 eax, DWORD PTR _dist$3[ebp]
  0079f	c1 f8 10	 sar	 eax, 16			; 00000010H
  007a2	8b 4d e4	 mov	 ecx, DWORD PTR _dist2$2[ebp]
  007a5	c1 f9 10	 sar	 ecx, 16			; 00000010H
  007a8	3b c1		 cmp	 eax, ecx
  007aa	0f 8f 95 01 00
	00		 jg	 $LN68@P_Boss3Thi

; 3516 : 		{
; 3517 : 			// If further away, set XYZ of mobj to waypoint location
; 3518 : 			P_UnsetThingPosition(mobj);

  007b0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007b3	50		 push	 eax
  007b4	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  007b9	83 c4 04	 add	 esp, 4

; 3519 : 			mobj->x = mobj->target->x;

  007bc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007bf	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  007c5	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007c8	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  007cb	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 3520 : 			mobj->y = mobj->target->y;

  007ce	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007d1	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  007d7	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007da	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  007dd	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 3521 : 			mobj->z = mobj->target->z;

  007e0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007e3	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  007e9	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007ec	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  007ef	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 3522 : 			mobj->momx = mobj->momy = mobj->momz = 0;

  007f2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007f5	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  007fc	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  007ff	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00806	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00809	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 3523 : 			P_SetThingPosition(mobj);

  00810	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00813	50		 push	 eax
  00814	e8 00 00 00 00	 call	 _P_SetThingPosition
  00819	83 c4 04	 add	 esp, 4

; 3524 : 
; 3525 : 			if (mobj->threshold == 0)

  0081c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0081f	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00826	75 5c		 jne	 SHORT $LN66@P_Boss3Thi

; 3526 : 			{
; 3527 : 				mobj->reactiontime = 1; // Bzzt! Shock the water!

  00828	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0082b	c7 80 9c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+156], 1

; 3528 : 				mobj->movedir = 0;

  00835	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00838	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 3529 : 
; 3530 : 				if (mobj->health <= 0)

  00842	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00845	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0084c	7f 36		 jg	 SHORT $LN66@P_Boss3Thi

; 3531 : 				{
; 3532 : 					mobj->flags |= MF_NOGRAVITY|MF_NOCLIP;

  0084e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00851	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00854	81 c9 00 12 00
	00		 or	 ecx, 4608		; 00001200H
  0085a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0085d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3533 : 					mobj->flags |= MF_NOCLIPHEIGHT;

  00860	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00863	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00866	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  0086c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0086f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3534 : 					mobj->threshold = -1;

  00872	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00875	c7 80 a0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+160], -1

; 3535 : 					return;

  0087f	e9 c1 00 00 00	 jmp	 $LN68@P_Boss3Thi
$LN66@P_Boss3Thi:

; 3536 : 				}
; 3537 : 			}
; 3538 : 
; 3539 : 			// Set to next waypoint in sequence
; 3540 : 			if (mobj->target->spawnpoint)

  00884	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00887	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0088d	83 b9 ac 00 00
	00 00		 cmp	 DWORD PTR [ecx+172], 0
  00894	0f 84 9e 00 00
	00		 je	 $LN67@P_Boss3Thi

; 3541 : 			{
; 3542 : 				// From the center point, choose one of the five paths
; 3543 : 				if (mobj->target->spawnpoint->angle == 0)

  0089a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0089d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  008a3	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  008a9	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  008ad	85 c0		 test	 eax, eax
  008af	75 1e		 jne	 SHORT $LN69@P_Boss3Thi

; 3544 : 					mobj->threshold = (P_Random()%5) + 1;

  008b1	e8 00 00 00 00	 call	 _P_Random
  008b6	0f b6 c0	 movzx	 eax, al
  008b9	99		 cdq
  008ba	b9 05 00 00 00	 mov	 ecx, 5
  008bf	f7 f9		 idiv	 ecx
  008c1	83 c2 01	 add	 edx, 1
  008c4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008c7	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx
  008cd	eb 1c		 jmp	 SHORT $LN70@P_Boss3Thi
$LN69@P_Boss3Thi:

; 3545 : 				else
; 3546 : 					mobj->threshold = mobj->target->spawnpoint->extrainfo;

  008cf	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008d2	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  008d8	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  008de	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  008e2	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  008e5	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax
$LN70@P_Boss3Thi:

; 3547 : 
; 3548 : 				// If the deaf flag is set, go into firing mode
; 3549 : 				if (mobj->target->spawnpoint->options & MTF_AMBUSH)

  008eb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008ee	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  008f4	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  008fa	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  008fe	83 e0 08	 and	 eax, 8
  00901	74 33		 je	 SHORT $LN73@P_Boss3Thi

; 3550 : 				{
; 3551 : 					if (mobj->health <= mobj->info->damage)

  00903	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00906	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0090c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0090f	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00915	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  00918	7f 0f		 jg	 SHORT $LN72@P_Boss3Thi

; 3552 : 						mobj->movefactor = ORIG_FRICTION_FACTOR + 5*TICRATE;

  0091a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0091d	c7 80 b8 00 00
	00 af 08 00 00	 mov	 DWORD PTR [eax+184], 2223 ; 000008afH
  00927	eb 0d		 jmp	 SHORT $LN73@P_Boss3Thi
$LN72@P_Boss3Thi:

; 3553 : 					else
; 3554 : 						mobj->movecount = 1;

  00929	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0092c	c7 80 94 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+148], 1
$LN73@P_Boss3Thi:

; 3555 : 				}
; 3556 : 			}

  00936	eb 0d		 jmp	 SHORT $LN68@P_Boss3Thi
$LN67@P_Boss3Thi:

; 3557 : 			else // This should never happen, as well
; 3558 : 				CONS_Printf("Error: Boss 3 waypoint has no spawnpoint associated with it.\n");

  00938	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@BIMLJDCE@Error?3?5Boss?53?5waypoint?5has?5no?5s@
  0093d	e8 00 00 00 00	 call	 _CONS_Printf
  00942	83 c4 04	 add	 esp, 4
$LN68@P_Boss3Thi:

; 3559 : 		}
; 3560 : 	}
; 3561 : }

  00945	5f		 pop	 edi
  00946	5e		 pop	 esi
  00947	5b		 pop	 ebx
  00948	8b e5		 mov	 esp, ebp
  0094a	5d		 pop	 ebp
  0094b	c3		 ret	 0
_P_Boss3Thinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Boss2Thinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_Boss2Thinker PROC					; COMDAT

; 3242 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3243 : 	if (mobj->movecount)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00013	74 15		 je	 SHORT $LN2@P_Boss2Thi

; 3244 : 		mobj->movecount--;

  00015	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00018	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00024	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx
$LN2@P_Boss2Thi:

; 3245 : 
; 3246 : 	if (!(mobj->movecount))

  0002a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002d	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00034	75 27		 jne	 SHORT $LN3@P_Boss2Thi

; 3247 : 	{
; 3248 : 		mobj->flags2 &= ~MF2_FRET;

  00036	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00039	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0003f	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00042	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00045	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3249 : 		mobj->flags &= ~MF_TRANSLATION;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00051	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  00057	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0005a	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN3@P_Boss2Thi:

; 3250 : 	}
; 3251 : 
; 3252 : 	if (!mobj->tracer

  0005d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00060	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00067	75 16		 jne	 SHORT $LN4@P_Boss2Thi

; 3253 : #ifdef CHAOSISNOTDEADYET
; 3254 : 		&& gametype != GT_CHAOS
; 3255 : #endif
; 3256 : 		)
; 3257 : 	{
; 3258 : 		var1 = 0;

  00069	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _var1, 0

; 3259 : 		A_BossJetFume(mobj);

  00073	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _A_BossJetFume
  0007c	83 c4 04	 add	 esp, 4
$LN4@P_Boss2Thi:

; 3260 : 	}
; 3261 : 
; 3262 : 	if (mobj->health <= mobj->info->damage && (!mobj->target || !(mobj->target->flags & MF_SHOOTABLE)))

  0007f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00082	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00088	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0008b	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00091	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  00094	0f 8f ab 00 00
	00		 jg	 $LN5@P_Boss2Thi
  0009a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0009d	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000a4	74 15		 je	 SHORT $LN6@P_Boss2Thi
  000a6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a9	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000af	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000b2	83 e2 04	 and	 edx, 4
  000b5	0f 85 8a 00 00
	00		 jne	 $LN5@P_Boss2Thi
$LN6@P_Boss2Thi:

; 3263 : 	{
; 3264 : 		if (mobj->health <= 0)

  000bb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000be	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  000c5	7f 3f		 jg	 SHORT $LN7@P_Boss2Thi

; 3265 : 		{
; 3266 : 			// look for a new target
; 3267 : 			if (P_Look4Players(mobj, true) && mobj->info->mass) // Bid farewell!

  000c7	6a 01		 push	 1
  000c9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _P_Look4Players
  000d2	83 c4 08	 add	 esp, 8
  000d5	85 c0		 test	 eax, eax
  000d7	74 28		 je	 SHORT $LN8@P_Boss2Thi
  000d9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000dc	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e2	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  000e6	74 19		 je	 SHORT $LN8@P_Boss2Thi

; 3268 : 				S_StartSound(mobj, mobj->info->mass);

  000e8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000eb	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000f1	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000f4	52		 push	 edx
  000f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _S_StartSound
  000fe	83 c4 08	 add	 esp, 8
$LN8@P_Boss2Thi:

; 3269 : 			return;

  00101	e9 21 01 00 00	 jmp	 $LN12@P_Boss2Thi
$LN7@P_Boss2Thi:

; 3270 : 		}
; 3271 : 
; 3272 : 		// look for a new target
; 3273 : 		if (P_Look4Players(mobj, true) && mobj->info->seesound)

  00106	6a 01		 push	 1
  00108	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _P_Look4Players
  00111	83 c4 08	 add	 esp, 8
  00114	85 c0		 test	 eax, eax
  00116	74 28		 je	 SHORT $LN9@P_Boss2Thi
  00118	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0011b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00121	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00125	74 19		 je	 SHORT $LN9@P_Boss2Thi

; 3274 : 			S_StartSound(mobj, mobj->info->seesound);

  00127	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0012a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00130	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00133	52		 push	 edx
  00134	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 _S_StartSound
  0013d	83 c4 08	 add	 esp, 8
$LN9@P_Boss2Thi:

; 3275 : 
; 3276 : 		return;

  00140	e9 e2 00 00 00	 jmp	 $LN12@P_Boss2Thi
$LN5@P_Boss2Thi:

; 3277 : 	}
; 3278 : 
; 3279 : #ifdef CHAOSISNOTDEADYET
; 3280 : 	if (gametype == GT_CHAOS && (mobj->state == &states[S_EGGMOBILE2_POGO1]
; 3281 : 		|| mobj->state == &states[S_EGGMOBILE2_POGO2]
; 3282 : 		|| mobj->state == &states[S_EGGMOBILE2_POGO3]
; 3283 : 		|| mobj->state == &states[S_EGGMOBILE2_POGO4]
; 3284 : 		|| mobj->state == &states[S_EGGMOBILE2_STND])) // Chaos mode, he pogos only
; 3285 : 	{
; 3286 : 		mobj->flags &= ~MF_NOGRAVITY;
; 3287 : 		A_Boss2Pogo(mobj);
; 3288 : 	}
; 3289 : 	else if (gametype != GT_CHAOS)
; 3290 : #endif
; 3291 : 	{
; 3292 : 		if (mobj->state == &states[mobj->info->spawnstate] && mobj->health > mobj->info->damage)

  00145	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00148	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0014e	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  00152	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00158	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015b	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0015e	75 28		 jne	 SHORT $LN10@P_Boss2Thi
  00160	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00163	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00169	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0016c	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00172	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  00175	7e 11		 jle	 SHORT $LN10@P_Boss2Thi

; 3293 : 			A_Boss2Chase(mobj);

  00177	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 _A_Boss2Chase
  00180	83 c4 04	 add	 esp, 4
  00183	e9 9f 00 00 00	 jmp	 $LN12@P_Boss2Thi
$LN10@P_Boss2Thi:

; 3294 : 		else if (mobj->state == &states[mobj->info->raisestate]
; 3295 : 			|| mobj->state == &states[S_EGGMOBILE2_POGO2]
; 3296 : 			|| mobj->state == &states[S_EGGMOBILE2_POGO3]
; 3297 : 			|| mobj->state == &states[S_EGGMOBILE2_POGO4]
; 3298 : 			|| mobj->state == &states[mobj->info->spawnstate])

  00188	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0018b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00191	6b 51 5c 1c	 imul	 edx, DWORD PTR [ecx+92], 28
  00195	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  0019b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0019e	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  001a1	74 66		 je	 SHORT $LN13@P_Boss2Thi
  001a3	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  001a8	69 c8 36 01 00
	00		 imul	 ecx, eax, 310
  001ae	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  001b4	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001b7	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  001ba	74 4d		 je	 SHORT $LN13@P_Boss2Thi
  001bc	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  001c1	69 c8 37 01 00
	00		 imul	 ecx, eax, 311
  001c7	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  001cd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001d0	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  001d3	74 34		 je	 SHORT $LN13@P_Boss2Thi
  001d5	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  001da	69 c8 38 01 00
	00		 imul	 ecx, eax, 312
  001e0	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  001e6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001e9	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  001ec	74 1b		 je	 SHORT $LN13@P_Boss2Thi
  001ee	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001f1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001f7	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  001fb	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00201	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00204	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00207	75 1e		 jne	 SHORT $LN12@P_Boss2Thi
$LN13@P_Boss2Thi:

; 3299 : 		{
; 3300 : 			mobj->flags &= ~MF_NOGRAVITY;

  00209	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0020c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0020f	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00215	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00218	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3301 : 			A_Boss2Pogo(mobj);

  0021b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 _A_Boss2Pogo
  00224	83 c4 04	 add	 esp, 4
$LN12@P_Boss2Thi:

; 3302 : 		}
; 3303 : 	}
; 3304 : }

  00227	5f		 pop	 edi
  00228	5e		 pop	 esi
  00229	5b		 pop	 ebx
  0022a	8b e5		 mov	 esp, ebp
  0022c	5d		 pop	 ebp
  0022d	c3		 ret	 0
_P_Boss2Thinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Boss1Thinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_Boss1Thinker PROC					; COMDAT

; 3199 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3200 : 	if (mobj->state->nextstate == mobj->info->spawnstate && mobj->tics == 1)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00012	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00018	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0001b	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0001e	75 30		 jne	 SHORT $LN2@P_Boss1Thi
  00020	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00023	83 78 58 01	 cmp	 DWORD PTR [eax+88], 1
  00027	75 27		 jne	 SHORT $LN2@P_Boss1Thi

; 3201 : 	{
; 3202 : 		mobj->flags2 &= ~MF2_FRET;

  00029	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00032	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00035	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00038	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3203 : 		mobj->flags &= ~MF_TRANSLATION;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00041	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00044	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  0004a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0004d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN2@P_Boss1Thi:

; 3204 : 	}
; 3205 : 
; 3206 : 	if (!mobj->tracer)

  00050	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00053	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0005a	75 16		 jne	 SHORT $LN3@P_Boss1Thi

; 3207 : 	{
; 3208 : 		var1 = 0;

  0005c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _var1, 0

; 3209 : 		A_BossJetFume(mobj);

  00066	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _A_BossJetFume
  0006f	83 c4 04	 add	 esp, 4
$LN3@P_Boss1Thi:

; 3210 : 	}
; 3211 : 
; 3212 : 	if (!mobj->target || !(mobj->target->flags & MF_SHOOTABLE))

  00072	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00075	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0007c	74 15		 je	 SHORT $LN5@P_Boss1Thi
  0007e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00081	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00087	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0008a	83 e2 04	 and	 edx, 4
  0008d	0f 85 8a 00 00
	00		 jne	 $LN4@P_Boss1Thi
$LN5@P_Boss1Thi:

; 3213 : 	{
; 3214 : 		if (mobj->health <= 0)

  00093	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00096	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0009d	7f 3f		 jg	 SHORT $LN6@P_Boss1Thi

; 3215 : 		{
; 3216 : 			if (P_Look4Players(mobj, true) && mobj->info->mass) // Bid farewell!

  0009f	6a 01		 push	 1
  000a1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _P_Look4Players
  000aa	83 c4 08	 add	 esp, 8
  000ad	85 c0		 test	 eax, eax
  000af	74 28		 je	 SHORT $LN7@P_Boss1Thi
  000b1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b4	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ba	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  000be	74 19		 je	 SHORT $LN7@P_Boss1Thi

; 3217 : 				S_StartSound(mobj, mobj->info->mass);

  000c0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c3	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000c9	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000cc	52		 push	 edx
  000cd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _S_StartSound
  000d6	83 c4 08	 add	 esp, 8
$LN7@P_Boss1Thi:

; 3218 : 			return;

  000d9	e9 e9 00 00 00	 jmp	 $LN10@P_Boss1Thi
$LN6@P_Boss1Thi:

; 3219 : 		}
; 3220 : 
; 3221 : 		// look for a new target
; 3222 : 		if (P_Look4Players(mobj, true) && mobj->info->seesound)

  000de	6a 01		 push	 1
  000e0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _P_Look4Players
  000e9	83 c4 08	 add	 esp, 8
  000ec	85 c0		 test	 eax, eax
  000ee	74 28		 je	 SHORT $LN8@P_Boss1Thi
  000f0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f3	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000f9	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  000fd	74 19		 je	 SHORT $LN8@P_Boss1Thi

; 3223 : 			S_StartSound(mobj, mobj->info->seesound);

  000ff	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00102	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00108	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0010b	52		 push	 edx
  0010c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _S_StartSound
  00115	83 c4 08	 add	 esp, 8
$LN8@P_Boss1Thi:

; 3224 : 
; 3225 : 		return;

  00118	e9 aa 00 00 00	 jmp	 $LN10@P_Boss1Thi
$LN4@P_Boss1Thi:

; 3226 : 	}
; 3227 : 
; 3228 : 	if (mobj->state == &states[mobj->info->spawnstate])

  0011d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00120	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00126	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  0012a	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00130	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00133	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00136	75 0c		 jne	 SHORT $LN9@P_Boss1Thi

; 3229 : 		A_Boss1Chase(mobj);

  00138	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 _A_Boss1Chase
  00141	83 c4 04	 add	 esp, 4
$LN9@P_Boss1Thi:

; 3230 : 
; 3231 : 	if (mobj->state == &states[mobj->info->meleestate]
; 3232 : 		|| (mobj->state == &states[mobj->info->missilestate]

  00144	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00147	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0014d	6b 51 28 1c	 imul	 edx, DWORD PTR [ecx+40], 28
  00151	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00157	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015a	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0015d	74 32		 je	 SHORT $LN11@P_Boss1Thi
  0015f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00162	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00168	6b 51 2c 1c	 imul	 edx, DWORD PTR [ecx+44], 28
  0016c	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00172	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00175	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00178	75 4d		 jne	 SHORT $LN10@P_Boss1Thi
  0017a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0017d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00183	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00186	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0018c	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  0018f	7e 36		 jle	 SHORT $LN10@P_Boss1Thi
$LN11@P_Boss1Thi:

; 3233 : 		&& mobj->health > mobj->info->damage))
; 3234 : 	{
; 3235 : 		mobj->angle = R_PointToAngle2(mobj->x, mobj->y, mobj->target->x, mobj->target->y);

  00191	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00194	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0019a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0019d	52		 push	 edx
  0019e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001a1	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001a7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001aa	52		 push	 edx
  001ab	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ae	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001b1	51		 push	 ecx
  001b2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001b5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 _R_PointToAngle2
  001be	83 c4 10	 add	 esp, 16			; 00000010H
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001c4	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN10@P_Boss1Thi:

; 3236 : 	}
; 3237 : }

  001c7	5f		 pop	 edi
  001c8	5e		 pop	 esi
  001c9	5b		 pop	 ebx
  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c3		 ret	 0
_P_Boss1Thinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_GenericBossThinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_GenericBossThinker PROC				; COMDAT

; 3162 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3163 : 	if (mobj->state->nextstate == mobj->info->spawnstate && mobj->tics == 1)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00012	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00018	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0001b	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0001e	75 30		 jne	 SHORT $LN2@P_GenericB
  00020	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00023	83 78 58 01	 cmp	 DWORD PTR [eax+88], 1
  00027	75 27		 jne	 SHORT $LN2@P_GenericB

; 3164 : 	{
; 3165 : 		mobj->flags2 &= ~MF2_FRET;

  00029	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00032	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00035	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00038	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3166 : 		mobj->flags &= ~MF_TRANSLATION;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00041	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00044	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  0004a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0004d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN2@P_GenericB:

; 3167 : 	}
; 3168 : 
; 3169 : 	if (!mobj->target || !(mobj->target->flags & MF_SHOOTABLE))

  00050	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00053	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0005a	74 15		 je	 SHORT $LN4@P_GenericB
  0005c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0005f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00065	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00068	83 e2 04	 and	 edx, 4
  0006b	0f 85 8a 00 00
	00		 jne	 $LN3@P_GenericB
$LN4@P_GenericB:

; 3170 : 	{
; 3171 : 		if (mobj->health <= 0)

  00071	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00074	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0007b	7f 3f		 jg	 SHORT $LN5@P_GenericB

; 3172 : 		{
; 3173 : 			// look for a new target
; 3174 : 			if (P_Look4Players(mobj, true) && mobj->info->mass) // Bid farewell!

  0007d	6a 01		 push	 1
  0007f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _P_Look4Players
  00088	83 c4 08	 add	 esp, 8
  0008b	85 c0		 test	 eax, eax
  0008d	74 28		 je	 SHORT $LN6@P_GenericB
  0008f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00092	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00098	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  0009c	74 19		 je	 SHORT $LN6@P_GenericB

; 3175 : 				S_StartSound(mobj, mobj->info->mass);

  0009e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000a7	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000aa	52		 push	 edx
  000ab	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _S_StartSound
  000b4	83 c4 08	 add	 esp, 8
$LN6@P_GenericB:

; 3176 : 			return;

  000b7	e9 e9 00 00 00	 jmp	 $LN9@P_GenericB
$LN5@P_GenericB:

; 3177 : 		}
; 3178 : 
; 3179 : 		// look for a new target
; 3180 : 		if (P_Look4Players(mobj, true) && mobj->info->seesound)

  000bc	6a 01		 push	 1
  000be	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _P_Look4Players
  000c7	83 c4 08	 add	 esp, 8
  000ca	85 c0		 test	 eax, eax
  000cc	74 28		 je	 SHORT $LN7@P_GenericB
  000ce	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d7	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  000db	74 19		 je	 SHORT $LN7@P_GenericB

; 3181 : 			S_StartSound(mobj, mobj->info->seesound);

  000dd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e9	52		 push	 edx
  000ea	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 _S_StartSound
  000f3	83 c4 08	 add	 esp, 8
$LN7@P_GenericB:

; 3182 : 
; 3183 : 		return;

  000f6	e9 aa 00 00 00	 jmp	 $LN9@P_GenericB
$LN3@P_GenericB:

; 3184 : 	}
; 3185 : 
; 3186 : 	if (mobj->state == &states[mobj->info->spawnstate])

  000fb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000fe	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00104	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  00108	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  0010e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00111	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00114	75 0c		 jne	 SHORT $LN8@P_GenericB

; 3187 : 		A_Boss1Chase(mobj);

  00116	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 _A_Boss1Chase
  0011f	83 c4 04	 add	 esp, 4
$LN8@P_GenericB:

; 3188 : 
; 3189 : 	if (mobj->state == &states[mobj->info->meleestate]
; 3190 : 		|| (mobj->state == &states[mobj->info->missilestate]

  00122	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00125	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0012b	6b 51 28 1c	 imul	 edx, DWORD PTR [ecx+40], 28
  0012f	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00135	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00138	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0013b	74 32		 je	 SHORT $LN10@P_GenericB
  0013d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00140	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00146	6b 51 2c 1c	 imul	 edx, DWORD PTR [ecx+44], 28
  0014a	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00150	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00153	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00156	75 4d		 jne	 SHORT $LN9@P_GenericB
  00158	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00161	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00164	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0016a	3b 41 50	 cmp	 eax, DWORD PTR [ecx+80]
  0016d	7e 36		 jle	 SHORT $LN9@P_GenericB
$LN10@P_GenericB:

; 3191 : 		&& mobj->health > mobj->info->damage))
; 3192 : 	{
; 3193 : 		mobj->angle = R_PointToAngle2(mobj->x, mobj->y, mobj->target->x, mobj->target->y);

  0016f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00172	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00178	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0017b	52		 push	 edx
  0017c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0017f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00185	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00188	52		 push	 edx
  00189	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0018c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0018f	51		 push	 ecx
  00190	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00193	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 _R_PointToAngle2
  0019c	83 c4 10	 add	 esp, 16			; 00000010H
  0019f	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001a2	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN9@P_GenericB:

; 3194 : 	}
; 3195 : }

  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	5b		 pop	 ebx
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
_P_GenericBossThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Look4Players
_TEXT	SEGMENT
tv89 = -92						; size = 4
_dist$ = -24						; size = 4
_an$ = -20						; size = 4
_sector$ = -16						; size = 4
_player$ = -12						; size = 4
_c$ = -8						; size = 4
_stop$ = -4						; size = 4
_actor$ = 8						; size = 4
_allaround$ = 12					; size = 4
_P_Look4Players PROC					; COMDAT

; 3072 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3073 : 	INT32 stop, c = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0

; 3074 : 	player_t *player;
; 3075 : 	sector_t *sector;
; 3076 : 	angle_t an;
; 3077 : 	fixed_t dist;
; 3078 : 
; 3079 : 	sector = actor->subsector->sector;

  00010	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00013	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	89 55 f0	 mov	 DWORD PTR _sector$[ebp], edx

; 3080 : 
; 3081 : 	// first time init, this allow minimum lastlook changes
; 3082 : 	if (actor->lastlook < 0)

  0001b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0001e	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00025	7d 11		 jge	 SHORT $LN5@P_Look4Pla

; 3083 : 		actor->lastlook = P_Random();

  00027	e8 00 00 00 00	 call	 _P_Random
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00032	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
$LN5@P_Look4Pla:

; 3084 : 
; 3085 : 	actor->lastlook %= MAXPLAYERS;

  00038	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0003b	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00041	81 e1 1f 00 00
	80		 and	 ecx, -2147483617	; 8000001fH
  00047	79 05		 jns	 SHORT $LN16@P_Look4Pla
  00049	49		 dec	 ecx
  0004a	83 c9 e0	 or	 ecx, -32		; ffffffe0H
  0004d	41		 inc	 ecx
$LN16@P_Look4Pla:
  0004e	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00051	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx

; 3086 : 
; 3087 : 	stop = (actor->lastlook-1) & PLAYERSMASK;

  00057	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0005a	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00060	83 e9 01	 sub	 ecx, 1
  00063	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00066	89 4d fc	 mov	 DWORD PTR _stop$[ebp], ecx
  00069	eb 18		 jmp	 SHORT $LN4@P_Look4Pla
$LN2@P_Look4Pla:

; 3088 : 
; 3089 : 	for (; ; actor->lastlook = (actor->lastlook+1) & PLAYERSMASK)

  0006b	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0006e	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00074	83 c1 01	 add	 ecx, 1
  00077	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0007a	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0007d	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx
$LN4@P_Look4Pla:

; 3090 : 	{
; 3091 : 		// done looking
; 3092 : 		if (actor->lastlook == stop)

  00083	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00086	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  0008c	3b 4d fc	 cmp	 ecx, DWORD PTR _stop$[ebp]
  0008f	75 07		 jne	 SHORT $LN6@P_Look4Pla

; 3093 : 			return false;

  00091	33 c0		 xor	 eax, eax
  00093	e9 1e 01 00 00	 jmp	 $LN3@P_Look4Pla
$LN6@P_Look4Pla:

; 3094 : 
; 3095 : 		if (!playeringame[actor->lastlook])

  00098	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0009b	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  000a1	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[ecx*4], 0
  000a9	75 02		 jne	 SHORT $LN7@P_Look4Pla

; 3096 : 			continue;

  000ab	eb be		 jmp	 SHORT $LN2@P_Look4Pla
$LN7@P_Look4Pla:

; 3097 : 
; 3098 : 		if (c++ == 2)

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000b0	89 45 a4	 mov	 DWORD PTR tv89[ebp], eax
  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  000b6	83 c1 01	 add	 ecx, 1
  000b9	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  000bc	83 7d a4 02	 cmp	 DWORD PTR tv89[ebp], 2
  000c0	75 07		 jne	 SHORT $LN8@P_Look4Pla

; 3099 : 			return false;

  000c2	33 c0		 xor	 eax, eax
  000c4	e9 ed 00 00 00	 jmp	 $LN3@P_Look4Pla
$LN8@P_Look4Pla:

; 3100 : 
; 3101 : 		player = &players[actor->lastlook];

  000c9	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  000cc	69 88 a8 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR [eax+168], 508
  000d6	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  000dc	89 4d f4	 mov	 DWORD PTR _player$[ebp], ecx

; 3102 : 
; 3103 : 		if (player->health <= 0)

  000df	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  000e2	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  000e6	7f 02		 jg	 SHORT $LN9@P_Look4Pla

; 3104 : 			continue; // dead

  000e8	eb 81		 jmp	 SHORT $LN2@P_Look4Pla
$LN9@P_Look4Pla:

; 3105 : 
; 3106 : 		if (!player->mo)

  000ea	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  000ed	83 38 00	 cmp	 DWORD PTR [eax], 0
  000f0	75 05		 jne	 SHORT $LN10@P_Look4Pla

; 3107 : 			continue;

  000f2	e9 74 ff ff ff	 jmp	 $LN2@P_Look4Pla
$LN10@P_Look4Pla:

; 3108 : 
; 3109 : 		if (!P_CheckSight(actor, player->mo))

  000f7	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fc	51		 push	 ecx
  000fd	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 _P_CheckSight
  00106	83 c4 08	 add	 esp, 8
  00109	85 c0		 test	 eax, eax
  0010b	75 05		 jne	 SHORT $LN11@P_Look4Pla

; 3110 : 			continue; // out of sight

  0010d	e9 59 ff ff ff	 jmp	 $LN2@P_Look4Pla
$LN11@P_Look4Pla:

; 3111 : 
; 3112 : 		if (!allaround)

  00112	83 7d 0c 00	 cmp	 DWORD PTR _allaround$[ebp], 0
  00116	75 7a		 jne	 SHORT $LN14@P_Look4Pla

; 3113 : 		{
; 3114 : 			an = R_PointToAngle2(actor->x, actor->y, player->mo->x, player->mo->y) - actor->angle;

  00118	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0011b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00120	52		 push	 edx
  00121	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00124	8b 08		 mov	 ecx, DWORD PTR [eax]
  00126	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00129	52		 push	 edx
  0012a	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  0012d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00130	51		 push	 ecx
  00131	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00134	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 _R_PointToAngle2
  0013d	83 c4 10	 add	 esp, 16			; 00000010H
  00140	8b 4d 08	 mov	 ecx, DWORD PTR _actor$[ebp]
  00143	2b 41 24	 sub	 eax, DWORD PTR [ecx+36]
  00146	89 45 ec	 mov	 DWORD PTR _an$[ebp], eax

; 3115 : 
; 3116 : 			if (an > ANGLE_90 && an < ANGLE_270)

  00149	81 7d ec 00 00
	00 40		 cmp	 DWORD PTR _an$[ebp], 1073741824 ; 40000000H
  00150	76 40		 jbe	 SHORT $LN14@P_Look4Pla
  00152	81 7d ec 00 00
	00 c0		 cmp	 DWORD PTR _an$[ebp], -1073741824 ; c0000000H
  00159	73 37		 jae	 SHORT $LN14@P_Look4Pla

; 3117 : 			{
; 3118 : 				dist = P_AproxDistance(player->mo->x - actor->x, player->mo->y - actor->y);

  0015b	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  0015e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00160	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  00163	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00166	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00169	50		 push	 eax
  0016a	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  0016d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016f	8b 45 08	 mov	 eax, DWORD PTR _actor$[ebp]
  00172	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00175	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 _P_AproxDistance
  0017e	83 c4 08	 add	 esp, 8
  00181	89 45 e8	 mov	 DWORD PTR _dist$[ebp], eax

; 3119 : 				// if real close, react anyway
; 3120 : 				if (dist > MELEERANGE)

  00184	81 7d e8 00 00
	40 00		 cmp	 DWORD PTR _dist$[ebp], 4194304 ; 00400000H
  0018b	7e 05		 jle	 SHORT $LN14@P_Look4Pla

; 3121 : 					continue; // behind back

  0018d	e9 d9 fe ff ff	 jmp	 $LN2@P_Look4Pla
$LN14@P_Look4Pla:

; 3122 : 			}
; 3123 : 		}
; 3124 : 
; 3125 : 		P_SetTarget(&actor->target, player->mo);

  00192	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00195	8b 08		 mov	 ecx, DWORD PTR [eax]
  00197	51		 push	 ecx
  00198	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  0019b	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  001a1	52		 push	 edx
  001a2	e8 00 00 00 00	 call	 _P_SetTarget
  001a7	83 c4 08	 add	 esp, 8

; 3126 : 		return true;

  001aa	b8 01 00 00 00	 mov	 eax, 1
  001af	eb 05		 jmp	 SHORT $LN3@P_Look4Pla

; 3127 : 	}

  001b1	e9 b5 fe ff ff	 jmp	 $LN2@P_Look4Pla
$LN3@P_Look4Pla:

; 3128 : 
; 3129 : 	//return false;
; 3130 : }

  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
_P_Look4Players ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RingThinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_RingThinker PROC					; COMDAT

; 3043 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3044 : 	if (mobj->momx || mobj->momy)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00010	75 09		 jne	 SHORT $LN3@P_RingThin
  00012	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00015	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00019	74 1a		 je	 SHORT $LN4@P_RingThin
$LN3@P_RingThin:

; 3045 : 	{
; 3046 : 		P_RingXYMovement(mobj);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _P_RingXYMovement
  00024	83 c4 04	 add	 esp, 4

; 3047 : 
; 3048 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  00027	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002a	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  00031	75 02		 jne	 SHORT $LN4@P_RingThin

; 3049 : 			return; // mobj was removed

  00033	eb 49		 jmp	 SHORT $LN1@P_RingThin
$LN4@P_RingThin:

; 3050 : 	}
; 3051 : 
; 3052 : 	// always do the gravity bit now, that's simpler
; 3053 : 	// BUT CheckPosition only if wasn't done before.
; 3054 : 	if (mobj->momz)

  00035	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00038	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0003c	74 34		 je	 SHORT $LN6@P_RingThin

; 3055 : 	{
; 3056 : 		P_RingZMovement(mobj);

  0003e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _P_RingZMovement
  00047	83 c4 04	 add	 esp, 4

; 3057 : 		P_CheckPosition(mobj, mobj->x, mobj->y); // Need this to pick up objects!

  0004a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00050	51		 push	 ecx
  00051	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00054	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 _P_CheckPosition
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3058 : 
; 3059 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  00064	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00067	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  0006e	75 02		 jne	 SHORT $LN6@P_RingThin

; 3060 : 			return; // mobj was removed

  00070	eb 0c		 jmp	 SHORT $LN1@P_RingThin
$LN6@P_RingThin:

; 3061 : 	}
; 3062 : 
; 3063 : 	P_CycleMobjState(mobj);

  00072	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _P_CycleMobjState
  0007b	83 c4 04	 add	 esp, 4
$LN1@P_RingThin:

; 3064 : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
_P_RingThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _CalculatePrecipFloor
_TEXT	SEGMENT
_rover$1 = -8						; size = 4
_mobjsecsubsec$ = -4					; size = 4
_mobj$ = 8						; size = 4
_CalculatePrecipFloor PROC				; COMDAT

; 2931 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2932 : 	// recalculate floorz each time
; 2933 : 	const sector_t *mobjsecsubsec;
; 2934 : 	if (mobj && mobj->subsector && mobj->subsector->sector)

  00009	83 7d 08 00	 cmp	 DWORD PTR _mobj$[ebp], 0
  0000d	74 21		 je	 SHORT $LN5@CalculateP
  0000f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00012	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  00016	74 18		 je	 SHORT $LN5@CalculateP
  00018	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0001e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00021	74 0d		 je	 SHORT $LN5@CalculateP

; 2935 : 		mobjsecsubsec = mobj->subsector->sector;

  00023	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00026	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	89 55 fc	 mov	 DWORD PTR _mobjsecsubsec$[ebp], edx
  0002e	eb 02		 jmp	 SHORT $LN6@CalculateP
$LN5@CalculateP:

; 2936 : 	else
; 2937 : 		return;

  00030	eb 77		 jmp	 SHORT $LN3@CalculateP
$LN6@CalculateP:

; 2938 : 	mobj->floorz = mobjsecsubsec->floorheight;

  00032	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _mobjsecsubsec$[ebp]
  00038	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003a	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 2939 : 	if (mobjsecsubsec->ffloors)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _mobjsecsubsec$[ebp]
  00040	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00047	74 60		 je	 SHORT $LN3@CalculateP

; 2940 : 	{
; 2941 : 		ffloor_t *rover;
; 2942 : 
; 2943 : 		for (rover = mobjsecsubsec->ffloors; rover; rover = rover->next)

  00049	8b 45 fc	 mov	 eax, DWORD PTR _mobjsecsubsec$[ebp]
  0004c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00052	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
  00055	eb 09		 jmp	 SHORT $LN4@CalculateP
$LN2@CalculateP:
  00057	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0005a	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0005d	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@CalculateP:
  00060	83 7d f8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  00064	74 43		 je	 SHORT $LN3@CalculateP

; 2944 : 		{
; 2945 : 			// If it exists, it'll get rained on.
; 2946 : 			if (!(rover->flags & FF_EXISTS))

  00066	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00069	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0006c	83 e1 01	 and	 ecx, 1
  0006f	75 02		 jne	 SHORT $LN8@CalculateP

; 2947 : 				continue;

  00071	eb e4		 jmp	 SHORT $LN2@CalculateP
$LN8@CalculateP:

; 2948 : 
; 2949 : 			if (!(rover->flags & FF_BLOCKOTHERS) && !(rover->flags & FF_SWIMMABLE))

  00073	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00076	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00079	83 e1 04	 and	 ecx, 4
  0007c	75 0d		 jne	 SHORT $LN9@CalculateP
  0007e	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00081	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00084	83 e1 20	 and	 ecx, 32			; 00000020H
  00087	75 02		 jne	 SHORT $LN9@CalculateP

; 2950 : 				continue;

  00089	eb cc		 jmp	 SHORT $LN2@CalculateP
$LN9@CalculateP:

; 2951 : 
; 2952 : 			if (*rover->topheight > mobj->floorz)

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00093	8b 01		 mov	 eax, DWORD PTR [ecx]
  00095	3b 42 38	 cmp	 eax, DWORD PTR [edx+56]
  00098	7e 0d		 jle	 SHORT $LN10@CalculateP

; 2953 : 				mobj->floorz = *rover->topheight;

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000a2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a4	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN10@CalculateP:

; 2954 : 		}

  000a7	eb ae		 jmp	 SHORT $LN2@CalculateP
$LN3@CalculateP:

; 2955 : 	}
; 2956 : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_CalculatePrecipFloor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_PlayerMobjThinker
_TEXT	SEGMENT
tv205 = -100						; size = 4
_onmo$1 = -32						; size = 4
_rover$2 = -28						; size = 4
_rover$3 = -24						; size = 4
_roverfound$4 = -20					; size = 4
_waterbottom$5 = -16					; size = 4
_watertop$6 = -12					; size = 4
_rover$7 = -8						; size = 4
_node$ = -4						; size = 4
_mobj$ = 8						; size = 4
_P_PlayerMobjThinker PROC				; COMDAT

; 2747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2748 : 	msecnode_t *node;
; 2749 : 
; 2750 : 	// Make sure player shows dead
; 2751 : 	if (mobj->health <= 0)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00013	7f 61		 jg	 SHORT $LN20@P_PlayerMo

; 2752 : 	{
; 2753 : 		if (mobj->state == &states[S_DISS])

  00015	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0001a	69 c8 4f 06 00
	00		 imul	 ecx, eax, 1615
  00020	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00026	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00029	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0002c	75 11		 jne	 SHORT $LN21@P_PlayerMo

; 2754 : 		{
; 2755 : 			P_RemoveMobj(mobj);

  0002e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _P_RemoveMobj
  00037	83 c4 04	 add	 esp, 4

; 2756 : 			return;

  0003a	e9 55 06 00 00	 jmp	 $LN56@P_PlayerMo
$LN21@P_PlayerMo:

; 2757 : 		}
; 2758 : 
; 2759 : 		P_SetPlayerMobjState(mobj, S_PLAY_DIE3);

  0003f	6a 24		 push	 36			; 00000024H
  00041	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0004a	83 c4 08	 add	 esp, 8

; 2760 : 		mobj->flags2 &= ~MF2_DONTDRAW;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00050	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00056	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  0005c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0005f	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2761 : 		P_PlayerZMovement(mobj);

  00065	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _P_PlayerZMovement
  0006e	83 c4 04	 add	 esp, 4

; 2762 : 		return;

  00071	e9 1e 06 00 00	 jmp	 $LN56@P_PlayerMo
$LN20@P_PlayerMo:

; 2763 : 	}
; 2764 : 
; 2765 : 	P_MobjCheckWater(mobj);

  00076	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _P_MobjCheckWater
  0007f	83 c4 04	 add	 esp, 4

; 2766 : 
; 2767 : 	// momentum movement
; 2768 : 	mobj->eflags &= ~MFE_JUSTSTEPPEDDOWN;

  00082	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00085	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0008b	83 e1 ef	 and	 ecx, -17		; ffffffefH
  0008e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00091	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 2769 : 
; 2770 : 	// Zoom tube
; 2771 : 	if (mobj->tracer && mobj->tracer->type == MT_TUBEWAYPOINT)

  00097	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0009a	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  000a1	0f 84 81 00 00
	00		 je	 $LN22@P_PlayerMo
  000a7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000aa	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000b0	81 79 7c 06 01
	00 00		 cmp	 DWORD PTR [ecx+124], 262 ; 00000106H
  000b7	75 6f		 jne	 SHORT $LN22@P_PlayerMo

; 2772 : 	{
; 2773 : 		P_UnsetThingPosition(mobj);

  000b9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  000c2	83 c4 04	 add	 esp, 4

; 2774 : 		mobj->x += mobj->momx;

  000c5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000cb	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000ce	03 4a 48	 add	 ecx, DWORD PTR [edx+72]
  000d1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d4	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2775 : 		mobj->y += mobj->momy;

  000d7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000da	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000dd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000e0	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  000e3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e6	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2776 : 		mobj->z += mobj->momz;

  000e9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ec	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ef	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000f2	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  000f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f8	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2777 : 		P_SetThingPosition(mobj);

  000fb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 _P_SetThingPosition
  00104	83 c4 04	 add	 esp, 4

; 2778 : 		P_CheckPosition(mobj, mobj->x, mobj->y);

  00107	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0010a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0010d	51		 push	 ecx
  0010e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00111	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00114	50		 push	 eax
  00115	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 _P_CheckPosition
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2779 : 		goto animonly;

  00121	e9 37 05 00 00	 jmp	 $animonly$60

; 2780 : 	}

  00126	eb 4e		 jmp	 SHORT $LN24@P_PlayerMo
$LN22@P_PlayerMo:

; 2781 : 	else if (mobj->player && (mobj->player->pflags & PF_MACESPIN) && mobj->tracer)

  00128	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0012b	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00132	74 42		 je	 SHORT $LN24@P_PlayerMo
  00134	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00137	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0013d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00143	81 e2 00 00 10
	00		 and	 edx, 1048576		; 00100000H
  00149	74 2b		 je	 SHORT $LN24@P_PlayerMo
  0014b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0014e	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00155	74 1f		 je	 SHORT $LN24@P_PlayerMo

; 2782 : 	{
; 2783 : 		P_CheckPosition(mobj, mobj->x, mobj->y);

  00157	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0015d	51		 push	 ecx
  0015e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00161	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00164	50		 push	 eax
  00165	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00168	51		 push	 ecx
  00169	e8 00 00 00 00	 call	 _P_CheckPosition
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2784 : 		goto animonly;

  00171	e9 e7 04 00 00	 jmp	 $animonly$60
$LN24@P_PlayerMo:

; 2785 : 	}
; 2786 : 
; 2787 : 	// Needed for gravity boots
; 2788 : 	P_CheckGravity(mobj, false);

  00176	6a 00		 push	 0
  00178	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _P_CheckGravity
  00181	83 c4 08	 add	 esp, 8

; 2789 : 
; 2790 : 	if (mobj->momx || mobj->momy)

  00184	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00187	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0018b	75 09		 jne	 SHORT $LN27@P_PlayerMo
  0018d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00190	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00194	74 1f		 je	 SHORT $LN25@P_PlayerMo
$LN27@P_PlayerMo:

; 2791 : 	{
; 2792 : 		P_XYMovement(mobj);

  00196	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 _P_XYMovement
  0019f	83 c4 04	 add	 esp, 4

; 2793 : 
; 2794 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  001a2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001a5	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  001ac	75 05		 jne	 SHORT $LN28@P_PlayerMo

; 2795 : 			return; // mobj was removed

  001ae	e9 e1 04 00 00	 jmp	 $LN56@P_PlayerMo
$LN28@P_PlayerMo:

; 2796 : 	}

  001b3	eb 1c		 jmp	 SHORT $LN26@P_PlayerMo
$LN25@P_PlayerMo:

; 2797 : 	else
; 2798 : 		P_TryMove(mobj, mobj->x, mobj->y, true);

  001b5	6a 01		 push	 1
  001b7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ba	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001bd	51		 push	 ecx
  001be	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001c1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001c4	50		 push	 eax
  001c5	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001c8	51		 push	 ecx
  001c9	e8 00 00 00 00	 call	 _P_TryMove
  001ce	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@P_PlayerMo:

; 2799 : 
; 2800 : 	if (!(netgame && mobj->player && mobj->player->spectator))

  001d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  001d8	74 24		 je	 SHORT $LN30@P_PlayerMo
  001da	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001dd	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  001e4	74 18		 je	 SHORT $LN30@P_PlayerMo
  001e6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001e9	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001ef	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  001f6	85 d2		 test	 edx, edx
  001f8	0f 85 01 01 00
	00		 jne	 $LN3@P_PlayerMo
$LN30@P_PlayerMo:

; 2801 : 	{
; 2802 : 		// Crumbling platforms
; 2803 : 		for (node = mobj->touching_sectorlist; node; node = node->m_snext)

  001fe	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00201	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00204	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
  00207	eb 09		 jmp	 SHORT $LN4@P_PlayerMo
$LN2@P_PlayerMo:
  00209	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  0020c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0020f	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
$LN4@P_PlayerMo:
  00212	83 7d fc 00	 cmp	 DWORD PTR _node$[ebp], 0
  00216	0f 84 e3 00 00
	00		 je	 $LN3@P_PlayerMo

; 2804 : 		{
; 2805 : 			ffloor_t *rover;
; 2806 : 
; 2807 : 			for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  0021f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00221	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00227	89 55 f8	 mov	 DWORD PTR _rover$7[ebp], edx
  0022a	eb 09		 jmp	 SHORT $LN7@P_PlayerMo
$LN5@P_PlayerMo:
  0022c	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  0022f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00232	89 4d f8	 mov	 DWORD PTR _rover$7[ebp], ecx
$LN7@P_PlayerMo:
  00235	83 7d f8 00	 cmp	 DWORD PTR _rover$7[ebp], 0
  00239	0f 84 bb 00 00
	00		 je	 $LN6@P_PlayerMo

; 2808 : 			{
; 2809 : 				if (!(rover->flags & FF_EXISTS))

  0023f	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  00242	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00245	83 e1 01	 and	 ecx, 1
  00248	75 02		 jne	 SHORT $LN31@P_PlayerMo

; 2810 : 					continue;

  0024a	eb e0		 jmp	 SHORT $LN5@P_PlayerMo
$LN31@P_PlayerMo:

; 2811 : 
; 2812 : 				if ((rover->flags & FF_CRUMBLE)
; 2813 : 					&& ((*rover->topheight == mobj->z && !(mobj->eflags & MFE_VERTICALFLIP))

  0024c	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  0024f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00252	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00258	0f 84 97 00 00
	00		 je	 $LN32@P_PlayerMo
  0025e	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  00261	8b 08		 mov	 ecx, DWORD PTR [eax]
  00263	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00266	8b 01		 mov	 eax, DWORD PTR [ecx]
  00268	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  0026b	75 0e		 jne	 SHORT $LN34@P_PlayerMo
  0026d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00270	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00276	83 e1 20	 and	 ecx, 32			; 00000020H
  00279	74 24		 je	 SHORT $LN33@P_PlayerMo
$LN34@P_PlayerMo:
  0027b	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  0027e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00281	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00284	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00287	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0028a	03 42 44	 add	 eax, DWORD PTR [edx+68]
  0028d	39 01		 cmp	 DWORD PTR [ecx], eax
  0028f	75 64		 jne	 SHORT $LN32@P_PlayerMo
  00291	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00294	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0029a	83 e1 20	 and	 ecx, 32			; 00000020H
  0029d	74 56		 je	 SHORT $LN32@P_PlayerMo
$LN33@P_PlayerMo:

; 2814 : 					|| (*rover->bottomheight == mobj->z + mobj->height && (mobj->eflags & MFE_VERTICALFLIP)))) // You nut.
; 2815 : 					EV_StartCrumble(rover->master->frontsector, rover, (rover->flags & FF_FLOATBOB), mobj->player, rover->alpha, !(rover->flags & FF_NORETURN));

  0029f	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  002a2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002a5	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  002ab	75 09		 jne	 SHORT $LN58@P_PlayerMo
  002ad	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv205[ebp], 1
  002b4	eb 07		 jmp	 SHORT $LN59@P_PlayerMo
$LN58@P_PlayerMo:
  002b6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv205[ebp], 0
$LN59@P_PlayerMo:
  002bd	8b 55 9c	 mov	 edx, DWORD PTR tv205[ebp]
  002c0	52		 push	 edx
  002c1	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  002c4	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002c7	51		 push	 ecx
  002c8	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  002cb	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  002d1	50		 push	 eax
  002d2	8b 4d f8	 mov	 ecx, DWORD PTR _rover$7[ebp]
  002d5	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  002d8	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  002de	52		 push	 edx
  002df	8b 45 f8	 mov	 eax, DWORD PTR _rover$7[ebp]
  002e2	50		 push	 eax
  002e3	8b 4d f8	 mov	 ecx, DWORD PTR _rover$7[ebp]
  002e6	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  002e9	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 _EV_StartCrumble
  002f2	83 c4 18	 add	 esp, 24			; 00000018H
$LN32@P_PlayerMo:

; 2816 : 			}

  002f5	e9 32 ff ff ff	 jmp	 $LN5@P_PlayerMo
$LN6@P_PlayerMo:

; 2817 : 		}

  002fa	e9 0a ff ff ff	 jmp	 $LN2@P_PlayerMo
$LN3@P_PlayerMo:

; 2818 : 	}
; 2819 : 
; 2820 : 	// Check for floating water platforms and bounce them
; 2821 : 	if (CheckForFloatBob && mobj->momz < 0)

  002ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CheckForFloatBob, 0
  00306	0f 84 7e 01 00
	00		 je	 $LN15@P_PlayerMo
  0030c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0030f	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00313	0f 8d 71 01 00
	00		 jge	 $LN15@P_PlayerMo

; 2822 : 	{
; 2823 : 		fixed_t watertop;
; 2824 : 		fixed_t waterbottom;
; 2825 : 		boolean roverfound;
; 2826 : 
; 2827 : 		watertop = waterbottom = 0;

  00319	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _waterbottom$5[ebp], 0
  00320	8b 45 f0	 mov	 eax, DWORD PTR _waterbottom$5[ebp]
  00323	89 45 f4	 mov	 DWORD PTR _watertop$6[ebp], eax

; 2828 : 		roverfound = false;

  00326	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _roverfound$4[ebp], 0

; 2829 : 
; 2830 : 		for (node = mobj->touching_sectorlist; node; node = node->m_snext)

  0032d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00330	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00333	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
  00336	eb 09		 jmp	 SHORT $LN10@P_PlayerMo
$LN8@P_PlayerMo:
  00338	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  0033b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0033e	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
$LN10@P_PlayerMo:
  00341	83 7d fc 00	 cmp	 DWORD PTR _node$[ebp], 0
  00345	74 67		 je	 SHORT $LN9@P_PlayerMo

; 2831 : 		{
; 2832 : 			if (node->m_sector->ffloors)

  00347	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  0034a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0034c	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  00353	74 57		 je	 SHORT $LN12@P_PlayerMo

; 2833 : 			{
; 2834 : 				ffloor_t *rover;
; 2835 : 				// Get water boundaries first
; 2836 : 				for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  00355	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00358	8b 08		 mov	 ecx, DWORD PTR [eax]
  0035a	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00360	89 55 e8	 mov	 DWORD PTR _rover$3[ebp], edx
  00363	eb 09		 jmp	 SHORT $LN13@P_PlayerMo
$LN11@P_PlayerMo:
  00365	8b 45 e8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00368	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0036b	89 4d e8	 mov	 DWORD PTR _rover$3[ebp], ecx
$LN13@P_PlayerMo:
  0036e	83 7d e8 00	 cmp	 DWORD PTR _rover$3[ebp], 0
  00372	74 38		 je	 SHORT $LN12@P_PlayerMo

; 2837 : 				{
; 2838 : 					if (!(rover->flags & FF_EXISTS))

  00374	8b 45 e8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00377	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0037a	83 e1 01	 and	 ecx, 1
  0037d	75 02		 jne	 SHORT $LN37@P_PlayerMo

; 2839 : 						continue;

  0037f	eb e4		 jmp	 SHORT $LN11@P_PlayerMo
$LN37@P_PlayerMo:

; 2840 : 
; 2841 : 					if (rover->flags & FF_SWIMMABLE) // Is there water?

  00381	8b 45 e8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00384	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00387	83 e1 20	 and	 ecx, 32			; 00000020H
  0038a	74 1e		 je	 SHORT $LN38@P_PlayerMo

; 2842 : 					{
; 2843 : 						watertop = *rover->topheight;

  0038c	8b 45 e8	 mov	 eax, DWORD PTR _rover$3[ebp]
  0038f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00391	8b 11		 mov	 edx, DWORD PTR [ecx]
  00393	89 55 f4	 mov	 DWORD PTR _watertop$6[ebp], edx

; 2844 : 						waterbottom = *rover->bottomheight;

  00396	8b 45 e8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00399	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0039c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0039e	89 55 f0	 mov	 DWORD PTR _waterbottom$5[ebp], edx

; 2845 : 						roverfound = true;

  003a1	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _roverfound$4[ebp], 1

; 2846 : 						break;

  003a8	eb 02		 jmp	 SHORT $LN12@P_PlayerMo
$LN38@P_PlayerMo:

; 2847 : 					}
; 2848 : 				}

  003aa	eb b9		 jmp	 SHORT $LN11@P_PlayerMo
$LN12@P_PlayerMo:

; 2849 : 			}
; 2850 : 		}

  003ac	eb 8a		 jmp	 SHORT $LN8@P_PlayerMo
$LN9@P_PlayerMo:

; 2851 : 		if (watertop)

  003ae	83 7d f4 00	 cmp	 DWORD PTR _watertop$6[ebp], 0
  003b2	0f 84 d2 00 00
	00		 je	 $LN15@P_PlayerMo

; 2852 : 		{
; 2853 : 			for (node = mobj->touching_sectorlist; node; node = node->m_snext)

  003b8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003bb	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003be	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
  003c1	eb 09		 jmp	 SHORT $LN16@P_PlayerMo
$LN14@P_PlayerMo:
  003c3	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  003c6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003c9	89 4d fc	 mov	 DWORD PTR _node$[ebp], ecx
$LN16@P_PlayerMo:
  003cc	83 7d fc 00	 cmp	 DWORD PTR _node$[ebp], 0
  003d0	0f 84 b4 00 00
	00		 je	 $LN15@P_PlayerMo

; 2854 : 			{
; 2855 : 				if (node->m_sector->ffloors)

  003d6	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  003d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003db	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  003e2	0f 84 9d 00 00
	00		 je	 $LN18@P_PlayerMo

; 2856 : 				{
; 2857 : 					ffloor_t *rover;
; 2858 : 					for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  003e8	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  003eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ed	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  003f3	89 55 e4	 mov	 DWORD PTR _rover$2[ebp], edx
  003f6	eb 09		 jmp	 SHORT $LN19@P_PlayerMo
$LN17@P_PlayerMo:
  003f8	8b 45 e4	 mov	 eax, DWORD PTR _rover$2[ebp]
  003fb	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  003fe	89 4d e4	 mov	 DWORD PTR _rover$2[ebp], ecx
$LN19@P_PlayerMo:
  00401	83 7d e4 00	 cmp	 DWORD PTR _rover$2[ebp], 0
  00405	74 7e		 je	 SHORT $LN18@P_PlayerMo

; 2859 : 					{
; 2860 : 						if (!(rover->flags & FF_EXISTS))

  00407	8b 45 e4	 mov	 eax, DWORD PTR _rover$2[ebp]
  0040a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0040d	83 e1 01	 and	 ecx, 1
  00410	75 02		 jne	 SHORT $LN41@P_PlayerMo

; 2861 : 							continue;

  00412	eb e4		 jmp	 SHORT $LN17@P_PlayerMo
$LN41@P_PlayerMo:

; 2862 : 
; 2863 : 						if (rover->flags & FF_FLOATBOB
; 2864 : 							&& *rover->topheight <= mobj->z+abs(mobj->momz)
; 2865 : 							&& *rover->topheight >= mobj->z-abs(mobj->momz)) // The player is landing on the cheese!

  00414	8b 45 e4	 mov	 eax, DWORD PTR _rover$2[ebp]
  00417	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0041a	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00420	74 5e		 je	 SHORT $LN42@P_PlayerMo
  00422	8b 45 e4	 mov	 eax, DWORD PTR _rover$2[ebp]
  00425	8b 30		 mov	 esi, DWORD PTR [eax]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0042a	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0042d	52		 push	 edx
  0042e	e8 00 00 00 00	 call	 _abs
  00433	83 c4 04	 add	 esp, 4
  00436	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00439	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0043c	39 06		 cmp	 DWORD PTR [esi], eax
  0043e	7f 40		 jg	 SHORT $LN42@P_PlayerMo
  00440	8b 45 e4	 mov	 eax, DWORD PTR _rover$2[ebp]
  00443	8b 30		 mov	 esi, DWORD PTR [eax]
  00445	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00448	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0044b	52		 push	 edx
  0044c	e8 00 00 00 00	 call	 _abs
  00451	83 c4 04	 add	 esp, 4
  00454	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00457	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0045a	2b d0		 sub	 edx, eax
  0045c	39 16		 cmp	 DWORD PTR [esi], edx
  0045e	7c 20		 jl	 SHORT $LN42@P_PlayerMo

; 2866 : 						{
; 2867 : 							// Initiate a 'bouncy' elevator function
; 2868 : 							// which slowly diminishes.
; 2869 : 							EV_BounceSector(rover->master->frontsector, mobj->momz, rover->master);

  00460	8b 45 e4	 mov	 eax, DWORD PTR _rover$2[ebp]
  00463	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00466	51		 push	 ecx
  00467	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0046a	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0046d	50		 push	 eax
  0046e	8b 4d e4	 mov	 ecx, DWORD PTR _rover$2[ebp]
  00471	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00474	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00477	50		 push	 eax
  00478	e8 00 00 00 00	 call	 _EV_BounceSector
  0047d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN42@P_PlayerMo:

; 2870 : 						}
; 2871 : 					}

  00480	e9 73 ff ff ff	 jmp	 $LN17@P_PlayerMo
$LN18@P_PlayerMo:

; 2872 : 				}
; 2873 : 			}

  00485	e9 39 ff ff ff	 jmp	 $LN14@P_PlayerMo
$LN15@P_PlayerMo:

; 2874 : 		} // Ugly ugly billions of braces! Argh!
; 2875 : 	}
; 2876 : 
; 2877 : 	// always do the gravity bit now, that's simpler
; 2878 : 	// BUT CheckPosition only if wasn't done before.
; 2879 : 	if (!(mobj->eflags & MFE_ONGROUND) || mobj->momz
; 2880 : 		|| ((mobj->eflags & MFE_VERTICALFLIP) && mobj->z + mobj->height != mobj->ceilingz)
; 2881 : 		|| (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->z != mobj->floorz))

  0048a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0048d	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00493	83 e1 01	 and	 ecx, 1
  00496	74 4f		 je	 SHORT $LN45@P_PlayerMo
  00498	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0049b	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0049f	75 46		 jne	 SHORT $LN45@P_PlayerMo
  004a1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004a4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  004aa	83 e1 20	 and	 ecx, 32			; 00000020H
  004ad	74 14		 je	 SHORT $LN46@P_PlayerMo
  004af	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004b2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004b5	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004b8	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  004bb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004be	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  004c1	75 24		 jne	 SHORT $LN45@P_PlayerMo
$LN46@P_PlayerMo:
  004c3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004c6	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  004cc	83 e1 20	 and	 ecx, 32			; 00000020H
  004cf	0f 85 73 01 00
	00		 jne	 $LN43@P_PlayerMo
  004d5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004d8	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  004db	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  004de	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  004e1	0f 84 61 01 00
	00		 je	 $LN43@P_PlayerMo
$LN45@P_PlayerMo:

; 2882 : 	{
; 2883 : 		mobj_t *onmo;
; 2884 : 		onmo = P_CheckOnmobj(mobj);

  004e7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 _P_CheckOnmobj
  004f0	83 c4 04	 add	 esp, 4
  004f3	89 45 e0	 mov	 DWORD PTR _onmo$1[ebp], eax

; 2885 : 		if (!onmo)

  004f6	83 7d e0 00	 cmp	 DWORD PTR _onmo$1[ebp], 0
  004fa	75 51		 jne	 SHORT $LN47@P_PlayerMo

; 2886 : 		{
; 2887 : 			P_PlayerZMovement(mobj);

  004fc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004ff	50		 push	 eax
  00500	e8 00 00 00 00	 call	 _P_PlayerZMovement
  00505	83 c4 04	 add	 esp, 4

; 2888 : 			P_CheckPosition(mobj, mobj->x, mobj->y); // Need this to pick up objects!

  00508	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0050b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0050e	51		 push	 ecx
  0050f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00512	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00515	50		 push	 eax
  00516	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00519	51		 push	 ecx
  0051a	e8 00 00 00 00	 call	 _P_CheckPosition
  0051f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2889 : 			if (mobj->flags & MF2_ONMOBJ)

  00522	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00525	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00528	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  0052e	74 18		 je	 SHORT $LN49@P_PlayerMo

; 2890 : 				mobj->flags2 &= ~MF2_ONMOBJ;

  00530	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00533	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00539	81 e1 ff f7 ff
	ff		 and	 ecx, -2049		; fffff7ffH
  0053f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00542	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN49@P_PlayerMo:

; 2891 : 		}

  00548	e9 eb 00 00 00	 jmp	 $LN52@P_PlayerMo
$LN47@P_PlayerMo:

; 2892 : 		else
; 2893 : 		{
; 2894 : 			if (mobj->momz < -8*FRACUNIT)

  0054d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00550	81 78 50 00 00
	f8 ff		 cmp	 DWORD PTR [eax+80], -524288 ; fff80000H
  00557	7d 10		 jge	 SHORT $LN50@P_PlayerMo

; 2895 : 				PlayerLandedOnThing(mobj, onmo);

  00559	8b 45 e0	 mov	 eax, DWORD PTR _onmo$1[ebp]
  0055c	50		 push	 eax
  0055d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00560	51		 push	 ecx
  00561	e8 00 00 00 00	 call	 _PlayerLandedOnThing
  00566	83 c4 08	 add	 esp, 8
$LN50@P_PlayerMo:

; 2896 : 			if (onmo->z + onmo->height - mobj->z <= FIXEDSCALE(MAXSTEPMOVE,mobj->scale))

  00569	8b 45 e0	 mov	 eax, DWORD PTR _onmo$1[ebp]
  0056c	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  0056f	8b 4d e0	 mov	 ecx, DWORD PTR _onmo$1[ebp]
  00572	03 71 44	 add	 esi, DWORD PTR [ecx+68]
  00575	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00578	2b 72 18	 sub	 esi, DWORD PTR [edx+24]
  0057b	68 00 00 18 00	 push	 1572864			; 00180000H
  00580	68 00 00 64 00	 push	 6553600			; 00640000H
  00585	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00588	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0058f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00592	51		 push	 ecx
  00593	e8 00 00 00 00	 call	 _FixedDiv
  00598	83 c4 08	 add	 esp, 8
  0059b	50		 push	 eax
  0059c	e8 00 00 00 00	 call	 _FixedMul
  005a1	83 c4 08	 add	 esp, 8
  005a4	3b f0		 cmp	 esi, eax
  005a6	0f 8f 82 00 00
	00		 jg	 $LN51@P_PlayerMo

; 2897 : 			{
; 2898 : 				mobj->player->viewheight -= onmo->z+onmo->height

  005ac	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005af	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  005b5	8b 55 e0	 mov	 edx, DWORD PTR _onmo$1[ebp]
  005b8	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  005bb	8b 55 e0	 mov	 edx, DWORD PTR _onmo$1[ebp]
  005be	03 42 44	 add	 eax, DWORD PTR [edx+68]
  005c1	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  005c4	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  005c7	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  005ca	2b c8		 sub	 ecx, eax
  005cc	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  005cf	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  005d5	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2899 : 					-mobj->z;
; 2900 : 				mobj->player->deltaviewheight =

  005d8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005db	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  005e1	ba 29 00 00 00	 mov	 edx, 41			; 00000029H
  005e6	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  005e9	c1 fa 03	 sar	 edx, 3
  005ec	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005ef	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  005f5	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 2901 : 					(VIEWHEIGHT-mobj->player->viewheight)>>3;
; 2902 : 				mobj->z = onmo->z+onmo->height;

  005f8	8b 45 e0	 mov	 eax, DWORD PTR _onmo$1[ebp]
  005fb	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  005fe	8b 55 e0	 mov	 edx, DWORD PTR _onmo$1[ebp]
  00601	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00604	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00607	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2903 : 				mobj->flags2 |= MF2_ONMOBJ;

  0060a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0060d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00613	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00619	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0061c	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2904 : 				mobj->momz = 0;

  00622	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00625	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 2905 : 			}

  0062c	eb 0a		 jmp	 SHORT $LN52@P_PlayerMo
$LN51@P_PlayerMo:

; 2906 : 			else // hit the bottom of the blocking mobj
; 2907 : 				mobj->momz = 0;

  0062e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00631	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN52@P_PlayerMo:

; 2908 : 		}
; 2909 : 
; 2910 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  00638	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0063b	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  00642	75 02		 jne	 SHORT $LN53@P_PlayerMo

; 2911 : 			return; // mobj was removed

  00644	eb 4e		 jmp	 SHORT $LN56@P_PlayerMo
$LN53@P_PlayerMo:

; 2912 : 	}

  00646	eb 15		 jmp	 SHORT $animonly$60
$LN43@P_PlayerMo:

; 2913 : 	else
; 2914 : 		mobj->eflags &= ~MFE_JUSTHITFLOOR;

  00648	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0064b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00651	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00654	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00657	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$animonly$60:

; 2915 : 
; 2916 : animonly:
; 2917 : 	// cycle through states,
; 2918 : 	// calling action functions at transitions
; 2919 : 	if (mobj->tics != -1)

  0065d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00660	83 78 58 ff	 cmp	 DWORD PTR [eax+88], -1
  00664	74 2e		 je	 SHORT $LN56@P_PlayerMo

; 2920 : 	{
; 2921 : 		mobj->tics--;

  00666	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00669	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0066c	83 e9 01	 sub	 ecx, 1
  0066f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00672	89 4a 58	 mov	 DWORD PTR [edx+88], ecx

; 2922 : 
; 2923 : 		// you can cycle through multiple states in a tic
; 2924 : 		if (!mobj->tics)

  00675	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00678	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  0067c	75 16		 jne	 SHORT $LN56@P_PlayerMo

; 2925 : 			if (!P_SetPlayerMobjState(mobj, mobj->state->nextstate))

  0067e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00681	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00684	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00687	52		 push	 edx
  00688	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0068b	50		 push	 eax
  0068c	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00691	83 c4 08	 add	 esp, 8
$LN56@P_PlayerMo:

; 2926 : 				return; // freed itself
; 2927 : 	}
; 2928 : }

  00694	5f		 pop	 edi
  00695	5e		 pop	 esi
  00696	5b		 pop	 ebx
  00697	8b e5		 mov	 esp, ebp
  00699	5d		 pop	 ebp
  0069a	c3		 ret	 0
_P_PlayerMobjThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _PlayerLandedOnThing
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_onmobj$ = 12						; size = 4
_PlayerLandedOnThing PROC				; COMDAT

; 2628 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2629 : 	(void)onmobj;
; 2630 : 	mo->player->deltaviewheight = mo->momz>>3;

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0000f	c1 f9 03	 sar	 ecx, 3
  00012	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00015	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0001b	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2631 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_PlayerLandedOnThing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_CameraCheckWater
_TEXT	SEGMENT
_rover$1 = -8						; size = 4
_sector$ = -4						; size = 4
_thiscam$ = 8						; size = 4
_P_CameraCheckWater PROC				; COMDAT

; 2565 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2566 : 	sector_t *sector;
; 2567 : 
; 2568 : 	// see if we are in water
; 2569 : 	sector = thiscam->subsector->sector;

  00009	8b 45 08	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 55 fc	 mov	 DWORD PTR _sector$[ebp], edx

; 2570 : 
; 2571 : 	if (sector->ffloors)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00017	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0001e	0f 84 89 00 00
	00		 je	 $LN3@P_CameraCh

; 2572 : 	{
; 2573 : 		ffloor_t *rover;
; 2574 : 
; 2575 : 		for (rover = sector->ffloors; rover; rover = rover->next)

  00024	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00027	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0002d	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
  00030	eb 09		 jmp	 SHORT $LN4@P_CameraCh
$LN2@P_CameraCh:
  00032	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00035	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00038	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_CameraCh:
  0003b	83 7d f8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  0003f	74 6c		 je	 SHORT $LN3@P_CameraCh

; 2576 : 		{
; 2577 : 			if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_SWIMMABLE) || rover->flags & FF_BLOCKOTHERS)

  00041	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00044	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00047	83 e1 01	 and	 ecx, 1
  0004a	74 16		 je	 SHORT $LN7@P_CameraCh
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0004f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00052	83 e1 20	 and	 ecx, 32			; 00000020H
  00055	74 0b		 je	 SHORT $LN7@P_CameraCh
  00057	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0005a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0005d	83 e1 04	 and	 ecx, 4
  00060	74 02		 je	 SHORT $LN6@P_CameraCh
$LN7@P_CameraCh:

; 2578 : 				continue;

  00062	eb ce		 jmp	 SHORT $LN2@P_CameraCh
$LN6@P_CameraCh:

; 2579 : 			if (*rover->topheight <= thiscam->z
; 2580 : 				|| *rover->bottomheight > (thiscam->z + (thiscam->height >> 1)))

  00064	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	8b 55 08	 mov	 edx, DWORD PTR _thiscam$[ebp]
  0006c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006e	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  00071	7e 18		 jle	 SHORT $LN9@P_CameraCh
  00073	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00076	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00079	8b 55 08	 mov	 edx, DWORD PTR _thiscam$[ebp]
  0007c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0007f	d1 f8		 sar	 eax, 1
  00081	8b 55 08	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00084	03 42 18	 add	 eax, DWORD PTR [edx+24]
  00087	39 01		 cmp	 DWORD PTR [ecx], eax
  00089	7e 02		 jle	 SHORT $LN8@P_CameraCh
$LN9@P_CameraCh:

; 2581 : 				continue;

  0008b	eb a5		 jmp	 SHORT $LN2@P_CameraCh
$LN8@P_CameraCh:

; 2582 : 
; 2583 : 			if (thiscam->z + (thiscam->height >> 1) < *rover->topheight)

  0008d	8b 45 08	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00090	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00093	d1 f9		 sar	 ecx, 1
  00095	8b 55 08	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00098	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  0009b	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0009e	8b 10		 mov	 edx, DWORD PTR [eax]
  000a0	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  000a2	7d 07		 jge	 SHORT $LN10@P_CameraCh

; 2584 : 				return true;

  000a4	b8 01 00 00 00	 mov	 eax, 1
  000a9	eb 04		 jmp	 SHORT $LN1@P_CameraCh
$LN10@P_CameraCh:

; 2585 : 		}

  000ab	eb 85		 jmp	 SHORT $LN2@P_CameraCh
$LN3@P_CameraCh:

; 2586 : 	}
; 2587 : 
; 2588 : 	return false;

  000ad	33 c0		 xor	 eax, eax
$LN1@P_CameraCh:

; 2589 : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
_P_CameraCheckWater ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_CameraCheckHeat
_TEXT	SEGMENT
_rover$1 = -8						; size = 4
_sector$ = -4						; size = 4
_thiscam$ = 8						; size = 4
_P_CameraCheckHeat PROC					; COMDAT

; 2532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2533 : 	sector_t *sector;
; 2534 : 
; 2535 : 	// see if we are in water
; 2536 : 	sector = thiscam->subsector->sector;

  00009	8b 45 08	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 55 fc	 mov	 DWORD PTR _sector$[ebp], edx

; 2537 : 
; 2538 : 	if (P_FindSpecialLineFromTag(13, sector->tag, -1) != -1)

  00014	6a ff		 push	 -1
  00016	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00019	0f b7 48 14	 movzx	 ecx, WORD PTR [eax+20]
  0001d	51		 push	 ecx
  0001e	6a 0d		 push	 13			; 0000000dH
  00020	e8 00 00 00 00	 call	 _P_FindSpecialLineFromTag
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	83 f8 ff	 cmp	 eax, -1
  0002b	74 0a		 je	 SHORT $LN5@P_CameraCh

; 2539 : 		return true;

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	e9 c1 00 00 00	 jmp	 $LN1@P_CameraCh
$LN5@P_CameraCh:

; 2540 : 
; 2541 : 	if (sector->ffloors)

  00037	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  0003a	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00041	0f 84 af 00 00
	00		 je	 $LN3@P_CameraCh

; 2542 : 	{
; 2543 : 		ffloor_t *rover;
; 2544 : 
; 2545 : 		for (rover = sector->ffloors; rover; rover = rover->next)

  00047	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  0004a	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00050	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
  00053	eb 09		 jmp	 SHORT $LN4@P_CameraCh
$LN2@P_CameraCh:
  00055	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00058	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0005b	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_CameraCh:
  0005e	83 7d f8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  00062	0f 84 8e 00 00
	00		 je	 $LN3@P_CameraCh

; 2546 : 		{
; 2547 : 			if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_SWIMMABLE) || rover->flags & FF_BLOCKOTHERS)

  00068	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0006b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0006e	83 e1 01	 and	 ecx, 1
  00071	74 16		 je	 SHORT $LN8@P_CameraCh
  00073	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00076	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00079	83 e1 20	 and	 ecx, 32			; 00000020H
  0007c	74 0b		 je	 SHORT $LN8@P_CameraCh
  0007e	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00081	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00084	83 e1 04	 and	 ecx, 4
  00087	74 02		 je	 SHORT $LN7@P_CameraCh
$LN8@P_CameraCh:

; 2548 : 				continue;

  00089	eb ca		 jmp	 SHORT $LN2@P_CameraCh
$LN7@P_CameraCh:

; 2549 : 			if (*rover->topheight <= thiscam->z
; 2550 : 				|| *rover->bottomheight > (thiscam->z + (thiscam->height >> 1)))

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	8b 55 08	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00093	8b 01		 mov	 eax, DWORD PTR [ecx]
  00095	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  00098	7e 18		 jle	 SHORT $LN10@P_CameraCh
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0009d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a0	8b 55 08	 mov	 edx, DWORD PTR _thiscam$[ebp]
  000a3	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000a6	d1 f8		 sar	 eax, 1
  000a8	8b 55 08	 mov	 edx, DWORD PTR _thiscam$[ebp]
  000ab	03 42 18	 add	 eax, DWORD PTR [edx+24]
  000ae	39 01		 cmp	 DWORD PTR [ecx], eax
  000b0	7e 02		 jle	 SHORT $LN9@P_CameraCh
$LN10@P_CameraCh:

; 2551 : 				continue;

  000b2	eb a1		 jmp	 SHORT $LN2@P_CameraCh
$LN9@P_CameraCh:

; 2552 : 
; 2553 : 			if (thiscam->z + (thiscam->height >> 1) < *rover->topheight)

  000b4	8b 45 08	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000b7	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000ba	d1 f9		 sar	 ecx, 1
  000bc	8b 55 08	 mov	 edx, DWORD PTR _thiscam$[ebp]
  000bf	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  000c2	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000c5	8b 10		 mov	 edx, DWORD PTR [eax]
  000c7	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  000c9	7d 26		 jge	 SHORT $LN12@P_CameraCh

; 2554 : 			{
; 2555 : 				if (P_FindSpecialLineFromTag(13, rover->master->frontsector->tag, -1) != -1)

  000cb	6a ff		 push	 -1
  000cd	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000d0	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000d3	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000d6	0f b7 42 14	 movzx	 eax, WORD PTR [edx+20]
  000da	50		 push	 eax
  000db	6a 0d		 push	 13			; 0000000dH
  000dd	e8 00 00 00 00	 call	 _P_FindSpecialLineFromTag
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e5	83 f8 ff	 cmp	 eax, -1
  000e8	74 07		 je	 SHORT $LN12@P_CameraCh

; 2556 : 					return true;

  000ea	b8 01 00 00 00	 mov	 eax, 1
  000ef	eb 07		 jmp	 SHORT $LN1@P_CameraCh
$LN12@P_CameraCh:

; 2557 : 			}
; 2558 : 		}

  000f1	e9 5f ff ff ff	 jmp	 $LN2@P_CameraCh
$LN3@P_CameraCh:

; 2559 : 	}
; 2560 : 
; 2561 : 	return false;

  000f6	33 c0		 xor	 eax, eax
$LN1@P_CameraCh:

; 2562 : }

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_P_CameraCheckHeat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SceneryCheckWater
_TEXT	SEGMENT
tv69 = -76						; size = 4
_rover$1 = -8						; size = 4
_sector$ = -4						; size = 4
_mobj$ = 8						; size = 4
_P_SceneryCheckWater PROC				; COMDAT

; 2489 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2490 : 	sector_t *sector;
; 2491 : 
; 2492 : 	// Default if no water exists.
; 2493 : 	mobj->watertop = mobj->waterbottom = mobj->subsector->sector->floorheight - 1000*FRACUNIT;

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	8b 02		 mov	 eax, DWORD PTR [edx]
  00013	2d 00 00 e8 03	 sub	 eax, 65536000		; 03e80000H
  00018	89 45 b4	 mov	 DWORD PTR tv69[ebp], eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0001e	8b 55 b4	 mov	 edx, DWORD PTR tv69[ebp]
  00021	89 91 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], edx
  00027	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002a	8b 4d b4	 mov	 ecx, DWORD PTR tv69[ebp]
  0002d	89 88 c0 00 00
	00		 mov	 DWORD PTR [eax+192], ecx

; 2494 : 
; 2495 : 	// see if we are in water, and set some flags for later
; 2496 : 	sector = mobj->subsector->sector;

  00033	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00036	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	89 55 fc	 mov	 DWORD PTR _sector$[ebp], edx

; 2497 : 
; 2498 : 	if (sector->ffloors)

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00041	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00048	0f 84 40 01 00
	00		 je	 $LN5@P_SceneryC

; 2499 : 	{
; 2500 : 		ffloor_t *rover;
; 2501 : 
; 2502 : 		mobj->eflags &= ~(MFE_UNDERWATER|MFE_TOUCHWATER);

  0004e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00051	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00057	83 e1 f3	 and	 ecx, -13		; fffffff3H
  0005a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0005d	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 2503 : 
; 2504 : 		for (rover = sector->ffloors; rover; rover = rover->next)

  00063	8b 45 fc	 mov	 eax, DWORD PTR _sector$[ebp]
  00066	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0006c	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
  0006f	eb 09		 jmp	 SHORT $LN4@P_SceneryC
$LN2@P_SceneryC:
  00071	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00074	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00077	89 4d f8	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_SceneryC:
  0007a	83 7d f8 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  0007e	0f 84 08 01 00
	00		 je	 $LN3@P_SceneryC

; 2505 : 		{
; 2506 : 			if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_SWIMMABLE) || rover->flags & FF_BLOCKOTHERS)

  00084	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00087	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0008a	83 e1 01	 and	 ecx, 1
  0008d	74 16		 je	 SHORT $LN8@P_SceneryC
  0008f	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00092	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00095	83 e1 20	 and	 ecx, 32			; 00000020H
  00098	74 0b		 je	 SHORT $LN8@P_SceneryC
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  0009d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000a0	83 e1 04	 and	 ecx, 4
  000a3	74 02		 je	 SHORT $LN7@P_SceneryC
$LN8@P_SceneryC:

; 2507 : 				continue;

  000a5	eb ca		 jmp	 SHORT $LN2@P_SceneryC
$LN7@P_SceneryC:

; 2508 : 			if (*rover->topheight <= mobj->z
; 2509 : 				|| *rover->bottomheight > (mobj->z + (mobj->info->height >> 1)))

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ac	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000af	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b1	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  000b4	7e 1e		 jle	 SHORT $LN10@P_SceneryC
  000b6	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  000b9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000bc	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000bf	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  000c5	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  000c8	d1 fa		 sar	 edx, 1
  000ca	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000cd	03 50 18	 add	 edx, DWORD PTR [eax+24]
  000d0	39 11		 cmp	 DWORD PTR [ecx], edx
  000d2	7e 02		 jle	 SHORT $LN9@P_SceneryC
$LN10@P_SceneryC:

; 2510 : 				continue;

  000d4	eb 9b		 jmp	 SHORT $LN2@P_SceneryC
$LN9@P_SceneryC:

; 2511 : 
; 2512 : 			if (mobj->z + mobj->info->height > *rover->topheight)

  000d6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d9	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000df	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000e2	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000e5	03 41 44	 add	 eax, DWORD PTR [ecx+68]
  000e8	8b 4d f8	 mov	 ecx, DWORD PTR _rover$1[ebp]
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	3b 02		 cmp	 eax, DWORD PTR [edx]
  000ef	7e 17		 jle	 SHORT $LN11@P_SceneryC

; 2513 : 				mobj->eflags |= MFE_TOUCHWATER;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000fa	83 c9 04	 or	 ecx, 4
  000fd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00100	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
  00106	eb 15		 jmp	 SHORT $LN12@P_SceneryC
$LN11@P_SceneryC:

; 2514 : 			else
; 2515 : 				mobj->eflags &= ~MFE_TOUCHWATER;

  00108	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0010b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00111	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00114	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00117	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN12@P_SceneryC:

; 2516 : 
; 2517 : 			// Set the watertop and waterbottom
; 2518 : 			mobj->watertop = *rover->topheight;

  0011d	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00120	8b 08		 mov	 ecx, DWORD PTR [eax]
  00122	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00125	8b 01		 mov	 eax, DWORD PTR [ecx]
  00127	89 82 c0 00 00
	00		 mov	 DWORD PTR [edx+192], eax

; 2519 : 			mobj->waterbottom = *rover->bottomheight;

  0012d	8b 45 f8	 mov	 eax, DWORD PTR _rover$1[ebp]
  00130	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00133	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00136	8b 01		 mov	 eax, DWORD PTR [ecx]
  00138	89 82 c4 00 00
	00		 mov	 DWORD PTR [edx+196], eax

; 2520 : 
; 2521 : 			if (mobj->z + (mobj->info->height >> 1) < *rover->topheight)

  0013e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00141	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00147	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0014a	d1 fa		 sar	 edx, 1
  0014c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0014f	03 50 18	 add	 edx, DWORD PTR [eax+24]
  00152	8b 4d f8	 mov	 ecx, DWORD PTR _rover$1[ebp]
  00155	8b 01		 mov	 eax, DWORD PTR [ecx]
  00157	3b 10		 cmp	 edx, DWORD PTR [eax]
  00159	7d 17		 jge	 SHORT $LN13@P_SceneryC

; 2522 : 				mobj->eflags |= MFE_UNDERWATER;

  0015b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00164	83 c9 08	 or	 ecx, 8
  00167	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0016a	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
  00170	eb 15		 jmp	 SHORT $LN14@P_SceneryC
$LN13@P_SceneryC:

; 2523 : 			else
; 2524 : 				mobj->eflags &= ~MFE_UNDERWATER;

  00172	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00175	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0017b	83 e1 f7	 and	 ecx, -9			; fffffff7H
  0017e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00181	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN14@P_SceneryC:

; 2525 : 		}

  00187	e9 e5 fe ff ff	 jmp	 $LN2@P_SceneryC
$LN3@P_SceneryC:

; 2526 : 	}

  0018c	eb 15		 jmp	 SHORT $LN6@P_SceneryC
$LN5@P_SceneryC:

; 2527 : 	else
; 2528 : 		mobj->eflags &= ~(MFE_UNDERWATER|MFE_TOUCHWATER);

  0018e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00191	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00197	83 e1 f3	 and	 ecx, -13		; fffffff3H
  0019a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0019d	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN6@P_SceneryC:

; 2529 : }

  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c3		 ret	 0
_P_SceneryCheckWater ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SceneryZMovement
_TEXT	SEGMENT
tv198 = -92						; size = 4
_explodemo$1 = -24					; size = 4
_prandom$2 = -17					; size = 1
_thingtop$3 = -16					; size = 4
_delta2$4 = -12						; size = 4
_delta1$5 = -8						; size = 4
_rover$6 = -4						; size = 4
_mo$ = 8						; size = 4
_P_SceneryZMovement PROC				; COMDAT

; 2134 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2135 : 	// Intercept the stupid 'fall through 3dfloors' bug
; 2136 : 	if (mo->subsector->sector->ffloors)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	83 ba 90 00 00
	00 00		 cmp	 DWORD PTR [edx+144], 0
  00018	0f 84 86 01 00
	00		 je	 $LN3@P_SceneryZ

; 2137 : 	{
; 2138 : 		ffloor_t *rover;
; 2139 : 		fixed_t delta1, delta2;
; 2140 : 		INT32 thingtop = mo->z + mo->height;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00021	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00024	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00027	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0002a	89 4d f0	 mov	 DWORD PTR _thingtop$3[ebp], ecx

; 2141 : 
; 2142 : 		for (rover = mo->subsector->sector->ffloors; rover; rover = rover->next)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00030	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0003b	89 45 fc	 mov	 DWORD PTR _rover$6[ebp], eax
  0003e	eb 09		 jmp	 SHORT $LN4@P_SceneryZ
$LN2@P_SceneryZ:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00043	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00046	89 4d fc	 mov	 DWORD PTR _rover$6[ebp], ecx
$LN4@P_SceneryZ:
  00049	83 7d fc 00	 cmp	 DWORD PTR _rover$6[ebp], 0
  0004d	0f 84 51 01 00
	00		 je	 $LN3@P_SceneryZ

; 2143 : 		{
; 2144 : 			if (!(rover->flags & FF_EXISTS))

  00053	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00056	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00059	83 e1 01	 and	 ecx, 1
  0005c	75 02		 jne	 SHORT $LN8@P_SceneryZ

; 2145 : 				continue;

  0005e	eb e0		 jmp	 SHORT $LN2@P_SceneryZ
$LN8@P_SceneryZ:

; 2146 : 
; 2147 : 			if ((!(rover->flags & FF_BLOCKOTHERS || rover->flags & FF_QUICKSAND) || (rover->flags & FF_SWIMMABLE)))

  00060	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00063	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00066	83 e1 04	 and	 ecx, 4
  00069	75 0e		 jne	 SHORT $LN11@P_SceneryZ
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  0006e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00071	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00077	74 0b		 je	 SHORT $LN10@P_SceneryZ
$LN11@P_SceneryZ:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  0007c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0007f	83 e1 20	 and	 ecx, 32			; 00000020H
  00082	74 02		 je	 SHORT $LN9@P_SceneryZ
$LN10@P_SceneryZ:

; 2148 : 				continue;

  00084	eb ba		 jmp	 SHORT $LN2@P_SceneryZ
$LN9@P_SceneryZ:

; 2149 : 
; 2150 : 			if (rover->flags & FF_QUICKSAND)

  00086	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00089	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0008c	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00092	74 2a		 je	 SHORT $LN13@P_SceneryZ

; 2151 : 			{
; 2152 : 				if (mo->z < *rover->topheight && *rover->bottomheight < thingtop)

  00094	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0009c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0009f	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000a1	7d 1b		 jge	 SHORT $LN13@P_SceneryZ
  000a3	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  000a6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ab	3b 55 f0	 cmp	 edx, DWORD PTR _thingtop$3[ebp]
  000ae	7d 0e		 jge	 SHORT $LN13@P_SceneryZ

; 2153 : 				{
; 2154 : 					mo->floorz = mo->z;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  000b6	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000b9	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 2155 : 					continue;

  000bc	eb 82		 jmp	 SHORT $LN2@P_SceneryZ
$LN13@P_SceneryZ:

; 2156 : 				}
; 2157 : 			}
; 2158 : 
; 2159 : 			delta1 = mo->z - (*rover->bottomheight + ((*rover->topheight - *rover->bottomheight)/2));

  000be	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  000c1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _rover$6[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	8b 55 fc	 mov	 edx, DWORD PTR _rover$6[ebp]
  000cc	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  000cf	8b 00		 mov	 eax, DWORD PTR [eax]
  000d1	2b 02		 sub	 eax, DWORD PTR [edx]
  000d3	99		 cdq
  000d4	2b c2		 sub	 eax, edx
  000d6	d1 f8		 sar	 eax, 1
  000d8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000da	03 c8		 add	 ecx, eax
  000dc	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  000df	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000e2	2b c1		 sub	 eax, ecx
  000e4	89 45 f8	 mov	 DWORD PTR _delta1$5[ebp], eax

; 2160 : 			delta2 = thingtop - (*rover->bottomheight + ((*rover->topheight - *rover->bottomheight)/2));

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  000ea	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _rover$6[ebp]
  000f0	8b 02		 mov	 eax, DWORD PTR [edx]
  000f2	8b 55 fc	 mov	 edx, DWORD PTR _rover$6[ebp]
  000f5	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  000f8	8b 00		 mov	 eax, DWORD PTR [eax]
  000fa	2b 02		 sub	 eax, DWORD PTR [edx]
  000fc	99		 cdq
  000fd	2b c2		 sub	 eax, edx
  000ff	d1 f8		 sar	 eax, 1
  00101	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00103	03 c8		 add	 ecx, eax
  00105	8b 55 f0	 mov	 edx, DWORD PTR _thingtop$3[ebp]
  00108	2b d1		 sub	 edx, ecx
  0010a	89 55 f4	 mov	 DWORD PTR _delta2$4[ebp], edx

; 2161 : 			if (*rover->topheight > mo->floorz && abs(delta1) < abs(delta2)
; 2162 : 				&& (!(rover->flags & FF_REVERSEPLATFORM)))

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00110	8b 08		 mov	 ecx, DWORD PTR [eax]
  00112	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00115	8b 01		 mov	 eax, DWORD PTR [ecx]
  00117	3b 42 38	 cmp	 eax, DWORD PTR [edx+56]
  0011a	7e 39		 jle	 SHORT $LN14@P_SceneryZ
  0011c	8b 45 f8	 mov	 eax, DWORD PTR _delta1$5[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _abs
  00125	83 c4 04	 add	 esp, 4
  00128	8b f0		 mov	 esi, eax
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR _delta2$4[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 _abs
  00133	83 c4 04	 add	 esp, 4
  00136	3b f0		 cmp	 esi, eax
  00138	7d 1b		 jge	 SHORT $LN14@P_SceneryZ
  0013a	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  0013d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00140	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  00146	75 0d		 jne	 SHORT $LN14@P_SceneryZ

; 2163 : 			{
; 2164 : 				mo->floorz = *rover->topheight;

  00148	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  0014b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00150	8b 01		 mov	 eax, DWORD PTR [ecx]
  00152	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN14@P_SceneryZ:

; 2165 : 			}
; 2166 : 			if (*rover->bottomheight < mo->ceilingz && abs(delta1) >= abs(delta2)
; 2167 : 				&& (/*mo->z + mo->height <= *rover->bottomheight ||*/ !(rover->flags & FF_PLATFORM)))

  00155	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00158	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0015b	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0015e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00160	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  00163	7d 3a		 jge	 SHORT $LN15@P_SceneryZ
  00165	8b 45 f8	 mov	 eax, DWORD PTR _delta1$5[ebp]
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 _abs
  0016e	83 c4 04	 add	 esp, 4
  00171	8b f0		 mov	 esi, eax
  00173	8b 4d f4	 mov	 ecx, DWORD PTR _delta2$4[ebp]
  00176	51		 push	 ecx
  00177	e8 00 00 00 00	 call	 _abs
  0017c	83 c4 04	 add	 esp, 4
  0017f	3b f0		 cmp	 esi, eax
  00181	7c 1c		 jl	 SHORT $LN15@P_SceneryZ
  00183	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00186	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00189	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  0018f	75 0e		 jne	 SHORT $LN15@P_SceneryZ

; 2168 : 			{
; 2169 : 				mo->ceilingz = *rover->bottomheight;

  00191	8b 45 fc	 mov	 eax, DWORD PTR _rover$6[ebp]
  00194	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00197	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0019a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0019c	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$LN15@P_SceneryZ:

; 2170 : 			}
; 2171 : 		}

  0019f	e9 9c fe ff ff	 jmp	 $LN2@P_SceneryZ
$LN3@P_SceneryZ:

; 2172 : 	}
; 2173 : 
; 2174 : 	// adjust height
; 2175 : 	if (mo->pmomz && mo->z != mo->floorz)

  001a4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001a7	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  001ab	74 2a		 je	 SHORT $LN16@P_SceneryZ
  001ad	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001b0	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  001b3	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  001b6	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  001b9	74 1c		 je	 SHORT $LN16@P_SceneryZ

; 2176 : 	{
; 2177 : 		mo->momz += mo->pmomz;

  001bb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001be	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001c1	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001c4	03 4a 54	 add	 ecx, DWORD PTR [edx+84]
  001c7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001ca	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 2178 : 		mo->pmomz = 0;

  001cd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001d0	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0
$LN16@P_SceneryZ:

; 2179 : 	}
; 2180 : 	mo->z += mo->momz;

  001d7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001da	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001dd	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001e0	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  001e3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001e6	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2181 : 
; 2182 : 	switch (mo->type)

  001e9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001ec	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  001ef	89 4d a4	 mov	 DWORD PTR tv198[ebp], ecx
  001f2	81 7d a4 b7 00
	00 00		 cmp	 DWORD PTR tv198[ebp], 183 ; 000000b7H
  001f9	74 12		 je	 SHORT $LN17@P_SceneryZ
  001fb	81 7d a4 b8 00
	00 00		 cmp	 DWORD PTR tv198[ebp], 184 ; 000000b8H
  00202	0f 84 bc 00 00
	00		 je	 $LN28@P_SceneryZ
  00208	e9 6d 03 00 00	 jmp	 $LN30@P_SceneryZ
$LN17@P_SceneryZ:

; 2183 : 	{
; 2184 : 		case MT_SMALLBUBBLE:
; 2185 : 			if (mo->z <= mo->floorz) // Hit the floor, so POP!

  0020d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00210	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00213	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00216	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00219	0f 8f a0 00 00
	00		 jg	 $LN27@P_SceneryZ

; 2186 : 			{
; 2187 : 				UINT8 prandom;
; 2188 : 
; 2189 : 				P_SetMobjState(mo, S_DISS);

  0021f	68 4f 06 00 00	 push	 1615			; 0000064fH
  00224	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _P_SetMobjState
  0022d	83 c4 08	 add	 esp, 8

; 2190 : 
; 2191 : 				if (mo->threshold == 42) // Don't make pop sound.

  00230	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00233	83 b8 a0 00 00
	00 2a		 cmp	 DWORD PTR [eax+160], 42	; 0000002aH
  0023a	75 05		 jne	 SHORT $LN19@P_SceneryZ

; 2192 : 					break;

  0023c	e9 39 03 00 00	 jmp	 $LN5@P_SceneryZ
$LN19@P_SceneryZ:

; 2193 : 
; 2194 : 				prandom = P_Random();

  00241	e8 00 00 00 00	 call	 _P_Random
  00246	88 45 ef	 mov	 BYTE PTR _prandom$2[ebp], al

; 2195 : 
; 2196 : 				if (prandom <= 51)

  00249	0f b6 45 ef	 movzx	 eax, BYTE PTR _prandom$2[ebp]
  0024d	83 f8 33	 cmp	 eax, 51			; 00000033H
  00250	7f 10		 jg	 SHORT $LN20@P_SceneryZ

; 2197 : 					S_StartSound(mo, sfx_bubbl1);

  00252	6a 24		 push	 36			; 00000024H
  00254	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 _S_StartSound
  0025d	83 c4 08	 add	 esp, 8
  00260	eb 5d		 jmp	 SHORT $LN27@P_SceneryZ
$LN20@P_SceneryZ:

; 2198 : 				else if (prandom <= 102)

  00262	0f b6 45 ef	 movzx	 eax, BYTE PTR _prandom$2[ebp]
  00266	83 f8 66	 cmp	 eax, 102		; 00000066H
  00269	7f 10		 jg	 SHORT $LN22@P_SceneryZ

; 2199 : 					S_StartSound(mo, sfx_bubbl2);

  0026b	6a 25		 push	 37			; 00000025H
  0026d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _S_StartSound
  00276	83 c4 08	 add	 esp, 8
  00279	eb 44		 jmp	 SHORT $LN27@P_SceneryZ
$LN22@P_SceneryZ:

; 2200 : 				else if (prandom <= 153)

  0027b	0f b6 45 ef	 movzx	 eax, BYTE PTR _prandom$2[ebp]
  0027f	3d 99 00 00 00	 cmp	 eax, 153		; 00000099H
  00284	7f 10		 jg	 SHORT $LN24@P_SceneryZ

; 2201 : 					S_StartSound(mo, sfx_bubbl3);

  00286	6a 26		 push	 38			; 00000026H
  00288	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 _S_StartSound
  00291	83 c4 08	 add	 esp, 8
  00294	eb 29		 jmp	 SHORT $LN27@P_SceneryZ
$LN24@P_SceneryZ:

; 2202 : 				else if (prandom <= 204)

  00296	0f b6 45 ef	 movzx	 eax, BYTE PTR _prandom$2[ebp]
  0029a	3d cc 00 00 00	 cmp	 eax, 204		; 000000ccH
  0029f	7f 10		 jg	 SHORT $LN26@P_SceneryZ

; 2203 : 					S_StartSound(mo, sfx_bubbl4);

  002a1	6a 27		 push	 39			; 00000027H
  002a3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 _S_StartSound
  002ac	83 c4 08	 add	 esp, 8
  002af	eb 0e		 jmp	 SHORT $LN27@P_SceneryZ
$LN26@P_SceneryZ:

; 2204 : 				else
; 2205 : 					S_StartSound(mo, sfx_bubbl5);

  002b1	6a 28		 push	 40			; 00000028H
  002b3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002b6	50		 push	 eax
  002b7	e8 00 00 00 00	 call	 _S_StartSound
  002bc	83 c4 08	 add	 esp, 8
$LN27@P_SceneryZ:

; 2206 : 			}
; 2207 : 			break;

  002bf	e9 b6 02 00 00	 jmp	 $LN5@P_SceneryZ
$LN28@P_SceneryZ:

; 2208 : 		case MT_MEDIUMBUBBLE:
; 2209 : 			if (mo->z <= mo->floorz) // Hit the floor, so split!

  002c4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002c7	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  002ca	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  002cd	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  002d0	0f 8f a4 02 00
	00		 jg	 $LN29@P_SceneryZ

; 2210 : 			{
; 2211 : 				// split
; 2212 : 				mobj_t *explodemo;
; 2213 : 
; 2214 : 				explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_SMALLBUBBLE);

  002d6	68 b7 00 00 00	 push	 183			; 000000b7H
  002db	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002de	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002e1	51		 push	 ecx
  002e2	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002e5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002e8	50		 push	 eax
  002e9	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  002ec	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002ef	52		 push	 edx
  002f0	e8 00 00 00 00	 call	 _P_SpawnMobj
  002f5	83 c4 10	 add	 esp, 16			; 00000010H
  002f8	89 45 e8	 mov	 DWORD PTR _explodemo$1[ebp], eax

; 2215 : 				explodemo->momx += (P_Random() % 32) * FRACUNIT/8;

  002fb	e8 00 00 00 00	 call	 _P_Random
  00300	0f b6 c0	 movzx	 eax, al
  00303	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  00308	79 05		 jns	 SHORT $LN44@P_SceneryZ
  0030a	48		 dec	 eax
  0030b	83 c8 e0	 or	 eax, -32		; ffffffe0H
  0030e	40		 inc	 eax
$LN44@P_SceneryZ:
  0030f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00312	99		 cdq
  00313	83 e2 07	 and	 edx, 7
  00316	03 c2		 add	 eax, edx
  00318	c1 f8 03	 sar	 eax, 3
  0031b	8b 4d e8	 mov	 ecx, DWORD PTR _explodemo$1[ebp]
  0031e	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  00321	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  00324	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 2216 : 				explodemo->momy += (P_Random() % 32) * FRACUNIT/8;

  00327	e8 00 00 00 00	 call	 _P_Random
  0032c	0f b6 c0	 movzx	 eax, al
  0032f	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  00334	79 05		 jns	 SHORT $LN45@P_SceneryZ
  00336	48		 dec	 eax
  00337	83 c8 e0	 or	 eax, -32		; ffffffe0H
  0033a	40		 inc	 eax
$LN45@P_SceneryZ:
  0033b	c1 e0 10	 shl	 eax, 16			; 00000010H
  0033e	99		 cdq
  0033f	83 e2 07	 and	 edx, 7
  00342	03 c2		 add	 eax, edx
  00344	c1 f8 03	 sar	 eax, 3
  00347	8b 4d e8	 mov	 ecx, DWORD PTR _explodemo$1[ebp]
  0034a	03 41 4c	 add	 eax, DWORD PTR [ecx+76]
  0034d	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  00350	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 2217 : 				explodemo->destscale = mo->scale;

  00353	8b 45 e8	 mov	 eax, DWORD PTR _explodemo$1[ebp]
  00356	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00359	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00360	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2218 : 				P_SetScale(explodemo, mo->scale);

  00367	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0036a	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00371	51		 push	 ecx
  00372	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  00375	52		 push	 edx
  00376	e8 00 00 00 00	 call	 _P_SetScale
  0037b	83 c4 08	 add	 esp, 8

; 2219 : 				explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_SMALLBUBBLE);

  0037e	68 b7 00 00 00	 push	 183			; 000000b7H
  00383	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00386	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00389	51		 push	 ecx
  0038a	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0038d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00390	50		 push	 eax
  00391	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00394	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00397	52		 push	 edx
  00398	e8 00 00 00 00	 call	 _P_SpawnMobj
  0039d	83 c4 10	 add	 esp, 16			; 00000010H
  003a0	89 45 e8	 mov	 DWORD PTR _explodemo$1[ebp], eax

; 2220 : 				explodemo->momx += (P_Random() % 64) * FRACUNIT/8;

  003a3	e8 00 00 00 00	 call	 _P_Random
  003a8	0f b6 c0	 movzx	 eax, al
  003ab	25 3f 00 00 80	 and	 eax, -2147483585	; 8000003fH
  003b0	79 05		 jns	 SHORT $LN46@P_SceneryZ
  003b2	48		 dec	 eax
  003b3	83 c8 c0	 or	 eax, -64		; ffffffc0H
  003b6	40		 inc	 eax
$LN46@P_SceneryZ:
  003b7	c1 e0 10	 shl	 eax, 16			; 00000010H
  003ba	99		 cdq
  003bb	83 e2 07	 and	 edx, 7
  003be	03 c2		 add	 eax, edx
  003c0	c1 f8 03	 sar	 eax, 3
  003c3	8b 4d e8	 mov	 ecx, DWORD PTR _explodemo$1[ebp]
  003c6	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  003c9	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  003cc	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 2221 : 				explodemo->momy -= (P_Random() % 64) * FRACUNIT/8;

  003cf	e8 00 00 00 00	 call	 _P_Random
  003d4	0f b6 c0	 movzx	 eax, al
  003d7	25 3f 00 00 80	 and	 eax, -2147483585	; 8000003fH
  003dc	79 05		 jns	 SHORT $LN47@P_SceneryZ
  003de	48		 dec	 eax
  003df	83 c8 c0	 or	 eax, -64		; ffffffc0H
  003e2	40		 inc	 eax
$LN47@P_SceneryZ:
  003e3	c1 e0 10	 shl	 eax, 16			; 00000010H
  003e6	99		 cdq
  003e7	83 e2 07	 and	 edx, 7
  003ea	03 c2		 add	 eax, edx
  003ec	c1 f8 03	 sar	 eax, 3
  003ef	8b 4d e8	 mov	 ecx, DWORD PTR _explodemo$1[ebp]
  003f2	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  003f5	2b d0		 sub	 edx, eax
  003f7	8b 45 e8	 mov	 eax, DWORD PTR _explodemo$1[ebp]
  003fa	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 2222 : 				explodemo->destscale = mo->scale;

  003fd	8b 45 e8	 mov	 eax, DWORD PTR _explodemo$1[ebp]
  00400	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00403	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  0040a	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2223 : 				P_SetScale(explodemo, mo->scale);

  00411	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00414	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0041b	51		 push	 ecx
  0041c	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  0041f	52		 push	 edx
  00420	e8 00 00 00 00	 call	 _P_SetScale
  00425	83 c4 08	 add	 esp, 8

; 2224 : 				explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_SMALLBUBBLE);

  00428	68 b7 00 00 00	 push	 183			; 000000b7H
  0042d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00430	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00433	51		 push	 ecx
  00434	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00437	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0043a	50		 push	 eax
  0043b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0043e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00441	52		 push	 edx
  00442	e8 00 00 00 00	 call	 _P_SpawnMobj
  00447	83 c4 10	 add	 esp, 16			; 00000010H
  0044a	89 45 e8	 mov	 DWORD PTR _explodemo$1[ebp], eax

; 2225 : 				explodemo->momx -= (P_Random() % 128) * FRACUNIT/8;

  0044d	e8 00 00 00 00	 call	 _P_Random
  00452	0f b6 c0	 movzx	 eax, al
  00455	25 7f 00 00 80	 and	 eax, -2147483521	; 8000007fH
  0045a	79 05		 jns	 SHORT $LN48@P_SceneryZ
  0045c	48		 dec	 eax
  0045d	83 c8 80	 or	 eax, -128		; ffffff80H
  00460	40		 inc	 eax
$LN48@P_SceneryZ:
  00461	c1 e0 10	 shl	 eax, 16			; 00000010H
  00464	99		 cdq
  00465	83 e2 07	 and	 edx, 7
  00468	03 c2		 add	 eax, edx
  0046a	c1 f8 03	 sar	 eax, 3
  0046d	8b 4d e8	 mov	 ecx, DWORD PTR _explodemo$1[ebp]
  00470	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00473	2b d0		 sub	 edx, eax
  00475	8b 45 e8	 mov	 eax, DWORD PTR _explodemo$1[ebp]
  00478	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 2226 : 				explodemo->momy += (P_Random() % 128) * FRACUNIT/8;

  0047b	e8 00 00 00 00	 call	 _P_Random
  00480	0f b6 c0	 movzx	 eax, al
  00483	25 7f 00 00 80	 and	 eax, -2147483521	; 8000007fH
  00488	79 05		 jns	 SHORT $LN49@P_SceneryZ
  0048a	48		 dec	 eax
  0048b	83 c8 80	 or	 eax, -128		; ffffff80H
  0048e	40		 inc	 eax
$LN49@P_SceneryZ:
  0048f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00492	99		 cdq
  00493	83 e2 07	 and	 edx, 7
  00496	03 c2		 add	 eax, edx
  00498	c1 f8 03	 sar	 eax, 3
  0049b	8b 4d e8	 mov	 ecx, DWORD PTR _explodemo$1[ebp]
  0049e	03 41 4c	 add	 eax, DWORD PTR [ecx+76]
  004a1	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  004a4	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 2227 : 				explodemo->destscale = mo->scale;

  004a7	8b 45 e8	 mov	 eax, DWORD PTR _explodemo$1[ebp]
  004aa	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  004ad	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  004b4	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2228 : 				P_SetScale(explodemo, mo->scale);

  004bb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004be	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  004c5	51		 push	 ecx
  004c6	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  004c9	52		 push	 edx
  004ca	e8 00 00 00 00	 call	 _P_SetScale
  004cf	83 c4 08	 add	 esp, 8

; 2229 : 				explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_SMALLBUBBLE);

  004d2	68 b7 00 00 00	 push	 183			; 000000b7H
  004d7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004da	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004dd	51		 push	 ecx
  004de	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  004e1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004e4	50		 push	 eax
  004e5	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  004e8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  004eb	52		 push	 edx
  004ec	e8 00 00 00 00	 call	 _P_SpawnMobj
  004f1	83 c4 10	 add	 esp, 16			; 00000010H
  004f4	89 45 e8	 mov	 DWORD PTR _explodemo$1[ebp], eax

; 2230 : 				explodemo->momx -= (P_Random() % 96) * FRACUNIT/8;

  004f7	e8 00 00 00 00	 call	 _P_Random
  004fc	0f b6 c0	 movzx	 eax, al
  004ff	99		 cdq
  00500	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00505	f7 f9		 idiv	 ecx
  00507	c1 e2 10	 shl	 edx, 16			; 00000010H
  0050a	8b c2		 mov	 eax, edx
  0050c	99		 cdq
  0050d	83 e2 07	 and	 edx, 7
  00510	03 c2		 add	 eax, edx
  00512	c1 f8 03	 sar	 eax, 3
  00515	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  00518	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  0051b	2b c8		 sub	 ecx, eax
  0051d	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  00520	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 2231 : 				explodemo->momy -= (P_Random() % 96) * FRACUNIT/8;

  00523	e8 00 00 00 00	 call	 _P_Random
  00528	0f b6 c0	 movzx	 eax, al
  0052b	99		 cdq
  0052c	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00531	f7 f9		 idiv	 ecx
  00533	c1 e2 10	 shl	 edx, 16			; 00000010H
  00536	8b c2		 mov	 eax, edx
  00538	99		 cdq
  00539	83 e2 07	 and	 edx, 7
  0053c	03 c2		 add	 eax, edx
  0053e	c1 f8 03	 sar	 eax, 3
  00541	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  00544	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00547	2b c8		 sub	 ecx, eax
  00549	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  0054c	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 2232 : 				explodemo->destscale = mo->scale;

  0054f	8b 45 e8	 mov	 eax, DWORD PTR _explodemo$1[ebp]
  00552	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00555	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  0055c	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2233 : 				P_SetScale(explodemo, mo->scale);

  00563	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00566	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0056d	51		 push	 ecx
  0056e	8b 55 e8	 mov	 edx, DWORD PTR _explodemo$1[ebp]
  00571	52		 push	 edx
  00572	e8 00 00 00 00	 call	 _P_SetScale
  00577	83 c4 08	 add	 esp, 8
$LN29@P_SceneryZ:
$LN30@P_SceneryZ:
$LN5@P_SceneryZ:

; 2234 : 			}
; 2235 : 			break;
; 2236 : 		default:
; 2237 : 			break;
; 2238 : 	}
; 2239 : 
; 2240 : 	// clip movement
; 2241 : 	if (mo->z <= mo->floorz && !(mo->flags & MF_NOCLIPHEIGHT))

  0057a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0057d	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00580	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00583	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00586	0f 8f a2 00 00
	00		 jg	 $LN31@P_SceneryZ
  0058c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0058f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00592	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  00598	0f 85 90 00 00
	00		 jne	 $LN31@P_SceneryZ

; 2242 : 	{
; 2243 : 		mo->z = mo->floorz;

  0059e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005a1	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  005a4	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  005a7	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 2244 : 
; 2245 : 		if (mo->momz < 0) // falling

  005aa	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005ad	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  005b1	7d 79		 jge	 SHORT $LN39@P_SceneryZ

; 2246 : 		{
; 2247 : 			if ((!(tmfloorthing) || (((tmfloorthing->flags & MF_PUSHABLE)

  005b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  005ba	74 36		 je	 SHORT $LN36@P_SceneryZ
  005bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  005c1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  005c4	83 e1 40	 and	 ecx, 64			; 00000040H
  005c7	75 29		 jne	 SHORT $LN36@P_SceneryZ
  005c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  005ce	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  005d4	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  005da	75 16		 jne	 SHORT $LN36@P_SceneryZ
  005dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  005e1	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  005e5	74 0b		 je	 SHORT $LN36@P_SceneryZ
  005e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  005ec	83 78 7c 49	 cmp	 DWORD PTR [eax+124], 73	; 00000049H
  005f0	75 27		 jne	 SHORT $LN37@P_SceneryZ
$LN36@P_SceneryZ:

; 2248 : 				|| (tmfloorthing->flags2 & MF2_STANDONME)) || tmfloorthing->type == MT_PLAYER
; 2249 : 				|| tmfloorthing->type == MT_FLOORSPIKE)))
; 2250 : 			{
; 2251 : 				if (!tmfloorthing || mo->momz)

  005f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  005f9	74 09		 je	 SHORT $LN38@P_SceneryZ
  005fb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005fe	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00602	74 15		 je	 SHORT $LN37@P_SceneryZ
$LN38@P_SceneryZ:

; 2252 : 					mo->eflags |= MFE_JUSTHITFLOOR; // Spin Attack

  00604	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00607	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0060d	83 c9 02	 or	 ecx, 2
  00610	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00613	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN37@P_SceneryZ:

; 2253 : 			}
; 2254 : 
; 2255 : 			if (!tmfloorthing)

  00619	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  00620	75 0a		 jne	 SHORT $LN39@P_SceneryZ

; 2256 : 				mo->momz = 0;

  00622	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00625	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN39@P_SceneryZ:

; 2257 : 		}
; 2258 : 	}

  0062c	eb 31		 jmp	 SHORT $LN40@P_SceneryZ
$LN31@P_SceneryZ:

; 2259 : 	else if (!(mo->flags & MF_NOGRAVITY)) // Gravity here!

  0062e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00631	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00634	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  0063a	75 23		 jne	 SHORT $LN40@P_SceneryZ

; 2260 : 	{
; 2261 : 		/// \todo may not be needed (done in P_MobjThinker normally)
; 2262 : 		mo->eflags &= ~MFE_JUSTHITFLOOR;

  0063c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0063f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00645	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00648	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0064b	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 2263 : 
; 2264 : 		P_CheckGravity(mo, true);

  00651	6a 01		 push	 1
  00653	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00656	50		 push	 eax
  00657	e8 00 00 00 00	 call	 _P_CheckGravity
  0065c	83 c4 08	 add	 esp, 8
$LN40@P_SceneryZ:

; 2265 : 	}
; 2266 : 
; 2267 : 	if (mo->z + mo->height > mo->ceilingz && !(mo->flags & MF_NOCLIPHEIGHT))

  0065f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00662	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00665	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00668	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0066b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0066e	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00671	7e 33		 jle	 SHORT $LN41@P_SceneryZ
  00673	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00676	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00679	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  0067f	75 25		 jne	 SHORT $LN41@P_SceneryZ

; 2268 : 	{
; 2269 : 		if (mo->momz > 0)

  00681	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00684	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00688	7e 0a		 jle	 SHORT $LN42@P_SceneryZ

; 2270 : 		{
; 2271 : 			// hit the ceiling
; 2272 : 			mo->momz = 0;

  0068a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0068d	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN42@P_SceneryZ:

; 2273 : 		}
; 2274 : 
; 2275 : 		mo->z = mo->ceilingz - mo->height;

  00694	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00697	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0069a	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  0069d	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  006a0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  006a3	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN41@P_SceneryZ:

; 2276 : 	}
; 2277 : }

  006a6	5f		 pop	 edi
  006a7	5e		 pop	 esi
  006a8	5b		 pop	 ebx
  006a9	8b e5		 mov	 esp, ebp
  006ab	5d		 pop	 ebp
  006ac	c3		 ret	 0
_P_SceneryZMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_PlayerZMovement
_TEXT	SEGMENT
_rover$1 = -48						; size = 4
_node$2 = -44						; size = 4
_polysec$3 = -40					; size = 4
_po$4 = -36						; size = 4
_i$5 = -32						; size = 4
_newsubsec$6 = -28					; size = 4
_sec$7 = -24						; size = 4
_node$8 = -20						; size = 4
_thingtop$9 = -16					; size = 4
_delta2$10 = -12					; size = 4
_delta1$11 = -8						; size = 4
_rover$12 = -4						; size = 4
_mo$ = 8						; size = 4
_P_PlayerZMovement PROC					; COMDAT

; 1798 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1799 : 	if (!mo->player)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00013	75 05		 jne	 SHORT $LN19@P_PlayerZM

; 1800 : 		return; // mobj was removed

  00015	e9 97 10 00 00	 jmp	 $LN127@P_PlayerZM
$LN19@P_PlayerZM:

; 1801 : 
; 1802 : 	// Intercept the stupid 'fall through 3dfloors' bug
; 1803 : 	if (mo->subsector->sector->ffloors)

  0001a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0001d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	83 ba 90 00 00
	00 00		 cmp	 DWORD PTR [edx+144], 0
  00029	0f 84 dd 02 00
	00		 je	 $LN3@P_PlayerZM

; 1804 : 	{
; 1805 : 		ffloor_t *rover;
; 1806 : 		fixed_t delta1, delta2;
; 1807 : 		INT32 thingtop = mo->z + mo->height;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00032	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00035	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00038	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0003b	89 4d f0	 mov	 DWORD PTR _thingtop$9[ebp], ecx

; 1808 : 
; 1809 : 		for (rover = mo->subsector->sector->ffloors; rover; rover = rover->next)

  0003e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00041	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00044	8b 11		 mov	 edx, DWORD PTR [ecx]
  00046	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0004c	89 45 fc	 mov	 DWORD PTR _rover$12[ebp], eax
  0004f	eb 09		 jmp	 SHORT $LN4@P_PlayerZM
$LN2@P_PlayerZM:
  00051	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  00054	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00057	89 4d fc	 mov	 DWORD PTR _rover$12[ebp], ecx
$LN4@P_PlayerZM:
  0005a	83 7d fc 00	 cmp	 DWORD PTR _rover$12[ebp], 0
  0005e	0f 84 a8 02 00
	00		 je	 $LN3@P_PlayerZM

; 1810 : 		{
; 1811 : 			if (!(rover->flags & FF_EXISTS))

  00064	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  00067	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0006a	83 e1 01	 and	 ecx, 1
  0006d	75 02		 jne	 SHORT $LN21@P_PlayerZM

; 1812 : 				continue;

  0006f	eb e0		 jmp	 SHORT $LN2@P_PlayerZM
$LN21@P_PlayerZM:

; 1813 : 
; 1814 : 			if ((rover->flags & FF_SWIMMABLE) && GETSECSPECIAL(rover->master->frontsector->special, 1) == 3
; 1815 : 				&& !(rover->master->flags & ML_BLOCKMONSTERS) && ((rover->master->flags & ML_EFFECT3)

  00071	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  00074	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00077	83 e1 20	 and	 ecx, 32			; 00000020H
  0007a	74 57		 je	 SHORT $LN22@P_PlayerZM
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  0007f	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00082	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00085	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  00089	83 e0 0f	 and	 eax, 15			; 0000000fH
  0008c	83 f8 03	 cmp	 eax, 3
  0008f	75 42		 jne	 SHORT $LN22@P_PlayerZM
  00091	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  00094	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00097	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0009b	83 e2 02	 and	 edx, 2
  0009e	75 33		 jne	 SHORT $LN22@P_PlayerZM
  000a0	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  000a3	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000a6	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  000aa	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  000b0	75 1c		 jne	 SHORT $LN24@P_PlayerZM
  000b2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  000b8	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000bb	2b 51 50	 sub	 edx, DWORD PTR [ecx+80]
  000be	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c5	2d 00 00 10 00	 sub	 eax, 1048576		; 00100000H
  000ca	3b d0		 cmp	 edx, eax
  000cc	7e 05		 jle	 SHORT $LN22@P_PlayerZM
$LN24@P_PlayerZM:

; 1816 : 				|| mo->z-mo->momz > *rover->topheight - 16*FRACUNIT))
; 1817 : 				;

  000ce	e9 18 01 00 00	 jmp	 $LN25@P_PlayerZM
$LN22@P_PlayerZM:

; 1818 : 			else if ((!(rover->flags & FF_BLOCKPLAYER || rover->flags & FF_QUICKSAND) && !(mo->player && !(mo->player->pflags & PF_NIGHTSMODE) && !mo->player->homing && (((mo->player->charability == CA_SWIM) || mo->player->powers[pw_super]) && mo->ceilingz-*rover->topheight >= mo->height) && (rover->flags & FF_SWIMMABLE) && !(mo->player->pflags & PF_SPINNING) && mo->player->speed > mo->player->runspeed && /*mo->ceilingz - *rover->topheight >= mo->height && */mo->z < *rover->topheight + 30*FRACUNIT && mo->z > *rover->topheight - 30*FRACUNIT)))

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  000d6	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000d9	83 e1 02	 and	 ecx, 2
  000dc	0f 85 09 01 00
	00		 jne	 $LN25@P_PlayerZM
  000e2	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  000e5	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000e8	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  000ee	0f 85 f7 00 00
	00		 jne	 $LN25@P_PlayerZM
  000f4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000f7	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000fe	0f 84 e2 00 00
	00		 je	 $LN26@P_PlayerZM
  00104	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00107	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0010d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00113	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  00119	0f 85 c7 00 00
	00		 jne	 $LN26@P_PlayerZM
  0011f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00122	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00128	0f b6 91 38 01
	00 00		 movzx	 edx, BYTE PTR [ecx+312]
  0012f	85 d2		 test	 edx, edx
  00131	0f 85 af 00 00
	00		 jne	 $LN26@P_PlayerZM
  00137	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0013a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00140	83 b9 d8 00 00
	00 06		 cmp	 DWORD PTR [ecx+216], 6
  00147	74 1c		 je	 SHORT $LN27@P_PlayerZM
  00149	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0014c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00152	ba 04 00 00 00	 mov	 edx, 4
  00157	6b c2 0f	 imul	 eax, edx, 15
  0015a	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0015f	0f 84 81 00 00
	00		 je	 $LN26@P_PlayerZM
$LN27@P_PlayerZM:
  00165	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0016d	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00170	2b 01		 sub	 eax, DWORD PTR [ecx]
  00172	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00175	3b 41 44	 cmp	 eax, DWORD PTR [ecx+68]
  00178	7c 6c		 jl	 SHORT $LN26@P_PlayerZM
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  0017d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00180	83 e1 20	 and	 ecx, 32			; 00000020H
  00183	74 61		 je	 SHORT $LN26@P_PlayerZM
  00185	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00188	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0018e	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00194	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  0019a	75 4a		 jne	 SHORT $LN26@P_PlayerZM
  0019c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0019f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001a5	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001a8	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  001ae	8b 89 0c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+268]
  001b4	3b 88 c8 00 00
	00		 cmp	 ecx, DWORD PTR [eax+200]
  001ba	7e 2a		 jle	 SHORT $LN26@P_PlayerZM
  001bc	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  001bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c1	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c3	81 c2 00 00 1e
	00		 add	 edx, 1966080		; 001e0000H
  001c9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001cc	39 50 18	 cmp	 DWORD PTR [eax+24], edx
  001cf	7d 15		 jge	 SHORT $LN26@P_PlayerZM
  001d1	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  001d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d8	81 ea 00 00 1e
	00		 sub	 edx, 1966080		; 001e0000H
  001de	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001e1	39 50 18	 cmp	 DWORD PTR [eax+24], edx
  001e4	7f 05		 jg	 SHORT $LN25@P_PlayerZM
$LN26@P_PlayerZM:

; 1819 : 				continue;

  001e6	e9 66 fe ff ff	 jmp	 $LN2@P_PlayerZM
$LN25@P_PlayerZM:

; 1820 : 
; 1821 : 			if (rover->flags & FF_QUICKSAND)

  001eb	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  001ee	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  001f1	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  001f7	74 2d		 je	 SHORT $LN28@P_PlayerZM

; 1822 : 			{
; 1823 : 				if (mo->z < *rover->topheight && *rover->bottomheight < thingtop)

  001f9	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  001fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fe	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00201	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00204	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00206	7d 19		 jge	 SHORT $LN29@P_PlayerZM
  00208	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  0020b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0020e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00210	3b 55 f0	 cmp	 edx, DWORD PTR _thingtop$9[ebp]
  00213	7d 0c		 jge	 SHORT $LN29@P_PlayerZM

; 1824 : 				{
; 1825 : 					mo->floorz = mo->z;

  00215	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00218	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0021b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0021e	89 50 38	 mov	 DWORD PTR [eax+56], edx
$LN29@P_PlayerZM:

; 1826 : 				}
; 1827 : 				continue; // This is so you can jump/spring up through quicksand from below.

  00221	e9 2b fe ff ff	 jmp	 $LN2@P_PlayerZM
$LN28@P_PlayerZM:

; 1828 : 			}
; 1829 : 
; 1830 : 			delta1 = mo->z - (*rover->bottomheight + ((*rover->topheight - *rover->bottomheight)/2));

  00226	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  00229	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0022c	8b 55 fc	 mov	 edx, DWORD PTR _rover$12[ebp]
  0022f	8b 02		 mov	 eax, DWORD PTR [edx]
  00231	8b 55 fc	 mov	 edx, DWORD PTR _rover$12[ebp]
  00234	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00237	8b 00		 mov	 eax, DWORD PTR [eax]
  00239	2b 02		 sub	 eax, DWORD PTR [edx]
  0023b	99		 cdq
  0023c	2b c2		 sub	 eax, edx
  0023e	d1 f8		 sar	 eax, 1
  00240	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00242	03 c8		 add	 ecx, eax
  00244	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00247	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0024a	2b c1		 sub	 eax, ecx
  0024c	89 45 f8	 mov	 DWORD PTR _delta1$11[ebp], eax

; 1831 : 			delta2 = thingtop - (*rover->bottomheight + ((*rover->topheight - *rover->bottomheight)/2));

  0024f	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  00252	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00255	8b 55 fc	 mov	 edx, DWORD PTR _rover$12[ebp]
  00258	8b 02		 mov	 eax, DWORD PTR [edx]
  0025a	8b 55 fc	 mov	 edx, DWORD PTR _rover$12[ebp]
  0025d	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00260	8b 00		 mov	 eax, DWORD PTR [eax]
  00262	2b 02		 sub	 eax, DWORD PTR [edx]
  00264	99		 cdq
  00265	2b c2		 sub	 eax, edx
  00267	d1 f8		 sar	 eax, 1
  00269	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0026b	03 c8		 add	 ecx, eax
  0026d	8b 55 f0	 mov	 edx, DWORD PTR _thingtop$9[ebp]
  00270	2b d1		 sub	 edx, ecx
  00272	89 55 f4	 mov	 DWORD PTR _delta2$10[ebp], edx

; 1832 : 			if (*rover->topheight > mo->floorz && abs(delta1) < abs(delta2)
; 1833 : 				&& (!(rover->flags & FF_REVERSEPLATFORM)))

  00275	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0027d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0027f	3b 42 38	 cmp	 eax, DWORD PTR [edx+56]
  00282	7e 39		 jle	 SHORT $LN30@P_PlayerZM
  00284	8b 45 f8	 mov	 eax, DWORD PTR _delta1$11[ebp]
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 _abs
  0028d	83 c4 04	 add	 esp, 4
  00290	8b f0		 mov	 esi, eax
  00292	8b 4d f4	 mov	 ecx, DWORD PTR _delta2$10[ebp]
  00295	51		 push	 ecx
  00296	e8 00 00 00 00	 call	 _abs
  0029b	83 c4 04	 add	 esp, 4
  0029e	3b f0		 cmp	 esi, eax
  002a0	7d 1b		 jge	 SHORT $LN30@P_PlayerZM
  002a2	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  002a5	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002a8	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  002ae	75 0d		 jne	 SHORT $LN30@P_PlayerZM

; 1834 : 			{
; 1835 : 				mo->floorz = *rover->topheight;

  002b0	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  002b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b5	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002b8	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ba	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN30@P_PlayerZM:

; 1836 : 			}
; 1837 : 			if (*rover->bottomheight < mo->ceilingz && abs(delta1) >= abs(delta2)
; 1838 : 				&& (/*mo->z + mo->height <= *rover->bottomheight ||*/ !(rover->flags & FF_PLATFORM)))

  002bd	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  002c0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002c3	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002c6	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c8	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  002cb	7d 3a		 jge	 SHORT $LN31@P_PlayerZM
  002cd	8b 45 f8	 mov	 eax, DWORD PTR _delta1$11[ebp]
  002d0	50		 push	 eax
  002d1	e8 00 00 00 00	 call	 _abs
  002d6	83 c4 04	 add	 esp, 4
  002d9	8b f0		 mov	 esi, eax
  002db	8b 4d f4	 mov	 ecx, DWORD PTR _delta2$10[ebp]
  002de	51		 push	 ecx
  002df	e8 00 00 00 00	 call	 _abs
  002e4	83 c4 04	 add	 esp, 4
  002e7	3b f0		 cmp	 esi, eax
  002e9	7c 1c		 jl	 SHORT $LN31@P_PlayerZM
  002eb	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  002ee	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002f1	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  002f7	75 0e		 jne	 SHORT $LN31@P_PlayerZM

; 1839 : 			{
; 1840 : 				mo->ceilingz = *rover->bottomheight;

  002f9	8b 45 fc	 mov	 eax, DWORD PTR _rover$12[ebp]
  002fc	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002ff	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00302	8b 01		 mov	 eax, DWORD PTR [ecx]
  00304	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$LN31@P_PlayerZM:

; 1841 : 			}
; 1842 : 		}

  00307	e9 45 fd ff ff	 jmp	 $LN2@P_PlayerZM
$LN3@P_PlayerZM:

; 1843 : 	}
; 1844 : 
; 1845 : 	// check for smooth step up
; 1846 : 	if ((mo->eflags & MFE_VERTICALFLIP && mo->z + mo->height > mo->ceilingz)
; 1847 : 		|| (!(mo->eflags & MFE_VERTICALFLIP) && mo->z < mo->floorz))

  0030c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0030f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00315	83 e1 20	 and	 ecx, 32			; 00000020H
  00318	74 14		 je	 SHORT $LN34@P_PlayerZM
  0031a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0031d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00320	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00323	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00326	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00329	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  0032c	7f 24		 jg	 SHORT $LN33@P_PlayerZM
$LN34@P_PlayerZM:
  0032e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00331	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00337	83 e1 20	 and	 ecx, 32			; 00000020H
  0033a	0f 85 ba 00 00
	00		 jne	 $LN36@P_PlayerZM
  00340	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00343	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00346	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00349	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  0034c	0f 8d a8 00 00
	00		 jge	 $LN36@P_PlayerZM
$LN33@P_PlayerZM:

; 1848 : 	{
; 1849 : 		if (mo->eflags & MFE_VERTICALFLIP)

  00352	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00355	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0035b	83 e1 20	 and	 ecx, 32			; 00000020H
  0035e	74 51		 je	 SHORT $LN35@P_PlayerZM

; 1850 : 		{
; 1851 : 			mo->player->viewheight -= (mo->z+mo->height) - mo->ceilingz;

  00360	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00363	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00369	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0036c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0036f	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00372	03 42 44	 add	 eax, DWORD PTR [edx+68]
  00375	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00378	2b 42 3c	 sub	 eax, DWORD PTR [edx+60]
  0037b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0037e	2b c8		 sub	 ecx, eax
  00380	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00383	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00389	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1852 : 
; 1853 : 			mo->player->deltaviewheight =

  0038c	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_viewheight+20
  00391	c1 e0 10	 shl	 eax, 16			; 00000010H
  00394	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00397	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0039d	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  003a0	c1 f8 03	 sar	 eax, 3
  003a3	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  003a6	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  003ac	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 1854 : 				((cv_viewheight.value<<FRACBITS) - mo->player->viewheight)>>3;
; 1855 : 		}

  003af	eb 49		 jmp	 SHORT $LN36@P_PlayerZM
$LN35@P_PlayerZM:

; 1856 : 		else
; 1857 : 		{
; 1858 : 			mo->player->viewheight -= mo->floorz - mo->z;

  003b1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003b4	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003ba	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  003bd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003c0	8b 52 38	 mov	 edx, DWORD PTR [edx+56]
  003c3	2b 50 18	 sub	 edx, DWORD PTR [eax+24]
  003c6	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  003c9	2b c2		 sub	 eax, edx
  003cb	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  003ce	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  003d4	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1859 : 
; 1860 : 			mo->player->deltaviewheight =

  003d7	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_viewheight+20
  003dc	c1 e0 10	 shl	 eax, 16			; 00000010H
  003df	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  003e2	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  003e8	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  003eb	c1 f8 03	 sar	 eax, 3
  003ee	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  003f1	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  003f7	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN36@P_PlayerZM:

; 1861 : 				((cv_viewheight.value<<FRACBITS) - mo->player->viewheight)>>3;
; 1862 : 		}
; 1863 : 	}
; 1864 : 
; 1865 : 	// adjust height
; 1866 : /*	if (mo->pmomz && mo->z > mo->floorz && !(mo->player->pflags & PF_JUMPED))
; 1867 : 	{
; 1868 : 		mo->momz += mo->pmomz;
; 1869 : 		mo->pmomz = 0;
; 1870 : 	}*/
; 1871 : 
; 1872 : 	mo->z += mo->momz;

  003fa	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003fd	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00400	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00403	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  00406	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00409	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1873 : 
; 1874 : 	// Have player fall through floor?
; 1875 : 	if (mo->player->playerstate == PST_DEAD
; 1876 : 		|| mo->player->playerstate == PST_REBORN)

  0040c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0040f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00415	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  00419	74 0f		 je	 SHORT $LN38@P_PlayerZM
  0041b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0041e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00424	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00428	75 05		 jne	 SHORT $LN37@P_PlayerZM
$LN38@P_PlayerZM:

; 1877 : 		goto playergravity;

  0042a	e9 7e 09 00 00	 jmp	 $playergravity$131
$LN37@P_PlayerZM:

; 1878 : 
; 1879 : 	// clip movement
; 1880 : 	if (P_IsObjectOnGround(mo))

  0042f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00432	50		 push	 eax
  00433	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  00438	83 c4 04	 add	 esp, 4
  0043b	85 c0		 test	 eax, eax
  0043d	0f 84 47 09 00
	00		 je	 $LN39@P_PlayerZM

; 1881 : 	{
; 1882 : 		if (mo->player && (mo->player->pflags & PF_NIGHTSMODE))

  00443	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00446	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0044d	0f 84 de 00 00
	00		 je	 $LN41@P_PlayerZM
  00453	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00456	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0045c	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00462	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  00468	0f 84 c3 00 00
	00		 je	 $LN41@P_PlayerZM

; 1883 : 		{
; 1884 : 			if (mo->player->flyangle < 90 || mo->player->flyangle >= 270)

  0046e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00471	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00477	83 b9 b0 01 00
	00 5a		 cmp	 DWORD PTR [ecx+432], 90	; 0000005aH
  0047e	7c 15		 jl	 SHORT $LN44@P_PlayerZM
  00480	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00483	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00489	81 b9 b0 01 00
	00 0e 01 00 00	 cmp	 DWORD PTR [ecx+432], 270 ; 0000010eH
  00493	7c 23		 jl	 SHORT $LN42@P_PlayerZM
$LN44@P_PlayerZM:

; 1885 : 				mo->player->flyangle += 90;

  00495	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00498	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0049e	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  004a4	83 c2 5a	 add	 edx, 90			; 0000005aH
  004a7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004aa	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004b0	89 91 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], edx
  004b6	eb 21		 jmp	 SHORT $LN43@P_PlayerZM
$LN42@P_PlayerZM:

; 1886 : 			else
; 1887 : 				mo->player->flyangle -= 90;

  004b8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004bb	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004c1	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  004c7	83 ea 5a	 sub	 edx, 90			; 0000005aH
  004ca	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004cd	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004d3	89 91 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], edx
$LN43@P_PlayerZM:

; 1888 : 			mo->z = mo->floorz;

  004d9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004dc	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  004df	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  004e2	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1889 : 			mo->player->speed /= 5;

  004e5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004e8	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004ee	8b 81 0c 01 00
	00		 mov	 eax, DWORD PTR [ecx+268]
  004f4	99		 cdq
  004f5	b9 05 00 00 00	 mov	 ecx, 5
  004fa	f7 f9		 idiv	 ecx
  004fc	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  004ff	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  00505	89 81 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], eax

; 1890 : 			mo->player->speed *= 4;

  0050b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0050e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00514	8b 91 0c 01 00
	00		 mov	 edx, DWORD PTR [ecx+268]
  0051a	c1 e2 02	 shl	 edx, 2
  0051d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00520	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00526	89 91 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], edx

; 1891 : 			goto nightsdone;

  0052c	e9 9e 08 00 00	 jmp	 $nightsdone$132
$LN41@P_PlayerZM:

; 1892 : 		}
; 1893 : 		// Get up if you fell.
; 1894 : 		if (mo->state == &states[mo->info->painstate] || mo->state == &states[S_PLAY_SUPERHIT])

  00531	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00534	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0053a	6b 51 1c 1c	 imul	 edx, DWORD PTR [ecx+28], 28
  0053e	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00544	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00547	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  0054a	74 16		 je	 SHORT $LN46@P_PlayerZM
  0054c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00551	6b c8 30	 imul	 ecx, eax, 48
  00554	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0055a	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0055d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00560	75 0e		 jne	 SHORT $LN45@P_PlayerZM
$LN46@P_PlayerZM:

; 1895 : 			P_SetPlayerMobjState(mo, S_PLAY_STND);

  00562	6a 01		 push	 1
  00564	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00567	50		 push	 eax
  00568	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0056d	83 c4 08	 add	 esp, 8
$LN45@P_PlayerZM:

; 1896 : 
; 1897 : 		if (mo->eflags & MFE_VERTICALFLIP)

  00570	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00573	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00579	83 e1 20	 and	 ecx, 32			; 00000020H
  0057c	74 14		 je	 SHORT $LN47@P_PlayerZM

; 1898 : 			mo->z = mo->ceilingz - mo->height;

  0057e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00581	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00584	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00587	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  0058a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0058d	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00590	eb 0c		 jmp	 SHORT $LN48@P_PlayerZM
$LN47@P_PlayerZM:

; 1899 : 		else
; 1900 : 			mo->z = mo->floorz;

  00592	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00595	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00598	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0059b	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN48@P_PlayerZM:

; 1901 : 
; 1902 : 		if ((!(mo->eflags & MFE_VERTICALFLIP) && mo->momz < 0) || (mo->eflags & MFE_VERTICALFLIP && mo->momz > 0)) // falling

  0059e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005a1	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  005a7	83 e1 20	 and	 ecx, 32			; 00000020H
  005aa	75 09		 jne	 SHORT $LN51@P_PlayerZM
  005ac	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005af	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  005b3	7c 1f		 jl	 SHORT $LN50@P_PlayerZM
$LN51@P_PlayerZM:
  005b5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005b8	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  005be	83 e1 20	 and	 ecx, 32			; 00000020H
  005c1	0f 84 c1 07 00
	00		 je	 $LN103@P_PlayerZM
  005c7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005ca	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  005ce	0f 8e b4 07 00
	00		 jle	 $LN103@P_PlayerZM
$LN50@P_PlayerZM:

; 1903 : 		{
; 1904 : 			// Squat down. Decrease viewheight for a moment after hitting the ground (hard),
; 1905 : 			if (mo->player)

  005d4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005d7	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  005de	74 52		 je	 SHORT $LN56@P_PlayerZM

; 1906 : 			{
; 1907 : 				if (mo->eflags & MFE_VERTICALFLIP)

  005e0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005e3	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  005e9	83 e1 20	 and	 ecx, 32			; 00000020H
  005ec	74 23		 je	 SHORT $LN53@P_PlayerZM

; 1908 : 				{
; 1909 : 					if (mo->momz > 8*FRACUNIT)

  005ee	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005f1	81 78 50 00 00
	08 00		 cmp	 DWORD PTR [eax+80], 524288 ; 00080000H
  005f8	7e 15		 jle	 SHORT $LN55@P_PlayerZM

; 1910 : 						mo->player->deltaviewheight = mo->momz>>3;

  005fa	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005fd	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00600	c1 f9 03	 sar	 ecx, 3
  00603	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00606	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0060c	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN55@P_PlayerZM:

; 1911 : 				}

  0060f	eb 21		 jmp	 SHORT $LN56@P_PlayerZM
$LN53@P_PlayerZM:

; 1912 : 				else if (mo->momz < -8*FRACUNIT)

  00611	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00614	81 78 50 00 00
	f8 ff		 cmp	 DWORD PTR [eax+80], -524288 ; fff80000H
  0061b	7d 15		 jge	 SHORT $LN56@P_PlayerZM

; 1913 : 				{
; 1914 : 					mo->player->deltaviewheight = mo->momz>>3;

  0061d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00620	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00623	c1 f9 03	 sar	 ecx, 3
  00626	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00629	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0062f	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN56@P_PlayerZM:

; 1915 : 				}
; 1916 : 			}
; 1917 : 
; 1918 : 			// set it once and not continuously
; 1919 : 			if (tmfloorthing)

  00632	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  00639	74 5d		 je	 SHORT $LN61@P_PlayerZM

; 1920 : 			{
; 1921 : 				if ((tmfloorthing->flags & MF_MONITOR) || (tmfloorthing->flags & MF_PUSHABLE)
; 1922 : 					|| (tmfloorthing->flags2 & MF2_STANDONME))

  0063b	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00640	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00643	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00649	75 20		 jne	 SHORT $LN59@P_PlayerZM
  0064b	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00650	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00653	83 e1 40	 and	 ecx, 64			; 00000040H
  00656	75 13		 jne	 SHORT $LN59@P_PlayerZM
  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  0065d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00663	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  00669	74 2d		 je	 SHORT $LN61@P_PlayerZM
$LN59@P_PlayerZM:

; 1923 : 				{
; 1924 : 					if (mo->player)

  0066b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0066e	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00675	74 21		 je	 SHORT $LN61@P_PlayerZM

; 1925 : 					{
; 1926 : 						if (!(mo->player->pflags & PF_JUMPED))

  00677	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0067a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00680	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00686	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  0068c	75 0a		 jne	 SHORT $LN61@P_PlayerZM

; 1927 : 							tmfloorthing = 0;

  0068e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmfloorthing, 0
$LN61@P_PlayerZM:

; 1928 : 					}
; 1929 : 				}
; 1930 : 			}
; 1931 : 
; 1932 : 			if (P_IsObjectOnGround(mo) && (!(tmfloorthing) || (((tmfloorthing->flags & MF_PUSHABLE)

  00698	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0069b	50		 push	 eax
  0069c	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  006a1	83 c4 04	 add	 esp, 4
  006a4	85 c0		 test	 eax, eax
  006a6	0f 84 4c 06 00
	00		 je	 $LN76@P_PlayerZM
  006ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  006b3	74 3a		 je	 SHORT $LN64@P_PlayerZM
  006b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  006ba	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  006bd	83 e1 40	 and	 ecx, 64			; 00000040H
  006c0	75 2d		 jne	 SHORT $LN64@P_PlayerZM
  006c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  006c7	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  006cd	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  006d3	75 1a		 jne	 SHORT $LN64@P_PlayerZM
  006d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  006da	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  006de	74 0f		 je	 SHORT $LN64@P_PlayerZM
  006e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  006e5	83 78 7c 49	 cmp	 DWORD PTR [eax+124], 73	; 00000049H
  006e9	0f 85 09 06 00
	00		 jne	 $LN76@P_PlayerZM
$LN64@P_PlayerZM:

; 1933 : 				|| (tmfloorthing->flags2 & MF2_STANDONME)) || tmfloorthing->type == MT_PLAYER
; 1934 : 				|| tmfloorthing->type == MT_FLOORSPIKE))) // Spin Attack
; 1935 : 			{
; 1936 : 				if ((tmfloorthing && mo->momz) || !tmfloorthing)

  006ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  006f6	74 09		 je	 SHORT $LN67@P_PlayerZM
  006f8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  006fb	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  006ff	75 09		 jne	 SHORT $LN66@P_PlayerZM
$LN67@P_PlayerZM:
  00701	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  00708	75 15		 jne	 SHORT $LN65@P_PlayerZM
$LN66@P_PlayerZM:

; 1937 : 					mo->eflags |= MFE_JUSTHITFLOOR; // Spin Attack

  0070a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0070d	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00713	83 c9 02	 or	 ecx, 2
  00716	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00719	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN65@P_PlayerZM:

; 1938 : 
; 1939 : 				if (mo->eflags & MFE_JUSTHITFLOOR)

  0071f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00722	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00728	83 e1 02	 and	 ecx, 2
  0072b	0f 84 9d 01 00
	00		 je	 $LN75@P_PlayerZM

; 1940 : 				{
; 1941 : #ifdef POLYOBJECTS
; 1942 : 					// Check if we're on a polyobject
; 1943 : 					// that triggers a linedef executor.
; 1944 : 					msecnode_t *node;
; 1945 : 
; 1946 : 					for (node = mo->touching_sectorlist; node; node = node->m_snext)

  00731	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00734	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00737	89 4d ec	 mov	 DWORD PTR _node$8[ebp], ecx
  0073a	eb 09		 jmp	 SHORT $LN7@P_PlayerZM
$LN5@P_PlayerZM:
  0073c	8b 45 ec	 mov	 eax, DWORD PTR _node$8[ebp]
  0073f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00742	89 4d ec	 mov	 DWORD PTR _node$8[ebp], ecx
$LN7@P_PlayerZM:
  00745	83 7d ec 00	 cmp	 DWORD PTR _node$8[ebp], 0
  00749	0f 84 00 01 00
	00		 je	 $LN6@P_PlayerZM

; 1947 : 					{
; 1948 : 						sector_t *sec = node->m_sector;

  0074f	8b 45 ec	 mov	 eax, DWORD PTR _node$8[ebp]
  00752	8b 08		 mov	 ecx, DWORD PTR [eax]
  00754	89 4d e8	 mov	 DWORD PTR _sec$7[ebp], ecx

; 1949 : 						subsector_t *newsubsec;
; 1950 : 						size_t i;
; 1951 : 
; 1952 : 						for (i = 0; i < numsubsectors; i++)

  00757	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  0075e	eb 09		 jmp	 SHORT $LN10@P_PlayerZM
$LN8@P_PlayerZM:
  00760	8b 45 e0	 mov	 eax, DWORD PTR _i$5[ebp]
  00763	83 c0 01	 add	 eax, 1
  00766	89 45 e0	 mov	 DWORD PTR _i$5[ebp], eax
$LN10@P_PlayerZM:
  00769	8b 45 e0	 mov	 eax, DWORD PTR _i$5[ebp]
  0076c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsubsectors
  00772	0f 83 d2 00 00
	00		 jae	 $LN9@P_PlayerZM

; 1953 : 						{
; 1954 : 							newsubsec = &subsectors[i];

  00778	6b 45 e0 14	 imul	 eax, DWORD PTR _i$5[ebp], 20
  0077c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _subsectors
  00782	89 45 e4	 mov	 DWORD PTR _newsubsec$6[ebp], eax

; 1955 : 
; 1956 : 							if (newsubsec->sector != sec)

  00785	8b 45 e4	 mov	 eax, DWORD PTR _newsubsec$6[ebp]
  00788	8b 08		 mov	 ecx, DWORD PTR [eax]
  0078a	3b 4d e8	 cmp	 ecx, DWORD PTR _sec$7[ebp]
  0078d	74 02		 je	 SHORT $LN69@P_PlayerZM

; 1957 : 								continue;

  0078f	eb cf		 jmp	 SHORT $LN8@P_PlayerZM
$LN69@P_PlayerZM:

; 1958 : 
; 1959 : 							if (newsubsec->polyList)

  00791	8b 45 e4	 mov	 eax, DWORD PTR _newsubsec$6[ebp]
  00794	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00798	0f 84 a7 00 00
	00		 je	 $LN12@P_PlayerZM

; 1960 : 							{
; 1961 : 								polyobj_t *po = newsubsec->polyList;

  0079e	8b 45 e4	 mov	 eax, DWORD PTR _newsubsec$6[ebp]
  007a1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  007a4	89 4d dc	 mov	 DWORD PTR _po$4[ebp], ecx
$LN130@P_PlayerZM:

; 1962 : 								sector_t *polysec;
; 1963 : 
; 1964 : 								while(po)

  007a7	83 7d dc 00	 cmp	 DWORD PTR _po$4[ebp], 0
  007ab	0f 84 94 00 00
	00		 je	 $LN12@P_PlayerZM

; 1965 : 								{
; 1966 : 									if (!(po->flags & POF_LDEXEC)
; 1967 : 										|| !(po->flags & POF_SOLID))

  007b1	8b 45 dc	 mov	 eax, DWORD PTR _po$4[ebp]
  007b4	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  007ba	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  007c0	74 0e		 je	 SHORT $LN72@P_PlayerZM
  007c2	8b 45 dc	 mov	 eax, DWORD PTR _po$4[ebp]
  007c5	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  007cb	83 e1 03	 and	 ecx, 3
  007ce	75 0a		 jne	 SHORT $LN71@P_PlayerZM
$LN72@P_PlayerZM:

; 1968 : 									{
; 1969 : 										po = (polyobj_t *)(po->link.next);

  007d0	8b 45 dc	 mov	 eax, DWORD PTR _po$4[ebp]
  007d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  007d5	89 4d dc	 mov	 DWORD PTR _po$4[ebp], ecx

; 1970 : 										continue;

  007d8	eb cd		 jmp	 SHORT $LN130@P_PlayerZM
$LN71@P_PlayerZM:

; 1971 : 									}
; 1972 : 
; 1973 : 									if (!P_MobjInsidePolyobj(po, mo))

  007da	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007dd	50		 push	 eax
  007de	8b 4d dc	 mov	 ecx, DWORD PTR _po$4[ebp]
  007e1	51		 push	 ecx
  007e2	e8 00 00 00 00	 call	 _P_MobjInsidePolyobj
  007e7	83 c4 08	 add	 esp, 8
  007ea	85 c0		 test	 eax, eax
  007ec	75 0a		 jne	 SHORT $LN73@P_PlayerZM

; 1974 : 									{
; 1975 : 										po = (polyobj_t *)(po->link.next);

  007ee	8b 45 dc	 mov	 eax, DWORD PTR _po$4[ebp]
  007f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  007f3	89 4d dc	 mov	 DWORD PTR _po$4[ebp], ecx

; 1976 : 										continue;

  007f6	eb af		 jmp	 SHORT $LN130@P_PlayerZM
$LN73@P_PlayerZM:

; 1977 : 									}
; 1978 : 
; 1979 : 									// We're inside it! Yess...
; 1980 : 									polysec = po->lines[0]->backsector;

  007f8	b8 04 00 00 00	 mov	 eax, 4
  007fd	6b c8 00	 imul	 ecx, eax, 0
  00800	8b 55 dc	 mov	 edx, DWORD PTR _po$4[ebp]
  00803	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00806	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00809	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0080c	89 55 d8	 mov	 DWORD PTR _polysec$3[ebp], edx

; 1981 : 
; 1982 : 									if (mo->z == polysec->ceilingheight)

  0080f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00812	8b 4d d8	 mov	 ecx, DWORD PTR _polysec$3[ebp]
  00815	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00818	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0081b	75 1b		 jne	 SHORT $LN74@P_PlayerZM

; 1983 : 									{
; 1984 : 										// We're landing on a PO, so check for
; 1985 : 										// a linedef executor.
; 1986 : 										// Trigger tags are 32000 + the PO's ID number.
; 1987 : 										P_LinedefExecute(32000 + po->id, mo, NULL);

  0081d	6a 00		 push	 0
  0081f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00822	50		 push	 eax
  00823	8b 4d dc	 mov	 ecx, DWORD PTR _po$4[ebp]
  00826	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00829	81 c2 00 7d 00
	00		 add	 edx, 32000		; 00007d00H
  0082f	52		 push	 edx
  00830	e8 00 00 00 00	 call	 _P_LinedefExecute
  00835	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN74@P_PlayerZM:

; 1988 : 									}
; 1989 : 
; 1990 : 									po = (polyobj_t *)(po->link.next);

  00838	8b 45 dc	 mov	 eax, DWORD PTR _po$4[ebp]
  0083b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0083d	89 4d dc	 mov	 DWORD PTR _po$4[ebp], ecx

; 1991 : 								}

  00840	e9 62 ff ff ff	 jmp	 $LN130@P_PlayerZM
$LN12@P_PlayerZM:

; 1992 : 							}
; 1993 : 						}

  00845	e9 16 ff ff ff	 jmp	 $LN8@P_PlayerZM
$LN9@P_PlayerZM:

; 1994 : 					}

  0084a	e9 ed fe ff ff	 jmp	 $LN5@P_PlayerZM
$LN6@P_PlayerZM:

; 1995 : #endif
; 1996 : 
; 1997 : 					// Cut momentum in half when you hit the ground and
; 1998 : 					// aren't pressing any controls.
; 1999 : 					if (!(mo->player->cmd.forwardmove || mo->player->cmd.sidemove) && !mo->player->cmomx && !mo->player->cmomy && !(mo->player->pflags & PF_SPINNING))

  0084f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00852	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00858	0f be 51 08	 movsx	 edx, BYTE PTR [ecx+8]
  0085c	85 d2		 test	 edx, edx
  0085e	75 6e		 jne	 SHORT $LN75@P_PlayerZM
  00860	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00863	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00869	0f be 51 09	 movsx	 edx, BYTE PTR [ecx+9]
  0086d	85 d2		 test	 edx, edx
  0086f	75 5d		 jne	 SHORT $LN75@P_PlayerZM
  00871	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00874	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0087a	83 b9 3c 01 00
	00 00		 cmp	 DWORD PTR [ecx+316], 0
  00881	75 4b		 jne	 SHORT $LN75@P_PlayerZM
  00883	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00886	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0088c	83 b9 40 01 00
	00 00		 cmp	 DWORD PTR [ecx+320], 0
  00893	75 39		 jne	 SHORT $LN75@P_PlayerZM
  00895	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00898	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0089e	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  008a4	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  008aa	75 22		 jne	 SHORT $LN75@P_PlayerZM

; 2000 : 					{
; 2001 : 						mo->momx = mo->momx/2;

  008ac	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008af	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  008b2	99		 cdq
  008b3	2b c2		 sub	 eax, edx
  008b5	d1 f8		 sar	 eax, 1
  008b7	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  008ba	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 2002 : 						mo->momy = mo->momy/2;

  008bd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008c0	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  008c3	99		 cdq
  008c4	2b c2		 sub	 eax, edx
  008c6	d1 f8		 sar	 eax, 1
  008c8	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  008cb	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN75@P_PlayerZM:

; 2003 : 					}
; 2004 : 				}
; 2005 : 
; 2006 : 				if (mo->health)

  008ce	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008d1	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  008d8	0f 84 1a 04 00
	00		 je	 $LN76@P_PlayerZM

; 2007 : 				{
; 2008 : 					if (!(mo->player->pflags & PF_SPINNING) || !(mo->player->pflags & PF_USEDOWN) || (mo->player->pflags & PF_JUMPED))

  008de	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008e1	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  008e7	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  008ed	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  008f3	74 2f		 je	 SHORT $LN78@P_PlayerZM
  008f5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008f8	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  008fe	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00904	83 e2 04	 and	 edx, 4
  00907	74 1b		 je	 SHORT $LN78@P_PlayerZM
  00909	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0090c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00912	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00918	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  0091e	0f 84 80 02 00
	00		 je	 $LN96@P_PlayerZM
$LN78@P_PlayerZM:

; 2009 : 					{
; 2010 : 						if (mo->player->cmomx || mo->player->cmomy)

  00924	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00927	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0092d	83 b9 3c 01 00
	00 00		 cmp	 DWORD PTR [ecx+316], 0
  00934	75 16		 jne	 SHORT $LN81@P_PlayerZM
  00936	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00939	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0093f	83 b9 40 01 00
	00 00		 cmp	 DWORD PTR [ecx+320], 0
  00946	0f 84 87 01 00
	00		 je	 $LN79@P_PlayerZM
$LN81@P_PlayerZM:

; 2011 : 						{
; 2012 : 							if (mo->player->speed > mo->player->runspeed && !(mo->player->pflags & PF_RUNNINGANIM))

  0094c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0094f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00955	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00958	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0095e	8b 89 0c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+268]
  00964	3b 88 c8 00 00
	00		 cmp	 ecx, DWORD PTR [eax+200]
  0096a	7e 2a		 jle	 SHORT $LN82@P_PlayerZM
  0096c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0096f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00975	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  0097b	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00981	75 13		 jne	 SHORT $LN82@P_PlayerZM

; 2013 : 								P_SetPlayerMobjState(mo, S_PLAY_SPD1);

  00983	6a 11		 push	 17			; 00000011H
  00985	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00988	50		 push	 eax
  00989	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0098e	83 c4 08	 add	 esp, 8
  00991	e9 38 01 00 00	 jmp	 $LN90@P_PlayerZM
$LN82@P_PlayerZM:

; 2014 : 							else if ((mo->player->rmomx > STOPSPEED
; 2015 : 								|| mo->player->rmomy > STOPSPEED) && !(mo->player->pflags & PF_WALKINGANIM))

  00996	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00999	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0099f	81 b9 44 01 00
	00 00 00 01 00	 cmp	 DWORD PTR [ecx+324], 65536 ; 00010000H
  009a9	7f 15		 jg	 SHORT $LN86@P_PlayerZM
  009ab	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009ae	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  009b4	81 b9 48 01 00
	00 00 00 01 00	 cmp	 DWORD PTR [ecx+328], 65536 ; 00010000H
  009be	7e 2a		 jle	 SHORT $LN84@P_PlayerZM
$LN86@P_PlayerZM:
  009c0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009c3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  009c9	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  009cf	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  009d5	75 13		 jne	 SHORT $LN84@P_PlayerZM

; 2016 : 								P_SetPlayerMobjState(mo, S_PLAY_RUN1);

  009d7	6a 04		 push	 4
  009d9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009dc	50		 push	 eax
  009dd	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  009e2	83 c4 08	 add	 esp, 8
  009e5	e9 e4 00 00 00	 jmp	 $LN90@P_PlayerZM
$LN84@P_PlayerZM:

; 2017 : 							else if ((mo->player->rmomx < -STOPSPEED
; 2018 : 								|| mo->player->rmomy < -STOPSPEED) && !(mo->player->pflags & PF_WALKINGANIM))

  009ea	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009ed	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  009f3	81 b9 44 01 00
	00 00 00 ff ff	 cmp	 DWORD PTR [ecx+324], -65536 ; ffff0000H
  009fd	7c 15		 jl	 SHORT $LN89@P_PlayerZM
  009ff	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a02	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a08	81 b9 48 01 00
	00 00 00 ff ff	 cmp	 DWORD PTR [ecx+328], -65536 ; ffff0000H
  00a12	7d 2a		 jge	 SHORT $LN87@P_PlayerZM
$LN89@P_PlayerZM:
  00a14	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a17	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a1d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00a23	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  00a29	75 13		 jne	 SHORT $LN87@P_PlayerZM

; 2019 : 								P_SetPlayerMobjState(mo, S_PLAY_RUN1);

  00a2b	6a 04		 push	 4
  00a2d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a30	50		 push	 eax
  00a31	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00a36	83 c4 08	 add	 esp, 8
  00a39	e9 90 00 00 00	 jmp	 $LN90@P_PlayerZM
$LN87@P_PlayerZM:

; 2020 : 							else if ((mo->player->rmomx < FRACUNIT
; 2021 : 								&& mo->player->rmomx > -FRACUNIT && mo->player->rmomy < FRACUNIT && mo->player->rmomy > -FRACUNIT) && !((mo->player->pflags & PF_WALKINGANIM) || (mo->player->pflags & PF_RUNNINGANIM)))

  00a3e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a41	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a47	81 b9 44 01 00
	00 00 00 01 00	 cmp	 DWORD PTR [ecx+324], 65536 ; 00010000H
  00a51	7d 7b		 jge	 SHORT $LN90@P_PlayerZM
  00a53	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a56	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a5c	81 b9 44 01 00
	00 00 00 ff ff	 cmp	 DWORD PTR [ecx+324], -65536 ; ffff0000H
  00a66	7e 66		 jle	 SHORT $LN90@P_PlayerZM
  00a68	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a6b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a71	81 b9 48 01 00
	00 00 00 01 00	 cmp	 DWORD PTR [ecx+328], 65536 ; 00010000H
  00a7b	7d 51		 jge	 SHORT $LN90@P_PlayerZM
  00a7d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a80	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a86	81 b9 48 01 00
	00 00 00 ff ff	 cmp	 DWORD PTR [ecx+328], -65536 ; ffff0000H
  00a90	7e 3c		 jle	 SHORT $LN90@P_PlayerZM
  00a92	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a95	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a9b	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00aa1	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  00aa7	75 25		 jne	 SHORT $LN90@P_PlayerZM
  00aa9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00aac	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00ab2	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00ab8	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00abe	75 0e		 jne	 SHORT $LN90@P_PlayerZM

; 2022 : 								P_SetPlayerMobjState(mo, S_PLAY_STND);

  00ac0	6a 01		 push	 1
  00ac2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ac5	50		 push	 eax
  00ac6	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00acb	83 c4 08	 add	 esp, 8
$LN90@P_PlayerZM:

; 2023 : 						}

  00ace	e9 d1 00 00 00	 jmp	 $LN96@P_PlayerZM
$LN79@P_PlayerZM:

; 2024 : 						else
; 2025 : 						{
; 2026 : 							if (mo->player->speed > mo->player->runspeed && !(mo->player->pflags & PF_RUNNINGANIM))

  00ad3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ad6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00adc	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00adf	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00ae5	8b 89 0c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+268]
  00aeb	3b 88 c8 00 00
	00		 cmp	 ecx, DWORD PTR [eax+200]
  00af1	7e 2a		 jle	 SHORT $LN91@P_PlayerZM
  00af3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00af6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00afc	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00b02	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00b08	75 13		 jne	 SHORT $LN91@P_PlayerZM

; 2027 : 								P_SetPlayerMobjState(mo, S_PLAY_SPD1);

  00b0a	6a 11		 push	 17			; 00000011H
  00b0c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b0f	50		 push	 eax
  00b10	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00b15	83 c4 08	 add	 esp, 8
  00b18	e9 87 00 00 00	 jmp	 $LN96@P_PlayerZM
$LN91@P_PlayerZM:

; 2028 : 							else if ((mo->momx || mo->momy) && !(mo->player->pflags & PF_WALKINGANIM))

  00b1d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b20	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00b24	75 09		 jne	 SHORT $LN95@P_PlayerZM
  00b26	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b29	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00b2d	74 27		 je	 SHORT $LN93@P_PlayerZM
$LN95@P_PlayerZM:
  00b2f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b32	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00b38	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00b3e	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  00b44	75 10		 jne	 SHORT $LN93@P_PlayerZM

; 2029 : 								P_SetPlayerMobjState(mo, S_PLAY_RUN1);

  00b46	6a 04		 push	 4
  00b48	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b4b	50		 push	 eax
  00b4c	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00b51	83 c4 08	 add	 esp, 8
  00b54	eb 4e		 jmp	 SHORT $LN96@P_PlayerZM
$LN93@P_PlayerZM:

; 2030 : 							else if (!mo->momx && !mo->momy && !((mo->player->pflags & PF_WALKINGANIM) || (mo->player->pflags & PF_RUNNINGANIM)))

  00b56	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b59	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00b5d	75 45		 jne	 SHORT $LN96@P_PlayerZM
  00b5f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b62	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00b66	75 3c		 jne	 SHORT $LN96@P_PlayerZM
  00b68	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b6b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00b71	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00b77	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  00b7d	75 25		 jne	 SHORT $LN96@P_PlayerZM
  00b7f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b82	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00b88	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00b8e	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00b94	75 0e		 jne	 SHORT $LN96@P_PlayerZM

; 2031 : 								P_SetPlayerMobjState(mo, S_PLAY_STND);

  00b96	6a 01		 push	 1
  00b98	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b9b	50		 push	 eax
  00b9c	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00ba1	83 c4 08	 add	 esp, 8
$LN96@P_PlayerZM:

; 2032 : 						}
; 2033 : 					}
; 2034 : 
; 2035 : 					if (mo->player->pflags & PF_JUMPED)

  00ba4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ba7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00bad	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00bb3	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  00bb9	74 26		 je	 SHORT $LN97@P_PlayerZM

; 2036 : 						mo->player->pflags &= ~PF_SPINNING;

  00bbb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bbe	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00bc4	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00bca	81 e2 ff df ff
	ff		 and	 edx, -8193		; ffffdfffH
  00bd0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bd3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00bd9	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx
  00bdf	eb 38		 jmp	 SHORT $LN99@P_PlayerZM
$LN97@P_PlayerZM:

; 2037 : 					else if (!(mo->player->pflags & PF_USEDOWN))

  00be1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00be4	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00bea	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00bf0	83 e2 04	 and	 edx, 4
  00bf3	75 24		 jne	 SHORT $LN99@P_PlayerZM

; 2038 : 						mo->player->pflags &= ~PF_SPINNING;

  00bf5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bf8	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00bfe	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00c04	81 e2 ff df ff
	ff		 and	 edx, -8193		; ffffdfffH
  00c0a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c0d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c13	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx
$LN99@P_PlayerZM:

; 2039 : 
; 2040 : 					if (!((mo->player->pflags & PF_SPINNING) && (mo->player->pflags & PF_USEDOWN)))

  00c19	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c1c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c22	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00c28	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  00c2e	74 14		 je	 SHORT $LN101@P_PlayerZM
  00c30	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c33	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c39	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00c3f	83 e2 04	 and	 edx, 4
  00c42	75 12		 jne	 SHORT $LN100@P_PlayerZM
$LN101@P_PlayerZM:

; 2041 : 						P_ResetScore(mo->player);

  00c44	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c47	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c4d	51		 push	 ecx
  00c4e	e8 00 00 00 00	 call	 _P_ResetScore
  00c53	83 c4 04	 add	 esp, 4
$LN100@P_PlayerZM:

; 2042 : 
; 2043 : 					mo->player->pflags &= ~PF_JUMPED;

  00c56	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c59	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c5f	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00c65	81 e2 ff ef ff
	ff		 and	 edx, -4097		; ffffefffH
  00c6b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c6e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c74	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 2044 : 					mo->player->pflags &= ~PF_THOKKED;

  00c7a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c7d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c83	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00c89	81 e2 ff 7f ff
	ff		 and	 edx, -32769		; ffff7fffH
  00c8f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c92	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c98	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 2045 : 					mo->player->pflags &= ~PF_GLIDING;

  00c9e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ca1	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00ca7	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00cad	81 e2 ff ff fe
	ff		 and	 edx, -65537		; fffeffffH
  00cb3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cb6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00cbc	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 2046 : 					mo->player->secondjump = 0;

  00cc2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cc5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00ccb	c6 81 14 01 00
	00 00		 mov	 BYTE PTR [ecx+276], 0

; 2047 : 					mo->player->glidetime = 0;

  00cd2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cd5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00cdb	c7 81 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+288], 0

; 2048 : 					mo->player->climbing = 0;

  00ce5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ce8	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00cee	c7 81 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+292], 0
$LN76@P_PlayerZM:

; 2049 : 				}
; 2050 : 			}
; 2051 : 			if (mo->player && !(mo->player->pflags & PF_SPINNING))

  00cf8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cfb	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00d02	74 3b		 je	 SHORT $LN102@P_PlayerZM
  00d04	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d07	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00d0d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00d13	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  00d19	75 24		 jne	 SHORT $LN102@P_PlayerZM

; 2052 : 				mo->player->pflags &= ~PF_STARTDASH;

  00d1b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d1e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00d24	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00d2a	81 e2 ff bf ff
	ff		 and	 edx, -16385		; ffffbfffH
  00d30	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d33	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00d39	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx
$LN102@P_PlayerZM:

; 2053 : 
; 2054 : 			if (!(tmfloorthing) || (((tmfloorthing->flags & MF_PUSHABLE) || (tmfloorthing->flags2 & MF2_STANDONME)) || tmfloorthing->type == MT_PLAYER || tmfloorthing->type == MT_FLOORSPIKE))

  00d3f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  00d46	74 36		 je	 SHORT $LN105@P_PlayerZM
  00d48	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00d4d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00d50	83 e1 40	 and	 ecx, 64			; 00000040H
  00d53	75 29		 jne	 SHORT $LN105@P_PlayerZM
  00d55	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00d5a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00d60	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  00d66	75 16		 jne	 SHORT $LN105@P_PlayerZM
  00d68	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00d6d	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00d71	74 0b		 je	 SHORT $LN105@P_PlayerZM
  00d73	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00d78	83 78 7c 49	 cmp	 DWORD PTR [eax+124], 73	; 00000049H
  00d7c	75 0a		 jne	 SHORT $LN103@P_PlayerZM
$LN105@P_PlayerZM:

; 2055 : 				mo->momz = 0;

  00d7e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d81	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN103@P_PlayerZM:

; 2056 : 		}
; 2057 : 	}

  00d88	eb 45		 jmp	 SHORT $nightsdone$132
$LN39@P_PlayerZM:

; 2058 : 	else if (!(mo->flags & MF_NOGRAVITY)) // Gravity here!

  00d8a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d8d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00d90	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00d96	75 37		 jne	 SHORT $nightsdone$132

; 2059 : 	{
; 2060 : 		/// \todo may not be needed (done in P_MobjThinker normally)
; 2061 : 		mo->eflags &= ~MFE_JUSTHITFLOOR;

  00d98	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d9b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00da1	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00da4	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00da7	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$playergravity$131:

; 2062 : 
; 2063 : playergravity:
; 2064 : 		P_CheckGravity(mo, true);

  00dad	6a 01		 push	 1
  00daf	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00db2	50		 push	 eax
  00db3	e8 00 00 00 00	 call	 _P_CheckGravity
  00db8	83 c4 08	 add	 esp, 8

; 2065 : 
; 2066 : 		if (mo->player->playerstate == PST_DEAD)

  00dbb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00dbe	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00dc4	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  00dc8	75 05		 jne	 SHORT $nightsdone$132

; 2067 : 			return;

  00dca	e9 e2 02 00 00	 jmp	 $LN127@P_PlayerZM
$nightsdone$132:

; 2068 : 	}
; 2069 : 
; 2070 : nightsdone:
; 2071 : 
; 2072 : 	if ((mo->eflags & MFE_VERTICALFLIP && mo->z < mo->floorz) || (!(mo->eflags & MFE_VERTICALFLIP) && mo->z + mo->height > mo->ceilingz))

  00dcf	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00dd2	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00dd8	83 e1 20	 and	 ecx, 32			; 00000020H
  00ddb	74 0e		 je	 SHORT $LN110@P_PlayerZM
  00ddd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00de0	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00de3	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00de6	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00de9	7c 2a		 jl	 SHORT $LN109@P_PlayerZM
$LN110@P_PlayerZM:
  00deb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00dee	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00df4	83 e1 20	 and	 ecx, 32			; 00000020H
  00df7	0f 85 b4 02 00
	00		 jne	 $LN127@P_PlayerZM
  00dfd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e00	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00e03	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00e06	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00e09	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e0c	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00e0f	0f 8e 9c 02 00
	00		 jle	 $LN127@P_PlayerZM
$LN109@P_PlayerZM:

; 2073 : 	{
; 2074 : 		if (mo->player && (mo->player->pflags & PF_NIGHTSMODE))

  00e15	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e18	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00e1f	0f 84 05 01 00
	00		 je	 $LN111@P_PlayerZM
  00e25	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e28	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00e2e	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00e34	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  00e3a	0f 84 ea 00 00
	00		 je	 $LN111@P_PlayerZM

; 2075 : 		{
; 2076 : 			if (mo->player->flyangle < 90 || mo->player->flyangle >= 270)

  00e40	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e43	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00e49	83 b9 b0 01 00
	00 5a		 cmp	 DWORD PTR [ecx+432], 90	; 0000005aH
  00e50	7c 15		 jl	 SHORT $LN114@P_PlayerZM
  00e52	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e55	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00e5b	81 b9 b0 01 00
	00 0e 01 00 00	 cmp	 DWORD PTR [ecx+432], 270 ; 0000010eH
  00e65	7c 23		 jl	 SHORT $LN112@P_PlayerZM
$LN114@P_PlayerZM:

; 2077 : 				mo->player->flyangle -= 90;

  00e67	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e6a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00e70	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  00e76	83 ea 5a	 sub	 edx, 90			; 0000005aH
  00e79	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e7c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00e82	89 91 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], edx
  00e88	eb 21		 jmp	 SHORT $LN113@P_PlayerZM
$LN112@P_PlayerZM:

; 2078 : 			else
; 2079 : 				mo->player->flyangle += 90;

  00e8a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e8d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00e93	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  00e99	83 c2 5a	 add	 edx, 90			; 0000005aH
  00e9c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e9f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00ea5	89 91 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], edx
$LN113@P_PlayerZM:

; 2080 : 			mo->player->flyangle %= 360;

  00eab	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00eae	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00eb4	8b 81 b0 01 00
	00		 mov	 eax, DWORD PTR [ecx+432]
  00eba	99		 cdq
  00ebb	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  00ec0	f7 f9		 idiv	 ecx
  00ec2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ec5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00ecb	89 91 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], edx

; 2081 : 			mo->z = mo->ceilingz - mo->height;

  00ed1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ed4	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00ed7	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00eda	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  00edd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ee0	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 2082 : 			mo->player->speed /= 5;

  00ee3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ee6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00eec	8b 81 0c 01 00
	00		 mov	 eax, DWORD PTR [ecx+268]
  00ef2	99		 cdq
  00ef3	b9 05 00 00 00	 mov	 ecx, 5
  00ef8	f7 f9		 idiv	 ecx
  00efa	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00efd	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  00f03	89 81 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], eax

; 2083 : 			mo->player->speed *= 4;

  00f09	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f0c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00f12	8b 91 0c 01 00
	00		 mov	 edx, DWORD PTR [ecx+268]
  00f18	c1 e2 02	 shl	 edx, 2
  00f1b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f1e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00f24	89 91 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], edx
$LN111@P_PlayerZM:

; 2084 : 		}
; 2085 : 
; 2086 : 		// Check for "Mario" blocks to hit and bounce them
; 2087 : 		if ((mo->eflags & MFE_VERTICALFLIP && mo->momz < 0)
; 2088 : 			|| (!(mo->eflags & MFE_VERTICALFLIP) && mo->momz > 0))

  00f2a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f2d	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00f33	83 e1 20	 and	 ecx, 32			; 00000020H
  00f36	74 09		 je	 SHORT $LN117@P_PlayerZM
  00f38	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f3b	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00f3f	7c 1f		 jl	 SHORT $LN116@P_PlayerZM
$LN117@P_PlayerZM:
  00f41	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f44	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00f4a	83 e1 20	 and	 ecx, 32			; 00000020H
  00f4d	0f 85 30 01 00
	00		 jne	 $LN124@P_PlayerZM
  00f53	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f56	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00f5a	0f 8e 23 01 00
	00		 jle	 $LN124@P_PlayerZM
$LN116@P_PlayerZM:

; 2089 : 		{
; 2090 : 			msecnode_t *node;
; 2091 : 
; 2092 : 			if (CheckForMarioBlocks && mo->player && !(netgame && mo->player->spectator)) // Only let the player punch

  00f60	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CheckForMarioBlocks, 0
  00f67	0f 84 d2 00 00
	00		 je	 $LN14@P_PlayerZM
  00f6d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f70	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00f77	0f 84 c2 00 00
	00		 je	 $LN14@P_PlayerZM
  00f7d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00f84	74 18		 je	 SHORT $LN119@P_PlayerZM
  00f86	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f89	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00f8f	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  00f96	85 d2		 test	 edx, edx
  00f98	0f 85 a1 00 00
	00		 jne	 $LN14@P_PlayerZM
$LN119@P_PlayerZM:

; 2093 : 			{
; 2094 : 				// Search the touching sectors, from side-to-side...
; 2095 : 				for (node = mo->touching_sectorlist; node; node = node->m_snext)

  00f9e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00fa1	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00fa4	89 4d d4	 mov	 DWORD PTR _node$2[ebp], ecx
  00fa7	eb 09		 jmp	 SHORT $LN15@P_PlayerZM
$LN13@P_PlayerZM:
  00fa9	8b 45 d4	 mov	 eax, DWORD PTR _node$2[ebp]
  00fac	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00faf	89 4d d4	 mov	 DWORD PTR _node$2[ebp], ecx
$LN15@P_PlayerZM:
  00fb2	83 7d d4 00	 cmp	 DWORD PTR _node$2[ebp], 0
  00fb6	0f 84 83 00 00
	00		 je	 $LN14@P_PlayerZM

; 2096 : 				{
; 2097 : 					if (node->m_sector->ffloors)

  00fbc	8b 45 d4	 mov	 eax, DWORD PTR _node$2[ebp]
  00fbf	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fc1	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  00fc8	74 70		 je	 SHORT $LN17@P_PlayerZM

; 2098 : 					{
; 2099 : 						ffloor_t *rover;
; 2100 : 
; 2101 : 						for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  00fca	8b 45 d4	 mov	 eax, DWORD PTR _node$2[ebp]
  00fcd	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fcf	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00fd5	89 55 d0	 mov	 DWORD PTR _rover$1[ebp], edx
  00fd8	eb 09		 jmp	 SHORT $LN18@P_PlayerZM
$LN16@P_PlayerZM:
  00fda	8b 45 d0	 mov	 eax, DWORD PTR _rover$1[ebp]
  00fdd	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00fe0	89 4d d0	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN18@P_PlayerZM:
  00fe3	83 7d d0 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  00fe7	74 51		 je	 SHORT $LN17@P_PlayerZM

; 2102 : 						{
; 2103 : 							if (!(rover->flags & FF_EXISTS))

  00fe9	8b 45 d0	 mov	 eax, DWORD PTR _rover$1[ebp]
  00fec	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00fef	83 e1 01	 and	 ecx, 1
  00ff2	75 02		 jne	 SHORT $LN121@P_PlayerZM

; 2104 : 								continue;

  00ff4	eb e4		 jmp	 SHORT $LN16@P_PlayerZM
$LN121@P_PlayerZM:

; 2105 : 
; 2106 : 							// Come on, it's time to go...
; 2107 : 							if (rover->flags & FF_MARIO
; 2108 : 								&& *rover->bottomheight == mo->ceilingz) // The player's head hit the bottom!

  00ff6	8b 45 d0	 mov	 eax, DWORD PTR _rover$1[ebp]
  00ff9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00ffc	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  01002	74 34		 je	 SHORT $LN122@P_PlayerZM
  01004	8b 45 d0	 mov	 eax, DWORD PTR _rover$1[ebp]
  01007	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0100a	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0100d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0100f	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  01012	75 24		 jne	 SHORT $LN122@P_PlayerZM

; 2109 : 							{
; 2110 : 								// DO THE MARIO!
; 2111 : 								EV_MarioBlock(rover->master->frontsector, node->m_sector, *rover->topheight, mo);

  01014	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01017	50		 push	 eax
  01018	8b 4d d0	 mov	 ecx, DWORD PTR _rover$1[ebp]
  0101b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0101d	8b 02		 mov	 eax, DWORD PTR [edx]
  0101f	50		 push	 eax
  01020	8b 4d d4	 mov	 ecx, DWORD PTR _node$2[ebp]
  01023	8b 11		 mov	 edx, DWORD PTR [ecx]
  01025	52		 push	 edx
  01026	8b 45 d0	 mov	 eax, DWORD PTR _rover$1[ebp]
  01029	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0102c	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0102f	52		 push	 edx
  01030	e8 00 00 00 00	 call	 _EV_MarioBlock
  01035	83 c4 10	 add	 esp, 16			; 00000010H
$LN122@P_PlayerZM:

; 2112 : 							}
; 2113 : 						}

  01038	eb a0		 jmp	 SHORT $LN16@P_PlayerZM
$LN17@P_PlayerZM:

; 2114 : 					}
; 2115 : 				} // Ugly ugly billions of braces! Argh!

  0103a	e9 6a ff ff ff	 jmp	 $LN13@P_PlayerZM
$LN14@P_PlayerZM:

; 2116 : 			}
; 2117 : 
; 2118 : 			// hit the ceiling
; 2119 : 			if (mariomode)

  0103f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  01046	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0104b	74 0e		 je	 SHORT $LN123@P_PlayerZM

; 2120 : 				S_StartSound(mo, sfx_mario1);

  0104d	6a 5d		 push	 93			; 0000005dH
  0104f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01052	50		 push	 eax
  01053	e8 00 00 00 00	 call	 _S_StartSound
  01058	83 c4 08	 add	 esp, 8
$LN123@P_PlayerZM:

; 2121 : 
; 2122 : 			if (!(mo->player && mo->player->climbing))

  0105b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0105e	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  01065	74 12		 je	 SHORT $LN125@P_PlayerZM
  01067	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0106a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  01070	83 b9 24 01 00
	00 00		 cmp	 DWORD PTR [ecx+292], 0
  01077	75 0a		 jne	 SHORT $LN124@P_PlayerZM
$LN125@P_PlayerZM:

; 2123 : 				mo->momz = 0;

  01079	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0107c	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN124@P_PlayerZM:

; 2124 : 		}
; 2125 : 
; 2126 : 		if (mo->eflags & MFE_VERTICALFLIP)

  01083	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01086	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0108c	83 e1 20	 and	 ecx, 32			; 00000020H
  0108f	74 0e		 je	 SHORT $LN126@P_PlayerZM

; 2127 : 			mo->z = mo->floorz;

  01091	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01094	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  01097	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0109a	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0109d	eb 12		 jmp	 SHORT $LN127@P_PlayerZM
$LN126@P_PlayerZM:

; 2128 : 		else
; 2129 : 			mo->z = mo->ceilingz - mo->height;

  0109f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010a2	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  010a5	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  010a8	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  010ab	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010ae	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN127@P_PlayerZM:

; 2130 : 	}
; 2131 : }

  010b1	5f		 pop	 edi
  010b2	5e		 pop	 esi
  010b3	5b		 pop	 ebx
  010b4	8b e5		 mov	 esp, ebp
  010b6	5d		 pop	 ebp
  010b7	c3		 ret	 0
_P_PlayerZMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_ZMovement
_TEXT	SEGMENT
tv231 = -104						; size = 4
_prandom$1 = -33					; size = 1
_explodemo$2 = -32					; size = 4
_prandom$3 = -25					; size = 1
_thingtop$4 = -24					; size = 4
_delta2$5 = -20						; size = 4
_delta1$6 = -16						; size = 4
_rover$7 = -12						; size = 4
_delta$ = -8						; size = 4
_dist$ = -4						; size = 4
_mo$ = 8						; size = 4
_P_ZMovement PROC					; COMDAT

; 1345 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1346 : 	fixed_t dist, delta;
; 1347 : 
; 1348 : 	// Intercept the stupid 'fall through 3dfloors' bug
; 1349 : 	if (mo->subsector->sector->ffloors)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	83 ba 90 00 00
	00 00		 cmp	 DWORD PTR [edx+144], 0
  00018	0f 84 11 02 00
	00		 je	 $LN3@P_ZMovemen

; 1350 : 	{
; 1351 : 		ffloor_t *rover;
; 1352 : 		fixed_t delta1, delta2, thingtop = mo->z + mo->height;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00021	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00024	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00027	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0002a	89 4d e8	 mov	 DWORD PTR _thingtop$4[ebp], ecx

; 1353 : 
; 1354 : 		for (rover = mo->subsector->sector->ffloors; rover; rover = rover->next)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00030	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0003b	89 45 f4	 mov	 DWORD PTR _rover$7[ebp], eax
  0003e	eb 09		 jmp	 SHORT $LN4@P_ZMovemen
$LN2@P_ZMovemen:
  00040	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  00043	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00046	89 4d f4	 mov	 DWORD PTR _rover$7[ebp], ecx
$LN4@P_ZMovemen:
  00049	83 7d f4 00	 cmp	 DWORD PTR _rover$7[ebp], 0
  0004d	0f 84 dc 01 00
	00		 je	 $LN3@P_ZMovemen

; 1355 : 		{
; 1356 : #if 0 // I question the utility of having four seperate z movement functions.
; 1357 : 			if (!(rover->flags & FF_EXISTS)
; 1358 : 				|| (!((((rover->flags & FF_BLOCKPLAYER) && mo->player)
; 1359 : 				|| ((rover->flags & FF_BLOCKOTHERS) && !mo->player)) || rover->flags & FF_QUICKSAND)
; 1360 : 				|| (rover->flags & FF_SWIMMABLE)))
; 1361 : 			{
; 1362 : 				continue;
; 1363 : 			}
; 1364 : #else
; 1365 : 			if (!(rover->flags & FF_EXISTS))

  00053	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  00056	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00059	83 e1 01	 and	 ecx, 1
  0005c	75 02		 jne	 SHORT $LN8@P_ZMovemen

; 1366 : 				continue;

  0005e	eb e0		 jmp	 SHORT $LN2@P_ZMovemen
$LN8@P_ZMovemen:

; 1367 : 
; 1368 : 			//Solid lava surfaces. Mobjs with MF_FIRE ignore it cuz they live in lava. :3
; 1369 : 			if ((rover->flags & FF_SWIMMABLE) && GETSECSPECIAL(rover->master->frontsector->special, 1) == 3
; 1370 : 				&& !(rover->master->flags & ML_BLOCKMONSTERS)
; 1371 : 				&& ((rover->master->flags & ML_EFFECT3) || (mo->z-mo->momz > *rover->topheight - 16*FRACUNIT && !(mo->flags & MF_FIRE))))

  00060	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  00063	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00066	83 e1 20	 and	 ecx, 32			; 00000020H
  00069	74 62		 je	 SHORT $LN9@P_ZMovemen
  0006b	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  0006e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00071	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00074	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  00078	83 e0 0f	 and	 eax, 15			; 0000000fH
  0007b	83 f8 03	 cmp	 eax, 3
  0007e	75 4d		 jne	 SHORT $LN9@P_ZMovemen
  00080	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  00083	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00086	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0008a	83 e2 02	 and	 edx, 2
  0008d	75 3e		 jne	 SHORT $LN9@P_ZMovemen
  0008f	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  00092	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00095	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00099	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  0009f	75 2a		 jne	 SHORT $LN11@P_ZMovemen
  000a1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  000a7	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000aa	2b 51 50	 sub	 edx, DWORD PTR [ecx+80]
  000ad	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  000b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b4	2d 00 00 10 00	 sub	 eax, 1048576		; 00100000H
  000b9	3b d0		 cmp	 edx, eax
  000bb	7e 10		 jle	 SHORT $LN9@P_ZMovemen
  000bd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000c0	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000c3	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  000c9	75 02		 jne	 SHORT $LN9@P_ZMovemen
$LN11@P_ZMovemen:

; 1372 : 				;

  000cb	eb 41		 jmp	 SHORT $LN12@P_ZMovemen
$LN9@P_ZMovemen:

; 1373 : 			else if (!((((rover->flags & FF_BLOCKPLAYER) && mo->player)

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  000d0	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000d3	83 e1 02	 and	 ecx, 2
  000d6	74 0c		 je	 SHORT $LN13@P_ZMovemen
  000d8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000db	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000e2	75 2a		 jne	 SHORT $LN12@P_ZMovemen
$LN13@P_ZMovemen:
  000e4	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  000e7	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000ea	83 e1 04	 and	 ecx, 4
  000ed	74 0c		 je	 SHORT $LN14@P_ZMovemen
  000ef	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000f2	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000f9	74 13		 je	 SHORT $LN12@P_ZMovemen
$LN14@P_ZMovemen:
  000fb	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  000fe	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00101	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00107	75 05		 jne	 SHORT $LN12@P_ZMovemen

; 1374 : 				|| ((rover->flags & FF_BLOCKOTHERS) && !mo->player))
; 1375 : 				|| rover->flags & FF_QUICKSAND))
; 1376 : 				continue;

  00109	e9 32 ff ff ff	 jmp	 $LN2@P_ZMovemen
$LN12@P_ZMovemen:

; 1377 : #endif
; 1378 : 			if (rover->flags & FF_QUICKSAND)

  0010e	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  00111	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00114	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0011a	74 2d		 je	 SHORT $LN16@P_ZMovemen

; 1379 : 			{
; 1380 : 				if (mo->z < *rover->topheight && *rover->bottomheight < thingtop)

  0011c	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  0011f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00121	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00124	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00127	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00129	7d 1e		 jge	 SHORT $LN16@P_ZMovemen
  0012b	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  0012e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00131	8b 11		 mov	 edx, DWORD PTR [ecx]
  00133	3b 55 e8	 cmp	 edx, DWORD PTR _thingtop$4[ebp]
  00136	7d 11		 jge	 SHORT $LN16@P_ZMovemen

; 1381 : 				{
; 1382 : 					mo->floorz = mo->z;

  00138	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0013e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00141	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 1383 : 					continue;

  00144	e9 f7 fe ff ff	 jmp	 $LN2@P_ZMovemen
$LN16@P_ZMovemen:

; 1384 : 				}
; 1385 : 			}
; 1386 : 
; 1387 : 			delta1 = mo->z - (*rover->bottomheight + ((*rover->topheight - *rover->bottomheight)/2));

  00149	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  0014c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0014f	8b 55 f4	 mov	 edx, DWORD PTR _rover$7[ebp]
  00152	8b 02		 mov	 eax, DWORD PTR [edx]
  00154	8b 55 f4	 mov	 edx, DWORD PTR _rover$7[ebp]
  00157	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  0015a	8b 00		 mov	 eax, DWORD PTR [eax]
  0015c	2b 02		 sub	 eax, DWORD PTR [edx]
  0015e	99		 cdq
  0015f	2b c2		 sub	 eax, edx
  00161	d1 f8		 sar	 eax, 1
  00163	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00165	03 c8		 add	 ecx, eax
  00167	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0016a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0016d	2b c1		 sub	 eax, ecx
  0016f	89 45 f0	 mov	 DWORD PTR _delta1$6[ebp], eax

; 1388 : 			delta2 = thingtop - (*rover->bottomheight + ((*rover->topheight - *rover->bottomheight)/2));

  00172	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  00175	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00178	8b 55 f4	 mov	 edx, DWORD PTR _rover$7[ebp]
  0017b	8b 02		 mov	 eax, DWORD PTR [edx]
  0017d	8b 55 f4	 mov	 edx, DWORD PTR _rover$7[ebp]
  00180	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00183	8b 00		 mov	 eax, DWORD PTR [eax]
  00185	2b 02		 sub	 eax, DWORD PTR [edx]
  00187	99		 cdq
  00188	2b c2		 sub	 eax, edx
  0018a	d1 f8		 sar	 eax, 1
  0018c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0018e	03 c8		 add	 ecx, eax
  00190	8b 55 e8	 mov	 edx, DWORD PTR _thingtop$4[ebp]
  00193	2b d1		 sub	 edx, ecx
  00195	89 55 ec	 mov	 DWORD PTR _delta2$5[ebp], edx

; 1389 : 			if (*rover->topheight > mo->floorz && abs(delta1) < abs(delta2)
; 1390 : 				&& (!(rover->flags & FF_REVERSEPLATFORM)))

  00198	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  0019b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001a0	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a2	3b 42 38	 cmp	 eax, DWORD PTR [edx+56]
  001a5	7e 39		 jle	 SHORT $LN17@P_ZMovemen
  001a7	8b 45 f0	 mov	 eax, DWORD PTR _delta1$6[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _abs
  001b0	83 c4 04	 add	 esp, 4
  001b3	8b f0		 mov	 esi, eax
  001b5	8b 4d ec	 mov	 ecx, DWORD PTR _delta2$5[ebp]
  001b8	51		 push	 ecx
  001b9	e8 00 00 00 00	 call	 _abs
  001be	83 c4 04	 add	 esp, 4
  001c1	3b f0		 cmp	 esi, eax
  001c3	7d 1b		 jge	 SHORT $LN17@P_ZMovemen
  001c5	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  001c8	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  001cb	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  001d1	75 0d		 jne	 SHORT $LN17@P_ZMovemen

; 1391 : 			{
; 1392 : 				mo->floorz = *rover->topheight;

  001d3	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  001d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d8	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001db	8b 01		 mov	 eax, DWORD PTR [ecx]
  001dd	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN17@P_ZMovemen:

; 1393 : 			}
; 1394 : 			if (*rover->bottomheight < mo->ceilingz && abs(delta1) >= abs(delta2)
; 1395 : 				&& (/*mo->z + mo->height <= *rover->bottomheight ||*/ !(rover->flags & FF_PLATFORM)))

  001e0	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  001e3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001e6	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001eb	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  001ee	7d 3a		 jge	 SHORT $LN18@P_ZMovemen
  001f0	8b 45 f0	 mov	 eax, DWORD PTR _delta1$6[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 _abs
  001f9	83 c4 04	 add	 esp, 4
  001fc	8b f0		 mov	 esi, eax
  001fe	8b 4d ec	 mov	 ecx, DWORD PTR _delta2$5[ebp]
  00201	51		 push	 ecx
  00202	e8 00 00 00 00	 call	 _abs
  00207	83 c4 04	 add	 esp, 4
  0020a	3b f0		 cmp	 esi, eax
  0020c	7c 1c		 jl	 SHORT $LN18@P_ZMovemen
  0020e	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  00211	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00214	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  0021a	75 0e		 jne	 SHORT $LN18@P_ZMovemen

; 1396 : 			{
; 1397 : 				mo->ceilingz = *rover->bottomheight;

  0021c	8b 45 f4	 mov	 eax, DWORD PTR _rover$7[ebp]
  0021f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00222	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00225	8b 01		 mov	 eax, DWORD PTR [ecx]
  00227	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$LN18@P_ZMovemen:

; 1398 : 			}
; 1399 : 		}

  0022a	e9 11 fe ff ff	 jmp	 $LN2@P_ZMovemen
$LN3@P_ZMovemen:

; 1400 : 	}
; 1401 : 
; 1402 : 	// adjust height
; 1403 : 	if (mo->pmomz && mo->z != mo->floorz)

  0022f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00232	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00236	74 2a		 je	 SHORT $LN19@P_ZMovemen
  00238	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0023b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0023e	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00241	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00244	74 1c		 je	 SHORT $LN19@P_ZMovemen

; 1404 : 	{
; 1405 : 		mo->momz += mo->pmomz;

  00246	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00249	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0024c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0024f	03 4a 54	 add	 ecx, DWORD PTR [edx+84]
  00252	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00255	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 1406 : 		mo->pmomz = 0;

  00258	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0025b	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0
$LN19@P_ZMovemen:

; 1407 : 	}
; 1408 : 	mo->z += mo->momz;

  00262	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00265	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00268	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0026b	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  0026e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00271	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1409 : 
; 1410 : 	switch (mo->type)

  00274	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00277	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0027a	89 4d 98	 mov	 DWORD PTR tv231[ebp], ecx
  0027d	8b 55 98	 mov	 edx, DWORD PTR tv231[ebp]
  00280	83 ea 0a	 sub	 edx, 10			; 0000000aH
  00283	89 55 98	 mov	 DWORD PTR tv231[ebp], edx
  00286	81 7d 98 f2 00
	00 00		 cmp	 DWORD PTR tv231[ebp], 242 ; 000000f2H
  0028d	0f 87 56 05 00
	00		 ja	 $LN66@P_ZMovemen
  00293	8b 45 98	 mov	 eax, DWORD PTR tv231[ebp]
  00296	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN139@P_ZMovemen[eax]
  0029d	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN140@P_ZMovemen[ecx*4]
$LN20@P_ZMovemen:

; 1411 : 	{
; 1412 : 		case MT_THROWNBOUNCE:
; 1413 : 			if ((mo->flags & MF_BOUNCE) && (mo->z <= mo->floorz || mo->z+mo->height >= mo->ceilingz))

  002a4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002a7	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002aa	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  002b0	0f 84 9f 00 00
	00		 je	 $LN23@P_ZMovemen
  002b6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002b9	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  002bc	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  002bf	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  002c2	7e 14		 jle	 SHORT $LN22@P_ZMovemen
  002c4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002c7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002ca	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002cd	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  002d0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002d3	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  002d6	7c 7d		 jl	 SHORT $LN23@P_ZMovemen
$LN22@P_ZMovemen:

; 1414 : 			{
; 1415 : 				mo->momz = -mo->momz;

  002d8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002db	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  002de	f7 d9		 neg	 ecx
  002e0	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002e3	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 1416 : 				mo->z += mo->momz;

  002e6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002e9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002ec	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002ef	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  002f2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002f5	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1417 : 				S_StartSound(mo, mo->info->activesound);

  002f8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002fb	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00301	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00304	52		 push	 edx
  00305	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00308	50		 push	 eax
  00309	e8 00 00 00 00	 call	 _S_StartSound
  0030e	83 c4 08	 add	 esp, 8

; 1418 : 				mo->threshold++;

  00311	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00314	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0031a	83 c1 01	 add	 ecx, 1
  0031d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00320	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 1419 : 
; 1420 : 				// Be sure to change the XY one too if you change this.
; 1421 : 				// Gain lower amounts of time on each bounce.
; 1422 : 				if (mo->threshold < 5)

  00326	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00329	83 b8 a0 00 00
	00 05		 cmp	 DWORD PTR [eax+160], 5
  00330	7d 23		 jge	 SHORT $LN23@P_ZMovemen

; 1423 : 					mo->fuse += ((5 - mo->threshold) * TICRATE);

  00332	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00335	b9 05 00 00 00	 mov	 ecx, 5
  0033a	2b 88 a0 00 00
	00		 sub	 ecx, DWORD PTR [eax+160]
  00340	6b d1 23	 imul	 edx, ecx, 35
  00343	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00346	03 90 bc 00 00
	00		 add	 edx, DWORD PTR [eax+188]
  0034c	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0034f	89 91 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], edx
$LN23@P_ZMovemen:

; 1424 : 			}
; 1425 : 			break;

  00355	e9 8f 04 00 00	 jmp	 $LN5@P_ZMovemen
$LN24@P_ZMovemen:

; 1426 : 
; 1427 : 		case MT_SKIM:
; 1428 : 			// skims don't bounce
; 1429 : 			if (mo->z > mo->watertop && mo->z - mo->momz <= mo->watertop)

  0035a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0035d	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00360	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00363	3b 91 c0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+192]
  00369	7e 42		 jle	 SHORT $LN25@P_ZMovemen
  0036b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0036e	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00371	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00374	2b 51 50	 sub	 edx, DWORD PTR [ecx+80]
  00377	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0037a	3b 90 c0 00 00
	00		 cmp	 edx, DWORD PTR [eax+192]
  00380	7f 2b		 jg	 SHORT $LN25@P_ZMovemen

; 1430 : 			{
; 1431 : 				mo->z = mo->watertop;

  00382	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00385	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00388	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  0038e	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1432 : 				mo->momz = 0;

  00391	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00394	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 1433 : 				mo->flags |= MF_NOGRAVITY;

  0039b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0039e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  003a1	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  003a7	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  003aa	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN25@P_ZMovemen:

; 1434 : 			}
; 1435 : 			break;

  003ad	e9 37 04 00 00	 jmp	 $LN5@P_ZMovemen
$LN26@P_ZMovemen:

; 1436 : 		case MT_GOOP:
; 1437 : 			if (mo->z <= mo->floorz && mo->momz)

  003b2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003b5	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  003b8	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  003bb	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  003be	7f 74		 jg	 SHORT $LN28@P_ZMovemen
  003c0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003c3	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  003c7	74 6b		 je	 SHORT $LN28@P_ZMovemen

; 1438 : 			{
; 1439 : 				P_SetMobjState(mo, mo->info->meleestate);

  003c9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003cc	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  003d2	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  003d5	52		 push	 edx
  003d6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003d9	50		 push	 eax
  003da	e8 00 00 00 00	 call	 _P_SetMobjState
  003df	83 c4 08	 add	 esp, 8

; 1440 : 				mo->momx = mo->momy = mo->momz = 0;

  003e2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003e5	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  003ec	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  003ef	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  003f6	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  003f9	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 1441 : 				mo->z = mo->floorz;

  00400	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00403	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00406	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00409	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1442 : 				if (mo->info->painsound)

  0040c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0040f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00415	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00419	74 19		 je	 SHORT $LN28@P_ZMovemen

; 1443 : 					S_StartSound(mo, mo->info->painsound);

  0041b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0041e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00424	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00427	52		 push	 edx
  00428	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0042b	50		 push	 eax
  0042c	e8 00 00 00 00	 call	 _S_StartSound
  00431	83 c4 08	 add	 esp, 8
$LN28@P_ZMovemen:

; 1444 : 			}
; 1445 : 			break;

  00434	e9 b0 03 00 00	 jmp	 $LN5@P_ZMovemen
$LN29@P_ZMovemen:

; 1446 : 		case MT_SMALLBUBBLE:
; 1447 : 			if (mo->z-mo->momz <= mo->floorz) // Hit the floor, so POP!

  00439	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0043c	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0043f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00442	2b 51 50	 sub	 edx, DWORD PTR [ecx+80]
  00445	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00448	3b 50 38	 cmp	 edx, DWORD PTR [eax+56]
  0044b	0f 8f a0 00 00
	00		 jg	 $LN39@P_ZMovemen

; 1448 : 			{
; 1449 : 				UINT8 prandom;
; 1450 : 
; 1451 : 				P_SetMobjState(mo, S_DISS);

  00451	68 4f 06 00 00	 push	 1615			; 0000064fH
  00456	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 _P_SetMobjState
  0045f	83 c4 08	 add	 esp, 8

; 1452 : 
; 1453 : 				prandom = P_Random();

  00462	e8 00 00 00 00	 call	 _P_Random
  00467	88 45 e7	 mov	 BYTE PTR _prandom$3[ebp], al

; 1454 : 
; 1455 : 				if (mo->threshold == 42) // Don't make pop sound.

  0046a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0046d	83 b8 a0 00 00
	00 2a		 cmp	 DWORD PTR [eax+160], 42	; 0000002aH
  00474	75 05		 jne	 SHORT $LN31@P_ZMovemen

; 1456 : 					break;

  00476	e9 6e 03 00 00	 jmp	 $LN5@P_ZMovemen
$LN31@P_ZMovemen:

; 1457 : 
; 1458 : 				if (prandom <= 51)

  0047b	0f b6 45 e7	 movzx	 eax, BYTE PTR _prandom$3[ebp]
  0047f	83 f8 33	 cmp	 eax, 51			; 00000033H
  00482	7f 10		 jg	 SHORT $LN32@P_ZMovemen

; 1459 : 					S_StartSound(mo, sfx_bubbl1);

  00484	6a 24		 push	 36			; 00000024H
  00486	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00489	50		 push	 eax
  0048a	e8 00 00 00 00	 call	 _S_StartSound
  0048f	83 c4 08	 add	 esp, 8
  00492	eb 5d		 jmp	 SHORT $LN39@P_ZMovemen
$LN32@P_ZMovemen:

; 1460 : 				else if (prandom <= 102)

  00494	0f b6 45 e7	 movzx	 eax, BYTE PTR _prandom$3[ebp]
  00498	83 f8 66	 cmp	 eax, 102		; 00000066H
  0049b	7f 10		 jg	 SHORT $LN34@P_ZMovemen

; 1461 : 					S_StartSound(mo, sfx_bubbl2);

  0049d	6a 25		 push	 37			; 00000025H
  0049f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004a2	50		 push	 eax
  004a3	e8 00 00 00 00	 call	 _S_StartSound
  004a8	83 c4 08	 add	 esp, 8
  004ab	eb 44		 jmp	 SHORT $LN39@P_ZMovemen
$LN34@P_ZMovemen:

; 1462 : 				else if (prandom <= 153)

  004ad	0f b6 45 e7	 movzx	 eax, BYTE PTR _prandom$3[ebp]
  004b1	3d 99 00 00 00	 cmp	 eax, 153		; 00000099H
  004b6	7f 10		 jg	 SHORT $LN36@P_ZMovemen

; 1463 : 					S_StartSound(mo, sfx_bubbl3);

  004b8	6a 26		 push	 38			; 00000026H
  004ba	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004bd	50		 push	 eax
  004be	e8 00 00 00 00	 call	 _S_StartSound
  004c3	83 c4 08	 add	 esp, 8
  004c6	eb 29		 jmp	 SHORT $LN39@P_ZMovemen
$LN36@P_ZMovemen:

; 1464 : 				else if (prandom <= 204)

  004c8	0f b6 45 e7	 movzx	 eax, BYTE PTR _prandom$3[ebp]
  004cc	3d cc 00 00 00	 cmp	 eax, 204		; 000000ccH
  004d1	7f 10		 jg	 SHORT $LN38@P_ZMovemen

; 1465 : 					S_StartSound(mo, sfx_bubbl4);

  004d3	6a 27		 push	 39			; 00000027H
  004d5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004d8	50		 push	 eax
  004d9	e8 00 00 00 00	 call	 _S_StartSound
  004de	83 c4 08	 add	 esp, 8
  004e1	eb 0e		 jmp	 SHORT $LN39@P_ZMovemen
$LN38@P_ZMovemen:

; 1466 : 				else
; 1467 : 					S_StartSound(mo, sfx_bubbl5);

  004e3	6a 28		 push	 40			; 00000028H
  004e5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004e8	50		 push	 eax
  004e9	e8 00 00 00 00	 call	 _S_StartSound
  004ee	83 c4 08	 add	 esp, 8
$LN39@P_ZMovemen:

; 1468 : 			}
; 1469 : 			break;

  004f1	e9 f3 02 00 00	 jmp	 $LN5@P_ZMovemen
$LN40@P_ZMovemen:

; 1470 : 		case MT_MEDIUMBUBBLE:
; 1471 : 			if (mo->z-mo->momz <= mo->floorz) // Hit the floor, so split!

  004f6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004f9	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  004fc	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  004ff	2b 51 50	 sub	 edx, DWORD PTR [ecx+80]
  00502	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00505	3b 50 38	 cmp	 edx, DWORD PTR [eax+56]
  00508	0f 8f a4 02 00
	00		 jg	 $LN41@P_ZMovemen

; 1472 : 			{
; 1473 : 				// split
; 1474 : 				mobj_t *explodemo;
; 1475 : 
; 1476 : 				explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_SMALLBUBBLE);

  0050e	68 b7 00 00 00	 push	 183			; 000000b7H
  00513	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00516	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00519	51		 push	 ecx
  0051a	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0051d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00520	50		 push	 eax
  00521	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00524	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00527	52		 push	 edx
  00528	e8 00 00 00 00	 call	 _P_SpawnMobj
  0052d	83 c4 10	 add	 esp, 16			; 00000010H
  00530	89 45 e0	 mov	 DWORD PTR _explodemo$2[ebp], eax

; 1477 : 				explodemo->momx += (P_Random() % 32) * FRACUNIT/8;

  00533	e8 00 00 00 00	 call	 _P_Random
  00538	0f b6 c0	 movzx	 eax, al
  0053b	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  00540	79 05		 jns	 SHORT $LN141@P_ZMovemen
  00542	48		 dec	 eax
  00543	83 c8 e0	 or	 eax, -32		; ffffffe0H
  00546	40		 inc	 eax
$LN141@P_ZMovemen:
  00547	c1 e0 10	 shl	 eax, 16			; 00000010H
  0054a	99		 cdq
  0054b	83 e2 07	 and	 edx, 7
  0054e	03 c2		 add	 eax, edx
  00550	c1 f8 03	 sar	 eax, 3
  00553	8b 4d e0	 mov	 ecx, DWORD PTR _explodemo$2[ebp]
  00556	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  00559	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  0055c	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 1478 : 				explodemo->momy += (P_Random() % 32) * FRACUNIT/8;

  0055f	e8 00 00 00 00	 call	 _P_Random
  00564	0f b6 c0	 movzx	 eax, al
  00567	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  0056c	79 05		 jns	 SHORT $LN142@P_ZMovemen
  0056e	48		 dec	 eax
  0056f	83 c8 e0	 or	 eax, -32		; ffffffe0H
  00572	40		 inc	 eax
$LN142@P_ZMovemen:
  00573	c1 e0 10	 shl	 eax, 16			; 00000010H
  00576	99		 cdq
  00577	83 e2 07	 and	 edx, 7
  0057a	03 c2		 add	 eax, edx
  0057c	c1 f8 03	 sar	 eax, 3
  0057f	8b 4d e0	 mov	 ecx, DWORD PTR _explodemo$2[ebp]
  00582	03 41 4c	 add	 eax, DWORD PTR [ecx+76]
  00585	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  00588	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 1479 : 				explodemo->destscale = mo->scale;

  0058b	8b 45 e0	 mov	 eax, DWORD PTR _explodemo$2[ebp]
  0058e	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00591	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00598	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 1480 : 				P_SetScale(explodemo, mo->scale);

  0059f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005a2	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  005a9	51		 push	 ecx
  005aa	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  005ad	52		 push	 edx
  005ae	e8 00 00 00 00	 call	 _P_SetScale
  005b3	83 c4 08	 add	 esp, 8

; 1481 : 				explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_SMALLBUBBLE);

  005b6	68 b7 00 00 00	 push	 183			; 000000b7H
  005bb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005be	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  005c1	51		 push	 ecx
  005c2	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  005c5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  005c8	50		 push	 eax
  005c9	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  005cc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  005cf	52		 push	 edx
  005d0	e8 00 00 00 00	 call	 _P_SpawnMobj
  005d5	83 c4 10	 add	 esp, 16			; 00000010H
  005d8	89 45 e0	 mov	 DWORD PTR _explodemo$2[ebp], eax

; 1482 : 				explodemo->momx += (P_Random() % 64) * FRACUNIT/8;

  005db	e8 00 00 00 00	 call	 _P_Random
  005e0	0f b6 c0	 movzx	 eax, al
  005e3	25 3f 00 00 80	 and	 eax, -2147483585	; 8000003fH
  005e8	79 05		 jns	 SHORT $LN143@P_ZMovemen
  005ea	48		 dec	 eax
  005eb	83 c8 c0	 or	 eax, -64		; ffffffc0H
  005ee	40		 inc	 eax
$LN143@P_ZMovemen:
  005ef	c1 e0 10	 shl	 eax, 16			; 00000010H
  005f2	99		 cdq
  005f3	83 e2 07	 and	 edx, 7
  005f6	03 c2		 add	 eax, edx
  005f8	c1 f8 03	 sar	 eax, 3
  005fb	8b 4d e0	 mov	 ecx, DWORD PTR _explodemo$2[ebp]
  005fe	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  00601	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  00604	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 1483 : 				explodemo->momy -= (P_Random() % 64) * FRACUNIT/8;

  00607	e8 00 00 00 00	 call	 _P_Random
  0060c	0f b6 c0	 movzx	 eax, al
  0060f	25 3f 00 00 80	 and	 eax, -2147483585	; 8000003fH
  00614	79 05		 jns	 SHORT $LN144@P_ZMovemen
  00616	48		 dec	 eax
  00617	83 c8 c0	 or	 eax, -64		; ffffffc0H
  0061a	40		 inc	 eax
$LN144@P_ZMovemen:
  0061b	c1 e0 10	 shl	 eax, 16			; 00000010H
  0061e	99		 cdq
  0061f	83 e2 07	 and	 edx, 7
  00622	03 c2		 add	 eax, edx
  00624	c1 f8 03	 sar	 eax, 3
  00627	8b 4d e0	 mov	 ecx, DWORD PTR _explodemo$2[ebp]
  0062a	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0062d	2b d0		 sub	 edx, eax
  0062f	8b 45 e0	 mov	 eax, DWORD PTR _explodemo$2[ebp]
  00632	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 1484 : 				explodemo->destscale = mo->scale;

  00635	8b 45 e0	 mov	 eax, DWORD PTR _explodemo$2[ebp]
  00638	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0063b	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00642	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 1485 : 				P_SetScale(explodemo, mo->scale);

  00649	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0064c	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00653	51		 push	 ecx
  00654	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  00657	52		 push	 edx
  00658	e8 00 00 00 00	 call	 _P_SetScale
  0065d	83 c4 08	 add	 esp, 8

; 1486 : 				explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_SMALLBUBBLE);

  00660	68 b7 00 00 00	 push	 183			; 000000b7H
  00665	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00668	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0066b	51		 push	 ecx
  0066c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0066f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00672	50		 push	 eax
  00673	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00676	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00679	52		 push	 edx
  0067a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0067f	83 c4 10	 add	 esp, 16			; 00000010H
  00682	89 45 e0	 mov	 DWORD PTR _explodemo$2[ebp], eax

; 1487 : 				explodemo->momx -= (P_Random() % 128) * FRACUNIT/8;

  00685	e8 00 00 00 00	 call	 _P_Random
  0068a	0f b6 c0	 movzx	 eax, al
  0068d	25 7f 00 00 80	 and	 eax, -2147483521	; 8000007fH
  00692	79 05		 jns	 SHORT $LN145@P_ZMovemen
  00694	48		 dec	 eax
  00695	83 c8 80	 or	 eax, -128		; ffffff80H
  00698	40		 inc	 eax
$LN145@P_ZMovemen:
  00699	c1 e0 10	 shl	 eax, 16			; 00000010H
  0069c	99		 cdq
  0069d	83 e2 07	 and	 edx, 7
  006a0	03 c2		 add	 eax, edx
  006a2	c1 f8 03	 sar	 eax, 3
  006a5	8b 4d e0	 mov	 ecx, DWORD PTR _explodemo$2[ebp]
  006a8	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  006ab	2b d0		 sub	 edx, eax
  006ad	8b 45 e0	 mov	 eax, DWORD PTR _explodemo$2[ebp]
  006b0	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 1488 : 				explodemo->momy += (P_Random() % 128) * FRACUNIT/8;

  006b3	e8 00 00 00 00	 call	 _P_Random
  006b8	0f b6 c0	 movzx	 eax, al
  006bb	25 7f 00 00 80	 and	 eax, -2147483521	; 8000007fH
  006c0	79 05		 jns	 SHORT $LN146@P_ZMovemen
  006c2	48		 dec	 eax
  006c3	83 c8 80	 or	 eax, -128		; ffffff80H
  006c6	40		 inc	 eax
$LN146@P_ZMovemen:
  006c7	c1 e0 10	 shl	 eax, 16			; 00000010H
  006ca	99		 cdq
  006cb	83 e2 07	 and	 edx, 7
  006ce	03 c2		 add	 eax, edx
  006d0	c1 f8 03	 sar	 eax, 3
  006d3	8b 4d e0	 mov	 ecx, DWORD PTR _explodemo$2[ebp]
  006d6	03 41 4c	 add	 eax, DWORD PTR [ecx+76]
  006d9	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  006dc	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 1489 : 				explodemo->destscale = mo->scale;

  006df	8b 45 e0	 mov	 eax, DWORD PTR _explodemo$2[ebp]
  006e2	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  006e5	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  006ec	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 1490 : 				P_SetScale(explodemo, mo->scale);

  006f3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  006f6	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  006fd	51		 push	 ecx
  006fe	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  00701	52		 push	 edx
  00702	e8 00 00 00 00	 call	 _P_SetScale
  00707	83 c4 08	 add	 esp, 8

; 1491 : 				explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_SMALLBUBBLE);

  0070a	68 b7 00 00 00	 push	 183			; 000000b7H
  0070f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00712	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00715	51		 push	 ecx
  00716	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00719	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0071c	50		 push	 eax
  0071d	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00720	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00723	52		 push	 edx
  00724	e8 00 00 00 00	 call	 _P_SpawnMobj
  00729	83 c4 10	 add	 esp, 16			; 00000010H
  0072c	89 45 e0	 mov	 DWORD PTR _explodemo$2[ebp], eax

; 1492 : 				explodemo->momx -= (P_Random() % 96) * FRACUNIT/8;

  0072f	e8 00 00 00 00	 call	 _P_Random
  00734	0f b6 c0	 movzx	 eax, al
  00737	99		 cdq
  00738	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0073d	f7 f9		 idiv	 ecx
  0073f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00742	8b c2		 mov	 eax, edx
  00744	99		 cdq
  00745	83 e2 07	 and	 edx, 7
  00748	03 c2		 add	 eax, edx
  0074a	c1 f8 03	 sar	 eax, 3
  0074d	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  00750	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  00753	2b c8		 sub	 ecx, eax
  00755	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  00758	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1493 : 				explodemo->momy -= (P_Random() % 96) * FRACUNIT/8;

  0075b	e8 00 00 00 00	 call	 _P_Random
  00760	0f b6 c0	 movzx	 eax, al
  00763	99		 cdq
  00764	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00769	f7 f9		 idiv	 ecx
  0076b	c1 e2 10	 shl	 edx, 16			; 00000010H
  0076e	8b c2		 mov	 eax, edx
  00770	99		 cdq
  00771	83 e2 07	 and	 edx, 7
  00774	03 c2		 add	 eax, edx
  00776	c1 f8 03	 sar	 eax, 3
  00779	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  0077c	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  0077f	2b c8		 sub	 ecx, eax
  00781	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  00784	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 1494 : 				explodemo->destscale = mo->scale;

  00787	8b 45 e0	 mov	 eax, DWORD PTR _explodemo$2[ebp]
  0078a	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0078d	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00794	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 1495 : 				P_SetScale(explodemo, mo->scale);

  0079b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0079e	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  007a5	51		 push	 ecx
  007a6	8b 55 e0	 mov	 edx, DWORD PTR _explodemo$2[ebp]
  007a9	52		 push	 edx
  007aa	e8 00 00 00 00	 call	 _P_SetScale
  007af	83 c4 08	 add	 esp, 8
$LN41@P_ZMovemen:

; 1496 : 			}
; 1497 : 			break;

  007b2	eb 35		 jmp	 SHORT $LN5@P_ZMovemen
$LN42@P_ZMovemen:

; 1498 : 		case MT_RING: // Ignore still rings
; 1499 : 		case MT_COIN:
; 1500 : #ifdef BLUE_SPHERES
; 1501 : 		case MT_BLUEBALL:
; 1502 : #endif
; 1503 : 		case MT_REDTEAMRING:
; 1504 : 		case MT_BLUETEAMRING:
; 1505 : 		case MT_FLINGCOIN:
; 1506 : 		case MT_FLINGRING:
; 1507 : #ifdef BLUE_SPHERES
; 1508 : 		case MT_FLINGBALL:
; 1509 : #endif
; 1510 : 		case MT_BOUNCERING:
; 1511 : 		case MT_AUTOMATICRING:
; 1512 : 		case MT_RAILRING:
; 1513 : 		case MT_EXPLOSIONRING:
; 1514 : 		case MT_SCATTERRING:
; 1515 : 		case MT_GRENADERING:
; 1516 : 		case MT_BOUNCEPICKUP:
; 1517 : 		case MT_RAILPICKUP:
; 1518 : 		case MT_AUTOPICKUP:
; 1519 : 		case MT_EXPLODEPICKUP:
; 1520 : 		case MT_SCATTERPICKUP:
; 1521 : 		case MT_GRENADEPICKUP:
; 1522 : 		case MT_FLINGEMERALD:
; 1523 : 		case MT_NIGHTSWING:
; 1524 : 			if (!(mo->momx || mo->momy || mo->momz))

  007b4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007b7	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  007bb	75 17		 jne	 SHORT $LN62@P_ZMovemen
  007bd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007c0	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  007c4	75 0e		 jne	 SHORT $LN62@P_ZMovemen
  007c6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007c9	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  007cd	75 05		 jne	 SHORT $LN62@P_ZMovemen

; 1525 : 				return;

  007cf	e9 60 0b 00 00	 jmp	 $LN136@P_ZMovemen
$LN62@P_ZMovemen:

; 1526 : 			break;

  007d4	eb 13		 jmp	 SHORT $LN5@P_ZMovemen
$LN63@P_ZMovemen:

; 1527 : 		case MT_FLAMEJET:
; 1528 : 		case MT_VERTICALFLAMEJET:
; 1529 : 			if (!(mo->flags & MF_BOUNCE))

  007d6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007d9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  007dc	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  007e2	75 05		 jne	 SHORT $LN65@P_ZMovemen

; 1530 : 				return;

  007e4	e9 4b 0b 00 00	 jmp	 $LN136@P_ZMovemen
$LN65@P_ZMovemen:
$LN66@P_ZMovemen:
$LN5@P_ZMovemen:

; 1531 : 			break;
; 1532 : 		default:
; 1533 : 			break;
; 1534 : 	}
; 1535 : 
; 1536 : 	if (mo->momz < 0 && (mo->flags2 & MF2_CLASSICPUSH))

  007e9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007ec	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  007f0	7d 25		 jge	 SHORT $LN67@P_ZMovemen
  007f2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007f5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  007fb	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  00801	74 14		 je	 SHORT $LN67@P_ZMovemen

; 1537 : 		mo->momx = mo->momy = 0;

  00803	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00806	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  0080d	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00810	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN67@P_ZMovemen:

; 1538 : 
; 1539 : 	if (mo->flags & MF_FLOAT && mo->target && mo->health && !(mo->type == MT_DETON ||
; 1540 : 		mo->type == MT_JETTBOMBER || mo->type == MT_JETTGUNNER || mo->type == MT_CRAWLACOMMANDER
; 1541 : 		|| mo->type == MT_EGGMOBILE2) && mo->target->health > 0)

  00817	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0081a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0081d	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00823	0f 84 ba 01 00
	00		 je	 $LN76@P_ZMovemen
  00829	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0082c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00833	0f 84 aa 01 00
	00		 je	 $LN76@P_ZMovemen
  00839	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0083c	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00843	0f 84 9a 01 00
	00		 je	 $LN76@P_ZMovemen
  00849	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0084c	83 78 7c 09	 cmp	 DWORD PTR [eax+124], 9
  00850	0f 84 8d 01 00
	00		 je	 $LN76@P_ZMovemen
  00856	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00859	83 78 7c 06	 cmp	 DWORD PTR [eax+124], 6
  0085d	0f 84 80 01 00
	00		 je	 $LN76@P_ZMovemen
  00863	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00866	83 78 7c 07	 cmp	 DWORD PTR [eax+124], 7
  0086a	0f 84 73 01 00
	00		 je	 $LN76@P_ZMovemen
  00870	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00873	83 78 7c 08	 cmp	 DWORD PTR [eax+124], 8
  00877	0f 84 66 01 00
	00		 je	 $LN76@P_ZMovemen
  0087d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00880	83 78 7c 1f	 cmp	 DWORD PTR [eax+124], 31	; 0000001fH
  00884	0f 84 59 01 00
	00		 je	 $LN76@P_ZMovemen
  0088a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0088d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00893	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0089a	0f 8e 43 01 00
	00		 jle	 $LN76@P_ZMovemen

; 1542 : 	{
; 1543 : 		// float down towards target if too close
; 1544 : 		if (!(mo->flags2 & MF2_SKULLFLY) && !(mo->flags2 & MF2_INFLOAT))

  008a0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008a3	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  008a9	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  008af	0f 85 2e 01 00
	00		 jne	 $LN76@P_ZMovemen
  008b5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008b8	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  008be	83 e1 20	 and	 ecx, 32			; 00000020H
  008c1	0f 85 1c 01 00
	00		 jne	 $LN76@P_ZMovemen

; 1545 : 		{
; 1546 : 			dist = P_AproxDistance(mo->x - mo->target->x, mo->y - mo->target->y);

  008c7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008ca	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  008d0	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  008d3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008d6	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  008d9	50		 push	 eax
  008da	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  008dd	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  008e3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  008e9	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  008ec	51		 push	 ecx
  008ed	e8 00 00 00 00	 call	 _P_AproxDistance
  008f2	83 c4 08	 add	 esp, 8
  008f5	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 1547 : 
; 1548 : 			delta = (mo->target->z + (mo->height>>1)) - mo->z;

  008f8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008fb	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00901	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00904	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00907	d1 f8		 sar	 eax, 1
  00909	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0090c	03 c8		 add	 ecx, eax
  0090e	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00911	2b 4a 18	 sub	 ecx, DWORD PTR [edx+24]
  00914	89 4d f8	 mov	 DWORD PTR _delta$[ebp], ecx

; 1549 : 
; 1550 : 			if (delta < 0 && dist < -(delta*3)
; 1551 : 				&& (mo->type != MT_EGGMOBILE || mo->z - FLOATSPEED >= mo->floorz+33*FRACUNIT))

  00917	79 43		 jns	 SHORT $LN70@P_ZMovemen
  00919	6b 45 f8 03	 imul	 eax, DWORD PTR _delta$[ebp], 3
  0091d	f7 d8		 neg	 eax
  0091f	39 45 fc	 cmp	 DWORD PTR _dist$[ebp], eax
  00922	7d 38		 jge	 SHORT $LN70@P_ZMovemen
  00924	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00927	83 78 7c 1d	 cmp	 DWORD PTR [eax+124], 29	; 0000001dH
  0092b	75 1b		 jne	 SHORT $LN72@P_ZMovemen
  0092d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00930	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00933	81 e9 00 00 04
	00		 sub	 ecx, 262144		; 00040000H
  00939	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0093c	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0093f	05 00 00 21 00	 add	 eax, 2162688		; 00210000H
  00944	3b c8		 cmp	 ecx, eax
  00946	7c 14		 jl	 SHORT $LN70@P_ZMovemen
$LN72@P_ZMovemen:

; 1552 : 				mo->z -= FLOATSPEED;

  00948	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0094b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0094e	81 e9 00 00 04
	00		 sub	 ecx, 262144		; 00040000H
  00954	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00957	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  0095a	eb 21		 jmp	 SHORT $LN73@P_ZMovemen
$LN70@P_ZMovemen:

; 1553 : 			else if (delta > 0 && dist < (delta*3))

  0095c	83 7d f8 00	 cmp	 DWORD PTR _delta$[ebp], 0
  00960	7e 1b		 jle	 SHORT $LN73@P_ZMovemen
  00962	6b 45 f8 03	 imul	 eax, DWORD PTR _delta$[ebp], 3
  00966	39 45 fc	 cmp	 DWORD PTR _dist$[ebp], eax
  00969	7d 12		 jge	 SHORT $LN73@P_ZMovemen

; 1554 : 				mo->z += FLOATSPEED;

  0096b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0096e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00971	81 c1 00 00 04
	00		 add	 ecx, 262144		; 00040000H
  00977	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0097a	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN73@P_ZMovemen:

; 1555 : 
; 1556 : 			if (mo->type == MT_EGGMOBILE && mo->z < mo->floorz+33*FRACUNIT)

  0097d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00980	83 78 7c 1d	 cmp	 DWORD PTR [eax+124], 29	; 0000001dH
  00984	75 28		 jne	 SHORT $LN74@P_ZMovemen
  00986	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00989	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0098c	81 c1 00 00 21
	00		 add	 ecx, 2162688		; 00210000H
  00992	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00995	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00998	7d 14		 jge	 SHORT $LN74@P_ZMovemen

; 1557 : 				mo->z = mo->floorz+33*FRACUNIT;

  0099a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0099d	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  009a0	81 c1 00 00 21
	00		 add	 ecx, 2162688		; 00210000H
  009a6	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  009a9	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  009ac	eb 35		 jmp	 SHORT $LN76@P_ZMovemen
$LN74@P_ZMovemen:

; 1558 : 			else if (mo->type == MT_JETJAW && mo->z + mo->height > mo->watertop)

  009ae	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009b1	83 78 7c 0e	 cmp	 DWORD PTR [eax+124], 14	; 0000000eH
  009b5	75 2c		 jne	 SHORT $LN76@P_ZMovemen
  009b7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009ba	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  009bd	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  009c0	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  009c3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009c6	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  009cc	7e 15		 jle	 SHORT $LN76@P_ZMovemen

; 1559 : 				mo->z = mo->watertop - mo->height;

  009ce	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009d1	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  009d4	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  009da	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  009dd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009e0	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN76@P_ZMovemen:

; 1560 : 		}
; 1561 : 
; 1562 : 	}
; 1563 : 
; 1564 : 	// clip movement
; 1565 : 	if (mo->z <= mo->floorz && !(mo->flags & MF_NOCLIPHEIGHT))

  009e3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009e6	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  009e9	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  009ec	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  009ef	0f 8f ac 06 00
	00		 jg	 $LN77@P_ZMovemen
  009f5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009f8	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  009fb	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  00a01	0f 85 9a 06 00
	00		 jne	 $LN77@P_ZMovemen

; 1566 : 	{
; 1567 : 		// hit the floor
; 1568 : 		if (mo->flags & MF_MISSILE)

  00a07	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a0a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00a0d	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00a13	74 2d		 je	 SHORT $LN79@P_ZMovemen

; 1569 : 		{
; 1570 : 			mo->z = mo->floorz;

  00a15	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a18	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00a1b	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00a1e	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1571 : 			if (!(mo->flags & MF_NOCLIP))

  00a21	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a24	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00a27	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00a2d	75 11		 jne	 SHORT $LN81@P_ZMovemen

; 1572 : 			{
; 1573 : 				P_ExplodeMissile(mo);

  00a2f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a32	50		 push	 eax
  00a33	e8 00 00 00 00	 call	 _P_ExplodeMissile
  00a38	83 c4 04	 add	 esp, 4

; 1574 : 				return;

  00a3b	e9 f4 08 00 00	 jmp	 $LN136@P_ZMovemen
$LN81@P_ZMovemen:

; 1575 : 			}
; 1576 : 		}

  00a40	eb 16		 jmp	 SHORT $LN82@P_ZMovemen
$LN79@P_ZMovemen:

; 1577 : 		else if (mo->type == MT_FIREBALL)

  00a42	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a45	81 78 7c e7 00
	00 00		 cmp	 DWORD PTR [eax+124], 231 ; 000000e7H
  00a4c	75 0a		 jne	 SHORT $LN82@P_ZMovemen

; 1578 : 			mo->momz = 5*FRACUNIT;

  00a4e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a51	c7 40 50 00 00
	05 00		 mov	 DWORD PTR [eax+80], 327680 ; 00050000H
$LN82@P_ZMovemen:

; 1579 : 
; 1580 : 		mo->z = mo->floorz;

  00a58	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a5b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00a5e	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00a61	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1581 : 
; 1582 : 		// Note (id):
; 1583 : 		//  somebody left this after the setting momz to 0,
; 1584 : 		//  kinda useless there.
; 1585 : 		if (mo->flags2 & MF2_SKULLFLY) // the skull slammed into something

  00a64	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a67	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00a6d	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00a73	74 0e		 je	 SHORT $LN83@P_ZMovemen

; 1586 : 			mo->momz = -mo->momz;

  00a75	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a78	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00a7b	f7 d9		 neg	 ecx
  00a7d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00a80	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN83@P_ZMovemen:

; 1587 : 
; 1588 : 		// Mine explodes upon ground contact
; 1589 : 		if ((mo->type == MT_MINE) && (mo->z <= mo->floorz) && !(mo->state == &states[S_MINE_BOOM1]

  00a83	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a86	83 78 7c 6e	 cmp	 DWORD PTR [eax+124], 110 ; 0000006eH
  00a8a	0f 85 9b 00 00
	00		 jne	 $LN84@P_ZMovemen
  00a90	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a93	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00a96	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00a99	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00a9c	0f 8f 89 00 00
	00		 jg	 $LN84@P_ZMovemen
  00aa2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00aa7	69 c8 dc 02 00
	00		 imul	 ecx, eax, 732
  00aad	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00ab3	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00ab6	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00ab9	74 70		 je	 SHORT $LN84@P_ZMovemen
  00abb	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00ac0	69 c8 dd 02 00
	00		 imul	 ecx, eax, 733
  00ac6	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00acc	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00acf	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00ad2	74 57		 je	 SHORT $LN84@P_ZMovemen
  00ad4	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00ad9	69 c8 de 02 00
	00		 imul	 ecx, eax, 734
  00adf	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00ae5	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00ae8	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00aeb	74 3e		 je	 SHORT $LN84@P_ZMovemen
  00aed	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00af2	69 c8 df 02 00
	00		 imul	 ecx, eax, 735
  00af8	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00afe	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00b01	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00b04	74 25		 je	 SHORT $LN84@P_ZMovemen
  00b06	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00b0b	69 c8 4f 06 00
	00		 imul	 ecx, eax, 1615
  00b11	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00b17	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00b1a	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00b1d	74 0c		 je	 SHORT $LN84@P_ZMovemen

; 1590 : 			|| mo->state == &states[S_MINE_BOOM2] || mo->state == &states[S_MINE_BOOM3]
; 1591 : 			|| mo->state == &states[S_MINE_BOOM4] || mo->state == &states[S_DISS]))
; 1592 : 		{
; 1593 : 			P_ExplodeMissile(mo);

  00b1f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b22	50		 push	 eax
  00b23	e8 00 00 00 00	 call	 _P_ExplodeMissile
  00b28	83 c4 04	 add	 esp, 4
$LN84@P_ZMovemen:

; 1594 : 		}
; 1595 : 
; 1596 : 		if (mo->momz < 0) // falling

  00b2b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b2e	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00b32	0f 8d 4d 05 00
	00		 jge	 $LN120@P_ZMovemen

; 1597 : 		{
; 1598 : 			if (mo->type == MT_SEED)

  00b38	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b3b	81 78 7c bc 00
	00 00		 cmp	 DWORD PTR [eax+124], 188 ; 000000bcH
  00b42	0f 85 93 00 00
	00		 jne	 $LN86@P_ZMovemen

; 1599 : 			{
; 1600 : 				UINT8 prandom = P_Random();

  00b48	e8 00 00 00 00	 call	 _P_Random
  00b4d	88 45 df	 mov	 BYTE PTR _prandom$1[ebp], al

; 1601 : 
; 1602 : 				if (prandom < 64)

  00b50	0f b6 45 df	 movzx	 eax, BYTE PTR _prandom$1[ebp]
  00b54	83 f8 40	 cmp	 eax, 64			; 00000040H
  00b57	7d 21		 jge	 SHORT $LN87@P_ZMovemen

; 1603 : 					P_SpawnMobj(mo->x, mo->y, mo->floorz, MT_GFZFLOWER3);

  00b59	6a 76		 push	 118			; 00000076H
  00b5b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b5e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00b61	51		 push	 ecx
  00b62	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00b65	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00b68	50		 push	 eax
  00b69	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00b6c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00b6f	52		 push	 edx
  00b70	e8 00 00 00 00	 call	 _P_SpawnMobj
  00b75	83 c4 10	 add	 esp, 16			; 00000010H
  00b78	eb 4b		 jmp	 SHORT $LN90@P_ZMovemen
$LN87@P_ZMovemen:

; 1604 : 				else if (prandom < 192)

  00b7a	0f b6 45 df	 movzx	 eax, BYTE PTR _prandom$1[ebp]
  00b7e	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00b83	7d 21		 jge	 SHORT $LN89@P_ZMovemen

; 1605 : 					P_SpawnMobj(mo->x, mo->y, mo->floorz, MT_GFZFLOWER1);

  00b85	6a 74		 push	 116			; 00000074H
  00b87	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b8a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00b8d	51		 push	 ecx
  00b8e	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00b91	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00b94	50		 push	 eax
  00b95	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00b98	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00b9b	52		 push	 edx
  00b9c	e8 00 00 00 00	 call	 _P_SpawnMobj
  00ba1	83 c4 10	 add	 esp, 16			; 00000010H
  00ba4	eb 1f		 jmp	 SHORT $LN90@P_ZMovemen
$LN89@P_ZMovemen:

; 1606 : 				else
; 1607 : 					P_SpawnMobj(mo->x, mo->y, mo->floorz, MT_GFZFLOWER2);

  00ba6	6a 75		 push	 117			; 00000075H
  00ba8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bab	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00bae	51		 push	 ecx
  00baf	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00bb2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00bb5	50		 push	 eax
  00bb6	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00bb9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00bbc	52		 push	 edx
  00bbd	e8 00 00 00 00	 call	 _P_SpawnMobj
  00bc2	83 c4 10	 add	 esp, 16			; 00000010H
$LN90@P_ZMovemen:

; 1608 : 
; 1609 : 				P_SetMobjState(mo, S_DISS);

  00bc5	68 4f 06 00 00	 push	 1615			; 0000064fH
  00bca	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bcd	50		 push	 eax
  00bce	e8 00 00 00 00	 call	 _P_SetMobjState
  00bd3	83 c4 08	 add	 esp, 8

; 1610 : 				return;

  00bd6	e9 59 07 00 00	 jmp	 $LN136@P_ZMovemen
$LN86@P_ZMovemen:

; 1611 : 			}
; 1612 : 
; 1613 : 			// set it once and not continuously
; 1614 : 			if (tmfloorthing)

  00bdb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  00be2	74 3a		 je	 SHORT $LN93@P_ZMovemen

; 1615 : 			{
; 1616 : 				// Bouncing boxes
; 1617 : 				if (tmfloorthing->z > tmfloorthing->floorz)

  00be4	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00be9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tmfloorthing
  00bef	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00bf2	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00bf5	7e 27		 jle	 SHORT $LN93@P_ZMovemen

; 1618 : 				{
; 1619 : 					if ((tmfloorthing->flags & MF_MONITOR) || (tmfloorthing->flags & MF_PUSHABLE))

  00bf7	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00bfc	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00bff	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00c05	75 0d		 jne	 SHORT $LN94@P_ZMovemen
  00c07	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00c0c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00c0f	83 e1 40	 and	 ecx, 64			; 00000040H
  00c12	74 0a		 je	 SHORT $LN93@P_ZMovemen
$LN94@P_ZMovemen:

; 1620 : 						mo->momz = 4*FRACUNIT;

  00c14	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c17	c7 40 50 00 00
	04 00		 mov	 DWORD PTR [eax+80], 262144 ; 00040000H
$LN93@P_ZMovemen:

; 1621 : 				}
; 1622 : 			}
; 1623 : 			if ((mo->z <= mo->floorz) && (!(tmfloorthing) || (((tmfloorthing->flags & MF_PUSHABLE)

  00c1e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c21	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00c24	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00c27	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00c2a	7f 66		 jg	 SHORT $LN98@P_ZMovemen
  00c2c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  00c33	74 36		 je	 SHORT $LN97@P_ZMovemen
  00c35	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00c3a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00c3d	83 e1 40	 and	 ecx, 64			; 00000040H
  00c40	75 29		 jne	 SHORT $LN97@P_ZMovemen
  00c42	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00c47	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00c4d	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  00c53	75 16		 jne	 SHORT $LN97@P_ZMovemen
  00c55	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00c5a	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00c5e	74 0b		 je	 SHORT $LN97@P_ZMovemen
  00c60	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  00c65	83 78 7c 49	 cmp	 DWORD PTR [eax+124], 73	; 00000049H
  00c69	75 27		 jne	 SHORT $LN98@P_ZMovemen
$LN97@P_ZMovemen:

; 1624 : 				|| (tmfloorthing->flags2 & MF2_STANDONME)) || tmfloorthing->type == MT_PLAYER
; 1625 : 				|| tmfloorthing->type == MT_FLOORSPIKE)))
; 1626 : 			{
; 1627 : 				if (!tmfloorthing || mo->momz)

  00c6b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  00c72	74 09		 je	 SHORT $LN99@P_ZMovemen
  00c74	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c77	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00c7b	74 15		 je	 SHORT $LN98@P_ZMovemen
$LN99@P_ZMovemen:

; 1628 : 					mo->eflags |= MFE_JUSTHITFLOOR;

  00c7d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c80	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00c86	83 c9 02	 or	 ecx, 2
  00c89	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00c8c	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN98@P_ZMovemen:

; 1629 : 			}
; 1630 : 
; 1631 : 			// Flingrings bounce
; 1632 : 			if (mo->type == MT_FLINGRING
; 1633 : 				|| mo->type == MT_FLINGCOIN
; 1634 : #ifdef BLUE_SPHERES
; 1635 : 				|| mo->type == MT_FLINGBALL
; 1636 : #endif
; 1637 : 				|| mo->type == MT_BOUNCERING
; 1638 : 				|| mo->type == MT_AUTOMATICRING
; 1639 : 				|| mo->type == MT_RAILRING
; 1640 : 				|| mo->type == MT_EXPLOSIONRING
; 1641 : 				|| mo->type == MT_SCATTERRING
; 1642 : 				|| mo->type == MT_GRENADERING
; 1643 : 				|| mo->type == MT_BOUNCEPICKUP
; 1644 : 				|| mo->type == MT_RAILPICKUP
; 1645 : 				|| mo->type == MT_AUTOPICKUP
; 1646 : 				|| mo->type == MT_EXPLODEPICKUP
; 1647 : 				|| mo->type == MT_SCATTERPICKUP
; 1648 : 				|| mo->type == MT_GRENADEPICKUP
; 1649 : 				|| mo->type == MT_FLINGEMERALD
; 1650 : 				|| mo->type == MT_BIGTUMBLEWEED
; 1651 : 				|| mo->type == MT_LITTLETUMBLEWEED
; 1652 : 				|| mo->type == MT_CANNONBALLDECOR
; 1653 : 				|| mo->type == MT_FALLINGROCK)

  00c92	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c95	83 78 7c 2c	 cmp	 DWORD PTR [eax+124], 44	; 0000002cH
  00c99	0f 84 f2 00 00
	00		 je	 $LN102@P_ZMovemen
  00c9f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ca2	81 78 7c e2 00
	00 00		 cmp	 DWORD PTR [eax+124], 226 ; 000000e2H
  00ca9	0f 84 e2 00 00
	00		 je	 $LN102@P_ZMovemen
  00caf	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cb2	81 78 7c d0 00
	00 00		 cmp	 DWORD PTR [eax+124], 208 ; 000000d0H
  00cb9	0f 84 d2 00 00
	00		 je	 $LN102@P_ZMovemen
  00cbf	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cc2	81 78 7c d2 00
	00 00		 cmp	 DWORD PTR [eax+124], 210 ; 000000d2H
  00cc9	0f 84 c2 00 00
	00		 je	 $LN102@P_ZMovemen
  00ccf	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cd2	81 78 7c d1 00
	00 00		 cmp	 DWORD PTR [eax+124], 209 ; 000000d1H
  00cd9	0f 84 b2 00 00
	00		 je	 $LN102@P_ZMovemen
  00cdf	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ce2	81 78 7c d3 00
	00 00		 cmp	 DWORD PTR [eax+124], 211 ; 000000d3H
  00ce9	0f 84 a2 00 00
	00		 je	 $LN102@P_ZMovemen
  00cef	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cf2	81 78 7c d4 00
	00 00		 cmp	 DWORD PTR [eax+124], 212 ; 000000d4H
  00cf9	0f 84 92 00 00
	00		 je	 $LN102@P_ZMovemen
  00cff	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d02	81 78 7c d5 00
	00 00		 cmp	 DWORD PTR [eax+124], 213 ; 000000d5H
  00d09	0f 84 82 00 00
	00		 je	 $LN102@P_ZMovemen
  00d0f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d12	81 78 7c d6 00
	00 00		 cmp	 DWORD PTR [eax+124], 214 ; 000000d6H
  00d19	74 76		 je	 SHORT $LN102@P_ZMovemen
  00d1b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d1e	81 78 7c d7 00
	00 00		 cmp	 DWORD PTR [eax+124], 215 ; 000000d7H
  00d25	74 6a		 je	 SHORT $LN102@P_ZMovemen
  00d27	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d2a	81 78 7c d8 00
	00 00		 cmp	 DWORD PTR [eax+124], 216 ; 000000d8H
  00d31	74 5e		 je	 SHORT $LN102@P_ZMovemen
  00d33	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d36	81 78 7c d9 00
	00 00		 cmp	 DWORD PTR [eax+124], 217 ; 000000d9H
  00d3d	74 52		 je	 SHORT $LN102@P_ZMovemen
  00d3f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d42	81 78 7c da 00
	00 00		 cmp	 DWORD PTR [eax+124], 218 ; 000000daH
  00d49	74 46		 je	 SHORT $LN102@P_ZMovemen
  00d4b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d4e	81 78 7c db 00
	00 00		 cmp	 DWORD PTR [eax+124], 219 ; 000000dbH
  00d55	74 3a		 je	 SHORT $LN102@P_ZMovemen
  00d57	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d5a	83 78 7c 40	 cmp	 DWORD PTR [eax+124], 64	; 00000040H
  00d5e	74 31		 je	 SHORT $LN102@P_ZMovemen
  00d60	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d63	81 78 7c 8f 00
	00 00		 cmp	 DWORD PTR [eax+124], 143 ; 0000008fH
  00d6a	74 25		 je	 SHORT $LN102@P_ZMovemen
  00d6c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d6f	81 78 7c 90 00
	00 00		 cmp	 DWORD PTR [eax+124], 144 ; 00000090H
  00d76	74 19		 je	 SHORT $LN102@P_ZMovemen
  00d78	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d7b	83 78 7c 72	 cmp	 DWORD PTR [eax+124], 114 ; 00000072H
  00d7f	74 10		 je	 SHORT $LN102@P_ZMovemen
  00d81	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d84	81 78 7c 1b 01
	00 00		 cmp	 DWORD PTR [eax+124], 283 ; 0000011bH
  00d8b	0f 85 ab 02 00
	00		 jne	 $LN100@P_ZMovemen
$LN102@P_ZMovemen:

; 1654 : 			{
; 1655 : 				if (maptol & TOL_NIGHTS)

  00d91	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00d98	83 e0 40	 and	 eax, 64			; 00000040H
  00d9b	74 1e		 je	 SHORT $LN103@P_ZMovemen

; 1656 : 					mo->momz = -FixedDiv(mo->momz, 10*FRACUNIT);

  00d9d	68 00 00 0a 00	 push	 655360			; 000a0000H
  00da2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00da5	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00da8	51		 push	 ecx
  00da9	e8 00 00 00 00	 call	 _FixedDiv
  00dae	83 c4 08	 add	 esp, 8
  00db1	f7 d8		 neg	 eax
  00db3	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00db6	89 42 50	 mov	 DWORD PTR [edx+80], eax
  00db9	eb 2a		 jmp	 SHORT $LN104@P_ZMovemen
$LN103@P_ZMovemen:

; 1657 : 				else
; 1658 : 					mo->momz = -FixedMul(mo->momz, FixedDiv(17*FRACUNIT,20*FRACUNIT));

  00dbb	68 00 00 14 00	 push	 1310720			; 00140000H
  00dc0	68 00 00 11 00	 push	 1114112			; 00110000H
  00dc5	e8 00 00 00 00	 call	 _FixedDiv
  00dca	83 c4 08	 add	 esp, 8
  00dcd	50		 push	 eax
  00dce	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00dd1	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00dd4	51		 push	 ecx
  00dd5	e8 00 00 00 00	 call	 _FixedMul
  00dda	83 c4 08	 add	 esp, 8
  00ddd	f7 d8		 neg	 eax
  00ddf	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00de2	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN104@P_ZMovemen:

; 1659 : 
; 1660 : 				if (mo->type == MT_BIGTUMBLEWEED || mo->type == MT_LITTLETUMBLEWEED)

  00de5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00de8	81 78 7c 8f 00
	00 00		 cmp	 DWORD PTR [eax+124], 143 ; 0000008fH
  00def	74 10		 je	 SHORT $LN107@P_ZMovemen
  00df1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00df4	81 78 7c 90 00
	00 00		 cmp	 DWORD PTR [eax+124], 144 ; 00000090H
  00dfb	0f 85 69 01 00
	00		 jne	 $LN105@P_ZMovemen
$LN107@P_ZMovemen:

; 1661 : 				{
; 1662 : 					if (mo->momx < STOPSPEED && mo->momx > -STOPSPEED
; 1663 : 						&& mo->momy < STOPSPEED && mo->momy > -STOPSPEED
; 1664 : 						&& mo->momz < STOPSPEED*3 && mo->momz > -STOPSPEED*3)

  00e01	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e04	81 78 48 00 00
	01 00		 cmp	 DWORD PTR [eax+72], 65536 ; 00010000H
  00e0b	0f 8d 25 01 00
	00		 jge	 $LN114@P_ZMovemen
  00e11	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e14	81 78 48 00 00
	ff ff		 cmp	 DWORD PTR [eax+72], -65536 ; ffff0000H
  00e1b	0f 8e 15 01 00
	00		 jle	 $LN114@P_ZMovemen
  00e21	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e24	81 78 4c 00 00
	01 00		 cmp	 DWORD PTR [eax+76], 65536 ; 00010000H
  00e2b	0f 8d 05 01 00
	00		 jge	 $LN114@P_ZMovemen
  00e31	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e34	81 78 4c 00 00
	ff ff		 cmp	 DWORD PTR [eax+76], -65536 ; ffff0000H
  00e3b	0f 8e f5 00 00
	00		 jle	 $LN114@P_ZMovemen
  00e41	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e44	81 78 50 00 00
	03 00		 cmp	 DWORD PTR [eax+80], 196608 ; 00030000H
  00e4b	0f 8d e5 00 00
	00		 jge	 $LN114@P_ZMovemen
  00e51	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e54	81 78 50 00 00
	fd ff		 cmp	 DWORD PTR [eax+80], -196608 ; fffd0000H
  00e5b	0f 8e d5 00 00
	00		 jle	 $LN114@P_ZMovemen

; 1665 : 					{
; 1666 : 						if (!(mo->flags & MF_AMBUSH))

  00e61	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e64	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00e67	83 e1 20	 and	 ecx, 32			; 00000020H
  00e6a	75 3c		 jne	 SHORT $LN109@P_ZMovemen

; 1667 : 						{
; 1668 : 							mo->momx = mo->momy = mo->momz = 0;

  00e6c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e6f	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  00e76	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00e79	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00e80	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00e83	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 1669 : 							P_SetMobjState(mo, mo->info->spawnstate);

  00e8a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e8d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00e93	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00e96	52		 push	 edx
  00e97	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00e9a	50		 push	 eax
  00e9b	e8 00 00 00 00	 call	 _P_SetMobjState
  00ea0	83 c4 08	 add	 esp, 8

; 1670 : 						}

  00ea3	e9 8e 00 00 00	 jmp	 $LN114@P_ZMovemen
$LN109@P_ZMovemen:

; 1671 : 						else
; 1672 : 						{
; 1673 : 							// If deafed, give the tumbleweed another random kick if it runs out of steam.
; 1674 : 							mo->momz += 6*FRACUNIT;

  00ea8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00eab	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00eae	81 c1 00 00 06
	00		 add	 ecx, 393216		; 00060000H
  00eb4	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00eb7	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 1675 : 
; 1676 : 							if (P_Random() % 2)

  00eba	e8 00 00 00 00	 call	 _P_Random
  00ebf	0f b6 c0	 movzx	 eax, al
  00ec2	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00ec7	79 05		 jns	 SHORT $LN147@P_ZMovemen
  00ec9	48		 dec	 eax
  00eca	83 c8 fe	 or	 eax, -2			; fffffffeH
  00ecd	40		 inc	 eax
$LN147@P_ZMovemen:
  00ece	85 c0		 test	 eax, eax
  00ed0	74 14		 je	 SHORT $LN111@P_ZMovemen

; 1677 : 								mo->momx += 6*FRACUNIT;

  00ed2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ed5	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00ed8	81 c1 00 00 06
	00		 add	 ecx, 393216		; 00060000H
  00ede	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00ee1	89 4a 48	 mov	 DWORD PTR [edx+72], ecx
  00ee4	eb 12		 jmp	 SHORT $LN112@P_ZMovemen
$LN111@P_ZMovemen:

; 1678 : 							else
; 1679 : 								mo->momx -= 6*FRACUNIT;

  00ee6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ee9	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00eec	81 e9 00 00 06
	00		 sub	 ecx, 393216		; 00060000H
  00ef2	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00ef5	89 4a 48	 mov	 DWORD PTR [edx+72], ecx
$LN112@P_ZMovemen:

; 1680 : 
; 1681 : 							if (P_Random() % 2)

  00ef8	e8 00 00 00 00	 call	 _P_Random
  00efd	0f b6 c0	 movzx	 eax, al
  00f00	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00f05	79 05		 jns	 SHORT $LN148@P_ZMovemen
  00f07	48		 dec	 eax
  00f08	83 c8 fe	 or	 eax, -2			; fffffffeH
  00f0b	40		 inc	 eax
$LN148@P_ZMovemen:
  00f0c	85 c0		 test	 eax, eax
  00f0e	74 14		 je	 SHORT $LN113@P_ZMovemen

; 1682 : 								mo->momy += 6*FRACUNIT;

  00f10	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f13	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00f16	81 c1 00 00 06
	00		 add	 ecx, 393216		; 00060000H
  00f1c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00f1f	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
  00f22	eb 12		 jmp	 SHORT $LN114@P_ZMovemen
$LN113@P_ZMovemen:

; 1683 : 							else
; 1684 : 								mo->momy -= 6*FRACUNIT;

  00f24	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f27	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00f2a	81 e9 00 00 06
	00		 sub	 ecx, 393216		; 00060000H
  00f30	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00f33	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
$LN114@P_ZMovemen:

; 1685 : 						}
; 1686 : 					}
; 1687 : 
; 1688 : 					// Stolen from P_SpawnFriction
; 1689 : 					mo->friction = FRACUNIT - 0x100;

  00f36	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f39	c7 80 b4 00 00
	00 00 ff 00 00	 mov	 DWORD PTR [eax+180], 65280 ; 0000ff00H

; 1690 : 					mo->movefactor = ((0x10092 - mo->friction)*(0x70))/0x158;

  00f43	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f46	b9 92 00 01 00	 mov	 ecx, 65682		; 00010092H
  00f4b	2b 88 b4 00 00
	00		 sub	 ecx, DWORD PTR [eax+180]
  00f51	6b c1 70	 imul	 eax, ecx, 112
  00f54	99		 cdq
  00f55	b9 58 01 00 00	 mov	 ecx, 344		; 00000158H
  00f5a	f7 f9		 idiv	 ecx
  00f5c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00f5f	89 82 b8 00 00
	00		 mov	 DWORD PTR [edx+184], eax

; 1691 : 				}

  00f65	e9 d0 00 00 00	 jmp	 $LN119@P_ZMovemen
$LN105@P_ZMovemen:

; 1692 : 				else if (mo->type == MT_FALLINGROCK)

  00f6a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f6d	81 78 7c 1b 01
	00 00		 cmp	 DWORD PTR [eax+124], 283 ; 0000011bH
  00f74	0f 85 a6 00 00
	00		 jne	 $LN115@P_ZMovemen

; 1693 : 				{
; 1694 : 					if (mo->momz > 2*FRACUNIT)

  00f7a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f7d	81 78 50 00 00
	02 00		 cmp	 DWORD PTR [eax+80], 131072 ; 00020000H
  00f84	7e 2e		 jle	 SHORT $LN117@P_ZMovemen

; 1695 : 						S_StartSound(mo, mo->info->activesound + (P_Random() % mo->info->mass));

  00f86	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00f89	8b b0 80 00 00
	00		 mov	 esi, DWORD PTR [eax+128]
  00f8f	e8 00 00 00 00	 call	 _P_Random
  00f94	0f b6 c0	 movzx	 eax, al
  00f97	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00f9a	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [ecx+128]
  00fa0	99		 cdq
  00fa1	f7 79 4c	 idiv	 DWORD PTR [ecx+76]
  00fa4	03 56 54	 add	 edx, DWORD PTR [esi+84]
  00fa7	52		 push	 edx
  00fa8	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00fab	52		 push	 edx
  00fac	e8 00 00 00 00	 call	 _S_StartSound
  00fb1	83 c4 08	 add	 esp, 8
$LN117@P_ZMovemen:

; 1696 : 
; 1697 : 					mo->momz /= 2; // Rocks not so bouncy

  00fb4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00fb7	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00fba	99		 cdq
  00fbb	2b c2		 sub	 eax, edx
  00fbd	d1 f8		 sar	 eax, 1
  00fbf	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00fc2	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 1698 : 
; 1699 : 					if (mo->momx < STOPSPEED && mo->momx > -STOPSPEED
; 1700 : 						&& mo->momy < STOPSPEED && mo->momy > -STOPSPEED
; 1701 : 						&& mo->momz < STOPSPEED*3 && mo->momz > -STOPSPEED*3)

  00fc5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00fc8	81 78 48 00 00
	01 00		 cmp	 DWORD PTR [eax+72], 65536 ; 00010000H
  00fcf	7d 4d		 jge	 SHORT $LN118@P_ZMovemen
  00fd1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00fd4	81 78 48 00 00
	ff ff		 cmp	 DWORD PTR [eax+72], -65536 ; ffff0000H
  00fdb	7e 41		 jle	 SHORT $LN118@P_ZMovemen
  00fdd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00fe0	81 78 4c 00 00
	01 00		 cmp	 DWORD PTR [eax+76], 65536 ; 00010000H
  00fe7	7d 35		 jge	 SHORT $LN118@P_ZMovemen
  00fe9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00fec	81 78 4c 00 00
	ff ff		 cmp	 DWORD PTR [eax+76], -65536 ; ffff0000H
  00ff3	7e 29		 jle	 SHORT $LN118@P_ZMovemen
  00ff5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ff8	81 78 50 00 00
	03 00		 cmp	 DWORD PTR [eax+80], 196608 ; 00030000H
  00fff	7d 1d		 jge	 SHORT $LN118@P_ZMovemen
  01001	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01004	81 78 50 00 00
	fd ff		 cmp	 DWORD PTR [eax+80], -196608 ; fffd0000H
  0100b	7e 11		 jle	 SHORT $LN118@P_ZMovemen

; 1702 : 						P_SetMobjState(mo, S_DISS);

  0100d	68 4f 06 00 00	 push	 1615			; 0000064fH
  01012	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01015	50		 push	 eax
  01016	e8 00 00 00 00	 call	 _P_SetMobjState
  0101b	83 c4 08	 add	 esp, 8
$LN118@P_ZMovemen:

; 1703 : 				}

  0101e	eb 1a		 jmp	 SHORT $LN119@P_ZMovemen
$LN115@P_ZMovemen:

; 1704 : 				else if (mo->type == MT_CANNONBALLDECOR)

  01020	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01023	83 78 7c 72	 cmp	 DWORD PTR [eax+124], 114 ; 00000072H
  01027	75 11		 jne	 SHORT $LN119@P_ZMovemen

; 1705 : 					mo->momz /= 2;

  01029	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0102c	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  0102f	99		 cdq
  01030	2b c2		 sub	 eax, edx
  01032	d1 f8		 sar	 eax, 1
  01034	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  01037	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN119@P_ZMovemen:

; 1706 : 			}

  0103a	eb 49		 jmp	 SHORT $LN120@P_ZMovemen
$LN100@P_ZMovemen:

; 1707 : 			else if (!(tmfloorthing) || (((tmfloorthing->flags & MF_PUSHABLE) || (tmfloorthing->flags2 & MF2_STANDONME)) || tmfloorthing->type == MT_PLAYER || tmfloorthing->type == MT_FLOORSPIKE))

  0103c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmfloorthing, 0
  01043	74 36		 je	 SHORT $LN122@P_ZMovemen
  01045	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  0104a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0104d	83 e1 40	 and	 ecx, 64			; 00000040H
  01050	75 29		 jne	 SHORT $LN122@P_ZMovemen
  01052	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  01057	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0105d	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  01063	75 16		 jne	 SHORT $LN122@P_ZMovemen
  01065	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  0106a	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  0106e	74 0b		 je	 SHORT $LN122@P_ZMovemen
  01070	a1 00 00 00 00	 mov	 eax, DWORD PTR _tmfloorthing
  01075	83 78 7c 49	 cmp	 DWORD PTR [eax+124], 73	; 00000049H
  01079	75 0a		 jne	 SHORT $LN120@P_ZMovemen
$LN122@P_ZMovemen:

; 1708 : 				mo->momz = 0;

  0107b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0107e	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN120@P_ZMovemen:

; 1709 : 		}
; 1710 : 
; 1711 : 		if (mo->type == MT_STEAM)

  01085	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01088	83 78 7c 44	 cmp	 DWORD PTR [eax+124], 68	; 00000044H
  0108c	75 05		 jne	 SHORT $LN123@P_ZMovemen

; 1712 : 			return;

  0108e	e9 a1 02 00 00	 jmp	 $LN136@P_ZMovemen
$LN123@P_ZMovemen:

; 1713 : 
; 1714 : 		mo->z = mo->floorz;

  01093	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01096	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  01099	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0109c	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1715 : 	}

  0109f	eb 31		 jmp	 SHORT $LN124@P_ZMovemen
$LN77@P_ZMovemen:

; 1716 : 	else if (!(mo->flags & MF_NOGRAVITY)) // Gravity here!

  010a1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010a4	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  010a7	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  010ad	75 23		 jne	 SHORT $LN124@P_ZMovemen

; 1717 : 	{
; 1718 : 		/// \todo may not be needed (done in P_MobjThinker normally)
; 1719 : 		mo->eflags &= ~MFE_JUSTHITFLOOR;

  010af	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010b2	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  010b8	83 e1 fd	 and	 ecx, -3			; fffffffdH
  010bb	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  010be	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 1720 : 
; 1721 : 		P_CheckGravity(mo, true);

  010c4	6a 01		 push	 1
  010c6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010c9	50		 push	 eax
  010ca	e8 00 00 00 00	 call	 _P_CheckGravity
  010cf	83 c4 08	 add	 esp, 8
$LN124@P_ZMovemen:

; 1722 : 	}
; 1723 : 
; 1724 : 	if (mo->z + mo->height > mo->ceilingz && !(mo->flags & MF_NOCLIPHEIGHT))

  010d2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010d5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  010d8	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  010db	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  010de	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010e1	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  010e4	0f 8e 4a 02 00
	00		 jle	 $LN136@P_ZMovemen
  010ea	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010ed	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  010f0	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  010f6	0f 85 38 02 00
	00		 jne	 $LN136@P_ZMovemen

; 1725 : 	{
; 1726 : 		if (mo->momz > 0) // hit the ceiling

  010fc	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  010ff	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  01103	0f 8e 30 01 00
	00		 jle	 $LN128@P_ZMovemen

; 1727 : 		{
; 1728 : 			// Flingrings bounce
; 1729 : 			if ((mo->eflags & MFE_VERTICALFLIP) && (mo->type == MT_FLINGRING

  01109	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0110c	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01112	83 e1 20	 and	 ecx, 32			; 00000020H
  01115	0f 84 14 01 00
	00		 je	 $LN127@P_ZMovemen
  0111b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0111e	83 78 7c 2c	 cmp	 DWORD PTR [eax+124], 44	; 0000002cH
  01122	0f 84 b1 00 00
	00		 je	 $LN129@P_ZMovemen
  01128	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0112b	81 78 7c e2 00
	00 00		 cmp	 DWORD PTR [eax+124], 226 ; 000000e2H
  01132	0f 84 a1 00 00
	00		 je	 $LN129@P_ZMovemen
  01138	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0113b	81 78 7c d0 00
	00 00		 cmp	 DWORD PTR [eax+124], 208 ; 000000d0H
  01142	0f 84 91 00 00
	00		 je	 $LN129@P_ZMovemen
  01148	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0114b	81 78 7c d2 00
	00 00		 cmp	 DWORD PTR [eax+124], 210 ; 000000d2H
  01152	0f 84 81 00 00
	00		 je	 $LN129@P_ZMovemen
  01158	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0115b	81 78 7c d1 00
	00 00		 cmp	 DWORD PTR [eax+124], 209 ; 000000d1H
  01162	74 75		 je	 SHORT $LN129@P_ZMovemen
  01164	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01167	81 78 7c d3 00
	00 00		 cmp	 DWORD PTR [eax+124], 211 ; 000000d3H
  0116e	74 69		 je	 SHORT $LN129@P_ZMovemen
  01170	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01173	81 78 7c d4 00
	00 00		 cmp	 DWORD PTR [eax+124], 212 ; 000000d4H
  0117a	74 5d		 je	 SHORT $LN129@P_ZMovemen
  0117c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0117f	81 78 7c d5 00
	00 00		 cmp	 DWORD PTR [eax+124], 213 ; 000000d5H
  01186	74 51		 je	 SHORT $LN129@P_ZMovemen
  01188	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0118b	81 78 7c d6 00
	00 00		 cmp	 DWORD PTR [eax+124], 214 ; 000000d6H
  01192	74 45		 je	 SHORT $LN129@P_ZMovemen
  01194	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01197	81 78 7c d7 00
	00 00		 cmp	 DWORD PTR [eax+124], 215 ; 000000d7H
  0119e	74 39		 je	 SHORT $LN129@P_ZMovemen
  011a0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  011a3	81 78 7c d8 00
	00 00		 cmp	 DWORD PTR [eax+124], 216 ; 000000d8H
  011aa	74 2d		 je	 SHORT $LN129@P_ZMovemen
  011ac	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  011af	81 78 7c d9 00
	00 00		 cmp	 DWORD PTR [eax+124], 217 ; 000000d9H
  011b6	74 21		 je	 SHORT $LN129@P_ZMovemen
  011b8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  011bb	81 78 7c da 00
	00 00		 cmp	 DWORD PTR [eax+124], 218 ; 000000daH
  011c2	74 15		 je	 SHORT $LN129@P_ZMovemen
  011c4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  011c7	81 78 7c db 00
	00 00		 cmp	 DWORD PTR [eax+124], 219 ; 000000dbH
  011ce	74 09		 je	 SHORT $LN129@P_ZMovemen
  011d0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  011d3	83 78 7c 40	 cmp	 DWORD PTR [eax+124], 64	; 00000040H
  011d7	75 56		 jne	 SHORT $LN127@P_ZMovemen
$LN129@P_ZMovemen:

; 1730 : 				|| mo->type == MT_FLINGCOIN
; 1731 : #ifdef BLUE_SPHERES
; 1732 : 				|| mo->type == MT_FLINGBALL
; 1733 : #endif
; 1734 : 				|| mo->type == MT_BOUNCERING
; 1735 : 				|| mo->type == MT_AUTOMATICRING
; 1736 : 				|| mo->type == MT_RAILRING
; 1737 : 				|| mo->type == MT_EXPLOSIONRING
; 1738 : 				|| mo->type == MT_SCATTERRING
; 1739 : 				|| mo->type == MT_GRENADERING
; 1740 : 				|| mo->type == MT_BOUNCEPICKUP
; 1741 : 				|| mo->type == MT_RAILPICKUP
; 1742 : 				|| mo->type == MT_AUTOPICKUP
; 1743 : 				|| mo->type == MT_EXPLODEPICKUP
; 1744 : 				|| mo->type == MT_SCATTERPICKUP
; 1745 : 				|| mo->type == MT_GRENADEPICKUP
; 1746 : 				|| mo->type == MT_FLINGEMERALD))
; 1747 : 			{
; 1748 : 				if (maptol & TOL_NIGHTS)

  011d9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  011e0	83 e0 40	 and	 eax, 64			; 00000040H
  011e3	74 1e		 je	 SHORT $LN130@P_ZMovemen

; 1749 : 					mo->momz = -FixedDiv(mo->momz, 10*FRACUNIT);

  011e5	68 00 00 0a 00	 push	 655360			; 000a0000H
  011ea	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  011ed	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  011f0	51		 push	 ecx
  011f1	e8 00 00 00 00	 call	 _FixedDiv
  011f6	83 c4 08	 add	 esp, 8
  011f9	f7 d8		 neg	 eax
  011fb	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  011fe	89 42 50	 mov	 DWORD PTR [edx+80], eax
  01201	eb 2a		 jmp	 SHORT $LN131@P_ZMovemen
$LN130@P_ZMovemen:

; 1750 : 				else
; 1751 : 				{
; 1752 : 					mo->momz = -FixedMul(mo->momz, FixedDiv(17*FRACUNIT,20*FRACUNIT));

  01203	68 00 00 14 00	 push	 1310720			; 00140000H
  01208	68 00 00 11 00	 push	 1114112			; 00110000H
  0120d	e8 00 00 00 00	 call	 _FixedDiv
  01212	83 c4 08	 add	 esp, 8
  01215	50		 push	 eax
  01216	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01219	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0121c	51		 push	 ecx
  0121d	e8 00 00 00 00	 call	 _FixedMul
  01222	83 c4 08	 add	 esp, 8
  01225	f7 d8		 neg	 eax
  01227	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0122a	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN131@P_ZMovemen:

; 1753 : 				}
; 1754 : 			}

  0122d	eb 0a		 jmp	 SHORT $LN128@P_ZMovemen
$LN127@P_ZMovemen:

; 1755 : 			else
; 1756 : 				mo->momz = 0;

  0122f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01232	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN128@P_ZMovemen:

; 1757 : 		}
; 1758 : 
; 1759 : 		mo->z = mo->ceilingz - mo->height;

  01239	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0123c	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0123f	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  01242	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  01245	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01248	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1760 : 
; 1761 : 		if (mo->flags2 & MF2_SKULLFLY)

  0124b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0124e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01254	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0125a	74 0e		 je	 SHORT $LN132@P_ZMovemen

; 1762 : 		{ // the skull slammed into something
; 1763 : 			mo->momz = -mo->momz;

  0125c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0125f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01262	f7 d9		 neg	 ecx
  01264	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  01267	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN132@P_ZMovemen:

; 1764 : 		}
; 1765 : 
; 1766 : 		if (mo->type == MT_FIREBALL)

  0126a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0126d	81 78 7c e7 00
	00 00		 cmp	 DWORD PTR [eax+124], 231 ; 000000e7H
  01274	75 5d		 jne	 SHORT $LN133@P_ZMovemen

; 1767 : 		{
; 1768 : 			// Don't explode on the sky!
; 1769 : 			if (mo->subsector->sector->ceilingpic == skyflatnum &&

  01276	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01279	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0127c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0127e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01281	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _skyflatnum
  01287	75 29		 jne	 SHORT $LN135@P_ZMovemen
  01289	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0128c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0128f	8b 11		 mov	 edx, DWORD PTR [ecx]
  01291	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01294	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01297	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  0129a	75 16		 jne	 SHORT $LN135@P_ZMovemen

; 1770 : 				mo->subsector->sector->ceilingheight == mo->ceilingz)
; 1771 : 			{
; 1772 : 				P_SetMobjState(mo, S_DISS);

  0129c	68 4f 06 00 00	 push	 1615			; 0000064fH
  012a1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  012a4	50		 push	 eax
  012a5	e8 00 00 00 00	 call	 _P_SetMobjState
  012aa	83 c4 08	 add	 esp, 8

; 1773 : 				return;

  012ad	e9 82 00 00 00	 jmp	 $LN136@P_ZMovemen
$LN135@P_ZMovemen:

; 1774 : 			}
; 1775 : 
; 1776 : 			S_StartSound(mo, sfx_tink);

  012b2	68 e6 00 00 00	 push	 230			; 000000e6H
  012b7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  012ba	50		 push	 eax
  012bb	e8 00 00 00 00	 call	 _S_StartSound
  012c0	83 c4 08	 add	 esp, 8

; 1777 : 
; 1778 : 			P_ExplodeMissile(mo);

  012c3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  012c6	50		 push	 eax
  012c7	e8 00 00 00 00	 call	 _P_ExplodeMissile
  012cc	83 c4 04	 add	 esp, 4

; 1779 : 			return;

  012cf	eb 63		 jmp	 SHORT $LN136@P_ZMovemen

; 1780 : 		}

  012d1	eb 61		 jmp	 SHORT $LN136@P_ZMovemen
$LN133@P_ZMovemen:

; 1781 : 		else if ((mo->flags & MF_MISSILE) && !(mo->flags & MF_NOCLIP))

  012d3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  012d6	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  012d9	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  012df	74 53		 je	 SHORT $LN136@P_ZMovemen
  012e1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  012e4	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  012e7	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  012ed	75 45		 jne	 SHORT $LN136@P_ZMovemen

; 1782 : 		{
; 1783 : 			// Don't explode on the sky!
; 1784 : 			if (mo->subsector->sector->ceilingpic == skyflatnum &&

  012ef	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  012f2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  012f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  012f7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  012fa	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _skyflatnum
  01300	75 26		 jne	 SHORT $LN137@P_ZMovemen
  01302	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  01305	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01308	8b 11		 mov	 edx, DWORD PTR [ecx]
  0130a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0130d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01310	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  01313	75 13		 jne	 SHORT $LN137@P_ZMovemen

; 1785 : 				mo->subsector->sector->ceilingheight == mo->ceilingz)
; 1786 : 			{
; 1787 : 				P_SetMobjState(mo, S_DISS);

  01315	68 4f 06 00 00	 push	 1615			; 0000064fH
  0131a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0131d	50		 push	 eax
  0131e	e8 00 00 00 00	 call	 _P_SetMobjState
  01323	83 c4 08	 add	 esp, 8

; 1788 : 				return;

  01326	eb 0c		 jmp	 SHORT $LN136@P_ZMovemen
$LN137@P_ZMovemen:

; 1789 : 			}
; 1790 : 
; 1791 : 			P_ExplodeMissile(mo);

  01328	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0132b	50		 push	 eax
  0132c	e8 00 00 00 00	 call	 _P_ExplodeMissile
  01331	83 c4 04	 add	 esp, 4
$LN136@P_ZMovemen:

; 1792 : 			return;
; 1793 : 		}
; 1794 : 	}
; 1795 : }

  01334	5f		 pop	 edi
  01335	5e		 pop	 esi
  01336	5b		 pop	 ebx
  01337	8b e5		 mov	 esp, ebp
  01339	5d		 pop	 ebp
  0133a	c3		 ret	 0
  0133b	90		 npad	 1
$LN140@P_ZMovemen:
  0133c	00 00 00 00	 DD	 $LN24@P_ZMovemen
  01340	00 00 00 00	 DD	 $LN26@P_ZMovemen
  01344	00 00 00 00	 DD	 $LN42@P_ZMovemen
  01348	00 00 00 00	 DD	 $LN63@P_ZMovemen
  0134c	00 00 00 00	 DD	 $LN29@P_ZMovemen
  01350	00 00 00 00	 DD	 $LN40@P_ZMovemen
  01354	00 00 00 00	 DD	 $LN20@P_ZMovemen
  01358	00 00 00 00	 DD	 $LN66@P_ZMovemen
$LN139@P_ZMovemen:
  0135c	00		 DB	 0
  0135d	07		 DB	 7
  0135e	07		 DB	 7
  0135f	07		 DB	 7
  01360	07		 DB	 7
  01361	07		 DB	 7
  01362	07		 DB	 7
  01363	07		 DB	 7
  01364	07		 DB	 7
  01365	07		 DB	 7
  01366	07		 DB	 7
  01367	07		 DB	 7
  01368	07		 DB	 7
  01369	07		 DB	 7
  0136a	07		 DB	 7
  0136b	07		 DB	 7
  0136c	07		 DB	 7
  0136d	07		 DB	 7
  0136e	07		 DB	 7
  0136f	07		 DB	 7
  01370	07		 DB	 7
  01371	07		 DB	 7
  01372	07		 DB	 7
  01373	07		 DB	 7
  01374	07		 DB	 7
  01375	01		 DB	 1
  01376	07		 DB	 7
  01377	07		 DB	 7
  01378	07		 DB	 7
  01379	07		 DB	 7
  0137a	07		 DB	 7
  0137b	07		 DB	 7
  0137c	07		 DB	 7
  0137d	02		 DB	 2
  0137e	02		 DB	 2
  0137f	07		 DB	 7
  01380	07		 DB	 7
  01381	07		 DB	 7
  01382	02		 DB	 2
  01383	02		 DB	 2
  01384	07		 DB	 7
  01385	07		 DB	 7
  01386	07		 DB	 7
  01387	07		 DB	 7
  01388	07		 DB	 7
  01389	07		 DB	 7
  0138a	07		 DB	 7
  0138b	07		 DB	 7
  0138c	07		 DB	 7
  0138d	07		 DB	 7
  0138e	07		 DB	 7
  0138f	07		 DB	 7
  01390	07		 DB	 7
  01391	07		 DB	 7
  01392	02		 DB	 2
  01393	07		 DB	 7
  01394	07		 DB	 7
  01395	07		 DB	 7
  01396	07		 DB	 7
  01397	07		 DB	 7
  01398	07		 DB	 7
  01399	07		 DB	 7
  0139a	07		 DB	 7
  0139b	07		 DB	 7
  0139c	07		 DB	 7
  0139d	07		 DB	 7
  0139e	07		 DB	 7
  0139f	07		 DB	 7
  013a0	07		 DB	 7
  013a1	07		 DB	 7
  013a2	07		 DB	 7
  013a3	07		 DB	 7
  013a4	07		 DB	 7
  013a5	07		 DB	 7
  013a6	07		 DB	 7
  013a7	07		 DB	 7
  013a8	07		 DB	 7
  013a9	07		 DB	 7
  013aa	07		 DB	 7
  013ab	07		 DB	 7
  013ac	07		 DB	 7
  013ad	07		 DB	 7
  013ae	07		 DB	 7
  013af	07		 DB	 7
  013b0	07		 DB	 7
  013b1	07		 DB	 7
  013b2	07		 DB	 7
  013b3	07		 DB	 7
  013b4	07		 DB	 7
  013b5	07		 DB	 7
  013b6	07		 DB	 7
  013b7	07		 DB	 7
  013b8	07		 DB	 7
  013b9	07		 DB	 7
  013ba	07		 DB	 7
  013bb	07		 DB	 7
  013bc	07		 DB	 7
  013bd	07		 DB	 7
  013be	07		 DB	 7
  013bf	07		 DB	 7
  013c0	07		 DB	 7
  013c1	07		 DB	 7
  013c2	07		 DB	 7
  013c3	07		 DB	 7
  013c4	07		 DB	 7
  013c5	07		 DB	 7
  013c6	07		 DB	 7
  013c7	07		 DB	 7
  013c8	07		 DB	 7
  013c9	07		 DB	 7
  013ca	07		 DB	 7
  013cb	07		 DB	 7
  013cc	07		 DB	 7
  013cd	07		 DB	 7
  013ce	07		 DB	 7
  013cf	07		 DB	 7
  013d0	07		 DB	 7
  013d1	07		 DB	 7
  013d2	07		 DB	 7
  013d3	07		 DB	 7
  013d4	07		 DB	 7
  013d5	07		 DB	 7
  013d6	07		 DB	 7
  013d7	07		 DB	 7
  013d8	07		 DB	 7
  013d9	07		 DB	 7
  013da	07		 DB	 7
  013db	07		 DB	 7
  013dc	07		 DB	 7
  013dd	07		 DB	 7
  013de	07		 DB	 7
  013df	07		 DB	 7
  013e0	07		 DB	 7
  013e1	07		 DB	 7
  013e2	07		 DB	 7
  013e3	07		 DB	 7
  013e4	07		 DB	 7
  013e5	07		 DB	 7
  013e6	07		 DB	 7
  013e7	03		 DB	 3
  013e8	03		 DB	 3
  013e9	07		 DB	 7
  013ea	07		 DB	 7
  013eb	07		 DB	 7
  013ec	07		 DB	 7
  013ed	07		 DB	 7
  013ee	07		 DB	 7
  013ef	07		 DB	 7
  013f0	07		 DB	 7
  013f1	07		 DB	 7
  013f2	07		 DB	 7
  013f3	07		 DB	 7
  013f4	07		 DB	 7
  013f5	07		 DB	 7
  013f6	07		 DB	 7
  013f7	07		 DB	 7
  013f8	07		 DB	 7
  013f9	07		 DB	 7
  013fa	07		 DB	 7
  013fb	07		 DB	 7
  013fc	07		 DB	 7
  013fd	07		 DB	 7
  013fe	07		 DB	 7
  013ff	07		 DB	 7
  01400	07		 DB	 7
  01401	07		 DB	 7
  01402	07		 DB	 7
  01403	07		 DB	 7
  01404	07		 DB	 7
  01405	07		 DB	 7
  01406	07		 DB	 7
  01407	07		 DB	 7
  01408	07		 DB	 7
  01409	04		 DB	 4
  0140a	05		 DB	 5
  0140b	07		 DB	 7
  0140c	07		 DB	 7
  0140d	07		 DB	 7
  0140e	07		 DB	 7
  0140f	07		 DB	 7
  01410	07		 DB	 7
  01411	07		 DB	 7
  01412	07		 DB	 7
  01413	07		 DB	 7
  01414	07		 DB	 7
  01415	07		 DB	 7
  01416	07		 DB	 7
  01417	07		 DB	 7
  01418	07		 DB	 7
  01419	07		 DB	 7
  0141a	07		 DB	 7
  0141b	07		 DB	 7
  0141c	07		 DB	 7
  0141d	07		 DB	 7
  0141e	07		 DB	 7
  0141f	07		 DB	 7
  01420	07		 DB	 7
  01421	07		 DB	 7
  01422	02		 DB	 2
  01423	02		 DB	 2
  01424	02		 DB	 2
  01425	02		 DB	 2
  01426	02		 DB	 2
  01427	02		 DB	 2
  01428	02		 DB	 2
  01429	02		 DB	 2
  0142a	02		 DB	 2
  0142b	02		 DB	 2
  0142c	02		 DB	 2
  0142d	02		 DB	 2
  0142e	06		 DB	 6
  0142f	07		 DB	 7
  01430	07		 DB	 7
  01431	07		 DB	 7
  01432	07		 DB	 7
  01433	02		 DB	 2
  01434	02		 DB	 2
  01435	07		 DB	 7
  01436	07		 DB	 7
  01437	07		 DB	 7
  01438	07		 DB	 7
  01439	07		 DB	 7
  0143a	07		 DB	 7
  0143b	07		 DB	 7
  0143c	07		 DB	 7
  0143d	07		 DB	 7
  0143e	07		 DB	 7
  0143f	07		 DB	 7
  01440	07		 DB	 7
  01441	07		 DB	 7
  01442	07		 DB	 7
  01443	07		 DB	 7
  01444	07		 DB	 7
  01445	07		 DB	 7
  01446	07		 DB	 7
  01447	07		 DB	 7
  01448	07		 DB	 7
  01449	07		 DB	 7
  0144a	07		 DB	 7
  0144b	07		 DB	 7
  0144c	07		 DB	 7
  0144d	07		 DB	 7
  0144e	02		 DB	 2
_P_ZMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RingZMovement
_TEXT	SEGMENT
_thingtop$1 = -16					; size = 4
_delta2$2 = -12						; size = 4
_delta1$3 = -8						; size = 4
_rover$4 = -4						; size = 4
_mo$ = 8						; size = 4
_P_RingZMovement PROC					; COMDAT

; 1278 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1279 : 	// Intercept the stupid 'fall through 3dfloors' bug
; 1280 : 	if (mo->subsector->sector->ffloors)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	83 ba 90 00 00
	00 00		 cmp	 DWORD PTR [edx+144], 0
  00018	0f 84 86 01 00
	00		 je	 $LN3@P_RingZMov

; 1281 : 	{
; 1282 : 		ffloor_t *rover;
; 1283 : 		fixed_t delta1, delta2;
; 1284 : 		INT32 thingtop = mo->z + mo->height;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00021	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00024	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00027	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0002a	89 4d f0	 mov	 DWORD PTR _thingtop$1[ebp], ecx

; 1285 : 
; 1286 : 		for (rover = mo->subsector->sector->ffloors; rover; rover = rover->next)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00030	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0003b	89 45 fc	 mov	 DWORD PTR _rover$4[ebp], eax
  0003e	eb 09		 jmp	 SHORT $LN4@P_RingZMov
$LN2@P_RingZMov:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00043	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00046	89 4d fc	 mov	 DWORD PTR _rover$4[ebp], ecx
$LN4@P_RingZMov:
  00049	83 7d fc 00	 cmp	 DWORD PTR _rover$4[ebp], 0
  0004d	0f 84 51 01 00
	00		 je	 $LN3@P_RingZMov

; 1287 : 		{
; 1288 : 			if (!(rover->flags & FF_EXISTS))

  00053	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00056	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00059	83 e1 01	 and	 ecx, 1
  0005c	75 02		 jne	 SHORT $LN6@P_RingZMov

; 1289 : 				continue;

  0005e	eb e0		 jmp	 SHORT $LN2@P_RingZMov
$LN6@P_RingZMov:

; 1290 : 
; 1291 : 			if ((!(rover->flags & FF_BLOCKOTHERS || rover->flags & FF_QUICKSAND) || (rover->flags & FF_SWIMMABLE)))

  00060	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00063	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00066	83 e1 04	 and	 ecx, 4
  00069	75 0e		 jne	 SHORT $LN9@P_RingZMov
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  0006e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00071	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00077	74 0b		 je	 SHORT $LN8@P_RingZMov
$LN9@P_RingZMov:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  0007c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0007f	83 e1 20	 and	 ecx, 32			; 00000020H
  00082	74 02		 je	 SHORT $LN7@P_RingZMov
$LN8@P_RingZMov:

; 1292 : 				continue;

  00084	eb ba		 jmp	 SHORT $LN2@P_RingZMov
$LN7@P_RingZMov:

; 1293 : 
; 1294 : 			if (rover->flags & FF_QUICKSAND)

  00086	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00089	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0008c	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00092	74 2a		 je	 SHORT $LN11@P_RingZMov

; 1295 : 			{
; 1296 : 				if (mo->z < *rover->topheight && *rover->bottomheight < thingtop)

  00094	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0009c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0009f	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000a1	7d 1b		 jge	 SHORT $LN11@P_RingZMov
  000a3	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  000a6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ab	3b 55 f0	 cmp	 edx, DWORD PTR _thingtop$1[ebp]
  000ae	7d 0e		 jge	 SHORT $LN11@P_RingZMov

; 1297 : 				{
; 1298 : 					mo->floorz = mo->z;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  000b6	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000b9	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 1299 : 					continue;

  000bc	eb 82		 jmp	 SHORT $LN2@P_RingZMov
$LN11@P_RingZMov:

; 1300 : 				}
; 1301 : 			}
; 1302 : 
; 1303 : 			delta1 = mo->z - (*rover->bottomheight + ((*rover->topheight - *rover->bottomheight)/2));

  000be	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  000c1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _rover$4[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	8b 55 fc	 mov	 edx, DWORD PTR _rover$4[ebp]
  000cc	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  000cf	8b 00		 mov	 eax, DWORD PTR [eax]
  000d1	2b 02		 sub	 eax, DWORD PTR [edx]
  000d3	99		 cdq
  000d4	2b c2		 sub	 eax, edx
  000d6	d1 f8		 sar	 eax, 1
  000d8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000da	03 c8		 add	 ecx, eax
  000dc	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  000df	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000e2	2b c1		 sub	 eax, ecx
  000e4	89 45 f8	 mov	 DWORD PTR _delta1$3[ebp], eax

; 1304 : 			delta2 = thingtop - (*rover->bottomheight + ((*rover->topheight - *rover->bottomheight)/2));

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  000ea	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _rover$4[ebp]
  000f0	8b 02		 mov	 eax, DWORD PTR [edx]
  000f2	8b 55 fc	 mov	 edx, DWORD PTR _rover$4[ebp]
  000f5	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  000f8	8b 00		 mov	 eax, DWORD PTR [eax]
  000fa	2b 02		 sub	 eax, DWORD PTR [edx]
  000fc	99		 cdq
  000fd	2b c2		 sub	 eax, edx
  000ff	d1 f8		 sar	 eax, 1
  00101	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00103	03 c8		 add	 ecx, eax
  00105	8b 55 f0	 mov	 edx, DWORD PTR _thingtop$1[ebp]
  00108	2b d1		 sub	 edx, ecx
  0010a	89 55 f4	 mov	 DWORD PTR _delta2$2[ebp], edx

; 1305 : 			if (*rover->topheight > mo->floorz && abs(delta1) < abs(delta2)
; 1306 : 				&& (!(rover->flags & FF_REVERSEPLATFORM)))

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00110	8b 08		 mov	 ecx, DWORD PTR [eax]
  00112	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00115	8b 01		 mov	 eax, DWORD PTR [ecx]
  00117	3b 42 38	 cmp	 eax, DWORD PTR [edx+56]
  0011a	7e 39		 jle	 SHORT $LN12@P_RingZMov
  0011c	8b 45 f8	 mov	 eax, DWORD PTR _delta1$3[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _abs
  00125	83 c4 04	 add	 esp, 4
  00128	8b f0		 mov	 esi, eax
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR _delta2$2[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 _abs
  00133	83 c4 04	 add	 esp, 4
  00136	3b f0		 cmp	 esi, eax
  00138	7d 1b		 jge	 SHORT $LN12@P_RingZMov
  0013a	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  0013d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00140	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  00146	75 0d		 jne	 SHORT $LN12@P_RingZMov

; 1307 : 			{
; 1308 : 				mo->floorz = *rover->topheight;

  00148	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  0014b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00150	8b 01		 mov	 eax, DWORD PTR [ecx]
  00152	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN12@P_RingZMov:

; 1309 : 			}
; 1310 : 			if (*rover->bottomheight < mo->ceilingz && abs(delta1) >= abs(delta2)
; 1311 : 				&& (/*mo->z + mo->height <= *rover->bottomheight ||*/ !(rover->flags & FF_PLATFORM)))

  00155	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00158	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0015b	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0015e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00160	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  00163	7d 3a		 jge	 SHORT $LN13@P_RingZMov
  00165	8b 45 f8	 mov	 eax, DWORD PTR _delta1$3[ebp]
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 _abs
  0016e	83 c4 04	 add	 esp, 4
  00171	8b f0		 mov	 esi, eax
  00173	8b 4d f4	 mov	 ecx, DWORD PTR _delta2$2[ebp]
  00176	51		 push	 ecx
  00177	e8 00 00 00 00	 call	 _abs
  0017c	83 c4 04	 add	 esp, 4
  0017f	3b f0		 cmp	 esi, eax
  00181	7c 1c		 jl	 SHORT $LN13@P_RingZMov
  00183	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00186	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00189	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  0018f	75 0e		 jne	 SHORT $LN13@P_RingZMov

; 1312 : 			{
; 1313 : 				mo->ceilingz = *rover->bottomheight;

  00191	8b 45 fc	 mov	 eax, DWORD PTR _rover$4[ebp]
  00194	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00197	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0019a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0019c	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$LN13@P_RingZMov:

; 1314 : 			}
; 1315 : 		}

  0019f	e9 9c fe ff ff	 jmp	 $LN2@P_RingZMov
$LN3@P_RingZMov:

; 1316 : 	}
; 1317 : 
; 1318 : 	// adjust height
; 1319 : 	if (mo->pmomz && mo->z != mo->floorz)

  001a4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001a7	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  001ab	74 2a		 je	 SHORT $LN14@P_RingZMov
  001ad	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001b0	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  001b3	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  001b6	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  001b9	74 1c		 je	 SHORT $LN14@P_RingZMov

; 1320 : 	{
; 1321 : 		mo->momz += mo->pmomz;

  001bb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001be	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001c1	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001c4	03 4a 54	 add	 ecx, DWORD PTR [edx+84]
  001c7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001ca	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 1322 : 		mo->pmomz = 0;

  001cd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001d0	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0
$LN14@P_RingZMov:

; 1323 : 	}
; 1324 : 	mo->z += mo->momz;

  001d7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001da	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001dd	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001e0	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  001e3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001e6	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1325 : 
; 1326 : 	// clip movement
; 1327 : 	if (mo->z <= mo->floorz && !(mo->flags & MF_NOCLIPHEIGHT))

  001e9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001ec	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  001ef	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  001f2	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  001f5	7f 26		 jg	 SHORT $LN15@P_RingZMov
  001f7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001fa	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001fd	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  00203	75 18		 jne	 SHORT $LN15@P_RingZMov

; 1328 : 	{
; 1329 : 		mo->z = mo->floorz;

  00205	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00208	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0020b	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0020e	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1330 : 
; 1331 : 		mo->momz = 0;

  00211	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00214	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 1332 : 	}

  0021b	eb 3e		 jmp	 SHORT $LN17@P_RingZMov
$LN15@P_RingZMov:

; 1333 : 	else if (mo->z + mo->height > mo->ceilingz && !(mo->flags & MF_NOCLIPHEIGHT))

  0021d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00220	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00223	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00226	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00229	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0022c	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  0022f	7e 2a		 jle	 SHORT $LN17@P_RingZMov
  00231	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00234	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00237	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  0023d	75 1c		 jne	 SHORT $LN17@P_RingZMov

; 1334 : 	{
; 1335 : 		mo->momz = 0;

  0023f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00242	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 1336 : 
; 1337 : 		mo->z = mo->ceilingz - mo->height;

  00249	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0024c	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0024f	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00252	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  00255	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00258	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN17@P_RingZMov:

; 1338 : 	}
; 1339 : }

  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	8b e5		 mov	 esp, ebp
  00260	5d		 pop	 ebp
  00261	c3		 ret	 0
_P_RingZMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SceneryXYMovement
_TEXT	SEGMENT
_oldy$ = -24						; size = 4
_oldx$ = -20						; size = 4
_ymove$ = -16						; size = 4
_xmove$ = -12						; size = 4
_ptryy$ = -8						; size = 4
_ptryx$ = -4						; size = 4
_mo$ = 8						; size = 4
_P_SceneryXYMovement PROC				; COMDAT

; 1235 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1236 : 	fixed_t ptryx, ptryy, xmove, ymove;
; 1237 : 	fixed_t oldx, oldy; // reducing bobbing/momentum on ice when up against walls
; 1238 : 
; 1239 : 	P_CheckMobjSpeed(mo);

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_CheckMobjSpeed
  00012	83 c4 04	 add	 esp, 4

; 1240 : 
; 1241 : 	xmove = mo->momx;

  00015	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00018	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0001b	89 4d f4	 mov	 DWORD PTR _xmove$[ebp], ecx

; 1242 : 	ymove = mo->momy;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00021	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00024	89 4d f0	 mov	 DWORD PTR _ymove$[ebp], ecx

; 1243 : 
; 1244 : 	oldx = mo->x;

  00027	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0002a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002d	89 4d ec	 mov	 DWORD PTR _oldx$[ebp], ecx

; 1245 : 	oldy = mo->y;

  00030	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00033	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00036	89 4d e8	 mov	 DWORD PTR _oldy$[ebp], ecx
$LN12@P_SceneryX:

; 1246 : 
; 1247 : 	do
; 1248 : 	{
; 1249 : 		if (xmove > MAXMOVE/2 || ymove > MAXMOVE/2)

  00039	81 7d f4 00 00
	1e 00		 cmp	 DWORD PTR _xmove$[ebp], 1966080 ; 001e0000H
  00040	7f 09		 jg	 SHORT $LN7@P_SceneryX
  00042	81 7d f0 00 00
	1e 00		 cmp	 DWORD PTR _ymove$[ebp], 1966080 ; 001e0000H
  00049	7e 34		 jle	 SHORT $LN5@P_SceneryX
$LN7@P_SceneryX:

; 1250 : 		{
; 1251 : 			ptryx = mo->x + xmove/2;

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _xmove$[ebp]
  0004e	99		 cdq
  0004f	2b c2		 sub	 eax, edx
  00051	d1 f8		 sar	 eax, 1
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00056	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00059	89 45 fc	 mov	 DWORD PTR _ptryx$[ebp], eax

; 1252 : 			ptryy = mo->y + ymove/2;

  0005c	8b 45 f0	 mov	 eax, DWORD PTR _ymove$[ebp]
  0005f	99		 cdq
  00060	2b c2		 sub	 eax, edx
  00062	d1 f8		 sar	 eax, 1
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00067	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  0006a	89 45 f8	 mov	 DWORD PTR _ptryy$[ebp], eax

; 1253 : 			xmove >>= 1;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR _xmove$[ebp]
  00070	d1 f8		 sar	 eax, 1
  00072	89 45 f4	 mov	 DWORD PTR _xmove$[ebp], eax

; 1254 : 			ymove >>= 1;

  00075	8b 45 f0	 mov	 eax, DWORD PTR _ymove$[ebp]
  00078	d1 f8		 sar	 eax, 1
  0007a	89 45 f0	 mov	 DWORD PTR _ymove$[ebp], eax

; 1255 : 		}

  0007d	eb 25		 jmp	 SHORT $LN6@P_SceneryX
$LN5@P_SceneryX:

; 1256 : 		else
; 1257 : 		{
; 1258 : 			ptryx = mo->x + xmove;

  0007f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00082	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00085	03 4d f4	 add	 ecx, DWORD PTR _xmove$[ebp]
  00088	89 4d fc	 mov	 DWORD PTR _ptryx$[ebp], ecx

; 1259 : 			ptryy = mo->y + ymove;

  0008b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0008e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00091	03 4d f0	 add	 ecx, DWORD PTR _ymove$[ebp]
  00094	89 4d f8	 mov	 DWORD PTR _ptryy$[ebp], ecx

; 1260 : 			xmove = ymove = 0;

  00097	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ymove$[ebp], 0
  0009e	8b 45 f0	 mov	 eax, DWORD PTR _ymove$[ebp]
  000a1	89 45 f4	 mov	 DWORD PTR _xmove$[ebp], eax
$LN6@P_SceneryX:

; 1261 : 		}
; 1262 : 
; 1263 : 		if (!P_SceneryTryMove(mo, ptryx, ptryy))

  000a4	8b 45 f8	 mov	 eax, DWORD PTR _ptryy$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _ptryx$[ebp]
  000ab	51		 push	 ecx
  000ac	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 _P_SceneryTryMove
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	85 c0		 test	 eax, eax
  000ba	75 14		 jne	 SHORT $LN8@P_SceneryX

; 1264 : 			mo->momx = mo->momy = 0; // blocked move

  000bc	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000bf	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  000c9	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN8@P_SceneryX:

; 1265 : 
; 1266 : 	} while (xmove || ymove);

  000d0	83 7d f4 00	 cmp	 DWORD PTR _xmove$[ebp], 0
  000d4	0f 85 5f ff ff
	ff		 jne	 $LN12@P_SceneryX
  000da	83 7d f0 00	 cmp	 DWORD PTR _ymove$[ebp], 0
  000de	0f 85 55 ff ff
	ff		 jne	 $LN12@P_SceneryX

; 1267 : 
; 1268 : 	if (mo->z > mo->floorz && !(mo->flags2 & MF2_ONMOBJ))

  000e4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  000ea	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000ed	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  000f0	7e 13		 jle	 SHORT $LN9@P_SceneryX
  000f2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000f5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000fb	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00101	75 02		 jne	 SHORT $LN9@P_SceneryX

; 1269 : 		return; // no friction when airborne

  00103	eb 24		 jmp	 SHORT $LN1@P_SceneryX
$LN9@P_SceneryX:

; 1270 : 
; 1271 : 	if (mo->z > mo->floorz)

  00105	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00108	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0010b	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0010e	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00111	7e 02		 jle	 SHORT $LN10@P_SceneryX

; 1272 : 		return; // no friction when airborne

  00113	eb 14		 jmp	 SHORT $LN1@P_SceneryX
$LN10@P_SceneryX:

; 1273 : 
; 1274 : 	P_SceneryXYFriction(mo, oldx, oldy);

  00115	8b 45 e8	 mov	 eax, DWORD PTR _oldy$[ebp]
  00118	50		 push	 eax
  00119	8b 4d ec	 mov	 ecx, DWORD PTR _oldx$[ebp]
  0011c	51		 push	 ecx
  0011d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00120	52		 push	 edx
  00121	e8 00 00 00 00	 call	 _P_SceneryXYFriction
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@P_SceneryX:

; 1275 : }

  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c3		 ret	 0
_P_SceneryXYMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RingXYMovement
_TEXT	SEGMENT
_ymove$ = -16						; size = 4
_xmove$ = -12						; size = 4
_ptryy$ = -8						; size = 4
_ptryx$ = -4						; size = 4
_mo$ = 8						; size = 4
_P_RingXYMovement PROC					; COMDAT

; 1205 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1206 : 	fixed_t ptryx, ptryy, xmove, ymove;
; 1207 : 
; 1208 : 	P_CheckMobjSpeed(mo);

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_CheckMobjSpeed
  00012	83 c4 04	 add	 esp, 4

; 1209 : 
; 1210 : 	xmove = mo->momx;

  00015	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00018	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0001b	89 4d f4	 mov	 DWORD PTR _xmove$[ebp], ecx

; 1211 : 	ymove = mo->momy;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00021	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00024	89 4d f0	 mov	 DWORD PTR _ymove$[ebp], ecx
$LN10@P_RingXYMo:

; 1212 : 
; 1213 : 	do
; 1214 : 	{
; 1215 : 		if (xmove > MAXMOVE/2 || ymove > MAXMOVE/2)

  00027	81 7d f4 00 00
	1e 00		 cmp	 DWORD PTR _xmove$[ebp], 1966080 ; 001e0000H
  0002e	7f 09		 jg	 SHORT $LN7@P_RingXYMo
  00030	81 7d f0 00 00
	1e 00		 cmp	 DWORD PTR _ymove$[ebp], 1966080 ; 001e0000H
  00037	7e 34		 jle	 SHORT $LN5@P_RingXYMo
$LN7@P_RingXYMo:

; 1216 : 		{
; 1217 : 			ptryx = mo->x + xmove/2;

  00039	8b 45 f4	 mov	 eax, DWORD PTR _xmove$[ebp]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00044	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00047	89 45 fc	 mov	 DWORD PTR _ptryx$[ebp], eax

; 1218 : 			ptryy = mo->y + ymove/2;

  0004a	8b 45 f0	 mov	 eax, DWORD PTR _ymove$[ebp]
  0004d	99		 cdq
  0004e	2b c2		 sub	 eax, edx
  00050	d1 f8		 sar	 eax, 1
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00055	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00058	89 45 f8	 mov	 DWORD PTR _ptryy$[ebp], eax

; 1219 : 			xmove >>= 1;

  0005b	8b 45 f4	 mov	 eax, DWORD PTR _xmove$[ebp]
  0005e	d1 f8		 sar	 eax, 1
  00060	89 45 f4	 mov	 DWORD PTR _xmove$[ebp], eax

; 1220 : 			ymove >>= 1;

  00063	8b 45 f0	 mov	 eax, DWORD PTR _ymove$[ebp]
  00066	d1 f8		 sar	 eax, 1
  00068	89 45 f0	 mov	 DWORD PTR _ymove$[ebp], eax

; 1221 : 		}

  0006b	eb 25		 jmp	 SHORT $LN6@P_RingXYMo
$LN5@P_RingXYMo:

; 1222 : 		else
; 1223 : 		{
; 1224 : 			ptryx = mo->x + xmove;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00070	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00073	03 4d f4	 add	 ecx, DWORD PTR _xmove$[ebp]
  00076	89 4d fc	 mov	 DWORD PTR _ptryx$[ebp], ecx

; 1225 : 			ptryy = mo->y + ymove;

  00079	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0007c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0007f	03 4d f0	 add	 ecx, DWORD PTR _ymove$[ebp]
  00082	89 4d f8	 mov	 DWORD PTR _ptryy$[ebp], ecx

; 1226 : 			xmove = ymove = 0;

  00085	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ymove$[ebp], 0
  0008c	8b 45 f0	 mov	 eax, DWORD PTR _ymove$[ebp]
  0008f	89 45 f4	 mov	 DWORD PTR _xmove$[ebp], eax
$LN6@P_RingXYMo:

; 1227 : 		}
; 1228 : 
; 1229 : 		if (!P_SceneryTryMove(mo, ptryx, ptryy))

  00092	8b 45 f8	 mov	 eax, DWORD PTR _ptryy$[ebp]
  00095	50		 push	 eax
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _ptryx$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 _P_SceneryTryMove
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	85 c0		 test	 eax, eax
  000a8	75 0c		 jne	 SHORT $LN8@P_RingXYMo

; 1230 : 			P_SlideMove(mo);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _P_SlideMove
  000b3	83 c4 04	 add	 esp, 4
$LN8@P_RingXYMo:

; 1231 : 	} while (xmove || ymove);

  000b6	83 7d f4 00	 cmp	 DWORD PTR _xmove$[ebp], 0
  000ba	0f 85 67 ff ff
	ff		 jne	 $LN10@P_RingXYMo
  000c0	83 7d f0 00	 cmp	 DWORD PTR _ymove$[ebp], 0
  000c4	0f 85 5d ff ff
	ff		 jne	 $LN10@P_RingXYMo

; 1232 : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
_P_RingXYMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_XYFriction
_TEXT	SEGMENT
_direction$1 = -8					; size = 4
_player$ = -4						; size = 4
_mo$ = 8						; size = 4
_oldx$ = 12						; size = 4
_oldy$ = 16						; size = 4
_P_XYFriction PROC					; COMDAT

; 769  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 770  : 	player_t *player = mo->player; // valid only if player avatar

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00012	89 4d fc	 mov	 DWORD PTR _player$[ebp], ecx

; 771  : 
; 772  : 	if (player)

  00015	83 7d fc 00	 cmp	 DWORD PTR _player$[ebp], 0
  00019	0f 84 ba 01 00
	00		 je	 $LN2@P_XYFricti

; 773  : 	{
; 774  : 		if (player->rmomx > -STOPSPEED && player->rmomx < STOPSPEED
; 775  : 			&& player->rmomy > -STOPSPEED && player->rmomy < STOPSPEED
; 776  : 			&& (!(player->cmd.forwardmove && !(twodlevel || (player->mo->flags2 & MF2_TWOD))) && !player->cmd.sidemove && !(player->pflags & PF_SPINNING)))

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00022	81 b8 44 01 00
	00 00 00 ff ff	 cmp	 DWORD PTR [eax+324], -65536 ; ffff0000H
  0002c	0f 8e cb 00 00
	00		 jle	 $LN4@P_XYFricti
  00032	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00035	81 b8 44 01 00
	00 00 00 01 00	 cmp	 DWORD PTR [eax+324], 65536 ; 00010000H
  0003f	0f 8d b8 00 00
	00		 jge	 $LN4@P_XYFricti
  00045	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00048	81 b8 48 01 00
	00 00 00 ff ff	 cmp	 DWORD PTR [eax+328], -65536 ; ffff0000H
  00052	0f 8e a5 00 00
	00		 jle	 $LN4@P_XYFricti
  00058	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0005b	81 b8 48 01 00
	00 00 00 01 00	 cmp	 DWORD PTR [eax+328], 65536 ; 00010000H
  00065	0f 8d 92 00 00
	00		 jge	 $LN4@P_XYFricti
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0006e	0f be 48 08	 movsx	 ecx, BYTE PTR [eax+8]
  00072	85 c9		 test	 ecx, ecx
  00074	74 21		 je	 SHORT $LN7@P_XYFricti
  00076	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0007d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00082	75 13		 jne	 SHORT $LN7@P_XYFricti
  00084	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0008f	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00095	74 66		 je	 SHORT $LN4@P_XYFricti
$LN7@P_XYFricti:
  00097	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0009a	0f be 48 09	 movsx	 ecx, BYTE PTR [eax+9]
  0009e	85 c9		 test	 ecx, ecx
  000a0	75 5b		 jne	 SHORT $LN4@P_XYFricti
  000a2	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000a5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000ab	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  000b1	75 4a		 jne	 SHORT $LN4@P_XYFricti

; 777  : 		{
; 778  : 			// if in a walking frame, stop moving
; 779  : 			if (player && (player->pflags & PF_WALKINGANIM))

  000b3	83 7d fc 00	 cmp	 DWORD PTR _player$[ebp], 0
  000b7	74 21		 je	 SHORT $LN8@P_XYFricti
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000bc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000c2	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000c8	74 10		 je	 SHORT $LN8@P_XYFricti

; 780  : 				P_SetPlayerMobjState(player->mo, S_PLAY_STND);

  000ca	6a 01		 push	 1
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  000d7	83 c4 08	 add	 esp, 8
$LN8@P_XYFricti:

; 781  : 			mo->momx = player->cmomx;

  000da	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000e0	8b 91 3c 01 00
	00		 mov	 edx, DWORD PTR [ecx+316]
  000e6	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 782  : 			mo->momy = player->cmomy;

  000e9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000ef	8b 91 40 01 00
	00		 mov	 edx, DWORD PTR [ecx+320]
  000f5	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 783  : 		}

  000f8	e9 da 00 00 00	 jmp	 $LN5@P_XYFricti
$LN4@P_XYFricti:

; 784  : 		else
; 785  : 		{
; 786  : 			if ((oldx == mo->x) && (oldy == mo->y)) // didn't go anywhere

  000fd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _oldx$[ebp]
  00103	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00106	75 41		 jne	 SHORT $LN9@P_XYFricti
  00108	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0010b	8b 4d 10	 mov	 ecx, DWORD PTR _oldy$[ebp]
  0010e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00111	75 36		 jne	 SHORT $LN9@P_XYFricti

; 787  : 			{
; 788  : 				mo->momx = FixedMul(mo->momx, ORIG_FRICTION);

  00113	68 00 e8 00 00	 push	 59392			; 0000e800H
  00118	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0011b	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0011e	51		 push	 ecx
  0011f	e8 00 00 00 00	 call	 _FixedMul
  00124	83 c4 08	 add	 esp, 8
  00127	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0012a	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 789  : 				mo->momy = FixedMul(mo->momy, ORIG_FRICTION);

  0012d	68 00 e8 00 00	 push	 59392			; 0000e800H
  00132	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00135	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 _FixedMul
  0013e	83 c4 08	 add	 esp, 8
  00141	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00144	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 790  : 			}

  00147	eb 3e		 jmp	 SHORT $LN10@P_XYFricti
$LN9@P_XYFricti:

; 791  : 			else
; 792  : 			{
; 793  : 				mo->momx = FixedMul(mo->momx, mo->friction);

  00149	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0014c	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00152	51		 push	 ecx
  00153	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00156	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 _FixedMul
  0015f	83 c4 08	 add	 esp, 8
  00162	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00165	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 794  : 				mo->momy = FixedMul(mo->momy, mo->friction);

  00168	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0016b	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00171	51		 push	 ecx
  00172	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00175	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _FixedMul
  0017e	83 c4 08	 add	 esp, 8
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00184	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN10@P_XYFricti:

; 795  : 			}
; 796  : 
; 797  : 			if (mo->momx || mo->momy)

  00187	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0018a	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0018e	75 09		 jne	 SHORT $LN12@P_XYFricti
  00190	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00193	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00197	74 31		 je	 SHORT $LN13@P_XYFricti
$LN12@P_XYFricti:

; 798  : 			{
; 799  : 				INT32 direction = P_GetPlayerControlDirection(player);

  00199	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _P_GetPlayerControlDirection
  001a2	83 c4 04	 add	 esp, 4
  001a5	89 45 f8	 mov	 DWORD PTR _direction$1[ebp], eax

; 800  : 
; 801  : 				if (direction == 2)

  001a8	83 7d f8 02	 cmp	 DWORD PTR _direction$1[ebp], 2
  001ac	75 1c		 jne	 SHORT $LN13@P_XYFricti

; 802  : 				{
; 803  : 					mo->momx >>= 1;

  001ae	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001b1	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  001b4	d1 f9		 sar	 ecx, 1
  001b6	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001b9	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 804  : 					mo->momy >>= 1;

  001bc	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001bf	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  001c2	d1 f9		 sar	 ecx, 1
  001c4	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001c7	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
$LN13@P_XYFricti:

; 805  : 				}
; 806  : 			}
; 807  : 
; 808  : 			mo->friction = ORIG_FRICTION;

  001ca	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001cd	c7 80 b4 00 00
	00 00 e8 00 00	 mov	 DWORD PTR [eax+180], 59392 ; 0000e800H
$LN5@P_XYFricti:

; 809  : 		}
; 810  : 	}

  001d7	eb 14		 jmp	 SHORT $LN3@P_XYFricti
$LN2@P_XYFricti:

; 811  : 	else
; 812  : 		P_SceneryXYFriction(mo, oldx, oldy);

  001d9	8b 45 10	 mov	 eax, DWORD PTR _oldy$[ebp]
  001dc	50		 push	 eax
  001dd	8b 4d 0c	 mov	 ecx, DWORD PTR _oldx$[ebp]
  001e0	51		 push	 ecx
  001e1	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001e4	52		 push	 edx
  001e5	e8 00 00 00 00	 call	 _P_SceneryXYFriction
  001ea	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@P_XYFricti:

; 813  : }

  001ed	5f		 pop	 edi
  001ee	5e		 pop	 esi
  001ef	5b		 pop	 ebx
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c3		 ret	 0
_P_XYFriction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SceneryXYFriction
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_oldx$ = 12						; size = 4
_oldy$ = 16						; size = 4
_P_SceneryXYFriction PROC				; COMDAT

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 733  : 	if (mo->momx > -STOPSPEED/32 && mo->momx < STOPSPEED/32 &&
; 734  : 		mo->momy > -STOPSPEED/32 && mo->momy < STOPSPEED/32)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	81 78 48 00 f8
	ff ff		 cmp	 DWORD PTR [eax+72], -2048 ; fffff800H
  00013	7e 3d		 jle	 SHORT $LN2@P_SceneryX
  00015	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00018	81 78 48 00 08
	00 00		 cmp	 DWORD PTR [eax+72], 2048 ; 00000800H
  0001f	7d 31		 jge	 SHORT $LN2@P_SceneryX
  00021	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00024	81 78 4c 00 f8
	ff ff		 cmp	 DWORD PTR [eax+76], -2048 ; fffff800H
  0002b	7e 25		 jle	 SHORT $LN2@P_SceneryX
  0002d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00030	81 78 4c 00 08
	00 00		 cmp	 DWORD PTR [eax+76], 2048 ; 00000800H
  00037	7d 19		 jge	 SHORT $LN2@P_SceneryX

; 735  : 	{
; 736  : 		mo->momx = 0;

  00039	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0003c	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 737  : 		mo->momy = 0;

  00043	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00046	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 738  : 	}

  0004d	e9 d1 00 00 00	 jmp	 $LN7@P_SceneryX
$LN2@P_SceneryX:

; 739  : 	else
; 740  : 	{
; 741  : 		if ((oldx == mo->x) && (oldy == mo->y)) // didn't go anywhere

  00052	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00055	8b 4d 0c	 mov	 ecx, DWORD PTR _oldx$[ebp]
  00058	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0005b	75 41		 jne	 SHORT $LN4@P_SceneryX
  0005d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00060	8b 4d 10	 mov	 ecx, DWORD PTR _oldy$[ebp]
  00063	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00066	75 36		 jne	 SHORT $LN4@P_SceneryX

; 742  : 		{
; 743  : 			mo->momx = FixedMul(mo->momx,ORIG_FRICTION);

  00068	68 00 e8 00 00	 push	 59392			; 0000e800H
  0006d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00070	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 _FixedMul
  00079	83 c4 08	 add	 esp, 8
  0007c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0007f	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 744  : 			mo->momy = FixedMul(mo->momy,ORIG_FRICTION);

  00082	68 00 e8 00 00	 push	 59392			; 0000e800H
  00087	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0008a	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 _FixedMul
  00093	83 c4 08	 add	 esp, 8
  00096	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00099	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 745  : 		}

  0009c	eb 3e		 jmp	 SHORT $LN5@P_SceneryX
$LN4@P_SceneryX:

; 746  : 		else
; 747  : 		{
; 748  : 			mo->momx = FixedMul(mo->momx,mo->friction);

  0009e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000a1	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000a7	51		 push	 ecx
  000a8	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  000ab	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _FixedMul
  000b4	83 c4 08	 add	 esp, 8
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  000ba	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 749  : 			mo->momy = FixedMul(mo->momy,mo->friction);

  000bd	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000c0	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000c6	51		 push	 ecx
  000c7	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  000ca	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _FixedMul
  000d3	83 c4 08	 add	 esp, 8
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  000d9	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN5@P_SceneryX:

; 750  : 		}
; 751  : 
; 752  : 		if (mo->type == MT_CANNONBALLDECOR)

  000dc	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000df	83 78 7c 72	 cmp	 DWORD PTR [eax+124], 114 ; 00000072H
  000e3	75 31		 jne	 SHORT $LN6@P_SceneryX

; 753  : 		{
; 754  : 			// Stolen from P_SpawnFriction
; 755  : 			mo->friction = FRACUNIT - 0x100;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000e8	c7 80 b4 00 00
	00 00 ff 00 00	 mov	 DWORD PTR [eax+180], 65280 ; 0000ff00H

; 756  : 			mo->movefactor = ((0x10092 - mo->friction)*(0x70))/0x158;

  000f2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000f5	b9 92 00 01 00	 mov	 ecx, 65682		; 00010092H
  000fa	2b 88 b4 00 00
	00		 sub	 ecx, DWORD PTR [eax+180]
  00100	6b c1 70	 imul	 eax, ecx, 112
  00103	99		 cdq
  00104	b9 58 01 00 00	 mov	 ecx, 344		; 00000158H
  00109	f7 f9		 idiv	 ecx
  0010b	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0010e	89 82 b8 00 00
	00		 mov	 DWORD PTR [edx+184], eax

; 757  : 		}

  00114	eb 0d		 jmp	 SHORT $LN7@P_SceneryX
$LN6@P_SceneryX:

; 758  : 		else
; 759  : 			mo->friction = ORIG_FRICTION;

  00116	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00119	c7 80 b4 00 00
	00 00 e8 00 00	 mov	 DWORD PTR [eax+180], 59392 ; 0000e800H
$LN7@P_SceneryX:

; 760  : 	}
; 761  : }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
_P_SceneryXYFriction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_CheckMobjSpeed
_TEXT	SEGMENT
_mo$ = 8						; size = 4
_P_CheckMobjSpeed PROC					; COMDAT

; 552  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 553  : 	if (mo->momx > MAXMOVE)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	81 78 48 00 00
	3c 00		 cmp	 DWORD PTR [eax+72], 3932160 ; 003c0000H
  00013	7e 0c		 jle	 SHORT $LN2@P_CheckMob

; 554  : 		mo->momx = MAXMOVE;

  00015	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00018	c7 40 48 00 00
	3c 00		 mov	 DWORD PTR [eax+72], 3932160 ; 003c0000H
  0001f	eb 16		 jmp	 SHORT $LN4@P_CheckMob
$LN2@P_CheckMob:

; 555  : 	else if (mo->momx < -MAXMOVE)

  00021	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00024	81 78 48 00 00
	c4 ff		 cmp	 DWORD PTR [eax+72], -3932160 ; ffc40000H
  0002b	7d 0a		 jge	 SHORT $LN4@P_CheckMob

; 556  : 		mo->momx = -MAXMOVE;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00030	c7 40 48 00 00
	c4 ff		 mov	 DWORD PTR [eax+72], -3932160 ; ffc40000H
$LN4@P_CheckMob:

; 557  : 
; 558  : 	if (mo->momy > MAXMOVE)

  00037	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0003a	81 78 4c 00 00
	3c 00		 cmp	 DWORD PTR [eax+76], 3932160 ; 003c0000H
  00041	7e 0c		 jle	 SHORT $LN5@P_CheckMob

; 559  : 		mo->momy = MAXMOVE;

  00043	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00046	c7 40 4c 00 00
	3c 00		 mov	 DWORD PTR [eax+76], 3932160 ; 003c0000H
  0004d	eb 16		 jmp	 SHORT $LN7@P_CheckMob
$LN5@P_CheckMob:

; 560  : 	else if (mo->momy < -MAXMOVE)

  0004f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00052	81 78 4c 00 00
	c4 ff		 cmp	 DWORD PTR [eax+76], -3932160 ; ffc40000H
  00059	7d 0a		 jge	 SHORT $LN7@P_CheckMob

; 561  : 		mo->momy = -MAXMOVE;

  0005b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0005e	c7 40 4c 00 00
	c4 ff		 mov	 DWORD PTR [eax+76], -3932160 ; ffc40000H
$LN7@P_CheckMob:

; 562  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_P_CheckMobjSpeed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SetPrecipMobjState
_TEXT	SEGMENT
_st$ = -4						; size = 4
_mobj$ = 8						; size = 4
_state$ = 12						; size = 4
_P_SetPrecipMobjState PROC				; COMDAT

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	state_t *st;
; 301  : 
; 302  : 	if (state == S_NULL)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  0000d	75 10		 jne	 SHORT $LN2@P_SetPreci

; 303  : 	{ // Remove mobj
; 304  : 		P_RemovePrecipMobj(mobj);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _P_RemovePrecipMobj
  00018	83 c4 04	 add	 esp, 4

; 305  : 		return false;

  0001b	33 c0		 xor	 eax, eax
  0001d	eb 3d		 jmp	 SHORT $LN1@P_SetPreci
$LN2@P_SetPreci:

; 306  : 	}
; 307  : 	st = &states[state];

  0001f	6b 45 0c 1c	 imul	 eax, DWORD PTR _state$[ebp], 28
  00023	05 00 00 00 00	 add	 eax, OFFSET _states
  00028	89 45 fc	 mov	 DWORD PTR _st$[ebp], eax

; 308  : 	mobj->state = st;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00031	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 309  : 	mobj->tics = st->tics;

  00034	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  0003a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003d	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 310  : 	mobj->sprite = st->sprite;

  00040	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 311  : 	mobj->frame = st->frame;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 312  : 	return true;

  00057	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_SetPreci:

; 313  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_P_SetPrecipMobjState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_CycleMobjState
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_CycleMobjState PROC					; COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 92   : 	// cycle through states,
; 93   : 	// calling action functions at transitions
; 94   : 	if (mobj->tics != -1)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	83 78 58 ff	 cmp	 DWORD PTR [eax+88], -1
  00010	74 37		 je	 SHORT $LN4@P_CycleMob

; 95   : 	{
; 96   : 		mobj->tics--;

  00012	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00015	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00018	83 e9 01	 sub	 ecx, 1
  0001b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0001e	89 4a 58	 mov	 DWORD PTR [edx+88], ecx

; 97   : 
; 98   : 		// you can cycle through multiple states in a tic
; 99   : 		if (!mobj->tics && mobj->state)

  00021	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00024	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00028	75 1f		 jne	 SHORT $LN4@P_CycleMob
  0002a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002d	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00031	74 16		 je	 SHORT $LN4@P_CycleMob

; 100  : 			if (!P_SetMobjState(mobj, mobj->state->nextstate))

  00033	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00036	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00039	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0003c	52		 push	 edx
  0003d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _P_SetMobjState
  00046	83 c4 08	 add	 esp, 8
$LN4@P_CycleMob:

; 101  : 				return; // freed itself
; 102  : 	}
; 103  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_P_CycleMobjState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_CheckGravity
_TEXT	SEGMENT
tv270 = -80						; size = 4
_rover$1 = -12						; size = 4
_no3dfloorgrav$ = -8					; size = 4
_gravityadd$ = -4					; size = 4
_mo$ = 8						; size = 4
_affect$ = 12						; size = 4
_P_CheckGravity PROC					; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 573  : 	fixed_t gravityadd = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gravityadd$[ebp], 0

; 574  : 	boolean no3dfloorgrav = true; // Custom gravity

  00010	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _no3dfloorgrav$[ebp], 1

; 575  : 
; 576  : 	if (mo->type != MT_SPINFIRE && !(mo->player && mo->player->playerstate == PST_DEAD))

  00017	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0001a	83 78 7c 47	 cmp	 DWORD PTR [eax+124], 71	; 00000047H
  0001e	74 30		 je	 SHORT $LN7@P_CheckGra
  00020	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00023	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0002a	74 0f		 je	 SHORT $LN8@P_CheckGra
  0002c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0002f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00035	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  00039	74 15		 je	 SHORT $LN7@P_CheckGra
$LN8@P_CheckGra:

; 577  : 		mo->eflags &= ~MFE_VERTICALFLIP;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0003e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00044	83 e1 df	 and	 ecx, -33		; ffffffdfH
  00047	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0004a	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN7@P_CheckGra:

; 578  : 
; 579  : 	if (mo->subsector->sector->ffloors) // Check for 3D floor gravity too.

  00050	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00053	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	83 ba 90 00 00
	00 00		 cmp	 DWORD PTR [edx+144], 0
  0005f	0f 84 ee 00 00
	00		 je	 $LN3@P_CheckGra

; 580  : 	{
; 581  : 		ffloor_t *rover;
; 582  : 
; 583  : 		for (rover = mo->subsector->sector->ffloors; rover; rover = rover->next)

  00065	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00068	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0006b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006d	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00073	89 45 f4	 mov	 DWORD PTR _rover$1[ebp], eax
  00076	eb 09		 jmp	 SHORT $LN4@P_CheckGra
$LN2@P_CheckGra:
  00078	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  0007b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0007e	89 4d f4	 mov	 DWORD PTR _rover$1[ebp], ecx
$LN4@P_CheckGra:
  00081	83 7d f4 00	 cmp	 DWORD PTR _rover$1[ebp], 0
  00085	0f 84 c8 00 00
	00		 je	 $LN3@P_CheckGra

; 584  : 		{
; 585  : 			if (!(rover->flags & FF_EXISTS))

  0008b	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  0008e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00091	83 e1 01	 and	 ecx, 1
  00094	75 02		 jne	 SHORT $LN10@P_CheckGra

; 586  : 				continue;

  00096	eb e0		 jmp	 SHORT $LN2@P_CheckGra
$LN10@P_CheckGra:

; 587  : 
; 588  : 			if (P_InsideANonSolidFFloor(mo, rover))

  00098	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 _P_InsideANonSolidFFloor
  000a5	83 c4 08	 add	 esp, 8
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 9e 00 00
	00		 je	 $LN12@P_CheckGra

; 589  : 			{
; 590  : 				if (rover->master->frontsector->gravity)

  000b0	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  000b3	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000b6	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000b9	83 ba d8 00 00
	00 00		 cmp	 DWORD PTR [edx+216], 0
  000c0	0f 84 88 00 00
	00		 je	 $LN12@P_CheckGra

; 591  : 				{
; 592  : 					gravityadd = -FixedMul(gravity,

  000c6	68 e8 03 00 00	 push	 1000			; 000003e8H
  000cb	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  000ce	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000d1	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000d4	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  000da	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dc	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 _FixedDiv
  000e5	83 c4 08	 add	 esp, 8
  000e8	50		 push	 eax
  000e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gravity
  000ef	52		 push	 edx
  000f0	e8 00 00 00 00	 call	 _FixedMul
  000f5	83 c4 08	 add	 esp, 8
  000f8	f7 d8		 neg	 eax
  000fa	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax

; 593  : 						(FixedDiv(*rover->master->frontsector->gravity>>FRACBITS, 1000)));
; 594  : 
; 595  : 					if (rover->master->frontsector->verticalflip && gravityadd > 0)

  000fd	8b 45 f4	 mov	 eax, DWORD PTR _rover$1[ebp]
  00100	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00103	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00106	83 ba dc 00 00
	00 00		 cmp	 DWORD PTR [edx+220], 0
  0010d	74 36		 je	 SHORT $LN14@P_CheckGra
  0010f	83 7d fc 00	 cmp	 DWORD PTR _gravityadd$[ebp], 0
  00113	7e 30		 jle	 SHORT $LN14@P_CheckGra

; 596  : 					{
; 597  : 						if (!(mo->player && mo->player->playerstate == PST_DEAD))

  00115	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00118	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0011f	74 0f		 je	 SHORT $LN15@P_CheckGra
  00121	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00124	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0012a	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  0012e	74 15		 je	 SHORT $LN14@P_CheckGra
$LN15@P_CheckGra:

; 598  : 							mo->eflags |= MFE_VERTICALFLIP;

  00130	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00133	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00139	83 c9 20	 or	 ecx, 32			; 00000020H
  0013c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0013f	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN14@P_CheckGra:

; 599  : 					}
; 600  : 
; 601  : 					no3dfloorgrav = false;

  00145	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _no3dfloorgrav$[ebp], 0

; 602  : 					break;

  0014c	eb 05		 jmp	 SHORT $LN3@P_CheckGra
$LN12@P_CheckGra:

; 603  : 				}
; 604  : 			}
; 605  : 		}

  0014e	e9 25 ff ff ff	 jmp	 $LN2@P_CheckGra
$LN3@P_CheckGra:

; 606  : 	}
; 607  : 
; 608  : 	if (no3dfloorgrav)

  00153	83 7d f8 00	 cmp	 DWORD PTR _no3dfloorgrav$[ebp], 0
  00157	0f 84 9a 00 00
	00		 je	 $LN20@P_CheckGra

; 609  : 	{
; 610  : 		if (mo->subsector->sector->gravity)

  0015d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00160	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00163	8b 11		 mov	 edx, DWORD PTR [ecx]
  00165	83 ba d8 00 00
	00 00		 cmp	 DWORD PTR [edx+216], 0
  0016c	74 38		 je	 SHORT $LN17@P_CheckGra

; 611  : 			gravityadd = -FixedMul(gravity,

  0016e	68 e8 03 00 00	 push	 1000			; 000003e8H
  00173	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00176	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00179	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017b	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  00181	8b 08		 mov	 ecx, DWORD PTR [eax]
  00183	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00186	51		 push	 ecx
  00187	e8 00 00 00 00	 call	 _FixedDiv
  0018c	83 c4 08	 add	 esp, 8
  0018f	50		 push	 eax
  00190	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gravity
  00196	52		 push	 edx
  00197	e8 00 00 00 00	 call	 _FixedMul
  0019c	83 c4 08	 add	 esp, 8
  0019f	f7 d8		 neg	 eax
  001a1	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
  001a4	eb 0a		 jmp	 SHORT $LN18@P_CheckGra
$LN17@P_CheckGra:

; 612  : 				(FixedDiv(*mo->subsector->sector->gravity>>FRACBITS, 1000)));
; 613  : 		else
; 614  : 			gravityadd = -gravity;

  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  001ab	f7 d8		 neg	 eax
  001ad	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
$LN18@P_CheckGra:

; 615  : 
; 616  : 		if (mo->subsector->sector->verticalflip && gravityadd > 0)

  001b0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001b3	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  001b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b8	83 ba dc 00 00
	00 00		 cmp	 DWORD PTR [edx+220], 0
  001bf	74 36		 je	 SHORT $LN20@P_CheckGra
  001c1	83 7d fc 00	 cmp	 DWORD PTR _gravityadd$[ebp], 0
  001c5	7e 30		 jle	 SHORT $LN20@P_CheckGra

; 617  : 		{
; 618  : 			if (!(mo->player && mo->player->playerstate == PST_DEAD))

  001c7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001ca	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  001d1	74 0f		 je	 SHORT $LN21@P_CheckGra
  001d3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001d6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001dc	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  001e0	74 15		 je	 SHORT $LN20@P_CheckGra
$LN21@P_CheckGra:

; 619  : 				mo->eflags |= MFE_VERTICALFLIP;

  001e2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001e5	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  001eb	83 c9 20	 or	 ecx, 32			; 00000020H
  001ee	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  001f1	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN20@P_CheckGra:

; 620  : 		}
; 621  : 	}
; 622  : 
; 623  : 	// Less gravity underwater.
; 624  : 	if (mo->eflags & MFE_UNDERWATER)

  001f7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001fa	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00200	83 e1 08	 and	 ecx, 8
  00203	74 0e		 je	 SHORT $LN22@P_CheckGra

; 625  : 		gravityadd = gravityadd/3;

  00205	8b 45 fc	 mov	 eax, DWORD PTR _gravityadd$[ebp]
  00208	99		 cdq
  00209	b9 03 00 00 00	 mov	 ecx, 3
  0020e	f7 f9		 idiv	 ecx
  00210	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
$LN22@P_CheckGra:

; 626  : 
; 627  : 	if (!mo->momz) // mobj at stop, no floor, so feel the push of gravity!

  00213	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00216	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0021a	75 08		 jne	 SHORT $LN23@P_CheckGra

; 628  : 		gravityadd <<= 1;

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _gravityadd$[ebp]
  0021f	d1 e0		 shl	 eax, 1
  00221	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
$LN23@P_CheckGra:

; 629  : 
; 630  : 	if (mo->player)

  00224	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00227	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0022e	0f 84 8d 01 00
	00		 je	 $LN24@P_CheckGra

; 631  : 	{
; 632  : 		if ((mo->player->charability == CA_FLY) && ((mo->player->powers[pw_tailsfly]) || (mo->player->mo->state == &states[S_PLAY_SPC1]) || (mo->player->mo->state == &states[S_PLAY_SPC2]) || (mo->player->mo->state == &states[S_PLAY_SPC3]) || (mo->player->mo->state == &states[S_PLAY_SPC4])))

  00234	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00237	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0023d	83 b9 d8 00 00
	00 01		 cmp	 DWORD PTR [ecx+216], 1
  00244	0f 85 9e 00 00
	00		 jne	 $LN26@P_CheckGra
  0024a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0024d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00253	ba 04 00 00 00	 mov	 edx, 4
  00258	6b c2 05	 imul	 eax, edx, 5
  0025b	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00260	75 78		 jne	 SHORT $LN27@P_CheckGra
  00262	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00265	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0026b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0026d	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00272	6b c8 17	 imul	 ecx, eax, 23
  00275	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0027b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0027e	74 5a		 je	 SHORT $LN27@P_CheckGra
  00280	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00283	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00289	8b 11		 mov	 edx, DWORD PTR [ecx]
  0028b	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00290	6b c8 18	 imul	 ecx, eax, 24
  00293	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00299	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0029c	74 3c		 je	 SHORT $LN27@P_CheckGra
  0029e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002a1	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a9	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  002ae	6b c8 19	 imul	 ecx, eax, 25
  002b1	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  002b7	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  002ba	74 1e		 je	 SHORT $LN27@P_CheckGra
  002bc	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002bf	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c7	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  002cc	6b c8 1a	 imul	 ecx, eax, 26
  002cf	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  002d5	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  002d8	75 0e		 jne	 SHORT $LN26@P_CheckGra
$LN27@P_CheckGra:

; 633  : 			gravityadd = gravityadd/3; // less gravity while flying

  002da	8b 45 fc	 mov	 eax, DWORD PTR _gravityadd$[ebp]
  002dd	99		 cdq
  002de	b9 03 00 00 00	 mov	 ecx, 3
  002e3	f7 f9		 idiv	 ecx
  002e5	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
$LN26@P_CheckGra:

; 634  : 		if ((mo->player->pflags & PF_GLIDING) && mo->player->playerstate != PST_DEAD)

  002e8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002eb	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002f1	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  002f7	81 e2 00 00 01
	00		 and	 edx, 65536		; 00010000H
  002fd	74 1d		 je	 SHORT $LN28@P_CheckGra
  002ff	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00302	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00308	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  0030c	74 0e		 je	 SHORT $LN28@P_CheckGra

; 635  : 			gravityadd = gravityadd/3; // less gravity while gliding

  0030e	8b 45 fc	 mov	 eax, DWORD PTR _gravityadd$[ebp]
  00311	99		 cdq
  00312	b9 03 00 00 00	 mov	 ecx, 3
  00317	f7 f9		 idiv	 ecx
  00319	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
$LN28@P_CheckGra:

; 636  : 		if (mo->player->climbing)

  0031c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0031f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00325	83 b9 24 01 00
	00 00		 cmp	 DWORD PTR [ecx+292], 0
  0032c	74 07		 je	 SHORT $LN29@P_CheckGra

; 637  : 			gravityadd = 0;

  0032e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gravityadd$[ebp], 0
$LN29@P_CheckGra:

; 638  : 		if (mo->player->pflags & PF_NIGHTSMODE)

  00335	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00338	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0033e	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00344	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  0034a	74 07		 je	 SHORT $LN30@P_CheckGra

; 639  : 			gravityadd = 0;

  0034c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gravityadd$[ebp], 0
$LN30@P_CheckGra:

; 640  : 
; 641  : 		if (mo->player->powers[pw_gravityboots] && mo->player->playerstate != PST_DEAD) //Don't spaz out if we're dead!

  00353	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00356	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0035c	ba 04 00 00 00	 mov	 edx, 4
  00361	c1 e2 04	 shl	 edx, 4
  00364	83 7c 11 38 00	 cmp	 DWORD PTR [ecx+edx+56], 0
  00369	74 51		 je	 SHORT $LN33@P_CheckGra
  0036b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0036e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00374	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  00378	74 42		 je	 SHORT $LN33@P_CheckGra

; 642  : 		{
; 643  : 			gravityadd = -gravityadd;

  0037a	8b 45 fc	 mov	 eax, DWORD PTR _gravityadd$[ebp]
  0037d	f7 d8		 neg	 eax
  0037f	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax

; 644  : 			if (mo->eflags & MFE_VERTICALFLIP)

  00382	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00385	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0038b	83 e1 20	 and	 ecx, 32			; 00000020H
  0038e	74 17		 je	 SHORT $LN32@P_CheckGra

; 645  : 				mo->eflags &= ~MFE_VERTICALFLIP;

  00390	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00393	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00399	83 e1 df	 and	 ecx, -33		; ffffffdfH
  0039c	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0039f	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
  003a5	eb 15		 jmp	 SHORT $LN33@P_CheckGra
$LN32@P_CheckGra:

; 646  : 			else
; 647  : 				mo->eflags |= MFE_VERTICALFLIP;

  003a7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003aa	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  003b0	83 c9 20	 or	 ecx, 32			; 00000020H
  003b3	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  003b6	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN33@P_CheckGra:

; 648  : 		}
; 649  : 	}

  003bc	e9 f6 00 00 00	 jmp	 $LN5@P_CheckGra
$LN24@P_CheckGra:

; 650  : 	else
; 651  : 	{
; 652  : 		// Objects with permanent reverse gravity (MF2_OBJECTFLIP)
; 653  : 		if (mo->flags2 & MF2_OBJECTFLIP)

  003c1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003c4	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  003ca	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  003d0	74 3c		 je	 SHORT $LN34@P_CheckGra

; 654  : 		{
; 655  : 			mo->eflags |= MFE_VERTICALFLIP;

  003d2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003d5	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  003db	83 c9 20	 or	 ecx, 32			; 00000020H
  003de	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  003e1	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 656  : 			gravityadd *= -1;

  003e7	6b 45 fc ff	 imul	 eax, DWORD PTR _gravityadd$[ebp], -1
  003eb	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax

; 657  : 			if (mo->z + mo->height >= mo->ceilingz)

  003ee	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003f1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003f4	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  003f7	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  003fa	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003fd	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00400	7c 07		 jl	 SHORT $LN36@P_CheckGra

; 658  : 				gravityadd = 0;

  00402	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gravityadd$[ebp], 0
$LN36@P_CheckGra:

; 659  : 		}

  00409	e9 a9 00 00 00	 jmp	 $LN5@P_CheckGra
$LN34@P_CheckGra:

; 660  : 		else //Otherwise, sort through the other exceptions.
; 661  : 		{
; 662  : 			switch (mo->type)

  0040e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00411	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00414	89 4d b0	 mov	 DWORD PTR tv270[ebp], ecx
  00417	8b 55 b0	 mov	 edx, DWORD PTR tv270[ebp]
  0041a	83 ea 2c	 sub	 edx, 44			; 0000002cH
  0041d	89 55 b0	 mov	 DWORD PTR tv270[ebp], edx
  00420	81 7d b0 b6 00
	00 00		 cmp	 DWORD PTR tv270[ebp], 182 ; 000000b6H
  00427	0f 87 8a 00 00
	00		 ja	 $LN59@P_CheckGra
  0042d	8b 45 b0	 mov	 eax, DWORD PTR tv270[ebp]
  00430	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN66@P_CheckGra[eax]
  00437	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN67@P_CheckGra[ecx*4]
$LN37@P_CheckGra:

; 663  : 			{
; 664  : 				case MT_FLINGRING:
; 665  : 				case MT_FLINGCOIN:
; 666  : #ifdef BLUE_SPHERES
; 667  : 				case MT_FLINGBALL:
; 668  : #endif
; 669  : 				case MT_FLINGEMERALD:
; 670  : 				case MT_BOUNCERING:
; 671  : 				case MT_RAILRING:
; 672  : 				case MT_AUTOMATICRING:
; 673  : 				case MT_EXPLOSIONRING:
; 674  : 				case MT_SCATTERRING:
; 675  : 				case MT_GRENADERING:
; 676  : 				case MT_BOUNCEPICKUP:
; 677  : 				case MT_RAILPICKUP:
; 678  : 				case MT_AUTOPICKUP:
; 679  : 				case MT_EXPLODEPICKUP:
; 680  : 				case MT_SCATTERPICKUP:
; 681  : 				case MT_GRENADEPICKUP:
; 682  : 				case MT_REDFLAG:
; 683  : 				case MT_BLUEFLAG:
; 684  : 					if (mo->target)

  0043e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00441	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00448	74 3f		 je	 SHORT $LN55@P_CheckGra

; 685  : 					{
; 686  : 						// Flung items copy the gravity of their tosser.
; 687  : 						if ((mo->target->eflags & MFE_VERTICALFLIP) && !(mo->eflags & MFE_VERTICALFLIP))

  0044a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0044d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00453	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00459	83 e2 20	 and	 edx, 32			; 00000020H
  0045c	74 2b		 je	 SHORT $LN55@P_CheckGra
  0045e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00461	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00467	83 e1 20	 and	 ecx, 32			; 00000020H
  0046a	75 1d		 jne	 SHORT $LN55@P_CheckGra

; 688  : 						{
; 689  : 							gravityadd = -gravityadd;

  0046c	8b 45 fc	 mov	 eax, DWORD PTR _gravityadd$[ebp]
  0046f	f7 d8		 neg	 eax
  00471	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax

; 690  : 							mo->eflags |= MFE_VERTICALFLIP;

  00474	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00477	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0047d	83 c9 20	 or	 ecx, 32			; 00000020H
  00480	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00483	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN55@P_CheckGra:

; 691  : 						}
; 692  : 					}
; 693  : 					break;

  00489	eb 2c		 jmp	 SHORT $LN5@P_CheckGra
$LN56@P_CheckGra:

; 694  : 				case MT_CEILINGSPIKE:
; 695  : 					gravityadd *= -1; // Reverse gravity for ceiling spikes

  0048b	6b 45 fc ff	 imul	 eax, DWORD PTR _gravityadd$[ebp], -1
  0048f	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax

; 696  : 					if (mo->z + mo->height >= mo->ceilingz)

  00492	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00495	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00498	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0049b	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0049e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004a1	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  004a4	7c 07		 jl	 SHORT $LN57@P_CheckGra

; 697  : 						gravityadd = 0;

  004a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gravityadd$[ebp], 0
$LN57@P_CheckGra:

; 698  : 					break;

  004ad	eb 08		 jmp	 SHORT $LN5@P_CheckGra
$LN58@P_CheckGra:

; 699  : 				case MT_WATERDROP:
; 700  : 					gravityadd >>= 1;

  004af	8b 45 fc	 mov	 eax, DWORD PTR _gravityadd$[ebp]
  004b2	d1 f8		 sar	 eax, 1
  004b4	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
$LN59@P_CheckGra:
$LN5@P_CheckGra:

; 701  : 				default:
; 702  : 					break;
; 703  : 			}
; 704  : 		}
; 705  : 	}
; 706  : 
; 707  : 	if (mo->player && mo->player->playerstate == PST_DEAD)

  004b7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004ba	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  004c1	74 31		 je	 SHORT $LN62@P_CheckGra
  004c3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004c6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004cc	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  004d0	75 22		 jne	 SHORT $LN62@P_CheckGra

; 708  : 	{
; 709  : 		if (mo->eflags & MFE_VERTICALFLIP)

  004d2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004d5	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  004db	83 e1 20	 and	 ecx, 32			; 00000020H
  004de	74 0a		 je	 SHORT $LN61@P_CheckGra

; 710  : 			gravityadd = gravity;

  004e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  004e5	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
  004e8	eb 0a		 jmp	 SHORT $LN62@P_CheckGra
$LN61@P_CheckGra:

; 711  : 		else
; 712  : 			gravityadd = -gravity;

  004ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravity
  004ef	f7 d8		 neg	 eax
  004f1	89 45 fc	 mov	 DWORD PTR _gravityadd$[ebp], eax
$LN62@P_CheckGra:

; 713  : 	}
; 714  : 
; 715  : 	if (affect)

  004f4	83 7d 0c 00	 cmp	 DWORD PTR _affect$[ebp], 0
  004f8	74 34		 je	 SHORT $LN63@P_CheckGra

; 716  : 		mo->momz += FIXEDSCALE(gravityadd, mo->scale)/NEWTICRATERATIO;

  004fa	8b 45 fc	 mov	 eax, DWORD PTR _gravityadd$[ebp]
  004fd	50		 push	 eax
  004fe	68 00 00 64 00	 push	 6553600			; 00640000H
  00503	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00506	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0050d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00510	52		 push	 edx
  00511	e8 00 00 00 00	 call	 _FixedDiv
  00516	83 c4 08	 add	 esp, 8
  00519	50		 push	 eax
  0051a	e8 00 00 00 00	 call	 _FixedMul
  0051f	83 c4 08	 add	 esp, 8
  00522	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00525	03 41 50	 add	 eax, DWORD PTR [ecx+80]
  00528	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0052b	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN63@P_CheckGra:

; 717  : 
; 718  : 	if (mo->type == MT_SKIM && mo->z + mo->momz <= mo->watertop && mo->z >= mo->watertop)

  0052e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00531	83 78 7c 0a	 cmp	 DWORD PTR [eax+124], 10	; 0000000aH
  00535	75 44		 jne	 SHORT $LN64@P_CheckGra
  00537	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0053a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0053d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00540	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  00543	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00546	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  0054c	7f 2d		 jg	 SHORT $LN64@P_CheckGra
  0054e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00551	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00554	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00557	3b 91 c0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+192]
  0055d	7c 1c		 jl	 SHORT $LN64@P_CheckGra

; 719  : 	{
; 720  : 		mo->momz = 0;

  0055f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00562	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 721  : 		mo->flags |= MF_NOGRAVITY;

  00569	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0056c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0056f	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00575	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00578	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN64@P_CheckGra:

; 722  : 	}
; 723  : }

  0057b	5f		 pop	 edi
  0057c	5e		 pop	 esi
  0057d	5b		 pop	 ebx
  0057e	8b e5		 mov	 esp, ebp
  00580	5d		 pop	 ebp
  00581	c3		 ret	 0
  00582	66 90		 npad	 2
$LN67@P_CheckGra:
  00584	00 00 00 00	 DD	 $LN37@P_CheckGra
  00588	00 00 00 00	 DD	 $LN56@P_CheckGra
  0058c	00 00 00 00	 DD	 $LN58@P_CheckGra
  00590	00 00 00 00	 DD	 $LN59@P_CheckGra
$LN66@P_CheckGra:
  00594	00		 DB	 0
  00595	03		 DB	 3
  00596	03		 DB	 3
  00597	03		 DB	 3
  00598	03		 DB	 3
  00599	03		 DB	 3
  0059a	03		 DB	 3
  0059b	03		 DB	 3
  0059c	00		 DB	 0
  0059d	00		 DB	 0
  0059e	03		 DB	 3
  0059f	03		 DB	 3
  005a0	03		 DB	 3
  005a1	03		 DB	 3
  005a2	03		 DB	 3
  005a3	03		 DB	 3
  005a4	03		 DB	 3
  005a5	03		 DB	 3
  005a6	03		 DB	 3
  005a7	03		 DB	 3
  005a8	00		 DB	 0
  005a9	03		 DB	 3
  005aa	03		 DB	 3
  005ab	03		 DB	 3
  005ac	03		 DB	 3
  005ad	03		 DB	 3
  005ae	03		 DB	 3
  005af	03		 DB	 3
  005b0	01		 DB	 1
  005b1	03		 DB	 3
  005b2	03		 DB	 3
  005b3	03		 DB	 3
  005b4	03		 DB	 3
  005b5	03		 DB	 3
  005b6	03		 DB	 3
  005b7	03		 DB	 3
  005b8	03		 DB	 3
  005b9	03		 DB	 3
  005ba	03		 DB	 3
  005bb	03		 DB	 3
  005bc	03		 DB	 3
  005bd	03		 DB	 3
  005be	03		 DB	 3
  005bf	03		 DB	 3
  005c0	03		 DB	 3
  005c1	03		 DB	 3
  005c2	03		 DB	 3
  005c3	03		 DB	 3
  005c4	03		 DB	 3
  005c5	03		 DB	 3
  005c6	03		 DB	 3
  005c7	03		 DB	 3
  005c8	03		 DB	 3
  005c9	03		 DB	 3
  005ca	03		 DB	 3
  005cb	03		 DB	 3
  005cc	03		 DB	 3
  005cd	03		 DB	 3
  005ce	03		 DB	 3
  005cf	03		 DB	 3
  005d0	03		 DB	 3
  005d1	03		 DB	 3
  005d2	03		 DB	 3
  005d3	03		 DB	 3
  005d4	03		 DB	 3
  005d5	03		 DB	 3
  005d6	03		 DB	 3
  005d7	03		 DB	 3
  005d8	03		 DB	 3
  005d9	03		 DB	 3
  005da	03		 DB	 3
  005db	03		 DB	 3
  005dc	03		 DB	 3
  005dd	03		 DB	 3
  005de	03		 DB	 3
  005df	03		 DB	 3
  005e0	03		 DB	 3
  005e1	03		 DB	 3
  005e2	03		 DB	 3
  005e3	03		 DB	 3
  005e4	03		 DB	 3
  005e5	03		 DB	 3
  005e6	02		 DB	 2
  005e7	03		 DB	 3
  005e8	03		 DB	 3
  005e9	03		 DB	 3
  005ea	03		 DB	 3
  005eb	03		 DB	 3
  005ec	03		 DB	 3
  005ed	03		 DB	 3
  005ee	03		 DB	 3
  005ef	03		 DB	 3
  005f0	03		 DB	 3
  005f1	03		 DB	 3
  005f2	03		 DB	 3
  005f3	03		 DB	 3
  005f4	03		 DB	 3
  005f5	03		 DB	 3
  005f6	03		 DB	 3
  005f7	03		 DB	 3
  005f8	03		 DB	 3
  005f9	03		 DB	 3
  005fa	03		 DB	 3
  005fb	03		 DB	 3
  005fc	03		 DB	 3
  005fd	03		 DB	 3
  005fe	03		 DB	 3
  005ff	03		 DB	 3
  00600	03		 DB	 3
  00601	03		 DB	 3
  00602	03		 DB	 3
  00603	03		 DB	 3
  00604	03		 DB	 3
  00605	03		 DB	 3
  00606	03		 DB	 3
  00607	03		 DB	 3
  00608	03		 DB	 3
  00609	03		 DB	 3
  0060a	03		 DB	 3
  0060b	03		 DB	 3
  0060c	03		 DB	 3
  0060d	03		 DB	 3
  0060e	03		 DB	 3
  0060f	03		 DB	 3
  00610	03		 DB	 3
  00611	03		 DB	 3
  00612	03		 DB	 3
  00613	03		 DB	 3
  00614	03		 DB	 3
  00615	03		 DB	 3
  00616	03		 DB	 3
  00617	03		 DB	 3
  00618	03		 DB	 3
  00619	03		 DB	 3
  0061a	03		 DB	 3
  0061b	03		 DB	 3
  0061c	03		 DB	 3
  0061d	03		 DB	 3
  0061e	03		 DB	 3
  0061f	03		 DB	 3
  00620	03		 DB	 3
  00621	03		 DB	 3
  00622	03		 DB	 3
  00623	03		 DB	 3
  00624	03		 DB	 3
  00625	03		 DB	 3
  00626	03		 DB	 3
  00627	03		 DB	 3
  00628	03		 DB	 3
  00629	03		 DB	 3
  0062a	03		 DB	 3
  0062b	03		 DB	 3
  0062c	03		 DB	 3
  0062d	03		 DB	 3
  0062e	03		 DB	 3
  0062f	03		 DB	 3
  00630	03		 DB	 3
  00631	03		 DB	 3
  00632	03		 DB	 3
  00633	03		 DB	 3
  00634	03		 DB	 3
  00635	03		 DB	 3
  00636	03		 DB	 3
  00637	03		 DB	 3
  00638	00		 DB	 0
  00639	00		 DB	 0
  0063a	00		 DB	 0
  0063b	00		 DB	 0
  0063c	00		 DB	 0
  0063d	00		 DB	 0
  0063e	00		 DB	 0
  0063f	00		 DB	 0
  00640	00		 DB	 0
  00641	00		 DB	 0
  00642	00		 DB	 0
  00643	00		 DB	 0
  00644	03		 DB	 3
  00645	03		 DB	 3
  00646	03		 DB	 3
  00647	03		 DB	 3
  00648	03		 DB	 3
  00649	03		 DB	 3
  0064a	00		 DB	 0
_P_CheckGravity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_ExplodeMissile
_TEXT	SEGMENT
_explodemo$ = -4					; size = 4
_mo$ = 8						; size = 4
_P_ExplodeMissile PROC					; COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 494  : 	mobj_t *explodemo;
; 495  : 	mo->momx = mo->momy = mo->momz = 0;

  00009	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0000c	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00016	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  0001d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00020	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 496  : 
; 497  : 	if (mo->flags & MF_NOCLIPTHING)

  00027	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0002a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0002d	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  00033	74 05		 je	 SHORT $LN2@P_ExplodeM

; 498  : 		return;

  00035	e9 b1 02 00 00	 jmp	 $LN4@P_ExplodeM
$LN2@P_ExplodeM:

; 499  : 
; 500  : 	P_SetMobjState(mo, mobjinfo[mo->type].deathstate);

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0003d	6b 48 7c 60	 imul	 ecx, DWORD PTR [eax+124], 96
  00041	8b 91 30 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+48]
  00047	52		 push	 edx
  00048	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _P_SetMobjState
  00051	83 c4 08	 add	 esp, 8

; 501  : 
; 502  : 	if (mo->type == MT_DETON)

  00054	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00057	83 78 7c 09	 cmp	 DWORD PTR [eax+124], 9
  0005b	0f 85 30 02 00
	00		 jne	 $LN3@P_ExplodeM

; 503  : 	{
; 504  : 		explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_EXPLODE);

  00061	68 0e 01 00 00	 push	 270			; 0000010eH
  00066	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00069	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0006c	51		 push	 ecx
  0006d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00070	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00077	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 _P_SpawnMobj
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	89 45 fc	 mov	 DWORD PTR _explodemo$[ebp], eax

; 505  : 		explodemo->momx += (P_Random() % 32) * FRACUNIT/8;

  00086	e8 00 00 00 00	 call	 _P_Random
  0008b	0f b6 c0	 movzx	 eax, al
  0008e	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  00093	79 05		 jns	 SHORT $LN6@P_ExplodeM
  00095	48		 dec	 eax
  00096	83 c8 e0	 or	 eax, -32		; ffffffe0H
  00099	40		 inc	 eax
$LN6@P_ExplodeM:
  0009a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0009d	99		 cdq
  0009e	83 e2 07	 and	 edx, 7
  000a1	03 c2		 add	 eax, edx
  000a3	c1 f8 03	 sar	 eax, 3
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _explodemo$[ebp]
  000a9	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  000ac	8b 55 fc	 mov	 edx, DWORD PTR _explodemo$[ebp]
  000af	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 506  : 		explodemo->momy += (P_Random() % 32) * FRACUNIT/8;

  000b2	e8 00 00 00 00	 call	 _P_Random
  000b7	0f b6 c0	 movzx	 eax, al
  000ba	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  000bf	79 05		 jns	 SHORT $LN7@P_ExplodeM
  000c1	48		 dec	 eax
  000c2	83 c8 e0	 or	 eax, -32		; ffffffe0H
  000c5	40		 inc	 eax
$LN7@P_ExplodeM:
  000c6	c1 e0 10	 shl	 eax, 16			; 00000010H
  000c9	99		 cdq
  000ca	83 e2 07	 and	 edx, 7
  000cd	03 c2		 add	 eax, edx
  000cf	c1 f8 03	 sar	 eax, 3
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _explodemo$[ebp]
  000d5	03 41 4c	 add	 eax, DWORD PTR [ecx+76]
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _explodemo$[ebp]
  000db	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 507  : 		S_StartSound(explodemo, sfx_pop);

  000de	6a 77		 push	 119			; 00000077H
  000e0	8b 45 fc	 mov	 eax, DWORD PTR _explodemo$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _S_StartSound
  000e9	83 c4 08	 add	 esp, 8

; 508  : 		explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_EXPLODE);

  000ec	68 0e 01 00 00	 push	 270			; 0000010eH
  000f1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000f4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000f7	51		 push	 ecx
  000f8	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  000fb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000fe	50		 push	 eax
  000ff	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00102	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _P_SpawnMobj
  0010b	83 c4 10	 add	 esp, 16			; 00000010H
  0010e	89 45 fc	 mov	 DWORD PTR _explodemo$[ebp], eax

; 509  : 		explodemo->momx += (P_Random() % 64) * FRACUNIT/8;

  00111	e8 00 00 00 00	 call	 _P_Random
  00116	0f b6 c0	 movzx	 eax, al
  00119	25 3f 00 00 80	 and	 eax, -2147483585	; 8000003fH
  0011e	79 05		 jns	 SHORT $LN8@P_ExplodeM
  00120	48		 dec	 eax
  00121	83 c8 c0	 or	 eax, -64		; ffffffc0H
  00124	40		 inc	 eax
$LN8@P_ExplodeM:
  00125	c1 e0 10	 shl	 eax, 16			; 00000010H
  00128	99		 cdq
  00129	83 e2 07	 and	 edx, 7
  0012c	03 c2		 add	 eax, edx
  0012e	c1 f8 03	 sar	 eax, 3
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _explodemo$[ebp]
  00134	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  00137	8b 55 fc	 mov	 edx, DWORD PTR _explodemo$[ebp]
  0013a	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 510  : 		explodemo->momy -= (P_Random() % 64) * FRACUNIT/8;

  0013d	e8 00 00 00 00	 call	 _P_Random
  00142	0f b6 c0	 movzx	 eax, al
  00145	25 3f 00 00 80	 and	 eax, -2147483585	; 8000003fH
  0014a	79 05		 jns	 SHORT $LN9@P_ExplodeM
  0014c	48		 dec	 eax
  0014d	83 c8 c0	 or	 eax, -64		; ffffffc0H
  00150	40		 inc	 eax
$LN9@P_ExplodeM:
  00151	c1 e0 10	 shl	 eax, 16			; 00000010H
  00154	99		 cdq
  00155	83 e2 07	 and	 edx, 7
  00158	03 c2		 add	 eax, edx
  0015a	c1 f8 03	 sar	 eax, 3
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _explodemo$[ebp]
  00160	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00163	2b d0		 sub	 edx, eax
  00165	8b 45 fc	 mov	 eax, DWORD PTR _explodemo$[ebp]
  00168	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 511  : 		S_StartSound(explodemo, sfx_dmpain);

  0016b	6a 2e		 push	 46			; 0000002eH
  0016d	8b 45 fc	 mov	 eax, DWORD PTR _explodemo$[ebp]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _S_StartSound
  00176	83 c4 08	 add	 esp, 8

; 512  : 		explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_EXPLODE);

  00179	68 0e 01 00 00	 push	 270			; 0000010eH
  0017e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00181	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00184	51		 push	 ecx
  00185	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00188	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0018b	50		 push	 eax
  0018c	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0018f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00192	52		 push	 edx
  00193	e8 00 00 00 00	 call	 _P_SpawnMobj
  00198	83 c4 10	 add	 esp, 16			; 00000010H
  0019b	89 45 fc	 mov	 DWORD PTR _explodemo$[ebp], eax

; 513  : 		explodemo->momx -= (P_Random() % 128) * FRACUNIT/8;

  0019e	e8 00 00 00 00	 call	 _P_Random
  001a3	0f b6 c0	 movzx	 eax, al
  001a6	25 7f 00 00 80	 and	 eax, -2147483521	; 8000007fH
  001ab	79 05		 jns	 SHORT $LN10@P_ExplodeM
  001ad	48		 dec	 eax
  001ae	83 c8 80	 or	 eax, -128		; ffffff80H
  001b1	40		 inc	 eax
$LN10@P_ExplodeM:
  001b2	c1 e0 10	 shl	 eax, 16			; 00000010H
  001b5	99		 cdq
  001b6	83 e2 07	 and	 edx, 7
  001b9	03 c2		 add	 eax, edx
  001bb	c1 f8 03	 sar	 eax, 3
  001be	8b 4d fc	 mov	 ecx, DWORD PTR _explodemo$[ebp]
  001c1	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  001c4	2b d0		 sub	 edx, eax
  001c6	8b 45 fc	 mov	 eax, DWORD PTR _explodemo$[ebp]
  001c9	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 514  : 		explodemo->momy += (P_Random() % 128) * FRACUNIT/8;

  001cc	e8 00 00 00 00	 call	 _P_Random
  001d1	0f b6 c0	 movzx	 eax, al
  001d4	25 7f 00 00 80	 and	 eax, -2147483521	; 8000007fH
  001d9	79 05		 jns	 SHORT $LN11@P_ExplodeM
  001db	48		 dec	 eax
  001dc	83 c8 80	 or	 eax, -128		; ffffff80H
  001df	40		 inc	 eax
$LN11@P_ExplodeM:
  001e0	c1 e0 10	 shl	 eax, 16			; 00000010H
  001e3	99		 cdq
  001e4	83 e2 07	 and	 edx, 7
  001e7	03 c2		 add	 eax, edx
  001e9	c1 f8 03	 sar	 eax, 3
  001ec	8b 4d fc	 mov	 ecx, DWORD PTR _explodemo$[ebp]
  001ef	03 41 4c	 add	 eax, DWORD PTR [ecx+76]
  001f2	8b 55 fc	 mov	 edx, DWORD PTR _explodemo$[ebp]
  001f5	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 515  : 		S_StartSound(explodemo, sfx_pop);

  001f8	6a 77		 push	 119			; 00000077H
  001fa	8b 45 fc	 mov	 eax, DWORD PTR _explodemo$[ebp]
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 _S_StartSound
  00203	83 c4 08	 add	 esp, 8

; 516  : 		explodemo = P_SpawnMobj(mo->x, mo->y, mo->z, MT_EXPLODE);

  00206	68 0e 01 00 00	 push	 270			; 0000010eH
  0020b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0020e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00211	51		 push	 ecx
  00212	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00215	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00218	50		 push	 eax
  00219	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0021c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0021f	52		 push	 edx
  00220	e8 00 00 00 00	 call	 _P_SpawnMobj
  00225	83 c4 10	 add	 esp, 16			; 00000010H
  00228	89 45 fc	 mov	 DWORD PTR _explodemo$[ebp], eax

; 517  : 		explodemo->momx -= (P_Random() % 96) * FRACUNIT/8;

  0022b	e8 00 00 00 00	 call	 _P_Random
  00230	0f b6 c0	 movzx	 eax, al
  00233	99		 cdq
  00234	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00239	f7 f9		 idiv	 ecx
  0023b	c1 e2 10	 shl	 edx, 16			; 00000010H
  0023e	8b c2		 mov	 eax, edx
  00240	99		 cdq
  00241	83 e2 07	 and	 edx, 7
  00244	03 c2		 add	 eax, edx
  00246	c1 f8 03	 sar	 eax, 3
  00249	8b 55 fc	 mov	 edx, DWORD PTR _explodemo$[ebp]
  0024c	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  0024f	2b c8		 sub	 ecx, eax
  00251	8b 55 fc	 mov	 edx, DWORD PTR _explodemo$[ebp]
  00254	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 518  : 		explodemo->momy -= (P_Random() % 96) * FRACUNIT/8;

  00257	e8 00 00 00 00	 call	 _P_Random
  0025c	0f b6 c0	 movzx	 eax, al
  0025f	99		 cdq
  00260	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00265	f7 f9		 idiv	 ecx
  00267	c1 e2 10	 shl	 edx, 16			; 00000010H
  0026a	8b c2		 mov	 eax, edx
  0026c	99		 cdq
  0026d	83 e2 07	 and	 edx, 7
  00270	03 c2		 add	 eax, edx
  00272	c1 f8 03	 sar	 eax, 3
  00275	8b 55 fc	 mov	 edx, DWORD PTR _explodemo$[ebp]
  00278	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  0027b	2b c8		 sub	 ecx, eax
  0027d	8b 55 fc	 mov	 edx, DWORD PTR _explodemo$[ebp]
  00280	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 519  : 		S_StartSound(explodemo, sfx_cybdth);

  00283	6a 2c		 push	 44			; 0000002cH
  00285	8b 45 fc	 mov	 eax, DWORD PTR _explodemo$[ebp]
  00288	50		 push	 eax
  00289	e8 00 00 00 00	 call	 _S_StartSound
  0028e	83 c4 08	 add	 esp, 8
$LN3@P_ExplodeM:

; 520  : 	}
; 521  : 
; 522  : 	mo->flags &= ~MF_MISSILE;

  00291	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00294	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00297	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  0029d	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002a0	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 523  : 
; 524  : 	mo->flags |= MF_NOCLIPTHING; // Dummy flag to indicate that this was already called.

  002a3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002a6	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002a9	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  002af	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  002b2	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 525  : 
; 526  : 	if (mo->info->deathsound && !(mo->flags2 & MF2_DEBRIS))

  002b5	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002b8	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002be	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  002c2	74 27		 je	 SHORT $LN4@P_ExplodeM
  002c4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002c7	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  002cd	83 e1 40	 and	 ecx, 64			; 00000040H
  002d0	75 19		 jne	 SHORT $LN4@P_ExplodeM

; 527  : 		S_StartSound(mo, mo->info->deathsound);

  002d2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002d5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002db	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  002de	52		 push	 edx
  002df	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002e2	50		 push	 eax
  002e3	e8 00 00 00 00	 call	 _S_StartSound
  002e8	83 c4 08	 add	 esp, 8
$LN4@P_ExplodeM:

; 528  : }

  002eb	5f		 pop	 edi
  002ec	5e		 pop	 esi
  002ed	5b		 pop	 ebx
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c3		 ret	 0
_P_ExplodeMissile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_CheckMissileSpawn
_TEXT	SEGMENT
_th$ = 8						; size = 4
_P_CheckMissileSpawn PROC				; COMDAT

; 8567 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8568 : 	// move a little forward so an angle can be computed if it immediately explodes
; 8569 : 	// don't do this for grenades, or they'll spawn on the other side of a linedef.
; 8570 : 	if (!(th->flags2 & MF2_GRENADE))

  00009	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0000c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00012	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00018	75 3c		 jne	 SHORT $LN2@P_CheckMis

; 8571 : 	{
; 8572 : 		th->x += th->momx>>1;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0001d	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00020	d1 f9		 sar	 ecx, 1
  00022	8b 55 08	 mov	 edx, DWORD PTR _th$[ebp]
  00025	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00028	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0002b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 8573 : 		th->y += th->momy>>1;

  0002e	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  00031	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00034	d1 f9		 sar	 ecx, 1
  00036	8b 55 08	 mov	 edx, DWORD PTR _th$[ebp]
  00039	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0003f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 8574 : 		th->z += th->momz>>1;

  00042	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  00045	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00048	d1 f9		 sar	 ecx, 1
  0004a	8b 55 08	 mov	 edx, DWORD PTR _th$[ebp]
  0004d	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  00050	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  00053	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN2@P_CheckMis:

; 8575 : 	}
; 8576 : 
; 8577 : 	if (!P_TryMove(th, th->x, th->y, true))

  00056	6a 01		 push	 1
  00058	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  0005b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005e	51		 push	 ecx
  0005f	8b 55 08	 mov	 edx, DWORD PTR _th$[ebp]
  00062	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00065	50		 push	 eax
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _th$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 _P_TryMove
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	85 c0		 test	 eax, eax
  00074	75 10		 jne	 SHORT $LN3@P_CheckMis

; 8578 : 	{
; 8579 : 		P_ExplodeMissile(th);

  00076	8b 45 08	 mov	 eax, DWORD PTR _th$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _P_ExplodeMissile
  0007f	83 c4 04	 add	 esp, 4

; 8580 : 		return false;

  00082	33 c0		 xor	 eax, eax
  00084	eb 05		 jmp	 SHORT $LN1@P_CheckMis
$LN3@P_CheckMis:

; 8581 : 	}
; 8582 : 	return true;

  00086	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_CheckMis:

; 8583 : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_P_CheckMissileSpawn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SetMobjStateNF
_TEXT	SEGMENT
_st$ = -4						; size = 4
_mobj$ = 8						; size = 4
_state$ = 12						; size = 4
_P_SetMobjStateNF PROC					; COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 283  : 	state_t *st;
; 284  : 
; 285  : 	if (state == S_NULL)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  0000d	75 10		 jne	 SHORT $LN2@P_SetMobjS

; 286  : 	{ // Remove mobj
; 287  : 		P_RemoveMobj(mobj);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _P_RemoveMobj
  00018	83 c4 04	 add	 esp, 4

; 288  : 		return false;

  0001b	33 c0		 xor	 eax, eax
  0001d	eb 3d		 jmp	 SHORT $LN1@P_SetMobjS
$LN2@P_SetMobjS:

; 289  : 	}
; 290  : 	st = &states[state];

  0001f	6b 45 0c 1c	 imul	 eax, DWORD PTR _state$[ebp], 28
  00023	05 00 00 00 00	 add	 eax, OFFSET _states
  00028	89 45 fc	 mov	 DWORD PTR _st$[ebp], eax

; 291  : 	mobj->state = st;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00031	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 292  : 	mobj->tics = st->tics;

  00034	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  0003a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003d	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 293  : 	mobj->sprite = st->sprite;

  00040	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 294  : 	mobj->frame = st->frame;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _st$[ebp]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 295  : 	return true;

  00057	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_SetMobjS:

; 296  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_P_SetMobjStateNF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_GetClosestAxis
_TEXT	SEGMENT
_dist2$ = -20						; size = 4
_dist1$ = -16						; size = 4
_closestaxis$ = -12					; size = 4
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_source$ = 8						; size = 4
_P_GetClosestAxis PROC					; COMDAT

; 4382 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4383 : 	thinker_t *th;
; 4384 : 	mobj_t *mo2;
; 4385 : 	mobj_t *closestaxis = NULL;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _closestaxis$[ebp], 0

; 4386 : 	fixed_t dist1, dist2 = 0;

  00010	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dist2$[ebp], 0

; 4387 : 
; 4388 : 	// scan the thinkers to find the closest axis point
; 4389 : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00017	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0001c	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  0001f	eb 09		 jmp	 SHORT $LN4@P_GetClose
$LN2@P_GetClose:
  00021	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00024	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00027	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_GetClose:
  0002a	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00031	0f 84 a1 00 00
	00		 je	 $LN3@P_GetClose

; 4390 : 	{
; 4391 : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00037	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0003a	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00041	74 02		 je	 SHORT $LN5@P_GetClose

; 4392 : 			continue;

  00043	eb dc		 jmp	 SHORT $LN2@P_GetClose
$LN5@P_GetClose:

; 4393 : 
; 4394 : 		mo2 = (mobj_t *)th;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00048	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 4395 : 
; 4396 : 		if (mo2->type == MT_AXIS)

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0004e	81 78 7c f1 00
	00 00		 cmp	 DWORD PTR [eax+124], 241 ; 000000f1H
  00055	75 7c		 jne	 SHORT $LN9@P_GetClose

; 4397 : 		{
; 4398 : 			if (closestaxis == NULL)

  00057	83 7d f4 00	 cmp	 DWORD PTR _closestaxis$[ebp], 0
  0005b	75 35		 jne	 SHORT $LN7@P_GetClose

; 4399 : 			{
; 4400 : 				closestaxis = mo2;

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00060	89 45 f4	 mov	 DWORD PTR _closestaxis$[ebp], eax

; 4401 : 				dist2 = R_PointToDist2(source->x, source->y, mo2->x, mo2->y)-mo2->radius;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00066	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00069	51		 push	 ecx
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _mo2$[ebp]
  0006d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00074	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00077	52		 push	 edx
  00078	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0007b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 _R_PointToDist2
  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	8b 55 f8	 mov	 edx, DWORD PTR _mo2$[ebp]
  0008a	2b 42 40	 sub	 eax, DWORD PTR [edx+64]
  0008d	89 45 ec	 mov	 DWORD PTR _dist2$[ebp], eax

; 4402 : 			}

  00090	eb 41		 jmp	 SHORT $LN9@P_GetClose
$LN7@P_GetClose:

; 4403 : 			else
; 4404 : 			{
; 4405 : 				dist1 = R_PointToDist2(source->x, source->y, mo2->x, mo2->y)-mo2->radius;

  00092	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00095	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00098	51		 push	 ecx
  00099	8b 55 f8	 mov	 edx, DWORD PTR _mo2$[ebp]
  0009c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0009f	50		 push	 eax
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000a3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000a6	52		 push	 edx
  000a7	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000aa	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 _R_PointToDist2
  000b3	83 c4 10	 add	 esp, 16			; 00000010H
  000b6	8b 55 f8	 mov	 edx, DWORD PTR _mo2$[ebp]
  000b9	2b 42 40	 sub	 eax, DWORD PTR [edx+64]
  000bc	89 45 f0	 mov	 DWORD PTR _dist1$[ebp], eax

; 4406 : 
; 4407 : 				if (dist1 < dist2)

  000bf	8b 45 f0	 mov	 eax, DWORD PTR _dist1$[ebp]
  000c2	3b 45 ec	 cmp	 eax, DWORD PTR _dist2$[ebp]
  000c5	7d 0c		 jge	 SHORT $LN9@P_GetClose

; 4408 : 				{
; 4409 : 					closestaxis = mo2;

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  000ca	89 45 f4	 mov	 DWORD PTR _closestaxis$[ebp], eax

; 4410 : 					dist2 = dist1;

  000cd	8b 45 f0	 mov	 eax, DWORD PTR _dist1$[ebp]
  000d0	89 45 ec	 mov	 DWORD PTR _dist2$[ebp], eax
$LN9@P_GetClose:

; 4411 : 				}
; 4412 : 			}
; 4413 : 		}
; 4414 : 	}

  000d3	e9 49 ff ff ff	 jmp	 $LN2@P_GetClose
$LN3@P_GetClose:

; 4415 : 
; 4416 : 	if (closestaxis == NULL)

  000d8	83 7d f4 00	 cmp	 DWORD PTR _closestaxis$[ebp], 0
  000dc	75 0d		 jne	 SHORT $LN10@P_GetClose

; 4417 : 		CONS_Printf("ERROR: No axis points found!\n");

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MLGIMBMG@ERROR?3?5No?5axis?5points?5found?$CB?6@
  000e3	e8 00 00 00 00	 call	 _CONS_Printf
  000e8	83 c4 04	 add	 esp, 4
$LN10@P_GetClose:

; 4418 : 
; 4419 : 	return closestaxis;

  000eb	8b 45 f4	 mov	 eax, DWORD PTR _closestaxis$[ebp]

; 4420 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
_P_GetClosestAxis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_Attract
_TEXT	SEGMENT
_dest$ = -12						; size = 4
_speedmul$ = -8						; size = 4
_dist$ = -4						; size = 4
_source$ = 8						; size = 4
_enemy$ = 12						; size = 4
_nightsgrab$ = 16					; size = 4
_P_Attract PROC						; COMDAT

; 4689 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4690 : 	fixed_t dist, speedmul;
; 4691 : 	mobj_t *dest;
; 4692 : 
; 4693 : 	if (!enemy->health || !enemy->player || !source->tracer)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  0000c	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00013	74 18		 je	 SHORT $LN3@P_Attract
  00015	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  00018	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0001f	74 0c		 je	 SHORT $LN3@P_Attract
  00021	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00024	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0002b	75 05		 jne	 SHORT $LN2@P_Attract
$LN3@P_Attract:

; 4694 : 		return;

  0002d	e9 77 01 00 00	 jmp	 $LN1@P_Attract
$LN2@P_Attract:

; 4695 : 
; 4696 : 	// adjust direction
; 4697 : 	dest = source->tracer;

  00032	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00035	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0003b	89 4d f4	 mov	 DWORD PTR _dest$[ebp], ecx

; 4698 : 
; 4699 : 	if (!dest || dest->health <= 0)

  0003e	83 7d f4 00	 cmp	 DWORD PTR _dest$[ebp], 0
  00042	74 0c		 je	 SHORT $LN5@P_Attract
  00044	8b 45 f4	 mov	 eax, DWORD PTR _dest$[ebp]
  00047	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0004e	7f 05		 jg	 SHORT $LN4@P_Attract
$LN5@P_Attract:

; 4700 : 		return;

  00050	e9 54 01 00 00	 jmp	 $LN1@P_Attract
$LN4@P_Attract:

; 4701 : 
; 4702 : 	// change angle
; 4703 : 	source->angle = R_PointToAngle2(source->x, source->y, enemy->x, enemy->y);

  00055	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  00058	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005b	51		 push	 ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  0005f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00062	50		 push	 eax
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00066	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0006d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 _R_PointToAngle2
  00076	83 c4 10	 add	 esp, 16			; 00000010H
  00079	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0007c	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 4704 : 
; 4705 : 	// change slope
; 4706 : 	dist = P_AproxDistance(P_AproxDistance(dest->x - source->x, dest->y - source->y),

  0007f	8b 45 f4	 mov	 eax, DWORD PTR _dest$[ebp]
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00085	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00088	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  0008b	52		 push	 edx
  0008c	8b 45 f4	 mov	 eax, DWORD PTR _dest$[ebp]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00092	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00095	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00098	52		 push	 edx
  00099	8b 45 f4	 mov	 eax, DWORD PTR _dest$[ebp]
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0009f	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000a2	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _P_AproxDistance
  000ab	83 c4 08	 add	 esp, 8
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _P_AproxDistance
  000b4	83 c4 08	 add	 esp, 8
  000b7	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 4707 : 		dest->z - source->z);
; 4708 : 
; 4709 : 	if (dist < 1)

  000ba	83 7d fc 01	 cmp	 DWORD PTR _dist$[ebp], 1
  000be	7d 07		 jge	 SHORT $LN6@P_Attract

; 4710 : 		dist = 1;

  000c0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN6@P_Attract:

; 4711 : 
; 4712 : 	if (nightsgrab)

  000c7	83 7d 10 00	 cmp	 DWORD PTR _nightsgrab$[ebp], 0
  000cb	74 20		 je	 SHORT $LN7@P_Attract

; 4713 : 		speedmul = P_AproxDistance(enemy->momx, enemy->momy) + 8*FRACUNIT;

  000cd	8b 45 0c	 mov	 eax, DWORD PTR _enemy$[ebp]
  000d0	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000d3	51		 push	 ecx
  000d4	8b 55 0c	 mov	 edx, DWORD PTR _enemy$[ebp]
  000d7	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _P_AproxDistance
  000e0	83 c4 08	 add	 esp, 8
  000e3	05 00 00 08 00	 add	 eax, 524288		; 00080000H
  000e8	89 45 f8	 mov	 DWORD PTR _speedmul$[ebp], eax
  000eb	eb 0f		 jmp	 SHORT $LN8@P_Attract
$LN7@P_Attract:

; 4714 : 	else
; 4715 : 		speedmul = source->info->speed;

  000ed	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000f0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000f6	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000f9	89 55 f8	 mov	 DWORD PTR _speedmul$[ebp], edx
$LN8@P_Attract:

; 4716 : 
; 4717 : 	// If an attracted item was given MF_NOCLIP, remove it when close to dest.
; 4718 : 	// That way they don't spazz out all over the place.
; 4719 : 	if (source->flags & MF_NOCLIP && dist < 32*FRACUNIT)

  000fc	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000ff	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00102	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00108	74 1b		 je	 SHORT $LN9@P_Attract
  0010a	81 7d fc 00 00
	20 00		 cmp	 DWORD PTR _dist$[ebp], 2097152 ; 00200000H
  00111	7d 12		 jge	 SHORT $LN9@P_Attract

; 4720 : 		source->flags &= ~MF_NOCLIP;

  00113	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00116	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00119	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  0011f	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00122	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN9@P_Attract:

; 4721 : 
; 4722 : 	source->momx = FixedMul(FixedDiv(dest->x - source->x, dist), speedmul);

  00125	8b 45 f8	 mov	 eax, DWORD PTR _speedmul$[ebp]
  00128	50		 push	 eax
  00129	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  0012c	51		 push	 ecx
  0012d	8b 55 f4	 mov	 edx, DWORD PTR _dest$[ebp]
  00130	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00133	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00136	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 _FixedDiv
  0013f	83 c4 08	 add	 esp, 8
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 _FixedMul
  00148	83 c4 08	 add	 esp, 8
  0014b	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0014e	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 4723 : 	source->momy = FixedMul(FixedDiv(dest->y - source->y, dist), speedmul);

  00151	8b 45 f8	 mov	 eax, DWORD PTR _speedmul$[ebp]
  00154	50		 push	 eax
  00155	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  00158	51		 push	 ecx
  00159	8b 55 f4	 mov	 edx, DWORD PTR _dest$[ebp]
  0015c	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0015f	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00162	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 _FixedDiv
  0016b	83 c4 08	 add	 esp, 8
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 _FixedMul
  00174	83 c4 08	 add	 esp, 8
  00177	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0017a	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 4724 : 	source->momz = FixedMul(FixedDiv(dest->z - source->z, dist), speedmul);

  0017d	8b 45 f8	 mov	 eax, DWORD PTR _speedmul$[ebp]
  00180	50		 push	 eax
  00181	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  00184	51		 push	 ecx
  00185	8b 55 f4	 mov	 edx, DWORD PTR _dest$[ebp]
  00188	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0018b	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0018e	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  00191	51		 push	 ecx
  00192	e8 00 00 00 00	 call	 _FixedDiv
  00197	83 c4 08	 add	 esp, 8
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _FixedMul
  001a0	83 c4 08	 add	 esp, 8
  001a3	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  001a6	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN1@P_Attract:

; 4725 : 
; 4726 : 	return;
; 4727 : }

  001a9	5f		 pop	 edi
  001aa	5e		 pop	 esi
  001ab	5b		 pop	 ebx
  001ac	8b e5		 mov	 esp, ebp
  001ae	5d		 pop	 ebp
  001af	c3		 ret	 0
_P_Attract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_CameraThinker
_TEXT	SEGMENT
_cam_height$1 = -240					; size = 4
_dummy$2 = -236						; size = 212
_oldy$3 = -24						; size = 4
_oldx$4 = -20						; size = 4
_ymove$5 = -16						; size = 4
_xmove$6 = -12						; size = 4
_ptryy$7 = -8						; size = 4
_ptryx$8 = -4						; size = 4
_player$ = 8						; size = 4
_thiscam$ = 12						; size = 4
_P_CameraThinker PROC					; COMDAT

; 2637 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2638 : 	if (thiscam->momx || thiscam->momy)

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0000f	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00013	75 0d		 jne	 SHORT $LN6@P_CameraTh
  00015	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00018	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  0001c	0f 84 8a 01 00
	00		 je	 $LN3@P_CameraTh
$LN6@P_CameraTh:

; 2639 : 	{
; 2640 : 		fixed_t ptryx, ptryy, xmove, ymove;
; 2641 : 		fixed_t oldx, oldy; // reducing bobbing/momentum on ice when up against walls
; 2642 : 
; 2643 : 		if (thiscam->momx > MAXMOVE)

  00022	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00025	81 78 38 00 00
	3c 00		 cmp	 DWORD PTR [eax+56], 3932160 ; 003c0000H
  0002c	7e 0c		 jle	 SHORT $LN7@P_CameraTh

; 2644 : 			thiscam->momx = MAXMOVE;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00031	c7 40 38 00 00
	3c 00		 mov	 DWORD PTR [eax+56], 3932160 ; 003c0000H
  00038	eb 16		 jmp	 SHORT $LN9@P_CameraTh
$LN7@P_CameraTh:

; 2645 : 		else if (thiscam->momx < -MAXMOVE)

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0003d	81 78 38 00 00
	c4 ff		 cmp	 DWORD PTR [eax+56], -3932160 ; ffc40000H
  00044	7d 0a		 jge	 SHORT $LN9@P_CameraTh

; 2646 : 			thiscam->momx = -MAXMOVE;

  00046	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00049	c7 40 38 00 00
	c4 ff		 mov	 DWORD PTR [eax+56], -3932160 ; ffc40000H
$LN9@P_CameraTh:

; 2647 : 
; 2648 : 		if (thiscam->momy > MAXMOVE)

  00050	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00053	81 78 3c 00 00
	3c 00		 cmp	 DWORD PTR [eax+60], 3932160 ; 003c0000H
  0005a	7e 0c		 jle	 SHORT $LN10@P_CameraTh

; 2649 : 			thiscam->momy = MAXMOVE;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0005f	c7 40 3c 00 00
	3c 00		 mov	 DWORD PTR [eax+60], 3932160 ; 003c0000H
  00066	eb 16		 jmp	 SHORT $LN12@P_CameraTh
$LN10@P_CameraTh:

; 2650 : 		else if (thiscam->momy < -MAXMOVE)

  00068	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0006b	81 78 3c 00 00
	c4 ff		 cmp	 DWORD PTR [eax+60], -3932160 ; ffc40000H
  00072	7d 0a		 jge	 SHORT $LN12@P_CameraTh

; 2651 : 			thiscam->momy = -MAXMOVE;

  00074	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00077	c7 40 3c 00 00
	c4 ff		 mov	 DWORD PTR [eax+60], -3932160 ; ffc40000H
$LN12@P_CameraTh:

; 2652 : 
; 2653 : 		xmove = thiscam->momx;

  0007e	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00081	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00084	89 4d f4	 mov	 DWORD PTR _xmove$6[ebp], ecx

; 2654 : 		ymove = thiscam->momy;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0008a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0008d	89 4d f0	 mov	 DWORD PTR _ymove$5[ebp], ecx

; 2655 : 
; 2656 : 		oldx = thiscam->x;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00093	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00096	89 4d ec	 mov	 DWORD PTR _oldx$4[ebp], ecx

; 2657 : 		oldy = thiscam->y;

  00099	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0009c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0009f	89 4d e8	 mov	 DWORD PTR _oldy$3[ebp], ecx
$LN31@P_CameraTh:

; 2658 : 
; 2659 : 		do
; 2660 : 		{
; 2661 : 			if (xmove > MAXMOVE/2 || ymove > MAXMOVE/2)

  000a2	81 7d f4 00 00
	1e 00		 cmp	 DWORD PTR _xmove$6[ebp], 1966080 ; 001e0000H
  000a9	7f 09		 jg	 SHORT $LN15@P_CameraTh
  000ab	81 7d f0 00 00
	1e 00		 cmp	 DWORD PTR _ymove$5[ebp], 1966080 ; 001e0000H
  000b2	7e 34		 jle	 SHORT $LN13@P_CameraTh
$LN15@P_CameraTh:

; 2662 : 			{
; 2663 : 				ptryx = thiscam->x + xmove/2;

  000b4	8b 45 f4	 mov	 eax, DWORD PTR _xmove$6[ebp]
  000b7	99		 cdq
  000b8	2b c2		 sub	 eax, edx
  000ba	d1 f8		 sar	 eax, 1
  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  000bf	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  000c2	89 45 fc	 mov	 DWORD PTR _ptryx$8[ebp], eax

; 2664 : 				ptryy = thiscam->y + ymove/2;

  000c5	8b 45 f0	 mov	 eax, DWORD PTR _ymove$5[ebp]
  000c8	99		 cdq
  000c9	2b c2		 sub	 eax, edx
  000cb	d1 f8		 sar	 eax, 1
  000cd	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  000d0	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  000d3	89 45 f8	 mov	 DWORD PTR _ptryy$7[ebp], eax

; 2665 : 				xmove >>= 1;

  000d6	8b 45 f4	 mov	 eax, DWORD PTR _xmove$6[ebp]
  000d9	d1 f8		 sar	 eax, 1
  000db	89 45 f4	 mov	 DWORD PTR _xmove$6[ebp], eax

; 2666 : 				ymove >>= 1;

  000de	8b 45 f0	 mov	 eax, DWORD PTR _ymove$5[ebp]
  000e1	d1 f8		 sar	 eax, 1
  000e3	89 45 f0	 mov	 DWORD PTR _ymove$5[ebp], eax

; 2667 : 			}

  000e6	eb 25		 jmp	 SHORT $LN14@P_CameraTh
$LN13@P_CameraTh:

; 2668 : 			else
; 2669 : 			{
; 2670 : 				ptryx = thiscam->x + xmove;

  000e8	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000eb	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ee	03 4d f4	 add	 ecx, DWORD PTR _xmove$6[ebp]
  000f1	89 4d fc	 mov	 DWORD PTR _ptryx$8[ebp], ecx

; 2671 : 				ptryy = thiscam->y + ymove;

  000f4	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000f7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000fa	03 4d f0	 add	 ecx, DWORD PTR _ymove$5[ebp]
  000fd	89 4d f8	 mov	 DWORD PTR _ptryy$7[ebp], ecx

; 2672 : 				xmove = ymove = 0;

  00100	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ymove$5[ebp], 0
  00107	8b 45 f0	 mov	 eax, DWORD PTR _ymove$5[ebp]
  0010a	89 45 f4	 mov	 DWORD PTR _xmove$6[ebp], eax
$LN14@P_CameraTh:

; 2673 : 			}
; 2674 : 
; 2675 : 			if (!P_TryCameraMove(ptryx, ptryy, thiscam))

  0010d	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00110	50		 push	 eax
  00111	8b 4d f8	 mov	 ecx, DWORD PTR _ptryy$7[ebp]
  00114	51		 push	 ecx
  00115	8b 55 fc	 mov	 edx, DWORD PTR _ptryx$8[ebp]
  00118	52		 push	 edx
  00119	e8 00 00 00 00	 call	 _P_TryCameraMove
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	85 c0		 test	 eax, eax
  00123	75 73		 jne	 SHORT $LN18@P_CameraTh

; 2676 : 			{
; 2677 : 				mobj_t dummy;
; 2678 : 				dummy.subsector = thiscam->subsector;

  00125	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00128	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0012b	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _dummy$2[ebp+52], ecx

; 2679 : 				dummy.x = thiscam->x;

  00131	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00134	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00137	89 8d 24 ff ff
	ff		 mov	 DWORD PTR _dummy$2[ebp+16], ecx

; 2680 : 				dummy.y = thiscam->y;

  0013d	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00140	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00143	89 8d 28 ff ff
	ff		 mov	 DWORD PTR _dummy$2[ebp+20], ecx

; 2681 : 				dummy.z = thiscam->z;

  00149	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0014c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0014f	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _dummy$2[ebp+24], ecx

; 2682 : 				dummy.height = thiscam->height;

  00155	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00158	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0015b	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _dummy$2[ebp+68], ecx

; 2683 : 				if (!P_CheckSight(&dummy, player->mo)) // TODO: "P_CheckCameraSight" instead.

  00161	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	51		 push	 ecx
  00167	8d 95 14 ff ff
	ff		 lea	 edx, DWORD PTR _dummy$2[ebp]
  0016d	52		 push	 edx
  0016e	e8 00 00 00 00	 call	 _P_CheckSight
  00173	83 c4 08	 add	 esp, 8
  00176	85 c0		 test	 eax, eax
  00178	75 12		 jne	 SHORT $LN17@P_CameraTh

; 2684 : 					P_ResetCamera(player, thiscam);

  0017a	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0017d	50		 push	 eax
  0017e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 _P_ResetCamera
  00187	83 c4 08	 add	 esp, 8
  0018a	eb 0c		 jmp	 SHORT $LN18@P_CameraTh
$LN17@P_CameraTh:

; 2685 : 				else
; 2686 : 					P_SlideCameraMove(thiscam);

  0018c	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 _P_SlideCameraMove
  00195	83 c4 04	 add	 esp, 4
$LN18@P_CameraTh:

; 2687 : 			}
; 2688 : 		} while (xmove || ymove);

  00198	83 7d f4 00	 cmp	 DWORD PTR _xmove$6[ebp], 0
  0019c	0f 85 00 ff ff
	ff		 jne	 $LN31@P_CameraTh
  001a2	83 7d f0 00	 cmp	 DWORD PTR _ymove$5[ebp], 0
  001a6	0f 85 f6 fe ff
	ff		 jne	 $LN31@P_CameraTh
$LN3@P_CameraTh:

; 2689 : 	}
; 2690 : 
; 2691 : 	P_CheckCameraPosition(thiscam->x, thiscam->y, thiscam);

  001ac	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  001af	50		 push	 eax
  001b0	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  001b3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001b6	52		 push	 edx
  001b7	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  001ba	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001bd	51		 push	 ecx
  001be	e8 00 00 00 00	 call	 _P_CheckCameraPosition
  001c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2692 : 
; 2693 : 	thiscam->subsector = R_PointInSubsector(thiscam->x, thiscam->y);

  001c6	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  001c9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001cc	51		 push	 ecx
  001cd	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  001d0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 _R_PointInSubsector
  001d9	83 c4 08	 add	 esp, 8
  001dc	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  001df	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2694 : 	thiscam->floorz = tmfloorz;

  001e2	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  001e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tmfloorz
  001eb	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 2695 : 	thiscam->ceilingz = tmceilingz;

  001ee	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  001f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tmceilingz
  001f7	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 2696 : 
; 2697 : 	if (thiscam->momz)

  001fa	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  001fd	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00201	0f 84 f9 00 00
	00		 je	 $LN25@P_CameraTh

; 2698 : 	{
; 2699 : 		// adjust height
; 2700 : 		thiscam->z += thiscam->momz;

  00207	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0020a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0020d	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  00210	03 4a 40	 add	 ecx, DWORD PTR [edx+64]
  00213	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00216	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2701 : 
; 2702 : 		// clip movement
; 2703 : 		if (thiscam->z <= thiscam->floorz) // hit the floor

  00219	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  0021f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00222	3b 51 24	 cmp	 edx, DWORD PTR [ecx+36]
  00225	7f 6f		 jg	 SHORT $LN22@P_CameraTh

; 2704 : 		{
; 2705 : 			fixed_t cam_height = cv_cam_height.value;

  00227	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam_height+20
  0022c	89 85 10 ff ff
	ff		 mov	 DWORD PTR _cam_height$1[ebp], eax

; 2706 : 			thiscam->z = thiscam->floorz;

  00232	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00235	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00238	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0023b	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 2707 : 
; 2708 : 			if (player == &players[secondarydisplayplayer])

  0023e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00248	05 00 00 00 00	 add	 eax, OFFSET _players
  0024d	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00250	75 0b		 jne	 SHORT $LN21@P_CameraTh

; 2709 : 				cam_height = cv_cam2_height.value;

  00252	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cam2_height+20
  00257	89 85 10 ff ff
	ff		 mov	 DWORD PTR _cam_height$1[ebp], eax
$LN21@P_CameraTh:

; 2710 : 			if (thiscam->z > player->mo->z + player->mo->height + cam_height*FRACUNIT + 16*FRACUNIT)

  0025d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00260	8b 08		 mov	 ecx, DWORD PTR [eax]
  00262	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00265	8b 02		 mov	 eax, DWORD PTR [edx]
  00267	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0026a	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  0026d	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _cam_height$1[ebp]
  00273	c1 e2 10	 shl	 edx, 16			; 00000010H
  00276	8d 84 11 00 00
	10 00		 lea	 eax, DWORD PTR [ecx+edx+1048576]
  0027d	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00280	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00283	7e 11		 jle	 SHORT $LN22@P_CameraTh

; 2711 : 				P_ResetCamera(player, &camera);

  00285	68 00 00 00 00	 push	 OFFSET _camera
  0028a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0028d	50		 push	 eax
  0028e	e8 00 00 00 00	 call	 _P_ResetCamera
  00293	83 c4 08	 add	 esp, 8
$LN22@P_CameraTh:

; 2712 : 		}
; 2713 : 
; 2714 : 		if (thiscam->z + thiscam->height > thiscam->ceilingz)

  00296	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00299	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0029c	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  0029f	03 4a 30	 add	 ecx, DWORD PTR [edx+48]
  002a2	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  002a5	3b 48 28	 cmp	 ecx, DWORD PTR [eax+40]
  002a8	7e 56		 jle	 SHORT $LN25@P_CameraTh

; 2715 : 		{
; 2716 : 			if (thiscam->momz > 0)

  002aa	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  002ad	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  002b1	7e 0a		 jle	 SHORT $LN24@P_CameraTh

; 2717 : 			{
; 2718 : 				// hit the ceiling
; 2719 : 				thiscam->momz = 0;

  002b3	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  002b6	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0
$LN24@P_CameraTh:

; 2720 : 			}
; 2721 : 
; 2722 : 			thiscam->z = thiscam->ceilingz - thiscam->height;

  002bd	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  002c0	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  002c3	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  002c6	2b 51 30	 sub	 edx, DWORD PTR [ecx+48]
  002c9	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  002cc	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 2723 : 
; 2724 : 			if (thiscam->z + thiscam->height < player->mo->z - player->mo->height)

  002cf	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  002d2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002d5	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  002d8	03 4a 30	 add	 ecx, DWORD PTR [edx+48]
  002db	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002de	8b 10		 mov	 edx, DWORD PTR [eax]
  002e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002e3	8b 00		 mov	 eax, DWORD PTR [eax]
  002e5	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  002e8	2b 50 44	 sub	 edx, DWORD PTR [eax+68]
  002eb	3b ca		 cmp	 ecx, edx
  002ed	7d 11		 jge	 SHORT $LN25@P_CameraTh

; 2725 : 				P_ResetCamera(player, &camera);

  002ef	68 00 00 00 00	 push	 OFFSET _camera
  002f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 _P_ResetCamera
  002fd	83 c4 08	 add	 esp, 8
$LN25@P_CameraTh:

; 2726 : 		}
; 2727 : 	}
; 2728 : 
; 2729 : 	if (thiscam->ceilingz - thiscam->z < thiscam->height
; 2730 : 		&& thiscam->ceilingz >= thiscam->z)

  00300	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00303	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  00306	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00309	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  0030c	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0030f	3b 50 30	 cmp	 edx, DWORD PTR [eax+48]
  00312	7d 2c		 jge	 SHORT $LN26@P_CameraTh
  00314	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00317	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  0031a	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0031d	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  00320	7c 1e		 jl	 SHORT $LN26@P_CameraTh

; 2731 : 	{
; 2732 : 		thiscam->ceilingz = thiscam->z + thiscam->height;

  00322	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00325	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00328	8b 55 0c	 mov	 edx, DWORD PTR _thiscam$[ebp]
  0032b	03 4a 30	 add	 ecx, DWORD PTR [edx+48]
  0032e	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00331	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 2733 : 		thiscam->floorz = thiscam->z;

  00334	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00337	8b 4d 0c	 mov	 ecx, DWORD PTR _thiscam$[ebp]
  0033a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0033d	89 50 24	 mov	 DWORD PTR [eax+36], edx
$LN26@P_CameraTh:

; 2734 : 	}
; 2735 : 
; 2736 : 	// Are we in water?
; 2737 : 	if (!splitscreen && P_CameraCheckWater(thiscam))

  00340	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00347	75 1c		 jne	 SHORT $LN27@P_CameraTh
  00349	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0034c	50		 push	 eax
  0034d	e8 00 00 00 00	 call	 _P_CameraCheckWater
  00352	83 c4 04	 add	 esp, 4
  00355	85 c0		 test	 eax, eax
  00357	74 0c		 je	 SHORT $LN27@P_CameraTh

; 2738 : 		postimgtype = postimg_water;

  00359	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _postimgtype, 1
  00363	eb 23		 jmp	 SHORT $LN29@P_CameraTh
$LN27@P_CameraTh:

; 2739 : 	else if (!splitscreen && P_CameraCheckHeat(thiscam))

  00365	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0036c	75 1a		 jne	 SHORT $LN29@P_CameraTh
  0036e	8b 45 0c	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 _P_CameraCheckHeat
  00377	83 c4 04	 add	 esp, 4
  0037a	85 c0		 test	 eax, eax
  0037c	74 0a		 je	 SHORT $LN29@P_CameraTh

; 2740 : 		postimgtype = postimg_heat;

  0037e	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR _postimgtype, 4
$LN29@P_CameraTh:

; 2741 : }

  00388	5f		 pop	 edi
  00389	5e		 pop	 esi
  0038a	5b		 pop	 ebx
  0038b	8b e5		 mov	 esp, ebp
  0038d	5d		 pop	 ebp
  0038e	c3		 ret	 0
_P_CameraThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_ColorTeamMissile
_TEXT	SEGMENT
_missile$ = 8						; size = 4
_source$ = 12						; size = 4
_P_ColorTeamMissile PROC				; COMDAT

; 8718 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8719 : 	missile->flags |= MF_TRANSLATION;

  00009	8b 45 08	 mov	 eax, DWORD PTR _missile$[ebp]
  0000c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0000f	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  00015	8b 55 08	 mov	 edx, DWORD PTR _missile$[ebp]
  00018	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 8720 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0001b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00022	83 f8 04	 cmp	 eax, 4
  00025	74 15		 je	 SHORT $LN3@P_ColorTea
  00027	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0002e	83 f8 01	 cmp	 eax, 1
  00031	75 1c		 jne	 SHORT $LN4@P_ColorTea
  00033	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0003a	74 13		 je	 SHORT $LN4@P_ColorTea
$LN3@P_ColorTea:

; 8721 : 	{
; 8722 : 		if (source->ctfteam == 2)

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0003f	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  00046	75 07		 jne	 SHORT $LN4@P_ColorTea

; 8723 : 			missile->color = 8;

  00048	8b 45 08	 mov	 eax, DWORD PTR _missile$[ebp]
  0004b	c6 40 68 08	 mov	 BYTE PTR [eax+104], 8
$LN4@P_ColorTea:

; 8724 : 	}
; 8725 : 	/*
; 8726 : 	else
; 8727 : 		missile->color = player->mo->color; //copy color
; 8728 : 	*/
; 8729 : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_P_ColorTeamMissile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SPMAngle
_TEXT	SEGMENT
tv222 = -92						; size = 4
_slope$ = -24						; size = 4
_z$ = -20						; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_an$ = -8						; size = 4
_th$ = -4						; size = 4
_source$ = 8						; size = 4
_type$ = 12						; size = 4
_angle$ = 16						; size = 4
_noaiming$ = 20						; size = 4
_noautoaiming$ = 24					; size = 4
_flags2$ = 28						; size = 4
_reflected$ = 32					; size = 4
_P_SPMAngle PROC					; COMDAT

; 8736 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8737 : 	mobj_t *th;
; 8738 : 	angle_t an;
; 8739 : 	fixed_t x, y, z, slope = 0;

  00009	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _slope$[ebp], 0

; 8740 : 
; 8741 : 	// angle at which you fire, is player angle
; 8742 : 	an = angle;

  00010	8b 45 10	 mov	 eax, DWORD PTR _angle$[ebp]
  00013	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax

; 8743 : 
; 8744 : 	if (!noaiming)

  00016	83 7d 14 00	 cmp	 DWORD PTR _noaiming$[ebp], 0
  0001a	0f 85 41 01 00
	00		 jne	 $LN9@P_SPMAngle

; 8745 : 	{
; 8746 : 		if (!noautoaiming)

  00020	83 7d 18 00	 cmp	 DWORD PTR _noautoaiming$[ebp], 0
  00024	0f 85 c9 00 00
	00		 jne	 $LN3@P_SPMAngle

; 8747 : 		{
; 8748 : 			if ((source->player->pflags & PF_AUTOAIM) && cv_allowautoaim.value
; 8749 : 				&& !source->player->powers[pw_railring])

  0002a	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0002d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00033	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00039	83 e2 01	 and	 edx, 1
  0003c	0f 84 af 00 00
	00		 je	 $LN8@P_SPMAngle
  00042	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowautoaim+20, 0
  00049	0f 84 a2 00 00
	00		 je	 $LN8@P_SPMAngle
  0004f	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00052	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00058	ba 04 00 00 00	 mov	 edx, 4
  0005d	6b c2 13	 imul	 eax, edx, 19
  00060	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00065	0f 85 86 00 00
	00		 jne	 $LN8@P_SPMAngle

; 8750 : 			{
; 8751 : 				// see which target is to be aimed at
; 8752 : 				slope = P_AimLineAttack(source, an, 16*64*FRACUNIT);

  0006b	68 00 00 00 04	 push	 67108864		; 04000000H
  00070	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _P_AimLineAttack
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	89 45 e8	 mov	 DWORD PTR _slope$[ebp], eax

; 8753 : 
; 8754 : 				if (!linetarget)

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _linetarget, 0
  0008a	75 65		 jne	 SHORT $LN8@P_SPMAngle

; 8755 : 				{
; 8756 : 					an += 1<<26;

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  0008f	05 00 00 00 04	 add	 eax, 67108864		; 04000000H
  00094	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax

; 8757 : 					slope = P_AimLineAttack(source, an, 16*64*FRACUNIT);

  00097	68 00 00 00 04	 push	 67108864		; 04000000H
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 _P_AimLineAttack
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ac	89 45 e8	 mov	 DWORD PTR _slope$[ebp], eax

; 8758 : 
; 8759 : 					if (!linetarget)

  000af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _linetarget, 0
  000b6	75 23		 jne	 SHORT $LN7@P_SPMAngle

; 8760 : 					{
; 8761 : 						an -= 2<<26;

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  000bb	2d 00 00 00 08	 sub	 eax, 134217728		; 08000000H
  000c0	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax

; 8762 : 						slope = P_AimLineAttack(source, an, 16*64*FRACUNIT);

  000c3	68 00 00 00 04	 push	 67108864		; 04000000H
  000c8	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 _P_AimLineAttack
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	89 45 e8	 mov	 DWORD PTR _slope$[ebp], eax
$LN7@P_SPMAngle:

; 8763 : 					}
; 8764 : 					if (!linetarget)

  000db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _linetarget, 0
  000e2	75 0d		 jne	 SHORT $LN8@P_SPMAngle

; 8765 : 					{
; 8766 : 						an = angle;

  000e4	8b 45 10	 mov	 eax, DWORD PTR _angle$[ebp]
  000e7	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax

; 8767 : 						slope = 0;

  000ea	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _slope$[ebp], 0
$LN8@P_SPMAngle:

; 8768 : 					}
; 8769 : 				}
; 8770 : 			}
; 8771 : 		}

  000f1	eb 1f		 jmp	 SHORT $LN4@P_SPMAngle
$LN3@P_SPMAngle:

; 8772 : 		else
; 8773 : 			slope = AIMINGTOSLOPE(source->player->aiming);

  000f3	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000f6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000fc	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ff	c1 ea 13	 shr	 edx, 19			; 00000013H
  00102	81 e2 ff 1f 00
	00		 and	 edx, 8191		; 00001fffH
  00108	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _finesine[edx*4]
  0010f	89 45 e8	 mov	 DWORD PTR _slope$[ebp], eax
$LN4@P_SPMAngle:

; 8774 : 
; 8775 : 		// if not autoaim, or if the autoaim didn't aim something, use the mouseaiming
; 8776 : 		if ((!((source->player->pflags & PF_AUTOAIM) && cv_allowautoaim.value)
; 8777 : 			|| (!linetarget)) || (flags2 & MF2_RAILRING))

  00112	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00115	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0011b	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00121	83 e2 01	 and	 edx, 1
  00124	74 1c		 je	 SHORT $LN10@P_SPMAngle
  00126	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowautoaim+20, 0
  0012d	74 13		 je	 SHORT $LN10@P_SPMAngle
  0012f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _linetarget, 0
  00136	74 0a		 je	 SHORT $LN10@P_SPMAngle
  00138	8b 45 1c	 mov	 eax, DWORD PTR _flags2$[ebp]
  0013b	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  00140	74 1f		 je	 SHORT $LN9@P_SPMAngle
$LN10@P_SPMAngle:

; 8778 : 		{
; 8779 : 			slope = AIMINGTOSLOPE(source->player->aiming);

  00142	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00145	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0014b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0014e	c1 ea 13	 shr	 edx, 19			; 00000013H
  00151	81 e2 ff 1f 00
	00		 and	 edx, 8191		; 00001fffH
  00157	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _finesine[edx*4]
  0015e	89 45 e8	 mov	 DWORD PTR _slope$[ebp], eax
$LN9@P_SPMAngle:

; 8780 : 		}
; 8781 : 	}
; 8782 : 
; 8783 : 	x = source->x;

  00161	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00164	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00167	89 4d f4	 mov	 DWORD PTR _x$[ebp], ecx

; 8784 : 	y = source->y;

  0016a	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0016d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00170	89 4d f0	 mov	 DWORD PTR _y$[ebp], ecx

; 8785 : 	z = source->z + source->height/3;

  00173	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00176	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00179	99		 cdq
  0017a	b9 03 00 00 00	 mov	 ecx, 3
  0017f	f7 f9		 idiv	 ecx
  00181	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00184	03 42 18	 add	 eax, DWORD PTR [edx+24]
  00187	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax

; 8786 : 
; 8787 : 	th = P_SpawnMobj(x, y, z, type);

  0018a	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0018d	50		 push	 eax
  0018e	8b 4d ec	 mov	 ecx, DWORD PTR _z$[ebp]
  00191	51		 push	 ecx
  00192	8b 55 f0	 mov	 edx, DWORD PTR _y$[ebp]
  00195	52		 push	 edx
  00196	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0019f	83 c4 10	 add	 esp, 16			; 00000010H
  001a2	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax

; 8788 : 
; 8789 : 	th->flags2 |= flags2;

  001a5	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  001a8	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  001ae	0b 4d 1c	 or	 ecx, DWORD PTR _flags2$[ebp]
  001b1	8b 55 fc	 mov	 edx, DWORD PTR _th$[ebp]
  001b4	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 8790 : 
; 8791 : 	if (reflected)

  001ba	83 7d 20 00	 cmp	 DWORD PTR _reflected$[ebp], 0
  001be	74 18		 je	 SHORT $LN11@P_SPMAngle

; 8792 : 		th->flags2 |= MF2_REFLECTED;

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  001c3	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  001c9	81 c9 00 00 00
	20		 or	 ecx, 536870912		; 20000000H
  001cf	8b 55 fc	 mov	 edx, DWORD PTR _th$[ebp]
  001d2	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN11@P_SPMAngle:

; 8793 : 
; 8794 : #ifdef WEAPON_SFX
; 8795 : 	//Since rail and bounce have no thrown objects, this hack is necessary.
; 8796 : 	//Is creating thrown objects for rail and bounce more or less desirable than this?
; 8797 : 	if (th->info->seesound && !(th->flags2 & MF2_RAILRING) && !(th->flags2 & MF2_SCATTER))
; 8798 : 		S_StartSound(source, th->info->seesound);
; 8799 : #else
; 8800 : 	if (th->info->seesound)

  001d8	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  001db	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001e1	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  001e5	74 19		 je	 SHORT $LN12@P_SPMAngle

; 8801 : 		S_StartSound(source, th->info->seesound);

  001e7	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  001ea	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001f0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001f3	52		 push	 edx
  001f4	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _S_StartSound
  001fd	83 c4 08	 add	 esp, 8
$LN12@P_SPMAngle:

; 8802 : #endif
; 8803 : 
; 8804 : 	P_SetTarget(&th->target, source);

  00200	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00203	50		 push	 eax
  00204	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  00207	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0020d	51		 push	 ecx
  0020e	e8 00 00 00 00	 call	 _P_SetTarget
  00213	83 c4 08	 add	 esp, 8

; 8805 : 
; 8806 : 	th->angle = an;

  00216	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00219	8b 4d f8	 mov	 ecx, DWORD PTR _an$[ebp]
  0021c	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 8807 : 	th->momx = FixedMul(th->info->speed, FINECOSINE(an>>ANGLETOFINESHIFT));

  0021f	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  00222	c1 e8 13	 shr	 eax, 19			; 00000013H
  00225	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0022b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0022e	52		 push	 edx
  0022f	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00232	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00238	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0023b	52		 push	 edx
  0023c	e8 00 00 00 00	 call	 _FixedMul
  00241	83 c4 08	 add	 esp, 8
  00244	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  00247	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 8808 : 	th->momy = FixedMul(th->info->speed, FINESINE(an>>ANGLETOFINESHIFT));

  0024a	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  0024d	c1 e8 13	 shr	 eax, 19			; 00000013H
  00250	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00257	51		 push	 ecx
  00258	8b 55 fc	 mov	 edx, DWORD PTR _th$[ebp]
  0025b	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00261	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00264	51		 push	 ecx
  00265	e8 00 00 00 00	 call	 _FixedMul
  0026a	83 c4 08	 add	 esp, 8
  0026d	8b 55 fc	 mov	 edx, DWORD PTR _th$[ebp]
  00270	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 8809 : 
; 8810 : 	if (!noaiming)

  00273	83 7d 14 00	 cmp	 DWORD PTR _noaiming$[ebp], 0
  00277	75 5a		 jne	 SHORT $LN13@P_SPMAngle

; 8811 : 	{
; 8812 : 		th->momx = FixedMul(th->momx,FINECOSINE(source->player->aiming>>ANGLETOFINESHIFT));

  00279	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0027c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00282	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00285	c1 ea 13	 shr	 edx, 19			; 00000013H
  00288	a1 00 00 00 00	 mov	 eax, DWORD PTR _finecosine
  0028d	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00290	51		 push	 ecx
  00291	8b 55 fc	 mov	 edx, DWORD PTR _th$[ebp]
  00294	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00297	50		 push	 eax
  00298	e8 00 00 00 00	 call	 _FixedMul
  0029d	83 c4 08	 add	 esp, 8
  002a0	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  002a3	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 8813 : 		th->momy = FixedMul(th->momy,FINECOSINE(source->player->aiming>>ANGLETOFINESHIFT));

  002a6	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  002a9	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002af	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  002b2	c1 ea 13	 shr	 edx, 19			; 00000013H
  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _finecosine
  002ba	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  002bd	51		 push	 ecx
  002be	8b 55 fc	 mov	 edx, DWORD PTR _th$[ebp]
  002c1	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  002c4	50		 push	 eax
  002c5	e8 00 00 00 00	 call	 _FixedMul
  002ca	83 c4 08	 add	 esp, 8
  002cd	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  002d0	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN13@P_SPMAngle:

; 8814 : 	}
; 8815 : 
; 8816 : 	th->momz = FixedMul(th->info->speed, slope);

  002d3	8b 45 e8	 mov	 eax, DWORD PTR _slope$[ebp]
  002d6	50		 push	 eax
  002d7	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  002da	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  002e0	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 _FixedMul
  002e9	83 c4 08	 add	 esp, 8
  002ec	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  002ef	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 8817 : 
; 8818 : 	slope = P_CheckMissileSpawn(th);

  002f2	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  002f5	50		 push	 eax
  002f6	e8 00 00 00 00	 call	 _P_CheckMissileSpawn
  002fb	83 c4 04	 add	 esp, 4
  002fe	89 45 e8	 mov	 DWORD PTR _slope$[ebp], eax

; 8819 : 
; 8820 : 	return slope ? th : NULL;

  00301	83 7d e8 00	 cmp	 DWORD PTR _slope$[ebp], 0
  00305	74 08		 je	 SHORT $LN15@P_SPMAngle
  00307	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0030a	89 45 a4	 mov	 DWORD PTR tv222[ebp], eax
  0030d	eb 07		 jmp	 SHORT $LN16@P_SPMAngle
$LN15@P_SPMAngle:
  0030f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], 0
$LN16@P_SPMAngle:
  00316	8b 45 a4	 mov	 eax, DWORD PTR tv222[ebp]

; 8821 : }

  00319	5f		 pop	 edi
  0031a	5e		 pop	 esi
  0031b	5b		 pop	 ebx
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c3		 ret	 0
_P_SPMAngle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnXYZMissile
_TEXT	SEGMENT
tv159 = -84						; size = 4
_speed$ = -16						; size = 4
_dist$ = -12						; size = 4
_an$ = -8						; size = 4
_th$ = -4						; size = 4
_source$ = 8						; size = 4
_dest$ = 12						; size = 4
_type$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_z$ = 28						; size = 4
_P_SpawnXYZMissile PROC					; COMDAT

; 8592 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8593 : 	mobj_t *th;
; 8594 : 	angle_t an;
; 8595 : 	INT32 dist;
; 8596 : 	fixed_t speed;
; 8597 : 
; 8598 : 	I_Assert(source != NULL);
; 8599 : 	I_Assert(dest != NULL);
; 8600 : 
; 8601 : 	th = P_SpawnMobj(x, y, z, type);

  00009	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 1c	 mov	 ecx, DWORD PTR _z$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 18	 mov	 edx, DWORD PTR _y$[ebp]
  00014	52		 push	 edx
  00015	8b 45 14	 mov	 eax, DWORD PTR _x$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _P_SpawnMobj
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
  00021	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax

; 8602 : 
; 8603 : 	speed = th->info->speed;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00027	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0002d	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00030	89 55 f0	 mov	 DWORD PTR _speed$[ebp], edx

; 8604 : 
; 8605 : 	if (speed == 0) // Backwards compatibility with 1.09.2

  00033	83 7d f0 00	 cmp	 DWORD PTR _speed$[ebp], 0
  00037	75 22		 jne	 SHORT $LN2@P_SpawnXYZ

; 8606 : 	{
; 8607 : 		CONS_Printf("P_SpawnXYZMissile - projectile has 0 speed! (mobj type %d)\nPlease update this SOC.", type);

  00039	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@EJACLLOD@P_SpawnXYZMissile?5?9?5projectile?5@
  00042	e8 00 00 00 00	 call	 _CONS_Printf
  00047	83 c4 08	 add	 esp, 8

; 8608 : 		speed = mobjinfo[MT_ROCKET].speed;

  0004a	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  0004f	6b c8 6c	 imul	 ecx, eax, 108
  00052	8b 91 3c 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+60]
  00058	89 55 f0	 mov	 DWORD PTR _speed$[ebp], edx
$LN2@P_SpawnXYZ:

; 8609 : 	}
; 8610 : 
; 8611 : 	if (th->info->seesound)

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0005e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00064	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00068	74 19		 je	 SHORT $LN3@P_SpawnXYZ

; 8612 : 		S_StartSound(th, th->info->seesound);

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0006d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00073	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _S_StartSound
  00080	83 c4 08	 add	 esp, 8
$LN3@P_SpawnXYZ:

; 8613 : 
; 8614 : 	P_SetTarget(&th->target, source); // where it came from

  00083	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00086	50		 push	 eax
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  0008a	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 _P_SetTarget
  00096	83 c4 08	 add	 esp, 8

; 8615 : 	an = R_PointToAngle2(x, y, dest->x, dest->y);

  00099	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0009c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0009f	51		 push	 ecx
  000a0	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  000a3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a6	50		 push	 eax
  000a7	8b 4d 18	 mov	 ecx, DWORD PTR _y$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 55 14	 mov	 edx, DWORD PTR _x$[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 _R_PointToAngle2
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
  000b7	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax

; 8616 : 
; 8617 : 	th->angle = an;

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  000bd	8b 4d f8	 mov	 ecx, DWORD PTR _an$[ebp]
  000c0	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 8618 : 	an >>= ANGLETOFINESHIFT;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  000c6	c1 e8 13	 shr	 eax, 19			; 00000013H
  000c9	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax

; 8619 : 	th->momx = FixedMul(speed, FINECOSINE(an));

  000cc	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  000cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  000d5	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000d8	52		 push	 edx
  000d9	8b 45 f0	 mov	 eax, DWORD PTR _speed$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _FixedMul
  000e2	83 c4 08	 add	 esp, 8
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  000e8	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 8620 : 	th->momy = FixedMul(speed, FINESINE(an));

  000eb	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  000ee	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  000f5	51		 push	 ecx
  000f6	8b 55 f0	 mov	 edx, DWORD PTR _speed$[ebp]
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 _FixedMul
  000ff	83 c4 08	 add	 esp, 8
  00102	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  00105	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 8621 : 
; 8622 : 	dist = P_AproxDistance(dest->x - x, dest->y - y);

  00108	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0010b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0010e	2b 4d 18	 sub	 ecx, DWORD PTR _y$[ebp]
  00111	51		 push	 ecx
  00112	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00115	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00118	2b 45 14	 sub	 eax, DWORD PTR _x$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _P_AproxDistance
  00121	83 c4 08	 add	 esp, 8
  00124	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 8623 : 	dist = dist / speed;

  00127	8b 45 f4	 mov	 eax, DWORD PTR _dist$[ebp]
  0012a	99		 cdq
  0012b	f7 7d f0	 idiv	 DWORD PTR _speed$[ebp]
  0012e	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 8624 : 
; 8625 : 	if (dist < 1)

  00131	83 7d f4 01	 cmp	 DWORD PTR _dist$[ebp], 1
  00135	7d 07		 jge	 SHORT $LN4@P_SpawnXYZ

; 8626 : 		dist = 1;

  00137	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN4@P_SpawnXYZ:

; 8627 : 
; 8628 : 	th->momz = (dest->z - z) / dist;

  0013e	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00141	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00144	2b 45 1c	 sub	 eax, DWORD PTR _z$[ebp]
  00147	99		 cdq
  00148	f7 7d f4	 idiv	 DWORD PTR _dist$[ebp]
  0014b	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  0014e	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 8629 : 
; 8630 : 	if (th->flags & MF_MISSILE)

  00151	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00154	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00157	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  0015d	74 11		 je	 SHORT $LN5@P_SpawnXYZ

; 8631 : 		dist = P_CheckMissileSpawn(th);

  0015f	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _P_CheckMissileSpawn
  00168	83 c4 04	 add	 esp, 4
  0016b	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax
  0016e	eb 07		 jmp	 SHORT $LN6@P_SpawnXYZ
$LN5@P_SpawnXYZ:

; 8632 : 	else
; 8633 : 		dist = 1;

  00170	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN6@P_SpawnXYZ:

; 8634 : 
; 8635 : 	return dist ? th : NULL;

  00177	83 7d f4 00	 cmp	 DWORD PTR _dist$[ebp], 0
  0017b	74 08		 je	 SHORT $LN8@P_SpawnXYZ
  0017d	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00180	89 45 ac	 mov	 DWORD PTR tv159[ebp], eax
  00183	eb 07		 jmp	 SHORT $LN9@P_SpawnXYZ
$LN8@P_SpawnXYZ:
  00185	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN9@P_SpawnXYZ:
  0018c	8b 45 ac	 mov	 eax, DWORD PTR tv159[ebp]

; 8636 : }

  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	5b		 pop	 ebx
  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c3		 ret	 0
_P_SpawnXYZMissile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnMissile
_TEXT	SEGMENT
tv64 = -92						; size = 4
tv219 = -92						; size = 4
_speed$ = -24						; size = 4
_gsf$ = -20						; size = 4
_z$ = -16						; size = 4
_dist$ = -12						; size = 4
_an$ = -8						; size = 4
_th$ = -4						; size = 4
_source$ = 8						; size = 4
_dest$ = 12						; size = 4
_type$ = 16						; size = 4
_P_SpawnMissile PROC					; COMDAT

; 8642 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8643 : 	mobj_t *th;
; 8644 : 	angle_t an;
; 8645 : 	INT32 dist;
; 8646 : 	fixed_t z;
; 8647 : 	const fixed_t gsf = (fixed_t)6;

  00009	c7 45 ec 06 00
	00 00		 mov	 DWORD PTR _gsf$[ebp], 6

; 8648 : 	fixed_t speed;
; 8649 : 
; 8650 : 	I_Assert(source != NULL);
; 8651 : 	I_Assert(dest != NULL);
; 8652 : 	switch (type)

  00010	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  00013	89 45 a4	 mov	 DWORD PTR tv64[ebp], eax
  00016	83 7d a4 6f	 cmp	 DWORD PTR tv64[ebp], 111 ; 0000006fH
  0001a	74 08		 je	 SHORT $LN4@P_SpawnMis
  0001c	83 7d a4 70	 cmp	 DWORD PTR tv64[ebp], 112 ; 00000070H
  00020	74 32		 je	 SHORT $LN7@P_SpawnMis
  00022	eb 44		 jmp	 SHORT $LN8@P_SpawnMis
$LN4@P_SpawnMis:

; 8653 : 	{
; 8654 : 		case MT_JETTBULLET:
; 8655 : 			if (source->type == MT_JETTGUNNER)

  00024	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00027	83 78 7c 07	 cmp	 DWORD PTR [eax+124], 7
  0002b	75 11		 jne	 SHORT $LN5@P_SpawnMis

; 8656 : 				z = source->z - 12*FRACUNIT;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00030	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00033	81 e9 00 00 0c
	00		 sub	 ecx, 786432		; 000c0000H
  00039	89 4d f0	 mov	 DWORD PTR _z$[ebp], ecx
  0003c	eb 14		 jmp	 SHORT $LN6@P_SpawnMis
$LN5@P_SpawnMis:

; 8657 : 			else
; 8658 : 				z = source->z + source->height/2;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00041	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00044	99		 cdq
  00045	2b c2		 sub	 eax, edx
  00047	d1 f8		 sar	 eax, 1
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0004c	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0004f	89 45 f0	 mov	 DWORD PTR _z$[ebp], eax
$LN6@P_SpawnMis:

; 8659 : 			break;

  00052	eb 23		 jmp	 SHORT $LN2@P_SpawnMis
$LN7@P_SpawnMis:

; 8660 : 		case MT_TURRETLASER:
; 8661 : 			z = source->z + source->height/2;

  00054	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00057	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0005a	99		 cdq
  0005b	2b c2		 sub	 eax, edx
  0005d	d1 f8		 sar	 eax, 1
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00062	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00065	89 45 f0	 mov	 DWORD PTR _z$[ebp], eax
$LN8@P_SpawnMis:

; 8662 : 		default:
; 8663 : 			z = source->z + 32*FRACUNIT;

  00068	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0006b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0006e	81 c1 00 00 20
	00		 add	 ecx, 2097152		; 00200000H
  00074	89 4d f0	 mov	 DWORD PTR _z$[ebp], ecx
$LN2@P_SpawnMis:

; 8664 : 			break;
; 8665 : 	}
; 8666 : 
; 8667 : 	th = P_SpawnMobj(source->x, source->y, z, type);

  00077	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _z$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00082	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00089	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 _P_SpawnMobj
  00092	83 c4 10	 add	 esp, 16			; 00000010H
  00095	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax

; 8668 : 
; 8669 : 	speed = th->info->speed;

  00098	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0009b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000a1	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a4	89 55 e8	 mov	 DWORD PTR _speed$[ebp], edx

; 8670 : 
; 8671 : 	if (speed == 0) // Backwards compatibility with 1.09.2

  000a7	83 7d e8 00	 cmp	 DWORD PTR _speed$[ebp], 0
  000ab	75 22		 jne	 SHORT $LN9@P_SpawnMis

; 8672 : 	{
; 8673 : 		CONS_Printf("P_SpawnMissile - projectile has 0 speed! (mobj type %d)\nPlease update this SOC.", type);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@LBLLDKIN@P_SpawnMissile?5?9?5projectile?5has@
  000b6	e8 00 00 00 00	 call	 _CONS_Printf
  000bb	83 c4 08	 add	 esp, 8

; 8674 : 		speed = mobjinfo[MT_TURRETLASER].speed;

  000be	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  000c3	6b c8 70	 imul	 ecx, eax, 112
  000c6	8b 91 3c 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+60]
  000cc	89 55 e8	 mov	 DWORD PTR _speed$[ebp], edx
$LN9@P_SpawnMis:

; 8675 : 	}
; 8676 : 
; 8677 : 	if (th->info->seesound)

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  000d2	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d8	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  000dc	74 19		 je	 SHORT $LN10@P_SpawnMis

; 8678 : 		S_StartSound(source, th->info->seesound);

  000de	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  000e1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ea	52		 push	 edx
  000eb	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 _S_StartSound
  000f4	83 c4 08	 add	 esp, 8
$LN10@P_SpawnMis:

; 8679 : 
; 8680 : 	P_SetTarget(&th->target, source); // where it came from

  000f7	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000fa	50		 push	 eax
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  000fe	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 _P_SetTarget
  0010a	83 c4 08	 add	 esp, 8

; 8681 : 
; 8682 : 	if (type == MT_TURRETLASER) // More accurate!

  0010d	83 7d 10 70	 cmp	 DWORD PTR _type$[ebp], 112 ; 00000070H
  00111	75 3d		 jne	 SHORT $LN11@P_SpawnMis

; 8683 : 		an = R_PointToAngle2(source->x, source->y,

  00113	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00116	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00119	0f af 4d ec	 imul	 ecx, DWORD PTR _gsf$[ebp]
  0011d	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00120	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  00123	51		 push	 ecx
  00124	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00127	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0012a	0f af 4d ec	 imul	 ecx, DWORD PTR _gsf$[ebp]
  0012e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00131	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00134	51		 push	 ecx
  00135	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00138	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0013b	51		 push	 ecx
  0013c	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0013f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 _R_PointToAngle2
  00148	83 c4 10	 add	 esp, 16			; 00000010H
  0014b	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax
  0014e	eb 27		 jmp	 SHORT $LN12@P_SpawnMis
$LN11@P_SpawnMis:

; 8684 : 			dest->x + (dest->momx*gsf),
; 8685 : 			dest->y + (dest->momy*gsf));
; 8686 : 	else
; 8687 : 		an = R_PointToAngle2(source->x, source->y, dest->x, dest->y);

  00150	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00153	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00156	51		 push	 ecx
  00157	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0015a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0015d	50		 push	 eax
  0015e	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00161	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00164	52		 push	 edx
  00165	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00168	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0016b	51		 push	 ecx
  0016c	e8 00 00 00 00	 call	 _R_PointToAngle2
  00171	83 c4 10	 add	 esp, 16			; 00000010H
  00174	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax
$LN12@P_SpawnMis:

; 8688 : 
; 8689 : 	th->angle = an;

  00177	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  0017a	8b 4d f8	 mov	 ecx, DWORD PTR _an$[ebp]
  0017d	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 8690 : 	an >>= ANGLETOFINESHIFT;

  00180	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  00183	c1 e8 13	 shr	 eax, 19			; 00000013H
  00186	89 45 f8	 mov	 DWORD PTR _an$[ebp], eax

; 8691 : 	th->momx = FixedMul(speed, FINECOSINE(an));

  00189	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00192	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00195	52		 push	 edx
  00196	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 _FixedMul
  0019f	83 c4 08	 add	 esp, 8
  001a2	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  001a5	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 8692 : 	th->momy = FixedMul(speed, FINESINE(an));

  001a8	8b 45 f8	 mov	 eax, DWORD PTR _an$[ebp]
  001ab	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  001b2	51		 push	 ecx
  001b3	8b 55 e8	 mov	 edx, DWORD PTR _speed$[ebp]
  001b6	52		 push	 edx
  001b7	e8 00 00 00 00	 call	 _FixedMul
  001bc	83 c4 08	 add	 esp, 8
  001bf	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  001c2	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 8693 : 
; 8694 : 	if (type == MT_TURRETLASER) // More accurate!

  001c5	83 7d 10 70	 cmp	 DWORD PTR _type$[ebp], 112 ; 00000070H
  001c9	75 3f		 jne	 SHORT $LN13@P_SpawnMis

; 8695 : 		dist = P_AproxDistance(dest->x+(dest->momx*gsf) - source->x, dest->y+(dest->momy*gsf) - source->y);

  001cb	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  001ce	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  001d1	0f af 4d ec	 imul	 ecx, DWORD PTR _gsf$[ebp]
  001d5	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  001d8	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001db	03 c1		 add	 eax, ecx
  001dd	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  001e0	2b 41 14	 sub	 eax, DWORD PTR [ecx+20]
  001e3	50		 push	 eax
  001e4	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  001e7	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  001ea	0f af 45 ec	 imul	 eax, DWORD PTR _gsf$[ebp]
  001ee	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  001f1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001f4	03 d0		 add	 edx, eax
  001f6	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  001f9	2b 50 10	 sub	 edx, DWORD PTR [eax+16]
  001fc	52		 push	 edx
  001fd	e8 00 00 00 00	 call	 _P_AproxDistance
  00202	83 c4 08	 add	 esp, 8
  00205	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax
  00208	eb 25		 jmp	 SHORT $LN14@P_SpawnMis
$LN13@P_SpawnMis:

; 8696 : 	else
; 8697 : 		dist = P_AproxDistance(dest->x - source->x, dest->y - source->y);

  0020a	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0020d	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00210	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00213	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00216	52		 push	 edx
  00217	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0021a	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0021d	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00220	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00223	52		 push	 edx
  00224	e8 00 00 00 00	 call	 _P_AproxDistance
  00229	83 c4 08	 add	 esp, 8
  0022c	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax
$LN14@P_SpawnMis:

; 8698 : 
; 8699 : 	dist = dist / speed;

  0022f	8b 45 f4	 mov	 eax, DWORD PTR _dist$[ebp]
  00232	99		 cdq
  00233	f7 7d e8	 idiv	 DWORD PTR _speed$[ebp]
  00236	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 8700 : 
; 8701 : 	if (dist < 1)

  00239	83 7d f4 01	 cmp	 DWORD PTR _dist$[ebp], 1
  0023d	7d 07		 jge	 SHORT $LN15@P_SpawnMis

; 8702 : 		dist = 1;

  0023f	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN15@P_SpawnMis:

; 8703 : 
; 8704 : 	if (type == MT_TURRETLASER) // More accurate!

  00246	83 7d 10 70	 cmp	 DWORD PTR _type$[ebp], 112 ; 00000070H
  0024a	75 21		 jne	 SHORT $LN16@P_SpawnMis

; 8705 : 		th->momz = (dest->z + (dest->momz*gsf) - z) / dist;

  0024c	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0024f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00252	0f af 4d ec	 imul	 ecx, DWORD PTR _gsf$[ebp]
  00256	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00259	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0025c	03 c1		 add	 eax, ecx
  0025e	2b 45 f0	 sub	 eax, DWORD PTR _z$[ebp]
  00261	99		 cdq
  00262	f7 7d f4	 idiv	 DWORD PTR _dist$[ebp]
  00265	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  00268	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  0026b	eb 13		 jmp	 SHORT $LN17@P_SpawnMis
$LN16@P_SpawnMis:

; 8706 : 	else
; 8707 : 		th->momz = (dest->z - z) / dist;

  0026d	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00270	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00273	2b 45 f0	 sub	 eax, DWORD PTR _z$[ebp]
  00276	99		 cdq
  00277	f7 7d f4	 idiv	 DWORD PTR _dist$[ebp]
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _th$[ebp]
  0027d	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN17@P_SpawnMis:

; 8708 : 
; 8709 : 	dist = P_CheckMissileSpawn(th);

  00280	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 _P_CheckMissileSpawn
  00289	83 c4 04	 add	 esp, 4
  0028c	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 8710 : 	return dist ? th : NULL;

  0028f	83 7d f4 00	 cmp	 DWORD PTR _dist$[ebp], 0
  00293	74 08		 je	 SHORT $LN19@P_SpawnMis
  00295	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00298	89 45 a4	 mov	 DWORD PTR tv219[ebp], eax
  0029b	eb 07		 jmp	 SHORT $LN20@P_SpawnMis
$LN19@P_SpawnMis:
  0029d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv219[ebp], 0
$LN20@P_SpawnMis:
  002a4	8b 45 a4	 mov	 eax, DWORD PTR tv219[ebp]

; 8711 : }

  002a7	5f		 pop	 edi
  002a8	5e		 pop	 esi
  002a9	5b		 pop	 ebx
  002aa	8b e5		 mov	 esp, ebp
  002ac	5d		 pop	 ebp
  002ad	c3		 ret	 0
_P_SpawnMissile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_InsideANonSolidFFloor
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_rover$ = 12						; size = 4
_P_InsideANonSolidFFloor PROC				; COMDAT

; 534  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 535  : 	if (!(rover->flags & FF_EXISTS))

  00009	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  0000c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0000f	83 e1 01	 and	 ecx, 1
  00012	75 04		 jne	 SHORT $LN2@P_InsideAN

; 536  : 		return false;

  00014	33 c0		 xor	 eax, eax
  00016	eb 64		 jmp	 SHORT $LN1@P_InsideAN
$LN2@P_InsideAN:

; 537  : 
; 538  : 	if ((((rover->flags & FF_BLOCKPLAYER) && mobj->player)
; 539  : 		|| ((rover->flags & FF_BLOCKOTHERS) && !mobj->player)))

  00018	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  0001b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0001e	83 e1 02	 and	 ecx, 2
  00021	74 0c		 je	 SHORT $LN5@P_InsideAN
  00023	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00026	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0002d	75 17		 jne	 SHORT $LN4@P_InsideAN
$LN5@P_InsideAN:
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  00032	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00035	83 e1 04	 and	 ecx, 4
  00038	74 10		 je	 SHORT $LN3@P_InsideAN
  0003a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0003d	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00044	75 04		 jne	 SHORT $LN3@P_InsideAN
$LN4@P_InsideAN:

; 540  : 		return false;

  00046	33 c0		 xor	 eax, eax
  00048	eb 32		 jmp	 SHORT $LN1@P_InsideAN
$LN3@P_InsideAN:

; 541  : 
; 542  : 	if (mobj->z > *rover->topheight)

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00052	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00055	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00057	7e 04		 jle	 SHORT $LN6@P_InsideAN

; 543  : 		return false;

  00059	33 c0		 xor	 eax, eax
  0005b	eb 1f		 jmp	 SHORT $LN1@P_InsideAN
$LN6@P_InsideAN:

; 544  : 
; 545  : 	if (mobj->z + mobj->height < *rover->bottomheight)

  0005d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00060	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00063	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00066	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00069	8b 45 0c	 mov	 eax, DWORD PTR _rover$[ebp]
  0006c	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0006f	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00071	7d 04		 jge	 SHORT $LN7@P_InsideAN

; 546  : 		return false;

  00073	33 c0		 xor	 eax, eax
  00075	eb 05		 jmp	 SHORT $LN1@P_InsideAN
$LN7@P_InsideAN:

; 547  : 
; 548  : 	return true;

  00077	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_InsideAN:

; 549  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_P_InsideANonSolidFFloor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SceneryThinker
_TEXT	SEGMENT
_onmo$1 = -4						; size = 4
_mobj$ = 8						; size = 4
_P_SceneryThinker PROC					; COMDAT

; 6274 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6275 : 	if (mobj->flags & MF_BOXICON)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0000f	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00015	0f 84 82 00 00
	00		 je	 $LN8@P_SceneryT

; 6276 : 	{
; 6277 : 		if (!(mobj->eflags & MFE_VERTICALFLIP))

  0001b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00024	83 e1 20	 and	 ecx, 32			; 00000020H
  00027	75 3a		 jne	 SHORT $LN3@P_SceneryT

; 6278 : 		{
; 6279 : 			if (mobj->z < mobj->floorz + mobj->info->damage)

  00029	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00032	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00035	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00038	03 41 50	 add	 eax, DWORD PTR [ecx+80]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0003e	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00041	7d 14		 jge	 SHORT $LN5@P_SceneryT

; 6280 : 			{
; 6281 : 				mobj->momz = mobj->info->speed;

  00043	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00046	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0004c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0004f	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00052	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 6282 : 			}

  00055	eb 0a		 jmp	 SHORT $LN6@P_SceneryT
$LN5@P_SceneryT:

; 6283 : 			else
; 6284 : 				mobj->momz = 0;

  00057	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0005a	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN6@P_SceneryT:

; 6285 : 		}

  00061	eb 3a		 jmp	 SHORT $LN8@P_SceneryT
$LN3@P_SceneryT:

; 6286 : 		else
; 6287 : 		{
; 6288 : 			if (mobj->z > mobj->ceilingz - mobj->info->damage)

  00063	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00066	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0006f	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00072	2b 41 50	 sub	 eax, DWORD PTR [ecx+80]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00078	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0007b	7e 16		 jle	 SHORT $LN7@P_SceneryT

; 6289 : 			{
; 6290 : 				mobj->momz = -mobj->info->speed;

  0007d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00080	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00086	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00089	f7 da		 neg	 edx
  0008b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0008e	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 6291 : 			}

  00091	eb 0a		 jmp	 SHORT $LN8@P_SceneryT
$LN7@P_SceneryT:

; 6292 : 			else
; 6293 : 				mobj->momz = 0;

  00093	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00096	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN8@P_SceneryT:

; 6294 : 		}
; 6295 : 	}
; 6296 : 
; 6297 : 	// momentum movement
; 6298 : 	if (mobj->momx || mobj->momy)

  0009d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a0	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  000a4	75 09		 jne	 SHORT $LN10@P_SceneryT
  000a6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a9	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000ad	74 1d		 je	 SHORT $LN11@P_SceneryT
$LN10@P_SceneryT:

; 6299 : 	{
; 6300 : 		P_SceneryXYMovement(mobj);

  000af	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _P_SceneryXYMovement
  000b8	83 c4 04	 add	 esp, 4

; 6301 : 
; 6302 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  000bb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000be	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  000c5	75 05		 jne	 SHORT $LN11@P_SceneryT

; 6303 : 			return; // mobj was removed

  000c7	e9 a9 00 00 00	 jmp	 $LN1@P_SceneryT
$LN11@P_SceneryT:

; 6304 : 	}
; 6305 : 
; 6306 : 	// always do the gravity bit now, that's simpler
; 6307 : 	// BUT CheckPosition only if wasn't done before.
; 6308 : 	if (!(mobj->eflags & MFE_ONGROUND) || (mobj->z != mobj->floorz) || mobj->momz)

  000cc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000cf	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000d5	83 e1 01	 and	 ecx, 1
  000d8	74 17		 je	 SHORT $LN14@P_SceneryT
  000da	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000dd	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000e0	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000e3	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  000e6	75 09		 jne	 SHORT $LN14@P_SceneryT
  000e8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000eb	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  000ef	74 63		 je	 SHORT $LN12@P_SceneryT
$LN14@P_SceneryT:

; 6309 : 	{
; 6310 : 		mobj_t *onmo;
; 6311 : 		onmo = P_CheckOnmobj(mobj);

  000f1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _P_CheckOnmobj
  000fa	83 c4 04	 add	 esp, 4
  000fd	89 45 fc	 mov	 DWORD PTR _onmo$1[ebp], eax

; 6312 : 		if (!onmo)

  00100	83 7d fc 00	 cmp	 DWORD PTR _onmo$1[ebp], 0
  00104	75 3e		 jne	 SHORT $LN15@P_SceneryT

; 6313 : 		{
; 6314 : 			P_SceneryZMovement(mobj);

  00106	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 _P_SceneryZMovement
  0010f	83 c4 04	 add	 esp, 4

; 6315 : 			P_CheckPosition(mobj, mobj->x, mobj->y); // Need this to pick up objects!

  00112	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00115	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00118	51		 push	 ecx
  00119	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0011c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0011f	50		 push	 eax
  00120	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 _P_CheckPosition
  00129	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6316 : 			mobj->floorz = tmfloorz;

  0012c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0012f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tmfloorz
  00135	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 6317 : 			mobj->ceilingz = tmceilingz;

  00138	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tmceilingz
  00141	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
$LN15@P_SceneryT:

; 6318 : 		}
; 6319 : 
; 6320 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  00144	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00147	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  0014e	75 02		 jne	 SHORT $LN16@P_SceneryT

; 6321 : 			return; // mobj was removed

  00150	eb 23		 jmp	 SHORT $LN1@P_SceneryT
$LN16@P_SceneryT:

; 6322 : 	}

  00152	eb 15		 jmp	 SHORT $LN13@P_SceneryT
$LN12@P_SceneryT:

; 6323 : 	else
; 6324 : 		mobj->eflags &= ~MFE_JUSTHITFLOOR;

  00154	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00157	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0015d	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00160	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00163	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN13@P_SceneryT:

; 6325 : 
; 6326 : 	P_CycleMobjState(mobj);

  00169	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _P_CycleMobjState
  00172	83 c4 04	 add	 esp, 4
$LN1@P_SceneryT:

; 6327 : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
_P_SceneryThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_PushableThinker
_TEXT	SEGMENT
tv140 = -96						; size = 4
_ss$1 = -28						; size = 4
_z$2 = -24						; size = 4
_y$3 = -20						; size = 4
_x$4 = -16						; size = 4
_spawnmo$5 = -12					; size = 4
_sec2$6 = -8						; size = 4
_sec$ = -4						; size = 4
_mobj$ = 8						; size = 4
_P_PushableThinker PROC					; COMDAT

; 6209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6210 : 	sector_t *sec;
; 6211 : 
; 6212 : 	sec = mobj->subsector->sector;

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 55 fc	 mov	 DWORD PTR _sec$[ebp], edx

; 6213 : 
; 6214 : 	if (GETSECSPECIAL(sec->special, 2) == 1 && mobj->z == sec->floorheight)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _sec$[ebp]
  00017	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  0001b	c1 f9 04	 sar	 ecx, 4
  0001e	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00021	83 f9 01	 cmp	 ecx, 1
  00024	75 25		 jne	 SHORT $LN4@P_Pushable
  00026	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _sec$[ebp]
  0002c	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0002f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00031	75 18		 jne	 SHORT $LN4@P_Pushable

; 6215 : 		P_LinedefExecute(sec->tag, mobj, sec);

  00033	8b 45 fc	 mov	 eax, DWORD PTR _sec$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _sec$[ebp]
  0003e	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _P_LinedefExecute
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@P_Pushable:

; 6216 : //	else if (GETSECSPECIAL(sec->special, 2) == 8)
; 6217 : 	{
; 6218 : 		sector_t *sec2;
; 6219 : 
; 6220 : 		sec2 = P_ThingOnSpecial3DFloor(mobj);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _P_ThingOnSpecial3DFloor
  00054	83 c4 04	 add	 esp, 4
  00057	89 45 f8	 mov	 DWORD PTR _sec2$6[ebp], eax

; 6221 : 		if (sec2 && GETSECSPECIAL(sec2->special, 2) == 1)

  0005a	83 7d f8 00	 cmp	 DWORD PTR _sec2$6[ebp], 0
  0005e	74 2a		 je	 SHORT $LN5@P_Pushable
  00060	8b 45 f8	 mov	 eax, DWORD PTR _sec2$6[ebp]
  00063	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  00067	c1 f9 04	 sar	 ecx, 4
  0006a	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0006d	83 f9 01	 cmp	 ecx, 1
  00070	75 18		 jne	 SHORT $LN5@P_Pushable

; 6222 : 			P_LinedefExecute(sec2->tag, mobj, sec2);

  00072	8b 45 f8	 mov	 eax, DWORD PTR _sec2$6[ebp]
  00075	50		 push	 eax
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 f8	 mov	 edx, DWORD PTR _sec2$6[ebp]
  0007d	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _P_LinedefExecute
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@P_Pushable:

; 6223 : 	}
; 6224 : 
; 6225 : 	// it has to be pushable RIGHT NOW for this part to happen
; 6226 : 	if (mobj->flags & MF_PUSHABLE && !(mobj->momx || mobj->momy))

  0008a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0008d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00090	83 e1 40	 and	 ecx, 64			; 00000040H
  00093	74 2e		 je	 SHORT $LN6@P_Pushable
  00095	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00098	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0009c	75 25		 jne	 SHORT $LN6@P_Pushable
  0009e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a1	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000a5	75 1c		 jne	 SHORT $LN6@P_Pushable

; 6227 : 		P_TryMove(mobj, mobj->x, mobj->y, true);

  000a7	6a 01		 push	 1
  000a9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ac	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000af	51		 push	 ecx
  000b0	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000b3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000b6	50		 push	 eax
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 _P_TryMove
  000c0	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@P_Pushable:

; 6228 : 
; 6229 : 	if (mobj->fuse == 1) // it would explode in the MobjThinker code

  000c3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c6	83 b8 bc 00 00
	00 01		 cmp	 DWORD PTR [eax+188], 1
  000cd	0f 85 2c 01 00
	00		 jne	 $LN2@P_Pushable

; 6230 : 	{
; 6231 : 		mobj_t *spawnmo;
; 6232 : 		fixed_t x, y, z;
; 6233 : 		subsector_t *ss;
; 6234 : 
; 6235 : 		// Left here just in case we'd
; 6236 : 		// want to make pushable bombs
; 6237 : 		// or something in the future.
; 6238 : 		switch (mobj->type)

  000d3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d6	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000d9	89 4d a0	 mov	 DWORD PTR tv140[ebp], ecx
  000dc	83 7d a0 7b	 cmp	 DWORD PTR tv140[ebp], 123 ; 0000007bH
  000e0	74 0e		 je	 SHORT $LN8@P_Pushable
  000e2	81 7d a0 9a 00
	00 00		 cmp	 DWORD PTR tv140[ebp], 154 ; 0000009aH
  000e9	74 05		 je	 SHORT $LN8@P_Pushable
  000eb	e9 0f 01 00 00	 jmp	 $LN13@P_Pushable
$LN8@P_Pushable:

; 6239 : 		{
; 6240 : 			case MT_SNOWMAN:
; 6241 : 			case MT_GARGOYLE:
; 6242 : 				x = mobj->spawnpoint->x << FRACBITS;

  000f0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000f9	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  000fc	c1 e2 10	 shl	 edx, 16			; 00000010H
  000ff	89 55 f0	 mov	 DWORD PTR _x$4[ebp], edx

; 6243 : 				y = mobj->spawnpoint->y << FRACBITS;

  00102	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00105	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0010b	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  0010f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00112	89 55 ec	 mov	 DWORD PTR _y$3[ebp], edx

; 6244 : 
; 6245 : 				ss = R_PointInSubsector(x, y);

  00115	8b 45 ec	 mov	 eax, DWORD PTR _y$3[ebp]
  00118	50		 push	 eax
  00119	8b 4d f0	 mov	 ecx, DWORD PTR _x$4[ebp]
  0011c	51		 push	 ecx
  0011d	e8 00 00 00 00	 call	 _R_PointInSubsector
  00122	83 c4 08	 add	 esp, 8
  00125	89 45 e4	 mov	 DWORD PTR _ss$1[ebp], eax

; 6246 : 
; 6247 : 				if (mobj->spawnpoint->z != 0)

  00128	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0012b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00131	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  00135	85 d2		 test	 edx, edx
  00137	74 15		 je	 SHORT $LN10@P_Pushable

; 6248 : 					z = mobj->spawnpoint->z << FRACBITS;

  00139	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0013c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00142	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  00146	c1 e2 10	 shl	 edx, 16			; 00000010H
  00149	89 55 e8	 mov	 DWORD PTR _z$2[ebp], edx
  0014c	eb 0a		 jmp	 SHORT $LN11@P_Pushable
$LN10@P_Pushable:

; 6249 : 				else
; 6250 : 					z = ss->sector->floorheight;

  0014e	8b 45 e4	 mov	 eax, DWORD PTR _ss$1[ebp]
  00151	8b 08		 mov	 ecx, DWORD PTR [eax]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	89 55 e8	 mov	 DWORD PTR _z$2[ebp], edx
$LN11@P_Pushable:

; 6251 : 
; 6252 : 				spawnmo = P_SpawnMobj(x, y, z, mobj->type);

  00158	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015b	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0015e	51		 push	 ecx
  0015f	8b 55 e8	 mov	 edx, DWORD PTR _z$2[ebp]
  00162	52		 push	 edx
  00163	8b 45 ec	 mov	 eax, DWORD PTR _y$3[ebp]
  00166	50		 push	 eax
  00167	8b 4d f0	 mov	 ecx, DWORD PTR _x$4[ebp]
  0016a	51		 push	 ecx
  0016b	e8 00 00 00 00	 call	 _P_SpawnMobj
  00170	83 c4 10	 add	 esp, 16			; 00000010H
  00173	89 45 f4	 mov	 DWORD PTR _spawnmo$5[ebp], eax

; 6253 : 				spawnmo->spawnpoint = mobj->spawnpoint;

  00176	8b 45 f4	 mov	 eax, DWORD PTR _spawnmo$5[ebp]
  00179	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0017c	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00182	89 90 ac 00 00
	00		 mov	 DWORD PTR [eax+172], edx

; 6254 : 				P_SetMobjState(mobj, S_DISS);

  00188	68 4f 06 00 00	 push	 1615			; 0000064fH
  0018d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 _P_SetMobjState
  00196	83 c4 08	 add	 esp, 8

; 6255 : 				P_UnsetThingPosition(spawnmo);

  00199	8b 45 f4	 mov	 eax, DWORD PTR _spawnmo$5[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  001a2	83 c4 04	 add	 esp, 4

; 6256 : 				if (sector_list)

  001a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sector_list, 0
  001ac	74 18		 je	 SHORT $LN12@P_Pushable

; 6257 : 				{
; 6258 : 					P_DelSeclist(sector_list);

  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _sector_list
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 _P_DelSeclist
  001b9	83 c4 04	 add	 esp, 4

; 6259 : 					sector_list = NULL;

  001bc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sector_list, 0
$LN12@P_Pushable:

; 6260 : 				}
; 6261 : 				spawnmo->flags = mobj->flags;

  001c6	8b 45 f4	 mov	 eax, DWORD PTR _spawnmo$5[ebp]
  001c9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001cc	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  001cf	89 50 60	 mov	 DWORD PTR [eax+96], edx

; 6262 : 				P_SetThingPosition(spawnmo);

  001d2	8b 45 f4	 mov	 eax, DWORD PTR _spawnmo$5[ebp]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _P_SetThingPosition
  001db	83 c4 04	 add	 esp, 4

; 6263 : 				spawnmo->flags2 = mobj->flags2;

  001de	8b 45 f4	 mov	 eax, DWORD PTR _spawnmo$5[ebp]
  001e1	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001e4	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  001ea	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 6264 : 				spawnmo->flags |= MF_PUSHABLE;

  001f0	8b 45 f4	 mov	 eax, DWORD PTR _spawnmo$5[ebp]
  001f3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001f6	83 c9 40	 or	 ecx, 64			; 00000040H
  001f9	8b 55 f4	 mov	 edx, DWORD PTR _spawnmo$5[ebp]
  001fc	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN13@P_Pushable:
$LN2@P_Pushable:

; 6265 : 				break;
; 6266 : 			default:
; 6267 : 				break;
; 6268 : 		}
; 6269 : 	}
; 6270 : }

  001ff	5f		 pop	 edi
  00200	5e		 pop	 esi
  00201	5b		 pop	 ebx
  00202	8b e5		 mov	 esp, ebp
  00204	5d		 pop	 ebp
  00205	c3		 ret	 0
_P_PushableThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RailThinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_RailThinker PROC					; COMDAT

; 6185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6186 : 	// momentum movement
; 6187 : 	if (mobj->momx || mobj->momy)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00010	75 09		 jne	 SHORT $LN3@P_RailThin
  00012	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00015	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00019	74 1a		 je	 SHORT $LN4@P_RailThin
$LN3@P_RailThin:

; 6188 : 	{
; 6189 : 		P_XYMovement(mobj);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _P_XYMovement
  00024	83 c4 04	 add	 esp, 4

; 6190 : 
; 6191 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  00027	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002a	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  00031	75 02		 jne	 SHORT $LN4@P_RailThin

; 6192 : 			return; // mobj was removed

  00033	eb 2f		 jmp	 SHORT $LN6@P_RailThin
$LN4@P_RailThin:

; 6193 : 	}
; 6194 : 
; 6195 : 	// always do the gravity bit now, that's simpler
; 6196 : 	// BUT CheckPosition only if wasn't done before.
; 6197 : 	if (mobj->momz)

  00035	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00038	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0003c	74 26		 je	 SHORT $LN6@P_RailThin

; 6198 : 	{
; 6199 : 		P_ZMovement(mobj);

  0003e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _P_ZMovement
  00047	83 c4 04	 add	 esp, 4

; 6200 : 		P_CheckPosition(mobj, mobj->x, mobj->y); // Need this to pick up objects!

  0004a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00050	51		 push	 ecx
  00051	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00054	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 _P_CheckPosition
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@P_RailThin:

; 6201 : 
; 6202 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)
; 6203 : 			return; // mobj was removed
; 6204 : 	}
; 6205 : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_P_RailThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_MobjThinker
_TEXT	SEGMENT
tv136 = -520						; size = 4
tv1457 = -520						; size = 4
tv1729 = -520						; size = 4
tv575 = -520						; size = 4
tv513 = -520						; size = 4
tv213 = -520						; size = 4
_value$1 = -452						; size = 4
_value$2 = -448						; size = 4
_onmo$3 = -444						; size = 4
_numchoices$4 = -440					; size = 4
_increment$5 = -436					; size = 4
_oldi$6 = -432						; size = 4
_i$7 = -428						; size = 4
_spawnchance$8 = -424					; size = 256
_prandom$9 = -165					; size = 1
_newmobj$10 = -164					; size = 4
_flagmo$11 = -160					; size = 4
_z$12 = -156						; size = 4
_y$13 = -152						; size = 4
_x$14 = -148						; size = 4
_ss$15 = -144						; size = 4
_oldval$16 = -140					; size = 4
_missile$17 = -136					; size = 4
_sec2$18 = -132						; size = 4
_fa$19 = -128						; size = 4
_mo2$20 = -124						; size = 4
_z$21 = -120						; size = 4
_y$22 = -116						; size = 4
_x$23 = -112						; size = 4
_ns$24 = -108						; size = 4
_j$25 = -104						; size = 4
_i$26 = -100						; size = 4
_bubble$27 = -96					; size = 4
_hz$28 = -92						; size = 4
_jety$29 = -88						; size = 4
_jetx$30 = -84						; size = 4
_jety$31 = -80						; size = 4
_jetx$32 = -76						; size = 4
_fa$33 = -72						; size = 4
_mo2$34 = -68						; size = 4
_ns$35 = -64						; size = 4
_z$36 = -60						; size = 4
_y$37 = -56						; size = 4
_x$38 = -52						; size = 4
_j$39 = -48						; size = 4
_i$40 = -44						; size = 4
_emerald$41 = -40					; size = 4
_strength$42 = -36					; size = 4
_flame$43 = -32						; size = 4
_strength$44 = -28					; size = 4
_flame$45 = -24						; size = 4
_prandom$46 = -17					; size = 1
_speed$47 = -16						; size = 4
_abspeed$48 = -12					; size = 4
_sec2$49 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mobj$ = 8						; size = 4
_P_MobjThinker PROC					; COMDAT

; 4900 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4901 : 	if (mobj->flags & MF_NOTHINK)

  00016	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00019	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001c	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00022	74 05		 je	 SHORT $LN56@P_MobjThin

; 4902 : 		return;

  00024	e9 58 2b 00 00	 jmp	 $LN54@P_MobjThin
$LN56@P_MobjThin:

; 4903 : 
; 4904 : 	mobj->flags2 &= ~MF2_PUSHED;

  00029	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00032	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00035	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00038	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 4905 : 
; 4906 : 	if (cv_objectplace.value)

  0003e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00045	0f 84 f2 00 00
	00		 je	 $LN69@P_MobjThin

; 4907 : 	{
; 4908 : 		if (mobj->player && mobj->target)

  0004b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004e	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00055	0f 84 94 00 00
	00		 je	 $LN58@P_MobjThin
  0005b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0005e	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00065	0f 84 84 00 00
	00		 je	 $LN58@P_MobjThin

; 4909 : 		{
; 4910 : 			if (mobj->z < mobj->floorz
; 4911 : 			&& mobj->floorz + mobj->target->height <= mobj->ceilingz)

  0006b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00071	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00074	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00077	7d 28		 jge	 SHORT $LN60@P_MobjThin
  00079	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0007c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00082	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00085	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00088	03 41 44	 add	 eax, DWORD PTR [ecx+68]
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0008e	3b 41 3c	 cmp	 eax, DWORD PTR [ecx+60]
  00091	7f 0e		 jg	 SHORT $LN60@P_MobjThin

; 4912 : 				mobj->z = mobj->floorz;

  00093	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00099	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0009c	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0009f	eb 4c		 jmp	 SHORT $LN62@P_MobjThin
$LN60@P_MobjThin:

; 4913 : 			else if (mobj->z > mobj->ceilingz - mobj->target->height
; 4914 : 			&& mobj->floorz + mobj->target->height <= mobj->ceilingz)

  000a1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a4	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000aa	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000ad	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000b0	2b 41 44	 sub	 eax, DWORD PTR [ecx+68]
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000b6	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  000b9	7e 32		 jle	 SHORT $LN62@P_MobjThin
  000bb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000be	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000c4	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000c7	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000ca	03 41 44	 add	 eax, DWORD PTR [ecx+68]
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000d0	3b 41 3c	 cmp	 eax, DWORD PTR [ecx+60]
  000d3	7f 18		 jg	 SHORT $LN62@P_MobjThin

; 4915 : 				mobj->z = mobj->ceilingz - mobj->target->height;

  000d5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d8	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000de	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000e1	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000e4	2b 41 44	 sub	 eax, DWORD PTR [ecx+68]
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000ea	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN62@P_MobjThin:

; 4916 : 		}

  000ed	eb 40		 jmp	 SHORT $LN2@P_MobjThin
$LN58@P_MobjThin:

; 4917 : 		else
; 4918 : 		{
; 4919 : 			switch(mobj->type)

  000ef	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f2	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000f5	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv136[ebp], ecx
  000fb	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR tv136[ebp]
  00101	81 ea 9e 00 00
	00		 sub	 edx, 158		; 0000009eH
  00107	89 95 f8 fd ff
	ff		 mov	 DWORD PTR tv136[ebp], edx
  0010d	83 bd f8 fd ff
	ff 04		 cmp	 DWORD PTR tv136[ebp], 4
  00114	77 19		 ja	 SHORT $LN68@P_MobjThin
  00116	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  0011c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN370@P_MobjThin[eax*4]
$LN63@P_MobjThin:

; 4920 : 			{
; 4921 : 				case MT_BLACKORB:
; 4922 : 				case MT_WHITEORB:
; 4923 : 				case MT_GREENORB:
; 4924 : 				case MT_YELLOWORB:
; 4925 : 				case MT_BLUEORB:
; 4926 : 					P_RemoveMobj(mobj);

  00123	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 _P_RemoveMobj
  0012c	83 c4 04	 add	 esp, 4
$LN68@P_MobjThin:
$LN2@P_MobjThin:

; 4927 : 				default:
; 4928 : 					break;
; 4929 : 			}
; 4930 : 		}
; 4931 : 
; 4932 : 		if (P_FreezeObjectplace())

  0012f	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  00134	85 c0		 test	 eax, eax
  00136	74 05		 je	 SHORT $LN69@P_MobjThin

; 4933 : 			return;

  00138	e9 44 2a 00 00	 jmp	 $LN54@P_MobjThin
$LN69@P_MobjThin:

; 4934 : 	}
; 4935 : 
; 4936 : 	// 970 allows ANY mobj to trigger a linedef exec
; 4937 : 	if (mobj->subsector && GETSECSPECIAL(mobj->subsector->sector->special, 2) == 8)

  0013d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00140	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  00144	74 56		 je	 SHORT $LN71@P_MobjThin
  00146	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00149	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0014c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014e	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  00152	c1 f8 04	 sar	 eax, 4
  00155	83 e0 0f	 and	 eax, 15			; 0000000fH
  00158	83 f8 08	 cmp	 eax, 8
  0015b	75 3f		 jne	 SHORT $LN71@P_MobjThin

; 4938 : 	{
; 4939 : 		sector_t *sec2;
; 4940 : 
; 4941 : 		sec2 = P_ThingOnSpecial3DFloor(mobj);

  0015d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _P_ThingOnSpecial3DFloor
  00166	83 c4 04	 add	 esp, 4
  00169	89 45 f8	 mov	 DWORD PTR _sec2$49[ebp], eax

; 4942 : 		if (sec2 && GETSECSPECIAL(sec2->special, 2) == 1)

  0016c	83 7d f8 00	 cmp	 DWORD PTR _sec2$49[ebp], 0
  00170	74 2a		 je	 SHORT $LN71@P_MobjThin
  00172	8b 45 f8	 mov	 eax, DWORD PTR _sec2$49[ebp]
  00175	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  00179	c1 f9 04	 sar	 ecx, 4
  0017c	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0017f	83 f9 01	 cmp	 ecx, 1
  00182	75 18		 jne	 SHORT $LN71@P_MobjThin

; 4943 : 			P_LinedefExecute(sec2->tag, mobj, sec2);

  00184	8b 45 f8	 mov	 eax, DWORD PTR _sec2$49[ebp]
  00187	50		 push	 eax
  00188	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0018b	51		 push	 ecx
  0018c	8b 55 f8	 mov	 edx, DWORD PTR _sec2$49[ebp]
  0018f	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 _P_LinedefExecute
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN71@P_MobjThin:

; 4944 : 	}
; 4945 : 
; 4946 : 	// Slowly scale up/down to reach your destscale.
; 4947 : 	if (mobj->scale != mobj->destscale)

  0019c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0019f	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  001a6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001a9	0f b7 82 ce 00
	00 00		 movzx	 eax, WORD PTR [edx+206]
  001b0	3b c8		 cmp	 ecx, eax
  001b2	0f 84 d8 00 00
	00		 je	 $LN79@P_MobjThin

; 4948 : 	{
; 4949 : 		const UINT32 abspeed = abs(mobj->scale - mobj->destscale);

  001b8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001bb	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  001c2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001c5	0f b7 82 ce 00
	00 00		 movzx	 eax, WORD PTR [edx+206]
  001cc	2b c8		 sub	 ecx, eax
  001ce	51		 push	 ecx
  001cf	e8 00 00 00 00	 call	 _abs
  001d4	83 c4 04	 add	 esp, 4
  001d7	89 45 f4	 mov	 DWORD PTR _abspeed$48[ebp], eax

; 4950 : 		UINT32 speed = (abspeed>>8);

  001da	8b 45 f4	 mov	 eax, DWORD PTR _abspeed$48[ebp]
  001dd	c1 e8 08	 shr	 eax, 8
  001e0	89 45 f0	 mov	 DWORD PTR _speed$47[ebp], eax

; 4951 : 
; 4952 : 		if (speed > 1)

  001e3	83 7d f0 01	 cmp	 DWORD PTR _speed$47[ebp], 1
  001e7	76 13		 jbe	 SHORT $LN73@P_MobjThin

; 4953 : 			speed *= mobj->scalespeed;

  001e9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ec	0f b6 88 d0 00
	00 00		 movzx	 ecx, BYTE PTR [eax+208]
  001f3	0f af 4d f0	 imul	 ecx, DWORD PTR _speed$47[ebp]
  001f7	89 4d f0	 mov	 DWORD PTR _speed$47[ebp], ecx
  001fa	eb 0d		 jmp	 SHORT $LN74@P_MobjThin
$LN73@P_MobjThin:

; 4954 : 		else
; 4955 : 			speed = mobj->scalespeed;

  001fc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ff	0f b6 88 d0 00
	00 00		 movzx	 ecx, BYTE PTR [eax+208]
  00206	89 4d f0	 mov	 DWORD PTR _speed$47[ebp], ecx
$LN74@P_MobjThin:

; 4956 : 
; 4957 : 		if (abspeed < speed)

  00209	8b 45 f4	 mov	 eax, DWORD PTR _abspeed$48[ebp]
  0020c	3b 45 f0	 cmp	 eax, DWORD PTR _speed$47[ebp]
  0020f	73 19		 jae	 SHORT $LN75@P_MobjThin

; 4958 : 			P_SetScale(mobj, mobj->destscale);

  00211	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00214	0f b7 88 ce 00
	00 00		 movzx	 ecx, WORD PTR [eax+206]
  0021b	51		 push	 ecx
  0021c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0021f	52		 push	 edx
  00220	e8 00 00 00 00	 call	 _P_SetScale
  00225	83 c4 08	 add	 esp, 8
  00228	eb 66		 jmp	 SHORT $LN79@P_MobjThin
$LN75@P_MobjThin:

; 4959 : 		else if (mobj->scale > mobj->destscale)

  0022a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0022d	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00234	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00237	0f b7 82 ce 00
	00 00		 movzx	 eax, WORD PTR [edx+206]
  0023e	3b c8		 cmp	 ecx, eax
  00240	7e 1c		 jle	 SHORT $LN77@P_MobjThin

; 4960 : 			P_SetScale(mobj, (UINT16)(mobj->scale - speed));

  00242	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00245	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0024c	2b 4d f0	 sub	 ecx, DWORD PTR _speed$47[ebp]
  0024f	51		 push	 ecx
  00250	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00253	52		 push	 edx
  00254	e8 00 00 00 00	 call	 _P_SetScale
  00259	83 c4 08	 add	 esp, 8
  0025c	eb 32		 jmp	 SHORT $LN79@P_MobjThin
$LN77@P_MobjThin:

; 4961 : 		else if (mobj->scale < mobj->destscale)

  0025e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00261	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00268	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0026b	0f b7 82 ce 00
	00 00		 movzx	 eax, WORD PTR [edx+206]
  00272	3b c8		 cmp	 ecx, eax
  00274	7d 1a		 jge	 SHORT $LN79@P_MobjThin

; 4962 : 			P_SetScale(mobj, (UINT16)(mobj->scale + speed));

  00276	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00279	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00280	03 4d f0	 add	 ecx, DWORD PTR _speed$47[ebp]
  00283	51		 push	 ecx
  00284	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00287	52		 push	 edx
  00288	e8 00 00 00 00	 call	 _P_SetScale
  0028d	83 c4 08	 add	 esp, 8
$LN79@P_MobjThin:

; 4963 : 	}
; 4964 : 
; 4965 : 	// Special thinker for scenery objects
; 4966 : 	if (mobj->flags & MF_SCENERY)

  00290	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00293	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00296	81 e1 00 00 00
	02		 and	 ecx, 33554432		; 02000000H
  0029c	0f 84 40 07 00
	00		 je	 $LN80@P_MobjThin

; 4967 : 	{
; 4968 : 		switch (mobj->type)

  002a2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002a5	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  002a8	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv213[ebp], ecx
  002ae	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR tv213[ebp]
  002b4	83 ea 42	 sub	 edx, 66			; 00000042H
  002b7	89 95 f8 fd ff
	ff		 mov	 DWORD PTR tv213[ebp], edx
  002bd	81 bd f8 fd ff
	ff b6 00 00 00	 cmp	 DWORD PTR tv213[ebp], 182 ; 000000b6H
  002c7	0f 87 04 07 00
	00		 ja	 $LN146@P_MobjThin
  002cd	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR tv213[ebp]
  002d3	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN371@P_MobjThin[eax]
  002da	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN372@P_MobjThin[ecx*4]
$LN81@P_MobjThin:

; 4969 : 		{
; 4970 : 			case MT_HOOP:
; 4971 : 				if (mobj->fuse > 1)

  002e1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002e4	83 b8 bc 00 00
	00 01		 cmp	 DWORD PTR [eax+188], 1
  002eb	7e 0e		 jle	 SHORT $LN82@P_MobjThin

; 4972 : 					P_MoveHoop(mobj);

  002ed	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002f0	50		 push	 eax
  002f1	e8 00 00 00 00	 call	 _P_MoveHoop
  002f6	83 c4 04	 add	 esp, 4
  002f9	eb 19		 jmp	 SHORT $LN84@P_MobjThin
$LN82@P_MobjThin:

; 4973 : 				else if (mobj->fuse == 1)

  002fb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002fe	83 b8 bc 00 00
	00 01		 cmp	 DWORD PTR [eax+188], 1
  00305	75 0d		 jne	 SHORT $LN84@P_MobjThin

; 4974 : 					mobj->movecount = 1;

  00307	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0030a	c7 80 94 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+148], 1
$LN84@P_MobjThin:

; 4975 : 
; 4976 : 				if (mobj->movecount)

  00314	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00317	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  0031e	74 4d		 je	 SHORT $LN85@P_MobjThin

; 4977 : 				{
; 4978 : 					mobj->fuse++;

  00320	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00323	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00329	83 c1 01	 add	 ecx, 1
  0032c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0032f	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx

; 4979 : 
; 4980 : 					if (mobj->fuse > 32)

  00335	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00338	83 b8 bc 00 00
	00 20		 cmp	 DWORD PTR [eax+188], 32	; 00000020H
  0033f	7e 2a		 jle	 SHORT $LN87@P_MobjThin

; 4981 : 					{
; 4982 : 						if (mobj->target)

  00341	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00344	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0034b	74 12		 je	 SHORT $LN88@P_MobjThin

; 4983 : 							P_RemoveMobj(mobj->target);

  0034d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00350	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00356	51		 push	 ecx
  00357	e8 00 00 00 00	 call	 _P_RemoveMobj
  0035c	83 c4 04	 add	 esp, 4
$LN88@P_MobjThin:

; 4984 : 
; 4985 : 						P_RemoveMobj(mobj);

  0035f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00362	50		 push	 eax
  00363	e8 00 00 00 00	 call	 _P_RemoveMobj
  00368	83 c4 04	 add	 esp, 4
$LN87@P_MobjThin:

; 4986 : 					}
; 4987 : 				}

  0036b	eb 15		 jmp	 SHORT $LN86@P_MobjThin
$LN85@P_MobjThin:

; 4988 : 				else
; 4989 : 					mobj->fuse--;

  0036d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00370	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00376	83 e9 01	 sub	 ecx, 1
  00379	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0037c	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
$LN86@P_MobjThin:

; 4990 : 				return;

  00382	e9 fa 27 00 00	 jmp	 $LN54@P_MobjThin
$LN89@P_MobjThin:

; 4991 : 			case MT_NIGHTSPARKLE:
; 4992 : 				if (mobj->tics != -1)

  00387	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0038a	83 78 58 ff	 cmp	 DWORD PTR [eax+88], -1
  0038e	74 37		 je	 SHORT $LN92@P_MobjThin

; 4993 : 				{
; 4994 : 					mobj->tics--;

  00390	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00393	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00396	83 e9 01	 sub	 ecx, 1
  00399	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0039c	89 4a 58	 mov	 DWORD PTR [edx+88], ecx

; 4995 : 
; 4996 : 					// you can cycle through multiple states in a tic
; 4997 : 					if (!mobj->tics)

  0039f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003a2	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  003a6	75 1f		 jne	 SHORT $LN92@P_MobjThin

; 4998 : 						if (!P_SetMobjState(mobj, mobj->state->nextstate))

  003a8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003ab	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  003ae	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  003b1	52		 push	 edx
  003b2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003b5	50		 push	 eax
  003b6	e8 00 00 00 00	 call	 _P_SetMobjState
  003bb	83 c4 08	 add	 esp, 8
  003be	85 c0		 test	 eax, eax
  003c0	75 05		 jne	 SHORT $LN92@P_MobjThin

; 4999 : 							return; // freed itself

  003c2	e9 ba 27 00 00	 jmp	 $LN54@P_MobjThin
$LN92@P_MobjThin:

; 5000 : 				}
; 5001 : 				if (mobj->flags & MF_SPECIAL)

  003c7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003ca	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  003cd	83 e1 01	 and	 ecx, 1
  003d0	74 05		 je	 SHORT $LN93@P_MobjThin

; 5002 : 					return;

  003d2	e9 aa 27 00 00	 jmp	 $LN54@P_MobjThin
$LN93@P_MobjThin:

; 5003 : 
; 5004 : 				P_UnsetThingPosition(mobj);

  003d7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003da	50		 push	 eax
  003db	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  003e0	83 c4 04	 add	 esp, 4

; 5005 : 				mobj->x += mobj->momx;

  003e3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003e9	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  003ec	03 4a 48	 add	 ecx, DWORD PTR [edx+72]
  003ef	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003f2	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 5006 : 				mobj->y += mobj->momy;

  003f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003f8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003fb	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  003fe	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  00401	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00404	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 5007 : 				mobj->z += mobj->momz;

  00407	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0040a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0040d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00410	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  00413	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00416	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 5008 : 				P_SetThingPosition(mobj);

  00419	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0041c	50		 push	 eax
  0041d	e8 00 00 00 00	 call	 _P_SetThingPosition
  00422	83 c4 04	 add	 esp, 4

; 5009 : 				return;

  00425	e9 57 27 00 00	 jmp	 $LN54@P_MobjThin
$LN94@P_MobjThin:

; 5010 : 			case MT_BLACKORB:
; 5011 : 			case MT_WHITEORB:
; 5012 : 			case MT_GREENORB:
; 5013 : 			case MT_YELLOWORB:
; 5014 : 			case MT_BLUEORB:
; 5015 : 				if (!P_AddShield(mobj))

  0042a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 _P_AddShield
  00433	83 c4 04	 add	 esp, 4
  00436	85 c0		 test	 eax, eax
  00438	75 05		 jne	 SHORT $LN99@P_MobjThin

; 5016 : 					return;

  0043a	e9 42 27 00 00	 jmp	 $LN54@P_MobjThin
$LN99@P_MobjThin:

; 5017 : 				break;

  0043f	e9 8d 05 00 00	 jmp	 $LN4@P_MobjThin
$LN100@P_MobjThin:

; 5018 : 			case MT_WATERDROP:
; 5019 : 				if (mobj->z <= mobj->floorz
; 5020 : 					&& mobj->health > 0)

  00444	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00447	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0044a	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0044d	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00450	7f 65		 jg	 SHORT $LN101@P_MobjThin
  00452	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00455	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0045c	7e 59		 jle	 SHORT $LN101@P_MobjThin

; 5021 : 				{
; 5022 : 					mobj->health = 0;

  0045e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00461	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 5023 : 					P_SetMobjState(mobj, mobj->info->deathstate);

  0046b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0046e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00474	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00477	52		 push	 edx
  00478	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0047b	50		 push	 eax
  0047c	e8 00 00 00 00	 call	 _P_SetMobjState
  00481	83 c4 08	 add	 esp, 8

; 5024 : 					S_StartSound(mobj, mobj->info->deathsound+(P_Random() % mobj->info->mass));

  00484	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00487	8b b0 80 00 00
	00		 mov	 esi, DWORD PTR [eax+128]
  0048d	e8 00 00 00 00	 call	 _P_Random
  00492	0f b6 c0	 movzx	 eax, al
  00495	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00498	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [ecx+128]
  0049e	99		 cdq
  0049f	f7 79 4c	 idiv	 DWORD PTR [ecx+76]
  004a2	03 56 38	 add	 edx, DWORD PTR [esi+56]
  004a5	52		 push	 edx
  004a6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004a9	52		 push	 edx
  004aa	e8 00 00 00 00	 call	 _S_StartSound
  004af	83 c4 08	 add	 esp, 8

; 5025 : 					return;

  004b2	e9 ca 26 00 00	 jmp	 $LN54@P_MobjThin
$LN101@P_MobjThin:

; 5026 : 				}
; 5027 : 				break;

  004b7	e9 15 05 00 00	 jmp	 $LN4@P_MobjThin
$LN102@P_MobjThin:

; 5028 : 			case MT_BUBBLES:
; 5029 : 				P_SceneryCheckWater(mobj);

  004bc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 _P_SceneryCheckWater
  004c5	83 c4 04	 add	 esp, 4

; 5030 : 				break;

  004c8	e9 04 05 00 00	 jmp	 $LN4@P_MobjThin
$LN103@P_MobjThin:

; 5031 : 			case MT_SMALLBUBBLE:
; 5032 : 			case MT_MEDIUMBUBBLE:
; 5033 : 			case MT_EXTRALARGEBUBBLE:	// start bubble dissipate
; 5034 : 				P_SceneryCheckWater(mobj);

  004cd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004d0	50		 push	 eax
  004d1	e8 00 00 00 00	 call	 _P_SceneryCheckWater
  004d6	83 c4 04	 add	 esp, 4

; 5035 : 				if (!(mobj->eflags & MFE_UNDERWATER) || mobj->z + mobj->height >= mobj->ceilingz)

  004d9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004dc	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  004e2	83 e1 08	 and	 ecx, 8
  004e5	74 18		 je	 SHORT $LN107@P_MobjThin
  004e7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004ea	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004ed	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004f0	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  004f3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004f6	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  004f9	0f 8c a0 00 00
	00		 jl	 $LN116@P_MobjThin
$LN107@P_MobjThin:

; 5036 : 				{
; 5037 : 					UINT8 prandom;
; 5038 : 
; 5039 : 					P_SetMobjState(mobj, S_DISS);

  004ff	68 4f 06 00 00	 push	 1615			; 0000064fH
  00504	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00507	50		 push	 eax
  00508	e8 00 00 00 00	 call	 _P_SetMobjState
  0050d	83 c4 08	 add	 esp, 8

; 5040 : 
; 5041 : 					if (mobj->threshold == 42) // Don't make pop sound.

  00510	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00513	83 b8 a0 00 00
	00 2a		 cmp	 DWORD PTR [eax+160], 42	; 0000002aH
  0051a	75 05		 jne	 SHORT $LN108@P_MobjThin

; 5042 : 						break;

  0051c	e9 b0 04 00 00	 jmp	 $LN4@P_MobjThin
$LN108@P_MobjThin:

; 5043 : 
; 5044 : 					prandom = P_Random();

  00521	e8 00 00 00 00	 call	 _P_Random
  00526	88 45 ef	 mov	 BYTE PTR _prandom$46[ebp], al

; 5045 : 
; 5046 : 					if (prandom <= 51)

  00529	0f b6 45 ef	 movzx	 eax, BYTE PTR _prandom$46[ebp]
  0052d	83 f8 33	 cmp	 eax, 51			; 00000033H
  00530	7f 10		 jg	 SHORT $LN109@P_MobjThin

; 5047 : 						S_StartSound(mobj, sfx_bubbl1);

  00532	6a 24		 push	 36			; 00000024H
  00534	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00537	50		 push	 eax
  00538	e8 00 00 00 00	 call	 _S_StartSound
  0053d	83 c4 08	 add	 esp, 8
  00540	eb 5d		 jmp	 SHORT $LN116@P_MobjThin
$LN109@P_MobjThin:

; 5048 : 					else if (prandom <= 102)

  00542	0f b6 45 ef	 movzx	 eax, BYTE PTR _prandom$46[ebp]
  00546	83 f8 66	 cmp	 eax, 102		; 00000066H
  00549	7f 10		 jg	 SHORT $LN111@P_MobjThin

; 5049 : 						S_StartSound(mobj, sfx_bubbl2);

  0054b	6a 25		 push	 37			; 00000025H
  0054d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00550	50		 push	 eax
  00551	e8 00 00 00 00	 call	 _S_StartSound
  00556	83 c4 08	 add	 esp, 8
  00559	eb 44		 jmp	 SHORT $LN116@P_MobjThin
$LN111@P_MobjThin:

; 5050 : 					else if (prandom <= 153)

  0055b	0f b6 45 ef	 movzx	 eax, BYTE PTR _prandom$46[ebp]
  0055f	3d 99 00 00 00	 cmp	 eax, 153		; 00000099H
  00564	7f 10		 jg	 SHORT $LN113@P_MobjThin

; 5051 : 						S_StartSound(mobj, sfx_bubbl3);

  00566	6a 26		 push	 38			; 00000026H
  00568	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0056b	50		 push	 eax
  0056c	e8 00 00 00 00	 call	 _S_StartSound
  00571	83 c4 08	 add	 esp, 8
  00574	eb 29		 jmp	 SHORT $LN116@P_MobjThin
$LN113@P_MobjThin:

; 5052 : 					else if (prandom <= 204)

  00576	0f b6 45 ef	 movzx	 eax, BYTE PTR _prandom$46[ebp]
  0057a	3d cc 00 00 00	 cmp	 eax, 204		; 000000ccH
  0057f	7f 10		 jg	 SHORT $LN115@P_MobjThin

; 5053 : 						S_StartSound(mobj, sfx_bubbl4);

  00581	6a 27		 push	 39			; 00000027H
  00583	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00586	50		 push	 eax
  00587	e8 00 00 00 00	 call	 _S_StartSound
  0058c	83 c4 08	 add	 esp, 8
  0058f	eb 0e		 jmp	 SHORT $LN116@P_MobjThin
$LN115@P_MobjThin:

; 5054 : 					else
; 5055 : 						S_StartSound(mobj, sfx_bubbl5);

  00591	6a 28		 push	 40			; 00000028H
  00593	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00596	50		 push	 eax
  00597	e8 00 00 00 00	 call	 _S_StartSound
  0059c	83 c4 08	 add	 esp, 8
$LN116@P_MobjThin:

; 5056 : 				}
; 5057 : 				if (!(mobj->fuse)) //Bubbles eventually dissipate if they can't reach the surface.

  0059f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005a2	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  005a9	75 13		 jne	 SHORT $LN117@P_MobjThin

; 5058 : 					P_SetMobjState(mobj, S_DISS);

  005ab	68 4f 06 00 00	 push	 1615			; 0000064fH
  005b0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005b3	50		 push	 eax
  005b4	e8 00 00 00 00	 call	 _P_SetMobjState
  005b9	83 c4 08	 add	 esp, 8
  005bc	eb 15		 jmp	 SHORT $LN118@P_MobjThin
$LN117@P_MobjThin:

; 5059 : 				else
; 5060 : 					mobj->fuse--;

  005be	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005c1	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  005c7	83 e9 01	 sub	 ecx, 1
  005ca	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  005cd	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
$LN118@P_MobjThin:

; 5061 : 				break;

  005d3	e9 f9 03 00 00	 jmp	 $LN4@P_MobjThin
$LN119@P_MobjThin:

; 5062 : 			case MT_DROWNNUMBERS:
; 5063 : 				if (!mobj->target)

  005d8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005db	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  005e2	75 16		 jne	 SHORT $LN120@P_MobjThin

; 5064 : 				{
; 5065 : 					P_SetMobjState(mobj, S_DISS);

  005e4	68 4f 06 00 00	 push	 1615			; 0000064fH
  005e9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005ec	50		 push	 eax
  005ed	e8 00 00 00 00	 call	 _P_SetMobjState
  005f2	83 c4 08	 add	 esp, 8

; 5066 : 					break;

  005f5	e9 d7 03 00 00	 jmp	 $LN4@P_MobjThin
$LN120@P_MobjThin:

; 5067 : 				}
; 5068 : 				if (!mobj->target->player || !(mobj->target->player->powers[pw_underwater] || mobj->target->player->powers[pw_spacetime]))

  005fa	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005fd	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00603	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0060a	74 3c		 je	 SHORT $LN122@P_MobjThin
  0060c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0060f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00615	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0061b	b8 04 00 00 00	 mov	 eax, 4
  00620	6b c8 06	 imul	 ecx, eax, 6
  00623	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00628	75 34		 jne	 SHORT $LN121@P_MobjThin
  0062a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0062d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00633	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00639	b8 04 00 00 00	 mov	 eax, 4
  0063e	6b c8 07	 imul	 ecx, eax, 7
  00641	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00646	75 16		 jne	 SHORT $LN121@P_MobjThin
$LN122@P_MobjThin:

; 5069 : 				{
; 5070 : 					P_SetMobjState(mobj, S_DISS);

  00648	68 4f 06 00 00	 push	 1615			; 0000064fH
  0064d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00650	50		 push	 eax
  00651	e8 00 00 00 00	 call	 _P_SetMobjState
  00656	83 c4 08	 add	 esp, 8

; 5071 : 					break;

  00659	e9 73 03 00 00	 jmp	 $LN4@P_MobjThin
$LN121@P_MobjThin:

; 5072 : 				}
; 5073 : 				mobj->x = mobj->target->x;

  0065e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00661	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00667	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0066a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0066d	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 5074 : 				mobj->y = mobj->target->y;

  00670	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00673	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00679	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0067c	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0067f	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 5075 : 
; 5076 : 				if (mobj->target->eflags & MFE_VERTICALFLIP)

  00682	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00685	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0068b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00691	83 e2 20	 and	 edx, 32			; 00000020H
  00694	74 20		 je	 SHORT $LN123@P_MobjThin

; 5077 : 					mobj->z = mobj->target->z - 16*FRACUNIT - mobj->height;

  00696	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00699	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0069f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  006a2	81 ea 00 00 10
	00		 sub	 edx, 1048576		; 00100000H
  006a8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006ab	2b 50 44	 sub	 edx, DWORD PTR [eax+68]
  006ae	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006b1	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  006b4	eb 25		 jmp	 SHORT $LN124@P_MobjThin
$LN123@P_MobjThin:

; 5078 : 				else
; 5079 : 					mobj->z = mobj->target->z + (mobj->target->height) + 8*FRACUNIT; // Adjust height for height changes

  006b6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006b9	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  006bf	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  006c2	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  006c8	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  006cb	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  006ce	8d 84 11 00 00
	08 00		 lea	 eax, DWORD PTR [ecx+edx+524288]
  006d5	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  006d8	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN124@P_MobjThin:

; 5080 : 
; 5081 : 				if (mobj->threshold <= 35)

  006db	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006de	83 b8 a0 00 00
	00 23		 cmp	 DWORD PTR [eax+160], 35	; 00000023H
  006e5	7f 1a		 jg	 SHORT $LN125@P_MobjThin

; 5082 : 					mobj->flags2 |= MF2_DONTDRAW;

  006e7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006ea	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  006f0	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  006f6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  006f9	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
  006ff	eb 18		 jmp	 SHORT $LN126@P_MobjThin
$LN125@P_MobjThin:

; 5083 : 				else
; 5084 : 					mobj->flags2 &= ~MF2_DONTDRAW;

  00701	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00704	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0070a	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  00710	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00713	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN126@P_MobjThin:

; 5085 : 				if (mobj->threshold <= 30)

  00719	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0071c	83 b8 a0 00 00
	00 1e		 cmp	 DWORD PTR [eax+160], 30	; 0000001eH
  00723	7f 0d		 jg	 SHORT $LN127@P_MobjThin

; 5086 : 					mobj->threshold = 40;

  00725	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00728	c7 80 a0 00 00
	00 28 00 00 00	 mov	 DWORD PTR [eax+160], 40	; 00000028H
$LN127@P_MobjThin:

; 5087 : 				mobj->threshold--;

  00732	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00735	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0073b	83 e9 01	 sub	 ecx, 1
  0073e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00741	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 5088 : 				break;

  00747	e9 85 02 00 00	 jmp	 $LN4@P_MobjThin
$LN128@P_MobjThin:

; 5089 : 			case MT_FLAMEJET:
; 5090 : 				if ((mobj->flags2 & MF2_FIRING) && (leveltime & 3) == 0)

  0074c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0074f	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00755	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  0075b	0f 84 2c 01 00
	00		 je	 $LN129@P_MobjThin
  00761	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00766	83 e0 03	 and	 eax, 3
  00769	0f 85 1e 01 00
	00		 jne	 $LN129@P_MobjThin

; 5091 : 				{
; 5092 : 					mobj_t *flame;
; 5093 : 					fixed_t strength;
; 5094 : 
; 5095 : 					// Wave the flames back and forth. Reactiontime determines which direction it's going.
; 5096 : 					if (mobj->fuse <= -16)

  0076f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00772	83 b8 bc 00 00
	00 f0		 cmp	 DWORD PTR [eax+188], -16 ; fffffff0H
  00779	7f 0f		 jg	 SHORT $LN130@P_MobjThin

; 5097 : 						mobj->reactiontime = 1;

  0077b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0077e	c7 80 9c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+156], 1
  00788	eb 19		 jmp	 SHORT $LN132@P_MobjThin
$LN130@P_MobjThin:

; 5098 : 					else if (mobj->fuse >= 16)

  0078a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0078d	83 b8 bc 00 00
	00 10		 cmp	 DWORD PTR [eax+188], 16	; 00000010H
  00794	7c 0d		 jl	 SHORT $LN132@P_MobjThin

; 5099 : 						mobj->reactiontime = 0;

  00796	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00799	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0
$LN132@P_MobjThin:

; 5100 : 
; 5101 : 					if (mobj->reactiontime)

  007a3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007a6	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  007ad	74 17		 je	 SHORT $LN133@P_MobjThin

; 5102 : 						mobj->fuse += 2;

  007af	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007b2	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  007b8	83 c1 02	 add	 ecx, 2
  007bb	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007be	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
  007c4	eb 15		 jmp	 SHORT $LN134@P_MobjThin
$LN133@P_MobjThin:

; 5103 : 					else
; 5104 : 						mobj->fuse -= 2;

  007c6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007c9	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  007cf	83 e9 02	 sub	 ecx, 2
  007d2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007d5	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
$LN134@P_MobjThin:

; 5105 : 
; 5106 : 					flame = P_SpawnMobj(mobj->x, mobj->y, mobj->z, MT_FLAMEJETFLAME);

  007db	68 97 00 00 00	 push	 151			; 00000097H
  007e0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007e3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  007e6	51		 push	 ecx
  007e7	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007ea	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  007ed	50		 push	 eax
  007ee	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  007f1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  007f4	52		 push	 edx
  007f5	e8 00 00 00 00	 call	 _P_SpawnMobj
  007fa	83 c4 10	 add	 esp, 16			; 00000010H
  007fd	89 45 e8	 mov	 DWORD PTR _flame$45[ebp], eax

; 5107 : 
; 5108 : 					flame->angle = mobj->angle;

  00800	8b 45 e8	 mov	 eax, DWORD PTR _flame$45[ebp]
  00803	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00806	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00809	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 5109 : 
; 5110 : 					if (mobj->flags & MF_AMBUSH) // Wave up and down instead of side-to-side

  0080c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0080f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00812	83 e1 20	 and	 ecx, 32			; 00000020H
  00815	74 14		 je	 SHORT $LN135@P_MobjThin

; 5111 : 						flame->momz = mobj->fuse << (FRACBITS-2);

  00817	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0081a	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00820	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00823	8b 55 e8	 mov	 edx, DWORD PTR _flame$45[ebp]
  00826	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  00829	eb 21		 jmp	 SHORT $LN136@P_MobjThin
$LN135@P_MobjThin:

; 5112 : 					else
; 5113 : 						flame->angle += FixedAngle(mobj->fuse*FRACUNIT);

  0082b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0082e	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00834	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00837	51		 push	 ecx
  00838	e8 00 00 00 00	 call	 _FixedAngle
  0083d	83 c4 04	 add	 esp, 4
  00840	8b 55 e8	 mov	 edx, DWORD PTR _flame$45[ebp]
  00843	03 42 24	 add	 eax, DWORD PTR [edx+36]
  00846	8b 4d e8	 mov	 ecx, DWORD PTR _flame$45[ebp]
  00849	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN136@P_MobjThin:

; 5114 : 
; 5115 : 					strength = 20*FRACUNIT;

  0084c	c7 45 e4 00 00
	14 00		 mov	 DWORD PTR _strength$44[ebp], 1310720 ; 00140000H

; 5116 : 					strength -= ((20*FRACUNIT)/16)*mobj->movedir;

  00853	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00856	69 88 90 00 00
	00 00 40 01 00	 imul	 ecx, DWORD PTR [eax+144], 81920
  00860	8b 55 e4	 mov	 edx, DWORD PTR _strength$44[ebp]
  00863	2b d1		 sub	 edx, ecx
  00865	89 55 e4	 mov	 DWORD PTR _strength$44[ebp], edx

; 5117 : 
; 5118 : 					P_InstaThrust(flame, flame->angle, strength);

  00868	8b 45 e4	 mov	 eax, DWORD PTR _strength$44[ebp]
  0086b	50		 push	 eax
  0086c	8b 4d e8	 mov	 ecx, DWORD PTR _flame$45[ebp]
  0086f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00872	52		 push	 edx
  00873	8b 45 e8	 mov	 eax, DWORD PTR _flame$45[ebp]
  00876	50		 push	 eax
  00877	e8 00 00 00 00	 call	 _P_InstaThrust
  0087c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5119 : 					S_StartSound(flame, sfx_fire);

  0087f	6a 44		 push	 68			; 00000044H
  00881	8b 45 e8	 mov	 eax, DWORD PTR _flame$45[ebp]
  00884	50		 push	 eax
  00885	e8 00 00 00 00	 call	 _S_StartSound
  0088a	83 c4 08	 add	 esp, 8
$LN129@P_MobjThin:

; 5120 : 				}
; 5121 : 				break;

  0088d	e9 3f 01 00 00	 jmp	 $LN4@P_MobjThin
$LN137@P_MobjThin:

; 5122 : 			case MT_VERTICALFLAMEJET:
; 5123 : 				if ((mobj->flags2 & MF2_FIRING) && (leveltime & 3) == 0)

  00892	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00895	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0089b	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  008a1	0f 84 2a 01 00
	00		 je	 $LN138@P_MobjThin
  008a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  008ac	83 e0 03	 and	 eax, 3
  008af	0f 85 1c 01 00
	00		 jne	 $LN138@P_MobjThin

; 5124 : 				{
; 5125 : 					mobj_t *flame;
; 5126 : 					fixed_t strength;
; 5127 : 
; 5128 : 					// Wave the flames back and forth. Reactiontime determines which direction it's going.
; 5129 : 					if (mobj->fuse <= -16)

  008b5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008b8	83 b8 bc 00 00
	00 f0		 cmp	 DWORD PTR [eax+188], -16 ; fffffff0H
  008bf	7f 0f		 jg	 SHORT $LN139@P_MobjThin

; 5130 : 						mobj->reactiontime = 1;

  008c1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008c4	c7 80 9c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+156], 1
  008ce	eb 19		 jmp	 SHORT $LN141@P_MobjThin
$LN139@P_MobjThin:

; 5131 : 					else if (mobj->fuse >= 16)

  008d0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008d3	83 b8 bc 00 00
	00 10		 cmp	 DWORD PTR [eax+188], 16	; 00000010H
  008da	7c 0d		 jl	 SHORT $LN141@P_MobjThin

; 5132 : 						mobj->reactiontime = 0;

  008dc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008df	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0
$LN141@P_MobjThin:

; 5133 : 
; 5134 : 					if (mobj->reactiontime)

  008e9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008ec	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  008f3	74 17		 je	 SHORT $LN142@P_MobjThin

; 5135 : 						mobj->fuse++;

  008f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008f8	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  008fe	83 c1 01	 add	 ecx, 1
  00901	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00904	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
  0090a	eb 15		 jmp	 SHORT $LN143@P_MobjThin
$LN142@P_MobjThin:

; 5136 : 					else
; 5137 : 						mobj->fuse--;

  0090c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0090f	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00915	83 e9 01	 sub	 ecx, 1
  00918	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0091b	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
$LN143@P_MobjThin:

; 5138 : 
; 5139 : 					flame = P_SpawnMobj(mobj->x, mobj->y, mobj->z, MT_FLAMEJETFLAME);

  00921	68 97 00 00 00	 push	 151			; 00000097H
  00926	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00929	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0092c	51		 push	 ecx
  0092d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00930	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00933	50		 push	 eax
  00934	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00937	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0093a	52		 push	 edx
  0093b	e8 00 00 00 00	 call	 _P_SpawnMobj
  00940	83 c4 10	 add	 esp, 16			; 00000010H
  00943	89 45 e0	 mov	 DWORD PTR _flame$43[ebp], eax

; 5140 : 
; 5141 : 					strength = 20*FRACUNIT;

  00946	c7 45 dc 00 00
	14 00		 mov	 DWORD PTR _strength$42[ebp], 1310720 ; 00140000H

; 5142 : 					strength -= ((20*FRACUNIT)/16)*mobj->movedir;

  0094d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00950	69 88 90 00 00
	00 00 40 01 00	 imul	 ecx, DWORD PTR [eax+144], 81920
  0095a	8b 55 dc	 mov	 edx, DWORD PTR _strength$42[ebp]
  0095d	2b d1		 sub	 edx, ecx
  0095f	89 55 dc	 mov	 DWORD PTR _strength$42[ebp], edx

; 5143 : 
; 5144 : 					// If deaf'd, the object spawns on the ceiling.
; 5145 : 					if (mobj->flags & MF_AMBUSH)

  00962	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00965	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00968	83 e1 20	 and	 ecx, 32			; 00000020H
  0096b	74 1f		 je	 SHORT $LN144@P_MobjThin

; 5146 : 					{
; 5147 : 						mobj->z = mobj->ceilingz-mobj->height;

  0096d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00970	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00973	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00976	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  00979	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0097c	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 5148 : 						flame->momz = -strength;

  0097f	8b 45 dc	 mov	 eax, DWORD PTR _strength$42[ebp]
  00982	f7 d8		 neg	 eax
  00984	8b 4d e0	 mov	 ecx, DWORD PTR _flame$43[ebp]
  00987	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 5149 : 					}

  0098a	eb 09		 jmp	 SHORT $LN145@P_MobjThin
$LN144@P_MobjThin:

; 5150 : 					else
; 5151 : 						flame->momz = strength;

  0098c	8b 45 e0	 mov	 eax, DWORD PTR _flame$43[ebp]
  0098f	8b 4d dc	 mov	 ecx, DWORD PTR _strength$42[ebp]
  00992	89 48 50	 mov	 DWORD PTR [eax+80], ecx
$LN145@P_MobjThin:

; 5152 : 					P_InstaThrust(flame, mobj->angle, FixedDiv(mobj->fuse*FRACUNIT,3*FRACUNIT));

  00995	68 00 00 03 00	 push	 196608			; 00030000H
  0099a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0099d	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  009a3	c1 e1 10	 shl	 ecx, 16			; 00000010H
  009a6	51		 push	 ecx
  009a7	e8 00 00 00 00	 call	 _FixedDiv
  009ac	83 c4 08	 add	 esp, 8
  009af	50		 push	 eax
  009b0	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  009b3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  009b6	50		 push	 eax
  009b7	8b 4d e0	 mov	 ecx, DWORD PTR _flame$43[ebp]
  009ba	51		 push	 ecx
  009bb	e8 00 00 00 00	 call	 _P_InstaThrust
  009c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5153 : 					S_StartSound(flame, sfx_fire);

  009c3	6a 44		 push	 68			; 00000044H
  009c5	8b 45 e0	 mov	 eax, DWORD PTR _flame$43[ebp]
  009c8	50		 push	 eax
  009c9	e8 00 00 00 00	 call	 _S_StartSound
  009ce	83 c4 08	 add	 esp, 8
$LN138@P_MobjThin:
$LN146@P_MobjThin:
$LN4@P_MobjThin:

; 5154 : 				}
; 5155 : 				break;
; 5156 : 			default:
; 5157 : 				break;
; 5158 : 		}
; 5159 : 
; 5160 : 		P_SceneryThinker(mobj);

  009d1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  009d4	50		 push	 eax
  009d5	e8 00 00 00 00	 call	 _P_SceneryThinker
  009da	83 c4 04	 add	 esp, 4

; 5161 : 		return;

  009dd	e9 9f 21 00 00	 jmp	 $LN54@P_MobjThin
$LN80@P_MobjThin:

; 5162 : 	}
; 5163 : 
; 5164 : 	// if it's pushable, or if it would be pushable other than temporary disablement, use the
; 5165 : 	// separate thinker
; 5166 : 	if (mobj->flags & MF_PUSHABLE || (mobj->info->flags & MF_PUSHABLE && mobj->fuse))

  009e2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  009e5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  009e8	83 e1 40	 and	 ecx, 64			; 00000040H
  009eb	75 1d		 jne	 SHORT $LN149@P_MobjThin
  009ed	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  009f0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  009f6	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  009f9	83 e2 40	 and	 edx, 64			; 00000040H
  009fc	74 29		 je	 SHORT $LN147@P_MobjThin
  009fe	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a01	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  00a08	74 1d		 je	 SHORT $LN147@P_MobjThin
$LN149@P_MobjThin:

; 5167 : 	{
; 5168 : 		P_MobjCheckWater(mobj);

  00a0a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a0d	50		 push	 eax
  00a0e	e8 00 00 00 00	 call	 _P_MobjCheckWater
  00a13	83 c4 04	 add	 esp, 4

; 5169 : 		P_PushableThinker(mobj);

  00a16	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 _P_PushableThinker
  00a1f	83 c4 04	 add	 esp, 4

; 5170 : 	}

  00a22	e9 6a 13 00 00	 jmp	 $LN8@P_MobjThin
$LN147@P_MobjThin:

; 5171 : 	else if (mobj->flags & MF_BOSS)

  00a27	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a2a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00a2d	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00a33	0f 84 cc 01 00
	00		 je	 $LN150@P_MobjThin

; 5172 : 	{
; 5173 : 		switch (mobj->type)

  00a39	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a3c	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00a3f	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv513[ebp], ecx
  00a45	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR tv513[ebp]
  00a4b	83 ea 1d	 sub	 edx, 29			; 0000001dH
  00a4e	89 95 f8 fd ff
	ff		 mov	 DWORD PTR tv513[ebp], edx
  00a54	83 bd f8 fd ff
	ff 0a		 cmp	 DWORD PTR tv513[ebp], 10 ; 0000000aH
  00a5b	0f 87 4d 01 00
	00		 ja	 $LN162@P_MobjThin
  00a61	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR tv513[ebp]
  00a67	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN373@P_MobjThin[eax]
  00a6e	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN374@P_MobjThin[ecx*4]
$LN152@P_MobjThin:

; 5174 : 		{
; 5175 : 			case MT_EGGMOBILE:
; 5176 : 				if (mobj->health < mobj->info->damage+1 && leveltime & 1 && mobj->health > 0)

  00a75	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a78	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00a7e	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00a81	83 c2 01	 add	 edx, 1
  00a84	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a87	39 90 8c 00 00
	00		 cmp	 DWORD PTR [eax+140], edx
  00a8d	7d 38		 jge	 SHORT $LN153@P_MobjThin
  00a8f	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00a94	83 e0 01	 and	 eax, 1
  00a97	74 2e		 je	 SHORT $LN153@P_MobjThin
  00a99	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a9c	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00aa3	7e 22		 jle	 SHORT $LN153@P_MobjThin

; 5177 : 					P_SpawnMobj(mobj->x, mobj->y, mobj->z, MT_SMOK);

  00aa5	68 b6 00 00 00	 push	 182			; 000000b6H
  00aaa	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00aad	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00ab0	51		 push	 ecx
  00ab1	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00ab4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00ab7	50		 push	 eax
  00ab8	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00abb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00abe	52		 push	 edx
  00abf	e8 00 00 00 00	 call	 _P_SpawnMobj
  00ac4	83 c4 10	 add	 esp, 16			; 00000010H
$LN153@P_MobjThin:

; 5178 : 				if (mobj->flags2 & MF2_SKULLFLY)

  00ac7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00aca	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00ad0	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00ad6	74 0c		 je	 SHORT $LN154@P_MobjThin

; 5179 : 				{
; 5180 : #if 1
; 5181 : 					P_SpawnGhostMobj(mobj);

  00ad8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00adb	50		 push	 eax
  00adc	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  00ae1	83 c4 04	 add	 esp, 4
$LN154@P_MobjThin:

; 5182 : #else
; 5183 : 					mobj_t *spawnmobj;
; 5184 : 					spawnmobj = P_SpawnMobj(mobj->x, mobj->y, mobj->z, mobj->info->painchance);
; 5185 : 					P_SetTarget(&spawnmobj->target, mobj);
; 5186 : 					spawnmobj->flags |= MF_TRANSLATION;
; 5187 : 					spawnmobj->color = 1;
; 5188 : #endif
; 5189 : 				}
; 5190 : 				P_Boss1Thinker(mobj);

  00ae4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ae7	50		 push	 eax
  00ae8	e8 00 00 00 00	 call	 _P_Boss1Thinker
  00aed	83 c4 04	 add	 esp, 4

; 5191 : 				if (mobj->flags2 & MF2_BOSSFLEE)

  00af0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00af3	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00af9	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00aff	74 18		 je	 SHORT $LN155@P_MobjThin

; 5192 : 					P_InstaThrust(mobj, mobj->angle, 12*FRACUNIT);

  00b01	68 00 00 0c 00	 push	 786432			; 000c0000H
  00b06	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b09	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00b0c	51		 push	 ecx
  00b0d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b10	52		 push	 edx
  00b11	e8 00 00 00 00	 call	 _P_InstaThrust
  00b16	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN155@P_MobjThin:

; 5193 : 				break;

  00b19	e9 e2 00 00 00	 jmp	 $LN6@P_MobjThin
$LN156@P_MobjThin:

; 5194 : 			case MT_EGGMOBILE2:
; 5195 : 				P_Boss2Thinker(mobj);

  00b1e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b21	50		 push	 eax
  00b22	e8 00 00 00 00	 call	 _P_Boss2Thinker
  00b27	83 c4 04	 add	 esp, 4

; 5196 : 				if (mobj->flags2 & MF2_BOSSFLEE)

  00b2a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b2d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00b33	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00b39	74 18		 je	 SHORT $LN157@P_MobjThin

; 5197 : 					P_InstaThrust(mobj, mobj->angle, 12*FRACUNIT);

  00b3b	68 00 00 0c 00	 push	 786432			; 000c0000H
  00b40	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b43	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00b46	51		 push	 ecx
  00b47	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b4a	52		 push	 edx
  00b4b	e8 00 00 00 00	 call	 _P_InstaThrust
  00b50	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN157@P_MobjThin:

; 5198 : 				break;

  00b53	e9 a8 00 00 00	 jmp	 $LN6@P_MobjThin
$LN158@P_MobjThin:

; 5199 : 			case MT_EGGMOBILE3:
; 5200 : 				P_Boss3Thinker(mobj);

  00b58	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b5b	50		 push	 eax
  00b5c	e8 00 00 00 00	 call	 _P_Boss3Thinker
  00b61	83 c4 04	 add	 esp, 4

; 5201 : 				break;

  00b64	e9 97 00 00 00	 jmp	 $LN6@P_MobjThin
$LN159@P_MobjThin:

; 5202 : 			case MT_EGGMOBILE4:
; 5203 : 				P_Boss4Thinker(mobj);

  00b69	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b6c	50		 push	 eax
  00b6d	e8 00 00 00 00	 call	 _P_Boss4Thinker
  00b72	83 c4 04	 add	 esp, 4

; 5204 : 				if (mobj->flags2 & MF2_BOSSFLEE)

  00b75	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b78	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00b7e	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00b84	74 18		 je	 SHORT $LN160@P_MobjThin

; 5205 : 					P_InstaThrust(mobj, mobj->angle, 12*FRACUNIT);

  00b86	68 00 00 0c 00	 push	 786432			; 000c0000H
  00b8b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b8e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00b91	51		 push	 ecx
  00b92	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b95	52		 push	 edx
  00b96	e8 00 00 00 00	 call	 _P_InstaThrust
  00b9b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN160@P_MobjThin:

; 5206 : 				break;

  00b9e	eb 60		 jmp	 SHORT $LN6@P_MobjThin
$LN161@P_MobjThin:

; 5207 : 			case MT_BLACKEGGMAN:
; 5208 : 				P_Boss7Thinker(mobj);

  00ba0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ba3	50		 push	 eax
  00ba4	e8 00 00 00 00	 call	 _P_Boss7Thinker
  00ba9	83 c4 04	 add	 esp, 4

; 5209 : 				break;

  00bac	eb 52		 jmp	 SHORT $LN6@P_MobjThin
$LN162@P_MobjThin:

; 5210 : 			default: // Generic SOC-made boss
; 5211 : 				if (mobj->flags2 & MF2_SKULLFLY)

  00bae	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bb1	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00bb7	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00bbd	74 0c		 je	 SHORT $LN163@P_MobjThin

; 5212 : 				{
; 5213 : #if 1
; 5214 : 					P_SpawnGhostMobj(mobj);

  00bbf	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bc2	50		 push	 eax
  00bc3	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  00bc8	83 c4 04	 add	 esp, 4
$LN163@P_MobjThin:

; 5215 : #else
; 5216 : 					mobj_t *spawnmobj;
; 5217 : 					spawnmobj = P_SpawnMobj(mobj->x, mobj->y, mobj->z, mobj->info->painchance);
; 5218 : 					P_SetTarget(&spawnmobj->target, mobj);
; 5219 : 					spawnmobj->flags |= MF_TRANSLATION;
; 5220 : 					spawnmobj->color = 1;
; 5221 : #endif
; 5222 : 				}
; 5223 : 				P_GenericBossThinker(mobj);

  00bcb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bce	50		 push	 eax
  00bcf	e8 00 00 00 00	 call	 _P_GenericBossThinker
  00bd4	83 c4 04	 add	 esp, 4

; 5224 : 				if (mobj->flags2 & MF2_BOSSFLEE)

  00bd7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bda	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00be0	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00be6	74 18		 je	 SHORT $LN164@P_MobjThin

; 5225 : 					P_InstaThrust(mobj, mobj->angle, 12*FRACUNIT);

  00be8	68 00 00 0c 00	 push	 786432			; 000c0000H
  00bed	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bf0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00bf3	51		 push	 ecx
  00bf4	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00bf7	52		 push	 edx
  00bf8	e8 00 00 00 00	 call	 _P_InstaThrust
  00bfd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN164@P_MobjThin:
$LN6@P_MobjThin:

; 5226 : 				break;
; 5227 : 		}
; 5228 : 	}

  00c00	e9 8c 11 00 00	 jmp	 $LN8@P_MobjThin
$LN150@P_MobjThin:

; 5229 : 	else switch (mobj->type)

  00c05	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c08	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00c0b	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv575[ebp], ecx
  00c11	81 bd f8 fd ff
	ff 00 01 00 00	 cmp	 DWORD PTR tv575[ebp], 256 ; 00000100H
  00c1b	7f 34		 jg	 SHORT $LN369@P_MobjThin
  00c1d	81 bd f8 fd ff
	ff 00 01 00 00	 cmp	 DWORD PTR tv575[ebp], 256 ; 00000100H
  00c27	0f 84 c6 06 00
	00		 je	 $LN211@P_MobjThin
  00c2d	81 bd f8 fd ff
	ff fc 00 00 00	 cmp	 DWORD PTR tv575[ebp], 252 ; 000000fcH
  00c37	0f 87 01 11 00
	00		 ja	 $LN269@P_MobjThin
  00c3d	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR tv575[ebp]
  00c43	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN375@P_MobjThin[edx]
  00c4a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN376@P_MobjThin[eax*4]
$LN369@P_MobjThin:
  00c51	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR tv575[ebp]
  00c57	81 e9 1c 01 00
	00		 sub	 ecx, 284		; 0000011cH
  00c5d	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv575[ebp], ecx
  00c63	83 bd f8 fd ff
	ff 0f		 cmp	 DWORD PTR tv575[ebp], 15 ; 0000000fH
  00c6a	0f 87 ce 10 00
	00		 ja	 $LN269@P_MobjThin
  00c70	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR tv575[ebp]
  00c76	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN377@P_MobjThin[edx*4]
$LN165@P_MobjThin:

; 5230 : 	{
; 5231 : 		case MT_ROCKCRUMBLE1:
; 5232 : 		case MT_ROCKCRUMBLE2:
; 5233 : 		case MT_ROCKCRUMBLE3:
; 5234 : 		case MT_ROCKCRUMBLE4:
; 5235 : 		case MT_ROCKCRUMBLE5:
; 5236 : 		case MT_ROCKCRUMBLE6:
; 5237 : 		case MT_ROCKCRUMBLE7:
; 5238 : 		case MT_ROCKCRUMBLE8:
; 5239 : 		case MT_ROCKCRUMBLE9:
; 5240 : 		case MT_ROCKCRUMBLE10:
; 5241 : 		case MT_ROCKCRUMBLE11:
; 5242 : 		case MT_ROCKCRUMBLE12:
; 5243 : 		case MT_ROCKCRUMBLE13:
; 5244 : 		case MT_ROCKCRUMBLE14:
; 5245 : 		case MT_ROCKCRUMBLE15:
; 5246 : 		case MT_ROCKCRUMBLE16:
; 5247 : 			if (mobj->z <= P_FloorzAtPos(mobj->x, mobj->y, mobj->z, mobj->height)
; 5248 : 				&& mobj->state != &states[mobj->info->deathstate])

  00c7d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c80	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00c83	51		 push	 ecx
  00c84	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00c87	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00c8a	50		 push	 eax
  00c8b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00c8e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00c91	52		 push	 edx
  00c92	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c95	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00c98	51		 push	 ecx
  00c99	e8 00 00 00 00	 call	 _P_FloorzAtPos
  00c9e	83 c4 10	 add	 esp, 16			; 00000010H
  00ca1	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00ca4	39 42 18	 cmp	 DWORD PTR [edx+24], eax
  00ca7	7f 39		 jg	 SHORT $LN181@P_MobjThin
  00ca9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00cac	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00cb2	6b 51 30 1c	 imul	 edx, DWORD PTR [ecx+48], 28
  00cb6	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00cbc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00cbf	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00cc2	74 1e		 je	 SHORT $LN181@P_MobjThin

; 5249 : 			{
; 5250 : 				P_SetMobjState(mobj, mobj->info->deathstate);

  00cc4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00cc7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00ccd	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00cd0	52		 push	 edx
  00cd1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00cd4	50		 push	 eax
  00cd5	e8 00 00 00 00	 call	 _P_SetMobjState
  00cda	83 c4 08	 add	 esp, 8

; 5251 : 				return;

  00cdd	e9 9f 1e 00 00	 jmp	 $LN54@P_MobjThin
$LN181@P_MobjThin:

; 5252 : 			}
; 5253 : 			break;

  00ce2	e9 aa 10 00 00	 jmp	 $LN8@P_MobjThin
$LN182@P_MobjThin:

; 5254 : 		case MT_EGGSHIELD:
; 5255 : 			if (!mobj->tracer)

  00ce7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00cea	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00cf1	75 11		 jne	 SHORT $LN183@P_MobjThin

; 5256 : 				P_SetMobjState(mobj, S_DISS);

  00cf3	68 4f 06 00 00	 push	 1615			; 0000064fH
  00cf8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00cfb	50		 push	 eax
  00cfc	e8 00 00 00 00	 call	 _P_SetMobjState
  00d01	83 c4 08	 add	 esp, 8
$LN183@P_MobjThin:

; 5257 : 			break;

  00d04	e9 88 10 00 00	 jmp	 $LN8@P_MobjThin
$LN184@P_MobjThin:

; 5258 : 		case MT_EMERALDSPAWN:
; 5259 : 			if (mobj->threshold)

  00d09	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d0c	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00d13	0f 84 9c 00 00
	00		 je	 $LN186@P_MobjThin

; 5260 : 			{
; 5261 : 				mobj->threshold--;

  00d19	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d1c	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00d22	83 e9 01	 sub	 ecx, 1
  00d25	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00d28	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 5262 : 
; 5263 : 				if (!mobj->threshold && !mobj->target && mobj->reactiontime)

  00d2e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d31	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00d38	75 7b		 jne	 SHORT $LN186@P_MobjThin
  00d3a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d3d	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00d44	75 6f		 jne	 SHORT $LN186@P_MobjThin
  00d46	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d49	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [eax+156], 0
  00d50	74 63		 je	 SHORT $LN186@P_MobjThin

; 5264 : 				{
; 5265 : 					mobj_t *emerald = P_SpawnMobj(mobj->x, mobj->y, mobj->z, mobj->reactiontime);

  00d52	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d55	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00d5b	51		 push	 ecx
  00d5c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00d5f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00d62	50		 push	 eax
  00d63	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00d66	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00d69	52		 push	 edx
  00d6a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d6d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00d70	51		 push	 ecx
  00d71	e8 00 00 00 00	 call	 _P_SpawnMobj
  00d76	83 c4 10	 add	 esp, 16			; 00000010H
  00d79	89 45 d8	 mov	 DWORD PTR _emerald$41[ebp], eax

; 5266 : 					emerald->threshold = 42;

  00d7c	8b 45 d8	 mov	 eax, DWORD PTR _emerald$41[ebp]
  00d7f	c7 80 a0 00 00
	00 2a 00 00 00	 mov	 DWORD PTR [eax+160], 42	; 0000002aH

; 5267 : 					P_SetTarget(&mobj->target, emerald);

  00d89	8b 45 d8	 mov	 eax, DWORD PTR _emerald$41[ebp]
  00d8c	50		 push	 eax
  00d8d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00d90	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00d96	51		 push	 ecx
  00d97	e8 00 00 00 00	 call	 _P_SetTarget
  00d9c	83 c4 08	 add	 esp, 8

; 5268 : 					P_SetTarget(&emerald->target, mobj);

  00d9f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00da2	50		 push	 eax
  00da3	8b 4d d8	 mov	 ecx, DWORD PTR _emerald$41[ebp]
  00da6	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00dac	51		 push	 ecx
  00dad	e8 00 00 00 00	 call	 _P_SetTarget
  00db2	83 c4 08	 add	 esp, 8
$LN186@P_MobjThin:

; 5269 : 				}
; 5270 : 			}
; 5271 : 			break;

  00db5	e9 d7 0f 00 00	 jmp	 $LN8@P_MobjThin
$LN187@P_MobjThin:

; 5272 : 		case MT_EGGTRAP: // Egg Capsule animal release
; 5273 : 			if (mobj->fuse > 0 && mobj->fuse < 2*TICRATE-(TICRATE/7)
; 5274 : 				&& (mobj->fuse & 3))

  00dba	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00dbd	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  00dc4	0f 8e 1c 02 00
	00		 jle	 $LN188@P_MobjThin
  00dca	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00dcd	83 b8 bc 00 00
	00 41		 cmp	 DWORD PTR [eax+188], 65	; 00000041H
  00dd4	0f 8d 0c 02 00
	00		 jge	 $LN188@P_MobjThin
  00dda	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ddd	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00de3	83 e1 03	 and	 ecx, 3
  00de6	0f 84 fa 01 00
	00		 je	 $LN188@P_MobjThin

; 5275 : 			{
; 5276 : 				INT32 i,j;
; 5277 : 				fixed_t x,y,z;
; 5278 : 				fixed_t ns;
; 5279 : 				mobj_t *mo2;
; 5280 : 
; 5281 : 				i = P_Random();

  00dec	e8 00 00 00 00	 call	 _P_Random
  00df1	0f b6 c0	 movzx	 eax, al
  00df4	89 45 d4	 mov	 DWORD PTR _i$40[ebp], eax

; 5282 : 				z = mobj->subsector->sector->floorheight + ((P_Random()&63)*FRACUNIT);

  00df7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00dfa	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00dfd	8b 31		 mov	 esi, DWORD PTR [ecx]
  00dff	e8 00 00 00 00	 call	 _P_Random
  00e04	0f b6 d0	 movzx	 edx, al
  00e07	83 e2 3f	 and	 edx, 63			; 0000003fH
  00e0a	c1 e2 10	 shl	 edx, 16			; 00000010H
  00e0d	03 16		 add	 edx, DWORD PTR [esi]
  00e0f	89 55 c4	 mov	 DWORD PTR _z$36[ebp], edx

; 5283 : 				for (j = 0; j < 2; j++)

  00e12	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _j$39[ebp], 0
  00e19	eb 09		 jmp	 SHORT $LN12@P_MobjThin
$LN10@P_MobjThin:
  00e1b	8b 45 d0	 mov	 eax, DWORD PTR _j$39[ebp]
  00e1e	83 c0 01	 add	 eax, 1
  00e21	89 45 d0	 mov	 DWORD PTR _j$39[ebp], eax
$LN12@P_MobjThin:
  00e24	83 7d d0 02	 cmp	 DWORD PTR _j$39[ebp], 2
  00e28	0f 8d a3 01 00
	00		 jge	 $LN11@P_MobjThin

; 5284 : 				{
; 5285 : 					const angle_t fa = (P_Random()*FINEANGLES/16) & FINEMASK;

  00e2e	e8 00 00 00 00	 call	 _P_Random
  00e33	0f b6 c0	 movzx	 eax, al
  00e36	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00e39	99		 cdq
  00e3a	83 e2 0f	 and	 edx, 15			; 0000000fH
  00e3d	03 c2		 add	 eax, edx
  00e3f	c1 f8 04	 sar	 eax, 4
  00e42	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  00e47	89 45 b8	 mov	 DWORD PTR _fa$33[ebp], eax

; 5286 : 					ns = 64 * FRACUNIT;

  00e4a	c7 45 c0 00 00
	40 00		 mov	 DWORD PTR _ns$35[ebp], 4194304 ; 00400000H

; 5287 : 					x = mobj->x + FixedMul(FINESINE(fa),ns);

  00e51	8b 45 c0	 mov	 eax, DWORD PTR _ns$35[ebp]
  00e54	50		 push	 eax
  00e55	8b 4d b8	 mov	 ecx, DWORD PTR _fa$33[ebp]
  00e58	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00e5f	52		 push	 edx
  00e60	e8 00 00 00 00	 call	 _FixedMul
  00e65	83 c4 08	 add	 esp, 8
  00e68	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00e6b	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00e6e	89 45 cc	 mov	 DWORD PTR _x$38[ebp], eax

; 5288 : 					y = mobj->y + FixedMul(FINECOSINE(fa),ns);

  00e71	8b 45 c0	 mov	 eax, DWORD PTR _ns$35[ebp]
  00e74	50		 push	 eax
  00e75	8b 4d b8	 mov	 ecx, DWORD PTR _fa$33[ebp]
  00e78	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00e7e	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00e81	50		 push	 eax
  00e82	e8 00 00 00 00	 call	 _FixedMul
  00e87	83 c4 08	 add	 esp, 8
  00e8a	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00e8d	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00e90	89 45 c8	 mov	 DWORD PTR _y$37[ebp], eax

; 5289 : 
; 5290 : 					mo2 = P_SpawnMobj(x, y, z, MT_EXPLODE);

  00e93	68 0e 01 00 00	 push	 270			; 0000010eH
  00e98	8b 45 c4	 mov	 eax, DWORD PTR _z$36[ebp]
  00e9b	50		 push	 eax
  00e9c	8b 4d c8	 mov	 ecx, DWORD PTR _y$37[ebp]
  00e9f	51		 push	 ecx
  00ea0	8b 55 cc	 mov	 edx, DWORD PTR _x$38[ebp]
  00ea3	52		 push	 edx
  00ea4	e8 00 00 00 00	 call	 _P_SpawnMobj
  00ea9	83 c4 10	 add	 esp, 16			; 00000010H
  00eac	89 45 bc	 mov	 DWORD PTR _mo2$34[ebp], eax

; 5291 : 					ns = 4 * FRACUNIT;

  00eaf	c7 45 c0 00 00
	04 00		 mov	 DWORD PTR _ns$35[ebp], 262144 ; 00040000H

; 5292 : 					mo2->momx = FixedMul(FINESINE(fa),ns);

  00eb6	8b 45 c0	 mov	 eax, DWORD PTR _ns$35[ebp]
  00eb9	50		 push	 eax
  00eba	8b 4d b8	 mov	 ecx, DWORD PTR _fa$33[ebp]
  00ebd	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00ec4	52		 push	 edx
  00ec5	e8 00 00 00 00	 call	 _FixedMul
  00eca	83 c4 08	 add	 esp, 8
  00ecd	8b 4d bc	 mov	 ecx, DWORD PTR _mo2$34[ebp]
  00ed0	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 5293 : 					mo2->momy = FixedMul(FINECOSINE(fa),ns);

  00ed3	8b 45 c0	 mov	 eax, DWORD PTR _ns$35[ebp]
  00ed6	50		 push	 eax
  00ed7	8b 4d b8	 mov	 ecx, DWORD PTR _fa$33[ebp]
  00eda	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00ee0	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00ee3	50		 push	 eax
  00ee4	e8 00 00 00 00	 call	 _FixedMul
  00ee9	83 c4 08	 add	 esp, 8
  00eec	8b 4d bc	 mov	 ecx, DWORD PTR _mo2$34[ebp]
  00eef	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 5294 : 
; 5295 : 					i = P_Random();

  00ef2	e8 00 00 00 00	 call	 _P_Random
  00ef7	0f b6 c0	 movzx	 eax, al
  00efa	89 45 d4	 mov	 DWORD PTR _i$40[ebp], eax

; 5296 : 
; 5297 : 					if (i % 5 == 0)

  00efd	8b 45 d4	 mov	 eax, DWORD PTR _i$40[ebp]
  00f00	99		 cdq
  00f01	b9 05 00 00 00	 mov	 ecx, 5
  00f06	f7 f9		 idiv	 ecx
  00f08	85 d2		 test	 edx, edx
  00f0a	75 1e		 jne	 SHORT $LN189@P_MobjThin

; 5298 : 						P_SpawnMobj(x, y, z, MT_CHICKEN);

  00f0c	68 a8 00 00 00	 push	 168			; 000000a8H
  00f11	8b 45 c4	 mov	 eax, DWORD PTR _z$36[ebp]
  00f14	50		 push	 eax
  00f15	8b 4d c8	 mov	 ecx, DWORD PTR _y$37[ebp]
  00f18	51		 push	 ecx
  00f19	8b 55 cc	 mov	 edx, DWORD PTR _x$38[ebp]
  00f1c	52		 push	 edx
  00f1d	e8 00 00 00 00	 call	 _P_SpawnMobj
  00f22	83 c4 10	 add	 esp, 16			; 00000010H
  00f25	e9 a2 00 00 00	 jmp	 $LN196@P_MobjThin
$LN189@P_MobjThin:

; 5299 : 					else if (i % 4 == 0)

  00f2a	8b 45 d4	 mov	 eax, DWORD PTR _i$40[ebp]
  00f2d	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00f32	79 05		 jns	 SHORT $LN382@P_MobjThin
  00f34	48		 dec	 eax
  00f35	83 c8 fc	 or	 eax, -4			; fffffffcH
  00f38	40		 inc	 eax
$LN382@P_MobjThin:
  00f39	85 c0		 test	 eax, eax
  00f3b	75 1b		 jne	 SHORT $LN191@P_MobjThin

; 5300 : 						P_SpawnMobj(x, y, z, MT_COW);

  00f3d	68 a9 00 00 00	 push	 169			; 000000a9H
  00f42	8b 45 c4	 mov	 eax, DWORD PTR _z$36[ebp]
  00f45	50		 push	 eax
  00f46	8b 4d c8	 mov	 ecx, DWORD PTR _y$37[ebp]
  00f49	51		 push	 ecx
  00f4a	8b 55 cc	 mov	 edx, DWORD PTR _x$38[ebp]
  00f4d	52		 push	 edx
  00f4e	e8 00 00 00 00	 call	 _P_SpawnMobj
  00f53	83 c4 10	 add	 esp, 16			; 00000010H
  00f56	eb 74		 jmp	 SHORT $LN196@P_MobjThin
$LN191@P_MobjThin:

; 5301 : 					else if (i % 3 == 0)

  00f58	8b 45 d4	 mov	 eax, DWORD PTR _i$40[ebp]
  00f5b	99		 cdq
  00f5c	b9 03 00 00 00	 mov	 ecx, 3
  00f61	f7 f9		 idiv	 ecx
  00f63	85 d2		 test	 edx, edx
  00f65	75 29		 jne	 SHORT $LN193@P_MobjThin

; 5302 : 					{
; 5303 : 						P_SpawnMobj(x, y, z, MT_BIRD);

  00f67	68 a5 00 00 00	 push	 165			; 000000a5H
  00f6c	8b 45 c4	 mov	 eax, DWORD PTR _z$36[ebp]
  00f6f	50		 push	 eax
  00f70	8b 4d c8	 mov	 ecx, DWORD PTR _y$37[ebp]
  00f73	51		 push	 ecx
  00f74	8b 55 cc	 mov	 edx, DWORD PTR _x$38[ebp]
  00f77	52		 push	 edx
  00f78	e8 00 00 00 00	 call	 _P_SpawnMobj
  00f7d	83 c4 10	 add	 esp, 16			; 00000010H

; 5304 : 						S_StartSound(mo2, sfx_pop);

  00f80	6a 77		 push	 119			; 00000077H
  00f82	8b 45 bc	 mov	 eax, DWORD PTR _mo2$34[ebp]
  00f85	50		 push	 eax
  00f86	e8 00 00 00 00	 call	 _S_StartSound
  00f8b	83 c4 08	 add	 esp, 8

; 5305 : 					}

  00f8e	eb 3c		 jmp	 SHORT $LN196@P_MobjThin
$LN193@P_MobjThin:

; 5306 : 					else if ((i & 1) == 0)

  00f90	8b 45 d4	 mov	 eax, DWORD PTR _i$40[ebp]
  00f93	83 e0 01	 and	 eax, 1
  00f96	75 1b		 jne	 SHORT $LN195@P_MobjThin

; 5307 : 						P_SpawnMobj(x, y, z, MT_BUNNY);

  00f98	68 a6 00 00 00	 push	 166			; 000000a6H
  00f9d	8b 45 c4	 mov	 eax, DWORD PTR _z$36[ebp]
  00fa0	50		 push	 eax
  00fa1	8b 4d c8	 mov	 ecx, DWORD PTR _y$37[ebp]
  00fa4	51		 push	 ecx
  00fa5	8b 55 cc	 mov	 edx, DWORD PTR _x$38[ebp]
  00fa8	52		 push	 edx
  00fa9	e8 00 00 00 00	 call	 _P_SpawnMobj
  00fae	83 c4 10	 add	 esp, 16			; 00000010H
  00fb1	eb 19		 jmp	 SHORT $LN196@P_MobjThin
$LN195@P_MobjThin:

; 5308 : 					else
; 5309 : 						P_SpawnMobj(x, y, z, MT_MOUSE);

  00fb3	68 a7 00 00 00	 push	 167			; 000000a7H
  00fb8	8b 45 c4	 mov	 eax, DWORD PTR _z$36[ebp]
  00fbb	50		 push	 eax
  00fbc	8b 4d c8	 mov	 ecx, DWORD PTR _y$37[ebp]
  00fbf	51		 push	 ecx
  00fc0	8b 55 cc	 mov	 edx, DWORD PTR _x$38[ebp]
  00fc3	52		 push	 edx
  00fc4	e8 00 00 00 00	 call	 _P_SpawnMobj
  00fc9	83 c4 10	 add	 esp, 16			; 00000010H
$LN196@P_MobjThin:

; 5310 : 				}

  00fcc	e9 4a fe ff ff	 jmp	 $LN10@P_MobjThin
$LN11@P_MobjThin:

; 5311 : 
; 5312 : 				mobj->fuse--;

  00fd1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00fd4	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00fda	83 e9 01	 sub	 ecx, 1
  00fdd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00fe0	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
$LN188@P_MobjThin:

; 5313 : 			}
; 5314 : 				break;

  00fe6	e9 a6 0d 00 00	 jmp	 $LN8@P_MobjThin
$LN197@P_MobjThin:

; 5315 : 		case MT_BIGAIRMINE:
; 5316 : 			{
; 5317 : 				if (mobj->tracer && mobj->tracer->player && mobj->tracer->health > 0
; 5318 : 					&& P_AproxDistance(P_AproxDistance(mobj->tracer->x - mobj->x, mobj->tracer->y - mobj->y), mobj->tracer->z - mobj->z) <= mobj->info->radius * 16)

  00feb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00fee	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00ff5	0f 84 eb 00 00
	00		 je	 $LN198@P_MobjThin
  00ffb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ffe	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01004	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0100b	0f 84 d5 00 00
	00		 je	 $LN198@P_MobjThin
  01011	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01014	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0101a	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  01021	0f 8e bf 00 00
	00		 jle	 $LN198@P_MobjThin
  01027	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0102a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01030	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01033	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  01036	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  01039	50		 push	 eax
  0103a	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0103d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  01043	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01046	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  01049	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0104c	51		 push	 ecx
  0104d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01050	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  01056	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01059	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0105c	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0105f	52		 push	 edx
  01060	e8 00 00 00 00	 call	 _P_AproxDistance
  01065	83 c4 08	 add	 esp, 8
  01068	50		 push	 eax
  01069	e8 00 00 00 00	 call	 _P_AproxDistance
  0106e	83 c4 08	 add	 esp, 8
  01071	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01074	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0107a	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  0107d	c1 e1 04	 shl	 ecx, 4
  01080	3b c1		 cmp	 eax, ecx
  01082	7f 62		 jg	 SHORT $LN198@P_MobjThin

; 5319 : 				{
; 5320 : 					// Home in on the target.
; 5321 : 					P_HomingAttack(mobj, mobj->tracer);

  01084	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01087	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0108d	51		 push	 ecx
  0108e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01091	52		 push	 edx
  01092	e8 00 00 00 00	 call	 _P_HomingAttack
  01097	83 c4 08	 add	 esp, 8

; 5322 : 
; 5323 : 					if (mobj->z < mobj->floorz)

  0109a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0109d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  010a0	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  010a3	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  010a6	7d 0c		 jge	 SHORT $LN200@P_MobjThin

; 5324 : 						mobj->z = mobj->floorz;

  010a8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  010ab	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  010ae	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  010b1	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN200@P_MobjThin:

; 5325 : 
; 5326 : 					if (leveltime % mobj->info->painchance == 0)

  010b4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  010b7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  010bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  010c2	33 d2		 xor	 edx, edx
  010c4	f7 71 20	 div	 DWORD PTR [ecx+32]
  010c7	85 d2		 test	 edx, edx
  010c9	75 19		 jne	 SHORT $LN201@P_MobjThin

; 5327 : 						S_StartSound(mobj, mobj->info->activesound);

  010cb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  010ce	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  010d4	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  010d7	52		 push	 edx
  010d8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  010db	50		 push	 eax
  010dc	e8 00 00 00 00	 call	 _S_StartSound
  010e1	83 c4 08	 add	 esp, 8
$LN201@P_MobjThin:

; 5328 : 				}

  010e4	eb 4a		 jmp	 SHORT $LN199@P_MobjThin
$LN198@P_MobjThin:

; 5329 : 				else
; 5330 : 				{
; 5331 : 					// Try to find a player
; 5332 : 					P_LookForPlayers(mobj, true, true, mobj->info->radius * 16);

  010e6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  010e9	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  010ef	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  010f2	c1 e2 04	 shl	 edx, 4
  010f5	52		 push	 edx
  010f6	6a 01		 push	 1
  010f8	6a 01		 push	 1
  010fa	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  010fd	50		 push	 eax
  010fe	e8 00 00 00 00	 call	 _P_LookForPlayers
  01103	83 c4 10	 add	 esp, 16			; 00000010H

; 5333 : 					mobj->momx >>= 1;

  01106	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01109	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0110c	d1 f9		 sar	 ecx, 1
  0110e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01111	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 5334 : 					mobj->momy >>= 1;

  01114	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01117	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0111a	d1 f9		 sar	 ecx, 1
  0111c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0111f	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 5335 : 					mobj->momz >>= 1;

  01122	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01125	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01128	d1 f9		 sar	 ecx, 1
  0112a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0112d	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN199@P_MobjThin:

; 5336 : 				}
; 5337 : 			}
; 5338 : 			break;

  01130	e9 5c 0c 00 00	 jmp	 $LN8@P_MobjThin
$LN202@P_MobjThin:

; 5339 : 		case MT_BIGMINE:
; 5340 : 			{
; 5341 : 				if (mobj->tracer && mobj->tracer->player && mobj->tracer->health > 0
; 5342 : 					&& P_AproxDistance(P_AproxDistance(mobj->tracer->x - mobj->x, mobj->tracer->y - mobj->y), mobj->tracer->z - mobj->z) <= mobj->info->radius * 16)

  01135	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01138	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0113f	0f 84 27 01 00
	00		 je	 $LN203@P_MobjThin
  01145	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01148	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0114e	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  01155	0f 84 11 01 00
	00		 je	 $LN203@P_MobjThin
  0115b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0115e	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01164	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0116b	0f 8e fb 00 00
	00		 jle	 $LN203@P_MobjThin
  01171	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01174	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0117a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0117d	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  01180	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  01183	50		 push	 eax
  01184	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01187	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0118d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01190	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  01193	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  01196	51		 push	 ecx
  01197	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0119a	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  011a0	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  011a3	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  011a6	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  011a9	52		 push	 edx
  011aa	e8 00 00 00 00	 call	 _P_AproxDistance
  011af	83 c4 08	 add	 esp, 8
  011b2	50		 push	 eax
  011b3	e8 00 00 00 00	 call	 _P_AproxDistance
  011b8	83 c4 08	 add	 esp, 8
  011bb	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  011be	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  011c4	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  011c7	c1 e1 04	 shl	 ecx, 4
  011ca	3b c1		 cmp	 eax, ecx
  011cc	0f 8f 9a 00 00
	00		 jg	 $LN203@P_MobjThin

; 5343 : 				{
; 5344 : 					P_MobjCheckWater(mobj);

  011d2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  011d5	50		 push	 eax
  011d6	e8 00 00 00 00	 call	 _P_MobjCheckWater
  011db	83 c4 04	 add	 esp, 4

; 5345 : 
; 5346 : 					// Home in on the target.
; 5347 : 					P_HomingAttack(mobj, mobj->tracer);

  011de	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  011e1	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  011e7	51		 push	 ecx
  011e8	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  011eb	52		 push	 edx
  011ec	e8 00 00 00 00	 call	 _P_HomingAttack
  011f1	83 c4 08	 add	 esp, 8

; 5348 : 
; 5349 : 					// Don't let it go out of water
; 5350 : 					if (mobj->z + mobj->height > mobj->watertop)

  011f4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  011f7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  011fa	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  011fd	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  01200	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01203	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  01209	7e 15		 jle	 SHORT $LN205@P_MobjThin

; 5351 : 						mobj->z = mobj->watertop - mobj->height;

  0120b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0120e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01211	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  01217	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  0121a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0121d	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN205@P_MobjThin:

; 5352 : 
; 5353 : 					if (mobj->z < mobj->floorz)

  01220	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01223	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01226	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  01229	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  0122c	7d 0c		 jge	 SHORT $LN206@P_MobjThin

; 5354 : 						mobj->z = mobj->floorz;

  0122e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01231	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01234	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  01237	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN206@P_MobjThin:

; 5355 : 
; 5356 : 					if (leveltime % mobj->info->painchance == 0)

  0123a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0123d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01243	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01248	33 d2		 xor	 edx, edx
  0124a	f7 71 20	 div	 DWORD PTR [ecx+32]
  0124d	85 d2		 test	 edx, edx
  0124f	75 19		 jne	 SHORT $LN207@P_MobjThin

; 5357 : 						S_StartSound(mobj, mobj->info->activesound);

  01251	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01254	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0125a	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0125d	52		 push	 edx
  0125e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01261	50		 push	 eax
  01262	e8 00 00 00 00	 call	 _S_StartSound
  01267	83 c4 08	 add	 esp, 8
$LN207@P_MobjThin:

; 5358 : 				}

  0126a	eb 4a		 jmp	 SHORT $LN204@P_MobjThin
$LN203@P_MobjThin:

; 5359 : 				else
; 5360 : 				{
; 5361 : 					// Try to find a player
; 5362 : 					P_LookForPlayers(mobj, true, true, mobj->info->radius * 16);

  0126c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0126f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01275	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  01278	c1 e2 04	 shl	 edx, 4
  0127b	52		 push	 edx
  0127c	6a 01		 push	 1
  0127e	6a 01		 push	 1
  01280	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01283	50		 push	 eax
  01284	e8 00 00 00 00	 call	 _P_LookForPlayers
  01289	83 c4 10	 add	 esp, 16			; 00000010H

; 5363 : 					mobj->momx >>= 1;

  0128c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0128f	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  01292	d1 f9		 sar	 ecx, 1
  01294	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01297	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 5364 : 					mobj->momy >>= 1;

  0129a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0129d	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  012a0	d1 f9		 sar	 ecx, 1
  012a2	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  012a5	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 5365 : 					mobj->momz >>= 1;

  012a8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  012ab	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  012ae	d1 f9		 sar	 ecx, 1
  012b0	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  012b3	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN204@P_MobjThin:

; 5366 : 				}
; 5367 : 			}
; 5368 : 			break;

  012b6	e9 d6 0a 00 00	 jmp	 $LN8@P_MobjThin
$LN208@P_MobjThin:

; 5369 : 		case MT_SPINMACEPOINT:
; 5370 : 			if (leveltime & 1)

  012bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  012c0	83 e0 01	 and	 eax, 1
  012c3	74 29		 je	 SHORT $LN210@P_MobjThin

; 5371 : 			{
; 5372 : 				if (mobj->lastlook > mobj->movecount)

  012c5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  012c8	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  012cb	8b 90 a8 00 00
	00		 mov	 edx, DWORD PTR [eax+168]
  012d1	3b 91 94 00 00
	00		 cmp	 edx, DWORD PTR [ecx+148]
  012d7	7e 15		 jle	 SHORT $LN210@P_MobjThin

; 5373 : 					mobj->lastlook--;

  012d9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  012dc	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  012e2	83 e9 01	 sub	 ecx, 1
  012e5	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  012e8	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx
$LN210@P_MobjThin:

; 5374 : /*
; 5375 : 				if (mobj->threshold > mobj->movefactor)
; 5376 : 					mobj->threshold -= FRACUNIT;
; 5377 : 				else if (mobj->threshold < mobj->movefactor)
; 5378 : 					mobj->threshold += FRACUNIT;*/
; 5379 : 			}
; 5380 : 			break;

  012ee	e9 9e 0a 00 00	 jmp	 $LN8@P_MobjThin
$LN211@P_MobjThin:

; 5381 : 		case MT_EGGCAPSULE:
; 5382 : 		case MT_HAMMER:
; 5383 : 			if (mobj->z <= mobj->floorz)

  012f3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  012f6	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  012f9	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  012fc	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  012ff	7f 11		 jg	 SHORT $LN213@P_MobjThin

; 5384 : 				P_SetMobjState(mobj,S_DISS);

  01301	68 4f 06 00 00	 push	 1615			; 0000064fH
  01306	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01309	50		 push	 eax
  0130a	e8 00 00 00 00	 call	 _P_SetMobjState
  0130f	83 c4 08	 add	 esp, 8
$LN213@P_MobjThin:

; 5385 : 			break;

  01312	e9 7a 0a 00 00	 jmp	 $LN8@P_MobjThin
$LN214@P_MobjThin:

; 5386 : 		case MT_KOOPA:
; 5387 : 			P_KoopaThinker(mobj);

  01317	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0131a	50		 push	 eax
  0131b	e8 00 00 00 00	 call	 _P_KoopaThinker
  01320	83 c4 04	 add	 esp, 4

; 5388 : 			break;

  01323	e9 69 0a 00 00	 jmp	 $LN8@P_MobjThin
$LN215@P_MobjThin:

; 5389 : 		case MT_REDRING:
; 5390 : 			if (((mobj->z < mobj->floorz) || (mobj->z + mobj->height > mobj->ceilingz))
; 5391 : 				&& mobj->flags & MF_MISSILE)

  01328	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0132b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0132e	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  01331	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  01334	7c 14		 jl	 SHORT $LN217@P_MobjThin
  01336	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01339	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0133c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0133f	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  01342	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01345	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  01348	7e 1a		 jle	 SHORT $LN216@P_MobjThin
$LN217@P_MobjThin:
  0134a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0134d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01350	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  01356	74 0c		 je	 SHORT $LN216@P_MobjThin

; 5392 : 			{
; 5393 : 				P_ExplodeMissile(mobj);

  01358	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0135b	50		 push	 eax
  0135c	e8 00 00 00 00	 call	 _P_ExplodeMissile
  01361	83 c4 04	 add	 esp, 4
$LN216@P_MobjThin:

; 5394 : 			}
; 5395 : 			break;

  01364	e9 28 0a 00 00	 jmp	 $LN8@P_MobjThin
$LN218@P_MobjThin:

; 5396 : 		case MT_BOSSFLYPOINT:
; 5397 : 			return;

  01369	e9 13 18 00 00	 jmp	 $LN54@P_MobjThin
$LN219@P_MobjThin:

; 5398 : 		case MT_NIGHTSCORE:
; 5399 : 			mobj->flags |= MF_TRANSLATION;

  0136e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01371	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01374	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  0137a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0137d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5400 : 			mobj->color = (UINT8)(leveltime % 13);

  01380	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01385	33 d2		 xor	 edx, edx
  01387	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0138c	f7 f1		 div	 ecx
  0138e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01391	88 50 68	 mov	 BYTE PTR [eax+104], dl

; 5401 : 			break;

  01394	e9 f8 09 00 00	 jmp	 $LN8@P_MobjThin
$LN220@P_MobjThin:

; 5402 : 		case MT_JETFUME1:
; 5403 : 			{
; 5404 : 				fixed_t jetx, jety;
; 5405 : 
; 5406 : 				if (!mobj->target)

  01399	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0139c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  013a3	75 16		 jne	 SHORT $LN221@P_MobjThin

; 5407 : 				{
; 5408 : 					P_SetMobjState(mobj, S_DISS);

  013a5	68 4f 06 00 00	 push	 1615			; 0000064fH
  013aa	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  013ad	50		 push	 eax
  013ae	e8 00 00 00 00	 call	 _P_SetMobjState
  013b3	83 c4 08	 add	 esp, 8

; 5409 : 					return;

  013b6	e9 c6 17 00 00	 jmp	 $LN54@P_MobjThin
$LN221@P_MobjThin:

; 5410 : 				}
; 5411 : 
; 5412 : #ifdef CHAOSISNOTDEADYET
; 5413 : 				if (gametype == GT_CHAOS && mobj->target->health <= 0)
; 5414 : 					P_SetMobjState(mobj, S_DISS);
; 5415 : #endif
; 5416 : 
; 5417 : 				jetx = mobj->target->x + P_ReturnThrustX(mobj->target, mobj->target->angle, -64*FRACUNIT);

  013bb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  013be	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  013c4	68 00 00 c0 ff	 push	 -4194304		; ffc00000H
  013c9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  013cc	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  013d2	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  013d5	50		 push	 eax
  013d6	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  013d9	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  013df	52		 push	 edx
  013e0	e8 00 00 00 00	 call	 _P_ReturnThrustX
  013e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  013e8	03 46 10	 add	 eax, DWORD PTR [esi+16]
  013eb	89 45 b4	 mov	 DWORD PTR _jetx$32[ebp], eax

; 5418 : 				jety = mobj->target->y + P_ReturnThrustY(mobj->target, mobj->target->angle, -64*FRACUNIT);

  013ee	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  013f1	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  013f7	68 00 00 c0 ff	 push	 -4194304		; ffc00000H
  013fc	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  013ff	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  01405	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01408	50		 push	 eax
  01409	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0140c	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  01412	52		 push	 edx
  01413	e8 00 00 00 00	 call	 _P_ReturnThrustY
  01418	83 c4 0c	 add	 esp, 12			; 0000000cH
  0141b	03 46 14	 add	 eax, DWORD PTR [esi+20]
  0141e	89 45 b0	 mov	 DWORD PTR _jety$31[ebp], eax

; 5419 : 
; 5420 : 				if (mobj->fuse == 56) // First one

  01421	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01424	83 b8 bc 00 00
	00 38		 cmp	 DWORD PTR [eax+188], 56	; 00000038H
  0142b	75 65		 jne	 SHORT $LN222@P_MobjThin

; 5421 : 				{
; 5422 : 					P_UnsetThingPosition(mobj);

  0142d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01430	50		 push	 eax
  01431	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  01436	83 c4 04	 add	 esp, 4

; 5423 : 					mobj->x = jetx;

  01439	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0143c	8b 4d b4	 mov	 ecx, DWORD PTR _jetx$32[ebp]
  0143f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 5424 : 					mobj->y = jety;

  01442	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01445	8b 4d b0	 mov	 ecx, DWORD PTR _jety$31[ebp]
  01448	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 5425 : 					mobj->z = mobj->target->z + 38*FRACUNIT;

  0144b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0144e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01454	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01457	81 c2 00 00 26
	00		 add	 edx, 2490368		; 00260000H
  0145d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01460	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 5426 : 					mobj->floorz = mobj->z;

  01463	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01466	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01469	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0146c	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 5427 : 					mobj->ceilingz = mobj->z+mobj->height;

  0146f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01472	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01475	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01478	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0147b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0147e	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 5428 : 					P_SetThingPosition(mobj);

  01481	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01484	50		 push	 eax
  01485	e8 00 00 00 00	 call	 _P_SetThingPosition
  0148a	83 c4 04	 add	 esp, 4

; 5429 : 				}

  0148d	e9 8d 01 00 00	 jmp	 $LN226@P_MobjThin
$LN222@P_MobjThin:

; 5430 : 				else if (mobj->fuse == 57)

  01492	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01495	83 b8 bc 00 00
	00 39		 cmp	 DWORD PTR [eax+188], 57	; 00000039H
  0149c	0f 85 b9 00 00
	00		 jne	 $LN224@P_MobjThin

; 5431 : 				{
; 5432 : 					P_UnsetThingPosition(mobj);

  014a2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  014a5	50		 push	 eax
  014a6	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  014ab	83 c4 04	 add	 esp, 4

; 5433 : 					mobj->x = jetx + P_ReturnThrustX(mobj->target, mobj->target->angle-ANGLE_90, 24*FRACUNIT);

  014ae	68 00 00 18 00	 push	 1572864			; 00180000H
  014b3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  014b6	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  014bc	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  014bf	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  014c5	52		 push	 edx
  014c6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  014c9	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  014cf	51		 push	 ecx
  014d0	e8 00 00 00 00	 call	 _P_ReturnThrustX
  014d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  014d8	03 45 b4	 add	 eax, DWORD PTR _jetx$32[ebp]
  014db	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  014de	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 5434 : 					mobj->y = jety + P_ReturnThrustY(mobj->target, mobj->target->angle-ANGLE_90, 24*FRACUNIT);

  014e1	68 00 00 18 00	 push	 1572864			; 00180000H
  014e6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  014e9	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  014ef	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  014f2	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  014f8	52		 push	 edx
  014f9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  014fc	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01502	51		 push	 ecx
  01503	e8 00 00 00 00	 call	 _P_ReturnThrustY
  01508	83 c4 0c	 add	 esp, 12			; 0000000cH
  0150b	03 45 b0	 add	 eax, DWORD PTR _jety$31[ebp]
  0150e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01511	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 5435 : 					mobj->z = mobj->target->z + 12*FRACUNIT;

  01514	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01517	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0151d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01520	81 c2 00 00 0c
	00		 add	 edx, 786432		; 000c0000H
  01526	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01529	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 5436 : 					mobj->floorz = mobj->z;

  0152c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0152f	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01532	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01535	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 5437 : 					mobj->ceilingz = mobj->z+mobj->height;

  01538	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0153b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0153e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01541	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  01544	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01547	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 5438 : 					P_SetThingPosition(mobj);

  0154a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0154d	50		 push	 eax
  0154e	e8 00 00 00 00	 call	 _P_SetThingPosition
  01553	83 c4 04	 add	 esp, 4

; 5439 : 				}

  01556	e9 c4 00 00 00	 jmp	 $LN226@P_MobjThin
$LN224@P_MobjThin:

; 5440 : 				else if (mobj->fuse == 58)

  0155b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0155e	83 b8 bc 00 00
	00 3a		 cmp	 DWORD PTR [eax+188], 58	; 0000003aH
  01565	0f 85 b4 00 00
	00		 jne	 $LN226@P_MobjThin

; 5441 : 				{
; 5442 : 					P_UnsetThingPosition(mobj);

  0156b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0156e	50		 push	 eax
  0156f	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  01574	83 c4 04	 add	 esp, 4

; 5443 : 					mobj->x = jetx + P_ReturnThrustX(mobj->target, mobj->target->angle+ANGLE_90, 24*FRACUNIT);

  01577	68 00 00 18 00	 push	 1572864			; 00180000H
  0157c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0157f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01585	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  01588	81 c2 00 00 00
	40		 add	 edx, 1073741824		; 40000000H
  0158e	52		 push	 edx
  0158f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01592	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01598	51		 push	 ecx
  01599	e8 00 00 00 00	 call	 _P_ReturnThrustX
  0159e	83 c4 0c	 add	 esp, 12			; 0000000cH
  015a1	03 45 b4	 add	 eax, DWORD PTR _jetx$32[ebp]
  015a4	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  015a7	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 5444 : 					mobj->y = jety + P_ReturnThrustY(mobj->target, mobj->target->angle+ANGLE_90, 24*FRACUNIT);

  015aa	68 00 00 18 00	 push	 1572864			; 00180000H
  015af	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  015b2	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  015b8	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  015bb	81 c2 00 00 00
	40		 add	 edx, 1073741824		; 40000000H
  015c1	52		 push	 edx
  015c2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  015c5	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  015cb	51		 push	 ecx
  015cc	e8 00 00 00 00	 call	 _P_ReturnThrustY
  015d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  015d4	03 45 b0	 add	 eax, DWORD PTR _jety$31[ebp]
  015d7	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  015da	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 5445 : 					mobj->z = mobj->target->z + 12*FRACUNIT;

  015dd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  015e0	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  015e6	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  015e9	81 c2 00 00 0c
	00		 add	 edx, 786432		; 000c0000H
  015ef	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  015f2	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 5446 : 					mobj->floorz = mobj->z;

  015f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  015f8	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  015fb	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  015fe	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 5447 : 					mobj->ceilingz = mobj->z+mobj->height;

  01601	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01604	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01607	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0160a	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0160d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01610	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 5448 : 					P_SetThingPosition(mobj);

  01613	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01616	50		 push	 eax
  01617	e8 00 00 00 00	 call	 _P_SetThingPosition
  0161c	83 c4 04	 add	 esp, 4
$LN226@P_MobjThin:

; 5449 : 				}
; 5450 : 				mobj->fuse++;

  0161f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01622	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  01628	83 c1 01	 add	 ecx, 1
  0162b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0162e	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx

; 5451 : 			}
; 5452 : 			break;

  01634	e9 58 07 00 00	 jmp	 $LN8@P_MobjThin
$LN227@P_MobjThin:

; 5453 : 		case MT_PROPELLER:
; 5454 : 			{
; 5455 : 				fixed_t jetx, jety;
; 5456 : 
; 5457 : 				if (!mobj->target)

  01639	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0163c	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  01643	75 16		 jne	 SHORT $LN228@P_MobjThin

; 5458 : 				{
; 5459 : 					P_SetMobjState(mobj, S_DISS);

  01645	68 4f 06 00 00	 push	 1615			; 0000064fH
  0164a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0164d	50		 push	 eax
  0164e	e8 00 00 00 00	 call	 _P_SetMobjState
  01653	83 c4 08	 add	 esp, 8

; 5460 : 					return;

  01656	e9 26 15 00 00	 jmp	 $LN54@P_MobjThin
$LN228@P_MobjThin:

; 5461 : 				}
; 5462 : 
; 5463 : #ifdef CHAOSISNOTDEADYET
; 5464 : 				if (gametype == GT_CHAOS && mobj->target->health <= 0)
; 5465 : 					P_SetMobjState(mobj, S_DISS);
; 5466 : #endif
; 5467 : 
; 5468 : 				jetx = mobj->target->x + P_ReturnThrustX(mobj->target, mobj->target->angle, -60*FRACUNIT);

  0165b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0165e	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  01664	68 00 00 c4 ff	 push	 -3932160		; ffc40000H
  01669	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0166c	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  01672	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01675	50		 push	 eax
  01676	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01679	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0167f	52		 push	 edx
  01680	e8 00 00 00 00	 call	 _P_ReturnThrustX
  01685	83 c4 0c	 add	 esp, 12			; 0000000cH
  01688	03 46 10	 add	 eax, DWORD PTR [esi+16]
  0168b	89 45 ac	 mov	 DWORD PTR _jetx$30[ebp], eax

; 5469 : 				jety = mobj->target->y + P_ReturnThrustY(mobj->target, mobj->target->angle, -60*FRACUNIT);

  0168e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01691	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  01697	68 00 00 c4 ff	 push	 -3932160		; ffc40000H
  0169c	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0169f	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  016a5	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  016a8	50		 push	 eax
  016a9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  016ac	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  016b2	52		 push	 edx
  016b3	e8 00 00 00 00	 call	 _P_ReturnThrustY
  016b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  016bb	03 46 14	 add	 eax, DWORD PTR [esi+20]
  016be	89 45 a8	 mov	 DWORD PTR _jety$29[ebp], eax

; 5470 : 
; 5471 : 				P_UnsetThingPosition(mobj);

  016c1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  016c4	50		 push	 eax
  016c5	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  016ca	83 c4 04	 add	 esp, 4

; 5472 : 				mobj->x = jetx;

  016cd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  016d0	8b 4d ac	 mov	 ecx, DWORD PTR _jetx$30[ebp]
  016d3	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 5473 : 				mobj->y = jety;

  016d6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  016d9	8b 4d a8	 mov	 ecx, DWORD PTR _jety$29[ebp]
  016dc	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 5474 : 				mobj->z = mobj->target->z + 17*FRACUNIT;

  016df	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  016e2	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  016e8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  016eb	81 c2 00 00 11
	00		 add	 edx, 1114112		; 00110000H
  016f1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  016f4	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 5475 : 				mobj->angle = mobj->target->angle - ANGLE_180;

  016f7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  016fa	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01700	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  01703	81 ea 00 00 00
	80		 sub	 edx, -2147483648	; 80000000H
  01709	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0170c	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 5476 : 				mobj->floorz = mobj->z;

  0170f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01712	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01715	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01718	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 5477 : 				mobj->ceilingz = mobj->z+mobj->height;

  0171b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0171e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01721	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01724	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  01727	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0172a	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 5478 : 				P_SetThingPosition(mobj);

  0172d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01730	50		 push	 eax
  01731	e8 00 00 00 00	 call	 _P_SetThingPosition
  01736	83 c4 04	 add	 esp, 4

; 5479 : 			}
; 5480 : 			break;

  01739	e9 53 06 00 00	 jmp	 $LN8@P_MobjThin
$LN229@P_MobjThin:

; 5481 : 		case MT_SEED:
; 5482 : 			mobj->momz = mobj->info->speed;

  0173e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01741	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01747	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0174a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0174d	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 5483 : 			break;

  01750	e9 3c 06 00 00	 jmp	 $LN8@P_MobjThin
$LN230@P_MobjThin:

; 5484 : 		case MT_NIGHTSDRONE:
; 5485 : 			if (mobj->tracer && mobj->tracer->player && !(mobj->tracer->player->pflags & PF_NIGHTSMODE))

  01755	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01758	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0175f	74 46		 je	 SHORT $LN231@P_MobjThin
  01761	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01764	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0176a	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  01771	74 34		 je	 SHORT $LN231@P_MobjThin
  01773	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01776	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0177c	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  01782	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  01788	25 00 00 20 00	 and	 eax, 2097152		; 00200000H
  0178d	75 18		 jne	 SHORT $LN231@P_MobjThin

; 5486 : 				mobj->flags2 &= ~MF2_DONTDRAW;

  0178f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01792	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01798	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  0179e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  017a1	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN231@P_MobjThin:

; 5487 : 			mobj->angle += ANG10;

  017a7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  017aa	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  017ad	81 c1 c7 71 1c
	07		 add	 ecx, 119304647		; 071c71c7H
  017b3	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  017b6	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 5488 : 			if (mobj->z <= mobj->floorz)

  017b9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  017bc	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  017bf	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  017c2	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  017c5	7f 0a		 jg	 SHORT $LN232@P_MobjThin

; 5489 : 				mobj->momz = 5*FRACUNIT;

  017c7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  017ca	c7 40 50 00 00
	05 00		 mov	 DWORD PTR [eax+80], 327680 ; 00050000H
$LN232@P_MobjThin:

; 5490 : 			break;

  017d1	e9 bb 05 00 00	 jmp	 $LN8@P_MobjThin
$LN233@P_MobjThin:

; 5491 : 		case MT_PLAYER:
; 5492 : 			P_PlayerMobjThinker(mobj);

  017d6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  017d9	50		 push	 eax
  017da	e8 00 00 00 00	 call	 _P_PlayerMobjThinker
  017df	83 c4 04	 add	 esp, 4

; 5493 : 			return;

  017e2	e9 9a 13 00 00	 jmp	 $LN54@P_MobjThin
$LN234@P_MobjThin:

; 5494 : 		case MT_FAN: // Fans spawn bubbles underwater
; 5495 : 			// check mobj against possible water content
; 5496 : 			P_MobjCheckWater(mobj);

  017e7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  017ea	50		 push	 eax
  017eb	e8 00 00 00 00	 call	 _P_MobjCheckWater
  017f0	83 c4 04	 add	 esp, 4

; 5497 : 			if (mobj->eflags & MFE_UNDERWATER)

  017f3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  017f6	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  017fc	83 e1 08	 and	 ecx, 8
  017ff	0f 84 c4 00 00
	00		 je	 $LN239@P_MobjThin

; 5498 : 			{
; 5499 : 				fixed_t hz = mobj->z + (4*mobj->height)/5;

  01805	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01808	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0180b	c1 e0 02	 shl	 eax, 2
  0180e	99		 cdq
  0180f	b9 05 00 00 00	 mov	 ecx, 5
  01814	f7 f9		 idiv	 ecx
  01816	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01819	03 42 18	 add	 eax, DWORD PTR [edx+24]
  0181c	89 45 a4	 mov	 DWORD PTR _hz$28[ebp], eax

; 5500 : 				mobj_t *bubble = NULL;

  0181f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _bubble$27[ebp], 0

; 5501 : 
; 5502 : 				if (!(P_Random() % 16))

  01826	e8 00 00 00 00	 call	 _P_Random
  0182b	0f b6 c0	 movzx	 eax, al
  0182e	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  01833	79 05		 jns	 SHORT $LN383@P_MobjThin
  01835	48		 dec	 eax
  01836	83 c8 f0	 or	 eax, -16		; fffffff0H
  01839	40		 inc	 eax
$LN383@P_MobjThin:
  0183a	85 c0		 test	 eax, eax
  0183c	75 24		 jne	 SHORT $LN236@P_MobjThin

; 5503 : 					bubble = P_SpawnMobj(mobj->x, mobj->y, hz, MT_SMALLBUBBLE);

  0183e	68 b7 00 00 00	 push	 183			; 000000b7H
  01843	8b 45 a4	 mov	 eax, DWORD PTR _hz$28[ebp]
  01846	50		 push	 eax
  01847	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0184a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0184d	52		 push	 edx
  0184e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01851	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01854	51		 push	 ecx
  01855	e8 00 00 00 00	 call	 _P_SpawnMobj
  0185a	83 c4 10	 add	 esp, 16			; 00000010H
  0185d	89 45 a0	 mov	 DWORD PTR _bubble$27[ebp], eax
  01860	eb 36		 jmp	 SHORT $LN238@P_MobjThin
$LN236@P_MobjThin:

; 5504 : 				else if (!(P_Random() % 96))

  01862	e8 00 00 00 00	 call	 _P_Random
  01867	0f b6 c0	 movzx	 eax, al
  0186a	99		 cdq
  0186b	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  01870	f7 f9		 idiv	 ecx
  01872	85 d2		 test	 edx, edx
  01874	75 22		 jne	 SHORT $LN238@P_MobjThin

; 5505 : 					bubble = P_SpawnMobj(mobj->x, mobj->y, hz, MT_MEDIUMBUBBLE);

  01876	68 b8 00 00 00	 push	 184			; 000000b8H
  0187b	8b 45 a4	 mov	 eax, DWORD PTR _hz$28[ebp]
  0187e	50		 push	 eax
  0187f	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01882	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01885	52		 push	 edx
  01886	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01889	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0188c	51		 push	 ecx
  0188d	e8 00 00 00 00	 call	 _P_SpawnMobj
  01892	83 c4 10	 add	 esp, 16			; 00000010H
  01895	89 45 a0	 mov	 DWORD PTR _bubble$27[ebp], eax
$LN238@P_MobjThin:

; 5506 : 
; 5507 : 				if (bubble)

  01898	83 7d a0 00	 cmp	 DWORD PTR _bubble$27[ebp], 0
  0189c	74 2b		 je	 SHORT $LN239@P_MobjThin

; 5508 : 				{
; 5509 : 					bubble->destscale = mobj->scale;

  0189e	8b 45 a0	 mov	 eax, DWORD PTR _bubble$27[ebp]
  018a1	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  018a4	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  018ab	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 5510 : 					P_SetScale(bubble, mobj->scale);

  018b2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  018b5	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  018bc	51		 push	 ecx
  018bd	8b 55 a0	 mov	 edx, DWORD PTR _bubble$27[ebp]
  018c0	52		 push	 edx
  018c1	e8 00 00 00 00	 call	 _P_SetScale
  018c6	83 c4 08	 add	 esp, 8
$LN239@P_MobjThin:

; 5511 : 				}
; 5512 : 			}
; 5513 : 			break;

  018c9	e9 c3 04 00 00	 jmp	 $LN8@P_MobjThin
$LN240@P_MobjThin:

; 5514 : 		case MT_SKIM:
; 5515 : 			// check mobj against possible water content, before movement code
; 5516 : 			P_MobjCheckWater(mobj);

  018ce	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  018d1	50		 push	 eax
  018d2	e8 00 00 00 00	 call	 _P_MobjCheckWater
  018d7	83 c4 04	 add	 esp, 4

; 5517 : 
; 5518 : 			// Keep Skim at water surface
; 5519 : 			if (mobj->z <= mobj->watertop)

  018da	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  018dd	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  018e0	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  018e3	3b 91 c0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+192]
  018e9	7f 6d		 jg	 SHORT $LN241@P_MobjThin

; 5520 : 			{
; 5521 : 				mobj->flags |= MF_NOGRAVITY;

  018eb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  018ee	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  018f1	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  018f7	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  018fa	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5522 : 				if (mobj->z < mobj->watertop)

  018fd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01900	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01903	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  01906	3b 91 c0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+192]
  0190c	7d 48		 jge	 SHORT $LN245@P_MobjThin

; 5523 : 				{
; 5524 : 					if (mobj->watertop - mobj->z <= mobj->info->speed*FRACUNIT)

  0190e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01911	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01914	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  0191a	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  0191d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01920	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01926	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  01929	c1 e0 10	 shl	 eax, 16			; 00000010H
  0192c	3b d0		 cmp	 edx, eax
  0192e	7f 11		 jg	 SHORT $LN244@P_MobjThin

; 5525 : 						mobj->z = mobj->watertop;

  01930	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01933	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01936	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  0193c	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0193f	eb 15		 jmp	 SHORT $LN245@P_MobjThin
$LN244@P_MobjThin:

; 5526 : 					else
; 5527 : 						mobj->momz = mobj->info->speed*FRACUNIT;

  01941	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01944	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0194a	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0194d	c1 e2 10	 shl	 edx, 16			; 00000010H
  01950	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01953	89 50 50	 mov	 DWORD PTR [eax+80], edx
$LN245@P_MobjThin:

; 5528 : 				}
; 5529 : 			}

  01956	eb 49		 jmp	 SHORT $LN246@P_MobjThin
$LN241@P_MobjThin:

; 5530 : 			else
; 5531 : 			{
; 5532 : 				mobj->flags &= ~MF_NOGRAVITY;

  01958	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0195b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0195e	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  01964	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01967	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 5533 : 				if (mobj->z > mobj->watertop && mobj->z - mobj->watertop < MAXSTEPMOVE)

  0196a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0196d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01970	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  01973	3b 91 c0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+192]
  01979	7e 26		 jle	 SHORT $LN246@P_MobjThin
  0197b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0197e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01981	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  01984	2b 91 c0 00 00
	00		 sub	 edx, DWORD PTR [ecx+192]
  0198a	81 fa 00 00 18
	00		 cmp	 edx, 1572864		; 00180000H
  01990	7d 0f		 jge	 SHORT $LN246@P_MobjThin

; 5534 : 					mobj->z = mobj->watertop;

  01992	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01995	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01998	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  0199e	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN246@P_MobjThin:

; 5535 : 			}
; 5536 : 			break;

  019a1	e9 eb 03 00 00	 jmp	 $LN8@P_MobjThin
$LN247@P_MobjThin:

; 5537 : 		case MT_RING:
; 5538 : 		case MT_COIN:
; 5539 : #ifdef BLUE_SPHERES
; 5540 : 		case MT_BLUEBALL:
; 5541 : #endif
; 5542 : 		case MT_REDTEAMRING:
; 5543 : 		case MT_BLUETEAMRING:
; 5544 : 			// No need to check water. Who cares?
; 5545 : 			P_RingThinker(mobj);

  019a6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  019a9	50		 push	 eax
  019aa	e8 00 00 00 00	 call	 _P_RingThinker
  019af	83 c4 04	 add	 esp, 4

; 5546 : 			if (mobj->flags2 & MF2_NIGHTSPULL)

  019b2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  019b5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  019bb	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  019c1	74 0c		 je	 SHORT $LN251@P_MobjThin

; 5547 : 				P_NightsItemChase(mobj);

  019c3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  019c6	50		 push	 eax
  019c7	e8 00 00 00 00	 call	 _P_NightsItemChase
  019cc	83 c4 04	 add	 esp, 4
$LN251@P_MobjThin:

; 5548 : 			return;

  019cf	e9 ad 11 00 00	 jmp	 $LN54@P_MobjThin
$LN252@P_MobjThin:

; 5549 : 		case MT_NIGHTSWING:
; 5550 : 			if (mobj->flags2 & MF2_NIGHTSPULL)

  019d4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  019d7	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  019dd	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  019e3	74 0c		 je	 SHORT $LN253@P_MobjThin

; 5551 : 				P_NightsItemChase(mobj);

  019e5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  019e8	50		 push	 eax
  019e9	e8 00 00 00 00	 call	 _P_NightsItemChase
  019ee	83 c4 04	 add	 esp, 4
$LN253@P_MobjThin:

; 5552 : 			break;

  019f1	e9 9b 03 00 00	 jmp	 $LN8@P_MobjThin
$LN254@P_MobjThin:

; 5553 : 		case MT_SHELL:
; 5554 : 			if (mobj->threshold > TICRATE)

  019f6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  019f9	83 b8 a0 00 00
	00 23		 cmp	 DWORD PTR [eax+160], 35	; 00000023H
  01a00	7e 15		 jle	 SHORT $LN255@P_MobjThin

; 5555 : 				mobj->threshold--;

  01a02	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a05	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  01a0b	83 e9 01	 sub	 ecx, 1
  01a0e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01a11	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx
$LN255@P_MobjThin:

; 5556 : 
; 5557 : 			if (mobj->state != &states[S_SHELL])

  01a17	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01a1c	69 c8 ad 05 00
	00		 imul	 ecx, eax, 1453
  01a22	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01a28	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01a2b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01a2e	74 56		 je	 SHORT $LN256@P_MobjThin

; 5558 : 			{
; 5559 : 				mobj->angle = R_PointToAngle2(mobj->x, mobj->y, mobj->x+mobj->momx, mobj->y+mobj->momy);

  01a30	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a33	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01a36	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01a39	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  01a3c	51		 push	 ecx
  01a3d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a40	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01a43	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01a46	03 4a 48	 add	 ecx, DWORD PTR [edx+72]
  01a49	51		 push	 ecx
  01a4a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a4d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01a50	51		 push	 ecx
  01a51	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01a54	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01a57	50		 push	 eax
  01a58	e8 00 00 00 00	 call	 _R_PointToAngle2
  01a5d	83 c4 10	 add	 esp, 16			; 00000010H
  01a60	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01a63	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 5560 : 				P_InstaThrust(mobj, mobj->angle, mobj->info->speed);

  01a66	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a69	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01a6f	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  01a72	52		 push	 edx
  01a73	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a76	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  01a79	51		 push	 ecx
  01a7a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01a7d	52		 push	 edx
  01a7e	e8 00 00 00 00	 call	 _P_InstaThrust
  01a83	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN256@P_MobjThin:

; 5561 : 			}
; 5562 : 			break;

  01a86	e9 06 03 00 00	 jmp	 $LN8@P_MobjThin
$LN257@P_MobjThin:

; 5563 : 		case MT_TURRET:
; 5564 : 			P_MobjCheckWater(mobj);

  01a8b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a8e	50		 push	 eax
  01a8f	e8 00 00 00 00	 call	 _P_MobjCheckWater
  01a94	83 c4 04	 add	 esp, 4

; 5565 : 			P_CheckPosition(mobj, mobj->x, mobj->y);

  01a97	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a9a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01a9d	51		 push	 ecx
  01a9e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01aa1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01aa4	50		 push	 eax
  01aa5	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01aa8	51		 push	 ecx
  01aa9	e8 00 00 00 00	 call	 _P_CheckPosition
  01aae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5566 : 			mobj->floorz = tmfloorz;

  01ab1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ab4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tmfloorz
  01aba	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 5567 : 			mobj->ceilingz = tmceilingz;

  01abd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ac0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tmceilingz
  01ac6	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 5568 : 
; 5569 : 			if ((mobj->eflags & MFE_UNDERWATER) && mobj->health > 0)

  01ac9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01acc	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01ad2	83 e1 08	 and	 ecx, 8
  01ad5	74 4f		 je	 SHORT $LN258@P_MobjThin
  01ad7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ada	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  01ae1	7e 43		 jle	 SHORT $LN258@P_MobjThin

; 5570 : 			{
; 5571 : 				P_SetMobjState(mobj, mobj->info->deathstate);

  01ae3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ae6	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01aec	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01aef	52		 push	 edx
  01af0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01af3	50		 push	 eax
  01af4	e8 00 00 00 00	 call	 _P_SetMobjState
  01af9	83 c4 08	 add	 esp, 8

; 5572 : 				mobj->health = 0;

  01afc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01aff	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 5573 : 				mobj->flags2 &= ~MF2_FIRING;

  01b09	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01b0c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01b12	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  01b18	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01b1b	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 5574 : 			}

  01b21	e9 84 01 00 00	 jmp	 $LN260@P_MobjThin
$LN258@P_MobjThin:

; 5575 : 			else if (mobj->health > 0 && mobj->z + mobj->height > mobj->ceilingz) // Crushed

  01b26	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01b29	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  01b30	0f 8e 74 01 00
	00		 jle	 $LN260@P_MobjThin
  01b36	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01b39	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01b3c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01b3f	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  01b42	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01b45	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  01b48	0f 8e 5c 01 00
	00		 jle	 $LN260@P_MobjThin

; 5576 : 			{
; 5577 : 				INT32 i,j;
; 5578 : 				fixed_t ns;
; 5579 : 				fixed_t x,y,z;
; 5580 : 				mobj_t *mo2;
; 5581 : 
; 5582 : 				z = mobj->subsector->sector->floorheight + 64*FRACUNIT;

  01b4e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01b51	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01b54	8b 11		 mov	 edx, DWORD PTR [ecx]
  01b56	8b 02		 mov	 eax, DWORD PTR [edx]
  01b58	05 00 00 40 00	 add	 eax, 4194304		; 00400000H
  01b5d	89 45 88	 mov	 DWORD PTR _z$21[ebp], eax

; 5583 : 				for (j = 0; j < 2; j++)

  01b60	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _j$25[ebp], 0
  01b67	eb 09		 jmp	 SHORT $LN15@P_MobjThin
$LN13@P_MobjThin:
  01b69	8b 45 98	 mov	 eax, DWORD PTR _j$25[ebp]
  01b6c	83 c0 01	 add	 eax, 1
  01b6f	89 45 98	 mov	 DWORD PTR _j$25[ebp], eax
$LN15@P_MobjThin:
  01b72	83 7d 98 02	 cmp	 DWORD PTR _j$25[ebp], 2
  01b76	0f 8d f0 00 00
	00		 jge	 $LN14@P_MobjThin

; 5584 : 				{
; 5585 : 					for (i = 0; i < 32; i++)

  01b7c	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _i$26[ebp], 0
  01b83	eb 09		 jmp	 SHORT $LN18@P_MobjThin
$LN16@P_MobjThin:
  01b85	8b 45 9c	 mov	 eax, DWORD PTR _i$26[ebp]
  01b88	83 c0 01	 add	 eax, 1
  01b8b	89 45 9c	 mov	 DWORD PTR _i$26[ebp], eax
$LN18@P_MobjThin:
  01b8e	83 7d 9c 20	 cmp	 DWORD PTR _i$26[ebp], 32 ; 00000020H
  01b92	0f 8d c4 00 00
	00		 jge	 $LN17@P_MobjThin

; 5586 : 					{
; 5587 : 						const angle_t fa = (i*FINEANGLES/16) & FINEMASK;

  01b98	8b 45 9c	 mov	 eax, DWORD PTR _i$26[ebp]
  01b9b	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  01b9e	99		 cdq
  01b9f	83 e2 0f	 and	 edx, 15			; 0000000fH
  01ba2	03 c2		 add	 eax, edx
  01ba4	c1 f8 04	 sar	 eax, 4
  01ba7	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  01bac	89 45 80	 mov	 DWORD PTR _fa$19[ebp], eax

; 5588 : 						ns = 64 * FRACUNIT;

  01baf	c7 45 94 00 00
	40 00		 mov	 DWORD PTR _ns$24[ebp], 4194304 ; 00400000H

; 5589 : 						x = mobj->x + FixedMul(FINESINE(fa),ns);

  01bb6	8b 45 94	 mov	 eax, DWORD PTR _ns$24[ebp]
  01bb9	50		 push	 eax
  01bba	8b 4d 80	 mov	 ecx, DWORD PTR _fa$19[ebp]
  01bbd	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  01bc4	52		 push	 edx
  01bc5	e8 00 00 00 00	 call	 _FixedMul
  01bca	83 c4 08	 add	 esp, 8
  01bcd	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01bd0	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  01bd3	89 45 90	 mov	 DWORD PTR _x$23[ebp], eax

; 5590 : 						y = mobj->y + FixedMul(FINECOSINE(fa),ns);

  01bd6	8b 45 94	 mov	 eax, DWORD PTR _ns$24[ebp]
  01bd9	50		 push	 eax
  01bda	8b 4d 80	 mov	 ecx, DWORD PTR _fa$19[ebp]
  01bdd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  01be3	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  01be6	50		 push	 eax
  01be7	e8 00 00 00 00	 call	 _FixedMul
  01bec	83 c4 08	 add	 esp, 8
  01bef	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01bf2	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  01bf5	89 45 8c	 mov	 DWORD PTR _y$22[ebp], eax

; 5591 : 
; 5592 : 						mo2 = P_SpawnMobj(x, y, z, MT_EXPLODE);

  01bf8	68 0e 01 00 00	 push	 270			; 0000010eH
  01bfd	8b 45 88	 mov	 eax, DWORD PTR _z$21[ebp]
  01c00	50		 push	 eax
  01c01	8b 4d 8c	 mov	 ecx, DWORD PTR _y$22[ebp]
  01c04	51		 push	 ecx
  01c05	8b 55 90	 mov	 edx, DWORD PTR _x$23[ebp]
  01c08	52		 push	 edx
  01c09	e8 00 00 00 00	 call	 _P_SpawnMobj
  01c0e	83 c4 10	 add	 esp, 16			; 00000010H
  01c11	89 45 84	 mov	 DWORD PTR _mo2$20[ebp], eax

; 5593 : 						ns = 16 * FRACUNIT;

  01c14	c7 45 94 00 00
	10 00		 mov	 DWORD PTR _ns$24[ebp], 1048576 ; 00100000H

; 5594 : 						mo2->momx = FixedMul(FINESINE(fa),ns);

  01c1b	8b 45 94	 mov	 eax, DWORD PTR _ns$24[ebp]
  01c1e	50		 push	 eax
  01c1f	8b 4d 80	 mov	 ecx, DWORD PTR _fa$19[ebp]
  01c22	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  01c29	52		 push	 edx
  01c2a	e8 00 00 00 00	 call	 _FixedMul
  01c2f	83 c4 08	 add	 esp, 8
  01c32	8b 4d 84	 mov	 ecx, DWORD PTR _mo2$20[ebp]
  01c35	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 5595 : 						mo2->momy = FixedMul(FINECOSINE(fa),ns);

  01c38	8b 45 94	 mov	 eax, DWORD PTR _ns$24[ebp]
  01c3b	50		 push	 eax
  01c3c	8b 4d 80	 mov	 ecx, DWORD PTR _fa$19[ebp]
  01c3f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  01c45	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  01c48	50		 push	 eax
  01c49	e8 00 00 00 00	 call	 _FixedMul
  01c4e	83 c4 08	 add	 esp, 8
  01c51	8b 4d 84	 mov	 ecx, DWORD PTR _mo2$20[ebp]
  01c54	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 5596 : 					}

  01c57	e9 29 ff ff ff	 jmp	 $LN16@P_MobjThin
$LN17@P_MobjThin:

; 5597 : 					z -= 32*FRACUNIT;

  01c5c	8b 45 88	 mov	 eax, DWORD PTR _z$21[ebp]
  01c5f	2d 00 00 20 00	 sub	 eax, 2097152		; 00200000H
  01c64	89 45 88	 mov	 DWORD PTR _z$21[ebp], eax

; 5598 : 				}

  01c67	e9 fd fe ff ff	 jmp	 $LN13@P_MobjThin
$LN14@P_MobjThin:

; 5599 : 				P_SetMobjState(mobj, mobj->info->deathstate);

  01c6c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01c6f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01c75	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01c78	52		 push	 edx
  01c79	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01c7c	50		 push	 eax
  01c7d	e8 00 00 00 00	 call	 _P_SetMobjState
  01c82	83 c4 08	 add	 esp, 8

; 5600 : 				mobj->health = 0;

  01c85	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01c88	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 5601 : 				mobj->flags2 &= ~MF2_FIRING;

  01c92	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01c95	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01c9b	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  01ca1	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01ca4	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN260@P_MobjThin:

; 5602 : 			}
; 5603 : 			break;

  01caa	e9 e2 00 00 00	 jmp	 $LN8@P_MobjThin
$LN261@P_MobjThin:

; 5604 : 		case MT_BLUEFLAG:
; 5605 : 		case MT_REDFLAG:
; 5606 : 			{
; 5607 : 				sector_t *sec2;
; 5608 : 				sec2 = P_ThingOnSpecial3DFloor(mobj);

  01caf	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01cb2	50		 push	 eax
  01cb3	e8 00 00 00 00	 call	 _P_ThingOnSpecial3DFloor
  01cb8	83 c4 04	 add	 esp, 4
  01cbb	89 85 7c ff ff
	ff		 mov	 DWORD PTR _sec2$18[ebp], eax

; 5609 : 				if ((sec2 && GETSECSPECIAL(sec2->special, 4) == 2) || (GETSECSPECIAL(mobj->subsector->sector->special, 4) == 2))

  01cc1	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _sec2$18[ebp], 0
  01cc8	74 15		 je	 SHORT $LN265@P_MobjThin
  01cca	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _sec2$18[ebp]
  01cd0	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  01cd4	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  01cd7	83 e1 0f	 and	 ecx, 15			; 0000000fH
  01cda	83 f9 02	 cmp	 ecx, 2
  01cdd	74 17		 je	 SHORT $LN264@P_MobjThin
$LN265@P_MobjThin:
  01cdf	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ce2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01ce5	8b 11		 mov	 edx, DWORD PTR [ecx]
  01ce7	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  01ceb	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  01cee	83 e0 0f	 and	 eax, 15			; 0000000fH
  01cf1	83 f8 02	 cmp	 eax, 2
  01cf4	75 0d		 jne	 SHORT $LN263@P_MobjThin
$LN264@P_MobjThin:

; 5610 : 					mobj->fuse = 1; // Return to base.

  01cf6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01cf9	c7 80 bc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+188], 1
$LN263@P_MobjThin:

; 5611 : 				break;

  01d03	e9 89 00 00 00	 jmp	 $LN8@P_MobjThin
$LN266@P_MobjThin:

; 5612 : 			}
; 5613 : 		case MT_CANNONBALL:
; 5614 : #ifdef FLOORSPLATS
; 5615 : 			R_AddFloorSplat(mobj->tracer->subsector, mobj->tracer, "TARGET", mobj->tracer->x,
; 5616 : 				mobj->tracer->y, mobj->tracer->floorz, SPLATDRAWMODE_SHADE);
; 5617 : #endif
; 5618 : 			break;

  01d08	e9 84 00 00 00	 jmp	 $LN8@P_MobjThin
$LN267@P_MobjThin:

; 5619 : 		case MT_SPINFIRE:
; 5620 : 			if (mobj->eflags & MFE_VERTICALFLIP)

  01d0d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d10	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01d16	83 e1 20	 and	 ecx, 32			; 00000020H
  01d19	74 14		 je	 SHORT $LN268@P_MobjThin

; 5621 : 				mobj->z = mobj->ceilingz - mobj->height;

  01d1b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d1e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01d21	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  01d24	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  01d27	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d2a	89 50 18	 mov	 DWORD PTR [eax+24], edx
  01d2d	eb 0f		 jmp	 SHORT $LN269@P_MobjThin
$LN268@P_MobjThin:

; 5622 : 			else
; 5623 : 				mobj->z = mobj->floorz+1;

  01d2f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d32	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  01d35	83 c1 01	 add	 ecx, 1
  01d38	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01d3b	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN269@P_MobjThin:

; 5624 : 			// THERE IS NO BREAK HERE ON PURPOSE
; 5625 : 		default:
; 5626 : 			// check mobj against possible water content, before movement code
; 5627 : 			P_MobjCheckWater(mobj);

  01d3e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d41	50		 push	 eax
  01d42	e8 00 00 00 00	 call	 _P_MobjCheckWater
  01d47	83 c4 04	 add	 esp, 4

; 5628 : 
; 5629 : 			// Extinguish fire objects in water
; 5630 : 			if ((mobj->flags & MF_FIRE) && mobj->type != MT_PUMA
; 5631 : 				&& ((mobj->eflags & MFE_UNDERWATER) || (mobj->eflags & MFE_TOUCHWATER)))

  01d4a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d4d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01d50	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  01d56	74 39		 je	 SHORT $LN271@P_MobjThin
  01d58	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d5b	81 78 7c e9 00
	00 00		 cmp	 DWORD PTR [eax+124], 233 ; 000000e9H
  01d62	74 2d		 je	 SHORT $LN271@P_MobjThin
  01d64	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d67	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01d6d	83 e1 08	 and	 ecx, 8
  01d70	75 0e		 jne	 SHORT $LN272@P_MobjThin
  01d72	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d75	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01d7b	83 e1 04	 and	 ecx, 4
  01d7e	74 11		 je	 SHORT $LN271@P_MobjThin
$LN272@P_MobjThin:

; 5632 : 				P_SetMobjState(mobj, S_DISS);

  01d80	68 4f 06 00 00	 push	 1615			; 0000064fH
  01d85	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d88	50		 push	 eax
  01d89	e8 00 00 00 00	 call	 _P_SetMobjState
  01d8e	83 c4 08	 add	 esp, 8
$LN271@P_MobjThin:
$LN8@P_MobjThin:

; 5633 : 			break;
; 5634 : 	}
; 5635 : 
; 5636 : 	if (mobj->flags2 & MF2_FIRING && mobj->target)

  01d91	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01d94	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01d9a	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  01da0	0f 84 2e 02 00
	00		 je	 $LN281@P_MobjThin
  01da6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01da9	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  01db0	0f 84 1e 02 00
	00		 je	 $LN281@P_MobjThin

; 5637 : 	{
; 5638 : 		if (mobj->health > 0 && (leveltime & 1)) // Fire mode

  01db6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01db9	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  01dc0	0f 8e cc 01 00
	00		 jle	 $LN274@P_MobjThin
  01dc6	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01dcb	83 e0 01	 and	 eax, 1
  01dce	0f 84 be 01 00
	00		 je	 $LN274@P_MobjThin

; 5639 : 		{
; 5640 : 			mobj_t *missile;
; 5641 : 
; 5642 : 			if (mobj->target->player && mobj->target->player->nightstime)

  01dd4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01dd7	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01ddd	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  01de4	0f 84 e4 00 00
	00		 je	 $LN276@P_MobjThin
  01dea	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ded	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01df3	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  01df9	83 ba c4 01 00
	00 00		 cmp	 DWORD PTR [edx+452], 0
  01e00	0f 84 c8 00 00
	00		 je	 $LN276@P_MobjThin

; 5643 : 			{
; 5644 : 				fixed_t oldval = mobjinfo[mobj->eflags >> 16].speed;

  01e06	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01e09	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01e0f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  01e12	6b d1 60	 imul	 edx, ecx, 96
  01e15	8b 82 3c 00 00
	00		 mov	 eax, DWORD PTR _mobjinfo[edx+60]
  01e1b	89 85 74 ff ff
	ff		 mov	 DWORD PTR _oldval$16[ebp], eax

; 5645 : 
; 5646 : 				mobj->angle = R_PointToAngle2(mobj->x, mobj->y, mobj->target->x+mobj->target->momx, mobj->target->y+mobj->target->momy);

  01e21	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01e24	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01e2a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01e2d	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  01e33	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  01e36	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  01e39	51		 push	 ecx
  01e3a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01e3d	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  01e43	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01e46	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  01e4c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  01e4f	03 42 48	 add	 eax, DWORD PTR [edx+72]
  01e52	50		 push	 eax
  01e53	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01e56	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01e59	52		 push	 edx
  01e5a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01e5d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01e60	51		 push	 ecx
  01e61	e8 00 00 00 00	 call	 _R_PointToAngle2
  01e66	83 c4 10	 add	 esp, 16			; 00000010H
  01e69	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01e6c	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 5647 : 				mobjinfo[mobj->eflags >> 16].speed = MAXMOVE;

  01e6f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01e72	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01e78	c1 e9 10	 shr	 ecx, 16			; 00000010H
  01e7b	6b d1 60	 imul	 edx, ecx, 96
  01e7e	c7 82 3c 00 00
	00 00 00 3c 00	 mov	 DWORD PTR _mobjinfo[edx+60], 3932160 ; 003c0000H

; 5648 : 				missile = P_SpawnMissile(mobj, mobj->target, mobj->eflags >> 16); // OH YUCK!

  01e88	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01e8b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01e91	c1 e9 10	 shr	 ecx, 16			; 00000010H
  01e94	51		 push	 ecx
  01e95	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01e98	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  01e9e	50		 push	 eax
  01e9f	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01ea2	51		 push	 ecx
  01ea3	e8 00 00 00 00	 call	 _P_SpawnMissile
  01ea8	83 c4 0c	 add	 esp, 12			; 0000000cH
  01eab	89 85 78 ff ff
	ff		 mov	 DWORD PTR _missile$17[ebp], eax

; 5649 : 				mobjinfo[mobj->eflags >> 16].speed = oldval;

  01eb1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01eb4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01eba	c1 e9 10	 shr	 ecx, 16			; 00000010H
  01ebd	6b d1 60	 imul	 edx, ecx, 96
  01ec0	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _oldval$16[ebp]
  01ec6	89 82 3c 00 00
	00		 mov	 DWORD PTR _mobjinfo[edx+60], eax

; 5650 : 			}

  01ecc	eb 5f		 jmp	 SHORT $LN277@P_MobjThin
$LN276@P_MobjThin:

; 5651 : 			else
; 5652 : 			{
; 5653 : 				mobj->angle = R_PointToAngle2(mobj->x, mobj->y, mobj->target->x, mobj->target->y);

  01ece	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ed1	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01ed7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01eda	52		 push	 edx
  01edb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ede	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01ee4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01ee7	52		 push	 edx
  01ee8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01eeb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01eee	51		 push	 ecx
  01eef	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01ef2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01ef5	50		 push	 eax
  01ef6	e8 00 00 00 00	 call	 _R_PointToAngle2
  01efb	83 c4 10	 add	 esp, 16			; 00000010H
  01efe	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01f01	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 5654 : 				missile = P_SpawnMissile(mobj, mobj->target, mobj->eflags >> 16); // OH YUCK!

  01f04	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01f07	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01f0d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  01f10	51		 push	 ecx
  01f11	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01f14	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  01f1a	50		 push	 eax
  01f1b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01f1e	51		 push	 ecx
  01f1f	e8 00 00 00 00	 call	 _P_SpawnMissile
  01f24	83 c4 0c	 add	 esp, 12			; 0000000cH
  01f27	89 85 78 ff ff
	ff		 mov	 DWORD PTR _missile$17[ebp], eax
$LN277@P_MobjThin:

; 5655 : 			}
; 5656 : 
; 5657 : 			if (missile)

  01f2d	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _missile$17[ebp], 0
  01f34	74 5a		 je	 SHORT $LN280@P_MobjThin

; 5658 : 			{
; 5659 : 				if (mobj->flags2 & MF2_SUPERFIRE)

  01f36	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01f39	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01f3f	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  01f45	74 1e		 je	 SHORT $LN279@P_MobjThin

; 5660 : 					missile->flags2 |= MF2_SUPERFIRE;

  01f47	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _missile$17[ebp]
  01f4d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01f53	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  01f59	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _missile$17[ebp]
  01f5f	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN279@P_MobjThin:

; 5661 : 
; 5662 : 				if (mobj->info->attacksound)

  01f65	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01f68	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01f6e	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  01f72	74 1c		 je	 SHORT $LN280@P_MobjThin

; 5663 : 					S_StartSound(missile, mobj->info->attacksound);

  01f74	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01f77	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01f7d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01f80	52		 push	 edx
  01f81	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _missile$17[ebp]
  01f87	50		 push	 eax
  01f88	e8 00 00 00 00	 call	 _S_StartSound
  01f8d	83 c4 08	 add	 esp, 8
$LN280@P_MobjThin:

; 5664 : 			}
; 5665 : 		}

  01f90	eb 42		 jmp	 SHORT $LN281@P_MobjThin
$LN274@P_MobjThin:

; 5666 : 		else if (mobj->health > 0)

  01f92	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01f95	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  01f9c	7e 36		 jle	 SHORT $LN281@P_MobjThin

; 5667 : 			mobj->angle = R_PointToAngle2(mobj->x, mobj->y, mobj->target->x, mobj->target->y);

  01f9e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01fa1	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01fa7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01faa	52		 push	 edx
  01fab	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01fae	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01fb4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01fb7	52		 push	 edx
  01fb8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01fbb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01fbe	51		 push	 ecx
  01fbf	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  01fc2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01fc5	50		 push	 eax
  01fc6	e8 00 00 00 00	 call	 _R_PointToAngle2
  01fcb	83 c4 10	 add	 esp, 16			; 00000010H
  01fce	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01fd1	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN281@P_MobjThin:

; 5668 : 	}
; 5669 : 
; 5670 : 	if (mobj->flags & MF_AMBIENT)

  01fd4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01fd7	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01fda	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  01fe0	74 41		 je	 SHORT $LN282@P_MobjThin

; 5671 : 	{
; 5672 : 		if (!(leveltime % mobj->health) && mobj->info->seesound)

  01fe2	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01fe5	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01fea	33 d2		 xor	 edx, edx
  01fec	f7 b1 8c 00 00
	00		 div	 DWORD PTR [ecx+140]
  01ff2	85 d2		 test	 edx, edx
  01ff4	75 28		 jne	 SHORT $LN283@P_MobjThin
  01ff6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  01ff9	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01fff	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  02003	74 19		 je	 SHORT $LN283@P_MobjThin

; 5673 : 			S_StartSound(mobj, mobj->info->seesound);

  02005	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02008	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0200e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02011	52		 push	 edx
  02012	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02015	50		 push	 eax
  02016	e8 00 00 00 00	 call	 _S_StartSound
  0201b	83 c4 08	 add	 esp, 8
$LN283@P_MobjThin:

; 5674 : 		return;

  0201e	e9 5e 0b 00 00	 jmp	 $LN54@P_MobjThin
$LN282@P_MobjThin:

; 5675 : 	}
; 5676 : 
; 5677 : 	// Check fuse
; 5678 : 	if (mobj->fuse)

  02023	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02026	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  0202d	0f 84 c5 08 00
	00		 je	 $LN19@P_MobjThin

; 5679 : 	{
; 5680 : 		mobj->fuse--;

  02033	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02036	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  0203c	83 e9 01	 sub	 ecx, 1
  0203f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02042	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx

; 5681 : 		if (!mobj->fuse)

  02048	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0204b	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  02052	0f 85 a0 08 00
	00		 jne	 $LN19@P_MobjThin

; 5682 : 		{
; 5683 : 			subsector_t *ss;
; 5684 : 			fixed_t x, y, z;
; 5685 : 			mobj_t *flagmo, *newmobj;
; 5686 : 
; 5687 : 			switch (mobj->type)

  02058	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0205b	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0205e	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv1457[ebp], ecx
  02064	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR tv1457[ebp]
  0206a	83 ea 1b	 sub	 edx, 27			; 0000001bH
  0206d	89 95 f8 fd ff
	ff		 mov	 DWORD PTR tv1457[ebp], edx
  02073	81 bd f8 fd ff
	ff e6 00 00 00	 cmp	 DWORD PTR tv1457[ebp], 230 ; 000000e6H
  0207d	0f 87 47 08 00
	00		 ja	 $LN341@P_MobjThin
  02083	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR tv1457[ebp]
  02089	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN378@P_MobjThin[eax]
  02090	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN379@P_MobjThin[ecx*4]
$LN286@P_MobjThin:

; 5688 : 			{
; 5689 : 				UINT8 prandom;
; 5690 : 
; 5691 : 				// gargoyle and snowman handled in P_PushableThinker, not here
; 5692 : 				case MT_THROWNGRENADE:
; 5693 : 					P_SetMobjState(mobj, mobj->info->deathstate);

  02097	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0209a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  020a0	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  020a3	52		 push	 edx
  020a4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  020a7	50		 push	 eax
  020a8	e8 00 00 00 00	 call	 _P_SetMobjState
  020ad	83 c4 08	 add	 esp, 8

; 5694 : 					break;

  020b0	e9 43 08 00 00	 jmp	 $LN19@P_MobjThin
$LN287@P_MobjThin:

; 5695 : 				case MT_BLUEFLAG:
; 5696 : 				case MT_REDFLAG:
; 5697 : 					if (mobj->spawnpoint)

  020b5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  020b8	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  020bf	0f 84 5c 01 00
	00		 je	 $LN292@P_MobjThin

; 5698 : 					{
; 5699 : 						x = mobj->spawnpoint->x << FRACBITS;

  020c5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  020c8	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  020ce	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  020d1	c1 e2 10	 shl	 edx, 16			; 00000010H
  020d4	89 95 6c ff ff
	ff		 mov	 DWORD PTR _x$14[ebp], edx

; 5700 : 						y = mobj->spawnpoint->y << FRACBITS;

  020da	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  020dd	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  020e3	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  020e7	c1 e2 10	 shl	 edx, 16			; 00000010H
  020ea	89 95 68 ff ff
	ff		 mov	 DWORD PTR _y$13[ebp], edx

; 5701 : 						ss = R_PointInSubsector(x, y);

  020f0	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  020f6	50		 push	 eax
  020f7	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _x$14[ebp]
  020fd	51		 push	 ecx
  020fe	e8 00 00 00 00	 call	 _R_PointInSubsector
  02103	83 c4 08	 add	 esp, 8
  02106	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ss$15[ebp], eax

; 5702 : 						z = ss->sector->floorheight;

  0210c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ss$15[ebp]
  02112	8b 08		 mov	 ecx, DWORD PTR [eax]
  02114	8b 11		 mov	 edx, DWORD PTR [ecx]
  02116	89 95 64 ff ff
	ff		 mov	 DWORD PTR _z$12[ebp], edx

; 5703 : 						if (mobj->spawnpoint->z)

  0211c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0211f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02125	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  02129	85 d2		 test	 edx, edx
  0212b	74 1c		 je	 SHORT $LN290@P_MobjThin

; 5704 : 							z += mobj->spawnpoint->z << FRACBITS;

  0212d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02130	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  02136	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  0213a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0213d	03 95 64 ff ff
	ff		 add	 edx, DWORD PTR _z$12[ebp]
  02143	89 95 64 ff ff
	ff		 mov	 DWORD PTR _z$12[ebp], edx
$LN290@P_MobjThin:

; 5705 : 						flagmo = P_SpawnMobj(x, y, z, mobj->type);

  02149	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0214c	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0214f	51		 push	 ecx
  02150	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _z$12[ebp]
  02156	52		 push	 edx
  02157	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  0215d	50		 push	 eax
  0215e	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _x$14[ebp]
  02164	51		 push	 ecx
  02165	e8 00 00 00 00	 call	 _P_SpawnMobj
  0216a	83 c4 10	 add	 esp, 16			; 00000010H
  0216d	89 85 60 ff ff
	ff		 mov	 DWORD PTR _flagmo$11[ebp], eax

; 5706 : 						flagmo->spawnpoint = mobj->spawnpoint;

  02173	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _flagmo$11[ebp]
  02179	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0217c	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  02182	89 90 ac 00 00
	00		 mov	 DWORD PTR [eax+172], edx

; 5707 : 
; 5708 : 						if (mobj->type == MT_REDFLAG)

  02188	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0218b	83 78 7c 34	 cmp	 DWORD PTR [eax+124], 52	; 00000034H
  0218f	75 49		 jne	 SHORT $LN291@P_MobjThin

; 5709 : 						{
; 5710 : 							if (!(mobj->flags2 & MF2_JUSTATTACKED))

  02191	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02194	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0219a	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  021a0	75 0d		 jne	 SHORT $LN293@P_MobjThin

; 5711 : 								CONS_Printf("The red flag has returned to base.\n");

  021a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OBMIMBDL@The?5red?5flag?5has?5returned?5to?5ba@
  021a7	e8 00 00 00 00	 call	 _CONS_Printf
  021ac	83 c4 04	 add	 esp, 4
$LN293@P_MobjThin:

; 5712 : 
; 5713 : 							if (players[consoleplayer].ctfteam == 1)

  021af	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  021b9	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR _players[eax+352], 1
  021c0	75 0c		 jne	 SHORT $LN294@P_MobjThin

; 5714 : 								S_StartSound(NULL, sfx_hoop1);

  021c2	6a 4f		 push	 79			; 0000004fH
  021c4	6a 00		 push	 0
  021c6	e8 00 00 00 00	 call	 _S_StartSound
  021cb	83 c4 08	 add	 esp, 8
$LN294@P_MobjThin:

; 5715 : 
; 5716 : 							redflag = NULL;

  021ce	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _redflag, 0

; 5717 : 						}

  021d8	eb 47		 jmp	 SHORT $LN292@P_MobjThin
$LN291@P_MobjThin:

; 5718 : 						else // MT_BLUEFLAG
; 5719 : 						{
; 5720 : 							if (!(mobj->flags2 & MF2_JUSTATTACKED))

  021da	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  021dd	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  021e3	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  021e9	75 0d		 jne	 SHORT $LN295@P_MobjThin

; 5721 : 								CONS_Printf("The blue flag has returned to base.\n");

  021eb	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DECHKNBK@The?5blue?5flag?5has?5returned?5to?5b@
  021f0	e8 00 00 00 00	 call	 _CONS_Printf
  021f5	83 c4 04	 add	 esp, 4
$LN295@P_MobjThin:

; 5722 : 
; 5723 : 							if (players[consoleplayer].ctfteam == 2)

  021f8	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  02202	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR _players[eax+352], 2
  02209	75 0c		 jne	 SHORT $LN296@P_MobjThin

; 5724 : 								S_StartSound(NULL, sfx_hoop1);

  0220b	6a 4f		 push	 79			; 0000004fH
  0220d	6a 00		 push	 0
  0220f	e8 00 00 00 00	 call	 _S_StartSound
  02214	83 c4 08	 add	 esp, 8
$LN296@P_MobjThin:

; 5725 : 
; 5726 : 							blueflag = NULL;

  02217	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _blueflag, 0
$LN292@P_MobjThin:

; 5727 : 						}
; 5728 : 					}
; 5729 : 					P_SetMobjState(mobj, S_DISS);

  02221	68 4f 06 00 00	 push	 1615			; 0000064fH
  02226	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02229	50		 push	 eax
  0222a	e8 00 00 00 00	 call	 _P_SetMobjState
  0222f	83 c4 08	 add	 esp, 8

; 5730 : 					break;

  02232	e9 c1 06 00 00	 jmp	 $LN19@P_MobjThin
$LN297@P_MobjThin:

; 5731 : 				case MT_YELLOWTV: // Ring shield box
; 5732 : 				case MT_BLUETV: // Force shield box
; 5733 : 				case MT_GREENTV: // Water shield box
; 5734 : 				case MT_BLACKTV: // Bomb shield box
; 5735 : 				case MT_WHITETV: // Jump shield box
; 5736 : 				case MT_SNEAKERTV: // Super Sneaker box
; 5737 : 				case MT_SUPERRINGBOX: // 10-Ring box
; 5738 : 				case MT_REDRINGBOX: // Red Team 10-Ring box
; 5739 : 				case MT_BLUERINGBOX: // Blue Team 10-Ring box
; 5740 : 				case MT_INV: // Invincibility box
; 5741 : 				case MT_MIXUPBOX: // Teleporter Mixup box
; 5742 : 				case MT_RECYCLETV: // Recycler box
; 5743 : 				case MT_PRUP: // 1up!
; 5744 : 				case MT_EGGMANBOX:
; 5745 : 				case MT_GRAVITYBOX:
; 5746 : 					P_SetMobjState(mobj, S_DISS); // make sure they disappear

  02237	68 4f 06 00 00	 push	 1615			; 0000064fH
  0223c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0223f	50		 push	 eax
  02240	e8 00 00 00 00	 call	 _P_SetMobjState
  02245	83 c4 08	 add	 esp, 8

; 5747 : 
; 5748 : 					if ((mobj->flags & MF_AMBUSH) || (mobj->flags2 & MF2_STRONGBOX))

  02248	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0224b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0224e	83 e1 20	 and	 ecx, 32			; 00000020H
  02251	75 15		 jne	 SHORT $LN314@P_MobjThin
  02253	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02256	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0225c	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  02262	0f 84 e1 05 00
	00		 je	 $LN312@P_MobjThin
$LN314@P_MobjThin:

; 5749 : 					{
; 5750 : 						mobjtype_t spawnchance[64];
; 5751 : 						INT32 i = 0;

  02268	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$7[ebp], 0

; 5752 : 						INT32 oldi = 0;

  02272	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _oldi$6[ebp], 0

; 5753 : 						INT32 increment = 0;

  0227c	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 0

; 5754 : 						INT32 numchoices = 0;

  02286	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _numchoices$4[ebp], 0

; 5755 : 
; 5756 : 						prandom = P_Random(); // Gotta love those random numbers!

  02290	e8 00 00 00 00	 call	 _P_Random
  02295	88 85 5b ff ff
	ff		 mov	 BYTE PTR _prandom$9[ebp], al

; 5757 : 
; 5758 : 						//if (cv_superring.value)
; 5759 : 						{
; 5760 : 							oldi = i;

  0229b	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  022a1	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5761 : 
; 5762 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  022a7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  022aa	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  022b0	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  022b6	74 0c		 je	 SHORT $LN315@P_MobjThin

; 5763 : 								increment = 0;

  022b8	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 0
  022c2	eb 0a		 jmp	 SHORT $LN316@P_MobjThin
$LN315@P_MobjThin:

; 5764 : 							else //weak box
; 5765 : 								increment = 16;

  022c4	c7 85 4c fe ff
	ff 10 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 16 ; 00000010H
$LN316@P_MobjThin:

; 5766 : 
; 5767 : 							for (; i < oldi + increment; i++)

  022ce	eb 0f		 jmp	 SHORT $LN23@P_MobjThin
$LN21@P_MobjThin:
  022d0	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  022d6	83 c0 01	 add	 eax, 1
  022d9	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN23@P_MobjThin:
  022df	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  022e5	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  022eb	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  022f1	7d 22		 jge	 SHORT $LN22@P_MobjThin

; 5768 : 							{
; 5769 : 								spawnchance[i] = MT_SUPERRINGBOX;

  022f3	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  022f9	c7 84 85 58 fe
	ff ff 4e 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 78 ; 0000004eH

; 5770 : 								numchoices++;

  02304	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  0230a	83 c0 01	 add	 eax, 1
  0230d	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5771 : 							}

  02313	eb bb		 jmp	 SHORT $LN21@P_MobjThin
$LN22@P_MobjThin:

; 5772 : 						}
; 5773 : 						//if (cv_supersneakers.value)
; 5774 : 						{
; 5775 : 							oldi = i;

  02315	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  0231b	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5776 : 
; 5777 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  02321	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02324	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0232a	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  02330	74 0c		 je	 SHORT $LN317@P_MobjThin

; 5778 : 								increment = 0;

  02332	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 0
  0233c	eb 0a		 jmp	 SHORT $LN318@P_MobjThin
$LN317@P_MobjThin:

; 5779 : 							else //weak box
; 5780 : 								increment = 14;

  0233e	c7 85 4c fe ff
	ff 0e 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 14 ; 0000000eH
$LN318@P_MobjThin:

; 5781 : 
; 5782 : 							for (; i < oldi + increment; i++)

  02348	eb 0f		 jmp	 SHORT $LN26@P_MobjThin
$LN24@P_MobjThin:
  0234a	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02350	83 c0 01	 add	 eax, 1
  02353	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN26@P_MobjThin:
  02359	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  0235f	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  02365	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  0236b	7d 22		 jge	 SHORT $LN25@P_MobjThin

; 5783 : 							{
; 5784 : 								spawnchance[i] = MT_SNEAKERTV;

  0236d	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02373	c7 84 85 58 fe
	ff ff 51 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 81 ; 00000051H

; 5785 : 								numchoices++;

  0237e	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  02384	83 c0 01	 add	 eax, 1
  02387	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5786 : 							}

  0238d	eb bb		 jmp	 SHORT $LN24@P_MobjThin
$LN25@P_MobjThin:

; 5787 : 						}
; 5788 : 						//if (cv_invincibility.value)
; 5789 : 						{
; 5790 : 							oldi = i;

  0238f	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02395	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5791 : 
; 5792 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  0239b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0239e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  023a4	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  023aa	74 0c		 je	 SHORT $LN319@P_MobjThin

; 5793 : 								increment = 6;

  023ac	c7 85 4c fe ff
	ff 06 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 6
  023b6	eb 0a		 jmp	 SHORT $LN320@P_MobjThin
$LN319@P_MobjThin:

; 5794 : 							else //weak box
; 5795 : 								increment = 0;

  023b8	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 0
$LN320@P_MobjThin:

; 5796 : 
; 5797 : 							for (; i < oldi + increment; i++)

  023c2	eb 0f		 jmp	 SHORT $LN29@P_MobjThin
$LN27@P_MobjThin:
  023c4	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  023ca	83 c0 01	 add	 eax, 1
  023cd	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN29@P_MobjThin:
  023d3	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  023d9	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  023df	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  023e5	7d 22		 jge	 SHORT $LN28@P_MobjThin

; 5798 : 							{
; 5799 : 								spawnchance[i] = MT_INV;

  023e7	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  023ed	c7 84 85 58 fe
	ff ff 52 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 82 ; 00000052H

; 5800 : 								numchoices++;

  023f8	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  023fe	83 c0 01	 add	 eax, 1
  02401	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5801 : 							}

  02407	eb bb		 jmp	 SHORT $LN27@P_MobjThin
$LN28@P_MobjThin:

; 5802 : 						}
; 5803 : 						//if (cv_jumpshield.value)
; 5804 : 						{
; 5805 : 							oldi = i;

  02409	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  0240f	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5806 : 
; 5807 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  02415	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02418	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0241e	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  02424	74 0c		 je	 SHORT $LN321@P_MobjThin

; 5808 : 								increment = 12;

  02426	c7 85 4c fe ff
	ff 0c 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 12 ; 0000000cH
  02430	eb 0a		 jmp	 SHORT $LN322@P_MobjThin
$LN321@P_MobjThin:

; 5809 : 							else //weak box
; 5810 : 								increment = 12;

  02432	c7 85 4c fe ff
	ff 0c 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 12 ; 0000000cH
$LN322@P_MobjThin:

; 5811 : 
; 5812 : 							for (; i < oldi + increment; i++)

  0243c	eb 0f		 jmp	 SHORT $LN32@P_MobjThin
$LN30@P_MobjThin:
  0243e	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02444	83 c0 01	 add	 eax, 1
  02447	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN32@P_MobjThin:
  0244d	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  02453	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  02459	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  0245f	7d 22		 jge	 SHORT $LN31@P_MobjThin

; 5813 : 							{
; 5814 : 								spawnchance[i] = MT_WHITETV;

  02461	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02467	c7 84 85 58 fe
	ff ff 57 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 87 ; 00000057H

; 5815 : 								numchoices++;

  02472	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  02478	83 c0 01	 add	 eax, 1
  0247b	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5816 : 							}

  02481	eb bb		 jmp	 SHORT $LN30@P_MobjThin
$LN31@P_MobjThin:

; 5817 : 						}
; 5818 : 						//if (cv_watershield.value)
; 5819 : 						{
; 5820 : 							oldi = i;

  02483	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02489	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5821 : 
; 5822 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  0248f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02492	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02498	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0249e	74 0c		 je	 SHORT $LN323@P_MobjThin

; 5823 : 								increment = 12;

  024a0	c7 85 4c fe ff
	ff 0c 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 12 ; 0000000cH
  024aa	eb 0a		 jmp	 SHORT $LN324@P_MobjThin
$LN323@P_MobjThin:

; 5824 : 							else //weak box
; 5825 : 								increment = 12;

  024ac	c7 85 4c fe ff
	ff 0c 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 12 ; 0000000cH
$LN324@P_MobjThin:

; 5826 : 
; 5827 : 							for (; i < oldi + increment; i++)

  024b6	eb 0f		 jmp	 SHORT $LN35@P_MobjThin
$LN33@P_MobjThin:
  024b8	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  024be	83 c0 01	 add	 eax, 1
  024c1	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN35@P_MobjThin:
  024c7	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  024cd	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  024d3	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  024d9	7d 22		 jge	 SHORT $LN34@P_MobjThin

; 5828 : 							{
; 5829 : 								spawnchance[i] = MT_GREENTV;

  024db	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  024e1	c7 84 85 58 fe
	ff ff 58 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 88 ; 00000058H

; 5830 : 								numchoices++;

  024ec	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  024f2	83 c0 01	 add	 eax, 1
  024f5	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5831 : 							}

  024fb	eb bb		 jmp	 SHORT $LN33@P_MobjThin
$LN34@P_MobjThin:

; 5832 : 						}
; 5833 : 						//if (cv_ringshield.value)
; 5834 : 						{
; 5835 : 							oldi = i;

  024fd	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02503	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5836 : 
; 5837 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  02509	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0250c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02512	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  02518	74 0c		 je	 SHORT $LN325@P_MobjThin

; 5838 : 								increment = 8;

  0251a	c7 85 4c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 8
  02524	eb 0a		 jmp	 SHORT $LN326@P_MobjThin
$LN325@P_MobjThin:

; 5839 : 							else //weak box
; 5840 : 								increment = 2;

  02526	c7 85 4c fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 2
$LN326@P_MobjThin:

; 5841 : 
; 5842 : 							for (; i < oldi + increment; i++)

  02530	eb 0f		 jmp	 SHORT $LN38@P_MobjThin
$LN36@P_MobjThin:
  02532	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02538	83 c0 01	 add	 eax, 1
  0253b	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN38@P_MobjThin:
  02541	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  02547	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  0254d	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  02553	7d 22		 jge	 SHORT $LN37@P_MobjThin

; 5843 : 							{
; 5844 : 								spawnchance[i] = MT_YELLOWTV;

  02555	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  0255b	c7 84 85 58 fe
	ff ff 54 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 84 ; 00000054H

; 5845 : 								numchoices++;

  02566	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  0256c	83 c0 01	 add	 eax, 1
  0256f	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5846 : 							}

  02575	eb bb		 jmp	 SHORT $LN36@P_MobjThin
$LN37@P_MobjThin:

; 5847 : 						}
; 5848 : 						//if (cv_forceshield.value)
; 5849 : 						{
; 5850 : 							oldi = i;

  02577	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  0257d	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5851 : 
; 5852 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  02583	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02586	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0258c	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  02592	74 0c		 je	 SHORT $LN327@P_MobjThin

; 5853 : 								increment = 12;

  02594	c7 85 4c fe ff
	ff 0c 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 12 ; 0000000cH
  0259e	eb 0a		 jmp	 SHORT $LN328@P_MobjThin
$LN327@P_MobjThin:

; 5854 : 							else //weak box
; 5855 : 								increment = 4;

  025a0	c7 85 4c fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 4
$LN328@P_MobjThin:

; 5856 : 
; 5857 : 							for (; i < oldi + increment; i++)

  025aa	eb 0f		 jmp	 SHORT $LN41@P_MobjThin
$LN39@P_MobjThin:
  025ac	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  025b2	83 c0 01	 add	 eax, 1
  025b5	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN41@P_MobjThin:
  025bb	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  025c1	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  025c7	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  025cd	7d 22		 jge	 SHORT $LN40@P_MobjThin

; 5858 : 							{
; 5859 : 								spawnchance[i] = MT_BLUETV;

  025cf	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  025d5	c7 84 85 58 fe
	ff ff 55 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 85 ; 00000055H

; 5860 : 								numchoices++;

  025e0	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  025e6	83 c0 01	 add	 eax, 1
  025e9	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5861 : 							}

  025ef	eb bb		 jmp	 SHORT $LN39@P_MobjThin
$LN40@P_MobjThin:

; 5862 : 						}
; 5863 : 						//if (cv_bombshield.value)
; 5864 : 						{
; 5865 : 							oldi = i;

  025f1	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  025f7	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5866 : 
; 5867 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  025fd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02600	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02606	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0260c	74 0c		 je	 SHORT $LN329@P_MobjThin

; 5868 : 								increment = 8;

  0260e	c7 85 4c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 8
  02618	eb 0a		 jmp	 SHORT $LN330@P_MobjThin
$LN329@P_MobjThin:

; 5869 : 							else //weak box
; 5870 : 								increment = 0;

  0261a	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 0
$LN330@P_MobjThin:

; 5871 : 
; 5872 : 							for (; i < oldi + increment; i++)

  02624	eb 0f		 jmp	 SHORT $LN44@P_MobjThin
$LN42@P_MobjThin:
  02626	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  0262c	83 c0 01	 add	 eax, 1
  0262f	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN44@P_MobjThin:
  02635	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  0263b	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  02641	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  02647	7d 22		 jge	 SHORT $LN43@P_MobjThin

; 5873 : 							{
; 5874 : 								spawnchance[i] = MT_BLACKTV;

  02649	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  0264f	c7 84 85 58 fe
	ff ff 56 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 86 ; 00000056H

; 5875 : 								numchoices++;

  0265a	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  02660	83 c0 01	 add	 eax, 1
  02663	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5876 : 							}

  02669	eb bb		 jmp	 SHORT $LN42@P_MobjThin
$LN43@P_MobjThin:

; 5877 : 						}
; 5878 : 						//if (cv_teleporters.value)
; 5879 : 						{
; 5880 : 							oldi = i;

  0266b	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02671	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5881 : 
; 5882 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  02677	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0267a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02680	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  02686	74 0c		 je	 SHORT $LN331@P_MobjThin

; 5883 : 								increment = 0;

  02688	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 0
  02692	eb 0a		 jmp	 SHORT $LN332@P_MobjThin
$LN331@P_MobjThin:

; 5884 : 							else //weak box
; 5885 : 								increment = 2;

  02694	c7 85 4c fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 2
$LN332@P_MobjThin:

; 5886 : 
; 5887 : 							for (; i < oldi + increment; i++)

  0269e	eb 0f		 jmp	 SHORT $LN47@P_MobjThin
$LN45@P_MobjThin:
  026a0	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  026a6	83 c0 01	 add	 eax, 1
  026a9	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN47@P_MobjThin:
  026af	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  026b5	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  026bb	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  026c1	7d 22		 jge	 SHORT $LN46@P_MobjThin

; 5888 : 							{
; 5889 : 								spawnchance[i] = MT_MIXUPBOX;

  026c3	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  026c9	c7 84 85 58 fe
	ff ff 5a 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 90 ; 0000005aH

; 5890 : 								numchoices++;

  026d4	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  026da	83 c0 01	 add	 eax, 1
  026dd	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5891 : 							}

  026e3	eb bb		 jmp	 SHORT $LN45@P_MobjThin
$LN46@P_MobjThin:

; 5892 : 						}
; 5893 : 
; 5894 : 						//if (cv_recycler.value)
; 5895 : 						{
; 5896 : 							oldi = i;

  026e5	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  026eb	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5897 : 
; 5898 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  026f1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  026f4	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  026fa	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  02700	74 0c		 je	 SHORT $LN333@P_MobjThin

; 5899 : 								increment = 0;

  02702	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 0
  0270c	eb 0a		 jmp	 SHORT $LN334@P_MobjThin
$LN333@P_MobjThin:

; 5900 : 							else //weak box
; 5901 : 								increment = 2;

  0270e	c7 85 4c fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 2
$LN334@P_MobjThin:

; 5902 : 
; 5903 : 							for (; i < oldi + increment; i++)

  02718	eb 0f		 jmp	 SHORT $LN50@P_MobjThin
$LN48@P_MobjThin:
  0271a	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02720	83 c0 01	 add	 eax, 1
  02723	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN50@P_MobjThin:
  02729	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  0272f	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  02735	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  0273b	7d 22		 jge	 SHORT $LN49@P_MobjThin

; 5904 : 							{
; 5905 : 								spawnchance[i] = MT_RECYCLETV;

  0273d	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02743	c7 84 85 58 fe
	ff ff 5b 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 91 ; 0000005bH

; 5906 : 								numchoices++;

  0274e	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  02754	83 c0 01	 add	 eax, 1
  02757	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5907 : 							}

  0275d	eb bb		 jmp	 SHORT $LN48@P_MobjThin
$LN49@P_MobjThin:

; 5908 : 						}
; 5909 : 
; 5910 : 						//if (cv_1up.value)
; 5911 : 						{
; 5912 : 							oldi = i;

  0275f	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  02765	89 85 50 fe ff
	ff		 mov	 DWORD PTR _oldi$6[ebp], eax

; 5913 : 
; 5914 : 							if (mobj->flags2 & MF2_STRONGBOX) //strong box

  0276b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0276e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02774	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0277a	74 0c		 je	 SHORT $LN335@P_MobjThin

; 5915 : 								increment = 6;

  0277c	c7 85 4c fe ff
	ff 06 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 6
  02786	eb 0a		 jmp	 SHORT $LN336@P_MobjThin
$LN335@P_MobjThin:

; 5916 : 							else //weak box
; 5917 : 								increment = 0;

  02788	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _increment$5[ebp], 0
$LN336@P_MobjThin:

; 5918 : 
; 5919 : 							for (; i < oldi + increment; i++)

  02792	eb 0f		 jmp	 SHORT $LN53@P_MobjThin
$LN51@P_MobjThin:
  02794	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  0279a	83 c0 01	 add	 eax, 1
  0279d	89 85 54 fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN53@P_MobjThin:
  027a3	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _oldi$6[ebp]
  027a9	03 85 4c fe ff
	ff		 add	 eax, DWORD PTR _increment$5[ebp]
  027af	39 85 54 fe ff
	ff		 cmp	 DWORD PTR _i$7[ebp], eax
  027b5	7d 22		 jge	 SHORT $LN52@P_MobjThin

; 5920 : 							{
; 5921 : 								spawnchance[i] = MT_PRUP;

  027b7	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  027bd	c7 84 85 58 fe
	ff ff 53 00 00
	00		 mov	 DWORD PTR _spawnchance$8[ebp+eax*4], 83 ; 00000053H

; 5922 : 								numchoices++;

  027c8	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _numchoices$4[ebp]
  027ce	83 c0 01	 add	 eax, 1
  027d1	89 85 48 fe ff
	ff		 mov	 DWORD PTR _numchoices$4[ebp], eax

; 5923 : 							}

  027d7	eb bb		 jmp	 SHORT $LN51@P_MobjThin
$LN52@P_MobjThin:

; 5924 : 						}
; 5925 : 
; 5926 : 						newmobj = P_SpawnMobj(mobj->x, mobj->y, mobj->z, spawnchance[prandom%numchoices]);

  027d9	0f b6 85 5b ff
	ff ff		 movzx	 eax, BYTE PTR _prandom$9[ebp]
  027e0	99		 cdq
  027e1	f7 bd 48 fe ff
	ff		 idiv	 DWORD PTR _numchoices$4[ebp]
  027e7	8b 84 95 58 fe
	ff ff		 mov	 eax, DWORD PTR _spawnchance$8[ebp+edx*4]
  027ee	50		 push	 eax
  027ef	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  027f2	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  027f5	52		 push	 edx
  027f6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  027f9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  027fc	51		 push	 ecx
  027fd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02800	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  02803	50		 push	 eax
  02804	e8 00 00 00 00	 call	 _P_SpawnMobj
  02809	83 c4 10	 add	 esp, 16			; 00000010H
  0280c	89 85 5c ff ff
	ff		 mov	 DWORD PTR _newmobj$10[ebp], eax

; 5927 : 
; 5928 : 						// If the monitor respawns randomly, transfer the flag.
; 5929 : 						if (mobj->flags & MF_AMBUSH)

  02812	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02815	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  02818	83 e1 20	 and	 ecx, 32			; 00000020H
  0281b	74 15		 je	 SHORT $LN337@P_MobjThin

; 5930 : 							newmobj->flags |= MF_AMBUSH;

  0281d	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$10[ebp]
  02823	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  02826	83 c9 20	 or	 ecx, 32			; 00000020H
  02829	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _newmobj$10[ebp]
  0282f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN337@P_MobjThin:

; 5931 : 
; 5932 : 						// Transfer flags2 (strongbox, objectflip)
; 5933 : 						newmobj->flags2 = mobj->flags2;

  02832	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$10[ebp]
  02838	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0283b	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  02841	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 5934 : 					}

  02847	eb 3f		 jmp	 SHORT $LN313@P_MobjThin
$LN312@P_MobjThin:

; 5935 : 					else
; 5936 : 					{
; 5937 : 						newmobj = P_SpawnMobj(mobj->x, mobj->y, mobj->z, mobj->type);

  02849	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0284c	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0284f	51		 push	 ecx
  02850	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02853	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  02856	50		 push	 eax
  02857	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0285a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0285d	52		 push	 edx
  0285e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02861	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02864	51		 push	 ecx
  02865	e8 00 00 00 00	 call	 _P_SpawnMobj
  0286a	83 c4 10	 add	 esp, 16			; 00000010H
  0286d	89 85 5c ff ff
	ff		 mov	 DWORD PTR _newmobj$10[ebp], eax

; 5938 : 
; 5939 : 						// Transfer flags2 (strongbox, objectflip)
; 5940 : 						newmobj->flags2 = mobj->flags2;

  02873	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$10[ebp]
  02879	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0287c	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  02882	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx
$LN313@P_MobjThin:

; 5941 : 					}
; 5942 : 					break;

  02888	eb 6e		 jmp	 SHORT $LN19@P_MobjThin
$LN338@P_MobjThin:

; 5943 : 				case MT_QUESTIONBOX:
; 5944 : 					newmobj = P_SpawnMobj(mobj->x, mobj->y, mobj->z, MT_QUESTIONBOX);

  0288a	6a 5d		 push	 93			; 0000005dH
  0288c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0288f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02892	51		 push	 ecx
  02893	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02896	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02899	50		 push	 eax
  0289a	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0289d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  028a0	52		 push	 edx
  028a1	e8 00 00 00 00	 call	 _P_SpawnMobj
  028a6	83 c4 10	 add	 esp, 16			; 00000010H
  028a9	89 85 5c ff ff
	ff		 mov	 DWORD PTR _newmobj$10[ebp], eax

; 5945 : 
; 5946 : 					// Transfer flags2 (strongbox, objectflip)
; 5947 : 					newmobj->flags2 = mobj->flags2;

  028af	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _newmobj$10[ebp]
  028b5	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  028b8	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  028be	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 5948 : 
; 5949 : 					break;

  028c4	eb 32		 jmp	 SHORT $LN19@P_MobjThin
$LN339@P_MobjThin:

; 5950 : 				case MT_CHAOSSPAWNER: // Chaos Mode spawner thingy
; 5951 : 				{
; 5952 : 					// 8 enemies: Blue Crawla, Red Crawla, Crawla Commander,
; 5953 : 					//            Jett-Synn Bomber, Jett-Synn Gunner, Skim,
; 5954 : 					//            Egg Mobile, Egg Slimer.
; 5955 : 					// Max. 3 chances per enemy.
; 5956 : 
; 5957 : #ifdef CHAOSISNOTDEADYET
; 5958 : 
; 5959 : 					mobjtype_t spawnchance[8*3], enemy;
; 5960 : 					mobj_t *spawnedmo;
; 5961 : 					INT32 i = 0, numchoices = 0, stop;
; 5962 : 					fixed_t sfloorz, space, airspace, spawnz[8*3];
; 5963 : 
; 5964 : 					sfloorz = mobj->floorz;
; 5965 : 					space = mobj->ceilingz - sfloorz;
; 5966 : 
; 5967 : 					// This makes the assumption there is no gravity-defying water.
; 5968 : 					// A fair assumption to make, if you ask me.
; 5969 : 					airspace = min(space, mobj->ceilingz - mobj->watertop);
; 5970 : 
; 5971 : 					mobj->fuse = cv_chaos_spawnrate.value*TICRATE;
; 5972 : 					prandom = P_Random(); // Gotta love those random numbers!
; 5973 : 
; 5974 : 					if (cv_chaos_bluecrawla.value && space >= mobjinfo[MT_BLUECRAWLA].height)
; 5975 : 					{
; 5976 : 						stop = i + cv_chaos_bluecrawla.value;
; 5977 : 						for (; i < stop; i++)
; 5978 : 						{
; 5979 : 							spawnchance[i] = MT_BLUECRAWLA;
; 5980 : 							spawnz[i] = sfloorz;
; 5981 : 							numchoices++;
; 5982 : 						}
; 5983 : 					}
; 5984 : 					if (cv_chaos_redcrawla.value && space >= mobjinfo[MT_REDCRAWLA].height)
; 5985 : 					{
; 5986 : 						stop = i + cv_chaos_redcrawla.value;
; 5987 : 						for (; i < stop; i++)
; 5988 : 						{
; 5989 : 							spawnchance[i] = MT_REDCRAWLA;
; 5990 : 							spawnz[i] = sfloorz;
; 5991 : 							numchoices++;
; 5992 : 						}
; 5993 : 					}
; 5994 : 					if (cv_chaos_crawlacommander.value
; 5995 : 						&& space >= mobjinfo[MT_CRAWLACOMMANDER].height + 33*FRACUNIT)
; 5996 : 					{
; 5997 : 						stop = i + cv_chaos_crawlacommander.value;
; 5998 : 						for (; i < stop; i++)
; 5999 : 						{
; 6000 : 							spawnchance[i] = MT_CRAWLACOMMANDER;
; 6001 : 							spawnz[i] = sfloorz + 33*FRACUNIT;
; 6002 : 							numchoices++;
; 6003 : 						}
; 6004 : 					}
; 6005 : 					if (cv_chaos_jettysynbomber.value
; 6006 : 						&& airspace >= mobjinfo[MT_JETTBOMBER].height + 33*FRACUNIT)
; 6007 : 					{
; 6008 : 						stop = i + cv_chaos_jettysynbomber.value;
; 6009 : 						for (; i < stop; i++)
; 6010 : 						{
; 6011 : 							spawnchance[i] = MT_JETTBOMBER;
; 6012 : 							spawnz[i] = max(sfloorz, mobj->watertop) + 33*FRACUNIT;
; 6013 : 							numchoices++;
; 6014 : 						}
; 6015 : 					}
; 6016 : 					if (cv_chaos_jettysyngunner.value
; 6017 : 						&& airspace >= mobjinfo[MT_JETTGUNNER].height + 33*FRACUNIT)
; 6018 : 					{
; 6019 : 						stop = i + cv_chaos_jettysyngunner.value;
; 6020 : 						for (; i < stop; i++)
; 6021 : 						{
; 6022 : 							spawnchance[i] = MT_JETTGUNNER;
; 6023 : 							spawnz[i] = max(sfloorz, mobj->watertop) + 33*FRACUNIT;
; 6024 : 							numchoices++;
; 6025 : 						}
; 6026 : 					}
; 6027 : 					if (cv_chaos_skim.value
; 6028 : 						&& mobj->watertop < mobj->ceilingz - mobjinfo[MT_SKIM].height
; 6029 : 						&& mobj->watertop - sfloorz > mobjinfo[MT_SKIM].height/2)
; 6030 : 					{
; 6031 : 						stop = i + cv_chaos_skim.value;
; 6032 : 						for (; i < stop; i++)
; 6033 : 						{
; 6034 : 							spawnchance[i] = MT_SKIM;
; 6035 : 							spawnz[i] = mobj->watertop;
; 6036 : 							numchoices++;
; 6037 : 						}
; 6038 : 					}
; 6039 : 					if (P_BossDoesntExist())
; 6040 : 					{
; 6041 : 						if (cv_chaos_eggmobile1.value
; 6042 : 							&& space >= mobjinfo[MT_EGGMOBILE].height + 33*FRACUNIT)
; 6043 : 						{
; 6044 : 							stop = i + cv_chaos_eggmobile1.value;
; 6045 : 							for (; i < stop; i++)
; 6046 : 							{
; 6047 : 								spawnchance[i] = MT_EGGMOBILE;
; 6048 : 								spawnz[i] = sfloorz + 33*FRACUNIT;
; 6049 : 								numchoices++;
; 6050 : 							}
; 6051 : 						}
; 6052 : 						if (cv_chaos_eggmobile2.value
; 6053 : 							&& space >= mobjinfo[MT_EGGMOBILE2].height + 33*FRACUNIT)
; 6054 : 						{
; 6055 : 							stop = i + cv_chaos_eggmobile2.value;
; 6056 : 							for (; i < stop; i++)
; 6057 : 							{
; 6058 : 								spawnchance[i] = MT_EGGMOBILE2;
; 6059 : 								spawnz[i] = sfloorz + 33*FRACUNIT;
; 6060 : 								numchoices++;
; 6061 : 							}
; 6062 : 						}
; 6063 : 					}
; 6064 : 
; 6065 : 					if (numchoices)
; 6066 : 					{
; 6067 : 						fixed_t fogz;
; 6068 : 
; 6069 : 						i = prandom % numchoices;
; 6070 : 						enemy = spawnchance[i];
; 6071 : 
; 6072 : 						fogz = spawnz[i] - 32*FRACUNIT;
; 6073 : 						if (fogz < sfloorz)
; 6074 : 							fogz = sfloorz;
; 6075 : 
; 6076 : 						spawnedmo = P_SpawnMobj(mobj->x, mobj->y, spawnz[i], enemy);
; 6077 : 						P_SpawnMobj(mobj->x, mobj->y, fogz, MT_TFOG);
; 6078 : 
; 6079 : 						P_SupermanLook4Players(spawnedmo);
; 6080 : 						if (spawnedmo->target && spawnedmo->type != MT_SKIM)
; 6081 : 							P_SetMobjState(spawnedmo, spawnedmo->info->seestate);
; 6082 : 
; 6083 : 						if (spawnedmo->flags & MF_BOSS)
; 6084 : 						{
; 6085 : 							spawnedmo->flags2 |= MF2_CHAOSBOSS;
; 6086 : 							spawnedmo->momx = spawnedmo->momy = 0;
; 6087 : 						}
; 6088 : 					}
; 6089 : #endif
; 6090 : 					break;

  028c6	eb 30		 jmp	 SHORT $LN19@P_MobjThin
$LN340@P_MobjThin:

; 6091 : 				}
; 6092 : 				case MT_EGGTRAP: // Don't remove
; 6093 : 					break;

  028c8	eb 2e		 jmp	 SHORT $LN19@P_MobjThin
$LN341@P_MobjThin:

; 6094 : 				default:
; 6095 : 					if (mobj->info->deathstate)

  028ca	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  028cd	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  028d3	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  028d7	74 0e		 je	 SHORT $LN342@P_MobjThin

; 6096 : 						P_ExplodeMissile(mobj);

  028d9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  028dc	50		 push	 eax
  028dd	e8 00 00 00 00	 call	 _P_ExplodeMissile
  028e2	83 c4 04	 add	 esp, 4
  028e5	eb 11		 jmp	 SHORT $LN343@P_MobjThin
$LN342@P_MobjThin:

; 6097 : 					else
; 6098 : 						P_SetMobjState(mobj, S_DISS); // make sure they disappear

  028e7	68 4f 06 00 00	 push	 1615			; 0000064fH
  028ec	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  028ef	50		 push	 eax
  028f0	e8 00 00 00 00	 call	 _P_SetMobjState
  028f5	83 c4 08	 add	 esp, 8
$LN343@P_MobjThin:
$LN19@P_MobjThin:

; 6099 : 					break;
; 6100 : 			}
; 6101 : 		}
; 6102 : 	}
; 6103 : 
; 6104 : 	if (mobj->momx || mobj->momy || (mobj->flags2 & MF2_SKULLFLY))

  028f8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  028fb	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  028ff	75 1a		 jne	 SHORT $LN345@P_MobjThin
  02901	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02904	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  02908	75 11		 jne	 SHORT $LN345@P_MobjThin
  0290a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0290d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02913	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  02919	74 1d		 je	 SHORT $LN346@P_MobjThin
$LN345@P_MobjThin:

; 6105 : 	{
; 6106 : 		P_XYMovement(mobj);

  0291b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0291e	50		 push	 eax
  0291f	e8 00 00 00 00	 call	 _P_XYMovement
  02924	83 c4 04	 add	 esp, 4

; 6107 : 
; 6108 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  02927	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0292a	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  02931	75 05		 jne	 SHORT $LN346@P_MobjThin

; 6109 : 			return; // mobj was removed

  02933	e9 49 02 00 00	 jmp	 $LN54@P_MobjThin
$LN346@P_MobjThin:

; 6110 : 	}
; 6111 : 
; 6112 : 	// always do the gravity bit now, that's simpler
; 6113 : 	// BUT CheckPosition only if wasn't done before.
; 6114 : 	if (!(mobj->eflags & MFE_ONGROUND) || (mobj->z != mobj->floorz) || mobj->momz)

  02938	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0293b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02941	83 e1 01	 and	 ecx, 1
  02944	74 17		 je	 SHORT $LN349@P_MobjThin
  02946	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02949	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0294c	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0294f	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  02952	75 09		 jne	 SHORT $LN349@P_MobjThin
  02954	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02957	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0295b	74 54		 je	 SHORT $LN347@P_MobjThin
$LN349@P_MobjThin:

; 6115 : 	{
; 6116 : 		mobj_t *onmo;
; 6117 : 		onmo = P_CheckOnmobj(mobj);

  0295d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02960	50		 push	 eax
  02961	e8 00 00 00 00	 call	 _P_CheckOnmobj
  02966	83 c4 04	 add	 esp, 4
  02969	89 85 44 fe ff
	ff		 mov	 DWORD PTR _onmo$3[ebp], eax

; 6118 : 		if (!onmo)

  0296f	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR _onmo$3[ebp], 0
  02976	75 26		 jne	 SHORT $LN350@P_MobjThin

; 6119 : 		{
; 6120 : 			P_ZMovement(mobj);

  02978	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0297b	50		 push	 eax
  0297c	e8 00 00 00 00	 call	 _P_ZMovement
  02981	83 c4 04	 add	 esp, 4

; 6121 : 			P_CheckPosition(mobj, mobj->x, mobj->y); // Need this to pick up objects!

  02984	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02987	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0298a	51		 push	 ecx
  0298b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0298e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  02991	50		 push	 eax
  02992	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  02995	51		 push	 ecx
  02996	e8 00 00 00 00	 call	 _P_CheckPosition
  0299b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN350@P_MobjThin:

; 6122 : 		}
; 6123 : 
; 6124 : 		if (mobj->thinker.function.acv == P_RemoveThinkerDelayed)

  0299e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  029a1	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_RemoveThinkerDelayed
  029a8	75 05		 jne	 SHORT $LN351@P_MobjThin

; 6125 : 			return; // mobj was removed

  029aa	e9 d2 01 00 00	 jmp	 $LN54@P_MobjThin
$LN351@P_MobjThin:

; 6126 : 	}

  029af	eb 15		 jmp	 SHORT $LN348@P_MobjThin
$LN347@P_MobjThin:

; 6127 : 	else
; 6128 : 		mobj->eflags &= ~MFE_JUSTHITFLOOR;

  029b1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  029b4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  029ba	83 e1 fd	 and	 ecx, -3			; fffffffdH
  029bd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  029c0	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN348@P_MobjThin:

; 6129 : 
; 6130 : 	// Crush enemies!
; 6131 : 	if ((mobj->flags & MF_ENEMY || mobj->flags & MF_BOSS)
; 6132 : 		&& mobj->flags & MF_SHOOTABLE && mobj->health > 0)

  029c6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  029c9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  029cc	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  029d2	75 0e		 jne	 SHORT $LN353@P_MobjThin
  029d4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  029d7	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  029da	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  029e0	74 3d		 je	 SHORT $LN354@P_MobjThin
$LN353@P_MobjThin:
  029e2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  029e5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  029e8	83 e1 04	 and	 ecx, 4
  029eb	74 32		 je	 SHORT $LN354@P_MobjThin
  029ed	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  029f0	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  029f7	7e 26		 jle	 SHORT $LN354@P_MobjThin

; 6133 : 	{
; 6134 : 		if (mobj->ceilingz - mobj->floorz < mobj->height)

  029f9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  029fc	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  029ff	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  02a02	2b 51 38	 sub	 edx, DWORD PTR [ecx+56]
  02a05	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02a08	3b 50 44	 cmp	 edx, DWORD PTR [eax+68]
  02a0b	7d 12		 jge	 SHORT $LN354@P_MobjThin

; 6135 : 			P_DamageMobj(mobj, NULL, NULL, 1);

  02a0d	6a 01		 push	 1
  02a0f	6a 00		 push	 0
  02a11	6a 00		 push	 0
  02a13	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02a16	50		 push	 eax
  02a17	e8 00 00 00 00	 call	 _P_DamageMobj
  02a1c	83 c4 10	 add	 esp, 16			; 00000010H
$LN354@P_MobjThin:

; 6136 : 	}
; 6137 : 
; 6138 : 	P_CycleMobjState(mobj);

  02a1f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02a22	50		 push	 eax
  02a23	e8 00 00 00 00	 call	 _P_CycleMobjState
  02a28	83 c4 04	 add	 esp, 4

; 6139 : 
; 6140 : 	switch (mobj->type)

  02a2b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02a2e	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  02a31	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv1729[ebp], ecx
  02a37	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR tv1729[ebp]
  02a3d	81 ea d6 00 00
	00		 sub	 edx, 214		; 000000d6H
  02a43	89 95 f8 fd ff
	ff		 mov	 DWORD PTR tv1729[ebp], edx
  02a49	83 bd f8 fd ff
	ff 33		 cmp	 DWORD PTR tv1729[ebp], 51 ; 00000033H
  02a50	0f 87 2b 01 00
	00		 ja	 $LN367@P_MobjThin
  02a56	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR tv1729[ebp]
  02a5c	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN380@P_MobjThin[eax]
  02a63	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN381@P_MobjThin[ecx*4]
$LN355@P_MobjThin:

; 6141 : 	{
; 6142 : 		case MT_BOUNCEPICKUP:
; 6143 : 		case MT_RAILPICKUP:
; 6144 : 		case MT_AUTOPICKUP:
; 6145 : 		case MT_EXPLODEPICKUP:
; 6146 : 		case MT_SCATTERPICKUP:
; 6147 : 		case MT_GRENADEPICKUP:
; 6148 : 			if (mobj->health == 0) // Fading tile

  02a6a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02a6d	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  02a74	0f 85 8a 00 00
	00		 jne	 $LN361@P_MobjThin

; 6149 : 			{
; 6150 : 				INT32 value = mobj->info->damage/10;

  02a7a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02a7d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  02a83	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  02a86	99		 cdq
  02a87	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  02a8c	f7 f9		 idiv	 ecx
  02a8e	89 85 40 fe ff
	ff		 mov	 DWORD PTR _value$2[ebp], eax

; 6151 : 				value = mobj->fuse/value;

  02a94	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02a97	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [eax+188]
  02a9d	99		 cdq
  02a9e	f7 bd 40 fe ff
	ff		 idiv	 DWORD PTR _value$2[ebp]
  02aa4	89 85 40 fe ff
	ff		 mov	 DWORD PTR _value$2[ebp], eax

; 6152 : 				value = 10-value;

  02aaa	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  02aaf	2b 85 40 fe ff
	ff		 sub	 eax, DWORD PTR _value$2[ebp]
  02ab5	89 85 40 fe ff
	ff		 mov	 DWORD PTR _value$2[ebp], eax

; 6153 : 				value--;

  02abb	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _value$2[ebp]
  02ac1	83 e8 01	 sub	 eax, 1
  02ac4	89 85 40 fe ff
	ff		 mov	 DWORD PTR _value$2[ebp], eax

; 6154 : 
; 6155 : 				if (value <= 0)

  02aca	83 bd 40 fe ff
	ff 00		 cmp	 DWORD PTR _value$2[ebp], 0
  02ad1	7f 0a		 jg	 SHORT $LN362@P_MobjThin

; 6156 : 					value = 1;

  02ad3	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _value$2[ebp], 1
$LN362@P_MobjThin:

; 6157 : 
; 6158 : 				mobj->frame &= ~FF_TRANSMASK;

  02add	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02ae0	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  02ae3	81 e1 ff ff f0
	ff		 and	 ecx, -983041		; fff0ffffH
  02ae9	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02aec	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 6159 : 				mobj->frame |= value << FF_TRANSSHIFT;

  02aef	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _value$2[ebp]
  02af5	c1 e0 10	 shl	 eax, 16			; 00000010H
  02af8	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  02afb	0b 41 2c	 or	 eax, DWORD PTR [ecx+44]
  02afe	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02b01	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN361@P_MobjThin:

; 6160 : 			}
; 6161 : 			break;

  02b04	eb 7b		 jmp	 SHORT $LN54@P_MobjThin
$LN363@P_MobjThin:

; 6162 : 		case MT_GHOST: // fade out...
; 6163 : 			if ((mobj->fuse % mobj->info->painchance) == 0)

  02b06	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02b09	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  02b0f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02b12	8b 82 bc 00 00
	00		 mov	 eax, DWORD PTR [edx+188]
  02b18	99		 cdq
  02b19	f7 79 20	 idiv	 DWORD PTR [ecx+32]
  02b1c	85 d2		 test	 edx, edx
  02b1e	75 61		 jne	 SHORT $LN366@P_MobjThin

; 6164 : 			{
; 6165 : 				INT32 value = mobj->frame >> FF_TRANSSHIFT;

  02b20	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02b23	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  02b26	c1 e9 10	 shr	 ecx, 16			; 00000010H
  02b29	89 8d 3c fe ff
	ff		 mov	 DWORD PTR _value$1[ebp], ecx

; 6166 : 
; 6167 : 				value++;

  02b2f	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _value$1[ebp]
  02b35	83 c0 01	 add	 eax, 1
  02b38	89 85 3c fe ff
	ff		 mov	 DWORD PTR _value$1[ebp], eax

; 6168 : 
; 6169 : 				if (value >= NUMTRANSMAPS)

  02b3e	83 bd 3c fe ff
	ff 0a		 cmp	 DWORD PTR _value$1[ebp], 10 ; 0000000aH
  02b45	7c 13		 jl	 SHORT $LN365@P_MobjThin

; 6170 : 					P_SetMobjState(mobj, S_DISS);

  02b47	68 4f 06 00 00	 push	 1615			; 0000064fH
  02b4c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02b4f	50		 push	 eax
  02b50	e8 00 00 00 00	 call	 _P_SetMobjState
  02b55	83 c4 08	 add	 esp, 8
  02b58	eb 27		 jmp	 SHORT $LN366@P_MobjThin
$LN365@P_MobjThin:

; 6171 : 				else
; 6172 : 				{
; 6173 : 					mobj->frame &= ~FF_TRANSMASK;

  02b5a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  02b5d	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  02b60	81 e1 ff ff f0
	ff		 and	 ecx, -983041		; fff0ffffH
  02b66	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02b69	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 6174 : 					mobj->frame |= value << FF_TRANSSHIFT;

  02b6c	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _value$1[ebp]
  02b72	c1 e0 10	 shl	 eax, 16			; 00000010H
  02b75	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  02b78	0b 41 2c	 or	 eax, DWORD PTR [ecx+44]
  02b7b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  02b7e	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN366@P_MobjThin:
$LN367@P_MobjThin:
$LN54@P_MobjThin:

; 6175 : 				}
; 6176 : 			}
; 6177 : 			break;
; 6178 : 		default:
; 6179 : 			break;
; 6180 : 	}
; 6181 : }

  02b81	5f		 pop	 edi
  02b82	5e		 pop	 esi
  02b83	5b		 pop	 ebx
  02b84	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02b87	33 cd		 xor	 ecx, ebp
  02b89	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02b8e	8b e5		 mov	 esp, ebp
  02b90	5d		 pop	 ebp
  02b91	c3		 ret	 0
  02b92	66 90		 npad	 2
$LN370@P_MobjThin:
  02b94	00 00 00 00	 DD	 $LN63@P_MobjThin
  02b98	00 00 00 00	 DD	 $LN63@P_MobjThin
  02b9c	00 00 00 00	 DD	 $LN63@P_MobjThin
  02ba0	00 00 00 00	 DD	 $LN63@P_MobjThin
  02ba4	00 00 00 00	 DD	 $LN63@P_MobjThin
$LN372@P_MobjThin:
  02ba8	00 00 00 00	 DD	 $LN102@P_MobjThin
  02bac	00 00 00 00	 DD	 $LN100@P_MobjThin
  02bb0	00 00 00 00	 DD	 $LN128@P_MobjThin
  02bb4	00 00 00 00	 DD	 $LN137@P_MobjThin
  02bb8	00 00 00 00	 DD	 $LN94@P_MobjThin
  02bbc	00 00 00 00	 DD	 $LN103@P_MobjThin
  02bc0	00 00 00 00	 DD	 $LN119@P_MobjThin
  02bc4	00 00 00 00	 DD	 $LN89@P_MobjThin
  02bc8	00 00 00 00	 DD	 $LN81@P_MobjThin
  02bcc	00 00 00 00	 DD	 $LN146@P_MobjThin
$LN371@P_MobjThin:
  02bd0	00		 DB	 0
  02bd1	09		 DB	 9
  02bd2	09		 DB	 9
  02bd3	09		 DB	 9
  02bd4	09		 DB	 9
  02bd5	09		 DB	 9
  02bd6	09		 DB	 9
  02bd7	09		 DB	 9
  02bd8	09		 DB	 9
  02bd9	09		 DB	 9
  02bda	09		 DB	 9
  02bdb	09		 DB	 9
  02bdc	09		 DB	 9
  02bdd	09		 DB	 9
  02bde	09		 DB	 9
  02bdf	09		 DB	 9
  02be0	09		 DB	 9
  02be1	09		 DB	 9
  02be2	09		 DB	 9
  02be3	09		 DB	 9
  02be4	09		 DB	 9
  02be5	09		 DB	 9
  02be6	09		 DB	 9
  02be7	09		 DB	 9
  02be8	09		 DB	 9
  02be9	09		 DB	 9
  02bea	09		 DB	 9
  02beb	09		 DB	 9
  02bec	09		 DB	 9
  02bed	09		 DB	 9
  02bee	09		 DB	 9
  02bef	09		 DB	 9
  02bf0	09		 DB	 9
  02bf1	09		 DB	 9
  02bf2	09		 DB	 9
  02bf3	09		 DB	 9
  02bf4	09		 DB	 9
  02bf5	09		 DB	 9
  02bf6	09		 DB	 9
  02bf7	09		 DB	 9
  02bf8	09		 DB	 9
  02bf9	09		 DB	 9
  02bfa	09		 DB	 9
  02bfb	09		 DB	 9
  02bfc	09		 DB	 9
  02bfd	09		 DB	 9
  02bfe	09		 DB	 9
  02bff	09		 DB	 9
  02c00	09		 DB	 9
  02c01	09		 DB	 9
  02c02	09		 DB	 9
  02c03	09		 DB	 9
  02c04	09		 DB	 9
  02c05	09		 DB	 9
  02c06	09		 DB	 9
  02c07	09		 DB	 9
  02c08	09		 DB	 9
  02c09	09		 DB	 9
  02c0a	09		 DB	 9
  02c0b	09		 DB	 9
  02c0c	01		 DB	 1
  02c0d	09		 DB	 9
  02c0e	09		 DB	 9
  02c0f	09		 DB	 9
  02c10	09		 DB	 9
  02c11	09		 DB	 9
  02c12	09		 DB	 9
  02c13	09		 DB	 9
  02c14	09		 DB	 9
  02c15	09		 DB	 9
  02c16	09		 DB	 9
  02c17	09		 DB	 9
  02c18	09		 DB	 9
  02c19	09		 DB	 9
  02c1a	09		 DB	 9
  02c1b	09		 DB	 9
  02c1c	09		 DB	 9
  02c1d	09		 DB	 9
  02c1e	09		 DB	 9
  02c1f	09		 DB	 9
  02c20	09		 DB	 9
  02c21	09		 DB	 9
  02c22	09		 DB	 9
  02c23	02		 DB	 2
  02c24	03		 DB	 3
  02c25	09		 DB	 9
  02c26	09		 DB	 9
  02c27	09		 DB	 9
  02c28	09		 DB	 9
  02c29	09		 DB	 9
  02c2a	09		 DB	 9
  02c2b	09		 DB	 9
  02c2c	04		 DB	 4
  02c2d	04		 DB	 4
  02c2e	04		 DB	 4
  02c2f	04		 DB	 4
  02c30	04		 DB	 4
  02c31	09		 DB	 9
  02c32	09		 DB	 9
  02c33	09		 DB	 9
  02c34	09		 DB	 9
  02c35	09		 DB	 9
  02c36	09		 DB	 9
  02c37	09		 DB	 9
  02c38	09		 DB	 9
  02c39	09		 DB	 9
  02c3a	09		 DB	 9
  02c3b	09		 DB	 9
  02c3c	09		 DB	 9
  02c3d	09		 DB	 9
  02c3e	09		 DB	 9
  02c3f	09		 DB	 9
  02c40	09		 DB	 9
  02c41	09		 DB	 9
  02c42	09		 DB	 9
  02c43	09		 DB	 9
  02c44	09		 DB	 9
  02c45	05		 DB	 5
  02c46	05		 DB	 5
  02c47	05		 DB	 5
  02c48	09		 DB	 9
  02c49	09		 DB	 9
  02c4a	09		 DB	 9
  02c4b	09		 DB	 9
  02c4c	09		 DB	 9
  02c4d	09		 DB	 9
  02c4e	06		 DB	 6
  02c4f	09		 DB	 9
  02c50	09		 DB	 9
  02c51	09		 DB	 9
  02c52	09		 DB	 9
  02c53	09		 DB	 9
  02c54	09		 DB	 9
  02c55	09		 DB	 9
  02c56	09		 DB	 9
  02c57	09		 DB	 9
  02c58	09		 DB	 9
  02c59	09		 DB	 9
  02c5a	09		 DB	 9
  02c5b	09		 DB	 9
  02c5c	09		 DB	 9
  02c5d	09		 DB	 9
  02c5e	09		 DB	 9
  02c5f	09		 DB	 9
  02c60	09		 DB	 9
  02c61	09		 DB	 9
  02c62	09		 DB	 9
  02c63	09		 DB	 9
  02c64	09		 DB	 9
  02c65	09		 DB	 9
  02c66	09		 DB	 9
  02c67	09		 DB	 9
  02c68	09		 DB	 9
  02c69	09		 DB	 9
  02c6a	09		 DB	 9
  02c6b	09		 DB	 9
  02c6c	09		 DB	 9
  02c6d	09		 DB	 9
  02c6e	09		 DB	 9
  02c6f	09		 DB	 9
  02c70	09		 DB	 9
  02c71	09		 DB	 9
  02c72	09		 DB	 9
  02c73	09		 DB	 9
  02c74	09		 DB	 9
  02c75	09		 DB	 9
  02c76	09		 DB	 9
  02c77	09		 DB	 9
  02c78	09		 DB	 9
  02c79	09		 DB	 9
  02c7a	09		 DB	 9
  02c7b	09		 DB	 9
  02c7c	09		 DB	 9
  02c7d	09		 DB	 9
  02c7e	09		 DB	 9
  02c7f	09		 DB	 9
  02c80	09		 DB	 9
  02c81	09		 DB	 9
  02c82	09		 DB	 9
  02c83	09		 DB	 9
  02c84	07		 DB	 7
  02c85	09		 DB	 9
  02c86	08		 DB	 8
  02c87	90		 npad	 1
$LN374@P_MobjThin:
  02c88	00 00 00 00	 DD	 $LN152@P_MobjThin
  02c8c	00 00 00 00	 DD	 $LN156@P_MobjThin
  02c90	00 00 00 00	 DD	 $LN158@P_MobjThin
  02c94	00 00 00 00	 DD	 $LN159@P_MobjThin
  02c98	00 00 00 00	 DD	 $LN161@P_MobjThin
  02c9c	00 00 00 00	 DD	 $LN162@P_MobjThin
$LN373@P_MobjThin:
  02ca0	00		 DB	 0
  02ca1	05		 DB	 5
  02ca2	01		 DB	 1
  02ca3	05		 DB	 5
  02ca4	05		 DB	 5
  02ca5	05		 DB	 5
  02ca6	05		 DB	 5
  02ca7	02		 DB	 2
  02ca8	05		 DB	 5
  02ca9	03		 DB	 3
  02caa	04		 DB	 4
  02cab	90		 npad	 1
$LN376@P_MobjThin:
  02cac	00 00 00 00	 DD	 $LN233@P_MobjThin
  02cb0	00 00 00 00	 DD	 $LN240@P_MobjThin
  02cb4	00 00 00 00	 DD	 $LN257@P_MobjThin
  02cb8	00 00 00 00	 DD	 $LN182@P_MobjThin
  02cbc	00 00 00 00	 DD	 $LN218@P_MobjThin
  02cc0	00 00 00 00	 DD	 $LN187@P_MobjThin
  02cc4	00 00 00 00	 DD	 $LN220@P_MobjThin
  02cc8	00 00 00 00	 DD	 $LN227@P_MobjThin
  02ccc	00 00 00 00	 DD	 $LN247@P_MobjThin
  02cd0	00 00 00 00	 DD	 $LN261@P_MobjThin
  02cd4	00 00 00 00	 DD	 $LN184@P_MobjThin
  02cd8	00 00 00 00	 DD	 $LN234@P_MobjThin
  02cdc	00 00 00 00	 DD	 $LN267@P_MobjThin
  02ce0	00 00 00 00	 DD	 $LN202@P_MobjThin
  02ce4	00 00 00 00	 DD	 $LN197@P_MobjThin
  02ce8	00 00 00 00	 DD	 $LN266@P_MobjThin
  02cec	00 00 00 00	 DD	 $LN208@P_MobjThin
  02cf0	00 00 00 00	 DD	 $LN229@P_MobjThin
  02cf4	00 00 00 00	 DD	 $LN215@P_MobjThin
  02cf8	00 00 00 00	 DD	 $LN254@P_MobjThin
  02cfc	00 00 00 00	 DD	 $LN211@P_MobjThin
  02d00	00 00 00 00	 DD	 $LN214@P_MobjThin
  02d04	00 00 00 00	 DD	 $LN230@P_MobjThin
  02d08	00 00 00 00	 DD	 $LN219@P_MobjThin
  02d0c	00 00 00 00	 DD	 $LN252@P_MobjThin
  02d10	00 00 00 00	 DD	 $LN269@P_MobjThin
$LN375@P_MobjThin:
  02d14	00		 DB	 0
  02d15	19		 DB	 25			; 00000019H
  02d16	19		 DB	 25			; 00000019H
  02d17	19		 DB	 25			; 00000019H
  02d18	19		 DB	 25			; 00000019H
  02d19	19		 DB	 25			; 00000019H
  02d1a	19		 DB	 25			; 00000019H
  02d1b	19		 DB	 25			; 00000019H
  02d1c	19		 DB	 25			; 00000019H
  02d1d	19		 DB	 25			; 00000019H
  02d1e	01		 DB	 1
  02d1f	02		 DB	 2
  02d20	19		 DB	 25			; 00000019H
  02d21	19		 DB	 25			; 00000019H
  02d22	19		 DB	 25			; 00000019H
  02d23	19		 DB	 25			; 00000019H
  02d24	19		 DB	 25			; 00000019H
  02d25	19		 DB	 25			; 00000019H
  02d26	19		 DB	 25			; 00000019H
  02d27	19		 DB	 25			; 00000019H
  02d28	19		 DB	 25			; 00000019H
  02d29	19		 DB	 25			; 00000019H
  02d2a	03		 DB	 3
  02d2b	19		 DB	 25			; 00000019H
  02d2c	19		 DB	 25			; 00000019H
  02d2d	19		 DB	 25			; 00000019H
  02d2e	04		 DB	 4
  02d2f	05		 DB	 5
  02d30	19		 DB	 25			; 00000019H
  02d31	19		 DB	 25			; 00000019H
  02d32	06		 DB	 6
  02d33	19		 DB	 25			; 00000019H
  02d34	19		 DB	 25			; 00000019H
  02d35	19		 DB	 25			; 00000019H
  02d36	19		 DB	 25			; 00000019H
  02d37	19		 DB	 25			; 00000019H
  02d38	19		 DB	 25			; 00000019H
  02d39	07		 DB	 7
  02d3a	19		 DB	 25			; 00000019H
  02d3b	19		 DB	 25			; 00000019H
  02d3c	19		 DB	 25			; 00000019H
  02d3d	19		 DB	 25			; 00000019H
  02d3e	19		 DB	 25			; 00000019H
  02d3f	08		 DB	 8
  02d40	19		 DB	 25			; 00000019H
  02d41	19		 DB	 25			; 00000019H
  02d42	19		 DB	 25			; 00000019H
  02d43	19		 DB	 25			; 00000019H
  02d44	08		 DB	 8
  02d45	08		 DB	 8
  02d46	19		 DB	 25			; 00000019H
  02d47	19		 DB	 25			; 00000019H
  02d48	09		 DB	 9
  02d49	09		 DB	 9
  02d4a	19		 DB	 25			; 00000019H
  02d4b	19		 DB	 25			; 00000019H
  02d4c	19		 DB	 25			; 00000019H
  02d4d	19		 DB	 25			; 00000019H
  02d4e	19		 DB	 25			; 00000019H
  02d4f	19		 DB	 25			; 00000019H
  02d50	19		 DB	 25			; 00000019H
  02d51	19		 DB	 25			; 00000019H
  02d52	19		 DB	 25			; 00000019H
  02d53	0a		 DB	 10			; 0000000aH
  02d54	19		 DB	 25			; 00000019H
  02d55	0b		 DB	 11			; 0000000bH
  02d56	19		 DB	 25			; 00000019H
  02d57	19		 DB	 25			; 00000019H
  02d58	19		 DB	 25			; 00000019H
  02d59	19		 DB	 25			; 00000019H
  02d5a	19		 DB	 25			; 00000019H
  02d5b	0c		 DB	 12			; 0000000cH
  02d5c	19		 DB	 25			; 00000019H
  02d5d	19		 DB	 25			; 00000019H
  02d5e	19		 DB	 25			; 00000019H
  02d5f	0d		 DB	 13			; 0000000dH
  02d60	0e		 DB	 14			; 0000000eH
  02d61	19		 DB	 25			; 00000019H
  02d62	19		 DB	 25			; 00000019H
  02d63	19		 DB	 25			; 00000019H
  02d64	19		 DB	 25			; 00000019H
  02d65	19		 DB	 25			; 00000019H
  02d66	19		 DB	 25			; 00000019H
  02d67	19		 DB	 25			; 00000019H
  02d68	19		 DB	 25			; 00000019H
  02d69	19		 DB	 25			; 00000019H
  02d6a	19		 DB	 25			; 00000019H
  02d6b	19		 DB	 25			; 00000019H
  02d6c	19		 DB	 25			; 00000019H
  02d6d	19		 DB	 25			; 00000019H
  02d6e	19		 DB	 25			; 00000019H
  02d6f	19		 DB	 25			; 00000019H
  02d70	19		 DB	 25			; 00000019H
  02d71	19		 DB	 25			; 00000019H
  02d72	19		 DB	 25			; 00000019H
  02d73	19		 DB	 25			; 00000019H
  02d74	19		 DB	 25			; 00000019H
  02d75	19		 DB	 25			; 00000019H
  02d76	19		 DB	 25			; 00000019H
  02d77	19		 DB	 25			; 00000019H
  02d78	19		 DB	 25			; 00000019H
  02d79	19		 DB	 25			; 00000019H
  02d7a	19		 DB	 25			; 00000019H
  02d7b	19		 DB	 25			; 00000019H
  02d7c	19		 DB	 25			; 00000019H
  02d7d	19		 DB	 25			; 00000019H
  02d7e	19		 DB	 25			; 00000019H
  02d7f	19		 DB	 25			; 00000019H
  02d80	19		 DB	 25			; 00000019H
  02d81	19		 DB	 25			; 00000019H
  02d82	19		 DB	 25			; 00000019H
  02d83	19		 DB	 25			; 00000019H
  02d84	19		 DB	 25			; 00000019H
  02d85	0f		 DB	 15			; 0000000fH
  02d86	19		 DB	 25			; 00000019H
  02d87	19		 DB	 25			; 00000019H
  02d88	19		 DB	 25			; 00000019H
  02d89	19		 DB	 25			; 00000019H
  02d8a	19		 DB	 25			; 00000019H
  02d8b	19		 DB	 25			; 00000019H
  02d8c	19		 DB	 25			; 00000019H
  02d8d	19		 DB	 25			; 00000019H
  02d8e	19		 DB	 25			; 00000019H
  02d8f	19		 DB	 25			; 00000019H
  02d90	19		 DB	 25			; 00000019H
  02d91	19		 DB	 25			; 00000019H
  02d92	19		 DB	 25			; 00000019H
  02d93	19		 DB	 25			; 00000019H
  02d94	19		 DB	 25			; 00000019H
  02d95	19		 DB	 25			; 00000019H
  02d96	19		 DB	 25			; 00000019H
  02d97	19		 DB	 25			; 00000019H
  02d98	19		 DB	 25			; 00000019H
  02d99	19		 DB	 25			; 00000019H
  02d9a	19		 DB	 25			; 00000019H
  02d9b	19		 DB	 25			; 00000019H
  02d9c	19		 DB	 25			; 00000019H
  02d9d	10		 DB	 16			; 00000010H
  02d9e	19		 DB	 25			; 00000019H
  02d9f	19		 DB	 25			; 00000019H
  02da0	19		 DB	 25			; 00000019H
  02da1	19		 DB	 25			; 00000019H
  02da2	19		 DB	 25			; 00000019H
  02da3	19		 DB	 25			; 00000019H
  02da4	19		 DB	 25			; 00000019H
  02da5	19		 DB	 25			; 00000019H
  02da6	19		 DB	 25			; 00000019H
  02da7	19		 DB	 25			; 00000019H
  02da8	19		 DB	 25			; 00000019H
  02da9	19		 DB	 25			; 00000019H
  02daa	19		 DB	 25			; 00000019H
  02dab	19		 DB	 25			; 00000019H
  02dac	19		 DB	 25			; 00000019H
  02dad	19		 DB	 25			; 00000019H
  02dae	19		 DB	 25			; 00000019H
  02daf	19		 DB	 25			; 00000019H
  02db0	19		 DB	 25			; 00000019H
  02db1	19		 DB	 25			; 00000019H
  02db2	19		 DB	 25			; 00000019H
  02db3	19		 DB	 25			; 00000019H
  02db4	19		 DB	 25			; 00000019H
  02db5	19		 DB	 25			; 00000019H
  02db6	19		 DB	 25			; 00000019H
  02db7	19		 DB	 25			; 00000019H
  02db8	19		 DB	 25			; 00000019H
  02db9	19		 DB	 25			; 00000019H
  02dba	19		 DB	 25			; 00000019H
  02dbb	19		 DB	 25			; 00000019H
  02dbc	19		 DB	 25			; 00000019H
  02dbd	19		 DB	 25			; 00000019H
  02dbe	19		 DB	 25			; 00000019H
  02dbf	19		 DB	 25			; 00000019H
  02dc0	19		 DB	 25			; 00000019H
  02dc1	19		 DB	 25			; 00000019H
  02dc2	19		 DB	 25			; 00000019H
  02dc3	19		 DB	 25			; 00000019H
  02dc4	19		 DB	 25			; 00000019H
  02dc5	19		 DB	 25			; 00000019H
  02dc6	19		 DB	 25			; 00000019H
  02dc7	19		 DB	 25			; 00000019H
  02dc8	19		 DB	 25			; 00000019H
  02dc9	19		 DB	 25			; 00000019H
  02dca	19		 DB	 25			; 00000019H
  02dcb	19		 DB	 25			; 00000019H
  02dcc	19		 DB	 25			; 00000019H
  02dcd	19		 DB	 25			; 00000019H
  02dce	19		 DB	 25			; 00000019H
  02dcf	19		 DB	 25			; 00000019H
  02dd0	11		 DB	 17			; 00000011H
  02dd1	19		 DB	 25			; 00000019H
  02dd2	19		 DB	 25			; 00000019H
  02dd3	19		 DB	 25			; 00000019H
  02dd4	19		 DB	 25			; 00000019H
  02dd5	19		 DB	 25			; 00000019H
  02dd6	19		 DB	 25			; 00000019H
  02dd7	19		 DB	 25			; 00000019H
  02dd8	19		 DB	 25			; 00000019H
  02dd9	19		 DB	 25			; 00000019H
  02dda	19		 DB	 25			; 00000019H
  02ddb	19		 DB	 25			; 00000019H
  02ddc	19		 DB	 25			; 00000019H
  02ddd	19		 DB	 25			; 00000019H
  02dde	19		 DB	 25			; 00000019H
  02ddf	19		 DB	 25			; 00000019H
  02de0	19		 DB	 25			; 00000019H
  02de1	19		 DB	 25			; 00000019H
  02de2	19		 DB	 25			; 00000019H
  02de3	12		 DB	 18			; 00000012H
  02de4	19		 DB	 25			; 00000019H
  02de5	19		 DB	 25			; 00000019H
  02de6	19		 DB	 25			; 00000019H
  02de7	19		 DB	 25			; 00000019H
  02de8	19		 DB	 25			; 00000019H
  02de9	19		 DB	 25			; 00000019H
  02dea	19		 DB	 25			; 00000019H
  02deb	19		 DB	 25			; 00000019H
  02dec	19		 DB	 25			; 00000019H
  02ded	19		 DB	 25			; 00000019H
  02dee	19		 DB	 25			; 00000019H
  02def	19		 DB	 25			; 00000019H
  02df0	19		 DB	 25			; 00000019H
  02df1	19		 DB	 25			; 00000019H
  02df2	19		 DB	 25			; 00000019H
  02df3	19		 DB	 25			; 00000019H
  02df4	19		 DB	 25			; 00000019H
  02df5	08		 DB	 8
  02df6	19		 DB	 25			; 00000019H
  02df7	19		 DB	 25			; 00000019H
  02df8	19		 DB	 25			; 00000019H
  02df9	19		 DB	 25			; 00000019H
  02dfa	19		 DB	 25			; 00000019H
  02dfb	19		 DB	 25			; 00000019H
  02dfc	13		 DB	 19			; 00000013H
  02dfd	19		 DB	 25			; 00000019H
  02dfe	14		 DB	 20			; 00000014H
  02dff	15		 DB	 21			; 00000015H
  02e00	19		 DB	 25			; 00000019H
  02e01	19		 DB	 25			; 00000019H
  02e02	19		 DB	 25			; 00000019H
  02e03	19		 DB	 25			; 00000019H
  02e04	19		 DB	 25			; 00000019H
  02e05	19		 DB	 25			; 00000019H
  02e06	19		 DB	 25			; 00000019H
  02e07	19		 DB	 25			; 00000019H
  02e08	16		 DB	 22			; 00000016H
  02e09	19		 DB	 25			; 00000019H
  02e0a	19		 DB	 25			; 00000019H
  02e0b	19		 DB	 25			; 00000019H
  02e0c	19		 DB	 25			; 00000019H
  02e0d	19		 DB	 25			; 00000019H
  02e0e	19		 DB	 25			; 00000019H
  02e0f	17		 DB	 23			; 00000017H
  02e10	18		 DB	 24			; 00000018H
  02e11	0f 1f 00	 npad	 3
$LN377@P_MobjThin:
  02e14	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e18	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e1c	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e20	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e24	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e28	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e2c	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e30	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e34	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e38	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e3c	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e40	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e44	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e48	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e4c	00 00 00 00	 DD	 $LN165@P_MobjThin
  02e50	00 00 00 00	 DD	 $LN165@P_MobjThin
$LN379@P_MobjThin:
  02e54	00 00 00 00	 DD	 $LN340@P_MobjThin
  02e58	00 00 00 00	 DD	 $LN287@P_MobjThin
  02e5c	00 00 00 00	 DD	 $LN297@P_MobjThin
  02e60	00 00 00 00	 DD	 $LN338@P_MobjThin
  02e64	00 00 00 00	 DD	 $LN286@P_MobjThin
  02e68	00 00 00 00	 DD	 $LN339@P_MobjThin
  02e6c	00 00 00 00	 DD	 $LN341@P_MobjThin
$LN378@P_MobjThin:
  02e70	00		 DB	 0
  02e71	06		 DB	 6
  02e72	06		 DB	 6
  02e73	06		 DB	 6
  02e74	06		 DB	 6
  02e75	06		 DB	 6
  02e76	06		 DB	 6
  02e77	06		 DB	 6
  02e78	06		 DB	 6
  02e79	06		 DB	 6
  02e7a	06		 DB	 6
  02e7b	06		 DB	 6
  02e7c	06		 DB	 6
  02e7d	06		 DB	 6
  02e7e	06		 DB	 6
  02e7f	06		 DB	 6
  02e80	06		 DB	 6
  02e81	06		 DB	 6
  02e82	06		 DB	 6
  02e83	06		 DB	 6
  02e84	06		 DB	 6
  02e85	06		 DB	 6
  02e86	06		 DB	 6
  02e87	06		 DB	 6
  02e88	06		 DB	 6
  02e89	01		 DB	 1
  02e8a	01		 DB	 1
  02e8b	06		 DB	 6
  02e8c	06		 DB	 6
  02e8d	06		 DB	 6
  02e8e	06		 DB	 6
  02e8f	06		 DB	 6
  02e90	06		 DB	 6
  02e91	06		 DB	 6
  02e92	06		 DB	 6
  02e93	06		 DB	 6
  02e94	06		 DB	 6
  02e95	06		 DB	 6
  02e96	06		 DB	 6
  02e97	06		 DB	 6
  02e98	06		 DB	 6
  02e99	06		 DB	 6
  02e9a	06		 DB	 6
  02e9b	06		 DB	 6
  02e9c	06		 DB	 6
  02e9d	06		 DB	 6
  02e9e	06		 DB	 6
  02e9f	06		 DB	 6
  02ea0	06		 DB	 6
  02ea1	06		 DB	 6
  02ea2	06		 DB	 6
  02ea3	02		 DB	 2
  02ea4	02		 DB	 2
  02ea5	02		 DB	 2
  02ea6	02		 DB	 2
  02ea7	02		 DB	 2
  02ea8	02		 DB	 2
  02ea9	02		 DB	 2
  02eaa	02		 DB	 2
  02eab	02		 DB	 2
  02eac	02		 DB	 2
  02ead	02		 DB	 2
  02eae	02		 DB	 2
  02eaf	02		 DB	 2
  02eb0	02		 DB	 2
  02eb1	06		 DB	 6
  02eb2	03		 DB	 3
  02eb3	02		 DB	 2
  02eb4	06		 DB	 6
  02eb5	06		 DB	 6
  02eb6	06		 DB	 6
  02eb7	06		 DB	 6
  02eb8	06		 DB	 6
  02eb9	06		 DB	 6
  02eba	06		 DB	 6
  02ebb	06		 DB	 6
  02ebc	06		 DB	 6
  02ebd	06		 DB	 6
  02ebe	06		 DB	 6
  02ebf	06		 DB	 6
  02ec0	06		 DB	 6
  02ec1	06		 DB	 6
  02ec2	06		 DB	 6
  02ec3	06		 DB	 6
  02ec4	06		 DB	 6
  02ec5	06		 DB	 6
  02ec6	06		 DB	 6
  02ec7	06		 DB	 6
  02ec8	06		 DB	 6
  02ec9	06		 DB	 6
  02eca	06		 DB	 6
  02ecb	06		 DB	 6
  02ecc	06		 DB	 6
  02ecd	06		 DB	 6
  02ece	06		 DB	 6
  02ecf	06		 DB	 6
  02ed0	06		 DB	 6
  02ed1	06		 DB	 6
  02ed2	06		 DB	 6
  02ed3	06		 DB	 6
  02ed4	06		 DB	 6
  02ed5	06		 DB	 6
  02ed6	06		 DB	 6
  02ed7	06		 DB	 6
  02ed8	06		 DB	 6
  02ed9	06		 DB	 6
  02eda	06		 DB	 6
  02edb	06		 DB	 6
  02edc	06		 DB	 6
  02edd	06		 DB	 6
  02ede	06		 DB	 6
  02edf	06		 DB	 6
  02ee0	06		 DB	 6
  02ee1	06		 DB	 6
  02ee2	06		 DB	 6
  02ee3	06		 DB	 6
  02ee4	06		 DB	 6
  02ee5	06		 DB	 6
  02ee6	06		 DB	 6
  02ee7	06		 DB	 6
  02ee8	06		 DB	 6
  02ee9	06		 DB	 6
  02eea	06		 DB	 6
  02eeb	06		 DB	 6
  02eec	06		 DB	 6
  02eed	06		 DB	 6
  02eee	06		 DB	 6
  02eef	06		 DB	 6
  02ef0	06		 DB	 6
  02ef1	06		 DB	 6
  02ef2	06		 DB	 6
  02ef3	06		 DB	 6
  02ef4	06		 DB	 6
  02ef5	06		 DB	 6
  02ef6	06		 DB	 6
  02ef7	06		 DB	 6
  02ef8	06		 DB	 6
  02ef9	06		 DB	 6
  02efa	06		 DB	 6
  02efb	06		 DB	 6
  02efc	06		 DB	 6
  02efd	06		 DB	 6
  02efe	06		 DB	 6
  02eff	06		 DB	 6
  02f00	06		 DB	 6
  02f01	06		 DB	 6
  02f02	06		 DB	 6
  02f03	06		 DB	 6
  02f04	06		 DB	 6
  02f05	06		 DB	 6
  02f06	06		 DB	 6
  02f07	06		 DB	 6
  02f08	06		 DB	 6
  02f09	06		 DB	 6
  02f0a	06		 DB	 6
  02f0b	06		 DB	 6
  02f0c	06		 DB	 6
  02f0d	06		 DB	 6
  02f0e	06		 DB	 6
  02f0f	06		 DB	 6
  02f10	06		 DB	 6
  02f11	06		 DB	 6
  02f12	06		 DB	 6
  02f13	06		 DB	 6
  02f14	06		 DB	 6
  02f15	06		 DB	 6
  02f16	06		 DB	 6
  02f17	06		 DB	 6
  02f18	06		 DB	 6
  02f19	06		 DB	 6
  02f1a	06		 DB	 6
  02f1b	06		 DB	 6
  02f1c	06		 DB	 6
  02f1d	06		 DB	 6
  02f1e	06		 DB	 6
  02f1f	06		 DB	 6
  02f20	06		 DB	 6
  02f21	06		 DB	 6
  02f22	06		 DB	 6
  02f23	06		 DB	 6
  02f24	06		 DB	 6
  02f25	06		 DB	 6
  02f26	06		 DB	 6
  02f27	06		 DB	 6
  02f28	06		 DB	 6
  02f29	06		 DB	 6
  02f2a	06		 DB	 6
  02f2b	06		 DB	 6
  02f2c	06		 DB	 6
  02f2d	06		 DB	 6
  02f2e	06		 DB	 6
  02f2f	06		 DB	 6
  02f30	06		 DB	 6
  02f31	06		 DB	 6
  02f32	06		 DB	 6
  02f33	06		 DB	 6
  02f34	06		 DB	 6
  02f35	04		 DB	 4
  02f36	06		 DB	 6
  02f37	06		 DB	 6
  02f38	06		 DB	 6
  02f39	06		 DB	 6
  02f3a	06		 DB	 6
  02f3b	06		 DB	 6
  02f3c	06		 DB	 6
  02f3d	06		 DB	 6
  02f3e	06		 DB	 6
  02f3f	06		 DB	 6
  02f40	06		 DB	 6
  02f41	06		 DB	 6
  02f42	06		 DB	 6
  02f43	06		 DB	 6
  02f44	06		 DB	 6
  02f45	06		 DB	 6
  02f46	06		 DB	 6
  02f47	06		 DB	 6
  02f48	06		 DB	 6
  02f49	06		 DB	 6
  02f4a	06		 DB	 6
  02f4b	06		 DB	 6
  02f4c	06		 DB	 6
  02f4d	06		 DB	 6
  02f4e	06		 DB	 6
  02f4f	06		 DB	 6
  02f50	06		 DB	 6
  02f51	06		 DB	 6
  02f52	06		 DB	 6
  02f53	06		 DB	 6
  02f54	06		 DB	 6
  02f55	06		 DB	 6
  02f56	05		 DB	 5
  02f57	90		 npad	 1
$LN381@P_MobjThin:
  02f58	00 00 00 00	 DD	 $LN355@P_MobjThin
  02f5c	00 00 00 00	 DD	 $LN363@P_MobjThin
  02f60	00 00 00 00	 DD	 $LN367@P_MobjThin
$LN380@P_MobjThin:
  02f64	00		 DB	 0
  02f65	00		 DB	 0
  02f66	00		 DB	 0
  02f67	00		 DB	 0
  02f68	00		 DB	 0
  02f69	00		 DB	 0
  02f6a	02		 DB	 2
  02f6b	02		 DB	 2
  02f6c	02		 DB	 2
  02f6d	02		 DB	 2
  02f6e	02		 DB	 2
  02f6f	02		 DB	 2
  02f70	02		 DB	 2
  02f71	02		 DB	 2
  02f72	02		 DB	 2
  02f73	02		 DB	 2
  02f74	02		 DB	 2
  02f75	02		 DB	 2
  02f76	02		 DB	 2
  02f77	02		 DB	 2
  02f78	02		 DB	 2
  02f79	02		 DB	 2
  02f7a	02		 DB	 2
  02f7b	02		 DB	 2
  02f7c	02		 DB	 2
  02f7d	02		 DB	 2
  02f7e	02		 DB	 2
  02f7f	02		 DB	 2
  02f80	02		 DB	 2
  02f81	02		 DB	 2
  02f82	02		 DB	 2
  02f83	02		 DB	 2
  02f84	02		 DB	 2
  02f85	02		 DB	 2
  02f86	02		 DB	 2
  02f87	02		 DB	 2
  02f88	02		 DB	 2
  02f89	02		 DB	 2
  02f8a	02		 DB	 2
  02f8b	02		 DB	 2
  02f8c	02		 DB	 2
  02f8d	02		 DB	 2
  02f8e	02		 DB	 2
  02f8f	02		 DB	 2
  02f90	02		 DB	 2
  02f91	02		 DB	 2
  02f92	02		 DB	 2
  02f93	02		 DB	 2
  02f94	02		 DB	 2
  02f95	02		 DB	 2
  02f96	02		 DB	 2
  02f97	01		 DB	 1
_P_MobjThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RunShields
_TEXT	SEGMENT
_i$ = -4						; size = 4
_P_RunShields PROC					; COMDAT

; 4805 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4806 : 	INT32 i;
; 4807 : 
; 4808 : 	for (i = 0; i < numshields; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@P_RunShiel
$LN2@P_RunShiel:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_RunShiel:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numshields
  00024	7d 3e		 jge	 SHORT $LN3@P_RunShiel

; 4809 : 	{
; 4810 : 		P_ShieldLook(shields[i], shields[i]->info->speed);

  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00029	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shields[eax*4]
  00030	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00036	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _shields[ecx*4]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 _P_ShieldLook
  0004a	83 c4 08	 add	 esp, 8

; 4811 : 		P_SetTarget(&shields[i], NULL);

  0004d	6a 00		 push	 0
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00052	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR _shields[eax*4]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _P_SetTarget
  0005f	83 c4 08	 add	 esp, 8

; 4812 : 	}

  00062	eb ae		 jmp	 SHORT $LN2@P_RunShiel
$LN3@P_RunShiel:

; 4813 : 
; 4814 : 	numshields = 0;

  00064	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _numshields, 0

; 4815 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_P_RunShields ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SetMobjState
_TEXT	SEGMENT
tv66 = -10776						; size = 4
_tempstate$ = -10260					; size = 10240
_ret$ = -20						; size = 4
_i$ = -16						; size = 4
_seenstate$ = -12					; size = 4
_st$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mobj$ = 8						; size = 4
_state$ = 12						; size = 4
_P_SetMobjState PROC					; COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 2a 00 00	 mov	 eax, 10776		; 00002a18H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi

; 214  : 	state_t *st;
; 215  : 
; 216  : 	// remember states seen, to detect cycles:
; 217  : 	static statenum_t seenstate_tab[NUMSTATES]; // fast transition table
; 218  : 	statenum_t *seenstate = seenstate_tab; // pointer to table

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _seenstate$[ebp], OFFSET ?seenstate_tab@?1??P_SetMobjState@@9@9

; 219  : 	static INT32 recursion; // detects recursion
; 220  : 	statenum_t i = state; // initial state

  00021	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  00024	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 221  : 	boolean ret = true; // return value

  00027	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 1

; 222  : 	statenum_t tempstate[NUMSTATES]; // for use with recursion
; 223  : 
; 224  : #ifdef PARANOIA
; 225  : 	if (mobj->player != NULL)
; 226  : 		I_Error("P_SetMobjState used for player mobj. Use P_SetPlayerMobjState instead!\n(State called: %d)", state);
; 227  : #endif
; 228  : 
; 229  : 	if (recursion++) // if recursion detected,

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?recursion@?1??P_SetMobjState@@9@9
  00033	89 85 e8 d5 ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?recursion@?1??P_SetMobjState@@9@9
  0003f	83 c1 01	 add	 ecx, 1
  00042	89 0d 00 00 00
	00		 mov	 DWORD PTR ?recursion@?1??P_SetMobjState@@9@9, ecx
  00048	83 bd e8 d5 ff
	ff 00		 cmp	 DWORD PTR tv66[ebp], 0
  0004f	74 1c		 je	 SHORT $LN8@P_SetMobjS

; 230  : 		memset(seenstate = tempstate, 0, sizeof tempstate); // clear state table

  00051	8d 85 ec d7 ff
	ff		 lea	 eax, DWORD PTR _tempstate$[ebp]
  00057	89 45 f4	 mov	 DWORD PTR _seenstate$[ebp], eax
  0005a	68 00 28 00 00	 push	 10240			; 00002800H
  0005f	6a 00		 push	 0
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _seenstate$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 _memset
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@P_SetMobjS:

; 231  : 
; 232  : 	do
; 233  : 	{
; 234  : 		if (state == S_NULL)

  0006d	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  00071	75 22		 jne	 SHORT $LN9@P_SetMobjS

; 235  : 		{
; 236  : 			mobj->state = NULL;

  00073	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00076	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 237  : 			P_RemoveMobj(mobj);

  0007d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _P_RemoveMobj
  00086	83 c4 04	 add	 esp, 4

; 238  : 			ret = false;

  00089	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 239  : 			break;

  00090	e9 9c 00 00 00	 jmp	 $LN11@P_SetMobjS
$LN9@P_SetMobjS:

; 240  : 		}
; 241  : 
; 242  : 		st = &states[state];

  00095	6b 45 0c 1c	 imul	 eax, DWORD PTR _state$[ebp], 28
  00099	05 00 00 00 00	 add	 eax, OFFSET _states
  0009e	89 45 f8	 mov	 DWORD PTR _st$[ebp], eax

; 243  : 		mobj->state = st;

  000a1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000a7	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 244  : 		mobj->tics = st->tics;

  000aa	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000b0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000b3	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 245  : 		mobj->sprite = st->sprite;

  000b6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b9	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000be	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 246  : 		mobj->frame = st->frame;

  000c1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c4	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000c7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ca	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 247  : 
; 248  : 		// Modified handling.
; 249  : 		// Call action functions when the state is set
; 250  : 
; 251  : 		if (st->action.acp1)

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  000d0	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000d4	74 27		 je	 SHORT $LN10@P_SetMobjS

; 252  : 		{
; 253  : 			var1 = st->var1;

  000d6	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  000d9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000dc	89 0d 00 00 00
	00		 mov	 DWORD PTR _var1, ecx

; 254  : 			var2 = st->var2;

  000e2	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  000e5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000e8	89 0d 00 00 00
	00		 mov	 DWORD PTR _var2, ecx

; 255  : 			st->action.acp1(mobj);

  000ee	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f1	50		 push	 eax
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000f5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000f8	ff d2		 call	 edx
  000fa	83 c4 04	 add	 esp, 4
$LN10@P_SetMobjS:

; 256  : 		}
; 257  : 
; 258  : 		seenstate[state] = 1 + st->nextstate;

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  00100	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00103	83 c1 01	 add	 ecx, 1
  00106	8b 55 0c	 mov	 edx, DWORD PTR _state$[ebp]
  00109	8b 45 f4	 mov	 eax, DWORD PTR _seenstate$[ebp]
  0010c	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 259  : 
; 260  : 		state = st->nextstate;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  00112	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00115	89 4d 0c	 mov	 DWORD PTR _state$[ebp], ecx

; 261  : 	} while (!mobj->tics && !seenstate[state]);

  00118	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0011b	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  0011f	75 10		 jne	 SHORT $LN11@P_SetMobjS
  00121	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  00124	8b 4d f4	 mov	 ecx, DWORD PTR _seenstate$[ebp]
  00127	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0012b	0f 84 3c ff ff
	ff		 je	 $LN8@P_SetMobjS
$LN11@P_SetMobjS:

; 262  : 
; 263  : 	if (ret && !mobj->tics)

  00131	83 7d ec 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00135	74 28		 je	 SHORT $LN12@P_SetMobjS
  00137	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0013a	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  0013e	75 1f		 jne	 SHORT $LN12@P_SetMobjS

; 264  : 		CONS_Printf("%s", text[CYCLE_DETECT]);

  00140	b8 04 00 00 00	 mov	 eax, 4
  00145	69 c8 2f 01 00
	00		 imul	 ecx, eax, 303
  0014b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00151	52		 push	 edx
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00157	e8 00 00 00 00	 call	 _CONS_Printf
  0015c	83 c4 08	 add	 esp, 8
$LN12@P_SetMobjS:

; 265  : 
; 266  : 	if (!--recursion)

  0015f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?recursion@?1??P_SetMobjState@@9@9
  00164	83 e8 01	 sub	 eax, 1
  00167	a3 00 00 00 00	 mov	 DWORD PTR ?recursion@?1??P_SetMobjState@@9@9, eax
  0016c	75 2c		 jne	 SHORT $LN6@P_SetMobjS

; 267  : 		for (;(state = seenstate[i]) > S_NULL; i = state - 1)

  0016e	eb 09		 jmp	 SHORT $LN7@P_SetMobjS
$LN5@P_SetMobjS:
  00170	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  00173	83 e8 01	 sub	 eax, 1
  00176	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN7@P_SetMobjS:
  00179	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0017c	8b 4d f4	 mov	 ecx, DWORD PTR _seenstate$[ebp]
  0017f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00182	89 55 0c	 mov	 DWORD PTR _state$[ebp], edx
  00185	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  00189	7e 0f		 jle	 SHORT $LN6@P_SetMobjS

; 268  : 			seenstate[i] = S_NULL; // erase memory of states

  0018b	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0018e	8b 4d f4	 mov	 ecx, DWORD PTR _seenstate$[ebp]
  00191	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
  00198	eb d6		 jmp	 SHORT $LN5@P_SetMobjS
$LN6@P_SetMobjS:

; 269  : 
; 270  : 	return ret;

  0019a	8b 45 ec	 mov	 eax, DWORD PTR _ret$[ebp]

; 271  : }

  0019d	5f		 pop	 edi
  0019e	5e		 pop	 esi
  0019f	5b		 pop	 ebx
  001a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a3	33 cd		 xor	 ecx, ebp
  001a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c3		 ret	 0
_P_SetMobjState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SetPlayerMobjState
_TEXT	SEGMENT
tv75 = -10776						; size = 4
tv150 = -10776						; size = 4
_tempstate$ = -10260					; size = 10240
_ret$ = -20						; size = 4
_i$ = -16						; size = 4
_seenstate$ = -12					; size = 4
_st$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mobj$ = 8						; size = 4
_state$ = 12						; size = 4
_P_SetPlayerMobjState PROC				; COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 2a 00 00	 mov	 eax, 10776		; 00002a18H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi

; 113  : 	state_t *st;
; 114  : 
; 115  : 	// remember states seen, to detect cycles:
; 116  : 	static statenum_t seenstate_tab[NUMSTATES]; // fast transition table
; 117  : 	statenum_t *seenstate = seenstate_tab; // pointer to table

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _seenstate$[ebp], OFFSET ?seenstate_tab@?1??P_SetPlayerMobjState@@9@9

; 118  : 	static INT32 recursion; // detects recursion
; 119  : 	statenum_t i; // initial state
; 120  : 	boolean ret = true; // return value

  00021	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 1

; 121  : 	statenum_t tempstate[NUMSTATES]; // for use with recursion
; 122  : 
; 123  : 	if (mobj->player)

  00028	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002b	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00032	0f 84 85 01 00
	00		 je	 $LN24@P_SetPlaye

; 124  : 	{
; 125  : 		// Catch state changes for Super Sonic
; 126  : 		if (mobj->player->powers[pw_super] && (mobj->player->charflags & SF_SUPERANIMS))

  00038	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0003b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00041	ba 04 00 00 00	 mov	 edx, 4
  00046	6b c2 0f	 imul	 eax, edx, 15
  00049	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0004e	0f 84 d9 00 00
	00		 je	 $LN11@P_SetPlaye
  00054	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00057	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0005d	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00063	83 e2 01	 and	 edx, 1
  00066	0f 84 c1 00 00
	00		 je	 $LN11@P_SetPlaye

; 127  : 		{
; 128  : 			switch (state)

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  0006f	89 85 e8 d5 ff
	ff		 mov	 DWORD PTR tv75[ebp], eax
  00075	8b 8d e8 d5 ff
	ff		 mov	 ecx, DWORD PTR tv75[ebp]
  0007b	83 e9 01	 sub	 ecx, 1
  0007e	89 8d e8 d5 ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00084	83 bd e8 d5 ff
	ff 26		 cmp	 DWORD PTR tv75[ebp], 38	; 00000026H
  0008b	0f 87 9a 00 00
	00		 ja	 $LN22@P_SetPlaye
  00091	8b 95 e8 d5 ff
	ff		 mov	 edx, DWORD PTR tv75[ebp]
  00097	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN32@P_SetPlaye[edx]
  0009e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN33@P_SetPlaye[eax*4]
$LN13@P_SetPlaye:

; 129  : 			{
; 130  : 			case S_PLAY_STND:
; 131  : 			case S_PLAY_GASP:
; 132  : 				P_SetPlayerMobjState(mobj, S_PLAY_SUPERSTAND);

  000a5	6a 2a		 push	 42			; 0000002aH
  000a7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  000b0	83 c4 08	 add	 esp, 8

; 133  : 				return true;

  000b3	b8 01 00 00 00	 mov	 eax, 1
  000b8	e9 95 02 00 00	 jmp	 $LN1@P_SetPlaye

; 134  : 				break;

  000bd	eb 6c		 jmp	 SHORT $LN2@P_SetPlaye
$LN15@P_SetPlaye:

; 135  : 			case S_PLAY_FALL1:
; 136  : 			case S_PLAY_PLG1:
; 137  : 			case S_PLAY_RUN1:
; 138  : 				P_SetPlayerMobjState(mobj, S_PLAY_SUPERWALK1);

  000bf	6a 2b		 push	 43			; 0000002bH
  000c1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  000ca	83 c4 08	 add	 esp, 8

; 139  : 				return true;

  000cd	b8 01 00 00 00	 mov	 eax, 1
  000d2	e9 7b 02 00 00	 jmp	 $LN1@P_SetPlaye

; 140  : 				break;

  000d7	eb 52		 jmp	 SHORT $LN2@P_SetPlaye
$LN18@P_SetPlaye:

; 141  : 			case S_PLAY_SPD1:
; 142  : 				P_SetPlayerMobjState(mobj, S_PLAY_SUPERFLY1);

  000d9	6a 2d		 push	 45			; 0000002dH
  000db	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  000e4	83 c4 08	 add	 esp, 8

; 143  : 				return true;

  000e7	b8 01 00 00 00	 mov	 eax, 1
  000ec	e9 61 02 00 00	 jmp	 $LN1@P_SetPlaye

; 144  : 				break;

  000f1	eb 38		 jmp	 SHORT $LN2@P_SetPlaye
$LN19@P_SetPlaye:

; 145  : 			case S_PLAY_TEETER1:
; 146  : 				P_SetPlayerMobjState(mobj, S_PLAY_SUPERTEETER);

  000f3	6a 2f		 push	 47			; 0000002fH
  000f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  000fe	83 c4 08	 add	 esp, 8

; 147  : 				return true;

  00101	b8 01 00 00 00	 mov	 eax, 1
  00106	e9 47 02 00 00	 jmp	 $LN1@P_SetPlaye

; 148  : 				break;

  0010b	eb 1e		 jmp	 SHORT $LN2@P_SetPlaye
$LN20@P_SetPlaye:

; 149  : 			case S_PLAY_ATK1:
; 150  : 				if (!(mobj->player->charflags & SF_SUPERSPIN))

  0010d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00110	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00116	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0011c	83 e2 02	 and	 edx, 2
  0011f	75 0a		 jne	 SHORT $LN21@P_SetPlaye

; 151  : 					return true;

  00121	b8 01 00 00 00	 mov	 eax, 1
  00126	e9 27 02 00 00	 jmp	 $LN1@P_SetPlaye
$LN21@P_SetPlaye:
$LN22@P_SetPlaye:
$LN2@P_SetPlaye:

; 152  : 				break;
; 153  : 			default:
; 154  : 				break;
; 155  : 			}
; 156  : 		}

  0012b	eb 64		 jmp	 SHORT $LN23@P_SetPlaye
$LN11@P_SetPlaye:

; 157  : 		else if (mobj->state == &states[mobj->info->painstate] && mobj->player->powers[pw_flashing] == flashingtics && state != mobj->info->painstate)

  0012d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00130	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00136	6b 51 1c 1c	 imul	 edx, DWORD PTR [ecx+28], 28
  0013a	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00140	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00143	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00146	75 49		 jne	 SHORT $LN23@P_SetPlaye
  00148	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0014b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00151	ba 04 00 00 00	 mov	 edx, 4
  00156	d1 e2		 shl	 edx, 1
  00158	8b 44 11 38	 mov	 eax, DWORD PTR [ecx+edx+56]
  0015c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _flashingtics
  00162	75 2d		 jne	 SHORT $LN23@P_SetPlaye
  00164	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00167	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0016d	8b 55 0c	 mov	 edx, DWORD PTR _state$[ebp]
  00170	3b 51 1c	 cmp	 edx, DWORD PTR [ecx+28]
  00173	74 1c		 je	 SHORT $LN23@P_SetPlaye

; 158  : 			mobj->player->powers[pw_flashing] = flashingtics-1;

  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR _flashingtics
  0017a	83 e8 01	 sub	 eax, 1
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00180	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00186	b9 04 00 00 00	 mov	 ecx, 4
  0018b	d1 e1		 shl	 ecx, 1
  0018d	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
$LN23@P_SetPlaye:

; 159  : 
; 160  : 		if ((!(mobj->player->charability2 == CA2_SPINDASH))
; 161  : 			&& (state >= S_PLAY_ATK1 && state <= S_PLAY_ATK4))

  00191	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00194	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0019a	83 b9 dc 00 00
	00 00		 cmp	 DWORD PTR [ecx+220], 0
  001a1	74 1a		 je	 SHORT $LN24@P_SetPlaye
  001a3	83 7d 0c 0c	 cmp	 DWORD PTR _state$[ebp], 12 ; 0000000cH
  001a7	7c 14		 jl	 SHORT $LN24@P_SetPlaye
  001a9	83 7d 0c 0f	 cmp	 DWORD PTR _state$[ebp], 15 ; 0000000fH
  001ad	7f 0e		 jg	 SHORT $LN24@P_SetPlaye

; 162  : 			P_SetPlayerMobjState(mobj, S_PLAY_PLG1);

  001af	6a 10		 push	 16			; 00000010H
  001b1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  001ba	83 c4 08	 add	 esp, 8
$LN24@P_SetPlaye:

; 163  : 	}
; 164  : 
; 165  : 	if (recursion++) // if recursion detected,

  001bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?recursion@?1??P_SetPlayerMobjState@@9@9
  001c2	89 85 e8 d5 ff
	ff		 mov	 DWORD PTR tv150[ebp], eax
  001c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?recursion@?1??P_SetPlayerMobjState@@9@9
  001ce	83 c1 01	 add	 ecx, 1
  001d1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?recursion@?1??P_SetPlayerMobjState@@9@9, ecx
  001d7	83 bd e8 d5 ff
	ff 00		 cmp	 DWORD PTR tv150[ebp], 0
  001de	74 1c		 je	 SHORT $LN25@P_SetPlaye

; 166  : 		memset(seenstate = tempstate, 0, sizeof tempstate); // clear state table

  001e0	8d 85 ec d7 ff
	ff		 lea	 eax, DWORD PTR _tempstate$[ebp]
  001e6	89 45 f4	 mov	 DWORD PTR _seenstate$[ebp], eax
  001e9	68 00 28 00 00	 push	 10240			; 00002800H
  001ee	6a 00		 push	 0
  001f0	8b 4d f4	 mov	 ecx, DWORD PTR _seenstate$[ebp]
  001f3	51		 push	 ecx
  001f4	e8 00 00 00 00	 call	 _memset
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@P_SetPlaye:

; 167  : 
; 168  : 	i = state;

  001fc	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  001ff	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN6@P_SetPlaye:

; 169  : 
; 170  : 	do
; 171  : 	{
; 172  : 		if (state == S_NULL)

  00202	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  00206	75 22		 jne	 SHORT $LN26@P_SetPlaye

; 173  : 		{
; 174  : 			mobj->state = NULL;

  00208	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0020b	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 175  : 			P_RemoveMobj(mobj);

  00212	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 _P_RemoveMobj
  0021b	83 c4 04	 add	 esp, 4

; 176  : 			ret = false;

  0021e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 177  : 			break;

  00225	e9 bc 00 00 00	 jmp	 $LN28@P_SetPlaye
$LN26@P_SetPlaye:

; 178  : 		}
; 179  : 
; 180  : 		st = &states[state];

  0022a	6b 45 0c 1c	 imul	 eax, DWORD PTR _state$[ebp], 28
  0022e	05 00 00 00 00	 add	 eax, OFFSET _states
  00233	89 45 f8	 mov	 DWORD PTR _st$[ebp], eax

; 181  : 		mobj->state = st;

  00236	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00239	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  0023c	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 182  : 		mobj->tics = playerstatetics[mobj->player-players][state];

  0023f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00242	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00248	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0024d	99		 cdq
  0024e	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00253	f7 f9		 idiv	 ecx
  00255	69 d0 e8 00 00
	00		 imul	 edx, eax, 232
  0025b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0025e	8b 4d 0c	 mov	 ecx, DWORD PTR _state$[ebp]
  00261	8b 94 8a 00 00
	00 00		 mov	 edx, DWORD PTR _playerstatetics[edx+ecx*4]
  00268	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 183  : 		mobj->sprite = st->sprite;

  0026b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0026e	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  00271	8b 11		 mov	 edx, DWORD PTR [ecx]
  00273	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 184  : 		mobj->frame = st->frame;

  00276	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00279	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  0027c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0027f	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 185  : 
; 186  : 		// Modified handling.
; 187  : 		// Call action functions when the state is set
; 188  : 
; 189  : 		if (st->action.acp1)

  00282	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  00285	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00289	74 27		 je	 SHORT $LN27@P_SetPlaye

; 190  : 		{
; 191  : 			var1 = st->var1;

  0028b	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  0028e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00291	89 0d 00 00 00
	00		 mov	 DWORD PTR _var1, ecx

; 192  : 			var2 = st->var2;

  00297	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  0029a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0029d	89 0d 00 00 00
	00		 mov	 DWORD PTR _var2, ecx

; 193  : 			st->action.acp1(mobj);

  002a3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002a6	50		 push	 eax
  002a7	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  002aa	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002ad	ff d2		 call	 edx
  002af	83 c4 04	 add	 esp, 4
$LN27@P_SetPlaye:

; 194  : 		}
; 195  : 
; 196  : 		seenstate[state] = 1 + st->nextstate;

  002b2	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  002b5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002b8	83 c1 01	 add	 ecx, 1
  002bb	8b 55 0c	 mov	 edx, DWORD PTR _state$[ebp]
  002be	8b 45 f4	 mov	 eax, DWORD PTR _seenstate$[ebp]
  002c1	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 197  : 
; 198  : 		state = st->nextstate;

  002c4	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  002c7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002ca	89 4d 0c	 mov	 DWORD PTR _state$[ebp], ecx

; 199  : 	} while (!mobj->tics && !seenstate[state]);

  002cd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002d0	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  002d4	75 10		 jne	 SHORT $LN28@P_SetPlaye
  002d6	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  002d9	8b 4d f4	 mov	 ecx, DWORD PTR _seenstate$[ebp]
  002dc	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  002e0	0f 84 1c ff ff
	ff		 je	 $LN6@P_SetPlaye
$LN28@P_SetPlaye:

; 200  : 
; 201  : 	if (ret && !mobj->tics)

  002e6	83 7d ec 00	 cmp	 DWORD PTR _ret$[ebp], 0
  002ea	74 28		 je	 SHORT $LN29@P_SetPlaye
  002ec	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002ef	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  002f3	75 1f		 jne	 SHORT $LN29@P_SetPlaye

; 202  : 		CONS_Printf("%s", text[CYCLE_DETECT]);

  002f5	b8 04 00 00 00	 mov	 eax, 4
  002fa	69 c8 2f 01 00
	00		 imul	 ecx, eax, 303
  00300	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00306	52		 push	 edx
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0030c	e8 00 00 00 00	 call	 _CONS_Printf
  00311	83 c4 08	 add	 esp, 8
$LN29@P_SetPlaye:

; 203  : 
; 204  : 	if (!--recursion)

  00314	a1 00 00 00 00	 mov	 eax, DWORD PTR ?recursion@?1??P_SetPlayerMobjState@@9@9
  00319	83 e8 01	 sub	 eax, 1
  0031c	a3 00 00 00 00	 mov	 DWORD PTR ?recursion@?1??P_SetPlayerMobjState@@9@9, eax
  00321	75 2c		 jne	 SHORT $LN8@P_SetPlaye

; 205  : 		for (;(state = seenstate[i]) > S_NULL; i = state - 1)

  00323	eb 09		 jmp	 SHORT $LN9@P_SetPlaye
$LN7@P_SetPlaye:
  00325	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  00328	83 e8 01	 sub	 eax, 1
  0032b	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN9@P_SetPlaye:
  0032e	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00331	8b 4d f4	 mov	 ecx, DWORD PTR _seenstate$[ebp]
  00334	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00337	89 55 0c	 mov	 DWORD PTR _state$[ebp], edx
  0033a	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  0033e	7e 0f		 jle	 SHORT $LN8@P_SetPlaye

; 206  : 			seenstate[i] = S_NULL; // erase memory of states

  00340	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00343	8b 4d f4	 mov	 ecx, DWORD PTR _seenstate$[ebp]
  00346	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
  0034d	eb d6		 jmp	 SHORT $LN7@P_SetPlaye
$LN8@P_SetPlaye:

; 207  : 
; 208  : 	return ret;

  0034f	8b 45 ec	 mov	 eax, DWORD PTR _ret$[ebp]
$LN1@P_SetPlaye:

; 209  : }

  00352	5f		 pop	 edi
  00353	5e		 pop	 esi
  00354	5b		 pop	 ebx
  00355	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00358	33 cd		 xor	 ecx, ebp
  0035a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0035f	8b e5		 mov	 esp, ebp
  00361	5d		 pop	 ebp
  00362	c3		 ret	 0
  00363	90		 npad	 1
$LN33@P_SetPlaye:
  00364	00 00 00 00	 DD	 $LN13@P_SetPlaye
  00368	00 00 00 00	 DD	 $LN15@P_SetPlaye
  0036c	00 00 00 00	 DD	 $LN20@P_SetPlaye
  00370	00 00 00 00	 DD	 $LN18@P_SetPlaye
  00374	00 00 00 00	 DD	 $LN19@P_SetPlaye
  00378	00 00 00 00	 DD	 $LN22@P_SetPlaye
$LN32@P_SetPlaye:
  0037c	00		 DB	 0
  0037d	05		 DB	 5
  0037e	05		 DB	 5
  0037f	01		 DB	 1
  00380	05		 DB	 5
  00381	05		 DB	 5
  00382	05		 DB	 5
  00383	05		 DB	 5
  00384	05		 DB	 5
  00385	05		 DB	 5
  00386	05		 DB	 5
  00387	02		 DB	 2
  00388	05		 DB	 5
  00389	05		 DB	 5
  0038a	05		 DB	 5
  0038b	01		 DB	 1
  0038c	03		 DB	 3
  0038d	05		 DB	 5
  0038e	05		 DB	 5
  0038f	05		 DB	 5
  00390	05		 DB	 5
  00391	05		 DB	 5
  00392	05		 DB	 5
  00393	05		 DB	 5
  00394	05		 DB	 5
  00395	05		 DB	 5
  00396	05		 DB	 5
  00397	05		 DB	 5
  00398	05		 DB	 5
  00399	05		 DB	 5
  0039a	05		 DB	 5
  0039b	00		 DB	 0
  0039c	05		 DB	 5
  0039d	05		 DB	 5
  0039e	05		 DB	 5
  0039f	05		 DB	 5
  003a0	04		 DB	 4
  003a1	05		 DB	 5
  003a2	01		 DB	 1
_P_SetPlayerMobjState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RemoveSavegameMobj
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_RemoveSavegameMobj PROC				; COMDAT

; 6685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6686 : 	// unlink from sector and block lists
; 6687 : 	P_UnsetThingPosition(mobj);

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00012	83 c4 04	 add	 esp, 4

; 6688 : 
; 6689 : 	// Remove touching_sectorlist from mobj.
; 6690 : 	if (sector_list)

  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sector_list, 0
  0001c	74 18		 je	 SHORT $LN2@P_RemoveSa

; 6691 : 	{
; 6692 : 		P_DelSeclist(sector_list);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _sector_list
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _P_DelSeclist
  00029	83 c4 04	 add	 esp, 4

; 6693 : 		sector_list = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sector_list, 0
$LN2@P_RemoveSa:

; 6694 : 	}
; 6695 : 
; 6696 : 	// stop any playing sound
; 6697 : 	S_StopSound(mobj);

  00036	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _S_StopSound
  0003f	83 c4 04	 add	 esp, 4

; 6698 : 
; 6699 : 	// free block
; 6700 : 	P_RemoveThinker((thinker_t *)mobj);

  00042	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _P_RemoveThinker
  0004b	83 c4 04	 add	 esp, 4

; 6701 : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_P_RemoveSavegameMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RemoveMobj
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_RemoveMobj PROC					; COMDAT

; 6605 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6606 : 	// Rings only, please!
; 6607 : 	if
; 6608 : 	(
; 6609 : 	 mobj->spawnpoint &&
; 6610 : 	 (
; 6611 : 	  mobj->type == MT_RING
; 6612 : 	  || mobj->type == MT_COIN
; 6613 : #ifdef BLUE_SPHERES
; 6614 : 	  || mobj->type == MT_BLUEBALL
; 6615 : #endif
; 6616 : 	  || mobj->type == MT_REDTEAMRING
; 6617 : 	  || mobj->type == MT_BLUETEAMRING
; 6618 : 	  || mobj->type == MT_BOUNCERING
; 6619 : 	  || mobj->type == MT_RAILRING
; 6620 : 	  || mobj->type == MT_AUTOMATICRING
; 6621 : 	  || mobj->type == MT_EXPLOSIONRING
; 6622 : 	  || mobj->type == MT_SCATTERRING
; 6623 : 	  || mobj->type == MT_GRENADERING
; 6624 : 	  || mobj->type == MT_BOUNCEPICKUP
; 6625 : 	  || mobj->type == MT_RAILPICKUP
; 6626 : 	  || mobj->type == MT_AUTOPICKUP
; 6627 : 	  || mobj->type == MT_EXPLODEPICKUP
; 6628 : 	  || mobj->type == MT_SCATTERPICKUP
; 6629 : 	  || mobj->type == MT_GRENADEPICKUP
; 6630 : 	 ) && !(mobj->flags2 & MF2_DONTRESPAWN)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  00013	0f 84 31 01 00
	00		 je	 $LN4@P_RemoveMo
  00019	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001c	83 78 7c 2b	 cmp	 DWORD PTR [eax+124], 43	; 0000002bH
  00020	0f 84 be 00 00
	00		 je	 $LN3@P_RemoveMo
  00026	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00029	81 78 7c e1 00
	00 00		 cmp	 DWORD PTR [eax+124], 225 ; 000000e1H
  00030	0f 84 ae 00 00
	00		 je	 $LN3@P_RemoveMo
  00036	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00039	83 78 7c 30	 cmp	 DWORD PTR [eax+124], 48	; 00000030H
  0003d	0f 84 a1 00 00
	00		 je	 $LN3@P_RemoveMo
  00043	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00046	83 78 7c 31	 cmp	 DWORD PTR [eax+124], 49	; 00000031H
  0004a	0f 84 94 00 00
	00		 je	 $LN3@P_RemoveMo
  00050	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00053	81 78 7c d0 00
	00 00		 cmp	 DWORD PTR [eax+124], 208 ; 000000d0H
  0005a	0f 84 84 00 00
	00		 je	 $LN3@P_RemoveMo
  00060	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00063	81 78 7c d1 00
	00 00		 cmp	 DWORD PTR [eax+124], 209 ; 000000d1H
  0006a	74 78		 je	 SHORT $LN3@P_RemoveMo
  0006c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0006f	81 78 7c d2 00
	00 00		 cmp	 DWORD PTR [eax+124], 210 ; 000000d2H
  00076	74 6c		 je	 SHORT $LN3@P_RemoveMo
  00078	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0007b	81 78 7c d3 00
	00 00		 cmp	 DWORD PTR [eax+124], 211 ; 000000d3H
  00082	74 60		 je	 SHORT $LN3@P_RemoveMo
  00084	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00087	81 78 7c d4 00
	00 00		 cmp	 DWORD PTR [eax+124], 212 ; 000000d4H
  0008e	74 54		 je	 SHORT $LN3@P_RemoveMo
  00090	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00093	81 78 7c d5 00
	00 00		 cmp	 DWORD PTR [eax+124], 213 ; 000000d5H
  0009a	74 48		 je	 SHORT $LN3@P_RemoveMo
  0009c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0009f	81 78 7c d6 00
	00 00		 cmp	 DWORD PTR [eax+124], 214 ; 000000d6H
  000a6	74 3c		 je	 SHORT $LN3@P_RemoveMo
  000a8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ab	81 78 7c d7 00
	00 00		 cmp	 DWORD PTR [eax+124], 215 ; 000000d7H
  000b2	74 30		 je	 SHORT $LN3@P_RemoveMo
  000b4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b7	81 78 7c d8 00
	00 00		 cmp	 DWORD PTR [eax+124], 216 ; 000000d8H
  000be	74 24		 je	 SHORT $LN3@P_RemoveMo
  000c0	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c3	81 78 7c d9 00
	00 00		 cmp	 DWORD PTR [eax+124], 217 ; 000000d9H
  000ca	74 18		 je	 SHORT $LN3@P_RemoveMo
  000cc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000cf	81 78 7c da 00
	00 00		 cmp	 DWORD PTR [eax+124], 218 ; 000000daH
  000d6	74 0c		 je	 SHORT $LN3@P_RemoveMo
  000d8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000db	81 78 7c db 00
	00 00		 cmp	 DWORD PTR [eax+124], 219 ; 000000dbH
  000e2	75 66		 jne	 SHORT $LN4@P_RemoveMo
$LN3@P_RemoveMo:
  000e4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e7	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000ed	83 e1 04	 and	 ecx, 4
  000f0	75 58		 jne	 SHORT $LN4@P_RemoveMo

; 6631 : 	)
; 6632 : 	{
; 6633 : 		itemrespawnque[iquehead] = mobj->spawnpoint;

  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000fa	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00100	89 14 85 00 00
	00 00		 mov	 DWORD PTR _itemrespawnque[eax*4], edx

; 6634 : 		itemrespawntime[iquehead] = leveltime;

  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  00112	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _itemrespawntime[eax*4], ecx

; 6635 : 		iquehead = (iquehead+1)&(ITEMQUESIZE-1);

  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  0011e	83 c0 01	 add	 eax, 1
  00121	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00126	a3 00 00 00 00	 mov	 DWORD PTR _iquehead, eax

; 6636 : 		// lose one off the end?
; 6637 : 		if (iquehead == iquetail)

  0012b	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  00130	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _iquetail
  00136	75 12		 jne	 SHORT $LN4@P_RemoveMo

; 6638 : 			iquetail = (iquetail+1)&(ITEMQUESIZE-1);

  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquetail
  0013d	83 c0 01	 add	 eax, 1
  00140	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00145	a3 00 00 00 00	 mov	 DWORD PTR _iquetail, eax
$LN4@P_RemoveMo:

; 6639 : 	}
; 6640 : 
; 6641 : 	mobj->health = 0; // Just because

  0014a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0014d	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 6642 : 
; 6643 : 	// unlink from sector and block lists
; 6644 : 	P_UnsetThingPosition(mobj);

  00157	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00160	83 c4 04	 add	 esp, 4

; 6645 : 
; 6646 : 	// Remove touching_sectorlist from mobj.
; 6647 : 	if (sector_list)

  00163	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sector_list, 0
  0016a	74 18		 je	 SHORT $LN5@P_RemoveMo

; 6648 : 	{
; 6649 : 		P_DelSeclist(sector_list);

  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR _sector_list
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _P_DelSeclist
  00177	83 c4 04	 add	 esp, 4

; 6650 : 		sector_list = NULL;

  0017a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sector_list, 0
$LN5@P_RemoveMo:

; 6651 : 	}
; 6652 : 
; 6653 : 	// stop any playing sound
; 6654 : 	S_StopSound(mobj);

  00184	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 _S_StopSound
  0018d	83 c4 04	 add	 esp, 4

; 6655 : 
; 6656 : 	if (mobj->type == MT_EGGGUARD && mobj->tracer)

  00190	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00193	83 78 7c 15	 cmp	 DWORD PTR [eax+124], 21	; 00000015H
  00197	75 23		 jne	 SHORT $LN6@P_RemoveMo
  00199	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0019c	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  001a3	74 17		 je	 SHORT $LN6@P_RemoveMo

; 6657 : 		P_SetMobjState(mobj->tracer, S_DISS);

  001a5	68 4f 06 00 00	 push	 1615			; 0000064fH
  001aa	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ad	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  001b3	51		 push	 ecx
  001b4	e8 00 00 00 00	 call	 _P_SetMobjState
  001b9	83 c4 08	 add	 esp, 8
$LN6@P_RemoveMo:

; 6658 : 
; 6659 : 	// killough 11/98:
; 6660 : 	//
; 6661 : 	// Remove any references to other mobjs.
; 6662 : 	P_SetTarget(&mobj->target, P_SetTarget(&mobj->tracer, NULL));

  001bc	6a 00		 push	 0
  001be	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001c1	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 _P_SetTarget
  001cc	83 c4 08	 add	 esp, 8
  001cf	50		 push	 eax
  001d0	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001d3	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 _P_SetTarget
  001df	83 c4 08	 add	 esp, 8

; 6663 : 
; 6664 : 	// free block
; 6665 : 	P_RemoveThinker((thinker_t *)mobj);

  001e2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 _P_RemoveThinker
  001eb	83 c4 04	 add	 esp, 4

; 6666 : }

  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi
  001f0	5b		 pop	 ebx
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c3		 ret	 0
_P_RemoveMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RecalcPrecipInSector
_TEXT	SEGMENT
_psecnode$ = -4						; size = 4
_sector$ = 8						; size = 4
_P_RecalcPrecipInSector PROC				; COMDAT

; 2959 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2960 : 	mprecipsecnode_t *psecnode;
; 2961 : 
; 2962 : 	if (!sector)

  00009	83 7d 08 00	 cmp	 DWORD PTR _sector$[ebp], 0
  0000d	75 02		 jne	 SHORT $LN5@P_RecalcPr

; 2963 : 		return;

  0000f	eb 3b		 jmp	 SHORT $LN3@P_RecalcPr
$LN5@P_RecalcPr:

; 2964 : 
; 2965 : 	sector->moved = true; // Recalc lighting and things too, maybe

  00011	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00014	c7 80 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+172], 1

; 2966 : 
; 2967 : 	for (psecnode = sector->touching_preciplist; psecnode; psecnode = psecnode->m_snext)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _sector$[ebp]
  00021	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  00027	89 4d fc	 mov	 DWORD PTR _psecnode$[ebp], ecx
  0002a	eb 09		 jmp	 SHORT $LN4@P_RecalcPr
$LN2@P_RecalcPr:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _psecnode$[ebp]
  0002f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00032	89 4d fc	 mov	 DWORD PTR _psecnode$[ebp], ecx
$LN4@P_RecalcPr:
  00035	83 7d fc 00	 cmp	 DWORD PTR _psecnode$[ebp], 0
  00039	74 11		 je	 SHORT $LN3@P_RecalcPr

; 2968 : 		CalculatePrecipFloor(psecnode->m_thing);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _psecnode$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _CalculatePrecipFloor
  00047	83 c4 04	 add	 esp, 4
  0004a	eb e0		 jmp	 SHORT $LN2@P_RecalcPr
$LN3@P_RecalcPr:

; 2969 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_P_RecalcPrecipInSector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnMobj
_TEXT	SEGMENT
tv153 = -88						; size = 4
_spawn$1 = -20						; size = 4
_spawn$2 = -16						; size = 4
_mobj$ = -12						; size = 4
_st$ = -8						; size = 4
_info$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_type$ = 20						; size = 4
_P_SpawnMobj PROC					; COMDAT

; 6333 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6334 : 	const mobjinfo_t *info = &mobjinfo[type];

  00009	6b 45 14 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  0000d	05 00 00 00 00	 add	 eax, OFFSET _mobjinfo
  00012	89 45 fc	 mov	 DWORD PTR _info$[ebp], eax

; 6335 : 	state_t *st;
; 6336 : 	mobj_t *mobj = Z_Calloc(sizeof (*mobj), PU_LEVEL, NULL);

  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 32		 push	 50			; 00000032H
  0001b	68 d4 00 00 00	 push	 212			; 000000d4H
  00020	e8 00 00 00 00	 call	 _Z_CallocAlign
  00025	83 c4 10	 add	 esp, 16			; 00000010H
  00028	89 45 f4	 mov	 DWORD PTR _mobj$[ebp], eax

; 6337 : 
; 6338 : 	mobj->type = type;

  0002b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR _type$[ebp]
  00031	89 48 7c	 mov	 DWORD PTR [eax+124], ecx

; 6339 : 	mobj->info = info;

  00034	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _info$[ebp]
  0003a	89 88 80 00 00
	00		 mov	 DWORD PTR [eax+128], ecx

; 6340 : 
; 6341 : 	mobj->x = x;

  00040	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00046	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 6342 : 	mobj->y = y;

  00049	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0004f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 6343 : 
; 6344 : 	mobj->radius = info->radius;

  00052	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _info$[ebp]
  00058	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0005b	89 50 40	 mov	 DWORD PTR [eax+64], edx

; 6345 : 	mobj->height = info->height;

  0005e	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _info$[ebp]
  00064	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00067	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 6346 : 	mobj->flags = info->flags;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _info$[ebp]
  00070	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00073	89 50 60	 mov	 DWORD PTR [eax+96], edx

; 6347 : 
; 6348 : 	mobj->health = info->spawnhealth;

  00076	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _info$[ebp]
  0007c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0007f	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 6349 : 
; 6350 : 	mobj->reactiontime = info->reactiontime;

  00085	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _info$[ebp]
  0008b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0008e	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx

; 6351 : 
; 6352 : 	mobj->lastlook = -1; // stuff moved in P_enemy.P_LookForPlayer

  00094	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00097	c7 80 a8 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+168], -1

; 6353 : 
; 6354 : 	// do not set the state with P_SetMobjState,
; 6355 : 	// because action routines can not be called yet
; 6356 : 	st = &states[info->spawnstate];

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _info$[ebp]
  000a4	6b 48 04 1c	 imul	 ecx, DWORD PTR [eax+4], 28
  000a8	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  000ae	89 4d f8	 mov	 DWORD PTR _st$[ebp], ecx

; 6357 : 
; 6358 : 	mobj->state = st;

  000b1	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000b7	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 6359 : 	mobj->tics = st->tics;

  000ba	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  000bd	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000c0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000c3	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 6360 : 	mobj->sprite = st->sprite;

  000c6	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ce	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 6361 : 	mobj->frame = st->frame; // FF_FRAMEMASK for frame, and other bits..

  000d1	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  000d7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000da	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 6362 : 	mobj->friction = ORIG_FRICTION;

  000dd	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e0	c7 80 b4 00 00
	00 00 e8 00 00	 mov	 DWORD PTR [eax+180], 59392 ; 0000e800H

; 6363 : 
; 6364 : 	mobj->movefactor = ORIG_FRICTION_FACTOR;

  000ea	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ed	c7 80 b8 00 00
	00 00 08 00 00	 mov	 DWORD PTR [eax+184], 2048 ; 00000800H

; 6365 : 
; 6366 : 	// All mobjs are created at 100% scale.
; 6367 : 	mobj->scale = 100;

  000f7	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000ff	66 89 81 cc 00
	00 00		 mov	 WORD PTR [ecx+204], ax

; 6368 : 	mobj->destscale = mobj->scale;

  00106	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00109	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0010c	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00113	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 6369 : 	mobj->scalespeed = 8;

  0011a	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0011d	c6 80 d0 00 00
	00 08		 mov	 BYTE PTR [eax+208], 8

; 6370 : 
; 6371 : 	// TODO: Make this a special map header
; 6372 : 	if ((maptol & TOL_ERZ3) && !(mobj->type == MT_BLACKEGGMAN || mobj->type == MT_BLACKEGGMAN_GOOPFIRE

  00124	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0012b	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00130	74 54		 je	 SHORT $LN4@P_SpawnMob
  00132	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00135	83 78 7c 27	 cmp	 DWORD PTR [eax+124], 39	; 00000027H
  00139	74 4b		 je	 SHORT $LN4@P_SpawnMob
  0013b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0013e	83 78 7c 29	 cmp	 DWORD PTR [eax+124], 41	; 00000029H
  00142	74 42		 je	 SHORT $LN4@P_SpawnMob
  00144	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00147	83 78 7c 28	 cmp	 DWORD PTR [eax+124], 40	; 00000028H
  0014b	74 39		 je	 SHORT $LN4@P_SpawnMob
  0014d	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00150	83 78 7c 2a	 cmp	 DWORD PTR [eax+124], 42	; 0000002aH
  00154	74 30		 je	 SHORT $LN4@P_SpawnMob
  00156	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00159	81 78 7c b6 00
	00 00		 cmp	 DWORD PTR [eax+124], 182 ; 000000b6H
  00160	74 24		 je	 SHORT $LN4@P_SpawnMob
  00162	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00165	83 78 7c 23	 cmp	 DWORD PTR [eax+124], 35	; 00000023H
  00169	74 1b		 je	 SHORT $LN4@P_SpawnMob
  0016b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0016e	81 78 7c ba 00
	00 00		 cmp	 DWORD PTR [eax+124], 186 ; 000000baH
  00175	74 0f		 je	 SHORT $LN4@P_SpawnMob

; 6373 : 		|| mobj->type == MT_BLACKEGGMAN_HELPER || mobj->type == MT_BLACKEGGMAN_MISSILE
; 6374 : 		|| mobj->type == MT_SMOK || mobj->type == MT_GOOP || mobj->type == MT_POP))
; 6375 : 	{
; 6376 : 		mobj->destscale = 50;

  00177	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  0017c	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0017f	66 89 81 ce 00
	00 00		 mov	 WORD PTR [ecx+206], ax
$LN4@P_SpawnMob:

; 6377 : 	}
; 6378 : 
; 6379 : 	switch (mobj->type)

  00186	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00189	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0018c	89 4d a8	 mov	 DWORD PTR tv153[ebp], ecx
  0018f	81 7d a8 09 01
	00 00		 cmp	 DWORD PTR tv153[ebp], 265 ; 00000109H
  00196	7f 34		 jg	 SHORT $LN66@P_SpawnMob
  00198	81 7d a8 09 01
	00 00		 cmp	 DWORD PTR tv153[ebp], 265 ; 00000109H
  0019f	0f 84 a9 01 00
	00		 je	 $LN32@P_SpawnMob
  001a5	8b 55 a8	 mov	 edx, DWORD PTR tv153[ebp]
  001a8	83 ea 09	 sub	 edx, 9
  001ab	89 55 a8	 mov	 DWORD PTR tv153[ebp], edx
  001ae	81 7d a8 f3 00
	00 00		 cmp	 DWORD PTR tv153[ebp], 243 ; 000000f3H
  001b5	0f 87 a5 01 00
	00		 ja	 $LN52@P_SpawnMob
  001bb	8b 45 a8	 mov	 eax, DWORD PTR tv153[ebp]
  001be	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN67@P_SpawnMob[eax]
  001c5	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN68@P_SpawnMob[ecx*4]
$LN66@P_SpawnMob:
  001cc	e9 8f 01 00 00	 jmp	 $LN52@P_SpawnMob
$LN5@P_SpawnMob:

; 6380 : 	{
; 6381 : 		case MT_BLACKEGGMAN:
; 6382 : 			{
; 6383 : 				mobj_t *spawn = P_SpawnMobj(mobj->x, mobj->z, mobj->z+mobj->height-16*FRACUNIT, MT_BLACKEGGMAN_HELPER);

  001d1	6a 28		 push	 40			; 00000028H
  001d3	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  001d6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001d9	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  001dc	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001df	8d 8c 01 00 00
	f0 ff		 lea	 ecx, DWORD PTR [ecx+eax-1048576]
  001e6	51		 push	 ecx
  001e7	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  001ea	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001ed	50		 push	 eax
  001ee	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001f1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001f4	52		 push	 edx
  001f5	e8 00 00 00 00	 call	 _P_SpawnMobj
  001fa	83 c4 10	 add	 esp, 16			; 00000010H
  001fd	89 45 f0	 mov	 DWORD PTR _spawn$2[ebp], eax

; 6384 : 				P_SetTarget(&spawn->target, mobj);

  00200	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00203	50		 push	 eax
  00204	8b 4d f0	 mov	 ecx, DWORD PTR _spawn$2[ebp]
  00207	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0020d	51		 push	 ecx
  0020e	e8 00 00 00 00	 call	 _P_SetTarget
  00213	83 c4 08	 add	 esp, 8

; 6385 : 			}
; 6386 : 			break;

  00216	e9 45 01 00 00	 jmp	 $LN2@P_SpawnMob
$LN6@P_SpawnMob:

; 6387 : 		case MT_DETON:
; 6388 : 			mobj->movedir = 0;

  0021b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0021e	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 6389 : 			break;

  00228	e9 33 01 00 00	 jmp	 $LN2@P_SpawnMob
$LN7@P_SpawnMob:

; 6390 : 		case MT_EGGGUARD:
; 6391 : 			{
; 6392 : 				mobj_t *spawn = P_SpawnMobj(x, y, z, MT_EGGSHIELD);

  0022d	6a 16		 push	 22			; 00000016H
  0022f	8b 45 10	 mov	 eax, DWORD PTR _z$[ebp]
  00232	50		 push	 eax
  00233	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00236	51		 push	 ecx
  00237	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0023a	52		 push	 edx
  0023b	e8 00 00 00 00	 call	 _P_SpawnMobj
  00240	83 c4 10	 add	 esp, 16			; 00000010H
  00243	89 45 ec	 mov	 DWORD PTR _spawn$1[ebp], eax

; 6393 : 				P_SetTarget(&mobj->tracer, spawn);

  00246	8b 45 ec	 mov	 eax, DWORD PTR _spawn$1[ebp]
  00249	50		 push	 eax
  0024a	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0024d	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00253	51		 push	 ecx
  00254	e8 00 00 00 00	 call	 _P_SetTarget
  00259	83 c4 08	 add	 esp, 8

; 6394 : 				P_SetTarget(&spawn->tracer, mobj);

  0025c	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0025f	50		 push	 eax
  00260	8b 4d ec	 mov	 ecx, DWORD PTR _spawn$1[ebp]
  00263	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00269	51		 push	 ecx
  0026a	e8 00 00 00 00	 call	 _P_SetTarget
  0026f	83 c4 08	 add	 esp, 8

; 6395 : 			}
; 6396 : 			break;

  00272	e9 e9 00 00 00	 jmp	 $LN2@P_SpawnMob
$LN8@P_SpawnMob:

; 6397 : 		case MT_BIRD:
; 6398 : 		case MT_BUNNY:
; 6399 : 		case MT_MOUSE:
; 6400 : 		case MT_CHICKEN:
; 6401 : 		case MT_COW:
; 6402 : 			mobj->fuse = 300 + (P_Random() % 50);

  00277	e8 00 00 00 00	 call	 _P_Random
  0027c	0f b6 c0	 movzx	 eax, al
  0027f	99		 cdq
  00280	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00285	f7 f9		 idiv	 ecx
  00287	81 c2 2c 01 00
	00		 add	 edx, 300		; 0000012cH
  0028d	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00290	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 6403 : 			break;

  00296	e9 c5 00 00 00	 jmp	 $LN2@P_SpawnMob
$LN13@P_SpawnMob:

; 6404 : 		case MT_REDRING: // Make MT_REDRING red by default
; 6405 : 			mobj->flags |= MF_TRANSLATION;

  0029b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0029e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002a1	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  002a7	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  002aa	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 6406 : 			mobj->color = 6;

  002ad	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  002b0	c6 40 68 06	 mov	 BYTE PTR [eax+104], 6

; 6407 : 			break;

  002b4	e9 a7 00 00 00	 jmp	 $LN2@P_SpawnMob
$LN14@P_SpawnMob:

; 6408 : 		case MT_SMALLBUBBLE: // Bubbles eventually dissipate, in case they get caught somewhere.
; 6409 : 		case MT_MEDIUMBUBBLE:
; 6410 : 		case MT_EXTRALARGEBUBBLE:
; 6411 : 			mobj->fuse += 30 * TICRATE;

  002b9	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  002bc	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  002c2	81 c1 1a 04 00
	00		 add	 ecx, 1050		; 0000041aH
  002c8	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  002cb	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx

; 6412 : 			break;

  002d1	e9 8a 00 00 00	 jmp	 $LN2@P_SpawnMob
$LN17@P_SpawnMob:

; 6413 : 		case MT_BUSH:
; 6414 : 		case MT_BERRYBUSH:
; 6415 : 		case MT_THZPLANT:
; 6416 : 		case MT_GFZFLOWER1:
; 6417 : 		case MT_GFZFLOWER2:
; 6418 : 		case MT_GFZFLOWER3:
; 6419 : 		case MT_CEZFLOWER:
; 6420 : 		case MT_SEAWEED:
; 6421 : 		case MT_CORAL1:
; 6422 : 		case MT_CORAL2:
; 6423 : 		case MT_CORAL3:
; 6424 : //			if (!modifiedgame) // Speedup, if the game is not modified.
; 6425 : 				mobj->flags |= MF_NOBLOCKMAP;

  002d6	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  002d9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002dc	83 c9 10	 or	 ecx, 16			; 00000010H
  002df	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  002e2	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 6426 : 			break;

  002e5	eb 79		 jmp	 SHORT $LN2@P_SpawnMob
$LN28@P_SpawnMob:

; 6427 : 		case MT_REDTEAMRING:
; 6428 : 			mobj->flags |= MF_TRANSLATION;

  002e7	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  002ea	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002ed	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  002f3	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  002f6	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 6429 : 			mobj->color = 6;

  002f9	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  002fc	c6 40 68 06	 mov	 BYTE PTR [eax+104], 6

; 6430 : 			mobj->flags |= MF_NOCLIPHEIGHT;

  00300	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00303	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00306	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  0030c	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  0030f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 6431 : 			break;

  00312	eb 4c		 jmp	 SHORT $LN2@P_SpawnMob
$LN29@P_SpawnMob:

; 6432 : 		case MT_BLUETEAMRING:
; 6433 : 			mobj->flags |= MF_TRANSLATION;

  00314	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00317	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0031a	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  00320	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  00323	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 6434 : 			mobj->color = 7;

  00326	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00329	c6 40 68 07	 mov	 BYTE PTR [eax+104], 7

; 6435 : 			mobj->flags |= MF_NOCLIPHEIGHT;

  0032d	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00330	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00333	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  00339	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  0033c	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 6436 : 			break;

  0033f	eb 1f		 jmp	 SHORT $LN2@P_SpawnMob
$LN30@P_SpawnMob:

; 6437 : 		case MT_RING:
; 6438 : 		case MT_COIN:
; 6439 : #ifdef BLUE_SPHERES
; 6440 : 		case MT_BLUEBALL:
; 6441 : #endif
; 6442 : 			nummaprings++;

  00341	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummaprings
  00346	83 c0 01	 add	 eax, 1
  00349	a3 00 00 00 00	 mov	 DWORD PTR _nummaprings, eax
$LN32@P_SpawnMob:

; 6443 : 		case MT_BOUNCERING:
; 6444 : 		case MT_RAILRING:
; 6445 : 		case MT_AUTOMATICRING:
; 6446 : 		case MT_EXPLOSIONRING:
; 6447 : 		case MT_SCATTERRING:
; 6448 : 		case MT_GRENADERING:
; 6449 : 		case MT_BOUNCEPICKUP:
; 6450 : 		case MT_RAILPICKUP:
; 6451 : 		case MT_AUTOPICKUP:
; 6452 : 		case MT_EXPLODEPICKUP:
; 6453 : 		case MT_SCATTERPICKUP:
; 6454 : 		case MT_GRENADEPICKUP:
; 6455 : 		case MT_NIGHTSWING:
; 6456 : 		case MT_BLUEORB:
; 6457 : 		case MT_BLACKORB:
; 6458 : 		case MT_WHITEORB:
; 6459 : 		case MT_YELLOWORB:
; 6460 : 		case MT_GREENORB:
; 6461 : 		case MT_THOK:
; 6462 : 		case MT_GHOST:
; 6463 : 			mobj->flags |= MF_NOCLIPHEIGHT;

  0034e	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00351	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00354	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  0035a	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  0035d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN52@P_SpawnMob:
$LN2@P_SpawnMob:

; 6464 : 		default:
; 6465 : 			break;
; 6466 : 	}
; 6467 : 
; 6468 : 	// set subsector and/or block links
; 6469 : 	P_SetThingPosition(mobj);

  00360	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 _P_SetThingPosition
  00369	83 c4 04	 add	 esp, 4

; 6470 : 
; 6471 : 	mobj->floorz = mobj->subsector->sector->floorheight;

  0036c	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0036f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00372	8b 11		 mov	 edx, DWORD PTR [ecx]
  00374	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00377	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00379	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 6472 : 	mobj->ceilingz = mobj->subsector->sector->ceilingheight;

  0037c	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0037f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00382	8b 11		 mov	 edx, DWORD PTR [ecx]
  00384	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00387	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0038a	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 6473 : 
; 6474 : 	if (z == ONFLOORZ)

  0038d	81 7d 10 00 00
	00 80		 cmp	 DWORD PTR _z$[ebp], -2147483648 ; 80000000H
  00394	0f 85 1a 01 00
	00		 jne	 $LN53@P_SpawnMob

; 6475 : 	{
; 6476 : 		// defaults onground
; 6477 : 		mobj->eflags |= MFE_ONGROUND;

  0039a	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0039d	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  003a3	83 c9 01	 or	 ecx, 1
  003a6	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  003a9	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 6478 : 
; 6479 : 		if ((mobj->type == MT_RING || mobj->type == MT_COIN || mobj->type == MT_REDTEAMRING || mobj->type == MT_BLUETEAMRING ||
; 6480 : 			mobj->type == MT_BOUNCERING || mobj->type == MT_RAILRING || mobj->type == MT_AUTOMATICRING ||
; 6481 : 			mobj->type == MT_EXPLOSIONRING || mobj->type == MT_SCATTERRING || mobj->type == MT_GRENADERING ||
; 6482 : 			mobj->type == MT_BOUNCEPICKUP || mobj->type == MT_RAILPICKUP || mobj->type == MT_AUTOPICKUP ||
; 6483 : 			mobj->type == MT_EXPLODEPICKUP || mobj->type == MT_SCATTERPICKUP || mobj->type == MT_GRENADEPICKUP
; 6484 : 			|| mobj->type == MT_EMMY)
; 6485 : 			&& mobj->flags & MF_AMBUSH)

  003af	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003b2	83 78 7c 2b	 cmp	 DWORD PTR [eax+124], 43	; 0000002bH
  003b6	0f 84 cb 00 00
	00		 je	 $LN57@P_SpawnMob
  003bc	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003bf	81 78 7c e1 00
	00 00		 cmp	 DWORD PTR [eax+124], 225 ; 000000e1H
  003c6	0f 84 bb 00 00
	00		 je	 $LN57@P_SpawnMob
  003cc	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003cf	83 78 7c 30	 cmp	 DWORD PTR [eax+124], 48	; 00000030H
  003d3	0f 84 ae 00 00
	00		 je	 $LN57@P_SpawnMob
  003d9	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003dc	83 78 7c 31	 cmp	 DWORD PTR [eax+124], 49	; 00000031H
  003e0	0f 84 a1 00 00
	00		 je	 $LN57@P_SpawnMob
  003e6	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003e9	81 78 7c d0 00
	00 00		 cmp	 DWORD PTR [eax+124], 208 ; 000000d0H
  003f0	0f 84 91 00 00
	00		 je	 $LN57@P_SpawnMob
  003f6	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  003f9	81 78 7c d1 00
	00 00		 cmp	 DWORD PTR [eax+124], 209 ; 000000d1H
  00400	0f 84 81 00 00
	00		 je	 $LN57@P_SpawnMob
  00406	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00409	81 78 7c d2 00
	00 00		 cmp	 DWORD PTR [eax+124], 210 ; 000000d2H
  00410	74 75		 je	 SHORT $LN57@P_SpawnMob
  00412	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00415	81 78 7c d3 00
	00 00		 cmp	 DWORD PTR [eax+124], 211 ; 000000d3H
  0041c	74 69		 je	 SHORT $LN57@P_SpawnMob
  0041e	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00421	81 78 7c d4 00
	00 00		 cmp	 DWORD PTR [eax+124], 212 ; 000000d4H
  00428	74 5d		 je	 SHORT $LN57@P_SpawnMob
  0042a	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0042d	81 78 7c d5 00
	00 00		 cmp	 DWORD PTR [eax+124], 213 ; 000000d5H
  00434	74 51		 je	 SHORT $LN57@P_SpawnMob
  00436	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00439	81 78 7c d6 00
	00 00		 cmp	 DWORD PTR [eax+124], 214 ; 000000d6H
  00440	74 45		 je	 SHORT $LN57@P_SpawnMob
  00442	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00445	81 78 7c d7 00
	00 00		 cmp	 DWORD PTR [eax+124], 215 ; 000000d7H
  0044c	74 39		 je	 SHORT $LN57@P_SpawnMob
  0044e	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00451	81 78 7c d8 00
	00 00		 cmp	 DWORD PTR [eax+124], 216 ; 000000d8H
  00458	74 2d		 je	 SHORT $LN57@P_SpawnMob
  0045a	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0045d	81 78 7c d9 00
	00 00		 cmp	 DWORD PTR [eax+124], 217 ; 000000d9H
  00464	74 21		 je	 SHORT $LN57@P_SpawnMob
  00466	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00469	81 78 7c da 00
	00 00		 cmp	 DWORD PTR [eax+124], 218 ; 000000daH
  00470	74 15		 je	 SHORT $LN57@P_SpawnMob
  00472	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00475	81 78 7c db 00
	00 00		 cmp	 DWORD PTR [eax+124], 219 ; 000000dbH
  0047c	74 09		 je	 SHORT $LN57@P_SpawnMob
  0047e	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00481	83 78 7c 32	 cmp	 DWORD PTR [eax+124], 50	; 00000032H
  00485	75 1f		 jne	 SHORT $LN55@P_SpawnMob
$LN57@P_SpawnMob:
  00487	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0048a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0048d	83 e1 20	 and	 ecx, 32			; 00000020H
  00490	74 14		 je	 SHORT $LN55@P_SpawnMob

; 6486 : 			mobj->z = mobj->floorz + 32*FRACUNIT;

  00492	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00495	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00498	81 c1 00 00 20
	00		 add	 ecx, 2097152		; 00200000H
  0049e	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  004a1	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  004a4	eb 0c		 jmp	 SHORT $LN56@P_SpawnMob
$LN55@P_SpawnMob:

; 6487 : 		else
; 6488 : 			mobj->z = mobj->floorz;

  004a6	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004a9	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  004ac	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  004af	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN56@P_SpawnMob:

; 6489 : 	}

  004b2	eb 26		 jmp	 SHORT $LN59@P_SpawnMob
$LN53@P_SpawnMob:

; 6490 : 	else if (z == ONCEILINGZ)

  004b4	81 7d 10 ff ff
	ff 7f		 cmp	 DWORD PTR _z$[ebp], 2147483647 ; 7fffffffH
  004bb	75 14		 jne	 SHORT $LN58@P_SpawnMob

; 6491 : 		mobj->z = mobj->ceilingz - mobj->height;

  004bd	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004c0	8b 4d f4	 mov	 ecx, DWORD PTR _mobj$[ebp]
  004c3	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  004c6	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  004c9	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004cc	89 50 18	 mov	 DWORD PTR [eax+24], edx
  004cf	eb 09		 jmp	 SHORT $LN59@P_SpawnMob
$LN58@P_SpawnMob:

; 6492 : 	else
; 6493 : 		mobj->z = z;

  004d1	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004d4	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  004d7	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN59@P_SpawnMob:

; 6494 : 
; 6495 : 	if (!(mobj->type & MF_NOTHINK))

  004da	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004dd	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  004e0	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  004e6	75 16		 jne	 SHORT $LN60@P_SpawnMob

; 6496 : 	{
; 6497 : 		mobj->thinker.function.acp1 = (actionf_p1)P_MobjThinker;

  004e8	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004eb	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _P_MobjThinker

; 6498 : 		P_AddThinker(&mobj->thinker);

  004f2	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 _P_AddThinker
  004fb	83 c4 04	 add	 esp, 4
$LN60@P_SpawnMob:

; 6499 : 	}
; 6500 : 
; 6501 : 	// Call action functions when the state is set
; 6502 : 	if (st->action.acp1 && (mobj->flags & MF_RUNSPAWNFUNC))

  004fe	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  00501	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00505	74 59		 je	 SHORT $LN63@P_SpawnMob
  00507	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0050a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0050d	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  00513	74 4b		 je	 SHORT $LN63@P_SpawnMob

; 6503 : 	{
; 6504 : 		if (levelloading)

  00515	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _levelloading, 0
  0051c	74 1b		 je	 SHORT $LN62@P_SpawnMob

; 6505 : 		{
; 6506 : 			// Cache actions in a linked list
; 6507 : 			// with function pointer, and
; 6508 : 			// var1 & var2, which will be executed
; 6509 : 			// when the level finishes loading.
; 6510 : 			P_AddCachedAction(mobj, mobj->info->spawnstate);

  0051e	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00521	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00527	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0052a	52		 push	 edx
  0052b	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0052e	50		 push	 eax
  0052f	e8 00 00 00 00	 call	 _P_AddCachedAction
  00534	83 c4 08	 add	 esp, 8

; 6511 : 		}

  00537	eb 27		 jmp	 SHORT $LN63@P_SpawnMob
$LN62@P_SpawnMob:

; 6512 : 		else
; 6513 : 		{
; 6514 : 			var1 = st->var1;

  00539	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  0053c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0053f	89 0d 00 00 00
	00		 mov	 DWORD PTR _var1, ecx

; 6515 : 			var2 = st->var2;

  00545	8b 45 f8	 mov	 eax, DWORD PTR _st$[ebp]
  00548	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0054b	89 0d 00 00 00
	00		 mov	 DWORD PTR _var2, ecx

; 6516 : 			st->action.acp1(mobj);

  00551	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00554	50		 push	 eax
  00555	8b 4d f8	 mov	 ecx, DWORD PTR _st$[ebp]
  00558	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0055b	ff d2		 call	 edx
  0055d	83 c4 04	 add	 esp, 4
$LN63@P_SpawnMob:

; 6517 : 		}
; 6518 : 	}
; 6519 : 
; 6520 : 	if (CheckForReverseGravity && !(mobj->flags & MF_NOBLOCKMAP))

  00560	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CheckForReverseGravity, 0
  00567	74 19		 je	 SHORT $LN64@P_SpawnMob
  00569	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  0056c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0056f	83 e1 10	 and	 ecx, 16			; 00000010H
  00572	75 0e		 jne	 SHORT $LN64@P_SpawnMob

; 6521 : 		P_CheckGravity(mobj, false);

  00574	6a 00		 push	 0
  00576	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00579	50		 push	 eax
  0057a	e8 00 00 00 00	 call	 _P_CheckGravity
  0057f	83 c4 08	 add	 esp, 8
$LN64@P_SpawnMob:

; 6522 : 
; 6523 : 	// Make sure scale matches destscale when spawned
; 6524 : 	P_SetScale(mobj, mobj->destscale);

  00582	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]
  00585	0f b7 88 ce 00
	00 00		 movzx	 ecx, WORD PTR [eax+206]
  0058c	51		 push	 ecx
  0058d	8b 55 f4	 mov	 edx, DWORD PTR _mobj$[ebp]
  00590	52		 push	 edx
  00591	e8 00 00 00 00	 call	 _P_SetScale
  00596	83 c4 08	 add	 esp, 8

; 6525 : 
; 6526 : 	return mobj;

  00599	8b 45 f4	 mov	 eax, DWORD PTR _mobj$[ebp]

; 6527 : }

  0059c	5f		 pop	 edi
  0059d	5e		 pop	 esi
  0059e	5b		 pop	 ebx
  0059f	8b e5		 mov	 esp, ebp
  005a1	5d		 pop	 ebp
  005a2	c3		 ret	 0
  005a3	90		 npad	 1
$LN68@P_SpawnMob:
  005a4	00 00 00 00	 DD	 $LN6@P_SpawnMob
  005a8	00 00 00 00	 DD	 $LN7@P_SpawnMob
  005ac	00 00 00 00	 DD	 $LN5@P_SpawnMob
  005b0	00 00 00 00	 DD	 $LN30@P_SpawnMob
  005b4	00 00 00 00	 DD	 $LN28@P_SpawnMob
  005b8	00 00 00 00	 DD	 $LN29@P_SpawnMob
  005bc	00 00 00 00	 DD	 $LN17@P_SpawnMob
  005c0	00 00 00 00	 DD	 $LN32@P_SpawnMob
  005c4	00 00 00 00	 DD	 $LN8@P_SpawnMob
  005c8	00 00 00 00	 DD	 $LN14@P_SpawnMob
  005cc	00 00 00 00	 DD	 $LN13@P_SpawnMob
  005d0	00 00 00 00	 DD	 $LN52@P_SpawnMob
$LN67@P_SpawnMob:
  005d4	00		 DB	 0
  005d5	0b		 DB	 11			; 0000000bH
  005d6	0b		 DB	 11			; 0000000bH
  005d7	0b		 DB	 11			; 0000000bH
  005d8	0b		 DB	 11			; 0000000bH
  005d9	0b		 DB	 11			; 0000000bH
  005da	0b		 DB	 11			; 0000000bH
  005db	0b		 DB	 11			; 0000000bH
  005dc	0b		 DB	 11			; 0000000bH
  005dd	0b		 DB	 11			; 0000000bH
  005de	0b		 DB	 11			; 0000000bH
  005df	0b		 DB	 11			; 0000000bH
  005e0	01		 DB	 1
  005e1	0b		 DB	 11			; 0000000bH
  005e2	0b		 DB	 11			; 0000000bH
  005e3	0b		 DB	 11			; 0000000bH
  005e4	0b		 DB	 11			; 0000000bH
  005e5	0b		 DB	 11			; 0000000bH
  005e6	0b		 DB	 11			; 0000000bH
  005e7	0b		 DB	 11			; 0000000bH
  005e8	0b		 DB	 11			; 0000000bH
  005e9	0b		 DB	 11			; 0000000bH
  005ea	0b		 DB	 11			; 0000000bH
  005eb	0b		 DB	 11			; 0000000bH
  005ec	0b		 DB	 11			; 0000000bH
  005ed	0b		 DB	 11			; 0000000bH
  005ee	0b		 DB	 11			; 0000000bH
  005ef	0b		 DB	 11			; 0000000bH
  005f0	0b		 DB	 11			; 0000000bH
  005f1	0b		 DB	 11			; 0000000bH
  005f2	02		 DB	 2
  005f3	0b		 DB	 11			; 0000000bH
  005f4	0b		 DB	 11			; 0000000bH
  005f5	0b		 DB	 11			; 0000000bH
  005f6	03		 DB	 3
  005f7	0b		 DB	 11			; 0000000bH
  005f8	0b		 DB	 11			; 0000000bH
  005f9	0b		 DB	 11			; 0000000bH
  005fa	0b		 DB	 11			; 0000000bH
  005fb	04		 DB	 4
  005fc	05		 DB	 5
  005fd	0b		 DB	 11			; 0000000bH
  005fe	0b		 DB	 11			; 0000000bH
  005ff	0b		 DB	 11			; 0000000bH
  00600	0b		 DB	 11			; 0000000bH
  00601	0b		 DB	 11			; 0000000bH
  00602	0b		 DB	 11			; 0000000bH
  00603	0b		 DB	 11			; 0000000bH
  00604	0b		 DB	 11			; 0000000bH
  00605	0b		 DB	 11			; 0000000bH
  00606	0b		 DB	 11			; 0000000bH
  00607	0b		 DB	 11			; 0000000bH
  00608	0b		 DB	 11			; 0000000bH
  00609	0b		 DB	 11			; 0000000bH
  0060a	0b		 DB	 11			; 0000000bH
  0060b	0b		 DB	 11			; 0000000bH
  0060c	0b		 DB	 11			; 0000000bH
  0060d	0b		 DB	 11			; 0000000bH
  0060e	0b		 DB	 11			; 0000000bH
  0060f	0b		 DB	 11			; 0000000bH
  00610	0b		 DB	 11			; 0000000bH
  00611	0b		 DB	 11			; 0000000bH
  00612	0b		 DB	 11			; 0000000bH
  00613	0b		 DB	 11			; 0000000bH
  00614	0b		 DB	 11			; 0000000bH
  00615	0b		 DB	 11			; 0000000bH
  00616	0b		 DB	 11			; 0000000bH
  00617	0b		 DB	 11			; 0000000bH
  00618	0b		 DB	 11			; 0000000bH
  00619	0b		 DB	 11			; 0000000bH
  0061a	0b		 DB	 11			; 0000000bH
  0061b	0b		 DB	 11			; 0000000bH
  0061c	0b		 DB	 11			; 0000000bH
  0061d	0b		 DB	 11			; 0000000bH
  0061e	0b		 DB	 11			; 0000000bH
  0061f	0b		 DB	 11			; 0000000bH
  00620	0b		 DB	 11			; 0000000bH
  00621	0b		 DB	 11			; 0000000bH
  00622	0b		 DB	 11			; 0000000bH
  00623	0b		 DB	 11			; 0000000bH
  00624	0b		 DB	 11			; 0000000bH
  00625	0b		 DB	 11			; 0000000bH
  00626	0b		 DB	 11			; 0000000bH
  00627	0b		 DB	 11			; 0000000bH
  00628	0b		 DB	 11			; 0000000bH
  00629	0b		 DB	 11			; 0000000bH
  0062a	0b		 DB	 11			; 0000000bH
  0062b	0b		 DB	 11			; 0000000bH
  0062c	0b		 DB	 11			; 0000000bH
  0062d	0b		 DB	 11			; 0000000bH
  0062e	0b		 DB	 11			; 0000000bH
  0062f	0b		 DB	 11			; 0000000bH
  00630	0b		 DB	 11			; 0000000bH
  00631	0b		 DB	 11			; 0000000bH
  00632	0b		 DB	 11			; 0000000bH
  00633	0b		 DB	 11			; 0000000bH
  00634	0b		 DB	 11			; 0000000bH
  00635	0b		 DB	 11			; 0000000bH
  00636	0b		 DB	 11			; 0000000bH
  00637	0b		 DB	 11			; 0000000bH
  00638	0b		 DB	 11			; 0000000bH
  00639	0b		 DB	 11			; 0000000bH
  0063a	0b		 DB	 11			; 0000000bH
  0063b	0b		 DB	 11			; 0000000bH
  0063c	0b		 DB	 11			; 0000000bH
  0063d	0b		 DB	 11			; 0000000bH
  0063e	0b		 DB	 11			; 0000000bH
  0063f	06		 DB	 6
  00640	06		 DB	 6
  00641	06		 DB	 6
  00642	06		 DB	 6
  00643	06		 DB	 6
  00644	06		 DB	 6
  00645	0b		 DB	 11			; 0000000bH
  00646	0b		 DB	 11			; 0000000bH
  00647	06		 DB	 6
  00648	0b		 DB	 11			; 0000000bH
  00649	0b		 DB	 11			; 0000000bH
  0064a	06		 DB	 6
  0064b	06		 DB	 6
  0064c	06		 DB	 6
  0064d	0b		 DB	 11			; 0000000bH
  0064e	0b		 DB	 11			; 0000000bH
  0064f	0b		 DB	 11			; 0000000bH
  00650	0b		 DB	 11			; 0000000bH
  00651	0b		 DB	 11			; 0000000bH
  00652	0b		 DB	 11			; 0000000bH
  00653	0b		 DB	 11			; 0000000bH
  00654	0b		 DB	 11			; 0000000bH
  00655	0b		 DB	 11			; 0000000bH
  00656	0b		 DB	 11			; 0000000bH
  00657	0b		 DB	 11			; 0000000bH
  00658	0b		 DB	 11			; 0000000bH
  00659	06		 DB	 6
  0065a	0b		 DB	 11			; 0000000bH
  0065b	0b		 DB	 11			; 0000000bH
  0065c	0b		 DB	 11			; 0000000bH
  0065d	0b		 DB	 11			; 0000000bH
  0065e	0b		 DB	 11			; 0000000bH
  0065f	0b		 DB	 11			; 0000000bH
  00660	0b		 DB	 11			; 0000000bH
  00661	0b		 DB	 11			; 0000000bH
  00662	0b		 DB	 11			; 0000000bH
  00663	0b		 DB	 11			; 0000000bH
  00664	0b		 DB	 11			; 0000000bH
  00665	0b		 DB	 11			; 0000000bH
  00666	0b		 DB	 11			; 0000000bH
  00667	0b		 DB	 11			; 0000000bH
  00668	07		 DB	 7
  00669	07		 DB	 7
  0066a	07		 DB	 7
  0066b	07		 DB	 7
  0066c	07		 DB	 7
  0066d	07		 DB	 7
  0066e	0b		 DB	 11			; 0000000bH
  0066f	0b		 DB	 11			; 0000000bH
  00670	08		 DB	 8
  00671	08		 DB	 8
  00672	08		 DB	 8
  00673	08		 DB	 8
  00674	08		 DB	 8
  00675	0b		 DB	 11			; 0000000bH
  00676	0b		 DB	 11			; 0000000bH
  00677	0b		 DB	 11			; 0000000bH
  00678	0b		 DB	 11			; 0000000bH
  00679	0b		 DB	 11			; 0000000bH
  0067a	0b		 DB	 11			; 0000000bH
  0067b	0b		 DB	 11			; 0000000bH
  0067c	0b		 DB	 11			; 0000000bH
  0067d	0b		 DB	 11			; 0000000bH
  0067e	0b		 DB	 11			; 0000000bH
  0067f	0b		 DB	 11			; 0000000bH
  00680	0b		 DB	 11			; 0000000bH
  00681	0b		 DB	 11			; 0000000bH
  00682	09		 DB	 9
  00683	09		 DB	 9
  00684	09		 DB	 9
  00685	0b		 DB	 11			; 0000000bH
  00686	0b		 DB	 11			; 0000000bH
  00687	0b		 DB	 11			; 0000000bH
  00688	0b		 DB	 11			; 0000000bH
  00689	0b		 DB	 11			; 0000000bH
  0068a	0b		 DB	 11			; 0000000bH
  0068b	0b		 DB	 11			; 0000000bH
  0068c	0b		 DB	 11			; 0000000bH
  0068d	0b		 DB	 11			; 0000000bH
  0068e	0b		 DB	 11			; 0000000bH
  0068f	0b		 DB	 11			; 0000000bH
  00690	0b		 DB	 11			; 0000000bH
  00691	0b		 DB	 11			; 0000000bH
  00692	0b		 DB	 11			; 0000000bH
  00693	0b		 DB	 11			; 0000000bH
  00694	0b		 DB	 11			; 0000000bH
  00695	0b		 DB	 11			; 0000000bH
  00696	0b		 DB	 11			; 0000000bH
  00697	0b		 DB	 11			; 0000000bH
  00698	0b		 DB	 11			; 0000000bH
  00699	0b		 DB	 11			; 0000000bH
  0069a	0a		 DB	 10			; 0000000aH
  0069b	07		 DB	 7
  0069c	07		 DB	 7
  0069d	07		 DB	 7
  0069e	07		 DB	 7
  0069f	07		 DB	 7
  006a0	07		 DB	 7
  006a1	07		 DB	 7
  006a2	07		 DB	 7
  006a3	07		 DB	 7
  006a4	07		 DB	 7
  006a5	07		 DB	 7
  006a6	07		 DB	 7
  006a7	0b		 DB	 11			; 0000000bH
  006a8	0b		 DB	 11			; 0000000bH
  006a9	0b		 DB	 11			; 0000000bH
  006aa	0b		 DB	 11			; 0000000bH
  006ab	0b		 DB	 11			; 0000000bH
  006ac	03		 DB	 3
  006ad	0b		 DB	 11			; 0000000bH
  006ae	0b		 DB	 11			; 0000000bH
  006af	0b		 DB	 11			; 0000000bH
  006b0	0b		 DB	 11			; 0000000bH
  006b1	0b		 DB	 11			; 0000000bH
  006b2	0b		 DB	 11			; 0000000bH
  006b3	0b		 DB	 11			; 0000000bH
  006b4	0b		 DB	 11			; 0000000bH
  006b5	0b		 DB	 11			; 0000000bH
  006b6	0b		 DB	 11			; 0000000bH
  006b7	0b		 DB	 11			; 0000000bH
  006b8	0b		 DB	 11			; 0000000bH
  006b9	0b		 DB	 11			; 0000000bH
  006ba	0b		 DB	 11			; 0000000bH
  006bb	0b		 DB	 11			; 0000000bH
  006bc	0b		 DB	 11			; 0000000bH
  006bd	0b		 DB	 11			; 0000000bH
  006be	0b		 DB	 11			; 0000000bH
  006bf	0b		 DB	 11			; 0000000bH
  006c0	0b		 DB	 11			; 0000000bH
  006c1	0b		 DB	 11			; 0000000bH
  006c2	0b		 DB	 11			; 0000000bH
  006c3	0b		 DB	 11			; 0000000bH
  006c4	0b		 DB	 11			; 0000000bH
  006c5	0b		 DB	 11			; 0000000bH
  006c6	0b		 DB	 11			; 0000000bH
  006c7	07		 DB	 7
_P_SpawnMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RespawnSpecials
_TEXT	SEGMENT
tv74 = -140						; size = 4
tv78 = -140						; size = 4
_i$1 = -72						; size = 4
_newdist$2 = -68					; size = 4
_closedist$3 = -64					; size = 4
_closey$4 = -60						; size = 4
_closex$5 = -56						; size = 4
_xh$6 = -52						; size = 4
_xl$7 = -48						; size = 4
_yh$8 = -44						; size = 4
_yl$9 = -40						; size = 4
_ss$10 = -36						; size = 4
_i$11 = -32						; size = 4
_volume$12 = -28					; size = 4
_spawnlightning$13 = -24				; size = 4
_mthing$ = -20						; size = 4
_mo$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_P_RespawnSpecials PROC					; COMDAT

; 6844 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6845 : 	fixed_t x, y, z;
; 6846 : 	mobj_t *mo = NULL;

  0000c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _mo$[ebp], 0

; 6847 : 	mapthing_t *mthing = NULL;

  00013	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _mthing$[ebp], 0

; 6848 : 
; 6849 : 	// Rain spawning
; 6850 : 	if (curWeather == PRECIP_STORM || curWeather == PRECIP_RAIN || curWeather == PRECIP_STORM_NORAIN
; 6851 : 		|| curWeather == PRECIP_STORM_NOSTRIKES)

  0001a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _curWeather, 1
  00021	74 1f		 je	 SHORT $LN15@P_RespawnS
  00023	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _curWeather, 3
  0002a	74 16		 je	 SHORT $LN15@P_RespawnS
  0002c	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _curWeather, 5
  00033	74 0d		 je	 SHORT $LN15@P_RespawnS
  00035	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _curWeather, 6
  0003c	0f 85 63 04 00
	00		 jne	 $LN47@P_RespawnS
$LN15@P_RespawnS:

; 6852 : 	{
; 6853 : 		boolean spawnlightning = false;

  00042	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _spawnlightning$13[ebp], 0

; 6854 : 		INT32 volume;
; 6855 : 		size_t i;
; 6856 : 
; 6857 : 		// This code can be reached before the player has entered the game.
; 6858 : 		// This gives rise to two problems: it calls P_Random, so it has to run;
; 6859 : 		// but it also needs an mobj for the player. So, we split it into two,
; 6860 : 		// and run just enough for consistency purposes if we're not in the game
; 6861 : 		// yet.
; 6862 : 
; 6863 : 		// Remember this for later.
; 6864 : 		if (curWeather == PRECIP_STORM)

  00049	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _curWeather, 1
  00050	0f 85 b8 00 00
	00		 jne	 $LN3@P_RespawnS

; 6865 : 		{
; 6866 : 			if (globalweather)

  00056	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _globalweather
  0005d	85 c0		 test	 eax, eax
  0005f	74 2e		 je	 SHORT $LN17@P_RespawnS

; 6867 : 				spawnlightning = (P_Random() < 2);

  00061	e8 00 00 00 00	 call	 _P_Random
  00066	0f b6 c0	 movzx	 eax, al
  00069	83 f8 02	 cmp	 eax, 2
  0006c	7d 0c		 jge	 SHORT $LN66@P_RespawnS
  0006e	c7 85 74 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv74[ebp], 1
  00078	eb 0a		 jmp	 SHORT $LN67@P_RespawnS
$LN66@P_RespawnS:
  0007a	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
$LN67@P_RespawnS:
  00084	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv74[ebp]
  0008a	89 4d e8	 mov	 DWORD PTR _spawnlightning$13[ebp], ecx
  0008d	eb 2c		 jmp	 SHORT $LN18@P_RespawnS
$LN17@P_RespawnS:

; 6868 : 			else
; 6869 : 				spawnlightning = (M_Random() < 2);

  0008f	e8 00 00 00 00	 call	 _M_Random
  00094	0f b6 c0	 movzx	 eax, al
  00097	83 f8 02	 cmp	 eax, 2
  0009a	7d 0c		 jge	 SHORT $LN68@P_RespawnS
  0009c	c7 85 74 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv78[ebp], 1
  000a6	eb 0a		 jmp	 SHORT $LN69@P_RespawnS
$LN68@P_RespawnS:
  000a8	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN69@P_RespawnS:
  000b2	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv78[ebp]
  000b8	89 4d e8	 mov	 DWORD PTR _spawnlightning$13[ebp], ecx
$LN18@P_RespawnS:

; 6870 : 
; 6871 : 			if (spawnlightning)

  000bb	83 7d e8 00	 cmp	 DWORD PTR _spawnlightning$13[ebp], 0
  000bf	74 4d		 je	 SHORT $LN3@P_RespawnS

; 6872 : 			{
; 6873 : 				sector_t *ss = sectors;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _sectors
  000c6	89 45 dc	 mov	 DWORD PTR _ss$10[ebp], eax

; 6874 : 
; 6875 : 				for (i = 0; i <= numsectors; i++, ss++)

  000c9	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$11[ebp], 0
  000d0	eb 15		 jmp	 SHORT $LN4@P_RespawnS
$LN2@P_RespawnS:
  000d2	8b 45 e0	 mov	 eax, DWORD PTR _i$11[ebp]
  000d5	83 c0 01	 add	 eax, 1
  000d8	89 45 e0	 mov	 DWORD PTR _i$11[ebp], eax
  000db	8b 4d dc	 mov	 ecx, DWORD PTR _ss$10[ebp]
  000de	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  000e4	89 4d dc	 mov	 DWORD PTR _ss$10[ebp], ecx
$LN4@P_RespawnS:
  000e7	8b 45 e0	 mov	 eax, DWORD PTR _i$11[ebp]
  000ea	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsectors
  000f0	77 1c		 ja	 SHORT $LN3@P_RespawnS

; 6876 : 					if (ss->ceilingpic == skyflatnum) // Only for the sky.

  000f2	8b 45 dc	 mov	 eax, DWORD PTR _ss$10[ebp]
  000f5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000f8	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _skyflatnum
  000fe	75 0c		 jne	 SHORT $LN20@P_RespawnS

; 6877 : 						P_SpawnLightningFlash(ss); // Spawn a quick flash thinker

  00100	8b 45 dc	 mov	 eax, DWORD PTR _ss$10[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _P_SpawnLightningFlash
  00109	83 c4 04	 add	 esp, 4
$LN20@P_RespawnS:
  0010c	eb c4		 jmp	 SHORT $LN2@P_RespawnS
$LN3@P_RespawnS:

; 6878 : 			}
; 6879 : 		}
; 6880 : 
; 6881 : 		if (!dedicated && playeringame[displayplayer])

  0010e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00115	0f 85 8a 03 00
	00		 jne	 $LN47@P_RespawnS
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  00120	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00128	0f 84 77 03 00
	00		 je	 $LN47@P_RespawnS

; 6882 : 		{
; 6883 : 			if (players[displayplayer].mo->subsector->sector->ceilingpic == skyflatnum)

  0012e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00138	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0013e	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00141	8b 02		 mov	 eax, DWORD PTR [edx]
  00143	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00146	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _skyflatnum
  0014c	75 0c		 jne	 SHORT $LN22@P_RespawnS

; 6884 : 				volume = 255;

  0014e	c7 45 e4 ff 00
	00 00		 mov	 DWORD PTR _volume$12[ebp], 255 ; 000000ffH
  00155	e9 97 01 00 00	 jmp	 $LN25@P_RespawnS
$LN22@P_RespawnS:

; 6885 : 			else if (nosound || sound_disabled)

  0015a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nosound, 0
  00161	75 09		 jne	 SHORT $LN26@P_RespawnS
  00163	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sound_disabled, 0
  0016a	74 0c		 je	 SHORT $LN24@P_RespawnS
$LN26@P_RespawnS:

; 6886 : 				volume = 0;

  0016c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _volume$12[ebp], 0
  00173	e9 79 01 00 00	 jmp	 $LN25@P_RespawnS
$LN24@P_RespawnS:

; 6887 : 			else
; 6888 : 			{
; 6889 : 				fixed_t yl, yh, xl, xh;
; 6890 : 				fixed_t closex, closey, closedist, newdist;
; 6891 : 
; 6892 : 				// Essentially check in a 1024 unit radius of the player for an outdoor area.
; 6893 : 				yl = players[displayplayer].mo->y - 1024*FRACUNIT;

  00178	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00182	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00188	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0018b	81 ea 00 00 00
	04		 sub	 edx, 67108864		; 04000000H
  00191	89 55 d8	 mov	 DWORD PTR _yl$9[ebp], edx

; 6894 : 				yh = players[displayplayer].mo->y + 1024*FRACUNIT;

  00194	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0019e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  001a4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001a7	81 c2 00 00 00
	04		 add	 edx, 67108864		; 04000000H
  001ad	89 55 d4	 mov	 DWORD PTR _yh$8[ebp], edx

; 6895 : 				xl = players[displayplayer].mo->x - 1024*FRACUNIT;

  001b0	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  001ba	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  001c0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001c3	81 ea 00 00 00
	04		 sub	 edx, 67108864		; 04000000H
  001c9	89 55 d0	 mov	 DWORD PTR _xl$7[ebp], edx

; 6896 : 				xh = players[displayplayer].mo->x + 1024*FRACUNIT;

  001cc	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  001d6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  001dc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001df	81 c2 00 00 00
	04		 add	 edx, 67108864		; 04000000H
  001e5	89 55 cc	 mov	 DWORD PTR _xh$6[ebp], edx

; 6897 : 				closex = players[displayplayer].mo->x + 2048*FRACUNIT;

  001e8	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  001f2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  001f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001fb	81 c2 00 00 00
	08		 add	 edx, 134217728		; 08000000H
  00201	89 55 c8	 mov	 DWORD PTR _closex$5[ebp], edx

; 6898 : 				closey = players[displayplayer].mo->y + 2048*FRACUNIT;

  00204	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0020e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00214	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00217	81 c2 00 00 00
	08		 add	 edx, 134217728		; 08000000H
  0021d	89 55 c4	 mov	 DWORD PTR _closey$4[ebp], edx

; 6899 : 				closedist = 2048*FRACUNIT;

  00220	c7 45 c0 00 00
	00 08		 mov	 DWORD PTR _closedist$3[ebp], 134217728 ; 08000000H

; 6900 : 				for (y = yl; y <= yh; y += FRACUNIT*64)

  00227	8b 45 d8	 mov	 eax, DWORD PTR _yl$9[ebp]
  0022a	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
  0022d	eb 0b		 jmp	 SHORT $LN7@P_RespawnS
$LN5@P_RespawnS:
  0022f	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00232	05 00 00 40 00	 add	 eax, 4194304		; 00400000H
  00237	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN7@P_RespawnS:
  0023a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0023d	3b 45 d4	 cmp	 eax, DWORD PTR _yh$8[ebp]
  00240	0f 8f 9b 00 00
	00		 jg	 $LN6@P_RespawnS

; 6901 : 					for (x = xl; x <= xh; x += FRACUNIT*64)

  00246	8b 45 d0	 mov	 eax, DWORD PTR _xl$7[ebp]
  00249	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
  0024c	eb 0b		 jmp	 SHORT $LN10@P_RespawnS
$LN8@P_RespawnS:
  0024e	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00251	05 00 00 40 00	 add	 eax, 4194304		; 00400000H
  00256	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN10@P_RespawnS:
  00259	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0025c	3b 45 cc	 cmp	 eax, DWORD PTR _xh$6[ebp]
  0025f	7f 7b		 jg	 SHORT $LN9@P_RespawnS

; 6902 : 					{
; 6903 : 						if (R_PointInSubsector(x, y)->sector->ceilingpic == skyflatnum) // Found the outdoors!

  00261	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00264	50		 push	 eax
  00265	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00268	51		 push	 ecx
  00269	e8 00 00 00 00	 call	 _R_PointInSubsector
  0026e	83 c4 08	 add	 esp, 8
  00271	8b 10		 mov	 edx, DWORD PTR [eax]
  00273	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00276	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _skyflatnum
  0027c	75 59		 jne	 SHORT $LN28@P_RespawnS

; 6904 : 						{
; 6905 : 							newdist = S_CalculateSoundDistance(players[displayplayer].mo->x, players[displayplayer].mo->y, 0, x, y, 0);

  0027e	6a 00		 push	 0
  00280	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00283	50		 push	 eax
  00284	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00287	51		 push	 ecx
  00288	6a 00		 push	 0
  0028a	69 15 00 00 00
	00 fc 01 00 00	 imul	 edx, DWORD PTR _displayplayer, 508
  00294	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  0029a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0029d	51		 push	 ecx
  0029e	69 15 00 00 00
	00 fc 01 00 00	 imul	 edx, DWORD PTR _displayplayer, 508
  002a8	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  002ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002b1	51		 push	 ecx
  002b2	e8 00 00 00 00	 call	 _S_CalculateSoundDistance
  002b7	83 c4 18	 add	 esp, 24			; 00000018H
  002ba	89 45 bc	 mov	 DWORD PTR _newdist$2[ebp], eax

; 6906 : 							if (newdist < closedist)

  002bd	8b 45 bc	 mov	 eax, DWORD PTR _newdist$2[ebp]
  002c0	3b 45 c0	 cmp	 eax, DWORD PTR _closedist$3[ebp]
  002c3	7d 12		 jge	 SHORT $LN28@P_RespawnS

; 6907 : 							{
; 6908 : 								closex = x;

  002c5	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  002c8	89 45 c8	 mov	 DWORD PTR _closex$5[ebp], eax

; 6909 : 								closey = y;

  002cb	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002ce	89 45 c4	 mov	 DWORD PTR _closey$4[ebp], eax

; 6910 : 								closedist = newdist;

  002d1	8b 45 bc	 mov	 eax, DWORD PTR _newdist$2[ebp]
  002d4	89 45 c0	 mov	 DWORD PTR _closedist$3[ebp], eax
$LN28@P_RespawnS:

; 6911 : 							}
; 6912 : 						}
; 6913 : 					}

  002d7	e9 72 ff ff ff	 jmp	 $LN8@P_RespawnS
$LN9@P_RespawnS:
  002dc	e9 4e ff ff ff	 jmp	 $LN5@P_RespawnS
$LN6@P_RespawnS:

; 6914 : 				volume = 255 - (closedist>>(FRACBITS+2));

  002e1	8b 45 c0	 mov	 eax, DWORD PTR _closedist$3[ebp]
  002e4	c1 f8 12	 sar	 eax, 18			; 00000012H
  002e7	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  002ec	2b c8		 sub	 ecx, eax
  002ee	89 4d e4	 mov	 DWORD PTR _volume$12[ebp], ecx
$LN25@P_RespawnS:

; 6915 : 			}
; 6916 : 			if (volume < 0)

  002f1	83 7d e4 00	 cmp	 DWORD PTR _volume$12[ebp], 0
  002f5	7d 09		 jge	 SHORT $LN29@P_RespawnS

; 6917 : 				volume = 0;

  002f7	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _volume$12[ebp], 0
  002fe	eb 10		 jmp	 SHORT $LN31@P_RespawnS
$LN29@P_RespawnS:

; 6918 : 			else if (volume > 255)

  00300	81 7d e4 ff 00
	00 00		 cmp	 DWORD PTR _volume$12[ebp], 255 ; 000000ffH
  00307	7e 07		 jle	 SHORT $LN31@P_RespawnS

; 6919 : 				volume = 255;

  00309	c7 45 e4 ff 00
	00 00		 mov	 DWORD PTR _volume$12[ebp], 255 ; 000000ffH
$LN31@P_RespawnS:

; 6920 : 
; 6921 : 			if (!(curWeather == PRECIP_STORM_NORAIN) && (!leveltime || leveltime % 80 == 1))

  00310	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _curWeather, 5
  00317	74 3b		 je	 SHORT $LN32@P_RespawnS
  00319	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _leveltime, 0
  00320	74 13		 je	 SHORT $LN33@P_RespawnS
  00322	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00327	33 d2		 xor	 edx, edx
  00329	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0032e	f7 f1		 div	 ecx
  00330	83 fa 01	 cmp	 edx, 1
  00333	75 1f		 jne	 SHORT $LN32@P_RespawnS
$LN33@P_RespawnS:

; 6922 : 				S_StartSoundAtVolume(players[displayplayer].mo, sfx_rainin, volume);

  00335	8b 45 e4	 mov	 eax, DWORD PTR _volume$12[ebp]
  00338	50		 push	 eax
  00339	6a 7e		 push	 126			; 0000007eH
  0033b	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _displayplayer, 508
  00345	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0034b	52		 push	 edx
  0034c	e8 00 00 00 00	 call	 _S_StartSoundAtVolume
  00351	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@P_RespawnS:

; 6923 : 
; 6924 : 			if (curWeather == PRECIP_STORM || curWeather == PRECIP_STORM_NORAIN || curWeather == PRECIP_STORM_NOSTRIKES)

  00354	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _curWeather, 1
  0035b	74 16		 je	 SHORT $LN35@P_RespawnS
  0035d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _curWeather, 5
  00364	74 0d		 je	 SHORT $LN35@P_RespawnS
  00366	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _curWeather, 6
  0036d	0f 85 32 01 00
	00		 jne	 $LN47@P_RespawnS
$LN35@P_RespawnS:

; 6925 : 			{
; 6926 : 				if (spawnlightning && curWeather != PRECIP_STORM_NOSTRIKES)

  00373	83 7d e8 00	 cmp	 DWORD PTR _spawnlightning$13[ebp], 0
  00377	0f 84 c2 00 00
	00		 je	 $LN36@P_RespawnS
  0037d	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _curWeather, 6
  00384	0f 84 b5 00 00
	00		 je	 $LN36@P_RespawnS

; 6927 : 				{
; 6928 : 					i = M_Random(); // This doesn't need to use P_Random().

  0038a	e8 00 00 00 00	 call	 _M_Random
  0038f	0f b6 c0	 movzx	 eax, al
  00392	89 45 e0	 mov	 DWORD PTR _i$11[ebp], eax

; 6929 : 
; 6930 : 					if (i < 128 && leveltime & 1)

  00395	81 7d e0 80 00
	00 00		 cmp	 DWORD PTR _i$11[ebp], 128 ; 00000080H
  0039c	73 2b		 jae	 SHORT $LN38@P_RespawnS
  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  003a3	83 e0 01	 and	 eax, 1
  003a6	74 21		 je	 SHORT $LN38@P_RespawnS

; 6931 : 						S_StartSoundAtVolume(players[displayplayer].mo, sfx_litng1, volume);

  003a8	8b 45 e4	 mov	 eax, DWORD PTR _volume$12[ebp]
  003ab	50		 push	 eax
  003ac	6a 57		 push	 87			; 00000057H
  003ae	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _displayplayer, 508
  003b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  003be	52		 push	 edx
  003bf	e8 00 00 00 00	 call	 _S_StartSoundAtVolume
  003c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c7	eb 74		 jmp	 SHORT $LN43@P_RespawnS
$LN38@P_RespawnS:

; 6932 : 					else if (i < 128)

  003c9	81 7d e0 80 00
	00 00		 cmp	 DWORD PTR _i$11[ebp], 128 ; 00000080H
  003d0	73 21		 jae	 SHORT $LN40@P_RespawnS

; 6933 : 						S_StartSoundAtVolume(players[displayplayer].mo, sfx_litng2, volume);

  003d2	8b 45 e4	 mov	 eax, DWORD PTR _volume$12[ebp]
  003d5	50		 push	 eax
  003d6	6a 58		 push	 88			; 00000058H
  003d8	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _displayplayer, 508
  003e2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  003e8	52		 push	 edx
  003e9	e8 00 00 00 00	 call	 _S_StartSoundAtVolume
  003ee	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f1	eb 4a		 jmp	 SHORT $LN43@P_RespawnS
$LN40@P_RespawnS:

; 6934 : 					else if (leveltime & 1)

  003f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  003f8	83 e0 01	 and	 eax, 1
  003fb	74 21		 je	 SHORT $LN42@P_RespawnS

; 6935 : 						S_StartSoundAtVolume(players[displayplayer].mo, sfx_litng3, volume);

  003fd	8b 45 e4	 mov	 eax, DWORD PTR _volume$12[ebp]
  00400	50		 push	 eax
  00401	6a 59		 push	 89			; 00000059H
  00403	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _displayplayer, 508
  0040d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00413	52		 push	 edx
  00414	e8 00 00 00 00	 call	 _S_StartSoundAtVolume
  00419	83 c4 0c	 add	 esp, 12			; 0000000cH
  0041c	eb 1f		 jmp	 SHORT $LN43@P_RespawnS
$LN42@P_RespawnS:

; 6936 : 					else
; 6937 : 						S_StartSoundAtVolume(players[displayplayer].mo, sfx_litng4, volume);

  0041e	8b 45 e4	 mov	 eax, DWORD PTR _volume$12[ebp]
  00421	50		 push	 eax
  00422	6a 5a		 push	 90			; 0000005aH
  00424	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _displayplayer, 508
  0042e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00434	52		 push	 edx
  00435	e8 00 00 00 00	 call	 _S_StartSoundAtVolume
  0043a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN43@P_RespawnS:

; 6938 : 				}

  0043d	eb 66		 jmp	 SHORT $LN47@P_RespawnS
$LN36@P_RespawnS:

; 6939 : 				else if (leveltime & 1)

  0043f	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00444	83 e0 01	 and	 eax, 1
  00447	74 5c		 je	 SHORT $LN47@P_RespawnS

; 6940 : 				{
; 6941 : 					i = M_Random(); // This doesn't need to use P_Random().

  00449	e8 00 00 00 00	 call	 _M_Random
  0044e	0f b6 c0	 movzx	 eax, al
  00451	89 45 e0	 mov	 DWORD PTR _i$11[ebp], eax

; 6942 : 
; 6943 : 					if (i > 253)

  00454	81 7d e0 fd 00
	00 00		 cmp	 DWORD PTR _i$11[ebp], 253 ; 000000fdH
  0045b	76 48		 jbe	 SHORT $LN47@P_RespawnS

; 6944 : 					{
; 6945 : 						if (i & 1)

  0045d	8b 45 e0	 mov	 eax, DWORD PTR _i$11[ebp]
  00460	83 e0 01	 and	 eax, 1
  00463	74 21		 je	 SHORT $LN46@P_RespawnS

; 6946 : 							S_StartSoundAtVolume(players[displayplayer].mo, sfx_athun1, volume);

  00465	8b 45 e4	 mov	 eax, DWORD PTR _volume$12[ebp]
  00468	50		 push	 eax
  00469	6a 1b		 push	 27			; 0000001bH
  0046b	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _displayplayer, 508
  00475	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0047b	52		 push	 edx
  0047c	e8 00 00 00 00	 call	 _S_StartSoundAtVolume
  00481	83 c4 0c	 add	 esp, 12			; 0000000cH
  00484	eb 1f		 jmp	 SHORT $LN47@P_RespawnS
$LN46@P_RespawnS:

; 6947 : 						else
; 6948 : 							S_StartSoundAtVolume(players[displayplayer].mo, sfx_athun2, volume);

  00486	8b 45 e4	 mov	 eax, DWORD PTR _volume$12[ebp]
  00489	50		 push	 eax
  0048a	6a 1c		 push	 28			; 0000001cH
  0048c	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _displayplayer, 508
  00496	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0049c	52		 push	 edx
  0049d	e8 00 00 00 00	 call	 _S_StartSoundAtVolume
  004a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@P_RespawnS:

; 6949 : 					}
; 6950 : 				}
; 6951 : 			}
; 6952 : 		}
; 6953 : 	}
; 6954 : 
; 6955 : 	// only respawn items when cv_itemrespawn is on
; 6956 : 	if (!cv_itemrespawn.value)

  004a5	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_itemrespawn+20, 0
  004ac	75 05		 jne	 SHORT $LN48@P_RespawnS

; 6957 : 		return;

  004ae	e9 2c 03 00 00	 jmp	 $LN1@P_RespawnS
$LN48@P_RespawnS:

; 6958 : 
; 6959 : 	// Don't respawn in special stages!
; 6960 : 	if (G_IsSpecialStage(gamemap))

  004b3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  004ba	50		 push	 eax
  004bb	e8 00 00 00 00	 call	 _G_IsSpecialStage
  004c0	83 c4 04	 add	 esp, 4
  004c3	85 c0		 test	 eax, eax
  004c5	74 05		 je	 SHORT $LN49@P_RespawnS

; 6961 : 		return;

  004c7	e9 13 03 00 00	 jmp	 $LN1@P_RespawnS
$LN49@P_RespawnS:

; 6962 : 
; 6963 : 	// nothing left to respawn?
; 6964 : 	if (iquehead == iquetail)

  004cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquehead
  004d1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _iquetail
  004d7	75 05		 jne	 SHORT $LN50@P_RespawnS

; 6965 : 		return;

  004d9	e9 01 03 00 00	 jmp	 $LN1@P_RespawnS
$LN50@P_RespawnS:

; 6966 : 
; 6967 : 	// the first item in the queue is the first to respawn
; 6968 : 	// wait at least 30 seconds
; 6969 : 	if (leveltime - itemrespawntime[iquetail] < (tic_t)cv_itemrespawntime.value*TICRATE)

  004de	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquetail
  004e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  004e9	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _itemrespawntime[eax*4]
  004f0	6b 15 14 00 00
	00 23		 imul	 edx, DWORD PTR _cv_itemrespawntime+20, 35
  004f7	3b ca		 cmp	 ecx, edx
  004f9	73 05		 jae	 SHORT $LN51@P_RespawnS

; 6970 : 		return;

  004fb	e9 df 02 00 00	 jmp	 $LN1@P_RespawnS
$LN51@P_RespawnS:

; 6971 : 
; 6972 : 	mthing = itemrespawnque[iquetail];

  00500	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquetail
  00505	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _itemrespawnque[eax*4]
  0050c	89 4d ec	 mov	 DWORD PTR _mthing$[ebp], ecx

; 6973 : 
; 6974 : #ifdef PARANOIA
; 6975 : 	if (!mthing)
; 6976 : 		I_Error("itemrespawnque[iquetail] is NULL!");
; 6977 : #endif
; 6978 : 
; 6979 : 	if (mthing)

  0050f	83 7d ec 00	 cmp	 DWORD PTR _mthing$[ebp], 0
  00513	0f 84 b4 02 00
	00		 je	 $LN63@P_RespawnS

; 6980 : 	{
; 6981 : 		mobjtype_t i;
; 6982 : 		x = mthing->x << FRACBITS;

  00519	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  0051c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0051f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00522	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 6983 : 		y = mthing->y << FRACBITS;

  00525	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  00528	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0052c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0052f	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 6984 : 
; 6985 : 		// find which type to spawn
; 6986 : 		for (i = 0; i < NUMMOBJTYPES; i++)

  00532	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00539	eb 09		 jmp	 SHORT $LN13@P_RespawnS
$LN11@P_RespawnS:
  0053b	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  0053e	83 c0 01	 add	 eax, 1
  00541	89 45 b8	 mov	 DWORD PTR _i$1[ebp], eax
$LN13@P_RespawnS:
  00544	81 7d b8 be 01
	00 00		 cmp	 DWORD PTR _i$1[ebp], 446 ; 000001beH
  0054b	7d 17		 jge	 SHORT $LN12@P_RespawnS

; 6987 : 			if (mthing->type == mobjinfo[i].doomednum)

  0054d	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  00550	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00554	6b 55 b8 60	 imul	 edx, DWORD PTR _i$1[ebp], 96
  00558	3b 8a 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[edx]
  0055e	75 02		 jne	 SHORT $LN53@P_RespawnS

; 6988 : 				break;

  00560	eb 02		 jmp	 SHORT $LN12@P_RespawnS
$LN53@P_RespawnS:
  00562	eb d7		 jmp	 SHORT $LN11@P_RespawnS
$LN12@P_RespawnS:

; 6989 : 
; 6990 : 		z = (mthing->options >> ZSHIFT) * FRACUNIT;

  00564	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  00567	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0056b	c1 f9 04	 sar	 ecx, 4
  0056e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00571	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 6991 : 
; 6992 : 		//CTF rings should continue to respawn as normal rings outside of CTF.
; 6993 : 		if (gametype != GT_CTF)

  00574	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0057b	83 f8 04	 cmp	 eax, 4
  0057e	74 13		 je	 SHORT $LN55@P_RespawnS

; 6994 : 		{
; 6995 : 			if (i == MT_REDTEAMRING || i == MT_BLUETEAMRING)

  00580	83 7d b8 30	 cmp	 DWORD PTR _i$1[ebp], 48	; 00000030H
  00584	74 06		 je	 SHORT $LN56@P_RespawnS
  00586	83 7d b8 31	 cmp	 DWORD PTR _i$1[ebp], 49	; 00000031H
  0058a	75 07		 jne	 SHORT $LN55@P_RespawnS
$LN56@P_RespawnS:

; 6996 : 				i = MT_RING;

  0058c	c7 45 b8 2b 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 43	; 0000002bH
$LN55@P_RespawnS:

; 6997 : 		}
; 6998 : 
; 6999 : 		mo = P_SpawnMobj(x, y, z, i);

  00593	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  00596	50		 push	 eax
  00597	8b 4d f4	 mov	 ecx, DWORD PTR _z$[ebp]
  0059a	51		 push	 ecx
  0059b	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  0059e	52		 push	 edx
  0059f	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  005a2	50		 push	 eax
  005a3	e8 00 00 00 00	 call	 _P_SpawnMobj
  005a8	83 c4 10	 add	 esp, 16			; 00000010H
  005ab	89 45 f0	 mov	 DWORD PTR _mo$[ebp], eax

; 7000 : 		mo->spawnpoint = mthing;

  005ae	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  005b1	8b 4d ec	 mov	 ecx, DWORD PTR _mthing$[ebp]
  005b4	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 7001 : 		mo->angle = ANGLE_45 * (mthing->angle/45);

  005ba	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  005bd	0f bf 40 04	 movsx	 eax, WORD PTR [eax+4]
  005c1	99		 cdq
  005c2	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  005c7	f7 f9		 idiv	 ecx
  005c9	c1 e0 1d	 shl	 eax, 29			; 0000001dH
  005cc	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  005cf	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 7002 : 
; 7003 : 		// todo: Clean this garbage up.
; 7004 : 		if (mthing->options & MTF_OBJECTFLIP)

  005d2	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  005d5	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  005d9	83 e1 02	 and	 ecx, 2
  005dc	0f 84 15 01 00
	00		 je	 $LN57@P_RespawnS

; 7005 : 		{
; 7006 : 			if (mthing->options & MTF_AMBUSH &&

  005e2	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  005e5	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  005e9	83 e1 08	 and	 ecx, 8
  005ec	0f 84 ad 00 00
	00		 je	 $LN59@P_RespawnS
  005f2	83 7d b8 2b	 cmp	 DWORD PTR _i$1[ebp], 43	; 0000002bH
  005f6	0f 84 81 00 00
	00		 je	 $LN61@P_RespawnS
  005fc	83 7d b8 30	 cmp	 DWORD PTR _i$1[ebp], 48	; 00000030H
  00600	74 7b		 je	 SHORT $LN61@P_RespawnS
  00602	83 7d b8 31	 cmp	 DWORD PTR _i$1[ebp], 49	; 00000031H
  00606	74 75		 je	 SHORT $LN61@P_RespawnS
  00608	81 7d b8 e1 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 225 ; 000000e1H
  0060f	74 6c		 je	 SHORT $LN61@P_RespawnS
  00611	81 7d b8 d0 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 208 ; 000000d0H
  00618	74 63		 je	 SHORT $LN61@P_RespawnS
  0061a	81 7d b8 d1 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 209 ; 000000d1H
  00621	74 5a		 je	 SHORT $LN61@P_RespawnS
  00623	81 7d b8 d2 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 210 ; 000000d2H
  0062a	74 51		 je	 SHORT $LN61@P_RespawnS
  0062c	81 7d b8 d3 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 211 ; 000000d3H
  00633	74 48		 je	 SHORT $LN61@P_RespawnS
  00635	81 7d b8 d4 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 212 ; 000000d4H
  0063c	74 3f		 je	 SHORT $LN61@P_RespawnS
  0063e	81 7d b8 d5 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 213 ; 000000d5H
  00645	74 36		 je	 SHORT $LN61@P_RespawnS
  00647	81 7d b8 d6 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 214 ; 000000d6H
  0064e	74 2d		 je	 SHORT $LN61@P_RespawnS
  00650	81 7d b8 d7 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 215 ; 000000d7H
  00657	74 24		 je	 SHORT $LN61@P_RespawnS
  00659	81 7d b8 d8 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 216 ; 000000d8H
  00660	74 1b		 je	 SHORT $LN61@P_RespawnS
  00662	81 7d b8 d9 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 217 ; 000000d9H
  00669	74 12		 je	 SHORT $LN61@P_RespawnS
  0066b	81 7d b8 da 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 218 ; 000000daH
  00672	74 09		 je	 SHORT $LN61@P_RespawnS
  00674	81 7d b8 db 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 219 ; 000000dbH
  0067b	75 22		 jne	 SHORT $LN59@P_RespawnS
$LN61@P_RespawnS:

; 7007 : 			(i == MT_RING || i == MT_REDTEAMRING || i == MT_BLUETEAMRING || i == MT_COIN ||
; 7008 : 			i == MT_BOUNCERING || i == MT_RAILRING || i == MT_AUTOMATICRING ||
; 7009 : 			i == MT_EXPLOSIONRING || i == MT_SCATTERRING || i == MT_GRENADERING ||
; 7010 : 			i == MT_BOUNCEPICKUP || i == MT_RAILPICKUP || i == MT_AUTOPICKUP ||
; 7011 : 			i == MT_EXPLODEPICKUP || i == MT_SCATTERPICKUP || i == MT_GRENADEPICKUP))
; 7012 : 				mo->z = mo->ceilingz - (mthing->options >> ZSHIFT) * FRACUNIT - (32 * FRACUNIT);

  0067d	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  00680	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00684	c1 f9 04	 sar	 ecx, 4
  00687	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0068a	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  0068d	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00690	2b c1		 sub	 eax, ecx
  00692	2d 00 00 20 00	 sub	 eax, 2097152		; 00200000H
  00697	8b 4d f0	 mov	 ecx, DWORD PTR _mo$[ebp]
  0069a	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0069d	eb 1b		 jmp	 SHORT $LN60@P_RespawnS
$LN59@P_RespawnS:

; 7013 : 			else
; 7014 : 				mo->z = mo->ceilingz - (mthing->options >> ZSHIFT) * FRACUNIT;

  0069f	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  006a2	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  006a6	c1 f9 04	 sar	 ecx, 4
  006a9	c1 e1 10	 shl	 ecx, 16			; 00000010H
  006ac	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  006af	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  006b2	2b c1		 sub	 eax, ecx
  006b4	8b 4d f0	 mov	 ecx, DWORD PTR _mo$[ebp]
  006b7	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN60@P_RespawnS:

; 7015 : 
; 7016 : 			mo->z -= mobjinfo[i].height; // Don't forget the height!

  006ba	6b 45 b8 60	 imul	 eax, DWORD PTR _i$1[ebp], 96
  006be	8b 4d f0	 mov	 ecx, DWORD PTR _mo$[ebp]
  006c1	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  006c4	2b 90 44 00 00
	00		 sub	 edx, DWORD PTR _mobjinfo[eax+68]
  006ca	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  006cd	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 7017 : 
; 7018 : 			mo->eflags |= MFE_VERTICALFLIP;

  006d0	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  006d3	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  006d9	83 c9 20	 or	 ecx, 32			; 00000020H
  006dc	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  006df	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 7019 : 			mo->flags2 = MF2_OBJECTFLIP;

  006e5	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  006e8	c7 80 88 00 00
	00 00 00 00 40	 mov	 DWORD PTR [eax+136], 1073741824 ; 40000000H

; 7020 : 		}

  006f2	e9 d6 00 00 00	 jmp	 $LN63@P_RespawnS
$LN57@P_RespawnS:

; 7021 : 		else
; 7022 : 		{
; 7023 : 			if (mthing->options & MTF_AMBUSH &&

  006f7	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  006fa	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  006fe	83 e1 08	 and	 ecx, 8
  00701	0f 84 ad 00 00
	00		 je	 $LN62@P_RespawnS
  00707	83 7d b8 2b	 cmp	 DWORD PTR _i$1[ebp], 43	; 0000002bH
  0070b	0f 84 81 00 00
	00		 je	 $LN64@P_RespawnS
  00711	83 7d b8 30	 cmp	 DWORD PTR _i$1[ebp], 48	; 00000030H
  00715	74 7b		 je	 SHORT $LN64@P_RespawnS
  00717	83 7d b8 31	 cmp	 DWORD PTR _i$1[ebp], 49	; 00000031H
  0071b	74 75		 je	 SHORT $LN64@P_RespawnS
  0071d	81 7d b8 e1 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 225 ; 000000e1H
  00724	74 6c		 je	 SHORT $LN64@P_RespawnS
  00726	81 7d b8 d0 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 208 ; 000000d0H
  0072d	74 63		 je	 SHORT $LN64@P_RespawnS
  0072f	81 7d b8 d1 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 209 ; 000000d1H
  00736	74 5a		 je	 SHORT $LN64@P_RespawnS
  00738	81 7d b8 d2 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 210 ; 000000d2H
  0073f	74 51		 je	 SHORT $LN64@P_RespawnS
  00741	81 7d b8 d3 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 211 ; 000000d3H
  00748	74 48		 je	 SHORT $LN64@P_RespawnS
  0074a	81 7d b8 d4 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 212 ; 000000d4H
  00751	74 3f		 je	 SHORT $LN64@P_RespawnS
  00753	81 7d b8 d5 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 213 ; 000000d5H
  0075a	74 36		 je	 SHORT $LN64@P_RespawnS
  0075c	81 7d b8 d6 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 214 ; 000000d6H
  00763	74 2d		 je	 SHORT $LN64@P_RespawnS
  00765	81 7d b8 d7 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 215 ; 000000d7H
  0076c	74 24		 je	 SHORT $LN64@P_RespawnS
  0076e	81 7d b8 d8 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 216 ; 000000d8H
  00775	74 1b		 je	 SHORT $LN64@P_RespawnS
  00777	81 7d b8 d9 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 217 ; 000000d9H
  0077e	74 12		 je	 SHORT $LN64@P_RespawnS
  00780	81 7d b8 da 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 218 ; 000000daH
  00787	74 09		 je	 SHORT $LN64@P_RespawnS
  00789	81 7d b8 db 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 219 ; 000000dbH
  00790	75 22		 jne	 SHORT $LN62@P_RespawnS
$LN64@P_RespawnS:

; 7024 : 			(i == MT_RING || i == MT_REDTEAMRING || i == MT_BLUETEAMRING || i == MT_COIN ||
; 7025 : 			i == MT_BOUNCERING || i == MT_RAILRING || i == MT_AUTOMATICRING ||
; 7026 : 			i == MT_EXPLOSIONRING || i == MT_SCATTERRING || i == MT_GRENADERING ||
; 7027 : 			i == MT_BOUNCEPICKUP || i == MT_RAILPICKUP || i == MT_AUTOPICKUP ||
; 7028 : 			i == MT_EXPLODEPICKUP || i == MT_SCATTERPICKUP || i == MT_GRENADEPICKUP))
; 7029 : 				mo->z = mo->floorz + (mthing->options >> ZSHIFT) * FRACUNIT + (32 * FRACUNIT);

  00792	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  00795	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00799	c1 f9 04	 sar	 ecx, 4
  0079c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0079f	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  007a2	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  007a5	8d 8c 08 00 00
	20 00		 lea	 ecx, DWORD PTR [eax+ecx+2097152]
  007ac	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  007af	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  007b2	eb 19		 jmp	 SHORT $LN63@P_RespawnS
$LN62@P_RespawnS:

; 7030 : 			else
; 7031 : 				mo->z = mo->floorz + (mthing->options >> ZSHIFT) * FRACUNIT;

  007b4	8b 45 ec	 mov	 eax, DWORD PTR _mthing$[ebp]
  007b7	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007bb	c1 f9 04	 sar	 ecx, 4
  007be	c1 e1 10	 shl	 ecx, 16			; 00000010H
  007c1	8b 55 f0	 mov	 edx, DWORD PTR _mo$[ebp]
  007c4	03 4a 38	 add	 ecx, DWORD PTR [edx+56]
  007c7	8b 45 f0	 mov	 eax, DWORD PTR _mo$[ebp]
  007ca	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN63@P_RespawnS:

; 7032 : 		}
; 7033 : 	}
; 7034 : 	// pull it from the que
; 7035 : 	iquetail = (iquetail+1)&(ITEMQUESIZE-1);

  007cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _iquetail
  007d2	83 c0 01	 add	 eax, 1
  007d5	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  007da	a3 00 00 00 00	 mov	 DWORD PTR _iquetail, eax
$LN1@P_RespawnS:

; 7036 : }

  007df	5f		 pop	 edi
  007e0	5e		 pop	 esi
  007e1	5b		 pop	 ebx
  007e2	8b e5		 mov	 esp, ebp
  007e4	5d		 pop	 ebp
  007e5	c3		 ret	 0
_P_RespawnSpecials ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_EmeraldManager
_TEXT	SEGMENT
_tries$1 = -552						; size = 4
_numspawnpoints$ = -548					; size = 4
_spawnpoints$ = -544					; size = 256
_numwithemerald$ = -288					; size = 4
_hasemerald$ = -284					; size = 256
_emeraldsspawned$ = -28					; size = 4
_numtospawn$ = -24					; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_mo$ = -12						; size = 4
_think$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_P_EmeraldManager PROC					; COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 02 00
	00		 sub	 esp, 680		; 000002a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 322  : 	thinker_t *think;
; 323  : 	mobj_t *mo;
; 324  : 	INT32 i,j;
; 325  : 	INT32 numtospawn;
; 326  : 	INT32 emeraldsspawned = 0;

  00016	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _emeraldsspawned$[ebp], 0

; 327  : 
; 328  : 	boolean hasemerald[MAXHUNTEMERALDS];
; 329  : 	INT32 numwithemerald = 0;

  0001d	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _numwithemerald$[ebp], 0

; 330  : 
; 331  : 	// record empty spawn points
; 332  : 	mobj_t *spawnpoints[MAXHUNTEMERALDS];
; 333  : 	INT32 numspawnpoints = 0;

  00027	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _numspawnpoints$[ebp], 0

; 334  : 
; 335  : 	for (i = 0; i < MAXHUNTEMERALDS; i++)

  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN4@P_EmeraldM
$LN2@P_EmeraldM:
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_EmeraldM:
  00043	83 7d f0 40	 cmp	 DWORD PTR _i$[ebp], 64	; 00000040H
  00047	7d 1e		 jge	 SHORT $LN3@P_EmeraldM

; 336  : 	{
; 337  : 		hasemerald[i] = false;

  00049	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0004c	c7 84 85 e4 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _hasemerald$[ebp+eax*4], 0

; 338  : 		spawnpoints[i] = NULL;

  00057	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0005a	c7 84 85 e0 fd
	ff ff 00 00 00
	00		 mov	 DWORD PTR _spawnpoints$[ebp+eax*4], 0

; 339  : 	}

  00065	eb d3		 jmp	 SHORT $LN2@P_EmeraldM
$LN3@P_EmeraldM:

; 340  : 
; 341  : 	for (think = thinkercap.next; think != &thinkercap; think = think->next)

  00067	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0006c	89 45 f8	 mov	 DWORD PTR _think$[ebp], eax
  0006f	eb 09		 jmp	 SHORT $LN7@P_EmeraldM
$LN5@P_EmeraldM:
  00071	8b 45 f8	 mov	 eax, DWORD PTR _think$[ebp]
  00074	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00077	89 4d f8	 mov	 DWORD PTR _think$[ebp], ecx
$LN7@P_EmeraldM:
  0007a	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _think$[ebp], OFFSET _thinkercap
  00081	0f 84 b2 00 00
	00		 je	 $LN6@P_EmeraldM

; 342  : 	{
; 343  : 		if (think->function.acp1 != (actionf_p1)P_MobjThinker)

  00087	8b 45 f8	 mov	 eax, DWORD PTR _think$[ebp]
  0008a	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  00091	74 02		 je	 SHORT $LN16@P_EmeraldM

; 344  : 			continue; // not a mobj thinker

  00093	eb dc		 jmp	 SHORT $LN5@P_EmeraldM
$LN16@P_EmeraldM:

; 345  : 
; 346  : 		mo = (mobj_t *)think;

  00095	8b 45 f8	 mov	 eax, DWORD PTR _think$[ebp]
  00098	89 45 f4	 mov	 DWORD PTR _mo$[ebp], eax

; 347  : 
; 348  : 		if (mo->type == MT_EMERALDSPAWN)

  0009b	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  0009e	83 78 7c 3f	 cmp	 DWORD PTR [eax+124], 63	; 0000003fH
  000a2	75 69		 jne	 SHORT $LN17@P_EmeraldM

; 349  : 		{
; 350  : 			if (mo->threshold || mo->target) // Either has the emerald spawned or is spawning

  000a4	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  000a7	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  000ae	75 0c		 jne	 SHORT $LN21@P_EmeraldM
  000b0	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  000b3	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000ba	74 27		 je	 SHORT $LN19@P_EmeraldM
$LN21@P_EmeraldM:

; 351  : 			{
; 352  : 				numwithemerald++;

  000bc	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  000c2	83 c0 01	 add	 eax, 1
  000c5	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 353  : 				emeraldsspawned |= mobjinfo[mo->reactiontime].speed;

  000cb	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  000ce	6b 88 9c 00 00
	00 60		 imul	 ecx, DWORD PTR [eax+156], 96
  000d5	8b 55 e4	 mov	 edx, DWORD PTR _emeraldsspawned$[ebp]
  000d8	0b 91 3c 00 00
	00		 or	 edx, DWORD PTR _mobjinfo[ecx+60]
  000de	89 55 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], edx

; 354  : 			}

  000e1	eb 28		 jmp	 SHORT $LN22@P_EmeraldM
$LN19@P_EmeraldM:

; 355  : 			else if (numspawnpoints < MAXHUNTEMERALDS)

  000e3	83 bd dc fd ff
	ff 40		 cmp	 DWORD PTR _numspawnpoints$[ebp], 64 ; 00000040H
  000ea	7d 1f		 jge	 SHORT $LN22@P_EmeraldM

; 356  : 				spawnpoints[numspawnpoints++] = mo; // empty spawn points

  000ec	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _numspawnpoints$[ebp]
  000f2	8b 4d f4	 mov	 ecx, DWORD PTR _mo$[ebp]
  000f5	89 8c 85 e0 fd
	ff ff		 mov	 DWORD PTR _spawnpoints$[ebp+eax*4], ecx
  000fc	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _numspawnpoints$[ebp]
  00102	83 c2 01	 add	 edx, 1
  00105	89 95 dc fd ff
	ff		 mov	 DWORD PTR _numspawnpoints$[ebp], edx
$LN22@P_EmeraldM:

; 357  : 		}

  0010b	eb 27		 jmp	 SHORT $LN23@P_EmeraldM
$LN17@P_EmeraldM:

; 358  : 		else if (mo->type == MT_FLINGEMERALD)

  0010d	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  00110	83 78 7c 40	 cmp	 DWORD PTR [eax+124], 64	; 00000040H
  00114	75 1e		 jne	 SHORT $LN23@P_EmeraldM

; 359  : 		{
; 360  : 			numwithemerald++;

  00116	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  0011c	83 c0 01	 add	 eax, 1
  0011f	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 361  : 			emeraldsspawned |= mo->threshold;

  00125	8b 45 f4	 mov	 eax, DWORD PTR _mo$[ebp]
  00128	8b 4d e4	 mov	 ecx, DWORD PTR _emeraldsspawned$[ebp]
  0012b	0b 88 a0 00 00
	00		 or	 ecx, DWORD PTR [eax+160]
  00131	89 4d e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], ecx
$LN23@P_EmeraldM:

; 362  : 		}
; 363  : 	}

  00134	e9 38 ff ff ff	 jmp	 $LN5@P_EmeraldM
$LN6@P_EmeraldM:

; 364  : 
; 365  : 	if (numspawnpoints == 0)

  00139	83 bd dc fd ff
	ff 00		 cmp	 DWORD PTR _numspawnpoints$[ebp], 0
  00140	75 05		 jne	 SHORT $LN24@P_EmeraldM

; 366  : 		return;

  00142	e9 d1 03 00 00	 jmp	 $LN12@P_EmeraldM
$LN24@P_EmeraldM:

; 367  : 
; 368  : 	// But wait! We need to check all the players too, to see if anyone has some of the emeralds.
; 369  : 	for (i = 0; i < MAXPLAYERS; i++)

  00147	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0014e	eb 09		 jmp	 SHORT $LN10@P_EmeraldM
$LN8@P_EmeraldM:
  00150	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00153	83 c0 01	 add	 eax, 1
  00156	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN10@P_EmeraldM:
  00159	83 7d f0 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0015d	0f 8d 8b 01 00
	00		 jge	 $LN9@P_EmeraldM

; 370  : 	{
; 371  : 		if (!playeringame[i])

  00163	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00166	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0016e	75 02		 jne	 SHORT $LN25@P_EmeraldM

; 372  : 			continue;

  00170	eb de		 jmp	 SHORT $LN8@P_EmeraldM
$LN25@P_EmeraldM:

; 373  : 
; 374  : 		if (!players[i].mo)

  00172	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00179	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00180	75 02		 jne	 SHORT $LN26@P_EmeraldM

; 375  : 			continue;

  00182	eb cc		 jmp	 SHORT $LN8@P_EmeraldM
$LN26@P_EmeraldM:

; 376  : 
; 377  : 		if (players[i].powers[pw_emeralds] & EMERALD1)

  00184	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0018b	b9 04 00 00 00	 mov	 ecx, 4
  00190	6b d1 18	 imul	 edx, ecx, 24
  00193	8b 84 10 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx+56]
  0019a	83 e0 01	 and	 eax, 1
  0019d	74 18		 je	 SHORT $LN27@P_EmeraldM

; 378  : 		{
; 379  : 			numwithemerald++;

  0019f	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  001a5	83 c0 01	 add	 eax, 1
  001a8	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 380  : 			emeraldsspawned |= EMERALD1;

  001ae	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  001b1	83 c8 01	 or	 eax, 1
  001b4	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax
$LN27@P_EmeraldM:

; 381  : 		}
; 382  : 		if (players[i].powers[pw_emeralds] & EMERALD2)

  001b7	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001be	b9 04 00 00 00	 mov	 ecx, 4
  001c3	6b d1 18	 imul	 edx, ecx, 24
  001c6	8b 84 10 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx+56]
  001cd	83 e0 02	 and	 eax, 2
  001d0	74 18		 je	 SHORT $LN28@P_EmeraldM

; 383  : 		{
; 384  : 			numwithemerald++;

  001d2	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  001d8	83 c0 01	 add	 eax, 1
  001db	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 385  : 			emeraldsspawned |= EMERALD2;

  001e1	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  001e4	83 c8 02	 or	 eax, 2
  001e7	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax
$LN28@P_EmeraldM:

; 386  : 		}
; 387  : 		if (players[i].powers[pw_emeralds] & EMERALD3)

  001ea	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001f1	b9 04 00 00 00	 mov	 ecx, 4
  001f6	6b d1 18	 imul	 edx, ecx, 24
  001f9	8b 84 10 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx+56]
  00200	83 e0 04	 and	 eax, 4
  00203	74 18		 je	 SHORT $LN29@P_EmeraldM

; 388  : 		{
; 389  : 			numwithemerald++;

  00205	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  0020b	83 c0 01	 add	 eax, 1
  0020e	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 390  : 			emeraldsspawned |= EMERALD3;

  00214	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  00217	83 c8 04	 or	 eax, 4
  0021a	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax
$LN29@P_EmeraldM:

; 391  : 		}
; 392  : 		if (players[i].powers[pw_emeralds] & EMERALD4)

  0021d	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00224	b9 04 00 00 00	 mov	 ecx, 4
  00229	6b d1 18	 imul	 edx, ecx, 24
  0022c	8b 84 10 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx+56]
  00233	83 e0 08	 and	 eax, 8
  00236	74 18		 je	 SHORT $LN30@P_EmeraldM

; 393  : 		{
; 394  : 			numwithemerald++;

  00238	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  0023e	83 c0 01	 add	 eax, 1
  00241	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 395  : 			emeraldsspawned |= EMERALD4;

  00247	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  0024a	83 c8 08	 or	 eax, 8
  0024d	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax
$LN30@P_EmeraldM:

; 396  : 		}
; 397  : 		if (players[i].powers[pw_emeralds] & EMERALD5)

  00250	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00257	b9 04 00 00 00	 mov	 ecx, 4
  0025c	6b d1 18	 imul	 edx, ecx, 24
  0025f	8b 84 10 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx+56]
  00266	83 e0 10	 and	 eax, 16			; 00000010H
  00269	74 18		 je	 SHORT $LN31@P_EmeraldM

; 398  : 		{
; 399  : 			numwithemerald++;

  0026b	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  00271	83 c0 01	 add	 eax, 1
  00274	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 400  : 			emeraldsspawned |= EMERALD5;

  0027a	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  0027d	83 c8 10	 or	 eax, 16			; 00000010H
  00280	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax
$LN31@P_EmeraldM:

; 401  : 		}
; 402  : 		if (players[i].powers[pw_emeralds] & EMERALD6)

  00283	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0028a	b9 04 00 00 00	 mov	 ecx, 4
  0028f	6b d1 18	 imul	 edx, ecx, 24
  00292	8b 84 10 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx+56]
  00299	83 e0 20	 and	 eax, 32			; 00000020H
  0029c	74 18		 je	 SHORT $LN32@P_EmeraldM

; 403  : 		{
; 404  : 			numwithemerald++;

  0029e	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  002a4	83 c0 01	 add	 eax, 1
  002a7	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 405  : 			emeraldsspawned |= EMERALD6;

  002ad	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  002b0	83 c8 20	 or	 eax, 32			; 00000020H
  002b3	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax
$LN32@P_EmeraldM:

; 406  : 		}
; 407  : 		if (players[i].powers[pw_emeralds] & EMERALD7)

  002b6	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002bd	b9 04 00 00 00	 mov	 ecx, 4
  002c2	6b d1 18	 imul	 edx, ecx, 24
  002c5	8b 84 10 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+edx+56]
  002cc	83 e0 40	 and	 eax, 64			; 00000040H
  002cf	74 18		 je	 SHORT $LN33@P_EmeraldM

; 408  : 		{
; 409  : 			numwithemerald++;

  002d1	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _numwithemerald$[ebp]
  002d7	83 c0 01	 add	 eax, 1
  002da	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _numwithemerald$[ebp], eax

; 410  : 			emeraldsspawned |= EMERALD7;

  002e0	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  002e3	83 c8 40	 or	 eax, 64			; 00000040H
  002e6	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax
$LN33@P_EmeraldM:

; 411  : 		}
; 412  : 	}

  002e9	e9 62 fe ff ff	 jmp	 $LN8@P_EmeraldM
$LN9@P_EmeraldM:

; 413  : 
; 414  : 	// All emeralds spawned, no worries
; 415  : 	if (numwithemerald >= 7)

  002ee	83 bd e0 fe ff
	ff 07		 cmp	 DWORD PTR _numwithemerald$[ebp], 7
  002f5	7c 05		 jl	 SHORT $LN34@P_EmeraldM

; 416  : 		return;

  002f7	e9 1c 02 00 00	 jmp	 $LN12@P_EmeraldM
$LN34@P_EmeraldM:

; 417  : 
; 418  : 	// Set up spawning for the emeralds
; 419  : 	numtospawn = 7 - numwithemerald;

  002fc	b8 07 00 00 00	 mov	 eax, 7
  00301	2b 85 e0 fe ff
	ff		 sub	 eax, DWORD PTR _numwithemerald$[ebp]
  00307	89 45 e8	 mov	 DWORD PTR _numtospawn$[ebp], eax

; 420  : 
; 421  : 	if (numtospawn <= 0) // ???

  0030a	83 7d e8 00	 cmp	 DWORD PTR _numtospawn$[ebp], 0
  0030e	7f 11		 jg	 SHORT $LN35@P_EmeraldM

; 422  : 		I_Error("P_EmeraldManager: numtospawn is %d!\n", numtospawn);

  00310	8b 45 e8	 mov	 eax, DWORD PTR _numtospawn$[ebp]
  00313	50		 push	 eax
  00314	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DDAHKJPF@P_EmeraldManager?3?5numtospawn?5is@
  00319	e8 00 00 00 00	 call	 _I_Error
  0031e	83 c4 08	 add	 esp, 8
$LN35@P_EmeraldM:

; 423  : 
; 424  : 	for (i = 0, j = 0; i < numtospawn; i++)

  00321	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00328	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0032f	eb 09		 jmp	 SHORT $LN13@P_EmeraldM
$LN11@P_EmeraldM:
  00331	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00334	83 c0 01	 add	 eax, 1
  00337	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN13@P_EmeraldM:
  0033a	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0033d	3b 45 e8	 cmp	 eax, DWORD PTR _numtospawn$[ebp]
  00340	0f 8d d2 01 00
	00		 jge	 $LN12@P_EmeraldM

; 425  : 	{
; 426  : 		INT32 tries = 0;

  00346	c7 85 d8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _tries$1[ebp], 0
$LN14@P_EmeraldM:

; 427  : 		while (true)

  00350	b8 01 00 00 00	 mov	 eax, 1
  00355	85 c0		 test	 eax, eax
  00357	0f 84 b6 01 00
	00		 je	 $LN15@P_EmeraldM

; 428  : 		{
; 429  : 			tries++;

  0035d	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _tries$1[ebp]
  00363	83 c0 01	 add	 eax, 1
  00366	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _tries$1[ebp], eax

; 430  : 
; 431  : 			if (tries > 50)

  0036c	83 bd d8 fd ff
	ff 32		 cmp	 DWORD PTR _tries$1[ebp], 50 ; 00000032H
  00373	7e 05		 jle	 SHORT $LN36@P_EmeraldM

; 432  : 				break;

  00375	e9 99 01 00 00	 jmp	 $LN15@P_EmeraldM
$LN36@P_EmeraldM:

; 433  : 
; 434  : 			j = P_Random() % numspawnpoints;

  0037a	e8 00 00 00 00	 call	 _P_Random
  0037f	0f b6 c0	 movzx	 eax, al
  00382	99		 cdq
  00383	f7 bd dc fd ff
	ff		 idiv	 DWORD PTR _numspawnpoints$[ebp]
  00389	89 55 ec	 mov	 DWORD PTR _j$[ebp], edx

; 435  : 
; 436  : 			if (hasemerald[j])

  0038c	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  0038f	83 bc 85 e4 fe
	ff ff 00	 cmp	 DWORD PTR _hasemerald$[ebp+eax*4], 0
  00397	74 02		 je	 SHORT $LN37@P_EmeraldM

; 437  : 				continue;

  00399	eb b5		 jmp	 SHORT $LN14@P_EmeraldM
$LN37@P_EmeraldM:

; 438  : 
; 439  : 			hasemerald[j] = true;

  0039b	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  0039e	c7 84 85 e4 fe
	ff ff 01 00 00
	00		 mov	 DWORD PTR _hasemerald$[ebp+eax*4], 1

; 440  : 
; 441  : 			if (!(emeraldsspawned & EMERALD1))

  003a9	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  003ac	83 e0 01	 and	 eax, 1
  003af	75 22		 jne	 SHORT $LN38@P_EmeraldM

; 442  : 			{
; 443  : 				spawnpoints[j]->reactiontime = MT_EMERALD1;

  003b1	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  003b4	8b 8c 85 e0 fd
	ff ff		 mov	 ecx, DWORD PTR _spawnpoints$[ebp+eax*4]
  003bb	c7 81 9c 00 00
	00 37 00 00 00	 mov	 DWORD PTR [ecx+156], 55	; 00000037H

; 444  : 				emeraldsspawned |= EMERALD1;

  003c5	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  003c8	83 c8 01	 or	 eax, 1
  003cb	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax

; 445  : 			}

  003ce	e9 f2 00 00 00	 jmp	 $LN51@P_EmeraldM
$LN38@P_EmeraldM:

; 446  : 			else if (!(emeraldsspawned & EMERALD2))

  003d3	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  003d6	83 e0 02	 and	 eax, 2
  003d9	75 22		 jne	 SHORT $LN40@P_EmeraldM

; 447  : 			{
; 448  : 				spawnpoints[j]->reactiontime = MT_EMERALD2;

  003db	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  003de	8b 8c 85 e0 fd
	ff ff		 mov	 ecx, DWORD PTR _spawnpoints$[ebp+eax*4]
  003e5	c7 81 9c 00 00
	00 38 00 00 00	 mov	 DWORD PTR [ecx+156], 56	; 00000038H

; 449  : 				emeraldsspawned |= EMERALD2;

  003ef	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  003f2	83 c8 02	 or	 eax, 2
  003f5	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax

; 450  : 			}

  003f8	e9 c8 00 00 00	 jmp	 $LN51@P_EmeraldM
$LN40@P_EmeraldM:

; 451  : 			else if (!(emeraldsspawned & EMERALD3))

  003fd	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  00400	83 e0 04	 and	 eax, 4
  00403	75 22		 jne	 SHORT $LN42@P_EmeraldM

; 452  : 			{
; 453  : 				spawnpoints[j]->reactiontime = MT_EMERALD3;

  00405	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00408	8b 8c 85 e0 fd
	ff ff		 mov	 ecx, DWORD PTR _spawnpoints$[ebp+eax*4]
  0040f	c7 81 9c 00 00
	00 39 00 00 00	 mov	 DWORD PTR [ecx+156], 57	; 00000039H

; 454  : 				emeraldsspawned |= EMERALD3;

  00419	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  0041c	83 c8 04	 or	 eax, 4
  0041f	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax

; 455  : 			}

  00422	e9 9e 00 00 00	 jmp	 $LN51@P_EmeraldM
$LN42@P_EmeraldM:

; 456  : 			else if (!(emeraldsspawned & EMERALD4))

  00427	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  0042a	83 e0 08	 and	 eax, 8
  0042d	75 1f		 jne	 SHORT $LN44@P_EmeraldM

; 457  : 			{
; 458  : 				spawnpoints[j]->reactiontime = MT_EMERALD4;

  0042f	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00432	8b 8c 85 e0 fd
	ff ff		 mov	 ecx, DWORD PTR _spawnpoints$[ebp+eax*4]
  00439	c7 81 9c 00 00
	00 3a 00 00 00	 mov	 DWORD PTR [ecx+156], 58	; 0000003aH

; 459  : 				emeraldsspawned |= EMERALD4;

  00443	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  00446	83 c8 08	 or	 eax, 8
  00449	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax

; 460  : 			}

  0044c	eb 77		 jmp	 SHORT $LN51@P_EmeraldM
$LN44@P_EmeraldM:

; 461  : 			else if (!(emeraldsspawned & EMERALD5))

  0044e	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  00451	83 e0 10	 and	 eax, 16			; 00000010H
  00454	75 1f		 jne	 SHORT $LN46@P_EmeraldM

; 462  : 			{
; 463  : 				spawnpoints[j]->reactiontime = MT_EMERALD5;

  00456	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00459	8b 8c 85 e0 fd
	ff ff		 mov	 ecx, DWORD PTR _spawnpoints$[ebp+eax*4]
  00460	c7 81 9c 00 00
	00 3b 00 00 00	 mov	 DWORD PTR [ecx+156], 59	; 0000003bH

; 464  : 				emeraldsspawned |= EMERALD5;

  0046a	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  0046d	83 c8 10	 or	 eax, 16			; 00000010H
  00470	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax

; 465  : 			}

  00473	eb 50		 jmp	 SHORT $LN51@P_EmeraldM
$LN46@P_EmeraldM:

; 466  : 			else if (!(emeraldsspawned & EMERALD6))

  00475	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  00478	83 e0 20	 and	 eax, 32			; 00000020H
  0047b	75 1f		 jne	 SHORT $LN48@P_EmeraldM

; 467  : 			{
; 468  : 				spawnpoints[j]->reactiontime = MT_EMERALD6;

  0047d	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00480	8b 8c 85 e0 fd
	ff ff		 mov	 ecx, DWORD PTR _spawnpoints$[ebp+eax*4]
  00487	c7 81 9c 00 00
	00 3c 00 00 00	 mov	 DWORD PTR [ecx+156], 60	; 0000003cH

; 469  : 				emeraldsspawned |= EMERALD6;

  00491	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  00494	83 c8 20	 or	 eax, 32			; 00000020H
  00497	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax

; 470  : 			}

  0049a	eb 29		 jmp	 SHORT $LN51@P_EmeraldM
$LN48@P_EmeraldM:

; 471  : 			else if (!(emeraldsspawned & EMERALD7))

  0049c	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  0049f	83 e0 40	 and	 eax, 64			; 00000040H
  004a2	75 1f		 jne	 SHORT $LN50@P_EmeraldM

; 472  : 			{
; 473  : 				spawnpoints[j]->reactiontime = MT_EMERALD7;

  004a4	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  004a7	8b 8c 85 e0 fd
	ff ff		 mov	 ecx, DWORD PTR _spawnpoints$[ebp+eax*4]
  004ae	c7 81 9c 00 00
	00 3d 00 00 00	 mov	 DWORD PTR [ecx+156], 61	; 0000003dH

; 474  : 				emeraldsspawned |= EMERALD7;

  004b8	8b 45 e4	 mov	 eax, DWORD PTR _emeraldsspawned$[ebp]
  004bb	83 c8 40	 or	 eax, 64			; 00000040H
  004be	89 45 e4	 mov	 DWORD PTR _emeraldsspawned$[ebp], eax

; 475  : 			}

  004c1	eb 02		 jmp	 SHORT $LN51@P_EmeraldM
$LN50@P_EmeraldM:

; 476  : 			else
; 477  : 				break;

  004c3	eb 4e		 jmp	 SHORT $LN15@P_EmeraldM
$LN51@P_EmeraldM:

; 478  : 
; 479  : 			if (leveltime < TICRATE) // Start of map

  004c5	83 3d 00 00 00
	00 23		 cmp	 DWORD PTR _leveltime, 35 ; 00000023H
  004cc	73 23		 jae	 SHORT $LN52@P_EmeraldM

; 480  : 				spawnpoints[j]->threshold = 60*TICRATE + P_Random() * (TICRATE/5);

  004ce	e8 00 00 00 00	 call	 _P_Random
  004d3	0f b6 c0	 movzx	 eax, al
  004d6	6b c8 07	 imul	 ecx, eax, 7
  004d9	81 c1 34 08 00
	00		 add	 ecx, 2100		; 00000834H
  004df	8b 55 ec	 mov	 edx, DWORD PTR _j$[ebp]
  004e2	8b 84 95 e0 fd
	ff ff		 mov	 eax, DWORD PTR _spawnpoints$[ebp+edx*4]
  004e9	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx
  004ef	eb 1b		 jmp	 SHORT $LN53@P_EmeraldM
$LN52@P_EmeraldM:

; 481  : 			else
; 482  : 				spawnpoints[j]->threshold = P_Random() * (TICRATE/5);

  004f1	e8 00 00 00 00	 call	 _P_Random
  004f6	0f b6 c0	 movzx	 eax, al
  004f9	6b c8 07	 imul	 ecx, eax, 7
  004fc	8b 55 ec	 mov	 edx, DWORD PTR _j$[ebp]
  004ff	8b 84 95 e0 fd
	ff ff		 mov	 eax, DWORD PTR _spawnpoints$[ebp+edx*4]
  00506	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx
$LN53@P_EmeraldM:

; 483  : 
; 484  : 			break;

  0050c	eb 05		 jmp	 SHORT $LN15@P_EmeraldM

; 485  : 		}

  0050e	e9 3d fe ff ff	 jmp	 $LN14@P_EmeraldM
$LN15@P_EmeraldM:

; 486  : 	}

  00513	e9 19 fe ff ff	 jmp	 $LN11@P_EmeraldM
$LN12@P_EmeraldM:

; 487  : }

  00518	5f		 pop	 edi
  00519	5e		 pop	 esi
  0051a	5b		 pop	 ebx
  0051b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0051e	33 cd		 xor	 ecx, ebp
  00520	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00525	8b e5		 mov	 esp, ebp
  00527	5d		 pop	 ebp
  00528	c3		 ret	 0
_P_EmeraldManager ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_XYMovement
_TEXT	SEGMENT
tv568 = -116						; size = 4
_ns$1 = -48						; size = 4
_fa$2 = -44						; size = 4
_rover$3 = -40						; size = 4
_node$4 = -36						; size = 4
_moved$ = -32						; size = 4
_oldy$ = -28						; size = 4
_oldx$ = -24						; size = 4
_ymove$ = -20						; size = 4
_xmove$ = -16						; size = 4
_player$ = -12						; size = 4
_ptryy$ = -8						; size = 4
_ptryx$ = -4						; size = 4
_mo$ = 8						; size = 4
_P_XYMovement PROC					; COMDAT

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 820  : 	fixed_t ptryx, ptryy;
; 821  : 	player_t *player;
; 822  : 	fixed_t xmove, ymove;
; 823  : 	fixed_t oldx, oldy; // reducing bobbing/momentum on ice when up against walls
; 824  : 	boolean moved;
; 825  : 
; 826  : 	moved = true;

  00009	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 1

; 827  : 
; 828  : 	// Death pit check against non-player mobjs.
; 829  : 	// todo: Said object could be vertically flipped over a death pit, and the game will remove it.
; 830  : 	//       Add support for floor and ceiling specific death pits to avoid confusion.
; 831  : 	if (((mo->z <= mo->subsector->sector->floorheight && !(mo->eflags & MFE_VERTICALFLIP))
; 832  : 		|| (mo->z + mo->height >= mo->subsector->sector->ceilingheight && (mo->eflags & MFE_VERTICALFLIP)))
; 833  : 		&& (GETSECSPECIAL(mo->subsector->sector->special, 1) == 6

  00010	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00013	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0001b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001e	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00020	7f 0e		 jg	 SHORT $LN13@P_XYMoveme
  00022	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00025	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0002b	83 e1 20	 and	 ecx, 32			; 00000020H
  0002e	74 2f		 je	 SHORT $LN12@P_XYMoveme
$LN13@P_XYMoveme:
  00030	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00033	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00036	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00039	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0003f	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  00042	8b 02		 mov	 eax, DWORD PTR [edx]
  00044	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00047	0f 8c aa 01 00
	00		 jl	 $LN22@P_XYMoveme
  0004d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00050	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00056	83 e1 20	 and	 ecx, 32			; 00000020H
  00059	0f 84 98 01 00
	00		 je	 $LN22@P_XYMoveme
$LN12@P_XYMoveme:
  0005f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00062	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00065	8b 11		 mov	 edx, DWORD PTR [ecx]
  00067	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  0006b	83 e0 0f	 and	 eax, 15			; 0000000fH
  0006e	83 f8 06	 cmp	 eax, 6
  00071	74 18		 je	 SHORT $LN14@P_XYMoveme
  00073	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00076	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00079	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007b	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  0007f	83 e0 0f	 and	 eax, 15			; 0000000fH
  00082	83 f8 07	 cmp	 eax, 7
  00085	0f 85 6c 01 00
	00		 jne	 $LN22@P_XYMoveme
$LN14@P_XYMoveme:

; 834  : 		|| GETSECSPECIAL(mo->subsector->sector->special, 1) == 7))
; 835  : 	{
; 836  : 		if ((mo->type == MT_FLINGRING
; 837  : 			|| mo->type == MT_FLINGCOIN
; 838  : 	#ifdef BLUE_SPHERES
; 839  : 			|| mo->type == MT_FLINGBALL
; 840  : 	#endif
; 841  : 			|| mo->type == MT_FALLINGROCK
; 842  : 			|| mo->type == MT_BIGTUMBLEWEED
; 843  : 			|| mo->type == MT_LITTLETUMBLEWEED
; 844  : 			|| ((mo->type == MT_BOUNCERING

  0008b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0008e	83 78 7c 2c	 cmp	 DWORD PTR [eax+124], 44	; 0000002cH
  00092	0f 84 ef 00 00
	00		 je	 $LN17@P_XYMoveme
  00098	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0009b	81 78 7c e2 00
	00 00		 cmp	 DWORD PTR [eax+124], 226 ; 000000e2H
  000a2	0f 84 df 00 00
	00		 je	 $LN17@P_XYMoveme
  000a8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000ab	81 78 7c 1b 01
	00 00		 cmp	 DWORD PTR [eax+124], 283 ; 0000011bH
  000b2	0f 84 cf 00 00
	00		 je	 $LN17@P_XYMoveme
  000b8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000bb	81 78 7c 8f 00
	00 00		 cmp	 DWORD PTR [eax+124], 143 ; 0000008fH
  000c2	0f 84 bf 00 00
	00		 je	 $LN17@P_XYMoveme
  000c8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000cb	81 78 7c 90 00
	00 00		 cmp	 DWORD PTR [eax+124], 144 ; 00000090H
  000d2	0f 84 af 00 00
	00		 je	 $LN17@P_XYMoveme
  000d8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000db	81 78 7c d0 00
	00 00		 cmp	 DWORD PTR [eax+124], 208 ; 000000d0H
  000e2	0f 84 91 00 00
	00		 je	 $LN18@P_XYMoveme
  000e8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000eb	81 78 7c d1 00
	00 00		 cmp	 DWORD PTR [eax+124], 209 ; 000000d1H
  000f2	0f 84 81 00 00
	00		 je	 $LN18@P_XYMoveme
  000f8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  000fb	81 78 7c d2 00
	00 00		 cmp	 DWORD PTR [eax+124], 210 ; 000000d2H
  00102	74 75		 je	 SHORT $LN18@P_XYMoveme
  00104	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00107	81 78 7c d3 00
	00 00		 cmp	 DWORD PTR [eax+124], 211 ; 000000d3H
  0010e	74 69		 je	 SHORT $LN18@P_XYMoveme
  00110	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00113	81 78 7c d4 00
	00 00		 cmp	 DWORD PTR [eax+124], 212 ; 000000d4H
  0011a	74 5d		 je	 SHORT $LN18@P_XYMoveme
  0011c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0011f	81 78 7c d5 00
	00 00		 cmp	 DWORD PTR [eax+124], 213 ; 000000d5H
  00126	74 51		 je	 SHORT $LN18@P_XYMoveme
  00128	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0012b	81 78 7c d6 00
	00 00		 cmp	 DWORD PTR [eax+124], 214 ; 000000d6H
  00132	74 45		 je	 SHORT $LN18@P_XYMoveme
  00134	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00137	81 78 7c d7 00
	00 00		 cmp	 DWORD PTR [eax+124], 215 ; 000000d7H
  0013e	74 39		 je	 SHORT $LN18@P_XYMoveme
  00140	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00143	81 78 7c d8 00
	00 00		 cmp	 DWORD PTR [eax+124], 216 ; 000000d8H
  0014a	74 2d		 je	 SHORT $LN18@P_XYMoveme
  0014c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0014f	83 78 7c 40	 cmp	 DWORD PTR [eax+124], 64	; 00000040H
  00153	74 24		 je	 SHORT $LN18@P_XYMoveme
  00155	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00158	81 78 7c d9 00
	00 00		 cmp	 DWORD PTR [eax+124], 217 ; 000000d9H
  0015f	74 18		 je	 SHORT $LN18@P_XYMoveme
  00161	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00164	81 78 7c da 00
	00 00		 cmp	 DWORD PTR [eax+124], 218 ; 000000daH
  0016b	74 0c		 je	 SHORT $LN18@P_XYMoveme
  0016d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00170	81 78 7c db 00
	00 00		 cmp	 DWORD PTR [eax+124], 219 ; 000000dbH
  00177	75 1d		 jne	 SHORT $LN15@P_XYMoveme
$LN18@P_XYMoveme:
  00179	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0017c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00182	83 e1 04	 and	 ecx, 4
  00185	74 0f		 je	 SHORT $LN15@P_XYMoveme
$LN17@P_XYMoveme:

; 845  : 			|| mo->type == MT_RAILRING
; 846  : 			|| mo->type == MT_AUTOMATICRING
; 847  : 			|| mo->type == MT_EXPLOSIONRING
; 848  : 			|| mo->type == MT_SCATTERRING
; 849  : 			|| mo->type == MT_GRENADERING
; 850  : 			|| mo->type == MT_BOUNCEPICKUP
; 851  : 			|| mo->type == MT_RAILPICKUP
; 852  : 			|| mo->type == MT_AUTOPICKUP
; 853  : 			|| mo->type == MT_FLINGEMERALD
; 854  : 			|| mo->type == MT_EXPLODEPICKUP
; 855  : 			|| mo->type == MT_SCATTERPICKUP
; 856  : 			|| mo->type == MT_GRENADEPICKUP) && mo->flags2 & MF2_DONTRESPAWN)))
; 857  : 		{
; 858  : 			mo->fuse = 1; // Remove flingrings if in death pit.

  00187	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0018a	c7 80 bc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+188], 1

; 859  : 		}

  00194	eb 61		 jmp	 SHORT $LN22@P_XYMoveme
$LN15@P_XYMoveme:

; 860  : 		else if ((mo->type == MT_REDFLAG || mo->type == MT_BLUEFLAG || (mo->flags & MF_PUSHABLE)))

  00196	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00199	83 78 7c 34	 cmp	 DWORD PTR [eax+124], 52	; 00000034H
  0019d	74 14		 je	 SHORT $LN21@P_XYMoveme
  0019f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001a2	83 78 7c 35	 cmp	 DWORD PTR [eax+124], 53	; 00000035H
  001a6	74 0b		 je	 SHORT $LN21@P_XYMoveme
  001a8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001ab	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001ae	83 e1 40	 and	 ecx, 64			; 00000040H
  001b1	74 0f		 je	 SHORT $LN19@P_XYMoveme
$LN21@P_XYMoveme:

; 861  : 		{
; 862  : 			// Remove CTF flag if in death pit
; 863  : 			mo->fuse = 1;

  001b3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001b6	c7 80 bc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+188], 1

; 864  : 		}

  001c0	eb 35		 jmp	 SHORT $LN22@P_XYMoveme
$LN19@P_XYMoveme:

; 865  : 		else if ((mo->flags & MF_ENEMY || mo->flags & MF_BOSS))

  001c2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001c5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001c8	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  001ce	75 0e		 jne	 SHORT $LN23@P_XYMoveme
  001d0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001d3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001d6	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  001dc	74 19		 je	 SHORT $LN22@P_XYMoveme
$LN23@P_XYMoveme:

; 866  : 		{
; 867  : 			// Kill enemies and bosses that fall into death pits.
; 868  : 			P_SetMobjState(mo, mo->info->deathstate);

  001de	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001e1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001e7	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001ea	52		 push	 edx
  001eb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 _P_SetMobjState
  001f4	83 c4 08	 add	 esp, 8
$LN22@P_XYMoveme:

; 869  : 		}
; 870  : 	}
; 871  : 
; 872  : 	// if it's stopped
; 873  : 	if (!mo->momx && !mo->momy)

  001f7	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  001fa	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  001fe	75 77		 jne	 SHORT $LN25@P_XYMoveme
  00200	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00203	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00207	75 6e		 jne	 SHORT $LN25@P_XYMoveme

; 874  : 	{
; 875  : 		if (mo->flags2 & MF2_SKULLFLY)

  00209	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0020c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00212	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00218	74 5d		 je	 SHORT $LN25@P_XYMoveme

; 876  : 		{
; 877  : 			// the skull slammed into something
; 878  : 			mo->flags2 &= ~MF2_SKULLFLY;

  0021a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0021d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00223	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  00229	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0022c	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 879  : 			mo->momx = mo->momy = mo->momz = 0;

  00232	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00235	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  0023c	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0023f	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00246	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00249	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 880  : 
; 881  : 			// set in 'search new direction' state?
; 882  : 			if (mo->type != MT_EGGMOBILE)

  00250	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00253	83 78 7c 1d	 cmp	 DWORD PTR [eax+124], 29	; 0000001dH
  00257	74 19		 je	 SHORT $LN26@P_XYMoveme

; 883  : 				P_SetMobjState(mo, mo->info->spawnstate);

  00259	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0025c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00262	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00265	52		 push	 edx
  00266	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 _P_SetMobjState
  0026f	83 c4 08	 add	 esp, 8
$LN26@P_XYMoveme:

; 884  : 
; 885  : 			return;

  00272	e9 fa 0a 00 00	 jmp	 $LN1@P_XYMoveme
$LN25@P_XYMoveme:

; 886  : 		}
; 887  : 	}
; 888  : 
; 889  : 	player = mo->player; //valid only if player avatar

  00277	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0027a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00280	89 4d f4	 mov	 DWORD PTR _player$[ebp], ecx

; 890  : 
; 891  : 	P_CheckMobjSpeed(mo);

  00283	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 _P_CheckMobjSpeed
  0028c	83 c4 04	 add	 esp, 4

; 892  : 
; 893  : 	xmove = mo->momx;

  0028f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00292	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00295	89 4d f0	 mov	 DWORD PTR _xmove$[ebp], ecx

; 894  : 	ymove = mo->momy;

  00298	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0029b	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0029e	89 4d ec	 mov	 DWORD PTR _ymove$[ebp], ecx

; 895  : 
; 896  : 	oldx = mo->x;

  002a1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002a4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002a7	89 4d e8	 mov	 DWORD PTR _oldx$[ebp], ecx

; 897  : 	oldy = mo->y;

  002aa	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002ad	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002b0	89 4d e4	 mov	 DWORD PTR _oldy$[ebp], ecx

; 898  : 
; 899  : 	// Pushables can break some blocks
; 900  : 	if (CheckForBustableBlocks && (mo->flags & MF_PUSHABLE) && !(netgame && mo->player && mo->player->spectator))

  002b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CheckForBustableBlocks, 0
  002ba	0f 84 b0 02 00
	00		 je	 $LN27@P_XYMoveme
  002c0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002c3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002c6	83 e1 40	 and	 ecx, 64			; 00000040H
  002c9	0f 84 a1 02 00
	00		 je	 $LN27@P_XYMoveme
  002cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  002d6	74 24		 je	 SHORT $LN28@P_XYMoveme
  002d8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002db	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  002e2	74 18		 je	 SHORT $LN28@P_XYMoveme
  002e4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002e7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002ed	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  002f4	85 d2		 test	 edx, edx
  002f6	0f 85 74 02 00
	00		 jne	 $LN27@P_XYMoveme
$LN28@P_XYMoveme:

; 901  : 	{
; 902  : 		msecnode_t *node;
; 903  : 		P_UnsetThingPosition(mo);

  002fc	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  002ff	50		 push	 eax
  00300	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00305	83 c4 04	 add	 esp, 4

; 904  : 		mo->x += xmove;

  00308	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0030b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0030e	03 4d f0	 add	 ecx, DWORD PTR _xmove$[ebp]
  00311	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00314	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 905  : 		mo->y += ymove;

  00317	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0031a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0031d	03 4d ec	 add	 ecx, DWORD PTR _ymove$[ebp]
  00320	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00323	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 906  : 		P_SetThingPosition(mo);

  00326	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 _P_SetThingPosition
  0032f	83 c4 04	 add	 esp, 4

; 907  : 
; 908  : 		for (node = mo->touching_sectorlist; node; node = node->m_snext)

  00332	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00335	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00338	89 4d dc	 mov	 DWORD PTR _node$4[ebp], ecx
  0033b	eb 09		 jmp	 SHORT $LN4@P_XYMoveme
$LN2@P_XYMoveme:
  0033d	8b 45 dc	 mov	 eax, DWORD PTR _node$4[ebp]
  00340	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00343	89 4d dc	 mov	 DWORD PTR _node$4[ebp], ecx
$LN4@P_XYMoveme:
  00346	83 7d dc 00	 cmp	 DWORD PTR _node$4[ebp], 0
  0034a	0f 84 f6 01 00
	00		 je	 $bustupdone$104

; 909  : 		{
; 910  : 			if (!node->m_sector)

  00350	8b 45 dc	 mov	 eax, DWORD PTR _node$4[ebp]
  00353	83 38 00	 cmp	 DWORD PTR [eax], 0
  00356	75 05		 jne	 SHORT $LN29@P_XYMoveme

; 911  : 				break;

  00358	e9 e9 01 00 00	 jmp	 $bustupdone$104
$LN29@P_XYMoveme:

; 912  : 
; 913  : 			if (node->m_sector->ffloors)

  0035d	8b 45 dc	 mov	 eax, DWORD PTR _node$4[ebp]
  00360	8b 08		 mov	 ecx, DWORD PTR [eax]
  00362	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  00369	0f 84 d2 01 00
	00		 je	 $LN6@P_XYMoveme

; 914  : 			{
; 915  : 				ffloor_t *rover;
; 916  : 
; 917  : 				for (rover = node->m_sector->ffloors; rover; rover = rover->next)

  0036f	8b 45 dc	 mov	 eax, DWORD PTR _node$4[ebp]
  00372	8b 08		 mov	 ecx, DWORD PTR [eax]
  00374	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0037a	89 55 d8	 mov	 DWORD PTR _rover$3[ebp], edx
  0037d	eb 09		 jmp	 SHORT $LN7@P_XYMoveme
$LN5@P_XYMoveme:
  0037f	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00382	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00385	89 4d d8	 mov	 DWORD PTR _rover$3[ebp], ecx
$LN7@P_XYMoveme:
  00388	83 7d d8 00	 cmp	 DWORD PTR _rover$3[ebp], 0
  0038c	0f 84 af 01 00
	00		 je	 $LN6@P_XYMoveme

; 918  : 				{
; 919  : 					if (!(rover->flags & FF_EXISTS)) continue;

  00392	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00395	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00398	83 e1 01	 and	 ecx, 1
  0039b	75 02		 jne	 SHORT $LN31@P_XYMoveme
  0039d	eb e0		 jmp	 SHORT $LN5@P_XYMoveme
$LN31@P_XYMoveme:

; 920  : 
; 921  : 					if (!(rover->flags & FF_BUSTUP)) continue;

  0039f	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  003a2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  003a5	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  003ab	75 02		 jne	 SHORT $LN32@P_XYMoveme
  003ad	eb d0		 jmp	 SHORT $LN5@P_XYMoveme
$LN32@P_XYMoveme:

; 922  : 
; 923  : 					// Needs ML_EFFECT4 flag for pushables to break it
; 924  : 					if (!(rover->master->flags & ML_EFFECT4)) continue;

  003af	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  003b2	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  003b5	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  003b9	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  003bf	75 02		 jne	 SHORT $LN33@P_XYMoveme
  003c1	eb bc		 jmp	 SHORT $LN5@P_XYMoveme
$LN33@P_XYMoveme:

; 925  : 
; 926  : 					if (!rover->master->frontsector->crumblestate)

  003c3	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  003c6	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  003c9	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  003cc	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  003d0	0f 85 66 01 00
	00		 jne	 $LN34@P_XYMoveme

; 927  : 					{
; 928  : 						// Height checks
; 929  : 						if (rover->flags & FF_SHATTERBOTTOM)

  003d6	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  003d9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  003dc	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  003e2	74 41		 je	 SHORT $LN35@P_XYMoveme

; 930  : 						{
; 931  : 							if (mo->z+mo->momz + mo->height < *rover->bottomheight)

  003e4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003ea	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  003ed	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  003f0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  003f3	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  003f6	8b 55 d8	 mov	 edx, DWORD PTR _rover$3[ebp]
  003f9	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  003fc	3b 08		 cmp	 ecx, DWORD PTR [eax]
  003fe	7d 05		 jge	 SHORT $LN37@P_XYMoveme

; 932  : 								continue;

  00400	e9 7a ff ff ff	 jmp	 $LN5@P_XYMoveme
$LN37@P_XYMoveme:

; 933  : 
; 934  : 							if (mo->z+mo->height > *rover->bottomheight)

  00405	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00408	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0040b	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0040e	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00411	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00414	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00417	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00419	7e 05		 jle	 SHORT $LN38@P_XYMoveme

; 935  : 								continue;

  0041b	e9 5f ff ff ff	 jmp	 $LN5@P_XYMoveme
$LN38@P_XYMoveme:

; 936  : 						}

  00420	e9 bf 00 00 00	 jmp	 $LN48@P_XYMoveme
$LN35@P_XYMoveme:

; 937  : 						else if (rover->flags & FF_SPINBUST)

  00425	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00428	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0042b	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  00431	74 37		 je	 SHORT $LN39@P_XYMoveme

; 938  : 						{
; 939  : 							if (mo->z+mo->momz > *rover->topheight)

  00433	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00436	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00439	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0043c	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  0043f	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00442	8b 10		 mov	 edx, DWORD PTR [eax]
  00444	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00446	7e 05		 jle	 SHORT $LN41@P_XYMoveme

; 940  : 								continue;

  00448	e9 32 ff ff ff	 jmp	 $LN5@P_XYMoveme
$LN41@P_XYMoveme:

; 941  : 
; 942  : 							if (mo->z+mo->height < *rover->bottomheight)

  0044d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00450	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00453	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00456	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00459	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  0045c	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0045f	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00461	7d 05		 jge	 SHORT $LN42@P_XYMoveme

; 943  : 								continue;

  00463	e9 17 ff ff ff	 jmp	 $LN5@P_XYMoveme
$LN42@P_XYMoveme:

; 944  : 						}

  00468	eb 7a		 jmp	 SHORT $LN48@P_XYMoveme
$LN39@P_XYMoveme:

; 945  : 						else if (rover->flags & FF_SHATTER)

  0046a	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  0046d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00470	81 e1 00 00 00
	08		 and	 ecx, 134217728		; 08000000H
  00476	74 3d		 je	 SHORT $LN43@P_XYMoveme

; 946  : 						{
; 947  : 							if (mo->z+mo->momz > *rover->topheight)

  00478	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0047b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0047e	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00481	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  00484	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00487	8b 10		 mov	 edx, DWORD PTR [eax]
  00489	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0048b	7e 05		 jle	 SHORT $LN45@P_XYMoveme

; 948  : 								continue;

  0048d	e9 ed fe ff ff	 jmp	 $LN5@P_XYMoveme
$LN45@P_XYMoveme:

; 949  : 
; 950  : 							if (mo->z+mo->momz + mo->height < *rover->bottomheight)

  00492	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00495	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00498	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0049b	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  0049e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004a1	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  004a4	8b 55 d8	 mov	 edx, DWORD PTR _rover$3[ebp]
  004a7	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  004aa	3b 08		 cmp	 ecx, DWORD PTR [eax]
  004ac	7d 05		 jge	 SHORT $LN46@P_XYMoveme

; 951  : 								continue;

  004ae	e9 cc fe ff ff	 jmp	 $LN5@P_XYMoveme
$LN46@P_XYMoveme:

; 952  : 						}

  004b3	eb 2f		 jmp	 SHORT $LN48@P_XYMoveme
$LN43@P_XYMoveme:

; 953  : 						else
; 954  : 						{
; 955  : 							if (mo->z >= *rover->topheight)

  004b5	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  004b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ba	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  004bd	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  004c0	3b 01		 cmp	 eax, DWORD PTR [ecx]
  004c2	7c 05		 jl	 SHORT $LN47@P_XYMoveme

; 956  : 								continue;

  004c4	e9 b6 fe ff ff	 jmp	 $LN5@P_XYMoveme
$LN47@P_XYMoveme:

; 957  : 
; 958  : 							if (mo->z+mo->height < *rover->bottomheight)

  004c9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  004cc	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004cf	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  004d2	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  004d5	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  004d8	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  004db	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  004dd	7d 05		 jge	 SHORT $LN48@P_XYMoveme

; 959  : 								continue;

  004df	e9 9b fe ff ff	 jmp	 $LN5@P_XYMoveme
$LN48@P_XYMoveme:

; 960  : 						}
; 961  : 
; 962  : 						EV_CrumbleChain(node->m_sector, rover);

  004e4	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  004e7	50		 push	 eax
  004e8	8b 4d dc	 mov	 ecx, DWORD PTR _node$4[ebp]
  004eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  004ed	52		 push	 edx
  004ee	e8 00 00 00 00	 call	 _EV_CrumbleChain
  004f3	83 c4 08	 add	 esp, 8

; 963  : 
; 964  : 						// Run a linedef executor??
; 965  : 						if (rover->master->flags & ML_EFFECT5)

  004f6	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  004f9	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  004fc	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00500	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00506	74 32		 je	 SHORT $LN49@P_XYMoveme

; 966  : 							P_LinedefExecute(P_AproxDistance(rover->master->dx, rover->master->dy)>>FRACBITS, mo, node->m_sector);

  00508	8b 45 dc	 mov	 eax, DWORD PTR _node$4[ebp]
  0050b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0050d	51		 push	 ecx
  0050e	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00511	52		 push	 edx
  00512	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  00515	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00518	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0051b	52		 push	 edx
  0051c	8b 45 d8	 mov	 eax, DWORD PTR _rover$3[ebp]
  0051f	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00522	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00525	52		 push	 edx
  00526	e8 00 00 00 00	 call	 _P_AproxDistance
  0052b	83 c4 08	 add	 esp, 8
  0052e	c1 f8 10	 sar	 eax, 16			; 00000010H
  00531	50		 push	 eax
  00532	e8 00 00 00 00	 call	 _P_LinedefExecute
  00537	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN49@P_XYMoveme:

; 967  : 
; 968  : 						goto bustupdone;

  0053a	eb 0a		 jmp	 SHORT $bustupdone$104
$LN34@P_XYMoveme:

; 969  : 					}
; 970  : 				}

  0053c	e9 3e fe ff ff	 jmp	 $LN5@P_XYMoveme
$LN6@P_XYMoveme:

; 971  : 			}
; 972  : 		}

  00541	e9 f7 fd ff ff	 jmp	 $LN2@P_XYMoveme
$bustupdone$104:

; 973  : bustupdone:
; 974  : 		P_UnsetThingPosition(mo);

  00546	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00549	50		 push	 eax
  0054a	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  0054f	83 c4 04	 add	 esp, 4

; 975  : 		mo->x = oldx;

  00552	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00555	8b 4d e8	 mov	 ecx, DWORD PTR _oldx$[ebp]
  00558	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 976  : 		mo->y = oldy;

  0055b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0055e	8b 4d e4	 mov	 ecx, DWORD PTR _oldy$[ebp]
  00561	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 977  : 		P_SetThingPosition(mo);

  00564	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00567	50		 push	 eax
  00568	e8 00 00 00 00	 call	 _P_SetThingPosition
  0056d	83 c4 04	 add	 esp, 4
$LN27@P_XYMoveme:

; 978  : 	}
; 979  : 
; 980  : 	do
; 981  : 	{
; 982  : 		if (xmove > MAXMOVE/2 || ymove > MAXMOVE/2)

  00570	81 7d f0 00 00
	1e 00		 cmp	 DWORD PTR _xmove$[ebp], 1966080 ; 001e0000H
  00577	7f 09		 jg	 SHORT $LN52@P_XYMoveme
  00579	81 7d ec 00 00
	1e 00		 cmp	 DWORD PTR _ymove$[ebp], 1966080 ; 001e0000H
  00580	7e 34		 jle	 SHORT $LN50@P_XYMoveme
$LN52@P_XYMoveme:

; 983  : 		{
; 984  : 			ptryx = mo->x + xmove/2;

  00582	8b 45 f0	 mov	 eax, DWORD PTR _xmove$[ebp]
  00585	99		 cdq
  00586	2b c2		 sub	 eax, edx
  00588	d1 f8		 sar	 eax, 1
  0058a	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0058d	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00590	89 45 fc	 mov	 DWORD PTR _ptryx$[ebp], eax

; 985  : 			ptryy = mo->y + ymove/2;

  00593	8b 45 ec	 mov	 eax, DWORD PTR _ymove$[ebp]
  00596	99		 cdq
  00597	2b c2		 sub	 eax, edx
  00599	d1 f8		 sar	 eax, 1
  0059b	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  0059e	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  005a1	89 45 f8	 mov	 DWORD PTR _ptryy$[ebp], eax

; 986  : 			xmove >>= 1;

  005a4	8b 45 f0	 mov	 eax, DWORD PTR _xmove$[ebp]
  005a7	d1 f8		 sar	 eax, 1
  005a9	89 45 f0	 mov	 DWORD PTR _xmove$[ebp], eax

; 987  : 			ymove >>= 1;

  005ac	8b 45 ec	 mov	 eax, DWORD PTR _ymove$[ebp]
  005af	d1 f8		 sar	 eax, 1
  005b1	89 45 ec	 mov	 DWORD PTR _ymove$[ebp], eax

; 988  : 		}

  005b4	eb 25		 jmp	 SHORT $LN51@P_XYMoveme
$LN50@P_XYMoveme:

; 989  : 		else
; 990  : 		{
; 991  : 			ptryx = mo->x + xmove;

  005b6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005b9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  005bc	03 4d f0	 add	 ecx, DWORD PTR _xmove$[ebp]
  005bf	89 4d fc	 mov	 DWORD PTR _ptryx$[ebp], ecx

; 992  : 			ptryy = mo->y + ymove;

  005c2	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  005c5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005c8	03 4d ec	 add	 ecx, DWORD PTR _ymove$[ebp]
  005cb	89 4d f8	 mov	 DWORD PTR _ptryy$[ebp], ecx

; 993  : 			xmove = ymove = 0;

  005ce	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ymove$[ebp], 0
  005d5	8b 45 ec	 mov	 eax, DWORD PTR _ymove$[ebp]
  005d8	89 45 f0	 mov	 DWORD PTR _xmove$[ebp], eax
$LN51@P_XYMoveme:

; 994  : 		}
; 995  : 
; 996  : 		if (!P_TryMove(mo, ptryx, ptryy, true) && !tmsprung)

  005db	6a 01		 push	 1
  005dd	8b 45 f8	 mov	 eax, DWORD PTR _ptryy$[ebp]
  005e0	50		 push	 eax
  005e1	8b 4d fc	 mov	 ecx, DWORD PTR _ptryx$[ebp]
  005e4	51		 push	 ecx
  005e5	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  005e8	52		 push	 edx
  005e9	e8 00 00 00 00	 call	 _P_TryMove
  005ee	83 c4 10	 add	 esp, 16			; 00000010H
  005f1	85 c0		 test	 eax, eax
  005f3	0f 85 eb 02 00
	00		 jne	 $LN53@P_XYMoveme
  005f9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _tmsprung, 0
  00600	0f 85 de 02 00
	00		 jne	 $LN53@P_XYMoveme

; 997  : 		{
; 998  : 			// blocked move
; 999  : 
; 1000 : 			if (mo->player)

  00606	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00609	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00610	74 07		 je	 SHORT $LN55@P_XYMoveme

; 1001 : 				moved = false;

  00612	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 0
$LN55@P_XYMoveme:

; 1002 : 
; 1003 : 			if (mo->flags & MF_BOUNCE)

  00619	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0061c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0061f	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00625	0f 84 0c 01 00
	00		 je	 $LN56@P_XYMoveme

; 1004 : 			{
; 1005 : 				P_BounceMove(mo);

  0062b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0062e	50		 push	 eax
  0062f	e8 00 00 00 00	 call	 _P_BounceMove
  00634	83 c4 04	 add	 esp, 4

; 1006 : 				xmove = ymove = 0;

  00637	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ymove$[ebp], 0
  0063e	8b 45 ec	 mov	 eax, DWORD PTR _ymove$[ebp]
  00641	89 45 f0	 mov	 DWORD PTR _xmove$[ebp], eax

; 1007 : 				S_StartSound(mo, mo->info->activesound);

  00644	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00647	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0064d	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00650	52		 push	 edx
  00651	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00654	50		 push	 eax
  00655	e8 00 00 00 00	 call	 _S_StartSound
  0065a	83 c4 08	 add	 esp, 8

; 1008 : 
; 1009 : 				// Bounce ring algorithm
; 1010 : 				if (mo->type == MT_THROWNBOUNCE)

  0065d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00660	81 78 7c dc 00
	00 00		 cmp	 DWORD PTR [eax+124], 220 ; 000000dcH
  00667	0f 85 c5 00 00
	00		 jne	 $LN61@P_XYMoveme

; 1011 : 				{
; 1012 : 					mo->threshold++;

  0066d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00670	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00676	83 c1 01	 add	 ecx, 1
  00679	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  0067c	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 1013 : 
; 1014 : 					// Gain lower amounts of time on each bounce.
; 1015 : 					if (mo->threshold < 5)

  00682	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00685	83 b8 a0 00 00
	00 05		 cmp	 DWORD PTR [eax+160], 5
  0068c	7d 23		 jge	 SHORT $LN59@P_XYMoveme

; 1016 : 						mo->fuse += ((5 - mo->threshold) * TICRATE);

  0068e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00691	b9 05 00 00 00	 mov	 ecx, 5
  00696	2b 88 a0 00 00
	00		 sub	 ecx, DWORD PTR [eax+160]
  0069c	6b d1 23	 imul	 edx, ecx, 35
  0069f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  006a2	03 90 bc 00 00
	00		 add	 edx, DWORD PTR [eax+188]
  006a8	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  006ab	89 91 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], edx
$LN59@P_XYMoveme:

; 1017 : 
; 1018 : 					// Check for hit against sky here
; 1019 : 					if (ceilingline && ceilingline->backsector
; 1020 : 						&& ceilingline->backsector->ceilingpic == skyflatnum
; 1021 : 						&& ceilingline->frontsector
; 1022 : 						&& ceilingline->frontsector->ceilingpic == skyflatnum
; 1023 : 						&& mo->subsector->sector->ceilingheight == mo->ceilingz)

  006b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ceilingline, 0
  006b8	74 78		 je	 SHORT $LN61@P_XYMoveme
  006ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  006bf	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  006c3	74 6d		 je	 SHORT $LN61@P_XYMoveme
  006c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  006ca	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  006cd	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  006d0	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  006d6	75 5a		 jne	 SHORT $LN61@P_XYMoveme
  006d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  006dd	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  006e1	74 4f		 je	 SHORT $LN61@P_XYMoveme
  006e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  006e8	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  006eb	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  006ee	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  006f4	75 3c		 jne	 SHORT $LN61@P_XYMoveme
  006f6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  006f9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  006fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  006fe	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00701	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00704	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00707	75 29		 jne	 SHORT $LN61@P_XYMoveme

; 1024 : 					{
; 1025 : 						if (mo->z > ceilingline->backsector->ceilingheight) // demos

  00709	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  0070e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00711	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00714	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00717	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0071a	7e 16		 jle	 SHORT $LN61@P_XYMoveme

; 1026 : 						{
; 1027 : 							// Hack to prevent missiles exploding
; 1028 : 							// against the sky.
; 1029 : 							// Does not handle sky floors.
; 1030 : 							// Check frontsector as well.
; 1031 : 
; 1032 : 							P_SetMobjState(mo, S_DISS);

  0071c	68 4f 06 00 00	 push	 1615			; 0000064fH
  00721	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00724	50		 push	 eax
  00725	e8 00 00 00 00	 call	 _P_SetMobjState
  0072a	83 c4 08	 add	 esp, 8

; 1033 : 							//P_RemoveMobj(mo);
; 1034 : 							return;

  0072d	e9 3f 06 00 00	 jmp	 $LN1@P_XYMoveme
$LN61@P_XYMoveme:

; 1035 : 						}
; 1036 : 					}
; 1037 : 				}
; 1038 : 			}

  00732	e9 ab 01 00 00	 jmp	 $LN70@P_XYMoveme
$LN56@P_XYMoveme:

; 1039 : 			else if ((mo->player) || (mo->flags & MF_SLIDEME)
; 1040 : 				|| (mo->flags & MF_PUSHABLE))

  00737	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0073a	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00741	75 19		 jne	 SHORT $LN64@P_XYMoveme
  00743	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00746	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00749	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  0074f	75 0b		 jne	 SHORT $LN64@P_XYMoveme
  00751	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00754	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00757	83 e1 40	 and	 ecx, 64			; 00000040H
  0075a	74 1e		 je	 SHORT $LN62@P_XYMoveme
$LN64@P_XYMoveme:

; 1041 : 			{ // try to slide along it
; 1042 : 				P_SlideMove(mo);

  0075c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0075f	50		 push	 eax
  00760	e8 00 00 00 00	 call	 _P_SlideMove
  00765	83 c4 04	 add	 esp, 4

; 1043 : 				xmove = ymove = 0;

  00768	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ymove$[ebp], 0
  0076f	8b 45 ec	 mov	 eax, DWORD PTR _ymove$[ebp]
  00772	89 45 f0	 mov	 DWORD PTR _xmove$[ebp], eax

; 1044 : 			}

  00775	e9 68 01 00 00	 jmp	 $LN70@P_XYMoveme
$LN62@P_XYMoveme:

; 1045 : 			else if ((mo->flags & MF_MISSILE))

  0077a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0077d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00780	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00786	0f 84 92 00 00
	00		 je	 $LN65@P_XYMoveme

; 1046 : 			{
; 1047 : 				// explode a missile
; 1048 : 				if (ceilingline && ceilingline->backsector
; 1049 : 					&& ceilingline->backsector->ceilingpic == skyflatnum
; 1050 : 					&& ceilingline->frontsector
; 1051 : 					&& ceilingline->frontsector->ceilingpic == skyflatnum
; 1052 : 					&& mo->subsector->sector->ceilingheight == mo->ceilingz)

  0078c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ceilingline, 0
  00793	74 78		 je	 SHORT $LN68@P_XYMoveme
  00795	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  0079a	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0079e	74 6d		 je	 SHORT $LN68@P_XYMoveme
  007a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  007a5	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  007a8	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  007ab	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  007b1	75 5a		 jne	 SHORT $LN68@P_XYMoveme
  007b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  007b8	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  007bc	74 4f		 je	 SHORT $LN68@P_XYMoveme
  007be	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  007c3	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  007c6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  007c9	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  007cf	75 3c		 jne	 SHORT $LN68@P_XYMoveme
  007d1	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007d4	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  007d7	8b 11		 mov	 edx, DWORD PTR [ecx]
  007d9	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007dc	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  007df	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  007e2	75 29		 jne	 SHORT $LN68@P_XYMoveme

; 1053 : 				{
; 1054 : 					if (mo->z > ceilingline->backsector->ceilingheight) // demos

  007e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  007e9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  007ec	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  007ef	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  007f2	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  007f5	7e 16		 jle	 SHORT $LN68@P_XYMoveme

; 1055 : 					{
; 1056 : 						// Hack to prevent missiles exploding
; 1057 : 						// against the sky.
; 1058 : 						// Does not handle sky floors.
; 1059 : 						// Check frontsector as well.
; 1060 : 
; 1061 : 						P_SetMobjState(mo, S_DISS);

  007f7	68 4f 06 00 00	 push	 1615			; 0000064fH
  007fc	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  007ff	50		 push	 eax
  00800	e8 00 00 00 00	 call	 _P_SetMobjState
  00805	83 c4 08	 add	 esp, 8

; 1062 : 						//P_RemoveMobj(mo);
; 1063 : 						return;

  00808	e9 64 05 00 00	 jmp	 $LN1@P_XYMoveme
$LN68@P_XYMoveme:

; 1064 : 					}
; 1065 : 				}
; 1066 : 
; 1067 : 				// draw damage on wall
; 1068 : 				//SPLAT TEST ----------------------------------------------------------
; 1069 : #ifdef WALLSPLATS
; 1070 : 				if (blockingline && mo->type != MT_REDRING
; 1071 : 					&& !(mo->flags2 & MF2_AUTOMATIC) && !(mo->flags2 & MF2_RAILRING)
; 1072 : 					&& !(mo->flags2 & MF2_BOUNCERING) && !(mo->flags2 & MF2_EXPLOSION)
; 1073 : 					&& !(mo->flags2 & MF2_SCATTER) && !(mo->flags2 & MF2_GRENADE))
; 1074 : 					// set by last P_TryMove() that failed
; 1075 : 				{
; 1076 : 					divline_t divl;
; 1077 : 					divline_t misl;
; 1078 : 					fixed_t frac;
; 1079 : 
; 1080 : 					P_MakeDivline(blockingline, &divl);
; 1081 : 					misl.x = mo->x;
; 1082 : 					misl.y = mo->y;
; 1083 : 					misl.dx = mo->momx;
; 1084 : 					misl.dy = mo->momy;
; 1085 : 					frac = P_InterceptVector(&divl, &misl);
; 1086 : 					R_AddWallSplat(blockingline, P_PointOnLineSide(mo->x,mo->y,blockingline),
; 1087 : 						"A_DMG3", mo->z, frac, SPLATDRAWMODE_SHADE);
; 1088 : 				}
; 1089 : #endif
; 1090 : 				// --------------------------------------------------------- SPLAT TEST
; 1091 : 
; 1092 : 				P_ExplodeMissile(mo);

  0080d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00810	50		 push	 eax
  00811	e8 00 00 00 00	 call	 _P_ExplodeMissile
  00816	83 c4 04	 add	 esp, 4

; 1093 : 			}

  00819	e9 c4 00 00 00	 jmp	 $LN70@P_XYMoveme
$LN65@P_XYMoveme:

; 1094 : 			else if (mo->type == MT_FIREBALL)

  0081e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00821	81 78 7c e7 00
	00 00		 cmp	 DWORD PTR [eax+124], 231 ; 000000e7H
  00828	0f 85 a0 00 00
	00		 jne	 $LN69@P_XYMoveme

; 1095 : 			{
; 1096 : 				// explode a missile
; 1097 : 				if (ceilingline &&
; 1098 : 					ceilingline->backsector &&
; 1099 : 					ceilingline->backsector->ceilingpic == skyflatnum &&
; 1100 : 					ceilingline->frontsector &&
; 1101 : 					ceilingline->frontsector->ceilingpic == skyflatnum &&

  0082e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ceilingline, 0
  00835	74 78		 je	 SHORT $LN72@P_XYMoveme
  00837	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  0083c	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  00840	74 6d		 je	 SHORT $LN72@P_XYMoveme
  00842	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  00847	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0084a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0084d	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  00853	75 5a		 jne	 SHORT $LN72@P_XYMoveme
  00855	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  0085a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0085e	74 4f		 je	 SHORT $LN72@P_XYMoveme
  00860	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  00865	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00868	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0086b	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  00871	75 3c		 jne	 SHORT $LN72@P_XYMoveme
  00873	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00876	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00879	8b 11		 mov	 edx, DWORD PTR [ecx]
  0087b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0087e	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00881	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00884	75 29		 jne	 SHORT $LN72@P_XYMoveme

; 1102 : 					mo->subsector->sector->ceilingheight == mo->ceilingz)
; 1103 : 				{
; 1104 : 					if (mo->z > ceilingline->backsector->ceilingheight) // demos

  00886	a1 00 00 00 00	 mov	 eax, DWORD PTR _ceilingline
  0088b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0088e	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00891	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00894	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00897	7e 16		 jle	 SHORT $LN72@P_XYMoveme

; 1105 : 					{
; 1106 : 						// Hack to prevent missiles exploding
; 1107 : 						// against the sky.
; 1108 : 						// Does not handle sky floors.
; 1109 : 						// Check frontsector as well.
; 1110 : 
; 1111 : 						P_SetMobjState(mo, S_DISS);

  00899	68 4f 06 00 00	 push	 1615			; 0000064fH
  0089e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008a1	50		 push	 eax
  008a2	e8 00 00 00 00	 call	 _P_SetMobjState
  008a7	83 c4 08	 add	 esp, 8

; 1112 : 						return;

  008aa	e9 c2 04 00 00	 jmp	 $LN1@P_XYMoveme
$LN72@P_XYMoveme:

; 1113 : 					}
; 1114 : 				}
; 1115 : 
; 1116 : 				S_StartSound(mo, sfx_tink);

  008af	68 e6 00 00 00	 push	 230			; 000000e6H
  008b4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008b7	50		 push	 eax
  008b8	e8 00 00 00 00	 call	 _S_StartSound
  008bd	83 c4 08	 add	 esp, 8

; 1117 : 
; 1118 : 				P_ExplodeMissile(mo);

  008c0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008c3	50		 push	 eax
  008c4	e8 00 00 00 00	 call	 _P_ExplodeMissile
  008c9	83 c4 04	 add	 esp, 4

; 1119 : 			}

  008cc	eb 14		 jmp	 SHORT $LN70@P_XYMoveme
$LN69@P_XYMoveme:

; 1120 : 			else
; 1121 : 				mo->momx = mo->momy = 0;

  008ce	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008d1	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  008d8	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  008db	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN70@P_XYMoveme:

; 1122 : 		}

  008e2	eb 13		 jmp	 SHORT $LN73@P_XYMoveme
$LN53@P_XYMoveme:

; 1123 : 		else if (mo->player)

  008e4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  008e7	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  008ee	74 07		 je	 SHORT $LN73@P_XYMoveme

; 1124 : 			moved = true;

  008f0	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 1
$LN73@P_XYMoveme:

; 1125 : 
; 1126 : 	} while (xmove || ymove);

  008f7	83 7d f0 00	 cmp	 DWORD PTR _xmove$[ebp], 0
  008fb	0f 85 6f fc ff
	ff		 jne	 $LN27@P_XYMoveme
  00901	83 7d ec 00	 cmp	 DWORD PTR _ymove$[ebp], 0
  00905	0f 85 65 fc ff
	ff		 jne	 $LN27@P_XYMoveme

; 1127 : 
; 1128 : 	// Check the gravity status.
; 1129 : 	P_CheckGravity(mo, false);

  0090b	6a 00		 push	 0
  0090d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00910	50		 push	 eax
  00911	e8 00 00 00 00	 call	 _P_CheckGravity
  00916	83 c4 08	 add	 esp, 8

; 1130 : 
; 1131 : 	if (mo->player && !moved && (mo->player->pflags & PF_NIGHTSMODE) && mo->target)

  00919	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0091c	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00923	0f 84 17 02 00
	00		 je	 $LN74@P_XYMoveme
  00929	83 7d e0 00	 cmp	 DWORD PTR _moved$[ebp], 0
  0092d	0f 85 0d 02 00
	00		 jne	 $LN74@P_XYMoveme
  00933	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00936	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0093c	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00942	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  00948	0f 84 f2 01 00
	00		 je	 $LN74@P_XYMoveme
  0094e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00951	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00958	0f 84 e2 01 00
	00		 je	 $LN74@P_XYMoveme

; 1132 : 	{
; 1133 : 		angle_t fa;
; 1134 : 
; 1135 : 		P_UnsetThingPosition(mo);

  0095e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00961	50		 push	 eax
  00962	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00967	83 c4 04	 add	 esp, 4

; 1136 : 		mo->player->angle_pos = mo->player->old_angle_pos;

  0096a	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0096d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00973	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00976	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0097c	8b 89 a0 01 00
	00		 mov	 ecx, DWORD PTR [ecx+416]
  00982	89 88 9c 01 00
	00		 mov	 DWORD PTR [eax+412], ecx

; 1137 : 		mo->player->speed /= 5;

  00988	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  0098b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00991	8b 81 0c 01 00
	00		 mov	 eax, DWORD PTR [ecx+268]
  00997	99		 cdq
  00998	b9 05 00 00 00	 mov	 ecx, 5
  0099d	f7 f9		 idiv	 ecx
  0099f	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  009a2	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  009a8	89 81 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], eax

; 1138 : 		mo->player->speed *= 4;

  009ae	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009b1	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  009b7	8b 91 0c 01 00
	00		 mov	 edx, DWORD PTR [ecx+268]
  009bd	c1 e2 02	 shl	 edx, 2
  009c0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  009c3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  009c9	89 91 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], edx

; 1139 : 		if (player->flyangle >= 0 && player->flyangle < 90)

  009cf	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  009d2	83 b8 b0 01 00
	00 00		 cmp	 DWORD PTR [eax+432], 0
  009d9	7c 1b		 jl	 SHORT $LN75@P_XYMoveme
  009db	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  009de	83 b8 b0 01 00
	00 5a		 cmp	 DWORD PTR [eax+432], 90	; 0000005aH
  009e5	7d 0f		 jge	 SHORT $LN75@P_XYMoveme

; 1140 : 			player->flyangle = 135;

  009e7	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  009ea	c7 80 b0 01 00
	00 87 00 00 00	 mov	 DWORD PTR [eax+432], 135 ; 00000087H
  009f4	eb 64		 jmp	 SHORT $LN80@P_XYMoveme
$LN75@P_XYMoveme:

; 1141 : 		else if (player->flyangle >= 90 && player->flyangle < 180)

  009f6	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  009f9	83 b8 b0 01 00
	00 5a		 cmp	 DWORD PTR [eax+432], 90	; 0000005aH
  00a00	7c 1e		 jl	 SHORT $LN77@P_XYMoveme
  00a02	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a05	81 b8 b0 01 00
	00 b4 00 00 00	 cmp	 DWORD PTR [eax+432], 180 ; 000000b4H
  00a0f	7d 0f		 jge	 SHORT $LN77@P_XYMoveme

; 1142 : 			player->flyangle = 45;

  00a11	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a14	c7 80 b0 01 00
	00 2d 00 00 00	 mov	 DWORD PTR [eax+432], 45	; 0000002dH
  00a1e	eb 3a		 jmp	 SHORT $LN80@P_XYMoveme
$LN77@P_XYMoveme:

; 1143 : 		else if (player->flyangle >= 180 && player->flyangle < 270)

  00a20	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a23	81 b8 b0 01 00
	00 b4 00 00 00	 cmp	 DWORD PTR [eax+432], 180 ; 000000b4H
  00a2d	7c 1e		 jl	 SHORT $LN79@P_XYMoveme
  00a2f	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a32	81 b8 b0 01 00
	00 0e 01 00 00	 cmp	 DWORD PTR [eax+432], 270 ; 0000010eH
  00a3c	7d 0f		 jge	 SHORT $LN79@P_XYMoveme

; 1144 : 			player->flyangle = 315;

  00a3e	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a41	c7 80 b0 01 00
	00 3b 01 00 00	 mov	 DWORD PTR [eax+432], 315 ; 0000013bH
  00a4b	eb 0d		 jmp	 SHORT $LN80@P_XYMoveme
$LN79@P_XYMoveme:

; 1145 : 		else
; 1146 : 			player->flyangle = 225;

  00a4d	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a50	c7 80 b0 01 00
	00 e1 00 00 00	 mov	 DWORD PTR [eax+432], 225 ; 000000e1H
$LN80@P_XYMoveme:

; 1147 : 		player->flyangle %= 360;

  00a5a	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a5d	8b 80 b0 01 00
	00		 mov	 eax, DWORD PTR [eax+432]
  00a63	99		 cdq
  00a64	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  00a69	f7 f9		 idiv	 ecx
  00a6b	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a6e	89 90 b0 01 00
	00		 mov	 DWORD PTR [eax+432], edx

; 1148 : 
; 1149 : 		if (player->pflags & PF_TRANSFERTOCLOSEST)

  00a74	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00a77	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00a7d	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  00a83	74 26		 je	 SHORT $LN81@P_XYMoveme

; 1150 : 		{
; 1151 : 			mo->x -= mo->momx;

  00a85	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a88	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00a8b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00a8e	2b 51 48	 sub	 edx, DWORD PTR [ecx+72]
  00a91	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a94	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 1152 : 			mo->y -= mo->momy;

  00a97	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00a9a	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00a9d	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00aa0	2b 51 4c	 sub	 edx, DWORD PTR [ecx+76]
  00aa3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00aa6	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1153 : 		}

  00aa9	eb 75		 jmp	 SHORT $LN82@P_XYMoveme
$LN81@P_XYMoveme:

; 1154 : 		else
; 1155 : 		{
; 1156 : 			fa = player->old_angle_pos>>ANGLETOFINESHIFT;

  00aab	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00aae	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00ab4	c1 e9 13	 shr	 ecx, 19			; 00000013H
  00ab7	89 4d d4	 mov	 DWORD PTR _fa$2[ebp], ecx

; 1157 : 
; 1158 : 			mo->x = mo->target->x + FixedMul(FINECOSINE(fa),mo->target->radius);

  00aba	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00abd	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  00ac3	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00ac6	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00acc	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00acf	50		 push	 eax
  00ad0	8b 4d d4	 mov	 ecx, DWORD PTR _fa$2[ebp]
  00ad3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00ad9	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 _FixedMul
  00ae2	83 c4 08	 add	 esp, 8
  00ae5	03 46 10	 add	 eax, DWORD PTR [esi+16]
  00ae8	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00aeb	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1159 : 			mo->y = mo->target->y + FixedMul(FINESINE(fa),mo->target->radius);

  00aee	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00af1	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  00af7	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00afa	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00b00	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00b03	50		 push	 eax
  00b04	8b 4d d4	 mov	 ecx, DWORD PTR _fa$2[ebp]
  00b07	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00b0e	52		 push	 edx
  00b0f	e8 00 00 00 00	 call	 _FixedMul
  00b14	83 c4 08	 add	 esp, 8
  00b17	03 46 14	 add	 eax, DWORD PTR [esi+20]
  00b1a	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00b1d	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN82@P_XYMoveme:

; 1160 : 		}
; 1161 : 
; 1162 : 		mo->momx = mo->momy = 0;

  00b20	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b23	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  00b2a	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00b2d	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1163 : 		P_SetThingPosition(mo);

  00b34	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b37	50		 push	 eax
  00b38	e8 00 00 00 00	 call	 _P_SetThingPosition
  00b3d	83 c4 04	 add	 esp, 4
$LN74@P_XYMoveme:

; 1164 : 	}
; 1165 : 
; 1166 : 	if (mo->type == MT_FIREBALL || mo->type == MT_SHELL)

  00b40	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b43	81 78 7c e7 00
	00 00		 cmp	 DWORD PTR [eax+124], 231 ; 000000e7H
  00b4a	74 0c		 je	 SHORT $LN84@P_XYMoveme
  00b4c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b4f	81 78 7c e8 00
	00 00		 cmp	 DWORD PTR [eax+124], 232 ; 000000e8H
  00b56	75 05		 jne	 SHORT $LN83@P_XYMoveme
$LN84@P_XYMoveme:

; 1167 : 		return;

  00b58	e9 14 02 00 00	 jmp	 $LN1@P_XYMoveme
$LN83@P_XYMoveme:

; 1168 : 
; 1169 : 	if (((mo->flags & MF_MISSILE) || (mo->flags2 & MF2_SKULLFLY))
; 1170 : 		&& !mo->type == MT_DETON)

  00b5d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b60	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00b63	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00b69	75 11		 jne	 SHORT $LN86@P_XYMoveme
  00b6b	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b6e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00b74	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00b7a	74 24		 je	 SHORT $LN85@P_XYMoveme
$LN86@P_XYMoveme:
  00b7c	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00b7f	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00b83	75 09		 jne	 SHORT $LN101@P_XYMoveme
  00b85	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv568[ebp], 1
  00b8c	eb 07		 jmp	 SHORT $LN102@P_XYMoveme
$LN101@P_XYMoveme:
  00b8e	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv568[ebp], 0
$LN102@P_XYMoveme:
  00b95	83 7d 8c 09	 cmp	 DWORD PTR tv568[ebp], 9
  00b99	75 05		 jne	 SHORT $LN85@P_XYMoveme

; 1171 : 	{
; 1172 : 		return; // no friction for missiles ever

  00b9b	e9 d1 01 00 00	 jmp	 $LN1@P_XYMoveme
$LN85@P_XYMoveme:

; 1173 : 	}
; 1174 : 
; 1175 : 	if (mo->flags & MF_MISSILE)

  00ba0	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ba3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00ba6	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00bac	74 05		 je	 SHORT $LN87@P_XYMoveme

; 1176 : 		return;

  00bae	e9 be 01 00 00	 jmp	 $LN1@P_XYMoveme
$LN87@P_XYMoveme:

; 1177 : 
; 1178 : 	if (mo->player && mo->player->homing) // no friction for homing

  00bb3	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bb6	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00bbd	74 19		 je	 SHORT $LN88@P_XYMoveme
  00bbf	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bc2	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00bc8	0f b6 91 38 01
	00 00		 movzx	 edx, BYTE PTR [ecx+312]
  00bcf	85 d2		 test	 edx, edx
  00bd1	74 05		 je	 SHORT $LN88@P_XYMoveme

; 1179 : 		return;

  00bd3	e9 99 01 00 00	 jmp	 $LN1@P_XYMoveme
$LN88@P_XYMoveme:

; 1180 : 
; 1181 : 	if (((!(mo->eflags & MFE_VERTICALFLIP) && mo->z > mo->floorz) || (mo->eflags & MFE_VERTICALFLIP && mo->z+mo->height < mo->ceilingz)) && !(mo->flags2 & MF2_ONMOBJ)
; 1182 : 		&& !(mo->player && (mo->player->pflags & PF_SLIDING)))

  00bd8	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bdb	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00be1	83 e1 20	 and	 ecx, 32			; 00000020H
  00be4	75 0e		 jne	 SHORT $LN91@P_XYMoveme
  00be6	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00be9	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00bec	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00bef	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00bf2	7f 22		 jg	 SHORT $LN90@P_XYMoveme
$LN91@P_XYMoveme:
  00bf4	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00bf7	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00bfd	83 e1 20	 and	 ecx, 32			; 00000020H
  00c00	74 4d		 je	 SHORT $LN89@P_XYMoveme
  00c02	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c05	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00c08	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00c0b	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00c0e	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c11	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00c14	7d 39		 jge	 SHORT $LN89@P_XYMoveme
$LN90@P_XYMoveme:
  00c16	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c19	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00c1f	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00c25	75 28		 jne	 SHORT $LN89@P_XYMoveme
  00c27	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c2a	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00c31	74 17		 je	 SHORT $LN92@P_XYMoveme
  00c33	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00c36	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c3c	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00c42	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  00c48	75 05		 jne	 SHORT $LN89@P_XYMoveme
$LN92@P_XYMoveme:

; 1183 : 		return; // no friction when airborne

  00c4a	e9 22 01 00 00	 jmp	 $LN1@P_XYMoveme
$LN89@P_XYMoveme:

; 1184 : 
; 1185 : 	// spinning friction
; 1186 : 	if (player)

  00c4f	83 7d f4 00	 cmp	 DWORD PTR _player$[ebp], 0
  00c53	0f 84 86 00 00
	00		 je	 $LN94@P_XYMoveme

; 1187 : 	{
; 1188 : 		if ((player->pflags & PF_SPINNING) && (player->rmomx || player->rmomy) && !(player->pflags & PF_STARTDASH))

  00c59	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00c5c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00c62	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00c68	74 75		 je	 SHORT $LN94@P_XYMoveme
  00c6a	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00c6d	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [eax+324], 0
  00c74	75 0c		 jne	 SHORT $LN95@P_XYMoveme
  00c76	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00c79	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  00c80	74 5d		 je	 SHORT $LN94@P_XYMoveme
$LN95@P_XYMoveme:
  00c82	8b 45 f4	 mov	 eax, DWORD PTR _player$[ebp]
  00c85	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00c8b	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00c91	75 4c		 jne	 SHORT $LN94@P_XYMoveme

; 1189 : 		{
; 1190 : 			const fixed_t ns = FixedDiv(549*FRICTION,500*FRACUNIT);

  00c93	68 00 00 f4 01	 push	 32768000		; 01f40000H
  00c98	68 00 88 f1 01	 push	 32606208		; 01f18800H
  00c9d	e8 00 00 00 00	 call	 _FixedDiv
  00ca2	83 c4 08	 add	 esp, 8
  00ca5	89 45 d0	 mov	 DWORD PTR _ns$1[ebp], eax

; 1191 : 			mo->momx = FixedMul(mo->momx, ns);

  00ca8	8b 45 d0	 mov	 eax, DWORD PTR _ns$1[ebp]
  00cab	50		 push	 eax
  00cac	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00caf	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00cb2	52		 push	 edx
  00cb3	e8 00 00 00 00	 call	 _FixedMul
  00cb8	83 c4 08	 add	 esp, 8
  00cbb	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00cbe	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1192 : 			mo->momy = FixedMul(mo->momy, ns);

  00cc1	8b 45 d0	 mov	 eax, DWORD PTR _ns$1[ebp]
  00cc4	50		 push	 eax
  00cc5	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00cc8	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00ccb	52		 push	 edx
  00ccc	e8 00 00 00 00	 call	 _FixedMul
  00cd1	83 c4 08	 add	 esp, 8
  00cd4	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00cd7	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1193 : 			return;

  00cda	e9 92 00 00 00	 jmp	 $LN1@P_XYMoveme
$LN94@P_XYMoveme:

; 1194 : 		}
; 1195 : 	}
; 1196 : 
; 1197 : 	if (((!(mo->eflags & MFE_VERTICALFLIP) && mo->z > mo->floorz) || (mo->eflags & MFE_VERTICALFLIP && mo->z+mo->height < mo->ceilingz)) && mo->type != MT_CRAWLACOMMANDER && mo->type != MT_EGGMOBILE && mo->type != MT_EGGMOBILE2
; 1198 : 		&& !(mo->player && (mo->player->pflags & PF_SLIDING)))

  00cdf	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00ce2	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00ce8	83 e1 20	 and	 ecx, 32			; 00000020H
  00ceb	75 0e		 jne	 SHORT $LN98@P_XYMoveme
  00ced	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cf0	8b 4d 08	 mov	 ecx, DWORD PTR _mo$[ebp]
  00cf3	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00cf6	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00cf9	7f 22		 jg	 SHORT $LN97@P_XYMoveme
$LN98@P_XYMoveme:
  00cfb	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00cfe	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00d04	83 e1 20	 and	 ecx, 32			; 00000020H
  00d07	74 54		 je	 SHORT $LN96@P_XYMoveme
  00d09	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d0c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00d0f	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00d12	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00d15	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d18	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00d1b	7d 40		 jge	 SHORT $LN96@P_XYMoveme
$LN97@P_XYMoveme:
  00d1d	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d20	83 78 7c 08	 cmp	 DWORD PTR [eax+124], 8
  00d24	74 37		 je	 SHORT $LN96@P_XYMoveme
  00d26	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d29	83 78 7c 1d	 cmp	 DWORD PTR [eax+124], 29	; 0000001dH
  00d2d	74 2e		 je	 SHORT $LN96@P_XYMoveme
  00d2f	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d32	83 78 7c 1f	 cmp	 DWORD PTR [eax+124], 31	; 0000001fH
  00d36	74 25		 je	 SHORT $LN96@P_XYMoveme
  00d38	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d3b	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00d42	74 17		 je	 SHORT $LN99@P_XYMoveme
  00d44	8b 45 08	 mov	 eax, DWORD PTR _mo$[ebp]
  00d47	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00d4d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00d53	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  00d59	75 02		 jne	 SHORT $LN96@P_XYMoveme
$LN99@P_XYMoveme:

; 1199 : 		return; // no friction when airborne

  00d5b	eb 14		 jmp	 SHORT $LN1@P_XYMoveme
$LN96@P_XYMoveme:

; 1200 : 
; 1201 : 	P_XYFriction(mo, oldx, oldy);

  00d5d	8b 45 e4	 mov	 eax, DWORD PTR _oldy$[ebp]
  00d60	50		 push	 eax
  00d61	8b 4d e8	 mov	 ecx, DWORD PTR _oldx$[ebp]
  00d64	51		 push	 ecx
  00d65	8b 55 08	 mov	 edx, DWORD PTR _mo$[ebp]
  00d68	52		 push	 edx
  00d69	e8 00 00 00 00	 call	 _P_XYFriction
  00d6e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@P_XYMoveme:

; 1202 : }

  00d71	5f		 pop	 edi
  00d72	5e		 pop	 esi
  00d73	5b		 pop	 ebx
  00d74	8b e5		 mov	 esp, ebp
  00d76	5d		 pop	 ebp
  00d77	c3		 ret	 0
_P_XYMovement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SetScale
_TEXT	SEGMENT
_player$ = -4						; size = 4
_mobj$ = 8						; size = 4
_newscale$ = 12						; size = 2
_P_SetScale PROC					; COMDAT

; 4628 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4629 : 	player_t *player;
; 4630 : 
; 4631 : 	if (!mobj)

  00009	83 7d 08 00	 cmp	 DWORD PTR _mobj$[ebp], 0
  0000d	75 05		 jne	 SHORT $LN2@P_SetScale

; 4632 : 		return;

  0000f	e9 b8 01 00 00	 jmp	 $LN3@P_SetScale
$LN2@P_SetScale:

; 4633 : 
; 4634 : 	mobj->scale = newscale;

  00014	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00017	66 8b 4d 0c	 mov	 cx, WORD PTR _newscale$[ebp]
  0001b	66 89 88 cc 00
	00 00		 mov	 WORD PTR [eax+204], cx

; 4635 : 
; 4636 : 	mobj->radius = FIXEDSCALE(mobj->info->radius, newscale);

  00022	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00025	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0002b	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0002e	52		 push	 edx
  0002f	68 00 00 64 00	 push	 6553600			; 00640000H
  00034	0f b7 45 0c	 movzx	 eax, WORD PTR _newscale$[ebp]
  00038	c1 e0 10	 shl	 eax, 16			; 00000010H
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _FixedDiv
  00041	83 c4 08	 add	 esp, 8
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _FixedMul
  0004a	83 c4 08	 add	 esp, 8
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00050	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 4637 : 	mobj->height = FIXEDSCALE(mobj->info->height, newscale);

  00053	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00056	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0005c	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0005f	52		 push	 edx
  00060	68 00 00 64 00	 push	 6553600			; 00640000H
  00065	0f b7 45 0c	 movzx	 eax, WORD PTR _newscale$[ebp]
  00069	c1 e0 10	 shl	 eax, 16			; 00000010H
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _FixedDiv
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _FixedMul
  0007b	83 c4 08	 add	 esp, 8
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00081	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 4638 : 
; 4639 : 	player = mobj->player;

  00084	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00087	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0008d	89 4d fc	 mov	 DWORD PTR _player$[ebp], ecx

; 4640 : 
; 4641 : 	if (player)

  00090	83 7d fc 00	 cmp	 DWORD PTR _player$[ebp], 0
  00094	0f 84 32 01 00
	00		 je	 $LN3@P_SetScale

; 4642 : 	{
; 4643 : 		if (FIXEDSCALE(atoi(skins[player->skin].normalspeed), newscale) < MAXMOVE)

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0009d	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  000a7	81 c1 6a 00 00
	00		 add	 ecx, OFFSET _skins+106
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 _atoi
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	68 00 00 64 00	 push	 6553600			; 00640000H
  000bc	0f b7 55 0c	 movzx	 edx, WORD PTR _newscale$[ebp]
  000c0	c1 e2 10	 shl	 edx, 16			; 00000010H
  000c3	52		 push	 edx
  000c4	e8 00 00 00 00	 call	 _FixedDiv
  000c9	83 c4 08	 add	 esp, 8
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _FixedMul
  000d2	83 c4 08	 add	 esp, 8
  000d5	3d 00 00 3c 00	 cmp	 eax, 3932160		; 003c0000H
  000da	7d 36		 jge	 SHORT $LN4@P_SetScale

; 4644 : 			player->normalspeed = atoi(skins[player->skin].normalspeed)*newscale/100;

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000df	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  000e9	81 c1 6a 00 00
	00		 add	 ecx, OFFSET _skins+106
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 _atoi
  000f5	83 c4 04	 add	 esp, 4
  000f8	0f b7 55 0c	 movzx	 edx, WORD PTR _newscale$[ebp]
  000fc	0f af c2	 imul	 eax, edx
  000ff	99		 cdq
  00100	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00105	f7 f9		 idiv	 ecx
  00107	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0010a	89 82 c4 00 00
	00		 mov	 DWORD PTR [edx+196], eax
  00110	eb 0d		 jmp	 SHORT $LN5@P_SetScale
$LN4@P_SetScale:

; 4645 : 		else
; 4646 : 			player->normalspeed = MAXMOVE;

  00112	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00115	c7 80 c4 00 00
	00 00 00 3c 00	 mov	 DWORD PTR [eax+196], 3932160 ; 003c0000H
$LN5@P_SetScale:

; 4647 : 
; 4648 : 		player->runspeed = atoi(skins[player->skin].runspeed)*newscale/100;

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00122	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  0012c	81 c1 6d 00 00
	00		 add	 ecx, OFFSET _skins+109
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 _atoi
  00138	83 c4 04	 add	 esp, 4
  0013b	0f b7 55 0c	 movzx	 edx, WORD PTR _newscale$[ebp]
  0013f	0f af c2	 imul	 eax, edx
  00142	99		 cdq
  00143	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00148	f7 f9		 idiv	 ecx
  0014a	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0014d	89 82 c8 00 00
	00		 mov	 DWORD PTR [edx+200], eax

; 4649 : 
; 4650 : 		// Try to fix running problem
; 4651 : 		if(player->runspeed > player->normalspeed - 4)

  00153	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00156	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  0015c	83 e9 04	 sub	 ecx, 4
  0015f	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00162	39 8a c8 00 00
	00		 cmp	 DWORD PTR [edx+200], ecx
  00168	7e 15		 jle	 SHORT $LN6@P_SetScale

; 4652 : 			player->runspeed = player->normalspeed - 4;

  0016a	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0016d	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  00173	83 e9 04	 sub	 ecx, 4
  00176	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00179	89 8a c8 00 00
	00		 mov	 DWORD PTR [edx+200], ecx
$LN6@P_SetScale:

; 4653 : 		if (player->runspeed <= 0)

  0017f	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00182	83 b8 c8 00 00
	00 00		 cmp	 DWORD PTR [eax+200], 0
  00189	7f 0d		 jg	 SHORT $LN7@P_SetScale

; 4654 : 			player->runspeed = 1;

  0018b	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0018e	c7 80 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+200], 1
$LN7@P_SetScale:

; 4655 : 
; 4656 : 		player->actionspd = atoi(skins[player->skin].actionspd)*newscale/100;

  00198	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0019b	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  001a5	81 c1 5a 00 00
	00		 add	 ecx, OFFSET _skins+90
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 _atoi
  001b1	83 c4 04	 add	 esp, 4
  001b4	0f b7 55 0c	 movzx	 edx, WORD PTR _newscale$[ebp]
  001b8	0f af c2	 imul	 eax, edx
  001bb	99		 cdq
  001bc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001c1	f7 f9		 idiv	 ecx
  001c3	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  001c6	89 82 ec 00 00
	00		 mov	 DWORD PTR [edx+236], eax
$LN3@P_SetScale:

; 4657 : 
; 4658 : 		// Calculate camera and viewheight elsewhere
; 4659 : 	}
; 4660 : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
_P_SetScale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RemovePrecipMobj
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_RemovePrecipMobj PROC				; COMDAT

; 6669 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6670 : 	// unlink from sector and block lists
; 6671 : 	P_UnsetPrecipThingPosition(mobj);

  00009	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_UnsetPrecipThingPosition
  00012	83 c4 04	 add	 esp, 4

; 6672 : 
; 6673 : 	if (precipsector_list)

  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _precipsector_list, 0
  0001c	74 18		 je	 SHORT $LN2@P_RemovePr

; 6674 : 	{
; 6675 : 		P_DelPrecipSeclist(precipsector_list);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _precipsector_list
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _P_DelPrecipSeclist
  00029	83 c4 04	 add	 esp, 4

; 6676 : 		precipsector_list = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _precipsector_list, 0
$LN2@P_RemovePr:

; 6677 : 	}
; 6678 : 
; 6679 : 	// free block
; 6680 : 	P_RemoveThinker((thinker_t *)mobj);

  00036	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _P_RemoveThinker
  0003f	83 c4 04	 add	 esp, 4

; 6681 : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_P_RemovePrecipMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_NullPrecipThinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_NullPrecipThinker PROC				; COMDAT

; 2977 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2978 : 	(void)mobj;
; 2979 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_P_NullPrecipThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RainThinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_RainThinker PROC					; COMDAT

; 2996 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2997 : 	if (P_FreezeObjectplace())

  00009	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  0000e	85 c0		 test	 eax, eax
  00010	74 05		 je	 SHORT $LN2@P_RainThin

; 2998 : 		return;

  00012	e9 6c 01 00 00	 jmp	 $LN1@P_RainThin
$LN2@P_RainThin:

; 2999 : 
; 3000 : 	// adjust height
; 3001 : 	mobj->z += mobj->momz;

  00017	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00020	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  00023	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00026	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3002 : 
; 3003 : 	if (mobj->state != &states[S_RAIN1])

  00029	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0002e	69 c8 b6 03 00
	00		 imul	 ecx, eax, 950
  00034	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0003a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0003d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00040	0f 84 97 00 00
	00		 je	 $LN3@P_RainThin

; 3004 : 	{
; 3005 : 		// cycle through states,
; 3006 : 		// calling action functions at transitions
; 3007 : 		if (mobj->tics != -1)

  00046	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00049	83 78 58 ff	 cmp	 DWORD PTR [eax+88], -1
  0004d	74 37		 je	 SHORT $LN7@P_RainThin

; 3008 : 		{
; 3009 : 			mobj->tics--;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00052	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00055	83 e9 01	 sub	 ecx, 1
  00058	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0005b	89 4a 58	 mov	 DWORD PTR [edx+88], ecx

; 3010 : 
; 3011 : 			// you can cycle through multiple states in a tic
; 3012 : 			if (!mobj->tics)

  0005e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00061	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00065	75 1f		 jne	 SHORT $LN7@P_RainThin

; 3013 : 				if (!P_SetPrecipMobjState(mobj, mobj->state->nextstate))

  00067	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0006a	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0006d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00070	52		 push	 edx
  00071	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _P_SetPrecipMobjState
  0007a	83 c4 08	 add	 esp, 8
  0007d	85 c0		 test	 eax, eax
  0007f	75 05		 jne	 SHORT $LN7@P_RainThin

; 3014 : 					return; // freed itself

  00081	e9 fd 00 00 00	 jmp	 $LN1@P_RainThin
$LN7@P_RainThin:

; 3015 : 		}
; 3016 : 
; 3017 : 		if (mobj->state == &states[S_RAINRETURN])

  00086	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0008b	69 c8 b7 03 00
	00		 imul	 ecx, eax, 951
  00091	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00097	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0009a	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0009d	75 39		 jne	 SHORT $LN8@P_RainThin

; 3018 : 		{
; 3019 : 			mobj->z = mobj->subsector->sector->ceilingheight;

  0009f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000aa	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ad	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3020 : 			mobj->momz = mobjinfo[MT_RAIN].speed;

  000b0	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  000b5	69 c8 b3 00 00
	00		 imul	 ecx, eax, 179
  000bb	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000be	8b 81 3c 00 00
	00		 mov	 eax, DWORD PTR _mobjinfo[ecx+60]
  000c4	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 3021 : 			P_SetPrecipMobjState(mobj, S_RAIN1);

  000c7	68 b6 03 00 00	 push	 950			; 000003b6H
  000cc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 _P_SetPrecipMobjState
  000d5	83 c4 08	 add	 esp, 8
$LN8@P_RainThin:

; 3022 : 		}
; 3023 : 	}

  000d8	e9 a6 00 00 00	 jmp	 $LN11@P_RainThin
$LN3@P_RainThin:

; 3024 : 	else if (mobj->z <= mobj->floorz && mobj->momz)

  000dd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  000e3	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000e6	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  000e9	0f 8f 94 00 00
	00		 jg	 $LN11@P_RainThin
  000ef	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f2	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  000f6	0f 84 87 00 00
	00		 je	 $LN11@P_RainThin

; 3025 : 	{
; 3026 : 		// no splashes on sky or bottomless pits
; 3027 : 		if (mobj->z <= mobj->subsector->sector->floorheight
; 3028 : 			&& (GETSECSPECIAL(mobj->subsector->sector->special, 1) == 7 || GETSECSPECIAL(mobj->subsector->sector->special, 1) == 6

  000fc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000ff	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00102	8b 11		 mov	 edx, DWORD PTR [ecx]
  00104	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00107	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0010a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0010c	7f 4e		 jg	 SHORT $LN10@P_RainThin
  0010e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00111	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00114	8b 11		 mov	 edx, DWORD PTR [ecx]
  00116	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  0011a	83 e0 0f	 and	 eax, 15			; 0000000fH
  0011d	83 f8 07	 cmp	 eax, 7
  00120	74 27		 je	 SHORT $LN12@P_RainThin
  00122	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00125	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00128	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012a	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  0012e	83 e0 0f	 and	 eax, 15			; 0000000fH
  00131	83 f8 06	 cmp	 eax, 6
  00134	74 13		 je	 SHORT $LN12@P_RainThin
  00136	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00139	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0013c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00141	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _skyflatnum
  00147	75 13		 jne	 SHORT $LN10@P_RainThin
$LN12@P_RainThin:

; 3029 : 			|| mobj->subsector->sector->floorpic == skyflatnum))
; 3030 : 			mobj->z = mobj->subsector->sector->ceilingheight;

  00149	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0014c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0014f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00151	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00154	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00157	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0015a	eb 27		 jmp	 SHORT $LN11@P_RainThin
$LN10@P_RainThin:

; 3031 : 		else
; 3032 : 		{
; 3033 : 			mobj->momz = 0;

  0015c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0015f	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 3034 : 			mobj->z = mobj->floorz;

  00166	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00169	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0016c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0016f	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 3035 : 			P_SetPrecipMobjState(mobj, S_SPLASH1);

  00172	68 c4 03 00 00	 push	 964			; 000003c4H
  00177	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 _P_SetPrecipMobjState
  00180	83 c4 08	 add	 esp, 8
$LN11@P_RainThin:
$LN1@P_RainThin:

; 3036 : 		}
; 3037 : 	}
; 3038 : 
; 3039 : 	return;
; 3040 : }

  00183	5f		 pop	 edi
  00184	5e		 pop	 esi
  00185	5b		 pop	 ebx
  00186	8b e5		 mov	 esp, ebp
  00188	5d		 pop	 ebp
  00189	c3		 ret	 0
_P_RainThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SnowThinker
_TEXT	SEGMENT
_mobj$ = 8						; size = 4
_P_SnowThinker PROC					; COMDAT

; 2982 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2983 : 	if (P_FreezeObjectplace())

  00009	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  0000e	85 c0		 test	 eax, eax
  00010	74 02		 je	 SHORT $LN2@P_SnowThin

; 2984 : 		return;

  00012	eb 31		 jmp	 SHORT $LN1@P_SnowThin
$LN2@P_SnowThin:

; 2985 : 
; 2986 : 	// adjust height
; 2987 : 	mobj->z += mobj->momz;

  00014	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00017	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001a	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0001d	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  00020	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00023	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2988 : 
; 2989 : 	if (mobj->z <= mobj->floorz)

  00026	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0002c	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0002f	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00032	7f 11		 jg	 SHORT $LN3@P_SnowThin

; 2990 : 		mobj->z = mobj->subsector->sector->ceilingheight;

  00034	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00037	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0003f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00042	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN3@P_SnowThin:
$LN1@P_SnowThin:

; 2991 : 
; 2992 : 	return;
; 2993 : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_P_SnowThinker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_DestroyRobots
_TEXT	SEGMENT
_think$ = -12						; size = 4
_mo$ = -8						; size = 4
_count$ = -4						; size = 4
_P_DestroyRobots PROC					; COMDAT

; 2592 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2593 : 	// Search through all the thinkers for enemies.
; 2594 : 	INT32 count;
; 2595 : 	mobj_t *mo;
; 2596 : 	thinker_t *think;
; 2597 : 
; 2598 : 	count = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 2599 : 	for (think = thinkercap.next; think != &thinkercap; think = think->next)

  00010	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  00015	89 45 f4	 mov	 DWORD PTR _think$[ebp], eax
  00018	eb 09		 jmp	 SHORT $LN4@P_DestroyR
$LN2@P_DestroyR:
  0001a	8b 45 f4	 mov	 eax, DWORD PTR _think$[ebp]
  0001d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00020	89 4d f4	 mov	 DWORD PTR _think$[ebp], ecx
$LN4@P_DestroyR:
  00023	81 7d f4 00 00
	00 00		 cmp	 DWORD PTR _think$[ebp], OFFSET _thinkercap
  0002a	0f 84 81 00 00
	00		 je	 $LN3@P_DestroyR

; 2600 : 	{
; 2601 : 		if (think->function.acp1 != (actionf_p1)P_MobjThinker)

  00030	8b 45 f4	 mov	 eax, DWORD PTR _think$[ebp]
  00033	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0003a	74 02		 je	 SHORT $LN5@P_DestroyR

; 2602 : 			continue; // not a mobj thinker

  0003c	eb dc		 jmp	 SHORT $LN2@P_DestroyR
$LN5@P_DestroyR:

; 2603 : 
; 2604 : 		mo = (mobj_t *)think;

  0003e	8b 45 f4	 mov	 eax, DWORD PTR _think$[ebp]
  00041	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 2605 : 		if (mo->health <= 0 || !(mo->flags & MF_ENEMY || mo->flags & MF_BOSS))

  00044	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00047	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0004e	7e 1c		 jle	 SHORT $LN7@P_DestroyR
  00050	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00053	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00056	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0005c	75 10		 jne	 SHORT $LN6@P_DestroyR
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00061	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00064	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0006a	75 02		 jne	 SHORT $LN6@P_DestroyR
$LN7@P_DestroyR:

; 2606 : 			continue; // not a valid enemy

  0006c	eb ac		 jmp	 SHORT $LN2@P_DestroyR
$LN6@P_DestroyR:

; 2607 : 
; 2608 : 		if (mo->type == MT_PLAYER) // Don't chase after other players!

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00071	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00075	75 02		 jne	 SHORT $LN8@P_DestroyR

; 2609 : 			continue;

  00077	eb a1		 jmp	 SHORT $LN2@P_DestroyR
$LN8@P_DestroyR:

; 2610 : 
; 2611 : 		// Found a target enemy
; 2612 : 		P_DamageMobj(mo, players[consoleplayer].mo, players[consoleplayer].mo, 10000);

  00079	68 10 27 00 00	 push	 10000			; 00002710H
  0007e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00088	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0008e	51		 push	 ecx
  0008f	69 15 00 00 00
	00 fc 01 00 00	 imul	 edx, DWORD PTR _consoleplayer, 508
  00099	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  0009f	50		 push	 eax
  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 _P_DamageMobj
  000a9	83 c4 10	 add	 esp, 16			; 00000010H

; 2613 : 	}

  000ac	e9 69 ff ff ff	 jmp	 $LN2@P_DestroyR
$LN3@P_DestroyR:

; 2614 : 
; 2615 : 	if (!modifiedgame || savemoddata)

  000b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  000b8	74 09		 je	 SHORT $LN10@P_DestroyR
  000ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  000c1	74 45		 je	 SHORT $LN11@P_DestroyR
$LN10@P_DestroyR:

; 2616 : 	{
; 2617 : 		modifiedgame = true;

  000c3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1

; 2618 : 		savemoddata = false;

  000cd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savemoddata, 0

; 2619 : 		if (!(netgame || multiplayer))

  000d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000de	75 28		 jne	 SHORT $LN11@P_DestroyR
  000e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000e7	75 1f		 jne	 SHORT $LN11@P_DestroyR

; 2620 : 			CONS_Printf("%s", text[GAMEMODIFIED]);

  000e9	b8 04 00 00 00	 mov	 eax, 4
  000ee	69 c8 f5 00 00
	00		 imul	 ecx, eax, 245
  000f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000fa	52		 push	 edx
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00100	e8 00 00 00 00	 call	 _CONS_Printf
  00105	83 c4 08	 add	 esp, 8
$LN11@P_DestroyR:

; 2621 : 	}
; 2622 : }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
_P_DestroyRobots ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SupermanLook4Players
_TEXT	SEGMENT
_playersinthegame$ = -140				; size = 128
_stop$ = -12						; size = 4
_c$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_actor$ = 8						; size = 4
_P_SupermanLook4Players PROC				; COMDAT

; 3134 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3135 : 	INT32 c, stop = 0;

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _stop$[ebp], 0

; 3136 : 	player_t *playersinthegame[MAXPLAYERS];
; 3137 : 
; 3138 : 	for (c = 0; c < MAXPLAYERS; c++)

  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@P_Superman
$LN2@P_Superman:
  00026	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
$LN4@P_Superman:
  0002f	83 7d f8 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  00033	7d 52		 jge	 SHORT $LN3@P_Superman

; 3139 : 	{
; 3140 : 		if (playeringame[c])

  00035	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00038	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00040	74 43		 je	 SHORT $LN5@P_Superman

; 3141 : 		{
; 3142 : 			if (players[c].health <= 0)

  00042	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _c$[ebp], 508
  00049	83 b8 28 00 00
	00 00		 cmp	 DWORD PTR _players[eax+40], 0
  00050	7f 02		 jg	 SHORT $LN6@P_Superman

; 3143 : 				continue; // dead

  00052	eb d2		 jmp	 SHORT $LN2@P_Superman
$LN6@P_Superman:

; 3144 : 
; 3145 : 			if (!players[c].mo)

  00054	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _c$[ebp], 508
  0005b	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00062	75 02		 jne	 SHORT $LN7@P_Superman

; 3146 : 				continue;

  00064	eb c0		 jmp	 SHORT $LN2@P_Superman
$LN7@P_Superman:

; 3147 : 
; 3148 : 			playersinthegame[stop] = &players[c];

  00066	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _c$[ebp], 508
  0006d	05 00 00 00 00	 add	 eax, OFFSET _players
  00072	8b 4d f4	 mov	 ecx, DWORD PTR _stop$[ebp]
  00075	89 84 8d 74 ff
	ff ff		 mov	 DWORD PTR _playersinthegame$[ebp+ecx*4], eax

; 3149 : 			stop++;

  0007c	8b 45 f4	 mov	 eax, DWORD PTR _stop$[ebp]
  0007f	83 c0 01	 add	 eax, 1
  00082	89 45 f4	 mov	 DWORD PTR _stop$[ebp], eax
$LN5@P_Superman:

; 3150 : 		}
; 3151 : 	}

  00085	eb 9f		 jmp	 SHORT $LN2@P_Superman
$LN3@P_Superman:

; 3152 : 
; 3153 : 	if (!stop)

  00087	83 7d f4 00	 cmp	 DWORD PTR _stop$[ebp], 0
  0008b	75 04		 jne	 SHORT $LN8@P_Superman

; 3154 : 		return false;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 2d		 jmp	 SHORT $LN1@P_Superman
$LN8@P_Superman:

; 3155 : 
; 3156 : 	P_SetTarget(&actor->target, playersinthegame[P_Random()%stop]->mo);

  00091	e8 00 00 00 00	 call	 _P_Random
  00096	0f b6 c0	 movzx	 eax, al
  00099	99		 cdq
  0009a	f7 7d f4	 idiv	 DWORD PTR _stop$[ebp]
  0009d	8b 84 95 74 ff
	ff ff		 mov	 eax, DWORD PTR _playersinthegame$[ebp+edx*4]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	51		 push	 ecx
  000a7	8b 55 08	 mov	 edx, DWORD PTR _actor$[ebp]
  000aa	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 _P_SetTarget
  000b6	83 c4 08	 add	 esp, 8

; 3157 : 	return true;

  000b9	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_Superman:

; 3158 : }

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c4	33 cd		 xor	 ecx, ebp
  000c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_P_SupermanLook4Players ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnParaloop
_TEXT	SEGMENT
_mobjz$ = -288						; size = 4
_mobjy$ = -284						; size = 4
_mobjx$ = -280						; size = 4
_closestangle$ = -276					; size = 4
_fa$ = -272						; size = 4
_degrees$ = -268					; size = 4
_hoopcenter$ = -264					; size = 212
_dist$ = -52						; size = 4
_finalz$ = -48						; size = 4
_finaly$ = -44						; size = 4
_finalx$ = -40						; size = 4
_res$ = -36						; size = 4
_v$ = -32						; size = 16
_i$ = -16						; size = 4
_ghost$ = -12						; size = 4
_mobj$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_radius$ = 20						; size = 4
_number$ = 24						; size = 4
_type$ = 28						; size = 4
_rotangle$ = 32						; size = 4
_spawncenter$ = 36					; size = 4
_ghostit$ = 40						; size = 4
_P_SpawnParaloop PROC					; COMDAT

; 4532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4533 : 	mobj_t *mobj;
; 4534 : 	mobj_t *ghost = NULL;

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ghost$[ebp], 0

; 4535 : 	INT32 i;
; 4536 : 	TVector v;
; 4537 : 	TVector *res;
; 4538 : 	fixed_t finalx, finaly, finalz, dist;
; 4539 : 	mobj_t hoopcenter;
; 4540 : 	angle_t degrees, fa, closestangle;
; 4541 : 	fixed_t mobjx, mobjy, mobjz;
; 4542 : 
; 4543 : 	hoopcenter.x = x;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00020	89 85 08 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+16], eax

; 4544 : 	hoopcenter.y = y;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00029	89 85 0c ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+20], eax

; 4545 : 	hoopcenter.z = z;

  0002f	8b 45 10	 mov	 eax, DWORD PTR _z$[ebp]
  00032	89 85 10 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+24], eax

; 4546 : 
; 4547 : 	hoopcenter.z = z - mobjinfo[type].height/2;

  00038	6b 45 1c 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  0003c	8b 80 44 00 00
	00		 mov	 eax, DWORD PTR _mobjinfo[eax+68]
  00042	99		 cdq
  00043	2b c2		 sub	 eax, edx
  00045	d1 f8		 sar	 eax, 1
  00047	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  0004a	2b c8		 sub	 ecx, eax
  0004c	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+24], ecx

; 4548 : 
; 4549 : 	degrees = FINEANGLES/number;

  00052	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H
  00057	99		 cdq
  00058	f7 7d 18	 idiv	 DWORD PTR _number$[ebp]
  0005b	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _degrees$[ebp], eax

; 4550 : 
; 4551 : 	radius = FixedDiv(radius,5*(FRACUNIT/4));

  00061	68 00 40 01 00	 push	 81920			; 00014000H
  00066	8b 45 14	 mov	 eax, DWORD PTR _radius$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _FixedDiv
  0006f	83 c4 08	 add	 esp, 8
  00072	89 45 14	 mov	 DWORD PTR _radius$[ebp], eax

; 4552 : 
; 4553 : 	closestangle = 0;

  00075	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _closestangle$[ebp], 0

; 4554 : 
; 4555 : 	// Create the hoop!
; 4556 : 	for (i = 0; i < number; i++)

  0007f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00086	eb 09		 jmp	 SHORT $LN4@P_SpawnPar
$LN2@P_SpawnPar:
  00088	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0008b	83 c0 01	 add	 eax, 1
  0008e	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_SpawnPar:
  00091	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00094	3b 45 18	 cmp	 eax, DWORD PTR _number$[ebp]
  00097	0f 8d 11 03 00
	00		 jge	 $LN3@P_SpawnPar

; 4557 : 	{
; 4558 : 		fa = (i*degrees);

  0009d	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000a0	0f af 85 f4 fe
	ff ff		 imul	 eax, DWORD PTR _degrees$[ebp]
  000a7	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _fa$[ebp], eax

; 4559 : 		v[0] = FixedMul(FINECOSINE(fa),radius);

  000ad	8b 45 14	 mov	 eax, DWORD PTR _radius$[ebp]
  000b0	50		 push	 eax
  000b1	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$[ebp]
  000b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  000bd	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _FixedMul
  000c6	83 c4 08	 add	 esp, 8
  000c9	b9 04 00 00 00	 mov	 ecx, 4
  000ce	6b d1 00	 imul	 edx, ecx, 0
  000d1	89 44 15 e0	 mov	 DWORD PTR _v$[ebp+edx], eax

; 4560 : 		v[1] = 0;

  000d5	b8 04 00 00 00	 mov	 eax, 4
  000da	c1 e0 00	 shl	 eax, 0
  000dd	c7 44 05 e0 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 4561 : 		v[2] = FixedMul(FINESINE(fa),radius);

  000e5	8b 45 14	 mov	 eax, DWORD PTR _radius$[ebp]
  000e8	50		 push	 eax
  000e9	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$[ebp]
  000ef	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _FixedMul
  000fc	83 c4 08	 add	 esp, 8
  000ff	b9 04 00 00 00	 mov	 ecx, 4
  00104	d1 e1		 shl	 ecx, 1
  00106	89 44 0d e0	 mov	 DWORD PTR _v$[ebp+ecx], eax

; 4562 : 		v[3] = FRACUNIT;

  0010a	b8 04 00 00 00	 mov	 eax, 4
  0010f	6b c8 03	 imul	 ecx, eax, 3
  00112	c7 44 0d e0 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 4563 : 
; 4564 : 		res = VectorMatrixMultiply(v, *RotateXMatrix(rotangle));

  0011a	8b 45 20	 mov	 eax, DWORD PTR _rotangle$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _RotateXMatrix
  00123	83 c4 04	 add	 esp, 4
  00126	50		 push	 eax
  00127	8d 4d e0	 lea	 ecx, DWORD PTR _v$[ebp]
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00130	83 c4 08	 add	 esp, 8
  00133	89 45 dc	 mov	 DWORD PTR _res$[ebp], eax

; 4565 : 		M_Memcpy(&v, res, sizeof (v));

  00136	6a 10		 push	 16			; 00000010H
  00138	8b 45 dc	 mov	 eax, DWORD PTR _res$[ebp]
  0013b	50		 push	 eax
  0013c	8d 4d e0	 lea	 ecx, DWORD PTR _v$[ebp]
  0013f	51		 push	 ecx
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00146	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4566 : 		res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  00149	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _closestangle$[ebp]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _RotateZMatrix
  00155	83 c4 04	 add	 esp, 4
  00158	50		 push	 eax
  00159	8d 4d e0	 lea	 ecx, DWORD PTR _v$[ebp]
  0015c	51		 push	 ecx
  0015d	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00162	83 c4 08	 add	 esp, 8
  00165	89 45 dc	 mov	 DWORD PTR _res$[ebp], eax

; 4567 : 		M_Memcpy(&v, res, sizeof (v));

  00168	6a 10		 push	 16			; 00000010H
  0016a	8b 45 dc	 mov	 eax, DWORD PTR _res$[ebp]
  0016d	50		 push	 eax
  0016e	8d 4d e0	 lea	 ecx, DWORD PTR _v$[ebp]
  00171	51		 push	 ecx
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00178	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4568 : 
; 4569 : 		finalx = x + v[0];

  0017b	b8 04 00 00 00	 mov	 eax, 4
  00180	6b c8 00	 imul	 ecx, eax, 0
  00183	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00186	03 54 0d e0	 add	 edx, DWORD PTR _v$[ebp+ecx]
  0018a	89 55 d8	 mov	 DWORD PTR _finalx$[ebp], edx

; 4570 : 		finaly = y + v[1];

  0018d	b8 04 00 00 00	 mov	 eax, 4
  00192	c1 e0 00	 shl	 eax, 0
  00195	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00198	03 4c 05 e0	 add	 ecx, DWORD PTR _v$[ebp+eax]
  0019c	89 4d d4	 mov	 DWORD PTR _finaly$[ebp], ecx

; 4571 : 		finalz = z + v[2];

  0019f	b8 04 00 00 00	 mov	 eax, 4
  001a4	d1 e0		 shl	 eax, 1
  001a6	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  001a9	03 4c 05 e0	 add	 ecx, DWORD PTR _v$[ebp+eax]
  001ad	89 4d d0	 mov	 DWORD PTR _finalz$[ebp], ecx

; 4572 : 
; 4573 : 		mobj = P_SpawnMobj(finalx, finaly, finalz, type);

  001b0	8b 45 1c	 mov	 eax, DWORD PTR _type$[ebp]
  001b3	50		 push	 eax
  001b4	8b 4d d0	 mov	 ecx, DWORD PTR _finalz$[ebp]
  001b7	51		 push	 ecx
  001b8	8b 55 d4	 mov	 edx, DWORD PTR _finaly$[ebp]
  001bb	52		 push	 edx
  001bc	8b 45 d8	 mov	 eax, DWORD PTR _finalx$[ebp]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 _P_SpawnMobj
  001c5	83 c4 10	 add	 esp, 16			; 00000010H
  001c8	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 4574 : 
; 4575 : 		mobj->z -= mobj->height>>1;

  001cb	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ce	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  001d1	d1 f9		 sar	 ecx, 1
  001d3	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  001d6	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001d9	2b c1		 sub	 eax, ecx
  001db	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001de	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 4576 : 
; 4577 : 		// change angle
; 4578 : 		mobj->angle = R_PointToAngle2(mobj->x, mobj->y, x, y);

  001e1	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  001e4	50		 push	 eax
  001e5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001e8	51		 push	 ecx
  001e9	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  001ec	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001ef	50		 push	 eax
  001f0	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001f3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001f6	52		 push	 edx
  001f7	e8 00 00 00 00	 call	 _R_PointToAngle2
  001fc	83 c4 10	 add	 esp, 16			; 00000010H
  001ff	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00202	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4579 : 
; 4580 : 		// change slope
; 4581 : 		dist = P_AproxDistance(P_AproxDistance(x - mobj->x, y - mobj->y), z - mobj->z);

  00205	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00208	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  0020b	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  0020e	51		 push	 ecx
  0020f	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00212	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00215	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00218	50		 push	 eax
  00219	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0021c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0021f	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00222	52		 push	 edx
  00223	e8 00 00 00 00	 call	 _P_AproxDistance
  00228	83 c4 08	 add	 esp, 8
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 _P_AproxDistance
  00231	83 c4 08	 add	 esp, 8
  00234	89 45 cc	 mov	 DWORD PTR _dist$[ebp], eax

; 4582 : 
; 4583 : 		if (dist < 1)

  00237	83 7d cc 01	 cmp	 DWORD PTR _dist$[ebp], 1
  0023b	7d 07		 jge	 SHORT $LN5@P_SpawnPar

; 4584 : 			dist = 1;

  0023d	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _dist$[ebp], 1
$LN5@P_SpawnPar:

; 4585 : 
; 4586 : 		mobjx = mobj->x;

  00244	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00247	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0024a	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _mobjx$[ebp], ecx

; 4587 : 		mobjy = mobj->y;

  00250	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00253	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00256	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _mobjy$[ebp], ecx

; 4588 : 		mobjz = mobj->z;

  0025c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0025f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00262	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _mobjz$[ebp], ecx

; 4589 : 
; 4590 : 		if (ghostit)

  00268	83 7d 28 00	 cmp	 DWORD PTR _ghostit$[ebp], 0
  0026c	74 26		 je	 SHORT $LN6@P_SpawnPar

; 4591 : 		{
; 4592 : 			ghost = P_SpawnGhostMobj(mobj);

  0026e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 _P_SpawnGhostMobj
  00277	83 c4 04	 add	 esp, 4
  0027a	89 45 f4	 mov	 DWORD PTR _ghost$[ebp], eax

; 4593 : 			P_SetMobjState(mobj, S_DISS);

  0027d	68 4f 06 00 00	 push	 1615			; 0000064fH
  00282	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 _P_SetMobjState
  0028b	83 c4 08	 add	 esp, 8

; 4594 : 			mobj = ghost;

  0028e	8b 45 f4	 mov	 eax, DWORD PTR _ghost$[ebp]
  00291	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax
$LN6@P_SpawnPar:

; 4595 : 		}
; 4596 : 
; 4597 : 		mobj->momx = FixedMul(FixedDiv(x - mobjx, dist), 5*FRACUNIT);

  00294	68 00 00 05 00	 push	 327680			; 00050000H
  00299	8b 45 cc	 mov	 eax, DWORD PTR _dist$[ebp]
  0029c	50		 push	 eax
  0029d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  002a0	2b 8d e8 fe ff
	ff		 sub	 ecx, DWORD PTR _mobjx$[ebp]
  002a6	51		 push	 ecx
  002a7	e8 00 00 00 00	 call	 _FixedDiv
  002ac	83 c4 08	 add	 esp, 8
  002af	50		 push	 eax
  002b0	e8 00 00 00 00	 call	 _FixedMul
  002b5	83 c4 08	 add	 esp, 8
  002b8	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  002bb	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 4598 : 		mobj->momy = FixedMul(FixedDiv(y - mobjy, dist), 5*FRACUNIT);

  002be	68 00 00 05 00	 push	 327680			; 00050000H
  002c3	8b 45 cc	 mov	 eax, DWORD PTR _dist$[ebp]
  002c6	50		 push	 eax
  002c7	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  002ca	2b 8d e4 fe ff
	ff		 sub	 ecx, DWORD PTR _mobjy$[ebp]
  002d0	51		 push	 ecx
  002d1	e8 00 00 00 00	 call	 _FixedDiv
  002d6	83 c4 08	 add	 esp, 8
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 _FixedMul
  002df	83 c4 08	 add	 esp, 8
  002e2	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  002e5	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 4599 : 		mobj->momz = FixedMul(FixedDiv(z - mobjz, dist), 5*FRACUNIT);

  002e8	68 00 00 05 00	 push	 327680			; 00050000H
  002ed	8b 45 cc	 mov	 eax, DWORD PTR _dist$[ebp]
  002f0	50		 push	 eax
  002f1	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  002f4	2b 8d e0 fe ff
	ff		 sub	 ecx, DWORD PTR _mobjz$[ebp]
  002fa	51		 push	 ecx
  002fb	e8 00 00 00 00	 call	 _FixedDiv
  00300	83 c4 08	 add	 esp, 8
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 _FixedMul
  00309	83 c4 08	 add	 esp, 8
  0030c	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0030f	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 4600 : 		mobj->fuse = (radius>>(FRACBITS+2)) + 1;

  00312	8b 45 14	 mov	 eax, DWORD PTR _radius$[ebp]
  00315	c1 f8 12	 sar	 eax, 18			; 00000012H
  00318	83 c0 01	 add	 eax, 1
  0031b	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0031e	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 4601 : 
; 4602 : 		if (spawncenter)

  00324	83 7d 24 00	 cmp	 DWORD PTR _spawncenter$[ebp], 0
  00328	74 1b		 je	 SHORT $LN7@P_SpawnPar

; 4603 : 		{
; 4604 : 			mobj->x = x;

  0032a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0032d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00330	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4605 : 			mobj->y = y;

  00333	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00336	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00339	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4606 : 			mobj->z = z;

  0033c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0033f	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  00342	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN7@P_SpawnPar:

; 4607 : 		}
; 4608 : 
; 4609 : 		if (mobj->fuse <= 1)

  00345	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00348	83 b8 bc 00 00
	00 01		 cmp	 DWORD PTR [eax+188], 1
  0034f	7f 0d		 jg	 SHORT $LN8@P_SpawnPar

; 4610 : 			mobj->fuse = 2;

  00351	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00354	c7 80 bc 00 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+188], 2
$LN8@P_SpawnPar:

; 4611 : 
; 4612 : 		mobj->flags |= MF_NOCLIPTHING;

  0035e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00361	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00364	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  0036a	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0036d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 4613 : 		mobj->flags &= ~MF_SPECIAL;

  00370	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00373	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00376	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00379	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0037c	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 4614 : 
; 4615 : 		if (mobj->fuse > 7)

  0037f	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00382	83 b8 bc 00 00
	00 07		 cmp	 DWORD PTR [eax+188], 7
  00389	7e 14		 jle	 SHORT $LN9@P_SpawnPar

; 4616 : 			mobj->tics = mobj->fuse - 7;

  0038b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0038e	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00394	83 e9 07	 sub	 ecx, 7
  00397	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0039a	89 4a 58	 mov	 DWORD PTR [edx+88], ecx
  0039d	eb 0a		 jmp	 SHORT $LN10@P_SpawnPar
$LN9@P_SpawnPar:

; 4617 : 		else
; 4618 : 			mobj->tics = 1;

  0039f	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  003a2	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1
$LN10@P_SpawnPar:

; 4619 : 	}

  003a9	e9 da fc ff ff	 jmp	 $LN2@P_SpawnPar
$LN3@P_SpawnPar:

; 4620 : }

  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b4	33 cd		 xor	 ecx, ebp
  003b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003bb	8b e5		 mov	 esp, ebp
  003bd	5d		 pop	 ebp
  003be	c3		 ret	 0
_P_SpawnParaloop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnPrecipitation
_TEXT	SEGMENT
_rainloop$1 = -36					; size = 4
_z$2 = -29						; size = 1
_snowloop$3 = -28					; size = 4
_precipsector$ = -24					; size = 4
_height$ = -20						; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_i$ = -8						; size = 4
_preloop$ = -4						; size = 4
_P_SpawnPrecipitation PROC				; COMDAT

; 6752 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6753 : 	const INT32 preloop = 1048576*12;

  00009	c7 45 fc 00 00
	c0 00		 mov	 DWORD PTR _preloop$[ebp], 12582912 ; 00c00000H

; 6754 : 	INT32 i;
; 6755 : 	fixed_t x = 0, y = 0, height;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00017	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 6756 : 	subsector_t *precipsector = NULL;

  0001e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _precipsector$[ebp], 0

; 6757 : 
; 6758 : 	if (dedicated) return;

  00025	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  0002c	74 05		 je	 SHORT $LN8@P_SpawnPre
  0002e	e9 b5 02 00 00	 jmp	 $LN31@P_SpawnPre
$LN8@P_SpawnPre:

; 6759 : 
; 6760 : 	if (curWeather == PRECIP_SNOW)

  00033	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _curWeather, 2
  0003a	0f 85 63 01 00
	00		 jne	 $LN9@P_SpawnPre

; 6761 : 	{
; 6762 : 		const INT32 snowloop = preloop / cv_precipdensity.value;

  00040	8b 45 fc	 mov	 eax, DWORD PTR _preloop$[ebp]
  00043	99		 cdq
  00044	f7 3d 14 00 00
	00		 idiv	 DWORD PTR _cv_precipdensity+20
  0004a	89 45 e4	 mov	 DWORD PTR _snowloop$3[ebp], eax

; 6763 : 		UINT8 z = 0;

  0004d	c6 45 e3 00	 mov	 BYTE PTR _z$2[ebp], 0

; 6764 : 
; 6765 : 		for (i = 0; i < snowloop; i++)

  00051	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00058	eb 09		 jmp	 SHORT $LN4@P_SpawnPre
$LN2@P_SpawnPre:
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0005d	83 c0 01	 add	 eax, 1
  00060	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_SpawnPre:
  00063	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00066	3b 45 e4	 cmp	 eax, DWORD PTR _snowloop$3[ebp]
  00069	0f 8d 2f 01 00
	00		 jge	 $LN3@P_SpawnPre

; 6766 : 		{
; 6767 : 			x = P_Rand();

  0006f	e8 00 00 00 00	 call	 _P_Rand
  00074	89 45 f4	 mov	 DWORD PTR _x$[ebp], eax

; 6768 : 			y = P_Rand();

  00077	e8 00 00 00 00	 call	 _P_Rand
  0007c	89 45 f0	 mov	 DWORD PTR _y$[ebp], eax

; 6769 : 			height = P_Rand();

  0007f	e8 00 00 00 00	 call	 _P_Rand
  00084	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 6770 : 
; 6771 : 			precipsector = R_IsPointInSubsector(x, y);

  00087	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  0008a	50		 push	 eax
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _R_IsPointInSubsector
  00094	83 c4 08	 add	 esp, 8
  00097	89 45 e8	 mov	 DWORD PTR _precipsector$[ebp], eax

; 6772 : 
; 6773 : 			if (!precipsector)

  0009a	83 7d e8 00	 cmp	 DWORD PTR _precipsector$[ebp], 0
  0009e	75 02		 jne	 SHORT $LN11@P_SpawnPre

; 6774 : 				continue;

  000a0	eb b8		 jmp	 SHORT $LN2@P_SpawnPre
$LN11@P_SpawnPre:

; 6775 : 
; 6776 : 			if (!(maptol & TOL_NIGHTS) && !(precipsector->sector->ceilingpic == skyflatnum))

  000a2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  000a9	83 e0 40	 and	 eax, 64			; 00000040H
  000ac	75 12		 jne	 SHORT $LN12@P_SpawnPre
  000ae	8b 45 e8	 mov	 eax, DWORD PTR _precipsector$[ebp]
  000b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000b6	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  000bc	74 02		 je	 SHORT $LN12@P_SpawnPre

; 6777 : 				continue;

  000be	eb 9a		 jmp	 SHORT $LN2@P_SpawnPre
$LN12@P_SpawnPre:

; 6778 : 
; 6779 : 			if (!(precipsector->sector->floorheight <= precipsector->sector->ceilingheight - (32<<FRACBITS)))

  000c0	8b 45 e8	 mov	 eax, DWORD PTR _precipsector$[ebp]
  000c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c5	8b 55 e8	 mov	 edx, DWORD PTR _precipsector$[ebp]
  000c8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ca	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000cd	81 ea 00 00 20
	00		 sub	 edx, 2097152		; 00200000H
  000d3	39 11		 cmp	 DWORD PTR [ecx], edx
  000d5	7e 02		 jle	 SHORT $LN13@P_SpawnPre

; 6780 : 				continue;

  000d7	eb 81		 jmp	 SHORT $LN2@P_SpawnPre
$LN13@P_SpawnPre:

; 6781 : 
; 6782 : 			if (height < precipsector->sector->floorheight ||

  000d9	8b 45 e8	 mov	 eax, DWORD PTR _precipsector$[ebp]
  000dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000de	8b 55 ec	 mov	 edx, DWORD PTR _height$[ebp]
  000e1	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000e3	7c 0d		 jl	 SHORT $LN15@P_SpawnPre
  000e5	8b 45 e8	 mov	 eax, DWORD PTR _precipsector$[ebp]
  000e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ea	8b 55 ec	 mov	 edx, DWORD PTR _height$[ebp]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	7c 05		 jl	 SHORT $LN14@P_SpawnPre
$LN15@P_SpawnPre:

; 6783 : 				height >= precipsector->sector->ceilingheight)
; 6784 : 				continue;

  000f2	e9 63 ff ff ff	 jmp	 $LN2@P_SpawnPre
$LN14@P_SpawnPre:

; 6785 : 
; 6786 : 			if (P_ObjectInWater(precipsector->sector, height))

  000f7	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  000fa	50		 push	 eax
  000fb	8b 4d e8	 mov	 ecx, DWORD PTR _precipsector$[ebp]
  000fe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 _P_ObjectInWater
  00106	83 c4 08	 add	 esp, 8
  00109	85 c0		 test	 eax, eax
  0010b	74 05		 je	 SHORT $LN16@P_SpawnPre

; 6787 : 				continue;

  0010d	e9 48 ff ff ff	 jmp	 $LN2@P_SpawnPre
$LN16@P_SpawnPre:

; 6788 : 
; 6789 : 			z = M_Random(); // Doesn't need to use P_Random().

  00112	e8 00 00 00 00	 call	 _M_Random
  00117	88 45 e3	 mov	 BYTE PTR _z$2[ebp], al

; 6790 : 			if (z < 64)

  0011a	0f b6 45 e3	 movzx	 eax, BYTE PTR _z$2[ebp]
  0011e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00121	7d 29		 jge	 SHORT $LN17@P_SpawnPre

; 6791 : 				P_SetPrecipMobjState(P_SpawnSnowMobj(x, y, height, MT_SNOWFLAKE), S_SNOW3);

  00123	68 ba 03 00 00	 push	 954			; 000003baH
  00128	68 b4 00 00 00	 push	 180			; 000000b4H
  0012d	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00130	50		 push	 eax
  00131	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  00134	51		 push	 ecx
  00135	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  00138	52		 push	 edx
  00139	e8 00 00 00 00	 call	 _P_SpawnSnowMobj
  0013e	83 c4 10	 add	 esp, 16			; 00000010H
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _P_SetPrecipMobjState
  00147	83 c4 08	 add	 esp, 8
  0014a	eb 4d		 jmp	 SHORT $LN20@P_SpawnPre
$LN17@P_SpawnPre:

; 6792 : 			else if (z < 144)

  0014c	0f b6 45 e3	 movzx	 eax, BYTE PTR _z$2[ebp]
  00150	3d 90 00 00 00	 cmp	 eax, 144		; 00000090H
  00155	7d 29		 jge	 SHORT $LN19@P_SpawnPre

; 6793 : 				P_SetPrecipMobjState(P_SpawnSnowMobj(x, y, height, MT_SNOWFLAKE), S_SNOW2);

  00157	68 b9 03 00 00	 push	 953			; 000003b9H
  0015c	68 b4 00 00 00	 push	 180			; 000000b4H
  00161	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00164	50		 push	 eax
  00165	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  00168	51		 push	 ecx
  00169	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  0016c	52		 push	 edx
  0016d	e8 00 00 00 00	 call	 _P_SpawnSnowMobj
  00172	83 c4 10	 add	 esp, 16			; 00000010H
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _P_SetPrecipMobjState
  0017b	83 c4 08	 add	 esp, 8
  0017e	eb 19		 jmp	 SHORT $LN20@P_SpawnPre
$LN19@P_SpawnPre:

; 6794 : 			else
; 6795 : 				P_SpawnSnowMobj(x, y, height, MT_SNOWFLAKE);

  00180	68 b4 00 00 00	 push	 180			; 000000b4H
  00185	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00188	50		 push	 eax
  00189	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  0018c	51		 push	 ecx
  0018d	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 _P_SpawnSnowMobj
  00196	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@P_SpawnPre:

; 6796 : 		}

  00199	e9 bc fe ff ff	 jmp	 $LN2@P_SpawnPre
$LN3@P_SpawnPre:

; 6797 : 	}

  0019e	e9 09 01 00 00	 jmp	 $LN6@P_SpawnPre
$LN9@P_SpawnPre:

; 6798 : 	else if (curWeather == PRECIP_STORM || curWeather == PRECIP_RAIN || curWeather == PRECIP_BLANK
; 6799 : 		|| curWeather == PRECIP_STORM_NORAIN || curWeather == PRECIP_STORM_NOSTRIKES)

  001a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _curWeather, 1
  001aa	74 28		 je	 SHORT $LN22@P_SpawnPre
  001ac	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _curWeather, 3
  001b3	74 1f		 je	 SHORT $LN22@P_SpawnPre
  001b5	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR _curWeather, 4
  001bc	74 16		 je	 SHORT $LN22@P_SpawnPre
  001be	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _curWeather, 5
  001c5	74 0d		 je	 SHORT $LN22@P_SpawnPre
  001c7	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _curWeather, 6
  001ce	0f 85 d8 00 00
	00		 jne	 $LN6@P_SpawnPre
$LN22@P_SpawnPre:

; 6800 : 	{
; 6801 : 		const INT32 rainloop = preloop / cv_precipdensity.value;

  001d4	8b 45 fc	 mov	 eax, DWORD PTR _preloop$[ebp]
  001d7	99		 cdq
  001d8	f7 3d 14 00 00
	00		 idiv	 DWORD PTR _cv_precipdensity+20
  001de	89 45 dc	 mov	 DWORD PTR _rainloop$1[ebp], eax

; 6802 : 
; 6803 : 		for (i = 0; i < rainloop; i++)

  001e1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001e8	eb 09		 jmp	 SHORT $LN7@P_SpawnPre
$LN5@P_SpawnPre:
  001ea	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001ed	83 c0 01	 add	 eax, 1
  001f0	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@P_SpawnPre:
  001f3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001f6	3b 45 dc	 cmp	 eax, DWORD PTR _rainloop$1[ebp]
  001f9	0f 8d ad 00 00
	00		 jge	 $LN6@P_SpawnPre

; 6804 : 		{
; 6805 : 			x = P_Rand();

  001ff	e8 00 00 00 00	 call	 _P_Rand
  00204	89 45 f4	 mov	 DWORD PTR _x$[ebp], eax

; 6806 : 			y = P_Rand();

  00207	e8 00 00 00 00	 call	 _P_Rand
  0020c	89 45 f0	 mov	 DWORD PTR _y$[ebp], eax

; 6807 : 			height = P_Rand();

  0020f	e8 00 00 00 00	 call	 _P_Rand
  00214	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 6808 : 
; 6809 : 			precipsector = R_IsPointInSubsector(x, y);

  00217	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  0021a	50		 push	 eax
  0021b	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  0021e	51		 push	 ecx
  0021f	e8 00 00 00 00	 call	 _R_IsPointInSubsector
  00224	83 c4 08	 add	 esp, 8
  00227	89 45 e8	 mov	 DWORD PTR _precipsector$[ebp], eax

; 6810 : 
; 6811 : 			if (!precipsector)

  0022a	83 7d e8 00	 cmp	 DWORD PTR _precipsector$[ebp], 0
  0022e	75 02		 jne	 SHORT $LN23@P_SpawnPre

; 6812 : 				continue;

  00230	eb b8		 jmp	 SHORT $LN5@P_SpawnPre
$LN23@P_SpawnPre:

; 6813 : 
; 6814 : 			if (!(precipsector->sector->ceilingpic == skyflatnum && precipsector->sector->floorheight < precipsector->sector->ceilingheight))

  00232	8b 45 e8	 mov	 eax, DWORD PTR _precipsector$[ebp]
  00235	8b 08		 mov	 ecx, DWORD PTR [eax]
  00237	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0023a	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _skyflatnum
  00240	75 11		 jne	 SHORT $LN25@P_SpawnPre
  00242	8b 45 e8	 mov	 eax, DWORD PTR _precipsector$[ebp]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	8b 55 e8	 mov	 edx, DWORD PTR _precipsector$[ebp]
  0024a	8b 02		 mov	 eax, DWORD PTR [edx]
  0024c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0024e	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00251	7c 02		 jl	 SHORT $LN24@P_SpawnPre
$LN25@P_SpawnPre:

; 6815 : 				continue;

  00253	eb 95		 jmp	 SHORT $LN5@P_SpawnPre
$LN24@P_SpawnPre:

; 6816 : 
; 6817 : 			if (height < precipsector->sector->floorheight ||

  00255	8b 45 e8	 mov	 eax, DWORD PTR _precipsector$[ebp]
  00258	8b 08		 mov	 ecx, DWORD PTR [eax]
  0025a	8b 55 ec	 mov	 edx, DWORD PTR _height$[ebp]
  0025d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0025f	7c 0d		 jl	 SHORT $LN27@P_SpawnPre
  00261	8b 45 e8	 mov	 eax, DWORD PTR _precipsector$[ebp]
  00264	8b 08		 mov	 ecx, DWORD PTR [eax]
  00266	8b 55 ec	 mov	 edx, DWORD PTR _height$[ebp]
  00269	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0026c	7c 05		 jl	 SHORT $LN26@P_SpawnPre
$LN27@P_SpawnPre:

; 6818 : 					height >= precipsector->sector->ceilingheight)
; 6819 : 				continue;

  0026e	e9 77 ff ff ff	 jmp	 $LN5@P_SpawnPre
$LN26@P_SpawnPre:

; 6820 : 
; 6821 : 			if (P_ObjectInWater(precipsector->sector, height))

  00273	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00276	50		 push	 eax
  00277	8b 4d e8	 mov	 ecx, DWORD PTR _precipsector$[ebp]
  0027a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0027c	52		 push	 edx
  0027d	e8 00 00 00 00	 call	 _P_ObjectInWater
  00282	83 c4 08	 add	 esp, 8
  00285	85 c0		 test	 eax, eax
  00287	74 05		 je	 SHORT $LN28@P_SpawnPre

; 6822 : 				continue;

  00289	e9 5c ff ff ff	 jmp	 $LN5@P_SpawnPre
$LN28@P_SpawnPre:

; 6823 : 
; 6824 : 			P_SpawnRainMobj(x, y, height, MT_RAIN);

  0028e	68 b3 00 00 00	 push	 179			; 000000b3H
  00293	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00296	50		 push	 eax
  00297	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  0029a	51		 push	 ecx
  0029b	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  0029e	52		 push	 edx
  0029f	e8 00 00 00 00	 call	 _P_SpawnRainMobj
  002a4	83 c4 10	 add	 esp, 16			; 00000010H

; 6825 : 		}

  002a7	e9 3e ff ff ff	 jmp	 $LN5@P_SpawnPre
$LN6@P_SpawnPre:

; 6826 : 	}
; 6827 : 
; 6828 : 	if (curWeather == PRECIP_BLANK)

  002ac	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR _curWeather, 4
  002b3	75 16		 jne	 SHORT $LN29@P_SpawnPre

; 6829 : 	{
; 6830 : 		curWeather = PRECIP_RAIN;

  002b5	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _curWeather, 3

; 6831 : 		P_SwitchWeather(PRECIP_BLANK);

  002bf	6a 04		 push	 4
  002c1	e8 00 00 00 00	 call	 _P_SwitchWeather
  002c6	83 c4 04	 add	 esp, 4

; 6832 : 	}

  002c9	eb 1d		 jmp	 SHORT $LN31@P_SpawnPre
$LN29@P_SpawnPre:

; 6833 : 	else if (curWeather == PRECIP_STORM_NORAIN)

  002cb	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _curWeather, 5
  002d2	75 14		 jne	 SHORT $LN31@P_SpawnPre

; 6834 : 	{
; 6835 : 		curWeather = PRECIP_RAIN;

  002d4	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _curWeather, 3

; 6836 : 		P_SwitchWeather(PRECIP_STORM_NORAIN);

  002de	6a 05		 push	 5
  002e0	e8 00 00 00 00	 call	 _P_SwitchWeather
  002e5	83 c4 04	 add	 esp, 4
$LN31@P_SpawnPre:

; 6837 : 	}
; 6838 : }

  002e8	5f		 pop	 edi
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx
  002eb	8b e5		 mov	 esp, ebp
  002ed	5d		 pop	 ebp
  002ee	c3		 ret	 0
_P_SpawnPrecipitation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnHoopOfSomething
_TEXT	SEGMENT
_closestangle$ = -300					; size = 4
_fa$ = -296						; size = 4
_degrees$ = -292					; size = 4
_xypos$ = -288						; size = 28
_axis$ = -260						; size = 4
_hoopcenter$ = -256					; size = 212
_finalz$ = -44						; size = 4
_finaly$ = -40						; size = 4
_finalx$ = -36						; size = 4
_res$ = -32						; size = 4
_v$ = -28						; size = 16
_i$ = -12						; size = 4
_mobj$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_radius$ = 20						; size = 4
_number$ = 24						; size = 4
_type$ = 28						; size = 4
_rotangle$ = 32						; size = 4
_P_SpawnHoopOfSomething PROC				; COMDAT

; 4466 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4467 : 	mobj_t *mobj;
; 4468 : 	INT32 i;
; 4469 : 	TVector v;
; 4470 : 	TVector *res;
; 4471 : 	fixed_t finalx, finaly, finalz;
; 4472 : 	mobj_t hoopcenter;
; 4473 : 	mobj_t *axis;
; 4474 : 	degenmobj_t xypos;
; 4475 : 	angle_t degrees, fa, closestangle;
; 4476 : 
; 4477 : 	hoopcenter.x = x;

  00016	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00019	89 85 10 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+16], eax

; 4478 : 	hoopcenter.y = y;

  0001f	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00022	89 85 14 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+20], eax

; 4479 : 	hoopcenter.z = z;

  00028	8b 45 10	 mov	 eax, DWORD PTR _z$[ebp]
  0002b	89 85 18 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+24], eax

; 4480 : 
; 4481 : 	axis = P_GetClosestAxis(&hoopcenter);

  00031	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _hoopcenter$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _P_GetClosestAxis
  0003d	83 c4 04	 add	 esp, 4
  00040	89 85 fc fe ff
	ff		 mov	 DWORD PTR _axis$[ebp], eax

; 4482 : 
; 4483 : 	if (!axis)

  00046	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _axis$[ebp], 0
  0004d	75 12		 jne	 SHORT $LN5@P_SpawnHoo

; 4484 : 	{
; 4485 : 		CONS_Printf("You forgot to put axis points in the map!\n");

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LHKOFENN@You?5forgot?5to?5put?5axis?5points?5i@
  00054	e8 00 00 00 00	 call	 _CONS_Printf
  00059	83 c4 04	 add	 esp, 4

; 4486 : 		return;

  0005c	e9 12 02 00 00	 jmp	 $LN3@P_SpawnHoo
$LN5@P_SpawnHoo:

; 4487 : 	}
; 4488 : 
; 4489 : 	xypos.x = x;

  00061	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00064	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _xypos$[ebp+16], eax

; 4490 : 	xypos.y = y;

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0006d	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _xypos$[ebp+20], eax

; 4491 : 
; 4492 : 	P_GimmeAxisXYPos(axis, &xypos);

  00073	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _xypos$[ebp]
  00079	50		 push	 eax
  0007a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _axis$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _P_GimmeAxisXYPos
  00086	83 c4 08	 add	 esp, 8

; 4493 : 
; 4494 : 	x = xypos.x;

  00089	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _xypos$[ebp+16]
  0008f	89 45 08	 mov	 DWORD PTR _x$[ebp], eax

; 4495 : 	y = xypos.y;

  00092	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _xypos$[ebp+20]
  00098	89 45 0c	 mov	 DWORD PTR _y$[ebp], eax

; 4496 : 
; 4497 : 	hoopcenter.z = z - mobjinfo[type].height/2;

  0009b	6b 45 1c 60	 imul	 eax, DWORD PTR _type$[ebp], 96
  0009f	8b 80 44 00 00
	00		 mov	 eax, DWORD PTR _mobjinfo[eax+68]
  000a5	99		 cdq
  000a6	2b c2		 sub	 eax, edx
  000a8	d1 f8		 sar	 eax, 1
  000aa	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  000ad	2b c8		 sub	 ecx, eax
  000af	89 8d 18 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+24], ecx

; 4498 : 
; 4499 : 	hoopcenter.x = x;

  000b5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000b8	89 85 10 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+16], eax

; 4500 : 	hoopcenter.y = y;

  000be	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000c1	89 85 14 ff ff
	ff		 mov	 DWORD PTR _hoopcenter$[ebp+20], eax

; 4501 : 
; 4502 : 	closestangle = R_PointToAngle2(x, y, axis->x, axis->y);

  000c7	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _axis$[ebp]
  000cd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d0	51		 push	 ecx
  000d1	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _axis$[ebp]
  000d7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000da	50		 push	 eax
  000db	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000de	51		 push	 ecx
  000df	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _R_PointToAngle2
  000e8	83 c4 10	 add	 esp, 16			; 00000010H
  000eb	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _closestangle$[ebp], eax

; 4503 : 
; 4504 : 	degrees = FINEANGLES/number;

  000f1	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H
  000f6	99		 cdq
  000f7	f7 7d 18	 idiv	 DWORD PTR _number$[ebp]
  000fa	89 85 dc fe ff
	ff		 mov	 DWORD PTR _degrees$[ebp], eax

; 4505 : 
; 4506 : 	radius >>= FRACBITS;

  00100	8b 45 14	 mov	 eax, DWORD PTR _radius$[ebp]
  00103	c1 f8 10	 sar	 eax, 16			; 00000010H
  00106	89 45 14	 mov	 DWORD PTR _radius$[ebp], eax

; 4507 : 
; 4508 : 	// Create the hoop!
; 4509 : 	for (i = 0; i < number; i++)

  00109	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00110	eb 09		 jmp	 SHORT $LN4@P_SpawnHoo
$LN2@P_SpawnHoo:
  00112	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00115	83 c0 01	 add	 eax, 1
  00118	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_SpawnHoo:
  0011b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0011e	3b 45 18	 cmp	 eax, DWORD PTR _number$[ebp]
  00121	0f 8d 4c 01 00
	00		 jge	 $LN3@P_SpawnHoo

; 4510 : 	{
; 4511 : 		fa = (i*degrees);

  00127	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0012a	0f af 85 dc fe
	ff ff		 imul	 eax, DWORD PTR _degrees$[ebp]
  00131	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _fa$[ebp], eax

; 4512 : 		v[0] = FixedMul(FINECOSINE(fa),radius);

  00137	8b 45 14	 mov	 eax, DWORD PTR _radius$[ebp]
  0013a	50		 push	 eax
  0013b	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$[ebp]
  00141	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00147	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 _FixedMul
  00150	83 c4 08	 add	 esp, 8
  00153	b9 04 00 00 00	 mov	 ecx, 4
  00158	6b d1 00	 imul	 edx, ecx, 0
  0015b	89 44 15 e4	 mov	 DWORD PTR _v$[ebp+edx], eax

; 4513 : 		v[1] = 0;

  0015f	b8 04 00 00 00	 mov	 eax, 4
  00164	c1 e0 00	 shl	 eax, 0
  00167	c7 44 05 e4 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 4514 : 		v[2] = FixedMul(FINESINE(fa),radius);

  0016f	8b 45 14	 mov	 eax, DWORD PTR _radius$[ebp]
  00172	50		 push	 eax
  00173	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _fa$[ebp]
  00179	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00180	52		 push	 edx
  00181	e8 00 00 00 00	 call	 _FixedMul
  00186	83 c4 08	 add	 esp, 8
  00189	b9 04 00 00 00	 mov	 ecx, 4
  0018e	d1 e1		 shl	 ecx, 1
  00190	89 44 0d e4	 mov	 DWORD PTR _v$[ebp+ecx], eax

; 4515 : 		v[3] = FRACUNIT;

  00194	b8 04 00 00 00	 mov	 eax, 4
  00199	6b c8 03	 imul	 ecx, eax, 3
  0019c	c7 44 0d e4 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 4516 : 
; 4517 : 		res = VectorMatrixMultiply(v, *RotateXMatrix(rotangle));

  001a4	8b 45 20	 mov	 eax, DWORD PTR _rotangle$[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _RotateXMatrix
  001ad	83 c4 04	 add	 esp, 4
  001b0	50		 push	 eax
  001b1	8d 4d e4	 lea	 ecx, DWORD PTR _v$[ebp]
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  001ba	83 c4 08	 add	 esp, 8
  001bd	89 45 e0	 mov	 DWORD PTR _res$[ebp], eax

; 4518 : 		M_Memcpy(&v, res, sizeof (v));

  001c0	6a 10		 push	 16			; 00000010H
  001c2	8b 45 e0	 mov	 eax, DWORD PTR _res$[ebp]
  001c5	50		 push	 eax
  001c6	8d 4d e4	 lea	 ecx, DWORD PTR _v$[ebp]
  001c9	51		 push	 ecx
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  001d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4519 : 		res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  001d3	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _closestangle$[ebp]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 _RotateZMatrix
  001df	83 c4 04	 add	 esp, 4
  001e2	50		 push	 eax
  001e3	8d 4d e4	 lea	 ecx, DWORD PTR _v$[ebp]
  001e6	51		 push	 ecx
  001e7	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  001ec	83 c4 08	 add	 esp, 8
  001ef	89 45 e0	 mov	 DWORD PTR _res$[ebp], eax

; 4520 : 		M_Memcpy(&v, res, sizeof (v));

  001f2	6a 10		 push	 16			; 00000010H
  001f4	8b 45 e0	 mov	 eax, DWORD PTR _res$[ebp]
  001f7	50		 push	 eax
  001f8	8d 4d e4	 lea	 ecx, DWORD PTR _v$[ebp]
  001fb	51		 push	 ecx
  001fc	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00202	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4521 : 
; 4522 : 		finalx = x + v[0];

  00205	b8 04 00 00 00	 mov	 eax, 4
  0020a	6b c8 00	 imul	 ecx, eax, 0
  0020d	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00210	03 54 0d e4	 add	 edx, DWORD PTR _v$[ebp+ecx]
  00214	89 55 dc	 mov	 DWORD PTR _finalx$[ebp], edx

; 4523 : 		finaly = y + v[1];

  00217	b8 04 00 00 00	 mov	 eax, 4
  0021c	c1 e0 00	 shl	 eax, 0
  0021f	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00222	03 4c 05 e4	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00226	89 4d d8	 mov	 DWORD PTR _finaly$[ebp], ecx

; 4524 : 		finalz = z + v[2];

  00229	b8 04 00 00 00	 mov	 eax, 4
  0022e	d1 e0		 shl	 eax, 1
  00230	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  00233	03 4c 05 e4	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00237	89 4d d4	 mov	 DWORD PTR _finalz$[ebp], ecx

; 4525 : 
; 4526 : 		mobj = P_SpawnMobj(finalx, finaly, finalz, type);

  0023a	8b 45 1c	 mov	 eax, DWORD PTR _type$[ebp]
  0023d	50		 push	 eax
  0023e	8b 4d d4	 mov	 ecx, DWORD PTR _finalz$[ebp]
  00241	51		 push	 ecx
  00242	8b 55 d8	 mov	 edx, DWORD PTR _finaly$[ebp]
  00245	52		 push	 edx
  00246	8b 45 dc	 mov	 eax, DWORD PTR _finalx$[ebp]
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0024f	83 c4 10	 add	 esp, 16			; 00000010H
  00252	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 4527 : 		mobj->z -= mobj->height/2;

  00255	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00258	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0025b	99		 cdq
  0025c	2b c2		 sub	 eax, edx
  0025e	d1 f8		 sar	 eax, 1
  00260	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00263	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00266	2b d0		 sub	 edx, eax
  00268	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0026b	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 4528 : 	}

  0026e	e9 9f fe ff ff	 jmp	 $LN2@P_SpawnHoo
$LN3@P_SpawnHoo:

; 4529 : }

  00273	5f		 pop	 edi
  00274	5e		 pop	 esi
  00275	5b		 pop	 ebx
  00276	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00279	33 cd		 xor	 ecx, ebp
  0027b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00280	8b e5		 mov	 esp, ebp
  00282	5d		 pop	 ebp
  00283	c3		 ret	 0
_P_SpawnHoopOfSomething ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnHoopsAndRings
_TEXT	SEGMENT
tv731 = -168						; size = 4
_angle$1 = -100						; size = 4
_angle$2 = -96						; size = 4
_spewangle$3 = -92					; size = 2
_hoopcenter$4 = -88					; size = 4
_nextmobj$5 = -84					; size = 4
_fa$ = -80						; size = 4
_closestangle$ = -76					; size = 4
_res$ = -72						; size = 4
_v$ = -68						; size = 16
_mthingz$ = -52						; size = 4
_mthingy$ = -48						; size = 4
_mthingx$ = -44						; size = 4
_finalz$ = -40						; size = 4
_finaly$ = -36						; size = 4
_finalx$ = -32						; size = 4
_z$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_i$ = -16						; size = 4
_r$ = -12						; size = 4
_mobj$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mthing$ = 8						; size = 4
_P_SpawnHoopsAndRings PROC				; COMDAT

; 7984 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 7985 : 	mobj_t *mobj = NULL;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mobj$[ebp], 0

; 7986 : 	INT32 r, i;
; 7987 : 	fixed_t x, y, z, finalx, finaly, finalz, mthingx, mthingy, mthingz;
; 7988 : 	TVector v, *res;
; 7989 : 	angle_t closestangle, fa;
; 7990 : 
; 7991 : 	x = mthing->x << FRACBITS;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00020	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00023	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00026	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 7992 : 	y = mthing->y << FRACBITS;

  00029	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0002c	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00030	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00033	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 7993 : 
; 7994 : 	if (mthing->type == 1705) // NiGHTS hoop!

  00036	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00039	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0003d	81 f9 a9 06 00
	00		 cmp	 ecx, 1705		; 000006a9H
  00043	0f 85 3c 06 00
	00		 jne	 $LN43@P_SpawnHoo

; 7995 : 	{
; 7996 : 		mobj_t *nextmobj = NULL;

  00049	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _nextmobj$5[ebp], 0

; 7997 : 		mobj_t *hoopcenter;
; 7998 : 		INT16 spewangle;
; 7999 : 
; 8000 : 		mthingx = mthing->x << FRACBITS;

  00050	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00053	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00056	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00059	89 4d d4	 mov	 DWORD PTR _mthingx$[ebp], ecx

; 8001 : 		mthingy = mthing->y << FRACBITS;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0005f	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00063	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00066	89 4d d0	 mov	 DWORD PTR _mthingy$[ebp], ecx

; 8002 : 
; 8003 : 		mthingz = mthing->options << FRACBITS;

  00069	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0006c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00070	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00073	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx

; 8004 : 
; 8005 : 		hoopcenter = P_SpawnMobj(mthingx, mthingy, mthingz, MT_HOOPCENTER);

  00076	68 fa 00 00 00	 push	 250			; 000000faH
  0007b	8b 45 cc	 mov	 eax, DWORD PTR _mthingz$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _P_SpawnMobj
  0008c	83 c4 10	 add	 esp, 16			; 00000010H
  0008f	89 45 a8	 mov	 DWORD PTR _hoopcenter$4[ebp], eax

; 8006 : 
; 8007 : 		hoopcenter->spawnpoint = mthing;

  00092	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00098	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 8008 : 
; 8009 : 		hoopcenter->flags |= MF_NOTHINK;

  0009e	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  000a1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000a4	81 c9 00 00 20
	00		 or	 ecx, 2097152		; 00200000H
  000aa	8b 55 a8	 mov	 edx, DWORD PTR _hoopcenter$4[ebp]
  000ad	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 8010 : 
; 8011 : 		mthingz += R_PointInSubsector(mthingx, mthingy)->sector->floorheight;

  000b0	8b 45 d0	 mov	 eax, DWORD PTR _mthingy$[ebp]
  000b3	50		 push	 eax
  000b4	8b 4d d4	 mov	 ecx, DWORD PTR _mthingx$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _R_PointInSubsector
  000bd	83 c4 08	 add	 esp, 8
  000c0	8b 10		 mov	 edx, DWORD PTR [eax]
  000c2	8b 45 cc	 mov	 eax, DWORD PTR _mthingz$[ebp]
  000c5	03 02		 add	 eax, DWORD PTR [edx]
  000c7	89 45 cc	 mov	 DWORD PTR _mthingz$[ebp], eax

; 8012 : 
; 8013 : 		hoopcenter->z = mthingz - hoopcenter->height/2;

  000ca	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  000cd	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000d0	99		 cdq
  000d1	2b c2		 sub	 eax, edx
  000d3	d1 f8		 sar	 eax, 1
  000d5	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b 55 a8	 mov	 edx, DWORD PTR _hoopcenter$4[ebp]
  000dd	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 8014 : 
; 8015 : 		P_UnsetThingPosition(hoopcenter);

  000e0	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  000e9	83 c4 04	 add	 esp, 4

; 8016 : 		hoopcenter->x = mthingx;

  000ec	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  000ef	8b 4d d4	 mov	 ecx, DWORD PTR _mthingx$[ebp]
  000f2	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 8017 : 		hoopcenter->y = mthingy;

  000f5	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  000f8	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  000fb	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 8018 : 		P_SetThingPosition(hoopcenter);

  000fe	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _P_SetThingPosition
  00107	83 c4 04	 add	 esp, 4

; 8019 : 
; 8020 : 		// Scale 0-255 to 0-359 =(
; 8021 : 		closestangle = FixedAngle(FixedMul((mthing->angle>>8)*FRACUNIT,

  0010a	68 00 68 01 00	 push	 92160			; 00016800H
  0010f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00112	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00116	c1 f9 08	 sar	 ecx, 8
  00119	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0011c	51		 push	 ecx
  0011d	e8 00 00 00 00	 call	 _FixedMul
  00122	83 c4 08	 add	 esp, 8
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 _FixedAngle
  0012b	83 c4 04	 add	 esp, 4
  0012e	89 45 b4	 mov	 DWORD PTR _closestangle$[ebp], eax

; 8022 : 			360*(FRACUNIT/256)));
; 8023 : 
; 8024 : 		hoopcenter->movedir = FixedInt(FixedMul((mthing->angle&255)*FRACUNIT,

  00131	68 00 68 01 00	 push	 92160			; 00016800H
  00136	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00139	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0013d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00143	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 _FixedMul
  0014c	83 c4 08	 add	 esp, 8
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _FixedInt
  00155	83 c4 04	 add	 esp, 4
  00158	8b 55 a8	 mov	 edx, DWORD PTR _hoopcenter$4[ebp]
  0015b	89 82 90 00 00
	00		 mov	 DWORD PTR [edx+144], eax

; 8025 : 			360*(FRACUNIT/256)));
; 8026 : 		hoopcenter->movecount = FixedInt(AngleFixed(closestangle));

  00161	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 _AngleFixed
  0016a	83 c4 04	 add	 esp, 4
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 _FixedInt
  00173	83 c4 04	 add	 esp, 4
  00176	8b 4d a8	 mov	 ecx, DWORD PTR _hoopcenter$4[ebp]
  00179	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 8027 : 
; 8028 : 		spewangle = (INT16)hoopcenter->movedir;

  0017f	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  00182	66 8b 88 90 00
	00 00		 mov	 cx, WORD PTR [eax+144]
  00189	66 89 4d a4	 mov	 WORD PTR _spewangle$3[ebp], cx

; 8029 : 
; 8030 : 		// Create the hoop!
; 8031 : 		for (i = 0; i < 32; i++)

  0018d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00194	eb 09		 jmp	 SHORT $LN4@P_SpawnHoo
$LN2@P_SpawnHoo:
  00196	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00199	83 c0 01	 add	 eax, 1
  0019c	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_SpawnHoo:
  0019f	83 7d f0 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  001a3	0f 8d a6 01 00
	00		 jge	 $LN3@P_SpawnHoo

; 8032 : 		{
; 8033 : 			fa = i*(FINEANGLES/32);

  001a9	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001ac	c1 e0 08	 shl	 eax, 8
  001af	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8034 : 			v[0] = FixedMul(FINECOSINE(fa),96*FRACUNIT);

  001b2	68 00 00 60 00	 push	 6291456			; 00600000H
  001b7	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  001ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  001c0	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  001c3	52		 push	 edx
  001c4	e8 00 00 00 00	 call	 _FixedMul
  001c9	83 c4 08	 add	 esp, 8
  001cc	b9 04 00 00 00	 mov	 ecx, 4
  001d1	6b d1 00	 imul	 edx, ecx, 0
  001d4	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8035 : 			v[1] = 0;

  001d8	b8 04 00 00 00	 mov	 eax, 4
  001dd	c1 e0 00	 shl	 eax, 0
  001e0	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8036 : 			v[2] = FixedMul(FINESINE(fa),96*FRACUNIT);

  001e8	68 00 00 60 00	 push	 6291456			; 00600000H
  001ed	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  001f0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  001f7	51		 push	 ecx
  001f8	e8 00 00 00 00	 call	 _FixedMul
  001fd	83 c4 08	 add	 esp, 8
  00200	ba 04 00 00 00	 mov	 edx, 4
  00205	d1 e2		 shl	 edx, 1
  00207	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8037 : 			v[3] = FRACUNIT;

  0020b	b8 04 00 00 00	 mov	 eax, 4
  00210	6b c8 03	 imul	 ecx, eax, 3
  00213	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8038 : 
; 8039 : 			res = VectorMatrixMultiply(v, *RotateXMatrix(FixedAngle(spewangle*FRACUNIT)));

  0021b	0f bf 45 a4	 movsx	 eax, WORD PTR _spewangle$3[ebp]
  0021f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 _FixedAngle
  00228	83 c4 04	 add	 esp, 4
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 _RotateXMatrix
  00231	83 c4 04	 add	 esp, 4
  00234	50		 push	 eax
  00235	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00238	51		 push	 ecx
  00239	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  0023e	83 c4 08	 add	 esp, 8
  00241	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8040 : 			M_Memcpy(&v, res, sizeof (v));

  00244	6a 10		 push	 16			; 00000010H
  00246	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  00249	50		 push	 eax
  0024a	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  0024d	51		 push	 ecx
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00254	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8041 : 			res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  00257	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 _RotateZMatrix
  00260	83 c4 04	 add	 esp, 4
  00263	50		 push	 eax
  00264	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00267	51		 push	 ecx
  00268	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  0026d	83 c4 08	 add	 esp, 8
  00270	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8042 : 			M_Memcpy(&v, res, sizeof (v));

  00273	6a 10		 push	 16			; 00000010H
  00275	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  00278	50		 push	 eax
  00279	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  0027c	51		 push	 ecx
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00283	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8043 : 
; 8044 : 			finalx = mthingx + v[0];

  00286	b8 04 00 00 00	 mov	 eax, 4
  0028b	6b c8 00	 imul	 ecx, eax, 0
  0028e	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  00291	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  00295	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8045 : 			finaly = mthingy + v[1];

  00298	b8 04 00 00 00	 mov	 eax, 4
  0029d	c1 e0 00	 shl	 eax, 0
  002a0	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  002a3	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  002a7	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8046 : 			finalz = mthingz + v[2];

  002aa	b8 04 00 00 00	 mov	 eax, 4
  002af	d1 e0		 shl	 eax, 1
  002b1	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  002b4	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  002b8	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8047 : 
; 8048 : 			mobj = P_SpawnMobj(finalx, finaly, finalz, MT_HOOP);

  002bb	68 f8 00 00 00	 push	 248			; 000000f8H
  002c0	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  002c3	50		 push	 eax
  002c4	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  002c7	51		 push	 ecx
  002c8	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  002cb	52		 push	 edx
  002cc	e8 00 00 00 00	 call	 _P_SpawnMobj
  002d1	83 c4 10	 add	 esp, 16			; 00000010H
  002d4	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8049 : 			mobj->z -= mobj->height/2;

  002d7	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002da	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  002dd	99		 cdq
  002de	2b c2		 sub	 eax, edx
  002e0	d1 f8		 sar	 eax, 1
  002e2	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  002e5	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  002e8	2b d0		 sub	 edx, eax
  002ea	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  002ed	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8050 : 			P_SetTarget(&mobj->target, hoopcenter); // Link the sprite to the center.

  002f0	8b 45 a8	 mov	 eax, DWORD PTR _hoopcenter$4[ebp]
  002f3	50		 push	 eax
  002f4	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  002f7	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  002fd	51		 push	 ecx
  002fe	e8 00 00 00 00	 call	 _P_SetTarget
  00303	83 c4 08	 add	 esp, 8

; 8051 : 			mobj->fuse = 0;

  00306	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00309	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+188], 0

; 8052 : 
; 8053 : 			// Link all the sprites in the hoop together
; 8054 : 			if (nextmobj)

  00313	83 7d ac 00	 cmp	 DWORD PTR _nextmobj$5[ebp], 0
  00317	74 17		 je	 SHORT $LN45@P_SpawnHoo

; 8055 : 			{
; 8056 : 				mobj->hprev = nextmobj;

  00319	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0031c	8b 4d ac	 mov	 ecx, DWORD PTR _nextmobj$5[ebp]
  0031f	89 48 78	 mov	 DWORD PTR [eax+120], ecx

; 8057 : 				mobj->hprev->hnext = mobj;

  00322	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00325	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00328	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0032b	89 51 74	 mov	 DWORD PTR [ecx+116], edx

; 8058 : 			}

  0032e	eb 14		 jmp	 SHORT $LN46@P_SpawnHoo
$LN45@P_SpawnHoo:

; 8059 : 			else
; 8060 : 				mobj->hprev = mobj->hnext = NULL;

  00330	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00333	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0
  0033a	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0033d	c7 41 78 00 00
	00 00		 mov	 DWORD PTR [ecx+120], 0
$LN46@P_SpawnHoo:

; 8061 : 
; 8062 : 			nextmobj = mobj;

  00344	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00347	89 45 ac	 mov	 DWORD PTR _nextmobj$5[ebp], eax

; 8063 : 		}

  0034a	e9 47 fe ff ff	 jmp	 $LN2@P_SpawnHoo
$LN3@P_SpawnHoo:

; 8064 : 
; 8065 : 		// Create the collision detectors!
; 8066 : 		for (i = 0; i < 16; i++)

  0034f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00356	eb 09		 jmp	 SHORT $LN7@P_SpawnHoo
$LN5@P_SpawnHoo:
  00358	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0035b	83 c0 01	 add	 eax, 1
  0035e	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN7@P_SpawnHoo:
  00361	83 7d f0 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  00365	0f 8d 7a 01 00
	00		 jge	 $LN6@P_SpawnHoo

; 8067 : 		{
; 8068 : 			fa = i*FINEANGLES/16;

  0036b	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0036e	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00371	99		 cdq
  00372	83 e2 0f	 and	 edx, 15			; 0000000fH
  00375	03 c2		 add	 eax, edx
  00377	c1 f8 04	 sar	 eax, 4
  0037a	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8069 : 			v[0] = FixedMul(FINECOSINE(fa),32*FRACUNIT);

  0037d	68 00 00 20 00	 push	 2097152			; 00200000H
  00382	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  00385	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0038b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0038e	52		 push	 edx
  0038f	e8 00 00 00 00	 call	 _FixedMul
  00394	83 c4 08	 add	 esp, 8
  00397	b9 04 00 00 00	 mov	 ecx, 4
  0039c	6b d1 00	 imul	 edx, ecx, 0
  0039f	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8070 : 			v[1] = 0;

  003a3	b8 04 00 00 00	 mov	 eax, 4
  003a8	c1 e0 00	 shl	 eax, 0
  003ab	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8071 : 			v[2] = FixedMul(FINESINE(fa),32*FRACUNIT);

  003b3	68 00 00 20 00	 push	 2097152			; 00200000H
  003b8	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  003bb	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  003c2	51		 push	 ecx
  003c3	e8 00 00 00 00	 call	 _FixedMul
  003c8	83 c4 08	 add	 esp, 8
  003cb	ba 04 00 00 00	 mov	 edx, 4
  003d0	d1 e2		 shl	 edx, 1
  003d2	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8072 : 			v[3] = FRACUNIT;

  003d6	b8 04 00 00 00	 mov	 eax, 4
  003db	6b c8 03	 imul	 ecx, eax, 3
  003de	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8073 : 			res = VectorMatrixMultiply(v, *RotateXMatrix(FixedAngle(spewangle*FRACUNIT)));

  003e6	0f bf 45 a4	 movsx	 eax, WORD PTR _spewangle$3[ebp]
  003ea	c1 e0 10	 shl	 eax, 16			; 00000010H
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 _FixedAngle
  003f3	83 c4 04	 add	 esp, 4
  003f6	50		 push	 eax
  003f7	e8 00 00 00 00	 call	 _RotateXMatrix
  003fc	83 c4 04	 add	 esp, 4
  003ff	50		 push	 eax
  00400	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00403	51		 push	 ecx
  00404	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00409	83 c4 08	 add	 esp, 8
  0040c	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8074 : 			M_Memcpy(&v, res, sizeof (v));

  0040f	6a 10		 push	 16			; 00000010H
  00411	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  00414	50		 push	 eax
  00415	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00418	51		 push	 ecx
  00419	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0041f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8075 : 			res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  00422	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  00425	50		 push	 eax
  00426	e8 00 00 00 00	 call	 _RotateZMatrix
  0042b	83 c4 04	 add	 esp, 4
  0042e	50		 push	 eax
  0042f	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00432	51		 push	 ecx
  00433	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00438	83 c4 08	 add	 esp, 8
  0043b	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8076 : 			M_Memcpy(&v, res, sizeof (v));

  0043e	6a 10		 push	 16			; 00000010H
  00440	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  00443	50		 push	 eax
  00444	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00447	51		 push	 ecx
  00448	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0044e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8077 : 
; 8078 : 			finalx = mthingx + v[0];

  00451	b8 04 00 00 00	 mov	 eax, 4
  00456	6b c8 00	 imul	 ecx, eax, 0
  00459	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  0045c	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  00460	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8079 : 			finaly = mthingy + v[1];

  00463	b8 04 00 00 00	 mov	 eax, 4
  00468	c1 e0 00	 shl	 eax, 0
  0046b	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  0046e	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00472	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8080 : 			finalz = mthingz + v[2];

  00475	b8 04 00 00 00	 mov	 eax, 4
  0047a	d1 e0		 shl	 eax, 1
  0047c	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  0047f	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00483	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8081 : 
; 8082 : 			mobj = P_SpawnMobj(finalx, finaly, finalz, MT_HOOPCOLLIDE);

  00486	68 f9 00 00 00	 push	 249			; 000000f9H
  0048b	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  0048e	50		 push	 eax
  0048f	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  00492	51		 push	 ecx
  00493	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  00496	52		 push	 edx
  00497	e8 00 00 00 00	 call	 _P_SpawnMobj
  0049c	83 c4 10	 add	 esp, 16			; 00000010H
  0049f	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8083 : 			mobj->z -= mobj->height/2;

  004a2	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  004a5	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  004a8	99		 cdq
  004a9	2b c2		 sub	 eax, edx
  004ab	d1 f8		 sar	 eax, 1
  004ad	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  004b0	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004b3	2b d0		 sub	 edx, eax
  004b5	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  004b8	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8084 : 
; 8085 : 			// Link all the collision sprites together.
; 8086 : 			mobj->hnext = NULL;

  004bb	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  004be	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 8087 : 			mobj->hprev = nextmobj;

  004c5	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  004c8	8b 4d ac	 mov	 ecx, DWORD PTR _nextmobj$5[ebp]
  004cb	89 48 78	 mov	 DWORD PTR [eax+120], ecx

; 8088 : 			mobj->hprev->hnext = mobj;

  004ce	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  004d1	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  004d4	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  004d7	89 51 74	 mov	 DWORD PTR [ecx+116], edx

; 8089 : 
; 8090 : 			nextmobj = mobj;

  004da	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  004dd	89 45 ac	 mov	 DWORD PTR _nextmobj$5[ebp], eax

; 8091 : 		}

  004e0	e9 73 fe ff ff	 jmp	 $LN5@P_SpawnHoo
$LN6@P_SpawnHoo:

; 8092 : 		// Create the collision detectors!
; 8093 : 		for (i = 0; i < 16; i++)

  004e5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004ec	eb 09		 jmp	 SHORT $LN10@P_SpawnHoo
$LN8@P_SpawnHoo:
  004ee	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  004f1	83 c0 01	 add	 eax, 1
  004f4	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN10@P_SpawnHoo:
  004f7	83 7d f0 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  004fb	0f 8d 7a 01 00
	00		 jge	 $LN9@P_SpawnHoo

; 8094 : 		{
; 8095 : 			fa = i*FINEANGLES/16;

  00501	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00504	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00507	99		 cdq
  00508	83 e2 0f	 and	 edx, 15			; 0000000fH
  0050b	03 c2		 add	 eax, edx
  0050d	c1 f8 04	 sar	 eax, 4
  00510	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8096 : 			v[0] = FixedMul(FINECOSINE(fa),64*FRACUNIT);

  00513	68 00 00 40 00	 push	 4194304			; 00400000H
  00518	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  0051b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00521	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00524	52		 push	 edx
  00525	e8 00 00 00 00	 call	 _FixedMul
  0052a	83 c4 08	 add	 esp, 8
  0052d	b9 04 00 00 00	 mov	 ecx, 4
  00532	6b d1 00	 imul	 edx, ecx, 0
  00535	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8097 : 			v[1] = 0;

  00539	b8 04 00 00 00	 mov	 eax, 4
  0053e	c1 e0 00	 shl	 eax, 0
  00541	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8098 : 			v[2] = FixedMul(FINESINE(fa),64*FRACUNIT);

  00549	68 00 00 40 00	 push	 4194304			; 00400000H
  0054e	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  00551	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00558	51		 push	 ecx
  00559	e8 00 00 00 00	 call	 _FixedMul
  0055e	83 c4 08	 add	 esp, 8
  00561	ba 04 00 00 00	 mov	 edx, 4
  00566	d1 e2		 shl	 edx, 1
  00568	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8099 : 			v[3] = FRACUNIT;

  0056c	b8 04 00 00 00	 mov	 eax, 4
  00571	6b c8 03	 imul	 ecx, eax, 3
  00574	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8100 : 			res = VectorMatrixMultiply(v, *RotateXMatrix(FixedAngle(spewangle*FRACUNIT)));

  0057c	0f bf 45 a4	 movsx	 eax, WORD PTR _spewangle$3[ebp]
  00580	c1 e0 10	 shl	 eax, 16			; 00000010H
  00583	50		 push	 eax
  00584	e8 00 00 00 00	 call	 _FixedAngle
  00589	83 c4 04	 add	 esp, 4
  0058c	50		 push	 eax
  0058d	e8 00 00 00 00	 call	 _RotateXMatrix
  00592	83 c4 04	 add	 esp, 4
  00595	50		 push	 eax
  00596	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00599	51		 push	 ecx
  0059a	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  0059f	83 c4 08	 add	 esp, 8
  005a2	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8101 : 			M_Memcpy(&v, res, sizeof (v));

  005a5	6a 10		 push	 16			; 00000010H
  005a7	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  005aa	50		 push	 eax
  005ab	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  005ae	51		 push	 ecx
  005af	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  005b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8102 : 			res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  005b8	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  005bb	50		 push	 eax
  005bc	e8 00 00 00 00	 call	 _RotateZMatrix
  005c1	83 c4 04	 add	 esp, 4
  005c4	50		 push	 eax
  005c5	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  005c8	51		 push	 ecx
  005c9	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  005ce	83 c4 08	 add	 esp, 8
  005d1	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8103 : 			M_Memcpy(&v, res, sizeof (v));

  005d4	6a 10		 push	 16			; 00000010H
  005d6	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  005d9	50		 push	 eax
  005da	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  005dd	51		 push	 ecx
  005de	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  005e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8104 : 
; 8105 : 			finalx = mthingx + v[0];

  005e7	b8 04 00 00 00	 mov	 eax, 4
  005ec	6b c8 00	 imul	 ecx, eax, 0
  005ef	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  005f2	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  005f6	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8106 : 			finaly = mthingy + v[1];

  005f9	b8 04 00 00 00	 mov	 eax, 4
  005fe	c1 e0 00	 shl	 eax, 0
  00601	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  00604	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00608	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8107 : 			finalz = mthingz + v[2];

  0060b	b8 04 00 00 00	 mov	 eax, 4
  00610	d1 e0		 shl	 eax, 1
  00612	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  00615	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00619	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8108 : 
; 8109 : 			mobj = P_SpawnMobj(finalx, finaly, finalz, MT_HOOPCOLLIDE);

  0061c	68 f9 00 00 00	 push	 249			; 000000f9H
  00621	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  00624	50		 push	 eax
  00625	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  00628	51		 push	 ecx
  00629	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  0062c	52		 push	 edx
  0062d	e8 00 00 00 00	 call	 _P_SpawnMobj
  00632	83 c4 10	 add	 esp, 16			; 00000010H
  00635	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8110 : 			mobj->z -= mobj->height/2;

  00638	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0063b	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0063e	99		 cdq
  0063f	2b c2		 sub	 eax, edx
  00641	d1 f8		 sar	 eax, 1
  00643	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00646	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00649	2b d0		 sub	 edx, eax
  0064b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0064e	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8111 : 
; 8112 : 			// Link all the collision sprites together.
; 8113 : 			mobj->hnext = NULL;

  00651	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00654	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 8114 : 			mobj->hprev = nextmobj;

  0065b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0065e	8b 4d ac	 mov	 ecx, DWORD PTR _nextmobj$5[ebp]
  00661	89 48 78	 mov	 DWORD PTR [eax+120], ecx

; 8115 : 			mobj->hprev->hnext = mobj;

  00664	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00667	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0066a	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0066d	89 51 74	 mov	 DWORD PTR [ecx+116], edx

; 8116 : 
; 8117 : 			nextmobj = mobj;

  00670	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00673	89 45 ac	 mov	 DWORD PTR _nextmobj$5[ebp], eax

; 8118 : 		}

  00676	e9 73 fe ff ff	 jmp	 $LN8@P_SpawnHoo
$LN9@P_SpawnHoo:

; 8119 : 		return;

  0067b	e9 5f 15 00 00	 jmp	 $LN121@P_SpawnHoo

; 8120 : 	}

  00680	e9 5a 15 00 00	 jmp	 $LN121@P_SpawnHoo
$LN43@P_SpawnHoo:

; 8121 : 	else if (mthing->type == 1706) // Wing logo item.

  00685	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00688	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0068c	81 f9 aa 06 00
	00		 cmp	 ecx, 1706		; 000006aaH
  00692	0f 85 fb 00 00
	00		 jne	 $LN47@P_SpawnHoo

; 8122 : 	{
; 8123 : 		if (mthing->options >> ZSHIFT)

  00698	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0069b	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0069f	c1 f9 04	 sar	 ecx, 4
  006a2	85 c9		 test	 ecx, ecx
  006a4	74 2f		 je	 SHORT $LN49@P_SpawnHoo

; 8124 : 			mthing->z = (INT16)((R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS))>>FRACBITS);

  006a6	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  006a9	50		 push	 eax
  006aa	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  006ad	51		 push	 ecx
  006ae	e8 00 00 00 00	 call	 _R_PointInSubsector
  006b3	83 c4 08	 add	 esp, 8
  006b6	8b 10		 mov	 edx, DWORD PTR [eax]
  006b8	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  006bb	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  006bf	c1 f9 04	 sar	 ecx, 4
  006c2	c1 e1 10	 shl	 ecx, 16			; 00000010H
  006c5	8b 12		 mov	 edx, DWORD PTR [edx]
  006c7	03 d1		 add	 edx, ecx
  006c9	c1 fa 10	 sar	 edx, 16			; 00000010H
  006cc	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  006cf	66 89 50 0a	 mov	 WORD PTR [eax+10], dx
  006d3	eb 2b		 jmp	 SHORT $LN50@P_SpawnHoo
$LN49@P_SpawnHoo:

; 8125 : 		else
; 8126 : 			mthing->z = (INT16)(R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight>>FRACBITS);

  006d5	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  006d8	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  006dc	c1 e1 10	 shl	 ecx, 16			; 00000010H
  006df	51		 push	 ecx
  006e0	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  006e3	0f bf 02	 movsx	 eax, WORD PTR [edx]
  006e6	c1 e0 10	 shl	 eax, 16			; 00000010H
  006e9	50		 push	 eax
  006ea	e8 00 00 00 00	 call	 _R_PointInSubsector
  006ef	83 c4 08	 add	 esp, 8
  006f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f4	8b 11		 mov	 edx, DWORD PTR [ecx]
  006f6	c1 fa 10	 sar	 edx, 16			; 00000010H
  006f9	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  006fc	66 89 50 0a	 mov	 WORD PTR [eax+10], dx
$LN50@P_SpawnHoo:

; 8127 : 
; 8128 : 		mobj = P_SpawnMobj(mthing->x << FRACBITS, mthing->y << FRACBITS,mthing->z << FRACBITS, MT_NIGHTSWING);

  00700	68 fc 00 00 00	 push	 252			; 000000fcH
  00705	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00708	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  0070c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0070f	51		 push	 ecx
  00710	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00713	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00717	c1 e0 10	 shl	 eax, 16			; 00000010H
  0071a	50		 push	 eax
  0071b	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  0071e	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00721	c1 e2 10	 shl	 edx, 16			; 00000010H
  00724	52		 push	 edx
  00725	e8 00 00 00 00	 call	 _P_SpawnMobj
  0072a	83 c4 10	 add	 esp, 16			; 00000010H
  0072d	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8129 : 		mobj->spawnpoint = mthing;

  00730	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00733	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00736	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 8130 : 
; 8131 : 		if (mobj->tics > 0)

  0073c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0073f	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00743	7e 18		 jle	 SHORT $LN51@P_SpawnHoo

; 8132 : 			mobj->tics = 1 + (P_Random() % mobj->tics);

  00745	e8 00 00 00 00	 call	 _P_Random
  0074a	0f b6 c0	 movzx	 eax, al
  0074d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00750	99		 cdq
  00751	f7 79 58	 idiv	 DWORD PTR [ecx+88]
  00754	83 c2 01	 add	 edx, 1
  00757	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0075a	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN51@P_SpawnHoo:

; 8133 : 		mobj->angle = FixedAngle(mthing->angle*FRACUNIT);

  0075d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00760	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00764	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00767	51		 push	 ecx
  00768	e8 00 00 00 00	 call	 _FixedAngle
  0076d	83 c4 04	 add	 esp, 4
  00770	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00773	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 8134 : 		mobj->flags |= MF_AMBUSH;

  00776	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00779	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0077c	83 c9 20	 or	 ecx, 32			; 00000020H
  0077f	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00782	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 8135 : 		mthing->mobj = mobj;

  00785	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00788	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0078b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 8136 : 	}

  0078e	e9 4c 14 00 00	 jmp	 $LN121@P_SpawnHoo
$LN47@P_SpawnHoo:

; 8137 : 	else if (mthing->type == 606) // A ring of wing items (NiGHTS stuff)

  00793	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00796	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0079a	81 f9 5e 02 00
	00		 cmp	 ecx, 606		; 0000025eH
  007a0	0f 85 c0 01 00
	00		 jne	 $LN52@P_SpawnHoo

; 8138 : 	{
; 8139 : 		mthingx = mthing->x << FRACBITS;

  007a6	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007a9	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  007ac	c1 e1 10	 shl	 ecx, 16			; 00000010H
  007af	89 4d d4	 mov	 DWORD PTR _mthingx$[ebp], ecx

; 8140 : 		mthingy = mthing->y << FRACBITS;

  007b2	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007b5	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  007b9	c1 e1 10	 shl	 ecx, 16			; 00000010H
  007bc	89 4d d0	 mov	 DWORD PTR _mthingy$[ebp], ecx

; 8141 : 
; 8142 : 		if (mthing->options >> ZSHIFT)

  007bf	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007c2	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007c6	c1 f9 04	 sar	 ecx, 4
  007c9	85 c9		 test	 ecx, ecx
  007cb	74 26		 je	 SHORT $LN54@P_SpawnHoo

; 8143 : 			mthingz = (R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS));

  007cd	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  007d0	50		 push	 eax
  007d1	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  007d4	51		 push	 ecx
  007d5	e8 00 00 00 00	 call	 _R_PointInSubsector
  007da	83 c4 08	 add	 esp, 8
  007dd	8b 10		 mov	 edx, DWORD PTR [eax]
  007df	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007e2	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007e6	c1 f9 04	 sar	 ecx, 4
  007e9	c1 e1 10	 shl	 ecx, 16			; 00000010H
  007ec	03 0a		 add	 ecx, DWORD PTR [edx]
  007ee	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
  007f1	eb 1e		 jmp	 SHORT $LN55@P_SpawnHoo
$LN54@P_SpawnHoo:

; 8144 : 		else
; 8145 : 			mthingz = R_PointInSubsector(mthingx, mthing->y << FRACBITS)->sector->floorheight;

  007f3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007f6	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  007fa	c1 e1 10	 shl	 ecx, 16			; 00000010H
  007fd	51		 push	 ecx
  007fe	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  00801	52		 push	 edx
  00802	e8 00 00 00 00	 call	 _R_PointInSubsector
  00807	83 c4 08	 add	 esp, 8
  0080a	8b 00		 mov	 eax, DWORD PTR [eax]
  0080c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0080e	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
$LN55@P_SpawnHoo:

; 8146 : 
; 8147 : 		closestangle = FixedAngle(mthing->angle*FRACUNIT);

  00811	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00814	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00818	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0081b	51		 push	 ecx
  0081c	e8 00 00 00 00	 call	 _FixedAngle
  00821	83 c4 04	 add	 esp, 4
  00824	89 45 b4	 mov	 DWORD PTR _closestangle$[ebp], eax

; 8148 : 
; 8149 : 		// Create the hoop!
; 8150 : 		for (i = 0; i < 8; i++)

  00827	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0082e	eb 09		 jmp	 SHORT $LN13@P_SpawnHoo
$LN11@P_SpawnHoo:
  00830	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00833	83 c0 01	 add	 eax, 1
  00836	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN13@P_SpawnHoo:
  00839	83 7d f0 08	 cmp	 DWORD PTR _i$[ebp], 8
  0083d	0f 8d 19 01 00
	00		 jge	 $LN12@P_SpawnHoo

; 8151 : 		{
; 8152 : 			fa = i*FINEANGLES/8;

  00843	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00846	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00849	99		 cdq
  0084a	83 e2 07	 and	 edx, 7
  0084d	03 c2		 add	 eax, edx
  0084f	c1 f8 03	 sar	 eax, 3
  00852	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8153 : 			v[0] = FixedMul(FINECOSINE(fa),96*FRACUNIT);

  00855	68 00 00 60 00	 push	 6291456			; 00600000H
  0085a	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  0085d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00863	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00866	52		 push	 edx
  00867	e8 00 00 00 00	 call	 _FixedMul
  0086c	83 c4 08	 add	 esp, 8
  0086f	b9 04 00 00 00	 mov	 ecx, 4
  00874	6b d1 00	 imul	 edx, ecx, 0
  00877	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8154 : 			v[1] = 0;

  0087b	b8 04 00 00 00	 mov	 eax, 4
  00880	c1 e0 00	 shl	 eax, 0
  00883	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8155 : 			v[2] = FixedMul(FINESINE(fa),96*FRACUNIT);

  0088b	68 00 00 60 00	 push	 6291456			; 00600000H
  00890	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  00893	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0089a	51		 push	 ecx
  0089b	e8 00 00 00 00	 call	 _FixedMul
  008a0	83 c4 08	 add	 esp, 8
  008a3	ba 04 00 00 00	 mov	 edx, 4
  008a8	d1 e2		 shl	 edx, 1
  008aa	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8156 : 			v[3] = FRACUNIT;

  008ae	b8 04 00 00 00	 mov	 eax, 4
  008b3	6b c8 03	 imul	 ecx, eax, 3
  008b6	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8157 : 
; 8158 : 			res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  008be	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  008c1	50		 push	 eax
  008c2	e8 00 00 00 00	 call	 _RotateZMatrix
  008c7	83 c4 04	 add	 esp, 4
  008ca	50		 push	 eax
  008cb	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  008ce	51		 push	 ecx
  008cf	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  008d4	83 c4 08	 add	 esp, 8
  008d7	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8159 : 			M_Memcpy(&v, res, sizeof (v));

  008da	6a 10		 push	 16			; 00000010H
  008dc	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  008df	50		 push	 eax
  008e0	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  008e3	51		 push	 ecx
  008e4	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  008ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8160 : 
; 8161 : 			finalx = mthingx + v[0];

  008ed	b8 04 00 00 00	 mov	 eax, 4
  008f2	6b c8 00	 imul	 ecx, eax, 0
  008f5	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  008f8	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  008fc	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8162 : 			finaly = mthingy + v[1];

  008ff	b8 04 00 00 00	 mov	 eax, 4
  00904	c1 e0 00	 shl	 eax, 0
  00907	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  0090a	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  0090e	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8163 : 			finalz = mthingz + v[2];

  00911	b8 04 00 00 00	 mov	 eax, 4
  00916	d1 e0		 shl	 eax, 1
  00918	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  0091b	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  0091f	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8164 : 
; 8165 : 			mobj = P_SpawnMobj(finalx, finaly, finalz, MT_NIGHTSWING);

  00922	68 fc 00 00 00	 push	 252			; 000000fcH
  00927	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  0092a	50		 push	 eax
  0092b	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  0092e	51		 push	 ecx
  0092f	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  00932	52		 push	 edx
  00933	e8 00 00 00 00	 call	 _P_SpawnMobj
  00938	83 c4 10	 add	 esp, 16			; 00000010H
  0093b	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8166 : 			mobj->z -= mobj->height/2;

  0093e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00941	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00944	99		 cdq
  00945	2b c2		 sub	 eax, edx
  00947	d1 f8		 sar	 eax, 1
  00949	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0094c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0094f	2b d0		 sub	 edx, eax
  00951	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00954	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8167 : 		}

  00957	e9 d4 fe ff ff	 jmp	 $LN11@P_SpawnHoo
$LN12@P_SpawnHoo:

; 8168 : 		return;

  0095c	e9 7e 12 00 00	 jmp	 $LN121@P_SpawnHoo

; 8169 : 	}

  00961	e9 79 12 00 00	 jmp	 $LN121@P_SpawnHoo
$LN52@P_SpawnHoo:

; 8170 : 	else if (mthing->type == 607) // A BIGGER ring of wing items (NiGHTS stuff)

  00966	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00969	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0096d	81 f9 5f 02 00
	00		 cmp	 ecx, 607		; 0000025fH
  00973	0f 85 c5 01 00
	00		 jne	 $LN56@P_SpawnHoo

; 8171 : 	{
; 8172 : 		mthingx = mthing->x << FRACBITS;

  00979	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0097c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0097f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00982	89 4d d4	 mov	 DWORD PTR _mthingx$[ebp], ecx

; 8173 : 		mthingy = mthing->y << FRACBITS;

  00985	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00988	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0098c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0098f	89 4d d0	 mov	 DWORD PTR _mthingy$[ebp], ecx

; 8174 : 
; 8175 : 		if (mthing->options >> ZSHIFT)

  00992	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00995	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00999	c1 f9 04	 sar	 ecx, 4
  0099c	85 c9		 test	 ecx, ecx
  0099e	74 26		 je	 SHORT $LN58@P_SpawnHoo

; 8176 : 			mthingz = (R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS));

  009a0	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  009a3	50		 push	 eax
  009a4	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  009a7	51		 push	 ecx
  009a8	e8 00 00 00 00	 call	 _R_PointInSubsector
  009ad	83 c4 08	 add	 esp, 8
  009b0	8b 10		 mov	 edx, DWORD PTR [eax]
  009b2	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  009b5	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  009b9	c1 f9 04	 sar	 ecx, 4
  009bc	c1 e1 10	 shl	 ecx, 16			; 00000010H
  009bf	03 0a		 add	 ecx, DWORD PTR [edx]
  009c1	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
  009c4	eb 1e		 jmp	 SHORT $LN59@P_SpawnHoo
$LN58@P_SpawnHoo:

; 8177 : 		else
; 8178 : 			mthingz = R_PointInSubsector(mthingx, mthing->y << FRACBITS)->sector->floorheight;

  009c6	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  009c9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  009cd	c1 e1 10	 shl	 ecx, 16			; 00000010H
  009d0	51		 push	 ecx
  009d1	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  009d4	52		 push	 edx
  009d5	e8 00 00 00 00	 call	 _R_PointInSubsector
  009da	83 c4 08	 add	 esp, 8
  009dd	8b 00		 mov	 eax, DWORD PTR [eax]
  009df	8b 08		 mov	 ecx, DWORD PTR [eax]
  009e1	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
$LN59@P_SpawnHoo:

; 8179 : 
; 8180 : 		closestangle = FixedAngle(mthing->angle*FRACUNIT);

  009e4	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  009e7	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  009eb	c1 e1 10	 shl	 ecx, 16			; 00000010H
  009ee	51		 push	 ecx
  009ef	e8 00 00 00 00	 call	 _FixedAngle
  009f4	83 c4 04	 add	 esp, 4
  009f7	89 45 b4	 mov	 DWORD PTR _closestangle$[ebp], eax

; 8181 : 
; 8182 : 		// Create the hoop!
; 8183 : 		for (i = 0; i < 16; i++)

  009fa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00a01	eb 09		 jmp	 SHORT $LN16@P_SpawnHoo
$LN14@P_SpawnHoo:
  00a03	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00a06	83 c0 01	 add	 eax, 1
  00a09	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN16@P_SpawnHoo:
  00a0c	83 7d f0 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  00a10	0f 8d 1e 01 00
	00		 jge	 $LN15@P_SpawnHoo

; 8184 : 		{
; 8185 : 			fa = (i*FINEANGLES/8) & FINEMASK;

  00a16	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00a19	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00a1c	99		 cdq
  00a1d	83 e2 07	 and	 edx, 7
  00a20	03 c2		 add	 eax, edx
  00a22	c1 f8 03	 sar	 eax, 3
  00a25	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  00a2a	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8186 : 			v[0] = FixedMul(FINECOSINE(fa),192*FRACUNIT);

  00a2d	68 00 00 c0 00	 push	 12582912		; 00c00000H
  00a32	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  00a35	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00a3b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00a3e	52		 push	 edx
  00a3f	e8 00 00 00 00	 call	 _FixedMul
  00a44	83 c4 08	 add	 esp, 8
  00a47	b9 04 00 00 00	 mov	 ecx, 4
  00a4c	6b d1 00	 imul	 edx, ecx, 0
  00a4f	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8187 : 			v[1] = 0;

  00a53	b8 04 00 00 00	 mov	 eax, 4
  00a58	c1 e0 00	 shl	 eax, 0
  00a5b	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8188 : 			v[2] = FixedMul(FINESINE(fa),192*FRACUNIT);

  00a63	68 00 00 c0 00	 push	 12582912		; 00c00000H
  00a68	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  00a6b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00a72	51		 push	 ecx
  00a73	e8 00 00 00 00	 call	 _FixedMul
  00a78	83 c4 08	 add	 esp, 8
  00a7b	ba 04 00 00 00	 mov	 edx, 4
  00a80	d1 e2		 shl	 edx, 1
  00a82	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8189 : 			v[3] = FRACUNIT;

  00a86	b8 04 00 00 00	 mov	 eax, 4
  00a8b	6b c8 03	 imul	 ecx, eax, 3
  00a8e	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8190 : 
; 8191 : 			res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  00a96	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  00a99	50		 push	 eax
  00a9a	e8 00 00 00 00	 call	 _RotateZMatrix
  00a9f	83 c4 04	 add	 esp, 4
  00aa2	50		 push	 eax
  00aa3	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00aa6	51		 push	 ecx
  00aa7	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  00aac	83 c4 08	 add	 esp, 8
  00aaf	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8192 : 			M_Memcpy(&v, res, sizeof (v));

  00ab2	6a 10		 push	 16			; 00000010H
  00ab4	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  00ab7	50		 push	 eax
  00ab8	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  00abb	51		 push	 ecx
  00abc	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00ac2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8193 : 
; 8194 : 			finalx = mthingx + v[0];

  00ac5	b8 04 00 00 00	 mov	 eax, 4
  00aca	6b c8 00	 imul	 ecx, eax, 0
  00acd	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  00ad0	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  00ad4	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8195 : 			finaly = mthingy + v[1];

  00ad7	b8 04 00 00 00	 mov	 eax, 4
  00adc	c1 e0 00	 shl	 eax, 0
  00adf	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  00ae2	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00ae6	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8196 : 			finalz = mthingz + v[2];

  00ae9	b8 04 00 00 00	 mov	 eax, 4
  00aee	d1 e0		 shl	 eax, 1
  00af0	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  00af3	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  00af7	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8197 : 
; 8198 : 			mobj = P_SpawnMobj(finalx, finaly, finalz, MT_NIGHTSWING);

  00afa	68 fc 00 00 00	 push	 252			; 000000fcH
  00aff	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  00b02	50		 push	 eax
  00b03	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  00b06	51		 push	 ecx
  00b07	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  00b0a	52		 push	 edx
  00b0b	e8 00 00 00 00	 call	 _P_SpawnMobj
  00b10	83 c4 10	 add	 esp, 16			; 00000010H
  00b13	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8199 : 			mobj->z -= mobj->height/2;

  00b16	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b19	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00b1c	99		 cdq
  00b1d	2b c2		 sub	 eax, edx
  00b1f	d1 f8		 sar	 eax, 1
  00b21	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00b24	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00b27	2b d0		 sub	 edx, eax
  00b29	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b2c	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8200 : 		}

  00b2f	e9 cf fe ff ff	 jmp	 $LN14@P_SpawnHoo
$LN15@P_SpawnHoo:

; 8201 : 		return;

  00b34	e9 a6 10 00 00	 jmp	 $LN121@P_SpawnHoo

; 8202 : 	}

  00b39	e9 a1 10 00 00	 jmp	 $LN121@P_SpawnHoo
$LN56@P_SpawnHoo:

; 8203 : 	else
; 8204 : 	{
; 8205 : 		if (ultimatemode && !(G_IsSpecialStage(gamemap) || (maptol & TOL_NIGHTS))) // No rings in Ultimate!

  00b3e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00b45	85 c0		 test	 eax, eax
  00b47	74 25		 je	 SHORT $LN60@P_SpawnHoo
  00b49	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00b50	50		 push	 eax
  00b51	e8 00 00 00 00	 call	 _G_IsSpecialStage
  00b56	83 c4 04	 add	 esp, 4
  00b59	85 c0		 test	 eax, eax
  00b5b	75 11		 jne	 SHORT $LN60@P_SpawnHoo
  00b5d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00b64	83 e0 40	 and	 eax, 64			; 00000040H
  00b67	75 05		 jne	 SHORT $LN60@P_SpawnHoo

; 8206 : 			return;

  00b69	e9 71 10 00 00	 jmp	 $LN121@P_SpawnHoo
$LN60@P_SpawnHoo:

; 8207 : 
; 8208 : 		// Take care of rings and coins.
; 8209 : 		if (mthing->type == mobjinfo[MT_RING].doomednum || mthing->type == mobjinfo[MT_COIN].doomednum ||
; 8210 : 			mthing->type == mobjinfo[MT_REDTEAMRING].doomednum || mthing->type == mobjinfo[MT_BLUETEAMRING].doomednum) // Your basic ring.

  00b6e	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00b71	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00b75	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  00b7a	6b c2 2b	 imul	 eax, edx, 43
  00b7d	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  00b83	74 4c		 je	 SHORT $LN63@P_SpawnHoo
  00b85	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00b88	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00b8c	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  00b91	69 c2 e1 00 00
	00		 imul	 eax, edx, 225
  00b97	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  00b9d	74 32		 je	 SHORT $LN63@P_SpawnHoo
  00b9f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00ba2	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00ba6	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  00bab	6b c2 30	 imul	 eax, edx, 48
  00bae	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  00bb4	74 1b		 je	 SHORT $LN63@P_SpawnHoo
  00bb6	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00bb9	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00bbd	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  00bc2	6b c2 31	 imul	 eax, edx, 49
  00bc5	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  00bcb	0f 85 64 03 00
	00		 jne	 $LN61@P_SpawnHoo
$LN63@P_SpawnHoo:

; 8211 : 		{
; 8212 : 			if (mthing->options >> ZSHIFT)

  00bd1	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00bd4	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00bd8	c1 f9 04	 sar	 ecx, 4
  00bdb	85 c9		 test	 ecx, ecx
  00bdd	0f 84 85 00 00
	00		 je	 $LN64@P_SpawnHoo

; 8213 : 			{
; 8214 : 				if (!(mthing->options & MTF_OBJECTFLIP))

  00be3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00be6	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00bea	83 e1 02	 and	 ecx, 2
  00bed	75 3c		 jne	 SHORT $LN66@P_SpawnHoo

; 8215 : 					mthing->z = (INT16)((R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS))>>FRACBITS);

  00bef	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00bf2	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00bf6	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00bf9	51		 push	 ecx
  00bfa	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00bfd	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00c00	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c03	50		 push	 eax
  00c04	e8 00 00 00 00	 call	 _R_PointInSubsector
  00c09	83 c4 08	 add	 esp, 8
  00c0c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c0e	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00c11	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00c15	c1 f8 04	 sar	 eax, 4
  00c18	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c1b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00c1d	03 c8		 add	 ecx, eax
  00c1f	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00c22	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00c25	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx
  00c29	eb 3b		 jmp	 SHORT $LN67@P_SpawnHoo
$LN66@P_SpawnHoo:

; 8216 : 				else
; 8217 : 					mthing->z = (INT16)((R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->ceilingheight - ((mthing->options >> ZSHIFT) << FRACBITS))>>FRACBITS);

  00c2b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00c2e	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00c32	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00c35	51		 push	 ecx
  00c36	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00c39	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00c3c	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c3f	50		 push	 eax
  00c40	e8 00 00 00 00	 call	 _R_PointInSubsector
  00c45	83 c4 08	 add	 esp, 8
  00c48	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c4a	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00c4d	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00c51	c1 f8 04	 sar	 eax, 4
  00c54	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c57	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00c5a	2b c8		 sub	 ecx, eax
  00c5c	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00c5f	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00c62	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx
$LN67@P_SpawnHoo:

; 8218 : 			}

  00c66	eb 65		 jmp	 SHORT $LN69@P_SpawnHoo
$LN64@P_SpawnHoo:

; 8219 : 			else
; 8220 : 			{
; 8221 : 				if (!(mthing->options & MTF_OBJECTFLIP))

  00c68	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00c6b	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00c6f	83 e1 02	 and	 ecx, 2
  00c72	75 2d		 jne	 SHORT $LN68@P_SpawnHoo

; 8222 : 					mthing->z = (INT16)(R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight>>FRACBITS);

  00c74	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00c77	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00c7b	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00c7e	51		 push	 ecx
  00c7f	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00c82	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00c85	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c88	50		 push	 eax
  00c89	e8 00 00 00 00	 call	 _R_PointInSubsector
  00c8e	83 c4 08	 add	 esp, 8
  00c91	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c93	8b 11		 mov	 edx, DWORD PTR [ecx]
  00c95	c1 fa 10	 sar	 edx, 16			; 00000010H
  00c98	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00c9b	66 89 50 0a	 mov	 WORD PTR [eax+10], dx
  00c9f	eb 2c		 jmp	 SHORT $LN69@P_SpawnHoo
$LN68@P_SpawnHoo:

; 8223 : 				else
; 8224 : 					mthing->z = (INT16)(R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->ceilingheight>>FRACBITS);

  00ca1	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00ca4	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00ca8	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00cab	51		 push	 ecx
  00cac	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00caf	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00cb2	c1 e0 10	 shl	 eax, 16			; 00000010H
  00cb5	50		 push	 eax
  00cb6	e8 00 00 00 00	 call	 _R_PointInSubsector
  00cbb	83 c4 08	 add	 esp, 8
  00cbe	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00cc3	c1 fa 10	 sar	 edx, 16			; 00000010H
  00cc6	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00cc9	66 89 50 0a	 mov	 WORD PTR [eax+10], dx
$LN69@P_SpawnHoo:

; 8225 : 			}
; 8226 : 
; 8227 : 			if (mthing->options & MTF_AMBUSH) // Special flag for rings

  00ccd	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00cd0	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00cd4	83 e1 08	 and	 ecx, 8
  00cd7	74 30		 je	 SHORT $LN72@P_SpawnHoo

; 8228 : 			{
; 8229 : 				if (!(mthing->options & MTF_OBJECTFLIP))

  00cd9	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00cdc	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00ce0	83 e1 02	 and	 ecx, 2
  00ce3	75 13		 jne	 SHORT $LN71@P_SpawnHoo

; 8230 : 					mthing->z += 32;

  00ce5	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00ce8	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00cec	83 c1 20	 add	 ecx, 32			; 00000020H
  00cef	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00cf2	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx
  00cf6	eb 11		 jmp	 SHORT $LN72@P_SpawnHoo
$LN71@P_SpawnHoo:

; 8231 : 				else
; 8232 : 					mthing->z -= 56;

  00cf8	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00cfb	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00cff	83 e9 38	 sub	 ecx, 56			; 00000038H
  00d02	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00d05	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx
$LN72@P_SpawnHoo:

; 8233 : 			}
; 8234 : 
; 8235 : 			// Handle all of this in one block so we don't need individual blocks for every ring type.
; 8236 : 			switch (mthing->type)

  00d09	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00d0c	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00d10	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv731[ebp], ecx
  00d16	81 bd 58 ff ff
	ff 35 01 00 00	 cmp	 DWORD PTR tv731[ebp], 309 ; 00000135H
  00d20	7f 2d		 jg	 SHORT $LN127@P_SpawnHoo
  00d22	81 bd 58 ff ff
	ff 35 01 00 00	 cmp	 DWORD PTR tv731[ebp], 309 ; 00000135H
  00d2c	0f 84 ff 00 00
	00		 je	 $LN78@P_SpawnHoo
  00d32	81 bd 58 ff ff
	ff 2c 01 00 00	 cmp	 DWORD PTR tv731[ebp], 300 ; 0000012cH
  00d3c	74 22		 je	 SHORT $LN73@P_SpawnHoo
  00d3e	81 bd 58 ff ff
	ff 34 01 00 00	 cmp	 DWORD PTR tv731[ebp], 308 ; 00000134H
  00d48	74 7d		 je	 SHORT $LN75@P_SpawnHoo
  00d4a	e9 4a 01 00 00	 jmp	 $LN17@P_SpawnHoo
$LN127@P_SpawnHoo:
  00d4f	81 bd 58 ff ff
	ff 08 07 00 00	 cmp	 DWORD PTR tv731[ebp], 1800 ; 00000708H
  00d59	74 37		 je	 SHORT $LN74@P_SpawnHoo
  00d5b	e9 39 01 00 00	 jmp	 $LN17@P_SpawnHoo
$LN73@P_SpawnHoo:

; 8237 : 			{
; 8238 : 				case 300: //MT_RING
; 8239 : #ifdef BLUE_SPHERES
; 8240 : 					// Spawn rings as blue spheres in special stages, ala S3+K.
; 8241 : 					if (G_IsSpecialStage(gamemap))
; 8242 : 						mobj = P_SpawnMobj(mthing->x << FRACBITS, mthing->y << FRACBITS,mthing->z << FRACBITS, MT_BLUEBALL);
; 8243 : 					else
; 8244 : #endif
; 8245 : 						mobj = P_SpawnMobj(mthing->x << FRACBITS, mthing->y << FRACBITS,mthing->z << FRACBITS, MT_RING);

  00d60	6a 2b		 push	 43			; 0000002bH
  00d62	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00d65	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00d69	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00d6c	51		 push	 ecx
  00d6d	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00d70	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00d74	c1 e0 10	 shl	 eax, 16			; 00000010H
  00d77	50		 push	 eax
  00d78	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00d7b	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00d7e	c1 e2 10	 shl	 edx, 16			; 00000010H
  00d81	52		 push	 edx
  00d82	e8 00 00 00 00	 call	 _P_SpawnMobj
  00d87	83 c4 10	 add	 esp, 16			; 00000010H
  00d8a	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8246 : 					break;

  00d8d	e9 07 01 00 00	 jmp	 $LN17@P_SpawnHoo
$LN74@P_SpawnHoo:

; 8247 : 				case 1800: //MT_COIN
; 8248 : 					mobj = P_SpawnMobj(mthing->x << FRACBITS, mthing->y << FRACBITS,mthing->z << FRACBITS, MT_COIN);

  00d92	68 e1 00 00 00	 push	 225			; 000000e1H
  00d97	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00d9a	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00d9e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00da1	51		 push	 ecx
  00da2	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00da5	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00da9	c1 e0 10	 shl	 eax, 16			; 00000010H
  00dac	50		 push	 eax
  00dad	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00db0	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00db3	c1 e2 10	 shl	 edx, 16			; 00000010H
  00db6	52		 push	 edx
  00db7	e8 00 00 00 00	 call	 _P_SpawnMobj
  00dbc	83 c4 10	 add	 esp, 16			; 00000010H
  00dbf	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8249 : 					break;

  00dc2	e9 d2 00 00 00	 jmp	 $LN17@P_SpawnHoo
$LN75@P_SpawnHoo:

; 8250 : 				case 308: //MT_REDTEAMRING
; 8251 : 					if (gametype == GT_CTF) //No team-specific rings outside of CTF!

  00dc7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00dce	83 f8 04	 cmp	 eax, 4
  00dd1	75 2f		 jne	 SHORT $LN76@P_SpawnHoo

; 8252 : 						mobj = P_SpawnMobj(mthing->x << FRACBITS, mthing->y << FRACBITS,mthing->z << FRACBITS, MT_REDTEAMRING);

  00dd3	6a 30		 push	 48			; 00000030H
  00dd5	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00dd8	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00ddc	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00ddf	51		 push	 ecx
  00de0	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00de3	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00de7	c1 e0 10	 shl	 eax, 16			; 00000010H
  00dea	50		 push	 eax
  00deb	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00dee	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00df1	c1 e2 10	 shl	 edx, 16			; 00000010H
  00df4	52		 push	 edx
  00df5	e8 00 00 00 00	 call	 _P_SpawnMobj
  00dfa	83 c4 10	 add	 esp, 16			; 00000010H
  00dfd	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax
  00e00	eb 2d		 jmp	 SHORT $LN77@P_SpawnHoo
$LN76@P_SpawnHoo:

; 8253 : 					else
; 8254 : 						mobj = P_SpawnMobj(mthing->x << FRACBITS, mthing->y << FRACBITS,mthing->z << FRACBITS, MT_RING);

  00e02	6a 2b		 push	 43			; 0000002bH
  00e04	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00e07	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00e0b	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00e0e	51		 push	 ecx
  00e0f	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00e12	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00e16	c1 e0 10	 shl	 eax, 16			; 00000010H
  00e19	50		 push	 eax
  00e1a	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00e1d	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00e20	c1 e2 10	 shl	 edx, 16			; 00000010H
  00e23	52		 push	 edx
  00e24	e8 00 00 00 00	 call	 _P_SpawnMobj
  00e29	83 c4 10	 add	 esp, 16			; 00000010H
  00e2c	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax
$LN77@P_SpawnHoo:

; 8255 : 					break;

  00e2f	eb 68		 jmp	 SHORT $LN17@P_SpawnHoo
$LN78@P_SpawnHoo:

; 8256 : 				case 309: //MT_BLUETEAMRING
; 8257 : 					if (gametype == GT_CTF) //No team-specific rings outside of CTF!

  00e31	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00e38	83 f8 04	 cmp	 eax, 4
  00e3b	75 2f		 jne	 SHORT $LN79@P_SpawnHoo

; 8258 : 						mobj = P_SpawnMobj(mthing->x << FRACBITS, mthing->y << FRACBITS,mthing->z << FRACBITS, MT_BLUETEAMRING);

  00e3d	6a 31		 push	 49			; 00000031H
  00e3f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00e42	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00e46	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00e49	51		 push	 ecx
  00e4a	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00e4d	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00e51	c1 e0 10	 shl	 eax, 16			; 00000010H
  00e54	50		 push	 eax
  00e55	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00e58	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00e5b	c1 e2 10	 shl	 edx, 16			; 00000010H
  00e5e	52		 push	 edx
  00e5f	e8 00 00 00 00	 call	 _P_SpawnMobj
  00e64	83 c4 10	 add	 esp, 16			; 00000010H
  00e67	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax
  00e6a	eb 2d		 jmp	 SHORT $LN80@P_SpawnHoo
$LN79@P_SpawnHoo:

; 8259 : 					else
; 8260 : 						mobj = P_SpawnMobj(mthing->x << FRACBITS, mthing->y << FRACBITS,mthing->z << FRACBITS, MT_RING);

  00e6c	6a 2b		 push	 43			; 0000002bH
  00e6e	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00e71	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00e75	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00e78	51		 push	 ecx
  00e79	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00e7c	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00e80	c1 e0 10	 shl	 eax, 16			; 00000010H
  00e83	50		 push	 eax
  00e84	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00e87	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00e8a	c1 e2 10	 shl	 edx, 16			; 00000010H
  00e8d	52		 push	 edx
  00e8e	e8 00 00 00 00	 call	 _P_SpawnMobj
  00e93	83 c4 10	 add	 esp, 16			; 00000010H
  00e96	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax
$LN80@P_SpawnHoo:
$LN17@P_SpawnHoo:

; 8261 : 					break;
; 8262 : 			}
; 8263 : 
; 8264 : 			mobj->spawnpoint = mthing;

  00e99	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e9c	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00e9f	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 8265 : 
; 8266 : 			if (mthing->options & MTF_OBJECTFLIP)

  00ea5	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00ea8	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00eac	83 e1 02	 and	 ecx, 2
  00eaf	74 2d		 je	 SHORT $LN81@P_SpawnHoo

; 8267 : 			{
; 8268 : 				mobj->eflags |= MFE_VERTICALFLIP;

  00eb1	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00eb4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00eba	83 c9 20	 or	 ecx, 32			; 00000020H
  00ebd	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00ec0	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 8269 : 				mobj->flags2 |= MF2_OBJECTFLIP;

  00ec6	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ec9	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00ecf	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  00ed5	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00ed8	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN81@P_SpawnHoo:

; 8270 : 			}
; 8271 : 
; 8272 : 			if (mobj->tics > 0)

  00ede	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ee1	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00ee5	7e 18		 jle	 SHORT $LN82@P_SpawnHoo

; 8273 : 				mobj->tics = 1 + (P_Random() % mobj->tics);

  00ee7	e8 00 00 00 00	 call	 _P_Random
  00eec	0f b6 c0	 movzx	 eax, al
  00eef	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00ef2	99		 cdq
  00ef3	f7 79 58	 idiv	 DWORD PTR [ecx+88]
  00ef6	83 c2 01	 add	 edx, 1
  00ef9	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00efc	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN82@P_SpawnHoo:

; 8274 : 			mobj->angle = FixedAngle(mthing->angle*FRACUNIT);

  00eff	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00f02	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00f06	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00f09	51		 push	 ecx
  00f0a	e8 00 00 00 00	 call	 _FixedAngle
  00f0f	83 c4 04	 add	 esp, 4
  00f12	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00f15	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 8275 : 			mobj->flags |= MF_AMBUSH;

  00f18	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f1b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00f1e	83 c9 20	 or	 ecx, 32			; 00000020H
  00f21	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00f24	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 8276 : 			mthing->mobj = mobj;

  00f27	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00f2a	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00f2d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 8277 : 		}

  00f30	e9 aa 0c 00 00	 jmp	 $LN121@P_SpawnHoo
$LN61@P_SpawnHoo:

; 8278 : 		else if (mthing->type == 600) // Vertical Rings - Stack of 5 (suitable for Yellow Spring)

  00f35	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00f38	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00f3c	81 f9 58 02 00
	00		 cmp	 ecx, 600		; 00000258H
  00f42	0f 85 09 01 00
	00		 jne	 $LN83@P_SpawnHoo

; 8279 : 		{
; 8280 : 			for (r = 1; r <= 5; r++)

  00f48	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _r$[ebp], 1
  00f4f	eb 09		 jmp	 SHORT $LN21@P_SpawnHoo
$LN19@P_SpawnHoo:
  00f51	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  00f54	83 c0 01	 add	 eax, 1
  00f57	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax
$LN21@P_SpawnHoo:
  00f5a	83 7d f4 05	 cmp	 DWORD PTR _r$[ebp], 5
  00f5e	0f 8f e8 00 00
	00		 jg	 $LN20@P_SpawnHoo

; 8281 : 			{
; 8282 : 				if (mthing->options >> ZSHIFT)

  00f64	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00f67	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00f6b	c1 f9 04	 sar	 ecx, 4
  00f6e	85 c9		 test	 ecx, ecx
  00f70	74 3d		 je	 SHORT $LN85@P_SpawnHoo

; 8283 : 					z = (R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS)) + 64*FRACUNIT*r;

  00f72	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00f75	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00f79	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00f7c	51		 push	 ecx
  00f7d	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00f80	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00f83	c1 e0 10	 shl	 eax, 16			; 00000010H
  00f86	50		 push	 eax
  00f87	e8 00 00 00 00	 call	 _R_PointInSubsector
  00f8c	83 c4 08	 add	 esp, 8
  00f8f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f91	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00f94	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00f98	c1 f8 04	 sar	 eax, 4
  00f9b	c1 e0 10	 shl	 eax, 16			; 00000010H
  00f9e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00fa0	03 c8		 add	 ecx, eax
  00fa2	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  00fa5	c1 e2 16	 shl	 edx, 22			; 00000016H
  00fa8	03 ca		 add	 ecx, edx
  00faa	89 4d e4	 mov	 DWORD PTR _z$[ebp], ecx
  00fad	eb 2a		 jmp	 SHORT $LN86@P_SpawnHoo
$LN85@P_SpawnHoo:

; 8284 : 				else
; 8285 : 					z = R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + 64*FRACUNIT*r;

  00faf	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00fb2	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00fb6	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00fb9	51		 push	 ecx
  00fba	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00fbd	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00fc0	c1 e0 10	 shl	 eax, 16			; 00000010H
  00fc3	50		 push	 eax
  00fc4	e8 00 00 00 00	 call	 _R_PointInSubsector
  00fc9	83 c4 08	 add	 esp, 8
  00fcc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fce	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  00fd1	c1 e2 16	 shl	 edx, 22			; 00000016H
  00fd4	03 11		 add	 edx, DWORD PTR [ecx]
  00fd6	89 55 e4	 mov	 DWORD PTR _z$[ebp], edx
$LN86@P_SpawnHoo:

; 8286 : #ifdef BLUE_SPHERES
; 8287 : 				// Spawn rings as blue spheres in special stages, ala S3+K.
; 8288 : 				if (G_IsSpecialStage(gamemap))
; 8289 : 					mobj = P_SpawnMobj(x, y, z, MT_BLUEBALL);
; 8290 : 				else
; 8291 : #endif
; 8292 : 					mobj = P_SpawnMobj(x, y, z, MT_RING);

  00fd9	6a 2b		 push	 43			; 0000002bH
  00fdb	8b 45 e4	 mov	 eax, DWORD PTR _z$[ebp]
  00fde	50		 push	 eax
  00fdf	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  00fe2	51		 push	 ecx
  00fe3	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  00fe6	52		 push	 edx
  00fe7	e8 00 00 00 00	 call	 _P_SpawnMobj
  00fec	83 c4 10	 add	 esp, 16			; 00000010H
  00fef	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8293 : 
; 8294 : 				if (mobj->tics > 0)

  00ff2	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ff5	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00ff9	7e 18		 jle	 SHORT $LN87@P_SpawnHoo

; 8295 : 					mobj->tics = 1 + (P_Random() % mobj->tics);

  00ffb	e8 00 00 00 00	 call	 _P_Random
  01000	0f b6 c0	 movzx	 eax, al
  01003	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01006	99		 cdq
  01007	f7 79 58	 idiv	 DWORD PTR [ecx+88]
  0100a	83 c2 01	 add	 edx, 1
  0100d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01010	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN87@P_SpawnHoo:

; 8296 : 
; 8297 : 				mobj->angle = FixedAngle(mthing->angle*FRACUNIT);

  01013	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01016	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0101a	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0101d	51		 push	 ecx
  0101e	e8 00 00 00 00	 call	 _FixedAngle
  01023	83 c4 04	 add	 esp, 4
  01026	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01029	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 8298 : 				if (mthing->options & MTF_AMBUSH)

  0102c	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0102f	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01033	83 e1 08	 and	 ecx, 8
  01036	74 0f		 je	 SHORT $LN88@P_SpawnHoo

; 8299 : 					mobj->flags |= MF_AMBUSH;

  01038	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0103b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0103e	83 c9 20	 or	 ecx, 32			; 00000020H
  01041	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01044	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN88@P_SpawnHoo:

; 8300 : 			}

  01047	e9 05 ff ff ff	 jmp	 $LN19@P_SpawnHoo
$LN20@P_SpawnHoo:

; 8301 : 		}

  0104c	e9 8e 0b 00 00	 jmp	 $LN121@P_SpawnHoo
$LN83@P_SpawnHoo:

; 8302 : 		else if (mthing->type == 601) // Vertical Rings - Stack of 5 (suitable for Red Spring)

  01051	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01054	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01058	81 f9 59 02 00
	00		 cmp	 ecx, 601		; 00000259H
  0105e	0f 85 09 01 00
	00		 jne	 $LN89@P_SpawnHoo

; 8303 : 		{
; 8304 : 			for (r = 1; r <= 5; r++)

  01064	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _r$[ebp], 1
  0106b	eb 09		 jmp	 SHORT $LN24@P_SpawnHoo
$LN22@P_SpawnHoo:
  0106d	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  01070	83 c0 01	 add	 eax, 1
  01073	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax
$LN24@P_SpawnHoo:
  01076	83 7d f4 05	 cmp	 DWORD PTR _r$[ebp], 5
  0107a	0f 8f e8 00 00
	00		 jg	 $LN23@P_SpawnHoo

; 8305 : 			{
; 8306 : 				if (mthing->options >> ZSHIFT)

  01080	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01083	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01087	c1 f9 04	 sar	 ecx, 4
  0108a	85 c9		 test	 ecx, ecx
  0108c	74 3d		 je	 SHORT $LN91@P_SpawnHoo

; 8307 : 					z = (R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS)) + 128*FRACUNIT*r;

  0108e	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01091	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01095	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01098	51		 push	 ecx
  01099	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  0109c	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0109f	c1 e0 10	 shl	 eax, 16			; 00000010H
  010a2	50		 push	 eax
  010a3	e8 00 00 00 00	 call	 _R_PointInSubsector
  010a8	83 c4 08	 add	 esp, 8
  010ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  010ad	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  010b0	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  010b4	c1 f8 04	 sar	 eax, 4
  010b7	c1 e0 10	 shl	 eax, 16			; 00000010H
  010ba	8b 09		 mov	 ecx, DWORD PTR [ecx]
  010bc	03 c8		 add	 ecx, eax
  010be	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  010c1	c1 e2 17	 shl	 edx, 23			; 00000017H
  010c4	03 ca		 add	 ecx, edx
  010c6	89 4d e4	 mov	 DWORD PTR _z$[ebp], ecx
  010c9	eb 2a		 jmp	 SHORT $LN92@P_SpawnHoo
$LN91@P_SpawnHoo:

; 8308 : 				else
; 8309 : 					z = R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + 128*FRACUNIT*r;

  010cb	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  010ce	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  010d2	c1 e1 10	 shl	 ecx, 16			; 00000010H
  010d5	51		 push	 ecx
  010d6	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  010d9	0f bf 02	 movsx	 eax, WORD PTR [edx]
  010dc	c1 e0 10	 shl	 eax, 16			; 00000010H
  010df	50		 push	 eax
  010e0	e8 00 00 00 00	 call	 _R_PointInSubsector
  010e5	83 c4 08	 add	 esp, 8
  010e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  010ea	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  010ed	c1 e2 17	 shl	 edx, 23			; 00000017H
  010f0	03 11		 add	 edx, DWORD PTR [ecx]
  010f2	89 55 e4	 mov	 DWORD PTR _z$[ebp], edx
$LN92@P_SpawnHoo:

; 8310 : #ifdef BLUE_SPHERES
; 8311 : 				// Spawn rings as blue spheres in special stages, ala S3+K.
; 8312 : 				if (G_IsSpecialStage(gamemap))
; 8313 : 					mobj = P_SpawnMobj(x, y, z, MT_BLUEBALL);
; 8314 : 				else
; 8315 : #endif
; 8316 : 					mobj = P_SpawnMobj(x, y, z, MT_RING);

  010f5	6a 2b		 push	 43			; 0000002bH
  010f7	8b 45 e4	 mov	 eax, DWORD PTR _z$[ebp]
  010fa	50		 push	 eax
  010fb	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  010fe	51		 push	 ecx
  010ff	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  01102	52		 push	 edx
  01103	e8 00 00 00 00	 call	 _P_SpawnMobj
  01108	83 c4 10	 add	 esp, 16			; 00000010H
  0110b	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8317 : 
; 8318 : 				if (mobj->tics > 0)

  0110e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01111	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  01115	7e 18		 jle	 SHORT $LN93@P_SpawnHoo

; 8319 : 					mobj->tics = 1 + (P_Random() % mobj->tics);

  01117	e8 00 00 00 00	 call	 _P_Random
  0111c	0f b6 c0	 movzx	 eax, al
  0111f	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01122	99		 cdq
  01123	f7 79 58	 idiv	 DWORD PTR [ecx+88]
  01126	83 c2 01	 add	 edx, 1
  01129	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0112c	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN93@P_SpawnHoo:

; 8320 : 
; 8321 : 				mobj->angle = FixedAngle(mthing->angle*FRACUNIT);

  0112f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01132	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01136	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01139	51		 push	 ecx
  0113a	e8 00 00 00 00	 call	 _FixedAngle
  0113f	83 c4 04	 add	 esp, 4
  01142	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01145	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 8322 : 				if (mthing->options & MTF_AMBUSH)

  01148	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0114b	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0114f	83 e1 08	 and	 ecx, 8
  01152	74 0f		 je	 SHORT $LN94@P_SpawnHoo

; 8323 : 					mobj->flags |= MF_AMBUSH;

  01154	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01157	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0115a	83 c9 20	 or	 ecx, 32			; 00000020H
  0115d	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01160	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN94@P_SpawnHoo:

; 8324 : 			}

  01163	e9 05 ff ff ff	 jmp	 $LN22@P_SpawnHoo
$LN23@P_SpawnHoo:

; 8325 : 		}

  01168	e9 72 0a 00 00	 jmp	 $LN121@P_SpawnHoo
$LN89@P_SpawnHoo:

; 8326 : 		else if (mthing->type == 602) // Diagonal rings (5)

  0116d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01170	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01174	81 f9 5a 02 00
	00		 cmp	 ecx, 602		; 0000025aH
  0117a	0f 85 65 01 00
	00		 jne	 $LN95@P_SpawnHoo

; 8327 : 		{
; 8328 : 			angle_t angle = ANGLE_45 * (mthing->angle/45);

  01180	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01183	0f bf 40 04	 movsx	 eax, WORD PTR [eax+4]
  01187	99		 cdq
  01188	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  0118d	f7 f9		 idiv	 ecx
  0118f	c1 e0 1d	 shl	 eax, 29			; 0000001dH
  01192	89 45 a0	 mov	 DWORD PTR _angle$2[ebp], eax

; 8329 : 			angle >>= ANGLETOFINESHIFT;

  01195	8b 45 a0	 mov	 eax, DWORD PTR _angle$2[ebp]
  01198	c1 e8 13	 shr	 eax, 19			; 00000013H
  0119b	89 45 a0	 mov	 DWORD PTR _angle$2[ebp], eax

; 8330 : 
; 8331 : 			for (r = 1; r <= 5; r++)

  0119e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _r$[ebp], 1
  011a5	eb 09		 jmp	 SHORT $LN27@P_SpawnHoo
$LN25@P_SpawnHoo:
  011a7	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  011aa	83 c0 01	 add	 eax, 1
  011ad	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax
$LN27@P_SpawnHoo:
  011b0	83 7d f4 05	 cmp	 DWORD PTR _r$[ebp], 5
  011b4	0f 8f 26 01 00
	00		 jg	 $LN26@P_SpawnHoo

; 8332 : 			{
; 8333 : 				x += FixedMul(64*FRACUNIT, FINECOSINE(angle));

  011ba	8b 45 a0	 mov	 eax, DWORD PTR _angle$2[ebp]
  011bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  011c3	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  011c6	52		 push	 edx
  011c7	68 00 00 40 00	 push	 4194304			; 00400000H
  011cc	e8 00 00 00 00	 call	 _FixedMul
  011d1	83 c4 08	 add	 esp, 8
  011d4	03 45 ec	 add	 eax, DWORD PTR _x$[ebp]
  011d7	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 8334 : 				y += FixedMul(64*FRACUNIT, FINESINE(angle));

  011da	8b 45 a0	 mov	 eax, DWORD PTR _angle$2[ebp]
  011dd	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  011e4	51		 push	 ecx
  011e5	68 00 00 40 00	 push	 4194304			; 00400000H
  011ea	e8 00 00 00 00	 call	 _FixedMul
  011ef	83 c4 08	 add	 esp, 8
  011f2	03 45 e8	 add	 eax, DWORD PTR _y$[ebp]
  011f5	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax

; 8335 : 				if (mthing->options >> ZSHIFT)

  011f8	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  011fb	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  011ff	c1 f9 04	 sar	 ecx, 4
  01202	85 c9		 test	 ecx, ecx
  01204	74 3d		 je	 SHORT $LN97@P_SpawnHoo

; 8336 : 					z = (R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS)) + 64*FRACUNIT*r;

  01206	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01209	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0120d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01210	51		 push	 ecx
  01211	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  01214	0f bf 02	 movsx	 eax, WORD PTR [edx]
  01217	c1 e0 10	 shl	 eax, 16			; 00000010H
  0121a	50		 push	 eax
  0121b	e8 00 00 00 00	 call	 _R_PointInSubsector
  01220	83 c4 08	 add	 esp, 8
  01223	8b 08		 mov	 ecx, DWORD PTR [eax]
  01225	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  01228	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0122c	c1 f8 04	 sar	 eax, 4
  0122f	c1 e0 10	 shl	 eax, 16			; 00000010H
  01232	8b 09		 mov	 ecx, DWORD PTR [ecx]
  01234	03 c8		 add	 ecx, eax
  01236	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  01239	c1 e2 16	 shl	 edx, 22			; 00000016H
  0123c	03 ca		 add	 ecx, edx
  0123e	89 4d e4	 mov	 DWORD PTR _z$[ebp], ecx
  01241	eb 2a		 jmp	 SHORT $LN98@P_SpawnHoo
$LN97@P_SpawnHoo:

; 8337 : 				else
; 8338 : 					z = R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + 64*FRACUNIT*r;

  01243	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01246	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0124a	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0124d	51		 push	 ecx
  0124e	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  01251	0f bf 02	 movsx	 eax, WORD PTR [edx]
  01254	c1 e0 10	 shl	 eax, 16			; 00000010H
  01257	50		 push	 eax
  01258	e8 00 00 00 00	 call	 _R_PointInSubsector
  0125d	83 c4 08	 add	 esp, 8
  01260	8b 08		 mov	 ecx, DWORD PTR [eax]
  01262	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  01265	c1 e2 16	 shl	 edx, 22			; 00000016H
  01268	03 11		 add	 edx, DWORD PTR [ecx]
  0126a	89 55 e4	 mov	 DWORD PTR _z$[ebp], edx
$LN98@P_SpawnHoo:

; 8339 : #ifdef BLUE_SPHERES
; 8340 : 				// Spawn rings as blue spheres in special stages, ala S3+K.
; 8341 : 				if (G_IsSpecialStage(gamemap))
; 8342 : 					mobj = P_SpawnMobj(x, y, z, MT_BLUEBALL);
; 8343 : 				else
; 8344 : #endif
; 8345 : 					mobj = P_SpawnMobj(x, y, z, MT_RING);

  0126d	6a 2b		 push	 43			; 0000002bH
  0126f	8b 45 e4	 mov	 eax, DWORD PTR _z$[ebp]
  01272	50		 push	 eax
  01273	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  01276	51		 push	 ecx
  01277	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  0127a	52		 push	 edx
  0127b	e8 00 00 00 00	 call	 _P_SpawnMobj
  01280	83 c4 10	 add	 esp, 16			; 00000010H
  01283	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8346 : 
; 8347 : 				if (mobj->tics > 0)

  01286	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01289	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  0128d	7e 18		 jle	 SHORT $LN99@P_SpawnHoo

; 8348 : 					mobj->tics = 1 + (P_Random() % mobj->tics);

  0128f	e8 00 00 00 00	 call	 _P_Random
  01294	0f b6 c0	 movzx	 eax, al
  01297	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0129a	99		 cdq
  0129b	f7 79 58	 idiv	 DWORD PTR [ecx+88]
  0129e	83 c2 01	 add	 edx, 1
  012a1	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  012a4	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN99@P_SpawnHoo:

; 8349 : 
; 8350 : 				mobj->angle = FixedAngle(mthing->angle*FRACUNIT);

  012a7	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  012aa	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  012ae	c1 e1 10	 shl	 ecx, 16			; 00000010H
  012b1	51		 push	 ecx
  012b2	e8 00 00 00 00	 call	 _FixedAngle
  012b7	83 c4 04	 add	 esp, 4
  012ba	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  012bd	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 8351 : 				if (mthing->options & MTF_AMBUSH)

  012c0	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  012c3	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  012c7	83 e1 08	 and	 ecx, 8
  012ca	74 0f		 je	 SHORT $LN100@P_SpawnHoo

; 8352 : 					mobj->flags |= MF_AMBUSH;

  012cc	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  012cf	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  012d2	83 c9 20	 or	 ecx, 32			; 00000020H
  012d5	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  012d8	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN100@P_SpawnHoo:

; 8353 : 			}

  012db	e9 c7 fe ff ff	 jmp	 $LN25@P_SpawnHoo
$LN26@P_SpawnHoo:

; 8354 : 		}

  012e0	e9 fa 08 00 00	 jmp	 $LN121@P_SpawnHoo
$LN95@P_SpawnHoo:

; 8355 : 		else if (mthing->type == 603) // Diagonal rings (10)

  012e5	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  012e8	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  012ec	81 f9 5b 02 00
	00		 cmp	 ecx, 603		; 0000025bH
  012f2	0f 85 65 01 00
	00		 jne	 $LN101@P_SpawnHoo

; 8356 : 		{
; 8357 : 			angle_t angle = ANGLE_45 * (mthing->angle/45);

  012f8	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  012fb	0f bf 40 04	 movsx	 eax, WORD PTR [eax+4]
  012ff	99		 cdq
  01300	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  01305	f7 f9		 idiv	 ecx
  01307	c1 e0 1d	 shl	 eax, 29			; 0000001dH
  0130a	89 45 9c	 mov	 DWORD PTR _angle$1[ebp], eax

; 8358 : 			angle >>= ANGLETOFINESHIFT;

  0130d	8b 45 9c	 mov	 eax, DWORD PTR _angle$1[ebp]
  01310	c1 e8 13	 shr	 eax, 19			; 00000013H
  01313	89 45 9c	 mov	 DWORD PTR _angle$1[ebp], eax

; 8359 : 
; 8360 : 			for (r = 1; r <= 10; r++)

  01316	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _r$[ebp], 1
  0131d	eb 09		 jmp	 SHORT $LN30@P_SpawnHoo
$LN28@P_SpawnHoo:
  0131f	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  01322	83 c0 01	 add	 eax, 1
  01325	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax
$LN30@P_SpawnHoo:
  01328	83 7d f4 0a	 cmp	 DWORD PTR _r$[ebp], 10	; 0000000aH
  0132c	0f 8f 26 01 00
	00		 jg	 $LN29@P_SpawnHoo

; 8361 : 			{
; 8362 : 				x += FixedMul(64*FRACUNIT, FINECOSINE(angle));

  01332	8b 45 9c	 mov	 eax, DWORD PTR _angle$1[ebp]
  01335	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0133b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0133e	52		 push	 edx
  0133f	68 00 00 40 00	 push	 4194304			; 00400000H
  01344	e8 00 00 00 00	 call	 _FixedMul
  01349	83 c4 08	 add	 esp, 8
  0134c	03 45 ec	 add	 eax, DWORD PTR _x$[ebp]
  0134f	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 8363 : 				y += FixedMul(64*FRACUNIT, FINESINE(angle));

  01352	8b 45 9c	 mov	 eax, DWORD PTR _angle$1[ebp]
  01355	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  0135c	51		 push	 ecx
  0135d	68 00 00 40 00	 push	 4194304			; 00400000H
  01362	e8 00 00 00 00	 call	 _FixedMul
  01367	83 c4 08	 add	 esp, 8
  0136a	03 45 e8	 add	 eax, DWORD PTR _y$[ebp]
  0136d	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax

; 8364 : 				if (mthing->options >> ZSHIFT)

  01370	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01373	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01377	c1 f9 04	 sar	 ecx, 4
  0137a	85 c9		 test	 ecx, ecx
  0137c	74 3d		 je	 SHORT $LN103@P_SpawnHoo

; 8365 : 					z = (R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS)) + 64*FRACUNIT*r;

  0137e	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01381	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01385	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01388	51		 push	 ecx
  01389	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  0138c	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0138f	c1 e0 10	 shl	 eax, 16			; 00000010H
  01392	50		 push	 eax
  01393	e8 00 00 00 00	 call	 _R_PointInSubsector
  01398	83 c4 08	 add	 esp, 8
  0139b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0139d	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  013a0	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  013a4	c1 f8 04	 sar	 eax, 4
  013a7	c1 e0 10	 shl	 eax, 16			; 00000010H
  013aa	8b 09		 mov	 ecx, DWORD PTR [ecx]
  013ac	03 c8		 add	 ecx, eax
  013ae	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  013b1	c1 e2 16	 shl	 edx, 22			; 00000016H
  013b4	03 ca		 add	 ecx, edx
  013b6	89 4d e4	 mov	 DWORD PTR _z$[ebp], ecx
  013b9	eb 2a		 jmp	 SHORT $LN104@P_SpawnHoo
$LN103@P_SpawnHoo:

; 8366 : 				else
; 8367 : 					z = R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS)->sector->floorheight + 64*FRACUNIT*r;

  013bb	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  013be	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  013c2	c1 e1 10	 shl	 ecx, 16			; 00000010H
  013c5	51		 push	 ecx
  013c6	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  013c9	0f bf 02	 movsx	 eax, WORD PTR [edx]
  013cc	c1 e0 10	 shl	 eax, 16			; 00000010H
  013cf	50		 push	 eax
  013d0	e8 00 00 00 00	 call	 _R_PointInSubsector
  013d5	83 c4 08	 add	 esp, 8
  013d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  013da	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  013dd	c1 e2 16	 shl	 edx, 22			; 00000016H
  013e0	03 11		 add	 edx, DWORD PTR [ecx]
  013e2	89 55 e4	 mov	 DWORD PTR _z$[ebp], edx
$LN104@P_SpawnHoo:

; 8368 : #ifdef BLUE_SPHERES
; 8369 : 				// Spawn rings as blue spheres in special stages, ala S3+K.
; 8370 : 				if (G_IsSpecialStage(gamemap))
; 8371 : 					mobj = P_SpawnMobj(x, y, z, MT_BLUEBALL);
; 8372 : 				else
; 8373 : #endif
; 8374 : 					mobj = P_SpawnMobj(x, y, z, MT_RING);

  013e5	6a 2b		 push	 43			; 0000002bH
  013e7	8b 45 e4	 mov	 eax, DWORD PTR _z$[ebp]
  013ea	50		 push	 eax
  013eb	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  013ee	51		 push	 ecx
  013ef	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  013f2	52		 push	 edx
  013f3	e8 00 00 00 00	 call	 _P_SpawnMobj
  013f8	83 c4 10	 add	 esp, 16			; 00000010H
  013fb	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8375 : 
; 8376 : 				if (mobj->tics > 0)

  013fe	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01401	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  01405	7e 18		 jle	 SHORT $LN105@P_SpawnHoo

; 8377 : 					mobj->tics = 1 + (P_Random() % mobj->tics);

  01407	e8 00 00 00 00	 call	 _P_Random
  0140c	0f b6 c0	 movzx	 eax, al
  0140f	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01412	99		 cdq
  01413	f7 79 58	 idiv	 DWORD PTR [ecx+88]
  01416	83 c2 01	 add	 edx, 1
  01419	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0141c	89 50 58	 mov	 DWORD PTR [eax+88], edx
$LN105@P_SpawnHoo:

; 8378 : 
; 8379 : 				mobj->angle = FixedAngle(mthing->angle*FRACUNIT);

  0141f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01422	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01426	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01429	51		 push	 ecx
  0142a	e8 00 00 00 00	 call	 _FixedAngle
  0142f	83 c4 04	 add	 esp, 4
  01432	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01435	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 8380 : 				if (mthing->options & MTF_AMBUSH)

  01438	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0143b	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0143f	83 e1 08	 and	 ecx, 8
  01442	74 0f		 je	 SHORT $LN106@P_SpawnHoo

; 8381 : 					mobj->flags |= MF_AMBUSH;

  01444	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01447	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0144a	83 c9 20	 or	 ecx, 32			; 00000020H
  0144d	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01450	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN106@P_SpawnHoo:

; 8382 : 			}

  01453	e9 c7 fe ff ff	 jmp	 $LN28@P_SpawnHoo
$LN29@P_SpawnHoo:

; 8383 : 		}

  01458	e9 82 07 00 00	 jmp	 $LN121@P_SpawnHoo
$LN101@P_SpawnHoo:

; 8384 : 		else if (mthing->type == 604) // A ring of rings (NiGHTS stuff)

  0145d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01460	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01464	81 f9 5c 02 00
	00		 cmp	 ecx, 604		; 0000025cH
  0146a	0f 85 bd 01 00
	00		 jne	 $LN107@P_SpawnHoo

; 8385 : 		{
; 8386 : 			mthingx = mthing->x << FRACBITS;

  01470	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01473	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01476	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01479	89 4d d4	 mov	 DWORD PTR _mthingx$[ebp], ecx

; 8387 : 			mthingy = mthing->y << FRACBITS;

  0147c	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0147f	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01483	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01486	89 4d d0	 mov	 DWORD PTR _mthingy$[ebp], ecx

; 8388 : 
; 8389 : 			if (mthing->options >> ZSHIFT)

  01489	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0148c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01490	c1 f9 04	 sar	 ecx, 4
  01493	85 c9		 test	 ecx, ecx
  01495	74 26		 je	 SHORT $LN109@P_SpawnHoo

; 8390 : 				mthingz = (R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS));

  01497	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  0149a	50		 push	 eax
  0149b	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  0149e	51		 push	 ecx
  0149f	e8 00 00 00 00	 call	 _R_PointInSubsector
  014a4	83 c4 08	 add	 esp, 8
  014a7	8b 10		 mov	 edx, DWORD PTR [eax]
  014a9	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  014ac	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  014b0	c1 f9 04	 sar	 ecx, 4
  014b3	c1 e1 10	 shl	 ecx, 16			; 00000010H
  014b6	03 0a		 add	 ecx, DWORD PTR [edx]
  014b8	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
  014bb	eb 1e		 jmp	 SHORT $LN110@P_SpawnHoo
$LN109@P_SpawnHoo:

; 8391 : 			else
; 8392 : 				mthingz = R_PointInSubsector(mthingx, mthing->y << FRACBITS)->sector->floorheight;

  014bd	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  014c0	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  014c4	c1 e1 10	 shl	 ecx, 16			; 00000010H
  014c7	51		 push	 ecx
  014c8	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  014cb	52		 push	 edx
  014cc	e8 00 00 00 00	 call	 _R_PointInSubsector
  014d1	83 c4 08	 add	 esp, 8
  014d4	8b 00		 mov	 eax, DWORD PTR [eax]
  014d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  014d8	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
$LN110@P_SpawnHoo:

; 8393 : 
; 8394 : 			closestangle = FixedAngle(mthing->angle*FRACUNIT);

  014db	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  014de	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  014e2	c1 e1 10	 shl	 ecx, 16			; 00000010H
  014e5	51		 push	 ecx
  014e6	e8 00 00 00 00	 call	 _FixedAngle
  014eb	83 c4 04	 add	 esp, 4
  014ee	89 45 b4	 mov	 DWORD PTR _closestangle$[ebp], eax

; 8395 : 
; 8396 : 			// Create the hoop!
; 8397 : 			for (i = 0; i < 8; i++)

  014f1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  014f8	eb 09		 jmp	 SHORT $LN33@P_SpawnHoo
$LN31@P_SpawnHoo:
  014fa	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  014fd	83 c0 01	 add	 eax, 1
  01500	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN33@P_SpawnHoo:
  01503	83 7d f0 08	 cmp	 DWORD PTR _i$[ebp], 8
  01507	0f 8d 16 01 00
	00		 jge	 $LN32@P_SpawnHoo

; 8398 : 			{
; 8399 : 				fa = i*FINEANGLES/8;

  0150d	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  01510	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  01513	99		 cdq
  01514	83 e2 07	 and	 edx, 7
  01517	03 c2		 add	 eax, edx
  01519	c1 f8 03	 sar	 eax, 3
  0151c	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8400 : 				v[0] = FixedMul(FINECOSINE(fa),96*FRACUNIT);

  0151f	68 00 00 60 00	 push	 6291456			; 00600000H
  01524	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  01527	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  0152d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  01530	52		 push	 edx
  01531	e8 00 00 00 00	 call	 _FixedMul
  01536	83 c4 08	 add	 esp, 8
  01539	b9 04 00 00 00	 mov	 ecx, 4
  0153e	6b d1 00	 imul	 edx, ecx, 0
  01541	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8401 : 				v[1] = 0;

  01545	b8 04 00 00 00	 mov	 eax, 4
  0154a	c1 e0 00	 shl	 eax, 0
  0154d	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8402 : 				v[2] = FixedMul(FINESINE(fa),96*FRACUNIT);

  01555	68 00 00 60 00	 push	 6291456			; 00600000H
  0155a	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  0155d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  01564	51		 push	 ecx
  01565	e8 00 00 00 00	 call	 _FixedMul
  0156a	83 c4 08	 add	 esp, 8
  0156d	ba 04 00 00 00	 mov	 edx, 4
  01572	d1 e2		 shl	 edx, 1
  01574	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8403 : 				v[3] = FRACUNIT;

  01578	b8 04 00 00 00	 mov	 eax, 4
  0157d	6b c8 03	 imul	 ecx, eax, 3
  01580	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8404 : 
; 8405 : 				res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  01588	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  0158b	50		 push	 eax
  0158c	e8 00 00 00 00	 call	 _RotateZMatrix
  01591	83 c4 04	 add	 esp, 4
  01594	50		 push	 eax
  01595	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  01598	51		 push	 ecx
  01599	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  0159e	83 c4 08	 add	 esp, 8
  015a1	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8406 : 				M_Memcpy(&v, res, sizeof (v));

  015a4	6a 10		 push	 16			; 00000010H
  015a6	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  015a9	50		 push	 eax
  015aa	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  015ad	51		 push	 ecx
  015ae	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  015b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8407 : 
; 8408 : 				finalx = mthingx + v[0];

  015b7	b8 04 00 00 00	 mov	 eax, 4
  015bc	6b c8 00	 imul	 ecx, eax, 0
  015bf	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  015c2	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  015c6	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8409 : 				finaly = mthingy + v[1];

  015c9	b8 04 00 00 00	 mov	 eax, 4
  015ce	c1 e0 00	 shl	 eax, 0
  015d1	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  015d4	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  015d8	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8410 : 				finalz = mthingz + v[2];

  015db	b8 04 00 00 00	 mov	 eax, 4
  015e0	d1 e0		 shl	 eax, 1
  015e2	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  015e5	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  015e9	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8411 : #ifdef BLUE_SPHERES
; 8412 : 				// Spawn rings as blue spheres in special stages, ala S3+K.
; 8413 : 				if (G_IsSpecialStage(gamemap))
; 8414 : 					mobj = P_SpawnMobj(finalx, finaly, finalz, MT_BLUEBALL);
; 8415 : 				else
; 8416 : #endif
; 8417 : 					mobj = P_SpawnMobj(finalx, finaly, finalz, MT_RING);

  015ec	6a 2b		 push	 43			; 0000002bH
  015ee	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  015f1	50		 push	 eax
  015f2	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  015f5	51		 push	 ecx
  015f6	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  015f9	52		 push	 edx
  015fa	e8 00 00 00 00	 call	 _P_SpawnMobj
  015ff	83 c4 10	 add	 esp, 16			; 00000010H
  01602	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8418 : 
; 8419 : 				mobj->z -= mobj->height/2;

  01605	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01608	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0160b	99		 cdq
  0160c	2b c2		 sub	 eax, edx
  0160e	d1 f8		 sar	 eax, 1
  01610	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01613	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01616	2b d0		 sub	 edx, eax
  01618	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0161b	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8420 : 			}

  0161e	e9 d7 fe ff ff	 jmp	 $LN31@P_SpawnHoo
$LN32@P_SpawnHoo:

; 8421 : 
; 8422 : 			return;

  01623	e9 b7 05 00 00	 jmp	 $LN121@P_SpawnHoo

; 8423 : 		}

  01628	e9 b2 05 00 00	 jmp	 $LN121@P_SpawnHoo
$LN107@P_SpawnHoo:

; 8424 : 		else if (mthing->type == 605) // A BIGGER ring of rings (NiGHTS stuff)

  0162d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01630	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01634	81 f9 5d 02 00
	00		 cmp	 ecx, 605		; 0000025dH
  0163a	0f 85 bd 01 00
	00		 jne	 $LN111@P_SpawnHoo

; 8425 : 		{
; 8426 : 			mthingx = mthing->x << FRACBITS;

  01640	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01643	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01646	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01649	89 4d d4	 mov	 DWORD PTR _mthingx$[ebp], ecx

; 8427 : 			mthingy = mthing->y << FRACBITS;

  0164c	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0164f	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01653	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01656	89 4d d0	 mov	 DWORD PTR _mthingy$[ebp], ecx

; 8428 : 
; 8429 : 			if (mthing->options >> ZSHIFT)

  01659	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0165c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01660	c1 f9 04	 sar	 ecx, 4
  01663	85 c9		 test	 ecx, ecx
  01665	74 26		 je	 SHORT $LN113@P_SpawnHoo

; 8430 : 				mthingz = (R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS));

  01667	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  0166a	50		 push	 eax
  0166b	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  0166e	51		 push	 ecx
  0166f	e8 00 00 00 00	 call	 _R_PointInSubsector
  01674	83 c4 08	 add	 esp, 8
  01677	8b 10		 mov	 edx, DWORD PTR [eax]
  01679	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0167c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01680	c1 f9 04	 sar	 ecx, 4
  01683	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01686	03 0a		 add	 ecx, DWORD PTR [edx]
  01688	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
  0168b	eb 1e		 jmp	 SHORT $LN114@P_SpawnHoo
$LN113@P_SpawnHoo:

; 8431 : 			else
; 8432 : 				mthingz = R_PointInSubsector(mthingx, mthing->y << FRACBITS)->sector->floorheight;

  0168d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01690	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01694	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01697	51		 push	 ecx
  01698	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  0169b	52		 push	 edx
  0169c	e8 00 00 00 00	 call	 _R_PointInSubsector
  016a1	83 c4 08	 add	 esp, 8
  016a4	8b 00		 mov	 eax, DWORD PTR [eax]
  016a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  016a8	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
$LN114@P_SpawnHoo:

; 8433 : 
; 8434 : 			closestangle = FixedAngle(mthing->angle*FRACUNIT);

  016ab	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  016ae	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  016b2	c1 e1 10	 shl	 ecx, 16			; 00000010H
  016b5	51		 push	 ecx
  016b6	e8 00 00 00 00	 call	 _FixedAngle
  016bb	83 c4 04	 add	 esp, 4
  016be	89 45 b4	 mov	 DWORD PTR _closestangle$[ebp], eax

; 8435 : 
; 8436 : 			// Create the hoop!
; 8437 : 			for (i = 0; i < 16; i++)

  016c1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  016c8	eb 09		 jmp	 SHORT $LN36@P_SpawnHoo
$LN34@P_SpawnHoo:
  016ca	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  016cd	83 c0 01	 add	 eax, 1
  016d0	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN36@P_SpawnHoo:
  016d3	83 7d f0 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  016d7	0f 8d 16 01 00
	00		 jge	 $LN35@P_SpawnHoo

; 8438 : 			{
; 8439 : 				fa = i*FINEANGLES/16;

  016dd	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  016e0	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  016e3	99		 cdq
  016e4	83 e2 0f	 and	 edx, 15			; 0000000fH
  016e7	03 c2		 add	 eax, edx
  016e9	c1 f8 04	 sar	 eax, 4
  016ec	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8440 : 				v[0] = FixedMul(FINECOSINE(fa),192*FRACUNIT);

  016ef	68 00 00 c0 00	 push	 12582912		; 00c00000H
  016f4	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  016f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  016fd	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  01700	52		 push	 edx
  01701	e8 00 00 00 00	 call	 _FixedMul
  01706	83 c4 08	 add	 esp, 8
  01709	b9 04 00 00 00	 mov	 ecx, 4
  0170e	6b d1 00	 imul	 edx, ecx, 0
  01711	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8441 : 				v[1] = 0;

  01715	b8 04 00 00 00	 mov	 eax, 4
  0171a	c1 e0 00	 shl	 eax, 0
  0171d	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8442 : 				v[2] = FixedMul(FINESINE(fa),192*FRACUNIT);

  01725	68 00 00 c0 00	 push	 12582912		; 00c00000H
  0172a	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  0172d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  01734	51		 push	 ecx
  01735	e8 00 00 00 00	 call	 _FixedMul
  0173a	83 c4 08	 add	 esp, 8
  0173d	ba 04 00 00 00	 mov	 edx, 4
  01742	d1 e2		 shl	 edx, 1
  01744	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8443 : 				v[3] = FRACUNIT;

  01748	b8 04 00 00 00	 mov	 eax, 4
  0174d	6b c8 03	 imul	 ecx, eax, 3
  01750	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8444 : 
; 8445 : 				res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  01758	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  0175b	50		 push	 eax
  0175c	e8 00 00 00 00	 call	 _RotateZMatrix
  01761	83 c4 04	 add	 esp, 4
  01764	50		 push	 eax
  01765	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  01768	51		 push	 ecx
  01769	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  0176e	83 c4 08	 add	 esp, 8
  01771	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8446 : 				M_Memcpy(&v, res, sizeof (v));

  01774	6a 10		 push	 16			; 00000010H
  01776	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  01779	50		 push	 eax
  0177a	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  0177d	51		 push	 ecx
  0177e	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  01784	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8447 : 
; 8448 : 				finalx = mthingx + v[0];

  01787	b8 04 00 00 00	 mov	 eax, 4
  0178c	6b c8 00	 imul	 ecx, eax, 0
  0178f	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  01792	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  01796	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8449 : 				finaly = mthingy + v[1];

  01799	b8 04 00 00 00	 mov	 eax, 4
  0179e	c1 e0 00	 shl	 eax, 0
  017a1	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  017a4	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  017a8	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8450 : 				finalz = mthingz + v[2];

  017ab	b8 04 00 00 00	 mov	 eax, 4
  017b0	d1 e0		 shl	 eax, 1
  017b2	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  017b5	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  017b9	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8451 : #ifdef BLUE_SPHERES
; 8452 : 				// Spawn rings as blue spheres in special stages, ala S3+K.
; 8453 : 				if (G_IsSpecialStage(gamemap))
; 8454 : 					mobj = P_SpawnMobj(finalx, finaly, finalz, MT_BLUEBALL);
; 8455 : 				else
; 8456 : #endif
; 8457 : 					mobj = P_SpawnMobj(finalx, finaly, finalz, MT_RING);

  017bc	6a 2b		 push	 43			; 0000002bH
  017be	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  017c1	50		 push	 eax
  017c2	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  017c5	51		 push	 ecx
  017c6	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  017c9	52		 push	 edx
  017ca	e8 00 00 00 00	 call	 _P_SpawnMobj
  017cf	83 c4 10	 add	 esp, 16			; 00000010H
  017d2	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8458 : 
; 8459 : 				mobj->z -= mobj->height/2;

  017d5	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  017d8	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  017db	99		 cdq
  017dc	2b c2		 sub	 eax, edx
  017de	d1 f8		 sar	 eax, 1
  017e0	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  017e3	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  017e6	2b d0		 sub	 edx, eax
  017e8	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  017eb	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8460 : 			}

  017ee	e9 d7 fe ff ff	 jmp	 $LN34@P_SpawnHoo
$LN35@P_SpawnHoo:

; 8461 : 
; 8462 : 			return;

  017f3	e9 e7 03 00 00	 jmp	 $LN121@P_SpawnHoo

; 8463 : 		}

  017f8	e9 e2 03 00 00	 jmp	 $LN121@P_SpawnHoo
$LN111@P_SpawnHoo:

; 8464 : 		else if (mthing->type == 608) // A ring of rings and wings (alternating) (NiGHTS stuff)

  017fd	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01800	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01804	81 f9 60 02 00
	00		 cmp	 ecx, 608		; 00000260H
  0180a	0f 85 e3 01 00
	00		 jne	 $LN115@P_SpawnHoo

; 8465 : 		{
; 8466 : 			mthingx = mthing->x << FRACBITS;

  01810	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01813	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01816	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01819	89 4d d4	 mov	 DWORD PTR _mthingx$[ebp], ecx

; 8467 : 			mthingy = mthing->y << FRACBITS;

  0181c	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0181f	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01823	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01826	89 4d d0	 mov	 DWORD PTR _mthingy$[ebp], ecx

; 8468 : 
; 8469 : 			if (mthing->options >> ZSHIFT)

  01829	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0182c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01830	c1 f9 04	 sar	 ecx, 4
  01833	85 c9		 test	 ecx, ecx
  01835	74 26		 je	 SHORT $LN117@P_SpawnHoo

; 8470 : 				mthingz = (R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS));

  01837	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  0183a	50		 push	 eax
  0183b	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  0183e	51		 push	 ecx
  0183f	e8 00 00 00 00	 call	 _R_PointInSubsector
  01844	83 c4 08	 add	 esp, 8
  01847	8b 10		 mov	 edx, DWORD PTR [eax]
  01849	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0184c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01850	c1 f9 04	 sar	 ecx, 4
  01853	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01856	03 0a		 add	 ecx, DWORD PTR [edx]
  01858	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
  0185b	eb 1e		 jmp	 SHORT $LN118@P_SpawnHoo
$LN117@P_SpawnHoo:

; 8471 : 			else
; 8472 : 				mthingz = R_PointInSubsector(mthingx, mthing->y << FRACBITS)->sector->floorheight;

  0185d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01860	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01864	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01867	51		 push	 ecx
  01868	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  0186b	52		 push	 edx
  0186c	e8 00 00 00 00	 call	 _R_PointInSubsector
  01871	83 c4 08	 add	 esp, 8
  01874	8b 00		 mov	 eax, DWORD PTR [eax]
  01876	8b 08		 mov	 ecx, DWORD PTR [eax]
  01878	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
$LN118@P_SpawnHoo:

; 8473 : 
; 8474 : 			closestangle = FixedAngle(mthing->angle*FRACUNIT);

  0187b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0187e	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01882	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01885	51		 push	 ecx
  01886	e8 00 00 00 00	 call	 _FixedAngle
  0188b	83 c4 04	 add	 esp, 4
  0188e	89 45 b4	 mov	 DWORD PTR _closestangle$[ebp], eax

; 8475 : 
; 8476 : 			// Create the hoop!
; 8477 : 			for (i = 0; i < 8; i++)

  01891	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01898	eb 09		 jmp	 SHORT $LN39@P_SpawnHoo
$LN37@P_SpawnHoo:
  0189a	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0189d	83 c0 01	 add	 eax, 1
  018a0	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN39@P_SpawnHoo:
  018a3	83 7d f0 08	 cmp	 DWORD PTR _i$[ebp], 8
  018a7	0f 8d 3c 01 00
	00		 jge	 $LN38@P_SpawnHoo

; 8478 : 			{
; 8479 : 				fa = i*FINEANGLES/8;

  018ad	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  018b0	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  018b3	99		 cdq
  018b4	83 e2 07	 and	 edx, 7
  018b7	03 c2		 add	 eax, edx
  018b9	c1 f8 03	 sar	 eax, 3
  018bc	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8480 : 				v[0] = FixedMul(FINECOSINE(fa),96*FRACUNIT);

  018bf	68 00 00 60 00	 push	 6291456			; 00600000H
  018c4	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  018c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  018cd	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  018d0	52		 push	 edx
  018d1	e8 00 00 00 00	 call	 _FixedMul
  018d6	83 c4 08	 add	 esp, 8
  018d9	b9 04 00 00 00	 mov	 ecx, 4
  018de	6b d1 00	 imul	 edx, ecx, 0
  018e1	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8481 : 				v[1] = 0;

  018e5	b8 04 00 00 00	 mov	 eax, 4
  018ea	c1 e0 00	 shl	 eax, 0
  018ed	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8482 : 				v[2] = FixedMul(FINESINE(fa),96*FRACUNIT);

  018f5	68 00 00 60 00	 push	 6291456			; 00600000H
  018fa	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  018fd	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  01904	51		 push	 ecx
  01905	e8 00 00 00 00	 call	 _FixedMul
  0190a	83 c4 08	 add	 esp, 8
  0190d	ba 04 00 00 00	 mov	 edx, 4
  01912	d1 e2		 shl	 edx, 1
  01914	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8483 : 				v[3] = FRACUNIT;

  01918	b8 04 00 00 00	 mov	 eax, 4
  0191d	6b c8 03	 imul	 ecx, eax, 3
  01920	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8484 : 
; 8485 : 				res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  01928	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  0192b	50		 push	 eax
  0192c	e8 00 00 00 00	 call	 _RotateZMatrix
  01931	83 c4 04	 add	 esp, 4
  01934	50		 push	 eax
  01935	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  01938	51		 push	 ecx
  01939	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  0193e	83 c4 08	 add	 esp, 8
  01941	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8486 : 				M_Memcpy(&v, res, sizeof (v));

  01944	6a 10		 push	 16			; 00000010H
  01946	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  01949	50		 push	 eax
  0194a	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  0194d	51		 push	 ecx
  0194e	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  01954	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8487 : 
; 8488 : 				finalx = mthingx + v[0];

  01957	b8 04 00 00 00	 mov	 eax, 4
  0195c	6b c8 00	 imul	 ecx, eax, 0
  0195f	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  01962	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  01966	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8489 : 				finaly = mthingy + v[1];

  01969	b8 04 00 00 00	 mov	 eax, 4
  0196e	c1 e0 00	 shl	 eax, 0
  01971	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  01974	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  01978	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8490 : 				finalz = mthingz + v[2];

  0197b	b8 04 00 00 00	 mov	 eax, 4
  01980	d1 e0		 shl	 eax, 1
  01982	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  01985	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  01989	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8491 : 
; 8492 : 				if (i & 1)

  0198c	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0198f	83 e0 01	 and	 eax, 1
  01992	74 1b		 je	 SHORT $LN119@P_SpawnHoo

; 8493 : 				{
; 8494 : #ifdef BLUE_SPHERES
; 8495 : 					// Spawn rings as blue spheres in special stages, ala S3+K.
; 8496 : 					if (G_IsSpecialStage(gamemap))
; 8497 : 						mobj = P_SpawnMobj(finalx, finaly, finalz, MT_BLUEBALL);
; 8498 : 					else
; 8499 : #endif
; 8500 : 						mobj = P_SpawnMobj(finalx, finaly, finalz, MT_RING);

  01994	6a 2b		 push	 43			; 0000002bH
  01996	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  01999	50		 push	 eax
  0199a	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  0199d	51		 push	 ecx
  0199e	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  019a1	52		 push	 edx
  019a2	e8 00 00 00 00	 call	 _P_SpawnMobj
  019a7	83 c4 10	 add	 esp, 16			; 00000010H
  019aa	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8501 : 				}

  019ad	eb 1c		 jmp	 SHORT $LN120@P_SpawnHoo
$LN119@P_SpawnHoo:

; 8502 : 				else
; 8503 : 					mobj = P_SpawnMobj(finalx, finaly, finalz, MT_NIGHTSWING);

  019af	68 fc 00 00 00	 push	 252			; 000000fcH
  019b4	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  019b7	50		 push	 eax
  019b8	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  019bb	51		 push	 ecx
  019bc	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  019bf	52		 push	 edx
  019c0	e8 00 00 00 00	 call	 _P_SpawnMobj
  019c5	83 c4 10	 add	 esp, 16			; 00000010H
  019c8	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax
$LN120@P_SpawnHoo:

; 8504 : 
; 8505 : 				mobj->z -= mobj->height/2;

  019cb	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  019ce	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  019d1	99		 cdq
  019d2	2b c2		 sub	 eax, edx
  019d4	d1 f8		 sar	 eax, 1
  019d6	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  019d9	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  019dc	2b d0		 sub	 edx, eax
  019de	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  019e1	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8506 : 			}

  019e4	e9 b1 fe ff ff	 jmp	 $LN37@P_SpawnHoo
$LN38@P_SpawnHoo:

; 8507 : 
; 8508 : 			return;

  019e9	e9 f1 01 00 00	 jmp	 $LN121@P_SpawnHoo

; 8509 : 		}

  019ee	e9 ec 01 00 00	 jmp	 $LN121@P_SpawnHoo
$LN115@P_SpawnHoo:

; 8510 : 		else if (mthing->type == 609) // A BIGGER ring of rings and wings (alternating) (NiGHTS stuff)

  019f3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  019f6	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  019fa	81 f9 61 02 00
	00		 cmp	 ecx, 609		; 00000261H
  01a00	0f 85 d9 01 00
	00		 jne	 $LN121@P_SpawnHoo

; 8511 : 		{
; 8512 : 			mthingx = mthing->x << FRACBITS;

  01a06	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01a09	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01a0c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01a0f	89 4d d4	 mov	 DWORD PTR _mthingx$[ebp], ecx

; 8513 : 			mthingy = mthing->y << FRACBITS;

  01a12	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01a15	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01a19	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01a1c	89 4d d0	 mov	 DWORD PTR _mthingy$[ebp], ecx

; 8514 : 
; 8515 : 			if (mthing->options >> ZSHIFT)

  01a1f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01a22	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01a26	c1 f9 04	 sar	 ecx, 4
  01a29	85 c9		 test	 ecx, ecx
  01a2b	74 26		 je	 SHORT $LN122@P_SpawnHoo

; 8516 : 				mthingz = (R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS));

  01a2d	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  01a30	50		 push	 eax
  01a31	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  01a34	51		 push	 ecx
  01a35	e8 00 00 00 00	 call	 _R_PointInSubsector
  01a3a	83 c4 08	 add	 esp, 8
  01a3d	8b 10		 mov	 edx, DWORD PTR [eax]
  01a3f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01a42	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01a46	c1 f9 04	 sar	 ecx, 4
  01a49	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01a4c	03 0a		 add	 ecx, DWORD PTR [edx]
  01a4e	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
  01a51	eb 1e		 jmp	 SHORT $LN123@P_SpawnHoo
$LN122@P_SpawnHoo:

; 8517 : 			else
; 8518 : 				mthingz = R_PointInSubsector(mthingx, mthing->y << FRACBITS)->sector->floorheight;

  01a53	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01a56	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01a5a	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01a5d	51		 push	 ecx
  01a5e	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  01a61	52		 push	 edx
  01a62	e8 00 00 00 00	 call	 _R_PointInSubsector
  01a67	83 c4 08	 add	 esp, 8
  01a6a	8b 00		 mov	 eax, DWORD PTR [eax]
  01a6c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a6e	89 4d cc	 mov	 DWORD PTR _mthingz$[ebp], ecx
$LN123@P_SpawnHoo:

; 8519 : 
; 8520 : 			closestangle = FixedAngle(mthing->angle*FRACUNIT);

  01a71	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01a74	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01a78	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01a7b	51		 push	 ecx
  01a7c	e8 00 00 00 00	 call	 _FixedAngle
  01a81	83 c4 04	 add	 esp, 4
  01a84	89 45 b4	 mov	 DWORD PTR _closestangle$[ebp], eax

; 8521 : 
; 8522 : 			// Create the hoop!
; 8523 : 			for (i = 0; i < 16; i++)

  01a87	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01a8e	eb 09		 jmp	 SHORT $LN42@P_SpawnHoo
$LN40@P_SpawnHoo:
  01a90	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  01a93	83 c0 01	 add	 eax, 1
  01a96	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN42@P_SpawnHoo:
  01a99	83 7d f0 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  01a9d	0f 8d 3c 01 00
	00		 jge	 $LN41@P_SpawnHoo

; 8524 : 			{
; 8525 : 				fa = i*FINEANGLES/16;

  01aa3	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  01aa6	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  01aa9	99		 cdq
  01aaa	83 e2 0f	 and	 edx, 15			; 0000000fH
  01aad	03 c2		 add	 eax, edx
  01aaf	c1 f8 04	 sar	 eax, 4
  01ab2	89 45 b0	 mov	 DWORD PTR _fa$[ebp], eax

; 8526 : 				v[0] = FixedMul(FINECOSINE(fa),192*FRACUNIT);

  01ab5	68 00 00 c0 00	 push	 12582912		; 00c00000H
  01aba	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  01abd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  01ac3	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  01ac6	52		 push	 edx
  01ac7	e8 00 00 00 00	 call	 _FixedMul
  01acc	83 c4 08	 add	 esp, 8
  01acf	b9 04 00 00 00	 mov	 ecx, 4
  01ad4	6b d1 00	 imul	 edx, ecx, 0
  01ad7	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8527 : 				v[1] = 0;

  01adb	b8 04 00 00 00	 mov	 eax, 4
  01ae0	c1 e0 00	 shl	 eax, 0
  01ae3	c7 44 05 bc 00
	00 00 00	 mov	 DWORD PTR _v$[ebp+eax], 0

; 8528 : 				v[2] = FixedMul(FINESINE(fa),192*FRACUNIT);

  01aeb	68 00 00 c0 00	 push	 12582912		; 00c00000H
  01af0	8b 45 b0	 mov	 eax, DWORD PTR _fa$[ebp]
  01af3	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  01afa	51		 push	 ecx
  01afb	e8 00 00 00 00	 call	 _FixedMul
  01b00	83 c4 08	 add	 esp, 8
  01b03	ba 04 00 00 00	 mov	 edx, 4
  01b08	d1 e2		 shl	 edx, 1
  01b0a	89 44 15 bc	 mov	 DWORD PTR _v$[ebp+edx], eax

; 8529 : 				v[3] = FRACUNIT;

  01b0e	b8 04 00 00 00	 mov	 eax, 4
  01b13	6b c8 03	 imul	 ecx, eax, 3
  01b16	c7 44 0d bc 00
	00 01 00	 mov	 DWORD PTR _v$[ebp+ecx], 65536 ; 00010000H

; 8530 : 
; 8531 : 				res = VectorMatrixMultiply(v, *RotateZMatrix(closestangle));

  01b1e	8b 45 b4	 mov	 eax, DWORD PTR _closestangle$[ebp]
  01b21	50		 push	 eax
  01b22	e8 00 00 00 00	 call	 _RotateZMatrix
  01b27	83 c4 04	 add	 esp, 4
  01b2a	50		 push	 eax
  01b2b	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  01b2e	51		 push	 ecx
  01b2f	e8 00 00 00 00	 call	 _VectorMatrixMultiply
  01b34	83 c4 08	 add	 esp, 8
  01b37	89 45 b8	 mov	 DWORD PTR _res$[ebp], eax

; 8532 : 				M_Memcpy(&v, res, sizeof (v));

  01b3a	6a 10		 push	 16			; 00000010H
  01b3c	8b 45 b8	 mov	 eax, DWORD PTR _res$[ebp]
  01b3f	50		 push	 eax
  01b40	8d 4d bc	 lea	 ecx, DWORD PTR _v$[ebp]
  01b43	51		 push	 ecx
  01b44	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  01b4a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8533 : 
; 8534 : 				finalx = mthingx + v[0];

  01b4d	b8 04 00 00 00	 mov	 eax, 4
  01b52	6b c8 00	 imul	 ecx, eax, 0
  01b55	8b 55 d4	 mov	 edx, DWORD PTR _mthingx$[ebp]
  01b58	03 54 0d bc	 add	 edx, DWORD PTR _v$[ebp+ecx]
  01b5c	89 55 e0	 mov	 DWORD PTR _finalx$[ebp], edx

; 8535 : 				finaly = mthingy + v[1];

  01b5f	b8 04 00 00 00	 mov	 eax, 4
  01b64	c1 e0 00	 shl	 eax, 0
  01b67	8b 4d d0	 mov	 ecx, DWORD PTR _mthingy$[ebp]
  01b6a	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  01b6e	89 4d dc	 mov	 DWORD PTR _finaly$[ebp], ecx

; 8536 : 				finalz = mthingz + v[2];

  01b71	b8 04 00 00 00	 mov	 eax, 4
  01b76	d1 e0		 shl	 eax, 1
  01b78	8b 4d cc	 mov	 ecx, DWORD PTR _mthingz$[ebp]
  01b7b	03 4c 05 bc	 add	 ecx, DWORD PTR _v$[ebp+eax]
  01b7f	89 4d d8	 mov	 DWORD PTR _finalz$[ebp], ecx

; 8537 : 
; 8538 : 				if (i & 1)

  01b82	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  01b85	83 e0 01	 and	 eax, 1
  01b88	74 1b		 je	 SHORT $LN124@P_SpawnHoo

; 8539 : 				{
; 8540 : #ifdef BLUE_SPHERES
; 8541 : 					// Spawn rings as blue spheres in special stages, ala S3+K.
; 8542 : 					if (G_IsSpecialStage(gamemap))
; 8543 : 						mobj = P_SpawnMobj(finalx, finaly, finalz, MT_BLUEBALL);
; 8544 : 					else
; 8545 : #endif
; 8546 : 						mobj = P_SpawnMobj(finalx, finaly, finalz, MT_RING);

  01b8a	6a 2b		 push	 43			; 0000002bH
  01b8c	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  01b8f	50		 push	 eax
  01b90	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  01b93	51		 push	 ecx
  01b94	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  01b97	52		 push	 edx
  01b98	e8 00 00 00 00	 call	 _P_SpawnMobj
  01b9d	83 c4 10	 add	 esp, 16			; 00000010H
  01ba0	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 8547 : 				}

  01ba3	eb 1c		 jmp	 SHORT $LN125@P_SpawnHoo
$LN124@P_SpawnHoo:

; 8548 : 				else
; 8549 : 					mobj = P_SpawnMobj(finalx, finaly, finalz, MT_NIGHTSWING);

  01ba5	68 fc 00 00 00	 push	 252			; 000000fcH
  01baa	8b 45 d8	 mov	 eax, DWORD PTR _finalz$[ebp]
  01bad	50		 push	 eax
  01bae	8b 4d dc	 mov	 ecx, DWORD PTR _finaly$[ebp]
  01bb1	51		 push	 ecx
  01bb2	8b 55 e0	 mov	 edx, DWORD PTR _finalx$[ebp]
  01bb5	52		 push	 edx
  01bb6	e8 00 00 00 00	 call	 _P_SpawnMobj
  01bbb	83 c4 10	 add	 esp, 16			; 00000010H
  01bbe	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax
$LN125@P_SpawnHoo:

; 8550 : 				mobj->z -= mobj->height/2;

  01bc1	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01bc4	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  01bc7	99		 cdq
  01bc8	2b c2		 sub	 eax, edx
  01bca	d1 f8		 sar	 eax, 1
  01bcc	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01bcf	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01bd2	2b d0		 sub	 edx, eax
  01bd4	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01bd7	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 8551 : 			}

  01bda	e9 b1 fe ff ff	 jmp	 $LN40@P_SpawnHoo
$LN41@P_SpawnHoo:
$LN121@P_SpawnHoo:

; 8552 : 
; 8553 : 			return;
; 8554 : 		}
; 8555 : 	}
; 8556 : }

  01bdf	5f		 pop	 edi
  01be0	5e		 pop	 esi
  01be1	5b		 pop	 ebx
  01be2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01be5	33 cd		 xor	 ecx, ebp
  01be7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01bec	8b e5		 mov	 esp, ebp
  01bee	5d		 pop	 ebp
  01bef	c3		 ret	 0
_P_SpawnHoopsAndRings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnStarpostPlayer
_TEXT	SEGMENT
_starposttime$ = -24					; size = 4
_angle$ = -20						; size = 4
_z$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_p$ = -4						; size = 4
_mobj$ = 8						; size = 4
_playernum$ = 12					; size = 4
_P_SpawnStarpostPlayer PROC				; COMDAT

; 7146 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7147 : 	player_t *p;
; 7148 : 	fixed_t x, y, z;
; 7149 : 	angle_t angle;
; 7150 : 	INT32 starposttime;
; 7151 : 
; 7152 : 	// not playing?
; 7153 : 	if (!playeringame[playernum])

  00009	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0000c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00014	75 05		 jne	 SHORT $LN2@P_SpawnSta

; 7154 : 		return;

  00016	e9 88 02 00 00	 jmp	 $LN1@P_SpawnSta
$LN2@P_SpawnSta:

; 7155 : 
; 7156 : 	I_Assert(playernum >= 0 && playernum < MAXPLAYERS);
; 7157 : 
; 7158 : 	p = &players[playernum];

  0001b	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00022	05 00 00 00 00	 add	 eax, OFFSET _players
  00027	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 7159 : 
; 7160 : 	x = p->starpostx << FRACBITS;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0002d	8b 88 80 01 00
	00		 mov	 ecx, DWORD PTR [eax+384]
  00033	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00036	89 4d f8	 mov	 DWORD PTR _x$[ebp], ecx

; 7161 : 	y = p->starposty << FRACBITS;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0003c	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  00042	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00045	89 4d f4	 mov	 DWORD PTR _y$[ebp], ecx

; 7162 : 	z = p->starpostz << FRACBITS;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0004b	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00051	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00054	89 4d f0	 mov	 DWORD PTR _z$[ebp], ecx

; 7163 : 	angle = p->starpostangle;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0005a	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  00060	89 4d ec	 mov	 DWORD PTR _angle$[ebp], ecx

; 7164 : 	starposttime = p->starposttime;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00066	8b 88 90 01 00
	00		 mov	 ecx, DWORD PTR [eax+400]
  0006c	89 4d e8	 mov	 DWORD PTR _starposttime$[ebp], ecx

; 7165 : 
; 7166 : 	if (p->playerstate == PST_REBORN)

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00072	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00076	75 0c		 jne	 SHORT $LN3@P_SpawnSta

; 7167 : 		G_PlayerReborn(playernum);

  00078	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _G_PlayerReborn
  00081	83 c4 04	 add	 esp, 4
$LN3@P_SpawnSta:

; 7168 : 
; 7169 : 	mobj = P_SpawnMobj(x, y, z, MT_PLAYER);

  00084	6a 00		 push	 0
  00086	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d f4	 mov	 ecx, DWORD PTR _y$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 _P_SpawnMobj
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	89 45 08	 mov	 DWORD PTR _mobj$[ebp], eax

; 7170 : 
; 7171 : 	// set color translations for player sprites
; 7172 : 	mobj->flags |= MF_TRANSLATION;

  0009d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000a0	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000a3	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  000a9	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000ac	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 7173 : 	mobj->color = (UINT8)p->skincolor;

  000af	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  000b5	8a 91 b4 00 00
	00		 mov	 dl, BYTE PTR [ecx+180]
  000bb	88 50 68	 mov	 BYTE PTR [eax+104], dl

; 7174 : 
; 7175 : 	// set 'spritedef' override in mobjy for player skins.. (see ProjectSprite)
; 7176 : 	// (usefulness : when body mobjy is detached from player (who respawns),
; 7177 : 	// the dead body mobj retains the skin through the 'spritedef' override).
; 7178 : 	if (atoi(skins[p->skin].highres))

  000be	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  000c1	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  000cb	81 c1 84 00 00
	00		 add	 ecx, OFFSET _skins+132
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 _atoi
  000d7	83 c4 04	 add	 esp, 4
  000da	85 c0		 test	 eax, eax
  000dc	74 14		 je	 SHORT $LN4@P_SpawnSta

; 7179 : 		mobj->flags |= MF_HIRES;

  000de	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000e4	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  000ea	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  000ed	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
  000f0	eb 12		 jmp	 SHORT $LN5@P_SpawnSta
$LN4@P_SpawnSta:

; 7180 : 	else
; 7181 : 		mobj->flags &= ~MF_HIRES;

  000f2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000f8	81 e1 ff ff f7
	ff		 and	 ecx, -524289		; fff7ffffH
  000fe	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00101	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN5@P_SpawnSta:

; 7182 : 	mobj->skin = &skins[p->skin];

  00104	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00107	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  00111	81 c1 00 00 00
	00		 add	 ecx, OFFSET _skins
  00117	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0011a	89 4a 64	 mov	 DWORD PTR [edx+100], ecx

; 7183 : 
; 7184 : 	mobj->angle = angle;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00120	8b 4d ec	 mov	 ecx, DWORD PTR _angle$[ebp]
  00123	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 7185 : 	if (playernum == consoleplayer)

  00126	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00129	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0012f	75 0e		 jne	 SHORT $LN6@P_SpawnSta

; 7186 : 		localangle = mobj->angle;

  00131	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00134	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00137	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle, ecx
  0013d	eb 20		 jmp	 SHORT $LN8@P_SpawnSta
$LN6@P_SpawnSta:

; 7187 : 	else if (splitscreen && playernum == secondarydisplayplayer)

  0013f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00146	74 17		 je	 SHORT $LN8@P_SpawnSta
  00148	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0014b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  00151	75 0c		 jne	 SHORT $LN8@P_SpawnSta

; 7188 : 		localangle2 = mobj->angle;

  00153	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00156	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00159	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle2, ecx
$LN8@P_SpawnSta:

; 7189 : 
; 7190 : 	mobj->player = p;

  0015f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00162	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00165	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 7191 : 	mobj->health = p->health;

  0016b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0016e	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00171	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00174	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 7192 : 
; 7193 : 	p->mo = mobj;

  0017a	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00180	89 08		 mov	 DWORD PTR [eax], ecx

; 7194 : 	p->playerstate = PST_LIVE;

  00182	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00185	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 7195 : 	p->bonuscount = 0;

  0018c	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0018f	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 7196 : 	p->viewheight = cv_viewheight.value<<FRACBITS;

  00199	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_viewheight+20
  0019e	c1 e0 10	 shl	 eax, 16			; 00000010H
  001a1	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  001a4	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 7197 : 
; 7198 : 	if (p->mo->eflags & MFE_VERTICALFLIP)

  001a7	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  001aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ac	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  001b2	83 e2 20	 and	 edx, 32			; 00000020H
  001b5	74 1e		 je	 SHORT $LN9@P_SpawnSta

; 7199 : 		p->viewz = p->mo->z + p->mo->height - p->viewheight;

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  001ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bc	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  001bf	8b 02		 mov	 eax, DWORD PTR [edx]
  001c1	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  001c4	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  001c7	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  001ca	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  001cd	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  001d0	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  001d3	eb 14		 jmp	 SHORT $LN10@P_SpawnSta
$LN9@P_SpawnSta:

; 7200 : 	else
; 7201 : 		p->viewz = p->mo->z + p->viewheight;

  001d5	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  001d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001da	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  001dd	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  001e0	03 50 14	 add	 edx, DWORD PTR [eax+20]
  001e3	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  001e6	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$LN10@P_SpawnSta:

; 7202 : 
; 7203 : 	if (playernum == consoleplayer)

  001e9	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  001ec	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  001f2	75 0c		 jne	 SHORT $LN11@P_SpawnSta

; 7204 : 	{
; 7205 : 		// wake up the status bar
; 7206 : 		ST_Start();

  001f4	e8 00 00 00 00	 call	 _ST_Start
  001f9	90		 npad	 1

; 7207 : 		// wake up the heads up text
; 7208 : 		HU_Start();

  001fa	e8 00 00 00 00	 call	 _HU_Start
  001ff	90		 npad	 1
$LN11@P_SpawnSta:

; 7209 : 	}
; 7210 : 
; 7211 : 	SV_SpawnPlayer(playernum, mobj->x, mobj->y, mobj->angle);

  00200	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00203	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00206	51		 push	 ecx
  00207	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0020a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0020d	50		 push	 eax
  0020e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00211	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00214	52		 push	 edx
  00215	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 _SV_SpawnPlayer
  0021e	83 c4 10	 add	 esp, 16			; 00000010H

; 7212 : 
; 7213 : 	if (cv_chasecam.value)

  00221	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00228	74 1b		 je	 SHORT $LN13@P_SpawnSta

; 7214 : 	{
; 7215 : 		if (displayplayer == playernum)

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  0022f	3b 45 0c	 cmp	 eax, DWORD PTR _playernum$[ebp]
  00232	75 11		 jne	 SHORT $LN13@P_SpawnSta

; 7216 : 			P_ResetCamera(p, &camera);

  00234	68 00 00 00 00	 push	 OFFSET _camera
  00239	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 _P_ResetCamera
  00242	83 c4 08	 add	 esp, 8
$LN13@P_SpawnSta:

; 7217 : 	}
; 7218 : 	if (cv_chasecam2.value && splitscreen)

  00245	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  0024c	74 24		 je	 SHORT $LN15@P_SpawnSta
  0024e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00255	74 1b		 je	 SHORT $LN15@P_SpawnSta

; 7219 : 	{
; 7220 : 		if (secondarydisplayplayer == playernum)

  00257	a1 00 00 00 00	 mov	 eax, DWORD PTR _secondarydisplayplayer
  0025c	3b 45 0c	 cmp	 eax, DWORD PTR _playernum$[ebp]
  0025f	75 11		 jne	 SHORT $LN15@P_SpawnSta

; 7221 : 			P_ResetCamera(p, &camera2);

  00261	68 00 00 00 00	 push	 OFFSET _camera2
  00266	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 _P_ResetCamera
  0026f	83 c4 08	 add	 esp, 8
$LN15@P_SpawnSta:

; 7222 : 	}
; 7223 : 
; 7224 : 	if (!(netgame || multiplayer))

  00272	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00279	75 11		 jne	 SHORT $LN16@P_SpawnSta
  0027b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00282	75 08		 jne	 SHORT $LN16@P_SpawnSta

; 7225 : 		leveltime = starposttime;

  00284	8b 45 e8	 mov	 eax, DWORD PTR _starposttime$[ebp]
  00287	a3 00 00 00 00	 mov	 DWORD PTR _leveltime, eax
$LN16@P_SpawnSta:

; 7226 : 
; 7227 : 	P_SetScale(mobj, mobj->destscale);

  0028c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0028f	0f b7 88 ce 00
	00 00		 movzx	 ecx, WORD PTR [eax+206]
  00296	51		 push	 ecx
  00297	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0029a	52		 push	 edx
  0029b	e8 00 00 00 00	 call	 _P_SetScale
  002a0	83 c4 08	 add	 esp, 8
$LN1@P_SpawnSta:

; 7228 : }

  002a3	5f		 pop	 edi
  002a4	5e		 pop	 esi
  002a5	5b		 pop	 ebx
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c3		 ret	 0
_P_SpawnStarpostPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnPlayer
_TEXT	SEGMENT
_mobj$ = -20						; size = 4
_z$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_p$ = -4						; size = 4
_mthing$ = 8						; size = 4
_playernum$ = 12					; size = 4
_P_SpawnPlayer PROC					; COMDAT

; 7045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7046 : 	player_t *p;
; 7047 : 	fixed_t x, y, z;
; 7048 : 	mobj_t *mobj;
; 7049 : 
; 7050 : 	// not playing?
; 7051 : 	if (!playeringame[playernum])

  00009	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0000c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00014	75 05		 jne	 SHORT $LN2@P_SpawnPla

; 7052 : 		return;

  00016	e9 57 03 00 00	 jmp	 $LN1@P_SpawnPla
$LN2@P_SpawnPla:

; 7053 : 
; 7054 : 	I_Assert(playernum >= 0 && playernum < MAXPLAYERS);
; 7055 : 
; 7056 : 	p = &players[playernum];

  0001b	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00022	05 00 00 00 00	 add	 eax, OFFSET _players
  00027	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 7057 : 
; 7058 : 	if (p->playerstate == PST_REBORN)

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0002d	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00031	75 0c		 jne	 SHORT $LN3@P_SpawnPla

; 7059 : 		G_PlayerReborn(playernum);

  00033	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _G_PlayerReborn
  0003c	83 c4 04	 add	 esp, 4
$LN3@P_SpawnPla:

; 7060 : 
; 7061 : 	// spawn as spectator determination
; 7062 : 	if (gametype == GT_RACE || gametype == GT_COOP)

  0003f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00046	83 f8 02	 cmp	 eax, 2
  00049	74 0b		 je	 SHORT $LN6@P_SpawnPla
  0004b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00052	85 c0		 test	 eax, eax
  00054	75 0c		 jne	 SHORT $LN4@P_SpawnPla
$LN6@P_SpawnPla:

; 7063 : 		p->spectator = false;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00059	c6 80 f0 01 00
	00 00		 mov	 BYTE PTR [eax+496], 0
  00060	eb 43		 jmp	 SHORT $LN7@P_SpawnPla
$LN4@P_SpawnPla:

; 7064 : 	else if ((netgame && (p->jointime < 1 && (gametype == GT_TAG || gametype == GT_MATCH || gametype == GT_CTF))))

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00069	74 3a		 je	 SHORT $LN7@P_SpawnPla
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0006e	83 b8 f4 01 00
	00 01		 cmp	 DWORD PTR [eax+500], 1
  00075	73 2e		 jae	 SHORT $LN7@P_SpawnPla
  00077	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007e	83 f8 03	 cmp	 eax, 3
  00081	74 18		 je	 SHORT $LN8@P_SpawnPla
  00083	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0008a	83 f8 01	 cmp	 eax, 1
  0008d	74 0c		 je	 SHORT $LN8@P_SpawnPla
  0008f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00096	83 f8 04	 cmp	 eax, 4
  00099	75 0a		 jne	 SHORT $LN7@P_SpawnPla
$LN8@P_SpawnPla:

; 7065 : 		p->spectator = true;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0009e	c6 80 f0 01 00
	00 01		 mov	 BYTE PTR [eax+496], 1
$LN7@P_SpawnPla:

; 7066 : 
; 7067 : 	x = mthing->x << FRACBITS;

  000a5	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  000a8	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000ab	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000ae	89 4d f8	 mov	 DWORD PTR _x$[ebp], ecx

; 7068 : 	y = mthing->y << FRACBITS;

  000b1	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  000b4	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000b8	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000bb	89 4d f4	 mov	 DWORD PTR _y$[ebp], ecx

; 7069 : 
; 7070 : 	// Flagging a player's ambush will make them start on the ceiling
; 7071 : 	if (mthing->options & MTF_AMBUSH)

  000be	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  000c1	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  000c5	83 e1 08	 and	 ecx, 8
  000c8	74 09		 je	 SHORT $LN9@P_SpawnPla

; 7072 : 		z = ONCEILINGZ;

  000ca	c7 45 f0 ff ff
	ff 7f		 mov	 DWORD PTR _z$[ebp], 2147483647 ; 7fffffffH
  000d1	eb 41		 jmp	 SHORT $LN12@P_SpawnPla
$LN9@P_SpawnPla:

; 7073 : 	else if (mthing->options >> (ZSHIFT+1))

  000d3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  000d6	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  000da	c1 f9 05	 sar	 ecx, 5
  000dd	85 c9		 test	 ecx, ecx
  000df	74 26		 je	 SHORT $LN11@P_SpawnPla

; 7074 : 		z = R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> (ZSHIFT+1)) << FRACBITS);

  000e1	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _R_PointInSubsector
  000ee	83 c4 08	 add	 esp, 8
  000f1	8b 10		 mov	 edx, DWORD PTR [eax]
  000f3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  000f6	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  000fa	c1 f9 05	 sar	 ecx, 5
  000fd	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00100	03 0a		 add	 ecx, DWORD PTR [edx]
  00102	89 4d f0	 mov	 DWORD PTR _z$[ebp], ecx
  00105	eb 0d		 jmp	 SHORT $LN12@P_SpawnPla
$LN11@P_SpawnPla:

; 7075 : 	else
; 7076 : 		z = mthing->z << FRACBITS;

  00107	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0010a	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  0010e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00111	89 4d f0	 mov	 DWORD PTR _z$[ebp], ecx
$LN12@P_SpawnPla:

; 7077 : 
; 7078 : 	mthing->z = (INT16)(z>>FRACBITS);

  00114	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00117	c1 f8 10	 sar	 eax, 16			; 00000010H
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  0011d	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 7079 : 	mobj = P_SpawnMobj(x, y, z, MT_PLAYER);

  00121	6a 00		 push	 0
  00123	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00126	50		 push	 eax
  00127	8b 4d f4	 mov	 ecx, DWORD PTR _y$[ebp]
  0012a	51		 push	 ecx
  0012b	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  0012e	52		 push	 edx
  0012f	e8 00 00 00 00	 call	 _P_SpawnMobj
  00134	83 c4 10	 add	 esp, 16			; 00000010H
  00137	89 45 ec	 mov	 DWORD PTR _mobj$[ebp], eax

; 7080 : 	mthing->mobj = mobj;

  0013a	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0013d	8b 4d ec	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00140	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 7081 : 
; 7082 : 	// set color translations for player sprites
; 7083 : 	mobj->flags |= MF_TRANSLATION;

  00143	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  00146	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00149	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  0014f	8b 55 ec	 mov	 edx, DWORD PTR _mobj$[ebp]
  00152	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 7084 : 	mobj->color = (UINT8)p->skincolor;

  00155	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  00158	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0015b	8a 91 b4 00 00
	00		 mov	 dl, BYTE PTR [ecx+180]
  00161	88 50 68	 mov	 BYTE PTR [eax+104], dl

; 7085 : 
; 7086 : 	// set 'spritedef' override in mobj for player skins.. (see ProjectSprite)
; 7087 : 	// (usefulness: when body mobj is detached from player (who respawns),
; 7088 : 	// the dead body mobj retains the skin through the 'spritedef' override).
; 7089 : 	if (atoi(skins[p->skin].highres))

  00164	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00167	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  00171	81 c1 84 00 00
	00		 add	 ecx, OFFSET _skins+132
  00177	51		 push	 ecx
  00178	e8 00 00 00 00	 call	 _atoi
  0017d	83 c4 04	 add	 esp, 4
  00180	85 c0		 test	 eax, eax
  00182	74 14		 je	 SHORT $LN13@P_SpawnPla

; 7090 : 		mobj->flags |= MF_HIRES;

  00184	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  00187	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0018a	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  00190	8b 55 ec	 mov	 edx, DWORD PTR _mobj$[ebp]
  00193	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
  00196	eb 12		 jmp	 SHORT $LN14@P_SpawnPla
$LN13@P_SpawnPla:

; 7091 : 	else
; 7092 : 		mobj->flags &= ~MF_HIRES;

  00198	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  0019b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0019e	81 e1 ff ff f7
	ff		 and	 ecx, -524289		; fff7ffffH
  001a4	8b 55 ec	 mov	 edx, DWORD PTR _mobj$[ebp]
  001a7	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN14@P_SpawnPla:

; 7093 : 	mobj->skin = &skins[p->skin];

  001aa	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  001ad	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  001b7	81 c1 00 00 00
	00		 add	 ecx, OFFSET _skins
  001bd	8b 55 ec	 mov	 edx, DWORD PTR _mobj$[ebp]
  001c0	89 4a 64	 mov	 DWORD PTR [edx+100], ecx

; 7094 : 
; 7095 : 	mobj->angle = FixedAngle(mthing->angle*FRACUNIT);

  001c3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  001c6	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  001ca	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 _FixedAngle
  001d3	83 c4 04	 add	 esp, 4
  001d6	8b 55 ec	 mov	 edx, DWORD PTR _mobj$[ebp]
  001d9	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 7096 : 	if (playernum == consoleplayer)

  001dc	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  001df	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  001e5	75 0e		 jne	 SHORT $LN15@P_SpawnPla

; 7097 : 		localangle = mobj->angle;

  001e7	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  001ea	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001ed	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle, ecx
  001f3	eb 20		 jmp	 SHORT $LN17@P_SpawnPla
$LN15@P_SpawnPla:

; 7098 : 	else if (splitscreen && playernum == secondarydisplayplayer)

  001f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  001fc	74 17		 je	 SHORT $LN17@P_SpawnPla
  001fe	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00201	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  00207	75 0c		 jne	 SHORT $LN17@P_SpawnPla

; 7099 : 		localangle2 = mobj->angle;

  00209	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  0020c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0020f	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle2, ecx
$LN17@P_SpawnPla:

; 7100 : 	mobj->player = p;

  00215	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  00218	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0021b	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 7101 : 	mobj->health = p->health;

  00221	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  00224	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00227	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0022a	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 7102 : 
; 7103 : 	p->mo = mobj;

  00230	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00233	8b 4d ec	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00236	89 08		 mov	 DWORD PTR [eax], ecx

; 7104 : 	p->playerstate = PST_LIVE;

  00238	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0023b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 7105 : 	p->bonuscount = 0;

  00242	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00245	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 7106 : 	p->viewheight = cv_viewheight.value<<FRACBITS;

  0024f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_viewheight+20
  00254	c1 e0 10	 shl	 eax, 16			; 00000010H
  00257	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0025a	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 7107 : 
; 7108 : 	if (p->mo->eflags & MFE_VERTICALFLIP)

  0025d	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00260	8b 08		 mov	 ecx, DWORD PTR [eax]
  00262	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00268	83 e2 20	 and	 edx, 32			; 00000020H
  0026b	74 1e		 je	 SHORT $LN18@P_SpawnPla

; 7109 : 		p->viewz = p->mo->z + p->mo->height - p->viewheight;

  0026d	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00270	8b 08		 mov	 ecx, DWORD PTR [eax]
  00272	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00275	8b 02		 mov	 eax, DWORD PTR [edx]
  00277	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0027a	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  0027d	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00280	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  00283	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00286	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00289	eb 14		 jmp	 SHORT $LN19@P_SpawnPla
$LN18@P_SpawnPla:

; 7110 : 	else
; 7111 : 		p->viewz = p->mo->z + p->viewheight;

  0028b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0028e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00290	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00293	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00296	03 50 14	 add	 edx, DWORD PTR [eax+20]
  00299	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0029c	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$LN19@P_SpawnPla:

; 7112 : 
; 7113 : 	p->bonustime = 0;

  0029f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  002a2	c6 80 cd 01 00
	00 00		 mov	 BYTE PTR [eax+461], 0

; 7114 : 	p->realtime = leveltime;

  002a9	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  002ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  002b2	89 88 54 01 00
	00		 mov	 DWORD PTR [eax+340], ecx

; 7115 : 
; 7116 : 	//awayview stuff
; 7117 : 	p->awayviewmobj = NULL;

  002b8	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  002bb	c7 80 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+488], 0

; 7118 : 	p->awayviewtics = 0;

  002c5	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  002c8	c7 80 ec 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+492], 0

; 7119 : 
; 7120 : 	if (playernum == consoleplayer)

  002d2	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  002d5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  002db	75 0c		 jne	 SHORT $LN20@P_SpawnPla

; 7121 : 	{
; 7122 : 		// wake up the status bar
; 7123 : 		ST_Start();

  002dd	e8 00 00 00 00	 call	 _ST_Start
  002e2	90		 npad	 1

; 7124 : 		// wake up the heads up text
; 7125 : 		HU_Start();

  002e3	e8 00 00 00 00	 call	 _HU_Start
  002e8	90		 npad	 1
$LN20@P_SpawnPla:

; 7126 : 	}
; 7127 : 
; 7128 : 	SV_SpawnPlayer(playernum, mobj->x, mobj->y, mobj->angle);

  002e9	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  002ec	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002ef	51		 push	 ecx
  002f0	8b 55 ec	 mov	 edx, DWORD PTR _mobj$[ebp]
  002f3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002f6	50		 push	 eax
  002f7	8b 4d ec	 mov	 ecx, DWORD PTR _mobj$[ebp]
  002fa	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002fd	52		 push	 edx
  002fe	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00301	50		 push	 eax
  00302	e8 00 00 00 00	 call	 _SV_SpawnPlayer
  00307	83 c4 10	 add	 esp, 16			; 00000010H

; 7129 : 
; 7130 : 	if (cv_chasecam.value)

  0030a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00311	74 1b		 je	 SHORT $LN22@P_SpawnPla

; 7131 : 	{
; 7132 : 		if (displayplayer == playernum)

  00313	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  00318	3b 45 0c	 cmp	 eax, DWORD PTR _playernum$[ebp]
  0031b	75 11		 jne	 SHORT $LN22@P_SpawnPla

; 7133 : 			P_ResetCamera(p, &camera);

  0031d	68 00 00 00 00	 push	 OFFSET _camera
  00322	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 _P_ResetCamera
  0032b	83 c4 08	 add	 esp, 8
$LN22@P_SpawnPla:

; 7134 : 	}
; 7135 : 	if (cv_chasecam2.value && splitscreen)

  0032e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  00335	74 24		 je	 SHORT $LN24@P_SpawnPla
  00337	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0033e	74 1b		 je	 SHORT $LN24@P_SpawnPla

; 7136 : 	{
; 7137 : 		if (secondarydisplayplayer == playernum)

  00340	a1 00 00 00 00	 mov	 eax, DWORD PTR _secondarydisplayplayer
  00345	3b 45 0c	 cmp	 eax, DWORD PTR _playernum$[ebp]
  00348	75 11		 jne	 SHORT $LN24@P_SpawnPla

; 7138 : 			P_ResetCamera(p, &camera2);

  0034a	68 00 00 00 00	 push	 OFFSET _camera2
  0034f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00352	50		 push	 eax
  00353	e8 00 00 00 00	 call	 _P_ResetCamera
  00358	83 c4 08	 add	 esp, 8
$LN24@P_SpawnPla:

; 7139 : 	}
; 7140 : 
; 7141 : 	// set the scale to the mobj's destscale so settings get correctly set.  if we don't, they sometimes don't. 
; 7142 : 	P_SetScale(mobj, mobj->destscale);

  0035b	8b 45 ec	 mov	 eax, DWORD PTR _mobj$[ebp]
  0035e	0f b7 88 ce 00
	00 00		 movzx	 ecx, WORD PTR [eax+206]
  00365	51		 push	 ecx
  00366	8b 55 ec	 mov	 edx, DWORD PTR _mobj$[ebp]
  00369	52		 push	 edx
  0036a	e8 00 00 00 00	 call	 _P_SetScale
  0036f	83 c4 08	 add	 esp, 8
$LN1@P_SpawnPla:

; 7143 : }

  00372	5f		 pop	 edi
  00373	5e		 pop	 esi
  00374	5b		 pop	 ebx
  00375	8b e5		 mov	 esp, ebp
  00377	5d		 pop	 ebp
  00378	c3		 ret	 0
_P_SpawnPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_SpawnMapThing
_TEXT	SEGMENT
tv220 = -168						; size = 4
tv225 = -168						; size = 4
tv1112 = -168						; size = 4
_foundanother$1 = -100					; size = 4
_mo2$2 = -96						; size = 4
_th$3 = -92						; size = 4
_spikemobj$4 = -88					; size = 4
_mthingi$5 = -84					; size = 4
_line$6 = -80						; size = 4
_spawnee$7 = -76					; size = 4
_firsttime$8 = -72					; size = 4
_macetype$9 = -68					; size = 4
_chainlink$10 = -64					; size = 4
_mmaxspeed$11 = -60					; size = 4
_mstartangle$12 = -56					; size = 4
_mzspeed$13 = -52					; size = 4
_mxspeed$14 = -48					; size = 4
_mspeed$15 = -44					; size = 4
_mlength$16 = -40					; size = 4
_lastball$17 = -36					; size = 4
_ball$18 = -32						; size = 4
_q$19 = -28						; size = 4
_ss$ = -24						; size = 4
_z$ = -20						; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_mobj$ = -8						; size = 4
_i$ = -4						; size = 4
_mthing$ = 8						; size = 4
_P_SpawnMapThing PROC					; COMDAT

; 7240 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7241 : 	mobjtype_t i;
; 7242 : 	mobj_t *mobj;
; 7243 : 	fixed_t x, y, z;
; 7244 : 	subsector_t *ss;
; 7245 : 
; 7246 : 	if (!mthing->type)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0000f	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00013	85 c9		 test	 ecx, ecx
  00015	75 05		 jne	 SHORT $LN22@P_SpawnMap

; 7247 : 		return; // Ignore type-0 things as NOPs

  00017	e9 33 1a 00 00	 jmp	 $LN1@P_SpawnMap
$LN22@P_SpawnMap:

; 7248 : 
; 7249 : 	// clear ctf pointers
; 7250 : 	redflag = blueflag = NULL;

  0001c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _blueflag, 0
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR _blueflag
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _redflag, eax

; 7251 : 
; 7252 : 	// count deathmatch start positions
; 7253 : 	if (mthing->type == 33)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00033	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00037	83 f9 21	 cmp	 ecx, 33			; 00000021H
  0003a	75 38		 jne	 SHORT $LN23@P_SpawnMap

; 7254 : 	{
; 7255 : 		if (numdmstarts < MAX_DM_STARTS)

  0003c	83 3d 00 00 00
	00 40		 cmp	 DWORD PTR _numdmstarts, 64 ; 00000040H
  00043	7d 25		 jge	 SHORT $LN25@P_SpawnMap

; 7256 : 		{
; 7257 : 			deathmatchstarts[numdmstarts] = mthing;

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR _numdmstarts
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  0004d	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _deathmatchstarts[eax*4], ecx

; 7258 : 			mthing->type = 0;

  00054	33 c0		 xor	 eax, eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00059	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 7259 : 			numdmstarts++;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR _numdmstarts
  00062	83 c0 01	 add	 eax, 1
  00065	a3 00 00 00 00	 mov	 DWORD PTR _numdmstarts, eax
$LN25@P_SpawnMap:

; 7260 : 		}
; 7261 : 		return;

  0006a	e9 e0 19 00 00	 jmp	 $LN1@P_SpawnMap

; 7262 : 	}

  0006f	e9 99 01 00 00	 jmp	 $LN32@P_SpawnMap
$LN23@P_SpawnMap:

; 7263 : 
; 7264 : 	else if (mthing->type == 34) // Red CTF Starts

  00074	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00077	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0007b	83 f9 22	 cmp	 ecx, 34			; 00000022H
  0007e	75 38		 jne	 SHORT $LN26@P_SpawnMap

; 7265 : 	{
; 7266 : 		if (numredctfstarts < MAXPLAYERS)

  00080	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR _numredctfstarts, 32 ; 00000020H
  00087	7d 25		 jge	 SHORT $LN28@P_SpawnMap

; 7267 : 		{
; 7268 : 			redctfstarts[numredctfstarts] = mthing;

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR _numredctfstarts
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00091	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _redctfstarts[eax*4], ecx

; 7269 : 			mthing->type = 0;

  00098	33 c0		 xor	 eax, eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  0009d	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 7270 : 			numredctfstarts++;

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _numredctfstarts
  000a6	83 c0 01	 add	 eax, 1
  000a9	a3 00 00 00 00	 mov	 DWORD PTR _numredctfstarts, eax
$LN28@P_SpawnMap:

; 7271 : 		}
; 7272 : 		return;

  000ae	e9 9c 19 00 00	 jmp	 $LN1@P_SpawnMap

; 7273 : 	}

  000b3	e9 55 01 00 00	 jmp	 $LN32@P_SpawnMap
$LN26@P_SpawnMap:

; 7274 : 
; 7275 : 	else if (mthing->type == 35) // Blue CTF Starts

  000b8	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  000bb	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000bf	83 f9 23	 cmp	 ecx, 35			; 00000023H
  000c2	75 38		 jne	 SHORT $LN29@P_SpawnMap

; 7276 : 	{
; 7277 : 		if (numbluectfstarts < MAXPLAYERS)

  000c4	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR _numbluectfstarts, 32 ; 00000020H
  000cb	7d 25		 jge	 SHORT $LN31@P_SpawnMap

; 7278 : 		{
; 7279 : 			bluectfstarts[numbluectfstarts] = mthing;

  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _numbluectfstarts
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  000d5	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _bluectfstarts[eax*4], ecx

; 7280 : 			mthing->type = 0;

  000dc	33 c0		 xor	 eax, eax
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  000e1	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 7281 : 			numbluectfstarts++;

  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _numbluectfstarts
  000ea	83 c0 01	 add	 eax, 1
  000ed	a3 00 00 00 00	 mov	 DWORD PTR _numbluectfstarts, eax
$LN31@P_SpawnMap:

; 7282 : 		}
; 7283 : 		return;

  000f2	e9 58 19 00 00	 jmp	 $LN1@P_SpawnMap

; 7284 : 	}

  000f7	e9 11 01 00 00	 jmp	 $LN32@P_SpawnMap
$LN29@P_SpawnMap:

; 7285 : 
; 7286 : 	else if (mthing->type == 600
; 7287 : 		|| mthing->type == 601 || mthing->type == 602
; 7288 : 		|| mthing->type == 603 || mthing->type == 604
; 7289 : 		|| mthing->type == 300 || mthing->type == 605
; 7290 : 		|| mthing->type == 308 || mthing->type == 309 //todo: mobj[type].doomednum here too.
; 7291 : 		|| mthing->type == 606 || mthing->type == 607
; 7292 : 		|| mthing->type == 608 || mthing->type == 609
; 7293 : 		|| mthing->type == 1705 || mthing->type == 1706
; 7294 : 		|| mthing->type == 1800)

  000fc	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  000ff	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00103	81 f9 58 02 00
	00		 cmp	 ecx, 600		; 00000258H
  00109	0f 84 f9 00 00
	00		 je	 $LN33@P_SpawnMap
  0010f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00112	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00116	81 f9 59 02 00
	00		 cmp	 ecx, 601		; 00000259H
  0011c	0f 84 e6 00 00
	00		 je	 $LN33@P_SpawnMap
  00122	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00125	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00129	81 f9 5a 02 00
	00		 cmp	 ecx, 602		; 0000025aH
  0012f	0f 84 d3 00 00
	00		 je	 $LN33@P_SpawnMap
  00135	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00138	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0013c	81 f9 5b 02 00
	00		 cmp	 ecx, 603		; 0000025bH
  00142	0f 84 c0 00 00
	00		 je	 $LN33@P_SpawnMap
  00148	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0014b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0014f	81 f9 5c 02 00
	00		 cmp	 ecx, 604		; 0000025cH
  00155	0f 84 ad 00 00
	00		 je	 $LN33@P_SpawnMap
  0015b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0015e	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00162	81 f9 2c 01 00
	00		 cmp	 ecx, 300		; 0000012cH
  00168	0f 84 9a 00 00
	00		 je	 $LN33@P_SpawnMap
  0016e	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00171	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00175	81 f9 5d 02 00
	00		 cmp	 ecx, 605		; 0000025dH
  0017b	0f 84 87 00 00
	00		 je	 $LN33@P_SpawnMap
  00181	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00184	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00188	81 f9 34 01 00
	00		 cmp	 ecx, 308		; 00000134H
  0018e	74 78		 je	 SHORT $LN33@P_SpawnMap
  00190	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00193	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00197	81 f9 35 01 00
	00		 cmp	 ecx, 309		; 00000135H
  0019d	74 69		 je	 SHORT $LN33@P_SpawnMap
  0019f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  001a2	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001a6	81 f9 5e 02 00
	00		 cmp	 ecx, 606		; 0000025eH
  001ac	74 5a		 je	 SHORT $LN33@P_SpawnMap
  001ae	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  001b1	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001b5	81 f9 5f 02 00
	00		 cmp	 ecx, 607		; 0000025fH
  001bb	74 4b		 je	 SHORT $LN33@P_SpawnMap
  001bd	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  001c0	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001c4	81 f9 60 02 00
	00		 cmp	 ecx, 608		; 00000260H
  001ca	74 3c		 je	 SHORT $LN33@P_SpawnMap
  001cc	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  001cf	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001d3	81 f9 61 02 00
	00		 cmp	 ecx, 609		; 00000261H
  001d9	74 2d		 je	 SHORT $LN33@P_SpawnMap
  001db	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  001de	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001e2	81 f9 a9 06 00
	00		 cmp	 ecx, 1705		; 000006a9H
  001e8	74 1e		 je	 SHORT $LN33@P_SpawnMap
  001ea	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  001ed	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001f1	81 f9 aa 06 00
	00		 cmp	 ecx, 1706		; 000006aaH
  001f7	74 0f		 je	 SHORT $LN33@P_SpawnMap
  001f9	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  001fc	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00200	81 f9 08 07 00
	00		 cmp	 ecx, 1800		; 00000708H
  00206	75 05		 jne	 SHORT $LN32@P_SpawnMap
$LN33@P_SpawnMap:

; 7295 : 	{
; 7296 : 		// Don't spawn hoops, wings, or rings yet!
; 7297 : 		return;

  00208	e9 42 18 00 00	 jmp	 $LN1@P_SpawnMap
$LN32@P_SpawnMap:

; 7298 : 	}
; 7299 : 
; 7300 : 	// check for players specially
; 7301 : 	if (mthing->type > 0 && mthing->type <= 32)

  0020d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00210	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00214	85 c9		 test	 ecx, ecx
  00216	7e 22		 jle	 SHORT $LN34@P_SpawnMap
  00218	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0021b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0021f	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00222	7f 16		 jg	 SHORT $LN34@P_SpawnMap

; 7302 : 	{
; 7303 : 		// save spots for respawning in network games
; 7304 : 		playerstarts[mthing->type-1] = mthing;

  00224	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00227	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0022b	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  0022e	89 14 8d fc ff
	ff ff		 mov	 DWORD PTR _playerstarts[ecx*4-4], edx

; 7305 : 		return;

  00235	e9 15 18 00 00	 jmp	 $LN1@P_SpawnMap
$LN34@P_SpawnMap:

; 7306 : 	}
; 7307 : 
; 7308 : 	// find which type to spawn
; 7309 : 	for (i = 0; i < NUMMOBJTYPES; i++)

  0023a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00241	eb 09		 jmp	 SHORT $LN4@P_SpawnMap
$LN2@P_SpawnMap:
  00243	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00246	83 c0 01	 add	 eax, 1
  00249	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_SpawnMap:
  0024c	81 7d fc be 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 446	; 000001beH
  00253	7d 17		 jge	 SHORT $LN3@P_SpawnMap

; 7310 : 		if (mthing->type == mobjinfo[i].doomednum)

  00255	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00258	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0025c	6b 55 fc 60	 imul	 edx, DWORD PTR _i$[ebp], 96
  00260	3b 8a 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[edx]
  00266	75 02		 jne	 SHORT $LN35@P_SpawnMap

; 7311 : 			break;

  00268	eb 02		 jmp	 SHORT $LN3@P_SpawnMap
$LN35@P_SpawnMap:
  0026a	eb d7		 jmp	 SHORT $LN2@P_SpawnMap
$LN3@P_SpawnMap:

; 7312 : 
; 7313 : 	if (i == NUMMOBJTYPES)

  0026c	81 7d fc be 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 446	; 000001beH
  00273	75 38		 jne	 SHORT $LN36@P_SpawnMap

; 7314 : 	{
; 7315 : 		if (mthing->type != 3328) // 3D Thing Mode start

  00275	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00278	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0027c	81 f9 00 0d 00
	00		 cmp	 ecx, 3328		; 00000d00H
  00282	74 24		 je	 SHORT $LN37@P_SpawnMap

; 7316 : 			CONS_Printf("\2P_SpawnMapThing: Unknown type %d at (%d, %d)\n", mthing->type, mthing->x, mthing->y);

  00284	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00287	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0028b	51		 push	 ecx
  0028c	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  0028f	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00292	50		 push	 eax
  00293	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00296	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  0029a	52		 push	 edx
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DEKEAOPC@?$ACP_SpawnMapThing?3?5Unknown?5type?5@
  002a0	e8 00 00 00 00	 call	 _CONS_Printf
  002a5	83 c4 10	 add	 esp, 16			; 00000010H
$LN37@P_SpawnMap:

; 7317 : 
; 7318 : 		return;

  002a8	e9 a2 17 00 00	 jmp	 $LN1@P_SpawnMap
$LN36@P_SpawnMap:

; 7319 : 	}
; 7320 : 
; 7321 : 	if (i >= MT_EMERALD1 && i <= MT_EMERALD7) // Pickupable Emeralds

  002ad	83 7d fc 37	 cmp	 DWORD PTR _i$[ebp], 55	; 00000037H
  002b1	7c 1e		 jl	 SHORT $LN39@P_SpawnMap
  002b3	83 7d fc 3d	 cmp	 DWORD PTR _i$[ebp], 61	; 0000003dH
  002b7	7f 18		 jg	 SHORT $LN39@P_SpawnMap

; 7322 : 	{
; 7323 : 		if (emeralds & mobjinfo[i].speed) // You already have this emerald!

  002b9	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  002c0	6b 4d fc 60	 imul	 ecx, DWORD PTR _i$[ebp], 96
  002c4	23 81 3c 00 00
	00		 and	 eax, DWORD PTR _mobjinfo[ecx+60]
  002ca	74 05		 je	 SHORT $LN39@P_SpawnMap

; 7324 : 			return;

  002cc	e9 7e 17 00 00	 jmp	 $LN1@P_SpawnMap
$LN39@P_SpawnMap:

; 7325 : 	}
; 7326 : 
; 7327 : 	if ((!(gametype == GT_MATCH || gametype == GT_CTF	|| gametype == GT_TAG)
; 7328 : 		&& (!cv_ringslinger.value)) || (!cv_specialrings.value))

  002d1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002d8	83 f8 01	 cmp	 eax, 1
  002db	74 21		 je	 SHORT $LN42@P_SpawnMap
  002dd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002e4	83 f8 04	 cmp	 eax, 4
  002e7	74 15		 je	 SHORT $LN42@P_SpawnMap
  002e9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002f0	83 f8 03	 cmp	 eax, 3
  002f3	74 09		 je	 SHORT $LN42@P_SpawnMap
  002f5	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_ringslinger+20, 0
  002fc	74 09		 je	 SHORT $LN41@P_SpawnMap
$LN42@P_SpawnMap:
  002fe	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_specialrings+20, 0
  00305	75 36		 jne	 SHORT $LN5@P_SpawnMap
$LN41@P_SpawnMap:

; 7329 : 	{
; 7330 : 		switch (i)

  00307	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0030a	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv220[ebp], eax
  00310	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv220[ebp]
  00316	81 e9 d0 00 00
	00		 sub	 ecx, 208		; 000000d0H
  0031c	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv220[ebp], ecx
  00322	83 bd 58 ff ff
	ff 0b		 cmp	 DWORD PTR tv220[ebp], 11 ; 0000000bH
  00329	77 12		 ja	 SHORT $LN55@P_SpawnMap
  0032b	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv220[ebp]
  00331	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN237@P_SpawnMap[edx*4]
$LN43@P_SpawnMap:

; 7331 : 		{
; 7332 : 			case MT_BOUNCERING:
; 7333 : 			case MT_RAILRING:
; 7334 : 			case MT_AUTOMATICRING:
; 7335 : 			case MT_EXPLOSIONRING:
; 7336 : 			case MT_SCATTERRING:
; 7337 : 			case MT_GRENADERING:
; 7338 : 			case MT_BOUNCEPICKUP:
; 7339 : 			case MT_RAILPICKUP:
; 7340 : 			case MT_AUTOPICKUP:
; 7341 : 			case MT_EXPLODEPICKUP:
; 7342 : 			case MT_SCATTERPICKUP:
; 7343 : 			case MT_GRENADEPICKUP:
; 7344 : 				return;

  00338	e9 12 17 00 00	 jmp	 $LN1@P_SpawnMap
$LN55@P_SpawnMap:
$LN5@P_SpawnMap:

; 7345 : 			default:
; 7346 : 				break;
; 7347 : 		}
; 7348 : 	}
; 7349 : 
; 7350 : 	// Hunt should only work in Cooperative.
; 7351 : 	if (gametype != GT_COOP)

  0033d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00344	85 c0		 test	 eax, eax
  00346	74 19		 je	 SHORT $LN7@P_SpawnMap

; 7352 : 	{
; 7353 : 		switch (i)

  00348	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0034b	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv225[ebp], eax
  00351	83 bd 58 ff ff
	ff 3e		 cmp	 DWORD PTR tv225[ebp], 62 ; 0000003eH
  00358	74 02		 je	 SHORT $LN57@P_SpawnMap
  0035a	eb 05		 jmp	 SHORT $LN58@P_SpawnMap
$LN57@P_SpawnMap:

; 7354 : 		{
; 7355 : 			case MT_EMERHUNT:
; 7356 : 				return;

  0035c	e9 ee 16 00 00	 jmp	 $LN1@P_SpawnMap
$LN58@P_SpawnMap:
$LN7@P_SpawnMap:

; 7357 : 			default:
; 7358 : 				break;
; 7359 : 		}
; 7360 : 	}
; 7361 : 
; 7362 : 	if (i == MT_EMERHUNT)

  00361	83 7d fc 3e	 cmp	 DWORD PTR _i$[ebp], 62	; 0000003eH
  00365	75 69		 jne	 SHORT $LN59@P_SpawnMap

; 7363 : 	{
; 7364 : 		ss = R_PointInSubsector(mthing->x << FRACBITS, mthing->y << FRACBITS);

  00367	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0036a	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0036e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00371	51		 push	 ecx
  00372	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00375	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00378	c1 e0 10	 shl	 eax, 16			; 00000010H
  0037b	50		 push	 eax
  0037c	e8 00 00 00 00	 call	 _R_PointInSubsector
  00381	83 c4 08	 add	 esp, 8
  00384	89 45 e8	 mov	 DWORD PTR _ss$[ebp], eax

; 7365 : 		mthing->z = (INT16)((ss->sector->floorheight>>FRACBITS) + (mthing->options >> ZSHIFT));

  00387	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  0038a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00391	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00394	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00398	c1 f9 04	 sar	 ecx, 4
  0039b	03 d1		 add	 edx, ecx
  0039d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  003a0	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 7366 : 
; 7367 : 		if (numhuntemeralds < MAXHUNTEMERALDS)

  003a4	83 3d 00 00 00
	00 40		 cmp	 DWORD PTR _numhuntemeralds, 64 ; 00000040H
  003ab	7d 1e		 jge	 SHORT $LN60@P_SpawnMap

; 7368 : 			huntemeralds[numhuntemeralds++] = mthing;

  003ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _numhuntemeralds
  003b2	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  003b5	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _huntemeralds[eax*4], ecx
  003bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _numhuntemeralds
  003c2	83 c2 01	 add	 edx, 1
  003c5	89 15 00 00 00
	00		 mov	 DWORD PTR _numhuntemeralds, edx
$LN60@P_SpawnMap:

; 7369 : 		return;

  003cb	e9 7f 16 00 00	 jmp	 $LN1@P_SpawnMap
$LN59@P_SpawnMap:

; 7370 : 	}
; 7371 : 
; 7372 : 	if (i == MT_EMERALDSPAWN)

  003d0	83 7d fc 3f	 cmp	 DWORD PTR _i$[ebp], 63	; 0000003fH
  003d4	75 35		 jne	 SHORT $LN61@P_SpawnMap

; 7373 : 	{
; 7374 : 		if (!cv_powerstones.value)

  003d6	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_powerstones+20, 0
  003dd	75 05		 jne	 SHORT $LN62@P_SpawnMap

; 7375 : 			return;

  003df	e9 6b 16 00 00	 jmp	 $LN1@P_SpawnMap
$LN62@P_SpawnMap:

; 7376 : 
; 7377 : 		if (!(gametype == GT_MATCH || gametype == GT_CTF))

  003e4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003eb	83 f8 01	 cmp	 eax, 1
  003ee	74 11		 je	 SHORT $LN63@P_SpawnMap
  003f0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003f7	83 f8 04	 cmp	 eax, 4
  003fa	74 05		 je	 SHORT $LN63@P_SpawnMap

; 7378 : 			return;

  003fc	e9 4e 16 00 00	 jmp	 $LN1@P_SpawnMap
$LN63@P_SpawnMap:

; 7379 : 
; 7380 : 		runemeraldmanager = true;

  00401	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _runemeraldmanager, 1
$LN61@P_SpawnMap:

; 7381 : 	}
; 7382 : 
; 7383 : 	// No outright emerald placement in match, CTF or tag.
; 7384 : 	if ((mthing->type >= mobjinfo[MT_EMERALD1].doomednum &&
; 7385 : 	     mthing->type <= mobjinfo[MT_EMERALD7].doomednum) &&

  0040b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0040e	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00412	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  00417	6b c2 37	 imul	 eax, edx, 55
  0041a	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  00420	7c 40		 jl	 SHORT $LN64@P_SpawnMap
  00422	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00425	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00429	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  0042e	6b c2 3d	 imul	 eax, edx, 61
  00431	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  00437	7f 29		 jg	 SHORT $LN64@P_SpawnMap
  00439	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00440	83 f8 01	 cmp	 eax, 1
  00443	74 18		 je	 SHORT $LN65@P_SpawnMap
  00445	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0044c	83 f8 04	 cmp	 eax, 4
  0044f	74 0c		 je	 SHORT $LN65@P_SpawnMap
  00451	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00458	83 f8 03	 cmp	 eax, 3
  0045b	75 05		 jne	 SHORT $LN64@P_SpawnMap
$LN65@P_SpawnMap:

; 7386 : 	    (gametype == GT_MATCH || gametype == GT_CTF || gametype == GT_TAG))
; 7387 : 		return;

  0045d	e9 ed 15 00 00	 jmp	 $LN1@P_SpawnMap
$LN64@P_SpawnMap:

; 7388 : 
; 7389 : 	if (gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF) // No enemies in match or CTF modes

  00462	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00469	83 f8 01	 cmp	 eax, 1
  0046c	74 18		 je	 SHORT $LN67@P_SpawnMap
  0046e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00475	83 f8 03	 cmp	 eax, 3
  00478	74 0c		 je	 SHORT $LN67@P_SpawnMap
  0047a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00481	83 f8 04	 cmp	 eax, 4
  00484	75 2f		 jne	 SHORT $LN68@P_SpawnMap
$LN67@P_SpawnMap:

; 7390 : 		if ((mobjinfo[i].flags & MF_ENEMY) || (mobjinfo[i].flags & MF_BOSS) || i == MT_EGGGUARD)

  00486	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  0048a	8b 88 58 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+88]
  00490	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  00496	75 18		 jne	 SHORT $LN69@P_SpawnMap
  00498	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  0049c	8b 88 58 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+88]
  004a2	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  004a8	75 06		 jne	 SHORT $LN69@P_SpawnMap
  004aa	83 7d fc 15	 cmp	 DWORD PTR _i$[ebp], 21	; 00000015H
  004ae	75 05		 jne	 SHORT $LN68@P_SpawnMap
$LN69@P_SpawnMap:

; 7391 : 			return;

  004b0	e9 9a 15 00 00	 jmp	 $LN1@P_SpawnMap
$LN68@P_SpawnMap:

; 7392 : 
; 7393 : 	// Set powerup boxes to user settings for race.
; 7394 : 	if (gametype == GT_RACE)

  004b5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004bc	83 f8 02	 cmp	 eax, 2
  004bf	75 52		 jne	 SHORT $LN70@P_SpawnMap

; 7395 : 	{
; 7396 : 		if (cv_raceitemboxes.value) // not Normal

  004c1	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_raceitemboxes+20, 0
  004c8	74 44		 je	 SHORT $LN78@P_SpawnMap

; 7397 : 		{
; 7398 : 			if (mobjinfo[i].flags & MF_MONITOR)

  004ca	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  004ce	8b 88 58 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+88]
  004d4	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  004da	74 32		 je	 SHORT $LN78@P_SpawnMap

; 7399 : 			{
; 7400 : 				if (cv_raceitemboxes.value == 1) // Random

  004dc	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_raceitemboxes+20, 1
  004e3	75 09		 jne	 SHORT $LN74@P_SpawnMap

; 7401 : 					i = MT_QUESTIONBOX;

  004e5	c7 45 fc 5d 00
	00 00		 mov	 DWORD PTR _i$[ebp], 93	; 0000005dH
  004ec	eb 20		 jmp	 SHORT $LN78@P_SpawnMap
$LN74@P_SpawnMap:

; 7402 : 				else if (cv_raceitemboxes.value == 2) // Teleports

  004ee	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_raceitemboxes+20, 2
  004f5	75 09		 jne	 SHORT $LN76@P_SpawnMap

; 7403 : 					i = MT_MIXUPBOX;

  004f7	c7 45 fc 5a 00
	00 00		 mov	 DWORD PTR _i$[ebp], 90	; 0000005aH
  004fe	eb 0e		 jmp	 SHORT $LN78@P_SpawnMap
$LN76@P_SpawnMap:

; 7404 : 				else if (cv_raceitemboxes.value == 3) // None

  00500	83 3d 14 00 00
	00 03		 cmp	 DWORD PTR _cv_raceitemboxes+20, 3
  00507	75 05		 jne	 SHORT $LN78@P_SpawnMap

; 7405 : 					return; // Don't spawn!

  00509	e9 41 15 00 00	 jmp	 $LN1@P_SpawnMap
$LN78@P_SpawnMap:

; 7406 : 			}
; 7407 : 		}
; 7408 : 	}

  0050e	e9 a1 00 00 00	 jmp	 $LN89@P_SpawnMap
$LN70@P_SpawnMap:

; 7409 : 
; 7410 : 	// Set powerup boxes to user settings for other netplay modes
; 7411 : 	else if (gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF

  00513	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0051a	83 f8 01	 cmp	 eax, 1
  0051d	74 18		 je	 SHORT $LN80@P_SpawnMap
  0051f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00526	83 f8 03	 cmp	 eax, 3
  00529	74 0c		 je	 SHORT $LN80@P_SpawnMap
  0052b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00532	83 f8 04	 cmp	 eax, 4
  00535	75 7d		 jne	 SHORT $LN89@P_SpawnMap
$LN80@P_SpawnMap:

; 7412 : #ifdef CHAOSISNOTDEADYET
; 7413 : 		|| gametype == GT_CHAOS
; 7414 : #endif
; 7415 : 		)
; 7416 : 	{
; 7417 : 		if (cv_matchboxes.value) // not Normal

  00537	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchboxes+20, 0
  0053e	74 74		 je	 SHORT $LN89@P_SpawnMap

; 7418 : 		{
; 7419 : 			if (cv_matchboxes.value == 1) // Random

  00540	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_matchboxes+20, 1
  00547	75 1b		 jne	 SHORT $LN82@P_SpawnMap

; 7420 : 			{
; 7421 : 				if (mobjinfo[i].flags & MF_MONITOR)

  00549	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  0054d	8b 88 58 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+88]
  00553	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00559	74 07		 je	 SHORT $LN84@P_SpawnMap

; 7422 : 					i = MT_QUESTIONBOX;

  0055b	c7 45 fc 5d 00
	00 00		 mov	 DWORD PTR _i$[ebp], 93	; 0000005dH
$LN84@P_SpawnMap:

; 7423 : 			}

  00562	eb 50		 jmp	 SHORT $LN89@P_SpawnMap
$LN82@P_SpawnMap:

; 7424 : 			else if (cv_matchboxes.value == 3) // Don't spawn

  00564	83 3d 14 00 00
	00 03		 cmp	 DWORD PTR _cv_matchboxes+20, 3
  0056b	75 19		 jne	 SHORT $LN85@P_SpawnMap

; 7425 : 			{
; 7426 : 				if (mobjinfo[i].flags & MF_MONITOR)

  0056d	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  00571	8b 88 58 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+88]
  00577	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  0057d	74 05		 je	 SHORT $LN87@P_SpawnMap

; 7427 : 					return;

  0057f	e9 cb 14 00 00	 jmp	 $LN1@P_SpawnMap
$LN87@P_SpawnMap:

; 7428 : 			}

  00584	eb 2e		 jmp	 SHORT $LN89@P_SpawnMap
$LN85@P_SpawnMap:

; 7429 : 			else // cv_matchboxes.value == 2, Non-Random
; 7430 : 			{
; 7431 : 				if (i == MT_QUESTIONBOX) return; // don't spawn in Non-Random

  00586	83 7d fc 5d	 cmp	 DWORD PTR _i$[ebp], 93	; 0000005dH
  0058a	75 05		 jne	 SHORT $LN88@P_SpawnMap
  0058c	e9 be 14 00 00	 jmp	 $LN1@P_SpawnMap
$LN88@P_SpawnMap:

; 7432 : 
; 7433 : 				if (mobjinfo[i].flags & MF_MONITOR)

  00591	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  00595	8b 88 58 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+88]
  0059b	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  005a1	74 11		 je	 SHORT $LN89@P_SpawnMap

; 7434 : 					mthing->options &= ~(MTF_AMBUSH + MTF_OBJECTSPECIAL); // no random respawning!

  005a3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  005a6	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  005aa	83 e1 f3	 and	 ecx, -13		; fffffff3H
  005ad	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  005b0	66 89 4a 08	 mov	 WORD PTR [edx+8], cx
$LN89@P_SpawnMap:

; 7435 : 			}
; 7436 : 		}
; 7437 : 	}
; 7438 : 
; 7439 : 	if (i == MT_SIGN && gametype != GT_COOP && gametype != GT_RACE)

  005b4	83 7d fc 43	 cmp	 DWORD PTR _i$[ebp], 67	; 00000043H
  005b8	75 1c		 jne	 SHORT $LN90@P_SpawnMap
  005ba	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  005c1	85 c0		 test	 eax, eax
  005c3	74 11		 je	 SHORT $LN90@P_SpawnMap
  005c5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  005cc	83 f8 02	 cmp	 eax, 2
  005cf	74 05		 je	 SHORT $LN90@P_SpawnMap

; 7440 : 		return; // Don't spawn the level exit sign when it isn't needed.

  005d1	e9 79 14 00 00	 jmp	 $LN1@P_SpawnMap
$LN90@P_SpawnMap:

; 7441 : 
; 7442 : #ifdef BLUE_SPHERES
; 7443 : 	// Spawn rings as blue spheres in special stages.
; 7444 : 	if (G_IsSpecialStage(gamemap))
; 7445 : 		if (i == MT_RING)
; 7446 : 			i = MT_BLUEBALL;
; 7447 : #endif
; 7448 : 
; 7449 : 	if ((i == MT_BLUETEAMRING || i == MT_REDTEAMRING) && gametype != GT_CTF)

  005d6	83 7d fc 31	 cmp	 DWORD PTR _i$[ebp], 49	; 00000031H
  005da	74 06		 je	 SHORT $LN92@P_SpawnMap
  005dc	83 7d fc 30	 cmp	 DWORD PTR _i$[ebp], 48	; 00000030H
  005e0	75 13		 jne	 SHORT $LN91@P_SpawnMap
$LN92@P_SpawnMap:
  005e2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  005e9	83 f8 04	 cmp	 eax, 4
  005ec	74 07		 je	 SHORT $LN91@P_SpawnMap

; 7450 : 		i = MT_RING; //spawn team rings as regular rings in non-CTF modes

  005ee	c7 45 fc 2b 00
	00 00		 mov	 DWORD PTR _i$[ebp], 43	; 0000002bH
$LN91@P_SpawnMap:

; 7451 : 
; 7452 : 	if ((i == MT_BLUERINGBOX || i == MT_REDRINGBOX) && gametype != GT_CTF)

  005f5	83 7d fc 50	 cmp	 DWORD PTR _i$[ebp], 80	; 00000050H
  005f9	74 06		 je	 SHORT $LN94@P_SpawnMap
  005fb	83 7d fc 4f	 cmp	 DWORD PTR _i$[ebp], 79	; 0000004fH
  005ff	75 13		 jne	 SHORT $LN93@P_SpawnMap
$LN94@P_SpawnMap:
  00601	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00608	83 f8 04	 cmp	 eax, 4
  0060b	74 07		 je	 SHORT $LN93@P_SpawnMap

; 7453 : 		i = MT_SUPERRINGBOX; //spawn team boxes as regular boxes in non-CTF modes

  0060d	c7 45 fc 4e 00
	00 00		 mov	 DWORD PTR _i$[ebp], 78	; 0000004eH
$LN93@P_SpawnMap:

; 7454 : 
; 7455 : 	if ((i == MT_SUPERRINGBOX || i == MT_GREENTV
; 7456 : 		|| i == MT_YELLOWTV || i == MT_BLUETV || i == MT_BLACKTV || i == MT_WHITETV)
; 7457 : 		&& ultimatemode && !G_IsSpecialStage(gamemap))

  00614	83 7d fc 4e	 cmp	 DWORD PTR _i$[ebp], 78	; 0000004eH
  00618	74 1e		 je	 SHORT $LN96@P_SpawnMap
  0061a	83 7d fc 58	 cmp	 DWORD PTR _i$[ebp], 88	; 00000058H
  0061e	74 18		 je	 SHORT $LN96@P_SpawnMap
  00620	83 7d fc 54	 cmp	 DWORD PTR _i$[ebp], 84	; 00000054H
  00624	74 12		 je	 SHORT $LN96@P_SpawnMap
  00626	83 7d fc 55	 cmp	 DWORD PTR _i$[ebp], 85	; 00000055H
  0062a	74 0c		 je	 SHORT $LN96@P_SpawnMap
  0062c	83 7d fc 56	 cmp	 DWORD PTR _i$[ebp], 86	; 00000056H
  00630	74 06		 je	 SHORT $LN96@P_SpawnMap
  00632	83 7d fc 57	 cmp	 DWORD PTR _i$[ebp], 87	; 00000057H
  00636	75 24		 jne	 SHORT $LN95@P_SpawnMap
$LN96@P_SpawnMap:
  00638	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  0063f	85 c0		 test	 eax, eax
  00641	74 19		 je	 SHORT $LN95@P_SpawnMap
  00643	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0064a	50		 push	 eax
  0064b	e8 00 00 00 00	 call	 _G_IsSpecialStage
  00650	83 c4 04	 add	 esp, 4
  00653	85 c0		 test	 eax, eax
  00655	75 05		 jne	 SHORT $LN95@P_SpawnMap

; 7458 : 	{
; 7459 : 		// Don't have rings/shields in Ultimate mode
; 7460 : 		return;

  00657	e9 f3 13 00 00	 jmp	 $LN1@P_SpawnMap
$LN95@P_SpawnMap:

; 7461 : 	}
; 7462 : 
; 7463 : 	if ((i == MT_BLUEFLAG || i == MT_REDFLAG) && gametype != GT_CTF)

  0065c	83 7d fc 35	 cmp	 DWORD PTR _i$[ebp], 53	; 00000035H
  00660	74 06		 je	 SHORT $LN98@P_SpawnMap
  00662	83 7d fc 34	 cmp	 DWORD PTR _i$[ebp], 52	; 00000034H
  00666	75 11		 jne	 SHORT $LN97@P_SpawnMap
$LN98@P_SpawnMap:
  00668	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0066f	83 f8 04	 cmp	 eax, 4
  00672	74 05		 je	 SHORT $LN97@P_SpawnMap

; 7464 : 		return; // Don't spawn flags if you aren't in CTF Mode!

  00674	e9 d6 13 00 00	 jmp	 $LN1@P_SpawnMap
$LN97@P_SpawnMap:

; 7465 : 
; 7466 : 	if (i == MT_EMMY && (tokenbits == 30 || tokenlist & (1<<tokenbits) || gametype != GT_COOP || ultimatemode))

  00679	83 7d fc 32	 cmp	 DWORD PTR _i$[ebp], 50	; 00000032H
  0067d	75 39		 jne	 SHORT $LN99@P_SpawnMap
  0067f	83 3d 00 00 00
	00 1e		 cmp	 DWORD PTR _tokenbits, 30 ; 0000001eH
  00686	74 2b		 je	 SHORT $LN100@P_SpawnMap
  00688	b8 01 00 00 00	 mov	 eax, 1
  0068d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tokenbits
  00693	d3 e0		 shl	 eax, cl
  00695	23 05 00 00 00
	00		 and	 eax, DWORD PTR _tokenlist
  0069b	75 16		 jne	 SHORT $LN100@P_SpawnMap
  0069d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  006a4	85 c0		 test	 eax, eax
  006a6	75 0b		 jne	 SHORT $LN100@P_SpawnMap
  006a8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  006af	85 c0		 test	 eax, eax
  006b1	74 05		 je	 SHORT $LN99@P_SpawnMap
$LN100@P_SpawnMap:

; 7467 : 		return; // you already got this token, or there are too many, or the gametype's not right

  006b3	e9 97 13 00 00	 jmp	 $LN1@P_SpawnMap
$LN99@P_SpawnMap:

; 7468 : 
; 7469 : 	// spawn it
; 7470 : 	x = mthing->x << FRACBITS;

  006b8	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  006bb	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  006be	c1 e1 10	 shl	 ecx, 16			; 00000010H
  006c1	89 4d f4	 mov	 DWORD PTR _x$[ebp], ecx

; 7471 : 	y = mthing->y << FRACBITS;

  006c4	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  006c7	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  006cb	c1 e1 10	 shl	 ecx, 16			; 00000010H
  006ce	89 4d f0	 mov	 DWORD PTR _y$[ebp], ecx

; 7472 : 	ss = R_PointInSubsector(x, y);

  006d1	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  006d4	50		 push	 eax
  006d5	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  006d8	51		 push	 ecx
  006d9	e8 00 00 00 00	 call	 _R_PointInSubsector
  006de	83 c4 08	 add	 esp, 8
  006e1	89 45 e8	 mov	 DWORD PTR _ss$[ebp], eax

; 7473 : 
; 7474 : 	if (i == MT_NIGHTSBUMPER)

  006e4	81 7d fc f7 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 247	; 000000f7H
  006eb	75 1c		 jne	 SHORT $LN101@P_SpawnMap

; 7475 : 		z = ss->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS);

  006ed	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  006f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f2	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  006f5	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  006f9	c1 f8 04	 sar	 eax, 4
  006fc	c1 e0 10	 shl	 eax, 16			; 00000010H
  006ff	03 01		 add	 eax, DWORD PTR [ecx]
  00701	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
  00704	e9 5d 02 00 00	 jmp	 $LN104@P_SpawnMap
$LN101@P_SpawnMap:

; 7476 : 	else if (i != MT_AXIS && i != MT_AXISTRANSFER && i != MT_AXISTRANSFERLINE)

  00709	81 7d fc f1 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 241	; 000000f1H
  00710	0f 84 49 02 00
	00		 je	 $LN103@P_SpawnMap
  00716	81 7d fc f2 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 242	; 000000f2H
  0071d	0f 84 3c 02 00
	00		 je	 $LN103@P_SpawnMap
  00723	81 7d fc f3 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 243	; 000000f3H
  0072a	0f 84 2f 02 00
	00		 je	 $LN103@P_SpawnMap

; 7477 : 	{
; 7478 : 		if (i == MT_SPECIALSPIKEBALL
; 7479 : 			|| i == MT_BOUNCERING || i == MT_RAILRING
; 7480 : 			|| i == MT_AUTOMATICRING
; 7481 : 			|| i == MT_EXPLOSIONRING || i == MT_SCATTERRING
; 7482 : 			|| i == MT_GRENADERING || i == MT_BOUNCEPICKUP
; 7483 : 			|| i == MT_RAILPICKUP || i == MT_AUTOPICKUP
; 7484 : 			|| i == MT_EXPLODEPICKUP || i == MT_SCATTERPICKUP
; 7485 : 			|| i == MT_GRENADEPICKUP || i == MT_EMERALDSPAWN
; 7486 : 			|| i == MT_EMMY)

  00730	83 7d fc 46	 cmp	 DWORD PTR _i$[ebp], 70	; 00000046H
  00734	74 7c		 je	 SHORT $LN107@P_SpawnMap
  00736	81 7d fc d0 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 208	; 000000d0H
  0073d	74 73		 je	 SHORT $LN107@P_SpawnMap
  0073f	81 7d fc d1 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 209	; 000000d1H
  00746	74 6a		 je	 SHORT $LN107@P_SpawnMap
  00748	81 7d fc d2 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 210	; 000000d2H
  0074f	74 61		 je	 SHORT $LN107@P_SpawnMap
  00751	81 7d fc d3 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 211	; 000000d3H
  00758	74 58		 je	 SHORT $LN107@P_SpawnMap
  0075a	81 7d fc d4 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 212	; 000000d4H
  00761	74 4f		 je	 SHORT $LN107@P_SpawnMap
  00763	81 7d fc d5 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 213	; 000000d5H
  0076a	74 46		 je	 SHORT $LN107@P_SpawnMap
  0076c	81 7d fc d6 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 214	; 000000d6H
  00773	74 3d		 je	 SHORT $LN107@P_SpawnMap
  00775	81 7d fc d7 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 215	; 000000d7H
  0077c	74 34		 je	 SHORT $LN107@P_SpawnMap
  0077e	81 7d fc d8 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 216	; 000000d8H
  00785	74 2b		 je	 SHORT $LN107@P_SpawnMap
  00787	81 7d fc d9 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 217	; 000000d9H
  0078e	74 22		 je	 SHORT $LN107@P_SpawnMap
  00790	81 7d fc da 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 218	; 000000daH
  00797	74 19		 je	 SHORT $LN107@P_SpawnMap
  00799	81 7d fc db 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 219	; 000000dbH
  007a0	74 10		 je	 SHORT $LN107@P_SpawnMap
  007a2	83 7d fc 3f	 cmp	 DWORD PTR _i$[ebp], 63	; 0000003fH
  007a6	74 0a		 je	 SHORT $LN107@P_SpawnMap
  007a8	83 7d fc 32	 cmp	 DWORD PTR _i$[ebp], 50	; 00000032H
  007ac	0f 85 aa 00 00
	00		 jne	 $LN105@P_SpawnMap
$LN107@P_SpawnMap:

; 7487 : 		{
; 7488 : 			if (!(mthing->options & MTF_OBJECTFLIP))

  007b2	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007b5	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007b9	83 e1 02	 and	 ecx, 2
  007bc	75 44		 jne	 SHORT $LN108@P_SpawnMap

; 7489 : 			{
; 7490 : 				z = ss->sector->floorheight;

  007be	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  007c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  007c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  007c5	89 55 ec	 mov	 DWORD PTR _z$[ebp], edx

; 7491 : 
; 7492 : 				if (mthing->options & MTF_AMBUSH) // Special flag for rings

  007c8	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007cb	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007cf	83 e1 08	 and	 ecx, 8
  007d2	74 0b		 je	 SHORT $LN110@P_SpawnMap

; 7493 : 					z += 32*FRACUNIT;

  007d4	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  007d7	05 00 00 20 00	 add	 eax, 2097152		; 00200000H
  007dc	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
$LN110@P_SpawnMap:

; 7494 : 				if (mthing->options >> ZSHIFT)

  007df	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007e2	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007e6	c1 f9 04	 sar	 ecx, 4
  007e9	85 c9		 test	 ecx, ecx
  007eb	74 13		 je	 SHORT $LN111@P_SpawnMap

; 7495 : 					z += (mthing->options >> ZSHIFT)*FRACUNIT;

  007ed	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  007f0	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007f4	c1 f9 04	 sar	 ecx, 4
  007f7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  007fa	03 4d ec	 add	 ecx, DWORD PTR _z$[ebp]
  007fd	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
$LN111@P_SpawnMap:

; 7496 : 			}

  00800	eb 55		 jmp	 SHORT $LN109@P_SpawnMap
$LN108@P_SpawnMap:

; 7497 : 			else
; 7498 : 			{
; 7499 : 				z = ss->sector->ceilingheight;

  00802	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00805	8b 08		 mov	 ecx, DWORD PTR [eax]
  00807	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0080a	89 55 ec	 mov	 DWORD PTR _z$[ebp], edx

; 7500 : 
; 7501 : 				if (mthing->options & MTF_AMBUSH) // Special flag for rings

  0080d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00810	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00814	83 e1 08	 and	 ecx, 8
  00817	74 0b		 je	 SHORT $LN112@P_SpawnMap

; 7502 : 					z -= 32*FRACUNIT;

  00819	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  0081c	2d 00 00 20 00	 sub	 eax, 2097152		; 00200000H
  00821	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
$LN112@P_SpawnMap:

; 7503 : 				if (mthing->options >> ZSHIFT)

  00824	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00827	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0082b	c1 f9 04	 sar	 ecx, 4
  0082e	85 c9		 test	 ecx, ecx
  00830	74 15		 je	 SHORT $LN113@P_SpawnMap

; 7504 : 					z -= (mthing->options >> ZSHIFT)*FRACUNIT;

  00832	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00835	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00839	c1 f9 04	 sar	 ecx, 4
  0083c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0083f	8b 55 ec	 mov	 edx, DWORD PTR _z$[ebp]
  00842	2b d1		 sub	 edx, ecx
  00844	89 55 ec	 mov	 DWORD PTR _z$[ebp], edx
$LN113@P_SpawnMap:

; 7505 : 
; 7506 : 				z -= mobjinfo[i].height; //Don't forget the height!

  00847	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  0084b	8b 4d ec	 mov	 ecx, DWORD PTR _z$[ebp]
  0084e	2b 88 44 00 00
	00		 sub	 ecx, DWORD PTR _mobjinfo[eax+68]
  00854	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
$LN109@P_SpawnMap:

; 7507 : 			}
; 7508 : 		}

  00857	e9 e0 00 00 00	 jmp	 $LN125@P_SpawnMap
$LN105@P_SpawnMap:

; 7509 : 		else if (mobjinfo[i].flags & MF_SPAWNCEILING || mthing->options & MTF_OBJECTFLIP)

  0085c	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  00860	8b 88 58 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+88]
  00866	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0086c	75 0c		 jne	 SHORT $LN116@P_SpawnMap
  0086e	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00871	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00875	83 e1 02	 and	 ecx, 2
  00878	74 40		 je	 SHORT $LN114@P_SpawnMap
$LN116@P_SpawnMap:

; 7510 : 		{
; 7511 : 			// Move down with object heights
; 7512 : 			if (mthing->options >> ZSHIFT)

  0087a	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0087d	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00881	c1 f9 04	 sar	 ecx, 4
  00884	85 c9		 test	 ecx, ecx
  00886	74 26		 je	 SHORT $LN117@P_SpawnMap

; 7513 : 				z = ss->sector->ceilingheight - ((mthing->options >> ZSHIFT) << FRACBITS)

  00888	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  0088b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0088d	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  00890	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00894	c1 f8 04	 sar	 eax, 4
  00897	c1 e0 10	 shl	 eax, 16			; 00000010H
  0089a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0089d	2b c8		 sub	 ecx, eax
  0089f	6b 55 fc 60	 imul	 edx, DWORD PTR _i$[ebp], 96
  008a3	2b 8a 44 00 00
	00		 sub	 ecx, DWORD PTR _mobjinfo[edx+68]
  008a9	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
  008ac	eb 07		 jmp	 SHORT $LN118@P_SpawnMap
$LN117@P_SpawnMap:

; 7514 : 					- mobjinfo[i].height; // Subtract the height too!
; 7515 : 			else
; 7516 : 				z = ONCEILINGZ;

  008ae	c7 45 ec ff ff
	ff 7f		 mov	 DWORD PTR _z$[ebp], 2147483647 ; 7fffffffH
$LN118@P_SpawnMap:

; 7517 : 		}

  008b5	e9 82 00 00 00	 jmp	 $LN125@P_SpawnMap
$LN114@P_SpawnMap:

; 7518 : 		else if (mthing->options >> ZSHIFT)

  008ba	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  008bd	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  008c1	c1 f9 04	 sar	 ecx, 4
  008c4	85 c9		 test	 ecx, ecx
  008c6	74 19		 je	 SHORT $LN119@P_SpawnMap

; 7519 : 			z = ss->sector->floorheight + ((mthing->options >> ZSHIFT) << FRACBITS);

  008c8	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  008cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  008cd	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  008d0	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  008d4	c1 f8 04	 sar	 eax, 4
  008d7	c1 e0 10	 shl	 eax, 16			; 00000010H
  008da	03 01		 add	 eax, DWORD PTR [ecx]
  008dc	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
  008df	eb 5b		 jmp	 SHORT $LN125@P_SpawnMap
$LN119@P_SpawnMap:

; 7520 : 		else if (i == MT_CRAWLACOMMANDER || i == MT_DETON || i == MT_JETTBOMBER || i == MT_JETTGUNNER || i == MT_EGGMOBILE || i == MT_EGGMOBILE2)

  008e1	83 7d fc 08	 cmp	 DWORD PTR _i$[ebp], 8
  008e5	74 1e		 je	 SHORT $LN123@P_SpawnMap
  008e7	83 7d fc 09	 cmp	 DWORD PTR _i$[ebp], 9
  008eb	74 18		 je	 SHORT $LN123@P_SpawnMap
  008ed	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  008f1	74 12		 je	 SHORT $LN123@P_SpawnMap
  008f3	83 7d fc 07	 cmp	 DWORD PTR _i$[ebp], 7
  008f7	74 0c		 je	 SHORT $LN123@P_SpawnMap
  008f9	83 7d fc 1d	 cmp	 DWORD PTR _i$[ebp], 29	; 0000001dH
  008fd	74 06		 je	 SHORT $LN123@P_SpawnMap
  008ff	83 7d fc 1f	 cmp	 DWORD PTR _i$[ebp], 31	; 0000001fH
  00903	75 12		 jne	 SHORT $LN121@P_SpawnMap
$LN123@P_SpawnMap:

; 7521 : 			z = ss->sector->floorheight + 33*FRACUNIT;

  00905	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00908	8b 08		 mov	 ecx, DWORD PTR [eax]
  0090a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0090c	81 c2 00 00 21
	00		 add	 edx, 2162688		; 00210000H
  00912	89 55 ec	 mov	 DWORD PTR _z$[ebp], edx
  00915	eb 25		 jmp	 SHORT $LN125@P_SpawnMap
$LN121@P_SpawnMap:

; 7522 : 		else if (i == MT_GOLDBUZZ || i == MT_REDBUZZ)

  00917	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  0091b	74 06		 je	 SHORT $LN126@P_SpawnMap
  0091d	83 7d fc 05	 cmp	 DWORD PTR _i$[ebp], 5
  00921	75 12		 jne	 SHORT $LN124@P_SpawnMap
$LN126@P_SpawnMap:

; 7523 : 			z = ss->sector->floorheight + 288*FRACUNIT;

  00923	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00926	8b 08		 mov	 ecx, DWORD PTR [eax]
  00928	8b 11		 mov	 edx, DWORD PTR [ecx]
  0092a	81 c2 00 00 20
	01		 add	 edx, 18874368		; 01200000H
  00930	89 55 ec	 mov	 DWORD PTR _z$[ebp], edx
  00933	eb 07		 jmp	 SHORT $LN125@P_SpawnMap
$LN124@P_SpawnMap:

; 7524 : 		else
; 7525 : 			z = ONFLOORZ;

  00935	c7 45 ec 00 00
	00 80		 mov	 DWORD PTR _z$[ebp], -2147483648 ; 80000000H
$LN125@P_SpawnMap:

; 7526 : 
; 7527 : 		if (z == ONFLOORZ)

  0093c	81 7d ec 00 00
	00 80		 cmp	 DWORD PTR _z$[ebp], -2147483648 ; 80000000H
  00943	75 0b		 jne	 SHORT $LN127@P_SpawnMap

; 7528 : 			mthing->z = 0;

  00945	33 c0		 xor	 eax, eax
  00947	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  0094a	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax
  0094e	eb 0d		 jmp	 SHORT $LN128@P_SpawnMap
$LN127@P_SpawnMap:

; 7529 : 		else
; 7530 : 			mthing->z = (INT16)(z>>FRACBITS);

  00950	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  00953	c1 f8 10	 sar	 eax, 16			; 00000010H
  00956	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00959	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax
$LN128@P_SpawnMap:

; 7531 : 	}

  0095d	eb 07		 jmp	 SHORT $LN104@P_SpawnMap
$LN103@P_SpawnMap:

; 7532 : 	else
; 7533 : 		z = ONFLOORZ;

  0095f	c7 45 ec 00 00
	00 80		 mov	 DWORD PTR _z$[ebp], -2147483648 ; 80000000H
$LN104@P_SpawnMap:

; 7534 : 
; 7535 : 	mobj = P_SpawnMobj(x, y, z, i);

  00966	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00969	50		 push	 eax
  0096a	8b 4d ec	 mov	 ecx, DWORD PTR _z$[ebp]
  0096d	51		 push	 ecx
  0096e	8b 55 f0	 mov	 edx, DWORD PTR _y$[ebp]
  00971	52		 push	 edx
  00972	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00975	50		 push	 eax
  00976	e8 00 00 00 00	 call	 _P_SpawnMobj
  0097b	83 c4 10	 add	 esp, 16			; 00000010H
  0097e	89 45 f8	 mov	 DWORD PTR _mobj$[ebp], eax

; 7536 : 	mobj->spawnpoint = mthing;

  00981	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00984	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  00987	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 7537 : 
; 7538 : 	if (mobj->type == MT_FAN)

  0098d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00990	83 78 7c 41	 cmp	 DWORD PTR [eax+124], 65	; 00000041H
  00994	75 7b		 jne	 SHORT $LN129@P_SpawnMap

; 7539 : 	{
; 7540 : 		if (mthing->angle)

  00996	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00999	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0099d	85 c9		 test	 ecx, ecx
  0099f	74 12		 je	 SHORT $LN131@P_SpawnMap

; 7541 : 			mobj->health = mthing->angle;

  009a1	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  009a4	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  009a8	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  009ab	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
  009b1	eb 59		 jmp	 SHORT $LN132@P_SpawnMap
$LN131@P_SpawnMap:

; 7542 : 		else
; 7543 : 		{
; 7544 : 			mobj->health = ss->sector->ceilingheight - (ss->sector->ceilingheight - ss->sector->floorheight)/4;

  009b3	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  009b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  009b8	8b 55 e8	 mov	 edx, DWORD PTR _ss$[ebp]
  009bb	8b 02		 mov	 eax, DWORD PTR [edx]
  009bd	8b 55 e8	 mov	 edx, DWORD PTR _ss$[ebp]
  009c0	8b 12		 mov	 edx, DWORD PTR [edx]
  009c2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  009c5	2b 02		 sub	 eax, DWORD PTR [edx]
  009c7	99		 cdq
  009c8	83 e2 03	 and	 edx, 3
  009cb	03 c2		 add	 eax, edx
  009cd	c1 f8 02	 sar	 eax, 2
  009d0	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  009d3	2b c8		 sub	 ecx, eax
  009d5	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  009d8	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 7545 : 			mobj->health -= ss->sector->floorheight;

  009de	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  009e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  009e3	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  009e6	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  009ec	2b 01		 sub	 eax, DWORD PTR [ecx]
  009ee	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  009f1	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 7546 : 			mobj->health >>= FRACBITS;

  009f7	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  009fa	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00a00	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00a03	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00a06	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN132@P_SpawnMap:

; 7547 : 		}
; 7548 : 	}

  00a0c	e9 c5 06 00 00	 jmp	 $LN165@P_SpawnMap
$LN129@P_SpawnMap:

; 7549 : 	else if (mobj->type == MT_WATERDRIP)

  00a11	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a14	83 78 7c 7d	 cmp	 DWORD PTR [eax+124], 125 ; 0000007dH
  00a18	75 2c		 jne	 SHORT $LN133@P_SpawnMap

; 7550 : 	{
; 7551 : 		if (mthing->angle)

  00a1a	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00a1d	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00a21	85 c9		 test	 ecx, ecx
  00a23	74 12		 je	 SHORT $LN135@P_SpawnMap

; 7552 : 			mobj->tics = 3*TICRATE + mthing->angle;

  00a25	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00a28	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00a2c	83 c1 69	 add	 ecx, 105		; 00000069H
  00a2f	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00a32	89 4a 58	 mov	 DWORD PTR [edx+88], ecx
  00a35	eb 0a		 jmp	 SHORT $LN136@P_SpawnMap
$LN135@P_SpawnMap:

; 7553 : 		else
; 7554 : 			mobj->tics = 3*TICRATE;

  00a37	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a3a	c7 40 58 69 00
	00 00		 mov	 DWORD PTR [eax+88], 105	; 00000069H
$LN136@P_SpawnMap:

; 7555 : 	}

  00a41	e9 90 06 00 00	 jmp	 $LN165@P_SpawnMap
$LN133@P_SpawnMap:

; 7556 : 	else if (mobj->type == MT_FLAMEJET || mobj->type == MT_VERTICALFLAMEJET)

  00a46	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a49	81 78 7c 95 00
	00 00		 cmp	 DWORD PTR [eax+124], 149 ; 00000095H
  00a50	74 0c		 je	 SHORT $LN139@P_SpawnMap
  00a52	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a55	81 78 7c 96 00
	00 00		 cmp	 DWORD PTR [eax+124], 150 ; 00000096H
  00a5c	75 64		 jne	 SHORT $LN137@P_SpawnMap
$LN139@P_SpawnMap:

; 7557 : 	{
; 7558 : 		mobj->threshold = (mthing->angle >> 10) & 7;

  00a5e	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00a61	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00a65	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  00a68	83 e1 07	 and	 ecx, 7
  00a6b	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00a6e	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 7559 : 		mobj->movecount = (mthing->angle >> 13);

  00a74	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00a77	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00a7b	c1 f9 0d	 sar	 ecx, 13			; 0000000dH
  00a7e	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00a81	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 7560 : 
; 7561 : 		mobj->threshold *= (TICRATE/2);

  00a87	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a8a	6b 88 a0 00 00
	00 11		 imul	 ecx, DWORD PTR [eax+160], 17
  00a91	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00a94	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 7562 : 		mobj->movecount *= (TICRATE/2);

  00a9a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a9d	6b 88 94 00 00
	00 11		 imul	 ecx, DWORD PTR [eax+148], 17
  00aa4	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00aa7	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 7563 : 
; 7564 : 		mobj->movedir = mthing->extrainfo;

  00aad	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00ab0	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00ab4	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00ab7	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx

; 7565 : 	}

  00abd	e9 14 06 00 00	 jmp	 $LN165@P_SpawnMap
$LN137@P_SpawnMap:

; 7566 : 	else if (mobj->type == MT_POINTY)

  00ac2	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ac5	83 78 7c 11	 cmp	 DWORD PTR [eax+124], 17	; 00000011H
  00ac9	0f 85 86 00 00
	00		 jne	 $LN140@P_SpawnMap

; 7567 : 	{
; 7568 : 		INT32 q;
; 7569 : 		mobj_t *ball, *lastball = mobj;

  00acf	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ad2	89 45 dc	 mov	 DWORD PTR _lastball$17[ebp], eax

; 7570 : 
; 7571 : 		for (q = 0; q < mobj->info->painchance; q++)

  00ad5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _q$19[ebp], 0
  00adc	eb 09		 jmp	 SHORT $LN11@P_SpawnMap
$LN9@P_SpawnMap:
  00ade	8b 45 e4	 mov	 eax, DWORD PTR _q$19[ebp]
  00ae1	83 c0 01	 add	 eax, 1
  00ae4	89 45 e4	 mov	 DWORD PTR _q$19[ebp], eax
$LN11@P_SpawnMap:
  00ae7	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00aea	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00af0	8b 55 e4	 mov	 edx, DWORD PTR _q$19[ebp]
  00af3	3b 51 20	 cmp	 edx, DWORD PTR [ecx+32]
  00af6	7d 58		 jge	 SHORT $LN10@P_SpawnMap

; 7572 : 		{
; 7573 : 			ball = P_SpawnMobj(x, y, z, mobj->info->mass);

  00af8	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00afb	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00b01	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00b04	52		 push	 edx
  00b05	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  00b08	50		 push	 eax
  00b09	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  00b0c	51		 push	 ecx
  00b0d	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  00b10	52		 push	 edx
  00b11	e8 00 00 00 00	 call	 _P_SpawnMobj
  00b16	83 c4 10	 add	 esp, 16			; 00000010H
  00b19	89 45 e0	 mov	 DWORD PTR _ball$18[ebp], eax

; 7574 : 
; 7575 : 			P_SetTarget(&lastball->tracer, ball);

  00b1c	8b 45 e0	 mov	 eax, DWORD PTR _ball$18[ebp]
  00b1f	50		 push	 eax
  00b20	8b 4d dc	 mov	 ecx, DWORD PTR _lastball$17[ebp]
  00b23	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00b29	51		 push	 ecx
  00b2a	e8 00 00 00 00	 call	 _P_SetTarget
  00b2f	83 c4 08	 add	 esp, 8

; 7576 : 
; 7577 : 			P_SetTarget(&ball->target, mobj);

  00b32	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b35	50		 push	 eax
  00b36	8b 4d e0	 mov	 ecx, DWORD PTR _ball$18[ebp]
  00b39	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00b3f	51		 push	 ecx
  00b40	e8 00 00 00 00	 call	 _P_SetTarget
  00b45	83 c4 08	 add	 esp, 8

; 7578 : 
; 7579 : 			lastball = ball;

  00b48	8b 45 e0	 mov	 eax, DWORD PTR _ball$18[ebp]
  00b4b	89 45 dc	 mov	 DWORD PTR _lastball$17[ebp], eax

; 7580 : 		}

  00b4e	eb 8e		 jmp	 SHORT $LN9@P_SpawnMap
$LN10@P_SpawnMap:

; 7581 : 	}

  00b50	e9 81 05 00 00	 jmp	 $LN165@P_SpawnMap
$LN140@P_SpawnMap:

; 7582 : 	else if (mobj->type == MT_MACEPOINT
; 7583 : 		|| mobj->type == MT_SWINGMACEPOINT
; 7584 : 		|| mobj->type == MT_HANGMACEPOINT
; 7585 : 		|| mobj->type == MT_SPINMACEPOINT)

  00b55	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b58	81 78 7c 86 00
	00 00		 cmp	 DWORD PTR [eax+124], 134 ; 00000086H
  00b5f	74 28		 je	 SHORT $LN144@P_SpawnMap
  00b61	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b64	81 78 7c 87 00
	00 00		 cmp	 DWORD PTR [eax+124], 135 ; 00000087H
  00b6b	74 1c		 je	 SHORT $LN144@P_SpawnMap
  00b6d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b70	81 78 7c 88 00
	00 00		 cmp	 DWORD PTR [eax+124], 136 ; 00000088H
  00b77	74 10		 je	 SHORT $LN144@P_SpawnMap
  00b79	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b7c	81 78 7c 89 00
	00 00		 cmp	 DWORD PTR [eax+124], 137 ; 00000089H
  00b83	0f 85 8d 04 00
	00		 jne	 $LN142@P_SpawnMap
$LN144@P_SpawnMap:

; 7586 : 	{
; 7587 : 		fixed_t mlength, mspeed, mxspeed, mzspeed, mstartangle, mmaxspeed;
; 7588 : 		mobjtype_t chainlink = MT_SMALLMACECHAIN;

  00b89	c7 45 c0 8a 00
	00 00		 mov	 DWORD PTR _chainlink$10[ebp], 138 ; 0000008aH

; 7589 : 		mobjtype_t macetype = MT_SMALLMACE;

  00b90	c7 45 bc 8c 00
	00 00		 mov	 DWORD PTR _macetype$9[ebp], 140 ; 0000008cH

; 7590 : 		boolean firsttime;
; 7591 : 		mobj_t *spawnee;
; 7592 : 		size_t line;
; 7593 : 		const size_t mthingi = (size_t)(mthing - mapthings);

  00b97	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00b9a	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _mapthings
  00ba0	99		 cdq
  00ba1	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00ba6	f7 f9		 idiv	 ecx
  00ba8	89 45 ac	 mov	 DWORD PTR _mthingi$5[ebp], eax

; 7594 : 
; 7595 : 		// Why does P_FindSpecialLineFromTag not work here?!?
; 7596 : 		for (line = 0; line < numlines; line++)

  00bab	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _line$6[ebp], 0
  00bb2	eb 09		 jmp	 SHORT $LN14@P_SpawnMap
$LN12@P_SpawnMap:
  00bb4	8b 45 b0	 mov	 eax, DWORD PTR _line$6[ebp]
  00bb7	83 c0 01	 add	 eax, 1
  00bba	89 45 b0	 mov	 DWORD PTR _line$6[ebp], eax
$LN14@P_SpawnMap:
  00bbd	8b 45 b0	 mov	 eax, DWORD PTR _line$6[ebp]
  00bc0	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numlines
  00bc6	73 32		 jae	 SHORT $LN13@P_SpawnMap

; 7597 : 		{
; 7598 : 			if (lines[line].special == 9 && lines[line].tag == mthing->angle)

  00bc8	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00bcc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00bd2	0f bf 54 01 12	 movsx	 edx, WORD PTR [ecx+eax+18]
  00bd7	83 fa 09	 cmp	 edx, 9
  00bda	75 1c		 jne	 SHORT $LN145@P_SpawnMap
  00bdc	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00be0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00be6	0f bf 54 01 14	 movsx	 edx, WORD PTR [ecx+eax+20]
  00beb	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00bee	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00bf2	3b d1		 cmp	 edx, ecx
  00bf4	75 02		 jne	 SHORT $LN145@P_SpawnMap

; 7599 : 				break;

  00bf6	eb 02		 jmp	 SHORT $LN13@P_SpawnMap
$LN145@P_SpawnMap:

; 7600 : 		}

  00bf8	eb ba		 jmp	 SHORT $LN12@P_SpawnMap
$LN13@P_SpawnMap:

; 7601 : 
; 7602 : 		if (line == numlines)

  00bfa	8b 45 b0	 mov	 eax, DWORD PTR _line$6[ebp]
  00bfd	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numlines
  00c03	75 1e		 jne	 SHORT $LN146@P_SpawnMap

; 7603 : 		{
; 7604 : 			CONS_Printf("Mace chain (mapthing #%"PRIdS") needs tagged to a #9 parameter line (trying to find tag %d).\n", mthingi, mthing->angle);

  00c05	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00c08	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00c0c	51		 push	 ecx
  00c0d	8b 55 ac	 mov	 edx, DWORD PTR _mthingi$5[ebp]
  00c10	52		 push	 edx
  00c11	68 00 00 00 00	 push	 OFFSET ??_C@_0FJ@EIIDKMOD@Mace?5chain?5?$CImapthing?5?$CD?$CFIu?$CJ?5need@
  00c16	e8 00 00 00 00	 call	 _CONS_Printf
  00c1b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7605 : 			return;

  00c1e	e9 2c 0e 00 00	 jmp	 $LN1@P_SpawnMap
$LN146@P_SpawnMap:

; 7606 : 		}
; 7607 : /*
; 7608 : No deaf - small mace
; 7609 : Deaf - big mace
; 7610 : 
; 7611 : ML_NOCLIMB : Direction not controllable
; 7612 : */
; 7613 : 		mlength = abs(lines[line].dx >> FRACBITS);

  00c23	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00c27	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00c2d	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00c31	c1 fa 10	 sar	 edx, 16			; 00000010H
  00c34	52		 push	 edx
  00c35	e8 00 00 00 00	 call	 _abs
  00c3a	83 c4 04	 add	 esp, 4
  00c3d	89 45 d8	 mov	 DWORD PTR _mlength$16[ebp], eax

; 7614 : 		mspeed = abs(lines[line].dy >> FRACBITS);

  00c40	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00c44	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00c4a	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  00c4e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00c51	52		 push	 edx
  00c52	e8 00 00 00 00	 call	 _abs
  00c57	83 c4 04	 add	 esp, 4
  00c5a	89 45 d4	 mov	 DWORD PTR _mspeed$15[ebp], eax

; 7615 : 		mxspeed = sides[lines[line].sidenum[0]].textureoffset >> FRACBITS;

  00c5d	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00c61	03 05 00 00 00
	00		 add	 eax, DWORD PTR _lines
  00c67	b9 02 00 00 00	 mov	 ecx, 2
  00c6c	6b d1 00	 imul	 edx, ecx, 0
  00c6f	0f b7 44 10 16	 movzx	 eax, WORD PTR [eax+edx+22]
  00c74	6b c8 1c	 imul	 ecx, eax, 28
  00c77	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00c7d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00c80	c1 f8 10	 sar	 eax, 16			; 00000010H
  00c83	89 45 d0	 mov	 DWORD PTR _mxspeed$14[ebp], eax

; 7616 : 		mzspeed = sides[lines[line].sidenum[0]].rowoffset >> FRACBITS;

  00c86	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00c8a	03 05 00 00 00
	00		 add	 eax, DWORD PTR _lines
  00c90	b9 02 00 00 00	 mov	 ecx, 2
  00c95	6b d1 00	 imul	 edx, ecx, 0
  00c98	0f b7 44 10 16	 movzx	 eax, WORD PTR [eax+edx+22]
  00c9d	6b c8 1c	 imul	 ecx, eax, 28
  00ca0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00ca6	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  00caa	c1 f8 10	 sar	 eax, 16			; 00000010H
  00cad	89 45 cc	 mov	 DWORD PTR _mzspeed$13[ebp], eax

; 7617 : 		mstartangle = lines[line].frontsector->floorheight >> FRACBITS;

  00cb0	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00cb4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00cba	8b 54 01 30	 mov	 edx, DWORD PTR [ecx+eax+48]
  00cbe	8b 02		 mov	 eax, DWORD PTR [edx]
  00cc0	c1 f8 10	 sar	 eax, 16			; 00000010H
  00cc3	89 45 c8	 mov	 DWORD PTR _mstartangle$12[ebp], eax

; 7618 : 		mmaxspeed = lines[line].frontsector->ceilingheight >> FRACBITS;

  00cc6	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00cca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00cd0	8b 54 01 30	 mov	 edx, DWORD PTR [ecx+eax+48]
  00cd4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00cd7	c1 f8 10	 sar	 eax, 16			; 00000010H
  00cda	89 45 c4	 mov	 DWORD PTR _mmaxspeed$11[ebp], eax

; 7619 : 
; 7620 : 		mstartangle %= 360;

  00cdd	8b 45 c8	 mov	 eax, DWORD PTR _mstartangle$12[ebp]
  00ce0	99		 cdq
  00ce1	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  00ce6	f7 f9		 idiv	 ecx
  00ce8	89 55 c8	 mov	 DWORD PTR _mstartangle$12[ebp], edx

; 7621 : 		mxspeed %= 360;

  00ceb	8b 45 d0	 mov	 eax, DWORD PTR _mxspeed$14[ebp]
  00cee	99		 cdq
  00cef	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  00cf4	f7 f9		 idiv	 ecx
  00cf6	89 55 d0	 mov	 DWORD PTR _mxspeed$14[ebp], edx

; 7622 : 		mzspeed %= 360;

  00cf9	8b 45 cc	 mov	 eax, DWORD PTR _mzspeed$13[ebp]
  00cfc	99		 cdq
  00cfd	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  00d02	f7 f9		 idiv	 ecx
  00d04	89 55 cc	 mov	 DWORD PTR _mzspeed$13[ebp], edx

; 7623 : 
; 7624 : 		if (cv_debug)

  00d07	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00d0e	74 77		 je	 SHORT $LN147@P_SpawnMap

; 7625 : 		{
; 7626 : 			CONS_Printf("Mace Chain (mapthing #%"PRIdS"):\n", mthingi);

  00d10	8b 45 ac	 mov	 eax, DWORD PTR _mthingi$5[ebp]
  00d13	50		 push	 eax
  00d14	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NKNBKNLA@Mace?5Chain?5?$CImapthing?5?$CD?$CFIu?$CJ?3?6@
  00d19	e8 00 00 00 00	 call	 _CONS_Printf
  00d1e	83 c4 08	 add	 esp, 8

; 7627 : 			CONS_Printf("Length is %d\n", mlength);

  00d21	8b 45 d8	 mov	 eax, DWORD PTR _mlength$16[ebp]
  00d24	50		 push	 eax
  00d25	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HPLDFMCL@Length?5is?5?$CFd?6@
  00d2a	e8 00 00 00 00	 call	 _CONS_Printf
  00d2f	83 c4 08	 add	 esp, 8

; 7628 : 			CONS_Printf("Speed is %d\n", mspeed);

  00d32	8b 45 d4	 mov	 eax, DWORD PTR _mspeed$15[ebp]
  00d35	50		 push	 eax
  00d36	68 00 00 00 00	 push	 OFFSET ??_C@_0N@POLBKJKB@Speed?5is?5?$CFd?6@
  00d3b	e8 00 00 00 00	 call	 _CONS_Printf
  00d40	83 c4 08	 add	 esp, 8

; 7629 : 			CONS_Printf("Xspeed is %d\n", mxspeed);

  00d43	8b 45 d0	 mov	 eax, DWORD PTR _mxspeed$14[ebp]
  00d46	50		 push	 eax
  00d47	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IHFCAILK@Xspeed?5is?5?$CFd?6@
  00d4c	e8 00 00 00 00	 call	 _CONS_Printf
  00d51	83 c4 08	 add	 esp, 8

; 7630 : 			CONS_Printf("Zspeed is %d\n", mzspeed);

  00d54	8b 45 cc	 mov	 eax, DWORD PTR _mzspeed$13[ebp]
  00d57	50		 push	 eax
  00d58	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GGDMMMBH@Zspeed?5is?5?$CFd?6@
  00d5d	e8 00 00 00 00	 call	 _CONS_Printf
  00d62	83 c4 08	 add	 esp, 8

; 7631 : 			CONS_Printf("startangle is %d\n", mstartangle);

  00d65	8b 45 c8	 mov	 eax, DWORD PTR _mstartangle$12[ebp]
  00d68	50		 push	 eax
  00d69	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FJLCCLED@startangle?5is?5?$CFd?6@
  00d6e	e8 00 00 00 00	 call	 _CONS_Printf
  00d73	83 c4 08	 add	 esp, 8

; 7632 : 			CONS_Printf("maxspeed is %d\n", mmaxspeed);

  00d76	8b 45 c4	 mov	 eax, DWORD PTR _mmaxspeed$11[ebp]
  00d79	50		 push	 eax
  00d7a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LMPIBDCF@maxspeed?5is?5?$CFd?6@
  00d7f	e8 00 00 00 00	 call	 _CONS_Printf
  00d84	83 c4 08	 add	 esp, 8
$LN147@P_SpawnMap:

; 7633 : 		}
; 7634 : 
; 7635 : 		mobj->lastlook = mspeed << 4;

  00d87	8b 45 d4	 mov	 eax, DWORD PTR _mspeed$15[ebp]
  00d8a	c1 e0 04	 shl	 eax, 4
  00d8d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00d90	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 7636 : 		mobj->movecount = mobj->lastlook;

  00d96	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00d99	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00d9c	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  00da2	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx

; 7637 : 		mobj->health = (FixedAngle(mzspeed*FRACUNIT)>>ANGLETOFINESHIFT) + (FixedAngle(mstartangle*FRACUNIT)>>ANGLETOFINESHIFT);

  00da8	8b 45 cc	 mov	 eax, DWORD PTR _mzspeed$13[ebp]
  00dab	c1 e0 10	 shl	 eax, 16			; 00000010H
  00dae	50		 push	 eax
  00daf	e8 00 00 00 00	 call	 _FixedAngle
  00db4	83 c4 04	 add	 esp, 4
  00db7	8b f0		 mov	 esi, eax
  00db9	c1 ee 13	 shr	 esi, 19			; 00000013H
  00dbc	8b 4d c8	 mov	 ecx, DWORD PTR _mstartangle$12[ebp]
  00dbf	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00dc2	51		 push	 ecx
  00dc3	e8 00 00 00 00	 call	 _FixedAngle
  00dc8	83 c4 04	 add	 esp, 4
  00dcb	c1 e8 13	 shr	 eax, 19			; 00000013H
  00dce	03 f0		 add	 esi, eax
  00dd0	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00dd3	89 b2 8c 00 00
	00		 mov	 DWORD PTR [edx+140], esi

; 7638 : 		mobj->threshold = (FixedAngle(mxspeed*FRACUNIT)>>ANGLETOFINESHIFT) + (FixedAngle(mstartangle*FRACUNIT)>>ANGLETOFINESHIFT);

  00dd9	8b 45 d0	 mov	 eax, DWORD PTR _mxspeed$14[ebp]
  00ddc	c1 e0 10	 shl	 eax, 16			; 00000010H
  00ddf	50		 push	 eax
  00de0	e8 00 00 00 00	 call	 _FixedAngle
  00de5	83 c4 04	 add	 esp, 4
  00de8	8b f0		 mov	 esi, eax
  00dea	c1 ee 13	 shr	 esi, 19			; 00000013H
  00ded	8b 4d c8	 mov	 ecx, DWORD PTR _mstartangle$12[ebp]
  00df0	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00df3	51		 push	 ecx
  00df4	e8 00 00 00 00	 call	 _FixedAngle
  00df9	83 c4 04	 add	 esp, 4
  00dfc	c1 e8 13	 shr	 eax, 19			; 00000013H
  00dff	03 f0		 add	 esi, eax
  00e01	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00e04	89 b2 a0 00 00
	00		 mov	 DWORD PTR [edx+160], esi

; 7639 : 		mobj->movefactor = mobj->threshold;

  00e0a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e0d	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00e10	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00e16	89 90 b8 00 00
	00		 mov	 DWORD PTR [eax+184], edx

; 7640 : 		mobj->friction = mmaxspeed;

  00e1c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e1f	8b 4d c4	 mov	 ecx, DWORD PTR _mmaxspeed$11[ebp]
  00e22	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 7641 : 
; 7642 : 		if (lines[line].flags & ML_NOCLIMB)

  00e28	6b 45 b0 4c	 imul	 eax, DWORD PTR _line$6[ebp], 76
  00e2c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00e32	0f bf 54 01 10	 movsx	 edx, WORD PTR [ecx+eax+16]
  00e37	83 e2 40	 and	 edx, 64			; 00000040H
  00e3a	74 12		 je	 SHORT $LN148@P_SpawnMap

; 7643 : 			mobj->flags |= MF_SLIDEME;

  00e3c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e3f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00e42	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00e48	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00e4b	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN148@P_SpawnMap:

; 7644 : 
; 7645 : 		mobj->reactiontime = 0;

  00e4e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e51	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 7646 : 
; 7647 : 		if (mthing->options & MTF_AMBUSH)

  00e5b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  00e5e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00e62	83 e1 08	 and	 ecx, 8
  00e65	74 0e		 je	 SHORT $LN149@P_SpawnMap

; 7648 : 		{
; 7649 : 			chainlink = MT_BIGMACECHAIN;

  00e67	c7 45 c0 8b 00
	00 00		 mov	 DWORD PTR _chainlink$10[ebp], 139 ; 0000008bH

; 7650 : 			macetype = MT_BIGMACE;

  00e6e	c7 45 bc 8d 00
	00 00		 mov	 DWORD PTR _macetype$9[ebp], 141 ; 0000008dH
$LN149@P_SpawnMap:

; 7651 : 		}
; 7652 : 
; 7653 : 		if (mobj->type == MT_HANGMACEPOINT || mobj->type == MT_SPINMACEPOINT)

  00e75	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e78	81 78 7c 88 00
	00 00		 cmp	 DWORD PTR [eax+124], 136 ; 00000088H
  00e7f	74 0c		 je	 SHORT $LN152@P_SpawnMap
  00e81	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e84	81 78 7c 89 00
	00 00		 cmp	 DWORD PTR [eax+124], 137 ; 00000089H
  00e8b	75 0c		 jne	 SHORT $LN150@P_SpawnMap
$LN152@P_SpawnMap:

; 7654 : 			firsttime = true;

  00e8d	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _firsttime$8[ebp], 1
  00e94	e9 a1 00 00 00	 jmp	 $LN151@P_SpawnMap
$LN150@P_SpawnMap:

; 7655 : 		else
; 7656 : 		{
; 7657 : 			firsttime = false;

  00e99	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _firsttime$8[ebp], 0

; 7658 : 
; 7659 : 			spawnee = P_SpawnMobj(mobj->x, mobj->y, mobj->z, macetype);

  00ea0	8b 45 bc	 mov	 eax, DWORD PTR _macetype$9[ebp]
  00ea3	50		 push	 eax
  00ea4	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00ea7	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00eaa	52		 push	 edx
  00eab	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00eae	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00eb1	51		 push	 ecx
  00eb2	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00eb5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00eb8	50		 push	 eax
  00eb9	e8 00 00 00 00	 call	 _P_SpawnMobj
  00ebe	83 c4 10	 add	 esp, 16			; 00000010H
  00ec1	89 45 b4	 mov	 DWORD PTR _spawnee$7[ebp], eax

; 7660 : 			P_SetTarget(&spawnee->target, mobj);

  00ec4	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ec7	50		 push	 eax
  00ec8	8b 4d b4	 mov	 ecx, DWORD PTR _spawnee$7[ebp]
  00ecb	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00ed1	51		 push	 ecx
  00ed2	e8 00 00 00 00	 call	 _P_SetTarget
  00ed7	83 c4 08	 add	 esp, 8

; 7661 : 
; 7662 : 			if (mobj->type == MT_SWINGMACEPOINT)

  00eda	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00edd	81 78 7c 87 00
	00 00		 cmp	 DWORD PTR [eax+124], 135 ; 00000087H
  00ee4	75 1d		 jne	 SHORT $LN153@P_SpawnMap

; 7663 : 				spawnee->movecount = FixedAngle(mstartangle*FRACUNIT)>>ANGLETOFINESHIFT;

  00ee6	8b 45 c8	 mov	 eax, DWORD PTR _mstartangle$12[ebp]
  00ee9	c1 e0 10	 shl	 eax, 16			; 00000010H
  00eec	50		 push	 eax
  00eed	e8 00 00 00 00	 call	 _FixedAngle
  00ef2	83 c4 04	 add	 esp, 4
  00ef5	c1 e8 13	 shr	 eax, 19			; 00000013H
  00ef8	8b 4d b4	 mov	 ecx, DWORD PTR _spawnee$7[ebp]
  00efb	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
  00f01	eb 0d		 jmp	 SHORT $LN154@P_SpawnMap
$LN153@P_SpawnMap:

; 7664 : 			else
; 7665 : 				spawnee->movecount = 0;

  00f03	8b 45 b4	 mov	 eax, DWORD PTR _spawnee$7[ebp]
  00f06	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0
$LN154@P_SpawnMap:

; 7666 : 
; 7667 : 			spawnee->threshold = FixedAngle(mstartangle*FRACUNIT)>>ANGLETOFINESHIFT;

  00f10	8b 45 c8	 mov	 eax, DWORD PTR _mstartangle$12[ebp]
  00f13	c1 e0 10	 shl	 eax, 16			; 00000010H
  00f16	50		 push	 eax
  00f17	e8 00 00 00 00	 call	 _FixedAngle
  00f1c	83 c4 04	 add	 esp, 4
  00f1f	c1 e8 13	 shr	 eax, 19			; 00000013H
  00f22	8b 4d b4	 mov	 ecx, DWORD PTR _spawnee$7[ebp]
  00f25	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 7668 : 			spawnee->reactiontime = mlength+1;

  00f2b	8b 45 d8	 mov	 eax, DWORD PTR _mlength$16[ebp]
  00f2e	83 c0 01	 add	 eax, 1
  00f31	8b 4d b4	 mov	 ecx, DWORD PTR _spawnee$7[ebp]
  00f34	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax
$LN151@P_SpawnMap:

; 7669 : 		}
; 7670 : 
; 7671 : 		while (mlength > 0)

  00f3a	83 7d d8 00	 cmp	 DWORD PTR _mlength$16[ebp], 0
  00f3e	0f 8e cd 00 00
	00		 jle	 $LN16@P_SpawnMap

; 7672 : 		{
; 7673 : 			spawnee = P_SpawnMobj(mobj->x, mobj->y, mobj->z, chainlink);

  00f44	8b 45 c0	 mov	 eax, DWORD PTR _chainlink$10[ebp]
  00f47	50		 push	 eax
  00f48	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00f4b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00f4e	52		 push	 edx
  00f4f	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f52	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00f55	51		 push	 ecx
  00f56	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  00f59	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00f5c	50		 push	 eax
  00f5d	e8 00 00 00 00	 call	 _P_SpawnMobj
  00f62	83 c4 10	 add	 esp, 16			; 00000010H
  00f65	89 45 b4	 mov	 DWORD PTR _spawnee$7[ebp], eax

; 7674 : 
; 7675 : 			P_SetTarget(&spawnee->target, mobj);

  00f68	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f6b	50		 push	 eax
  00f6c	8b 4d b4	 mov	 ecx, DWORD PTR _spawnee$7[ebp]
  00f6f	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00f75	51		 push	 ecx
  00f76	e8 00 00 00 00	 call	 _P_SetTarget
  00f7b	83 c4 08	 add	 esp, 8

; 7676 : 
; 7677 : 			if (mobj->type == MT_HANGMACEPOINT || mobj->type == MT_SWINGMACEPOINT)

  00f7e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f81	81 78 7c 88 00
	00 00		 cmp	 DWORD PTR [eax+124], 136 ; 00000088H
  00f88	74 0c		 je	 SHORT $LN157@P_SpawnMap
  00f8a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  00f8d	81 78 7c 87 00
	00 00		 cmp	 DWORD PTR [eax+124], 135 ; 00000087H
  00f94	75 1d		 jne	 SHORT $LN155@P_SpawnMap
$LN157@P_SpawnMap:

; 7678 : 				spawnee->movecount = FixedAngle(mstartangle*FRACUNIT)>>ANGLETOFINESHIFT;

  00f96	8b 45 c8	 mov	 eax, DWORD PTR _mstartangle$12[ebp]
  00f99	c1 e0 10	 shl	 eax, 16			; 00000010H
  00f9c	50		 push	 eax
  00f9d	e8 00 00 00 00	 call	 _FixedAngle
  00fa2	83 c4 04	 add	 esp, 4
  00fa5	c1 e8 13	 shr	 eax, 19			; 00000013H
  00fa8	8b 4d b4	 mov	 ecx, DWORD PTR _spawnee$7[ebp]
  00fab	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
  00fb1	eb 0d		 jmp	 SHORT $LN156@P_SpawnMap
$LN155@P_SpawnMap:

; 7679 : 			else
; 7680 : 				spawnee->movecount = 0;

  00fb3	8b 45 b4	 mov	 eax, DWORD PTR _spawnee$7[ebp]
  00fb6	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0
$LN156@P_SpawnMap:

; 7681 : 
; 7682 : 			spawnee->threshold = FixedAngle(mstartangle*FRACUNIT)>>ANGLETOFINESHIFT;

  00fc0	8b 45 c8	 mov	 eax, DWORD PTR _mstartangle$12[ebp]
  00fc3	c1 e0 10	 shl	 eax, 16			; 00000010H
  00fc6	50		 push	 eax
  00fc7	e8 00 00 00 00	 call	 _FixedAngle
  00fcc	83 c4 04	 add	 esp, 4
  00fcf	c1 e8 13	 shr	 eax, 19			; 00000013H
  00fd2	8b 4d b4	 mov	 ecx, DWORD PTR _spawnee$7[ebp]
  00fd5	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 7683 : 			spawnee->reactiontime = mlength;

  00fdb	8b 45 b4	 mov	 eax, DWORD PTR _spawnee$7[ebp]
  00fde	8b 4d d8	 mov	 ecx, DWORD PTR _mlength$16[ebp]
  00fe1	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx

; 7684 : 
; 7685 : 			if (firsttime)

  00fe7	83 7d b8 00	 cmp	 DWORD PTR _firsttime$8[ebp], 0
  00feb	74 16		 je	 SHORT $LN158@P_SpawnMap

; 7686 : 			{
; 7687 : 				// This is the outermost link in the chain
; 7688 : 				spawnee->flags |= MF_AMBUSH;

  00fed	8b 45 b4	 mov	 eax, DWORD PTR _spawnee$7[ebp]
  00ff0	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00ff3	83 c9 20	 or	 ecx, 32			; 00000020H
  00ff6	8b 55 b4	 mov	 edx, DWORD PTR _spawnee$7[ebp]
  00ff9	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 7689 : 				firsttime = false;

  00ffc	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _firsttime$8[ebp], 0
$LN158@P_SpawnMap:

; 7690 : 			}
; 7691 : 
; 7692 : 			mlength--;

  01003	8b 45 d8	 mov	 eax, DWORD PTR _mlength$16[ebp]
  01006	83 e8 01	 sub	 eax, 1
  01009	89 45 d8	 mov	 DWORD PTR _mlength$16[ebp], eax

; 7693 : 		}

  0100c	e9 29 ff ff ff	 jmp	 $LN151@P_SpawnMap
$LN16@P_SpawnMap:

; 7694 : 	}

  01011	e9 c0 00 00 00	 jmp	 $LN165@P_SpawnMap
$LN142@P_SpawnMap:

; 7695 : 	else if (mobj->type == MT_ROCKSPAWNER)

  01016	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01019	81 78 7c 1a 01
	00 00		 cmp	 DWORD PTR [eax+124], 282 ; 0000011aH
  01020	75 25		 jne	 SHORT $LN159@P_SpawnMap

; 7696 : 	{
; 7697 : 		mobj->threshold = mthing->angle;

  01022	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01025	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01029	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0102c	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 7698 : 		mobj->movecount = mthing->extrainfo;

  01032	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01035	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  01039	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0103c	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 7699 : 	}

  01042	e9 8f 00 00 00	 jmp	 $LN165@P_SpawnMap
$LN159@P_SpawnMap:

; 7700 : 	else if (mobj->type == MT_POPUPTURRET)

  01047	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0104a	83 78 7c 0c	 cmp	 DWORD PTR [eax+124], 12	; 0000000cH
  0104e	75 2c		 jne	 SHORT $LN161@P_SpawnMap

; 7701 : 	{
; 7702 : 		if (mthing->angle)

  01050	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01053	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01057	85 c9		 test	 ecx, ecx
  01059	74 12		 je	 SHORT $LN163@P_SpawnMap

; 7703 : 			mobj->threshold = mthing->angle*NEWTICRATERATIO;

  0105b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0105e	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01062	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01065	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx
  0106b	eb 0d		 jmp	 SHORT $LN164@P_SpawnMap
$LN163@P_SpawnMap:

; 7704 : 		else
; 7705 : 			mobj->threshold = (TICRATE*2)-1;

  0106d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01070	c7 80 a0 00 00
	00 45 00 00 00	 mov	 DWORD PTR [eax+160], 69	; 00000045H
$LN164@P_SpawnMap:

; 7706 : 	}

  0107a	eb 5a		 jmp	 SHORT $LN165@P_SpawnMap
$LN161@P_SpawnMap:

; 7707 : 	else if (mobj->type == MT_NIGHTSBUMPER)

  0107c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0107f	81 78 7c f7 00
	00 00		 cmp	 DWORD PTR [eax+124], 247 ; 000000f7H
  01086	75 4e		 jne	 SHORT $LN165@P_SpawnMap

; 7708 : 	{
; 7709 : 		// Lower 4 bits specify the angle of
; 7710 : 		// the bumper in 30 degree increments.
; 7711 : 		mobj->threshold = (mthing->options & 15) % 12; // It loops over, etc

  01088	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0108b	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0108f	83 e0 0f	 and	 eax, 15			; 0000000fH
  01092	99		 cdq
  01093	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01098	f7 f9		 idiv	 ecx
  0109a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0109d	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 7712 : 		P_SetMobjState(mobj, mobj->info->spawnstate+mobj->threshold);

  010a3	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  010a6	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  010ac	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  010af	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  010b2	03 90 a0 00 00
	00		 add	 edx, DWORD PTR [eax+160]
  010b8	52		 push	 edx
  010b9	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  010bc	51		 push	 ecx
  010bd	e8 00 00 00 00	 call	 _P_SetMobjState
  010c2	83 c4 08	 add	 esp, 8

; 7713 : 
; 7714 : 		// you can shut up now, OBJECTFLIP.  And all of the other options, for that matter.
; 7715 : 		mthing->options &= ~0xF;

  010c5	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  010c8	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  010cc	83 e1 f0	 and	 ecx, -16		; fffffff0H
  010cf	8b 55 08	 mov	 edx, DWORD PTR _mthing$[ebp]
  010d2	66 89 4a 08	 mov	 WORD PTR [edx+8], cx
$LN165@P_SpawnMap:

; 7716 : 	}
; 7717 : 
; 7718 : 	if (mobj->flags & MF_BOSS)

  010d6	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  010d9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  010dc	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  010e2	74 5a		 je	 SHORT $LN166@P_SpawnMap

; 7719 : 	{
; 7720 : 		if (mthing->options & MTF_OBJECTSPECIAL) // No egg trap for this boss

  010e4	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  010e7	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  010eb	83 e1 04	 and	 ecx, 4
  010ee	74 18		 je	 SHORT $LN168@P_SpawnMap

; 7721 : 			mobj->flags2 |= MF2_BOSSNOTRAP;

  010f0	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  010f3	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  010f9	81 c9 00 40 00
	00		 or	 ecx, 16384		; 00004000H
  010ff	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01102	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN168@P_SpawnMap:

; 7722 : 
; 7723 : 		z = R_PointInSubsector(x, y)->sector->floorheight + ((mthing->options >> (ZSHIFT)) << FRACBITS);

  01108	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  0110b	50		 push	 eax
  0110c	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  0110f	51		 push	 ecx
  01110	e8 00 00 00 00	 call	 _R_PointInSubsector
  01115	83 c4 08	 add	 esp, 8
  01118	8b 10		 mov	 edx, DWORD PTR [eax]
  0111a	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0111d	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01121	c1 f9 04	 sar	 ecx, 4
  01124	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01127	03 0a		 add	 ecx, DWORD PTR [edx]
  01129	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx

; 7724 : 
; 7725 : 		mthing->z = (INT16)(z>>FRACBITS);

  0112c	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  0112f	c1 f8 10	 sar	 eax, 16			; 00000010H
  01132	8b 4d 08	 mov	 ecx, DWORD PTR _mthing$[ebp]
  01135	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 7726 : 	}

  01139	e9 95 00 00 00	 jmp	 $LN174@P_SpawnMap
$LN166@P_SpawnMap:

; 7727 : 	else if (mobj->type == MT_EGGCAPSULE)

  0113e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01141	81 78 7c 00 01
	00 00		 cmp	 DWORD PTR [eax+124], 256 ; 00000100H
  01148	75 2b		 jne	 SHORT $LN169@P_SpawnMap

; 7728 : 	{
; 7729 : 		mobj->health = mthing->angle & 1023;

  0114a	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0114d	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01151	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  01157	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0115a	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 7730 : 		mobj->threshold = mthing->angle >> 10;

  01160	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01163	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01167	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  0116a	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0116d	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 7731 : 	}

  01173	eb 5e		 jmp	 SHORT $LN174@P_SpawnMap
$LN169@P_SpawnMap:

; 7732 : 	else if (mobj->type == MT_TUBEWAYPOINT)

  01175	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01178	81 78 7c 06 01
	00 00		 cmp	 DWORD PTR [eax+124], 262 ; 00000106H
  0117f	75 2b		 jne	 SHORT $LN171@P_SpawnMap

; 7733 : 	{
; 7734 : 		mobj->health = mthing->angle & 255;

  01181	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01184	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01188	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0118e	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01191	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 7735 : 		mobj->threshold = mthing->angle >> 8;

  01197	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0119a	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0119e	c1 f9 08	 sar	 ecx, 8
  011a1	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  011a4	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 7736 : 	}

  011aa	eb 27		 jmp	 SHORT $LN174@P_SpawnMap
$LN171@P_SpawnMap:

; 7737 : 	else if (mobj->type == MT_NIGHTSDRONE)

  011ac	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  011af	81 78 7c f4 00
	00 00		 cmp	 DWORD PTR [eax+124], 244 ; 000000f4H
  011b6	75 1b		 jne	 SHORT $LN174@P_SpawnMap

; 7738 : 	{
; 7739 : 		if (mthing->angle > 0)

  011b8	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  011bb	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  011bf	85 c9		 test	 ecx, ecx
  011c1	7e 10		 jle	 SHORT $LN174@P_SpawnMap

; 7740 : 			mobj->health = mthing->angle;

  011c3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  011c6	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  011ca	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  011cd	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN174@P_SpawnMap:

; 7741 : 	}
; 7742 : 
; 7743 : 	// Special condition for the 2nd boss.
; 7744 : 	if (mobj->type == MT_EGGMOBILE2)

  011d3	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  011d6	83 78 7c 1f	 cmp	 DWORD PTR [eax+124], 31	; 0000001fH
  011da	75 17		 jne	 SHORT $LN175@P_SpawnMap

; 7745 : 		mobj->watertop = mobj->info->speed;

  011dc	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  011df	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  011e5	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  011e8	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  011eb	89 82 c0 00 00
	00		 mov	 DWORD PTR [edx+192], eax
  011f1	eb 11		 jmp	 SHORT $LN177@P_SpawnMap
$LN175@P_SpawnMap:

; 7746 : 	else if (mobj->type == MT_CHAOSSPAWNER)

  011f3	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  011f6	81 78 7c 01 01
	00 00		 cmp	 DWORD PTR [eax+124], 257 ; 00000101H
  011fd	75 05		 jne	 SHORT $LN177@P_SpawnMap

; 7747 : 	{
; 7748 : #ifndef CHAOSISNOTDEADYET
; 7749 : 		return;

  011ff	e9 4b 08 00 00	 jmp	 $LN1@P_SpawnMap
$LN177@P_SpawnMap:

; 7750 : #else
; 7751 : 		if (gametype != GT_CHAOS)
; 7752 : 			return;
; 7753 : 		mobj->fuse = P_Random()*2;
; 7754 : #endif
; 7755 : 	}
; 7756 : 
; 7757 : 	if (i == MT_AXIS || i == MT_AXISTRANSFER || i == MT_AXISTRANSFERLINE) // Axis Points

  01204	81 7d fc f1 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 241	; 000000f1H
  0120b	74 16		 je	 SHORT $LN180@P_SpawnMap
  0120d	81 7d fc f2 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 242	; 000000f2H
  01214	74 0d		 je	 SHORT $LN180@P_SpawnMap
  01216	81 7d fc f3 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 243	; 000000f3H
  0121d	0f 85 99 00 00
	00		 jne	 $LN178@P_SpawnMap
$LN180@P_SpawnMap:

; 7758 : 	{
; 7759 : 		// Mare it belongs to
; 7760 : 		if (mthing->options >> 10)

  01223	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01226	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0122a	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  0122d	85 c9		 test	 ecx, ecx
  0122f	74 13		 je	 SHORT $LN181@P_SpawnMap

; 7761 : 			mobj->threshold = mthing->options >> 10;

  01231	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01234	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01238	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  0123b	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0123e	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx
$LN181@P_SpawnMap:

; 7762 : 
; 7763 : 		// # in the mare
; 7764 : 		mobj->health = mthing->options & 1023;

  01244	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01247	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0124b	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  01251	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01254	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 7765 : 
; 7766 : 		mobj->flags2 |= MF2_AXIS;

  0125a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0125d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01263	83 c9 02	 or	 ecx, 2
  01266	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01269	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 7767 : 
; 7768 : 		if (i == MT_AXIS)

  0126f	81 7d fc f1 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 241	; 000000f1H
  01276	75 3f		 jne	 SHORT $LN184@P_SpawnMap

; 7769 : 		{
; 7770 : 			// Inverted if uppermost bit is set
; 7771 : 			if (mthing->angle & 16384)

  01278	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0127b	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0127f	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  01285	74 0f		 je	 SHORT $LN183@P_SpawnMap

; 7772 : 				mobj->flags |= MF_AMBUSH;

  01287	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0128a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0128d	83 c9 20	 or	 ecx, 32			; 00000020H
  01290	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01293	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN183@P_SpawnMap:

; 7773 : 
; 7774 : 			if (mthing->angle > 0)

  01296	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01299	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0129d	85 c9		 test	 ecx, ecx
  0129f	7e 16		 jle	 SHORT $LN184@P_SpawnMap

; 7775 : 				mobj->radius = (mthing->angle & 16383)*FRACUNIT;

  012a1	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  012a4	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  012a8	81 e1 ff 3f 00
	00		 and	 ecx, 16383		; 00003fffH
  012ae	c1 e1 10	 shl	 ecx, 16			; 00000010H
  012b1	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  012b4	89 4a 40	 mov	 DWORD PTR [edx+64], ecx
$LN184@P_SpawnMap:

; 7776 : 		}
; 7777 : 	}

  012b7	e9 78 02 00 00	 jmp	 $LN199@P_SpawnMap
$LN178@P_SpawnMap:

; 7778 : 	else if (i == MT_EMMY)

  012bc	83 7d fc 32	 cmp	 DWORD PTR _i$[ebp], 50	; 00000032H
  012c0	75 5f		 jne	 SHORT $LN185@P_SpawnMap

; 7779 : 	{
; 7780 : 		if (timeattacking)

  012c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  012c9	74 16		 je	 SHORT $LN187@P_SpawnMap

; 7781 : 		{
; 7782 : 			P_SetMobjState (mobj, S_DISS);

  012cb	68 4f 06 00 00	 push	 1615			; 0000064fH
  012d0	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  012d3	50		 push	 eax
  012d4	e8 00 00 00 00	 call	 _P_SetMobjState
  012d9	83 c4 08	 add	 esp, 8

; 7783 : 			return;

  012dc	e9 6e 07 00 00	 jmp	 $LN1@P_SpawnMap
$LN187@P_SpawnMap:

; 7784 : 		}
; 7785 : 
; 7786 : 		mobj->health = 1 << tokenbits++;

  012e1	b8 01 00 00 00	 mov	 eax, 1
  012e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tokenbits
  012ec	d3 e0		 shl	 eax, cl
  012ee	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  012f1	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax
  012f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tokenbits
  012fd	83 c2 01	 add	 edx, 1
  01300	89 15 00 00 00
	00		 mov	 DWORD PTR _tokenbits, edx

; 7787 : 		P_SpawnMobj(x, y, z, MT_TOKEN);

  01306	6a 33		 push	 51			; 00000033H
  01308	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  0130b	50		 push	 eax
  0130c	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  0130f	51		 push	 ecx
  01310	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  01313	52		 push	 edx
  01314	e8 00 00 00 00	 call	 _P_SpawnMobj
  01319	83 c4 10	 add	 esp, 16			; 00000010H

; 7788 : 	}

  0131c	e9 13 02 00 00	 jmp	 $LN199@P_SpawnMap
$LN185@P_SpawnMap:

; 7789 : 	else if (i == MT_EGGMOBILE && mthing->options & MTF_AMBUSH)

  01321	83 7d fc 1d	 cmp	 DWORD PTR _i$[ebp], 29	; 0000001dH
  01325	0f 85 f9 00 00
	00		 jne	 $LN188@P_SpawnMap
  0132b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0132e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01332	83 e1 08	 and	 ecx, 8
  01335	0f 84 e9 00 00
	00		 je	 $LN188@P_SpawnMap

; 7790 : 	{
; 7791 : 		mobj_t *spikemobj;
; 7792 : 		spikemobj = P_SpawnMobj(x, y, z, MT_SPIKEBALL);

  0133b	6a 45		 push	 69			; 00000045H
  0133d	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  01340	50		 push	 eax
  01341	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  01344	51		 push	 ecx
  01345	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  01348	52		 push	 edx
  01349	e8 00 00 00 00	 call	 _P_SpawnMobj
  0134e	83 c4 10	 add	 esp, 16			; 00000010H
  01351	89 45 a8	 mov	 DWORD PTR _spikemobj$4[ebp], eax

; 7793 : 		P_SetTarget(&spikemobj->target, mobj);

  01354	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01357	50		 push	 eax
  01358	8b 4d a8	 mov	 ecx, DWORD PTR _spikemobj$4[ebp]
  0135b	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  01361	51		 push	 ecx
  01362	e8 00 00 00 00	 call	 _P_SetTarget
  01367	83 c4 08	 add	 esp, 8

; 7794 : 		spikemobj->angle = 0;

  0136a	8b 45 a8	 mov	 eax, DWORD PTR _spikemobj$4[ebp]
  0136d	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 7795 : 		spikemobj = P_SpawnMobj(x, y, z, MT_SPIKEBALL);

  01374	6a 45		 push	 69			; 00000045H
  01376	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  01379	50		 push	 eax
  0137a	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  0137d	51		 push	 ecx
  0137e	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  01381	52		 push	 edx
  01382	e8 00 00 00 00	 call	 _P_SpawnMobj
  01387	83 c4 10	 add	 esp, 16			; 00000010H
  0138a	89 45 a8	 mov	 DWORD PTR _spikemobj$4[ebp], eax

; 7796 : 		P_SetTarget(&spikemobj->target, mobj);

  0138d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01390	50		 push	 eax
  01391	8b 4d a8	 mov	 ecx, DWORD PTR _spikemobj$4[ebp]
  01394	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0139a	51		 push	 ecx
  0139b	e8 00 00 00 00	 call	 _P_SetTarget
  013a0	83 c4 08	 add	 esp, 8

; 7797 : 		spikemobj->angle = ANGLE_90;

  013a3	8b 45 a8	 mov	 eax, DWORD PTR _spikemobj$4[ebp]
  013a6	c7 40 24 00 00
	00 40		 mov	 DWORD PTR [eax+36], 1073741824 ; 40000000H

; 7798 : 		spikemobj = P_SpawnMobj(x, y, z, MT_SPIKEBALL);

  013ad	6a 45		 push	 69			; 00000045H
  013af	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  013b2	50		 push	 eax
  013b3	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  013b6	51		 push	 ecx
  013b7	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  013ba	52		 push	 edx
  013bb	e8 00 00 00 00	 call	 _P_SpawnMobj
  013c0	83 c4 10	 add	 esp, 16			; 00000010H
  013c3	89 45 a8	 mov	 DWORD PTR _spikemobj$4[ebp], eax

; 7799 : 		P_SetTarget(&spikemobj->target, mobj);

  013c6	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  013c9	50		 push	 eax
  013ca	8b 4d a8	 mov	 ecx, DWORD PTR _spikemobj$4[ebp]
  013cd	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  013d3	51		 push	 ecx
  013d4	e8 00 00 00 00	 call	 _P_SetTarget
  013d9	83 c4 08	 add	 esp, 8

; 7800 : 		spikemobj->angle = ANGLE_180;

  013dc	8b 45 a8	 mov	 eax, DWORD PTR _spikemobj$4[ebp]
  013df	c7 40 24 00 00
	00 80		 mov	 DWORD PTR [eax+36], -2147483648 ; 80000000H

; 7801 : 		spikemobj = P_SpawnMobj(x, y, z, MT_SPIKEBALL);

  013e6	6a 45		 push	 69			; 00000045H
  013e8	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  013eb	50		 push	 eax
  013ec	8b 4d f0	 mov	 ecx, DWORD PTR _y$[ebp]
  013ef	51		 push	 ecx
  013f0	8b 55 f4	 mov	 edx, DWORD PTR _x$[ebp]
  013f3	52		 push	 edx
  013f4	e8 00 00 00 00	 call	 _P_SpawnMobj
  013f9	83 c4 10	 add	 esp, 16			; 00000010H
  013fc	89 45 a8	 mov	 DWORD PTR _spikemobj$4[ebp], eax

; 7802 : 		P_SetTarget(&spikemobj->target, mobj);

  013ff	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01402	50		 push	 eax
  01403	8b 4d a8	 mov	 ecx, DWORD PTR _spikemobj$4[ebp]
  01406	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0140c	51		 push	 ecx
  0140d	e8 00 00 00 00	 call	 _P_SetTarget
  01412	83 c4 08	 add	 esp, 8

; 7803 : 		spikemobj->angle = ANGLE_270;

  01415	8b 45 a8	 mov	 eax, DWORD PTR _spikemobj$4[ebp]
  01418	c7 40 24 00 00
	00 c0		 mov	 DWORD PTR [eax+36], -1073741824 ; c0000000H

; 7804 : 	}

  0141f	e9 10 01 00 00	 jmp	 $LN199@P_SpawnMap
$LN188@P_SpawnMap:

; 7805 : 	else if (i == MT_STARPOST)

  01424	83 7d fc 4a	 cmp	 DWORD PTR _i$[ebp], 74	; 0000004aH
  01428	0f 85 b8 00 00
	00		 jne	 $LN190@P_SpawnMap

; 7806 : 	{
; 7807 : 		thinker_t *th;
; 7808 : 		mobj_t *mo2;
; 7809 : 		boolean foundanother = false;

  0142e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _foundanother$1[ebp], 0

; 7810 : 		mobj->health = (mthing->angle / 360) + 1;

  01435	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01438	0f bf 40 04	 movsx	 eax, WORD PTR [eax+4]
  0143c	99		 cdq
  0143d	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  01442	f7 f9		 idiv	 ecx
  01444	83 c0 01	 add	 eax, 1
  01447	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0144a	89 82 8c 00 00
	00		 mov	 DWORD PTR [edx+140], eax

; 7811 : 
; 7812 : 		if (timeattacking)

  01450	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  01457	74 16		 je	 SHORT $LN192@P_SpawnMap

; 7813 : 		{
; 7814 : 			P_SetMobjState (mobj, S_DISS);

  01459	68 4f 06 00 00	 push	 1615			; 0000064fH
  0145e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01461	50		 push	 eax
  01462	e8 00 00 00 00	 call	 _P_SetMobjState
  01467	83 c4 08	 add	 esp, 8

; 7815 : 			return;

  0146a	e9 e0 05 00 00	 jmp	 $LN1@P_SpawnMap
$LN192@P_SpawnMap:

; 7816 : 		}
; 7817 : 
; 7818 : 		// See if other starposts exist in this level that have the same value.
; 7819 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0146f	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  01474	89 45 a4	 mov	 DWORD PTR _th$3[ebp], eax
  01477	eb 09		 jmp	 SHORT $LN19@P_SpawnMap
$LN17@P_SpawnMap:
  01479	8b 45 a4	 mov	 eax, DWORD PTR _th$3[ebp]
  0147c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0147f	89 4d a4	 mov	 DWORD PTR _th$3[ebp], ecx
$LN19@P_SpawnMap:
  01482	81 7d a4 00 00
	00 00		 cmp	 DWORD PTR _th$3[ebp], OFFSET _thinkercap
  01489	74 46		 je	 SHORT $LN18@P_SpawnMap

; 7820 : 		{
; 7821 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  0148b	8b 45 a4	 mov	 eax, DWORD PTR _th$3[ebp]
  0148e	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  01495	74 02		 je	 SHORT $LN193@P_SpawnMap

; 7822 : 				continue;

  01497	eb e0		 jmp	 SHORT $LN17@P_SpawnMap
$LN193@P_SpawnMap:

; 7823 : 
; 7824 : 			mo2 = (mobj_t *)th;

  01499	8b 45 a4	 mov	 eax, DWORD PTR _th$3[ebp]
  0149c	89 45 a0	 mov	 DWORD PTR _mo2$2[ebp], eax

; 7825 : 
; 7826 : 			if (mo2 == mobj)

  0149f	8b 45 a0	 mov	 eax, DWORD PTR _mo2$2[ebp]
  014a2	3b 45 f8	 cmp	 eax, DWORD PTR _mobj$[ebp]
  014a5	75 02		 jne	 SHORT $LN194@P_SpawnMap

; 7827 : 				continue;

  014a7	eb d0		 jmp	 SHORT $LN17@P_SpawnMap
$LN194@P_SpawnMap:

; 7828 : 
; 7829 : 			if (mo2->type == MT_STARPOST && mo2->health == mobj->health)

  014a9	8b 45 a0	 mov	 eax, DWORD PTR _mo2$2[ebp]
  014ac	83 78 7c 4a	 cmp	 DWORD PTR [eax+124], 74	; 0000004aH
  014b0	75 1d		 jne	 SHORT $LN195@P_SpawnMap
  014b2	8b 45 a0	 mov	 eax, DWORD PTR _mo2$2[ebp]
  014b5	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  014b8	8b 90 8c 00 00
	00		 mov	 edx, DWORD PTR [eax+140]
  014be	3b 91 8c 00 00
	00		 cmp	 edx, DWORD PTR [ecx+140]
  014c4	75 09		 jne	 SHORT $LN195@P_SpawnMap

; 7830 : 			{
; 7831 : 				foundanother = true;

  014c6	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR _foundanother$1[ebp], 1

; 7832 : 				break;

  014cd	eb 02		 jmp	 SHORT $LN18@P_SpawnMap
$LN195@P_SpawnMap:

; 7833 : 			}
; 7834 : 		}

  014cf	eb a8		 jmp	 SHORT $LN17@P_SpawnMap
$LN18@P_SpawnMap:

; 7835 : 
; 7836 : 		if (!foundanother)

  014d1	83 7d 9c 00	 cmp	 DWORD PTR _foundanother$1[ebp], 0
  014d5	75 0d		 jne	 SHORT $LN196@P_SpawnMap

; 7837 : 			numstarposts++;

  014d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _numstarposts
  014dc	83 c0 01	 add	 eax, 1
  014df	a3 00 00 00 00	 mov	 DWORD PTR _numstarposts, eax
$LN196@P_SpawnMap:

; 7838 : 	}

  014e4	eb 4e		 jmp	 SHORT $LN199@P_SpawnMap
$LN190@P_SpawnMap:

; 7839 : 	else if (i == MT_FLOORSPIKE || i == MT_CEILINGSPIKE)

  014e6	83 7d fc 49	 cmp	 DWORD PTR _i$[ebp], 73	; 00000049H
  014ea	74 06		 je	 SHORT $LN198@P_SpawnMap
  014ec	83 7d fc 48	 cmp	 DWORD PTR _i$[ebp], 72	; 00000048H
  014f0	75 42		 jne	 SHORT $LN199@P_SpawnMap
$LN198@P_SpawnMap:

; 7840 : 	{
; 7841 : 		// Use per-thing collision for spikes if the deaf flag is checked.
; 7842 : 		if (mthing->options & MTF_AMBUSH)

  014f2	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  014f5	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  014f9	83 e1 08	 and	 ecx, 8
  014fc	74 36		 je	 SHORT $LN199@P_SpawnMap

; 7843 : 		{
; 7844 : 			P_UnsetThingPosition(mobj);

  014fe	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01501	50		 push	 eax
  01502	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  01507	83 c4 04	 add	 esp, 4

; 7845 : 			mobj->flags &= ~MF_NOBLOCKMAP;

  0150a	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0150d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01510	83 e1 ef	 and	 ecx, -17		; ffffffefH
  01513	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01516	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 7846 : 			mobj->flags |= MF_SOLID;

  01519	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0151c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0151f	83 c9 02	 or	 ecx, 2
  01522	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01525	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 7847 : 			P_SetThingPosition(mobj);

  01528	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0152b	50		 push	 eax
  0152c	e8 00 00 00 00	 call	 _P_SetThingPosition
  01531	83 c4 04	 add	 esp, 4
$LN199@P_SpawnMap:

; 7848 : 		}
; 7849 : 	}
; 7850 : 
; 7851 : 	//count 10 ring boxes into the number of rings equation too.
; 7852 : 	if (i == MT_SUPERRINGBOX)

  01534	83 7d fc 4e	 cmp	 DWORD PTR _i$[ebp], 78	; 0000004eH
  01538	75 0d		 jne	 SHORT $LN200@P_SpawnMap

; 7853 : 		nummaprings += 10;

  0153a	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummaprings
  0153f	83 c0 0a	 add	 eax, 10			; 0000000aH
  01542	a3 00 00 00 00	 mov	 DWORD PTR _nummaprings, eax
$LN200@P_SpawnMap:

; 7854 : 
; 7855 : 	if (i == MT_BIGTUMBLEWEED || i == MT_LITTLETUMBLEWEED)

  01547	81 7d fc 8f 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 143	; 0000008fH
  0154e	74 0d		 je	 SHORT $LN202@P_SpawnMap
  01550	81 7d fc 90 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 144	; 00000090H
  01557	0f 85 9e 00 00
	00		 jne	 $LN207@P_SpawnMap
$LN202@P_SpawnMap:

; 7856 : 	{
; 7857 : 		if (mthing->options & MTF_AMBUSH)

  0155d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01560	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01564	83 e1 08	 and	 ecx, 8
  01567	0f 84 8e 00 00
	00		 je	 $LN207@P_SpawnMap

; 7858 : 		{
; 7859 : 			mobj->momz += 16*FRACUNIT;

  0156d	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01570	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01573	81 c1 00 00 10
	00		 add	 ecx, 1048576		; 00100000H
  01579	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  0157c	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 7860 : 
; 7861 : 			if (P_Random() % 2)

  0157f	e8 00 00 00 00	 call	 _P_Random
  01584	0f b6 c0	 movzx	 eax, al
  01587	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0158c	79 05		 jns	 SHORT $LN239@P_SpawnMap
  0158e	48		 dec	 eax
  0158f	83 c8 fe	 or	 eax, -2			; fffffffeH
  01592	40		 inc	 eax
$LN239@P_SpawnMap:
  01593	85 c0		 test	 eax, eax
  01595	74 14		 je	 SHORT $LN204@P_SpawnMap

; 7862 : 				mobj->momx += 16*FRACUNIT;

  01597	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0159a	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0159d	81 c1 00 00 10
	00		 add	 ecx, 1048576		; 00100000H
  015a3	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  015a6	89 4a 48	 mov	 DWORD PTR [edx+72], ecx
  015a9	eb 12		 jmp	 SHORT $LN205@P_SpawnMap
$LN204@P_SpawnMap:

; 7863 : 			else
; 7864 : 				mobj->momx -= 16*FRACUNIT;

  015ab	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  015ae	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  015b1	81 e9 00 00 10
	00		 sub	 ecx, 1048576		; 00100000H
  015b7	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  015ba	89 4a 48	 mov	 DWORD PTR [edx+72], ecx
$LN205@P_SpawnMap:

; 7865 : 
; 7866 : 			if (P_Random() % 2)

  015bd	e8 00 00 00 00	 call	 _P_Random
  015c2	0f b6 c0	 movzx	 eax, al
  015c5	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  015ca	79 05		 jns	 SHORT $LN240@P_SpawnMap
  015cc	48		 dec	 eax
  015cd	83 c8 fe	 or	 eax, -2			; fffffffeH
  015d0	40		 inc	 eax
$LN240@P_SpawnMap:
  015d1	85 c0		 test	 eax, eax
  015d3	74 14		 je	 SHORT $LN206@P_SpawnMap

; 7867 : 				mobj->momy += 16*FRACUNIT;

  015d5	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  015d8	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  015db	81 c1 00 00 10
	00		 add	 ecx, 1048576		; 00100000H
  015e1	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  015e4	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
  015e7	eb 12		 jmp	 SHORT $LN207@P_SpawnMap
$LN206@P_SpawnMap:

; 7868 : 			else
; 7869 : 				mobj->momy -= 16*FRACUNIT;

  015e9	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  015ec	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  015ef	81 e9 00 00 10
	00		 sub	 ecx, 1048576		; 00100000H
  015f5	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  015f8	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
$LN207@P_SpawnMap:

; 7870 : 		}
; 7871 : 	}
; 7872 : 
; 7873 : 	// CTF flag pointers
; 7874 : 	if (i == MT_REDFLAG)

  015fb	83 7d fc 34	 cmp	 DWORD PTR _i$[ebp], 52	; 00000034H
  015ff	75 2f		 jne	 SHORT $LN210@P_SpawnMap

; 7875 : 	{
; 7876 : 		if (redflag)

  01601	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _redflag, 0
  01608	74 0f		 je	 SHORT $LN209@P_SpawnMap

; 7877 : 			I_Error("Only one flag per team allowed in CTF!");

  0160a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FDNKKANJ@Only?5one?5flag?5per?5team?5allowed?5@
  0160f	e8 00 00 00 00	 call	 _I_Error
  01614	83 c4 04	 add	 esp, 4
  01617	eb 17		 jmp	 SHORT $LN210@P_SpawnMap
$LN209@P_SpawnMap:

; 7878 : 		else
; 7879 : 		{
; 7880 : 			redflag = mobj;

  01619	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0161c	a3 00 00 00 00	 mov	 DWORD PTR _redflag, eax

; 7881 : 			rflagpoint = mobj->spawnpoint;

  01621	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01624	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0162a	89 0d 00 00 00
	00		 mov	 DWORD PTR _rflagpoint, ecx
$LN210@P_SpawnMap:

; 7882 : 		}
; 7883 : 	}
; 7884 : 	if (i == MT_BLUEFLAG)

  01630	83 7d fc 35	 cmp	 DWORD PTR _i$[ebp], 53	; 00000035H
  01634	75 2f		 jne	 SHORT $LN213@P_SpawnMap

; 7885 : 	{
; 7886 : 		if (blueflag)

  01636	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _blueflag, 0
  0163d	74 0f		 je	 SHORT $LN212@P_SpawnMap

; 7887 : 			I_Error("Only one flag per team allowed in CTF!");

  0163f	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FDNKKANJ@Only?5one?5flag?5per?5team?5allowed?5@
  01644	e8 00 00 00 00	 call	 _I_Error
  01649	83 c4 04	 add	 esp, 4
  0164c	eb 17		 jmp	 SHORT $LN213@P_SpawnMap
$LN212@P_SpawnMap:

; 7888 : 		else
; 7889 : 		{
; 7890 : 			blueflag = mobj;

  0164e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01651	a3 00 00 00 00	 mov	 DWORD PTR _blueflag, eax

; 7891 : 			bflagpoint = mobj->spawnpoint;

  01656	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01659	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0165f	89 0d 00 00 00
	00		 mov	 DWORD PTR _bflagpoint, ecx
$LN213@P_SpawnMap:

; 7892 : 		}
; 7893 : 	}
; 7894 : 
; 7895 : 	// special push/pull stuff
; 7896 : 	if (i == MT_PUSH || i == MT_PULL)

  01665	81 7d fc 07 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 263	; 00000107H
  0166c	74 0d		 je	 SHORT $LN215@P_SpawnMap
  0166e	81 7d fc 08 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 264	; 00000108H
  01675	0f 85 97 00 00
	00		 jne	 $LN220@P_SpawnMap
$LN215@P_SpawnMap:

; 7897 : 	{
; 7898 : 		mobj->health = 0; // Default behaviour: pushing uses XY, fading uses XYZ

  0167b	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0167e	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 7899 : 
; 7900 : 		if (mthing->options & MTF_AMBUSH)

  01688	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0168b	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0168f	83 e1 08	 and	 ecx, 8
  01692	74 15		 je	 SHORT $LN216@P_SpawnMap

; 7901 : 			mobj->health |= 1; // If ambush is set, push using XYZ

  01694	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01697	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0169d	83 c9 01	 or	 ecx, 1
  016a0	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  016a3	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN216@P_SpawnMap:

; 7902 : 		if (mthing->options & MTF_OBJECTSPECIAL)

  016a9	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  016ac	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  016b0	83 e1 04	 and	 ecx, 4
  016b3	74 15		 je	 SHORT $LN217@P_SpawnMap

; 7903 : 			mobj->health |= 2; // If object special is set, fade using XY

  016b5	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  016b8	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  016be	83 c9 02	 or	 ecx, 2
  016c1	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  016c4	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN217@P_SpawnMap:

; 7904 : 
; 7905 : 		if (G_IsSpecialStage(gamemap))

  016ca	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  016d1	50		 push	 eax
  016d2	e8 00 00 00 00	 call	 _G_IsSpecialStage
  016d7	83 c4 04	 add	 esp, 4
  016da	85 c0		 test	 eax, eax
  016dc	74 34		 je	 SHORT $LN220@P_SpawnMap

; 7906 : 		{
; 7907 : 			if (i == MT_PUSH)

  016de	81 7d fc 07 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 263	; 00000107H
  016e5	75 11		 jne	 SHORT $LN219@P_SpawnMap

; 7908 : 				P_SetMobjState(mobj, S_GRAVWELLGREEN);

  016e7	68 ea 01 00 00	 push	 490			; 000001eaH
  016ec	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  016ef	50		 push	 eax
  016f0	e8 00 00 00 00	 call	 _P_SetMobjState
  016f5	83 c4 08	 add	 esp, 8
$LN219@P_SpawnMap:

; 7909 : 			if (i == MT_PULL)

  016f8	81 7d fc 08 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 264	; 00000108H
  016ff	75 11		 jne	 SHORT $LN220@P_SpawnMap

; 7910 : 				P_SetMobjState(mobj, S_GRAVWELLRED);

  01701	68 ed 01 00 00	 push	 493			; 000001edH
  01706	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01709	50		 push	 eax
  0170a	e8 00 00 00 00	 call	 _P_SetMobjState
  0170f	83 c4 08	 add	 esp, 8
$LN220@P_SpawnMap:

; 7911 : 		}
; 7912 : 	}
; 7913 : 
; 7914 : 	mobj->angle = FixedAngle(mthing->angle*FRACUNIT);

  01712	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01715	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01719	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0171c	51		 push	 ecx
  0171d	e8 00 00 00 00	 call	 _FixedAngle
  01722	83 c4 04	 add	 esp, 4
  01725	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01728	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 7915 : 
; 7916 : 	if ((mthing->options & MTF_AMBUSH)
; 7917 : 		&& (mthing->options & MTF_OBJECTSPECIAL)
; 7918 : 		&& (mobj->flags & MF_PUSHABLE))

  0172b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0172e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01732	83 e1 08	 and	 ecx, 8
  01735	74 34		 je	 SHORT $LN221@P_SpawnMap
  01737	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0173a	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0173e	83 e1 04	 and	 ecx, 4
  01741	74 28		 je	 SHORT $LN221@P_SpawnMap
  01743	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01746	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01749	83 e1 40	 and	 ecx, 64			; 00000040H
  0174c	74 1d		 je	 SHORT $LN221@P_SpawnMap

; 7919 : 	{
; 7920 : 		mobj->flags2 |= MF2_CLASSICPUSH;

  0174e	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01751	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01757	81 c9 00 00 00
	08		 or	 ecx, 134217728		; 08000000H
  0175d	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01760	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 7921 : 	}

  01766	e9 db 02 00 00	 jmp	 $LN235@P_SpawnMap
$LN221@P_SpawnMap:

; 7922 : 	else
; 7923 : 	{
; 7924 : 		if (mthing->options & MTF_AMBUSH)

  0176b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0176e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01772	83 e1 08	 and	 ecx, 8
  01775	0f 84 fd 00 00
	00		 je	 $LN230@P_SpawnMap

; 7925 : 		{
; 7926 : 			switch (i)

  0177b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0177e	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv1112[ebp], eax
  01784	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv1112[ebp]
  0178a	81 e9 af 00 00
	00		 sub	 ecx, 175		; 000000afH
  01790	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv1112[ebp], ecx
  01796	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR tv1112[ebp], 3
  0179d	77 1f		 ja	 SHORT $LN228@P_SpawnMap
  0179f	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv1112[ebp]
  017a5	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN238@P_SpawnMap[edx*4]
$LN224@P_SpawnMap:

; 7927 : 			{
; 7928 : 				case MT_YELLOWDIAG:
; 7929 : 				case MT_YELLOWDIAGDOWN:
; 7930 : 				case MT_REDDIAG:
; 7931 : 				case MT_REDDIAGDOWN:
; 7932 : 					mobj->angle += ANGLE_22h;

  017ac	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  017af	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  017b2	81 c1 00 00 00
	10		 add	 ecx, 268435456		; 10000000H
  017b8	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  017bb	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN228@P_SpawnMap:

; 7933 : 					break;
; 7934 : 				default:
; 7935 : 					break;
; 7936 : 			}
; 7937 : 
; 7938 : 			if (mobj->flags & MF_PUSHABLE)

  017be	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  017c1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  017c4	83 e1 40	 and	 ecx, 64			; 00000040H
  017c7	74 27		 je	 SHORT $LN229@P_SpawnMap

; 7939 : 			{
; 7940 : 				mobj->flags &= ~MF_PUSHABLE;

  017c9	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  017cc	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  017cf	83 e1 bf	 and	 ecx, -65		; ffffffbfH
  017d2	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  017d5	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 7941 : 				mobj->flags2 |= MF2_STANDONME;

  017d8	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  017db	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  017e1	81 c9 00 00 00
	02		 or	 ecx, 33554432		; 02000000H
  017e7	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  017ea	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN229@P_SpawnMap:

; 7942 : 			}
; 7943 : 
; 7944 : 			//todo: replace the rest with mobjinfo[].doomednum
; 7945 : 			if (mthing->type != 1700 && mthing->type != 1701 && mthing->type != 1702
; 7946 : 				&& mthing->type != 1704 && mthing->type != 502 &&
; 7947 : 				mthing->type != mobjinfo[MT_GRAVITYBOX].doomednum &&

  017f0	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  017f3	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  017f7	81 f9 a4 06 00
	00		 cmp	 ecx, 1700		; 000006a4H
  017fd	74 79		 je	 SHORT $LN230@P_SpawnMap
  017ff	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01802	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01806	81 f9 a5 06 00
	00		 cmp	 ecx, 1701		; 000006a5H
  0180c	74 6a		 je	 SHORT $LN230@P_SpawnMap
  0180e	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01811	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01815	81 f9 a6 06 00
	00		 cmp	 ecx, 1702		; 000006a6H
  0181b	74 5b		 je	 SHORT $LN230@P_SpawnMap
  0181d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01820	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01824	81 f9 a8 06 00
	00		 cmp	 ecx, 1704		; 000006a8H
  0182a	74 4c		 je	 SHORT $LN230@P_SpawnMap
  0182c	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0182f	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01833	81 f9 f6 01 00
	00		 cmp	 ecx, 502		; 000001f6H
  01839	74 3d		 je	 SHORT $LN230@P_SpawnMap
  0183b	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0183e	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01842	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  01847	6b c2 5e	 imul	 eax, edx, 94
  0184a	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  01850	74 26		 je	 SHORT $LN230@P_SpawnMap
  01852	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01855	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01859	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  0185e	6b c2 59	 imul	 eax, edx, 89
  01861	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  01867	74 0f		 je	 SHORT $LN230@P_SpawnMap

; 7948 : 				mthing->type != mobjinfo[MT_EGGMANBOX].doomednum)
; 7949 : 				mobj->flags |= MF_AMBUSH;

  01869	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  0186c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0186f	83 c9 20	 or	 ecx, 32			; 00000020H
  01872	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01875	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN230@P_SpawnMap:

; 7950 : 		}
; 7951 : 
; 7952 : 		// flag for strong/weak random boxes
; 7953 : 		if (mthing->options & MTF_OBJECTSPECIAL)

  01878	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0187b	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0187f	83 e1 04	 and	 ecx, 4
  01882	0f 84 44 01 00
	00		 je	 $LN232@P_SpawnMap

; 7954 : 		{
; 7955 : 			if (mthing->type == mobjinfo[MT_QUESTIONBOX].doomednum || mthing->type == mobjinfo[MT_SUPERRINGBOX].doomednum ||
; 7956 : 				mthing->type == mobjinfo[MT_SNEAKERTV].doomednum || mthing->type == mobjinfo[MT_INV].doomednum ||
; 7957 : 				mthing->type == mobjinfo[MT_WHITETV].doomednum || mthing->type == mobjinfo[MT_GREENTV].doomednum ||
; 7958 : 				mthing->type == mobjinfo[MT_YELLOWTV].doomednum || mthing->type == mobjinfo[MT_BLUETV].doomednum ||
; 7959 : 				mthing->type == mobjinfo[MT_RECYCLETV].doomednum ||
; 7960 : 				mthing->type == mobjinfo[MT_BLACKTV].doomednum || mthing->type == mobjinfo[MT_MIXUPBOX].doomednum ||

  01888	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0188b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0188f	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  01894	6b c2 5d	 imul	 eax, edx, 93
  01897	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  0189d	0f 84 11 01 00
	00		 je	 $LN233@P_SpawnMap
  018a3	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  018a6	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  018aa	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  018af	6b c2 4e	 imul	 eax, edx, 78
  018b2	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  018b8	0f 84 f6 00 00
	00		 je	 $LN233@P_SpawnMap
  018be	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  018c1	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  018c5	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  018ca	6b c2 51	 imul	 eax, edx, 81
  018cd	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  018d3	0f 84 db 00 00
	00		 je	 $LN233@P_SpawnMap
  018d9	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  018dc	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  018e0	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  018e5	6b c2 52	 imul	 eax, edx, 82
  018e8	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  018ee	0f 84 c0 00 00
	00		 je	 $LN233@P_SpawnMap
  018f4	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  018f7	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  018fb	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  01900	6b c2 57	 imul	 eax, edx, 87
  01903	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  01909	0f 84 a5 00 00
	00		 je	 $LN233@P_SpawnMap
  0190f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01912	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01916	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  0191b	6b c2 58	 imul	 eax, edx, 88
  0191e	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  01924	0f 84 8a 00 00
	00		 je	 $LN233@P_SpawnMap
  0192a	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0192d	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01931	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  01936	6b c2 54	 imul	 eax, edx, 84
  01939	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  0193f	74 73		 je	 SHORT $LN233@P_SpawnMap
  01941	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01944	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01948	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  0194d	6b c2 55	 imul	 eax, edx, 85
  01950	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  01956	74 5c		 je	 SHORT $LN233@P_SpawnMap
  01958	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  0195b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0195f	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  01964	6b c2 5b	 imul	 eax, edx, 91
  01967	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  0196d	74 45		 je	 SHORT $LN233@P_SpawnMap
  0196f	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01972	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01976	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  0197b	6b c2 56	 imul	 eax, edx, 86
  0197e	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  01984	74 2e		 je	 SHORT $LN233@P_SpawnMap
  01986	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01989	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0198d	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  01992	6b c2 5a	 imul	 eax, edx, 90
  01995	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  0199b	74 17		 je	 SHORT $LN233@P_SpawnMap
  0199d	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  019a0	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  019a4	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  019a9	6b c2 53	 imul	 eax, edx, 83
  019ac	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[eax]
  019b2	75 18		 jne	 SHORT $LN232@P_SpawnMap
$LN233@P_SpawnMap:

; 7961 : 				mthing->type == mobjinfo[MT_PRUP].doomednum)
; 7962 : 				mobj->flags2 |= MF2_STRONGBOX;

  019b4	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  019b7	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  019bd	81 c9 00 00 00
	10		 or	 ecx, 268435456		; 10000000H
  019c3	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  019c6	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN232@P_SpawnMap:

; 7963 : 		}
; 7964 : 
; 7965 : 		// Generic reverse gravity for individual objects flag.
; 7966 : 		if (mthing->options & MTF_OBJECTFLIP)

  019cc	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  019cf	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  019d3	83 e1 02	 and	 ecx, 2
  019d6	74 2d		 je	 SHORT $LN234@P_SpawnMap

; 7967 : 		{
; 7968 : 			mobj->eflags |= MFE_VERTICALFLIP;

  019d8	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  019db	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  019e1	83 c9 20	 or	 ecx, 32			; 00000020H
  019e4	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  019e7	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 7969 : 			mobj->flags2 |= MF2_OBJECTFLIP;

  019ed	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  019f0	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  019f6	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  019fc	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  019ff	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN234@P_SpawnMap:

; 7970 : 		}
; 7971 : 
; 7972 : 		// Pushables bounce and slide coolly with object special flag set
; 7973 : 		if ((mthing->options & MTF_OBJECTSPECIAL) && (mobj->flags & MF_PUSHABLE))

  01a05	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01a08	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01a0c	83 e1 04	 and	 ecx, 4
  01a0f	74 35		 je	 SHORT $LN235@P_SpawnMap
  01a11	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a14	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01a17	83 e1 40	 and	 ecx, 64			; 00000040H
  01a1a	74 2a		 je	 SHORT $LN235@P_SpawnMap

; 7974 : 		{
; 7975 : 			mobj->flags2 |= MF2_SLIDEPUSH;

  01a1c	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a1f	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01a25	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  01a2b	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01a2e	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 7976 : 			mobj->flags |= MF_BOUNCE;

  01a34	8b 45 f8	 mov	 eax, DWORD PTR _mobj$[ebp]
  01a37	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01a3a	81 c9 00 00 04
	00		 or	 ecx, 262144		; 00040000H
  01a40	8b 55 f8	 mov	 edx, DWORD PTR _mobj$[ebp]
  01a43	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN235@P_SpawnMap:

; 7977 : 		}
; 7978 : 	}
; 7979 : 
; 7980 : 	mthing->mobj = mobj;

  01a46	8b 45 08	 mov	 eax, DWORD PTR _mthing$[ebp]
  01a49	8b 4d f8	 mov	 ecx, DWORD PTR _mobj$[ebp]
  01a4c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN1@P_SpawnMap:

; 7981 : }

  01a4f	5f		 pop	 edi
  01a50	5e		 pop	 esi
  01a51	5b		 pop	 ebx
  01a52	8b e5		 mov	 esp, ebp
  01a54	5d		 pop	 ebp
  01a55	c3		 ret	 0
  01a56	66 90		 npad	 2
$LN237@P_SpawnMap:
  01a58	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a5c	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a60	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a64	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a68	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a6c	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a70	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a74	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a78	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a7c	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a80	00 00 00 00	 DD	 $LN43@P_SpawnMap
  01a84	00 00 00 00	 DD	 $LN43@P_SpawnMap
$LN238@P_SpawnMap:
  01a88	00 00 00 00	 DD	 $LN224@P_SpawnMap
  01a8c	00 00 00 00	 DD	 $LN224@P_SpawnMap
  01a90	00 00 00 00	 DD	 $LN224@P_SpawnMap
  01a94	00 00 00 00	 DD	 $LN224@P_SpawnMap
_P_SpawnMapThing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_MobjCheckWater
_TEXT	SEGMENT
tv778 = -120						; size = 4
tv815 = -120						; size = 4
tv71 = -116						; size = 4
tv764 = -116						; size = 4
tv801 = -116						; size = 4
_bubble$1 = -48						; size = 4
_splish$2 = -44						; size = 4
_splish$3 = -40						; size = 4
_prandom$4 = -36					; size = 6
_bubblecount$5 = -28					; size = 4
_i$6 = -24						; size = 4
_rover$7 = -20						; size = 4
_wasinwater$ = -16					; size = 4
_oldeflags$ = -12					; size = 4
_sector$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mobj$ = 8						; size = 4
_P_MobjCheckWater PROC					; COMDAT

; 2285 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 2286 : 	sector_t *sector;
; 2287 : 	UINT32 oldeflags;
; 2288 : 	UINT32 wasinwater;
; 2289 : 
; 2290 : 	wasinwater = mobj->eflags & MFE_UNDERWATER; // important: not boolean!

  00013	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00016	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0001c	83 e1 08	 and	 ecx, 8
  0001f	89 4d f0	 mov	 DWORD PTR _wasinwater$[ebp], ecx

; 2291 : 
; 2292 : 	// Default if no water exists.
; 2293 : 	mobj->watertop = mobj->waterbottom = mobj->subsector->sector->floorheight - 1000*FRACUNIT;

  00022	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00025	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00028	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	2d 00 00 e8 03	 sub	 eax, 65536000		; 03e80000H
  00031	89 45 8c	 mov	 DWORD PTR tv71[ebp], eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00037	8b 55 8c	 mov	 edx, DWORD PTR tv71[ebp]
  0003a	89 91 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], edx
  00040	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00043	8b 4d 8c	 mov	 ecx, DWORD PTR tv71[ebp]
  00046	89 88 c0 00 00
	00		 mov	 DWORD PTR [eax+192], ecx

; 2294 : 
; 2295 : 	// see if we are in water, and set some flags for later
; 2296 : 	sector = mobj->subsector->sector;

  0004c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0004f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00052	8b 11		 mov	 edx, DWORD PTR [ecx]
  00054	89 55 f8	 mov	 DWORD PTR _sector$[ebp], edx

; 2297 : 	oldeflags = mobj->eflags;

  00057	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0005a	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00060	89 4d f4	 mov	 DWORD PTR _oldeflags$[ebp], ecx

; 2298 : 
; 2299 : 	if (sector->ffloors) // 3D water

  00063	8b 45 f8	 mov	 eax, DWORD PTR _sector$[ebp]
  00066	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0006d	0f 84 31 04 00
	00		 je	 $LN8@P_MobjChec

; 2300 : 	{
; 2301 : 		ffloor_t *rover;
; 2302 : 
; 2303 : 		mobj->eflags &= ~(MFE_UNDERWATER|MFE_TOUCHWATER);

  00073	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00076	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0007c	83 e1 f3	 and	 ecx, -13		; fffffff3H
  0007f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00082	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 2304 : 
; 2305 : 		for (rover = sector->ffloors; rover; rover = rover->next)

  00088	8b 45 f8	 mov	 eax, DWORD PTR _sector$[ebp]
  0008b	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00091	89 4d ec	 mov	 DWORD PTR _rover$7[ebp], ecx
  00094	eb 09		 jmp	 SHORT $LN4@P_MobjChec
$LN2@P_MobjChec:
  00096	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  00099	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0009c	89 4d ec	 mov	 DWORD PTR _rover$7[ebp], ecx
$LN4@P_MobjChec:
  0009f	83 7d ec 00	 cmp	 DWORD PTR _rover$7[ebp], 0
  000a3	0f 84 f9 03 00
	00		 je	 $LN3@P_MobjChec

; 2306 : 		{
; 2307 : 			if (!(rover->flags & FF_EXISTS) || !(rover->flags & FF_SWIMMABLE)
; 2308 : 				|| (((rover->flags & FF_BLOCKPLAYER) && mobj->player)

  000a9	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  000ac	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000af	83 e1 01	 and	 ecx, 1
  000b2	74 39		 je	 SHORT $LN12@P_MobjChec
  000b4	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  000b7	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000ba	83 e1 20	 and	 ecx, 32			; 00000020H
  000bd	74 2e		 je	 SHORT $LN12@P_MobjChec
  000bf	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  000c2	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000c5	83 e1 02	 and	 ecx, 2
  000c8	74 0c		 je	 SHORT $LN13@P_MobjChec
  000ca	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000cd	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000d4	75 17		 jne	 SHORT $LN12@P_MobjChec
$LN13@P_MobjChec:
  000d6	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  000d9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000dc	83 e1 04	 and	 ecx, 4
  000df	74 0e		 je	 SHORT $LN10@P_MobjChec
  000e1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000e4	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000eb	75 02		 jne	 SHORT $LN10@P_MobjChec
$LN12@P_MobjChec:

; 2309 : 				|| ((rover->flags & FF_BLOCKOTHERS) && !mobj->player)))
; 2310 : 				continue;

  000ed	eb a7		 jmp	 SHORT $LN2@P_MobjChec
$LN10@P_MobjChec:

; 2311 : 
; 2312 : 			if (mobj->eflags & MFE_VERTICALFLIP)

  000ef	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  000f2	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000f8	83 e1 20	 and	 ecx, 32			; 00000020H
  000fb	0f 84 8d 00 00
	00		 je	 $LN14@P_MobjChec

; 2313 : 			{
; 2314 : 				if (*rover->topheight < (mobj->z + FIXEDSCALE(mobj->info->height/2 ,mobj->scale))
; 2315 : 					|| *rover->bottomheight > (mobj->z + FIXEDSCALE(mobj->info->height, mobj->scale)))

  00101	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  00104	8b 30		 mov	 esi, DWORD PTR [eax]
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00109	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0010f	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00112	99		 cdq
  00113	2b c2		 sub	 eax, edx
  00115	d1 f8		 sar	 eax, 1
  00117	50		 push	 eax
  00118	68 00 00 64 00	 push	 6553600			; 00640000H
  0011d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00120	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00127	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 _FixedDiv
  00130	83 c4 08	 add	 esp, 8
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _FixedMul
  00139	83 c4 08	 add	 esp, 8
  0013c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0013f	03 42 18	 add	 eax, DWORD PTR [edx+24]
  00142	39 06		 cmp	 DWORD PTR [esi], eax
  00144	7c 41		 jl	 SHORT $LN17@P_MobjChec
  00146	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  00149	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  0014c	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0014f	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00155	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00158	50		 push	 eax
  00159	68 00 00 64 00	 push	 6553600			; 00640000H
  0015e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00161	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00168	c1 e2 10	 shl	 edx, 16			; 00000010H
  0016b	52		 push	 edx
  0016c	e8 00 00 00 00	 call	 _FixedDiv
  00171	83 c4 08	 add	 esp, 8
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 _FixedMul
  0017a	83 c4 08	 add	 esp, 8
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00180	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00183	39 06		 cmp	 DWORD PTR [esi], eax
  00185	7e 05		 jle	 SHORT $LN16@P_MobjChec
$LN17@P_MobjChec:

; 2316 : 					continue;

  00187	e9 0a ff ff ff	 jmp	 $LN2@P_MobjChec
$LN16@P_MobjChec:

; 2317 : 			}

  0018c	eb 5a		 jmp	 SHORT $LN18@P_MobjChec
$LN14@P_MobjChec:

; 2318 : 			else if (*rover->topheight < mobj->z
; 2319 : 				|| *rover->bottomheight > (mobj->z + FIXEDSCALE(mobj->info->height/2, mobj->scale)))

  0018e	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  00191	8b 08		 mov	 ecx, DWORD PTR [eax]
  00193	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00196	8b 01		 mov	 eax, DWORD PTR [ecx]
  00198	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  0019b	7c 46		 jl	 SHORT $LN19@P_MobjChec
  0019d	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  001a0	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  001a3	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  001a6	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  001ac	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001af	99		 cdq
  001b0	2b c2		 sub	 eax, edx
  001b2	d1 f8		 sar	 eax, 1
  001b4	50		 push	 eax
  001b5	68 00 00 64 00	 push	 6553600			; 00640000H
  001ba	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001bd	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  001c4	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001c7	51		 push	 ecx
  001c8	e8 00 00 00 00	 call	 _FixedDiv
  001cd	83 c4 08	 add	 esp, 8
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 _FixedMul
  001d6	83 c4 08	 add	 esp, 8
  001d9	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001dc	03 42 18	 add	 eax, DWORD PTR [edx+24]
  001df	39 06		 cmp	 DWORD PTR [esi], eax
  001e1	7e 05		 jle	 SHORT $LN18@P_MobjChec
$LN19@P_MobjChec:

; 2320 : 				continue;

  001e3	e9 ae fe ff ff	 jmp	 $LN2@P_MobjChec
$LN18@P_MobjChec:

; 2321 : 
; 2322 : 			if (((mobj->eflags & MFE_VERTICALFLIP) && mobj->z < *rover->bottomheight)
; 2323 : 				|| (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->z + FIXEDSCALE(mobj->info->height, mobj->scale) > *rover->topheight))

  001e8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  001eb	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  001f1	83 e1 20	 and	 ecx, 32			; 00000020H
  001f4	74 10		 je	 SHORT $LN23@P_MobjChec
  001f6	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  001f9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001fc	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  001ff	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00202	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00204	7c 4e		 jl	 SHORT $LN22@P_MobjChec
$LN23@P_MobjChec:
  00206	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00209	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0020f	83 e1 20	 and	 ecx, 32			; 00000020H
  00212	75 57		 jne	 SHORT $LN20@P_MobjChec
  00214	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00217	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0021d	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00220	52		 push	 edx
  00221	68 00 00 64 00	 push	 6553600			; 00640000H
  00226	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00229	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00230	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00233	51		 push	 ecx
  00234	e8 00 00 00 00	 call	 _FixedDiv
  00239	83 c4 08	 add	 esp, 8
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 _FixedMul
  00242	83 c4 08	 add	 esp, 8
  00245	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00248	03 42 18	 add	 eax, DWORD PTR [edx+24]
  0024b	8b 4d ec	 mov	 ecx, DWORD PTR _rover$7[ebp]
  0024e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00250	3b 02		 cmp	 eax, DWORD PTR [edx]
  00252	7e 17		 jle	 SHORT $LN20@P_MobjChec
$LN22@P_MobjChec:

; 2324 : 				mobj->eflags |= MFE_TOUCHWATER;

  00254	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00257	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0025d	83 c9 04	 or	 ecx, 4
  00260	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00263	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
  00269	eb 15		 jmp	 SHORT $LN21@P_MobjChec
$LN20@P_MobjChec:

; 2325 : 			else
; 2326 : 				mobj->eflags &= ~MFE_TOUCHWATER;

  0026b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0026e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00274	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00277	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0027a	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN21@P_MobjChec:

; 2327 : 
; 2328 : 			// Set the watertop and waterbottom
; 2329 : 			mobj->watertop = *rover->topheight;

  00280	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]
  00285	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00288	8b 01		 mov	 eax, DWORD PTR [ecx]
  0028a	89 82 c0 00 00
	00		 mov	 DWORD PTR [edx+192], eax

; 2330 : 			mobj->waterbottom = *rover->bottomheight;

  00290	8b 45 ec	 mov	 eax, DWORD PTR _rover$7[ebp]
  00293	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00296	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00299	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029b	89 82 c4 00 00
	00		 mov	 DWORD PTR [edx+196], eax

; 2331 : 
; 2332 : 			if (((mobj->eflags & MFE_VERTICALFLIP) && mobj->z + FIXEDSCALE(mobj->info->height/2, mobj->scale) > *rover->bottomheight)
; 2333 : 				|| (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->z + FIXEDSCALE(mobj->info->height/2, mobj->scale) < *rover->topheight))

  002a1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002a4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  002aa	83 e1 20	 and	 ecx, 32			; 00000020H
  002ad	74 46		 je	 SHORT $LN27@P_MobjChec
  002af	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002b2	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002b8	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  002bb	99		 cdq
  002bc	2b c2		 sub	 eax, edx
  002be	d1 f8		 sar	 eax, 1
  002c0	50		 push	 eax
  002c1	68 00 00 64 00	 push	 6553600			; 00640000H
  002c6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  002c9	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  002d0	c1 e0 10	 shl	 eax, 16			; 00000010H
  002d3	50		 push	 eax
  002d4	e8 00 00 00 00	 call	 _FixedDiv
  002d9	83 c4 08	 add	 esp, 8
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 _FixedMul
  002e2	83 c4 08	 add	 esp, 8
  002e5	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  002e8	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  002eb	8b 55 ec	 mov	 edx, DWORD PTR _rover$7[ebp]
  002ee	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  002f1	3b 01		 cmp	 eax, DWORD PTR [ecx]
  002f3	7f 5b		 jg	 SHORT $LN26@P_MobjChec
$LN27@P_MobjChec:
  002f5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  002f8	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  002fe	83 e1 20	 and	 ecx, 32			; 00000020H
  00301	0f 85 81 01 00
	00		 jne	 $LN24@P_MobjChec
  00307	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0030a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00310	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00313	99		 cdq
  00314	2b c2		 sub	 eax, edx
  00316	d1 f8		 sar	 eax, 1
  00318	50		 push	 eax
  00319	68 00 00 64 00	 push	 6553600			; 00640000H
  0031e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00321	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  00328	c1 e0 10	 shl	 eax, 16			; 00000010H
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 _FixedDiv
  00331	83 c4 08	 add	 esp, 8
  00334	50		 push	 eax
  00335	e8 00 00 00 00	 call	 _FixedMul
  0033a	83 c4 08	 add	 esp, 8
  0033d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00340	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00343	8b 55 ec	 mov	 edx, DWORD PTR _rover$7[ebp]
  00346	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00348	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0034a	0f 8d 38 01 00
	00		 jge	 $LN24@P_MobjChec
$LN26@P_MobjChec:

; 2334 : 			{
; 2335 : 				mobj->eflags |= MFE_UNDERWATER;

  00350	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00353	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00359	83 c9 08	 or	 ecx, 8
  0035c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0035f	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 2336 : 
; 2337 : 				if (mobj->player)

  00365	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00368	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0036f	0f 84 11 01 00
	00		 je	 $LN32@P_MobjChec

; 2338 : 				{
; 2339 : 					if (!((mobj->player->powers[pw_super]) || (mobj->player->powers[pw_invulnerability])))

  00375	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00378	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0037e	ba 04 00 00 00	 mov	 edx, 4
  00383	6b c2 0f	 imul	 eax, edx, 15
  00386	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0038b	75 5c		 jne	 SHORT $LN30@P_MobjChec
  0038d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00390	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00396	ba 04 00 00 00	 mov	 edx, 4
  0039b	6b c2 00	 imul	 eax, edx, 0
  0039e	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  003a3	75 44		 jne	 SHORT $LN30@P_MobjChec

; 2340 : 					{
; 2341 : 						if (mobj->player->powers[pw_ringshield])

  003a5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003a8	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003ae	ba 04 00 00 00	 mov	 edx, 4
  003b3	6b c2 09	 imul	 eax, edx, 9
  003b6	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  003bb	74 2c		 je	 SHORT $LN30@P_MobjChec

; 2342 : 						{
; 2343 : 							mobj->player->powers[pw_ringshield] = false;

  003bd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003c0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003c6	ba 04 00 00 00	 mov	 edx, 4
  003cb	6b c2 09	 imul	 eax, edx, 9
  003ce	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2344 : 							mobj->player->bonuscount = 1;

  003d6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003d9	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003df	c7 81 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+176], 1
$LN30@P_MobjChec:

; 2345 : 						}
; 2346 : 					}
; 2347 : 					if (mobj->player->powers[pw_underwater] <= 0
; 2348 : 						&& !(mobj->player->powers[pw_watershield])
; 2349 : 						&& !(mobj->player->exiting)
; 2350 : 						&& mobj->player->powers[pw_underwater] < underwatertics + 1)

  003e9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  003ec	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003f2	ba 04 00 00 00	 mov	 edx, 4
  003f7	6b c2 06	 imul	 eax, edx, 6
  003fa	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  003ff	0f 8f 81 00 00
	00		 jg	 $LN32@P_MobjChec
  00405	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00408	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0040e	ba 04 00 00 00	 mov	 edx, 4
  00413	6b c2 0b	 imul	 eax, edx, 11
  00416	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0041b	75 69		 jne	 SHORT $LN32@P_MobjChec
  0041d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00420	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00426	83 b9 30 01 00
	00 00		 cmp	 DWORD PTR [ecx+304], 0
  0042d	75 57		 jne	 SHORT $LN32@P_MobjChec
  0042f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00432	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00438	ba 04 00 00 00	 mov	 edx, 4
  0043d	6b c2 06	 imul	 eax, edx, 6
  00440	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _underwatertics
  00446	83 c2 01	 add	 edx, 1
  00449	39 54 01 38	 cmp	 DWORD PTR [ecx+eax+56], edx
  0044d	7d 37		 jge	 SHORT $LN32@P_MobjChec

; 2351 : 					{
; 2352 : 						if (!(maptol & TOL_NIGHTS) && !mariomode)

  0044f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00456	83 e0 40	 and	 eax, 64			; 00000040H
  00459	75 2b		 jne	 SHORT $LN32@P_MobjChec
  0045b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00462	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00467	75 1d		 jne	 SHORT $LN32@P_MobjChec

; 2353 : 							mobj->player->powers[pw_underwater] = underwatertics + 1;

  00469	a1 00 00 00 00	 mov	 eax, DWORD PTR _underwatertics
  0046e	83 c0 01	 add	 eax, 1
  00471	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00474	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0047a	b9 04 00 00 00	 mov	 ecx, 4
  0047f	6b c9 06	 imul	 ecx, ecx, 6
  00482	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
$LN32@P_MobjChec:

; 2354 : 					}
; 2355 : 				}
; 2356 : 			}

  00486	eb 15		 jmp	 SHORT $LN25@P_MobjChec
$LN24@P_MobjChec:

; 2357 : 			else
; 2358 : 				mobj->eflags &= ~MFE_UNDERWATER;

  00488	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0048b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00491	83 e1 f7	 and	 ecx, -9			; fffffff7H
  00494	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00497	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN25@P_MobjChec:

; 2359 : 		}

  0049d	e9 f4 fb ff ff	 jmp	 $LN2@P_MobjChec
$LN3@P_MobjChec:

; 2360 : 	}

  004a2	eb 15		 jmp	 SHORT $LN9@P_MobjChec
$LN8@P_MobjChec:

; 2361 : 	else
; 2362 : 		mobj->eflags &= ~(MFE_UNDERWATER|MFE_TOUCHWATER);

  004a4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004a7	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  004ad	83 e1 f3	 and	 ecx, -13		; fffffff3H
  004b0	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  004b3	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$LN9@P_MobjChec:

; 2363 : 
; 2364 : 	if (leveltime < 1)

  004b9	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _leveltime, 1
  004c0	73 0f		 jae	 SHORT $LN33@P_MobjChec

; 2365 : 		wasinwater = mobj->eflags & MFE_UNDERWATER;

  004c2	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004c5	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  004cb	83 e1 08	 and	 ecx, 8
  004ce	89 4d f0	 mov	 DWORD PTR _wasinwater$[ebp], ecx
$LN33@P_MobjChec:

; 2366 : 
; 2367 : 	if (((mobj->player && mobj->player->playerstate != PST_DEAD) || (mobj->flags & MF_PUSHABLE) ||
; 2368 : 		(mobj->info->flags & MF_PUSHABLE && mobj->fuse))
; 2369 : 		&& ((mobj->eflags & MFE_UNDERWATER) != wasinwater))

  004d1	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004d4	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  004db	74 0f		 je	 SHORT $LN36@P_MobjChec
  004dd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004e0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004e6	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  004ea	75 30		 jne	 SHORT $LN35@P_MobjChec
$LN36@P_MobjChec:
  004ec	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004ef	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  004f2	83 e1 40	 and	 ecx, 64			; 00000040H
  004f5	75 25		 jne	 SHORT $LN35@P_MobjChec
  004f7	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  004fa	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00500	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00503	83 e2 40	 and	 edx, 64			; 00000040H
  00506	0f 84 be 09 00
	00		 je	 $LN6@P_MobjChec
  0050c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0050f	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  00516	0f 84 ae 09 00
	00		 je	 $LN6@P_MobjChec
$LN35@P_MobjChec:
  0051c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0051f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00525	83 e1 08	 and	 ecx, 8
  00528	3b 4d f0	 cmp	 ecx, DWORD PTR _wasinwater$[ebp]
  0052b	0f 84 99 09 00
	00		 je	 $LN6@P_MobjChec

; 2370 : 	{
; 2371 : 		INT32 i, bubblecount;
; 2372 : 		UINT8 prandom[6];
; 2373 : 
; 2374 : 		// Check to make sure you didn't just cross into a sector to jump out of
; 2375 : 		// that has shallower water than the block you were originally in.
; 2376 : 		if (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->watertop-mobj->floorz <= FIXEDSCALE(mobj->info->height, mobj->scale)>>1)

  00531	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00534	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0053a	83 e1 20	 and	 ecx, 32			; 00000020H
  0053d	75 4b		 jne	 SHORT $LN37@P_MobjChec
  0053f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00542	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00545	8b b0 c0 00 00
	00		 mov	 esi, DWORD PTR [eax+192]
  0054b	2b 71 38	 sub	 esi, DWORD PTR [ecx+56]
  0054e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00551	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00557	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0055a	51		 push	 ecx
  0055b	68 00 00 64 00	 push	 6553600			; 00640000H
  00560	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00563	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  0056a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0056d	50		 push	 eax
  0056e	e8 00 00 00 00	 call	 _FixedDiv
  00573	83 c4 08	 add	 esp, 8
  00576	50		 push	 eax
  00577	e8 00 00 00 00	 call	 _FixedMul
  0057c	83 c4 08	 add	 esp, 8
  0057f	d1 f8		 sar	 eax, 1
  00581	3b f0		 cmp	 esi, eax
  00583	7f 05		 jg	 SHORT $LN37@P_MobjChec

; 2377 : 			return;

  00585	e9 40 09 00 00	 jmp	 $LN6@P_MobjChec
$LN37@P_MobjChec:

; 2378 : 
; 2379 : 		if ((mobj->eflags & MFE_VERTICALFLIP) && mobj->ceilingz-mobj->waterbottom <= FIXEDSCALE(mobj->info->height, mobj->scale)>>1)

  0058a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0058d	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00593	83 e1 20	 and	 ecx, 32			; 00000020H
  00596	74 4b		 je	 SHORT $LN38@P_MobjChec
  00598	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0059b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0059e	8b 70 3c	 mov	 esi, DWORD PTR [eax+60]
  005a1	2b b1 c4 00 00
	00		 sub	 esi, DWORD PTR [ecx+196]
  005a7	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  005aa	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  005b0	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  005b3	51		 push	 ecx
  005b4	68 00 00 64 00	 push	 6553600			; 00640000H
  005b9	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  005bc	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  005c3	c1 e0 10	 shl	 eax, 16			; 00000010H
  005c6	50		 push	 eax
  005c7	e8 00 00 00 00	 call	 _FixedDiv
  005cc	83 c4 08	 add	 esp, 8
  005cf	50		 push	 eax
  005d0	e8 00 00 00 00	 call	 _FixedMul
  005d5	83 c4 08	 add	 esp, 8
  005d8	d1 f8		 sar	 eax, 1
  005da	3b f0		 cmp	 esi, eax
  005dc	7f 05		 jg	 SHORT $LN38@P_MobjChec

; 2380 : 			return;

  005de	e9 e7 08 00 00	 jmp	 $LN6@P_MobjChec
$LN38@P_MobjChec:

; 2381 : 
; 2382 : 		if (wasinwater && ((mobj->eflags & MFE_VERTICALFLIP && mobj->momz < 0) || (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->momz > 0)))

  005e3	83 7d f0 00	 cmp	 DWORD PTR _wasinwater$[ebp], 0
  005e7	0f 84 92 00 00
	00		 je	 $LN43@P_MobjChec
  005ed	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005f0	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  005f6	83 e1 20	 and	 ecx, 32			; 00000020H
  005f9	74 09		 je	 SHORT $LN41@P_MobjChec
  005fb	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  005fe	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00602	7c 17		 jl	 SHORT $LN40@P_MobjChec
$LN41@P_MobjChec:
  00604	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00607	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0060d	83 e1 20	 and	 ecx, 32			; 00000020H
  00610	75 6d		 jne	 SHORT $LN43@P_MobjChec
  00612	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00615	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00619	7e 64		 jle	 SHORT $LN43@P_MobjChec
$LN40@P_MobjChec:

; 2383 : 		{
; 2384 : 			if (!(mobj->eflags & MFE_VERTICALFLIP))

  0061b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0061e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00624	83 e1 20	 and	 ecx, 32			; 00000020H
  00627	75 2a		 jne	 SHORT $LN42@P_MobjChec

; 2385 : 				mobj->momz = FixedMul(mobj->momz, FixedDiv(780*FRACUNIT, 457*FRACUNIT)); // Give the mobj a little out-of-water boost.

  00629	68 00 00 c9 01	 push	 29949952		; 01c90000H
  0062e	68 00 00 0c 03	 push	 51118080		; 030c0000H
  00633	e8 00 00 00 00	 call	 _FixedDiv
  00638	83 c4 08	 add	 esp, 8
  0063b	50		 push	 eax
  0063c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0063f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00642	51		 push	 ecx
  00643	e8 00 00 00 00	 call	 _FixedMul
  00648	83 c4 08	 add	 esp, 8
  0064b	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0064e	89 42 50	 mov	 DWORD PTR [edx+80], eax
  00651	eb 2c		 jmp	 SHORT $LN43@P_MobjChec
$LN42@P_MobjChec:

; 2386 : 			else
; 2387 : 				mobj->momz = -FixedMul(-mobj->momz, FixedDiv(780*FRACUNIT, 457*FRACUNIT)); // Give the mobj a little out-of-water boost.

  00653	68 00 00 c9 01	 push	 29949952		; 01c90000H
  00658	68 00 00 0c 03	 push	 51118080		; 030c0000H
  0065d	e8 00 00 00 00	 call	 _FixedDiv
  00662	83 c4 08	 add	 esp, 8
  00665	50		 push	 eax
  00666	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00669	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0066c	f7 d9		 neg	 ecx
  0066e	51		 push	 ecx
  0066f	e8 00 00 00 00	 call	 _FixedMul
  00674	83 c4 08	 add	 esp, 8
  00677	f7 d8		 neg	 eax
  00679	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0067c	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN43@P_MobjChec:

; 2388 : 		}
; 2389 : 
; 2390 : 		if ((mobj->eflags & MFE_VERTICALFLIP && mobj->momz > 0) || (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->momz < 0))

  0067f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00682	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00688	83 e1 20	 and	 ecx, 32			; 00000020H
  0068b	74 09		 je	 SHORT $LN47@P_MobjChec
  0068d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00690	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00694	7f 1f		 jg	 SHORT $LN46@P_MobjChec
$LN47@P_MobjChec:
  00696	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00699	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0069f	83 e1 20	 and	 ecx, 32			; 00000020H
  006a2	0f 85 80 03 00
	00		 jne	 $LN44@P_MobjChec
  006a8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006ab	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  006af	0f 8d 73 03 00
	00		 jge	 $LN44@P_MobjChec
$LN46@P_MobjChec:

; 2391 : 		{
; 2392 : 			if ((mobj->eflags & MFE_VERTICALFLIP && mobj->z+(FIXEDSCALE(mobj->info->height, mobj->scale)>>1)-mobj->momz <= mobj->waterbottom)
; 2393 : 				|| (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->z+(FIXEDSCALE(mobj->info->height, mobj->scale)>>1)-mobj->momz >= mobj->watertop))

  006b5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006b8	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  006be	83 e1 20	 and	 ecx, 32			; 00000020H
  006c1	74 4c		 je	 SHORT $LN50@P_MobjChec
  006c3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006c6	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  006cc	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  006cf	52		 push	 edx
  006d0	68 00 00 64 00	 push	 6553600			; 00640000H
  006d5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  006d8	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  006df	c1 e1 10	 shl	 ecx, 16			; 00000010H
  006e2	51		 push	 ecx
  006e3	e8 00 00 00 00	 call	 _FixedDiv
  006e8	83 c4 08	 add	 esp, 8
  006eb	50		 push	 eax
  006ec	e8 00 00 00 00	 call	 _FixedMul
  006f1	83 c4 08	 add	 esp, 8
  006f4	d1 f8		 sar	 eax, 1
  006f6	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  006f9	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  006fc	03 c8		 add	 ecx, eax
  006fe	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00701	2b 4a 50	 sub	 ecx, DWORD PTR [edx+80]
  00704	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00707	3b 88 c4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+196]
  0070d	7e 62		 jle	 SHORT $LN49@P_MobjChec
$LN50@P_MobjChec:
  0070f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00712	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00718	83 e1 20	 and	 ecx, 32			; 00000020H
  0071b	0f 85 37 01 00
	00		 jne	 $LN51@P_MobjChec
  00721	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00724	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0072a	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0072d	52		 push	 edx
  0072e	68 00 00 64 00	 push	 6553600			; 00640000H
  00733	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00736	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0073d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00740	51		 push	 ecx
  00741	e8 00 00 00 00	 call	 _FixedDiv
  00746	83 c4 08	 add	 esp, 8
  00749	50		 push	 eax
  0074a	e8 00 00 00 00	 call	 _FixedMul
  0074f	83 c4 08	 add	 esp, 8
  00752	d1 f8		 sar	 eax, 1
  00754	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00757	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0075a	03 c8		 add	 ecx, eax
  0075c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0075f	2b 4a 50	 sub	 ecx, DWORD PTR [edx+80]
  00762	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00765	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  0076b	0f 8c e7 00 00
	00		 jl	 $LN51@P_MobjChec
$LN49@P_MobjChec:

; 2394 : 			{
; 2395 : 				// Spawn a splash
; 2396 : 				if (!(mobj->type == MT_PLAYER && mobj->player->spectator))

  00771	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00774	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00778	75 18		 jne	 SHORT $LN52@P_MobjChec
  0077a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0077d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00783	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  0078a	85 d2		 test	 edx, edx
  0078c	0f 85 c6 00 00
	00		 jne	 $LN51@P_MobjChec
$LN52@P_MobjChec:

; 2397 : 				{
; 2398 : 					mobj_t *splish;
; 2399 : 					if (mobj->eflags & MFE_VERTICALFLIP)

  00792	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00795	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0079b	83 e1 20	 and	 ecx, 32			; 00000020H
  0079e	74 65		 je	 SHORT $LN53@P_MobjChec

; 2400 : 						splish = P_SpawnMobj(mobj->x, mobj->y, mobj->waterbottom-(FIXEDSCALE(mobjinfo[MT_SPLISH].height*(16*FRACUNIT), mobj->scale)), MT_SPLISH);

  007a0	68 b5 00 00 00	 push	 181			; 000000b5H
  007a5	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  007aa	69 c8 b5 00 00
	00		 imul	 ecx, eax, 181
  007b0	8b 91 44 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+68]
  007b6	c1 e2 14	 shl	 edx, 20			; 00000014H
  007b9	52		 push	 edx
  007ba	68 00 00 64 00	 push	 6553600			; 00640000H
  007bf	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  007c2	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  007c9	c1 e1 10	 shl	 ecx, 16			; 00000010H
  007cc	51		 push	 ecx
  007cd	e8 00 00 00 00	 call	 _FixedDiv
  007d2	83 c4 08	 add	 esp, 8
  007d5	50		 push	 eax
  007d6	e8 00 00 00 00	 call	 _FixedMul
  007db	83 c4 08	 add	 esp, 8
  007de	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007e1	8b 8a c4 00 00
	00		 mov	 ecx, DWORD PTR [edx+196]
  007e7	2b c8		 sub	 ecx, eax
  007e9	51		 push	 ecx
  007ea	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  007ed	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  007f0	50		 push	 eax
  007f1	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  007f4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  007f7	52		 push	 edx
  007f8	e8 00 00 00 00	 call	 _P_SpawnMobj
  007fd	83 c4 10	 add	 esp, 16			; 00000010H
  00800	89 45 d8	 mov	 DWORD PTR _splish$3[ebp], eax
  00803	eb 28		 jmp	 SHORT $LN54@P_MobjChec
$LN53@P_MobjChec:

; 2401 : 					else
; 2402 : 						splish = P_SpawnMobj(mobj->x, mobj->y, mobj->watertop, MT_SPLISH);

  00805	68 b5 00 00 00	 push	 181			; 000000b5H
  0080a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0080d	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00813	51		 push	 ecx
  00814	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00817	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0081a	50		 push	 eax
  0081b	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  0081e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00821	52		 push	 edx
  00822	e8 00 00 00 00	 call	 _P_SpawnMobj
  00827	83 c4 10	 add	 esp, 16			; 00000010H
  0082a	89 45 d8	 mov	 DWORD PTR _splish$3[ebp], eax
$LN54@P_MobjChec:

; 2403 : 					splish->destscale = mobj->scale;

  0082d	8b 45 d8	 mov	 eax, DWORD PTR _splish$3[ebp]
  00830	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00833	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  0083a	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2404 : 					P_SetScale(splish, mobj->scale);

  00841	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00844	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0084b	51		 push	 ecx
  0084c	8b 55 d8	 mov	 edx, DWORD PTR _splish$3[ebp]
  0084f	52		 push	 edx
  00850	e8 00 00 00 00	 call	 _P_SetScale
  00855	83 c4 08	 add	 esp, 8
$LN51@P_MobjChec:

; 2405 : 				}
; 2406 : 			}
; 2407 : 
; 2408 : 			// skipping stone!
; 2409 : 			if (mobj->player && (mobj->player->charability2 == CA2_SPINDASH) && !(mobj->player->pflags & PF_JUMPED) && mobj->player->speed/2 > abs(mobj->momz>>FRACBITS)
; 2410 : 				&& (mobj->player->pflags & PF_SPINNING) && mobj->z + FIXEDSCALE(mobj->info->height, mobj->scale) - mobj->momz > mobj->watertop)

  00858	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0085b	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00862	0f 84 bb 01 00
	00		 je	 $LN58@P_MobjChec
  00868	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0086b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00871	83 b9 dc 00 00
	00 00		 cmp	 DWORD PTR [ecx+220], 0
  00878	0f 85 a5 01 00
	00		 jne	 $LN58@P_MobjChec
  0087e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00881	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00887	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  0088d	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  00893	0f 85 8a 01 00
	00		 jne	 $LN58@P_MobjChec
  00899	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  0089c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  008a2	8b 81 0c 01 00
	00		 mov	 eax, DWORD PTR [ecx+268]
  008a8	99		 cdq
  008a9	2b c2		 sub	 eax, edx
  008ab	8b f0		 mov	 esi, eax
  008ad	d1 fe		 sar	 esi, 1
  008af	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  008b2	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  008b5	c1 f8 10	 sar	 eax, 16			; 00000010H
  008b8	50		 push	 eax
  008b9	e8 00 00 00 00	 call	 _abs
  008be	83 c4 04	 add	 esp, 4
  008c1	3b f0		 cmp	 esi, eax
  008c3	0f 8e 5a 01 00
	00		 jle	 $LN58@P_MobjChec
  008c9	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008cc	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  008d2	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  008d8	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  008de	0f 84 3f 01 00
	00		 je	 $LN58@P_MobjChec
  008e4	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008e7	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  008ed	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  008f0	52		 push	 edx
  008f1	68 00 00 64 00	 push	 6553600			; 00640000H
  008f6	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  008f9	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00900	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00903	51		 push	 ecx
  00904	e8 00 00 00 00	 call	 _FixedDiv
  00909	83 c4 08	 add	 esp, 8
  0090c	50		 push	 eax
  0090d	e8 00 00 00 00	 call	 _FixedMul
  00912	83 c4 08	 add	 esp, 8
  00915	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00918	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0091b	03 c8		 add	 ecx, eax
  0091d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00920	2b 4a 50	 sub	 ecx, DWORD PTR [edx+80]
  00923	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00926	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  0092c	0f 8e f1 00 00
	00		 jle	 $LN58@P_MobjChec

; 2411 : 			{
; 2412 : 				mobj->momz = -mobj->momz/2;

  00932	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00935	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00938	f7 d8		 neg	 eax
  0093a	99		 cdq
  0093b	2b c2		 sub	 eax, edx
  0093d	d1 f8		 sar	 eax, 1
  0093f	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00942	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 2413 : 
; 2414 : 				if (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->momz > FIXEDSCALE(6*FRACUNIT, mobj->scale))

  00945	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00948	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0094e	83 e1 20	 and	 ecx, 32			; 00000020H
  00951	75 62		 jne	 SHORT $LN56@P_MobjChec
  00953	68 00 00 06 00	 push	 393216			; 00060000H
  00958	68 00 00 64 00	 push	 6553600			; 00640000H
  0095d	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00960	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00967	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0096a	51		 push	 ecx
  0096b	e8 00 00 00 00	 call	 _FixedDiv
  00970	83 c4 08	 add	 esp, 8
  00973	50		 push	 eax
  00974	e8 00 00 00 00	 call	 _FixedMul
  00979	83 c4 08	 add	 esp, 8
  0097c	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  0097f	39 42 50	 cmp	 DWORD PTR [edx+80], eax
  00982	7e 31		 jle	 SHORT $LN56@P_MobjChec

; 2415 : 					mobj->momz = FIXEDSCALE(6*FRACUNIT, mobj->scale);

  00984	68 00 00 06 00	 push	 393216			; 00060000H
  00989	68 00 00 64 00	 push	 6553600			; 00640000H
  0098e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00991	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00998	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0099b	51		 push	 ecx
  0099c	e8 00 00 00 00	 call	 _FixedDiv
  009a1	83 c4 08	 add	 esp, 8
  009a4	50		 push	 eax
  009a5	e8 00 00 00 00	 call	 _FixedMul
  009aa	83 c4 08	 add	 esp, 8
  009ad	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  009b0	89 42 50	 mov	 DWORD PTR [edx+80], eax
  009b3	eb 6e		 jmp	 SHORT $LN58@P_MobjChec
$LN56@P_MobjChec:

; 2416 : 				else if (mobj->eflags & MFE_VERTICALFLIP && mobj->momz < FIXEDSCALE(-6*FRACUNIT, mobj->scale))

  009b5	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  009b8	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  009be	83 e1 20	 and	 ecx, 32			; 00000020H
  009c1	74 60		 je	 SHORT $LN58@P_MobjChec
  009c3	68 00 00 fa ff	 push	 -393216			; fffa0000H
  009c8	68 00 00 64 00	 push	 6553600			; 00640000H
  009cd	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  009d0	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  009d7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  009da	51		 push	 ecx
  009db	e8 00 00 00 00	 call	 _FixedDiv
  009e0	83 c4 08	 add	 esp, 8
  009e3	50		 push	 eax
  009e4	e8 00 00 00 00	 call	 _FixedMul
  009e9	83 c4 08	 add	 esp, 8
  009ec	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  009ef	39 42 50	 cmp	 DWORD PTR [edx+80], eax
  009f2	7d 2f		 jge	 SHORT $LN58@P_MobjChec

; 2417 : 					mobj->momz = FIXEDSCALE(-6*FRACUNIT, mobj->scale);

  009f4	68 00 00 fa ff	 push	 -393216			; fffa0000H
  009f9	68 00 00 64 00	 push	 6553600			; 00640000H
  009fe	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a01	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00a08	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00a0b	51		 push	 ecx
  00a0c	e8 00 00 00 00	 call	 _FixedDiv
  00a11	83 c4 08	 add	 esp, 8
  00a14	50		 push	 eax
  00a15	e8 00 00 00 00	 call	 _FixedMul
  00a1a	83 c4 08	 add	 esp, 8
  00a1d	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00a20	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN58@P_MobjChec:

; 2418 : 			}
; 2419 : 
; 2420 : 		}

  00a23	e9 d9 01 00 00	 jmp	 $LN65@P_MobjChec
$LN44@P_MobjChec:

; 2421 : 		else if ((mobj->eflags & MFE_VERTICALFLIP && mobj->momz < 0) || (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->momz > 0))

  00a28	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a2b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00a31	83 e1 20	 and	 ecx, 32			; 00000020H
  00a34	74 09		 je	 SHORT $LN61@P_MobjChec
  00a36	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a39	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00a3d	7c 1f		 jl	 SHORT $LN60@P_MobjChec
$LN61@P_MobjChec:
  00a3f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a42	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00a48	83 e1 20	 and	 ecx, 32			; 00000020H
  00a4b	0f 85 b0 01 00
	00		 jne	 $LN65@P_MobjChec
  00a51	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a54	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00a58	0f 8e a3 01 00
	00		 jle	 $LN65@P_MobjChec
$LN60@P_MobjChec:

; 2422 : 		{
; 2423 : 			if ((mobj->eflags & MFE_VERTICALFLIP && mobj->z+(FIXEDSCALE(mobj->info->height, mobj->scale)>>1)-mobj->momz > mobj->waterbottom)
; 2424 : 				|| (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->z+(FIXEDSCALE(mobj->info->height, mobj->scale)>>1)-mobj->momz < mobj->watertop))

  00a5e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a61	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00a67	83 e1 20	 and	 ecx, 32			; 00000020H
  00a6a	74 4c		 je	 SHORT $LN64@P_MobjChec
  00a6c	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a6f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00a75	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00a78	52		 push	 edx
  00a79	68 00 00 64 00	 push	 6553600			; 00640000H
  00a7e	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00a81	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00a88	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00a8b	51		 push	 ecx
  00a8c	e8 00 00 00 00	 call	 _FixedDiv
  00a91	83 c4 08	 add	 esp, 8
  00a94	50		 push	 eax
  00a95	e8 00 00 00 00	 call	 _FixedMul
  00a9a	83 c4 08	 add	 esp, 8
  00a9d	d1 f8		 sar	 eax, 1
  00a9f	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00aa2	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00aa5	03 c8		 add	 ecx, eax
  00aa7	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00aaa	2b 4a 50	 sub	 ecx, DWORD PTR [edx+80]
  00aad	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00ab0	3b 88 c4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+196]
  00ab6	7f 62		 jg	 SHORT $LN63@P_MobjChec
$LN64@P_MobjChec:
  00ab8	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00abb	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00ac1	83 e1 20	 and	 ecx, 32			; 00000020H
  00ac4	0f 85 37 01 00
	00		 jne	 $LN65@P_MobjChec
  00aca	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00acd	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00ad3	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00ad6	52		 push	 edx
  00ad7	68 00 00 64 00	 push	 6553600			; 00640000H
  00adc	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00adf	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00ae6	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00ae9	51		 push	 ecx
  00aea	e8 00 00 00 00	 call	 _FixedDiv
  00aef	83 c4 08	 add	 esp, 8
  00af2	50		 push	 eax
  00af3	e8 00 00 00 00	 call	 _FixedMul
  00af8	83 c4 08	 add	 esp, 8
  00afb	d1 f8		 sar	 eax, 1
  00afd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b00	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00b03	03 c8		 add	 ecx, eax
  00b05	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b08	2b 4a 50	 sub	 ecx, DWORD PTR [edx+80]
  00b0b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b0e	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  00b14	0f 8d e7 00 00
	00		 jge	 $LN65@P_MobjChec
$LN63@P_MobjChec:

; 2425 : 			{
; 2426 : 				// Spawn a splash
; 2427 : 				if (!(mobj->type == MT_PLAYER && mobj->player->spectator))

  00b1a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b1d	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00b21	75 18		 jne	 SHORT $LN66@P_MobjChec
  00b23	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b26	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00b2c	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  00b33	85 d2		 test	 edx, edx
  00b35	0f 85 c6 00 00
	00		 jne	 $LN65@P_MobjChec
$LN66@P_MobjChec:

; 2428 : 				{
; 2429 : 					mobj_t *splish;
; 2430 : 					if (mobj->eflags & MFE_VERTICALFLIP)

  00b3b	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b3e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00b44	83 e1 20	 and	 ecx, 32			; 00000020H
  00b47	74 65		 je	 SHORT $LN67@P_MobjChec

; 2431 : 						splish = P_SpawnMobj(mobj->x, mobj->y, mobj->waterbottom-FIXEDSCALE(mobjinfo[MT_SPLISH].height*(16*FRACUNIT), mobj->scale), MT_SPLISH);

  00b49	68 b5 00 00 00	 push	 181			; 000000b5H
  00b4e	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00b53	69 c8 b5 00 00
	00		 imul	 ecx, eax, 181
  00b59	8b 91 44 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+68]
  00b5f	c1 e2 14	 shl	 edx, 20			; 00000014H
  00b62	52		 push	 edx
  00b63	68 00 00 64 00	 push	 6553600			; 00640000H
  00b68	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00b6b	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00b72	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00b75	51		 push	 ecx
  00b76	e8 00 00 00 00	 call	 _FixedDiv
  00b7b	83 c4 08	 add	 esp, 8
  00b7e	50		 push	 eax
  00b7f	e8 00 00 00 00	 call	 _FixedMul
  00b84	83 c4 08	 add	 esp, 8
  00b87	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b8a	8b 8a c4 00 00
	00		 mov	 ecx, DWORD PTR [edx+196]
  00b90	2b c8		 sub	 ecx, eax
  00b92	51		 push	 ecx
  00b93	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00b96	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00b99	50		 push	 eax
  00b9a	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00b9d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00ba0	52		 push	 edx
  00ba1	e8 00 00 00 00	 call	 _P_SpawnMobj
  00ba6	83 c4 10	 add	 esp, 16			; 00000010H
  00ba9	89 45 d4	 mov	 DWORD PTR _splish$2[ebp], eax
  00bac	eb 28		 jmp	 SHORT $LN68@P_MobjChec
$LN67@P_MobjChec:

; 2432 : 					else
; 2433 : 						splish = P_SpawnMobj(mobj->x, mobj->y, mobj->watertop, MT_SPLISH);

  00bae	68 b5 00 00 00	 push	 181			; 000000b5H
  00bb3	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bb6	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00bbc	51		 push	 ecx
  00bbd	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00bc0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00bc3	50		 push	 eax
  00bc4	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00bc7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00bca	52		 push	 edx
  00bcb	e8 00 00 00 00	 call	 _P_SpawnMobj
  00bd0	83 c4 10	 add	 esp, 16			; 00000010H
  00bd3	89 45 d4	 mov	 DWORD PTR _splish$2[ebp], eax
$LN68@P_MobjChec:

; 2434 : 					splish->destscale = mobj->scale;

  00bd6	8b 45 d4	 mov	 eax, DWORD PTR _splish$2[ebp]
  00bd9	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00bdc	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00be3	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2435 : 					P_SetScale(splish, mobj->scale);

  00bea	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00bed	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00bf4	51		 push	 ecx
  00bf5	8b 55 d4	 mov	 edx, DWORD PTR _splish$2[ebp]
  00bf8	52		 push	 edx
  00bf9	e8 00 00 00 00	 call	 _P_SetScale
  00bfe	83 c4 08	 add	 esp, 8
$LN65@P_MobjChec:

; 2436 : 				}
; 2437 : 			}
; 2438 : 		}
; 2439 : 
; 2440 : 		if (!(mobj->type == MT_PLAYER && mobj->player->spectator))

  00c01	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c04	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00c08	75 18		 jne	 SHORT $LN70@P_MobjChec
  00c0a	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c0d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c13	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  00c1a	85 d2		 test	 edx, edx
  00c1c	0f 85 a8 02 00
	00		 jne	 $LN6@P_MobjChec
$LN70@P_MobjChec:

; 2441 : 		{
; 2442 : 			S_StartSound(mobj, sfx_splish); // And make a sound!

  00c22	68 d6 00 00 00	 push	 214			; 000000d6H
  00c27	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c2a	50		 push	 eax
  00c2b	e8 00 00 00 00	 call	 _S_StartSound
  00c30	83 c4 08	 add	 esp, 8

; 2443 : 
; 2444 : 			bubblecount = FIXEDSCALE(abs(mobj->momz), mobj->scale)>>FRACBITS;

  00c33	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00c36	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00c39	51		 push	 ecx
  00c3a	e8 00 00 00 00	 call	 _abs
  00c3f	83 c4 04	 add	 esp, 4
  00c42	50		 push	 eax
  00c43	68 00 00 64 00	 push	 6553600			; 00640000H
  00c48	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00c4b	0f b7 82 cc 00
	00 00		 movzx	 eax, WORD PTR [edx+204]
  00c52	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c55	50		 push	 eax
  00c56	e8 00 00 00 00	 call	 _FixedDiv
  00c5b	83 c4 08	 add	 esp, 8
  00c5e	50		 push	 eax
  00c5f	e8 00 00 00 00	 call	 _FixedMul
  00c64	83 c4 08	 add	 esp, 8
  00c67	c1 f8 10	 sar	 eax, 16			; 00000010H
  00c6a	89 45 e4	 mov	 DWORD PTR _bubblecount$5[ebp], eax

; 2445 : 			// Create tons of bubbles
; 2446 : 			for (i = 0; i < bubblecount; i++)

  00c6d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  00c74	eb 09		 jmp	 SHORT $LN7@P_MobjChec
$LN5@P_MobjChec:
  00c76	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  00c79	83 c0 01	 add	 eax, 1
  00c7c	89 45 e8	 mov	 DWORD PTR _i$6[ebp], eax
$LN7@P_MobjChec:
  00c7f	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  00c82	3b 45 e4	 cmp	 eax, DWORD PTR _bubblecount$5[ebp]
  00c85	0f 8d 3f 02 00
	00		 jge	 $LN6@P_MobjChec

; 2447 : 			{
; 2448 : 				mobj_t *bubble;
; 2449 : 				// P_Random()s are called individually
; 2450 : 				// to allow consistency across various
; 2451 : 				// compilers, since the order of function
; 2452 : 				// calls in C is not part of the ANSI
; 2453 : 				// specification.
; 2454 : 				prandom[0] = P_Random();

  00c8b	e8 00 00 00 00	 call	 _P_Random
  00c90	b9 01 00 00 00	 mov	 ecx, 1
  00c95	6b d1 00	 imul	 edx, ecx, 0
  00c98	88 44 15 dc	 mov	 BYTE PTR _prandom$4[ebp+edx], al

; 2455 : 				prandom[1] = P_Random();

  00c9c	e8 00 00 00 00	 call	 _P_Random
  00ca1	b9 01 00 00 00	 mov	 ecx, 1
  00ca6	c1 e1 00	 shl	 ecx, 0
  00ca9	88 44 0d dc	 mov	 BYTE PTR _prandom$4[ebp+ecx], al

; 2456 : 				prandom[2] = P_Random();

  00cad	e8 00 00 00 00	 call	 _P_Random
  00cb2	b9 01 00 00 00	 mov	 ecx, 1
  00cb7	d1 e1		 shl	 ecx, 1
  00cb9	88 44 0d dc	 mov	 BYTE PTR _prandom$4[ebp+ecx], al

; 2457 : 				prandom[3] = P_Random();

  00cbd	e8 00 00 00 00	 call	 _P_Random
  00cc2	b9 01 00 00 00	 mov	 ecx, 1
  00cc7	6b d1 03	 imul	 edx, ecx, 3
  00cca	88 44 15 dc	 mov	 BYTE PTR _prandom$4[ebp+edx], al

; 2458 : 				prandom[4] = P_Random();

  00cce	e8 00 00 00 00	 call	 _P_Random
  00cd3	b9 01 00 00 00	 mov	 ecx, 1
  00cd8	c1 e1 02	 shl	 ecx, 2
  00cdb	88 44 0d dc	 mov	 BYTE PTR _prandom$4[ebp+ecx], al

; 2459 : 				prandom[5] = P_Random();

  00cdf	e8 00 00 00 00	 call	 _P_Random
  00ce4	b9 01 00 00 00	 mov	 ecx, 1
  00ce9	6b d1 05	 imul	 edx, ecx, 5
  00cec	88 44 15 dc	 mov	 BYTE PTR _prandom$4[ebp+edx], al

; 2460 : 
; 2461 : 				if (prandom[0] < 32)

  00cf0	b8 01 00 00 00	 mov	 eax, 1
  00cf5	6b c8 00	 imul	 ecx, eax, 0
  00cf8	0f b6 54 0d dc	 movzx	 edx, BYTE PTR _prandom$4[ebp+ecx]
  00cfd	83 fa 20	 cmp	 edx, 32			; 00000020H
  00d00	0f 8d a5 00 00
	00		 jge	 $LN71@P_MobjChec

; 2462 : 					bubble =

  00d06	b8 01 00 00 00	 mov	 eax, 1
  00d0b	c1 e0 02	 shl	 eax, 2
  00d0e	0f b6 4c 05 dc	 movzx	 ecx, BYTE PTR _prandom$4[ebp+eax]
  00d13	83 e1 01	 and	 ecx, 1
  00d16	74 09		 je	 SHORT $LN79@P_MobjChec
  00d18	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv764[ebp], 1
  00d1f	eb 07		 jmp	 SHORT $LN80@P_MobjChec
$LN79@P_MobjChec:
  00d21	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv764[ebp], -1
$LN80@P_MobjChec:
  00d28	ba 01 00 00 00	 mov	 edx, 1
  00d2d	d1 e2		 shl	 edx, 1
  00d2f	0f b6 44 15 dc	 movzx	 eax, BYTE PTR _prandom$4[ebp+edx]
  00d34	83 e0 01	 and	 eax, 1
  00d37	74 09		 je	 SHORT $LN81@P_MobjChec
  00d39	c7 45 88 01 00
	00 00		 mov	 DWORD PTR tv778[ebp], 1
  00d40	eb 07		 jmp	 SHORT $LN82@P_MobjChec
$LN81@P_MobjChec:
  00d42	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR tv778[ebp], -1
$LN82@P_MobjChec:
  00d49	68 b8 00 00 00	 push	 184			; 000000b8H
  00d4e	b9 01 00 00 00	 mov	 ecx, 1
  00d53	6b d1 05	 imul	 edx, ecx, 5
  00d56	0f b6 44 15 dc	 movzx	 eax, BYTE PTR _prandom$4[ebp+edx]
  00d5b	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00d5e	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00d61	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00d64	50		 push	 eax
  00d65	ba 01 00 00 00	 mov	 edx, 1
  00d6a	6b c2 03	 imul	 eax, edx, 3
  00d6d	0f b6 4c 05 dc	 movzx	 ecx, BYTE PTR _prandom$4[ebp+eax]
  00d72	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  00d75	0f af 4d 8c	 imul	 ecx, DWORD PTR tv764[ebp]
  00d79	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00d7c	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  00d7f	51		 push	 ecx
  00d80	b8 01 00 00 00	 mov	 eax, 1
  00d85	c1 e0 00	 shl	 eax, 0
  00d88	0f b6 4c 05 dc	 movzx	 ecx, BYTE PTR _prandom$4[ebp+eax]
  00d8d	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  00d90	0f af 4d 88	 imul	 ecx, DWORD PTR tv778[ebp]
  00d94	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00d97	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00d9a	51		 push	 ecx
  00d9b	e8 00 00 00 00	 call	 _P_SpawnMobj
  00da0	83 c4 10	 add	 esp, 16			; 00000010H
  00da3	89 45 d0	 mov	 DWORD PTR _bubble$1[ebp], eax
  00da6	e9 a0 00 00 00	 jmp	 $LN72@P_MobjChec
$LN71@P_MobjChec:

; 2463 : 					P_SpawnMobj(mobj->x + (prandom[1]<<(FRACBITS-3)) * (prandom[2]&1 ? 1 : -1),
; 2464 : 						mobj->y + (prandom[3]<<(FRACBITS-3)) * (prandom[4]&1 ? 1 : -1),
; 2465 : 						mobj->z + (prandom[5]<<(FRACBITS-2)), MT_MEDIUMBUBBLE);
; 2466 : 				else
; 2467 : 					bubble =

  00dab	b8 01 00 00 00	 mov	 eax, 1
  00db0	c1 e0 02	 shl	 eax, 2
  00db3	0f b6 4c 05 dc	 movzx	 ecx, BYTE PTR _prandom$4[ebp+eax]
  00db8	83 e1 01	 and	 ecx, 1
  00dbb	74 09		 je	 SHORT $LN83@P_MobjChec
  00dbd	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv801[ebp], 1
  00dc4	eb 07		 jmp	 SHORT $LN84@P_MobjChec
$LN83@P_MobjChec:
  00dc6	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv801[ebp], -1
$LN84@P_MobjChec:
  00dcd	ba 01 00 00 00	 mov	 edx, 1
  00dd2	d1 e2		 shl	 edx, 1
  00dd4	0f b6 44 15 dc	 movzx	 eax, BYTE PTR _prandom$4[ebp+edx]
  00dd9	83 e0 01	 and	 eax, 1
  00ddc	74 09		 je	 SHORT $LN85@P_MobjChec
  00dde	c7 45 88 01 00
	00 00		 mov	 DWORD PTR tv815[ebp], 1
  00de5	eb 07		 jmp	 SHORT $LN86@P_MobjChec
$LN85@P_MobjChec:
  00de7	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR tv815[ebp], -1
$LN86@P_MobjChec:
  00dee	68 b7 00 00 00	 push	 183			; 000000b7H
  00df3	b9 01 00 00 00	 mov	 ecx, 1
  00df8	6b d1 05	 imul	 edx, ecx, 5
  00dfb	0f b6 44 15 dc	 movzx	 eax, BYTE PTR _prandom$4[ebp+edx]
  00e00	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00e03	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00e06	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00e09	50		 push	 eax
  00e0a	ba 01 00 00 00	 mov	 edx, 1
  00e0f	6b c2 03	 imul	 eax, edx, 3
  00e12	0f b6 4c 05 dc	 movzx	 ecx, BYTE PTR _prandom$4[ebp+eax]
  00e17	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  00e1a	0f af 4d 8c	 imul	 ecx, DWORD PTR tv801[ebp]
  00e1e	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00e21	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  00e24	51		 push	 ecx
  00e25	b8 01 00 00 00	 mov	 eax, 1
  00e2a	c1 e0 00	 shl	 eax, 0
  00e2d	0f b6 4c 05 dc	 movzx	 ecx, BYTE PTR _prandom$4[ebp+eax]
  00e32	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  00e35	0f af 4d 88	 imul	 ecx, DWORD PTR tv815[ebp]
  00e39	8b 55 08	 mov	 edx, DWORD PTR _mobj$[ebp]
  00e3c	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00e3f	51		 push	 ecx
  00e40	e8 00 00 00 00	 call	 _P_SpawnMobj
  00e45	83 c4 10	 add	 esp, 16			; 00000010H
  00e48	89 45 d0	 mov	 DWORD PTR _bubble$1[ebp], eax
$LN72@P_MobjChec:

; 2468 : 					P_SpawnMobj(mobj->x + (prandom[1]<<(FRACBITS-3)) * (prandom[2]&1 ? 1 : -1),
; 2469 : 						mobj->y + (prandom[3]<<(FRACBITS-3)) * (prandom[4]&1 ? 1 : -1),
; 2470 : 						mobj->z + (prandom[5]<<(FRACBITS-2)), MT_SMALLBUBBLE);
; 2471 : 
; 2472 : 				if (bubble)

  00e4b	83 7d d0 00	 cmp	 DWORD PTR _bubble$1[ebp], 0
  00e4f	74 74		 je	 SHORT $LN73@P_MobjChec

; 2473 : 				{
; 2474 : 					if ((mobj->eflags & MFE_VERTICALFLIP && mobj->momz > 0)
; 2475 : 					    || (!(mobj->eflags & MFE_VERTICALFLIP) && mobj->momz < 0))

  00e51	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e54	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00e5a	83 e1 20	 and	 ecx, 32			; 00000020H
  00e5d	74 09		 je	 SHORT $LN77@P_MobjChec
  00e5f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e62	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00e66	7f 17		 jg	 SHORT $LN76@P_MobjChec
$LN77@P_MobjChec:
  00e68	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e6b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00e71	83 e1 20	 and	 ecx, 32			; 00000020H
  00e74	75 1a		 jne	 SHORT $LN74@P_MobjChec
  00e76	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e79	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00e7d	7d 11		 jge	 SHORT $LN74@P_MobjChec
$LN76@P_MobjChec:

; 2476 : 						bubble->momz = mobj->momz >> 4;

  00e7f	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00e82	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00e85	c1 f9 04	 sar	 ecx, 4
  00e88	8b 55 d0	 mov	 edx, DWORD PTR _bubble$1[ebp]
  00e8b	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  00e8e	eb 0a		 jmp	 SHORT $LN75@P_MobjChec
$LN74@P_MobjChec:

; 2477 : 					else
; 2478 : 						bubble->momz = 0;

  00e90	8b 45 d0	 mov	 eax, DWORD PTR _bubble$1[ebp]
  00e93	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN75@P_MobjChec:

; 2479 : 
; 2480 : 					bubble->destscale = mobj->scale;

  00e9a	8b 45 d0	 mov	 eax, DWORD PTR _bubble$1[ebp]
  00e9d	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00ea0	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  00ea7	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2481 : 					P_SetScale(bubble, mobj->scale);

  00eae	8b 45 08	 mov	 eax, DWORD PTR _mobj$[ebp]
  00eb1	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00eb8	51		 push	 ecx
  00eb9	8b 55 d0	 mov	 edx, DWORD PTR _bubble$1[ebp]
  00ebc	52		 push	 edx
  00ebd	e8 00 00 00 00	 call	 _P_SetScale
  00ec2	83 c4 08	 add	 esp, 8
$LN73@P_MobjChec:

; 2482 : 				}
; 2483 : 			}

  00ec5	e9 ac fd ff ff	 jmp	 $LN5@P_MobjChec
$LN6@P_MobjChec:

; 2484 : 		}
; 2485 : 	}
; 2486 : }

  00eca	5f		 pop	 edi
  00ecb	5e		 pop	 esi
  00ecc	5b		 pop	 ebx
  00ecd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ed0	33 cd		 xor	 ecx, ebp
  00ed2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ed7	8b e5		 mov	 esp, ebp
  00ed9	5d		 pop	 ebp
  00eda	c3		 ret	 0
_P_MobjCheckWater ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_AddCachedAction
_TEXT	SEGMENT
_newaction$ = -4					; size = 4
_mobj$ = 8						; size = 4
_statenum$ = 12						; size = 4
_P_AddCachedAction PROC					; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	actioncache_t *newaction = Z_Calloc(sizeof(actioncache_t), PU_LEVEL, NULL);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 32		 push	 50			; 00000032H
  0000f	6a 10		 push	 16			; 00000010H
  00011	e8 00 00 00 00	 call	 _Z_CallocAlign
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	89 45 fc	 mov	 DWORD PTR _newaction$[ebp], eax

; 79   : 	newaction->mobj = mobj;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _newaction$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _mobj$[ebp]
  00022	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 80   : 	newaction->statenum = statenum;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _newaction$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _statenum$[ebp]
  0002b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 81   : 	actioncachehead.prev->next = newaction;

  0002e	a1 04 00 00 00	 mov	 eax, DWORD PTR _actioncachehead+4
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _newaction$[ebp]
  00036	89 08		 mov	 DWORD PTR [eax], ecx

; 82   : 	newaction->next = &actioncachehead;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _newaction$[ebp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _actioncachehead

; 83   : 	newaction->prev = actioncachehead.prev;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _newaction$[ebp]
  00044	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _actioncachehead+4
  0004a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 84   : 	actioncachehead.prev = newaction;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _newaction$[ebp]
  00050	a3 04 00 00 00	 mov	 DWORD PTR _actioncachehead+4, eax

; 85   : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_P_AddCachedAction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_RunCachedActions
_TEXT	SEGMENT
_next$ = -8						; size = 4
_ac$ = -4						; size = 4
_P_RunCachedActions PROC				; COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	actioncache_t *ac;
; 64   : 	actioncache_t *next;
; 65   : 
; 66   : 	for (ac = actioncachehead.next; ac != &actioncachehead; ac = next)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _actioncachehead
  0000e	89 45 fc	 mov	 DWORD PTR _ac$[ebp], eax
  00011	eb 06		 jmp	 SHORT $LN4@P_RunCache
$LN2@P_RunCache:
  00013	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00016	89 45 fc	 mov	 DWORD PTR _ac$[ebp], eax
$LN4@P_RunCache:
  00019	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _ac$[ebp], OFFSET _actioncachehead
  00020	74 55		 je	 SHORT $LN3@P_RunCache

; 67   : 	{
; 68   : 		var1 = states[ac->statenum].var1;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _ac$[ebp]
  00025	6b 48 0c 1c	 imul	 ecx, DWORD PTR [eax+12], 28
  00029	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR _states[ecx+16]
  0002f	89 15 00 00 00
	00		 mov	 DWORD PTR _var1, edx

; 69   : 		var2 = states[ac->statenum].var2;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _ac$[ebp]
  00038	6b 48 0c 1c	 imul	 ecx, DWORD PTR [eax+12], 28
  0003c	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR _states[ecx+20]
  00042	89 15 00 00 00
	00		 mov	 DWORD PTR _var2, edx

; 70   : 		states[ac->statenum].action.acp1(ac->mobj);

  00048	8b 45 fc	 mov	 eax, DWORD PTR _ac$[ebp]
  0004b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004e	51		 push	 ecx
  0004f	8b 55 fc	 mov	 edx, DWORD PTR _ac$[ebp]
  00052	6b 42 0c 1c	 imul	 eax, DWORD PTR [edx+12], 28
  00056	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR _states[eax+12]
  0005c	ff d1		 call	 ecx
  0005e	83 c4 04	 add	 esp, 4

; 71   : 		next = ac->next;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _ac$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	89 4d f8	 mov	 DWORD PTR _next$[ebp], ecx

; 72   : 		Z_Free(ac);

  00069	8b 45 fc	 mov	 eax, DWORD PTR _ac$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _Z_Free
  00072	83 c4 04	 add	 esp, 4

; 73   : 	}

  00075	eb 9c		 jmp	 SHORT $LN2@P_RunCache
$LN3@P_RunCache:

; 74   : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_P_RunCachedActions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_mobj.c
;	COMDAT _P_InitCachedActions
_TEXT	SEGMENT
_P_InitCachedActions PROC				; COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 58   : 	actioncachehead.prev = actioncachehead.next = &actioncachehead;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _actioncachehead, OFFSET _actioncachehead
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _actioncachehead
  00018	a3 04 00 00 00	 mov	 DWORD PTR _actioncachehead+4, eax

; 59   : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_P_InitCachedActions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_FixedInt PROC						; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 222  : 	return FixedMul(a, 1);

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _FixedMul
  00014	83 c4 08	 add	 esp, 8

; 223  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_FixedInt ENDP
_TEXT	ENDS
END
