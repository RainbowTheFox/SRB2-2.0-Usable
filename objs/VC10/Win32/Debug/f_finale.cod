; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\f_finale.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_titlescrollspeed
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_credits:BYTE:09a86H
_DATA	ENDS
_DATA	SEGMENT
_titlescrollspeed DD 050H
_DATA	ENDS
PUBLIC	_F_IntroResponder
PUBLIC	_F_CutsceneResponder
PUBLIC	_F_CreditResponder
PUBLIC	_F_GameEndTicker
PUBLIC	_F_IntroTicker
PUBLIC	_F_TitleScreenTicker
PUBLIC	_F_CutsceneTicker
PUBLIC	_F_GameEndDrawer
PUBLIC	_F_IntroDrawer
PUBLIC	_F_TitleScreenDrawer
PUBLIC	_F_GameEvaluationDrawer
PUBLIC	_F_StartGameEvaluation
PUBLIC	_F_GameEvaluationTicker
PUBLIC	_F_CreditTicker
PUBLIC	_F_CreditDrawer
PUBLIC	_F_StartCustomCutscene
PUBLIC	_F_CutsceneDrawer
PUBLIC	_F_EndCutScene
PUBLIC	_F_StartGameEnd
PUBLIC	_F_StartIntro
PUBLIC	_F_StartTitleScreen
PUBLIC	_F_StartCredits
PUBLIC	??_C@_08JCGAACFF@TTBANNER@			; `string'
PUBLIC	??_C@_06ILAFNKKA@TTWING@			; `string'
PUBLIC	??_C@_07BDEGCAEI@TTSONIC@			; `string'
PUBLIC	??_C@_08NPGLKEGM@TTSWAVE1@			; `string'
PUBLIC	??_C@_08PEEGPHKP@TTSWAVE2@			; `string'
PUBLIC	??_C@_07NAPPEHDJ@TTSWIP1@			; `string'
PUBLIC	??_C@_08LNGPOAGM@TTSPREP1@			; `string'
PUBLIC	??_C@_08JGECLDKP@TTSPREP2@			; `string'
PUBLIC	??_C@_07EHLEMEPF@TTSPOP1@			; `string'
PUBLIC	??_C@_07GMJJJHDG@TTSPOP2@			; `string'
PUBLIC	??_C@_07HFICKGHH@TTSPOP3@			; `string'
PUBLIC	??_C@_07DKMDDALA@TTSPOP4@			; `string'
PUBLIC	??_C@_07CDNIABPB@TTSPOP5@			; `string'
PUBLIC	??_C@_07IPFFCDC@TTSPOP6@			; `string'
PUBLIC	??_C@_07BBOOGDHD@TTSPOP7@			; `string'
PUBLIC	??_C@_0BD@KBPNJLJK@Sonic?5Team?5Junior?6@	; `string'
PUBLIC	??_C@_06OMLHDFEG@Staff?6@			; `string'
PUBLIC	??_C@_09CJBJOCBJ@Producer?6@			; `string'
PUBLIC	??_C@_09GECGHFPB@SSNTails?6@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_09PCHKBJ@Director?6@			; `string'
PUBLIC	??_C@_08FIADJLA@Sonikku?6@			; `string'
PUBLIC	??_C@_0L@BCGGBAGL@Art?5Freda?6@			; `string'
PUBLIC	??_C@_0BB@LADCMIKH@Johnny?5Wallbank?6@		; `string'
PUBLIC	??_C@_0BA@BMEKDKNI@Game?5Designers?6@		; `string'
PUBLIC	??_C@_07CGABHOEI@Mystic?6@			; `string'
PUBLIC	??_C@_0L@MMHABNEM@Ben?5Geyer?6@			; `string'
PUBLIC	??_C@_0BF@EGICIMND@Character?5Designers?6@	; `string'
PUBLIC	??_C@_0P@MCBBMPCF@Instant?5Sonic?6@		; `string'
PUBLIC	??_C@_0BC@MGMCMBL@David?5Spencer?5Jr?6@		; `string'
PUBLIC	??_C@_0P@LGPJHBKG@Visual?5Design?6@		; `string'
PUBLIC	??_C@_0BC@LFBFOFCI@Landscape?5Design?6@		; `string'
PUBLIC	??_C@_05ECEJEDFC@JEV3?6@			; `string'
PUBLIC	??_C@_0BA@NNGHIBBA@Jarrett?5Voight?6@		; `string'
PUBLIC	??_C@_0BC@DKDNFNJE@Chief?5Programmer?6@		; `string'
PUBLIC	??_C@_0N@GBMEDIOO@Programmers?6@		; `string'
PUBLIC	??_C@_09IPFPHBHJ@Alam_GBC?6@			; `string'
PUBLIC	??_C@_05ODKHGMFP@Jazz?6@			; `string'
PUBLIC	??_C@_06OJJFCIKO@Graue?6@			; `string'
PUBLIC	??_C@_0L@PHICNBLE@MattW?5CFI?6@			; `string'
PUBLIC	??_C@_09JHBHCPNM@Orospakr?6@			; `string'
PUBLIC	??_C@_0M@CLMEMF@Alam?5Arias?6@			; `string'
PUBLIC	??_C@_0P@KPCANGL@Nathan?5Giroux?6@		; `string'
PUBLIC	??_C@_0O@EKAJOICO@Scott?5Feeney?6@		; `string'
PUBLIC	??_C@_0P@FONOKPEG@Matthew?5Walsh?6@		; `string'
PUBLIC	??_C@_0P@NBCJDPHE@Andrew?5Clunis?6@		; `string'
PUBLIC	??_C@_0BD@HNAGEIOC@Coding?5Assistants?6@	; `string'
PUBLIC	??_C@_0O@JOFBLDDC@StroggOnMeth?6@		; `string'
PUBLIC	??_C@_0BA@CALIHNLP@Cyan?5Helkaraxe?6@		; `string'
PUBLIC	??_C@_0L@DKKNEAIG@Logan_GBA?6@			; `string'
PUBLIC	??_C@_08OCKLBFDA@Shuffle?6@			; `string'
PUBLIC	??_C@_09LCFNPBLI@Oogaland?6@			; `string'
PUBLIC	??_C@_0BD@JMGAHFBH@Jason?5the?5Echidna?6@	; `string'
PUBLIC	??_C@_0BD@MHMBHHJL@Steven?5McGranahan?6@	; `string'
PUBLIC	??_C@_0N@LIBBNPBP@Logan?5Arias?6@		; `string'
PUBLIC	??_C@_0P@NBGKPPC@Matt?5Marsalko?6@		; `string'
PUBLIC	??_C@_0N@NPLLDMHC@Gregor?5Dick?6@		; `string'
PUBLIC	??_C@_0P@MLNFKIDC@John?5J?4?5Muniz?6@		; `string'
PUBLIC	??_C@_0BB@KHAFHAA@Level?5Designers?6@		; `string'
PUBLIC	??_C@_07OMAFPNFK@Digiku?6@			; `string'
PUBLIC	??_C@_06NACMEICI@Torgo?6@			; `string'
PUBLIC	??_C@_06BHAIKGNI@Nev3r?6@			; `string'
PUBLIC	??_C@_07GADAAEGG@Spazzo?6@			; `string'
PUBLIC	??_C@_0L@GCBOBNOH@FoxBlitzz?6@			; `string'
PUBLIC	??_C@_0N@HPFMNJMM@Marco?5Zafra?6@		; `string'
PUBLIC	??_C@_0O@MNMFMOLG@Erik?5Nielsen?6@		; `string'
PUBLIC	??_C@_0N@HIGLMCBN@Pedro?5Iceta?6@		; `string'
PUBLIC	??_C@_0BD@HPPNAFOB@Michael?5Antonakes?6@	; `string'
PUBLIC	??_C@_0BB@JPNLCLGG@Dan?5Hagerstrand?6@		; `string'
PUBLIC	??_C@_0BB@JBECPOOC@Texture?5Artists?6@		; `string'
PUBLIC	??_C@_09NFFODGKA@KinkaJoy?6@			; `string'
PUBLIC	??_C@_0BA@LOCFEEIM@Blaze?5Hedgehog?6@		; `string'
PUBLIC	??_C@_0P@DCFNHKJD@Buddy?5Fischer?6@		; `string'
PUBLIC	??_C@_0M@OMJCNKBK@Ryan?5Bloom?6@		; `string'
PUBLIC	??_C@_0BC@PKDCFNFP@Music?5Production?6@		; `string'
PUBLIC	??_C@_09KKBJIDDC@Bulmybag?6@			; `string'
PUBLIC	??_C@_06INADDACD@Arrow?6@			; `string'
PUBLIC	??_C@_05CCCBGNLM@Stuf?6@			; `string'
PUBLIC	??_C@_08MGKNMLAP@Red?5XVI?6@			; `string'
PUBLIC	??_C@_0O@HFDJECEN@David?5Bulmer?6@		; `string'
PUBLIC	??_C@_0N@IJHEDNFB@Jarel?5Jones?6@		; `string'
PUBLIC	??_C@_0BA@DFEKEFFP@Stefan?5Rimalia?6@		; `string'
PUBLIC	??_C@_0P@FIHBHKEN@Malcolm?5Brown?6@		; `string'
PUBLIC	??_C@_0N@DMELANFD@Lead?5Guitar?6@		; `string'
PUBLIC	??_C@_0P@HCPIMDBA@Big?5Wave?5Dave?6@		; `string'
PUBLIC	??_C@_0O@JOEMEBPG@Shane?5Strife?6@		; `string'
PUBLIC	??_C@_0BC@CBHNDEAO@David?5Spencer?5Sr?6@	; `string'
PUBLIC	??_C@_0O@BHFDAGLC@Shane?5Sexton?6@		; `string'
PUBLIC	??_C@_0P@CANDPA@Sound?5Effects?6@		; `string'
PUBLIC	??_C@_05IAPOFKBP@Sega?6@			; `string'
PUBLIC	??_C@_0BB@LJCACEOB@Various?5Sources?6@		; `string'
PUBLIC	??_C@_0BB@FNNGLPBI@Official?5Mascot?6@		; `string'
PUBLIC	??_C@_0BE@HBHJPCCD@Sky?5Sanctuary?5Team?6@	; `string'
PUBLIC	??_C@_09LMFFDHHO@Boinciel?6@			; `string'
PUBLIC	??_C@_0O@DMHPLHEB@Dark?5Warrior?6@		; `string'
PUBLIC	??_C@_06EKGHLGFN@Senku?6@			; `string'
PUBLIC	??_C@_0M@IBGLOBIB@Shadow?5Hog?6@		; `string'
PUBLIC	??_C@_07BKNCODEC@Sonict?6@			; `string'
PUBLIC	??_C@_0N@OFLDDPLL@SRB2?5Playah?6@		; `string'
PUBLIC	??_C@_06KEFALBMK@ST218?6@			; `string'
PUBLIC	??_C@_05MAPFOFMI@Tets?6@			; `string'
PUBLIC	??_C@_06GKNEFEBI@Blade?6@			; `string'
PUBLIC	??_C@_07GAAPIJFM@KO?4T?4E?6@			; `string'
PUBLIC	??_C@_0P@NNDOIPIG@Chaos?5Zero?564?6@		; `string'
PUBLIC	??_C@_08DHFKHAP@Prime?52?6@			; `string'
PUBLIC	??_C@_0P@GIHLCEHO@Paul?5Clempson?6@		; `string'
PUBLIC	??_C@_0N@LBIBKCEP@Rob?5Tisdell?6@		; `string'
PUBLIC	??_C@_0O@LFNHHNDF@Andrew?5Moran?6@		; `string'
PUBLIC	??_C@_0N@ICFKNPLH@Thomas?5Igoe?6@		; `string'
PUBLIC	??_C@_0N@EBDDAIIO@Colin?5Pfaff?6@		; `string'
PUBLIC	??_C@_0O@HHHNEFMC@Cody?5Koester?6@		; `string'
PUBLIC	??_C@_0N@CMKKAHGC@Nick?5Molina?6@		; `string'
PUBLIC	??_C@_0L@GMFNOCNJ@Bill?5Reed?6@			; `string'
PUBLIC	??_C@_0M@HKDCHMOA@Desmond?5D?4?6@		; `string'
PUBLIC	??_C@_0M@IFBJBNGJ@Sherman?5D?4?6@		; `string'
PUBLIC	??_C@_0M@OELNHJGM@Julio?5Guir?6@		; `string'
PUBLIC	??_C@_0P@BLCCHNBF@Samuel?5Peters?6@		; `string'
PUBLIC	??_C@_0BA@OOKFJIJE@Special?5Thanks?6@		; `string'
PUBLIC	??_C@_0BF@NHCGKMPK@Doom?5Legacy?5Project?6@	; `string'
PUBLIC	??_C@_0N@NEPOKOHL@iD?5Software?6@		; `string'
PUBLIC	??_C@_0M@KKMHLIDG@Dave?5Perry?6@		; `string'
PUBLIC	??_C@_08DBFIAKJE@MistaED?6@			; `string'
PUBLIC	??_C@_08NNGJHBNL@Chrispy?6@			; `string'
PUBLIC	??_C@_0N@CIBAJPGB@Alex?5Fuller?6@		; `string'
PUBLIC	??_C@_0N@DKFEHDAC@Chris?5Pryor?6@		; `string'
PUBLIC	??_C@_0BD@PBLBONPL@In?5Fond?5Memory?5Of?6@	; `string'
PUBLIC	??_C@_0O@OGCNMMHL@Naoto?5Oshima?6@		; `string'
PUBLIC	??_C@_0BA@LOMABDIN@Howard?5Drossin?6@		; `string'
PUBLIC	??_C@_06JHFOBIFK@INTRO1@			; `string'
PUBLIC	??_C@_06LMHDELJJ@INTRO2@			; `string'
PUBLIC	??_C@_06KFGIHKNI@INTRO3@			; `string'
PUBLIC	??_C@_06OKCJOMBP@INTRO4@			; `string'
PUBLIC	??_C@_04FKCFEOOF@DRAT@				; `string'
PUBLIC	??_C@_06NIBPIOJN@INTRO6@			; `string'
PUBLIC	??_C@_07JFBCHAFG@SGRASS1@			; `string'
PUBLIC	??_C@_08PPAHMNMM@WATCHING@			; `string'
PUBLIC	??_C@_07JBDFIAPG@ZOOMING@			; `string'
PUBLIC	??_C@_06PDDCNNFO@INTRO5@			; `string'
PUBLIC	??_C@_07FCDJLNCL@REVENGE@			; `string'
PUBLIC	??_C@_08CIEJDDJP@SONICDO1@			; `string'
PUBLIC	??_C@_06MBAELPNM@INTRO7@			; `string'
PUBLIC	??_C@_0O@JKHCCLEJ@SONIC?5TEAM?5JR@		; `string'
PUBLIC	??_C@_08PBHFAONH@PRESENTS@			; `string'
PUBLIC	??_C@_08JNEFGFGK@BRITEGG1@			; `string'
PUBLIC	??_C@_08ILDCFCFC@DARKEGG1@			; `string'
PUBLIC	??_C@_08LGGIDGKJ@BRITEGG2@			; `string'
PUBLIC	??_C@_08KABPABJB@DARKEGG2@			; `string'
PUBLIC	??_C@_08KPHDAHOI@BRITEGG3@			; `string'
PUBLIC	??_C@_08LJAEDANA@DARKEGG3@			; `string'
PUBLIC	??_C@_04BAKJJPGC@RUN2@				; `string'
PUBLIC	??_C@_08MEMFBEHC@PEELOUT2@			; `string'
PUBLIC	??_C@_04DLIEMMKB@RUN1@				; `string'
PUBLIC	??_C@_08OPOIEHLB@PEELOUT1@			; `string'
PUBLIC	??_C@_07PBHOLFFC@SGRASS5@			; `string'
PUBLIC	??_C@_08DJDALLEE@TAILSSAD@			; `string'
PUBLIC	??_C@_0L@MHFGEKEL@ROID00?$CF?42d@		; `string'
PUBLIC	??_C@_05IHELJBBC@RADAR@				; `string'
PUBLIC	??_C@_08OGBGAPNN@CONFRONT@			; `string'
PUBLIC	??_C@_08DGEGAFM@SONICDO2@			; `string'
PUBLIC	??_C@_07LODPCDJF@SGRASS2@			; `string'
PUBLIC	??_C@_07KHCEBCNE@SGRASS3@			; `string'
PUBLIC	??_C@_07OIGFIEBD@SGRASS4@			; `string'
PUBLIC	??_C@_08PBIHNGBH@TITLESKY@			; `string'
PUBLIC	??_C@_0O@PONKNMCD@GOT?5THEM?5ALL?$CB@		; `string'
PUBLIC	??_C@_0L@EDEMLEMF@TRY?5AGAIN?$CB@		; `string'
PUBLIC	??_C@_06EAFLPJMC@CEMGA0@			; `string'
PUBLIC	??_C@_06ECBNEHJL@CEMGB0@			; `string'
PUBLIC	??_C@_06EDNPCNKM@CEMGC0@			; `string'
PUBLIC	??_C@_06EGJADLCJ@CEMGD0@			; `string'
PUBLIC	??_C@_06EHFCFBBO@CEMGE0@			; `string'
PUBLIC	??_C@_06EFBEOPEH@CEMGF0@			; `string'
PUBLIC	??_C@_06EENGIFHA@CEMGG0@			; `string'
PUBLIC	??_C@_06CIDCEBEC@NWNGA0@			; `string'
PUBLIC	??_C@_09CLFOIIFH@Unlocked?3@			; `string'
PUBLIC	??_C@_0N@BOMJPEGC@Level?5Select@		; `string'
PUBLIC	??_C@_0M@OHCNEKBN@SRB1?5Remake@			; `string'
PUBLIC	??_C@_05DNPMPGMD@Mario@				; `string'
PUBLIC	??_C@_0O@MKKBLIHF@Pandora?8s?5Box@		; `string'
PUBLIC	??_C@_06BHAMAMEH@NiGHTS@			; `string'
PUBLIC	??_C@_0CG@NDPDHFLA@Prizes?5only?6awarded?5in?6single?5p@ ; `string'
PUBLIC	??_C@_0CG@KNDGDBHJ@Prizes?5not?6awarded?5in?6modified?5@ ; `string'
PUBLIC	??_C@_07GDBINEP@ACRED02@			; `string'
PUBLIC	??_C@_08JIKKHCGD@CREDIT01@			; `string'
PUBLIC	??_C@_07CNBMNOIM@ACRED01@			; `string'
PUBLIC	??_C@_07BPCKLMAO@ACRED03@			; `string'
PUBLIC	??_C@_08KLFOHKNG@CREDIT13@			; `string'
PUBLIC	??_C@_08LCEFELJH@CREDIT12@			; `string'
PUBLIC	??_C@_07FAGLCKMJ@ACRED04@			; `string'
PUBLIC	??_C@_08KKJMBAOB@CREDIT03@			; `string'
PUBLIC	??_C@_07EJHABLII@ACRED05@			; `string'
PUBLIC	??_C@_08JJGIBIFE@CREDIT11@			; `string'
PUBLIC	??_C@_07GCFNEIEL@ACRED06@			; `string'
PUBLIC	??_C@_08OFNNIGCG@CREDIT04@			; `string'
PUBLIC	??_C@_07HLEGHJAK@ACRED07@			; `string'
PUBLIC	??_C@_08IAHDCJBF@CREDIT10@			; `string'
PUBLIC	??_C@_07OFMFFEIE@ACRED09@			; `string'
PUBLIC	??_C@_08PMMGLHGH@CREDIT05@			; `string'
PUBLIC	??_C@_07CMNOLELL@ACRED11@			; `string'
PUBLIC	??_C@_08NHOLOEKE@CREDIT06@			; `string'
PUBLIC	??_C@_07PMNOGFMF@ACRED08@			; `string'
PUBLIC	??_C@_07DFMFIFPK@ACRED10@			; `string'
PUBLIC	??_C@_08MOPANFOF@CREDIT07@			; `string'
PUBLIC	??_C@_08EJGIMJCK@CREDIT08@			; `string'
PUBLIC	??_C@_08FAHDPIGL@CREDIT09@			; `string'
PUBLIC	__real@42e00000
EXTRN	_toupper:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_va:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedAngle:PROC
EXTRN	_D_MapChange:PROC
EXTRN	_W_CachePatchName:PROC
EXTRN	_D_StartTitle:PROC
EXTRN	_F_WipeStartScreen:PROC
EXTRN	_F_WipeEndScreen:PROC
EXTRN	_F_RunWipe:PROC
EXTRN	_G_SaveGameData:PROC
EXTRN	_G_SaveGame:PROC
EXTRN	_G_NextLevel:PROC
EXTRN	_G_SetGamestate:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_S_ChangeMusic:PROC
EXTRN	_S_StopMusic:PROC
EXTRN	_I_UpdateNoBlit:PROC
EXTRN	_I_FinishUpdate:PROC
EXTRN	_V_DrawScaledPatch:PROC
EXTRN	_V_DrawSmallScaledPatch:PROC
EXTRN	_V_DrawTranslucentPatch:PROC
EXTRN	_V_DrawFill:PROC
EXTRN	_V_DrawString:PROC
EXTRN	_V_DrawCreditString:PROC
EXTRN	_V_CreditStringWidth:PROC
EXTRN	_V_StringWidth:PROC
EXTRN	_I_GetTime:PROC
EXTRN	_I_OsPolling:PROC
EXTRN	_M_Drawer:PROC
EXTRN	_M_GotLowEnoughTime:PROC
EXTRN	_M_GotEnoughEmblems:PROC
EXTRN	_CON_ClearHUD:PROC
EXTRN	_CON_ToggleOff:PROC
EXTRN	_Y_EndGame:PROC
EXTRN	_gamestate:DWORD
EXTRN	_ultimatemode:BYTE
EXTRN	_gameaction:DWORD
EXTRN	_finesine:BYTE
EXTRN	_finecosine:DWORD
EXTRN	_gamemap:WORD
EXTRN	_cursaveslot:DWORD
EXTRN	_modifiedgame:DWORD
EXTRN	_savemoddata:DWORD
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_paused:BYTE
EXTRN	_looptitle:DWORD
EXTRN	_cutscenes:BYTE
EXTRN	_mapheaderinfo:BYTE
EXTRN	_emeralds:WORD
EXTRN	_numemblems:DWORD
EXTRN	_emblemlocations:BYTE
EXTRN	_introtoplay:BYTE
EXTRN	_creditscutscene:BYTE
EXTRN	_grade:DWORD
EXTRN	_timesbeaten:DWORD
EXTRN	_wipegamestate:DWORD
EXTRN	_text:BYTE
EXTRN	_cv_realnames:BYTE
EXTRN	_server:DWORD
EXTRN	_adminplayer:DWORD
EXTRN	_serverplayer:DWORD
EXTRN	_vid:BYTE
EXTRN	_players:BYTE
EXTRN	_nextmap:WORD
EXTRN	_hu_font:BYTE
EXTRN	_playerdeadview:DWORD
EXTRN	_rendermode:DWORD
EXTRN	_screens:BYTE
EXTRN	_customsecretinfo:BYTE
EXTRN	_modcredits:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_finalestage DD	01H DUP (?)
_finalecount DD	01H DUP (?)
_timetonext DD	01H DUP (?)
_finaletextcount DD 01H DUP (?)
_animtimer DD	01H DUP (?)
_roidtics DD	01H DUP (?)
_deplete DD	01H DUP (?)
_stoptimer DD	01H DUP (?)
_scene	DD	01H DUP (?)
_finaletext DD	01H DUP (?)
_keypressed DD	01H DUP (?)
_background DD	01H DUP (?)
_currentanim DD	01H DUP (?)
_nextanim DD	01H DUP (?)
_first	DD	01H DUP (?)
_second	DD	01H DUP (?)
_third	DD	01H DUP (?)
_ttbanner DD	01H DUP (?)
_ttwing	DD	01H DUP (?)
_ttsonic DD	01H DUP (?)
_ttswave1 DD	01H DUP (?)
_ttswave2 DD	01H DUP (?)
_ttswip1 DD	01H DUP (?)
_ttsprep1 DD	01H DUP (?)
_ttsprep2 DD	01H DUP (?)
_ttspop1 DD	01H DUP (?)
_ttspop2 DD	01H DUP (?)
_ttspop3 DD	01H DUP (?)
_ttspop4 DD	01H DUP (?)
_ttspop5 DD	01H DUP (?)
_ttspop6 DD	01H DUP (?)
_ttspop7 DD	01H DUP (?)
_drawemblem DD	01H DUP (?)
_drawchaosemblem DD 01H DUP (?)
_runningprecutscene DD 01H DUP (?)
_precutresetplayer DD 01H DUP (?)
_scenenum DD	01H DUP (?)
_cutnum	DD	01H DUP (?)
_picxpos DD	01H DUP (?)
_picypos DD	01H DUP (?)
_picnum	DD	01H DUP (?)
_pictime DD	01H DUP (?)
_textxpos DD	01H DUP (?)
_textypos DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@42e00000
CONST	SEGMENT
__real@42e00000 DD 042e00000r			; 112
CONST	ENDS
;	COMDAT ??_C@_08FAHDPIGL@CREDIT09@
CONST	SEGMENT
??_C@_08FAHDPIGL@CREDIT09@ DB 'CREDIT09', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJGIMJCK@CREDIT08@
CONST	SEGMENT
??_C@_08EJGIMJCK@CREDIT08@ DB 'CREDIT08', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MOPANFOF@CREDIT07@
CONST	SEGMENT
??_C@_08MOPANFOF@CREDIT07@ DB 'CREDIT07', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFMFIFPK@ACRED10@
CONST	SEGMENT
??_C@_07DFMFIFPK@ACRED10@ DB 'ACRED10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PMNOGFMF@ACRED08@
CONST	SEGMENT
??_C@_07PMNOGFMF@ACRED08@ DB 'ACRED08', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NHOLOEKE@CREDIT06@
CONST	SEGMENT
??_C@_08NHOLOEKE@CREDIT06@ DB 'CREDIT06', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMNOLELL@ACRED11@
CONST	SEGMENT
??_C@_07CMNOLELL@ACRED11@ DB 'ACRED11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PMMGLHGH@CREDIT05@
CONST	SEGMENT
??_C@_08PMMGLHGH@CREDIT05@ DB 'CREDIT05', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OFMFFEIE@ACRED09@
CONST	SEGMENT
??_C@_07OFMFFEIE@ACRED09@ DB 'ACRED09', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IAHDCJBF@CREDIT10@
CONST	SEGMENT
??_C@_08IAHDCJBF@CREDIT10@ DB 'CREDIT10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HLEGHJAK@ACRED07@
CONST	SEGMENT
??_C@_07HLEGHJAK@ACRED07@ DB 'ACRED07', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFNNIGCG@CREDIT04@
CONST	SEGMENT
??_C@_08OFNNIGCG@CREDIT04@ DB 'CREDIT04', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GCFNEIEL@ACRED06@
CONST	SEGMENT
??_C@_07GCFNEIEL@ACRED06@ DB 'ACRED06', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJGIBIFE@CREDIT11@
CONST	SEGMENT
??_C@_08JJGIBIFE@CREDIT11@ DB 'CREDIT11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EJHABLII@ACRED05@
CONST	SEGMENT
??_C@_07EJHABLII@ACRED05@ DB 'ACRED05', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKJMBAOB@CREDIT03@
CONST	SEGMENT
??_C@_08KKJMBAOB@CREDIT03@ DB 'CREDIT03', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FAGLCKMJ@ACRED04@
CONST	SEGMENT
??_C@_07FAGLCKMJ@ACRED04@ DB 'ACRED04', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LCEFELJH@CREDIT12@
CONST	SEGMENT
??_C@_08LCEFELJH@CREDIT12@ DB 'CREDIT12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLFOHKNG@CREDIT13@
CONST	SEGMENT
??_C@_08KLFOHKNG@CREDIT13@ DB 'CREDIT13', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPCKLMAO@ACRED03@
CONST	SEGMENT
??_C@_07BPCKLMAO@ACRED03@ DB 'ACRED03', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNBMNOIM@ACRED01@
CONST	SEGMENT
??_C@_07CNBMNOIM@ACRED01@ DB 'ACRED01', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JIKKHCGD@CREDIT01@
CONST	SEGMENT
??_C@_08JIKKHCGD@CREDIT01@ DB 'CREDIT01', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GDBINEP@ACRED02@
CONST	SEGMENT
??_C@_07GDBINEP@ACRED02@ DB 'ACRED02', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KNDGDBHJ@Prizes?5not?6awarded?5in?6modified?5@
CONST	SEGMENT
??_C@_0CG@KNDGDBHJ@Prizes?5not?6awarded?5in?6modified?5@ DB 'Prizes not', 0aH
	DB	'awarded in', 0aH, 'modified games!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NDPDHFLA@Prizes?5only?6awarded?5in?6single?5p@
CONST	SEGMENT
??_C@_0CG@NDPDHFLA@Prizes?5only?6awarded?5in?6single?5p@ DB 'Prizes only', 0aH
	DB	'awarded in', 0aH, 'single player!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHAMAMEH@NiGHTS@
CONST	SEGMENT
??_C@_06BHAMAMEH@NiGHTS@ DB 'NiGHTS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MKKBLIHF@Pandora?8s?5Box@
CONST	SEGMENT
??_C@_0O@MKKBLIHF@Pandora?8s?5Box@ DB 'Pandora''s Box', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNPMPGMD@Mario@
CONST	SEGMENT
??_C@_05DNPMPGMD@Mario@ DB 'Mario', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHCNEKBN@SRB1?5Remake@
CONST	SEGMENT
??_C@_0M@OHCNEKBN@SRB1?5Remake@ DB 'SRB1 Remake', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BOMJPEGC@Level?5Select@
CONST	SEGMENT
??_C@_0N@BOMJPEGC@Level?5Select@ DB 'Level Select', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CLFOIIFH@Unlocked?3@
CONST	SEGMENT
??_C@_09CLFOIIFH@Unlocked?3@ DB 'Unlocked:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIDCEBEC@NWNGA0@
CONST	SEGMENT
??_C@_06CIDCEBEC@NWNGA0@ DB 'NWNGA0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EENGIFHA@CEMGG0@
CONST	SEGMENT
??_C@_06EENGIFHA@CEMGG0@ DB 'CEMGG0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFBEOPEH@CEMGF0@
CONST	SEGMENT
??_C@_06EFBEOPEH@CEMGF0@ DB 'CEMGF0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHFCFBBO@CEMGE0@
CONST	SEGMENT
??_C@_06EHFCFBBO@CEMGE0@ DB 'CEMGE0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGJADLCJ@CEMGD0@
CONST	SEGMENT
??_C@_06EGJADLCJ@CEMGD0@ DB 'CEMGD0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDNPCNKM@CEMGC0@
CONST	SEGMENT
??_C@_06EDNPCNKM@CEMGC0@ DB 'CEMGC0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECBNEHJL@CEMGB0@
CONST	SEGMENT
??_C@_06ECBNEHJL@CEMGB0@ DB 'CEMGB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EAFLPJMC@CEMGA0@
CONST	SEGMENT
??_C@_06EAFLPJMC@CEMGA0@ DB 'CEMGA0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EDEMLEMF@TRY?5AGAIN?$CB@
CONST	SEGMENT
??_C@_0L@EDEMLEMF@TRY?5AGAIN?$CB@ DB 'TRY AGAIN!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PONKNMCD@GOT?5THEM?5ALL?$CB@
CONST	SEGMENT
??_C@_0O@PONKNMCD@GOT?5THEM?5ALL?$CB@ DB 'GOT THEM ALL!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PBIHNGBH@TITLESKY@
CONST	SEGMENT
??_C@_08PBIHNGBH@TITLESKY@ DB 'TITLESKY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OIGFIEBD@SGRASS4@
CONST	SEGMENT
??_C@_07OIGFIEBD@SGRASS4@ DB 'SGRASS4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KHCEBCNE@SGRASS3@
CONST	SEGMENT
??_C@_07KHCEBCNE@SGRASS3@ DB 'SGRASS3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LODPCDJF@SGRASS2@
CONST	SEGMENT
??_C@_07LODPCDJF@SGRASS2@ DB 'SGRASS2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGEGAFM@SONICDO2@
CONST	SEGMENT
??_C@_08DGEGAFM@SONICDO2@ DB 'SONICDO2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OGBGAPNN@CONFRONT@
CONST	SEGMENT
??_C@_08OGBGAPNN@CONFRONT@ DB 'CONFRONT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHELJBBC@RADAR@
CONST	SEGMENT
??_C@_05IHELJBBC@RADAR@ DB 'RADAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHFGEKEL@ROID00?$CF?42d@
CONST	SEGMENT
??_C@_0L@MHFGEKEL@ROID00?$CF?42d@ DB 'ROID00%.2d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DJDALLEE@TAILSSAD@
CONST	SEGMENT
??_C@_08DJDALLEE@TAILSSAD@ DB 'TAILSSAD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBHOLFFC@SGRASS5@
CONST	SEGMENT
??_C@_07PBHOLFFC@SGRASS5@ DB 'SGRASS5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OPOIEHLB@PEELOUT1@
CONST	SEGMENT
??_C@_08OPOIEHLB@PEELOUT1@ DB 'PEELOUT1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DLIEMMKB@RUN1@
CONST	SEGMENT
??_C@_04DLIEMMKB@RUN1@ DB 'RUN1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MEMFBEHC@PEELOUT2@
CONST	SEGMENT
??_C@_08MEMFBEHC@PEELOUT2@ DB 'PEELOUT2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BAKJJPGC@RUN2@
CONST	SEGMENT
??_C@_04BAKJJPGC@RUN2@ DB 'RUN2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJAEDANA@DARKEGG3@
CONST	SEGMENT
??_C@_08LJAEDANA@DARKEGG3@ DB 'DARKEGG3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPHDAHOI@BRITEGG3@
CONST	SEGMENT
??_C@_08KPHDAHOI@BRITEGG3@ DB 'BRITEGG3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KABPABJB@DARKEGG2@
CONST	SEGMENT
??_C@_08KABPABJB@DARKEGG2@ DB 'DARKEGG2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGGIDGKJ@BRITEGG2@
CONST	SEGMENT
??_C@_08LGGIDGKJ@BRITEGG2@ DB 'BRITEGG2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ILDCFCFC@DARKEGG1@
CONST	SEGMENT
??_C@_08ILDCFCFC@DARKEGG1@ DB 'DARKEGG1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JNEFGFGK@BRITEGG1@
CONST	SEGMENT
??_C@_08JNEFGFGK@BRITEGG1@ DB 'BRITEGG1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PBHFAONH@PRESENTS@
CONST	SEGMENT
??_C@_08PBHFAONH@PRESENTS@ DB 'PRESENTS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JKHCCLEJ@SONIC?5TEAM?5JR@
CONST	SEGMENT
??_C@_0O@JKHCCLEJ@SONIC?5TEAM?5JR@ DB 'SONIC TEAM JR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBAELPNM@INTRO7@
CONST	SEGMENT
??_C@_06MBAELPNM@INTRO7@ DB 'INTRO7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIEJDDJP@SONICDO1@
CONST	SEGMENT
??_C@_08CIEJDDJP@SONICDO1@ DB 'SONICDO1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCDJLNCL@REVENGE@
CONST	SEGMENT
??_C@_07FCDJLNCL@REVENGE@ DB 'REVENGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDDCNNFO@INTRO5@
CONST	SEGMENT
??_C@_06PDDCNNFO@INTRO5@ DB 'INTRO5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JBDFIAPG@ZOOMING@
CONST	SEGMENT
??_C@_07JBDFIAPG@ZOOMING@ DB 'ZOOMING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPAHMNMM@WATCHING@
CONST	SEGMENT
??_C@_08PPAHMNMM@WATCHING@ DB 'WATCHING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JFBCHAFG@SGRASS1@
CONST	SEGMENT
??_C@_07JFBCHAFG@SGRASS1@ DB 'SGRASS1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIBPIOJN@INTRO6@
CONST	SEGMENT
??_C@_06NIBPIOJN@INTRO6@ DB 'INTRO6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FKCFEOOF@DRAT@
CONST	SEGMENT
??_C@_04FKCFEOOF@DRAT@ DB 'DRAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OKCJOMBP@INTRO4@
CONST	SEGMENT
??_C@_06OKCJOMBP@INTRO4@ DB 'INTRO4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFGIHKNI@INTRO3@
CONST	SEGMENT
??_C@_06KFGIHKNI@INTRO3@ DB 'INTRO3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMHDELJJ@INTRO2@
CONST	SEGMENT
??_C@_06LMHDELJJ@INTRO2@ DB 'INTRO2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JHFOBIFK@INTRO1@
CONST	SEGMENT
??_C@_06JHFOBIFK@INTRO1@ DB 'INTRO1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LOMABDIN@Howard?5Drossin?6@
CONST	SEGMENT
??_C@_0BA@LOMABDIN@Howard?5Drossin?6@ DB 'Howard Drossin', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OGCNMMHL@Naoto?5Oshima?6@
CONST	SEGMENT
??_C@_0O@OGCNMMHL@Naoto?5Oshima?6@ DB 'Naoto Oshima', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PBLBONPL@In?5Fond?5Memory?5Of?6@
CONST	SEGMENT
??_C@_0BD@PBLBONPL@In?5Fond?5Memory?5Of?6@ DB 'In Fond Memory Of', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DKFEHDAC@Chris?5Pryor?6@
CONST	SEGMENT
??_C@_0N@DKFEHDAC@Chris?5Pryor?6@ DB 'Chris Pryor', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CIBAJPGB@Alex?5Fuller?6@
CONST	SEGMENT
??_C@_0N@CIBAJPGB@Alex?5Fuller?6@ DB 'Alex Fuller', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NNGJHBNL@Chrispy?6@
CONST	SEGMENT
??_C@_08NNGJHBNL@Chrispy?6@ DB 'Chrispy', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DBFIAKJE@MistaED?6@
CONST	SEGMENT
??_C@_08DBFIAKJE@MistaED?6@ DB 'MistaED', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KKMHLIDG@Dave?5Perry?6@
CONST	SEGMENT
??_C@_0M@KKMHLIDG@Dave?5Perry?6@ DB 'Dave Perry', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NEPOKOHL@iD?5Software?6@
CONST	SEGMENT
??_C@_0N@NEPOKOHL@iD?5Software?6@ DB 'iD Software', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NHCGKMPK@Doom?5Legacy?5Project?6@
CONST	SEGMENT
??_C@_0BF@NHCGKMPK@Doom?5Legacy?5Project?6@ DB 'Doom Legacy Project', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OOKFJIJE@Special?5Thanks?6@
CONST	SEGMENT
??_C@_0BA@OOKFJIJE@Special?5Thanks?6@ DB 'Special Thanks', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BLCCHNBF@Samuel?5Peters?6@
CONST	SEGMENT
??_C@_0P@BLCCHNBF@Samuel?5Peters?6@ DB 'Samuel Peters', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OELNHJGM@Julio?5Guir?6@
CONST	SEGMENT
??_C@_0M@OELNHJGM@Julio?5Guir?6@ DB 'Julio Guir', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFBJBNGJ@Sherman?5D?4?6@
CONST	SEGMENT
??_C@_0M@IFBJBNGJ@Sherman?5D?4?6@ DB 'Sherman D.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HKDCHMOA@Desmond?5D?4?6@
CONST	SEGMENT
??_C@_0M@HKDCHMOA@Desmond?5D?4?6@ DB 'Desmond D.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GMFNOCNJ@Bill?5Reed?6@
CONST	SEGMENT
??_C@_0L@GMFNOCNJ@Bill?5Reed?6@ DB 'Bill Reed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CMKKAHGC@Nick?5Molina?6@
CONST	SEGMENT
??_C@_0N@CMKKAHGC@Nick?5Molina?6@ DB 'Nick Molina', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HHHNEFMC@Cody?5Koester?6@
CONST	SEGMENT
??_C@_0O@HHHNEFMC@Cody?5Koester?6@ DB 'Cody Koester', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EBDDAIIO@Colin?5Pfaff?6@
CONST	SEGMENT
??_C@_0N@EBDDAIIO@Colin?5Pfaff?6@ DB 'Colin Pfaff', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ICFKNPLH@Thomas?5Igoe?6@
CONST	SEGMENT
??_C@_0N@ICFKNPLH@Thomas?5Igoe?6@ DB 'Thomas Igoe', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LFNHHNDF@Andrew?5Moran?6@
CONST	SEGMENT
??_C@_0O@LFNHHNDF@Andrew?5Moran?6@ DB 'Andrew Moran', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LBIBKCEP@Rob?5Tisdell?6@
CONST	SEGMENT
??_C@_0N@LBIBKCEP@Rob?5Tisdell?6@ DB 'Rob Tisdell', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GIHLCEHO@Paul?5Clempson?6@
CONST	SEGMENT
??_C@_0P@GIHLCEHO@Paul?5Clempson?6@ DB 'Paul Clempson', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHFKHAP@Prime?52?6@
CONST	SEGMENT
??_C@_08DHFKHAP@Prime?52?6@ DB 'Prime 2', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NNDOIPIG@Chaos?5Zero?564?6@
CONST	SEGMENT
??_C@_0P@NNDOIPIG@Chaos?5Zero?564?6@ DB 'Chaos Zero 64', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GAAPIJFM@KO?4T?4E?6@
CONST	SEGMENT
??_C@_07GAAPIJFM@KO?4T?4E?6@ DB 'KO.T.E', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GKNEFEBI@Blade?6@
CONST	SEGMENT
??_C@_06GKNEFEBI@Blade?6@ DB 'Blade', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAPFOFMI@Tets?6@
CONST	SEGMENT
??_C@_05MAPFOFMI@Tets?6@ DB 'Tets', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KEFALBMK@ST218?6@
CONST	SEGMENT
??_C@_06KEFALBMK@ST218?6@ DB 'ST218', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFLDDPLL@SRB2?5Playah?6@
CONST	SEGMENT
??_C@_0N@OFLDDPLL@SRB2?5Playah?6@ DB 'SRB2 Playah', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BKNCODEC@Sonict?6@
CONST	SEGMENT
??_C@_07BKNCODEC@Sonict?6@ DB 'Sonict', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBGLOBIB@Shadow?5Hog?6@
CONST	SEGMENT
??_C@_0M@IBGLOBIB@Shadow?5Hog?6@ DB 'Shadow Hog', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKGHLGFN@Senku?6@
CONST	SEGMENT
??_C@_06EKGHLGFN@Senku?6@ DB 'Senku', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DMHPLHEB@Dark?5Warrior?6@
CONST	SEGMENT
??_C@_0O@DMHPLHEB@Dark?5Warrior?6@ DB 'Dark Warrior', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMFFDHHO@Boinciel?6@
CONST	SEGMENT
??_C@_09LMFFDHHO@Boinciel?6@ DB 'Boinciel', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HBHJPCCD@Sky?5Sanctuary?5Team?6@
CONST	SEGMENT
??_C@_0BE@HBHJPCCD@Sky?5Sanctuary?5Team?6@ DB 'Sky Sanctuary Team', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FNNGLPBI@Official?5Mascot?6@
CONST	SEGMENT
??_C@_0BB@FNNGLPBI@Official?5Mascot?6@ DB 'Official Mascot', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LJCACEOB@Various?5Sources?6@
CONST	SEGMENT
??_C@_0BB@LJCACEOB@Various?5Sources?6@ DB 'Various Sources', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAPOFKBP@Sega?6@
CONST	SEGMENT
??_C@_05IAPOFKBP@Sega?6@ DB 'Sega', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CANDPA@Sound?5Effects?6@
CONST	SEGMENT
??_C@_0P@CANDPA@Sound?5Effects?6@ DB 'Sound Effects', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BHFDAGLC@Shane?5Sexton?6@
CONST	SEGMENT
??_C@_0O@BHFDAGLC@Shane?5Sexton?6@ DB 'Shane Sexton', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CBHNDEAO@David?5Spencer?5Sr?6@
CONST	SEGMENT
??_C@_0BC@CBHNDEAO@David?5Spencer?5Sr?6@ DB 'David Spencer Sr', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JOEMEBPG@Shane?5Strife?6@
CONST	SEGMENT
??_C@_0O@JOEMEBPG@Shane?5Strife?6@ DB 'Shane Strife', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HCPIMDBA@Big?5Wave?5Dave?6@
CONST	SEGMENT
??_C@_0P@HCPIMDBA@Big?5Wave?5Dave?6@ DB 'Big Wave Dave', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DMELANFD@Lead?5Guitar?6@
CONST	SEGMENT
??_C@_0N@DMELANFD@Lead?5Guitar?6@ DB 'Lead Guitar', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIHBHKEN@Malcolm?5Brown?6@
CONST	SEGMENT
??_C@_0P@FIHBHKEN@Malcolm?5Brown?6@ DB 'Malcolm Brown', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DFEKEFFP@Stefan?5Rimalia?6@
CONST	SEGMENT
??_C@_0BA@DFEKEFFP@Stefan?5Rimalia?6@ DB 'Stefan Rimalia', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJHEDNFB@Jarel?5Jones?6@
CONST	SEGMENT
??_C@_0N@IJHEDNFB@Jarel?5Jones?6@ DB 'Jarel Jones', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HFDJECEN@David?5Bulmer?6@
CONST	SEGMENT
??_C@_0O@HFDJECEN@David?5Bulmer?6@ DB 'David Bulmer', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGKNMLAP@Red?5XVI?6@
CONST	SEGMENT
??_C@_08MGKNMLAP@Red?5XVI?6@ DB 'Red XVI', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCCBGNLM@Stuf?6@
CONST	SEGMENT
??_C@_05CCCBGNLM@Stuf?6@ DB 'Stuf', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06INADDACD@Arrow?6@
CONST	SEGMENT
??_C@_06INADDACD@Arrow?6@ DB 'Arrow', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KKBJIDDC@Bulmybag?6@
CONST	SEGMENT
??_C@_09KKBJIDDC@Bulmybag?6@ DB 'Bulmybag', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PKDCFNFP@Music?5Production?6@
CONST	SEGMENT
??_C@_0BC@PKDCFNFP@Music?5Production?6@ DB 'Music Production', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OMJCNKBK@Ryan?5Bloom?6@
CONST	SEGMENT
??_C@_0M@OMJCNKBK@Ryan?5Bloom?6@ DB 'Ryan Bloom', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DCFNHKJD@Buddy?5Fischer?6@
CONST	SEGMENT
??_C@_0P@DCFNHKJD@Buddy?5Fischer?6@ DB 'Buddy Fischer', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LOCFEEIM@Blaze?5Hedgehog?6@
CONST	SEGMENT
??_C@_0BA@LOCFEEIM@Blaze?5Hedgehog?6@ DB 'Blaze Hedgehog', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFFODGKA@KinkaJoy?6@
CONST	SEGMENT
??_C@_09NFFODGKA@KinkaJoy?6@ DB 'KinkaJoy', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JBECPOOC@Texture?5Artists?6@
CONST	SEGMENT
??_C@_0BB@JBECPOOC@Texture?5Artists?6@ DB 'Texture Artists', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JPNLCLGG@Dan?5Hagerstrand?6@
CONST	SEGMENT
??_C@_0BB@JPNLCLGG@Dan?5Hagerstrand?6@ DB 'Dan Hagerstrand', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HPPNAFOB@Michael?5Antonakes?6@
CONST	SEGMENT
??_C@_0BD@HPPNAFOB@Michael?5Antonakes?6@ DB 'Michael Antonakes', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HIGLMCBN@Pedro?5Iceta?6@
CONST	SEGMENT
??_C@_0N@HIGLMCBN@Pedro?5Iceta?6@ DB 'Pedro Iceta', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MNMFMOLG@Erik?5Nielsen?6@
CONST	SEGMENT
??_C@_0O@MNMFMOLG@Erik?5Nielsen?6@ DB 'Erik Nielsen', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HPFMNJMM@Marco?5Zafra?6@
CONST	SEGMENT
??_C@_0N@HPFMNJMM@Marco?5Zafra?6@ DB 'Marco Zafra', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GCBOBNOH@FoxBlitzz?6@
CONST	SEGMENT
??_C@_0L@GCBOBNOH@FoxBlitzz?6@ DB 'FoxBlitzz', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GADAAEGG@Spazzo?6@
CONST	SEGMENT
??_C@_07GADAAEGG@Spazzo?6@ DB 'Spazzo', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHAIKGNI@Nev3r?6@
CONST	SEGMENT
??_C@_06BHAIKGNI@Nev3r?6@ DB 'Nev3r', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NACMEICI@Torgo?6@
CONST	SEGMENT
??_C@_06NACMEICI@Torgo?6@ DB 'Torgo', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OMAFPNFK@Digiku?6@
CONST	SEGMENT
??_C@_07OMAFPNFK@Digiku?6@ DB 'Digiku', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KHAFHAA@Level?5Designers?6@
CONST	SEGMENT
??_C@_0BB@KHAFHAA@Level?5Designers?6@ DB 'Level Designers', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLNFKIDC@John?5J?4?5Muniz?6@
CONST	SEGMENT
??_C@_0P@MLNFKIDC@John?5J?4?5Muniz?6@ DB 'John J. Muniz', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NPLLDMHC@Gregor?5Dick?6@
CONST	SEGMENT
??_C@_0N@NPLLDMHC@Gregor?5Dick?6@ DB 'Gregor Dick', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NBGKPPC@Matt?5Marsalko?6@
CONST	SEGMENT
??_C@_0P@NBGKPPC@Matt?5Marsalko?6@ DB 'Matt Marsalko', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LIBBNPBP@Logan?5Arias?6@
CONST	SEGMENT
??_C@_0N@LIBBNPBP@Logan?5Arias?6@ DB 'Logan Arias', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MHMBHHJL@Steven?5McGranahan?6@
CONST	SEGMENT
??_C@_0BD@MHMBHHJL@Steven?5McGranahan?6@ DB 'Steven McGranahan', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JMGAHFBH@Jason?5the?5Echidna?6@
CONST	SEGMENT
??_C@_0BD@JMGAHFBH@Jason?5the?5Echidna?6@ DB 'Jason the Echidna', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LCFNPBLI@Oogaland?6@
CONST	SEGMENT
??_C@_09LCFNPBLI@Oogaland?6@ DB 'Oogaland', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCKLBFDA@Shuffle?6@
CONST	SEGMENT
??_C@_08OCKLBFDA@Shuffle?6@ DB 'Shuffle', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DKKNEAIG@Logan_GBA?6@
CONST	SEGMENT
??_C@_0L@DKKNEAIG@Logan_GBA?6@ DB 'Logan_GBA', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CALIHNLP@Cyan?5Helkaraxe?6@
CONST	SEGMENT
??_C@_0BA@CALIHNLP@Cyan?5Helkaraxe?6@ DB 'Cyan Helkaraxe', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JOFBLDDC@StroggOnMeth?6@
CONST	SEGMENT
??_C@_0O@JOFBLDDC@StroggOnMeth?6@ DB 'StroggOnMeth', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HNAGEIOC@Coding?5Assistants?6@
CONST	SEGMENT
??_C@_0BD@HNAGEIOC@Coding?5Assistants?6@ DB 'Coding Assistants', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NBCJDPHE@Andrew?5Clunis?6@
CONST	SEGMENT
??_C@_0P@NBCJDPHE@Andrew?5Clunis?6@ DB 'Andrew Clunis', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FONOKPEG@Matthew?5Walsh?6@
CONST	SEGMENT
??_C@_0P@FONOKPEG@Matthew?5Walsh?6@ DB 'Matthew Walsh', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EKAJOICO@Scott?5Feeney?6@
CONST	SEGMENT
??_C@_0O@EKAJOICO@Scott?5Feeney?6@ DB 'Scott Feeney', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPCANGL@Nathan?5Giroux?6@
CONST	SEGMENT
??_C@_0P@KPCANGL@Nathan?5Giroux?6@ DB 'Nathan Giroux', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CLMEMF@Alam?5Arias?6@
CONST	SEGMENT
??_C@_0M@CLMEMF@Alam?5Arias?6@ DB 'Alam Arias', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JHBHCPNM@Orospakr?6@
CONST	SEGMENT
??_C@_09JHBHCPNM@Orospakr?6@ DB 'Orospakr', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PHICNBLE@MattW?5CFI?6@
CONST	SEGMENT
??_C@_0L@PHICNBLE@MattW?5CFI?6@ DB 'MattW CFI', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJJFCIKO@Graue?6@
CONST	SEGMENT
??_C@_06OJJFCIKO@Graue?6@ DB 'Graue', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODKHGMFP@Jazz?6@
CONST	SEGMENT
??_C@_05ODKHGMFP@Jazz?6@ DB 'Jazz', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IPFPHBHJ@Alam_GBC?6@
CONST	SEGMENT
??_C@_09IPFPHBHJ@Alam_GBC?6@ DB 'Alam_GBC', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GBMEDIOO@Programmers?6@
CONST	SEGMENT
??_C@_0N@GBMEDIOO@Programmers?6@ DB 'Programmers', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DKDNFNJE@Chief?5Programmer?6@
CONST	SEGMENT
??_C@_0BC@DKDNFNJE@Chief?5Programmer?6@ DB 'Chief Programmer', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NNGHIBBA@Jarrett?5Voight?6@
CONST	SEGMENT
??_C@_0BA@NNGHIBBA@Jarrett?5Voight?6@ DB 'Jarrett Voight', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05ECEJEDFC@JEV3?6@
CONST	SEGMENT
??_C@_05ECEJEDFC@JEV3?6@ DB 'JEV3', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LFBFOFCI@Landscape?5Design?6@
CONST	SEGMENT
??_C@_0BC@LFBFOFCI@Landscape?5Design?6@ DB 'Landscape Design', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGPJHBKG@Visual?5Design?6@
CONST	SEGMENT
??_C@_0P@LGPJHBKG@Visual?5Design?6@ DB 'Visual Design', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MGMCMBL@David?5Spencer?5Jr?6@
CONST	SEGMENT
??_C@_0BC@MGMCMBL@David?5Spencer?5Jr?6@ DB 'David Spencer Jr', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MCBBMPCF@Instant?5Sonic?6@
CONST	SEGMENT
??_C@_0P@MCBBMPCF@Instant?5Sonic?6@ DB 'Instant Sonic', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EGICIMND@Character?5Designers?6@
CONST	SEGMENT
??_C@_0BF@EGICIMND@Character?5Designers?6@ DB 'Character Designers', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MMHABNEM@Ben?5Geyer?6@
CONST	SEGMENT
??_C@_0L@MMHABNEM@Ben?5Geyer?6@ DB 'Ben Geyer', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGABHOEI@Mystic?6@
CONST	SEGMENT
??_C@_07CGABHOEI@Mystic?6@ DB 'Mystic', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BMEKDKNI@Game?5Designers?6@
CONST	SEGMENT
??_C@_0BA@BMEKDKNI@Game?5Designers?6@ DB 'Game Designers', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LADCMIKH@Johnny?5Wallbank?6@
CONST	SEGMENT
??_C@_0BB@LADCMIKH@Johnny?5Wallbank?6@ DB 'Johnny Wallbank', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BCGGBAGL@Art?5Freda?6@
CONST	SEGMENT
??_C@_0L@BCGGBAGL@Art?5Freda?6@ DB 'Art Freda', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FIADJLA@Sonikku?6@
CONST	SEGMENT
??_C@_08FIADJLA@Sonikku?6@ DB 'Sonikku', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PCHKBJ@Director?6@
CONST	SEGMENT
??_C@_09PCHKBJ@Director?6@ DB 'Director', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GECGHFPB@SSNTails?6@
CONST	SEGMENT
??_C@_09GECGHFPB@SSNTails?6@ DB 'SSNTails', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CJBJOCBJ@Producer?6@
CONST	SEGMENT
??_C@_09CJBJOCBJ@Producer?6@ DB 'Producer', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMLHDFEG@Staff?6@
CONST	SEGMENT
??_C@_06OMLHDFEG@Staff?6@ DB 'Staff', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KBPNJLJK@Sonic?5Team?5Junior?6@
CONST	SEGMENT
??_C@_0BD@KBPNJLJK@Sonic?5Team?5Junior?6@ DB 'Sonic Team Junior', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BBOOGDHD@TTSPOP7@
CONST	SEGMENT
??_C@_07BBOOGDHD@TTSPOP7@ DB 'TTSPOP7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IPFFCDC@TTSPOP6@
CONST	SEGMENT
??_C@_07IPFFCDC@TTSPOP6@ DB 'TTSPOP6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CDNIABPB@TTSPOP5@
CONST	SEGMENT
??_C@_07CDNIABPB@TTSPOP5@ DB 'TTSPOP5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DKMDDALA@TTSPOP4@
CONST	SEGMENT
??_C@_07DKMDDALA@TTSPOP4@ DB 'TTSPOP4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HFICKGHH@TTSPOP3@
CONST	SEGMENT
??_C@_07HFICKGHH@TTSPOP3@ DB 'TTSPOP3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMJJJHDG@TTSPOP2@
CONST	SEGMENT
??_C@_07GMJJJHDG@TTSPOP2@ DB 'TTSPOP2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EHLEMEPF@TTSPOP1@
CONST	SEGMENT
??_C@_07EHLEMEPF@TTSPOP1@ DB 'TTSPOP1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGECLDKP@TTSPREP2@
CONST	SEGMENT
??_C@_08JGECLDKP@TTSPREP2@ DB 'TTSPREP2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LNGPOAGM@TTSPREP1@
CONST	SEGMENT
??_C@_08LNGPOAGM@TTSPREP1@ DB 'TTSPREP1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAPPEHDJ@TTSWIP1@
CONST	SEGMENT
??_C@_07NAPPEHDJ@TTSWIP1@ DB 'TTSWIP1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PEEGPHKP@TTSWAVE2@
CONST	SEGMENT
??_C@_08PEEGPHKP@TTSWAVE2@ DB 'TTSWAVE2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NPGLKEGM@TTSWAVE1@
CONST	SEGMENT
??_C@_08NPGLKEGM@TTSWAVE1@ DB 'TTSWAVE1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDEGCAEI@TTSONIC@
CONST	SEGMENT
??_C@_07BDEGCAEI@TTSONIC@ DB 'TTSONIC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILAFNKKA@TTWING@
CONST	SEGMENT
??_C@_06ILAFNKKA@TTWING@ DB 'TTWING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCGAACFF@TTBANNER@
CONST	SEGMENT
??_C@_08JCGAACFF@TTBANNER@ DB 'TTBANNER', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
_introscenetime DD 0afH
	DD	016fH
	DD	01d8H
	DD	020dH
	DD	021eH
	DD	0287H
	DD	02d4H
	DD	014cH
	DD	020dH
	DD	0230H
	DD	01eaH
	DD	01c7H
	DD	0299H
	DD	0264H
	DD	020dH
	DD	0348H
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_CutsceneTextWrite
_TEXT	SEGMENT
_F_CutsceneTextWrite PROC				; COMDAT

; 1858 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1859 : 	V_DrawFill(0, 0, vid.width, vid.height, 31);

  00009	6a 1f		 push	 31			; 0000001fH
  0000b	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00010	50		 push	 eax
  00011	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00017	51		 push	 ecx
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 _V_DrawFill
  00021	83 c4 14	 add	 esp, 20			; 00000014H

; 1860 : 
; 1861 : 	if (cutscenes[cutnum].scene[scenenum].picname[picnum][0] != '\0')

  00024	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  0002e	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00038	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  00044	8d 4c c2 01	 lea	 ecx, DWORD PTR [edx+eax*8+1]
  00048	ba 01 00 00 00	 mov	 edx, 1
  0004d	6b c2 00	 imul	 eax, edx, 0
  00050	0f be 0c 01	 movsx	 ecx, BYTE PTR [ecx+eax]
  00054	85 c9		 test	 ecx, ecx
  00056	0f 84 b7 00 00
	00		 je	 $LN4@F_Cutscene

; 1862 : 	{
; 1863 : 		if (cutscenes[cutnum].scene[scenenum].pichires[picnum])

  0005c	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00066	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00070	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  0007c	83 7c 82 44 00	 cmp	 DWORD PTR [edx+eax*4+68], 0
  00081	74 49		 je	 SHORT $LN3@F_Cutscene

; 1864 : 			V_DrawSmallScaledPatch(picxpos, picypos, 0,

  00083	6a 65		 push	 101			; 00000065H
  00085	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  0008f	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00099	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  000a5	8d 4c c2 01	 lea	 ecx, DWORD PTR [edx+eax*8+1]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 _W_CachePatchName
  000af	83 c4 08	 add	 esp, 8
  000b2	50		 push	 eax
  000b3	6a 00		 push	 0
  000b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _picypos
  000bb	52		 push	 edx
  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _picxpos
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	eb 47		 jmp	 SHORT $LN4@F_Cutscene
$LN3@F_Cutscene:

; 1865 : 				W_CachePatchName(cutscenes[cutnum].scene[scenenum].picname[picnum], PU_CACHE));
; 1866 : 		else
; 1867 : 			V_DrawScaledPatch(picxpos,picypos, 0,

  000cc	6a 65		 push	 101			; 00000065H
  000ce	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  000d8	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  000e2	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  000ee	8d 4c c2 01	 lea	 ecx, DWORD PTR [edx+eax*8+1]
  000f2	51		 push	 ecx
  000f3	e8 00 00 00 00	 call	 _W_CachePatchName
  000f8	83 c4 08	 add	 esp, 8
  000fb	50		 push	 eax
  000fc	6a 00		 push	 0
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _picypos
  00104	52		 push	 edx
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR _picxpos
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00110	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@F_Cutscene:

; 1868 : 				W_CachePatchName(cutscenes[cutnum].scene[scenenum].picname[picnum], PU_CACHE));
; 1869 : 	}
; 1870 : 
; 1871 : 	if (animtimer)

  00113	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _animtimer, 0
  0011a	0f 84 ff 00 00
	00		 je	 $LN8@F_Cutscene

; 1872 : 	{
; 1873 : 		animtimer--;

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR _animtimer
  00125	83 e8 01	 sub	 eax, 1
  00128	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax

; 1874 : 		if (animtimer <= 0)

  0012d	0f 85 ec 00 00
	00		 jne	 $LN8@F_Cutscene

; 1875 : 		{
; 1876 : 			if (picnum < 7
; 1877 : 				&& cutscenes[cutnum].scene[scenenum].picname[picnum+1][0] != '\0')

  00133	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _picnum, 7
  0013a	0f 8d d5 00 00
	00		 jge	 $LN7@F_Cutscene
  00140	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  0014a	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00154	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  00160	8d 4c c2 09	 lea	 ecx, DWORD PTR [edx+eax*8+9]
  00164	ba 01 00 00 00	 mov	 edx, 1
  00169	6b c2 00	 imul	 eax, edx, 0
  0016c	0f be 0c 01	 movsx	 ecx, BYTE PTR [ecx+eax]
  00170	85 c9		 test	 ecx, ecx
  00172	0f 84 9d 00 00
	00		 je	 $LN7@F_Cutscene

; 1878 : 			{
; 1879 : 				picnum++;

  00178	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  0017d	83 c0 01	 add	 eax, 1
  00180	a3 00 00 00 00	 mov	 DWORD PTR _picnum, eax

; 1880 : 				picxpos = cutscenes[cutnum].scene[scenenum].xcoord[picnum];

  00185	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  0018f	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00199	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  001a5	0f b7 4c 42 68	 movzx	 ecx, WORD PTR [edx+eax*2+104]
  001aa	89 0d 00 00 00
	00		 mov	 DWORD PTR _picxpos, ecx

; 1881 : 				picypos = cutscenes[cutnum].scene[scenenum].ycoord[picnum];

  001b0	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  001ba	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  001c4	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  001cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  001d0	0f b7 4c 42 78	 movzx	 ecx, WORD PTR [edx+eax*2+120]
  001d5	89 0d 00 00 00
	00		 mov	 DWORD PTR _picypos, ecx

; 1882 : 				pictime = cutscenes[cutnum].scene[scenenum].picduration[picnum];

  001db	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  001e5	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  001ef	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  001fb	0f b7 8c 42 88
	00 00 00	 movzx	 ecx, WORD PTR [edx+eax*2+136]
  00203	89 0d 00 00 00
	00		 mov	 DWORD PTR _pictime, ecx

; 1883 : 				animtimer = pictime;

  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR _pictime
  0020e	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax

; 1884 : 			}

  00213	eb 0a		 jmp	 SHORT $LN8@F_Cutscene
$LN7@F_Cutscene:

; 1885 : 			else
; 1886 : 				timetonext = 2;

  00215	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _timetonext, 2
$LN8@F_Cutscene:

; 1887 : 		}
; 1888 : 	}
; 1889 : 
; 1890 : 	F_WriteCutsceneText();

  0021f	e8 00 00 00 00	 call	 _F_WriteCutsceneText
  00224	90		 npad	 1

; 1891 : }

  00225	5f		 pop	 edi
  00226	5e		 pop	 esi
  00227	5b		 pop	 ebx
  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c3		 ret	 0
_F_CutsceneTextWrite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_AdvanceToNextScene
_TEXT	SEGMENT
_F_AdvanceToNextScene PROC				; COMDAT

; 1804 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1805 : 	scenenum++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _scenenum
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR _scenenum, eax

; 1806 : 
; 1807 : 	if (scenenum < cutscenes[cutnum].numscenes)

  00016	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _scenenum
  00026	3b 88 00 52 00
	00		 cmp	 ecx, DWORD PTR _cutscenes[eax+20992]
  0002c	7d 60		 jge	 SHORT $LN2@F_AdvanceT

; 1808 : 	{
; 1809 : 		picnum = 0;

  0002e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _picnum, 0

; 1810 : 		picxpos = cutscenes[cutnum].scene[scenenum].xcoord[picnum];

  00038	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00042	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  0004c	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  00058	0f b7 4c 42 68	 movzx	 ecx, WORD PTR [edx+eax*2+104]
  0005d	89 0d 00 00 00
	00		 mov	 DWORD PTR _picxpos, ecx

; 1811 : 		picypos = cutscenes[cutnum].scene[scenenum].ycoord[picnum];

  00063	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  0006d	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00077	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  00083	0f b7 4c 42 78	 movzx	 ecx, WORD PTR [edx+eax*2+120]
  00088	89 0d 00 00 00
	00		 mov	 DWORD PTR _picypos, ecx
$LN2@F_AdvanceT:

; 1812 : 	}
; 1813 : 
; 1814 : 	if (cutscenes[cutnum].scene[scenenum].musicslot != 0)

  0008e	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00098	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  000a2	83 bc 08 98 00
	00 00 00	 cmp	 DWORD PTR _cutscenes[eax+ecx+152], 0
  000aa	74 40		 je	 SHORT $LN3@F_AdvanceT

; 1815 : 		S_ChangeMusic(cutscenes[cutnum].scene[scenenum].musicslot, cutscenes[cutnum].scene[scenenum].musicloop);

  000ac	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  000b6	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  000c0	8b 94 08 9c 00
	00 00		 mov	 edx, DWORD PTR _cutscenes[eax+ecx+156]
  000c7	52		 push	 edx
  000c8	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  000d2	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  000dc	8b 94 08 98 00
	00 00		 mov	 edx, DWORD PTR _cutscenes[eax+ecx+152]
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 _S_ChangeMusic
  000e9	83 c4 08	 add	 esp, 8
$LN3@F_AdvanceT:

; 1816 : 
; 1817 : 	if (rendermode != render_none)

  000ec	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  000f3	0f 84 19 01 00
	00		 je	 $LN4@F_AdvanceT

; 1818 : 	{
; 1819 : 		F_WipeStartScreen();

  000f9	e8 00 00 00 00	 call	 _F_WipeStartScreen
  000fe	90		 npad	 1

; 1820 : 		V_DrawFill(0,0, vid.width, vid.height, 31);

  000ff	6a 1f		 push	 31			; 0000001fH
  00101	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00106	50		 push	 eax
  00107	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0010d	51		 push	 ecx
  0010e	6a 00		 push	 0
  00110	6a 00		 push	 0
  00112	e8 00 00 00 00	 call	 _V_DrawFill
  00117	83 c4 14	 add	 esp, 20			; 00000014H

; 1821 : 		if (scenenum < cutscenes[cutnum].numscenes)

  0011a	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _scenenum
  0012a	3b 88 00 52 00
	00		 cmp	 ecx, DWORD PTR _cutscenes[eax+20992]
  00130	0f 8d b7 00 00
	00		 jge	 $LN7@F_AdvanceT

; 1822 : 		{
; 1823 : 			if (cutscenes[cutnum].scene[scenenum].pichires[picnum])

  00136	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00140	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  0014a	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  00156	83 7c 82 44 00	 cmp	 DWORD PTR [edx+eax*4+68], 0
  0015b	74 49		 je	 SHORT $LN6@F_AdvanceT

; 1824 : 				V_DrawSmallScaledPatch(picxpos, picypos, 0, W_CachePatchName(cutscenes[cutnum].scene[scenenum].picname[picnum], PU_CACHE));

  0015d	6a 65		 push	 101			; 00000065H
  0015f	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00169	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00173	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  0017f	8d 4c c2 01	 lea	 ecx, DWORD PTR [edx+eax*8+1]
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 _W_CachePatchName
  00189	83 c4 08	 add	 esp, 8
  0018c	50		 push	 eax
  0018d	6a 00		 push	 0
  0018f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _picypos
  00195	52		 push	 edx
  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR _picxpos
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  001a1	83 c4 10	 add	 esp, 16			; 00000010H
  001a4	eb 47		 jmp	 SHORT $LN7@F_AdvanceT
$LN6@F_AdvanceT:

; 1825 : 			else
; 1826 : 				V_DrawScaledPatch(picxpos, picypos, 0, W_CachePatchName(cutscenes[cutnum].scene[scenenum].picname[picnum], PU_CACHE));

  001a6	6a 65		 push	 101			; 00000065H
  001a8	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  001b2	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  001bc	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  001c8	8d 4c c2 01	 lea	 ecx, DWORD PTR [edx+eax*8+1]
  001cc	51		 push	 ecx
  001cd	e8 00 00 00 00	 call	 _W_CachePatchName
  001d2	83 c4 08	 add	 esp, 8
  001d5	50		 push	 eax
  001d6	6a 00		 push	 0
  001d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _picypos
  001de	52		 push	 edx
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR _picxpos
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001ea	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@F_AdvanceT:

; 1827 : 		}
; 1828 : 		F_WipeEndScreen(0, 0, vid.width, vid.height);

  001ed	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  001f2	50		 push	 eax
  001f3	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  001f9	51		 push	 ecx
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	e8 00 00 00 00	 call	 _F_WipeEndScreen
  00203	83 c4 10	 add	 esp, 16			; 00000010H

; 1829 : 
; 1830 : 		F_RunWipe(TICRATE, true);

  00206	6a 01		 push	 1
  00208	6a 23		 push	 35			; 00000023H
  0020a	e8 00 00 00 00	 call	 _F_RunWipe
  0020f	83 c4 08	 add	 esp, 8
$LN4@F_AdvanceT:

; 1831 : 	}
; 1832 : 
; 1833 : 	finaletextcount = 0;

  00212	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finaletextcount, 0

; 1834 : 	timetonext = 0;

  0021c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timetonext, 0

; 1835 : 	stoptimer = 0;

  00226	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _stoptimer, 0

; 1836 : 
; 1837 : 	if (scenenum >= cutscenes[cutnum].numscenes)

  00230	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  0023a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _scenenum
  00240	3b 88 00 52 00
	00		 cmp	 ecx, DWORD PTR _cutscenes[eax+20992]
  00246	7c 25		 jl	 SHORT $LN8@F_AdvanceT

; 1838 : 	{
; 1839 : 		if (cutnum == creditscutscene-1)

  00248	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _creditscutscene
  0024f	83 e8 01	 sub	 eax, 1
  00252	39 05 00 00 00
	00		 cmp	 DWORD PTR _cutnum, eax
  00258	75 08		 jne	 SHORT $LN9@F_AdvanceT

; 1840 : 			F_StartGameEvaluation();

  0025a	e8 00 00 00 00	 call	 _F_StartGameEvaluation
  0025f	90		 npad	 1
  00260	eb 06		 jmp	 SHORT $LN10@F_AdvanceT
$LN9@F_AdvanceT:

; 1841 : 		else
; 1842 : 			F_EndCutScene();

  00262	e8 00 00 00 00	 call	 _F_EndCutScene
  00267	90		 npad	 1
$LN10@F_AdvanceT:

; 1843 : 		return;

  00268	e9 ff 00 00 00	 jmp	 $LN1@F_AdvanceT
$LN8@F_AdvanceT:

; 1844 : 	}
; 1845 : 
; 1846 : 	finaletext = cutscenes[cutnum].scene[scenenum].text;

  0026d	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00277	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00281	8b 94 08 64 00
	00 00		 mov	 edx, DWORD PTR _cutscenes[eax+ecx+100]
  00288	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx

; 1847 : 
; 1848 : 	picnum = 0;

  0028e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _picnum, 0

; 1849 : 	picxpos = cutscenes[cutnum].scene[scenenum].xcoord[picnum];

  00298	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  002a2	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  002ac	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  002b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  002b8	0f b7 4c 42 68	 movzx	 ecx, WORD PTR [edx+eax*2+104]
  002bd	89 0d 00 00 00
	00		 mov	 DWORD PTR _picxpos, ecx

; 1850 : 	picypos = cutscenes[cutnum].scene[scenenum].ycoord[picnum];

  002c3	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  002cd	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  002d7	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  002de	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  002e3	0f b7 4c 42 78	 movzx	 ecx, WORD PTR [edx+eax*2+120]
  002e8	89 0d 00 00 00
	00		 mov	 DWORD PTR _picypos, ecx

; 1851 : 	textxpos = cutscenes[cutnum].scene[scenenum].textxpos;

  002ee	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  002f8	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00302	0f b7 94 08 a0
	00 00 00	 movzx	 edx, WORD PTR _cutscenes[eax+ecx+160]
  0030a	89 15 00 00 00
	00		 mov	 DWORD PTR _textxpos, edx

; 1852 : 	textypos = cutscenes[cutnum].scene[scenenum].textypos;

  00310	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  0031a	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00324	0f b7 94 08 a2
	00 00 00	 movzx	 edx, WORD PTR _cutscenes[eax+ecx+162]
  0032c	89 15 00 00 00
	00		 mov	 DWORD PTR _textypos, edx

; 1853 : 
; 1854 : 	animtimer = pictime = cutscenes[cutnum].scene[scenenum].picduration[picnum];

  00332	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  0033c	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00346	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _cutscenes[eax+ecx]
  0034d	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  00352	0f b7 8c 42 88
	00 00 00	 movzx	 ecx, WORD PTR [edx+eax*2+136]
  0035a	89 0d 00 00 00
	00		 mov	 DWORD PTR _pictime, ecx
  00360	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _pictime
  00366	89 15 00 00 00
	00		 mov	 DWORD PTR _animtimer, edx
$LN1@F_AdvanceT:

; 1855 : }

  0036c	5f		 pop	 edi
  0036d	5e		 pop	 esi
  0036e	5b		 pop	 ebx
  0036f	8b e5		 mov	 esp, ebp
  00371	5d		 pop	 ebp
  00372	c3		 ret	 0
_F_AdvanceToNextScene ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_DrawCreditScreen
_TEXT	SEGMENT
tv76 = -84						; size = 4
_x$1 = -16						; size = 4
_y$ = -12						; size = 4
_height$ = -8						; size = 4
_i$ = -4						; size = 4
_creditpassed$ = 8					; size = 4
_F_DrawCreditScreen PROC				; COMDAT

; 1509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1510 : 	INT32 i, height, y;
; 1511 : 
; 1512 : 	if (creditpassed->smallnames)

  00009	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  0000c	0f b6 48 21	 movzx	 ecx, BYTE PTR [eax+33]
  00010	85 c9		 test	 ecx, ecx
  00012	74 1e		 je	 SHORT $LN7@F_DrawCred

; 1513 : 		height = BASEVIDHEIGHT/((creditpassed->numnames/2)+1);

  00014	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  00017	0f b6 40 20	 movzx	 eax, BYTE PTR [eax+32]
  0001b	99		 cdq
  0001c	2b c2		 sub	 eax, edx
  0001e	8b c8		 mov	 ecx, eax
  00020	d1 f9		 sar	 ecx, 1
  00022	83 c1 01	 add	 ecx, 1
  00025	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  0002a	99		 cdq
  0002b	f7 f9		 idiv	 ecx
  0002d	89 45 f8	 mov	 DWORD PTR _height$[ebp], eax
  00030	eb 15		 jmp	 SHORT $LN8@F_DrawCred
$LN7@F_DrawCred:

; 1514 : 	else
; 1515 : 		height = BASEVIDHEIGHT/(creditpassed->numnames+1);

  00032	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  00035	0f b6 48 20	 movzx	 ecx, BYTE PTR [eax+32]
  00039	83 c1 01	 add	 ecx, 1
  0003c	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  00041	99		 cdq
  00042	f7 f9		 idiv	 ecx
  00044	89 45 f8	 mov	 DWORD PTR _height$[ebp], eax
$LN8@F_DrawCred:

; 1516 : 
; 1517 : 	switch (animtimer)

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR _animtimer
  0004c	89 45 ac	 mov	 DWORD PTR tv76[ebp], eax
  0004f	8b 4d ac	 mov	 ecx, DWORD PTR tv76[ebp]
  00052	83 e9 01	 sub	 ecx, 1
  00055	89 4d ac	 mov	 DWORD PTR tv76[ebp], ecx
  00058	83 7d ac 11	 cmp	 DWORD PTR tv76[ebp], 17	; 00000011H
  0005c	0f 87 c4 03 00
	00		 ja	 $LN2@F_DrawCred
  00062	8b 55 ac	 mov	 edx, DWORD PTR tv76[ebp]
  00065	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN61@F_DrawCred[edx*4]
$LN9@F_DrawCred:

; 1518 : 	{
; 1519 : 		case 1:
; 1520 : 		case 2:
; 1521 : 			if (ultimatemode)

  0006c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00073	85 c0		 test	 eax, eax
  00075	74 23		 je	 SHORT $LN11@F_DrawCred

; 1522 : 				V_DrawSmallScaledPatch(204, 118, 0, W_CachePatchName("ACRED02", PU_CACHE));

  00077	6a 65		 push	 101			; 00000065H
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_07GDBINEP@ACRED02@
  0007e	e8 00 00 00 00	 call	 _W_CachePatchName
  00083	83 c4 08	 add	 esp, 8
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	6a 76		 push	 118			; 00000076H
  0008b	68 cc 00 00 00	 push	 204			; 000000ccH
  00090	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00095	83 c4 10	 add	 esp, 16			; 00000010H
  00098	eb 1e		 jmp	 SHORT $LN12@F_DrawCred
$LN11@F_DrawCred:

; 1523 : 			else
; 1524 : 				V_DrawSmallScaledPatch(8, 112, 0, W_CachePatchName("CREDIT01", PU_CACHE));

  0009a	6a 65		 push	 101			; 00000065H
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_08JIKKHCGD@CREDIT01@
  000a1	e8 00 00 00 00	 call	 _W_CachePatchName
  000a6	83 c4 08	 add	 esp, 8
  000a9	50		 push	 eax
  000aa	6a 00		 push	 0
  000ac	6a 70		 push	 112			; 00000070H
  000ae	6a 08		 push	 8
  000b0	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@F_DrawCred:

; 1525 : 			break;

  000b8	e9 69 03 00 00	 jmp	 $LN2@F_DrawCred
$LN13@F_DrawCred:

; 1526 : 		case 3:
; 1527 : 		case 4:
; 1528 : 			if (ultimatemode)

  000bd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  000c4	85 c0		 test	 eax, eax
  000c6	74 41		 je	 SHORT $LN15@F_DrawCred

; 1529 : 			{
; 1530 : 				V_DrawSmallScaledPatch(234, 118, 0, W_CachePatchName("ACRED01", PU_CACHE));

  000c8	6a 65		 push	 101			; 00000065H
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_07CNBMNOIM@ACRED01@
  000cf	e8 00 00 00 00	 call	 _W_CachePatchName
  000d4	83 c4 08	 add	 esp, 8
  000d7	50		 push	 eax
  000d8	6a 00		 push	 0
  000da	6a 76		 push	 118			; 00000076H
  000dc	68 ea 00 00 00	 push	 234			; 000000eaH
  000e1	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000e6	83 c4 10	 add	 esp, 16			; 00000010H

; 1531 : 				V_DrawSmallScaledPatch(4, 4, 0, W_CachePatchName("ACRED03", PU_CACHE));

  000e9	6a 65		 push	 101			; 00000065H
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_07BPCKLMAO@ACRED03@
  000f0	e8 00 00 00 00	 call	 _W_CachePatchName
  000f5	83 c4 08	 add	 esp, 8
  000f8	50		 push	 eax
  000f9	6a 00		 push	 0
  000fb	6a 04		 push	 4
  000fd	6a 04		 push	 4
  000ff	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00104	83 c4 10	 add	 esp, 16			; 00000010H

; 1532 : 			}

  00107	eb 3f		 jmp	 SHORT $LN16@F_DrawCred
$LN15@F_DrawCred:

; 1533 : 			else
; 1534 : 			{
; 1535 : 				V_DrawSmallScaledPatch(4, 4, 0, W_CachePatchName("CREDIT13", PU_CACHE));

  00109	6a 65		 push	 101			; 00000065H
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_08KLFOHKNG@CREDIT13@
  00110	e8 00 00 00 00	 call	 _W_CachePatchName
  00115	83 c4 08	 add	 esp, 8
  00118	50		 push	 eax
  00119	6a 00		 push	 0
  0011b	6a 04		 push	 4
  0011d	6a 04		 push	 4
  0011f	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00124	83 c4 10	 add	 esp, 16			; 00000010H

; 1536 : 				V_DrawSmallScaledPatch(250, 100, 0, W_CachePatchName("CREDIT12", PU_CACHE));

  00127	6a 65		 push	 101			; 00000065H
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_08LCEFELJH@CREDIT12@
  0012e	e8 00 00 00 00	 call	 _W_CachePatchName
  00133	83 c4 08	 add	 esp, 8
  00136	50		 push	 eax
  00137	6a 00		 push	 0
  00139	6a 64		 push	 100			; 00000064H
  0013b	68 fa 00 00 00	 push	 250			; 000000faH
  00140	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00145	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@F_DrawCred:

; 1537 : 			}
; 1538 : 			break;

  00148	e9 d9 02 00 00	 jmp	 $LN2@F_DrawCred
$LN17@F_DrawCred:

; 1539 : 		case 5:
; 1540 : 			if (ultimatemode)

  0014d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00154	85 c0		 test	 eax, eax
  00156	74 20		 je	 SHORT $LN18@F_DrawCred

; 1541 : 				V_DrawSmallScaledPatch(4, 72, 0, W_CachePatchName("ACRED04", PU_CACHE));

  00158	6a 65		 push	 101			; 00000065H
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_07FAGLCKMJ@ACRED04@
  0015f	e8 00 00 00 00	 call	 _W_CachePatchName
  00164	83 c4 08	 add	 esp, 8
  00167	50		 push	 eax
  00168	6a 00		 push	 0
  0016a	6a 48		 push	 72			; 00000048H
  0016c	6a 04		 push	 4
  0016e	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00173	83 c4 10	 add	 esp, 16			; 00000010H
  00176	eb 1e		 jmp	 SHORT $LN19@F_DrawCred
$LN18@F_DrawCred:

; 1542 : 			else
; 1543 : 				V_DrawSmallScaledPatch(8, 0, 0, W_CachePatchName("CREDIT03", PU_CACHE));

  00178	6a 65		 push	 101			; 00000065H
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_08KKJMBAOB@CREDIT03@
  0017f	e8 00 00 00 00	 call	 _W_CachePatchName
  00184	83 c4 08	 add	 esp, 8
  00187	50		 push	 eax
  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	6a 08		 push	 8
  0018e	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00193	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@F_DrawCred:

; 1544 : 			break;

  00196	e9 8b 02 00 00	 jmp	 $LN2@F_DrawCred
$LN20@F_DrawCred:

; 1545 : 		case 6:
; 1546 : 			if (ultimatemode)

  0019b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  001a2	85 c0		 test	 eax, eax
  001a4	74 20		 je	 SHORT $LN21@F_DrawCred

; 1547 : 				V_DrawSmallScaledPatch(55, 0, 0, W_CachePatchName("ACRED05", PU_CACHE));

  001a6	6a 65		 push	 101			; 00000065H
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_07EJHABLII@ACRED05@
  001ad	e8 00 00 00 00	 call	 _W_CachePatchName
  001b2	83 c4 08	 add	 esp, 8
  001b5	50		 push	 eax
  001b6	6a 00		 push	 0
  001b8	6a 00		 push	 0
  001ba	6a 37		 push	 55			; 00000037H
  001bc	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  001c1	83 c4 10	 add	 esp, 16			; 00000010H
  001c4	eb 21		 jmp	 SHORT $LN22@F_DrawCred
$LN21@F_DrawCred:

; 1548 : 			else
; 1549 : 				V_DrawSmallScaledPatch(248, 110, 0, W_CachePatchName("CREDIT11", PU_CACHE));

  001c6	6a 65		 push	 101			; 00000065H
  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_08JJGIBIFE@CREDIT11@
  001cd	e8 00 00 00 00	 call	 _W_CachePatchName
  001d2	83 c4 08	 add	 esp, 8
  001d5	50		 push	 eax
  001d6	6a 00		 push	 0
  001d8	6a 6e		 push	 110			; 0000006eH
  001da	68 f8 00 00 00	 push	 248			; 000000f8H
  001df	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  001e4	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@F_DrawCred:

; 1550 : 			break;

  001e7	e9 3a 02 00 00	 jmp	 $LN2@F_DrawCred
$LN23@F_DrawCred:

; 1551 : 		case 7:
; 1552 : 		case 8:
; 1553 : 			if (ultimatemode)

  001ec	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  001f3	85 c0		 test	 eax, eax
  001f5	74 20		 je	 SHORT $LN25@F_DrawCred

; 1554 : 				V_DrawSmallScaledPatch(8, 108, 0, W_CachePatchName("ACRED06", PU_CACHE));

  001f7	6a 65		 push	 101			; 00000065H
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_07GCFNEIEL@ACRED06@
  001fe	e8 00 00 00 00	 call	 _W_CachePatchName
  00203	83 c4 08	 add	 esp, 8
  00206	50		 push	 eax
  00207	6a 00		 push	 0
  00209	6a 6c		 push	 108			; 0000006cH
  0020b	6a 08		 push	 8
  0020d	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00212	83 c4 10	 add	 esp, 16			; 00000010H
  00215	eb 1e		 jmp	 SHORT $LN26@F_DrawCred
$LN25@F_DrawCred:

; 1555 : 			else
; 1556 : 				V_DrawSmallScaledPatch(8, 112, 0, W_CachePatchName("CREDIT04", PU_CACHE));

  00217	6a 65		 push	 101			; 00000065H
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_08OFNNIGCG@CREDIT04@
  0021e	e8 00 00 00 00	 call	 _W_CachePatchName
  00223	83 c4 08	 add	 esp, 8
  00226	50		 push	 eax
  00227	6a 00		 push	 0
  00229	6a 70		 push	 112			; 00000070H
  0022b	6a 08		 push	 8
  0022d	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00232	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@F_DrawCred:

; 1557 : 			break;

  00235	e9 ec 01 00 00	 jmp	 $LN2@F_DrawCred
$LN27@F_DrawCred:

; 1558 : 		case 9:
; 1559 : 			if (ultimatemode)

  0023a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00241	85 c0		 test	 eax, eax
  00243	74 20		 je	 SHORT $LN28@F_DrawCred

; 1560 : 				V_DrawSmallScaledPatch((BASEVIDWIDTH/2) - 46, 102, 0, W_CachePatchName("ACRED07", PU_CACHE));

  00245	6a 65		 push	 101			; 00000065H
  00247	68 00 00 00 00	 push	 OFFSET ??_C@_07HLEGHJAK@ACRED07@
  0024c	e8 00 00 00 00	 call	 _W_CachePatchName
  00251	83 c4 08	 add	 esp, 8
  00254	50		 push	 eax
  00255	6a 00		 push	 0
  00257	6a 66		 push	 102			; 00000066H
  00259	6a 72		 push	 114			; 00000072H
  0025b	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00260	83 c4 10	 add	 esp, 16			; 00000010H
  00263	eb 1e		 jmp	 SHORT $LN29@F_DrawCred
$LN28@F_DrawCred:

; 1561 : 			else
; 1562 : 				V_DrawSmallScaledPatch((BASEVIDWIDTH/2) - 48, 108, 0, W_CachePatchName("CREDIT10", PU_CACHE));

  00265	6a 65		 push	 101			; 00000065H
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_08IAHDCJBF@CREDIT10@
  0026c	e8 00 00 00 00	 call	 _W_CachePatchName
  00271	83 c4 08	 add	 esp, 8
  00274	50		 push	 eax
  00275	6a 00		 push	 0
  00277	6a 6c		 push	 108			; 0000006cH
  00279	6a 70		 push	 112			; 00000070H
  0027b	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00280	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@F_DrawCred:

; 1563 : 			break;

  00283	e9 9e 01 00 00	 jmp	 $LN2@F_DrawCred
$LN30@F_DrawCred:

; 1564 : 		case 10:
; 1565 : 			if (ultimatemode)

  00288	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  0028f	85 c0		 test	 eax, eax
  00291	74 26		 je	 SHORT $LN31@F_DrawCred

; 1566 : 				V_DrawSmallScaledPatch(202, 128, 0, W_CachePatchName("ACRED09", PU_CACHE));

  00293	6a 65		 push	 101			; 00000065H
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_07OFMFFEIE@ACRED09@
  0029a	e8 00 00 00 00	 call	 _W_CachePatchName
  0029f	83 c4 08	 add	 esp, 8
  002a2	50		 push	 eax
  002a3	6a 00		 push	 0
  002a5	68 80 00 00 00	 push	 128			; 00000080H
  002aa	68 ca 00 00 00	 push	 202			; 000000caH
  002af	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  002b4	83 c4 10	 add	 esp, 16			; 00000010H
  002b7	eb 21		 jmp	 SHORT $LN32@F_DrawCred
$LN31@F_DrawCred:

; 1567 : 			else
; 1568 : 				V_DrawSmallScaledPatch(240, 8, 0, W_CachePatchName("CREDIT05", PU_CACHE));

  002b9	6a 65		 push	 101			; 00000065H
  002bb	68 00 00 00 00	 push	 OFFSET ??_C@_08PMMGLHGH@CREDIT05@
  002c0	e8 00 00 00 00	 call	 _W_CachePatchName
  002c5	83 c4 08	 add	 esp, 8
  002c8	50		 push	 eax
  002c9	6a 00		 push	 0
  002cb	6a 08		 push	 8
  002cd	68 f0 00 00 00	 push	 240			; 000000f0H
  002d2	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  002d7	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@F_DrawCred:

; 1569 : 			break;

  002da	e9 47 01 00 00	 jmp	 $LN2@F_DrawCred
$LN33@F_DrawCred:

; 1570 : 		case 11:
; 1571 : 		case 12:
; 1572 : 			if (ultimatemode)

  002df	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  002e6	85 c0		 test	 eax, eax
  002e8	74 20		 je	 SHORT $LN35@F_DrawCred

; 1573 : 				V_DrawSmallScaledPatch((BASEVIDWIDTH/2) - 46, 102, 0, W_CachePatchName("ACRED11", PU_CACHE));

  002ea	6a 65		 push	 101			; 00000065H
  002ec	68 00 00 00 00	 push	 OFFSET ??_C@_07CMNOLELL@ACRED11@
  002f1	e8 00 00 00 00	 call	 _W_CachePatchName
  002f6	83 c4 08	 add	 esp, 8
  002f9	50		 push	 eax
  002fa	6a 00		 push	 0
  002fc	6a 66		 push	 102			; 00000066H
  002fe	6a 72		 push	 114			; 00000072H
  00300	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00305	83 c4 10	 add	 esp, 16			; 00000010H
  00308	eb 1e		 jmp	 SHORT $LN36@F_DrawCred
$LN35@F_DrawCred:

; 1574 : 			else
; 1575 : 				V_DrawSmallScaledPatch(120, 120, 0, W_CachePatchName("CREDIT06", PU_CACHE));

  0030a	6a 65		 push	 101			; 00000065H
  0030c	68 00 00 00 00	 push	 OFFSET ??_C@_08NHOLOEKE@CREDIT06@
  00311	e8 00 00 00 00	 call	 _W_CachePatchName
  00316	83 c4 08	 add	 esp, 8
  00319	50		 push	 eax
  0031a	6a 00		 push	 0
  0031c	6a 78		 push	 120			; 00000078H
  0031e	6a 78		 push	 120			; 00000078H
  00320	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00325	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@F_DrawCred:

; 1576 : 			break;

  00328	e9 f9 00 00 00	 jmp	 $LN2@F_DrawCred
$LN37@F_DrawCred:

; 1577 : 		case 13:
; 1578 : 		case 14:
; 1579 : 			if (ultimatemode)

  0032d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00334	85 c0		 test	 eax, eax
  00336	74 41		 je	 SHORT $LN39@F_DrawCred

; 1580 : 			{
; 1581 : 				V_DrawSmallScaledPatch(174, 84, 0, W_CachePatchName("ACRED08", PU_CACHE));

  00338	6a 65		 push	 101			; 00000065H
  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_07PMNOGFMF@ACRED08@
  0033f	e8 00 00 00 00	 call	 _W_CachePatchName
  00344	83 c4 08	 add	 esp, 8
  00347	50		 push	 eax
  00348	6a 00		 push	 0
  0034a	6a 54		 push	 84			; 00000054H
  0034c	68 ae 00 00 00	 push	 174			; 000000aeH
  00351	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00356	83 c4 10	 add	 esp, 16			; 00000010H

; 1582 : 				V_DrawSmallScaledPatch(2, 64, 0, W_CachePatchName("ACRED10", PU_CACHE));

  00359	6a 65		 push	 101			; 00000065H
  0035b	68 00 00 00 00	 push	 OFFSET ??_C@_07DFMFIFPK@ACRED10@
  00360	e8 00 00 00 00	 call	 _W_CachePatchName
  00365	83 c4 08	 add	 esp, 8
  00368	50		 push	 eax
  00369	6a 00		 push	 0
  0036b	6a 40		 push	 64			; 00000040H
  0036d	6a 02		 push	 2
  0036f	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00374	83 c4 10	 add	 esp, 16			; 00000010H

; 1583 : 			}

  00377	eb 1e		 jmp	 SHORT $LN40@F_DrawCred
$LN39@F_DrawCred:

; 1584 : 			else
; 1585 : 				V_DrawSmallScaledPatch(8, 100, 0, W_CachePatchName("CREDIT07", PU_CACHE));

  00379	6a 65		 push	 101			; 00000065H
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_08MOPANFOF@CREDIT07@
  00380	e8 00 00 00 00	 call	 _W_CachePatchName
  00385	83 c4 08	 add	 esp, 8
  00388	50		 push	 eax
  00389	6a 00		 push	 0
  0038b	6a 64		 push	 100			; 00000064H
  0038d	6a 08		 push	 8
  0038f	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00394	83 c4 10	 add	 esp, 16			; 00000010H
$LN40@F_DrawCred:

; 1586 : 			break;

  00397	e9 8a 00 00 00	 jmp	 $LN2@F_DrawCred
$LN41@F_DrawCred:

; 1587 : 		case 15:
; 1588 : 		case 16:
; 1589 : 			if (ultimatemode)

  0039c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  003a3	85 c0		 test	 eax, eax
  003a5	74 41		 je	 SHORT $LN43@F_DrawCred

; 1590 : 			{
; 1591 : 				V_DrawSmallScaledPatch(174, 84, 0, W_CachePatchName("ACRED08", PU_CACHE));

  003a7	6a 65		 push	 101			; 00000065H
  003a9	68 00 00 00 00	 push	 OFFSET ??_C@_07PMNOGFMF@ACRED08@
  003ae	e8 00 00 00 00	 call	 _W_CachePatchName
  003b3	83 c4 08	 add	 esp, 8
  003b6	50		 push	 eax
  003b7	6a 00		 push	 0
  003b9	6a 54		 push	 84			; 00000054H
  003bb	68 ae 00 00 00	 push	 174			; 000000aeH
  003c0	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  003c5	83 c4 10	 add	 esp, 16			; 00000010H

; 1592 : 				V_DrawSmallScaledPatch(2, 52, 0, W_CachePatchName("ACRED10", PU_CACHE));

  003c8	6a 65		 push	 101			; 00000065H
  003ca	68 00 00 00 00	 push	 OFFSET ??_C@_07DFMFIFPK@ACRED10@
  003cf	e8 00 00 00 00	 call	 _W_CachePatchName
  003d4	83 c4 08	 add	 esp, 8
  003d7	50		 push	 eax
  003d8	6a 00		 push	 0
  003da	6a 34		 push	 52			; 00000034H
  003dc	6a 02		 push	 2
  003de	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  003e3	83 c4 10	 add	 esp, 16			; 00000010H

; 1593 : 			}

  003e6	eb 1e		 jmp	 SHORT $LN44@F_DrawCred
$LN43@F_DrawCred:

; 1594 : 			else
; 1595 : 				V_DrawSmallScaledPatch(8, 0, 0, W_CachePatchName("CREDIT08", PU_CACHE));

  003e8	6a 65		 push	 101			; 00000065H
  003ea	68 00 00 00 00	 push	 OFFSET ??_C@_08EJGIMJCK@CREDIT08@
  003ef	e8 00 00 00 00	 call	 _W_CachePatchName
  003f4	83 c4 08	 add	 esp, 8
  003f7	50		 push	 eax
  003f8	6a 00		 push	 0
  003fa	6a 00		 push	 0
  003fc	6a 08		 push	 8
  003fe	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00403	83 c4 10	 add	 esp, 16			; 00000010H
$LN44@F_DrawCred:

; 1596 : 			break;

  00406	eb 1e		 jmp	 SHORT $LN2@F_DrawCred
$LN45@F_DrawCred:

; 1597 : 		case 17:
; 1598 : 		case 18:
; 1599 : 			V_DrawSmallScaledPatch(112, 104, 0, W_CachePatchName("CREDIT09", PU_CACHE));

  00408	6a 65		 push	 101			; 00000065H
  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_08FAHDPIGL@CREDIT09@
  0040f	e8 00 00 00 00	 call	 _W_CachePatchName
  00414	83 c4 08	 add	 esp, 8
  00417	50		 push	 eax
  00418	6a 00		 push	 0
  0041a	6a 68		 push	 104			; 00000068H
  0041c	6a 70		 push	 112			; 00000070H
  0041e	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00423	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@F_DrawCred:

; 1600 : 			break;
; 1601 : 	}
; 1602 : 
; 1603 : 	if (creditpassed->numnames == 1) // Shift it up a bit

  00426	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  00429	0f b6 48 20	 movzx	 ecx, BYTE PTR [eax+32]
  0042d	83 f9 01	 cmp	 ecx, 1
  00430	75 09		 jne	 SHORT $LN47@F_DrawCred

; 1604 : 		height -= 16;

  00432	8b 45 f8	 mov	 eax, DWORD PTR _height$[ebp]
  00435	83 e8 10	 sub	 eax, 16			; 00000010H
  00438	89 45 f8	 mov	 DWORD PTR _height$[ebp], eax
$LN47@F_DrawCred:

; 1605 : 
; 1606 : 	V_DrawCreditString((BASEVIDWIDTH - V_CreditStringWidth(creditpassed->header))/2, height, 0,

  0043b	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  0043e	50		 push	 eax
  0043f	6a 00		 push	 0
  00441	8b 4d f8	 mov	 ecx, DWORD PTR _height$[ebp]
  00444	51		 push	 ecx
  00445	8b 55 08	 mov	 edx, DWORD PTR _creditpassed$[ebp]
  00448	52		 push	 edx
  00449	e8 00 00 00 00	 call	 _V_CreditStringWidth
  0044e	83 c4 04	 add	 esp, 4
  00451	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  00456	2b c8		 sub	 ecx, eax
  00458	8b c1		 mov	 eax, ecx
  0045a	99		 cdq
  0045b	2b c2		 sub	 eax, edx
  0045d	d1 f8		 sar	 eax, 1
  0045f	50		 push	 eax
  00460	e8 00 00 00 00	 call	 _V_DrawCreditString
  00465	83 c4 10	 add	 esp, 16			; 00000010H

; 1607 : 		creditpassed->header);
; 1608 : 
; 1609 : 	if (creditpassed->smallnames)

  00468	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  0046b	0f b6 48 21	 movzx	 ecx, BYTE PTR [eax+33]
  0046f	85 c9		 test	 ecx, ecx
  00471	74 09		 je	 SHORT $LN48@F_DrawCred

; 1610 : 		height += 32;

  00473	8b 45 f8	 mov	 eax, DWORD PTR _height$[ebp]
  00476	83 c0 20	 add	 eax, 32			; 00000020H
  00479	89 45 f8	 mov	 DWORD PTR _height$[ebp], eax
$LN48@F_DrawCred:

; 1611 : 
; 1612 : 	y = 0;

  0047c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 1613 : 
; 1614 : 	for (i = 0; i < creditpassed->numnames; i++)

  00483	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0048a	eb 09		 jmp	 SHORT $LN6@F_DrawCred
$LN4@F_DrawCred:
  0048c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0048f	83 c0 01	 add	 eax, 1
  00492	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN6@F_DrawCred:
  00495	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  00498	0f b6 48 20	 movzx	 ecx, BYTE PTR [eax+32]
  0049c	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  0049f	0f 8d 07 02 00
	00		 jge	 $LN5@F_DrawCred

; 1615 : 	{
; 1616 : 		if (creditpassed->smallnames)

  004a5	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  004a8	0f b6 48 21	 movzx	 ecx, BYTE PTR [eax+33]
  004ac	85 c9		 test	 ecx, ecx
  004ae	0f 84 4e 01 00
	00		 je	 $LN49@F_DrawCred

; 1617 : 		{
; 1618 : 			INT32 x;
; 1619 : 
; 1620 : 			if (cv_realnames.value)

  004b4	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_realnames+20, 0
  004bb	0f 84 92 00 00
	00		 je	 $LN51@F_DrawCred

; 1621 : 			{
; 1622 : 				if (i < creditpassed->numnames/2)

  004c1	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  004c4	0f b6 40 20	 movzx	 eax, BYTE PTR [eax+32]
  004c8	99		 cdq
  004c9	2b c2		 sub	 eax, edx
  004cb	d1 f8		 sar	 eax, 1
  004cd	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  004d0	7d 2a		 jge	 SHORT $LN53@F_DrawCred

; 1623 : 					x = (BASEVIDWIDTH/4) - (V_StringWidth(creditpassed->realnames[i])/2);

  004d2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004d5	c1 e0 05	 shl	 eax, 5
  004d8	8b 4d 08	 mov	 ecx, DWORD PTR _creditpassed$[ebp]
  004db	8d 94 01 22 04
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1058]
  004e2	52		 push	 edx
  004e3	e8 00 00 00 00	 call	 _V_StringWidth
  004e8	83 c4 04	 add	 esp, 4
  004eb	99		 cdq
  004ec	2b c2		 sub	 eax, edx
  004ee	d1 f8		 sar	 eax, 1
  004f0	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  004f5	2b c8		 sub	 ecx, eax
  004f7	89 4d f0	 mov	 DWORD PTR _x$1[ebp], ecx
  004fa	eb 28		 jmp	 SHORT $LN54@F_DrawCred
$LN53@F_DrawCred:

; 1624 : 				else
; 1625 : 					x = ((BASEVIDWIDTH/4)*3) - (V_StringWidth(creditpassed->realnames[i])/2);

  004fc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004ff	c1 e0 05	 shl	 eax, 5
  00502	8b 4d 08	 mov	 ecx, DWORD PTR _creditpassed$[ebp]
  00505	8d 94 01 22 04
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1058]
  0050c	52		 push	 edx
  0050d	e8 00 00 00 00	 call	 _V_StringWidth
  00512	83 c4 04	 add	 esp, 4
  00515	99		 cdq
  00516	2b c2		 sub	 eax, edx
  00518	d1 f8		 sar	 eax, 1
  0051a	b9 f0 00 00 00	 mov	 ecx, 240		; 000000f0H
  0051f	2b c8		 sub	 ecx, eax
  00521	89 4d f0	 mov	 DWORD PTR _x$1[ebp], ecx
$LN54@F_DrawCred:

; 1626 : 
; 1627 : 				V_DrawString(x,

  00524	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00527	c1 e0 05	 shl	 eax, 5
  0052a	8b 4d 08	 mov	 ecx, DWORD PTR _creditpassed$[ebp]
  0052d	8d 94 01 22 04
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1058]
  00534	52		 push	 edx
  00535	6a 00		 push	 0
  00537	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0053a	8b 4d f8	 mov	 ecx, DWORD PTR _height$[ebp]
  0053d	8d 54 01 f8	 lea	 edx, DWORD PTR [ecx+eax-8]
  00541	52		 push	 edx
  00542	8b 45 f0	 mov	 eax, DWORD PTR _x$1[ebp]
  00545	50		 push	 eax
  00546	e8 00 00 00 00	 call	 _V_DrawString
  0054b	83 c4 10	 add	 esp, 16			; 00000010H

; 1628 : 					height + y - 8, 0, creditpassed->realnames[i]); //shifted up to prevent cutoff. -Spazzo
; 1629 : 			}

  0054e	e9 84 00 00 00	 jmp	 $LN52@F_DrawCred
$LN51@F_DrawCred:

; 1630 : 			else
; 1631 : 			{
; 1632 : 				if (i < creditpassed->numnames/2)

  00553	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  00556	0f b6 40 20	 movzx	 eax, BYTE PTR [eax+32]
  0055a	99		 cdq
  0055b	2b c2		 sub	 eax, edx
  0055d	d1 f8		 sar	 eax, 1
  0055f	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00562	7d 27		 jge	 SHORT $LN55@F_DrawCred

; 1633 : 					x = (BASEVIDWIDTH/4) - (V_StringWidth(creditpassed->fakenames[i])/2);

  00564	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00567	c1 e0 05	 shl	 eax, 5
  0056a	8b 4d 08	 mov	 ecx, DWORD PTR _creditpassed$[ebp]
  0056d	8d 54 01 22	 lea	 edx, DWORD PTR [ecx+eax+34]
  00571	52		 push	 edx
  00572	e8 00 00 00 00	 call	 _V_StringWidth
  00577	83 c4 04	 add	 esp, 4
  0057a	99		 cdq
  0057b	2b c2		 sub	 eax, edx
  0057d	d1 f8		 sar	 eax, 1
  0057f	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00584	2b c8		 sub	 ecx, eax
  00586	89 4d f0	 mov	 DWORD PTR _x$1[ebp], ecx
  00589	eb 25		 jmp	 SHORT $LN56@F_DrawCred
$LN55@F_DrawCred:

; 1634 : 				else
; 1635 : 					x = ((BASEVIDWIDTH/4)*3) - (V_StringWidth(creditpassed->fakenames[i])/2);

  0058b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0058e	c1 e0 05	 shl	 eax, 5
  00591	8b 4d 08	 mov	 ecx, DWORD PTR _creditpassed$[ebp]
  00594	8d 54 01 22	 lea	 edx, DWORD PTR [ecx+eax+34]
  00598	52		 push	 edx
  00599	e8 00 00 00 00	 call	 _V_StringWidth
  0059e	83 c4 04	 add	 esp, 4
  005a1	99		 cdq
  005a2	2b c2		 sub	 eax, edx
  005a4	d1 f8		 sar	 eax, 1
  005a6	b9 f0 00 00 00	 mov	 ecx, 240		; 000000f0H
  005ab	2b c8		 sub	 ecx, eax
  005ad	89 4d f0	 mov	 DWORD PTR _x$1[ebp], ecx
$LN56@F_DrawCred:

; 1636 : 
; 1637 : 				V_DrawString(x,

  005b0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  005b3	c1 e0 05	 shl	 eax, 5
  005b6	8b 4d 08	 mov	 ecx, DWORD PTR _creditpassed$[ebp]
  005b9	8d 54 01 22	 lea	 edx, DWORD PTR [ecx+eax+34]
  005bd	52		 push	 edx
  005be	6a 00		 push	 0
  005c0	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  005c3	8b 4d f8	 mov	 ecx, DWORD PTR _height$[ebp]
  005c6	8d 54 01 f8	 lea	 edx, DWORD PTR [ecx+eax-8]
  005ca	52		 push	 edx
  005cb	8b 45 f0	 mov	 eax, DWORD PTR _x$1[ebp]
  005ce	50		 push	 eax
  005cf	e8 00 00 00 00	 call	 _V_DrawString
  005d4	83 c4 10	 add	 esp, 16			; 00000010H
$LN52@F_DrawCred:

; 1638 : 					height + y - 8, 0, creditpassed->fakenames[i]);
; 1639 : 			}
; 1640 : 			y += 16;

  005d7	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  005da	83 c0 10	 add	 eax, 16			; 00000010H
  005dd	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax

; 1641 : 
; 1642 : 			if (i + 1 == creditpassed->numnames/2)

  005e0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  005e3	83 c1 01	 add	 ecx, 1
  005e6	8b 55 08	 mov	 edx, DWORD PTR _creditpassed$[ebp]
  005e9	0f b6 42 20	 movzx	 eax, BYTE PTR [edx+32]
  005ed	99		 cdq
  005ee	2b c2		 sub	 eax, edx
  005f0	d1 f8		 sar	 eax, 1
  005f2	3b c8		 cmp	 ecx, eax
  005f4	75 07		 jne	 SHORT $LN57@F_DrawCred

; 1643 : 				y = 0;

  005f6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
$LN57@F_DrawCred:

; 1644 : 		}

  005fd	e9 a5 00 00 00	 jmp	 $LN59@F_DrawCred
$LN49@F_DrawCred:

; 1645 : 		else
; 1646 : 		{
; 1647 : 			if (cv_realnames.value)

  00602	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_realnames+20, 0
  00609	74 52		 je	 SHORT $LN58@F_DrawCred

; 1648 : 				V_DrawCreditString((BASEVIDWIDTH - V_CreditStringWidth(creditpassed->realnames[i]))/2,

  0060b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0060e	c1 e0 05	 shl	 eax, 5
  00611	8b 4d 08	 mov	 ecx, DWORD PTR _creditpassed$[ebp]
  00614	8d 94 01 22 04
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1058]
  0061b	52		 push	 edx
  0061c	6a 00		 push	 0
  0061e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00621	83 c0 01	 add	 eax, 1
  00624	6b c8 18	 imul	 ecx, eax, 24
  00627	03 4d f8	 add	 ecx, DWORD PTR _height$[ebp]
  0062a	51		 push	 ecx
  0062b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0062e	c1 e2 05	 shl	 edx, 5
  00631	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  00634	8d 8c 10 22 04
	00 00		 lea	 ecx, DWORD PTR [eax+edx+1058]
  0063b	51		 push	 ecx
  0063c	e8 00 00 00 00	 call	 _V_CreditStringWidth
  00641	83 c4 04	 add	 esp, 4
  00644	ba 40 01 00 00	 mov	 edx, 320		; 00000140H
  00649	2b d0		 sub	 edx, eax
  0064b	8b c2		 mov	 eax, edx
  0064d	99		 cdq
  0064e	2b c2		 sub	 eax, edx
  00650	d1 f8		 sar	 eax, 1
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 _V_DrawCreditString
  00658	83 c4 10	 add	 esp, 16			; 00000010H
  0065b	eb 4a		 jmp	 SHORT $LN59@F_DrawCred
$LN58@F_DrawCred:

; 1649 : 					height + (1+i)*24, 0, creditpassed->realnames[i]);
; 1650 : 			else
; 1651 : 				V_DrawCreditString((BASEVIDWIDTH - V_CreditStringWidth(creditpassed->fakenames[i]))/2,

  0065d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00660	c1 e0 05	 shl	 eax, 5
  00663	8b 4d 08	 mov	 ecx, DWORD PTR _creditpassed$[ebp]
  00666	8d 54 01 22	 lea	 edx, DWORD PTR [ecx+eax+34]
  0066a	52		 push	 edx
  0066b	6a 00		 push	 0
  0066d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00670	83 c0 01	 add	 eax, 1
  00673	6b c8 18	 imul	 ecx, eax, 24
  00676	03 4d f8	 add	 ecx, DWORD PTR _height$[ebp]
  00679	51		 push	 ecx
  0067a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0067d	c1 e2 05	 shl	 edx, 5
  00680	8b 45 08	 mov	 eax, DWORD PTR _creditpassed$[ebp]
  00683	8d 4c 10 22	 lea	 ecx, DWORD PTR [eax+edx+34]
  00687	51		 push	 ecx
  00688	e8 00 00 00 00	 call	 _V_CreditStringWidth
  0068d	83 c4 04	 add	 esp, 4
  00690	ba 40 01 00 00	 mov	 edx, 320		; 00000140H
  00695	2b d0		 sub	 edx, eax
  00697	8b c2		 mov	 eax, edx
  00699	99		 cdq
  0069a	2b c2		 sub	 eax, edx
  0069c	d1 f8		 sar	 eax, 1
  0069e	50		 push	 eax
  0069f	e8 00 00 00 00	 call	 _V_DrawCreditString
  006a4	83 c4 10	 add	 esp, 16			; 00000010H
$LN59@F_DrawCred:

; 1652 : 					height + (1+i)*24, 0, creditpassed->fakenames[i]);
; 1653 : 		}
; 1654 : 	}

  006a7	e9 e0 fd ff ff	 jmp	 $LN4@F_DrawCred
$LN5@F_DrawCred:

; 1655 : }

  006ac	5f		 pop	 edi
  006ad	5e		 pop	 esi
  006ae	5b		 pop	 ebx
  006af	8b e5		 mov	 esp, ebp
  006b1	5d		 pop	 ebp
  006b2	c3		 ret	 0
  006b3	90		 npad	 1
$LN61@F_DrawCred:
  006b4	00 00 00 00	 DD	 $LN9@F_DrawCred
  006b8	00 00 00 00	 DD	 $LN9@F_DrawCred
  006bc	00 00 00 00	 DD	 $LN13@F_DrawCred
  006c0	00 00 00 00	 DD	 $LN13@F_DrawCred
  006c4	00 00 00 00	 DD	 $LN17@F_DrawCred
  006c8	00 00 00 00	 DD	 $LN20@F_DrawCred
  006cc	00 00 00 00	 DD	 $LN23@F_DrawCred
  006d0	00 00 00 00	 DD	 $LN23@F_DrawCred
  006d4	00 00 00 00	 DD	 $LN27@F_DrawCred
  006d8	00 00 00 00	 DD	 $LN30@F_DrawCred
  006dc	00 00 00 00	 DD	 $LN33@F_DrawCred
  006e0	00 00 00 00	 DD	 $LN33@F_DrawCred
  006e4	00 00 00 00	 DD	 $LN37@F_DrawCred
  006e8	00 00 00 00	 DD	 $LN37@F_DrawCred
  006ec	00 00 00 00	 DD	 $LN41@F_DrawCred
  006f0	00 00 00 00	 DD	 $LN41@F_DrawCred
  006f4	00 00 00 00	 DD	 $LN45@F_DrawCred
  006f8	00 00 00 00	 DD	 $LN45@F_DrawCred
_F_DrawCreditScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_DrawPatchCol
_TEXT	SEGMENT
tv89 = -108						; size = 4
tv92 = -108						; size = 4
tv95 = -108						; size = 4
tv150 = -108						; size = 4
tv153 = -108						; size = 4
tv156 = -108						; size = 4
_dupxcount$1 = -40					; size = 4
_dupycount$2 = -36					; size = 4
_dupxcount$3 = -32					; size = 4
_dupycount$4 = -28					; size = 4
_count$ = -24						; size = 4
_deststop$ = -20					; size = 4
_dest$ = -16						; size = 4
_desttop$ = -12						; size = 4
_source$ = -8						; size = 4
_column$ = -4						; size = 4
_x$ = 8							; size = 4
_patch$ = 12						; size = 4
_col$ = 16						; size = 4
_yrepeat$ = 20						; size = 4
_F_DrawPatchCol PROC					; COMDAT

; 1107 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1108 : 	const column_t *column;
; 1109 : 	const UINT8 *source;
; 1110 : 	UINT8 *desttop, *dest = NULL;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dest$[ebp], 0

; 1111 : 	const UINT8 *deststop;
; 1112 : 	size_t count;
; 1113 : 
; 1114 : 	column = (column_t *)((UINT8 *)patch + LONG(patch->columnofs[col]));

  00010	8b 45 10	 mov	 eax, DWORD PTR _col$[ebp]
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _patch$[ebp]
  00016	8b 55 0c	 mov	 edx, DWORD PTR _patch$[ebp]
  00019	03 54 81 08	 add	 edx, DWORD PTR [ecx+eax*4+8]
  0001d	89 55 fc	 mov	 DWORD PTR _column$[ebp], edx

; 1115 : 	desttop = screens[0] + x*vid.dupx;

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	6b c8 00	 imul	 ecx, eax, 0
  00028	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0002b	0f af 15 20 00
	00 00		 imul	 edx, DWORD PTR _vid+32
  00032	03 91 00 00 00
	00		 add	 edx, DWORD PTR _screens[ecx]
  00038	89 55 f4	 mov	 DWORD PTR _desttop$[ebp], edx

; 1116 : 	deststop = screens[0] + vid.width * vid.height * vid.bpp;

  0003b	b8 04 00 00 00	 mov	 eax, 4
  00040	6b c8 00	 imul	 ecx, eax, 0
  00043	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _vid+12
  00049	0f af 15 10 00
	00 00		 imul	 edx, DWORD PTR _vid+16
  00050	0f af 15 30 00
	00 00		 imul	 edx, DWORD PTR _vid+48
  00057	03 91 00 00 00
	00		 add	 edx, DWORD PTR _screens[ecx]
  0005d	89 55 ec	 mov	 DWORD PTR _deststop$[ebp], edx
$LN2@F_DrawPatc:

; 1117 : 
; 1118 : 	// step through the posts in a column
; 1119 : 	while (column->topdelta != 0xff)

  00060	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  00063	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00066	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0006c	0f 84 c9 00 00
	00		 je	 $LN3@F_DrawPatc

; 1120 : 	{
; 1121 : 		source = (const UINT8 *)column + 3;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  00075	83 c0 03	 add	 eax, 3
  00078	89 45 f8	 mov	 DWORD PTR _source$[ebp], eax

; 1122 : 		dest = desttop + column->topdelta*vid.width;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  0007e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00081	0f af 0d 0c 00
	00 00		 imul	 ecx, DWORD PTR _vid+12
  00088	03 4d f4	 add	 ecx, DWORD PTR _desttop$[ebp]
  0008b	89 4d f0	 mov	 DWORD PTR _dest$[ebp], ecx

; 1123 : 		count = column->length;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  00091	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00095	89 4d e8	 mov	 DWORD PTR _count$[ebp], ecx
$LN4@F_DrawPatc:

; 1124 : 
; 1125 : 		while (count--)

  00098	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0009b	89 45 94	 mov	 DWORD PTR tv89[ebp], eax
  0009e	8b 4d e8	 mov	 ecx, DWORD PTR _count$[ebp]
  000a1	83 e9 01	 sub	 ecx, 1
  000a4	89 4d e8	 mov	 DWORD PTR _count$[ebp], ecx
  000a7	83 7d 94 00	 cmp	 DWORD PTR tv89[ebp], 0
  000ab	74 78		 je	 SHORT $LN5@F_DrawPatc

; 1126 : 		{
; 1127 : 			INT32 dupycount = vid.dupy;

  000ad	a1 24 00 00 00	 mov	 eax, DWORD PTR _vid+36
  000b2	89 45 e4	 mov	 DWORD PTR _dupycount$4[ebp], eax
$LN6@F_DrawPatc:

; 1128 : 
; 1129 : 			while (dupycount--)

  000b5	8b 45 e4	 mov	 eax, DWORD PTR _dupycount$4[ebp]
  000b8	89 45 94	 mov	 DWORD PTR tv92[ebp], eax
  000bb	8b 4d e4	 mov	 ecx, DWORD PTR _dupycount$4[ebp]
  000be	83 e9 01	 sub	 ecx, 1
  000c1	89 4d e4	 mov	 DWORD PTR _dupycount$4[ebp], ecx
  000c4	83 7d 94 00	 cmp	 DWORD PTR tv92[ebp], 0
  000c8	74 4d		 je	 SHORT $LN7@F_DrawPatc

; 1130 : 			{
; 1131 : 				INT32 dupxcount = vid.dupx;

  000ca	a1 20 00 00 00	 mov	 eax, DWORD PTR _vid+32
  000cf	89 45 e0	 mov	 DWORD PTR _dupxcount$3[ebp], eax
$LN8@F_DrawPatc:

; 1132 : 				while (dupxcount-- && dest <= deststop)

  000d2	8b 45 e0	 mov	 eax, DWORD PTR _dupxcount$3[ebp]
  000d5	89 45 94	 mov	 DWORD PTR tv95[ebp], eax
  000d8	8b 4d e0	 mov	 ecx, DWORD PTR _dupxcount$3[ebp]
  000db	83 e9 01	 sub	 ecx, 1
  000de	89 4d e0	 mov	 DWORD PTR _dupxcount$3[ebp], ecx
  000e1	83 7d 94 00	 cmp	 DWORD PTR tv95[ebp], 0
  000e5	74 1d		 je	 SHORT $LN9@F_DrawPatc
  000e7	8b 45 f0	 mov	 eax, DWORD PTR _dest$[ebp]
  000ea	3b 45 ec	 cmp	 eax, DWORD PTR _deststop$[ebp]
  000ed	77 15		 ja	 SHORT $LN9@F_DrawPatc

; 1133 : 					*dest++ = *source;

  000ef	8b 45 f0	 mov	 eax, DWORD PTR _dest$[ebp]
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _source$[ebp]
  000f5	8a 11		 mov	 dl, BYTE PTR [ecx]
  000f7	88 10		 mov	 BYTE PTR [eax], dl
  000f9	8b 45 f0	 mov	 eax, DWORD PTR _dest$[ebp]
  000fc	83 c0 01	 add	 eax, 1
  000ff	89 45 f0	 mov	 DWORD PTR _dest$[ebp], eax
  00102	eb ce		 jmp	 SHORT $LN8@F_DrawPatc
$LN9@F_DrawPatc:

; 1134 : 
; 1135 : 				dest += (vid.width - vid.dupx);

  00104	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00109	2b 05 20 00 00
	00		 sub	 eax, DWORD PTR _vid+32
  0010f	03 45 f0	 add	 eax, DWORD PTR _dest$[ebp]
  00112	89 45 f0	 mov	 DWORD PTR _dest$[ebp], eax

; 1136 : 			}

  00115	eb 9e		 jmp	 SHORT $LN6@F_DrawPatc
$LN7@F_DrawPatc:

; 1137 : 			source++;

  00117	8b 45 f8	 mov	 eax, DWORD PTR _source$[ebp]
  0011a	83 c0 01	 add	 eax, 1
  0011d	89 45 f8	 mov	 DWORD PTR _source$[ebp], eax

; 1138 : 		}

  00120	e9 73 ff ff ff	 jmp	 $LN4@F_DrawPatc
$LN5@F_DrawPatc:

; 1139 : 		column = (const column_t *)((const UINT8 *)column + column->length + 4);

  00125	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  00128	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0012c	8b 55 fc	 mov	 edx, DWORD PTR _column$[ebp]
  0012f	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00133	89 45 fc	 mov	 DWORD PTR _column$[ebp], eax

; 1140 : 	}

  00136	e9 25 ff ff ff	 jmp	 $LN2@F_DrawPatc
$LN3@F_DrawPatc:

; 1141 : 
; 1142 : 	// repeat a second time, for yrepeat number of pixels
; 1143 : 	if (yrepeat)

  0013b	83 7d 14 00	 cmp	 DWORD PTR _yrepeat$[ebp], 0
  0013f	0f 84 e5 00 00
	00		 je	 $LN11@F_DrawPatc

; 1144 : 	{
; 1145 : 		column = (column_t *)((UINT8 *)patch + LONG(patch->columnofs[col]));

  00145	8b 45 10	 mov	 eax, DWORD PTR _col$[ebp]
  00148	8b 4d 0c	 mov	 ecx, DWORD PTR _patch$[ebp]
  0014b	8b 55 0c	 mov	 edx, DWORD PTR _patch$[ebp]
  0014e	03 54 81 08	 add	 edx, DWORD PTR [ecx+eax*4+8]
  00152	89 55 fc	 mov	 DWORD PTR _column$[ebp], edx
$LN10@F_DrawPatc:

; 1146 : 		while (column->topdelta != 0xff)

  00155	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  00158	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0015b	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00161	0f 84 c3 00 00
	00		 je	 $LN11@F_DrawPatc

; 1147 : 		{
; 1148 : 			source = (const UINT8 *)column + 3;

  00167	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  0016a	83 c0 03	 add	 eax, 3
  0016d	89 45 f8	 mov	 DWORD PTR _source$[ebp], eax

; 1149 : 			count = column->length;

  00170	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  00173	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00177	89 4d e8	 mov	 DWORD PTR _count$[ebp], ecx
$LN12@F_DrawPatc:

; 1150 : 
; 1151 : 			while (count--)

  0017a	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0017d	89 45 94	 mov	 DWORD PTR tv150[ebp], eax
  00180	8b 4d e8	 mov	 ecx, DWORD PTR _count$[ebp]
  00183	83 e9 01	 sub	 ecx, 1
  00186	89 4d e8	 mov	 DWORD PTR _count$[ebp], ecx
  00189	83 7d 94 00	 cmp	 DWORD PTR tv150[ebp], 0
  0018d	74 78		 je	 SHORT $LN13@F_DrawPatc

; 1152 : 			{
; 1153 : 				INT32 dupycount = vid.dupy;

  0018f	a1 24 00 00 00	 mov	 eax, DWORD PTR _vid+36
  00194	89 45 dc	 mov	 DWORD PTR _dupycount$2[ebp], eax
$LN14@F_DrawPatc:

; 1154 : 
; 1155 : 				while (dupycount--)

  00197	8b 45 dc	 mov	 eax, DWORD PTR _dupycount$2[ebp]
  0019a	89 45 94	 mov	 DWORD PTR tv153[ebp], eax
  0019d	8b 4d dc	 mov	 ecx, DWORD PTR _dupycount$2[ebp]
  001a0	83 e9 01	 sub	 ecx, 1
  001a3	89 4d dc	 mov	 DWORD PTR _dupycount$2[ebp], ecx
  001a6	83 7d 94 00	 cmp	 DWORD PTR tv153[ebp], 0
  001aa	74 4d		 je	 SHORT $LN15@F_DrawPatc

; 1156 : 				{
; 1157 : 					INT32 dupxcount = vid.dupx;

  001ac	a1 20 00 00 00	 mov	 eax, DWORD PTR _vid+32
  001b1	89 45 d8	 mov	 DWORD PTR _dupxcount$1[ebp], eax
$LN16@F_DrawPatc:

; 1158 : 					while (dupxcount-- && dest <= deststop)

  001b4	8b 45 d8	 mov	 eax, DWORD PTR _dupxcount$1[ebp]
  001b7	89 45 94	 mov	 DWORD PTR tv156[ebp], eax
  001ba	8b 4d d8	 mov	 ecx, DWORD PTR _dupxcount$1[ebp]
  001bd	83 e9 01	 sub	 ecx, 1
  001c0	89 4d d8	 mov	 DWORD PTR _dupxcount$1[ebp], ecx
  001c3	83 7d 94 00	 cmp	 DWORD PTR tv156[ebp], 0
  001c7	74 1d		 je	 SHORT $LN17@F_DrawPatc
  001c9	8b 45 f0	 mov	 eax, DWORD PTR _dest$[ebp]
  001cc	3b 45 ec	 cmp	 eax, DWORD PTR _deststop$[ebp]
  001cf	77 15		 ja	 SHORT $LN17@F_DrawPatc

; 1159 : 						*dest++ = *source;

  001d1	8b 45 f0	 mov	 eax, DWORD PTR _dest$[ebp]
  001d4	8b 4d f8	 mov	 ecx, DWORD PTR _source$[ebp]
  001d7	8a 11		 mov	 dl, BYTE PTR [ecx]
  001d9	88 10		 mov	 BYTE PTR [eax], dl
  001db	8b 45 f0	 mov	 eax, DWORD PTR _dest$[ebp]
  001de	83 c0 01	 add	 eax, 1
  001e1	89 45 f0	 mov	 DWORD PTR _dest$[ebp], eax
  001e4	eb ce		 jmp	 SHORT $LN16@F_DrawPatc
$LN17@F_DrawPatc:

; 1160 : 
; 1161 : 					dest += (vid.width - vid.dupx);

  001e6	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  001eb	2b 05 20 00 00
	00		 sub	 eax, DWORD PTR _vid+32
  001f1	03 45 f0	 add	 eax, DWORD PTR _dest$[ebp]
  001f4	89 45 f0	 mov	 DWORD PTR _dest$[ebp], eax

; 1162 : 				}

  001f7	eb 9e		 jmp	 SHORT $LN14@F_DrawPatc
$LN15@F_DrawPatc:

; 1163 : 				source++;

  001f9	8b 45 f8	 mov	 eax, DWORD PTR _source$[ebp]
  001fc	83 c0 01	 add	 eax, 1
  001ff	89 45 f8	 mov	 DWORD PTR _source$[ebp], eax

; 1164 : 			}

  00202	e9 73 ff ff ff	 jmp	 $LN12@F_DrawPatc
$LN13@F_DrawPatc:

; 1165 : 			if (!--yrepeat)

  00207	8b 45 14	 mov	 eax, DWORD PTR _yrepeat$[ebp]
  0020a	83 e8 01	 sub	 eax, 1
  0020d	89 45 14	 mov	 DWORD PTR _yrepeat$[ebp], eax
  00210	75 02		 jne	 SHORT $LN19@F_DrawPatc

; 1166 : 				break;

  00212	eb 16		 jmp	 SHORT $LN11@F_DrawPatc
$LN19@F_DrawPatc:

; 1167 : 			column = (const column_t *)((const UINT8 *)column + column->length + 4);

  00214	8b 45 fc	 mov	 eax, DWORD PTR _column$[ebp]
  00217	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0021b	8b 55 fc	 mov	 edx, DWORD PTR _column$[ebp]
  0021e	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00222	89 45 fc	 mov	 DWORD PTR _column$[ebp], eax

; 1168 : 		}

  00225	e9 2b ff ff ff	 jmp	 $LN10@F_DrawPatc
$LN11@F_DrawPatc:

; 1169 : 	}
; 1170 : }

  0022a	5f		 pop	 edi
  0022b	5e		 pop	 esi
  0022c	5b		 pop	 ebx
  0022d	8b e5		 mov	 esp, ebp
  0022f	5d		 pop	 ebp
  00230	c3		 ret	 0
_F_DrawPatchCol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_WriteCutsceneText
_TEXT	SEGMENT
_ch$ = -28						; size = 4
_cy$ = -24						; size = 4
_cx$ = -20						; size = 4
_originalx$ = -16					; size = 4
_w$ = -12						; size = 4
_c$ = -8						; size = 4
_count$ = -4						; size = 4
_F_WriteCutsceneText PROC				; COMDAT

; 788  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 789  : 	INT32 count, c, w, originalx = textxpos, cx = textxpos, cy = textypos;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _textxpos
  0000e	89 45 f0	 mov	 DWORD PTR _originalx$[ebp], eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _textxpos
  00016	89 45 ec	 mov	 DWORD PTR _cx$[ebp], eax
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _textypos
  0001e	89 45 e8	 mov	 DWORD PTR _cy$[ebp], eax

; 790  : 	const char *ch = finaletext; // draw some of the text onto the screen

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletext
  00026	89 45 e4	 mov	 DWORD PTR _ch$[ebp], eax

; 791  : 
; 792  : 	count = (finaletextcount - 10)/2;

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletextcount
  0002e	83 e8 0a	 sub	 eax, 10			; 0000000aH
  00031	99		 cdq
  00032	2b c2		 sub	 eax, edx
  00034	d1 f8		 sar	 eax, 1
  00036	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 793  : 
; 794  : 	if (count < 0)

  00039	79 07		 jns	 SHORT $LN5@F_WriteCut

; 795  : 		count = 0;

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN5@F_WriteCut:

; 796  : 
; 797  : 	if (timetonext == 1 || !ch)

  00042	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _timetonext, 1
  00049	74 06		 je	 SHORT $LN7@F_WriteCut
  0004b	83 7d e4 00	 cmp	 DWORD PTR _ch$[ebp], 0
  0004f	75 23		 jne	 SHORT $LN6@F_WriteCut
$LN7@F_WriteCut:

; 798  : 	{
; 799  : 		finaletextcount = 0;

  00051	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finaletextcount, 0

; 800  : 		timetonext = 0;

  0005b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timetonext, 0

; 801  : 		roidtics = BASEVIDWIDTH - 64;

  00065	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR _roidtics, 256 ; 00000100H

; 802  : 		return;

  0006f	e9 e6 00 00 00	 jmp	 $LN3@F_WriteCut
$LN6@F_WriteCut:

; 803  : 	}
; 804  : 
; 805  : 	for (; count; count--)

  00074	eb 09		 jmp	 SHORT $LN4@F_WriteCut
$LN2@F_WriteCut:
  00076	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00079	83 e8 01	 sub	 eax, 1
  0007c	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@F_WriteCut:
  0007f	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00083	0f 84 d1 00 00
	00		 je	 $LN3@F_WriteCut

; 806  : 	{
; 807  : 		c = *ch++;

  00089	8b 45 e4	 mov	 eax, DWORD PTR _ch$[ebp]
  0008c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0008f	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  00092	8b 55 e4	 mov	 edx, DWORD PTR _ch$[ebp]
  00095	83 c2 01	 add	 edx, 1
  00098	89 55 e4	 mov	 DWORD PTR _ch$[ebp], edx

; 808  : 		if (!c)

  0009b	83 7d f8 00	 cmp	 DWORD PTR _c$[ebp], 0
  0009f	75 05		 jne	 SHORT $LN8@F_WriteCut

; 809  : 			break;

  000a1	e9 b4 00 00 00	 jmp	 $LN3@F_WriteCut
$LN8@F_WriteCut:

; 810  : 
; 811  : 		if (c == '#')

  000a6	83 7d f8 23	 cmp	 DWORD PTR _c$[ebp], 35	; 00000023H
  000aa	75 18		 jne	 SHORT $LN9@F_WriteCut

; 812  : 		{
; 813  : 			if (!timetonext)

  000ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timetonext, 0
  000b3	75 0a		 jne	 SHORT $LN10@F_WriteCut

; 814  : 				timetonext = 5*TICRATE + 1;

  000b5	c7 05 00 00 00
	00 b0 00 00 00	 mov	 DWORD PTR _timetonext, 176 ; 000000b0H
$LN10@F_WriteCut:

; 815  : 			break;

  000bf	e9 96 00 00 00	 jmp	 $LN3@F_WriteCut
$LN9@F_WriteCut:

; 816  : 		}
; 817  : 		if (c == '\n')

  000c4	83 7d f8 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  000c8	75 11		 jne	 SHORT $LN11@F_WriteCut

; 818  : 		{
; 819  : 			cx = originalx;

  000ca	8b 45 f0	 mov	 eax, DWORD PTR _originalx$[ebp]
  000cd	89 45 ec	 mov	 DWORD PTR _cx$[ebp], eax

; 820  : 			cy += 12;

  000d0	8b 45 e8	 mov	 eax, DWORD PTR _cy$[ebp]
  000d3	83 c0 0c	 add	 eax, 12			; 0000000cH
  000d6	89 45 e8	 mov	 DWORD PTR _cy$[ebp], eax

; 821  : 			continue;

  000d9	eb 9b		 jmp	 SHORT $LN2@F_WriteCut
$LN11@F_WriteCut:

; 822  : 		}
; 823  : 
; 824  : 		c = toupper(c) - HU_FONTSTART;

  000db	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _toupper
  000e4	83 c4 04	 add	 esp, 4
  000e7	83 e8 21	 sub	 eax, 33			; 00000021H
  000ea	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax

; 825  : 		if (c < 0 || (c >= HU_REALFONTSIZE && c != '~' - HU_FONTSTART && c != '`' - HU_FONTSTART))

  000ed	78 12		 js	 SHORT $LN13@F_WriteCut
  000ef	83 7d f8 5a	 cmp	 DWORD PTR _c$[ebp], 90	; 0000005aH
  000f3	7c 1a		 jl	 SHORT $LN12@F_WriteCut
  000f5	83 7d f8 5d	 cmp	 DWORD PTR _c$[ebp], 93	; 0000005dH
  000f9	74 14		 je	 SHORT $LN12@F_WriteCut
  000fb	83 7d f8 3f	 cmp	 DWORD PTR _c$[ebp], 63	; 0000003fH
  000ff	74 0e		 je	 SHORT $LN12@F_WriteCut
$LN13@F_WriteCut:

; 826  : 		{ /// \note font end hack
; 827  : 			cx += 4;

  00101	8b 45 ec	 mov	 eax, DWORD PTR _cx$[ebp]
  00104	83 c0 04	 add	 eax, 4
  00107	89 45 ec	 mov	 DWORD PTR _cx$[ebp], eax

; 828  : 			continue;

  0010a	e9 67 ff ff ff	 jmp	 $LN2@F_WriteCut
$LN12@F_WriteCut:

; 829  : 		}
; 830  : 
; 831  : 		w = SHORT(hu_font[c]->width);

  0010f	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00112	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hu_font[eax*4]
  00119	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0011c	89 55 f4	 mov	 DWORD PTR _w$[ebp], edx

; 832  : 		if (cx + w > vid.width)

  0011f	8b 45 ec	 mov	 eax, DWORD PTR _cx$[ebp]
  00122	03 45 f4	 add	 eax, DWORD PTR _w$[ebp]
  00125	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR _vid+12
  0012b	7e 02		 jle	 SHORT $LN14@F_WriteCut

; 833  : 			break;

  0012d	eb 2b		 jmp	 SHORT $LN3@F_WriteCut
$LN14@F_WriteCut:

; 834  : 		V_DrawScaledPatch(cx, cy, 0, hu_font[c]);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00132	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hu_font[eax*4]
  00139	51		 push	 ecx
  0013a	6a 00		 push	 0
  0013c	8b 55 e8	 mov	 edx, DWORD PTR _cy$[ebp]
  0013f	52		 push	 edx
  00140	8b 45 ec	 mov	 eax, DWORD PTR _cx$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00149	83 c4 10	 add	 esp, 16			; 00000010H

; 835  : 		cx += w;

  0014c	8b 45 ec	 mov	 eax, DWORD PTR _cx$[ebp]
  0014f	03 45 f4	 add	 eax, DWORD PTR _w$[ebp]
  00152	89 45 ec	 mov	 DWORD PTR _cx$[ebp], eax

; 836  : 	}

  00155	e9 1c ff ff ff	 jmp	 $LN2@F_WriteCut
$LN3@F_WriteCut:

; 837  : }

  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c3		 ret	 0
_F_WriteCutsceneText ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_WriteText
_TEXT	SEGMENT
_ch$ = -20						; size = 4
_originalx$ = -16					; size = 4
_w$ = -12						; size = 4
_c$ = -8						; size = 4
_count$ = -4						; size = 4
_cx$ = 8						; size = 4
_cy$ = 12						; size = 4
_F_WriteText PROC					; COMDAT

; 731  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 732  : 	INT32 count, c, w, originalx = cx;

  00009	8b 45 08	 mov	 eax, DWORD PTR _cx$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR _originalx$[ebp], eax

; 733  : 	const char *ch = finaletext; // draw some of the text onto the screen

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletext
  00014	89 45 ec	 mov	 DWORD PTR _ch$[ebp], eax

; 734  : 
; 735  : 	count = (finaletextcount - 10)/2;

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletextcount
  0001c	83 e8 0a	 sub	 eax, 10			; 0000000aH
  0001f	99		 cdq
  00020	2b c2		 sub	 eax, edx
  00022	d1 f8		 sar	 eax, 1
  00024	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 736  : 
; 737  : 	if (count < 0)

  00027	79 07		 jns	 SHORT $LN5@F_WriteTex

; 738  : 		count = 0;

  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN5@F_WriteTex:

; 739  : 
; 740  : 	if (timetonext == 1 || !ch)

  00030	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _timetonext, 1
  00037	74 06		 je	 SHORT $LN7@F_WriteTex
  00039	83 7d ec 00	 cmp	 DWORD PTR _ch$[ebp], 0
  0003d	75 23		 jne	 SHORT $LN6@F_WriteTex
$LN7@F_WriteTex:

; 741  : 	{
; 742  : 		finaletextcount = 0;

  0003f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finaletextcount, 0

; 743  : 		timetonext = 0;

  00049	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timetonext, 0

; 744  : 		roidtics = BASEVIDWIDTH - 64;

  00053	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR _roidtics, 256 ; 00000100H

; 745  : 		return;

  0005d	e9 0e 01 00 00	 jmp	 $LN3@F_WriteTex
$LN6@F_WriteTex:

; 746  : 	}
; 747  : 
; 748  : 	for (; count; count--)

  00062	eb 09		 jmp	 SHORT $LN4@F_WriteTex
$LN2@F_WriteTex:
  00064	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00067	83 e8 01	 sub	 eax, 1
  0006a	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@F_WriteTex:
  0006d	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00071	0f 84 f9 00 00
	00		 je	 $LN3@F_WriteTex

; 749  : 	{
; 750  : 		c = *ch++;

  00077	8b 45 ec	 mov	 eax, DWORD PTR _ch$[ebp]
  0007a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0007d	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  00080	8b 55 ec	 mov	 edx, DWORD PTR _ch$[ebp]
  00083	83 c2 01	 add	 edx, 1
  00086	89 55 ec	 mov	 DWORD PTR _ch$[ebp], edx

; 751  : 		if (!c)

  00089	83 7d f8 00	 cmp	 DWORD PTR _c$[ebp], 0
  0008d	75 05		 jne	 SHORT $LN8@F_WriteTex

; 752  : 			break;

  0008f	e9 dc 00 00 00	 jmp	 $LN3@F_WriteTex
$LN8@F_WriteTex:

; 753  : 
; 754  : 		if (c == '#')

  00094	83 7d f8 23	 cmp	 DWORD PTR _c$[ebp], 35	; 00000023H
  00098	75 3d		 jne	 SHORT $LN9@F_WriteTex

; 755  : 		{
; 756  : 			if (!timetonext)

  0009a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timetonext, 0
  000a1	75 2f		 jne	 SHORT $LN12@F_WriteTex

; 757  : 			{
; 758  : 				if (finaletext == text[INTRO16TEXT])

  000a3	b8 04 00 00 00	 mov	 eax, 4
  000a8	69 c8 45 01 00
	00		 imul	 ecx, eax, 325
  000ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  000b4	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  000ba	75 0c		 jne	 SHORT $LN11@F_WriteTex

; 759  : 					timetonext = 12*TICRATE + 1;

  000bc	c7 05 00 00 00
	00 a5 01 00 00	 mov	 DWORD PTR _timetonext, 421 ; 000001a5H
  000c6	eb 0a		 jmp	 SHORT $LN12@F_WriteTex
$LN11@F_WriteTex:

; 760  : 				else
; 761  : 					timetonext = 5*TICRATE + 1;

  000c8	c7 05 00 00 00
	00 b0 00 00 00	 mov	 DWORD PTR _timetonext, 176 ; 000000b0H
$LN12@F_WriteTex:

; 762  : 			}
; 763  : 			break;

  000d2	e9 99 00 00 00	 jmp	 $LN3@F_WriteTex
$LN9@F_WriteTex:

; 764  : 		}
; 765  : 		if (c == '\n')

  000d7	83 7d f8 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  000db	75 14		 jne	 SHORT $LN13@F_WriteTex

; 766  : 		{
; 767  : 			cx = originalx;

  000dd	8b 45 f0	 mov	 eax, DWORD PTR _originalx$[ebp]
  000e0	89 45 08	 mov	 DWORD PTR _cx$[ebp], eax

; 768  : 			cy += 12;

  000e3	8b 45 0c	 mov	 eax, DWORD PTR _cy$[ebp]
  000e6	83 c0 0c	 add	 eax, 12			; 0000000cH
  000e9	89 45 0c	 mov	 DWORD PTR _cy$[ebp], eax

; 769  : 			continue;

  000ec	e9 73 ff ff ff	 jmp	 $LN2@F_WriteTex
$LN13@F_WriteTex:

; 770  : 		}
; 771  : 
; 772  : 		c = toupper(c) - HU_FONTSTART;

  000f1	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _toupper
  000fa	83 c4 04	 add	 esp, 4
  000fd	83 e8 21	 sub	 eax, 33			; 00000021H
  00100	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax

; 773  : 		if (c < 0 || (c >= HU_REALFONTSIZE && c != '~' - HU_FONTSTART && c != '`' - HU_FONTSTART)) /// \note font end hack

  00103	78 12		 js	 SHORT $LN15@F_WriteTex
  00105	83 7d f8 5a	 cmp	 DWORD PTR _c$[ebp], 90	; 0000005aH
  00109	7c 1a		 jl	 SHORT $LN14@F_WriteTex
  0010b	83 7d f8 5d	 cmp	 DWORD PTR _c$[ebp], 93	; 0000005dH
  0010f	74 14		 je	 SHORT $LN14@F_WriteTex
  00111	83 7d f8 3f	 cmp	 DWORD PTR _c$[ebp], 63	; 0000003fH
  00115	74 0e		 je	 SHORT $LN14@F_WriteTex
$LN15@F_WriteTex:

; 774  : 		{
; 775  : 			cx += 4;

  00117	8b 45 08	 mov	 eax, DWORD PTR _cx$[ebp]
  0011a	83 c0 04	 add	 eax, 4
  0011d	89 45 08	 mov	 DWORD PTR _cx$[ebp], eax

; 776  : 			continue;

  00120	e9 3f ff ff ff	 jmp	 $LN2@F_WriteTex
$LN14@F_WriteTex:

; 777  : 		}
; 778  : 
; 779  : 		w = SHORT(hu_font[c]->width);

  00125	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00128	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hu_font[eax*4]
  0012f	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00132	89 55 f4	 mov	 DWORD PTR _w$[ebp], edx

; 780  : 		if (cx + w > vid.width)

  00135	8b 45 08	 mov	 eax, DWORD PTR _cx$[ebp]
  00138	03 45 f4	 add	 eax, DWORD PTR _w$[ebp]
  0013b	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR _vid+12
  00141	7e 02		 jle	 SHORT $LN16@F_WriteTex

; 781  : 			break;

  00143	eb 2b		 jmp	 SHORT $LN3@F_WriteTex
$LN16@F_WriteTex:

; 782  : 		V_DrawScaledPatch(cx, cy, 0, hu_font[c]);

  00145	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00148	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hu_font[eax*4]
  0014f	51		 push	 ecx
  00150	6a 00		 push	 0
  00152	8b 55 0c	 mov	 edx, DWORD PTR _cy$[ebp]
  00155	52		 push	 edx
  00156	8b 45 08	 mov	 eax, DWORD PTR _cx$[ebp]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0015f	83 c4 10	 add	 esp, 16			; 00000010H

; 783  : 		cx += w;

  00162	8b 45 08	 mov	 eax, DWORD PTR _cx$[ebp]
  00165	03 45 f4	 add	 eax, DWORD PTR _w$[ebp]
  00168	89 45 08	 mov	 DWORD PTR _cx$[ebp], eax

; 784  : 	}

  0016b	e9 f4 fe ff ff	 jmp	 $LN2@F_WriteTex
$LN3@F_WriteTex:

; 785  : }

  00170	5f		 pop	 edi
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_F_WriteText ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_IntroTextWrite
_TEXT	SEGMENT
_cy$ = -16						; size = 4
_cx$ = -12						; size = 4
_highres$ = -8						; size = 4
_nobg$ = -4						; size = 4
_F_IntroTextWrite PROC					; COMDAT

; 843  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 844  : 	boolean nobg = false, highres = false;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nobg$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _highres$[ebp], 0

; 845  : 	INT32 cx = 8, cy = 128;

  00017	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR _cx$[ebp], 8
  0001e	c7 45 f0 80 00
	00 00		 mov	 DWORD PTR _cy$[ebp], 128 ; 00000080H

; 846  : 
; 847  : 	// DRAW A FULL PIC INSTEAD OF FLAT!
; 848  : 	if (finaletext == text[INTRO01TEXT])

  00025	b8 04 00 00 00	 mov	 eax, 4
  0002a	69 c8 36 01 00
	00		 imul	 ecx, eax, 310
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00036	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  0003c	75 0c		 jne	 SHORT $LN2@F_IntroTex

; 849  : 		nobg = true;

  0003e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _nobg$[ebp], 1
  00045	e9 24 03 00 00	 jmp	 $LN32@F_IntroTex
$LN2@F_IntroTex:

; 850  : 	else if (finaletext == text[INTRO02TEXT])

  0004a	b8 04 00 00 00	 mov	 eax, 4
  0004f	69 c8 37 01 00
	00		 imul	 ecx, eax, 311
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0005b	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00061	75 19		 jne	 SHORT $LN4@F_IntroTex

; 851  : 		background = W_CachePatchName("INTRO1", PU_CACHE);

  00063	6a 65		 push	 101			; 00000065H
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_06JHFOBIFK@INTRO1@
  0006a	e8 00 00 00 00	 call	 _W_CachePatchName
  0006f	83 c4 08	 add	 esp, 8
  00072	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
  00077	e9 f2 02 00 00	 jmp	 $LN32@F_IntroTex
$LN4@F_IntroTex:

; 852  : 	else if (finaletext == text[INTRO03TEXT])

  0007c	b8 04 00 00 00	 mov	 eax, 4
  00081	69 c8 38 01 00
	00		 imul	 ecx, eax, 312
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0008d	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00093	75 20		 jne	 SHORT $LN6@F_IntroTex

; 853  : 	{
; 854  : 		background = W_CachePatchName("INTRO2", PU_CACHE);

  00095	6a 65		 push	 101			; 00000065H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_06LMHDELJJ@INTRO2@
  0009c	e8 00 00 00 00	 call	 _W_CachePatchName
  000a1	83 c4 08	 add	 esp, 8
  000a4	a3 00 00 00 00	 mov	 DWORD PTR _background, eax

; 855  : 		highres = true;

  000a9	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _highres$[ebp], 1

; 856  : 	}

  000b0	e9 b9 02 00 00	 jmp	 $LN32@F_IntroTex
$LN6@F_IntroTex:

; 857  : 	else if (finaletext == text[INTRO04TEXT])

  000b5	b8 04 00 00 00	 mov	 eax, 4
  000ba	69 c8 39 01 00
	00		 imul	 ecx, eax, 313
  000c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  000c6	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  000cc	75 19		 jne	 SHORT $LN8@F_IntroTex

; 858  : 		background = W_CachePatchName("INTRO3", PU_CACHE);

  000ce	6a 65		 push	 101			; 00000065H
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_06KFGIHKNI@INTRO3@
  000d5	e8 00 00 00 00	 call	 _W_CachePatchName
  000da	83 c4 08	 add	 esp, 8
  000dd	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
  000e2	e9 87 02 00 00	 jmp	 $LN32@F_IntroTex
$LN8@F_IntroTex:

; 859  : 	else if (finaletext == text[INTRO05TEXT])

  000e7	b8 04 00 00 00	 mov	 eax, 4
  000ec	69 c8 3a 01 00
	00		 imul	 ecx, eax, 314
  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  000f8	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  000fe	75 19		 jne	 SHORT $LN10@F_IntroTex

; 860  : 		background = W_CachePatchName("INTRO4", PU_CACHE);

  00100	6a 65		 push	 101			; 00000065H
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_06OKCJOMBP@INTRO4@
  00107	e8 00 00 00 00	 call	 _W_CachePatchName
  0010c	83 c4 08	 add	 esp, 8
  0010f	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
  00114	e9 55 02 00 00	 jmp	 $LN32@F_IntroTex
$LN10@F_IntroTex:

; 861  : 	else if (finaletext == text[INTRO06TEXT])

  00119	b8 04 00 00 00	 mov	 eax, 4
  0011e	69 c8 3b 01 00
	00		 imul	 ecx, eax, 315
  00124	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0012a	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00130	75 20		 jne	 SHORT $LN12@F_IntroTex

; 862  : 	{
; 863  : 		background = W_CachePatchName("DRAT", PU_CACHE);

  00132	6a 65		 push	 101			; 00000065H
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_04FKCFEOOF@DRAT@
  00139	e8 00 00 00 00	 call	 _W_CachePatchName
  0013e	83 c4 08	 add	 esp, 8
  00141	a3 00 00 00 00	 mov	 DWORD PTR _background, eax

; 864  : 		highres = true;

  00146	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _highres$[ebp], 1

; 865  : 	}

  0014d	e9 1c 02 00 00	 jmp	 $LN32@F_IntroTex
$LN12@F_IntroTex:

; 866  : 	else if (finaletext == text[INTRO07TEXT])

  00152	b8 04 00 00 00	 mov	 eax, 4
  00157	69 c8 3c 01 00
	00		 imul	 ecx, eax, 316
  0015d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00163	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00169	75 27		 jne	 SHORT $LN14@F_IntroTex

; 867  : 	{
; 868  : 		background = W_CachePatchName("INTRO6", PU_CACHE);

  0016b	6a 65		 push	 101			; 00000065H
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_06NIBPIOJN@INTRO6@
  00172	e8 00 00 00 00	 call	 _W_CachePatchName
  00177	83 c4 08	 add	 esp, 8
  0017a	a3 00 00 00 00	 mov	 DWORD PTR _background, eax

; 869  : 		cx = 180;

  0017f	c7 45 f4 b4 00
	00 00		 mov	 DWORD PTR _cx$[ebp], 180 ; 000000b4H

; 870  : 		cy = 8;

  00186	c7 45 f0 08 00
	00 00		 mov	 DWORD PTR _cy$[ebp], 8

; 871  : 	}

  0018d	e9 dc 01 00 00	 jmp	 $LN32@F_IntroTex
$LN14@F_IntroTex:

; 872  : 	else if (finaletext == text[INTRO08TEXT])

  00192	b8 04 00 00 00	 mov	 eax, 4
  00197	69 c8 3d 01 00
	00		 imul	 ecx, eax, 317
  0019d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  001a3	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  001a9	75 19		 jne	 SHORT $LN16@F_IntroTex

; 873  : 		background = W_CachePatchName("SGRASS1", PU_CACHE);

  001ab	6a 65		 push	 101			; 00000065H
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_07JFBCHAFG@SGRASS1@
  001b2	e8 00 00 00 00	 call	 _W_CachePatchName
  001b7	83 c4 08	 add	 esp, 8
  001ba	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
  001bf	e9 aa 01 00 00	 jmp	 $LN32@F_IntroTex
$LN16@F_IntroTex:

; 874  : 	else if (finaletext == text[INTRO09TEXT])

  001c4	b8 04 00 00 00	 mov	 eax, 4
  001c9	69 c8 3e 01 00
	00		 imul	 ecx, eax, 318
  001cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  001d5	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  001db	75 20		 jne	 SHORT $LN18@F_IntroTex

; 875  : 	{
; 876  : 		background = W_CachePatchName("WATCHING", PU_CACHE);

  001dd	6a 65		 push	 101			; 00000065H
  001df	68 00 00 00 00	 push	 OFFSET ??_C@_08PPAHMNMM@WATCHING@
  001e4	e8 00 00 00 00	 call	 _W_CachePatchName
  001e9	83 c4 08	 add	 esp, 8
  001ec	a3 00 00 00 00	 mov	 DWORD PTR _background, eax

; 877  : 		highres = true;

  001f1	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _highres$[ebp], 1

; 878  : 	}

  001f8	e9 71 01 00 00	 jmp	 $LN32@F_IntroTex
$LN18@F_IntroTex:

; 879  : 	else if (finaletext == text[INTRO10TEXT])

  001fd	b8 04 00 00 00	 mov	 eax, 4
  00202	69 c8 3f 01 00
	00		 imul	 ecx, eax, 319
  00208	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0020e	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00214	75 20		 jne	 SHORT $LN20@F_IntroTex

; 880  : 	{
; 881  : 		background = W_CachePatchName("ZOOMING", PU_CACHE);

  00216	6a 65		 push	 101			; 00000065H
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_07JBDFIAPG@ZOOMING@
  0021d	e8 00 00 00 00	 call	 _W_CachePatchName
  00222	83 c4 08	 add	 esp, 8
  00225	a3 00 00 00 00	 mov	 DWORD PTR _background, eax

; 882  : 		highres = true;

  0022a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _highres$[ebp], 1

; 883  : 	}

  00231	e9 38 01 00 00	 jmp	 $LN32@F_IntroTex
$LN20@F_IntroTex:

; 884  : 	else if (finaletext == text[INTRO11TEXT])

  00236	b8 04 00 00 00	 mov	 eax, 4
  0023b	69 c8 40 01 00
	00		 imul	 ecx, eax, 320
  00241	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00247	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  0024d	75 0c		 jne	 SHORT $LN22@F_IntroTex

; 885  : 		nobg = true;

  0024f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _nobg$[ebp], 1
  00256	e9 13 01 00 00	 jmp	 $LN32@F_IntroTex
$LN22@F_IntroTex:

; 886  : 	else if (finaletext == text[INTRO12TEXT])

  0025b	b8 04 00 00 00	 mov	 eax, 4
  00260	69 c8 41 01 00
	00		 imul	 ecx, eax, 321
  00266	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0026c	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00272	75 19		 jne	 SHORT $LN24@F_IntroTex

; 887  : 		background = W_CachePatchName("INTRO5", PU_CACHE);

  00274	6a 65		 push	 101			; 00000065H
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_06PDDCNNFO@INTRO5@
  0027b	e8 00 00 00 00	 call	 _W_CachePatchName
  00280	83 c4 08	 add	 esp, 8
  00283	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
  00288	e9 e1 00 00 00	 jmp	 $LN32@F_IntroTex
$LN24@F_IntroTex:

; 888  : 	else if (finaletext == text[INTRO13TEXT])

  0028d	b8 04 00 00 00	 mov	 eax, 4
  00292	69 c8 42 01 00
	00		 imul	 ecx, eax, 322
  00298	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0029e	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  002a4	75 20		 jne	 SHORT $LN26@F_IntroTex

; 889  : 	{
; 890  : 		background = W_CachePatchName("REVENGE", PU_CACHE);

  002a6	6a 65		 push	 101			; 00000065H
  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_07FCDJLNCL@REVENGE@
  002ad	e8 00 00 00 00	 call	 _W_CachePatchName
  002b2	83 c4 08	 add	 esp, 8
  002b5	a3 00 00 00 00	 mov	 DWORD PTR _background, eax

; 891  : 		highres = true;

  002ba	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _highres$[ebp], 1

; 892  : 	}

  002c1	e9 a8 00 00 00	 jmp	 $LN32@F_IntroTex
$LN26@F_IntroTex:

; 893  : 	else if (finaletext == text[INTRO14TEXT])

  002c6	b8 04 00 00 00	 mov	 eax, 4
  002cb	69 c8 43 01 00
	00		 imul	 ecx, eax, 323
  002d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  002d7	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  002dd	75 17		 jne	 SHORT $LN28@F_IntroTex

; 894  : 	{
; 895  : 		nobg = true;

  002df	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _nobg$[ebp], 1

; 896  : 		cx = 8;

  002e6	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR _cx$[ebp], 8

; 897  : 		cy = 8;

  002ed	c7 45 f0 08 00
	00 00		 mov	 DWORD PTR _cy$[ebp], 8

; 898  : 	}

  002f4	eb 78		 jmp	 SHORT $LN32@F_IntroTex
$LN28@F_IntroTex:

; 899  : 	else if (finaletext == text[INTRO15TEXT])

  002f6	b8 04 00 00 00	 mov	 eax, 4
  002fb	69 c8 44 01 00
	00		 imul	 ecx, eax, 324
  00301	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00307	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  0030d	75 2b		 jne	 SHORT $LN30@F_IntroTex

; 900  : 	{
; 901  : 		background = W_CachePatchName("SONICDO1", PU_CACHE);

  0030f	6a 65		 push	 101			; 00000065H
  00311	68 00 00 00 00	 push	 OFFSET ??_C@_08CIEJDDJP@SONICDO1@
  00316	e8 00 00 00 00	 call	 _W_CachePatchName
  0031b	83 c4 08	 add	 esp, 8
  0031e	a3 00 00 00 00	 mov	 DWORD PTR _background, eax

; 902  : 		highres = true;

  00323	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _highres$[ebp], 1

; 903  : 		cx = 224;

  0032a	c7 45 f4 e0 00
	00 00		 mov	 DWORD PTR _cx$[ebp], 224 ; 000000e0H

; 904  : 		cy = 8;

  00331	c7 45 f0 08 00
	00 00		 mov	 DWORD PTR _cy$[ebp], 8

; 905  : 	}

  00338	eb 34		 jmp	 SHORT $LN32@F_IntroTex
$LN30@F_IntroTex:

; 906  : 	else if (finaletext == text[INTRO16TEXT])

  0033a	b8 04 00 00 00	 mov	 eax, 4
  0033f	69 c8 45 01 00
	00		 imul	 ecx, eax, 325
  00345	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0034b	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00351	75 1b		 jne	 SHORT $LN32@F_IntroTex

; 907  : 	{
; 908  : 		background = W_CachePatchName("INTRO7", PU_CACHE);

  00353	6a 65		 push	 101			; 00000065H
  00355	68 00 00 00 00	 push	 OFFSET ??_C@_06MBAELPNM@INTRO7@
  0035a	e8 00 00 00 00	 call	 _W_CachePatchName
  0035f	83 c4 08	 add	 esp, 8
  00362	a3 00 00 00 00	 mov	 DWORD PTR _background, eax

; 909  : 		highres = true;

  00367	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _highres$[ebp], 1
$LN32@F_IntroTex:

; 910  : 	}
; 911  : 
; 912  : 	V_DrawFill(0, 0, vid.width, vid.height, 31);

  0036e	6a 1f		 push	 31			; 0000001fH
  00370	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00375	50		 push	 eax
  00376	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0037c	51		 push	 ecx
  0037d	6a 00		 push	 0
  0037f	6a 00		 push	 0
  00381	e8 00 00 00 00	 call	 _V_DrawFill
  00386	83 c4 14	 add	 esp, 20			; 00000014H

; 913  : 
; 914  : 	if (finaletext == text[INTRO01TEXT])

  00389	b8 04 00 00 00	 mov	 eax, 4
  0038e	69 c8 36 01 00
	00		 imul	 ecx, eax, 310
  00394	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0039a	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  003a0	75 5b		 jne	 SHORT $LN33@F_IntroTex

; 915  : 	{
; 916  : 		V_DrawCreditString(160 - (V_CreditStringWidth("SONIC TEAM JR")/2), 80, 0, "SONIC TEAM JR");

  003a2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JKHCCLEJ@SONIC?5TEAM?5JR@
  003a7	6a 00		 push	 0
  003a9	6a 50		 push	 80			; 00000050H
  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JKHCCLEJ@SONIC?5TEAM?5JR@
  003b0	e8 00 00 00 00	 call	 _V_CreditStringWidth
  003b5	83 c4 04	 add	 esp, 4
  003b8	99		 cdq
  003b9	2b c2		 sub	 eax, edx
  003bb	d1 f8		 sar	 eax, 1
  003bd	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  003c2	2b c8		 sub	 ecx, eax
  003c4	51		 push	 ecx
  003c5	e8 00 00 00 00	 call	 _V_DrawCreditString
  003ca	83 c4 10	 add	 esp, 16			; 00000010H

; 917  : 		V_DrawCreditString(160 - (V_CreditStringWidth("PRESENTS")/2), 96, 0, "PRESENTS");

  003cd	68 00 00 00 00	 push	 OFFSET ??_C@_08PBHFAONH@PRESENTS@
  003d2	6a 00		 push	 0
  003d4	6a 60		 push	 96			; 00000060H
  003d6	68 00 00 00 00	 push	 OFFSET ??_C@_08PBHFAONH@PRESENTS@
  003db	e8 00 00 00 00	 call	 _V_CreditStringWidth
  003e0	83 c4 04	 add	 esp, 4
  003e3	99		 cdq
  003e4	2b c2		 sub	 eax, edx
  003e6	d1 f8		 sar	 eax, 1
  003e8	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  003ed	2b c8		 sub	 ecx, eax
  003ef	51		 push	 ecx
  003f0	e8 00 00 00 00	 call	 _V_DrawCreditString
  003f5	83 c4 10	 add	 esp, 16			; 00000010H

; 918  : 	}

  003f8	e9 df 02 00 00	 jmp	 $LN55@F_IntroTex
$LN33@F_IntroTex:

; 919  : 	else if (finaletext == text[INTRO11TEXT])

  003fd	b8 04 00 00 00	 mov	 eax, 4
  00402	69 c8 40 01 00
	00		 imul	 ecx, eax, 320
  00408	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0040e	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00414	0f 85 77 02 00
	00		 jne	 $LN35@F_IntroTex

; 920  : 	{
; 921  : 		if (finaletextcount > 8*TICRATE && finaletextcount < 9*TICRATE)

  0041a	81 3d 00 00 00
	00 18 01 00 00	 cmp	 DWORD PTR _finaletextcount, 280 ; 00000118H
  00424	7e 59		 jle	 SHORT $LN37@F_IntroTex
  00426	81 3d 00 00 00
	00 3b 01 00 00	 cmp	 DWORD PTR _finaletextcount, 315 ; 0000013bH
  00430	7d 4d		 jge	 SHORT $LN37@F_IntroTex

; 922  : 		{
; 923  : 			if (!(finalecount & 3))

  00432	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  00437	83 e0 03	 and	 eax, 3
  0043a	75 16		 jne	 SHORT $LN39@F_IntroTex

; 924  : 				background = W_CachePatchName("BRITEGG1", PU_CACHE);

  0043c	6a 65		 push	 101			; 00000065H
  0043e	68 00 00 00 00	 push	 OFFSET ??_C@_08JNEFGFGK@BRITEGG1@
  00443	e8 00 00 00 00	 call	 _W_CachePatchName
  00448	83 c4 08	 add	 esp, 8
  0044b	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
  00450	eb 14		 jmp	 SHORT $LN40@F_IntroTex
$LN39@F_IntroTex:

; 925  : 			else
; 926  : 				background = W_CachePatchName("DARKEGG1", PU_CACHE);

  00452	6a 65		 push	 101			; 00000065H
  00454	68 00 00 00 00	 push	 OFFSET ??_C@_08ILDCFCFC@DARKEGG1@
  00459	e8 00 00 00 00	 call	 _W_CachePatchName
  0045e	83 c4 08	 add	 esp, 8
  00461	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
$LN40@F_IntroTex:

; 927  : 
; 928  : 			V_DrawScaledPatch(0, 0, 0, background);

  00466	a1 00 00 00 00	 mov	 eax, DWORD PTR _background
  0046b	50		 push	 eax
  0046c	6a 00		 push	 0
  0046e	6a 00		 push	 0
  00470	6a 00		 push	 0
  00472	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00477	83 c4 10	 add	 esp, 16			; 00000010H

; 929  : 		}

  0047a	e9 10 02 00 00	 jmp	 $LN46@F_IntroTex
$LN37@F_IntroTex:

; 930  : 		else if (finaletextcount > 10*TICRATE && finaletextcount < 11*TICRATE)

  0047f	81 3d 00 00 00
	00 5e 01 00 00	 cmp	 DWORD PTR _finaletextcount, 350 ; 0000015eH
  00489	7e 59		 jle	 SHORT $LN41@F_IntroTex
  0048b	81 3d 00 00 00
	00 81 01 00 00	 cmp	 DWORD PTR _finaletextcount, 385 ; 00000181H
  00495	7d 4d		 jge	 SHORT $LN41@F_IntroTex

; 931  : 		{
; 932  : 			if (!(finalecount & 3))

  00497	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  0049c	83 e0 03	 and	 eax, 3
  0049f	75 16		 jne	 SHORT $LN43@F_IntroTex

; 933  : 				background = W_CachePatchName("BRITEGG2", PU_CACHE);

  004a1	6a 65		 push	 101			; 00000065H
  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_08LGGIDGKJ@BRITEGG2@
  004a8	e8 00 00 00 00	 call	 _W_CachePatchName
  004ad	83 c4 08	 add	 esp, 8
  004b0	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
  004b5	eb 14		 jmp	 SHORT $LN44@F_IntroTex
$LN43@F_IntroTex:

; 934  : 			else
; 935  : 				background = W_CachePatchName("DARKEGG2", PU_CACHE);

  004b7	6a 65		 push	 101			; 00000065H
  004b9	68 00 00 00 00	 push	 OFFSET ??_C@_08KABPABJB@DARKEGG2@
  004be	e8 00 00 00 00	 call	 _W_CachePatchName
  004c3	83 c4 08	 add	 esp, 8
  004c6	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
$LN44@F_IntroTex:

; 936  : 
; 937  : 			V_DrawScaledPatch(0, 0, 0, background);

  004cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _background
  004d0	50		 push	 eax
  004d1	6a 00		 push	 0
  004d3	6a 00		 push	 0
  004d5	6a 00		 push	 0
  004d7	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004dc	83 c4 10	 add	 esp, 16			; 00000010H

; 938  : 		}

  004df	e9 ab 01 00 00	 jmp	 $LN46@F_IntroTex
$LN41@F_IntroTex:

; 939  : 		else if (finaletextcount > 12*TICRATE && finaletextcount < 13*TICRATE)

  004e4	81 3d 00 00 00
	00 a4 01 00 00	 cmp	 DWORD PTR _finaletextcount, 420 ; 000001a4H
  004ee	7e 59		 jle	 SHORT $LN45@F_IntroTex
  004f0	81 3d 00 00 00
	00 c7 01 00 00	 cmp	 DWORD PTR _finaletextcount, 455 ; 000001c7H
  004fa	7d 4d		 jge	 SHORT $LN45@F_IntroTex

; 940  : 		{
; 941  : 			if (!(finalecount & 3))

  004fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  00501	83 e0 03	 and	 eax, 3
  00504	75 16		 jne	 SHORT $LN47@F_IntroTex

; 942  : 				background = W_CachePatchName("BRITEGG3", PU_CACHE);

  00506	6a 65		 push	 101			; 00000065H
  00508	68 00 00 00 00	 push	 OFFSET ??_C@_08KPHDAHOI@BRITEGG3@
  0050d	e8 00 00 00 00	 call	 _W_CachePatchName
  00512	83 c4 08	 add	 esp, 8
  00515	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
  0051a	eb 14		 jmp	 SHORT $LN48@F_IntroTex
$LN47@F_IntroTex:

; 943  : 			else
; 944  : 				background = W_CachePatchName("DARKEGG3", PU_CACHE);

  0051c	6a 65		 push	 101			; 00000065H
  0051e	68 00 00 00 00	 push	 OFFSET ??_C@_08LJAEDANA@DARKEGG3@
  00523	e8 00 00 00 00	 call	 _W_CachePatchName
  00528	83 c4 08	 add	 esp, 8
  0052b	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
$LN48@F_IntroTex:

; 945  : 
; 946  : 			V_DrawScaledPatch(0, 0, 0, background);

  00530	a1 00 00 00 00	 mov	 eax, DWORD PTR _background
  00535	50		 push	 eax
  00536	6a 00		 push	 0
  00538	6a 00		 push	 0
  0053a	6a 00		 push	 0
  0053c	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00541	83 c4 10	 add	 esp, 16			; 00000010H

; 947  : 		}

  00544	e9 46 01 00 00	 jmp	 $LN46@F_IntroTex
$LN45@F_IntroTex:

; 948  : 		else
; 949  : 		{
; 950  : 			F_SkyScroll();

  00549	e8 00 00 00 00	 call	 _F_SkyScroll
  0054e	90		 npad	 1

; 951  : 			if (timetonext == 6)

  0054f	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _timetonext, 6
  00556	75 22		 jne	 SHORT $LN49@F_IntroTex

; 952  : 			{
; 953  : 				stoptimer = finalecount;

  00558	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  0055d	a3 00 00 00 00	 mov	 DWORD PTR _stoptimer, eax

; 954  : 				animtimer = finalecount % 16;

  00562	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  00567	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  0056c	79 05		 jns	 SHORT $LN90@F_IntroTex
  0056e	48		 dec	 eax
  0056f	83 c8 f0	 or	 eax, -16		; fffffff0H
  00572	40		 inc	 eax
$LN90@F_IntroTex:
  00573	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax

; 955  : 			}

  00578	eb 4b		 jmp	 SHORT $LN52@F_IntroTex
$LN49@F_IntroTex:

; 956  : 			else if (timetonext >= 0 && timetonext < 6)

  0057a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timetonext, 0
  00581	7c 22		 jl	 SHORT $LN51@F_IntroTex
  00583	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _timetonext, 6
  0058a	7d 19		 jge	 SHORT $LN51@F_IntroTex

; 957  : 			{
; 958  : 				animtimer = stoptimer;

  0058c	a1 00 00 00 00	 mov	 eax, DWORD PTR _stoptimer
  00591	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax

; 959  : 				deplete -= 32;

  00596	a1 00 00 00 00	 mov	 eax, DWORD PTR _deplete
  0059b	83 e8 20	 sub	 eax, 32			; 00000020H
  0059e	a3 00 00 00 00	 mov	 DWORD PTR _deplete, eax

; 960  : 			}

  005a3	eb 20		 jmp	 SHORT $LN52@F_IntroTex
$LN51@F_IntroTex:

; 961  : 			else
; 962  : 			{
; 963  : 				animtimer = finalecount % 16;

  005a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  005aa	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  005af	79 05		 jns	 SHORT $LN91@F_IntroTex
  005b1	48		 dec	 eax
  005b2	83 c8 f0	 or	 eax, -16		; fffffff0H
  005b5	40		 inc	 eax
$LN91@F_IntroTex:
  005b6	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax

; 964  : 				deplete = 160;

  005bb	c7 05 00 00 00
	00 a0 00 00 00	 mov	 DWORD PTR _deplete, 160	; 000000a0H
$LN52@F_IntroTex:

; 965  : 			}
; 966  : 
; 967  : 			if (finalecount & 1)

  005c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  005ca	83 e0 01	 and	 eax, 1
  005cd	74 46		 je	 SHORT $LN53@F_IntroTex

; 968  : 			{
; 969  : 				V_DrawScaledPatch(deplete, 8, 0, W_CachePatchName("RUN2", PU_CACHE));

  005cf	6a 65		 push	 101			; 00000065H
  005d1	68 00 00 00 00	 push	 OFFSET ??_C@_04BAKJJPGC@RUN2@
  005d6	e8 00 00 00 00	 call	 _W_CachePatchName
  005db	83 c4 08	 add	 esp, 8
  005de	50		 push	 eax
  005df	6a 00		 push	 0
  005e1	6a 08		 push	 8
  005e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _deplete
  005e8	50		 push	 eax
  005e9	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  005ee	83 c4 10	 add	 esp, 16			; 00000010H

; 970  : 				V_DrawScaledPatch(deplete, 72, 0, W_CachePatchName("PEELOUT2", PU_CACHE));

  005f1	6a 65		 push	 101			; 00000065H
  005f3	68 00 00 00 00	 push	 OFFSET ??_C@_08MEMFBEHC@PEELOUT2@
  005f8	e8 00 00 00 00	 call	 _W_CachePatchName
  005fd	83 c4 08	 add	 esp, 8
  00600	50		 push	 eax
  00601	6a 00		 push	 0
  00603	6a 48		 push	 72			; 00000048H
  00605	a1 00 00 00 00	 mov	 eax, DWORD PTR _deplete
  0060a	50		 push	 eax
  0060b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00610	83 c4 10	 add	 esp, 16			; 00000010H

; 971  : 			}

  00613	eb 44		 jmp	 SHORT $LN54@F_IntroTex
$LN53@F_IntroTex:

; 972  : 			else
; 973  : 			{
; 974  : 				V_DrawScaledPatch(deplete, 8, 0, W_CachePatchName("RUN1", PU_CACHE));

  00615	6a 65		 push	 101			; 00000065H
  00617	68 00 00 00 00	 push	 OFFSET ??_C@_04DLIEMMKB@RUN1@
  0061c	e8 00 00 00 00	 call	 _W_CachePatchName
  00621	83 c4 08	 add	 esp, 8
  00624	50		 push	 eax
  00625	6a 00		 push	 0
  00627	6a 08		 push	 8
  00629	a1 00 00 00 00	 mov	 eax, DWORD PTR _deplete
  0062e	50		 push	 eax
  0062f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00634	83 c4 10	 add	 esp, 16			; 00000010H

; 975  : 				V_DrawScaledPatch(deplete, 72, 0, W_CachePatchName("PEELOUT1", PU_CACHE));

  00637	6a 65		 push	 101			; 00000065H
  00639	68 00 00 00 00	 push	 OFFSET ??_C@_08OPOIEHLB@PEELOUT1@
  0063e	e8 00 00 00 00	 call	 _W_CachePatchName
  00643	83 c4 08	 add	 esp, 8
  00646	50		 push	 eax
  00647	6a 00		 push	 0
  00649	6a 48		 push	 72			; 00000048H
  0064b	a1 00 00 00 00	 mov	 eax, DWORD PTR _deplete
  00650	50		 push	 eax
  00651	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00656	83 c4 10	 add	 esp, 16			; 00000010H
$LN54@F_IntroTex:

; 976  : 			}
; 977  : 			V_DrawFill(0, 112, vid.width, (INT32)(vid.height - 112*vid.fdupy), 31);

  00659	6a 1f		 push	 31			; 0000001fH
  0065b	f3 0f 2a 05 10
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _vid+16
  00663	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42e00000
  0066b	f3 0f 59 0d 2c
	00 00 00	 mulss	 xmm1, DWORD PTR _vid+44
  00673	f3 0f 5c c1	 subss	 xmm0, xmm1
  00677	f3 0f 2c c0	 cvttss2si eax, xmm0
  0067b	50		 push	 eax
  0067c	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00682	51		 push	 ecx
  00683	6a 70		 push	 112			; 00000070H
  00685	6a 00		 push	 0
  00687	e8 00 00 00 00	 call	 _V_DrawFill
  0068c	83 c4 14	 add	 esp, 20			; 00000014H
$LN46@F_IntroTex:

; 978  : 		}
; 979  : 	}

  0068f	eb 4b		 jmp	 SHORT $LN55@F_IntroTex
$LN35@F_IntroTex:

; 980  : 	else if (finaletext == text[INTRO08TEXT] && timetonext > 0 && finaletextcount >= 5*TICRATE
; 981  : 		&& finaletextcount > 0)

  00691	b8 04 00 00 00	 mov	 eax, 4
  00696	69 c8 3d 01 00
	00		 imul	 ecx, eax, 317
  0069c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  006a2	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  006a8	75 32		 jne	 SHORT $LN55@F_IntroTex
  006aa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timetonext, 0
  006b1	7e 29		 jle	 SHORT $LN55@F_IntroTex
  006b3	81 3d 00 00 00
	00 af 00 00 00	 cmp	 DWORD PTR _finaletextcount, 175 ; 000000afH
  006bd	7c 1d		 jl	 SHORT $LN55@F_IntroTex
  006bf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _finaletextcount, 0
  006c6	7e 14		 jle	 SHORT $LN55@F_IntroTex

; 982  : 	{
; 983  : 		background = W_CachePatchName("SGRASS5", PU_CACHE);

  006c8	6a 65		 push	 101			; 00000065H
  006ca	68 00 00 00 00	 push	 OFFSET ??_C@_07PBHOLFFC@SGRASS5@
  006cf	e8 00 00 00 00	 call	 _W_CachePatchName
  006d4	83 c4 08	 add	 esp, 8
  006d7	a3 00 00 00 00	 mov	 DWORD PTR _background, eax
$LN55@F_IntroTex:

; 984  : 	}
; 985  : 
; 986  : 	if (!nobg)

  006dc	83 7d fc 00	 cmp	 DWORD PTR _nobg$[ebp], 0
  006e0	75 30		 jne	 SHORT $LN58@F_IntroTex

; 987  : 	{
; 988  : 		if (highres)

  006e2	83 7d f8 00	 cmp	 DWORD PTR _highres$[ebp], 0
  006e6	74 16		 je	 SHORT $LN57@F_IntroTex

; 989  : 			V_DrawSmallScaledPatch(0, 0, 0, background);

  006e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _background
  006ed	50		 push	 eax
  006ee	6a 00		 push	 0
  006f0	6a 00		 push	 0
  006f2	6a 00		 push	 0
  006f4	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  006f9	83 c4 10	 add	 esp, 16			; 00000010H
  006fc	eb 14		 jmp	 SHORT $LN58@F_IntroTex
$LN57@F_IntroTex:

; 990  : 		else
; 991  : 			V_DrawScaledPatch(0, 0, 0, background);

  006fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _background
  00703	50		 push	 eax
  00704	6a 00		 push	 0
  00706	6a 00		 push	 0
  00708	6a 00		 push	 0
  0070a	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0070f	83 c4 10	 add	 esp, 16			; 00000010H
$LN58@F_IntroTex:

; 992  : 	}
; 993  : 
; 994  : 	if (finaletext == text[INTRO14TEXT])

  00712	b8 04 00 00 00	 mov	 eax, 4
  00717	69 c8 43 01 00
	00		 imul	 ecx, eax, 323
  0071d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00723	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00729	75 41		 jne	 SHORT $LN59@F_IntroTex

; 995  : 	{
; 996  : 		V_DrawFill(0, 0, vid.width, vid.height, 31);

  0072b	6a 1f		 push	 31			; 0000001fH
  0072d	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00732	50		 push	 eax
  00733	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00739	51		 push	 ecx
  0073a	6a 00		 push	 0
  0073c	6a 00		 push	 0
  0073e	e8 00 00 00 00	 call	 _V_DrawFill
  00743	83 c4 14	 add	 esp, 20			; 00000014H

; 997  : 		V_DrawSmallScaledPatch(144, 0, 0, W_CachePatchName("TAILSSAD", PU_CACHE));

  00746	6a 65		 push	 101			; 00000065H
  00748	68 00 00 00 00	 push	 OFFSET ??_C@_08DJDALLEE@TAILSSAD@
  0074d	e8 00 00 00 00	 call	 _W_CachePatchName
  00752	83 c4 08	 add	 esp, 8
  00755	50		 push	 eax
  00756	6a 00		 push	 0
  00758	6a 00		 push	 0
  0075a	68 90 00 00 00	 push	 144			; 00000090H
  0075f	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00764	83 c4 10	 add	 esp, 16			; 00000010H

; 998  : 	}

  00767	e9 c0 02 00 00	 jmp	 $LN80@F_IntroTex
$LN59@F_IntroTex:

; 999  : 	else if (finaletext == text[INTRO05TEXT]) // The asteroid SPINS!

  0076c	b8 04 00 00 00	 mov	 eax, 4
  00771	69 c8 3a 01 00
	00		 imul	 ecx, eax, 314
  00777	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0077d	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00783	75 48		 jne	 SHORT $LN61@F_IntroTex

; 1000 : 	{
; 1001 : 		if (roidtics >= 0)

  00785	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _roidtics, 0
  0078c	7c 3a		 jl	 SHORT $LN63@F_IntroTex

; 1002 : 			V_DrawScaledPatch(roidtics, 24, 0,

  0078e	6a 65		 push	 101			; 00000065H
  00790	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletextcount
  00795	99		 cdq
  00796	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  0079b	f7 f9		 idiv	 ecx
  0079d	52		 push	 edx
  0079e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MHFGEKEL@ROID00?$CF?42d@
  007a3	e8 00 00 00 00	 call	 _va
  007a8	83 c4 08	 add	 esp, 8
  007ab	50		 push	 eax
  007ac	e8 00 00 00 00	 call	 _W_CachePatchName
  007b1	83 c4 08	 add	 esp, 8
  007b4	50		 push	 eax
  007b5	6a 00		 push	 0
  007b7	6a 18		 push	 24			; 00000018H
  007b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _roidtics
  007bf	52		 push	 edx
  007c0	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  007c5	83 c4 10	 add	 esp, 16			; 00000010H
$LN63@F_IntroTex:

; 1003 : 				W_CachePatchName(va("ROID00%.2d", finaletextcount%35), PU_CACHE));
; 1004 : 	}

  007c8	e9 5f 02 00 00	 jmp	 $LN80@F_IntroTex
$LN61@F_IntroTex:

; 1005 : 	else if (finaletext == text[INTRO06TEXT])

  007cd	b8 04 00 00 00	 mov	 eax, 4
  007d2	69 c8 3b 01 00
	00		 imul	 ecx, eax, 315
  007d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  007de	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  007e4	0f 85 af 00 00
	00		 jne	 $LN64@F_IntroTex

; 1006 : 	{
; 1007 : 		if (finaletextcount == 5*TICRATE + (TICRATE/5)*3)

  007ea	81 3d 00 00 00
	00 c4 00 00 00	 cmp	 DWORD PTR _finaletextcount, 196 ; 000000c4H
  007f4	75 74		 jne	 SHORT $LN66@F_IntroTex

; 1008 : 		{
; 1009 : 			if (rendermode != render_none)

  007f6	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  007fd	74 69		 je	 SHORT $LN68@F_IntroTex

; 1010 : 			{
; 1011 : 				F_WriteText(cx, cy);

  007ff	8b 45 f0	 mov	 eax, DWORD PTR _cy$[ebp]
  00802	50		 push	 eax
  00803	8b 4d f4	 mov	 ecx, DWORD PTR _cx$[ebp]
  00806	51		 push	 ecx
  00807	e8 00 00 00 00	 call	 _F_WriteText
  0080c	83 c4 08	 add	 esp, 8

; 1012 : 
; 1013 : 				F_WipeStartScreen();

  0080f	e8 00 00 00 00	 call	 _F_WipeStartScreen
  00814	90		 npad	 1

; 1014 : 
; 1015 : 				V_DrawScaledPatch(0, 0, 0, W_CachePatchName("RADAR", PU_CACHE));

  00815	6a 65		 push	 101			; 00000065H
  00817	68 00 00 00 00	 push	 OFFSET ??_C@_05IHELJBBC@RADAR@
  0081c	e8 00 00 00 00	 call	 _W_CachePatchName
  00821	83 c4 08	 add	 esp, 8
  00824	50		 push	 eax
  00825	6a 00		 push	 0
  00827	6a 00		 push	 0
  00829	6a 00		 push	 0
  0082b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00830	83 c4 10	 add	 esp, 16			; 00000010H

; 1016 : 				// draw some of the text onto the screen
; 1017 : 				F_WriteText(cx, cy);

  00833	8b 45 f0	 mov	 eax, DWORD PTR _cy$[ebp]
  00836	50		 push	 eax
  00837	8b 4d f4	 mov	 ecx, DWORD PTR _cx$[ebp]
  0083a	51		 push	 ecx
  0083b	e8 00 00 00 00	 call	 _F_WriteText
  00840	83 c4 08	 add	 esp, 8

; 1018 : 
; 1019 : 				F_WipeEndScreen(0, 0, vid.width, vid.height);

  00843	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00848	50		 push	 eax
  00849	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0084f	51		 push	 ecx
  00850	6a 00		 push	 0
  00852	6a 00		 push	 0
  00854	e8 00 00 00 00	 call	 _F_WipeEndScreen
  00859	83 c4 10	 add	 esp, 16			; 00000010H

; 1020 : 
; 1021 : 				F_RunWipe(TICRATE, true);

  0085c	6a 01		 push	 1
  0085e	6a 23		 push	 35			; 00000023H
  00860	e8 00 00 00 00	 call	 _F_RunWipe
  00865	83 c4 08	 add	 esp, 8
$LN68@F_IntroTex:

; 1022 : 			}
; 1023 : 		}

  00868	eb 2a		 jmp	 SHORT $LN69@F_IntroTex
$LN66@F_IntroTex:

; 1024 : 		else if (finaletextcount > 5*TICRATE+(TICRATE/5)*3)

  0086a	81 3d 00 00 00
	00 c4 00 00 00	 cmp	 DWORD PTR _finaletextcount, 196 ; 000000c4H
  00874	7e 1e		 jle	 SHORT $LN69@F_IntroTex

; 1025 : 			V_DrawScaledPatch(0, 0, 0, W_CachePatchName("RADAR", PU_CACHE));

  00876	6a 65		 push	 101			; 00000065H
  00878	68 00 00 00 00	 push	 OFFSET ??_C@_05IHELJBBC@RADAR@
  0087d	e8 00 00 00 00	 call	 _W_CachePatchName
  00882	83 c4 08	 add	 esp, 8
  00885	50		 push	 eax
  00886	6a 00		 push	 0
  00888	6a 00		 push	 0
  0088a	6a 00		 push	 0
  0088c	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00891	83 c4 10	 add	 esp, 16			; 00000010H
$LN69@F_IntroTex:

; 1026 : 	}

  00894	e9 93 01 00 00	 jmp	 $LN80@F_IntroTex
$LN64@F_IntroTex:

; 1027 : 	else if (finaletext == text[INTRO13TEXT])

  00899	b8 04 00 00 00	 mov	 eax, 4
  0089e	69 c8 42 01 00
	00		 imul	 ecx, eax, 322
  008a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  008aa	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  008b0	0f 85 af 00 00
	00		 jne	 $LN70@F_IntroTex

; 1028 : 	{
; 1029 : 		if (finaletextcount == 9*TICRATE)

  008b6	81 3d 00 00 00
	00 3b 01 00 00	 cmp	 DWORD PTR _finaletextcount, 315 ; 0000013bH
  008c0	75 74		 jne	 SHORT $LN72@F_IntroTex

; 1030 : 		{
; 1031 : 			if (rendermode != render_none)

  008c2	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  008c9	74 69		 je	 SHORT $LN74@F_IntroTex

; 1032 : 			{
; 1033 : 				F_WriteText(cx, cy);

  008cb	8b 45 f0	 mov	 eax, DWORD PTR _cy$[ebp]
  008ce	50		 push	 eax
  008cf	8b 4d f4	 mov	 ecx, DWORD PTR _cx$[ebp]
  008d2	51		 push	 ecx
  008d3	e8 00 00 00 00	 call	 _F_WriteText
  008d8	83 c4 08	 add	 esp, 8

; 1034 : 
; 1035 : 				F_WipeStartScreen();

  008db	e8 00 00 00 00	 call	 _F_WipeStartScreen
  008e0	90		 npad	 1

; 1036 : 
; 1037 : 				V_DrawSmallScaledPatch(0, 0, 0, W_CachePatchName("CONFRONT", PU_CACHE));

  008e1	6a 65		 push	 101			; 00000065H
  008e3	68 00 00 00 00	 push	 OFFSET ??_C@_08OGBGAPNN@CONFRONT@
  008e8	e8 00 00 00 00	 call	 _W_CachePatchName
  008ed	83 c4 08	 add	 esp, 8
  008f0	50		 push	 eax
  008f1	6a 00		 push	 0
  008f3	6a 00		 push	 0
  008f5	6a 00		 push	 0
  008f7	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  008fc	83 c4 10	 add	 esp, 16			; 00000010H

; 1038 : 				// draw some of the text onto the screen
; 1039 : 				F_WriteText(cx, cy);

  008ff	8b 45 f0	 mov	 eax, DWORD PTR _cy$[ebp]
  00902	50		 push	 eax
  00903	8b 4d f4	 mov	 ecx, DWORD PTR _cx$[ebp]
  00906	51		 push	 ecx
  00907	e8 00 00 00 00	 call	 _F_WriteText
  0090c	83 c4 08	 add	 esp, 8

; 1040 : 
; 1041 : 				F_WipeEndScreen(0, 0, vid.width, vid.height);

  0090f	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00914	50		 push	 eax
  00915	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0091b	51		 push	 ecx
  0091c	6a 00		 push	 0
  0091e	6a 00		 push	 0
  00920	e8 00 00 00 00	 call	 _F_WipeEndScreen
  00925	83 c4 10	 add	 esp, 16			; 00000010H

; 1042 : 
; 1043 : 				F_RunWipe(TICRATE, true);

  00928	6a 01		 push	 1
  0092a	6a 23		 push	 35			; 00000023H
  0092c	e8 00 00 00 00	 call	 _F_RunWipe
  00931	83 c4 08	 add	 esp, 8
$LN74@F_IntroTex:

; 1044 : 			}
; 1045 : 		}

  00934	eb 2a		 jmp	 SHORT $LN75@F_IntroTex
$LN72@F_IntroTex:

; 1046 : 		else if (finaletextcount > 9*TICRATE)

  00936	81 3d 00 00 00
	00 3b 01 00 00	 cmp	 DWORD PTR _finaletextcount, 315 ; 0000013bH
  00940	7e 1e		 jle	 SHORT $LN75@F_IntroTex

; 1047 : 			V_DrawSmallScaledPatch(0, 0, 0, W_CachePatchName("CONFRONT", PU_CACHE));

  00942	6a 65		 push	 101			; 00000065H
  00944	68 00 00 00 00	 push	 OFFSET ??_C@_08OGBGAPNN@CONFRONT@
  00949	e8 00 00 00 00	 call	 _W_CachePatchName
  0094e	83 c4 08	 add	 esp, 8
  00951	50		 push	 eax
  00952	6a 00		 push	 0
  00954	6a 00		 push	 0
  00956	6a 00		 push	 0
  00958	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0095d	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@F_IntroTex:

; 1048 : 	}

  00960	e9 c7 00 00 00	 jmp	 $LN80@F_IntroTex
$LN70@F_IntroTex:

; 1049 : 	else if (finaletext == text[INTRO15TEXT])

  00965	b8 04 00 00 00	 mov	 eax, 4
  0096a	69 c8 44 01 00
	00		 imul	 ecx, eax, 324
  00970	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00976	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  0097c	0f 85 aa 00 00
	00		 jne	 $LN80@F_IntroTex

; 1050 : 	{
; 1051 : 		if (finaletextcount == 7*TICRATE)

  00982	81 3d 00 00 00
	00 f5 00 00 00	 cmp	 DWORD PTR _finaletextcount, 245 ; 000000f5H
  0098c	75 74		 jne	 SHORT $LN77@F_IntroTex

; 1052 : 		{
; 1053 : 			if (rendermode != render_none)

  0098e	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00995	74 69		 je	 SHORT $LN79@F_IntroTex

; 1054 : 			{
; 1055 : 				F_WriteText(cx, cy);

  00997	8b 45 f0	 mov	 eax, DWORD PTR _cy$[ebp]
  0099a	50		 push	 eax
  0099b	8b 4d f4	 mov	 ecx, DWORD PTR _cx$[ebp]
  0099e	51		 push	 ecx
  0099f	e8 00 00 00 00	 call	 _F_WriteText
  009a4	83 c4 08	 add	 esp, 8

; 1056 : 
; 1057 : 				F_WipeStartScreen();

  009a7	e8 00 00 00 00	 call	 _F_WipeStartScreen
  009ac	90		 npad	 1

; 1058 : 
; 1059 : 				V_DrawSmallScaledPatch(0, 0, 0, W_CachePatchName("SONICDO2", PU_CACHE));

  009ad	6a 65		 push	 101			; 00000065H
  009af	68 00 00 00 00	 push	 OFFSET ??_C@_08DGEGAFM@SONICDO2@
  009b4	e8 00 00 00 00	 call	 _W_CachePatchName
  009b9	83 c4 08	 add	 esp, 8
  009bc	50		 push	 eax
  009bd	6a 00		 push	 0
  009bf	6a 00		 push	 0
  009c1	6a 00		 push	 0
  009c3	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  009c8	83 c4 10	 add	 esp, 16			; 00000010H

; 1060 : 				// draw some of the text onto the screen
; 1061 : 				F_WriteText(cx, cy);

  009cb	8b 45 f0	 mov	 eax, DWORD PTR _cy$[ebp]
  009ce	50		 push	 eax
  009cf	8b 4d f4	 mov	 ecx, DWORD PTR _cx$[ebp]
  009d2	51		 push	 ecx
  009d3	e8 00 00 00 00	 call	 _F_WriteText
  009d8	83 c4 08	 add	 esp, 8

; 1062 : 
; 1063 : 				F_WipeEndScreen(0, 0, vid.width, vid.height);

  009db	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  009e0	50		 push	 eax
  009e1	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  009e7	51		 push	 ecx
  009e8	6a 00		 push	 0
  009ea	6a 00		 push	 0
  009ec	e8 00 00 00 00	 call	 _F_WipeEndScreen
  009f1	83 c4 10	 add	 esp, 16			; 00000010H

; 1064 : 
; 1065 : 				F_RunWipe(TICRATE, true);

  009f4	6a 01		 push	 1
  009f6	6a 23		 push	 35			; 00000023H
  009f8	e8 00 00 00 00	 call	 _F_RunWipe
  009fd	83 c4 08	 add	 esp, 8
$LN79@F_IntroTex:

; 1066 : 			}
; 1067 : 		}

  00a00	eb 2a		 jmp	 SHORT $LN80@F_IntroTex
$LN77@F_IntroTex:

; 1068 : 		else if (finaletextcount > 7*TICRATE)

  00a02	81 3d 00 00 00
	00 f5 00 00 00	 cmp	 DWORD PTR _finaletextcount, 245 ; 000000f5H
  00a0c	7e 1e		 jle	 SHORT $LN80@F_IntroTex

; 1069 : 			V_DrawSmallScaledPatch(0, 0, 0, W_CachePatchName("SONICDO2", PU_CACHE));

  00a0e	6a 65		 push	 101			; 00000065H
  00a10	68 00 00 00 00	 push	 OFFSET ??_C@_08DGEGAFM@SONICDO2@
  00a15	e8 00 00 00 00	 call	 _W_CachePatchName
  00a1a	83 c4 08	 add	 esp, 8
  00a1d	50		 push	 eax
  00a1e	6a 00		 push	 0
  00a20	6a 00		 push	 0
  00a22	6a 00		 push	 0
  00a24	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00a29	83 c4 10	 add	 esp, 16			; 00000010H
$LN80@F_IntroTex:

; 1070 : 	}
; 1071 : 
; 1072 : 	if (animtimer)

  00a2c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _animtimer, 0
  00a33	74 0d		 je	 SHORT $LN81@F_IntroTex

; 1073 : 		animtimer--;

  00a35	a1 00 00 00 00	 mov	 eax, DWORD PTR _animtimer
  00a3a	83 e8 01	 sub	 eax, 1
  00a3d	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax
$LN81@F_IntroTex:

; 1074 : 
; 1075 : 	if (finaletext == text[INTRO08TEXT] && finaletextcount > 5*TICRATE)

  00a42	b8 04 00 00 00	 mov	 eax, 4
  00a47	69 c8 3d 01 00
	00		 imul	 ecx, eax, 317
  00a4d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00a53	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00a59	0f 85 eb 00 00
	00		 jne	 $LN88@F_IntroTex
  00a5f	81 3d 00 00 00
	00 af 00 00 00	 cmp	 DWORD PTR _finaletextcount, 175 ; 000000afH
  00a69	0f 8e db 00 00
	00		 jle	 $LN88@F_IntroTex

; 1076 : 	{
; 1077 : 		first = W_CachePatchName("SGRASS2", PU_CACHE);

  00a6f	6a 65		 push	 101			; 00000065H
  00a71	68 00 00 00 00	 push	 OFFSET ??_C@_07LODPCDJF@SGRASS2@
  00a76	e8 00 00 00 00	 call	 _W_CachePatchName
  00a7b	83 c4 08	 add	 esp, 8
  00a7e	a3 00 00 00 00	 mov	 DWORD PTR _first, eax

; 1078 : 		second = W_CachePatchName("SGRASS3", PU_CACHE);

  00a83	6a 65		 push	 101			; 00000065H
  00a85	68 00 00 00 00	 push	 OFFSET ??_C@_07KHCEBCNE@SGRASS3@
  00a8a	e8 00 00 00 00	 call	 _W_CachePatchName
  00a8f	83 c4 08	 add	 esp, 8
  00a92	a3 00 00 00 00	 mov	 DWORD PTR _second, eax

; 1079 : 		third = W_CachePatchName("SGRASS4", PU_CACHE);

  00a97	6a 65		 push	 101			; 00000065H
  00a99	68 00 00 00 00	 push	 OFFSET ??_C@_07OIGFIEBD@SGRASS4@
  00a9e	e8 00 00 00 00	 call	 _W_CachePatchName
  00aa3	83 c4 08	 add	 esp, 8
  00aa6	a3 00 00 00 00	 mov	 DWORD PTR _third, eax

; 1080 : 
; 1081 : 		if (finaletextcount == 5*TICRATE + 1)

  00aab	81 3d 00 00 00
	00 b0 00 00 00	 cmp	 DWORD PTR _finaletextcount, 176 ; 000000b0H
  00ab5	75 20		 jne	 SHORT $LN83@F_IntroTex

; 1082 : 		{
; 1083 : 			currentanim = first;

  00ab7	a1 00 00 00 00	 mov	 eax, DWORD PTR _first
  00abc	a3 00 00 00 00	 mov	 DWORD PTR _currentanim, eax

; 1084 : 			nextanim = second;

  00ac1	a1 00 00 00 00	 mov	 eax, DWORD PTR _second
  00ac6	a3 00 00 00 00	 mov	 DWORD PTR _nextanim, eax

; 1085 : 			animtimer = TICRATE/7 + 1;

  00acb	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR _animtimer, 6

; 1086 : 		}

  00ad5	eb 56		 jmp	 SHORT $LN87@F_IntroTex
$LN83@F_IntroTex:

; 1087 : 		else if (animtimer == 1 && currentanim == first)

  00ad7	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _animtimer, 1
  00ade	75 2d		 jne	 SHORT $LN85@F_IntroTex
  00ae0	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentanim
  00ae5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _first
  00aeb	75 20		 jne	 SHORT $LN85@F_IntroTex

; 1088 : 		{
; 1089 : 			currentanim = second;

  00aed	a1 00 00 00 00	 mov	 eax, DWORD PTR _second
  00af2	a3 00 00 00 00	 mov	 DWORD PTR _currentanim, eax

; 1090 : 			nextanim = third;

  00af7	a1 00 00 00 00	 mov	 eax, DWORD PTR _third
  00afc	a3 00 00 00 00	 mov	 DWORD PTR _nextanim, eax

; 1091 : 			animtimer = TICRATE/7 + 1;

  00b01	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR _animtimer, 6

; 1092 : 		}

  00b0b	eb 20		 jmp	 SHORT $LN87@F_IntroTex
$LN85@F_IntroTex:

; 1093 : 		else if (animtimer == 1 && currentanim == second)

  00b0d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _animtimer, 1
  00b14	75 17		 jne	 SHORT $LN87@F_IntroTex
  00b16	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentanim
  00b1b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _second
  00b21	75 0a		 jne	 SHORT $LN87@F_IntroTex

; 1094 : 			currentanim = third;

  00b23	a1 00 00 00 00	 mov	 eax, DWORD PTR _third
  00b28	a3 00 00 00 00	 mov	 DWORD PTR _currentanim, eax
$LN87@F_IntroTex:

; 1095 : 
; 1096 : 		if (currentanim)

  00b2d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _currentanim, 0
  00b34	74 14		 je	 SHORT $LN88@F_IntroTex

; 1097 : 			V_DrawScaledPatch(123, 4, 0, currentanim);

  00b36	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentanim
  00b3b	50		 push	 eax
  00b3c	6a 00		 push	 0
  00b3e	6a 04		 push	 4
  00b40	6a 7b		 push	 123			; 0000007bH
  00b42	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00b47	83 c4 10	 add	 esp, 16			; 00000010H
$LN88@F_IntroTex:

; 1098 : 	}
; 1099 : 
; 1100 : 	F_WriteText(cx, cy);

  00b4a	8b 45 f0	 mov	 eax, DWORD PTR _cy$[ebp]
  00b4d	50		 push	 eax
  00b4e	8b 4d f4	 mov	 ecx, DWORD PTR _cx$[ebp]
  00b51	51		 push	 ecx
  00b52	e8 00 00 00 00	 call	 _F_WriteText
  00b57	83 c4 08	 add	 esp, 8

; 1101 : }

  00b5a	5f		 pop	 edi
  00b5b	5e		 pop	 esi
  00b5c	5b		 pop	 ebx
  00b5d	8b e5		 mov	 esp, ebp
  00b5f	5d		 pop	 ebp
  00b60	c3		 ret	 0
_F_IntroTextWrite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_SkyScroll
_TEXT	SEGMENT
tv70 = -92						; size = 4
_yr$1 = -24						; size = 4
_pat$ = -20						; size = 4
_fakedwidth$ = -16					; size = 4
_mx$ = -12						; size = 4
_x$ = -8						; size = 4
_scrolled$ = -4						; size = 4
_F_SkyScroll PROC					; COMDAT

; 1176 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1177 : 	INT32 scrolled, x, mx, fakedwidth;
; 1178 : 	patch_t *pat;
; 1179 : 
; 1180 : 	pat = W_CachePatchName("TITLESKY", PU_CACHE);

  00009	6a 65		 push	 101			; 00000065H
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_08PBIHNGBH@TITLESKY@
  00010	e8 00 00 00 00	 call	 _W_CachePatchName
  00015	83 c4 08	 add	 esp, 8
  00018	89 45 ec	 mov	 DWORD PTR _pat$[ebp], eax

; 1181 : 
; 1182 : 	animtimer = ((finalecount*((gamestate == GS_INTRO || gamestate == GS_INTRO2) ? titlescrollspeed*4 : titlescrollspeed))/16) % SHORT(pat->width);

  0001b	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _gamestate, 5
  00022	74 13		 je	 SHORT $LN18@F_SkyScrol
  00024	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _gamestate, 6
  0002b	74 0a		 je	 SHORT $LN18@F_SkyScrol
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR _titlescrollspeed
  00032	89 45 a4	 mov	 DWORD PTR tv70[ebp], eax
  00035	eb 0c		 jmp	 SHORT $LN19@F_SkyScrol
$LN18@F_SkyScrol:
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _titlescrollspeed
  0003d	c1 e1 02	 shl	 ecx, 2
  00040	89 4d a4	 mov	 DWORD PTR tv70[ebp], ecx
$LN19@F_SkyScrol:
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  00048	0f af 45 a4	 imul	 eax, DWORD PTR tv70[ebp]
  0004c	99		 cdq
  0004d	83 e2 0f	 and	 edx, 15			; 0000000fH
  00050	03 c2		 add	 eax, edx
  00052	c1 f8 04	 sar	 eax, 4
  00055	8b 55 ec	 mov	 edx, DWORD PTR _pat$[ebp]
  00058	0f bf 0a	 movsx	 ecx, WORD PTR [edx]
  0005b	99		 cdq
  0005c	f7 f9		 idiv	 ecx
  0005e	89 15 00 00 00
	00		 mov	 DWORD PTR _animtimer, edx

; 1183 : 
; 1184 : 	fakedwidth = vid.width / vid.dupx;

  00064	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00069	99		 cdq
  0006a	f7 3d 20 00 00
	00		 idiv	 DWORD PTR _vid+32
  00070	89 45 f0	 mov	 DWORD PTR _fakedwidth$[ebp], eax

; 1185 : 
; 1186 : 	if (rendermode == render_soft)

  00073	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0007a	0f 85 f0 00 00
	00		 jne	 $LN7@F_SkyScrol

; 1187 : 	{
; 1188 : 		INT32 yr = 0;

  00080	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _yr$1[ebp], 0

; 1189 : 
; 1190 : 		if (vid.fdupy > vid.dupy)

  00087	f3 0f 2a 05 24
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _vid+36
  0008f	f3 0f 10 0d 2c
	00 00 00	 movss	 xmm1, DWORD PTR _vid+44
  00097	0f 2f c8	 comiss	 xmm1, xmm0
  0009a	76 19		 jbe	 SHORT $LN9@F_SkyScrol

; 1191 : 			yr = vid.height - vid.dupy*SHORT(pat->height);

  0009c	8b 45 ec	 mov	 eax, DWORD PTR _pat$[ebp]
  0009f	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000a3	0f af 0d 24 00
	00 00		 imul	 ecx, DWORD PTR _vid+36
  000aa	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _vid+16
  000b0	2b d1		 sub	 edx, ecx
  000b2	89 55 e8	 mov	 DWORD PTR _yr$1[ebp], edx
$LN9@F_SkyScrol:

; 1192 : 
; 1193 : 		scrolled = BASEVIDWIDTH - animtimer;

  000b5	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  000ba	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _animtimer
  000c0	89 45 fc	 mov	 DWORD PTR _scrolled$[ebp], eax

; 1194 : 		if (scrolled > BASEVIDWIDTH)

  000c3	81 7d fc 40 01
	00 00		 cmp	 DWORD PTR _scrolled$[ebp], 320 ; 00000140H
  000ca	7e 07		 jle	 SHORT $LN10@F_SkyScrol

; 1195 : 			scrolled = BASEVIDWIDTH;

  000cc	c7 45 fc 40 01
	00 00		 mov	 DWORD PTR _scrolled$[ebp], 320 ; 00000140H
$LN10@F_SkyScrol:

; 1196 : 		if (scrolled < 0)

  000d3	83 7d fc 00	 cmp	 DWORD PTR _scrolled$[ebp], 0
  000d7	7d 07		 jge	 SHORT $LN11@F_SkyScrol

; 1197 : 			scrolled = 0;

  000d9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _scrolled$[ebp], 0
$LN11@F_SkyScrol:

; 1198 : 		for (x = 0, mx = 0; x < fakedwidth; x++, mx++)

  000e0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  000e7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _mx$[ebp], 0
  000ee	eb 12		 jmp	 SHORT $LN4@F_SkyScrol
$LN2@F_SkyScrol:
  000f0	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  000f3	83 c0 01	 add	 eax, 1
  000f6	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR _mx$[ebp]
  000fc	83 c1 01	 add	 ecx, 1
  000ff	89 4d f4	 mov	 DWORD PTR _mx$[ebp], ecx
$LN4@F_SkyScrol:
  00102	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00105	3b 45 f0	 cmp	 eax, DWORD PTR _fakedwidth$[ebp]
  00108	7d 64		 jge	 SHORT $LN3@F_SkyScrol

; 1199 : 		{
; 1200 : 			if (mx >= SHORT(pat->width))

  0010a	8b 45 ec	 mov	 eax, DWORD PTR _pat$[ebp]
  0010d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00110	39 4d f4	 cmp	 DWORD PTR _mx$[ebp], ecx
  00113	7c 07		 jl	 SHORT $LN12@F_SkyScrol

; 1201 : 				mx = 0;

  00115	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _mx$[ebp], 0
$LN12@F_SkyScrol:

; 1202 : 
; 1203 : 			if (mx + scrolled < SHORT(pat->width))

  0011c	8b 45 f4	 mov	 eax, DWORD PTR _mx$[ebp]
  0011f	03 45 fc	 add	 eax, DWORD PTR _scrolled$[ebp]
  00122	8b 4d ec	 mov	 ecx, DWORD PTR _pat$[ebp]
  00125	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00128	3b c2		 cmp	 eax, edx
  0012a	7d 1d		 jge	 SHORT $LN13@F_SkyScrol

; 1204 : 				F_DrawPatchCol(x, pat, mx + scrolled, yr);

  0012c	8b 45 e8	 mov	 eax, DWORD PTR _yr$1[ebp]
  0012f	50		 push	 eax
  00130	8b 4d f4	 mov	 ecx, DWORD PTR _mx$[ebp]
  00133	03 4d fc	 add	 ecx, DWORD PTR _scrolled$[ebp]
  00136	51		 push	 ecx
  00137	8b 55 ec	 mov	 edx, DWORD PTR _pat$[ebp]
  0013a	52		 push	 edx
  0013b	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 _F_DrawPatchCol
  00144	83 c4 10	 add	 esp, 16			; 00000010H
  00147	eb 23		 jmp	 SHORT $LN14@F_SkyScrol
$LN13@F_SkyScrol:

; 1205 : 			else
; 1206 : 				F_DrawPatchCol(x, pat, mx + scrolled - SHORT(pat->width), yr);

  00149	8b 45 e8	 mov	 eax, DWORD PTR _yr$1[ebp]
  0014c	50		 push	 eax
  0014d	8b 4d f4	 mov	 ecx, DWORD PTR _mx$[ebp]
  00150	03 4d fc	 add	 ecx, DWORD PTR _scrolled$[ebp]
  00153	8b 55 ec	 mov	 edx, DWORD PTR _pat$[ebp]
  00156	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00159	2b c8		 sub	 ecx, eax
  0015b	51		 push	 ecx
  0015c	8b 4d ec	 mov	 ecx, DWORD PTR _pat$[ebp]
  0015f	51		 push	 ecx
  00160	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00163	52		 push	 edx
  00164	e8 00 00 00 00	 call	 _F_DrawPatchCol
  00169	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@F_SkyScrol:

; 1207 : 		}

  0016c	eb 82		 jmp	 SHORT $LN2@F_SkyScrol
$LN3@F_SkyScrol:

; 1208 : 	}

  0016e	eb 5e		 jmp	 SHORT $LN6@F_SkyScrol
$LN7@F_SkyScrol:

; 1209 : #ifdef HWRENDER
; 1210 : 	else if (rendermode != render_none)

  00170	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00177	74 55		 je	 SHORT $LN6@F_SkyScrol

; 1211 : 	{ // I wish it were as easy as this for software. I really do.
; 1212 : 		scrolled = animtimer;

  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR _animtimer
  0017e	89 45 fc	 mov	 DWORD PTR _scrolled$[ebp], eax

; 1213 : 		if (scrolled > 0)

  00181	83 7d fc 00	 cmp	 DWORD PTR _scrolled$[ebp], 0
  00185	7e 1c		 jle	 SHORT $LN16@F_SkyScrol

; 1214 : 			V_DrawScaledPatch(scrolled - SHORT(pat->width), 0, 0, pat);

  00187	8b 45 ec	 mov	 eax, DWORD PTR _pat$[ebp]
  0018a	50		 push	 eax
  0018b	6a 00		 push	 0
  0018d	6a 00		 push	 0
  0018f	8b 4d ec	 mov	 ecx, DWORD PTR _pat$[ebp]
  00192	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00195	8b 45 fc	 mov	 eax, DWORD PTR _scrolled$[ebp]
  00198	2b c2		 sub	 eax, edx
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001a0	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@F_SkyScrol:

; 1215 : 		while(scrolled < BASEVIDWIDTH)

  001a3	81 7d fc 40 01
	00 00		 cmp	 DWORD PTR _scrolled$[ebp], 320 ; 00000140H
  001aa	7d 22		 jge	 SHORT $LN6@F_SkyScrol

; 1216 : 		{
; 1217 : 			V_DrawScaledPatch(scrolled, 0, 0, pat);

  001ac	8b 45 ec	 mov	 eax, DWORD PTR _pat$[ebp]
  001af	50		 push	 eax
  001b0	6a 00		 push	 0
  001b2	6a 00		 push	 0
  001b4	8b 4d fc	 mov	 ecx, DWORD PTR _scrolled$[ebp]
  001b7	51		 push	 ecx
  001b8	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001bd	83 c4 10	 add	 esp, 16			; 00000010H

; 1218 : 			scrolled += SHORT(pat->width);

  001c0	8b 45 ec	 mov	 eax, DWORD PTR _pat$[ebp]
  001c3	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  001c6	03 4d fc	 add	 ecx, DWORD PTR _scrolled$[ebp]
  001c9	89 4d fc	 mov	 DWORD PTR _scrolled$[ebp], ecx

; 1219 : 		}

  001cc	eb d5		 jmp	 SHORT $LN16@F_SkyScrol
$LN6@F_SkyScrol:

; 1220 : 	}
; 1221 : #endif
; 1222 : }

  001ce	5f		 pop	 edi
  001cf	5e		 pop	 esi
  001d0	5b		 pop	 ebx
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
_F_SkyScroll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_StartCredits
_TEXT	SEGMENT
tv328 = -76						; size = 4
tv1864 = -76						; size = 4
tv130 = -76						; size = 4
tv139 = -76						; size = 4
tv157 = -76						; size = 4
tv166 = -76						; size = 4
tv175 = -76						; size = 4
tv184 = -76						; size = 4
tv193 = -76						; size = 4
tv202 = -76						; size = 4
tv211 = -76						; size = 4
tv220 = -76						; size = 4
tv238 = -76						; size = 4
tv247 = -76						; size = 4
tv256 = -76						; size = 4
tv265 = -76						; size = 4
tv274 = -76						; size = 4
tv283 = -76						; size = 4
tv301 = -76						; size = 4
tv310 = -76						; size = 4
tv319 = -76						; size = 4
tv594 = -76						; size = 4
tv346 = -76						; size = 4
tv355 = -76						; size = 4
tv373 = -76						; size = 4
tv382 = -76						; size = 4
tv391 = -76						; size = 4
tv400 = -76						; size = 4
tv418 = -76						; size = 4
tv427 = -76						; size = 4
tv445 = -76						; size = 4
tv486 = -76						; size = 4
tv495 = -76						; size = 4
tv504 = -76						; size = 4
tv513 = -76						; size = 4
tv522 = -76						; size = 4
tv531 = -76						; size = 4
tv540 = -76						; size = 4
tv549 = -76						; size = 4
tv558 = -76						; size = 4
tv576 = -76						; size = 4
tv585 = -76						; size = 4
tv1873 = -76						; size = 4
tv603 = -76						; size = 4
tv612 = -76						; size = 4
tv621 = -76						; size = 4
tv630 = -76						; size = 4
tv639 = -76						; size = 4
tv648 = -76						; size = 4
tv657 = -76						; size = 4
tv666 = -76						; size = 4
tv675 = -76						; size = 4
tv693 = -76						; size = 4
tv702 = -76						; size = 4
tv711 = -76						; size = 4
tv720 = -76						; size = 4
tv729 = -76						; size = 4
tv738 = -76						; size = 4
tv747 = -76						; size = 4
tv756 = -76						; size = 4
tv765 = -76						; size = 4
tv774 = -76						; size = 4
tv783 = -76						; size = 4
tv792 = -76						; size = 4
tv801 = -76						; size = 4
tv810 = -76						; size = 4
tv819 = -76						; size = 4
tv828 = -76						; size = 4
tv837 = -76						; size = 4
tv846 = -76						; size = 4
tv855 = -76						; size = 4
tv864 = -76						; size = 4
tv873 = -76						; size = 4
tv882 = -76						; size = 4
tv935 = -76						; size = 4
tv944 = -76						; size = 4
tv953 = -76						; size = 4
tv962 = -76						; size = 4
tv971 = -76						; size = 4
tv980 = -76						; size = 4
tv989 = -76						; size = 4
tv998 = -76						; size = 4
tv1007 = -76						; size = 4
tv1016 = -76						; size = 4
tv1034 = -76						; size = 4
tv1043 = -76						; size = 4
tv1052 = -76						; size = 4
tv1061 = -76						; size = 4
tv1070 = -76						; size = 4
tv1079 = -76						; size = 4
tv1088 = -76						; size = 4
tv1097 = -76						; size = 4
tv1106 = -76						; size = 4
tv1115 = -76						; size = 4
tv1124 = -76						; size = 4
tv1133 = -76						; size = 4
tv1142 = -76						; size = 4
tv1151 = -76						; size = 4
tv1160 = -76						; size = 4
tv1169 = -76						; size = 4
tv1190 = -76						; size = 4
tv1199 = -76						; size = 4
tv1208 = -76						; size = 4
tv1217 = -76						; size = 4
tv1235 = -76						; size = 4
tv1244 = -76						; size = 4
tv1253 = -76						; size = 4
tv1262 = -76						; size = 4
tv1271 = -76						; size = 4
tv1280 = -76						; size = 4
tv1298 = -76						; size = 4
tv1307 = -76						; size = 4
tv1325 = -76						; size = 4
tv1334 = -76						; size = 4
tv1343 = -76						; size = 4
tv1352 = -76						; size = 4
tv1361 = -76						; size = 4
tv1370 = -76						; size = 4
tv1379 = -76						; size = 4
tv1388 = -76						; size = 4
tv1397 = -76						; size = 4
tv1406 = -76						; size = 4
tv1415 = -76						; size = 4
tv1424 = -76						; size = 4
tv1433 = -76						; size = 4
tv1474 = -76						; size = 4
tv1483 = -76						; size = 4
tv1492 = -76						; size = 4
tv1501 = -76						; size = 4
tv1510 = -76						; size = 4
tv1519 = -76						; size = 4
tv1528 = -76						; size = 4
tv1537 = -76						; size = 4
tv1546 = -76						; size = 4
tv1555 = -76						; size = 4
tv1564 = -76						; size = 4
tv1573 = -76						; size = 4
tv1582 = -76						; size = 4
tv1591 = -76						; size = 4
tv1600 = -76						; size = 4
tv1609 = -76						; size = 4
tv1618 = -76						; size = 4
tv1627 = -76						; size = 4
tv1636 = -76						; size = 4
tv1645 = -76						; size = 4
tv1654 = -76						; size = 4
tv1663 = -76						; size = 4
tv1672 = -76						; size = 4
tv1681 = -76						; size = 4
tv1690 = -76						; size = 4
tv1711 = -76						; size = 4
tv1720 = -76						; size = 4
tv1729 = -76						; size = 4
tv1738 = -76						; size = 4
tv1747 = -76						; size = 4
tv1756 = -76						; size = 4
tv1765 = -76						; size = 4
tv1774 = -76						; size = 4
tv1783 = -76						; size = 4
tv1792 = -76						; size = 4
tv1810 = -76						; size = 4
tv1819 = -76						; size = 4
tv1828 = -76						; size = 4
tv1837 = -76						; size = 4
tv1846 = -76						; size = 4
tv1855 = -76						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_F_StartCredits PROC					; COMDAT

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 181  : 	size_t i = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 182  : 	size_t j = 0;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 183  : 
; 184  : 	if (creditscutscene)

  00017	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _creditscutscene
  0001e	85 c0		 test	 eax, eax
  00020	74 1c		 je	 SHORT $LN2@F_StartCre

; 185  : 	{
; 186  : 		F_StartCustomCutscene(creditscutscene - 1, false, false);

  00022	6a 00		 push	 0
  00024	6a 00		 push	 0
  00026	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _creditscutscene
  0002d	83 e8 01	 sub	 eax, 1
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _F_StartCustomCutscene
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : 		return;

  00039	e9 24 25 00 00	 jmp	 $LN1@F_StartCre
$LN2@F_StartCre:

; 188  : 	}
; 189  : 
; 190  : 	G_SetGamestate(GS_CREDITS);

  0003e	6a 0a		 push	 10			; 0000000aH
  00040	e8 00 00 00 00	 call	 _G_SetGamestate
  00045	83 c4 04	 add	 esp, 4

; 191  : 
; 192  : 	gameaction = ga_nothing;

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 193  : 	playerdeadview = false;

  00052	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _playerdeadview, 0

; 194  : 	paused = false;

  0005c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 195  : 	CON_ToggleOff();

  00063	e8 00 00 00 00	 call	 _CON_ToggleOff
  00068	90		 npad	 1

; 196  : 	CON_ClearHUD();

  00069	e8 00 00 00 00	 call	 _CON_ClearHUD
  0006e	90		 npad	 1

; 197  : 	S_StopMusic();

  0006f	e8 00 00 00 00	 call	 _S_StopMusic
  00074	90		 npad	 1

; 198  : 
; 199  : 	if (!modifiedgame && (grade & 8) && ALL7EMERALDS(emeralds))

  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  0007c	75 2a		 jne	 SHORT $LN3@F_StartCre
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00083	83 e0 08	 and	 eax, 8
  00086	74 20		 je	 SHORT $LN3@F_StartCre
  00088	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0008f	83 e0 7f	 and	 eax, 127		; 0000007fH
  00092	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00095	75 11		 jne	 SHORT $LN3@F_StartCre

; 200  : 		S_ChangeMusic(mus_mapl4m, false);

  00097	6a 00		 push	 0
  00099	68 f4 01 00 00	 push	 500			; 000001f4H
  0009e	e8 00 00 00 00	 call	 _S_ChangeMusic
  000a3	83 c4 08	 add	 esp, 8
  000a6	eb 0f		 jmp	 SHORT $LN4@F_StartCre
$LN3@F_StartCre:

; 201  : 	else
; 202  : 		S_ChangeMusic(mus_credit, false);

  000a8	6a 00		 push	 0
  000aa	68 18 04 00 00	 push	 1048			; 00000418H
  000af	e8 00 00 00 00	 call	 _S_ChangeMusic
  000b4	83 c4 08	 add	 esp, 8
$LN4@F_StartCre:

; 203  : 
; 204  : 	finalecount = 0;

  000b7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finalecount, 0

; 205  : 	animtimer = 0;

  000c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _animtimer, 0

; 206  : 
; 207  : 	timetonext = 5*TICRATE-1;

  000cb	c7 05 00 00 00
	00 ae 00 00 00	 mov	 DWORD PTR _timetonext, 174 ; 000000aeH

; 208  : 
; 209  : 	memset(credits, 0, sizeof(credit_t)*19);

  000d5	68 86 9a 00 00	 push	 39558			; 00009a86H
  000da	6a 00		 push	 0
  000dc	68 00 00 00 00	 push	 OFFSET _credits
  000e1	e8 00 00 00 00	 call	 _memset
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 210  : 
; 211  : 	// Initalize the credits table
; 212  : 	strcpy(credits[i].header, "Sonic Team Junior\n");

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KBPNJLJK@Sonic?5Team?5Junior?6@
  000ee	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  000f5	05 00 00 00 00	 add	 eax, OFFSET _credits
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _strcpy
  00100	83 c4 08	 add	 esp, 8

; 213  : 	strcpy(credits[i].fakenames[j++], "Staff\n");

  00103	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0010d	c1 e1 05	 shl	 ecx, 5
  00110	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00117	89 55 b4	 mov	 DWORD PTR tv130[ebp], edx
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_06OMLHDFEG@Staff?6@
  0011f	8b 45 b4	 mov	 eax, DWORD PTR tv130[ebp]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 _strcpy
  00128	83 c4 08	 add	 esp, 8
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0012e	83 c1 01	 add	 ecx, 1
  00131	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 214  : 	j = 0;

  00134	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 215  : 	strcpy(credits[i].realnames[j++], "Staff\n");

  0013b	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00142	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00145	c1 e1 05	 shl	 ecx, 5
  00148	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0014f	89 55 b4	 mov	 DWORD PTR tv139[ebp], edx
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_06OMLHDFEG@Staff?6@
  00157	8b 45 b4	 mov	 eax, DWORD PTR tv139[ebp]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _strcpy
  00160	83 c4 08	 add	 esp, 8
  00163	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00166	83 c1 01	 add	 ecx, 1
  00169	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 216  : 	credits[i].numnames = 1;

  0016c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00173	c6 80 20 00 00
	00 01		 mov	 BYTE PTR _credits[eax+32], 1

; 217  : 	i++;

  0017a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0017d	83 c0 01	 add	 eax, 1
  00180	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 218  : 	strcpy(credits[i].header, "Producer\n");

  00183	68 00 00 00 00	 push	 OFFSET ??_C@_09CJBJOCBJ@Producer?6@
  00188	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0018f	05 00 00 00 00	 add	 eax, OFFSET _credits
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 _strcpy
  0019a	83 c4 08	 add	 esp, 8

; 219  : 	j = 0;

  0019d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 220  : 	strcpy(credits[i].fakenames[j++], "SSNTails\n");

  001a4	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  001ab	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  001ae	c1 e1 05	 shl	 ecx, 5
  001b1	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  001b8	89 55 b4	 mov	 DWORD PTR tv157[ebp], edx
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_09GECGHFPB@SSNTails?6@
  001c0	8b 45 b4	 mov	 eax, DWORD PTR tv157[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _strcpy
  001c9	83 c4 08	 add	 esp, 8
  001cc	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  001cf	83 c1 01	 add	 ecx, 1
  001d2	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 221  : 	strcpy(credits[i].fakenames[j++], "\n");

  001d5	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  001dc	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  001df	c1 e1 05	 shl	 ecx, 5
  001e2	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  001e9	89 55 b4	 mov	 DWORD PTR tv166[ebp], edx
  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  001f1	8b 45 b4	 mov	 eax, DWORD PTR tv166[ebp]
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 _strcpy
  001fa	83 c4 08	 add	 esp, 8
  001fd	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00200	83 c1 01	 add	 ecx, 1
  00203	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 222  : 	strcpy(credits[i].fakenames[j++], "Director\n");

  00206	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0020d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00210	c1 e1 05	 shl	 ecx, 5
  00213	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  0021a	89 55 b4	 mov	 DWORD PTR tv175[ebp], edx
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_09PCHKBJ@Director?6@
  00222	8b 45 b4	 mov	 eax, DWORD PTR tv175[ebp]
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 _strcpy
  0022b	83 c4 08	 add	 esp, 8
  0022e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00231	83 c1 01	 add	 ecx, 1
  00234	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 223  : 	strcpy(credits[i].fakenames[j++], "Sonikku\n");

  00237	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0023e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00241	c1 e1 05	 shl	 ecx, 5
  00244	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  0024b	89 55 b4	 mov	 DWORD PTR tv184[ebp], edx
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_08FIADJLA@Sonikku?6@
  00253	8b 45 b4	 mov	 eax, DWORD PTR tv184[ebp]
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 _strcpy
  0025c	83 c4 08	 add	 esp, 8
  0025f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00262	83 c1 01	 add	 ecx, 1
  00265	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 224  : 	j = 0;

  00268	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 225  : 	strcpy(credits[i].realnames[j++], "Art Freda\n");

  0026f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00276	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00279	c1 e1 05	 shl	 ecx, 5
  0027c	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00283	89 55 b4	 mov	 DWORD PTR tv193[ebp], edx
  00286	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BCGGBAGL@Art?5Freda?6@
  0028b	8b 45 b4	 mov	 eax, DWORD PTR tv193[ebp]
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 _strcpy
  00294	83 c4 08	 add	 esp, 8
  00297	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0029a	83 c1 01	 add	 ecx, 1
  0029d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 226  : 	strcpy(credits[i].realnames[j++], "\n");

  002a0	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  002a7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  002aa	c1 e1 05	 shl	 ecx, 5
  002ad	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  002b4	89 55 b4	 mov	 DWORD PTR tv202[ebp], edx
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  002bc	8b 45 b4	 mov	 eax, DWORD PTR tv202[ebp]
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 _strcpy
  002c5	83 c4 08	 add	 esp, 8
  002c8	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  002cb	83 c1 01	 add	 ecx, 1
  002ce	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 227  : 	strcpy(credits[i].realnames[j++], "Director\n");

  002d1	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  002d8	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  002db	c1 e1 05	 shl	 ecx, 5
  002de	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  002e5	89 55 b4	 mov	 DWORD PTR tv211[ebp], edx
  002e8	68 00 00 00 00	 push	 OFFSET ??_C@_09PCHKBJ@Director?6@
  002ed	8b 45 b4	 mov	 eax, DWORD PTR tv211[ebp]
  002f0	50		 push	 eax
  002f1	e8 00 00 00 00	 call	 _strcpy
  002f6	83 c4 08	 add	 esp, 8
  002f9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  002fc	83 c1 01	 add	 ecx, 1
  002ff	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 228  : 	strcpy(credits[i].realnames[j++], "Johnny Wallbank\n");

  00302	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00309	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0030c	c1 e1 05	 shl	 ecx, 5
  0030f	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00316	89 55 b4	 mov	 DWORD PTR tv220[ebp], edx
  00319	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LADCMIKH@Johnny?5Wallbank?6@
  0031e	8b 45 b4	 mov	 eax, DWORD PTR tv220[ebp]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 _strcpy
  00327	83 c4 08	 add	 esp, 8
  0032a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0032d	83 c1 01	 add	 ecx, 1
  00330	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 229  : 	credits[i].numnames = (UINT8)j;

  00333	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0033a	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  0033d	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 230  : 	i++;

  00343	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00346	83 c0 01	 add	 eax, 1
  00349	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 231  : 	strcpy(credits[i].header, "Game Designers\n");

  0034c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BMEKDKNI@Game?5Designers?6@
  00351	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00358	05 00 00 00 00	 add	 eax, OFFSET _credits
  0035d	50		 push	 eax
  0035e	e8 00 00 00 00	 call	 _strcpy
  00363	83 c4 08	 add	 esp, 8

; 232  : 	j = 0;

  00366	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 233  : 	strcpy(credits[i].fakenames[j++], "Sonikku\n");

  0036d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00374	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00377	c1 e1 05	 shl	 ecx, 5
  0037a	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00381	89 55 b4	 mov	 DWORD PTR tv238[ebp], edx
  00384	68 00 00 00 00	 push	 OFFSET ??_C@_08FIADJLA@Sonikku?6@
  00389	8b 45 b4	 mov	 eax, DWORD PTR tv238[ebp]
  0038c	50		 push	 eax
  0038d	e8 00 00 00 00	 call	 _strcpy
  00392	83 c4 08	 add	 esp, 8
  00395	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00398	83 c1 01	 add	 ecx, 1
  0039b	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 234  : 	strcpy(credits[i].fakenames[j++], "SSNTails\n");

  0039e	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  003a5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  003a8	c1 e1 05	 shl	 ecx, 5
  003ab	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  003b2	89 55 b4	 mov	 DWORD PTR tv247[ebp], edx
  003b5	68 00 00 00 00	 push	 OFFSET ??_C@_09GECGHFPB@SSNTails?6@
  003ba	8b 45 b4	 mov	 eax, DWORD PTR tv247[ebp]
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 _strcpy
  003c3	83 c4 08	 add	 esp, 8
  003c6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  003c9	83 c1 01	 add	 ecx, 1
  003cc	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 235  : 	strcpy(credits[i].fakenames[j++], "Mystic\n");

  003cf	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  003d6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  003d9	c1 e1 05	 shl	 ecx, 5
  003dc	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  003e3	89 55 b4	 mov	 DWORD PTR tv256[ebp], edx
  003e6	68 00 00 00 00	 push	 OFFSET ??_C@_07CGABHOEI@Mystic?6@
  003eb	8b 45 b4	 mov	 eax, DWORD PTR tv256[ebp]
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 _strcpy
  003f4	83 c4 08	 add	 esp, 8
  003f7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  003fa	83 c1 01	 add	 ecx, 1
  003fd	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 236  : 	j = 0;

  00400	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 237  : 	strcpy(credits[i].realnames[j++], "Johnny Wallbank\n");

  00407	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0040e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00411	c1 e1 05	 shl	 ecx, 5
  00414	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0041b	89 55 b4	 mov	 DWORD PTR tv265[ebp], edx
  0041e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LADCMIKH@Johnny?5Wallbank?6@
  00423	8b 45 b4	 mov	 eax, DWORD PTR tv265[ebp]
  00426	50		 push	 eax
  00427	e8 00 00 00 00	 call	 _strcpy
  0042c	83 c4 08	 add	 esp, 8
  0042f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00432	83 c1 01	 add	 ecx, 1
  00435	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 238  : 	strcpy(credits[i].realnames[j++], "Art Freda\n");

  00438	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0043f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00442	c1 e1 05	 shl	 ecx, 5
  00445	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0044c	89 55 b4	 mov	 DWORD PTR tv274[ebp], edx
  0044f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BCGGBAGL@Art?5Freda?6@
  00454	8b 45 b4	 mov	 eax, DWORD PTR tv274[ebp]
  00457	50		 push	 eax
  00458	e8 00 00 00 00	 call	 _strcpy
  0045d	83 c4 08	 add	 esp, 8
  00460	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00463	83 c1 01	 add	 ecx, 1
  00466	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 239  : 	strcpy(credits[i].realnames[j++], "Ben Geyer\n");

  00469	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00470	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00473	c1 e1 05	 shl	 ecx, 5
  00476	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0047d	89 55 b4	 mov	 DWORD PTR tv283[ebp], edx
  00480	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MMHABNEM@Ben?5Geyer?6@
  00485	8b 45 b4	 mov	 eax, DWORD PTR tv283[ebp]
  00488	50		 push	 eax
  00489	e8 00 00 00 00	 call	 _strcpy
  0048e	83 c4 08	 add	 esp, 8
  00491	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00494	83 c1 01	 add	 ecx, 1
  00497	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 240  : 	credits[i].numnames = (UINT8)j;

  0049a	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  004a1	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  004a4	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 241  : 	i++;

  004aa	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004ad	83 c0 01	 add	 eax, 1
  004b0	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 242  : 	strcpy(credits[i].header, "Character Designers\n");

  004b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EGICIMND@Character?5Designers?6@
  004b8	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  004bf	05 00 00 00 00	 add	 eax, OFFSET _credits
  004c4	50		 push	 eax
  004c5	e8 00 00 00 00	 call	 _strcpy
  004ca	83 c4 08	 add	 esp, 8

; 243  : 	j = 0;

  004cd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 244  : 	strcpy(credits[i].fakenames[j++], "Sonikku\n");

  004d4	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  004db	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  004de	c1 e1 05	 shl	 ecx, 5
  004e1	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  004e8	89 55 b4	 mov	 DWORD PTR tv301[ebp], edx
  004eb	68 00 00 00 00	 push	 OFFSET ??_C@_08FIADJLA@Sonikku?6@
  004f0	8b 45 b4	 mov	 eax, DWORD PTR tv301[ebp]
  004f3	50		 push	 eax
  004f4	e8 00 00 00 00	 call	 _strcpy
  004f9	83 c4 08	 add	 esp, 8
  004fc	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  004ff	83 c1 01	 add	 ecx, 1
  00502	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 245  : 	strcpy(credits[i].fakenames[j++], "Instant Sonic\n");

  00505	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0050c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0050f	c1 e1 05	 shl	 ecx, 5
  00512	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00519	89 55 b4	 mov	 DWORD PTR tv310[ebp], edx
  0051c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MCBBMPCF@Instant?5Sonic?6@
  00521	8b 45 b4	 mov	 eax, DWORD PTR tv310[ebp]
  00524	50		 push	 eax
  00525	e8 00 00 00 00	 call	 _strcpy
  0052a	83 c4 08	 add	 esp, 8
  0052d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00530	83 c1 01	 add	 ecx, 1
  00533	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 246  : 	j = 0;

  00536	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 247  : 	strcpy(credits[i].realnames[j++], "Johnny Wallbank\n");

  0053d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00544	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00547	c1 e1 05	 shl	 ecx, 5
  0054a	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00551	89 55 b4	 mov	 DWORD PTR tv319[ebp], edx
  00554	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LADCMIKH@Johnny?5Wallbank?6@
  00559	8b 45 b4	 mov	 eax, DWORD PTR tv319[ebp]
  0055c	50		 push	 eax
  0055d	e8 00 00 00 00	 call	 _strcpy
  00562	83 c4 08	 add	 esp, 8
  00565	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00568	83 c1 01	 add	 ecx, 1
  0056b	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 248  : 	strcpy(credits[i].realnames[j++], "David Spencer Jr\n");

  0056e	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00575	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00578	c1 e1 05	 shl	 ecx, 5
  0057b	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00582	89 55 b4	 mov	 DWORD PTR tv328[ebp], edx
  00585	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MGMCMBL@David?5Spencer?5Jr?6@
  0058a	8b 45 b4	 mov	 eax, DWORD PTR tv328[ebp]
  0058d	50		 push	 eax
  0058e	e8 00 00 00 00	 call	 _strcpy
  00593	83 c4 08	 add	 esp, 8
  00596	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00599	83 c1 01	 add	 ecx, 1
  0059c	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 249  : 	credits[i].numnames = (UINT8)j;

  0059f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  005a6	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  005a9	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 250  : 	i++;

  005af	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  005b2	83 c0 01	 add	 eax, 1
  005b5	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 251  : 	strcpy(credits[i].header, "Visual Design\n");

  005b8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LGPJHBKG@Visual?5Design?6@
  005bd	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  005c4	05 00 00 00 00	 add	 eax, OFFSET _credits
  005c9	50		 push	 eax
  005ca	e8 00 00 00 00	 call	 _strcpy
  005cf	83 c4 08	 add	 esp, 8

; 252  : 	j = 0;

  005d2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 253  : 	strcpy(credits[i].fakenames[j++], "SSNTails\n");

  005d9	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  005e0	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  005e3	c1 e1 05	 shl	 ecx, 5
  005e6	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  005ed	89 55 b4	 mov	 DWORD PTR tv346[ebp], edx
  005f0	68 00 00 00 00	 push	 OFFSET ??_C@_09GECGHFPB@SSNTails?6@
  005f5	8b 45 b4	 mov	 eax, DWORD PTR tv346[ebp]
  005f8	50		 push	 eax
  005f9	e8 00 00 00 00	 call	 _strcpy
  005fe	83 c4 08	 add	 esp, 8
  00601	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00604	83 c1 01	 add	 ecx, 1
  00607	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 254  : 	j = 0;

  0060a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 255  : 	strcpy(credits[i].realnames[j++], "Art Freda\n");

  00611	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00618	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0061b	c1 e1 05	 shl	 ecx, 5
  0061e	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00625	89 55 b4	 mov	 DWORD PTR tv355[ebp], edx
  00628	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BCGGBAGL@Art?5Freda?6@
  0062d	8b 45 b4	 mov	 eax, DWORD PTR tv355[ebp]
  00630	50		 push	 eax
  00631	e8 00 00 00 00	 call	 _strcpy
  00636	83 c4 08	 add	 esp, 8
  00639	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0063c	83 c1 01	 add	 ecx, 1
  0063f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 256  : 	credits[i].numnames = (UINT8)j;

  00642	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00649	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  0064c	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 257  : 	i++;

  00652	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00655	83 c0 01	 add	 eax, 1
  00658	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 258  : 	strcpy(credits[i].header, "Landscape Design\n");

  0065b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LFBFOFCI@Landscape?5Design?6@
  00660	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00667	05 00 00 00 00	 add	 eax, OFFSET _credits
  0066c	50		 push	 eax
  0066d	e8 00 00 00 00	 call	 _strcpy
  00672	83 c4 08	 add	 esp, 8

; 259  : 	j = 0;

  00675	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 260  : 	strcpy(credits[i].fakenames[j++], "Sonikku\n");

  0067c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00683	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00686	c1 e1 05	 shl	 ecx, 5
  00689	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00690	89 55 b4	 mov	 DWORD PTR tv373[ebp], edx
  00693	68 00 00 00 00	 push	 OFFSET ??_C@_08FIADJLA@Sonikku?6@
  00698	8b 45 b4	 mov	 eax, DWORD PTR tv373[ebp]
  0069b	50		 push	 eax
  0069c	e8 00 00 00 00	 call	 _strcpy
  006a1	83 c4 08	 add	 esp, 8
  006a4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  006a7	83 c1 01	 add	 ecx, 1
  006aa	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 261  : 	strcpy(credits[i].fakenames[j++], "JEV3\n");

  006ad	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  006b4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  006b7	c1 e1 05	 shl	 ecx, 5
  006ba	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  006c1	89 55 b4	 mov	 DWORD PTR tv382[ebp], edx
  006c4	68 00 00 00 00	 push	 OFFSET ??_C@_05ECEJEDFC@JEV3?6@
  006c9	8b 45 b4	 mov	 eax, DWORD PTR tv382[ebp]
  006cc	50		 push	 eax
  006cd	e8 00 00 00 00	 call	 _strcpy
  006d2	83 c4 08	 add	 esp, 8
  006d5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  006d8	83 c1 01	 add	 ecx, 1
  006db	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 262  : 	j = 0;

  006de	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 263  : 	strcpy(credits[i].realnames[j++], "Johnny Wallbank\n");

  006e5	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  006ec	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  006ef	c1 e1 05	 shl	 ecx, 5
  006f2	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  006f9	89 55 b4	 mov	 DWORD PTR tv391[ebp], edx
  006fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LADCMIKH@Johnny?5Wallbank?6@
  00701	8b 45 b4	 mov	 eax, DWORD PTR tv391[ebp]
  00704	50		 push	 eax
  00705	e8 00 00 00 00	 call	 _strcpy
  0070a	83 c4 08	 add	 esp, 8
  0070d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00710	83 c1 01	 add	 ecx, 1
  00713	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 264  : 	strcpy(credits[i].realnames[j++], "Jarrett Voight\n");

  00716	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0071d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00720	c1 e1 05	 shl	 ecx, 5
  00723	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0072a	89 55 b4	 mov	 DWORD PTR tv400[ebp], edx
  0072d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NNGHIBBA@Jarrett?5Voight?6@
  00732	8b 45 b4	 mov	 eax, DWORD PTR tv400[ebp]
  00735	50		 push	 eax
  00736	e8 00 00 00 00	 call	 _strcpy
  0073b	83 c4 08	 add	 esp, 8
  0073e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00741	83 c1 01	 add	 ecx, 1
  00744	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 265  : 	credits[i].numnames = (UINT8)j;

  00747	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0074e	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  00751	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 266  : 	i++;

  00757	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0075a	83 c0 01	 add	 eax, 1
  0075d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 267  : 	strcpy(credits[i].header, "Chief Programmer\n");

  00760	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DKDNFNJE@Chief?5Programmer?6@
  00765	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0076c	05 00 00 00 00	 add	 eax, OFFSET _credits
  00771	50		 push	 eax
  00772	e8 00 00 00 00	 call	 _strcpy
  00777	83 c4 08	 add	 esp, 8

; 268  : 	j = 0;

  0077a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 269  : 	strcpy(credits[i].fakenames[j++], "SSNTails\n");

  00781	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00788	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0078b	c1 e1 05	 shl	 ecx, 5
  0078e	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00795	89 55 b4	 mov	 DWORD PTR tv418[ebp], edx
  00798	68 00 00 00 00	 push	 OFFSET ??_C@_09GECGHFPB@SSNTails?6@
  0079d	8b 45 b4	 mov	 eax, DWORD PTR tv418[ebp]
  007a0	50		 push	 eax
  007a1	e8 00 00 00 00	 call	 _strcpy
  007a6	83 c4 08	 add	 esp, 8
  007a9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  007ac	83 c1 01	 add	 ecx, 1
  007af	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 270  : 	j = 0;

  007b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 271  : 	strcpy(credits[i].realnames[j++], "Art Freda\n");

  007b9	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  007c0	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  007c3	c1 e1 05	 shl	 ecx, 5
  007c6	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  007cd	89 55 b4	 mov	 DWORD PTR tv427[ebp], edx
  007d0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BCGGBAGL@Art?5Freda?6@
  007d5	8b 45 b4	 mov	 eax, DWORD PTR tv427[ebp]
  007d8	50		 push	 eax
  007d9	e8 00 00 00 00	 call	 _strcpy
  007de	83 c4 08	 add	 esp, 8
  007e1	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  007e4	83 c1 01	 add	 ecx, 1
  007e7	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 272  : 	credits[i].numnames = (UINT8)j;

  007ea	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  007f1	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  007f4	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 273  : 	i++;

  007fa	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  007fd	83 c0 01	 add	 eax, 1
  00800	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 274  : 	strcpy(credits[i].header, "Programmers\n");

  00803	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GBMEDIOO@Programmers?6@
  00808	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0080f	05 00 00 00 00	 add	 eax, OFFSET _credits
  00814	50		 push	 eax
  00815	e8 00 00 00 00	 call	 _strcpy
  0081a	83 c4 08	 add	 esp, 8

; 275  : 	j = 0;

  0081d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 276  : 	strcpy(credits[i].fakenames[j++], "Alam_GBC\n");

  00824	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0082b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0082e	c1 e1 05	 shl	 ecx, 5
  00831	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00838	89 55 b4	 mov	 DWORD PTR tv445[ebp], edx
  0083b	68 00 00 00 00	 push	 OFFSET ??_C@_09IPFPHBHJ@Alam_GBC?6@
  00840	8b 45 b4	 mov	 eax, DWORD PTR tv445[ebp]
  00843	50		 push	 eax
  00844	e8 00 00 00 00	 call	 _strcpy
  00849	83 c4 08	 add	 esp, 8
  0084c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0084f	83 c1 01	 add	 ecx, 1
  00852	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 277  : 	strcpy(credits[i].fakenames[j++], "Jazz\n");

  00855	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0085c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0085f	c1 e1 05	 shl	 ecx, 5
  00862	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00869	89 55 b4	 mov	 DWORD PTR tv486[ebp], edx
  0086c	68 00 00 00 00	 push	 OFFSET ??_C@_05ODKHGMFP@Jazz?6@
  00871	8b 45 b4	 mov	 eax, DWORD PTR tv486[ebp]
  00874	50		 push	 eax
  00875	e8 00 00 00 00	 call	 _strcpy
  0087a	83 c4 08	 add	 esp, 8
  0087d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00880	83 c1 01	 add	 ecx, 1
  00883	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 278  : 	strcpy(credits[i].fakenames[j++], "Graue\n");

  00886	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0088d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00890	c1 e1 05	 shl	 ecx, 5
  00893	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  0089a	89 55 b4	 mov	 DWORD PTR tv495[ebp], edx
  0089d	68 00 00 00 00	 push	 OFFSET ??_C@_06OJJFCIKO@Graue?6@
  008a2	8b 45 b4	 mov	 eax, DWORD PTR tv495[ebp]
  008a5	50		 push	 eax
  008a6	e8 00 00 00 00	 call	 _strcpy
  008ab	83 c4 08	 add	 esp, 8
  008ae	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  008b1	83 c1 01	 add	 ecx, 1
  008b4	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 279  : 	strcpy(credits[i].fakenames[j++], "MattW CFI\n");

  008b7	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  008be	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  008c1	c1 e1 05	 shl	 ecx, 5
  008c4	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  008cb	89 55 b4	 mov	 DWORD PTR tv504[ebp], edx
  008ce	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PHICNBLE@MattW?5CFI?6@
  008d3	8b 45 b4	 mov	 eax, DWORD PTR tv504[ebp]
  008d6	50		 push	 eax
  008d7	e8 00 00 00 00	 call	 _strcpy
  008dc	83 c4 08	 add	 esp, 8
  008df	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  008e2	83 c1 01	 add	 ecx, 1
  008e5	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 280  : 	strcpy(credits[i].fakenames[j++], "Orospakr\n");

  008e8	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  008ef	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  008f2	c1 e1 05	 shl	 ecx, 5
  008f5	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  008fc	89 55 b4	 mov	 DWORD PTR tv513[ebp], edx
  008ff	68 00 00 00 00	 push	 OFFSET ??_C@_09JHBHCPNM@Orospakr?6@
  00904	8b 45 b4	 mov	 eax, DWORD PTR tv513[ebp]
  00907	50		 push	 eax
  00908	e8 00 00 00 00	 call	 _strcpy
  0090d	83 c4 08	 add	 esp, 8
  00910	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00913	83 c1 01	 add	 ecx, 1
  00916	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 281  : 	j = 0;

  00919	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 282  : 	strcpy(credits[i].realnames[j++], "Alam Arias\n");

  00920	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00927	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0092a	c1 e1 05	 shl	 ecx, 5
  0092d	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00934	89 55 b4	 mov	 DWORD PTR tv522[ebp], edx
  00937	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CLMEMF@Alam?5Arias?6@
  0093c	8b 45 b4	 mov	 eax, DWORD PTR tv522[ebp]
  0093f	50		 push	 eax
  00940	e8 00 00 00 00	 call	 _strcpy
  00945	83 c4 08	 add	 esp, 8
  00948	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0094b	83 c1 01	 add	 ecx, 1
  0094e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 283  : 	strcpy(credits[i].realnames[j++], "Nathan Giroux\n");

  00951	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00958	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0095b	c1 e1 05	 shl	 ecx, 5
  0095e	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00965	89 55 b4	 mov	 DWORD PTR tv531[ebp], edx
  00968	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KPCANGL@Nathan?5Giroux?6@
  0096d	8b 45 b4	 mov	 eax, DWORD PTR tv531[ebp]
  00970	50		 push	 eax
  00971	e8 00 00 00 00	 call	 _strcpy
  00976	83 c4 08	 add	 esp, 8
  00979	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0097c	83 c1 01	 add	 ecx, 1
  0097f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 284  : 	strcpy(credits[i].realnames[j++], "Scott Feeney\n");

  00982	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00989	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0098c	c1 e1 05	 shl	 ecx, 5
  0098f	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00996	89 55 b4	 mov	 DWORD PTR tv540[ebp], edx
  00999	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EKAJOICO@Scott?5Feeney?6@
  0099e	8b 45 b4	 mov	 eax, DWORD PTR tv540[ebp]
  009a1	50		 push	 eax
  009a2	e8 00 00 00 00	 call	 _strcpy
  009a7	83 c4 08	 add	 esp, 8
  009aa	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  009ad	83 c1 01	 add	 ecx, 1
  009b0	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 285  : 	strcpy(credits[i].realnames[j++], "Matthew Walsh\n");

  009b3	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  009ba	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  009bd	c1 e1 05	 shl	 ecx, 5
  009c0	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  009c7	89 55 b4	 mov	 DWORD PTR tv549[ebp], edx
  009ca	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FONOKPEG@Matthew?5Walsh?6@
  009cf	8b 45 b4	 mov	 eax, DWORD PTR tv549[ebp]
  009d2	50		 push	 eax
  009d3	e8 00 00 00 00	 call	 _strcpy
  009d8	83 c4 08	 add	 esp, 8
  009db	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  009de	83 c1 01	 add	 ecx, 1
  009e1	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 286  : 	strcpy(credits[i].realnames[j++], "Andrew Clunis\n");

  009e4	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  009eb	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  009ee	c1 e1 05	 shl	 ecx, 5
  009f1	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  009f8	89 55 b4	 mov	 DWORD PTR tv558[ebp], edx
  009fb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NBCJDPHE@Andrew?5Clunis?6@
  00a00	8b 45 b4	 mov	 eax, DWORD PTR tv558[ebp]
  00a03	50		 push	 eax
  00a04	e8 00 00 00 00	 call	 _strcpy
  00a09	83 c4 08	 add	 esp, 8
  00a0c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00a0f	83 c1 01	 add	 ecx, 1
  00a12	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 287  : 	credits[i].numnames = (UINT8)j;

  00a15	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00a1c	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  00a1f	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 288  : 	i++;

  00a25	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00a28	83 c0 01	 add	 eax, 1
  00a2b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 289  : 	strcpy(credits[i].header, "Coding Assistants\n");

  00a2e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HNAGEIOC@Coding?5Assistants?6@
  00a33	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00a3a	05 00 00 00 00	 add	 eax, OFFSET _credits
  00a3f	50		 push	 eax
  00a40	e8 00 00 00 00	 call	 _strcpy
  00a45	83 c4 08	 add	 esp, 8

; 290  : 	j = 0;

  00a48	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 291  : 	strcpy(credits[i].fakenames[j++], "StroggOnMeth\n");

  00a4f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00a56	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00a59	c1 e1 05	 shl	 ecx, 5
  00a5c	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00a63	89 55 b4	 mov	 DWORD PTR tv576[ebp], edx
  00a66	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JOFBLDDC@StroggOnMeth?6@
  00a6b	8b 45 b4	 mov	 eax, DWORD PTR tv576[ebp]
  00a6e	50		 push	 eax
  00a6f	e8 00 00 00 00	 call	 _strcpy
  00a74	83 c4 08	 add	 esp, 8
  00a77	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00a7a	83 c1 01	 add	 ecx, 1
  00a7d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 292  : 	strcpy(credits[i].fakenames[j++], "Cyan Helkaraxe\n");

  00a80	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00a87	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00a8a	c1 e1 05	 shl	 ecx, 5
  00a8d	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00a94	89 55 b4	 mov	 DWORD PTR tv585[ebp], edx
  00a97	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CALIHNLP@Cyan?5Helkaraxe?6@
  00a9c	8b 45 b4	 mov	 eax, DWORD PTR tv585[ebp]
  00a9f	50		 push	 eax
  00aa0	e8 00 00 00 00	 call	 _strcpy
  00aa5	83 c4 08	 add	 esp, 8
  00aa8	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00aab	83 c1 01	 add	 ecx, 1
  00aae	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 293  : 	strcpy(credits[i].fakenames[j++], "Logan_GBA\n");

  00ab1	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00ab8	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00abb	c1 e1 05	 shl	 ecx, 5
  00abe	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00ac5	89 55 b4	 mov	 DWORD PTR tv594[ebp], edx
  00ac8	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DKKNEAIG@Logan_GBA?6@
  00acd	8b 45 b4	 mov	 eax, DWORD PTR tv594[ebp]
  00ad0	50		 push	 eax
  00ad1	e8 00 00 00 00	 call	 _strcpy
  00ad6	83 c4 08	 add	 esp, 8
  00ad9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00adc	83 c1 01	 add	 ecx, 1
  00adf	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 294  : 	strcpy(credits[i].fakenames[j++], "Shuffle\n");

  00ae2	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00ae9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00aec	c1 e1 05	 shl	 ecx, 5
  00aef	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00af6	89 55 b4	 mov	 DWORD PTR tv603[ebp], edx
  00af9	68 00 00 00 00	 push	 OFFSET ??_C@_08OCKLBFDA@Shuffle?6@
  00afe	8b 45 b4	 mov	 eax, DWORD PTR tv603[ebp]
  00b01	50		 push	 eax
  00b02	e8 00 00 00 00	 call	 _strcpy
  00b07	83 c4 08	 add	 esp, 8
  00b0a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00b0d	83 c1 01	 add	 ecx, 1
  00b10	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 295  : 	strcpy(credits[i].fakenames[j++], "Oogaland\n");

  00b13	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00b1a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00b1d	c1 e1 05	 shl	 ecx, 5
  00b20	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00b27	89 55 b4	 mov	 DWORD PTR tv612[ebp], edx
  00b2a	68 00 00 00 00	 push	 OFFSET ??_C@_09LCFNPBLI@Oogaland?6@
  00b2f	8b 45 b4	 mov	 eax, DWORD PTR tv612[ebp]
  00b32	50		 push	 eax
  00b33	e8 00 00 00 00	 call	 _strcpy
  00b38	83 c4 08	 add	 esp, 8
  00b3b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00b3e	83 c1 01	 add	 ecx, 1
  00b41	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 296  : 	strcpy(credits[i].fakenames[j++], "Jason the Echidna\n");

  00b44	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00b4b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00b4e	c1 e1 05	 shl	 ecx, 5
  00b51	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00b58	89 55 b4	 mov	 DWORD PTR tv621[ebp], edx
  00b5b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JMGAHFBH@Jason?5the?5Echidna?6@
  00b60	8b 45 b4	 mov	 eax, DWORD PTR tv621[ebp]
  00b63	50		 push	 eax
  00b64	e8 00 00 00 00	 call	 _strcpy
  00b69	83 c4 08	 add	 esp, 8
  00b6c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00b6f	83 c1 01	 add	 ecx, 1
  00b72	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 297  : 	j = 0;

  00b75	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 298  : 	strcpy(credits[i].realnames[j++], "Steven McGranahan\n");

  00b7c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00b83	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00b86	c1 e1 05	 shl	 ecx, 5
  00b89	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00b90	89 55 b4	 mov	 DWORD PTR tv630[ebp], edx
  00b93	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MHMBHHJL@Steven?5McGranahan?6@
  00b98	8b 45 b4	 mov	 eax, DWORD PTR tv630[ebp]
  00b9b	50		 push	 eax
  00b9c	e8 00 00 00 00	 call	 _strcpy
  00ba1	83 c4 08	 add	 esp, 8
  00ba4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00ba7	83 c1 01	 add	 ecx, 1
  00baa	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 299  : 	strcpy(credits[i].realnames[j++], "Cyan Helkaraxe\n");

  00bad	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00bb4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00bb7	c1 e1 05	 shl	 ecx, 5
  00bba	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00bc1	89 55 b4	 mov	 DWORD PTR tv639[ebp], edx
  00bc4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CALIHNLP@Cyan?5Helkaraxe?6@
  00bc9	8b 45 b4	 mov	 eax, DWORD PTR tv639[ebp]
  00bcc	50		 push	 eax
  00bcd	e8 00 00 00 00	 call	 _strcpy
  00bd2	83 c4 08	 add	 esp, 8
  00bd5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00bd8	83 c1 01	 add	 ecx, 1
  00bdb	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 300  : 	strcpy(credits[i].realnames[j++], "Logan Arias\n");

  00bde	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00be5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00be8	c1 e1 05	 shl	 ecx, 5
  00beb	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00bf2	89 55 b4	 mov	 DWORD PTR tv648[ebp], edx
  00bf5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LIBBNPBP@Logan?5Arias?6@
  00bfa	8b 45 b4	 mov	 eax, DWORD PTR tv648[ebp]
  00bfd	50		 push	 eax
  00bfe	e8 00 00 00 00	 call	 _strcpy
  00c03	83 c4 08	 add	 esp, 8
  00c06	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00c09	83 c1 01	 add	 ecx, 1
  00c0c	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 301  : 	strcpy(credits[i].realnames[j++], "Matt Marsalko\n");

  00c0f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00c16	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00c19	c1 e1 05	 shl	 ecx, 5
  00c1c	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00c23	89 55 b4	 mov	 DWORD PTR tv657[ebp], edx
  00c26	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NBGKPPC@Matt?5Marsalko?6@
  00c2b	8b 45 b4	 mov	 eax, DWORD PTR tv657[ebp]
  00c2e	50		 push	 eax
  00c2f	e8 00 00 00 00	 call	 _strcpy
  00c34	83 c4 08	 add	 esp, 8
  00c37	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00c3a	83 c1 01	 add	 ecx, 1
  00c3d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 302  : 	strcpy(credits[i].realnames[j++], "Gregor Dick\n");

  00c40	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00c47	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00c4a	c1 e1 05	 shl	 ecx, 5
  00c4d	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00c54	89 55 b4	 mov	 DWORD PTR tv666[ebp], edx
  00c57	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NPLLDMHC@Gregor?5Dick?6@
  00c5c	8b 45 b4	 mov	 eax, DWORD PTR tv666[ebp]
  00c5f	50		 push	 eax
  00c60	e8 00 00 00 00	 call	 _strcpy
  00c65	83 c4 08	 add	 esp, 8
  00c68	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00c6b	83 c1 01	 add	 ecx, 1
  00c6e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 303  : 	strcpy(credits[i].realnames[j++], "John J. Muniz\n");

  00c71	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00c78	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00c7b	c1 e1 05	 shl	 ecx, 5
  00c7e	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00c85	89 55 b4	 mov	 DWORD PTR tv675[ebp], edx
  00c88	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MLNFKIDC@John?5J?4?5Muniz?6@
  00c8d	8b 45 b4	 mov	 eax, DWORD PTR tv675[ebp]
  00c90	50		 push	 eax
  00c91	e8 00 00 00 00	 call	 _strcpy
  00c96	83 c4 08	 add	 esp, 8
  00c99	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00c9c	83 c1 01	 add	 ecx, 1
  00c9f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 304  : 	credits[i].numnames = (UINT8)j;

  00ca2	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00ca9	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  00cac	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 305  : 	i++;

  00cb2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00cb5	83 c0 01	 add	 eax, 1
  00cb8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 306  : 	strcpy(credits[i].header, "Level Designers\n");

  00cbb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KHAFHAA@Level?5Designers?6@
  00cc0	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00cc7	05 00 00 00 00	 add	 eax, OFFSET _credits
  00ccc	50		 push	 eax
  00ccd	e8 00 00 00 00	 call	 _strcpy
  00cd2	83 c4 08	 add	 esp, 8

; 307  : 	j = 0;

  00cd5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 308  : 	strcpy(credits[i].fakenames[j++], "Sonikku\n");

  00cdc	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00ce3	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00ce6	c1 e1 05	 shl	 ecx, 5
  00ce9	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00cf0	89 55 b4	 mov	 DWORD PTR tv693[ebp], edx
  00cf3	68 00 00 00 00	 push	 OFFSET ??_C@_08FIADJLA@Sonikku?6@
  00cf8	8b 45 b4	 mov	 eax, DWORD PTR tv693[ebp]
  00cfb	50		 push	 eax
  00cfc	e8 00 00 00 00	 call	 _strcpy
  00d01	83 c4 08	 add	 esp, 8
  00d04	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00d07	83 c1 01	 add	 ecx, 1
  00d0a	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 309  : 	strcpy(credits[i].fakenames[j++], "Mystic\n");

  00d0d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00d14	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00d17	c1 e1 05	 shl	 ecx, 5
  00d1a	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00d21	89 55 b4	 mov	 DWORD PTR tv702[ebp], edx
  00d24	68 00 00 00 00	 push	 OFFSET ??_C@_07CGABHOEI@Mystic?6@
  00d29	8b 45 b4	 mov	 eax, DWORD PTR tv702[ebp]
  00d2c	50		 push	 eax
  00d2d	e8 00 00 00 00	 call	 _strcpy
  00d32	83 c4 08	 add	 esp, 8
  00d35	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00d38	83 c1 01	 add	 ecx, 1
  00d3b	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 310  : 	strcpy(credits[i].fakenames[j++], "SSNTails\n");

  00d3e	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00d45	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00d48	c1 e1 05	 shl	 ecx, 5
  00d4b	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00d52	89 55 b4	 mov	 DWORD PTR tv711[ebp], edx
  00d55	68 00 00 00 00	 push	 OFFSET ??_C@_09GECGHFPB@SSNTails?6@
  00d5a	8b 45 b4	 mov	 eax, DWORD PTR tv711[ebp]
  00d5d	50		 push	 eax
  00d5e	e8 00 00 00 00	 call	 _strcpy
  00d63	83 c4 08	 add	 esp, 8
  00d66	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00d69	83 c1 01	 add	 ecx, 1
  00d6c	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 311  : 	strcpy(credits[i].fakenames[j++], "Digiku\n");

  00d6f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00d76	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00d79	c1 e1 05	 shl	 ecx, 5
  00d7c	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00d83	89 55 b4	 mov	 DWORD PTR tv720[ebp], edx
  00d86	68 00 00 00 00	 push	 OFFSET ??_C@_07OMAFPNFK@Digiku?6@
  00d8b	8b 45 b4	 mov	 eax, DWORD PTR tv720[ebp]
  00d8e	50		 push	 eax
  00d8f	e8 00 00 00 00	 call	 _strcpy
  00d94	83 c4 08	 add	 esp, 8
  00d97	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00d9a	83 c1 01	 add	 ecx, 1
  00d9d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 312  : 	strcpy(credits[i].fakenames[j++], "Torgo\n");

  00da0	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00da7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00daa	c1 e1 05	 shl	 ecx, 5
  00dad	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00db4	89 55 b4	 mov	 DWORD PTR tv729[ebp], edx
  00db7	68 00 00 00 00	 push	 OFFSET ??_C@_06NACMEICI@Torgo?6@
  00dbc	8b 45 b4	 mov	 eax, DWORD PTR tv729[ebp]
  00dbf	50		 push	 eax
  00dc0	e8 00 00 00 00	 call	 _strcpy
  00dc5	83 c4 08	 add	 esp, 8
  00dc8	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00dcb	83 c1 01	 add	 ecx, 1
  00dce	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 313  : 	strcpy(credits[i].fakenames[j++], "Nev3r\n");

  00dd1	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00dd8	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00ddb	c1 e1 05	 shl	 ecx, 5
  00dde	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00de5	89 55 b4	 mov	 DWORD PTR tv738[ebp], edx
  00de8	68 00 00 00 00	 push	 OFFSET ??_C@_06BHAIKGNI@Nev3r?6@
  00ded	8b 45 b4	 mov	 eax, DWORD PTR tv738[ebp]
  00df0	50		 push	 eax
  00df1	e8 00 00 00 00	 call	 _strcpy
  00df6	83 c4 08	 add	 esp, 8
  00df9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00dfc	83 c1 01	 add	 ecx, 1
  00dff	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 314  : 	strcpy(credits[i].fakenames[j++], "JEV3\n");

  00e02	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00e09	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00e0c	c1 e1 05	 shl	 ecx, 5
  00e0f	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00e16	89 55 b4	 mov	 DWORD PTR tv747[ebp], edx
  00e19	68 00 00 00 00	 push	 OFFSET ??_C@_05ECEJEDFC@JEV3?6@
  00e1e	8b 45 b4	 mov	 eax, DWORD PTR tv747[ebp]
  00e21	50		 push	 eax
  00e22	e8 00 00 00 00	 call	 _strcpy
  00e27	83 c4 08	 add	 esp, 8
  00e2a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00e2d	83 c1 01	 add	 ecx, 1
  00e30	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 315  : 	strcpy(credits[i].fakenames[j++], "Spazzo\n");

  00e33	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00e3a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00e3d	c1 e1 05	 shl	 ecx, 5
  00e40	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00e47	89 55 b4	 mov	 DWORD PTR tv756[ebp], edx
  00e4a	68 00 00 00 00	 push	 OFFSET ??_C@_07GADAAEGG@Spazzo?6@
  00e4f	8b 45 b4	 mov	 eax, DWORD PTR tv756[ebp]
  00e52	50		 push	 eax
  00e53	e8 00 00 00 00	 call	 _strcpy
  00e58	83 c4 08	 add	 esp, 8
  00e5b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00e5e	83 c1 01	 add	 ecx, 1
  00e61	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 316  : 	strcpy(credits[i].fakenames[j++], "MattW CFI\n");

  00e64	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00e6b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00e6e	c1 e1 05	 shl	 ecx, 5
  00e71	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00e78	89 55 b4	 mov	 DWORD PTR tv765[ebp], edx
  00e7b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PHICNBLE@MattW?5CFI?6@
  00e80	8b 45 b4	 mov	 eax, DWORD PTR tv765[ebp]
  00e83	50		 push	 eax
  00e84	e8 00 00 00 00	 call	 _strcpy
  00e89	83 c4 08	 add	 esp, 8
  00e8c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00e8f	83 c1 01	 add	 ecx, 1
  00e92	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 317  : 	strcpy(credits[i].fakenames[j++], "Jazz\n");

  00e95	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00e9c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00e9f	c1 e1 05	 shl	 ecx, 5
  00ea2	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00ea9	89 55 b4	 mov	 DWORD PTR tv774[ebp], edx
  00eac	68 00 00 00 00	 push	 OFFSET ??_C@_05ODKHGMFP@Jazz?6@
  00eb1	8b 45 b4	 mov	 eax, DWORD PTR tv774[ebp]
  00eb4	50		 push	 eax
  00eb5	e8 00 00 00 00	 call	 _strcpy
  00eba	83 c4 08	 add	 esp, 8
  00ebd	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00ec0	83 c1 01	 add	 ecx, 1
  00ec3	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 318  : 	strcpy(credits[i].fakenames[j++], "FoxBlitzz\n");

  00ec6	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00ecd	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00ed0	c1 e1 05	 shl	 ecx, 5
  00ed3	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  00eda	89 55 b4	 mov	 DWORD PTR tv783[ebp], edx
  00edd	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GCBOBNOH@FoxBlitzz?6@
  00ee2	8b 45 b4	 mov	 eax, DWORD PTR tv783[ebp]
  00ee5	50		 push	 eax
  00ee6	e8 00 00 00 00	 call	 _strcpy
  00eeb	83 c4 08	 add	 esp, 8
  00eee	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00ef1	83 c1 01	 add	 ecx, 1
  00ef4	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 319  : 	j = 0;

  00ef7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 320  : 	strcpy(credits[i].realnames[j++], "Johnny Wallbank\n");

  00efe	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00f05	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00f08	c1 e1 05	 shl	 ecx, 5
  00f0b	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00f12	89 55 b4	 mov	 DWORD PTR tv792[ebp], edx
  00f15	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LADCMIKH@Johnny?5Wallbank?6@
  00f1a	8b 45 b4	 mov	 eax, DWORD PTR tv792[ebp]
  00f1d	50		 push	 eax
  00f1e	e8 00 00 00 00	 call	 _strcpy
  00f23	83 c4 08	 add	 esp, 8
  00f26	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00f29	83 c1 01	 add	 ecx, 1
  00f2c	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 321  : 	strcpy(credits[i].realnames[j++], "Ben Geyer\n");

  00f2f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00f36	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00f39	c1 e1 05	 shl	 ecx, 5
  00f3c	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00f43	89 55 b4	 mov	 DWORD PTR tv801[ebp], edx
  00f46	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MMHABNEM@Ben?5Geyer?6@
  00f4b	8b 45 b4	 mov	 eax, DWORD PTR tv801[ebp]
  00f4e	50		 push	 eax
  00f4f	e8 00 00 00 00	 call	 _strcpy
  00f54	83 c4 08	 add	 esp, 8
  00f57	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00f5a	83 c1 01	 add	 ecx, 1
  00f5d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 322  : 	strcpy(credits[i].realnames[j++], "Art Freda\n");

  00f60	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00f67	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00f6a	c1 e1 05	 shl	 ecx, 5
  00f6d	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00f74	89 55 b4	 mov	 DWORD PTR tv810[ebp], edx
  00f77	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BCGGBAGL@Art?5Freda?6@
  00f7c	8b 45 b4	 mov	 eax, DWORD PTR tv810[ebp]
  00f7f	50		 push	 eax
  00f80	e8 00 00 00 00	 call	 _strcpy
  00f85	83 c4 08	 add	 esp, 8
  00f88	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00f8b	83 c1 01	 add	 ecx, 1
  00f8e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 323  : 	strcpy(credits[i].realnames[j++], "Marco Zafra\n");

  00f91	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00f98	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00f9b	c1 e1 05	 shl	 ecx, 5
  00f9e	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00fa5	89 55 b4	 mov	 DWORD PTR tv819[ebp], edx
  00fa8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HPFMNJMM@Marco?5Zafra?6@
  00fad	8b 45 b4	 mov	 eax, DWORD PTR tv819[ebp]
  00fb0	50		 push	 eax
  00fb1	e8 00 00 00 00	 call	 _strcpy
  00fb6	83 c4 08	 add	 esp, 8
  00fb9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00fbc	83 c1 01	 add	 ecx, 1
  00fbf	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 324  : 	strcpy(credits[i].realnames[j++], "Erik Nielsen\n");

  00fc2	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00fc9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00fcc	c1 e1 05	 shl	 ecx, 5
  00fcf	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  00fd6	89 55 b4	 mov	 DWORD PTR tv828[ebp], edx
  00fd9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MNMFMOLG@Erik?5Nielsen?6@
  00fde	8b 45 b4	 mov	 eax, DWORD PTR tv828[ebp]
  00fe1	50		 push	 eax
  00fe2	e8 00 00 00 00	 call	 _strcpy
  00fe7	83 c4 08	 add	 esp, 8
  00fea	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00fed	83 c1 01	 add	 ecx, 1
  00ff0	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 325  : 	strcpy(credits[i].realnames[j++], "Pedro Iceta\n");

  00ff3	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  00ffa	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00ffd	c1 e1 05	 shl	 ecx, 5
  01000	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01007	89 55 b4	 mov	 DWORD PTR tv837[ebp], edx
  0100a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HIGLMCBN@Pedro?5Iceta?6@
  0100f	8b 45 b4	 mov	 eax, DWORD PTR tv837[ebp]
  01012	50		 push	 eax
  01013	e8 00 00 00 00	 call	 _strcpy
  01018	83 c4 08	 add	 esp, 8
  0101b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0101e	83 c1 01	 add	 ecx, 1
  01021	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 326  : 	strcpy(credits[i].realnames[j++], "Jarrett Voight\n");

  01024	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0102b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0102e	c1 e1 05	 shl	 ecx, 5
  01031	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01038	89 55 b4	 mov	 DWORD PTR tv846[ebp], edx
  0103b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NNGHIBBA@Jarrett?5Voight?6@
  01040	8b 45 b4	 mov	 eax, DWORD PTR tv846[ebp]
  01043	50		 push	 eax
  01044	e8 00 00 00 00	 call	 _strcpy
  01049	83 c4 08	 add	 esp, 8
  0104c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0104f	83 c1 01	 add	 ecx, 1
  01052	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 327  : 	strcpy(credits[i].realnames[j++], "Michael Antonakes\n");

  01055	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0105c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0105f	c1 e1 05	 shl	 ecx, 5
  01062	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01069	89 55 b4	 mov	 DWORD PTR tv855[ebp], edx
  0106c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HPPNAFOB@Michael?5Antonakes?6@
  01071	8b 45 b4	 mov	 eax, DWORD PTR tv855[ebp]
  01074	50		 push	 eax
  01075	e8 00 00 00 00	 call	 _strcpy
  0107a	83 c4 08	 add	 esp, 8
  0107d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01080	83 c1 01	 add	 ecx, 1
  01083	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 328  : 	strcpy(credits[i].realnames[j++], "Matthew Walsh\n");

  01086	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0108d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01090	c1 e1 05	 shl	 ecx, 5
  01093	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0109a	89 55 b4	 mov	 DWORD PTR tv864[ebp], edx
  0109d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FONOKPEG@Matthew?5Walsh?6@
  010a2	8b 45 b4	 mov	 eax, DWORD PTR tv864[ebp]
  010a5	50		 push	 eax
  010a6	e8 00 00 00 00	 call	 _strcpy
  010ab	83 c4 08	 add	 esp, 8
  010ae	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  010b1	83 c1 01	 add	 ecx, 1
  010b4	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 329  : 	strcpy(credits[i].realnames[j++], "Nathan Giroux\n");

  010b7	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  010be	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  010c1	c1 e1 05	 shl	 ecx, 5
  010c4	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  010cb	89 55 b4	 mov	 DWORD PTR tv873[ebp], edx
  010ce	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KPCANGL@Nathan?5Giroux?6@
  010d3	8b 45 b4	 mov	 eax, DWORD PTR tv873[ebp]
  010d6	50		 push	 eax
  010d7	e8 00 00 00 00	 call	 _strcpy
  010dc	83 c4 08	 add	 esp, 8
  010df	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  010e2	83 c1 01	 add	 ecx, 1
  010e5	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 330  : 	strcpy(credits[i].realnames[j++], "Dan Hagerstrand\n");

  010e8	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  010ef	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  010f2	c1 e1 05	 shl	 ecx, 5
  010f5	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  010fc	89 55 b4	 mov	 DWORD PTR tv882[ebp], edx
  010ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JPNLCLGG@Dan?5Hagerstrand?6@
  01104	8b 45 b4	 mov	 eax, DWORD PTR tv882[ebp]
  01107	50		 push	 eax
  01108	e8 00 00 00 00	 call	 _strcpy
  0110d	83 c4 08	 add	 esp, 8
  01110	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01113	83 c1 01	 add	 ecx, 1
  01116	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 331  : 	credits[i].numnames = (UINT8)j;

  01119	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01120	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  01123	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 332  : 	credits[i].smallnames = true;

  01129	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01130	c6 80 21 00 00
	00 01		 mov	 BYTE PTR _credits[eax+33], 1

; 333  : 	i++;

  01137	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0113a	83 c0 01	 add	 eax, 1
  0113d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 334  : 	strcpy(credits[i].header, "Texture Artists\n");

  01140	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JBECPOOC@Texture?5Artists?6@
  01145	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0114c	05 00 00 00 00	 add	 eax, OFFSET _credits
  01151	50		 push	 eax
  01152	e8 00 00 00 00	 call	 _strcpy
  01157	83 c4 08	 add	 esp, 8

; 335  : 	j = 0;

  0115a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 336  : 	strcpy(credits[i].fakenames[j++], "KinkaJoy\n");

  01161	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01168	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0116b	c1 e1 05	 shl	 ecx, 5
  0116e	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01175	89 55 b4	 mov	 DWORD PTR tv935[ebp], edx
  01178	68 00 00 00 00	 push	 OFFSET ??_C@_09NFFODGKA@KinkaJoy?6@
  0117d	8b 45 b4	 mov	 eax, DWORD PTR tv935[ebp]
  01180	50		 push	 eax
  01181	e8 00 00 00 00	 call	 _strcpy
  01186	83 c4 08	 add	 esp, 8
  01189	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0118c	83 c1 01	 add	 ecx, 1
  0118f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 337  : 	strcpy(credits[i].fakenames[j++], "SSNTails\n");

  01192	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01199	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0119c	c1 e1 05	 shl	 ecx, 5
  0119f	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  011a6	89 55 b4	 mov	 DWORD PTR tv944[ebp], edx
  011a9	68 00 00 00 00	 push	 OFFSET ??_C@_09GECGHFPB@SSNTails?6@
  011ae	8b 45 b4	 mov	 eax, DWORD PTR tv944[ebp]
  011b1	50		 push	 eax
  011b2	e8 00 00 00 00	 call	 _strcpy
  011b7	83 c4 08	 add	 esp, 8
  011ba	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  011bd	83 c1 01	 add	 ecx, 1
  011c0	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 338  : 	strcpy(credits[i].fakenames[j++], "Blaze Hedgehog\n");

  011c3	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  011ca	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  011cd	c1 e1 05	 shl	 ecx, 5
  011d0	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  011d7	89 55 b4	 mov	 DWORD PTR tv953[ebp], edx
  011da	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LOCFEEIM@Blaze?5Hedgehog?6@
  011df	8b 45 b4	 mov	 eax, DWORD PTR tv953[ebp]
  011e2	50		 push	 eax
  011e3	e8 00 00 00 00	 call	 _strcpy
  011e8	83 c4 08	 add	 esp, 8
  011eb	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  011ee	83 c1 01	 add	 ecx, 1
  011f1	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 339  : 	strcpy(credits[i].fakenames[j++], "JEV3\n");

  011f4	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  011fb	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  011fe	c1 e1 05	 shl	 ecx, 5
  01201	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01208	89 55 b4	 mov	 DWORD PTR tv962[ebp], edx
  0120b	68 00 00 00 00	 push	 OFFSET ??_C@_05ECEJEDFC@JEV3?6@
  01210	8b 45 b4	 mov	 eax, DWORD PTR tv962[ebp]
  01213	50		 push	 eax
  01214	e8 00 00 00 00	 call	 _strcpy
  01219	83 c4 08	 add	 esp, 8
  0121c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0121f	83 c1 01	 add	 ecx, 1
  01222	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 340  : 	strcpy(credits[i].fakenames[j++], "Nev3r\n");

  01225	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0122c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0122f	c1 e1 05	 shl	 ecx, 5
  01232	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01239	89 55 b4	 mov	 DWORD PTR tv971[ebp], edx
  0123c	68 00 00 00 00	 push	 OFFSET ??_C@_06BHAIKGNI@Nev3r?6@
  01241	8b 45 b4	 mov	 eax, DWORD PTR tv971[ebp]
  01244	50		 push	 eax
  01245	e8 00 00 00 00	 call	 _strcpy
  0124a	83 c4 08	 add	 esp, 8
  0124d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01250	83 c1 01	 add	 ecx, 1
  01253	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 341  : 	j = 0;

  01256	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 342  : 	strcpy(credits[i].realnames[j++], "Buddy Fischer\n");

  0125d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01264	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01267	c1 e1 05	 shl	 ecx, 5
  0126a	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01271	89 55 b4	 mov	 DWORD PTR tv980[ebp], edx
  01274	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DCFNHKJD@Buddy?5Fischer?6@
  01279	8b 45 b4	 mov	 eax, DWORD PTR tv980[ebp]
  0127c	50		 push	 eax
  0127d	e8 00 00 00 00	 call	 _strcpy
  01282	83 c4 08	 add	 esp, 8
  01285	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01288	83 c1 01	 add	 ecx, 1
  0128b	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 343  : 	strcpy(credits[i].realnames[j++], "Art Freda\n");

  0128e	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01295	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01298	c1 e1 05	 shl	 ecx, 5
  0129b	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  012a2	89 55 b4	 mov	 DWORD PTR tv989[ebp], edx
  012a5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BCGGBAGL@Art?5Freda?6@
  012aa	8b 45 b4	 mov	 eax, DWORD PTR tv989[ebp]
  012ad	50		 push	 eax
  012ae	e8 00 00 00 00	 call	 _strcpy
  012b3	83 c4 08	 add	 esp, 8
  012b6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  012b9	83 c1 01	 add	 ecx, 1
  012bc	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 344  : 	strcpy(credits[i].realnames[j++], "Ryan Bloom\n");

  012bf	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  012c6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  012c9	c1 e1 05	 shl	 ecx, 5
  012cc	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  012d3	89 55 b4	 mov	 DWORD PTR tv998[ebp], edx
  012d6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OMJCNKBK@Ryan?5Bloom?6@
  012db	8b 45 b4	 mov	 eax, DWORD PTR tv998[ebp]
  012de	50		 push	 eax
  012df	e8 00 00 00 00	 call	 _strcpy
  012e4	83 c4 08	 add	 esp, 8
  012e7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  012ea	83 c1 01	 add	 ecx, 1
  012ed	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 345  : 	strcpy(credits[i].realnames[j++], "Jarrett Voight\n");

  012f0	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  012f7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  012fa	c1 e1 05	 shl	 ecx, 5
  012fd	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01304	89 55 b4	 mov	 DWORD PTR tv1007[ebp], edx
  01307	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NNGHIBBA@Jarrett?5Voight?6@
  0130c	8b 45 b4	 mov	 eax, DWORD PTR tv1007[ebp]
  0130f	50		 push	 eax
  01310	e8 00 00 00 00	 call	 _strcpy
  01315	83 c4 08	 add	 esp, 8
  01318	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0131b	83 c1 01	 add	 ecx, 1
  0131e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 346  : 	strcpy(credits[i].realnames[j++], "Pedro Iceta\n");

  01321	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01328	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0132b	c1 e1 05	 shl	 ecx, 5
  0132e	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01335	89 55 b4	 mov	 DWORD PTR tv1016[ebp], edx
  01338	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HIGLMCBN@Pedro?5Iceta?6@
  0133d	8b 45 b4	 mov	 eax, DWORD PTR tv1016[ebp]
  01340	50		 push	 eax
  01341	e8 00 00 00 00	 call	 _strcpy
  01346	83 c4 08	 add	 esp, 8
  01349	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0134c	83 c1 01	 add	 ecx, 1
  0134f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 347  : 	credits[i].numnames = (UINT8)j;

  01352	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01359	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  0135c	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 348  : 	i++;

  01362	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01365	83 c0 01	 add	 eax, 1
  01368	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 349  : 	strcpy(credits[i].header, "Music Production\n");

  0136b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PKDCFNFP@Music?5Production?6@
  01370	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01377	05 00 00 00 00	 add	 eax, OFFSET _credits
  0137c	50		 push	 eax
  0137d	e8 00 00 00 00	 call	 _strcpy
  01382	83 c4 08	 add	 esp, 8

; 350  : 	j = 0;

  01385	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 351  : 	strcpy(credits[i].fakenames[j++], "Bulmybag\n");

  0138c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01393	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01396	c1 e1 05	 shl	 ecx, 5
  01399	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  013a0	89 55 b4	 mov	 DWORD PTR tv1034[ebp], edx
  013a3	68 00 00 00 00	 push	 OFFSET ??_C@_09KKBJIDDC@Bulmybag?6@
  013a8	8b 45 b4	 mov	 eax, DWORD PTR tv1034[ebp]
  013ab	50		 push	 eax
  013ac	e8 00 00 00 00	 call	 _strcpy
  013b1	83 c4 08	 add	 esp, 8
  013b4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  013b7	83 c1 01	 add	 ecx, 1
  013ba	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 352  : 	strcpy(credits[i].fakenames[j++], "Arrow\n");

  013bd	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  013c4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  013c7	c1 e1 05	 shl	 ecx, 5
  013ca	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  013d1	89 55 b4	 mov	 DWORD PTR tv1043[ebp], edx
  013d4	68 00 00 00 00	 push	 OFFSET ??_C@_06INADDACD@Arrow?6@
  013d9	8b 45 b4	 mov	 eax, DWORD PTR tv1043[ebp]
  013dc	50		 push	 eax
  013dd	e8 00 00 00 00	 call	 _strcpy
  013e2	83 c4 08	 add	 esp, 8
  013e5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  013e8	83 c1 01	 add	 ecx, 1
  013eb	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 353  : 	strcpy(credits[i].fakenames[j++], "Stuf\n");

  013ee	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  013f5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  013f8	c1 e1 05	 shl	 ecx, 5
  013fb	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01402	89 55 b4	 mov	 DWORD PTR tv1052[ebp], edx
  01405	68 00 00 00 00	 push	 OFFSET ??_C@_05CCCBGNLM@Stuf?6@
  0140a	8b 45 b4	 mov	 eax, DWORD PTR tv1052[ebp]
  0140d	50		 push	 eax
  0140e	e8 00 00 00 00	 call	 _strcpy
  01413	83 c4 08	 add	 esp, 8
  01416	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01419	83 c1 01	 add	 ecx, 1
  0141c	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 354  : 	strcpy(credits[i].fakenames[j++], "SSNTails\n");

  0141f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01426	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01429	c1 e1 05	 shl	 ecx, 5
  0142c	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01433	89 55 b4	 mov	 DWORD PTR tv1061[ebp], edx
  01436	68 00 00 00 00	 push	 OFFSET ??_C@_09GECGHFPB@SSNTails?6@
  0143b	8b 45 b4	 mov	 eax, DWORD PTR tv1061[ebp]
  0143e	50		 push	 eax
  0143f	e8 00 00 00 00	 call	 _strcpy
  01444	83 c4 08	 add	 esp, 8
  01447	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0144a	83 c1 01	 add	 ecx, 1
  0144d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 355  : 	strcpy(credits[i].fakenames[j++], "Cyan Helkaraxe\n");

  01450	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01457	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0145a	c1 e1 05	 shl	 ecx, 5
  0145d	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01464	89 55 b4	 mov	 DWORD PTR tv1070[ebp], edx
  01467	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CALIHNLP@Cyan?5Helkaraxe?6@
  0146c	8b 45 b4	 mov	 eax, DWORD PTR tv1070[ebp]
  0146f	50		 push	 eax
  01470	e8 00 00 00 00	 call	 _strcpy
  01475	83 c4 08	 add	 esp, 8
  01478	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0147b	83 c1 01	 add	 ecx, 1
  0147e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 356  : 	strcpy(credits[i].fakenames[j++], "Red XVI\n");

  01481	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01488	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0148b	c1 e1 05	 shl	 ecx, 5
  0148e	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01495	89 55 b4	 mov	 DWORD PTR tv1079[ebp], edx
  01498	68 00 00 00 00	 push	 OFFSET ??_C@_08MGKNMLAP@Red?5XVI?6@
  0149d	8b 45 b4	 mov	 eax, DWORD PTR tv1079[ebp]
  014a0	50		 push	 eax
  014a1	e8 00 00 00 00	 call	 _strcpy
  014a6	83 c4 08	 add	 esp, 8
  014a9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  014ac	83 c1 01	 add	 ecx, 1
  014af	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 357  : 	strcpy(credits[i].fakenames[j++], "Spazzo\n");

  014b2	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  014b9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  014bc	c1 e1 05	 shl	 ecx, 5
  014bf	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  014c6	89 55 b4	 mov	 DWORD PTR tv1088[ebp], edx
  014c9	68 00 00 00 00	 push	 OFFSET ??_C@_07GADAAEGG@Spazzo?6@
  014ce	8b 45 b4	 mov	 eax, DWORD PTR tv1088[ebp]
  014d1	50		 push	 eax
  014d2	e8 00 00 00 00	 call	 _strcpy
  014d7	83 c4 08	 add	 esp, 8
  014da	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  014dd	83 c1 01	 add	 ecx, 1
  014e0	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 358  : 	strcpy(credits[i].fakenames[j++], "Nev3r\n");

  014e3	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  014ea	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  014ed	c1 e1 05	 shl	 ecx, 5
  014f0	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  014f7	89 55 b4	 mov	 DWORD PTR tv1097[ebp], edx
  014fa	68 00 00 00 00	 push	 OFFSET ??_C@_06BHAIKGNI@Nev3r?6@
  014ff	8b 45 b4	 mov	 eax, DWORD PTR tv1097[ebp]
  01502	50		 push	 eax
  01503	e8 00 00 00 00	 call	 _strcpy
  01508	83 c4 08	 add	 esp, 8
  0150b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0150e	83 c1 01	 add	 ecx, 1
  01511	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 359  : 	j = 0;

  01514	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 360  : 	strcpy(credits[i].realnames[j++], "David Bulmer\n");

  0151b	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01522	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01525	c1 e1 05	 shl	 ecx, 5
  01528	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0152f	89 55 b4	 mov	 DWORD PTR tv1106[ebp], edx
  01532	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HFDJECEN@David?5Bulmer?6@
  01537	8b 45 b4	 mov	 eax, DWORD PTR tv1106[ebp]
  0153a	50		 push	 eax
  0153b	e8 00 00 00 00	 call	 _strcpy
  01540	83 c4 08	 add	 esp, 8
  01543	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01546	83 c1 01	 add	 ecx, 1
  01549	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 361  : 	strcpy(credits[i].realnames[j++], "Jarel Jones\n");

  0154c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01553	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01556	c1 e1 05	 shl	 ecx, 5
  01559	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01560	89 55 b4	 mov	 DWORD PTR tv1115[ebp], edx
  01563	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IJHEDNFB@Jarel?5Jones?6@
  01568	8b 45 b4	 mov	 eax, DWORD PTR tv1115[ebp]
  0156b	50		 push	 eax
  0156c	e8 00 00 00 00	 call	 _strcpy
  01571	83 c4 08	 add	 esp, 8
  01574	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01577	83 c1 01	 add	 ecx, 1
  0157a	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 362  : 	strcpy(credits[i].realnames[j++], "Stefan Rimalia\n");

  0157d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01584	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01587	c1 e1 05	 shl	 ecx, 5
  0158a	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01591	89 55 b4	 mov	 DWORD PTR tv1124[ebp], edx
  01594	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DFEKEFFP@Stefan?5Rimalia?6@
  01599	8b 45 b4	 mov	 eax, DWORD PTR tv1124[ebp]
  0159c	50		 push	 eax
  0159d	e8 00 00 00 00	 call	 _strcpy
  015a2	83 c4 08	 add	 esp, 8
  015a5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  015a8	83 c1 01	 add	 ecx, 1
  015ab	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 363  : 	strcpy(credits[i].realnames[j++], "Art Freda\n");

  015ae	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  015b5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  015b8	c1 e1 05	 shl	 ecx, 5
  015bb	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  015c2	89 55 b4	 mov	 DWORD PTR tv1133[ebp], edx
  015c5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BCGGBAGL@Art?5Freda?6@
  015ca	8b 45 b4	 mov	 eax, DWORD PTR tv1133[ebp]
  015cd	50		 push	 eax
  015ce	e8 00 00 00 00	 call	 _strcpy
  015d3	83 c4 08	 add	 esp, 8
  015d6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  015d9	83 c1 01	 add	 ecx, 1
  015dc	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 364  : 	strcpy(credits[i].realnames[j++], "Cyan Helkaraxe\n");

  015df	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  015e6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  015e9	c1 e1 05	 shl	 ecx, 5
  015ec	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  015f3	89 55 b4	 mov	 DWORD PTR tv1142[ebp], edx
  015f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CALIHNLP@Cyan?5Helkaraxe?6@
  015fb	8b 45 b4	 mov	 eax, DWORD PTR tv1142[ebp]
  015fe	50		 push	 eax
  015ff	e8 00 00 00 00	 call	 _strcpy
  01604	83 c4 08	 add	 esp, 8
  01607	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0160a	83 c1 01	 add	 ecx, 1
  0160d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 365  : 	strcpy(credits[i].realnames[j++], "Malcolm Brown\n");

  01610	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01617	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0161a	c1 e1 05	 shl	 ecx, 5
  0161d	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01624	89 55 b4	 mov	 DWORD PTR tv1151[ebp], edx
  01627	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FIHBHKEN@Malcolm?5Brown?6@
  0162c	8b 45 b4	 mov	 eax, DWORD PTR tv1151[ebp]
  0162f	50		 push	 eax
  01630	e8 00 00 00 00	 call	 _strcpy
  01635	83 c4 08	 add	 esp, 8
  01638	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0163b	83 c1 01	 add	 ecx, 1
  0163e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 366  : 	strcpy(credits[i].realnames[j++], "Michael Antonakes\n");

  01641	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01648	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0164b	c1 e1 05	 shl	 ecx, 5
  0164e	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01655	89 55 b4	 mov	 DWORD PTR tv1160[ebp], edx
  01658	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HPPNAFOB@Michael?5Antonakes?6@
  0165d	8b 45 b4	 mov	 eax, DWORD PTR tv1160[ebp]
  01660	50		 push	 eax
  01661	e8 00 00 00 00	 call	 _strcpy
  01666	83 c4 08	 add	 esp, 8
  01669	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0166c	83 c1 01	 add	 ecx, 1
  0166f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 367  : 	strcpy(credits[i].realnames[j++], "Pedro Iceta\n");

  01672	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01679	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0167c	c1 e1 05	 shl	 ecx, 5
  0167f	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01686	89 55 b4	 mov	 DWORD PTR tv1169[ebp], edx
  01689	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HIGLMCBN@Pedro?5Iceta?6@
  0168e	8b 45 b4	 mov	 eax, DWORD PTR tv1169[ebp]
  01691	50		 push	 eax
  01692	e8 00 00 00 00	 call	 _strcpy
  01697	83 c4 08	 add	 esp, 8
  0169a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0169d	83 c1 01	 add	 ecx, 1
  016a0	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 368  : 	credits[i].smallnames = true;

  016a3	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  016aa	c6 80 21 00 00
	00 01		 mov	 BYTE PTR _credits[eax+33], 1

; 369  : 	credits[i].numnames = (UINT8)j;

  016b1	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  016b8	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  016bb	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 370  : 	i++;

  016c1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  016c4	83 c0 01	 add	 eax, 1
  016c7	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 371  : 	strcpy(credits[i].header, "Lead Guitar\n");

  016ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DMELANFD@Lead?5Guitar?6@
  016cf	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  016d6	05 00 00 00 00	 add	 eax, OFFSET _credits
  016db	50		 push	 eax
  016dc	e8 00 00 00 00	 call	 _strcpy
  016e1	83 c4 08	 add	 esp, 8

; 372  : 	j = 0;

  016e4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 373  : 	strcpy(credits[i].fakenames[j++], "Big Wave Dave\n");

  016eb	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  016f2	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  016f5	c1 e1 05	 shl	 ecx, 5
  016f8	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  016ff	89 55 b4	 mov	 DWORD PTR tv1190[ebp], edx
  01702	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HCPIMDBA@Big?5Wave?5Dave?6@
  01707	8b 45 b4	 mov	 eax, DWORD PTR tv1190[ebp]
  0170a	50		 push	 eax
  0170b	e8 00 00 00 00	 call	 _strcpy
  01710	83 c4 08	 add	 esp, 8
  01713	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01716	83 c1 01	 add	 ecx, 1
  01719	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 374  : 	strcpy(credits[i].fakenames[j++], "Shane Strife\n");

  0171c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01723	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01726	c1 e1 05	 shl	 ecx, 5
  01729	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01730	89 55 b4	 mov	 DWORD PTR tv1199[ebp], edx
  01733	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JOEMEBPG@Shane?5Strife?6@
  01738	8b 45 b4	 mov	 eax, DWORD PTR tv1199[ebp]
  0173b	50		 push	 eax
  0173c	e8 00 00 00 00	 call	 _strcpy
  01741	83 c4 08	 add	 esp, 8
  01744	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01747	83 c1 01	 add	 ecx, 1
  0174a	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 375  : 	j = 0;

  0174d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 376  : 	strcpy(credits[i].realnames[j++], "David Spencer Sr\n");

  01754	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0175b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0175e	c1 e1 05	 shl	 ecx, 5
  01761	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01768	89 55 b4	 mov	 DWORD PTR tv1208[ebp], edx
  0176b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CBHNDEAO@David?5Spencer?5Sr?6@
  01770	8b 45 b4	 mov	 eax, DWORD PTR tv1208[ebp]
  01773	50		 push	 eax
  01774	e8 00 00 00 00	 call	 _strcpy
  01779	83 c4 08	 add	 esp, 8
  0177c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0177f	83 c1 01	 add	 ecx, 1
  01782	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 377  : 	strcpy(credits[i].realnames[j++], "Shane Sexton\n");

  01785	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0178c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0178f	c1 e1 05	 shl	 ecx, 5
  01792	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01799	89 55 b4	 mov	 DWORD PTR tv1217[ebp], edx
  0179c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BHFDAGLC@Shane?5Sexton?6@
  017a1	8b 45 b4	 mov	 eax, DWORD PTR tv1217[ebp]
  017a4	50		 push	 eax
  017a5	e8 00 00 00 00	 call	 _strcpy
  017aa	83 c4 08	 add	 esp, 8
  017ad	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  017b0	83 c1 01	 add	 ecx, 1
  017b3	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 378  : 	credits[i].numnames = (UINT8)j;

  017b6	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  017bd	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  017c0	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 379  : 	i++;

  017c6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  017c9	83 c0 01	 add	 eax, 1
  017cc	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 380  : 	strcpy(credits[i].header, "Sound Effects\n");

  017cf	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CANDPA@Sound?5Effects?6@
  017d4	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  017db	05 00 00 00 00	 add	 eax, OFFSET _credits
  017e0	50		 push	 eax
  017e1	e8 00 00 00 00	 call	 _strcpy
  017e6	83 c4 08	 add	 esp, 8

; 381  : 	j = 0;

  017e9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 382  : 	strcpy(credits[i].fakenames[j++], "Sega\n");

  017f0	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  017f7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  017fa	c1 e1 05	 shl	 ecx, 5
  017fd	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01804	89 55 b4	 mov	 DWORD PTR tv1235[ebp], edx
  01807	68 00 00 00 00	 push	 OFFSET ??_C@_05IAPOFKBP@Sega?6@
  0180c	8b 45 b4	 mov	 eax, DWORD PTR tv1235[ebp]
  0180f	50		 push	 eax
  01810	e8 00 00 00 00	 call	 _strcpy
  01815	83 c4 08	 add	 esp, 8
  01818	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0181b	83 c1 01	 add	 ecx, 1
  0181e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 383  : 	strcpy(credits[i].fakenames[j++], "Instant Sonic\n");

  01821	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01828	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0182b	c1 e1 05	 shl	 ecx, 5
  0182e	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01835	89 55 b4	 mov	 DWORD PTR tv1244[ebp], edx
  01838	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MCBBMPCF@Instant?5Sonic?6@
  0183d	8b 45 b4	 mov	 eax, DWORD PTR tv1244[ebp]
  01840	50		 push	 eax
  01841	e8 00 00 00 00	 call	 _strcpy
  01846	83 c4 08	 add	 esp, 8
  01849	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0184c	83 c1 01	 add	 ecx, 1
  0184f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 384  : 	strcpy(credits[i].fakenames[j++], "Various Sources\n");

  01852	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01859	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0185c	c1 e1 05	 shl	 ecx, 5
  0185f	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01866	89 55 b4	 mov	 DWORD PTR tv1253[ebp], edx
  01869	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LJCACEOB@Various?5Sources?6@
  0186e	8b 45 b4	 mov	 eax, DWORD PTR tv1253[ebp]
  01871	50		 push	 eax
  01872	e8 00 00 00 00	 call	 _strcpy
  01877	83 c4 08	 add	 esp, 8
  0187a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0187d	83 c1 01	 add	 ecx, 1
  01880	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 385  : 	j = 0;

  01883	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 386  : 	strcpy(credits[i].realnames[j++], "Sega\n");

  0188a	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01891	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01894	c1 e1 05	 shl	 ecx, 5
  01897	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0189e	89 55 b4	 mov	 DWORD PTR tv1262[ebp], edx
  018a1	68 00 00 00 00	 push	 OFFSET ??_C@_05IAPOFKBP@Sega?6@
  018a6	8b 45 b4	 mov	 eax, DWORD PTR tv1262[ebp]
  018a9	50		 push	 eax
  018aa	e8 00 00 00 00	 call	 _strcpy
  018af	83 c4 08	 add	 esp, 8
  018b2	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  018b5	83 c1 01	 add	 ecx, 1
  018b8	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 387  : 	strcpy(credits[i].realnames[j++], "David Spencer Jr\n");

  018bb	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  018c2	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  018c5	c1 e1 05	 shl	 ecx, 5
  018c8	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  018cf	89 55 b4	 mov	 DWORD PTR tv1271[ebp], edx
  018d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MGMCMBL@David?5Spencer?5Jr?6@
  018d7	8b 45 b4	 mov	 eax, DWORD PTR tv1271[ebp]
  018da	50		 push	 eax
  018db	e8 00 00 00 00	 call	 _strcpy
  018e0	83 c4 08	 add	 esp, 8
  018e3	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  018e6	83 c1 01	 add	 ecx, 1
  018e9	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 388  : 	strcpy(credits[i].realnames[j++], "Various Sources\n");

  018ec	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  018f3	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  018f6	c1 e1 05	 shl	 ecx, 5
  018f9	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01900	89 55 b4	 mov	 DWORD PTR tv1280[ebp], edx
  01903	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LJCACEOB@Various?5Sources?6@
  01908	8b 45 b4	 mov	 eax, DWORD PTR tv1280[ebp]
  0190b	50		 push	 eax
  0190c	e8 00 00 00 00	 call	 _strcpy
  01911	83 c4 08	 add	 esp, 8
  01914	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01917	83 c1 01	 add	 ecx, 1
  0191a	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 389  : 	credits[i].numnames = (UINT8)j;

  0191d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01924	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  01927	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 390  : 	i++;

  0192d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01930	83 c0 01	 add	 eax, 1
  01933	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 391  : 	strcpy(credits[i].header, "Official Mascot\n");

  01936	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNNGLPBI@Official?5Mascot?6@
  0193b	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01942	05 00 00 00 00	 add	 eax, OFFSET _credits
  01947	50		 push	 eax
  01948	e8 00 00 00 00	 call	 _strcpy
  0194d	83 c4 08	 add	 esp, 8

; 392  : 	j = 0;

  01950	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 393  : 	strcpy(credits[i].fakenames[j++], "Spazzo\n");

  01957	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0195e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01961	c1 e1 05	 shl	 ecx, 5
  01964	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  0196b	89 55 b4	 mov	 DWORD PTR tv1298[ebp], edx
  0196e	68 00 00 00 00	 push	 OFFSET ??_C@_07GADAAEGG@Spazzo?6@
  01973	8b 45 b4	 mov	 eax, DWORD PTR tv1298[ebp]
  01976	50		 push	 eax
  01977	e8 00 00 00 00	 call	 _strcpy
  0197c	83 c4 08	 add	 esp, 8
  0197f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01982	83 c1 01	 add	 ecx, 1
  01985	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 394  : 	j = 0;

  01988	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 395  : 	strcpy(credits[i].realnames[j++], "Michael Antonakes\n");

  0198f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01996	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01999	c1 e1 05	 shl	 ecx, 5
  0199c	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  019a3	89 55 b4	 mov	 DWORD PTR tv1307[ebp], edx
  019a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HPPNAFOB@Michael?5Antonakes?6@
  019ab	8b 45 b4	 mov	 eax, DWORD PTR tv1307[ebp]
  019ae	50		 push	 eax
  019af	e8 00 00 00 00	 call	 _strcpy
  019b4	83 c4 08	 add	 esp, 8
  019b7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  019ba	83 c1 01	 add	 ecx, 1
  019bd	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 396  : 	credits[i].numnames = (UINT8)j;

  019c0	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  019c7	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  019ca	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 397  : 	i++;

  019d0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  019d3	83 c0 01	 add	 eax, 1
  019d6	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 398  : 	strcpy(credits[i].header, "Sky Sanctuary Team\n");

  019d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HBHJPCCD@Sky?5Sanctuary?5Team?6@
  019de	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  019e5	05 00 00 00 00	 add	 eax, OFFSET _credits
  019ea	50		 push	 eax
  019eb	e8 00 00 00 00	 call	 _strcpy
  019f0	83 c4 08	 add	 esp, 8

; 399  : 	j = 0;

  019f3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 400  : 	strcpy(credits[i].fakenames[j++], "Boinciel\n");

  019fa	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01a01	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01a04	c1 e1 05	 shl	 ecx, 5
  01a07	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01a0e	89 55 b4	 mov	 DWORD PTR tv1325[ebp], edx
  01a11	68 00 00 00 00	 push	 OFFSET ??_C@_09LMFFDHHO@Boinciel?6@
  01a16	8b 45 b4	 mov	 eax, DWORD PTR tv1325[ebp]
  01a19	50		 push	 eax
  01a1a	e8 00 00 00 00	 call	 _strcpy
  01a1f	83 c4 08	 add	 esp, 8
  01a22	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01a25	83 c1 01	 add	 ecx, 1
  01a28	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 401  : 	strcpy(credits[i].fakenames[j++], "Dark Warrior\n");

  01a2b	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01a32	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01a35	c1 e1 05	 shl	 ecx, 5
  01a38	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01a3f	89 55 b4	 mov	 DWORD PTR tv1334[ebp], edx
  01a42	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DMHPLHEB@Dark?5Warrior?6@
  01a47	8b 45 b4	 mov	 eax, DWORD PTR tv1334[ebp]
  01a4a	50		 push	 eax
  01a4b	e8 00 00 00 00	 call	 _strcpy
  01a50	83 c4 08	 add	 esp, 8
  01a53	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01a56	83 c1 01	 add	 ecx, 1
  01a59	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 402  : 	strcpy(credits[i].fakenames[j++], "FoxBlitzz\n");

  01a5c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01a63	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01a66	c1 e1 05	 shl	 ecx, 5
  01a69	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01a70	89 55 b4	 mov	 DWORD PTR tv1343[ebp], edx
  01a73	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GCBOBNOH@FoxBlitzz?6@
  01a78	8b 45 b4	 mov	 eax, DWORD PTR tv1343[ebp]
  01a7b	50		 push	 eax
  01a7c	e8 00 00 00 00	 call	 _strcpy
  01a81	83 c4 08	 add	 esp, 8
  01a84	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01a87	83 c1 01	 add	 ecx, 1
  01a8a	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 403  : 	strcpy(credits[i].fakenames[j++], "Jazz\n");

  01a8d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01a94	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01a97	c1 e1 05	 shl	 ecx, 5
  01a9a	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01aa1	89 55 b4	 mov	 DWORD PTR tv1352[ebp], edx
  01aa4	68 00 00 00 00	 push	 OFFSET ??_C@_05ODKHGMFP@Jazz?6@
  01aa9	8b 45 b4	 mov	 eax, DWORD PTR tv1352[ebp]
  01aac	50		 push	 eax
  01aad	e8 00 00 00 00	 call	 _strcpy
  01ab2	83 c4 08	 add	 esp, 8
  01ab5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ab8	83 c1 01	 add	 ecx, 1
  01abb	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 404  : 	strcpy(credits[i].fakenames[j++], "JEV3\n");

  01abe	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01ac5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ac8	c1 e1 05	 shl	 ecx, 5
  01acb	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01ad2	89 55 b4	 mov	 DWORD PTR tv1361[ebp], edx
  01ad5	68 00 00 00 00	 push	 OFFSET ??_C@_05ECEJEDFC@JEV3?6@
  01ada	8b 45 b4	 mov	 eax, DWORD PTR tv1361[ebp]
  01add	50		 push	 eax
  01ade	e8 00 00 00 00	 call	 _strcpy
  01ae3	83 c4 08	 add	 esp, 8
  01ae6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ae9	83 c1 01	 add	 ecx, 1
  01aec	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 405  : 	strcpy(credits[i].fakenames[j++], "MattW CFI\n");

  01aef	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01af6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01af9	c1 e1 05	 shl	 ecx, 5
  01afc	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01b03	89 55 b4	 mov	 DWORD PTR tv1370[ebp], edx
  01b06	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PHICNBLE@MattW?5CFI?6@
  01b0b	8b 45 b4	 mov	 eax, DWORD PTR tv1370[ebp]
  01b0e	50		 push	 eax
  01b0f	e8 00 00 00 00	 call	 _strcpy
  01b14	83 c4 08	 add	 esp, 8
  01b17	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01b1a	83 c1 01	 add	 ecx, 1
  01b1d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 406  : 	strcpy(credits[i].fakenames[j++], "Nev3r\n");

  01b20	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01b27	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01b2a	c1 e1 05	 shl	 ecx, 5
  01b2d	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01b34	89 55 b4	 mov	 DWORD PTR tv1379[ebp], edx
  01b37	68 00 00 00 00	 push	 OFFSET ??_C@_06BHAIKGNI@Nev3r?6@
  01b3c	8b 45 b4	 mov	 eax, DWORD PTR tv1379[ebp]
  01b3f	50		 push	 eax
  01b40	e8 00 00 00 00	 call	 _strcpy
  01b45	83 c4 08	 add	 esp, 8
  01b48	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01b4b	83 c1 01	 add	 ecx, 1
  01b4e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 407  : 	strcpy(credits[i].fakenames[j++], "Senku\n");

  01b51	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01b58	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01b5b	c1 e1 05	 shl	 ecx, 5
  01b5e	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01b65	89 55 b4	 mov	 DWORD PTR tv1388[ebp], edx
  01b68	68 00 00 00 00	 push	 OFFSET ??_C@_06EKGHLGFN@Senku?6@
  01b6d	8b 45 b4	 mov	 eax, DWORD PTR tv1388[ebp]
  01b70	50		 push	 eax
  01b71	e8 00 00 00 00	 call	 _strcpy
  01b76	83 c4 08	 add	 esp, 8
  01b79	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01b7c	83 c1 01	 add	 ecx, 1
  01b7f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 408  : 	strcpy(credits[i].fakenames[j++], "Shadow Hog\n");

  01b82	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01b89	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01b8c	c1 e1 05	 shl	 ecx, 5
  01b8f	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01b96	89 55 b4	 mov	 DWORD PTR tv1397[ebp], edx
  01b99	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IBGLOBIB@Shadow?5Hog?6@
  01b9e	8b 45 b4	 mov	 eax, DWORD PTR tv1397[ebp]
  01ba1	50		 push	 eax
  01ba2	e8 00 00 00 00	 call	 _strcpy
  01ba7	83 c4 08	 add	 esp, 8
  01baa	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01bad	83 c1 01	 add	 ecx, 1
  01bb0	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 409  : 	strcpy(credits[i].fakenames[j++], "Sonict\n");

  01bb3	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01bba	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01bbd	c1 e1 05	 shl	 ecx, 5
  01bc0	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01bc7	89 55 b4	 mov	 DWORD PTR tv1406[ebp], edx
  01bca	68 00 00 00 00	 push	 OFFSET ??_C@_07BKNCODEC@Sonict?6@
  01bcf	8b 45 b4	 mov	 eax, DWORD PTR tv1406[ebp]
  01bd2	50		 push	 eax
  01bd3	e8 00 00 00 00	 call	 _strcpy
  01bd8	83 c4 08	 add	 esp, 8
  01bdb	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01bde	83 c1 01	 add	 ecx, 1
  01be1	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 410  : 	strcpy(credits[i].fakenames[j++], "Spazzo\n");

  01be4	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01beb	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01bee	c1 e1 05	 shl	 ecx, 5
  01bf1	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01bf8	89 55 b4	 mov	 DWORD PTR tv1415[ebp], edx
  01bfb	68 00 00 00 00	 push	 OFFSET ??_C@_07GADAAEGG@Spazzo?6@
  01c00	8b 45 b4	 mov	 eax, DWORD PTR tv1415[ebp]
  01c03	50		 push	 eax
  01c04	e8 00 00 00 00	 call	 _strcpy
  01c09	83 c4 08	 add	 esp, 8
  01c0c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01c0f	83 c1 01	 add	 ecx, 1
  01c12	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 411  : 	strcpy(credits[i].fakenames[j++], "SRB2 Playah\n");

  01c15	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01c1c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01c1f	c1 e1 05	 shl	 ecx, 5
  01c22	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01c29	89 55 b4	 mov	 DWORD PTR tv1424[ebp], edx
  01c2c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OFLDDPLL@SRB2?5Playah?6@
  01c31	8b 45 b4	 mov	 eax, DWORD PTR tv1424[ebp]
  01c34	50		 push	 eax
  01c35	e8 00 00 00 00	 call	 _strcpy
  01c3a	83 c4 08	 add	 esp, 8
  01c3d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01c40	83 c1 01	 add	 ecx, 1
  01c43	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 412  : 	strcpy(credits[i].fakenames[j++], "ST218\n");

  01c46	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01c4d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01c50	c1 e1 05	 shl	 ecx, 5
  01c53	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01c5a	89 55 b4	 mov	 DWORD PTR tv1433[ebp], edx
  01c5d	68 00 00 00 00	 push	 OFFSET ??_C@_06KEFALBMK@ST218?6@
  01c62	8b 45 b4	 mov	 eax, DWORD PTR tv1433[ebp]
  01c65	50		 push	 eax
  01c66	e8 00 00 00 00	 call	 _strcpy
  01c6b	83 c4 08	 add	 esp, 8
  01c6e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01c71	83 c1 01	 add	 ecx, 1
  01c74	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 413  : 	strcpy(credits[i].fakenames[j++], "Tets\n");

  01c77	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01c7e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01c81	c1 e1 05	 shl	 ecx, 5
  01c84	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01c8b	89 55 b4	 mov	 DWORD PTR tv1474[ebp], edx
  01c8e	68 00 00 00 00	 push	 OFFSET ??_C@_05MAPFOFMI@Tets?6@
  01c93	8b 45 b4	 mov	 eax, DWORD PTR tv1474[ebp]
  01c96	50		 push	 eax
  01c97	e8 00 00 00 00	 call	 _strcpy
  01c9c	83 c4 08	 add	 esp, 8
  01c9f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ca2	83 c1 01	 add	 ecx, 1
  01ca5	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 414  : 	strcpy(credits[i].fakenames[j++], "Torgo\n");

  01ca8	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01caf	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01cb2	c1 e1 05	 shl	 ecx, 5
  01cb5	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01cbc	89 55 b4	 mov	 DWORD PTR tv1483[ebp], edx
  01cbf	68 00 00 00 00	 push	 OFFSET ??_C@_06NACMEICI@Torgo?6@
  01cc4	8b 45 b4	 mov	 eax, DWORD PTR tv1483[ebp]
  01cc7	50		 push	 eax
  01cc8	e8 00 00 00 00	 call	 _strcpy
  01ccd	83 c4 08	 add	 esp, 8
  01cd0	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01cd3	83 c1 01	 add	 ecx, 1
  01cd6	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 415  : 	strcpy(credits[i].fakenames[j++], "Blade\n");

  01cd9	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01ce0	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ce3	c1 e1 05	 shl	 ecx, 5
  01ce6	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01ced	89 55 b4	 mov	 DWORD PTR tv1492[ebp], edx
  01cf0	68 00 00 00 00	 push	 OFFSET ??_C@_06GKNEFEBI@Blade?6@
  01cf5	8b 45 b4	 mov	 eax, DWORD PTR tv1492[ebp]
  01cf8	50		 push	 eax
  01cf9	e8 00 00 00 00	 call	 _strcpy
  01cfe	83 c4 08	 add	 esp, 8
  01d01	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01d04	83 c1 01	 add	 ecx, 1
  01d07	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 416  : 	strcpy(credits[i].fakenames[j++], "KO.T.E\n");

  01d0a	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01d11	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01d14	c1 e1 05	 shl	 ecx, 5
  01d17	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01d1e	89 55 b4	 mov	 DWORD PTR tv1501[ebp], edx
  01d21	68 00 00 00 00	 push	 OFFSET ??_C@_07GAAPIJFM@KO?4T?4E?6@
  01d26	8b 45 b4	 mov	 eax, DWORD PTR tv1501[ebp]
  01d29	50		 push	 eax
  01d2a	e8 00 00 00 00	 call	 _strcpy
  01d2f	83 c4 08	 add	 esp, 8
  01d32	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01d35	83 c1 01	 add	 ecx, 1
  01d38	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 417  : 	strcpy(credits[i].fakenames[j++], "Chaos Zero 64\n");

  01d3b	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01d42	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01d45	c1 e1 05	 shl	 ecx, 5
  01d48	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01d4f	89 55 b4	 mov	 DWORD PTR tv1510[ebp], edx
  01d52	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NNDOIPIG@Chaos?5Zero?564?6@
  01d57	8b 45 b4	 mov	 eax, DWORD PTR tv1510[ebp]
  01d5a	50		 push	 eax
  01d5b	e8 00 00 00 00	 call	 _strcpy
  01d60	83 c4 08	 add	 esp, 8
  01d63	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01d66	83 c1 01	 add	 ecx, 1
  01d69	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 418  : 	strcpy(credits[i].fakenames[j++], "Prime 2\n");

  01d6c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01d73	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01d76	c1 e1 05	 shl	 ecx, 5
  01d79	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  01d80	89 55 b4	 mov	 DWORD PTR tv1519[ebp], edx
  01d83	68 00 00 00 00	 push	 OFFSET ??_C@_08DHFKHAP@Prime?52?6@
  01d88	8b 45 b4	 mov	 eax, DWORD PTR tv1519[ebp]
  01d8b	50		 push	 eax
  01d8c	e8 00 00 00 00	 call	 _strcpy
  01d91	83 c4 08	 add	 esp, 8
  01d94	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01d97	83 c1 01	 add	 ecx, 1
  01d9a	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 419  : 	j = 0;

  01d9d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 420  : 	strcpy(credits[i].realnames[j++], "Paul Clempson\n");	// Boinciel

  01da4	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01dab	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01dae	c1 e1 05	 shl	 ecx, 5
  01db1	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01db8	89 55 b4	 mov	 DWORD PTR tv1528[ebp], edx
  01dbb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GIHLCEHO@Paul?5Clempson?6@
  01dc0	8b 45 b4	 mov	 eax, DWORD PTR tv1528[ebp]
  01dc3	50		 push	 eax
  01dc4	e8 00 00 00 00	 call	 _strcpy
  01dc9	83 c4 08	 add	 esp, 8
  01dcc	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01dcf	83 c1 01	 add	 ecx, 1
  01dd2	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 421  : 	strcpy(credits[i].realnames[j++], "Rob Tisdell\n");		// Dark Warrior

  01dd5	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01ddc	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ddf	c1 e1 05	 shl	 ecx, 5
  01de2	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01de9	89 55 b4	 mov	 DWORD PTR tv1537[ebp], edx
  01dec	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LBIBKCEP@Rob?5Tisdell?6@
  01df1	8b 45 b4	 mov	 eax, DWORD PTR tv1537[ebp]
  01df4	50		 push	 eax
  01df5	e8 00 00 00 00	 call	 _strcpy
  01dfa	83 c4 08	 add	 esp, 8
  01dfd	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01e00	83 c1 01	 add	 ecx, 1
  01e03	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 422  : 	strcpy(credits[i].realnames[j++], "Dan Hagerstrand\n");	// Fox Blitzz

  01e06	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01e0d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01e10	c1 e1 05	 shl	 ecx, 5
  01e13	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01e1a	89 55 b4	 mov	 DWORD PTR tv1546[ebp], edx
  01e1d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JPNLCLGG@Dan?5Hagerstrand?6@
  01e22	8b 45 b4	 mov	 eax, DWORD PTR tv1546[ebp]
  01e25	50		 push	 eax
  01e26	e8 00 00 00 00	 call	 _strcpy
  01e2b	83 c4 08	 add	 esp, 8
  01e2e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01e31	83 c1 01	 add	 ecx, 1
  01e34	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 423  : 	strcpy(credits[i].realnames[j++], "Nathan Giroux\n");	// Jazz

  01e37	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01e3e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01e41	c1 e1 05	 shl	 ecx, 5
  01e44	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01e4b	89 55 b4	 mov	 DWORD PTR tv1555[ebp], edx
  01e4e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KPCANGL@Nathan?5Giroux?6@
  01e53	8b 45 b4	 mov	 eax, DWORD PTR tv1555[ebp]
  01e56	50		 push	 eax
  01e57	e8 00 00 00 00	 call	 _strcpy
  01e5c	83 c4 08	 add	 esp, 8
  01e5f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01e62	83 c1 01	 add	 ecx, 1
  01e65	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 424  : 	strcpy(credits[i].realnames[j++], "Jarrett Voight\n");	// JEV3

  01e68	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01e6f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01e72	c1 e1 05	 shl	 ecx, 5
  01e75	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01e7c	89 55 b4	 mov	 DWORD PTR tv1564[ebp], edx
  01e7f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NNGHIBBA@Jarrett?5Voight?6@
  01e84	8b 45 b4	 mov	 eax, DWORD PTR tv1564[ebp]
  01e87	50		 push	 eax
  01e88	e8 00 00 00 00	 call	 _strcpy
  01e8d	83 c4 08	 add	 esp, 8
  01e90	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01e93	83 c1 01	 add	 ecx, 1
  01e96	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 425  : 	strcpy(credits[i].realnames[j++], "Matthew Walsh\n");	// MattW_CFI

  01e99	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01ea0	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ea3	c1 e1 05	 shl	 ecx, 5
  01ea6	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01ead	89 55 b4	 mov	 DWORD PTR tv1573[ebp], edx
  01eb0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FONOKPEG@Matthew?5Walsh?6@
  01eb5	8b 45 b4	 mov	 eax, DWORD PTR tv1573[ebp]
  01eb8	50		 push	 eax
  01eb9	e8 00 00 00 00	 call	 _strcpy
  01ebe	83 c4 08	 add	 esp, 8
  01ec1	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ec4	83 c1 01	 add	 ecx, 1
  01ec7	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 426  : 	strcpy(credits[i].realnames[j++], "Pedro Iceta\n");		// Nev3r

  01eca	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01ed1	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ed4	c1 e1 05	 shl	 ecx, 5
  01ed7	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01ede	89 55 b4	 mov	 DWORD PTR tv1582[ebp], edx
  01ee1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HIGLMCBN@Pedro?5Iceta?6@
  01ee6	8b 45 b4	 mov	 eax, DWORD PTR tv1582[ebp]
  01ee9	50		 push	 eax
  01eea	e8 00 00 00 00	 call	 _strcpy
  01eef	83 c4 08	 add	 esp, 8
  01ef2	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ef5	83 c1 01	 add	 ecx, 1
  01ef8	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 427  : 	strcpy(credits[i].realnames[j++], "Andrew Moran\n");	// Senku

  01efb	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01f02	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01f05	c1 e1 05	 shl	 ecx, 5
  01f08	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01f0f	89 55 b4	 mov	 DWORD PTR tv1591[ebp], edx
  01f12	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LFNHHNDF@Andrew?5Moran?6@
  01f17	8b 45 b4	 mov	 eax, DWORD PTR tv1591[ebp]
  01f1a	50		 push	 eax
  01f1b	e8 00 00 00 00	 call	 _strcpy
  01f20	83 c4 08	 add	 esp, 8
  01f23	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01f26	83 c1 01	 add	 ecx, 1
  01f29	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 428  : 	strcpy(credits[i].realnames[j++], "Thomas Igoe\n");		// Shadow Hog

  01f2c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01f33	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01f36	c1 e1 05	 shl	 ecx, 5
  01f39	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01f40	89 55 b4	 mov	 DWORD PTR tv1600[ebp], edx
  01f43	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ICFKNPLH@Thomas?5Igoe?6@
  01f48	8b 45 b4	 mov	 eax, DWORD PTR tv1600[ebp]
  01f4b	50		 push	 eax
  01f4c	e8 00 00 00 00	 call	 _strcpy
  01f51	83 c4 08	 add	 esp, 8
  01f54	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01f57	83 c1 01	 add	 ecx, 1
  01f5a	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 429  : 	strcpy(credits[i].realnames[j++], "Colin Pfaff\n");		// Sonict

  01f5d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01f64	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01f67	c1 e1 05	 shl	 ecx, 5
  01f6a	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01f71	89 55 b4	 mov	 DWORD PTR tv1609[ebp], edx
  01f74	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EBDDAIIO@Colin?5Pfaff?6@
  01f79	8b 45 b4	 mov	 eax, DWORD PTR tv1609[ebp]
  01f7c	50		 push	 eax
  01f7d	e8 00 00 00 00	 call	 _strcpy
  01f82	83 c4 08	 add	 esp, 8
  01f85	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01f88	83 c1 01	 add	 ecx, 1
  01f8b	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 430  : 	strcpy(credits[i].realnames[j++], "Michael Antonakes\n"); // Spazzo

  01f8e	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01f95	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01f98	c1 e1 05	 shl	 ecx, 5
  01f9b	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01fa2	89 55 b4	 mov	 DWORD PTR tv1618[ebp], edx
  01fa5	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HPPNAFOB@Michael?5Antonakes?6@
  01faa	8b 45 b4	 mov	 eax, DWORD PTR tv1618[ebp]
  01fad	50		 push	 eax
  01fae	e8 00 00 00 00	 call	 _strcpy
  01fb3	83 c4 08	 add	 esp, 8
  01fb6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01fb9	83 c1 01	 add	 ecx, 1
  01fbc	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 431  : 	strcpy(credits[i].realnames[j++], "Cody Koester\n");	// SRB2-Playah

  01fbf	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01fc6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01fc9	c1 e1 05	 shl	 ecx, 5
  01fcc	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  01fd3	89 55 b4	 mov	 DWORD PTR tv1627[ebp], edx
  01fd6	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HHHNEFMC@Cody?5Koester?6@
  01fdb	8b 45 b4	 mov	 eax, DWORD PTR tv1627[ebp]
  01fde	50		 push	 eax
  01fdf	e8 00 00 00 00	 call	 _strcpy
  01fe4	83 c4 08	 add	 esp, 8
  01fe7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01fea	83 c1 01	 add	 ecx, 1
  01fed	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 432  : 	strcpy(credits[i].realnames[j++], "Nick Molina\n");		// ST218

  01ff0	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  01ff7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  01ffa	c1 e1 05	 shl	 ecx, 5
  01ffd	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  02004	89 55 b4	 mov	 DWORD PTR tv1636[ebp], edx
  02007	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CMKKAHGC@Nick?5Molina?6@
  0200c	8b 45 b4	 mov	 eax, DWORD PTR tv1636[ebp]
  0200f	50		 push	 eax
  02010	e8 00 00 00 00	 call	 _strcpy
  02015	83 c4 08	 add	 esp, 8
  02018	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0201b	83 c1 01	 add	 ecx, 1
  0201e	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 433  : 	strcpy(credits[i].realnames[j++], "Bill Reed\n");		// Tets

  02021	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02028	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0202b	c1 e1 05	 shl	 ecx, 5
  0202e	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  02035	89 55 b4	 mov	 DWORD PTR tv1645[ebp], edx
  02038	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GMFNOCNJ@Bill?5Reed?6@
  0203d	8b 45 b4	 mov	 eax, DWORD PTR tv1645[ebp]
  02040	50		 push	 eax
  02041	e8 00 00 00 00	 call	 _strcpy
  02046	83 c4 08	 add	 esp, 8
  02049	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0204c	83 c1 01	 add	 ecx, 1
  0204f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 434  : 	strcpy(credits[i].realnames[j++], "Erik Nielsen\n");	// Torgo

  02052	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02059	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0205c	c1 e1 05	 shl	 ecx, 5
  0205f	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  02066	89 55 b4	 mov	 DWORD PTR tv1654[ebp], edx
  02069	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MNMFMOLG@Erik?5Nielsen?6@
  0206e	8b 45 b4	 mov	 eax, DWORD PTR tv1654[ebp]
  02071	50		 push	 eax
  02072	e8 00 00 00 00	 call	 _strcpy
  02077	83 c4 08	 add	 esp, 8
  0207a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0207d	83 c1 01	 add	 ecx, 1
  02080	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 435  : 	strcpy(credits[i].realnames[j++], "Desmond D.\n");      // Blade

  02083	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0208a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0208d	c1 e1 05	 shl	 ecx, 5
  02090	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  02097	89 55 b4	 mov	 DWORD PTR tv1663[ebp], edx
  0209a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HKDCHMOA@Desmond?5D?4?6@
  0209f	8b 45 b4	 mov	 eax, DWORD PTR tv1663[ebp]
  020a2	50		 push	 eax
  020a3	e8 00 00 00 00	 call	 _strcpy
  020a8	83 c4 08	 add	 esp, 8
  020ab	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  020ae	83 c1 01	 add	 ecx, 1
  020b1	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 436  : 	strcpy(credits[i].realnames[j++], "Sherman D.\n");      // KO.T.E.

  020b4	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  020bb	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  020be	c1 e1 05	 shl	 ecx, 5
  020c1	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  020c8	89 55 b4	 mov	 DWORD PTR tv1672[ebp], edx
  020cb	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IFBJBNGJ@Sherman?5D?4?6@
  020d0	8b 45 b4	 mov	 eax, DWORD PTR tv1672[ebp]
  020d3	50		 push	 eax
  020d4	e8 00 00 00 00	 call	 _strcpy
  020d9	83 c4 08	 add	 esp, 8
  020dc	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  020df	83 c1 01	 add	 ecx, 1
  020e2	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 437  : 	strcpy(credits[i].realnames[j++], "Julio Guir\n");      // Chaos Zero 64

  020e5	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  020ec	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  020ef	c1 e1 05	 shl	 ecx, 5
  020f2	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  020f9	89 55 b4	 mov	 DWORD PTR tv1681[ebp], edx
  020fc	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OELNHJGM@Julio?5Guir?6@
  02101	8b 45 b4	 mov	 eax, DWORD PTR tv1681[ebp]
  02104	50		 push	 eax
  02105	e8 00 00 00 00	 call	 _strcpy
  0210a	83 c4 08	 add	 esp, 8
  0210d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02110	83 c1 01	 add	 ecx, 1
  02113	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 438  : 	strcpy(credits[i].realnames[j++], "Samuel Peters\n");   // Prime 2

  02116	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0211d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02120	c1 e1 05	 shl	 ecx, 5
  02123	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0212a	89 55 b4	 mov	 DWORD PTR tv1690[ebp], edx
  0212d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BLCCHNBF@Samuel?5Peters?6@
  02132	8b 45 b4	 mov	 eax, DWORD PTR tv1690[ebp]
  02135	50		 push	 eax
  02136	e8 00 00 00 00	 call	 _strcpy
  0213b	83 c4 08	 add	 esp, 8
  0213e	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02141	83 c1 01	 add	 ecx, 1
  02144	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 439  : 	credits[i].numnames = (UINT8)j;

  02147	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0214e	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  02151	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 440  : 	credits[i].smallnames = true;

  02157	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0215e	c6 80 21 00 00
	00 01		 mov	 BYTE PTR _credits[eax+33], 1

; 441  : 	i++;

  02165	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02168	83 c0 01	 add	 eax, 1
  0216b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 442  : 	strcpy(credits[i].header, "Special Thanks\n");

  0216e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OOKFJIJE@Special?5Thanks?6@
  02173	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0217a	05 00 00 00 00	 add	 eax, OFFSET _credits
  0217f	50		 push	 eax
  02180	e8 00 00 00 00	 call	 _strcpy
  02185	83 c4 08	 add	 esp, 8

; 443  : 	j = 0;

  02188	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 444  : 	strcpy(credits[i].fakenames[j++], "Doom Legacy Project\n");

  0218f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02196	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02199	c1 e1 05	 shl	 ecx, 5
  0219c	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  021a3	89 55 b4	 mov	 DWORD PTR tv1711[ebp], edx
  021a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NHCGKMPK@Doom?5Legacy?5Project?6@
  021ab	8b 45 b4	 mov	 eax, DWORD PTR tv1711[ebp]
  021ae	50		 push	 eax
  021af	e8 00 00 00 00	 call	 _strcpy
  021b4	83 c4 08	 add	 esp, 8
  021b7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  021ba	83 c1 01	 add	 ecx, 1
  021bd	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 445  : 	strcpy(credits[i].fakenames[j++], "iD Software\n");

  021c0	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  021c7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  021ca	c1 e1 05	 shl	 ecx, 5
  021cd	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  021d4	89 55 b4	 mov	 DWORD PTR tv1720[ebp], edx
  021d7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEPOKOHL@iD?5Software?6@
  021dc	8b 45 b4	 mov	 eax, DWORD PTR tv1720[ebp]
  021df	50		 push	 eax
  021e0	e8 00 00 00 00	 call	 _strcpy
  021e5	83 c4 08	 add	 esp, 8
  021e8	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  021eb	83 c1 01	 add	 ecx, 1
  021ee	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 446  : 	strcpy(credits[i].fakenames[j++], "Dave Perry\n");

  021f1	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  021f8	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  021fb	c1 e1 05	 shl	 ecx, 5
  021fe	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  02205	89 55 b4	 mov	 DWORD PTR tv1729[ebp], edx
  02208	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KKMHLIDG@Dave?5Perry?6@
  0220d	8b 45 b4	 mov	 eax, DWORD PTR tv1729[ebp]
  02210	50		 push	 eax
  02211	e8 00 00 00 00	 call	 _strcpy
  02216	83 c4 08	 add	 esp, 8
  02219	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0221c	83 c1 01	 add	 ecx, 1
  0221f	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 447  : 	strcpy(credits[i].fakenames[j++], "MistaED\n");

  02222	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02229	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0222c	c1 e1 05	 shl	 ecx, 5
  0222f	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  02236	89 55 b4	 mov	 DWORD PTR tv1738[ebp], edx
  02239	68 00 00 00 00	 push	 OFFSET ??_C@_08DBFIAKJE@MistaED?6@
  0223e	8b 45 b4	 mov	 eax, DWORD PTR tv1738[ebp]
  02241	50		 push	 eax
  02242	e8 00 00 00 00	 call	 _strcpy
  02247	83 c4 08	 add	 esp, 8
  0224a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0224d	83 c1 01	 add	 ecx, 1
  02250	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 448  : 	strcpy(credits[i].fakenames[j++], "Chrispy\n");

  02253	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0225a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0225d	c1 e1 05	 shl	 ecx, 5
  02260	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  02267	89 55 b4	 mov	 DWORD PTR tv1747[ebp], edx
  0226a	68 00 00 00 00	 push	 OFFSET ??_C@_08NNGJHBNL@Chrispy?6@
  0226f	8b 45 b4	 mov	 eax, DWORD PTR tv1747[ebp]
  02272	50		 push	 eax
  02273	e8 00 00 00 00	 call	 _strcpy
  02278	83 c4 08	 add	 esp, 8
  0227b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0227e	83 c1 01	 add	 ecx, 1
  02281	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 449  : 	j = 0;

  02284	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 450  : 	strcpy(credits[i].realnames[j++], "Doom Legacy Project\n");

  0228b	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02292	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02295	c1 e1 05	 shl	 ecx, 5
  02298	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0229f	89 55 b4	 mov	 DWORD PTR tv1756[ebp], edx
  022a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NHCGKMPK@Doom?5Legacy?5Project?6@
  022a7	8b 45 b4	 mov	 eax, DWORD PTR tv1756[ebp]
  022aa	50		 push	 eax
  022ab	e8 00 00 00 00	 call	 _strcpy
  022b0	83 c4 08	 add	 esp, 8
  022b3	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  022b6	83 c1 01	 add	 ecx, 1
  022b9	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 451  : 	strcpy(credits[i].realnames[j++], "iD Software\n");

  022bc	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  022c3	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  022c6	c1 e1 05	 shl	 ecx, 5
  022c9	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  022d0	89 55 b4	 mov	 DWORD PTR tv1765[ebp], edx
  022d3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEPOKOHL@iD?5Software?6@
  022d8	8b 45 b4	 mov	 eax, DWORD PTR tv1765[ebp]
  022db	50		 push	 eax
  022dc	e8 00 00 00 00	 call	 _strcpy
  022e1	83 c4 08	 add	 esp, 8
  022e4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  022e7	83 c1 01	 add	 ecx, 1
  022ea	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 452  : 	strcpy(credits[i].realnames[j++], "Dave Perry\n");

  022ed	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  022f4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  022f7	c1 e1 05	 shl	 ecx, 5
  022fa	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  02301	89 55 b4	 mov	 DWORD PTR tv1774[ebp], edx
  02304	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KKMHLIDG@Dave?5Perry?6@
  02309	8b 45 b4	 mov	 eax, DWORD PTR tv1774[ebp]
  0230c	50		 push	 eax
  0230d	e8 00 00 00 00	 call	 _strcpy
  02312	83 c4 08	 add	 esp, 8
  02315	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02318	83 c1 01	 add	 ecx, 1
  0231b	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 453  : 	strcpy(credits[i].realnames[j++], "Alex Fuller\n");

  0231e	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02325	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02328	c1 e1 05	 shl	 ecx, 5
  0232b	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  02332	89 55 b4	 mov	 DWORD PTR tv1783[ebp], edx
  02335	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CIBAJPGB@Alex?5Fuller?6@
  0233a	8b 45 b4	 mov	 eax, DWORD PTR tv1783[ebp]
  0233d	50		 push	 eax
  0233e	e8 00 00 00 00	 call	 _strcpy
  02343	83 c4 08	 add	 esp, 8
  02346	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02349	83 c1 01	 add	 ecx, 1
  0234c	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 454  : 	strcpy(credits[i].realnames[j++], "Chris Pryor\n");

  0234f	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02356	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02359	c1 e1 05	 shl	 ecx, 5
  0235c	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  02363	89 55 b4	 mov	 DWORD PTR tv1792[ebp], edx
  02366	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DKFEHDAC@Chris?5Pryor?6@
  0236b	8b 45 b4	 mov	 eax, DWORD PTR tv1792[ebp]
  0236e	50		 push	 eax
  0236f	e8 00 00 00 00	 call	 _strcpy
  02374	83 c4 08	 add	 esp, 8
  02377	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0237a	83 c1 01	 add	 ecx, 1
  0237d	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 455  : 	credits[i].numnames = (UINT8)j;

  02380	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02387	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  0238a	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 456  : 	i++;

  02390	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02393	83 c0 01	 add	 eax, 1
  02396	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 457  : 	strcpy(credits[i].header, "In Fond Memory Of\n");

  02399	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PBLBONPL@In?5Fond?5Memory?5Of?6@
  0239e	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  023a5	05 00 00 00 00	 add	 eax, OFFSET _credits
  023aa	50		 push	 eax
  023ab	e8 00 00 00 00	 call	 _strcpy
  023b0	83 c4 08	 add	 esp, 8

; 458  : 	j = 0;

  023b3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 459  : 	strcpy(credits[i].fakenames[j++], "Naoto Oshima\n");

  023ba	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  023c1	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  023c4	c1 e1 05	 shl	 ecx, 5
  023c7	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  023ce	89 55 b4	 mov	 DWORD PTR tv1810[ebp], edx
  023d1	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OGCNMMHL@Naoto?5Oshima?6@
  023d6	8b 45 b4	 mov	 eax, DWORD PTR tv1810[ebp]
  023d9	50		 push	 eax
  023da	e8 00 00 00 00	 call	 _strcpy
  023df	83 c4 08	 add	 esp, 8
  023e2	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  023e5	83 c1 01	 add	 ecx, 1
  023e8	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 460  : 	strcpy(credits[i].fakenames[j++], "Howard Drossin\n");

  023eb	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  023f2	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  023f5	c1 e1 05	 shl	 ecx, 5
  023f8	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  023ff	89 55 b4	 mov	 DWORD PTR tv1819[ebp], edx
  02402	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LOMABDIN@Howard?5Drossin?6@
  02407	8b 45 b4	 mov	 eax, DWORD PTR tv1819[ebp]
  0240a	50		 push	 eax
  0240b	e8 00 00 00 00	 call	 _strcpy
  02410	83 c4 08	 add	 esp, 8
  02413	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02416	83 c1 01	 add	 ecx, 1
  02419	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 461  : 	strcpy(credits[i].fakenames[j++], "\n");

  0241c	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02423	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02426	c1 e1 05	 shl	 ecx, 5
  02429	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  02430	89 55 b4	 mov	 DWORD PTR tv1828[ebp], edx
  02433	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  02438	8b 45 b4	 mov	 eax, DWORD PTR tv1828[ebp]
  0243b	50		 push	 eax
  0243c	e8 00 00 00 00	 call	 _strcpy
  02441	83 c4 08	 add	 esp, 8
  02444	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02447	83 c1 01	 add	 ecx, 1
  0244a	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 462  : 	strcpy(credits[i].fakenames[j++], "\n");

  0244d	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02454	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02457	c1 e1 05	 shl	 ecx, 5
  0245a	8d 94 08 22 00
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+34]
  02461	89 55 b4	 mov	 DWORD PTR tv1837[ebp], edx
  02464	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  02469	8b 45 b4	 mov	 eax, DWORD PTR tv1837[ebp]
  0246c	50		 push	 eax
  0246d	e8 00 00 00 00	 call	 _strcpy
  02472	83 c4 08	 add	 esp, 8
  02475	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02478	83 c1 01	 add	 ecx, 1
  0247b	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 463  : 	j = 0;

  0247e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 464  : 	strcpy(credits[i].realnames[j++], "Naoto Oshima\n");

  02485	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0248c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0248f	c1 e1 05	 shl	 ecx, 5
  02492	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  02499	89 55 b4	 mov	 DWORD PTR tv1846[ebp], edx
  0249c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OGCNMMHL@Naoto?5Oshima?6@
  024a1	8b 45 b4	 mov	 eax, DWORD PTR tv1846[ebp]
  024a4	50		 push	 eax
  024a5	e8 00 00 00 00	 call	 _strcpy
  024aa	83 c4 08	 add	 esp, 8
  024ad	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  024b0	83 c1 01	 add	 ecx, 1
  024b3	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 465  : 	strcpy(credits[i].realnames[j++], "Howard Drossin\n");

  024b6	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  024bd	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  024c0	c1 e1 05	 shl	 ecx, 5
  024c3	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  024ca	89 55 b4	 mov	 DWORD PTR tv1855[ebp], edx
  024cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LOMABDIN@Howard?5Drossin?6@
  024d2	8b 45 b4	 mov	 eax, DWORD PTR tv1855[ebp]
  024d5	50		 push	 eax
  024d6	e8 00 00 00 00	 call	 _strcpy
  024db	83 c4 08	 add	 esp, 8
  024de	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  024e1	83 c1 01	 add	 ecx, 1
  024e4	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 466  : 	strcpy(credits[i].realnames[j++], "\n");

  024e7	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  024ee	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  024f1	c1 e1 05	 shl	 ecx, 5
  024f4	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  024fb	89 55 b4	 mov	 DWORD PTR tv1864[ebp], edx
  024fe	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  02503	8b 45 b4	 mov	 eax, DWORD PTR tv1864[ebp]
  02506	50		 push	 eax
  02507	e8 00 00 00 00	 call	 _strcpy
  0250c	83 c4 08	 add	 esp, 8
  0250f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02512	83 c1 01	 add	 ecx, 1
  02515	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 467  : 	strcpy(credits[i].realnames[j++], "\n");

  02518	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  0251f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02522	c1 e1 05	 shl	 ecx, 5
  02525	8d 94 08 22 04
	00 00		 lea	 edx, DWORD PTR _credits[eax+ecx+1058]
  0252c	89 55 b4	 mov	 DWORD PTR tv1873[ebp], edx
  0252f	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  02534	8b 45 b4	 mov	 eax, DWORD PTR tv1873[ebp]
  02537	50		 push	 eax
  02538	e8 00 00 00 00	 call	 _strcpy
  0253d	83 c4 08	 add	 esp, 8
  02540	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  02543	83 c1 01	 add	 ecx, 1
  02546	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 468  : 	credits[i].numnames = (UINT8)j;

  02549	69 45 fc 22 08
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 2082
  02550	8a 4d f8	 mov	 cl, BYTE PTR _j$[ebp]
  02553	88 88 20 00 00
	00		 mov	 BYTE PTR _credits[eax+32], cl

; 469  : 	i++;

  02559	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0255c	83 c0 01	 add	 eax, 1
  0255f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN1@F_StartCre:

; 470  : }

  02562	5f		 pop	 edi
  02563	5e		 pop	 esi
  02564	5b		 pop	 ebx
  02565	8b e5		 mov	 esp, ebp
  02567	5d		 pop	 ebp
  02568	c3		 ret	 0
_F_StartCredits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_StartTitleScreen
_TEXT	SEGMENT
_F_StartTitleScreen PROC				; COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 120  : 	G_SetGamestate(GS_TITLESCREEN);

  00009	6a 09		 push	 9
  0000b	e8 00 00 00 00	 call	 _G_SetGamestate
  00010	83 c4 04	 add	 esp, 4

; 121  : 	CON_ClearHUD();

  00013	e8 00 00 00 00	 call	 _CON_ClearHUD
  00018	90		 npad	 1

; 122  : 
; 123  : 	// IWAD dependent stuff.
; 124  : 
; 125  : 	S_ChangeMusic(mus_titles, looptitle);

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _looptitle
  0001e	50		 push	 eax
  0001f	68 0c 04 00 00	 push	 1036			; 0000040cH
  00024	e8 00 00 00 00	 call	 _S_ChangeMusic
  00029	83 c4 08	 add	 esp, 8

; 126  : 
; 127  : 	finalecount = 0;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finalecount, 0

; 128  : 	finalestage = 0;

  00036	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finalestage, 0

; 129  : 	animtimer = 0;

  00040	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _animtimer, 0

; 130  : 
; 131  : 	ttbanner = W_CachePatchName("TTBANNER", PU_LEVEL);

  0004a	6a 32		 push	 50			; 00000032H
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_08JCGAACFF@TTBANNER@
  00051	e8 00 00 00 00	 call	 _W_CachePatchName
  00056	83 c4 08	 add	 esp, 8
  00059	a3 00 00 00 00	 mov	 DWORD PTR _ttbanner, eax

; 132  : 	ttwing = W_CachePatchName("TTWING", PU_LEVEL);

  0005e	6a 32		 push	 50			; 00000032H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_06ILAFNKKA@TTWING@
  00065	e8 00 00 00 00	 call	 _W_CachePatchName
  0006a	83 c4 08	 add	 esp, 8
  0006d	a3 00 00 00 00	 mov	 DWORD PTR _ttwing, eax

; 133  : 	ttsonic = W_CachePatchName("TTSONIC", PU_LEVEL);

  00072	6a 32		 push	 50			; 00000032H
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_07BDEGCAEI@TTSONIC@
  00079	e8 00 00 00 00	 call	 _W_CachePatchName
  0007e	83 c4 08	 add	 esp, 8
  00081	a3 00 00 00 00	 mov	 DWORD PTR _ttsonic, eax

; 134  : 	ttswave1 = W_CachePatchName("TTSWAVE1", PU_LEVEL);

  00086	6a 32		 push	 50			; 00000032H
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_08NPGLKEGM@TTSWAVE1@
  0008d	e8 00 00 00 00	 call	 _W_CachePatchName
  00092	83 c4 08	 add	 esp, 8
  00095	a3 00 00 00 00	 mov	 DWORD PTR _ttswave1, eax

; 135  : 	ttswave2 = W_CachePatchName("TTSWAVE2", PU_LEVEL);

  0009a	6a 32		 push	 50			; 00000032H
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_08PEEGPHKP@TTSWAVE2@
  000a1	e8 00 00 00 00	 call	 _W_CachePatchName
  000a6	83 c4 08	 add	 esp, 8
  000a9	a3 00 00 00 00	 mov	 DWORD PTR _ttswave2, eax

; 136  : 	ttswip1 = W_CachePatchName("TTSWIP1", PU_LEVEL);

  000ae	6a 32		 push	 50			; 00000032H
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_07NAPPEHDJ@TTSWIP1@
  000b5	e8 00 00 00 00	 call	 _W_CachePatchName
  000ba	83 c4 08	 add	 esp, 8
  000bd	a3 00 00 00 00	 mov	 DWORD PTR _ttswip1, eax

; 137  : 	ttsprep1 = W_CachePatchName("TTSPREP1", PU_LEVEL);

  000c2	6a 32		 push	 50			; 00000032H
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_08LNGPOAGM@TTSPREP1@
  000c9	e8 00 00 00 00	 call	 _W_CachePatchName
  000ce	83 c4 08	 add	 esp, 8
  000d1	a3 00 00 00 00	 mov	 DWORD PTR _ttsprep1, eax

; 138  : 	ttsprep2 = W_CachePatchName("TTSPREP2", PU_LEVEL);

  000d6	6a 32		 push	 50			; 00000032H
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_08JGECLDKP@TTSPREP2@
  000dd	e8 00 00 00 00	 call	 _W_CachePatchName
  000e2	83 c4 08	 add	 esp, 8
  000e5	a3 00 00 00 00	 mov	 DWORD PTR _ttsprep2, eax

; 139  : 	ttspop1 = W_CachePatchName("TTSPOP1", PU_LEVEL);

  000ea	6a 32		 push	 50			; 00000032H
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_07EHLEMEPF@TTSPOP1@
  000f1	e8 00 00 00 00	 call	 _W_CachePatchName
  000f6	83 c4 08	 add	 esp, 8
  000f9	a3 00 00 00 00	 mov	 DWORD PTR _ttspop1, eax

; 140  : 	ttspop2 = W_CachePatchName("TTSPOP2", PU_LEVEL);

  000fe	6a 32		 push	 50			; 00000032H
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_07GMJJJHDG@TTSPOP2@
  00105	e8 00 00 00 00	 call	 _W_CachePatchName
  0010a	83 c4 08	 add	 esp, 8
  0010d	a3 00 00 00 00	 mov	 DWORD PTR _ttspop2, eax

; 141  : 	ttspop3 = W_CachePatchName("TTSPOP3", PU_LEVEL);

  00112	6a 32		 push	 50			; 00000032H
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_07HFICKGHH@TTSPOP3@
  00119	e8 00 00 00 00	 call	 _W_CachePatchName
  0011e	83 c4 08	 add	 esp, 8
  00121	a3 00 00 00 00	 mov	 DWORD PTR _ttspop3, eax

; 142  : 	ttspop4 = W_CachePatchName("TTSPOP4", PU_LEVEL);

  00126	6a 32		 push	 50			; 00000032H
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_07DKMDDALA@TTSPOP4@
  0012d	e8 00 00 00 00	 call	 _W_CachePatchName
  00132	83 c4 08	 add	 esp, 8
  00135	a3 00 00 00 00	 mov	 DWORD PTR _ttspop4, eax

; 143  : 	ttspop5 = W_CachePatchName("TTSPOP5", PU_LEVEL);

  0013a	6a 32		 push	 50			; 00000032H
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_07CDNIABPB@TTSPOP5@
  00141	e8 00 00 00 00	 call	 _W_CachePatchName
  00146	83 c4 08	 add	 esp, 8
  00149	a3 00 00 00 00	 mov	 DWORD PTR _ttspop5, eax

; 144  : 	ttspop6 = W_CachePatchName("TTSPOP6", PU_LEVEL);

  0014e	6a 32		 push	 50			; 00000032H
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_07IPFFCDC@TTSPOP6@
  00155	e8 00 00 00 00	 call	 _W_CachePatchName
  0015a	83 c4 08	 add	 esp, 8
  0015d	a3 00 00 00 00	 mov	 DWORD PTR _ttspop6, eax

; 145  : 	ttspop7 = W_CachePatchName("TTSPOP7", PU_LEVEL);

  00162	6a 32		 push	 50			; 00000032H
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_07BBOOGDHD@TTSPOP7@
  00169	e8 00 00 00 00	 call	 _W_CachePatchName
  0016e	83 c4 08	 add	 esp, 8
  00171	a3 00 00 00 00	 mov	 DWORD PTR _ttspop7, eax

; 146  : }

  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c3		 ret	 0
_F_StartTitleScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_StartIntro
_TEXT	SEGMENT
_F_StartIntro PROC					; COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 518  : 	if (introtoplay)

  00009	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _introtoplay
  00010	85 c0		 test	 eax, eax
  00012	74 1c		 je	 SHORT $LN2@F_StartInt

; 519  : 	{
; 520  : 		F_StartCustomCutscene(introtoplay - 1, false, false);

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _introtoplay
  0001f	83 e8 01	 sub	 eax, 1
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _F_StartCustomCutscene
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 521  : 		return;

  0002b	e9 a4 00 00 00	 jmp	 $LN1@F_StartInt
$LN2@F_StartInt:

; 522  : 	}
; 523  : 
; 524  : 	G_SetGamestate(GS_INTRO);

  00030	6a 05		 push	 5
  00032	e8 00 00 00 00	 call	 _G_SetGamestate
  00037	83 c4 04	 add	 esp, 4

; 525  : 	gameaction = ga_nothing;

  0003a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 526  : 	playerdeadview = false;

  00044	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _playerdeadview, 0

; 527  : 	paused = false;

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 528  : 	CON_ToggleOff();

  00055	e8 00 00 00 00	 call	 _CON_ToggleOff
  0005a	90		 npad	 1

; 529  : 	CON_ClearHUD();

  0005b	e8 00 00 00 00	 call	 _CON_ClearHUD
  00060	90		 npad	 1

; 530  : 	finaletext = text[INTRO01TEXT];

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	69 c8 36 01 00
	00		 imul	 ecx, eax, 310
  0006c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00072	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx

; 531  : 
; 532  : 	finalestage = finaletextcount = finalecount = animtimer = stoptimer = 0;

  00078	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _stoptimer, 0
  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR _stoptimer
  00087	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _animtimer
  00092	89 0d 00 00 00
	00		 mov	 DWORD PTR _finalecount, ecx
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finalecount
  0009e	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletextcount, edx
  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletextcount
  000a9	a3 00 00 00 00	 mov	 DWORD PTR _finalestage, eax

; 533  : 	roidtics = BASEVIDWIDTH - 64;

  000ae	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR _roidtics, 256 ; 00000100H

; 534  : 	scene = 0;

  000b8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _scene, 0

; 535  : 	timetonext = introscenetime[scene];

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _scene
  000c7	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _introscenetime[eax*4]
  000ce	89 0d 00 00 00
	00		 mov	 DWORD PTR _timetonext, ecx
$LN1@F_StartInt:

; 536  : }

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
_F_StartIntro ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_StartGameEnd
_TEXT	SEGMENT
_F_StartGameEnd PROC					; COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 151  : 	G_SetGamestate(GS_GAMEEND);

  00009	6a 08		 push	 8
  0000b	e8 00 00 00 00	 call	 _G_SetGamestate
  00010	83 c4 04	 add	 esp, 4

; 152  : 
; 153  : 	gameaction = ga_nothing;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 154  : 	playerdeadview = false;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _playerdeadview, 0

; 155  : 	paused = false;

  00027	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 156  : 	CON_ToggleOff();

  0002e	e8 00 00 00 00	 call	 _CON_ToggleOff
  00033	90		 npad	 1

; 157  : 	CON_ClearHUD();

  00034	e8 00 00 00 00	 call	 _CON_ClearHUD
  00039	90		 npad	 1

; 158  : 	S_StopMusic();

  0003a	e8 00 00 00 00	 call	 _S_StopMusic
  0003f	90		 npad	 1

; 159  : 
; 160  : 	timetonext = TICRATE;

  00040	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _timetonext, 35 ; 00000023H

; 161  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_F_StartGameEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_EndCutScene
_TEXT	SEGMENT
_F_EndCutScene PROC					; COMDAT

; 1894 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1895 : 	if (runningprecutscene && server)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _runningprecutscene, 0
  00010	74 37		 je	 SHORT $LN2@F_EndCutSc
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00019	74 2e		 je	 SHORT $LN2@F_EndCutSc

; 1896 : 	{
; 1897 : 		D_MapChange(gamemap, gametype, ultimatemode, precutresetplayer, 0, true, false);

  0001b	6a 00		 push	 0
  0001d	6a 01		 push	 1
  0001f	6a 00		 push	 0
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR _precutresetplayer
  00026	50		 push	 eax
  00027	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _ultimatemode
  0002e	51		 push	 ecx
  0002f	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _gametype
  00036	52		 push	 edx
  00037	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _D_MapChange
  00044	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1898 : 	}

  00047	eb 36		 jmp	 SHORT $LN6@F_EndCutSc
$LN2@F_EndCutSc:

; 1899 : 	else
; 1900 : 	{
; 1901 : 		if (cutnum == introtoplay-1)

  00049	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _introtoplay
  00050	83 e8 01	 sub	 eax, 1
  00053	39 05 00 00 00
	00		 cmp	 DWORD PTR _cutnum, eax
  00059	75 08		 jne	 SHORT $LN4@F_EndCutSc

; 1902 : 		{
; 1903 : 			D_StartTitle();

  0005b	e8 00 00 00 00	 call	 _D_StartTitle
  00060	90		 npad	 1

; 1904 : 			return;

  00061	eb 1c		 jmp	 SHORT $LN6@F_EndCutSc
$LN4@F_EndCutSc:

; 1905 : 		}
; 1906 : 
; 1907 : 		if (nextmap < 1100-1)

  00063	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  0006a	3d 4b 04 00 00	 cmp	 eax, 1099		; 0000044bH
  0006f	7d 08		 jge	 SHORT $LN5@F_EndCutSc

; 1908 : 			G_NextLevel();

  00071	e8 00 00 00 00	 call	 _G_NextLevel
  00076	90		 npad	 1
  00077	eb 06		 jmp	 SHORT $LN6@F_EndCutSc
$LN5@F_EndCutSc:

; 1909 : 		else
; 1910 : 			Y_EndGame();

  00079	e8 00 00 00 00	 call	 _Y_EndGame
  0007e	90		 npad	 1
$LN6@F_EndCutSc:

; 1911 : 	}
; 1912 : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_F_EndCutScene ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_CutsceneDrawer
_TEXT	SEGMENT
_F_CutsceneDrawer PROC					; COMDAT

; 1918 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1919 : 	if (timetonext)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timetonext, 0
  00010	74 0d		 je	 SHORT $LN2@F_Cutscene

; 1920 : 		timetonext--;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00017	83 e8 01	 sub	 eax, 1
  0001a	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax
$LN2@F_Cutscene:

; 1921 : 
; 1922 : 	stoptimer++;

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR _stoptimer
  00024	83 c0 01	 add	 eax, 1
  00027	a3 00 00 00 00	 mov	 DWORD PTR _stoptimer, eax

; 1923 : 
; 1924 : 	if (timetonext == 1 && stoptimer > 0)

  0002c	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _timetonext, 1
  00033	75 0f		 jne	 SHORT $LN3@F_Cutscene
  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _stoptimer, 0
  0003c	76 06		 jbe	 SHORT $LN3@F_Cutscene

; 1925 : 		F_AdvanceToNextScene();

  0003e	e8 00 00 00 00	 call	 _F_AdvanceToNextScene
  00043	90		 npad	 1
$LN3@F_Cutscene:

; 1926 : 
; 1927 : 	F_CutsceneTextWrite();

  00044	e8 00 00 00 00	 call	 _F_CutsceneTextWrite
  00049	90		 npad	 1

; 1928 : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_F_CutsceneDrawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_StartCustomCutscene
_TEXT	SEGMENT
_cutscenenum$ = 8					; size = 4
_precutscene$ = 12					; size = 4
_resetplayer$ = 16					; size = 4
_F_StartCustomCutscene PROC				; COMDAT

; 477  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 478  : 	G_SetGamestate(GS_CUTSCENE);

  00009	6a 07		 push	 7
  0000b	e8 00 00 00 00	 call	 _G_SetGamestate
  00010	83 c4 04	 add	 esp, 4

; 479  : 
; 480  : 	gameaction = ga_nothing;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 481  : 	playerdeadview = false;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _playerdeadview, 0

; 482  : 	paused = false;

  00027	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 483  : 	CON_ToggleOff();

  0002e	e8 00 00 00 00	 call	 _CON_ToggleOff
  00033	90		 npad	 1

; 484  : 	finaletext = cutscenes[cutscenenum].scene[0].text;

  00034	69 45 08 04 52
	00 00		 imul	 eax, DWORD PTR _cutscenenum$[ebp], 20996
  0003b	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  00040	6b d1 00	 imul	 edx, ecx, 0
  00043	8b 84 10 64 00
	00 00		 mov	 eax, DWORD PTR _cutscenes[eax+edx+100]
  0004a	a3 00 00 00 00	 mov	 DWORD PTR _finaletext, eax

; 485  : 
; 486  : 	CON_ClearHUD();

  0004f	e8 00 00 00 00	 call	 _CON_ClearHUD
  00054	90		 npad	 1

; 487  : 
; 488  : 	runningprecutscene = precutscene;

  00055	8b 45 0c	 mov	 eax, DWORD PTR _precutscene$[ebp]
  00058	a3 00 00 00 00	 mov	 DWORD PTR _runningprecutscene, eax

; 489  : 
; 490  : 	if (runningprecutscene)

  0005d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _runningprecutscene, 0
  00064	74 08		 je	 SHORT $LN2@F_StartCus

; 491  : 		precutresetplayer = resetplayer;

  00066	8b 45 10	 mov	 eax, DWORD PTR _resetplayer$[ebp]
  00069	a3 00 00 00 00	 mov	 DWORD PTR _precutresetplayer, eax
$LN2@F_StartCus:

; 492  : 
; 493  : 	scenenum = picnum = 0;

  0006e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _picnum, 0
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR _picnum
  0007d	a3 00 00 00 00	 mov	 DWORD PTR _scenenum, eax

; 494  : 	cutnum = cutscenenum;

  00082	8b 45 08	 mov	 eax, DWORD PTR _cutscenenum$[ebp]
  00085	a3 00 00 00 00	 mov	 DWORD PTR _cutnum, eax

; 495  : 	picxpos = cutscenes[cutnum].scene[0].xcoord[0];

  0008a	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00094	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  00099	6b d1 00	 imul	 edx, ecx, 0
  0009c	8d 84 10 00 00
	00 00		 lea	 eax, DWORD PTR _cutscenes[eax+edx]
  000a3	b9 02 00 00 00	 mov	 ecx, 2
  000a8	6b d1 00	 imul	 edx, ecx, 0
  000ab	0f b7 44 10 68	 movzx	 eax, WORD PTR [eax+edx+104]
  000b0	a3 00 00 00 00	 mov	 DWORD PTR _picxpos, eax

; 496  : 	picypos = cutscenes[cutnum].scene[0].ycoord[0];

  000b5	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  000bf	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  000c4	6b d1 00	 imul	 edx, ecx, 0
  000c7	8d 84 10 00 00
	00 00		 lea	 eax, DWORD PTR _cutscenes[eax+edx]
  000ce	b9 02 00 00 00	 mov	 ecx, 2
  000d3	6b d1 00	 imul	 edx, ecx, 0
  000d6	0f b7 44 10 78	 movzx	 eax, WORD PTR [eax+edx+120]
  000db	a3 00 00 00 00	 mov	 DWORD PTR _picypos, eax

; 497  : 	textxpos = cutscenes[cutnum].scene[0].textxpos;

  000e0	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  000ea	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  000ef	6b d1 00	 imul	 edx, ecx, 0
  000f2	0f b7 84 10 a0
	00 00 00	 movzx	 eax, WORD PTR _cutscenes[eax+edx+160]
  000fa	a3 00 00 00 00	 mov	 DWORD PTR _textxpos, eax

; 498  : 	textypos = cutscenes[cutnum].scene[0].textypos;

  000ff	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00109	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  0010e	6b d1 00	 imul	 edx, ecx, 0
  00111	0f b7 84 10 a2
	00 00 00	 movzx	 eax, WORD PTR _cutscenes[eax+edx+162]
  00119	a3 00 00 00 00	 mov	 DWORD PTR _textypos, eax

; 499  : 
; 500  : 	pictime = cutscenes[cutnum].scene[0].picduration[0];

  0011e	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00128	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  0012d	6b d1 00	 imul	 edx, ecx, 0
  00130	8d 84 10 00 00
	00 00		 lea	 eax, DWORD PTR _cutscenes[eax+edx]
  00137	b9 02 00 00 00	 mov	 ecx, 2
  0013c	6b d1 00	 imul	 edx, ecx, 0
  0013f	0f b7 84 10 88
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+136]
  00147	a3 00 00 00 00	 mov	 DWORD PTR _pictime, eax

; 501  : 
; 502  : 	keypressed = false;

  0014c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _keypressed, 0

; 503  : 	finalestage = 0;

  00156	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finalestage, 0

; 504  : 	finalecount = 0;

  00160	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finalecount, 0

; 505  : 	finaletextcount = 0;

  0016a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finaletextcount, 0

; 506  : 	timetonext = 0;

  00174	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timetonext, 0

; 507  : 	animtimer = cutscenes[cutnum].scene[0].picduration[0]; // Picture duration

  0017e	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  00188	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  0018d	6b d1 00	 imul	 edx, ecx, 0
  00190	8d 84 10 00 00
	00 00		 lea	 eax, DWORD PTR _cutscenes[eax+edx]
  00197	b9 02 00 00 00	 mov	 ecx, 2
  0019c	6b d1 00	 imul	 edx, ecx, 0
  0019f	0f b7 84 10 88
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+136]
  001a7	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax

; 508  : 	stoptimer = 0;

  001ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _stoptimer, 0

; 509  : 
; 510  : 	if (cutscenes[cutnum].scene[scenenum].musicslot != 0)

  001b6	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  001c0	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  001ca	83 bc 08 98 00
	00 00 00	 cmp	 DWORD PTR _cutscenes[eax+ecx+152], 0
  001d2	74 40		 je	 SHORT $LN3@F_StartCus

; 511  : 		S_ChangeMusic(cutscenes[cutnum].scene[scenenum].musicslot, cutscenes[cutnum].scene[scenenum].musicloop);

  001d4	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  001de	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  001e8	8b 94 08 9c 00
	00 00		 mov	 edx, DWORD PTR _cutscenes[eax+ecx+156]
  001ef	52		 push	 edx
  001f0	69 05 00 00 00
	00 04 52 00 00	 imul	 eax, DWORD PTR _cutnum, 20996
  001fa	69 0d 00 00 00
	00 a4 00 00 00	 imul	 ecx, DWORD PTR _scenenum, 164
  00204	8b 94 08 98 00
	00 00		 mov	 edx, DWORD PTR _cutscenes[eax+ecx+152]
  0020b	52		 push	 edx
  0020c	e8 00 00 00 00	 call	 _S_ChangeMusic
  00211	83 c4 08	 add	 esp, 8
$LN3@F_StartCus:

; 512  : }

  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c3		 ret	 0
_F_StartCustomCutscene ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_CreditDrawer
_TEXT	SEGMENT
tv71 = -68						; size = 4
_F_CreditDrawer PROC					; COMDAT

; 1658 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1659 : 	V_DrawFill(0, 0, vid.width, vid.height, 31);

  00009	6a 1f		 push	 31			; 0000001fH
  0000b	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00010	50		 push	 eax
  00011	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00017	51		 push	 ecx
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 _V_DrawFill
  00021	83 c4 14	 add	 esp, 20			; 00000014H

; 1660 : 
; 1661 : 	if (timetonext-- <= 0) // Fade to the next!

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00029	89 45 bc	 mov	 DWORD PTR tv71[ebp], eax
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _timetonext
  00032	83 e9 01	 sub	 ecx, 1
  00035	89 0d 00 00 00
	00		 mov	 DWORD PTR _timetonext, ecx
  0003b	83 7d bc 00	 cmp	 DWORD PTR tv71[ebp], 0
  0003f	0f 8f ad 00 00
	00		 jg	 $LN2@F_CreditDr

; 1662 : 	{
; 1663 : 		if (modcredits)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modcredits, 0
  0004c	74 0c		 je	 SHORT $LN4@F_CreditDr

; 1664 : 			timetonext = 165*NEWTICRATERATIO;

  0004e	c7 05 00 00 00
	00 a5 00 00 00	 mov	 DWORD PTR _timetonext, 165 ; 000000a5H
  00058	eb 0a		 jmp	 SHORT $LN5@F_CreditDr
$LN4@F_CreditDr:

; 1665 : 		else
; 1666 : 			timetonext = 5*TICRATE-1;

  0005a	c7 05 00 00 00
	00 ae 00 00 00	 mov	 DWORD PTR _timetonext, 174 ; 000000aeH
$LN5@F_CreditDr:

; 1667 : 
; 1668 : 		F_DrawCreditScreen(&credits[animtimer]);

  00064	69 05 00 00 00
	00 22 08 00 00	 imul	 eax, DWORD PTR _animtimer, 2082
  0006e	05 00 00 00 00	 add	 eax, OFFSET _credits
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _F_DrawCreditScreen
  00079	83 c4 04	 add	 esp, 4

; 1669 : 
; 1670 : 		animtimer++;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _animtimer
  00081	83 c0 01	 add	 eax, 1
  00084	a3 00 00 00 00	 mov	 DWORD PTR _animtimer, eax

; 1671 : 
; 1672 : 		if (rendermode != render_none)

  00089	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00090	74 5e		 je	 SHORT $LN6@F_CreditDr

; 1673 : 		{
; 1674 : 			F_WipeStartScreen();

  00092	e8 00 00 00 00	 call	 _F_WipeStartScreen
  00097	90		 npad	 1

; 1675 : 			V_DrawFill(0, 0, vid.width, vid.height, 31);

  00098	6a 1f		 push	 31			; 0000001fH
  0009a	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0009f	50		 push	 eax
  000a0	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  000a6	51		 push	 ecx
  000a7	6a 00		 push	 0
  000a9	6a 00		 push	 0
  000ab	e8 00 00 00 00	 call	 _V_DrawFill
  000b0	83 c4 14	 add	 esp, 20			; 00000014H

; 1676 : 			F_DrawCreditScreen(&credits[animtimer]);

  000b3	69 05 00 00 00
	00 22 08 00 00	 imul	 eax, DWORD PTR _animtimer, 2082
  000bd	05 00 00 00 00	 add	 eax, OFFSET _credits
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _F_DrawCreditScreen
  000c8	83 c4 04	 add	 esp, 4

; 1677 : 			F_WipeEndScreen(0, 0, vid.width, vid.height);

  000cb	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  000d0	50		 push	 eax
  000d1	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  000d7	51		 push	 ecx
  000d8	6a 00		 push	 0
  000da	6a 00		 push	 0
  000dc	e8 00 00 00 00	 call	 _F_WipeEndScreen
  000e1	83 c4 10	 add	 esp, 16			; 00000010H

; 1678 : 
; 1679 : 			F_RunWipe(TICRATE, true);

  000e4	6a 01		 push	 1
  000e6	6a 23		 push	 35			; 00000023H
  000e8	e8 00 00 00 00	 call	 _F_RunWipe
  000ed	83 c4 08	 add	 esp, 8
$LN6@F_CreditDr:

; 1680 : 		}
; 1681 : 	}

  000f0	eb 18		 jmp	 SHORT $LN3@F_CreditDr
$LN2@F_CreditDr:

; 1682 : 	else
; 1683 : 		F_DrawCreditScreen(&credits[animtimer]);

  000f2	69 05 00 00 00
	00 22 08 00 00	 imul	 eax, DWORD PTR _animtimer, 2082
  000fc	05 00 00 00 00	 add	 eax, OFFSET _credits
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _F_DrawCreditScreen
  00107	83 c4 04	 add	 esp, 4
$LN3@F_CreditDr:

; 1684 : }

  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
_F_CreditDrawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_CreditTicker
_TEXT	SEGMENT
_F_CreditTicker PROC					; COMDAT

; 678  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 679  : 	finalecount++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR _finalecount, eax

; 680  : 
; 681  : 	if (finalecount > 90*TICRATE)

  00016	81 3d 00 00 00
	00 4e 0c 00 00	 cmp	 DWORD PTR _finalecount, 3150 ; 00000c4eH
  00020	7e 06		 jle	 SHORT $LN2@F_CreditTi

; 682  : 		F_StartGameEvaluation();

  00022	e8 00 00 00 00	 call	 _F_StartGameEvaluation
  00027	90		 npad	 1
$LN2@F_CreditTi:

; 683  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_F_CreditTicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_GameEvaluationTicker
_TEXT	SEGMENT
_F_GameEvaluationTicker PROC				; COMDAT

; 670  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 671  : 	finalecount++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR _finalecount, eax

; 672  : 
; 673  : 	if (finalecount > 10*TICRATE)

  00016	81 3d 00 00 00
	00 5e 01 00 00	 cmp	 DWORD PTR _finalecount, 350 ; 0000015eH
  00020	7e 06		 jle	 SHORT $LN2@F_GameEval

; 674  : 		F_StartGameEnd();

  00022	e8 00 00 00 00	 call	 _F_StartGameEnd
  00027	90		 npad	 1
$LN2@F_GameEval:

; 675  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_F_GameEvaluationTicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_StartGameEvaluation
_TEXT	SEGMENT
_F_StartGameEvaluation PROC				; COMDAT

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 165  : 	G_SetGamestate(GS_EVALUATION);

  00009	6a 04		 push	 4
  0000b	e8 00 00 00 00	 call	 _G_SetGamestate
  00010	83 c4 04	 add	 esp, 4

; 166  : 
; 167  : 	gameaction = ga_nothing;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 168  : 	playerdeadview = false;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _playerdeadview, 0

; 169  : 	paused = false;

  00027	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 170  : 	CON_ToggleOff();

  0002e	e8 00 00 00 00	 call	 _CON_ToggleOff
  00033	90		 npad	 1

; 171  : 	CON_ClearHUD();

  00034	e8 00 00 00 00	 call	 _CON_ClearHUD
  00039	90		 npad	 1

; 172  : 
; 173  : 	if (ALL7EMERALDS(emeralds))

  0003a	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00041	83 e0 7f	 and	 eax, 127		; 0000007fH
  00044	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00047	75 0a		 jne	 SHORT $LN2@F_StartGam

; 174  : 		animtimer = 64;

  00049	c7 05 00 00 00
	00 40 00 00 00	 mov	 DWORD PTR _animtimer, 64 ; 00000040H
$LN2@F_StartGam:

; 175  : 
; 176  : 	finalecount = 0;

  00053	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finalecount, 0

; 177  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_F_StartGameEvaluation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_GameEvaluationDrawer
_TEXT	SEGMENT
_startcoord$1 = -40					; size = 4
_unlocked$2 = -36					; size = 4
_i$3 = -32						; size = 4
_i$4 = -28						; size = 4
_bitcount$5 = -24					; size = 4
_alreadyplayed$6 = -20					; size = 4
_fa$ = -16						; size = 4
_radius$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_F_GameEvaluationDrawer PROC				; COMDAT

; 1280 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1281 : 	INT32 x, y;
; 1282 : 	const fixed_t radius = 48*FRACUNIT;

  00009	c7 45 f4 00 00
	30 00		 mov	 DWORD PTR _radius$[ebp], 3145728 ; 00300000H

; 1283 : 	angle_t fa;
; 1284 : 
; 1285 : 	V_DrawFill(0, 0, vid.width, vid.height, 31);

  00010	6a 1f		 push	 31			; 0000001fH
  00012	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00017	50		 push	 eax
  00018	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0001e	51		 push	 ecx
  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	e8 00 00 00 00	 call	 _V_DrawFill
  00028	83 c4 14	 add	 esp, 20			; 00000014H

; 1286 : 
; 1287 : 	// Draw all the good crap here.
; 1288 : 	if (animtimer == 64)

  0002b	83 3d 00 00 00
	00 40		 cmp	 DWORD PTR _animtimer, 64 ; 00000040H
  00032	75 15		 jne	 SHORT $LN8@F_GameEval

; 1289 : 		V_DrawString(114, 16, 0, "GOT THEM ALL!");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PONKNMCD@GOT?5THEM?5ALL?$CB@
  00039	6a 00		 push	 0
  0003b	6a 10		 push	 16			; 00000010H
  0003d	6a 72		 push	 114			; 00000072H
  0003f	e8 00 00 00 00	 call	 _V_DrawString
  00044	83 c4 10	 add	 esp, 16			; 00000010H
  00047	eb 13		 jmp	 SHORT $LN9@F_GameEval
$LN8@F_GameEval:

; 1290 : 	else
; 1291 : 		V_DrawString(124, 16, 0, "TRY AGAIN!");

  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EDEMLEMF@TRY?5AGAIN?$CB@
  0004e	6a 00		 push	 0
  00050	6a 10		 push	 16			; 00000010H
  00052	6a 7c		 push	 124			; 0000007cH
  00054	e8 00 00 00 00	 call	 _V_DrawString
  00059	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@F_GameEval:

; 1292 : 
; 1293 : 	finalestage++;

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalestage
  00061	83 c0 01	 add	 eax, 1
  00064	a3 00 00 00 00	 mov	 DWORD PTR _finalestage, eax

; 1294 : 	timetonext = finalestage;

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalestage
  0006e	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax

; 1295 : 
; 1296 : 	fa = (FixedAngle(timetonext*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00078	c1 e0 10	 shl	 eax, 16			; 00000010H
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _FixedAngle
  00081	83 c4 04	 add	 esp, 4
  00084	c1 e8 13	 shr	 eax, 19			; 00000013H
  00087	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  0008c	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 1297 : 	x = 160 + FixedInt(FixedMul(FINECOSINE(fa),radius));

  0008f	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00092	50		 push	 eax
  00093	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0009c	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 _FixedMul
  000a5	83 c4 08	 add	 esp, 8
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _FixedInt
  000ae	83 c4 04	 add	 esp, 4
  000b1	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  000b6	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1298 : 	y = 100 + FixedInt(FixedMul(FINESINE(fa),radius));

  000b9	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  000c0	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _FixedMul
  000cd	83 c4 08	 add	 esp, 8
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _FixedInt
  000d6	83 c4 04	 add	 esp, 4
  000d9	83 c0 64	 add	 eax, 100		; 00000064H
  000dc	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1299 : 
; 1300 : 	if (emeralds & EMERALD1)

  000df	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  000e6	83 e0 01	 and	 eax, 1
  000e9	74 24		 je	 SHORT $LN10@F_GameEval

; 1301 : 		V_DrawScaledPatch(x, y, 0, W_CachePatchName("CEMGA0", PU_CACHE));

  000eb	6a 65		 push	 101			; 00000065H
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_06EAFLPJMC@CEMGA0@
  000f2	e8 00 00 00 00	 call	 _W_CachePatchName
  000f7	83 c4 08	 add	 esp, 8
  000fa	50		 push	 eax
  000fb	6a 00		 push	 0
  000fd	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00100	50		 push	 eax
  00101	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0010a	83 c4 10	 add	 esp, 16			; 00000010H
  0010d	eb 25		 jmp	 SHORT $LN11@F_GameEval
$LN10@F_GameEval:

; 1302 : 	else
; 1303 : 		V_DrawTranslucentPatch(x, y, TRANSLEVEL|V_TOPLEFT, W_CachePatchName("CEMGA0", PU_CACHE));

  0010f	6a 65		 push	 101			; 00000065H
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_06EAFLPJMC@CEMGA0@
  00116	e8 00 00 00 00	 call	 _W_CachePatchName
  0011b	83 c4 08	 add	 esp, 8
  0011e	50		 push	 eax
  0011f	68 00 00 00 14	 push	 335544320		; 14000000H
  00124	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00127	50		 push	 eax
  00128	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0012b	51		 push	 ecx
  0012c	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  00131	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@F_GameEval:

; 1304 : 
; 1305 : 	timetonext += INTERVAL;

  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00139	83 c0 32	 add	 eax, 50			; 00000032H
  0013c	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax

; 1306 : 
; 1307 : 	fa = (FixedAngle(timetonext*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00146	c1 e0 10	 shl	 eax, 16			; 00000010H
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 _FixedAngle
  0014f	83 c4 04	 add	 esp, 4
  00152	c1 e8 13	 shr	 eax, 19			; 00000013H
  00155	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  0015a	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 1308 : 	x = 160 + FixedInt(FixedMul(FINECOSINE(fa),radius));

  0015d	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00160	50		 push	 eax
  00161	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00164	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0016a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 _FixedMul
  00173	83 c4 08	 add	 esp, 8
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _FixedInt
  0017c	83 c4 04	 add	 esp, 4
  0017f	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00184	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1309 : 	y = 100 + FixedInt(FixedMul(FINESINE(fa),radius));

  00187	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  0018a	50		 push	 eax
  0018b	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  0018e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 _FixedMul
  0019b	83 c4 08	 add	 esp, 8
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _FixedInt
  001a4	83 c4 04	 add	 esp, 4
  001a7	83 c0 64	 add	 eax, 100		; 00000064H
  001aa	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1310 : 
; 1311 : 	if (emeralds & EMERALD2)

  001ad	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  001b4	83 e0 02	 and	 eax, 2
  001b7	74 24		 je	 SHORT $LN12@F_GameEval

; 1312 : 		V_DrawScaledPatch(x, y, 0, W_CachePatchName("CEMGB0", PU_CACHE));

  001b9	6a 65		 push	 101			; 00000065H
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_06ECBNEHJL@CEMGB0@
  001c0	e8 00 00 00 00	 call	 _W_CachePatchName
  001c5	83 c4 08	 add	 esp, 8
  001c8	50		 push	 eax
  001c9	6a 00		 push	 0
  001cb	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001ce	50		 push	 eax
  001cf	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  001d2	51		 push	 ecx
  001d3	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001d8	83 c4 10	 add	 esp, 16			; 00000010H
  001db	eb 25		 jmp	 SHORT $LN13@F_GameEval
$LN12@F_GameEval:

; 1313 : 	else
; 1314 : 		V_DrawTranslucentPatch(x, y, TRANSLEVEL|V_TOPLEFT, W_CachePatchName("CEMGB0", PU_CACHE));

  001dd	6a 65		 push	 101			; 00000065H
  001df	68 00 00 00 00	 push	 OFFSET ??_C@_06ECBNEHJL@CEMGB0@
  001e4	e8 00 00 00 00	 call	 _W_CachePatchName
  001e9	83 c4 08	 add	 esp, 8
  001ec	50		 push	 eax
  001ed	68 00 00 00 14	 push	 335544320		; 14000000H
  001f2	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001f5	50		 push	 eax
  001f6	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  001f9	51		 push	 ecx
  001fa	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  001ff	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@F_GameEval:

; 1315 : 
; 1316 : 	timetonext += INTERVAL;

  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00207	83 c0 32	 add	 eax, 50			; 00000032H
  0020a	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax

; 1317 : 
; 1318 : 	fa = (FixedAngle(timetonext*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00214	c1 e0 10	 shl	 eax, 16			; 00000010H
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 _FixedAngle
  0021d	83 c4 04	 add	 esp, 4
  00220	c1 e8 13	 shr	 eax, 19			; 00000013H
  00223	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  00228	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 1319 : 	x = 160 + FixedInt(FixedMul(FINECOSINE(fa),radius));

  0022b	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  0022e	50		 push	 eax
  0022f	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00232	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00238	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 _FixedMul
  00241	83 c4 08	 add	 esp, 8
  00244	50		 push	 eax
  00245	e8 00 00 00 00	 call	 _FixedInt
  0024a	83 c4 04	 add	 esp, 4
  0024d	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00252	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1320 : 	y = 100 + FixedInt(FixedMul(FINESINE(fa),radius));

  00255	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00258	50		 push	 eax
  00259	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  0025c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00263	52		 push	 edx
  00264	e8 00 00 00 00	 call	 _FixedMul
  00269	83 c4 08	 add	 esp, 8
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 _FixedInt
  00272	83 c4 04	 add	 esp, 4
  00275	83 c0 64	 add	 eax, 100		; 00000064H
  00278	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1321 : 
; 1322 : 	if (emeralds & EMERALD3)

  0027b	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00282	83 e0 04	 and	 eax, 4
  00285	74 24		 je	 SHORT $LN14@F_GameEval

; 1323 : 		V_DrawScaledPatch(x, y, 0, W_CachePatchName("CEMGC0", PU_CACHE));

  00287	6a 65		 push	 101			; 00000065H
  00289	68 00 00 00 00	 push	 OFFSET ??_C@_06EDNPCNKM@CEMGC0@
  0028e	e8 00 00 00 00	 call	 _W_CachePatchName
  00293	83 c4 08	 add	 esp, 8
  00296	50		 push	 eax
  00297	6a 00		 push	 0
  00299	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0029c	50		 push	 eax
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002a0	51		 push	 ecx
  002a1	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  002a6	83 c4 10	 add	 esp, 16			; 00000010H
  002a9	eb 25		 jmp	 SHORT $LN15@F_GameEval
$LN14@F_GameEval:

; 1324 : 	else
; 1325 : 		V_DrawTranslucentPatch(x, y, TRANSLEVEL|V_TOPLEFT, W_CachePatchName("CEMGC0", PU_CACHE));

  002ab	6a 65		 push	 101			; 00000065H
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_06EDNPCNKM@CEMGC0@
  002b2	e8 00 00 00 00	 call	 _W_CachePatchName
  002b7	83 c4 08	 add	 esp, 8
  002ba	50		 push	 eax
  002bb	68 00 00 00 14	 push	 335544320		; 14000000H
  002c0	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002c3	50		 push	 eax
  002c4	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002c7	51		 push	 ecx
  002c8	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  002cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@F_GameEval:

; 1326 : 
; 1327 : 	timetonext += INTERVAL;

  002d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  002d5	83 c0 32	 add	 eax, 50			; 00000032H
  002d8	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax

; 1328 : 
; 1329 : 	fa = (FixedAngle(timetonext*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  002dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  002e2	c1 e0 10	 shl	 eax, 16			; 00000010H
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 _FixedAngle
  002eb	83 c4 04	 add	 esp, 4
  002ee	c1 e8 13	 shr	 eax, 19			; 00000013H
  002f1	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  002f6	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 1330 : 	x = 160 + FixedInt(FixedMul(FINECOSINE(fa),radius));

  002f9	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  002fc	50		 push	 eax
  002fd	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00300	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00306	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 _FixedMul
  0030f	83 c4 08	 add	 esp, 8
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 _FixedInt
  00318	83 c4 04	 add	 esp, 4
  0031b	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00320	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1331 : 	y = 100 + FixedInt(FixedMul(FINESINE(fa),radius));

  00323	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00326	50		 push	 eax
  00327	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  0032a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00331	52		 push	 edx
  00332	e8 00 00 00 00	 call	 _FixedMul
  00337	83 c4 08	 add	 esp, 8
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 _FixedInt
  00340	83 c4 04	 add	 esp, 4
  00343	83 c0 64	 add	 eax, 100		; 00000064H
  00346	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1332 : 
; 1333 : 	if (emeralds & EMERALD4)

  00349	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00350	83 e0 08	 and	 eax, 8
  00353	74 24		 je	 SHORT $LN16@F_GameEval

; 1334 : 		V_DrawScaledPatch(x, y, 0, W_CachePatchName("CEMGD0", PU_CACHE));

  00355	6a 65		 push	 101			; 00000065H
  00357	68 00 00 00 00	 push	 OFFSET ??_C@_06EGJADLCJ@CEMGD0@
  0035c	e8 00 00 00 00	 call	 _W_CachePatchName
  00361	83 c4 08	 add	 esp, 8
  00364	50		 push	 eax
  00365	6a 00		 push	 0
  00367	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0036a	50		 push	 eax
  0036b	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0036e	51		 push	 ecx
  0036f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00374	83 c4 10	 add	 esp, 16			; 00000010H
  00377	eb 25		 jmp	 SHORT $LN17@F_GameEval
$LN16@F_GameEval:

; 1335 : 	else
; 1336 : 		V_DrawTranslucentPatch(x, y, TRANSLEVEL|V_TOPLEFT, W_CachePatchName("CEMGD0", PU_CACHE));

  00379	6a 65		 push	 101			; 00000065H
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_06EGJADLCJ@CEMGD0@
  00380	e8 00 00 00 00	 call	 _W_CachePatchName
  00385	83 c4 08	 add	 esp, 8
  00388	50		 push	 eax
  00389	68 00 00 00 14	 push	 335544320		; 14000000H
  0038e	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00391	50		 push	 eax
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00395	51		 push	 ecx
  00396	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0039b	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@F_GameEval:

; 1337 : 
; 1338 : 	timetonext += INTERVAL;

  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  003a3	83 c0 32	 add	 eax, 50			; 00000032H
  003a6	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax

; 1339 : 
; 1340 : 	fa = (FixedAngle(timetonext*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  003ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  003b0	c1 e0 10	 shl	 eax, 16			; 00000010H
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 _FixedAngle
  003b9	83 c4 04	 add	 esp, 4
  003bc	c1 e8 13	 shr	 eax, 19			; 00000013H
  003bf	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  003c4	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 1341 : 	x = 160 + FixedInt(FixedMul(FINECOSINE(fa),radius));

  003c7	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  003ca	50		 push	 eax
  003cb	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  003ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  003d4	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  003d7	50		 push	 eax
  003d8	e8 00 00 00 00	 call	 _FixedMul
  003dd	83 c4 08	 add	 esp, 8
  003e0	50		 push	 eax
  003e1	e8 00 00 00 00	 call	 _FixedInt
  003e6	83 c4 04	 add	 esp, 4
  003e9	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  003ee	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1342 : 	y = 100 + FixedInt(FixedMul(FINESINE(fa),radius));

  003f1	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  003f4	50		 push	 eax
  003f5	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  003f8	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  003ff	52		 push	 edx
  00400	e8 00 00 00 00	 call	 _FixedMul
  00405	83 c4 08	 add	 esp, 8
  00408	50		 push	 eax
  00409	e8 00 00 00 00	 call	 _FixedInt
  0040e	83 c4 04	 add	 esp, 4
  00411	83 c0 64	 add	 eax, 100		; 00000064H
  00414	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1343 : 
; 1344 : 	if (emeralds & EMERALD5)

  00417	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0041e	83 e0 10	 and	 eax, 16			; 00000010H
  00421	74 24		 je	 SHORT $LN18@F_GameEval

; 1345 : 		V_DrawScaledPatch(x, y, 0, W_CachePatchName("CEMGE0", PU_CACHE));

  00423	6a 65		 push	 101			; 00000065H
  00425	68 00 00 00 00	 push	 OFFSET ??_C@_06EHFCFBBO@CEMGE0@
  0042a	e8 00 00 00 00	 call	 _W_CachePatchName
  0042f	83 c4 08	 add	 esp, 8
  00432	50		 push	 eax
  00433	6a 00		 push	 0
  00435	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00438	50		 push	 eax
  00439	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0043c	51		 push	 ecx
  0043d	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00442	83 c4 10	 add	 esp, 16			; 00000010H
  00445	eb 25		 jmp	 SHORT $LN19@F_GameEval
$LN18@F_GameEval:

; 1346 : 	else
; 1347 : 		V_DrawTranslucentPatch(x, y, TRANSLEVEL|V_TOPLEFT, W_CachePatchName("CEMGE0", PU_CACHE));

  00447	6a 65		 push	 101			; 00000065H
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_06EHFCFBBO@CEMGE0@
  0044e	e8 00 00 00 00	 call	 _W_CachePatchName
  00453	83 c4 08	 add	 esp, 8
  00456	50		 push	 eax
  00457	68 00 00 00 14	 push	 335544320		; 14000000H
  0045c	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0045f	50		 push	 eax
  00460	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00463	51		 push	 ecx
  00464	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  00469	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@F_GameEval:

; 1348 : 
; 1349 : 	timetonext += INTERVAL;

  0046c	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00471	83 c0 32	 add	 eax, 50			; 00000032H
  00474	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax

; 1350 : 
; 1351 : 	fa = (FixedAngle(timetonext*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  00479	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  0047e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00481	50		 push	 eax
  00482	e8 00 00 00 00	 call	 _FixedAngle
  00487	83 c4 04	 add	 esp, 4
  0048a	c1 e8 13	 shr	 eax, 19			; 00000013H
  0048d	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  00492	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 1352 : 	x = 160 + FixedInt(FixedMul(FINECOSINE(fa),radius));

  00495	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00498	50		 push	 eax
  00499	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  0049c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  004a2	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  004a5	50		 push	 eax
  004a6	e8 00 00 00 00	 call	 _FixedMul
  004ab	83 c4 08	 add	 esp, 8
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 _FixedInt
  004b4	83 c4 04	 add	 esp, 4
  004b7	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  004bc	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1353 : 	y = 100 + FixedInt(FixedMul(FINESINE(fa),radius));

  004bf	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  004c2	50		 push	 eax
  004c3	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  004c6	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  004cd	52		 push	 edx
  004ce	e8 00 00 00 00	 call	 _FixedMul
  004d3	83 c4 08	 add	 esp, 8
  004d6	50		 push	 eax
  004d7	e8 00 00 00 00	 call	 _FixedInt
  004dc	83 c4 04	 add	 esp, 4
  004df	83 c0 64	 add	 eax, 100		; 00000064H
  004e2	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1354 : 
; 1355 : 	if (emeralds & EMERALD6)

  004e5	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  004ec	83 e0 20	 and	 eax, 32			; 00000020H
  004ef	74 24		 je	 SHORT $LN20@F_GameEval

; 1356 : 		V_DrawScaledPatch(x, y, 0, W_CachePatchName("CEMGF0", PU_CACHE));

  004f1	6a 65		 push	 101			; 00000065H
  004f3	68 00 00 00 00	 push	 OFFSET ??_C@_06EFBEOPEH@CEMGF0@
  004f8	e8 00 00 00 00	 call	 _W_CachePatchName
  004fd	83 c4 08	 add	 esp, 8
  00500	50		 push	 eax
  00501	6a 00		 push	 0
  00503	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00506	50		 push	 eax
  00507	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0050a	51		 push	 ecx
  0050b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00510	83 c4 10	 add	 esp, 16			; 00000010H
  00513	eb 25		 jmp	 SHORT $LN21@F_GameEval
$LN20@F_GameEval:

; 1357 : 	else
; 1358 : 		V_DrawTranslucentPatch(x, y, TRANSLEVEL|V_TOPLEFT, W_CachePatchName("CEMGF0", PU_CACHE));

  00515	6a 65		 push	 101			; 00000065H
  00517	68 00 00 00 00	 push	 OFFSET ??_C@_06EFBEOPEH@CEMGF0@
  0051c	e8 00 00 00 00	 call	 _W_CachePatchName
  00521	83 c4 08	 add	 esp, 8
  00524	50		 push	 eax
  00525	68 00 00 00 14	 push	 335544320		; 14000000H
  0052a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0052d	50		 push	 eax
  0052e	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00531	51		 push	 ecx
  00532	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  00537	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@F_GameEval:

; 1359 : 
; 1360 : 	timetonext += INTERVAL;

  0053a	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  0053f	83 c0 32	 add	 eax, 50			; 00000032H
  00542	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax

; 1361 : 
; 1362 : 	fa = (FixedAngle(timetonext*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  00547	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  0054c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0054f	50		 push	 eax
  00550	e8 00 00 00 00	 call	 _FixedAngle
  00555	83 c4 04	 add	 esp, 4
  00558	c1 e8 13	 shr	 eax, 19			; 00000013H
  0055b	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  00560	89 45 f0	 mov	 DWORD PTR _fa$[ebp], eax

; 1363 : 	x = 160 + FixedInt(FixedMul(FINECOSINE(fa),radius));

  00563	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00566	50		 push	 eax
  00567	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  0056a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00570	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00573	50		 push	 eax
  00574	e8 00 00 00 00	 call	 _FixedMul
  00579	83 c4 08	 add	 esp, 8
  0057c	50		 push	 eax
  0057d	e8 00 00 00 00	 call	 _FixedInt
  00582	83 c4 04	 add	 esp, 4
  00585	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  0058a	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1364 : 	y = 100 + FixedInt(FixedMul(FINESINE(fa),radius));

  0058d	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00590	50		 push	 eax
  00591	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00594	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  0059b	52		 push	 edx
  0059c	e8 00 00 00 00	 call	 _FixedMul
  005a1	83 c4 08	 add	 esp, 8
  005a4	50		 push	 eax
  005a5	e8 00 00 00 00	 call	 _FixedInt
  005aa	83 c4 04	 add	 esp, 4
  005ad	83 c0 64	 add	 eax, 100		; 00000064H
  005b0	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1365 : 
; 1366 : 	if (emeralds & EMERALD7)

  005b3	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  005ba	83 e0 40	 and	 eax, 64			; 00000040H
  005bd	74 24		 je	 SHORT $LN22@F_GameEval

; 1367 : 		V_DrawScaledPatch(x, y, 0, W_CachePatchName("CEMGG0", PU_CACHE));

  005bf	6a 65		 push	 101			; 00000065H
  005c1	68 00 00 00 00	 push	 OFFSET ??_C@_06EENGIFHA@CEMGG0@
  005c6	e8 00 00 00 00	 call	 _W_CachePatchName
  005cb	83 c4 08	 add	 esp, 8
  005ce	50		 push	 eax
  005cf	6a 00		 push	 0
  005d1	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  005d4	50		 push	 eax
  005d5	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  005d8	51		 push	 ecx
  005d9	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  005de	83 c4 10	 add	 esp, 16			; 00000010H
  005e1	eb 25		 jmp	 SHORT $LN23@F_GameEval
$LN22@F_GameEval:

; 1368 : 	else
; 1369 : 		V_DrawTranslucentPatch(x, y, TRANSLEVEL|V_TOPLEFT, W_CachePatchName("CEMGG0", PU_CACHE));

  005e3	6a 65		 push	 101			; 00000065H
  005e5	68 00 00 00 00	 push	 OFFSET ??_C@_06EENGIFHA@CEMGG0@
  005ea	e8 00 00 00 00	 call	 _W_CachePatchName
  005ef	83 c4 08	 add	 esp, 8
  005f2	50		 push	 eax
  005f3	68 00 00 00 14	 push	 335544320		; 14000000H
  005f8	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  005fb	50		 push	 eax
  005fc	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  005ff	51		 push	 ecx
  00600	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  00605	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@F_GameEval:

; 1370 : 
; 1371 : 	if (finalestage >= 360)

  00608	81 3d 00 00 00
	00 68 01 00 00	 cmp	 DWORD PTR _finalestage, 360 ; 00000168H
  00612	7c 0f		 jl	 SHORT $LN24@F_GameEval

; 1372 : 		finalestage -= 360;

  00614	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalestage
  00619	2d 68 01 00 00	 sub	 eax, 360		; 00000168H
  0061e	a3 00 00 00 00	 mov	 DWORD PTR _finalestage, eax
$LN24@F_GameEval:

; 1373 : 
; 1374 : 	if (finalecount == 5*TICRATE)

  00623	81 3d 00 00 00
	00 af 00 00 00	 cmp	 DWORD PTR _finalecount, 175 ; 000000afH
  0062d	0f 85 2d 02 00
	00		 jne	 $LN42@F_GameEval

; 1375 : 	{
; 1376 : 		if ((!modifiedgame || savemoddata) && !(netgame || multiplayer) && mapheaderinfo[gamemap-1].nextlevel == 1102)

  00633	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  0063a	74 0d		 je	 SHORT $LN27@F_GameEval
  0063c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00643	0f 84 17 02 00
	00		 je	 $LN42@F_GameEval
$LN27@F_GameEval:
  00649	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00650	0f 85 0a 02 00
	00		 jne	 $LN42@F_GameEval
  00656	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0065d	0f 85 fd 01 00
	00		 jne	 $LN42@F_GameEval
  00663	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0066a	83 e8 01	 sub	 eax, 1
  0066d	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00673	0f bf 91 46 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+70]
  0067a	81 fa 4e 04 00
	00		 cmp	 edx, 1102		; 0000044eH
  00680	0f 85 da 01 00
	00		 jne	 $LN42@F_GameEval

; 1377 : 		{
; 1378 : 			boolean alreadyplayed = false;

  00686	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _alreadyplayed$6[ebp], 0

; 1379 : 			INT32 bitcount = 0;

  0068d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bitcount$5[ebp], 0

; 1380 : 			INT32 i;
; 1381 : 
; 1382 : 			if (!(emblemlocations[MAXEMBLEMS-2].collected))

  00694	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00699	69 c8 fe 01 00
	00		 imul	 ecx, eax, 510
  0069f	0f b6 91 0a 00
	00 00		 movzx	 edx, BYTE PTR _emblemlocations[ecx+10]
  006a6	85 d2		 test	 edx, edx
  006a8	75 2f		 jne	 SHORT $LN28@F_GameEval

; 1383 : 			{
; 1384 : 				emblemlocations[MAXEMBLEMS-2].collected = true; // For completing the game.

  006aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006af	69 c8 fe 01 00
	00		 imul	 ecx, eax, 510
  006b5	c6 81 0a 00 00
	00 01		 mov	 BYTE PTR _emblemlocations[ecx+10], 1

; 1385 : 				S_StartSound(NULL, sfx_ncitem);

  006bc	6a 6b		 push	 107			; 0000006bH
  006be	6a 00		 push	 0
  006c0	e8 00 00 00 00	 call	 _S_StartSound
  006c5	83 c4 08	 add	 esp, 8

; 1386 : 				alreadyplayed = true;

  006c8	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _alreadyplayed$6[ebp], 1

; 1387 : 				drawemblem = true;

  006cf	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _drawemblem, 1
$LN28@F_GameEval:

; 1388 : 			}
; 1389 : 
; 1390 : 			if (ALL7EMERALDS(emeralds))

  006d9	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  006e0	83 e0 7f	 and	 eax, 127		; 0000007fH
  006e3	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  006e6	75 51		 jne	 SHORT $LN29@F_GameEval

; 1391 : 			{
; 1392 : 				if (!(emblemlocations[MAXEMBLEMS-1].collected))

  006e8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006ed	69 c8 ff 01 00
	00		 imul	 ecx, eax, 511
  006f3	0f b6 91 0a 00
	00 00		 movzx	 edx, BYTE PTR _emblemlocations[ecx+10]
  006fa	85 d2		 test	 edx, edx
  006fc	75 2e		 jne	 SHORT $LN30@F_GameEval

; 1393 : 				{
; 1394 : 					emblemlocations[MAXEMBLEMS-1].collected = true;

  006fe	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00703	69 c8 ff 01 00
	00		 imul	 ecx, eax, 511
  00709	c6 81 0a 00 00
	00 01		 mov	 BYTE PTR _emblemlocations[ecx+10], 1

; 1395 : 
; 1396 : 					if (!alreadyplayed)

  00710	83 7d ec 00	 cmp	 DWORD PTR _alreadyplayed$6[ebp], 0
  00714	75 0c		 jne	 SHORT $LN31@F_GameEval

; 1397 : 						S_StartSound(NULL, sfx_ncitem);

  00716	6a 6b		 push	 107			; 0000006bH
  00718	6a 00		 push	 0
  0071a	e8 00 00 00 00	 call	 _S_StartSound
  0071f	83 c4 08	 add	 esp, 8
$LN31@F_GameEval:

; 1398 : 
; 1399 : 					drawchaosemblem = true;

  00722	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _drawchaosemblem, 1
$LN30@F_GameEval:

; 1400 : 				}
; 1401 : 				grade |= 2; // Now you can access Mario!

  0072c	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00731	83 c8 02	 or	 eax, 2
  00734	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN29@F_GameEval:

; 1402 : 			}
; 1403 : 
; 1404 : 			for (i = 0; i < MAXEMBLEMS; i++)

  00739	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  00740	eb 09		 jmp	 SHORT $LN4@F_GameEval
$LN2@F_GameEval:
  00742	8b 45 e4	 mov	 eax, DWORD PTR _i$4[ebp]
  00745	83 c0 01	 add	 eax, 1
  00748	89 45 e4	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@F_GameEval:
  0074b	81 7d e4 00 02
	00 00		 cmp	 DWORD PTR _i$4[ebp], 512 ; 00000200H
  00752	7d 1a		 jge	 SHORT $LN3@F_GameEval

; 1405 : 			{
; 1406 : 				if (emblemlocations[i].collected)

  00754	6b 45 e4 0c	 imul	 eax, DWORD PTR _i$4[ebp], 12
  00758	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+10]
  0075f	85 c9		 test	 ecx, ecx
  00761	74 09		 je	 SHORT $LN32@F_GameEval

; 1407 : 					bitcount++;

  00763	8b 45 e8	 mov	 eax, DWORD PTR _bitcount$5[ebp]
  00766	83 c0 01	 add	 eax, 1
  00769	89 45 e8	 mov	 DWORD PTR _bitcount$5[ebp], eax
$LN32@F_GameEval:

; 1408 : 			}

  0076c	eb d4		 jmp	 SHORT $LN2@F_GameEval
$LN3@F_GameEval:

; 1409 : 
; 1410 : 
; 1411 : 			if (bitcount >= numemblems/2) // Got half of the emblems

  0076e	a1 00 00 00 00	 mov	 eax, DWORD PTR _numemblems
  00773	99		 cdq
  00774	2b c2		 sub	 eax, edx
  00776	d1 f8		 sar	 eax, 1
  00778	39 45 e8	 cmp	 DWORD PTR _bitcount$5[ebp], eax
  0077b	7c 0d		 jl	 SHORT $LN33@F_GameEval

; 1412 : 				grade |= 4;

  0077d	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00782	83 c8 04	 or	 eax, 4
  00785	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN33@F_GameEval:

; 1413 : 
; 1414 : 			if (bitcount >= numemblems/4) // NiGHTS

  0078a	a1 00 00 00 00	 mov	 eax, DWORD PTR _numemblems
  0078f	99		 cdq
  00790	83 e2 03	 and	 edx, 3
  00793	03 c2		 add	 eax, edx
  00795	c1 f8 02	 sar	 eax, 2
  00798	39 45 e8	 cmp	 DWORD PTR _bitcount$5[ebp], eax
  0079b	7c 0d		 jl	 SHORT $LN34@F_GameEval

; 1415 : 				grade |= 16;

  0079d	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  007a2	83 c8 10	 or	 eax, 16			; 00000010H
  007a5	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN34@F_GameEval:

; 1416 : 
; 1417 : 			if (bitcount == numemblems) // Got ALL emblems!

  007aa	8b 45 e8	 mov	 eax, DWORD PTR _bitcount$5[ebp]
  007ad	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numemblems
  007b3	75 0d		 jne	 SHORT $LN35@F_GameEval

; 1418 : 				grade |= 8;

  007b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  007ba	83 c8 08	 or	 eax, 8
  007bd	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN35@F_GameEval:

; 1419 : 
; 1420 : 			grade |= 1; // Just for completing the game.

  007c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  007c7	83 c8 01	 or	 eax, 1
  007ca	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax

; 1421 : 
; 1422 : 			timesbeaten++;

  007cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _timesbeaten
  007d4	83 c0 01	 add	 eax, 1
  007d7	a3 00 00 00 00	 mov	 DWORD PTR _timesbeaten, eax

; 1423 : 
; 1424 : 			// An award for beating ultimate mode, perhaps?
; 1425 : 			if (ultimatemode)

  007dc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  007e3	85 c0		 test	 eax, eax
  007e5	74 0f		 je	 SHORT $LN36@F_GameEval

; 1426 : 				grade |= 256;

  007e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  007ec	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  007f1	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN36@F_GameEval:

; 1427 : 
; 1428 : 			// Other unlockables
; 1429 : 			if (gamemap == 29) // Cleared NiGHTS

  007f6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  007fd	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  00800	75 0f		 jne	 SHORT $LN37@F_GameEval

; 1430 : 				grade |= 64;

  00802	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00807	83 c8 40	 or	 eax, 64			; 00000040H
  0080a	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
  0080f	eb 38		 jmp	 SHORT $LN41@F_GameEval
$LN37@F_GameEval:

; 1431 : 			else if (gamemap == 32) // Cleared Mario

  00811	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00818	83 f8 20	 cmp	 eax, 32			; 00000020H
  0081b	75 0f		 jne	 SHORT $LN39@F_GameEval

; 1432 : 				grade |= 32;

  0081d	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00822	83 c8 20	 or	 eax, 32			; 00000020H
  00825	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
  0082a	eb 1d		 jmp	 SHORT $LN41@F_GameEval
$LN39@F_GameEval:

; 1433 : 			else if (gamemap == 132) // Cleared SRB1

  0082c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00833	3d 84 00 00 00	 cmp	 eax, 132		; 00000084H
  00838	75 0f		 jne	 SHORT $LN41@F_GameEval

; 1434 : 				grade |= 1024;

  0083a	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0083f	0d 00 04 00 00	 or	 eax, 1024		; 00000400H
  00844	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN41@F_GameEval:

; 1435 : 
; 1436 : 			if (cursaveslot != -1)

  00849	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _cursaveslot, -1
  00850	74 0e		 je	 SHORT $LN42@F_GameEval

; 1437 : 				G_SaveGame((UINT32)cursaveslot);

  00852	a1 00 00 00 00	 mov	 eax, DWORD PTR _cursaveslot
  00857	50		 push	 eax
  00858	e8 00 00 00 00	 call	 _G_SaveGame
  0085d	83 c4 04	 add	 esp, 4
$LN42@F_GameEval:

; 1438 : 		}
; 1439 : 	}
; 1440 : 
; 1441 : 	G_SaveGameData();

  00860	e8 00 00 00 00	 call	 _G_SaveGameData
  00865	90		 npad	 1

; 1442 : 
; 1443 : 	if (finalecount >= 5*TICRATE)

  00866	81 3d 00 00 00
	00 af 00 00 00	 cmp	 DWORD PTR _finalecount, 175 ; 000000afH
  00870	0f 8c 46 02 00
	00		 jl	 $LN61@F_GameEval

; 1444 : 	{
; 1445 : 		if (drawemblem)

  00876	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _drawemblem, 0
  0087d	74 21		 je	 SHORT $LN44@F_GameEval

; 1446 : 			V_DrawScaledPatch(120, 192, 0, W_CachePatchName("NWNGA0", PU_CACHE));

  0087f	6a 65		 push	 101			; 00000065H
  00881	68 00 00 00 00	 push	 OFFSET ??_C@_06CIDCEBEC@NWNGA0@
  00886	e8 00 00 00 00	 call	 _W_CachePatchName
  0088b	83 c4 08	 add	 esp, 8
  0088e	50		 push	 eax
  0088f	6a 00		 push	 0
  00891	68 c0 00 00 00	 push	 192			; 000000c0H
  00896	6a 78		 push	 120			; 00000078H
  00898	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0089d	83 c4 10	 add	 esp, 16			; 00000010H
$LN44@F_GameEval:

; 1447 : 
; 1448 : 		if (drawchaosemblem)

  008a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _drawchaosemblem, 0
  008a7	74 24		 je	 SHORT $LN45@F_GameEval

; 1449 : 			V_DrawScaledPatch(200, 192, 0, W_CachePatchName("NWNGA0", PU_CACHE));

  008a9	6a 65		 push	 101			; 00000065H
  008ab	68 00 00 00 00	 push	 OFFSET ??_C@_06CIDCEBEC@NWNGA0@
  008b0	e8 00 00 00 00	 call	 _W_CachePatchName
  008b5	83 c4 08	 add	 esp, 8
  008b8	50		 push	 eax
  008b9	6a 00		 push	 0
  008bb	68 c0 00 00 00	 push	 192			; 000000c0H
  008c0	68 c8 00 00 00	 push	 200			; 000000c8H
  008c5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  008ca	83 c4 10	 add	 esp, 16			; 00000010H
$LN45@F_GameEval:

; 1450 : 
; 1451 : 		V_DrawString(8, 16, V_YELLOWMAP, "Unlocked:");

  008cd	68 00 00 00 00	 push	 OFFSET ??_C@_09CLFOIIFH@Unlocked?3@
  008d2	68 00 00 10 00	 push	 1048576			; 00100000H
  008d7	6a 10		 push	 16			; 00000010H
  008d9	6a 08		 push	 8
  008db	e8 00 00 00 00	 call	 _V_DrawString
  008e0	83 c4 10	 add	 esp, 16			; 00000010H

; 1452 : 
; 1453 : 		if (savemoddata)

  008e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  008ea	0f 84 fb 00 00
	00		 je	 $LN46@F_GameEval

; 1454 : 		{
; 1455 : 			INT32 i;
; 1456 : 			boolean unlocked;
; 1457 : 			INT32 startcoord = 32;

  008f0	c7 45 d8 20 00
	00 00		 mov	 DWORD PTR _startcoord$1[ebp], 32 ; 00000020H

; 1458 : 
; 1459 : 			for (i = 0; i < 15; i++)

  008f7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  008fe	eb 09		 jmp	 SHORT $LN7@F_GameEval
$LN5@F_GameEval:
  00900	8b 45 e0	 mov	 eax, DWORD PTR _i$3[ebp]
  00903	83 c0 01	 add	 eax, 1
  00906	89 45 e0	 mov	 DWORD PTR _i$3[ebp], eax
$LN7@F_GameEval:
  00909	83 7d e0 0f	 cmp	 DWORD PTR _i$3[ebp], 15	; 0000000fH
  0090d	0f 8d d3 00 00
	00		 jge	 $LN6@F_GameEval

; 1460 : 			{
; 1461 : 				unlocked = false;

  00913	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _unlocked$2[ebp], 0

; 1462 : 
; 1463 : 				if (customsecretinfo[i].neededemblems)

  0091a	69 45 e0 94 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 148
  00921	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+132], 0
  00928	74 4a		 je	 SHORT $LN48@F_GameEval

; 1464 : 				{
; 1465 : 					unlocked = M_GotEnoughEmblems(customsecretinfo[i].neededemblems);

  0092a	69 45 e0 94 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 148
  00931	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+132]
  00937	51		 push	 ecx
  00938	e8 00 00 00 00	 call	 _M_GotEnoughEmblems
  0093d	83 c4 04	 add	 esp, 4
  00940	89 45 dc	 mov	 DWORD PTR _unlocked$2[ebp], eax

; 1466 : 
; 1467 : 					if (unlocked && customsecretinfo[i].neededtime)

  00943	83 7d dc 00	 cmp	 DWORD PTR _unlocked$2[ebp], 0
  00947	74 29		 je	 SHORT $LN50@F_GameEval
  00949	69 45 e0 94 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 148
  00950	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+136], 0
  00957	74 19		 je	 SHORT $LN50@F_GameEval

; 1468 : 						unlocked = M_GotLowEnoughTime(customsecretinfo[i].neededtime);

  00959	69 45 e0 94 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 148
  00960	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+136]
  00966	51		 push	 ecx
  00967	e8 00 00 00 00	 call	 _M_GotLowEnoughTime
  0096c	83 c4 04	 add	 esp, 4
  0096f	89 45 dc	 mov	 DWORD PTR _unlocked$2[ebp], eax
$LN50@F_GameEval:

; 1469 : 				}

  00972	eb 41		 jmp	 SHORT $LN52@F_GameEval
$LN48@F_GameEval:

; 1470 : 				else if (customsecretinfo[i].neededtime)

  00974	69 45 e0 94 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 148
  0097b	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+136], 0
  00982	74 1b		 je	 SHORT $LN51@F_GameEval

; 1471 : 					unlocked = M_GotLowEnoughTime(customsecretinfo[i].neededtime);

  00984	69 45 e0 94 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 148
  0098b	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+136]
  00991	51		 push	 ecx
  00992	e8 00 00 00 00	 call	 _M_GotLowEnoughTime
  00997	83 c4 04	 add	 esp, 4
  0099a	89 45 dc	 mov	 DWORD PTR _unlocked$2[ebp], eax
  0099d	eb 16		 jmp	 SHORT $LN52@F_GameEval
$LN51@F_GameEval:

; 1472 : 				else
; 1473 : 					unlocked = (grade & customsecretinfo[i].neededgrade);

  0099f	69 45 e0 94 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 148
  009a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grade
  009ac	23 88 80 00 00
	00		 and	 ecx, DWORD PTR _customsecretinfo[eax+128]
  009b2	89 4d dc	 mov	 DWORD PTR _unlocked$2[ebp], ecx
$LN52@F_GameEval:

; 1474 : 
; 1475 : 				if (unlocked)

  009b5	83 7d dc 00	 cmp	 DWORD PTR _unlocked$2[ebp], 0
  009b9	74 26		 je	 SHORT $LN53@F_GameEval

; 1476 : 				{
; 1477 : 					V_DrawString(8, startcoord, 0, customsecretinfo[i].name);

  009bb	69 45 e0 94 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 148
  009c2	05 00 00 00 00	 add	 eax, OFFSET _customsecretinfo
  009c7	50		 push	 eax
  009c8	6a 00		 push	 0
  009ca	8b 4d d8	 mov	 ecx, DWORD PTR _startcoord$1[ebp]
  009cd	51		 push	 ecx
  009ce	6a 08		 push	 8
  009d0	e8 00 00 00 00	 call	 _V_DrawString
  009d5	83 c4 10	 add	 esp, 16			; 00000010H

; 1478 : 
; 1479 : 					startcoord += 8;

  009d8	8b 45 d8	 mov	 eax, DWORD PTR _startcoord$1[ebp]
  009db	83 c0 08	 add	 eax, 8
  009de	89 45 d8	 mov	 DWORD PTR _startcoord$1[ebp], eax
$LN53@F_GameEval:

; 1480 : 				}
; 1481 : 			}

  009e1	e9 1a ff ff ff	 jmp	 $LN5@F_GameEval
$LN6@F_GameEval:

; 1482 : 		}

  009e6	e9 d1 00 00 00	 jmp	 $LN61@F_GameEval
$LN46@F_GameEval:

; 1483 : 		else
; 1484 : 		{
; 1485 : 			if (grade & 1)

  009eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  009f0	83 e0 01	 and	 eax, 1
  009f3	74 13		 je	 SHORT $LN54@F_GameEval

; 1486 : 				V_DrawString(8, 32, 0, "Level Select");

  009f5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BOMJPEGC@Level?5Select@
  009fa	6a 00		 push	 0
  009fc	6a 20		 push	 32			; 00000020H
  009fe	6a 08		 push	 8
  00a00	e8 00 00 00 00	 call	 _V_DrawString
  00a05	83 c4 10	 add	 esp, 16			; 00000010H
$LN54@F_GameEval:

; 1487 : 
; 1488 : 			if (grade & 2)

  00a08	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00a0d	83 e0 02	 and	 eax, 2
  00a10	74 13		 je	 SHORT $LN55@F_GameEval

; 1489 : 				V_DrawString(8, 40, 0, "SRB1 Remake");

  00a12	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OHCNEKBN@SRB1?5Remake@
  00a17	6a 00		 push	 0
  00a19	6a 28		 push	 40			; 00000028H
  00a1b	6a 08		 push	 8
  00a1d	e8 00 00 00 00	 call	 _V_DrawString
  00a22	83 c4 10	 add	 esp, 16			; 00000010H
$LN55@F_GameEval:

; 1490 : 
; 1491 : 			if (grade & 4)

  00a25	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00a2a	83 e0 04	 and	 eax, 4
  00a2d	74 13		 je	 SHORT $LN56@F_GameEval

; 1492 : 				V_DrawString(8, 48, 0, "Mario");

  00a2f	68 00 00 00 00	 push	 OFFSET ??_C@_05DNPMPGMD@Mario@
  00a34	6a 00		 push	 0
  00a36	6a 30		 push	 48			; 00000030H
  00a38	6a 08		 push	 8
  00a3a	e8 00 00 00 00	 call	 _V_DrawString
  00a3f	83 c4 10	 add	 esp, 16			; 00000010H
$LN56@F_GameEval:

; 1493 : 
; 1494 : 			if (grade & 8)

  00a42	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00a47	83 e0 08	 and	 eax, 8
  00a4a	74 13		 je	 SHORT $LN57@F_GameEval

; 1495 : 				V_DrawString(8, 56, 0, "Pandora's Box");

  00a4c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MKKBLIHF@Pandora?8s?5Box@
  00a51	6a 00		 push	 0
  00a53	6a 38		 push	 56			; 00000038H
  00a55	6a 08		 push	 8
  00a57	e8 00 00 00 00	 call	 _V_DrawString
  00a5c	83 c4 10	 add	 esp, 16			; 00000010H
$LN57@F_GameEval:

; 1496 : 
; 1497 : 			if (grade & 16)

  00a5f	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00a64	83 e0 10	 and	 eax, 16			; 00000010H
  00a67	74 13		 je	 SHORT $LN58@F_GameEval

; 1498 : 				V_DrawString(8, 64, 0, "NiGHTS");

  00a69	68 00 00 00 00	 push	 OFFSET ??_C@_06BHAMAMEH@NiGHTS@
  00a6e	6a 00		 push	 0
  00a70	6a 40		 push	 64			; 00000040H
  00a72	6a 08		 push	 8
  00a74	e8 00 00 00 00	 call	 _V_DrawString
  00a79	83 c4 10	 add	 esp, 16			; 00000010H
$LN58@F_GameEval:

; 1499 : 
; 1500 : 			if (netgame)

  00a7c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00a83	74 18		 je	 SHORT $LN59@F_GameEval

; 1501 : 				V_DrawString(8, 96, V_YELLOWMAP, "Prizes only\nawarded in\nsingle player!");

  00a85	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NDPDHFLA@Prizes?5only?6awarded?5in?6single?5p@
  00a8a	68 00 00 10 00	 push	 1048576			; 00100000H
  00a8f	6a 60		 push	 96			; 00000060H
  00a91	6a 08		 push	 8
  00a93	e8 00 00 00 00	 call	 _V_DrawString
  00a98	83 c4 10	 add	 esp, 16			; 00000010H
  00a9b	eb 1f		 jmp	 SHORT $LN61@F_GameEval
$LN59@F_GameEval:

; 1502 : 			else if (modifiedgame)

  00a9d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00aa4	74 16		 je	 SHORT $LN61@F_GameEval

; 1503 : 				V_DrawString(8, 96, V_YELLOWMAP, "Prizes not\nawarded in\nmodified games!");

  00aa6	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@KNDGDBHJ@Prizes?5not?6awarded?5in?6modified?5@
  00aab	68 00 00 10 00	 push	 1048576			; 00100000H
  00ab0	6a 60		 push	 96			; 00000060H
  00ab2	6a 08		 push	 8
  00ab4	e8 00 00 00 00	 call	 _V_DrawString
  00ab9	83 c4 10	 add	 esp, 16			; 00000010H
$LN61@F_GameEval:

; 1504 : 		}
; 1505 : 	}
; 1506 : }

  00abc	5f		 pop	 edi
  00abd	5e		 pop	 esi
  00abe	5b		 pop	 ebx
  00abf	8b e5		 mov	 esp, ebp
  00ac1	5d		 pop	 ebp
  00ac2	c3		 ret	 0
_F_GameEvaluationDrawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_TitleScreenDrawer
_TEXT	SEGMENT
_F_TitleScreenDrawer PROC				; COMDAT

; 1226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1227 : 	// Draw that sky!
; 1228 : 	F_SkyScroll();

  00009	e8 00 00 00 00	 call	 _F_SkyScroll
  0000e	90		 npad	 1

; 1229 : 
; 1230 : 	V_DrawScaledPatch(30, 14, 0, ttwing);

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttwing
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	6a 0e		 push	 14			; 0000000eH
  00019	6a 1e		 push	 30			; 0000001eH
  0001b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 1231 : 
; 1232 : 	if (finalecount < 57)

  00023	83 3d 00 00 00
	00 39		 cmp	 DWORD PTR _finalecount, 57 ; 00000039H
  0002a	0f 8d 80 01 00
	00		 jge	 $LN2@F_TitleScr

; 1233 : 	{
; 1234 : 		if (finalecount == 35)

  00030	83 3d 00 00 00
	00 23		 cmp	 DWORD PTR _finalecount, 35 ; 00000023H
  00037	75 19		 jne	 SHORT $LN4@F_TitleScr

; 1235 : 			V_DrawScaledPatch(115, 15, 0, ttspop1);

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttspop1
  0003e	50		 push	 eax
  0003f	6a 00		 push	 0
  00041	6a 0f		 push	 15			; 0000000fH
  00043	6a 73		 push	 115			; 00000073H
  00045	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	e9 48 01 00 00	 jmp	 $LN22@F_TitleScr
$LN4@F_TitleScr:

; 1236 : 		else if (finalecount == 36)

  00052	83 3d 00 00 00
	00 24		 cmp	 DWORD PTR _finalecount, 36 ; 00000024H
  00059	75 19		 jne	 SHORT $LN6@F_TitleScr

; 1237 : 			V_DrawScaledPatch(114, 15, 0,ttspop2);

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttspop2
  00060	50		 push	 eax
  00061	6a 00		 push	 0
  00063	6a 0f		 push	 15			; 0000000fH
  00065	6a 72		 push	 114			; 00000072H
  00067	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	e9 26 01 00 00	 jmp	 $LN22@F_TitleScr
$LN6@F_TitleScr:

; 1238 : 		else if (finalecount == 37)

  00074	83 3d 00 00 00
	00 25		 cmp	 DWORD PTR _finalecount, 37 ; 00000025H
  0007b	75 19		 jne	 SHORT $LN8@F_TitleScr

; 1239 : 			V_DrawScaledPatch(113, 15, 0,ttspop3);

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttspop3
  00082	50		 push	 eax
  00083	6a 00		 push	 0
  00085	6a 0f		 push	 15			; 0000000fH
  00087	6a 71		 push	 113			; 00000071H
  00089	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0008e	83 c4 10	 add	 esp, 16			; 00000010H
  00091	e9 04 01 00 00	 jmp	 $LN22@F_TitleScr
$LN8@F_TitleScr:

; 1240 : 		else if (finalecount == 38)

  00096	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR _finalecount, 38 ; 00000026H
  0009d	75 19		 jne	 SHORT $LN10@F_TitleScr

; 1241 : 			V_DrawScaledPatch(112, 15, 0,ttspop4);

  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttspop4
  000a4	50		 push	 eax
  000a5	6a 00		 push	 0
  000a7	6a 0f		 push	 15			; 0000000fH
  000a9	6a 70		 push	 112			; 00000070H
  000ab	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	e9 e2 00 00 00	 jmp	 $LN22@F_TitleScr
$LN10@F_TitleScr:

; 1242 : 		else if (finalecount == 39)

  000b8	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR _finalecount, 39 ; 00000027H
  000bf	75 19		 jne	 SHORT $LN12@F_TitleScr

; 1243 : 			V_DrawScaledPatch(111, 15, 0,ttspop5);

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttspop5
  000c6	50		 push	 eax
  000c7	6a 00		 push	 0
  000c9	6a 0f		 push	 15			; 0000000fH
  000cb	6a 6f		 push	 111			; 0000006fH
  000cd	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
  000d5	e9 c0 00 00 00	 jmp	 $LN22@F_TitleScr
$LN12@F_TitleScr:

; 1244 : 		else if (finalecount == 40)

  000da	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR _finalecount, 40 ; 00000028H
  000e1	75 19		 jne	 SHORT $LN14@F_TitleScr

; 1245 : 			V_DrawScaledPatch(110, 15, 0, ttspop6);

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttspop6
  000e8	50		 push	 eax
  000e9	6a 00		 push	 0
  000eb	6a 0f		 push	 15			; 0000000fH
  000ed	6a 6e		 push	 110			; 0000006eH
  000ef	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000f4	83 c4 10	 add	 esp, 16			; 00000010H
  000f7	e9 9e 00 00 00	 jmp	 $LN22@F_TitleScr
$LN14@F_TitleScr:

; 1246 : 		else if (finalecount >= 41 && finalecount <= 44)

  000fc	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR _finalecount, 41 ; 00000029H
  00103	7c 1f		 jl	 SHORT $LN16@F_TitleScr
  00105	83 3d 00 00 00
	00 2c		 cmp	 DWORD PTR _finalecount, 44 ; 0000002cH
  0010c	7f 16		 jg	 SHORT $LN16@F_TitleScr

; 1247 : 			V_DrawScaledPatch(109, 15, 0, ttspop7);

  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttspop7
  00113	50		 push	 eax
  00114	6a 00		 push	 0
  00116	6a 0f		 push	 15			; 0000000fH
  00118	6a 6d		 push	 109			; 0000006dH
  0011a	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0011f	83 c4 10	 add	 esp, 16			; 00000010H
  00122	eb 76		 jmp	 SHORT $LN22@F_TitleScr
$LN16@F_TitleScr:

; 1248 : 		else if (finalecount >= 45 && finalecount <= 48)

  00124	83 3d 00 00 00
	00 2d		 cmp	 DWORD PTR _finalecount, 45 ; 0000002dH
  0012b	7c 1f		 jl	 SHORT $LN18@F_TitleScr
  0012d	83 3d 00 00 00
	00 30		 cmp	 DWORD PTR _finalecount, 48 ; 00000030H
  00134	7f 16		 jg	 SHORT $LN18@F_TitleScr

; 1249 : 			V_DrawScaledPatch(108, 12, 0, ttsprep1);

  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttsprep1
  0013b	50		 push	 eax
  0013c	6a 00		 push	 0
  0013e	6a 0c		 push	 12			; 0000000cH
  00140	6a 6c		 push	 108			; 0000006cH
  00142	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00147	83 c4 10	 add	 esp, 16			; 00000010H
  0014a	eb 4e		 jmp	 SHORT $LN22@F_TitleScr
$LN18@F_TitleScr:

; 1250 : 		else if (finalecount >= 49 && finalecount <= 52)

  0014c	83 3d 00 00 00
	00 31		 cmp	 DWORD PTR _finalecount, 49 ; 00000031H
  00153	7c 1f		 jl	 SHORT $LN20@F_TitleScr
  00155	83 3d 00 00 00
	00 34		 cmp	 DWORD PTR _finalecount, 52 ; 00000034H
  0015c	7f 16		 jg	 SHORT $LN20@F_TitleScr

; 1251 : 			V_DrawScaledPatch(107, 9, 0, ttsprep2);

  0015e	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttsprep2
  00163	50		 push	 eax
  00164	6a 00		 push	 0
  00166	6a 09		 push	 9
  00168	6a 6b		 push	 107			; 0000006bH
  0016a	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0016f	83 c4 10	 add	 esp, 16			; 00000010H
  00172	eb 26		 jmp	 SHORT $LN22@F_TitleScr
$LN20@F_TitleScr:

; 1252 : 		else if (finalecount >= 53 && finalecount <= 56)

  00174	83 3d 00 00 00
	00 35		 cmp	 DWORD PTR _finalecount, 53 ; 00000035H
  0017b	7c 1d		 jl	 SHORT $LN22@F_TitleScr
  0017d	83 3d 00 00 00
	00 38		 cmp	 DWORD PTR _finalecount, 56 ; 00000038H
  00184	7f 14		 jg	 SHORT $LN22@F_TitleScr

; 1253 : 			V_DrawScaledPatch(106, 6, 0, ttswip1);

  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttswip1
  0018b	50		 push	 eax
  0018c	6a 00		 push	 0
  0018e	6a 06		 push	 6
  00190	6a 6a		 push	 106			; 0000006aH
  00192	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00197	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@F_TitleScr:

; 1254 : 		V_DrawScaledPatch(93, 106, 0, ttsonic);

  0019a	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttsonic
  0019f	50		 push	 eax
  001a0	6a 00		 push	 0
  001a2	6a 6a		 push	 106			; 0000006aH
  001a4	6a 5d		 push	 93			; 0000005dH
  001a6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001ab	83 c4 10	 add	 esp, 16			; 00000010H

; 1255 : 	}

  001ae	eb 50		 jmp	 SHORT $LN24@F_TitleScr
$LN2@F_TitleScr:

; 1256 : 	else
; 1257 : 	{
; 1258 : 		V_DrawScaledPatch(93, 106, 0,ttsonic);

  001b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttsonic
  001b5	50		 push	 eax
  001b6	6a 00		 push	 0
  001b8	6a 6a		 push	 106			; 0000006aH
  001ba	6a 5d		 push	 93			; 0000005dH
  001bc	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001c1	83 c4 10	 add	 esp, 16			; 00000010H

; 1259 : 		if (finalecount/5 & 1)

  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  001c9	99		 cdq
  001ca	b9 05 00 00 00	 mov	 ecx, 5
  001cf	f7 f9		 idiv	 ecx
  001d1	83 e0 01	 and	 eax, 1
  001d4	74 16		 je	 SHORT $LN23@F_TitleScr

; 1260 : 			V_DrawScaledPatch(100, 3, 0,ttswave1);

  001d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttswave1
  001db	50		 push	 eax
  001dc	6a 00		 push	 0
  001de	6a 03		 push	 3
  001e0	6a 64		 push	 100			; 00000064H
  001e2	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001e7	83 c4 10	 add	 esp, 16			; 00000010H
  001ea	eb 14		 jmp	 SHORT $LN24@F_TitleScr
$LN23@F_TitleScr:

; 1261 : 		else
; 1262 : 			V_DrawScaledPatch(100,3, 0,ttswave2);

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttswave2
  001f1	50		 push	 eax
  001f2	6a 00		 push	 0
  001f4	6a 03		 push	 3
  001f6	6a 64		 push	 100			; 00000064H
  001f8	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001fd	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@F_TitleScr:

; 1263 : 	}
; 1264 : 
; 1265 : 	V_DrawScaledPatch(48, 142, 0,ttbanner);

  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttbanner
  00205	50		 push	 eax
  00206	6a 00		 push	 0
  00208	68 8e 00 00 00	 push	 142			; 0000008eH
  0020d	6a 30		 push	 48			; 00000030H
  0020f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00214	83 c4 10	 add	 esp, 16			; 00000010H

; 1266 : }

  00217	5f		 pop	 edi
  00218	5e		 pop	 esi
  00219	5b		 pop	 ebx
  0021a	8b e5		 mov	 esp, ebp
  0021c	5d		 pop	 ebp
  0021d	c3		 ret	 0
_F_TitleScreenDrawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_IntroDrawer
_TEXT	SEGMENT
_quittime$1 = -4					; size = 4
_F_IntroDrawer PROC					; COMDAT

; 1690 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1691 : 	if (timetonext <= 0)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timetonext, 0
  00010	0f 8f 95 04 00
	00		 jg	 $LN4@F_IntroDra

; 1692 : 	{
; 1693 : 		if (finaletext == text[INTRO01TEXT])

  00016	b8 04 00 00 00	 mov	 eax, 4
  0001b	69 c8 36 01 00
	00		 imul	 ecx, eax, 310
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00027	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  0002d	75 2b		 jne	 SHORT $LN5@F_IntroDra

; 1694 : 		{
; 1695 : 			S_ChangeMusic(mus_read_m, false);

  0002f	6a 00		 push	 0
  00031	68 0d 04 00 00	 push	 1037			; 0000040dH
  00036	e8 00 00 00 00	 call	 _S_ChangeMusic
  0003b	83 c4 08	 add	 esp, 8

; 1696 : 			finaletext = text[INTRO02TEXT];

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	69 c8 37 01 00
	00		 imul	 ecx, eax, 311
  00049	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0004f	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx

; 1697 : 		}

  00055	e9 e5 03 00 00	 jmp	 $LN36@F_IntroDra
$LN5@F_IntroDra:

; 1698 : 		else if (finaletext == text[INTRO02TEXT])

  0005a	b8 04 00 00 00	 mov	 eax, 4
  0005f	69 c8 37 01 00
	00		 imul	 ecx, eax, 311
  00065	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0006b	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00071	75 1c		 jne	 SHORT $LN7@F_IntroDra

; 1699 : 			finaletext = text[INTRO03TEXT];

  00073	b8 04 00 00 00	 mov	 eax, 4
  00078	69 c8 38 01 00
	00		 imul	 ecx, eax, 312
  0007e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00084	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  0008a	e9 b0 03 00 00	 jmp	 $LN36@F_IntroDra
$LN7@F_IntroDra:

; 1700 : 		else if (finaletext == text[INTRO03TEXT])

  0008f	b8 04 00 00 00	 mov	 eax, 4
  00094	69 c8 38 01 00
	00		 imul	 ecx, eax, 312
  0009a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  000a0	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  000a6	75 1c		 jne	 SHORT $LN9@F_IntroDra

; 1701 : 			finaletext = text[INTRO04TEXT];

  000a8	b8 04 00 00 00	 mov	 eax, 4
  000ad	69 c8 39 01 00
	00		 imul	 ecx, eax, 313
  000b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000b9	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  000bf	e9 7b 03 00 00	 jmp	 $LN36@F_IntroDra
$LN9@F_IntroDra:

; 1702 : 		else if (finaletext == text[INTRO04TEXT])

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	69 c8 39 01 00
	00		 imul	 ecx, eax, 313
  000cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  000d5	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  000db	75 26		 jne	 SHORT $LN11@F_IntroDra

; 1703 : 		{
; 1704 : 			finaletext = text[INTRO05TEXT];

  000dd	b8 04 00 00 00	 mov	 eax, 4
  000e2	69 c8 3a 01 00
	00		 imul	 ecx, eax, 314
  000e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000ee	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx

; 1705 : 			roidtics = BASEVIDWIDTH - 64;

  000f4	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR _roidtics, 256 ; 00000100H

; 1706 : 		}

  000fe	e9 3c 03 00 00	 jmp	 $LN36@F_IntroDra
$LN11@F_IntroDra:

; 1707 : 		else if (finaletext == text[INTRO05TEXT])

  00103	b8 04 00 00 00	 mov	 eax, 4
  00108	69 c8 3a 01 00
	00		 imul	 ecx, eax, 314
  0010e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00114	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  0011a	75 1c		 jne	 SHORT $LN13@F_IntroDra

; 1708 : 			finaletext = text[INTRO06TEXT];

  0011c	b8 04 00 00 00	 mov	 eax, 4
  00121	69 c8 3b 01 00
	00		 imul	 ecx, eax, 315
  00127	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0012d	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  00133	e9 07 03 00 00	 jmp	 $LN36@F_IntroDra
$LN13@F_IntroDra:

; 1709 : 		else if (finaletext == text[INTRO06TEXT])

  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	69 c8 3b 01 00
	00		 imul	 ecx, eax, 315
  00143	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00149	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  0014f	75 1c		 jne	 SHORT $LN15@F_IntroDra

; 1710 : 			finaletext = text[INTRO07TEXT];

  00151	b8 04 00 00 00	 mov	 eax, 4
  00156	69 c8 3c 01 00
	00		 imul	 ecx, eax, 316
  0015c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00162	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  00168	e9 d2 02 00 00	 jmp	 $LN36@F_IntroDra
$LN15@F_IntroDra:

; 1711 : 		else if (finaletext == text[INTRO07TEXT])

  0016d	b8 04 00 00 00	 mov	 eax, 4
  00172	69 c8 3c 01 00
	00		 imul	 ecx, eax, 316
  00178	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0017e	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00184	75 1c		 jne	 SHORT $LN17@F_IntroDra

; 1712 : 			finaletext = text[INTRO08TEXT];

  00186	b8 04 00 00 00	 mov	 eax, 4
  0018b	69 c8 3d 01 00
	00		 imul	 ecx, eax, 317
  00191	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00197	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  0019d	e9 9d 02 00 00	 jmp	 $LN36@F_IntroDra
$LN17@F_IntroDra:

; 1713 : 		else if (finaletext == text[INTRO08TEXT])

  001a2	b8 04 00 00 00	 mov	 eax, 4
  001a7	69 c8 3d 01 00
	00		 imul	 ecx, eax, 317
  001ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  001b3	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  001b9	75 1c		 jne	 SHORT $LN19@F_IntroDra

; 1714 : 			finaletext = text[INTRO09TEXT];

  001bb	b8 04 00 00 00	 mov	 eax, 4
  001c0	69 c8 3e 01 00
	00		 imul	 ecx, eax, 318
  001c6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001cc	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  001d2	e9 68 02 00 00	 jmp	 $LN36@F_IntroDra
$LN19@F_IntroDra:

; 1715 : 		else if (finaletext == text[INTRO09TEXT])

  001d7	b8 04 00 00 00	 mov	 eax, 4
  001dc	69 c8 3e 01 00
	00		 imul	 ecx, eax, 318
  001e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  001e8	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  001ee	75 1c		 jne	 SHORT $LN21@F_IntroDra

; 1716 : 			finaletext = text[INTRO10TEXT];

  001f0	b8 04 00 00 00	 mov	 eax, 4
  001f5	69 c8 3f 01 00
	00		 imul	 ecx, eax, 319
  001fb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00201	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  00207	e9 33 02 00 00	 jmp	 $LN36@F_IntroDra
$LN21@F_IntroDra:

; 1717 : 		else if (finaletext == text[INTRO10TEXT])

  0020c	b8 04 00 00 00	 mov	 eax, 4
  00211	69 c8 3f 01 00
	00		 imul	 ecx, eax, 319
  00217	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0021d	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00223	75 1c		 jne	 SHORT $LN23@F_IntroDra

; 1718 : 			finaletext = text[INTRO11TEXT];

  00225	b8 04 00 00 00	 mov	 eax, 4
  0022a	69 c8 40 01 00
	00		 imul	 ecx, eax, 320
  00230	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00236	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  0023c	e9 fe 01 00 00	 jmp	 $LN36@F_IntroDra
$LN23@F_IntroDra:

; 1719 : 		else if (finaletext == text[INTRO11TEXT])

  00241	b8 04 00 00 00	 mov	 eax, 4
  00246	69 c8 40 01 00
	00		 imul	 ecx, eax, 320
  0024c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00252	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00258	75 6b		 jne	 SHORT $LN25@F_IntroDra

; 1720 : 		{
; 1721 : 			if (rendermode != render_none)

  0025a	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00261	74 46		 je	 SHORT $LN27@F_IntroDra

; 1722 : 			{
; 1723 : 				F_WipeStartScreen();

  00263	e8 00 00 00 00	 call	 _F_WipeStartScreen
  00268	90		 npad	 1

; 1724 : 				V_DrawFill(0, 0, vid.width, vid.height, 0);

  00269	6a 00		 push	 0
  0026b	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00270	50		 push	 eax
  00271	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00277	51		 push	 ecx
  00278	6a 00		 push	 0
  0027a	6a 00		 push	 0
  0027c	e8 00 00 00 00	 call	 _V_DrawFill
  00281	83 c4 14	 add	 esp, 20			; 00000014H

; 1725 : 				F_WipeEndScreen(0, 0, vid.width, vid.height);

  00284	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00289	50		 push	 eax
  0028a	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00290	51		 push	 ecx
  00291	6a 00		 push	 0
  00293	6a 00		 push	 0
  00295	e8 00 00 00 00	 call	 _F_WipeEndScreen
  0029a	83 c4 10	 add	 esp, 16			; 00000010H

; 1726 : 
; 1727 : 				F_RunWipe(TICRATE, true);

  0029d	6a 01		 push	 1
  0029f	6a 23		 push	 35			; 00000023H
  002a1	e8 00 00 00 00	 call	 _F_RunWipe
  002a6	83 c4 08	 add	 esp, 8
$LN27@F_IntroDra:

; 1728 : 			}
; 1729 : 
; 1730 : 			finaletext = text[INTRO12TEXT];

  002a9	b8 04 00 00 00	 mov	 eax, 4
  002ae	69 c8 41 01 00
	00		 imul	 ecx, eax, 321
  002b4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002ba	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx

; 1731 : 		}

  002c0	e9 7a 01 00 00	 jmp	 $LN36@F_IntroDra
$LN25@F_IntroDra:

; 1732 : 		else if (finaletext == text[INTRO12TEXT])

  002c5	b8 04 00 00 00	 mov	 eax, 4
  002ca	69 c8 41 01 00
	00		 imul	 ecx, eax, 321
  002d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  002d6	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  002dc	75 1c		 jne	 SHORT $LN28@F_IntroDra

; 1733 : 			finaletext = text[INTRO13TEXT];

  002de	b8 04 00 00 00	 mov	 eax, 4
  002e3	69 c8 42 01 00
	00		 imul	 ecx, eax, 322
  002e9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002ef	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  002f5	e9 45 01 00 00	 jmp	 $LN36@F_IntroDra
$LN28@F_IntroDra:

; 1734 : 		else if (finaletext == text[INTRO13TEXT])

  002fa	b8 04 00 00 00	 mov	 eax, 4
  002ff	69 c8 42 01 00
	00		 imul	 ecx, eax, 322
  00305	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  0030b	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00311	75 1c		 jne	 SHORT $LN30@F_IntroDra

; 1735 : 			finaletext = text[INTRO14TEXT];

  00313	b8 04 00 00 00	 mov	 eax, 4
  00318	69 c8 43 01 00
	00		 imul	 ecx, eax, 323
  0031e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00324	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  0032a	e9 10 01 00 00	 jmp	 $LN36@F_IntroDra
$LN30@F_IntroDra:

; 1736 : 		else if (finaletext == text[INTRO14TEXT])

  0032f	b8 04 00 00 00	 mov	 eax, 4
  00334	69 c8 43 01 00
	00		 imul	 ecx, eax, 323
  0033a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00340	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  00346	75 1c		 jne	 SHORT $LN32@F_IntroDra

; 1737 : 			finaletext = text[INTRO15TEXT];

  00348	b8 04 00 00 00	 mov	 eax, 4
  0034d	69 c8 44 01 00
	00		 imul	 ecx, eax, 324
  00353	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00359	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  0035f	e9 db 00 00 00	 jmp	 $LN36@F_IntroDra
$LN32@F_IntroDra:

; 1738 : 		else if (finaletext == text[INTRO15TEXT])

  00364	b8 04 00 00 00	 mov	 eax, 4
  00369	69 c8 44 01 00
	00		 imul	 ecx, eax, 324
  0036f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  00375	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  0037b	75 1c		 jne	 SHORT $LN34@F_IntroDra

; 1739 : 			finaletext = text[INTRO16TEXT];

  0037d	b8 04 00 00 00	 mov	 eax, 4
  00382	69 c8 45 01 00
	00		 imul	 ecx, eax, 325
  00388	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0038e	89 15 00 00 00
	00		 mov	 DWORD PTR _finaletext, edx
  00394	e9 a6 00 00 00	 jmp	 $LN36@F_IntroDra
$LN34@F_IntroDra:

; 1740 : 		else if (finaletext == text[INTRO16TEXT])

  00399	b8 04 00 00 00	 mov	 eax, 4
  0039e	69 c8 45 01 00
	00		 imul	 ecx, eax, 325
  003a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  003aa	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  003b0	0f 85 89 00 00
	00		 jne	 $LN36@F_IntroDra

; 1741 : 		{
; 1742 : 			if (rendermode != render_none)

  003b6	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  003bd	74 46		 je	 SHORT $LN37@F_IntroDra

; 1743 : 			{
; 1744 : 				F_WipeStartScreen();

  003bf	e8 00 00 00 00	 call	 _F_WipeStartScreen
  003c4	90		 npad	 1

; 1745 : 				V_DrawFill(0, 0, vid.width, vid.height, 31);

  003c5	6a 1f		 push	 31			; 0000001fH
  003c7	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  003cc	50		 push	 eax
  003cd	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  003d3	51		 push	 ecx
  003d4	6a 00		 push	 0
  003d6	6a 00		 push	 0
  003d8	e8 00 00 00 00	 call	 _V_DrawFill
  003dd	83 c4 14	 add	 esp, 20			; 00000014H

; 1746 : 				F_WipeEndScreen(0, 0, vid.width, vid.height);

  003e0	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  003e5	50		 push	 eax
  003e6	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  003ec	51		 push	 ecx
  003ed	6a 00		 push	 0
  003ef	6a 00		 push	 0
  003f1	e8 00 00 00 00	 call	 _F_WipeEndScreen
  003f6	83 c4 10	 add	 esp, 16			; 00000010H

; 1747 : 
; 1748 : 				F_RunWipe(TICRATE, true);

  003f9	6a 01		 push	 1
  003fb	6a 23		 push	 35			; 00000023H
  003fd	e8 00 00 00 00	 call	 _F_RunWipe
  00402	83 c4 08	 add	 esp, 8
$LN37@F_IntroDra:

; 1749 : 			}
; 1750 : 
; 1751 : 			// Stay on black for a bit. =)
; 1752 : 			{
; 1753 : 				tic_t quittime;
; 1754 : 				quittime = I_GetTime() + TICRATE*2; // Shortened the quit time, used to be 2 seconds

  00405	e8 00 00 00 00	 call	 _I_GetTime
  0040a	83 c0 46	 add	 eax, 70			; 00000046H
  0040d	89 45 fc	 mov	 DWORD PTR _quittime$1[ebp], eax
$LN2@F_IntroDra:

; 1755 : 				while (quittime > I_GetTime())

  00410	e8 00 00 00 00	 call	 _I_GetTime
  00415	39 45 fc	 cmp	 DWORD PTR _quittime$1[ebp], eax
  00418	76 1a		 jbe	 SHORT $LN3@F_IntroDra

; 1756 : 				{
; 1757 : 					I_OsPolling();

  0041a	e8 00 00 00 00	 call	 _I_OsPolling
  0041f	90		 npad	 1

; 1758 : 					I_UpdateNoBlit();

  00420	e8 00 00 00 00	 call	 _I_UpdateNoBlit
  00425	90		 npad	 1

; 1759 : 					M_Drawer(); // menu is drawn even on top of wipes

  00426	e8 00 00 00 00	 call	 _M_Drawer
  0042b	90		 npad	 1

; 1760 : 					I_FinishUpdate(); // Update the screen with the image Tails 06-19-2001

  0042c	e8 00 00 00 00	 call	 _I_FinishUpdate
  00431	90		 npad	 1

; 1761 : 				}

  00432	eb dc		 jmp	 SHORT $LN2@F_IntroDra
$LN3@F_IntroDra:

; 1762 : 			}
; 1763 : 
; 1764 : 			D_StartTitle();

  00434	e8 00 00 00 00	 call	 _D_StartTitle
  00439	90		 npad	 1

; 1765 : 			return;

  0043a	e9 0a 01 00 00	 jmp	 $LN1@F_IntroDra
$LN36@F_IntroDra:

; 1766 : 		}
; 1767 : 
; 1768 : 		if (gamestate == GS_INTRO)

  0043f	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _gamestate, 5
  00446	75 0c		 jne	 SHORT $LN38@F_IntroDra

; 1769 : 			G_SetGamestate(GS_INTRO2);

  00448	6a 06		 push	 6
  0044a	e8 00 00 00 00	 call	 _G_SetGamestate
  0044f	83 c4 04	 add	 esp, 4
  00452	eb 0a		 jmp	 SHORT $LN39@F_IntroDra
$LN38@F_IntroDra:

; 1770 : 		else
; 1771 : 			G_SetGamestate(GS_INTRO);

  00454	6a 05		 push	 5
  00456	e8 00 00 00 00	 call	 _G_SetGamestate
  0045b	83 c4 04	 add	 esp, 4
$LN39@F_IntroDra:

; 1772 : 
; 1773 : #ifndef SHUFFLE
; 1774 : 		if (rendermode == render_soft)
; 1775 : #endif
; 1776 : 			F_WipeStartScreen();

  0045e	e8 00 00 00 00	 call	 _F_WipeStartScreen
  00463	90		 npad	 1

; 1777 : 
; 1778 : 		wipegamestate = -1;

  00464	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _wipegamestate, -1

; 1779 : 		finaletextcount = 0;

  0046e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _finaletextcount, 0

; 1780 : 		animtimer = 0;

  00478	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _animtimer, 0

; 1781 : 		stoptimer = 0;

  00482	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _stoptimer, 0

; 1782 : 		scene++;

  0048c	a1 00 00 00 00	 mov	 eax, DWORD PTR _scene
  00491	83 c0 01	 add	 eax, 1
  00494	a3 00 00 00 00	 mov	 DWORD PTR _scene, eax

; 1783 : 		timetonext = introscenetime[scene];

  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR _scene
  0049e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _introscenetime[eax*4]
  004a5	89 0d 00 00 00
	00		 mov	 DWORD PTR _timetonext, ecx
$LN4@F_IntroDra:

; 1784 : 	}
; 1785 : 
; 1786 : 	if (finaletext == text[INTRO08TEXT] && finaletextcount == 5*TICRATE) // Force a wipe here

  004ab	b8 04 00 00 00	 mov	 eax, 4
  004b0	69 c8 3d 01 00
	00		 imul	 ecx, eax, 317
  004b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finaletext
  004bc	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _text[ecx]
  004c2	75 7f		 jne	 SHORT $LN41@F_IntroDra
  004c4	81 3d 00 00 00
	00 af 00 00 00	 cmp	 DWORD PTR _finaletextcount, 175 ; 000000afH
  004ce	75 73		 jne	 SHORT $LN41@F_IntroDra

; 1787 : 	{
; 1788 : 		if (rendermode != render_none)

  004d0	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  004d7	74 6a		 je	 SHORT $LN41@F_IntroDra

; 1789 : 		{
; 1790 : 			F_WipeStartScreen();

  004d9	e8 00 00 00 00	 call	 _F_WipeStartScreen
  004de	90		 npad	 1

; 1791 : 			V_DrawFill(0, 0, vid.width, vid.height, 31);

  004df	6a 1f		 push	 31			; 0000001fH
  004e1	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  004e6	50		 push	 eax
  004e7	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  004ed	51		 push	 ecx
  004ee	6a 00		 push	 0
  004f0	6a 00		 push	 0
  004f2	e8 00 00 00 00	 call	 _V_DrawFill
  004f7	83 c4 14	 add	 esp, 20			; 00000014H

; 1792 : 			V_DrawScaledPatch(0, 0, 0, W_CachePatchName("SGRASS5", PU_CACHE));

  004fa	6a 65		 push	 101			; 00000065H
  004fc	68 00 00 00 00	 push	 OFFSET ??_C@_07PBHOLFFC@SGRASS5@
  00501	e8 00 00 00 00	 call	 _W_CachePatchName
  00506	83 c4 08	 add	 esp, 8
  00509	50		 push	 eax
  0050a	6a 00		 push	 0
  0050c	6a 00		 push	 0
  0050e	6a 00		 push	 0
  00510	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00515	83 c4 10	 add	 esp, 16			; 00000010H

; 1793 : 			F_IntroTextWrite();

  00518	e8 00 00 00 00	 call	 _F_IntroTextWrite
  0051d	90		 npad	 1

; 1794 : 			F_WipeEndScreen(0, 0, vid.width, vid.height);

  0051e	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00523	50		 push	 eax
  00524	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0052a	51		 push	 ecx
  0052b	6a 00		 push	 0
  0052d	6a 00		 push	 0
  0052f	e8 00 00 00 00	 call	 _F_WipeEndScreen
  00534	83 c4 10	 add	 esp, 16			; 00000010H

; 1795 : 
; 1796 : 			F_RunWipe(TICRATE, true);

  00537	6a 01		 push	 1
  00539	6a 23		 push	 35			; 00000023H
  0053b	e8 00 00 00 00	 call	 _F_RunWipe
  00540	83 c4 08	 add	 esp, 8
$LN41@F_IntroDra:

; 1797 : 		}
; 1798 : 	}
; 1799 : 
; 1800 : 	F_IntroTextWrite();

  00543	e8 00 00 00 00	 call	 _F_IntroTextWrite
  00548	90		 npad	 1
$LN1@F_IntroDra:

; 1801 : }

  00549	5f		 pop	 edi
  0054a	5e		 pop	 esi
  0054b	5b		 pop	 ebx
  0054c	8b e5		 mov	 esp, ebp
  0054e	5d		 pop	 ebp
  0054f	c3		 ret	 0
_F_IntroDrawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_GameEndDrawer
_TEXT	SEGMENT
_F_GameEndDrawer PROC					; COMDAT

; 1273 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1274 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_F_GameEndDrawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_CutsceneTicker
_TEXT	SEGMENT
_i$ = -4						; size = 4
_F_CutsceneTicker PROC					; COMDAT

; 705  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 706  : 	INT32 i;
; 707  : 
; 708  : 	// advance animation
; 709  : 	finalecount++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR _finalecount, eax

; 710  : 	finaletextcount++;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletextcount
  0001b	83 c0 01	 add	 eax, 1
  0001e	a3 00 00 00 00	 mov	 DWORD PTR _finaletextcount, eax

; 711  : 
; 712  : 	for (i = 0; i < MAXPLAYERS; i++)

  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002a	eb 09		 jmp	 SHORT $LN4@F_Cutscene
$LN2@F_Cutscene:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@F_Cutscene:
  00035	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00039	7d 63		 jge	 SHORT $LN3@F_Cutscene

; 713  : 	{
; 714  : 		if (netgame && i != serverplayer && i != adminplayer)

  0003b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00042	74 18		 je	 SHORT $LN5@F_Cutscene
  00044	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00047	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  0004d	74 0d		 je	 SHORT $LN5@F_Cutscene
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00052	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00058	74 02		 je	 SHORT $LN5@F_Cutscene

; 715  : 			continue;

  0005a	eb d0		 jmp	 SHORT $LN2@F_Cutscene
$LN5@F_Cutscene:

; 716  : 
; 717  : 		if (players[i].cmd.buttons & BT_USE)

  0005c	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00063	0f b7 88 0e 00
	00 00		 movzx	 ecx, WORD PTR _players[eax+14]
  0006a	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00070	74 2a		 je	 SHORT $LN7@F_Cutscene

; 718  : 		{
; 719  : 			keypressed = false;

  00072	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _keypressed, 0

; 720  : 			finaletextcount += 64;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletextcount
  00081	83 c0 40	 add	 eax, 64			; 00000040H
  00084	a3 00 00 00 00	 mov	 DWORD PTR _finaletextcount, eax

; 721  : 			if (timetonext)

  00089	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timetonext, 0
  00090	74 0a		 je	 SHORT $LN7@F_Cutscene

; 722  : 				timetonext = 2;

  00092	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _timetonext, 2
$LN7@F_Cutscene:

; 723  : 		}
; 724  : 	}

  0009c	eb 8e		 jmp	 SHORT $LN2@F_Cutscene
$LN3@F_Cutscene:

; 725  : }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_F_CutsceneTicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_TitleScreenTicker
_TEXT	SEGMENT
_F_TitleScreenTicker PROC				; COMDAT

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 653  : 	finalecount++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR _finalecount, eax

; 654  : 	finalestage += 8;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalestage
  0001b	83 c0 08	 add	 eax, 8
  0001e	a3 00 00 00 00	 mov	 DWORD PTR _finalestage, eax

; 655  : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_F_TitleScreenTicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_IntroTicker
_TEXT	SEGMENT
_F_IntroTicker PROC					; COMDAT

; 689  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 690  : 	// advance animation
; 691  : 	finalecount++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR _finalecount, eax

; 692  : 	finaletextcount++;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _finaletextcount
  0001b	83 c0 01	 add	 eax, 1
  0001e	a3 00 00 00 00	 mov	 DWORD PTR _finaletextcount, eax

; 693  : 
; 694  : 	if (finalecount % 3 == 0)

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _finalecount
  00028	99		 cdq
  00029	b9 03 00 00 00	 mov	 ecx, 3
  0002e	f7 f9		 idiv	 ecx
  00030	85 d2		 test	 edx, edx
  00032	75 0d		 jne	 SHORT $LN2@F_IntroTic

; 695  : 		roidtics--;

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _roidtics
  00039	83 e8 01	 sub	 eax, 1
  0003c	a3 00 00 00 00	 mov	 DWORD PTR _roidtics, eax
$LN2@F_IntroTic:

; 696  : 
; 697  : 	timetonext--;

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00046	83 e8 01	 sub	 eax, 1
  00049	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax

; 698  : 
; 699  : 	// check for skipping
; 700  : 	if (keypressed)

  0004e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _keypressed, 0
  00055	74 0a		 je	 SHORT $LN3@F_IntroTic

; 701  : 		keypressed = false;

  00057	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _keypressed, 0
$LN3@F_IntroTic:

; 702  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_F_IntroTicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_GameEndTicker
_TEXT	SEGMENT
_F_GameEndTicker PROC					; COMDAT

; 662  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 663  : 	if (timetonext > 0)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timetonext, 0
  00010	7e 0f		 jle	 SHORT $LN2@F_GameEndT

; 664  : 		timetonext--;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _timetonext
  00017	83 e8 01	 sub	 eax, 1
  0001a	a3 00 00 00 00	 mov	 DWORD PTR _timetonext, eax
  0001f	eb 06		 jmp	 SHORT $LN3@F_GameEndT
$LN2@F_GameEndT:

; 665  : 	else
; 666  : 		D_StartTitle();

  00021	e8 00 00 00 00	 call	 _D_StartTitle
  00026	90		 npad	 1
$LN3@F_GameEndT:

; 667  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_F_GameEndTicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_CreditResponder
_TEXT	SEGMENT
tv65 = -72						; size = 4
_key$ = -4						; size = 4
_event$ = 8						; size = 4
_F_CreditResponder PROC					; COMDAT

; 598  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 599  : 	INT32 key = event->data1;

  00009	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _key$[ebp], ecx

; 600  : 
; 601  : 	// remap virtual keys (mouse & joystick buttons)
; 602  : 	switch (key)

  00012	8b 45 fc	 mov	 eax, DWORD PTR _key$[ebp]
  00015	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  00018	8b 4d b8	 mov	 ecx, DWORD PTR tv65[ebp]
  0001b	81 e9 00 01 00
	00		 sub	 ecx, 256		; 00000100H
  00021	89 4d b8	 mov	 DWORD PTR tv65[ebp], ecx
  00024	83 7d b8 2b	 cmp	 DWORD PTR tv65[ebp], 43	; 0000002bH
  00028	77 60		 ja	 SHORT $LN2@F_CreditRe
  0002a	8b 55 b8	 mov	 edx, DWORD PTR tv65[ebp]
  0002d	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN19@F_CreditRe[edx]
  00034	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN20@F_CreditRe[eax*4]
$LN4@F_CreditRe:

; 603  : 	{
; 604  : 		case KEY_MOUSE1:
; 605  : 			key = KEY_ENTER;

  0003b	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _key$[ebp], 13 ; 0000000dH

; 606  : 			break;

  00042	eb 46		 jmp	 SHORT $LN2@F_CreditRe
$LN5@F_CreditRe:

; 607  : 		case KEY_MOUSE1 + 1:
; 608  : 			key = KEY_BACKSPACE;

  00044	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _key$[ebp], 8

; 609  : 			break;

  0004b	eb 3d		 jmp	 SHORT $LN2@F_CreditRe
$LN6@F_CreditRe:

; 610  : 		case KEY_JOY1:
; 611  : 		case KEY_JOY1 + 2:
; 612  : 			key = KEY_ENTER;

  0004d	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _key$[ebp], 13 ; 0000000dH

; 613  : 			break;

  00054	eb 34		 jmp	 SHORT $LN2@F_CreditRe
$LN8@F_CreditRe:

; 614  : 		case KEY_JOY1 + 3:
; 615  : 			key = 'n';

  00056	c7 45 fc 6e 00
	00 00		 mov	 DWORD PTR _key$[ebp], 110 ; 0000006eH

; 616  : 			break;

  0005d	eb 2b		 jmp	 SHORT $LN2@F_CreditRe
$LN9@F_CreditRe:

; 617  : 		case KEY_JOY1 + 1:
; 618  : 			key = KEY_BACKSPACE;

  0005f	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _key$[ebp], 8

; 619  : 			break;

  00066	eb 22		 jmp	 SHORT $LN2@F_CreditRe
$LN10@F_CreditRe:

; 620  : 		case KEY_HAT1:
; 621  : 			key = KEY_UPARROW;

  00068	c7 45 fc e6 00
	00 00		 mov	 DWORD PTR _key$[ebp], 230 ; 000000e6H

; 622  : 			break;

  0006f	eb 19		 jmp	 SHORT $LN2@F_CreditRe
$LN11@F_CreditRe:

; 623  : 		case KEY_HAT1 + 1:
; 624  : 			key = KEY_DOWNARROW;

  00071	c7 45 fc ee 00
	00 00		 mov	 DWORD PTR _key$[ebp], 238 ; 000000eeH

; 625  : 			break;

  00078	eb 10		 jmp	 SHORT $LN2@F_CreditRe
$LN12@F_CreditRe:

; 626  : 		case KEY_HAT1 + 2:
; 627  : 			key = KEY_LEFTARROW;

  0007a	c7 45 fc e9 00
	00 00		 mov	 DWORD PTR _key$[ebp], 233 ; 000000e9H

; 628  : 			break;

  00081	eb 07		 jmp	 SHORT $LN2@F_CreditRe
$LN13@F_CreditRe:

; 629  : 		case KEY_HAT1 + 3:
; 630  : 			key = KEY_RIGHTARROW;

  00083	c7 45 fc eb 00
	00 00		 mov	 DWORD PTR _key$[ebp], 235 ; 000000ebH
$LN2@F_CreditRe:

; 631  : 			break;
; 632  : 	}
; 633  : 
; 634  : 	if (!(grade & 1))

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0008f	83 e0 01	 and	 eax, 1
  00092	75 04		 jne	 SHORT $LN14@F_CreditRe

; 635  : 		return false;

  00094	33 c0		 xor	 eax, eax
  00096	eb 47		 jmp	 SHORT $LN1@F_CreditRe
$LN14@F_CreditRe:

; 636  : 
; 637  : 	if (event->type != ev_keydown)

  00098	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  0009b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009e	74 04		 je	 SHORT $LN15@F_CreditRe

; 638  : 		return false;

  000a0	33 c0		 xor	 eax, eax
  000a2	eb 3b		 jmp	 SHORT $LN1@F_CreditRe
$LN15@F_CreditRe:

; 639  : 
; 640  : 	if (key != 27 && key != KEY_ENTER && key != KEY_SPACE && key != KEY_BACKSPACE)

  000a4	83 7d fc 1b	 cmp	 DWORD PTR _key$[ebp], 27 ; 0000001bH
  000a8	74 16		 je	 SHORT $LN16@F_CreditRe
  000aa	83 7d fc 0d	 cmp	 DWORD PTR _key$[ebp], 13 ; 0000000dH
  000ae	74 10		 je	 SHORT $LN16@F_CreditRe
  000b0	83 7d fc 20	 cmp	 DWORD PTR _key$[ebp], 32 ; 00000020H
  000b4	74 0a		 je	 SHORT $LN16@F_CreditRe
  000b6	83 7d fc 08	 cmp	 DWORD PTR _key$[ebp], 8
  000ba	74 04		 je	 SHORT $LN16@F_CreditRe

; 641  : 		return false;

  000bc	33 c0		 xor	 eax, eax
  000be	eb 1f		 jmp	 SHORT $LN1@F_CreditRe
$LN16@F_CreditRe:

; 642  : 
; 643  : 	if (keypressed)

  000c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _keypressed, 0
  000c7	74 07		 je	 SHORT $LN17@F_CreditRe

; 644  : 		return true;

  000c9	b8 01 00 00 00	 mov	 eax, 1
  000ce	eb 0f		 jmp	 SHORT $LN1@F_CreditRe
$LN17@F_CreditRe:

; 645  : 
; 646  : 	keypressed = true;

  000d0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _keypressed, 1

; 647  : 	return true;

  000da	b8 01 00 00 00	 mov	 eax, 1
$LN1@F_CreditRe:

; 648  : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
  000e6	66 90		 npad	 2
$LN20@F_CreditRe:
  000e8	00 00 00 00	 DD	 $LN4@F_CreditRe
  000ec	00 00 00 00	 DD	 $LN5@F_CreditRe
  000f0	00 00 00 00	 DD	 $LN6@F_CreditRe
  000f4	00 00 00 00	 DD	 $LN9@F_CreditRe
  000f8	00 00 00 00	 DD	 $LN8@F_CreditRe
  000fc	00 00 00 00	 DD	 $LN10@F_CreditRe
  00100	00 00 00 00	 DD	 $LN11@F_CreditRe
  00104	00 00 00 00	 DD	 $LN12@F_CreditRe
  00108	00 00 00 00	 DD	 $LN13@F_CreditRe
  0010c	00 00 00 00	 DD	 $LN2@F_CreditRe
$LN19@F_CreditRe:
  00110	00		 DB	 0
  00111	01		 DB	 1
  00112	09		 DB	 9
  00113	09		 DB	 9
  00114	09		 DB	 9
  00115	09		 DB	 9
  00116	09		 DB	 9
  00117	09		 DB	 9
  00118	02		 DB	 2
  00119	03		 DB	 3
  0011a	02		 DB	 2
  0011b	04		 DB	 4
  0011c	09		 DB	 9
  0011d	09		 DB	 9
  0011e	09		 DB	 9
  0011f	09		 DB	 9
  00120	09		 DB	 9
  00121	09		 DB	 9
  00122	09		 DB	 9
  00123	09		 DB	 9
  00124	09		 DB	 9
  00125	09		 DB	 9
  00126	09		 DB	 9
  00127	09		 DB	 9
  00128	09		 DB	 9
  00129	09		 DB	 9
  0012a	09		 DB	 9
  0012b	09		 DB	 9
  0012c	09		 DB	 9
  0012d	09		 DB	 9
  0012e	09		 DB	 9
  0012f	09		 DB	 9
  00130	09		 DB	 9
  00131	09		 DB	 9
  00132	09		 DB	 9
  00133	09		 DB	 9
  00134	09		 DB	 9
  00135	09		 DB	 9
  00136	09		 DB	 9
  00137	09		 DB	 9
  00138	05		 DB	 5
  00139	06		 DB	 6
  0013a	07		 DB	 7
  0013b	08		 DB	 8
_F_CreditResponder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_CutsceneResponder
_TEXT	SEGMENT
_event$ = 8						; size = 4
_F_CutsceneResponder PROC				; COMDAT

; 590  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 591  : 	if (cutnum == introtoplay-1)

  00009	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _introtoplay
  00010	83 e8 01	 sub	 eax, 1
  00013	39 05 00 00 00
	00		 cmp	 DWORD PTR _cutnum, eax
  00019	75 0e		 jne	 SHORT $LN2@F_Cutscene

; 592  : 		return F_IntroResponder(event);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _F_IntroResponder
  00024	83 c4 04	 add	 esp, 4
  00027	eb 02		 jmp	 SHORT $LN1@F_Cutscene
$LN2@F_Cutscene:

; 593  : 
; 594  : 	return false;

  00029	33 c0		 xor	 eax, eax
$LN1@F_Cutscene:

; 595  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_F_CutsceneResponder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\f_finale.c
;	COMDAT _F_IntroResponder
_TEXT	SEGMENT
tv65 = -72						; size = 4
_key$ = -4						; size = 4
_event$ = 8						; size = 4
_F_IntroResponder PROC					; COMDAT

; 540  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 541  : 	INT32 key = event->data1;

  00009	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _key$[ebp], ecx

; 542  : 
; 543  : 	// remap virtual keys (mouse & joystick buttons)
; 544  : 	switch (key)

  00012	8b 45 fc	 mov	 eax, DWORD PTR _key$[ebp]
  00015	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  00018	8b 4d b8	 mov	 ecx, DWORD PTR tv65[ebp]
  0001b	81 e9 00 01 00
	00		 sub	 ecx, 256		; 00000100H
  00021	89 4d b8	 mov	 DWORD PTR tv65[ebp], ecx
  00024	83 7d b8 2b	 cmp	 DWORD PTR tv65[ebp], 43	; 0000002bH
  00028	77 60		 ja	 SHORT $LN2@F_IntroRes
  0002a	8b 55 b8	 mov	 edx, DWORD PTR tv65[ebp]
  0002d	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@F_IntroRes[edx]
  00034	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@F_IntroRes[eax*4]
$LN4@F_IntroRes:

; 545  : 	{
; 546  : 		case KEY_MOUSE1:
; 547  : 			key = KEY_ENTER;

  0003b	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _key$[ebp], 13 ; 0000000dH

; 548  : 			break;

  00042	eb 46		 jmp	 SHORT $LN2@F_IntroRes
$LN5@F_IntroRes:

; 549  : 		case KEY_MOUSE1 + 1:
; 550  : 			key = KEY_BACKSPACE;

  00044	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _key$[ebp], 8

; 551  : 			break;

  0004b	eb 3d		 jmp	 SHORT $LN2@F_IntroRes
$LN6@F_IntroRes:

; 552  : 		case KEY_JOY1:
; 553  : 		case KEY_JOY1 + 2:
; 554  : 			key = KEY_ENTER;

  0004d	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _key$[ebp], 13 ; 0000000dH

; 555  : 			break;

  00054	eb 34		 jmp	 SHORT $LN2@F_IntroRes
$LN8@F_IntroRes:

; 556  : 		case KEY_JOY1 + 3:
; 557  : 			key = 'n';

  00056	c7 45 fc 6e 00
	00 00		 mov	 DWORD PTR _key$[ebp], 110 ; 0000006eH

; 558  : 			break;

  0005d	eb 2b		 jmp	 SHORT $LN2@F_IntroRes
$LN9@F_IntroRes:

; 559  : 		case KEY_JOY1 + 1:
; 560  : 			key = KEY_BACKSPACE;

  0005f	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _key$[ebp], 8

; 561  : 			break;

  00066	eb 22		 jmp	 SHORT $LN2@F_IntroRes
$LN10@F_IntroRes:

; 562  : 		case KEY_HAT1:
; 563  : 			key = KEY_UPARROW;

  00068	c7 45 fc e6 00
	00 00		 mov	 DWORD PTR _key$[ebp], 230 ; 000000e6H

; 564  : 			break;

  0006f	eb 19		 jmp	 SHORT $LN2@F_IntroRes
$LN11@F_IntroRes:

; 565  : 		case KEY_HAT1 + 1:
; 566  : 			key = KEY_DOWNARROW;

  00071	c7 45 fc ee 00
	00 00		 mov	 DWORD PTR _key$[ebp], 238 ; 000000eeH

; 567  : 			break;

  00078	eb 10		 jmp	 SHORT $LN2@F_IntroRes
$LN12@F_IntroRes:

; 568  : 		case KEY_HAT1 + 2:
; 569  : 			key = KEY_LEFTARROW;

  0007a	c7 45 fc e9 00
	00 00		 mov	 DWORD PTR _key$[ebp], 233 ; 000000e9H

; 570  : 			break;

  00081	eb 07		 jmp	 SHORT $LN2@F_IntroRes
$LN13@F_IntroRes:

; 571  : 		case KEY_HAT1 + 3:
; 572  : 			key = KEY_RIGHTARROW;

  00083	c7 45 fc eb 00
	00 00		 mov	 DWORD PTR _key$[ebp], 235 ; 000000ebH
$LN2@F_IntroRes:

; 573  : 			break;
; 574  : 	}
; 575  : 
; 576  : 	if (event->type != ev_keydown && key != 301)

  0008a	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  0008d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00090	74 0d		 je	 SHORT $LN14@F_IntroRes
  00092	81 7d fc 2d 01
	00 00		 cmp	 DWORD PTR _key$[ebp], 301 ; 0000012dH
  00099	74 04		 je	 SHORT $LN14@F_IntroRes

; 577  : 		return false;

  0009b	33 c0		 xor	 eax, eax
  0009d	eb 38		 jmp	 SHORT $LN1@F_IntroRes
$LN14@F_IntroRes:

; 578  : 
; 579  : 	if (key != 27 && key != KEY_ENTER && key != KEY_SPACE && key != KEY_BACKSPACE)

  0009f	83 7d fc 1b	 cmp	 DWORD PTR _key$[ebp], 27 ; 0000001bH
  000a3	74 16		 je	 SHORT $LN15@F_IntroRes
  000a5	83 7d fc 0d	 cmp	 DWORD PTR _key$[ebp], 13 ; 0000000dH
  000a9	74 10		 je	 SHORT $LN15@F_IntroRes
  000ab	83 7d fc 20	 cmp	 DWORD PTR _key$[ebp], 32 ; 00000020H
  000af	74 0a		 je	 SHORT $LN15@F_IntroRes
  000b1	83 7d fc 08	 cmp	 DWORD PTR _key$[ebp], 8
  000b5	74 04		 je	 SHORT $LN15@F_IntroRes

; 580  : 		return false;

  000b7	33 c0		 xor	 eax, eax
  000b9	eb 1c		 jmp	 SHORT $LN1@F_IntroRes
$LN15@F_IntroRes:

; 581  : 
; 582  : 	if (keypressed)

  000bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _keypressed, 0
  000c2	74 04		 je	 SHORT $LN16@F_IntroRes

; 583  : 		return false;

  000c4	33 c0		 xor	 eax, eax
  000c6	eb 0f		 jmp	 SHORT $LN1@F_IntroRes
$LN16@F_IntroRes:

; 584  : 
; 585  : 	keypressed = true;

  000c8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _keypressed, 1

; 586  : 	return true;

  000d2	b8 01 00 00 00	 mov	 eax, 1
$LN1@F_IntroRes:

; 587  : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
  000de	66 90		 npad	 2
$LN19@F_IntroRes:
  000e0	00 00 00 00	 DD	 $LN4@F_IntroRes
  000e4	00 00 00 00	 DD	 $LN5@F_IntroRes
  000e8	00 00 00 00	 DD	 $LN6@F_IntroRes
  000ec	00 00 00 00	 DD	 $LN9@F_IntroRes
  000f0	00 00 00 00	 DD	 $LN8@F_IntroRes
  000f4	00 00 00 00	 DD	 $LN10@F_IntroRes
  000f8	00 00 00 00	 DD	 $LN11@F_IntroRes
  000fc	00 00 00 00	 DD	 $LN12@F_IntroRes
  00100	00 00 00 00	 DD	 $LN13@F_IntroRes
  00104	00 00 00 00	 DD	 $LN2@F_IntroRes
$LN18@F_IntroRes:
  00108	00		 DB	 0
  00109	01		 DB	 1
  0010a	09		 DB	 9
  0010b	09		 DB	 9
  0010c	09		 DB	 9
  0010d	09		 DB	 9
  0010e	09		 DB	 9
  0010f	09		 DB	 9
  00110	02		 DB	 2
  00111	03		 DB	 3
  00112	02		 DB	 2
  00113	04		 DB	 4
  00114	09		 DB	 9
  00115	09		 DB	 9
  00116	09		 DB	 9
  00117	09		 DB	 9
  00118	09		 DB	 9
  00119	09		 DB	 9
  0011a	09		 DB	 9
  0011b	09		 DB	 9
  0011c	09		 DB	 9
  0011d	09		 DB	 9
  0011e	09		 DB	 9
  0011f	09		 DB	 9
  00120	09		 DB	 9
  00121	09		 DB	 9
  00122	09		 DB	 9
  00123	09		 DB	 9
  00124	09		 DB	 9
  00125	09		 DB	 9
  00126	09		 DB	 9
  00127	09		 DB	 9
  00128	09		 DB	 9
  00129	09		 DB	 9
  0012a	09		 DB	 9
  0012b	09		 DB	 9
  0012c	09		 DB	 9
  0012d	09		 DB	 9
  0012e	09		 DB	 9
  0012f	09		 DB	 9
  00130	05		 DB	 5
  00131	06		 DB	 6
  00132	07		 DB	 7
  00133	08		 DB	 8
_F_IntroResponder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_FixedInt PROC						; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 222  : 	return FixedMul(a, 1);

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _FixedMul
  00014	83 c4 08	 add	 esp, 8

; 223  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_FixedInt ENDP
_TEXT	ENDS
END
