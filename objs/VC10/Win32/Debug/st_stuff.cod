; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\st_stuff.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_hudinfo
PUBLIC	_objectsdrawn
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_st_overlay:DWORD
COMM	_st_borderpatchnum:DWORD
COMM	_tallnum:DWORD:0aH
COMM	_sboscore:DWORD
COMM	_sbotime:DWORD
COMM	_sbocolon:DWORD
COMM	_faceprefix:DWORD:020H
COMM	_superprefix:DWORD:020H
_DATA	ENDS
_BSS	SEGMENT
_objectsdrawn DW 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_hudinfo DD	010H
	DD	0a6H
	DD	010H
	DD	0b0H
	DD	044H
	DD	0b5H
	DD	024H
	DD	0b8H
	DD	0dcH
	DD	0aH
	DD	0120H
	DD	0aH
	DD	010H
	DD	02aH
	DD	070H
	DD	02aH
	DD	010H
	DD	0aH
	DD	080H
	DD	0aH
	DD	088H
	DD	0aH
	DD	0ccH
	DD	0aH
	DD	0d4H
	DD	0aH
	DD	0bcH
	DD	0aH
	DD	0bcH
	DD	0aH
	DD	011H
	DD	01aH
	DD	080H
	DD	01aH
	DD	088H
	DD	01aH
	DD	068H
	DD	01aH
	DD	070H
	DD	01aH
	DD	058H
	DD	01aH
	DD	058H
	DD	01aH
	DD	070H
	DD	01aH
	DD	0120H
	DD	028H
	DD	070H
	DD	038H
	DD	06eH
	DD	05dH
	DD	0a0H
	DD	05dH
	DD	07cH
	DD	0a0H
	DD	0a8H
	DD	0b0H
	DD	082H
	DD	05dH
	DD	084H
	DD	0a8H
	DD	098H
	DD	0a8H
	DD	0acH
	DD	0a8H
	DD	098H
	DD	018H
	DD	0f0H
	DD	0a0H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_ST_Ticker
PUBLIC	_ST_Drawer
PUBLIC	_ST_Start
PUBLIC	_ST_Init
PUBLIC	_ST_changeDemoView
PUBLIC	_ST_UnloadGraphics
PUBLIC	_ST_LoadGraphics
PUBLIC	_ST_ReloadSkinFaceGraphics
PUBLIC	_ST_LoadFaceGraphics
PUBLIC	_ST_UnLoadFaceGraphics
PUBLIC	_ST_LoadFaceNameGraphics
PUBLIC	_ST_UnLoadFaceNameGraphics
PUBLIC	_ST_doPaletteStuff
PUBLIC	_ST_SameTeam
PUBLIC	_ST_DrawOverlayNum
PUBLIC	??_C@_08CMDALJDO@FLASHPAL@			; `string'
PUBLIC	??_C@_01PINCIBAO@?$IF@				; `string'
PUBLIC	??_C@_01OBMJLAEP@?$IE@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs@			; `string'
PUBLIC	??_C@_01KOIICGII@?$ID@				; `string'
PUBLIC	??_C@_08MGCIBDO@GFZFLR01@			; `string'
PUBLIC	??_C@_08MHBHCHJF@STTNUM?$CFd@			; `string'
PUBLIC	??_C@_08GIKMLEHL@NGTNUM?$CFd@			; `string'
PUBLIC	??_C@_08PPHPPK@SBORINGS@			; `string'
PUBLIC	??_C@_08DPNKAHNH@SBOSCORE@			; `string'
PUBLIC	??_C@_07KGPHOHEB@SBOOVER@			; `string'
PUBLIC	??_C@_08LAMKECJA@TIMEOVER@			; `string'
PUBLIC	??_C@_07FBMCCBDB@STLIVEX@			; `string'
PUBLIC	??_C@_06FNPEPBAH@RRINGS@			; `string'
PUBLIC	??_C@_07LCCNNDDF@SBOTIME@			; `string'
PUBLIC	??_C@_08BMEDKOEL@SBOCOLON@			; `string'
PUBLIC	??_C@_06HHNNNCFH@GETALL@			; `string'
PUBLIC	??_C@_06EBDLDDHJ@TIMEUP@			; `string'
PUBLIC	??_C@_07PMIAGMCN@HOMING1@			; `string'
PUBLIC	??_C@_07NHKNDPOO@HOMING2@			; `string'
PUBLIC	??_C@_07MOLGAOKP@HOMING3@			; `string'
PUBLIC	??_C@_07IBPHJIGI@HOMING4@			; `string'
PUBLIC	??_C@_07JIOMKJCJ@HOMING5@			; `string'
PUBLIC	??_C@_07LDMBPKOK@HOMING6@			; `string'
PUBLIC	??_C@_05FDEFDJBD@RACE1@				; `string'
PUBLIC	??_C@_05HIGIGKNA@RACE2@				; `string'
PUBLIC	??_C@_05GBHDFLJB@RACE3@				; `string'
PUBLIC	??_C@_06KDHAEDMP@RACEGO@			; `string'
PUBLIC	??_C@_08JCFNPCGH@SUPERICO@			; `string'
PUBLIC	??_C@_08NOJDBNDE@NGHTLINK@			; `string'
PUBLIC	??_C@_06MJDICDED@DRWNF0@			; `string'
PUBLIC	??_C@_06MLHOJNBK@DRWNE0@			; `string'
PUBLIC	??_C@_06MKLMPHCN@DRWND0@			; `string'
PUBLIC	??_C@_06MPPDOBKI@DRWNC0@			; `string'
PUBLIC	??_C@_06MODBILJP@DRWNB0@			; `string'
PUBLIC	??_C@_06MMHHDFMG@DRWNA0@			; `string'
PUBLIC	??_C@_07OAHOILAD@CURWEAP@			; `string'
PUBLIC	??_C@_07ILMBDGLO@RINGIND@			; `string'
PUBLIC	??_C@_07PEIDHJKF@BNCEIND@			; `string'
PUBLIC	??_C@_07ELLGJMPA@AUTOIND@			; `string'
PUBLIC	??_C@_07NKNOMPHB@BOMBIND@			; `string'
PUBLIC	??_C@_07DFANDGOJ@SCATIND@			; `string'
PUBLIC	??_C@_07LNJEFDHH@GRENIND@			; `string'
PUBLIC	??_C@_07NCPLHJHA@RAILIND@			; `string'
PUBLIC	??_C@_06OIEHCJJB@WHTVB0@			; `string'
PUBLIC	??_C@_06EGDANIOO@BLTVB0@			; `string'
PUBLIC	??_C@_06CDOJBANK@YLTVB0@			; `string'
PUBLIC	??_C@_06CNNEJEKC@GRTVB0@			; `string'
PUBLIC	??_C@_06FLDFOIFG@BKTVB0@			; `string'
PUBLIC	??_C@_06MMOMELJJ@PINVB0@			; `string'
PUBLIC	??_C@_06BMAIANIC@SHTVB0@			; `string'
PUBLIC	??_C@_06COACJGDJ@GBTVB0@			; `string'
PUBLIC	??_C@_06HIPPMHFB@TAGICO@			; `string'
PUBLIC	??_C@_08OEPNHMLC@RFLAGICO@			; `string'
PUBLIC	??_C@_08EIDNDOMD@BFLAGICO@			; `string'
PUBLIC	??_C@_08HONLDEMM@RMATCICO@			; `string'
PUBLIC	??_C@_08NCBLHGLN@BMATCICO@			; `string'
PUBLIC	??_C@_08NHFEFNP@GOTRFLAG@			; `string'
PUBLIC	??_C@_08OKDEHEE@GOTBFLAG@			; `string'
PUBLIC	??_C@_07OIKFPLFI@NONICON@			; `string'
PUBLIC	??_C@_08CNILBIPE@BLUESTAT@			; `string'
PUBLIC	??_C@_08FJABOKLN@BYELSTAT@			; `string'
PUBLIC	??_C@_08JNOELFIF@ORNGSTAT@			; `string'
PUBLIC	??_C@_07JLHHJEMA@REDSTAT@			; `string'
PUBLIC	??_C@_07CKEOAKPL@YELSTAT@			; `string'
PUBLIC	??_C@_08OPJAPNNN@NBRACKET@			; `string'
PUBLIC	??_C@_05FOPBPLPG@NHUD1@				; `string'
PUBLIC	??_C@_05HFNMKIDF@NHUD2@				; `string'
PUBLIC	??_C@_05GMMHJJHE@NHUD3@				; `string'
PUBLIC	??_C@_05CDIGAPLD@NHUD4@				; `string'
PUBLIC	??_C@_05DKJNDOPC@NHUD5@				; `string'
PUBLIC	??_C@_05BBLAGNDB@NHUD6@				; `string'
PUBLIC	??_C@_05IKLFMHA@NHUD7@				; `string'
PUBLIC	??_C@_05IPDDEALP@NHUD8@				; `string'
PUBLIC	??_C@_05JGCIHBPO@NHUD9@				; `string'
PUBLIC	??_C@_06ILMGJACB@NHUD10@			; `string'
PUBLIC	??_C@_06JCNNKBGA@NHUD11@			; `string'
PUBLIC	??_C@_06LJPAPCKD@NHUD12@			; `string'
PUBLIC	??_C@_08PNELLOKB@MINICAPS@			; `string'
PUBLIC	??_C@_07CLPKMMDP@NARROW1@			; `string'
PUBLIC	??_C@_07NHJPPM@NARROW2@				; `string'
PUBLIC	??_C@_07BJMMKOLN@NARROW3@			; `string'
PUBLIC	??_C@_07FGINDIHK@NARROW4@			; `string'
PUBLIC	??_C@_07EPJGAJDL@NARROW5@			; `string'
PUBLIC	??_C@_07GELLFKPI@NARROW6@			; `string'
PUBLIC	??_C@_07HNKAGLLJ@NARROW7@			; `string'
PUBLIC	??_C@_07PKDIHHHG@NARROW8@			; `string'
PUBLIC	??_C@_07ODCDEGDH@NARROW9@			; `string'
PUBLIC	??_C@_08DCNAEIDC@STTMINUS@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu@				; `string'
PUBLIC	??_C@_06EFDODJGK@MOMX?5?$DN@			; `string'
PUBLIC	??_C@_06PNICFOAP@MOMY?5?$DN@			; `string'
PUBLIC	??_C@_06OPDHPBOB@MOMZ?5?$DN@			; `string'
PUBLIC	??_C@_07OLPELANG@SPEED?5?$DN@			; `string'
PUBLIC	??_C@_07LIOOKHCB@FLOORZ?$DN@			; `string'
PUBLIC	??_C@_07GILNLADC@CEILZ?5?$DN@			; `string'
PUBLIC	??_C@_04FHIDBLHN@CA?5?$DN@			; `string'
PUBLIC	??_C@_05KKOFGJBD@CA2?5?$DN@			; `string'
PUBLIC	??_C@_0L@EACGHIIG@CHARSPED?5?$DN@		; `string'
PUBLIC	??_C@_0L@LGNKDFEJ@CHARFLGS?5?$DN@		; `string'
PUBLIC	??_C@_0L@BNLGLGJC@STRCOLOR?5?$DN@		; `string'
PUBLIC	??_C@_0L@BJIPHAPL@DEDTIMER?5?$DN@		; `string'
PUBLIC	??_C@_0L@GPBPHIFK@JUMPFACT?5?$DN@		; `string'
PUBLIC	??_C@_03ICKHAJPA@X?5?$DN@			; `string'
PUBLIC	??_C@_03DKBLGOJF@Y?5?$DN@			; `string'
PUBLIC	??_C@_03CIKOMBHL@Z?5?$DN@			; `string'
PUBLIC	??_C@_07LDANHJJM@Angle?5?$DN@			; `string'
PUBLIC	??_C@_0N@PFHNENKP@Underwater?5?$DN@		; `string'
PUBLIC	??_C@_0M@PFOMPPJP@MF_JUMPED?5?$DN@		; `string'
PUBLIC	??_C@_0O@BCCIAPAF@MF_SPINNING?5?$DN@		; `string'
PUBLIC	??_C@_0O@DDPLHEF@MF_STARDASH?5?$DN@		; `string'
PUBLIC	??_C@_09HFPCLFGB@Jumping?5?$DN@			; `string'
PUBLIC	??_C@_0L@LCCOJCOH@Scoreadd?5?$DN@		; `string'
PUBLIC	??_C@_07ILADDNDN@TTL?$CF?42d@			; `string'
PUBLIC	??_C@_0BC@BFFPPAKI@BONUS?5TIME?5START?$CB@	; `string'
PUBLIC	??_C@_0DF@LKGNGCBI@Give?5the?5egg?5capsule?5on?5mare?5?$CFd@ ; `string'
PUBLIC	??_C@_09KFDLEEGG@FINISHED?$CB@			; `string'
PUBLIC	??_C@_0L@PMAJHBHD@Lap?3?5?$CFu?1?$CFd@		; `string'
PUBLIC	??_C@_0BP@PDGCFPLF@WAITING?5FOR?5PLAYERS?5TO?5HIDE?4?4?4@ ; `string'
PUBLIC	??_C@_0BL@CAHCNCMO@HIDE?5BEFORE?5TIME?5RUNS?5OUT?$CB@ ; `string'
PUBLIC	??_C@_0BM@LCNLIPGD@FLEE?5BEFORE?5YOU?5ARE?5HUNTED?$CB@ ; `string'
PUBLIC	??_C@_0BF@JABHOCCD@HIDE?5TIME?5REMAINING?3@	; `string'
PUBLIC	??_C@_0L@BIGEFGJE@YOU?8RE?5IT?$CB@		; `string'
PUBLIC	??_C@_0BA@PFELKHCP@TIME?5REMAINING?3@		; `string'
PUBLIC	??_C@_0O@OIOEHGHG@NO?5TIME?5LIMIT@		; `string'
PUBLIC	??_C@_08MGBBANMP@RED?5TEAM@			; `string'
PUBLIC	??_C@_09OHBDAFPG@BLUE?5TEAM@			; `string'
PUBLIC	??_C@_09GNDCBOBP@SPECTATOR@			; `string'
PUBLIC	??_C@_09OGLFPIFG@TIME?5LEFT@			; `string'
PUBLIC	??_C@_05MLHBEHNG@CONT1@				; `string'
PUBLIC	??_C@_09JOJGNNIM@CONTINUE?$DP@			; `string'
PUBLIC	??_C@_05OAFMBEBF@CONT2@				; `string'
PUBLIC	??_C@_09CEFDADJH@thing?5?$CD?5?$DN@		; `string'
PUBLIC	??_C@_07DNKNJLF@flags?5?$DN@			; `string'
PUBLIC	??_C@_06BACFHECC@snap?5?$DN@			; `string'
PUBLIC	??_C@_09PGPHGNLO@OVERTIME?$CB@			; `string'
PUBLIC	??_C@_0L@LFKAMMPB@Viewpoint?3@			; `string'
PUBLIC	??_C@_0BO@FOAIOHHE@I?0?5Pope?5Rededict?5XVI?5proclaim@ ; `string'
PUBLIC	??_C@_08CKJBHHBH@AJ?5?$CG?5Amy@			; `string'
PUBLIC	??_C@_0P@BFEEDBGA@Husband?5?$CG?5Wife@		; `string'
PUBLIC	??_C@_0M@GMKHAHHB@on?5this?5day@		; `string'
PUBLIC	??_C@_0N@HJDKELB@May?516?0?52009@		; `string'
PUBLIC	??_C@_0BI@OPIEGEGP@Oh?4?4?4?5it?8s?5you?5again?4?4?4@ ; `string'
PUBLIC	??_C@_0CI@GDGJBLL@Look?0?5I?5wanted?5to?5apologize?5for@ ; `string'
PUBLIC	??_C@_0BI@NPCFBGKA@I?8ve?5acted?5in?5the?5past?4@ ; `string'
PUBLIC	??_C@_0BP@CBEKALFO@I?8ve?5seen?5the?5error?5of?5my?5ways@ ; `string'
PUBLIC	??_C@_0BM@PGJLBCCN@and?5turned?5over?5a?5new?5leaf?4@ ; `string'
PUBLIC	??_C@_0CD@MEPPHIOG@Instead?5of?5sending?5people?5to?5he@ ; `string'
PUBLIC	??_C@_0BL@BPCEFBNH@I?5now?5send?5them?5to?5heaven?$CB@ ; `string'
PUBLIC	??_C@_0L@NHGJEEMF@Thank?5you?$CB@		; `string'
PUBLIC	??_C@_0BN@EHJMIKDB@But?5our?5earless?5leader?5is?5in@ ; `string'
PUBLIC	??_C@_0BA@LFIGKCJH@another?5castle?$CB@		; `string'
PUBLIC	??_C@_0CD@FIOJJKNK@Press?5F12?5to?5watch?5another?5play@ ; `string'
PUBLIC	??_C@_0BO@COBNAECE@You?5cannot?5move?5while?5hiding?4@ ; `string'
PUBLIC	??_C@_0BH@EJGPHLCO@Press?5Jump?5to?5respawn?4@	; `string'
PUBLIC	??_C@_0BP@POOLNHIO@Press?5?8Toss?5Flag?8?5to?5Spectate?4@ ; `string'
PUBLIC	??_C@_0BF@BJLAEEPD@You?5are?5a?5spectator?4@	; `string'
PUBLIC	??_C@_0CF@CHFHIJME@Press?5Fire?5to?5be?5assigned?5to?5a?5@ ; `string'
PUBLIC	??_C@_0BO@NOKFNDEG@Press?5Fire?5to?5enter?5the?5game?4@ ; `string'
PUBLIC	??_C@_0CG@LPNLLHNC@Press?5Jump?5to?5float?5and?5Spin?5to@ ; `string'
PUBLIC	??_C@_05NKFEPBHH@X?3?5?$CFd@			; `string'
PUBLIC	??_C@_05BBAICCNC@Y?3?5?$CFd@			; `string'
PUBLIC	??_C@_05JHJMFAHM@Z?3?5?$CFd@			; `string'
PUBLIC	??_C@_05POINKCCE@A?3?5?$CFd@			; `string'
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@41000000
PUBLIC	__real@41300000
PUBLIC	__real@42000000
PUBLIC	__real@42600000
PUBLIC	__real@42a00000
PUBLIC	__real@42d00000
PUBLIC	__real@43000000
PUBLIC	__real@430c0000
PUBLIC	__real@43180000
PUBLIC	__real@43240000
PUBLIC	__real@43300000
PUBLIC	__real@433c0000
PUBLIC	__real@43480000
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_atoi:PROC
EXTRN	_strlcpy:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_FixedMul:PROC
EXTRN	_AngleFixed:PROC
EXTRN	_Command_ExitGame_f:PROC
EXTRN	_G_TicsToMinutes:PROC
EXTRN	_G_TicsToSeconds:PROC
EXTRN	_G_TicsToCentiseconds:PROC
EXTRN	_P_AproxDistance:PROC
EXTRN	_P_IsLocalPlayer:PROC
EXTRN	_P_GivePlayerRings:PROC
EXTRN	_P_MobjThinker:PROC
EXTRN	_P_LinedefExecute:PROC
EXTRN	_F_WipeStartScreen:PROC
EXTRN	_F_WipeEndScreen:PROC
EXTRN	_F_RunWipe:PROC
EXTRN	_V_SetPalette:PROC
EXTRN	_V_SetPaletteLump:PROC
EXTRN	_GetPalette:PROC
EXTRN	_V_DrawMappedPatch:PROC
EXTRN	_V_DrawScaledPatch:PROC
EXTRN	_V_DrawSmallScaledPatch:PROC
EXTRN	_V_DrawSmallMappedPatch:PROC
EXTRN	_V_DrawTranslucentPatch:PROC
EXTRN	_V_DrawFill:PROC
EXTRN	_V_DrawLevelTitle:PROC
EXTRN	_V_DrawString:PROC
EXTRN	_V_DrawCenteredString:PROC
EXTRN	_V_DrawTinyNum:PROC
EXTRN	_V_LevelNameWidth:PROC
EXTRN	_Z_FreeTags:PROC
EXTRN	_Z_Free:PROC
EXTRN	_W_GetNumForName:PROC
EXTRN	_W_CacheLumpNum:PROC
EXTRN	_W_CachePatchName:PROC
EXTRN	_S_StopSounds:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_S_ChangeMusic:PROC
EXTRN	_HWR_SetPaletteColor:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_ultimatemode:BYTE
EXTRN	_oncontinuescreen:DWORD
EXTRN	_gamemap:WORD
EXTRN	_maptol:WORD
EXTRN	_modifiedgame:DWORD
EXTRN	_timeattacking:DWORD
EXTRN	_imcontinuing:DWORD
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_circuitmap:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_consoleplayer:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_sstage_start:WORD
EXTRN	_sstage_end:WORD
EXTRN	_useNightsSS:DWORD
EXTRN	_totalrings:DWORD
EXTRN	_redflag:DWORD
EXTRN	_blueflag:DWORD
EXTRN	_mapheaderinfo:BYTE
EXTRN	_emeralds:WORD
EXTRN	_token:DWORD
EXTRN	_tokenlist:DWORD
EXTRN	_sstimer:DWORD
EXTRN	_hunt1:DWORD
EXTRN	_hunt2:DWORD
EXTRN	_hunt3:DWORD
EXTRN	_countdown:DWORD
EXTRN	_hidetime:DWORD
EXTRN	_grade:DWORD
EXTRN	_text:BYTE
EXTRN	_cv_seenames:BYTE
EXTRN	_cv_allowseenames:BYTE
EXTRN	_cv_tagtype:BYTE
EXTRN	_cv_hidetime:BYTE
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_timelimit:BYTE
EXTRN	_cv_numlaps:BYTE
EXTRN	_timelimitintics:DWORD
EXTRN	_cv_objectplace:BYTE
EXTRN	_cv_objflags:BYTE
EXTRN	_cv_snapto:BYTE
EXTRN	_cv_overtime:BYTE
EXTRN	_cv_ringslinger:BYTE
EXTRN	_dedicated:DWORD
EXTRN	_cv_timetic:BYTE
EXTRN	_seenplayer:DWORD
EXTRN	_player_names:BYTE
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_gameovertics:DWORD
EXTRN	_timeinmap:DWORD
EXTRN	_vid:BYTE
EXTRN	_scr_borderpatch:DWORD
EXTRN	_colormaps:DWORD
EXTRN	_sectors:DWORD
EXTRN	_cv_chasecam:BYTE
EXTRN	_cv_chasecam2:BYTE
EXTRN	_numskins:DWORD
EXTRN	_skins:BYTE
EXTRN	_translationtables:BYTE
EXTRN	_defaulttranslationtables:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_thinkercap:BYTE
EXTRN	_stplyr:DWORD
EXTRN	_rendermode:DWORD
EXTRN	_tinyemeraldpics:BYTE
EXTRN	_rflagico:DWORD
EXTRN	_bflagico:DWORD
EXTRN	_rmatcico:DWORD
EXTRN	_bmatcico:DWORD
EXTRN	_tagico:DWORD
EXTRN	_hu_showscores:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	4

_nightsnum DD	0aH DUP (?)
_facenameprefix DD 020H DUP (?)
_sborings DD	01H DUP (?)
_sboover DD	01H DUP (?)
_timeover DD	01H DUP (?)
_stlivex DD	01H DUP (?)
_rrings	DD	01H DUP (?)
_getall	DD	01H DUP (?)
_timeup	DD	01H DUP (?)
_homing1 DD	01H DUP (?)
_homing2 DD	01H DUP (?)
_homing3 DD	01H DUP (?)
_homing4 DD	01H DUP (?)
_homing5 DD	01H DUP (?)
_homing6 DD	01H DUP (?)
_race1	DD	01H DUP (?)
_race2	DD	01H DUP (?)
_race3	DD	01H DUP (?)
_racego	DD	01H DUP (?)
_supersonic DD	01H DUP (?)
_ttlnum	DD	01H DUP (?)
_nightslink DD	01H DUP (?)
_count5	DD	01H DUP (?)
_count4	DD	01H DUP (?)
_count3	DD	01H DUP (?)
_count2	DD	01H DUP (?)
_count1	DD	01H DUP (?)
_count0	DD	01H DUP (?)
_curweapon DD	01H DUP (?)
_normring DD	01H DUP (?)
_bouncering DD	01H DUP (?)
_autoring DD	01H DUP (?)
_explosionring DD 01H DUP (?)
_scatterring DD	01H DUP (?)
_grenadering DD	01H DUP (?)
_railring DD	01H DUP (?)
_jumpshield DD	01H DUP (?)
_forceshield DD	01H DUP (?)
_ringshield DD	01H DUP (?)
_watershield DD	01H DUP (?)
_bombshield DD	01H DUP (?)
_invincibility DD 01H DUP (?)
_sneakers DD	01H DUP (?)
_gravboots DD	01H DUP (?)
_nonicon DD	01H DUP (?)
_bluestat DD	01H DUP (?)
_byelstat DD	01H DUP (?)
_orngstat DD	01H DUP (?)
_redstat DD	01H DUP (?)
_yelstat DD	01H DUP (?)
_nbracket DD	01H DUP (?)
_nhud	DD	0cH DUP (?)
_narrow	DD	09H DUP (?)
_minicaps DD	01H DUP (?)
_minus	DD	01H DUP (?)
_gotrflag DD	01H DUP (?)
_gotbflag DD	01H DUP (?)
_facefreed DD	020H DUP (?)
_prefixfreed DD	020H DUP (?)
_st_palette DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@433c0000
CONST	SEGMENT
__real@433c0000 DD 0433c0000r			; 188
CONST	ENDS
;	COMDAT __real@43300000
CONST	SEGMENT
__real@43300000 DD 043300000r			; 176
CONST	ENDS
;	COMDAT __real@43240000
CONST	SEGMENT
__real@43240000 DD 043240000r			; 164
CONST	ENDS
;	COMDAT __real@43180000
CONST	SEGMENT
__real@43180000 DD 043180000r			; 152
CONST	ENDS
;	COMDAT __real@430c0000
CONST	SEGMENT
__real@430c0000 DD 0430c0000r			; 140
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42d00000
CONST	SEGMENT
__real@42d00000 DD 042d00000r			; 104
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@42600000
CONST	SEGMENT
__real@42600000 DD 042600000r			; 56
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT ??_C@_05POINKCCE@A?3?5?$CFd@
CONST	SEGMENT
??_C@_05POINKCCE@A?3?5?$CFd@ DB 'A: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JHJMFAHM@Z?3?5?$CFd@
CONST	SEGMENT
??_C@_05JHJMFAHM@Z?3?5?$CFd@ DB 'Z: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BBAICCNC@Y?3?5?$CFd@
CONST	SEGMENT
??_C@_05BBAICCNC@Y?3?5?$CFd@ DB 'Y: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NKFEPBHH@X?3?5?$CFd@
CONST	SEGMENT
??_C@_05NKFEPBHH@X?3?5?$CFd@ DB 'X: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LPNLLHNC@Press?5Jump?5to?5float?5and?5Spin?5to@
CONST	SEGMENT
??_C@_0CG@LPNLLHNC@Press?5Jump?5to?5float?5and?5Spin?5to@ DB 'Press Jump '
	DB	'to float and Spin to sink.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NOKFNDEG@Press?5Fire?5to?5enter?5the?5game?4@
CONST	SEGMENT
??_C@_0BO@NOKFNDEG@Press?5Fire?5to?5enter?5the?5game?4@ DB 'Press Fire to'
	DB	' enter the game.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CHFHIJME@Press?5Fire?5to?5be?5assigned?5to?5a?5@
CONST	SEGMENT
??_C@_0CF@CHFHIJME@Press?5Fire?5to?5be?5assigned?5to?5a?5@ DB 'Press Fire'
	DB	' to be assigned to a team.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJLAEEPD@You?5are?5a?5spectator?4@
CONST	SEGMENT
??_C@_0BF@BJLAEEPD@You?5are?5a?5spectator?4@ DB 'You are a spectator.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@POOLNHIO@Press?5?8Toss?5Flag?8?5to?5Spectate?4@
CONST	SEGMENT
??_C@_0BP@POOLNHIO@Press?5?8Toss?5Flag?8?5to?5Spectate?4@ DB 'Press ''Tos'
	DB	's Flag'' to Spectate.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EJGPHLCO@Press?5Jump?5to?5respawn?4@
CONST	SEGMENT
??_C@_0BH@EJGPHLCO@Press?5Jump?5to?5respawn?4@ DB 'Press Jump to respawn.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@COBNAECE@You?5cannot?5move?5while?5hiding?4@
CONST	SEGMENT
??_C@_0BO@COBNAECE@You?5cannot?5move?5while?5hiding?4@ DB 'You cannot mov'
	DB	'e while hiding.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FIOJJKNK@Press?5F12?5to?5watch?5another?5play@
CONST	SEGMENT
??_C@_0CD@FIOJJKNK@Press?5F12?5to?5watch?5another?5play@ DB 'Press F12 to'
	DB	' watch another player.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LFIGKCJH@another?5castle?$CB@
CONST	SEGMENT
??_C@_0BA@LFIGKCJH@another?5castle?$CB@ DB 'another castle!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EHJMIKDB@But?5our?5earless?5leader?5is?5in@
CONST	SEGMENT
??_C@_0BN@EHJMIKDB@But?5our?5earless?5leader?5is?5in@ DB 'But our earless'
	DB	' leader is in', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHGJEEMF@Thank?5you?$CB@
CONST	SEGMENT
??_C@_0L@NHGJEEMF@Thank?5you?$CB@ DB 'Thank you!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BPCEFBNH@I?5now?5send?5them?5to?5heaven?$CB@
CONST	SEGMENT
??_C@_0BL@BPCEFBNH@I?5now?5send?5them?5to?5heaven?$CB@ DB 'I now send the'
	DB	'm to heaven!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MEPPHIOG@Instead?5of?5sending?5people?5to?5he@
CONST	SEGMENT
??_C@_0CD@MEPPHIOG@Instead?5of?5sending?5people?5to?5he@ DB 'Instead of s'
	DB	'ending people to hell,', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PGJLBCCN@and?5turned?5over?5a?5new?5leaf?4@
CONST	SEGMENT
??_C@_0BM@PGJLBCCN@and?5turned?5over?5a?5new?5leaf?4@ DB 'and turned over'
	DB	' a new leaf.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CBEKALFO@I?8ve?5seen?5the?5error?5of?5my?5ways@
CONST	SEGMENT
??_C@_0BP@CBEKALFO@I?8ve?5seen?5the?5error?5of?5my?5ways@ DB 'I''ve seen '
	DB	'the error of my ways', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NPCFBGKA@I?8ve?5acted?5in?5the?5past?4@
CONST	SEGMENT
??_C@_0BI@NPCFBGKA@I?8ve?5acted?5in?5the?5past?4@ DB 'I''ve acted in the '
	DB	'past.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GDGJBLL@Look?0?5I?5wanted?5to?5apologize?5for@
CONST	SEGMENT
??_C@_0CI@GDGJBLL@Look?0?5I?5wanted?5to?5apologize?5for@ DB 'Look, I want'
	DB	'ed to apologize for the way', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OPIEGEGP@Oh?4?4?4?5it?8s?5you?5again?4?4?4@
CONST	SEGMENT
??_C@_0BI@OPIEGEGP@Oh?4?4?4?5it?8s?5you?5again?4?4?4@ DB 'Oh... it''s you'
	DB	' again...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HJDKELB@May?516?0?52009@
CONST	SEGMENT
??_C@_0N@HJDKELB@May?516?0?52009@ DB 'May 16, 2009', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMKHAHHB@on?5this?5day@
CONST	SEGMENT
??_C@_0M@GMKHAHHB@on?5this?5day@ DB 'on this day', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BFEEDBGA@Husband?5?$CG?5Wife@
CONST	SEGMENT
??_C@_0P@BFEEDBGA@Husband?5?$CG?5Wife@ DB 'Husband & Wife', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CKJBHHBH@AJ?5?$CG?5Amy@
CONST	SEGMENT
??_C@_08CKJBHHBH@AJ?5?$CG?5Amy@ DB 'AJ & Amy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FOAIOHHE@I?0?5Pope?5Rededict?5XVI?5proclaim@
CONST	SEGMENT
??_C@_0BO@FOAIOHHE@I?0?5Pope?5Rededict?5XVI?5proclaim@ DB 'I, Pope Rededi'
	DB	'ct XVI proclaim', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LFKAMMPB@Viewpoint?3@
CONST	SEGMENT
??_C@_0L@LFKAMMPB@Viewpoint?3@ DB 'Viewpoint:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGPHGNLO@OVERTIME?$CB@
CONST	SEGMENT
??_C@_09PGPHGNLO@OVERTIME?$CB@ DB 'OVERTIME!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BACFHECC@snap?5?$DN@
CONST	SEGMENT
??_C@_06BACFHECC@snap?5?$DN@ DB 'snap =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DNKNJLF@flags?5?$DN@
CONST	SEGMENT
??_C@_07DNKNJLF@flags?5?$DN@ DB 'flags =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CEFDADJH@thing?5?$CD?5?$DN@
CONST	SEGMENT
??_C@_09CEFDADJH@thing?5?$CD?5?$DN@ DB 'thing # =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OAFMBEBF@CONT2@
CONST	SEGMENT
??_C@_05OAFMBEBF@CONT2@ DB 'CONT2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JOJGNNIM@CONTINUE?$DP@
CONST	SEGMENT
??_C@_09JOJGNNIM@CONTINUE?$DP@ DB 'CONTINUE?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLHBEHNG@CONT1@
CONST	SEGMENT
??_C@_05MLHBEHNG@CONT1@ DB 'CONT1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09OGLFPIFG@TIME?5LEFT@
CONST	SEGMENT
??_C@_09OGLFPIFG@TIME?5LEFT@ DB 'TIME LEFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GNDCBOBP@SPECTATOR@
CONST	SEGMENT
??_C@_09GNDCBOBP@SPECTATOR@ DB 'SPECTATOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OHBDAFPG@BLUE?5TEAM@
CONST	SEGMENT
??_C@_09OHBDAFPG@BLUE?5TEAM@ DB 'BLUE TEAM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGBBANMP@RED?5TEAM@
CONST	SEGMENT
??_C@_08MGBBANMP@RED?5TEAM@ DB 'RED TEAM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OIOEHGHG@NO?5TIME?5LIMIT@
CONST	SEGMENT
??_C@_0O@OIOEHGHG@NO?5TIME?5LIMIT@ DB 'NO TIME LIMIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PFELKHCP@TIME?5REMAINING?3@
CONST	SEGMENT
??_C@_0BA@PFELKHCP@TIME?5REMAINING?3@ DB 'TIME REMAINING:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BIGEFGJE@YOU?8RE?5IT?$CB@
CONST	SEGMENT
??_C@_0L@BIGEFGJE@YOU?8RE?5IT?$CB@ DB 'YOU''RE IT!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JABHOCCD@HIDE?5TIME?5REMAINING?3@
CONST	SEGMENT
??_C@_0BF@JABHOCCD@HIDE?5TIME?5REMAINING?3@ DB 'HIDE TIME REMAINING:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LCNLIPGD@FLEE?5BEFORE?5YOU?5ARE?5HUNTED?$CB@
CONST	SEGMENT
??_C@_0BM@LCNLIPGD@FLEE?5BEFORE?5YOU?5ARE?5HUNTED?$CB@ DB 'FLEE BEFORE YO'
	DB	'U ARE HUNTED!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CAHCNCMO@HIDE?5BEFORE?5TIME?5RUNS?5OUT?$CB@
CONST	SEGMENT
??_C@_0BL@CAHCNCMO@HIDE?5BEFORE?5TIME?5RUNS?5OUT?$CB@ DB 'HIDE BEFORE TIM'
	DB	'E RUNS OUT!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PDGCFPLF@WAITING?5FOR?5PLAYERS?5TO?5HIDE?4?4?4@
CONST	SEGMENT
??_C@_0BP@PDGCFPLF@WAITING?5FOR?5PLAYERS?5TO?5HIDE?4?4?4@ DB 'WAITING FOR'
	DB	' PLAYERS TO HIDE...', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PMAJHBHD@Lap?3?5?$CFu?1?$CFd@
CONST	SEGMENT
??_C@_0L@PMAJHBHD@Lap?3?5?$CFu?1?$CFd@ DB 'Lap: %u/%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KFDLEEGG@FINISHED?$CB@
CONST	SEGMENT
??_C@_09KFDLEEGG@FINISHED?$CB@ DB 'FINISHED!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LKGNGCBI@Give?5the?5egg?5capsule?5on?5mare?5?$CFd@
CONST	SEGMENT
??_C@_0DF@LKGNGCBI@Give?5the?5egg?5capsule?5on?5mare?5?$CFd@ DB 'Give the'
	DB	' egg capsule on mare %d a ring requirement.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BFFPPAKI@BONUS?5TIME?5START?$CB@
CONST	SEGMENT
??_C@_0BC@BFFPPAKI@BONUS?5TIME?5START?$CB@ DB 'BONUS TIME START!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07ILADDNDN@TTL?$CF?42d@
CONST	SEGMENT
??_C@_07ILADDNDN@TTL?$CF?42d@ DB 'TTL%.2d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LCCOJCOH@Scoreadd?5?$DN@
CONST	SEGMENT
??_C@_0L@LCCOJCOH@Scoreadd?5?$DN@ DB 'Scoreadd =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HFPCLFGB@Jumping?5?$DN@
CONST	SEGMENT
??_C@_09HFPCLFGB@Jumping?5?$DN@ DB 'Jumping =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DDPLHEF@MF_STARDASH?5?$DN@
CONST	SEGMENT
??_C@_0O@DDPLHEF@MF_STARDASH?5?$DN@ DB 'MF_STARDASH =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCCIAPAF@MF_SPINNING?5?$DN@
CONST	SEGMENT
??_C@_0O@BCCIAPAF@MF_SPINNING?5?$DN@ DB 'MF_SPINNING =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFOMPPJP@MF_JUMPED?5?$DN@
CONST	SEGMENT
??_C@_0M@PFOMPPJP@MF_JUMPED?5?$DN@ DB 'MF_JUMPED =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PFHNENKP@Underwater?5?$DN@
CONST	SEGMENT
??_C@_0N@PFHNENKP@Underwater?5?$DN@ DB 'Underwater =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LDANHJJM@Angle?5?$DN@
CONST	SEGMENT
??_C@_07LDANHJJM@Angle?5?$DN@ DB 'Angle =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIKOMBHL@Z?5?$DN@
CONST	SEGMENT
??_C@_03CIKOMBHL@Z?5?$DN@ DB 'Z =', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKBLGOJF@Y?5?$DN@
CONST	SEGMENT
??_C@_03DKBLGOJF@Y?5?$DN@ DB 'Y =', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICKHAJPA@X?5?$DN@
CONST	SEGMENT
??_C@_03ICKHAJPA@X?5?$DN@ DB 'X =', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPBPHIFK@JUMPFACT?5?$DN@
CONST	SEGMENT
??_C@_0L@GPBPHIFK@JUMPFACT?5?$DN@ DB 'JUMPFACT =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BJIPHAPL@DEDTIMER?5?$DN@
CONST	SEGMENT
??_C@_0L@BJIPHAPL@DEDTIMER?5?$DN@ DB 'DEDTIMER =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BNLGLGJC@STRCOLOR?5?$DN@
CONST	SEGMENT
??_C@_0L@BNLGLGJC@STRCOLOR?5?$DN@ DB 'STRCOLOR =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LGNKDFEJ@CHARFLGS?5?$DN@
CONST	SEGMENT
??_C@_0L@LGNKDFEJ@CHARFLGS?5?$DN@ DB 'CHARFLGS =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EACGHIIG@CHARSPED?5?$DN@
CONST	SEGMENT
??_C@_0L@EACGHIIG@CHARSPED?5?$DN@ DB 'CHARSPED =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKOFGJBD@CA2?5?$DN@
CONST	SEGMENT
??_C@_05KKOFGJBD@CA2?5?$DN@ DB 'CA2 =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHIDBLHN@CA?5?$DN@
CONST	SEGMENT
??_C@_04FHIDBLHN@CA?5?$DN@ DB 'CA =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GILNLADC@CEILZ?5?$DN@
CONST	SEGMENT
??_C@_07GILNLADC@CEILZ?5?$DN@ DB 'CEILZ =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LIOOKHCB@FLOORZ?$DN@
CONST	SEGMENT
??_C@_07LIOOKHCB@FLOORZ?$DN@ DB 'FLOORZ=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLPELANG@SPEED?5?$DN@
CONST	SEGMENT
??_C@_07OLPELANG@SPEED?5?$DN@ DB 'SPEED =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OPDHPBOB@MOMZ?5?$DN@
CONST	SEGMENT
??_C@_06OPDHPBOB@MOMZ?5?$DN@ DB 'MOMZ =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PNICFOAP@MOMY?5?$DN@
CONST	SEGMENT
??_C@_06PNICFOAP@MOMY?5?$DN@ DB 'MOMY =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFDODJGK@MOMX?5?$DN@
CONST	SEGMENT
??_C@_06EFDODJGK@MOMX?5?$DN@ DB 'MOMX =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu@ DB '%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCNAEIDC@STTMINUS@
CONST	SEGMENT
??_C@_08DCNAEIDC@STTMINUS@ DB 'STTMINUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ODCDEGDH@NARROW9@
CONST	SEGMENT
??_C@_07ODCDEGDH@NARROW9@ DB 'NARROW9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PKDIHHHG@NARROW8@
CONST	SEGMENT
??_C@_07PKDIHHHG@NARROW8@ DB 'NARROW8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HNKAGLLJ@NARROW7@
CONST	SEGMENT
??_C@_07HNKAGLLJ@NARROW7@ DB 'NARROW7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GELLFKPI@NARROW6@
CONST	SEGMENT
??_C@_07GELLFKPI@NARROW6@ DB 'NARROW6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EPJGAJDL@NARROW5@
CONST	SEGMENT
??_C@_07EPJGAJDL@NARROW5@ DB 'NARROW5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FGINDIHK@NARROW4@
CONST	SEGMENT
??_C@_07FGINDIHK@NARROW4@ DB 'NARROW4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BJMMKOLN@NARROW3@
CONST	SEGMENT
??_C@_07BJMMKOLN@NARROW3@ DB 'NARROW3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHJPPM@NARROW2@
CONST	SEGMENT
??_C@_07NHJPPM@NARROW2@ DB 'NARROW2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLPKMMDP@NARROW1@
CONST	SEGMENT
??_C@_07CLPKMMDP@NARROW1@ DB 'NARROW1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNELLOKB@MINICAPS@
CONST	SEGMENT
??_C@_08PNELLOKB@MINICAPS@ DB 'MINICAPS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJPAPCKD@NHUD12@
CONST	SEGMENT
??_C@_06LJPAPCKD@NHUD12@ DB 'NHUD12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCNNKBGA@NHUD11@
CONST	SEGMENT
??_C@_06JCNNKBGA@NHUD11@ DB 'NHUD11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILMGJACB@NHUD10@
CONST	SEGMENT
??_C@_06ILMGJACB@NHUD10@ DB 'NHUD10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JGCIHBPO@NHUD9@
CONST	SEGMENT
??_C@_05JGCIHBPO@NHUD9@ DB 'NHUD9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPDDEALP@NHUD8@
CONST	SEGMENT
??_C@_05IPDDEALP@NHUD8@ DB 'NHUD8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IKLFMHA@NHUD7@
CONST	SEGMENT
??_C@_05IKLFMHA@NHUD7@ DB 'NHUD7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BBLAGNDB@NHUD6@
CONST	SEGMENT
??_C@_05BBLAGNDB@NHUD6@ DB 'NHUD6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DKJNDOPC@NHUD5@
CONST	SEGMENT
??_C@_05DKJNDOPC@NHUD5@ DB 'NHUD5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CDIGAPLD@NHUD4@
CONST	SEGMENT
??_C@_05CDIGAPLD@NHUD4@ DB 'NHUD4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GMMHJJHE@NHUD3@
CONST	SEGMENT
??_C@_05GMMHJJHE@NHUD3@ DB 'NHUD3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFNMKIDF@NHUD2@
CONST	SEGMENT
??_C@_05HFNMKIDF@NHUD2@ DB 'NHUD2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOPBPLPG@NHUD1@
CONST	SEGMENT
??_C@_05FOPBPLPG@NHUD1@ DB 'NHUD1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OPJAPNNN@NBRACKET@
CONST	SEGMENT
??_C@_08OPJAPNNN@NBRACKET@ DB 'NBRACKET', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CKEOAKPL@YELSTAT@
CONST	SEGMENT
??_C@_07CKEOAKPL@YELSTAT@ DB 'YELSTAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JLHHJEMA@REDSTAT@
CONST	SEGMENT
??_C@_07JLHHJEMA@REDSTAT@ DB 'REDSTAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JNOELFIF@ORNGSTAT@
CONST	SEGMENT
??_C@_08JNOELFIF@ORNGSTAT@ DB 'ORNGSTAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJABOKLN@BYELSTAT@
CONST	SEGMENT
??_C@_08FJABOKLN@BYELSTAT@ DB 'BYELSTAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CNILBIPE@BLUESTAT@
CONST	SEGMENT
??_C@_08CNILBIPE@BLUESTAT@ DB 'BLUESTAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OIKFPLFI@NONICON@
CONST	SEGMENT
??_C@_07OIKFPLFI@NONICON@ DB 'NONICON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OKDEHEE@GOTBFLAG@
CONST	SEGMENT
??_C@_08OKDEHEE@GOTBFLAG@ DB 'GOTBFLAG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NHFEFNP@GOTRFLAG@
CONST	SEGMENT
??_C@_08NHFEFNP@GOTRFLAG@ DB 'GOTRFLAG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NCBLHGLN@BMATCICO@
CONST	SEGMENT
??_C@_08NCBLHGLN@BMATCICO@ DB 'BMATCICO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HONLDEMM@RMATCICO@
CONST	SEGMENT
??_C@_08HONLDEMM@RMATCICO@ DB 'RMATCICO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EIDNDOMD@BFLAGICO@
CONST	SEGMENT
??_C@_08EIDNDOMD@BFLAGICO@ DB 'BFLAGICO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OEPNHMLC@RFLAGICO@
CONST	SEGMENT
??_C@_08OEPNHMLC@RFLAGICO@ DB 'RFLAGICO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIPPMHFB@TAGICO@
CONST	SEGMENT
??_C@_06HIPPMHFB@TAGICO@ DB 'TAGICO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06COACJGDJ@GBTVB0@
CONST	SEGMENT
??_C@_06COACJGDJ@GBTVB0@ DB 'GBTVB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMAIANIC@SHTVB0@
CONST	SEGMENT
??_C@_06BMAIANIC@SHTVB0@ DB 'SHTVB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMOMELJJ@PINVB0@
CONST	SEGMENT
??_C@_06MMOMELJJ@PINVB0@ DB 'PINVB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLDFOIFG@BKTVB0@
CONST	SEGMENT
??_C@_06FLDFOIFG@BKTVB0@ DB 'BKTVB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNNEJEKC@GRTVB0@
CONST	SEGMENT
??_C@_06CNNEJEKC@GRTVB0@ DB 'GRTVB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDOJBANK@YLTVB0@
CONST	SEGMENT
??_C@_06CDOJBANK@YLTVB0@ DB 'YLTVB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGDANIOO@BLTVB0@
CONST	SEGMENT
??_C@_06EGDANIOO@BLTVB0@ DB 'BLTVB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIEHCJJB@WHTVB0@
CONST	SEGMENT
??_C@_06OIEHCJJB@WHTVB0@ DB 'WHTVB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NCPLHJHA@RAILIND@
CONST	SEGMENT
??_C@_07NCPLHJHA@RAILIND@ DB 'RAILIND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LNJEFDHH@GRENIND@
CONST	SEGMENT
??_C@_07LNJEFDHH@GRENIND@ DB 'GRENIND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFANDGOJ@SCATIND@
CONST	SEGMENT
??_C@_07DFANDGOJ@SCATIND@ DB 'SCATIND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NKNOMPHB@BOMBIND@
CONST	SEGMENT
??_C@_07NKNOMPHB@BOMBIND@ DB 'BOMBIND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELLGJMPA@AUTOIND@
CONST	SEGMENT
??_C@_07ELLGJMPA@AUTOIND@ DB 'AUTOIND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PEIDHJKF@BNCEIND@
CONST	SEGMENT
??_C@_07PEIDHJKF@BNCEIND@ DB 'BNCEIND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ILMBDGLO@RINGIND@
CONST	SEGMENT
??_C@_07ILMBDGLO@RINGIND@ DB 'RINGIND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OAHOILAD@CURWEAP@
CONST	SEGMENT
??_C@_07OAHOILAD@CURWEAP@ DB 'CURWEAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMHHDFMG@DRWNA0@
CONST	SEGMENT
??_C@_06MMHHDFMG@DRWNA0@ DB 'DRWNA0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MODBILJP@DRWNB0@
CONST	SEGMENT
??_C@_06MODBILJP@DRWNB0@ DB 'DRWNB0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPPDOBKI@DRWNC0@
CONST	SEGMENT
??_C@_06MPPDOBKI@DRWNC0@ DB 'DRWNC0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKLMPHCN@DRWND0@
CONST	SEGMENT
??_C@_06MKLMPHCN@DRWND0@ DB 'DRWND0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLHOJNBK@DRWNE0@
CONST	SEGMENT
??_C@_06MLHOJNBK@DRWNE0@ DB 'DRWNE0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJDICDED@DRWNF0@
CONST	SEGMENT
??_C@_06MJDICDED@DRWNF0@ DB 'DRWNF0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NOJDBNDE@NGHTLINK@
CONST	SEGMENT
??_C@_08NOJDBNDE@NGHTLINK@ DB 'NGHTLINK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCFNPCGH@SUPERICO@
CONST	SEGMENT
??_C@_08JCFNPCGH@SUPERICO@ DB 'SUPERICO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDHAEDMP@RACEGO@
CONST	SEGMENT
??_C@_06KDHAEDMP@RACEGO@ DB 'RACEGO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GBHDFLJB@RACE3@
CONST	SEGMENT
??_C@_05GBHDFLJB@RACE3@ DB 'RACE3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HIGIGKNA@RACE2@
CONST	SEGMENT
??_C@_05HIGIGKNA@RACE2@ DB 'RACE2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDEFDJBD@RACE1@
CONST	SEGMENT
??_C@_05FDEFDJBD@RACE1@ DB 'RACE1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LDMBPKOK@HOMING6@
CONST	SEGMENT
??_C@_07LDMBPKOK@HOMING6@ DB 'HOMING6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JIOMKJCJ@HOMING5@
CONST	SEGMENT
??_C@_07JIOMKJCJ@HOMING5@ DB 'HOMING5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IBPHJIGI@HOMING4@
CONST	SEGMENT
??_C@_07IBPHJIGI@HOMING4@ DB 'HOMING4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MOLGAOKP@HOMING3@
CONST	SEGMENT
??_C@_07MOLGAOKP@HOMING3@ DB 'HOMING3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHKNDPOO@HOMING2@
CONST	SEGMENT
??_C@_07NHKNDPOO@HOMING2@ DB 'HOMING2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PMIAGMCN@HOMING1@
CONST	SEGMENT
??_C@_07PMIAGMCN@HOMING1@ DB 'HOMING1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBDLDDHJ@TIMEUP@
CONST	SEGMENT
??_C@_06EBDLDDHJ@TIMEUP@ DB 'TIMEUP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHNNNCFH@GETALL@
CONST	SEGMENT
??_C@_06HHNNNCFH@GETALL@ DB 'GETALL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BMEDKOEL@SBOCOLON@
CONST	SEGMENT
??_C@_08BMEDKOEL@SBOCOLON@ DB 'SBOCOLON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LCCNNDDF@SBOTIME@
CONST	SEGMENT
??_C@_07LCCNNDDF@SBOTIME@ DB 'SBOTIME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNPEPBAH@RRINGS@
CONST	SEGMENT
??_C@_06FNPEPBAH@RRINGS@ DB 'RRINGS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FBMCCBDB@STLIVEX@
CONST	SEGMENT
??_C@_07FBMCCBDB@STLIVEX@ DB 'STLIVEX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LAMKECJA@TIMEOVER@
CONST	SEGMENT
??_C@_08LAMKECJA@TIMEOVER@ DB 'TIMEOVER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KGPHOHEB@SBOOVER@
CONST	SEGMENT
??_C@_07KGPHOHEB@SBOOVER@ DB 'SBOOVER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPNKAHNH@SBOSCORE@
CONST	SEGMENT
??_C@_08DPNKAHNH@SBOSCORE@ DB 'SBOSCORE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPHPPK@SBORINGS@
CONST	SEGMENT
??_C@_08PPHPPK@SBORINGS@ DB 'SBORINGS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GIKMLEHL@NGTNUM?$CFd@
CONST	SEGMENT
??_C@_08GIKMLEHL@NGTNUM?$CFd@ DB 'NGTNUM%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHBHCHJF@STTNUM?$CFd@
CONST	SEGMENT
??_C@_08MHBHCHJF@STTNUM?$CFd@ DB 'STTNUM%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGCIBDO@GFZFLR01@
CONST	SEGMENT
??_C@_08MGCIBDO@GFZFLR01@ DB 'GFZFLR01', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KOIICGII@?$ID@
CONST	SEGMENT
??_C@_01KOIICGII@?$ID@ DB 083H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01OBMJLAEP@?$IE@
CONST	SEGMENT
??_C@_01OBMJLAEP@?$IE@ DB 084H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PINCIBAO@?$IF@
CONST	SEGMENT
??_C@_01PINCIBAO@?$IF@ DB 085H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMDALJDO@FLASHPAL@
CONST	SEGMENT
??_C@_08CMDALJDO@FLASHPAL@ DB 'FLASHPAL', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_st_stopped DD	01H
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	03faH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	067cH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0277H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0782H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	01d4bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	06cH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0b4H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	07c0H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawEmeraldHuntIcon
_TEXT	SEGMENT
_dist$ = -12						; size = 4
_interval$ = -8						; size = 4
_p$ = -4						; size = 4
_hunt$ = 8						; size = 4
_graphic$ = 12						; size = 4
_ST_drawEmeraldHuntIcon PROC				; COMDAT

; 1831 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1832 : 	patch_t *p;
; 1833 : 	INT32 interval;
; 1834 : 	fixed_t dist = P_AproxDistance(P_AproxDistance(stplyr->mo->x - hunt->x, stplyr->mo->y - hunt->y),

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 55 08	 mov	 edx, DWORD PTR _hunt$[ebp]
  00013	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00016	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00019	50		 push	 eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	8b 45 08	 mov	 eax, DWORD PTR _hunt$[ebp]
  00025	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00028	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0002b	51		 push	 ecx
  0002c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _hunt$[ebp]
  00037	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0003a	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 _P_AproxDistance
  00043	83 c4 08	 add	 esp, 8
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _P_AproxDistance
  0004c	83 c4 08	 add	 esp, 8
  0004f	89 45 f4	 mov	 DWORD PTR _dist$[ebp], eax

; 1835 : 		stplyr->mo->z - hunt->z);
; 1836 : 
; 1837 : 	if (dist < 128<<FRACBITS)

  00052	81 7d f4 00 00
	80 00		 cmp	 DWORD PTR _dist$[ebp], 8388608 ; 00800000H
  00059	7d 11		 jge	 SHORT $LN2@ST_drawEme

; 1838 : 	{
; 1839 : 		p = homing6;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _homing6
  00060	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1840 : 		interval = 5;

  00063	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _interval$[ebp], 5

; 1841 : 	}

  0006a	eb 77		 jmp	 SHORT $LN11@ST_drawEme
$LN2@ST_drawEme:

; 1842 : 	else if (dist < 512<<FRACBITS)

  0006c	81 7d f4 00 00
	00 02		 cmp	 DWORD PTR _dist$[ebp], 33554432 ; 02000000H
  00073	7d 11		 jge	 SHORT $LN4@ST_drawEme

; 1843 : 	{
; 1844 : 		p = homing5;

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR _homing5
  0007a	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1845 : 		interval = 10;

  0007d	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _interval$[ebp], 10 ; 0000000aH

; 1846 : 	}

  00084	eb 5d		 jmp	 SHORT $LN11@ST_drawEme
$LN4@ST_drawEme:

; 1847 : 	else if (dist < 1024<<FRACBITS)

  00086	81 7d f4 00 00
	00 04		 cmp	 DWORD PTR _dist$[ebp], 67108864 ; 04000000H
  0008d	7d 11		 jge	 SHORT $LN6@ST_drawEme

; 1848 : 	{
; 1849 : 		p = homing4;

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _homing4
  00094	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1850 : 		interval = 20;

  00097	c7 45 f8 14 00
	00 00		 mov	 DWORD PTR _interval$[ebp], 20 ; 00000014H

; 1851 : 	}

  0009e	eb 43		 jmp	 SHORT $LN11@ST_drawEme
$LN6@ST_drawEme:

; 1852 : 	else if (dist < 2048<<FRACBITS)

  000a0	81 7d f4 00 00
	00 08		 cmp	 DWORD PTR _dist$[ebp], 134217728 ; 08000000H
  000a7	7d 11		 jge	 SHORT $LN8@ST_drawEme

; 1853 : 	{
; 1854 : 		p = homing3;

  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _homing3
  000ae	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1855 : 		interval = 30;

  000b1	c7 45 f8 1e 00
	00 00		 mov	 DWORD PTR _interval$[ebp], 30 ; 0000001eH

; 1856 : 	}

  000b8	eb 29		 jmp	 SHORT $LN11@ST_drawEme
$LN8@ST_drawEme:

; 1857 : 	else if (dist < 3072<<FRACBITS)

  000ba	81 7d f4 00 00
	00 0c		 cmp	 DWORD PTR _dist$[ebp], 201326592 ; 0c000000H
  000c1	7d 11		 jge	 SHORT $LN10@ST_drawEme

; 1858 : 	{
; 1859 : 		p = homing2;

  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _homing2
  000c8	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1860 : 		interval = 35;

  000cb	c7 45 f8 23 00
	00 00		 mov	 DWORD PTR _interval$[ebp], 35 ; 00000023H

; 1861 : 	}

  000d2	eb 0f		 jmp	 SHORT $LN11@ST_drawEme
$LN10@ST_drawEme:

; 1862 : 	else
; 1863 : 	{
; 1864 : 		p = homing1;

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _homing1
  000d9	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1865 : 		interval = 0;

  000dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _interval$[ebp], 0
$LN11@ST_drawEme:

; 1866 : 	}
; 1867 : 
; 1868 : 	V_DrawScaledPatch(hudinfo[graphic].x, STRINGY(hudinfo[graphic].y), V_TRANSLUCENT, p);

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  000e6	50		 push	 eax
  000e7	68 00 00 40 00	 push	 4194304			; 00400000H
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _graphic$[ebp]
  000ef	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR _hudinfo[ecx*8+4]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _STRINGY
  000fc	83 c4 04	 add	 esp, 4
  000ff	50		 push	 eax
  00100	8b 45 0c	 mov	 eax, DWORD PTR _graphic$[ebp]
  00103	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _hudinfo[eax*8]
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00110	83 c4 10	 add	 esp, 16			; 00000010H

; 1869 : 	if (interval > 0 && leveltime % interval == 0)

  00113	83 7d f8 00	 cmp	 DWORD PTR _interval$[ebp], 0
  00117	7e 1a		 jle	 SHORT $LN12@ST_drawEme
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0011e	33 d2		 xor	 edx, edx
  00120	f7 75 f8	 div	 DWORD PTR _interval$[ebp]
  00123	85 d2		 test	 edx, edx
  00125	75 0c		 jne	 SHORT $LN12@ST_drawEme

; 1870 : 		S_StartSound(NULL, sfx_emfind);

  00127	6a 43		 push	 67			; 00000043H
  00129	6a 00		 push	 0
  0012b	e8 00 00 00 00	 call	 _S_StartSound
  00130	83 c4 08	 add	 esp, 8
$LN12@ST_drawEme:

; 1871 : }

  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
_ST_drawEmeraldHuntIcon ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawContinueHUD
_TEXT	SEGMENT
tv141 = -112						; size = 4
tv182 = -112						; size = 4
_contsonic$ = -44					; size = 4
_stimeleft$ = -40					; size = 33
__$ArrayPad$ = -4					; size = 4
_ST_drawContinueHUD PROC				; COMDAT

; 1748 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 1749 : 	char stimeleft[33];
; 1750 : 	patch_t *contsonic;
; 1751 : 	// Do continue screen here.
; 1752 : 	// Initialize music
; 1753 : 	// For some reason the code doesn't like a simple ==...
; 1754 : 	if (stplyr->deadtimer < gameovertics && stplyr->deadtimer > gameovertics - 2)

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00018	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  0001e	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _gameovertics
  00024	0f 8d 65 01 00
	00		 jge	 $LN3@ST_drawCon
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  0002f	83 e8 02	 sub	 eax, 2
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00038	39 81 28 01 00
	00		 cmp	 DWORD PTR [ecx+296], eax
  0003e	0f 8e 4b 01 00
	00		 jle	 $LN3@ST_drawCon

; 1755 : 	{
; 1756 : 		// Force a screen wipe
; 1757 : 
; 1758 : 		stplyr->deadtimer--;

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00049	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  0004f	83 e9 01	 sub	 ecx, 1
  00052	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00058	89 8a 28 01 00
	00		 mov	 DWORD PTR [edx+296], ecx

; 1759 : 
; 1760 : 		S_ChangeMusic(mus_contsc, false);

  0005e	6a 00		 push	 0
  00060	68 15 04 00 00	 push	 1045			; 00000415H
  00065	e8 00 00 00 00	 call	 _S_ChangeMusic
  0006a	83 c4 08	 add	 esp, 8

; 1761 : 		S_StopSounds();

  0006d	e8 00 00 00 00	 call	 _S_StopSounds
  00072	90		 npad	 1

; 1762 : 		oncontinuescreen = true;

  00073	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _oncontinuescreen, 1

; 1763 : 
; 1764 : 		if (rendermode != render_none)

  0007d	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00084	0f 84 05 01 00
	00		 je	 $LN3@ST_drawCon

; 1765 : 		{
; 1766 : 			// First, read the current screen
; 1767 : 			F_WipeStartScreen();

  0008a	e8 00 00 00 00	 call	 _F_WipeStartScreen
  0008f	90		 npad	 1

; 1768 : 
; 1769 : 			// Then, draw what the new screen will look like.
; 1770 : 			V_DrawFill(0, 0, vid.width, vid.height, 31);

  00090	6a 1f		 push	 31			; 0000001fH
  00092	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00097	50		 push	 eax
  00098	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0009e	51		 push	 ecx
  0009f	6a 00		 push	 0
  000a1	6a 00		 push	 0
  000a3	e8 00 00 00 00	 call	 _V_DrawFill
  000a8	83 c4 14	 add	 esp, 20			; 00000014H

; 1771 : 
; 1772 : 			contsonic = W_CachePatchName("CONT1", PU_CACHE);

  000ab	6a 65		 push	 101			; 00000065H
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_05MLHBEHNG@CONT1@
  000b2	e8 00 00 00 00	 call	 _W_CachePatchName
  000b7	83 c4 08	 add	 esp, 8
  000ba	89 45 d4	 mov	 DWORD PTR _contsonic$[ebp], eax

; 1773 : 			V_DrawScaledPatch((BASEVIDWIDTH-SHORT(contsonic->width))/2, 64, 0, contsonic);

  000bd	8b 45 d4	 mov	 eax, DWORD PTR _contsonic$[ebp]
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	6a 40		 push	 64			; 00000040H
  000c5	8b 4d d4	 mov	 ecx, DWORD PTR _contsonic$[ebp]
  000c8	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  000cb	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  000d0	2b c2		 sub	 eax, edx
  000d2	99		 cdq
  000d3	2b c2		 sub	 eax, edx
  000d5	d1 f8		 sar	 eax, 1
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 1774 : 			V_DrawString(128,128,0, "CONTINUE?");

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_09JOJGNNIM@CONTINUE?$DP@
  000e5	6a 00		 push	 0
  000e7	68 80 00 00 00	 push	 128			; 00000080H
  000ec	68 80 00 00 00	 push	 128			; 00000080H
  000f1	e8 00 00 00 00	 call	 _V_DrawString
  000f6	83 c4 10	 add	 esp, 16			; 00000010H

; 1775 : 			sprintf(stimeleft, "%d", (stplyr->deadtimer - (gameovertics-11*TICRATE))/TICRATE);

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  000fe	2d 81 01 00 00	 sub	 eax, 385		; 00000181H
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00109	8b 91 28 01 00
	00		 mov	 edx, DWORD PTR [ecx+296]
  0010f	2b d0		 sub	 edx, eax
  00111	8b c2		 mov	 eax, edx
  00113	99		 cdq
  00114	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00119	f7 f9		 idiv	 ecx
  0011b	50		 push	 eax
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00121	8d 55 d8	 lea	 edx, DWORD PTR _stimeleft$[ebp]
  00124	52		 push	 edx
  00125	e8 00 00 00 00	 call	 _sprintf
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1776 : 			V_DrawString(stplyr->deadtimer >= (gameovertics-TICRATE) ? 152 : 160,144,0, stimeleft);

  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  00132	83 e8 23	 sub	 eax, 35			; 00000023H
  00135	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  0013b	39 81 28 01 00
	00		 cmp	 DWORD PTR [ecx+296], eax
  00141	7c 09		 jl	 SHORT $LN12@ST_drawCon
  00143	c7 45 90 98 00
	00 00		 mov	 DWORD PTR tv141[ebp], 152 ; 00000098H
  0014a	eb 07		 jmp	 SHORT $LN13@ST_drawCon
$LN12@ST_drawCon:
  0014c	c7 45 90 a0 00
	00 00		 mov	 DWORD PTR tv141[ebp], 160 ; 000000a0H
$LN13@ST_drawCon:
  00153	8d 55 d8	 lea	 edx, DWORD PTR _stimeleft$[ebp]
  00156	52		 push	 edx
  00157	6a 00		 push	 0
  00159	68 90 00 00 00	 push	 144			; 00000090H
  0015e	8b 45 90	 mov	 eax, DWORD PTR tv141[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _V_DrawString
  00167	83 c4 10	 add	 esp, 16			; 00000010H

; 1777 : 
; 1778 : 			// Now, read the end screen we want to fade to.
; 1779 : 			F_WipeEndScreen(0, 0, vid.width, vid.height);

  0016a	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0016f	50		 push	 eax
  00170	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00176	51		 push	 ecx
  00177	6a 00		 push	 0
  00179	6a 00		 push	 0
  0017b	e8 00 00 00 00	 call	 _F_WipeEndScreen
  00180	83 c4 10	 add	 esp, 16			; 00000010H

; 1780 : 
; 1781 : 			// Do the wipe-io!
; 1782 : 			F_RunWipe(2*TICRATE, true);

  00183	6a 01		 push	 1
  00185	6a 46		 push	 70			; 00000046H
  00187	e8 00 00 00 00	 call	 _F_RunWipe
  0018c	83 c4 08	 add	 esp, 8
$LN3@ST_drawCon:

; 1783 : 		}
; 1784 : 	}
; 1785 : 
; 1786 : 	V_DrawFill(0, 0, vid.width, vid.height, 31);

  0018f	6a 1f		 push	 31			; 0000001fH
  00191	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00196	50		 push	 eax
  00197	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0019d	51		 push	 ecx
  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	e8 00 00 00 00	 call	 _V_DrawFill
  001a7	83 c4 14	 add	 esp, 20			; 00000014H

; 1787 : 	V_DrawString(128, 128, 0, "CONTINUE?");

  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_09JOJGNNIM@CONTINUE?$DP@
  001af	6a 00		 push	 0
  001b1	68 80 00 00 00	 push	 128			; 00000080H
  001b6	68 80 00 00 00	 push	 128			; 00000080H
  001bb	e8 00 00 00 00	 call	 _V_DrawString
  001c0	83 c4 10	 add	 esp, 16			; 00000010H

; 1788 : 	// Draw a Sonic!
; 1789 : 	contsonic = W_CachePatchName("CONT1", PU_CACHE);

  001c3	6a 65		 push	 101			; 00000065H
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_05MLHBEHNG@CONT1@
  001ca	e8 00 00 00 00	 call	 _W_CachePatchName
  001cf	83 c4 08	 add	 esp, 8
  001d2	89 45 d4	 mov	 DWORD PTR _contsonic$[ebp], eax

; 1790 : 	V_DrawScaledPatch((BASEVIDWIDTH - SHORT(contsonic->width))/2, 64, 0, contsonic);

  001d5	8b 45 d4	 mov	 eax, DWORD PTR _contsonic$[ebp]
  001d8	50		 push	 eax
  001d9	6a 00		 push	 0
  001db	6a 40		 push	 64			; 00000040H
  001dd	8b 4d d4	 mov	 ecx, DWORD PTR _contsonic$[ebp]
  001e0	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  001e3	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  001e8	2b c2		 sub	 eax, edx
  001ea	99		 cdq
  001eb	2b c2		 sub	 eax, edx
  001ed	d1 f8		 sar	 eax, 1
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001f5	83 c4 10	 add	 esp, 16			; 00000010H

; 1791 : 	sprintf(stimeleft, "%d", (stplyr->deadtimer - (gameovertics-11*TICRATE))/TICRATE);

  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  001fd	2d 81 01 00 00	 sub	 eax, 385		; 00000181H
  00202	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00208	8b 91 28 01 00
	00		 mov	 edx, DWORD PTR [ecx+296]
  0020e	2b d0		 sub	 edx, eax
  00210	8b c2		 mov	 eax, edx
  00212	99		 cdq
  00213	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00218	f7 f9		 idiv	 ecx
  0021a	50		 push	 eax
  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00220	8d 55 d8	 lea	 edx, DWORD PTR _stimeleft$[ebp]
  00223	52		 push	 edx
  00224	e8 00 00 00 00	 call	 _sprintf
  00229	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1792 : 	V_DrawString(stplyr->deadtimer >= (gameovertics-TICRATE) ? 152 : 160, 144, 0, stimeleft);

  0022c	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  00231	83 e8 23	 sub	 eax, 35			; 00000023H
  00234	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  0023a	39 81 28 01 00
	00		 cmp	 DWORD PTR [ecx+296], eax
  00240	7c 09		 jl	 SHORT $LN14@ST_drawCon
  00242	c7 45 90 98 00
	00 00		 mov	 DWORD PTR tv182[ebp], 152 ; 00000098H
  00249	eb 07		 jmp	 SHORT $LN15@ST_drawCon
$LN14@ST_drawCon:
  0024b	c7 45 90 a0 00
	00 00		 mov	 DWORD PTR tv182[ebp], 160 ; 000000a0H
$LN15@ST_drawCon:
  00252	8d 55 d8	 lea	 edx, DWORD PTR _stimeleft$[ebp]
  00255	52		 push	 edx
  00256	6a 00		 push	 0
  00258	68 90 00 00 00	 push	 144			; 00000090H
  0025d	8b 45 90	 mov	 eax, DWORD PTR tv182[ebp]
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 _V_DrawString
  00266	83 c4 10	 add	 esp, 16			; 00000010H

; 1793 : 	if (stplyr->deadtimer < (gameovertics-10*TICRATE))

  00269	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  0026e	2d 5e 01 00 00	 sub	 eax, 350		; 0000015eH
  00273	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00279	39 81 28 01 00
	00		 cmp	 DWORD PTR [ecx+296], eax
  0027f	7d 06		 jge	 SHORT $LN4@ST_drawCon

; 1794 : 		Command_ExitGame_f();

  00281	e8 00 00 00 00	 call	 _Command_ExitGame_f
  00286	90		 npad	 1
$LN4@ST_drawCon:

; 1795 : 	if (stplyr->deadtimer < gameovertics-TICRATE && (stplyr->cmd.buttons & BT_JUMP || stplyr->cmd.buttons & BT_USE))

  00287	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameovertics
  0028c	83 e8 23	 sub	 eax, 35			; 00000023H
  0028f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00295	39 81 28 01 00
	00		 cmp	 DWORD PTR [ecx+296], eax
  0029b	0f 8d 56 01 00
	00		 jge	 $LN5@ST_drawCon
  002a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002a6	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  002aa	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  002b0	75 15		 jne	 SHORT $LN6@ST_drawCon
  002b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002b7	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  002bb	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  002c1	0f 84 30 01 00
	00		 je	 $LN5@ST_drawCon
$LN6@ST_drawCon:

; 1796 : 	{
; 1797 : 		if (stplyr->continues != -1)

  002c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002cc	83 b8 04 01 00
	00 ff		 cmp	 DWORD PTR [eax+260], -1
  002d3	74 1a		 je	 SHORT $LN7@ST_drawCon

; 1798 : 			stplyr->continues--;

  002d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002da	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  002e0	83 e9 01	 sub	 ecx, 1
  002e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  002e9	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx
$LN7@ST_drawCon:

; 1799 : 
; 1800 : 		// Reset score
; 1801 : 		stplyr->score = 0;

  002ef	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002f4	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+188], 0

; 1802 : 
; 1803 : 		// Allow tokens to come back if not a netgame.
; 1804 : 		if (!(netgame || multiplayer))

  002fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00305	75 27		 jne	 SHORT $LN8@ST_drawCon
  00307	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0030e	75 1e		 jne	 SHORT $LN8@ST_drawCon

; 1805 : 		{
; 1806 : 			tokenlist = 0;

  00310	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tokenlist, 0

; 1807 : 			token = 0;

  0031a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _token, 0

; 1808 : 			imcontinuing = true;

  00324	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _imcontinuing, 1
$LN8@ST_drawCon:

; 1809 : 		}
; 1810 : 
; 1811 : 		// Reset # of lives
; 1812 : 		if (ultimatemode)

  0032e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00335	85 c0		 test	 eax, eax
  00337	74 11		 je	 SHORT $LN9@ST_drawCon

; 1813 : 			stplyr->lives = 1;

  00339	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0033e	c7 80 00 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+256], 1
  00348	eb 0f		 jmp	 SHORT $LN10@ST_drawCon
$LN9@ST_drawCon:

; 1814 : 		else
; 1815 : 			stplyr->lives = 3;

  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0034f	c7 80 00 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+256], 3
$LN10@ST_drawCon:

; 1816 : 
; 1817 : 		// Clear any starpost data
; 1818 : 		stplyr->starpostangle = 0;

  00359	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0035e	c7 80 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+404], 0

; 1819 : 		stplyr->starpostbit = 0;

  00368	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0036d	c7 80 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+408], 0

; 1820 : 		stplyr->starpostnum = 0;

  00377	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0037c	c7 80 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+396], 0

; 1821 : 		stplyr->starposttime = 0;

  00386	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0038b	c7 80 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+400], 0

; 1822 : 		stplyr->starpostx = 0;

  00395	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0039a	c7 80 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+384], 0

; 1823 : 		stplyr->starposty = 0;

  003a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  003a9	c7 80 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+388], 0

; 1824 : 		stplyr->starpostz = 0;

  003b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  003b8	c7 80 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+392], 0

; 1825 : 		contsonic = W_CachePatchName("CONT2", PU_CACHE);

  003c2	6a 65		 push	 101			; 00000065H
  003c4	68 00 00 00 00	 push	 OFFSET ??_C@_05OAFMBEBF@CONT2@
  003c9	e8 00 00 00 00	 call	 _W_CachePatchName
  003ce	83 c4 08	 add	 esp, 8
  003d1	89 45 d4	 mov	 DWORD PTR _contsonic$[ebp], eax

; 1826 : 		V_DrawScaledPatch((BASEVIDWIDTH - SHORT(contsonic->width))/2, 64, 0, contsonic);

  003d4	8b 45 d4	 mov	 eax, DWORD PTR _contsonic$[ebp]
  003d7	50		 push	 eax
  003d8	6a 00		 push	 0
  003da	6a 40		 push	 64			; 00000040H
  003dc	8b 4d d4	 mov	 ecx, DWORD PTR _contsonic$[ebp]
  003df	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  003e2	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  003e7	2b c2		 sub	 eax, edx
  003e9	99		 cdq
  003ea	2b c2		 sub	 eax, edx
  003ec	d1 f8		 sar	 eax, 1
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  003f4	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@ST_drawCon:

; 1827 : 	}
; 1828 : }

  003f7	5f		 pop	 edi
  003f8	5e		 pop	 esi
  003f9	5b		 pop	 ebx
  003fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003fd	33 cd		 xor	 ecx, ebp
  003ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00404	8b e5		 mov	 esp, ebp
  00406	5d		 pop	 ebp
  00407	c3		 ret	 0
_ST_drawContinueHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawSpecialStageHUD
_TEXT	SEGMENT
_ST_drawSpecialStageHUD PROC				; COMDAT

; 1720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1721 : 	if (hu_showscores && (netgame || multiplayer))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  00010	74 17		 je	 SHORT $LN2@ST_drawSpe
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00019	75 09		 jne	 SHORT $LN3@ST_drawSpe
  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00022	74 05		 je	 SHORT $LN2@ST_drawSpe
$LN3@ST_drawSpe:

; 1722 : 		return; //hide in netplay only

  00024	e9 1d 02 00 00	 jmp	 $LN9@ST_drawSpe
$LN2@ST_drawSpe:

; 1723 : 
; 1724 : 	if (totalrings > 0)

  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _totalrings, 0
  00030	0f 86 91 00 00
	00		 jbe	 $LN6@ST_drawSpe

; 1725 : 	{
; 1726 : 		if (splitscreen)

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0003d	74 45		 je	 SHORT $LN5@ST_drawSpe

; 1727 : 			ST_DrawOverlayNum(SCX(hudinfo[HUD_SS_TOTALRINGS_SPLIT].x), SCY(hudinfo[HUD_SS_TOTALRINGS_SPLIT].y), totalrings, tallnum);

  0003f	68 00 00 00 00	 push	 OFFSET _tallnum
  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalrings
  00049	50		 push	 eax
  0004a	b9 08 00 00 00	 mov	 ecx, 8
  0004f	6b d1 17	 imul	 edx, ecx, 23
  00052	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _SCY
  0005e	83 c4 04	 add	 esp, 4
  00061	50		 push	 eax
  00062	b9 08 00 00 00	 mov	 ecx, 8
  00067	6b d1 17	 imul	 edx, ecx, 23
  0006a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _SCX
  00076	83 c4 04	 add	 esp, 4
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	eb 43		 jmp	 SHORT $LN6@ST_drawSpe
$LN5@ST_drawSpe:

; 1728 : 		else
; 1729 : 			ST_DrawOverlayNum(SCX(hudinfo[HUD_SS_TOTALRINGS].x), SCY(hudinfo[HUD_SS_TOTALRINGS].y), totalrings, tallnum);

  00084	68 00 00 00 00	 push	 OFFSET _tallnum
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalrings
  0008e	50		 push	 eax
  0008f	b9 08 00 00 00	 mov	 ecx, 8
  00094	6b d1 18	 imul	 edx, ecx, 24
  00097	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _SCY
  000a3	83 c4 04	 add	 esp, 4
  000a6	50		 push	 eax
  000a7	b9 08 00 00 00	 mov	 ecx, 8
  000ac	6b d1 18	 imul	 edx, ecx, 24
  000af	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _SCX
  000bb	83 c4 04	 add	 esp, 4
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@ST_drawSpe:

; 1730 : 	}
; 1731 : 
; 1732 : 	if (leveltime < 5*TICRATE && totalrings > 0)

  000c7	81 3d 00 00 00
	00 af 00 00 00	 cmp	 DWORD PTR _leveltime, 175 ; 000000afH
  000d1	0f 83 9a 00 00
	00		 jae	 $LN7@ST_drawSpe
  000d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _totalrings, 0
  000de	0f 86 8d 00 00
	00		 jbe	 $LN7@ST_drawSpe

; 1733 : 	{
; 1734 : 		V_DrawScaledPatch(hudinfo[HUD_GETRINGS].x, (INT32)(SCY(hudinfo[HUD_GETRINGS].y)/vid.fdupy), V_TRANSLUCENT, getall);

  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _getall
  000e9	50		 push	 eax
  000ea	68 00 00 40 00	 push	 4194304			; 00400000H
  000ef	b9 08 00 00 00	 mov	 ecx, 8
  000f4	6b d1 19	 imul	 edx, ecx, 25
  000f7	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 _SCY
  00103	83 c4 04	 add	 esp, 4
  00106	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0010a	f3 0f 5e 05 2c
	00 00 00	 divss	 xmm0, DWORD PTR _vid+44
  00112	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00116	51		 push	 ecx
  00117	ba 08 00 00 00	 mov	 edx, 8
  0011c	6b c2 19	 imul	 eax, edx, 25
  0011f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0012b	83 c4 10	 add	 esp, 16			; 00000010H

; 1735 : 		ST_DrawOverlayNum(SCX(hudinfo[HUD_GETRINGSNUM].x), SCY(hudinfo[HUD_GETRINGSNUM].y), totalrings, tallnum);

  0012e	68 00 00 00 00	 push	 OFFSET _tallnum
  00133	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalrings
  00138	50		 push	 eax
  00139	b9 08 00 00 00	 mov	 ecx, 8
  0013e	6b d1 1a	 imul	 edx, ecx, 26
  00141	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 _SCY
  0014d	83 c4 04	 add	 esp, 4
  00150	50		 push	 eax
  00151	b9 08 00 00 00	 mov	 ecx, 8
  00156	6b d1 1a	 imul	 edx, ecx, 26
  00159	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _SCX
  00165	83 c4 04	 add	 esp, 4
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  0016e	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@ST_drawSpe:

; 1736 : 	}
; 1737 : 
; 1738 : 	if (sstimer)

  00171	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sstimer, 0
  00178	0f 84 85 00 00
	00		 je	 $LN8@ST_drawSpe

; 1739 : 	{
; 1740 : 		V_DrawString(hudinfo[HUD_TIMELEFT].x, STRINGY(hudinfo[HUD_TIMELEFT].y), 0, "TIME LEFT");

  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_09OGLFPIFG@TIME?5LEFT@
  00183	6a 00		 push	 0
  00185	b8 08 00 00 00	 mov	 eax, 8
  0018a	6b c8 1b	 imul	 ecx, eax, 27
  0018d	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  00193	52		 push	 edx
  00194	e8 00 00 00 00	 call	 _STRINGY
  00199	83 c4 04	 add	 esp, 4
  0019c	50		 push	 eax
  0019d	b8 08 00 00 00	 mov	 eax, 8
  001a2	6b c8 1b	 imul	 ecx, eax, 27
  001a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  001ab	52		 push	 edx
  001ac	e8 00 00 00 00	 call	 _V_DrawString
  001b1	83 c4 10	 add	 esp, 16			; 00000010H

; 1741 : 		ST_DrawNightsOverlayNum(SCX(hudinfo[HUD_TIMELEFTNUM].x), SCY(hudinfo[HUD_TIMELEFTNUM].y), sstimer/TICRATE, tallnum, 13);

  001b4	6a 0d		 push	 13			; 0000000dH
  001b6	68 00 00 00 00	 push	 OFFSET _tallnum
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _sstimer
  001c0	99		 cdq
  001c1	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  001c6	f7 f9		 idiv	 ecx
  001c8	50		 push	 eax
  001c9	ba 08 00 00 00	 mov	 edx, 8
  001ce	6b c2 1c	 imul	 eax, edx, 28
  001d1	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  001d7	51		 push	 ecx
  001d8	e8 00 00 00 00	 call	 _SCY
  001dd	83 c4 04	 add	 esp, 4
  001e0	50		 push	 eax
  001e1	ba 08 00 00 00	 mov	 edx, 8
  001e6	6b c2 1c	 imul	 eax, edx, 28
  001e9	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  001ef	51		 push	 ecx
  001f0	e8 00 00 00 00	 call	 _SCX
  001f5	83 c4 04	 add	 esp, 4
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 _ST_DrawNightsOverlayNum
  001fe	83 c4 14	 add	 esp, 20			; 00000014H

; 1742 : 	}

  00201	eb 43		 jmp	 SHORT $LN9@ST_drawSpe
$LN8@ST_drawSpe:

; 1743 : 	else
; 1744 : 		V_DrawScaledPatch(SCX(hudinfo[HUD_TIMEUP].x), SCY(hudinfo[HUD_TIMEUP].y), V_NOSCALESTART|V_TRANSLUCENT, timeup);

  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR _timeup
  00208	50		 push	 eax
  00209	68 00 00 41 00	 push	 4259840			; 00410000H
  0020e	b9 08 00 00 00	 mov	 ecx, 8
  00213	6b d1 1d	 imul	 edx, ecx, 29
  00216	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 _SCY
  00222	83 c4 04	 add	 esp, 4
  00225	50		 push	 eax
  00226	b9 08 00 00 00	 mov	 ecx, 8
  0022b	6b d1 1d	 imul	 edx, ecx, 29
  0022e	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00234	50		 push	 eax
  00235	e8 00 00 00 00	 call	 _SCX
  0023a	83 c4 04	 add	 esp, 4
  0023d	50		 push	 eax
  0023e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00243	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@ST_drawSpe:

; 1745 : }

  00246	5f		 pop	 edi
  00247	5e		 pop	 esi
  00248	5b		 pop	 ebx
  00249	8b e5		 mov	 esp, ebp
  0024b	5d		 pop	 ebp
  0024c	c3		 ret	 0
_ST_drawSpecialStageHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawTeamMatchHUD
_TEXT	SEGMENT
tv65 = -68						; size = 4
_ST_drawTeamMatchHUD PROC				; COMDAT

; 1686 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1687 : 	//Draw team name
; 1688 : 	switch (stplyr->ctfteam)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0000e	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR [eax+352]
  00014	89 4d bc	 mov	 DWORD PTR tv65[ebp], ecx
  00017	83 7d bc 01	 cmp	 DWORD PTR tv65[ebp], 1
  0001b	74 0b		 je	 SHORT $LN4@ST_drawTea
  0001d	83 7d bc 02	 cmp	 DWORD PTR tv65[ebp], 2
  00021	74 5f		 je	 SHORT $LN7@ST_drawTea
  00023	e9 b1 00 00 00	 jmp	 $LN10@ST_drawTea
$LN4@ST_drawTea:

; 1689 : 	{
; 1690 : 	case 1:
; 1691 : 		if (splitscreen)

  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0002f	74 27		 je	 SHORT $LN5@ST_drawTea

; 1692 : 			V_DrawString(256, STRINGY(184), V_TRANSLUCENT, "RED TEAM");

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_08MGBBANMP@RED?5TEAM@
  00036	68 00 00 40 00	 push	 4194304			; 00400000H
  0003b	68 b8 00 00 00	 push	 184			; 000000b8H
  00040	e8 00 00 00 00	 call	 _STRINGY
  00045	83 c4 04	 add	 esp, 4
  00048	50		 push	 eax
  00049	68 00 01 00 00	 push	 256			; 00000100H
  0004e	e8 00 00 00 00	 call	 _V_DrawString
  00053	83 c4 10	 add	 esp, 16			; 00000010H
  00056	eb 25		 jmp	 SHORT $LN6@ST_drawTea
$LN5@ST_drawTea:

; 1693 : 		else
; 1694 : 			V_DrawString(256, STRINGY(192), V_TRANSLUCENT, "RED TEAM");

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_08MGBBANMP@RED?5TEAM@
  0005d	68 00 00 40 00	 push	 4194304			; 00400000H
  00062	68 c0 00 00 00	 push	 192			; 000000c0H
  00067	e8 00 00 00 00	 call	 _STRINGY
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	68 00 01 00 00	 push	 256			; 00000100H
  00075	e8 00 00 00 00	 call	 _V_DrawString
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@ST_drawTea:

; 1695 : 		break;

  0007d	e9 ac 00 00 00	 jmp	 $LN2@ST_drawTea
$LN7@ST_drawTea:

; 1696 : 	case 2:
; 1697 : 		if (splitscreen)

  00082	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00089	74 27		 je	 SHORT $LN8@ST_drawTea

; 1698 : 			V_DrawString(248, STRINGY(184), V_TRANSLUCENT, "BLUE TEAM");

  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_09OHBDAFPG@BLUE?5TEAM@
  00090	68 00 00 40 00	 push	 4194304			; 00400000H
  00095	68 b8 00 00 00	 push	 184			; 000000b8H
  0009a	e8 00 00 00 00	 call	 _STRINGY
  0009f	83 c4 04	 add	 esp, 4
  000a2	50		 push	 eax
  000a3	68 f8 00 00 00	 push	 248			; 000000f8H
  000a8	e8 00 00 00 00	 call	 _V_DrawString
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
  000b0	eb 25		 jmp	 SHORT $LN9@ST_drawTea
$LN8@ST_drawTea:

; 1699 : 		else
; 1700 : 			V_DrawString(248, STRINGY(192), V_TRANSLUCENT, "BLUE TEAM");

  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_09OHBDAFPG@BLUE?5TEAM@
  000b7	68 00 00 40 00	 push	 4194304			; 00400000H
  000bc	68 c0 00 00 00	 push	 192			; 000000c0H
  000c1	e8 00 00 00 00	 call	 _STRINGY
  000c6	83 c4 04	 add	 esp, 4
  000c9	50		 push	 eax
  000ca	68 f8 00 00 00	 push	 248			; 000000f8H
  000cf	e8 00 00 00 00	 call	 _V_DrawString
  000d4	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@ST_drawTea:

; 1701 : 		break;

  000d7	eb 55		 jmp	 SHORT $LN2@ST_drawTea
$LN10@ST_drawTea:

; 1702 : 	default: //spectators have no team.
; 1703 : 		if (splitscreen)

  000d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000e0	74 27		 je	 SHORT $LN11@ST_drawTea

; 1704 : 			V_DrawString(244, STRINGY(184), V_TRANSLUCENT, "SPECTATOR");

  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_09GNDCBOBP@SPECTATOR@
  000e7	68 00 00 40 00	 push	 4194304			; 00400000H
  000ec	68 b8 00 00 00	 push	 184			; 000000b8H
  000f1	e8 00 00 00 00	 call	 _STRINGY
  000f6	83 c4 04	 add	 esp, 4
  000f9	50		 push	 eax
  000fa	68 f4 00 00 00	 push	 244			; 000000f4H
  000ff	e8 00 00 00 00	 call	 _V_DrawString
  00104	83 c4 10	 add	 esp, 16			; 00000010H
  00107	eb 25		 jmp	 SHORT $LN12@ST_drawTea
$LN11@ST_drawTea:

; 1705 : 		else
; 1706 : 			V_DrawString(244, STRINGY(192), V_TRANSLUCENT, "SPECTATOR");

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_09GNDCBOBP@SPECTATOR@
  0010e	68 00 00 40 00	 push	 4194304			; 00400000H
  00113	68 c0 00 00 00	 push	 192			; 000000c0H
  00118	e8 00 00 00 00	 call	 _STRINGY
  0011d	83 c4 04	 add	 esp, 4
  00120	50		 push	 eax
  00121	68 f4 00 00 00	 push	 244			; 000000f4H
  00126	e8 00 00 00 00	 call	 _V_DrawString
  0012b	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@ST_drawTea:
$LN2@ST_drawTea:

; 1707 : 	}
; 1708 : }

  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5b		 pop	 ebx
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
_ST_drawTeamMatchHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawCTFHUD
_TEXT	SEGMENT
_timeleft$1 = -68					; size = 33
_x$2 = -32						; size = 4
_x$3 = -28						; size = 4
_x$4 = -24						; size = 4
_x$5 = -20						; size = 4
_whichflag$ = -16					; size = 2
_team$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ST_drawCTFHUD PROC					; COMDAT

; 1525 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1526 : 	INT32 i, team;
; 1527 : 	UINT16 whichflag;
; 1528 : 	team = whichflag = 0;

  00016	33 c0		 xor	 eax, eax
  00018	66 89 45 f0	 mov	 WORD PTR _whichflag$[ebp], ax
  0001c	0f b7 4d f0	 movzx	 ecx, WORD PTR _whichflag$[ebp]
  00020	89 4d f4	 mov	 DWORD PTR _team$[ebp], ecx

; 1529 : 
; 1530 : 	for (i = 0; i < MAXPLAYERS; i++)

  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002a	eb 09		 jmp	 SHORT $LN4@ST_drawCTF
$LN2@ST_drawCTF:
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@ST_drawCTF:
  00035	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00039	7d 39		 jge	 SHORT $LN3@ST_drawCTF

; 1531 : 	{
; 1532 : 		if (players[i].gotflag & MF_REDFLAG)

  0003b	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00042	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR _players[eax+356]
  00049	83 e1 01	 and	 ecx, 1
  0004c	74 24		 je	 SHORT $LN8@ST_drawCTF

; 1533 : 		{
; 1534 : 			team = players[i].ctfteam;

  0004e	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00055	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+352]
  0005b	89 4d f4	 mov	 DWORD PTR _team$[ebp], ecx

; 1535 : 			whichflag = players[i].gotflag;

  0005e	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00065	66 8b 88 64 01
	00 00		 mov	 cx, WORD PTR _players[eax+356]
  0006c	66 89 4d f0	 mov	 WORD PTR _whichflag$[ebp], cx

; 1536 : 			break; // break, don't continue.

  00070	eb 02		 jmp	 SHORT $LN3@ST_drawCTF
$LN8@ST_drawCTF:

; 1537 : 		}
; 1538 : 	}

  00072	eb b8		 jmp	 SHORT $LN2@ST_drawCTF
$LN3@ST_drawCTF:

; 1539 : 
; 1540 : 	// Draw the flags
; 1541 : 	if (splitscreen)

  00074	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0007b	74 48		 je	 SHORT $LN9@ST_drawCTF

; 1542 : 	{
; 1543 : 		V_DrawSmallScaledPatch(256, STRINGY(160), 0, rflagico);

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR _rflagico
  00082	50		 push	 eax
  00083	6a 00		 push	 0
  00085	68 a0 00 00 00	 push	 160			; 000000a0H
  0008a	e8 00 00 00 00	 call	 _STRINGY
  0008f	83 c4 04	 add	 esp, 4
  00092	50		 push	 eax
  00093	68 00 01 00 00	 push	 256			; 00000100H
  00098	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0009d	83 c4 10	 add	 esp, 16			; 00000010H

; 1544 : 		V_DrawSmallScaledPatch(288, STRINGY(160), 0, bflagico);

  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _bflagico
  000a5	50		 push	 eax
  000a6	6a 00		 push	 0
  000a8	68 a0 00 00 00	 push	 160			; 000000a0H
  000ad	e8 00 00 00 00	 call	 _STRINGY
  000b2	83 c4 04	 add	 esp, 4
  000b5	50		 push	 eax
  000b6	68 20 01 00 00	 push	 288			; 00000120H
  000bb	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000c0	83 c4 10	 add	 esp, 16			; 00000010H

; 1545 : 	}

  000c3	eb 46		 jmp	 SHORT $LN10@ST_drawCTF
$LN9@ST_drawCTF:

; 1546 : 	else
; 1547 : 	{
; 1548 : 		V_DrawSmallScaledPatch(256, STRINGY(176), 0, rflagico);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _rflagico
  000ca	50		 push	 eax
  000cb	6a 00		 push	 0
  000cd	68 b0 00 00 00	 push	 176			; 000000b0H
  000d2	e8 00 00 00 00	 call	 _STRINGY
  000d7	83 c4 04	 add	 esp, 4
  000da	50		 push	 eax
  000db	68 00 01 00 00	 push	 256			; 00000100H
  000e0	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000e5	83 c4 10	 add	 esp, 16			; 00000010H

; 1549 : 		V_DrawSmallScaledPatch(288, STRINGY(176), 0, bflagico);

  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _bflagico
  000ed	50		 push	 eax
  000ee	6a 00		 push	 0
  000f0	68 b0 00 00 00	 push	 176			; 000000b0H
  000f5	e8 00 00 00 00	 call	 _STRINGY
  000fa	83 c4 04	 add	 esp, 4
  000fd	50		 push	 eax
  000fe	68 20 01 00 00	 push	 288			; 00000120H
  00103	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00108	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@ST_drawCTF:

; 1550 : 	}
; 1551 : 
; 1552 : 	if (stplyr->ctfteam != team && team > 0 && ((stplyr->ctfteam == 1 && whichflag & MF_REDFLAG)

  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00110	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR [eax+352]
  00116	3b 4d f4	 cmp	 ecx, DWORD PTR _team$[ebp]
  00119	0f 84 a2 00 00
	00		 je	 $LN11@ST_drawCTF
  0011f	83 7d f4 00	 cmp	 DWORD PTR _team$[ebp], 0
  00123	0f 8e 98 00 00
	00		 jle	 $LN11@ST_drawCTF
  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0012e	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  00135	75 09		 jne	 SHORT $LN14@ST_drawCTF
  00137	0f b7 45 f0	 movzx	 eax, WORD PTR _whichflag$[ebp]
  0013b	83 e0 01	 and	 eax, 1
  0013e	75 17		 jne	 SHORT $LN13@ST_drawCTF
$LN14@ST_drawCTF:
  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00145	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  0014c	75 73		 jne	 SHORT $LN11@ST_drawCTF
  0014e	0f b7 45 f0	 movzx	 eax, WORD PTR _whichflag$[ebp]
  00152	83 e0 02	 and	 eax, 2
  00155	74 6a		 je	 SHORT $LN11@ST_drawCTF
$LN13@ST_drawCTF:

; 1553 : 		|| (stplyr->ctfteam == 2 && whichflag & MF_BLUEFLAG)))
; 1554 : 	{
; 1555 : 		INT32 x;
; 1556 : 
; 1557 : 		if (whichflag & MF_REDFLAG)

  00157	0f b7 45 f0	 movzx	 eax, WORD PTR _whichflag$[ebp]
  0015b	83 e0 01	 and	 eax, 1
  0015e	74 09		 je	 SHORT $LN15@ST_drawCTF

; 1558 : 			x = 256;

  00160	c7 45 ec 00 01
	00 00		 mov	 DWORD PTR _x$5[ebp], 256 ; 00000100H
  00167	eb 07		 jmp	 SHORT $LN16@ST_drawCTF
$LN15@ST_drawCTF:

; 1559 : 		else
; 1560 : 			x = 288;

  00169	c7 45 ec 20 01
	00 00		 mov	 DWORD PTR _x$5[ebp], 288 ; 00000120H
$LN16@ST_drawCTF:

; 1561 : 
; 1562 : 		// OTHER TEAM HAS YOUR FLAG!
; 1563 : 		if (splitscreen)

  00170	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00177	74 24		 je	 SHORT $LN17@ST_drawCTF

; 1564 : 			V_DrawScaledPatch(x, STRINGY(156), 0, nonicon);

  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR _nonicon
  0017e	50		 push	 eax
  0017f	6a 00		 push	 0
  00181	68 9c 00 00 00	 push	 156			; 0000009cH
  00186	e8 00 00 00 00	 call	 _STRINGY
  0018b	83 c4 04	 add	 esp, 4
  0018e	50		 push	 eax
  0018f	8b 4d ec	 mov	 ecx, DWORD PTR _x$5[ebp]
  00192	51		 push	 ecx
  00193	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00198	83 c4 10	 add	 esp, 16			; 00000010H
  0019b	eb 22		 jmp	 SHORT $LN18@ST_drawCTF
$LN17@ST_drawCTF:

; 1565 : 		else
; 1566 : 			V_DrawScaledPatch(x, STRINGY(156+16), 0, nonicon);

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR _nonicon
  001a2	50		 push	 eax
  001a3	6a 00		 push	 0
  001a5	68 ac 00 00 00	 push	 172			; 000000acH
  001aa	e8 00 00 00 00	 call	 _STRINGY
  001af	83 c4 04	 add	 esp, 4
  001b2	50		 push	 eax
  001b3	8b 4d ec	 mov	 ecx, DWORD PTR _x$5[ebp]
  001b6	51		 push	 ecx
  001b7	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001bc	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@ST_drawCTF:

; 1567 : 	}

  001bf	eb 7e		 jmp	 SHORT $LN23@ST_drawCTF
$LN11@ST_drawCTF:

; 1568 : 	else if (stplyr->ctfteam == team && team > 0)

  001c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  001c6	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR [eax+352]
  001cc	3b 4d f4	 cmp	 ecx, DWORD PTR _team$[ebp]
  001cf	75 6e		 jne	 SHORT $LN23@ST_drawCTF
  001d1	83 7d f4 00	 cmp	 DWORD PTR _team$[ebp], 0
  001d5	7e 68		 jle	 SHORT $LN23@ST_drawCTF

; 1569 : 	{
; 1570 : 		INT32 x;
; 1571 : 
; 1572 : 		if (whichflag & MF_REDFLAG)

  001d7	0f b7 45 f0	 movzx	 eax, WORD PTR _whichflag$[ebp]
  001db	83 e0 01	 and	 eax, 1
  001de	74 09		 je	 SHORT $LN20@ST_drawCTF

; 1573 : 			x = 256;

  001e0	c7 45 e8 00 01
	00 00		 mov	 DWORD PTR _x$4[ebp], 256 ; 00000100H
  001e7	eb 07		 jmp	 SHORT $LN21@ST_drawCTF
$LN20@ST_drawCTF:

; 1574 : 		else
; 1575 : 			x = 288;

  001e9	c7 45 e8 20 01
	00 00		 mov	 DWORD PTR _x$4[ebp], 288 ; 00000120H
$LN21@ST_drawCTF:

; 1576 : 
; 1577 : 		// YOUR TEAM HAS ENEMY FLAG!
; 1578 : 		if (splitscreen)

  001f0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  001f7	74 24		 je	 SHORT $LN22@ST_drawCTF

; 1579 : 			V_DrawScaledPatch(x, STRINGY(156), 0, nonicon);

  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _nonicon
  001fe	50		 push	 eax
  001ff	6a 00		 push	 0
  00201	68 9c 00 00 00	 push	 156			; 0000009cH
  00206	e8 00 00 00 00	 call	 _STRINGY
  0020b	83 c4 04	 add	 esp, 4
  0020e	50		 push	 eax
  0020f	8b 4d e8	 mov	 ecx, DWORD PTR _x$4[ebp]
  00212	51		 push	 ecx
  00213	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00218	83 c4 10	 add	 esp, 16			; 00000010H
  0021b	eb 22		 jmp	 SHORT $LN23@ST_drawCTF
$LN22@ST_drawCTF:

; 1580 : 		else
; 1581 : 			V_DrawScaledPatch(x, STRINGY(156+16), 0, nonicon);

  0021d	a1 00 00 00 00	 mov	 eax, DWORD PTR _nonicon
  00222	50		 push	 eax
  00223	6a 00		 push	 0
  00225	68 ac 00 00 00	 push	 172			; 000000acH
  0022a	e8 00 00 00 00	 call	 _STRINGY
  0022f	83 c4 04	 add	 esp, 4
  00232	50		 push	 eax
  00233	8b 4d e8	 mov	 ecx, DWORD PTR _x$4[ebp]
  00236	51		 push	 ecx
  00237	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0023c	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@ST_drawCTF:

; 1582 : 	}
; 1583 : 
; 1584 : 	team = whichflag = 0;

  0023f	33 c0		 xor	 eax, eax
  00241	66 89 45 f0	 mov	 WORD PTR _whichflag$[ebp], ax
  00245	0f b7 4d f0	 movzx	 ecx, WORD PTR _whichflag$[ebp]
  00249	89 4d f4	 mov	 DWORD PTR _team$[ebp], ecx

; 1585 : 
; 1586 : 	for (i = 0; i < MAXPLAYERS; i++)

  0024c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00253	eb 09		 jmp	 SHORT $LN7@ST_drawCTF
$LN5@ST_drawCTF:
  00255	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00258	83 c0 01	 add	 eax, 1
  0025b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@ST_drawCTF:
  0025e	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00262	7d 39		 jge	 SHORT $LN6@ST_drawCTF

; 1587 : 	{
; 1588 : 		if (players[i].gotflag & MF_BLUEFLAG)

  00264	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0026b	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR _players[eax+356]
  00272	83 e1 02	 and	 ecx, 2
  00275	74 24		 je	 SHORT $LN24@ST_drawCTF

; 1589 : 		{
; 1590 : 			team = players[i].ctfteam;

  00277	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0027e	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+352]
  00284	89 4d f4	 mov	 DWORD PTR _team$[ebp], ecx

; 1591 : 			whichflag = players[i].gotflag;

  00287	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0028e	66 8b 88 64 01
	00 00		 mov	 cx, WORD PTR _players[eax+356]
  00295	66 89 4d f0	 mov	 WORD PTR _whichflag$[ebp], cx

; 1592 : 			break; // break, don't continue.

  00299	eb 02		 jmp	 SHORT $LN6@ST_drawCTF
$LN24@ST_drawCTF:

; 1593 : 		}
; 1594 : 	}

  0029b	eb b8		 jmp	 SHORT $LN5@ST_drawCTF
$LN6@ST_drawCTF:

; 1595 : 	if (stplyr->ctfteam != team && team > 0 && ((stplyr->ctfteam == 1 && whichflag & MF_REDFLAG)

  0029d	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002a2	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR [eax+352]
  002a8	3b 4d f4	 cmp	 ecx, DWORD PTR _team$[ebp]
  002ab	0f 84 a2 00 00
	00		 je	 $LN25@ST_drawCTF
  002b1	83 7d f4 00	 cmp	 DWORD PTR _team$[ebp], 0
  002b5	0f 8e 98 00 00
	00		 jle	 $LN25@ST_drawCTF
  002bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002c0	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  002c7	75 09		 jne	 SHORT $LN28@ST_drawCTF
  002c9	0f b7 45 f0	 movzx	 eax, WORD PTR _whichflag$[ebp]
  002cd	83 e0 01	 and	 eax, 1
  002d0	75 17		 jne	 SHORT $LN27@ST_drawCTF
$LN28@ST_drawCTF:
  002d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002d7	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  002de	75 73		 jne	 SHORT $LN25@ST_drawCTF
  002e0	0f b7 45 f0	 movzx	 eax, WORD PTR _whichflag$[ebp]
  002e4	83 e0 02	 and	 eax, 2
  002e7	74 6a		 je	 SHORT $LN25@ST_drawCTF
$LN27@ST_drawCTF:

; 1596 : 		|| (stplyr->ctfteam == 2 && whichflag & MF_BLUEFLAG)))
; 1597 : 	{
; 1598 : 		INT32 x;
; 1599 : 
; 1600 : 		if (whichflag & MF_REDFLAG)

  002e9	0f b7 45 f0	 movzx	 eax, WORD PTR _whichflag$[ebp]
  002ed	83 e0 01	 and	 eax, 1
  002f0	74 09		 je	 SHORT $LN29@ST_drawCTF

; 1601 : 			x = 256;

  002f2	c7 45 e4 00 01
	00 00		 mov	 DWORD PTR _x$3[ebp], 256 ; 00000100H
  002f9	eb 07		 jmp	 SHORT $LN30@ST_drawCTF
$LN29@ST_drawCTF:

; 1602 : 		else
; 1603 : 			x = 288;

  002fb	c7 45 e4 20 01
	00 00		 mov	 DWORD PTR _x$3[ebp], 288 ; 00000120H
$LN30@ST_drawCTF:

; 1604 : 
; 1605 : 		// OTHER TEAM HAS YOUR FLAG!
; 1606 : 		if (splitscreen)

  00302	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00309	74 24		 je	 SHORT $LN31@ST_drawCTF

; 1607 : 			V_DrawScaledPatch(x, STRINGY(156), 0, nonicon);

  0030b	a1 00 00 00 00	 mov	 eax, DWORD PTR _nonicon
  00310	50		 push	 eax
  00311	6a 00		 push	 0
  00313	68 9c 00 00 00	 push	 156			; 0000009cH
  00318	e8 00 00 00 00	 call	 _STRINGY
  0031d	83 c4 04	 add	 esp, 4
  00320	50		 push	 eax
  00321	8b 4d e4	 mov	 ecx, DWORD PTR _x$3[ebp]
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0032a	83 c4 10	 add	 esp, 16			; 00000010H
  0032d	eb 22		 jmp	 SHORT $LN32@ST_drawCTF
$LN31@ST_drawCTF:

; 1608 : 		else
; 1609 : 			V_DrawScaledPatch(x, STRINGY(156+16), 0, nonicon);

  0032f	a1 00 00 00 00	 mov	 eax, DWORD PTR _nonicon
  00334	50		 push	 eax
  00335	6a 00		 push	 0
  00337	68 ac 00 00 00	 push	 172			; 000000acH
  0033c	e8 00 00 00 00	 call	 _STRINGY
  00341	83 c4 04	 add	 esp, 4
  00344	50		 push	 eax
  00345	8b 4d e4	 mov	 ecx, DWORD PTR _x$3[ebp]
  00348	51		 push	 ecx
  00349	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0034e	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@ST_drawCTF:

; 1610 : 	}

  00351	eb 7e		 jmp	 SHORT $LN37@ST_drawCTF
$LN25@ST_drawCTF:

; 1611 : 	else if (stplyr->ctfteam == team && team > 0)

  00353	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00358	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR [eax+352]
  0035e	3b 4d f4	 cmp	 ecx, DWORD PTR _team$[ebp]
  00361	75 6e		 jne	 SHORT $LN37@ST_drawCTF
  00363	83 7d f4 00	 cmp	 DWORD PTR _team$[ebp], 0
  00367	7e 68		 jle	 SHORT $LN37@ST_drawCTF

; 1612 : 	{
; 1613 : 		INT32 x;
; 1614 : 
; 1615 : 		if (whichflag & MF_REDFLAG)

  00369	0f b7 45 f0	 movzx	 eax, WORD PTR _whichflag$[ebp]
  0036d	83 e0 01	 and	 eax, 1
  00370	74 09		 je	 SHORT $LN34@ST_drawCTF

; 1616 : 			x = 256;

  00372	c7 45 e0 00 01
	00 00		 mov	 DWORD PTR _x$2[ebp], 256 ; 00000100H
  00379	eb 07		 jmp	 SHORT $LN35@ST_drawCTF
$LN34@ST_drawCTF:

; 1617 : 		else
; 1618 : 			x = 288;

  0037b	c7 45 e0 20 01
	00 00		 mov	 DWORD PTR _x$2[ebp], 288 ; 00000120H
$LN35@ST_drawCTF:

; 1619 : 
; 1620 : 		// YOUR TEAM HAS ENEMY FLAG!
; 1621 : 		if (splitscreen)

  00382	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00389	74 24		 je	 SHORT $LN36@ST_drawCTF

; 1622 : 			V_DrawScaledPatch(x, STRINGY(156), 0, nonicon);

  0038b	a1 00 00 00 00	 mov	 eax, DWORD PTR _nonicon
  00390	50		 push	 eax
  00391	6a 00		 push	 0
  00393	68 9c 00 00 00	 push	 156			; 0000009cH
  00398	e8 00 00 00 00	 call	 _STRINGY
  0039d	83 c4 04	 add	 esp, 4
  003a0	50		 push	 eax
  003a1	8b 4d e0	 mov	 ecx, DWORD PTR _x$2[ebp]
  003a4	51		 push	 ecx
  003a5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  003aa	83 c4 10	 add	 esp, 16			; 00000010H
  003ad	eb 22		 jmp	 SHORT $LN37@ST_drawCTF
$LN36@ST_drawCTF:

; 1623 : 		else
; 1624 : 			V_DrawScaledPatch(x, STRINGY(156+16), 0, nonicon);

  003af	a1 00 00 00 00	 mov	 eax, DWORD PTR _nonicon
  003b4	50		 push	 eax
  003b5	6a 00		 push	 0
  003b7	68 ac 00 00 00	 push	 172			; 000000acH
  003bc	e8 00 00 00 00	 call	 _STRINGY
  003c1	83 c4 04	 add	 esp, 4
  003c4	50		 push	 eax
  003c5	8b 4d e0	 mov	 ecx, DWORD PTR _x$2[ebp]
  003c8	51		 push	 ecx
  003c9	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  003ce	83 c4 10	 add	 esp, 16			; 00000010H
$LN37@ST_drawCTF:

; 1625 : 	}
; 1626 : 
; 1627 : 	if (stplyr->gotflag & MF_REDFLAG)

  003d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  003d6	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  003dd	83 e1 01	 and	 ecx, 1
  003e0	74 53		 je	 SHORT $LN38@ST_drawCTF

; 1628 : 	{
; 1629 : 		// YOU HAVE THE RED FLAG
; 1630 : 		if (splitscreen)

  003e2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  003e9	74 25		 je	 SHORT $LN40@ST_drawCTF

; 1631 : 			V_DrawScaledPatch(224, STRINGY(160), 0, gotrflag);

  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _gotrflag
  003f0	50		 push	 eax
  003f1	6a 00		 push	 0
  003f3	68 a0 00 00 00	 push	 160			; 000000a0H
  003f8	e8 00 00 00 00	 call	 _STRINGY
  003fd	83 c4 04	 add	 esp, 4
  00400	50		 push	 eax
  00401	68 e0 00 00 00	 push	 224			; 000000e0H
  00406	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0040b	83 c4 10	 add	 esp, 16			; 00000010H
  0040e	eb 23		 jmp	 SHORT $LN41@ST_drawCTF
$LN40@ST_drawCTF:

; 1632 : 		else
; 1633 : 			V_DrawScaledPatch(224, STRINGY(176), 0, gotrflag);

  00410	a1 00 00 00 00	 mov	 eax, DWORD PTR _gotrflag
  00415	50		 push	 eax
  00416	6a 00		 push	 0
  00418	68 b0 00 00 00	 push	 176			; 000000b0H
  0041d	e8 00 00 00 00	 call	 _STRINGY
  00422	83 c4 04	 add	 esp, 4
  00425	50		 push	 eax
  00426	68 e0 00 00 00	 push	 224			; 000000e0H
  0042b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00430	83 c4 10	 add	 esp, 16			; 00000010H
$LN41@ST_drawCTF:

; 1634 : 	}

  00433	eb 62		 jmp	 SHORT $LN44@ST_drawCTF
$LN38@ST_drawCTF:

; 1635 : 	else if (stplyr->gotflag & MF_BLUEFLAG)

  00435	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0043a	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  00441	83 e1 02	 and	 ecx, 2
  00444	74 51		 je	 SHORT $LN44@ST_drawCTF

; 1636 : 	{
; 1637 : 		// YOU HAVE THE BLUE FLAG
; 1638 : 		if (splitscreen)

  00446	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0044d	74 25		 je	 SHORT $LN43@ST_drawCTF

; 1639 : 			V_DrawScaledPatch(224, STRINGY(160), 0, gotbflag);

  0044f	a1 00 00 00 00	 mov	 eax, DWORD PTR _gotbflag
  00454	50		 push	 eax
  00455	6a 00		 push	 0
  00457	68 a0 00 00 00	 push	 160			; 000000a0H
  0045c	e8 00 00 00 00	 call	 _STRINGY
  00461	83 c4 04	 add	 esp, 4
  00464	50		 push	 eax
  00465	68 e0 00 00 00	 push	 224			; 000000e0H
  0046a	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0046f	83 c4 10	 add	 esp, 16			; 00000010H
  00472	eb 23		 jmp	 SHORT $LN44@ST_drawCTF
$LN43@ST_drawCTF:

; 1640 : 		else
; 1641 : 			V_DrawScaledPatch(224, STRINGY(176), 0, gotbflag);

  00474	a1 00 00 00 00	 mov	 eax, DWORD PTR _gotbflag
  00479	50		 push	 eax
  0047a	6a 00		 push	 0
  0047c	68 b0 00 00 00	 push	 176			; 000000b0H
  00481	e8 00 00 00 00	 call	 _STRINGY
  00486	83 c4 04	 add	 esp, 4
  00489	50		 push	 eax
  0048a	68 e0 00 00 00	 push	 224			; 000000e0H
  0048f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00494	83 c4 10	 add	 esp, 16			; 00000010H
$LN44@ST_drawCTF:

; 1642 : 	}
; 1643 : 	if (stplyr->ctfteam == 1)

  00497	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0049c	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  004a3	75 5a		 jne	 SHORT $LN45@ST_drawCTF

; 1644 : 	{
; 1645 : 		if (splitscreen)

  004a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  004ac	74 27		 je	 SHORT $LN47@ST_drawCTF

; 1646 : 			V_DrawString(256, STRINGY(184), V_TRANSLUCENT, "RED TEAM");

  004ae	68 00 00 00 00	 push	 OFFSET ??_C@_08MGBBANMP@RED?5TEAM@
  004b3	68 00 00 40 00	 push	 4194304			; 00400000H
  004b8	68 b8 00 00 00	 push	 184			; 000000b8H
  004bd	e8 00 00 00 00	 call	 _STRINGY
  004c2	83 c4 04	 add	 esp, 4
  004c5	50		 push	 eax
  004c6	68 00 01 00 00	 push	 256			; 00000100H
  004cb	e8 00 00 00 00	 call	 _V_DrawString
  004d0	83 c4 10	 add	 esp, 16			; 00000010H
  004d3	eb 25		 jmp	 SHORT $LN48@ST_drawCTF
$LN47@ST_drawCTF:

; 1647 : 		else
; 1648 : 			V_DrawString(256, STRINGY(192), V_TRANSLUCENT, "RED TEAM");

  004d5	68 00 00 00 00	 push	 OFFSET ??_C@_08MGBBANMP@RED?5TEAM@
  004da	68 00 00 40 00	 push	 4194304			; 00400000H
  004df	68 c0 00 00 00	 push	 192			; 000000c0H
  004e4	e8 00 00 00 00	 call	 _STRINGY
  004e9	83 c4 04	 add	 esp, 4
  004ec	50		 push	 eax
  004ed	68 00 01 00 00	 push	 256			; 00000100H
  004f2	e8 00 00 00 00	 call	 _V_DrawString
  004f7	83 c4 10	 add	 esp, 16			; 00000010H
$LN48@ST_drawCTF:

; 1649 : 	}

  004fa	e9 ba 00 00 00	 jmp	 $LN54@ST_drawCTF
$LN45@ST_drawCTF:

; 1650 : 	else if (stplyr->ctfteam == 2)

  004ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00504	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  0050b	75 57		 jne	 SHORT $LN49@ST_drawCTF

; 1651 : 	{
; 1652 : 		if (splitscreen)

  0050d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00514	74 27		 je	 SHORT $LN51@ST_drawCTF

; 1653 : 			V_DrawString(248, STRINGY(184), V_TRANSLUCENT, "BLUE TEAM");

  00516	68 00 00 00 00	 push	 OFFSET ??_C@_09OHBDAFPG@BLUE?5TEAM@
  0051b	68 00 00 40 00	 push	 4194304			; 00400000H
  00520	68 b8 00 00 00	 push	 184			; 000000b8H
  00525	e8 00 00 00 00	 call	 _STRINGY
  0052a	83 c4 04	 add	 esp, 4
  0052d	50		 push	 eax
  0052e	68 f8 00 00 00	 push	 248			; 000000f8H
  00533	e8 00 00 00 00	 call	 _V_DrawString
  00538	83 c4 10	 add	 esp, 16			; 00000010H
  0053b	eb 25		 jmp	 SHORT $LN52@ST_drawCTF
$LN51@ST_drawCTF:

; 1654 : 		else
; 1655 : 			V_DrawString(248, STRINGY(192), V_TRANSLUCENT, "BLUE TEAM");

  0053d	68 00 00 00 00	 push	 OFFSET ??_C@_09OHBDAFPG@BLUE?5TEAM@
  00542	68 00 00 40 00	 push	 4194304			; 00400000H
  00547	68 c0 00 00 00	 push	 192			; 000000c0H
  0054c	e8 00 00 00 00	 call	 _STRINGY
  00551	83 c4 04	 add	 esp, 4
  00554	50		 push	 eax
  00555	68 f8 00 00 00	 push	 248			; 000000f8H
  0055a	e8 00 00 00 00	 call	 _V_DrawString
  0055f	83 c4 10	 add	 esp, 16			; 00000010H
$LN52@ST_drawCTF:

; 1656 : 	}

  00562	eb 55		 jmp	 SHORT $LN54@ST_drawCTF
$LN49@ST_drawCTF:

; 1657 : 	else
; 1658 : 	{
; 1659 : 		if (splitscreen)

  00564	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0056b	74 27		 je	 SHORT $LN53@ST_drawCTF

; 1660 : 			V_DrawString(244, STRINGY(184), V_TRANSLUCENT, "SPECTATOR");

  0056d	68 00 00 00 00	 push	 OFFSET ??_C@_09GNDCBOBP@SPECTATOR@
  00572	68 00 00 40 00	 push	 4194304			; 00400000H
  00577	68 b8 00 00 00	 push	 184			; 000000b8H
  0057c	e8 00 00 00 00	 call	 _STRINGY
  00581	83 c4 04	 add	 esp, 4
  00584	50		 push	 eax
  00585	68 f4 00 00 00	 push	 244			; 000000f4H
  0058a	e8 00 00 00 00	 call	 _V_DrawString
  0058f	83 c4 10	 add	 esp, 16			; 00000010H
  00592	eb 25		 jmp	 SHORT $LN54@ST_drawCTF
$LN53@ST_drawCTF:

; 1661 : 		else
; 1662 : 			V_DrawString(244, STRINGY(192), V_TRANSLUCENT, "SPECTATOR");

  00594	68 00 00 00 00	 push	 OFFSET ??_C@_09GNDCBOBP@SPECTATOR@
  00599	68 00 00 40 00	 push	 4194304			; 00400000H
  0059e	68 c0 00 00 00	 push	 192			; 000000c0H
  005a3	e8 00 00 00 00	 call	 _STRINGY
  005a8	83 c4 04	 add	 esp, 4
  005ab	50		 push	 eax
  005ac	68 f4 00 00 00	 push	 244			; 000000f4H
  005b1	e8 00 00 00 00	 call	 _V_DrawString
  005b6	83 c4 10	 add	 esp, 16			; 00000010H
$LN54@ST_drawCTF:

; 1663 : 	}
; 1664 : 
; 1665 : 	// Display a countdown timer showing how much time left until the flag your team dropped returns to base.
; 1666 : 	{
; 1667 : 		char timeleft[33];
; 1668 : 		if (redflag && redflag->fuse)

  005b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _redflag, 0
  005c0	74 57		 je	 SHORT $LN55@ST_drawCTF
  005c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _redflag
  005c7	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  005ce	74 49		 je	 SHORT $LN55@ST_drawCTF

; 1669 : 		{
; 1670 : 			sprintf(timeleft, "%u", (redflag->fuse / TICRATE));

  005d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _redflag
  005d5	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [eax+188]
  005db	99		 cdq
  005dc	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  005e1	f7 f9		 idiv	 ecx
  005e3	50		 push	 eax
  005e4	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  005e9	8d 55 bc	 lea	 edx, DWORD PTR _timeleft$1[ebp]
  005ec	52		 push	 edx
  005ed	e8 00 00 00 00	 call	 _sprintf
  005f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1671 : 			V_DrawCenteredString(268, STRINGY(184), V_YELLOWMAP, timeleft);

  005f5	8d 45 bc	 lea	 eax, DWORD PTR _timeleft$1[ebp]
  005f8	50		 push	 eax
  005f9	68 00 00 10 00	 push	 1048576			; 00100000H
  005fe	68 b8 00 00 00	 push	 184			; 000000b8H
  00603	e8 00 00 00 00	 call	 _STRINGY
  00608	83 c4 04	 add	 esp, 4
  0060b	50		 push	 eax
  0060c	68 0c 01 00 00	 push	 268			; 0000010cH
  00611	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00616	83 c4 10	 add	 esp, 16			; 00000010H
$LN55@ST_drawCTF:

; 1672 : 		}
; 1673 : 
; 1674 : 		if (blueflag && blueflag->fuse)

  00619	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _blueflag, 0
  00620	74 57		 je	 SHORT $LN56@ST_drawCTF
  00622	a1 00 00 00 00	 mov	 eax, DWORD PTR _blueflag
  00627	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  0062e	74 49		 je	 SHORT $LN56@ST_drawCTF

; 1675 : 		{
; 1676 : 			sprintf(timeleft, "%u", (blueflag->fuse / TICRATE));

  00630	a1 00 00 00 00	 mov	 eax, DWORD PTR _blueflag
  00635	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [eax+188]
  0063b	99		 cdq
  0063c	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00641	f7 f9		 idiv	 ecx
  00643	50		 push	 eax
  00644	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00649	8d 55 bc	 lea	 edx, DWORD PTR _timeleft$1[ebp]
  0064c	52		 push	 edx
  0064d	e8 00 00 00 00	 call	 _sprintf
  00652	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1677 : 			V_DrawCenteredString(300, STRINGY(184), V_YELLOWMAP, timeleft);

  00655	8d 45 bc	 lea	 eax, DWORD PTR _timeleft$1[ebp]
  00658	50		 push	 eax
  00659	68 00 00 10 00	 push	 1048576			; 00100000H
  0065e	68 b8 00 00 00	 push	 184			; 000000b8H
  00663	e8 00 00 00 00	 call	 _STRINGY
  00668	83 c4 04	 add	 esp, 4
  0066b	50		 push	 eax
  0066c	68 2c 01 00 00	 push	 300			; 0000012cH
  00671	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00676	83 c4 10	 add	 esp, 16			; 00000010H
$LN56@ST_drawCTF:

; 1678 : 		}
; 1679 : 	}
; 1680 : }

  00679	5f		 pop	 edi
  0067a	5e		 pop	 esi
  0067b	5b		 pop	 ebx
  0067c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0067f	33 cd		 xor	 ecx, ebp
  00681	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00686	8b e5		 mov	 esp, ebp
  00688	5d		 pop	 ebp
  00689	c3		 ret	 0
_ST_drawCTFHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawTagHUD
_TEXT	SEGMENT
_pstext$ = -76						; size = 33
_pstime$ = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_ST_drawTagHUD PROC					; COMDAT

; 1466 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1467 : 	char pstime[33] = "";

  00016	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0001b	88 45 d8	 mov	 BYTE PTR _pstime$[ebp], al
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 d9	 mov	 DWORD PTR _pstime$[ebp+1], eax
  00023	89 45 dd	 mov	 DWORD PTR _pstime$[ebp+5], eax
  00026	89 45 e1	 mov	 DWORD PTR _pstime$[ebp+9], eax
  00029	89 45 e5	 mov	 DWORD PTR _pstime$[ebp+13], eax
  0002c	89 45 e9	 mov	 DWORD PTR _pstime$[ebp+17], eax
  0002f	89 45 ed	 mov	 DWORD PTR _pstime$[ebp+21], eax
  00032	89 45 f1	 mov	 DWORD PTR _pstime$[ebp+25], eax
  00035	89 45 f5	 mov	 DWORD PTR _pstime$[ebp+29], eax

; 1468 : 	char pstext[33] = "";

  00038	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0003d	88 45 b4	 mov	 BYTE PTR _pstext$[ebp], al
  00040	33 c0		 xor	 eax, eax
  00042	89 45 b5	 mov	 DWORD PTR _pstext$[ebp+1], eax
  00045	89 45 b9	 mov	 DWORD PTR _pstext$[ebp+5], eax
  00048	89 45 bd	 mov	 DWORD PTR _pstext$[ebp+9], eax
  0004b	89 45 c1	 mov	 DWORD PTR _pstext$[ebp+13], eax
  0004e	89 45 c5	 mov	 DWORD PTR _pstext$[ebp+17], eax
  00051	89 45 c9	 mov	 DWORD PTR _pstext$[ebp+21], eax
  00054	89 45 cd	 mov	 DWORD PTR _pstext$[ebp+25], eax
  00057	89 45 d1	 mov	 DWORD PTR _pstext$[ebp+29], eax

; 1469 : 
; 1470 : 	// Figure out what we're going to print.
; 1471 : 	if (leveltime < hidetime * TICRATE) //during the hide time, the seeker and hiders have different messages on their HUD.

  0005a	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  00061	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  00067	0f 83 bc 00 00
	00		 jae	 $LN2@ST_drawTag

; 1472 : 	{
; 1473 : 		if (cv_hidetime.value)

  0006d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_hidetime+20, 0
  00074	74 28		 je	 SHORT $LN4@ST_drawTag

; 1474 : 			sprintf(pstime, "%d", (hidetime - leveltime/TICRATE)); //hide time is in seconds, not tics.

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0007b	33 d2		 xor	 edx, edx
  0007d	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00082	f7 f1		 div	 ecx
  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hidetime
  0008a	2b d0		 sub	 edx, eax
  0008c	52		 push	 edx
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00092	8d 45 d8	 lea	 eax, DWORD PTR _pstime$[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _sprintf
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@ST_drawTag:

; 1475 : 
; 1476 : 		if (stplyr->pflags & PF_TAGIT && !stplyr->spectator)

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  000a3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000a9	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  000af	74 23		 je	 SHORT $LN5@ST_drawTag
  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  000b6	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  000bd	85 c9		 test	 ecx, ecx
  000bf	75 13		 jne	 SHORT $LN5@ST_drawTag

; 1477 : 			sprintf(pstext, "WAITING FOR PLAYERS TO HIDE...");

  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PDGCFPLF@WAITING?5FOR?5PLAYERS?5TO?5HIDE?4?4?4@
  000c6	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _sprintf
  000cf	83 c4 08	 add	 esp, 8
  000d2	eb 50		 jmp	 SHORT $LN8@ST_drawTag
$LN5@ST_drawTag:

; 1478 : 		else
; 1479 : 		{
; 1480 : 			if (!stplyr->spectator) //spectators get a generic HUD message rather than a gametype specific one.

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  000d9	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  000e0	85 c9		 test	 ecx, ecx
  000e2	75 2f		 jne	 SHORT $LN7@ST_drawTag

; 1481 : 			{
; 1482 : 				if (cv_tagtype.value == 1) //hide and seek.

  000e4	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_tagtype+20, 1
  000eb	75 13		 jne	 SHORT $LN9@ST_drawTag

; 1483 : 					sprintf(pstext, "HIDE BEFORE TIME RUNS OUT!");

  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CAHCNCMO@HIDE?5BEFORE?5TIME?5RUNS?5OUT?$CB@
  000f2	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _sprintf
  000fb	83 c4 08	 add	 esp, 8
  000fe	eb 11		 jmp	 SHORT $LN10@ST_drawTag
$LN9@ST_drawTag:

; 1484 : 				else //default
; 1485 : 					sprintf(pstext, "FLEE BEFORE YOU ARE HUNTED!");

  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LCNLIPGD@FLEE?5BEFORE?5YOU?5ARE?5HUNTED?$CB@
  00105	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _sprintf
  0010e	83 c4 08	 add	 esp, 8
$LN10@ST_drawTag:

; 1486 : 			}

  00111	eb 11		 jmp	 SHORT $LN8@ST_drawTag
$LN7@ST_drawTag:

; 1487 : 			else
; 1488 : 				sprintf(pstext, "HIDE TIME REMAINING:");

  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JABHOCCD@HIDE?5TIME?5REMAINING?3@
  00118	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _sprintf
  00121	83 c4 08	 add	 esp, 8
$LN8@ST_drawTag:

; 1489 : 		}
; 1490 : 	}

  00124	e9 8f 00 00 00	 jmp	 $LN15@ST_drawTag
$LN2@ST_drawTag:

; 1491 : 	else
; 1492 : 	{
; 1493 : 		if (cv_timelimit.value && timelimitintics >= leveltime)

  00129	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_timelimit+20, 0
  00130	74 33		 je	 SHORT $LN11@ST_drawTag
  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR _timelimitintics
  00137	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _leveltime
  0013d	72 26		 jb	 SHORT $LN11@ST_drawTag

; 1494 : 			sprintf(pstime, "%d", (timelimitintics-leveltime)/TICRATE);

  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR _timelimitintics
  00144	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _leveltime
  0014a	33 d2		 xor	 edx, edx
  0014c	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00151	f7 f1		 div	 ecx
  00153	50		 push	 eax
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00159	8d 55 d8	 lea	 edx, DWORD PTR _pstime$[ebp]
  0015c	52		 push	 edx
  0015d	e8 00 00 00 00	 call	 _sprintf
  00162	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@ST_drawTag:

; 1495 : 
; 1496 : 		if (stplyr->pflags & PF_TAGIT)

  00165	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0016a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00170	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  00176	74 13		 je	 SHORT $LN12@ST_drawTag

; 1497 : 			sprintf(pstext, "YOU'RE IT!");

  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BIGEFGJE@YOU?8RE?5IT?$CB@
  0017d	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 _sprintf
  00186	83 c4 08	 add	 esp, 8
  00189	eb 2d		 jmp	 SHORT $LN15@ST_drawTag
$LN12@ST_drawTag:

; 1498 : 		else
; 1499 : 		{
; 1500 : 			if (cv_timelimit.value)

  0018b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_timelimit+20, 0
  00192	74 13		 je	 SHORT $LN14@ST_drawTag

; 1501 : 				sprintf(pstext, "TIME REMAINING:");

  00194	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PFELKHCP@TIME?5REMAINING?3@
  00199	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _sprintf
  001a2	83 c4 08	 add	 esp, 8
  001a5	eb 11		 jmp	 SHORT $LN15@ST_drawTag
$LN14@ST_drawTag:

; 1502 : 			else //Since having no hud message in tag is not characteristic:
; 1503 : 				sprintf(pstext, "NO TIME LIMIT");

  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OIOEHGHG@NO?5TIME?5LIMIT@
  001ac	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 _sprintf
  001b5	83 c4 08	 add	 esp, 8
$LN15@ST_drawTag:

; 1504 : 		}
; 1505 : 	}
; 1506 : 
; 1507 : 	// Print the stuff.
; 1508 : 	if (pstext[0])

  001b8	b8 01 00 00 00	 mov	 eax, 1
  001bd	6b c8 00	 imul	 ecx, eax, 0
  001c0	0f be 54 0d b4	 movsx	 edx, BYTE PTR _pstext$[ebp+ecx]
  001c5	85 d2		 test	 edx, edx
  001c7	74 4d		 je	 SHORT $LN18@ST_drawTag

; 1509 : 	{
; 1510 : 		if (splitscreen)

  001c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  001d0	74 23		 je	 SHORT $LN17@ST_drawTag

; 1511 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(168), 0, pstext);

  001d2	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  001d5	50		 push	 eax
  001d6	6a 00		 push	 0
  001d8	68 a8 00 00 00	 push	 168			; 000000a8H
  001dd	e8 00 00 00 00	 call	 _STRINGY
  001e2	83 c4 04	 add	 esp, 4
  001e5	50		 push	 eax
  001e6	68 a0 00 00 00	 push	 160			; 000000a0H
  001eb	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001f0	83 c4 10	 add	 esp, 16			; 00000010H
  001f3	eb 21		 jmp	 SHORT $LN18@ST_drawTag
$LN17@ST_drawTag:

; 1512 : 		else
; 1513 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(184), 0, pstext);

  001f5	8d 45 b4	 lea	 eax, DWORD PTR _pstext$[ebp]
  001f8	50		 push	 eax
  001f9	6a 00		 push	 0
  001fb	68 b8 00 00 00	 push	 184			; 000000b8H
  00200	e8 00 00 00 00	 call	 _STRINGY
  00205	83 c4 04	 add	 esp, 4
  00208	50		 push	 eax
  00209	68 a0 00 00 00	 push	 160			; 000000a0H
  0020e	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00213	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@ST_drawTag:

; 1514 : 	}
; 1515 : 	if (pstime[0])

  00216	b8 01 00 00 00	 mov	 eax, 1
  0021b	6b c8 00	 imul	 ecx, eax, 0
  0021e	0f be 54 0d d8	 movsx	 edx, BYTE PTR _pstime$[ebp+ecx]
  00223	85 d2		 test	 edx, edx
  00225	74 4d		 je	 SHORT $LN21@ST_drawTag

; 1516 : 	{
; 1517 : 		if (splitscreen)

  00227	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0022e	74 23		 je	 SHORT $LN20@ST_drawTag

; 1518 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(184), 0, pstime);

  00230	8d 45 d8	 lea	 eax, DWORD PTR _pstime$[ebp]
  00233	50		 push	 eax
  00234	6a 00		 push	 0
  00236	68 b8 00 00 00	 push	 184			; 000000b8H
  0023b	e8 00 00 00 00	 call	 _STRINGY
  00240	83 c4 04	 add	 esp, 4
  00243	50		 push	 eax
  00244	68 a0 00 00 00	 push	 160			; 000000a0H
  00249	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0024e	83 c4 10	 add	 esp, 16			; 00000010H
  00251	eb 21		 jmp	 SHORT $LN21@ST_drawTag
$LN20@ST_drawTag:

; 1519 : 		else
; 1520 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(192), 0, pstime);

  00253	8d 45 d8	 lea	 eax, DWORD PTR _pstime$[ebp]
  00256	50		 push	 eax
  00257	6a 00		 push	 0
  00259	68 c0 00 00 00	 push	 192			; 000000c0H
  0025e	e8 00 00 00 00	 call	 _STRINGY
  00263	83 c4 04	 add	 esp, 4
  00266	50		 push	 eax
  00267	68 a0 00 00 00	 push	 160			; 000000a0H
  0026c	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00271	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@ST_drawTag:

; 1521 : 	}
; 1522 : }

  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx
  00277	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027a	33 cd		 xor	 ecx, ebp
  0027c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c3		 ret	 0
_ST_drawTagHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawRaceHUD
_TEXT	SEGMENT
_ST_drawRaceHUD PROC					; COMDAT

; 1446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1447 : 	if (leveltime > TICRATE && leveltime <= 2*TICRATE)

  00009	83 3d 00 00 00
	00 23		 cmp	 DWORD PTR _leveltime, 35 ; 00000023H
  00010	76 4b		 jbe	 SHORT $LN2@ST_drawRac
  00012	83 3d 00 00 00
	00 46		 cmp	 DWORD PTR _leveltime, 70 ; 00000046H
  00019	77 42		 ja	 SHORT $LN2@ST_drawRac

; 1448 : 		V_DrawScaledPatch(SCX((BASEVIDWIDTH - SHORT(race3->width))/2), (INT32)(SCY(BASEVIDHEIGHT/2)), V_NOSCALESTART, race3);

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR _race3
  00020	50		 push	 eax
  00021	68 00 00 01 00	 push	 65536			; 00010000H
  00026	6a 64		 push	 100			; 00000064H
  00028	e8 00 00 00 00	 call	 _SCY
  0002d	83 c4 04	 add	 esp, 4
  00030	50		 push	 eax
  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _race3
  00037	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0003a	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  0003f	2b c2		 sub	 eax, edx
  00041	99		 cdq
  00042	2b c2		 sub	 eax, edx
  00044	d1 f8		 sar	 eax, 1
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _SCX
  0004c	83 c4 04	 add	 esp, 4
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	e9 fd 00 00 00	 jmp	 $LN8@ST_drawRac
$LN2@ST_drawRac:

; 1449 : 	else if (leveltime > 2*TICRATE && leveltime <= 3*TICRATE)

  0005d	83 3d 00 00 00
	00 46		 cmp	 DWORD PTR _leveltime, 70 ; 00000046H
  00064	76 4b		 jbe	 SHORT $LN4@ST_drawRac
  00066	83 3d 00 00 00
	00 69		 cmp	 DWORD PTR _leveltime, 105 ; 00000069H
  0006d	77 42		 ja	 SHORT $LN4@ST_drawRac

; 1450 : 		V_DrawScaledPatch(SCX((BASEVIDWIDTH - SHORT(race2->width))/2), (INT32)(SCY(BASEVIDHEIGHT/2)), V_NOSCALESTART, race2);

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR _race2
  00074	50		 push	 eax
  00075	68 00 00 01 00	 push	 65536			; 00010000H
  0007a	6a 64		 push	 100			; 00000064H
  0007c	e8 00 00 00 00	 call	 _SCY
  00081	83 c4 04	 add	 esp, 4
  00084	50		 push	 eax
  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _race2
  0008b	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0008e	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  00093	2b c2		 sub	 eax, edx
  00095	99		 cdq
  00096	2b c2		 sub	 eax, edx
  00098	d1 f8		 sar	 eax, 1
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _SCX
  000a0	83 c4 04	 add	 esp, 4
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	e9 a9 00 00 00	 jmp	 $LN8@ST_drawRac
$LN4@ST_drawRac:

; 1451 : 	else if (leveltime > 3*TICRATE && leveltime <= 4*TICRATE)

  000b1	83 3d 00 00 00
	00 69		 cmp	 DWORD PTR _leveltime, 105 ; 00000069H
  000b8	76 4b		 jbe	 SHORT $LN6@ST_drawRac
  000ba	81 3d 00 00 00
	00 8c 00 00 00	 cmp	 DWORD PTR _leveltime, 140 ; 0000008cH
  000c4	77 3f		 ja	 SHORT $LN6@ST_drawRac

; 1452 : 		V_DrawScaledPatch(SCX((BASEVIDWIDTH - SHORT(race1->width))/2), (INT32)(SCY(BASEVIDHEIGHT/2)), V_NOSCALESTART, race1);

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _race1
  000cb	50		 push	 eax
  000cc	68 00 00 01 00	 push	 65536			; 00010000H
  000d1	6a 64		 push	 100			; 00000064H
  000d3	e8 00 00 00 00	 call	 _SCY
  000d8	83 c4 04	 add	 esp, 4
  000db	50		 push	 eax
  000dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _race1
  000e2	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  000e5	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  000ea	2b c2		 sub	 eax, edx
  000ec	99		 cdq
  000ed	2b c2		 sub	 eax, edx
  000ef	d1 f8		 sar	 eax, 1
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _SCX
  000f7	83 c4 04	 add	 esp, 4
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00100	83 c4 10	 add	 esp, 16			; 00000010H
  00103	eb 55		 jmp	 SHORT $LN8@ST_drawRac
$LN6@ST_drawRac:

; 1453 : 	else if (leveltime > 4*TICRATE && leveltime <= 5*TICRATE)

  00105	81 3d 00 00 00
	00 8c 00 00 00	 cmp	 DWORD PTR _leveltime, 140 ; 0000008cH
  0010f	76 49		 jbe	 SHORT $LN8@ST_drawRac
  00111	81 3d 00 00 00
	00 af 00 00 00	 cmp	 DWORD PTR _leveltime, 175 ; 000000afH
  0011b	77 3d		 ja	 SHORT $LN8@ST_drawRac

; 1454 : 		V_DrawScaledPatch(SCX((BASEVIDWIDTH - SHORT(racego->width))/2), (INT32)(SCY(BASEVIDHEIGHT/2)), V_NOSCALESTART, racego);

  0011d	a1 00 00 00 00	 mov	 eax, DWORD PTR _racego
  00122	50		 push	 eax
  00123	68 00 00 01 00	 push	 65536			; 00010000H
  00128	6a 64		 push	 100			; 00000064H
  0012a	e8 00 00 00 00	 call	 _SCY
  0012f	83 c4 04	 add	 esp, 4
  00132	50		 push	 eax
  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _racego
  00139	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0013c	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  00141	2b c2		 sub	 eax, edx
  00143	99		 cdq
  00144	2b c2		 sub	 eax, edx
  00146	d1 f8		 sar	 eax, 1
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _SCX
  0014e	83 c4 04	 add	 esp, 4
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00157	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@ST_drawRac:

; 1455 : 
; 1456 : 	if (circuitmap)

  0015a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  00161	0f 84 9e 00 00
	00		 je	 $LN11@ST_drawRac

; 1457 : 	{
; 1458 : 		if (stplyr->exiting)

  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0016c	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  00173	74 3b		 je	 SHORT $LN10@ST_drawRac

; 1459 : 			V_DrawString(hudinfo[HUD_LAP].x, STRINGY(hudinfo[HUD_LAP].y), V_YELLOWMAP, "FINISHED!");

  00175	68 00 00 00 00	 push	 OFFSET ??_C@_09KFDLEEGG@FINISHED?$CB@
  0017a	68 00 00 10 00	 push	 1048576			; 00100000H
  0017f	b8 08 00 00 00	 mov	 eax, 8
  00184	6b c8 22	 imul	 ecx, eax, 34
  00187	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  0018d	52		 push	 edx
  0018e	e8 00 00 00 00	 call	 _STRINGY
  00193	83 c4 04	 add	 esp, 4
  00196	50		 push	 eax
  00197	b8 08 00 00 00	 mov	 eax, 8
  0019c	6b c8 22	 imul	 ecx, eax, 34
  0019f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  001a5	52		 push	 edx
  001a6	e8 00 00 00 00	 call	 _V_DrawString
  001ab	83 c4 10	 add	 esp, 16			; 00000010H
  001ae	eb 55		 jmp	 SHORT $LN11@ST_drawRac
$LN10@ST_drawRac:

; 1460 : 		else
; 1461 : 			V_DrawString(hudinfo[HUD_LAP].x, STRINGY(hudinfo[HUD_LAP].y), 0, va("Lap: %u/%d", stplyr->laps+1, cv_numlaps.value));

  001b0	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_numlaps+20
  001b5	50		 push	 eax
  001b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  001bc	8b 91 5c 01 00
	00		 mov	 edx, DWORD PTR [ecx+348]
  001c2	83 c2 01	 add	 edx, 1
  001c5	52		 push	 edx
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PMAJHBHD@Lap?3?5?$CFu?1?$CFd@
  001cb	e8 00 00 00 00	 call	 _va
  001d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d3	50		 push	 eax
  001d4	6a 00		 push	 0
  001d6	b8 08 00 00 00	 mov	 eax, 8
  001db	6b c8 22	 imul	 ecx, eax, 34
  001de	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  001e4	52		 push	 edx
  001e5	e8 00 00 00 00	 call	 _STRINGY
  001ea	83 c4 04	 add	 esp, 4
  001ed	50		 push	 eax
  001ee	b8 08 00 00 00	 mov	 eax, 8
  001f3	6b c8 22	 imul	 ecx, eax, 34
  001f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  001fc	52		 push	 edx
  001fd	e8 00 00 00 00	 call	 _V_DrawString
  00202	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@ST_drawRac:

; 1462 : 	}
; 1463 : }

  00205	5f		 pop	 edi
  00206	5e		 pop	 esi
  00207	5b		 pop	 ebx
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c3		 ret	 0
_ST_drawRaceHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawMatchHUD
_TEXT	SEGMENT
tv93 = -96						; size = 4
tv195 = -96						; size = 4
tv275 = -96						; size = 4
tv355 = -96						; size = 4
tv435 = -96						; size = 4
tv515 = -96						; size = 4
tv595 = -96						; size = 4
_yelflag$1 = -28					; size = 4
_yelflag$2 = -24					; size = 4
_yelflag$3 = -20					; size = 4
_yelflag$4 = -16					; size = 4
_yelflag$5 = -12					; size = 4
_yelflag$6 = -8						; size = 4
_offset$ = -4						; size = 4
_ST_drawMatchHUD PROC					; COMDAT

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1234 : 	INT32 offset = 80;

  00009	c7 45 fc 50 00
	00 00		 mov	 DWORD PTR _offset$[ebp], 80 ; 00000050H

; 1235 : 
; 1236 : 	if (gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF
; 1237 : 		|| cv_ringslinger.value)

  00010	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00017	83 f8 01	 cmp	 eax, 1
  0001a	74 25		 je	 SHORT $LN3@ST_drawMat
  0001c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00023	83 f8 03	 cmp	 eax, 3
  00026	74 19		 je	 SHORT $LN3@ST_drawMat
  00028	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0002f	83 f8 04	 cmp	 eax, 4
  00032	74 0d		 je	 SHORT $LN3@ST_drawMat
  00034	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_ringslinger+20, 0
  0003b	0f 84 ad 00 00
	00		 je	 $LN6@ST_drawMat
$LN3@ST_drawMat:

; 1238 : 	{
; 1239 : 		if (stplyr->health > 1)

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00046	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  0004a	7e 2a		 jle	 SHORT $LN4@ST_drawMat

; 1240 : 			V_DrawScaledPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, normring);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR _normring
  00051	50		 push	 eax
  00052	68 00 00 00 40	 push	 1073741824		; 40000000H
  00057	68 a2 00 00 00	 push	 162			; 000000a2H
  0005c	e8 00 00 00 00	 call	 _STRINGY
  00061	83 c4 04	 add	 esp, 4
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00068	83 c1 08	 add	 ecx, 8
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	eb 28		 jmp	 SHORT $LN5@ST_drawMat
$LN4@ST_drawMat:

; 1241 : 		else
; 1242 : 			V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT|V_8020TRANS, normring);

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR _normring
  0007b	50		 push	 eax
  0007c	68 00 00 00 44	 push	 1140850688		; 44000000H
  00081	68 a2 00 00 00	 push	 162			; 000000a2H
  00086	e8 00 00 00 00	 call	 _STRINGY
  0008b	83 c4 04	 add	 esp, 4
  0008e	50		 push	 eax
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00092	83 c1 08	 add	 ecx, 8
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0009b	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@ST_drawMat:

; 1243 : 
; 1244 : 		if (!stplyr->currentweapon)

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  000a3	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  000a7	75 45		 jne	 SHORT $LN6@ST_drawMat

; 1245 : 			V_DrawScaledPatch(6 + offset, STRINGY(162 - (splitscreen ? 4 : 2)), V_SNAPTOLEFT, curweapon);

  000a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000b0	74 09		 je	 SHORT $LN69@ST_drawMat
  000b2	c7 45 a0 04 00
	00 00		 mov	 DWORD PTR tv93[ebp], 4
  000b9	eb 07		 jmp	 SHORT $LN70@ST_drawMat
$LN69@ST_drawMat:
  000bb	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR tv93[ebp], 2
$LN70@ST_drawMat:
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _curweapon
  000c7	50		 push	 eax
  000c8	68 00 00 00 40	 push	 1073741824		; 40000000H
  000cd	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  000d2	2b 4d a0	 sub	 ecx, DWORD PTR tv93[ebp]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _STRINGY
  000db	83 c4 04	 add	 esp, 4
  000de	50		 push	 eax
  000df	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  000e2	83 c2 06	 add	 edx, 6
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000eb	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@ST_drawMat:

; 1246 : 	}
; 1247 : 
; 1248 : 	offset += 20;

  000ee	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  000f1	83 c0 14	 add	 eax, 20			; 00000014H
  000f4	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1249 : 
; 1250 : 	if (stplyr->powers[pw_automaticring])

  000f7	b8 04 00 00 00	 mov	 eax, 4
  000fc	6b c8 14	 imul	 ecx, eax, 20
  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00105	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0010a	0f 84 7b 01 00
	00		 je	 $LN7@ST_drawMat

; 1251 : 	{
; 1252 : 		INT32 yelflag = 0;

  00110	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _yelflag$6[ebp], 0

; 1253 : 
; 1254 : 		if (stplyr->powers[pw_automaticring] >= MAX_AUTOMATIC)

  00117	b8 04 00 00 00	 mov	 eax, 4
  0011c	6b c8 14	 imul	 ecx, eax, 20
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00125	81 7c 0a 38 2c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 300 ; 0000012cH
  0012d	7c 07		 jl	 SHORT $LN9@ST_drawMat

; 1255 : 			yelflag = V_YELLOWMAP;

  0012f	c7 45 f8 00 00
	10 00		 mov	 DWORD PTR _yelflag$6[ebp], 1048576 ; 00100000H
$LN9@ST_drawMat:

; 1256 : 
; 1257 : 		if ((stplyr->ringweapons & RW_AUTO) && stplyr->health > 1)

  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0013b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0013e	83 e1 04	 and	 ecx, 4
  00141	74 35		 je	 SHORT $LN10@ST_drawMat
  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00148	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  0014c	7e 2a		 jle	 SHORT $LN10@ST_drawMat

; 1258 : 			V_DrawScaledPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, autoring);

  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR _autoring
  00153	50		 push	 eax
  00154	68 00 00 00 40	 push	 1073741824		; 40000000H
  00159	68 a2 00 00 00	 push	 162			; 000000a2H
  0015e	e8 00 00 00 00	 call	 _STRINGY
  00163	83 c4 04	 add	 esp, 4
  00166	50		 push	 eax
  00167	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  0016a	83 c1 08	 add	 ecx, 8
  0016d	51		 push	 ecx
  0016e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00173	83 c4 10	 add	 esp, 16			; 00000010H
  00176	eb 28		 jmp	 SHORT $LN11@ST_drawMat
$LN10@ST_drawMat:

; 1259 : 		else
; 1260 : 			V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT|V_8020TRANS, autoring);

  00178	a1 00 00 00 00	 mov	 eax, DWORD PTR _autoring
  0017d	50		 push	 eax
  0017e	68 00 00 00 44	 push	 1140850688		; 44000000H
  00183	68 a2 00 00 00	 push	 162			; 000000a2H
  00188	e8 00 00 00 00	 call	 _STRINGY
  0018d	83 c4 04	 add	 esp, 4
  00190	50		 push	 eax
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00194	83 c1 08	 add	 ecx, 8
  00197	51		 push	 ecx
  00198	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0019d	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@ST_drawMat:

; 1261 : 
; 1262 : 		if (stplyr->powers[pw_automaticring] > 99)

  001a0	b8 04 00 00 00	 mov	 eax, 4
  001a5	6b c8 14	 imul	 ecx, eax, 20
  001a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  001ae	83 7c 0a 38 63	 cmp	 DWORD PTR [edx+ecx+56], 99 ; 00000063H
  001b3	7e 3c		 jle	 SHORT $LN12@ST_drawMat

; 1263 : 			V_DrawTinyNum(8 + offset + 1, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  001b5	b8 04 00 00 00	 mov	 eax, 4
  001ba	6b c8 14	 imul	 ecx, eax, 20
  001bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  001c3	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  001c7	50		 push	 eax
  001c8	8b 4d f8	 mov	 ecx, DWORD PTR _yelflag$6[ebp]
  001cb	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  001d1	51		 push	 ecx
  001d2	68 a2 00 00 00	 push	 162			; 000000a2H
  001d7	e8 00 00 00 00	 call	 _STRINGY
  001dc	83 c4 04	 add	 esp, 4
  001df	50		 push	 eax
  001e0	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  001e3	83 c2 09	 add	 edx, 9
  001e6	52		 push	 edx
  001e7	e8 00 00 00 00	 call	 _V_DrawTinyNum
  001ec	83 c4 10	 add	 esp, 16			; 00000010H
  001ef	eb 48		 jmp	 SHORT $LN13@ST_drawMat
$LN12@ST_drawMat:

; 1264 : 				stplyr->powers[pw_automaticring]);
; 1265 : 		else
; 1266 : 			V_DrawString(8 + offset, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  001f1	b8 04 00 00 00	 mov	 eax, 4
  001f6	6b c8 14	 imul	 ecx, eax, 20
  001f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  001ff	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00203	50		 push	 eax
  00204	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00209	e8 00 00 00 00	 call	 _va
  0020e	83 c4 08	 add	 esp, 8
  00211	50		 push	 eax
  00212	8b 4d f8	 mov	 ecx, DWORD PTR _yelflag$6[ebp]
  00215	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  0021b	51		 push	 ecx
  0021c	68 a2 00 00 00	 push	 162			; 000000a2H
  00221	e8 00 00 00 00	 call	 _STRINGY
  00226	83 c4 04	 add	 esp, 4
  00229	50		 push	 eax
  0022a	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  0022d	83 c2 08	 add	 edx, 8
  00230	52		 push	 edx
  00231	e8 00 00 00 00	 call	 _V_DrawString
  00236	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@ST_drawMat:

; 1267 : 				va("%d", stplyr->powers[pw_automaticring]));
; 1268 : 
; 1269 : 		if (stplyr->currentweapon == WEP_AUTO)

  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0023e	83 78 2c 01	 cmp	 DWORD PTR [eax+44], 1
  00242	75 45		 jne	 SHORT $LN14@ST_drawMat

; 1270 : 			V_DrawScaledPatch(6 + offset, STRINGY(162 - (splitscreen ? 4 : 2)), V_SNAPTOLEFT, curweapon);

  00244	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0024b	74 09		 je	 SHORT $LN71@ST_drawMat
  0024d	c7 45 a0 04 00
	00 00		 mov	 DWORD PTR tv195[ebp], 4
  00254	eb 07		 jmp	 SHORT $LN72@ST_drawMat
$LN71@ST_drawMat:
  00256	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR tv195[ebp], 2
$LN72@ST_drawMat:
  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR _curweapon
  00262	50		 push	 eax
  00263	68 00 00 00 40	 push	 1073741824		; 40000000H
  00268	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  0026d	2b 4d a0	 sub	 ecx, DWORD PTR tv195[ebp]
  00270	51		 push	 ecx
  00271	e8 00 00 00 00	 call	 _STRINGY
  00276	83 c4 04	 add	 esp, 4
  00279	50		 push	 eax
  0027a	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  0027d	83 c2 06	 add	 edx, 6
  00280	52		 push	 edx
  00281	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00286	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@ST_drawMat:

; 1271 : 	}

  00289	eb 35		 jmp	 SHORT $LN15@ST_drawMat
$LN7@ST_drawMat:

; 1272 : 	else if (stplyr->ringweapons & RW_AUTO)

  0028b	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00290	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00293	83 e1 04	 and	 ecx, 4
  00296	74 28		 je	 SHORT $LN15@ST_drawMat

; 1273 : 		V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, autoring);

  00298	a1 00 00 00 00	 mov	 eax, DWORD PTR _autoring
  0029d	50		 push	 eax
  0029e	68 00 00 00 40	 push	 1073741824		; 40000000H
  002a3	68 a2 00 00 00	 push	 162			; 000000a2H
  002a8	e8 00 00 00 00	 call	 _STRINGY
  002ad	83 c4 04	 add	 esp, 4
  002b0	50		 push	 eax
  002b1	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  002b4	83 c1 08	 add	 ecx, 8
  002b7	51		 push	 ecx
  002b8	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  002bd	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@ST_drawMat:

; 1274 : 
; 1275 : 	offset += 20;

  002c0	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  002c3	83 c0 14	 add	 eax, 20			; 00000014H
  002c6	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1276 : 
; 1277 : 	if (stplyr->powers[pw_bouncering])

  002c9	b8 04 00 00 00	 mov	 eax, 4
  002ce	6b c8 12	 imul	 ecx, eax, 18
  002d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  002d7	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  002dc	0f 84 78 01 00
	00		 je	 $LN16@ST_drawMat

; 1278 : 	{
; 1279 : 		INT32 yelflag = 0;

  002e2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _yelflag$5[ebp], 0

; 1280 : 
; 1281 : 		if (stplyr->powers[pw_bouncering] >= MAX_BOUNCE)

  002e9	b8 04 00 00 00	 mov	 eax, 4
  002ee	6b c8 12	 imul	 ecx, eax, 18
  002f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  002f7	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  002fc	7c 07		 jl	 SHORT $LN18@ST_drawMat

; 1282 : 			yelflag = V_YELLOWMAP;

  002fe	c7 45 f4 00 00
	10 00		 mov	 DWORD PTR _yelflag$5[ebp], 1048576 ; 00100000H
$LN18@ST_drawMat:

; 1283 : 
; 1284 : 		if ((stplyr->ringweapons & RW_BOUNCE) && stplyr->health > 1)

  00305	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0030a	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0030d	83 e1 01	 and	 ecx, 1
  00310	74 35		 je	 SHORT $LN19@ST_drawMat
  00312	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00317	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  0031b	7e 2a		 jle	 SHORT $LN19@ST_drawMat

; 1285 : 			V_DrawScaledPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, bouncering);

  0031d	a1 00 00 00 00	 mov	 eax, DWORD PTR _bouncering
  00322	50		 push	 eax
  00323	68 00 00 00 40	 push	 1073741824		; 40000000H
  00328	68 a2 00 00 00	 push	 162			; 000000a2H
  0032d	e8 00 00 00 00	 call	 _STRINGY
  00332	83 c4 04	 add	 esp, 4
  00335	50		 push	 eax
  00336	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00339	83 c1 08	 add	 ecx, 8
  0033c	51		 push	 ecx
  0033d	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00342	83 c4 10	 add	 esp, 16			; 00000010H
  00345	eb 28		 jmp	 SHORT $LN20@ST_drawMat
$LN19@ST_drawMat:

; 1286 : 		else
; 1287 : 			V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT|V_8020TRANS, bouncering);

  00347	a1 00 00 00 00	 mov	 eax, DWORD PTR _bouncering
  0034c	50		 push	 eax
  0034d	68 00 00 00 44	 push	 1140850688		; 44000000H
  00352	68 a2 00 00 00	 push	 162			; 000000a2H
  00357	e8 00 00 00 00	 call	 _STRINGY
  0035c	83 c4 04	 add	 esp, 4
  0035f	50		 push	 eax
  00360	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00363	83 c1 08	 add	 ecx, 8
  00366	51		 push	 ecx
  00367	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0036c	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@ST_drawMat:

; 1288 : 
; 1289 : 		if (stplyr->powers[pw_bouncering] > 99)

  0036f	b8 04 00 00 00	 mov	 eax, 4
  00374	6b c8 12	 imul	 ecx, eax, 18
  00377	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  0037d	83 7c 0a 38 63	 cmp	 DWORD PTR [edx+ecx+56], 99 ; 00000063H
  00382	7e 3c		 jle	 SHORT $LN21@ST_drawMat

; 1290 : 			V_DrawTinyNum(8 + offset + 1, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  00384	b8 04 00 00 00	 mov	 eax, 4
  00389	6b c8 12	 imul	 ecx, eax, 18
  0038c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00392	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00396	50		 push	 eax
  00397	8b 4d f4	 mov	 ecx, DWORD PTR _yelflag$5[ebp]
  0039a	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  003a0	51		 push	 ecx
  003a1	68 a2 00 00 00	 push	 162			; 000000a2H
  003a6	e8 00 00 00 00	 call	 _STRINGY
  003ab	83 c4 04	 add	 esp, 4
  003ae	50		 push	 eax
  003af	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  003b2	83 c2 09	 add	 edx, 9
  003b5	52		 push	 edx
  003b6	e8 00 00 00 00	 call	 _V_DrawTinyNum
  003bb	83 c4 10	 add	 esp, 16			; 00000010H
  003be	eb 48		 jmp	 SHORT $LN22@ST_drawMat
$LN21@ST_drawMat:

; 1291 : 				stplyr->powers[pw_bouncering]);
; 1292 : 		else
; 1293 : 			V_DrawString(8 + offset, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  003c0	b8 04 00 00 00	 mov	 eax, 4
  003c5	6b c8 12	 imul	 ecx, eax, 18
  003c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  003ce	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  003d2	50		 push	 eax
  003d3	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003d8	e8 00 00 00 00	 call	 _va
  003dd	83 c4 08	 add	 esp, 8
  003e0	50		 push	 eax
  003e1	8b 4d f4	 mov	 ecx, DWORD PTR _yelflag$5[ebp]
  003e4	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  003ea	51		 push	 ecx
  003eb	68 a2 00 00 00	 push	 162			; 000000a2H
  003f0	e8 00 00 00 00	 call	 _STRINGY
  003f5	83 c4 04	 add	 esp, 4
  003f8	50		 push	 eax
  003f9	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  003fc	83 c2 08	 add	 edx, 8
  003ff	52		 push	 edx
  00400	e8 00 00 00 00	 call	 _V_DrawString
  00405	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@ST_drawMat:

; 1294 : 				va("%d", stplyr->powers[pw_bouncering]));
; 1295 : 
; 1296 : 		if (stplyr->currentweapon == WEP_BOUNCE)

  00408	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0040d	83 78 2c 02	 cmp	 DWORD PTR [eax+44], 2
  00411	75 45		 jne	 SHORT $LN23@ST_drawMat

; 1297 : 			V_DrawScaledPatch(6 + offset, STRINGY(162 - (splitscreen ? 4 : 2)), V_SNAPTOLEFT, curweapon);

  00413	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0041a	74 09		 je	 SHORT $LN73@ST_drawMat
  0041c	c7 45 a0 04 00
	00 00		 mov	 DWORD PTR tv275[ebp], 4
  00423	eb 07		 jmp	 SHORT $LN74@ST_drawMat
$LN73@ST_drawMat:
  00425	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR tv275[ebp], 2
$LN74@ST_drawMat:
  0042c	a1 00 00 00 00	 mov	 eax, DWORD PTR _curweapon
  00431	50		 push	 eax
  00432	68 00 00 00 40	 push	 1073741824		; 40000000H
  00437	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  0043c	2b 4d a0	 sub	 ecx, DWORD PTR tv275[ebp]
  0043f	51		 push	 ecx
  00440	e8 00 00 00 00	 call	 _STRINGY
  00445	83 c4 04	 add	 esp, 4
  00448	50		 push	 eax
  00449	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  0044c	83 c2 06	 add	 edx, 6
  0044f	52		 push	 edx
  00450	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00455	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@ST_drawMat:

; 1298 : 	}

  00458	eb 35		 jmp	 SHORT $LN24@ST_drawMat
$LN16@ST_drawMat:

; 1299 : 	else if (stplyr->ringweapons & RW_BOUNCE)

  0045a	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0045f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00462	83 e1 01	 and	 ecx, 1
  00465	74 28		 je	 SHORT $LN24@ST_drawMat

; 1300 : 		V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, bouncering);

  00467	a1 00 00 00 00	 mov	 eax, DWORD PTR _bouncering
  0046c	50		 push	 eax
  0046d	68 00 00 00 40	 push	 1073741824		; 40000000H
  00472	68 a2 00 00 00	 push	 162			; 000000a2H
  00477	e8 00 00 00 00	 call	 _STRINGY
  0047c	83 c4 04	 add	 esp, 4
  0047f	50		 push	 eax
  00480	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00483	83 c1 08	 add	 ecx, 8
  00486	51		 push	 ecx
  00487	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0048c	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@ST_drawMat:

; 1301 : 
; 1302 : 	offset += 20;

  0048f	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00492	83 c0 14	 add	 eax, 20			; 00000014H
  00495	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1303 : 
; 1304 : 	if (stplyr->powers[pw_scatterring])

  00498	b8 04 00 00 00	 mov	 eax, 4
  0049d	6b c8 16	 imul	 ecx, eax, 22
  004a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  004a6	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  004ab	0f 84 78 01 00
	00		 je	 $LN25@ST_drawMat

; 1305 : 	{
; 1306 : 		INT32 yelflag = 0;

  004b1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _yelflag$4[ebp], 0

; 1307 : 
; 1308 : 		if (stplyr->powers[pw_scatterring] >= MAX_SCATTER)

  004b8	b8 04 00 00 00	 mov	 eax, 4
  004bd	6b c8 16	 imul	 ecx, eax, 22
  004c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  004c6	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  004cb	7c 07		 jl	 SHORT $LN27@ST_drawMat

; 1309 : 			yelflag = V_YELLOWMAP;

  004cd	c7 45 f0 00 00
	10 00		 mov	 DWORD PTR _yelflag$4[ebp], 1048576 ; 00100000H
$LN27@ST_drawMat:

; 1310 : 
; 1311 : 		if ((stplyr->ringweapons & RW_SCATTER) && stplyr->health > 1)

  004d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  004d9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  004dc	83 e1 10	 and	 ecx, 16			; 00000010H
  004df	74 35		 je	 SHORT $LN28@ST_drawMat
  004e1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  004e6	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  004ea	7e 2a		 jle	 SHORT $LN28@ST_drawMat

; 1312 : 			V_DrawScaledPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, scatterring);

  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _scatterring
  004f1	50		 push	 eax
  004f2	68 00 00 00 40	 push	 1073741824		; 40000000H
  004f7	68 a2 00 00 00	 push	 162			; 000000a2H
  004fc	e8 00 00 00 00	 call	 _STRINGY
  00501	83 c4 04	 add	 esp, 4
  00504	50		 push	 eax
  00505	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00508	83 c1 08	 add	 ecx, 8
  0050b	51		 push	 ecx
  0050c	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00511	83 c4 10	 add	 esp, 16			; 00000010H
  00514	eb 28		 jmp	 SHORT $LN29@ST_drawMat
$LN28@ST_drawMat:

; 1313 : 		else
; 1314 : 			V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT|V_8020TRANS, scatterring);

  00516	a1 00 00 00 00	 mov	 eax, DWORD PTR _scatterring
  0051b	50		 push	 eax
  0051c	68 00 00 00 44	 push	 1140850688		; 44000000H
  00521	68 a2 00 00 00	 push	 162			; 000000a2H
  00526	e8 00 00 00 00	 call	 _STRINGY
  0052b	83 c4 04	 add	 esp, 4
  0052e	50		 push	 eax
  0052f	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00532	83 c1 08	 add	 ecx, 8
  00535	51		 push	 ecx
  00536	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0053b	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@ST_drawMat:

; 1315 : 
; 1316 : 		if (stplyr->powers[pw_scatterring] > 99)

  0053e	b8 04 00 00 00	 mov	 eax, 4
  00543	6b c8 16	 imul	 ecx, eax, 22
  00546	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  0054c	83 7c 0a 38 63	 cmp	 DWORD PTR [edx+ecx+56], 99 ; 00000063H
  00551	7e 3c		 jle	 SHORT $LN30@ST_drawMat

; 1317 : 			V_DrawTinyNum(8 + offset + 1, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  00553	b8 04 00 00 00	 mov	 eax, 4
  00558	6b c8 16	 imul	 ecx, eax, 22
  0055b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00561	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00565	50		 push	 eax
  00566	8b 4d f0	 mov	 ecx, DWORD PTR _yelflag$4[ebp]
  00569	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  0056f	51		 push	 ecx
  00570	68 a2 00 00 00	 push	 162			; 000000a2H
  00575	e8 00 00 00 00	 call	 _STRINGY
  0057a	83 c4 04	 add	 esp, 4
  0057d	50		 push	 eax
  0057e	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00581	83 c2 09	 add	 edx, 9
  00584	52		 push	 edx
  00585	e8 00 00 00 00	 call	 _V_DrawTinyNum
  0058a	83 c4 10	 add	 esp, 16			; 00000010H
  0058d	eb 48		 jmp	 SHORT $LN31@ST_drawMat
$LN30@ST_drawMat:

; 1318 : 				stplyr->powers[pw_scatterring]);
; 1319 : 		else
; 1320 : 			V_DrawString(8 + offset, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  0058f	b8 04 00 00 00	 mov	 eax, 4
  00594	6b c8 16	 imul	 ecx, eax, 22
  00597	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  0059d	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  005a1	50		 push	 eax
  005a2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  005a7	e8 00 00 00 00	 call	 _va
  005ac	83 c4 08	 add	 esp, 8
  005af	50		 push	 eax
  005b0	8b 4d f0	 mov	 ecx, DWORD PTR _yelflag$4[ebp]
  005b3	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  005b9	51		 push	 ecx
  005ba	68 a2 00 00 00	 push	 162			; 000000a2H
  005bf	e8 00 00 00 00	 call	 _STRINGY
  005c4	83 c4 04	 add	 esp, 4
  005c7	50		 push	 eax
  005c8	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  005cb	83 c2 08	 add	 edx, 8
  005ce	52		 push	 edx
  005cf	e8 00 00 00 00	 call	 _V_DrawString
  005d4	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@ST_drawMat:

; 1321 : 				va("%d", stplyr->powers[pw_scatterring]));
; 1322 : 
; 1323 : 		if (stplyr->currentweapon == WEP_SCATTER)

  005d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  005dc	83 78 2c 03	 cmp	 DWORD PTR [eax+44], 3
  005e0	75 45		 jne	 SHORT $LN32@ST_drawMat

; 1324 : 			V_DrawScaledPatch(6 + offset, STRINGY(162 - (splitscreen ? 4 : 2)), V_SNAPTOLEFT, curweapon);

  005e2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  005e9	74 09		 je	 SHORT $LN75@ST_drawMat
  005eb	c7 45 a0 04 00
	00 00		 mov	 DWORD PTR tv355[ebp], 4
  005f2	eb 07		 jmp	 SHORT $LN76@ST_drawMat
$LN75@ST_drawMat:
  005f4	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR tv355[ebp], 2
$LN76@ST_drawMat:
  005fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _curweapon
  00600	50		 push	 eax
  00601	68 00 00 00 40	 push	 1073741824		; 40000000H
  00606	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  0060b	2b 4d a0	 sub	 ecx, DWORD PTR tv355[ebp]
  0060e	51		 push	 ecx
  0060f	e8 00 00 00 00	 call	 _STRINGY
  00614	83 c4 04	 add	 esp, 4
  00617	50		 push	 eax
  00618	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  0061b	83 c2 06	 add	 edx, 6
  0061e	52		 push	 edx
  0061f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00624	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@ST_drawMat:

; 1325 : 	}

  00627	eb 35		 jmp	 SHORT $LN33@ST_drawMat
$LN25@ST_drawMat:

; 1326 : 	else if (stplyr->ringweapons & RW_SCATTER)

  00629	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0062e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00631	83 e1 10	 and	 ecx, 16			; 00000010H
  00634	74 28		 je	 SHORT $LN33@ST_drawMat

; 1327 : 		V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, scatterring);

  00636	a1 00 00 00 00	 mov	 eax, DWORD PTR _scatterring
  0063b	50		 push	 eax
  0063c	68 00 00 00 40	 push	 1073741824		; 40000000H
  00641	68 a2 00 00 00	 push	 162			; 000000a2H
  00646	e8 00 00 00 00	 call	 _STRINGY
  0064b	83 c4 04	 add	 esp, 4
  0064e	50		 push	 eax
  0064f	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00652	83 c1 08	 add	 ecx, 8
  00655	51		 push	 ecx
  00656	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0065b	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@ST_drawMat:

; 1328 : 
; 1329 : 	offset += 20;

  0065e	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00661	83 c0 14	 add	 eax, 20			; 00000014H
  00664	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1330 : 
; 1331 : 	if (stplyr->powers[pw_grenadering])

  00667	b8 04 00 00 00	 mov	 eax, 4
  0066c	6b c8 17	 imul	 ecx, eax, 23
  0066f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00675	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0067a	0f 84 78 01 00
	00		 je	 $LN34@ST_drawMat

; 1332 : 	{
; 1333 : 		INT32 yelflag = 0;

  00680	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _yelflag$3[ebp], 0

; 1334 : 
; 1335 : 		if (stplyr->powers[pw_grenadering] >= MAX_GRENADE)

  00687	b8 04 00 00 00	 mov	 eax, 4
  0068c	6b c8 17	 imul	 ecx, eax, 23
  0068f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00695	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  0069a	7c 07		 jl	 SHORT $LN36@ST_drawMat

; 1336 : 			yelflag = V_YELLOWMAP;

  0069c	c7 45 ec 00 00
	10 00		 mov	 DWORD PTR _yelflag$3[ebp], 1048576 ; 00100000H
$LN36@ST_drawMat:

; 1337 : 
; 1338 : 		if ((stplyr->ringweapons & RW_GRENADE) && stplyr->health > 1)

  006a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  006a8	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  006ab	83 e1 20	 and	 ecx, 32			; 00000020H
  006ae	74 35		 je	 SHORT $LN37@ST_drawMat
  006b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  006b5	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  006b9	7e 2a		 jle	 SHORT $LN37@ST_drawMat

; 1339 : 			V_DrawScaledPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, grenadering);

  006bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenadering
  006c0	50		 push	 eax
  006c1	68 00 00 00 40	 push	 1073741824		; 40000000H
  006c6	68 a2 00 00 00	 push	 162			; 000000a2H
  006cb	e8 00 00 00 00	 call	 _STRINGY
  006d0	83 c4 04	 add	 esp, 4
  006d3	50		 push	 eax
  006d4	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  006d7	83 c1 08	 add	 ecx, 8
  006da	51		 push	 ecx
  006db	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  006e0	83 c4 10	 add	 esp, 16			; 00000010H
  006e3	eb 28		 jmp	 SHORT $LN38@ST_drawMat
$LN37@ST_drawMat:

; 1340 : 		else
; 1341 : 			V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT|V_8020TRANS, grenadering);

  006e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenadering
  006ea	50		 push	 eax
  006eb	68 00 00 00 44	 push	 1140850688		; 44000000H
  006f0	68 a2 00 00 00	 push	 162			; 000000a2H
  006f5	e8 00 00 00 00	 call	 _STRINGY
  006fa	83 c4 04	 add	 esp, 4
  006fd	50		 push	 eax
  006fe	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00701	83 c1 08	 add	 ecx, 8
  00704	51		 push	 ecx
  00705	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0070a	83 c4 10	 add	 esp, 16			; 00000010H
$LN38@ST_drawMat:

; 1342 : 
; 1343 : 		if (stplyr->powers[pw_grenadering] > 99)

  0070d	b8 04 00 00 00	 mov	 eax, 4
  00712	6b c8 17	 imul	 ecx, eax, 23
  00715	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  0071b	83 7c 0a 38 63	 cmp	 DWORD PTR [edx+ecx+56], 99 ; 00000063H
  00720	7e 3c		 jle	 SHORT $LN39@ST_drawMat

; 1344 : 			V_DrawTinyNum(8 + offset + 1, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  00722	b8 04 00 00 00	 mov	 eax, 4
  00727	6b c8 17	 imul	 ecx, eax, 23
  0072a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00730	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00734	50		 push	 eax
  00735	8b 4d ec	 mov	 ecx, DWORD PTR _yelflag$3[ebp]
  00738	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  0073e	51		 push	 ecx
  0073f	68 a2 00 00 00	 push	 162			; 000000a2H
  00744	e8 00 00 00 00	 call	 _STRINGY
  00749	83 c4 04	 add	 esp, 4
  0074c	50		 push	 eax
  0074d	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00750	83 c2 09	 add	 edx, 9
  00753	52		 push	 edx
  00754	e8 00 00 00 00	 call	 _V_DrawTinyNum
  00759	83 c4 10	 add	 esp, 16			; 00000010H
  0075c	eb 48		 jmp	 SHORT $LN40@ST_drawMat
$LN39@ST_drawMat:

; 1345 : 				stplyr->powers[pw_grenadering]);
; 1346 : 		else
; 1347 : 			V_DrawString(8 + offset, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  0075e	b8 04 00 00 00	 mov	 eax, 4
  00763	6b c8 17	 imul	 ecx, eax, 23
  00766	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  0076c	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00770	50		 push	 eax
  00771	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00776	e8 00 00 00 00	 call	 _va
  0077b	83 c4 08	 add	 esp, 8
  0077e	50		 push	 eax
  0077f	8b 4d ec	 mov	 ecx, DWORD PTR _yelflag$3[ebp]
  00782	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  00788	51		 push	 ecx
  00789	68 a2 00 00 00	 push	 162			; 000000a2H
  0078e	e8 00 00 00 00	 call	 _STRINGY
  00793	83 c4 04	 add	 esp, 4
  00796	50		 push	 eax
  00797	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  0079a	83 c2 08	 add	 edx, 8
  0079d	52		 push	 edx
  0079e	e8 00 00 00 00	 call	 _V_DrawString
  007a3	83 c4 10	 add	 esp, 16			; 00000010H
$LN40@ST_drawMat:

; 1348 : 				va("%d", stplyr->powers[pw_grenadering]));
; 1349 : 
; 1350 : 		if (stplyr->currentweapon == WEP_GRENADE)

  007a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  007ab	83 78 2c 04	 cmp	 DWORD PTR [eax+44], 4
  007af	75 45		 jne	 SHORT $LN41@ST_drawMat

; 1351 : 			V_DrawScaledPatch(6 + offset, STRINGY(162 - (splitscreen ? 4 : 2)), V_SNAPTOLEFT, curweapon);

  007b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  007b8	74 09		 je	 SHORT $LN77@ST_drawMat
  007ba	c7 45 a0 04 00
	00 00		 mov	 DWORD PTR tv435[ebp], 4
  007c1	eb 07		 jmp	 SHORT $LN78@ST_drawMat
$LN77@ST_drawMat:
  007c3	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR tv435[ebp], 2
$LN78@ST_drawMat:
  007ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _curweapon
  007cf	50		 push	 eax
  007d0	68 00 00 00 40	 push	 1073741824		; 40000000H
  007d5	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  007da	2b 4d a0	 sub	 ecx, DWORD PTR tv435[ebp]
  007dd	51		 push	 ecx
  007de	e8 00 00 00 00	 call	 _STRINGY
  007e3	83 c4 04	 add	 esp, 4
  007e6	50		 push	 eax
  007e7	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  007ea	83 c2 06	 add	 edx, 6
  007ed	52		 push	 edx
  007ee	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  007f3	83 c4 10	 add	 esp, 16			; 00000010H
$LN41@ST_drawMat:

; 1352 : 	}

  007f6	eb 35		 jmp	 SHORT $LN42@ST_drawMat
$LN34@ST_drawMat:

; 1353 : 	else if (stplyr->ringweapons & RW_GRENADE)

  007f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  007fd	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00800	83 e1 20	 and	 ecx, 32			; 00000020H
  00803	74 28		 je	 SHORT $LN42@ST_drawMat

; 1354 : 		V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, grenadering);

  00805	a1 00 00 00 00	 mov	 eax, DWORD PTR _grenadering
  0080a	50		 push	 eax
  0080b	68 00 00 00 40	 push	 1073741824		; 40000000H
  00810	68 a2 00 00 00	 push	 162			; 000000a2H
  00815	e8 00 00 00 00	 call	 _STRINGY
  0081a	83 c4 04	 add	 esp, 4
  0081d	50		 push	 eax
  0081e	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00821	83 c1 08	 add	 ecx, 8
  00824	51		 push	 ecx
  00825	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  0082a	83 c4 10	 add	 esp, 16			; 00000010H
$LN42@ST_drawMat:

; 1355 : 
; 1356 : 	offset += 20;

  0082d	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00830	83 c0 14	 add	 eax, 20			; 00000014H
  00833	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1357 : 
; 1358 : 	if (stplyr->powers[pw_explosionring])

  00836	b8 04 00 00 00	 mov	 eax, 4
  0083b	6b c8 15	 imul	 ecx, eax, 21
  0083e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00844	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00849	0f 84 78 01 00
	00		 je	 $LN43@ST_drawMat

; 1359 : 	{
; 1360 : 		INT32 yelflag = 0;

  0084f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _yelflag$2[ebp], 0

; 1361 : 
; 1362 : 		if (stplyr->powers[pw_explosionring] >= MAX_EXPLOSION)

  00856	b8 04 00 00 00	 mov	 eax, 4
  0085b	6b c8 15	 imul	 ecx, eax, 21
  0085e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00864	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  00869	7c 07		 jl	 SHORT $LN45@ST_drawMat

; 1363 : 			yelflag = V_YELLOWMAP;

  0086b	c7 45 e8 00 00
	10 00		 mov	 DWORD PTR _yelflag$2[ebp], 1048576 ; 00100000H
$LN45@ST_drawMat:

; 1364 : 
; 1365 : 		if ((stplyr->ringweapons & RW_EXPLODE) && stplyr->health > 1)

  00872	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00877	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0087a	83 e1 08	 and	 ecx, 8
  0087d	74 35		 je	 SHORT $LN46@ST_drawMat
  0087f	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00884	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  00888	7e 2a		 jle	 SHORT $LN46@ST_drawMat

; 1366 : 			V_DrawScaledPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, explosionring);

  0088a	a1 00 00 00 00	 mov	 eax, DWORD PTR _explosionring
  0088f	50		 push	 eax
  00890	68 00 00 00 40	 push	 1073741824		; 40000000H
  00895	68 a2 00 00 00	 push	 162			; 000000a2H
  0089a	e8 00 00 00 00	 call	 _STRINGY
  0089f	83 c4 04	 add	 esp, 4
  008a2	50		 push	 eax
  008a3	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  008a6	83 c1 08	 add	 ecx, 8
  008a9	51		 push	 ecx
  008aa	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  008af	83 c4 10	 add	 esp, 16			; 00000010H
  008b2	eb 28		 jmp	 SHORT $LN47@ST_drawMat
$LN46@ST_drawMat:

; 1367 : 		else
; 1368 : 			V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT|V_8020TRANS, explosionring);

  008b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _explosionring
  008b9	50		 push	 eax
  008ba	68 00 00 00 44	 push	 1140850688		; 44000000H
  008bf	68 a2 00 00 00	 push	 162			; 000000a2H
  008c4	e8 00 00 00 00	 call	 _STRINGY
  008c9	83 c4 04	 add	 esp, 4
  008cc	50		 push	 eax
  008cd	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  008d0	83 c1 08	 add	 ecx, 8
  008d3	51		 push	 ecx
  008d4	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  008d9	83 c4 10	 add	 esp, 16			; 00000010H
$LN47@ST_drawMat:

; 1369 : 
; 1370 : 		if (stplyr->powers[pw_explosionring] > 99)

  008dc	b8 04 00 00 00	 mov	 eax, 4
  008e1	6b c8 15	 imul	 ecx, eax, 21
  008e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  008ea	83 7c 0a 38 63	 cmp	 DWORD PTR [edx+ecx+56], 99 ; 00000063H
  008ef	7e 3c		 jle	 SHORT $LN48@ST_drawMat

; 1371 : 			V_DrawTinyNum(8 + offset + 1, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  008f1	b8 04 00 00 00	 mov	 eax, 4
  008f6	6b c8 15	 imul	 ecx, eax, 21
  008f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  008ff	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00903	50		 push	 eax
  00904	8b 4d e8	 mov	 ecx, DWORD PTR _yelflag$2[ebp]
  00907	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  0090d	51		 push	 ecx
  0090e	68 a2 00 00 00	 push	 162			; 000000a2H
  00913	e8 00 00 00 00	 call	 _STRINGY
  00918	83 c4 04	 add	 esp, 4
  0091b	50		 push	 eax
  0091c	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  0091f	83 c2 09	 add	 edx, 9
  00922	52		 push	 edx
  00923	e8 00 00 00 00	 call	 _V_DrawTinyNum
  00928	83 c4 10	 add	 esp, 16			; 00000010H
  0092b	eb 48		 jmp	 SHORT $LN49@ST_drawMat
$LN48@ST_drawMat:

; 1372 : 				stplyr->powers[pw_explosionring]);
; 1373 : 		else
; 1374 : 			V_DrawString(8 + offset, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  0092d	b8 04 00 00 00	 mov	 eax, 4
  00932	6b c8 15	 imul	 ecx, eax, 21
  00935	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  0093b	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0093f	50		 push	 eax
  00940	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00945	e8 00 00 00 00	 call	 _va
  0094a	83 c4 08	 add	 esp, 8
  0094d	50		 push	 eax
  0094e	8b 4d e8	 mov	 ecx, DWORD PTR _yelflag$2[ebp]
  00951	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  00957	51		 push	 ecx
  00958	68 a2 00 00 00	 push	 162			; 000000a2H
  0095d	e8 00 00 00 00	 call	 _STRINGY
  00962	83 c4 04	 add	 esp, 4
  00965	50		 push	 eax
  00966	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00969	83 c2 08	 add	 edx, 8
  0096c	52		 push	 edx
  0096d	e8 00 00 00 00	 call	 _V_DrawString
  00972	83 c4 10	 add	 esp, 16			; 00000010H
$LN49@ST_drawMat:

; 1375 : 				va("%d", stplyr->powers[pw_explosionring]));
; 1376 : 
; 1377 : 		if (stplyr->currentweapon == WEP_EXPLODE)

  00975	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0097a	83 78 2c 05	 cmp	 DWORD PTR [eax+44], 5
  0097e	75 45		 jne	 SHORT $LN50@ST_drawMat

; 1378 : 			V_DrawScaledPatch(6 + offset, STRINGY(162 - (splitscreen ? 4 : 2)), V_SNAPTOLEFT, curweapon);

  00980	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00987	74 09		 je	 SHORT $LN79@ST_drawMat
  00989	c7 45 a0 04 00
	00 00		 mov	 DWORD PTR tv515[ebp], 4
  00990	eb 07		 jmp	 SHORT $LN80@ST_drawMat
$LN79@ST_drawMat:
  00992	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR tv515[ebp], 2
$LN80@ST_drawMat:
  00999	a1 00 00 00 00	 mov	 eax, DWORD PTR _curweapon
  0099e	50		 push	 eax
  0099f	68 00 00 00 40	 push	 1073741824		; 40000000H
  009a4	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  009a9	2b 4d a0	 sub	 ecx, DWORD PTR tv515[ebp]
  009ac	51		 push	 ecx
  009ad	e8 00 00 00 00	 call	 _STRINGY
  009b2	83 c4 04	 add	 esp, 4
  009b5	50		 push	 eax
  009b6	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  009b9	83 c2 06	 add	 edx, 6
  009bc	52		 push	 edx
  009bd	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  009c2	83 c4 10	 add	 esp, 16			; 00000010H
$LN50@ST_drawMat:

; 1379 : 	}

  009c5	eb 35		 jmp	 SHORT $LN51@ST_drawMat
$LN43@ST_drawMat:

; 1380 : 	else if (stplyr->ringweapons & RW_EXPLODE)

  009c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  009cc	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  009cf	83 e1 08	 and	 ecx, 8
  009d2	74 28		 je	 SHORT $LN51@ST_drawMat

; 1381 : 		V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, explosionring);

  009d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _explosionring
  009d9	50		 push	 eax
  009da	68 00 00 00 40	 push	 1073741824		; 40000000H
  009df	68 a2 00 00 00	 push	 162			; 000000a2H
  009e4	e8 00 00 00 00	 call	 _STRINGY
  009e9	83 c4 04	 add	 esp, 4
  009ec	50		 push	 eax
  009ed	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  009f0	83 c1 08	 add	 ecx, 8
  009f3	51		 push	 ecx
  009f4	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  009f9	83 c4 10	 add	 esp, 16			; 00000010H
$LN51@ST_drawMat:

; 1382 : 
; 1383 : 	offset += 20;

  009fc	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  009ff	83 c0 14	 add	 eax, 20			; 00000014H
  00a02	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1384 : 
; 1385 : 	if (stplyr->powers[pw_railring])

  00a05	b8 04 00 00 00	 mov	 eax, 4
  00a0a	6b c8 13	 imul	 ecx, eax, 19
  00a0d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00a13	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00a18	0f 84 78 01 00
	00		 je	 $LN52@ST_drawMat

; 1386 : 	{
; 1387 : 		INT32 yelflag = 0;

  00a1e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _yelflag$1[ebp], 0

; 1388 : 
; 1389 : 		if (stplyr->powers[pw_railring] >= MAX_RAIL)

  00a25	b8 04 00 00 00	 mov	 eax, 4
  00a2a	6b c8 13	 imul	 ecx, eax, 19
  00a2d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00a33	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  00a38	7c 07		 jl	 SHORT $LN54@ST_drawMat

; 1390 : 			yelflag = V_YELLOWMAP;

  00a3a	c7 45 e4 00 00
	10 00		 mov	 DWORD PTR _yelflag$1[ebp], 1048576 ; 00100000H
$LN54@ST_drawMat:

; 1391 : 
; 1392 : 		if ((stplyr->ringweapons & RW_RAIL) && stplyr->health > 1)

  00a41	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00a46	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00a49	83 e1 02	 and	 ecx, 2
  00a4c	74 35		 je	 SHORT $LN55@ST_drawMat
  00a4e	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00a53	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  00a57	7e 2a		 jle	 SHORT $LN55@ST_drawMat

; 1393 : 			V_DrawScaledPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, railring);

  00a59	a1 00 00 00 00	 mov	 eax, DWORD PTR _railring
  00a5e	50		 push	 eax
  00a5f	68 00 00 00 40	 push	 1073741824		; 40000000H
  00a64	68 a2 00 00 00	 push	 162			; 000000a2H
  00a69	e8 00 00 00 00	 call	 _STRINGY
  00a6e	83 c4 04	 add	 esp, 4
  00a71	50		 push	 eax
  00a72	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00a75	83 c1 08	 add	 ecx, 8
  00a78	51		 push	 ecx
  00a79	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00a7e	83 c4 10	 add	 esp, 16			; 00000010H
  00a81	eb 28		 jmp	 SHORT $LN56@ST_drawMat
$LN55@ST_drawMat:

; 1394 : 		else
; 1395 : 			V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT|V_8020TRANS, railring);

  00a83	a1 00 00 00 00	 mov	 eax, DWORD PTR _railring
  00a88	50		 push	 eax
  00a89	68 00 00 00 44	 push	 1140850688		; 44000000H
  00a8e	68 a2 00 00 00	 push	 162			; 000000a2H
  00a93	e8 00 00 00 00	 call	 _STRINGY
  00a98	83 c4 04	 add	 esp, 4
  00a9b	50		 push	 eax
  00a9c	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00a9f	83 c1 08	 add	 ecx, 8
  00aa2	51		 push	 ecx
  00aa3	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  00aa8	83 c4 10	 add	 esp, 16			; 00000010H
$LN56@ST_drawMat:

; 1396 : 
; 1397 : 		if (stplyr->powers[pw_railring] > 99)

  00aab	b8 04 00 00 00	 mov	 eax, 4
  00ab0	6b c8 13	 imul	 ecx, eax, 19
  00ab3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00ab9	83 7c 0a 38 63	 cmp	 DWORD PTR [edx+ecx+56], 99 ; 00000063H
  00abe	7e 3c		 jle	 SHORT $LN57@ST_drawMat

; 1398 : 			V_DrawTinyNum(8 + offset + 1, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  00ac0	b8 04 00 00 00	 mov	 eax, 4
  00ac5	6b c8 13	 imul	 ecx, eax, 19
  00ac8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00ace	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00ad2	50		 push	 eax
  00ad3	8b 4d e4	 mov	 ecx, DWORD PTR _yelflag$1[ebp]
  00ad6	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  00adc	51		 push	 ecx
  00add	68 a2 00 00 00	 push	 162			; 000000a2H
  00ae2	e8 00 00 00 00	 call	 _STRINGY
  00ae7	83 c4 04	 add	 esp, 4
  00aea	50		 push	 eax
  00aeb	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00aee	83 c2 09	 add	 edx, 9
  00af1	52		 push	 edx
  00af2	e8 00 00 00 00	 call	 _V_DrawTinyNum
  00af7	83 c4 10	 add	 esp, 16			; 00000010H
  00afa	eb 48		 jmp	 SHORT $LN58@ST_drawMat
$LN57@ST_drawMat:

; 1399 : 				stplyr->powers[pw_railring]);
; 1400 : 		else
; 1401 : 			V_DrawString(8 + offset, STRINGY(162), V_TRANSLUCENT | V_SNAPTOLEFT | yelflag,

  00afc	b8 04 00 00 00	 mov	 eax, 4
  00b01	6b c8 13	 imul	 ecx, eax, 19
  00b04	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00b0a	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00b0e	50		 push	 eax
  00b0f	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00b14	e8 00 00 00 00	 call	 _va
  00b19	83 c4 08	 add	 esp, 8
  00b1c	50		 push	 eax
  00b1d	8b 4d e4	 mov	 ecx, DWORD PTR _yelflag$1[ebp]
  00b20	81 c9 00 00 40
	40		 or	 ecx, 1077936128		; 40400000H
  00b26	51		 push	 ecx
  00b27	68 a2 00 00 00	 push	 162			; 000000a2H
  00b2c	e8 00 00 00 00	 call	 _STRINGY
  00b31	83 c4 04	 add	 esp, 4
  00b34	50		 push	 eax
  00b35	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00b38	83 c2 08	 add	 edx, 8
  00b3b	52		 push	 edx
  00b3c	e8 00 00 00 00	 call	 _V_DrawString
  00b41	83 c4 10	 add	 esp, 16			; 00000010H
$LN58@ST_drawMat:

; 1402 : 				va("%d", stplyr->powers[pw_railring]));
; 1403 : 
; 1404 : 		if (stplyr->currentweapon == WEP_RAIL)

  00b44	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00b49	83 78 2c 06	 cmp	 DWORD PTR [eax+44], 6
  00b4d	75 45		 jne	 SHORT $LN59@ST_drawMat

; 1405 : 			V_DrawScaledPatch(6 + offset, STRINGY(162 - (splitscreen ? 4 : 2)), V_SNAPTOLEFT, curweapon);

  00b4f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00b56	74 09		 je	 SHORT $LN81@ST_drawMat
  00b58	c7 45 a0 04 00
	00 00		 mov	 DWORD PTR tv595[ebp], 4
  00b5f	eb 07		 jmp	 SHORT $LN82@ST_drawMat
$LN81@ST_drawMat:
  00b61	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR tv595[ebp], 2
$LN82@ST_drawMat:
  00b68	a1 00 00 00 00	 mov	 eax, DWORD PTR _curweapon
  00b6d	50		 push	 eax
  00b6e	68 00 00 00 40	 push	 1073741824		; 40000000H
  00b73	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  00b78	2b 4d a0	 sub	 ecx, DWORD PTR tv595[ebp]
  00b7b	51		 push	 ecx
  00b7c	e8 00 00 00 00	 call	 _STRINGY
  00b81	83 c4 04	 add	 esp, 4
  00b84	50		 push	 eax
  00b85	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00b88	83 c2 06	 add	 edx, 6
  00b8b	52		 push	 edx
  00b8c	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00b91	83 c4 10	 add	 esp, 16			; 00000010H
$LN59@ST_drawMat:

; 1406 : 	}

  00b94	eb 35		 jmp	 SHORT $LN60@ST_drawMat
$LN52@ST_drawMat:

; 1407 : 	else if (stplyr->ringweapons & RW_RAIL)

  00b96	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00b9b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00b9e	83 e1 02	 and	 ecx, 2
  00ba1	74 28		 je	 SHORT $LN60@ST_drawMat

; 1408 : 		V_DrawTranslucentPatch(8 + offset, STRINGY(162), V_SNAPTOLEFT, railring);

  00ba3	a1 00 00 00 00	 mov	 eax, DWORD PTR _railring
  00ba8	50		 push	 eax
  00ba9	68 00 00 00 40	 push	 1073741824		; 40000000H
  00bae	68 a2 00 00 00	 push	 162			; 000000a2H
  00bb3	e8 00 00 00 00	 call	 _STRINGY
  00bb8	83 c4 04	 add	 esp, 4
  00bbb	50		 push	 eax
  00bbc	8b 4d fc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00bbf	83 c1 08	 add	 ecx, 8
  00bc2	51		 push	 ecx
  00bc3	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  00bc8	83 c4 10	 add	 esp, 16			; 00000010H
$LN60@ST_drawMat:

; 1409 : 
; 1410 : 	offset += 20;

  00bcb	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00bce	83 c0 14	 add	 eax, 20			; 00000014H
  00bd1	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1411 : 
; 1412 : 	// Power Stones collected
; 1413 : 	offset = 136; // Used for Y now

  00bd4	c7 45 fc 88 00
	00 00		 mov	 DWORD PTR _offset$[ebp], 136 ; 00000088H

; 1414 : 
; 1415 : 	if (stplyr->powers[pw_emeralds] & EMERALD1)

  00bdb	b8 04 00 00 00	 mov	 eax, 4
  00be0	6b c8 18	 imul	 ecx, eax, 24
  00be3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00be9	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00bed	83 e0 01	 and	 eax, 1
  00bf0	74 2b		 je	 SHORT $LN61@ST_drawMat

; 1416 : 		V_DrawScaledPatch(28, STRINGY(offset), V_SNAPTOLEFT, tinyemeraldpics[0]);

  00bf2	b8 04 00 00 00	 mov	 eax, 4
  00bf7	6b c8 00	 imul	 ecx, eax, 0
  00bfa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tinyemeraldpics[ecx]
  00c00	52		 push	 edx
  00c01	68 00 00 00 40	 push	 1073741824		; 40000000H
  00c06	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00c09	50		 push	 eax
  00c0a	e8 00 00 00 00	 call	 _STRINGY
  00c0f	83 c4 04	 add	 esp, 4
  00c12	50		 push	 eax
  00c13	6a 1c		 push	 28			; 0000001cH
  00c15	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00c1a	83 c4 10	 add	 esp, 16			; 00000010H
$LN61@ST_drawMat:

; 1417 : 
; 1418 : 	offset += 8;

  00c1d	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00c20	83 c0 08	 add	 eax, 8
  00c23	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1419 : 
; 1420 : 	if (stplyr->powers[pw_emeralds] & EMERALD2)

  00c26	b8 04 00 00 00	 mov	 eax, 4
  00c2b	6b c8 18	 imul	 ecx, eax, 24
  00c2e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00c34	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00c38	83 e0 02	 and	 eax, 2
  00c3b	74 2b		 je	 SHORT $LN62@ST_drawMat

; 1421 : 		V_DrawScaledPatch(40, STRINGY(offset), V_SNAPTOLEFT, tinyemeraldpics[1]);

  00c3d	b8 04 00 00 00	 mov	 eax, 4
  00c42	c1 e0 00	 shl	 eax, 0
  00c45	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _tinyemeraldpics[eax]
  00c4b	51		 push	 ecx
  00c4c	68 00 00 00 40	 push	 1073741824		; 40000000H
  00c51	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00c54	52		 push	 edx
  00c55	e8 00 00 00 00	 call	 _STRINGY
  00c5a	83 c4 04	 add	 esp, 4
  00c5d	50		 push	 eax
  00c5e	6a 28		 push	 40			; 00000028H
  00c60	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00c65	83 c4 10	 add	 esp, 16			; 00000010H
$LN62@ST_drawMat:

; 1422 : 
; 1423 : 	if (stplyr->powers[pw_emeralds] & EMERALD6)

  00c68	b8 04 00 00 00	 mov	 eax, 4
  00c6d	6b c8 18	 imul	 ecx, eax, 24
  00c70	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00c76	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00c7a	83 e0 20	 and	 eax, 32			; 00000020H
  00c7d	74 2b		 je	 SHORT $LN63@ST_drawMat

; 1424 : 		V_DrawScaledPatch(16, STRINGY(offset), V_SNAPTOLEFT, tinyemeraldpics[5]);

  00c7f	b8 04 00 00 00	 mov	 eax, 4
  00c84	6b c8 05	 imul	 ecx, eax, 5
  00c87	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tinyemeraldpics[ecx]
  00c8d	52		 push	 edx
  00c8e	68 00 00 00 40	 push	 1073741824		; 40000000H
  00c93	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00c96	50		 push	 eax
  00c97	e8 00 00 00 00	 call	 _STRINGY
  00c9c	83 c4 04	 add	 esp, 4
  00c9f	50		 push	 eax
  00ca0	6a 10		 push	 16			; 00000010H
  00ca2	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00ca7	83 c4 10	 add	 esp, 16			; 00000010H
$LN63@ST_drawMat:

; 1425 : 
; 1426 : 	offset += 16;

  00caa	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00cad	83 c0 10	 add	 eax, 16			; 00000010H
  00cb0	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1427 : 
; 1428 : 	if (stplyr->powers[pw_emeralds] & EMERALD3)

  00cb3	b8 04 00 00 00	 mov	 eax, 4
  00cb8	6b c8 18	 imul	 ecx, eax, 24
  00cbb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00cc1	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00cc5	83 e0 04	 and	 eax, 4
  00cc8	74 2a		 je	 SHORT $LN64@ST_drawMat

; 1429 : 		V_DrawScaledPatch(40, STRINGY(offset), V_SNAPTOLEFT, tinyemeraldpics[2]);

  00cca	b8 04 00 00 00	 mov	 eax, 4
  00ccf	d1 e0		 shl	 eax, 1
  00cd1	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _tinyemeraldpics[eax]
  00cd7	51		 push	 ecx
  00cd8	68 00 00 00 40	 push	 1073741824		; 40000000H
  00cdd	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00ce0	52		 push	 edx
  00ce1	e8 00 00 00 00	 call	 _STRINGY
  00ce6	83 c4 04	 add	 esp, 4
  00ce9	50		 push	 eax
  00cea	6a 28		 push	 40			; 00000028H
  00cec	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00cf1	83 c4 10	 add	 esp, 16			; 00000010H
$LN64@ST_drawMat:

; 1430 : 
; 1431 : 	if (stplyr->powers[pw_emeralds] & EMERALD5)

  00cf4	b8 04 00 00 00	 mov	 eax, 4
  00cf9	6b c8 18	 imul	 ecx, eax, 24
  00cfc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00d02	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00d06	83 e0 10	 and	 eax, 16			; 00000010H
  00d09	74 2b		 je	 SHORT $LN65@ST_drawMat

; 1432 : 		V_DrawScaledPatch(16, STRINGY(offset), V_SNAPTOLEFT, tinyemeraldpics[4]);

  00d0b	b8 04 00 00 00	 mov	 eax, 4
  00d10	c1 e0 02	 shl	 eax, 2
  00d13	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _tinyemeraldpics[eax]
  00d19	51		 push	 ecx
  00d1a	68 00 00 00 40	 push	 1073741824		; 40000000H
  00d1f	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00d22	52		 push	 edx
  00d23	e8 00 00 00 00	 call	 _STRINGY
  00d28	83 c4 04	 add	 esp, 4
  00d2b	50		 push	 eax
  00d2c	6a 10		 push	 16			; 00000010H
  00d2e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00d33	83 c4 10	 add	 esp, 16			; 00000010H
$LN65@ST_drawMat:

; 1433 : 
; 1434 : 	offset += 8;

  00d36	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00d39	83 c0 08	 add	 eax, 8
  00d3c	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1435 : 
; 1436 : 	if (stplyr->powers[pw_emeralds] & EMERALD4)

  00d3f	b8 04 00 00 00	 mov	 eax, 4
  00d44	6b c8 18	 imul	 ecx, eax, 24
  00d47	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00d4d	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00d51	83 e0 08	 and	 eax, 8
  00d54	74 2b		 je	 SHORT $LN66@ST_drawMat

; 1437 : 		V_DrawScaledPatch(28, STRINGY(offset), V_SNAPTOLEFT, tinyemeraldpics[3]);

  00d56	b8 04 00 00 00	 mov	 eax, 4
  00d5b	6b c8 03	 imul	 ecx, eax, 3
  00d5e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tinyemeraldpics[ecx]
  00d64	52		 push	 edx
  00d65	68 00 00 00 40	 push	 1073741824		; 40000000H
  00d6a	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00d6d	50		 push	 eax
  00d6e	e8 00 00 00 00	 call	 _STRINGY
  00d73	83 c4 04	 add	 esp, 4
  00d76	50		 push	 eax
  00d77	6a 1c		 push	 28			; 0000001cH
  00d79	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00d7e	83 c4 10	 add	 esp, 16			; 00000010H
$LN66@ST_drawMat:

; 1438 : 
; 1439 : 	offset -= 16;

  00d81	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00d84	83 e8 10	 sub	 eax, 16			; 00000010H
  00d87	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 1440 : 
; 1441 : 	if (stplyr->powers[pw_emeralds] & EMERALD7)

  00d8a	b8 04 00 00 00	 mov	 eax, 4
  00d8f	6b c8 18	 imul	 ecx, eax, 24
  00d92	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00d98	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00d9c	83 e0 40	 and	 eax, 64			; 00000040H
  00d9f	74 2b		 je	 SHORT $LN67@ST_drawMat

; 1442 : 		V_DrawScaledPatch(28, STRINGY(offset), V_SNAPTOLEFT, tinyemeraldpics[6]);

  00da1	b8 04 00 00 00	 mov	 eax, 4
  00da6	6b c8 06	 imul	 ecx, eax, 6
  00da9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _tinyemeraldpics[ecx]
  00daf	52		 push	 edx
  00db0	68 00 00 00 40	 push	 1073741824		; 40000000H
  00db5	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00db8	50		 push	 eax
  00db9	e8 00 00 00 00	 call	 _STRINGY
  00dbe	83 c4 04	 add	 esp, 4
  00dc1	50		 push	 eax
  00dc2	6a 1c		 push	 28			; 0000001cH
  00dc4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00dc9	83 c4 10	 add	 esp, 16			; 00000010H
$LN67@ST_drawMat:

; 1443 : }

  00dcc	5f		 pop	 edi
  00dcd	5e		 pop	 esi
  00dce	5b		 pop	 ebx
  00dcf	8b e5		 mov	 esp, ebp
  00dd1	5d		 pop	 ebp
  00dd2	c3		 ret	 0
_ST_drawMatchHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawNiGHTSHUD
_TEXT	SEGMENT
tv86 = -120						; size = 4
tv143 = -120						; size = 4
tv746 = -120						; size = 4
_numbersize$1 = -52					; size = 4
_t$2 = -48						; size = 4
_orblength$3 = -44					; size = 4
_r$4 = -40						; size = 4
_length$5 = -36						; size = 4
_origamount$6 = -32					; size = 4
_amount$7 = -28						; size = 4
_tics$8 = -24						; size = 4
_seconds$9 = -20					; size = 4
_seconds$10 = -16					; size = 4
_locy$11 = -12						; size = 4
_locx$12 = -8						; size = 4
_colornum$13 = -4					; size = 4
_ST_drawNiGHTSHUD PROC					; COMDAT

; 1006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1007 : 	if (stplyr->linkcount > 1)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0000e	83 b8 b8 01 00
	00 01		 cmp	 DWORD PTR [eax+440], 1
  00015	0f 8e 61 01 00
	00		 jle	 $LN10@ST_drawNiG

; 1008 : 	{
; 1009 : 		INT32 colornum;
; 1010 : 
; 1011 : 		colornum = ((stplyr->linkcount-1) / 5)%14;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00020	8b 80 b8 01 00
	00		 mov	 eax, DWORD PTR [eax+440]
  00026	83 e8 01	 sub	 eax, 1
  00029	99		 cdq
  0002a	b9 05 00 00 00	 mov	 ecx, 5
  0002f	f7 f9		 idiv	 ecx
  00031	99		 cdq
  00032	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00037	f7 f9		 idiv	 ecx
  00039	89 55 fc	 mov	 DWORD PTR _colornum$13[ebp], edx

; 1012 : 
; 1013 : 		if (splitscreen)

  0003c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00043	0f 84 9c 00 00
	00		 je	 $LN9@ST_drawNiG

; 1014 : 		{
; 1015 : 			ST_DrawNightsOverlayNum(SCX(256), SCY(160), (stplyr->linkcount-1), nightsnum, colornum);

  00049	8b 45 fc	 mov	 eax, DWORD PTR _colornum$13[ebp]
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET _nightsnum
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00058	8b 91 b8 01 00
	00		 mov	 edx, DWORD PTR [ecx+440]
  0005e	83 ea 01	 sub	 edx, 1
  00061	52		 push	 edx
  00062	68 a0 00 00 00	 push	 160			; 000000a0H
  00067	e8 00 00 00 00	 call	 _SCY
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	68 00 01 00 00	 push	 256			; 00000100H
  00075	e8 00 00 00 00	 call	 _SCX
  0007a	83 c4 04	 add	 esp, 4
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _ST_DrawNightsOverlayNum
  00083	83 c4 14	 add	 esp, 20			; 00000014H

; 1016 : 			V_DrawMappedPatch(SCX(264), SCY(160), V_NOSCALESTART, nightslink,

  00086	83 7d fc 00	 cmp	 DWORD PTR _colornum$13[ebp], 0
  0008a	75 0a		 jne	 SHORT $LN46@ST_drawNiG
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaps
  00091	89 45 88	 mov	 DWORD PTR tv86[ebp], eax
  00094	eb 16		 jmp	 SHORT $LN47@ST_drawNiG
$LN46@ST_drawNiG:
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _colornum$13[ebp]
  00099	c1 e1 08	 shl	 ecx, 8
  0009c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _defaulttranslationtables
  000a2	8d 84 0a 00 ff
	ff ff		 lea	 eax, DWORD PTR [edx+ecx-256]
  000a9	89 45 88	 mov	 DWORD PTR tv86[ebp], eax
$LN47@ST_drawNiG:
  000ac	8b 4d 88	 mov	 ecx, DWORD PTR tv86[ebp]
  000af	51		 push	 ecx
  000b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nightslink
  000b6	52		 push	 edx
  000b7	68 00 00 01 00	 push	 65536			; 00010000H
  000bc	68 a0 00 00 00	 push	 160			; 000000a0H
  000c1	e8 00 00 00 00	 call	 _SCY
  000c6	83 c4 04	 add	 esp, 4
  000c9	50		 push	 eax
  000ca	68 08 01 00 00	 push	 264			; 00000108H
  000cf	e8 00 00 00 00	 call	 _SCX
  000d4	83 c4 04	 add	 esp, 4
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  000dd	83 c4 14	 add	 esp, 20			; 00000014H

; 1017 : 				colornum == 0 ? colormaps : (UINT8 *)defaulttranslationtables - 256 + (colornum<<8));
; 1018 : 		}

  000e0	e9 97 00 00 00	 jmp	 $LN10@ST_drawNiG
$LN9@ST_drawNiG:

; 1019 : 		else
; 1020 : 		{
; 1021 : 			ST_DrawNightsOverlayNum(SCX(160), SCY(176), (stplyr->linkcount-1), nightsnum, colornum);

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _colornum$13[ebp]
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET _nightsnum
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  000f4	8b 91 b8 01 00
	00		 mov	 edx, DWORD PTR [ecx+440]
  000fa	83 ea 01	 sub	 edx, 1
  000fd	52		 push	 edx
  000fe	68 b0 00 00 00	 push	 176			; 000000b0H
  00103	e8 00 00 00 00	 call	 _SCY
  00108	83 c4 04	 add	 esp, 4
  0010b	50		 push	 eax
  0010c	68 a0 00 00 00	 push	 160			; 000000a0H
  00111	e8 00 00 00 00	 call	 _SCX
  00116	83 c4 04	 add	 esp, 4
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 _ST_DrawNightsOverlayNum
  0011f	83 c4 14	 add	 esp, 20			; 00000014H

; 1022 : 			V_DrawMappedPatch(SCX(168), SCY(176), V_NOSCALESTART, nightslink,

  00122	83 7d fc 00	 cmp	 DWORD PTR _colornum$13[ebp], 0
  00126	75 0a		 jne	 SHORT $LN48@ST_drawNiG
  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaps
  0012d	89 45 88	 mov	 DWORD PTR tv143[ebp], eax
  00130	eb 16		 jmp	 SHORT $LN49@ST_drawNiG
$LN48@ST_drawNiG:
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _colornum$13[ebp]
  00135	c1 e1 08	 shl	 ecx, 8
  00138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _defaulttranslationtables
  0013e	8d 84 0a 00 ff
	ff ff		 lea	 eax, DWORD PTR [edx+ecx-256]
  00145	89 45 88	 mov	 DWORD PTR tv143[ebp], eax
$LN49@ST_drawNiG:
  00148	8b 4d 88	 mov	 ecx, DWORD PTR tv143[ebp]
  0014b	51		 push	 ecx
  0014c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nightslink
  00152	52		 push	 edx
  00153	68 00 00 01 00	 push	 65536			; 00010000H
  00158	68 b0 00 00 00	 push	 176			; 000000b0H
  0015d	e8 00 00 00 00	 call	 _SCY
  00162	83 c4 04	 add	 esp, 4
  00165	50		 push	 eax
  00166	68 a8 00 00 00	 push	 168			; 000000a8H
  0016b	e8 00 00 00 00	 call	 _SCX
  00170	83 c4 04	 add	 esp, 4
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  00179	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@ST_drawNiG:

; 1023 : 				colornum == 0 ? colormaps : (UINT8 *)defaulttranslationtables - 256 + (colornum<<8));
; 1024 : 		}
; 1025 : 	}
; 1026 : 
; 1027 : 	if (stplyr->pflags & PF_NIGHTSMODE)

  0017c	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00181	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00187	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  0018d	0f 84 29 01 00
	00		 je	 $LN15@ST_drawNiG

; 1028 : 	{
; 1029 : 		INT32 locx, locy;
; 1030 : 
; 1031 : 		if (splitscreen)

  00193	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0019a	74 10		 je	 SHORT $LN12@ST_drawNiG

; 1032 : 		{
; 1033 : 			locx = 110;

  0019c	c7 45 f8 6e 00
	00 00		 mov	 DWORD PTR _locx$12[ebp], 110 ; 0000006eH

; 1034 : 			locy = 188;

  001a3	c7 45 f4 bc 00
	00 00		 mov	 DWORD PTR _locy$11[ebp], 188 ; 000000bcH

; 1035 : 		}

  001aa	eb 0e		 jmp	 SHORT $LN13@ST_drawNiG
$LN12@ST_drawNiG:

; 1036 : 		else
; 1037 : 		{
; 1038 : 			locx = 16;

  001ac	c7 45 f8 10 00
	00 00		 mov	 DWORD PTR _locx$12[ebp], 16 ; 00000010H

; 1039 : 			locy = 144;

  001b3	c7 45 f4 90 00
	00 00		 mov	 DWORD PTR _locy$11[ebp], 144 ; 00000090H
$LN13@ST_drawNiG:

; 1040 : 		}
; 1041 : 
; 1042 : 		if (!(stplyr->drillmeter & 1))

  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  001bf	8b 88 c8 01 00
	00		 mov	 ecx, DWORD PTR [eax+456]
  001c5	83 e1 01	 and	 ecx, 1
  001c8	75 7a		 jne	 SHORT $LN14@ST_drawNiG

; 1043 : 		{
; 1044 : 			V_DrawFill(locx-2, STRINGY(locy-2), 100, 8, 48);

  001ca	6a 30		 push	 48			; 00000030H
  001cc	6a 08		 push	 8
  001ce	6a 64		 push	 100			; 00000064H
  001d0	8b 45 f4	 mov	 eax, DWORD PTR _locy$11[ebp]
  001d3	83 e8 02	 sub	 eax, 2
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _STRINGY
  001dc	83 c4 04	 add	 esp, 4
  001df	50		 push	 eax
  001e0	8b 4d f8	 mov	 ecx, DWORD PTR _locx$12[ebp]
  001e3	83 e9 02	 sub	 ecx, 2
  001e6	51		 push	 ecx
  001e7	e8 00 00 00 00	 call	 _V_DrawFill
  001ec	83 c4 14	 add	 esp, 20			; 00000014H

; 1045 : 			V_DrawFill(locx, STRINGY(locy), 96, 4, 31);

  001ef	6a 1f		 push	 31			; 0000001fH
  001f1	6a 04		 push	 4
  001f3	6a 60		 push	 96			; 00000060H
  001f5	8b 45 f4	 mov	 eax, DWORD PTR _locy$11[ebp]
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 _STRINGY
  001fe	83 c4 04	 add	 esp, 4
  00201	50		 push	 eax
  00202	8b 4d f8	 mov	 ecx, DWORD PTR _locx$12[ebp]
  00205	51		 push	 ecx
  00206	e8 00 00 00 00	 call	 _V_DrawFill
  0020b	83 c4 14	 add	 esp, 20			; 00000014H

; 1046 : 			V_DrawFill(locx, STRINGY(locy), stplyr->drillmeter/20, 4, 160);

  0020e	68 a0 00 00 00	 push	 160			; 000000a0H
  00213	6a 04		 push	 4
  00215	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0021a	8b 80 c8 01 00
	00		 mov	 eax, DWORD PTR [eax+456]
  00220	99		 cdq
  00221	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00226	f7 f9		 idiv	 ecx
  00228	50		 push	 eax
  00229	8b 55 f4	 mov	 edx, DWORD PTR _locy$11[ebp]
  0022c	52		 push	 edx
  0022d	e8 00 00 00 00	 call	 _STRINGY
  00232	83 c4 04	 add	 esp, 4
  00235	50		 push	 eax
  00236	8b 45 f8	 mov	 eax, DWORD PTR _locx$12[ebp]
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 _V_DrawFill
  0023f	83 c4 14	 add	 esp, 20			; 00000014H

; 1047 : 		}

  00242	eb 78		 jmp	 SHORT $LN15@ST_drawNiG
$LN14@ST_drawNiG:

; 1048 : 		else
; 1049 : 		{
; 1050 : 			V_DrawFill(locx-2, STRINGY(locy-2), 100, 8, 37);

  00244	6a 25		 push	 37			; 00000025H
  00246	6a 08		 push	 8
  00248	6a 64		 push	 100			; 00000064H
  0024a	8b 45 f4	 mov	 eax, DWORD PTR _locy$11[ebp]
  0024d	83 e8 02	 sub	 eax, 2
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _STRINGY
  00256	83 c4 04	 add	 esp, 4
  00259	50		 push	 eax
  0025a	8b 4d f8	 mov	 ecx, DWORD PTR _locx$12[ebp]
  0025d	83 e9 02	 sub	 ecx, 2
  00260	51		 push	 ecx
  00261	e8 00 00 00 00	 call	 _V_DrawFill
  00266	83 c4 14	 add	 esp, 20			; 00000014H

; 1051 : 			V_DrawFill(locx, STRINGY(locy), 96, 4, 8);

  00269	6a 08		 push	 8
  0026b	6a 04		 push	 4
  0026d	6a 60		 push	 96			; 00000060H
  0026f	8b 45 f4	 mov	 eax, DWORD PTR _locy$11[ebp]
  00272	50		 push	 eax
  00273	e8 00 00 00 00	 call	 _STRINGY
  00278	83 c4 04	 add	 esp, 4
  0027b	50		 push	 eax
  0027c	8b 4d f8	 mov	 ecx, DWORD PTR _locx$12[ebp]
  0027f	51		 push	 ecx
  00280	e8 00 00 00 00	 call	 _V_DrawFill
  00285	83 c4 14	 add	 esp, 20			; 00000014H

; 1052 : 			V_DrawFill(locx, STRINGY(locy), stplyr->drillmeter/20, 4, 164);

  00288	68 a4 00 00 00	 push	 164			; 000000a4H
  0028d	6a 04		 push	 4
  0028f	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00294	8b 80 c8 01 00
	00		 mov	 eax, DWORD PTR [eax+456]
  0029a	99		 cdq
  0029b	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  002a0	f7 f9		 idiv	 ecx
  002a2	50		 push	 eax
  002a3	8b 55 f4	 mov	 edx, DWORD PTR _locy$11[ebp]
  002a6	52		 push	 edx
  002a7	e8 00 00 00 00	 call	 _STRINGY
  002ac	83 c4 04	 add	 esp, 4
  002af	50		 push	 eax
  002b0	8b 45 f8	 mov	 eax, DWORD PTR _locx$12[ebp]
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 _V_DrawFill
  002b9	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@ST_drawNiG:

; 1053 : 		}
; 1054 : 	}
; 1055 : 
; 1056 : 	if (gametype == GT_RACE)

  002bc	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002c3	83 f8 02	 cmp	 eax, 2
  002c6	0f 85 00 05 00
	00		 jne	 $LN16@ST_drawNiG

; 1057 : 	{
; 1058 : 		// draw score (same in splitscreen as normal, too!)
; 1059 : 		ST_DrawOverlayNum(SCX(hudinfo[HUD_SCORENUM].x), SCY(hudinfo[HUD_SCORENUM].y), stplyr->score, tallnum);

  002cc	68 00 00 00 00	 push	 OFFSET _tallnum
  002d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002d6	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  002dc	51		 push	 ecx
  002dd	ba 08 00 00 00	 mov	 edx, 8
  002e2	6b c2 09	 imul	 eax, edx, 9
  002e5	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  002eb	51		 push	 ecx
  002ec	e8 00 00 00 00	 call	 _SCY
  002f1	83 c4 04	 add	 esp, 4
  002f4	50		 push	 eax
  002f5	ba 08 00 00 00	 mov	 edx, 8
  002fa	6b c2 09	 imul	 eax, edx, 9
  002fd	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00303	51		 push	 ecx
  00304	e8 00 00 00 00	 call	 _SCX
  00309	83 c4 04	 add	 esp, 4
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00312	83 c4 10	 add	 esp, 16			; 00000010H

; 1060 : 		V_DrawScaledPatch(SCX(hudinfo[HUD_SCORE].x), SCY(hudinfo[HUD_SCORE].y), V_NOSCALESTART|V_TRANSLUCENT, sboscore);

  00315	a1 00 00 00 00	 mov	 eax, DWORD PTR _sboscore
  0031a	50		 push	 eax
  0031b	68 00 00 41 00	 push	 4259840			; 00410000H
  00320	b9 08 00 00 00	 mov	 ecx, 8
  00325	c1 e1 03	 shl	 ecx, 3
  00328	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  0032e	52		 push	 edx
  0032f	e8 00 00 00 00	 call	 _SCY
  00334	83 c4 04	 add	 esp, 4
  00337	50		 push	 eax
  00338	b8 08 00 00 00	 mov	 eax, 8
  0033d	c1 e0 03	 shl	 eax, 3
  00340	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00346	51		 push	 ecx
  00347	e8 00 00 00 00	 call	 _SCX
  0034c	83 c4 04	 add	 esp, 4
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00355	83 c4 10	 add	 esp, 16			; 00000010H

; 1061 : 
; 1062 : 		// Draw Time
; 1063 : 		if (splitscreen)

  00358	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0035f	0f 84 8d 01 00
	00		 je	 $LN17@ST_drawNiG

; 1064 : 		{
; 1065 : 			INT32 seconds = G_TicsToSeconds(stplyr->realtime);

  00365	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0036a	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00370	51		 push	 ecx
  00371	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00376	83 c4 04	 add	 esp, 4
  00379	89 45 f0	 mov	 DWORD PTR _seconds$10[ebp], eax

; 1066 : 
; 1067 : 			if (seconds < 10)

  0037c	83 7d f0 0a	 cmp	 DWORD PTR _seconds$10[ebp], 10 ; 0000000aH
  00380	7d 3f		 jge	 SHORT $LN19@ST_drawNiG

; 1068 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_LOWSECONDSSPLIT].x), SCY(hudinfo[HUD_LOWSECONDSSPLIT].y), 0, tallnum);

  00382	68 00 00 00 00	 push	 OFFSET _tallnum
  00387	6a 00		 push	 0
  00389	b8 08 00 00 00	 mov	 eax, 8
  0038e	6b c8 0b	 imul	 ecx, eax, 11
  00391	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  00397	52		 push	 edx
  00398	e8 00 00 00 00	 call	 _SCY
  0039d	83 c4 04	 add	 esp, 4
  003a0	50		 push	 eax
  003a1	b8 08 00 00 00	 mov	 eax, 8
  003a6	6b c8 0b	 imul	 ecx, eax, 11
  003a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  003af	52		 push	 edx
  003b0	e8 00 00 00 00	 call	 _SCX
  003b5	83 c4 04	 add	 esp, 4
  003b8	50		 push	 eax
  003b9	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  003be	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@ST_drawNiG:

; 1069 : 
; 1070 : 			// seconds time
; 1071 : 			ST_DrawOverlayNum(SCX(hudinfo[HUD_SECONDSSPLIT].x), SCY(hudinfo[HUD_SECONDSSPLIT].y), G_TicsToSeconds(stplyr->realtime), tallnum);

  003c1	68 00 00 00 00	 push	 OFFSET _tallnum
  003c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  003cb	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  003d1	51		 push	 ecx
  003d2	e8 00 00 00 00	 call	 _G_TicsToSeconds
  003d7	83 c4 04	 add	 esp, 4
  003da	50		 push	 eax
  003db	ba 08 00 00 00	 mov	 edx, 8
  003e0	6b c2 0c	 imul	 eax, edx, 12
  003e3	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  003e9	51		 push	 ecx
  003ea	e8 00 00 00 00	 call	 _SCY
  003ef	83 c4 04	 add	 esp, 4
  003f2	50		 push	 eax
  003f3	ba 08 00 00 00	 mov	 edx, 8
  003f8	6b c2 0c	 imul	 eax, edx, 12
  003fb	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00401	51		 push	 ecx
  00402	e8 00 00 00 00	 call	 _SCX
  00407	83 c4 04	 add	 esp, 4
  0040a	50		 push	 eax
  0040b	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00410	83 c4 10	 add	 esp, 16			; 00000010H

; 1072 : 
; 1073 : 			// minutes time
; 1074 : 			ST_DrawOverlayNum(SCX(hudinfo[HUD_MINUTESSPLIT].x), SCY(hudinfo[HUD_MINUTESSPLIT].y), G_TicsToMinutes(stplyr->realtime, true), tallnum);

  00413	68 00 00 00 00	 push	 OFFSET _tallnum
  00418	6a 01		 push	 1
  0041a	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0041f	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00425	51		 push	 ecx
  00426	e8 00 00 00 00	 call	 _G_TicsToMinutes
  0042b	83 c4 08	 add	 esp, 8
  0042e	50		 push	 eax
  0042f	ba 08 00 00 00	 mov	 edx, 8
  00434	6b c2 0d	 imul	 eax, edx, 13
  00437	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  0043d	51		 push	 ecx
  0043e	e8 00 00 00 00	 call	 _SCY
  00443	83 c4 04	 add	 esp, 4
  00446	50		 push	 eax
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	6b c2 0d	 imul	 eax, edx, 13
  0044f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00455	51		 push	 ecx
  00456	e8 00 00 00 00	 call	 _SCX
  0045b	83 c4 04	 add	 esp, 4
  0045e	50		 push	 eax
  0045f	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00464	83 c4 10	 add	 esp, 16			; 00000010H

; 1075 : 
; 1076 : 			// colon location
; 1077 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_TIMECOLONSPLIT].x), SCY(hudinfo[HUD_TIMECOLONSPLIT].y), V_NOSCALESTART|V_TRANSLUCENT, sbocolon);

  00467	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbocolon
  0046c	50		 push	 eax
  0046d	68 00 00 41 00	 push	 4259840			; 00410000H
  00472	b9 08 00 00 00	 mov	 ecx, 8
  00477	6b d1 0e	 imul	 edx, ecx, 14
  0047a	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00480	50		 push	 eax
  00481	e8 00 00 00 00	 call	 _SCY
  00486	83 c4 04	 add	 esp, 4
  00489	50		 push	 eax
  0048a	b9 08 00 00 00	 mov	 ecx, 8
  0048f	6b d1 0e	 imul	 edx, ecx, 14
  00492	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00498	50		 push	 eax
  00499	e8 00 00 00 00	 call	 _SCX
  0049e	83 c4 04	 add	 esp, 4
  004a1	50		 push	 eax
  004a2	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004a7	83 c4 10	 add	 esp, 16			; 00000010H

; 1078 : 
; 1079 : 			// TIME location
; 1080 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_TIMESPLIT].x), SCY(hudinfo[HUD_TIMESPLIT].y), V_NOSCALESTART|V_TRANSLUCENT, sbotime);

  004aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbotime
  004af	50		 push	 eax
  004b0	68 00 00 41 00	 push	 4259840			; 00410000H
  004b5	b9 08 00 00 00	 mov	 ecx, 8
  004ba	6b d1 0a	 imul	 edx, ecx, 10
  004bd	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  004c3	50		 push	 eax
  004c4	e8 00 00 00 00	 call	 _SCY
  004c9	83 c4 04	 add	 esp, 4
  004cc	50		 push	 eax
  004cd	b9 08 00 00 00	 mov	 ecx, 8
  004d2	6b d1 0a	 imul	 edx, ecx, 10
  004d5	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  004db	50		 push	 eax
  004dc	e8 00 00 00 00	 call	 _SCX
  004e1	83 c4 04	 add	 esp, 4
  004e4	50		 push	 eax
  004e5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004ea	83 c4 10	 add	 esp, 16			; 00000010H

; 1081 : 		}

  004ed	e9 d5 02 00 00	 jmp	 $LN18@ST_drawNiG
$LN17@ST_drawNiG:

; 1082 : 		else
; 1083 : 		{
; 1084 : 			if (cv_timetic.value == 1) // show tics instead of MM : SS

  004f2	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_timetic+20, 1
  004f9	75 4e		 jne	 SHORT $LN20@ST_drawNiG

; 1085 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_SECONDS].x), SCY(hudinfo[HUD_SECONDS].y), stplyr->realtime, tallnum);

  004fb	68 00 00 00 00	 push	 OFFSET _tallnum
  00500	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00505	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  0050b	51		 push	 ecx
  0050c	ba 08 00 00 00	 mov	 edx, 8
  00511	6b c2 13	 imul	 eax, edx, 19
  00514	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  0051a	51		 push	 ecx
  0051b	e8 00 00 00 00	 call	 _SCY
  00520	83 c4 04	 add	 esp, 4
  00523	50		 push	 eax
  00524	ba 08 00 00 00	 mov	 edx, 8
  00529	6b c2 13	 imul	 eax, edx, 19
  0052c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00532	51		 push	 ecx
  00533	e8 00 00 00 00	 call	 _SCX
  00538	83 c4 04	 add	 esp, 4
  0053b	50		 push	 eax
  0053c	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00541	83 c4 10	 add	 esp, 16			; 00000010H
  00544	e9 45 01 00 00	 jmp	 $LN21@ST_drawNiG
$LN20@ST_drawNiG:

; 1086 : 			else
; 1087 : 			{
; 1088 : 				INT32 seconds = G_TicsToSeconds(stplyr->realtime);

  00549	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0054e	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00554	51		 push	 ecx
  00555	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0055a	83 c4 04	 add	 esp, 4
  0055d	89 45 ec	 mov	 DWORD PTR _seconds$9[ebp], eax

; 1089 : 
; 1090 : 				if (seconds < 10)

  00560	83 7d ec 0a	 cmp	 DWORD PTR _seconds$9[ebp], 10 ; 0000000aH
  00564	7d 3f		 jge	 SHORT $LN22@ST_drawNiG

; 1091 : 					ST_DrawOverlayNum(SCX(hudinfo[HUD_LOWSECONDS].x), SCY(hudinfo[HUD_LOWSECONDS].y), 0, tallnum);

  00566	68 00 00 00 00	 push	 OFFSET _tallnum
  0056b	6a 00		 push	 0
  0056d	b8 08 00 00 00	 mov	 eax, 8
  00572	6b c8 12	 imul	 ecx, eax, 18
  00575	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  0057b	52		 push	 edx
  0057c	e8 00 00 00 00	 call	 _SCY
  00581	83 c4 04	 add	 esp, 4
  00584	50		 push	 eax
  00585	b8 08 00 00 00	 mov	 eax, 8
  0058a	6b c8 12	 imul	 ecx, eax, 18
  0058d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  00593	52		 push	 edx
  00594	e8 00 00 00 00	 call	 _SCX
  00599	83 c4 04	 add	 esp, 4
  0059c	50		 push	 eax
  0059d	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  005a2	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@ST_drawNiG:

; 1092 : 
; 1093 : 				// seconds time
; 1094 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_SECONDS].x), SCY(hudinfo[HUD_SECONDS].y), G_TicsToSeconds(stplyr->realtime), tallnum);

  005a5	68 00 00 00 00	 push	 OFFSET _tallnum
  005aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  005af	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  005b5	51		 push	 ecx
  005b6	e8 00 00 00 00	 call	 _G_TicsToSeconds
  005bb	83 c4 04	 add	 esp, 4
  005be	50		 push	 eax
  005bf	ba 08 00 00 00	 mov	 edx, 8
  005c4	6b c2 13	 imul	 eax, edx, 19
  005c7	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  005cd	51		 push	 ecx
  005ce	e8 00 00 00 00	 call	 _SCY
  005d3	83 c4 04	 add	 esp, 4
  005d6	50		 push	 eax
  005d7	ba 08 00 00 00	 mov	 edx, 8
  005dc	6b c2 13	 imul	 eax, edx, 19
  005df	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  005e5	51		 push	 ecx
  005e6	e8 00 00 00 00	 call	 _SCX
  005eb	83 c4 04	 add	 esp, 4
  005ee	50		 push	 eax
  005ef	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  005f4	83 c4 10	 add	 esp, 16			; 00000010H

; 1095 : 
; 1096 : 				// minutes time
; 1097 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_MINUTES].x), SCY(hudinfo[HUD_MINUTES].y), G_TicsToMinutes(stplyr->realtime, true), tallnum);

  005f7	68 00 00 00 00	 push	 OFFSET _tallnum
  005fc	6a 01		 push	 1
  005fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00603	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00609	51		 push	 ecx
  0060a	e8 00 00 00 00	 call	 _G_TicsToMinutes
  0060f	83 c4 08	 add	 esp, 8
  00612	50		 push	 eax
  00613	ba 08 00 00 00	 mov	 edx, 8
  00618	6b c2 14	 imul	 eax, edx, 20
  0061b	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00621	51		 push	 ecx
  00622	e8 00 00 00 00	 call	 _SCY
  00627	83 c4 04	 add	 esp, 4
  0062a	50		 push	 eax
  0062b	ba 08 00 00 00	 mov	 edx, 8
  00630	6b c2 14	 imul	 eax, edx, 20
  00633	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00639	51		 push	 ecx
  0063a	e8 00 00 00 00	 call	 _SCX
  0063f	83 c4 04	 add	 esp, 4
  00642	50		 push	 eax
  00643	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00648	83 c4 10	 add	 esp, 16			; 00000010H

; 1098 : 
; 1099 : 				// colon location
; 1100 : 				V_DrawScaledPatch(SCX(hudinfo[HUD_TIMECOLON].x), SCY(hudinfo[HUD_TIMECOLON].y), V_NOSCALESTART|V_TRANSLUCENT, sbocolon);

  0064b	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbocolon
  00650	50		 push	 eax
  00651	68 00 00 41 00	 push	 4259840			; 00410000H
  00656	b9 08 00 00 00	 mov	 ecx, 8
  0065b	6b d1 15	 imul	 edx, ecx, 21
  0065e	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00664	50		 push	 eax
  00665	e8 00 00 00 00	 call	 _SCY
  0066a	83 c4 04	 add	 esp, 4
  0066d	50		 push	 eax
  0066e	b9 08 00 00 00	 mov	 ecx, 8
  00673	6b d1 15	 imul	 edx, ecx, 21
  00676	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  0067c	50		 push	 eax
  0067d	e8 00 00 00 00	 call	 _SCX
  00682	83 c4 04	 add	 esp, 4
  00685	50		 push	 eax
  00686	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0068b	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@ST_drawNiG:

; 1101 : 			}
; 1102 : 
; 1103 : 			// Show tics, too!
; 1104 : 			if (timeattacking || cv_timetic.value == 2)

  0068e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  00695	75 0d		 jne	 SHORT $LN24@ST_drawNiG
  00697	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_timetic+20, 2
  0069e	0f 85 e0 00 00
	00		 jne	 $LN23@ST_drawNiG
$LN24@ST_drawNiG:

; 1105 : 			{
; 1106 : 				INT32 tics = G_TicsToCentiseconds(stplyr->realtime);

  006a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  006a9	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  006af	51		 push	 ecx
  006b0	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  006b5	83 c4 04	 add	 esp, 4
  006b8	89 45 e8	 mov	 DWORD PTR _tics$8[ebp], eax

; 1107 : 
; 1108 : 				if (tics < 10)

  006bb	83 7d e8 0a	 cmp	 DWORD PTR _tics$8[ebp], 10 ; 0000000aH
  006bf	7d 3f		 jge	 SHORT $LN25@ST_drawNiG

; 1109 : 					ST_DrawOverlayNum(SCX(hudinfo[HUD_LOWTICS].x), SCY(hudinfo[HUD_LOWTICS].y), 0, tallnum);

  006c1	68 00 00 00 00	 push	 OFFSET _tallnum
  006c6	6a 00		 push	 0
  006c8	b8 08 00 00 00	 mov	 eax, 8
  006cd	c1 e0 04	 shl	 eax, 4
  006d0	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  006d6	51		 push	 ecx
  006d7	e8 00 00 00 00	 call	 _SCY
  006dc	83 c4 04	 add	 esp, 4
  006df	50		 push	 eax
  006e0	ba 08 00 00 00	 mov	 edx, 8
  006e5	c1 e2 04	 shl	 edx, 4
  006e8	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  006ee	50		 push	 eax
  006ef	e8 00 00 00 00	 call	 _SCX
  006f4	83 c4 04	 add	 esp, 4
  006f7	50		 push	 eax
  006f8	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  006fd	83 c4 10	 add	 esp, 16			; 00000010H
$LN25@ST_drawNiG:

; 1110 : 
; 1111 : 				// colon location
; 1112 : 				V_DrawScaledPatch(SCX(hudinfo[HUD_TIMETICCOLON].x), SCY(hudinfo[HUD_TIMETICCOLON].y), V_NOSCALESTART|V_TRANSLUCENT, sbocolon);

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbocolon
  00705	50		 push	 eax
  00706	68 00 00 41 00	 push	 4259840			; 00410000H
  0070b	b9 08 00 00 00	 mov	 ecx, 8
  00710	6b d1 16	 imul	 edx, ecx, 22
  00713	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00719	50		 push	 eax
  0071a	e8 00 00 00 00	 call	 _SCY
  0071f	83 c4 04	 add	 esp, 4
  00722	50		 push	 eax
  00723	b9 08 00 00 00	 mov	 ecx, 8
  00728	6b d1 16	 imul	 edx, ecx, 22
  0072b	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00731	50		 push	 eax
  00732	e8 00 00 00 00	 call	 _SCX
  00737	83 c4 04	 add	 esp, 4
  0073a	50		 push	 eax
  0073b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00740	83 c4 10	 add	 esp, 16			; 00000010H

; 1113 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_TICS].x), SCY(hudinfo[HUD_TICS].y), tics, tallnum);

  00743	68 00 00 00 00	 push	 OFFSET _tallnum
  00748	8b 45 e8	 mov	 eax, DWORD PTR _tics$8[ebp]
  0074b	50		 push	 eax
  0074c	b9 08 00 00 00	 mov	 ecx, 8
  00751	6b d1 11	 imul	 edx, ecx, 17
  00754	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  0075a	50		 push	 eax
  0075b	e8 00 00 00 00	 call	 _SCY
  00760	83 c4 04	 add	 esp, 4
  00763	50		 push	 eax
  00764	b9 08 00 00 00	 mov	 ecx, 8
  00769	6b d1 11	 imul	 edx, ecx, 17
  0076c	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00772	50		 push	 eax
  00773	e8 00 00 00 00	 call	 _SCX
  00778	83 c4 04	 add	 esp, 4
  0077b	50		 push	 eax
  0077c	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00781	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@ST_drawNiG:

; 1114 : 			}
; 1115 : 
; 1116 : 			// TIME location
; 1117 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_TIME].x), SCY(hudinfo[HUD_TIME].y), V_NOSCALESTART|V_TRANSLUCENT, sbotime);

  00784	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbotime
  00789	50		 push	 eax
  0078a	68 00 00 41 00	 push	 4259840			; 00410000H
  0078f	b9 08 00 00 00	 mov	 ecx, 8
  00794	6b d1 0f	 imul	 edx, ecx, 15
  00797	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  0079d	50		 push	 eax
  0079e	e8 00 00 00 00	 call	 _SCY
  007a3	83 c4 04	 add	 esp, 4
  007a6	50		 push	 eax
  007a7	b9 08 00 00 00	 mov	 ecx, 8
  007ac	6b d1 0f	 imul	 edx, ecx, 15
  007af	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  007b5	50		 push	 eax
  007b6	e8 00 00 00 00	 call	 _SCX
  007bb	83 c4 04	 add	 esp, 4
  007be	50		 push	 eax
  007bf	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  007c4	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@ST_drawNiG:

; 1118 : 		}
; 1119 : 
; 1120 : 		return;

  007c7	e9 d4 06 00 00	 jmp	 $LN44@ST_drawNiG
$LN16@ST_drawNiG:

; 1121 : 	}
; 1122 : 
; 1123 : 	if (stplyr->bonustime > 1)

  007cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  007d1	0f b6 88 cd 01
	00 00		 movzx	 ecx, BYTE PTR [eax+461]
  007d8	83 f9 01	 cmp	 ecx, 1
  007db	7e 1f		 jle	 SHORT $LN26@ST_drawNiG

; 1124 : 		V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(100), 0, "BONUS TIME START!");

  007dd	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BFFPPAKI@BONUS?5TIME?5START?$CB@
  007e2	6a 00		 push	 0
  007e4	6a 64		 push	 100			; 00000064H
  007e6	e8 00 00 00 00	 call	 _STRINGY
  007eb	83 c4 04	 add	 esp, 4
  007ee	50		 push	 eax
  007ef	68 a0 00 00 00	 push	 160			; 000000a0H
  007f4	e8 00 00 00 00	 call	 _V_DrawCenteredString
  007f9	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@ST_drawNiG:

; 1125 : 
; 1126 : 	V_DrawScaledPatch(SCX(16), SCY(8), V_NOSCALESTART|V_TRANSLUCENT, nbracket);

  007fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _nbracket
  00801	50		 push	 eax
  00802	68 00 00 41 00	 push	 4259840			; 00410000H
  00807	6a 08		 push	 8
  00809	e8 00 00 00 00	 call	 _SCY
  0080e	83 c4 04	 add	 esp, 4
  00811	50		 push	 eax
  00812	6a 10		 push	 16			; 00000010H
  00814	e8 00 00 00 00	 call	 _SCX
  00819	83 c4 04	 add	 esp, 4
  0081c	50		 push	 eax
  0081d	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00822	83 c4 10	 add	 esp, 16			; 00000010H

; 1127 : 	V_DrawScaledPatch(SCX(24), (INT32)(SCY(8) + 8*vid.fdupy), V_NOSCALESTART|V_TRANSLUCENT, nhud[(leveltime/2)%12]);

  00825	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0082a	d1 e8		 shr	 eax, 1
  0082c	33 d2		 xor	 edx, edx
  0082e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00833	f7 f1		 div	 ecx
  00835	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _nhud[edx*4]
  0083c	52		 push	 edx
  0083d	68 00 00 41 00	 push	 4259840			; 00410000H
  00842	6a 08		 push	 8
  00844	e8 00 00 00 00	 call	 _SCY
  00849	83 c4 04	 add	 esp, 4
  0084c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00850	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41000000
  00858	f3 0f 59 0d 2c
	00 00 00	 mulss	 xmm1, DWORD PTR _vid+44
  00860	f3 0f 58 c1	 addss	 xmm0, xmm1
  00864	f3 0f 2c c0	 cvttss2si eax, xmm0
  00868	50		 push	 eax
  00869	6a 18		 push	 24			; 00000018H
  0086b	e8 00 00 00 00	 call	 _SCX
  00870	83 c4 04	 add	 esp, 4
  00873	50		 push	 eax
  00874	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00879	83 c4 10	 add	 esp, 16			; 00000010H

; 1128 : 
; 1129 : 	if (stplyr->capsule && !cv_objectplace.value)

  0087c	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00881	83 b8 d0 01 00
	00 00		 cmp	 DWORD PTR [eax+464], 0
  00888	0f 84 44 04 00
	00		 je	 $LN27@ST_drawNiG
  0088e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00895	0f 85 37 04 00
	00		 jne	 $LN27@ST_drawNiG

; 1130 : 	{
; 1131 : 		INT32 amount;
; 1132 : 		INT32 origamount;
; 1133 : 		const INT32 length = 88;

  0089b	c7 45 dc 58 00
	00 00		 mov	 DWORD PTR _length$5[ebp], 88 ; 00000058H

; 1134 : 
; 1135 : 		V_DrawScaledPatch(SCX(72), SCY(8), V_NOSCALESTART|V_TRANSLUCENT, nbracket);

  008a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _nbracket
  008a7	50		 push	 eax
  008a8	68 00 00 41 00	 push	 4259840			; 00410000H
  008ad	6a 08		 push	 8
  008af	e8 00 00 00 00	 call	 _SCY
  008b4	83 c4 04	 add	 esp, 4
  008b7	50		 push	 eax
  008b8	6a 48		 push	 72			; 00000048H
  008ba	e8 00 00 00 00	 call	 _SCX
  008bf	83 c4 04	 add	 esp, 4
  008c2	50		 push	 eax
  008c3	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  008c8	83 c4 10	 add	 esp, 16			; 00000010H

; 1136 : 		V_DrawScaledPatch(SCX(74), (INT32)(SCY(8) + 4*vid.fdupy), V_NOSCALESTART|V_TRANSLUCENT,

  008cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _minicaps
  008d0	50		 push	 eax
  008d1	68 00 00 41 00	 push	 4259840			; 00410000H
  008d6	6a 08		 push	 8
  008d8	e8 00 00 00 00	 call	 _SCY
  008dd	83 c4 04	 add	 esp, 4
  008e0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  008e4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40800000
  008ec	f3 0f 59 0d 2c
	00 00 00	 mulss	 xmm1, DWORD PTR _vid+44
  008f4	f3 0f 58 c1	 addss	 xmm0, xmm1
  008f8	f3 0f 2c c8	 cvttss2si ecx, xmm0
  008fc	51		 push	 ecx
  008fd	6a 4a		 push	 74			; 0000004aH
  008ff	e8 00 00 00 00	 call	 _SCX
  00904	83 c4 04	 add	 esp, 4
  00907	50		 push	 eax
  00908	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0090d	83 c4 10	 add	 esp, 16			; 00000010H

; 1137 : 			minicaps);
; 1138 : 
; 1139 : 		if (stplyr->capsule->reactiontime != 0)

  00910	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00915	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  0091b	83 b9 9c 00 00
	00 00		 cmp	 DWORD PTR [ecx+156], 0
  00922	0f 84 cb 01 00
	00		 je	 $LN29@ST_drawNiG

; 1140 : 		{
; 1141 : 			INT32 r;
; 1142 : 			const INT32 orblength = 20;

  00928	c7 45 d4 14 00
	00 00		 mov	 DWORD PTR _orblength$3[ebp], 20 ; 00000014H

; 1143 : 
; 1144 : 			for (r = 0; r < 5; r++)

  0092f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _r$4[ebp], 0
  00936	eb 09		 jmp	 SHORT $LN4@ST_drawNiG
$LN2@ST_drawNiG:
  00938	8b 45 d8	 mov	 eax, DWORD PTR _r$4[ebp]
  0093b	83 c0 01	 add	 eax, 1
  0093e	89 45 d8	 mov	 DWORD PTR _r$4[ebp], eax
$LN4@ST_drawNiG:
  00941	83 7d d8 05	 cmp	 DWORD PTR _r$4[ebp], 5
  00945	0f 8d dd 00 00
	00		 jge	 $LN3@ST_drawNiG

; 1145 : 			{
; 1146 : 				V_DrawScaledPatch(SCX(230 - (7*r)), SCY(144), V_NOSCALESTART|V_TRANSLUCENT,

  0094b	a1 00 00 00 00	 mov	 eax, DWORD PTR _redstat
  00950	50		 push	 eax
  00951	68 00 00 41 00	 push	 4259840			; 00410000H
  00956	68 90 00 00 00	 push	 144			; 00000090H
  0095b	e8 00 00 00 00	 call	 _SCY
  00960	83 c4 04	 add	 esp, 4
  00963	50		 push	 eax
  00964	6b 4d d8 07	 imul	 ecx, DWORD PTR _r$4[ebp], 7
  00968	ba e6 00 00 00	 mov	 edx, 230		; 000000e6H
  0096d	2b d1		 sub	 edx, ecx
  0096f	52		 push	 edx
  00970	e8 00 00 00 00	 call	 _SCX
  00975	83 c4 04	 add	 esp, 4
  00978	50		 push	 eax
  00979	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0097e	83 c4 10	 add	 esp, 16			; 00000010H

; 1147 : 					redstat);
; 1148 : 				V_DrawScaledPatch(SCX(188 - (7*r)), SCY(144), V_NOSCALESTART|V_TRANSLUCENT,

  00981	a1 00 00 00 00	 mov	 eax, DWORD PTR _orngstat
  00986	50		 push	 eax
  00987	68 00 00 41 00	 push	 4259840			; 00410000H
  0098c	68 90 00 00 00	 push	 144			; 00000090H
  00991	e8 00 00 00 00	 call	 _SCY
  00996	83 c4 04	 add	 esp, 4
  00999	50		 push	 eax
  0099a	6b 4d d8 07	 imul	 ecx, DWORD PTR _r$4[ebp], 7
  0099e	ba bc 00 00 00	 mov	 edx, 188		; 000000bcH
  009a3	2b d1		 sub	 edx, ecx
  009a5	52		 push	 edx
  009a6	e8 00 00 00 00	 call	 _SCX
  009ab	83 c4 04	 add	 esp, 4
  009ae	50		 push	 eax
  009af	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  009b4	83 c4 10	 add	 esp, 16			; 00000010H

; 1149 : 					orngstat);
; 1150 : 				V_DrawScaledPatch(SCX(146 - (7*r)), SCY(144), V_NOSCALESTART|V_TRANSLUCENT,

  009b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _yelstat
  009bc	50		 push	 eax
  009bd	68 00 00 41 00	 push	 4259840			; 00410000H
  009c2	68 90 00 00 00	 push	 144			; 00000090H
  009c7	e8 00 00 00 00	 call	 _SCY
  009cc	83 c4 04	 add	 esp, 4
  009cf	50		 push	 eax
  009d0	6b 4d d8 07	 imul	 ecx, DWORD PTR _r$4[ebp], 7
  009d4	ba 92 00 00 00	 mov	 edx, 146		; 00000092H
  009d9	2b d1		 sub	 edx, ecx
  009db	52		 push	 edx
  009dc	e8 00 00 00 00	 call	 _SCX
  009e1	83 c4 04	 add	 esp, 4
  009e4	50		 push	 eax
  009e5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  009ea	83 c4 10	 add	 esp, 16			; 00000010H

; 1151 : 					yelstat);
; 1152 : 				V_DrawScaledPatch(SCX(104 - (7*r)), SCY(144), V_NOSCALESTART|V_TRANSLUCENT,

  009ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _byelstat
  009f2	50		 push	 eax
  009f3	68 00 00 41 00	 push	 4259840			; 00410000H
  009f8	68 90 00 00 00	 push	 144			; 00000090H
  009fd	e8 00 00 00 00	 call	 _SCY
  00a02	83 c4 04	 add	 esp, 4
  00a05	50		 push	 eax
  00a06	6b 4d d8 07	 imul	 ecx, DWORD PTR _r$4[ebp], 7
  00a0a	ba 68 00 00 00	 mov	 edx, 104		; 00000068H
  00a0f	2b d1		 sub	 edx, ecx
  00a11	52		 push	 edx
  00a12	e8 00 00 00 00	 call	 _SCX
  00a17	83 c4 04	 add	 esp, 4
  00a1a	50		 push	 eax
  00a1b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00a20	83 c4 10	 add	 esp, 16			; 00000010H

; 1153 : 					byelstat);
; 1154 : 			}

  00a23	e9 10 ff ff ff	 jmp	 $LN2@ST_drawNiG
$LN3@ST_drawNiG:

; 1155 : 			origamount = stplyr->capsule->spawnpoint->angle & 1023;

  00a28	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00a2d	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00a33	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00a39	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00a3d	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00a42	89 45 e0	 mov	 DWORD PTR _origamount$6[ebp], eax

; 1156 : 
; 1157 : 			amount = (origamount - stplyr->capsule->health);

  00a45	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00a4a	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00a50	8b 55 e0	 mov	 edx, DWORD PTR _origamount$6[ebp]
  00a53	2b 91 8c 00 00
	00		 sub	 edx, DWORD PTR [ecx+140]
  00a59	89 55 e4	 mov	 DWORD PTR _amount$7[ebp], edx

; 1158 : 
; 1159 : 			amount = (amount * orblength)/origamount;

  00a5c	8b 45 e4	 mov	 eax, DWORD PTR _amount$7[ebp]
  00a5f	0f af 45 d4	 imul	 eax, DWORD PTR _orblength$3[ebp]
  00a63	99		 cdq
  00a64	f7 7d e0	 idiv	 DWORD PTR _origamount$6[ebp]
  00a67	89 45 e4	 mov	 DWORD PTR _amount$7[ebp], eax

; 1160 : 
; 1161 : 			if (amount > 0)

  00a6a	83 7d e4 00	 cmp	 DWORD PTR _amount$7[ebp], 0
  00a6e	7e 7e		 jle	 SHORT $LN6@ST_drawNiG

; 1162 : 			{
; 1163 : 				INT32 t;
; 1164 : 
; 1165 : 				// Fill up the bar with blue orbs... in reverse! (yuck)
; 1166 : 				for (r = amount; r >= 0; r--)

  00a70	8b 45 e4	 mov	 eax, DWORD PTR _amount$7[ebp]
  00a73	89 45 d8	 mov	 DWORD PTR _r$4[ebp], eax
  00a76	eb 09		 jmp	 SHORT $LN7@ST_drawNiG
$LN5@ST_drawNiG:
  00a78	8b 45 d8	 mov	 eax, DWORD PTR _r$4[ebp]
  00a7b	83 e8 01	 sub	 eax, 1
  00a7e	89 45 d8	 mov	 DWORD PTR _r$4[ebp], eax
$LN7@ST_drawNiG:
  00a81	83 7d d8 00	 cmp	 DWORD PTR _r$4[ebp], 0
  00a85	7c 67		 jl	 SHORT $LN6@ST_drawNiG

; 1167 : 				{
; 1168 : 					t = r;

  00a87	8b 45 d8	 mov	 eax, DWORD PTR _r$4[ebp]
  00a8a	89 45 d0	 mov	 DWORD PTR _t$2[ebp], eax

; 1169 : 
; 1170 : 					if (r > 14)

  00a8d	83 7d d8 0e	 cmp	 DWORD PTR _r$4[ebp], 14	; 0000000eH
  00a91	7e 09		 jle	 SHORT $LN32@ST_drawNiG

; 1171 : 						t += 1;

  00a93	8b 45 d0	 mov	 eax, DWORD PTR _t$2[ebp]
  00a96	83 c0 01	 add	 eax, 1
  00a99	89 45 d0	 mov	 DWORD PTR _t$2[ebp], eax
$LN32@ST_drawNiG:

; 1172 : 					if (r > 9)

  00a9c	83 7d d8 09	 cmp	 DWORD PTR _r$4[ebp], 9
  00aa0	7e 09		 jle	 SHORT $LN33@ST_drawNiG

; 1173 : 						t += 1;

  00aa2	8b 45 d0	 mov	 eax, DWORD PTR _t$2[ebp]
  00aa5	83 c0 01	 add	 eax, 1
  00aa8	89 45 d0	 mov	 DWORD PTR _t$2[ebp], eax
$LN33@ST_drawNiG:

; 1174 : 					if (r > 4)

  00aab	83 7d d8 04	 cmp	 DWORD PTR _r$4[ebp], 4
  00aaf	7e 09		 jle	 SHORT $LN34@ST_drawNiG

; 1175 : 						t += 1;

  00ab1	8b 45 d0	 mov	 eax, DWORD PTR _t$2[ebp]
  00ab4	83 c0 01	 add	 eax, 1
  00ab7	89 45 d0	 mov	 DWORD PTR _t$2[ebp], eax
$LN34@ST_drawNiG:

; 1176 : 
; 1177 : 					V_DrawScaledPatch(SCX(76 + (7*t)), SCY(144), V_NOSCALESTART|V_TRANSLUCENT,

  00aba	a1 00 00 00 00	 mov	 eax, DWORD PTR _bluestat
  00abf	50		 push	 eax
  00ac0	68 00 00 41 00	 push	 4259840			; 00410000H
  00ac5	68 90 00 00 00	 push	 144			; 00000090H
  00aca	e8 00 00 00 00	 call	 _SCY
  00acf	83 c4 04	 add	 esp, 4
  00ad2	50		 push	 eax
  00ad3	6b 4d d0 07	 imul	 ecx, DWORD PTR _t$2[ebp], 7
  00ad7	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00ada	51		 push	 ecx
  00adb	e8 00 00 00 00	 call	 _SCX
  00ae0	83 c4 04	 add	 esp, 4
  00ae3	50		 push	 eax
  00ae4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00ae9	83 c4 10	 add	 esp, 16			; 00000010H

; 1178 : 						bluestat);
; 1179 : 				}

  00aec	eb 8a		 jmp	 SHORT $LN5@ST_drawNiG
$LN6@ST_drawNiG:

; 1180 : 			}
; 1181 : 		}

  00aee	e9 86 01 00 00	 jmp	 $LN37@ST_drawNiG
$LN29@ST_drawNiG:

; 1182 : 		else
; 1183 : 		{
; 1184 : 			// Lil' white box!
; 1185 : 			V_DrawFill(15, STRINGY(8) + 34, length + 2, 5, 0);

  00af3	6a 00		 push	 0
  00af5	6a 05		 push	 5
  00af7	8b 45 dc	 mov	 eax, DWORD PTR _length$5[ebp]
  00afa	83 c0 02	 add	 eax, 2
  00afd	50		 push	 eax
  00afe	6a 08		 push	 8
  00b00	e8 00 00 00 00	 call	 _STRINGY
  00b05	83 c4 04	 add	 esp, 4
  00b08	83 c0 22	 add	 eax, 34			; 00000022H
  00b0b	50		 push	 eax
  00b0c	6a 0f		 push	 15			; 0000000fH
  00b0e	e8 00 00 00 00	 call	 _V_DrawFill
  00b13	83 c4 14	 add	 esp, 20			; 00000014H

; 1186 : 			V_DrawFill(16, STRINGY(8)+35, length/4, 3, 103);

  00b16	6a 67		 push	 103			; 00000067H
  00b18	6a 03		 push	 3
  00b1a	8b 45 dc	 mov	 eax, DWORD PTR _length$5[ebp]
  00b1d	99		 cdq
  00b1e	83 e2 03	 and	 edx, 3
  00b21	03 c2		 add	 eax, edx
  00b23	c1 f8 02	 sar	 eax, 2
  00b26	50		 push	 eax
  00b27	6a 08		 push	 8
  00b29	e8 00 00 00 00	 call	 _STRINGY
  00b2e	83 c4 04	 add	 esp, 4
  00b31	83 c0 23	 add	 eax, 35			; 00000023H
  00b34	50		 push	 eax
  00b35	6a 10		 push	 16			; 00000010H
  00b37	e8 00 00 00 00	 call	 _V_DrawFill
  00b3c	83 c4 14	 add	 esp, 20			; 00000014H

; 1187 : 			V_DrawFill(16 + length/4, STRINGY(8) + 35, length/4, 3, 85);

  00b3f	6a 55		 push	 85			; 00000055H
  00b41	6a 03		 push	 3
  00b43	8b 45 dc	 mov	 eax, DWORD PTR _length$5[ebp]
  00b46	99		 cdq
  00b47	83 e2 03	 and	 edx, 3
  00b4a	03 c2		 add	 eax, edx
  00b4c	c1 f8 02	 sar	 eax, 2
  00b4f	50		 push	 eax
  00b50	6a 08		 push	 8
  00b52	e8 00 00 00 00	 call	 _STRINGY
  00b57	83 c4 04	 add	 esp, 4
  00b5a	83 c0 23	 add	 eax, 35			; 00000023H
  00b5d	50		 push	 eax
  00b5e	8b 45 dc	 mov	 eax, DWORD PTR _length$5[ebp]
  00b61	99		 cdq
  00b62	83 e2 03	 and	 edx, 3
  00b65	03 c2		 add	 eax, edx
  00b67	c1 f8 02	 sar	 eax, 2
  00b6a	83 c0 10	 add	 eax, 16			; 00000010H
  00b6d	50		 push	 eax
  00b6e	e8 00 00 00 00	 call	 _V_DrawFill
  00b73	83 c4 14	 add	 esp, 20			; 00000014H

; 1188 : 			V_DrawFill(16 + (length/4)*2, STRINGY(8) + 35, length/4, 3, 87);

  00b76	6a 57		 push	 87			; 00000057H
  00b78	6a 03		 push	 3
  00b7a	8b 45 dc	 mov	 eax, DWORD PTR _length$5[ebp]
  00b7d	99		 cdq
  00b7e	83 e2 03	 and	 edx, 3
  00b81	03 c2		 add	 eax, edx
  00b83	c1 f8 02	 sar	 eax, 2
  00b86	50		 push	 eax
  00b87	6a 08		 push	 8
  00b89	e8 00 00 00 00	 call	 _STRINGY
  00b8e	83 c4 04	 add	 esp, 4
  00b91	83 c0 23	 add	 eax, 35			; 00000023H
  00b94	50		 push	 eax
  00b95	8b 45 dc	 mov	 eax, DWORD PTR _length$5[ebp]
  00b98	99		 cdq
  00b99	83 e2 03	 and	 edx, 3
  00b9c	03 c2		 add	 eax, edx
  00b9e	c1 f8 02	 sar	 eax, 2
  00ba1	8d 44 00 10	 lea	 eax, DWORD PTR [eax+eax+16]
  00ba5	50		 push	 eax
  00ba6	e8 00 00 00 00	 call	 _V_DrawFill
  00bab	83 c4 14	 add	 esp, 20			; 00000014H

; 1189 : 			V_DrawFill(16 + (length/4)*3, STRINGY(8) + 35, length/4, 3, 131);

  00bae	68 83 00 00 00	 push	 131			; 00000083H
  00bb3	6a 03		 push	 3
  00bb5	8b 45 dc	 mov	 eax, DWORD PTR _length$5[ebp]
  00bb8	99		 cdq
  00bb9	83 e2 03	 and	 edx, 3
  00bbc	03 c2		 add	 eax, edx
  00bbe	c1 f8 02	 sar	 eax, 2
  00bc1	50		 push	 eax
  00bc2	6a 08		 push	 8
  00bc4	e8 00 00 00 00	 call	 _STRINGY
  00bc9	83 c4 04	 add	 esp, 4
  00bcc	83 c0 23	 add	 eax, 35			; 00000023H
  00bcf	50		 push	 eax
  00bd0	8b 45 dc	 mov	 eax, DWORD PTR _length$5[ebp]
  00bd3	99		 cdq
  00bd4	83 e2 03	 and	 edx, 3
  00bd7	03 c2		 add	 eax, edx
  00bd9	c1 f8 02	 sar	 eax, 2
  00bdc	6b c0 03	 imul	 eax, eax, 3
  00bdf	83 c0 10	 add	 eax, 16			; 00000010H
  00be2	50		 push	 eax
  00be3	e8 00 00 00 00	 call	 _V_DrawFill
  00be8	83 c4 14	 add	 esp, 20			; 00000014H

; 1190 : 			origamount = stplyr->capsule->spawnpoint->angle & 1023;

  00beb	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00bf0	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00bf6	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00bfc	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00c00	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00c05	89 45 e0	 mov	 DWORD PTR _origamount$6[ebp], eax

; 1191 : 
; 1192 : 			if (origamount <= 0)

  00c08	7f 21		 jg	 SHORT $LN35@ST_drawNiG

; 1193 : 				CONS_Printf("Give the egg capsule on mare %d a ring requirement.\n", stplyr->capsule->threshold);

  00c0a	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00c0f	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00c15	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00c1b	52		 push	 edx
  00c1c	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LKGNGCBI@Give?5the?5egg?5capsule?5on?5mare?5?$CFd@
  00c21	e8 00 00 00 00	 call	 _CONS_Printf
  00c26	83 c4 08	 add	 esp, 8
  00c29	eb 4e		 jmp	 SHORT $LN37@ST_drawNiG
$LN35@ST_drawNiG:

; 1194 : 			else
; 1195 : 			{
; 1196 : 				amount = (origamount - stplyr->capsule->health);

  00c2b	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00c30	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00c36	8b 55 e0	 mov	 edx, DWORD PTR _origamount$6[ebp]
  00c39	2b 91 8c 00 00
	00		 sub	 edx, DWORD PTR [ecx+140]
  00c3f	89 55 e4	 mov	 DWORD PTR _amount$7[ebp], edx

; 1197 : 				amount = (amount * length)/origamount;

  00c42	8b 45 e4	 mov	 eax, DWORD PTR _amount$7[ebp]
  00c45	0f af 45 dc	 imul	 eax, DWORD PTR _length$5[ebp]
  00c49	99		 cdq
  00c4a	f7 7d e0	 idiv	 DWORD PTR _origamount$6[ebp]
  00c4d	89 45 e4	 mov	 DWORD PTR _amount$7[ebp], eax

; 1198 : 
; 1199 : 				if (amount > 0)

  00c50	83 7d e4 00	 cmp	 DWORD PTR _amount$7[ebp], 0
  00c54	7e 23		 jle	 SHORT $LN37@ST_drawNiG

; 1200 : 					V_DrawFill(16, STRINGY(8) + 35, amount, 3, 229);

  00c56	68 e5 00 00 00	 push	 229			; 000000e5H
  00c5b	6a 03		 push	 3
  00c5d	8b 45 e4	 mov	 eax, DWORD PTR _amount$7[ebp]
  00c60	50		 push	 eax
  00c61	6a 08		 push	 8
  00c63	e8 00 00 00 00	 call	 _STRINGY
  00c68	83 c4 04	 add	 esp, 4
  00c6b	83 c0 23	 add	 eax, 35			; 00000023H
  00c6e	50		 push	 eax
  00c6f	6a 10		 push	 16			; 00000010H
  00c71	e8 00 00 00 00	 call	 _V_DrawFill
  00c76	83 c4 14	 add	 esp, 20			; 00000014H
$LN37@ST_drawNiG:

; 1201 : 			}
; 1202 : 		}
; 1203 : 		V_DrawScaledPatch(SCX(40), (INT32)(SCY(8) + 5*vid.fdupy), V_NOSCALESTART|V_TRANSLUCENT, narrow[(leveltime/2)%8]);

  00c79	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00c7e	d1 e8		 shr	 eax, 1
  00c80	33 d2		 xor	 edx, edx
  00c82	b9 08 00 00 00	 mov	 ecx, 8
  00c87	f7 f1		 div	 ecx
  00c89	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _narrow[edx*4]
  00c90	52		 push	 edx
  00c91	68 00 00 41 00	 push	 4259840			; 00410000H
  00c96	6a 08		 push	 8
  00c98	e8 00 00 00 00	 call	 _SCY
  00c9d	83 c4 04	 add	 esp, 4
  00ca0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00ca4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40a00000
  00cac	f3 0f 59 0d 2c
	00 00 00	 mulss	 xmm1, DWORD PTR _vid+44
  00cb4	f3 0f 58 c1	 addss	 xmm0, xmm1
  00cb8	f3 0f 2c c0	 cvttss2si eax, xmm0
  00cbc	50		 push	 eax
  00cbd	6a 28		 push	 40			; 00000028H
  00cbf	e8 00 00 00 00	 call	 _SCX
  00cc4	83 c4 04	 add	 esp, 4
  00cc7	50		 push	 eax
  00cc8	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00ccd	83 c4 10	 add	 esp, 16			; 00000010H

; 1204 : 	}

  00cd0	eb 4e		 jmp	 SHORT $LN28@ST_drawNiG
$LN27@ST_drawNiG:

; 1205 : 	else
; 1206 : 		V_DrawScaledPatch(SCX(40), (INT32)(SCY(8) + 5*vid.fdupy), V_NOSCALESTART|V_TRANSLUCENT, narrow[8]);

  00cd2	b8 04 00 00 00	 mov	 eax, 4
  00cd7	c1 e0 03	 shl	 eax, 3
  00cda	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _narrow[eax]
  00ce0	51		 push	 ecx
  00ce1	68 00 00 41 00	 push	 4259840			; 00410000H
  00ce6	6a 08		 push	 8
  00ce8	e8 00 00 00 00	 call	 _SCY
  00ced	83 c4 04	 add	 esp, 4
  00cf0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00cf4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40a00000
  00cfc	f3 0f 59 0d 2c
	00 00 00	 mulss	 xmm1, DWORD PTR _vid+44
  00d04	f3 0f 58 c1	 addss	 xmm0, xmm1
  00d08	f3 0f 2c d0	 cvttss2si edx, xmm0
  00d0c	52		 push	 edx
  00d0d	6a 28		 push	 40			; 00000028H
  00d0f	e8 00 00 00 00	 call	 _SCX
  00d14	83 c4 04	 add	 esp, 4
  00d17	50		 push	 eax
  00d18	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00d1d	83 c4 10	 add	 esp, 16			; 00000010H
$LN28@ST_drawNiG:

; 1207 : 
; 1208 : 	ST_DrawOverlayNum(SCX(68), (INT32)(SCY(8) + 11*vid.fdupy), stplyr->health > 0 ? stplyr->health - 1 : 0, tallnum);

  00d20	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00d25	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00d29	7e 11		 jle	 SHORT $LN50@ST_drawNiG
  00d2b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00d31	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00d34	83 ea 01	 sub	 edx, 1
  00d37	89 55 88	 mov	 DWORD PTR tv746[ebp], edx
  00d3a	eb 07		 jmp	 SHORT $LN51@ST_drawNiG
$LN50@ST_drawNiG:
  00d3c	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv746[ebp], 0
$LN51@ST_drawNiG:
  00d43	68 00 00 00 00	 push	 OFFSET _tallnum
  00d48	8b 45 88	 mov	 eax, DWORD PTR tv746[ebp]
  00d4b	50		 push	 eax
  00d4c	6a 08		 push	 8
  00d4e	e8 00 00 00 00	 call	 _SCY
  00d53	83 c4 04	 add	 esp, 4
  00d56	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00d5a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41300000
  00d62	f3 0f 59 0d 2c
	00 00 00	 mulss	 xmm1, DWORD PTR _vid+44
  00d6a	f3 0f 58 c1	 addss	 xmm0, xmm1
  00d6e	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00d72	51		 push	 ecx
  00d73	6a 44		 push	 68			; 00000044H
  00d75	e8 00 00 00 00	 call	 _SCX
  00d7a	83 c4 04	 add	 esp, 4
  00d7d	50		 push	 eax
  00d7e	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00d83	83 c4 10	 add	 esp, 16			; 00000010H

; 1209 : 
; 1210 : 	ST_DrawNightsOverlayNum(SCX(288), SCY(12), stplyr->score, nightsnum, 7); // Blue

  00d86	6a 07		 push	 7
  00d88	68 00 00 00 00	 push	 OFFSET _nightsnum
  00d8d	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00d92	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00d98	51		 push	 ecx
  00d99	6a 0c		 push	 12			; 0000000cH
  00d9b	e8 00 00 00 00	 call	 _SCY
  00da0	83 c4 04	 add	 esp, 4
  00da3	50		 push	 eax
  00da4	68 20 01 00 00	 push	 288			; 00000120H
  00da9	e8 00 00 00 00	 call	 _SCX
  00dae	83 c4 04	 add	 esp, 4
  00db1	50		 push	 eax
  00db2	e8 00 00 00 00	 call	 _ST_DrawNightsOverlayNum
  00db7	83 c4 14	 add	 esp, 20			; 00000014H

; 1211 : 
; 1212 : 	if (stplyr->nightstime > 0)

  00dba	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00dbf	83 b8 c4 01 00
	00 00		 cmp	 DWORD PTR [eax+452], 0
  00dc6	0f 86 d4 00 00
	00		 jbe	 $LN44@ST_drawNiG

; 1213 : 	{
; 1214 : 		INT32 numbersize;
; 1215 : 
; 1216 : 		if (stplyr->nightstime < 10)

  00dcc	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00dd1	83 b8 c4 01 00
	00 0a		 cmp	 DWORD PTR [eax+452], 10	; 0000000aH
  00dd8	73 14		 jae	 SHORT $LN39@ST_drawNiG

; 1217 : 			numbersize = SCX(16)/2;

  00dda	6a 10		 push	 16			; 00000010H
  00ddc	e8 00 00 00 00	 call	 _SCX
  00de1	83 c4 04	 add	 esp, 4
  00de4	99		 cdq
  00de5	2b c2		 sub	 eax, edx
  00de7	d1 f8		 sar	 eax, 1
  00de9	89 45 cc	 mov	 DWORD PTR _numbersize$1[ebp], eax
  00dec	eb 34		 jmp	 SHORT $LN42@ST_drawNiG
$LN39@ST_drawNiG:

; 1218 : 		else if (stplyr->nightstime < 100)

  00dee	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00df3	83 b8 c4 01 00
	00 64		 cmp	 DWORD PTR [eax+452], 100 ; 00000064H
  00dfa	73 14		 jae	 SHORT $LN41@ST_drawNiG

; 1219 : 			numbersize = SCX(32)/2;

  00dfc	6a 20		 push	 32			; 00000020H
  00dfe	e8 00 00 00 00	 call	 _SCX
  00e03	83 c4 04	 add	 esp, 4
  00e06	99		 cdq
  00e07	2b c2		 sub	 eax, edx
  00e09	d1 f8		 sar	 eax, 1
  00e0b	89 45 cc	 mov	 DWORD PTR _numbersize$1[ebp], eax
  00e0e	eb 12		 jmp	 SHORT $LN42@ST_drawNiG
$LN41@ST_drawNiG:

; 1220 : 		else
; 1221 : 			numbersize = SCX(48)/2;

  00e10	6a 30		 push	 48			; 00000030H
  00e12	e8 00 00 00 00	 call	 _SCX
  00e17	83 c4 04	 add	 esp, 4
  00e1a	99		 cdq
  00e1b	2b c2		 sub	 eax, edx
  00e1d	d1 f8		 sar	 eax, 1
  00e1f	89 45 cc	 mov	 DWORD PTR _numbersize$1[ebp], eax
$LN42@ST_drawNiG:

; 1222 : 
; 1223 : 		if (stplyr->nightstime < 10)

  00e22	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00e27	83 b8 c4 01 00
	00 0a		 cmp	 DWORD PTR [eax+452], 10	; 0000000aH
  00e2e	73 39		 jae	 SHORT $LN43@ST_drawNiG

; 1224 : 			ST_DrawNightsOverlayNum(SCX(160) + numbersize, SCY(32), stplyr->nightstime,

  00e30	6a 06		 push	 6
  00e32	68 00 00 00 00	 push	 OFFSET _nightsnum
  00e37	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00e3c	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  00e42	51		 push	 ecx
  00e43	6a 20		 push	 32			; 00000020H
  00e45	e8 00 00 00 00	 call	 _SCY
  00e4a	83 c4 04	 add	 esp, 4
  00e4d	50		 push	 eax
  00e4e	68 a0 00 00 00	 push	 160			; 000000a0H
  00e53	e8 00 00 00 00	 call	 _SCX
  00e58	83 c4 04	 add	 esp, 4
  00e5b	03 45 cc	 add	 eax, DWORD PTR _numbersize$1[ebp]
  00e5e	50		 push	 eax
  00e5f	e8 00 00 00 00	 call	 _ST_DrawNightsOverlayNum
  00e64	83 c4 14	 add	 esp, 20			; 00000014H
  00e67	eb 37		 jmp	 SHORT $LN44@ST_drawNiG
$LN43@ST_drawNiG:

; 1225 : 				nightsnum, 6); // Red
; 1226 : 		else
; 1227 : 			ST_DrawNightsOverlayNum(SCX(160) + numbersize, SCY(32), stplyr->nightstime,

  00e69	6a 0f		 push	 15			; 0000000fH
  00e6b	68 00 00 00 00	 push	 OFFSET _nightsnum
  00e70	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00e75	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  00e7b	51		 push	 ecx
  00e7c	6a 20		 push	 32			; 00000020H
  00e7e	e8 00 00 00 00	 call	 _SCY
  00e83	83 c4 04	 add	 esp, 4
  00e86	50		 push	 eax
  00e87	68 a0 00 00 00	 push	 160			; 000000a0H
  00e8c	e8 00 00 00 00	 call	 _SCX
  00e91	83 c4 04	 add	 esp, 4
  00e94	03 45 cc	 add	 eax, DWORD PTR _numbersize$1[ebp]
  00e97	50		 push	 eax
  00e98	e8 00 00 00 00	 call	 _ST_DrawNightsOverlayNum
  00e9d	83 c4 14	 add	 esp, 20			; 00000014H
$LN44@ST_drawNiG:

; 1228 : 				nightsnum, 15); // Yellow
; 1229 : 	}
; 1230 : }

  00ea0	5f		 pop	 edi
  00ea1	5e		 pop	 esi
  00ea2	5b		 pop	 ebx
  00ea3	8b e5		 mov	 esp, ebp
  00ea5	5d		 pop	 ebp
  00ea6	c3		 ret	 0
_ST_drawNiGHTSHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawFirstPersonHUD
_TEXT	SEGMENT
_p$ = -8						; size = 4
_player$ = -4						; size = 4
_ST_drawFirstPersonHUD PROC				; COMDAT

; 928  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 929  : 	player_t *player = stplyr;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0000e	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 930  : 	patch_t *p = NULL;

  00011	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0

; 931  : 
; 932  : 	/// \todo you wanna do something about those countdown drown numbers?
; 933  : 
; 934  : 	// Graue 06-18-2004: no V_NOSCALESTART, no SCX, no SCY, snap to right
; 935  : 	if (player->powers[pw_jumpshield])

  00018	b8 04 00 00 00	 mov	 eax, 4
  0001d	6b c8 03	 imul	 ecx, eax, 3
  00020	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00023	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00028	74 28		 je	 SHORT $LN2@ST_drawFir

; 936  : 		V_DrawScaledPatch(304, STRINGY(32), V_SNAPTORIGHT|V_TRANSLUCENT, jumpshield);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR _jumpshield
  0002f	50		 push	 eax
  00030	68 00 00 40 80	 push	 -2143289344		; 80400000H
  00035	6a 20		 push	 32			; 00000020H
  00037	e8 00 00 00 00	 call	 _STRINGY
  0003c	83 c4 04	 add	 esp, 4
  0003f	50		 push	 eax
  00040	68 30 01 00 00	 push	 304			; 00000130H
  00045	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	e9 21 01 00 00	 jmp	 $LN12@ST_drawFir
$LN2@ST_drawFir:

; 937  : 	else if (player->powers[pw_forceshield] == 2)

  00052	b8 04 00 00 00	 mov	 eax, 4
  00057	c1 e0 02	 shl	 eax, 2
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0005d	83 7c 01 38 02	 cmp	 DWORD PTR [ecx+eax+56], 2
  00062	75 28		 jne	 SHORT $LN4@ST_drawFir

; 938  : 		V_DrawScaledPatch(304, STRINGY(32), V_SNAPTORIGHT|V_TRANSLUCENT, forceshield);

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR _forceshield
  00069	50		 push	 eax
  0006a	68 00 00 40 80	 push	 -2143289344		; 80400000H
  0006f	6a 20		 push	 32			; 00000020H
  00071	e8 00 00 00 00	 call	 _STRINGY
  00076	83 c4 04	 add	 esp, 4
  00079	50		 push	 eax
  0007a	68 30 01 00 00	 push	 304			; 00000130H
  0007f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	e9 e7 00 00 00	 jmp	 $LN12@ST_drawFir
$LN4@ST_drawFir:

; 939  : 	else if (player->powers[pw_forceshield] == 1 && (leveltime & 1))

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	c1 e0 02	 shl	 eax, 2
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00097	83 7c 01 38 01	 cmp	 DWORD PTR [ecx+eax+56], 1
  0009c	75 32		 jne	 SHORT $LN6@ST_drawFir
  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  000a3	83 e0 01	 and	 eax, 1
  000a6	74 28		 je	 SHORT $LN6@ST_drawFir

; 940  : 		V_DrawScaledPatch(304, STRINGY(32), V_SNAPTORIGHT|V_TRANSLUCENT, forceshield);

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _forceshield
  000ad	50		 push	 eax
  000ae	68 00 00 40 80	 push	 -2143289344		; 80400000H
  000b3	6a 20		 push	 32			; 00000020H
  000b5	e8 00 00 00 00	 call	 _STRINGY
  000ba	83 c4 04	 add	 esp, 4
  000bd	50		 push	 eax
  000be	68 30 01 00 00	 push	 304			; 00000130H
  000c3	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000c8	83 c4 10	 add	 esp, 16			; 00000010H
  000cb	e9 a3 00 00 00	 jmp	 $LN12@ST_drawFir
$LN6@ST_drawFir:

; 941  : 	else if (player->powers[pw_watershield])

  000d0	b8 04 00 00 00	 mov	 eax, 4
  000d5	6b c8 0b	 imul	 ecx, eax, 11
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000db	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  000e0	74 25		 je	 SHORT $LN8@ST_drawFir

; 942  : 		V_DrawScaledPatch(304, STRINGY(32), V_SNAPTORIGHT|V_TRANSLUCENT, watershield);

  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR _watershield
  000e7	50		 push	 eax
  000e8	68 00 00 40 80	 push	 -2143289344		; 80400000H
  000ed	6a 20		 push	 32			; 00000020H
  000ef	e8 00 00 00 00	 call	 _STRINGY
  000f4	83 c4 04	 add	 esp, 4
  000f7	50		 push	 eax
  000f8	68 30 01 00 00	 push	 304			; 00000130H
  000fd	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00102	83 c4 10	 add	 esp, 16			; 00000010H
  00105	eb 6c		 jmp	 SHORT $LN12@ST_drawFir
$LN8@ST_drawFir:

; 943  : 	else if (player->powers[pw_bombshield])

  00107	b8 04 00 00 00	 mov	 eax, 4
  0010c	6b c8 0a	 imul	 ecx, eax, 10
  0010f	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00112	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00117	74 25		 je	 SHORT $LN10@ST_drawFir

; 944  : 		V_DrawScaledPatch(304, STRINGY(32), V_SNAPTORIGHT|V_TRANSLUCENT, bombshield);

  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR _bombshield
  0011e	50		 push	 eax
  0011f	68 00 00 40 80	 push	 -2143289344		; 80400000H
  00124	6a 20		 push	 32			; 00000020H
  00126	e8 00 00 00 00	 call	 _STRINGY
  0012b	83 c4 04	 add	 esp, 4
  0012e	50		 push	 eax
  0012f	68 30 01 00 00	 push	 304			; 00000130H
  00134	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00139	83 c4 10	 add	 esp, 16			; 00000010H
  0013c	eb 35		 jmp	 SHORT $LN12@ST_drawFir
$LN10@ST_drawFir:

; 945  : 	else if (player->powers[pw_ringshield])

  0013e	b8 04 00 00 00	 mov	 eax, 4
  00143	6b c8 09	 imul	 ecx, eax, 9
  00146	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00149	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0014e	74 23		 je	 SHORT $LN12@ST_drawFir

; 946  : 		V_DrawScaledPatch(304, STRINGY(32), V_SNAPTORIGHT|V_TRANSLUCENT, ringshield);

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR _ringshield
  00155	50		 push	 eax
  00156	68 00 00 40 80	 push	 -2143289344		; 80400000H
  0015b	6a 20		 push	 32			; 00000020H
  0015d	e8 00 00 00 00	 call	 _STRINGY
  00162	83 c4 04	 add	 esp, 4
  00165	50		 push	 eax
  00166	68 30 01 00 00	 push	 304			; 00000130H
  0016b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00170	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@ST_drawFir:

; 947  : 
; 948  : 	if (player->playerstate != PST_DEAD && ((player->powers[pw_invulnerability] > 3*TICRATE || (player->powers[pw_invulnerability]

  00173	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00176	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0017a	74 6c		 je	 SHORT $LN13@ST_drawFir
  0017c	b8 04 00 00 00	 mov	 eax, 4
  00181	6b c8 00	 imul	 ecx, eax, 0
  00184	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00187	83 7c 0a 38 69	 cmp	 DWORD PTR [edx+ecx+56], 105 ; 00000069H
  0018c	7f 37		 jg	 SHORT $LN14@ST_drawFir
  0018e	b8 04 00 00 00	 mov	 eax, 4
  00193	6b c8 00	 imul	 ecx, eax, 0
  00196	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00199	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0019e	74 0a		 je	 SHORT $LN15@ST_drawFir
  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  001a5	83 e0 01	 and	 eax, 1
  001a8	75 1b		 jne	 SHORT $LN14@ST_drawFir
$LN15@ST_drawFir:
  001aa	b8 04 00 00 00	 mov	 eax, 4
  001af	d1 e0		 shl	 eax, 1
  001b1	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  001b4	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  001b9	74 2d		 je	 SHORT $LN13@ST_drawFir
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  001c0	83 e0 01	 and	 eax, 1
  001c3	74 23		 je	 SHORT $LN13@ST_drawFir
$LN14@ST_drawFir:

; 949  : 		&& leveltime & 1)) || ((player->powers[pw_flashing] && leveltime & 1))))
; 950  : 		V_DrawScaledPatch(304, STRINGY(60), V_SNAPTORIGHT|V_TRANSLUCENT, invincibility);

  001c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _invincibility
  001ca	50		 push	 eax
  001cb	68 00 00 40 80	 push	 -2143289344		; 80400000H
  001d0	6a 3c		 push	 60			; 0000003cH
  001d2	e8 00 00 00 00	 call	 _STRINGY
  001d7	83 c4 04	 add	 esp, 4
  001da	50		 push	 eax
  001db	68 30 01 00 00	 push	 304			; 00000130H
  001e0	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001e5	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@ST_drawFir:

; 951  : 
; 952  : 	if (player->powers[pw_sneakers] > 3*TICRATE || (player->powers[pw_sneakers]

  001e8	b8 04 00 00 00	 mov	 eax, 4
  001ed	c1 e0 00	 shl	 eax, 0
  001f0	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  001f3	83 7c 01 38 69	 cmp	 DWORD PTR [ecx+eax+56], 105 ; 00000069H
  001f8	7f 1c		 jg	 SHORT $LN17@ST_drawFir
  001fa	b8 04 00 00 00	 mov	 eax, 4
  001ff	c1 e0 00	 shl	 eax, 0
  00202	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00205	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0020a	74 2d		 je	 SHORT $LN16@ST_drawFir
  0020c	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  00211	83 e0 01	 and	 eax, 1
  00214	74 23		 je	 SHORT $LN16@ST_drawFir
$LN17@ST_drawFir:

; 953  : 		&& leveltime & 1))
; 954  : 		V_DrawScaledPatch(304, STRINGY(88), V_SNAPTORIGHT|V_TRANSLUCENT, sneakers);

  00216	a1 00 00 00 00	 mov	 eax, DWORD PTR _sneakers
  0021b	50		 push	 eax
  0021c	68 00 00 40 80	 push	 -2143289344		; 80400000H
  00221	6a 58		 push	 88			; 00000058H
  00223	e8 00 00 00 00	 call	 _STRINGY
  00228	83 c4 04	 add	 esp, 4
  0022b	50		 push	 eax
  0022c	68 30 01 00 00	 push	 304			; 00000130H
  00231	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00236	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@ST_drawFir:

; 955  : 
; 956  : 	// Display the countdown drown numbers!
; 957  : 	if ((player->powers[pw_underwater] <= 11*TICRATE + 1
; 958  : 		&& player->powers[pw_underwater] >= 10*TICRATE + 1)
; 959  : 		|| (player->powers[pw_spacetime] <= 11*TICRATE + 1

  00239	b8 04 00 00 00	 mov	 eax, 4
  0023e	6b c8 06	 imul	 ecx, eax, 6
  00241	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00244	81 7c 0a 38 82
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 386 ; 00000182H
  0024c	7f 15		 jg	 SHORT $LN21@ST_drawFir
  0024e	b8 04 00 00 00	 mov	 eax, 4
  00253	6b c8 06	 imul	 ecx, eax, 6
  00256	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00259	81 7c 0a 38 5f
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 351 ; 0000015fH
  00261	7d 2a		 jge	 SHORT $LN20@ST_drawFir
$LN21@ST_drawFir:
  00263	b8 04 00 00 00	 mov	 eax, 4
  00268	6b c8 07	 imul	 ecx, eax, 7
  0026b	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0026e	81 7c 0a 38 82
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 386 ; 00000182H
  00276	7f 22		 jg	 SHORT $LN18@ST_drawFir
  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 07	 imul	 ecx, eax, 7
  00280	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00283	81 7c 0a 38 5f
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 351 ; 0000015fH
  0028b	7c 0d		 jl	 SHORT $LN18@ST_drawFir
$LN20@ST_drawFir:

; 960  : 		&& player->powers[pw_spacetime] >= 10*TICRATE + 1))
; 961  : 	{
; 962  : 		p = count5;

  0028d	a1 00 00 00 00	 mov	 eax, DWORD PTR _count5
  00292	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 963  : 	}

  00295	e9 c5 01 00 00	 jmp	 $LN38@ST_drawFir
$LN18@ST_drawFir:

; 964  : 	else if ((player->powers[pw_underwater] <= 9*TICRATE + 1
; 965  : 		&& player->powers[pw_underwater] >= 8*TICRATE + 1)
; 966  : 		|| (player->powers[pw_spacetime] <= 9*TICRATE + 1

  0029a	b8 04 00 00 00	 mov	 eax, 4
  0029f	6b c8 06	 imul	 ecx, eax, 6
  002a2	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  002a5	81 7c 0a 38 3c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 316 ; 0000013cH
  002ad	7f 15		 jg	 SHORT $LN25@ST_drawFir
  002af	b8 04 00 00 00	 mov	 eax, 4
  002b4	6b c8 06	 imul	 ecx, eax, 6
  002b7	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  002ba	81 7c 0a 38 19
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 281 ; 00000119H
  002c2	7d 2a		 jge	 SHORT $LN24@ST_drawFir
$LN25@ST_drawFir:
  002c4	b8 04 00 00 00	 mov	 eax, 4
  002c9	6b c8 07	 imul	 ecx, eax, 7
  002cc	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  002cf	81 7c 0a 38 3c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 316 ; 0000013cH
  002d7	7f 22		 jg	 SHORT $LN22@ST_drawFir
  002d9	b8 04 00 00 00	 mov	 eax, 4
  002de	6b c8 07	 imul	 ecx, eax, 7
  002e1	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  002e4	81 7c 0a 38 19
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 281 ; 00000119H
  002ec	7c 0d		 jl	 SHORT $LN22@ST_drawFir
$LN24@ST_drawFir:

; 967  : 		&& player->powers[pw_spacetime] >= 8*TICRATE + 1))
; 968  : 	{
; 969  : 		p = count4;

  002ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _count4
  002f3	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 970  : 	}

  002f6	e9 64 01 00 00	 jmp	 $LN38@ST_drawFir
$LN22@ST_drawFir:

; 971  : 	else if ((player->powers[pw_underwater] <= 7*TICRATE + 1
; 972  : 		&& player->powers[pw_underwater] >= 6*TICRATE + 1)
; 973  : 		|| (player->powers[pw_spacetime] <= 7*TICRATE + 1

  002fb	b8 04 00 00 00	 mov	 eax, 4
  00300	6b c8 06	 imul	 ecx, eax, 6
  00303	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00306	81 7c 0a 38 f6
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 246 ; 000000f6H
  0030e	7f 15		 jg	 SHORT $LN29@ST_drawFir
  00310	b8 04 00 00 00	 mov	 eax, 4
  00315	6b c8 06	 imul	 ecx, eax, 6
  00318	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0031b	81 7c 0a 38 d3
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 211 ; 000000d3H
  00323	7d 2a		 jge	 SHORT $LN28@ST_drawFir
$LN29@ST_drawFir:
  00325	b8 04 00 00 00	 mov	 eax, 4
  0032a	6b c8 07	 imul	 ecx, eax, 7
  0032d	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00330	81 7c 0a 38 f6
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 246 ; 000000f6H
  00338	7f 22		 jg	 SHORT $LN26@ST_drawFir
  0033a	b8 04 00 00 00	 mov	 eax, 4
  0033f	6b c8 07	 imul	 ecx, eax, 7
  00342	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00345	81 7c 0a 38 d3
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 211 ; 000000d3H
  0034d	7c 0d		 jl	 SHORT $LN26@ST_drawFir
$LN28@ST_drawFir:

; 974  : 		&& player->powers[pw_spacetime] >= 6*TICRATE + 1))
; 975  : 	{
; 976  : 		p = count3;

  0034f	a1 00 00 00 00	 mov	 eax, DWORD PTR _count3
  00354	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 977  : 	}

  00357	e9 03 01 00 00	 jmp	 $LN38@ST_drawFir
$LN26@ST_drawFir:

; 978  : 	else if ((player->powers[pw_underwater] <= 5*TICRATE + 1
; 979  : 		&& player->powers[pw_underwater] >= 4*TICRATE + 1)
; 980  : 		|| (player->powers[pw_spacetime] <= 5*TICRATE + 1

  0035c	b8 04 00 00 00	 mov	 eax, 4
  00361	6b c8 06	 imul	 ecx, eax, 6
  00364	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00367	81 7c 0a 38 b0
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 176 ; 000000b0H
  0036f	7f 15		 jg	 SHORT $LN33@ST_drawFir
  00371	b8 04 00 00 00	 mov	 eax, 4
  00376	6b c8 06	 imul	 ecx, eax, 6
  00379	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0037c	81 7c 0a 38 8d
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 141 ; 0000008dH
  00384	7d 2a		 jge	 SHORT $LN32@ST_drawFir
$LN33@ST_drawFir:
  00386	b8 04 00 00 00	 mov	 eax, 4
  0038b	6b c8 07	 imul	 ecx, eax, 7
  0038e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00391	81 7c 0a 38 b0
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 176 ; 000000b0H
  00399	7f 22		 jg	 SHORT $LN30@ST_drawFir
  0039b	b8 04 00 00 00	 mov	 eax, 4
  003a0	6b c8 07	 imul	 ecx, eax, 7
  003a3	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  003a6	81 7c 0a 38 8d
	00 00 00	 cmp	 DWORD PTR [edx+ecx+56], 141 ; 0000008dH
  003ae	7c 0d		 jl	 SHORT $LN30@ST_drawFir
$LN32@ST_drawFir:

; 981  : 		&& player->powers[pw_spacetime] >= 4*TICRATE + 1))
; 982  : 	{
; 983  : 		p = count2;

  003b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _count2
  003b5	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 984  : 	}

  003b8	e9 a2 00 00 00	 jmp	 $LN38@ST_drawFir
$LN30@ST_drawFir:

; 985  : 	else if ((player->powers[pw_underwater] <= 3*TICRATE + 1
; 986  : 		&& player->powers[pw_underwater] >= 2*TICRATE + 1)
; 987  : 		|| (player->powers[pw_spacetime] <= 3*TICRATE + 1

  003bd	b8 04 00 00 00	 mov	 eax, 4
  003c2	6b c8 06	 imul	 ecx, eax, 6
  003c5	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  003c8	83 7c 0a 38 6a	 cmp	 DWORD PTR [edx+ecx+56], 106 ; 0000006aH
  003cd	7f 12		 jg	 SHORT $LN37@ST_drawFir
  003cf	b8 04 00 00 00	 mov	 eax, 4
  003d4	6b c8 06	 imul	 ecx, eax, 6
  003d7	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  003da	83 7c 0a 38 47	 cmp	 DWORD PTR [edx+ecx+56], 71 ; 00000047H
  003df	7d 24		 jge	 SHORT $LN36@ST_drawFir
$LN37@ST_drawFir:
  003e1	b8 04 00 00 00	 mov	 eax, 4
  003e6	6b c8 07	 imul	 ecx, eax, 7
  003e9	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  003ec	83 7c 0a 38 6a	 cmp	 DWORD PTR [edx+ecx+56], 106 ; 0000006aH
  003f1	7f 1c		 jg	 SHORT $LN34@ST_drawFir
  003f3	b8 04 00 00 00	 mov	 eax, 4
  003f8	6b c8 07	 imul	 ecx, eax, 7
  003fb	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  003fe	83 7c 0a 38 47	 cmp	 DWORD PTR [edx+ecx+56], 71 ; 00000047H
  00403	7c 0a		 jl	 SHORT $LN34@ST_drawFir
$LN36@ST_drawFir:

; 988  : 		&& player->powers[pw_spacetime] >= 2*TICRATE + 1))
; 989  : 	{
; 990  : 		p = count1;

  00405	a1 00 00 00 00	 mov	 eax, DWORD PTR _count1
  0040a	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 991  : 	}

  0040d	eb 50		 jmp	 SHORT $LN38@ST_drawFir
$LN34@ST_drawFir:

; 992  : 	else if ((player->powers[pw_underwater] <= 1*TICRATE + 1
; 993  : 		&& player->powers[pw_underwater] > 1)
; 994  : 		|| (player->powers[pw_spacetime] <= 1*TICRATE + 1

  0040f	b8 04 00 00 00	 mov	 eax, 4
  00414	6b c8 06	 imul	 ecx, eax, 6
  00417	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0041a	83 7c 0a 38 24	 cmp	 DWORD PTR [edx+ecx+56], 36 ; 00000024H
  0041f	7f 12		 jg	 SHORT $LN40@ST_drawFir
  00421	b8 04 00 00 00	 mov	 eax, 4
  00426	6b c8 06	 imul	 ecx, eax, 6
  00429	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0042c	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  00431	7f 24		 jg	 SHORT $LN39@ST_drawFir
$LN40@ST_drawFir:
  00433	b8 04 00 00 00	 mov	 eax, 4
  00438	6b c8 07	 imul	 ecx, eax, 7
  0043b	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0043e	83 7c 0a 38 24	 cmp	 DWORD PTR [edx+ecx+56], 36 ; 00000024H
  00443	7f 1a		 jg	 SHORT $LN38@ST_drawFir
  00445	b8 04 00 00 00	 mov	 eax, 4
  0044a	6b c8 07	 imul	 ecx, eax, 7
  0044d	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00450	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  00455	7e 08		 jle	 SHORT $LN38@ST_drawFir
$LN39@ST_drawFir:

; 995  : 		&& player->powers[pw_spacetime] > 1))
; 996  : 	{
; 997  : 		p = count0;

  00457	a1 00 00 00 00	 mov	 eax, DWORD PTR _count0
  0045c	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
$LN38@ST_drawFir:

; 998  : 	}
; 999  : 
; 1000 : 	if (p)

  0045f	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  00463	74 4e		 je	 SHORT $LN41@ST_drawFir

; 1001 : 		V_DrawTranslucentPatch(SCX((BASEVIDWIDTH/2) - (SHORT(p->width)/2) + SHORT(p->leftoffset)), SCY(120 - SHORT(p->topoffset)),

  00465	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00468	50		 push	 eax
  00469	68 00 00 01 00	 push	 65536			; 00010000H
  0046e	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00471	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00475	b8 78 00 00 00	 mov	 eax, 120		; 00000078H
  0047a	2b c2		 sub	 eax, edx
  0047c	50		 push	 eax
  0047d	e8 00 00 00 00	 call	 _SCY
  00482	83 c4 04	 add	 esp, 4
  00485	50		 push	 eax
  00486	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00489	0f bf 01	 movsx	 eax, WORD PTR [ecx]
  0048c	99		 cdq
  0048d	2b c2		 sub	 eax, edx
  0048f	d1 f8		 sar	 eax, 1
  00491	ba a0 00 00 00	 mov	 edx, 160		; 000000a0H
  00496	2b d0		 sub	 edx, eax
  00498	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0049b	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0049f	03 d1		 add	 edx, ecx
  004a1	52		 push	 edx
  004a2	e8 00 00 00 00	 call	 _SCX
  004a7	83 c4 04	 add	 esp, 4
  004aa	50		 push	 eax
  004ab	e8 00 00 00 00	 call	 _V_DrawTranslucentPatch
  004b0	83 c4 10	 add	 esp, 16			; 00000010H
$LN41@ST_drawFir:

; 1002 : 			V_NOSCALESTART, p);
; 1003 : }

  004b3	5f		 pop	 edi
  004b4	5e		 pop	 esi
  004b5	5b		 pop	 ebx
  004b6	8b e5		 mov	 esp, ebp
  004b8	5d		 pop	 ebp
  004b9	c3		 ret	 0
_ST_drawFirstPersonHUD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawLevelTitle
_TEXT	SEGMENT
_nonumber$ = -32					; size = 4
_actnum$ = -28						; size = 4
_zonexpos$ = -24					; size = 4
_ttlnumxpos$ = -20					; size = 4
_subttlxpos$ = -16					; size = 4
_lvlttlxpos$ = -12					; size = 4
_subttl$ = -8						; size = 4
_lvlttl$ = -4						; size = 4
_ST_drawLevelTitle PROC					; COMDAT

; 751  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 752  : 	char *lvlttl = mapheaderinfo[gamemap-1].lvlttl;

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00010	83 e8 01	 sub	 eax, 1
  00013	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00019	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  0001f	89 4d fc	 mov	 DWORD PTR _lvlttl$[ebp], ecx

; 753  : 	char *subttl = mapheaderinfo[gamemap-1].subttl;

  00022	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00029	83 e8 01	 sub	 eax, 1
  0002c	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00032	81 c1 21 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo+33
  00038	89 4d f8	 mov	 DWORD PTR _subttl$[ebp], ecx

; 754  : 	INT32 lvlttlxpos;
; 755  : 	INT32 subttlxpos = BASEVIDWIDTH/2;

  0003b	c7 45 f0 a0 00
	00 00		 mov	 DWORD PTR _subttlxpos$[ebp], 160 ; 000000a0H

; 756  : 	INT32 ttlnumxpos;
; 757  : 	INT32 zonexpos;
; 758  : 	INT32 actnum = mapheaderinfo[gamemap-1].actnum;

  00042	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00049	83 e8 01	 sub	 eax, 1
  0004c	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00052	0f b6 91 42 00
	00 00		 movzx	 edx, BYTE PTR _mapheaderinfo[ecx+66]
  00059	89 55 e4	 mov	 DWORD PTR _actnum$[ebp], edx

; 759  : 	boolean nonumber = false;

  0005c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nonumber$[ebp], 0

; 760  : 
; 761  : 	if (!(timeinmap > 1 && timeinmap < 111))

  00063	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _timeinmap, 1
  0006a	76 09		 jbe	 SHORT $LN3@ST_drawLev
  0006c	83 3d 00 00 00
	00 6f		 cmp	 DWORD PTR _timeinmap, 111 ; 0000006fH
  00073	72 05		 jb	 SHORT $LN2@ST_drawLev
$LN3@ST_drawLev:

; 762  : 		return;

  00075	e9 4d 09 00 00	 jmp	 $LN52@ST_drawLev
$LN2@ST_drawLev:

; 763  : 
; 764  : 	if (actnum > 0)

  0007a	83 7d e4 00	 cmp	 DWORD PTR _actnum$[ebp], 0
  0007e	7e 49		 jle	 SHORT $LN4@ST_drawLev

; 765  : 	{
; 766  : 		ttlnum = W_CachePatchName(va("TTL%.2d", actnum), PU_CACHE);

  00080	6a 65		 push	 101			; 00000065H
  00082	8b 45 e4	 mov	 eax, DWORD PTR _actnum$[ebp]
  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_07ILADDNDN@TTL?$CF?42d@
  0008b	e8 00 00 00 00	 call	 _va
  00090	83 c4 08	 add	 esp, 8
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _W_CachePatchName
  00099	83 c4 08	 add	 esp, 8
  0009c	a3 00 00 00 00	 mov	 DWORD PTR _ttlnum, eax

; 767  : 		lvlttlxpos = ((BASEVIDWIDTH/2) - (V_LevelNameWidth(lvlttl)/2)) - SHORT(ttlnum->width);

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _V_LevelNameWidth
  000aa	83 c4 04	 add	 esp, 4
  000ad	99		 cdq
  000ae	2b c2		 sub	 eax, edx
  000b0	d1 f8		 sar	 eax, 1
  000b2	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  000b7	2b c8		 sub	 ecx, eax
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ttlnum
  000bf	0f bf 02	 movsx	 eax, WORD PTR [edx]
  000c2	2b c8		 sub	 ecx, eax
  000c4	89 4d f4	 mov	 DWORD PTR _lvlttlxpos$[ebp], ecx

; 768  : 	}

  000c7	eb 22		 jmp	 SHORT $LN5@ST_drawLev
$LN4@ST_drawLev:

; 769  : 	else
; 770  : 	{
; 771  : 		nonumber = true;

  000c9	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _nonumber$[ebp], 1

; 772  : 		lvlttlxpos = ((BASEVIDWIDTH/2) - (V_LevelNameWidth(lvlttl)/2));

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _V_LevelNameWidth
  000d9	83 c4 04	 add	 esp, 4
  000dc	99		 cdq
  000dd	2b c2		 sub	 eax, edx
  000df	d1 f8		 sar	 eax, 1
  000e1	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  000e6	2b c8		 sub	 ecx, eax
  000e8	89 4d f4	 mov	 DWORD PTR _lvlttlxpos$[ebp], ecx
$LN5@ST_drawLev:

; 773  : 	}
; 774  : 
; 775  : 	ttlnumxpos = lvlttlxpos + V_LevelNameWidth(lvlttl);

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 _V_LevelNameWidth
  000f4	83 c4 04	 add	 esp, 4
  000f7	03 45 f4	 add	 eax, DWORD PTR _lvlttlxpos$[ebp]
  000fa	89 45 ec	 mov	 DWORD PTR _ttlnumxpos$[ebp], eax

; 776  : 	zonexpos = ttlnumxpos - V_LevelNameWidth(text[ZONE]);

  000fd	b8 04 00 00 00	 mov	 eax, 4
  00102	6b c8 17	 imul	 ecx, eax, 23
  00105	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0010b	52		 push	 edx
  0010c	e8 00 00 00 00	 call	 _V_LevelNameWidth
  00111	83 c4 04	 add	 esp, 4
  00114	8b 4d ec	 mov	 ecx, DWORD PTR _ttlnumxpos$[ebp]
  00117	2b c8		 sub	 ecx, eax
  00119	89 4d e8	 mov	 DWORD PTR _zonexpos$[ebp], ecx

; 777  : 
; 778  : 	if (lvlttlxpos < 0)

  0011c	83 7d f4 00	 cmp	 DWORD PTR _lvlttlxpos$[ebp], 0
  00120	7d 07		 jge	 SHORT $LN6@ST_drawLev

; 779  : 		lvlttlxpos = 0;

  00122	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _lvlttlxpos$[ebp], 0
$LN6@ST_drawLev:

; 780  : 
; 781  : 	if (timeinmap == 2)

  00129	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _timeinmap, 2
  00130	0f 85 a3 00 00
	00		 jne	 $LN7@ST_drawLev

; 782  : 	{
; 783  : 		if (!nonumber)

  00136	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  0013a	75 35		 jne	 SHORT $LN9@ST_drawLev

; 784  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(200*vid.fdupy), V_NOSCALESTART, ttlnum);

  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  00141	50		 push	 eax
  00142	68 00 00 01 00	 push	 65536			; 00010000H
  00147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  0014f	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00157	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0015b	51		 push	 ecx
  0015c	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  0015f	52		 push	 edx
  00160	e8 00 00 00 00	 call	 _SCX
  00165	83 c4 04	 add	 esp, 4
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0016e	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@ST_drawLev:

; 785  : 		V_DrawLevelTitle(lvlttlxpos, 0, 0, lvlttl);

  00171	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  00174	50		 push	 eax
  00175	6a 00		 push	 0
  00177	6a 00		 push	 0
  00179	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00182	83 c4 10	 add	 esp, 16			; 00000010H

; 786  : 
; 787  : 		if (!mapheaderinfo[gamemap-1].nozone)

  00185	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0018c	83 e8 01	 sub	 eax, 1
  0018f	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00195	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  0019c	75 22		 jne	 SHORT $LN10@ST_drawLev

; 788  : 			V_DrawLevelTitle(zonexpos, 200, 0, text[ZONE]);

  0019e	b8 04 00 00 00	 mov	 eax, 4
  001a3	6b c8 17	 imul	 ecx, eax, 23
  001a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001ac	52		 push	 edx
  001ad	6a 00		 push	 0
  001af	68 c8 00 00 00	 push	 200			; 000000c8H
  001b4	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  001bd	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@ST_drawLev:

; 789  : 
; 790  : 		V_DrawCenteredString(subttlxpos, 0+48, 0, subttl);

  001c0	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  001c3	50		 push	 eax
  001c4	6a 00		 push	 0
  001c6	6a 30		 push	 48			; 00000030H
  001c8	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  001cb	51		 push	 ecx
  001cc	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001d1	83 c4 10	 add	 esp, 16			; 00000010H

; 791  : 	}

  001d4	e9 ee 07 00 00	 jmp	 $LN52@ST_drawLev
$LN7@ST_drawLev:

; 792  : 	else if (timeinmap == 3)

  001d9	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _timeinmap, 3
  001e0	0f 85 a3 00 00
	00		 jne	 $LN11@ST_drawLev

; 793  : 	{
; 794  : 		if (!nonumber)

  001e6	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  001ea	75 35		 jne	 SHORT $LN13@ST_drawLev

; 795  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(188*vid.fdupy), V_NOSCALESTART, ttlnum);

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  001f1	50		 push	 eax
  001f2	68 00 00 01 00	 push	 65536			; 00010000H
  001f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@433c0000
  001ff	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00207	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0020b	51		 push	 ecx
  0020c	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  0020f	52		 push	 edx
  00210	e8 00 00 00 00	 call	 _SCX
  00215	83 c4 04	 add	 esp, 4
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0021e	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@ST_drawLev:

; 796  : 		V_DrawLevelTitle(lvlttlxpos, 12, 0, lvlttl);

  00221	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  00224	50		 push	 eax
  00225	6a 00		 push	 0
  00227	6a 0c		 push	 12			; 0000000cH
  00229	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  0022c	51		 push	 ecx
  0022d	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00232	83 c4 10	 add	 esp, 16			; 00000010H

; 797  : 
; 798  : 		if (!mapheaderinfo[gamemap-1].nozone)

  00235	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0023c	83 e8 01	 sub	 eax, 1
  0023f	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00245	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  0024c	75 22		 jne	 SHORT $LN14@ST_drawLev

; 799  : 			V_DrawLevelTitle(zonexpos, 188, 0, text[ZONE]);

  0024e	b8 04 00 00 00	 mov	 eax, 4
  00253	6b c8 17	 imul	 ecx, eax, 23
  00256	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0025c	52		 push	 edx
  0025d	6a 00		 push	 0
  0025f	68 bc 00 00 00	 push	 188			; 000000bcH
  00264	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  0026d	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@ST_drawLev:

; 800  : 
; 801  : 		V_DrawCenteredString(subttlxpos, 12+48, 0, subttl);

  00270	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  00273	50		 push	 eax
  00274	6a 00		 push	 0
  00276	6a 3c		 push	 60			; 0000003cH
  00278	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  0027b	51		 push	 ecx
  0027c	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00281	83 c4 10	 add	 esp, 16			; 00000010H

; 802  : 	}

  00284	e9 3e 07 00 00	 jmp	 $LN52@ST_drawLev
$LN11@ST_drawLev:

; 803  : 	else if (timeinmap == 4)

  00289	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR _timeinmap, 4
  00290	0f 85 a1 00 00
	00		 jne	 $LN15@ST_drawLev

; 804  : 	{
; 805  : 		if (!nonumber)

  00296	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  0029a	75 33		 jne	 SHORT $LN17@ST_drawLev

; 806  : 			V_DrawScaledPatch(SCX(0), (INT32)(176*vid.fdupy), V_NOSCALESTART, ttlnum);

  0029c	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  002a1	50		 push	 eax
  002a2	68 00 00 01 00	 push	 65536			; 00010000H
  002a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43300000
  002af	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  002b7	f3 0f 2c c8	 cvttss2si ecx, xmm0
  002bb	51		 push	 ecx
  002bc	6a 00		 push	 0
  002be	e8 00 00 00 00	 call	 _SCX
  002c3	83 c4 04	 add	 esp, 4
  002c6	50		 push	 eax
  002c7	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  002cc	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@ST_drawLev:

; 807  : 		V_DrawLevelTitle(lvlttlxpos, 24, 0, lvlttl);

  002cf	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  002d2	50		 push	 eax
  002d3	6a 00		 push	 0
  002d5	6a 18		 push	 24			; 00000018H
  002d7	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  002da	51		 push	 ecx
  002db	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  002e0	83 c4 10	 add	 esp, 16			; 00000010H

; 808  : 
; 809  : 		if (!mapheaderinfo[gamemap-1].nozone)

  002e3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  002ea	83 e8 01	 sub	 eax, 1
  002ed	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  002f3	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  002fa	75 22		 jne	 SHORT $LN18@ST_drawLev

; 810  : 			V_DrawLevelTitle(zonexpos, 176, 0, text[ZONE]);

  002fc	b8 04 00 00 00	 mov	 eax, 4
  00301	6b c8 17	 imul	 ecx, eax, 23
  00304	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0030a	52		 push	 edx
  0030b	6a 00		 push	 0
  0030d	68 b0 00 00 00	 push	 176			; 000000b0H
  00312	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  0031b	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@ST_drawLev:

; 811  : 
; 812  : 		V_DrawCenteredString(subttlxpos, 24+48, 0, subttl);

  0031e	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  00321	50		 push	 eax
  00322	6a 00		 push	 0
  00324	6a 48		 push	 72			; 00000048H
  00326	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  00329	51		 push	 ecx
  0032a	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0032f	83 c4 10	 add	 esp, 16			; 00000010H

; 813  : 	}

  00332	e9 90 06 00 00	 jmp	 $LN52@ST_drawLev
$LN15@ST_drawLev:

; 814  : 	else if (timeinmap == 5)

  00337	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _timeinmap, 5
  0033e	0f 85 a3 00 00
	00		 jne	 $LN19@ST_drawLev

; 815  : 	{
; 816  : 		if (!nonumber)

  00344	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  00348	75 35		 jne	 SHORT $LN21@ST_drawLev

; 817  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(164*vid.fdupy), V_NOSCALESTART, ttlnum);

  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  0034f	50		 push	 eax
  00350	68 00 00 01 00	 push	 65536			; 00010000H
  00355	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43240000
  0035d	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00365	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00369	51		 push	 ecx
  0036a	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  0036d	52		 push	 edx
  0036e	e8 00 00 00 00	 call	 _SCX
  00373	83 c4 04	 add	 esp, 4
  00376	50		 push	 eax
  00377	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0037c	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@ST_drawLev:

; 818  : 		V_DrawLevelTitle(lvlttlxpos, 36, 0, lvlttl);

  0037f	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  00382	50		 push	 eax
  00383	6a 00		 push	 0
  00385	6a 24		 push	 36			; 00000024H
  00387	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  0038a	51		 push	 ecx
  0038b	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00390	83 c4 10	 add	 esp, 16			; 00000010H

; 819  : 
; 820  : 		if (!mapheaderinfo[gamemap-1].nozone)

  00393	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0039a	83 e8 01	 sub	 eax, 1
  0039d	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  003a3	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  003aa	75 22		 jne	 SHORT $LN22@ST_drawLev

; 821  : 			V_DrawLevelTitle(zonexpos, 164, 0, text[ZONE]);

  003ac	b8 04 00 00 00	 mov	 eax, 4
  003b1	6b c8 17	 imul	 ecx, eax, 23
  003b4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  003ba	52		 push	 edx
  003bb	6a 00		 push	 0
  003bd	68 a4 00 00 00	 push	 164			; 000000a4H
  003c2	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  003c5	50		 push	 eax
  003c6	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  003cb	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@ST_drawLev:

; 822  : 
; 823  : 		V_DrawCenteredString(subttlxpos, 36+48, 0, subttl);

  003ce	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  003d1	50		 push	 eax
  003d2	6a 00		 push	 0
  003d4	6a 54		 push	 84			; 00000054H
  003d6	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  003d9	51		 push	 ecx
  003da	e8 00 00 00 00	 call	 _V_DrawCenteredString
  003df	83 c4 10	 add	 esp, 16			; 00000010H

; 824  : 	}

  003e2	e9 e0 05 00 00	 jmp	 $LN52@ST_drawLev
$LN19@ST_drawLev:

; 825  : 	else if (timeinmap == 6)

  003e7	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _timeinmap, 6
  003ee	0f 85 a3 00 00
	00		 jne	 $LN23@ST_drawLev

; 826  : 	{
; 827  : 		if (!nonumber)

  003f4	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  003f8	75 35		 jne	 SHORT $LN25@ST_drawLev

; 828  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(152*vid.fdupy), V_NOSCALESTART, ttlnum);

  003fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  003ff	50		 push	 eax
  00400	68 00 00 01 00	 push	 65536			; 00010000H
  00405	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43180000
  0040d	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00415	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00419	51		 push	 ecx
  0041a	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  0041d	52		 push	 edx
  0041e	e8 00 00 00 00	 call	 _SCX
  00423	83 c4 04	 add	 esp, 4
  00426	50		 push	 eax
  00427	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0042c	83 c4 10	 add	 esp, 16			; 00000010H
$LN25@ST_drawLev:

; 829  : 		V_DrawLevelTitle(lvlttlxpos, 48, 0, lvlttl);

  0042f	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  00432	50		 push	 eax
  00433	6a 00		 push	 0
  00435	6a 30		 push	 48			; 00000030H
  00437	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  0043a	51		 push	 ecx
  0043b	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00440	83 c4 10	 add	 esp, 16			; 00000010H

; 830  : 
; 831  : 		if (!mapheaderinfo[gamemap-1].nozone)

  00443	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0044a	83 e8 01	 sub	 eax, 1
  0044d	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00453	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  0045a	75 22		 jne	 SHORT $LN26@ST_drawLev

; 832  : 			V_DrawLevelTitle(zonexpos, 152, 0, text[ZONE]);

  0045c	b8 04 00 00 00	 mov	 eax, 4
  00461	6b c8 17	 imul	 ecx, eax, 23
  00464	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0046a	52		 push	 edx
  0046b	6a 00		 push	 0
  0046d	68 98 00 00 00	 push	 152			; 00000098H
  00472	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  00475	50		 push	 eax
  00476	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  0047b	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@ST_drawLev:

; 833  : 
; 834  : 		V_DrawCenteredString(subttlxpos, 48+48, 0, subttl);

  0047e	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  00481	50		 push	 eax
  00482	6a 00		 push	 0
  00484	6a 60		 push	 96			; 00000060H
  00486	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  00489	51		 push	 ecx
  0048a	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0048f	83 c4 10	 add	 esp, 16			; 00000010H

; 835  : 	}

  00492	e9 30 05 00 00	 jmp	 $LN52@ST_drawLev
$LN23@ST_drawLev:

; 836  : 	else if (timeinmap == 7)

  00497	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _timeinmap, 7
  0049e	0f 85 a3 00 00
	00		 jne	 $LN27@ST_drawLev

; 837  : 	{
; 838  : 		if (!nonumber)

  004a4	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  004a8	75 35		 jne	 SHORT $LN29@ST_drawLev

; 839  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(140*vid.fdupy), V_NOSCALESTART, ttlnum);

  004aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  004af	50		 push	 eax
  004b0	68 00 00 01 00	 push	 65536			; 00010000H
  004b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@430c0000
  004bd	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  004c5	f3 0f 2c c8	 cvttss2si ecx, xmm0
  004c9	51		 push	 ecx
  004ca	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  004cd	52		 push	 edx
  004ce	e8 00 00 00 00	 call	 _SCX
  004d3	83 c4 04	 add	 esp, 4
  004d6	50		 push	 eax
  004d7	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004dc	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@ST_drawLev:

; 840  : 		V_DrawLevelTitle(lvlttlxpos, 60, 0, lvlttl);

  004df	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  004e2	50		 push	 eax
  004e3	6a 00		 push	 0
  004e5	6a 3c		 push	 60			; 0000003cH
  004e7	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  004ea	51		 push	 ecx
  004eb	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  004f0	83 c4 10	 add	 esp, 16			; 00000010H

; 841  : 
; 842  : 		if (!mapheaderinfo[gamemap-1].nozone)

  004f3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  004fa	83 e8 01	 sub	 eax, 1
  004fd	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00503	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  0050a	75 22		 jne	 SHORT $LN30@ST_drawLev

; 843  : 			V_DrawLevelTitle(zonexpos, 140, 0, text[ZONE]);

  0050c	b8 04 00 00 00	 mov	 eax, 4
  00511	6b c8 17	 imul	 ecx, eax, 23
  00514	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0051a	52		 push	 edx
  0051b	6a 00		 push	 0
  0051d	68 8c 00 00 00	 push	 140			; 0000008cH
  00522	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  00525	50		 push	 eax
  00526	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  0052b	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@ST_drawLev:

; 844  : 
; 845  : 		V_DrawCenteredString(subttlxpos, 60+48, 0, subttl);

  0052e	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  00531	50		 push	 eax
  00532	6a 00		 push	 0
  00534	6a 6c		 push	 108			; 0000006cH
  00536	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  00539	51		 push	 ecx
  0053a	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0053f	83 c4 10	 add	 esp, 16			; 00000010H

; 846  : 	}

  00542	e9 80 04 00 00	 jmp	 $LN52@ST_drawLev
$LN27@ST_drawLev:

; 847  : 	else if (timeinmap == 8)

  00547	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR _timeinmap, 8
  0054e	0f 85 a3 00 00
	00		 jne	 $LN31@ST_drawLev

; 848  : 	{
; 849  : 		if (!nonumber)

  00554	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  00558	75 35		 jne	 SHORT $LN33@ST_drawLev

; 850  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(128*vid.fdupy), V_NOSCALESTART, ttlnum);

  0055a	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  0055f	50		 push	 eax
  00560	68 00 00 01 00	 push	 65536			; 00010000H
  00565	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0056d	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00575	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00579	51		 push	 ecx
  0057a	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  0057d	52		 push	 edx
  0057e	e8 00 00 00 00	 call	 _SCX
  00583	83 c4 04	 add	 esp, 4
  00586	50		 push	 eax
  00587	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0058c	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@ST_drawLev:

; 851  : 		V_DrawLevelTitle(lvlttlxpos, 72, 0, lvlttl);

  0058f	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  00592	50		 push	 eax
  00593	6a 00		 push	 0
  00595	6a 48		 push	 72			; 00000048H
  00597	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  0059a	51		 push	 ecx
  0059b	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  005a0	83 c4 10	 add	 esp, 16			; 00000010H

; 852  : 
; 853  : 		if (!mapheaderinfo[gamemap-1].nozone)

  005a3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  005aa	83 e8 01	 sub	 eax, 1
  005ad	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  005b3	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  005ba	75 22		 jne	 SHORT $LN34@ST_drawLev

; 854  : 			V_DrawLevelTitle(zonexpos, 128, 0, text[ZONE]);

  005bc	b8 04 00 00 00	 mov	 eax, 4
  005c1	6b c8 17	 imul	 ecx, eax, 23
  005c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  005ca	52		 push	 edx
  005cb	6a 00		 push	 0
  005cd	68 80 00 00 00	 push	 128			; 00000080H
  005d2	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  005d5	50		 push	 eax
  005d6	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  005db	83 c4 10	 add	 esp, 16			; 00000010H
$LN34@ST_drawLev:

; 855  : 
; 856  : 		V_DrawCenteredString(subttlxpos, 72+48, 0, subttl);

  005de	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  005e1	50		 push	 eax
  005e2	6a 00		 push	 0
  005e4	6a 78		 push	 120			; 00000078H
  005e6	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  005e9	51		 push	 ecx
  005ea	e8 00 00 00 00	 call	 _V_DrawCenteredString
  005ef	83 c4 10	 add	 esp, 16			; 00000010H

; 857  : 	}

  005f2	e9 d0 03 00 00	 jmp	 $LN52@ST_drawLev
$LN31@ST_drawLev:

; 858  : 	else if (timeinmap == 106)

  005f7	83 3d 00 00 00
	00 6a		 cmp	 DWORD PTR _timeinmap, 106 ; 0000006aH
  005fe	0f 85 a3 00 00
	00		 jne	 $LN35@ST_drawLev

; 859  : 	{
; 860  : 		if (!nonumber)

  00604	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  00608	75 35		 jne	 SHORT $LN37@ST_drawLev

; 861  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(80*vid.fdupy), V_NOSCALESTART, ttlnum);

  0060a	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  0060f	50		 push	 eax
  00610	68 00 00 01 00	 push	 65536			; 00010000H
  00615	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  0061d	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00625	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00629	51		 push	 ecx
  0062a	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  0062d	52		 push	 edx
  0062e	e8 00 00 00 00	 call	 _SCX
  00633	83 c4 04	 add	 esp, 4
  00636	50		 push	 eax
  00637	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0063c	83 c4 10	 add	 esp, 16			; 00000010H
$LN37@ST_drawLev:

; 862  : 		V_DrawLevelTitle(lvlttlxpos, 104, 0, lvlttl);

  0063f	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  00642	50		 push	 eax
  00643	6a 00		 push	 0
  00645	6a 68		 push	 104			; 00000068H
  00647	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  0064a	51		 push	 ecx
  0064b	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00650	83 c4 10	 add	 esp, 16			; 00000010H

; 863  : 
; 864  : 		if (!mapheaderinfo[gamemap-1].nozone)

  00653	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0065a	83 e8 01	 sub	 eax, 1
  0065d	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00663	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  0066a	75 1f		 jne	 SHORT $LN38@ST_drawLev

; 865  : 			V_DrawLevelTitle(zonexpos, 80, 0, text[ZONE]);

  0066c	b8 04 00 00 00	 mov	 eax, 4
  00671	6b c8 17	 imul	 ecx, eax, 23
  00674	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0067a	52		 push	 edx
  0067b	6a 00		 push	 0
  0067d	6a 50		 push	 80			; 00000050H
  0067f	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  00682	50		 push	 eax
  00683	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00688	83 c4 10	 add	 esp, 16			; 00000010H
$LN38@ST_drawLev:

; 866  : 
; 867  : 		V_DrawCenteredString(subttlxpos, 104+48, 0, subttl);

  0068b	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  0068e	50		 push	 eax
  0068f	6a 00		 push	 0
  00691	68 98 00 00 00	 push	 152			; 00000098H
  00696	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  00699	51		 push	 ecx
  0069a	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0069f	83 c4 10	 add	 esp, 16			; 00000010H

; 868  : 	}

  006a2	e9 20 03 00 00	 jmp	 $LN52@ST_drawLev
$LN35@ST_drawLev:

; 869  : 	else if (timeinmap == 107)

  006a7	83 3d 00 00 00
	00 6b		 cmp	 DWORD PTR _timeinmap, 107 ; 0000006bH
  006ae	0f 85 a6 00 00
	00		 jne	 $LN39@ST_drawLev

; 870  : 	{
; 871  : 		if (!nonumber)

  006b4	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  006b8	75 35		 jne	 SHORT $LN41@ST_drawLev

; 872  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(56*vid.fdupy), V_NOSCALESTART, ttlnum);

  006ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  006bf	50		 push	 eax
  006c0	68 00 00 01 00	 push	 65536			; 00010000H
  006c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42600000
  006cd	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  006d5	f3 0f 2c c8	 cvttss2si ecx, xmm0
  006d9	51		 push	 ecx
  006da	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  006dd	52		 push	 edx
  006de	e8 00 00 00 00	 call	 _SCX
  006e3	83 c4 04	 add	 esp, 4
  006e6	50		 push	 eax
  006e7	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  006ec	83 c4 10	 add	 esp, 16			; 00000010H
$LN41@ST_drawLev:

; 873  : 		V_DrawLevelTitle(lvlttlxpos, 128, 0, lvlttl);

  006ef	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  006f2	50		 push	 eax
  006f3	6a 00		 push	 0
  006f5	68 80 00 00 00	 push	 128			; 00000080H
  006fa	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  006fd	51		 push	 ecx
  006fe	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00703	83 c4 10	 add	 esp, 16			; 00000010H

; 874  : 
; 875  : 		if (!mapheaderinfo[gamemap-1].nozone)

  00706	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0070d	83 e8 01	 sub	 eax, 1
  00710	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00716	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  0071d	75 1f		 jne	 SHORT $LN42@ST_drawLev

; 876  : 			V_DrawLevelTitle(zonexpos, 56, 0, text[ZONE]);

  0071f	b8 04 00 00 00	 mov	 eax, 4
  00724	6b c8 17	 imul	 ecx, eax, 23
  00727	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0072d	52		 push	 edx
  0072e	6a 00		 push	 0
  00730	6a 38		 push	 56			; 00000038H
  00732	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  00735	50		 push	 eax
  00736	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  0073b	83 c4 10	 add	 esp, 16			; 00000010H
$LN42@ST_drawLev:

; 877  : 
; 878  : 		V_DrawCenteredString(subttlxpos, 128+48, 0, subttl);

  0073e	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  00741	50		 push	 eax
  00742	6a 00		 push	 0
  00744	68 b0 00 00 00	 push	 176			; 000000b0H
  00749	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  0074c	51		 push	 ecx
  0074d	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00752	83 c4 10	 add	 esp, 16			; 00000010H

; 879  : 	}

  00755	e9 6d 02 00 00	 jmp	 $LN52@ST_drawLev
$LN39@ST_drawLev:

; 880  : 	else if (timeinmap == 108)

  0075a	83 3d 00 00 00
	00 6c		 cmp	 DWORD PTR _timeinmap, 108 ; 0000006cH
  00761	0f 85 8f 00 00
	00		 jne	 $LN43@ST_drawLev

; 881  : 	{
; 882  : 		if (!nonumber)

  00767	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  0076b	75 35		 jne	 SHORT $LN45@ST_drawLev

; 883  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(32*vid.fdupy), V_NOSCALESTART, ttlnum);

  0076d	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  00772	50		 push	 eax
  00773	68 00 00 01 00	 push	 65536			; 00010000H
  00778	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  00780	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00788	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0078c	51		 push	 ecx
  0078d	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  00790	52		 push	 edx
  00791	e8 00 00 00 00	 call	 _SCX
  00796	83 c4 04	 add	 esp, 4
  00799	50		 push	 eax
  0079a	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0079f	83 c4 10	 add	 esp, 16			; 00000010H
$LN45@ST_drawLev:

; 884  : 		V_DrawLevelTitle(lvlttlxpos, 152, 0, lvlttl);

  007a2	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  007a5	50		 push	 eax
  007a6	6a 00		 push	 0
  007a8	68 98 00 00 00	 push	 152			; 00000098H
  007ad	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  007b0	51		 push	 ecx
  007b1	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  007b6	83 c4 10	 add	 esp, 16			; 00000010H

; 885  : 
; 886  : 		if (!mapheaderinfo[gamemap-1].nozone)

  007b9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  007c0	83 e8 01	 sub	 eax, 1
  007c3	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  007c9	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  007d0	75 1f		 jne	 SHORT $LN46@ST_drawLev

; 887  : 			V_DrawLevelTitle(zonexpos, 32, 0, text[ZONE]);

  007d2	b8 04 00 00 00	 mov	 eax, 4
  007d7	6b c8 17	 imul	 ecx, eax, 23
  007da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  007e0	52		 push	 edx
  007e1	6a 00		 push	 0
  007e3	6a 20		 push	 32			; 00000020H
  007e5	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  007e8	50		 push	 eax
  007e9	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  007ee	83 c4 10	 add	 esp, 16			; 00000010H
$LN46@ST_drawLev:

; 888  : 
; 889  : //		V_DrawCenteredString(subttlxpos, 152+48, 0, subttl);
; 890  : 	}

  007f1	e9 d1 01 00 00	 jmp	 $LN52@ST_drawLev
$LN43@ST_drawLev:

; 891  : 	else if (timeinmap == 109)

  007f6	83 3d 00 00 00
	00 6d		 cmp	 DWORD PTR _timeinmap, 109 ; 0000006dH
  007fd	0f 85 8f 00 00
	00		 jne	 $LN47@ST_drawLev

; 892  : 	{
; 893  : 		if (!nonumber)

  00803	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  00807	75 35		 jne	 SHORT $LN49@ST_drawLev

; 894  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(8*vid.fdupy), V_NOSCALESTART, ttlnum);

  00809	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  0080e	50		 push	 eax
  0080f	68 00 00 01 00	 push	 65536			; 00010000H
  00814	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0081c	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00824	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00828	51		 push	 ecx
  00829	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  0082c	52		 push	 edx
  0082d	e8 00 00 00 00	 call	 _SCX
  00832	83 c4 04	 add	 esp, 4
  00835	50		 push	 eax
  00836	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0083b	83 c4 10	 add	 esp, 16			; 00000010H
$LN49@ST_drawLev:

; 895  : 		V_DrawLevelTitle(lvlttlxpos, 176, 0, lvlttl);

  0083e	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  00841	50		 push	 eax
  00842	6a 00		 push	 0
  00844	68 b0 00 00 00	 push	 176			; 000000b0H
  00849	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  0084c	51		 push	 ecx
  0084d	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00852	83 c4 10	 add	 esp, 16			; 00000010H

; 896  : 
; 897  : 		if (!mapheaderinfo[gamemap-1].nozone)

  00855	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0085c	83 e8 01	 sub	 eax, 1
  0085f	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00865	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  0086c	75 1f		 jne	 SHORT $LN50@ST_drawLev

; 898  : 			V_DrawLevelTitle(zonexpos, 8, 0, text[ZONE]);

  0086e	b8 04 00 00 00	 mov	 eax, 4
  00873	6b c8 17	 imul	 ecx, eax, 23
  00876	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0087c	52		 push	 edx
  0087d	6a 00		 push	 0
  0087f	6a 08		 push	 8
  00881	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  00884	50		 push	 eax
  00885	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  0088a	83 c4 10	 add	 esp, 16			; 00000010H
$LN50@ST_drawLev:

; 899  : 
; 900  : 		//V_DrawCenteredString(subttlxpos, 176+48, 0, subttl);
; 901  : 	}

  0088d	e9 35 01 00 00	 jmp	 $LN52@ST_drawLev
$LN47@ST_drawLev:

; 902  : 	else if (timeinmap == 110)

  00892	83 3d 00 00 00
	00 6e		 cmp	 DWORD PTR _timeinmap, 110 ; 0000006eH
  00899	0f 85 8a 00 00
	00		 jne	 $LN51@ST_drawLev

; 903  : 	{
; 904  : 		if (!nonumber)

  0089f	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  008a3	75 30		 jne	 SHORT $LN53@ST_drawLev

; 905  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(0*vid.fdupy), V_NOSCALESTART, ttlnum);

  008a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  008aa	50		 push	 eax
  008ab	68 00 00 01 00	 push	 65536			; 00010000H
  008b0	0f 57 c0	 xorps	 xmm0, xmm0
  008b3	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  008bb	f3 0f 2c c8	 cvttss2si ecx, xmm0
  008bf	51		 push	 ecx
  008c0	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  008c3	52		 push	 edx
  008c4	e8 00 00 00 00	 call	 _SCX
  008c9	83 c4 04	 add	 esp, 4
  008cc	50		 push	 eax
  008cd	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  008d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN53@ST_drawLev:

; 906  : 		V_DrawLevelTitle(lvlttlxpos, 200, 0, lvlttl);

  008d5	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  008d8	50		 push	 eax
  008d9	6a 00		 push	 0
  008db	68 c8 00 00 00	 push	 200			; 000000c8H
  008e0	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  008e3	51		 push	 ecx
  008e4	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  008e9	83 c4 10	 add	 esp, 16			; 00000010H

; 907  : 
; 908  : 		if (!mapheaderinfo[gamemap-1].nozone)

  008ec	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  008f3	83 e8 01	 sub	 eax, 1
  008f6	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  008fc	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  00903	75 1f		 jne	 SHORT $LN54@ST_drawLev

; 909  : 			V_DrawLevelTitle(zonexpos, 0, 0, text[ZONE]);

  00905	b8 04 00 00 00	 mov	 eax, 4
  0090a	6b c8 17	 imul	 ecx, eax, 23
  0090d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00913	52		 push	 edx
  00914	6a 00		 push	 0
  00916	6a 00		 push	 0
  00918	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  0091b	50		 push	 eax
  0091c	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00921	83 c4 10	 add	 esp, 16			; 00000010H
$LN54@ST_drawLev:

; 910  : 
; 911  : 		//V_DrawCenteredString(subttlxpos, 200+48, 0, subttl);
; 912  : 	}

  00924	e9 9e 00 00 00	 jmp	 $LN52@ST_drawLev
$LN51@ST_drawLev:

; 913  : 	else
; 914  : 	{
; 915  : 		if (!nonumber)

  00929	83 7d e0 00	 cmp	 DWORD PTR _nonumber$[ebp], 0
  0092d	75 35		 jne	 SHORT $LN55@ST_drawLev

; 916  : 			V_DrawScaledPatch(SCX(ttlnumxpos), (INT32)(104*vid.fdupy), V_NOSCALESTART, ttlnum);

  0092f	a1 00 00 00 00	 mov	 eax, DWORD PTR _ttlnum
  00934	50		 push	 eax
  00935	68 00 00 01 00	 push	 65536			; 00010000H
  0093a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42d00000
  00942	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  0094a	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0094e	51		 push	 ecx
  0094f	8b 55 ec	 mov	 edx, DWORD PTR _ttlnumxpos$[ebp]
  00952	52		 push	 edx
  00953	e8 00 00 00 00	 call	 _SCX
  00958	83 c4 04	 add	 esp, 4
  0095b	50		 push	 eax
  0095c	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00961	83 c4 10	 add	 esp, 16			; 00000010H
$LN55@ST_drawLev:

; 917  : 		V_DrawLevelTitle(lvlttlxpos, 80, 0, lvlttl);

  00964	8b 45 fc	 mov	 eax, DWORD PTR _lvlttl$[ebp]
  00967	50		 push	 eax
  00968	6a 00		 push	 0
  0096a	6a 50		 push	 80			; 00000050H
  0096c	8b 4d f4	 mov	 ecx, DWORD PTR _lvlttlxpos$[ebp]
  0096f	51		 push	 ecx
  00970	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  00975	83 c4 10	 add	 esp, 16			; 00000010H

; 918  : 
; 919  : 		if (!mapheaderinfo[gamemap-1].nozone)

  00978	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0097f	83 e8 01	 sub	 eax, 1
  00982	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00988	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  0098f	75 1f		 jne	 SHORT $LN56@ST_drawLev

; 920  : 			V_DrawLevelTitle(zonexpos, 104, 0, text[ZONE]);

  00991	b8 04 00 00 00	 mov	 eax, 4
  00996	6b c8 17	 imul	 ecx, eax, 23
  00999	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0099f	52		 push	 edx
  009a0	6a 00		 push	 0
  009a2	6a 68		 push	 104			; 00000068H
  009a4	8b 45 e8	 mov	 eax, DWORD PTR _zonexpos$[ebp]
  009a7	50		 push	 eax
  009a8	e8 00 00 00 00	 call	 _V_DrawLevelTitle
  009ad	83 c4 10	 add	 esp, 16			; 00000010H
$LN56@ST_drawLev:

; 921  : 
; 922  : 		V_DrawCenteredString(subttlxpos, 80+48, 0, subttl);

  009b0	8b 45 f8	 mov	 eax, DWORD PTR _subttl$[ebp]
  009b3	50		 push	 eax
  009b4	6a 00		 push	 0
  009b6	68 80 00 00 00	 push	 128			; 00000080H
  009bb	8b 4d f0	 mov	 ecx, DWORD PTR _subttlxpos$[ebp]
  009be	51		 push	 ecx
  009bf	e8 00 00 00 00	 call	 _V_DrawCenteredString
  009c4	83 c4 10	 add	 esp, 16			; 00000010H
$LN52@ST_drawLev:

; 923  : 	}
; 924  : #undef ZONE
; 925  : }

  009c7	5f		 pop	 edi
  009c8	5e		 pop	 esi
  009c9	5b		 pop	 ebx
  009ca	8b e5		 mov	 esp, ebp
  009cc	5d		 pop	 ebp
  009cd	c3		 ret	 0
_ST_drawLevelTitle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_drawDebugInfo
_TEXT	SEGMENT
_sscoreadd$ = -832					; size = 33
_sjumping$ = -796					; size = 33
_smfstartdash$ = -760					; size = 33
_smfspinning$ = -724					; size = 33
_smfjumped$ = -688					; size = 33
_sunderwater$ = -652					; size = 33
_sangle$ = -616						; size = 33
_sz$ = -580						; size = 33
_sy$ = -544						; size = 33
_sx$ = -508						; size = 33
_sjumpfact$ = -472					; size = 33
_sdedtimer$ = -436					; size = 33
_sstrcolor$ = -400					; size = 33
_scharflags$ = -364					; size = 33
_scharsped$ = -328					; size = 33
_scability2$ = -292					; size = 33
_scability$ = -256					; size = 33
_spmomz$ = -220						; size = 33
_sfloorz$ = -184					; size = 33
_sspeed$ = -148						; size = 33
_smomz$ = -112						; size = 33
_smomy$ = -76						; size = 33
_smomx$ = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_ST_drawDebugInfo PROC					; COMDAT

; 647  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 03 00
	00		 sub	 esp, 960		; 000003c0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 648  : 	char smomx[33];
; 649  : 	char smomy[33];
; 650  : 	char smomz[33];
; 651  : 	char sspeed[33];
; 652  : 	char sfloorz[33];
; 653  : 	char spmomz[33];
; 654  : 	char scability[33];
; 655  : 	char scability2[33];
; 656  : 	char scharsped[33];
; 657  : 	char scharflags[33];
; 658  : 	char sstrcolor[33];
; 659  : 	char sdedtimer[33];
; 660  : 	char sjumpfact[33];
; 661  : 	char sx[33];
; 662  : 	char sy[33];
; 663  : 	char sz[33];
; 664  : 	char sangle[33];
; 665  : 	char sunderwater[33];
; 666  : 	char smfjumped[33];
; 667  : 	char smfspinning[33];
; 668  : 	char smfstartdash[33];
; 669  : 	char sjumping[33];
; 670  : 	char sscoreadd[33];
; 671  : 
; 672  : 	if (!stplyr->mo)

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	75 05		 jne	 SHORT $LN2@ST_drawDeb

; 673  : 		return;

  00020	e9 5a 07 00 00	 jmp	 $LN1@ST_drawDeb
$LN2@ST_drawDeb:

; 674  : 
; 675  : 	sprintf(smomx, "%d", stplyr->rmomx>>FRACBITS);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0002a	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  00030	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00033	51		 push	 ecx
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00039	8d 55 d8	 lea	 edx, DWORD PTR _smomx$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _sprintf
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 676  : 	sprintf(smomy, "%d", stplyr->rmomy>>FRACBITS);

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0004a	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [eax+328]
  00050	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00053	51		 push	 ecx
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00059	8d 55 b4	 lea	 edx, DWORD PTR _smomy$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _sprintf
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 677  : 	sprintf(smomz, "%d", stplyr->mo->momz>>FRACBITS);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0006f	c1 fa 10	 sar	 edx, 16			; 00000010H
  00072	52		 push	 edx
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00078	8d 45 90	 lea	 eax, DWORD PTR _smomz$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _sprintf
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 678  : 	sprintf(sspeed, "%d", stplyr->speed);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00089	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  0008f	51		 push	 ecx
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00095	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR _sspeed$[ebp]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 _sprintf
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 679  : 	sprintf(sfloorz, "%d", stplyr->mo->floorz>>FRACBITS);

  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000ae	c1 fa 10	 sar	 edx, 16			; 00000010H
  000b1	52		 push	 edx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000b7	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _sfloorz$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _sprintf
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 680  : 	sprintf(spmomz, "%d", stplyr->mo->ceilingz>>FRACBITS);

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000d0	c1 fa 10	 sar	 edx, 16			; 00000010H
  000d3	52		 push	 edx
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000d9	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _spmomz$[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _sprintf
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 681  : 	sprintf(scability, "%d", stplyr->charability);

  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  000ed	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  000f3	51		 push	 ecx
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000f9	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _scability$[ebp]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 _sprintf
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH

; 682  : 	sprintf(scability2, "%d", stplyr->charability2);

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0010d	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  00113	51		 push	 ecx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00119	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _scability2$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 _sprintf
  00125	83 c4 0c	 add	 esp, 12			; 0000000cH

; 683  : 	sprintf(scharsped, "%d", stplyr->normalspeed);

  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0012d	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  00133	51		 push	 ecx
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00139	8d 95 b8 fe ff
	ff		 lea	 edx, DWORD PTR _scharsped$[ebp]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 _sprintf
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH

; 684  : 	sprintf(scharflags, "%d", stplyr->charflags);

  00148	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0014d	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00153	51		 push	 ecx
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00159	8d 95 94 fe ff
	ff		 lea	 edx, DWORD PTR _scharflags$[ebp]
  0015f	52		 push	 edx
  00160	e8 00 00 00 00	 call	 _sprintf
  00165	83 c4 0c	 add	 esp, 12			; 0000000cH

; 685  : #ifdef TRANSFIX
; 686  : 	sprintf(sstrcolor, "%d", atoi(skins[stplyr->skin].starttranscolor));

  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0016d	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR [eax+184], 236
  00177	81 c1 7d 00 00
	00		 add	 ecx, OFFSET _skins+125
  0017d	51		 push	 ecx
  0017e	e8 00 00 00 00	 call	 _atoi
  00183	83 c4 04	 add	 esp, 4
  00186	50		 push	 eax
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0018c	8d 95 70 fe ff
	ff		 lea	 edx, DWORD PTR _sstrcolor$[ebp]
  00192	52		 push	 edx
  00193	e8 00 00 00 00	 call	 _sprintf
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 687  : #else
; 688  : 	sprintf(sstrcolor, "%d", stplyr->starttranscolor);
; 689  : #endif
; 690  : 	sprintf(sdedtimer, "%d", stplyr->deadtimer);

  0019b	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  001a0	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  001a6	51		 push	 ecx
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001ac	8d 95 4c fe ff
	ff		 lea	 edx, DWORD PTR _sdedtimer$[ebp]
  001b2	52		 push	 edx
  001b3	e8 00 00 00 00	 call	 _sprintf
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 691  : 	sprintf(sjumpfact, "%d", stplyr->jumpfactor);

  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  001c0	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  001c6	51		 push	 ecx
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001cc	8d 95 28 fe ff
	ff		 lea	 edx, DWORD PTR _sjumpfact$[ebp]
  001d2	52		 push	 edx
  001d3	e8 00 00 00 00	 call	 _sprintf
  001d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 692  : 	sprintf(sx, "%d", stplyr->mo->x>>FRACBITS);

  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  001e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001e5	c1 fa 10	 sar	 edx, 16			; 00000010H
  001e8	52		 push	 edx
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001ee	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _sx$[ebp]
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 _sprintf
  001fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 693  : 	sprintf(sy, "%d", stplyr->mo->y>>FRACBITS);

  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00202	8b 08		 mov	 ecx, DWORD PTR [eax]
  00204	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00207	c1 fa 10	 sar	 edx, 16			; 00000010H
  0020a	52		 push	 edx
  0020b	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00210	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _sy$[ebp]
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 _sprintf
  0021c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 694  : 	sprintf(sz, "%d", stplyr->mo->z>>FRACBITS);

  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00229	c1 fa 10	 sar	 edx, 16			; 00000010H
  0022c	52		 push	 edx
  0022d	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00232	8d 85 bc fd ff
	ff		 lea	 eax, DWORD PTR _sz$[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 _sprintf
  0023e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 695  : 	sprintf(sangle, "%d", stplyr->mo->angle>>FRACBITS);

  00241	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00246	8b 08		 mov	 ecx, DWORD PTR [eax]
  00248	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0024b	c1 ea 10	 shr	 edx, 16			; 00000010H
  0024e	52		 push	 edx
  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00254	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _sangle$[ebp]
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 _sprintf
  00260	83 c4 0c	 add	 esp, 12			; 0000000cH

; 696  : 	sprintf(sunderwater, "%d", stplyr->powers[pw_underwater]);

  00263	b8 04 00 00 00	 mov	 eax, 4
  00268	6b c8 06	 imul	 ecx, eax, 6
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00271	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00275	50		 push	 eax
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0027b	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR _sunderwater$[ebp]
  00281	51		 push	 ecx
  00282	e8 00 00 00 00	 call	 _sprintf
  00287	83 c4 0c	 add	 esp, 12			; 0000000cH

; 697  : 	sprintf(smfjumped, "%u", (stplyr->pflags & PF_JUMPED));

  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0028f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00295	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0029b	51		 push	 ecx
  0029c	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  002a1	8d 95 50 fd ff
	ff		 lea	 edx, DWORD PTR _smfjumped$[ebp]
  002a7	52		 push	 edx
  002a8	e8 00 00 00 00	 call	 _sprintf
  002ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 698  : 	sprintf(smfspinning, "%u", (stplyr->pflags & PF_SPINNING));

  002b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002b5	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002bb	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  002c1	51		 push	 ecx
  002c2	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  002c7	8d 95 2c fd ff
	ff		 lea	 edx, DWORD PTR _smfspinning$[ebp]
  002cd	52		 push	 edx
  002ce	e8 00 00 00 00	 call	 _sprintf
  002d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 699  : 	sprintf(smfstartdash, "%u", (stplyr->pflags & PF_STARTDASH));

  002d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  002db	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  002e1	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  002e7	51		 push	 ecx
  002e8	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  002ed	8d 95 08 fd ff
	ff		 lea	 edx, DWORD PTR _smfstartdash$[ebp]
  002f3	52		 push	 edx
  002f4	e8 00 00 00 00	 call	 _sprintf
  002f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 700  : 	sprintf(sjumping, "%d", stplyr->jumping);

  002fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00301	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  00307	51		 push	 ecx
  00308	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0030d	8d 95 e4 fc ff
	ff		 lea	 edx, DWORD PTR _sjumping$[ebp]
  00313	52		 push	 edx
  00314	e8 00 00 00 00	 call	 _sprintf
  00319	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  : 	sprintf(sscoreadd, "%d", stplyr->scoreadd);

  0031c	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00321	8b 88 1c 01 00
	00		 mov	 ecx, DWORD PTR [eax+284]
  00327	51		 push	 ecx
  00328	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0032d	8d 95 c0 fc ff
	ff		 lea	 edx, DWORD PTR _sscoreadd$[ebp]
  00333	52		 push	 edx
  00334	e8 00 00 00 00	 call	 _sprintf
  00339	83 c4 0c	 add	 esp, 12			; 0000000cH

; 702  : 	V_DrawString(248, 0, 0, "MOMX =");

  0033c	68 00 00 00 00	 push	 OFFSET ??_C@_06EFDODJGK@MOMX?5?$DN@
  00341	6a 00		 push	 0
  00343	6a 00		 push	 0
  00345	68 f8 00 00 00	 push	 248			; 000000f8H
  0034a	e8 00 00 00 00	 call	 _V_DrawString
  0034f	83 c4 10	 add	 esp, 16			; 00000010H

; 703  : 	V_DrawString(296, 0, 0, smomx);

  00352	8d 45 d8	 lea	 eax, DWORD PTR _smomx$[ebp]
  00355	50		 push	 eax
  00356	6a 00		 push	 0
  00358	6a 00		 push	 0
  0035a	68 28 01 00 00	 push	 296			; 00000128H
  0035f	e8 00 00 00 00	 call	 _V_DrawString
  00364	83 c4 10	 add	 esp, 16			; 00000010H

; 704  : 	V_DrawString(248, 8, 0, "MOMY =");

  00367	68 00 00 00 00	 push	 OFFSET ??_C@_06PNICFOAP@MOMY?5?$DN@
  0036c	6a 00		 push	 0
  0036e	6a 08		 push	 8
  00370	68 f8 00 00 00	 push	 248			; 000000f8H
  00375	e8 00 00 00 00	 call	 _V_DrawString
  0037a	83 c4 10	 add	 esp, 16			; 00000010H

; 705  : 	V_DrawString(296, 8, 0, smomy);

  0037d	8d 45 b4	 lea	 eax, DWORD PTR _smomy$[ebp]
  00380	50		 push	 eax
  00381	6a 00		 push	 0
  00383	6a 08		 push	 8
  00385	68 28 01 00 00	 push	 296			; 00000128H
  0038a	e8 00 00 00 00	 call	 _V_DrawString
  0038f	83 c4 10	 add	 esp, 16			; 00000010H

; 706  : 	V_DrawString(248, 16, 0, "MOMZ =");

  00392	68 00 00 00 00	 push	 OFFSET ??_C@_06OPDHPBOB@MOMZ?5?$DN@
  00397	6a 00		 push	 0
  00399	6a 10		 push	 16			; 00000010H
  0039b	68 f8 00 00 00	 push	 248			; 000000f8H
  003a0	e8 00 00 00 00	 call	 _V_DrawString
  003a5	83 c4 10	 add	 esp, 16			; 00000010H

; 707  : 	V_DrawString(296, 16, 0, smomz);

  003a8	8d 45 90	 lea	 eax, DWORD PTR _smomz$[ebp]
  003ab	50		 push	 eax
  003ac	6a 00		 push	 0
  003ae	6a 10		 push	 16			; 00000010H
  003b0	68 28 01 00 00	 push	 296			; 00000128H
  003b5	e8 00 00 00 00	 call	 _V_DrawString
  003ba	83 c4 10	 add	 esp, 16			; 00000010H

; 708  : 	V_DrawString(240, 24, 0, "SPEED =");

  003bd	68 00 00 00 00	 push	 OFFSET ??_C@_07OLPELANG@SPEED?5?$DN@
  003c2	6a 00		 push	 0
  003c4	6a 18		 push	 24			; 00000018H
  003c6	68 f0 00 00 00	 push	 240			; 000000f0H
  003cb	e8 00 00 00 00	 call	 _V_DrawString
  003d0	83 c4 10	 add	 esp, 16			; 00000010H

; 709  : 	V_DrawString(296, 24, 0, sspeed);

  003d3	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _sspeed$[ebp]
  003d9	50		 push	 eax
  003da	6a 00		 push	 0
  003dc	6a 18		 push	 24			; 00000018H
  003de	68 28 01 00 00	 push	 296			; 00000128H
  003e3	e8 00 00 00 00	 call	 _V_DrawString
  003e8	83 c4 10	 add	 esp, 16			; 00000010H

; 710  : 	V_DrawString(232, 32, 0, "FLOORZ=");

  003eb	68 00 00 00 00	 push	 OFFSET ??_C@_07LIOOKHCB@FLOORZ?$DN@
  003f0	6a 00		 push	 0
  003f2	6a 20		 push	 32			; 00000020H
  003f4	68 e8 00 00 00	 push	 232			; 000000e8H
  003f9	e8 00 00 00 00	 call	 _V_DrawString
  003fe	83 c4 10	 add	 esp, 16			; 00000010H

; 711  : 	V_DrawString(288, 32, 0, sfloorz);

  00401	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _sfloorz$[ebp]
  00407	50		 push	 eax
  00408	6a 00		 push	 0
  0040a	6a 20		 push	 32			; 00000020H
  0040c	68 20 01 00 00	 push	 288			; 00000120H
  00411	e8 00 00 00 00	 call	 _V_DrawString
  00416	83 c4 10	 add	 esp, 16			; 00000010H

; 712  : 	V_DrawString(240, 40, 0, "CEILZ =");

  00419	68 00 00 00 00	 push	 OFFSET ??_C@_07GILNLADC@CEILZ?5?$DN@
  0041e	6a 00		 push	 0
  00420	6a 28		 push	 40			; 00000028H
  00422	68 f0 00 00 00	 push	 240			; 000000f0H
  00427	e8 00 00 00 00	 call	 _V_DrawString
  0042c	83 c4 10	 add	 esp, 16			; 00000010H

; 713  : 	V_DrawString(296, 40, 0, spmomz);

  0042f	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _spmomz$[ebp]
  00435	50		 push	 eax
  00436	6a 00		 push	 0
  00438	6a 28		 push	 40			; 00000028H
  0043a	68 28 01 00 00	 push	 296			; 00000128H
  0043f	e8 00 00 00 00	 call	 _V_DrawString
  00444	83 c4 10	 add	 esp, 16			; 00000010H

; 714  : 	V_DrawString(216, 48, 0, "CA =");

  00447	68 00 00 00 00	 push	 OFFSET ??_C@_04FHIDBLHN@CA?5?$DN@
  0044c	6a 00		 push	 0
  0044e	6a 30		 push	 48			; 00000030H
  00450	68 d8 00 00 00	 push	 216			; 000000d8H
  00455	e8 00 00 00 00	 call	 _V_DrawString
  0045a	83 c4 10	 add	 esp, 16			; 00000010H

; 715  : 	V_DrawString(248, 48, 0, scability);

  0045d	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _scability$[ebp]
  00463	50		 push	 eax
  00464	6a 00		 push	 0
  00466	6a 30		 push	 48			; 00000030H
  00468	68 f8 00 00 00	 push	 248			; 000000f8H
  0046d	e8 00 00 00 00	 call	 _V_DrawString
  00472	83 c4 10	 add	 esp, 16			; 00000010H

; 716  : 	V_DrawString(264, 48, 0, "CA2 =");

  00475	68 00 00 00 00	 push	 OFFSET ??_C@_05KKOFGJBD@CA2?5?$DN@
  0047a	6a 00		 push	 0
  0047c	6a 30		 push	 48			; 00000030H
  0047e	68 08 01 00 00	 push	 264			; 00000108H
  00483	e8 00 00 00 00	 call	 _V_DrawString
  00488	83 c4 10	 add	 esp, 16			; 00000010H

; 717  : 	V_DrawString(304, 48, 0, scability2);

  0048b	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _scability2$[ebp]
  00491	50		 push	 eax
  00492	6a 00		 push	 0
  00494	6a 30		 push	 48			; 00000030H
  00496	68 30 01 00 00	 push	 304			; 00000130H
  0049b	e8 00 00 00 00	 call	 _V_DrawString
  004a0	83 c4 10	 add	 esp, 16			; 00000010H

; 718  : 	V_DrawString(216, 56, 0, "CHARSPED =");

  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EACGHIIG@CHARSPED?5?$DN@
  004a8	6a 00		 push	 0
  004aa	6a 38		 push	 56			; 00000038H
  004ac	68 d8 00 00 00	 push	 216			; 000000d8H
  004b1	e8 00 00 00 00	 call	 _V_DrawString
  004b6	83 c4 10	 add	 esp, 16			; 00000010H

; 719  : 	V_DrawString(296, 56, 0, scharsped);

  004b9	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _scharsped$[ebp]
  004bf	50		 push	 eax
  004c0	6a 00		 push	 0
  004c2	6a 38		 push	 56			; 00000038H
  004c4	68 28 01 00 00	 push	 296			; 00000128H
  004c9	e8 00 00 00 00	 call	 _V_DrawString
  004ce	83 c4 10	 add	 esp, 16			; 00000010H

; 720  : 	V_DrawString(216, 64, 0, "CHARFLGS =");

  004d1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LGNKDFEJ@CHARFLGS?5?$DN@
  004d6	6a 00		 push	 0
  004d8	6a 40		 push	 64			; 00000040H
  004da	68 d8 00 00 00	 push	 216			; 000000d8H
  004df	e8 00 00 00 00	 call	 _V_DrawString
  004e4	83 c4 10	 add	 esp, 16			; 00000010H

; 721  : 	V_DrawString(296, 64, 0, scharflags);

  004e7	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _scharflags$[ebp]
  004ed	50		 push	 eax
  004ee	6a 00		 push	 0
  004f0	6a 40		 push	 64			; 00000040H
  004f2	68 28 01 00 00	 push	 296			; 00000128H
  004f7	e8 00 00 00 00	 call	 _V_DrawString
  004fc	83 c4 10	 add	 esp, 16			; 00000010H

; 722  : 	V_DrawString(216, 72, 0, "STRCOLOR =");

  004ff	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BNLGLGJC@STRCOLOR?5?$DN@
  00504	6a 00		 push	 0
  00506	6a 48		 push	 72			; 00000048H
  00508	68 d8 00 00 00	 push	 216			; 000000d8H
  0050d	e8 00 00 00 00	 call	 _V_DrawString
  00512	83 c4 10	 add	 esp, 16			; 00000010H

; 723  : 	V_DrawString(296, 72, 0, sstrcolor);

  00515	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _sstrcolor$[ebp]
  0051b	50		 push	 eax
  0051c	6a 00		 push	 0
  0051e	6a 48		 push	 72			; 00000048H
  00520	68 28 01 00 00	 push	 296			; 00000128H
  00525	e8 00 00 00 00	 call	 _V_DrawString
  0052a	83 c4 10	 add	 esp, 16			; 00000010H

; 724  : 	V_DrawString(216, 88, 0, "DEDTIMER =");

  0052d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BJIPHAPL@DEDTIMER?5?$DN@
  00532	6a 00		 push	 0
  00534	6a 58		 push	 88			; 00000058H
  00536	68 d8 00 00 00	 push	 216			; 000000d8H
  0053b	e8 00 00 00 00	 call	 _V_DrawString
  00540	83 c4 10	 add	 esp, 16			; 00000010H

; 725  : 	V_DrawString(296, 88, 0, sdedtimer);

  00543	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _sdedtimer$[ebp]
  00549	50		 push	 eax
  0054a	6a 00		 push	 0
  0054c	6a 58		 push	 88			; 00000058H
  0054e	68 28 01 00 00	 push	 296			; 00000128H
  00553	e8 00 00 00 00	 call	 _V_DrawString
  00558	83 c4 10	 add	 esp, 16			; 00000010H

; 726  : 	V_DrawString(216, 96, 0, "JUMPFACT =");

  0055b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPBPHIFK@JUMPFACT?5?$DN@
  00560	6a 00		 push	 0
  00562	6a 60		 push	 96			; 00000060H
  00564	68 d8 00 00 00	 push	 216			; 000000d8H
  00569	e8 00 00 00 00	 call	 _V_DrawString
  0056e	83 c4 10	 add	 esp, 16			; 00000010H

; 727  : 	V_DrawString(296, 96, 0, sjumpfact);

  00571	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _sjumpfact$[ebp]
  00577	50		 push	 eax
  00578	6a 00		 push	 0
  0057a	6a 60		 push	 96			; 00000060H
  0057c	68 28 01 00 00	 push	 296			; 00000128H
  00581	e8 00 00 00 00	 call	 _V_DrawString
  00586	83 c4 10	 add	 esp, 16			; 00000010H

; 728  : 	V_DrawString(240, 104, 0, "X =");

  00589	68 00 00 00 00	 push	 OFFSET ??_C@_03ICKHAJPA@X?5?$DN@
  0058e	6a 00		 push	 0
  00590	6a 68		 push	 104			; 00000068H
  00592	68 f0 00 00 00	 push	 240			; 000000f0H
  00597	e8 00 00 00 00	 call	 _V_DrawString
  0059c	83 c4 10	 add	 esp, 16			; 00000010H

; 729  : 	V_DrawString(264, 104, 0, sx);

  0059f	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _sx$[ebp]
  005a5	50		 push	 eax
  005a6	6a 00		 push	 0
  005a8	6a 68		 push	 104			; 00000068H
  005aa	68 08 01 00 00	 push	 264			; 00000108H
  005af	e8 00 00 00 00	 call	 _V_DrawString
  005b4	83 c4 10	 add	 esp, 16			; 00000010H

; 730  : 	V_DrawString(240, 112, 0, "Y =");

  005b7	68 00 00 00 00	 push	 OFFSET ??_C@_03DKBLGOJF@Y?5?$DN@
  005bc	6a 00		 push	 0
  005be	6a 70		 push	 112			; 00000070H
  005c0	68 f0 00 00 00	 push	 240			; 000000f0H
  005c5	e8 00 00 00 00	 call	 _V_DrawString
  005ca	83 c4 10	 add	 esp, 16			; 00000010H

; 731  : 	V_DrawString(264, 112, 0, sy);

  005cd	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _sy$[ebp]
  005d3	50		 push	 eax
  005d4	6a 00		 push	 0
  005d6	6a 70		 push	 112			; 00000070H
  005d8	68 08 01 00 00	 push	 264			; 00000108H
  005dd	e8 00 00 00 00	 call	 _V_DrawString
  005e2	83 c4 10	 add	 esp, 16			; 00000010H

; 732  : 	V_DrawString(240, 120, 0, "Z =");

  005e5	68 00 00 00 00	 push	 OFFSET ??_C@_03CIKOMBHL@Z?5?$DN@
  005ea	6a 00		 push	 0
  005ec	6a 78		 push	 120			; 00000078H
  005ee	68 f0 00 00 00	 push	 240			; 000000f0H
  005f3	e8 00 00 00 00	 call	 _V_DrawString
  005f8	83 c4 10	 add	 esp, 16			; 00000010H

; 733  : 	V_DrawString(264, 120, 0, sz);

  005fb	8d 85 bc fd ff
	ff		 lea	 eax, DWORD PTR _sz$[ebp]
  00601	50		 push	 eax
  00602	6a 00		 push	 0
  00604	6a 78		 push	 120			; 00000078H
  00606	68 08 01 00 00	 push	 264			; 00000108H
  0060b	e8 00 00 00 00	 call	 _V_DrawString
  00610	83 c4 10	 add	 esp, 16			; 00000010H

; 734  : 	V_DrawString(216, 128, 0, "Angle =");

  00613	68 00 00 00 00	 push	 OFFSET ??_C@_07LDANHJJM@Angle?5?$DN@
  00618	6a 00		 push	 0
  0061a	68 80 00 00 00	 push	 128			; 00000080H
  0061f	68 d8 00 00 00	 push	 216			; 000000d8H
  00624	e8 00 00 00 00	 call	 _V_DrawString
  00629	83 c4 10	 add	 esp, 16			; 00000010H

; 735  : 	V_DrawString(272, 128, 0, sangle);

  0062c	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _sangle$[ebp]
  00632	50		 push	 eax
  00633	6a 00		 push	 0
  00635	68 80 00 00 00	 push	 128			; 00000080H
  0063a	68 10 01 00 00	 push	 272			; 00000110H
  0063f	e8 00 00 00 00	 call	 _V_DrawString
  00644	83 c4 10	 add	 esp, 16			; 00000010H

; 736  : 	V_DrawString(192, 152, 0, "Underwater =");

  00647	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PFHNENKP@Underwater?5?$DN@
  0064c	6a 00		 push	 0
  0064e	68 98 00 00 00	 push	 152			; 00000098H
  00653	68 c0 00 00 00	 push	 192			; 000000c0H
  00658	e8 00 00 00 00	 call	 _V_DrawString
  0065d	83 c4 10	 add	 esp, 16			; 00000010H

; 737  : 	V_DrawString(288, 152, 0, sunderwater);

  00660	8d 85 74 fd ff
	ff		 lea	 eax, DWORD PTR _sunderwater$[ebp]
  00666	50		 push	 eax
  00667	6a 00		 push	 0
  00669	68 98 00 00 00	 push	 152			; 00000098H
  0066e	68 20 01 00 00	 push	 288			; 00000120H
  00673	e8 00 00 00 00	 call	 _V_DrawString
  00678	83 c4 10	 add	 esp, 16			; 00000010H

; 738  : 	V_DrawString(192, 160, 0, "MF_JUMPED =");

  0067b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PFOMPPJP@MF_JUMPED?5?$DN@
  00680	6a 00		 push	 0
  00682	68 a0 00 00 00	 push	 160			; 000000a0H
  00687	68 c0 00 00 00	 push	 192			; 000000c0H
  0068c	e8 00 00 00 00	 call	 _V_DrawString
  00691	83 c4 10	 add	 esp, 16			; 00000010H

; 739  : 	V_DrawString(288, 160, 0, smfjumped);

  00694	8d 85 50 fd ff
	ff		 lea	 eax, DWORD PTR _smfjumped$[ebp]
  0069a	50		 push	 eax
  0069b	6a 00		 push	 0
  0069d	68 a0 00 00 00	 push	 160			; 000000a0H
  006a2	68 20 01 00 00	 push	 288			; 00000120H
  006a7	e8 00 00 00 00	 call	 _V_DrawString
  006ac	83 c4 10	 add	 esp, 16			; 00000010H

; 740  : 	V_DrawString(192, 168, 0, "MF_SPINNING =");

  006af	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BCCIAPAF@MF_SPINNING?5?$DN@
  006b4	6a 00		 push	 0
  006b6	68 a8 00 00 00	 push	 168			; 000000a8H
  006bb	68 c0 00 00 00	 push	 192			; 000000c0H
  006c0	e8 00 00 00 00	 call	 _V_DrawString
  006c5	83 c4 10	 add	 esp, 16			; 00000010H

; 741  : 	V_DrawString(296, 168, 0, smfspinning);

  006c8	8d 85 2c fd ff
	ff		 lea	 eax, DWORD PTR _smfspinning$[ebp]
  006ce	50		 push	 eax
  006cf	6a 00		 push	 0
  006d1	68 a8 00 00 00	 push	 168			; 000000a8H
  006d6	68 28 01 00 00	 push	 296			; 00000128H
  006db	e8 00 00 00 00	 call	 _V_DrawString
  006e0	83 c4 10	 add	 esp, 16			; 00000010H

; 742  : 	V_DrawString(192, 176, 0, "MF_STARDASH =");

  006e3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DDPLHEF@MF_STARDASH?5?$DN@
  006e8	6a 00		 push	 0
  006ea	68 b0 00 00 00	 push	 176			; 000000b0H
  006ef	68 c0 00 00 00	 push	 192			; 000000c0H
  006f4	e8 00 00 00 00	 call	 _V_DrawString
  006f9	83 c4 10	 add	 esp, 16			; 00000010H

; 743  : 	V_DrawString(296, 176, 0, smfstartdash);

  006fc	8d 85 08 fd ff
	ff		 lea	 eax, DWORD PTR _smfstartdash$[ebp]
  00702	50		 push	 eax
  00703	6a 00		 push	 0
  00705	68 b0 00 00 00	 push	 176			; 000000b0H
  0070a	68 28 01 00 00	 push	 296			; 00000128H
  0070f	e8 00 00 00 00	 call	 _V_DrawString
  00714	83 c4 10	 add	 esp, 16			; 00000010H

; 744  : 	V_DrawString(192, 184, 0, "Jumping =");

  00717	68 00 00 00 00	 push	 OFFSET ??_C@_09HFPCLFGB@Jumping?5?$DN@
  0071c	6a 00		 push	 0
  0071e	68 b8 00 00 00	 push	 184			; 000000b8H
  00723	68 c0 00 00 00	 push	 192			; 000000c0H
  00728	e8 00 00 00 00	 call	 _V_DrawString
  0072d	83 c4 10	 add	 esp, 16			; 00000010H

; 745  : 	V_DrawString(288, 184, 0, sjumping);

  00730	8d 85 e4 fc ff
	ff		 lea	 eax, DWORD PTR _sjumping$[ebp]
  00736	50		 push	 eax
  00737	6a 00		 push	 0
  00739	68 b8 00 00 00	 push	 184			; 000000b8H
  0073e	68 20 01 00 00	 push	 288			; 00000120H
  00743	e8 00 00 00 00	 call	 _V_DrawString
  00748	83 c4 10	 add	 esp, 16			; 00000010H

; 746  : 	V_DrawString(192, 192, 0, "Scoreadd =");

  0074b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LCCOJCOH@Scoreadd?5?$DN@
  00750	6a 00		 push	 0
  00752	68 c0 00 00 00	 push	 192			; 000000c0H
  00757	68 c0 00 00 00	 push	 192			; 000000c0H
  0075c	e8 00 00 00 00	 call	 _V_DrawString
  00761	83 c4 10	 add	 esp, 16			; 00000010H

; 747  : 	V_DrawString(288, 192, 0, sscoreadd);

  00764	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR _sscoreadd$[ebp]
  0076a	50		 push	 eax
  0076b	6a 00		 push	 0
  0076d	68 c0 00 00 00	 push	 192			; 000000c0H
  00772	68 20 01 00 00	 push	 288			; 00000120H
  00777	e8 00 00 00 00	 call	 _V_DrawString
  0077c	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@ST_drawDeb:

; 748  : }

  0077f	5f		 pop	 edi
  00780	5e		 pop	 esi
  00781	5b		 pop	 ebx
  00782	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00785	33 cd		 xor	 ecx, ebp
  00787	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0078c	8b e5		 mov	 esp, ebp
  0078e	5d		 pop	 ebp
  0078f	c3		 ret	 0
_ST_drawDebugInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_DrawNightsOverlayNum
_TEXT	SEGMENT
_colormap$ = -8						; size = 4
_w$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_num$ = 16						; size = 4
_numpat$ = 20						; size = 4
_colornum$ = 24						; size = 4
_ST_DrawNightsOverlayNum PROC				; COMDAT

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 615  : 	INT32 w = SHORT(numpat[0]->width);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 14	 mov	 edx, DWORD PTR _numpat$[ebp]
  00014	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00017	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0001a	89 4d fc	 mov	 DWORD PTR _w$[ebp], ecx

; 616  : 	const UINT8 *colormap;
; 617  : 
; 618  : 	if (colornum == 0)

  0001d	83 7d 18 00	 cmp	 DWORD PTR _colornum$[ebp], 0
  00021	75 0a		 jne	 SHORT $LN4@ST_DrawNig

; 619  : 		colormap = colormaps;

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _colormaps
  00028	89 45 f8	 mov	 DWORD PTR _colormap$[ebp], eax
  0002b	eb 16		 jmp	 SHORT $LN5@ST_DrawNig
$LN4@ST_DrawNig:

; 620  : 	else
; 621  : 	{
; 622  : 		// Uses the player colors.
; 623  : 		colormap = (UINT8 *)defaulttranslationtables - 256 + (colornum<<8);

  0002d	8b 45 18	 mov	 eax, DWORD PTR _colornum$[ebp]
  00030	c1 e0 08	 shl	 eax, 8
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _defaulttranslationtables
  00039	8d 94 01 00 ff
	ff ff		 lea	 edx, DWORD PTR [ecx+eax-256]
  00040	89 55 f8	 mov	 DWORD PTR _colormap$[ebp], edx
$LN5@ST_DrawNig:

; 624  : 	}
; 625  : 
; 626  : 	// special case for 0
; 627  : 	if (!num)

  00043	83 7d 10 00	 cmp	 DWORD PTR _num$[ebp], 0
  00047	75 36		 jne	 SHORT $LN6@ST_DrawNig

; 628  : 	{
; 629  : 		V_DrawMappedPatch(x - (w*vid.dupx), y, V_NOSCALESTART|V_TRANSLUCENT, numpat[0], colormap);

  00049	8b 45 f8	 mov	 eax, DWORD PTR _colormap$[ebp]
  0004c	50		 push	 eax
  0004d	b9 04 00 00 00	 mov	 ecx, 4
  00052	6b d1 00	 imul	 edx, ecx, 0
  00055	8b 45 14	 mov	 eax, DWORD PTR _numpat$[ebp]
  00058	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0005b	51		 push	 ecx
  0005c	68 00 00 41 00	 push	 4259840			; 00410000H
  00061	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00064	52		 push	 edx
  00065	8b 45 fc	 mov	 eax, DWORD PTR _w$[ebp]
  00068	0f af 05 20 00
	00 00		 imul	 eax, DWORD PTR _vid+32
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00072	2b c8		 sub	 ecx, eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  0007a	83 c4 14	 add	 esp, 20			; 00000014H

; 630  : 		return;

  0007d	eb 53		 jmp	 SHORT $LN3@ST_DrawNig
$LN6@ST_DrawNig:

; 631  : 	}
; 632  : 
; 633  : 	I_Assert(num >= 0); // this function does not draw negative numbers
; 634  : 
; 635  : 	// draw the number
; 636  : 	while (num)

  0007f	83 7d 10 00	 cmp	 DWORD PTR _num$[ebp], 0
  00083	74 4d		 je	 SHORT $LN3@ST_DrawNig

; 637  : 	{
; 638  : 		x -= (w * vid.dupx);

  00085	8b 45 fc	 mov	 eax, DWORD PTR _w$[ebp]
  00088	0f af 05 20 00
	00 00		 imul	 eax, DWORD PTR _vid+32
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00092	2b c8		 sub	 ecx, eax
  00094	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx

; 639  : 		V_DrawMappedPatch(x, y, V_NOSCALESTART|V_TRANSLUCENT, numpat[num % 10], colormap);

  00097	8b 45 f8	 mov	 eax, DWORD PTR _colormap$[ebp]
  0009a	50		 push	 eax
  0009b	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  0009e	99		 cdq
  0009f	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000a4	f7 f9		 idiv	 ecx
  000a6	8b 45 14	 mov	 eax, DWORD PTR _numpat$[ebp]
  000a9	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000ac	51		 push	 ecx
  000ad	68 00 00 41 00	 push	 4259840			; 00410000H
  000b2	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  000b5	52		 push	 edx
  000b6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  000bf	83 c4 14	 add	 esp, 20			; 00000014H

; 640  : 		num /= 10;

  000c2	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  000c5	99		 cdq
  000c6	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000cb	f7 f9		 idiv	 ecx
  000cd	89 45 10	 mov	 DWORD PTR _num$[ebp], eax

; 641  : 	}

  000d0	eb ad		 jmp	 SHORT $LN6@ST_DrawNig
$LN3@ST_DrawNig:

; 642  : 
; 643  : 	// Sorry chum, this function only draws UNSIGNED values!
; 644  : }

  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_ST_DrawNightsOverlayNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _SCX
_TEXT	SEGMENT
_x$ = 8							; size = 4
_SCX	PROC						; COMDAT

; 569  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 570  : 	return (INT32)(x * vid.fdupx);

  00009	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  0000e	f3 0f 59 05 28
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+40
  00016	f3 0f 2c c0	 cvttss2si eax, xmm0

; 571  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_SCX	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _STRINGY
_TEXT	SEGMENT
_y$ = 8							; size = 4
_STRINGY PROC						; COMDAT

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 556  : 	//31/10/99: fixed by Hurdler so it _works_ also in hardware mode
; 557  : 	// do not scale to resolution for hardware accelerated
; 558  : 	// because these modes always scale by default
; 559  : 	if (splitscreen)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00010	74 28		 je	 SHORT $LN3@STRINGY

; 560  : 	{
; 561  : 		y >>= 1;

  00012	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00015	d1 f8		 sar	 eax, 1
  00017	89 45 08	 mov	 DWORD PTR _y$[ebp], eax

; 562  : 		if (stplyr != &players[displayplayer])

  0001a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00024	05 00 00 00 00	 add	 eax, OFFSET _players
  00029	39 05 00 00 00
	00		 cmp	 DWORD PTR _stplyr, eax
  0002f	74 09		 je	 SHORT $LN3@STRINGY

; 563  : 			y += BASEVIDHEIGHT / 2;

  00031	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00034	83 c0 64	 add	 eax, 100		; 00000064H
  00037	89 45 08	 mov	 DWORD PTR _y$[ebp], eax
$LN3@STRINGY:

; 564  : 	}
; 565  : 	return y;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]

; 566  : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_STRINGY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _SCY
_TEXT	SEGMENT
_y$ = 8							; size = 4
_SCY	PROC						; COMDAT

; 540  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 541  : 	//31/10/99: fixed by Hurdler so it _works_ also in hardware mode
; 542  : 	// do not scale to resolution for hardware accelerated
; 543  : 	// because these modes always scale by default
; 544  : 	y = (INT32)(y * vid.fdupy); // scale to resolution

  00009	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  0000e	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00016	f3 0f 2c c0	 cvttss2si eax, xmm0
  0001a	89 45 08	 mov	 DWORD PTR _y$[ebp], eax

; 545  : 	if (splitscreen)

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00024	74 2f		 je	 SHORT $LN3@SCY

; 546  : 	{
; 547  : 		y >>= 1;

  00026	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00029	d1 f8		 sar	 eax, 1
  0002b	89 45 08	 mov	 DWORD PTR _y$[ebp], eax

; 548  : 		if (stplyr != &players[displayplayer])

  0002e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00038	05 00 00 00 00	 add	 eax, OFFSET _players
  0003d	39 05 00 00 00
	00		 cmp	 DWORD PTR _stplyr, eax
  00043	74 10		 je	 SHORT $LN3@SCY

; 549  : 			y += vid.height / 2;

  00045	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0004a	99		 cdq
  0004b	2b c2		 sub	 eax, edx
  0004d	d1 f8		 sar	 eax, 1
  0004f	03 45 08	 add	 eax, DWORD PTR _y$[ebp]
  00052	89 45 08	 mov	 DWORD PTR _y$[ebp], eax
$LN3@SCY:

; 550  : 	}
; 551  : 	return y;

  00055	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]

; 552  : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_SCY	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_Stop
_TEXT	SEGMENT
_ST_Stop PROC						; COMDAT

; 484  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 485  : 	if (st_stopped)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _st_stopped, 0
  00010	74 02		 je	 SHORT $LN2@ST_Stop

; 486  : 		return;

  00012	eb 14		 jmp	 SHORT $LN1@ST_Stop
$LN2@ST_Stop:

; 487  : 
; 488  : 	V_SetPalette(0);

  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 _V_SetPalette
  0001b	83 c4 04	 add	 esp, 4

; 489  : 
; 490  : 	st_stopped = true;

  0001e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _st_stopped, 1
$LN1@ST_Stop:

; 491  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_ST_Stop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_InitData
_TEXT	SEGMENT
_ST_InitData PROC					; COMDAT

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 475  : 	// 'link' the statusbar display to a player, which could be
; 476  : 	// another player than consoleplayer, for example, when you
; 477  : 	// change the view in a multiplayer demo with F12.
; 478  : 	stplyr = &players[displayplayer];

  00009	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00013	05 00 00 00 00	 add	 eax, OFFSET _players
  00018	a3 00 00 00 00	 mov	 DWORD PTR _stplyr, eax

; 479  : 
; 480  : 	st_palette = -1;

  0001d	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _st_palette, -1

; 481  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_ST_InitData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_overlayDrawer
_TEXT	SEGMENT
tv90 = -220						; size = 4
tv141 = -220						; size = 4
tv155 = -220						; size = 4
tv177 = -220						; size = 4
tv205 = -220						; size = 4
tv326 = -220						; size = 4
tv419 = -220						; size = 4
_d$1 = -152						; size = 4
_foundtoad$2 = -148					; size = 4
_mo2$3 = -144						; size = 4
_th$4 = -140						; size = 4
_name$5 = -136						; size = 22
_scountdown$6 = -112					; size = 33
_thingflags$7 = -76					; size = 8
_doomednum$8 = -68					; size = 8
_z$9 = -60						; size = 8
_y$10 = -52						; size = 8
_x$11 = -44						; size = 8
_p$12 = -36						; size = 4
_tics$13 = -32						; size = 4
_seconds$14 = -28					; size = 4
_seconds$15 = -24					; size = 4
_i$16 = -20						; size = 4
_ringscollected$17 = -16				; size = 4
_colormap$18 = -12					; size = 4
_colormap$19 = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_ST_overlayDrawer PROC					; COMDAT

; 1879 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1880 : 	// lives status
; 1881 : 	if ((gametype == GT_COOP || gametype == GT_RACE) && !(hu_showscores && (netgame || multiplayer)))

  00016	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0001d	85 c0		 test	 eax, eax
  0001f	74 10		 je	 SHORT $LN9@ST_overlay
  00021	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00028	83 f8 02	 cmp	 eax, 2
  0002b	0f 85 a9 04 00
	00		 jne	 $LN19@ST_overlay
$LN9@ST_overlay:
  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  00038	74 1a		 je	 SHORT $LN10@ST_overlay
  0003a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00041	0f 85 93 04 00
	00		 jne	 $LN19@ST_overlay
  00047	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0004e	0f 85 86 04 00
	00		 jne	 $LN19@ST_overlay
$LN10@ST_overlay:

; 1882 : 	{
; 1883 : 		if ((stplyr->powers[pw_super]) || (stplyr->pflags & PF_NIGHTSMODE))

  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	6b c8 0f	 imul	 ecx, eax, 15
  0005c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00062	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00067	75 17		 jne	 SHORT $LN13@ST_overlay
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0006e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00074	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  0007a	0f 84 5f 01 00
	00		 je	 $LN11@ST_overlay
$LN13@ST_overlay:

; 1884 : 		{
; 1885 : 			if (!stplyr->skincolor) // 'default' color

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00085	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  0008c	75 7a		 jne	 SHORT $LN14@ST_overlay

; 1886 : 			{
; 1887 : 				V_DrawSmallScaledPatch(SCX(hudinfo[HUD_LIVESPIC].x), SCY(hudinfo[HUD_LIVESPIC].y - (splitscreen ? 8 : 0)),

  0008e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00095	74 0c		 je	 SHORT $LN133@ST_overlay
  00097	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv90[ebp], 8
  000a1	eb 0a		 jmp	 SHORT $LN134@ST_overlay
$LN133@ST_overlay:
  000a3	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN134@ST_overlay:
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  000b2	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  000b8	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _superprefix[ecx*4]
  000bf	52		 push	 edx
  000c0	68 00 00 41 00	 push	 4259840			; 00410000H
  000c5	b8 08 00 00 00	 mov	 eax, 8
  000ca	c1 e0 00	 shl	 eax, 0
  000cd	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  000d3	2b 8d 24 ff ff
	ff		 sub	 ecx, DWORD PTR tv90[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 _SCY
  000df	83 c4 04	 add	 esp, 4
  000e2	50		 push	 eax
  000e3	ba 08 00 00 00	 mov	 edx, 8
  000e8	c1 e2 00	 shl	 edx, 0
  000eb	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _SCX
  000f7	83 c4 04	 add	 esp, 4
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00100	83 c4 10	 add	 esp, 16			; 00000010H

; 1888 : 					V_NOSCALESTART|V_TRANSLUCENT,superprefix[stplyr->skin]);
; 1889 : 			}

  00103	e9 d2 00 00 00	 jmp	 $LN15@ST_overlay
$LN14@ST_overlay:

; 1890 : 			else
; 1891 : 			{
; 1892 : 				const UINT8 *colormap = (UINT8 *)translationtables[stplyr->skin] - 256 + (((stplyr->powers[pw_super]) ? 15 : stplyr->skincolor)<<8);

  00108	b8 04 00 00 00	 mov	 eax, 4
  0010d	6b c8 0f	 imul	 ecx, eax, 15
  00110	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00116	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0011b	74 0c		 je	 SHORT $LN135@ST_overlay
  0011d	c7 85 24 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR tv141[ebp], 15 ; 0000000fH
  00127	eb 11		 jmp	 SHORT $LN136@ST_overlay
$LN135@ST_overlay:
  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0012e	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00134	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv141[ebp], ecx
$LN136@ST_overlay:
  0013a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  00140	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR [edx+184]
  00146	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _translationtables[eax*4]
  0014d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv141[ebp]
  00153	c1 e2 08	 shl	 edx, 8
  00156	8d 84 11 00 ff
	ff ff		 lea	 eax, DWORD PTR [ecx+edx-256]
  0015d	89 45 f8	 mov	 DWORD PTR _colormap$19[ebp], eax

; 1893 : 				V_DrawSmallMappedPatch(SCX(hudinfo[HUD_LIVESPIC].x), SCY(hudinfo[HUD_LIVESPIC].y - (splitscreen ? 8 : 0)),

  00160	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00167	74 0c		 je	 SHORT $LN137@ST_overlay
  00169	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv155[ebp], 8
  00173	eb 0a		 jmp	 SHORT $LN138@ST_overlay
$LN137@ST_overlay:
  00175	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv155[ebp], 0
$LN138@ST_overlay:
  0017f	8b 45 f8	 mov	 eax, DWORD PTR _colormap$19[ebp]
  00182	50		 push	 eax
  00183	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00189	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  0018f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _superprefix[edx*4]
  00196	50		 push	 eax
  00197	68 00 00 41 00	 push	 4259840			; 00410000H
  0019c	b9 08 00 00 00	 mov	 ecx, 8
  001a1	c1 e1 00	 shl	 ecx, 0
  001a4	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  001aa	2b 95 24 ff ff
	ff		 sub	 edx, DWORD PTR tv155[ebp]
  001b0	52		 push	 edx
  001b1	e8 00 00 00 00	 call	 _SCY
  001b6	83 c4 04	 add	 esp, 4
  001b9	50		 push	 eax
  001ba	b8 08 00 00 00	 mov	 eax, 8
  001bf	c1 e0 00	 shl	 eax, 0
  001c2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  001c8	51		 push	 ecx
  001c9	e8 00 00 00 00	 call	 _SCX
  001ce	83 c4 04	 add	 esp, 4
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  001d7	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@ST_overlay:

; 1894 : 					V_NOSCALESTART|V_TRANSLUCENT,superprefix[stplyr->skin], colormap);
; 1895 : 			}
; 1896 : 		}

  001da	e9 2c 01 00 00	 jmp	 $LN17@ST_overlay
$LN11@ST_overlay:

; 1897 : 		else
; 1898 : 		{
; 1899 : 			if (!stplyr->skincolor) // 'default' color

  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  001e4	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  001eb	75 7a		 jne	 SHORT $LN16@ST_overlay

; 1900 : 			{
; 1901 : 				V_DrawSmallScaledPatch(SCX(hudinfo[HUD_LIVESPIC].x), SCY(hudinfo[HUD_LIVESPIC].y - (splitscreen ? 8 : 0)),

  001ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  001f4	74 0c		 je	 SHORT $LN139@ST_overlay
  001f6	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv177[ebp], 8
  00200	eb 0a		 jmp	 SHORT $LN140@ST_overlay
$LN139@ST_overlay:
  00202	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv177[ebp], 0
$LN140@ST_overlay:
  0020c	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00211	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  00217	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _faceprefix[ecx*4]
  0021e	52		 push	 edx
  0021f	68 00 00 41 00	 push	 4259840			; 00410000H
  00224	b8 08 00 00 00	 mov	 eax, 8
  00229	c1 e0 00	 shl	 eax, 0
  0022c	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00232	2b 8d 24 ff ff
	ff		 sub	 ecx, DWORD PTR tv177[ebp]
  00238	51		 push	 ecx
  00239	e8 00 00 00 00	 call	 _SCY
  0023e	83 c4 04	 add	 esp, 4
  00241	50		 push	 eax
  00242	ba 08 00 00 00	 mov	 edx, 8
  00247	c1 e2 00	 shl	 edx, 0
  0024a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _SCX
  00256	83 c4 04	 add	 esp, 4
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0025f	83 c4 10	 add	 esp, 16			; 00000010H

; 1902 : 					V_NOSCALESTART|V_TRANSLUCENT,faceprefix[stplyr->skin]);
; 1903 : 			}

  00262	e9 a4 00 00 00	 jmp	 $LN17@ST_overlay
$LN16@ST_overlay:

; 1904 : 			else
; 1905 : 			{
; 1906 : 				const UINT8 *colormap = (UINT8 *)translationtables[stplyr->skin] - 256 + ((stplyr->skincolor)<<8);

  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0026c	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  00272	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _translationtables[ecx*4]
  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0027e	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00284	c1 e1 08	 shl	 ecx, 8
  00287	8d 94 0a 00 ff
	ff ff		 lea	 edx, DWORD PTR [edx+ecx-256]
  0028e	89 55 f4	 mov	 DWORD PTR _colormap$18[ebp], edx

; 1907 : 				V_DrawSmallMappedPatch(SCX(hudinfo[HUD_LIVESPIC].x), SCY(hudinfo[HUD_LIVESPIC].y - (splitscreen ? 8 : 0)),

  00291	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00298	74 0c		 je	 SHORT $LN141@ST_overlay
  0029a	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv205[ebp], 8
  002a4	eb 0a		 jmp	 SHORT $LN142@ST_overlay
$LN141@ST_overlay:
  002a6	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv205[ebp], 0
$LN142@ST_overlay:
  002b0	8b 45 f4	 mov	 eax, DWORD PTR _colormap$18[ebp]
  002b3	50		 push	 eax
  002b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  002ba	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  002c0	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _faceprefix[edx*4]
  002c7	50		 push	 eax
  002c8	68 00 00 41 00	 push	 4259840			; 00410000H
  002cd	b9 08 00 00 00	 mov	 ecx, 8
  002d2	c1 e1 00	 shl	 ecx, 0
  002d5	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  002db	2b 95 24 ff ff
	ff		 sub	 edx, DWORD PTR tv205[ebp]
  002e1	52		 push	 edx
  002e2	e8 00 00 00 00	 call	 _SCY
  002e7	83 c4 04	 add	 esp, 4
  002ea	50		 push	 eax
  002eb	b8 08 00 00 00	 mov	 eax, 8
  002f0	c1 e0 00	 shl	 eax, 0
  002f3	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  002f9	51		 push	 ecx
  002fa	e8 00 00 00 00	 call	 _SCX
  002ff	83 c4 04	 add	 esp, 4
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  00308	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@ST_overlay:

; 1908 : 					V_NOSCALESTART|V_TRANSLUCENT,faceprefix[stplyr->skin], colormap);
; 1909 : 			}
; 1910 : 		}
; 1911 : 
; 1912 : 		if (splitscreen) // raise a bit

  0030b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00312	0f 84 e8 00 00
	00		 je	 $LN18@ST_overlay

; 1913 : 		{
; 1914 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_LIVESNAME].x), SCY(hudinfo[HUD_LIVESNAME].y - 16),

  00318	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0031d	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  00323	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _facenameprefix[ecx*4]
  0032a	52		 push	 edx
  0032b	68 00 00 41 00	 push	 4259840			; 00410000H
  00330	b8 08 00 00 00	 mov	 eax, 8
  00335	6b c8 00	 imul	 ecx, eax, 0
  00338	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  0033e	83 ea 10	 sub	 edx, 16			; 00000010H
  00341	52		 push	 edx
  00342	e8 00 00 00 00	 call	 _SCY
  00347	83 c4 04	 add	 esp, 4
  0034a	50		 push	 eax
  0034b	b8 08 00 00 00	 mov	 eax, 8
  00350	6b c8 00	 imul	 ecx, eax, 0
  00353	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  00359	52		 push	 edx
  0035a	e8 00 00 00 00	 call	 _SCX
  0035f	83 c4 04	 add	 esp, 4
  00362	50		 push	 eax
  00363	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00368	83 c4 10	 add	 esp, 16			; 00000010H

; 1915 : 				V_NOSCALESTART|V_TRANSLUCENT, facenameprefix[stplyr->skin]);
; 1916 : 
; 1917 : 			// draw the number of lives
; 1918 : 			ST_DrawOverlayNum(SCX(hudinfo[HUD_LIVESNUM].x), SCY(hudinfo[HUD_LIVESNUM].y - 4), stplyr->lives, tallnum);

  0036b	68 00 00 00 00	 push	 OFFSET _tallnum
  00370	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00375	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  0037b	51		 push	 ecx
  0037c	ba 08 00 00 00	 mov	 edx, 8
  00381	d1 e2		 shl	 edx, 1
  00383	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00389	83 e8 04	 sub	 eax, 4
  0038c	50		 push	 eax
  0038d	e8 00 00 00 00	 call	 _SCY
  00392	83 c4 04	 add	 esp, 4
  00395	50		 push	 eax
  00396	b9 08 00 00 00	 mov	 ecx, 8
  0039b	d1 e1		 shl	 ecx, 1
  0039d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  003a3	52		 push	 edx
  003a4	e8 00 00 00 00	 call	 _SCX
  003a9	83 c4 04	 add	 esp, 4
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  003b2	83 c4 10	 add	 esp, 16			; 00000010H

; 1919 : 
; 1920 : 			// now draw the "x"
; 1921 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_LIVESX].x), SCY(hudinfo[HUD_LIVESX].y - 2), V_NOSCALESTART|V_TRANSLUCENT, stlivex);

  003b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _stlivex
  003ba	50		 push	 eax
  003bb	68 00 00 41 00	 push	 4259840			; 00410000H
  003c0	b9 08 00 00 00	 mov	 ecx, 8
  003c5	6b d1 03	 imul	 edx, ecx, 3
  003c8	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  003ce	83 e8 02	 sub	 eax, 2
  003d1	50		 push	 eax
  003d2	e8 00 00 00 00	 call	 _SCY
  003d7	83 c4 04	 add	 esp, 4
  003da	50		 push	 eax
  003db	b9 08 00 00 00	 mov	 ecx, 8
  003e0	6b d1 03	 imul	 edx, ecx, 3
  003e3	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  003e9	50		 push	 eax
  003ea	e8 00 00 00 00	 call	 _SCX
  003ef	83 c4 04	 add	 esp, 4
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  003f8	83 c4 10	 add	 esp, 16			; 00000010H

; 1922 : 		}

  003fb	e9 da 00 00 00	 jmp	 $LN19@ST_overlay
$LN18@ST_overlay:

; 1923 : 		else
; 1924 : 		{
; 1925 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_LIVESNAME].x), SCY(hudinfo[HUD_LIVESNAME].y),

  00400	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00405	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  0040b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _facenameprefix[ecx*4]
  00412	52		 push	 edx
  00413	68 00 00 41 00	 push	 4259840			; 00410000H
  00418	b8 08 00 00 00	 mov	 eax, 8
  0041d	6b c8 00	 imul	 ecx, eax, 0
  00420	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  00426	52		 push	 edx
  00427	e8 00 00 00 00	 call	 _SCY
  0042c	83 c4 04	 add	 esp, 4
  0042f	50		 push	 eax
  00430	b8 08 00 00 00	 mov	 eax, 8
  00435	6b c8 00	 imul	 ecx, eax, 0
  00438	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  0043e	52		 push	 edx
  0043f	e8 00 00 00 00	 call	 _SCX
  00444	83 c4 04	 add	 esp, 4
  00447	50		 push	 eax
  00448	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0044d	83 c4 10	 add	 esp, 16			; 00000010H

; 1926 : 				V_NOSCALESTART|V_TRANSLUCENT, facenameprefix[stplyr->skin]);
; 1927 : 
; 1928 : 			// draw the number of lives
; 1929 : 			ST_DrawOverlayNum(SCX(hudinfo[HUD_LIVESNUM].x), SCY(hudinfo[HUD_LIVESNUM].y), stplyr->lives, tallnum);

  00450	68 00 00 00 00	 push	 OFFSET _tallnum
  00455	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0045a	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  00460	51		 push	 ecx
  00461	ba 08 00 00 00	 mov	 edx, 8
  00466	d1 e2		 shl	 edx, 1
  00468	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  0046e	50		 push	 eax
  0046f	e8 00 00 00 00	 call	 _SCY
  00474	83 c4 04	 add	 esp, 4
  00477	50		 push	 eax
  00478	b9 08 00 00 00	 mov	 ecx, 8
  0047d	d1 e1		 shl	 ecx, 1
  0047f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  00485	52		 push	 edx
  00486	e8 00 00 00 00	 call	 _SCX
  0048b	83 c4 04	 add	 esp, 4
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00494	83 c4 10	 add	 esp, 16			; 00000010H

; 1930 : 
; 1931 : 			// now draw the "x"
; 1932 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_LIVESX].x), SCY(hudinfo[HUD_LIVESX].y), V_NOSCALESTART|V_TRANSLUCENT, stlivex);

  00497	a1 00 00 00 00	 mov	 eax, DWORD PTR _stlivex
  0049c	50		 push	 eax
  0049d	68 00 00 41 00	 push	 4259840			; 00410000H
  004a2	b9 08 00 00 00	 mov	 ecx, 8
  004a7	6b d1 03	 imul	 edx, ecx, 3
  004aa	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  004b0	50		 push	 eax
  004b1	e8 00 00 00 00	 call	 _SCY
  004b6	83 c4 04	 add	 esp, 4
  004b9	50		 push	 eax
  004ba	b9 08 00 00 00	 mov	 ecx, 8
  004bf	6b d1 03	 imul	 edx, ecx, 3
  004c2	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  004c8	50		 push	 eax
  004c9	e8 00 00 00 00	 call	 _SCX
  004ce	83 c4 04	 add	 esp, 4
  004d1	50		 push	 eax
  004d2	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004d7	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@ST_overlay:

; 1933 : 		}
; 1934 : 	}
; 1935 : 
; 1936 : 	if ((maptol & TOL_NIGHTS) && !(hu_showscores && (netgame || multiplayer)))

  004da	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  004e1	83 e0 40	 and	 eax, 64			; 00000040H
  004e4	74 26		 je	 SHORT $LN20@ST_overlay
  004e6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  004ed	74 12		 je	 SHORT $LN22@ST_overlay
  004ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  004f6	75 14		 jne	 SHORT $LN20@ST_overlay
  004f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  004ff	75 0b		 jne	 SHORT $LN20@ST_overlay
$LN22@ST_overlay:

; 1937 : 	{
; 1938 : 		ST_drawNiGHTSHUD();

  00501	e8 00 00 00 00	 call	 _ST_drawNiGHTSHUD
  00506	90		 npad	 1

; 1939 : 	}

  00507	e9 34 0a 00 00	 jmp	 $LN44@ST_overlay
$LN20@ST_overlay:

; 1940 : 	else if (!(hu_showscores && (netgame || multiplayer))) //hu_showscores = auto hide score/time/rings when tab rankings are shown

  0050c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  00513	74 1a		 je	 SHORT $LN24@ST_overlay
  00515	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0051c	0f 85 1e 0a 00
	00		 jne	 $LN44@ST_overlay
  00522	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00529	0f 85 11 0a 00
	00		 jne	 $LN44@ST_overlay
$LN24@ST_overlay:

; 1941 : 	{
; 1942 : 		if (splitscreen)

  0052f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00536	0f 84 18 01 00
	00		 je	 $LN25@ST_overlay

; 1943 : 		{
; 1944 : 			// rings counter
; 1945 : 			ST_DrawOverlayNum(SCX(hudinfo[HUD_RINGSNUMSPLIT].x), SCY(hudinfo[HUD_RINGSNUMSPLIT].y), stplyr->health > 0 ? stplyr->health - 1 : 0,

  0053c	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00541	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00545	7e 14		 jle	 SHORT $LN143@ST_overlay
  00547	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  0054d	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00550	83 ea 01	 sub	 edx, 1
  00553	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv326[ebp], edx
  00559	eb 0a		 jmp	 SHORT $LN144@ST_overlay
$LN143@ST_overlay:
  0055b	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv326[ebp], 0
$LN144@ST_overlay:
  00565	68 00 00 00 00	 push	 OFFSET _tallnum
  0056a	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv326[ebp]
  00570	50		 push	 eax
  00571	b9 08 00 00 00	 mov	 ecx, 8
  00576	6b d1 05	 imul	 edx, ecx, 5
  00579	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  0057f	50		 push	 eax
  00580	e8 00 00 00 00	 call	 _SCY
  00585	83 c4 04	 add	 esp, 4
  00588	50		 push	 eax
  00589	b9 08 00 00 00	 mov	 ecx, 8
  0058e	6b d1 05	 imul	 edx, ecx, 5
  00591	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 _SCX
  0059d	83 c4 04	 add	 esp, 4
  005a0	50		 push	 eax
  005a1	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  005a6	83 c4 10	 add	 esp, 16			; 00000010H

; 1946 : 				tallnum);
; 1947 : 
; 1948 : 			if (stplyr->health <= 1 && leveltime/5 & 1)

  005a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  005ae	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  005b2	7f 58		 jg	 SHORT $LN27@ST_overlay
  005b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  005b9	33 d2		 xor	 edx, edx
  005bb	b9 05 00 00 00	 mov	 ecx, 5
  005c0	f7 f1		 div	 ecx
  005c2	83 e0 01	 and	 eax, 1
  005c5	74 45		 je	 SHORT $LN27@ST_overlay

; 1949 : 				V_DrawScaledPatch(SCX(hudinfo[HUD_RINGSSPLIT].x), SCY(hudinfo[HUD_RINGSSPLIT].y), V_NOSCALESTART|V_TRANSLUCENT, rrings);

  005c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _rrings
  005cc	50		 push	 eax
  005cd	68 00 00 41 00	 push	 4259840			; 00410000H
  005d2	b9 08 00 00 00	 mov	 ecx, 8
  005d7	c1 e1 02	 shl	 ecx, 2
  005da	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  005e0	52		 push	 edx
  005e1	e8 00 00 00 00	 call	 _SCY
  005e6	83 c4 04	 add	 esp, 4
  005e9	50		 push	 eax
  005ea	b8 08 00 00 00	 mov	 eax, 8
  005ef	c1 e0 02	 shl	 eax, 2
  005f2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  005f8	51		 push	 ecx
  005f9	e8 00 00 00 00	 call	 _SCX
  005fe	83 c4 04	 add	 esp, 4
  00601	50		 push	 eax
  00602	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00607	83 c4 10	 add	 esp, 16			; 00000010H
  0060a	eb 43		 jmp	 SHORT $LN28@ST_overlay
$LN27@ST_overlay:

; 1950 : 			else
; 1951 : 				V_DrawScaledPatch(SCX(hudinfo[HUD_RINGSSPLIT].x), SCY(hudinfo[HUD_RINGSSPLIT].y), V_NOSCALESTART|V_TRANSLUCENT, sborings);

  0060c	a1 00 00 00 00	 mov	 eax, DWORD PTR _sborings
  00611	50		 push	 eax
  00612	68 00 00 41 00	 push	 4259840			; 00410000H
  00617	b9 08 00 00 00	 mov	 ecx, 8
  0061c	c1 e1 02	 shl	 ecx, 2
  0061f	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  00625	52		 push	 edx
  00626	e8 00 00 00 00	 call	 _SCY
  0062b	83 c4 04	 add	 esp, 4
  0062e	50		 push	 eax
  0062f	b8 08 00 00 00	 mov	 eax, 8
  00634	c1 e0 02	 shl	 eax, 2
  00637	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  0063d	51		 push	 ecx
  0063e	e8 00 00 00 00	 call	 _SCX
  00643	83 c4 04	 add	 esp, 4
  00646	50		 push	 eax
  00647	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0064c	83 c4 10	 add	 esp, 16			; 00000010H
$LN28@ST_overlay:

; 1952 : 		}

  0064f	e9 00 02 00 00	 jmp	 $LN33@ST_overlay
$LN25@ST_overlay:

; 1953 : 		else
; 1954 : 		{
; 1955 : 			if (!useNightsSS && gamemap >= sstage_start && gamemap <= sstage_end)

  00654	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _useNightsSS, 0
  0065b	0f 85 e0 00 00
	00		 jne	 $LN29@ST_overlay
  00661	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00668	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _sstage_start
  0066f	3b c1		 cmp	 eax, ecx
  00671	0f 8c ca 00 00
	00		 jl	 $LN29@ST_overlay
  00677	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0067e	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _sstage_end
  00685	3b c1		 cmp	 eax, ecx
  00687	0f 8f b4 00 00
	00		 jg	 $LN29@ST_overlay

; 1956 : 			{
; 1957 : 				INT32 ringscollected = 0; // Total # everyone has collected

  0068d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ringscollected$17[ebp], 0

; 1958 : 				INT32 i;
; 1959 : 
; 1960 : 				for (i = 0; i < MAXPLAYERS; i++)

  00694	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$16[ebp], 0
  0069b	eb 09		 jmp	 SHORT $LN4@ST_overlay
$LN2@ST_overlay:
  0069d	8b 45 ec	 mov	 eax, DWORD PTR _i$16[ebp]
  006a0	83 c0 01	 add	 eax, 1
  006a3	89 45 ec	 mov	 DWORD PTR _i$16[ebp], eax
$LN4@ST_overlay:
  006a6	83 7d ec 20	 cmp	 DWORD PTR _i$16[ebp], 32 ; 00000020H
  006aa	7d 52		 jge	 SHORT $LN3@ST_overlay

; 1961 : 					if (playeringame[i] && players[i].mo && players[i].mo->health > 1)

  006ac	8b 45 ec	 mov	 eax, DWORD PTR _i$16[ebp]
  006af	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  006b7	74 43		 je	 SHORT $LN31@ST_overlay
  006b9	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$16[ebp], 508
  006c0	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  006c7	74 33		 je	 SHORT $LN31@ST_overlay
  006c9	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$16[ebp], 508
  006d0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  006d6	83 b9 8c 00 00
	00 01		 cmp	 DWORD PTR [ecx+140], 1
  006dd	7e 1d		 jle	 SHORT $LN31@ST_overlay

; 1962 : 						ringscollected += players[i].mo->health - 1;

  006df	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$16[ebp], 508
  006e6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  006ec	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  006f2	8b 45 f0	 mov	 eax, DWORD PTR _ringscollected$17[ebp]
  006f5	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  006f9	89 4d f0	 mov	 DWORD PTR _ringscollected$17[ebp], ecx
$LN31@ST_overlay:
  006fc	eb 9f		 jmp	 SHORT $LN2@ST_overlay
$LN3@ST_overlay:

; 1963 : 
; 1964 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_RINGSNUM].x), SCY(hudinfo[HUD_RINGSNUM].y), ringscollected, tallnum);

  006fe	68 00 00 00 00	 push	 OFFSET _tallnum
  00703	8b 45 f0	 mov	 eax, DWORD PTR _ringscollected$17[ebp]
  00706	50		 push	 eax
  00707	b9 08 00 00 00	 mov	 ecx, 8
  0070c	6b d1 07	 imul	 edx, ecx, 7
  0070f	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00715	50		 push	 eax
  00716	e8 00 00 00 00	 call	 _SCY
  0071b	83 c4 04	 add	 esp, 4
  0071e	50		 push	 eax
  0071f	b9 08 00 00 00	 mov	 ecx, 8
  00724	6b d1 07	 imul	 edx, ecx, 7
  00727	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  0072d	50		 push	 eax
  0072e	e8 00 00 00 00	 call	 _SCX
  00733	83 c4 04	 add	 esp, 4
  00736	50		 push	 eax
  00737	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  0073c	83 c4 10	 add	 esp, 16			; 00000010H

; 1965 : 			}

  0073f	eb 6d		 jmp	 SHORT $LN30@ST_overlay
$LN29@ST_overlay:

; 1966 : 			else
; 1967 : 			{
; 1968 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_RINGSNUM].x), SCY(hudinfo[HUD_RINGSNUM].y), stplyr->health > 0 ? stplyr->health-1 : 0,

  00741	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00746	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0074a	7e 14		 jle	 SHORT $LN145@ST_overlay
  0074c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  00752	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00755	83 ea 01	 sub	 edx, 1
  00758	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv419[ebp], edx
  0075e	eb 0a		 jmp	 SHORT $LN146@ST_overlay
$LN145@ST_overlay:
  00760	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv419[ebp], 0
$LN146@ST_overlay:
  0076a	68 00 00 00 00	 push	 OFFSET _tallnum
  0076f	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv419[ebp]
  00775	50		 push	 eax
  00776	b9 08 00 00 00	 mov	 ecx, 8
  0077b	6b d1 07	 imul	 edx, ecx, 7
  0077e	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00784	50		 push	 eax
  00785	e8 00 00 00 00	 call	 _SCY
  0078a	83 c4 04	 add	 esp, 4
  0078d	50		 push	 eax
  0078e	b9 08 00 00 00	 mov	 ecx, 8
  00793	6b d1 07	 imul	 edx, ecx, 7
  00796	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  0079c	50		 push	 eax
  0079d	e8 00 00 00 00	 call	 _SCX
  007a2	83 c4 04	 add	 esp, 4
  007a5	50		 push	 eax
  007a6	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  007ab	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@ST_overlay:

; 1969 : 					tallnum);
; 1970 : 			}
; 1971 : 
; 1972 : 			if (stplyr->health <= 1 && leveltime/5 & 1)

  007ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  007b3	83 78 28 01	 cmp	 DWORD PTR [eax+40], 1
  007b7	7f 58		 jg	 SHORT $LN32@ST_overlay
  007b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  007be	33 d2		 xor	 edx, edx
  007c0	b9 05 00 00 00	 mov	 ecx, 5
  007c5	f7 f1		 div	 ecx
  007c7	83 e0 01	 and	 eax, 1
  007ca	74 45		 je	 SHORT $LN32@ST_overlay

; 1973 : 				V_DrawScaledPatch(SCX(hudinfo[HUD_RINGS].x), SCY(hudinfo[HUD_RINGS].y), V_NOSCALESTART|V_TRANSLUCENT, rrings);

  007cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _rrings
  007d1	50		 push	 eax
  007d2	68 00 00 41 00	 push	 4259840			; 00410000H
  007d7	b9 08 00 00 00	 mov	 ecx, 8
  007dc	6b d1 06	 imul	 edx, ecx, 6
  007df	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  007e5	50		 push	 eax
  007e6	e8 00 00 00 00	 call	 _SCY
  007eb	83 c4 04	 add	 esp, 4
  007ee	50		 push	 eax
  007ef	b9 08 00 00 00	 mov	 ecx, 8
  007f4	6b d1 06	 imul	 edx, ecx, 6
  007f7	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  007fd	50		 push	 eax
  007fe	e8 00 00 00 00	 call	 _SCX
  00803	83 c4 04	 add	 esp, 4
  00806	50		 push	 eax
  00807	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0080c	83 c4 10	 add	 esp, 16			; 00000010H
  0080f	eb 43		 jmp	 SHORT $LN33@ST_overlay
$LN32@ST_overlay:

; 1974 : 			else
; 1975 : 				V_DrawScaledPatch(SCX(hudinfo[HUD_RINGS].x), SCY(hudinfo[HUD_RINGS].y), V_NOSCALESTART|V_TRANSLUCENT, sborings);

  00811	a1 00 00 00 00	 mov	 eax, DWORD PTR _sborings
  00816	50		 push	 eax
  00817	68 00 00 41 00	 push	 4259840			; 00410000H
  0081c	b9 08 00 00 00	 mov	 ecx, 8
  00821	6b d1 06	 imul	 edx, ecx, 6
  00824	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  0082a	50		 push	 eax
  0082b	e8 00 00 00 00	 call	 _SCY
  00830	83 c4 04	 add	 esp, 4
  00833	50		 push	 eax
  00834	b9 08 00 00 00	 mov	 ecx, 8
  00839	6b d1 06	 imul	 edx, ecx, 6
  0083c	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00842	50		 push	 eax
  00843	e8 00 00 00 00	 call	 _SCX
  00848	83 c4 04	 add	 esp, 4
  0084b	50		 push	 eax
  0084c	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00851	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@ST_overlay:

; 1976 : 		}
; 1977 : 
; 1978 : 		// draw score (same in splitscreen as normal, too!)
; 1979 : 		ST_DrawOverlayNum(SCX(hudinfo[HUD_SCORENUM].x), SCY(hudinfo[HUD_SCORENUM].y), stplyr->score, tallnum);

  00854	68 00 00 00 00	 push	 OFFSET _tallnum
  00859	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0085e	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00864	51		 push	 ecx
  00865	ba 08 00 00 00	 mov	 edx, 8
  0086a	6b c2 09	 imul	 eax, edx, 9
  0086d	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00873	51		 push	 ecx
  00874	e8 00 00 00 00	 call	 _SCY
  00879	83 c4 04	 add	 esp, 4
  0087c	50		 push	 eax
  0087d	ba 08 00 00 00	 mov	 edx, 8
  00882	6b c2 09	 imul	 eax, edx, 9
  00885	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  0088b	51		 push	 ecx
  0088c	e8 00 00 00 00	 call	 _SCX
  00891	83 c4 04	 add	 esp, 4
  00894	50		 push	 eax
  00895	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  0089a	83 c4 10	 add	 esp, 16			; 00000010H

; 1980 : 		V_DrawScaledPatch(SCX(hudinfo[HUD_SCORE].x), SCY(hudinfo[HUD_SCORE].y), V_NOSCALESTART|V_TRANSLUCENT, sboscore);

  0089d	a1 00 00 00 00	 mov	 eax, DWORD PTR _sboscore
  008a2	50		 push	 eax
  008a3	68 00 00 41 00	 push	 4259840			; 00410000H
  008a8	b9 08 00 00 00	 mov	 ecx, 8
  008ad	c1 e1 03	 shl	 ecx, 3
  008b0	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  008b6	52		 push	 edx
  008b7	e8 00 00 00 00	 call	 _SCY
  008bc	83 c4 04	 add	 esp, 4
  008bf	50		 push	 eax
  008c0	b8 08 00 00 00	 mov	 eax, 8
  008c5	c1 e0 03	 shl	 eax, 3
  008c8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  008ce	51		 push	 ecx
  008cf	e8 00 00 00 00	 call	 _SCX
  008d4	83 c4 04	 add	 esp, 4
  008d7	50		 push	 eax
  008d8	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  008dd	83 c4 10	 add	 esp, 16			; 00000010H

; 1981 : 
; 1982 : 		if (splitscreen)

  008e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  008e7	0f 84 6a 02 00
	00		 je	 $LN34@ST_overlay

; 1983 : 		{
; 1984 : 			INT32 seconds;
; 1985 : 
; 1986 : 			if (cv_objectplace.value)

  008ed	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  008f4	74 14		 je	 SHORT $LN36@ST_overlay

; 1987 : 				seconds = objectsdrawn%100;

  008f6	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _objectsdrawn
  008fd	99		 cdq
  008fe	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00903	f7 f9		 idiv	 ecx
  00905	89 55 e8	 mov	 DWORD PTR _seconds$15[ebp], edx
  00908	eb 20		 jmp	 SHORT $LN37@ST_overlay
$LN36@ST_overlay:

; 1988 : 			else
; 1989 : 				seconds = stplyr->realtime/TICRATE % 60;

  0090a	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0090f	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [eax+340]
  00915	33 d2		 xor	 edx, edx
  00917	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  0091c	f7 f1		 div	 ecx
  0091e	33 d2		 xor	 edx, edx
  00920	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00925	f7 f1		 div	 ecx
  00927	89 55 e8	 mov	 DWORD PTR _seconds$15[ebp], edx
$LN37@ST_overlay:

; 1990 : 
; 1991 : 			if (seconds < 10)

  0092a	83 7d e8 0a	 cmp	 DWORD PTR _seconds$15[ebp], 10 ; 0000000aH
  0092e	7d 3f		 jge	 SHORT $LN38@ST_overlay

; 1992 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_LOWSECONDSSPLIT].x), SCY(hudinfo[HUD_LOWSECONDSSPLIT].y), 0, tallnum);

  00930	68 00 00 00 00	 push	 OFFSET _tallnum
  00935	6a 00		 push	 0
  00937	b8 08 00 00 00	 mov	 eax, 8
  0093c	6b c8 0b	 imul	 ecx, eax, 11
  0093f	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  00945	52		 push	 edx
  00946	e8 00 00 00 00	 call	 _SCY
  0094b	83 c4 04	 add	 esp, 4
  0094e	50		 push	 eax
  0094f	b8 08 00 00 00	 mov	 eax, 8
  00954	6b c8 0b	 imul	 ecx, eax, 11
  00957	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  0095d	52		 push	 edx
  0095e	e8 00 00 00 00	 call	 _SCX
  00963	83 c4 04	 add	 esp, 4
  00966	50		 push	 eax
  00967	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  0096c	83 c4 10	 add	 esp, 16			; 00000010H
$LN38@ST_overlay:

; 1993 : 
; 1994 : 			// seconds time
; 1995 : 			if (cv_objectplace.value)

  0096f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00976	74 4f		 je	 SHORT $LN39@ST_overlay

; 1996 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_SECONDSSPLIT].x), SCY(hudinfo[HUD_SECONDSSPLIT].y), objectsdrawn%100, tallnum);

  00978	68 00 00 00 00	 push	 OFFSET _tallnum
  0097d	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _objectsdrawn
  00984	99		 cdq
  00985	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0098a	f7 f9		 idiv	 ecx
  0098c	52		 push	 edx
  0098d	ba 08 00 00 00	 mov	 edx, 8
  00992	6b c2 0c	 imul	 eax, edx, 12
  00995	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  0099b	51		 push	 ecx
  0099c	e8 00 00 00 00	 call	 _SCY
  009a1	83 c4 04	 add	 esp, 4
  009a4	50		 push	 eax
  009a5	ba 08 00 00 00	 mov	 edx, 8
  009aa	6b c2 0c	 imul	 eax, edx, 12
  009ad	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  009b3	51		 push	 ecx
  009b4	e8 00 00 00 00	 call	 _SCX
  009b9	83 c4 04	 add	 esp, 4
  009bc	50		 push	 eax
  009bd	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  009c2	83 c4 10	 add	 esp, 16			; 00000010H
  009c5	eb 5b		 jmp	 SHORT $LN40@ST_overlay
$LN39@ST_overlay:

; 1997 : 			else
; 1998 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_SECONDSSPLIT].x), SCY(hudinfo[HUD_SECONDSSPLIT].y), stplyr->realtime/TICRATE % 60, tallnum);

  009c7	68 00 00 00 00	 push	 OFFSET _tallnum
  009cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  009d1	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [eax+340]
  009d7	33 d2		 xor	 edx, edx
  009d9	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  009de	f7 f1		 div	 ecx
  009e0	33 d2		 xor	 edx, edx
  009e2	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  009e7	f7 f1		 div	 ecx
  009e9	52		 push	 edx
  009ea	ba 08 00 00 00	 mov	 edx, 8
  009ef	6b c2 0c	 imul	 eax, edx, 12
  009f2	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  009f8	51		 push	 ecx
  009f9	e8 00 00 00 00	 call	 _SCY
  009fe	83 c4 04	 add	 esp, 4
  00a01	50		 push	 eax
  00a02	ba 08 00 00 00	 mov	 edx, 8
  00a07	6b c2 0c	 imul	 eax, edx, 12
  00a0a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00a10	51		 push	 ecx
  00a11	e8 00 00 00 00	 call	 _SCX
  00a16	83 c4 04	 add	 esp, 4
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00a1f	83 c4 10	 add	 esp, 16			; 00000010H
$LN40@ST_overlay:

; 1999 : 
; 2000 : 			// minutes time
; 2001 : 			if (cv_objectplace.value)

  00a22	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00a29	74 4f		 je	 SHORT $LN41@ST_overlay

; 2002 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_MINUTESSPLIT].x), SCY(hudinfo[HUD_MINUTESSPLIT].y), objectsdrawn/100, tallnum);

  00a2b	68 00 00 00 00	 push	 OFFSET _tallnum
  00a30	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _objectsdrawn
  00a37	99		 cdq
  00a38	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00a3d	f7 f9		 idiv	 ecx
  00a3f	50		 push	 eax
  00a40	ba 08 00 00 00	 mov	 edx, 8
  00a45	6b c2 0d	 imul	 eax, edx, 13
  00a48	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00a4e	51		 push	 ecx
  00a4f	e8 00 00 00 00	 call	 _SCY
  00a54	83 c4 04	 add	 esp, 4
  00a57	50		 push	 eax
  00a58	ba 08 00 00 00	 mov	 edx, 8
  00a5d	6b c2 0d	 imul	 eax, edx, 13
  00a60	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00a66	51		 push	 ecx
  00a67	e8 00 00 00 00	 call	 _SCX
  00a6c	83 c4 04	 add	 esp, 4
  00a6f	50		 push	 eax
  00a70	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00a75	83 c4 10	 add	 esp, 16			; 00000010H
  00a78	eb 52		 jmp	 SHORT $LN42@ST_overlay
$LN41@ST_overlay:

; 2003 : 			else
; 2004 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_MINUTESSPLIT].x), SCY(hudinfo[HUD_MINUTESSPLIT].y), stplyr->realtime/(60*TICRATE), tallnum);

  00a7a	68 00 00 00 00	 push	 OFFSET _tallnum
  00a7f	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00a84	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [eax+340]
  00a8a	33 d2		 xor	 edx, edx
  00a8c	b9 34 08 00 00	 mov	 ecx, 2100		; 00000834H
  00a91	f7 f1		 div	 ecx
  00a93	50		 push	 eax
  00a94	ba 08 00 00 00	 mov	 edx, 8
  00a99	6b c2 0d	 imul	 eax, edx, 13
  00a9c	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00aa2	51		 push	 ecx
  00aa3	e8 00 00 00 00	 call	 _SCY
  00aa8	83 c4 04	 add	 esp, 4
  00aab	50		 push	 eax
  00aac	ba 08 00 00 00	 mov	 edx, 8
  00ab1	6b c2 0d	 imul	 eax, edx, 13
  00ab4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00aba	51		 push	 ecx
  00abb	e8 00 00 00 00	 call	 _SCX
  00ac0	83 c4 04	 add	 esp, 4
  00ac3	50		 push	 eax
  00ac4	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00ac9	83 c4 10	 add	 esp, 16			; 00000010H
$LN42@ST_overlay:

; 2005 : 
; 2006 : 			// colon location
; 2007 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_TIMECOLONSPLIT].x), SCY(hudinfo[HUD_TIMECOLONSPLIT].y), V_NOSCALESTART|V_TRANSLUCENT, sbocolon);

  00acc	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbocolon
  00ad1	50		 push	 eax
  00ad2	68 00 00 41 00	 push	 4259840			; 00410000H
  00ad7	b9 08 00 00 00	 mov	 ecx, 8
  00adc	6b d1 0e	 imul	 edx, ecx, 14
  00adf	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00ae5	50		 push	 eax
  00ae6	e8 00 00 00 00	 call	 _SCY
  00aeb	83 c4 04	 add	 esp, 4
  00aee	50		 push	 eax
  00aef	b9 08 00 00 00	 mov	 ecx, 8
  00af4	6b d1 0e	 imul	 edx, ecx, 14
  00af7	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00afd	50		 push	 eax
  00afe	e8 00 00 00 00	 call	 _SCX
  00b03	83 c4 04	 add	 esp, 4
  00b06	50		 push	 eax
  00b07	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00b0c	83 c4 10	 add	 esp, 16			; 00000010H

; 2008 : 
; 2009 : 			// TIME location
; 2010 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_TIMESPLIT].x), SCY(hudinfo[HUD_TIMESPLIT].y), V_NOSCALESTART|V_TRANSLUCENT, sbotime);

  00b0f	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbotime
  00b14	50		 push	 eax
  00b15	68 00 00 41 00	 push	 4259840			; 00410000H
  00b1a	b9 08 00 00 00	 mov	 ecx, 8
  00b1f	6b d1 0a	 imul	 edx, ecx, 10
  00b22	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00b28	50		 push	 eax
  00b29	e8 00 00 00 00	 call	 _SCY
  00b2e	83 c4 04	 add	 esp, 4
  00b31	50		 push	 eax
  00b32	b9 08 00 00 00	 mov	 ecx, 8
  00b37	6b d1 0a	 imul	 edx, ecx, 10
  00b3a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00b40	50		 push	 eax
  00b41	e8 00 00 00 00	 call	 _SCX
  00b46	83 c4 04	 add	 esp, 4
  00b49	50		 push	 eax
  00b4a	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00b4f	83 c4 10	 add	 esp, 16			; 00000010H

; 2011 : 		}

  00b52	e9 e9 03 00 00	 jmp	 $LN44@ST_overlay
$LN34@ST_overlay:

; 2012 : 		else if (cv_timetic.value == 1) // show tics instead of MM : SS

  00b57	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_timetic+20, 1
  00b5e	0f 85 91 00 00
	00		 jne	 $LN43@ST_overlay

; 2013 : 		{
; 2014 : 			ST_DrawOverlayNum(SCX(hudinfo[HUD_SECONDS].x), SCY(hudinfo[HUD_SECONDS].y), stplyr->realtime, tallnum);

  00b64	68 00 00 00 00	 push	 OFFSET _tallnum
  00b69	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00b6e	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00b74	51		 push	 ecx
  00b75	ba 08 00 00 00	 mov	 edx, 8
  00b7a	6b c2 13	 imul	 eax, edx, 19
  00b7d	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00b83	51		 push	 ecx
  00b84	e8 00 00 00 00	 call	 _SCY
  00b89	83 c4 04	 add	 esp, 4
  00b8c	50		 push	 eax
  00b8d	ba 08 00 00 00	 mov	 edx, 8
  00b92	6b c2 13	 imul	 eax, edx, 19
  00b95	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00b9b	51		 push	 ecx
  00b9c	e8 00 00 00 00	 call	 _SCX
  00ba1	83 c4 04	 add	 esp, 4
  00ba4	50		 push	 eax
  00ba5	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00baa	83 c4 10	 add	 esp, 16			; 00000010H

; 2015 : 
; 2016 : 			// TIME location
; 2017 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_TIME].x), SCY(hudinfo[HUD_TIME].y), V_NOSCALESTART|V_TRANSLUCENT, sbotime);

  00bad	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbotime
  00bb2	50		 push	 eax
  00bb3	68 00 00 41 00	 push	 4259840			; 00410000H
  00bb8	b9 08 00 00 00	 mov	 ecx, 8
  00bbd	6b d1 0f	 imul	 edx, ecx, 15
  00bc0	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00bc6	50		 push	 eax
  00bc7	e8 00 00 00 00	 call	 _SCY
  00bcc	83 c4 04	 add	 esp, 4
  00bcf	50		 push	 eax
  00bd0	b9 08 00 00 00	 mov	 ecx, 8
  00bd5	6b d1 0f	 imul	 edx, ecx, 15
  00bd8	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00bde	50		 push	 eax
  00bdf	e8 00 00 00 00	 call	 _SCX
  00be4	83 c4 04	 add	 esp, 4
  00be7	50		 push	 eax
  00be8	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00bed	83 c4 10	 add	 esp, 16			; 00000010H

; 2018 : 		}

  00bf0	e9 4b 03 00 00	 jmp	 $LN44@ST_overlay
$LN43@ST_overlay:

; 2019 : 		else
; 2020 : 		{
; 2021 : 			INT32 seconds;
; 2022 : 
; 2023 : 			if (cv_objectplace.value)

  00bf5	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00bfc	74 14		 je	 SHORT $LN45@ST_overlay

; 2024 : 				seconds = objectsdrawn%100;

  00bfe	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _objectsdrawn
  00c05	99		 cdq
  00c06	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00c0b	f7 f9		 idiv	 ecx
  00c0d	89 55 e4	 mov	 DWORD PTR _seconds$14[ebp], edx
  00c10	eb 17		 jmp	 SHORT $LN46@ST_overlay
$LN45@ST_overlay:

; 2025 : 			else
; 2026 : 				seconds = G_TicsToSeconds(stplyr->realtime);

  00c12	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00c17	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00c1d	51		 push	 ecx
  00c1e	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00c23	83 c4 04	 add	 esp, 4
  00c26	89 45 e4	 mov	 DWORD PTR _seconds$14[ebp], eax
$LN46@ST_overlay:

; 2027 : 
; 2028 : 			if (seconds < 10)

  00c29	83 7d e4 0a	 cmp	 DWORD PTR _seconds$14[ebp], 10 ; 0000000aH
  00c2d	7d 3f		 jge	 SHORT $LN47@ST_overlay

; 2029 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_LOWSECONDS].x), SCY(hudinfo[HUD_LOWSECONDS].y), 0, tallnum);

  00c2f	68 00 00 00 00	 push	 OFFSET _tallnum
  00c34	6a 00		 push	 0
  00c36	b8 08 00 00 00	 mov	 eax, 8
  00c3b	6b c8 12	 imul	 ecx, eax, 18
  00c3e	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx+4]
  00c44	52		 push	 edx
  00c45	e8 00 00 00 00	 call	 _SCY
  00c4a	83 c4 04	 add	 esp, 4
  00c4d	50		 push	 eax
  00c4e	b8 08 00 00 00	 mov	 eax, 8
  00c53	6b c8 12	 imul	 ecx, eax, 18
  00c56	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _hudinfo[ecx]
  00c5c	52		 push	 edx
  00c5d	e8 00 00 00 00	 call	 _SCX
  00c62	83 c4 04	 add	 esp, 4
  00c65	50		 push	 eax
  00c66	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00c6b	83 c4 10	 add	 esp, 16			; 00000010H
$LN47@ST_overlay:

; 2030 : 
; 2031 : 			// seconds time
; 2032 : 			if (cv_objectplace.value)

  00c6e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00c75	74 4f		 je	 SHORT $LN48@ST_overlay

; 2033 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_SECONDS].x), SCY(hudinfo[HUD_SECONDS].y), objectsdrawn%100, tallnum);

  00c77	68 00 00 00 00	 push	 OFFSET _tallnum
  00c7c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _objectsdrawn
  00c83	99		 cdq
  00c84	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00c89	f7 f9		 idiv	 ecx
  00c8b	52		 push	 edx
  00c8c	ba 08 00 00 00	 mov	 edx, 8
  00c91	6b c2 13	 imul	 eax, edx, 19
  00c94	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00c9a	51		 push	 ecx
  00c9b	e8 00 00 00 00	 call	 _SCY
  00ca0	83 c4 04	 add	 esp, 4
  00ca3	50		 push	 eax
  00ca4	ba 08 00 00 00	 mov	 edx, 8
  00ca9	6b c2 13	 imul	 eax, edx, 19
  00cac	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00cb2	51		 push	 ecx
  00cb3	e8 00 00 00 00	 call	 _SCX
  00cb8	83 c4 04	 add	 esp, 4
  00cbb	50		 push	 eax
  00cbc	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00cc1	83 c4 10	 add	 esp, 16			; 00000010H
  00cc4	eb 52		 jmp	 SHORT $LN49@ST_overlay
$LN48@ST_overlay:

; 2034 : 			else
; 2035 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_SECONDS].x), SCY(hudinfo[HUD_SECONDS].y), G_TicsToSeconds(stplyr->realtime), tallnum);

  00cc6	68 00 00 00 00	 push	 OFFSET _tallnum
  00ccb	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00cd0	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00cd6	51		 push	 ecx
  00cd7	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00cdc	83 c4 04	 add	 esp, 4
  00cdf	50		 push	 eax
  00ce0	ba 08 00 00 00	 mov	 edx, 8
  00ce5	6b c2 13	 imul	 eax, edx, 19
  00ce8	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00cee	51		 push	 ecx
  00cef	e8 00 00 00 00	 call	 _SCY
  00cf4	83 c4 04	 add	 esp, 4
  00cf7	50		 push	 eax
  00cf8	ba 08 00 00 00	 mov	 edx, 8
  00cfd	6b c2 13	 imul	 eax, edx, 19
  00d00	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00d06	51		 push	 ecx
  00d07	e8 00 00 00 00	 call	 _SCX
  00d0c	83 c4 04	 add	 esp, 4
  00d0f	50		 push	 eax
  00d10	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00d15	83 c4 10	 add	 esp, 16			; 00000010H
$LN49@ST_overlay:

; 2036 : 
; 2037 : 				// minutes time
; 2038 : 			if (cv_objectplace.value)

  00d18	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00d1f	74 4f		 je	 SHORT $LN50@ST_overlay

; 2039 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_MINUTES].x), SCY(hudinfo[HUD_MINUTES].y), objectsdrawn/100, tallnum);

  00d21	68 00 00 00 00	 push	 OFFSET _tallnum
  00d26	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _objectsdrawn
  00d2d	99		 cdq
  00d2e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00d33	f7 f9		 idiv	 ecx
  00d35	50		 push	 eax
  00d36	ba 08 00 00 00	 mov	 edx, 8
  00d3b	6b c2 14	 imul	 eax, edx, 20
  00d3e	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00d44	51		 push	 ecx
  00d45	e8 00 00 00 00	 call	 _SCY
  00d4a	83 c4 04	 add	 esp, 4
  00d4d	50		 push	 eax
  00d4e	ba 08 00 00 00	 mov	 edx, 8
  00d53	6b c2 14	 imul	 eax, edx, 20
  00d56	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00d5c	51		 push	 ecx
  00d5d	e8 00 00 00 00	 call	 _SCX
  00d62	83 c4 04	 add	 esp, 4
  00d65	50		 push	 eax
  00d66	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00d6b	83 c4 10	 add	 esp, 16			; 00000010H
  00d6e	eb 54		 jmp	 SHORT $LN51@ST_overlay
$LN50@ST_overlay:

; 2040 : 			else
; 2041 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_MINUTES].x), SCY(hudinfo[HUD_MINUTES].y), G_TicsToMinutes(stplyr->realtime, true), tallnum);

  00d70	68 00 00 00 00	 push	 OFFSET _tallnum
  00d75	6a 01		 push	 1
  00d77	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00d7c	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00d82	51		 push	 ecx
  00d83	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00d88	83 c4 08	 add	 esp, 8
  00d8b	50		 push	 eax
  00d8c	ba 08 00 00 00	 mov	 edx, 8
  00d91	6b c2 14	 imul	 eax, edx, 20
  00d94	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00d9a	51		 push	 ecx
  00d9b	e8 00 00 00 00	 call	 _SCY
  00da0	83 c4 04	 add	 esp, 4
  00da3	50		 push	 eax
  00da4	ba 08 00 00 00	 mov	 edx, 8
  00da9	6b c2 14	 imul	 eax, edx, 20
  00dac	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax]
  00db2	51		 push	 ecx
  00db3	e8 00 00 00 00	 call	 _SCX
  00db8	83 c4 04	 add	 esp, 4
  00dbb	50		 push	 eax
  00dbc	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00dc1	83 c4 10	 add	 esp, 16			; 00000010H
$LN51@ST_overlay:

; 2042 : 
; 2043 : 			// colon location
; 2044 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_TIMECOLON].x), SCY(hudinfo[HUD_TIMECOLON].y), V_NOSCALESTART|V_TRANSLUCENT, sbocolon);

  00dc4	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbocolon
  00dc9	50		 push	 eax
  00dca	68 00 00 41 00	 push	 4259840			; 00410000H
  00dcf	b9 08 00 00 00	 mov	 ecx, 8
  00dd4	6b d1 15	 imul	 edx, ecx, 21
  00dd7	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00ddd	50		 push	 eax
  00dde	e8 00 00 00 00	 call	 _SCY
  00de3	83 c4 04	 add	 esp, 4
  00de6	50		 push	 eax
  00de7	b9 08 00 00 00	 mov	 ecx, 8
  00dec	6b d1 15	 imul	 edx, ecx, 21
  00def	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00df5	50		 push	 eax
  00df6	e8 00 00 00 00	 call	 _SCX
  00dfb	83 c4 04	 add	 esp, 4
  00dfe	50		 push	 eax
  00dff	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00e04	83 c4 10	 add	 esp, 16			; 00000010H

; 2045 : 
; 2046 : 			// Show tics, too!
; 2047 : 			if (timeattacking || cv_timetic.value == 2)

  00e07	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  00e0e	75 0d		 jne	 SHORT $LN53@ST_overlay
  00e10	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_timetic+20, 2
  00e17	0f 85 e0 00 00
	00		 jne	 $LN52@ST_overlay
$LN53@ST_overlay:

; 2048 : 			{
; 2049 : 				INT32 tics = G_TicsToCentiseconds(stplyr->realtime);

  00e1d	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00e22	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00e28	51		 push	 ecx
  00e29	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00e2e	83 c4 04	 add	 esp, 4
  00e31	89 45 e0	 mov	 DWORD PTR _tics$13[ebp], eax

; 2050 : 
; 2051 : 				if (tics < 10)

  00e34	83 7d e0 0a	 cmp	 DWORD PTR _tics$13[ebp], 10 ; 0000000aH
  00e38	7d 3f		 jge	 SHORT $LN54@ST_overlay

; 2052 : 					ST_DrawOverlayNum(SCX(hudinfo[HUD_LOWTICS].x), SCY(hudinfo[HUD_LOWTICS].y), 0, tallnum);

  00e3a	68 00 00 00 00	 push	 OFFSET _tallnum
  00e3f	6a 00		 push	 0
  00e41	b8 08 00 00 00	 mov	 eax, 8
  00e46	c1 e0 04	 shl	 eax, 4
  00e49	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _hudinfo[eax+4]
  00e4f	51		 push	 ecx
  00e50	e8 00 00 00 00	 call	 _SCY
  00e55	83 c4 04	 add	 esp, 4
  00e58	50		 push	 eax
  00e59	ba 08 00 00 00	 mov	 edx, 8
  00e5e	c1 e2 04	 shl	 edx, 4
  00e61	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00e67	50		 push	 eax
  00e68	e8 00 00 00 00	 call	 _SCX
  00e6d	83 c4 04	 add	 esp, 4
  00e70	50		 push	 eax
  00e71	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00e76	83 c4 10	 add	 esp, 16			; 00000010H
$LN54@ST_overlay:

; 2053 : 
; 2054 : 				// colon location
; 2055 : 				V_DrawScaledPatch(SCX(hudinfo[HUD_TIMETICCOLON].x), SCY(hudinfo[HUD_TIMETICCOLON].y), V_NOSCALESTART|V_TRANSLUCENT, sbocolon);

  00e79	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbocolon
  00e7e	50		 push	 eax
  00e7f	68 00 00 41 00	 push	 4259840			; 00410000H
  00e84	b9 08 00 00 00	 mov	 ecx, 8
  00e89	6b d1 16	 imul	 edx, ecx, 22
  00e8c	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00e92	50		 push	 eax
  00e93	e8 00 00 00 00	 call	 _SCY
  00e98	83 c4 04	 add	 esp, 4
  00e9b	50		 push	 eax
  00e9c	b9 08 00 00 00	 mov	 ecx, 8
  00ea1	6b d1 16	 imul	 edx, ecx, 22
  00ea4	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00eaa	50		 push	 eax
  00eab	e8 00 00 00 00	 call	 _SCX
  00eb0	83 c4 04	 add	 esp, 4
  00eb3	50		 push	 eax
  00eb4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00eb9	83 c4 10	 add	 esp, 16			; 00000010H

; 2056 : 				ST_DrawOverlayNum(SCX(hudinfo[HUD_TICS].x), SCY(hudinfo[HUD_TICS].y), tics, tallnum);

  00ebc	68 00 00 00 00	 push	 OFFSET _tallnum
  00ec1	8b 45 e0	 mov	 eax, DWORD PTR _tics$13[ebp]
  00ec4	50		 push	 eax
  00ec5	b9 08 00 00 00	 mov	 ecx, 8
  00eca	6b d1 11	 imul	 edx, ecx, 17
  00ecd	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00ed3	50		 push	 eax
  00ed4	e8 00 00 00 00	 call	 _SCY
  00ed9	83 c4 04	 add	 esp, 4
  00edc	50		 push	 eax
  00edd	b9 08 00 00 00	 mov	 ecx, 8
  00ee2	6b d1 11	 imul	 edx, ecx, 17
  00ee5	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00eeb	50		 push	 eax
  00eec	e8 00 00 00 00	 call	 _SCX
  00ef1	83 c4 04	 add	 esp, 4
  00ef4	50		 push	 eax
  00ef5	e8 00 00 00 00	 call	 _ST_DrawOverlayNum
  00efa	83 c4 10	 add	 esp, 16			; 00000010H
$LN52@ST_overlay:

; 2057 : 			}
; 2058 : 
; 2059 : 			// TIME location
; 2060 : 			V_DrawScaledPatch(SCX(hudinfo[HUD_TIME].x), SCY(hudinfo[HUD_TIME].y), V_NOSCALESTART|V_TRANSLUCENT, sbotime);

  00efd	a1 00 00 00 00	 mov	 eax, DWORD PTR _sbotime
  00f02	50		 push	 eax
  00f03	68 00 00 41 00	 push	 4259840			; 00410000H
  00f08	b9 08 00 00 00	 mov	 ecx, 8
  00f0d	6b d1 0f	 imul	 edx, ecx, 15
  00f10	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  00f16	50		 push	 eax
  00f17	e8 00 00 00 00	 call	 _SCY
  00f1c	83 c4 04	 add	 esp, 4
  00f1f	50		 push	 eax
  00f20	b9 08 00 00 00	 mov	 ecx, 8
  00f25	6b d1 0f	 imul	 edx, ecx, 15
  00f28	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  00f2e	50		 push	 eax
  00f2f	e8 00 00 00 00	 call	 _SCX
  00f34	83 c4 04	 add	 esp, 4
  00f37	50		 push	 eax
  00f38	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00f3d	83 c4 10	 add	 esp, 16			; 00000010H
$LN44@ST_overlay:

; 2061 : 
; 2062 : 		}
; 2063 : 	}
; 2064 : 
; 2065 : 	// GAME OVER pic
; 2066 : 	if ((gametype == GT_COOP || gametype == GT_RACE) && stplyr->lives <= 0 && !(hu_showscores && (netgame || multiplayer)))

  00f40	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00f47	85 c0		 test	 eax, eax
  00f49	74 10		 je	 SHORT $LN56@ST_overlay
  00f4b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00f52	83 f8 02	 cmp	 eax, 2
  00f55	0f 85 82 00 00
	00		 jne	 $LN55@ST_overlay
$LN56@ST_overlay:
  00f5b	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00f60	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  00f67	7f 74		 jg	 SHORT $LN55@ST_overlay
  00f69	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  00f70	74 12		 je	 SHORT $LN57@ST_overlay
  00f72	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00f79	75 62		 jne	 SHORT $LN55@ST_overlay
  00f7b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00f82	75 59		 jne	 SHORT $LN55@ST_overlay
$LN57@ST_overlay:

; 2067 : 	{
; 2068 : 		patch_t *p;
; 2069 : 
; 2070 : 		if (countdown == 1)

  00f84	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _countdown, 1
  00f8b	75 0a		 jne	 SHORT $LN58@ST_overlay

; 2071 : 			p = timeover;

  00f8d	a1 00 00 00 00	 mov	 eax, DWORD PTR _timeover
  00f92	89 45 dc	 mov	 DWORD PTR _p$12[ebp], eax
  00f95	eb 08		 jmp	 SHORT $LN59@ST_overlay
$LN58@ST_overlay:

; 2072 : 		else
; 2073 : 			p = sboover;

  00f97	a1 00 00 00 00	 mov	 eax, DWORD PTR _sboover
  00f9c	89 45 dc	 mov	 DWORD PTR _p$12[ebp], eax
$LN59@ST_overlay:

; 2074 : 
; 2075 : 		V_DrawScaledPatch((BASEVIDWIDTH - SHORT(p->width))/2, STRINGY(BASEVIDHEIGHT/2 - (SHORT(p->height)/2)), 0, p);

  00f9f	8b 45 dc	 mov	 eax, DWORD PTR _p$12[ebp]
  00fa2	50		 push	 eax
  00fa3	6a 00		 push	 0
  00fa5	8b 4d dc	 mov	 ecx, DWORD PTR _p$12[ebp]
  00fa8	0f bf 41 02	 movsx	 eax, WORD PTR [ecx+2]
  00fac	99		 cdq
  00fad	2b c2		 sub	 eax, edx
  00faf	d1 f8		 sar	 eax, 1
  00fb1	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  00fb6	2b d0		 sub	 edx, eax
  00fb8	52		 push	 edx
  00fb9	e8 00 00 00 00	 call	 _STRINGY
  00fbe	83 c4 04	 add	 esp, 4
  00fc1	50		 push	 eax
  00fc2	8b 45 dc	 mov	 eax, DWORD PTR _p$12[ebp]
  00fc5	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00fc8	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  00fcd	2b c1		 sub	 eax, ecx
  00fcf	99		 cdq
  00fd0	2b c2		 sub	 eax, edx
  00fd2	d1 f8		 sar	 eax, 1
  00fd4	50		 push	 eax
  00fd5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00fda	83 c4 10	 add	 esp, 16			; 00000010H
$LN55@ST_overlay:

; 2076 : 	}
; 2077 : 
; 2078 : 	if (cv_objectplace.value && stplyr->mo && stplyr->mo->target)

  00fdd	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00fe4	0f 84 af 01 00
	00		 je	 $LN60@ST_overlay
  00fea	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00fef	83 38 00	 cmp	 DWORD PTR [eax], 0
  00ff2	0f 84 a1 01 00
	00		 je	 $LN60@ST_overlay
  00ff8	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00ffd	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fff	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  01006	0f 84 8d 01 00
	00		 je	 $LN60@ST_overlay

; 2079 : 	{
; 2080 : 		char x[8], y[8], z[8];
; 2081 : 		char doomednum[8], thingflags[8];
; 2082 : 		sprintf(x, "%d", stplyr->mo->x>>FRACBITS);

  0100c	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01011	8b 08		 mov	 ecx, DWORD PTR [eax]
  01013	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01016	c1 fa 10	 sar	 edx, 16			; 00000010H
  01019	52		 push	 edx
  0101a	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0101f	8d 45 d4	 lea	 eax, DWORD PTR _x$11[ebp]
  01022	50		 push	 eax
  01023	e8 00 00 00 00	 call	 _sprintf
  01028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2083 : 		sprintf(y, "%d", stplyr->mo->y>>FRACBITS);

  0102b	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01030	8b 08		 mov	 ecx, DWORD PTR [eax]
  01032	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01035	c1 fa 10	 sar	 edx, 16			; 00000010H
  01038	52		 push	 edx
  01039	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0103e	8d 45 cc	 lea	 eax, DWORD PTR _y$10[ebp]
  01041	50		 push	 eax
  01042	e8 00 00 00 00	 call	 _sprintf
  01047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2084 : 		sprintf(z, "%d", stplyr->mo->z>>FRACBITS);

  0104a	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0104f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01051	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01054	c1 fa 10	 sar	 edx, 16			; 00000010H
  01057	52		 push	 edx
  01058	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0105d	8d 45 c4	 lea	 eax, DWORD PTR _z$9[ebp]
  01060	50		 push	 eax
  01061	e8 00 00 00 00	 call	 _sprintf
  01066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2085 : 		sprintf(doomednum, "%d", stplyr->mo->target->info->doomednum);

  01069	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  0106e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01070	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  01076	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0107c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0107e	51		 push	 ecx
  0107f	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  01084	8d 55 bc	 lea	 edx, DWORD PTR _doomednum$8[ebp]
  01087	52		 push	 edx
  01088	e8 00 00 00 00	 call	 _sprintf
  0108d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 : 		sprintf(thingflags, "%d", cv_objflags.value);

  01090	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_objflags+20
  01095	50		 push	 eax
  01096	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0109b	8d 4d b4	 lea	 ecx, DWORD PTR _thingflags$7[ebp]
  0109e	51		 push	 ecx
  0109f	e8 00 00 00 00	 call	 _sprintf
  010a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2087 : 		V_DrawString(16, 98, 0, "X =");

  010a7	68 00 00 00 00	 push	 OFFSET ??_C@_03ICKHAJPA@X?5?$DN@
  010ac	6a 00		 push	 0
  010ae	6a 62		 push	 98			; 00000062H
  010b0	6a 10		 push	 16			; 00000010H
  010b2	e8 00 00 00 00	 call	 _V_DrawString
  010b7	83 c4 10	 add	 esp, 16			; 00000010H

; 2088 : 		V_DrawString(48, 98, 0, x);

  010ba	8d 45 d4	 lea	 eax, DWORD PTR _x$11[ebp]
  010bd	50		 push	 eax
  010be	6a 00		 push	 0
  010c0	6a 62		 push	 98			; 00000062H
  010c2	6a 30		 push	 48			; 00000030H
  010c4	e8 00 00 00 00	 call	 _V_DrawString
  010c9	83 c4 10	 add	 esp, 16			; 00000010H

; 2089 : 		V_DrawString(16, 108, 0, "Y =");

  010cc	68 00 00 00 00	 push	 OFFSET ??_C@_03DKBLGOJF@Y?5?$DN@
  010d1	6a 00		 push	 0
  010d3	6a 6c		 push	 108			; 0000006cH
  010d5	6a 10		 push	 16			; 00000010H
  010d7	e8 00 00 00 00	 call	 _V_DrawString
  010dc	83 c4 10	 add	 esp, 16			; 00000010H

; 2090 : 		V_DrawString(48, 108, 0, y);

  010df	8d 45 cc	 lea	 eax, DWORD PTR _y$10[ebp]
  010e2	50		 push	 eax
  010e3	6a 00		 push	 0
  010e5	6a 6c		 push	 108			; 0000006cH
  010e7	6a 30		 push	 48			; 00000030H
  010e9	e8 00 00 00 00	 call	 _V_DrawString
  010ee	83 c4 10	 add	 esp, 16			; 00000010H

; 2091 : 		V_DrawString(16, 118, 0, "Z =");

  010f1	68 00 00 00 00	 push	 OFFSET ??_C@_03CIKOMBHL@Z?5?$DN@
  010f6	6a 00		 push	 0
  010f8	6a 76		 push	 118			; 00000076H
  010fa	6a 10		 push	 16			; 00000010H
  010fc	e8 00 00 00 00	 call	 _V_DrawString
  01101	83 c4 10	 add	 esp, 16			; 00000010H

; 2092 : 		V_DrawString(48, 118, 0, z);

  01104	8d 45 c4	 lea	 eax, DWORD PTR _z$9[ebp]
  01107	50		 push	 eax
  01108	6a 00		 push	 0
  0110a	6a 76		 push	 118			; 00000076H
  0110c	6a 30		 push	 48			; 00000030H
  0110e	e8 00 00 00 00	 call	 _V_DrawString
  01113	83 c4 10	 add	 esp, 16			; 00000010H

; 2093 : 		V_DrawString(16, 128, 0, "thing # =");

  01116	68 00 00 00 00	 push	 OFFSET ??_C@_09CEFDADJH@thing?5?$CD?5?$DN@
  0111b	6a 00		 push	 0
  0111d	68 80 00 00 00	 push	 128			; 00000080H
  01122	6a 10		 push	 16			; 00000010H
  01124	e8 00 00 00 00	 call	 _V_DrawString
  01129	83 c4 10	 add	 esp, 16			; 00000010H

; 2094 : 		V_DrawString(16+84, 128, 0, doomednum);

  0112c	8d 45 bc	 lea	 eax, DWORD PTR _doomednum$8[ebp]
  0112f	50		 push	 eax
  01130	6a 00		 push	 0
  01132	68 80 00 00 00	 push	 128			; 00000080H
  01137	6a 64		 push	 100			; 00000064H
  01139	e8 00 00 00 00	 call	 _V_DrawString
  0113e	83 c4 10	 add	 esp, 16			; 00000010H

; 2095 : 		V_DrawString(16, 138, 0, "flags =");

  01141	68 00 00 00 00	 push	 OFFSET ??_C@_07DNKNJLF@flags?5?$DN@
  01146	6a 00		 push	 0
  01148	68 8a 00 00 00	 push	 138			; 0000008aH
  0114d	6a 10		 push	 16			; 00000010H
  0114f	e8 00 00 00 00	 call	 _V_DrawString
  01154	83 c4 10	 add	 esp, 16			; 00000010H

; 2096 : 		V_DrawString(16+56, 138, 0, thingflags);

  01157	8d 45 b4	 lea	 eax, DWORD PTR _thingflags$7[ebp]
  0115a	50		 push	 eax
  0115b	6a 00		 push	 0
  0115d	68 8a 00 00 00	 push	 138			; 0000008aH
  01162	6a 48		 push	 72			; 00000048H
  01164	e8 00 00 00 00	 call	 _V_DrawString
  01169	83 c4 10	 add	 esp, 16			; 00000010H

; 2097 : 		V_DrawString(16, 148, 0, "snap =");

  0116c	68 00 00 00 00	 push	 OFFSET ??_C@_06BACFHECC@snap?5?$DN@
  01171	6a 00		 push	 0
  01173	68 94 00 00 00	 push	 148			; 00000094H
  01178	6a 10		 push	 16			; 00000010H
  0117a	e8 00 00 00 00	 call	 _V_DrawString
  0117f	83 c4 10	 add	 esp, 16			; 00000010H

; 2098 : 		V_DrawString(16+48, 148, 0, cv_snapto.string);

  01182	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_snapto+24
  01187	50		 push	 eax
  01188	6a 00		 push	 0
  0118a	68 94 00 00 00	 push	 148			; 00000094H
  0118f	6a 40		 push	 64			; 00000040H
  01191	e8 00 00 00 00	 call	 _V_DrawString
  01196	83 c4 10	 add	 esp, 16			; 00000010H
$LN60@ST_overlay:

; 2099 : 	}
; 2100 : 
; 2101 : 	if (!hu_showscores) // hide the following if TAB is held

  01199	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  011a0	0f 85 b3 01 00
	00		 jne	 $LN80@ST_overlay

; 2102 : 	{
; 2103 : 		// Countdown timer for Race Mode
; 2104 : 		if (countdown)

  011a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _countdown, 0
  011ad	74 41		 je	 SHORT $LN62@ST_overlay

; 2105 : 		{
; 2106 : 			char scountdown[33];
; 2107 : 			sprintf(scountdown, "%d", countdown/TICRATE);

  011af	a1 00 00 00 00	 mov	 eax, DWORD PTR _countdown
  011b4	33 d2		 xor	 edx, edx
  011b6	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  011bb	f7 f1		 div	 ecx
  011bd	50		 push	 eax
  011be	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  011c3	8d 55 90	 lea	 edx, DWORD PTR _scountdown$6[ebp]
  011c6	52		 push	 edx
  011c7	e8 00 00 00 00	 call	 _sprintf
  011cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2108 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(176), 0, scountdown);

  011cf	8d 45 90	 lea	 eax, DWORD PTR _scountdown$6[ebp]
  011d2	50		 push	 eax
  011d3	6a 00		 push	 0
  011d5	68 b0 00 00 00	 push	 176			; 000000b0H
  011da	e8 00 00 00 00	 call	 _STRINGY
  011df	83 c4 04	 add	 esp, 4
  011e2	50		 push	 eax
  011e3	68 a0 00 00 00	 push	 160			; 000000a0H
  011e8	e8 00 00 00 00	 call	 _V_DrawCenteredString
  011ed	83 c4 10	 add	 esp, 16			; 00000010H
$LN62@ST_overlay:

; 2109 : 		}
; 2110 : 
; 2111 : 		// If you are in overtime, put a big honkin' flashin' message on the screen.
; 2112 : 		if ((gametype == GT_MATCH || gametype == GT_CTF) && cv_overtime.value
; 2113 : 			&& (leveltime > (timelimitintics + TICRATE/2)) && cv_timelimit.value && (leveltime/TICRATE % 2 == 0))

  011f0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  011f7	83 f8 01	 cmp	 eax, 1
  011fa	74 10		 je	 SHORT $LN64@ST_overlay
  011fc	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01203	83 f8 04	 cmp	 eax, 4
  01206	0f 85 90 00 00
	00		 jne	 $LN66@ST_overlay
$LN64@ST_overlay:
  0120c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_overtime+20, 0
  01213	0f 84 83 00 00
	00		 je	 $LN66@ST_overlay
  01219	a1 00 00 00 00	 mov	 eax, DWORD PTR _timelimitintics
  0121e	83 c0 11	 add	 eax, 17			; 00000011H
  01221	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  01227	76 73		 jbe	 SHORT $LN66@ST_overlay
  01229	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_timelimit+20, 0
  01230	74 6a		 je	 SHORT $LN66@ST_overlay
  01232	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  01237	33 d2		 xor	 edx, edx
  01239	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  0123e	f7 f1		 div	 ecx
  01240	33 d2		 xor	 edx, edx
  01242	b9 02 00 00 00	 mov	 ecx, 2
  01247	f7 f1		 div	 ecx
  01249	85 d2		 test	 edx, edx
  0124b	75 4f		 jne	 SHORT $LN66@ST_overlay

; 2114 : 		{
; 2115 : 			if (splitscreen)

  0124d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  01254	74 24		 je	 SHORT $LN65@ST_overlay

; 2116 : 				V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(168), 0, "OVERTIME!");

  01256	68 00 00 00 00	 push	 OFFSET ??_C@_09PGPHGNLO@OVERTIME?$CB@
  0125b	6a 00		 push	 0
  0125d	68 a8 00 00 00	 push	 168			; 000000a8H
  01262	e8 00 00 00 00	 call	 _STRINGY
  01267	83 c4 04	 add	 esp, 4
  0126a	50		 push	 eax
  0126b	68 a0 00 00 00	 push	 160			; 000000a0H
  01270	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01275	83 c4 10	 add	 esp, 16			; 00000010H
  01278	eb 22		 jmp	 SHORT $LN66@ST_overlay
$LN65@ST_overlay:

; 2117 : 			else
; 2118 : 				V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(184), 0, "OVERTIME!");

  0127a	68 00 00 00 00	 push	 OFFSET ??_C@_09PGPHGNLO@OVERTIME?$CB@
  0127f	6a 00		 push	 0
  01281	68 b8 00 00 00	 push	 184			; 000000b8H
  01286	e8 00 00 00 00	 call	 _STRINGY
  0128b	83 c4 04	 add	 esp, 4
  0128e	50		 push	 eax
  0128f	68 a0 00 00 00	 push	 160			; 000000a0H
  01294	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01299	83 c4 10	 add	 esp, 16			; 00000010H
$LN66@ST_overlay:

; 2119 : 		}
; 2120 : 
; 2121 : 		// Draw Match-related stuff
; 2122 : 		//\note Match HUD is drawn no matter what gametype.
; 2123 : 		// ... just not if you're a spectator.
; 2124 : 		if (!((((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG) && stplyr->spectator)

  0129c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  012a3	83 f8 01	 cmp	 eax, 1
  012a6	75 09		 jne	 SHORT $LN70@ST_overlay
  012a8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  012af	74 0c		 je	 SHORT $LN69@ST_overlay
$LN70@ST_overlay:
  012b1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  012b8	83 f8 03	 cmp	 eax, 3
  012bb	75 10		 jne	 SHORT $LN68@ST_overlay
$LN69@ST_overlay:
  012bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  012c2	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  012c9	85 c9		 test	 ecx, ecx
  012cb	75 35		 jne	 SHORT $LN67@ST_overlay
$LN68@ST_overlay:
  012cd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  012d4	83 f8 01	 cmp	 eax, 1
  012d7	75 09		 jne	 SHORT $LN73@ST_overlay
  012d9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  012e0	75 0c		 jne	 SHORT $LN72@ST_overlay
$LN73@ST_overlay:
  012e2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  012e9	83 f8 04	 cmp	 eax, 4
  012ec	75 0e		 jne	 SHORT $LN71@ST_overlay
$LN72@ST_overlay:
  012ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  012f3	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  012fa	74 06		 je	 SHORT $LN67@ST_overlay
$LN71@ST_overlay:

; 2125 : 		 || (((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF) && !stplyr->ctfteam)))
; 2126 : 			ST_drawMatchHUD();

  012fc	e8 00 00 00 00	 call	 _ST_drawMatchHUD
  01301	90		 npad	 1
$LN67@ST_overlay:

; 2127 : 
; 2128 : 		// Race HUD Stuff
; 2129 : 		if (gametype == GT_RACE)

  01302	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01309	83 f8 02	 cmp	 eax, 2
  0130c	75 08		 jne	 SHORT $LN74@ST_overlay

; 2130 : 			ST_drawRaceHUD();

  0130e	e8 00 00 00 00	 call	 _ST_drawRaceHUD
  01313	90		 npad	 1
  01314	eb 43		 jmp	 SHORT $LN80@ST_overlay
$LN74@ST_overlay:

; 2131 : 		// Tag HUD Stuff
; 2132 : 		else if (gametype == GT_TAG)

  01316	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0131d	83 f8 03	 cmp	 eax, 3
  01320	75 08		 jne	 SHORT $LN76@ST_overlay

; 2133 : 			ST_drawTagHUD();

  01322	e8 00 00 00 00	 call	 _ST_drawTagHUD
  01327	90		 npad	 1
  01328	eb 2f		 jmp	 SHORT $LN80@ST_overlay
$LN76@ST_overlay:

; 2134 : 		// CTF HUD Stuff
; 2135 : 		else if (gametype == GT_CTF)

  0132a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01331	83 f8 04	 cmp	 eax, 4
  01334	75 08		 jne	 SHORT $LN78@ST_overlay

; 2136 : 			ST_drawCTFHUD();

  01336	e8 00 00 00 00	 call	 _ST_drawCTFHUD
  0133b	90		 npad	 1
  0133c	eb 1b		 jmp	 SHORT $LN80@ST_overlay
$LN78@ST_overlay:

; 2137 : 		// Team Match HUD Stuff
; 2138 : 		else if (gametype == GT_MATCH && cv_matchtype.value)

  0133e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01345	83 f8 01	 cmp	 eax, 1
  01348	75 0f		 jne	 SHORT $LN80@ST_overlay
  0134a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  01351	74 06		 je	 SHORT $LN80@ST_overlay

; 2139 : 			ST_drawTeamMatchHUD();

  01353	e8 00 00 00 00	 call	 _ST_drawTeamMatchHUD
  01358	90		 npad	 1
$LN80@ST_overlay:

; 2140 : 		// Chaos HUD Stuff
; 2141 : #ifdef CHAOSISNOTDEADYET
; 2142 : 		else if (gametype == GT_CHAOS)
; 2143 : 			ST_drawChaosHUD();
; 2144 : #endif
; 2145 : 	}
; 2146 : 
; 2147 : 	// Special Stage HUD
; 2148 : 	if (!useNightsSS && gamemap >= sstage_start && gamemap <= sstage_end)

  01359	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _useNightsSS, 0
  01360	75 2a		 jne	 SHORT $LN81@ST_overlay
  01362	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  01369	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _sstage_start
  01370	3b c1		 cmp	 eax, ecx
  01372	7c 18		 jl	 SHORT $LN81@ST_overlay
  01374	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0137b	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _sstage_end
  01382	3b c1		 cmp	 eax, ecx
  01384	7f 06		 jg	 SHORT $LN81@ST_overlay

; 2149 : 		ST_drawSpecialStageHUD();

  01386	e8 00 00 00 00	 call	 _ST_drawSpecialStageHUD
  0138b	90		 npad	 1
$LN81@ST_overlay:

; 2150 : 
; 2151 : 	if (!hu_showscores) // again, hide the following if TAB is held

  0138c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  01393	0f 85 bf 01 00
	00		 jne	 $LN89@ST_overlay

; 2152 : 	{
; 2153 : 		// Emerald Hunt Indicators
; 2154 : 		if (hunt1 && hunt1->health)

  01399	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hunt1, 0
  013a0	74 1e		 je	 SHORT $LN83@ST_overlay
  013a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt1
  013a7	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  013ae	74 10		 je	 SHORT $LN83@ST_overlay

; 2155 : 			ST_drawEmeraldHuntIcon(hunt1, HUD_HUNTPIC1);

  013b0	6a 1e		 push	 30			; 0000001eH
  013b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt1
  013b7	50		 push	 eax
  013b8	e8 00 00 00 00	 call	 _ST_drawEmeraldHuntIcon
  013bd	83 c4 08	 add	 esp, 8
$LN83@ST_overlay:

; 2156 : 		if (hunt2 && hunt2->health)

  013c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hunt2, 0
  013c7	74 1e		 je	 SHORT $LN84@ST_overlay
  013c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt2
  013ce	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  013d5	74 10		 je	 SHORT $LN84@ST_overlay

; 2157 : 			ST_drawEmeraldHuntIcon(hunt2, HUD_HUNTPIC2);

  013d7	6a 1f		 push	 31			; 0000001fH
  013d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt2
  013de	50		 push	 eax
  013df	e8 00 00 00 00	 call	 _ST_drawEmeraldHuntIcon
  013e4	83 c4 08	 add	 esp, 8
$LN84@ST_overlay:

; 2158 : 		if (hunt3 && hunt3->health)

  013e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hunt3, 0
  013ee	74 1e		 je	 SHORT $LN85@ST_overlay
  013f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt3
  013f5	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  013fc	74 10		 je	 SHORT $LN85@ST_overlay

; 2159 : 			ST_drawEmeraldHuntIcon(hunt3, HUD_HUNTPIC3);

  013fe	6a 20		 push	 32			; 00000020H
  01400	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt3
  01405	50		 push	 eax
  01406	e8 00 00 00 00	 call	 _ST_drawEmeraldHuntIcon
  0140b	83 c4 08	 add	 esp, 8
$LN85@ST_overlay:

; 2160 : 
; 2161 : 		if (stplyr->powers[pw_gravityboots] > 3*TICRATE || (stplyr->powers[pw_gravityboots] && leveltime & 1))

  0140e	b8 04 00 00 00	 mov	 eax, 4
  01413	c1 e0 04	 shl	 eax, 4
  01416	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  0141c	83 7c 01 38 69	 cmp	 DWORD PTR [ecx+eax+56], 105 ; 00000069H
  01421	7f 1f		 jg	 SHORT $LN87@ST_overlay
  01423	b8 04 00 00 00	 mov	 eax, 4
  01428	c1 e0 04	 shl	 eax, 4
  0142b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  01431	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  01436	74 44		 je	 SHORT $LN86@ST_overlay
  01438	a1 00 00 00 00	 mov	 eax, DWORD PTR _leveltime
  0143d	83 e0 01	 and	 eax, 1
  01440	74 3a		 je	 SHORT $LN86@ST_overlay
$LN87@ST_overlay:

; 2162 : 			V_DrawScaledPatch(hudinfo[HUD_GRAVBOOTSICO].x, STRINGY(hudinfo[HUD_GRAVBOOTSICO].y), V_SNAPTORIGHT, gravboots);

  01442	a1 00 00 00 00	 mov	 eax, DWORD PTR _gravboots
  01447	50		 push	 eax
  01448	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0144d	b9 08 00 00 00	 mov	 ecx, 8
  01452	6b d1 21	 imul	 edx, ecx, 33
  01455	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx+4]
  0145b	50		 push	 eax
  0145c	e8 00 00 00 00	 call	 _STRINGY
  01461	83 c4 04	 add	 esp, 4
  01464	50		 push	 eax
  01465	b9 08 00 00 00	 mov	 ecx, 8
  0146a	6b d1 21	 imul	 edx, ecx, 33
  0146d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _hudinfo[edx]
  01473	50		 push	 eax
  01474	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  01479	83 c4 10	 add	 esp, 16			; 00000010H
$LN86@ST_overlay:

; 2163 : 
; 2164 : 		if(!P_IsLocalPlayer(stplyr))

  0147c	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01481	50		 push	 eax
  01482	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  01487	83 c4 04	 add	 esp, 4
  0148a	85 c0		 test	 eax, eax
  0148c	75 5b		 jne	 SHORT $LN88@ST_overlay

; 2165 : 		{
; 2166 : 			char name[MAXPLAYERNAME+1];
; 2167 : 			// shorten the name if its more than twelve characters.
; 2168 : 			strlcpy(name, player_names[stplyr-players], 13);

  0148e	6a 0d		 push	 13			; 0000000dH
  01490	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01495	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0149a	99		 cdq
  0149b	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  014a0	f7 f9		 idiv	 ecx
  014a2	6b d0 16	 imul	 edx, eax, 22
  014a5	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  014ab	52		 push	 edx
  014ac	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _name$5[ebp]
  014b2	50		 push	 eax
  014b3	e8 00 00 00 00	 call	 _strlcpy
  014b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2169 : 
; 2170 : 			// Show name of player being displayed
; 2171 : 			V_DrawCenteredString((BASEVIDWIDTH/6), BASEVIDHEIGHT-80, 0, "Viewpoint:");

  014bb	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LFKAMMPB@Viewpoint?3@
  014c0	6a 00		 push	 0
  014c2	6a 78		 push	 120			; 00000078H
  014c4	6a 35		 push	 53			; 00000035H
  014c6	e8 00 00 00 00	 call	 _V_DrawCenteredString
  014cb	83 c4 10	 add	 esp, 16			; 00000010H

; 2172 : 			V_DrawCenteredString((BASEVIDWIDTH/6), BASEVIDHEIGHT-64, V_ALLOWLOWERCASE, name);

  014ce	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _name$5[ebp]
  014d4	50		 push	 eax
  014d5	68 00 00 04 00	 push	 262144			; 00040000H
  014da	68 88 00 00 00	 push	 136			; 00000088H
  014df	6a 35		 push	 53			; 00000035H
  014e1	e8 00 00 00 00	 call	 _V_DrawCenteredString
  014e6	83 c4 10	 add	 esp, 16			; 00000010H
$LN88@ST_overlay:

; 2173 : 		}
; 2174 : 
; 2175 : 		// This is where we draw all the fun cheese if you have the chasecam off!
; 2176 : 		if ((stplyr == &players[consoleplayer] && !cv_chasecam.value)
; 2177 : 			|| ((splitscreen && stplyr == &players[secondarydisplayplayer]) && !cv_chasecam2.value)
; 2178 : 			|| (stplyr == &players[displayplayer] && !cv_chasecam.value))

  014e9	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  014f3	05 00 00 00 00	 add	 eax, OFFSET _players
  014f8	39 05 00 00 00
	00		 cmp	 DWORD PTR _stplyr, eax
  014fe	75 09		 jne	 SHORT $LN91@ST_overlay
  01500	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  01507	74 49		 je	 SHORT $LN90@ST_overlay
$LN91@ST_overlay:
  01509	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  01510	74 20		 je	 SHORT $LN92@ST_overlay
  01512	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0151c	05 00 00 00 00	 add	 eax, OFFSET _players
  01521	39 05 00 00 00
	00		 cmp	 DWORD PTR _stplyr, eax
  01527	75 09		 jne	 SHORT $LN92@ST_overlay
  01529	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  01530	74 20		 je	 SHORT $LN90@ST_overlay
$LN92@ST_overlay:
  01532	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0153c	05 00 00 00 00	 add	 eax, OFFSET _players
  01541	39 05 00 00 00
	00		 cmp	 DWORD PTR _stplyr, eax
  01547	75 0f		 jne	 SHORT $LN89@ST_overlay
  01549	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  01550	75 06		 jne	 SHORT $LN89@ST_overlay
$LN90@ST_overlay:

; 2179 : 		{
; 2180 : 			ST_drawFirstPersonHUD();

  01552	e8 00 00 00 00	 call	 _ST_drawFirstPersonHUD
  01557	90		 npad	 1
$LN89@ST_overlay:

; 2181 : 		}
; 2182 : 	}
; 2183 : 
; 2184 : 	if (!(netgame || multiplayer) && !modifiedgame && gamemap == 11 && ALL7EMERALDS(emeralds)
; 2185 : 		&& stplyr->mo && stplyr->mo->subsector && stplyr->mo->subsector->sector-sectors == 1361)

  01558	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0155f	0f 85 1c 02 00
	00		 jne	 $LN95@ST_overlay
  01565	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0156c	0f 85 0f 02 00
	00		 jne	 $LN95@ST_overlay
  01572	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  01579	0f 85 02 02 00
	00		 jne	 $LN95@ST_overlay
  0157f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  01586	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  01589	0f 85 f2 01 00
	00		 jne	 $LN95@ST_overlay
  0158f	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  01596	83 e0 7f	 and	 eax, 127		; 0000007fH
  01599	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0159c	0f 85 df 01 00
	00		 jne	 $LN95@ST_overlay
  015a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  015a7	83 38 00	 cmp	 DWORD PTR [eax], 0
  015aa	0f 84 d1 01 00
	00		 je	 $LN95@ST_overlay
  015b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  015b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  015b7	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  015bb	0f 84 c0 01 00
	00		 je	 $LN95@ST_overlay
  015c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  015c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  015c8	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  015cb	8b 02		 mov	 eax, DWORD PTR [edx]
  015cd	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _sectors
  015d3	99		 cdq
  015d4	b9 f8 00 00 00	 mov	 ecx, 248		; 000000f8H
  015d9	f7 f9		 idiv	 ecx
  015db	3d 51 05 00 00	 cmp	 eax, 1361		; 00000551H
  015e0	0f 85 9b 01 00
	00		 jne	 $LN95@ST_overlay

; 2186 : 	{
; 2187 : 		if (grade & 2048)

  015e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  015eb	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  015f0	0f 84 88 00 00
	00		 je	 $LN94@ST_overlay

; 2188 : 		{
; 2189 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 70, 0, "I, Pope Rededict XVI proclaim");

  015f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FOAIOHHE@I?0?5Pope?5Rededict?5XVI?5proclaim@
  015fb	6a 00		 push	 0
  015fd	6a 46		 push	 70			; 00000046H
  015ff	68 a0 00 00 00	 push	 160			; 000000a0H
  01604	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01609	83 c4 10	 add	 esp, 16			; 00000010H

; 2190 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 80, 0, "AJ & Amy");

  0160c	68 00 00 00 00	 push	 OFFSET ??_C@_08CKJBHHBH@AJ?5?$CG?5Amy@
  01611	6a 00		 push	 0
  01613	6a 50		 push	 80			; 00000050H
  01615	68 a0 00 00 00	 push	 160			; 000000a0H
  0161a	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0161f	83 c4 10	 add	 esp, 16			; 00000010H

; 2191 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 90, 0, "Husband & Wife");

  01622	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BFEEDBGA@Husband?5?$CG?5Wife@
  01627	6a 00		 push	 0
  01629	6a 5a		 push	 90			; 0000005aH
  0162b	68 a0 00 00 00	 push	 160			; 000000a0H
  01630	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01635	83 c4 10	 add	 esp, 16			; 00000010H

; 2192 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 100, 0, "on this day");

  01638	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GMKHAHHB@on?5this?5day@
  0163d	6a 00		 push	 0
  0163f	6a 64		 push	 100			; 00000064H
  01641	68 a0 00 00 00	 push	 160			; 000000a0H
  01646	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0164b	83 c4 10	 add	 esp, 16			; 00000010H

; 2193 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 110, 0, "May 16, 2009");

  0164e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HJDKELB@May?516?0?52009@
  01653	6a 00		 push	 0
  01655	6a 6e		 push	 110			; 0000006eH
  01657	68 a0 00 00 00	 push	 160			; 000000a0H
  0165c	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01661	83 c4 10	 add	 esp, 16			; 00000010H

; 2194 : 
; 2195 : 			P_GivePlayerRings(stplyr, 9999, true);

  01664	6a 01		 push	 1
  01666	68 0f 27 00 00	 push	 9999			; 0000270fH
  0166b	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01670	50		 push	 eax
  01671	e8 00 00 00 00	 call	 _P_GivePlayerRings
  01676	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2196 : 		}

  01679	e9 03 01 00 00	 jmp	 $LN95@ST_overlay
$LN94@ST_overlay:

; 2197 : 		else
; 2198 : 		{
; 2199 : 			V_DrawCenteredString(BASEVIDWIDTH/2,  60, 0, "Oh... it's you again...");

  0167e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OPIEGEGP@Oh?4?4?4?5it?8s?5you?5again?4?4?4@
  01683	6a 00		 push	 0
  01685	6a 3c		 push	 60			; 0000003cH
  01687	68 a0 00 00 00	 push	 160			; 000000a0H
  0168c	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01691	83 c4 10	 add	 esp, 16			; 00000010H

; 2200 : 			V_DrawCenteredString(BASEVIDWIDTH/2,  80, 0, "Look, I wanted to apologize for the way");

  01694	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@GDGJBLL@Look?0?5I?5wanted?5to?5apologize?5for@
  01699	6a 00		 push	 0
  0169b	6a 50		 push	 80			; 00000050H
  0169d	68 a0 00 00 00	 push	 160			; 000000a0H
  016a2	e8 00 00 00 00	 call	 _V_DrawCenteredString
  016a7	83 c4 10	 add	 esp, 16			; 00000010H

; 2201 : 			V_DrawCenteredString(BASEVIDWIDTH/2,  90, 0, "I've acted in the past.");

  016aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NPCFBGKA@I?8ve?5acted?5in?5the?5past?4@
  016af	6a 00		 push	 0
  016b1	6a 5a		 push	 90			; 0000005aH
  016b3	68 a0 00 00 00	 push	 160			; 000000a0H
  016b8	e8 00 00 00 00	 call	 _V_DrawCenteredString
  016bd	83 c4 10	 add	 esp, 16			; 00000010H

; 2202 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 110, 0, "I've seen the error of my ways");

  016c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CBEKALFO@I?8ve?5seen?5the?5error?5of?5my?5ways@
  016c5	6a 00		 push	 0
  016c7	6a 6e		 push	 110			; 0000006eH
  016c9	68 a0 00 00 00	 push	 160			; 000000a0H
  016ce	e8 00 00 00 00	 call	 _V_DrawCenteredString
  016d3	83 c4 10	 add	 esp, 16			; 00000010H

; 2203 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 120, 0, "and turned over a new leaf.");

  016d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PGJLBCCN@and?5turned?5over?5a?5new?5leaf?4@
  016db	6a 00		 push	 0
  016dd	6a 78		 push	 120			; 00000078H
  016df	68 a0 00 00 00	 push	 160			; 000000a0H
  016e4	e8 00 00 00 00	 call	 _V_DrawCenteredString
  016e9	83 c4 10	 add	 esp, 16			; 00000010H

; 2204 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 140, 0, "Instead of sending people to hell,");

  016ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@MEPPHIOG@Instead?5of?5sending?5people?5to?5he@
  016f1	6a 00		 push	 0
  016f3	68 8c 00 00 00	 push	 140			; 0000008cH
  016f8	68 a0 00 00 00	 push	 160			; 000000a0H
  016fd	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01702	83 c4 10	 add	 esp, 16			; 00000010H

; 2205 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 150, 0, "I now send them to heaven!");

  01705	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BPCEFBNH@I?5now?5send?5them?5to?5heaven?$CB@
  0170a	6a 00		 push	 0
  0170c	68 96 00 00 00	 push	 150			; 00000096H
  01711	68 a0 00 00 00	 push	 160			; 000000a0H
  01716	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0171b	83 c4 10	 add	 esp, 16			; 00000010H

; 2206 : 
; 2207 : 			P_LinedefExecute(4200, stplyr->mo, stplyr->mo->subsector->sector);

  0171e	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01723	8b 08		 mov	 ecx, DWORD PTR [eax]
  01725	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01728	8b 02		 mov	 eax, DWORD PTR [edx]
  0172a	50		 push	 eax
  0172b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  01731	8b 11		 mov	 edx, DWORD PTR [ecx]
  01733	52		 push	 edx
  01734	68 68 10 00 00	 push	 4200			; 00001068H
  01739	e8 00 00 00 00	 call	 _P_LinedefExecute
  0173e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2208 : 			P_LinedefExecute(4201, stplyr->mo, stplyr->mo->subsector->sector);

  01741	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01746	8b 08		 mov	 ecx, DWORD PTR [eax]
  01748	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0174b	8b 02		 mov	 eax, DWORD PTR [edx]
  0174d	50		 push	 eax
  0174e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _stplyr
  01754	8b 11		 mov	 edx, DWORD PTR [ecx]
  01756	52		 push	 edx
  01757	68 69 10 00 00	 push	 4201			; 00001069H
  0175c	e8 00 00 00 00	 call	 _P_LinedefExecute
  01761	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2209 : 			stplyr->mo->momx = stplyr->mo->momy = 0;

  01764	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01769	8b 08		 mov	 ecx, DWORD PTR [eax]
  0176b	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  01772	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _stplyr
  01778	8b 02		 mov	 eax, DWORD PTR [edx]
  0177a	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
$LN95@ST_overlay:

; 2210 : 		}
; 2211 : 	}
; 2212 : 
; 2213 : 	if (mariomode && stplyr->exiting)

  01781	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  01788	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0178d	0f 84 c9 00 00
	00		 je	 $LN99@ST_overlay
  01793	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01798	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  0179f	0f 84 b7 00 00
	00		 je	 $LN99@ST_overlay

; 2214 : 	{
; 2215 : 		/// \todo doesn't belong in status bar code AT ALL
; 2216 : 		thinker_t *th;
; 2217 : 		mobj_t *mo2;
; 2218 : 		boolean foundtoad = false;

  017a5	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _foundtoad$2[ebp], 0

; 2219 : 
; 2220 : 		// scan the remaining thinkers
; 2221 : 		// to find toad
; 2222 : 		for (th = thinkercap.next; th != &thinkercap; th = th->next)

  017af	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  017b4	89 85 74 ff ff
	ff		 mov	 DWORD PTR _th$4[ebp], eax
  017ba	eb 0f		 jmp	 SHORT $LN7@ST_overlay
$LN5@ST_overlay:
  017bc	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _th$4[ebp]
  017c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  017c5	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _th$4[ebp], ecx
$LN7@ST_overlay:
  017cb	81 bd 74 ff ff
	ff 00 00 00 00	 cmp	 DWORD PTR _th$4[ebp], OFFSET _thinkercap
  017d5	74 3a		 je	 SHORT $LN6@ST_overlay

; 2223 : 		{
; 2224 : 			if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  017d7	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _th$4[ebp]
  017dd	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  017e4	74 02		 je	 SHORT $LN97@ST_overlay

; 2225 : 				continue;

  017e6	eb d4		 jmp	 SHORT $LN5@ST_overlay
$LN97@ST_overlay:

; 2226 : 
; 2227 : 			mo2 = (mobj_t *)th;

  017e8	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _th$4[ebp]
  017ee	89 85 70 ff ff
	ff		 mov	 DWORD PTR _mo2$3[ebp], eax

; 2228 : 			if (mo2->type == MT_TOAD)

  017f4	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$3[ebp]
  017fa	81 78 7c f0 00
	00 00		 cmp	 DWORD PTR [eax+124], 240 ; 000000f0H
  01801	75 0c		 jne	 SHORT $LN98@ST_overlay

; 2229 : 			{
; 2230 : 				foundtoad = true;

  01803	c7 85 6c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _foundtoad$2[ebp], 1

; 2231 : 				break;

  0180d	eb 02		 jmp	 SHORT $LN6@ST_overlay
$LN98@ST_overlay:

; 2232 : 			}
; 2233 : 		}

  0180f	eb ab		 jmp	 SHORT $LN5@ST_overlay
$LN6@ST_overlay:

; 2234 : 
; 2235 : 		if (foundtoad)

  01811	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _foundtoad$2[ebp], 0
  01818	74 42		 je	 SHORT $LN99@ST_overlay

; 2236 : 		{
; 2237 : 			V_DrawCenteredString(160, 32+16, 0, "Thank you!");

  0181a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NHGJEEMF@Thank?5you?$CB@
  0181f	6a 00		 push	 0
  01821	6a 30		 push	 48			; 00000030H
  01823	68 a0 00 00 00	 push	 160			; 000000a0H
  01828	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0182d	83 c4 10	 add	 esp, 16			; 00000010H

; 2238 : 			V_DrawCenteredString(160, 44+16, 0, "But our earless leader is in");

  01830	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EHJMIKDB@But?5our?5earless?5leader?5is?5in@
  01835	6a 00		 push	 0
  01837	6a 3c		 push	 60			; 0000003cH
  01839	68 a0 00 00 00	 push	 160			; 000000a0H
  0183e	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01843	83 c4 10	 add	 esp, 16			; 00000010H

; 2239 : 			V_DrawCenteredString(160, 56+16, 0, "another castle!");

  01846	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LFIGKCJH@another?5castle?$CB@
  0184b	6a 00		 push	 0
  0184d	6a 48		 push	 72			; 00000048H
  0184f	68 a0 00 00 00	 push	 160			; 000000a0H
  01854	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01859	83 c4 10	 add	 esp, 16			; 00000010H
$LN99@ST_overlay:

; 2240 : 		}
; 2241 : 	}
; 2242 : 
; 2243 : 	// draw level title Tails
; 2244 : 	if (*mapheaderinfo[gamemap-1].lvlttl != '\0' && !(hu_showscores && (netgame || multiplayer)))

  0185c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  01863	83 e8 01	 sub	 eax, 1
  01866	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0186c	ba 01 00 00 00	 mov	 edx, 1
  01871	6b c2 00	 imul	 eax, edx, 0
  01874	0f be 8c 01 00
	00 00 00	 movsx	 ecx, BYTE PTR _mapheaderinfo[ecx+eax]
  0187c	85 c9		 test	 ecx, ecx
  0187e	74 21		 je	 SHORT $LN100@ST_overlay
  01880	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  01887	74 12		 je	 SHORT $LN101@ST_overlay
  01889	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  01890	75 0f		 jne	 SHORT $LN100@ST_overlay
  01892	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  01899	75 06		 jne	 SHORT $LN100@ST_overlay
$LN101@ST_overlay:

; 2245 : 		ST_drawLevelTitle();

  0189b	e8 00 00 00 00	 call	 _ST_drawLevelTitle
  018a0	90		 npad	 1
$LN100@ST_overlay:

; 2246 : 
; 2247 : 	if (!hu_showscores && netgame && (gametype == GT_RACE || gametype == GT_COOP) && stplyr->lives <= 0 && displayplayer == consoleplayer && countdown != 1)

  018a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  018a8	75 5a		 jne	 SHORT $LN102@ST_overlay
  018aa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  018b1	74 51		 je	 SHORT $LN102@ST_overlay
  018b3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  018ba	83 f8 02	 cmp	 eax, 2
  018bd	74 0b		 je	 SHORT $LN103@ST_overlay
  018bf	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  018c6	85 c0		 test	 eax, eax
  018c8	75 3a		 jne	 SHORT $LN102@ST_overlay
$LN103@ST_overlay:
  018ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  018cf	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  018d6	7f 2c		 jg	 SHORT $LN102@ST_overlay
  018d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  018dd	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  018e3	75 1f		 jne	 SHORT $LN102@ST_overlay
  018e5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _countdown, 1
  018ec	74 16		 je	 SHORT $LN102@ST_overlay

; 2248 : 		V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT/3, 0, "Press F12 to watch another player.");

  018ee	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FIOJJKNK@Press?5F12?5to?5watch?5another?5play@
  018f3	6a 00		 push	 0
  018f5	6a 42		 push	 66			; 00000042H
  018f7	68 a0 00 00 00	 push	 160			; 000000a0H
  018fc	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01901	83 c4 10	 add	 esp, 16			; 00000010H
$LN102@ST_overlay:

; 2249 : 
; 2250 : 	if (!hu_showscores && netgame && (gametype == GT_TAG && cv_tagtype.value) && displayplayer == consoleplayer &&
; 2251 : 		(!stplyr->spectator && !(stplyr->pflags & PF_TAGIT)) && (leveltime > hidetime * TICRATE))

  01904	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  0190b	0f 85 a3 00 00
	00		 jne	 $LN104@ST_overlay
  01911	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  01918	0f 84 96 00 00
	00		 je	 $LN104@ST_overlay
  0191e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01925	83 f8 03	 cmp	 eax, 3
  01928	0f 85 86 00 00
	00		 jne	 $LN104@ST_overlay
  0192e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  01935	74 7d		 je	 SHORT $LN104@ST_overlay
  01937	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  0193c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  01942	75 70		 jne	 SHORT $LN104@ST_overlay
  01944	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01949	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  01950	85 c9		 test	 ecx, ecx
  01952	75 60		 jne	 SHORT $LN104@ST_overlay
  01954	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01959	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0195f	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  01965	75 4d		 jne	 SHORT $LN104@ST_overlay
  01967	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  0196e	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  01974	76 3e		 jbe	 SHORT $LN104@ST_overlay

; 2252 : 	{
; 2253 : 		V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(84), 0, "You cannot move while hiding.");

  01976	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@COBNAECE@You?5cannot?5move?5while?5hiding?4@
  0197b	6a 00		 push	 0
  0197d	6a 54		 push	 84			; 00000054H
  0197f	e8 00 00 00 00	 call	 _STRINGY
  01984	83 c4 04	 add	 esp, 4
  01987	50		 push	 eax
  01988	68 a0 00 00 00	 push	 160			; 000000a0H
  0198d	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01992	83 c4 10	 add	 esp, 16			; 00000010H

; 2254 : 		V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(116), 0, "Press F12 to watch another player.");

  01995	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FIOJJKNK@Press?5F12?5to?5watch?5another?5play@
  0199a	6a 00		 push	 0
  0199c	6a 74		 push	 116			; 00000074H
  0199e	e8 00 00 00 00	 call	 _STRINGY
  019a3	83 c4 04	 add	 esp, 4
  019a6	50		 push	 eax
  019a7	68 a0 00 00 00	 push	 160			; 000000a0H
  019ac	e8 00 00 00 00	 call	 _V_DrawCenteredString
  019b1	83 c4 10	 add	 esp, 16			; 00000010H
$LN104@ST_overlay:

; 2255 : 	}
; 2256 : 
; 2257 : 	if (!hu_showscores && (netgame || splitscreen))

  019b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hu_showscores, 0
  019bb	0f 85 20 02 00
	00		 jne	 $LN113@ST_overlay
  019c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  019c8	75 0d		 jne	 SHORT $LN106@ST_overlay
  019ca	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  019d1	0f 84 0a 02 00
	00		 je	 $LN113@ST_overlay
$LN106@ST_overlay:

; 2258 : 	{
; 2259 : 		if ((gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF)
; 2260 : 			&& stplyr->playerstate == PST_DEAD && stplyr->lives) //Death overrides spectator text.

  019d7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  019de	83 f8 01	 cmp	 eax, 1
  019e1	74 1c		 je	 SHORT $LN109@ST_overlay
  019e3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  019ea	83 f8 03	 cmp	 eax, 3
  019ed	74 10		 je	 SHORT $LN109@ST_overlay
  019ef	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  019f6	83 f8 04	 cmp	 eax, 4
  019f9	0f 85 a1 00 00
	00		 jne	 $LN107@ST_overlay
$LN109@ST_overlay:
  019ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01a04	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  01a08	0f 85 92 00 00
	00		 jne	 $LN107@ST_overlay
  01a0e	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01a13	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  01a1a	0f 84 80 00 00
	00		 je	 $LN107@ST_overlay

; 2261 : 		{
; 2262 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(132), V_TRANSLUCENT, "Press Jump to respawn.");

  01a20	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EJGPHLCO@Press?5Jump?5to?5respawn?4@
  01a25	68 00 00 40 00	 push	 4194304			; 00400000H
  01a2a	68 84 00 00 00	 push	 132			; 00000084H
  01a2f	e8 00 00 00 00	 call	 _STRINGY
  01a34	83 c4 04	 add	 esp, 4
  01a37	50		 push	 eax
  01a38	68 a0 00 00 00	 push	 160			; 000000a0H
  01a3d	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01a42	83 c4 10	 add	 esp, 16			; 00000010H

; 2263 : 			if (((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG) && !stplyr->spectator)

  01a45	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01a4c	83 f8 01	 cmp	 eax, 1
  01a4f	75 09		 jne	 SHORT $LN112@ST_overlay
  01a51	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  01a58	74 0c		 je	 SHORT $LN111@ST_overlay
$LN112@ST_overlay:
  01a5a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01a61	83 f8 03	 cmp	 eax, 3
  01a64	75 35		 jne	 SHORT $LN110@ST_overlay
$LN111@ST_overlay:
  01a66	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01a6b	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  01a72	85 c9		 test	 ecx, ecx
  01a74	75 25		 jne	 SHORT $LN110@ST_overlay

; 2264 : 				V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(148), V_TRANSLUCENT, "Press 'Toss Flag' to Spectate.");

  01a76	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@POOLNHIO@Press?5?8Toss?5Flag?8?5to?5Spectate?4@
  01a7b	68 00 00 40 00	 push	 4194304			; 00400000H
  01a80	68 94 00 00 00	 push	 148			; 00000094H
  01a85	e8 00 00 00 00	 call	 _STRINGY
  01a8a	83 c4 04	 add	 esp, 4
  01a8d	50		 push	 eax
  01a8e	68 a0 00 00 00	 push	 160			; 000000a0H
  01a93	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01a98	83 c4 10	 add	 esp, 16			; 00000010H
$LN110@ST_overlay:

; 2265 : 		}

  01a9b	e9 41 01 00 00	 jmp	 $LN113@ST_overlay
$LN107@ST_overlay:

; 2266 : 		else if ((((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG) && stplyr->spectator)
; 2267 : 		 || (((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF) && !stplyr->ctfteam))

  01aa0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01aa7	83 f8 01	 cmp	 eax, 1
  01aaa	75 09		 jne	 SHORT $LN117@ST_overlay
  01aac	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  01ab3	74 0c		 je	 SHORT $LN116@ST_overlay
$LN117@ST_overlay:
  01ab5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01abc	83 f8 03	 cmp	 eax, 3
  01abf	75 10		 jne	 SHORT $LN115@ST_overlay
$LN116@ST_overlay:
  01ac1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01ac6	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  01acd	85 c9		 test	 ecx, ecx
  01acf	75 37		 jne	 SHORT $LN114@ST_overlay
$LN115@ST_overlay:
  01ad1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01ad8	83 f8 01	 cmp	 eax, 1
  01adb	75 09		 jne	 SHORT $LN119@ST_overlay
  01add	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  01ae4	75 10		 jne	 SHORT $LN118@ST_overlay
$LN119@ST_overlay:
  01ae6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01aed	83 f8 04	 cmp	 eax, 4
  01af0	0f 85 eb 00 00
	00		 jne	 $LN113@ST_overlay
$LN118@ST_overlay:
  01af6	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01afb	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  01b02	0f 85 d9 00 00
	00		 jne	 $LN113@ST_overlay
$LN114@ST_overlay:

; 2268 : 		{
; 2269 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(60), V_TRANSLUCENT, "You are a spectator.");

  01b08	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BJLAEEPD@You?5are?5a?5spectator?4@
  01b0d	68 00 00 40 00	 push	 4194304			; 00400000H
  01b12	6a 3c		 push	 60			; 0000003cH
  01b14	e8 00 00 00 00	 call	 _STRINGY
  01b19	83 c4 04	 add	 esp, 4
  01b1c	50		 push	 eax
  01b1d	68 a0 00 00 00	 push	 160			; 000000a0H
  01b22	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01b27	83 c4 10	 add	 esp, 16			; 00000010H

; 2270 : 			if ((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  01b2a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01b31	83 f8 01	 cmp	 eax, 1
  01b34	75 09		 jne	 SHORT $LN123@ST_overlay
  01b36	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  01b3d	75 0c		 jne	 SHORT $LN122@ST_overlay
$LN123@ST_overlay:
  01b3f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  01b46	83 f8 04	 cmp	 eax, 4
  01b49	75 27		 jne	 SHORT $LN120@ST_overlay
$LN122@ST_overlay:

; 2271 : 				V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(132), V_TRANSLUCENT, "Press Fire to be assigned to a team.");

  01b4b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CHFHIJME@Press?5Fire?5to?5be?5assigned?5to?5a?5@
  01b50	68 00 00 40 00	 push	 4194304			; 00400000H
  01b55	68 84 00 00 00	 push	 132			; 00000084H
  01b5a	e8 00 00 00 00	 call	 _STRINGY
  01b5f	83 c4 04	 add	 esp, 4
  01b62	50		 push	 eax
  01b63	68 a0 00 00 00	 push	 160			; 000000a0H
  01b68	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01b6d	83 c4 10	 add	 esp, 16			; 00000010H
  01b70	eb 25		 jmp	 SHORT $LN121@ST_overlay
$LN120@ST_overlay:

; 2272 : 			else
; 2273 : 				V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(132), V_TRANSLUCENT, "Press Fire to enter the game.");

  01b72	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NOKFNDEG@Press?5Fire?5to?5enter?5the?5game?4@
  01b77	68 00 00 40 00	 push	 4194304			; 00400000H
  01b7c	68 84 00 00 00	 push	 132			; 00000084H
  01b81	e8 00 00 00 00	 call	 _STRINGY
  01b86	83 c4 04	 add	 esp, 4
  01b89	50		 push	 eax
  01b8a	68 a0 00 00 00	 push	 160			; 000000a0H
  01b8f	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01b94	83 c4 10	 add	 esp, 16			; 00000010H
$LN121@ST_overlay:

; 2274 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(148), V_TRANSLUCENT, "Press F12 to watch another player.");

  01b97	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FIOJJKNK@Press?5F12?5to?5watch?5another?5play@
  01b9c	68 00 00 40 00	 push	 4194304			; 00400000H
  01ba1	68 94 00 00 00	 push	 148			; 00000094H
  01ba6	e8 00 00 00 00	 call	 _STRINGY
  01bab	83 c4 04	 add	 esp, 4
  01bae	50		 push	 eax
  01baf	68 a0 00 00 00	 push	 160			; 000000a0H
  01bb4	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01bb9	83 c4 10	 add	 esp, 16			; 00000010H

; 2275 : 			V_DrawCenteredString(BASEVIDWIDTH/2, STRINGY(164), V_TRANSLUCENT, "Press Jump to float and Spin to sink.");

  01bbc	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LPNLLHNC@Press?5Jump?5to?5float?5and?5Spin?5to@
  01bc1	68 00 00 40 00	 push	 4194304			; 00400000H
  01bc6	68 a4 00 00 00	 push	 164			; 000000a4H
  01bcb	e8 00 00 00 00	 call	 _STRINGY
  01bd0	83 c4 04	 add	 esp, 4
  01bd3	50		 push	 eax
  01bd4	68 a0 00 00 00	 push	 160			; 000000a0H
  01bd9	e8 00 00 00 00	 call	 _V_DrawCenteredString
  01bde	83 c4 10	 add	 esp, 16			; 00000010H
$LN113@ST_overlay:

; 2276 : 		}
; 2277 : 	}
; 2278 : 
; 2279 : 	if (stplyr->deadtimer > 0 && (stplyr->deadtimer < gameovertics) && stplyr->lives <= 0)

  01be1	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01be6	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [eax+296], 0
  01bed	7e 4f		 jle	 SHORT $LN127@ST_overlay
  01bef	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01bf4	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  01bfa	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _gameovertics
  01c00	7d 3c		 jge	 SHORT $LN127@ST_overlay
  01c02	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01c07	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  01c0e	7f 2e		 jg	 SHORT $LN127@ST_overlay

; 2280 : 	{
; 2281 : 		if (!netgame && !multiplayer)

  01c10	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  01c17	75 25		 jne	 SHORT $LN127@ST_overlay
  01c19	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  01c20	75 1c		 jne	 SHORT $LN127@ST_overlay

; 2282 : 		{
; 2283 : 			if (stplyr->continues != 0) // Player has continues, so let's use them!

  01c22	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01c27	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [eax+260], 0
  01c2e	74 08		 je	 SHORT $LN126@ST_overlay

; 2284 : 				ST_drawContinueHUD();

  01c30	e8 00 00 00 00	 call	 _ST_drawContinueHUD
  01c35	90		 npad	 1
  01c36	eb 06		 jmp	 SHORT $LN127@ST_overlay
$LN126@ST_overlay:

; 2285 : 			else // Just go to the title screen
; 2286 : 				Command_ExitGame_f();

  01c38	e8 00 00 00 00	 call	 _Command_ExitGame_f
  01c3d	90		 npad	 1
$LN127@ST_overlay:

; 2287 : 		}
; 2288 : 	}
; 2289 : 
; 2290 : 	if (cv_debug == 2)

  01c3e	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _cv_debug, 2
  01c45	75 0b		 jne	 SHORT $LN128@ST_overlay

; 2291 : 		ST_drawDebugInfo();

  01c47	e8 00 00 00 00	 call	 _ST_drawDebugInfo
  01c4c	90		 npad	 1
  01c4d	e9 f6 00 00 00	 jmp	 $LN131@ST_overlay
$LN128@ST_overlay:

; 2292 : 	else if (cv_debug)

  01c52	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  01c59	0f 84 e9 00 00
	00		 je	 $LN131@ST_overlay

; 2293 : 	{
; 2294 : 		if (stplyr->mo)

  01c5f	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01c64	83 38 00	 cmp	 DWORD PTR [eax], 0
  01c67	0f 84 db 00 00
	00		 je	 $LN131@ST_overlay

; 2295 : 		{
; 2296 : 			const fixed_t d = AngleFixed(stplyr->mo->angle);

  01c6d	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01c72	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c74	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  01c77	52		 push	 edx
  01c78	e8 00 00 00 00	 call	 _AngleFixed
  01c7d	83 c4 04	 add	 esp, 4
  01c80	89 85 68 ff ff
	ff		 mov	 DWORD PTR _d$1[ebp], eax

; 2297 : 			V_DrawString(252, 168, 0, va("X: %d", stplyr->mo->x>>FRACBITS));

  01c86	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01c8b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c8d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01c90	c1 fa 10	 sar	 edx, 16			; 00000010H
  01c93	52		 push	 edx
  01c94	68 00 00 00 00	 push	 OFFSET ??_C@_05NKFEPBHH@X?3?5?$CFd@
  01c99	e8 00 00 00 00	 call	 _va
  01c9e	83 c4 08	 add	 esp, 8
  01ca1	50		 push	 eax
  01ca2	6a 00		 push	 0
  01ca4	68 a8 00 00 00	 push	 168			; 000000a8H
  01ca9	68 fc 00 00 00	 push	 252			; 000000fcH
  01cae	e8 00 00 00 00	 call	 _V_DrawString
  01cb3	83 c4 10	 add	 esp, 16			; 00000010H

; 2298 : 			V_DrawString(252, 176, 0, va("Y: %d", stplyr->mo->y>>FRACBITS));

  01cb6	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01cbb	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cbd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01cc0	c1 fa 10	 sar	 edx, 16			; 00000010H
  01cc3	52		 push	 edx
  01cc4	68 00 00 00 00	 push	 OFFSET ??_C@_05BBAICCNC@Y?3?5?$CFd@
  01cc9	e8 00 00 00 00	 call	 _va
  01cce	83 c4 08	 add	 esp, 8
  01cd1	50		 push	 eax
  01cd2	6a 00		 push	 0
  01cd4	68 b0 00 00 00	 push	 176			; 000000b0H
  01cd9	68 fc 00 00 00	 push	 252			; 000000fcH
  01cde	e8 00 00 00 00	 call	 _V_DrawString
  01ce3	83 c4 10	 add	 esp, 16			; 00000010H

; 2299 : 			V_DrawString(252, 184, 0, va("Z: %d", stplyr->mo->z>>FRACBITS));

  01ce6	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  01ceb	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ced	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01cf0	c1 fa 10	 sar	 edx, 16			; 00000010H
  01cf3	52		 push	 edx
  01cf4	68 00 00 00 00	 push	 OFFSET ??_C@_05JHJMFAHM@Z?3?5?$CFd@
  01cf9	e8 00 00 00 00	 call	 _va
  01cfe	83 c4 08	 add	 esp, 8
  01d01	50		 push	 eax
  01d02	6a 00		 push	 0
  01d04	68 b8 00 00 00	 push	 184			; 000000b8H
  01d09	68 fc 00 00 00	 push	 252			; 000000fcH
  01d0e	e8 00 00 00 00	 call	 _V_DrawString
  01d13	83 c4 10	 add	 esp, 16			; 00000010H

; 2300 : 			V_DrawString(252, 192, 0, va("A: %d", FixedInt(d)));

  01d16	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _d$1[ebp]
  01d1c	50		 push	 eax
  01d1d	e8 00 00 00 00	 call	 _FixedInt
  01d22	83 c4 04	 add	 esp, 4
  01d25	50		 push	 eax
  01d26	68 00 00 00 00	 push	 OFFSET ??_C@_05POINKCCE@A?3?5?$CFd@
  01d2b	e8 00 00 00 00	 call	 _va
  01d30	83 c4 08	 add	 esp, 8
  01d33	50		 push	 eax
  01d34	6a 00		 push	 0
  01d36	68 c0 00 00 00	 push	 192			; 000000c0H
  01d3b	68 fc 00 00 00	 push	 252			; 000000fcH
  01d40	e8 00 00 00 00	 call	 _V_DrawString
  01d45	83 c4 10	 add	 esp, 16			; 00000010H
$LN131@ST_overlay:

; 2301 : 		}
; 2302 : 	}
; 2303 : }

  01d48	5f		 pop	 edi
  01d49	5e		 pop	 esi
  01d4a	5b		 pop	 ebx
  01d4b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01d4e	33 cd		 xor	 ecx, ebp
  01d50	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01d55	8b e5		 mov	 esp, ebp
  01d57	5d		 pop	 ebp
  01d58	c3		 ret	 0
_ST_overlayDrawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_DrawOverlayNum
_TEXT	SEGMENT
tv78 = -76						; size = 4
_neg$ = -8						; size = 4
_w$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_num$ = 16						; size = 4
_numpat$ = 20						; size = 4
_ST_DrawOverlayNum PROC					; COMDAT

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 579  : 	INT32 w = SHORT(numpat[0]->width);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 14	 mov	 edx, DWORD PTR _numpat$[ebp]
  00014	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00017	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0001a	89 4d fc	 mov	 DWORD PTR _w$[ebp], ecx

; 580  : 	boolean neg;
; 581  : 
; 582  : 	// special case for 0
; 583  : 	if (!num)

  0001d	83 7d 10 00	 cmp	 DWORD PTR _num$[ebp], 0
  00021	75 35		 jne	 SHORT $LN4@ST_DrawOve

; 584  : 	{
; 585  : 		V_DrawScaledPatch(x - (w*vid.dupx), y, V_NOSCALESTART|V_TRANSLUCENT, numpat[0]);

  00023	b8 04 00 00 00	 mov	 eax, 4
  00028	6b c8 00	 imul	 ecx, eax, 0
  0002b	8b 55 14	 mov	 edx, DWORD PTR _numpat$[ebp]
  0002e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00031	50		 push	 eax
  00032	68 00 00 41 00	 push	 4259840			; 00410000H
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _w$[ebp]
  0003e	0f af 15 20 00
	00 00		 imul	 edx, DWORD PTR _vid+32
  00045	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00048	2b c2		 sub	 eax, edx
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00050	83 c4 10	 add	 esp, 16			; 00000010H

; 586  : 		return;

  00053	e9 a5 00 00 00	 jmp	 $LN6@ST_DrawOve
$LN4@ST_DrawOve:

; 587  : 	}
; 588  : 
; 589  : 	neg = num < 0;

  00058	83 7d 10 00	 cmp	 DWORD PTR _num$[ebp], 0
  0005c	7d 09		 jge	 SHORT $LN8@ST_DrawOve
  0005e	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  00065	eb 07		 jmp	 SHORT $LN9@ST_DrawOve
$LN8@ST_DrawOve:
  00067	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN9@ST_DrawOve:
  0006e	8b 45 b4	 mov	 eax, DWORD PTR tv78[ebp]
  00071	89 45 f8	 mov	 DWORD PTR _neg$[ebp], eax

; 590  : 
; 591  : 	if (neg)

  00074	83 7d f8 00	 cmp	 DWORD PTR _neg$[ebp], 0
  00078	74 08		 je	 SHORT $LN5@ST_DrawOve

; 592  : 		num = -num;

  0007a	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  0007d	f7 d8		 neg	 eax
  0007f	89 45 10	 mov	 DWORD PTR _num$[ebp], eax
$LN5@ST_DrawOve:

; 593  : 
; 594  : 	// draw the number
; 595  : 	while (num)

  00082	83 7d 10 00	 cmp	 DWORD PTR _num$[ebp], 0
  00086	74 49		 je	 SHORT $LN3@ST_DrawOve

; 596  : 	{
; 597  : 		x -= (w * vid.dupx);

  00088	8b 45 fc	 mov	 eax, DWORD PTR _w$[ebp]
  0008b	0f af 05 20 00
	00 00		 imul	 eax, DWORD PTR _vid+32
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00095	2b c8		 sub	 ecx, eax
  00097	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx

; 598  : 		V_DrawScaledPatch(x, y, V_NOSCALESTART|V_TRANSLUCENT, numpat[num % 10]);

  0009a	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  0009d	99		 cdq
  0009e	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000a3	f7 f9		 idiv	 ecx
  000a5	8b 45 14	 mov	 eax, DWORD PTR _numpat$[ebp]
  000a8	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000ab	51		 push	 ecx
  000ac	68 00 00 41 00	 push	 4259840			; 00410000H
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  000b4	52		 push	 edx
  000b5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000be	83 c4 10	 add	 esp, 16			; 00000010H

; 599  : 		num /= 10;

  000c1	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  000c4	99		 cdq
  000c5	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000ca	f7 f9		 idiv	 ecx
  000cc	89 45 10	 mov	 DWORD PTR _num$[ebp], eax

; 600  : 	}

  000cf	eb b1		 jmp	 SHORT $LN5@ST_DrawOve
$LN3@ST_DrawOve:

; 601  : 
; 602  : 	// draw a minus sign if necessary
; 603  : 	if (neg)

  000d1	83 7d f8 00	 cmp	 DWORD PTR _neg$[ebp], 0
  000d5	74 26		 je	 SHORT $LN6@ST_DrawOve

; 604  : 		V_DrawScaledPatch(x - (8*vid.dupx), y, V_NOSCALESTART|V_TRANSLUCENT,

  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _minus
  000dc	50		 push	 eax
  000dd	68 00 00 41 00	 push	 4259840			; 00410000H
  000e2	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000e5	51		 push	 ecx
  000e6	8b 15 20 00 00
	00		 mov	 edx, DWORD PTR _vid+32
  000ec	c1 e2 03	 shl	 edx, 3
  000ef	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000f2	2b c2		 sub	 eax, edx
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@ST_DrawOve:

; 605  : 			minus); // Tails
; 606  : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
_ST_DrawOverlayNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_SameTeam
_TEXT	SEGMENT
tv82 = -68						; size = 4
tv90 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_ST_SameTeam PROC					; COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 176  : 	// Just pipe team messages to everyone in co-op or race.
; 177  : 	if (gametype == GT_COOP || gametype == GT_RACE)

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00010	85 c0		 test	 eax, eax
  00012	74 0c		 je	 SHORT $LN3@ST_SameTea
  00014	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0001b	83 f8 02	 cmp	 eax, 2
  0001e	75 0a		 jne	 SHORT $LN2@ST_SameTea
$LN3@ST_SameTea:

; 178  : 		return true;

  00020	b8 01 00 00 00	 mov	 eax, 1
  00025	e9 b4 00 00 00	 jmp	 $LN1@ST_SameTea
$LN2@ST_SameTea:

; 179  : 
; 180  : 	// Spectator chat.
; 181  : 	if (a->spectator && b->spectator)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00034	85 c9		 test	 ecx, ecx
  00036	74 18		 je	 SHORT $LN4@ST_SameTea
  00038	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0003b	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  00042	85 c9		 test	 ecx, ecx
  00044	74 0a		 je	 SHORT $LN4@ST_SameTea

; 182  : 		return true;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	e9 8e 00 00 00	 jmp	 $LN1@ST_SameTea
$LN4@ST_SameTea:

; 183  : 
; 184  : 	// Team chat.
; 185  : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  00050	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00057	83 f8 04	 cmp	 eax, 4
  0005a	74 15		 je	 SHORT $LN6@ST_SameTea
  0005c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00063	83 f8 01	 cmp	 eax, 1
  00066	75 32		 jne	 SHORT $LN5@ST_SameTea
  00068	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0006f	74 29		 je	 SHORT $LN5@ST_SameTea
$LN6@ST_SameTea:

; 186  : 		return a->ctfteam == b->ctfteam;

  00071	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00077	8b 90 60 01 00
	00		 mov	 edx, DWORD PTR [eax+352]
  0007d	3b 91 60 01 00
	00		 cmp	 edx, DWORD PTR [ecx+352]
  00083	75 09		 jne	 SHORT $LN9@ST_SameTea
  00085	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv82[ebp], 1
  0008c	eb 07		 jmp	 SHORT $LN10@ST_SameTea
$LN9@ST_SameTea:
  0008e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN10@ST_SameTea:
  00095	8b 45 bc	 mov	 eax, DWORD PTR tv82[ebp]
  00098	eb 44		 jmp	 SHORT $LN1@ST_SameTea
$LN5@ST_SameTea:

; 187  : 
; 188  : 	if (gametype == GT_TAG)

  0009a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a1	83 f8 03	 cmp	 eax, 3
  000a4	75 36		 jne	 SHORT $LN7@ST_SameTea

; 189  : 		return ((a->pflags & PF_TAGIT) == (b->pflags & PF_TAGIT));

  000a6	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000a9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000af	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  000b5	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  000b8	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  000be	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000c3	3b c8		 cmp	 ecx, eax
  000c5	75 09		 jne	 SHORT $LN11@ST_SameTea
  000c7	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  000ce	eb 07		 jmp	 SHORT $LN12@ST_SameTea
$LN11@ST_SameTea:
  000d0	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN12@ST_SameTea:
  000d7	8b 45 bc	 mov	 eax, DWORD PTR tv90[ebp]
  000da	eb 02		 jmp	 SHORT $LN1@ST_SameTea
$LN7@ST_SameTea:

; 190  : 
; 191  : 	return false;

  000dc	33 c0		 xor	 eax, eax
$LN1@ST_SameTea:

; 192  : }

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
_ST_SameTeam ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_doPaletteStuff
_TEXT	SEGMENT
_palette$ = -4						; size = 4
_ST_doPaletteStuff PROC					; COMDAT

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 206  : 	INT32 palette;
; 207  : 
; 208  : 	if (stplyr && stplyr->bonuscount)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _stplyr, 0
  00010	74 3a		 je	 SHORT $LN2@ST_doPalet
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00017	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0001e	74 2c		 je	 SHORT $LN2@ST_doPalet

; 209  : 	{
; 210  : 		palette = (stplyr->bonuscount+7)>>3;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _stplyr
  00025	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0002b	83 c1 07	 add	 ecx, 7
  0002e	c1 f9 03	 sar	 ecx, 3
  00031	89 4d fc	 mov	 DWORD PTR _palette$[ebp], ecx

; 211  : 
; 212  : 		if (palette >= NUMBONUSPALS)

  00034	83 7d fc 04	 cmp	 DWORD PTR _palette$[ebp], 4
  00038	7c 07		 jl	 SHORT $LN4@ST_doPalet

; 213  : 			palette = NUMBONUSPALS - 1;

  0003a	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _palette$[ebp], 3
$LN4@ST_doPalet:

; 214  : 
; 215  : 		palette += STARTBONUSPALS;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _palette$[ebp]
  00044	83 c0 09	 add	 eax, 9
  00047	89 45 fc	 mov	 DWORD PTR _palette$[ebp], eax

; 216  : 	}

  0004a	eb 07		 jmp	 SHORT $LN3@ST_doPalet
$LN2@ST_doPalet:

; 217  : 	else
; 218  : 		palette = 0;

  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _palette$[ebp], 0
$LN3@ST_doPalet:

; 219  : 
; 220  : 	if (palette != st_palette)

  00053	8b 45 fc	 mov	 eax, DWORD PTR _palette$[ebp]
  00056	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _st_palette
  0005c	74 6a		 je	 SHORT $LN11@ST_doPalet

; 221  : 	{
; 222  : 		st_palette = palette;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _palette$[ebp]
  00061	a3 00 00 00 00	 mov	 DWORD PTR _st_palette, eax

; 223  : 
; 224  : #if defined (SHUFFLE) && defined (HWRENDER)
; 225  : 		if (rendermode == render_opengl)

  00066	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _rendermode, 2
  0006d	75 0c		 jne	 SHORT $LN6@ST_doPalet

; 226  : 			HWR_SetPaletteColor(0);

  0006f	6a 00		 push	 0
  00071	e8 00 00 00 00	 call	 _HWR_SetPaletteColor
  00076	83 c4 04	 add	 esp, 4
  00079	eb 4d		 jmp	 SHORT $LN11@ST_doPalet
$LN6@ST_doPalet:

; 227  : 		else
; 228  : #endif
; 229  : 		if (rendermode != render_none)

  0007b	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00082	74 44		 je	 SHORT $LN11@ST_doPalet

; 230  : 		{
; 231  : 			if (palette >= STARTBONUSPALS && palette <= STARTBONUSPALS + NUMBONUSPALS)

  00084	83 7d fc 09	 cmp	 DWORD PTR _palette$[ebp], 9
  00088	7c 15		 jl	 SHORT $LN9@ST_doPalet
  0008a	83 7d fc 0d	 cmp	 DWORD PTR _palette$[ebp], 13 ; 0000000dH
  0008e	7f 0f		 jg	 SHORT $LN9@ST_doPalet

; 232  : 				V_SetPaletteLump("FLASHPAL");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_08CMDALJDO@FLASHPAL@
  00095	e8 00 00 00 00	 call	 _V_SetPaletteLump
  0009a	83 c4 04	 add	 esp, 4
  0009d	eb 0e		 jmp	 SHORT $LN10@ST_doPalet
$LN9@ST_doPalet:

; 233  : 			else
; 234  : 				V_SetPaletteLump(GetPalette());

  0009f	e8 00 00 00 00	 call	 _GetPalette
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _V_SetPaletteLump
  000aa	83 c4 04	 add	 esp, 4
$LN10@ST_doPalet:

; 235  : 
; 236  : 			if (!splitscreen || !palette)

  000ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000b4	74 06		 je	 SHORT $LN12@ST_doPalet
  000b6	83 7d fc 00	 cmp	 DWORD PTR _palette$[ebp], 0
  000ba	75 0c		 jne	 SHORT $LN11@ST_doPalet
$LN12@ST_doPalet:

; 237  : 				V_SetPalette(palette);

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _palette$[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _V_SetPalette
  000c5	83 c4 04	 add	 esp, 4
$LN11@ST_doPalet:

; 238  : 		}
; 239  : 	}
; 240  : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_ST_doPaletteStuff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_UnLoadFaceNameGraphics
_TEXT	SEGMENT
_skinnum$ = 8						; size = 4
_ST_UnLoadFaceNameGraphics PROC				; COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 457  : 	Z_Free(facenameprefix[skinnum]);

  00009	8b 45 08	 mov	 eax, DWORD PTR _skinnum$[ebp]
  0000c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _facenameprefix[eax*4]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _Z_Free
  00019	83 c4 04	 add	 esp, 4

; 458  : 	prefixfreed[skinnum] = true;

  0001c	8b 45 08	 mov	 eax, DWORD PTR _skinnum$[ebp]
  0001f	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _prefixfreed[eax*4], 1

; 459  : 
; 460  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_ST_UnLoadFaceNameGraphics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_LoadFaceNameGraphics
_TEXT	SEGMENT
_namelump$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_facestr$ = 8						; size = 4
_skinnum$ = 12						; size = 4
_ST_LoadFaceNameGraphics PROC				; COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 444  : 	char namelump[9];
; 445  : 
; 446  : 	// hack: make sure base face name is no more than 8 chars
; 447  : 	if (strlen(facestr) > 8)

  00013	8b 45 08	 mov	 eax, DWORD PTR _facestr$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _strlen
  0001c	83 c4 04	 add	 esp, 4
  0001f	83 f8 08	 cmp	 eax, 8
  00022	76 0f		 jbe	 SHORT $LN2@ST_LoadFac

; 448  : 		facestr[8] = '\0';

  00024	b8 01 00 00 00	 mov	 eax, 1
  00029	c1 e0 03	 shl	 eax, 3
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _facestr$[ebp]
  0002f	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN2@ST_LoadFac:

; 449  : 	strcpy(namelump, facestr); // copy base name

  00033	8b 45 08	 mov	 eax, DWORD PTR _facestr$[ebp]
  00036	50		 push	 eax
  00037	8d 4d f0	 lea	 ecx, DWORD PTR _namelump$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _strcpy
  00040	83 c4 08	 add	 esp, 8

; 450  : 
; 451  : 	facenameprefix[skinnum] = W_CachePatchName(namelump, PU_HUDGFX);

  00043	6a 04		 push	 4
  00045	8d 45 f0	 lea	 eax, DWORD PTR _namelump$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _W_CachePatchName
  0004e	83 c4 08	 add	 esp, 8
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _skinnum$[ebp]
  00054	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _facenameprefix[ecx*4], eax

; 452  : 	prefixfreed[skinnum] = false;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _skinnum$[ebp]
  0005e	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _prefixfreed[eax*4], 0

; 453  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	33 cd		 xor	 ecx, ebp
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_ST_LoadFaceNameGraphics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_UnLoadFaceGraphics
_TEXT	SEGMENT
_skinnum$ = 8						; size = 4
_ST_UnLoadFaceGraphics PROC				; COMDAT

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 434  : 	Z_Free(faceprefix[skinnum]);

  00009	8b 45 08	 mov	 eax, DWORD PTR _skinnum$[ebp]
  0000c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _faceprefix[eax*4]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _Z_Free
  00019	83 c4 04	 add	 esp, 4

; 435  : 	Z_Free(superprefix[skinnum]);

  0001c	8b 45 08	 mov	 eax, DWORD PTR _skinnum$[ebp]
  0001f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _superprefix[eax*4]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _Z_Free
  0002c	83 c4 04	 add	 esp, 4

; 436  : 	facefreed[skinnum] = true;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _skinnum$[ebp]
  00032	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _facefreed[eax*4], 1

; 437  : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_ST_UnLoadFaceGraphics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_LoadFaceGraphics
_TEXT	SEGMENT
_namelump$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_facestr$ = 8						; size = 4
_superstr$ = 12						; size = 4
_skinnum$ = 16						; size = 4
_ST_LoadFaceGraphics PROC				; COMDAT

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 414  : 	char namelump[9];
; 415  : 
; 416  : 	// hack: make sure base face name is no more than 8 chars
; 417  : 	if (strlen(facestr) > 8)

  00013	8b 45 08	 mov	 eax, DWORD PTR _facestr$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _strlen
  0001c	83 c4 04	 add	 esp, 4
  0001f	83 f8 08	 cmp	 eax, 8
  00022	76 0f		 jbe	 SHORT $LN2@ST_LoadFac

; 418  : 		facestr[8] = '\0';

  00024	b8 01 00 00 00	 mov	 eax, 1
  00029	c1 e0 03	 shl	 eax, 3
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _facestr$[ebp]
  0002f	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN2@ST_LoadFac:

; 419  : 	strcpy(namelump, facestr); // copy base name

  00033	8b 45 08	 mov	 eax, DWORD PTR _facestr$[ebp]
  00036	50		 push	 eax
  00037	8d 4d f0	 lea	 ecx, DWORD PTR _namelump$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _strcpy
  00040	83 c4 08	 add	 esp, 8

; 420  : 
; 421  : 	faceprefix[skinnum] = W_CachePatchName(namelump, PU_HUDGFX);

  00043	6a 04		 push	 4
  00045	8d 45 f0	 lea	 eax, DWORD PTR _namelump$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _W_CachePatchName
  0004e	83 c4 08	 add	 esp, 8
  00051	8b 4d 10	 mov	 ecx, DWORD PTR _skinnum$[ebp]
  00054	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _faceprefix[ecx*4], eax

; 422  : 
; 423  : 	if (strlen(superstr) > 8)

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _superstr$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _strlen
  00064	83 c4 04	 add	 esp, 4
  00067	83 f8 08	 cmp	 eax, 8
  0006a	76 0f		 jbe	 SHORT $LN3@ST_LoadFac

; 424  : 		superstr[8] = '\0';

  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	c1 e0 03	 shl	 eax, 3
  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _superstr$[ebp]
  00077	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN3@ST_LoadFac:

; 425  : 	strcpy(namelump, superstr); // copy base name

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _superstr$[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d f0	 lea	 ecx, DWORD PTR _namelump$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _strcpy
  00088	83 c4 08	 add	 esp, 8

; 426  : 
; 427  : 	superprefix[skinnum] = W_CachePatchName(namelump, PU_HUDGFX);

  0008b	6a 04		 push	 4
  0008d	8d 45 f0	 lea	 eax, DWORD PTR _namelump$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _W_CachePatchName
  00096	83 c4 08	 add	 esp, 8
  00099	8b 4d 10	 mov	 ecx, DWORD PTR _skinnum$[ebp]
  0009c	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _superprefix[ecx*4], eax

; 428  : 
; 429  : 	facefreed[skinnum] = false;

  000a3	8b 45 10	 mov	 eax, DWORD PTR _skinnum$[ebp]
  000a6	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _facefreed[eax*4], 0

; 430  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_ST_LoadFaceGraphics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_ReloadSkinFaceGraphics
_TEXT	SEGMENT
_i$ = -4						; size = 4
_ST_ReloadSkinFaceGraphics PROC				; COMDAT

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 464  : 	INT32 i;
; 465  : 
; 466  : 	for (i = 0; i < numskins; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@ST_ReloadS
$LN2@ST_ReloadS:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@ST_ReloadS:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numskins
  00024	7d 44		 jge	 SHORT $LN3@ST_ReloadS

; 467  : 	{
; 468  : 		ST_LoadFaceGraphics(skins[i].faceprefix, skins[i].superprefix, i);

  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00029	50		 push	 eax
  0002a	69 4d fc ec 00
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 236
  00031	81 c1 30 00 00
	00		 add	 ecx, OFFSET _skins+48
  00037	51		 push	 ecx
  00038	69 55 fc ec 00
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 236
  0003f	81 c2 27 00 00
	00		 add	 edx, OFFSET _skins+39
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _ST_LoadFaceGraphics
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 469  : 		ST_LoadFaceNameGraphics(skins[i].nameprefix, i);

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00051	50		 push	 eax
  00052	69 4d fc ec 00
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 236
  00059	81 c1 39 00 00
	00		 add	 ecx, OFFSET _skins+57
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _ST_LoadFaceNameGraphics
  00065	83 c4 08	 add	 esp, 8

; 470  : 	}

  00068	eb a8		 jmp	 SHORT $LN2@ST_ReloadS
$LN3@ST_ReloadS:

; 471  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_ST_ReloadSkinFaceGraphics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_LoadGraphics
_TEXT	SEGMENT
_buffer$ = -20						; size = 9
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ST_LoadGraphics PROC					; COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 297  : 	INT32 i;
; 298  : 	char buffer[9];
; 299  : 
; 300  : 	// SRB2 border patch
; 301  : 	st_borderpatchnum = W_GetNumForName("GFZFLR01");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_08MGCIBDO@GFZFLR01@
  00018	e8 00 00 00 00	 call	 _W_GetNumForName
  0001d	83 c4 04	 add	 esp, 4
  00020	a3 00 00 00 00	 mov	 DWORD PTR _st_borderpatchnum, eax

; 302  : 	scr_borderpatch = W_CacheLumpNum(st_borderpatchnum, PU_HUDGFX);

  00025	6a 04		 push	 4
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR _st_borderpatchnum
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _W_CacheLumpNum
  00032	83 c4 08	 add	 esp, 8
  00035	a3 00 00 00 00	 mov	 DWORD PTR _scr_borderpatch, eax

; 303  : 
; 304  : 	// Load the numbers, tall and short
; 305  : 	for (i = 0; i < 10; i++)

  0003a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00041	eb 09		 jmp	 SHORT $LN4@ST_LoadGra
$LN2@ST_LoadGra:
  00043	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@ST_LoadGra:
  0004c	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00050	7d 5c		 jge	 SHORT $LN3@ST_LoadGra

; 306  : 	{
; 307  : 		sprintf(buffer, "STTNUM%d", i);

  00052	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_08MHBHCHJF@STTNUM?$CFd@
  0005b	8d 4d ec	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 _sprintf
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 308  : 		tallnum[i] = (patch_t *)W_CachePatchName(buffer, PU_HUDGFX);

  00067	6a 04		 push	 4
  00069	8d 45 ec	 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _W_CachePatchName
  00072	83 c4 08	 add	 esp, 8
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00078	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _tallnum[ecx*4], eax

; 309  : 		sprintf(buffer, "NGTNUM%d", i);

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_08GIKMLEHL@NGTNUM?$CFd@
  00088	8d 4d ec	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _sprintf
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH

; 310  : 		nightsnum[i] = (patch_t *) W_CachePatchName(buffer, PU_HUDGFX);

  00094	6a 04		 push	 4
  00096	8d 45 ec	 lea	 eax, DWORD PTR _buffer$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _W_CachePatchName
  0009f	83 c4 08	 add	 esp, 8
  000a2	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000a5	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _nightsnum[ecx*4], eax

; 311  : 	}

  000ac	eb 95		 jmp	 SHORT $LN2@ST_LoadGra
$LN3@ST_LoadGra:

; 312  : 
; 313  : 	// the original Doom uses 'STF' as base name for all face graphics
; 314  : 	// Graue 04-08-2004: face/name graphics are now indexed by skins
; 315  : 	//                   but load them in R_AddSkins, that gets called
; 316  : 	//                   first anyway
; 317  : 	// cache the status bar overlay icons (fullscreen mode)
; 318  : 	sborings = W_CachePatchName("SBORINGS", PU_HUDGFX);

  000ae	6a 04		 push	 4
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_08PPHPPK@SBORINGS@
  000b5	e8 00 00 00 00	 call	 _W_CachePatchName
  000ba	83 c4 08	 add	 esp, 8
  000bd	a3 00 00 00 00	 mov	 DWORD PTR _sborings, eax

; 319  : 	sboscore = W_CachePatchName("SBOSCORE", PU_HUDGFX);

  000c2	6a 04		 push	 4
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_08DPNKAHNH@SBOSCORE@
  000c9	e8 00 00 00 00	 call	 _W_CachePatchName
  000ce	83 c4 08	 add	 esp, 8
  000d1	a3 00 00 00 00	 mov	 DWORD PTR _sboscore, eax

; 320  : 	sboover = W_CachePatchName("SBOOVER", PU_HUDGFX);

  000d6	6a 04		 push	 4
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_07KGPHOHEB@SBOOVER@
  000dd	e8 00 00 00 00	 call	 _W_CachePatchName
  000e2	83 c4 08	 add	 esp, 8
  000e5	a3 00 00 00 00	 mov	 DWORD PTR _sboover, eax

; 321  : 	timeover = W_CachePatchName("TIMEOVER", PU_HUDGFX);

  000ea	6a 04		 push	 4
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_08LAMKECJA@TIMEOVER@
  000f1	e8 00 00 00 00	 call	 _W_CachePatchName
  000f6	83 c4 08	 add	 esp, 8
  000f9	a3 00 00 00 00	 mov	 DWORD PTR _timeover, eax

; 322  : 	stlivex = W_CachePatchName("STLIVEX", PU_HUDGFX);

  000fe	6a 04		 push	 4
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_07FBMCCBDB@STLIVEX@
  00105	e8 00 00 00 00	 call	 _W_CachePatchName
  0010a	83 c4 08	 add	 esp, 8
  0010d	a3 00 00 00 00	 mov	 DWORD PTR _stlivex, eax

; 323  : 	rrings = W_CachePatchName("RRINGS", PU_HUDGFX);

  00112	6a 04		 push	 4
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_06FNPEPBAH@RRINGS@
  00119	e8 00 00 00 00	 call	 _W_CachePatchName
  0011e	83 c4 08	 add	 esp, 8
  00121	a3 00 00 00 00	 mov	 DWORD PTR _rrings, eax

; 324  : 	sbotime = W_CachePatchName("SBOTIME", PU_HUDGFX); // Time logo

  00126	6a 04		 push	 4
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_07LCCNNDDF@SBOTIME@
  0012d	e8 00 00 00 00	 call	 _W_CachePatchName
  00132	83 c4 08	 add	 esp, 8
  00135	a3 00 00 00 00	 mov	 DWORD PTR _sbotime, eax

; 325  : 	sbocolon = W_CachePatchName("SBOCOLON", PU_HUDGFX); // Colon for time

  0013a	6a 04		 push	 4
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_08BMEDKOEL@SBOCOLON@
  00141	e8 00 00 00 00	 call	 _W_CachePatchName
  00146	83 c4 08	 add	 esp, 8
  00149	a3 00 00 00 00	 mov	 DWORD PTR _sbocolon, eax

; 326  : 	getall = W_CachePatchName("GETALL", PU_HUDGFX); // Special Stage HUD

  0014e	6a 04		 push	 4
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_06HHNNNCFH@GETALL@
  00155	e8 00 00 00 00	 call	 _W_CachePatchName
  0015a	83 c4 08	 add	 esp, 8
  0015d	a3 00 00 00 00	 mov	 DWORD PTR _getall, eax

; 327  : 	timeup = W_CachePatchName("TIMEUP", PU_HUDGFX); // Special Stage HUD

  00162	6a 04		 push	 4
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_06EBDLDDHJ@TIMEUP@
  00169	e8 00 00 00 00	 call	 _W_CachePatchName
  0016e	83 c4 08	 add	 esp, 8
  00171	a3 00 00 00 00	 mov	 DWORD PTR _timeup, eax

; 328  : 	homing1	= W_CachePatchName("HOMING1", PU_HUDGFX); // Emerald hunt indicators

  00176	6a 04		 push	 4
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_07PMIAGMCN@HOMING1@
  0017d	e8 00 00 00 00	 call	 _W_CachePatchName
  00182	83 c4 08	 add	 esp, 8
  00185	a3 00 00 00 00	 mov	 DWORD PTR _homing1, eax

; 329  : 	homing2	= W_CachePatchName("HOMING2", PU_HUDGFX); // Emerald hunt indicators

  0018a	6a 04		 push	 4
  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_07NHKNDPOO@HOMING2@
  00191	e8 00 00 00 00	 call	 _W_CachePatchName
  00196	83 c4 08	 add	 esp, 8
  00199	a3 00 00 00 00	 mov	 DWORD PTR _homing2, eax

; 330  : 	homing3	= W_CachePatchName("HOMING3", PU_HUDGFX); // Emerald hunt indicators

  0019e	6a 04		 push	 4
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_07MOLGAOKP@HOMING3@
  001a5	e8 00 00 00 00	 call	 _W_CachePatchName
  001aa	83 c4 08	 add	 esp, 8
  001ad	a3 00 00 00 00	 mov	 DWORD PTR _homing3, eax

; 331  : 	homing4	= W_CachePatchName("HOMING4", PU_HUDGFX); // Emerald hunt indicators

  001b2	6a 04		 push	 4
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_07IBPHJIGI@HOMING4@
  001b9	e8 00 00 00 00	 call	 _W_CachePatchName
  001be	83 c4 08	 add	 esp, 8
  001c1	a3 00 00 00 00	 mov	 DWORD PTR _homing4, eax

; 332  : 	homing5	= W_CachePatchName("HOMING5", PU_HUDGFX); // Emerald hunt indicators

  001c6	6a 04		 push	 4
  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_07JIOMKJCJ@HOMING5@
  001cd	e8 00 00 00 00	 call	 _W_CachePatchName
  001d2	83 c4 08	 add	 esp, 8
  001d5	a3 00 00 00 00	 mov	 DWORD PTR _homing5, eax

; 333  : 	homing6	= W_CachePatchName("HOMING6", PU_HUDGFX); // Emerald hunt indicators

  001da	6a 04		 push	 4
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_07LDMBPKOK@HOMING6@
  001e1	e8 00 00 00 00	 call	 _W_CachePatchName
  001e6	83 c4 08	 add	 esp, 8
  001e9	a3 00 00 00 00	 mov	 DWORD PTR _homing6, eax

; 334  : 	race1 = W_CachePatchName("RACE1", PU_HUDGFX);

  001ee	6a 04		 push	 4
  001f0	68 00 00 00 00	 push	 OFFSET ??_C@_05FDEFDJBD@RACE1@
  001f5	e8 00 00 00 00	 call	 _W_CachePatchName
  001fa	83 c4 08	 add	 esp, 8
  001fd	a3 00 00 00 00	 mov	 DWORD PTR _race1, eax

; 335  : 	race2 = W_CachePatchName("RACE2", PU_HUDGFX);

  00202	6a 04		 push	 4
  00204	68 00 00 00 00	 push	 OFFSET ??_C@_05HIGIGKNA@RACE2@
  00209	e8 00 00 00 00	 call	 _W_CachePatchName
  0020e	83 c4 08	 add	 esp, 8
  00211	a3 00 00 00 00	 mov	 DWORD PTR _race2, eax

; 336  : 	race3 = W_CachePatchName("RACE3", PU_HUDGFX);

  00216	6a 04		 push	 4
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_05GBHDFLJB@RACE3@
  0021d	e8 00 00 00 00	 call	 _W_CachePatchName
  00222	83 c4 08	 add	 esp, 8
  00225	a3 00 00 00 00	 mov	 DWORD PTR _race3, eax

; 337  : 	racego = W_CachePatchName("RACEGO", PU_HUDGFX);

  0022a	6a 04		 push	 4
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_06KDHAEDMP@RACEGO@
  00231	e8 00 00 00 00	 call	 _W_CachePatchName
  00236	83 c4 08	 add	 esp, 8
  00239	a3 00 00 00 00	 mov	 DWORD PTR _racego, eax

; 338  : 	supersonic = W_CachePatchName("SUPERICO", PU_HUDGFX);

  0023e	6a 04		 push	 4
  00240	68 00 00 00 00	 push	 OFFSET ??_C@_08JCFNPCGH@SUPERICO@
  00245	e8 00 00 00 00	 call	 _W_CachePatchName
  0024a	83 c4 08	 add	 esp, 8
  0024d	a3 00 00 00 00	 mov	 DWORD PTR _supersonic, eax

; 339  : 	nightslink = W_CachePatchName("NGHTLINK", PU_HUDGFX);

  00252	6a 04		 push	 4
  00254	68 00 00 00 00	 push	 OFFSET ??_C@_08NOJDBNDE@NGHTLINK@
  00259	e8 00 00 00 00	 call	 _W_CachePatchName
  0025e	83 c4 08	 add	 esp, 8
  00261	a3 00 00 00 00	 mov	 DWORD PTR _nightslink, eax

; 340  : 	count5 = W_CachePatchName("DRWNF0", PU_HUDGFX);

  00266	6a 04		 push	 4
  00268	68 00 00 00 00	 push	 OFFSET ??_C@_06MJDICDED@DRWNF0@
  0026d	e8 00 00 00 00	 call	 _W_CachePatchName
  00272	83 c4 08	 add	 esp, 8
  00275	a3 00 00 00 00	 mov	 DWORD PTR _count5, eax

; 341  : 	count4 = W_CachePatchName("DRWNE0", PU_HUDGFX);

  0027a	6a 04		 push	 4
  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_06MLHOJNBK@DRWNE0@
  00281	e8 00 00 00 00	 call	 _W_CachePatchName
  00286	83 c4 08	 add	 esp, 8
  00289	a3 00 00 00 00	 mov	 DWORD PTR _count4, eax

; 342  : 	count3 = W_CachePatchName("DRWND0", PU_HUDGFX);

  0028e	6a 04		 push	 4
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_06MKLMPHCN@DRWND0@
  00295	e8 00 00 00 00	 call	 _W_CachePatchName
  0029a	83 c4 08	 add	 esp, 8
  0029d	a3 00 00 00 00	 mov	 DWORD PTR _count3, eax

; 343  : 	count2 = W_CachePatchName("DRWNC0", PU_HUDGFX);

  002a2	6a 04		 push	 4
  002a4	68 00 00 00 00	 push	 OFFSET ??_C@_06MPPDOBKI@DRWNC0@
  002a9	e8 00 00 00 00	 call	 _W_CachePatchName
  002ae	83 c4 08	 add	 esp, 8
  002b1	a3 00 00 00 00	 mov	 DWORD PTR _count2, eax

; 344  : 	count1 = W_CachePatchName("DRWNB0", PU_HUDGFX);

  002b6	6a 04		 push	 4
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_06MODBILJP@DRWNB0@
  002bd	e8 00 00 00 00	 call	 _W_CachePatchName
  002c2	83 c4 08	 add	 esp, 8
  002c5	a3 00 00 00 00	 mov	 DWORD PTR _count1, eax

; 345  : 	count0 = W_CachePatchName("DRWNA0", PU_HUDGFX);

  002ca	6a 04		 push	 4
  002cc	68 00 00 00 00	 push	 OFFSET ??_C@_06MMHHDFMG@DRWNA0@
  002d1	e8 00 00 00 00	 call	 _W_CachePatchName
  002d6	83 c4 08	 add	 esp, 8
  002d9	a3 00 00 00 00	 mov	 DWORD PTR _count0, eax

; 346  : 
; 347  : 	curweapon = W_CachePatchName("CURWEAP", PU_HUDGFX);

  002de	6a 04		 push	 4
  002e0	68 00 00 00 00	 push	 OFFSET ??_C@_07OAHOILAD@CURWEAP@
  002e5	e8 00 00 00 00	 call	 _W_CachePatchName
  002ea	83 c4 08	 add	 esp, 8
  002ed	a3 00 00 00 00	 mov	 DWORD PTR _curweapon, eax

; 348  : 	normring = W_CachePatchName("RINGIND", PU_HUDGFX);

  002f2	6a 04		 push	 4
  002f4	68 00 00 00 00	 push	 OFFSET ??_C@_07ILMBDGLO@RINGIND@
  002f9	e8 00 00 00 00	 call	 _W_CachePatchName
  002fe	83 c4 08	 add	 esp, 8
  00301	a3 00 00 00 00	 mov	 DWORD PTR _normring, eax

; 349  : 	bouncering = W_CachePatchName("BNCEIND", PU_HUDGFX);

  00306	6a 04		 push	 4
  00308	68 00 00 00 00	 push	 OFFSET ??_C@_07PEIDHJKF@BNCEIND@
  0030d	e8 00 00 00 00	 call	 _W_CachePatchName
  00312	83 c4 08	 add	 esp, 8
  00315	a3 00 00 00 00	 mov	 DWORD PTR _bouncering, eax

; 350  : 	autoring = W_CachePatchName("AUTOIND", PU_HUDGFX);

  0031a	6a 04		 push	 4
  0031c	68 00 00 00 00	 push	 OFFSET ??_C@_07ELLGJMPA@AUTOIND@
  00321	e8 00 00 00 00	 call	 _W_CachePatchName
  00326	83 c4 08	 add	 esp, 8
  00329	a3 00 00 00 00	 mov	 DWORD PTR _autoring, eax

; 351  : 	explosionring = W_CachePatchName("BOMBIND", PU_HUDGFX);

  0032e	6a 04		 push	 4
  00330	68 00 00 00 00	 push	 OFFSET ??_C@_07NKNOMPHB@BOMBIND@
  00335	e8 00 00 00 00	 call	 _W_CachePatchName
  0033a	83 c4 08	 add	 esp, 8
  0033d	a3 00 00 00 00	 mov	 DWORD PTR _explosionring, eax

; 352  : 	scatterring = W_CachePatchName("SCATIND", PU_HUDGFX);

  00342	6a 04		 push	 4
  00344	68 00 00 00 00	 push	 OFFSET ??_C@_07DFANDGOJ@SCATIND@
  00349	e8 00 00 00 00	 call	 _W_CachePatchName
  0034e	83 c4 08	 add	 esp, 8
  00351	a3 00 00 00 00	 mov	 DWORD PTR _scatterring, eax

; 353  : 	grenadering = W_CachePatchName("GRENIND", PU_HUDGFX);

  00356	6a 04		 push	 4
  00358	68 00 00 00 00	 push	 OFFSET ??_C@_07LNJEFDHH@GRENIND@
  0035d	e8 00 00 00 00	 call	 _W_CachePatchName
  00362	83 c4 08	 add	 esp, 8
  00365	a3 00 00 00 00	 mov	 DWORD PTR _grenadering, eax

; 354  : 	railring = W_CachePatchName("RAILIND", PU_HUDGFX);

  0036a	6a 04		 push	 4
  0036c	68 00 00 00 00	 push	 OFFSET ??_C@_07NCPLHJHA@RAILIND@
  00371	e8 00 00 00 00	 call	 _W_CachePatchName
  00376	83 c4 08	 add	 esp, 8
  00379	a3 00 00 00 00	 mov	 DWORD PTR _railring, eax

; 355  : 	jumpshield = W_CachePatchName("WHTVB0", PU_HUDGFX);

  0037e	6a 04		 push	 4
  00380	68 00 00 00 00	 push	 OFFSET ??_C@_06OIEHCJJB@WHTVB0@
  00385	e8 00 00 00 00	 call	 _W_CachePatchName
  0038a	83 c4 08	 add	 esp, 8
  0038d	a3 00 00 00 00	 mov	 DWORD PTR _jumpshield, eax

; 356  : 	forceshield = W_CachePatchName("BLTVB0", PU_HUDGFX);

  00392	6a 04		 push	 4
  00394	68 00 00 00 00	 push	 OFFSET ??_C@_06EGDANIOO@BLTVB0@
  00399	e8 00 00 00 00	 call	 _W_CachePatchName
  0039e	83 c4 08	 add	 esp, 8
  003a1	a3 00 00 00 00	 mov	 DWORD PTR _forceshield, eax

; 357  : 	ringshield = W_CachePatchName("YLTVB0", PU_HUDGFX);

  003a6	6a 04		 push	 4
  003a8	68 00 00 00 00	 push	 OFFSET ??_C@_06CDOJBANK@YLTVB0@
  003ad	e8 00 00 00 00	 call	 _W_CachePatchName
  003b2	83 c4 08	 add	 esp, 8
  003b5	a3 00 00 00 00	 mov	 DWORD PTR _ringshield, eax

; 358  : 	watershield = W_CachePatchName("GRTVB0", PU_HUDGFX);

  003ba	6a 04		 push	 4
  003bc	68 00 00 00 00	 push	 OFFSET ??_C@_06CNNEJEKC@GRTVB0@
  003c1	e8 00 00 00 00	 call	 _W_CachePatchName
  003c6	83 c4 08	 add	 esp, 8
  003c9	a3 00 00 00 00	 mov	 DWORD PTR _watershield, eax

; 359  : 	bombshield = W_CachePatchName("BKTVB0", PU_HUDGFX);

  003ce	6a 04		 push	 4
  003d0	68 00 00 00 00	 push	 OFFSET ??_C@_06FLDFOIFG@BKTVB0@
  003d5	e8 00 00 00 00	 call	 _W_CachePatchName
  003da	83 c4 08	 add	 esp, 8
  003dd	a3 00 00 00 00	 mov	 DWORD PTR _bombshield, eax

; 360  : 	invincibility = W_CachePatchName("PINVB0", PU_HUDGFX);

  003e2	6a 04		 push	 4
  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_06MMOMELJJ@PINVB0@
  003e9	e8 00 00 00 00	 call	 _W_CachePatchName
  003ee	83 c4 08	 add	 esp, 8
  003f1	a3 00 00 00 00	 mov	 DWORD PTR _invincibility, eax

; 361  : 	sneakers = W_CachePatchName("SHTVB0", PU_HUDGFX);

  003f6	6a 04		 push	 4
  003f8	68 00 00 00 00	 push	 OFFSET ??_C@_06BMAIANIC@SHTVB0@
  003fd	e8 00 00 00 00	 call	 _W_CachePatchName
  00402	83 c4 08	 add	 esp, 8
  00405	a3 00 00 00 00	 mov	 DWORD PTR _sneakers, eax

; 362  : 	gravboots = W_CachePatchName("GBTVB0", PU_HUDGFX);

  0040a	6a 04		 push	 4
  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_06COACJGDJ@GBTVB0@
  00411	e8 00 00 00 00	 call	 _W_CachePatchName
  00416	83 c4 08	 add	 esp, 8
  00419	a3 00 00 00 00	 mov	 DWORD PTR _gravboots, eax

; 363  : 
; 364  : 	tagico = W_CachePatchName("TAGICO", PU_HUDGFX);

  0041e	6a 04		 push	 4
  00420	68 00 00 00 00	 push	 OFFSET ??_C@_06HIPPMHFB@TAGICO@
  00425	e8 00 00 00 00	 call	 _W_CachePatchName
  0042a	83 c4 08	 add	 esp, 8
  0042d	a3 00 00 00 00	 mov	 DWORD PTR _tagico, eax

; 365  : 	rflagico = W_CachePatchName("RFLAGICO", PU_HUDGFX);

  00432	6a 04		 push	 4
  00434	68 00 00 00 00	 push	 OFFSET ??_C@_08OEPNHMLC@RFLAGICO@
  00439	e8 00 00 00 00	 call	 _W_CachePatchName
  0043e	83 c4 08	 add	 esp, 8
  00441	a3 00 00 00 00	 mov	 DWORD PTR _rflagico, eax

; 366  : 	bflagico = W_CachePatchName("BFLAGICO", PU_HUDGFX);

  00446	6a 04		 push	 4
  00448	68 00 00 00 00	 push	 OFFSET ??_C@_08EIDNDOMD@BFLAGICO@
  0044d	e8 00 00 00 00	 call	 _W_CachePatchName
  00452	83 c4 08	 add	 esp, 8
  00455	a3 00 00 00 00	 mov	 DWORD PTR _bflagico, eax

; 367  : 	rmatcico = W_CachePatchName("RMATCICO", PU_HUDGFX);

  0045a	6a 04		 push	 4
  0045c	68 00 00 00 00	 push	 OFFSET ??_C@_08HONLDEMM@RMATCICO@
  00461	e8 00 00 00 00	 call	 _W_CachePatchName
  00466	83 c4 08	 add	 esp, 8
  00469	a3 00 00 00 00	 mov	 DWORD PTR _rmatcico, eax

; 368  : 	bmatcico = W_CachePatchName("BMATCICO", PU_HUDGFX);

  0046e	6a 04		 push	 4
  00470	68 00 00 00 00	 push	 OFFSET ??_C@_08NCBLHGLN@BMATCICO@
  00475	e8 00 00 00 00	 call	 _W_CachePatchName
  0047a	83 c4 08	 add	 esp, 8
  0047d	a3 00 00 00 00	 mov	 DWORD PTR _bmatcico, eax

; 369  : 	gotrflag = W_CachePatchName("GOTRFLAG", PU_HUDGFX);

  00482	6a 04		 push	 4
  00484	68 00 00 00 00	 push	 OFFSET ??_C@_08NHFEFNP@GOTRFLAG@
  00489	e8 00 00 00 00	 call	 _W_CachePatchName
  0048e	83 c4 08	 add	 esp, 8
  00491	a3 00 00 00 00	 mov	 DWORD PTR _gotrflag, eax

; 370  : 	gotbflag = W_CachePatchName("GOTBFLAG", PU_HUDGFX);

  00496	6a 04		 push	 4
  00498	68 00 00 00 00	 push	 OFFSET ??_C@_08OKDEHEE@GOTBFLAG@
  0049d	e8 00 00 00 00	 call	 _W_CachePatchName
  004a2	83 c4 08	 add	 esp, 8
  004a5	a3 00 00 00 00	 mov	 DWORD PTR _gotbflag, eax

; 371  : 	nonicon = W_CachePatchName("NONICON", PU_HUDGFX);

  004aa	6a 04		 push	 4
  004ac	68 00 00 00 00	 push	 OFFSET ??_C@_07OIKFPLFI@NONICON@
  004b1	e8 00 00 00 00	 call	 _W_CachePatchName
  004b6	83 c4 08	 add	 esp, 8
  004b9	a3 00 00 00 00	 mov	 DWORD PTR _nonicon, eax

; 372  : 
; 373  : 	// NiGHTS HUD things
; 374  : 	bluestat = W_CachePatchName("BLUESTAT", PU_HUDGFX);

  004be	6a 04		 push	 4
  004c0	68 00 00 00 00	 push	 OFFSET ??_C@_08CNILBIPE@BLUESTAT@
  004c5	e8 00 00 00 00	 call	 _W_CachePatchName
  004ca	83 c4 08	 add	 esp, 8
  004cd	a3 00 00 00 00	 mov	 DWORD PTR _bluestat, eax

; 375  : 	byelstat = W_CachePatchName("BYELSTAT", PU_HUDGFX);

  004d2	6a 04		 push	 4
  004d4	68 00 00 00 00	 push	 OFFSET ??_C@_08FJABOKLN@BYELSTAT@
  004d9	e8 00 00 00 00	 call	 _W_CachePatchName
  004de	83 c4 08	 add	 esp, 8
  004e1	a3 00 00 00 00	 mov	 DWORD PTR _byelstat, eax

; 376  : 	orngstat = W_CachePatchName("ORNGSTAT", PU_HUDGFX);

  004e6	6a 04		 push	 4
  004e8	68 00 00 00 00	 push	 OFFSET ??_C@_08JNOELFIF@ORNGSTAT@
  004ed	e8 00 00 00 00	 call	 _W_CachePatchName
  004f2	83 c4 08	 add	 esp, 8
  004f5	a3 00 00 00 00	 mov	 DWORD PTR _orngstat, eax

; 377  : 	redstat = W_CachePatchName("REDSTAT", PU_HUDGFX);

  004fa	6a 04		 push	 4
  004fc	68 00 00 00 00	 push	 OFFSET ??_C@_07JLHHJEMA@REDSTAT@
  00501	e8 00 00 00 00	 call	 _W_CachePatchName
  00506	83 c4 08	 add	 esp, 8
  00509	a3 00 00 00 00	 mov	 DWORD PTR _redstat, eax

; 378  : 	yelstat = W_CachePatchName("YELSTAT", PU_HUDGFX);

  0050e	6a 04		 push	 4
  00510	68 00 00 00 00	 push	 OFFSET ??_C@_07CKEOAKPL@YELSTAT@
  00515	e8 00 00 00 00	 call	 _W_CachePatchName
  0051a	83 c4 08	 add	 esp, 8
  0051d	a3 00 00 00 00	 mov	 DWORD PTR _yelstat, eax

; 379  : 	nbracket = W_CachePatchName("NBRACKET", PU_HUDGFX);

  00522	6a 04		 push	 4
  00524	68 00 00 00 00	 push	 OFFSET ??_C@_08OPJAPNNN@NBRACKET@
  00529	e8 00 00 00 00	 call	 _W_CachePatchName
  0052e	83 c4 08	 add	 esp, 8
  00531	a3 00 00 00 00	 mov	 DWORD PTR _nbracket, eax

; 380  : 	nhud[0] = W_CachePatchName("NHUD1", PU_HUDGFX);

  00536	6a 04		 push	 4
  00538	68 00 00 00 00	 push	 OFFSET ??_C@_05FOPBPLPG@NHUD1@
  0053d	e8 00 00 00 00	 call	 _W_CachePatchName
  00542	83 c4 08	 add	 esp, 8
  00545	b9 04 00 00 00	 mov	 ecx, 4
  0054a	6b d1 00	 imul	 edx, ecx, 0
  0054d	89 82 00 00 00
	00		 mov	 DWORD PTR _nhud[edx], eax

; 381  : 	nhud[1] = W_CachePatchName("NHUD2", PU_HUDGFX);

  00553	6a 04		 push	 4
  00555	68 00 00 00 00	 push	 OFFSET ??_C@_05HFNMKIDF@NHUD2@
  0055a	e8 00 00 00 00	 call	 _W_CachePatchName
  0055f	83 c4 08	 add	 esp, 8
  00562	b9 04 00 00 00	 mov	 ecx, 4
  00567	c1 e1 00	 shl	 ecx, 0
  0056a	89 81 00 00 00
	00		 mov	 DWORD PTR _nhud[ecx], eax

; 382  : 	nhud[2] = W_CachePatchName("NHUD3", PU_HUDGFX);

  00570	6a 04		 push	 4
  00572	68 00 00 00 00	 push	 OFFSET ??_C@_05GMMHJJHE@NHUD3@
  00577	e8 00 00 00 00	 call	 _W_CachePatchName
  0057c	83 c4 08	 add	 esp, 8
  0057f	b9 04 00 00 00	 mov	 ecx, 4
  00584	d1 e1		 shl	 ecx, 1
  00586	89 81 00 00 00
	00		 mov	 DWORD PTR _nhud[ecx], eax

; 383  : 	nhud[3] = W_CachePatchName("NHUD4", PU_HUDGFX);

  0058c	6a 04		 push	 4
  0058e	68 00 00 00 00	 push	 OFFSET ??_C@_05CDIGAPLD@NHUD4@
  00593	e8 00 00 00 00	 call	 _W_CachePatchName
  00598	83 c4 08	 add	 esp, 8
  0059b	b9 04 00 00 00	 mov	 ecx, 4
  005a0	6b d1 03	 imul	 edx, ecx, 3
  005a3	89 82 00 00 00
	00		 mov	 DWORD PTR _nhud[edx], eax

; 384  : 	nhud[4] = W_CachePatchName("NHUD5", PU_HUDGFX);

  005a9	6a 04		 push	 4
  005ab	68 00 00 00 00	 push	 OFFSET ??_C@_05DKJNDOPC@NHUD5@
  005b0	e8 00 00 00 00	 call	 _W_CachePatchName
  005b5	83 c4 08	 add	 esp, 8
  005b8	b9 04 00 00 00	 mov	 ecx, 4
  005bd	c1 e1 02	 shl	 ecx, 2
  005c0	89 81 00 00 00
	00		 mov	 DWORD PTR _nhud[ecx], eax

; 385  : 	nhud[5] = W_CachePatchName("NHUD6", PU_HUDGFX);

  005c6	6a 04		 push	 4
  005c8	68 00 00 00 00	 push	 OFFSET ??_C@_05BBLAGNDB@NHUD6@
  005cd	e8 00 00 00 00	 call	 _W_CachePatchName
  005d2	83 c4 08	 add	 esp, 8
  005d5	b9 04 00 00 00	 mov	 ecx, 4
  005da	6b d1 05	 imul	 edx, ecx, 5
  005dd	89 82 00 00 00
	00		 mov	 DWORD PTR _nhud[edx], eax

; 386  : 	nhud[6] = W_CachePatchName("NHUD7", PU_HUDGFX);

  005e3	6a 04		 push	 4
  005e5	68 00 00 00 00	 push	 OFFSET ??_C@_05IKLFMHA@NHUD7@
  005ea	e8 00 00 00 00	 call	 _W_CachePatchName
  005ef	83 c4 08	 add	 esp, 8
  005f2	b9 04 00 00 00	 mov	 ecx, 4
  005f7	6b d1 06	 imul	 edx, ecx, 6
  005fa	89 82 00 00 00
	00		 mov	 DWORD PTR _nhud[edx], eax

; 387  : 	nhud[7] = W_CachePatchName("NHUD8", PU_HUDGFX);

  00600	6a 04		 push	 4
  00602	68 00 00 00 00	 push	 OFFSET ??_C@_05IPDDEALP@NHUD8@
  00607	e8 00 00 00 00	 call	 _W_CachePatchName
  0060c	83 c4 08	 add	 esp, 8
  0060f	b9 04 00 00 00	 mov	 ecx, 4
  00614	6b d1 07	 imul	 edx, ecx, 7
  00617	89 82 00 00 00
	00		 mov	 DWORD PTR _nhud[edx], eax

; 388  : 	nhud[8] = W_CachePatchName("NHUD9", PU_HUDGFX);

  0061d	6a 04		 push	 4
  0061f	68 00 00 00 00	 push	 OFFSET ??_C@_05JGCIHBPO@NHUD9@
  00624	e8 00 00 00 00	 call	 _W_CachePatchName
  00629	83 c4 08	 add	 esp, 8
  0062c	b9 04 00 00 00	 mov	 ecx, 4
  00631	c1 e1 03	 shl	 ecx, 3
  00634	89 81 00 00 00
	00		 mov	 DWORD PTR _nhud[ecx], eax

; 389  : 	nhud[9] = W_CachePatchName("NHUD10", PU_HUDGFX);

  0063a	6a 04		 push	 4
  0063c	68 00 00 00 00	 push	 OFFSET ??_C@_06ILMGJACB@NHUD10@
  00641	e8 00 00 00 00	 call	 _W_CachePatchName
  00646	83 c4 08	 add	 esp, 8
  00649	b9 04 00 00 00	 mov	 ecx, 4
  0064e	6b d1 09	 imul	 edx, ecx, 9
  00651	89 82 00 00 00
	00		 mov	 DWORD PTR _nhud[edx], eax

; 390  : 	nhud[10] = W_CachePatchName("NHUD11", PU_HUDGFX);

  00657	6a 04		 push	 4
  00659	68 00 00 00 00	 push	 OFFSET ??_C@_06JCNNKBGA@NHUD11@
  0065e	e8 00 00 00 00	 call	 _W_CachePatchName
  00663	83 c4 08	 add	 esp, 8
  00666	b9 04 00 00 00	 mov	 ecx, 4
  0066b	6b d1 0a	 imul	 edx, ecx, 10
  0066e	89 82 00 00 00
	00		 mov	 DWORD PTR _nhud[edx], eax

; 391  : 	nhud[11] = W_CachePatchName("NHUD12", PU_HUDGFX);

  00674	6a 04		 push	 4
  00676	68 00 00 00 00	 push	 OFFSET ??_C@_06LJPAPCKD@NHUD12@
  0067b	e8 00 00 00 00	 call	 _W_CachePatchName
  00680	83 c4 08	 add	 esp, 8
  00683	b9 04 00 00 00	 mov	 ecx, 4
  00688	6b d1 0b	 imul	 edx, ecx, 11
  0068b	89 82 00 00 00
	00		 mov	 DWORD PTR _nhud[edx], eax

; 392  : 	minicaps = W_CachePatchName("MINICAPS", PU_HUDGFX);

  00691	6a 04		 push	 4
  00693	68 00 00 00 00	 push	 OFFSET ??_C@_08PNELLOKB@MINICAPS@
  00698	e8 00 00 00 00	 call	 _W_CachePatchName
  0069d	83 c4 08	 add	 esp, 8
  006a0	a3 00 00 00 00	 mov	 DWORD PTR _minicaps, eax

; 393  : 
; 394  : 	narrow[0] = W_CachePatchName("NARROW1", PU_HUDGFX);

  006a5	6a 04		 push	 4
  006a7	68 00 00 00 00	 push	 OFFSET ??_C@_07CLPKMMDP@NARROW1@
  006ac	e8 00 00 00 00	 call	 _W_CachePatchName
  006b1	83 c4 08	 add	 esp, 8
  006b4	b9 04 00 00 00	 mov	 ecx, 4
  006b9	6b d1 00	 imul	 edx, ecx, 0
  006bc	89 82 00 00 00
	00		 mov	 DWORD PTR _narrow[edx], eax

; 395  : 	narrow[1] = W_CachePatchName("NARROW2", PU_HUDGFX);

  006c2	6a 04		 push	 4
  006c4	68 00 00 00 00	 push	 OFFSET ??_C@_07NHJPPM@NARROW2@
  006c9	e8 00 00 00 00	 call	 _W_CachePatchName
  006ce	83 c4 08	 add	 esp, 8
  006d1	b9 04 00 00 00	 mov	 ecx, 4
  006d6	c1 e1 00	 shl	 ecx, 0
  006d9	89 81 00 00 00
	00		 mov	 DWORD PTR _narrow[ecx], eax

; 396  : 	narrow[2] = W_CachePatchName("NARROW3", PU_HUDGFX);

  006df	6a 04		 push	 4
  006e1	68 00 00 00 00	 push	 OFFSET ??_C@_07BJMMKOLN@NARROW3@
  006e6	e8 00 00 00 00	 call	 _W_CachePatchName
  006eb	83 c4 08	 add	 esp, 8
  006ee	b9 04 00 00 00	 mov	 ecx, 4
  006f3	d1 e1		 shl	 ecx, 1
  006f5	89 81 00 00 00
	00		 mov	 DWORD PTR _narrow[ecx], eax

; 397  : 	narrow[3] = W_CachePatchName("NARROW4", PU_HUDGFX);

  006fb	6a 04		 push	 4
  006fd	68 00 00 00 00	 push	 OFFSET ??_C@_07FGINDIHK@NARROW4@
  00702	e8 00 00 00 00	 call	 _W_CachePatchName
  00707	83 c4 08	 add	 esp, 8
  0070a	b9 04 00 00 00	 mov	 ecx, 4
  0070f	6b d1 03	 imul	 edx, ecx, 3
  00712	89 82 00 00 00
	00		 mov	 DWORD PTR _narrow[edx], eax

; 398  : 	narrow[4] = W_CachePatchName("NARROW5", PU_HUDGFX);

  00718	6a 04		 push	 4
  0071a	68 00 00 00 00	 push	 OFFSET ??_C@_07EPJGAJDL@NARROW5@
  0071f	e8 00 00 00 00	 call	 _W_CachePatchName
  00724	83 c4 08	 add	 esp, 8
  00727	b9 04 00 00 00	 mov	 ecx, 4
  0072c	c1 e1 02	 shl	 ecx, 2
  0072f	89 81 00 00 00
	00		 mov	 DWORD PTR _narrow[ecx], eax

; 399  : 	narrow[5] = W_CachePatchName("NARROW6", PU_HUDGFX);

  00735	6a 04		 push	 4
  00737	68 00 00 00 00	 push	 OFFSET ??_C@_07GELLFKPI@NARROW6@
  0073c	e8 00 00 00 00	 call	 _W_CachePatchName
  00741	83 c4 08	 add	 esp, 8
  00744	b9 04 00 00 00	 mov	 ecx, 4
  00749	6b d1 05	 imul	 edx, ecx, 5
  0074c	89 82 00 00 00
	00		 mov	 DWORD PTR _narrow[edx], eax

; 400  : 	narrow[6] = W_CachePatchName("NARROW7", PU_HUDGFX);

  00752	6a 04		 push	 4
  00754	68 00 00 00 00	 push	 OFFSET ??_C@_07HNKAGLLJ@NARROW7@
  00759	e8 00 00 00 00	 call	 _W_CachePatchName
  0075e	83 c4 08	 add	 esp, 8
  00761	b9 04 00 00 00	 mov	 ecx, 4
  00766	6b d1 06	 imul	 edx, ecx, 6
  00769	89 82 00 00 00
	00		 mov	 DWORD PTR _narrow[edx], eax

; 401  : 	narrow[7] = W_CachePatchName("NARROW8", PU_HUDGFX);

  0076f	6a 04		 push	 4
  00771	68 00 00 00 00	 push	 OFFSET ??_C@_07PKDIHHHG@NARROW8@
  00776	e8 00 00 00 00	 call	 _W_CachePatchName
  0077b	83 c4 08	 add	 esp, 8
  0077e	b9 04 00 00 00	 mov	 ecx, 4
  00783	6b d1 07	 imul	 edx, ecx, 7
  00786	89 82 00 00 00
	00		 mov	 DWORD PTR _narrow[edx], eax

; 402  : 
; 403  : 	// non-animated version
; 404  : 	narrow[8] = W_CachePatchName("NARROW9", PU_HUDGFX);

  0078c	6a 04		 push	 4
  0078e	68 00 00 00 00	 push	 OFFSET ??_C@_07ODCDEGDH@NARROW9@
  00793	e8 00 00 00 00	 call	 _W_CachePatchName
  00798	83 c4 08	 add	 esp, 8
  0079b	b9 04 00 00 00	 mov	 ecx, 4
  007a0	c1 e1 03	 shl	 ecx, 3
  007a3	89 81 00 00 00
	00		 mov	 DWORD PTR _narrow[ecx], eax

; 405  : 
; 406  : 	// minus for negative numbers
; 407  : 	minus = (patch_t *)W_CachePatchName("STTMINUS", PU_HUDGFX);

  007a9	6a 04		 push	 4
  007ab	68 00 00 00 00	 push	 OFFSET ??_C@_08DCNAEIDC@STTMINUS@
  007b0	e8 00 00 00 00	 call	 _W_CachePatchName
  007b5	83 c4 08	 add	 esp, 8
  007b8	a3 00 00 00 00	 mov	 DWORD PTR _minus, eax

; 408  : }

  007bd	5f		 pop	 edi
  007be	5e		 pop	 esi
  007bf	5b		 pop	 ebx
  007c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007c3	33 cd		 xor	 ecx, ebp
  007c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007ca	8b e5		 mov	 esp, ebp
  007cc	5d		 pop	 ebp
  007cd	c3		 ret	 0
_ST_LoadGraphics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_UnloadGraphics
_TEXT	SEGMENT
_ST_UnloadGraphics PROC					; COMDAT

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 292  : 	Z_FreeTags(PU_HUDGFX, PU_HUDGFX);

  00009	6a 04		 push	 4
  0000b	6a 04		 push	 4
  0000d	e8 00 00 00 00	 call	 _Z_FreeTags
  00012	83 c4 08	 add	 esp, 8

; 293  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_ST_UnloadGraphics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_changeDemoView
_TEXT	SEGMENT
_ST_changeDemoView PROC					; COMDAT

; 527  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 528  : 	// the same routine is called at multiplayer deathmatch spawn
; 529  : 	// so it can be called multiple times
; 530  : 	ST_Start();

  00009	e8 00 00 00 00	 call	 _ST_Start
  0000e	90		 npad	 1

; 531  : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_ST_changeDemoView ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_Init
_TEXT	SEGMENT
_i$ = -4						; size = 4
_ST_Init PROC						; COMDAT

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 511  : 	INT32 i;
; 512  : 
; 513  : 	for (i = 0; i < MAXPLAYERS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@ST_Init
$LN2@ST_Init:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@ST_Init:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0001f	7d 1e		 jge	 SHORT $LN3@ST_Init

; 514  : 	{
; 515  : 		facefreed[i] = true;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00024	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _facefreed[eax*4], 1

; 516  : 		prefixfreed[i] = true;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00032	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _prefixfreed[eax*4], 1

; 517  : 	}

  0003d	eb d3		 jmp	 SHORT $LN2@ST_Init
$LN3@ST_Init:

; 518  : 
; 519  : 	if (dedicated)

  0003f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00046	74 02		 je	 SHORT $LN5@ST_Init

; 520  : 		return;

  00048	eb 06		 jmp	 SHORT $LN1@ST_Init
$LN5@ST_Init:

; 521  : 
; 522  : 	ST_LoadGraphics();

  0004a	e8 00 00 00 00	 call	 _ST_LoadGraphics
  0004f	90		 npad	 1
$LN1@ST_Init:

; 523  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_ST_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_Start
_TEXT	SEGMENT
_ST_Start PROC						; COMDAT

; 494  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 495  : 	if (!st_stopped)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _st_stopped, 0
  00010	75 06		 jne	 SHORT $LN2@ST_Start

; 496  : 		ST_Stop();

  00012	e8 00 00 00 00	 call	 _ST_Stop
  00017	90		 npad	 1
$LN2@ST_Start:

; 497  : 
; 498  : 	ST_InitData();

  00018	e8 00 00 00 00	 call	 _ST_InitData
  0001d	90		 npad	 1

; 499  : 	st_stopped = false;

  0001e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _st_stopped, 0

; 500  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_ST_Start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_Drawer
_TEXT	SEGMENT
tv93 = -72						; size = 4
tv94 = -68						; size = 4
tv153 = -68						; size = 4
_refresh$ = 8						; size = 4
_ST_Drawer PROC						; COMDAT

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 246  : #ifdef SEENAMES
; 247  : 	if (cv_seenames.value && cv_allowseenames.value && displayplayer == consoleplayer && seenplayer && seenplayer->mo)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_seenames+20, 0
  00010	0f 84 c2 01 00
	00		 je	 $LN6@ST_Drawer
  00016	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowseenames+20, 0
  0001d	0f 84 b5 01 00
	00		 je	 $LN6@ST_Drawer
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  00028	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0002e	0f 85 a4 01 00
	00		 jne	 $LN6@ST_Drawer
  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _seenplayer, 0
  0003b	0f 84 97 01 00
	00		 je	 $LN6@ST_Drawer
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR _seenplayer
  00046	83 38 00	 cmp	 DWORD PTR [eax], 0
  00049	0f 84 89 01 00
	00		 je	 $LN6@ST_Drawer

; 248  : 	{
; 249  : 		if (cv_seenames.value == 1)

  0004f	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_seenames+20, 1
  00056	75 35		 jne	 SHORT $LN3@ST_Drawer

; 250  : 			V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT/2 + 15, V_TRANSLUCENT, player_names[seenplayer-players]);

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR _seenplayer
  0005d	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00062	99		 cdq
  00063	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00068	f7 f9		 idiv	 ecx
  0006a	6b d0 16	 imul	 edx, eax, 22
  0006d	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00073	52		 push	 edx
  00074	68 00 00 40 00	 push	 4194304			; 00400000H
  00079	6a 73		 push	 115			; 00000073H
  0007b	68 a0 00 00 00	 push	 160			; 000000a0H
  00080	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00085	83 c4 10	 add	 esp, 16			; 00000010H
  00088	e9 4b 01 00 00	 jmp	 $LN6@ST_Drawer
$LN3@ST_Drawer:

; 251  : 		else if (cv_seenames.value == 2)

  0008d	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_seenames+20, 2
  00094	0f 85 96 00 00
	00		 jne	 $LN5@ST_Drawer

; 252  : 			V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT/2 + 15, V_TRANSLUCENT,

  0009a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a1	83 f8 04	 cmp	 eax, 4
  000a4	74 1e		 je	 SHORT $LN14@ST_Drawer
  000a6	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _gametype
  000ad	83 f9 01	 cmp	 ecx, 1
  000b0	75 09		 jne	 SHORT $LN13@ST_Drawer
  000b2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  000b9	75 09		 jne	 SHORT $LN14@ST_Drawer
$LN13@ST_Drawer:
  000bb	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], OFFSET ??_C@_00CNPNBAHC@@
  000c2	eb 25		 jmp	 SHORT $LN17@ST_Drawer
$LN14@ST_Drawer:
  000c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _seenplayer
  000ca	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  000d1	75 09		 jne	 SHORT $LN15@ST_Drawer
  000d3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  000da	eb 07		 jmp	 SHORT $LN16@ST_Drawer
$LN15@ST_Drawer:
  000dc	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN16@ST_Drawer:
  000e3	8b 45 b8	 mov	 eax, DWORD PTR tv93[ebp]
  000e6	89 45 bc	 mov	 DWORD PTR tv94[ebp], eax
$LN17@ST_Drawer:
  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _seenplayer
  000ee	2d 00 00 00 00	 sub	 eax, OFFSET _players
  000f3	99		 cdq
  000f4	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  000f9	f7 f9		 idiv	 ecx
  000fb	6b d0 16	 imul	 edx, eax, 22
  000fe	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00104	52		 push	 edx
  00105	8b 45 bc	 mov	 eax, DWORD PTR tv94[ebp]
  00108	50		 push	 eax
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs@
  0010e	e8 00 00 00 00	 call	 _va
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
  00116	50		 push	 eax
  00117	68 00 00 40 00	 push	 4194304			; 00400000H
  0011c	6a 73		 push	 115			; 00000073H
  0011e	68 a0 00 00 00	 push	 160			; 000000a0H
  00123	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00128	83 c4 10	 add	 esp, 16			; 00000010H
  0012b	e9 a8 00 00 00	 jmp	 $LN6@ST_Drawer
$LN5@ST_Drawer:

; 253  : 			va("%s%s", (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))
; 254  : 			           ? ((seenplayer->ctfteam == 1) ? "\x85" : "\x84") : "", player_names[seenplayer-players]));
; 255  : 		else //if (cv_seenames.value == 3)
; 256  : 			V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT/2 + 15, V_TRANSLUCENT,

  00130	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00137	85 c0		 test	 eax, eax
  00139	74 54		 je	 SHORT $LN18@ST_Drawer
  0013b	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _gametype
  00142	83 f9 02	 cmp	 ecx, 2
  00145	74 48		 je	 SHORT $LN18@ST_Drawer
  00147	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _gametype
  0014e	83 fa 04	 cmp	 edx, 4
  00151	74 15		 je	 SHORT $LN20@ST_Drawer
  00153	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0015a	83 f8 01	 cmp	 eax, 1
  0015d	75 27		 jne	 SHORT $LN19@ST_Drawer
  0015f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00166	74 1e		 je	 SHORT $LN19@ST_Drawer
$LN20@ST_Drawer:
  00168	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  00172	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _seenplayer
  00178	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR _players[ecx+352]
  0017e	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR [edx+352]
  00184	74 09		 je	 SHORT $LN18@ST_Drawer
$LN19@ST_Drawer:
  00186	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  0018d	eb 07		 jmp	 SHORT $LN21@ST_Drawer
$LN18@ST_Drawer:
  0018f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], OFFSET ??_C@_01KOIICGII@?$ID@
$LN21@ST_Drawer:
  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR _seenplayer
  0019b	2d 00 00 00 00	 sub	 eax, OFFSET _players
  001a0	99		 cdq
  001a1	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001a6	f7 f9		 idiv	 ecx
  001a8	6b d0 16	 imul	 edx, eax, 22
  001ab	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  001b1	52		 push	 edx
  001b2	8b 45 bc	 mov	 eax, DWORD PTR tv153[ebp]
  001b5	50		 push	 eax
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs@
  001bb	e8 00 00 00 00	 call	 _va
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c3	50		 push	 eax
  001c4	68 00 00 40 00	 push	 4194304			; 00400000H
  001c9	6a 73		 push	 115			; 00000073H
  001cb	68 a0 00 00 00	 push	 160			; 000000a0H
  001d0	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001d5	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@ST_Drawer:

; 257  : 			va("%s%s", (gametype == GT_COOP || gametype == GT_RACE) || ((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))
; 258  : 			           && players[consoleplayer].ctfteam == seenplayer->ctfteam) ? "\x83" : "\x85", player_names[seenplayer-players]));
; 259  : 	}
; 260  : #endif
; 261  : 
; 262  : 	// force a set of the palette by using doPaletteStuff()
; 263  : 	refresh = 0; //?

  001d8	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _refresh$[ebp], 0

; 264  : 	if (vid.recalc)

  001df	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR _vid+24, 0
  001e6	74 0a		 je	 SHORT $LN7@ST_Drawer

; 265  : 		st_palette = -1;

  001e8	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _st_palette, -1
$LN7@ST_Drawer:

; 266  : 
; 267  : 	// Do red-/gold-shifts from damage/items
; 268  : #ifdef HWRENDER
; 269  : 	//25/08/99: Hurdler: palette changes is done for all players,
; 270  : 	//                   not only player1! That's why this part
; 271  : 	//                   of code is moved somewhere else.
; 272  : 	if (rendermode == render_soft)

  001f2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  001f9	75 0f		 jne	 SHORT $LN9@ST_Drawer

; 273  : #endif
; 274  : 		if (rendermode != render_none) ST_doPaletteStuff();

  001fb	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00202	74 06		 je	 SHORT $LN9@ST_Drawer
  00204	e8 00 00 00 00	 call	 _ST_doPaletteStuff
  00209	90		 npad	 1
$LN9@ST_Drawer:

; 275  : 
; 276  : 	if (st_overlay)

  0020a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _st_overlay, 0
  00211	74 3d		 je	 SHORT $LN11@ST_Drawer

; 277  : 	{
; 278  : 		// No deadview!
; 279  : 		stplyr = &players[displayplayer];

  00213	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0021d	05 00 00 00 00	 add	 eax, OFFSET _players
  00222	a3 00 00 00 00	 mov	 DWORD PTR _stplyr, eax

; 280  : 		ST_overlayDrawer();

  00227	e8 00 00 00 00	 call	 _ST_overlayDrawer
  0022c	90		 npad	 1

; 281  : 
; 282  : 		if (splitscreen)

  0022d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00234	74 1a		 je	 SHORT $LN11@ST_Drawer

; 283  : 		{
; 284  : 			stplyr = &players[secondarydisplayplayer];

  00236	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00240	05 00 00 00 00	 add	 eax, OFFSET _players
  00245	a3 00 00 00 00	 mov	 DWORD PTR _stplyr, eax

; 285  : 			ST_overlayDrawer();

  0024a	e8 00 00 00 00	 call	 _ST_overlayDrawer
  0024f	90		 npad	 1
$LN11@ST_Drawer:

; 286  : 		}
; 287  : 	}
; 288  : }

  00250	5f		 pop	 edi
  00251	5e		 pop	 esi
  00252	5b		 pop	 ebx
  00253	8b e5		 mov	 esp, ebp
  00255	5d		 pop	 ebp
  00256	c3		 ret	 0
_ST_Drawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\st_stuff.c
;	COMDAT _ST_Ticker
_TEXT	SEGMENT
_ST_Ticker PROC						; COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 198  : 	if (st_stopped)
; 199  : 		return;
; 200  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_ST_Ticker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_FixedInt PROC						; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 222  : 	return FixedMul(a, 1);

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _FixedMul
  00014	83 c4 08	 add	 esp, 8

; 223  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_FixedInt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1779 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1780 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1458 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1460 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1391 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1397 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
