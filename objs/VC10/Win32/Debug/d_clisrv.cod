; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\d_clisrv.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_serverlistcount
PUBLIC	_cv_playdemospeed
PUBLIC	_server
PUBLIC	_acceptnewnode
PUBLIC	_servernode
PUBLIC	_pingmeasurecount
PUBLIC	_cv_joinnextround
PUBLIC	_cv_allownewplayer
PUBLIC	_cv_maxplayers
PUBLIC	_cv_consfailprotect
PUBLIC	_cv_blamecfail
PUBLIC	_cv_maxsend
PUBLIC	_serverplayer
PUBLIC	_nodownload
PUBLIC	??_C@_0BA@OABLCFAA@showjoinaddress@		; `string'
PUBLIC	??_C@_02IAAGKKDJ@On@				; `string'
PUBLIC	??_C@_0O@KJADMMLH@playdemospeed@		; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_09HICFAAMJ@allowjoin@			; `string'
PUBLIC	??_C@_0O@BCINONAC@joinnextround@		; `string'
PUBLIC	??_C@_03GCDBBDDL@Off@				; `string'
PUBLIC	??_C@_03KGHEHEMH@MIN@				; `string'
PUBLIC	??_C@_03LEPPJAKI@MAX@				; `string'
PUBLIC	??_C@_0L@PCNFODNF@maxplayers@			; `string'
PUBLIC	??_C@_01KJLJFBPL@8@				; `string'
PUBLIC	??_C@_0BA@LLPOHJPA@consfailprotect@		; `string'
PUBLIC	??_C@_02PKFBJPLJ@10@				; `string'
PUBLIC	??_C@_0L@BLKFHNKA@blamecfail@			; `string'
PUBLIC	??_C@_07OKNBIIKG@maxsend@			; `string'
PUBLIC	??_C@_04MJHCKDHM@1024@				; `string'
EXTRN	_CV_OnOff:BYTE
EXTRN	_CV_Unsigned:BYTE
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_nodetoplayer:BYTE:020H
COMM	_nodetoplayer2:BYTE:020H
COMM	_playerpernode:BYTE:020H
COMM	_nodeingame:DWORD:020H
COMM	_serverlist:BYTE:010040H
_DATA	ENDS
_BSS	SEGMENT
_serverlistcount DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_software_MAXPACKETLENGTH:WORD
_DATA	ENDS
_BSS	SEGMENT
_servernode DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_realpingtable:DWORD:020H
COMM	_playerpingtable:DWORD:020H
COMM	_adminpassword:BYTE:09H
COMM	_motd:BYTE:0feH
COMM	_playernode:BYTE:020H
COMM	_consfailcount:BYTE:020H
COMM	_netcmds:QWORD:0400H
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	4

_serverplayer DD 01H DUP (?)
_nodownload DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_consfailstatus:BYTE:020H
_DATA	ENDS
;	COMDAT ??_C@_04MJHCKDHM@1024@
CONST	SEGMENT
??_C@_04MJHCKDHM@1024@ DB '1024', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OKNBIIKG@maxsend@
CONST	SEGMENT
??_C@_07OKNBIIKG@maxsend@ DB 'maxsend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BLKFHNKA@blamecfail@
CONST	SEGMENT
??_C@_0L@BLKFHNKA@blamecfail@ DB 'blamecfail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PKFBJPLJ@10@
CONST	SEGMENT
??_C@_02PKFBJPLJ@10@ DB '10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LLPOHJPA@consfailprotect@
CONST	SEGMENT
??_C@_0BA@LLPOHJPA@consfailprotect@ DB 'consfailprotect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8@
CONST	SEGMENT
??_C@_01KJLJFBPL@8@ DB '8', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PCNFODNF@maxplayers@
CONST	SEGMENT
??_C@_0L@PCNFODNF@maxplayers@ DB 'maxplayers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LEPPJAKI@MAX@
CONST	SEGMENT
??_C@_03LEPPJAKI@MAX@ DB 'MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KGHEHEMH@MIN@
CONST	SEGMENT
??_C@_03KGHEHEMH@MIN@ DB 'MIN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDBBDDL@Off@
CONST	SEGMENT
??_C@_03GCDBBDDL@Off@ DB 'Off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCINONAC@joinnextround@
CONST	SEGMENT
??_C@_0O@BCINONAC@joinnextround@ DB 'joinnextround', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HICFAAMJ@allowjoin@
CONST	SEGMENT
??_C@_09HICFAAMJ@allowjoin@ DB 'allowjoin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KJADMMLH@playdemospeed@
CONST	SEGMENT
??_C@_0O@KJADMMLH@playdemospeed@ DB 'playdemospeed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OABLCFAA@showjoinaddress@
CONST	SEGMENT
??_C@_0BA@OABLCFAA@showjoinaddress@ DB 'showjoinaddress', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_cv_playdemospeed DD FLAT:??_C@_0O@KJADMMLH@playdemospeed@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	00H
	DD	FLAT:_CV_Unsigned
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_server	DD	01H
_acceptnewnode DD 01H
_pingmeasurecount DW 01H
	ORG $+2
_cv_joinnextround DD FLAT:??_C@_0O@BCINONAC@joinnextround@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_allownewplayer DD FLAT:??_C@_09HICFAAMJ@allowjoin@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_maxplayers DD FLAT:??_C@_0L@PCNFODNF@maxplayers@
	DD	FLAT:??_C@_01KJLJFBPL@8@
	DD	01H
	DD	FLAT:_maxplayers_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_consfailprotect DD FLAT:??_C@_0BA@LLPOHJPA@consfailprotect@
	DD	FLAT:??_C@_02PKFBJPLJ@10@
	DD	00H
	DD	FLAT:_consfailprotect_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_blamecfail DD FLAT:??_C@_0L@BLKFHNKA@blamecfail@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	00H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_maxsend DD	FLAT:??_C@_07OKNBIIKG@maxsend@
	DD	FLAT:??_C@_04MJHCKDHM@1024@
	DD	01H
	DD	FLAT:_maxsend_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_maxplayers_cons_t DD 02H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	020H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_consfailprotect_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	014H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_maxsend_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	0c800H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsnprintf
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	___snprintf
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	_D_SaveBan
PUBLIC	_ExpandTics
PUBLIC	_D_ClientServerInit
PUBLIC	_RegisterNetXCmd
PUBLIC	_SendNetXCmd
PUBLIC	_SendNetXCmd2
PUBLIC	_NetUpdate
PUBLIC	_SV_StartSinglePlayerServer
PUBLIC	_SV_SpawnServer
PUBLIC	_SV_SpawnPlayer
PUBLIC	_SV_StopServer
PUBLIC	_SV_ResetServer
PUBLIC	_CL_AddSplitscreenPlayer
PUBLIC	_CL_RemoveSplitscreenPlayer
PUBLIC	_CL_Reset
PUBLIC	_CL_ClearPlayer
PUBLIC	_CL_UpdateServerList
PUBLIC	_Playing
PUBLIC	_D_QuitNetGame
PUBLIC	_TryRunTics
PUBLIC	_AddLmpExtradata
PUBLIC	_ReadLmpExtraData
PUBLIC	_nametonum
PUBLIC	_D_NumPlayers
PUBLIC	_D_ResetTiccmds
PUBLIC	_GetLag
PUBLIC	_GetFreeXCmdSize
PUBLIC	??_C@_0CL@OPDNFHO@No?5more?5place?5in?5the?5buffer?5for@ ; `string'
PUBLIC	??_C@_0BL@GOABAMBE@executing?5x_cmd?5?$CFu?5ply?5?$CFu?5@ ; `string'
PUBLIC	??_C@_05KJDAJCPN@done?6@			; `string'
PUBLIC	??_C@_0DC@KNFFNOEP@player?5?$CFd?5kicked?5?$FLgametic?$DN?$CFu?$FN?5r@ ; `string'
PUBLIC	??_C@_0BF@HOGGLAIO@clear?5tic?5?$CF5u?5?$CI?$CF2u?$CJ?6@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_07NFANNNEC@UNKNOWN@			; `string'
PUBLIC	??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd@	; `string'
PUBLIC	??_C@_0EF@MJFOMBPH@ServerConfig?5Packet?5about?5to?5be@ ; `string'
PUBLIC	??_C@_0BO@OGAPGFLP@ServerConfig?5Packet?5was?5sent?6@ ; `string'
PUBLIC	??_C@_0DB@IAHNBDHG@ServerConfig?5Packet?5could?5not?5b@ ; `string'
PUBLIC	??_C@_0BI@MJMFNFOM@Savegame?5buffer?5overrun@	; `string'
PUBLIC	??_C@_0L@HFDDGAM@?$CFs?2$$$?4sav@		; `string'
PUBLIC	??_C@_0BJ@IBFAGDLO@Can?8t?5read?5savegame?5sent@ ; `string'
PUBLIC	??_C@_04EIOKKJMF@?3?5?$CFs@			; `string'
PUBLIC	??_C@_03EEBNCBOD@?5?$CFs@			; `string'
PUBLIC	??_C@_04EJIOOHLH@?5?$CF2d@			; `string'
PUBLIC	??_C@_02MBJIFMOJ@?$CC?6@			; `string'
PUBLIC	??_C@_08FOJKHHJA@?$CFd?4?$CFd?4?$CFd@		; `string'
PUBLIC	??_C@_05CCMOGDN@?$CFs?3?$CFs@			; `string'
PUBLIC	??_C@_0BA@MFJMKEM@Can?8t?5delete?5?$CFs@	; `string'
PUBLIC	??_C@_0BC@JPIHLKPA@waiting?5?$CFd?5nodes?6@	; `string'
PUBLIC	??_C@_0CG@MGDCBDHG@Maximum?5players?5reached?3?5?$CFd?6Pre@ ; `string'
PUBLIC	??_C@_0BK@BMFHFKFB@Synchronisation?5Finished?6@	; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_07JMDBINJP@ban?4txt@			; `string'
PUBLIC	??_C@_05BMGBEOOC@?$CFs?2?$CFs@			; `string'
PUBLIC	??_C@_04KOHNNHPH@?$CFs?50@			; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs@			; `string'
PUBLIC	??_C@_04MDKIEGGJ@?5?$CFs?6@			; `string'
PUBLIC	??_C@_02JDNIPIGD@NA@				; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_04HHCDBDLF@?5?7?$AN?6@			; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6@			; `string'
PUBLIC	??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@ ; `string'
PUBLIC	??_C@_04PJDNGLKJ@self@				; `string'
PUBLIC	??_C@_04CLMONKIF@node@				; `string'
PUBLIC	??_C@_03OBJFJEBA@any@				; `string'
PUBLIC	??_C@_0BM@BNOGFMDG@There?5is?5no?5network?5driver?6@ ; `string'
PUBLIC	??_C@_09DOIJPOHM@Player?5?$CFd@			; `string'
PUBLIC	??_C@_0CO@KOGEKBC@?6?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?5Client?5reset?5?$DN?9@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_05FAEIHPAI@quit?6@			; `string'
PUBLIC	??_C@_0BKO@LEGILPEE@So?0?5you?5must?5be?5asking?0?5why?5is?5@ ; `string'
PUBLIC	??_C@_0M@JBOLFGPI@?9consisdump@			; `string'
PUBLIC	??_C@_0CH@GPCMCKNF@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_0DG@ONBBOPKI@You?5have?5been?5kicked?6?$CIconsisten@ ; `string'
PUBLIC	??_C@_0DD@PJACJOMG@You?5have?5been?5kicked?6?$CIBroke?5pin@ ; `string'
PUBLIC	??_C@_0CP@PCMBLLLJ@You?5have?5been?5banned?5by?5the?5ser@ ; `string'
PUBLIC	??_C@_0CF@JNBACEKM@You?5have?5been?5kicked?6?$CI?$CFs?$CJ?6Press@ ; `string'
PUBLIC	??_C@_0CF@DMMCPFBC@You?5have?5been?5banned?6?$CI?$CFs?$CJ?6Press@ ; `string'
PUBLIC	??_C@_0CP@MEGGPMPC@You?5have?5been?5kicked?5by?5the?5ser@ ; `string'
PUBLIC	??_C@_0DD@JNIIEPIH@?9?5?9?5?9?$DN?$DN?5SRB2?5v?$CFd?4?$CF?42d?4?$CFd?5v2?40?47@ ; `string'
PUBLIC	??_C@_0N@NGBFIPMA@getplayernum@			; `string'
PUBLIC	??_C@_04FNIJDBCC@kick@				; `string'
PUBLIC	??_C@_03PNPPPIFF@ban@				; `string'
PUBLIC	??_C@_09EJOBGHFK@clearbans@			; `string'
PUBLIC	??_C@_0M@DDOCKIL@showbanlist@			; `string'
PUBLIC	??_C@_0L@COPDNIPL@reloadbans@			; `string'
PUBLIC	??_C@_07KAIBNCHO@connect@			; `string'
PUBLIC	??_C@_05JJOLJDEA@nodes@				; `string'
PUBLIC	??_C@_0CO@IAFPHCGF@?6?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?5Server?5Reset?5?$DN?9@ ; `string'
PUBLIC	??_C@_0MN@NNHBNPNE@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0LN@DJADCFND@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0N@HPDDPHLN@spawning?5me?6@		; `string'
PUBLIC	??_C@_0BF@JAFICDDE@spawning?5my?5brother?6@	; `string'
PUBLIC	??_C@_0N@LALGPJBL@sayto?5?$CFd?5?$CFs?6@	; `string'
PUBLIC	??_C@_0CA@MCDEGGBF@Server?5added?5player?5?$CFd?5node?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CF@DJONALDG@You?5have?5been?5banned?6from?5the?5s@ ; `string'
PUBLIC	??_C@_0EJ@EDOIONCL@Different?5SRB2?5versions?5cannot?6@ ; `string'
PUBLIC	??_C@_0DB@CGIGLGLD@The?5server?5is?5not?5accepting?6joi@ ; `string'
PUBLIC	??_C@_0BM@IEPKFGB@Maximum?5players?5reached?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0CB@IBJGJNAD@Too?5many?5players?5from?6this?5node@ ; `string'
PUBLIC	??_C@_0BL@NJDJOCPD@No?5players?5from?6this?5node?4@ ; `string'
PUBLIC	??_C@_0CM@KLOIHHDC@Server?5couldn?8t?5send?5info?0?5plea@ ; `string'
PUBLIC	??_C@_0BB@GAPEEKBJ@new?5node?5joined?6@		; `string'
PUBLIC	??_C@_0P@EHGFFMGO@send?5savegame?6@		; `string'
PUBLIC	??_C@_0BP@BJBFACMF@Server?5has?5shutdown?6?6Press?5Esc@ ; `string'
PUBLIC	??_C@_0BK@IJIPOIIA@Server?5Timeout?6?6Press?5Esc@ ; `string'
PUBLIC	??_C@_0CG@EDIEMKAC@Received?5packet?5from?5unknown?5ho@ ; `string'
PUBLIC	??_C@_0CG@FLONMODJ@Server?5refuses?5connection?6?6Reas@ ; `string'
PUBLIC	??_C@_0CJ@JMDILMFL@Server?5accept?5join?5gametic?$DN?$CFu?5m@ ; `string'
PUBLIC	??_C@_0DA@CDLAPDDH@unknown?5packet?5received?5?$CI?$CFd?$CJ?5fr@ ; `string'
PUBLIC	??_C@_0CM@PNCOEEGF@out?5of?5order?5ticcmd?5discarded?5n@ ; `string'
PUBLIC	??_C@_0CO@KCGIJCAK@Illegal?5movement?5value?5recieved@ ; `string'
PUBLIC	??_C@_0DM@EBJINPA@Restoring?5player?5?$CFd?5?$CIconsistenc@ ; `string'
PUBLIC	??_C@_0DE@EKHOPNBO@player?5?$CFd?5kicked?5?$CIconsistency?5f@ ; `string'
PUBLIC	??_C@_0FI@GOGMBMGL@GetPacket?3?5Textcmd?5too?5long?5?$CIma@ ; `string'
PUBLIC	??_C@_0EA@KLJEDHAI@textcmd?5put?5in?5tic?5?$CFu?5at?5positi@ ; `string'
PUBLIC	??_C@_0CJ@IKAPOEKI@PT_SERVERTICS?5recieved?5from?5non@ ; `string'
PUBLIC	??_C@_0BI@BGJEHOIL@frame?5not?5in?5bound?3?5?$CFu?6@ ; `string'
PUBLIC	??_C@_0CK@PKBIAOEL@PT_CONSISTENCY?5recieved?5from?5no@ ; `string'
PUBLIC	??_C@_0CD@FEMPHDPG@PT_PING?5recieved?5from?5non?9host?5@ ; `string'
PUBLIC	??_C@_0CO@IGIFMBDC@UNKNOWN?5PACKET?5TYPE?5RECEIVED?5?$CFd@ ; `string'
PUBLIC	??_C@_07ICHNGLND@TIC?5?$CFu?5@			; `string'
PUBLIC	??_C@_0O@MLDBOEMG@p?$FL?$CFd?$FN?4x?5?$DN?5?$CFf?5@ ; `string'
PUBLIC	??_C@_0BC@MHFILJIG@pos?5?$DN?5?$CFd?0?5rnd?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CP@GNLJPENF@Nothing?5to?5send?5node?5?$CFu?5mak?$DN?$CFu?5@ ; `string'
PUBLIC	??_C@_0BA@IJCCPNFD@Sent?5?$CFd?5anyway?6@	; `string'
PUBLIC	??_C@_0DM@IMKIBDOK@packet?5too?5large?5?$CI?$CFIu?$CJ?5at?5tic?5?$CF@ ; `string'
PUBLIC	??_C@_0GC@JJJPPPFI@Too?5many?5players?3?5can?8t?5send?5?$CFI@ ; `string'
PUBLIC	??_C@_0BD@OONMIKHP@sending?5it?5anyway?6@	; `string'
PUBLIC	??_C@_0BJ@JCFKBBBI@MISS?5tic?$CF4d?5for?5node?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0DK@JNLGOLID@?9?9?9?9?9?9?9?9?9?9?9?9?5Tryruntic?3?5REAL?3?$CFd@ ; `string'
PUBLIC	??_C@_0CI@CDIBIEFM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5Running?5tic?5?$CFd?5?$CIlo@ ; `string'
PUBLIC	__real@47800000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_strncpy:PROC
EXTRN	_strtok:PROC
EXTRN	_stricmp:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_atoi:PROC
EXTRN	_strlcat:PROC
EXTRN	_strlcpy:PROC
EXTRN	_fclose:PROC
EXTRN	_fflush:PROC
EXTRN	_fgets:PROC
EXTRN	_fopen:PROC
EXTRN	_fputs:PROC
EXTRN	_unlink:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsscanf:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_I_GetKey:PROC
EXTRN	_COM_AddCommand:PROC
EXTRN	_COM_Argc:PROC
EXTRN	_COM_Argv:PROC
EXTRN	_COM_BufAddText:PROC
EXTRN	_COM_BufExecute:PROC
EXTRN	_CV_RegisterVar:PROC
EXTRN	_CV_SaveNetVars:PROC
EXTRN	_CV_LoadNetVars:PROC
EXTRN	_I_GetTime:PROC
EXTRN	_I_Sleep:PROC
EXTRN	_I_OsPolling:PROC
EXTRN	_I_OutputMsg:PROC
EXTRN	_I_FinishUpdate:PROC
EXTRN	_Net_AckTicker:PROC
EXTRN	_HSendPacket:PROC
EXTRN	_HGetPacket:PROC
EXTRN	_D_CloseConnection:PROC
EXTRN	_Net_UnAcknowledgPacket:PROC
EXTRN	_Net_CloseConnection:PROC
EXTRN	_D_ProcessEvents:PROC
EXTRN	_D_StartTitle:PROC
EXTRN	_P_SpawnPlayer:PROC
EXTRN	_D_SendPlayerConfig:PROC
EXTRN	_D_MapChange:PROC
EXTRN	_G_BuildMapName:PROC
EXTRN	_G_BuildTiccmd:PROC
EXTRN	_G_BuildTiccmd2:PROC
EXTRN	_G_MoveTiccmd:PROC
EXTRN	_G_StopDemo:PROC
EXTRN	_G_CheckDemoStatus:PROC
EXTRN	_G_IsSpecialStage:PROC
EXTRN	_G_Ticker:PROC
EXTRN	_G_AddPlayer:PROC
EXTRN	_G_SetGamestate:PROC
EXTRN	_G_TicsToMilliseconds:PROC
EXTRN	_HU_DoCEcho:PROC
EXTRN	_M_Ticker:PROC
EXTRN	_M_StartMessage:PROC
EXTRN	_CON_Ticker:PROC
EXTRN	_CON_Drawer:PROC
EXTRN	_CON_ToggleOff:PROC
EXTRN	_PutFileNeeded:PROC
EXTRN	_D_ParseFileneeded:PROC
EXTRN	_CL_PrepareDownloadSaveGame:PROC
EXTRN	_CL_CheckFiles:PROC
EXTRN	_CL_LoadServerFiles:PROC
EXTRN	_SendRam:PROC
EXTRN	_FiletxTicker:PROC
EXTRN	_Got_Filetxpak:PROC
EXTRN	_SendRequestFile:PROC
EXTRN	_Got_RequestFilePak:PROC
EXTRN	_CloseNetFile:PROC
EXTRN	_P_SaveNetGame:PROC
EXTRN	_P_LoadNetGame:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_StrDup:PROC
EXTRN	_P_GivePlayerRings:PROC
EXTRN	_P_SpawnMobj:PROC
EXTRN	_P_RemoveMobj:PROC
EXTRN	_P_SetPlayerMobjState:PROC
EXTRN	_P_SetMobjState:PROC
EXTRN	_P_UnsetThingPosition:PROC
EXTRN	_P_SetThingPosition:PROC
EXTRN	_P_DelSeclist:PROC
EXTRN	_P_PlayerFlagBurst:PROC
EXTRN	_P_CheckSurvivors:PROC
EXTRN	_P_CheckRacers:PROC
EXTRN	_FIL_ReadFile:PROC
EXTRN	_FIL_WriteFileOK:PROC
EXTRN	_P_GetRandIndex:PROC
EXTRN	_P_SetRandIndex:PROC
EXTRN	_MSCloseUDPSocket:PROC
EXTRN	_SendAskInfoViaMS:PROC
EXTRN	_RegisterServer:PROC
EXTRN	_UnregisterServer:PROC
EXTRN	_MasterClient_Ticker:PROC
EXTRN	_GetShortServersList:PROC
EXTRN	_Y_EndIntermission:PROC
EXTRN	_SplitScreen_OnChange:PROC
EXTRN	_M_CheckParm:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_gamestate:DWORD
EXTRN	_ultimatemode:BYTE
EXTRN	_gameaction:DWORD
EXTRN	_M_Memcpy:DWORD
EXTRN	_text:BYTE
EXTRN	_doomcom:DWORD
EXTRN	_I_NetMakeNode:DWORD
EXTRN	_I_NetOpenSocket:DWORD
EXTRN	_I_Ban:DWORD
EXTRN	_I_ClearBans:DWORD
EXTRN	_I_GetNodeAddress:DWORD
EXTRN	_I_GetBanAddress:DWORD
EXTRN	_I_GetBanMask:DWORD
EXTRN	_I_SetBanAddress:DWORD
EXTRN	_bannednode:DWORD
EXTRN	_advancedemo:DWORD
EXTRN	_rendergametic:DWORD
EXTRN	_srb2home:BYTE
EXTRN	_states:BYTE
EXTRN	_gamemap:WORD
EXTRN	_modifiedgame:DWORD
EXTRN	_netgame:DWORD
EXTRN	_addedtogame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_fromlevelselect:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_paused:BYTE
EXTRN	_consoleplayer:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_redflag:DWORD
EXTRN	_blueflag:DWORD
EXTRN	_rflagpoint:DWORD
EXTRN	_bflagpoint:DWORD
EXTRN	_mapheaderinfo:BYTE
EXTRN	_gametic:DWORD
EXTRN	_playerstarts:BYTE
EXTRN	_debugfile:DWORD
EXTRN	_debugload:DWORD
EXTRN	_wipegamestate:DWORD
EXTRN	_singletics:DWORD
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_cheats:BYTE
EXTRN	_cv_maxping:BYTE
EXTRN	_mapchangepending:DWORD
EXTRN	_netbuffer:DWORD
EXTRN	_dedicated:DWORD
EXTRN	_adminplayer:DWORD
EXTRN	_player_names:BYTE
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_demoplayback:DWORD
EXTRN	_demorecording:DWORD
EXTRN	_playerdeadview:DWORD
EXTRN	_cv_serversort:BYTE
EXTRN	_gametype_cons_t:BYTE
EXTRN	_fileneedednum:DWORD
EXTRN	_fileneeded:BYTE
EXTRN	_save_p:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_sector_list:DWORD
EXTRN	_automapactive:DWORD
EXTRN	_cv_servername:BYTE
EXTRN	_cv_internetserver:BYTE
EXTRN	_mapmd5:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_serverrunning DD 01H DUP (?)
_nettics DD	020H DUP (?)
_supposedtics DD 020H DUP (?)
_nodewaiting DB	020H DUP (?)
_firstticstosend DD 01H DUP (?)
_consistancy DW	020H DUP (?)
_tictoclear DD	01H DUP (?)
_maketic DD	01H DUP (?)
_localcmds DQ	01H DUP (?)
_localcmds2 DQ	01H DUP (?)
_cl_packetmissed DD 01H DUP (?)
_mynode	DB	01H DUP (?)
	ALIGN	4

_localtextcmd DB 0100H DUP (?)
_localtextcmd2 DB 0100H DUP (?)
_neededtic DD	01H DUP (?)
_textcmds DB	040000H DUP (?)
_listnetxcmd DD	015H DUP (?)
_cl_mode DD	01H DUP (?)
_reasontail DD	01H DUP (?)
_reasonhead DD	01H DUP (?)
?gametime@?1??NetUpdate@@9@9 DD 01H DUP (?)		; `NetUpdate'::`2'::gametime
_BSS	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT ??_C@_0CI@CDIBIEFM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5Running?5tic?5?$CFd?5?$CIlo@
CONST	SEGMENT
??_C@_0CI@CDIBIEFM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5Running?5tic?5?$CFd?5?$CIlo@ DB '='
	DB	'=========== Running tic %d (local %d)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@JNLGOLID@?9?9?9?9?9?9?9?9?9?9?9?9?5Tryruntic?3?5REAL?3?$CFd@
CONST	SEGMENT
??_C@_0DK@JNLGOLID@?9?9?9?9?9?9?9?9?9?9?9?9?5Tryruntic?3?5REAL?3?$CFd@ DB '-'
	DB	'----------- Tryruntic: REAL:%d NEED:%d GAME:%d LOAD: %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JCFKBBBI@MISS?5tic?$CF4d?5for?5node?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@JCFKBBBI@MISS?5tic?$CF4d?5for?5node?5?$CFd?6@ DB 'MISS tic%4d f'
	DB	'or node %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OONMIKHP@sending?5it?5anyway?6@
CONST	SEGMENT
??_C@_0BD@OONMIKHP@sending?5it?5anyway?6@ DB 'sending it anyway', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@JJJPPPFI@Too?5many?5players?3?5can?8t?5send?5?$CFI@
CONST	SEGMENT
??_C@_0GC@JJJPPPFI@Too?5many?5players?3?5can?8t?5send?5?$CFI@ DB 'Too man'
	DB	'y players: can''t send %Iu data for %d players to node %d', 0aH
	DB	'Well sorry nobody is perfect....', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IMKIBDOK@packet?5too?5large?5?$CI?$CFIu?$CJ?5at?5tic?5?$CF@
CONST	SEGMENT
??_C@_0DM@IMKIBDOK@packet?5too?5large?5?$CI?$CFIu?$CJ?5at?5tic?5?$CF@ DB 'p'
	DB	'acket too large (%Iu) at tic %d (should be from %d to %d)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJCCPNFD@Sent?5?$CFd?5anyway?6@
CONST	SEGMENT
??_C@_0BA@IJCCPNFD@Sent?5?$CFd?5anyway?6@ DB 'Sent %d anyway', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GNLJPENF@Nothing?5to?5send?5node?5?$CFu?5mak?$DN?$CFu?5@
CONST	SEGMENT
??_C@_0CP@GNLJPENF@Nothing?5to?5send?5node?5?$CFu?5mak?$DN?$CFu?5@ DB 'No'
	DB	'thing to send node %u mak=%u sup=%u net=%u ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MHFILJIG@pos?5?$DN?5?$CFd?0?5rnd?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@MHFILJIG@pos?5?$DN?5?$CFd?0?5rnd?5?$CFd?6@ DB 'pos = %d, rnd %d'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MLDBOEMG@p?$FL?$CFd?$FN?4x?5?$DN?5?$CFf?5@
CONST	SEGMENT
??_C@_0O@MLDBOEMG@p?$FL?$CFd?$FN?4x?5?$DN?5?$CFf?5@ DB 'p[%d].x = %f ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICHNGLND@TIC?5?$CFu?5@
CONST	SEGMENT
??_C@_07ICHNGLND@TIC?5?$CFu?5@ DB 'TIC %u ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IGIFMBDC@UNKNOWN?5PACKET?5TYPE?5RECEIVED?5?$CFd@
CONST	SEGMENT
??_C@_0CO@IGIFMBDC@UNKNOWN?5PACKET?5TYPE?5RECEIVED?5?$CFd@ DB 'UNKNOWN PA'
	DB	'CKET TYPE RECEIVED %d from host %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FEMPHDPG@PT_PING?5recieved?5from?5non?9host?5@
CONST	SEGMENT
??_C@_0CD@FEMPHDPG@PT_PING?5recieved?5from?5non?9host?5@ DB 'PT_PING reci'
	DB	'eved from non-host %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PKBIAOEL@PT_CONSISTENCY?5recieved?5from?5no@
CONST	SEGMENT
??_C@_0CK@PKBIAOEL@PT_CONSISTENCY?5recieved?5from?5no@ DB 'PT_CONSISTENCY'
	DB	' recieved from non-host %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BGJEHOIL@frame?5not?5in?5bound?3?5?$CFu?6@
CONST	SEGMENT
??_C@_0BI@BGJEHOIL@frame?5not?5in?5bound?3?5?$CFu?6@ DB 'frame not in bou'
	DB	'nd: %u', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IKAPOEKI@PT_SERVERTICS?5recieved?5from?5non@
CONST	SEGMENT
??_C@_0CJ@IKAPOEKI@PT_SERVERTICS?5recieved?5from?5non@ DB 'PT_SERVERTICS '
	DB	'recieved from non-host %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@KLJEDHAI@textcmd?5put?5in?5tic?5?$CFu?5at?5positi@
CONST	SEGMENT
??_C@_0EA@KLJEDHAI@textcmd?5put?5in?5tic?5?$CFu?5at?5positi@ DB 'textcmd '
	DB	'put in tic %u at position %d (player %d) ftts %u mk %u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@GOGMBMGL@GetPacket?3?5Textcmd?5too?5long?5?$CIma@
CONST	SEGMENT
??_C@_0FI@GOGMBMGL@GetPacket?3?5Textcmd?5too?5long?5?$CIma@ DB 'GetPacket'
	DB	': Textcmd too long (max %Iu, used %Iu, mak %d, tosend %u, nod'
	DB	'e %u, player %d)', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@EKHOPNBO@player?5?$CFd?5kicked?5?$CIconsistency?5f@
CONST	SEGMENT
??_C@_0DE@EKHOPNBO@player?5?$CFd?5kicked?5?$CIconsistency?5f@ DB 'player '
	DB	'%d kicked (consistency failure) [%u] %d!=%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@EBJINPA@Restoring?5player?5?$CFd?5?$CIconsistenc@
CONST	SEGMENT
??_C@_0DM@EBJINPA@Restoring?5player?5?$CFd?5?$CIconsistenc@ DB 'Restoring'
	DB	' player %d (consistency failure) [%update] %d!=%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KCGIJCAK@Illegal?5movement?5value?5recieved@
CONST	SEGMENT
??_C@_0CO@KCGIJCAK@Illegal?5movement?5value?5recieved@ DB 'Illegal moveme'
	DB	'nt value recieved from node %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PNCOEEGF@out?5of?5order?5ticcmd?5discarded?5n@
CONST	SEGMENT
??_C@_0CM@PNCOEEGF@out?5of?5order?5ticcmd?5discarded?5n@ DB 'out of order'
	DB	' ticcmd discarded nettics = %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CDLAPDDH@unknown?5packet?5received?5?$CI?$CFd?$CJ?5fr@
CONST	SEGMENT
??_C@_0DA@CDLAPDDH@unknown?5packet?5received?5?$CI?$CFd?$CJ?5fr@ DB 'unkn'
	DB	'own packet received (%d) from unknown host', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JMDILMFL@Server?5accept?5join?5gametic?$DN?$CFu?5m@
CONST	SEGMENT
??_C@_0CJ@JMDILMFL@Server?5accept?5join?5gametic?$DN?$CFu?5m@ DB 'Server '
	DB	'accept join gametic=%u mynode=%d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FLONMODJ@Server?5refuses?5connection?6?6Reas@
CONST	SEGMENT
??_C@_0CG@FLONMODJ@Server?5refuses?5connection?6?6Reas@ DB 'Server refuse'
	DB	's connection', 0aH, 0aH, 'Reason:', 0aH, '%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EDIEMKAC@Received?5packet?5from?5unknown?5ho@
CONST	SEGMENT
??_C@_0CG@EDIEMKAC@Received?5packet?5from?5unknown?5ho@ DB 'Received pack'
	DB	'et from unknown host %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IJIPOIIA@Server?5Timeout?6?6Press?5Esc@
CONST	SEGMENT
??_C@_0BK@IJIPOIIA@Server?5Timeout?6?6Press?5Esc@ DB 'Server Timeout', 0aH
	DB	0aH, 'Press Esc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BJBFACMF@Server?5has?5shutdown?6?6Press?5Esc@
CONST	SEGMENT
??_C@_0BP@BJBFACMF@Server?5has?5shutdown?6?6Press?5Esc@ DB 'Server has sh'
	DB	'utdown', 0aH, 0aH, 'Press Esc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EHGFFMGO@send?5savegame?6@
CONST	SEGMENT
??_C@_0P@EHGFFMGO@send?5savegame?6@ DB 'send savegame', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GAPEEKBJ@new?5node?5joined?6@
CONST	SEGMENT
??_C@_0BB@GAPEEKBJ@new?5node?5joined?6@ DB 'new node joined', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KLOIHHDC@Server?5couldn?8t?5send?5info?0?5plea@
CONST	SEGMENT
??_C@_0CM@KLOIHHDC@Server?5couldn?8t?5send?5info?0?5plea@ DB 'Server coul'
	DB	'dn''t send info, please try again', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NJDJOCPD@No?5players?5from?6this?5node?4@
CONST	SEGMENT
??_C@_0BL@NJDJOCPD@No?5players?5from?6this?5node?4@ DB 'No players from', 0aH
	DB	'this node.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IBJGJNAD@Too?5many?5players?5from?6this?5node@
CONST	SEGMENT
??_C@_0CB@IBJGJNAD@Too?5many?5players?5from?6this?5node@ DB 'Too many pla'
	DB	'yers from', 0aH, 'this node.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IEPKFGB@Maximum?5players?5reached?3?5?$CFd@
CONST	SEGMENT
??_C@_0BM@IEPKFGB@Maximum?5players?5reached?3?5?$CFd@ DB 'Maximum players'
	DB	' reached: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CGIGLGLD@The?5server?5is?5not?5accepting?6joi@
CONST	SEGMENT
??_C@_0DB@CGIGLGLD@The?5server?5is?5not?5accepting?6joi@ DB 'The server i'
	DB	's not accepting', 0aH, 'joins for the moment', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@EDOIONCL@Different?5SRB2?5versions?5cannot?6@
CONST	SEGMENT
??_C@_0EJ@EDOIONCL@Different?5SRB2?5versions?5cannot?6@ DB 'Different SRB'
	DB	'2 versions cannot', 0aH, 'play a netgame!', 0aH, '(server ver'
	DB	'sion %d.%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DJONALDG@You?5have?5been?5banned?6from?5the?5s@
CONST	SEGMENT
??_C@_0CF@DJONALDG@You?5have?5been?5banned?6from?5the?5s@ DB 'You have be'
	DB	'en banned', 0aH, 'from the server', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MCDEGGBF@Server?5added?5player?5?$CFd?5node?5?$CFd?6@
CONST	SEGMENT
??_C@_0CA@MCDEGGBF@Server?5added?5player?5?$CFd?5node?5?$CFd?6@ DB 'Serve'
	DB	'r added player %d node %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LALGPJBL@sayto?5?$CFd?5?$CFs?6@
CONST	SEGMENT
??_C@_0N@LALGPJBL@sayto?5?$CFd?5?$CFs?6@ DB 'sayto %d %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JAFICDDE@spawning?5my?5brother?6@
CONST	SEGMENT
??_C@_0BF@JAFICDDE@spawning?5my?5brother?6@ DB 'spawning my brother', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HPDDPHLN@spawning?5me?6@
CONST	SEGMENT
??_C@_0N@HPDDPHLN@spawning?5me?6@ DB 'spawning me', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LN@DJADCFND@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0LN@DJADCFND@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ DB '='
	DB	'============================================================='
	DB	'=============', 0aH, '                         Log finish', 0aH
	DB	'============================================================='
	DB	'==============', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0MN@NNHBNPNE@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0MN@NNHBNPNE@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ DB '='
	DB	'============================================================='
	DB	'=============', 0aH, '                  Quitting Game, closin'
	DB	'g connection', 0aH, '========================================'
	DB	'===================================', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IAFPHCGF@?6?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?5Server?5Reset?5?$DN?9@
CONST	SEGMENT
??_C@_0CO@IAFPHCGF@?6?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?5Server?5Reset?5?$DN?9@ DB 0aH
	DB	'-=-=-=-=-=-=-= Server Reset =-=-=-=-=-=-=-', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JJOLJDEA@nodes@
CONST	SEGMENT
??_C@_05JJOLJDEA@nodes@ DB 'nodes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KAIBNCHO@connect@
CONST	SEGMENT
??_C@_07KAIBNCHO@connect@ DB 'connect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@COPDNIPL@reloadbans@
CONST	SEGMENT
??_C@_0L@COPDNIPL@reloadbans@ DB 'reloadbans', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DDOCKIL@showbanlist@
CONST	SEGMENT
??_C@_0M@DDOCKIL@showbanlist@ DB 'showbanlist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJOBGHFK@clearbans@
CONST	SEGMENT
??_C@_09EJOBGHFK@clearbans@ DB 'clearbans', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PNPPPIFF@ban@
CONST	SEGMENT
??_C@_03PNPPPIFF@ban@ DB 'ban', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNIJDBCC@kick@
CONST	SEGMENT
??_C@_04FNIJDBCC@kick@ DB 'kick', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NGBFIPMA@getplayernum@
CONST	SEGMENT
??_C@_0N@NGBFIPMA@getplayernum@ DB 'getplayernum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JNIIEPIH@?9?5?9?5?9?$DN?$DN?5SRB2?5v?$CFd?4?$CF?42d?4?$CFd?5v2?40?47@
CONST	SEGMENT
??_C@_0DD@JNIIEPIH@?9?5?9?5?9?$DN?$DN?5SRB2?5v?$CFd?4?$CF?42d?4?$CFd?5v2?40?47@ DB '-'
	DB	' - -== SRB2 v%d.%.2d.%d v2.0.7 debugfile ==- - -', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MEGGPMPC@You?5have?5been?5kicked?5by?5the?5ser@
CONST	SEGMENT
??_C@_0CP@MEGGPMPC@You?5have?5been?5kicked?5by?5the?5ser@ DB 'You have be'
	DB	'en kicked by the server', 0aH, 0aH, 'Press ESC', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DMMCPFBC@You?5have?5been?5banned?6?$CI?$CFs?$CJ?6Press@
CONST	SEGMENT
??_C@_0CF@DMMCPFBC@You?5have?5been?5banned?6?$CI?$CFs?$CJ?6Press@ DB 'You'
	DB	' have been banned', 0aH, '(%s)', 0aH, 'Press ESC', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JNBACEKM@You?5have?5been?5kicked?6?$CI?$CFs?$CJ?6Press@
CONST	SEGMENT
??_C@_0CF@JNBACEKM@You?5have?5been?5kicked?6?$CI?$CFs?$CJ?6Press@ DB 'You'
	DB	' have been kicked', 0aH, '(%s)', 0aH, 'Press ESC', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PCMBLLLJ@You?5have?5been?5banned?5by?5the?5ser@
CONST	SEGMENT
??_C@_0CP@PCMBLLLJ@You?5have?5been?5banned?5by?5the?5ser@ DB 'You have be'
	DB	'en banned by the server', 0aH, 0aH, 'Press ESC', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@PJACJOMG@You?5have?5been?5kicked?6?$CIBroke?5pin@
CONST	SEGMENT
??_C@_0DD@PJACJOMG@You?5have?5been?5kicked?6?$CIBroke?5pin@ DB 'You have '
	DB	'been kicked', 0aH, '(Broke ping limit)', 0aH, 'Press ESC', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@ONBBOPKI@You?5have?5been?5kicked?6?$CIconsisten@
CONST	SEGMENT
??_C@_0DG@ONBBOPKI@You?5have?5been?5kicked?6?$CIconsisten@ DB 'You have b'
	DB	'een kicked', 0aH, '(consistency failure)', 0aH, 'Press ESC', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GPCMCKNF@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0CH@GPCMCKNF@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'------------------------------------', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JBOLFGPI@?9consisdump@
CONST	SEGMENT
??_C@_0M@JBOLFGPI@?9consisdump@ DB '-consisdump', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BKO@LEGILPEE@So?0?5you?5must?5be?5asking?0?5why?5is?5@
CONST	SEGMENT
??_C@_0BKO@LEGILPEE@So?0?5you?5must?5be?5asking?0?5why?5is?5@ DB 'So, you'
	DB	' must be asking, why is this an illegal kick?', 0aH, 'Well, l'
	DB	'et''s take a look at the facts, shall we?', 0aH, 0aH, 'player'
	DB	'num (this is the guy who did it), he''s %d.', 0aH, 'pnum (the'
	DB	' guy he''s trying to kick) is %d.', 0aH, 'playernum''s node i'
	DB	's %d.', 0aH, 'That node has %d players.', 0aH, 'Player 2 on t'
	DB	'hat node is %d.', 0aH, 'pnum''s node is %d.', 0aH, 'That node'
	DB	' has %d players.', 0aH, 'Player 2 on that node is %d.', 0aH, 0aH
	DB	'If you think this is a bug, please report it, including all o'
	DB	'f the details above.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAEIHPAI@quit?6@
CONST	SEGMENT
??_C@_05FAEIHPAI@quit?6@ DB 'quit', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KOGEKBC@?6?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?5Client?5reset?5?$DN?9@
CONST	SEGMENT
??_C@_0CO@KOGEKBC@?6?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?5Client?5reset?5?$DN?9@ DB 0aH
	DB	'-=-=-=-=-=-=-= Client reset =-=-=-=-=-=-=-', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DOIJPOHM@Player?5?$CFd@
CONST	SEGMENT
??_C@_09DOIJPOHM@Player?5?$CFd@ DB 'Player %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BNOGFMDG@There?5is?5no?5network?5driver?6@
CONST	SEGMENT
??_C@_0BM@BNOGFMDG@There?5is?5no?5network?5driver?6@ DB 'There is no netw'
	DB	'ork driver', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OBJFJEBA@any@
CONST	SEGMENT
??_C@_03OBJFJEBA@any@ DB 'any', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLMONKIF@node@
CONST	SEGMENT
??_C@_04CLMONKIF@node@ DB 'node', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJDNGLKJ@self@
CONST	SEGMENT
??_C@_04PJDNGLKJ@self@ DB 'self', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@
CONST	SEGMENT
??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@ DB 'You have wa'
	DB	'd files loaded and/or', 0aH, 'modified the game in some way.', 0aH
	DB	'Please restart SRB2 before', 0aH, 'connecting.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HHCDBDLF@?5?7?$AN?6@
CONST	SEGMENT
??_C@_04HHCDBDLF@?5?7?$AN?6@ DB ' ', 09H, 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDNIPIGD@NA@
CONST	SEGMENT
??_C@_02JDNIPIGD@NA@ DB 'NA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDKIEGGJ@?5?$CFs?6@
CONST	SEGMENT
??_C@_04MDKIEGGJ@?5?$CFs?6@ DB ' %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs@ DB '%s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KOHNNHPH@?$CFs?50@
CONST	SEGMENT
??_C@_04KOHNNHPH@?$CFs?50@ DB '%s 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
CONST	SEGMENT
??_C@_05BMGBEOOC@?$CFs?2?$CFs@ DB '%s\%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JMDBINJP@ban?4txt@
CONST	SEGMENT
??_C@_07JMDBINJP@ban?4txt@ DB 'ban.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMFHFKFB@Synchronisation?5Finished?6@
CONST	SEGMENT
??_C@_0BK@BMFHFKFB@Synchronisation?5Finished?6@ DB 'Synchronisation Finis'
	DB	'hed', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MGDCBDHG@Maximum?5players?5reached?3?5?$CFd?6Pre@
CONST	SEGMENT
??_C@_0CG@MGDCBDHG@Maximum?5players?5reached?3?5?$CFd?6Pre@ DB 'Maximum p'
	DB	'layers reached: %d', 0aH, 'Press ESC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JPIHLKPA@waiting?5?$CFd?5nodes?6@
CONST	SEGMENT
??_C@_0BC@JPIHLKPA@waiting?5?$CFd?5nodes?6@ DB 'waiting %d nodes', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MFJMKEM@Can?8t?5delete?5?$CFs@
CONST	SEGMENT
??_C@_0BA@MFJMKEM@Can?8t?5delete?5?$CFs@ DB 'Can''t delete %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCMOGDN@?$CFs?3?$CFs@
CONST	SEGMENT
??_C@_05CCMOGDN@?$CFs?3?$CFs@ DB '%s:%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FOJKHHJA@?$CFd?4?$CFd?4?$CFd@
CONST	SEGMENT
??_C@_08FOJKHHJA@?$CFd?4?$CFd?4?$CFd@ DB '%d.%d.%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02MBJIFMOJ@?$CC?6@
CONST	SEGMENT
??_C@_02MBJIFMOJ@?$CC?6@ DB '"', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJIOOHLH@?5?$CF2d@
CONST	SEGMENT
??_C@_04EJIOOHLH@?5?$CF2d@ DB ' %2d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEBNCBOD@?5?$CFs@
CONST	SEGMENT
??_C@_03EEBNCBOD@?5?$CFs@ DB ' %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIOKKJMF@?3?5?$CFs@
CONST	SEGMENT
??_C@_04EIOKKJMF@?3?5?$CFs@ DB ': %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IBFAGDLO@Can?8t?5read?5savegame?5sent@
CONST	SEGMENT
??_C@_0BJ@IBFAGDLO@Can?8t?5read?5savegame?5sent@ DB 'Can''t read savegame'
	DB	' sent', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HFDDGAM@?$CFs?2$$$?4sav@
CONST	SEGMENT
??_C@_0L@HFDDGAM@?$CFs?2$$$?4sav@ DB '%s\$$$.sav', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MJMFNFOM@Savegame?5buffer?5overrun@
CONST	SEGMENT
??_C@_0BI@MJMFNFOM@Savegame?5buffer?5overrun@ DB 'Savegame buffer overrun'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@IAHNBDHG@ServerConfig?5Packet?5could?5not?5b@
CONST	SEGMENT
??_C@_0DB@IAHNBDHG@ServerConfig?5Packet?5could?5not?5b@ DB 'ServerConfig '
	DB	'Packet could not be sent right now', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OGAPGFLP@ServerConfig?5Packet?5was?5sent?6@
CONST	SEGMENT
??_C@_0BO@OGAPGFLP@ServerConfig?5Packet?5was?5sent?6@ DB 'ServerConfig Pa'
	DB	'cket was sent', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@MJFOMBPH@ServerConfig?5Packet?5about?5to?5be@
CONST	SEGMENT
??_C@_0EF@MJFOMBPH@ServerConfig?5Packet?5about?5to?5be@ DB 'ServerConfig '
	DB	'Packet about to be sent, size of packet:%Iu to node:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd@
CONST	SEGMENT
??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd@ DB '%d.%d.%d.%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFANNNEC@UNKNOWN@
CONST	SEGMENT
??_C@_07NFANNNEC@UNKNOWN@ DB 'UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOGGLAIO@clear?5tic?5?$CF5u?5?$CI?$CF2u?$CJ?6@
CONST	SEGMENT
??_C@_0BF@HOGGLAIO@clear?5tic?5?$CF5u?5?$CI?$CF2u?$CJ?6@ DB 'clear tic %5'
	DB	'u (%2u)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KNFFNOEP@player?5?$CFd?5kicked?5?$FLgametic?$DN?$CFu?$FN?5r@
CONST	SEGMENT
??_C@_0DC@KNFFNOEP@player?5?$CFd?5kicked?5?$FLgametic?$DN?$CFu?$FN?5r@ DB 'p'
	DB	'layer %d kicked [gametic=%u] reason as follows:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJDAJCPN@done?6@
CONST	SEGMENT
??_C@_05KJDAJCPN@done?6@ DB 'done', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GOABAMBE@executing?5x_cmd?5?$CFu?5ply?5?$CFu?5@
CONST	SEGMENT
??_C@_0BL@GOABAMBE@executing?5x_cmd?5?$CFu?5ply?5?$CFu?5@ DB 'executing x'
	DB	'_cmd %u ply %u ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OPDNFHO@No?5more?5place?5in?5the?5buffer?5for@
CONST	SEGMENT
??_C@_0CL@OPDNFHO@No?5more?5place?5in?5the?5buffer?5for@ DB 'No more plac'
	DB	'e in the buffer for netcmd %d', 0aH, 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_cv_showjoinaddress DD FLAT:??_C@_0BA@OABLCFAA@showjoinaddress@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	00H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
?sendconfigtic@?1??Got_AddPlayer@@9@9 DD 0ffffffffH	; `Got_AddPlayer'::`2'::sendconfigtic
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	01ebH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	05a1H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0218H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02a5H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0112H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	06f1H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02f4H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0280H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	040cH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	017fH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _PingUpdate
_TEXT	SEGMENT
_buf$1 = -144						; size = 2
_numlaggers$ = -137					; size = 1
_laggers$ = -136					; size = 128
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_PingUpdate PROC					; COMDAT

; 3463 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3464 : 	INT32 i;
; 3465 : 	boolean laggers[MAXPLAYERS];
; 3466 : 	UINT8 numlaggers = 0;

  00016	c6 85 77 ff ff
	ff 00		 mov	 BYTE PTR _numlaggers$[ebp], 0

; 3467 : 	memset(laggers, 0, sizeof(boolean) * MAXPLAYERS);

  0001d	68 80 00 00 00	 push	 128			; 00000080H
  00022	6a 00		 push	 0
  00024	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _laggers$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _memset
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3468 : 
; 3469 : 	netbuffer->packettype = PT_PING;

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00038	c6 40 06 17	 mov	 BYTE PTR [eax+6], 23	; 00000017H

; 3470 : 
; 3471 : 	//check for ping limit breakage.
; 3472 : 	if (cv_maxping.value)

  0003c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_maxping+20, 0
  00043	0f 84 ef 00 00
	00		 je	 $LN6@PingUpdate

; 3473 : 	{
; 3474 : 		for (i = 1; i < MAXNETNODES; i++)

  00049	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00050	eb 09		 jmp	 SHORT $LN4@PingUpdate
$LN2@PingUpdate:
  00052	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@PingUpdate:
  0005b	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0005f	7d 5b		 jge	 SHORT $LN3@PingUpdate

; 3475 : 		{
; 3476 : 			if (playeringame[i] && (realpingtable[i] / pingmeasurecount > (unsigned)cv_maxping.value))

  00061	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00064	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0006c	74 4c		 je	 SHORT $LN15@PingUpdate
  0006e	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR _pingmeasurecount
  00075	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00078	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _realpingtable[edx*4]
  0007f	33 d2		 xor	 edx, edx
  00081	f7 f1		 div	 ecx
  00083	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR _cv_maxping+20
  00089	76 2f		 jbe	 SHORT $LN15@PingUpdate

; 3477 : 			{
; 3478 : 				if (players[i].jointime > 30 * TICRATE)

  0008b	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00092	81 b8 f4 01 00
	00 1a 04 00 00	 cmp	 DWORD PTR _players[eax+500], 1050 ; 0000041aH
  0009c	76 0e		 jbe	 SHORT $LN16@PingUpdate

; 3479 : 					laggers[i] = true;

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a1	c7 84 85 78 ff
	ff ff 01 00 00
	00		 mov	 DWORD PTR _laggers$[ebp+eax*4], 1
$LN16@PingUpdate:

; 3480 : 				numlaggers++;

  000ac	8a 85 77 ff ff
	ff		 mov	 al, BYTE PTR _numlaggers$[ebp]
  000b2	04 01		 add	 al, 1
  000b4	88 85 77 ff ff
	ff		 mov	 BYTE PTR _numlaggers$[ebp], al
$LN15@PingUpdate:

; 3481 : 			}
; 3482 : 		}

  000ba	eb 96		 jmp	 SHORT $LN2@PingUpdate
$LN3@PingUpdate:

; 3483 : 
; 3484 : 		//kick lagging players... unless everyone but the server's ping sucks.
; 3485 : 		//in that case, it is probably the server's fault.
; 3486 : 		if (numlaggers < D_NumPlayers() - 1)

  000bc	0f b6 b5 77 ff
	ff ff		 movzx	 esi, BYTE PTR _numlaggers$[ebp]
  000c3	e8 00 00 00 00	 call	 _D_NumPlayers
  000c8	83 e8 01	 sub	 eax, 1
  000cb	3b f0		 cmp	 esi, eax
  000cd	7d 69		 jge	 SHORT $LN6@PingUpdate

; 3487 : 		{
; 3488 : 			for (i = 1; i < MAXNETNODES; i++)

  000cf	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  000d6	eb 09		 jmp	 SHORT $LN7@PingUpdate
$LN5@PingUpdate:
  000d8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000db	83 c0 01	 add	 eax, 1
  000de	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@PingUpdate:
  000e1	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  000e5	7d 51		 jge	 SHORT $LN6@PingUpdate

; 3489 : 			{
; 3490 : 				if (playeringame[i] && laggers[i])

  000e7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ea	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000f2	74 42		 je	 SHORT $LN18@PingUpdate
  000f4	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000f7	83 bc 85 78 ff
	ff ff 00	 cmp	 DWORD PTR _laggers$[ebp+eax*4], 0
  000ff	74 35		 je	 SHORT $LN18@PingUpdate

; 3491 : 				{
; 3492 : 					XBOXSTATIC char buf[2];
; 3493 : 
; 3494 : 					buf[0] = (char)i;

  00101	b8 01 00 00 00	 mov	 eax, 1
  00106	6b c8 00	 imul	 ecx, eax, 0
  00109	8a 55 f8	 mov	 dl, BYTE PTR _i$[ebp]
  0010c	88 94 0d 70 ff
	ff ff		 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 3495 : 					buf[1] = KICK_MSG_PING_HIGH;

  00113	b8 01 00 00 00	 mov	 eax, 1
  00118	c1 e0 00	 shl	 eax, 0
  0011b	c6 84 05 70 ff
	ff ff 06	 mov	 BYTE PTR _buf$1[ebp+eax], 6

; 3496 : 					SendNetXCmd(XD_KICK, &buf, 2);

  00123	6a 02		 push	 2
  00125	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _buf$1[ebp]
  0012b	50		 push	 eax
  0012c	6a 03		 push	 3
  0012e	e8 00 00 00 00	 call	 _SendNetXCmd
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@PingUpdate:

; 3497 : 				}
; 3498 : 			}

  00136	eb a0		 jmp	 SHORT $LN5@PingUpdate
$LN6@PingUpdate:

; 3499 : 		}
; 3500 : 	}
; 3501 : 
; 3502 : 	//make the ping packet and clear server data for next one
; 3503 : 	for (i = 0; i < MAXNETNODES; i++)

  00138	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0013f	eb 09		 jmp	 SHORT $LN10@PingUpdate
$LN8@PingUpdate:
  00141	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00144	83 c0 01	 add	 eax, 1
  00147	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@PingUpdate:
  0014a	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0014e	7d 51		 jge	 SHORT $LN9@PingUpdate

; 3504 : 	{
; 3505 : 		netbuffer->u.pingtable[i] = realpingtable[i] / pingmeasurecount;

  00150	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR _pingmeasurecount
  00157	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0015a	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _realpingtable[edx*4]
  00161	33 d2		 xor	 edx, edx
  00163	f7 f1		 div	 ecx
  00165	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00168	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  0016e	89 44 8a 08	 mov	 DWORD PTR [edx+ecx*4+8], eax

; 3506 : 		//server takes a snapshot of the real ping for display.
; 3507 : 		//otherwise, pings fluctuate a lot and would be odd to look at.
; 3508 : 		playerpingtable[i] = realpingtable[i] / pingmeasurecount;

  00172	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR _pingmeasurecount
  00179	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0017c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _realpingtable[edx*4]
  00183	33 d2		 xor	 edx, edx
  00185	f7 f1		 div	 ecx
  00187	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0018a	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _playerpingtable[ecx*4], eax

; 3509 : 		realpingtable[i] = 0; //Reset each as we go.

  00191	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00194	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _realpingtable[eax*4], 0

; 3510 : 	}

  0019f	eb a0		 jmp	 SHORT $LN8@PingUpdate
$LN9@PingUpdate:

; 3511 : 
; 3512 : 	//send out our ping packets
; 3513 : 	for (i = 0; i < MAXNETNODES; i++)

  001a1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001a8	eb 09		 jmp	 SHORT $LN13@PingUpdate
$LN11@PingUpdate:
  001aa	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001ad	83 c0 01	 add	 eax, 1
  001b0	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN13@PingUpdate:
  001b3	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  001b7	7d 24		 jge	 SHORT $LN12@PingUpdate

; 3514 : 		if (playeringame[i])

  001b9	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001bc	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  001c4	74 15		 je	 SHORT $LN19@PingUpdate

; 3515 : 			HSendPacket(i, true, 0, sizeof(INT32) * MAXPLAYERS);

  001c6	68 80 00 00 00	 push	 128			; 00000080H
  001cb	6a 00		 push	 0
  001cd	6a 01		 push	 1
  001cf	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 _HSendPacket
  001d8	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@PingUpdate:
  001db	eb cd		 jmp	 SHORT $LN11@PingUpdate
$LN12@PingUpdate:

; 3516 : 
; 3517 : 	pingmeasurecount = 1; //Reset count

  001dd	b8 01 00 00 00	 mov	 eax, 1
  001e2	66 a3 00 00 00
	00		 mov	 WORD PTR _pingmeasurecount, ax

; 3518 : }

  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	5b		 pop	 ebx
  001eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ee	33 cd		 xor	 ecx, ebp
  001f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c3		 ret	 0
_PingUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_Maketic
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_player$2 = -8						; size = 4
_j$ = -4						; size = 4
_SV_Maketic PROC					; COMDAT

; 3365 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3366 : 	INT32 j;
; 3367 : 
; 3368 : 	for (j = 0; j < MAXNETNODES; j++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@SV_Maketic
$LN2@SV_Maketic:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _j$[ebp], eax
$LN4@SV_Maketic:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _j$[ebp], 32	; 00000020H
  0001f	0f 8d 40 01 00
	00		 jge	 $LN3@SV_Maketic

; 3369 : 		if (playerpernode[j])

  00025	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  00028	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playerpernode[eax]
  0002f	85 c9		 test	 ecx, ecx
  00031	0f 84 29 01 00
	00		 je	 $LN6@SV_Maketic

; 3370 : 		{
; 3371 : 			INT32 player = nodetoplayer[j];

  00037	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  0003a	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer[eax]
  00041	89 4d f8	 mov	 DWORD PTR _player$2[ebp], ecx

; 3372 : 			if ((netcmds[maketic%BACKUPTICS][player].angleturn & TICCMD_RECEIVED) == 0)

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00049	33 d2		 xor	 edx, edx
  0004b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00050	f7 f1		 div	 ecx
  00052	c1 e2 08	 shl	 edx, 8
  00055	8b 45 f8	 mov	 eax, DWORD PTR _player$2[ebp]
  00058	0f bf 8c c2 02
	00 00 00	 movsx	 ecx, WORD PTR _netcmds[edx+eax*8+2]
  00060	83 e1 01	 and	 ecx, 1
  00063	0f 85 f7 00 00
	00		 jne	 $LN6@SV_Maketic

; 3373 : 			{ // we didn't receive this tic
; 3374 : 				INT32 i;
; 3375 : 
; 3376 : 				DEBFILE(va("MISS tic%4d for node %d\n", maketic, j));

  00069	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00070	74 35		 je	 SHORT $LN10@SV_Maketic
  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00077	50		 push	 eax
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _j$[ebp]
  0007b	51		 push	 ecx
  0007c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _maketic
  00082	52		 push	 edx
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JCFKBBBI@MISS?5tic?$CF4d?5for?5node?5?$CFd?6@
  00088	e8 00 00 00 00	 call	 _va
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _fputs
  00096	83 c4 08	 add	 esp, 8
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _fflush
  000a4	83 c4 04	 add	 esp, 4
$LN10@SV_Maketic:

; 3377 : #if defined(PARANOIA) && 0
; 3378 : 				if (devparm)
; 3379 : 					I_OutputMsg("Client Misstic %d\n", maketic);
; 3380 : #endif
; 3381 : 				// copy the old tic
; 3382 : 				for (i = 0; i < playerpernode[j]; i++, player = nodetoplayer2[j])

  000a7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000ae	eb 16		 jmp	 SHORT $LN7@SV_Maketic
$LN5@SV_Maketic:
  000b0	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000b3	83 c0 01	 add	 eax, 1
  000b6	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _j$[ebp]
  000bc	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR _nodetoplayer2[ecx]
  000c3	89 55 f8	 mov	 DWORD PTR _player$2[ebp], edx
$LN7@SV_Maketic:
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  000c9	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playerpernode[eax]
  000d0	39 4d f4	 cmp	 DWORD PTR _i$1[ebp], ecx
  000d3	0f 8d 87 00 00
	00		 jge	 $LN6@SV_Maketic

; 3383 : 				{
; 3384 : 					netcmds[maketic%BACKUPTICS][player] = netcmds[(maketic-1)%BACKUPTICS][player];

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  000de	83 e8 01	 sub	 eax, 1
  000e1	33 d2		 xor	 edx, edx
  000e3	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000e8	f7 f1		 div	 ecx
  000ea	c1 e2 08	 shl	 edx, 8
  000ed	8b 45 f8	 mov	 eax, DWORD PTR _player$2[ebp]
  000f0	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR _netcmds[edx+eax*8]
  000f7	8b b4 c2 04 00
	00 00		 mov	 esi, DWORD PTR _netcmds[edx+eax*8+4]
  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00103	33 d2		 xor	 edx, edx
  00105	bf 20 00 00 00	 mov	 edi, 32			; 00000020H
  0010a	f7 f7		 div	 edi
  0010c	c1 e2 08	 shl	 edx, 8
  0010f	8b 45 f8	 mov	 eax, DWORD PTR _player$2[ebp]
  00112	89 8c c2 00 00
	00 00		 mov	 DWORD PTR _netcmds[edx+eax*8], ecx
  00119	89 b4 c2 04 00
	00 00		 mov	 DWORD PTR _netcmds[edx+eax*8+4], esi

; 3385 : 					netcmds[maketic%BACKUPTICS][player].angleturn &= ~TICCMD_RECEIVED;

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00125	33 d2		 xor	 edx, edx
  00127	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0012c	f7 f1		 div	 ecx
  0012e	c1 e2 08	 shl	 edx, 8
  00131	8b 45 f8	 mov	 eax, DWORD PTR _player$2[ebp]
  00134	0f bf 8c c2 02
	00 00 00	 movsx	 ecx, WORD PTR _netcmds[edx+eax*8+2]
  0013c	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00144	33 d2		 xor	 edx, edx
  00146	be 20 00 00 00	 mov	 esi, 32			; 00000020H
  0014b	f7 f6		 div	 esi
  0014d	c1 e2 08	 shl	 edx, 8
  00150	8b 45 f8	 mov	 eax, DWORD PTR _player$2[ebp]
  00153	66 89 8c c2 02
	00 00 00	 mov	 WORD PTR _netcmds[edx+eax*8+2], cx

; 3386 : 				}

  0015b	e9 50 ff ff ff	 jmp	 $LN5@SV_Maketic
$LN6@SV_Maketic:

; 3387 : 			}
; 3388 : 		}

  00160	e9 ad fe ff ff	 jmp	 $LN2@SV_Maketic
$LN3@SV_Maketic:

; 3389 : 
; 3390 : 	// all tic are now proceed make the next
; 3391 : 	maketic++;

  00165	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  0016a	83 c0 01	 add	 eax, 1
  0016d	a3 00 00 00 00	 mov	 DWORD PTR _maketic, eax

; 3392 : }

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
_SV_Maketic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Local_Maketic
_TEXT	SEGMENT
_realtics$ = 8						; size = 4
_Local_Maketic PROC					; COMDAT

; 3339 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3340 : 	I_OsPolling(); // I_Getevent

  00009	e8 00 00 00 00	 call	 _I_OsPolling
  0000e	90		 npad	 1

; 3341 : 	D_ProcessEvents(); // menu responder, cons responder,

  0000f	e8 00 00 00 00	 call	 _D_ProcessEvents
  00014	90		 npad	 1

; 3342 : 	                   // game responder calls HU_Responder, AM_Responder, F_Responder,
; 3343 : 	                   // and G_MapEventsToControls
; 3344 : 	if (!dedicated) rendergametic = gametic;

  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  0001c	75 0a		 jne	 SHORT $LN2@Local_Make
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00023	a3 00 00 00 00	 mov	 DWORD PTR _rendergametic, eax
$LN2@Local_Make:

; 3345 : 	// translate inputs (keyboard/mouse/joystick) into game controls
; 3346 : 	G_BuildTiccmd(&localcmds, realtics);

  00028	8b 45 08	 mov	 eax, DWORD PTR _realtics$[ebp]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET _localcmds
  00031	e8 00 00 00 00	 call	 _G_BuildTiccmd
  00036	83 c4 08	 add	 esp, 8

; 3347 : 	if (splitscreen)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00040	74 11		 je	 SHORT $LN3@Local_Make

; 3348 : 		G_BuildTiccmd2(&localcmds2, realtics);

  00042	8b 45 08	 mov	 eax, DWORD PTR _realtics$[ebp]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET _localcmds2
  0004b	e8 00 00 00 00	 call	 _G_BuildTiccmd2
  00050	83 c4 08	 add	 esp, 8
$LN3@Local_Make:

; 3349 : 
; 3350 : 	localcmds.angleturn |= TICCMD_RECEIVED;

  00053	0f bf 05 02 00
	00 00		 movsx	 eax, WORD PTR _localcmds+2
  0005a	83 c8 01	 or	 eax, 1
  0005d	66 a3 02 00 00
	00		 mov	 WORD PTR _localcmds+2, ax

; 3351 : }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_Local_Maketic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SendTics
_TEXT	SEGMENT
_p_tmp$1 = -40						; size = 4
_size$2 = -36						; size = 4
_ntextcmd$ = -32					; size = 4
_bufpos$ = -28						; size = 4
_packsize$ = -24					; size = 4
_j$ = -20						; size = 4
_n$ = -16						; size = 4
_i$ = -12						; size = 4
_lasttictosend$ = -8					; size = 4
_realfirsttic$ = -4					; size = 4
_SV_SendTics PROC					; COMDAT

; 3223 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3224 : 	tic_t realfirsttic, lasttictosend, i;
; 3225 : 	UINT32 n;
; 3226 : 	INT32 j;
; 3227 : 	size_t packsize;
; 3228 : 	UINT8 *bufpos;
; 3229 : 	UINT8 *ntextcmd;
; 3230 : 
; 3231 : 	// send to all client but not to me
; 3232 : 	// for each node create a packet with x tics and send it
; 3233 : 	// x is computed using supposedtics[n], max packet size and maketic
; 3234 : 	for (n = 1; n < MAXNETNODES; n++)

  00009	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _n$[ebp], 1
  00010	eb 09		 jmp	 SHORT $LN4@SV_SendTic
$LN2@SV_SendTic:
  00012	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax
$LN4@SV_SendTic:
  0001b	83 7d f0 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  0001f	0f 83 3a 04 00
	00		 jae	 $LN3@SV_SendTic

; 3235 : 		if (nodeingame[n])

  00025	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00028	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _nodeingame[eax*4], 0
  00030	0f 84 24 04 00
	00		 je	 $LN37@SV_SendTic

; 3236 : 		{
; 3237 : 			lasttictosend = maketic;

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  0003b	89 45 f8	 mov	 DWORD PTR _lasttictosend$[ebp], eax

; 3238 : 
; 3239 : 			// assert supposedtics[n]>=nettics[n]
; 3240 : 			realfirsttic = supposedtics[n];

  0003e	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00041	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _supposedtics[eax*4]
  00048	89 4d fc	 mov	 DWORD PTR _realfirsttic$[ebp], ecx

; 3241 : 			if (realfirsttic >= maketic)

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _realfirsttic$[ebp]
  0004e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _maketic
  00054	0f 82 b5 00 00
	00		 jb	 $LN25@SV_SendTic

; 3242 : 			{
; 3243 : 				// well we have sent all tics we will so use extrabandwidth
; 3244 : 				// to resent packet that are supposed lost (this is necessary since lost
; 3245 : 				// packet detection work when we have received packet with firsttic > neededtic
; 3246 : 				// (getpacket servertics case)
; 3247 : 				DEBFILE(va("Nothing to send node %u mak=%u sup=%u net=%u \n",

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00061	74 4b		 je	 SHORT $LN22@SV_SendTic
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00068	50		 push	 eax
  00069	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  0006c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _nettics[ecx*4]
  00073	52		 push	 edx
  00074	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00077	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _supposedtics[eax*4]
  0007e	51		 push	 ecx
  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _maketic
  00085	52		 push	 edx
  00086	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00089	50		 push	 eax
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@GNLJPENF@Nothing?5to?5send?5node?5?$CFu?5mak?$DN?$CFu?5@
  0008f	e8 00 00 00 00	 call	 _va
  00094	83 c4 14	 add	 esp, 20			; 00000014H
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _fputs
  0009d	83 c4 08	 add	 esp, 8
  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _fflush
  000ab	83 c4 04	 add	 esp, 4
$LN22@SV_SendTic:

; 3248 : 					n, maketic, supposedtics[n], nettics[n]));
; 3249 : 				realfirsttic = nettics[n];

  000ae	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  000b1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _nettics[eax*4]
  000b8	89 4d fc	 mov	 DWORD PTR _realfirsttic$[ebp], ecx

; 3250 : 				if (realfirsttic >= maketic || (I_GetTime() + n)&3)

  000bb	8b 45 fc	 mov	 eax, DWORD PTR _realfirsttic$[ebp]
  000be	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _maketic
  000c4	73 0d		 jae	 SHORT $LN24@SV_SendTic
  000c6	e8 00 00 00 00	 call	 _I_GetTime
  000cb	03 45 f0	 add	 eax, DWORD PTR _n$[ebp]
  000ce	83 e0 03	 and	 eax, 3
  000d1	74 05		 je	 SHORT $LN23@SV_SendTic
$LN24@SV_SendTic:

; 3251 : 					// all tic are ok
; 3252 : 					continue;

  000d3	e9 3a ff ff ff	 jmp	 $LN2@SV_SendTic
$LN23@SV_SendTic:

; 3253 : 				DEBFILE(va("Sent %d anyway\n", realfirsttic));

  000d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  000df	74 2e		 je	 SHORT $LN25@SV_SendTic
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  000e6	50		 push	 eax
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR _realfirsttic$[ebp]
  000ea	51		 push	 ecx
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IJCCPNFD@Sent?5?$CFd?5anyway?6@
  000f0	e8 00 00 00 00	 call	 _va
  000f5	83 c4 08	 add	 esp, 8
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _fputs
  000fe	83 c4 08	 add	 esp, 8
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _fflush
  0010c	83 c4 04	 add	 esp, 4
$LN25@SV_SendTic:

; 3254 : 			}
; 3255 : 			if (realfirsttic < firstticstosend)

  0010f	8b 45 fc	 mov	 eax, DWORD PTR _realfirsttic$[ebp]
  00112	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _firstticstosend
  00118	73 08		 jae	 SHORT $LN26@SV_SendTic

; 3256 : 				realfirsttic = firstticstosend;

  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR _firstticstosend
  0011f	89 45 fc	 mov	 DWORD PTR _realfirsttic$[ebp], eax
$LN26@SV_SendTic:

; 3257 : 
; 3258 : 			// compute the length of the packet and cut it if too large
; 3259 : 			packsize = BASESERVERTICSSIZE;

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	83 c0 08	 add	 eax, 8
  0012a	b9 08 00 00 00	 mov	 ecx, 8
  0012f	6b d1 00	 imul	 edx, ecx, 0
  00132	03 c2		 add	 eax, edx
  00134	89 45 e8	 mov	 DWORD PTR _packsize$[ebp], eax

; 3260 : 			for (i = realfirsttic; i < lasttictosend; i++)

  00137	8b 45 fc	 mov	 eax, DWORD PTR _realfirsttic$[ebp]
  0013a	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  0013d	eb 09		 jmp	 SHORT $LN7@SV_SendTic
$LN5@SV_SendTic:
  0013f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00142	83 c0 01	 add	 eax, 1
  00145	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN7@SV_SendTic:
  00148	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0014b	3b 45 f8	 cmp	 eax, DWORD PTR _lasttictosend$[ebp]
  0014e	0f 83 ea 00 00
	00		 jae	 $LN6@SV_SendTic

; 3261 : 			{
; 3262 : 				packsize += sizeof (ticcmd_t) * doomcom->numslots;

  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  00159	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  0015d	8b 55 e8	 mov	 edx, DWORD PTR _packsize$[ebp]
  00160	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00163	89 45 e8	 mov	 DWORD PTR _packsize$[ebp], eax

; 3263 : 				packsize += TotalTextCmdPerTic(i);

  00166	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 _TotalTextCmdPerTic
  0016f	83 c4 04	 add	 esp, 4
  00172	03 45 e8	 add	 eax, DWORD PTR _packsize$[ebp]
  00175	89 45 e8	 mov	 DWORD PTR _packsize$[ebp], eax

; 3264 : 
; 3265 : 				if (packsize > software_MAXPACKETLENGTH)

  00178	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _software_MAXPACKETLENGTH
  0017f	39 45 e8	 cmp	 DWORD PTR _packsize$[ebp], eax
  00182	0f 86 b1 00 00
	00		 jbe	 $LN27@SV_SendTic

; 3266 : 				{
; 3267 : 					DEBFILE(va("packet too large (%"PRIdS") at tic %d (should be from %d to %d)\n",

  00188	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0018f	74 3a		 je	 SHORT $LN28@SV_SendTic
  00191	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00196	50		 push	 eax
  00197	8b 4d f8	 mov	 ecx, DWORD PTR _lasttictosend$[ebp]
  0019a	51		 push	 ecx
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _realfirsttic$[ebp]
  0019e	52		 push	 edx
  0019f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001a2	50		 push	 eax
  001a3	8b 4d e8	 mov	 ecx, DWORD PTR _packsize$[ebp]
  001a6	51		 push	 ecx
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@IMKIBDOK@packet?5too?5large?5?$CI?$CFIu?$CJ?5at?5tic?5?$CF@
  001ac	e8 00 00 00 00	 call	 _va
  001b1	83 c4 14	 add	 esp, 20			; 00000014H
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _fputs
  001ba	83 c4 08	 add	 esp, 8
  001bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _fflush
  001c8	83 c4 04	 add	 esp, 4
$LN28@SV_SendTic:

; 3268 : 						packsize, i, realfirsttic, lasttictosend));
; 3269 : 					lasttictosend = i;

  001cb	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001ce	89 45 f8	 mov	 DWORD PTR _lasttictosend$[ebp], eax

; 3270 : 
; 3271 : 					// too bad: too much player have send extradata and there is too
; 3272 : 					//          much data in one tic.
; 3273 : 					// To avoid it put the data on the next tic. (see getpacket
; 3274 : 					// textcmd case) but when numplayer changes the computation can be different
; 3275 : 					if (lasttictosend == realfirsttic)

  001d1	8b 45 f8	 mov	 eax, DWORD PTR _lasttictosend$[ebp]
  001d4	3b 45 fc	 cmp	 eax, DWORD PTR _realfirsttic$[ebp]
  001d7	75 5e		 jne	 SHORT $LN32@SV_SendTic

; 3276 : 					{
; 3277 : 						if (packsize > MAXPACKETLENGTH)

  001d9	81 7d e8 aa 05
	00 00		 cmp	 DWORD PTR _packsize$[ebp], 1450 ; 000005aaH
  001e0	76 22		 jbe	 SHORT $LN30@SV_SendTic

; 3278 : 							I_Error("Too many players: can't send %"PRIdS" data for %d players to node %d\n"

  001e2	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  001e5	50		 push	 eax
  001e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  001ec	0f bf 51 1a	 movsx	 edx, WORD PTR [ecx+26]
  001f0	52		 push	 edx
  001f1	8b 45 e8	 mov	 eax, DWORD PTR _packsize$[ebp]
  001f4	50		 push	 eax
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@JJJPPPFI@Too?5many?5players?3?5can?8t?5send?5?$CFI@
  001fa	e8 00 00 00 00	 call	 _I_Error
  001ff	83 c4 10	 add	 esp, 16			; 00000010H
  00202	eb 33		 jmp	 SHORT $LN32@SV_SendTic
$LN30@SV_SendTic:

; 3279 : 							        "Well sorry nobody is perfect....\n",
; 3280 : 							        packsize, doomcom->numslots, n);
; 3281 : 						else
; 3282 : 						{
; 3283 : 							lasttictosend++; // send it anyway!

  00204	8b 45 f8	 mov	 eax, DWORD PTR _lasttictosend$[ebp]
  00207	83 c0 01	 add	 eax, 1
  0020a	89 45 f8	 mov	 DWORD PTR _lasttictosend$[ebp], eax

; 3284 : 							DEBFILE("sending it anyway\n");

  0020d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00214	74 21		 je	 SHORT $LN32@SV_SendTic
  00216	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0021b	50		 push	 eax
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OONMIKHP@sending?5it?5anyway?6@
  00221	e8 00 00 00 00	 call	 _fputs
  00226	83 c4 08	 add	 esp, 8
  00229	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 _fflush
  00234	83 c4 04	 add	 esp, 4
$LN32@SV_SendTic:

; 3285 : 						}
; 3286 : 					}
; 3287 : 					break;

  00237	eb 05		 jmp	 SHORT $LN6@SV_SendTic
$LN27@SV_SendTic:

; 3288 : 				}
; 3289 : 			}

  00239	e9 01 ff ff ff	 jmp	 $LN5@SV_SendTic
$LN6@SV_SendTic:

; 3290 : 
; 3291 : 			// Send the tics
; 3292 : 			netbuffer->packettype = PT_SERVERTICS;

  0023e	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00243	c6 40 06 08	 mov	 BYTE PTR [eax+6], 8

; 3293 : 			netbuffer->u.serverpak.starttic = (UINT8)realfirsttic;

  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0024c	8a 4d fc	 mov	 cl, BYTE PTR _realfirsttic$[ebp]
  0024f	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 3294 : 			netbuffer->u.serverpak.numtics = (UINT8)(lasttictosend - realfirsttic);

  00252	8b 45 f8	 mov	 eax, DWORD PTR _lasttictosend$[ebp]
  00255	2b 45 fc	 sub	 eax, DWORD PTR _realfirsttic$[ebp]
  00258	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  0025e	88 41 09	 mov	 BYTE PTR [ecx+9], al

; 3295 : 			netbuffer->u.serverpak.numslots = (UINT8)SHORT(doomcom->numslots);

  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00266	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  0026c	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  0026f	88 50 0a	 mov	 BYTE PTR [eax+10], dl

; 3296 : 			bufpos = (UINT8 *)&netbuffer->u.serverpak.cmds;

  00272	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00277	83 c0 0c	 add	 eax, 12			; 0000000cH
  0027a	89 45 e4	 mov	 DWORD PTR _bufpos$[ebp], eax

; 3297 : 
; 3298 : 			for (i = realfirsttic; i < lasttictosend; i++)

  0027d	8b 45 fc	 mov	 eax, DWORD PTR _realfirsttic$[ebp]
  00280	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  00283	eb 09		 jmp	 SHORT $LN10@SV_SendTic
$LN8@SV_SendTic:
  00285	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00288	83 c0 01	 add	 eax, 1
  0028b	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN10@SV_SendTic:
  0028e	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00291	3b 45 f8	 cmp	 eax, DWORD PTR _lasttictosend$[ebp]
  00294	73 34		 jae	 SHORT $LN9@SV_SendTic

; 3299 : 			{
; 3300 : 				bufpos = G_DcpyTiccmd(bufpos, netcmds[i%BACKUPTICS], doomcom->numslots * sizeof (ticcmd_t));

  00296	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  0029b	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  0029f	c1 e1 03	 shl	 ecx, 3
  002a2	51		 push	 ecx
  002a3	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  002a6	33 d2		 xor	 edx, edx
  002a8	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  002ad	f7 f1		 div	 ecx
  002af	c1 e2 08	 shl	 edx, 8
  002b2	81 c2 00 00 00
	00		 add	 edx, OFFSET _netcmds
  002b8	52		 push	 edx
  002b9	8b 55 e4	 mov	 edx, DWORD PTR _bufpos$[ebp]
  002bc	52		 push	 edx
  002bd	e8 00 00 00 00	 call	 _G_DcpyTiccmd
  002c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c5	89 45 e4	 mov	 DWORD PTR _bufpos$[ebp], eax

; 3301 : 			}

  002c8	eb bb		 jmp	 SHORT $LN8@SV_SendTic
$LN9@SV_SendTic:

; 3302 : 
; 3303 : 			// add textcmds
; 3304 : 			for (i = realfirsttic; i < lasttictosend; i++)

  002ca	8b 45 fc	 mov	 eax, DWORD PTR _realfirsttic$[ebp]
  002cd	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  002d0	eb 09		 jmp	 SHORT $LN13@SV_SendTic
$LN11@SV_SendTic:
  002d2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  002d5	83 c0 01	 add	 eax, 1
  002d8	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN13@SV_SendTic:
  002db	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  002de	3b 45 f8	 cmp	 eax, DWORD PTR _lasttictosend$[ebp]
  002e1	0f 83 eb 00 00
	00		 jae	 $LN12@SV_SendTic

; 3305 : 			{
; 3306 : 				ntextcmd = bufpos++;

  002e7	8b 45 e4	 mov	 eax, DWORD PTR _bufpos$[ebp]
  002ea	89 45 e0	 mov	 DWORD PTR _ntextcmd$[ebp], eax
  002ed	8b 4d e4	 mov	 ecx, DWORD PTR _bufpos$[ebp]
  002f0	83 c1 01	 add	 ecx, 1
  002f3	89 4d e4	 mov	 DWORD PTR _bufpos$[ebp], ecx

; 3307 : 				*ntextcmd = 0;

  002f6	8b 45 e0	 mov	 eax, DWORD PTR _ntextcmd$[ebp]
  002f9	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3308 : 				for (j = 0; j < MAXPLAYERS; j++)

  002fc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00303	eb 09		 jmp	 SHORT $LN16@SV_SendTic
$LN14@SV_SendTic:
  00305	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00308	83 c0 01	 add	 eax, 1
  0030b	89 45 ec	 mov	 DWORD PTR _j$[ebp], eax
$LN16@SV_SendTic:
  0030e	83 7d ec 20	 cmp	 DWORD PTR _j$[ebp], 32	; 00000020H
  00312	0f 8d b5 00 00
	00		 jge	 $LN15@SV_SendTic

; 3309 : 				{
; 3310 : 					INT32 size = textcmds[i%BACKUPTICS][j][0];

  00318	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0031b	33 d2		 xor	 edx, edx
  0031d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00322	f7 f1		 div	 ecx
  00324	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  00327	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  0032a	c1 e0 08	 shl	 eax, 8
  0032d	8d 8c 02 00 00
	00 00		 lea	 ecx, DWORD PTR _textcmds[edx+eax]
  00334	ba 01 00 00 00	 mov	 edx, 1
  00339	6b c2 00	 imul	 eax, edx, 0
  0033c	0f b6 0c 01	 movzx	 ecx, BYTE PTR [ecx+eax]
  00340	89 4d dc	 mov	 DWORD PTR _size$2[ebp], ecx

; 3311 : 
; 3312 : 					if ((!j || playeringame[j]) && size)

  00343	83 7d ec 00	 cmp	 DWORD PTR _j$[ebp], 0
  00347	74 0d		 je	 SHORT $LN34@SV_SendTic
  00349	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  0034c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00354	74 72		 je	 SHORT $LN33@SV_SendTic
$LN34@SV_SendTic:
  00356	83 7d dc 00	 cmp	 DWORD PTR _size$2[ebp], 0
  0035a	74 6c		 je	 SHORT $LN33@SV_SendTic

; 3313 : 					{
; 3314 : 						(*ntextcmd)++;

  0035c	8b 45 e0	 mov	 eax, DWORD PTR _ntextcmd$[ebp]
  0035f	8a 08		 mov	 cl, BYTE PTR [eax]
  00361	80 c1 01	 add	 cl, 1
  00364	8b 55 e0	 mov	 edx, DWORD PTR _ntextcmd$[ebp]
  00367	88 0a		 mov	 BYTE PTR [edx], cl
$LN19@SV_SendTic:

; 3315 : 						WRITEUINT8(bufpos, j);

  00369	8b 45 e4	 mov	 eax, DWORD PTR _bufpos$[ebp]
  0036c	89 45 d8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0036f	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00372	8a 4d ec	 mov	 cl, BYTE PTR _j$[ebp]
  00375	88 08		 mov	 BYTE PTR [eax], cl
  00377	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0037a	83 c0 01	 add	 eax, 1
  0037d	89 45 d8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00380	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00383	89 45 e4	 mov	 DWORD PTR _bufpos$[ebp], eax
  00386	33 c0		 xor	 eax, eax
  00388	75 df		 jne	 SHORT $LN19@SV_SendTic

; 3316 : 						M_Memcpy(bufpos, textcmds[i%BACKUPTICS][j], size + 1);

  0038a	8b 45 dc	 mov	 eax, DWORD PTR _size$2[ebp]
  0038d	83 c0 01	 add	 eax, 1
  00390	50		 push	 eax
  00391	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00394	33 d2		 xor	 edx, edx
  00396	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0039b	f7 f1		 div	 ecx
  0039d	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  003a0	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  003a3	c1 e0 08	 shl	 eax, 8
  003a6	8d 8c 02 00 00
	00 00		 lea	 ecx, DWORD PTR _textcmds[edx+eax]
  003ad	51		 push	 ecx
  003ae	8b 55 e4	 mov	 edx, DWORD PTR _bufpos$[ebp]
  003b1	52		 push	 edx
  003b2	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  003b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3317 : 						bufpos += size + 1;

  003bb	8b 45 dc	 mov	 eax, DWORD PTR _size$2[ebp]
  003be	8b 4d e4	 mov	 ecx, DWORD PTR _bufpos$[ebp]
  003c1	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  003c5	89 55 e4	 mov	 DWORD PTR _bufpos$[ebp], edx
$LN33@SV_SendTic:

; 3318 : 					}
; 3319 : 				}

  003c8	e9 38 ff ff ff	 jmp	 $LN14@SV_SendTic
$LN15@SV_SendTic:

; 3320 : 			}

  003cd	e9 00 ff ff ff	 jmp	 $LN11@SV_SendTic
$LN12@SV_SendTic:

; 3321 : 			packsize = bufpos - (UINT8 *)&(netbuffer->u);

  003d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  003d7	83 c0 08	 add	 eax, 8
  003da	8b 4d e4	 mov	 ecx, DWORD PTR _bufpos$[ebp]
  003dd	2b c8		 sub	 ecx, eax
  003df	89 4d e8	 mov	 DWORD PTR _packsize$[ebp], ecx

; 3322 : 
; 3323 : 			HSendPacket(n, false, 0, packsize);

  003e2	8b 45 e8	 mov	 eax, DWORD PTR _packsize$[ebp]
  003e5	50		 push	 eax
  003e6	6a 00		 push	 0
  003e8	6a 00		 push	 0
  003ea	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  003ed	51		 push	 ecx
  003ee	e8 00 00 00 00	 call	 _HSendPacket
  003f3	83 c4 10	 add	 esp, 16			; 00000010H

; 3324 : 			// when tic are too large, only one tic is sent so don't go backward!
; 3325 : 			if (lasttictosend-doomcom->extratics > realfirsttic)

  003f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  003fb	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  003ff	8b 55 f8	 mov	 edx, DWORD PTR _lasttictosend$[ebp]
  00402	2b d1		 sub	 edx, ecx
  00404	3b 55 fc	 cmp	 edx, DWORD PTR _realfirsttic$[ebp]
  00407	76 1a		 jbe	 SHORT $LN35@SV_SendTic

; 3326 : 				supposedtics[n] = lasttictosend-doomcom->extratics;

  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  0040e	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00412	8b 55 f8	 mov	 edx, DWORD PTR _lasttictosend$[ebp]
  00415	2b d1		 sub	 edx, ecx
  00417	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0041a	89 14 85 00 00
	00 00		 mov	 DWORD PTR _supposedtics[eax*4], edx
  00421	eb 0d		 jmp	 SHORT $LN36@SV_SendTic
$LN35@SV_SendTic:

; 3327 : 			else
; 3328 : 				supposedtics[n] = lasttictosend;

  00423	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00426	8b 4d f8	 mov	 ecx, DWORD PTR _lasttictosend$[ebp]
  00429	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _supposedtics[eax*4], ecx
$LN36@SV_SendTic:

; 3329 : 			if (supposedtics[n] < nettics[n]) supposedtics[n] = nettics[n];

  00430	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00433	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  00436	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _supposedtics[eax*4]
  0043d	3b 14 8d 00 00
	00 00		 cmp	 edx, DWORD PTR _nettics[ecx*4]
  00444	73 14		 jae	 SHORT $LN37@SV_SendTic
  00446	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00449	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  0044c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _nettics[ecx*4]
  00453	89 14 85 00 00
	00 00		 mov	 DWORD PTR _supposedtics[eax*4], edx
$LN37@SV_SendTic:

; 3330 : 		}

  0045a	e9 b3 fb ff ff	 jmp	 $LN2@SV_SendTic
$LN3@SV_SendTic:

; 3331 : 	// node 0 is me!
; 3332 : 	supposedtics[0] = maketic;

  0045f	b8 04 00 00 00	 mov	 eax, 4
  00464	6b c8 00	 imul	 ecx, eax, 0
  00467	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _maketic
  0046d	89 91 00 00 00
	00		 mov	 DWORD PTR _supposedtics[ecx], edx

; 3333 : }

  00473	5f		 pop	 edi
  00474	5e		 pop	 esi
  00475	5b		 pop	 ebx
  00476	8b e5		 mov	 esp, ebp
  00478	5d		 pop	 ebp
  00479	c3		 ret	 0
_SV_SendTics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_SendClientCmd
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_packetsize$ = -4					; size = 4
_CL_SendClientCmd PROC					; COMDAT

; 3161 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3162 : 	size_t packetsize = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _packetsize$[ebp], 0

; 3163 : 
; 3164 : 	netbuffer->packettype = PT_CLIENTCMD;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00015	c6 40 06 02	 mov	 BYTE PTR [eax+6], 2

; 3165 : 
; 3166 : 	if (cl_packetmissed)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cl_packetmissed, 0
  00020	74 14		 je	 SHORT $LN2@CL_SendCli

; 3167 : 		netbuffer->packettype++;

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00027	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  0002a	80 c1 01	 add	 cl, 1
  0002d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00033	88 4a 06	 mov	 BYTE PTR [edx+6], cl
$LN2@CL_SendCli:

; 3168 : 	netbuffer->u.clientpak.resendfrom = (UINT8)(neededtic & UINT8_MAX);

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _neededtic
  0003b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00046	88 41 09	 mov	 BYTE PTR [ecx+9], al

; 3169 : 	netbuffer->u.clientpak.client_tic = (UINT8)(gametic & UINT8_MAX);

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  0004e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00059	88 41 08	 mov	 BYTE PTR [ecx+8], al

; 3170 : 
; 3171 : 	if (gamestate == GS_WAITINGPLAYERS)

  0005c	83 3d 00 00 00
	00 0d		 cmp	 DWORD PTR _gamestate, 13 ; 0000000dH
  00063	75 39		 jne	 SHORT $LN3@CL_SendCli

; 3172 : 	{
; 3173 : 		// send NODEKEEPALIVE packet
; 3174 : 		netbuffer->packettype += 4;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0006a	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  0006e	83 c1 04	 add	 ecx, 4
  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00077	88 4a 06	 mov	 BYTE PTR [edx+6], cl

; 3175 : 		packetsize = sizeof (clientcmd_pak) - sizeof (ticcmd_t) - sizeof (INT16);

  0007a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _packetsize$[ebp], 2

; 3176 : 		HSendPacket(servernode, false, 0, packetsize);

  00081	8b 45 fc	 mov	 eax, DWORD PTR _packetsize$[ebp]
  00084	50		 push	 eax
  00085	6a 00		 push	 0
  00087	6a 00		 push	 0
  00089	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 _HSendPacket
  00096	83 c4 10	 add	 esp, 16			; 00000010H

; 3177 : 	}

  00099	e9 a2 00 00 00	 jmp	 $LN5@CL_SendCli
$LN3@CL_SendCli:

; 3178 : 	else if (gamestate != GS_NULL)

  0009e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _gamestate, 0
  000a5	0f 84 95 00 00
	00		 je	 $LN5@CL_SendCli

; 3179 : 	{
; 3180 : 		G_MoveTiccmd(&netbuffer->u.clientpak.cmd, &localcmds, 1);

  000ab	6a 01		 push	 1
  000ad	68 00 00 00 00	 push	 OFFSET _localcmds
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000b7	83 c0 0c	 add	 eax, 12			; 0000000cH
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _G_MoveTiccmd
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3181 : 		netbuffer->u.clientpak.consistancy = SHORT(consistancy[gametic%BACKUPTICS]);

  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  000c8	33 d2		 xor	 edx, edx
  000ca	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000cf	f7 f1		 div	 ecx
  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000d6	66 8b 0c 55 00
	00 00 00	 mov	 cx, WORD PTR _consistancy[edx*2]
  000de	66 89 48 0a	 mov	 WORD PTR [eax+10], cx

; 3182 : 
; 3183 : 		// send a special packet with 2 cmd for splitscreen
; 3184 : 		if (splitscreen)

  000e2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000e9	74 36		 je	 SHORT $LN6@CL_SendCli

; 3185 : 		{
; 3186 : 			netbuffer->packettype += 2;

  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000f0	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  000f4	83 c1 02	 add	 ecx, 2
  000f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  000fd	88 4a 06	 mov	 BYTE PTR [edx+6], cl

; 3187 : 			G_MoveTiccmd(&netbuffer->u.client2pak.cmd2, &localcmds2, 1);

  00100	6a 01		 push	 1
  00102	68 00 00 00 00	 push	 OFFSET _localcmds2
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0010c	83 c0 14	 add	 eax, 20			; 00000014H
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _G_MoveTiccmd
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3188 : 			packetsize = sizeof (client2cmd_pak);

  00118	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR _packetsize$[ebp], 20 ; 00000014H

; 3189 : 		}

  0011f	eb 07		 jmp	 SHORT $LN7@CL_SendCli
$LN6@CL_SendCli:

; 3190 : 		else
; 3191 : 			packetsize = sizeof (clientcmd_pak);

  00121	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _packetsize$[ebp], 12 ; 0000000cH
$LN7@CL_SendCli:

; 3192 : 
; 3193 : 		HSendPacket(servernode, false, 0, packetsize);

  00128	8b 45 fc	 mov	 eax, DWORD PTR _packetsize$[ebp]
  0012b	50		 push	 eax
  0012c	6a 00		 push	 0
  0012e	6a 00		 push	 0
  00130	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 _HSendPacket
  0013d	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@CL_SendCli:

; 3194 : 	}
; 3195 : 
; 3196 : 	if (cl_mode == cl_connected || dedicated)

  00140	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _cl_mode, 5
  00147	74 0d		 je	 SHORT $LN9@CL_SendCli
  00149	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00150	0f 84 36 01 00
	00		 je	 $LN13@CL_SendCli
$LN9@CL_SendCli:

; 3197 : 	{
; 3198 : 		// send extra data if needed
; 3199 : 		if (localtextcmd[0])

  00156	b8 01 00 00 00	 mov	 eax, 1
  0015b	6b c8 00	 imul	 ecx, eax, 0
  0015e	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd[ecx]
  00165	85 d2		 test	 edx, edx
  00167	0f 84 84 00 00
	00		 je	 $LN11@CL_SendCli

; 3200 : 		{
; 3201 : 			netbuffer->packettype = PT_TEXTCMD;

  0016d	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00172	c6 40 06 12	 mov	 BYTE PTR [eax+6], 18	; 00000012H

; 3202 : 			M_Memcpy(netbuffer->u.textcmd,localtextcmd, localtextcmd[0]+1);

  00176	b8 01 00 00 00	 mov	 eax, 1
  0017b	6b c8 00	 imul	 ecx, eax, 0
  0017e	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd[ecx]
  00185	83 c2 01	 add	 edx, 1
  00188	52		 push	 edx
  00189	68 00 00 00 00	 push	 OFFSET _localtextcmd
  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00193	83 c0 08	 add	 eax, 8
  00196	50		 push	 eax
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0019d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3203 : 			// all extra data have been sended
; 3204 : 			if (HSendPacket(servernode, true, 0, localtextcmd[0]+1)) // send can fail...

  001a0	b8 01 00 00 00	 mov	 eax, 1
  001a5	6b c8 00	 imul	 ecx, eax, 0
  001a8	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd[ecx]
  001af	83 c2 01	 add	 edx, 1
  001b2	52		 push	 edx
  001b3	6a 00		 push	 0
  001b5	6a 01		 push	 1
  001b7	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 _HSendPacket
  001c4	83 c4 10	 add	 esp, 16			; 00000010H
  001c7	85 c0		 test	 eax, eax
  001c9	74 26		 je	 SHORT $LN11@CL_SendCli

; 3205 : 				localtextcmd[0] = 0;

  001cb	b8 01 00 00 00	 mov	 eax, 1
  001d0	6b c8 00	 imul	 ecx, eax, 0
  001d3	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  001d6	81 7d b8 00 01
	00 00		 cmp	 DWORD PTR $T2[ebp], 256	; 00000100H
  001dd	73 02		 jae	 SHORT $LN15@CL_SendCli
  001df	eb 06		 jmp	 SHORT $LN16@CL_SendCli
$LN15@CL_SendCli:
  001e1	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  001e6	90		 npad	 1
$LN16@CL_SendCli:
  001e7	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  001ea	c6 82 00 00 00
	00 00		 mov	 BYTE PTR _localtextcmd[edx], 0
$LN11@CL_SendCli:

; 3206 : 		}
; 3207 : 
; 3208 : 		// send extra data if needed for player 2 (splitscreen)
; 3209 : 		if (localtextcmd2[0])

  001f1	b8 01 00 00 00	 mov	 eax, 1
  001f6	6b c8 00	 imul	 ecx, eax, 0
  001f9	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd2[ecx]
  00200	85 d2		 test	 edx, edx
  00202	0f 84 84 00 00
	00		 je	 $LN13@CL_SendCli

; 3210 : 		{
; 3211 : 			netbuffer->packettype = PT_TEXTCMD2;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0020d	c6 40 06 13	 mov	 BYTE PTR [eax+6], 19	; 00000013H

; 3212 : 			M_Memcpy(netbuffer->u.textcmd, localtextcmd2, localtextcmd2[0]+1);

  00211	b8 01 00 00 00	 mov	 eax, 1
  00216	6b c8 00	 imul	 ecx, eax, 0
  00219	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd2[ecx]
  00220	83 c2 01	 add	 edx, 1
  00223	52		 push	 edx
  00224	68 00 00 00 00	 push	 OFFSET _localtextcmd2
  00229	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0022e	83 c0 08	 add	 eax, 8
  00231	50		 push	 eax
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00238	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3213 : 			// all extra data have been sended
; 3214 : 			if (HSendPacket(servernode, true, 0, localtextcmd2[0]+1)) // send can fail...

  0023b	b8 01 00 00 00	 mov	 eax, 1
  00240	6b c8 00	 imul	 ecx, eax, 0
  00243	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd2[ecx]
  0024a	83 c2 01	 add	 edx, 1
  0024d	52		 push	 edx
  0024e	6a 00		 push	 0
  00250	6a 01		 push	 1
  00252	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _HSendPacket
  0025f	83 c4 10	 add	 esp, 16			; 00000010H
  00262	85 c0		 test	 eax, eax
  00264	74 26		 je	 SHORT $LN13@CL_SendCli

; 3215 : 				localtextcmd2[0] = 0;

  00266	b8 01 00 00 00	 mov	 eax, 1
  0026b	6b c8 00	 imul	 ecx, eax, 0
  0026e	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00271	81 7d b4 00 01
	00 00		 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  00278	73 02		 jae	 SHORT $LN17@CL_SendCli
  0027a	eb 06		 jmp	 SHORT $LN18@CL_SendCli
$LN17@CL_SendCli:
  0027c	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00281	90		 npad	 1
$LN18@CL_SendCli:
  00282	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00285	c6 82 00 00 00
	00 00		 mov	 BYTE PTR _localtextcmd2[edx], 0
$LN13@CL_SendCli:

; 3216 : 		}
; 3217 : 	}
; 3218 : }

  0028c	5f		 pop	 edi
  0028d	5e		 pop	 esi
  0028e	5b		 pop	 ebx
  0028f	8b e5		 mov	 esp, ebp
  00291	5d		 pop	 ebp
  00292	c3		 ret	 0
_CL_SendClientCmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _TotalTextCmdPerTic
_TEXT	SEGMENT
_total$ = -8						; size = 4
_i$ = -4						; size = 4
_tic$ = 8						; size = 4
_TotalTextCmdPerTic PROC				; COMDAT

; 2593 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2594 : 	size_t i, total = 1; // num of textcmds in the tic (ntextcmd byte)

  00009	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _total$[ebp], 1

; 2595 : 
; 2596 : 	tic %= BACKUPTICS;

  00010	8b 45 08	 mov	 eax, DWORD PTR _tic$[ebp]
  00013	33 d2		 xor	 edx, edx
  00015	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001a	f7 f1		 div	 ecx
  0001c	89 55 08	 mov	 DWORD PTR _tic$[ebp], edx

; 2597 : 
; 2598 : 	for (i = 0; i < MAXPLAYERS; i++)

  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00026	eb 09		 jmp	 SHORT $LN4@TotalTextC
$LN2@TotalTextC:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@TotalTextC:
  00031	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00035	73 61		 jae	 SHORT $LN3@TotalTextC

; 2599 : 		if ((!i || playeringame[i]) && textcmds[tic][i][0])

  00037	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  0003b	74 0d		 je	 SHORT $LN6@TotalTextC
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00040	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00048	74 4c		 je	 SHORT $LN5@TotalTextC
$LN6@TotalTextC:
  0004a	8b 45 08	 mov	 eax, DWORD PTR _tic$[ebp]
  0004d	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00053	c1 e1 08	 shl	 ecx, 8
  00056	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  0005d	b8 01 00 00 00	 mov	 eax, 1
  00062	6b c8 00	 imul	 ecx, eax, 0
  00065	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00069	85 d2		 test	 edx, edx
  0006b	74 29		 je	 SHORT $LN5@TotalTextC

; 2600 : 			total += 2 + textcmds[tic][i][0]; // "+2" for size and playernum

  0006d	8b 45 08	 mov	 eax, DWORD PTR _tic$[ebp]
  00070	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00076	c1 e1 08	 shl	 ecx, 8
  00079	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	6b c8 00	 imul	 ecx, eax, 0
  00088	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0008c	8b 45 f8	 mov	 eax, DWORD PTR _total$[ebp]
  0008f	8d 4c 10 02	 lea	 ecx, DWORD PTR [eax+edx+2]
  00093	89 4d f8	 mov	 DWORD PTR _total$[ebp], ecx
$LN5@TotalTextC:
  00096	eb 90		 jmp	 SHORT $LN2@TotalTextC
$LN3@TotalTextC:

; 2601 : 
; 2602 : 	return total;

  00098	8b 45 f8	 mov	 eax, DWORD PTR _total$[ebp]

; 2603 : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
_TotalTextCmdPerTic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SendConsistency
_TEXT	SEGMENT
_i$ = -4						; size = 4
_node$ = 8						; size = 4
_SV_SendConsistency PROC				; COMDAT

; 2571 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2572 : 	INT32 i;
; 2573 : 
; 2574 : 	netbuffer->packettype = PT_CONSISTENCY;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0000e	c6 40 06 16	 mov	 BYTE PTR [eax+6], 22	; 00000016H

; 2575 : 	netbuffer->u.consistency.randomseed = P_GetRandIndex();

  00012	e8 00 00 00 00	 call	 _P_GetRandIndex
  00017	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  0001d	88 41 08	 mov	 BYTE PTR [ecx+8], al

; 2576 : 
; 2577 : 	if (gametype == GT_CTF)

  00020	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00027	83 f8 04	 cmp	 eax, 4
  0002a	75 11		 jne	 SHORT $LN5@SV_SendCon

; 2578 : 		handlectfconstuff(&netbuffer->u.consistency);

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00031	83 c0 08	 add	 eax, 8
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _handlectfconstuff
  0003a	83 c4 04	 add	 esp, 4
$LN5@SV_SendCon:

; 2579 : 
; 2580 : 	for (i = 0; i < MAXPLAYERS; i++)

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00044	eb 09		 jmp	 SHORT $LN4@SV_SendCon
$LN2@SV_SendCon:
  00046	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@SV_SendCon:
  0004f	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00053	7d 3a		 jge	 SHORT $LN3@SV_SendCon

; 2581 : 	{
; 2582 : 		if (playeringame[i])

  00055	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00058	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00060	74 2b		 je	 SHORT $LN6@SV_SendCon

; 2583 : 		{
; 2584 : 			writeconplayer(&netbuffer->u.consistency, i);

  00062	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00065	50		 push	 eax
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  0006c	83 c1 08	 add	 ecx, 8
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _writeconplayer
  00075	83 c4 08	 add	 esp, 8

; 2585 : 
; 2586 : 			HSendPacket(node, true, 0, (sizeof(cons_pak)));

  00078	68 33 02 00 00	 push	 563			; 00000233H
  0007d	6a 00		 push	 0
  0007f	6a 01		 push	 1
  00081	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _HSendPacket
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@SV_SendCon:

; 2587 : 		}
; 2588 : 	}

  0008d	eb b7		 jmp	 SHORT $LN2@SV_SendCon
$LN3@SV_SendCon:

; 2589 : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
_SV_SendConsistency ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _handlectfconstuff
_TEXT	SEGMENT
_con$ = 8						; size = 4
_handlectfconstuff PROC					; COMDAT

; 2518 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2519 : 	if (redflag)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _redflag, 0
  00010	0f 84 c0 00 00
	00		 je	 $LN2@handlectfc

; 2520 : 	{
; 2521 : 		// Flag is loose
; 2522 : 		if (redflag->fuse)

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _redflag
  0001b	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  00022	74 63		 je	 SHORT $LN4@handlectfc

; 2523 : 		{
; 2524 : 			con->rflagloose = 1;

  00024	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00027	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 2525 : 			con->rflagx = SHORT(redflag->x >> FRACBITS);

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _redflag
  00030	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00033	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00036	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00039	66 89 4a 13	 mov	 WORD PTR [edx+19], cx

; 2526 : 			con->rflagy = SHORT(redflag->y >> FRACBITS);

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _redflag
  00042	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00045	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00048	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  0004b	66 89 4a 15	 mov	 WORD PTR [edx+21], cx

; 2527 : 			con->rflagz = SHORT(redflag->z >> FRACBITS);

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR _redflag
  00054	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00057	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0005a	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  0005d	66 89 4a 17	 mov	 WORD PTR [edx+23], cx

; 2528 : 			con->rflags2 = LONG(redflag->flags2);

  00061	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _redflag
  0006a	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00070	89 50 0b	 mov	 DWORD PTR [eax+11], edx

; 2529 : 			con->rfuse = LONG(redflag->fuse);

  00073	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _redflag
  0007c	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00082	89 50 03	 mov	 DWORD PTR [eax+3], edx

; 2530 : 		}

  00085	eb 4d		 jmp	 SHORT $LN5@handlectfc
$LN4@handlectfc:

; 2531 : 		else // flag is at base
; 2532 : 		{
; 2533 : 			con->rflagloose = 0;

  00087	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  0008a	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 2534 : 			con->rflagx = SHORT(rflagpoint->x);

  0008e	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rflagpoint
  00097	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0009a	66 89 50 13	 mov	 WORD PTR [eax+19], dx

; 2535 : 			con->rflagy = SHORT(rflagpoint->y);

  0009e	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rflagpoint
  000a7	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  000ab	66 89 50 15	 mov	 WORD PTR [eax+21], dx

; 2536 : 			con->rflagz = SHORT(rflagpoint->z);

  000af	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  000b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rflagpoint
  000b8	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  000bc	66 89 50 17	 mov	 WORD PTR [eax+23], dx

; 2537 : 			con->rflags2 = 0;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  000c3	c7 40 0b 00 00
	00 00		 mov	 DWORD PTR [eax+11], 0

; 2538 : 			con->rfuse = 0;

  000ca	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  000cd	c7 40 03 00 00
	00 00		 mov	 DWORD PTR [eax+3], 0
$LN5@handlectfc:

; 2539 : 		}
; 2540 : 	}

  000d4	eb 07		 jmp	 SHORT $LN3@handlectfc
$LN2@handlectfc:

; 2541 : 	else // player has flag
; 2542 : 		con->rflagloose = 2;

  000d6	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  000d9	c6 40 01 02	 mov	 BYTE PTR [eax+1], 2
$LN3@handlectfc:

; 2543 : 
; 2544 : 	if (blueflag)

  000dd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _blueflag, 0
  000e4	0f 84 c0 00 00
	00		 je	 $LN6@handlectfc

; 2545 : 	{
; 2546 : 		// Flag is loose
; 2547 : 		if (blueflag->fuse)

  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _blueflag
  000ef	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  000f6	74 63		 je	 SHORT $LN8@handlectfc

; 2548 : 		{
; 2549 : 			con->bflagloose = 1;

  000f8	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  000fb	c6 40 02 01	 mov	 BYTE PTR [eax+2], 1

; 2550 : 			con->bflagx = SHORT(blueflag->x >> FRACBITS);

  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _blueflag
  00104	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00107	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0010a	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  0010d	66 89 4a 19	 mov	 WORD PTR [edx+25], cx

; 2551 : 			con->bflagy = SHORT(blueflag->y >> FRACBITS);

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR _blueflag
  00116	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00119	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0011c	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  0011f	66 89 4a 1b	 mov	 WORD PTR [edx+27], cx

; 2552 : 			con->bflagz = SHORT(blueflag->z >> FRACBITS);

  00123	a1 00 00 00 00	 mov	 eax, DWORD PTR _blueflag
  00128	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0012b	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0012e	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00131	66 89 4a 1d	 mov	 WORD PTR [edx+29], cx

; 2553 : 			con->bflags2 = LONG(blueflag->flags2);

  00135	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _blueflag
  0013e	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00144	89 50 0f	 mov	 DWORD PTR [eax+15], edx

; 2554 : 			con->bfuse = LONG(blueflag->fuse);

  00147	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  0014a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _blueflag
  00150	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00156	89 50 07	 mov	 DWORD PTR [eax+7], edx

; 2555 : 		}

  00159	eb 4d		 jmp	 SHORT $LN9@handlectfc
$LN8@handlectfc:

; 2556 : 		else // flag is at base
; 2557 : 		{
; 2558 : 			con->bflagloose = 0;

  0015b	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  0015e	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 2559 : 			con->bflagx = SHORT(bflagpoint->x);

  00162	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00165	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bflagpoint
  0016b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0016e	66 89 50 19	 mov	 WORD PTR [eax+25], dx

; 2560 : 			con->bflagy = SHORT(bflagpoint->y);

  00172	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bflagpoint
  0017b	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  0017f	66 89 50 1b	 mov	 WORD PTR [eax+27], dx

; 2561 : 			con->bflagz = SHORT(bflagpoint->z);

  00183	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bflagpoint
  0018c	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  00190	66 89 50 1d	 mov	 WORD PTR [eax+29], dx

; 2562 : 			con->bflags2 = 0;

  00194	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00197	c7 40 0f 00 00
	00 00		 mov	 DWORD PTR [eax+15], 0

; 2563 : 			con->bfuse = 0;

  0019e	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  001a1	c7 40 07 00 00
	00 00		 mov	 DWORD PTR [eax+7], 0
$LN9@handlectfc:

; 2564 : 		}
; 2565 : 	}

  001a8	eb 07		 jmp	 SHORT $LN7@handlectfc
$LN6@handlectfc:

; 2566 : 	else // player has flag
; 2567 : 		con->bflagloose = 2;

  001aa	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  001ad	c6 40 02 02	 mov	 BYTE PTR [eax+2], 2
$LN7@handlectfc:

; 2568 : }

  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	5b		 pop	 ebx
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
_handlectfconstuff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _readconplayer
_TEXT	SEGMENT
_newflag$1 = -16					; size = 4
_newflag$2 = -12					; size = 4
_savedmo$ = -8						; size = 4
_i$ = -4						; size = 4
_con$ = 8						; size = 4
_playernum$ = 12					; size = 4
_readconplayer PROC					; COMDAT

; 2332 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2333 : 	size_t i;
; 2334 : 	mobj_t *savedmo = players[playernum].mo;

  00009	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00010	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00016	89 4d f8	 mov	 DWORD PTR _savedmo$[ebp], ecx

; 2335 : 
; 2336 : 	//We get a packet for each player in game.
; 2337 : 	P_SetRandIndex(con->randomseed); // New random index

  00019	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  0001c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 _P_SetRandIndex
  00025	83 c4 04	 add	 esp, 4

; 2338 : 
; 2339 : 	//Restore CTF information
; 2340 : 	if (gametype == GT_CTF)

  00028	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0002f	83 f8 04	 cmp	 eax, 4
  00032	0f 85 48 01 00
	00		 jne	 $LN9@readconpla

; 2341 : 	{
; 2342 : 		// Remove old flags.
; 2343 : 		if (redflag)

  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _redflag, 0
  0003f	74 1d		 je	 SHORT $LN6@readconpla

; 2344 : 		{
; 2345 : 			P_SetMobjState(redflag, S_DISS);

  00041	68 4f 06 00 00	 push	 1615			; 0000064fH
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR _redflag
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _P_SetMobjState
  00051	83 c4 08	 add	 esp, 8

; 2346 : 			redflag = NULL;

  00054	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _redflag, 0
$LN6@readconpla:

; 2347 : 		}
; 2348 : 		if (blueflag)

  0005e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _blueflag, 0
  00065	74 1d		 je	 SHORT $LN7@readconpla

; 2349 : 		{
; 2350 : 			P_SetMobjState(blueflag, S_DISS);

  00067	68 4f 06 00 00	 push	 1615			; 0000064fH
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR _blueflag
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _P_SetMobjState
  00077	83 c4 08	 add	 esp, 8

; 2351 : 			blueflag = NULL;

  0007a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _blueflag, 0
$LN7@readconpla:

; 2352 : 		}
; 2353 : 
; 2354 : 		// Spawn the flags if players aren't carrying them.
; 2355 : 		if (con->rflagloose != 2)

  00084	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00087	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0008b	83 f9 02	 cmp	 ecx, 2
  0008e	74 72		 je	 SHORT $LN8@readconpla

; 2356 : 		{
; 2357 : 			mobj_t *newflag = P_SpawnMobj(con->rflagx << FRACBITS, con->rflagy << FRACBITS, con->rflagz << FRACBITS, MT_REDFLAG);

  00090	6a 34		 push	 52			; 00000034H
  00092	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00095	0f bf 48 17	 movsx	 ecx, WORD PTR [eax+23]
  00099	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0009c	51		 push	 ecx
  0009d	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  000a0	0f bf 42 15	 movsx	 eax, WORD PTR [edx+21]
  000a4	c1 e0 10	 shl	 eax, 16			; 00000010H
  000a7	50		 push	 eax
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000ab	0f bf 51 13	 movsx	 edx, WORD PTR [ecx+19]
  000af	c1 e2 10	 shl	 edx, 16			; 00000010H
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 _P_SpawnMobj
  000b8	83 c4 10	 add	 esp, 16			; 00000010H
  000bb	89 45 f4	 mov	 DWORD PTR _newflag$2[ebp], eax

; 2358 : 			newflag->flags |= MF_SPECIAL;

  000be	8b 45 f4	 mov	 eax, DWORD PTR _newflag$2[ebp]
  000c1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000c4	83 c9 01	 or	 ecx, 1
  000c7	8b 55 f4	 mov	 edx, DWORD PTR _newflag$2[ebp]
  000ca	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2359 : 			newflag->flags2 = con->rflags2;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _newflag$2[ebp]
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000d3	8b 51 0b	 mov	 edx, DWORD PTR [ecx+11]
  000d6	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 2360 : 			newflag->fuse = con->rfuse;

  000dc	8b 45 f4	 mov	 eax, DWORD PTR _newflag$2[ebp]
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000e2	8b 51 03	 mov	 edx, DWORD PTR [ecx+3]
  000e5	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 2361 : 			newflag->spawnpoint = rflagpoint;

  000eb	8b 45 f4	 mov	 eax, DWORD PTR _newflag$2[ebp]
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rflagpoint
  000f4	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 2362 : 			redflag = newflag;

  000fa	8b 45 f4	 mov	 eax, DWORD PTR _newflag$2[ebp]
  000fd	a3 00 00 00 00	 mov	 DWORD PTR _redflag, eax
$LN8@readconpla:

; 2363 : 		}
; 2364 : 
; 2365 : 		if (con->bflagloose != 2)

  00102	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00105	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00109	83 f9 02	 cmp	 ecx, 2
  0010c	74 72		 je	 SHORT $LN9@readconpla

; 2366 : 		{
; 2367 : 			mobj_t *newflag = P_SpawnMobj(con->bflagx << FRACBITS, con->bflagy << FRACBITS, con->bflagz << FRACBITS, MT_BLUEFLAG);

  0010e	6a 35		 push	 53			; 00000035H
  00110	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00113	0f bf 48 1d	 movsx	 ecx, WORD PTR [eax+29]
  00117	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0011a	51		 push	 ecx
  0011b	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  0011e	0f bf 42 1b	 movsx	 eax, WORD PTR [edx+27]
  00122	c1 e0 10	 shl	 eax, 16			; 00000010H
  00125	50		 push	 eax
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00129	0f bf 51 19	 movsx	 edx, WORD PTR [ecx+25]
  0012d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00130	52		 push	 edx
  00131	e8 00 00 00 00	 call	 _P_SpawnMobj
  00136	83 c4 10	 add	 esp, 16			; 00000010H
  00139	89 45 f0	 mov	 DWORD PTR _newflag$1[ebp], eax

; 2368 : 			newflag->flags |= MF_SPECIAL;

  0013c	8b 45 f0	 mov	 eax, DWORD PTR _newflag$1[ebp]
  0013f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00142	83 c9 01	 or	 ecx, 1
  00145	8b 55 f0	 mov	 edx, DWORD PTR _newflag$1[ebp]
  00148	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2369 : 			newflag->flags2 = con->bflags2;

  0014b	8b 45 f0	 mov	 eax, DWORD PTR _newflag$1[ebp]
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00151	8b 51 0f	 mov	 edx, DWORD PTR [ecx+15]
  00154	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 2370 : 			newflag->fuse = con->bfuse;

  0015a	8b 45 f0	 mov	 eax, DWORD PTR _newflag$1[ebp]
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00160	8b 51 07	 mov	 edx, DWORD PTR [ecx+7]
  00163	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 2371 : 			newflag->spawnpoint = bflagpoint;

  00169	8b 45 f0	 mov	 eax, DWORD PTR _newflag$1[ebp]
  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bflagpoint
  00172	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 2372 : 			blueflag = newflag;

  00178	8b 45 f0	 mov	 eax, DWORD PTR _newflag$1[ebp]
  0017b	a3 00 00 00 00	 mov	 DWORD PTR _blueflag, eax
$LN9@readconpla:

; 2373 : 		}
; 2374 : 	}
; 2375 : 
; 2376 : 	if (!playeringame[playernum])

  00180	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00183	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0018b	75 05		 jne	 SHORT $LN10@readconpla

; 2377 : 		return;

  0018d	e9 87 0a 00 00	 jmp	 $LN1@readconpla
$LN10@readconpla:

; 2378 : 
; 2379 : 	//Tranfer player information.
; 2380 : 	players[playernum].playerstate = (playerstate_t)con->playerstate;

  00192	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00195	0f b6 48 20	 movzx	 ecx, BYTE PTR [eax+32]
  00199	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  001a0	89 8a 04 00 00
	00		 mov	 DWORD PTR _players[edx+4], ecx

; 2381 : 	G_MoveTiccmd(&players[playernum].cmd, &con->cmd, 1);

  001a6	6a 01		 push	 1
  001a8	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  001ab	83 c0 21	 add	 eax, 33			; 00000021H
  001ae	50		 push	 eax
  001af	69 4d 0c fc 01
	00 00		 imul	 ecx, DWORD PTR _playernum$[ebp], 508
  001b6	81 c1 08 00 00
	00		 add	 ecx, OFFSET _players+8
  001bc	51		 push	 ecx
  001bd	e8 00 00 00 00	 call	 _G_MoveTiccmd
  001c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2382 : 	players[playernum].viewz = LONG(con->viewz);

  001c5	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  001cc	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  001cf	8b 51 29	 mov	 edx, DWORD PTR [ecx+41]
  001d2	89 90 10 00 00
	00		 mov	 DWORD PTR _players[eax+16], edx

; 2383 : 	players[playernum].viewheight = LONG(con->viewheight);

  001d8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  001df	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  001e2	8b 51 2d	 mov	 edx, DWORD PTR [ecx+45]
  001e5	89 90 14 00 00
	00		 mov	 DWORD PTR _players[eax+20], edx

; 2384 : 	players[playernum].deltaviewheight = LONG(con->deltaviewheight);

  001eb	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  001f2	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  001f5	8b 51 31	 mov	 edx, DWORD PTR [ecx+49]
  001f8	89 90 18 00 00
	00		 mov	 DWORD PTR _players[eax+24], edx

; 2385 : 	players[playernum].bob = LONG(con->bob);

  001fe	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00205	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00208	8b 51 35	 mov	 edx, DWORD PTR [ecx+53]
  0020b	89 90 1c 00 00
	00		 mov	 DWORD PTR _players[eax+28], edx

; 2386 : 	players[playernum].aiming = (angle_t)LONG(con->aiming);

  00211	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00218	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0021b	8b 51 39	 mov	 edx, DWORD PTR [ecx+57]
  0021e	89 90 20 00 00
	00		 mov	 DWORD PTR _players[eax+32], edx

; 2387 : 	players[playernum].awayviewaiming = (angle_t)LONG(con->awayviewaiming);

  00224	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0022b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0022e	8b 51 3d	 mov	 edx, DWORD PTR [ecx+61]
  00231	89 90 24 00 00
	00		 mov	 DWORD PTR _players[eax+36], edx

; 2388 : 	players[playernum].health = LONG(con->phealth);

  00237	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0023e	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00241	8b 51 41	 mov	 edx, DWORD PTR [ecx+65]
  00244	89 90 28 00 00
	00		 mov	 DWORD PTR _players[eax+40], edx

; 2389 : 	players[playernum].currentweapon = LONG(con->currentweapon);

  0024a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00251	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00254	8b 51 45	 mov	 edx, DWORD PTR [ecx+69]
  00257	89 90 2c 00 00
	00		 mov	 DWORD PTR _players[eax+44], edx

; 2390 : 	players[playernum].ringweapons = LONG(con->ringweapons);

  0025d	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00264	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00267	8b 51 49	 mov	 edx, DWORD PTR [ecx+73]
  0026a	89 90 30 00 00
	00		 mov	 DWORD PTR _players[eax+48], edx

; 2391 : 	players[playernum].tossstrength = LONG(con->tossstrength);

  00270	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00277	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0027a	8b 51 4d	 mov	 edx, DWORD PTR [ecx+77]
  0027d	89 90 34 00 00
	00		 mov	 DWORD PTR _players[eax+52], edx

; 2392 : 
; 2393 : 	for (i = 0; i < NUMPOWERS; i++)

  00283	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0028a	eb 09		 jmp	 SHORT $LN4@readconpla
$LN2@readconpla:
  0028c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0028f	83 c0 01	 add	 eax, 1
  00292	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@readconpla:
  00295	83 7d fc 1d	 cmp	 DWORD PTR _i$[ebp], 29	; 0000001dH
  00299	73 1d		 jae	 SHORT $LN3@readconpla

; 2394 : 		players[playernum].powers[i] = LONG(con->powers[i]);

  0029b	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  002a2	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002a5	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002a8	8b 75 08	 mov	 esi, DWORD PTR _con$[ebp]
  002ab	8b 54 96 51	 mov	 edx, DWORD PTR [esi+edx*4+81]
  002af	89 94 88 38 00
	00 00		 mov	 DWORD PTR _players[eax+ecx*4+56], edx
  002b6	eb d4		 jmp	 SHORT $LN2@readconpla
$LN3@readconpla:

; 2395 : 
; 2396 : 	players[playernum].pflags = (pflags_t)LONG(con->pflags);

  002b8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  002bf	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  002c2	8b 91 c5 00 00
	00		 mov	 edx, DWORD PTR [ecx+197]
  002c8	89 90 ac 00 00
	00		 mov	 DWORD PTR _players[eax+172], edx

; 2397 : 	players[playernum].bonuscount = LONG(con->bonuscount);

  002ce	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  002d5	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  002d8	8b 91 c9 00 00
	00		 mov	 edx, DWORD PTR [ecx+201]
  002de	89 90 b0 00 00
	00		 mov	 DWORD PTR _players[eax+176], edx

; 2398 : 	players[playernum].skincolor = LONG(con->skincolor);

  002e4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  002eb	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  002ee	8b 91 cd 00 00
	00		 mov	 edx, DWORD PTR [ecx+205]
  002f4	89 90 b4 00 00
	00		 mov	 DWORD PTR _players[eax+180], edx

; 2399 : 	players[playernum].skin = LONG(con->skin);

  002fa	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00301	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00304	8b 91 d1 00 00
	00		 mov	 edx, DWORD PTR [ecx+209]
  0030a	89 90 b8 00 00
	00		 mov	 DWORD PTR _players[eax+184], edx

; 2400 : 	players[playernum].score = (UINT32)LONG(con->score);

  00310	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00317	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0031a	8b 91 d5 00 00
	00		 mov	 edx, DWORD PTR [ecx+213]
  00320	89 90 bc 00 00
	00		 mov	 DWORD PTR _players[eax+188], edx

; 2401 : 	players[playernum].dashspeed = LONG(con->dashspeed);

  00326	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0032d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00330	8b 91 d9 00 00
	00		 mov	 edx, DWORD PTR [ecx+217]
  00336	89 90 c0 00 00
	00		 mov	 DWORD PTR _players[eax+192], edx

; 2402 : 	players[playernum].normalspeed = LONG(con->normalspeed);

  0033c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00343	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00346	8b 91 dd 00 00
	00		 mov	 edx, DWORD PTR [ecx+221]
  0034c	89 90 c4 00 00
	00		 mov	 DWORD PTR _players[eax+196], edx

; 2403 : 	players[playernum].runspeed = LONG(con->runspeed);

  00352	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0035c	8b 91 e1 00 00
	00		 mov	 edx, DWORD PTR [ecx+225]
  00362	89 90 c8 00 00
	00		 mov	 DWORD PTR _players[eax+200], edx

; 2404 : 	players[playernum].thrustfactor = LONG(con->thrustfactor);

  00368	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0036f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00372	8b 91 e5 00 00
	00		 mov	 edx, DWORD PTR [ecx+229]
  00378	89 90 cc 00 00
	00		 mov	 DWORD PTR _players[eax+204], edx

; 2405 : 	players[playernum].accelstart = LONG(con->accelstart);

  0037e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00385	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00388	8b 91 e9 00 00
	00		 mov	 edx, DWORD PTR [ecx+233]
  0038e	89 90 d0 00 00
	00		 mov	 DWORD PTR _players[eax+208], edx

; 2406 : 	players[playernum].acceleration = LONG(con->acceleration);

  00394	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0039b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0039e	8b 91 ed 00 00
	00		 mov	 edx, DWORD PTR [ecx+237]
  003a4	89 90 d4 00 00
	00		 mov	 DWORD PTR _players[eax+212], edx

; 2407 : 	players[playernum].charability = LONG(con->charability);

  003aa	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  003b1	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  003b4	8b 91 f1 00 00
	00		 mov	 edx, DWORD PTR [ecx+241]
  003ba	89 90 d8 00 00
	00		 mov	 DWORD PTR _players[eax+216], edx

; 2408 : 	players[playernum].charability2 = LONG(con->charability2);

  003c0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  003c7	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  003ca	8b 91 f5 00 00
	00		 mov	 edx, DWORD PTR [ecx+245]
  003d0	89 90 dc 00 00
	00		 mov	 DWORD PTR _players[eax+220], edx

; 2409 : 	players[playernum].charflags = (UINT32)LONG(con->charflags);

  003d6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  003dd	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  003e0	8b 91 f9 00 00
	00		 mov	 edx, DWORD PTR [ecx+249]
  003e6	89 90 e0 00 00
	00		 mov	 DWORD PTR _players[eax+224], edx

; 2410 : 	players[playernum].thokitem = (mobjtype_t)LONG(con->thokitem);

  003ec	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  003f3	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  003f6	8b 91 fd 00 00
	00		 mov	 edx, DWORD PTR [ecx+253]
  003fc	89 90 e4 00 00
	00		 mov	 DWORD PTR _players[eax+228], edx

; 2411 : 	players[playernum].spinitem = (mobjtype_t)LONG(con->spinitem);

  00402	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00409	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0040c	8b 91 01 01 00
	00		 mov	 edx, DWORD PTR [ecx+257]
  00412	89 90 e8 00 00
	00		 mov	 DWORD PTR _players[eax+232], edx

; 2412 : 	players[playernum].actionspd = LONG(con->actionspd);

  00418	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0041f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00422	8b 91 05 01 00
	00		 mov	 edx, DWORD PTR [ecx+261]
  00428	89 90 ec 00 00
	00		 mov	 DWORD PTR _players[eax+236], edx

; 2413 : 	players[playernum].mindash = LONG(con->mindash);

  0042e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00435	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00438	8b 91 09 01 00
	00		 mov	 edx, DWORD PTR [ecx+265]
  0043e	89 90 f0 00 00
	00		 mov	 DWORD PTR _players[eax+240], edx

; 2414 : 	players[playernum].maxdash = LONG(con->maxdash);

  00444	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0044b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0044e	8b 91 0d 01 00
	00		 mov	 edx, DWORD PTR [ecx+269]
  00454	89 90 f4 00 00
	00		 mov	 DWORD PTR _players[eax+244], edx

; 2415 : 	players[playernum].jumpfactor = LONG(con->jumpfactor);

  0045a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00461	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00464	8b 91 11 01 00
	00		 mov	 edx, DWORD PTR [ecx+273]
  0046a	89 90 f8 00 00
	00		 mov	 DWORD PTR _players[eax+248], edx

; 2416 : #ifndef TRANSFIX
; 2417 : 	players[playernum].starttranscolor = LONG(con->starttranscolor);
; 2418 : #endif
; 2419 : 	players[playernum].prefcolor = LONG(con->prefcolor);

  00470	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00477	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0047a	8b 91 15 01 00
	00		 mov	 edx, DWORD PTR [ecx+277]
  00480	89 90 fc 00 00
	00		 mov	 DWORD PTR _players[eax+252], edx

; 2420 : 	players[playernum].lives = LONG(con->lives);

  00486	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00490	8b 91 19 01 00
	00		 mov	 edx, DWORD PTR [ecx+281]
  00496	89 90 00 01 00
	00		 mov	 DWORD PTR _players[eax+256], edx

; 2421 : 	players[playernum].continues = LONG(con->continues);

  0049c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  004a3	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004a6	8b 91 1d 01 00
	00		 mov	 edx, DWORD PTR [ecx+285]
  004ac	89 90 04 01 00
	00		 mov	 DWORD PTR _players[eax+260], edx

; 2422 : 	players[playernum].xtralife = LONG(con->xtralife);

  004b2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  004b9	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004bc	8b 91 21 01 00
	00		 mov	 edx, DWORD PTR [ecx+289]
  004c2	89 90 08 01 00
	00		 mov	 DWORD PTR _players[eax+264], edx

; 2423 : 	players[playernum].speed = LONG(con->speed);

  004c8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  004cf	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004d2	8b 91 25 01 00
	00		 mov	 edx, DWORD PTR [ecx+293]
  004d8	89 90 0c 01 00
	00		 mov	 DWORD PTR _players[eax+268], edx

; 2424 : 	players[playernum].jumping = LONG(con->jumping);

  004de	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  004e5	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004e8	8b 91 29 01 00
	00		 mov	 edx, DWORD PTR [ecx+297]
  004ee	89 90 10 01 00
	00		 mov	 DWORD PTR _players[eax+272], edx

; 2425 : 	players[playernum].secondjump = con->secondjump;

  004f4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  004fb	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004fe	8a 91 2d 01 00
	00		 mov	 dl, BYTE PTR [ecx+301]
  00504	88 90 14 01 00
	00		 mov	 BYTE PTR _players[eax+276], dl

; 2426 : 	players[playernum].fly1 = LONG(con->fly1);

  0050a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00511	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00514	8b 91 2e 01 00
	00		 mov	 edx, DWORD PTR [ecx+302]
  0051a	89 90 18 01 00
	00		 mov	 DWORD PTR _players[eax+280], edx

; 2427 : 	players[playernum].scoreadd = (UINT32)LONG(con->scoreadd);

  00520	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00527	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0052a	8b 91 32 01 00
	00		 mov	 edx, DWORD PTR [ecx+306]
  00530	89 90 1c 01 00
	00		 mov	 DWORD PTR _players[eax+284], edx

; 2428 : 	players[playernum].glidetime = (tic_t)LONG(con->glidetime);

  00536	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0053d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00540	8b 91 36 01 00
	00		 mov	 edx, DWORD PTR [ecx+310]
  00546	89 90 20 01 00
	00		 mov	 DWORD PTR _players[eax+288], edx

; 2429 : 	players[playernum].climbing = LONG(con->climbing);

  0054c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00553	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00556	8b 91 3a 01 00
	00		 mov	 edx, DWORD PTR [ecx+314]
  0055c	89 90 24 01 00
	00		 mov	 DWORD PTR _players[eax+292], edx

; 2430 : 	players[playernum].deadtimer = LONG(con->deadtimer);

  00562	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00569	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0056c	8b 91 3e 01 00
	00		 mov	 edx, DWORD PTR [ecx+318]
  00572	89 90 28 01 00
	00		 mov	 DWORD PTR _players[eax+296], edx

; 2431 : 	players[playernum].splish = LONG(con->splish);

  00578	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0057f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00582	8b 91 42 01 00
	00		 mov	 edx, DWORD PTR [ecx+322]
  00588	89 90 2c 01 00
	00		 mov	 DWORD PTR _players[eax+300], edx

; 2432 : 	players[playernum].exiting = (tic_t)LONG(con->exiting);

  0058e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00595	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00598	8b 91 46 01 00
	00		 mov	 edx, DWORD PTR [ecx+326]
  0059e	89 90 30 01 00
	00		 mov	 DWORD PTR _players[eax+304], edx

; 2433 : 	players[playernum].blackow = LONG(con->blackow);

  005a4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  005ab	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005ae	8b 91 4a 01 00
	00		 mov	 edx, DWORD PTR [ecx+330]
  005b4	89 90 34 01 00
	00		 mov	 DWORD PTR _players[eax+308], edx

; 2434 : 	players[playernum].homing = con->homing;

  005ba	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  005c1	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005c4	8a 91 4e 01 00
	00		 mov	 dl, BYTE PTR [ecx+334]
  005ca	88 90 38 01 00
	00		 mov	 BYTE PTR _players[eax+312], dl

; 2435 : 	players[playernum].cmomx = LONG(con->cmomx);

  005d0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  005d7	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005da	8b 91 4f 01 00
	00		 mov	 edx, DWORD PTR [ecx+335]
  005e0	89 90 3c 01 00
	00		 mov	 DWORD PTR _players[eax+316], edx

; 2436 : 	players[playernum].cmomy = LONG(con->cmomy);

  005e6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  005ed	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005f0	8b 91 53 01 00
	00		 mov	 edx, DWORD PTR [ecx+339]
  005f6	89 90 40 01 00
	00		 mov	 DWORD PTR _players[eax+320], edx

; 2437 : 	players[playernum].rmomx = LONG(con->rmomx);

  005fc	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00603	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00606	8b 91 57 01 00
	00		 mov	 edx, DWORD PTR [ecx+343]
  0060c	89 90 44 01 00
	00		 mov	 DWORD PTR _players[eax+324], edx

; 2438 : 	players[playernum].rmomy = LONG(con->rmomy);

  00612	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00619	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0061c	8b 91 5b 01 00
	00		 mov	 edx, DWORD PTR [ecx+347]
  00622	89 90 48 01 00
	00		 mov	 DWORD PTR _players[eax+328], edx

; 2439 : 	players[playernum].numboxes = LONG(con->numboxes);

  00628	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0062f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00632	8b 91 5f 01 00
	00		 mov	 edx, DWORD PTR [ecx+351]
  00638	89 90 4c 01 00
	00		 mov	 DWORD PTR _players[eax+332], edx

; 2440 : 	players[playernum].totalring = LONG(con->totalring);

  0063e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00645	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00648	8b 91 63 01 00
	00		 mov	 edx, DWORD PTR [ecx+355]
  0064e	89 90 50 01 00
	00		 mov	 DWORD PTR _players[eax+336], edx

; 2441 : 	players[playernum].realtime = (tic_t)LONG(con->realtime);

  00654	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0065b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0065e	8b 91 67 01 00
	00		 mov	 edx, DWORD PTR [ecx+359]
  00664	89 90 54 01 00
	00		 mov	 DWORD PTR _players[eax+340], edx

; 2442 : 	players[playernum].racescore = (UINT32)LONG(con->racescore);

  0066a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00671	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00674	8b 91 6b 01 00
	00		 mov	 edx, DWORD PTR [ecx+363]
  0067a	89 90 58 01 00
	00		 mov	 DWORD PTR _players[eax+344], edx

; 2443 : 	players[playernum].laps = (UINT32)LONG(con->laps);

  00680	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00687	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0068a	8b 91 6f 01 00
	00		 mov	 edx, DWORD PTR [ecx+367]
  00690	89 90 5c 01 00
	00		 mov	 DWORD PTR _players[eax+348], edx

; 2444 : 	players[playernum].ctfteam = LONG(con->ctfteam);

  00696	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0069d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006a0	8b 91 73 01 00
	00		 mov	 edx, DWORD PTR [ecx+371]
  006a6	89 90 60 01 00
	00		 mov	 DWORD PTR _players[eax+352], edx

; 2445 : 	players[playernum].gotflag = (UINT16)SHORT(con->gotflag);

  006ac	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  006b3	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006b6	66 8b 91 77 01
	00 00		 mov	 dx, WORD PTR [ecx+375]
  006bd	66 89 90 64 01
	00 00		 mov	 WORD PTR _players[eax+356], dx

; 2446 : 	players[playernum].dbginfo = LONG(con->dbginfo);

  006c4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  006cb	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006ce	8b 91 79 01 00
	00		 mov	 edx, DWORD PTR [ecx+377]
  006d4	89 90 68 01 00
	00		 mov	 DWORD PTR _players[eax+360], edx

; 2447 : 	players[playernum].emeraldhunt = LONG(con->emeraldhunt);

  006da	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  006e1	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006e4	8b 91 7d 01 00
	00		 mov	 edx, DWORD PTR [ecx+381]
  006ea	89 90 6c 01 00
	00		 mov	 DWORD PTR _players[eax+364], edx

; 2448 : 	players[playernum].weapondelay = LONG(con->weapondelay);

  006f0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  006f7	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006fa	8b 91 81 01 00
	00		 mov	 edx, DWORD PTR [ecx+385]
  00700	89 90 70 01 00
	00		 mov	 DWORD PTR _players[eax+368], edx

; 2449 : 	players[playernum].tossdelay = LONG(con->tossdelay);

  00706	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0070d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00710	8b 91 85 01 00
	00		 mov	 edx, DWORD PTR [ecx+389]
  00716	89 90 74 01 00
	00		 mov	 DWORD PTR _players[eax+372], edx

; 2450 : 	players[playernum].shielddelay = LONG(con->shielddelay);

  0071c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00723	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00726	8b 91 89 01 00
	00		 mov	 edx, DWORD PTR [ecx+393]
  0072c	89 90 78 01 00
	00		 mov	 DWORD PTR _players[eax+376], edx

; 2451 : 	players[playernum].taunttimer = (tic_t)LONG(con->taunttimer);

  00732	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00739	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0073c	8b 91 8d 01 00
	00		 mov	 edx, DWORD PTR [ecx+397]
  00742	89 90 7c 01 00
	00		 mov	 DWORD PTR _players[eax+380], edx

; 2452 : 	players[playernum].starpostx = LONG(con->starpostx);

  00748	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0074f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00752	8b 91 91 01 00
	00		 mov	 edx, DWORD PTR [ecx+401]
  00758	89 90 80 01 00
	00		 mov	 DWORD PTR _players[eax+384], edx

; 2453 : 	players[playernum].starposty = LONG(con->starposty);

  0075e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00765	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00768	8b 91 95 01 00
	00		 mov	 edx, DWORD PTR [ecx+405]
  0076e	89 90 84 01 00
	00		 mov	 DWORD PTR _players[eax+388], edx

; 2454 : 	players[playernum].starpostz = LONG(con->starpostz);

  00774	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0077b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0077e	8b 91 99 01 00
	00		 mov	 edx, DWORD PTR [ecx+409]
  00784	89 90 88 01 00
	00		 mov	 DWORD PTR _players[eax+392], edx

; 2455 : 	players[playernum].starpostnum = LONG(con->starpostnum);

  0078a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00791	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00794	8b 91 9d 01 00
	00		 mov	 edx, DWORD PTR [ecx+413]
  0079a	89 90 8c 01 00
	00		 mov	 DWORD PTR _players[eax+396], edx

; 2456 : 	players[playernum].starposttime = (tic_t)LONG(con->starposttime);

  007a0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  007a7	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007aa	8b 91 a1 01 00
	00		 mov	 edx, DWORD PTR [ecx+417]
  007b0	89 90 90 01 00
	00		 mov	 DWORD PTR _players[eax+400], edx

; 2457 : 	players[playernum].starpostangle = (angle_t)LONG(con->starpostangle);

  007b6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  007bd	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007c0	8b 91 a5 01 00
	00		 mov	 edx, DWORD PTR [ecx+421]
  007c6	89 90 94 01 00
	00		 mov	 DWORD PTR _players[eax+404], edx

; 2458 : 	players[playernum].starpostbit = (UINT32)LONG(con->starpostbit);

  007cc	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  007d3	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007d6	8b 91 a9 01 00
	00		 mov	 edx, DWORD PTR [ecx+425]
  007dc	89 90 98 01 00
	00		 mov	 DWORD PTR _players[eax+408], edx

; 2459 : 	players[playernum].angle_pos = (angle_t)LONG(con->angle_pos);

  007e2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  007e9	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007ec	8b 91 ad 01 00
	00		 mov	 edx, DWORD PTR [ecx+429]
  007f2	89 90 9c 01 00
	00		 mov	 DWORD PTR _players[eax+412], edx

; 2460 : 	players[playernum].old_angle_pos = (angle_t)LONG(con->old_angle_pos);

  007f8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  007ff	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00802	8b 91 b1 01 00
	00		 mov	 edx, DWORD PTR [ecx+433]
  00808	89 90 a0 01 00
	00		 mov	 DWORD PTR _players[eax+416], edx

; 2461 : 	players[playernum].bumpertime = (tic_t)LONG(con->bumpertime);

  0080e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00815	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00818	8b 91 b5 01 00
	00		 mov	 edx, DWORD PTR [ecx+437]
  0081e	89 90 ac 01 00
	00		 mov	 DWORD PTR _players[eax+428], edx

; 2462 : 	players[playernum].flyangle = LONG(con->flyangle);

  00824	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0082b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0082e	8b 91 b9 01 00
	00		 mov	 edx, DWORD PTR [ecx+441]
  00834	89 90 b0 01 00
	00		 mov	 DWORD PTR _players[eax+432], edx

; 2463 : 	players[playernum].drilltimer = (tic_t)LONG(con->drilltimer);

  0083a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00841	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00844	8b 91 bd 01 00
	00		 mov	 edx, DWORD PTR [ecx+445]
  0084a	89 90 b4 01 00
	00		 mov	 DWORD PTR _players[eax+436], edx

; 2464 : 	players[playernum].linkcount = LONG(con->linkcount);

  00850	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00857	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0085a	8b 91 c1 01 00
	00		 mov	 edx, DWORD PTR [ecx+449]
  00860	89 90 b8 01 00
	00		 mov	 DWORD PTR _players[eax+440], edx

; 2465 : 	players[playernum].linktimer = (tic_t)LONG(con->linktimer);

  00866	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0086d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00870	8b 91 c5 01 00
	00		 mov	 edx, DWORD PTR [ecx+453]
  00876	89 90 bc 01 00
	00		 mov	 DWORD PTR _players[eax+444], edx

; 2466 : 	players[playernum].anotherflyangle = LONG(con->anotherflyangle);

  0087c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00883	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00886	8b 91 c9 01 00
	00		 mov	 edx, DWORD PTR [ecx+457]
  0088c	89 90 c0 01 00
	00		 mov	 DWORD PTR _players[eax+448], edx

; 2467 : 	players[playernum].nightstime = (tic_t)LONG(con->nightstime);

  00892	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00899	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0089c	8b 91 cd 01 00
	00		 mov	 edx, DWORD PTR [ecx+461]
  008a2	89 90 c4 01 00
	00		 mov	 DWORD PTR _players[eax+452], edx

; 2468 : 	players[playernum].drillmeter = LONG(con->drillmeter);

  008a8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  008af	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  008b2	8b 91 d1 01 00
	00		 mov	 edx, DWORD PTR [ecx+465]
  008b8	89 90 c8 01 00
	00		 mov	 DWORD PTR _players[eax+456], edx

; 2469 : 	players[playernum].drilldelay = con->drilldelay;

  008be	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  008c5	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  008c8	8a 91 d5 01 00
	00		 mov	 dl, BYTE PTR [ecx+469]
  008ce	88 90 cc 01 00
	00		 mov	 BYTE PTR _players[eax+460], dl

; 2470 : 	players[playernum].bonustime = con->bonustime;

  008d4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  008db	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  008de	8a 91 d6 01 00
	00		 mov	 dl, BYTE PTR [ecx+470]
  008e4	88 90 cd 01 00
	00		 mov	 BYTE PTR _players[eax+461], dl

; 2471 : 	players[playernum].mare = con->mare;

  008ea	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  008f1	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  008f4	8a 91 d7 01 00
	00		 mov	 dl, BYTE PTR [ecx+471]
  008fa	88 90 d4 01 00
	00		 mov	 BYTE PTR _players[eax+468], dl

; 2472 : 	players[playernum].lastsidehit = SHORT(con->lastsidehit);

  00900	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00907	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0090a	66 8b 91 d8 01
	00 00		 mov	 dx, WORD PTR [ecx+472]
  00911	66 89 90 d6 01
	00 00		 mov	 WORD PTR _players[eax+470], dx

; 2473 : 	players[playernum].lastlinehit = SHORT(con->lastlinehit);

  00918	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0091f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00922	66 8b 91 da 01
	00 00		 mov	 dx, WORD PTR [ecx+474]
  00929	66 89 90 d8 01
	00 00		 mov	 WORD PTR _players[eax+472], dx

; 2474 : 	players[playernum].losscount = LONG(con->losscount);

  00930	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00937	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0093a	8b 91 dc 01 00
	00		 mov	 edx, DWORD PTR [ecx+476]
  00940	89 90 dc 01 00
	00		 mov	 DWORD PTR _players[eax+476], edx

; 2475 : 	players[playernum].onconveyor = LONG(con->onconveyor);

  00946	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0094d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00950	8b 91 e0 01 00
	00		 mov	 edx, DWORD PTR [ecx+480]
  00956	89 90 e4 01 00
	00		 mov	 DWORD PTR _players[eax+484], edx

; 2476 : 	players[playernum].spectator = con->spectator;

  0095c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00963	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00966	8a 91 e4 01 00
	00		 mov	 dl, BYTE PTR [ecx+484]
  0096c	88 90 f0 01 00
	00		 mov	 BYTE PTR _players[eax+496], dl

; 2477 : 	players[playernum].jointime = (tic_t)LONG(con->jointime);

  00972	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00979	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0097c	8b 91 e5 01 00
	00		 mov	 edx, DWORD PTR [ecx+485]
  00982	89 90 f4 01 00
	00		 mov	 DWORD PTR _players[eax+500], edx

; 2478 : 
; 2479 : 	//...but keep old mo even if it is corrupt or null!
; 2480 : 	players[playernum].mo = savedmo;

  00988	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0098f	8b 4d f8	 mov	 ecx, DWORD PTR _savedmo$[ebp]
  00992	89 88 00 00 00
	00		 mov	 DWORD PTR _players[eax], ecx

; 2481 : 
; 2482 : 	//Transfer important mo information if they have a valid mo.
; 2483 : 	if (!con->hasmo)

  00998	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  0099b	0f b6 88 e9 01
	00 00		 movzx	 ecx, BYTE PTR [eax+489]
  009a2	85 c9		 test	 ecx, ecx
  009a4	75 05		 jne	 SHORT $LN11@readconpla

; 2484 : 		return;

  009a6	e9 6e 02 00 00	 jmp	 $LN1@readconpla
$LN11@readconpla:

; 2485 : 	//server thinks player has a body.
; 2486 : 	//Give them a new body that can be then manipulated by the server's info.
; 2487 : 	if (!players[playernum].mo) //client thinks it has no body.

  009ab	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  009b2	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  009b9	75 1b		 jne	 SHORT $LN12@readconpla

; 2488 : 		P_SpawnPlayer(playerstarts[0], playernum);

  009bb	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  009be	50		 push	 eax
  009bf	b9 04 00 00 00	 mov	 ecx, 4
  009c4	6b d1 00	 imul	 edx, ecx, 0
  009c7	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _playerstarts[edx]
  009cd	50		 push	 eax
  009ce	e8 00 00 00 00	 call	 _P_SpawnPlayer
  009d3	83 c4 08	 add	 esp, 8
$LN12@readconpla:

; 2489 : 
; 2490 : 	//At this point, the player should have a body, whether they were respawned or not.
; 2491 : 	P_UnsetThingPosition(players[playernum].mo);

  009d6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  009dd	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  009e3	51		 push	 ecx
  009e4	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  009e9	83 c4 04	 add	 esp, 4

; 2492 : 	players[playernum].mo->angle = (angle_t)LONG(con->angle);

  009ec	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  009f3	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  009f9	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  009fc	8b 82 ea 01 00
	00		 mov	 eax, DWORD PTR [edx+490]
  00a02	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 2493 : 	players[playernum].mo->eflags = (UINT32)LONG(con->eflags);

  00a05	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00a0c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a12	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a15	8b 82 1e 02 00
	00		 mov	 eax, DWORD PTR [edx+542]
  00a1b	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 2494 : 	players[playernum].mo->flags = LONG(con->flags);

  00a21	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00a28	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a2e	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a31	8b 82 16 02 00
	00		 mov	 eax, DWORD PTR [edx+534]
  00a37	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 2495 : 	players[playernum].mo->flags2 = LONG(con->flags2);

  00a3a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00a41	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a47	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a4a	8b 82 1a 02 00
	00		 mov	 eax, DWORD PTR [edx+538]
  00a50	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 2496 : 	players[playernum].mo->friction = LONG(con->friction);

  00a56	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00a5d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a63	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a66	8b 82 06 02 00
	00		 mov	 eax, DWORD PTR [edx+518]
  00a6c	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 2497 : 	players[playernum].mo->health = LONG(con->health);

  00a72	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00a79	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a7f	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a82	8b 82 22 02 00
	00		 mov	 eax, DWORD PTR [edx+546]
  00a88	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 2498 : 	players[playernum].mo->momx = LONG(con->momx);

  00a8e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00a95	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a9b	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a9e	8b 82 fa 01 00
	00		 mov	 eax, DWORD PTR [edx+506]
  00aa4	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 2499 : 	players[playernum].mo->momy = LONG(con->momy);

  00aa7	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00aae	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00ab4	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00ab7	8b 82 fe 01 00
	00		 mov	 eax, DWORD PTR [edx+510]
  00abd	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 2500 : 	players[playernum].mo->momz = LONG(con->momz);

  00ac0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00ac7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00acd	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00ad0	8b 82 02 02 00
	00		 mov	 eax, DWORD PTR [edx+514]
  00ad6	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 2501 : 	players[playernum].mo->movefactor = LONG(con->movefactor);

  00ad9	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00ae0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00ae6	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00ae9	8b 82 0a 02 00
	00		 mov	 eax, DWORD PTR [edx+522]
  00aef	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax

; 2502 : 	players[playernum].mo->tics = LONG(con->tics);

  00af5	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00afc	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00b02	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00b05	8b 82 0e 02 00
	00		 mov	 eax, DWORD PTR [edx+526]
  00b0b	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2503 : 	P_SetPlayerMobjState(players[playernum].mo, con->statenum);

  00b0e	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00b11	8b 88 12 02 00
	00		 mov	 ecx, DWORD PTR [eax+530]
  00b17	51		 push	 ecx
  00b18	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  00b1f	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  00b25	50		 push	 eax
  00b26	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00b2b	83 c4 08	 add	 esp, 8

; 2504 : 	players[playernum].mo->x = LONG(con->x);

  00b2e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00b35	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00b3b	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00b3e	8b 82 ee 01 00
	00		 mov	 eax, DWORD PTR [edx+494]
  00b44	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 2505 : 	players[playernum].mo->y = LONG(con->y);

  00b47	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00b4e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00b54	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00b57	8b 82 f2 01 00
	00		 mov	 eax, DWORD PTR [edx+498]
  00b5d	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2506 : 	players[playernum].mo->z = LONG(con->z);

  00b60	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00b67	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00b6d	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00b70	8b 82 f6 01 00
	00		 mov	 eax, DWORD PTR [edx+502]
  00b76	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 2507 : 	players[playernum].mo->radius = LONG(con->radius);

  00b79	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00b80	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00b86	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00b89	8b 82 26 02 00
	00		 mov	 eax, DWORD PTR [edx+550]
  00b8f	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 2508 : 	players[playernum].mo->height = LONG(con->height);

  00b92	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00b99	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00b9f	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00ba2	8b 82 2a 02 00
	00		 mov	 eax, DWORD PTR [edx+554]
  00ba8	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 2509 : 	// P_SetScale is redundant for this, as all related variables are already restored properly.
; 2510 : 	players[playernum].mo->scale = (UINT16)SHORT(con->scale);

  00bab	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00bb2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00bb8	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00bbb	66 8b 82 2e 02
	00 00		 mov	 ax, WORD PTR [edx+558]
  00bc2	66 89 81 cc 00
	00 00		 mov	 WORD PTR [ecx+204], ax

; 2511 : 	players[playernum].mo->destscale = (UINT16)SHORT(con->destscale);

  00bc9	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00bd0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00bd6	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00bd9	66 8b 82 30 02
	00 00		 mov	 ax, WORD PTR [edx+560]
  00be0	66 89 81 ce 00
	00 00		 mov	 WORD PTR [ecx+206], ax

; 2512 : 	players[playernum].mo->scalespeed = con->scalespeed;

  00be7	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00bee	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00bf4	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00bf7	8a 82 32 02 00
	00		 mov	 al, BYTE PTR [edx+562]
  00bfd	88 81 d0 00 00
	00		 mov	 BYTE PTR [ecx+208], al

; 2513 : 
; 2514 : 	P_SetThingPosition(players[playernum].mo);

  00c03	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00c0a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00c10	51		 push	 ecx
  00c11	e8 00 00 00 00	 call	 _P_SetThingPosition
  00c16	83 c4 04	 add	 esp, 4
$LN1@readconpla:

; 2515 : }

  00c19	5f		 pop	 edi
  00c1a	5e		 pop	 esi
  00c1b	5b		 pop	 ebx
  00c1c	8b e5		 mov	 esp, ebp
  00c1e	5d		 pop	 ebp
  00c1f	c3		 ret	 0
_readconplayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _writeconplayer
_TEXT	SEGMENT
_j$ = -4						; size = 4
_con$ = 8						; size = 4
_i$ = 12						; size = 4
_writeconplayer PROC					; COMDAT

; 2198 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2199 : 	size_t j;
; 2200 : 
; 2201 : 	con->playernum = (UINT8)i;

  00009	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  0000c	8a 4d 0c	 mov	 cl, BYTE PTR _i$[ebp]
  0000f	88 48 1f	 mov	 BYTE PTR [eax+31], cl

; 2202 : 
; 2203 : 	con->playerstate = (UINT8)players[i].playerstate;

  00012	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0001c	8a 90 04 00 00
	00		 mov	 dl, BYTE PTR _players[eax+4]
  00022	88 51 20	 mov	 BYTE PTR [ecx+32], dl

; 2204 : 	G_MoveTiccmd(&con->cmd, &players[i].cmd, 1);

  00025	6a 01		 push	 1
  00027	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0002e	05 08 00 00 00	 add	 eax, OFFSET _players+8
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00037	83 c1 21	 add	 ecx, 33			; 00000021H
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _G_MoveTiccmd
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2205 : 	con->viewz = LONG(players[i].viewz);

  00043	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0004d	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR _players[eax+16]
  00053	89 51 29	 mov	 DWORD PTR [ecx+41], edx

; 2206 : 	con->viewheight = LONG(players[i].viewheight);

  00056	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00060	8b 90 14 00 00
	00		 mov	 edx, DWORD PTR _players[eax+20]
  00066	89 51 2d	 mov	 DWORD PTR [ecx+45], edx

; 2207 : 	con->deltaviewheight = LONG(players[i].deltaviewheight);

  00069	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00073	8b 90 18 00 00
	00		 mov	 edx, DWORD PTR _players[eax+24]
  00079	89 51 31	 mov	 DWORD PTR [ecx+49], edx

; 2208 : 	con->bob = LONG(players[i].bob);

  0007c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00086	8b 90 1c 00 00
	00		 mov	 edx, DWORD PTR _players[eax+28]
  0008c	89 51 35	 mov	 DWORD PTR [ecx+53], edx

; 2209 : 	con->aiming = (angle_t)LONG(players[i].aiming);

  0008f	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00099	8b 90 20 00 00
	00		 mov	 edx, DWORD PTR _players[eax+32]
  0009f	89 51 39	 mov	 DWORD PTR [ecx+57], edx

; 2210 : 	con->awayviewaiming = (angle_t)LONG(players[i].awayviewaiming);

  000a2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000ac	8b 90 24 00 00
	00		 mov	 edx, DWORD PTR _players[eax+36]
  000b2	89 51 3d	 mov	 DWORD PTR [ecx+61], edx

; 2211 : 	con->phealth = LONG(players[i].health);

  000b5	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000bf	8b 90 28 00 00
	00		 mov	 edx, DWORD PTR _players[eax+40]
  000c5	89 51 41	 mov	 DWORD PTR [ecx+65], edx

; 2212 : 	con->currentweapon = LONG(players[i].currentweapon);

  000c8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000cf	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000d2	8b 90 2c 00 00
	00		 mov	 edx, DWORD PTR _players[eax+44]
  000d8	89 51 45	 mov	 DWORD PTR [ecx+69], edx

; 2213 : 	con->ringweapons = LONG(players[i].ringweapons);

  000db	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000e5	8b 90 30 00 00
	00		 mov	 edx, DWORD PTR _players[eax+48]
  000eb	89 51 49	 mov	 DWORD PTR [ecx+73], edx

; 2214 : 	con->tossstrength = LONG(players[i].tossstrength);

  000ee	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000f8	8b 90 34 00 00
	00		 mov	 edx, DWORD PTR _players[eax+52]
  000fe	89 51 4d	 mov	 DWORD PTR [ecx+77], edx

; 2215 : 
; 2216 : 	for (j = 0; j < NUMPOWERS; j++)

  00101	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00108	eb 09		 jmp	 SHORT $LN4@writeconpl
$LN2@writeconpl:
  0010a	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  0010d	83 c0 01	 add	 eax, 1
  00110	89 45 fc	 mov	 DWORD PTR _j$[ebp], eax
$LN4@writeconpl:
  00113	83 7d fc 1d	 cmp	 DWORD PTR _j$[ebp], 29	; 0000001dH
  00117	73 1d		 jae	 SHORT $LN3@writeconpl

; 2217 : 		con->powers[j] = LONG(players[i].powers[j]);

  00119	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00120	8b 4d fc	 mov	 ecx, DWORD PTR _j$[ebp]
  00123	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00126	8b 75 fc	 mov	 esi, DWORD PTR _j$[ebp]
  00129	8b 84 b0 38 00
	00 00		 mov	 eax, DWORD PTR _players[eax+esi*4+56]
  00130	89 44 8a 51	 mov	 DWORD PTR [edx+ecx*4+81], eax
  00134	eb d4		 jmp	 SHORT $LN2@writeconpl
$LN3@writeconpl:

; 2218 : 
; 2219 : 	con->pflags = (UINT32)LONG(players[i].pflags);

  00136	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00140	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR _players[eax+172]
  00146	89 91 c5 00 00
	00		 mov	 DWORD PTR [ecx+197], edx

; 2220 : 	con->bonuscount = LONG(players[i].bonuscount);

  0014c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00153	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00156	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR _players[eax+176]
  0015c	89 91 c9 00 00
	00		 mov	 DWORD PTR [ecx+201], edx

; 2221 : 	con->skincolor = LONG(players[i].skincolor);

  00162	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00169	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0016c	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+180]
  00172	89 91 cd 00 00
	00		 mov	 DWORD PTR [ecx+205], edx

; 2222 : 	con->skin = LONG(players[i].skin);

  00178	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0017f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00182	8b 90 b8 00 00
	00		 mov	 edx, DWORD PTR _players[eax+184]
  00188	89 91 d1 00 00
	00		 mov	 DWORD PTR [ecx+209], edx

; 2223 : 	con->score = (UINT32)LONG(players[i].score);

  0018e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00195	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00198	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+188]
  0019e	89 91 d5 00 00
	00		 mov	 DWORD PTR [ecx+213], edx

; 2224 : 	con->dashspeed = LONG(players[i].dashspeed);

  001a4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  001ae	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR _players[eax+192]
  001b4	89 91 d9 00 00
	00		 mov	 DWORD PTR [ecx+217], edx

; 2225 : 	con->normalspeed = LONG(players[i].normalspeed);

  001ba	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  001c4	8b 90 c4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+196]
  001ca	89 91 dd 00 00
	00		 mov	 DWORD PTR [ecx+221], edx

; 2226 : 	con->runspeed = LONG(players[i].runspeed);

  001d0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001d7	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  001da	8b 90 c8 00 00
	00		 mov	 edx, DWORD PTR _players[eax+200]
  001e0	89 91 e1 00 00
	00		 mov	 DWORD PTR [ecx+225], edx

; 2227 : 	con->thrustfactor = LONG(players[i].thrustfactor);

  001e6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001ed	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  001f0	8b 90 cc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+204]
  001f6	89 91 e5 00 00
	00		 mov	 DWORD PTR [ecx+229], edx

; 2228 : 	con->accelstart = LONG(players[i].accelstart);

  001fc	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00203	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00206	8b 90 d0 00 00
	00		 mov	 edx, DWORD PTR _players[eax+208]
  0020c	89 91 e9 00 00
	00		 mov	 DWORD PTR [ecx+233], edx

; 2229 : 	con->acceleration = LONG(players[i].acceleration);

  00212	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00219	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0021c	8b 90 d4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+212]
  00222	89 91 ed 00 00
	00		 mov	 DWORD PTR [ecx+237], edx

; 2230 : 	con->charability = LONG(players[i].charability);

  00228	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0022f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00232	8b 90 d8 00 00
	00		 mov	 edx, DWORD PTR _players[eax+216]
  00238	89 91 f1 00 00
	00		 mov	 DWORD PTR [ecx+241], edx

; 2231 : 	con->charability2 = LONG(players[i].charability2);

  0023e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00245	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00248	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+220]
  0024e	89 91 f5 00 00
	00		 mov	 DWORD PTR [ecx+245], edx

; 2232 : 	con->charflags = (UINT32)LONG(players[i].charflags);

  00254	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0025b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0025e	8b 90 e0 00 00
	00		 mov	 edx, DWORD PTR _players[eax+224]
  00264	89 91 f9 00 00
	00		 mov	 DWORD PTR [ecx+249], edx

; 2233 : 	con->thokitem = (UINT32)LONG(players[i].thokitem);

  0026a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00271	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00274	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+228]
  0027a	89 91 fd 00 00
	00		 mov	 DWORD PTR [ecx+253], edx

; 2234 : 	con->spinitem = (UINT32)LONG(players[i].spinitem);

  00280	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00287	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0028a	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR _players[eax+232]
  00290	89 91 01 01 00
	00		 mov	 DWORD PTR [ecx+257], edx

; 2235 : 	con->actionspd = LONG(players[i].actionspd);

  00296	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0029d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  002a0	8b 90 ec 00 00
	00		 mov	 edx, DWORD PTR _players[eax+236]
  002a6	89 91 05 01 00
	00		 mov	 DWORD PTR [ecx+261], edx

; 2236 : 	con->mindash = LONG(players[i].mindash);

  002ac	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002b3	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  002b6	8b 90 f0 00 00
	00		 mov	 edx, DWORD PTR _players[eax+240]
  002bc	89 91 09 01 00
	00		 mov	 DWORD PTR [ecx+265], edx

; 2237 : 	con->maxdash = LONG(players[i].maxdash);

  002c2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002c9	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  002cc	8b 90 f4 00 00
	00		 mov	 edx, DWORD PTR _players[eax+244]
  002d2	89 91 0d 01 00
	00		 mov	 DWORD PTR [ecx+269], edx

; 2238 : 	con->jumpfactor = LONG(players[i].jumpfactor);

  002d8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002df	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  002e2	8b 90 f8 00 00
	00		 mov	 edx, DWORD PTR _players[eax+248]
  002e8	89 91 11 01 00
	00		 mov	 DWORD PTR [ecx+273], edx

; 2239 : #ifndef TRANSFIX
; 2240 : 	con->starttranscolor = LONG(players[i].starttranscolor);
; 2241 : #endif
; 2242 : 	con->prefcolor = LONG(players[i].prefcolor);

  002ee	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  002f5	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  002f8	8b 90 fc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+252]
  002fe	89 91 15 01 00
	00		 mov	 DWORD PTR [ecx+277], edx

; 2243 : 	con->lives = LONG(players[i].lives);

  00304	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0030b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0030e	8b 90 00 01 00
	00		 mov	 edx, DWORD PTR _players[eax+256]
  00314	89 91 19 01 00
	00		 mov	 DWORD PTR [ecx+281], edx

; 2244 : 	con->continues = LONG(players[i].continues);

  0031a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00321	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00324	8b 90 04 01 00
	00		 mov	 edx, DWORD PTR _players[eax+260]
  0032a	89 91 1d 01 00
	00		 mov	 DWORD PTR [ecx+285], edx

; 2245 : 	con->xtralife = LONG(players[i].xtralife);

  00330	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00337	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0033a	8b 90 08 01 00
	00		 mov	 edx, DWORD PTR _players[eax+264]
  00340	89 91 21 01 00
	00		 mov	 DWORD PTR [ecx+289], edx

; 2246 : 	con->speed = LONG(players[i].speed);

  00346	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0034d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00350	8b 90 0c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+268]
  00356	89 91 25 01 00
	00		 mov	 DWORD PTR [ecx+293], edx

; 2247 : 	con->jumping = LONG(players[i].jumping);

  0035c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00363	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00366	8b 90 10 01 00
	00		 mov	 edx, DWORD PTR _players[eax+272]
  0036c	89 91 29 01 00
	00		 mov	 DWORD PTR [ecx+297], edx

; 2248 : 	con->secondjump =players[i].secondjump;

  00372	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00379	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0037c	8a 90 14 01 00
	00		 mov	 dl, BYTE PTR _players[eax+276]
  00382	88 91 2d 01 00
	00		 mov	 BYTE PTR [ecx+301], dl

; 2249 : 	con->fly1 = LONG(players[i].fly1);

  00388	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00392	8b 90 18 01 00
	00		 mov	 edx, DWORD PTR _players[eax+280]
  00398	89 91 2e 01 00
	00		 mov	 DWORD PTR [ecx+302], edx

; 2250 : 	con->scoreadd = (UINT32)LONG(players[i].scoreadd);

  0039e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003a5	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  003a8	8b 90 1c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+284]
  003ae	89 91 32 01 00
	00		 mov	 DWORD PTR [ecx+306], edx

; 2251 : 	con->glidetime = (tic_t)LONG(players[i].glidetime);

  003b4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003bb	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  003be	8b 90 20 01 00
	00		 mov	 edx, DWORD PTR _players[eax+288]
  003c4	89 91 36 01 00
	00		 mov	 DWORD PTR [ecx+310], edx

; 2252 : 	con->climbing = LONG(players[i].climbing);

  003ca	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003d1	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  003d4	8b 90 24 01 00
	00		 mov	 edx, DWORD PTR _players[eax+292]
  003da	89 91 3a 01 00
	00		 mov	 DWORD PTR [ecx+314], edx

; 2253 : 	con->deadtimer = LONG(players[i].deadtimer);

  003e0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003e7	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  003ea	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR _players[eax+296]
  003f0	89 91 3e 01 00
	00		 mov	 DWORD PTR [ecx+318], edx

; 2254 : 	con->splish = LONG(players[i].splish);

  003f6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  003fd	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00400	8b 90 2c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+300]
  00406	89 91 42 01 00
	00		 mov	 DWORD PTR [ecx+322], edx

; 2255 : 	con->exiting = (tic_t)LONG(players[i].exiting);

  0040c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00413	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00416	8b 90 30 01 00
	00		 mov	 edx, DWORD PTR _players[eax+304]
  0041c	89 91 46 01 00
	00		 mov	 DWORD PTR [ecx+326], edx

; 2256 : 	con->blackow = LONG(players[i].blackow);

  00422	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00429	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0042c	8b 90 34 01 00
	00		 mov	 edx, DWORD PTR _players[eax+308]
  00432	89 91 4a 01 00
	00		 mov	 DWORD PTR [ecx+330], edx

; 2257 : 	con->homing = players[i].homing;

  00438	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0043f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00442	8a 90 38 01 00
	00		 mov	 dl, BYTE PTR _players[eax+312]
  00448	88 91 4e 01 00
	00		 mov	 BYTE PTR [ecx+334], dl

; 2258 : 	con->cmomx = LONG(players[i].cmomx);

  0044e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00455	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00458	8b 90 3c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+316]
  0045e	89 91 4f 01 00
	00		 mov	 DWORD PTR [ecx+335], edx

; 2259 : 	con->cmomy = LONG(players[i].cmomy);

  00464	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0046b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0046e	8b 90 40 01 00
	00		 mov	 edx, DWORD PTR _players[eax+320]
  00474	89 91 53 01 00
	00		 mov	 DWORD PTR [ecx+339], edx

; 2260 : 	con->rmomx = LONG(players[i].rmomx);

  0047a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00481	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00484	8b 90 44 01 00
	00		 mov	 edx, DWORD PTR _players[eax+324]
  0048a	89 91 57 01 00
	00		 mov	 DWORD PTR [ecx+343], edx

; 2261 : 	con->rmomy = LONG(players[i].rmomy);

  00490	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00497	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0049a	8b 90 48 01 00
	00		 mov	 edx, DWORD PTR _players[eax+328]
  004a0	89 91 5b 01 00
	00		 mov	 DWORD PTR [ecx+347], edx

; 2262 : 	con->numboxes = LONG(players[i].numboxes);

  004a6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004ad	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004b0	8b 90 4c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+332]
  004b6	89 91 5f 01 00
	00		 mov	 DWORD PTR [ecx+351], edx

; 2263 : 	con->totalring = LONG(players[i].totalring);

  004bc	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004c3	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004c6	8b 90 50 01 00
	00		 mov	 edx, DWORD PTR _players[eax+336]
  004cc	89 91 63 01 00
	00		 mov	 DWORD PTR [ecx+355], edx

; 2264 : 	con->realtime = (tic_t)LONG(players[i].realtime);

  004d2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004d9	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004dc	8b 90 54 01 00
	00		 mov	 edx, DWORD PTR _players[eax+340]
  004e2	89 91 67 01 00
	00		 mov	 DWORD PTR [ecx+359], edx

; 2265 : 	con->racescore = (UINT32)LONG(players[i].racescore);

  004e8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  004ef	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  004f2	8b 90 58 01 00
	00		 mov	 edx, DWORD PTR _players[eax+344]
  004f8	89 91 6b 01 00
	00		 mov	 DWORD PTR [ecx+363], edx

; 2266 : 	con->laps = (UINT32)LONG(players[i].laps);

  004fe	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00505	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00508	8b 90 5c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+348]
  0050e	89 91 6f 01 00
	00		 mov	 DWORD PTR [ecx+367], edx

; 2267 : 	con->ctfteam = LONG(players[i].ctfteam);

  00514	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0051b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0051e	8b 90 60 01 00
	00		 mov	 edx, DWORD PTR _players[eax+352]
  00524	89 91 73 01 00
	00		 mov	 DWORD PTR [ecx+371], edx

; 2268 : 	con->gotflag = (UINT16)SHORT(players[i].gotflag);

  0052a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00531	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00534	66 8b 90 64 01
	00 00		 mov	 dx, WORD PTR _players[eax+356]
  0053b	66 89 91 77 01
	00 00		 mov	 WORD PTR [ecx+375], dx

; 2269 : 	con->dbginfo = LONG(players[i].dbginfo);

  00542	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00549	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0054c	8b 90 68 01 00
	00		 mov	 edx, DWORD PTR _players[eax+360]
  00552	89 91 79 01 00
	00		 mov	 DWORD PTR [ecx+377], edx

; 2270 : 	con->emeraldhunt = LONG(players[i].emeraldhunt);

  00558	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0055f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00562	8b 90 6c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+364]
  00568	89 91 7d 01 00
	00		 mov	 DWORD PTR [ecx+381], edx

; 2271 : 	con->weapondelay = LONG(players[i].weapondelay);

  0056e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00575	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00578	8b 90 70 01 00
	00		 mov	 edx, DWORD PTR _players[eax+368]
  0057e	89 91 81 01 00
	00		 mov	 DWORD PTR [ecx+385], edx

; 2272 : 	con->tossdelay = LONG(players[i].tossdelay);

  00584	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0058b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0058e	8b 90 74 01 00
	00		 mov	 edx, DWORD PTR _players[eax+372]
  00594	89 91 85 01 00
	00		 mov	 DWORD PTR [ecx+389], edx

; 2273 : 	con->shielddelay = LONG(players[i].shielddelay);

  0059a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005a1	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005a4	8b 90 78 01 00
	00		 mov	 edx, DWORD PTR _players[eax+376]
  005aa	89 91 89 01 00
	00		 mov	 DWORD PTR [ecx+393], edx

; 2274 : 	con->taunttimer = (tic_t)LONG(players[i].taunttimer);

  005b0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005b7	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005ba	8b 90 7c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+380]
  005c0	89 91 8d 01 00
	00		 mov	 DWORD PTR [ecx+397], edx

; 2275 : 	con->starpostx = LONG(players[i].starpostx);

  005c6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005cd	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005d0	8b 90 80 01 00
	00		 mov	 edx, DWORD PTR _players[eax+384]
  005d6	89 91 91 01 00
	00		 mov	 DWORD PTR [ecx+401], edx

; 2276 : 	con->starposty = LONG(players[i].starposty);

  005dc	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005e3	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005e6	8b 90 84 01 00
	00		 mov	 edx, DWORD PTR _players[eax+388]
  005ec	89 91 95 01 00
	00		 mov	 DWORD PTR [ecx+405], edx

; 2277 : 	con->starpostz = LONG(players[i].starpostz);

  005f2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  005f9	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  005fc	8b 90 88 01 00
	00		 mov	 edx, DWORD PTR _players[eax+392]
  00602	89 91 99 01 00
	00		 mov	 DWORD PTR [ecx+409], edx

; 2278 : 	con->starpostnum = LONG(players[i].starpostnum);

  00608	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0060f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00612	8b 90 8c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+396]
  00618	89 91 9d 01 00
	00		 mov	 DWORD PTR [ecx+413], edx

; 2279 : 	con->starposttime = (tic_t)LONG(players[i].starposttime);

  0061e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00625	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00628	8b 90 90 01 00
	00		 mov	 edx, DWORD PTR _players[eax+400]
  0062e	89 91 a1 01 00
	00		 mov	 DWORD PTR [ecx+417], edx

; 2280 : 	con->starpostangle = (angle_t)LONG(players[i].starpostangle);

  00634	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0063b	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0063e	8b 90 94 01 00
	00		 mov	 edx, DWORD PTR _players[eax+404]
  00644	89 91 a5 01 00
	00		 mov	 DWORD PTR [ecx+421], edx

; 2281 : 	con->starpostbit = (UINT32)LONG(players[i].starpostbit);

  0064a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00651	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00654	8b 90 98 01 00
	00		 mov	 edx, DWORD PTR _players[eax+408]
  0065a	89 91 a9 01 00
	00		 mov	 DWORD PTR [ecx+425], edx

; 2282 : 	con->angle_pos = (angle_t)LONG(players[i].angle_pos);

  00660	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00667	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0066a	8b 90 9c 01 00
	00		 mov	 edx, DWORD PTR _players[eax+412]
  00670	89 91 ad 01 00
	00		 mov	 DWORD PTR [ecx+429], edx

; 2283 : 	con->old_angle_pos = (angle_t)LONG(players[i].old_angle_pos);

  00676	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0067d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00680	8b 90 a0 01 00
	00		 mov	 edx, DWORD PTR _players[eax+416]
  00686	89 91 b1 01 00
	00		 mov	 DWORD PTR [ecx+433], edx

; 2284 : 	con->bumpertime = (tic_t)LONG(players[i].bumpertime);

  0068c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00693	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00696	8b 90 ac 01 00
	00		 mov	 edx, DWORD PTR _players[eax+428]
  0069c	89 91 b5 01 00
	00		 mov	 DWORD PTR [ecx+437], edx

; 2285 : 	con->flyangle = LONG(players[i].flyangle);

  006a2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006a9	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006ac	8b 90 b0 01 00
	00		 mov	 edx, DWORD PTR _players[eax+432]
  006b2	89 91 b9 01 00
	00		 mov	 DWORD PTR [ecx+441], edx

; 2286 : 	con->drilltimer = (tic_t)LONG(players[i].drilltimer);

  006b8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006bf	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006c2	8b 90 b4 01 00
	00		 mov	 edx, DWORD PTR _players[eax+436]
  006c8	89 91 bd 01 00
	00		 mov	 DWORD PTR [ecx+445], edx

; 2287 : 	con->linkcount = LONG(players[i].linkcount);

  006ce	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006d5	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006d8	8b 90 b8 01 00
	00		 mov	 edx, DWORD PTR _players[eax+440]
  006de	89 91 c1 01 00
	00		 mov	 DWORD PTR [ecx+449], edx

; 2288 : 	con->linktimer = (tic_t)LONG(players[i].linktimer);

  006e4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  006eb	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  006ee	8b 90 bc 01 00
	00		 mov	 edx, DWORD PTR _players[eax+444]
  006f4	89 91 c5 01 00
	00		 mov	 DWORD PTR [ecx+453], edx

; 2289 : 	con->anotherflyangle = LONG(players[i].anotherflyangle);

  006fa	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00701	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00704	8b 90 c0 01 00
	00		 mov	 edx, DWORD PTR _players[eax+448]
  0070a	89 91 c9 01 00
	00		 mov	 DWORD PTR [ecx+457], edx

; 2290 : 	con->nightstime = (tic_t)LONG(players[i].nightstime);

  00710	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00717	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0071a	8b 90 c4 01 00
	00		 mov	 edx, DWORD PTR _players[eax+452]
  00720	89 91 cd 01 00
	00		 mov	 DWORD PTR [ecx+461], edx

; 2291 : 	con->drillmeter = LONG(players[i].drillmeter);

  00726	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0072d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00730	8b 90 c8 01 00
	00		 mov	 edx, DWORD PTR _players[eax+456]
  00736	89 91 d1 01 00
	00		 mov	 DWORD PTR [ecx+465], edx

; 2292 : 	con->drilldelay = players[i].drilldelay;

  0073c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00743	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00746	8a 90 cc 01 00
	00		 mov	 dl, BYTE PTR _players[eax+460]
  0074c	88 91 d5 01 00
	00		 mov	 BYTE PTR [ecx+469], dl

; 2293 : 	con->bonustime = players[i].bonustime;

  00752	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00759	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0075c	8a 90 cd 01 00
	00		 mov	 dl, BYTE PTR _players[eax+461]
  00762	88 91 d6 01 00
	00		 mov	 BYTE PTR [ecx+470], dl

; 2294 : 	con->mare = players[i].mare;

  00768	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0076f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00772	8a 90 d4 01 00
	00		 mov	 dl, BYTE PTR _players[eax+468]
  00778	88 91 d7 01 00
	00		 mov	 BYTE PTR [ecx+471], dl

; 2295 : 	con->lastsidehit = SHORT(players[i].lastsidehit);

  0077e	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00785	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00788	66 8b 90 d6 01
	00 00		 mov	 dx, WORD PTR _players[eax+470]
  0078f	66 89 91 d8 01
	00 00		 mov	 WORD PTR [ecx+472], dx

; 2296 : 	con->lastlinehit = SHORT(players[i].lastlinehit);

  00796	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0079d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007a0	66 8b 90 d8 01
	00 00		 mov	 dx, WORD PTR _players[eax+472]
  007a7	66 89 91 da 01
	00 00		 mov	 WORD PTR [ecx+474], dx

; 2297 : 	con->losscount = LONG(players[i].losscount);

  007ae	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007b5	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007b8	8b 90 dc 01 00
	00		 mov	 edx, DWORD PTR _players[eax+476]
  007be	89 91 dc 01 00
	00		 mov	 DWORD PTR [ecx+476], edx

; 2298 : 	con->onconveyor = LONG(players[i].onconveyor);

  007c4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007cb	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007ce	8b 90 e4 01 00
	00		 mov	 edx, DWORD PTR _players[eax+484]
  007d4	89 91 e0 01 00
	00		 mov	 DWORD PTR [ecx+480], edx

; 2299 : 	con->spectator = players[i].spectator;

  007da	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007e1	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007e4	8a 90 f0 01 00
	00		 mov	 dl, BYTE PTR _players[eax+496]
  007ea	88 91 e4 01 00
	00		 mov	 BYTE PTR [ecx+484], dl

; 2300 : 	con->jointime = (tic_t)LONG(players[i].jointime);

  007f0	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  007f7	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  007fa	8b 90 f4 01 00
	00		 mov	 edx, DWORD PTR _players[eax+500]
  00800	89 91 e5 01 00
	00		 mov	 DWORD PTR [ecx+485], edx

; 2301 : 
; 2302 : 	con->hasmo = false;

  00806	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00809	c6 80 e9 01 00
	00 00		 mov	 BYTE PTR [eax+489], 0

; 2303 : 	//Transfer important mo information if the player has a body.
; 2304 : 	//This lets us resync players even if they are dead.
; 2305 : 	if (!players[i].mo)

  00810	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00817	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0081e	75 05		 jne	 SHORT $LN5@writeconpl

; 2306 : 		return;

  00820	e9 27 02 00 00	 jmp	 $LN1@writeconpl
$LN5@writeconpl:

; 2307 : 
; 2308 : 	con->hasmo = true;

  00825	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  00828	c6 80 e9 01 00
	00 01		 mov	 BYTE PTR [eax+489], 1

; 2309 : 	con->angle = (angle_t)LONG(players[i].mo->angle);

  0082f	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00836	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0083c	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  0083f	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00842	89 82 ea 01 00
	00		 mov	 DWORD PTR [edx+490], eax

; 2310 : 	con->eflags = (UINT32)LONG(players[i].mo->eflags);

  00848	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0084f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00855	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00858	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  0085e	89 82 1e 02 00
	00		 mov	 DWORD PTR [edx+542], eax

; 2311 : 	con->flags = LONG(players[i].mo->flags);

  00864	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0086b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00871	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00874	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00877	89 82 16 02 00
	00		 mov	 DWORD PTR [edx+534], eax

; 2312 : 	con->flags2 = LONG(players[i].mo->flags2);

  0087d	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00884	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0088a	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  0088d	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  00893	89 82 1a 02 00
	00		 mov	 DWORD PTR [edx+538], eax

; 2313 : 	con->friction = LONG(players[i].mo->friction);

  00899	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008a0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  008a6	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  008a9	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  008af	89 82 06 02 00
	00		 mov	 DWORD PTR [edx+518], eax

; 2314 : 	con->health = LONG(players[i].mo->health);

  008b5	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008bc	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  008c2	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  008c5	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  008cb	89 82 22 02 00
	00		 mov	 DWORD PTR [edx+546], eax

; 2315 : 	con->momx = LONG(players[i].mo->momx);

  008d1	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008d8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  008de	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  008e1	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  008e4	89 82 fa 01 00
	00		 mov	 DWORD PTR [edx+506], eax

; 2316 : 	con->momy = LONG(players[i].mo->momy);

  008ea	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  008f1	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  008f7	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  008fa	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  008fd	89 82 fe 01 00
	00		 mov	 DWORD PTR [edx+510], eax

; 2317 : 	con->momz = LONG(players[i].mo->momz);

  00903	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0090a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00910	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00913	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00916	89 82 02 02 00
	00		 mov	 DWORD PTR [edx+514], eax

; 2318 : 	con->movefactor = LONG(players[i].mo->movefactor);

  0091c	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00923	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00929	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  0092c	8b 81 b8 00 00
	00		 mov	 eax, DWORD PTR [ecx+184]
  00932	89 82 0a 02 00
	00		 mov	 DWORD PTR [edx+522], eax

; 2319 : 	con->tics = LONG(players[i].mo->tics);

  00938	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0093f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00945	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00948	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  0094b	89 82 0e 02 00
	00		 mov	 DWORD PTR [edx+526], eax

; 2320 : 	con->statenum = (statenum_t)(players[i].mo->state-states); // :(

  00951	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00958	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0095e	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00961	2d 00 00 00 00	 sub	 eax, OFFSET _states
  00966	99		 cdq
  00967	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0096c	f7 f9		 idiv	 ecx
  0096e	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00971	89 82 12 02 00
	00		 mov	 DWORD PTR [edx+530], eax

; 2321 : 	con->x = LONG(players[i].mo->x);

  00977	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0097e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00984	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00987	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0098a	89 82 ee 01 00
	00		 mov	 DWORD PTR [edx+494], eax

; 2322 : 	con->y = LONG(players[i].mo->y);

  00990	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00997	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0099d	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  009a0	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  009a3	89 82 f2 01 00
	00		 mov	 DWORD PTR [edx+498], eax

; 2323 : 	con->z = LONG(players[i].mo->z);

  009a9	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009b0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  009b6	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  009b9	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  009bc	89 82 f6 01 00
	00		 mov	 DWORD PTR [edx+502], eax

; 2324 : 	con->radius = LONG(players[i].mo->radius);

  009c2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009c9	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  009cf	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  009d2	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  009d5	89 82 26 02 00
	00		 mov	 DWORD PTR [edx+550], eax

; 2325 : 	con->height = LONG(players[i].mo->height);

  009db	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009e2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  009e8	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  009eb	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  009ee	89 82 2a 02 00
	00		 mov	 DWORD PTR [edx+554], eax

; 2326 : 	con->scale = (UINT16)SHORT(players[i].mo->scale);

  009f4	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  009fb	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a01	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a04	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  00a0b	66 89 82 2e 02
	00 00		 mov	 WORD PTR [edx+558], ax

; 2327 : 	con->destscale = (UINT16)SHORT(players[i].mo->destscale);

  00a12	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00a19	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a1f	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a22	66 8b 81 ce 00
	00 00		 mov	 ax, WORD PTR [ecx+206]
  00a29	66 89 82 30 02
	00 00		 mov	 WORD PTR [edx+560], ax

; 2328 : 	con->scalespeed = players[i].mo->scalespeed;

  00a30	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00a37	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00a3d	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00a40	8a 81 d0 00 00
	00		 mov	 al, BYTE PTR [ecx+208]
  00a46	88 82 32 02 00
	00		 mov	 BYTE PTR [edx+562], al
$LN1@writeconpl:

; 2329 : }

  00a4c	5f		 pop	 edi
  00a4d	5e		 pop	 esi
  00a4e	5b		 pop	 ebx
  00a4f	8b e5		 mov	 esp, ebp
  00a51	5d		 pop	 ebp
  00a52	c3		 ret	 0
_writeconplayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SendRefuse
_TEXT	SEGMENT
_node$ = 8						; size = 4
_reason$ = 12						; size = 4
_SV_SendRefuse PROC					; COMDAT

; 2189 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2190 : 	strcpy(netbuffer->u.serverrefuse.reason, reason);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _reason$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00013	83 c1 08	 add	 ecx, 8
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _strcpy
  0001c	83 c4 08	 add	 esp, 8

; 2191 : 
; 2192 : 	netbuffer->packettype = PT_SERVERREFUSE;

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00024	c6 40 06 09	 mov	 BYTE PTR [eax+6], 9

; 2193 : 	HSendPacket(node, true, 0, strlen(netbuffer->u.serverrefuse.reason) + 1);

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0002d	83 c0 08	 add	 eax, 8
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _strlen
  00036	83 c4 04	 add	 esp, 4
  00039	83 c0 01	 add	 eax, 1
  0003c	50		 push	 eax
  0003d	6a 00		 push	 0
  0003f	6a 01		 push	 1
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _HSendPacket
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 2194 : 	Net_CloseConnection(node);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _Net_CloseConnection
  00056	83 c4 04	 add	 esp, 4

; 2195 : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_SV_SendRefuse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_AddWaitingPlayers
_TEXT	SEGMENT
_newplayernum$ = -17					; size = 1
_buf$ = -16						; size = 2
_newplayer$ = -12					; size = 4
_n$ = -8						; size = 4
_node$ = -4						; size = 4
_SV_AddWaitingPlayers PROC				; COMDAT

; 2046 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2047 : 	INT32 node, n, newplayer = false;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _newplayer$[ebp], 0

; 2048 : 	XBOXSTATIC UINT8 buf[2];
; 2049 : 	UINT8 newplayernum = 0;

  00010	c6 45 ef 00	 mov	 BYTE PTR _newplayernum$[ebp], 0

; 2050 : 
; 2051 : 	// What is the reason for this? Why can't newplayernum always be 0?
; 2052 : 	if (dedicated)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  0001b	74 04		 je	 SHORT $LN14@SV_AddWait

; 2053 : 		newplayernum = 1;

  0001d	c6 45 ef 01	 mov	 BYTE PTR _newplayernum$[ebp], 1
$LN14@SV_AddWait:

; 2054 : 
; 2055 : 	for (node = 0; node < MAXNETNODES; node++)

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _node$[ebp], 0
  00028	eb 09		 jmp	 SHORT $LN4@SV_AddWait
$LN2@SV_AddWait:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 fc	 mov	 DWORD PTR _node$[ebp], eax
$LN4@SV_AddWait:
  00033	83 7d fc 20	 cmp	 DWORD PTR _node$[ebp], 32 ; 00000020H
  00037	0f 8d 73 01 00
	00		 jge	 $LN3@SV_AddWait

; 2056 : 	{
; 2057 : 		// splitscreen can allow 2 player in one node
; 2058 : 		for (; nodewaiting[node] > 0; nodewaiting[node]--)

  0003d	eb 15		 jmp	 SHORT $LN7@SV_AddWait
$LN5@SV_AddWait:
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00042	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _nodewaiting[eax]
  00048	80 e9 01	 sub	 cl, 1
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _node$[ebp]
  0004e	88 8a 00 00 00
	00		 mov	 BYTE PTR _nodewaiting[edx], cl
$LN7@SV_AddWait:
  00054	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00057	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _nodewaiting[eax]
  0005e	85 c9		 test	 ecx, ecx
  00060	0f 8e 45 01 00
	00		 jle	 $LN6@SV_AddWait

; 2059 : 		{
; 2060 : 			newplayer = true;

  00066	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _newplayer$[ebp], 1

; 2061 : 
; 2062 : 			// search for a free playernum
; 2063 : 			// we can't use playeringame since it is not updated here
; 2064 : 			for (; newplayernum < MAXPLAYERS; newplayernum++)

  0006d	eb 08		 jmp	 SHORT $LN10@SV_AddWait
$LN8@SV_AddWait:
  0006f	8a 45 ef	 mov	 al, BYTE PTR _newplayernum$[ebp]
  00072	04 01		 add	 al, 1
  00074	88 45 ef	 mov	 BYTE PTR _newplayernum$[ebp], al
$LN10@SV_AddWait:
  00077	0f b6 45 ef	 movzx	 eax, BYTE PTR _newplayernum$[ebp]
  0007b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0007e	7d 4a		 jge	 SHORT $LN9@SV_AddWait

; 2065 : 			{
; 2066 : 				for (n = 0; n < MAXNETNODES; n++)

  00080	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00087	eb 09		 jmp	 SHORT $LN13@SV_AddWait
$LN11@SV_AddWait:
  00089	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0008c	83 c0 01	 add	 eax, 1
  0008f	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN13@SV_AddWait:
  00092	83 7d f8 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  00096	7d 28		 jge	 SHORT $LN12@SV_AddWait

; 2067 : 					if (nodetoplayer[n] == newplayernum || nodetoplayer2[n] == newplayernum)

  00098	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0009b	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer[eax]
  000a2	0f b6 55 ef	 movzx	 edx, BYTE PTR _newplayernum$[ebp]
  000a6	3b ca		 cmp	 ecx, edx
  000a8	74 12		 je	 SHORT $LN16@SV_AddWait
  000aa	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000ad	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer2[eax]
  000b4	0f b6 55 ef	 movzx	 edx, BYTE PTR _newplayernum$[ebp]
  000b8	3b ca		 cmp	 ecx, edx
  000ba	75 02		 jne	 SHORT $LN15@SV_AddWait
$LN16@SV_AddWait:

; 2068 : 						break;

  000bc	eb 02		 jmp	 SHORT $LN12@SV_AddWait
$LN15@SV_AddWait:
  000be	eb c9		 jmp	 SHORT $LN11@SV_AddWait
$LN12@SV_AddWait:

; 2069 : 				if (n == MAXNETNODES)

  000c0	83 7d f8 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  000c4	75 02		 jne	 SHORT $LN17@SV_AddWait

; 2070 : 					break;

  000c6	eb 02		 jmp	 SHORT $LN9@SV_AddWait
$LN17@SV_AddWait:

; 2071 : 			}

  000c8	eb a5		 jmp	 SHORT $LN8@SV_AddWait
$LN9@SV_AddWait:

; 2072 : 
; 2073 : 			// should never happen since we check the playernum
; 2074 : 			// before accepting the join
; 2075 : 			I_Assert(newplayernum < MAXPLAYERS);
; 2076 : 
; 2077 : 			playernode[newplayernum] = (UINT8)node;

  000ca	0f b6 45 ef	 movzx	 eax, BYTE PTR _newplayernum$[ebp]
  000ce	8a 4d fc	 mov	 cl, BYTE PTR _node$[ebp]
  000d1	88 88 00 00 00
	00		 mov	 BYTE PTR _playernode[eax], cl

; 2078 : 
; 2079 : 			buf[0] = (UINT8)node;

  000d7	b8 01 00 00 00	 mov	 eax, 1
  000dc	6b c8 00	 imul	 ecx, eax, 0
  000df	8a 55 fc	 mov	 dl, BYTE PTR _node$[ebp]
  000e2	88 54 0d f0	 mov	 BYTE PTR _buf$[ebp+ecx], dl

; 2080 : 			buf[1] = newplayernum;

  000e6	b8 01 00 00 00	 mov	 eax, 1
  000eb	c1 e0 00	 shl	 eax, 0
  000ee	8a 4d ef	 mov	 cl, BYTE PTR _newplayernum$[ebp]
  000f1	88 4c 05 f0	 mov	 BYTE PTR _buf$[ebp+eax], cl

; 2081 : 			if (playerpernode[node] < 1)

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  000f8	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playerpernode[eax]
  000ff	83 f9 01	 cmp	 ecx, 1
  00102	7d 0e		 jge	 SHORT $LN18@SV_AddWait

; 2082 : 				nodetoplayer[node] = newplayernum;

  00104	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00107	8a 4d ef	 mov	 cl, BYTE PTR _newplayernum$[ebp]
  0010a	88 88 00 00 00
	00		 mov	 BYTE PTR _nodetoplayer[eax], cl
  00110	eb 2b		 jmp	 SHORT $LN19@SV_AddWait
$LN18@SV_AddWait:

; 2083 : 			else
; 2084 : 			{
; 2085 : 				nodetoplayer2[node] = newplayernum;

  00112	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00115	8a 4d ef	 mov	 cl, BYTE PTR _newplayernum$[ebp]
  00118	88 88 00 00 00
	00		 mov	 BYTE PTR _nodetoplayer2[eax], cl

; 2086 : 				buf[1] |= 0x80;

  0011e	b8 01 00 00 00	 mov	 eax, 1
  00123	c1 e0 00	 shl	 eax, 0
  00126	0f b6 4c 05 f0	 movzx	 ecx, BYTE PTR _buf$[ebp+eax]
  0012b	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
  00131	ba 01 00 00 00	 mov	 edx, 1
  00136	c1 e2 00	 shl	 edx, 0
  00139	88 4c 15 f0	 mov	 BYTE PTR _buf$[ebp+edx], cl
$LN19@SV_AddWait:

; 2087 : 			}
; 2088 : 			playerpernode[node]++;

  0013d	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00140	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _playerpernode[eax]
  00146	80 c1 01	 add	 cl, 1
  00149	8b 55 fc	 mov	 edx, DWORD PTR _node$[ebp]
  0014c	88 8a 00 00 00
	00		 mov	 BYTE PTR _playerpernode[edx], cl

; 2089 : 
; 2090 : 			SendNetXCmd(XD_ADDPLAYER, &buf, 2);

  00152	6a 02		 push	 2
  00154	8d 45 f0	 lea	 eax, DWORD PTR _buf$[ebp]
  00157	50		 push	 eax
  00158	6a 0a		 push	 10			; 0000000aH
  0015a	e8 00 00 00 00	 call	 _SendNetXCmd
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2091 : 
; 2092 : 			DEBFILE(va("Server added player %d node %d\n", newplayernum, node));

  00162	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00169	74 33		 je	 SHORT $LN20@SV_AddWait
  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00170	50		 push	 eax
  00171	8b 4d fc	 mov	 ecx, DWORD PTR _node$[ebp]
  00174	51		 push	 ecx
  00175	0f b6 55 ef	 movzx	 edx, BYTE PTR _newplayernum$[ebp]
  00179	52		 push	 edx
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MCDEGGBF@Server?5added?5player?5?$CFd?5node?5?$CFd?6@
  0017f	e8 00 00 00 00	 call	 _va
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 _fputs
  0018d	83 c4 08	 add	 esp, 8
  00190	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 _fflush
  0019b	83 c4 04	 add	 esp, 4
$LN20@SV_AddWait:

; 2093 : 			// use the next free slot (we can't put playeringame[newplayernum] = true here)
; 2094 : 			newplayernum++;

  0019e	8a 45 ef	 mov	 al, BYTE PTR _newplayernum$[ebp]
  001a1	04 01		 add	 al, 1
  001a3	88 45 ef	 mov	 BYTE PTR _newplayernum$[ebp], al

; 2095 : 		}

  001a6	e9 94 fe ff ff	 jmp	 $LN5@SV_AddWait
$LN6@SV_AddWait:

; 2096 : 	}

  001ab	e9 7a fe ff ff	 jmp	 $LN2@SV_AddWait
$LN3@SV_AddWait:

; 2097 : 
; 2098 : 	return newplayer;

  001b0	8b 45 f4	 mov	 eax, DWORD PTR _newplayer$[ebp]

; 2099 : }

  001b3	5f		 pop	 edi
  001b4	5e		 pop	 esi
  001b5	5b		 pop	 ebx
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c3		 ret	 0
_SV_AddWaitingPlayers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_AddNode
_TEXT	SEGMENT
_node$ = 8						; size = 4
_SV_AddNode PROC					; COMDAT

; 1955 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1956 : 	nettics[node] = gametic;

  00009	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  00012	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _nettics[eax*4], ecx

; 1957 : 	supposedtics[node] = gametic;

  00019	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  00022	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _supposedtics[eax*4], ecx

; 1958 : 	// little hack because the server connect to itself and put
; 1959 : 	// nodeingame when connected not here
; 1960 : 	if (node)

  00029	83 7d 08 00	 cmp	 DWORD PTR _node$[ebp], 0
  0002d	74 0e		 je	 SHORT $LN2@SV_AddNode

; 1961 : 		nodeingame[node] = true;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00032	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _nodeingame[eax*4], 1
$LN2@SV_AddNode:

; 1962 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_SV_AddNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Got_AddPlayer
_TEXT	SEGMENT
$T1 = -88						; size = 4
_address$2 = -20					; size = 4
_buf$3 = -16						; size = 2
_splitscreenplayer$ = -12				; size = 4
_newplayernum$ = -8					; size = 2
_node$ = -4						; size = 2
_p$ = 8							; size = 4
_playernum$ = 12					; size = 4
_Got_AddPlayer PROC					; COMDAT

; 1966 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1967 : 	INT16 node, newplayernum;
; 1968 : 	boolean splitscreenplayer;
; 1969 : 	static UINT32 sendconfigtic = UINT32_MAX;
; 1970 : 
; 1971 : 	if (playernum != serverplayer && playernum != adminplayer)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00012	74 66		 je	 SHORT $LN2@Got_AddPla
  00014	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00017	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  0001d	74 5b		 je	 SHORT $LN2@Got_AddPla

; 1972 : 	{
; 1973 : 		// protect against hacked/buggy client
; 1974 : 		CONS_Printf(text[ILLEGALADDPLRCMD], player_names[playernum]);

  0001f	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00023	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00028	50		 push	 eax
  00029	b9 04 00 00 00	 mov	 ecx, 4
  0002e	6b d1 45	 imul	 edx, ecx, 69
  00031	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _CONS_Printf
  0003d	83 c4 08	 add	 esp, 8

; 1975 : 		if (server)

  00040	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00047	74 2c		 je	 SHORT $LN3@Got_AddPla

; 1976 : 		{
; 1977 : 			XBOXSTATIC UINT8 buf[2];
; 1978 : 
; 1979 : 			buf[0] = (UINT8)playernum;

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00054	88 54 0d f0	 mov	 BYTE PTR _buf$3[ebp+ecx], dl

; 1980 : 			buf[1] = KICK_MSG_CON_FAIL;

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	c1 e0 00	 shl	 eax, 0
  00060	c6 44 05 f0 02	 mov	 BYTE PTR _buf$3[ebp+eax], 2

; 1981 : 			SendNetXCmd(XD_KICK, &buf, 2);

  00065	6a 02		 push	 2
  00067	8d 45 f0	 lea	 eax, DWORD PTR _buf$3[ebp]
  0006a	50		 push	 eax
  0006b	6a 03		 push	 3
  0006d	e8 00 00 00 00	 call	 _SendNetXCmd
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Got_AddPla:

; 1982 : 		}
; 1983 : 		return;

  00075	e9 4f 02 00 00	 jmp	 $LN15@Got_AddPla
$LN2@Got_AddPla:

; 1984 : 	}
; 1985 : 
; 1986 : 	node = READUINT8(*p);

  0007a	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  00083	66 89 55 fc	 mov	 WORD PTR _node$[ebp], dx
  00087	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	83 c1 01	 add	 ecx, 1
  0008f	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00092	89 0a		 mov	 DWORD PTR [edx], ecx

; 1987 : 	newplayernum = READUINT8(*p);

  00094	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  0009d	66 89 55 f8	 mov	 WORD PTR _newplayernum$[ebp], dx
  000a1	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	83 c1 01	 add	 ecx, 1
  000a9	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000ac	89 0a		 mov	 DWORD PTR [edx], ecx

; 1988 : 	splitscreenplayer = newplayernum & 0x80;

  000ae	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  000b2	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000b7	89 45 f4	 mov	 DWORD PTR _splitscreenplayer$[ebp], eax

; 1989 : 	newplayernum &= ~0x80;

  000ba	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  000be	25 7f ff ff ff	 and	 eax, -129		; ffffff7fH
  000c3	66 89 45 f8	 mov	 WORD PTR _newplayernum$[ebp], ax

; 1990 : 
; 1991 : 	playeringame[newplayernum] = true;

  000c7	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  000cb	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _playeringame[eax*4], 1

; 1992 : 	G_AddPlayer(newplayernum);

  000d6	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _G_AddPlayer
  000e0	83 c4 04	 add	 esp, 4

; 1993 : 	if (newplayernum+1 > doomcom->numslots)

  000e3	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  000e7	83 c0 01	 add	 eax, 1
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  000f0	0f bf 51 1a	 movsx	 edx, WORD PTR [ecx+26]
  000f4	3b c2		 cmp	 eax, edx
  000f6	7e 11		 jle	 SHORT $LN4@Got_AddPla

; 1994 : 		doomcom->numslots = (INT16)(newplayernum+1);

  000f8	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  000fc	83 c0 01	 add	 eax, 1
  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  00105	66 89 41 1a	 mov	 WORD PTR [ecx+26], ax
$LN4@Got_AddPla:

; 1995 : 
; 1996 : 	CONS_Printf(text[PLAYERINGAME], newplayernum+1, node);

  00109	0f bf 45 fc	 movsx	 eax, WORD PTR _node$[ebp]
  0010d	50		 push	 eax
  0010e	0f bf 4d f8	 movsx	 ecx, WORD PTR _newplayernum$[ebp]
  00112	83 c1 01	 add	 ecx, 1
  00115	51		 push	 ecx
  00116	ba 04 00 00 00	 mov	 edx, 4
  0011b	6b c2 46	 imul	 eax, edx, 70
  0011e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 _CONS_Printf
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1997 : 
; 1998 : 	// the server is creating my player
; 1999 : 	if (node == mynode)

  0012d	0f bf 45 fc	 movsx	 eax, WORD PTR _node$[ebp]
  00131	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _mynode
  00138	3b c1		 cmp	 eax, ecx
  0013a	0f 85 ab 00 00
	00		 jne	 $LN5@Got_AddPla

; 2000 : 	{
; 2001 : 		playernode[newplayernum] = 0; // for information only

  00140	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  00144	89 45 a8	 mov	 DWORD PTR $T1[ebp], eax
  00147	83 7d a8 20	 cmp	 DWORD PTR $T1[ebp], 32	; 00000020H
  0014b	73 02		 jae	 SHORT $LN17@Got_AddPla
  0014d	eb 06		 jmp	 SHORT $LN18@Got_AddPla
$LN17@Got_AddPla:
  0014f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00154	90		 npad	 1
$LN18@Got_AddPla:
  00155	8b 4d a8	 mov	 ecx, DWORD PTR $T1[ebp]
  00158	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _playernode[ecx], 0

; 2002 : 		if (!splitscreenplayer)

  0015f	83 7d f4 00	 cmp	 DWORD PTR _splitscreenplayer$[ebp], 0
  00163	75 47		 jne	 SHORT $LN7@Got_AddPla

; 2003 : 		{
; 2004 : 			consoleplayer = newplayernum;

  00165	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  00169	a3 00 00 00 00	 mov	 DWORD PTR _consoleplayer, eax

; 2005 : 			displayplayer = newplayernum;

  0016e	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  00172	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax

; 2006 : 			secondarydisplayplayer = newplayernum;

  00177	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  0017b	a3 00 00 00 00	 mov	 DWORD PTR _secondarydisplayplayer, eax

; 2007 : 			DEBFILE("spawning me\n");

  00180	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00187	74 21		 je	 SHORT $LN9@Got_AddPla
  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0018e	50		 push	 eax
  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HPDDPHLN@spawning?5me?6@
  00194	e8 00 00 00 00	 call	 _fputs
  00199	83 c4 08	 add	 esp, 8
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 _fflush
  001a7	83 c4 04	 add	 esp, 4
$LN9@Got_AddPla:

; 2008 : 		}

  001aa	eb 33		 jmp	 SHORT $LN10@Got_AddPla
$LN7@Got_AddPla:

; 2009 : 		else
; 2010 : 		{
; 2011 : 			secondarydisplayplayer = newplayernum;

  001ac	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  001b0	a3 00 00 00 00	 mov	 DWORD PTR _secondarydisplayplayer, eax

; 2012 : 			DEBFILE("spawning my brother\n");

  001b5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  001bc	74 21		 je	 SHORT $LN10@Got_AddPla
  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  001c3	50		 push	 eax
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JAFICDDE@spawning?5my?5brother?6@
  001c9	e8 00 00 00 00	 call	 _fputs
  001ce	83 c4 08	 add	 esp, 8
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _fflush
  001dc	83 c4 04	 add	 esp, 4
$LN10@Got_AddPla:

; 2013 : 		}
; 2014 : 		addedtogame = true;

  001df	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _addedtogame, 1

; 2015 : 	}

  001e9	eb 4d		 jmp	 SHORT $LN12@Got_AddPla
$LN5@Got_AddPla:

; 2016 : 	else if (server && cv_showjoinaddress.value)

  001eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  001f2	74 44		 je	 SHORT $LN12@Got_AddPla
  001f4	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_showjoinaddress+20, 0
  001fb	74 3b		 je	 SHORT $LN12@Got_AddPla

; 2017 : 	{
; 2018 : 		const char *address;
; 2019 : 		if (I_GetNodeAddress && (address = I_GetNodeAddress(node)) != NULL)

  001fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_GetNodeAddress, 0
  00204	74 32		 je	 SHORT $LN12@Got_AddPla
  00206	0f bf 45 fc	 movsx	 eax, WORD PTR _node$[ebp]
  0020a	50		 push	 eax
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR _I_GetNodeAddress
  00211	83 c4 04	 add	 esp, 4
  00214	89 45 ec	 mov	 DWORD PTR _address$2[ebp], eax
  00217	83 7d ec 00	 cmp	 DWORD PTR _address$2[ebp], 0
  0021b	74 1b		 je	 SHORT $LN12@Got_AddPla

; 2020 : 			CONS_Printf(text[PLAYERADDRESS], address);

  0021d	8b 45 ec	 mov	 eax, DWORD PTR _address$2[ebp]
  00220	50		 push	 eax
  00221	b9 04 00 00 00	 mov	 ecx, 4
  00226	6b d1 47	 imul	 edx, ecx, 71
  00229	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0022f	50		 push	 eax
  00230	e8 00 00 00 00	 call	 _CONS_Printf
  00235	83 c4 08	 add	 esp, 8
$LN12@Got_AddPla:

; 2021 : 	}
; 2022 : 
; 2023 : 	// the new player sends his config
; 2024 : 	// and the old players send their configs to the new one
; 2025 : 	/// \todo fixthis
; 2026 : 	/// WARNING: this can cause a bottleneck in the txtcmd
; 2027 : 	///          this can also produce a consistency failure if the packet gets lost
; 2028 : 	///          because everybody knows the actual config except the joiner
; 2029 : 
; 2030 : 	// Don't forget to copy your name to the new location!
; 2031 : 	if (newplayernum == consoleplayer && newplayernum != 0)

  00238	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  0023c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00242	75 2c		 jne	 SHORT $LN13@Got_AddPla
  00244	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  00248	85 c0		 test	 eax, eax
  0024a	74 24		 je	 SHORT $LN13@Got_AddPla

; 2032 : 		strcpy(player_names[newplayernum], player_names[0]);

  0024c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00251	6b c8 00	 imul	 ecx, eax, 0
  00254	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  0025a	51		 push	 ecx
  0025b	0f bf 55 f8	 movsx	 edx, WORD PTR _newplayernum$[ebp]
  0025f	6b c2 16	 imul	 eax, edx, 22
  00262	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 _strcpy
  0026d	83 c4 08	 add	 esp, 8
$LN13@Got_AddPla:

; 2033 : 
; 2034 : 	// don't send the config more than once per tic (multiple players join)
; 2035 : 	if (sendconfigtic != gametic)

  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sendconfigtic@?1??Got_AddPlayer@@9@9
  00275	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _gametic
  0027b	74 10		 je	 SHORT $LN14@Got_AddPla

; 2036 : 	{
; 2037 : 		sendconfigtic = gametic;

  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00282	a3 00 00 00 00	 mov	 DWORD PTR ?sendconfigtic@?1??Got_AddPlayer@@9@9, eax

; 2038 : 		D_SendPlayerConfig();

  00287	e8 00 00 00 00	 call	 _D_SendPlayerConfig
  0028c	90		 npad	 1
$LN14@Got_AddPla:

; 2039 : 	}
; 2040 : 
; 2041 : 	if (server && motd[0] != '\0')

  0028d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00294	74 33		 je	 SHORT $LN15@Got_AddPla
  00296	b8 01 00 00 00	 mov	 eax, 1
  0029b	6b c8 00	 imul	 ecx, eax, 0
  0029e	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR _motd[ecx]
  002a5	85 d2		 test	 edx, edx
  002a7	74 20		 je	 SHORT $LN15@Got_AddPla

; 2042 : 		COM_BufAddText(va("sayto %d %s\n", newplayernum, motd));

  002a9	68 00 00 00 00	 push	 OFFSET _motd
  002ae	0f bf 45 f8	 movsx	 eax, WORD PTR _newplayernum$[ebp]
  002b2	50		 push	 eax
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LALGPJBL@sayto?5?$CFd?5?$CFs?6@
  002b8	e8 00 00 00 00	 call	 _va
  002bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 _COM_BufAddText
  002c6	83 c4 04	 add	 esp, 4
$LN15@Got_AddPla:

; 2043 : }

  002c9	5f		 pop	 edi
  002ca	5e		 pop	 esi
  002cb	5b		 pop	 ebx
  002cc	8b e5		 mov	 esp, ebp
  002ce	5d		 pop	 ebp
  002cf	c3		 ret	 0
_Got_AddPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Got_KickCmd
_TEXT	SEGMENT
tv192 = -132						; size = 4
tv265 = -132						; size = 4
tv282 = -132						; size = 4
_tmp_i$1 = -64						; size = 4
_tmp_i$2 = -60						; size = 4
_i$3 = -56						; size = 4
_reason$ = -52						; size = 4
_buf$ = -48						; size = 33
_msg$ = -12						; size = 4
_pnum$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_playernum$ = 12					; size = 4
_Got_KickCmd PROC					; COMDAT

; 1642 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1643 : 	INT32 pnum, msg;
; 1644 : 	XBOXSTATIC char buf[3 + MAX_REASONLENGTH];
; 1645 : 	char *reason = buf;

  00016	8d 45 d0	 lea	 eax, DWORD PTR _buf$[ebp]
  00019	89 45 cc	 mov	 DWORD PTR _reason$[ebp], eax

; 1646 : 
; 1647 : 	pnum = READUINT8(*p);

  0001c	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00024	89 55 f8	 mov	 DWORD PTR _pnum$[ebp], edx
  00027	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	83 c1 01	 add	 ecx, 1
  0002f	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00032	89 0a		 mov	 DWORD PTR [edx], ecx

; 1648 : 	msg = READUINT8(*p);

  00034	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0003c	89 55 f4	 mov	 DWORD PTR _msg$[ebp], edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	83 c1 01	 add	 ecx, 1
  00047	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0004a	89 0a		 mov	 DWORD PTR [edx], ecx

; 1649 : 
; 1650 : 	if (pnum == serverplayer && playernum == adminplayer)

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  0004f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00055	75 42		 jne	 SHORT $LN13@Got_KickCm
  00057	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0005a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00060	75 37		 jne	 SHORT $LN13@Got_KickCm

; 1651 : 	{
; 1652 : 		CONS_Printf("%s", text[SERVERREMOTESHUTDOWN]);

  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	6b c8 3a	 imul	 ecx, eax, 58
  0006a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00070	52		 push	 edx
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00076	e8 00 00 00 00	 call	 _CONS_Printf
  0007b	83 c4 08	 add	 esp, 8

; 1653 : 
; 1654 : 		if (server)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00085	74 0d		 je	 SHORT $LN14@Got_KickCm

; 1655 : 			COM_BufAddText("quit\n");

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_05FAEIHPAI@quit?6@
  0008c	e8 00 00 00 00	 call	 _COM_BufAddText
  00091	83 c4 04	 add	 esp, 4
$LN14@Got_KickCm:

; 1656 : 
; 1657 : 		return;

  00094	e9 05 05 00 00	 jmp	 $LN31@Got_KickCm
$LN13@Got_KickCm:

; 1658 : 	}
; 1659 : 
; 1660 : 	// Is playernum authorized to make this kick?
; 1661 : 	if (playernum != serverplayer && playernum != adminplayer
; 1662 : 		&& !(playerpernode[playernode[playernum]] == 2

  00099	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0009c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  000a2	0f 84 e5 00 00
	00		 je	 $LN15@Got_KickCm
  000a8	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000ab	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  000b1	0f 84 d6 00 00
	00		 je	 $LN15@Got_KickCm
  000b7	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000ba	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  000c1	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _playerpernode[ecx]
  000c8	83 fa 02	 cmp	 edx, 2
  000cb	75 1a		 jne	 SHORT $LN16@Got_KickCm
  000cd	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000d0	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  000d7	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR _nodetoplayer2[ecx]
  000de	3b 55 f8	 cmp	 edx, DWORD PTR _pnum$[ebp]
  000e1	0f 84 a6 00 00
	00		 je	 $LN15@Got_KickCm
$LN16@Got_KickCm:

; 1663 : 		&& nodetoplayer2[playernode[playernum]] == pnum))
; 1664 : 	{
; 1665 : 		// We received a kick command from someone who isn't the
; 1666 : 		// server or admin, and who isn't in splitscreen removing
; 1667 : 		// player 2. Thus, it must be someone with a modified
; 1668 : 		// binary, trying to kick someone but without having
; 1669 : 		// authorization.
; 1670 : 
; 1671 : 		// We deal with this by changing the kick reason to
; 1672 : 		// "consistency failure" and kicking the offending user
; 1673 : 		// instead.
; 1674 : 
; 1675 : 		// Note: Splitscreen in netgames is broken because of
; 1676 : 		// this. Only the server has any idea of which players
; 1677 : 		// are using splitscreen on the same computer, so
; 1678 : 		// clients cannot always determine if a kick is
; 1679 : 		// legitimate.
; 1680 : 
; 1681 : 		CONS_Printf(text[ILLEGALKICKCMD], player_names[playernum], pnum);

  000e7	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  000ea	50		 push	 eax
  000eb	6b 4d 0c 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  000ef	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  000f5	51		 push	 ecx
  000f6	ba 04 00 00 00	 mov	 edx, 4
  000fb	6b c2 3b	 imul	 eax, edx, 59
  000fe	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 _CONS_Printf
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1682 : 		// In debug, print a longer message with more details.
; 1683 : #ifndef _DEBUG
; 1684 : 		if (cv_debug || devparm)
; 1685 : #endif
; 1686 : 		{
; 1687 : 			CONS_Printf("So, you must be asking, why is this an illegal kick?\n"

  0010d	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  00110	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  00117	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR _nodetoplayer2[ecx]
  0011e	52		 push	 edx
  0011f	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  00122	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  00129	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _playerpernode[ecx]
  00130	52		 push	 edx
  00131	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  00134	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  0013b	51		 push	 ecx
  0013c	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  0013f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _playernode[edx]
  00146	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer2[eax]
  0014d	51		 push	 ecx
  0014e	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  00151	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _playernode[edx]
  00158	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playerpernode[eax]
  0015f	51		 push	 ecx
  00160	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  00163	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _playernode[edx]
  0016a	50		 push	 eax
  0016b	8b 4d f8	 mov	 ecx, DWORD PTR _pnum$[ebp]
  0016e	51		 push	 ecx
  0016f	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  00172	52		 push	 edx
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_0BKO@LEGILPEE@So?0?5you?5must?5be?5asking?0?5why?5is?5@
  00178	e8 00 00 00 00	 call	 _CONS_Printf
  0017d	83 c4 24	 add	 esp, 36			; 00000024H

; 1688 : 			            "Well, let's take a look at the facts, shall we?\n"
; 1689 : 			            "\n"
; 1690 : 			            "playernum (this is the guy who did it), he's %d.\n"
; 1691 : 			            "pnum (the guy he's trying to kick) is %d.\n"
; 1692 : 			            "playernum's node is %d.\n"
; 1693 : 			            "That node has %d players.\n"
; 1694 : 			            "Player 2 on that node is %d.\n"
; 1695 : 			            "pnum's node is %d.\n"
; 1696 : 			            "That node has %d players.\n"
; 1697 : 			            "Player 2 on that node is %d.\n"
; 1698 : 			            "\n"
; 1699 : 			            "If you think this is a bug, please report it, including all of the details above.\n",
; 1700 : 				playernum, pnum,
; 1701 : 				playernode[playernum], playerpernode[playernode[playernum]],
; 1702 : 				nodetoplayer2[playernode[playernum]],
; 1703 : 				playernode[pnum], playerpernode[playernode[pnum]],
; 1704 : 				nodetoplayer2[playernode[pnum]]);
; 1705 : 		};
; 1706 : 		pnum = playernum;

  00180	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00183	89 45 f8	 mov	 DWORD PTR _pnum$[ebp], eax

; 1707 : 		msg = KICK_MSG_CON_FAIL;

  00186	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _msg$[ebp], 2
$LN15@Got_KickCm:

; 1708 : 	}
; 1709 : 
; 1710 : 	CONS_Printf(text[KICKEDPLAYERNAME], player_names[pnum]);

  0018d	6b 45 f8 16	 imul	 eax, DWORD PTR _pnum$[ebp], 22
  00191	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00196	50		 push	 eax
  00197	b9 04 00 00 00	 mov	 ecx, 4
  0019c	6b d1 3c	 imul	 edx, ecx, 60
  0019f	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 _CONS_Printf
  001ab	83 c4 08	 add	 esp, 8

; 1711 : 
; 1712 : 	// If a verified admin banned someone, the server needs to know about it.
; 1713 : 	// If the playernum isn't zero (the server) then the server needs to record the ban.
; 1714 : 	if (server && playernum && msg == KICK_MSG_BANNED)

  001ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  001b5	74 49		 je	 SHORT $LN18@Got_KickCm
  001b7	83 7d 0c 00	 cmp	 DWORD PTR _playernum$[ebp], 0
  001bb	74 43		 je	 SHORT $LN18@Got_KickCm
  001bd	83 7d f4 05	 cmp	 DWORD PTR _msg$[ebp], 5
  001c1	75 3d		 jne	 SHORT $LN18@Got_KickCm

; 1715 : 	{
; 1716 : 		if (I_Ban && !I_Ban(playernode[(INT32)pnum]))

  001c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_Ban, 0
  001ca	74 34		 je	 SHORT $LN18@Got_KickCm
  001cc	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  001cf	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  001d6	51		 push	 ecx
  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR _I_Ban
  001dd	83 c4 04	 add	 esp, 4
  001e0	85 c0		 test	 eax, eax
  001e2	75 1c		 jne	 SHORT $LN18@Got_KickCm

; 1717 : 		{
; 1718 : 			CONS_Printf("%s", text[TOOMANYBANS]);

  001e4	b8 04 00 00 00	 mov	 eax, 4
  001e9	6b c8 37	 imul	 ecx, eax, 55
  001ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001f2	52		 push	 edx
  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001f8	e8 00 00 00 00	 call	 _CONS_Printf
  001fd	83 c4 08	 add	 esp, 8
$LN18@Got_KickCm:

; 1719 : 		}
; 1720 : 	}
; 1721 : 
; 1722 : 	switch (msg)

  00200	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp]
  00203	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv192[ebp], eax
  00209	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv192[ebp]
  0020f	83 e9 01	 sub	 ecx, 1
  00212	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv192[ebp], ecx
  00218	83 bd 7c ff ff
	ff 07		 cmp	 DWORD PTR tv192[ebp], 7
  0021f	0f 87 9f 02 00
	00		 ja	 $LN2@Got_KickCm
  00225	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv192[ebp]
  0022b	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN43@Got_KickCm[edx*4]
$LN19@Got_KickCm:

; 1723 : 	{
; 1724 : 		case KICK_MSG_GO_AWAY:
; 1725 : 			CONS_Printf("%s", text[KICKEDGOAWAY]);

  00232	b8 04 00 00 00	 mov	 eax, 4
  00237	6b c8 3d	 imul	 ecx, eax, 61
  0023a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00240	52		 push	 edx
  00241	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00246	e8 00 00 00 00	 call	 _CONS_Printf
  0024b	83 c4 08	 add	 esp, 8

; 1726 : 			break;

  0024e	e9 71 02 00 00	 jmp	 $LN2@Got_KickCm
$LN20@Got_KickCm:

; 1727 : #ifdef NEWPING
; 1728 : 		case KICK_MSG_PING_HIGH:
; 1729 : 			CONS_Printf("%s", text[KICKEDPINGTOOHIGH]);

  00253	b8 04 00 00 00	 mov	 eax, 4
  00258	6b c8 3f	 imul	 ecx, eax, 63
  0025b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00261	52		 push	 edx
  00262	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00267	e8 00 00 00 00	 call	 _CONS_Printf
  0026c	83 c4 08	 add	 esp, 8

; 1730 : 			break;

  0026f	e9 50 02 00 00	 jmp	 $LN2@Got_KickCm
$LN21@Got_KickCm:

; 1731 : #endif
; 1732 : 		case KICK_MSG_CON_FAIL:
; 1733 : 			CONS_Printf("%s", text[KICKEDCONSFAIL]);

  00274	b8 04 00 00 00	 mov	 eax, 4
  00279	6b c8 3e	 imul	 ecx, eax, 62
  0027c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00282	52		 push	 edx
  00283	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00288	e8 00 00 00 00	 call	 _CONS_Printf
  0028d	83 c4 08	 add	 esp, 8

; 1734 : 
; 1735 : 			if (M_CheckParm("-consisdump")) // Helps debugging some problems

  00290	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JBOLFGPI@?9consisdump@
  00295	e8 00 00 00 00	 call	 _M_CheckParm
  0029a	83 c4 04	 add	 esp, 4
  0029d	85 c0		 test	 eax, eax
  0029f	0f 84 d1 00 00
	00		 je	 $LN5@Got_KickCm

; 1736 : 			{
; 1737 : 				INT32 i;
; 1738 : 
; 1739 : 				CONS_Printf(text[CONSIS_DUMP1], pnum);

  002a5	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  002a8	50		 push	 eax
  002a9	b9 04 00 00 00	 mov	 ecx, 4
  002ae	6b d1 4b	 imul	 edx, ecx, 75
  002b1	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 _CONS_Printf
  002bd	83 c4 08	 add	 esp, 8

; 1740 : 
; 1741 : 				for (i = 0; i < MAXPLAYERS; i++)

  002c0	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  002c7	eb 09		 jmp	 SHORT $LN6@Got_KickCm
$LN4@Got_KickCm:
  002c9	8b 45 c8	 mov	 eax, DWORD PTR _i$3[ebp]
  002cc	83 c0 01	 add	 eax, 1
  002cf	89 45 c8	 mov	 DWORD PTR _i$3[ebp], eax
$LN6@Got_KickCm:
  002d2	83 7d c8 20	 cmp	 DWORD PTR _i$3[ebp], 32	; 00000020H
  002d6	0f 8d 9a 00 00
	00		 jge	 $LN5@Got_KickCm

; 1742 : 				{
; 1743 : 					CONS_Printf("-------------------------------------\n");

  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GPCMCKNF@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  002e1	e8 00 00 00 00	 call	 _CONS_Printf
  002e6	83 c4 04	 add	 esp, 4

; 1744 : 					if (players[i].mo)

  002e9	69 45 c8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 508
  002f0	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  002f7	74 50		 je	 SHORT $LN23@Got_KickCm

; 1745 : 						CONS_Printf(text[CONSIS_DUMP2], i, players[i].mo->x, players[i].mo->y, players[i].mo->z);

  002f9	69 45 c8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 508
  00300	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00306	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00309	52		 push	 edx
  0030a	69 45 c8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 508
  00311	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00317	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0031a	52		 push	 edx
  0031b	69 45 c8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 508
  00322	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00328	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0032b	52		 push	 edx
  0032c	8b 45 c8	 mov	 eax, DWORD PTR _i$3[ebp]
  0032f	50		 push	 eax
  00330	b9 04 00 00 00	 mov	 ecx, 4
  00335	6b d1 4c	 imul	 edx, ecx, 76
  00338	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0033e	50		 push	 eax
  0033f	e8 00 00 00 00	 call	 _CONS_Printf
  00344	83 c4 14	 add	 esp, 20			; 00000014H
  00347	eb 1b		 jmp	 SHORT $LN24@Got_KickCm
$LN23@Got_KickCm:

; 1746 : 					else
; 1747 : 						CONS_Printf(text[CONSIS_DUMP3], i);

  00349	8b 45 c8	 mov	 eax, DWORD PTR _i$3[ebp]
  0034c	50		 push	 eax
  0034d	b9 04 00 00 00	 mov	 ecx, 4
  00352	6b d1 4d	 imul	 edx, ecx, 77
  00355	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 _CONS_Printf
  00361	83 c4 08	 add	 esp, 8
$LN24@Got_KickCm:

; 1748 : 					CONS_Printf("-------------------------------------\n");

  00364	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GPCMCKNF@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  00369	e8 00 00 00 00	 call	 _CONS_Printf
  0036e	83 c4 04	 add	 esp, 4

; 1749 : 				}

  00371	e9 53 ff ff ff	 jmp	 $LN4@Got_KickCm
$LN5@Got_KickCm:

; 1750 : 			}
; 1751 : 			break;

  00376	e9 49 01 00 00	 jmp	 $LN2@Got_KickCm
$LN25@Got_KickCm:

; 1752 : 		case KICK_MSG_TIMEOUT:
; 1753 : 			CONS_Printf("%s", text[LEFTGAME_TIMEOUT]);

  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	c1 e0 06	 shl	 eax, 6
  00383	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00389	51		 push	 ecx
  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0038f	e8 00 00 00 00	 call	 _CONS_Printf
  00394	83 c4 08	 add	 esp, 8

; 1754 : 			break;

  00397	e9 28 01 00 00	 jmp	 $LN2@Got_KickCm
$LN26@Got_KickCm:

; 1755 : 		case KICK_MSG_PLAYER_QUIT:
; 1756 : 			CONS_Printf("%s", text[LEFTGAME]);

  0039c	b8 04 00 00 00	 mov	 eax, 4
  003a1	6b c8 41	 imul	 ecx, eax, 65
  003a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  003aa	52		 push	 edx
  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  003b0	e8 00 00 00 00	 call	 _CONS_Printf
  003b5	83 c4 08	 add	 esp, 8

; 1757 : 			break;

  003b8	e9 07 01 00 00	 jmp	 $LN2@Got_KickCm
$LN27@Got_KickCm:

; 1758 : 		case KICK_MSG_BANNED:
; 1759 : 			CONS_Printf("%s", text[KICKEDBANNED]);

  003bd	b8 04 00 00 00	 mov	 eax, 4
  003c2	6b c8 42	 imul	 ecx, eax, 66
  003c5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  003cb	52		 push	 edx
  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  003d1	e8 00 00 00 00	 call	 _CONS_Printf
  003d6	83 c4 08	 add	 esp, 8

; 1760 : 			break;

  003d9	e9 e6 00 00 00	 jmp	 $LN2@Got_KickCm
$LN28@Got_KickCm:

; 1761 : 		case KICK_MSG_CUSTOM_KICK:
; 1762 : 			READSTRINGN(*p, reason, MAX_REASONLENGTH+1);

  003de	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _tmp_i$2[ebp], 0
  003e5	eb 09		 jmp	 SHORT $LN9@Got_KickCm
$LN7@Got_KickCm:
  003e7	8b 45 c4	 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  003ea	83 c0 01	 add	 eax, 1
  003ed	89 45 c4	 mov	 DWORD PTR _tmp_i$2[ebp], eax
$LN9@Got_KickCm:
  003f0	83 7d c4 1f	 cmp	 DWORD PTR _tmp_i$2[ebp], 31 ; 0000001fH
  003f4	73 36		 jae	 SHORT $LN8@Got_KickCm
  003f6	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  003f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003fb	8b 55 cc	 mov	 edx, DWORD PTR _reason$[ebp]
  003fe	03 55 c4	 add	 edx, DWORD PTR _tmp_i$2[ebp]
  00401	8a 01		 mov	 al, BYTE PTR [ecx]
  00403	88 02		 mov	 BYTE PTR [edx], al
  00405	8b 4d cc	 mov	 ecx, DWORD PTR _reason$[ebp]
  00408	03 4d c4	 add	 ecx, DWORD PTR _tmp_i$2[ebp]
  0040b	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0040e	89 95 7c ff ff
	ff		 mov	 DWORD PTR tv265[ebp], edx
  00414	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00417	8b 08		 mov	 ecx, DWORD PTR [eax]
  00419	83 c1 01	 add	 ecx, 1
  0041c	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0041f	89 0a		 mov	 DWORD PTR [edx], ecx
  00421	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv265[ebp], 0
  00428	74 02		 je	 SHORT $LN8@Got_KickCm
  0042a	eb bb		 jmp	 SHORT $LN7@Got_KickCm
$LN8@Got_KickCm:
  0042c	8b 45 cc	 mov	 eax, DWORD PTR _reason$[ebp]
  0042f	03 45 c4	 add	 eax, DWORD PTR _tmp_i$2[ebp]
  00432	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1763 : 			CONS_Printf(text[CUSTOMKICKMSG], reason);

  00435	8b 45 cc	 mov	 eax, DWORD PTR _reason$[ebp]
  00438	50		 push	 eax
  00439	b9 04 00 00 00	 mov	 ecx, 4
  0043e	6b d1 43	 imul	 edx, ecx, 67
  00441	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00447	50		 push	 eax
  00448	e8 00 00 00 00	 call	 _CONS_Printf
  0044d	83 c4 08	 add	 esp, 8

; 1764 : 			break;

  00450	eb 72		 jmp	 SHORT $LN2@Got_KickCm
$LN29@Got_KickCm:

; 1765 : 		case KICK_MSG_CUSTOM_BAN:
; 1766 : 			READSTRINGN(*p, reason, MAX_REASONLENGTH+1);

  00452	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _tmp_i$1[ebp], 0
  00459	eb 09		 jmp	 SHORT $LN12@Got_KickCm
$LN10@Got_KickCm:
  0045b	8b 45 c0	 mov	 eax, DWORD PTR _tmp_i$1[ebp]
  0045e	83 c0 01	 add	 eax, 1
  00461	89 45 c0	 mov	 DWORD PTR _tmp_i$1[ebp], eax
$LN12@Got_KickCm:
  00464	83 7d c0 1f	 cmp	 DWORD PTR _tmp_i$1[ebp], 31 ; 0000001fH
  00468	73 36		 jae	 SHORT $LN11@Got_KickCm
  0046a	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0046d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0046f	8b 55 cc	 mov	 edx, DWORD PTR _reason$[ebp]
  00472	03 55 c0	 add	 edx, DWORD PTR _tmp_i$1[ebp]
  00475	8a 01		 mov	 al, BYTE PTR [ecx]
  00477	88 02		 mov	 BYTE PTR [edx], al
  00479	8b 4d cc	 mov	 ecx, DWORD PTR _reason$[ebp]
  0047c	03 4d c0	 add	 ecx, DWORD PTR _tmp_i$1[ebp]
  0047f	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00482	89 95 7c ff ff
	ff		 mov	 DWORD PTR tv282[ebp], edx
  00488	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0048b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048d	83 c1 01	 add	 ecx, 1
  00490	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00493	89 0a		 mov	 DWORD PTR [edx], ecx
  00495	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv282[ebp], 0
  0049c	74 02		 je	 SHORT $LN11@Got_KickCm
  0049e	eb bb		 jmp	 SHORT $LN10@Got_KickCm
$LN11@Got_KickCm:
  004a0	8b 45 cc	 mov	 eax, DWORD PTR _reason$[ebp]
  004a3	03 45 c0	 add	 eax, DWORD PTR _tmp_i$1[ebp]
  004a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1767 : 			CONS_Printf(text[CUSTOMBANMSG], reason);

  004a9	8b 45 cc	 mov	 eax, DWORD PTR _reason$[ebp]
  004ac	50		 push	 eax
  004ad	b9 04 00 00 00	 mov	 ecx, 4
  004b2	6b d1 44	 imul	 edx, ecx, 68
  004b5	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  004bb	50		 push	 eax
  004bc	e8 00 00 00 00	 call	 _CONS_Printf
  004c1	83 c4 08	 add	 esp, 8
$LN2@Got_KickCm:

; 1768 : 			break;
; 1769 : 	}
; 1770 : 
; 1771 : 	if (pnum == consoleplayer)

  004c4	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  004c7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  004cd	0f 85 bf 00 00
	00		 jne	 $LN30@Got_KickCm

; 1772 : 	{
; 1773 : //		if (msg == KICK_MSG_CON_FAIL) SV_SavedGame();
; 1774 : 		D_QuitNetGame();

  004d3	e8 00 00 00 00	 call	 _D_QuitNetGame
  004d8	90		 npad	 1

; 1775 : 		CL_Reset();

  004d9	e8 00 00 00 00	 call	 _CL_Reset
  004de	90		 npad	 1

; 1776 : 		D_StartTitle();

  004df	e8 00 00 00 00	 call	 _D_StartTitle
  004e4	90		 npad	 1

; 1777 : 		if (msg == KICK_MSG_CON_FAIL)

  004e5	83 7d f4 02	 cmp	 DWORD PTR _msg$[ebp], 2
  004e9	75 16		 jne	 SHORT $LN32@Got_KickCm

; 1778 : 		{
; 1779 : 			M_StartMessage("You have been kicked\n(consistency failure)\nPress ESC\n", NULL,

  004eb	6a 00		 push	 0
  004ed	6a 00		 push	 0
  004ef	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ONBBOPKI@You?5have?5been?5kicked?6?$CIconsisten@
  004f4	e8 00 00 00 00	 call	 _M_StartMessage
  004f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1780 : 				MM_NOTHING);
; 1781 : 		}

  004fc	e9 8f 00 00 00	 jmp	 $LN41@Got_KickCm
$LN32@Got_KickCm:

; 1782 : #ifdef NEWPING
; 1783 : 		else if (msg == KICK_MSG_PING_HIGH)

  00501	83 7d f4 06	 cmp	 DWORD PTR _msg$[ebp], 6
  00505	75 13		 jne	 SHORT $LN34@Got_KickCm

; 1784 : 			M_StartMessage("You have been kicked\n(Broke ping limit)\nPress ESC\n", NULL, MM_NOTHING);

  00507	6a 00		 push	 0
  00509	6a 00		 push	 0
  0050b	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PJACJOMG@You?5have?5been?5kicked?6?$CIBroke?5pin@
  00510	e8 00 00 00 00	 call	 _M_StartMessage
  00515	83 c4 0c	 add	 esp, 12			; 0000000cH
  00518	eb 76		 jmp	 SHORT $LN41@Got_KickCm
$LN34@Got_KickCm:

; 1785 : #endif
; 1786 : 		else if (msg == KICK_MSG_BANNED)

  0051a	83 7d f4 05	 cmp	 DWORD PTR _msg$[ebp], 5
  0051e	75 13		 jne	 SHORT $LN36@Got_KickCm

; 1787 : 			M_StartMessage("You have been banned by the server\n\nPress ESC\n", NULL, MM_NOTHING);

  00520	6a 00		 push	 0
  00522	6a 00		 push	 0
  00524	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@PCMBLLLJ@You?5have?5been?5banned?5by?5the?5ser@
  00529	e8 00 00 00 00	 call	 _M_StartMessage
  0052e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00531	eb 5d		 jmp	 SHORT $LN41@Got_KickCm
$LN36@Got_KickCm:

; 1788 : 		else if (msg == KICK_MSG_CUSTOM_KICK)

  00533	83 7d f4 07	 cmp	 DWORD PTR _msg$[ebp], 7
  00537	75 20		 jne	 SHORT $LN38@Got_KickCm

; 1789 : 			M_StartMessage(va("You have been kicked\n(%s)\nPress ESC\n", reason), NULL, MM_NOTHING);

  00539	6a 00		 push	 0
  0053b	6a 00		 push	 0
  0053d	8b 45 cc	 mov	 eax, DWORD PTR _reason$[ebp]
  00540	50		 push	 eax
  00541	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JNBACEKM@You?5have?5been?5kicked?6?$CI?$CFs?$CJ?6Press@
  00546	e8 00 00 00 00	 call	 _va
  0054b	83 c4 08	 add	 esp, 8
  0054e	50		 push	 eax
  0054f	e8 00 00 00 00	 call	 _M_StartMessage
  00554	83 c4 0c	 add	 esp, 12			; 0000000cH
  00557	eb 37		 jmp	 SHORT $LN41@Got_KickCm
$LN38@Got_KickCm:

; 1790 : 		else if (msg == KICK_MSG_CUSTOM_BAN)

  00559	83 7d f4 08	 cmp	 DWORD PTR _msg$[ebp], 8
  0055d	75 20		 jne	 SHORT $LN40@Got_KickCm

; 1791 : 			M_StartMessage(va("You have been banned\n(%s)\nPress ESC\n", reason), NULL, MM_NOTHING);

  0055f	6a 00		 push	 0
  00561	6a 00		 push	 0
  00563	8b 45 cc	 mov	 eax, DWORD PTR _reason$[ebp]
  00566	50		 push	 eax
  00567	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DMMCPFBC@You?5have?5been?5banned?6?$CI?$CFs?$CJ?6Press@
  0056c	e8 00 00 00 00	 call	 _va
  00571	83 c4 08	 add	 esp, 8
  00574	50		 push	 eax
  00575	e8 00 00 00 00	 call	 _M_StartMessage
  0057a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0057d	eb 11		 jmp	 SHORT $LN41@Got_KickCm
$LN40@Got_KickCm:

; 1792 : 		else
; 1793 : 			M_StartMessage("You have been kicked by the server\n\nPress ESC\n", NULL, MM_NOTHING);

  0057f	6a 00		 push	 0
  00581	6a 00		 push	 0
  00583	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MEGGPMPC@You?5have?5been?5kicked?5by?5the?5ser@
  00588	e8 00 00 00 00	 call	 _M_StartMessage
  0058d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@Got_KickCm:

; 1794 : 	}

  00590	eb 0c		 jmp	 SHORT $LN31@Got_KickCm
$LN30@Got_KickCm:

; 1795 : 	else
; 1796 : 		CL_RemovePlayer(pnum);

  00592	8b 45 f8	 mov	 eax, DWORD PTR _pnum$[ebp]
  00595	50		 push	 eax
  00596	e8 00 00 00 00	 call	 _CL_RemovePlayer
  0059b	83 c4 04	 add	 esp, 4
$LN31@Got_KickCm:

; 1797 : }

  0059e	5f		 pop	 edi
  0059f	5e		 pop	 esi
  005a0	5b		 pop	 ebx
  005a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005a4	33 cd		 xor	 ecx, ebp
  005a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ab	8b e5		 mov	 esp, ebp
  005ad	5d		 pop	 ebp
  005ae	c3		 ret	 0
  005af	90		 npad	 1
$LN43@Got_KickCm:
  005b0	00 00 00 00	 DD	 $LN19@Got_KickCm
  005b4	00 00 00 00	 DD	 $LN21@Got_KickCm
  005b8	00 00 00 00	 DD	 $LN26@Got_KickCm
  005bc	00 00 00 00	 DD	 $LN25@Got_KickCm
  005c0	00 00 00 00	 DD	 $LN27@Got_KickCm
  005c4	00 00 00 00	 DD	 $LN20@Got_KickCm
  005c8	00 00 00 00	 DD	 $LN28@Got_KickCm
  005cc	00 00 00 00	 DD	 $LN29@Got_KickCm
_Got_KickCmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Command_Kick
_TEXT	SEGMENT
_p_tmp$1 = -112						; size = 4
_p_tmp$2 = -108						; size = 4
_tmp_i$3 = -104						; size = 4
_p_tmp$4 = -100						; size = 4
_message$5 = -96					; size = 30
_j$6 = -64						; size = 4
_i$7 = -60						; size = 4
_p_tmp$8 = -56						; size = 4
_p_tmp$9 = -52						; size = 4
_pn$10 = -45						; size = 1
_p$ = -44						; size = 4
_buf$ = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_Command_Kick PROC					; COMDAT

; 1597 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1598 : 	XBOXSTATIC UINT8 buf[3 + MAX_REASONLENGTH];
; 1599 : 	UINT8 *p = buf;

  00016	8d 45 d8	 lea	 eax, DWORD PTR _buf$[ebp]
  00019	89 45 d4	 mov	 DWORD PTR _p$[ebp], eax

; 1600 : 
; 1601 : 	if (COM_Argc() == 1)

  0001c	e8 00 00 00 00	 call	 _COM_Argc
  00021	83 f8 01	 cmp	 eax, 1
  00024	75 21		 jne	 SHORT $LN23@Command_Ki

; 1602 : 	{
; 1603 : 		CONS_Printf("%s", text[KICKHELP]);

  00026	b8 04 00 00 00	 mov	 eax, 4
  0002b	6b c8 39	 imul	 ecx, eax, 57
  0002e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00034	52		 push	 edx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0003a	e8 00 00 00 00	 call	 _CONS_Printf
  0003f	83 c4 08	 add	 esp, 8

; 1604 : 		return;

  00042	e9 ce 01 00 00	 jmp	 $LN25@Command_Ki
$LN23@Command_Ki:

; 1605 : 	}
; 1606 : 
; 1607 : 	if (server || adminplayer == consoleplayer)

  00047	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0004e	75 11		 jne	 SHORT $LN26@Command_Ki
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00055	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0005b	0f 85 98 01 00
	00		 jne	 $LN24@Command_Ki
$LN26@Command_Ki:

; 1608 : 	{
; 1609 : 		const SINT8 pn = nametonum(COM_Argv(1));

  00061	6a 01		 push	 1
  00063	e8 00 00 00 00	 call	 _COM_Argv
  00068	83 c4 04	 add	 esp, 4
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _nametonum
  00071	83 c4 04	 add	 esp, 4
  00074	88 45 d3	 mov	 BYTE PTR _pn$10[ebp], al
$LN4@Command_Ki:

; 1610 : 		WRITESINT8(p, pn);

  00077	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  0007a	89 45 cc	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  0007d	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00080	8a 4d d3	 mov	 cl, BYTE PTR _pn$10[ebp]
  00083	88 08		 mov	 BYTE PTR [eax], cl
  00085	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00088	83 c0 01	 add	 eax, 1
  0008b	89 45 cc	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  0008e	8b 45 cc	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00091	89 45 d4	 mov	 DWORD PTR _p$[ebp], eax
  00094	33 c0		 xor	 eax, eax
  00096	75 df		 jne	 SHORT $LN4@Command_Ki

; 1611 : 		if (pn == -1 || pn == 0)

  00098	0f be 45 d3	 movsx	 eax, BYTE PTR _pn$10[ebp]
  0009c	83 f8 ff	 cmp	 eax, -1
  0009f	74 08		 je	 SHORT $LN28@Command_Ki
  000a1	0f be 45 d3	 movsx	 eax, BYTE PTR _pn$10[ebp]
  000a5	85 c0		 test	 eax, eax
  000a7	75 05		 jne	 SHORT $LN27@Command_Ki
$LN28@Command_Ki:

; 1612 : 			return;

  000a9	e9 67 01 00 00	 jmp	 $LN25@Command_Ki
$LN27@Command_Ki:

; 1613 : 		if (COM_Argc() == 2)

  000ae	e8 00 00 00 00	 call	 _COM_Argc
  000b3	83 f8 02	 cmp	 eax, 2
  000b6	75 34		 jne	 SHORT $LN29@Command_Ki
$LN7@Command_Ki:

; 1614 : 		{
; 1615 : 			WRITEUINT8(p, KICK_MSG_GO_AWAY);

  000b8	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  000bb	89 45 c8	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  000be	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000c1	c6 00 01	 mov	 BYTE PTR [eax], 1
  000c4	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000c7	83 c0 01	 add	 eax, 1
  000ca	89 45 c8	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  000cd	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000d0	89 45 d4	 mov	 DWORD PTR _p$[ebp], eax
  000d3	33 c0		 xor	 eax, eax
  000d5	75 e1		 jne	 SHORT $LN7@Command_Ki

; 1616 : 			SendNetXCmd(XD_KICK, &buf, 2);

  000d7	6a 02		 push	 2
  000d9	8d 45 d8	 lea	 eax, DWORD PTR _buf$[ebp]
  000dc	50		 push	 eax
  000dd	6a 03		 push	 3
  000df	e8 00 00 00 00	 call	 _SendNetXCmd
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1617 : 		}

  000e7	e9 0b 01 00 00	 jmp	 $LN30@Command_Ki
$LN29@Command_Ki:

; 1618 : 		else
; 1619 : 		{
; 1620 : 			size_t i, j = COM_Argc();

  000ec	e8 00 00 00 00	 call	 _COM_Argc
  000f1	89 45 c0	 mov	 DWORD PTR _j$6[ebp], eax

; 1621 : 			char message[MAX_REASONLENGTH];
; 1622 : 
; 1623 : 			//Steal from the motd code so you don't have to put the reason in quotes.
; 1624 : 			strlcpy(message, COM_Argv(2), sizeof message);

  000f4	6a 1e		 push	 30			; 0000001eH
  000f6	6a 02		 push	 2
  000f8	e8 00 00 00 00	 call	 _COM_Argv
  000fd	83 c4 04	 add	 esp, 4
  00100	50		 push	 eax
  00101	8d 45 a0	 lea	 eax, DWORD PTR _message$5[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _strlcpy
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1625 : 			for (i = 3; i < j; i++)

  0010d	c7 45 c4 03 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 3
  00114	eb 09		 jmp	 SHORT $LN10@Command_Ki
$LN8@Command_Ki:
  00116	8b 45 c4	 mov	 eax, DWORD PTR _i$7[ebp]
  00119	83 c0 01	 add	 eax, 1
  0011c	89 45 c4	 mov	 DWORD PTR _i$7[ebp], eax
$LN10@Command_Ki:
  0011f	8b 45 c4	 mov	 eax, DWORD PTR _i$7[ebp]
  00122	3b 45 c0	 cmp	 eax, DWORD PTR _j$6[ebp]
  00125	73 30		 jae	 SHORT $LN9@Command_Ki

; 1626 : 			{
; 1627 : 				strlcat(message, " ", sizeof message);

  00127	6a 1e		 push	 30			; 0000001eH
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  0012e	8d 45 a0	 lea	 eax, DWORD PTR _message$5[ebp]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _strlcat
  00137	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1628 : 				strlcat(message, COM_Argv(i), sizeof message);

  0013a	6a 1e		 push	 30			; 0000001eH
  0013c	8b 45 c4	 mov	 eax, DWORD PTR _i$7[ebp]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 _COM_Argv
  00145	83 c4 04	 add	 esp, 4
  00148	50		 push	 eax
  00149	8d 4d a0	 lea	 ecx, DWORD PTR _message$5[ebp]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _strlcat
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1629 : 			}

  00155	eb bf		 jmp	 SHORT $LN8@Command_Ki
$LN9@Command_Ki:

; 1630 : 
; 1631 : 			WRITEUINT8(p, KICK_MSG_CUSTOM_KICK);

  00157	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  0015a	89 45 9c	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0015d	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00160	c6 00 07	 mov	 BYTE PTR [eax], 7
  00163	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00166	83 c0 01	 add	 eax, 1
  00169	89 45 9c	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0016c	8b 45 9c	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0016f	89 45 d4	 mov	 DWORD PTR _p$[ebp], eax
  00172	33 c0		 xor	 eax, eax
  00174	75 e1		 jne	 SHORT $LN9@Command_Ki

; 1632 : 			WRITESTRINGN(p, message, MAX_REASONLENGTH);

  00176	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _tmp_i$3[ebp], 0
  0017d	eb 09		 jmp	 SHORT $LN16@Command_Ki
$LN14@Command_Ki:
  0017f	8b 45 98	 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 98	 mov	 DWORD PTR _tmp_i$3[ebp], eax
$LN16@Command_Ki:
  00188	83 7d 98 1e	 cmp	 DWORD PTR _tmp_i$3[ebp], 30 ; 0000001eH
  0018c	73 33		 jae	 SHORT $LN15@Command_Ki
  0018e	8b 45 98	 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  00191	0f be 4c 05 a0	 movsx	 ecx, BYTE PTR _message$5[ebp+eax]
  00196	85 c9		 test	 ecx, ecx
  00198	74 27		 je	 SHORT $LN15@Command_Ki
$LN19@Command_Ki:
  0019a	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  0019d	89 45 94	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001a0	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001a3	8b 4d 98	 mov	 ecx, DWORD PTR _tmp_i$3[ebp]
  001a6	8a 54 0d a0	 mov	 dl, BYTE PTR _message$5[ebp+ecx]
  001aa	88 10		 mov	 BYTE PTR [eax], dl
  001ac	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001af	83 c0 01	 add	 eax, 1
  001b2	89 45 94	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001b5	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001b8	89 45 d4	 mov	 DWORD PTR _p$[ebp], eax
  001bb	33 c0		 xor	 eax, eax
  001bd	75 db		 jne	 SHORT $LN19@Command_Ki
  001bf	eb be		 jmp	 SHORT $LN14@Command_Ki
$LN15@Command_Ki:
  001c1	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  001c4	89 45 90	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001c7	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001ca	c6 00 00	 mov	 BYTE PTR [eax], 0
  001cd	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001d0	83 c0 01	 add	 eax, 1
  001d3	89 45 90	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001d6	8b 45 90	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001d9	89 45 d4	 mov	 DWORD PTR _p$[ebp], eax
  001dc	33 c0		 xor	 eax, eax
  001de	75 e1		 jne	 SHORT $LN15@Command_Ki

; 1633 : 			SendNetXCmd(XD_KICK, &buf, p - buf);

  001e0	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  001e3	8d 4d d8	 lea	 ecx, DWORD PTR _buf$[ebp]
  001e6	2b c1		 sub	 eax, ecx
  001e8	50		 push	 eax
  001e9	8d 55 d8	 lea	 edx, DWORD PTR _buf$[ebp]
  001ec	52		 push	 edx
  001ed	6a 03		 push	 3
  001ef	e8 00 00 00 00	 call	 _SendNetXCmd
  001f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN30@Command_Ki:

; 1634 : 		}
; 1635 : 	}

  001f7	eb 1c		 jmp	 SHORT $LN25@Command_Ki
$LN24@Command_Ki:

; 1636 : 	else
; 1637 : 		CONS_Printf("%s", text[YOUARENOTTHESERVER]);

  001f9	b8 04 00 00 00	 mov	 eax, 4
  001fe	6b c8 38	 imul	 ecx, eax, 56
  00201	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00207	52		 push	 edx
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0020d	e8 00 00 00 00	 call	 _CONS_Printf
  00212	83 c4 08	 add	 esp, 8
$LN25@Command_Ki:

; 1638 : }

  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	5b		 pop	 ebx
  00218	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021b	33 cd		 xor	 ecx, ebp
  0021d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c3		 ret	 0
_Command_Kick ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Command_Ban
_TEXT	SEGMENT
_p_tmp$1 = -120						; size = 4
_p_tmp$2 = -116						; size = 4
_tmp_i$3 = -112						; size = 4
_p_tmp$4 = -108						; size = 4
_message$5 = -104					; size = 30
_j$6 = -72						; size = 4
_i$7 = -68						; size = 4
_p_tmp$8 = -64						; size = 4
_p_tmp$9 = -60						; size = 4
_p_tmp$10 = -56						; size = 4
_node$11 = -52						; size = 4
_pn$12 = -45						; size = 1
_p$13 = -44						; size = 4
_buf$14 = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_Command_Ban PROC					; COMDAT

; 1539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1540 : 	if (COM_Argc() == 1)

  00016	e8 00 00 00 00	 call	 _COM_Argc
  0001b	83 f8 01	 cmp	 eax, 1
  0001e	75 21		 jne	 SHORT $LN26@Command_Ba

; 1541 : 	{
; 1542 : 		CONS_Printf("%s", text[BANHELP]);

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	6b c8 36	 imul	 ecx, eax, 54
  00028	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002e	52		 push	 edx
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00034	e8 00 00 00 00	 call	 _CONS_Printf
  00039	83 c4 08	 add	 esp, 8

; 1543 : 		return;

  0003c	e9 61 02 00 00	 jmp	 $LN28@Command_Ba
$LN26@Command_Ba:

; 1544 : 	}
; 1545 : 
; 1546 : 	if (server || adminplayer == consoleplayer)

  00041	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00048	75 11		 jne	 SHORT $LN29@Command_Ba
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  0004f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00055	0f 85 2b 02 00
	00		 jne	 $LN27@Command_Ba
$LN29@Command_Ba:

; 1547 : 	{
; 1548 : 		XBOXSTATIC UINT8 buf[3 + MAX_REASONLENGTH];
; 1549 : 		UINT8 *p = buf;

  0005b	8d 45 d8	 lea	 eax, DWORD PTR _buf$14[ebp]
  0005e	89 45 d4	 mov	 DWORD PTR _p$13[ebp], eax

; 1550 : 		const SINT8 pn = nametonum(COM_Argv(1));

  00061	6a 01		 push	 1
  00063	e8 00 00 00 00	 call	 _COM_Argv
  00068	83 c4 04	 add	 esp, 4
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _nametonum
  00071	83 c4 04	 add	 esp, 4
  00074	88 45 d3	 mov	 BYTE PTR _pn$12[ebp], al

; 1551 : 		const INT32 node = playernode[(INT32)pn];

  00077	0f be 45 d3	 movsx	 eax, BYTE PTR _pn$12[ebp]
  0007b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  00082	89 4d cc	 mov	 DWORD PTR _node$11[ebp], ecx

; 1552 : 
; 1553 : 		if (pn == -1 || pn == 0)

  00085	0f be 45 d3	 movsx	 eax, BYTE PTR _pn$12[ebp]
  00089	83 f8 ff	 cmp	 eax, -1
  0008c	74 08		 je	 SHORT $LN32@Command_Ba
  0008e	0f be 45 d3	 movsx	 eax, BYTE PTR _pn$12[ebp]
  00092	85 c0		 test	 eax, eax
  00094	75 07		 jne	 SHORT $LN30@Command_Ba
$LN32@Command_Ba:

; 1554 : 			return;

  00096	e9 07 02 00 00	 jmp	 $LN28@Command_Ba
  0009b	eb 21		 jmp	 SHORT $LN3@Command_Ba
$LN30@Command_Ba:

; 1555 : 		else
; 1556 : 			WRITEUINT8(p, pn);

  0009d	8b 45 d4	 mov	 eax, DWORD PTR _p$13[ebp]
  000a0	89 45 c8	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  000a3	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000a6	8a 4d d3	 mov	 cl, BYTE PTR _pn$12[ebp]
  000a9	88 08		 mov	 BYTE PTR [eax], cl
  000ab	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 c8	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  000b4	8b 45 c8	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  000b7	89 45 d4	 mov	 DWORD PTR _p$13[ebp], eax
  000ba	33 c0		 xor	 eax, eax
  000bc	75 df		 jne	 SHORT $LN30@Command_Ba
$LN3@Command_Ba:

; 1557 : 		if (I_Ban && !I_Ban(node))

  000be	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_Ban, 0
  000c5	74 61		 je	 SHORT $LN33@Command_Ba
  000c7	8b 45 cc	 mov	 eax, DWORD PTR _node$11[ebp]
  000ca	50		 push	 eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR _I_Ban
  000d1	83 c4 04	 add	 esp, 4
  000d4	85 c0		 test	 eax, eax
  000d6	75 50		 jne	 SHORT $LN33@Command_Ba

; 1558 : 		{
; 1559 : 			CONS_Printf("%s", text[TOOMANYBANS]);

  000d8	b8 04 00 00 00	 mov	 eax, 4
  000dd	6b c8 37	 imul	 ecx, eax, 55
  000e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000e6	52		 push	 edx
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000ec	e8 00 00 00 00	 call	 _CONS_Printf
  000f1	83 c4 08	 add	 esp, 8
$LN7@Command_Ba:

; 1560 : 			WRITEUINT8(p, KICK_MSG_GO_AWAY);

  000f4	8b 45 d4	 mov	 eax, DWORD PTR _p$13[ebp]
  000f7	89 45 c4	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  000fa	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  000fd	c6 00 01	 mov	 BYTE PTR [eax], 1
  00100	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00103	83 c0 01	 add	 eax, 1
  00106	89 45 c4	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00109	8b 45 c4	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0010c	89 45 d4	 mov	 DWORD PTR _p$13[ebp], eax
  0010f	33 c0		 xor	 eax, eax
  00111	75 e1		 jne	 SHORT $LN7@Command_Ba

; 1561 : 			SendNetXCmd(XD_KICK, &buf, 2);

  00113	6a 02		 push	 2
  00115	8d 45 d8	 lea	 eax, DWORD PTR _buf$14[ebp]
  00118	50		 push	 eax
  00119	6a 03		 push	 3
  0011b	e8 00 00 00 00	 call	 _SendNetXCmd
  00120	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1562 : 		}

  00123	e9 5c 01 00 00	 jmp	 $LN36@Command_Ba
$LN33@Command_Ba:

; 1563 : 		else
; 1564 : 		{
; 1565 : 			Ban_Add(COM_Argv(2));

  00128	6a 02		 push	 2
  0012a	e8 00 00 00 00	 call	 _COM_Argv
  0012f	83 c4 04	 add	 esp, 4
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _Ban_Add
  00138	83 c4 04	 add	 esp, 4

; 1566 : 
; 1567 : 			if (COM_Argc() == 2)

  0013b	e8 00 00 00 00	 call	 _COM_Argc
  00140	83 f8 02	 cmp	 eax, 2
  00143	75 34		 jne	 SHORT $LN35@Command_Ba
$LN10@Command_Ba:

; 1568 : 			{
; 1569 : 				WRITEUINT8(p, KICK_MSG_BANNED);

  00145	8b 45 d4	 mov	 eax, DWORD PTR _p$13[ebp]
  00148	89 45 c0	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0014b	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0014e	c6 00 05	 mov	 BYTE PTR [eax], 5
  00151	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00154	83 c0 01	 add	 eax, 1
  00157	89 45 c0	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0015a	8b 45 c0	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0015d	89 45 d4	 mov	 DWORD PTR _p$13[ebp], eax
  00160	33 c0		 xor	 eax, eax
  00162	75 e1		 jne	 SHORT $LN10@Command_Ba

; 1570 : 				SendNetXCmd(XD_KICK, &buf, 2);

  00164	6a 02		 push	 2
  00166	8d 45 d8	 lea	 eax, DWORD PTR _buf$14[ebp]
  00169	50		 push	 eax
  0016a	6a 03		 push	 3
  0016c	e8 00 00 00 00	 call	 _SendNetXCmd
  00171	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1571 : 			}

  00174	e9 0b 01 00 00	 jmp	 $LN36@Command_Ba
$LN35@Command_Ba:

; 1572 : 			else
; 1573 : 			{
; 1574 : 				size_t i, j = COM_Argc();

  00179	e8 00 00 00 00	 call	 _COM_Argc
  0017e	89 45 b8	 mov	 DWORD PTR _j$6[ebp], eax

; 1575 : 				char message[MAX_REASONLENGTH];
; 1576 : 
; 1577 : 				//Steal from the motd code so you don't have to put the reason in quotes.
; 1578 : 				strlcpy(message, COM_Argv(2), sizeof message);

  00181	6a 1e		 push	 30			; 0000001eH
  00183	6a 02		 push	 2
  00185	e8 00 00 00 00	 call	 _COM_Argv
  0018a	83 c4 04	 add	 esp, 4
  0018d	50		 push	 eax
  0018e	8d 45 98	 lea	 eax, DWORD PTR _message$5[ebp]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _strlcpy
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1579 : 				for (i = 3; i < j; i++)

  0019a	c7 45 bc 03 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 3
  001a1	eb 09		 jmp	 SHORT $LN13@Command_Ba
$LN11@Command_Ba:
  001a3	8b 45 bc	 mov	 eax, DWORD PTR _i$7[ebp]
  001a6	83 c0 01	 add	 eax, 1
  001a9	89 45 bc	 mov	 DWORD PTR _i$7[ebp], eax
$LN13@Command_Ba:
  001ac	8b 45 bc	 mov	 eax, DWORD PTR _i$7[ebp]
  001af	3b 45 b8	 cmp	 eax, DWORD PTR _j$6[ebp]
  001b2	73 30		 jae	 SHORT $LN12@Command_Ba

; 1580 : 				{
; 1581 : 					strlcat(message, " ", sizeof message);

  001b4	6a 1e		 push	 30			; 0000001eH
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  001bb	8d 45 98	 lea	 eax, DWORD PTR _message$5[ebp]
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 _strlcat
  001c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 : 					strlcat(message, COM_Argv(i), sizeof message);

  001c7	6a 1e		 push	 30			; 0000001eH
  001c9	8b 45 bc	 mov	 eax, DWORD PTR _i$7[ebp]
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 _COM_Argv
  001d2	83 c4 04	 add	 esp, 4
  001d5	50		 push	 eax
  001d6	8d 4d 98	 lea	 ecx, DWORD PTR _message$5[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 _strlcat
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1583 : 				}

  001e2	eb bf		 jmp	 SHORT $LN11@Command_Ba
$LN12@Command_Ba:

; 1584 : 
; 1585 : 				WRITEUINT8(p, KICK_MSG_CUSTOM_BAN);

  001e4	8b 45 d4	 mov	 eax, DWORD PTR _p$13[ebp]
  001e7	89 45 94	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  001ea	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001ed	c6 00 08	 mov	 BYTE PTR [eax], 8
  001f0	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001f3	83 c0 01	 add	 eax, 1
  001f6	89 45 94	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  001f9	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  001fc	89 45 d4	 mov	 DWORD PTR _p$13[ebp], eax
  001ff	33 c0		 xor	 eax, eax
  00201	75 e1		 jne	 SHORT $LN12@Command_Ba

; 1586 : 				WRITESTRINGN(p, message, MAX_REASONLENGTH);

  00203	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _tmp_i$3[ebp], 0
  0020a	eb 09		 jmp	 SHORT $LN19@Command_Ba
$LN17@Command_Ba:
  0020c	8b 45 90	 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  0020f	83 c0 01	 add	 eax, 1
  00212	89 45 90	 mov	 DWORD PTR _tmp_i$3[ebp], eax
$LN19@Command_Ba:
  00215	83 7d 90 1e	 cmp	 DWORD PTR _tmp_i$3[ebp], 30 ; 0000001eH
  00219	73 33		 jae	 SHORT $LN18@Command_Ba
  0021b	8b 45 90	 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  0021e	0f be 4c 05 98	 movsx	 ecx, BYTE PTR _message$5[ebp+eax]
  00223	85 c9		 test	 ecx, ecx
  00225	74 27		 je	 SHORT $LN18@Command_Ba
$LN22@Command_Ba:
  00227	8b 45 d4	 mov	 eax, DWORD PTR _p$13[ebp]
  0022a	89 45 8c	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0022d	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00230	8b 4d 90	 mov	 ecx, DWORD PTR _tmp_i$3[ebp]
  00233	8a 54 0d 98	 mov	 dl, BYTE PTR _message$5[ebp+ecx]
  00237	88 10		 mov	 BYTE PTR [eax], dl
  00239	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  0023c	83 c0 01	 add	 eax, 1
  0023f	89 45 8c	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00242	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00245	89 45 d4	 mov	 DWORD PTR _p$13[ebp], eax
  00248	33 c0		 xor	 eax, eax
  0024a	75 db		 jne	 SHORT $LN22@Command_Ba
  0024c	eb be		 jmp	 SHORT $LN17@Command_Ba
$LN18@Command_Ba:
  0024e	8b 45 d4	 mov	 eax, DWORD PTR _p$13[ebp]
  00251	89 45 88	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00254	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00257	c6 00 00	 mov	 BYTE PTR [eax], 0
  0025a	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0025d	83 c0 01	 add	 eax, 1
  00260	89 45 88	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00263	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00266	89 45 d4	 mov	 DWORD PTR _p$13[ebp], eax
  00269	33 c0		 xor	 eax, eax
  0026b	75 e1		 jne	 SHORT $LN18@Command_Ba

; 1587 : 				SendNetXCmd(XD_KICK, &buf, p - buf);

  0026d	8b 45 d4	 mov	 eax, DWORD PTR _p$13[ebp]
  00270	8d 4d d8	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00273	2b c1		 sub	 eax, ecx
  00275	50		 push	 eax
  00276	8d 55 d8	 lea	 edx, DWORD PTR _buf$14[ebp]
  00279	52		 push	 edx
  0027a	6a 03		 push	 3
  0027c	e8 00 00 00 00	 call	 _SendNetXCmd
  00281	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@Command_Ba:

; 1588 : 			}
; 1589 : 		}
; 1590 : 	}

  00284	eb 1c		 jmp	 SHORT $LN28@Command_Ba
$LN27@Command_Ba:

; 1591 : 	else
; 1592 : 		CONS_Printf("%s", text[YOUARENOTTHESERVER]);

  00286	b8 04 00 00 00	 mov	 eax, 4
  0028b	6b c8 38	 imul	 ecx, eax, 56
  0028e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00294	52		 push	 edx
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0029a	e8 00 00 00 00	 call	 _CONS_Printf
  0029f	83 c4 08	 add	 esp, 8
$LN28@Command_Ba:

; 1593 : 
; 1594 : }

  002a2	5f		 pop	 edi
  002a3	5e		 pop	 esi
  002a4	5b		 pop	 ebx
  002a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a8	33 cd		 xor	 ecx, ebp
  002aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002af	8b e5		 mov	 esp, ebp
  002b1	5d		 pop	 ebp
  002b2	c3		 ret	 0
_Command_Ban ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Command_Nodes
_TEXT	SEGMENT
_plen$1 = -16						; size = 4
_address$ = -12						; size = 4
_maxlen$ = -8						; size = 4
_i$ = -4						; size = 4
_Command_Nodes PROC					; COMDAT

; 1506 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1507 : 	INT32 i;
; 1508 : 	size_t maxlen = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _maxlen$[ebp], 0

; 1509 : 	const char *address;
; 1510 : 
; 1511 : 	for (i = 0; i < MAXPLAYERS; i++)

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@Command_No
$LN2@Command_No:
  00019	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Command_No:
  00022	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00026	7d 32		 jge	 SHORT $LN3@Command_No

; 1512 : 	{
; 1513 : 		const size_t plen = strlen(player_names[i]);

  00028	6b 45 fc 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  0002c	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _strlen
  00037	83 c4 04	 add	 esp, 4
  0003a	89 45 f0	 mov	 DWORD PTR _plen$1[ebp], eax

; 1514 : 		if (playeringame[i] && plen > maxlen)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00040	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00048	74 0e		 je	 SHORT $LN8@Command_No
  0004a	8b 45 f0	 mov	 eax, DWORD PTR _plen$1[ebp]
  0004d	3b 45 f8	 cmp	 eax, DWORD PTR _maxlen$[ebp]
  00050	76 06		 jbe	 SHORT $LN8@Command_No

; 1515 : 			maxlen = plen;

  00052	8b 45 f0	 mov	 eax, DWORD PTR _plen$1[ebp]
  00055	89 45 f8	 mov	 DWORD PTR _maxlen$[ebp], eax
$LN8@Command_No:

; 1516 : 	}

  00058	eb bf		 jmp	 SHORT $LN2@Command_No
$LN3@Command_No:

; 1517 : 
; 1518 : 	for (i = 0; i < MAXPLAYERS; i++)

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN7@Command_No
$LN5@Command_No:
  00063	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@Command_No:
  0006c	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00070	0f 8d 04 01 00
	00		 jge	 $LN6@Command_No

; 1519 : 	{
; 1520 : 		if (playeringame[i])

  00076	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00079	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00081	0f 84 ee 00 00
	00		 je	 $LN9@Command_No

; 1521 : 		{
; 1522 : 			CONS_Printf(text[NODESCMDTXT], i, maxlen, player_names[i]);

  00087	6b 45 fc 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  0008b	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00090	50		 push	 eax
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _maxlen$[ebp]
  00094	51		 push	 ecx
  00095	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00098	52		 push	 edx
  00099	b8 04 00 00 00	 mov	 eax, 4
  0009e	6b c8 31	 imul	 ecx, eax, 49
  000a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 _CONS_Printf
  000ad	83 c4 10	 add	 esp, 16			; 00000010H

; 1523 : 			CONS_Printf(text[NODESCMDTXT2], playernode[i]);

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b3	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  000ba	51		 push	 ecx
  000bb	ba 04 00 00 00	 mov	 edx, 4
  000c0	6b c2 32	 imul	 eax, edx, 50
  000c3	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _CONS_Printf
  000cf	83 c4 08	 add	 esp, 8

; 1524 : 			if (I_GetNodeAddress && (address = I_GetNodeAddress(playernode[i])) != NULL)

  000d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_GetNodeAddress, 0
  000d9	74 38		 je	 SHORT $LN10@Command_No
  000db	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000de	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  000e5	51		 push	 ecx
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR _I_GetNodeAddress
  000ec	83 c4 04	 add	 esp, 4
  000ef	89 45 f4	 mov	 DWORD PTR _address$[ebp], eax
  000f2	83 7d f4 00	 cmp	 DWORD PTR _address$[ebp], 0
  000f6	74 1b		 je	 SHORT $LN10@Command_No

; 1525 : 				CONS_Printf(text[NODESCMDTXT3], address);

  000f8	8b 45 f4	 mov	 eax, DWORD PTR _address$[ebp]
  000fb	50		 push	 eax
  000fc	b9 04 00 00 00	 mov	 ecx, 4
  00101	6b d1 33	 imul	 edx, ecx, 51
  00104	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _CONS_Printf
  00110	83 c4 08	 add	 esp, 8
$LN10@Command_No:

; 1526 : 
; 1527 : 			if (i == adminplayer)

  00113	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00116	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  0011c	75 1c		 jne	 SHORT $LN11@Command_No

; 1528 : 				CONS_Printf("%s", text[NODESCMDADMIN]);

  0011e	b8 04 00 00 00	 mov	 eax, 4
  00123	6b c8 34	 imul	 ecx, eax, 52
  00126	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0012c	52		 push	 edx
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00132	e8 00 00 00 00	 call	 _CONS_Printf
  00137	83 c4 08	 add	 esp, 8
$LN11@Command_No:

; 1529 : 
; 1530 : 			if (players[i].spectator)

  0013a	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00141	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00148	85 c9		 test	 ecx, ecx
  0014a	74 1c		 je	 SHORT $LN12@Command_No

; 1531 : 				CONS_Printf("%s", text[NODESCMDSPEC]);

  0014c	b8 04 00 00 00	 mov	 eax, 4
  00151	6b c8 35	 imul	 ecx, eax, 53
  00154	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0015a	52		 push	 edx
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00160	e8 00 00 00 00	 call	 _CONS_Printf
  00165	83 c4 08	 add	 esp, 8
$LN12@Command_No:

; 1532 : 
; 1533 : 			CONS_Printf("\n");

  00168	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0016d	e8 00 00 00 00	 call	 _CONS_Printf
  00172	83 c4 04	 add	 esp, 4
$LN9@Command_No:

; 1534 : 		}
; 1535 : 	}

  00175	e9 e9 fe ff ff	 jmp	 $LN5@Command_No
$LN6@Command_No:

; 1536 : }

  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	5b		 pop	 ebx
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c3		 ret	 0
_Command_Nodes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Command_GetPlayerNum
_TEXT	SEGMENT
_i$ = -4						; size = 4
_Command_GetPlayerNum PROC				; COMDAT

; 1459 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 : 	INT32 i;
; 1461 : 
; 1462 : 	for (i = 0; i < MAXPLAYERS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@Command_Ge
$LN2@Command_Ge:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Command_Ge:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0001f	7d 7e		 jge	 SHORT $LN3@Command_Ge

; 1463 : 		if (playeringame[i])

  00021	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00024	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0002c	74 6c		 je	 SHORT $LN7@Command_Ge

; 1464 : 		{
; 1465 : 			if (serverplayer == i)

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverplayer
  00033	3b 45 fc	 cmp	 eax, DWORD PTR _i$[ebp]
  00036	75 32		 jne	 SHORT $LN6@Command_Ge

; 1466 : 				CONS_Printf(text[SERVERPLAYERNUM], i, playernode[i], player_names[i]);

  00038	6b 45 fc 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  0003c	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00041	50		 push	 eax
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00045	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _playernode[ecx]
  0004c	52		 push	 edx
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00050	50		 push	 eax
  00051	b9 04 00 00 00	 mov	 ecx, 4
  00056	6b d1 2f	 imul	 edx, ecx, 47
  00059	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _CONS_Printf
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	eb 30		 jmp	 SHORT $LN7@Command_Ge
$LN6@Command_Ge:

; 1467 : 			else
; 1468 : 				CONS_Printf(text[PLAYERNUM], i, playernode[i], player_names[i]);

  0006a	6b 45 fc 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  0006e	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00073	50		 push	 eax
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00077	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _playernode[ecx]
  0007e	52		 push	 edx
  0007f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00082	50		 push	 eax
  00083	b9 04 00 00 00	 mov	 ecx, 4
  00088	6b d1 2e	 imul	 edx, ecx, 46
  0008b	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _CONS_Printf
  00097	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@Command_Ge:

; 1469 : 		}

  0009a	e9 73 ff ff ff	 jmp	 $LN2@Command_Ge
$LN3@Command_Ge:

; 1470 : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_Command_GetPlayerNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_RemovePlayer
_TEXT	SEGMENT
$T1 = -92						; size = 4
$T2 = -88						; size = 4
_rings$3 = -20						; size = 4
_increment$4 = -16					; size = 4
_count$5 = -12						; size = 4
_i$6 = -8						; size = 4
_node$7 = -4						; size = 4
_playernum$ = 8						; size = 4
_CL_RemovePlayer PROC					; COMDAT

; 1354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1355 : 	// Sanity check: exceptional cases (i.e. c-fails) can cause multiple
; 1356 : 	// kick commands to be issued for the same player.
; 1357 : 	if (!playeringame[playernum])

  00009	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  0000c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00014	75 05		 jne	 SHORT $LN10@CL_RemoveP

; 1358 : 		return;

  00016	e9 91 02 00 00	 jmp	 $LN23@CL_RemoveP
$LN10@CL_RemoveP:

; 1359 : 
; 1360 : 	if (server && !demoplayback)

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00022	74 6d		 je	 SHORT $LN12@CL_RemoveP
  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  0002b	75 64		 jne	 SHORT $LN12@CL_RemoveP

; 1361 : 	{
; 1362 : 		INT32 node = playernode[playernum];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00030	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  00037	89 4d fc	 mov	 DWORD PTR _node$7[ebp], ecx

; 1363 : 		playerpernode[node]--;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _node$7[ebp]
  0003d	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _playerpernode[eax]
  00043	80 e9 01	 sub	 cl, 1
  00046	8b 55 fc	 mov	 edx, DWORD PTR _node$7[ebp]
  00049	88 8a 00 00 00
	00		 mov	 BYTE PTR _playerpernode[edx], cl

; 1364 : 		if (playerpernode[node] <= 0)

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _node$7[ebp]
  00052	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playerpernode[eax]
  00059	85 c9		 test	 ecx, ecx
  0005b	7f 34		 jg	 SHORT $LN12@CL_RemoveP

; 1365 : 		{
; 1366 : 			nodeingame[playernode[playernum]] = false;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00060	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  00067	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _nodeingame[ecx*4], 0

; 1367 : 			Net_CloseConnection(playernode[playernum]);

  00072	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00075	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 _Net_CloseConnection
  00082	83 c4 04	 add	 esp, 4

; 1368 : 			ResetNode(node);

  00085	8b 45 fc	 mov	 eax, DWORD PTR _node$7[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _ResetNode
  0008e	83 c4 04	 add	 esp, 4
$LN12@CL_RemoveP:

; 1369 : 		}
; 1370 : 	}
; 1371 : 
; 1372 : 	if (gametype == GT_CTF)

  00091	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00098	83 f8 04	 cmp	 eax, 4
  0009b	75 17		 jne	 SHORT $LN13@CL_RemoveP

; 1373 : 		P_PlayerFlagBurst(&players[playernum], false); // Don't take the flag with you!

  0009d	6a 00		 push	 0
  0009f	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  000a6	05 00 00 00 00	 add	 eax, OFFSET _players
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _P_PlayerFlagBurst
  000b1	83 c4 08	 add	 esp, 8
$LN13@CL_RemoveP:

; 1374 : 
; 1375 : 	// If in a special stage, redistribute the player's rings across
; 1376 : 	// the remaining players.
; 1377 : 	if (G_IsSpecialStage(gamemap))

  000b4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _G_IsSpecialStage
  000c1	83 c4 04	 add	 esp, 4
  000c4	85 c0		 test	 eax, eax
  000c6	0f 84 d7 00 00
	00		 je	 $LN6@CL_RemoveP

; 1378 : 	{
; 1379 : 		INT32 i, count, increment, rings;
; 1380 : 
; 1381 : 		for (i = 0, count = 0; i < MAXPLAYERS; i++)

  000cc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  000d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$5[ebp], 0
  000da	eb 09		 jmp	 SHORT $LN4@CL_RemoveP
$LN2@CL_RemoveP:
  000dc	8b 45 f8	 mov	 eax, DWORD PTR _i$6[ebp]
  000df	83 c0 01	 add	 eax, 1
  000e2	89 45 f8	 mov	 DWORD PTR _i$6[ebp], eax
$LN4@CL_RemoveP:
  000e5	83 7d f8 20	 cmp	 DWORD PTR _i$6[ebp], 32	; 00000020H
  000e9	7d 18		 jge	 SHORT $LN3@CL_RemoveP

; 1382 : 		{
; 1383 : 			if (playeringame[i])

  000eb	8b 45 f8	 mov	 eax, DWORD PTR _i$6[ebp]
  000ee	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000f6	74 09		 je	 SHORT $LN15@CL_RemoveP

; 1384 : 				count++;

  000f8	8b 45 f4	 mov	 eax, DWORD PTR _count$5[ebp]
  000fb	83 c0 01	 add	 eax, 1
  000fe	89 45 f4	 mov	 DWORD PTR _count$5[ebp], eax
$LN15@CL_RemoveP:

; 1385 : 		}

  00101	eb d9		 jmp	 SHORT $LN2@CL_RemoveP
$LN3@CL_RemoveP:

; 1386 : 
; 1387 : 		count--;

  00103	8b 45 f4	 mov	 eax, DWORD PTR _count$5[ebp]
  00106	83 e8 01	 sub	 eax, 1
  00109	89 45 f4	 mov	 DWORD PTR _count$5[ebp], eax

; 1388 : 		rings = players[playernum].health - 1;

  0010c	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00113	8b 88 28 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+40]
  00119	83 e9 01	 sub	 ecx, 1
  0011c	89 4d ec	 mov	 DWORD PTR _rings$3[ebp], ecx

; 1389 : 		increment = rings/count;

  0011f	8b 45 ec	 mov	 eax, DWORD PTR _rings$3[ebp]
  00122	99		 cdq
  00123	f7 7d f4	 idiv	 DWORD PTR _count$5[ebp]
  00126	89 45 f0	 mov	 DWORD PTR _increment$4[ebp], eax

; 1390 : 
; 1391 : 		for (i = 0; i < MAXPLAYERS; i++)

  00129	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  00130	eb 09		 jmp	 SHORT $LN7@CL_RemoveP
$LN5@CL_RemoveP:
  00132	8b 45 f8	 mov	 eax, DWORD PTR _i$6[ebp]
  00135	83 c0 01	 add	 eax, 1
  00138	89 45 f8	 mov	 DWORD PTR _i$6[ebp], eax
$LN7@CL_RemoveP:
  0013b	83 7d f8 20	 cmp	 DWORD PTR _i$6[ebp], 32	; 00000020H
  0013f	7d 62		 jge	 SHORT $LN6@CL_RemoveP

; 1392 : 		{
; 1393 : 			if (playeringame[i] && i != playernum)

  00141	8b 45 f8	 mov	 eax, DWORD PTR _i$6[ebp]
  00144	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0014c	74 53		 je	 SHORT $LN16@CL_RemoveP
  0014e	8b 45 f8	 mov	 eax, DWORD PTR _i$6[ebp]
  00151	3b 45 08	 cmp	 eax, DWORD PTR _playernum$[ebp]
  00154	74 4b		 je	 SHORT $LN16@CL_RemoveP

; 1394 : 			{
; 1395 : 				if (rings < increment)

  00156	8b 45 ec	 mov	 eax, DWORD PTR _rings$3[ebp]
  00159	3b 45 f0	 cmp	 eax, DWORD PTR _increment$4[ebp]
  0015c	7d 1e		 jge	 SHORT $LN17@CL_RemoveP

; 1396 : 					P_GivePlayerRings(&players[i], rings, false);

  0015e	6a 00		 push	 0
  00160	8b 45 ec	 mov	 eax, DWORD PTR _rings$3[ebp]
  00163	50		 push	 eax
  00164	69 4d f8 fc 01
	00 00		 imul	 ecx, DWORD PTR _i$6[ebp], 508
  0016b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  00171	51		 push	 ecx
  00172	e8 00 00 00 00	 call	 _P_GivePlayerRings
  00177	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017a	eb 1c		 jmp	 SHORT $LN18@CL_RemoveP
$LN17@CL_RemoveP:

; 1397 : 				else
; 1398 : 					P_GivePlayerRings(&players[i], increment, false);

  0017c	6a 00		 push	 0
  0017e	8b 45 f0	 mov	 eax, DWORD PTR _increment$4[ebp]
  00181	50		 push	 eax
  00182	69 4d f8 fc 01
	00 00		 imul	 ecx, DWORD PTR _i$6[ebp], 508
  00189	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  0018f	51		 push	 ecx
  00190	e8 00 00 00 00	 call	 _P_GivePlayerRings
  00195	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@CL_RemoveP:

; 1399 : 
; 1400 : 				rings -= increment;

  00198	8b 45 ec	 mov	 eax, DWORD PTR _rings$3[ebp]
  0019b	2b 45 f0	 sub	 eax, DWORD PTR _increment$4[ebp]
  0019e	89 45 ec	 mov	 DWORD PTR _rings$3[ebp], eax
$LN16@CL_RemoveP:

; 1401 : 			}
; 1402 : 		}

  001a1	eb 8f		 jmp	 SHORT $LN5@CL_RemoveP
$LN6@CL_RemoveP:

; 1403 : 	}
; 1404 : 
; 1405 : 	// Reset player data
; 1406 : 	CL_ClearPlayer(playernum);

  001a3	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 _CL_ClearPlayer
  001ac	83 c4 04	 add	 esp, 4

; 1407 : 
; 1408 : 	// remove avatar of player
; 1409 : 	playeringame[playernum] = false;

  001af	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  001b2	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _playeringame[eax*4], 0

; 1410 : 	playernode[playernum] = UINT8_MAX;

  001bd	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  001c0	c6 80 00 00 00
	00 ff		 mov	 BYTE PTR _playernode[eax], 255 ; 000000ffH
$LN8@CL_RemoveP:

; 1411 : 	while (!playeringame[doomcom->numslots-1] && doomcom->numslots > 1)

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  001cc	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  001d0	83 3c 8d fc ff
	ff ff 00	 cmp	 DWORD PTR _playeringame[ecx*4-4], 0
  001d8	75 27		 jne	 SHORT $LN9@CL_RemoveP
  001da	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  001df	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  001e3	83 f9 01	 cmp	 ecx, 1
  001e6	7e 19		 jle	 SHORT $LN9@CL_RemoveP

; 1412 : 		doomcom->numslots--;

  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  001ed	66 8b 48 1a	 mov	 cx, WORD PTR [eax+26]
  001f1	66 83 e9 01	 sub	 cx, 1
  001f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _doomcom
  001fb	66 89 4a 1a	 mov	 WORD PTR [edx+26], cx
  001ff	eb c6		 jmp	 SHORT $LN8@CL_RemoveP
$LN9@CL_RemoveP:

; 1413 : 
; 1414 : 	// Reset the name
; 1415 : 	sprintf(player_names[playernum], "Player %d", playernum+1);

  00201	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00204	83 c0 01	 add	 eax, 1
  00207	50		 push	 eax
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_09DOIJPOHM@Player?5?$CFd@
  0020d	6b 4d 08 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  00211	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00217	51		 push	 ecx
  00218	e8 00 00 00 00	 call	 _sprintf
  0021d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1416 : 
; 1417 : 	if (playernum == adminplayer)

  00220	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00223	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00229	75 0a		 jne	 SHORT $LN19@CL_RemoveP

; 1418 : 		adminplayer = -1; // don't stay admin after you're gone

  0022b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _adminplayer, -1
$LN19@CL_RemoveP:

; 1419 : 
; 1420 : 	if (playernum == displayplayer)

  00235	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00238	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _displayplayer
  0023e	75 0a		 jne	 SHORT $LN20@CL_RemoveP

; 1421 : 		displayplayer = consoleplayer; // don't look through someone's view who isn't there

  00240	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  00245	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax
$LN20@CL_RemoveP:

; 1422 : 
; 1423 : 	consfailcount[playernum] = 0;

  0024a	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  0024d	89 45 a8	 mov	 DWORD PTR $T2[ebp], eax
  00250	83 7d a8 20	 cmp	 DWORD PTR $T2[ebp], 32	; 00000020H
  00254	73 02		 jae	 SHORT $LN25@CL_RemoveP
  00256	eb 06		 jmp	 SHORT $LN26@CL_RemoveP
$LN25@CL_RemoveP:
  00258	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0025d	90		 npad	 1
$LN26@CL_RemoveP:
  0025e	8b 4d a8	 mov	 ecx, DWORD PTR $T2[ebp]
  00261	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _consfailcount[ecx], 0

; 1424 : 	consfailstatus[playernum] = 0;

  00268	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  0026b	89 45 a4	 mov	 DWORD PTR $T1[ebp], eax
  0026e	83 7d a4 20	 cmp	 DWORD PTR $T1[ebp], 32	; 00000020H
  00272	73 02		 jae	 SHORT $LN27@CL_RemoveP
  00274	eb 06		 jmp	 SHORT $LN28@CL_RemoveP
$LN27@CL_RemoveP:
  00276	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0027b	90		 npad	 1
$LN28@CL_RemoveP:
  0027c	8b 4d a4	 mov	 ecx, DWORD PTR $T1[ebp]
  0027f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _consfailstatus[ecx], 0

; 1425 : 
; 1426 : 	if (gametype == GT_TAG)//Check if you still have a game. Location flexible. =P

  00286	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0028d	83 f8 03	 cmp	 eax, 3
  00290	75 08		 jne	 SHORT $LN21@CL_RemoveP

; 1427 : 		P_CheckSurvivors();

  00292	e8 00 00 00 00	 call	 _P_CheckSurvivors
  00297	90		 npad	 1
  00298	eb 12		 jmp	 SHORT $LN23@CL_RemoveP
$LN21@CL_RemoveP:

; 1428 : 	else if (gametype == GT_RACE)

  0029a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002a1	83 f8 02	 cmp	 eax, 2
  002a4	75 06		 jne	 SHORT $LN23@CL_RemoveP

; 1429 : 		P_CheckRacers();

  002a6	e8 00 00 00 00	 call	 _P_CheckRacers
  002ab	90		 npad	 1
$LN23@CL_RemoveP:

; 1430 : }

  002ac	5f		 pop	 edi
  002ad	5e		 pop	 esi
  002ae	5b		 pop	 ebx
  002af	8b e5		 mov	 esp, ebp
  002b1	5d		 pop	 ebp
  002b2	c3		 ret	 0
_CL_RemovePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _ResetNode
_TEXT	SEGMENT
$T1 = -72						; size = 4
$T2 = -68						; size = 4
_node$ = 8						; size = 4
_ResetNode PROC						; COMDAT

; 1853 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1854 : 	nodeingame[node] = false;

  00009	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0000c	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _nodeingame[eax*4], 0

; 1855 : 	nodetoplayer[node] = -1;

  00017	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0001a	c6 80 00 00 00
	00 ff		 mov	 BYTE PTR _nodetoplayer[eax], -1

; 1856 : 	nodetoplayer2[node] = -1;

  00021	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00024	c6 80 00 00 00
	00 ff		 mov	 BYTE PTR _nodetoplayer2[eax], -1

; 1857 : 	nettics[node] = gametic;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  00034	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _nettics[eax*4], ecx

; 1858 : 	supposedtics[node] = gametic;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  00044	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _supposedtics[eax*4], ecx

; 1859 : 	nodewaiting[node] = 0;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0004e	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax
  00051	83 7d bc 20	 cmp	 DWORD PTR $T2[ebp], 32	; 00000020H
  00055	73 02		 jae	 SHORT $LN3@ResetNode
  00057	eb 06		 jmp	 SHORT $LN4@ResetNode
$LN3@ResetNode:
  00059	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0005e	90		 npad	 1
$LN4@ResetNode:
  0005f	8b 4d bc	 mov	 ecx, DWORD PTR $T2[ebp]
  00062	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _nodewaiting[ecx], 0

; 1860 : 	playerpernode[node] = 0;

  00069	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0006c	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  0006f	83 7d b8 20	 cmp	 DWORD PTR $T1[ebp], 32	; 00000020H
  00073	73 02		 jae	 SHORT $LN5@ResetNode
  00075	eb 06		 jmp	 SHORT $LN6@ResetNode
$LN5@ResetNode:
  00077	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0007c	90		 npad	 1
$LN6@ResetNode:
  0007d	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  00080	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _playerpernode[ecx], 0
$LN1@ResetNode:

; 1861 : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_ResetNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Command_connect
_TEXT	SEGMENT
_viams$ = -4						; size = 4
_Command_connect PROC					; COMDAT

; 1241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1242 : 	// Assume we connect directly.
; 1243 : 	boolean viams = false;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _viams$[ebp], 0

; 1244 : 
; 1245 : 	if (COM_Argc() < 2)

  00010	e8 00 00 00 00	 call	 _COM_Argc
  00015	83 f8 02	 cmp	 eax, 2
  00018	73 21		 jae	 SHORT $LN2@Command_co

; 1246 : 	{
; 1247 : 		CONS_Printf("%s", text[CONNECTHELP]);

  0001a	b8 04 00 00 00	 mov	 eax, 4
  0001f	6b c8 2a	 imul	 ecx, eax, 42
  00022	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00028	52		 push	 edx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002e	e8 00 00 00 00	 call	 _CONS_Printf
  00033	83 c4 08	 add	 esp, 8

; 1248 : 		return;

  00036	e9 c3 01 00 00	 jmp	 $LN1@Command_co
$LN2@Command_co:

; 1249 : 	}
; 1250 : 
; 1251 : 	if (Playing())

  0003b	e8 00 00 00 00	 call	 _Playing
  00040	85 c0		 test	 eax, eax
  00042	74 21		 je	 SHORT $LN3@Command_co

; 1252 : 	{
; 1253 : 		CONS_Printf("%s", text[NOCONNECTINGAME]);

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	6b c8 2b	 imul	 ecx, eax, 43
  0004c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00052	52		 push	 edx
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00058	e8 00 00 00 00	 call	 _CONS_Printf
  0005d	83 c4 08	 add	 esp, 8

; 1254 : 		return;

  00060	e9 99 01 00 00	 jmp	 $LN1@Command_co
$LN3@Command_co:

; 1255 : 	}
; 1256 : 
; 1257 : 	if (modifiedgame)

  00065	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  0006c	74 16		 je	 SHORT $LN4@Command_co

; 1258 : 	{
; 1259 : 		M_StartMessage("You have wad files loaded and/or\nmodified the game in some way.\nPlease restart SRB2 before\nconnecting.", NULL, MM_NOTHING);

  0006e	6a 00		 push	 0
  00070	6a 00		 push	 0
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@
  00077	e8 00 00 00 00	 call	 _M_StartMessage
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1260 : 		return;

  0007f	e9 7a 01 00 00	 jmp	 $LN1@Command_co
$LN4@Command_co:

; 1261 : 	}
; 1262 : 
; 1263 : 	server = false;

  00084	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _server, 0

; 1264 : 
; 1265 : 	if (!stricmp(COM_Argv(1), "self"))

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_04PJDNGLKJ@self@
  00093	6a 01		 push	 1
  00095	e8 00 00 00 00	 call	 _COM_Argv
  0009a	83 c4 04	 add	 esp, 4
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _stricmp
  000a3	83 c4 08	 add	 esp, 8
  000a6	85 c0		 test	 eax, eax
  000a8	75 16		 jne	 SHORT $LN5@Command_co

; 1266 : 	{
; 1267 : 		servernode = 0;

  000aa	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _servernode, 0

; 1268 : 		server = true;

  000b1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _server, 1

; 1269 : 		/// \bug should be but...
; 1270 : 		//SV_SpawnServer();
; 1271 : 	}

  000bb	e9 22 01 00 00	 jmp	 $LN12@Command_co
$LN5@Command_co:

; 1272 : 	else
; 1273 : 	{
; 1274 : 		// used in menu to connect to a server in the list
; 1275 : 		if (netgame && !stricmp(COM_Argv(1), "node"))

  000c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000c7	74 40		 je	 SHORT $LN7@Command_co
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_04CLMONKIF@node@
  000ce	6a 01		 push	 1
  000d0	e8 00 00 00 00	 call	 _COM_Argv
  000d5	83 c4 04	 add	 esp, 4
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 _stricmp
  000de	83 c4 08	 add	 esp, 8
  000e1	85 c0		 test	 eax, eax
  000e3	75 24		 jne	 SHORT $LN7@Command_co

; 1276 : 		{
; 1277 : 			servernode = (SINT8)atoi(COM_Argv(2));

  000e5	6a 02		 push	 2
  000e7	e8 00 00 00 00	 call	 _COM_Argv
  000ec	83 c4 04	 add	 esp, 4
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _atoi
  000f5	83 c4 04	 add	 esp, 4
  000f8	a2 00 00 00 00	 mov	 BYTE PTR _servernode, al

; 1278 : 
; 1279 : 			// Use MS to traverse NAT firewalls.
; 1280 : 			viams = true;

  000fd	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _viams$[ebp], 1

; 1281 : 		}

  00104	e9 d9 00 00 00	 jmp	 $LN12@Command_co
$LN7@Command_co:

; 1282 : 		else if (netgame)

  00109	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00110	74 26		 je	 SHORT $LN9@Command_co

; 1283 : 		{
; 1284 : 			CONS_Printf("%s", text[NOCONNECTINGAME]);

  00112	b8 04 00 00 00	 mov	 eax, 4
  00117	6b c8 2b	 imul	 ecx, eax, 43
  0011a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00120	52		 push	 edx
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00126	e8 00 00 00 00	 call	 _CONS_Printf
  0012b	83 c4 08	 add	 esp, 8

; 1285 : 			return;

  0012e	e9 cb 00 00 00	 jmp	 $LN1@Command_co

; 1286 : 		}

  00133	e9 aa 00 00 00	 jmp	 $LN12@Command_co
$LN9@Command_co:

; 1287 : 		else if (I_NetOpenSocket)

  00138	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_NetOpenSocket, 0
  0013f	0f 84 90 00 00
	00		 je	 $LN11@Command_co

; 1288 : 		{
; 1289 : 			MSCloseUDPSocket();		// Tidy up before wiping the slate.

  00145	e8 00 00 00 00	 call	 _MSCloseUDPSocket
  0014a	90		 npad	 1

; 1290 : 			I_NetOpenSocket();

  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR _I_NetOpenSocket
  00151	90		 npad	 1

; 1291 : 			netgame = true;

  00152	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _netgame, 1

; 1292 : 			multiplayer = true;

  0015c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _multiplayer, 1

; 1293 : 
; 1294 : 			if (!stricmp(COM_Argv(1), "any"))

  00166	68 00 00 00 00	 push	 OFFSET ??_C@_03OBJFJEBA@any@
  0016b	6a 01		 push	 1
  0016d	e8 00 00 00 00	 call	 _COM_Argv
  00172	83 c4 04	 add	 esp, 4
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _stricmp
  0017b	83 c4 08	 add	 esp, 8
  0017e	85 c0		 test	 eax, eax
  00180	75 09		 jne	 SHORT $LN13@Command_co

; 1295 : 				servernode = BROADCASTADDR;

  00182	c6 05 00 00 00
	00 20		 mov	 BYTE PTR _servernode, 32 ; 00000020H
  00189	eb 48		 jmp	 SHORT $LN16@Command_co
$LN13@Command_co:

; 1296 : 			else if (I_NetMakeNode)

  0018b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_NetMakeNode, 0
  00192	74 1b		 je	 SHORT $LN15@Command_co

; 1297 : 				servernode = I_NetMakeNode(COM_Argv(1));

  00194	6a 01		 push	 1
  00196	e8 00 00 00 00	 call	 _COM_Argv
  0019b	83 c4 04	 add	 esp, 4
  0019e	50		 push	 eax
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR _I_NetMakeNode
  001a5	83 c4 04	 add	 esp, 4
  001a8	a2 00 00 00 00	 mov	 BYTE PTR _servernode, al
  001ad	eb 24		 jmp	 SHORT $LN16@Command_co
$LN15@Command_co:

; 1298 : 			else
; 1299 : 			{
; 1300 : 				CONS_Printf("%s", text[NOSERVERIDENTIFY]);

  001af	b8 04 00 00 00	 mov	 eax, 4
  001b4	6b c8 2c	 imul	 ecx, eax, 44
  001b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001bd	52		 push	 edx
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001c3	e8 00 00 00 00	 call	 _CONS_Printf
  001c8	83 c4 08	 add	 esp, 8

; 1301 : 				D_CloseConnection();

  001cb	e8 00 00 00 00	 call	 _D_CloseConnection
  001d0	90		 npad	 1

; 1302 : 				return;

  001d1	eb 2b		 jmp	 SHORT $LN1@Command_co
$LN16@Command_co:

; 1303 : 			}
; 1304 : 		}

  001d3	eb 0d		 jmp	 SHORT $LN12@Command_co
$LN11@Command_co:

; 1305 : 		else
; 1306 : 			CONS_Printf("There is no network driver\n");

  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BNOGFMDG@There?5is?5no?5network?5driver?6@
  001da	e8 00 00 00 00	 call	 _CONS_Printf
  001df	83 c4 04	 add	 esp, 4
$LN12@Command_co:

; 1307 : 	}
; 1308 : 
; 1309 : 	splitscreen = false;

  001e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _splitscreen, 0

; 1310 : 	SplitScreen_OnChange();

  001ec	e8 00 00 00 00	 call	 _SplitScreen_OnChange
  001f1	90		 npad	 1

; 1311 : 	CL_ConnectToServer(viams);

  001f2	8b 45 fc	 mov	 eax, DWORD PTR _viams$[ebp]
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 _CL_ConnectToServer
  001fb	83 c4 04	 add	 esp, 4
$LN1@Command_co:

; 1312 : }

  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5b		 pop	 ebx
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c3		 ret	 0
_Command_connect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Command_ReloadBan
_TEXT	SEGMENT
_Command_ReloadBan PROC					; COMDAT

; 1236 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1237 : 	Ban_Load_File(true);

  00009	6a 01		 push	 1
  0000b	e8 00 00 00 00	 call	 _Ban_Load_File
  00010	83 c4 04	 add	 esp, 4

; 1238 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_Command_ReloadBan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Ban_Load_File
_TEXT	SEGMENT
_buffer$ = -148						; size = 128
_mask$ = -20						; size = 4
_address$ = -16						; size = 4
_i$ = -12						; size = 4
_f$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_warning$ = 8						; size = 4
_Ban_Load_File PROC					; COMDAT

; 1202 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1203 : 	FILE *f;
; 1204 : 	size_t i;
; 1205 : 	const char *address, *mask;
; 1206 : 	char buffer[MAX_WADPATH];
; 1207 : 
; 1208 : 	f = fopen(va("%s"PATHSEP"%s", srb2home, "ban.txt"), "r");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_07JMDBINJP@ban?4txt@
  00020	68 00 00 00 00	 push	 OFFSET _srb2home
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
  0002a	e8 00 00 00 00	 call	 _va
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _fopen
  00038	83 c4 08	 add	 esp, 8
  0003b	89 45 f8	 mov	 DWORD PTR _f$[ebp], eax

; 1209 : 
; 1210 : 	if (!f)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _f$[ebp], 0
  00042	75 27		 jne	 SHORT $LN5@Ban_Load_F

; 1211 : 	{
; 1212 : 		if (warning)

  00044	83 7d 08 00	 cmp	 DWORD PTR _warning$[ebp], 0
  00048	74 1c		 je	 SHORT $LN6@Ban_Load_F

; 1213 : 			CONS_Printf("%s", text[CANNOTLOADBANLIST]);

  0004a	b8 04 00 00 00	 mov	 eax, 4
  0004f	6b c8 29	 imul	 ecx, eax, 41
  00052	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00058	52		 push	 edx
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0005e	e8 00 00 00 00	 call	 _CONS_Printf
  00063	83 c4 08	 add	 esp, 8
$LN6@Ban_Load_F:

; 1214 : 		return;

  00066	e9 a4 00 00 00	 jmp	 $LN1@Ban_Load_F
$LN5@Ban_Load_F:

; 1215 : 	}
; 1216 : 
; 1217 : 	if (I_ClearBans)

  0006b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_ClearBans, 0
  00072	74 08		 je	 SHORT $LN7@Ban_Load_F

; 1218 : 		Command_ClearBans();

  00074	e8 00 00 00 00	 call	 _Command_ClearBans
  00079	90		 npad	 1
  0007a	eb 05		 jmp	 SHORT $LN8@Ban_Load_F
$LN7@Ban_Load_F:

; 1219 : 	else
; 1220 : 		return;

  0007c	e9 8e 00 00 00	 jmp	 $LN1@Ban_Load_F
$LN8@Ban_Load_F:

; 1221 : 
; 1222 : 	for (i=0; fgets(buffer, (int)sizeof(buffer), f); i++)

  00081	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00088	eb 09		 jmp	 SHORT $LN4@Ban_Load_F
$LN2@Ban_Load_F:
  0008a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0008d	83 c0 01	 add	 eax, 1
  00090	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Ban_Load_F:
  00093	8b 45 f8	 mov	 eax, DWORD PTR _f$[ebp]
  00096	50		 push	 eax
  00097	68 80 00 00 00	 push	 128			; 00000080H
  0009c	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _fgets
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ab	85 c0		 test	 eax, eax
  000ad	74 54		 je	 SHORT $LN3@Ban_Load_F

; 1223 : 	{
; 1224 : 		address = strtok(buffer, " \t\r\n");

  000af	68 00 00 00 00	 push	 OFFSET ??_C@_04HHCDBDLF@?5?7?$AN?6@
  000b4	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _strtok
  000c0	83 c4 08	 add	 esp, 8
  000c3	89 45 f0	 mov	 DWORD PTR _address$[ebp], eax

; 1225 : 		mask = strtok(NULL, " \t\r\n");

  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_04HHCDBDLF@?5?7?$AN?6@
  000cb	6a 00		 push	 0
  000cd	e8 00 00 00 00	 call	 _strtok
  000d2	83 c4 08	 add	 esp, 8
  000d5	89 45 ec	 mov	 DWORD PTR _mask$[ebp], eax

; 1226 : 
; 1227 : 		I_SetBanAddress(address, mask);

  000d8	8b 45 ec	 mov	 eax, DWORD PTR _mask$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d f0	 mov	 ecx, DWORD PTR _address$[ebp]
  000df	51		 push	 ecx
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR _I_SetBanAddress
  000e6	83 c4 08	 add	 esp, 8

; 1228 : 
; 1229 : 		Ban_Add(strtok(NULL, "\r\n"));

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6@
  000ee	6a 00		 push	 0
  000f0	e8 00 00 00 00	 call	 _strtok
  000f5	83 c4 08	 add	 esp, 8
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _Ban_Add
  000fe	83 c4 04	 add	 esp, 4

; 1230 : 	}

  00101	eb 87		 jmp	 SHORT $LN2@Ban_Load_F
$LN3@Ban_Load_F:

; 1231 : 
; 1232 : 	fclose(f);

  00103	8b 45 f8	 mov	 eax, DWORD PTR _f$[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _fclose
  0010c	83 c4 04	 add	 esp, 4
$LN1@Ban_Load_F:

; 1233 : }

  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	33 cd		 xor	 ecx, ebp
  00117	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
_Ban_Load_File ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Command_ClearBans
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_Command_ClearBans PROC					; COMDAT

; 1184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1185 : 	banreason_t *temp;
; 1186 : 
; 1187 : 	if (!I_ClearBans)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_ClearBans, 0
  00010	75 02		 jne	 SHORT $LN4@Command_Cl

; 1188 : 		return;

  00012	eb 4d		 jmp	 SHORT $LN3@Command_Cl
$LN4@Command_Cl:

; 1189 : 
; 1190 : 	I_ClearBans();

  00014	ff 15 00 00 00
	00		 call	 DWORD PTR _I_ClearBans
  0001a	90		 npad	 1

; 1191 : 	reasontail = NULL;

  0001b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _reasontail, 0
$LN2@Command_Cl:

; 1192 : 	while (reasonhead)

  00025	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reasonhead, 0
  0002c	74 33		 je	 SHORT $LN3@Command_Cl

; 1193 : 	{
; 1194 : 		temp = reasonhead->next;

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR _reasonhead
  00033	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00036	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 1195 : 		Z_Free(reasonhead->reason);

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR _reasonhead
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _Z_Free
  00046	83 c4 04	 add	 esp, 4

; 1196 : 		free(reasonhead);

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _reasonhead
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _free
  00054	83 c4 04	 add	 esp, 4

; 1197 : 		reasonhead = temp;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  0005a	a3 00 00 00 00	 mov	 DWORD PTR _reasonhead, eax

; 1198 : 	}

  0005f	eb c4		 jmp	 SHORT $LN2@Command_Cl
$LN3@Command_Cl:

; 1199 : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_Command_ClearBans ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Ban_Add
_TEXT	SEGMENT
_reasonlist$ = -4					; size = 4
_reason$ = 8						; size = 4
_Ban_Add PROC						; COMDAT

; 1166 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1167 : 	banreason_t *reasonlist = malloc(sizeof(*reasonlist));

  00009	6a 0c		 push	 12			; 0000000cH
  0000b	e8 00 00 00 00	 call	 _malloc
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 fc	 mov	 DWORD PTR _reasonlist$[ebp], eax

; 1168 : 
; 1169 : 	if (!reasonlist)

  00016	83 7d fc 00	 cmp	 DWORD PTR _reasonlist$[ebp], 0
  0001a	75 02		 jne	 SHORT $LN2@Ban_Add

; 1170 : 		return;

  0001c	eb 5a		 jmp	 SHORT $LN1@Ban_Add
$LN2@Ban_Add:

; 1171 : 	if (!reason)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _reason$[ebp], 0
  00022	75 07		 jne	 SHORT $LN3@Ban_Add

; 1172 : 		reason = "NA";

  00024	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _reason$[ebp], OFFSET ??_C@_02JDNIPIGD@NA@
$LN3@Ban_Add:

; 1173 : 
; 1174 : 	reasonlist->next = NULL;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  0002e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1175 : 	reasonlist->reason = Z_StrDup(reason);

  00035	8b 45 08	 mov	 eax, DWORD PTR _reason$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _Z_StrDup
  0003e	83 c4 04	 add	 esp, 4
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _reasonlist$[ebp]
  00044	89 01		 mov	 DWORD PTR [ecx], eax

; 1176 : 	if ((reasonlist->prev = reasontail) == NULL)

  00046	8b 45 fc	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _reasontail
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00052	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reasontail, 0
  00059	75 0a		 jne	 SHORT $LN4@Ban_Add

; 1177 : 		reasonhead = reasonlist;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  0005e	a3 00 00 00 00	 mov	 DWORD PTR _reasonhead, eax
  00063	eb 0b		 jmp	 SHORT $LN5@Ban_Add
$LN4@Ban_Add:

; 1178 : 	else
; 1179 : 		reasontail->next = reasonlist;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _reasontail
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _reasonlist$[ebp]
  0006d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN5@Ban_Add:

; 1180 : 	reasontail = reasonlist;

  00070	8b 45 fc	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  00073	a3 00 00 00 00	 mov	 DWORD PTR _reasontail, eax
$LN1@Ban_Add:

; 1181 : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_Ban_Add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Command_ShowBan
_TEXT	SEGMENT
_reasonlist$ = -16					; size = 4
_mask$ = -12						; size = 4
_address$ = -8						; size = 4
_i$ = -4						; size = 4
_Command_ShowBan PROC					; COMDAT

; 1102 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1103 : 	size_t i;
; 1104 : 	const char *address, *mask;
; 1105 : 	banreason_t *reasonlist = reasonhead;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _reasonhead
  0000e	89 45 f0	 mov	 DWORD PTR _reasonlist$[ebp], eax

; 1106 : 
; 1107 : 	if (I_GetBanAddress)

  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_GetBanAddress, 0
  00018	74 1e		 je	 SHORT $LN5@Command_Sh

; 1108 : 		CONS_Printf("%s", text[BANLIST]);

  0001a	b8 04 00 00 00	 mov	 eax, 4
  0001f	6b c8 23	 imul	 ecx, eax, 35
  00022	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00028	52		 push	 edx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002e	e8 00 00 00 00	 call	 _CONS_Printf
  00033	83 c4 08	 add	 esp, 8
  00036	eb 05		 jmp	 SHORT $LN6@Command_Sh
$LN5@Command_Sh:

; 1109 : 	else
; 1110 : 		return;

  00038	e9 fc 00 00 00	 jmp	 $LN12@Command_Sh
$LN6@Command_Sh:

; 1111 : 
; 1112 : 	for (i = 0;(address = I_GetBanAddress(i)) != NULL;i++)

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00044	eb 09		 jmp	 SHORT $LN4@Command_Sh
$LN2@Command_Sh:
  00046	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Command_Sh:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR _I_GetBanAddress
  00059	83 c4 04	 add	 esp, 4
  0005c	89 45 f8	 mov	 DWORD PTR _address$[ebp], eax
  0005f	83 7d f8 00	 cmp	 DWORD PTR _address$[ebp], 0
  00063	0f 84 a8 00 00
	00		 je	 $LN3@Command_Sh

; 1113 : 	{
; 1114 : 		if (!I_GetBanMask || (mask = I_GetBanMask(i)) == NULL)

  00069	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_GetBanMask, 0
  00070	74 16		 je	 SHORT $LN9@Command_Sh
  00072	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00075	50		 push	 eax
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR _I_GetBanMask
  0007c	83 c4 04	 add	 esp, 4
  0007f	89 45 f4	 mov	 DWORD PTR _mask$[ebp], eax
  00082	83 7d f4 00	 cmp	 DWORD PTR _mask$[ebp], 0
  00086	75 24		 jne	 SHORT $LN7@Command_Sh
$LN9@Command_Sh:

; 1115 : 			CONS_Printf(text[BANLIST2], i+1, address);

  00088	8b 45 f8	 mov	 eax, DWORD PTR _address$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008f	83 c1 01	 add	 ecx, 1
  00092	51		 push	 ecx
  00093	ba 04 00 00 00	 mov	 edx, 4
  00098	6b c2 24	 imul	 eax, edx, 36
  0009b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _CONS_Printf
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000aa	eb 26		 jmp	 SHORT $LN8@Command_Sh
$LN7@Command_Sh:

; 1116 : 		else
; 1117 : 			CONS_Printf(text[BANLIST3], i+1, address, mask);

  000ac	8b 45 f4	 mov	 eax, DWORD PTR _mask$[ebp]
  000af	50		 push	 eax
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _address$[ebp]
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b7	83 c2 01	 add	 edx, 1
  000ba	52		 push	 edx
  000bb	b8 04 00 00 00	 mov	 eax, 4
  000c0	6b c8 25	 imul	 ecx, eax, 37
  000c3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 _CONS_Printf
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@Command_Sh:

; 1118 : 
; 1119 : 		if (reasonlist && reasonlist->reason)

  000d2	83 7d f0 00	 cmp	 DWORD PTR _reasonlist$[ebp], 0
  000d6	74 25		 je	 SHORT $LN10@Command_Sh
  000d8	8b 45 f0	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  000db	83 38 00	 cmp	 DWORD PTR [eax], 0
  000de	74 1d		 je	 SHORT $LN10@Command_Sh

; 1120 : 			CONS_Printf(text[BANREASON], reasonlist->reason);

  000e0	8b 45 f0	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  000e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e5	51		 push	 ecx
  000e6	ba 04 00 00 00	 mov	 edx, 4
  000eb	6b c2 26	 imul	 eax, edx, 38
  000ee	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 _CONS_Printf
  000fa	83 c4 08	 add	 esp, 8
$LN10@Command_Sh:

; 1121 : 
; 1122 : 		if (reasonlist) reasonlist = reasonlist->next;

  000fd	83 7d f0 00	 cmp	 DWORD PTR _reasonlist$[ebp], 0
  00101	74 09		 je	 SHORT $LN11@Command_Sh
  00103	8b 45 f0	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  00106	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00109	89 4d f0	 mov	 DWORD PTR _reasonlist$[ebp], ecx
$LN11@Command_Sh:

; 1123 : 	}

  0010c	e9 35 ff ff ff	 jmp	 $LN2@Command_Sh
$LN3@Command_Sh:

; 1124 : 
; 1125 : 	if (i == 0 && !address)

  00111	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00115	75 22		 jne	 SHORT $LN12@Command_Sh
  00117	83 7d f8 00	 cmp	 DWORD PTR _address$[ebp], 0
  0011b	75 1c		 jne	 SHORT $LN12@Command_Sh

; 1126 : 		CONS_Printf("%s", text[BANNONE]);

  0011d	b8 04 00 00 00	 mov	 eax, 4
  00122	6b c8 27	 imul	 ecx, eax, 39
  00125	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0012b	52		 push	 edx
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00131	e8 00 00 00 00	 call	 _CONS_Printf
  00136	83 c4 08	 add	 esp, 8
$LN12@Command_Sh:

; 1127 : }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
_Command_ShowBan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_ConnectToServer
_TEXT	SEGMENT
tv192 = -364						; size = 4
_key$1 = -296						; size = 4
_gametypestr$2 = -292					; size = 4
_j$3 = -288						; size = 4
_tmpsave$ = -284					; size = 256
_oldtic$ = -28						; size = 4
_asksent$ = -24						; size = 4
_waitmore$ = -20					; size = 4
_i$ = -16						; size = 4
_nodewaited$ = -12					; size = 4
_pnumnodes$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_viams$ = 8						; size = 4
_CL_ConnectToServer PROC				; COMDAT

; 873  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 874  : 	INT32 pnumnodes, nodewaited = doomcom->numnodes, i;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  0001b	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  0001f	89 4d f4	 mov	 DWORD PTR _nodewaited$[ebp], ecx

; 875  : 	boolean waitmore;
; 876  : 	tic_t asksent, oldtic;
; 877  : #ifdef JOININGAME
; 878  : 	XBOXSTATIC char tmpsave[256];
; 879  : 
; 880  : 	sprintf(tmpsave, "%s" PATHSEP TMPSAVENAME, srb2home);

  00022	68 00 00 00 00	 push	 OFFSET _srb2home
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HFDDGAM@?$CFs?2$$$?4sav@
  0002c	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _sprintf
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 881  : #endif
; 882  : 
; 883  : 	cl_mode = cl_searching;

  0003b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cl_mode, 0

; 884  : 
; 885  : #ifdef JOININGAME
; 886  : 	// don't get a corrupt savegame error because tmpsave already exists
; 887  : 	if (FIL_WriteFileOK(tmpsave) && unlink(tmpsave) == -1)

  00045	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _FIL_WriteFileOK
  00051	83 c4 04	 add	 esp, 4
  00054	85 c0		 test	 eax, eax
  00056	74 28		 je	 SHORT $LN16@CL_Connect
  00058	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _unlink
  00064	83 c4 04	 add	 esp, 4
  00067	83 f8 ff	 cmp	 eax, -1
  0006a	75 14		 jne	 SHORT $LN16@CL_Connect

; 888  : 		I_Error("Can't delete %s", tmpsave);

  0006c	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MFJMKEM@Can?8t?5delete?5?$CFs@
  00078	e8 00 00 00 00	 call	 _I_Error
  0007d	83 c4 08	 add	 esp, 8
$LN16@CL_Connect:

; 889  : #endif
; 890  : 
; 891  : 	CONS_Printf("%s",text[ESCABORT]);

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	6b c8 1a	 imul	 ecx, eax, 26
  00088	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0008e	52		 push	 edx
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00094	e8 00 00 00 00	 call	 _CONS_Printf
  00099	83 c4 08	 add	 esp, 8

; 892  : 	if (servernode < 0 || servernode >= MAXNETNODES)

  0009c	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  000a3	85 c0		 test	 eax, eax
  000a5	7c 0c		 jl	 SHORT $LN19@CL_Connect
  000a7	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  000ae	83 f8 20	 cmp	 eax, 32			; 00000020H
  000b1	7c 1e		 jl	 SHORT $LN17@CL_Connect
$LN19@CL_Connect:

; 893  : 		CONS_Printf("%s",text[SEARCHSERV]);

  000b3	b8 04 00 00 00	 mov	 eax, 4
  000b8	6b c8 1b	 imul	 ecx, eax, 27
  000bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000c1	52		 push	 edx
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c7	e8 00 00 00 00	 call	 _CONS_Printf
  000cc	83 c4 08	 add	 esp, 8
  000cf	eb 1c		 jmp	 SHORT $LN18@CL_Connect
$LN17@CL_Connect:

; 894  : 	else
; 895  : 		CONS_Printf("%s",text[CONTACTSERV]);

  000d1	b8 04 00 00 00	 mov	 eax, 4
  000d6	6b c8 1c	 imul	 ecx, eax, 28
  000d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000df	52		 push	 edx
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000e5	e8 00 00 00 00	 call	 _CONS_Printf
  000ea	83 c4 08	 add	 esp, 8
$LN18@CL_Connect:

; 896  : 
; 897  : 	if (gamestate == GS_INTERMISSION)

  000ed	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  000f4	75 06		 jne	 SHORT $LN20@CL_Connect

; 898  : 		Y_EndIntermission(); // clean up intermission graphics etc

  000f6	e8 00 00 00 00	 call	 _Y_EndIntermission
  000fb	90		 npad	 1
$LN20@CL_Connect:

; 899  : 
; 900  : 	DEBFILE(va("waiting %d nodes\n", doomcom->numnodes));

  000fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00103	74 35		 je	 SHORT $LN21@CL_Connect
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0010a	50		 push	 eax
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  00111	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  00115	52		 push	 edx
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JPIHLKPA@waiting?5?$CFd?5nodes?6@
  0011b	e8 00 00 00 00	 call	 _va
  00120	83 c4 08	 add	 esp, 8
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _fputs
  00129	83 c4 08	 add	 esp, 8
  0012c	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _fflush
  00137	83 c4 04	 add	 esp, 4
$LN21@CL_Connect:

; 901  : 	G_SetGamestate(GS_WAITINGPLAYERS);

  0013a	6a 0d		 push	 13			; 0000000dH
  0013c	e8 00 00 00 00	 call	 _G_SetGamestate
  00141	83 c4 04	 add	 esp, 4

; 902  : 	wipegamestate = GS_WAITINGPLAYERS;

  00144	c7 05 00 00 00
	00 0d 00 00 00	 mov	 DWORD PTR _wipegamestate, 13 ; 0000000dH

; 903  : 
; 904  : 	adminplayer = -1;

  0014e	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _adminplayer, -1

; 905  : 	pnumnodes = 1;

  00158	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _pnumnodes$[ebp], 1

; 906  : 	oldtic = I_GetTime() - 1;

  0015f	e8 00 00 00 00	 call	 _I_GetTime
  00164	83 e8 01	 sub	 eax, 1
  00167	89 45 e4	 mov	 DWORD PTR _oldtic$[ebp], eax

; 907  : 	asksent = (tic_t)-TICRATE;

  0016a	c7 45 e8 dd ff
	ff ff		 mov	 DWORD PTR _asksent$[ebp], -35 ; ffffffddH

; 908  : 	i = SL_SearchServer(servernode);

  00171	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _SL_SearchServer
  0017e	83 c4 04	 add	 esp, 4
  00181	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 909  : 	if (i != -1)

  00184	83 7d f0 ff	 cmp	 DWORD PTR _i$[ebp], -1
  00188	0f 84 08 01 00
	00		 je	 $LN22@CL_Connect

; 910  : 	{
; 911  : 		INT32 j;
; 912  : 		const char *gametypestr = NULL;

  0018e	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _gametypestr$2[ebp], 0

; 913  : 		CONS_Printf(text[CONNECTINGTO],serverlist[i].info.servername);

  00198	69 45 f0 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  0019f	05 13 00 00 00	 add	 eax, OFFSET _serverlist+19
  001a4	50		 push	 eax
  001a5	b9 04 00 00 00	 mov	 ecx, 4
  001aa	6b d1 1d	 imul	 edx, ecx, 29
  001ad	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 _CONS_Printf
  001b9	83 c4 08	 add	 esp, 8

; 914  : 		for (j = 0; gametype_cons_t[j].strvalue; j++)

  001bc	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$3[ebp], 0
  001c6	eb 0f		 jmp	 SHORT $LN4@CL_Connect
$LN2@CL_Connect:
  001c8	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$3[ebp]
  001ce	83 c0 01	 add	 eax, 1
  001d1	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _j$3[ebp], eax
$LN4@CL_Connect:
  001d7	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$3[ebp]
  001dd	83 3c c5 04 00
	00 00 00	 cmp	 DWORD PTR _gametype_cons_t[eax*8+4], 0
  001e5	74 34		 je	 SHORT $LN3@CL_Connect

; 915  : 		{
; 916  : 			if (gametype_cons_t[j].value == serverlist[i].info.gametype)

  001e7	69 45 f0 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  001ee	0f b6 88 05 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+5]
  001f5	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$3[ebp]
  001fb	39 0c d5 00 00
	00 00		 cmp	 DWORD PTR _gametype_cons_t[edx*8], ecx
  00202	75 15		 jne	 SHORT $LN23@CL_Connect

; 917  : 			{
; 918  : 				gametypestr = gametype_cons_t[j].strvalue;

  00204	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$3[ebp]
  0020a	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8+4]
  00211	89 8d dc fe ff
	ff		 mov	 DWORD PTR _gametypestr$2[ebp], ecx

; 919  : 				break;

  00217	eb 02		 jmp	 SHORT $LN3@CL_Connect
$LN23@CL_Connect:

; 920  : 			}
; 921  : 		}

  00219	eb ad		 jmp	 SHORT $LN2@CL_Connect
$LN3@CL_Connect:

; 922  : 		if (gametypestr)

  0021b	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _gametypestr$2[ebp], 0
  00222	74 1e		 je	 SHORT $LN24@CL_Connect

; 923  : 			CONS_Printf(text[NETGAMETYPE], gametypestr);

  00224	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _gametypestr$2[ebp]
  0022a	50		 push	 eax
  0022b	b9 04 00 00 00	 mov	 ecx, 4
  00230	6b d1 1e	 imul	 edx, ecx, 30
  00233	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 _CONS_Printf
  0023f	83 c4 08	 add	 esp, 8
$LN24@CL_Connect:

; 924  : 		CONS_Printf(text[NETVERSION], serverlist[i].info.version/100,

  00242	69 45 f0 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  00249	0f b6 88 02 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+2]
  00250	51		 push	 ecx
  00251	69 55 f0 01 04
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 1025
  00258	0f b6 82 01 00
	00 00		 movzx	 eax, BYTE PTR _serverlist[edx+1]
  0025f	99		 cdq
  00260	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00265	f7 f9		 idiv	 ecx
  00267	52		 push	 edx
  00268	69 55 f0 01 04
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 1025
  0026f	0f b6 82 01 00
	00 00		 movzx	 eax, BYTE PTR _serverlist[edx+1]
  00276	99		 cdq
  00277	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0027c	f7 f9		 idiv	 ecx
  0027e	50		 push	 eax
  0027f	ba 04 00 00 00	 mov	 edx, 4
  00284	6b c2 1f	 imul	 eax, edx, 31
  00287	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  0028d	51		 push	 ecx
  0028e	e8 00 00 00 00	 call	 _CONS_Printf
  00293	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@CL_Connect:

; 925  : 		 serverlist[i].info.version%100, serverlist[i].info.subversion);
; 926  : 	}
; 927  : 	SL_ClearServerList(servernode);

  00296	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  0029d	50		 push	 eax
  0029e	e8 00 00 00 00	 call	 _SL_ClearServerList
  002a3	83 c4 04	 add	 esp, 4
$LN65@CL_Connect:

; 928  : 	do
; 929  : 	{
; 930  : 		switch (cl_mode)

  002a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _cl_mode
  002ab	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv192[ebp], eax
  002b1	83 bd 94 fe ff
	ff 06		 cmp	 DWORD PTR tv192[ebp], 6
  002b8	0f 87 72 02 00
	00		 ja	 $LN48@CL_Connect
  002be	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR tv192[ebp]
  002c4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN66@CL_Connect[ecx*4]
$LN25@CL_Connect:

; 931  : 		{
; 932  : 			case cl_searching:
; 933  : 				// serverlist is updated by GetPacket function
; 934  : 				if (serverlistcount > 0)

  002cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverlistcount, 0
  002d2	0f 86 78 01 00
	00		 jbe	 $LN26@CL_Connect

; 935  : 				{
; 936  : 					// this can be a responce to our broadcast request
; 937  : 					if (servernode == -1 || servernode >= MAXNETNODES)

  002d8	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  002df	83 f8 ff	 cmp	 eax, -1
  002e2	74 0c		 je	 SHORT $LN29@CL_Connect
  002e4	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  002eb	83 f8 20	 cmp	 eax, 32			; 00000020H
  002ee	7c 38		 jl	 SHORT $LN27@CL_Connect
$LN29@CL_Connect:

; 938  : 					{
; 939  : 						i = 0;

  002f0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 940  : 						servernode = serverlist[i].node;

  002f7	69 45 f0 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  002fe	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _serverlist[eax]
  00304	88 0d 00 00 00
	00		 mov	 BYTE PTR _servernode, cl

; 941  : 						CONS_Printf("%s",text[FOUND]);

  0030a	b8 04 00 00 00	 mov	 eax, 4
  0030f	c1 e0 05	 shl	 eax, 5
  00312	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00318	51		 push	 ecx
  00319	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0031e	e8 00 00 00 00	 call	 _CONS_Printf
  00323	83 c4 08	 add	 esp, 8

; 942  : 					}

  00326	eb 1e		 jmp	 SHORT $LN30@CL_Connect
$LN27@CL_Connect:

; 943  : 					else
; 944  : 					{
; 945  : 						i = SL_SearchServer(servernode);

  00328	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  0032f	50		 push	 eax
  00330	e8 00 00 00 00	 call	 _SL_SearchServer
  00335	83 c4 04	 add	 esp, 4
  00338	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 946  : 						if (i < 0)

  0033b	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  0033f	7d 05		 jge	 SHORT $LN30@CL_Connect

; 947  : 							break; // the case

  00341	e9 fb 01 00 00	 jmp	 $LN8@CL_Connect
$LN30@CL_Connect:

; 948  : 					}
; 949  : 
; 950  : 					// Quit here rather than downloading files and being refused later.
; 951  : 					if (serverlist[i].info.numberofplayer >= serverlist[i].info.maxplayer)

  00346	69 45 f0 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  0034d	0f b6 88 03 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+3]
  00354	69 55 f0 01 04
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 1025
  0035b	0f b6 82 04 00
	00 00		 movzx	 eax, BYTE PTR _serverlist[edx+4]
  00362	3b c8		 cmp	 ecx, eax
  00364	7c 40		 jl	 SHORT $LN31@CL_Connect

; 952  : 					{
; 953  : 						M_StartMessage(va("Maximum players reached: %d\nPress ESC", serverlist[i].info.maxplayer), NULL, MM_NOTHING);

  00366	6a 00		 push	 0
  00368	6a 00		 push	 0
  0036a	69 45 f0 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  00371	0f b6 88 04 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+4]
  00378	51		 push	 ecx
  00379	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MGDCBDHG@Maximum?5players?5reached?3?5?$CFd?6Pre@
  0037e	e8 00 00 00 00	 call	 _va
  00383	83 c4 08	 add	 esp, 8
  00386	50		 push	 eax
  00387	e8 00 00 00 00	 call	 _M_StartMessage
  0038c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 954  : 						D_QuitNetGame();

  0038f	e8 00 00 00 00	 call	 _D_QuitNetGame
  00394	90		 npad	 1

; 955  : 						CL_Reset();

  00395	e8 00 00 00 00	 call	 _CL_Reset
  0039a	90		 npad	 1

; 956  : 						D_StartTitle();

  0039b	e8 00 00 00 00	 call	 _D_StartTitle
  003a0	90		 npad	 1

; 957  : 						return;

  003a1	e9 48 03 00 00	 jmp	 $LN1@CL_Connect
$LN31@CL_Connect:

; 958  : 					}
; 959  : 
; 960  : 					if (!server)

  003a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  003ad	0f 85 8e 00 00
	00		 jne	 $LN32@CL_Connect

; 961  : 					{
; 962  : 						D_ParseFileneeded(serverlist[i].info.fileneedednum,

  003b3	69 45 f0 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  003ba	05 6e 00 00 00	 add	 eax, OFFSET _serverlist+110
  003bf	50		 push	 eax
  003c0	69 4d f0 01 04
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 1025
  003c7	0f b6 91 09 00
	00 00		 movzx	 edx, BYTE PTR _serverlist[ecx+9]
  003ce	52		 push	 edx
  003cf	e8 00 00 00 00	 call	 _D_ParseFileneeded
  003d4	83 c4 08	 add	 esp, 8

; 963  : 							serverlist[i].info.fileneeded);
; 964  : 						CONS_Printf("%s",text[CHECKINGFILES]);

  003d7	b8 04 00 00 00	 mov	 eax, 4
  003dc	6b c8 21	 imul	 ecx, eax, 33
  003df	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  003e5	52		 push	 edx
  003e6	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  003eb	e8 00 00 00 00	 call	 _CONS_Printf
  003f0	83 c4 08	 add	 esp, 8

; 965  : 						i = CL_CheckFiles();

  003f3	e8 00 00 00 00	 call	 _CL_CheckFiles
  003f8	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 966  : 						if (i == 2) // cannot join for some reason

  003fb	83 7d f0 02	 cmp	 DWORD PTR _i$[ebp], 2
  003ff	75 19		 jne	 SHORT $LN34@CL_Connect

; 967  : 						{
; 968  : 							D_QuitNetGame();

  00401	e8 00 00 00 00	 call	 _D_QuitNetGame
  00406	90		 npad	 1

; 969  : 							CL_Reset();

  00407	e8 00 00 00 00	 call	 _CL_Reset
  0040c	90		 npad	 1

; 970  : 							D_StartTitle();

  0040d	e8 00 00 00 00	 call	 _D_StartTitle
  00412	90		 npad	 1

; 971  : 							return;

  00413	e9 d6 02 00 00	 jmp	 $LN1@CL_Connect

; 972  : 						}

  00418	eb 25		 jmp	 SHORT $LN38@CL_Connect
$LN34@CL_Connect:

; 973  : 						else if (i == 1)

  0041a	83 7d f0 01	 cmp	 DWORD PTR _i$[ebp], 1
  0041e	75 0c		 jne	 SHORT $LN36@CL_Connect

; 974  : 							cl_mode = cl_askjoin;

  00420	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _cl_mode, 2
  0042a	eb 13		 jmp	 SHORT $LN38@CL_Connect
$LN36@CL_Connect:

; 975  : 						else
; 976  : 						{ // must download something
; 977  : 							// no problem if can't send packet, we will retry later
; 978  : 							if (SendRequestFile())

  0042c	e8 00 00 00 00	 call	 _SendRequestFile
  00431	85 c0		 test	 eax, eax
  00433	74 0a		 je	 SHORT $LN38@CL_Connect

; 979  : 								cl_mode = cl_downloadfiles;

  00435	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _cl_mode, 1
$LN38@CL_Connect:

; 980  : 						}
; 981  : 					}

  0043f	eb 0a		 jmp	 SHORT $LN33@CL_Connect
$LN32@CL_Connect:

; 982  : 					else
; 983  : 						cl_mode = cl_askjoin; // files need not be checked for the server.

  00441	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _cl_mode, 2
$LN33@CL_Connect:

; 984  : 					break;

  0044b	e9 f1 00 00 00	 jmp	 $LN8@CL_Connect
$LN26@CL_Connect:

; 985  : 				}
; 986  : 				// ask the info to the server (askinfo packet)
; 987  : 				if (asksent + TICRATE < I_GetTime())

  00450	8b 75 e8	 mov	 esi, DWORD PTR _asksent$[ebp]
  00453	83 c6 23	 add	 esi, 35			; 00000023H
  00456	e8 00 00 00 00	 call	 _I_GetTime
  0045b	3b f0		 cmp	 esi, eax
  0045d	73 1c		 jae	 SHORT $LN39@CL_Connect

; 988  : 				{
; 989  : 					SendAskInfo(servernode, viams);

  0045f	8b 45 08	 mov	 eax, DWORD PTR _viams$[ebp]
  00462	50		 push	 eax
  00463	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  0046a	51		 push	 ecx
  0046b	e8 00 00 00 00	 call	 _SendAskInfo
  00470	83 c4 08	 add	 esp, 8

; 990  : 					asksent = I_GetTime();

  00473	e8 00 00 00 00	 call	 _I_GetTime
  00478	89 45 e8	 mov	 DWORD PTR _asksent$[ebp], eax
$LN39@CL_Connect:

; 991  : 				}
; 992  : 				break;

  0047b	e9 c1 00 00 00	 jmp	 $LN8@CL_Connect
$LN40@CL_Connect:

; 993  : 			case cl_downloadfiles:
; 994  : 				waitmore = false;

  00480	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _waitmore$[ebp], 0

; 995  : 				for (i = 0; i < fileneedednum; i++)

  00487	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0048e	eb 09		 jmp	 SHORT $LN12@CL_Connect
$LN10@CL_Connect:
  00490	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00493	83 c0 01	 add	 eax, 1
  00496	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN12@CL_Connect:
  00499	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0049c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _fileneedednum
  004a2	7d 2b		 jge	 SHORT $LN11@CL_Connect

; 996  : 					if (fileneeded[i].status == FS_DOWNLOADING
; 997  : 						|| fileneeded[i].status == FS_REQUESTED)

  004a4	69 45 f0 a4 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 164
  004ab	83 b8 a0 00 00
	00 03		 cmp	 DWORD PTR _fileneeded[eax+160], 3
  004b2	74 10		 je	 SHORT $LN42@CL_Connect
  004b4	69 45 f0 a4 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 164
  004bb	83 b8 a0 00 00
	00 02		 cmp	 DWORD PTR _fileneeded[eax+160], 2
  004c2	75 09		 jne	 SHORT $LN41@CL_Connect
$LN42@CL_Connect:

; 998  : 					{
; 999  : 						waitmore = true;

  004c4	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _waitmore$[ebp], 1

; 1000 : 						break;

  004cb	eb 02		 jmp	 SHORT $LN11@CL_Connect
$LN41@CL_Connect:

; 1001 : 					}

  004cd	eb c1		 jmp	 SHORT $LN10@CL_Connect
$LN11@CL_Connect:

; 1002 : 				if (waitmore)

  004cf	83 7d ec 00	 cmp	 DWORD PTR _waitmore$[ebp], 0
  004d3	74 02		 je	 SHORT $LN43@CL_Connect

; 1003 : 					break; // exit the case

  004d5	eb 6a		 jmp	 SHORT $LN8@CL_Connect
$LN43@CL_Connect:

; 1004 : 
; 1005 : 				cl_mode = cl_askjoin; // don't break case continue to cljoin request now

  004d7	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _cl_mode, 2
$LN44@CL_Connect:

; 1006 : 			case cl_askjoin:
; 1007 : 				CL_LoadServerFiles();

  004e1	e8 00 00 00 00	 call	 _CL_LoadServerFiles
  004e6	90		 npad	 1

; 1008 : #ifdef JOININGAME
; 1009 : 				// prepare structures to save the file
; 1010 : 				// WARNING: this can be useless in case of server not in GS_LEVEL
; 1011 : 				// but since the network layer doesn't provide ordered packets...
; 1012 : 				CL_PrepareDownloadSaveGame(tmpsave);

  004e7	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  004ed	50		 push	 eax
  004ee	e8 00 00 00 00	 call	 _CL_PrepareDownloadSaveGame
  004f3	83 c4 04	 add	 esp, 4

; 1013 : #endif
; 1014 : 				if (CL_SendJoin())

  004f6	e8 00 00 00 00	 call	 _CL_SendJoin
  004fb	85 c0		 test	 eax, eax
  004fd	74 0a		 je	 SHORT $LN45@CL_Connect

; 1015 : 					cl_mode = cl_waitjoinresponse;

  004ff	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _cl_mode, 3
$LN45@CL_Connect:

; 1016 : 				break;

  00509	eb 36		 jmp	 SHORT $LN8@CL_Connect
$LN46@CL_Connect:

; 1017 : #ifdef JOININGAME
; 1018 : 			case cl_downloadsavegame:
; 1019 : 				if (fileneeded[0].status == FS_FOUND)

  0050b	b8 a4 00 00 00	 mov	 eax, 164		; 000000a4H
  00510	6b c8 00	 imul	 ecx, eax, 0
  00513	83 b9 a0 00 00
	00 01		 cmp	 DWORD PTR _fileneeded[ecx+160], 1
  0051a	75 12		 jne	 SHORT $LN47@CL_Connect

; 1020 : 				{
; 1021 : 					// Gamestate is now handled within CL_LoadReceivedSavegame()
; 1022 : 					CL_LoadReceivedSavegame();

  0051c	e8 00 00 00 00	 call	 _CL_LoadReceivedSavegame
  00521	90		 npad	 1

; 1023 : 					cl_mode = cl_connected;

  00522	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR _cl_mode, 5

; 1024 : 				} // don't break case continue to cl_connected

  0052c	eb 02		 jmp	 SHORT $LN48@CL_Connect
$LN47@CL_Connect:

; 1025 : 				else
; 1026 : 					break;

  0052e	eb 11		 jmp	 SHORT $LN8@CL_Connect
$LN48@CL_Connect:

; 1027 : #endif
; 1028 : 			case cl_waitjoinresponse:
; 1029 : 			case cl_connected:
; 1030 : 			default:
; 1031 : 				break;

  00530	eb 0f		 jmp	 SHORT $LN8@CL_Connect
$LN52@CL_Connect:

; 1032 : 
; 1033 : 			// Connection closed by cancel, timeout or refusal.
; 1034 : 			case cl_aborted:
; 1035 : 				cl_mode = cl_searching;

  00532	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cl_mode, 0

; 1036 : 				return;

  0053c	e9 ad 01 00 00	 jmp	 $LN1@CL_Connect
$LN8@CL_Connect:

; 1037 : 		}
; 1038 : 
; 1039 : 		GetPackets();

  00541	e8 00 00 00 00	 call	 _GetPackets
  00546	90		 npad	 1

; 1040 : 		Net_AckTicker();

  00547	e8 00 00 00 00	 call	 _Net_AckTicker
  0054c	90		 npad	 1

; 1041 : 
; 1042 : 		// call it only one by tic
; 1043 : 		if (oldtic != I_GetTime())

  0054d	e8 00 00 00 00	 call	 _I_GetTime
  00552	39 45 e4	 cmp	 DWORD PTR _oldtic$[ebp], eax
  00555	0f 84 88 00 00
	00		 je	 $LN53@CL_Connect

; 1044 : 		{
; 1045 : 			INT32 key;
; 1046 : 
; 1047 : 			I_OsPolling();

  0055b	e8 00 00 00 00	 call	 _I_OsPolling
  00560	90		 npad	 1

; 1048 : 			key = I_GetKey();

  00561	e8 00 00 00 00	 call	 _I_GetKey
  00566	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _key$1[ebp], eax

; 1049 : 			if (key == KEY_ESCAPE)

  0056c	83 bd d8 fe ff
	ff 1b		 cmp	 DWORD PTR _key$1[ebp], 27 ; 0000001bH
  00573	75 33		 jne	 SHORT $LN55@CL_Connect

; 1050 : 			{
; 1051 : 				CONS_Printf("%s",text[NETSYNCABORT]);

  00575	b8 04 00 00 00	 mov	 eax, 4
  0057a	6b c8 22	 imul	 ecx, eax, 34
  0057d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00583	52		 push	 edx
  00584	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00589	e8 00 00 00 00	 call	 _CONS_Printf
  0058e	83 c4 08	 add	 esp, 8

; 1052 : //				M_StartMessage("Network game synchronization aborted.\n\nPress ESC\n", NULL, MM_NOTHING);
; 1053 : 				D_QuitNetGame();

  00591	e8 00 00 00 00	 call	 _D_QuitNetGame
  00596	90		 npad	 1

; 1054 : 				CL_Reset();

  00597	e8 00 00 00 00	 call	 _CL_Reset
  0059c	90		 npad	 1

; 1055 : 				D_StartTitle();

  0059d	e8 00 00 00 00	 call	 _D_StartTitle
  005a2	90		 npad	 1

; 1056 : 				return;

  005a3	e9 46 01 00 00	 jmp	 $LN1@CL_Connect
$LN55@CL_Connect:

; 1057 : 			}
; 1058 : 			if (key == 's' && server)

  005a8	83 bd d8 fe ff
	ff 73		 cmp	 DWORD PTR _key$1[ebp], 115 ; 00000073H
  005af	75 16		 jne	 SHORT $LN56@CL_Connect
  005b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  005b8	74 0d		 je	 SHORT $LN56@CL_Connect

; 1059 : 				doomcom->numnodes = (INT16)pnumnodes;

  005ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  005bf	66 8b 4d f8	 mov	 cx, WORD PTR _pnumnodes$[ebp]
  005c3	66 89 48 0c	 mov	 WORD PTR [eax+12], cx
$LN56@CL_Connect:

; 1060 : 
; 1061 : 			FiletxTicker();

  005c7	e8 00 00 00 00	 call	 _FiletxTicker
  005cc	90		 npad	 1

; 1062 : 			oldtic = I_GetTime();

  005cd	e8 00 00 00 00	 call	 _I_GetTime
  005d2	89 45 e4	 mov	 DWORD PTR _oldtic$[ebp], eax

; 1063 : 
; 1064 : 			CON_Drawer();

  005d5	e8 00 00 00 00	 call	 _CON_Drawer
  005da	90		 npad	 1

; 1065 : 			I_FinishUpdate(); // page flip or blit buffer

  005db	e8 00 00 00 00	 call	 _I_FinishUpdate
  005e0	90		 npad	 1

; 1066 : 		}

  005e1	eb 06		 jmp	 SHORT $LN54@CL_Connect
$LN53@CL_Connect:

; 1067 : 		else I_Sleep();

  005e3	e8 00 00 00 00	 call	 _I_Sleep
  005e8	90		 npad	 1
$LN54@CL_Connect:

; 1068 : 
; 1069 : 		if (server)

  005e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  005f0	74 37		 je	 SHORT $LN14@CL_Connect

; 1070 : 		{
; 1071 : 			pnumnodes = 0;

  005f2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pnumnodes$[ebp], 0

; 1072 : 			for (i = 0; i < MAXNETNODES; i++)

  005f9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00600	eb 09		 jmp	 SHORT $LN15@CL_Connect
$LN13@CL_Connect:
  00602	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00605	83 c0 01	 add	 eax, 1
  00608	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN15@CL_Connect:
  0060b	83 7d f0 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0060f	7d 18		 jge	 SHORT $LN14@CL_Connect

; 1073 : 				if (nodeingame[i]) pnumnodes++;

  00611	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00614	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _nodeingame[eax*4], 0
  0061c	74 09		 je	 SHORT $LN58@CL_Connect
  0061e	8b 45 f8	 mov	 eax, DWORD PTR _pnumnodes$[ebp]
  00621	83 c0 01	 add	 eax, 1
  00624	89 45 f8	 mov	 DWORD PTR _pnumnodes$[ebp], eax
$LN58@CL_Connect:
  00627	eb d9		 jmp	 SHORT $LN13@CL_Connect
$LN14@CL_Connect:

; 1074 : 		}
; 1075 : 	}
; 1076 : 	while (!(cl_mode == cl_connected && (!server || (server && nodewaited <= pnumnodes))));

  00629	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _cl_mode, 5
  00630	0f 85 70 fc ff
	ff		 jne	 $LN65@CL_Connect
  00636	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0063d	74 19		 je	 SHORT $LN59@CL_Connect
  0063f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00646	0f 84 5a fc ff
	ff		 je	 $LN65@CL_Connect
  0064c	8b 45 f4	 mov	 eax, DWORD PTR _nodewaited$[ebp]
  0064f	3b 45 f8	 cmp	 eax, DWORD PTR _pnumnodes$[ebp]
  00652	0f 8f 4e fc ff
	ff		 jg	 $LN65@CL_Connect
$LN59@CL_Connect:

; 1077 : 
; 1078 : 	DEBFILE(va("Synchronisation Finished\n"));

  00658	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0065f	74 2a		 je	 SHORT $LN60@CL_Connect
  00661	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00666	50		 push	 eax
  00667	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BMFHFKFB@Synchronisation?5Finished?6@
  0066c	e8 00 00 00 00	 call	 _va
  00671	83 c4 04	 add	 esp, 4
  00674	50		 push	 eax
  00675	e8 00 00 00 00	 call	 _fputs
  0067a	83 c4 08	 add	 esp, 8
  0067d	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00682	50		 push	 eax
  00683	e8 00 00 00 00	 call	 _fflush
  00688	83 c4 04	 add	 esp, 4
$LN60@CL_Connect:

; 1079 : 
; 1080 : 	if (cv_cheats.value)

  0068b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_cheats+20, 0
  00692	74 50		 je	 SHORT $LN61@CL_Connect

; 1081 : 	{
; 1082 : 		if (!server)

  00694	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0069b	75 28		 jne	 SHORT $LN62@CL_Connect

; 1083 : 			HU_DoCEcho(va("%s", text[CHEATS_ACTIVATED]));

  0069d	b8 04 00 00 00	 mov	 eax, 4
  006a2	69 c8 ce 00 00
	00		 imul	 ecx, eax, 206
  006a8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  006ae	52		 push	 edx
  006af	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  006b4	e8 00 00 00 00	 call	 _va
  006b9	83 c4 08	 add	 esp, 8
  006bc	50		 push	 eax
  006bd	e8 00 00 00 00	 call	 _HU_DoCEcho
  006c2	83 c4 04	 add	 esp, 4
$LN62@CL_Connect:

; 1084 : 		I_OutputMsg("%s", text[CHEATS_ACTIVATED]);

  006c5	b8 04 00 00 00	 mov	 eax, 4
  006ca	69 c8 ce 00 00
	00		 imul	 ecx, eax, 206
  006d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  006d6	52		 push	 edx
  006d7	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  006dc	e8 00 00 00 00	 call	 _I_OutputMsg
  006e1	83 c4 08	 add	 esp, 8
$LN61@CL_Connect:

; 1085 : 	}
; 1086 : 
; 1087 : 	displayplayer = consoleplayer;

  006e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  006e9	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax
$LN1@CL_Connect:

; 1088 : }

  006ee	5f		 pop	 edi
  006ef	5e		 pop	 esi
  006f0	5b		 pop	 ebx
  006f1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006f4	33 cd		 xor	 ecx, ebp
  006f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006fb	8b e5		 mov	 esp, ebp
  006fd	5d		 pop	 ebp
  006fe	c3		 ret	 0
  006ff	90		 npad	 1
$LN66@CL_Connect:
  00700	00 00 00 00	 DD	 $LN25@CL_Connect
  00704	00 00 00 00	 DD	 $LN40@CL_Connect
  00708	00 00 00 00	 DD	 $LN44@CL_Connect
  0070c	00 00 00 00	 DD	 $LN48@CL_Connect
  00710	00 00 00 00	 DD	 $LN46@CL_Connect
  00714	00 00 00 00	 DD	 $LN48@CL_Connect
  00718	00 00 00 00	 DD	 $LN52@CL_Connect
_CL_ConnectToServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SL_InsertServer
_TEXT	SEGMENT
tv83 = -2404						; size = 4
_s$1 = -2080						; size = 1025
_s$2 = -1052						; size = 1025
_keynext$3 = -24					; size = 4
_keyprev$4 = -20					; size = 4
_keycurr$5 = -16					; size = 4
_moved$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_info$ = 8						; size = 4
_node$ = 12						; size = 1
_SL_InsertServer PROC					; COMDAT

; 745  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 09 00
	00		 sub	 esp, 2404		; 00000964H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 746  : 	UINT32 i;
; 747  : 	boolean moved;
; 748  : 
; 749  : 	// search if not already on it
; 750  : 	i = SL_SearchServer(node);

  00016	0f be 45 0c	 movsx	 eax, BYTE PTR _node$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _SL_SearchServer
  00020	83 c4 04	 add	 esp, 4
  00023	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 751  : 	if (i == UINT32_MAX)

  00026	83 7d f8 ff	 cmp	 DWORD PTR _i$[ebp], -1
  0002a	75 49		 jne	 SHORT $LN7@SL_InsertS

; 752  : 	{
; 753  : 		// not found add it
; 754  : 		if (serverlistcount >= MAXSERVERLIST)

  0002c	83 3d 00 00 00
	00 40		 cmp	 DWORD PTR _serverlistcount, 64 ; 00000040H
  00033	72 05		 jb	 SHORT $LN8@SL_InsertS

; 755  : 			return; // list full

  00035	e9 b7 02 00 00	 jmp	 $LN3@SL_InsertS
$LN8@SL_InsertS:

; 756  : 
; 757  : 		if (info->version != VERSION)

  0003a	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  0003d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00040	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  00046	74 05		 je	 SHORT $LN9@SL_InsertS

; 758  : 			return; // Not same version.

  00048	e9 a4 02 00 00	 jmp	 $LN3@SL_InsertS
$LN9@SL_InsertS:

; 759  : 
; 760  : 		if (info->subversion != SUBVERSION)

  0004d	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  00050	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00054	83 f9 07	 cmp	 ecx, 7
  00057	74 05		 je	 SHORT $LN10@SL_InsertS

; 761  : 			return; // Close, but no cigar.

  00059	e9 93 02 00 00	 jmp	 $LN3@SL_InsertS
$LN10@SL_InsertS:

; 762  : 
; 763  : 		i = serverlistcount++;

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  00063	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _serverlistcount
  0006c	83 c1 01	 add	 ecx, 1
  0006f	89 0d 00 00 00
	00		 mov	 DWORD PTR _serverlistcount, ecx
$LN7@SL_InsertS:

; 764  : 	}
; 765  : 
; 766  : 	serverlist[i].info = *info;

  00075	69 7d f8 01 04
	00 00		 imul	 edi, DWORD PTR _i$[ebp], 1025
  0007c	81 c7 01 00 00
	00		 add	 edi, OFFSET _serverlist+1
  00082	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00087	8b 75 08	 mov	 esi, DWORD PTR _info$[ebp]
  0008a	f3 a5		 rep movsd

; 767  : 	serverlist[i].node = node;

  0008c	69 45 f8 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  00093	8a 4d 0c	 mov	 cl, BYTE PTR _node$[ebp]
  00096	88 88 00 00 00
	00		 mov	 BYTE PTR _serverlist[eax], cl
$LN4@SL_InsertS:

; 768  : 
; 769  : 	// list is sorted, so move the entry until it is sorted
; 770  : 	do
; 771  : 	{
; 772  : 		INT32 keycurr = 0, keyprev = 0, keynext = 0;

  0009c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _keycurr$5[ebp], 0
  000a3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _keyprev$4[ebp], 0
  000aa	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _keynext$3[ebp], 0

; 773  : 		switch(cv_serversort.value)

  000b1	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_serversort+20
  000b6	89 85 9c f6 ff
	ff		 mov	 DWORD PTR tv83[ebp], eax
  000bc	83 bd 9c f6 ff
	ff 00		 cmp	 DWORD PTR tv83[ebp], 0
  000c3	74 1b		 je	 SHORT $LN11@SL_InsertS
  000c5	83 bd 9c f6 ff
	ff 01		 cmp	 DWORD PTR tv83[ebp], 1
  000cc	74 64		 je	 SHORT $LN14@SL_InsertS
  000ce	83 bd 9c f6 ff
	ff 02		 cmp	 DWORD PTR tv83[ebp], 2
  000d5	0f 84 a9 00 00
	00		 je	 $LN17@SL_InsertS
  000db	e9 f4 00 00 00	 jmp	 $LN5@SL_InsertS
$LN11@SL_InsertS:

; 774  : 		{
; 775  : 		case 0:		// Ping.
; 776  : 			keycurr = (tic_t)LONG(serverlist[i].info.time);

  000e0	69 45 f8 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  000e7	8b 88 0b 00 00
	00		 mov	 ecx, DWORD PTR _serverlist[eax+11]
  000ed	89 4d f0	 mov	 DWORD PTR _keycurr$5[ebp], ecx

; 777  : 			if (i > 0) keyprev = (tic_t)LONG(serverlist[i-1].info.time);

  000f0	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  000f4	76 15		 jbe	 SHORT $LN12@SL_InsertS
  000f6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000f9	83 e8 01	 sub	 eax, 1
  000fc	69 c8 01 04 00
	00		 imul	 ecx, eax, 1025
  00102	8b 91 0b 00 00
	00		 mov	 edx, DWORD PTR _serverlist[ecx+11]
  00108	89 55 ec	 mov	 DWORD PTR _keyprev$4[ebp], edx
$LN12@SL_InsertS:

; 778  : 			if (i < serverlistcount - 1) keynext = (tic_t)LONG(serverlist[i+1].info.time);

  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  00110	83 e8 01	 sub	 eax, 1
  00113	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  00116	73 15		 jae	 SHORT $LN13@SL_InsertS
  00118	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0011b	83 c0 01	 add	 eax, 1
  0011e	69 c8 01 04 00
	00		 imul	 ecx, eax, 1025
  00124	8b 91 0b 00 00
	00		 mov	 edx, DWORD PTR _serverlist[ecx+11]
  0012a	89 55 e8	 mov	 DWORD PTR _keynext$3[ebp], edx
$LN13@SL_InsertS:

; 779  : 			break;

  0012d	e9 a2 00 00 00	 jmp	 $LN5@SL_InsertS
$LN14@SL_InsertS:

; 780  : 		case 1:		// Players.
; 781  : 			keycurr = serverlist[i].info.numberofplayer;

  00132	69 45 f8 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  00139	0f b6 88 03 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+3]
  00140	89 4d f0	 mov	 DWORD PTR _keycurr$5[ebp], ecx

; 782  : 			if (i > 0) keyprev = serverlist[i-1].info.numberofplayer;

  00143	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  00147	76 16		 jbe	 SHORT $LN15@SL_InsertS
  00149	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0014c	83 e8 01	 sub	 eax, 1
  0014f	69 c8 01 04 00
	00		 imul	 ecx, eax, 1025
  00155	0f b6 91 03 00
	00 00		 movzx	 edx, BYTE PTR _serverlist[ecx+3]
  0015c	89 55 ec	 mov	 DWORD PTR _keyprev$4[ebp], edx
$LN15@SL_InsertS:

; 783  : 			if (i < serverlistcount - 1) keynext = serverlist[i+1].info.numberofplayer;

  0015f	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  00164	83 e8 01	 sub	 eax, 1
  00167	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  0016a	73 16		 jae	 SHORT $LN16@SL_InsertS
  0016c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0016f	83 c0 01	 add	 eax, 1
  00172	69 c8 01 04 00
	00		 imul	 ecx, eax, 1025
  00178	0f b6 91 03 00
	00 00		 movzx	 edx, BYTE PTR _serverlist[ecx+3]
  0017f	89 55 e8	 mov	 DWORD PTR _keynext$3[ebp], edx
$LN16@SL_InsertS:

; 784  : 			break;

  00182	eb 50		 jmp	 SHORT $LN5@SL_InsertS
$LN17@SL_InsertS:

; 785  : 		case 2:		// Gametype.
; 786  : 			keycurr = serverlist[i].info.gametype;

  00184	69 45 f8 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  0018b	0f b6 88 05 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+5]
  00192	89 4d f0	 mov	 DWORD PTR _keycurr$5[ebp], ecx

; 787  : 			if (i > 0) keyprev = serverlist[i-1].info.gametype;

  00195	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  00199	76 16		 jbe	 SHORT $LN18@SL_InsertS
  0019b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0019e	83 e8 01	 sub	 eax, 1
  001a1	69 c8 01 04 00
	00		 imul	 ecx, eax, 1025
  001a7	0f b6 91 05 00
	00 00		 movzx	 edx, BYTE PTR _serverlist[ecx+5]
  001ae	89 55 ec	 mov	 DWORD PTR _keyprev$4[ebp], edx
$LN18@SL_InsertS:

; 788  : 			if (i < serverlistcount - 1) keynext = serverlist[i+1].info.gametype;

  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  001b6	83 e8 01	 sub	 eax, 1
  001b9	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  001bc	73 16		 jae	 SHORT $LN19@SL_InsertS
  001be	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001c1	83 c0 01	 add	 eax, 1
  001c4	69 c8 01 04 00
	00		 imul	 ecx, eax, 1025
  001ca	0f b6 91 05 00
	00 00		 movzx	 edx, BYTE PTR _serverlist[ecx+5]
  001d1	89 55 e8	 mov	 DWORD PTR _keynext$3[ebp], edx
$LN19@SL_InsertS:
$LN5@SL_InsertS:

; 789  : 			break;
; 790  : 		}
; 791  : 
; 792  : 		moved = false;

  001d4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 0

; 793  : 		if (i > 0 && keycurr < keyprev)

  001db	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  001df	76 7f		 jbe	 SHORT $LN20@SL_InsertS
  001e1	8b 45 f0	 mov	 eax, DWORD PTR _keycurr$5[ebp]
  001e4	3b 45 ec	 cmp	 eax, DWORD PTR _keyprev$4[ebp]
  001e7	7d 77		 jge	 SHORT $LN20@SL_InsertS

; 794  : 		{
; 795  : 			serverelem_t s;
; 796  : 			s = serverlist[i];

  001e9	69 75 f8 01 04
	00 00		 imul	 esi, DWORD PTR _i$[ebp], 1025
  001f0	81 c6 00 00 00
	00		 add	 esi, OFFSET _serverlist
  001f6	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  001fb	8d bd e4 fb ff
	ff		 lea	 edi, DWORD PTR _s$2[ebp]
  00201	f3 a5		 rep movsd
  00203	a4		 movsb

; 797  : 			serverlist[i] = serverlist[i-1];

  00204	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00207	83 e8 01	 sub	 eax, 1
  0020a	69 f0 01 04 00
	00		 imul	 esi, eax, 1025
  00210	81 c6 00 00 00
	00		 add	 esi, OFFSET _serverlist
  00216	69 7d f8 01 04
	00 00		 imul	 edi, DWORD PTR _i$[ebp], 1025
  0021d	81 c7 00 00 00
	00		 add	 edi, OFFSET _serverlist
  00223	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00228	f3 a5		 rep movsd
  0022a	a4		 movsb

; 798  : 			serverlist[i-1] = s;

  0022b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0022e	83 e8 01	 sub	 eax, 1
  00231	69 f8 01 04 00
	00		 imul	 edi, eax, 1025
  00237	81 c7 00 00 00
	00		 add	 edi, OFFSET _serverlist
  0023d	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00242	8d b5 e4 fb ff
	ff		 lea	 esi, DWORD PTR _s$2[ebp]
  00248	f3 a5		 rep movsd
  0024a	a4		 movsb

; 799  : 			i--;

  0024b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0024e	83 e8 01	 sub	 eax, 1
  00251	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 800  : 			moved = true;

  00254	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 1

; 801  : 		}

  0025b	e9 87 00 00 00	 jmp	 $LN22@SL_InsertS
$LN20@SL_InsertS:

; 802  : 		else if (i < serverlistcount - 1 && keycurr > keynext)

  00260	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  00265	83 e8 01	 sub	 eax, 1
  00268	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  0026b	73 7a		 jae	 SHORT $LN22@SL_InsertS
  0026d	8b 45 f0	 mov	 eax, DWORD PTR _keycurr$5[ebp]
  00270	3b 45 e8	 cmp	 eax, DWORD PTR _keynext$3[ebp]
  00273	7e 72		 jle	 SHORT $LN22@SL_InsertS

; 803  : 		{
; 804  : 			serverelem_t s;
; 805  : 			s = serverlist[i];

  00275	69 75 f8 01 04
	00 00		 imul	 esi, DWORD PTR _i$[ebp], 1025
  0027c	81 c6 00 00 00
	00		 add	 esi, OFFSET _serverlist
  00282	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00287	8d bd e0 f7 ff
	ff		 lea	 edi, DWORD PTR _s$1[ebp]
  0028d	f3 a5		 rep movsd
  0028f	a4		 movsb

; 806  : 			serverlist[i] = serverlist[i+1];

  00290	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00293	83 c0 01	 add	 eax, 1
  00296	69 f0 01 04 00
	00		 imul	 esi, eax, 1025
  0029c	81 c6 00 00 00
	00		 add	 esi, OFFSET _serverlist
  002a2	69 7d f8 01 04
	00 00		 imul	 edi, DWORD PTR _i$[ebp], 1025
  002a9	81 c7 00 00 00
	00		 add	 edi, OFFSET _serverlist
  002af	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  002b4	f3 a5		 rep movsd
  002b6	a4		 movsb

; 807  : 			serverlist[i+1] = s;

  002b7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002ba	83 c0 01	 add	 eax, 1
  002bd	69 f8 01 04 00
	00		 imul	 edi, eax, 1025
  002c3	81 c7 00 00 00
	00		 add	 edi, OFFSET _serverlist
  002c9	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  002ce	8d b5 e0 f7 ff
	ff		 lea	 esi, DWORD PTR _s$1[ebp]
  002d4	f3 a5		 rep movsd
  002d6	a4		 movsb

; 808  : 			i++;

  002d7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002da	83 c0 01	 add	 eax, 1
  002dd	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 809  : 			moved = true;

  002e0	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _moved$[ebp], 1
$LN22@SL_InsertS:

; 810  : 		}
; 811  : 	} while (moved);

  002e7	83 7d f4 00	 cmp	 DWORD PTR _moved$[ebp], 0
  002eb	0f 85 ab fd ff
	ff		 jne	 $LN4@SL_InsertS
$LN3@SL_InsertS:

; 812  : }

  002f1	5f		 pop	 edi
  002f2	5e		 pop	 esi
  002f3	5b		 pop	 ebx
  002f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f7	33 cd		 xor	 ecx, ebp
  002f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fe	8b e5		 mov	 esp, ebp
  00300	5d		 pop	 ebp
  00301	c3		 ret	 0
_SL_InsertServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SL_SearchServer
_TEXT	SEGMENT
_i$ = -4						; size = 4
_node$ = 8						; size = 4
_SL_SearchServer PROC					; COMDAT

; 735  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 736  : 	UINT32 i;
; 737  : 	for (i = 0; i < serverlistcount; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@SL_SearchS
$LN2@SL_SearchS:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@SL_SearchS:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverlistcount
  00024	73 1a		 jae	 SHORT $LN3@SL_SearchS

; 738  : 		if (serverlist[i].node == node)

  00026	69 45 fc 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  0002d	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _serverlist[eax]
  00034	3b 4d 08	 cmp	 ecx, DWORD PTR _node$[ebp]
  00037	75 05		 jne	 SHORT $LN5@SL_SearchS

; 739  : 			return i;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003c	eb 05		 jmp	 SHORT $LN1@SL_SearchS
$LN5@SL_SearchS:
  0003e	eb d2		 jmp	 SHORT $LN2@SL_SearchS
$LN3@SL_SearchS:

; 740  : 
; 741  : 	return UINT32_MAX;

  00040	83 c8 ff	 or	 eax, -1
$LN1@SL_SearchS:

; 742  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_SL_SearchServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SL_ClearServerList
_TEXT	SEGMENT
_i$ = -4						; size = 4
_connectedserver$ = 8					; size = 4
_SL_ClearServerList PROC				; COMDAT

; 722  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 723  : 	UINT32 i;
; 724  : 
; 725  : 	for (i = 0; i < serverlistcount; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@SL_ClearSe
$LN2@SL_ClearSe:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@SL_ClearSe:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverlistcount
  00024	73 3a		 jae	 SHORT $LN3@SL_ClearSe

; 726  : 		if (connectedserver != serverlist[i].node)

  00026	69 45 fc 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  0002d	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _serverlist[eax]
  00034	39 4d 08	 cmp	 DWORD PTR _connectedserver$[ebp], ecx
  00037	74 25		 je	 SHORT $LN5@SL_ClearSe

; 727  : 		{
; 728  : 			Net_CloseConnection(serverlist[i].node);

  00039	69 45 fc 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  00040	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _serverlist[eax]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _Net_CloseConnection
  0004d	83 c4 04	 add	 esp, 4

; 729  : 			serverlist[i].node = 0;

  00050	69 45 fc 01 04
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1025
  00057	c6 80 00 00 00
	00 00		 mov	 BYTE PTR _serverlist[eax], 0
$LN5@SL_ClearSe:

; 730  : 		}

  0005e	eb b2		 jmp	 SHORT $LN2@SL_ClearSe
$LN3@SL_ClearSe:

; 731  : 	serverlistcount = 0;

  00060	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _serverlistcount, 0

; 732  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_SL_ClearServerList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SendAskInfo
_TEXT	SEGMENT
_asktime$ = -4						; size = 4
_node$ = 8						; size = 4
_viams$ = 12						; size = 4
_SendAskInfo PROC					; COMDAT

; 702  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 703  : 	const tic_t asktime = I_GetTime();

  00009	e8 00 00 00 00	 call	 _I_GetTime
  0000e	89 45 fc	 mov	 DWORD PTR _asktime$[ebp], eax

; 704  : 	netbuffer->packettype = PT_ASKINFO;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00016	c6 40 06 0c	 mov	 BYTE PTR [eax+6], 12	; 0000000cH

; 705  : 	netbuffer->u.askinfo.version = VERSION;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0001f	c6 40 08 c8	 mov	 BYTE PTR [eax+8], 200	; 000000c8H

; 706  : 	netbuffer->u.askinfo.time = (tic_t)LONG(asktime);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _asktime$[ebp]
  0002b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 707  : 
; 708  : 	// Even if this never arrives due to the host being firewalled, we've
; 709  : 	// now allowed traffic from the host to us in, so once the MS relays
; 710  : 	// our address to the host, it'll be able to speak to us.
; 711  : 	HSendPacket(node, false, 0, sizeof (askinfo_pak));

  0002e	6a 08		 push	 8
  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _HSendPacket
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 712  : 
; 713  : 	// Also speak to the MS.
; 714  : 	if (viams && node != 0 && node != BROADCASTADDR)

  00040	83 7d 0c 00	 cmp	 DWORD PTR _viams$[ebp], 0
  00044	74 1c		 je	 SHORT $LN2@SendAskInf
  00046	83 7d 08 00	 cmp	 DWORD PTR _node$[ebp], 0
  0004a	74 16		 je	 SHORT $LN2@SendAskInf
  0004c	83 7d 08 20	 cmp	 DWORD PTR _node$[ebp], 32 ; 00000020H
  00050	74 10		 je	 SHORT $LN2@SendAskInf

; 715  : 		SendAskInfoViaMS(node, asktime);

  00052	8b 45 fc	 mov	 eax, DWORD PTR _asktime$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _SendAskInfoViaMS
  0005f	83 c4 08	 add	 esp, 8
$LN2@SendAskInf:

; 716  : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_SendAskInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_LoadReceivedSavegame
_TEXT	SEGMENT
_actnum$1 = -272					; size = 4
_tmpsave$ = -268					; size = 256
_length$ = -12						; size = 4
_savebuffer$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_CL_LoadReceivedSavegame PROC				; COMDAT

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 643  : 	UINT8 *savebuffer = NULL;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _savebuffer$[ebp], 0

; 644  : 	size_t length;
; 645  : 	XBOXSTATIC char tmpsave[256];
; 646  : 
; 647  : 	sprintf(tmpsave, "%s" PATHSEP TMPSAVENAME, srb2home);

  0001d	68 00 00 00 00	 push	 OFFSET _srb2home
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HFDDGAM@?$CFs?2$$$?4sav@
  00027	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _sprintf
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 648  : 
; 649  : 	length = FIL_ReadFile(tmpsave, &savebuffer);

  00036	8d 45 f8	 lea	 eax, DWORD PTR _savebuffer$[ebp]
  00039	50		 push	 eax
  0003a	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _tmpsave$[ebp]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _FIL_ReadFile
  00046	83 c4 08	 add	 esp, 8
  00049	89 45 f4	 mov	 DWORD PTR _length$[ebp], eax

; 650  : 
; 651  : 	CONS_Printf(text[LOADSAVEGAME], length);

  0004c	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  0004f	50		 push	 eax
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	6b d1 15	 imul	 edx, ecx, 21
  00058	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _CONS_Printf
  00064	83 c4 08	 add	 esp, 8

; 652  : 	if (!length)

  00067	83 7d f4 00	 cmp	 DWORD PTR _length$[ebp], 0
  0006b	75 12		 jne	 SHORT $LN2@CL_LoadRec

; 653  : 	{
; 654  : 		I_Error("Can't read savegame sent");

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IBFAGDLO@Can?8t?5read?5savegame?5sent@
  00072	e8 00 00 00 00	 call	 _I_Error
  00077	83 c4 04	 add	 esp, 4

; 655  : 		return;

  0007a	e9 fe 01 00 00	 jmp	 $LN1@CL_LoadRec
$LN2@CL_LoadRec:

; 656  : 	}
; 657  : 
; 658  : 	save_p = savebuffer;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _savebuffer$[ebp]
  00082	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 659  : 
; 660  : 	paused = false;

  00087	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 661  : 	demoplayback = false;

  0008e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _demoplayback, 0

; 662  : 	automapactive = false;

  00098	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _automapactive, 0

; 663  : 
; 664  : 	// load a base level
; 665  : 	playerdeadview = false;

  000a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _playerdeadview, 0

; 666  : 
; 667  : 	if (P_LoadNetGame())

  000ac	e8 00 00 00 00	 call	 _P_LoadNetGame
  000b1	85 c0		 test	 eax, eax
  000b3	0f 84 f2 00 00
	00		 je	 $LN3@CL_LoadRec

; 668  : 	{
; 669  : 		const INT32 actnum = mapheaderinfo[gamemap-1].actnum;

  000b9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000c0	83 e8 01	 sub	 eax, 1
  000c3	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000c9	0f b6 91 42 00
	00 00		 movzx	 edx, BYTE PTR _mapheaderinfo[ecx+66]
  000d0	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _actnum$1[ebp], edx

; 670  : 		CONS_Printf(text[MAPISNOW], G_BuildMapName(gamemap));

  000d6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _G_BuildMapName
  000e3	83 c4 04	 add	 esp, 4
  000e6	50		 push	 eax
  000e7	b9 04 00 00 00	 mov	 ecx, 4
  000ec	6b d1 16	 imul	 edx, ecx, 22
  000ef	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _CONS_Printf
  000fb	83 c4 08	 add	 esp, 8

; 671  : 		if (strcmp(mapheaderinfo[gamemap-1].lvlttl, ""))

  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00103	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0010a	83 e8 01	 sub	 eax, 1
  0010d	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00113	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  00119	51		 push	 ecx
  0011a	e8 00 00 00 00	 call	 _strcmp
  0011f	83 c4 08	 add	 esp, 8
  00122	85 c0		 test	 eax, eax
  00124	74 76		 je	 SHORT $LN7@CL_LoadRec

; 672  : 		{
; 673  : 			CONS_Printf(": %s", mapheaderinfo[gamemap-1].lvlttl);

  00126	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0012d	83 e8 01	 sub	 eax, 1
  00130	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00136	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  0013c	51		 push	 ecx
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_04EIOKKJMF@?3?5?$CFs@
  00142	e8 00 00 00 00	 call	 _CONS_Printf
  00147	83 c4 08	 add	 esp, 8

; 674  : 			if (!mapheaderinfo[gamemap-1].nozone)

  0014a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00151	83 e8 01	 sub	 eax, 1
  00154	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0015a	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  00161	75 1c		 jne	 SHORT $LN6@CL_LoadRec

; 675  : 				CONS_Printf(" %s",text[ZONE]);

  00163	b8 04 00 00 00	 mov	 eax, 4
  00168	6b c8 17	 imul	 ecx, eax, 23
  0016b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00171	52		 push	 edx
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_03EEBNCBOD@?5?$CFs@
  00177	e8 00 00 00 00	 call	 _CONS_Printf
  0017c	83 c4 08	 add	 esp, 8
$LN6@CL_LoadRec:

; 676  : 			if (actnum > 0)

  0017f	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _actnum$1[ebp], 0
  00186	7e 14		 jle	 SHORT $LN7@CL_LoadRec

; 677  : 				CONS_Printf(" %2d", actnum);

  00188	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _actnum$1[ebp]
  0018e	50		 push	 eax
  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_04EJIOOHLH@?5?$CF2d@
  00194	e8 00 00 00 00	 call	 _CONS_Printf
  00199	83 c4 08	 add	 esp, 8
$LN7@CL_LoadRec:

; 678  : 		}
; 679  : 		CONS_Printf("\"\n");

  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_02MBJIFMOJ@?$CC?6@
  001a1	e8 00 00 00 00	 call	 _CONS_Printf
  001a6	83 c4 04	 add	 esp, 4

; 680  : 	}

  001a9	eb 66		 jmp	 SHORT $LN4@CL_LoadRec
$LN3@CL_LoadRec:

; 681  : 	else
; 682  : 	{
; 683  : 		CONS_Printf("%s",text[CANNOTLOADLEVEL]);

  001ab	b8 04 00 00 00	 mov	 eax, 4
  001b0	6b c8 18	 imul	 ecx, eax, 24
  001b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001b9	52		 push	 edx
  001ba	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001bf	e8 00 00 00 00	 call	 _CONS_Printf
  001c4	83 c4 08	 add	 esp, 8

; 684  : 		Z_Free(savebuffer);

  001c7	8b 45 f8	 mov	 eax, DWORD PTR _savebuffer$[ebp]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 _Z_Free
  001d0	83 c4 04	 add	 esp, 4

; 685  : 		save_p = NULL;

  001d3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _save_p, 0

; 686  : 		if (unlink(tmpsave) == -1)

  001dd	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _unlink
  001e9	83 c4 04	 add	 esp, 4
  001ec	83 f8 ff	 cmp	 eax, -1
  001ef	75 1e		 jne	 SHORT $LN8@CL_LoadRec

; 687  : 			CONS_Printf(text[CANNOTDELETE], tmpsave);

  001f1	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  001f7	50		 push	 eax
  001f8	b9 04 00 00 00	 mov	 ecx, 4
  001fd	6b d1 19	 imul	 edx, ecx, 25
  00200	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00206	50		 push	 eax
  00207	e8 00 00 00 00	 call	 _CONS_Printf
  0020c	83 c4 08	 add	 esp, 8
$LN8@CL_LoadRec:

; 688  : 		return;

  0020f	eb 6c		 jmp	 SHORT $LN1@CL_LoadRec
$LN4@CL_LoadRec:

; 689  : 	}
; 690  : 
; 691  : 	// done
; 692  : 	Z_Free(savebuffer);

  00211	8b 45 f8	 mov	 eax, DWORD PTR _savebuffer$[ebp]
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 _Z_Free
  0021a	83 c4 04	 add	 esp, 4

; 693  : 	save_p = NULL;

  0021d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _save_p, 0

; 694  : 	if (unlink(tmpsave) == -1)

  00227	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 _unlink
  00233	83 c4 04	 add	 esp, 4
  00236	83 f8 ff	 cmp	 eax, -1
  00239	75 1e		 jne	 SHORT $LN9@CL_LoadRec

; 695  : 		CONS_Printf(text[CANNOTDELETE], tmpsave);

  0023b	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpsave$[ebp]
  00241	50		 push	 eax
  00242	b9 04 00 00 00	 mov	 ecx, 4
  00247	6b d1 19	 imul	 edx, ecx, 25
  0024a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _CONS_Printf
  00256	83 c4 08	 add	 esp, 8
$LN9@CL_LoadRec:

; 696  : 	consistancy[gametic%BACKUPTICS] = Consistancy();

  00259	e8 00 00 00 00	 call	 _Consistancy
  0025e	66 8b c8	 mov	 cx, ax
  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00266	33 d2		 xor	 edx, edx
  00268	be 20 00 00 00	 mov	 esi, 32			; 00000020H
  0026d	f7 f6		 div	 esi
  0026f	66 89 0c 55 00
	00 00 00	 mov	 WORD PTR _consistancy[edx*2], cx

; 697  : 	CON_ToggleOff();

  00277	e8 00 00 00 00	 call	 _CON_ToggleOff
  0027c	90		 npad	 1
$LN1@CL_LoadRec:

; 698  : }

  0027d	5f		 pop	 edi
  0027e	5e		 pop	 esi
  0027f	5b		 pop	 ebx
  00280	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00283	33 cd		 xor	 ecx, ebp
  00285	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0028a	8b e5		 mov	 esp, ebp
  0028c	5d		 pop	 ebp
  0028d	c3		 ret	 0
_CL_LoadReceivedSavegame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SendSaveGame
_TEXT	SEGMENT
_savebuffer$ = -8					; size = 4
_length$ = -4						; size = 4
_node$ = 8						; size = 4
_SV_SendSaveGame PROC					; COMDAT

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 568  : 	size_t length;
; 569  : 	UINT8 *savebuffer;
; 570  : 
; 571  : 	// first save it in a malloced buffer
; 572  : 	save_p = savebuffer = (UINT8 *)malloc(SAVEGAMESIZE);

  00009	68 00 00 0c 00	 push	 786432			; 000c0000H
  0000e	e8 00 00 00 00	 call	 _malloc
  00013	83 c4 04	 add	 esp, 4
  00016	89 45 f8	 mov	 DWORD PTR _savebuffer$[ebp], eax
  00019	8b 45 f8	 mov	 eax, DWORD PTR _savebuffer$[ebp]
  0001c	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 573  : 	if (!save_p)

  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _save_p, 0
  00028	75 1e		 jne	 SHORT $LN2@SV_SendSav

; 574  : 	{
; 575  : 		CONS_Printf("%s",text[NOSAVEGAMEMEM]);

  0002a	b8 04 00 00 00	 mov	 eax, 4
  0002f	6b c8 14	 imul	 ecx, eax, 20
  00032	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00038	52		 push	 edx
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0003e	e8 00 00 00 00	 call	 _CONS_Printf
  00043	83 c4 08	 add	 esp, 8

; 576  : 		return;

  00046	eb 5f		 jmp	 SHORT $LN1@SV_SendSav
$LN2@SV_SendSav:

; 577  : 	}
; 578  : 
; 579  : 	P_SaveNetGame();

  00048	e8 00 00 00 00	 call	 _P_SaveNetGame
  0004d	90		 npad	 1

; 580  : 
; 581  : 	length = save_p - savebuffer;

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00053	2b 45 f8	 sub	 eax, DWORD PTR _savebuffer$[ebp]
  00056	89 45 fc	 mov	 DWORD PTR _length$[ebp], eax

; 582  : 	if (length > SAVEGAMESIZE)

  00059	81 7d fc 00 00
	0c 00		 cmp	 DWORD PTR _length$[ebp], 786432 ; 000c0000H
  00060	76 23		 jbe	 SHORT $LN3@SV_SendSav

; 583  : 	{
; 584  : 		free(savebuffer);

  00062	8b 45 f8	 mov	 eax, DWORD PTR _savebuffer$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _free
  0006b	83 c4 04	 add	 esp, 4

; 585  : 		save_p = NULL;

  0006e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _save_p, 0

; 586  : 		I_Error("Savegame buffer overrun");

  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MJMFNFOM@Savegame?5buffer?5overrun@
  0007d	e8 00 00 00 00	 call	 _I_Error
  00082	83 c4 04	 add	 esp, 4
$LN3@SV_SendSav:

; 587  : 	}
; 588  : 
; 589  : 	// then send it!
; 590  : 	SendRam(node, savebuffer, length, SF_RAM, 0);

  00085	6a 00		 push	 0
  00087	6a 02		 push	 2
  00089	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d f8	 mov	 ecx, DWORD PTR _savebuffer$[ebp]
  00090	51		 push	 ecx
  00091	8b 55 08	 mov	 edx, DWORD PTR _node$[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 _SendRam
  0009a	83 c4 14	 add	 esp, 20			; 00000014H

; 591  : 	//free(savebuffer); //but don't free the data, we will do that later after the real send
; 592  : 	save_p = NULL;

  0009d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _save_p, 0
$LN1@SV_SendSav:

; 593  : }

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_SV_SendSaveGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SendServerConfig
_TEXT	SEGMENT
_len$1 = -24						; size = 4
_playermask$ = -20					; size = 4
_waspacketsent$ = -16					; size = 4
_op$ = -12						; size = 4
_p$ = -8						; size = 4
_i$ = -4						; size = 4
_node$ = 8						; size = 4
_SV_SendServerConfig PROC				; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 508  : 	INT32 i;
; 509  : 	UINT8 *p, *op;
; 510  : 	boolean waspacketsent;
; 511  : 	UINT32 playermask = 0;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _playermask$[ebp], 0

; 512  : 
; 513  : 	netbuffer->packettype = PT_SERVERCFG;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00015	c6 40 06 01	 mov	 BYTE PTR [eax+6], 1

; 514  : 	for (i = 0; i < MAXPLAYERS; i++)

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@SV_SendSer
$LN2@SV_SendSer:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@SV_SendSer:
  0002b	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0002f	7d 1f		 jge	 SHORT $LN3@SV_SendSer

; 515  : 		if (playeringame[i])

  00031	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00034	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0003c	74 10		 je	 SHORT $LN5@SV_SendSer

; 516  : 			playermask |= 1<<i;

  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00046	d3 e0		 shl	 eax, cl
  00048	0b 45 ec	 or	 eax, DWORD PTR _playermask$[ebp]
  0004b	89 45 ec	 mov	 DWORD PTR _playermask$[ebp], eax
$LN5@SV_SendSer:
  0004e	eb d2		 jmp	 SHORT $LN2@SV_SendSer
$LN3@SV_SendSer:

; 517  : 
; 518  : 	netbuffer->u.servercfg.version = VERSION;

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00055	c6 40 08 c8	 mov	 BYTE PTR [eax+8], 200	; 000000c8H

; 519  : 	netbuffer->u.servercfg.subversion = SUBVERSION;

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0005e	c6 40 0c 07	 mov	 BYTE PTR [eax+12], 7

; 520  : 
; 521  : 	netbuffer->u.servercfg.serverplayer = (UINT8)serverplayer;

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00067	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _serverplayer
  0006d	88 48 10	 mov	 BYTE PTR [eax+16], cl

; 522  : 	netbuffer->u.servercfg.totalslotnum = (UINT8)(doomcom->numslots);

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  0007b	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  0007e	88 50 11	 mov	 BYTE PTR [eax+17], dl

; 523  : 	netbuffer->u.servercfg.playerdetected = LONG(playermask);

  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00086	8b 4d ec	 mov	 ecx, DWORD PTR _playermask$[ebp]
  00089	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 524  : 	netbuffer->u.servercfg.gametic = (tic_t)LONG(gametic);

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  00097	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 525  : 	netbuffer->u.servercfg.clientnode = (UINT8)node;

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0009f	8a 4d 08	 mov	 cl, BYTE PTR _node$[ebp]
  000a2	88 48 18	 mov	 BYTE PTR [eax+24], cl

; 526  : 	netbuffer->u.servercfg.gamestate = (UINT8)gamestate;

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000aa	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _gamestate
  000b0	88 48 19	 mov	 BYTE PTR [eax+25], cl

; 527  : 	netbuffer->u.servercfg.gametype = (UINT8)gametype;

  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000b8	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _gametype
  000be	88 48 20	 mov	 BYTE PTR [eax+32], cl

; 528  : 	netbuffer->u.servercfg.adminplayer = (SINT8)adminplayer;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000c6	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _adminplayer
  000cc	88 48 22	 mov	 BYTE PTR [eax+34], cl

; 529  : 	netbuffer->u.servercfg.modifiedgame = (UINT8)modifiedgame;

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000d4	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _modifiedgame
  000da	88 48 21	 mov	 BYTE PTR [eax+33], cl

; 530  : 	op = p = netbuffer->u.servercfg.netcvarstates;

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000e2	83 c0 23	 add	 eax, 35			; 00000023H
  000e5	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  000e8	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000eb	89 4d f4	 mov	 DWORD PTR _op$[ebp], ecx

; 531  : 	CV_SaveNetVars(&p);

  000ee	8d 45 f8	 lea	 eax, DWORD PTR _p$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _CV_SaveNetVars
  000f7	83 c4 04	 add	 esp, 4

; 532  : 	{
; 533  : 		const size_t len = sizeof (serverconfig_pak) + (size_t)(p - op);

  000fa	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000fd	2b 45 f4	 sub	 eax, DWORD PTR _op$[ebp]
  00100	83 c0 1b	 add	 eax, 27			; 0000001bH
  00103	89 45 e8	 mov	 DWORD PTR _len$1[ebp], eax

; 534  : 
; 535  : #ifdef DEBUGFILE
; 536  : 		if (debugfile)

  00106	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0010d	74 1c		 je	 SHORT $LN6@SV_SendSer

; 537  : 		{
; 538  : 			fprintf(debugfile, "ServerConfig Packet about to be sent, size of packet:%"PRIdS" to node:%d\n",

  0010f	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00112	50		 push	 eax
  00113	8b 4d e8	 mov	 ecx, DWORD PTR _len$1[ebp]
  00116	51		 push	 ecx
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@MJFOMBPH@ServerConfig?5Packet?5about?5to?5be@
  0011c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _debugfile
  00122	52		 push	 edx
  00123	e8 00 00 00 00	 call	 _fprintf
  00128	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@SV_SendSer:

; 539  : 				len, node);
; 540  : 		}
; 541  : #endif
; 542  : 
; 543  : 		waspacketsent = HSendPacket(node, true, 0, len);

  0012b	8b 45 e8	 mov	 eax, DWORD PTR _len$1[ebp]
  0012e	50		 push	 eax
  0012f	6a 00		 push	 0
  00131	6a 01		 push	 1
  00133	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  00136	51		 push	 ecx
  00137	e8 00 00 00 00	 call	 _HSendPacket
  0013c	83 c4 10	 add	 esp, 16			; 00000010H
  0013f	89 45 f0	 mov	 DWORD PTR _waspacketsent$[ebp], eax

; 544  : 	}
; 545  : 
; 546  : #ifdef DEBUGFILE
; 547  : 	if (debugfile)

  00142	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00149	74 2e		 je	 SHORT $LN9@SV_SendSer

; 548  : 	{
; 549  : 		if (waspacketsent)

  0014b	83 7d f0 00	 cmp	 DWORD PTR _waspacketsent$[ebp], 0
  0014f	74 15		 je	 SHORT $LN8@SV_SendSer

; 550  : 		{
; 551  : 			fprintf(debugfile, "ServerConfig Packet was sent\n");

  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OGAPGFLP@ServerConfig?5Packet?5was?5sent?6@
  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _fprintf
  00161	83 c4 08	 add	 esp, 8

; 552  : 		}

  00164	eb 13		 jmp	 SHORT $LN9@SV_SendSer
$LN8@SV_SendSer:

; 553  : 		else
; 554  : 		{
; 555  : 			fprintf(debugfile, "ServerConfig Packet could not be sent right now\n");

  00166	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@IAHNBDHG@ServerConfig?5Packet?5could?5not?5b@
  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _fprintf
  00176	83 c4 08	 add	 esp, 8
$LN9@SV_SendSer:

; 556  : 		}
; 557  : 	}
; 558  : #endif
; 559  : 
; 560  : 	return waspacketsent;

  00179	8b 45 f0	 mov	 eax, DWORD PTR _waspacketsent$[ebp]

; 561  : }

  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
_SV_SendServerConfig ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SendPlayerInfo
_TEXT	SEGMENT
_numericaddress$1 = -28					; size = 16
_claddress$2 = -12					; size = 4
_i$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
_node$ = 8						; size = 4
_SV_SendPlayerInfo PROC					; COMDAT

; 434  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 435  : 	UINT8 i;
; 436  : 	netbuffer->packettype = PT_PLAYERINFO;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00018	c6 40 06 0e	 mov	 BYTE PTR [eax+6], 14	; 0000000eH

; 437  : 
; 438  : 	for (i = 0; i < MAXPLAYERS; i++)

  0001c	c6 45 fb 00	 mov	 BYTE PTR _i$[ebp], 0
  00020	eb 08		 jmp	 SHORT $LN4@SV_SendPla
$LN2@SV_SendPla:
  00022	8a 45 fb	 mov	 al, BYTE PTR _i$[ebp]
  00025	04 01		 add	 al, 1
  00027	88 45 fb	 mov	 BYTE PTR _i$[ebp], al
$LN4@SV_SendPla:
  0002a	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  0002e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00031	0f 8d bd 03 00
	00		 jge	 $LN3@SV_SendPla

; 439  : 	{
; 440  : 		if (!playeringame[i])

  00037	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  0003b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00043	75 14		 jne	 SHORT $LN5@SV_SendPla

; 441  : 		{
; 442  : 			netbuffer->u.playerinfo[i].node = 255; // This slot is empty.

  00045	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00049	6b c8 24	 imul	 ecx, eax, 36
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00052	c6 44 0a 08 ff	 mov	 BYTE PTR [edx+ecx+8], 255 ; 000000ffH

; 443  : 			continue;

  00057	eb c9		 jmp	 SHORT $LN2@SV_SendPla
$LN5@SV_SendPla:

; 444  : 		}
; 445  : 
; 446  : 		netbuffer->u.playerinfo[i].node = (UINT8)playernode[i];

  00059	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  0005d	0f b6 4d fb	 movzx	 ecx, BYTE PTR _i$[ebp]
  00061	6b d1 24	 imul	 edx, ecx, 36
  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  0006a	8a 80 00 00 00
	00		 mov	 al, BYTE PTR _playernode[eax]
  00070	88 44 11 08	 mov	 BYTE PTR [ecx+edx+8], al

; 447  : 		strncpy(netbuffer->u.playerinfo[i].name, (const char *)&player_names[i], MAXPLAYERNAME+1);

  00074	6a 16		 push	 22			; 00000016H
  00076	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  0007a	6b c8 16	 imul	 ecx, eax, 22
  0007d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00083	51		 push	 ecx
  00084	0f b6 55 fb	 movzx	 edx, BYTE PTR _i$[ebp]
  00088	6b c2 24	 imul	 eax, edx, 36
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00091	8d 54 01 09	 lea	 edx, DWORD PTR [ecx+eax+9]
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 _strncpy
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 448  : 		netbuffer->u.playerinfo[i].name[MAXPLAYERNAME] = '\0';

  0009e	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  000a2	6b c8 24	 imul	 ecx, eax, 36
  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  000ab	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  000af	b9 01 00 00 00	 mov	 ecx, 1
  000b4	6b d1 15	 imul	 edx, ecx, 21
  000b7	c6 44 10 01 00	 mov	 BYTE PTR [eax+edx+1], 0

; 449  : 
; 450  : 		//fetch IP address
; 451  : 		{
; 452  : 			const char *claddress;
; 453  : 			UINT32 numericaddress[4];
; 454  : 
; 455  : 			if (playernode[i] == 0)

  000bc	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  000c0	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  000c7	85 c9		 test	 ecx, ecx
  000c9	75 1a		 jne	 SHORT $LN6@SV_SendPla

; 456  : 				netbuffer->u.playerinfo[i].address = 2130706433; //127.0.0.1

  000cb	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  000cf	6b c8 24	 imul	 ecx, eax, 36
  000d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  000d8	c7 44 0a 1f 01
	00 00 7f	 mov	 DWORD PTR [edx+ecx+31], 2130706433 ; 7f000001H
  000e0	e9 19 01 00 00	 jmp	 $LN9@SV_SendPla
$LN6@SV_SendPla:

; 457  : 			else if (playernode[i] > 0 && I_GetNodeAddress && (claddress = I_GetNodeAddress(playernode[i])) != NULL)

  000e5	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  000e9	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  000f0	85 c9		 test	 ecx, ecx
  000f2	0f 8e f1 00 00
	00		 jle	 $badaddress$22
  000f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_GetNodeAddress, 0
  000ff	0f 84 e4 00 00
	00		 je	 $badaddress$22
  00105	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00109	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _playernode[eax]
  00110	51		 push	 ecx
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR _I_GetNodeAddress
  00117	83 c4 04	 add	 esp, 4
  0011a	89 45 f4	 mov	 DWORD PTR _claddress$2[ebp], eax
  0011d	83 7d f4 00	 cmp	 DWORD PTR _claddress$2[ebp], 0
  00121	0f 84 c2 00 00
	00		 je	 $badaddress$22

; 458  : 			{
; 459  : 				if (sscanf(claddress, "%d.%d.%d.%d", &numericaddress[0], &numericaddress[1], &numericaddress[2], &numericaddress[3]) < 4)

  00127	b8 04 00 00 00	 mov	 eax, 4
  0012c	6b c8 03	 imul	 ecx, eax, 3
  0012f	8d 54 0d e4	 lea	 edx, DWORD PTR _numericaddress$1[ebp+ecx]
  00133	52		 push	 edx
  00134	b8 04 00 00 00	 mov	 eax, 4
  00139	d1 e0		 shl	 eax, 1
  0013b	8d 4c 05 e4	 lea	 ecx, DWORD PTR _numericaddress$1[ebp+eax]
  0013f	51		 push	 ecx
  00140	ba 04 00 00 00	 mov	 edx, 4
  00145	c1 e2 00	 shl	 edx, 0
  00148	8d 44 15 e4	 lea	 eax, DWORD PTR _numericaddress$1[ebp+edx]
  0014c	50		 push	 eax
  0014d	b9 04 00 00 00	 mov	 ecx, 4
  00152	6b d1 00	 imul	 edx, ecx, 0
  00155	8d 44 15 e4	 lea	 eax, DWORD PTR _numericaddress$1[ebp+edx]
  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd@
  0015f	8b 4d f4	 mov	 ecx, DWORD PTR _claddress$2[ebp]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 _sscanf
  00168	83 c4 18	 add	 esp, 24			; 00000018H
  0016b	83 f8 04	 cmp	 eax, 4
  0016e	7d 02		 jge	 SHORT $LN10@SV_SendPla

; 460  : 					goto badaddress;

  00170	eb 77		 jmp	 SHORT $badaddress$22
$LN10@SV_SendPla:

; 461  : 				netbuffer->u.playerinfo[i].address = ((numericaddress[0]%256) << 24) + ((numericaddress[1]%256) << 16) +

  00172	b8 04 00 00 00	 mov	 eax, 4
  00177	6b c8 00	 imul	 ecx, eax, 0
  0017a	8b 44 0d e4	 mov	 eax, DWORD PTR _numericaddress$1[ebp+ecx]
  0017e	33 d2		 xor	 edx, edx
  00180	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00185	f7 f1		 div	 ecx
  00187	8b ca		 mov	 ecx, edx
  00189	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0018c	ba 04 00 00 00	 mov	 edx, 4
  00191	c1 e2 00	 shl	 edx, 0
  00194	8b 44 15 e4	 mov	 eax, DWORD PTR _numericaddress$1[ebp+edx]
  00198	33 d2		 xor	 edx, edx
  0019a	be 00 01 00 00	 mov	 esi, 256		; 00000100H
  0019f	f7 f6		 div	 esi
  001a1	c1 e2 10	 shl	 edx, 16			; 00000010H
  001a4	03 ca		 add	 ecx, edx
  001a6	b8 04 00 00 00	 mov	 eax, 4
  001ab	d1 e0		 shl	 eax, 1
  001ad	8b 44 05 e4	 mov	 eax, DWORD PTR _numericaddress$1[ebp+eax]
  001b1	33 d2		 xor	 edx, edx
  001b3	be 00 01 00 00	 mov	 esi, 256		; 00000100H
  001b8	f7 f6		 div	 esi
  001ba	c1 e2 08	 shl	 edx, 8
  001bd	03 ca		 add	 ecx, edx
  001bf	ba 04 00 00 00	 mov	 edx, 4
  001c4	6b c2 03	 imul	 eax, edx, 3
  001c7	8b 44 05 e4	 mov	 eax, DWORD PTR _numericaddress$1[ebp+eax]
  001cb	33 d2		 xor	 edx, edx
  001cd	be 00 01 00 00	 mov	 esi, 256		; 00000100H
  001d2	f7 f6		 div	 esi
  001d4	03 ca		 add	 ecx, edx
  001d6	0f b6 55 fb	 movzx	 edx, BYTE PTR _i$[ebp]
  001da	6b c2 24	 imul	 eax, edx, 36
  001dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  001e3	89 4c 02 1f	 mov	 DWORD PTR [edx+eax+31], ecx

; 462  : 				                                     ((numericaddress[2]%256) <<  8) +  (numericaddress[3]%256);
; 463  : 			}

  001e7	eb 15		 jmp	 SHORT $LN9@SV_SendPla
$badaddress$22:

; 464  : 			else
; 465  : 			{
; 466  : 				badaddress:
; 467  : 				netbuffer->u.playerinfo[i].address = 0;

  001e9	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  001ed	6b c8 24	 imul	 ecx, eax, 36
  001f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  001f6	c7 44 0a 1f 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+31], 0
$LN9@SV_SendPla:

; 468  : 			}
; 469  : 		}
; 470  : 
; 471  : 		if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  001fe	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00205	83 f8 04	 cmp	 eax, 4
  00208	74 15		 je	 SHORT $LN13@SV_SendPla
  0020a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00211	83 f8 01	 cmp	 eax, 1
  00214	75 53		 jne	 SHORT $LN11@SV_SendPla
  00216	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0021d	74 4a		 je	 SHORT $LN11@SV_SendPla
$LN13@SV_SendPla:

; 472  : 		{
; 473  : 			if (!players[i].ctfteam)

  0021f	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00223	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  00229	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR _players[ecx+352], 0
  00230	75 14		 jne	 SHORT $LN14@SV_SendPla

; 474  : 				netbuffer->u.playerinfo[i].team = 255;

  00232	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00236	6b c8 24	 imul	 ecx, eax, 36
  00239	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  0023f	c6 44 0a 23 ff	 mov	 BYTE PTR [edx+ecx+35], 255 ; 000000ffH
  00244	eb 21		 jmp	 SHORT $LN15@SV_SendPla
$LN14@SV_SendPla:

; 475  : 			else
; 476  : 				netbuffer->u.playerinfo[i].team = (UINT8)players[i].ctfteam;

  00246	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  0024a	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  00250	0f b6 55 fb	 movzx	 edx, BYTE PTR _i$[ebp]
  00254	6b c2 24	 imul	 eax, edx, 36
  00257	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  0025d	8a 89 60 01 00
	00		 mov	 cl, BYTE PTR _players[ecx+352]
  00263	88 4c 02 23	 mov	 BYTE PTR [edx+eax+35], cl
$LN15@SV_SendPla:

; 477  : 		}

  00267	eb 3b		 jmp	 SHORT $LN17@SV_SendPla
$LN11@SV_SendPla:

; 478  : 		else
; 479  : 		{
; 480  : 			if (players[i].spectator)

  00269	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  0026d	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  00273	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR _players[ecx+496]
  0027a	85 d2		 test	 edx, edx
  0027c	74 14		 je	 SHORT $LN16@SV_SendPla

; 481  : 				netbuffer->u.playerinfo[i].team = 255;

  0027e	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00282	6b c8 24	 imul	 ecx, eax, 36
  00285	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  0028b	c6 44 0a 23 ff	 mov	 BYTE PTR [edx+ecx+35], 255 ; 000000ffH
  00290	eb 12		 jmp	 SHORT $LN17@SV_SendPla
$LN16@SV_SendPla:

; 482  : 			else
; 483  : 				netbuffer->u.playerinfo[i].team = 0;

  00292	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00296	6b c8 24	 imul	 ecx, eax, 36
  00299	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  0029f	c6 44 0a 23 00	 mov	 BYTE PTR [edx+ecx+35], 0
$LN17@SV_SendPla:

; 484  : 		}
; 485  : 
; 486  : 		netbuffer->u.playerinfo[i].score = players[i].score;

  002a4	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  002a8	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  002ae	0f b6 55 fb	 movzx	 edx, BYTE PTR _i$[ebp]
  002b2	6b c2 24	 imul	 eax, edx, 36
  002b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  002bb	8b 89 bc 00 00
	00		 mov	 ecx, DWORD PTR _players[ecx+188]
  002c1	89 4c 02 26	 mov	 DWORD PTR [edx+eax+38], ecx

; 487  : 		netbuffer->u.playerinfo[i].timeinserver = (UINT16)(players[i].jointime / TICRATE);

  002c5	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  002c9	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  002cf	8b 81 f4 01 00
	00		 mov	 eax, DWORD PTR _players[ecx+500]
  002d5	33 d2		 xor	 edx, edx
  002d7	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  002dc	f7 f1		 div	 ecx
  002de	0f b6 55 fb	 movzx	 edx, BYTE PTR _i$[ebp]
  002e2	6b ca 24	 imul	 ecx, edx, 36
  002e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  002eb	66 89 44 0a 2a	 mov	 WORD PTR [edx+ecx+42], ax

; 488  : 		netbuffer->u.playerinfo[i].skin = (UINT8)players[i].skin;

  002f0	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  002f4	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  002fa	0f b6 55 fb	 movzx	 edx, BYTE PTR _i$[ebp]
  002fe	6b c2 24	 imul	 eax, edx, 36
  00301	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00307	8a 89 b8 00 00
	00		 mov	 cl, BYTE PTR _players[ecx+184]
  0030d	88 4c 02 24	 mov	 BYTE PTR [edx+eax+36], cl

; 489  : 
; 490  : 		// Extra data
; 491  : 		netbuffer->u.playerinfo[i].data = (UINT8)players[i].skincolor;

  00311	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00315	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0031b	0f b6 55 fb	 movzx	 edx, BYTE PTR _i$[ebp]
  0031f	6b c2 24	 imul	 eax, edx, 36
  00322	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00328	8a 89 b4 00 00
	00		 mov	 cl, BYTE PTR _players[ecx+180]
  0032e	88 4c 02 25	 mov	 BYTE PTR [edx+eax+37], cl

; 492  : 
; 493  : 		if (players[i].pflags & PF_TAGIT)

  00332	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00336	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0033c	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+172]
  00342	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  00348	74 26		 je	 SHORT $LN18@SV_SendPla

; 494  : 			netbuffer->u.playerinfo[i].data |= 32;

  0034a	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  0034e	6b c8 24	 imul	 ecx, eax, 36
  00351	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00357	0f b6 44 0a 25	 movzx	 eax, BYTE PTR [edx+ecx+37]
  0035c	83 c8 20	 or	 eax, 32			; 00000020H
  0035f	0f b6 4d fb	 movzx	 ecx, BYTE PTR _i$[ebp]
  00363	6b d1 24	 imul	 edx, ecx, 36
  00366	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  0036c	88 44 11 25	 mov	 BYTE PTR [ecx+edx+37], al
$LN18@SV_SendPla:

; 495  : 
; 496  : 		if (players[i].gotflag)

  00370	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00374	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0037a	0f b7 91 64 01
	00 00		 movzx	 edx, WORD PTR _players[ecx+356]
  00381	85 d2		 test	 edx, edx
  00383	74 26		 je	 SHORT $LN19@SV_SendPla

; 497  : 			netbuffer->u.playerinfo[i].data |= 64;

  00385	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  00389	6b c8 24	 imul	 ecx, eax, 36
  0038c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00392	0f b6 44 0a 25	 movzx	 eax, BYTE PTR [edx+ecx+37]
  00397	83 c8 40	 or	 eax, 64			; 00000040H
  0039a	0f b6 4d fb	 movzx	 ecx, BYTE PTR _i$[ebp]
  0039e	6b d1 24	 imul	 edx, ecx, 36
  003a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  003a7	88 44 11 25	 mov	 BYTE PTR [ecx+edx+37], al
$LN19@SV_SendPla:

; 498  : 
; 499  : 		if (players[i].powers[pw_super])

  003ab	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  003af	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  003b5	ba 04 00 00 00	 mov	 edx, 4
  003ba	6b c2 0f	 imul	 eax, edx, 15
  003bd	83 bc 01 38 00
	00 00 00	 cmp	 DWORD PTR _players[ecx+eax+56], 0
  003c5	74 28		 je	 SHORT $LN20@SV_SendPla

; 500  : 			netbuffer->u.playerinfo[i].data |= 128;

  003c7	0f b6 45 fb	 movzx	 eax, BYTE PTR _i$[ebp]
  003cb	6b c8 24	 imul	 ecx, eax, 36
  003ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  003d4	0f b6 44 0a 25	 movzx	 eax, BYTE PTR [edx+ecx+37]
  003d9	0d 80 00 00 00	 or	 eax, 128		; 00000080H
  003de	0f b6 4d fb	 movzx	 ecx, BYTE PTR _i$[ebp]
  003e2	6b d1 24	 imul	 edx, ecx, 36
  003e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  003eb	88 44 11 25	 mov	 BYTE PTR [ecx+edx+37], al
$LN20@SV_SendPla:

; 501  : 	}

  003ef	e9 2e fc ff ff	 jmp	 $LN2@SV_SendPla
$LN3@SV_SendPla:

; 502  : 
; 503  : 	HSendPacket(node, false, 0, sizeof(plrinfo) * MAXPLAYERS);

  003f4	68 80 04 00 00	 push	 1152			; 00000480H
  003f9	6a 00		 push	 0
  003fb	6a 00		 push	 0
  003fd	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 _HSendPacket
  00406	83 c4 10	 add	 esp, 16			; 00000010H

; 504  : }

  00409	5f		 pop	 edi
  0040a	5e		 pop	 esi
  0040b	5b		 pop	 ebx
  0040c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0040f	33 cd		 xor	 ecx, ebp
  00411	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00416	8b e5		 mov	 esp, ebp
  00418	5d		 pop	 ebp
  00419	c3		 ret	 0
_SV_SendPlayerInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SendServerInfo
_TEXT	SEGMENT
_p$ = -4						; size = 4
_node$ = 8						; size = 4
_servertime$ = 12					; size = 4
_SV_SendServerInfo PROC					; COMDAT

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 393  : 	UINT8 *p;
; 394  : 
; 395  : 	netbuffer->packettype = PT_SERVERINFO;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0000e	c6 40 06 0d	 mov	 BYTE PTR [eax+6], 13	; 0000000dH

; 396  : 	netbuffer->u.serverinfo.version = VERSION;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00017	c6 40 08 c8	 mov	 BYTE PTR [eax+8], 200	; 000000c8H

; 397  : 	netbuffer->u.serverinfo.subversion = SUBVERSION;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00020	c6 40 09 07	 mov	 BYTE PTR [eax+9], 7

; 398  : 	// return back the time value so client can compute their ping
; 399  : 	netbuffer->u.serverinfo.time = (tic_t)LONG(servertime);

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _servertime$[ebp]
  0002c	89 48 12	 mov	 DWORD PTR [eax+18], ecx

; 400  : 	netbuffer->u.serverinfo.leveltime = (tic_t)LONG(leveltime);

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  0003a	89 48 16	 mov	 DWORD PTR [eax+22], ecx

; 401  : 
; 402  : 	netbuffer->u.serverinfo.numberofplayer = (UINT8)D_NumPlayers();

  0003d	e8 00 00 00 00	 call	 _D_NumPlayers
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00048	88 41 0a	 mov	 BYTE PTR [ecx+10], al

; 403  : 	netbuffer->u.serverinfo.maxplayer = (UINT8)cv_maxplayers.value;

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00050	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR _cv_maxplayers+20
  00056	88 48 0b	 mov	 BYTE PTR [eax+11], cl

; 404  : 	netbuffer->u.serverinfo.gametype = (UINT8)gametype;

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0005e	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _gametype
  00064	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 405  : 	netbuffer->u.serverinfo.modifiedgame = (UINT8)modifiedgame;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0006c	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _modifiedgame
  00072	88 48 0d	 mov	 BYTE PTR [eax+13], cl

; 406  : 	netbuffer->u.serverinfo.cheatsenabled = (UINT8)cv_cheats.value;

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0007a	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR _cv_cheats+20
  00080	88 48 0e	 mov	 BYTE PTR [eax+14], cl

; 407  : 	netbuffer->u.serverinfo.isdedicated = (UINT8)dedicated;

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00088	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _dedicated
  0008e	88 48 0f	 mov	 BYTE PTR [eax+15], cl

; 408  : 	strncpy(netbuffer->u.serverinfo.servername, cv_servername.string,

  00091	6a 20		 push	 32			; 00000020H
  00093	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_servername+24
  00098	50		 push	 eax
  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  0009f	83 c1 1a	 add	 ecx, 26			; 0000001aH
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _strncpy
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 409  : 		MAXSERVERNAME);
; 410  : 	strncpy(netbuffer->u.serverinfo.mapname, G_BuildMapName(gamemap), 7);

  000ab	6a 07		 push	 7
  000ad	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _G_BuildMapName
  000ba	83 c4 04	 add	 esp, 4
  000bd	50		 push	 eax
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  000c4	83 c1 3a	 add	 ecx, 58			; 0000003aH
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _strncpy
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 411  : 
; 412  : 	M_Memcpy(netbuffer->u.serverinfo.mapmd5, mapmd5, 16);

  000d0	6a 10		 push	 16			; 00000010H
  000d2	68 00 00 00 00	 push	 OFFSET _mapmd5
  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000dc	83 c0 63	 add	 eax, 99			; 00000063H
  000df	50		 push	 eax
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 413  : 
; 414  : 	if (strcmp(mapheaderinfo[gamemap-1].lvlttl, ""))

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000ee	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000f5	83 e8 01	 sub	 eax, 1
  000f8	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000fe	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 _strcmp
  0010a	83 c4 08	 add	 esp, 8
  0010d	85 c0		 test	 eax, eax
  0010f	74 2d		 je	 SHORT $LN2@SV_SendSer

; 415  : 		strncpy(netbuffer->u.serverinfo.maptitle, (char *)mapheaderinfo[gamemap-1].lvlttl, 33);

  00111	6a 21		 push	 33			; 00000021H
  00113	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0011a	83 e8 01	 sub	 eax, 1
  0011d	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00123	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  00129	51		 push	 ecx
  0012a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00130	83 c2 42	 add	 edx, 66			; 00000042H
  00133	52		 push	 edx
  00134	e8 00 00 00 00	 call	 _strncpy
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013c	eb 18		 jmp	 SHORT $LN3@SV_SendSer
$LN2@SV_SendSer:

; 416  : 	else
; 417  : 		strncpy(netbuffer->u.serverinfo.maptitle, "UNKNOWN", 33);

  0013e	6a 21		 push	 33			; 00000021H
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_07NFANNNEC@UNKNOWN@
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0014a	83 c0 42	 add	 eax, 66			; 00000042H
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _strncpy
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SV_SendSer:

; 418  : 
; 419  : 	netbuffer->u.serverinfo.maptitle[32] = '\0';

  00156	b8 01 00 00 00	 mov	 eax, 1
  0015b	c1 e0 05	 shl	 eax, 5
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00164	c6 44 01 42 00	 mov	 BYTE PTR [ecx+eax+66], 0

; 420  : 
; 421  : 	if (!mapheaderinfo[gamemap-1].nozone)

  00169	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00170	83 e8 01	 sub	 eax, 1
  00173	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00179	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  00180	75 0b		 jne	 SHORT $LN4@SV_SendSer

; 422  : 		netbuffer->u.serverinfo.iszone = 1;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00187	c6 40 74 01	 mov	 BYTE PTR [eax+116], 1
  0018b	eb 09		 jmp	 SHORT $LN5@SV_SendSer
$LN4@SV_SendSer:

; 423  : 	else
; 424  : 		netbuffer->u.serverinfo.iszone = 0;

  0018d	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00192	c6 40 74 00	 mov	 BYTE PTR [eax+116], 0
$LN5@SV_SendSer:

; 425  : 
; 426  : 	netbuffer->u.serverinfo.actnum = mapheaderinfo[gamemap-1].actnum;

  00196	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0019d	83 e8 01	 sub	 eax, 1
  001a0	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  001a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  001ac	0f b6 81 42 00
	00 00		 movzx	 eax, BYTE PTR _mapheaderinfo[ecx+66]
  001b3	88 42 73	 mov	 BYTE PTR [edx+115], al

; 427  : 
; 428  : 	p = PutFileNeeded();

  001b6	e8 00 00 00 00	 call	 _PutFileNeeded
  001bb	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 429  : 
; 430  : 	HSendPacket(node, false, 0, p - ((UINT8 *)&netbuffer->u));

  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  001c3	83 c0 08	 add	 eax, 8
  001c6	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  001c9	2b c8		 sub	 ecx, eax
  001cb	51		 push	 ecx
  001cc	6a 00		 push	 0
  001ce	6a 00		 push	 0
  001d0	8b 55 08	 mov	 edx, DWORD PTR _node$[ebp]
  001d3	52		 push	 edx
  001d4	e8 00 00 00 00	 call	 _HSendPacket
  001d9	83 c4 10	 add	 esp, 16			; 00000010H

; 431  : }

  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi
  001de	5b		 pop	 ebx
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
_SV_SendServerInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_SendJoin
_TEXT	SEGMENT
_CL_SendJoin PROC					; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 381  : 	CONS_Printf("%s",text[JOINREQUEST]);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 13	 imul	 ecx, eax, 19
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00017	52		 push	 edx
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0001d	e8 00 00 00 00	 call	 _CONS_Printf
  00022	83 c4 08	 add	 esp, 8

; 382  : 	netbuffer->packettype = PT_CLIENTJOIN;

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0002a	c6 40 06 14	 mov	 BYTE PTR [eax+6], 20	; 00000014H

; 383  : 
; 384  : 	netbuffer->u.clientcfg.localplayers = (UINT8)((UINT8)splitscreen + 1);

  0002e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _splitscreen
  00035	83 c0 01	 add	 eax, 1
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  0003e	88 41 10	 mov	 BYTE PTR [ecx+16], al

; 385  : 	netbuffer->u.clientcfg.version = VERSION;

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00046	c6 40 08 c8	 mov	 BYTE PTR [eax+8], 200	; 000000c8H

; 386  : 	netbuffer->u.clientcfg.subversion = SUBVERSION;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0004f	c6 40 0c 07	 mov	 BYTE PTR [eax+12], 7

; 387  : 
; 388  : 	return HSendPacket(servernode, true, 0, sizeof (clientconfig_pak));

  00053	6a 0c		 push	 12			; 0000000cH
  00055	6a 00		 push	 0
  00057	6a 01		 push	 1
  00059	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _HSendPacket
  00066	83 c4 10	 add	 esp, 16			; 00000010H

; 389  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_CL_SendJoin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _GetPackets
_TEXT	SEGMENT
tv879 = -200						; size = 4
tv410 = -200						; size = 4
tv369 = -200						; size = 4
tv296 = -200						; size = 4
$T1 = -196						; size = 4
$T2 = -192						; size = 4
$T3 = -188						; size = 4
_i$4 = -120						; size = 4
_buf$5 = -116						; size = 2
_buf$6 = -112						; size = 2
_txtsize$7 = -108					; size = 4
_k$8 = -104						; size = 4
_j$9 = -100						; size = 4
_i$10 = -96						; size = 4
_buf$11 = -92						; size = 2
_buf$12 = -88						; size = 2
_tic$13 = -84						; size = 4
_j$14 = -80						; size = 4
_buf$15 = -76						; size = 3
_buf$16 = -72						; size = 2
_playermask$17 = -68					; size = 4
_scp$18 = -64						; size = 4
_j$19 = -60						; size = 4
_clientnode$20 = -56					; size = 4
_ticdiff$21 = -52					; size = 4
_ticthen$22 = -48					; size = 4
_ticnow$23 = -44					; size = 4
_backupstate$24 = -40					; size = 4
_newnode$25 = -36					; size = 4
_p$ = -32						; size = 4
_numtxtpak$ = -25					; size = 1
_txtpak$ = -24						; size = 4
_pak$ = -20						; size = 4
_realstart$ = -16					; size = 4
_realend$ = -12						; size = 4
_node$ = -5						; size = 1
_netconsole$ = -4					; size = 4
_GetPackets PROC					; COMDAT

; 2610 : {FILESTAMP

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2611 : 	XBOXSTATIC INT32 netconsole;
; 2612 : 	XBOXSTATIC SINT8 node;
; 2613 : 	XBOXSTATIC tic_t realend,realstart;
; 2614 : 	XBOXSTATIC UINT8 *pak, *txtpak, numtxtpak;
; 2615 : 	INT32 p = maketic%BACKUPTICS;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00011	33 d2		 xor	 edx, edx
  00013	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00018	f7 f1		 div	 ecx
  0001a	89 55 e0	 mov	 DWORD PTR _p$[ebp], edx
$LN163@GetPackets:

; 2616 : FILESTAMP
; 2617 : 	while (HGetPacket())

  0001d	e8 00 00 00 00	 call	 _HGetPacket
  00022	85 c0		 test	 eax, eax
  00024	0f 84 26 15 00
	00		 je	 $LN3@GetPackets

; 2618 : 	{
; 2619 : 		node = (SINT8)doomcom->remotenode;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR _doomcom
  0002f	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  00032	88 4d fb	 mov	 BYTE PTR _node$[ebp], cl

; 2620 : 		if (netbuffer->packettype == PT_CLIENTJOIN && server)

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0003a	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  0003e	83 f9 14	 cmp	 ecx, 20			; 00000014H
  00041	0f 85 9b 02 00
	00		 jne	 $LN22@GetPackets
  00047	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0004e	0f 84 8e 02 00
	00		 je	 $LN22@GetPackets

; 2621 : 		{
; 2622 : 			if (bannednode && bannednode[node])

  00054	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bannednode, 0
  0005b	74 27		 je	 SHORT $LN23@GetPackets
  0005d	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bannednode
  00067	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0006b	74 17		 je	 SHORT $LN23@GetPackets

; 2623 : 				SV_SendRefuse(node, "You have been banned\nfrom the server");

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DJONALDG@You?5have?5been?5banned?6from?5the?5s@
  00072	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _SV_SendRefuse
  0007c	83 c4 08	 add	 esp, 8
  0007f	e9 59 02 00 00	 jmp	 $LN40@GetPackets
$LN23@GetPackets:

; 2624 : 			else if (netbuffer->u.clientcfg.version != VERSION
; 2625 : 				|| netbuffer->u.clientcfg.subversion != SUBVERSION)

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00089	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  0008d	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  00093	75 0e		 jne	 SHORT $LN27@GetPackets
  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0009a	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  0009e	83 f9 07	 cmp	 ecx, 7
  000a1	74 26		 je	 SHORT $LN25@GetPackets
$LN27@GetPackets:

; 2626 : 				SV_SendRefuse(node, va("Different SRB2 versions cannot\nplay a netgame!\n"

  000a3	6a 07		 push	 7
  000a5	6a 00		 push	 0
  000a7	6a 02		 push	 2
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@EDOIONCL@Different?5SRB2?5versions?5cannot?6@
  000ae	e8 00 00 00 00	 call	 _va
  000b3	83 c4 10	 add	 esp, 16			; 00000010H
  000b6	50		 push	 eax
  000b7	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _SV_SendRefuse
  000c1	83 c4 08	 add	 esp, 8
  000c4	e9 14 02 00 00	 jmp	 $LN40@GetPackets
$LN25@GetPackets:

; 2627 : 				"(server version %d.%d.%d)", VERSION/100, VERSION%100, SUBVERSION));
; 2628 : 			else if (!cv_allownewplayer.value && node)

  000c9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allownewplayer+20, 0
  000d0	75 1f		 jne	 SHORT $LN28@GetPackets
  000d2	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  000d6	85 c0		 test	 eax, eax
  000d8	74 17		 je	 SHORT $LN28@GetPackets

; 2629 : 				SV_SendRefuse(node, "The server is not accepting\njoins for the moment");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@CGIGLGLD@The?5server?5is?5not?5accepting?6joi@
  000df	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _SV_SendRefuse
  000e9	83 c4 08	 add	 esp, 8
  000ec	e9 ec 01 00 00	 jmp	 $LN40@GetPackets
$LN28@GetPackets:

; 2630 : 			else if (D_NumPlayers() >= cv_maxplayers.value)

  000f1	e8 00 00 00 00	 call	 _D_NumPlayers
  000f6	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR _cv_maxplayers+20
  000fc	7c 26		 jl	 SHORT $LN30@GetPackets

; 2631 : 				SV_SendRefuse(node, va("Maximum players reached: %d", cv_maxplayers.value));

  000fe	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_maxplayers+20
  00103	50		 push	 eax
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IEPKFGB@Maximum?5players?5reached?3?5?$CFd@
  00109	e8 00 00 00 00	 call	 _va
  0010e	83 c4 08	 add	 esp, 8
  00111	50		 push	 eax
  00112	0f be 4d fb	 movsx	 ecx, BYTE PTR _node$[ebp]
  00116	51		 push	 ecx
  00117	e8 00 00 00 00	 call	 _SV_SendRefuse
  0011c	83 c4 08	 add	 esp, 8
  0011f	e9 b9 01 00 00	 jmp	 $LN40@GetPackets
$LN30@GetPackets:

; 2632 : 			else if (netgame && netbuffer->u.clientcfg.localplayers > 1)	// Hacked client?

  00124	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0012b	74 2e		 je	 SHORT $LN32@GetPackets
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00132	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  00136	83 f9 01	 cmp	 ecx, 1
  00139	7e 20		 jle	 SHORT $LN32@GetPackets

; 2633 : 				SV_SendRefuse(node, va("Too many players from\nthis node."));

  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@IBJGJNAD@Too?5many?5players?5from?6this?5node@
  00140	e8 00 00 00 00	 call	 _va
  00145	83 c4 04	 add	 esp, 4
  00148	50		 push	 eax
  00149	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _SV_SendRefuse
  00153	83 c4 08	 add	 esp, 8
  00156	e9 82 01 00 00	 jmp	 $LN40@GetPackets
$LN32@GetPackets:

; 2634 : 			else if (netgame && !netbuffer->u.clientcfg.localplayers) // Stealth join?

  0015b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00162	74 2d		 je	 SHORT $LN34@GetPackets
  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00169	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  0016d	85 c9		 test	 ecx, ecx
  0016f	75 20		 jne	 SHORT $LN34@GetPackets

; 2635 : 				SV_SendRefuse(node, va("No players from\nthis node."));

  00171	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NJDJOCPD@No?5players?5from?6this?5node?4@
  00176	e8 00 00 00 00	 call	 _va
  0017b	83 c4 04	 add	 esp, 4
  0017e	50		 push	 eax
  0017f	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 _SV_SendRefuse
  00189	83 c4 08	 add	 esp, 8
  0018c	e9 4c 01 00 00	 jmp	 $LN40@GetPackets
$LN34@GetPackets:

; 2636 : 			else
; 2637 : 			{
; 2638 : 				boolean newnode = false;

  00191	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _newnode$25[ebp], 0

; 2639 : 
; 2640 : 				// client authorised to join
; 2641 : 				nodewaiting[node] = (UINT8)(netbuffer->u.clientcfg.localplayers - playerpernode[node]);

  00198	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0019d	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  001a1	0f be 55 fb	 movsx	 edx, BYTE PTR _node$[ebp]
  001a5	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _playerpernode[edx]
  001ac	2b c8		 sub	 ecx, eax
  001ae	0f be 55 fb	 movsx	 edx, BYTE PTR _node$[ebp]
  001b2	88 8a 00 00 00
	00		 mov	 BYTE PTR _nodewaiting[edx], cl

; 2642 : 				if (!nodeingame[node])

  001b8	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  001bc	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _nodeingame[eax*4], 0
  001c4	0f 85 af 00 00
	00		 jne	 $LN39@GetPackets

; 2643 : 				{
; 2644 : 					gamestate_t backupstate = gamestate;

  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _gamestate
  001cf	89 45 d8	 mov	 DWORD PTR _backupstate$24[ebp], eax

; 2645 : 					newnode = true;

  001d2	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _newnode$25[ebp], 1

; 2646 : 					SV_AddNode(node);

  001d9	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 _SV_AddNode
  001e3	83 c4 04	 add	 esp, 4

; 2647 : 					if (cv_joinnextround.value && gameaction == ga_nothing)

  001e6	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_joinnextround+20, 0
  001ed	74 13		 je	 SHORT $LN37@GetPackets
  001ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _gameaction, 0
  001f6	75 0a		 jne	 SHORT $LN37@GetPackets

; 2648 : 						G_SetGamestate(GS_WAITINGPLAYERS);

  001f8	6a 0d		 push	 13			; 0000000dH
  001fa	e8 00 00 00 00	 call	 _G_SetGamestate
  001ff	83 c4 04	 add	 esp, 4
$LN37@GetPackets:

; 2649 : 					if (!SV_SendServerConfig(node))

  00202	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00206	50		 push	 eax
  00207	e8 00 00 00 00	 call	 _SV_SendServerConfig
  0020c	83 c4 04	 add	 esp, 4
  0020f	85 c0		 test	 eax, eax
  00211	75 30		 jne	 SHORT $LN38@GetPackets

; 2650 : 					{
; 2651 : 						G_SetGamestate(backupstate);

  00213	8b 45 d8	 mov	 eax, DWORD PTR _backupstate$24[ebp]
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 _G_SetGamestate
  0021c	83 c4 04	 add	 esp, 4

; 2652 : 						ResetNode(node);

  0021f	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 _ResetNode
  00229	83 c4 04	 add	 esp, 4

; 2653 : 						SV_SendRefuse(node, "Server couldn't send info, please try again");

  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@KLOIHHDC@Server?5couldn?8t?5send?5info?0?5plea@
  00231	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 _SV_SendRefuse
  0023b	83 c4 08	 add	 esp, 8

; 2654 : 						/// \todo fix this !!!
; 2655 : 						//CONS_Printf("Internal Error 5: node %d lost\n",node);
; 2656 : 						continue; // restart the while

  0023e	e9 da fd ff ff	 jmp	 $LN163@GetPackets
$LN38@GetPackets:

; 2657 : 					}
; 2658 : 					G_SetGamestate(backupstate);

  00243	8b 45 d8	 mov	 eax, DWORD PTR _backupstate$24[ebp]
  00246	50		 push	 eax
  00247	e8 00 00 00 00	 call	 _G_SetGamestate
  0024c	83 c4 04	 add	 esp, 4

; 2659 : 					DEBFILE("new node joined\n");

  0024f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00256	74 21		 je	 SHORT $LN39@GetPackets
  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0025d	50		 push	 eax
  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GAPEEKBJ@new?5node?5joined?6@
  00263	e8 00 00 00 00	 call	 _fputs
  00268	83 c4 08	 add	 esp, 8
  0026b	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _fflush
  00276	83 c4 04	 add	 esp, 4
$LN39@GetPackets:

; 2660 : 				}
; 2661 : #ifdef JOININGAME
; 2662 : 				if (nodewaiting[node])

  00279	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0027d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _nodewaiting[eax]
  00284	85 c9		 test	 ecx, ecx
  00286	74 55		 je	 SHORT $LN40@GetPackets

; 2663 : 				{
; 2664 : 					if ((gamestate == GS_LEVEL || gamestate == GS_INTERMISSION) && newnode)

  00288	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  0028f	74 09		 je	 SHORT $LN42@GetPackets
  00291	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00298	75 3d		 jne	 SHORT $LN43@GetPackets
$LN42@GetPackets:
  0029a	83 7d dc 00	 cmp	 DWORD PTR _newnode$25[ebp], 0
  0029e	74 37		 je	 SHORT $LN43@GetPackets

; 2665 : 					{
; 2666 : 						SV_SendSaveGame(node);

  002a0	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 _SV_SendSaveGame
  002aa	83 c4 04	 add	 esp, 4

; 2667 : 						DEBFILE("send savegame\n");

  002ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  002b4	74 21		 je	 SHORT $LN43@GetPackets
  002b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  002bb	50		 push	 eax
  002bc	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EHGFFMGO@send?5savegame?6@
  002c1	e8 00 00 00 00	 call	 _fputs
  002c6	83 c4 08	 add	 esp, 8
  002c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 _fflush
  002d4	83 c4 04	 add	 esp, 4
$LN43@GetPackets:

; 2668 : 					}
; 2669 : 					SV_AddWaitingPlayers();

  002d7	e8 00 00 00 00	 call	 _SV_AddWaitingPlayers
  002dc	90		 npad	 1
$LN40@GetPackets:

; 2670 : 				}
; 2671 : #endif
; 2672 : 			}
; 2673 : 			continue;

  002dd	e9 3b fd ff ff	 jmp	 $LN163@GetPackets
$LN22@GetPackets:

; 2674 : 		} // end of PT_CLIENTJOIN
; 2675 : 		if (netbuffer->packettype == PT_SERVERSHUTDOWN && node == servernode
; 2676 : 			&& !server && cl_mode != cl_searching)

  002e2	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  002e7	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  002eb	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  002ee	75 49		 jne	 SHORT $LN44@GetPackets
  002f0	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  002f4	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  002fb	3b c1		 cmp	 eax, ecx
  002fd	75 3a		 jne	 SHORT $LN44@GetPackets
  002ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00306	75 31		 jne	 SHORT $LN44@GetPackets
  00308	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cl_mode, 0
  0030f	74 28		 je	 SHORT $LN44@GetPackets

; 2677 : 		{
; 2678 : 			M_StartMessage("Server has shutdown\n\nPress Esc", NULL, MM_NOTHING);

  00311	6a 00		 push	 0
  00313	6a 00		 push	 0
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BJBFACMF@Server?5has?5shutdown?6?6Press?5Esc@
  0031a	e8 00 00 00 00	 call	 _M_StartMessage
  0031f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2679 : 			D_QuitNetGame();

  00322	e8 00 00 00 00	 call	 _D_QuitNetGame
  00327	90		 npad	 1

; 2680 : 			CL_Reset();

  00328	e8 00 00 00 00	 call	 _CL_Reset
  0032d	90		 npad	 1

; 2681 : 			D_StartTitle();

  0032e	e8 00 00 00 00	 call	 _D_StartTitle
  00333	90		 npad	 1

; 2682 : 			continue;

  00334	e9 e4 fc ff ff	 jmp	 $LN163@GetPackets
$LN44@GetPackets:

; 2683 : 		}
; 2684 : 		if (netbuffer->packettype == PT_NODETIMEOUT && node == servernode
; 2685 : 			&& !server && cl_mode != cl_searching)

  00339	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0033e	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00342	83 f9 15	 cmp	 ecx, 21			; 00000015H
  00345	75 49		 jne	 SHORT $LN45@GetPackets
  00347	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0034b	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  00352	3b c1		 cmp	 eax, ecx
  00354	75 3a		 jne	 SHORT $LN45@GetPackets
  00356	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0035d	75 31		 jne	 SHORT $LN45@GetPackets
  0035f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cl_mode, 0
  00366	74 28		 je	 SHORT $LN45@GetPackets

; 2686 : 		{
; 2687 : 			M_StartMessage("Server Timeout\n\nPress Esc", NULL, MM_NOTHING);

  00368	6a 00		 push	 0
  0036a	6a 00		 push	 0
  0036c	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@IJIPOIIA@Server?5Timeout?6?6Press?5Esc@
  00371	e8 00 00 00 00	 call	 _M_StartMessage
  00376	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2688 : 			D_QuitNetGame();

  00379	e8 00 00 00 00	 call	 _D_QuitNetGame
  0037e	90		 npad	 1

; 2689 : 			CL_Reset();

  0037f	e8 00 00 00 00	 call	 _CL_Reset
  00384	90		 npad	 1

; 2690 : 			D_StartTitle();

  00385	e8 00 00 00 00	 call	 _D_StartTitle
  0038a	90		 npad	 1

; 2691 : 			continue;

  0038b	e9 8d fc ff ff	 jmp	 $LN163@GetPackets
$LN45@GetPackets:

; 2692 : 		}
; 2693 : 
; 2694 : 		if (netbuffer->packettype == PT_SERVERINFO)

  00390	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00395	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00399	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0039c	75 65		 jne	 SHORT $LN46@GetPackets

; 2695 : 		{
; 2696 : 			// compute ping in ms
; 2697 : 			const tic_t ticnow = I_GetTime();

  0039e	e8 00 00 00 00	 call	 _I_GetTime
  003a3	89 45 d4	 mov	 DWORD PTR _ticnow$23[ebp], eax

; 2698 : 			const tic_t ticthen = (tic_t)LONG(netbuffer->u.serverinfo.time);

  003a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  003ab	8b 48 12	 mov	 ecx, DWORD PTR [eax+18]
  003ae	89 4d d0	 mov	 DWORD PTR _ticthen$22[ebp], ecx

; 2699 : 			const tic_t ticdiff = (ticnow - ticthen)*1000/TICRATE;

  003b1	8b 45 d4	 mov	 eax, DWORD PTR _ticnow$23[ebp]
  003b4	2b 45 d0	 sub	 eax, DWORD PTR _ticthen$22[ebp]
  003b7	69 c0 e8 03 00
	00		 imul	 eax, eax, 1000
  003bd	33 d2		 xor	 edx, edx
  003bf	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  003c4	f7 f1		 div	 ecx
  003c6	89 45 cc	 mov	 DWORD PTR _ticdiff$21[ebp], eax

; 2700 : 			netbuffer->u.serverinfo.time = (tic_t)LONG(ticdiff);

  003c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  003ce	8b 4d cc	 mov	 ecx, DWORD PTR _ticdiff$21[ebp]
  003d1	89 48 12	 mov	 DWORD PTR [eax+18], ecx

; 2701 : 			netbuffer->u.serverinfo.servername[MAXSERVERNAME-1] = 0;

  003d4	b8 01 00 00 00	 mov	 eax, 1
  003d9	6b c8 1f	 imul	 ecx, eax, 31
  003dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  003e2	c6 44 0a 1a 00	 mov	 BYTE PTR [edx+ecx+26], 0

; 2702 : 
; 2703 : 			SL_InsertServer(&netbuffer->u.serverinfo, node);

  003e7	0f b6 45 fb	 movzx	 eax, BYTE PTR _node$[ebp]
  003eb	50		 push	 eax
  003ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  003f2	83 c1 08	 add	 ecx, 8
  003f5	51		 push	 ecx
  003f6	e8 00 00 00 00	 call	 _SL_InsertServer
  003fb	83 c4 08	 add	 esp, 8

; 2704 : 			continue;

  003fe	e9 1a fc ff ff	 jmp	 $LN163@GetPackets
$LN46@GetPackets:

; 2705 : 		}
; 2706 : 
; 2707 : 		if (netbuffer->packettype == PT_PLAYERINFO)

  00403	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00408	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  0040c	83 f9 0e	 cmp	 ecx, 14			; 0000000eH
  0040f	75 05		 jne	 SHORT $LN47@GetPackets

; 2708 : 			continue; // We do nothing with PLAYERINFO, that's for the MS browser.

  00411	e9 07 fc ff ff	 jmp	 $LN163@GetPackets
$LN47@GetPackets:

; 2709 : 
; 2710 : 		if (!nodeingame[node])

  00416	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0041a	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _nodeingame[eax*4], 0
  00422	0f 85 f3 03 00
	00		 jne	 $LN48@GetPackets

; 2711 : 		{
; 2712 : 			if (node != servernode)

  00428	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0042c	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  00433	3b c1		 cmp	 eax, ecx
  00435	74 38		 je	 SHORT $LN50@GetPackets

; 2713 : 				DEBFILE(va("Received packet from unknown host %d\n", node));

  00437	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0043e	74 2f		 je	 SHORT $LN50@GetPackets
  00440	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00445	50		 push	 eax
  00446	0f be 4d fb	 movsx	 ecx, BYTE PTR _node$[ebp]
  0044a	51		 push	 ecx
  0044b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EDIEMKAC@Received?5packet?5from?5unknown?5ho@
  00450	e8 00 00 00 00	 call	 _va
  00455	83 c4 08	 add	 esp, 8
  00458	50		 push	 eax
  00459	e8 00 00 00 00	 call	 _fputs
  0045e	83 c4 08	 add	 esp, 8
  00461	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00466	50		 push	 eax
  00467	e8 00 00 00 00	 call	 _fflush
  0046c	83 c4 04	 add	 esp, 4
$LN50@GetPackets:

; 2714 : 
; 2715 : 			// anyone trying to join
; 2716 : 			switch (netbuffer->packettype)

  0046f	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00474	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00478	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv296[ebp], ecx
  0047e	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv296[ebp]
  00484	83 ea 01	 sub	 edx, 1
  00487	89 95 38 ff ff
	ff		 mov	 DWORD PTR tv296[ebp], edx
  0048d	83 bd 38 ff ff
	ff 14		 cmp	 DWORD PTR tv296[ebp], 20 ; 00000014H
  00494	0f 87 31 03 00
	00		 ja	 $LN75@GetPackets
  0049a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv296[ebp]
  004a0	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN164@GetPackets[eax]
  004a7	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN165@GetPackets[ecx*4]
$LN51@GetPackets:

; 2717 : 			{
; 2718 : 				case PT_ASKINFOVIAMS:
; 2719 : 					if (server && serverrunning)

  004ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  004b5	74 4e		 je	 SHORT $LN52@GetPackets
  004b7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverrunning, 0
  004be	74 45		 je	 SHORT $LN52@GetPackets

; 2720 : 					{
; 2721 : 						INT32 clientnode = I_NetMakeNode(netbuffer->u.msaskinfo.clientaddr);

  004c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  004c5	83 c0 08	 add	 eax, 8
  004c8	50		 push	 eax
  004c9	ff 15 00 00 00
	00		 call	 DWORD PTR _I_NetMakeNode
  004cf	83 c4 04	 add	 esp, 4
  004d2	0f be c8	 movsx	 ecx, al
  004d5	89 4d c8	 mov	 DWORD PTR _clientnode$20[ebp], ecx

; 2722 : 						SV_SendServerInfo(clientnode, (tic_t)LONG(netbuffer->u.msaskinfo.time));

  004d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  004dd	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  004e0	51		 push	 ecx
  004e1	8b 55 c8	 mov	 edx, DWORD PTR _clientnode$20[ebp]
  004e4	52		 push	 edx
  004e5	e8 00 00 00 00	 call	 _SV_SendServerInfo
  004ea	83 c4 08	 add	 esp, 8

; 2723 : 						SV_SendPlayerInfo(clientnode); // send extra info

  004ed	8b 45 c8	 mov	 eax, DWORD PTR _clientnode$20[ebp]
  004f0	50		 push	 eax
  004f1	e8 00 00 00 00	 call	 _SV_SendPlayerInfo
  004f6	83 c4 04	 add	 esp, 4

; 2724 : 						Net_CloseConnection(clientnode);

  004f9	8b 45 c8	 mov	 eax, DWORD PTR _clientnode$20[ebp]
  004fc	50		 push	 eax
  004fd	e8 00 00 00 00	 call	 _Net_CloseConnection
  00502	83 c4 04	 add	 esp, 4
$LN52@GetPackets:

; 2725 : 						// Don't close connection to MS.
; 2726 : 					}
; 2727 : 					break;

  00505	e9 0c 03 00 00	 jmp	 $LN4@GetPackets
$LN53@GetPackets:

; 2728 : 
; 2729 : 				case PT_ASKINFO:
; 2730 : 					if (server && serverrunning)

  0050a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00511	74 39		 je	 SHORT $LN54@GetPackets
  00513	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverrunning, 0
  0051a	74 30		 je	 SHORT $LN54@GetPackets

; 2731 : 					{
; 2732 : 						SV_SendServerInfo(node, (tic_t)LONG(netbuffer->u.askinfo.time));

  0051c	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00521	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00524	51		 push	 ecx
  00525	0f be 55 fb	 movsx	 edx, BYTE PTR _node$[ebp]
  00529	52		 push	 edx
  0052a	e8 00 00 00 00	 call	 _SV_SendServerInfo
  0052f	83 c4 08	 add	 esp, 8

; 2733 : 						SV_SendPlayerInfo(node); // send extra info

  00532	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00536	50		 push	 eax
  00537	e8 00 00 00 00	 call	 _SV_SendPlayerInfo
  0053c	83 c4 04	 add	 esp, 4

; 2734 : 						Net_CloseConnection(node);

  0053f	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00543	50		 push	 eax
  00544	e8 00 00 00 00	 call	 _Net_CloseConnection
  00549	83 c4 04	 add	 esp, 4
$LN54@GetPackets:

; 2735 : 					}
; 2736 : 					break;

  0054c	e9 c5 02 00 00	 jmp	 $LN4@GetPackets
$LN55@GetPackets:

; 2737 : 				case PT_SERVERREFUSE: // negative response of client join request
; 2738 : 					if (cl_mode == cl_waitjoinresponse)

  00551	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _cl_mode, 3
  00558	75 3f		 jne	 SHORT $LN56@GetPackets

; 2739 : 					{
; 2740 : 						M_StartMessage(va("Server refuses connection\n\nReason:\n%s",

  0055a	6a 00		 push	 0
  0055c	6a 00		 push	 0
  0055e	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00563	83 c0 08	 add	 eax, 8
  00566	50		 push	 eax
  00567	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FLONMODJ@Server?5refuses?5connection?6?6Reas@
  0056c	e8 00 00 00 00	 call	 _va
  00571	83 c4 08	 add	 esp, 8
  00574	50		 push	 eax
  00575	e8 00 00 00 00	 call	 _M_StartMessage
  0057a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2741 : 							netbuffer->u.serverrefuse.reason), NULL, MM_NOTHING);
; 2742 : 						D_QuitNetGame();

  0057d	e8 00 00 00 00	 call	 _D_QuitNetGame
  00582	90		 npad	 1

; 2743 : 						CL_Reset();

  00583	e8 00 00 00 00	 call	 _CL_Reset
  00588	90		 npad	 1

; 2744 : 						D_StartTitle();

  00589	e8 00 00 00 00	 call	 _D_StartTitle
  0058e	90		 npad	 1

; 2745 : 
; 2746 : 						// Will be reset by caller. Signals refusal.
; 2747 : 						cl_mode = cl_aborted;

  0058f	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR _cl_mode, 6
$LN56@GetPackets:

; 2748 : 					}
; 2749 : 					break;

  00599	e9 78 02 00 00	 jmp	 $LN4@GetPackets
$LN57@GetPackets:

; 2750 : 				case PT_SERVERCFG: // positive response of client join request
; 2751 : 				{
; 2752 : 					INT32 j;
; 2753 : 					UINT8 *scp;
; 2754 : 					UINT32 playermask = 0;

  0059e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _playermask$17[ebp], 0

; 2755 : 
; 2756 : 					/// \note how would this happen? and is it doing the right thing if it does?
; 2757 : 					if (cl_mode != cl_waitjoinresponse)

  005a5	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _cl_mode, 3
  005ac	74 05		 je	 SHORT $LN58@GetPackets

; 2758 : 						break;

  005ae	e9 63 02 00 00	 jmp	 $LN4@GetPackets
$LN58@GetPackets:

; 2759 : 
; 2760 : 					if (!server)

  005b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  005ba	75 53		 jne	 SHORT $LN59@GetPackets

; 2761 : 					{
; 2762 : 						maketic = gametic = neededtic = (tic_t)LONG(netbuffer->u.servercfg.gametic);

  005bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  005c1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005c4	89 0d 00 00 00
	00		 mov	 DWORD PTR _neededtic, ecx
  005ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _neededtic
  005d0	89 15 00 00 00
	00		 mov	 DWORD PTR _gametic, edx
  005d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  005db	a3 00 00 00 00	 mov	 DWORD PTR _maketic, eax

; 2763 : 						gametype = netbuffer->u.servercfg.gametype;

  005e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  005e5	66 0f b6 48 20	 movzx	 cx, BYTE PTR [eax+32]
  005ea	66 89 0d 00 00
	00 00		 mov	 WORD PTR _gametype, cx

; 2764 : 						modifiedgame = netbuffer->u.servercfg.modifiedgame;

  005f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  005f6	0f b6 48 21	 movzx	 ecx, BYTE PTR [eax+33]
  005fa	89 0d 00 00 00
	00		 mov	 DWORD PTR _modifiedgame, ecx

; 2765 : 						adminplayer = netbuffer->u.servercfg.adminplayer;

  00600	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00605	0f be 48 22	 movsx	 ecx, BYTE PTR [eax+34]
  00609	89 0d 00 00 00
	00		 mov	 DWORD PTR _adminplayer, ecx
$LN59@GetPackets:

; 2766 : 					}
; 2767 : 
; 2768 : 					nodeingame[(UINT8)servernode] = true;

  0060f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _servernode
  00616	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _nodeingame[eax*4], 1

; 2769 : 					serverplayer = netbuffer->u.servercfg.serverplayer;

  00621	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00626	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  0062a	89 0d 00 00 00
	00		 mov	 DWORD PTR _serverplayer, ecx

; 2770 : 					doomcom->numslots = SHORT(netbuffer->u.servercfg.totalslotnum);

  00630	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00635	66 0f b6 48 11	 movzx	 cx, BYTE PTR [eax+17]
  0063a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _doomcom
  00640	66 89 4a 1a	 mov	 WORD PTR [edx+26], cx

; 2771 : 					mynode = netbuffer->u.servercfg.clientnode;

  00644	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00649	8a 48 18	 mov	 cl, BYTE PTR [eax+24]
  0064c	88 0d 00 00 00
	00		 mov	 BYTE PTR _mynode, cl

; 2772 : 					if (serverplayer >= 0)

  00652	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverplayer, 0
  00659	7c 13		 jl	 SHORT $LN60@GetPackets

; 2773 : 						playernode[(UINT8)serverplayer] = servernode;

  0065b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _serverplayer
  00662	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _servernode
  00668	88 88 00 00 00
	00		 mov	 BYTE PTR _playernode[eax], cl
$LN60@GetPackets:

; 2774 : 
; 2775 : 					CONS_Printf("%s", text[JOINACCEPTED]);

  0066e	b8 04 00 00 00	 mov	 eax, 4
  00673	6b c8 49	 imul	 ecx, eax, 73
  00676	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0067c	52		 push	 edx
  0067d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00682	e8 00 00 00 00	 call	 _CONS_Printf
  00687	83 c4 08	 add	 esp, 8

; 2776 : 					DEBFILE(va("Server accept join gametic=%u mynode=%d\n", gametic, mynode));

  0068a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00691	74 39		 je	 SHORT $LN61@GetPackets
  00693	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00698	50		 push	 eax
  00699	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _mynode
  006a0	51		 push	 ecx
  006a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gametic
  006a7	52		 push	 edx
  006a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JMDILMFL@Server?5accept?5join?5gametic?$DN?$CFu?5m@
  006ad	e8 00 00 00 00	 call	 _va
  006b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  006b5	50		 push	 eax
  006b6	e8 00 00 00 00	 call	 _fputs
  006bb	83 c4 08	 add	 esp, 8
  006be	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  006c3	50		 push	 eax
  006c4	e8 00 00 00 00	 call	 _fflush
  006c9	83 c4 04	 add	 esp, 4
$LN61@GetPackets:

; 2777 : 
; 2778 : 					playermask = LONG(netbuffer->u.servercfg.playerdetected);

  006cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  006d1	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  006d4	89 4d bc	 mov	 DWORD PTR _playermask$17[ebp], ecx

; 2779 : 					for (j = 0; j < MAXPLAYERS; j++)

  006d7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _j$19[ebp], 0
  006de	eb 09		 jmp	 SHORT $LN8@GetPackets
$LN6@GetPackets:
  006e0	8b 45 c4	 mov	 eax, DWORD PTR _j$19[ebp]
  006e3	83 c0 01	 add	 eax, 1
  006e6	89 45 c4	 mov	 DWORD PTR _j$19[ebp], eax
$LN8@GetPackets:
  006e9	83 7d c4 20	 cmp	 DWORD PTR _j$19[ebp], 32 ; 00000020H
  006ed	7d 37		 jge	 SHORT $LN7@GetPackets

; 2780 : 						playeringame[j] = (playermask & (1<<j)) != 0;

  006ef	b8 01 00 00 00	 mov	 eax, 1
  006f4	8b 4d c4	 mov	 ecx, DWORD PTR _j$19[ebp]
  006f7	d3 e0		 shl	 eax, cl
  006f9	23 45 bc	 and	 eax, DWORD PTR _playermask$17[ebp]
  006fc	74 0c		 je	 SHORT $LN147@GetPackets
  006fe	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv369[ebp], 1
  00708	eb 0a		 jmp	 SHORT $LN148@GetPackets
$LN147@GetPackets:
  0070a	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv369[ebp], 0
$LN148@GetPackets:
  00714	8b 4d c4	 mov	 ecx, DWORD PTR _j$19[ebp]
  00717	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv369[ebp]
  0071d	89 14 8d 00 00
	00 00		 mov	 DWORD PTR _playeringame[ecx*4], edx
  00724	eb ba		 jmp	 SHORT $LN6@GetPackets
$LN7@GetPackets:

; 2781 : 
; 2782 : 					scp = netbuffer->u.servercfg.netcvarstates;

  00726	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0072b	83 c0 23	 add	 eax, 35			; 00000023H
  0072e	89 45 c0	 mov	 DWORD PTR _scp$18[ebp], eax

; 2783 : 					CV_LoadNetVars(&scp);

  00731	8d 45 c0	 lea	 eax, DWORD PTR _scp$18[ebp]
  00734	50		 push	 eax
  00735	e8 00 00 00 00	 call	 _CV_LoadNetVars
  0073a	83 c4 04	 add	 esp, 4

; 2784 : #ifdef JOININGAME
; 2785 : 					if (netbuffer->u.servercfg.gamestate == GS_LEVEL ||

  0073d	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00742	0f b6 48 19	 movzx	 ecx, BYTE PTR [eax+25]
  00746	83 f9 01	 cmp	 ecx, 1
  00749	74 0e		 je	 SHORT $LN64@GetPackets
  0074b	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00750	0f b6 48 19	 movzx	 ecx, BYTE PTR [eax+25]
  00754	83 f9 02	 cmp	 ecx, 2
  00757	75 0c		 jne	 SHORT $LN62@GetPackets
$LN64@GetPackets:

; 2786 : 						netbuffer->u.servercfg.gamestate == GS_INTERMISSION)
; 2787 : 						cl_mode = cl_downloadsavegame;

  00759	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR _cl_mode, 4
  00763	eb 0a		 jmp	 SHORT $LN63@GetPackets
$LN62@GetPackets:

; 2788 : 					else
; 2789 : #endif
; 2790 : 						cl_mode = cl_connected;

  00765	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR _cl_mode, 5
$LN63@GetPackets:

; 2791 : 					break;

  0076f	e9 a2 00 00 00	 jmp	 $LN4@GetPackets
$LN65@GetPackets:

; 2792 : 				}
; 2793 : 				// handled in d_netfil.c
; 2794 : 				case PT_FILEFRAGMENT:
; 2795 : 					if (!server)

  00774	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0077b	75 06		 jne	 SHORT $LN66@GetPackets

; 2796 : 						Got_Filetxpak();

  0077d	e8 00 00 00 00	 call	 _Got_Filetxpak
  00782	90		 npad	 1
$LN66@GetPackets:

; 2797 : 					break;

  00783	e9 8e 00 00 00	 jmp	 $LN4@GetPackets
$LN67@GetPackets:

; 2798 : 				case PT_REQUESTFILE:
; 2799 : 					if (server)

  00788	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0078f	74 0d		 je	 SHORT $LN68@GetPackets

; 2800 : 						Got_RequestFilePak(node);

  00791	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00795	50		 push	 eax
  00796	e8 00 00 00 00	 call	 _Got_RequestFilePak
  0079b	83 c4 04	 add	 esp, 4
$LN68@GetPackets:

; 2801 : 					break;

  0079e	eb 76		 jmp	 SHORT $LN4@GetPackets
$LN69@GetPackets:

; 2802 : 				case PT_NODETIMEOUT:
; 2803 : 				case PT_CLIENTQUIT:
; 2804 : 					if (server)

  007a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  007a7	74 0d		 je	 SHORT $LN71@GetPackets

; 2805 : 						Net_CloseConnection(node);

  007a9	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  007ad	50		 push	 eax
  007ae	e8 00 00 00 00	 call	 _Net_CloseConnection
  007b3	83 c4 04	 add	 esp, 4
$LN71@GetPackets:

; 2806 : 					break;

  007b6	eb 5e		 jmp	 SHORT $LN4@GetPackets
$LN72@GetPackets:

; 2807 : 				case PT_SERVERTICS:
; 2808 : 					// do not remove my own server (we have just get a out of order packet)
; 2809 : 					if (node == servernode)

  007b8	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  007bc	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  007c3	3b c1		 cmp	 eax, ecx
  007c5	75 02		 jne	 SHORT $LN73@GetPackets

; 2810 : 						break;

  007c7	eb 4d		 jmp	 SHORT $LN4@GetPackets
$LN73@GetPackets:

; 2811 : 				case PT_CLIENTCMD:
; 2812 : 					break; // this is not an "unknown packet"

  007c9	eb 4b		 jmp	 SHORT $LN4@GetPackets
$LN75@GetPackets:

; 2813 : 				default:
; 2814 : 					DEBFILE(va("unknown packet received (%d) from unknown host\n",

  007cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  007d2	74 35		 je	 SHORT $LN76@GetPackets
  007d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  007d9	50		 push	 eax
  007da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  007e0	0f b6 51 06	 movzx	 edx, BYTE PTR [ecx+6]
  007e4	52		 push	 edx
  007e5	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@CDLAPDDH@unknown?5packet?5received?5?$CI?$CFd?$CJ?5fr@
  007ea	e8 00 00 00 00	 call	 _va
  007ef	83 c4 08	 add	 esp, 8
  007f2	50		 push	 eax
  007f3	e8 00 00 00 00	 call	 _fputs
  007f8	83 c4 08	 add	 esp, 8
  007fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00800	50		 push	 eax
  00801	e8 00 00 00 00	 call	 _fflush
  00806	83 c4 04	 add	 esp, 4
$LN76@GetPackets:

; 2815 : 						netbuffer->packettype));
; 2816 : 					Net_CloseConnection(node);

  00809	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0080d	50		 push	 eax
  0080e	e8 00 00 00 00	 call	 _Net_CloseConnection
  00813	83 c4 04	 add	 esp, 4
$LN4@GetPackets:

; 2817 : 					break; // ignore it
; 2818 : 			} // switch
; 2819 : 			continue; //while

  00816	e9 02 f8 ff ff	 jmp	 $LN163@GetPackets
$LN48@GetPackets:

; 2820 : 		}
; 2821 : 		if (dedicated && node == 0) netconsole = 0;

  0081b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00822	74 11		 je	 SHORT $LN77@GetPackets
  00824	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00828	85 c0		 test	 eax, eax
  0082a	75 09		 jne	 SHORT $LN77@GetPackets
  0082c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _netconsole$[ebp], 0
  00833	eb 0e		 jmp	 SHORT $LN78@GetPackets
$LN77@GetPackets:

; 2822 : 		else netconsole = nodetoplayer[node];

  00835	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00839	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer[eax]
  00840	89 4d fc	 mov	 DWORD PTR _netconsole$[ebp], ecx
$LN78@GetPackets:

; 2823 : #ifdef PARANOIA
; 2824 : 		if (netconsole >= MAXPLAYERS)
; 2825 : 			I_Error("bad table nodetoplayer: node %d player %d", doomcom->remotenode, netconsole);
; 2826 : #endif
; 2827 : 
; 2828 : 		switch (netbuffer->packettype)

  00843	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00848	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  0084c	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv410[ebp], ecx
  00852	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv410[ebp]
  00858	83 ea 01	 sub	 edx, 1
  0085b	89 95 38 ff ff
	ff		 mov	 DWORD PTR tv410[ebp], edx
  00861	83 bd 38 ff ff
	ff 16		 cmp	 DWORD PTR tv410[ebp], 22 ; 00000016H
  00868	0f 87 9a 0c 00
	00		 ja	 $LN144@GetPackets
  0086e	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv410[ebp]
  00874	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN166@GetPackets[eax*4]
$LN79@GetPackets:

; 2829 : 		{
; 2830 : // -------------------------------------------- SERVER RECEIVE ----------
; 2831 : 			case PT_CLIENTCMD:
; 2832 : 			case PT_CLIENT2CMD:
; 2833 : 			case PT_CLIENTMIS:
; 2834 : 			case PT_CLIENT2MIS:
; 2835 : 			case PT_NODEKEEPALIVE:
; 2836 : 			case PT_NODEKEEPALIVEMIS:
; 2837 : 				if (!server)

  0087b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00882	75 05		 jne	 SHORT $LN85@GetPackets

; 2838 : 					break;

  00884	e9 c2 0c 00 00	 jmp	 $LN9@GetPackets
$LN85@GetPackets:

; 2839 : 
; 2840 : 				// to save bytes, only the low byte of tic numbers are sent
; 2841 : 				// Figure out what the rest of the bytes are
; 2842 : 				realstart = ExpandTics(netbuffer->u.clientpak.client_tic);

  00889	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0088e	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00892	51		 push	 ecx
  00893	e8 00 00 00 00	 call	 _ExpandTics
  00898	83 c4 04	 add	 esp, 4
  0089b	89 45 f0	 mov	 DWORD PTR _realstart$[ebp], eax

; 2843 : 				realend = ExpandTics(netbuffer->u.clientpak.resendfrom);

  0089e	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  008a3	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  008a7	51		 push	 ecx
  008a8	e8 00 00 00 00	 call	 _ExpandTics
  008ad	83 c4 04	 add	 esp, 4
  008b0	89 45 f4	 mov	 DWORD PTR _realend$[ebp], eax

; 2844 : 
; 2845 : 				if (netbuffer->packettype == PT_CLIENTMIS || netbuffer->packettype == PT_CLIENT2MIS
; 2846 : 					|| netbuffer->packettype == PT_NODEKEEPALIVEMIS
; 2847 : 					|| supposedtics[node] < realend)

  008b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  008b8	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  008bc	83 f9 03	 cmp	 ecx, 3
  008bf	74 2c		 je	 SHORT $LN87@GetPackets
  008c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  008c6	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  008ca	83 f9 05	 cmp	 ecx, 5
  008cd	74 1e		 je	 SHORT $LN87@GetPackets
  008cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  008d4	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  008d8	83 f9 07	 cmp	 ecx, 7
  008db	74 10		 je	 SHORT $LN87@GetPackets
  008dd	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  008e1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _supposedtics[eax*4]
  008e8	3b 4d f4	 cmp	 ecx, DWORD PTR _realend$[ebp]
  008eb	73 0e		 jae	 SHORT $LN86@GetPackets
$LN87@GetPackets:

; 2848 : 				{
; 2849 : 					supposedtics[node] = realend;

  008ed	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  008f1	8b 4d f4	 mov	 ecx, DWORD PTR _realend$[ebp]
  008f4	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _supposedtics[eax*4], ecx
$LN86@GetPackets:

; 2850 : 				}
; 2851 : 				// discard out of order packet
; 2852 : 				if (nettics[node] > realend)

  008fb	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  008ff	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _nettics[eax*4]
  00906	3b 4d f4	 cmp	 ecx, DWORD PTR _realend$[ebp]
  00909	76 44		 jbe	 SHORT $LN88@GetPackets

; 2853 : 				{
; 2854 : 					DEBFILE(va("out of order ticcmd discarded nettics = %u\n", nettics[node]));

  0090b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00912	74 36		 je	 SHORT $LN89@GetPackets
  00914	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00919	50		 push	 eax
  0091a	0f be 4d fb	 movsx	 ecx, BYTE PTR _node$[ebp]
  0091e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _nettics[ecx*4]
  00925	52		 push	 edx
  00926	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@PNCOEEGF@out?5of?5order?5ticcmd?5discarded?5n@
  0092b	e8 00 00 00 00	 call	 _va
  00930	83 c4 08	 add	 esp, 8
  00933	50		 push	 eax
  00934	e8 00 00 00 00	 call	 _fputs
  00939	83 c4 08	 add	 esp, 8
  0093c	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00941	50		 push	 eax
  00942	e8 00 00 00 00	 call	 _fflush
  00947	83 c4 04	 add	 esp, 4
$LN89@GetPackets:

; 2855 : 					break;

  0094a	e9 fc 0b 00 00	 jmp	 $LN9@GetPackets
$LN88@GetPackets:

; 2856 : 				}
; 2857 : 
; 2858 : 				// update the nettics
; 2859 : 				nettics[node] = realend;

  0094f	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00953	8b 4d f4	 mov	 ecx, DWORD PTR _realend$[ebp]
  00956	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _nettics[eax*4], ecx

; 2860 : 
; 2861 : 				// don't do anything for packets of type NODEKEEPALIVE?
; 2862 : 				if (netconsole == -1 || netbuffer->packettype == PT_NODEKEEPALIVE
; 2863 : 					|| netbuffer->packettype == PT_NODEKEEPALIVEMIS)

  0095d	83 7d fc ff	 cmp	 DWORD PTR _netconsole$[ebp], -1
  00961	74 1c		 je	 SHORT $LN91@GetPackets
  00963	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00968	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  0096c	83 f9 06	 cmp	 ecx, 6
  0096f	74 0e		 je	 SHORT $LN91@GetPackets
  00971	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00976	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  0097a	83 f9 07	 cmp	 ecx, 7
  0097d	75 05		 jne	 SHORT $LN90@GetPackets
$LN91@GetPackets:

; 2864 : 					break;

  0097f	e9 c7 0b 00 00	 jmp	 $LN9@GetPackets
$LN90@GetPackets:

; 2865 : 
; 2866 : 				// copy ticcmd
; 2867 : 				G_MoveTiccmd(&netcmds[maketic%BACKUPTICS][netconsole], &netbuffer->u.clientpak.cmd, 1);

  00984	6a 01		 push	 1
  00986	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0098b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0098e	50		 push	 eax
  0098f	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00994	33 d2		 xor	 edx, edx
  00996	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0099b	f7 f1		 div	 ecx
  0099d	c1 e2 08	 shl	 edx, 8
  009a0	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  009a3	8d 8c c2 00 00
	00 00		 lea	 ecx, DWORD PTR _netcmds[edx+eax*8]
  009aa	51		 push	 ecx
  009ab	e8 00 00 00 00	 call	 _G_MoveTiccmd
  009b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2868 : 
; 2869 : 				// check ticcmd for "speed hacks"
; 2870 : 				if (netcmds[maketic%BACKUPTICS][netconsole].forwardmove > MAXPLMOVE || netcmds[maketic%BACKUPTICS][netconsole].forwardmove < -MAXPLMOVE
; 2871 : 					|| netcmds[maketic%BACKUPTICS][netconsole].sidemove > MAXPLMOVE || netcmds[maketic%BACKUPTICS][netconsole].sidemove < -MAXPLMOVE)

  009b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  009b8	33 d2		 xor	 edx, edx
  009ba	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  009bf	f7 f1		 div	 ecx
  009c1	c1 e2 08	 shl	 edx, 8
  009c4	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  009c7	0f be 8c c2 00
	00 00 00	 movsx	 ecx, BYTE PTR _netcmds[edx+eax*8]
  009cf	83 f9 32	 cmp	 ecx, 50			; 00000032H
  009d2	7f 63		 jg	 SHORT $LN93@GetPackets
  009d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  009d9	33 d2		 xor	 edx, edx
  009db	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  009e0	f7 f1		 div	 ecx
  009e2	c1 e2 08	 shl	 edx, 8
  009e5	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  009e8	0f be 8c c2 00
	00 00 00	 movsx	 ecx, BYTE PTR _netcmds[edx+eax*8]
  009f0	83 f9 ce	 cmp	 ecx, -50		; ffffffceH
  009f3	7c 42		 jl	 SHORT $LN93@GetPackets
  009f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  009fa	33 d2		 xor	 edx, edx
  009fc	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a01	f7 f1		 div	 ecx
  00a03	c1 e2 08	 shl	 edx, 8
  00a06	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00a09	0f be 8c c2 01
	00 00 00	 movsx	 ecx, BYTE PTR _netcmds[edx+eax*8+1]
  00a11	83 f9 32	 cmp	 ecx, 50			; 00000032H
  00a14	7f 21		 jg	 SHORT $LN93@GetPackets
  00a16	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00a1b	33 d2		 xor	 edx, edx
  00a1d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a22	f7 f1		 div	 ecx
  00a24	c1 e2 08	 shl	 edx, 8
  00a27	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00a2a	0f be 8c c2 01
	00 00 00	 movsx	 ecx, BYTE PTR _netcmds[edx+eax*8+1]
  00a32	83 f9 ce	 cmp	 ecx, -50		; ffffffceH
  00a35	7d 3d		 jge	 SHORT $LN92@GetPackets
$LN93@GetPackets:

; 2872 : 				{
; 2873 : 					XBOXSTATIC char buf[2];
; 2874 : 					CONS_Printf("Illegal movement value recieved from node %d\n", netconsole);

  00a37	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00a3a	50		 push	 eax
  00a3b	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KCGIJCAK@Illegal?5movement?5value?5recieved@
  00a40	e8 00 00 00 00	 call	 _CONS_Printf
  00a45	83 c4 08	 add	 esp, 8

; 2875 : 					//D_Clearticcmd(k);
; 2876 : 
; 2877 : 					buf[0] = (char)netconsole;

  00a48	b8 01 00 00 00	 mov	 eax, 1
  00a4d	6b c8 00	 imul	 ecx, eax, 0
  00a50	8a 55 fc	 mov	 dl, BYTE PTR _netconsole$[ebp]
  00a53	88 54 0d b8	 mov	 BYTE PTR _buf$16[ebp+ecx], dl

; 2878 : 					buf[1] = KICK_MSG_CON_FAIL;

  00a57	b8 01 00 00 00	 mov	 eax, 1
  00a5c	c1 e0 00	 shl	 eax, 0
  00a5f	c6 44 05 b8 02	 mov	 BYTE PTR _buf$16[ebp+eax], 2

; 2879 : 					SendNetXCmd(XD_KICK, &buf, 2);

  00a64	6a 02		 push	 2
  00a66	8d 45 b8	 lea	 eax, DWORD PTR _buf$16[ebp]
  00a69	50		 push	 eax
  00a6a	6a 03		 push	 3
  00a6c	e8 00 00 00 00	 call	 _SendNetXCmd
  00a71	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN92@GetPackets:

; 2880 : 				}
; 2881 : 
; 2882 : 				// splitscreen cmd
; 2883 : 				if (netbuffer->packettype == PT_CLIENT2CMD && nodetoplayer2[node] >= 0)

  00a74	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00a79	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00a7d	83 f9 04	 cmp	 ecx, 4
  00a80	75 46		 jne	 SHORT $LN94@GetPackets
  00a82	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00a86	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer2[eax]
  00a8d	85 c9		 test	 ecx, ecx
  00a8f	7c 37		 jl	 SHORT $LN94@GetPackets

; 2884 : 					G_MoveTiccmd(&netcmds[maketic%BACKUPTICS][(UINT8)nodetoplayer2[node]],

  00a91	6a 01		 push	 1
  00a93	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00a98	83 c0 14	 add	 eax, 20			; 00000014H
  00a9b	50		 push	 eax
  00a9c	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00aa1	33 d2		 xor	 edx, edx
  00aa3	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00aa8	f7 f1		 div	 ecx
  00aaa	c1 e2 08	 shl	 edx, 8
  00aad	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00ab1	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _nodetoplayer2[eax]
  00ab8	8d 94 ca 00 00
	00 00		 lea	 edx, DWORD PTR _netcmds[edx+ecx*8]
  00abf	52		 push	 edx
  00ac0	e8 00 00 00 00	 call	 _G_MoveTiccmd
  00ac5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN94@GetPackets:

; 2885 : 						&netbuffer->u.client2pak.cmd2, 1);
; 2886 : 
; 2887 : 				// check player consistancy during the level
; 2888 : 				// Careful: When a consistency packet is sent, it overwrites the incoming packet containing the ticcmd.
; 2889 : 				//          Keep this in mind when changing the code that responds to these packets.
; 2890 : 				if (realstart <= gametic && realstart > gametic - BACKUPTICS+1
; 2891 : 					&& consistancy[realstart%BACKUPTICS] != SHORT(netbuffer->u.clientpak.consistancy)
; 2892 : 					&& gamestate == GS_LEVEL)

  00ac8	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  00acb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _gametic
  00ad1	0f 87 10 02 00
	00		 ja	 $LN95@GetPackets
  00ad7	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00adc	83 e8 1f	 sub	 eax, 31			; 0000001fH
  00adf	39 45 f0	 cmp	 DWORD PTR _realstart$[ebp], eax
  00ae2	0f 86 ff 01 00
	00		 jbe	 $LN95@GetPackets
  00ae8	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  00aeb	33 d2		 xor	 edx, edx
  00aed	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00af2	f7 f1		 div	 ecx
  00af4	0f bf 14 55 00
	00 00 00	 movsx	 edx, WORD PTR _consistancy[edx*2]
  00afc	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00b01	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00b05	3b d1		 cmp	 edx, ecx
  00b07	0f 84 da 01 00
	00		 je	 $LN95@GetPackets
  00b0d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00b14	0f 85 cd 01 00
	00		 jne	 $LN95@GetPackets

; 2893 : 				{
; 2894 : 					if (cv_consfailprotect.value && playeringame[netconsole] && consfailcount[netconsole] < cv_consfailprotect.value)

  00b1a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_consfailprotect+20, 0
  00b21	0f 84 37 01 00
	00		 je	 $LN97@GetPackets
  00b27	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00b2a	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00b32	0f 84 26 01 00
	00		 je	 $LN97@GetPackets
  00b38	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00b3b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _consfailcount[eax]
  00b42	3b 0d 14 00 00
	00		 cmp	 ecx, DWORD PTR _cv_consfailprotect+20
  00b48	0f 8d 10 01 00
	00		 jge	 $LN97@GetPackets

; 2895 : 					{
; 2896 : 						if (!consfailstatus[netconsole])

  00b4e	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00b51	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _consfailstatus[eax]
  00b58	85 c9		 test	 ecx, ecx
  00b5a	0f 85 ac 00 00
	00		 jne	 $LN99@GetPackets

; 2897 : 						{
; 2898 : 							if (cv_blamecfail.value)

  00b60	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_blamecfail+20, 0
  00b67	74 1b		 je	 SHORT $LN101@GetPackets

; 2899 : 								CONS_Printf(text[CONSFAILRESTORE], netconsole);

  00b69	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00b6c	50		 push	 eax
  00b6d	b9 04 00 00 00	 mov	 ecx, 4
  00b72	6b d1 4a	 imul	 edx, ecx, 74
  00b75	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00b7b	50		 push	 eax
  00b7c	e8 00 00 00 00	 call	 _CONS_Printf
  00b81	83 c4 08	 add	 esp, 8
$LN101@GetPackets:

; 2900 : 
; 2901 : 							DEBFILE(va("Restoring player %d (consistency failure) [%update] %d!=%d\n",

  00b84	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00b8b	74 52		 je	 SHORT $LN102@GetPackets
  00b8d	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00b92	50		 push	 eax
  00b93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00b99	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  00b9d	52		 push	 edx
  00b9e	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  00ba1	33 d2		 xor	 edx, edx
  00ba3	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00ba8	f7 f1		 div	 ecx
  00baa	0f bf 14 55 00
	00 00 00	 movsx	 edx, WORD PTR _consistancy[edx*2]
  00bb2	52		 push	 edx
  00bb3	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  00bb6	50		 push	 eax
  00bb7	8b 4d fc	 mov	 ecx, DWORD PTR _netconsole$[ebp]
  00bba	51		 push	 ecx
  00bbb	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@EBJINPA@Restoring?5player?5?$CFd?5?$CIconsistenc@
  00bc0	e8 00 00 00 00	 call	 _va
  00bc5	83 c4 14	 add	 esp, 20			; 00000014H
  00bc8	50		 push	 eax
  00bc9	e8 00 00 00 00	 call	 _fputs
  00bce	83 c4 08	 add	 esp, 8
  00bd1	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00bd6	50		 push	 eax
  00bd7	e8 00 00 00 00	 call	 _fflush
  00bdc	83 c4 04	 add	 esp, 4
$LN102@GetPackets:

; 2902 : 								netconsole, realstart, consistancy[realstart%BACKUPTICS],
; 2903 : 								SHORT(netbuffer->u.clientpak.consistancy)));
; 2904 : 
; 2905 : 							SV_SendConsistency(netconsole);

  00bdf	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00be2	50		 push	 eax
  00be3	e8 00 00 00 00	 call	 _SV_SendConsistency
  00be8	83 c4 04	 add	 esp, 4

; 2906 : 							consfailstatus[netconsole] = 1;

  00beb	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00bee	c6 80 00 00 00
	00 01		 mov	 BYTE PTR _consfailstatus[eax], 1

; 2907 : 							consfailcount[netconsole]++;

  00bf5	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00bf8	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _consfailcount[eax]
  00bfe	80 c1 01	 add	 cl, 1
  00c01	8b 55 fc	 mov	 edx, DWORD PTR _netconsole$[ebp]
  00c04	88 8a 00 00 00
	00		 mov	 BYTE PTR _consfailcount[edx], cl

; 2908 : 						}

  00c0a	eb 4d		 jmp	 SHORT $LN104@GetPackets
$LN99@GetPackets:

; 2909 : 						else
; 2910 : 						{
; 2911 : 							//We don't want to send any more packets than we have to.
; 2912 : 							//If the client doesn't resync in a certain time,
; 2913 : 							//assume they didn't get the packet. Send another.
; 2914 : 							if (consfailstatus[netconsole] < 10)

  00c0c	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00c0f	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _consfailstatus[eax]
  00c16	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00c19	7d 17		 jge	 SHORT $LN103@GetPackets

; 2915 : 								consfailstatus[netconsole]++;

  00c1b	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00c1e	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _consfailstatus[eax]
  00c24	80 c1 01	 add	 cl, 1
  00c27	8b 55 fc	 mov	 edx, DWORD PTR _netconsole$[ebp]
  00c2a	88 8a 00 00 00
	00		 mov	 BYTE PTR _consfailstatus[edx], cl
  00c30	eb 27		 jmp	 SHORT $LN104@GetPackets
$LN103@GetPackets:

; 2916 : 							else
; 2917 : 								consfailstatus[netconsole] = 0;

  00c32	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00c35	89 85 44 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00c3b	83 bd 44 ff ff
	ff 20		 cmp	 DWORD PTR $T3[ebp], 32	; 00000020H
  00c42	73 02		 jae	 SHORT $LN149@GetPackets
  00c44	eb 06		 jmp	 SHORT $LN150@GetPackets
$LN149@GetPackets:
  00c46	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00c4b	90		 npad	 1
$LN150@GetPackets:
  00c4c	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00c52	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _consfailstatus[ecx], 0
$LN104@GetPackets:

; 2918 : 						}
; 2919 : 					}

  00c59	e9 87 00 00 00	 jmp	 $LN105@GetPackets
$LN97@GetPackets:

; 2920 : 					else
; 2921 : 					{
; 2922 : 						XBOXSTATIC UINT8 buf[3];
; 2923 : 
; 2924 : 						buf[0] = (UINT8)netconsole;

  00c5e	b8 01 00 00 00	 mov	 eax, 1
  00c63	6b c8 00	 imul	 ecx, eax, 0
  00c66	8a 55 fc	 mov	 dl, BYTE PTR _netconsole$[ebp]
  00c69	88 54 0d b4	 mov	 BYTE PTR _buf$15[ebp+ecx], dl

; 2925 : 						buf[1] = KICK_MSG_CON_FAIL;

  00c6d	b8 01 00 00 00	 mov	 eax, 1
  00c72	c1 e0 00	 shl	 eax, 0
  00c75	c6 44 05 b4 02	 mov	 BYTE PTR _buf$15[ebp+eax], 2

; 2926 : 						SendNetXCmd(XD_KICK, &buf, 2);

  00c7a	6a 02		 push	 2
  00c7c	8d 45 b4	 lea	 eax, DWORD PTR _buf$15[ebp]
  00c7f	50		 push	 eax
  00c80	6a 03		 push	 3
  00c82	e8 00 00 00 00	 call	 _SendNetXCmd
  00c87	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2927 : 						DEBFILE(va("player %d kicked (consistency failure) [%u] %d!=%d\n",

  00c8a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00c91	74 52		 je	 SHORT $LN105@GetPackets
  00c93	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00c98	50		 push	 eax
  00c99	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00c9f	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  00ca3	52		 push	 edx
  00ca4	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  00ca7	33 d2		 xor	 edx, edx
  00ca9	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00cae	f7 f1		 div	 ecx
  00cb0	0f bf 14 55 00
	00 00 00	 movsx	 edx, WORD PTR _consistancy[edx*2]
  00cb8	52		 push	 edx
  00cb9	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  00cbc	50		 push	 eax
  00cbd	8b 4d fc	 mov	 ecx, DWORD PTR _netconsole$[ebp]
  00cc0	51		 push	 ecx
  00cc1	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@EKHOPNBO@player?5?$CFd?5kicked?5?$CIconsistency?5f@
  00cc6	e8 00 00 00 00	 call	 _va
  00ccb	83 c4 14	 add	 esp, 20			; 00000014H
  00cce	50		 push	 eax
  00ccf	e8 00 00 00 00	 call	 _fputs
  00cd4	83 c4 08	 add	 esp, 8
  00cd7	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00cdc	50		 push	 eax
  00cdd	e8 00 00 00 00	 call	 _fflush
  00ce2	83 c4 04	 add	 esp, 4
$LN105@GetPackets:

; 2928 : 							netconsole, realstart, consistancy[realstart%BACKUPTICS],
; 2929 : 							SHORT(netbuffer->u.clientpak.consistancy)));
; 2930 : 					}
; 2931 : 				}

  00ce5	eb 27		 jmp	 SHORT $LN96@GetPackets
$LN95@GetPackets:

; 2932 : 				else
; 2933 : 					consfailstatus[netconsole] = 0;

  00ce7	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00cea	89 85 40 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00cf0	83 bd 40 ff ff
	ff 20		 cmp	 DWORD PTR $T2[ebp], 32	; 00000020H
  00cf7	73 02		 jae	 SHORT $LN151@GetPackets
  00cf9	eb 06		 jmp	 SHORT $LN152@GetPackets
$LN151@GetPackets:
  00cfb	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00d00	90		 npad	 1
$LN152@GetPackets:
  00d01	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00d07	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _consfailstatus[ecx], 0
$LN96@GetPackets:

; 2934 : 
; 2935 : 				break;

  00d0e	e9 38 08 00 00	 jmp	 $LN9@GetPackets
$LN106@GetPackets:

; 2936 : 			case PT_TEXTCMD2: // splitscreen special
; 2937 : 				netconsole = nodetoplayer2[node];

  00d13	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00d17	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer2[eax]
  00d1e	89 4d fc	 mov	 DWORD PTR _netconsole$[ebp], ecx
$LN107@GetPackets:

; 2938 : 			case PT_TEXTCMD:
; 2939 : 				if (!server)

  00d21	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00d28	75 05		 jne	 SHORT $LN108@GetPackets

; 2940 : 					break;

  00d2a	e9 1c 08 00 00	 jmp	 $LN9@GetPackets
$LN108@GetPackets:

; 2941 : 
; 2942 : 				if (netconsole < 0 || netconsole >= MAXPLAYERS)

  00d2f	83 7d fc 00	 cmp	 DWORD PTR _netconsole$[ebp], 0
  00d33	7c 06		 jl	 SHORT $LN111@GetPackets
  00d35	83 7d fc 20	 cmp	 DWORD PTR _netconsole$[ebp], 32 ; 00000020H
  00d39	7c 12		 jl	 SHORT $LN109@GetPackets
$LN111@GetPackets:

; 2943 : 					Net_UnAcknowledgPacket(node);

  00d3b	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00d3f	50		 push	 eax
  00d40	e8 00 00 00 00	 call	 _Net_UnAcknowledgPacket
  00d45	83 c4 04	 add	 esp, 4
  00d48	e9 5f 02 00 00	 jmp	 $LN110@GetPackets
$LN109@GetPackets:

; 2944 : 				else
; 2945 : 				{
; 2946 : 					size_t j;
; 2947 : 					tic_t tic = maketic;

  00d4d	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00d52	89 45 ac	 mov	 DWORD PTR _tic$13[ebp], eax

; 2948 : 
; 2949 : 					// check if tic that we are making isn't too large else we cannot send it :(
; 2950 : 					// doomcom->numslots+1 "+1" since doomcom->numslots can change within this time and sent time
; 2951 : 					j = software_MAXPACKETLENGTH

  00d55	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _software_MAXPACKETLENGTH
  00d5c	b9 01 00 00 00	 mov	 ecx, 1
  00d61	6b d1 00	 imul	 edx, ecx, 0
  00d64	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00d6a	0f b6 54 11 08	 movzx	 edx, BYTE PTR [ecx+edx+8]
  00d6f	b9 04 00 00 00	 mov	 ecx, 4
  00d74	83 c1 08	 add	 ecx, 8
  00d77	be 08 00 00 00	 mov	 esi, 8
  00d7c	6b f6 00	 imul	 esi, esi, 0
  00d7f	03 ce		 add	 ecx, esi
  00d81	8d 54 0a 02	 lea	 edx, DWORD PTR [edx+ecx+2]
  00d85	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  00d8b	0f bf 49 1a	 movsx	 ecx, WORD PTR [ecx+26]
  00d8f	8d 54 ca 08	 lea	 edx, DWORD PTR [edx+ecx*8+8]
  00d93	2b c2		 sub	 eax, edx
  00d95	89 45 b0	 mov	 DWORD PTR _j$14[ebp], eax
$LN11@GetPackets:

; 2952 : 						- (netbuffer->u.textcmd[0]+2+BASESERVERTICSSIZE
; 2953 : 						+ (doomcom->numslots+1)*sizeof (ticcmd_t));
; 2954 : 
; 2955 : 					// search a tic that have enougth space in the ticcmd
; 2956 : 					while ((TotalTextCmdPerTic(tic) > j || netbuffer->u.textcmd[0]
; 2957 : 						+ textcmds[tic%BACKUPTICS][netconsole][0] > MAXTEXTCMD)
; 2958 : 						&& tic < firstticstosend + BACKUPTICS)

  00d98	8b 45 ac	 mov	 eax, DWORD PTR _tic$13[ebp]
  00d9b	50		 push	 eax
  00d9c	e8 00 00 00 00	 call	 _TotalTextCmdPerTic
  00da1	83 c4 04	 add	 esp, 4
  00da4	3b 45 b0	 cmp	 eax, DWORD PTR _j$14[ebp]
  00da7	77 45		 ja	 SHORT $LN112@GetPackets
  00da9	b8 01 00 00 00	 mov	 eax, 1
  00dae	6b c8 00	 imul	 ecx, eax, 0
  00db1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00db7	0f b6 4c 0a 08	 movzx	 ecx, BYTE PTR [edx+ecx+8]
  00dbc	8b 45 ac	 mov	 eax, DWORD PTR _tic$13[ebp]
  00dbf	33 d2		 xor	 edx, edx
  00dc1	be 20 00 00 00	 mov	 esi, 32			; 00000020H
  00dc6	f7 f6		 div	 esi
  00dc8	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  00dcb	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00dce	c1 e0 08	 shl	 eax, 8
  00dd1	8d 94 02 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[edx+eax]
  00dd8	b8 01 00 00 00	 mov	 eax, 1
  00ddd	6b c0 00	 imul	 eax, eax, 0
  00de0	0f b6 14 02	 movzx	 edx, BYTE PTR [edx+eax]
  00de4	03 ca		 add	 ecx, edx
  00de6	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00dec	7e 18		 jle	 SHORT $LN12@GetPackets
$LN112@GetPackets:
  00dee	a1 00 00 00 00	 mov	 eax, DWORD PTR _firstticstosend
  00df3	83 c0 20	 add	 eax, 32			; 00000020H
  00df6	39 45 ac	 cmp	 DWORD PTR _tic$13[ebp], eax
  00df9	73 0b		 jae	 SHORT $LN12@GetPackets

; 2959 : 						tic++;

  00dfb	8b 45 ac	 mov	 eax, DWORD PTR _tic$13[ebp]
  00dfe	83 c0 01	 add	 eax, 1
  00e01	89 45 ac	 mov	 DWORD PTR _tic$13[ebp], eax
  00e04	eb 92		 jmp	 SHORT $LN11@GetPackets
$LN12@GetPackets:

; 2960 : 
; 2961 : 					if (tic >= firstticstosend + BACKUPTICS)

  00e06	a1 00 00 00 00	 mov	 eax, DWORD PTR _firstticstosend
  00e0b	83 c0 20	 add	 eax, 32			; 00000020H
  00e0e	39 45 ac	 cmp	 DWORD PTR _tic$13[ebp], eax
  00e11	72 6f		 jb	 SHORT $LN113@GetPackets

; 2962 : 					{
; 2963 : 						DEBFILE(va("GetPacket: Textcmd too long (max %"PRIdS", used %"PRIdS", mak %d, "

  00e13	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00e1a	74 54		 je	 SHORT $LN114@GetPackets
  00e1c	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00e21	50		 push	 eax
  00e22	8b 4d fc	 mov	 ecx, DWORD PTR _netconsole$[ebp]
  00e25	51		 push	 ecx
  00e26	0f be 55 fb	 movsx	 edx, BYTE PTR _node$[ebp]
  00e2a	52		 push	 edx
  00e2b	a1 00 00 00 00	 mov	 eax, DWORD PTR _firstticstosend
  00e30	50		 push	 eax
  00e31	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maketic
  00e37	51		 push	 ecx
  00e38	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _maketic
  00e3e	52		 push	 edx
  00e3f	e8 00 00 00 00	 call	 _TotalTextCmdPerTic
  00e44	83 c4 04	 add	 esp, 4
  00e47	50		 push	 eax
  00e48	8b 45 b0	 mov	 eax, DWORD PTR _j$14[ebp]
  00e4b	50		 push	 eax
  00e4c	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@GOGMBMGL@GetPacket?3?5Textcmd?5too?5long?5?$CIma@
  00e51	e8 00 00 00 00	 call	 _va
  00e56	83 c4 1c	 add	 esp, 28			; 0000001cH
  00e59	50		 push	 eax
  00e5a	e8 00 00 00 00	 call	 _fputs
  00e5f	83 c4 08	 add	 esp, 8
  00e62	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00e67	50		 push	 eax
  00e68	e8 00 00 00 00	 call	 _fflush
  00e6d	83 c4 04	 add	 esp, 4
$LN114@GetPackets:

; 2964 : 							"tosend %u, node %u, player %d)\n", j, TotalTextCmdPerTic(maketic),
; 2965 : 							maketic, firstticstosend, node, netconsole));
; 2966 : 						Net_UnAcknowledgPacket(node);

  00e70	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00e74	50		 push	 eax
  00e75	e8 00 00 00 00	 call	 _Net_UnAcknowledgPacket
  00e7a	83 c4 04	 add	 esp, 4

; 2967 : 						break;

  00e7d	e9 c9 06 00 00	 jmp	 $LN9@GetPackets
$LN113@GetPackets:

; 2968 : 					}
; 2969 : 					DEBFILE(va("textcmd put in tic %u at position %d (player %d) ftts %u mk %u\n",

  00e82	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00e89	74 63		 je	 SHORT $LN115@GetPackets
  00e8b	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00e90	50		 push	 eax
  00e91	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _maketic
  00e97	51		 push	 ecx
  00e98	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _firstticstosend
  00e9e	52		 push	 edx
  00e9f	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00ea2	50		 push	 eax
  00ea3	8b 4d e0	 mov	 ecx, DWORD PTR _p$[ebp]
  00ea6	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  00ea9	8b 55 fc	 mov	 edx, DWORD PTR _netconsole$[ebp]
  00eac	c1 e2 08	 shl	 edx, 8
  00eaf	8d 84 11 00 00
	00 00		 lea	 eax, DWORD PTR _textcmds[ecx+edx]
  00eb6	b9 01 00 00 00	 mov	 ecx, 1
  00ebb	6b d1 00	 imul	 edx, ecx, 0
  00ebe	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00ec2	83 c0 01	 add	 eax, 1
  00ec5	50		 push	 eax
  00ec6	8b 4d ac	 mov	 ecx, DWORD PTR _tic$13[ebp]
  00ec9	51		 push	 ecx
  00eca	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@KLJEDHAI@textcmd?5put?5in?5tic?5?$CFu?5at?5positi@
  00ecf	e8 00 00 00 00	 call	 _va
  00ed4	83 c4 18	 add	 esp, 24			; 00000018H
  00ed7	50		 push	 eax
  00ed8	e8 00 00 00 00	 call	 _fputs
  00edd	83 c4 08	 add	 esp, 8
  00ee0	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00ee5	50		 push	 eax
  00ee6	e8 00 00 00 00	 call	 _fflush
  00eeb	83 c4 04	 add	 esp, 4
$LN115@GetPackets:

; 2970 : 						tic, textcmds[p][netconsole][0]+1, netconsole, firstticstosend, maketic));
; 2971 : 					p = tic % BACKUPTICS;

  00eee	8b 45 ac	 mov	 eax, DWORD PTR _tic$13[ebp]
  00ef1	33 d2		 xor	 edx, edx
  00ef3	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00ef8	f7 f1		 div	 ecx
  00efa	89 55 e0	 mov	 DWORD PTR _p$[ebp], edx

; 2972 : 					M_Memcpy(&textcmds[p][netconsole][textcmds[p][netconsole][0]+1],

  00efd	b8 01 00 00 00	 mov	 eax, 1
  00f02	6b c8 00	 imul	 ecx, eax, 0
  00f05	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  00f0b	0f b6 44 0a 08	 movzx	 eax, BYTE PTR [edx+ecx+8]
  00f10	50		 push	 eax
  00f11	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _netbuffer
  00f17	83 c1 09	 add	 ecx, 9
  00f1a	51		 push	 ecx
  00f1b	8b 55 e0	 mov	 edx, DWORD PTR _p$[ebp]
  00f1e	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  00f21	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00f24	c1 e0 08	 shl	 eax, 8
  00f27	8d 8c 02 00 00
	00 00		 lea	 ecx, DWORD PTR _textcmds[edx+eax]
  00f2e	8b 55 e0	 mov	 edx, DWORD PTR _p$[ebp]
  00f31	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  00f34	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00f37	c1 e0 08	 shl	 eax, 8
  00f3a	8d 94 02 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[edx+eax]
  00f41	b8 01 00 00 00	 mov	 eax, 1
  00f46	6b c0 00	 imul	 eax, eax, 0
  00f49	0f b6 14 02	 movzx	 edx, BYTE PTR [edx+eax]
  00f4d	8d 44 11 01	 lea	 eax, DWORD PTR [ecx+edx+1]
  00f51	50		 push	 eax
  00f52	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00f58	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2973 : 						netbuffer->u.textcmd+1, netbuffer->u.textcmd[0]);
; 2974 : 					textcmds[p][netconsole][0] = (UINT8)(textcmds[p][netconsole][0] + (UINT8)netbuffer->u.textcmd[0]);

  00f5b	8b 45 e0	 mov	 eax, DWORD PTR _p$[ebp]
  00f5e	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00f61	8b 4d fc	 mov	 ecx, DWORD PTR _netconsole$[ebp]
  00f64	c1 e1 08	 shl	 ecx, 8
  00f67	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  00f6e	b8 01 00 00 00	 mov	 eax, 1
  00f73	6b c8 00	 imul	 ecx, eax, 0
  00f76	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00f7a	b8 01 00 00 00	 mov	 eax, 1
  00f7f	6b c8 00	 imul	 ecx, eax, 0
  00f82	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  00f87	0f b6 4c 08 08	 movzx	 ecx, BYTE PTR [eax+ecx+8]
  00f8c	03 d1		 add	 edx, ecx
  00f8e	8b 45 e0	 mov	 eax, DWORD PTR _p$[ebp]
  00f91	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00f94	8b 4d fc	 mov	 ecx, DWORD PTR _netconsole$[ebp]
  00f97	c1 e1 08	 shl	 ecx, 8
  00f9a	8d 84 08 00 00
	00 00		 lea	 eax, DWORD PTR _textcmds[eax+ecx]
  00fa1	b9 01 00 00 00	 mov	 ecx, 1
  00fa6	6b c9 00	 imul	 ecx, ecx, 0
  00fa9	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
$LN110@GetPackets:

; 2975 : 				}
; 2976 : 				break;

  00fac	e9 9a 05 00 00	 jmp	 $LN9@GetPackets
$LN116@GetPackets:

; 2977 : 			case PT_NODETIMEOUT:
; 2978 : 			case PT_CLIENTQUIT:
; 2979 : 				if (!server)

  00fb1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00fb8	75 05		 jne	 SHORT $LN118@GetPackets

; 2980 : 					break;

  00fba	e9 8c 05 00 00	 jmp	 $LN9@GetPackets
$LN118@GetPackets:

; 2981 : 
; 2982 : 				// nodeingame will be put false in the execution of kick command
; 2983 : 				// this allow to send some packets to the quitting client to have their ack back
; 2984 : 				nodewaiting[node] = 0;

  00fbf	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  00fc3	89 85 3c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00fc9	83 bd 3c ff ff
	ff 20		 cmp	 DWORD PTR $T1[ebp], 32	; 00000020H
  00fd0	73 02		 jae	 SHORT $LN153@GetPackets
  00fd2	eb 06		 jmp	 SHORT $LN154@GetPackets
$LN153@GetPackets:
  00fd4	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00fd9	90		 npad	 1
$LN154@GetPackets:
  00fda	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00fe0	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _nodewaiting[ecx], 0

; 2985 : 				if (netconsole != -1 && playeringame[netconsole])

  00fe7	83 7d fc ff	 cmp	 DWORD PTR _netconsole$[ebp], -1
  00feb	0f 84 ca 00 00
	00		 je	 $LN122@GetPackets
  00ff1	8b 45 fc	 mov	 eax, DWORD PTR _netconsole$[ebp]
  00ff4	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00ffc	0f 84 b9 00 00
	00		 je	 $LN122@GetPackets

; 2986 : 				{
; 2987 : 					XBOXSTATIC UINT8 buf[2];
; 2988 : 					buf[0] = (UINT8)netconsole;

  01002	b8 01 00 00 00	 mov	 eax, 1
  01007	6b c8 00	 imul	 ecx, eax, 0
  0100a	8a 55 fc	 mov	 dl, BYTE PTR _netconsole$[ebp]
  0100d	88 54 0d a8	 mov	 BYTE PTR _buf$12[ebp+ecx], dl

; 2989 : 					if (netbuffer->packettype == PT_NODETIMEOUT)

  01011	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  01016	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  0101a	83 f9 15	 cmp	 ecx, 21			; 00000015H
  0101d	75 0f		 jne	 SHORT $LN120@GetPackets

; 2990 : 						buf[1] = KICK_MSG_TIMEOUT;

  0101f	b8 01 00 00 00	 mov	 eax, 1
  01024	c1 e0 00	 shl	 eax, 0
  01027	c6 44 05 a8 04	 mov	 BYTE PTR _buf$12[ebp+eax], 4
  0102c	eb 0d		 jmp	 SHORT $LN121@GetPackets
$LN120@GetPackets:

; 2991 : 					else
; 2992 : 						buf[1] = KICK_MSG_PLAYER_QUIT;

  0102e	b8 01 00 00 00	 mov	 eax, 1
  01033	c1 e0 00	 shl	 eax, 0
  01036	c6 44 05 a8 03	 mov	 BYTE PTR _buf$12[ebp+eax], 3
$LN121@GetPackets:

; 2993 : 					SendNetXCmd(XD_KICK, &buf, 2);

  0103b	6a 02		 push	 2
  0103d	8d 45 a8	 lea	 eax, DWORD PTR _buf$12[ebp]
  01040	50		 push	 eax
  01041	6a 03		 push	 3
  01043	e8 00 00 00 00	 call	 _SendNetXCmd
  01048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2994 : 					nodetoplayer[node] = -1;

  0104b	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0104f	c6 80 00 00 00
	00 ff		 mov	 BYTE PTR _nodetoplayer[eax], -1

; 2995 : 					if (nodetoplayer2[node] != -1 && nodetoplayer2[node] >= 0
; 2996 : 						&& playeringame[(UINT8)nodetoplayer2[node]])

  01056	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0105a	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer2[eax]
  01061	83 f9 ff	 cmp	 ecx, -1
  01064	74 55		 je	 SHORT $LN122@GetPackets
  01066	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0106a	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _nodetoplayer2[eax]
  01071	85 c9		 test	 ecx, ecx
  01073	7c 46		 jl	 SHORT $LN122@GetPackets
  01075	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  01079	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _nodetoplayer2[eax]
  01080	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[ecx*4], 0
  01088	74 31		 je	 SHORT $LN122@GetPackets

; 2997 : 					{
; 2998 : 						buf[0] = nodetoplayer2[node];

  0108a	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0108e	b9 01 00 00 00	 mov	 ecx, 1
  01093	6b d1 00	 imul	 edx, ecx, 0
  01096	8a 80 00 00 00
	00		 mov	 al, BYTE PTR _nodetoplayer2[eax]
  0109c	88 44 15 a8	 mov	 BYTE PTR _buf$12[ebp+edx], al

; 2999 : 						SendNetXCmd(XD_KICK, &buf, 2);

  010a0	6a 02		 push	 2
  010a2	8d 45 a8	 lea	 eax, DWORD PTR _buf$12[ebp]
  010a5	50		 push	 eax
  010a6	6a 03		 push	 3
  010a8	e8 00 00 00 00	 call	 _SendNetXCmd
  010ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3000 : 						nodetoplayer2[node] = -1;

  010b0	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  010b4	c6 80 00 00 00
	00 ff		 mov	 BYTE PTR _nodetoplayer2[eax], -1
$LN122@GetPackets:

; 3001 : 					}
; 3002 : 				}
; 3003 : 				Net_CloseConnection(node);

  010bb	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  010bf	50		 push	 eax
  010c0	e8 00 00 00 00	 call	 _Net_CloseConnection
  010c5	83 c4 04	 add	 esp, 4

; 3004 : 				nodeingame[node] = false;

  010c8	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  010cc	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _nodeingame[eax*4], 0

; 3005 : 				break;

  010d7	e9 6f 04 00 00	 jmp	 $LN9@GetPackets
$LN123@GetPackets:

; 3006 : // -------------------------------------------- CLIENT RECEIVE ----------
; 3007 : 			case PT_SERVERTICS:
; 3008 : 				// Only accept PT_SERVERTICS from the server.
; 3009 : 				if (node != servernode)

  010dc	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  010e0	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  010e7	3b c1		 cmp	 eax, ecx
  010e9	0f 84 84 00 00
	00		 je	 $LN124@GetPackets

; 3010 : 				{
; 3011 : 					DEBFILE(va("PT_SERVERTICS recieved from non-host %d\n", node));

  010ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  010f6	74 2f		 je	 SHORT $LN125@GetPackets
  010f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  010fd	50		 push	 eax
  010fe	0f be 4d fb	 movsx	 ecx, BYTE PTR _node$[ebp]
  01102	51		 push	 ecx
  01103	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IKAPOEKI@PT_SERVERTICS?5recieved?5from?5non@
  01108	e8 00 00 00 00	 call	 _va
  0110d	83 c4 08	 add	 esp, 8
  01110	50		 push	 eax
  01111	e8 00 00 00 00	 call	 _fputs
  01116	83 c4 08	 add	 esp, 8
  01119	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0111e	50		 push	 eax
  0111f	e8 00 00 00 00	 call	 _fflush
  01124	83 c4 04	 add	 esp, 4
$LN125@GetPackets:

; 3012 : 
; 3013 : 					if (server)

  01127	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0112e	74 3e		 je	 SHORT $LN126@GetPackets

; 3014 : 					{
; 3015 : 						XBOXSTATIC UINT8 buf[2];
; 3016 : 						CONS_Printf("PT_SERVERTICS recieved from non-host %d\n", node);

  01130	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  01134	50		 push	 eax
  01135	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IKAPOEKI@PT_SERVERTICS?5recieved?5from?5non@
  0113a	e8 00 00 00 00	 call	 _CONS_Printf
  0113f	83 c4 08	 add	 esp, 8

; 3017 : 
; 3018 : 						buf[0] = (UINT8)node;

  01142	b8 01 00 00 00	 mov	 eax, 1
  01147	6b c8 00	 imul	 ecx, eax, 0
  0114a	8a 55 fb	 mov	 dl, BYTE PTR _node$[ebp]
  0114d	88 54 0d a4	 mov	 BYTE PTR _buf$11[ebp+ecx], dl

; 3019 : 						buf[1] = KICK_MSG_CON_FAIL;

  01151	b8 01 00 00 00	 mov	 eax, 1
  01156	c1 e0 00	 shl	 eax, 0
  01159	c6 44 05 a4 02	 mov	 BYTE PTR _buf$11[ebp+eax], 2

; 3020 : 						SendNetXCmd(XD_KICK, &buf, 2);

  0115e	6a 02		 push	 2
  01160	8d 45 a4	 lea	 eax, DWORD PTR _buf$11[ebp]
  01163	50		 push	 eax
  01164	6a 03		 push	 3
  01166	e8 00 00 00 00	 call	 _SendNetXCmd
  0116b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN126@GetPackets:

; 3021 : 					}
; 3022 : 
; 3023 : 					break;

  0116e	e9 d8 03 00 00	 jmp	 $LN9@GetPackets
$LN124@GetPackets:

; 3024 : 				}
; 3025 : 
; 3026 : 				realstart = ExpandTics(netbuffer->u.serverpak.starttic);

  01173	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  01178	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  0117c	51		 push	 ecx
  0117d	e8 00 00 00 00	 call	 _ExpandTics
  01182	83 c4 04	 add	 esp, 4
  01185	89 45 f0	 mov	 DWORD PTR _realstart$[ebp], eax

; 3027 : 				realend = realstart + netbuffer->u.serverpak.numtics;

  01188	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0118d	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  01191	03 4d f0	 add	 ecx, DWORD PTR _realstart$[ebp]
  01194	89 4d f4	 mov	 DWORD PTR _realend$[ebp], ecx

; 3028 : 
; 3029 : 				txtpak = (UINT8 *)&netbuffer->u.serverpak.cmds[netbuffer->u.serverpak.numslots

  01197	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0119c	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  011a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  011a6	0f b6 42 09	 movzx	 eax, BYTE PTR [edx+9]
  011aa	0f af c8	 imul	 ecx, eax
  011ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  011b3	8d 44 ca 0c	 lea	 eax, DWORD PTR [edx+ecx*8+12]
  011b7	89 45 e8	 mov	 DWORD PTR _txtpak$[ebp], eax

; 3030 : 					* netbuffer->u.serverpak.numtics];
; 3031 : 
; 3032 : 				if (realend > gametic + BACKUPTICS)

  011ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  011bf	83 c0 20	 add	 eax, 32			; 00000020H
  011c2	39 45 f4	 cmp	 DWORD PTR _realend$[ebp], eax
  011c5	76 0b		 jbe	 SHORT $LN127@GetPackets

; 3033 : 					realend = gametic + BACKUPTICS;

  011c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  011cc	83 c0 20	 add	 eax, 32			; 00000020H
  011cf	89 45 f4	 mov	 DWORD PTR _realend$[ebp], eax
$LN127@GetPackets:

; 3034 : 				cl_packetmissed = realstart > neededtic;

  011d2	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  011d5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _neededtic
  011db	76 0c		 jbe	 SHORT $LN155@GetPackets
  011dd	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv879[ebp], 1
  011e7	eb 0a		 jmp	 SHORT $LN156@GetPackets
$LN155@GetPackets:
  011e9	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv879[ebp], 0
$LN156@GetPackets:
  011f3	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv879[ebp]
  011f9	89 0d 00 00 00
	00		 mov	 DWORD PTR _cl_packetmissed, ecx

; 3035 : 
; 3036 : 				if (realstart <= neededtic && realend > neededtic)

  011ff	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  01202	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _neededtic
  01208	0f 87 10 01 00
	00		 ja	 $LN128@GetPackets
  0120e	8b 45 f4	 mov	 eax, DWORD PTR _realend$[ebp]
  01211	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _neededtic
  01217	0f 86 01 01 00
	00		 jbe	 $LN128@GetPackets

; 3037 : 				{
; 3038 : 					tic_t i, j;
; 3039 : 					pak = (UINT8 *)&netbuffer->u.serverpak.cmds;

  0121d	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  01222	83 c0 0c	 add	 eax, 12			; 0000000cH
  01225	89 45 ec	 mov	 DWORD PTR _pak$[ebp], eax

; 3040 : 
; 3041 : 					for (i = realstart; i < realend; i++)

  01228	8b 45 f0	 mov	 eax, DWORD PTR _realstart$[ebp]
  0122b	89 45 a0	 mov	 DWORD PTR _i$10[ebp], eax
  0122e	eb 09		 jmp	 SHORT $LN15@GetPackets
$LN13@GetPackets:
  01230	8b 45 a0	 mov	 eax, DWORD PTR _i$10[ebp]
  01233	83 c0 01	 add	 eax, 1
  01236	89 45 a0	 mov	 DWORD PTR _i$10[ebp], eax
$LN15@GetPackets:
  01239	8b 45 a0	 mov	 eax, DWORD PTR _i$10[ebp]
  0123c	3b 45 f4	 cmp	 eax, DWORD PTR _realend$[ebp]
  0123f	0f 83 cf 00 00
	00		 jae	 $LN14@GetPackets

; 3042 : 					{
; 3043 : 						// clear first
; 3044 : 						D_Clearticcmd(i);

  01245	8b 45 a0	 mov	 eax, DWORD PTR _i$10[ebp]
  01248	50		 push	 eax
  01249	e8 00 00 00 00	 call	 _D_Clearticcmd
  0124e	83 c4 04	 add	 esp, 4

; 3045 : 
; 3046 : 						// copy the tics
; 3047 : 						pak = G_ScpyTiccmd(netcmds[i%BACKUPTICS], pak,

  01251	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  01256	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  0125a	c1 e1 03	 shl	 ecx, 3
  0125d	51		 push	 ecx
  0125e	8b 55 ec	 mov	 edx, DWORD PTR _pak$[ebp]
  01261	52		 push	 edx
  01262	8b 45 a0	 mov	 eax, DWORD PTR _i$10[ebp]
  01265	33 d2		 xor	 edx, edx
  01267	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0126c	f7 f1		 div	 ecx
  0126e	c1 e2 08	 shl	 edx, 8
  01271	81 c2 00 00 00
	00		 add	 edx, OFFSET _netcmds
  01277	52		 push	 edx
  01278	e8 00 00 00 00	 call	 _G_ScpyTiccmd
  0127d	83 c4 0c	 add	 esp, 12			; 0000000cH
  01280	89 45 ec	 mov	 DWORD PTR _pak$[ebp], eax

; 3048 : 							netbuffer->u.serverpak.numslots*sizeof (ticcmd_t));
; 3049 : 
; 3050 : 						// copy the textcmds
; 3051 : 						numtxtpak = *txtpak++;

  01283	8b 45 e8	 mov	 eax, DWORD PTR _txtpak$[ebp]
  01286	8a 08		 mov	 cl, BYTE PTR [eax]
  01288	88 4d e7	 mov	 BYTE PTR _numtxtpak$[ebp], cl
  0128b	8b 55 e8	 mov	 edx, DWORD PTR _txtpak$[ebp]
  0128e	83 c2 01	 add	 edx, 1
  01291	89 55 e8	 mov	 DWORD PTR _txtpak$[ebp], edx

; 3052 : 						for (j = 0; j < numtxtpak; j++)

  01294	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _j$9[ebp], 0
  0129b	eb 09		 jmp	 SHORT $LN18@GetPackets
$LN16@GetPackets:
  0129d	8b 45 9c	 mov	 eax, DWORD PTR _j$9[ebp]
  012a0	83 c0 01	 add	 eax, 1
  012a3	89 45 9c	 mov	 DWORD PTR _j$9[ebp], eax
$LN18@GetPackets:
  012a6	0f b6 45 e7	 movzx	 eax, BYTE PTR _numtxtpak$[ebp]
  012aa	39 45 9c	 cmp	 DWORD PTR _j$9[ebp], eax
  012ad	73 60		 jae	 SHORT $LN17@GetPackets

; 3053 : 						{
; 3054 : 							INT32 k = *txtpak++; // playernum

  012af	8b 45 e8	 mov	 eax, DWORD PTR _txtpak$[ebp]
  012b2	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  012b5	89 4d 98	 mov	 DWORD PTR _k$8[ebp], ecx
  012b8	8b 55 e8	 mov	 edx, DWORD PTR _txtpak$[ebp]
  012bb	83 c2 01	 add	 edx, 1
  012be	89 55 e8	 mov	 DWORD PTR _txtpak$[ebp], edx

; 3055 : 							const size_t txtsize = txtpak[0]+1;

  012c1	b8 01 00 00 00	 mov	 eax, 1
  012c6	6b c8 00	 imul	 ecx, eax, 0
  012c9	8b 55 e8	 mov	 edx, DWORD PTR _txtpak$[ebp]
  012cc	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  012d0	83 c0 01	 add	 eax, 1
  012d3	89 45 94	 mov	 DWORD PTR _txtsize$7[ebp], eax

; 3056 : 
; 3057 : 							M_Memcpy(textcmds[i%BACKUPTICS][k], txtpak, txtsize);

  012d6	8b 45 94	 mov	 eax, DWORD PTR _txtsize$7[ebp]
  012d9	50		 push	 eax
  012da	8b 4d e8	 mov	 ecx, DWORD PTR _txtpak$[ebp]
  012dd	51		 push	 ecx
  012de	8b 45 a0	 mov	 eax, DWORD PTR _i$10[ebp]
  012e1	33 d2		 xor	 edx, edx
  012e3	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  012e8	f7 f1		 div	 ecx
  012ea	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  012ed	8b 45 98	 mov	 eax, DWORD PTR _k$8[ebp]
  012f0	c1 e0 08	 shl	 eax, 8
  012f3	8d 8c 02 00 00
	00 00		 lea	 ecx, DWORD PTR _textcmds[edx+eax]
  012fa	51		 push	 ecx
  012fb	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  01301	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3058 : 							txtpak += txtsize;

  01304	8b 45 e8	 mov	 eax, DWORD PTR _txtpak$[ebp]
  01307	03 45 94	 add	 eax, DWORD PTR _txtsize$7[ebp]
  0130a	89 45 e8	 mov	 DWORD PTR _txtpak$[ebp], eax

; 3059 : 						}

  0130d	eb 8e		 jmp	 SHORT $LN16@GetPackets
$LN17@GetPackets:

; 3060 : 					}

  0130f	e9 1c ff ff ff	 jmp	 $LN13@GetPackets
$LN14@GetPackets:

; 3061 : 
; 3062 : 					neededtic = realend;

  01314	8b 45 f4	 mov	 eax, DWORD PTR _realend$[ebp]
  01317	a3 00 00 00 00	 mov	 DWORD PTR _neededtic, eax

; 3063 : 				}

  0131c	eb 3a		 jmp	 SHORT $LN130@GetPackets
$LN128@GetPackets:

; 3064 : 				else
; 3065 : 					DEBFILE(va("frame not in bound: %u\n", neededtic));

  0131e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  01325	74 31		 je	 SHORT $LN130@GetPackets
  01327	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0132c	50		 push	 eax
  0132d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _neededtic
  01333	51		 push	 ecx
  01334	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BGJEHOIL@frame?5not?5in?5bound?3?5?$CFu?6@
  01339	e8 00 00 00 00	 call	 _va
  0133e	83 c4 08	 add	 esp, 8
  01341	50		 push	 eax
  01342	e8 00 00 00 00	 call	 _fputs
  01347	83 c4 08	 add	 esp, 8
  0134a	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0134f	50		 push	 eax
  01350	e8 00 00 00 00	 call	 _fflush
  01355	83 c4 04	 add	 esp, 4
$LN130@GetPackets:

; 3066 : 				break;

  01358	e9 ee 01 00 00	 jmp	 $LN9@GetPackets
$LN131@GetPackets:

; 3067 : 			case PT_CONSISTENCY:
; 3068 : 				// Only accept PT_CONSISTENCY from the server.
; 3069 : 				if (node != servernode)

  0135d	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  01361	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  01368	3b c1		 cmp	 eax, ecx
  0136a	0f 84 84 00 00
	00		 je	 $LN132@GetPackets

; 3070 : 				{
; 3071 : 					DEBFILE(va("PT_CONSISTENCY recieved from non-host %d\n", node));

  01370	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  01377	74 2f		 je	 SHORT $LN133@GetPackets
  01379	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0137e	50		 push	 eax
  0137f	0f be 4d fb	 movsx	 ecx, BYTE PTR _node$[ebp]
  01383	51		 push	 ecx
  01384	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PKBIAOEL@PT_CONSISTENCY?5recieved?5from?5no@
  01389	e8 00 00 00 00	 call	 _va
  0138e	83 c4 08	 add	 esp, 8
  01391	50		 push	 eax
  01392	e8 00 00 00 00	 call	 _fputs
  01397	83 c4 08	 add	 esp, 8
  0139a	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0139f	50		 push	 eax
  013a0	e8 00 00 00 00	 call	 _fflush
  013a5	83 c4 04	 add	 esp, 4
$LN133@GetPackets:

; 3072 : 
; 3073 : 					if (server)

  013a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  013af	74 3e		 je	 SHORT $LN134@GetPackets

; 3074 : 					{
; 3075 : 						XBOXSTATIC char buf[2];
; 3076 : 						CONS_Printf("PT_CONSISTENCY recieved from non-host %d\n", node);

  013b1	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  013b5	50		 push	 eax
  013b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PKBIAOEL@PT_CONSISTENCY?5recieved?5from?5no@
  013bb	e8 00 00 00 00	 call	 _CONS_Printf
  013c0	83 c4 08	 add	 esp, 8

; 3077 : 
; 3078 : 						buf[0] = (char)node;

  013c3	b8 01 00 00 00	 mov	 eax, 1
  013c8	6b c8 00	 imul	 ecx, eax, 0
  013cb	8a 55 fb	 mov	 dl, BYTE PTR _node$[ebp]
  013ce	88 54 0d 90	 mov	 BYTE PTR _buf$6[ebp+ecx], dl

; 3079 : 						buf[1] = KICK_MSG_CON_FAIL;

  013d2	b8 01 00 00 00	 mov	 eax, 1
  013d7	c1 e0 00	 shl	 eax, 0
  013da	c6 44 05 90 02	 mov	 BYTE PTR _buf$6[ebp+eax], 2

; 3080 : 						SendNetXCmd(XD_KICK, &buf, 2);

  013df	6a 02		 push	 2
  013e1	8d 45 90	 lea	 eax, DWORD PTR _buf$6[ebp]
  013e4	50		 push	 eax
  013e5	6a 03		 push	 3
  013e7	e8 00 00 00 00	 call	 _SendNetXCmd
  013ec	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN134@GetPackets:

; 3081 : 					}
; 3082 : 
; 3083 : 					break;

  013ef	e9 57 01 00 00	 jmp	 $LN9@GetPackets
$LN132@GetPackets:

; 3084 : 				}
; 3085 : 
; 3086 : 				readconplayer(&netbuffer->u.consistency, netbuffer->u.consistency.playernum);

  013f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  013f9	0f b6 48 27	 movzx	 ecx, BYTE PTR [eax+39]
  013fd	51		 push	 ecx
  013fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  01404	83 c2 08	 add	 edx, 8
  01407	52		 push	 edx
  01408	e8 00 00 00 00	 call	 _readconplayer
  0140d	83 c4 08	 add	 esp, 8

; 3087 : 
; 3088 : 				break;

  01410	e9 36 01 00 00	 jmp	 $LN9@GetPackets
$LN135@GetPackets:

; 3089 : #ifdef NEWPING
; 3090 : 			case PT_PING:
; 3091 : 				// Only accept PT_PING from the server.
; 3092 : 				if (node != servernode)

  01415	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  01419	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _servernode
  01420	3b c1		 cmp	 eax, ecx
  01422	0f 84 84 00 00
	00		 je	 $LN136@GetPackets

; 3093 : 				{
; 3094 : 					DEBFILE(va("PT_PING recieved from non-host %d\n", node));

  01428	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0142f	74 2f		 je	 SHORT $LN137@GetPackets
  01431	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  01436	50		 push	 eax
  01437	0f be 4d fb	 movsx	 ecx, BYTE PTR _node$[ebp]
  0143b	51		 push	 ecx
  0143c	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FEMPHDPG@PT_PING?5recieved?5from?5non?9host?5@
  01441	e8 00 00 00 00	 call	 _va
  01446	83 c4 08	 add	 esp, 8
  01449	50		 push	 eax
  0144a	e8 00 00 00 00	 call	 _fputs
  0144f	83 c4 08	 add	 esp, 8
  01452	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  01457	50		 push	 eax
  01458	e8 00 00 00 00	 call	 _fflush
  0145d	83 c4 04	 add	 esp, 4
$LN137@GetPackets:

; 3095 : 
; 3096 : 					if (server)

  01460	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  01467	74 3e		 je	 SHORT $LN138@GetPackets

; 3097 : 					{
; 3098 : 						XBOXSTATIC char buf[2];
; 3099 : 						CONS_Printf("PT_PING recieved from non-host %d\n", node);

  01469	0f be 45 fb	 movsx	 eax, BYTE PTR _node$[ebp]
  0146d	50		 push	 eax
  0146e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FEMPHDPG@PT_PING?5recieved?5from?5non?9host?5@
  01473	e8 00 00 00 00	 call	 _CONS_Printf
  01478	83 c4 08	 add	 esp, 8

; 3100 : 
; 3101 : 						buf[0] = (char)node;

  0147b	b8 01 00 00 00	 mov	 eax, 1
  01480	6b c8 00	 imul	 ecx, eax, 0
  01483	8a 55 fb	 mov	 dl, BYTE PTR _node$[ebp]
  01486	88 54 0d 8c	 mov	 BYTE PTR _buf$5[ebp+ecx], dl

; 3102 : 						buf[1] = KICK_MSG_CON_FAIL;

  0148a	b8 01 00 00 00	 mov	 eax, 1
  0148f	c1 e0 00	 shl	 eax, 0
  01492	c6 44 05 8c 02	 mov	 BYTE PTR _buf$5[ebp+eax], 2

; 3103 : 						SendNetXCmd(XD_KICK, &buf, 2);

  01497	6a 02		 push	 2
  01499	8d 45 8c	 lea	 eax, DWORD PTR _buf$5[ebp]
  0149c	50		 push	 eax
  0149d	6a 03		 push	 3
  0149f	e8 00 00 00 00	 call	 _SendNetXCmd
  014a4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN138@GetPackets:

; 3104 : 					}
; 3105 : 
; 3106 : 					break;

  014a7	e9 9f 00 00 00	 jmp	 $LN9@GetPackets
$LN136@GetPackets:

; 3107 : 				}
; 3108 : 
; 3109 : 				//Update client ping table from the server.
; 3110 : 				if (!server)

  014ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  014b3	75 3e		 jne	 SHORT $LN20@GetPackets

; 3111 : 				{
; 3112 : 					INT32 i;
; 3113 : 					for (i = 0; i < MAXNETNODES; i++)

  014b5	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  014bc	eb 09		 jmp	 SHORT $LN21@GetPackets
$LN19@GetPackets:
  014be	8b 45 88	 mov	 eax, DWORD PTR _i$4[ebp]
  014c1	83 c0 01	 add	 eax, 1
  014c4	89 45 88	 mov	 DWORD PTR _i$4[ebp], eax
$LN21@GetPackets:
  014c7	83 7d 88 20	 cmp	 DWORD PTR _i$4[ebp], 32	; 00000020H
  014cb	7d 26		 jge	 SHORT $LN20@GetPackets

; 3114 : 						if (playeringame[i])

  014cd	8b 45 88	 mov	 eax, DWORD PTR _i$4[ebp]
  014d0	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  014d8	74 17		 je	 SHORT $LN140@GetPackets

; 3115 : 							playerpingtable[i] = (tic_t)netbuffer->u.pingtable[i];

  014da	8b 45 88	 mov	 eax, DWORD PTR _i$4[ebp]
  014dd	8b 4d 88	 mov	 ecx, DWORD PTR _i$4[ebp]
  014e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  014e6	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  014ea	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _playerpingtable[eax*4], ecx
$LN140@GetPackets:
  014f1	eb cb		 jmp	 SHORT $LN19@GetPackets
$LN20@GetPackets:

; 3116 : 				}
; 3117 : 
; 3118 : 				break;

  014f3	eb 56		 jmp	 SHORT $LN9@GetPackets
$LN141@GetPackets:

; 3119 : #endif
; 3120 : 			case PT_SERVERCFG:
; 3121 : 				break;

  014f5	eb 54		 jmp	 SHORT $LN9@GetPackets
$LN142@GetPackets:

; 3122 : 			case PT_FILEFRAGMENT:
; 3123 : 				if (!server)

  014f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  014fe	75 06		 jne	 SHORT $LN143@GetPackets

; 3124 : 					Got_Filetxpak();

  01500	e8 00 00 00 00	 call	 _Got_Filetxpak
  01505	90		 npad	 1
$LN143@GetPackets:

; 3125 : 				break;

  01506	eb 43		 jmp	 SHORT $LN9@GetPackets
$LN144@GetPackets:

; 3126 : 			default:
; 3127 : 				DEBFILE(va("UNKNOWN PACKET TYPE RECEIVED %d from host %d\n",

  01508	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0150f	74 3a		 je	 SHORT $LN145@GetPackets
  01511	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  01516	50		 push	 eax
  01517	0f be 4d fb	 movsx	 ecx, BYTE PTR _node$[ebp]
  0151b	51		 push	 ecx
  0151c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _netbuffer
  01522	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  01526	50		 push	 eax
  01527	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IGIFMBDC@UNKNOWN?5PACKET?5TYPE?5RECEIVED?5?$CFd@
  0152c	e8 00 00 00 00	 call	 _va
  01531	83 c4 0c	 add	 esp, 12			; 0000000cH
  01534	50		 push	 eax
  01535	e8 00 00 00 00	 call	 _fputs
  0153a	83 c4 08	 add	 esp, 8
  0153d	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  01542	50		 push	 eax
  01543	e8 00 00 00 00	 call	 _fflush
  01548	83 c4 04	 add	 esp, 4
$LN145@GetPackets:
$LN9@GetPackets:

; 3128 : 					netbuffer->packettype, node));
; 3129 : 		} // end switch
; 3130 : 	} // end while

  0154b	e9 cd ea ff ff	 jmp	 $LN163@GetPackets
$LN3@GetPackets:

; 3131 : }

  01550	5f		 pop	 edi
  01551	5e		 pop	 esi
  01552	5b		 pop	 ebx
  01553	8b e5		 mov	 esp, ebp
  01555	5d		 pop	 ebp
  01556	c3		 ret	 0
  01557	90		 npad	 1
$LN165@GetPackets:
  01558	00 00 00 00	 DD	 $LN57@GetPackets
  0155c	00 00 00 00	 DD	 $LN73@GetPackets
  01560	00 00 00 00	 DD	 $LN72@GetPackets
  01564	00 00 00 00	 DD	 $LN55@GetPackets
  01568	00 00 00 00	 DD	 $LN69@GetPackets
  0156c	00 00 00 00	 DD	 $LN53@GetPackets
  01570	00 00 00 00	 DD	 $LN67@GetPackets
  01574	00 00 00 00	 DD	 $LN51@GetPackets
  01578	00 00 00 00	 DD	 $LN65@GetPackets
  0157c	00 00 00 00	 DD	 $LN75@GetPackets
$LN164@GetPackets:
  01580	00		 DB	 0
  01581	01		 DB	 1
  01582	09		 DB	 9
  01583	09		 DB	 9
  01584	09		 DB	 9
  01585	09		 DB	 9
  01586	09		 DB	 9
  01587	02		 DB	 2
  01588	03		 DB	 3
  01589	09		 DB	 9
  0158a	04		 DB	 4
  0158b	05		 DB	 5
  0158c	09		 DB	 9
  0158d	09		 DB	 9
  0158e	06		 DB	 6
  0158f	07		 DB	 7
  01590	08		 DB	 8
  01591	09		 DB	 9
  01592	09		 DB	 9
  01593	09		 DB	 9
  01594	04		 DB	 4
  01595	0f 1f 00	 npad	 3
$LN166@GetPackets:
  01598	00 00 00 00	 DD	 $LN141@GetPackets
  0159c	00 00 00 00	 DD	 $LN79@GetPackets
  015a0	00 00 00 00	 DD	 $LN79@GetPackets
  015a4	00 00 00 00	 DD	 $LN79@GetPackets
  015a8	00 00 00 00	 DD	 $LN79@GetPackets
  015ac	00 00 00 00	 DD	 $LN79@GetPackets
  015b0	00 00 00 00	 DD	 $LN79@GetPackets
  015b4	00 00 00 00	 DD	 $LN123@GetPackets
  015b8	00 00 00 00	 DD	 $LN144@GetPackets
  015bc	00 00 00 00	 DD	 $LN144@GetPackets
  015c0	00 00 00 00	 DD	 $LN116@GetPackets
  015c4	00 00 00 00	 DD	 $LN144@GetPackets
  015c8	00 00 00 00	 DD	 $LN144@GetPackets
  015cc	00 00 00 00	 DD	 $LN144@GetPackets
  015d0	00 00 00 00	 DD	 $LN144@GetPackets
  015d4	00 00 00 00	 DD	 $LN144@GetPackets
  015d8	00 00 00 00	 DD	 $LN142@GetPackets
  015dc	00 00 00 00	 DD	 $LN107@GetPackets
  015e0	00 00 00 00	 DD	 $LN106@GetPackets
  015e4	00 00 00 00	 DD	 $LN144@GetPackets
  015e8	00 00 00 00	 DD	 $LN116@GetPackets
  015ec	00 00 00 00	 DD	 $LN131@GetPackets
  015f0	00 00 00 00	 DD	 $LN135@GetPackets
_GetPackets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Consistancy
_TEXT	SEGMENT
_i$ = -8						; size = 4
_ret$ = -4						; size = 2
_Consistancy PROC					; COMDAT

; 3142 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3143 : 	INT16 ret = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	66 89 45 fc	 mov	 WORD PTR _ret$[ebp], ax

; 3144 : 	INT32 i;
; 3145 : 
; 3146 : 	DEBFILE(va("TIC %u ", gametic));

  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00016	74 31		 je	 SHORT $LN5@Consistanc
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0001d	50		 push	 eax
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  00024	51		 push	 ecx
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_07ICHNGLND@TIC?5?$CFu?5@
  0002a	e8 00 00 00 00	 call	 _va
  0002f	83 c4 08	 add	 esp, 8
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _fputs
  00038	83 c4 08	 add	 esp, 8
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _fflush
  00046	83 c4 04	 add	 esp, 4
$LN5@Consistanc:

; 3147 : 	for (i = 0; i < MAXPLAYERS; i++)

  00049	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00050	eb 09		 jmp	 SHORT $LN4@Consistanc
$LN2@Consistanc:
  00052	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Consistanc:
  0005b	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0005f	0f 8d a0 00 00
	00		 jge	 $LN3@Consistanc

; 3148 : 		if (playeringame[i] && players[i].mo)

  00065	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00068	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00070	0f 84 8a 00 00
	00		 je	 $LN6@Consistanc
  00076	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0007d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00084	74 7a		 je	 SHORT $LN6@Consistanc

; 3149 : 		{
; 3150 : 			DEBFILE(va("p[%d].x = %f ", i, (double)FIXED_TO_FLOAT(players[i].mo->x)));

  00086	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0008d	74 54		 je	 SHORT $LN7@Consistanc
  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00094	50		 push	 eax
  00095	69 4d f8 fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  0009c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  000a2	f3 0f 2a 42 10	 cvtsi2ss xmm0, DWORD PTR [edx+16]
  000a7	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  000af	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000b3	83 ec 08	 sub	 esp, 8
  000b6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000bb	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000be	50		 push	 eax
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MLDBOEMG@p?$FL?$CFd?$FN?4x?5?$DN?5?$CFf?5@
  000c4	e8 00 00 00 00	 call	 _va
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _fputs
  000d2	83 c4 08	 add	 esp, 8
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _fflush
  000e0	83 c4 04	 add	 esp, 4
$LN7@Consistanc:

; 3151 : 			ret = (INT16)((ret + players[i].mo->x) & 0xFFFF);

  000e3	0f bf 45 fc	 movsx	 eax, WORD PTR _ret$[ebp]
  000e7	69 4d f8 fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  000ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  000f4	03 42 10	 add	 eax, DWORD PTR [edx+16]
  000f7	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fc	66 89 45 fc	 mov	 WORD PTR _ret$[ebp], ax
$LN6@Consistanc:

; 3152 : 		}

  00100	e9 4d ff ff ff	 jmp	 $LN2@Consistanc
$LN3@Consistanc:

; 3153 : 	DEBFILE(va("pos = %d, rnd %d\n", ret, P_GetRandIndex()));

  00105	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0010c	74 38		 je	 SHORT $LN8@Consistanc
  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 _P_GetRandIndex
  00119	0f b6 c8	 movzx	 ecx, al
  0011c	51		 push	 ecx
  0011d	0f bf 55 fc	 movsx	 edx, WORD PTR _ret$[ebp]
  00121	52		 push	 edx
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MHFILJIG@pos?5?$DN?5?$CFd?0?5rnd?5?$CFd?6@
  00127	e8 00 00 00 00	 call	 _va
  0012c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 _fputs
  00135	83 c4 08	 add	 esp, 8
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 _fflush
  00143	83 c4 04	 add	 esp, 4
$LN8@Consistanc:

; 3154 : 	ret = (INT16)(ret + P_GetRandIndex());

  00146	0f bf 75 fc	 movsx	 esi, WORD PTR _ret$[ebp]
  0014a	e8 00 00 00 00	 call	 _P_GetRandIndex
  0014f	0f b6 c0	 movzx	 eax, al
  00152	03 f0		 add	 esi, eax
  00154	66 89 75 fc	 mov	 WORD PTR _ret$[ebp], si

; 3155 : 
; 3156 : 	return ret;

  00158	0f b7 45 fc	 movzx	 eax, WORD PTR _ret$[ebp]

; 3157 : }

  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
_Consistancy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _D_Clearticcmd
_TEXT	SEGMENT
_i$ = -4						; size = 4
_tic$ = 8						; size = 4
_D_Clearticcmd PROC					; COMDAT

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 284  : 	INT32 i;
; 285  : 
; 286  : 	for (i = 0; i < MAXPLAYERS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@D_Cleartic
$LN2@D_Cleartic:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@D_Cleartic:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0001f	7d 46		 jge	 SHORT $LN3@D_Cleartic

; 287  : 	{
; 288  : 		textcmds[tic%BACKUPTICS][i][0] = 0;

  00021	8b 45 08	 mov	 eax, DWORD PTR _tic$[ebp]
  00024	33 d2		 xor	 edx, edx
  00026	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002b	f7 f1		 div	 ecx
  0002d	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  00030	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00033	c1 e0 08	 shl	 eax, 8
  00036	8d 8c 02 00 00
	00 00		 lea	 ecx, DWORD PTR _textcmds[edx+eax]
  0003d	ba 01 00 00 00	 mov	 edx, 1
  00042	6b c2 00	 imul	 eax, edx, 0
  00045	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 289  : 		netcmds[tic%BACKUPTICS][i].angleturn = 0;

  00049	8b 45 08	 mov	 eax, DWORD PTR _tic$[ebp]
  0004c	33 d2		 xor	 edx, edx
  0004e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00053	f7 f1		 div	 ecx
  00055	c1 e2 08	 shl	 edx, 8
  00058	33 c0		 xor	 eax, eax
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005d	66 89 84 ca 02
	00 00 00	 mov	 WORD PTR _netcmds[edx+ecx*8+2], ax

; 290  : 	}

  00065	eb ab		 jmp	 SHORT $LN2@D_Cleartic
$LN3@D_Cleartic:

; 291  : 	DEBFILE(va("clear tic %5u (%2u)\n", tic, tic%BACKUPTICS));

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0006e	74 3b		 je	 SHORT $LN5@D_Cleartic
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00075	50		 push	 eax
  00076	8b 45 08	 mov	 eax, DWORD PTR _tic$[ebp]
  00079	33 d2		 xor	 edx, edx
  0007b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00080	f7 f1		 div	 ecx
  00082	52		 push	 edx
  00083	8b 55 08	 mov	 edx, DWORD PTR _tic$[ebp]
  00086	52		 push	 edx
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HOGGLAIO@clear?5tic?5?$CF5u?5?$CI?$CF2u?$CJ?6@
  0008c	e8 00 00 00 00	 call	 _va
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _fputs
  0009a	83 c4 08	 add	 esp, 8
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _fflush
  000a8	83 c4 04	 add	 esp, 4
$LN5@D_Cleartic:

; 292  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_D_Clearticcmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _ExtraDataTicker
_TEXT	SEGMENT
_buf$1 = -24						; size = 3
_id$2 = -17						; size = 1
_bufferend$ = -16					; size = 4
_curpos$ = -12						; size = 4
_tic$ = -8						; size = 4
_i$ = -4						; size = 4
_ExtraDataTicker PROC					; COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 243  : 	INT32 i, tic;
; 244  : 	UINT8 *curpos, *bufferend;
; 245  : 
; 246  : 	tic = gametic % BACKUPTICS;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  0000e	33 d2		 xor	 edx, edx
  00010	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00015	f7 f1		 div	 ecx
  00017	89 55 f8	 mov	 DWORD PTR _tic$[ebp], edx

; 247  : 
; 248  : 	for (i = 0; i < MAXPLAYERS; i++)

  0001a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00021	eb 09		 jmp	 SHORT $LN4@ExtraDataT
$LN2@ExtraDataT:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00026	83 c0 01	 add	 eax, 1
  00029	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@ExtraDataT:
  0002c	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00030	0f 8d e8 01 00
	00		 jge	 $LN3@ExtraDataT

; 249  : 		if (playeringame[i] || i == 0)

  00036	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00039	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00041	75 0a		 jne	 SHORT $LN8@ExtraDataT
  00043	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00047	0f 85 cc 01 00
	00		 jne	 $LN6@ExtraDataT
$LN8@ExtraDataT:

; 250  : 		{
; 251  : 			curpos = (UINT8 *)&(textcmds[tic][i]);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _tic$[ebp]
  00050	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00056	c1 e1 08	 shl	 ecx, 8
  00059	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  00060	89 55 f4	 mov	 DWORD PTR _curpos$[ebp], edx

; 252  : 			bufferend = &curpos[curpos[0]+1];

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	6b c8 00	 imul	 ecx, eax, 0
  0006b	8b 55 f4	 mov	 edx, DWORD PTR _curpos$[ebp]
  0006e	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00072	8b 4d f4	 mov	 ecx, DWORD PTR _curpos$[ebp]
  00075	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00079	89 55 f0	 mov	 DWORD PTR _bufferend$[ebp], edx

; 253  : 			curpos++;

  0007c	8b 45 f4	 mov	 eax, DWORD PTR _curpos$[ebp]
  0007f	83 c0 01	 add	 eax, 1
  00082	89 45 f4	 mov	 DWORD PTR _curpos$[ebp], eax
$LN5@ExtraDataT:

; 254  : 			while (curpos < bufferend)

  00085	8b 45 f4	 mov	 eax, DWORD PTR _curpos$[ebp]
  00088	3b 45 f0	 cmp	 eax, DWORD PTR _bufferend$[ebp]
  0008b	0f 83 88 01 00
	00		 jae	 $LN6@ExtraDataT

; 255  : 			{
; 256  : 				if (*curpos < MAXNETXCMD && listnetxcmd[*curpos])

  00091	8b 45 f4	 mov	 eax, DWORD PTR _curpos$[ebp]
  00094	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00097	83 f9 15	 cmp	 ecx, 21			; 00000015H
  0009a	0f 8d a8 00 00
	00		 jge	 $LN9@ExtraDataT
  000a0	8b 45 f4	 mov	 eax, DWORD PTR _curpos$[ebp]
  000a3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000a6	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR _listnetxcmd[ecx*4], 0
  000ae	0f 84 94 00 00
	00		 je	 $LN9@ExtraDataT

; 257  : 				{
; 258  : 					const UINT8 id = *curpos;

  000b4	8b 45 f4	 mov	 eax, DWORD PTR _curpos$[ebp]
  000b7	8a 08		 mov	 cl, BYTE PTR [eax]
  000b9	88 4d ef	 mov	 BYTE PTR _id$2[ebp], cl

; 259  : 					curpos++;

  000bc	8b 45 f4	 mov	 eax, DWORD PTR _curpos$[ebp]
  000bf	83 c0 01	 add	 eax, 1
  000c2	89 45 f4	 mov	 DWORD PTR _curpos$[ebp], eax

; 260  : 					DEBFILE(va("executing x_cmd %u ply %u ", id, i));

  000c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  000cc	74 33		 je	 SHORT $LN11@ExtraDataT
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  000d3	50		 push	 eax
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000d7	51		 push	 ecx
  000d8	0f b6 55 ef	 movzx	 edx, BYTE PTR _id$2[ebp]
  000dc	52		 push	 edx
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GOABAMBE@executing?5x_cmd?5?$CFu?5ply?5?$CFu?5@
  000e2	e8 00 00 00 00	 call	 _va
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 _fputs
  000f0	83 c4 08	 add	 esp, 8
  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _fflush
  000fe	83 c4 04	 add	 esp, 4
$LN11@ExtraDataT:

; 261  : 					(listnetxcmd[id])(&curpos, i);

  00101	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00104	50		 push	 eax
  00105	8d 4d f4	 lea	 ecx, DWORD PTR _curpos$[ebp]
  00108	51		 push	 ecx
  00109	0f b6 55 ef	 movzx	 edx, BYTE PTR _id$2[ebp]
  0010d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _listnetxcmd[edx*4]
  00114	ff d0		 call	 eax
  00116	83 c4 08	 add	 esp, 8

; 262  : 					DEBFILE("done\n");

  00119	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00120	74 21		 je	 SHORT $LN12@ExtraDataT
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00127	50		 push	 eax
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_05KJDAJCPN@done?6@
  0012d	e8 00 00 00 00	 call	 _fputs
  00132	83 c4 08	 add	 esp, 8
  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 _fflush
  00140	83 c4 04	 add	 esp, 4
$LN12@ExtraDataT:

; 263  : 				}

  00143	e9 cc 00 00 00	 jmp	 $LN10@ExtraDataT
$LN9@ExtraDataT:

; 264  : 				else
; 265  : 				{
; 266  : 					if (server)

  00148	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0014f	74 6a		 je	 SHORT $LN14@ExtraDataT

; 267  : 					{
; 268  : 						XBOXSTATIC UINT8 buf[3];
; 269  : 
; 270  : 						buf[0] = (UINT8)i;

  00151	b8 01 00 00 00	 mov	 eax, 1
  00156	6b c8 00	 imul	 ecx, eax, 0
  00159	8a 55 fc	 mov	 dl, BYTE PTR _i$[ebp]
  0015c	88 54 0d e8	 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 271  : 						buf[1] = KICK_MSG_CON_FAIL;

  00160	b8 01 00 00 00	 mov	 eax, 1
  00165	c1 e0 00	 shl	 eax, 0
  00168	c6 44 05 e8 02	 mov	 BYTE PTR _buf$1[ebp+eax], 2

; 272  : 						SendNetXCmd(XD_KICK, &buf, 2);

  0016d	6a 02		 push	 2
  0016f	8d 45 e8	 lea	 eax, DWORD PTR _buf$1[ebp]
  00172	50		 push	 eax
  00173	6a 03		 push	 3
  00175	e8 00 00 00 00	 call	 _SendNetXCmd
  0017a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 273  : 						DEBFILE(va("player %d kicked [gametic=%u] reason as follows:\n", i, gametic));

  0017d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00184	74 35		 je	 SHORT $LN14@ExtraDataT
  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0018b	50		 push	 eax
  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  00192	51		 push	 ecx
  00193	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00196	52		 push	 edx
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KNFFNOEP@player?5?$CFd?5kicked?5?$FLgametic?$DN?$CFu?$FN?5r@
  0019c	e8 00 00 00 00	 call	 _va
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 _fputs
  001aa	83 c4 08	 add	 esp, 8
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 _fflush
  001b8	83 c4 04	 add	 esp, 4
$LN14@ExtraDataT:

; 274  : 					}
; 275  : 					CONS_Printf(text[UNKNOWNNETCMD], curpos - (UINT8 *)&(textcmds[tic][i]), *curpos, textcmds[tic][i][0]);

  001bb	8b 45 f8	 mov	 eax, DWORD PTR _tic$[ebp]
  001be	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  001c1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001c4	c1 e1 08	 shl	 ecx, 8
  001c7	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  001ce	b8 01 00 00 00	 mov	 eax, 1
  001d3	6b c8 00	 imul	 ecx, eax, 0
  001d6	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  001da	52		 push	 edx
  001db	8b 45 f4	 mov	 eax, DWORD PTR _curpos$[ebp]
  001de	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001e1	51		 push	 ecx
  001e2	8b 55 f8	 mov	 edx, DWORD PTR _tic$[ebp]
  001e5	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  001e8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001eb	c1 e0 08	 shl	 eax, 8
  001ee	8d 8c 02 00 00
	00 00		 lea	 ecx, DWORD PTR _textcmds[edx+eax]
  001f5	8b 55 f4	 mov	 edx, DWORD PTR _curpos$[ebp]
  001f8	2b d1		 sub	 edx, ecx
  001fa	52		 push	 edx
  001fb	b8 04 00 00 00	 mov	 eax, 4
  00200	6b c8 12	 imul	 ecx, eax, 18
  00203	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00209	52		 push	 edx
  0020a	e8 00 00 00 00	 call	 _CONS_Printf
  0020f	83 c4 10	 add	 esp, 16			; 00000010H

; 276  : 					return;

  00212	eb 0a		 jmp	 SHORT $LN3@ExtraDataT
$LN10@ExtraDataT:

; 277  : 				}
; 278  : 			}

  00214	e9 6c fe ff ff	 jmp	 $LN5@ExtraDataT
$LN6@ExtraDataT:

; 279  : 		}

  00219	e9 05 fe ff ff	 jmp	 $LN2@ExtraDataT
$LN3@ExtraDataT:

; 280  : }

  0021e	5f		 pop	 edi
  0021f	5e		 pop	 esi
  00220	5b		 pop	 ebx
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c3		 ret	 0
_ExtraDataTicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _G_ScpyTiccmd
_TEXT	SEGMENT
_ret$ = -12						; size = 4
_r$ = -8						; size = 4
_d$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_G_ScpyTiccmd PROC					; COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 	const size_t d = n / sizeof(ticcmd_t);

  00009	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  0000c	c1 e8 03	 shr	 eax, 3
  0000f	89 45 fc	 mov	 DWORD PTR _d$[ebp], eax

; 144  : 	const size_t r = n % sizeof(ticcmd_t);

  00012	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00015	33 d2		 xor	 edx, edx
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	f7 f1		 div	 ecx
  0001e	89 55 f8	 mov	 DWORD PTR _r$[ebp], edx

; 145  : 	UINT8 *ret = src;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  00024	89 45 f4	 mov	 DWORD PTR _ret$[ebp], eax

; 146  : 
; 147  : 	if (r)

  00027	83 7d f8 00	 cmp	 DWORD PTR _r$[ebp], 0
  0002b	74 17		 je	 SHORT $LN2@G_ScpyTicc

; 148  : 		M_Memcpy(dest, src, n);

  0002d	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00038	52		 push	 edx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	eb 1a		 jmp	 SHORT $LN4@G_ScpyTicc
$LN2@G_ScpyTicc:

; 149  : 	else if (d)

  00044	83 7d fc 00	 cmp	 DWORD PTR _d$[ebp], 0
  00048	74 14		 je	 SHORT $LN4@G_ScpyTicc

; 150  : 		G_MoveTiccmd(dest, src, d);

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _d$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 _G_MoveTiccmd
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@G_ScpyTicc:

; 151  : 	return ret+n;

  0005e	8b 45 f4	 mov	 eax, DWORD PTR _ret$[ebp]
  00061	03 45 10	 add	 eax, DWORD PTR _n$[ebp]

; 152  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_G_ScpyTiccmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _G_DcpyTiccmd
_TEXT	SEGMENT
_ret$ = -12						; size = 4
_r$ = -8						; size = 4
_d$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_G_DcpyTiccmd PROC					; COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 130  : 	const size_t d = n / sizeof(ticcmd_t);

  00009	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  0000c	c1 e8 03	 shr	 eax, 3
  0000f	89 45 fc	 mov	 DWORD PTR _d$[ebp], eax

; 131  : 	const size_t r = n % sizeof(ticcmd_t);

  00012	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00015	33 d2		 xor	 edx, edx
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	f7 f1		 div	 ecx
  0001e	89 55 f8	 mov	 DWORD PTR _r$[ebp], edx

; 132  : 	UINT8 *ret = dest;

  00021	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00024	89 45 f4	 mov	 DWORD PTR _ret$[ebp], eax

; 133  : 
; 134  : 	if (r)

  00027	83 7d f8 00	 cmp	 DWORD PTR _r$[ebp], 0
  0002b	74 17		 je	 SHORT $LN2@G_DcpyTicc

; 135  : 		M_Memcpy(dest, src, n);

  0002d	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00038	52		 push	 edx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	eb 1a		 jmp	 SHORT $LN4@G_DcpyTicc
$LN2@G_DcpyTicc:

; 136  : 	else if (d)

  00044	83 7d fc 00	 cmp	 DWORD PTR _d$[ebp], 0
  00048	74 14		 je	 SHORT $LN4@G_DcpyTicc

; 137  : 		G_MoveTiccmd(dest, src, d);

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _d$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 _G_MoveTiccmd
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@G_DcpyTicc:

; 138  : 	return ret+n;

  0005e	8b 45 f4	 mov	 eax, DWORD PTR _ret$[ebp]
  00061	03 45 10	 add	 eax, DWORD PTR _n$[ebp]

; 139  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_G_DcpyTiccmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _GetFreeXCmdSize
_TEXT	SEGMENT
_GetFreeXCmdSize PROC					; COMDAT

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 237  : 	// -1 for the size and another -1 for the ID.
; 238  : 	return (UINT8)(localtextcmd[0] - 2);

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR _localtextcmd[ecx]
  00018	83 e8 02	 sub	 eax, 2

; 239  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_GetFreeXCmdSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _GetLag
_TEXT	SEGMENT
_node$ = 8						; size = 4
_GetLag	PROC						; COMDAT

; 3627 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3628 : 	return gametic - nettics[node];

  00009	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  00012	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _nettics[eax*4]
  00019	8b c1		 mov	 eax, ecx

; 3629 : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_GetLag	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _D_ResetTiccmds
_TEXT	SEGMENT
_D_ResetTiccmds PROC					; COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 124  : 	memset(&localcmds, 0, sizeof(ticcmd_t));

  00009	6a 08		 push	 8
  0000b	6a 00		 push	 0
  0000d	68 00 00 00 00	 push	 OFFSET _localcmds
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 125  : 	memset(&localcmds2, 0, sizeof(ticcmd_t));

  0001a	6a 08		 push	 8
  0001c	6a 00		 push	 0
  0001e	68 00 00 00 00	 push	 OFFSET _localcmds2
  00023	e8 00 00 00 00	 call	 _memset
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 126  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_D_ResetTiccmds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _D_NumPlayers
_TEXT	SEGMENT
_ix$ = -8						; size = 4
_num$ = -4						; size = 4
_D_NumPlayers PROC					; COMDAT

; 3618 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3619 : 	INT32 num = 0, ix;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _num$[ebp], 0

; 3620 : 	for (ix = 0; ix < MAXPLAYERS; ix++)

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ix$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@D_NumPlaye
$LN2@D_NumPlaye:
  00019	8b 45 f8	 mov	 eax, DWORD PTR _ix$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 f8	 mov	 DWORD PTR _ix$[ebp], eax
$LN4@D_NumPlaye:
  00022	83 7d f8 20	 cmp	 DWORD PTR _ix$[ebp], 32	; 00000020H
  00026	7d 18		 jge	 SHORT $LN3@D_NumPlaye

; 3621 : 		if (playeringame[ix])

  00028	8b 45 f8	 mov	 eax, DWORD PTR _ix$[ebp]
  0002b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00033	74 09		 je	 SHORT $LN5@D_NumPlaye

; 3622 : 			num++;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _num$[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 fc	 mov	 DWORD PTR _num$[ebp], eax
$LN5@D_NumPlaye:
  0003e	eb d9		 jmp	 SHORT $LN2@D_NumPlaye
$LN3@D_NumPlaye:

; 3623 : 	return num;

  00040	8b 45 fc	 mov	 eax, DWORD PTR _num$[ebp]

; 3624 : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_D_NumPlayers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _nametonum
_TEXT	SEGMENT
_i$ = -8						; size = 4
_playernum$ = -4					; size = 4
_name$ = 8						; size = 4
_nametonum PROC						; COMDAT

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1474 : 	INT32 playernum, i;
; 1475 : 
; 1476 : 	if (!strcmp(name, "0"))

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _strcmp
  00017	83 c4 08	 add	 esp, 8
  0001a	85 c0		 test	 eax, eax
  0001c	75 07		 jne	 SHORT $LN5@nametonum

; 1477 : 		return 0;

  0001e	32 c0		 xor	 al, al
  00020	e9 a7 00 00 00	 jmp	 $LN1@nametonum
$LN5@nametonum:

; 1478 : 
; 1479 : 	playernum = (SINT8)atoi(name);

  00025	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _atoi
  0002e	83 c4 04	 add	 esp, 4
  00031	0f be c8	 movsx	 ecx, al
  00034	89 4d fc	 mov	 DWORD PTR _playernum$[ebp], ecx

; 1480 : 
; 1481 : 	if (playernum < 0 || playernum >= MAXPLAYERS)

  00037	83 7d fc 00	 cmp	 DWORD PTR _playernum$[ebp], 0
  0003b	7c 06		 jl	 SHORT $LN7@nametonum
  0003d	83 7d fc 20	 cmp	 DWORD PTR _playernum$[ebp], 32 ; 00000020H
  00041	7c 07		 jl	 SHORT $LN6@nametonum
$LN7@nametonum:

; 1482 : 		return -1;

  00043	0c ff		 or	 al, -1
  00045	e9 82 00 00 00	 jmp	 $LN1@nametonum
$LN6@nametonum:

; 1483 : 
; 1484 : 	if (playernum)

  0004a	83 7d fc 00	 cmp	 DWORD PTR _playernum$[ebp], 0
  0004e	74 18		 je	 SHORT $LN10@nametonum

; 1485 : 	{
; 1486 : 		if (playeringame[playernum])

  00050	8b 45 fc	 mov	 eax, DWORD PTR _playernum$[ebp]
  00053	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0005b	74 07		 je	 SHORT $LN9@nametonum

; 1487 : 			return (SINT8)playernum;

  0005d	8a 45 fc	 mov	 al, BYTE PTR _playernum$[ebp]
  00060	eb 6a		 jmp	 SHORT $LN1@nametonum
  00062	eb 04		 jmp	 SHORT $LN10@nametonum
$LN9@nametonum:

; 1488 : 		else
; 1489 : 			return -1;

  00064	0c ff		 or	 al, -1
  00066	eb 64		 jmp	 SHORT $LN1@nametonum
$LN10@nametonum:

; 1490 : 	}
; 1491 : 
; 1492 : 	for (i = 0; i < MAXPLAYERS; i++)

  00068	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006f	eb 09		 jmp	 SHORT $LN4@nametonum
$LN2@nametonum:
  00071	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00074	83 c0 01	 add	 eax, 1
  00077	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@nametonum:
  0007a	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0007e	7d 2f		 jge	 SHORT $LN3@nametonum

; 1493 : 		if (playeringame[i] && !stricmp(player_names[i], name))

  00080	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00083	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0008b	74 20		 je	 SHORT $LN11@nametonum
  0008d	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00090	50		 push	 eax
  00091	6b 4d f8 16	 imul	 ecx, DWORD PTR _i$[ebp], 22
  00095	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 _stricmp
  000a1	83 c4 08	 add	 esp, 8
  000a4	85 c0		 test	 eax, eax
  000a6	75 05		 jne	 SHORT $LN11@nametonum

; 1494 : 			return (SINT8)i;

  000a8	8a 45 f8	 mov	 al, BYTE PTR _i$[ebp]
  000ab	eb 1f		 jmp	 SHORT $LN1@nametonum
$LN11@nametonum:
  000ad	eb c2		 jmp	 SHORT $LN2@nametonum
$LN3@nametonum:

; 1495 : 
; 1496 : 	CONS_Printf(text[NOPLAYERNAMED], name);

  000af	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000b2	50		 push	 eax
  000b3	b9 04 00 00 00	 mov	 ecx, 4
  000b8	6b d1 30	 imul	 edx, ecx, 48
  000bb	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _CONS_Printf
  000c7	83 c4 08	 add	 esp, 8

; 1497 : 
; 1498 : 	return -1;

  000ca	0c ff		 or	 al, -1
$LN1@nametonum:

; 1499 : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
_nametonum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _ReadLmpExtraData
_TEXT	SEGMENT
_nextra$ = -1						; size = 1
_demo_pointer$ = 8					; size = 4
_playernum$ = 12					; size = 4
_ReadLmpExtraData PROC					; COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 334  : 	UINT8 nextra;
; 335  : 
; 336  : 	if (!demo_pointer)

  00009	83 7d 08 00	 cmp	 DWORD PTR _demo_pointer$[ebp], 0
  0000d	75 2c		 jne	 SHORT $LN2@ReadLmpExt

; 337  : 	{
; 338  : 		textcmds[gametic%BACKUPTICS][playernum][0] = 0;

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00014	33 d2		 xor	 edx, edx
  00016	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001b	f7 f1		 div	 ecx
  0001d	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  00020	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00023	c1 e0 08	 shl	 eax, 8
  00026	8d 8c 02 00 00
	00 00		 lea	 ecx, DWORD PTR _textcmds[edx+eax]
  0002d	ba 01 00 00 00	 mov	 edx, 1
  00032	6b c2 00	 imul	 eax, edx, 0
  00035	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 339  : 		return;

  00039	eb 52		 jmp	 SHORT $LN1@ReadLmpExt
$LN2@ReadLmpExt:

; 340  : 	}
; 341  : 	nextra = **demo_pointer;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _demo_pointer$[ebp]
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	8a 11		 mov	 dl, BYTE PTR [ecx]
  00042	88 55 ff	 mov	 BYTE PTR _nextra$[ebp], dl

; 342  : 	M_Memcpy(textcmds[gametic%BACKUPTICS][playernum], *demo_pointer, nextra + 1);

  00045	0f b6 45 ff	 movzx	 eax, BYTE PTR _nextra$[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _demo_pointer$[ebp]
  00050	8b 11		 mov	 edx, DWORD PTR [ecx]
  00052	52		 push	 edx
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00058	33 d2		 xor	 edx, edx
  0005a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0005f	f7 f1		 div	 ecx
  00061	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  00064	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00067	c1 e0 08	 shl	 eax, 8
  0006a	8d 8c 02 00 00
	00 00		 lea	 ecx, DWORD PTR _textcmds[edx+eax]
  00071	51		 push	 ecx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 343  : 	// increment demo pointer
; 344  : 	*demo_pointer += nextra + 1;

  0007b	0f b6 45 ff	 movzx	 eax, BYTE PTR _nextra$[ebp]
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _demo_pointer$[ebp]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	8d 44 10 01	 lea	 eax, DWORD PTR [eax+edx+1]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _demo_pointer$[ebp]
  0008b	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@ReadLmpExt:

; 345  : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_ReadLmpExtraData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _AddLmpExtradata
_TEXT	SEGMENT
_tic$ = -4						; size = 4
_demo_point$ = 8					; size = 4
_playernum$ = 12					; size = 4
_AddLmpExtradata PROC					; COMDAT

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 321  : 	INT32 tic;
; 322  : 
; 323  : 	tic = gametic % BACKUPTICS;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  0000e	33 d2		 xor	 edx, edx
  00010	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00015	f7 f1		 div	 ecx
  00017	89 55 fc	 mov	 DWORD PTR _tic$[ebp], edx

; 324  : 	if (textcmds[tic][playernum][0] == 0)

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _tic$[ebp]
  0001d	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _playernum$[ebp]
  00023	c1 e1 08	 shl	 ecx, 8
  00026	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	6b c8 00	 imul	 ecx, eax, 0
  00035	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00039	85 d2		 test	 edx, edx
  0003b	75 04		 jne	 SHORT $LN2@AddLmpExtr

; 325  : 		return false;

  0003d	33 c0		 xor	 eax, eax
  0003f	eb 78		 jmp	 SHORT $LN1@AddLmpExtr
$LN2@AddLmpExtr:

; 326  : 
; 327  : 	M_Memcpy(*demo_point, textcmds[tic][playernum], textcmds[tic][playernum][0]+1);

  00041	8b 45 fc	 mov	 eax, DWORD PTR _tic$[ebp]
  00044	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00047	8b 4d 0c	 mov	 ecx, DWORD PTR _playernum$[ebp]
  0004a	c1 e1 08	 shl	 ecx, 8
  0004d	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00060	83 c2 01	 add	 edx, 1
  00063	52		 push	 edx
  00064	8b 45 fc	 mov	 eax, DWORD PTR _tic$[ebp]
  00067	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _playernum$[ebp]
  0006d	c1 e1 08	 shl	 ecx, 8
  00070	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  00077	52		 push	 edx
  00078	8b 45 08	 mov	 eax, DWORD PTR _demo_point$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	51		 push	 ecx
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH

; 328  : 	*demo_point += textcmds[tic][playernum][0]+1;

  00087	8b 45 fc	 mov	 eax, DWORD PTR _tic$[ebp]
  0008a	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _playernum$[ebp]
  00090	c1 e1 08	 shl	 ecx, 8
  00093	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _textcmds[eax+ecx]
  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	6b c8 00	 imul	 ecx, eax, 0
  000a2	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  000a6	8b 45 08	 mov	 eax, DWORD PTR _demo_point$[ebp]
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	8d 54 0a 01	 lea	 edx, DWORD PTR [edx+ecx+1]
  000af	8b 45 08	 mov	 eax, DWORD PTR _demo_point$[ebp]
  000b2	89 10		 mov	 DWORD PTR [eax], edx

; 329  : 	return true;

  000b4	b8 01 00 00 00	 mov	 eax, 1
$LN1@AddLmpExtr:

; 330  : }

  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_AddLmpExtradata ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _TryRunTics
_TEXT	SEGMENT
_realtics$ = 8						; size = 4
_TryRunTics PROC					; COMDAT

; 3395 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3396 : 	// the machine has lagged but it is not so bad
; 3397 : 	if (realtics > TICRATE/7) // FIXME: consistency failure!!

  00009	83 7d 08 05	 cmp	 DWORD PTR _realtics$[ebp], 5
  0000d	76 19		 jbe	 SHORT $LN6@TryRunTics

; 3398 : 	{
; 3399 : 		if (server)

  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00016	74 09		 je	 SHORT $LN5@TryRunTics

; 3400 : 			realtics = 1;

  00018	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _realtics$[ebp], 1
  0001f	eb 07		 jmp	 SHORT $LN6@TryRunTics
$LN5@TryRunTics:

; 3401 : 		else
; 3402 : 			realtics = TICRATE/7;

  00021	c7 45 08 05 00
	00 00		 mov	 DWORD PTR _realtics$[ebp], 5
$LN6@TryRunTics:

; 3403 : 	}
; 3404 : 
; 3405 : 	if (singletics)

  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _singletics, 0
  0002f	74 07		 je	 SHORT $LN7@TryRunTics

; 3406 : 		realtics = 1;

  00031	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _realtics$[ebp], 1
$LN7@TryRunTics:

; 3407 : 
; 3408 : 	if (realtics >= 1)

  00038	83 7d 08 01	 cmp	 DWORD PTR _realtics$[ebp], 1
  0003c	72 2f		 jb	 SHORT $LN9@TryRunTics

; 3409 : 	{
; 3410 : 		COM_BufExecute();

  0003e	e8 00 00 00 00	 call	 _COM_BufExecute
  00043	90		 npad	 1

; 3411 : 		if (mapchangepending)

  00044	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _mapchangepending, 0
  0004b	74 20		 je	 SHORT $LN9@TryRunTics

; 3412 : 			D_MapChange(-1, 0, ultimatemode, 0, 2, false, fromlevelselect); // finish the map change

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR _fromlevelselect
  00052	50		 push	 eax
  00053	6a 00		 push	 0
  00055	6a 02		 push	 2
  00057	6a 00		 push	 0
  00059	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _ultimatemode
  00060	51		 push	 ecx
  00061	6a 00		 push	 0
  00063	6a ff		 push	 -1
  00065	e8 00 00 00 00	 call	 _D_MapChange
  0006a	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN9@TryRunTics:

; 3413 : 	}
; 3414 : 
; 3415 : 	NetUpdate();

  0006d	e8 00 00 00 00	 call	 _NetUpdate
  00072	90		 npad	 1

; 3416 : 
; 3417 : 	if (demoplayback)

  00073	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  0007a	74 34		 je	 SHORT $LN10@TryRunTics

; 3418 : 	{
; 3419 : 		neededtic = gametic + realtics + cv_playdemospeed.value;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00081	03 45 08	 add	 eax, DWORD PTR _realtics$[ebp]
  00084	03 05 14 00 00
	00		 add	 eax, DWORD PTR _cv_playdemospeed+20
  0008a	a3 00 00 00 00	 mov	 DWORD PTR _neededtic, eax

; 3420 : 		// start a game after a demo
; 3421 : 		maketic += realtics;

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00094	03 45 08	 add	 eax, DWORD PTR _realtics$[ebp]
  00097	a3 00 00 00 00	 mov	 DWORD PTR _maketic, eax

; 3422 : 		firstticstosend = maketic;

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  000a1	a3 00 00 00 00	 mov	 DWORD PTR _firstticstosend, eax

; 3423 : 		tictoclear = firstticstosend;

  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _firstticstosend
  000ab	a3 00 00 00 00	 mov	 DWORD PTR _tictoclear, eax
$LN10@TryRunTics:

; 3424 : 	}
; 3425 : 
; 3426 : 	GetPackets();

  000b0	e8 00 00 00 00	 call	 _GetPackets
  000b5	90		 npad	 1

; 3427 : 
; 3428 : #ifdef DEBUGFILE
; 3429 : 	if (debugfile && (realtics || neededtic > gametic))

  000b6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  000bd	74 49		 je	 SHORT $LN11@TryRunTics
  000bf	83 7d 08 00	 cmp	 DWORD PTR _realtics$[ebp], 0
  000c3	75 0d		 jne	 SHORT $LN12@TryRunTics
  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _neededtic
  000ca	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _gametic
  000d0	76 36		 jbe	 SHORT $LN11@TryRunTics
$LN12@TryRunTics:

; 3430 : 	{
; 3431 : 		//SoM: 3/30/2000: Need long INT32 in the format string for args 4 & 5.
; 3432 : 		//Shut up stupid warning!
; 3433 : 		fprintf(debugfile, "------------ Tryruntic: REAL:%d NEED:%d GAME:%d LOAD: %d\n",

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugload
  000d7	50		 push	 eax
  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gametic
  000de	51		 push	 ecx
  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _neededtic
  000e5	52		 push	 edx
  000e6	8b 45 08	 mov	 eax, DWORD PTR _realtics$[ebp]
  000e9	50		 push	 eax
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@JNLGOLID@?9?9?9?9?9?9?9?9?9?9?9?9?5Tryruntic?3?5REAL?3?$CFd@
  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _debugfile
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 _fprintf
  000fb	83 c4 18	 add	 esp, 24			; 00000018H

; 3434 : 			realtics, neededtic, gametic, debugload);
; 3435 : 		debugload = 100000;

  000fe	c7 05 00 00 00
	00 a0 86 01 00	 mov	 DWORD PTR _debugload, 100000 ; 000186a0H
$LN11@TryRunTics:

; 3436 : 	}
; 3437 : #endif
; 3438 : 
; 3439 : 	if (neededtic > gametic)

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR _neededtic
  0010d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _gametic
  00113	0f 86 c5 00 00
	00		 jbe	 $LN3@TryRunTics

; 3440 : 	{
; 3441 : 		if (advancedemo)

  00119	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _advancedemo, 0
  00120	74 0b		 je	 SHORT $LN14@TryRunTics

; 3442 : 			D_StartTitle();

  00122	e8 00 00 00 00	 call	 _D_StartTitle
  00127	90		 npad	 1
  00128	e9 b1 00 00 00	 jmp	 $LN3@TryRunTics
$LN14@TryRunTics:

; 3443 : 		else
; 3444 : 			// run the count * tics
; 3445 : 			while (neededtic > gametic)

  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR _neededtic
  00132	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _gametic
  00138	0f 86 a0 00 00
	00		 jbe	 $LN3@TryRunTics

; 3446 : 			{
; 3447 : 				DEBFILE(va("============ Running tic %d (local %d)\n", gametic, localgametic));

  0013e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00145	74 38		 je	 SHORT $LN16@TryRunTics
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0014c	50		 push	 eax
  0014d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  00153	51		 push	 ecx
  00154	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gametic
  0015a	52		 push	 edx
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CDIBIEFM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5Running?5tic?5?$CFd?5?$CIlo@
  00160	e8 00 00 00 00	 call	 _va
  00165	83 c4 0c	 add	 esp, 12			; 0000000cH
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 _fputs
  0016e	83 c4 08	 add	 esp, 8
  00171	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _fflush
  0017c	83 c4 04	 add	 esp, 4
$LN16@TryRunTics:

; 3448 : 
; 3449 : 				G_Ticker();

  0017f	e8 00 00 00 00	 call	 _G_Ticker
  00184	90		 npad	 1

; 3450 : 				ExtraDataTicker();

  00185	e8 00 00 00 00	 call	 _ExtraDataTicker
  0018a	90		 npad	 1

; 3451 : 				gametic++;

  0018b	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00190	83 c0 01	 add	 eax, 1
  00193	a3 00 00 00 00	 mov	 DWORD PTR _gametic, eax

; 3452 : 				// skip paused tic in a demo
; 3453 : 				if (demoplayback && paused)

  00198	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  0019f	74 1a		 je	 SHORT $LN17@TryRunTics
  001a1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _paused
  001a8	85 c0		 test	 eax, eax
  001aa	74 0f		 je	 SHORT $LN17@TryRunTics

; 3454 : 					neededtic++;

  001ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _neededtic
  001b1	83 c0 01	 add	 eax, 1
  001b4	a3 00 00 00 00	 mov	 DWORD PTR _neededtic, eax
  001b9	eb 1e		 jmp	 SHORT $LN18@TryRunTics
$LN17@TryRunTics:

; 3455 : 				else
; 3456 : 					consistancy[gametic%BACKUPTICS] = Consistancy();

  001bb	e8 00 00 00 00	 call	 _Consistancy
  001c0	66 8b c8	 mov	 cx, ax
  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  001c8	33 d2		 xor	 edx, edx
  001ca	be 20 00 00 00	 mov	 esi, 32			; 00000020H
  001cf	f7 f6		 div	 esi
  001d1	66 89 0c 55 00
	00 00 00	 mov	 WORD PTR _consistancy[edx*2], cx
$LN18@TryRunTics:

; 3457 : 			}

  001d9	e9 4f ff ff ff	 jmp	 $LN14@TryRunTics
$LN3@TryRunTics:

; 3458 : 	}
; 3459 : }

  001de	5f		 pop	 edi
  001df	5e		 pop	 esi
  001e0	5b		 pop	 ebx
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c3		 ret	 0
_TryRunTics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _D_QuitNetGame
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_D_QuitNetGame PROC					; COMDAT

; 1910 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1911 : 	if (!netgame || !netbuffer)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 09		 je	 SHORT $LN6@D_QuitNetG
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netbuffer, 0
  00019	75 05		 jne	 SHORT $LN5@D_QuitNetG
$LN6@D_QuitNetG:

; 1912 : 		return;

  0001b	e9 37 01 00 00	 jmp	 $LN14@D_QuitNetG
$LN5@D_QuitNetG:

; 1913 : 
; 1914 : 	DEBFILE("===========================================================================\n"

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00027	74 21		 je	 SHORT $LN7@D_QuitNetG
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0MN@NNHBNPNE@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00034	e8 00 00 00 00	 call	 _fputs
  00039	83 c4 08	 add	 esp, 8
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _fflush
  00047	83 c4 04	 add	 esp, 4
$LN7@D_QuitNetG:

; 1915 : 	        "                  Quitting Game, closing connection\n"
; 1916 : 	        "===========================================================================\n");
; 1917 : 
; 1918 : 	// abort send/receive of files
; 1919 : 	CloseNetFile();

  0004a	e8 00 00 00 00	 call	 _CloseNetFile
  0004f	90		 npad	 1

; 1920 : 
; 1921 : 	if (server)

  00050	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00057	74 5c		 je	 SHORT $LN8@D_QuitNetG

; 1922 : 	{
; 1923 : 		INT32 i;
; 1924 : 
; 1925 : 		netbuffer->packettype = PT_SERVERSHUTDOWN;

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  0005e	c6 40 06 0a	 mov	 BYTE PTR [eax+6], 10	; 0000000aH

; 1926 : 		for (i = 0; i < MAXNETNODES; i++)

  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00069	eb 09		 jmp	 SHORT $LN4@D_QuitNetG
$LN2@D_QuitNetG:
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0006e	83 c0 01	 add	 eax, 1
  00071	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@D_QuitNetG:
  00074	83 7d fc 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  00078	7d 21		 jge	 SHORT $LN3@D_QuitNetG

; 1927 : 			if (nodeingame[i])

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0007d	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _nodeingame[eax*4], 0
  00085	74 12		 je	 SHORT $LN10@D_QuitNetG

; 1928 : 				HSendPacket(i, true, 0, 0);

  00087	6a 00		 push	 0
  00089	6a 00		 push	 0
  0008b	6a 01		 push	 1
  0008d	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _HSendPacket
  00096	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@D_QuitNetG:
  00099	eb d0		 jmp	 SHORT $LN2@D_QuitNetG
$LN3@D_QuitNetG:

; 1929 : 		if (serverrunning && cv_internetserver.value)

  0009b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverrunning, 0
  000a2	74 0f		 je	 SHORT $LN11@D_QuitNetG
  000a4	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_internetserver+20, 0
  000ab	74 06		 je	 SHORT $LN11@D_QuitNetG

; 1930 : 			UnregisterServer();

  000ad	e8 00 00 00 00	 call	 _UnregisterServer
  000b2	90		 npad	 1
$LN11@D_QuitNetG:

; 1931 : 	}

  000b3	eb 47		 jmp	 SHORT $LN12@D_QuitNetG
$LN8@D_QuitNetG:

; 1932 : 	else if (servernode > 0 && servernode < MAXNETNODES && nodeingame[(UINT8)servernode]!=0)

  000b5	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  000bc	85 c0		 test	 eax, eax
  000be	7e 3c		 jle	 SHORT $LN12@D_QuitNetG
  000c0	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  000c7	83 f8 20	 cmp	 eax, 32			; 00000020H
  000ca	7d 30		 jge	 SHORT $LN12@D_QuitNetG
  000cc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _servernode
  000d3	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _nodeingame[eax*4], 0
  000db	74 1f		 je	 SHORT $LN12@D_QuitNetG

; 1933 : 	{
; 1934 : 		netbuffer->packettype = PT_CLIENTQUIT;

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _netbuffer
  000e2	c6 40 06 0b	 mov	 BYTE PTR [eax+6], 11	; 0000000bH

; 1935 : 		HSendPacket(servernode, true, 0, 0);

  000e6	6a 00		 push	 0
  000e8	6a 00		 push	 0
  000ea	6a 01		 push	 1
  000ec	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 _HSendPacket
  000f9	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@D_QuitNetG:

; 1936 : 	}
; 1937 : 
; 1938 : 	D_CloseConnection();

  000fc	e8 00 00 00 00	 call	 _D_CloseConnection
  00101	90		 npad	 1

; 1939 : 	adminplayer = -1;

  00102	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _adminplayer, -1

; 1940 : 
; 1941 : 	DEBFILE("===========================================================================\n"

  0010c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00113	74 21		 je	 SHORT $LN13@D_QuitNetG
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0011a	50		 push	 eax
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0LN@DJADCFND@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00120	e8 00 00 00 00	 call	 _fputs
  00125	83 c4 08	 add	 esp, 8
  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _fflush
  00133	83 c4 04	 add	 esp, 4
$LN13@D_QuitNetG:

; 1942 : 	        "                         Log finish\n"
; 1943 : 	        "===========================================================================\n");
; 1944 : #ifdef DEBUGFILE
; 1945 : 	if (debugfile)

  00136	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0013d	74 18		 je	 SHORT $LN14@D_QuitNetG

; 1946 : 	{
; 1947 : 		fclose(debugfile);

  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 _fclose
  0014a	83 c4 04	 add	 esp, 4

; 1948 : 		debugfile = NULL;

  0014d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _debugfile, 0
$LN14@D_QuitNetG:

; 1949 : 	}
; 1950 : #endif
; 1951 : }

  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
  00159	5b		 pop	 ebx
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
_D_QuitNetGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _Playing
_TEXT	SEGMENT
tv68 = -68						; size = 4
_Playing PROC						; COMDAT

; 2121 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2122 : 	return (server && serverrunning) || (!server && cl_mode == cl_connected);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	74 09		 je	 SHORT $LN3@Playing
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverrunning, 0
  00019	75 1b		 jne	 SHORT $LN5@Playing
$LN3@Playing:
  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00022	75 09		 jne	 SHORT $LN4@Playing
  00024	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _cl_mode, 5
  0002b	74 09		 je	 SHORT $LN5@Playing
$LN4@Playing:
  0002d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  00034	eb 07		 jmp	 SHORT $LN6@Playing
$LN5@Playing:
  00036	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
$LN6@Playing:
  0003d	8b 45 bc	 mov	 eax, DWORD PTR tv68[ebp]

; 2123 : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_Playing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_UpdateServerList
_TEXT	SEGMENT
$T1 = -116						; size = 4
_addr_str$2 = -48					; size = 24
_node$3 = -24						; size = 4
_version$4 = -20					; size = 8
_i$5 = -12						; size = 4
_server_list$6 = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_internetsearch$ = 8					; size = 4
_room$ = 12						; size = 4
_CL_UpdateServerList PROC				; COMDAT

; 815  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 816  : 	SL_ClearServerList(0);

  00013	6a 00		 push	 0
  00015	e8 00 00 00 00	 call	 _SL_ClearServerList
  0001a	83 c4 04	 add	 esp, 4

; 817  : 
; 818  : 	if (!netgame && I_NetOpenSocket)

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00024	75 2d		 jne	 SHORT $LN6@CL_UpdateS
  00026	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_NetOpenSocket, 0
  0002d	74 24		 je	 SHORT $LN6@CL_UpdateS

; 819  : 	{
; 820  : 		MSCloseUDPSocket();		// Tidy up before wiping the slate.

  0002f	e8 00 00 00 00	 call	 _MSCloseUDPSocket
  00034	90		 npad	 1

; 821  : 		if (I_NetOpenSocket())

  00035	ff 15 00 00 00
	00		 call	 DWORD PTR _I_NetOpenSocket
  0003b	85 c0		 test	 eax, eax
  0003d	74 14		 je	 SHORT $LN6@CL_UpdateS

; 822  : 		{
; 823  : 			netgame = true;

  0003f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _netgame, 1

; 824  : 			multiplayer = true;

  00049	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _multiplayer, 1
$LN6@CL_UpdateS:

; 825  : 		}
; 826  : 	}
; 827  : 
; 828  : 	// search for local servers
; 829  : 	if (netgame)

  00053	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0005a	74 0c		 je	 SHORT $LN7@CL_UpdateS

; 830  : 		SendAskInfo(BROADCASTADDR, false);

  0005c	6a 00		 push	 0
  0005e	6a 20		 push	 32			; 00000020H
  00060	e8 00 00 00 00	 call	 _SendAskInfo
  00065	83 c4 08	 add	 esp, 8
$LN7@CL_UpdateS:

; 831  : 
; 832  : 	if (internetsearch)

  00068	83 7d 08 00	 cmp	 DWORD PTR _internetsearch$[ebp], 0
  0006c	0f 84 0a 01 00
	00		 je	 $LN12@CL_UpdateS

; 833  : 	{
; 834  : 		const msg_server_t *server_list;
; 835  : 		INT32 i = -1;

  00072	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _i$5[ebp], -1

; 836  : 		server_list = GetShortServersList(room);

  00079	8b 45 0c	 mov	 eax, DWORD PTR _room$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _GetShortServersList
  00082	83 c4 04	 add	 esp, 4
  00085	89 45 f8	 mov	 DWORD PTR _server_list$6[ebp], eax

; 837  : 		if (server_list)

  00088	83 7d f8 00	 cmp	 DWORD PTR _server_list$6[ebp], 0
  0008c	0f 84 ea 00 00
	00		 je	 $LN3@CL_UpdateS

; 838  : 		{
; 839  : 			char version[8] = "";

  00092	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00097	88 45 ec	 mov	 BYTE PTR _version$4[ebp], al
  0009a	33 c0		 xor	 eax, eax
  0009c	89 45 ed	 mov	 DWORD PTR _version$4[ebp+1], eax
  0009f	66 89 45 f1	 mov	 WORD PTR _version$4[ebp+5], ax
  000a3	88 45 f3	 mov	 BYTE PTR _version$4[ebp+7], al

; 840  : 			_snprintf(version, sizeof (version), "%d.%d.%d", VERSION/100, VERSION%100, SUBVERSION);

  000a6	6a 07		 push	 7
  000a8	6a 00		 push	 0
  000aa	6a 02		 push	 2
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_08FOJKHHJA@?$CFd?4?$CFd?4?$CFd@
  000b1	6a 08		 push	 8
  000b3	8d 45 ec	 lea	 eax, DWORD PTR _version$4[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ___snprintf
  000bc	83 c4 18	 add	 esp, 24			; 00000018H

; 841  : 			version[sizeof (version) - 1] = '\0';

  000bf	b8 01 00 00 00	 mov	 eax, 1
  000c4	6b c8 07	 imul	 ecx, eax, 7
  000c7	89 4d 8c	 mov	 DWORD PTR $T1[ebp], ecx
  000ca	83 7d 8c 08	 cmp	 DWORD PTR $T1[ebp], 8
  000ce	73 02		 jae	 SHORT $LN14@CL_UpdateS
  000d0	eb 06		 jmp	 SHORT $LN15@CL_UpdateS
$LN14@CL_UpdateS:
  000d2	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000d7	90		 npad	 1
$LN15@CL_UpdateS:
  000d8	8b 55 8c	 mov	 edx, DWORD PTR $T1[ebp]
  000db	c6 44 15 ec 00	 mov	 BYTE PTR _version$4[ebp+edx], 0

; 842  : 
; 843  : 			for (i = 0; server_list[i].header.buffer[0]; i++)

  000e0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  000e7	eb 09		 jmp	 SHORT $LN4@CL_UpdateS
$LN2@CL_UpdateS:
  000e9	8b 45 f4	 mov	 eax, DWORD PTR _i$5[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 f4	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@CL_UpdateS:
  000f2	6b 45 f4 54	 imul	 eax, DWORD PTR _i$5[ebp], 84
  000f6	03 45 f8	 add	 eax, DWORD PTR _server_list$6[ebp]
  000f9	b9 01 00 00 00	 mov	 ecx, 1
  000fe	6b d1 00	 imul	 edx, ecx, 0
  00101	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  00105	85 c0		 test	 eax, eax
  00107	74 73		 je	 SHORT $LN3@CL_UpdateS

; 844  : 			{
; 845  : 				// Make sure MS version matches our own, to
; 846  : 				// thwart nefarious servers who lie to the MS.
; 847  : 
; 848  : 				if(strcmp(version, server_list[i].version) == 0)

  00109	6b 45 f4 54	 imul	 eax, DWORD PTR _i$5[ebp], 84
  0010d	8b 4d f8	 mov	 ecx, DWORD PTR _server_list$6[ebp]
  00110	8d 54 01 4c	 lea	 edx, DWORD PTR [ecx+eax+76]
  00114	52		 push	 edx
  00115	8d 45 ec	 lea	 eax, DWORD PTR _version$4[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 _strcmp
  0011e	83 c4 08	 add	 esp, 8
  00121	85 c0		 test	 eax, eax
  00123	75 52		 jne	 SHORT $LN10@CL_UpdateS

; 849  : 				{
; 850  : 					INT32 node;
; 851  : 					XBOXSTATIC char addr_str[24];
; 852  : 
; 853  : 					// insert ip (and optionally port) in node list
; 854  : 					sprintf(addr_str, "%s:%s", server_list[i].ip, server_list[i].port);

  00125	6b 45 f4 54	 imul	 eax, DWORD PTR _i$5[ebp], 84
  00129	8b 4d f8	 mov	 ecx, DWORD PTR _server_list$6[ebp]
  0012c	8d 54 01 20	 lea	 edx, DWORD PTR [ecx+eax+32]
  00130	52		 push	 edx
  00131	6b 45 f4 54	 imul	 eax, DWORD PTR _i$5[ebp], 84
  00135	8b 4d f8	 mov	 ecx, DWORD PTR _server_list$6[ebp]
  00138	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0013c	52		 push	 edx
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_05CCMOGDN@?$CFs?3?$CFs@
  00142	8d 45 d0	 lea	 eax, DWORD PTR _addr_str$2[ebp]
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 _sprintf
  0014b	83 c4 10	 add	 esp, 16			; 00000010H

; 855  : 					node = I_NetMakeNode(addr_str);

  0014e	8d 45 d0	 lea	 eax, DWORD PTR _addr_str$2[ebp]
  00151	50		 push	 eax
  00152	ff 15 00 00 00
	00		 call	 DWORD PTR _I_NetMakeNode
  00158	83 c4 04	 add	 esp, 4
  0015b	0f be c8	 movsx	 ecx, al
  0015e	89 4d e8	 mov	 DWORD PTR _node$3[ebp], ecx

; 856  : 					if (node == -1)

  00161	83 7d e8 ff	 cmp	 DWORD PTR _node$3[ebp], -1
  00165	75 02		 jne	 SHORT $LN11@CL_UpdateS

; 857  : 						break; // no more node free

  00167	eb 13		 jmp	 SHORT $LN3@CL_UpdateS
$LN11@CL_UpdateS:

; 858  : 					SendAskInfo(node, true);

  00169	6a 01		 push	 1
  0016b	8b 45 e8	 mov	 eax, DWORD PTR _node$3[ebp]
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 _SendAskInfo
  00174	83 c4 08	 add	 esp, 8
$LN10@CL_UpdateS:

; 859  : 				}
; 860  : 			}

  00177	e9 6d ff ff ff	 jmp	 $LN2@CL_UpdateS
$LN3@CL_UpdateS:
$LN12@CL_UpdateS:

; 861  : 		}
; 862  : 
; 863  : 		//no server list?(-1) or no servers?(0)
; 864  : 		if (!i)
; 865  : 		{
; 866  : 			; /// TODO: display error or warning?
; 867  : 		}
; 868  : 	}
; 869  : }

  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00182	33 cd		 xor	 ecx, ebp
  00184	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0
_CL_UpdateServerList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_ClearPlayer
_TEXT	SEGMENT
_playernum$ = 8						; size = 4
_CL_ClearPlayer PROC					; COMDAT

; 1323 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1324 : 	if (players[playernum].mo)

  00009	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00010	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00017	0f 84 05 01 00
	00		 je	 $LN2@CL_ClearPl

; 1325 : 	{
; 1326 : 		// Don't leave a NiGHTS ghost!
; 1327 : 		if ((players[playernum].pflags & PF_NIGHTSMODE) && players[playernum].mo->tracer)

  0001d	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00024	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0002a	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00030	74 37		 je	 SHORT $LN3@CL_ClearPl
  00032	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00039	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0003f	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00046	74 21		 je	 SHORT $LN3@CL_ClearPl

; 1328 : 			P_SetMobjState(players[playernum].mo->tracer, S_DISS);

  00048	68 4f 06 00 00	 push	 1615			; 0000064fH
  0004d	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00054	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0005a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 _P_SetMobjState
  00066	83 c4 08	 add	 esp, 8
$LN3@CL_ClearPl:

; 1329 : 
; 1330 : 		players[playernum].mo->player = NULL;

  00069	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00070	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00076	c7 81 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+164], 0

; 1331 : 		P_UnsetThingPosition(players[playernum].mo);

  00080	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00087	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00093	83 c4 04	 add	 esp, 4

; 1332 : 		if (sector_list)

  00096	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sector_list, 0
  0009d	74 18		 je	 SHORT $LN4@CL_ClearPl

; 1333 : 		{
; 1334 : 			P_DelSeclist(sector_list);

  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _sector_list
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _P_DelSeclist
  000aa	83 c4 04	 add	 esp, 4

; 1335 : 			sector_list = NULL;

  000ad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sector_list, 0
$LN4@CL_ClearPl:

; 1336 : 		}
; 1337 : 		players[playernum].mo->flags = 0;

  000b7	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  000be	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  000c4	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 1338 : 		P_SetThingPosition(players[playernum].mo);

  000cb	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  000d2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 _P_SetThingPosition
  000de	83 c4 04	 add	 esp, 4

; 1339 : 		players[playernum].mo->health = 0;

  000e1	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  000e8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  000ee	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0

; 1340 : 		P_RemoveMobj(players[playernum].mo);

  000f8	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  000ff	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 _P_RemoveMobj
  0010b	83 c4 04	 add	 esp, 4

; 1341 : 		players[playernum].mo->subsector = NULL; // Just in case...

  0010e	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00115	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0011b	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
$LN2@CL_ClearPl:

; 1342 : 	}
; 1343 : 	players[playernum].mo = NULL;

  00122	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00129	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax], 0

; 1344 : 
; 1345 : 	memset(&players[playernum], 0, sizeof (player_t));

  00133	68 fc 01 00 00	 push	 508			; 000001fcH
  00138	6a 00		 push	 0
  0013a	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00141	05 00 00 00 00	 add	 eax, OFFSET _players
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 _memset
  0014c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1346 : }

  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c3		 ret	 0
_CL_ClearPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_Reset
_TEXT	SEGMENT
_CL_Reset PROC						; COMDAT

; 1433 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1434 : 	if (demorecording)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demorecording, 0
  00010	74 06		 je	 SHORT $LN2@CL_Reset

; 1435 : 		G_CheckDemoStatus();

  00012	e8 00 00 00 00	 call	 _G_CheckDemoStatus
  00017	90		 npad	 1
$LN2@CL_Reset:

; 1436 : 
; 1437 : 	// reset client/server code
; 1438 : 	DEBFILE(va("\n-=-=-=-=-=-=-= Client reset =-=-=-=-=-=-=-\n\n"));

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0001f	74 2a		 je	 SHORT $LN3@CL_Reset
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KOGEKBC@?6?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?5Client?5reset?5?$DN?9@
  0002c	e8 00 00 00 00	 call	 _va
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _fputs
  0003a	83 c4 08	 add	 esp, 8
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _fflush
  00048	83 c4 04	 add	 esp, 4
$LN3@CL_Reset:

; 1439 : 
; 1440 : 	if (servernode > 0 && servernode < MAXNETNODES)

  0004b	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  00052	85 c0		 test	 eax, eax
  00054	7e 2e		 jle	 SHORT $LN4@CL_Reset
  00056	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  0005d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00060	7d 22		 jge	 SHORT $LN4@CL_Reset

; 1441 : 	{
; 1442 : 		nodeingame[(UINT8)servernode] = false;

  00062	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _servernode
  00069	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _nodeingame[eax*4], 0

; 1443 : 		Net_CloseConnection(servernode);

  00074	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _servernode
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _Net_CloseConnection
  00081	83 c4 04	 add	 esp, 4
$LN4@CL_Reset:

; 1444 : 	}
; 1445 : 	D_CloseConnection(); // netgame = false

  00084	e8 00 00 00 00	 call	 _D_CloseConnection
  00089	90		 npad	 1

; 1446 : 	multiplayer = false;

  0008a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _multiplayer, 0

; 1447 : 	servernode = 0;

  00094	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _servernode, 0

; 1448 : 	server = true;

  0009b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _server, 1

; 1449 : 	doomcom->numnodes = 1;

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  000b0	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 1450 : 	doomcom->numslots = 1;

  000b4	b8 01 00 00 00	 mov	 eax, 1
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  000bf	66 89 41 1a	 mov	 WORD PTR [ecx+26], ax

; 1451 : 	SV_StopServer();

  000c3	e8 00 00 00 00	 call	 _SV_StopServer
  000c8	90		 npad	 1

; 1452 : 	SV_ResetServer();

  000c9	e8 00 00 00 00	 call	 _SV_ResetServer
  000ce	90		 npad	 1

; 1453 : 
; 1454 : 	// D_StartTitle should get done now, but the calling function will handle it
; 1455 : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_CL_Reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_RemoveSplitscreenPlayer
_TEXT	SEGMENT
_buf$ = -4						; size = 2
_CL_RemoveSplitscreenPlayer PROC			; COMDAT

; 2108 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2109 : 	XBOXSTATIC UINT8 buf[2];
; 2110 : 
; 2111 : 	if (cl_mode != cl_connected)

  00009	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _cl_mode, 5
  00010	74 02		 je	 SHORT $LN2@CL_RemoveS

; 2112 : 		return;

  00012	eb 2f		 jmp	 SHORT $LN1@CL_RemoveS
$LN2@CL_RemoveS:

; 2113 : 
; 2114 : 	buf[0] = (UINT8)secondarydisplayplayer;

  00014	b8 01 00 00 00	 mov	 eax, 1
  00019	6b c8 00	 imul	 ecx, eax, 0
  0001c	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR _secondarydisplayplayer
  00022	88 54 0d fc	 mov	 BYTE PTR _buf$[ebp+ecx], dl

; 2115 : 	buf[1] = KICK_MSG_PLAYER_QUIT;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	c1 e0 00	 shl	 eax, 0
  0002e	c6 44 05 fc 03	 mov	 BYTE PTR _buf$[ebp+eax], 3

; 2116 : 	SendNetXCmd(XD_KICK, &buf, 2);

  00033	6a 02		 push	 2
  00035	8d 45 fc	 lea	 eax, DWORD PTR _buf$[ebp]
  00038	50		 push	 eax
  00039	6a 03		 push	 3
  0003b	e8 00 00 00 00	 call	 _SendNetXCmd
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CL_RemoveS:

; 2117 : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_CL_RemoveSplitscreenPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _CL_AddSplitscreenPlayer
_TEXT	SEGMENT
_CL_AddSplitscreenPlayer PROC				; COMDAT

; 2102 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2103 : 	if (cl_mode == cl_connected)

  00009	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _cl_mode, 5
  00010	75 06		 jne	 SHORT $LN2@CL_AddSpli

; 2104 : 		CL_SendJoin();

  00012	e8 00 00 00 00	 call	 _CL_SendJoin
  00017	90		 npad	 1
$LN2@CL_AddSpli:

; 2105 : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
_CL_AddSplitscreenPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_ResetServer
_TEXT	SEGMENT
_i$ = -4						; size = 4
_SV_ResetServer PROC					; COMDAT

; 1864 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1865 : 	INT32 i;
; 1866 : 
; 1867 : 	// +1 because this command will be executed in com_executebuffer in
; 1868 : 	// tryruntic so gametic will be incremented, anyway maketic > gametic
; 1869 : 	// is not a issue
; 1870 : 
; 1871 : 	maketic = gametic + 1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR _maketic, eax

; 1872 : 	neededtic = maketic;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _neededtic, eax

; 1873 : 	tictoclear = maketic;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00025	a3 00 00 00 00	 mov	 DWORD PTR _tictoclear, eax

; 1874 : 
; 1875 : 	for (i = 0; i < MAXNETNODES; i++)

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00031	eb 09		 jmp	 SHORT $LN4@SV_ResetSe
$LN2@SV_ResetSe:
  00033	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00036	83 c0 01	 add	 eax, 1
  00039	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@SV_ResetSe:
  0003c	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00040	7d 0e		 jge	 SHORT $LN3@SV_ResetSe

; 1876 : 		ResetNode(i);

  00042	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _ResetNode
  0004b	83 c4 04	 add	 esp, 4
  0004e	eb e3		 jmp	 SHORT $LN2@SV_ResetSe
$LN3@SV_ResetSe:

; 1877 : 
; 1878 : 	for (i = 0; i < MAXPLAYERS; i++)

  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00057	eb 09		 jmp	 SHORT $LN7@SV_ResetSe
$LN5@SV_ResetSe:
  00059	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0005c	83 c0 01	 add	 eax, 1
  0005f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@SV_ResetSe:
  00062	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00066	7d 39		 jge	 SHORT $LN6@SV_ResetSe

; 1879 : 	{
; 1880 : 		playeringame[i] = false;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0006b	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _playeringame[eax*4], 0

; 1881 : 		playernode[i] = UINT8_MAX;

  00076	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00079	c6 80 00 00 00
	00 ff		 mov	 BYTE PTR _playernode[eax], 255 ; 000000ffH

; 1882 : 		sprintf(player_names[i], "Player %d", i + 1);

  00080	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00083	83 c0 01	 add	 eax, 1
  00086	50		 push	 eax
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_09DOIJPOHM@Player?5?$CFd@
  0008c	6b 4d fc 16	 imul	 ecx, DWORD PTR _i$[ebp], 22
  00090	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _sprintf
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1883 : 	}

  0009f	eb b8		 jmp	 SHORT $LN5@SV_ResetSe
$LN6@SV_ResetSe:

; 1884 : 
; 1885 : 	mynode = 0;

  000a1	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _mynode, 0

; 1886 : 	cl_packetmissed = false;

  000a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cl_packetmissed, 0

; 1887 : 
; 1888 : 	if (dedicated)

  000b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  000b9	74 1e		 je	 SHORT $LN8@SV_ResetSe

; 1889 : 	{
; 1890 : 		nodeingame[0] = true;

  000bb	b8 04 00 00 00	 mov	 eax, 4
  000c0	6b c8 00	 imul	 ecx, eax, 0
  000c3	c7 81 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _nodeingame[ecx], 1

; 1891 : 		serverplayer = 0;

  000cd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _serverplayer, 0

; 1892 : 	}

  000d7	eb 0a		 jmp	 SHORT $LN9@SV_ResetSe
$LN8@SV_ResetSe:

; 1893 : 	else
; 1894 : 		serverplayer = consoleplayer;

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  000de	a3 00 00 00 00	 mov	 DWORD PTR _serverplayer, eax
$LN9@SV_ResetSe:

; 1895 : 
; 1896 : 	if (server)

  000e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000ea	74 07		 je	 SHORT $LN10@SV_ResetSe

; 1897 : 		servernode = 0;

  000ec	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _servernode, 0
$LN10@SV_ResetSe:

; 1898 : 
; 1899 : 	doomcom->numslots = 0;

  000f3	33 c0		 xor	 eax, eax
  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  000fb	66 89 41 1a	 mov	 WORD PTR [ecx+26], ax

; 1900 : 
; 1901 : 	DEBFILE(va("\n-=-=-=-=-=-=-= Server Reset =-=-=-=-=-=-=-\n\n"));

  000ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00106	74 2a		 je	 SHORT $LN11@SV_ResetSe
  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  0010d	50		 push	 eax
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IAFPHCGF@?6?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?9?$DN?5Server?5Reset?5?$DN?9@
  00113	e8 00 00 00 00	 call	 _va
  00118	83 c4 04	 add	 esp, 4
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _fputs
  00121	83 c4 08	 add	 esp, 8
  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _fflush
  0012f	83 c4 04	 add	 esp, 4
$LN11@SV_ResetSe:

; 1902 : }

  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
_SV_ResetServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_StopServer
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_i$ = -4						; size = 4
_SV_StopServer PROC					; COMDAT

; 2153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2154 : 	tic_t i;
; 2155 : 
; 2156 : 	if (gamestate == GS_INTERMISSION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00010	75 06		 jne	 SHORT $LN5@SV_StopSer

; 2157 : 		Y_EndIntermission();

  00012	e8 00 00 00 00	 call	 _Y_EndIntermission
  00017	90		 npad	 1
$LN5@SV_StopSer:

; 2158 : 	gamestate = wipegamestate = GS_NULL;

  00018	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _wipegamestate, 0
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR _wipegamestate
  00027	a3 00 00 00 00	 mov	 DWORD PTR _gamestate, eax

; 2159 : 
; 2160 : 	localtextcmd[0] = 0;

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	6b c8 00	 imul	 ecx, eax, 0
  00034	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  00037	81 7d b8 00 01
	00 00		 cmp	 DWORD PTR $T2[ebp], 256	; 00000100H
  0003e	73 02		 jae	 SHORT $LN7@SV_StopSer
  00040	eb 06		 jmp	 SHORT $LN8@SV_StopSer
$LN7@SV_StopSer:
  00042	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00047	90		 npad	 1
$LN8@SV_StopSer:
  00048	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  0004b	c6 82 00 00 00
	00 00		 mov	 BYTE PTR _localtextcmd[edx], 0

; 2161 : 	localtextcmd2[0] = 0;

  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	6b c8 00	 imul	 ecx, eax, 0
  0005a	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  0005d	81 7d b4 00 01
	00 00		 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  00064	73 02		 jae	 SHORT $LN9@SV_StopSer
  00066	eb 06		 jmp	 SHORT $LN10@SV_StopSer
$LN9@SV_StopSer:
  00068	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0006d	90		 npad	 1
$LN10@SV_StopSer:
  0006e	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00071	c6 82 00 00 00
	00 00		 mov	 BYTE PTR _localtextcmd2[edx], 0

; 2162 : 
; 2163 : 	for (i = 0; i < BACKUPTICS; i++)

  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007f	eb 09		 jmp	 SHORT $LN4@SV_StopSer
$LN2@SV_StopSer:
  00081	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00084	83 c0 01	 add	 eax, 1
  00087	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@SV_StopSer:
  0008a	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0008e	73 0e		 jae	 SHORT $LN3@SV_StopSer

; 2164 : 		D_Clearticcmd(i);

  00090	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _D_Clearticcmd
  00099	83 c4 04	 add	 esp, 4
  0009c	eb e3		 jmp	 SHORT $LN2@SV_StopSer
$LN3@SV_StopSer:

; 2165 : 
; 2166 : 	consoleplayer = 0;

  0009e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _consoleplayer, 0

; 2167 : 	cl_mode = cl_searching;

  000a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cl_mode, 0

; 2168 : 	maketic = gametic+1;

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  000b7	83 c0 01	 add	 eax, 1
  000ba	a3 00 00 00 00	 mov	 DWORD PTR _maketic, eax

; 2169 : 	neededtic = maketic;

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  000c4	a3 00 00 00 00	 mov	 DWORD PTR _neededtic, eax

; 2170 : 	serverrunning = false;

  000c9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _serverrunning, 0
$LN1@SV_StopSer:

; 2171 : }

  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
_SV_StopServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SpawnPlayer
_TEXT	SEGMENT
_playernum$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_angle$ = 20						; size = 4
_SV_SpawnPlayer PROC					; COMDAT

; 3354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3355 : 	// for future copytic use the good x, y, and angle!
; 3356 : 	if (server)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	74 35		 je	 SHORT $LN2@SV_SpawnPl

; 3357 : 	{
; 3358 : 		x = y = 0;

  00012	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00019	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0001c	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax

; 3359 : 		netcmds[maketic%BACKUPTICS][playernum].angleturn = (INT16)((INT16)(angle>>16) | TICCMD_RECEIVED);

  0001f	8b 45 14	 mov	 eax, DWORD PTR _angle$[ebp]
  00022	c1 e8 10	 shr	 eax, 16			; 00000010H
  00025	0f bf c8	 movsx	 ecx, ax
  00028	83 c9 01	 or	 ecx, 1
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00030	33 d2		 xor	 edx, edx
  00032	be 20 00 00 00	 mov	 esi, 32			; 00000020H
  00037	f7 f6		 div	 esi
  00039	c1 e2 08	 shl	 edx, 8
  0003c	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  0003f	66 89 8c c2 02
	00 00 00	 mov	 WORD PTR _netcmds[edx+eax*8+2], cx
$LN2@SV_SpawnPl:

; 3360 : 	}
; 3361 : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_SV_SpawnPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_SpawnServer
_TEXT	SEGMENT
_SV_SpawnServer PROC					; COMDAT

; 2126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2127 : 	if (demoplayback)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00010	74 06		 je	 SHORT $LN2@SV_SpawnSe

; 2128 : 		G_StopDemo(); // reset engine parameter

  00012	e8 00 00 00 00	 call	 _G_StopDemo
  00017	90		 npad	 1
$LN2@SV_SpawnSe:

; 2129 : 
; 2130 : 	if (!serverrunning)

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverrunning, 0
  0001f	75 7e		 jne	 SHORT $LN7@SV_SpawnSe

; 2131 : 	{
; 2132 : 		CONS_Printf("%s", text[STARTINGSERVER]);

  00021	b8 04 00 00 00	 mov	 eax, 4
  00026	6b c8 48	 imul	 ecx, eax, 72
  00029	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002f	52		 push	 edx
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00035	e8 00 00 00 00	 call	 _CONS_Printf
  0003a	83 c4 08	 add	 esp, 8

; 2133 : 		serverrunning = true;

  0003d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _serverrunning, 1

; 2134 : 		SV_ResetServer();

  00047	e8 00 00 00 00	 call	 _SV_ResetServer
  0004c	90		 npad	 1

; 2135 : 		if (netgame && I_NetOpenSocket)

  0004d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00054	74 25		 je	 SHORT $LN5@SV_SpawnSe
  00056	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_NetOpenSocket, 0
  0005d	74 1c		 je	 SHORT $LN5@SV_SpawnSe

; 2136 : 		{
; 2137 : 			MSCloseUDPSocket();		// Tidy up before wiping the slate.

  0005f	e8 00 00 00 00	 call	 _MSCloseUDPSocket
  00064	90		 npad	 1

; 2138 : 			I_NetOpenSocket();

  00065	ff 15 00 00 00
	00		 call	 DWORD PTR _I_NetOpenSocket
  0006b	90		 npad	 1

; 2139 : 			if (cv_internetserver.value)

  0006c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_internetserver+20, 0
  00073	74 06		 je	 SHORT $LN5@SV_SpawnSe

; 2140 : 				RegisterServer();

  00075	e8 00 00 00 00	 call	 _RegisterServer
  0007a	90		 npad	 1
$LN5@SV_SpawnSe:

; 2141 : 		}
; 2142 : 
; 2143 : 		// non dedicated server just connect to itself
; 2144 : 		if (!dedicated)

  0007b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00082	75 0c		 jne	 SHORT $LN6@SV_SpawnSe

; 2145 : 			CL_ConnectToServer(false);

  00084	6a 00		 push	 0
  00086	e8 00 00 00 00	 call	 _CL_ConnectToServer
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 0f		 jmp	 SHORT $LN7@SV_SpawnSe
$LN6@SV_SpawnSe:

; 2146 : 		else doomcom->numslots = 1;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _doomcom
  0009b	66 89 41 1a	 mov	 WORD PTR [ecx+26], ax
$LN7@SV_SpawnSe:

; 2147 : 	}
; 2148 : 
; 2149 : 	return SV_AddWaitingPlayers();

  0009f	e8 00 00 00 00	 call	 _SV_AddWaitingPlayers

; 2150 : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_SV_SpawnServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SV_StartSinglePlayerServer
_TEXT	SEGMENT
_SV_StartSinglePlayerServer PROC			; COMDAT

; 2175 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2176 : 	server = true;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _server, 1

; 2177 : 	netgame = false;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _netgame, 0

; 2178 : 	multiplayer = false;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _multiplayer, 0

; 2179 : 	gametype = GT_COOP;

  00027	33 c0		 xor	 eax, eax
  00029	66 a3 00 00 00
	00		 mov	 WORD PTR _gametype, ax

; 2180 : 
; 2181 : 	// no more tic the game with this settings!
; 2182 : 	SV_StopServer();

  0002f	e8 00 00 00 00	 call	 _SV_StopServer
  00034	90		 npad	 1

; 2183 : 
; 2184 : 	if (splitscreen)

  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0003c	74 0a		 je	 SHORT $LN2@SV_StartSi

; 2185 : 		multiplayer = true;

  0003e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _multiplayer, 1
$LN2@SV_StartSi:

; 2186 : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_SV_StartSinglePlayerServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _NetUpdate
_TEXT	SEGMENT
_counts$1 = -16						; size = 4
_realtics$ = -12					; size = 4
_i$ = -8						; size = 4
_nowtime$ = -4						; size = 4
_NetUpdate PROC						; COMDAT

; 3522 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3523 : 	static tic_t gametime = 0;
; 3524 : 	tic_t nowtime;
; 3525 : 	INT32 i;
; 3526 : 	INT32 realtics;
; 3527 : 
; 3528 : 	nowtime = I_GetTime();

  00009	e8 00 00 00 00	 call	 _I_GetTime
  0000e	89 45 fc	 mov	 DWORD PTR _nowtime$[ebp], eax

; 3529 : 	realtics = nowtime - gametime;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _nowtime$[ebp]
  00014	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?gametime@?1??NetUpdate@@9@9
  0001a	89 45 f4	 mov	 DWORD PTR _realtics$[ebp], eax

; 3530 : 
; 3531 : 	if (realtics <= 0) // nothing new to update

  0001d	83 7d f4 00	 cmp	 DWORD PTR _realtics$[ebp], 0
  00021	7f 05		 jg	 SHORT $LN14@NetUpdate

; 3532 : 		return;

  00023	e9 16 02 00 00	 jmp	 $LN1@NetUpdate
$LN14@NetUpdate:

; 3533 : 	if (realtics > 5)

  00028	83 7d f4 05	 cmp	 DWORD PTR _realtics$[ebp], 5
  0002c	7e 19		 jle	 SHORT $LN17@NetUpdate

; 3534 : 	{
; 3535 : 		if (server)

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00035	74 09		 je	 SHORT $LN16@NetUpdate

; 3536 : 			realtics = 1;

  00037	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _realtics$[ebp], 1
  0003e	eb 07		 jmp	 SHORT $LN17@NetUpdate
$LN16@NetUpdate:

; 3537 : 		else
; 3538 : 			realtics = 5;

  00040	c7 45 f4 05 00
	00 00		 mov	 DWORD PTR _realtics$[ebp], 5
$LN17@NetUpdate:

; 3539 : 	}
; 3540 : 
; 3541 : 	gametime = nowtime;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _nowtime$[ebp]
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?gametime@?1??NetUpdate@@9@9, eax

; 3542 : 
; 3543 : 	if (!(gametime % 255) && netgame && server)

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gametime@?1??NetUpdate@@9@9
  00054	33 d2		 xor	 edx, edx
  00056	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0005b	f7 f1		 div	 ecx
  0005d	85 d2		 test	 edx, edx
  0005f	75 18		 jne	 SHORT $LN18@NetUpdate
  00061	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00068	74 0f		 je	 SHORT $LN18@NetUpdate
  0006a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00071	74 06		 je	 SHORT $LN18@NetUpdate

; 3544 : 	{
; 3545 : #ifdef NEWPING
; 3546 : 		PingUpdate();

  00073	e8 00 00 00 00	 call	 _PingUpdate
  00078	90		 npad	 1
$LN18@NetUpdate:

; 3547 : #endif
; 3548 : 	}
; 3549 : 
; 3550 : #ifdef NEWPING
; 3551 : 	if (server)

  00079	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00080	74 60		 je	 SHORT $LN19@NetUpdate

; 3552 : 	{
; 3553 : 		// update node latency values so we can take an average later.
; 3554 : 		for (i = 0; i < MAXNETNODES; i++)

  00082	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN4@NetUpdate
$LN2@NetUpdate:
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@NetUpdate:
  00094	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00098	7d 38		 jge	 SHORT $LN3@NetUpdate

; 3555 : 			if (playeringame[i])

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000a5	74 29		 je	 SHORT $LN20@NetUpdate

; 3556 : 				realpingtable[i] += G_TicsToMilliseconds(GetLag(i));

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _GetLag
  000b0	83 c4 04	 add	 esp, 4
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _G_TicsToMilliseconds
  000b9	83 c4 04	 add	 esp, 4
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000bf	03 04 8d 00 00
	00 00		 add	 eax, DWORD PTR _realpingtable[ecx*4]
  000c6	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000c9	89 04 95 00 00
	00 00		 mov	 DWORD PTR _realpingtable[edx*4], eax
$LN20@NetUpdate:
  000d0	eb b9		 jmp	 SHORT $LN2@NetUpdate
$LN3@NetUpdate:

; 3557 : 		pingmeasurecount++;

  000d2	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _pingmeasurecount
  000d8	66 83 c0 01	 add	 ax, 1
  000dc	66 a3 00 00 00
	00		 mov	 WORD PTR _pingmeasurecount, ax
$LN19@NetUpdate:

; 3558 : 	}
; 3559 : #endif
; 3560 : 
; 3561 : 	if (!server)

  000e2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000e9	75 0a		 jne	 SHORT $LN21@NetUpdate

; 3562 : 		maketic = neededtic;

  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _neededtic
  000f0	a3 00 00 00 00	 mov	 DWORD PTR _maketic, eax
$LN21@NetUpdate:

; 3563 : 
; 3564 : 	Local_Maketic(realtics); // make local tic, and call menu?

  000f5	8b 45 f4	 mov	 eax, DWORD PTR _realtics$[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _Local_Maketic
  000fe	83 c4 04	 add	 esp, 4

; 3565 : 
; 3566 : 	if (server && !demoplayback)

  00101	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00108	74 0f		 je	 SHORT $LN22@NetUpdate
  0010a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00111	75 06		 jne	 SHORT $LN22@NetUpdate

; 3567 : 		CL_SendClientCmd(); // send it

  00113	e8 00 00 00 00	 call	 _CL_SendClientCmd
  00118	90		 npad	 1
$LN22@NetUpdate:

; 3568 : FILESTAMP
; 3569 : 	GetPackets(); // get packet from client or from server

  00119	e8 00 00 00 00	 call	 _GetPackets
  0011e	90		 npad	 1

; 3570 : FILESTAMP
; 3571 : 	// client send the command after a receive of the server
; 3572 : 	// the server send before because in single player is beter
; 3573 : 
; 3574 : 	MasterClient_Ticker(); // acking the master server

  0011f	e8 00 00 00 00	 call	 _MasterClient_Ticker
  00124	90		 npad	 1

; 3575 : 
; 3576 : 	if (!server)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0012c	75 0b		 jne	 SHORT $LN23@NetUpdate

; 3577 : 		CL_SendClientCmd(); // send tic cmd

  0012e	e8 00 00 00 00	 call	 _CL_SendClientCmd
  00133	90		 npad	 1
  00134	e9 ed 00 00 00	 jmp	 $LN25@NetUpdate
$LN23@NetUpdate:

; 3578 : 	else
; 3579 : 	{
; 3580 : 		if (!demoplayback)

  00139	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00140	0f 85 e0 00 00
	00		 jne	 $LN25@NetUpdate

; 3581 : 		{
; 3582 : 			INT32 counts;
; 3583 : 
; 3584 : 			firstticstosend = gametic;

  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  0014b	a3 00 00 00 00	 mov	 DWORD PTR _firstticstosend, eax

; 3585 : 			for (i = 0; i < MAXNETNODES; i++)

  00150	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00157	eb 09		 jmp	 SHORT $LN7@NetUpdate
$LN5@NetUpdate:
  00159	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0015c	83 c0 01	 add	 eax, 1
  0015f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@NetUpdate:
  00162	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00166	7d 31		 jge	 SHORT $LN6@NetUpdate

; 3586 : 				if (nodeingame[i] && nettics[i] < firstticstosend)

  00168	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0016b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _nodeingame[eax*4], 0
  00173	74 22		 je	 SHORT $LN26@NetUpdate
  00175	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00178	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _nettics[eax*4]
  0017f	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _firstticstosend
  00185	73 10		 jae	 SHORT $LN26@NetUpdate

; 3587 : 					firstticstosend = nettics[i];

  00187	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0018a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _nettics[eax*4]
  00191	89 0d 00 00 00
	00		 mov	 DWORD PTR _firstticstosend, ecx
$LN26@NetUpdate:
  00197	eb c0		 jmp	 SHORT $LN5@NetUpdate
$LN6@NetUpdate:

; 3588 : 
; 3589 : 			// Don't erase tics not acknowledged
; 3590 : 			counts = realtics;

  00199	8b 45 f4	 mov	 eax, DWORD PTR _realtics$[ebp]
  0019c	89 45 f0	 mov	 DWORD PTR _counts$1[ebp], eax

; 3591 : 
; 3592 : 			if (maketic + counts >= firstticstosend + BACKUPTICS)

  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  001a4	03 45 f0	 add	 eax, DWORD PTR _counts$1[ebp]
  001a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _firstticstosend
  001ad	83 c1 20	 add	 ecx, 32			; 00000020H
  001b0	3b c1		 cmp	 eax, ecx
  001b2	72 14		 jb	 SHORT $LN27@NetUpdate

; 3593 : 				counts = firstticstosend+BACKUPTICS-maketic-1;

  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _firstticstosend
  001b9	83 c0 20	 add	 eax, 32			; 00000020H
  001bc	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _maketic
  001c2	83 e8 01	 sub	 eax, 1
  001c5	89 45 f0	 mov	 DWORD PTR _counts$1[ebp], eax
$LN27@NetUpdate:

; 3594 : 
; 3595 : 			for (i = 0; i < counts; i++)

  001c8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001cf	eb 09		 jmp	 SHORT $LN10@NetUpdate
$LN8@NetUpdate:
  001d1	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001d4	83 c0 01	 add	 eax, 1
  001d7	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@NetUpdate:
  001da	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001dd	3b 45 f0	 cmp	 eax, DWORD PTR _counts$1[ebp]
  001e0	7d 08		 jge	 SHORT $LN9@NetUpdate

; 3596 : 				SV_Maketic(); // create missed tics and increment maketic

  001e2	e8 00 00 00 00	 call	 _SV_Maketic
  001e7	90		 npad	 1
  001e8	eb e7		 jmp	 SHORT $LN8@NetUpdate
$LN9@NetUpdate:

; 3597 : 
; 3598 : 			for (; tictoclear < firstticstosend; tictoclear++) // clear only when acknoledged

  001ea	eb 0d		 jmp	 SHORT $LN13@NetUpdate
$LN11@NetUpdate:
  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _tictoclear
  001f1	83 c0 01	 add	 eax, 1
  001f4	a3 00 00 00 00	 mov	 DWORD PTR _tictoclear, eax
$LN13@NetUpdate:
  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _tictoclear
  001fe	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _firstticstosend
  00204	73 10		 jae	 SHORT $LN12@NetUpdate

; 3599 : 				D_Clearticcmd(tictoclear);                    // clear the maketic the new tic

  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR _tictoclear
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 _D_Clearticcmd
  00211	83 c4 04	 add	 esp, 4
  00214	eb d6		 jmp	 SHORT $LN11@NetUpdate
$LN12@NetUpdate:

; 3600 : 
; 3601 : 			SV_SendTics();

  00216	e8 00 00 00 00	 call	 _SV_SendTics
  0021b	90		 npad	 1

; 3602 : 
; 3603 : 			neededtic = maketic; // the server is a client too

  0021c	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00221	a3 00 00 00 00	 mov	 DWORD PTR _neededtic, eax
$LN25@NetUpdate:

; 3604 : 		}
; 3605 : 	}
; 3606 : 	Net_AckTicker();

  00226	e8 00 00 00 00	 call	 _Net_AckTicker
  0022b	90		 npad	 1

; 3607 : 	M_Ticker();

  0022c	e8 00 00 00 00	 call	 _M_Ticker
  00231	90		 npad	 1

; 3608 : 	CON_Ticker();

  00232	e8 00 00 00 00	 call	 _CON_Ticker
  00237	90		 npad	 1

; 3609 : 	FiletxTicker();

  00238	e8 00 00 00 00	 call	 _FiletxTicker
  0023d	90		 npad	 1
$LN1@NetUpdate:

; 3610 : }

  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c3		 ret	 0
_NetUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SendNetXCmd2
_TEXT	SEGMENT
_id$ = 8						; size = 4
_param$ = 12						; size = 4
_nparam$ = 16						; size = 4
_SendNetXCmd2 PROC					; COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 218  : 	if (demoplayback)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00010	74 05		 je	 SHORT $LN2@SendNetXCm

; 219  : 		return;

  00012	e9 c1 00 00 00	 jmp	 $LN4@SendNetXCm
$LN2@SendNetXCm:

; 220  : 
; 221  : 	if (localtextcmd2[0]+2+nparam > MAXTEXTCMD)

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	6b c8 00	 imul	 ecx, eax, 0
  0001f	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd2[ecx]
  00026	8b 45 10	 mov	 eax, DWORD PTR _nparam$[ebp]
  00029	8d 4c 02 02	 lea	 ecx, DWORD PTR [edx+eax+2]
  0002d	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00033	76 16		 jbe	 SHORT $LN3@SendNetXCm

; 222  : 	{
; 223  : 		I_Error("No more place in the buffer for netcmd %d\n",id);

  00035	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@OPDNFHO@No?5more?5place?5in?5the?5buffer?5for@
  0003e	e8 00 00 00 00	 call	 _I_Error
  00043	83 c4 08	 add	 esp, 8

; 224  : 		return;

  00046	e9 8d 00 00 00	 jmp	 $LN4@SendNetXCm
$LN3@SendNetXCm:

; 225  : 	}
; 226  : 	localtextcmd2[0]++;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	6b c8 00	 imul	 ecx, eax, 0
  00053	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR _localtextcmd2[ecx]
  00059	80 c2 01	 add	 dl, 1
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	88 91 00 00 00
	00		 mov	 BYTE PTR _localtextcmd2[ecx], dl

; 227  : 	localtextcmd2[localtextcmd2[0]] = (UINT8)id;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	6b c8 00	 imul	 ecx, eax, 0
  00072	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd2[ecx]
  00079	8a 45 08	 mov	 al, BYTE PTR _id$[ebp]
  0007c	88 82 00 00 00
	00		 mov	 BYTE PTR _localtextcmd2[edx], al

; 228  : 	if (param && nparam)

  00082	83 7d 0c 00	 cmp	 DWORD PTR _param$[ebp], 0
  00086	74 50		 je	 SHORT $LN4@SendNetXCm
  00088	83 7d 10 00	 cmp	 DWORD PTR _nparam$[ebp], 0
  0008c	74 4a		 je	 SHORT $LN4@SendNetXCm

; 229  : 	{
; 230  : 		M_Memcpy(&localtextcmd2[localtextcmd2[0]+1], param, nparam);

  0008e	8b 45 10	 mov	 eax, DWORD PTR _nparam$[ebp]
  00091	50		 push	 eax
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _param$[ebp]
  00095	51		 push	 ecx
  00096	ba 01 00 00 00	 mov	 edx, 1
  0009b	6b c2 00	 imul	 eax, edx, 0
  0009e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _localtextcmd2[eax]
  000a5	81 c1 01 00 00
	00		 add	 ecx, OFFSET _localtextcmd2+1
  000ab	51		 push	 ecx
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 231  : 		localtextcmd2[0] = (UINT8)(localtextcmd2[0] + (UINT8)nparam);

  000b5	b8 01 00 00 00	 mov	 eax, 1
  000ba	6b c8 00	 imul	 ecx, eax, 0
  000bd	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd2[ecx]
  000c4	0f b6 45 10	 movzx	 eax, BYTE PTR _nparam$[ebp]
  000c8	03 d0		 add	 edx, eax
  000ca	b9 01 00 00 00	 mov	 ecx, 1
  000cf	6b c1 00	 imul	 eax, ecx, 0
  000d2	88 90 00 00 00
	00		 mov	 BYTE PTR _localtextcmd2[eax], dl
$LN4@SendNetXCm:

; 232  : 	}
; 233  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_SendNetXCmd2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _SendNetXCmd
_TEXT	SEGMENT
_id$ = 8						; size = 4
_param$ = 12						; size = 4
_nparam$ = 16						; size = 4
_SendNetXCmd PROC					; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 194  : 	if (demoplayback)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00010	74 05		 je	 SHORT $LN2@SendNetXCm

; 195  : 		return;

  00012	e9 19 01 00 00	 jmp	 $LN6@SendNetXCm
$LN2@SendNetXCm:

; 196  : 
; 197  : 	if (localtextcmd[0]+2+nparam > MAXTEXTCMD)

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	6b c8 00	 imul	 ecx, eax, 0
  0001f	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd[ecx]
  00026	8b 45 10	 mov	 eax, DWORD PTR _nparam$[ebp]
  00029	8d 4c 02 02	 lea	 ecx, DWORD PTR [edx+eax+2]
  0002d	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00033	76 6e		 jbe	 SHORT $LN3@SendNetXCm

; 198  : 	{
; 199  : 		// Don't allow stupid users to fill up the command buffer.
; 200  : 		if (cv_debug) // If you're not in debug, it just ain't gonna happen...

  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0003c	74 31		 je	 SHORT $LN4@SendNetXCm

; 201  : 			I_Error(text[NOROOMNETBUF], id, localtextcmd[0], nparam);

  0003e	8b 45 10	 mov	 eax, DWORD PTR _nparam$[ebp]
  00041	50		 push	 eax
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	6b d1 00	 imul	 edx, ecx, 0
  0004a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _localtextcmd[edx]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  00055	51		 push	 ecx
  00056	ba 04 00 00 00	 mov	 edx, 4
  0005b	6b c2 11	 imul	 eax, edx, 17
  0005e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 _I_Error
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	eb 2f		 jmp	 SHORT $LN5@SendNetXCm
$LN4@SendNetXCm:

; 202  : 		else // ...but it will warn you.
; 203  : 			CONS_Printf(text[NOROOMNETBUF], id, localtextcmd[0], nparam);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _nparam$[ebp]
  00072	50		 push	 eax
  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	6b d1 00	 imul	 edx, ecx, 0
  0007b	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _localtextcmd[edx]
  00082	50		 push	 eax
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  00086	51		 push	 ecx
  00087	ba 04 00 00 00	 mov	 edx, 4
  0008c	6b c2 11	 imul	 eax, edx, 17
  0008f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 _CONS_Printf
  0009b	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@SendNetXCm:

; 204  : 		return;

  0009e	e9 8d 00 00 00	 jmp	 $LN6@SendNetXCm
$LN3@SendNetXCm:

; 205  : 	}
; 206  : 	localtextcmd[0]++;

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	6b c8 00	 imul	 ecx, eax, 0
  000ab	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR _localtextcmd[ecx]
  000b1	80 c2 01	 add	 dl, 1
  000b4	b8 01 00 00 00	 mov	 eax, 1
  000b9	6b c8 00	 imul	 ecx, eax, 0
  000bc	88 91 00 00 00
	00		 mov	 BYTE PTR _localtextcmd[ecx], dl

; 207  : 	localtextcmd[localtextcmd[0]] = (UINT8)id;

  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	6b c8 00	 imul	 ecx, eax, 0
  000ca	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd[ecx]
  000d1	8a 45 08	 mov	 al, BYTE PTR _id$[ebp]
  000d4	88 82 00 00 00
	00		 mov	 BYTE PTR _localtextcmd[edx], al

; 208  : 	if (param && nparam)

  000da	83 7d 0c 00	 cmp	 DWORD PTR _param$[ebp], 0
  000de	74 50		 je	 SHORT $LN6@SendNetXCm
  000e0	83 7d 10 00	 cmp	 DWORD PTR _nparam$[ebp], 0
  000e4	74 4a		 je	 SHORT $LN6@SendNetXCm

; 209  : 	{
; 210  : 		M_Memcpy(&localtextcmd[localtextcmd[0]+1], param, nparam);

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nparam$[ebp]
  000e9	50		 push	 eax
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR _param$[ebp]
  000ed	51		 push	 ecx
  000ee	ba 01 00 00 00	 mov	 edx, 1
  000f3	6b c2 00	 imul	 eax, edx, 0
  000f6	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _localtextcmd[eax]
  000fd	81 c1 01 00 00
	00		 add	 ecx, OFFSET _localtextcmd+1
  00103	51		 push	 ecx
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 211  : 		localtextcmd[0] = (UINT8)(localtextcmd[0] + (UINT8)nparam);

  0010d	b8 01 00 00 00	 mov	 eax, 1
  00112	6b c8 00	 imul	 ecx, eax, 0
  00115	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _localtextcmd[ecx]
  0011c	0f b6 45 10	 movzx	 eax, BYTE PTR _nparam$[ebp]
  00120	03 d0		 add	 edx, eax
  00122	b9 01 00 00 00	 mov	 ecx, 1
  00127	6b c1 00	 imul	 eax, ecx, 0
  0012a	88 90 00 00 00
	00		 mov	 BYTE PTR _localtextcmd[eax], dl
$LN6@SendNetXCm:

; 212  : 	}
; 213  : }

  00130	5f		 pop	 edi
  00131	5e		 pop	 esi
  00132	5b		 pop	 ebx
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
_SendNetXCmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _RegisterNetXCmd
_TEXT	SEGMENT
_id$ = 8						; size = 4
_cmd_f$ = 12						; size = 4
_RegisterNetXCmd PROC					; COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 183  : #ifdef PARANOIA
; 184  : 	if (id >= MAXNETXCMD)
; 185  : 		I_Error("command id %d too big", id);
; 186  : 	if (listnetxcmd[id] != 0)
; 187  : 		I_Error("Command id %d already used", id);
; 188  : #endif
; 189  : 	listnetxcmd[id] = cmd_f;

  00009	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _cmd_f$[ebp]
  0000f	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _listnetxcmd[eax*4], ecx

; 190  : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_RegisterNetXCmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _D_ClientServerInit
_TEXT	SEGMENT
_D_ClientServerInit PROC				; COMDAT

; 1815 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1816 : 	DEBFILE(va("- - -== SRB2 v%d.%.2d.%d"VERSIONSTRING" debugfile ==- - -\n",

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  00010	74 30		 je	 SHORT $LN2@D_ClientSe
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00017	50		 push	 eax
  00018	6a 07		 push	 7
  0001a	6a 00		 push	 0
  0001c	6a 02		 push	 2
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@JNIIEPIH@?9?5?9?5?9?$DN?$DN?5SRB2?5v?$CFd?4?$CF?42d?4?$CFd?5v2?40?47@
  00023	e8 00 00 00 00	 call	 _va
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _fputs
  00031	83 c4 08	 add	 esp, 8
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _fflush
  0003f	83 c4 04	 add	 esp, 4
$LN2@D_ClientSe:

; 1817 : 		VERSION/100, VERSION%100, SUBVERSION));
; 1818 : 
; 1819 : #ifndef NONET
; 1820 : 	COM_AddCommand("getplayernum", Command_GetPlayerNum);

  00042	68 00 00 00 00	 push	 OFFSET _Command_GetPlayerNum
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NGBFIPMA@getplayernum@
  0004c	e8 00 00 00 00	 call	 _COM_AddCommand
  00051	83 c4 08	 add	 esp, 8

; 1821 : 	COM_AddCommand("kick", Command_Kick);

  00054	68 00 00 00 00	 push	 OFFSET _Command_Kick
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_04FNIJDBCC@kick@
  0005e	e8 00 00 00 00	 call	 _COM_AddCommand
  00063	83 c4 08	 add	 esp, 8

; 1822 : 	COM_AddCommand("ban", Command_Ban);

  00066	68 00 00 00 00	 push	 OFFSET _Command_Ban
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_03PNPPPIFF@ban@
  00070	e8 00 00 00 00	 call	 _COM_AddCommand
  00075	83 c4 08	 add	 esp, 8

; 1823 : 	COM_AddCommand("clearbans", Command_ClearBans);

  00078	68 00 00 00 00	 push	 OFFSET _Command_ClearBans
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_09EJOBGHFK@clearbans@
  00082	e8 00 00 00 00	 call	 _COM_AddCommand
  00087	83 c4 08	 add	 esp, 8

; 1824 : 	COM_AddCommand("showbanlist", Command_ShowBan);

  0008a	68 00 00 00 00	 push	 OFFSET _Command_ShowBan
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DDOCKIL@showbanlist@
  00094	e8 00 00 00 00	 call	 _COM_AddCommand
  00099	83 c4 08	 add	 esp, 8

; 1825 : 	COM_AddCommand("reloadbans", Command_ReloadBan);

  0009c	68 00 00 00 00	 push	 OFFSET _Command_ReloadBan
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@COPDNIPL@reloadbans@
  000a6	e8 00 00 00 00	 call	 _COM_AddCommand
  000ab	83 c4 08	 add	 esp, 8

; 1826 : 	COM_AddCommand("connect", Command_connect);

  000ae	68 00 00 00 00	 push	 OFFSET _Command_connect
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_07KAIBNCHO@connect@
  000b8	e8 00 00 00 00	 call	 _COM_AddCommand
  000bd	83 c4 08	 add	 esp, 8

; 1827 : 	COM_AddCommand("nodes", Command_Nodes);

  000c0	68 00 00 00 00	 push	 OFFSET _Command_Nodes
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_05JJOLJDEA@nodes@
  000ca	e8 00 00 00 00	 call	 _COM_AddCommand
  000cf	83 c4 08	 add	 esp, 8

; 1828 : #endif
; 1829 : 
; 1830 : 	RegisterNetXCmd(XD_KICK, Got_KickCmd);

  000d2	68 00 00 00 00	 push	 OFFSET _Got_KickCmd
  000d7	6a 03		 push	 3
  000d9	e8 00 00 00 00	 call	 _RegisterNetXCmd
  000de	83 c4 08	 add	 esp, 8

; 1831 : 	RegisterNetXCmd(XD_ADDPLAYER, Got_AddPlayer);

  000e1	68 00 00 00 00	 push	 OFFSET _Got_AddPlayer
  000e6	6a 0a		 push	 10			; 0000000aH
  000e8	e8 00 00 00 00	 call	 _RegisterNetXCmd
  000ed	83 c4 08	 add	 esp, 8

; 1832 : #ifndef NONET
; 1833 : 	CV_RegisterVar(&cv_allownewplayer);

  000f0	68 00 00 00 00	 push	 OFFSET _cv_allownewplayer
  000f5	e8 00 00 00 00	 call	 _CV_RegisterVar
  000fa	83 c4 04	 add	 esp, 4

; 1834 : 	CV_RegisterVar(&cv_joinnextround);

  000fd	68 00 00 00 00	 push	 OFFSET _cv_joinnextround
  00102	e8 00 00 00 00	 call	 _CV_RegisterVar
  00107	83 c4 04	 add	 esp, 4

; 1835 : 	CV_RegisterVar(&cv_showjoinaddress);

  0010a	68 00 00 00 00	 push	 OFFSET _cv_showjoinaddress
  0010f	e8 00 00 00 00	 call	 _CV_RegisterVar
  00114	83 c4 04	 add	 esp, 4

; 1836 : 	CV_RegisterVar(&cv_consfailprotect);

  00117	68 00 00 00 00	 push	 OFFSET _cv_consfailprotect
  0011c	e8 00 00 00 00	 call	 _CV_RegisterVar
  00121	83 c4 04	 add	 esp, 4

; 1837 : 	CV_RegisterVar(&cv_blamecfail);

  00124	68 00 00 00 00	 push	 OFFSET _cv_blamecfail
  00129	e8 00 00 00 00	 call	 _CV_RegisterVar
  0012e	83 c4 04	 add	 esp, 4

; 1838 : //	CV_RegisterVar(&cv_dumpconsistency);
; 1839 : 	Ban_Load_File(false);

  00131	6a 00		 push	 0
  00133	e8 00 00 00 00	 call	 _Ban_Load_File
  00138	83 c4 04	 add	 esp, 4

; 1840 : #endif
; 1841 : 
; 1842 : 	gametic = 0;

  0013b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gametic, 0

; 1843 : 	localgametic = 0;

  00145	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _leveltime, 0

; 1844 : 
; 1845 : 	// do not send anything before the real begin
; 1846 : 	SV_StopServer();

  0014f	e8 00 00 00 00	 call	 _SV_StopServer
  00154	90		 npad	 1

; 1847 : 	SV_ResetServer();

  00155	e8 00 00 00 00	 call	 _SV_ResetServer
  0015a	90		 npad	 1

; 1848 : 	if (dedicated)

  0015b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00162	74 06		 je	 SHORT $LN3@D_ClientSe

; 1849 : 		SV_SpawnServer();

  00164	e8 00 00 00 00	 call	 _SV_SpawnServer
  00169	90		 npad	 1
$LN3@D_ClientSe:

; 1850 : }

  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
_D_ClientServerInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _ExpandTics
_TEXT	SEGMENT
_delta$ = -4						; size = 4
_low$ = 8						; size = 4
_ExpandTics PROC					; COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 163  : 	INT32 delta;
; 164  : 
; 165  : 	delta = low - (maketic & UINT8_MAX);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  0000e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _low$[ebp]
  00016	2b c8		 sub	 ecx, eax
  00018	89 4d fc	 mov	 DWORD PTR _delta$[ebp], ecx

; 166  : 
; 167  : 	if (delta >= -64 && delta <= 64)

  0001b	83 7d fc c0	 cmp	 DWORD PTR _delta$[ebp], -64 ; ffffffc0H
  0001f	7c 17		 jl	 SHORT $LN2@ExpandTics
  00021	83 7d fc 40	 cmp	 DWORD PTR _delta$[ebp], 64 ; 00000040H
  00025	7f 11		 jg	 SHORT $LN2@ExpandTics

; 168  : 		return (maketic & ~UINT8_MAX) + low;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  0002c	25 00 ff ff ff	 and	 eax, -256		; ffffff00H
  00031	03 45 08	 add	 eax, DWORD PTR _low$[ebp]
  00034	eb 34		 jmp	 SHORT $LN5@ExpandTics
  00036	eb 32		 jmp	 SHORT $LN5@ExpandTics
$LN2@ExpandTics:

; 169  : 	else if (delta > 64)

  00038	83 7d fc 40	 cmp	 DWORD PTR _delta$[ebp], 64 ; 00000040H
  0003c	7e 18		 jle	 SHORT $LN4@ExpandTics

; 170  : 		return (maketic & ~UINT8_MAX) - 256 + low;

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  00043	25 00 ff ff ff	 and	 eax, -256		; ffffff00H
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _low$[ebp]
  0004b	8d 84 08 00 ff
	ff ff		 lea	 eax, DWORD PTR [eax+ecx-256]
  00052	eb 16		 jmp	 SHORT $LN5@ExpandTics
  00054	eb 14		 jmp	 SHORT $LN5@ExpandTics
$LN4@ExpandTics:

; 171  : 	else //if (delta < -64)
; 172  : 		return (maketic & ~UINT8_MAX) + 256 + low;

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR _maketic
  0005b	25 00 ff ff ff	 and	 eax, -256		; ffffff00H
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _low$[ebp]
  00063	8d 84 08 00 01
	00 00		 lea	 eax, DWORD PTR [eax+ecx+256]
$LN5@ExpandTics:

; 173  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_ExpandTics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_clisrv.c
;	COMDAT _D_SaveBan
_TEXT	SEGMENT
_mask$ = -20						; size = 4
_address$ = -16						; size = 4
_reasonlist$ = -12					; size = 4
_i$ = -8						; size = 4
_f$ = -4						; size = 4
_D_SaveBan PROC						; COMDAT

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1131 : 	FILE *f;
; 1132 : 	size_t i;
; 1133 : 	banreason_t *reasonlist = reasonhead;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _reasonhead
  0000e	89 45 f4	 mov	 DWORD PTR _reasonlist$[ebp], eax

; 1134 : 	const char *address, *mask;
; 1135 : 
; 1136 : 	if (!reasonhead)

  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reasonhead, 0
  00018	75 05		 jne	 SHORT $LN5@D_SaveBan

; 1137 : 		return;

  0001a	e9 27 01 00 00	 jmp	 $LN1@D_SaveBan
$LN5@D_SaveBan:

; 1138 : 
; 1139 : 	f = fopen(va("%s"PATHSEP"%s", srb2home, "ban.txt"), "w");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_07JMDBINJP@ban?4txt@
  00029	68 00 00 00 00	 push	 OFFSET _srb2home
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
  00033	e8 00 00 00 00	 call	 _va
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _fopen
  00041	83 c4 08	 add	 esp, 8
  00044	89 45 fc	 mov	 DWORD PTR _f$[ebp], eax

; 1140 : 
; 1141 : 	if (!f)

  00047	83 7d fc 00	 cmp	 DWORD PTR _f$[ebp], 0
  0004b	75 21		 jne	 SHORT $LN6@D_SaveBan

; 1142 : 	{
; 1143 : 		CONS_Printf("%s",text[CANNOTSAVEBANLIST]);

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	6b c8 28	 imul	 ecx, eax, 40
  00055	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0005b	52		 push	 edx
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00061	e8 00 00 00 00	 call	 _CONS_Printf
  00066	83 c4 08	 add	 esp, 8

; 1144 : 		return;

  00069	e9 d8 00 00 00	 jmp	 $LN1@D_SaveBan
$LN6@D_SaveBan:

; 1145 : 	}
; 1146 : 
; 1147 : 	for (i = 0;(address = I_GetBanAddress(i)) != NULL;i++)

  0006e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00075	eb 09		 jmp	 SHORT $LN4@D_SaveBan
$LN2@D_SaveBan:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007a	83 c0 01	 add	 eax, 1
  0007d	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@D_SaveBan:
  00080	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00083	50		 push	 eax
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR _I_GetBanAddress
  0008a	83 c4 04	 add	 esp, 4
  0008d	89 45 f0	 mov	 DWORD PTR _address$[ebp], eax
  00090	83 7d f0 00	 cmp	 DWORD PTR _address$[ebp], 0
  00094	0f 84 a0 00 00
	00		 je	 $LN3@D_SaveBan

; 1148 : 	{
; 1149 : 		if (!I_GetBanMask || (mask = I_GetBanMask(i)) == NULL)

  0009a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _I_GetBanMask, 0
  000a1	74 16		 je	 SHORT $LN9@D_SaveBan
  000a3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a6	50		 push	 eax
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR _I_GetBanMask
  000ad	83 c4 04	 add	 esp, 4
  000b0	89 45 ec	 mov	 DWORD PTR _mask$[ebp], eax
  000b3	83 7d ec 00	 cmp	 DWORD PTR _mask$[ebp], 0
  000b7	75 17		 jne	 SHORT $LN7@D_SaveBan
$LN9@D_SaveBan:

; 1150 : 			fprintf(f, "%s 0", address);

  000b9	8b 45 f0	 mov	 eax, DWORD PTR _address$[ebp]
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_04KOHNNHPH@?$CFs?50@
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _f$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _fprintf
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	eb 19		 jmp	 SHORT $LN8@D_SaveBan
$LN7@D_SaveBan:

; 1151 : 		else
; 1152 : 			fprintf(f, "%s %s", address, mask);

  000d0	8b 45 ec	 mov	 eax, DWORD PTR _mask$[ebp]
  000d3	50		 push	 eax
  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _address$[ebp]
  000d7	51		 push	 ecx
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
  000dd	8b 55 fc	 mov	 edx, DWORD PTR _f$[ebp]
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 _fprintf
  000e6	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@D_SaveBan:

; 1153 : 
; 1154 : 		if (reasonlist && reasonlist->reason)

  000e9	83 7d f4 00	 cmp	 DWORD PTR _reasonlist$[ebp], 0
  000ed	74 21		 je	 SHORT $LN10@D_SaveBan
  000ef	8b 45 f4	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  000f2	83 38 00	 cmp	 DWORD PTR [eax], 0
  000f5	74 19		 je	 SHORT $LN10@D_SaveBan

; 1155 : 			fprintf(f, " %s\n", reasonlist->reason);

  000f7	8b 45 f4	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fc	51		 push	 ecx
  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_04MDKIEGGJ@?5?$CFs?6@
  00102	8b 55 fc	 mov	 edx, DWORD PTR _f$[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _fprintf
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010e	eb 16		 jmp	 SHORT $LN11@D_SaveBan
$LN10@D_SaveBan:

; 1156 : 		else
; 1157 : 			fprintf(f, " %s\n", "NA");

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_02JDNIPIGD@NA@
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_04MDKIEGGJ@?5?$CFs?6@
  0011a	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _fprintf
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@D_SaveBan:

; 1158 : 
; 1159 : 		if (reasonlist) reasonlist = reasonlist->next;

  00126	83 7d f4 00	 cmp	 DWORD PTR _reasonlist$[ebp], 0
  0012a	74 09		 je	 SHORT $LN12@D_SaveBan
  0012c	8b 45 f4	 mov	 eax, DWORD PTR _reasonlist$[ebp]
  0012f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00132	89 4d f4	 mov	 DWORD PTR _reasonlist$[ebp], ecx
$LN12@D_SaveBan:

; 1160 : 	}

  00135	e9 3d ff ff ff	 jmp	 $LN2@D_SaveBan
$LN3@D_SaveBan:

; 1161 : 
; 1162 : 	fclose(f);

  0013a	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 _fclose
  00143	83 c4 04	 add	 esp, 4
$LN1@D_SaveBan:

; 1163 : }

  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
_D_SaveBan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2252 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2253 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2254 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2152 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2153 :         return __stdio_common_vsscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT ___snprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
___snprintf PROC					; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 __vsnprintf
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1952 :         __crt_va_end(_ArgList);

  0002a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1953 :         return _Result;

  00031	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1954 :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
___snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1779 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1780 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1458 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1460 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnprintf PROC					; COMDAT

; 1411 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1413 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1391 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1397 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 842  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 843  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 844  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0002a	83 c4 18	 add	 esp, 24			; 00000018H

; 646  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 100  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
