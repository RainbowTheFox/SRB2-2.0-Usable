; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\m_menu.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_M_EndGame
PUBLIC	_M_DrawGenericMenu
PUBLIC	_M_OnePControlsMenu
PUBLIC	_M_TwoPControlsMenu
PUBLIC	_fromlevelselect
PUBLIC	_menuactive
PUBLIC	_PlayerMenu
PUBLIC	_currentMenu
PUBLIC	_MainDef
PUBLIC	_SinglePlayerDef
PUBLIC	_MultiPlayerDef
PUBLIC	_SetupMultiPlayerDef
PUBLIC	_OptionsDef
PUBLIC	_VidModeDef
PUBLIC	_ControlDef
PUBLIC	_SoundDef
PUBLIC	_ReadDef2
PUBLIC	_ReadDef1
PUBLIC	_LoadDef
PUBLIC	_ControlDef2
PUBLIC	_GameOptionDef
PUBLIC	_NetOptionDef
PUBLIC	_MonitorToggleDef
PUBLIC	_SecretsDef
PUBLIC	_CustomSecretsDef
PUBLIC	_VideoOptionsDef
PUBLIC	_MouseOptionsDef
PUBLIC	_ServerOptionsDef
PUBLIC	_RewardDef
PUBLIC	_LevelSelectDef
PUBLIC	_JoystickDef
PUBLIC	_TimeAttackDef
PUBLIC	_StatsDef
PUBLIC	_Stats2Def
PUBLIC	_Stats3Def
PUBLIC	_Stats4Def
PUBLIC	_PlayerDef
PUBLIC	_CoopOptionsDef
PUBLIC	_RaceOptionsDef
PUBLIC	_MatchOptionsDef
PUBLIC	_TagOptionsDef
PUBLIC	_CTFOptionsDef
PUBLIC	_OGL_FogDef
PUBLIC	_OGL_ColorDef
PUBLIC	_inlevelselect
PUBLIC	_description
PUBLIC	_cv_newgametype
PUBLIC	_cv_nextmap
PUBLIC	_cv_chooseskin
PUBLIC	_cv_serversort
PUBLIC	_cv_chooseroom
PUBLIC	_gametype_cons_t
PUBLIC	??_C@_0EF@JOHOLOFN@You?5are?5already?5playing?4?6Do?5you@ ; `string'
PUBLIC	??_C@_0BC@JKGLIILD@Scramble?5Teams?4?4?4@	; `string'
PUBLIC	??_C@_0M@NOEOEENA@Spectate?4?4?4@		; `string'
PUBLIC	??_C@_0P@MMGGHMED@Switch?5Team?4?4?4@		; `string'
PUBLIC	??_C@_0O@LCLAJJB@Switch?5Map?4?4?4@		; `string'
PUBLIC	??_C@_07DHOMPGHE@secrets@			; `string'
PUBLIC	??_C@_08KLOEOBMI@1?5player@			; `string'
PUBLIC	??_C@_0M@GGLMNLCO@multiplayer@			; `string'
PUBLIC	??_C@_07FOPBDDAL@options@			; `string'
PUBLIC	??_C@_0L@FLHCOFGJ@quit?5?5game@			; `string'
PUBLIC	??_C@_04MOKMKBJN@NEXT@				; `string'
PUBLIC	_Stats5Def
PUBLIC	??_C@_0L@BKMPBHO@Start?5Game@			; `string'
PUBLIC	??_C@_0M@GKMKPJEF@Time?5Attack@			; `string'
PUBLIC	??_C@_0L@HOODANMK@Statistics@			; `string'
PUBLIC	??_C@_08BALKBPO@End?5Game@			; `string'
PUBLIC	??_C@_0O@NNAOEDOE@Single?5Player@		; `string'
PUBLIC	??_C@_04CPBFGEOK@Ping@				; `string'
PUBLIC	??_C@_07OLBIDKLK@Players@			; `string'
PUBLIC	??_C@_08FLACMINN@Gametype@			; `string'
PUBLIC	??_C@_0L@COGJHEJP@serversort@			; `string'
PUBLIC	??_C@_09LFNCDOEF@Local?5Lan@			; `string'
PUBLIC	??_C@_08LDBMAAPD@Internet@			; `string'
PUBLIC	??_C@_0N@OFLEAIKH@serversearch@			; `string'
PUBLIC	??_C@_07BMIEDOEC@Offline@			; `string'
PUBLIC	??_C@_0L@ODFJJPJO@chooseroom@			; `string'
PUBLIC	??_C@_04ILJDOKOL@Room@				; `string'
PUBLIC	??_C@_09OGGNGPHP@Room?5Info@			; `string'
PUBLIC	??_C@_07FLODDGFF@Sort?5By@			; `string'
PUBLIC	??_C@_09EFHACLA@Next?5Page@			; `string'
PUBLIC	??_C@_0O@LKOCLJD@Previous?5Page@		; `string'
PUBLIC	??_C@_07POIENIBA@Refresh@			; `string'
PUBLIC	??_C@_0M@EHMFLPNI@Server?5Name@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	_Connectdef
PUBLIC	??_C@_0P@IHKIPJCO@Connect?5Server@		; `string'
PUBLIC	_ConnectLANdef
PUBLIC	??_C@_0BD@IEDNBGAL@Connect?5LAN?5Server@	; `string'
PUBLIC	??_C@_0O@DFGKGEIG@?5?5IP?5Address?3@		; `string'
PUBLIC	_ConnectIPdef
PUBLIC	_RoomInfodef
PUBLIC	??_C@_05LBFDNLJH@MAP01@				; `string'
PUBLIC	??_C@_05JKHOIIFE@MAP02@				; `string'
PUBLIC	??_C@_05IDGFLJBF@MAP03@				; `string'
PUBLIC	??_C@_05MMCECPNC@MAP04@				; `string'
PUBLIC	??_C@_05NFDPBOJD@MAP05@				; `string'
PUBLIC	??_C@_05POBCENFA@MAP06@				; `string'
PUBLIC	??_C@_05OHAJHMBB@MAP07@				; `string'
PUBLIC	??_C@_05GAJBGANO@MAP08@				; `string'
PUBLIC	??_C@_05HJIKFBJP@MAP09@				; `string'
PUBLIC	??_C@_05KJIKIAOB@MAP10@				; `string'
PUBLIC	??_C@_05LAJBLBKA@MAP11@				; `string'
PUBLIC	??_C@_05JLLMOCGD@MAP12@				; `string'
PUBLIC	??_C@_05ICKHNDCC@MAP13@				; `string'
PUBLIC	??_C@_05MNOGEFOF@MAP14@				; `string'
PUBLIC	??_C@_05NEPNHEKE@MAP15@				; `string'
PUBLIC	??_C@_05PPNACHGH@MAP16@				; `string'
PUBLIC	??_C@_05OGMLBGCG@MAP17@				; `string'
PUBLIC	??_C@_05GBFDAKOJ@MAP18@				; `string'
PUBLIC	??_C@_05HIEIDLKI@MAP19@				; `string'
PUBLIC	??_C@_05KLMMDOLI@MAP20@				; `string'
PUBLIC	??_C@_05LCNHAPPJ@MAP21@				; `string'
PUBLIC	??_C@_05JJPKFMDK@MAP22@				; `string'
PUBLIC	??_C@_05IAOBGNHL@MAP23@				; `string'
PUBLIC	??_C@_05MPKAPLLM@MAP24@				; `string'
PUBLIC	??_C@_05NGLLMKPN@MAP25@				; `string'
PUBLIC	??_C@_05PNJGJJDO@MAP26@				; `string'
PUBLIC	??_C@_05OEINKIHP@MAP27@				; `string'
PUBLIC	??_C@_05GDBFLELA@MAP28@				; `string'
PUBLIC	??_C@_05HKAOIFPB@MAP29@				; `string'
PUBLIC	??_C@_05KKAOFEIP@MAP30@				; `string'
PUBLIC	??_C@_05LDBFGFMO@MAP31@				; `string'
PUBLIC	??_C@_05JIDIDGAN@MAP32@				; `string'
PUBLIC	??_C@_05IBCDAHEM@MAP33@				; `string'
PUBLIC	??_C@_05MOGCJBIL@MAP34@				; `string'
PUBLIC	??_C@_05NHHJKAMK@MAP35@				; `string'
PUBLIC	??_C@_05PMFEPDAJ@MAP36@				; `string'
PUBLIC	??_C@_05OFEPMCEI@MAP37@				; `string'
PUBLIC	??_C@_05GCNHNOIH@MAP38@				; `string'
PUBLIC	??_C@_05HLMMOPMG@MAP39@				; `string'
PUBLIC	??_C@_05KPEBECAK@MAP40@				; `string'
PUBLIC	??_C@_05LGFKHDEL@MAP41@				; `string'
PUBLIC	??_C@_05JNHHCAII@MAP42@				; `string'
PUBLIC	??_C@_05IEGMBBMJ@MAP43@				; `string'
PUBLIC	??_C@_05MLCNIHAO@MAP44@				; `string'
PUBLIC	??_C@_05NCDGLGEP@MAP45@				; `string'
PUBLIC	??_C@_05PJBLOFIM@MAP46@				; `string'
PUBLIC	??_C@_05OAAANEMN@MAP47@				; `string'
PUBLIC	??_C@_05GHJIMIAC@MAP48@				; `string'
PUBLIC	??_C@_05HOIDPJED@MAP49@				; `string'
PUBLIC	??_C@_05KOIDCIDN@MAP50@				; `string'
PUBLIC	??_C@_05LHJIBJHM@MAP51@				; `string'
PUBLIC	??_C@_05JMLFEKLP@MAP52@				; `string'
PUBLIC	??_C@_05IFKOHLPO@MAP53@				; `string'
PUBLIC	??_C@_05MKOPONDJ@MAP54@				; `string'
PUBLIC	??_C@_05NDPENMHI@MAP55@				; `string'
PUBLIC	??_C@_05PINJIPLL@MAP56@				; `string'
PUBLIC	??_C@_05OBMCLOPK@MAP57@				; `string'
PUBLIC	??_C@_05GGFKKCDF@MAP58@				; `string'
PUBLIC	??_C@_05HPEBJDHE@MAP59@				; `string'
PUBLIC	??_C@_05KMMFJGGE@MAP60@				; `string'
PUBLIC	??_C@_05LFNOKHCF@MAP61@				; `string'
PUBLIC	??_C@_05JOPDPEOG@MAP62@				; `string'
PUBLIC	??_C@_05IHOIMFKH@MAP63@				; `string'
PUBLIC	??_C@_05MIKJFDGA@MAP64@				; `string'
PUBLIC	??_C@_05NBLCGCCB@MAP65@				; `string'
PUBLIC	??_C@_05PKJPDBOC@MAP66@				; `string'
PUBLIC	??_C@_05ODIEAAKD@MAP67@				; `string'
PUBLIC	??_C@_05GEBMBMGM@MAP68@				; `string'
PUBLIC	??_C@_05HNAHCNCN@MAP69@				; `string'
PUBLIC	??_C@_05KNAHPMFD@MAP70@				; `string'
PUBLIC	??_C@_05LEBMMNBC@MAP71@				; `string'
PUBLIC	??_C@_05JPDBJONB@MAP72@				; `string'
PUBLIC	??_C@_05IGCKKPJA@MAP73@				; `string'
PUBLIC	??_C@_05MJGLDJFH@MAP74@				; `string'
PUBLIC	??_C@_05NAHAAIBG@MAP75@				; `string'
PUBLIC	??_C@_05PLFNFLNF@MAP76@				; `string'
PUBLIC	??_C@_05OCEGGKJE@MAP77@				; `string'
PUBLIC	??_C@_05GFNOHGFL@MAP78@				; `string'
PUBLIC	??_C@_05HMMFEHBK@MAP79@				; `string'
PUBLIC	??_C@_05KGFLLLGO@MAP80@				; `string'
PUBLIC	??_C@_05LPEAIKCP@MAP81@				; `string'
PUBLIC	??_C@_05JEGNNJOM@MAP82@				; `string'
PUBLIC	??_C@_05INHGOIKN@MAP83@				; `string'
PUBLIC	??_C@_05MCDHHOGK@MAP84@				; `string'
PUBLIC	??_C@_05NLCMEPCL@MAP85@				; `string'
PUBLIC	??_C@_05PAABBMOI@MAP86@				; `string'
PUBLIC	??_C@_05OJBKCNKJ@MAP87@				; `string'
PUBLIC	??_C@_05GOICDBGG@MAP88@				; `string'
PUBLIC	??_C@_05HHJJAACH@MAP89@				; `string'
PUBLIC	??_C@_05KHJJNBFJ@MAP90@				; `string'
PUBLIC	??_C@_05LOICOABI@MAP91@				; `string'
PUBLIC	??_C@_05JFKPLDNL@MAP92@				; `string'
PUBLIC	??_C@_05IMLEICJK@MAP93@				; `string'
PUBLIC	??_C@_05MDPFBEFN@MAP94@				; `string'
PUBLIC	??_C@_05NKOOCFBM@MAP95@				; `string'
PUBLIC	??_C@_05PBMDHGNP@MAP96@				; `string'
PUBLIC	??_C@_05OINIEHJO@MAP97@				; `string'
PUBLIC	??_C@_05GPEAFLFB@MAP98@				; `string'
PUBLIC	??_C@_05HGFLGKBA@MAP99@				; `string'
PUBLIC	??_C@_06IOCGOJN@MAP100@				; `string'
PUBLIC	??_C@_06BBPJFPNM@MAP101@			; `string'
PUBLIC	??_C@_06DKNEAMBP@MAP102@			; `string'
PUBLIC	??_C@_06CDMPDNFO@MAP103@			; `string'
PUBLIC	??_C@_06GMIOKLJJ@MAP104@			; `string'
PUBLIC	??_C@_06HFJFJKNI@MAP105@			; `string'
PUBLIC	??_C@_06FOLIMJBL@MAP106@			; `string'
PUBLIC	??_C@_06EHKDPIFK@MAP107@			; `string'
PUBLIC	??_C@_06MADLOEJF@MAP108@			; `string'
PUBLIC	??_C@_06NJCANFNE@MAP109@			; `string'
PUBLIC	??_C@_06JCAAEKK@MAP110@				; `string'
PUBLIC	??_C@_06BADLDFOL@MAP111@			; `string'
PUBLIC	??_C@_06DLBGGGCI@MAP112@			; `string'
PUBLIC	??_C@_06CCANFHGJ@MAP113@			; `string'
PUBLIC	??_C@_06GNEMMBKO@MAP114@			; `string'
PUBLIC	??_C@_06HEFHPAOP@MAP115@			; `string'
PUBLIC	??_C@_06FPHKKDCM@MAP116@			; `string'
PUBLIC	??_C@_06EGGBJCGN@MAP117@			; `string'
PUBLIC	??_C@_06MBPJIOKC@MAP118@			; `string'
PUBLIC	??_C@_06NIOCLPOD@MAP119@			; `string'
PUBLIC	??_C@_06LGGLKPD@MAP120@				; `string'
PUBLIC	??_C@_06BCHNILLC@MAP121@			; `string'
PUBLIC	??_C@_06DJFANIHB@MAP122@			; `string'
PUBLIC	??_C@_06CAELOJDA@MAP123@			; `string'
PUBLIC	??_C@_06GPAKHPPH@MAP124@			; `string'
PUBLIC	??_C@_06HGBBEOLG@MAP125@			; `string'
PUBLIC	??_C@_06FNDMBNHF@MAP126@			; `string'
PUBLIC	??_C@_06EECHCMDE@MAP127@			; `string'
PUBLIC	??_C@_06MDLPDAPL@MAP128@			; `string'
PUBLIC	??_C@_06NKKEABLK@MAP129@			; `string'
PUBLIC	??_C@_06KKENAME@MAP130@				; `string'
PUBLIC	??_C@_06BDLPOBIF@MAP131@			; `string'
PUBLIC	??_C@_06DIJCLCEG@MAP132@			; `string'
PUBLIC	??_C@_06CBIJIDAH@MAP133@			; `string'
PUBLIC	??_C@_06GOMIBFMA@MAP134@			; `string'
PUBLIC	??_C@_06HHNDCEIB@MAP135@			; `string'
PUBLIC	??_C@_06FMPOHHEC@MAP136@			; `string'
PUBLIC	??_C@_06EFOFEGAD@MAP137@			; `string'
PUBLIC	??_C@_06MCHNFKMM@MAP138@			; `string'
PUBLIC	??_C@_06NLGGGLIN@MAP139@			; `string'
PUBLIC	??_C@_06POLMGEB@MAP140@				; `string'
PUBLIC	??_C@_06BGPAPHAA@MAP141@			; `string'
PUBLIC	??_C@_06DNNNKEMD@MAP142@			; `string'
PUBLIC	??_C@_06CEMGJFIC@MAP143@			; `string'
PUBLIC	??_C@_06GLIHADEF@MAP144@			; `string'
PUBLIC	??_C@_06HCJMDCAE@MAP145@			; `string'
PUBLIC	??_C@_06FJLBGBMH@MAP146@			; `string'
PUBLIC	??_C@_06EAKKFAIG@MAP147@			; `string'
PUBLIC	??_C@_06MHDCEMEJ@MAP148@			; `string'
PUBLIC	??_C@_06NOCJHNAI@MAP149@			; `string'
PUBLIC	??_C@_06OCJKMHG@MAP150@				; `string'
PUBLIC	??_C@_06BHDCJNDH@MAP151@			; `string'
PUBLIC	??_C@_06DMBPMOPE@MAP152@			; `string'
PUBLIC	??_C@_06CFAEPPLF@MAP153@			; `string'
PUBLIC	??_C@_06GKEFGJHC@MAP154@			; `string'
PUBLIC	??_C@_06HDFOFIDD@MAP155@			; `string'
PUBLIC	??_C@_06FIHDALPA@MAP156@			; `string'
PUBLIC	??_C@_06EBGIDKLB@MAP157@			; `string'
PUBLIC	??_C@_06MGPACGHO@MAP158@			; `string'
PUBLIC	??_C@_06NPOLBHDP@MAP159@			; `string'
PUBLIC	??_C@_06MGPBCCP@MAP160@				; `string'
PUBLIC	??_C@_06BFHECDGO@MAP161@			; `string'
PUBLIC	??_C@_06DOFJHAKN@MAP162@			; `string'
PUBLIC	??_C@_06CHECEBOM@MAP163@			; `string'
PUBLIC	??_C@_06GIADNHCL@MAP164@			; `string'
PUBLIC	??_C@_06HBBIOGGK@MAP165@			; `string'
PUBLIC	??_C@_06FKDFLFKJ@MAP166@			; `string'
PUBLIC	??_C@_06EDCOIEOI@MAP167@			; `string'
PUBLIC	??_C@_06MELGJICH@MAP168@			; `string'
PUBLIC	??_C@_06NNKNKJGG@MAP169@			; `string'
PUBLIC	??_C@_06NKNHIBI@MAP170@				; `string'
PUBLIC	??_C@_06BELGEJFJ@MAP171@			; `string'
PUBLIC	??_C@_06DPJLBKJK@MAP172@			; `string'
PUBLIC	??_C@_06CGIACLNL@MAP173@			; `string'
PUBLIC	??_C@_06GJMBLNBM@MAP174@			; `string'
PUBLIC	??_C@_06HANKIMFN@MAP175@			; `string'
PUBLIC	??_C@_06FLPHNPJO@MAP176@			; `string'
PUBLIC	??_C@_06ECOMOONP@MAP177@			; `string'
PUBLIC	??_C@_06MFHEPCBA@MAP178@			; `string'
PUBLIC	??_C@_06NMGPMDFB@MAP179@			; `string'
PUBLIC	??_C@_06GPBDPCF@MAP180@				; `string'
PUBLIC	??_C@_06BPOKAOGE@MAP181@			; `string'
PUBLIC	??_C@_06DEMHFNKH@MAP182@			; `string'
PUBLIC	??_C@_06CNNMGMOG@MAP183@			; `string'
PUBLIC	??_C@_06GCJNPKCB@MAP184@			; `string'
PUBLIC	??_C@_06HLIGMLGA@MAP185@			; `string'
PUBLIC	??_C@_06FAKLJIKD@MAP186@			; `string'
PUBLIC	??_C@_06EJLAKJOC@MAP187@			; `string'
PUBLIC	??_C@_06MOCILFCN@MAP188@			; `string'
PUBLIC	??_C@_06NHDDIEGM@MAP189@			; `string'
PUBLIC	??_C@_06HDDFFBC@MAP190@				; `string'
PUBLIC	??_C@_06BOCIGEFD@MAP191@			; `string'
PUBLIC	??_C@_06DFAFDHJA@MAP192@			; `string'
PUBLIC	??_C@_06CMBOAGNB@MAP193@			; `string'
PUBLIC	??_C@_06GDFPJABG@MAP194@			; `string'
PUBLIC	??_C@_06HKEEKBFH@MAP195@			; `string'
PUBLIC	??_C@_06FBGJPCJE@MAP196@			; `string'
PUBLIC	??_C@_06EIHCMDNF@MAP197@			; `string'
PUBLIC	??_C@_06MPOKNPBK@MAP198@			; `string'
PUBLIC	??_C@_06NGPBOOFL@MAP199@			; `string'
PUBLIC	??_C@_06BKFHMBHD@MAP200@			; `string'
PUBLIC	??_C@_06DEMPADC@MAP201@				; `string'
PUBLIC	??_C@_06CIGBKDPB@MAP202@			; `string'
PUBLIC	??_C@_06DBHKJCLA@MAP203@			; `string'
PUBLIC	??_C@_06HODLAEHH@MAP204@			; `string'
PUBLIC	??_C@_06GHCADFDG@MAP205@			; `string'
PUBLIC	??_C@_06EMANGGPF@MAP206@			; `string'
PUBLIC	??_C@_06FFBGFHLE@MAP207@			; `string'
PUBLIC	??_C@_06NCIOELHL@MAP208@			; `string'
PUBLIC	??_C@_06MLJFHKDK@MAP209@			; `string'
PUBLIC	??_C@_06BLJFKLEE@MAP210@			; `string'
PUBLIC	??_C@_06CIOJKAF@MAP211@				; `string'
PUBLIC	??_C@_06CJKDMJMG@MAP212@			; `string'
PUBLIC	??_C@_06DALIPIIH@MAP213@			; `string'
PUBLIC	??_C@_06HPPJGOEA@MAP214@			; `string'
PUBLIC	??_C@_06GGOCFPAB@MAP215@			; `string'
PUBLIC	??_C@_06ENMPAMMC@MAP216@			; `string'
PUBLIC	??_C@_06FENEDNID@MAP217@			; `string'
PUBLIC	??_C@_06NDEMCBEM@MAP218@			; `string'
PUBLIC	??_C@_06MKFHBAAN@MAP219@			; `string'
PUBLIC	??_C@_06BJNDBFBN@MAP220@			; `string'
PUBLIC	??_C@_06MICEFM@MAP221@				; `string'
PUBLIC	??_C@_06CLOFHHJP@MAP222@			; `string'
PUBLIC	??_C@_06DCPOEGNO@MAP223@			; `string'
PUBLIC	??_C@_06HNLPNABJ@MAP224@			; `string'
PUBLIC	??_C@_06GEKEOBFI@MAP225@			; `string'
PUBLIC	??_C@_06EPIJLCJL@MAP226@			; `string'
PUBLIC	??_C@_06FGJCIDNK@MAP227@			; `string'
PUBLIC	??_C@_06NBAKJPBF@MAP228@			; `string'
PUBLIC	??_C@_06MIBBKOFE@MAP229@			; `string'
PUBLIC	??_C@_06BIBBHPCK@MAP230@			; `string'
PUBLIC	??_C@_06BAKEOGL@MAP231@				; `string'
PUBLIC	??_C@_06CKCHBNKI@MAP232@			; `string'
PUBLIC	??_C@_06DDDMCMOJ@MAP233@			; `string'
PUBLIC	??_C@_06HMHNLKCO@MAP234@			; `string'
PUBLIC	??_C@_06GFGGILGP@MAP235@			; `string'
PUBLIC	??_C@_06EOELNIKM@MAP236@			; `string'
PUBLIC	??_C@_06FHFAOJON@MAP237@			; `string'
PUBLIC	??_C@_06NAMIPFCC@MAP238@			; `string'
PUBLIC	??_C@_06MJNDMEGD@MAP239@			; `string'
PUBLIC	??_C@_06BNFOGJKP@MAP240@			; `string'
PUBLIC	??_C@_06EEFFIOO@MAP241@				; `string'
PUBLIC	??_C@_06CPGIALCN@MAP242@			; `string'
PUBLIC	??_C@_06DGHDDKGM@MAP243@			; `string'
PUBLIC	??_C@_06HJDCKMKL@MAP244@			; `string'
PUBLIC	??_C@_06GACJJNOK@MAP245@			; `string'
PUBLIC	??_C@_06ELAEMOCJ@MAP246@			; `string'
PUBLIC	??_C@_06FCBPPPGI@MAP247@			; `string'
PUBLIC	??_C@_06NFIHODKH@MAP248@			; `string'
PUBLIC	??_C@_06MMJMNCOG@MAP249@			; `string'
PUBLIC	??_C@_06BMJMADJI@MAP250@			; `string'
PUBLIC	??_C@_06FIHDCNJ@MAP251@				; `string'
PUBLIC	??_C@_06COKKGBBK@MAP252@			; `string'
PUBLIC	??_C@_06DHLBFAFL@MAP253@			; `string'
PUBLIC	??_C@_06HIPAMGJM@MAP254@			; `string'
PUBLIC	??_C@_06GBOLPHNN@MAP255@			; `string'
PUBLIC	??_C@_06EKMGKEBO@MAP256@			; `string'
PUBLIC	??_C@_06FDNNJFFP@MAP257@			; `string'
PUBLIC	??_C@_06NEEFIJJA@MAP258@			; `string'
PUBLIC	??_C@_06MNFOLINB@MAP259@			; `string'
PUBLIC	??_C@_06BONKLNMB@MAP260@			; `string'
PUBLIC	??_C@_06HMBIMIA@MAP261@				; `string'
PUBLIC	??_C@_06CMOMNPED@MAP262@			; `string'
PUBLIC	??_C@_06DFPHOOAC@MAP263@			; `string'
PUBLIC	??_C@_06HKLGHIMF@MAP264@			; `string'
PUBLIC	??_C@_06GDKNEJIE@MAP265@			; `string'
PUBLIC	??_C@_06EIIABKEH@MAP266@			; `string'
PUBLIC	??_C@_06FBJLCLAG@MAP267@			; `string'
PUBLIC	??_C@_06NGADDHMJ@MAP268@			; `string'
PUBLIC	??_C@_06MPBIAGII@MAP269@			; `string'
PUBLIC	??_C@_06BPBINHPG@MAP270@			; `string'
PUBLIC	??_C@_06GADOGLH@MAP271@				; `string'
PUBLIC	??_C@_06CNCOLFHE@MAP272@			; `string'
PUBLIC	??_C@_06DEDFIEDF@MAP273@			; `string'
PUBLIC	??_C@_06HLHEBCPC@MAP274@			; `string'
PUBLIC	??_C@_06GCGPCDLD@MAP275@			; `string'
PUBLIC	??_C@_06EJECHAHA@MAP276@			; `string'
PUBLIC	??_C@_06FAFJEBDB@MAP277@			; `string'
PUBLIC	??_C@_06NHMBFNPO@MAP278@			; `string'
PUBLIC	??_C@_06MONKGMLP@MAP279@			; `string'
PUBLIC	??_C@_06BEEEJAML@MAP280@			; `string'
PUBLIC	??_C@_06NFPKBIK@MAP281@				; `string'
PUBLIC	??_C@_06CGHCPCEJ@MAP282@			; `string'
PUBLIC	??_C@_06DPGJMDAI@MAP283@			; `string'
PUBLIC	??_C@_06HACIFFMP@MAP284@			; `string'
PUBLIC	??_C@_06GJDDGEIO@MAP285@			; `string'
PUBLIC	??_C@_06ECBODHEN@MAP286@			; `string'
PUBLIC	??_C@_06FLAFAGAM@MAP287@			; `string'
PUBLIC	??_C@_06NMJNBKMD@MAP288@			; `string'
PUBLIC	??_C@_06MFIGCLIC@MAP289@			; `string'
PUBLIC	??_C@_06BFIGPKPM@MAP290@			; `string'
PUBLIC	??_C@_06MJNMLLN@MAP291@				; `string'
PUBLIC	??_C@_06CHLAJIHO@MAP292@			; `string'
PUBLIC	??_C@_06DOKLKJDP@MAP293@			; `string'
PUBLIC	??_C@_06HBOKDPPI@MAP294@			; `string'
PUBLIC	??_C@_06GIPBAOLJ@MAP295@			; `string'
PUBLIC	??_C@_06EDNMFNHK@MAP296@			; `string'
PUBLIC	??_C@_06FKMHGMDL@MAP297@			; `string'
PUBLIC	??_C@_06NNFPHAPE@MAP298@			; `string'
PUBLIC	??_C@_06MEEEEBLF@MAP299@			; `string'
PUBLIC	??_C@_06KCOLKGBG@MAP300@			; `string'
PUBLIC	??_C@_06LLPAJHFH@MAP301@			; `string'
PUBLIC	??_C@_06JANNMEJE@MAP302@			; `string'
PUBLIC	??_C@_06IJMGPFNF@MAP303@			; `string'
PUBLIC	??_C@_06MGIHGDBC@MAP304@			; `string'
PUBLIC	??_C@_06NPJMFCFD@MAP305@			; `string'
PUBLIC	??_C@_06PELBABJA@MAP306@			; `string'
PUBLIC	??_C@_06ONKKDANB@MAP307@			; `string'
PUBLIC	??_C@_06GKDCCMBO@MAP308@			; `string'
PUBLIC	??_C@_06HDCJBNFP@MAP309@			; `string'
PUBLIC	??_C@_06KDCJMMCB@MAP310@			; `string'
PUBLIC	??_C@_06LKDCPNGA@MAP311@			; `string'
PUBLIC	??_C@_06JBBPKOKD@MAP312@			; `string'
PUBLIC	??_C@_06IIAEJPOC@MAP313@			; `string'
PUBLIC	??_C@_06MHEFAJCF@MAP314@			; `string'
PUBLIC	??_C@_06NOFODIGE@MAP315@			; `string'
PUBLIC	??_C@_06PFHDGLKH@MAP316@			; `string'
PUBLIC	??_C@_06OMGIFKOG@MAP317@			; `string'
PUBLIC	??_C@_06GLPAEGCJ@MAP318@			; `string'
PUBLIC	??_C@_06HCOLHHGI@MAP319@			; `string'
PUBLIC	??_C@_06KBGPHCHI@MAP320@			; `string'
PUBLIC	??_C@_06LIHEEDDJ@MAP321@			; `string'
PUBLIC	??_C@_06JDFJBAPK@MAP322@			; `string'
PUBLIC	??_C@_06IKECCBLL@MAP323@			; `string'
PUBLIC	??_C@_06MFADLHHM@MAP324@			; `string'
PUBLIC	??_C@_06NMBIIGDN@MAP325@			; `string'
PUBLIC	??_C@_06PHDFNFPO@MAP326@			; `string'
PUBLIC	??_C@_06OOCOOELP@MAP327@			; `string'
PUBLIC	??_C@_06GJLGPIHA@MAP328@			; `string'
PUBLIC	??_C@_06HAKNMJDB@MAP329@			; `string'
PUBLIC	??_C@_06KAKNBIEP@MAP330@			; `string'
PUBLIC	??_C@_06LJLGCJAO@MAP331@			; `string'
PUBLIC	??_C@_06JCJLHKMN@MAP332@			; `string'
PUBLIC	??_C@_06ILIAELIM@MAP333@			; `string'
PUBLIC	??_C@_06MEMBNNEL@MAP334@			; `string'
PUBLIC	??_C@_06NNNKOMAK@MAP335@			; `string'
PUBLIC	??_C@_06PGPHLPMJ@MAP336@			; `string'
PUBLIC	??_C@_06OPOMIOII@MAP337@			; `string'
PUBLIC	??_C@_06GIHEJCEH@MAP338@			; `string'
PUBLIC	??_C@_06HBGPKDAG@MAP339@			; `string'
PUBLIC	??_C@_06KFOCAOMK@MAP340@			; `string'
PUBLIC	??_C@_06LMPJDPIL@MAP341@			; `string'
PUBLIC	??_C@_06JHNEGMEI@MAP342@			; `string'
PUBLIC	??_C@_06IOMPFNAJ@MAP343@			; `string'
PUBLIC	??_C@_06MBIOMLMO@MAP344@			; `string'
PUBLIC	??_C@_06NIJFPKIP@MAP345@			; `string'
PUBLIC	??_C@_06PDLIKJEM@MAP346@			; `string'
PUBLIC	??_C@_06OKKDJIAN@MAP347@			; `string'
PUBLIC	??_C@_06GNDLIEMC@MAP348@			; `string'
PUBLIC	??_C@_06HECALFID@MAP349@			; `string'
PUBLIC	??_C@_06KECAGEPN@MAP350@			; `string'
PUBLIC	??_C@_06LNDLFFLM@MAP351@			; `string'
PUBLIC	??_C@_06JGBGAGHP@MAP352@			; `string'
PUBLIC	??_C@_06IPANDHDO@MAP353@			; `string'
PUBLIC	??_C@_06MAEMKBPJ@MAP354@			; `string'
PUBLIC	??_C@_06NJFHJALI@MAP355@			; `string'
PUBLIC	??_C@_06PCHKMDHL@MAP356@			; `string'
PUBLIC	??_C@_06OLGBPCDK@MAP357@			; `string'
PUBLIC	??_C@_06GMPJOOPF@MAP358@			; `string'
PUBLIC	??_C@_06HFOCNPLE@MAP359@			; `string'
PUBLIC	??_C@_06KGGGNKKE@MAP360@			; `string'
PUBLIC	??_C@_06LPHNOLOF@MAP361@			; `string'
PUBLIC	??_C@_06JEFALICG@MAP362@			; `string'
PUBLIC	??_C@_06INELIJGH@MAP363@			; `string'
PUBLIC	??_C@_06MCAKBPKA@MAP364@			; `string'
PUBLIC	??_C@_06NLBBCOOB@MAP365@			; `string'
PUBLIC	??_C@_06PADMHNCC@MAP366@			; `string'
PUBLIC	??_C@_06OJCHEMGD@MAP367@			; `string'
PUBLIC	??_C@_06GOLPFAKM@MAP368@			; `string'
PUBLIC	??_C@_06HHKEGBON@MAP369@			; `string'
PUBLIC	??_C@_06KHKELAJD@MAP370@			; `string'
PUBLIC	??_C@_06LOLPIBNC@MAP371@			; `string'
PUBLIC	??_C@_06JFJCNCBB@MAP372@			; `string'
PUBLIC	??_C@_06IMIJODFA@MAP373@			; `string'
PUBLIC	??_C@_06MDMIHFJH@MAP374@			; `string'
PUBLIC	??_C@_06NKNDEENG@MAP375@			; `string'
PUBLIC	??_C@_06PBPOBHBF@MAP376@			; `string'
PUBLIC	??_C@_06OIOFCGFE@MAP377@			; `string'
PUBLIC	??_C@_06GPHNDKJL@MAP378@			; `string'
PUBLIC	??_C@_06HGGGALNK@MAP379@			; `string'
PUBLIC	??_C@_06KMPIPHKO@MAP380@			; `string'
PUBLIC	??_C@_06LFODMGOP@MAP381@			; `string'
PUBLIC	??_C@_06JOMOJFCM@MAP382@			; `string'
PUBLIC	??_C@_06IHNFKEGN@MAP383@			; `string'
PUBLIC	??_C@_06MIJEDCKK@MAP384@			; `string'
PUBLIC	??_C@_06NBIPADOL@MAP385@			; `string'
PUBLIC	??_C@_06PKKCFACI@MAP386@			; `string'
PUBLIC	??_C@_06ODLJGBGJ@MAP387@			; `string'
PUBLIC	??_C@_06GECBHNKG@MAP388@			; `string'
PUBLIC	??_C@_06HNDKEMOH@MAP389@			; `string'
PUBLIC	??_C@_06KNDKJNJJ@MAP390@			; `string'
PUBLIC	??_C@_06LECBKMNI@MAP391@			; `string'
PUBLIC	??_C@_06JPAMPPBL@MAP392@			; `string'
PUBLIC	??_C@_06IGBHMOFK@MAP393@			; `string'
PUBLIC	??_C@_06MJFGFIJN@MAP394@			; `string'
PUBLIC	??_C@_06NAENGJNM@MAP395@			; `string'
PUBLIC	??_C@_06PLGADKBP@MAP396@			; `string'
PUBLIC	??_C@_06OCHLALFO@MAP397@			; `string'
PUBLIC	??_C@_06GFODBHJB@MAP398@			; `string'
PUBLIC	??_C@_06HMPICGNA@MAP399@			; `string'
PUBLIC	??_C@_06DPDMJOKP@MAP400@			; `string'
PUBLIC	??_C@_06CGCHKPOO@MAP401@			; `string'
PUBLIC	??_C@_06NAKPMCN@MAP402@				; `string'
PUBLIC	??_C@_06BEBBMNGM@MAP403@			; `string'
PUBLIC	??_C@_06FLFAFLKL@MAP404@			; `string'
PUBLIC	??_C@_06ECELGKOK@MAP405@			; `string'
PUBLIC	??_C@_06GJGGDJCJ@MAP406@			; `string'
PUBLIC	??_C@_06HAHNAIGI@MAP407@			; `string'
PUBLIC	??_C@_06PHOFBEKH@MAP408@			; `string'
PUBLIC	??_C@_06OOPOCFOG@MAP409@			; `string'
PUBLIC	??_C@_06DOPOPEJI@MAP410@			; `string'
PUBLIC	??_C@_06CHOFMFNJ@MAP411@			; `string'
PUBLIC	??_C@_06MMIJGBK@MAP412@				; `string'
PUBLIC	??_C@_06BFNDKHFL@MAP413@			; `string'
PUBLIC	??_C@_06FKJCDBJM@MAP414@			; `string'
PUBLIC	??_C@_06EDIJAANN@MAP415@			; `string'
PUBLIC	??_C@_06GIKEFDBO@MAP416@			; `string'
PUBLIC	??_C@_06HBLPGCFP@MAP417@			; `string'
PUBLIC	??_C@_06PGCHHOJA@MAP418@			; `string'
PUBLIC	??_C@_06OPDMEPNB@MAP419@			; `string'
PUBLIC	??_C@_06DMLIEKMB@MAP420@			; `string'
PUBLIC	??_C@_06CFKDHLIA@MAP421@			; `string'
PUBLIC	??_C@_06OIOCIED@MAP422@				; `string'
PUBLIC	??_C@_06BHJFBJAC@MAP423@			; `string'
PUBLIC	??_C@_06FINEIPMF@MAP424@			; `string'
PUBLIC	??_C@_06EBMPLOIE@MAP425@			; `string'
PUBLIC	??_C@_06GKOCONEH@MAP426@			; `string'
PUBLIC	??_C@_06HDPJNMAG@MAP427@			; `string'
PUBLIC	??_C@_06PEGBMAMJ@MAP428@			; `string'
PUBLIC	??_C@_06ONHKPBII@MAP429@			; `string'
PUBLIC	??_C@_06DNHKCAPG@MAP430@			; `string'
PUBLIC	??_C@_06CEGBBBLH@MAP431@			; `string'
PUBLIC	??_C@_06PEMECHE@MAP432@				; `string'
PUBLIC	??_C@_06BGFHHDDF@MAP433@			; `string'
PUBLIC	??_C@_06FJBGOFPC@MAP434@			; `string'
PUBLIC	??_C@_06EAANNELD@MAP435@			; `string'
PUBLIC	??_C@_06GLCAIHHA@MAP436@			; `string'
PUBLIC	??_C@_06HCDLLGDB@MAP437@			; `string'
PUBLIC	??_C@_06PFKDKKPO@MAP438@			; `string'
PUBLIC	??_C@_06OMLIJLLP@MAP439@			; `string'
PUBLIC	??_C@_06DIDFDGHD@MAP440@			; `string'
PUBLIC	??_C@_06CBCOAHDC@MAP441@			; `string'
PUBLIC	??_C@_06KADFEPB@MAP442@				; `string'
PUBLIC	??_C@_06BDBIGFLA@MAP443@			; `string'
PUBLIC	??_C@_06FMFJPDHH@MAP444@			; `string'
PUBLIC	??_C@_06EFECMCDG@MAP445@			; `string'
PUBLIC	??_C@_06GOGPJBPF@MAP446@			; `string'
PUBLIC	??_C@_06HHHEKALE@MAP447@			; `string'
PUBLIC	??_C@_06PAOMLMHL@MAP448@			; `string'
PUBLIC	??_C@_06OJPHINDK@MAP449@			; `string'
PUBLIC	??_C@_06DJPHFMEE@MAP450@			; `string'
PUBLIC	??_C@_06CAOMGNAF@MAP451@			; `string'
PUBLIC	??_C@_06LMBDOMG@MAP452@				; `string'
PUBLIC	??_C@_06BCNKAPIH@MAP453@			; `string'
PUBLIC	??_C@_06FNJLJJEA@MAP454@			; `string'
PUBLIC	??_C@_06EEIAKIAB@MAP455@			; `string'
PUBLIC	??_C@_06GPKNPLMC@MAP456@			; `string'
PUBLIC	??_C@_06HGLGMKID@MAP457@			; `string'
PUBLIC	??_C@_06PBCONGEM@MAP458@			; `string'
PUBLIC	??_C@_06OIDFOHAN@MAP459@			; `string'
PUBLIC	??_C@_06DLLBOCBN@MAP460@			; `string'
PUBLIC	??_C@_06CCKKNDFM@MAP461@			; `string'
PUBLIC	??_C@_06JIHIAJP@MAP462@				; `string'
PUBLIC	??_C@_06BAJMLBNO@MAP463@			; `string'
PUBLIC	??_C@_06FPNNCHBJ@MAP464@			; `string'
PUBLIC	??_C@_06EGMGBGFI@MAP465@			; `string'
PUBLIC	??_C@_06GNOLEFJL@MAP466@			; `string'
PUBLIC	??_C@_06HEPAHENK@MAP467@			; `string'
PUBLIC	??_C@_06PDGIGIBF@MAP468@			; `string'
PUBLIC	??_C@_06OKHDFJFE@MAP469@			; `string'
PUBLIC	??_C@_06DKHDIICK@MAP470@			; `string'
PUBLIC	??_C@_06CDGILJGL@MAP471@			; `string'
PUBLIC	??_C@_06IEFOKKI@MAP472@				; `string'
PUBLIC	??_C@_06BBFONLOJ@MAP473@			; `string'
PUBLIC	??_C@_06FOBPENCO@MAP474@			; `string'
PUBLIC	??_C@_06EHAEHMGP@MAP475@			; `string'
PUBLIC	??_C@_06GMCJCPKM@MAP476@			; `string'
PUBLIC	??_C@_06HFDCBOON@MAP477@			; `string'
PUBLIC	??_C@_06PCKKACCC@MAP478@			; `string'
PUBLIC	??_C@_06OLLBDDGD@MAP479@			; `string'
PUBLIC	??_C@_06DBCPMPBH@MAP480@			; `string'
PUBLIC	??_C@_06CIDEPOFG@MAP481@			; `string'
PUBLIC	??_C@_06DBJKNJF@MAP482@				; `string'
PUBLIC	??_C@_06BKACJMNE@MAP483@			; `string'
PUBLIC	??_C@_06FFEDAKBD@MAP484@			; `string'
PUBLIC	??_C@_06EMFIDLFC@MAP485@			; `string'
PUBLIC	??_C@_06GHHFGIJB@MAP486@			; `string'
PUBLIC	??_C@_06HOGOFJNA@MAP487@			; `string'
PUBLIC	??_C@_06PJPGEFBP@MAP488@			; `string'
PUBLIC	??_C@_06OAONHEFO@MAP489@			; `string'
PUBLIC	??_C@_06DAONKFCA@MAP490@			; `string'
PUBLIC	??_C@_06CJPGJEGB@MAP491@			; `string'
PUBLIC	??_C@_06CNLMHKC@MAP492@				; `string'
PUBLIC	??_C@_06BLMAPGOD@MAP493@			; `string'
PUBLIC	??_C@_06FEIBGACE@MAP494@			; `string'
PUBLIC	??_C@_06ENJKFBGF@MAP495@			; `string'
PUBLIC	??_C@_06GGLHACKG@MAP496@			; `string'
PUBLIC	??_C@_06HPKMDDOH@MAP497@			; `string'
PUBLIC	??_C@_06PIDECPCI@MAP498@			; `string'
PUBLIC	??_C@_06OBCPBOGJ@MAP499@			; `string'
PUBLIC	??_C@_06IHIAPJMK@MAP500@			; `string'
PUBLIC	??_C@_06JOJLMIIL@MAP501@			; `string'
PUBLIC	??_C@_06LFLGJLEI@MAP502@			; `string'
PUBLIC	??_C@_06KMKNKKAJ@MAP503@			; `string'
PUBLIC	??_C@_06ODOMDMMO@MAP504@			; `string'
PUBLIC	??_C@_06PKPHANIP@MAP505@			; `string'
PUBLIC	??_C@_06NBNKFOEM@MAP506@			; `string'
PUBLIC	??_C@_06MIMBGPAN@MAP507@			; `string'
PUBLIC	??_C@_06EPFJHDMC@MAP508@			; `string'
PUBLIC	??_C@_06FGECECID@MAP509@			; `string'
PUBLIC	??_C@_06IGECJDPN@MAP510@			; `string'
PUBLIC	??_C@_06JPFJKCLM@MAP511@			; `string'
PUBLIC	??_C@_06LEHEPBHP@MAP512@			; `string'
PUBLIC	??_C@_06KNGPMADO@MAP513@			; `string'
PUBLIC	??_C@_06OCCOFGPJ@MAP514@			; `string'
PUBLIC	??_C@_06PLDFGHLI@MAP515@			; `string'
PUBLIC	??_C@_06NABIDEHL@MAP516@			; `string'
PUBLIC	??_C@_06MJADAFDK@MAP517@			; `string'
PUBLIC	??_C@_06EOJLBJPF@MAP518@			; `string'
PUBLIC	??_C@_06FHIACILE@MAP519@			; `string'
PUBLIC	??_C@_06IEAECNKE@MAP520@			; `string'
PUBLIC	??_C@_06JNBPBMOF@MAP521@			; `string'
PUBLIC	??_C@_06LGDCEPCG@MAP522@			; `string'
PUBLIC	??_C@_06KPCJHOGH@MAP523@			; `string'
PUBLIC	??_C@_06OAGIOIKA@MAP524@			; `string'
PUBLIC	??_C@_06PJHDNJOB@MAP525@			; `string'
PUBLIC	??_C@_06NCFOIKCC@MAP526@			; `string'
PUBLIC	??_C@_06MLEFLLGD@MAP527@			; `string'
PUBLIC	??_C@_06EMNNKHKM@MAP528@			; `string'
PUBLIC	??_C@_06FFMGJGON@MAP529@			; `string'
PUBLIC	??_C@_06IFMGEHJD@MAP530@			; `string'
PUBLIC	??_C@_06JMNNHGNC@MAP531@			; `string'
PUBLIC	??_C@_06LHPACFBB@MAP532@			; `string'
PUBLIC	??_C@_06KOOLBEFA@MAP533@			; `string'
PUBLIC	??_C@_06OBKKICJH@MAP534@			; `string'
PUBLIC	??_C@_06PILBLDNG@MAP535@			; `string'
PUBLIC	??_C@_06NDJMOABF@MAP536@			; `string'
PUBLIC	??_C@_06MKIHNBFE@MAP537@			; `string'
PUBLIC	??_C@_06ENBPMNJL@MAP538@			; `string'
PUBLIC	??_C@_06FEAEPMNK@MAP539@			; `string'
PUBLIC	??_C@_06IAIJFBBG@MAP540@			; `string'
PUBLIC	??_C@_06JJJCGAFH@MAP541@			; `string'
PUBLIC	??_C@_06LCLPDDJE@MAP542@			; `string'
PUBLIC	??_C@_06KLKEACNF@MAP543@			; `string'
PUBLIC	??_C@_06OEOFJEBC@MAP544@			; `string'
PUBLIC	??_C@_06PNPOKFFD@MAP545@			; `string'
PUBLIC	??_C@_06NGNDPGJA@MAP546@			; `string'
PUBLIC	??_C@_06MPMIMHNB@MAP547@			; `string'
PUBLIC	??_C@_06EIFANLBO@MAP548@			; `string'
PUBLIC	??_C@_06FBELOKFP@MAP549@			; `string'
PUBLIC	??_C@_06IBELDLCB@MAP550@			; `string'
PUBLIC	??_C@_06JIFAAKGA@MAP551@			; `string'
PUBLIC	??_C@_06LDHNFJKD@MAP552@			; `string'
PUBLIC	??_C@_06KKGGGIOC@MAP553@			; `string'
PUBLIC	??_C@_06OFCHPOCF@MAP554@			; `string'
PUBLIC	??_C@_06PMDMMPGE@MAP555@			; `string'
PUBLIC	??_C@_06NHBBJMKH@MAP556@			; `string'
PUBLIC	??_C@_06MOAKKNOG@MAP557@			; `string'
PUBLIC	??_C@_06EJJCLBCJ@MAP558@			; `string'
PUBLIC	??_C@_06FAIJIAGI@MAP559@			; `string'
PUBLIC	??_C@_06IDANIFHI@MAP560@			; `string'
PUBLIC	??_C@_06JKBGLEDJ@MAP561@			; `string'
PUBLIC	??_C@_06LBDLOHPK@MAP562@			; `string'
PUBLIC	??_C@_06KICANGLL@MAP563@			; `string'
PUBLIC	??_C@_06OHGBEAHM@MAP564@			; `string'
PUBLIC	??_C@_06POHKHBDN@MAP565@			; `string'
PUBLIC	??_C@_06NFFHCCPO@MAP566@			; `string'
PUBLIC	??_C@_06MMEMBDLP@MAP567@			; `string'
PUBLIC	??_C@_06ELNEAPHA@MAP568@			; `string'
PUBLIC	??_C@_06FCMPDODB@MAP569@			; `string'
PUBLIC	??_C@_06ICMPOPEP@MAP570@			; `string'
PUBLIC	??_C@_06JLNENOAO@MAP571@			; `string'
PUBLIC	??_C@_06LAPJINMN@MAP572@			; `string'
PUBLIC	??_C@_06KJOCLMIM@MAP573@			; `string'
PUBLIC	??_C@_06OGKDCKEL@MAP574@			; `string'
PUBLIC	??_C@_06PPLIBLAK@MAP575@			; `string'
PUBLIC	??_C@_06NEJFEIMJ@MAP576@			; `string'
PUBLIC	??_C@_06MNIOHJII@MAP577@			; `string'
PUBLIC	??_C@_06EKBGGFEH@MAP578@			; `string'
PUBLIC	??_C@_06FDANFEAG@MAP579@			; `string'
PUBLIC	??_C@_06IJJDKIHC@MAP580@			; `string'
PUBLIC	??_C@_06JAIIJJDD@MAP581@			; `string'
PUBLIC	??_C@_06LLKFMKPA@MAP582@			; `string'
PUBLIC	??_C@_06KCLOPLLB@MAP583@			; `string'
PUBLIC	??_C@_06ONPPGNHG@MAP584@			; `string'
PUBLIC	??_C@_06PEOEFMDH@MAP585@			; `string'
PUBLIC	??_C@_06NPMJAPPE@MAP586@			; `string'
PUBLIC	??_C@_06MGNCDOLF@MAP587@			; `string'
PUBLIC	??_C@_06EBEKCCHK@MAP588@			; `string'
PUBLIC	??_C@_06FIFBBDDL@MAP589@			; `string'
PUBLIC	??_C@_06IIFBMCEF@MAP590@			; `string'
PUBLIC	??_C@_06JBEKPDAE@MAP591@			; `string'
PUBLIC	??_C@_06LKGHKAMH@MAP592@			; `string'
PUBLIC	??_C@_06KDHMJBIG@MAP593@			; `string'
PUBLIC	??_C@_06OMDNAHEB@MAP594@			; `string'
PUBLIC	??_C@_06PFCGDGAA@MAP595@			; `string'
PUBLIC	??_C@_06NOALGFMD@MAP596@			; `string'
PUBLIC	??_C@_06MHBAFEIC@MAP597@			; `string'
PUBLIC	??_C@_06EAIIEIEN@MAP598@			; `string'
PUBLIC	??_C@_06FJJDHJAM@MAP599@			; `string'
PUBLIC	??_C@_06JFDFFGCE@MAP600@			; `string'
PUBLIC	??_C@_06IMCOGHGF@MAP601@			; `string'
PUBLIC	??_C@_06KHADDEKG@MAP602@			; `string'
PUBLIC	??_C@_06LOBIAFOH@MAP603@			; `string'
PUBLIC	??_C@_06PBFJJDCA@MAP604@			; `string'
PUBLIC	??_C@_06OIECKCGB@MAP605@			; `string'
PUBLIC	??_C@_06MDGPPBKC@MAP606@			; `string'
PUBLIC	??_C@_06NKHEMAOD@MAP607@			; `string'
PUBLIC	??_C@_06FNOMNMCM@MAP608@			; `string'
PUBLIC	??_C@_06EEPHONGN@MAP609@			; `string'
PUBLIC	??_C@_06JEPHDMBD@MAP610@			; `string'
PUBLIC	??_C@_06INOMANFC@MAP611@			; `string'
PUBLIC	??_C@_06KGMBFOJB@MAP612@			; `string'
PUBLIC	??_C@_06LPNKGPNA@MAP613@			; `string'
PUBLIC	??_C@_06PAJLPJBH@MAP614@			; `string'
PUBLIC	??_C@_06OJIAMIFG@MAP615@			; `string'
PUBLIC	??_C@_06MCKNJLJF@MAP616@			; `string'
PUBLIC	??_C@_06NLLGKKNE@MAP617@			; `string'
PUBLIC	??_C@_06FMCOLGBL@MAP618@			; `string'
PUBLIC	??_C@_06EFDFIHFK@MAP619@			; `string'
PUBLIC	??_C@_06JGLBICEK@MAP620@			; `string'
PUBLIC	??_C@_06IPKKLDAL@MAP621@			; `string'
PUBLIC	??_C@_06KEIHOAMI@MAP622@			; `string'
PUBLIC	??_C@_06LNJMNBIJ@MAP623@			; `string'
PUBLIC	??_C@_06PCNNEHEO@MAP624@			; `string'
PUBLIC	??_C@_06OLMGHGAP@MAP625@			; `string'
PUBLIC	??_C@_06MAOLCFMM@MAP626@			; `string'
PUBLIC	??_C@_06NJPABEIN@MAP627@			; `string'
PUBLIC	??_C@_06FOGIAIEC@MAP628@			; `string'
PUBLIC	??_C@_06EHHDDJAD@MAP629@			; `string'
PUBLIC	??_C@_06JHHDOIHN@MAP630@			; `string'
PUBLIC	??_C@_06IOGINJDM@MAP631@			; `string'
PUBLIC	??_C@_06KFEFIKPP@MAP632@			; `string'
PUBLIC	??_C@_06LMFOLLLO@MAP633@			; `string'
PUBLIC	??_C@_06PDBPCNHJ@MAP634@			; `string'
PUBLIC	??_C@_06OKAEBMDI@MAP635@			; `string'
PUBLIC	??_C@_06MBCJEPPL@MAP636@			; `string'
PUBLIC	??_C@_06NIDCHOLK@MAP637@			; `string'
PUBLIC	??_C@_06FPKKGCHF@MAP638@			; `string'
PUBLIC	??_C@_06EGLBFDDE@MAP639@			; `string'
PUBLIC	??_C@_06JCDMPOPI@MAP640@			; `string'
PUBLIC	??_C@_06ILCHMPLJ@MAP641@			; `string'
PUBLIC	??_C@_06KAAKJMHK@MAP642@			; `string'
PUBLIC	??_C@_06LJBBKNDL@MAP643@			; `string'
PUBLIC	??_C@_06PGFADLPM@MAP644@			; `string'
PUBLIC	??_C@_06OPELAKLN@MAP645@			; `string'
PUBLIC	??_C@_06MEGGFJHO@MAP646@			; `string'
PUBLIC	??_C@_06NNHNGIDP@MAP647@			; `string'
PUBLIC	??_C@_06FKOFHEPA@MAP648@			; `string'
PUBLIC	??_C@_06EDPOEFLB@MAP649@			; `string'
PUBLIC	??_C@_06JDPOJEMP@MAP650@			; `string'
PUBLIC	??_C@_06IKOFKFIO@MAP651@			; `string'
PUBLIC	??_C@_06KBMIPGEN@MAP652@			; `string'
PUBLIC	??_C@_06LINDMHAM@MAP653@			; `string'
PUBLIC	??_C@_06PHJCFBML@MAP654@			; `string'
PUBLIC	??_C@_06OOIJGAIK@MAP655@			; `string'
PUBLIC	??_C@_06MFKEDDEJ@MAP656@			; `string'
PUBLIC	??_C@_06NMLPACAI@MAP657@			; `string'
PUBLIC	??_C@_06FLCHBOMH@MAP658@			; `string'
PUBLIC	??_C@_06ECDMCPIG@MAP659@			; `string'
PUBLIC	??_C@_06JBLICKJG@MAP660@			; `string'
PUBLIC	??_C@_06IIKDBLNH@MAP661@			; `string'
PUBLIC	??_C@_06KDIOEIBE@MAP662@			; `string'
PUBLIC	??_C@_06LKJFHJFF@MAP663@			; `string'
PUBLIC	??_C@_06PFNEOPJC@MAP664@			; `string'
PUBLIC	??_C@_06OMMPNOND@MAP665@			; `string'
PUBLIC	??_C@_06MHOCINBA@MAP666@			; `string'
PUBLIC	??_C@_06NOPJLMFB@MAP667@			; `string'
PUBLIC	??_C@_06FJGBKAJO@MAP668@			; `string'
PUBLIC	??_C@_06EAHKJBNP@MAP669@			; `string'
PUBLIC	??_C@_06JAHKEAKB@MAP670@			; `string'
PUBLIC	??_C@_06IJGBHBOA@MAP671@			; `string'
PUBLIC	??_C@_06KCEMCCCD@MAP672@			; `string'
PUBLIC	??_C@_06LLFHBDGC@MAP673@			; `string'
PUBLIC	??_C@_06PEBGIFKF@MAP674@			; `string'
PUBLIC	??_C@_06ONANLEOE@MAP675@			; `string'
PUBLIC	??_C@_06MGCAOHCH@MAP676@			; `string'
PUBLIC	??_C@_06NPDLNGGG@MAP677@			; `string'
PUBLIC	??_C@_06FIKDMKKJ@MAP678@			; `string'
PUBLIC	??_C@_06EBLIPLOI@MAP679@			; `string'
PUBLIC	??_C@_06JLCGAHJM@MAP680@			; `string'
PUBLIC	??_C@_06ICDNDGNN@MAP681@			; `string'
PUBLIC	??_C@_06KJBAGFBO@MAP682@			; `string'
PUBLIC	??_C@_06LAALFEFP@MAP683@			; `string'
PUBLIC	??_C@_06PPEKMCJI@MAP684@			; `string'
PUBLIC	??_C@_06OGFBPDNJ@MAP685@			; `string'
PUBLIC	??_C@_06MNHMKABK@MAP686@			; `string'
PUBLIC	??_C@_06NEGHJBFL@MAP687@			; `string'
PUBLIC	??_C@_06FDPPINJE@MAP688@			; `string'
PUBLIC	??_C@_06EKOELMNF@MAP689@			; `string'
PUBLIC	??_C@_06JKOEGNKL@MAP690@			; `string'
PUBLIC	??_C@_06IDPPFMOK@MAP691@			; `string'
PUBLIC	??_C@_06KINCAPCJ@MAP692@			; `string'
PUBLIC	??_C@_06LBMJDOGI@MAP693@			; `string'
PUBLIC	??_C@_06POIIKIKP@MAP694@			; `string'
PUBLIC	??_C@_06OHJDJJOO@MAP695@			; `string'
PUBLIC	??_C@_06MMLOMKCN@MAP696@			; `string'
PUBLIC	??_C@_06NFKFPLGM@MAP697@			; `string'
PUBLIC	??_C@_06FCDNOHKD@MAP698@			; `string'
PUBLIC	??_C@_06ELCGNGOC@MAP699@			; `string'
PUBLIC	??_C@_06CNIJDBEB@MAP700@			; `string'
PUBLIC	??_C@_06DEJCAAAA@MAP701@			; `string'
PUBLIC	??_C@_06BPLPFDMD@MAP702@			; `string'
PUBLIC	??_C@_06GKEGCIC@MAP703@				; `string'
PUBLIC	??_C@_06EJOFPEEF@MAP704@			; `string'
PUBLIC	??_C@_06FAPOMFAE@MAP705@			; `string'
PUBLIC	??_C@_06HLNDJGMH@MAP706@			; `string'
PUBLIC	??_C@_06GCMIKHIG@MAP707@			; `string'
PUBLIC	??_C@_06OFFALLEJ@MAP708@			; `string'
PUBLIC	??_C@_06PMELIKAI@MAP709@			; `string'
PUBLIC	??_C@_06CMELFLHG@MAP710@			; `string'
PUBLIC	??_C@_06DFFAGKDH@MAP711@			; `string'
PUBLIC	??_C@_06BOHNDJPE@MAP712@			; `string'
PUBLIC	??_C@_06HGGAILF@MAP713@				; `string'
PUBLIC	??_C@_06EICHJOHC@MAP714@			; `string'
PUBLIC	??_C@_06FBDMKPDD@MAP715@			; `string'
PUBLIC	??_C@_06HKBBPMPA@MAP716@			; `string'
PUBLIC	??_C@_06GDAKMNLB@MAP717@			; `string'
PUBLIC	??_C@_06OEJCNBHO@MAP718@			; `string'
PUBLIC	??_C@_06PNIJOADP@MAP719@			; `string'
PUBLIC	??_C@_06COANOFCP@MAP720@			; `string'
PUBLIC	??_C@_06DHBGNEGO@MAP721@			; `string'
PUBLIC	??_C@_06BMDLIHKN@MAP722@			; `string'
PUBLIC	??_C@_06FCALGOM@MAP723@				; `string'
PUBLIC	??_C@_06EKGBCACL@MAP724@			; `string'
PUBLIC	??_C@_06FDHKBBGK@MAP725@			; `string'
PUBLIC	??_C@_06HIFHECKJ@MAP726@			; `string'
PUBLIC	??_C@_06GBEMHDOI@MAP727@			; `string'
PUBLIC	??_C@_06OGNEGPCH@MAP728@			; `string'
PUBLIC	??_C@_06PPMPFOGG@MAP729@			; `string'
PUBLIC	??_C@_06CPMPIPBI@MAP730@			; `string'
PUBLIC	??_C@_06DGNELOFJ@MAP731@			; `string'
PUBLIC	??_C@_06BNPJONJK@MAP732@			; `string'
PUBLIC	??_C@_06EOCNMNL@MAP733@				; `string'
PUBLIC	??_C@_06ELKDEKBM@MAP734@			; `string'
PUBLIC	??_C@_06FCLIHLFN@MAP735@			; `string'
PUBLIC	??_C@_06HJJFCIJO@MAP736@			; `string'
PUBLIC	??_C@_06GAIOBJNP@MAP737@			; `string'
PUBLIC	??_C@_06OHBGAFBA@MAP738@			; `string'
PUBLIC	??_C@_06POANDEFB@MAP739@			; `string'
PUBLIC	??_C@_06CKIAJJJN@MAP740@			; `string'
PUBLIC	??_C@_06DDJLKINM@MAP741@			; `string'
PUBLIC	??_C@_06BILGPLBP@MAP742@			; `string'
PUBLIC	??_C@_06BKNMKFO@MAP743@				; `string'
PUBLIC	??_C@_06EOOMFMJJ@MAP744@			; `string'
PUBLIC	??_C@_06FHPHGNNI@MAP745@			; `string'
PUBLIC	??_C@_06HMNKDOBL@MAP746@			; `string'
PUBLIC	??_C@_06GFMBAPFK@MAP747@			; `string'
PUBLIC	??_C@_06OCFJBDJF@MAP748@			; `string'
PUBLIC	??_C@_06PLECCCNE@MAP749@			; `string'
PUBLIC	??_C@_06CLECPDKK@MAP750@			; `string'
PUBLIC	??_C@_06DCFJMCOL@MAP751@			; `string'
PUBLIC	??_C@_06BJHEJBCI@MAP752@			; `string'
PUBLIC	??_C@_06GPKAGJ@MAP753@				; `string'
PUBLIC	??_C@_06EPCODGKO@MAP754@			; `string'
PUBLIC	??_C@_06FGDFAHOP@MAP755@			; `string'
PUBLIC	??_C@_06HNBIFECM@MAP756@			; `string'
PUBLIC	??_C@_06GEADGFGN@MAP757@			; `string'
PUBLIC	??_C@_06ODJLHJKC@MAP758@			; `string'
PUBLIC	??_C@_06PKIAEIOD@MAP759@			; `string'
PUBLIC	??_C@_06CJAEENPD@MAP760@			; `string'
PUBLIC	??_C@_06DABPHMLC@MAP761@			; `string'
PUBLIC	??_C@_06BLDCCPHB@MAP762@			; `string'
PUBLIC	??_C@_06CCJBODA@MAP763@				; `string'
PUBLIC	??_C@_06ENGIIIPH@MAP764@			; `string'
PUBLIC	??_C@_06FEHDLJLG@MAP765@			; `string'
PUBLIC	??_C@_06HPFOOKHF@MAP766@			; `string'
PUBLIC	??_C@_06GGEFNLDE@MAP767@			; `string'
PUBLIC	??_C@_06OBNNMHPL@MAP768@			; `string'
PUBLIC	??_C@_06PIMGPGLK@MAP769@			; `string'
PUBLIC	??_C@_06CIMGCHME@MAP770@			; `string'
PUBLIC	??_C@_06DBNNBGIF@MAP771@			; `string'
PUBLIC	??_C@_06BKPAEFEG@MAP772@			; `string'
PUBLIC	??_C@_06DOLHEAH@MAP773@				; `string'
PUBLIC	??_C@_06EMKKOCMA@MAP774@			; `string'
PUBLIC	??_C@_06FFLBNDIB@MAP775@			; `string'
PUBLIC	??_C@_06HOJMIAEC@MAP776@			; `string'
PUBLIC	??_C@_06GHIHLBAD@MAP777@			; `string'
PUBLIC	??_C@_06OABPKNMM@MAP778@			; `string'
PUBLIC	??_C@_06PJAEJMIN@MAP779@			; `string'
PUBLIC	??_C@_06CDJKGAPJ@MAP780@			; `string'
PUBLIC	??_C@_06DKIBFBLI@MAP781@			; `string'
PUBLIC	??_C@_06BBKMACHL@MAP782@			; `string'
PUBLIC	??_C@_06ILHDDDK@MAP783@				; `string'
PUBLIC	??_C@_06EHPGKFPN@MAP784@			; `string'
PUBLIC	??_C@_06FOONJELM@MAP785@			; `string'
PUBLIC	??_C@_06HFMAMHHP@MAP786@			; `string'
PUBLIC	??_C@_06GMNLPGDO@MAP787@			; `string'
PUBLIC	??_C@_06OLEDOKPB@MAP788@			; `string'
PUBLIC	??_C@_06PCFINLLA@MAP789@			; `string'
PUBLIC	??_C@_06CCFIAKMO@MAP790@			; `string'
PUBLIC	??_C@_06DLEDDLIP@MAP791@			; `string'
PUBLIC	??_C@_06BAGOGIEM@MAP792@			; `string'
PUBLIC	??_C@_06JHFFJAN@MAP793@				; `string'
PUBLIC	??_C@_06EGDEMPMK@MAP794@			; `string'
PUBLIC	??_C@_06FPCPPOIL@MAP795@			; `string'
PUBLIC	??_C@_06HEACKNEI@MAP796@			; `string'
PUBLIC	??_C@_06GNBJJMAJ@MAP797@			; `string'
PUBLIC	??_C@_06OKIBIAMG@MAP798@			; `string'
PUBLIC	??_C@_06PDJKLBIH@MAP799@			; `string'
PUBLIC	??_C@_06HFOKCBBH@MAP800@			; `string'
PUBLIC	??_C@_06GMPBBAFG@MAP801@			; `string'
PUBLIC	??_C@_06EHNMEDJF@MAP802@			; `string'
PUBLIC	??_C@_06FOMHHCNE@MAP803@			; `string'
PUBLIC	??_C@_06BBIGOEBD@MAP804@			; `string'
PUBLIC	??_C@_06IJNNFFC@MAP805@				; `string'
PUBLIC	??_C@_06CDLAIGJB@MAP806@			; `string'
PUBLIC	??_C@_06DKKLLHNA@MAP807@			; `string'
PUBLIC	??_C@_06LNDDKLBP@MAP808@			; `string'
PUBLIC	??_C@_06KECIJKFO@MAP809@			; `string'
PUBLIC	??_C@_06HECIELCA@MAP810@			; `string'
PUBLIC	??_C@_06GNDDHKGB@MAP811@			; `string'
PUBLIC	??_C@_06EGBOCJKC@MAP812@			; `string'
PUBLIC	??_C@_06FPAFBIOD@MAP813@			; `string'
PUBLIC	??_C@_06BAEEIOCE@MAP814@			; `string'
PUBLIC	??_C@_06JFPLPGF@MAP815@				; `string'
PUBLIC	??_C@_06CCHCOMKG@MAP816@			; `string'
PUBLIC	??_C@_06DLGJNNOH@MAP817@			; `string'
PUBLIC	??_C@_06LMPBMBCI@MAP818@			; `string'
PUBLIC	??_C@_06KFOKPAGJ@MAP819@			; `string'
PUBLIC	??_C@_06HGGOPFHJ@MAP820@			; `string'
PUBLIC	??_C@_06GPHFMEDI@MAP821@			; `string'
PUBLIC	??_C@_06EEFIJHPL@MAP822@			; `string'
PUBLIC	??_C@_06FNEDKGLK@MAP823@			; `string'
PUBLIC	??_C@_06BCACDAHN@MAP824@			; `string'
PUBLIC	??_C@_06LBJABDM@MAP825@				; `string'
PUBLIC	??_C@_06CADEFCPP@MAP826@			; `string'
PUBLIC	??_C@_06DJCPGDLO@MAP827@			; `string'
PUBLIC	??_C@_06LOLHHPHB@MAP828@			; `string'
PUBLIC	??_C@_06KHKMEODA@MAP829@			; `string'
PUBLIC	??_C@_06HHKMJPEO@MAP830@			; `string'
PUBLIC	??_C@_06GOLHKOAP@MAP831@			; `string'
PUBLIC	??_C@_06EFJKPNMM@MAP832@			; `string'
PUBLIC	??_C@_06FMIBMMIN@MAP833@			; `string'
PUBLIC	??_C@_06BDMAFKEK@MAP834@			; `string'
PUBLIC	??_C@_06KNLGLAL@MAP835@				; `string'
PUBLIC	??_C@_06CBPGDIMI@MAP836@			; `string'
PUBLIC	??_C@_06DIONAJIJ@MAP837@			; `string'
PUBLIC	??_C@_06LPHFBFEG@MAP838@			; `string'
PUBLIC	??_C@_06KGGOCEAH@MAP839@			; `string'
PUBLIC	??_C@_06HCODIJML@MAP840@			; `string'
PUBLIC	??_C@_06GLPILIIK@MAP841@			; `string'
PUBLIC	??_C@_06EANFOLEJ@MAP842@			; `string'
PUBLIC	??_C@_06FJMONKAI@MAP843@			; `string'
PUBLIC	??_C@_06BGIPEMMP@MAP844@			; `string'
PUBLIC	??_C@_06PJEHNIO@MAP845@				; `string'
PUBLIC	??_C@_06CELJCOEN@MAP846@			; `string'
PUBLIC	??_C@_06DNKCBPAM@MAP847@			; `string'
PUBLIC	??_C@_06LKDKADMD@MAP848@			; `string'
PUBLIC	??_C@_06KDCBDCIC@MAP849@			; `string'
PUBLIC	??_C@_06HDCBODPM@MAP850@			; `string'
PUBLIC	??_C@_06GKDKNCLN@MAP851@			; `string'
PUBLIC	??_C@_06EBBHIBHO@MAP852@			; `string'
PUBLIC	??_C@_06FIAMLADP@MAP853@			; `string'
PUBLIC	??_C@_06BHENCGPI@MAP854@			; `string'
PUBLIC	??_C@_06OFGBHLJ@MAP855@				; `string'
PUBLIC	??_C@_06CFHLEEHK@MAP856@			; `string'
PUBLIC	??_C@_06DMGAHFDL@MAP857@			; `string'
PUBLIC	??_C@_06LLPIGJPE@MAP858@			; `string'
PUBLIC	??_C@_06KCODFILF@MAP859@			; `string'
PUBLIC	??_C@_06HBGHFNKF@MAP860@			; `string'
PUBLIC	??_C@_06GIHMGMOE@MAP861@			; `string'
PUBLIC	??_C@_06EDFBDPCH@MAP862@			; `string'
PUBLIC	??_C@_06FKEKAOGG@MAP863@			; `string'
PUBLIC	??_C@_06BFALJIKB@MAP864@			; `string'
PUBLIC	??_C@_06MBAKJOA@MAP865@				; `string'
PUBLIC	??_C@_06CHDNPKCD@MAP866@			; `string'
PUBLIC	??_C@_06DOCGMLGC@MAP867@			; `string'
PUBLIC	??_C@_06LJLONHKN@MAP868@			; `string'
PUBLIC	??_C@_06KAKFOGOM@MAP869@			; `string'
PUBLIC	??_C@_06HAKFDHJC@MAP870@			; `string'
PUBLIC	??_C@_06GJLOAGND@MAP871@			; `string'
PUBLIC	??_C@_06ECJDFFBA@MAP872@			; `string'
PUBLIC	??_C@_06FLIIGEFB@MAP873@			; `string'
PUBLIC	??_C@_06BEMJPCJG@MAP874@			; `string'
PUBLIC	??_C@_06NNCMDNH@MAP875@				; `string'
PUBLIC	??_C@_06CGPPJABE@MAP876@			; `string'
PUBLIC	??_C@_06DPOEKBFF@MAP877@			; `string'
PUBLIC	??_C@_06LIHMLNJK@MAP878@			; `string'
PUBLIC	??_C@_06KBGHIMNL@MAP879@			; `string'
PUBLIC	??_C@_06HLPJHAKP@MAP880@			; `string'
PUBLIC	??_C@_06GCOCEBOO@MAP881@			; `string'
PUBLIC	??_C@_06EJMPBCCN@MAP882@			; `string'
PUBLIC	??_C@_06FANECDGM@MAP883@			; `string'
PUBLIC	??_C@_06BPJFLFKL@MAP884@			; `string'
PUBLIC	??_C@_06GIOIEOK@MAP885@				; `string'
PUBLIC	??_C@_06CNKDNHCJ@MAP886@			; `string'
PUBLIC	??_C@_06DELIOGGI@MAP887@			; `string'
PUBLIC	??_C@_06LDCAPKKH@MAP888@			; `string'
PUBLIC	??_C@_06KKDLMLOG@MAP889@			; `string'
PUBLIC	??_C@_06HKDLBKJI@MAP890@			; `string'
PUBLIC	??_C@_06GDCACLNJ@MAP891@			; `string'
PUBLIC	??_C@_06EIANHIBK@MAP892@			; `string'
PUBLIC	??_C@_06FBBGEJFL@MAP893@			; `string'
PUBLIC	??_C@_06BOFHNPJM@MAP894@			; `string'
PUBLIC	??_C@_06HEMOONN@MAP895@				; `string'
PUBLIC	??_C@_06CMGBLNBO@MAP896@			; `string'
PUBLIC	??_C@_06DFHKIMFP@MAP897@			; `string'
PUBLIC	??_C@_06LCOCJAJA@MAP898@			; `string'
PUBLIC	??_C@_06KLPJKBNB@MAP899@			; `string'
PUBLIC	??_C@_06MNFGEGHC@MAP900@			; `string'
PUBLIC	??_C@_06NEENHHDD@MAP901@			; `string'
PUBLIC	??_C@_06PPGACEPA@MAP902@			; `string'
PUBLIC	??_C@_06OGHLBFLB@MAP903@			; `string'
PUBLIC	??_C@_06KJDKIDHG@MAP904@			; `string'
PUBLIC	??_C@_06LACBLCDH@MAP905@			; `string'
PUBLIC	??_C@_06JLAMOBPE@MAP906@			; `string'
PUBLIC	??_C@_06ICBHNALF@MAP907@			; `string'
PUBLIC	??_C@_06FIPMMHK@MAP908@				; `string'
PUBLIC	??_C@_06BMJEPNDL@MAP909@			; `string'
PUBLIC	??_C@_06MMJECMEF@MAP910@			; `string'
PUBLIC	??_C@_06NFIPBNAE@MAP911@			; `string'
PUBLIC	??_C@_06POKCEOMH@MAP912@			; `string'
PUBLIC	??_C@_06OHLJHPIG@MAP913@			; `string'
PUBLIC	??_C@_06KIPIOJEB@MAP914@			; `string'
PUBLIC	??_C@_06LBODNIAA@MAP915@			; `string'
PUBLIC	??_C@_06JKMOILMD@MAP916@			; `string'
PUBLIC	??_C@_06IDNFLKIC@MAP917@			; `string'
PUBLIC	??_C@_06EENKGEN@MAP918@				; `string'
PUBLIC	??_C@_06BNFGJHAM@MAP919@			; `string'
PUBLIC	??_C@_06MONCJCBM@MAP920@			; `string'
PUBLIC	??_C@_06NHMJKDFN@MAP921@			; `string'
PUBLIC	??_C@_06PMOEPAJO@MAP922@			; `string'
PUBLIC	??_C@_06OFPPMBNP@MAP923@			; `string'
PUBLIC	??_C@_06KKLOFHBI@MAP924@			; `string'
PUBLIC	??_C@_06LDKFGGFJ@MAP925@			; `string'
PUBLIC	??_C@_06JIIIDFJK@MAP926@			; `string'
PUBLIC	??_C@_06IBJDAENL@MAP927@			; `string'
PUBLIC	??_C@_06GALBIBE@MAP928@				; `string'
PUBLIC	??_C@_06BPBACJFF@MAP929@			; `string'
PUBLIC	??_C@_06MPBAPICL@MAP930@			; `string'
PUBLIC	??_C@_06NGALMJGK@MAP931@			; `string'
PUBLIC	??_C@_06PNCGJKKJ@MAP932@			; `string'
PUBLIC	??_C@_06OEDNKLOI@MAP933@			; `string'
PUBLIC	??_C@_06KLHMDNCP@MAP934@			; `string'
PUBLIC	??_C@_06LCGHAMGO@MAP935@			; `string'
PUBLIC	??_C@_06JJEKFPKN@MAP936@			; `string'
PUBLIC	??_C@_06IAFBGOOM@MAP937@			; `string'
PUBLIC	??_C@_06HMJHCCD@MAP938@				; `string'
PUBLIC	??_C@_06BONCEDGC@MAP939@			; `string'
PUBLIC	??_C@_06MKFPOOKO@MAP940@			; `string'
PUBLIC	??_C@_06NDEENPOP@MAP941@			; `string'
PUBLIC	??_C@_06PIGJIMCM@MAP942@			; `string'
PUBLIC	??_C@_06OBHCLNGN@MAP943@			; `string'
PUBLIC	??_C@_06KODDCLKK@MAP944@			; `string'
PUBLIC	??_C@_06LHCIBKOL@MAP945@			; `string'
PUBLIC	??_C@_06JMAFEJCI@MAP946@			; `string'
PUBLIC	??_C@_06IFBOHIGJ@MAP947@			; `string'
PUBLIC	??_C@_06CIGGEKG@MAP948@				; `string'
PUBLIC	??_C@_06BLJNFFOH@MAP949@			; `string'
PUBLIC	??_C@_06MLJNIEJJ@MAP950@			; `string'
PUBLIC	??_C@_06NCIGLFNI@MAP951@			; `string'
PUBLIC	??_C@_06PJKLOGBL@MAP952@			; `string'
PUBLIC	??_C@_06OALANHFK@MAP953@			; `string'
PUBLIC	??_C@_06KPPBEBJN@MAP954@			; `string'
PUBLIC	??_C@_06LGOKHANM@MAP955@			; `string'
PUBLIC	??_C@_06JNMHCDBP@MAP956@			; `string'
PUBLIC	??_C@_06IENMBCFO@MAP957@			; `string'
PUBLIC	??_C@_06DEEAOJB@MAP958@				; `string'
PUBLIC	??_C@_06BKFPDPNA@MAP959@			; `string'
PUBLIC	??_C@_06MJNLDKMA@MAP960@			; `string'
PUBLIC	??_C@_06NAMAALIB@MAP961@			; `string'
PUBLIC	??_C@_06PLONFIEC@MAP962@			; `string'
PUBLIC	??_C@_06OCPGGJAD@MAP963@			; `string'
PUBLIC	??_C@_06KNLHPPME@MAP964@			; `string'
PUBLIC	??_C@_06LEKMMOIF@MAP965@			; `string'
PUBLIC	??_C@_06JPIBJNEG@MAP966@			; `string'
PUBLIC	??_C@_06IGJKKMAH@MAP967@			; `string'
PUBLIC	??_C@_06BACLAMI@MAP968@				; `string'
PUBLIC	??_C@_06BIBJIBIJ@MAP969@			; `string'
PUBLIC	??_C@_06MIBJFAPH@MAP970@			; `string'
PUBLIC	??_C@_06NBACGBLG@MAP971@			; `string'
PUBLIC	??_C@_06PKCPDCHF@MAP972@			; `string'
PUBLIC	??_C@_06ODDEADDE@MAP973@			; `string'
PUBLIC	??_C@_06KMHFJFPD@MAP974@			; `string'
PUBLIC	??_C@_06LFGOKELC@MAP975@			; `string'
PUBLIC	??_C@_06JOEDPHHB@MAP976@			; `string'
PUBLIC	??_C@_06IHFIMGDA@MAP977@			; `string'
PUBLIC	??_C@_06MANKPP@MAP978@				; `string'
PUBLIC	??_C@_06BJNLOLLO@MAP979@			; `string'
PUBLIC	??_C@_06MDEFBHMK@MAP980@			; `string'
PUBLIC	??_C@_06NKFOCGIL@MAP981@			; `string'
PUBLIC	??_C@_06PBHDHFEI@MAP982@			; `string'
PUBLIC	??_C@_06OIGIEEAJ@MAP983@			; `string'
PUBLIC	??_C@_06KHCJNCMO@MAP984@			; `string'
PUBLIC	??_C@_06LODCODIP@MAP985@			; `string'
PUBLIC	??_C@_06JFBPLAEM@MAP986@			; `string'
PUBLIC	??_C@_06IMAEIBAN@MAP987@			; `string'
PUBLIC	??_C@_06LJMJNMC@MAP988@				; `string'
PUBLIC	??_C@_06BCIHKMID@MAP989@			; `string'
PUBLIC	??_C@_06MCIHHNPN@MAP990@			; `string'
PUBLIC	??_C@_06NLJMEMLM@MAP991@			; `string'
PUBLIC	??_C@_06PALBBPHP@MAP992@			; `string'
PUBLIC	??_C@_06OJKKCODO@MAP993@			; `string'
PUBLIC	??_C@_06KGOLLIPJ@MAP994@			; `string'
PUBLIC	??_C@_06LPPAIJLI@MAP995@			; `string'
PUBLIC	??_C@_06JENNNKHL@MAP996@			; `string'
PUBLIC	??_C@_06INMGOLDK@MAP997@			; `string'
PUBLIC	??_C@_06KFOPHPF@MAP998@				; `string'
PUBLIC	??_C@_06BDEFMGLE@MAP999@			; `string'
PUBLIC	??_C@_07FBPADLGE@MAP1000@			; `string'
PUBLIC	??_C@_07EIOLAKCF@MAP1001@			; `string'
PUBLIC	??_C@_07GDMGFJOG@MAP1002@			; `string'
PUBLIC	??_C@_07HKNNGIKH@MAP1003@			; `string'
PUBLIC	??_C@_07DFJMPOGA@MAP1004@			; `string'
PUBLIC	??_C@_07CMIHMPCB@MAP1005@			; `string'
PUBLIC	??_C@_07HKKJMOC@MAP1006@			; `string'
PUBLIC	??_C@_07BOLBKNKD@MAP1007@			; `string'
PUBLIC	??_C@_07JJCJLBGM@MAP1008@			; `string'
PUBLIC	??_C@_07IADCIACN@MAP1009@			; `string'
PUBLIC	??_C@_07FADCFBFD@MAP1010@			; `string'
PUBLIC	??_C@_07EJCJGABC@MAP1011@			; `string'
PUBLIC	??_C@_07GCAEDDNB@MAP1012@			; `string'
PUBLIC	??_C@_07HLBPACJA@MAP1013@			; `string'
PUBLIC	??_C@_07DEFOJEFH@MAP1014@			; `string'
PUBLIC	??_C@_07CNEFKFBG@MAP1015@			; `string'
PUBLIC	??_C@_07GGIPGNF@MAP1016@			; `string'
PUBLIC	??_C@_07BPHDMHJE@MAP1017@			; `string'
PUBLIC	??_C@_07JIOLNLFL@MAP1018@			; `string'
PUBLIC	??_C@_07IBPAOKBK@MAP1019@			; `string'
PUBLIC	??_C@_07FCHEOPAK@MAP1020@			; `string'
PUBLIC	??_C@_07ELGPNOEL@MAP1021@			; `string'
PUBLIC	??_C@_07GAECINII@MAP1022@			; `string'
PUBLIC	??_C@_07HJFJLMMJ@MAP1023@			; `string'
PUBLIC	??_C@_07DGBICKAO@MAP1024@			; `string'
PUBLIC	??_C@_07CPADBLEP@MAP1025@			; `string'
PUBLIC	??_C@_07ECOEIIM@MAP1026@			; `string'
PUBLIC	??_C@_07BNDFHJMN@MAP1027@			; `string'
PUBLIC	??_C@_07JKKNGFAC@MAP1028@			; `string'
PUBLIC	??_C@_07IDLGFEED@MAP1029@			; `string'
PUBLIC	??_C@_07FDLGIFDN@MAP1030@			; `string'
PUBLIC	??_C@_07EKKNLEHM@MAP1031@			; `string'
PUBLIC	??_C@_07GBIAOHLP@MAP1032@			; `string'
PUBLIC	??_C@_07HIJLNGPO@MAP1033@			; `string'
PUBLIC	??_C@_07DHNKEADJ@MAP1034@			; `string'
PUBLIC	??_C@_07COMBHBHI@MAP1035@			; `string'
PUBLIC	??_C@_07MCHHMPMB@nextmap@			; `string'
PUBLIC	??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@HOPLAOAI@chooseskin@			; `string'
PUBLIC	??_C@_04CJHPDIMF@Coop@				; `string'
PUBLIC	??_C@_05FKEBLKAO@Match@				; `string'
PUBLIC	??_C@_0L@LAOGNCMC@Team?5Match@			; `string'
PUBLIC	??_C@_04KKIPOOLE@Race@				; `string'
PUBLIC	??_C@_0N@HJJKODGK@Classic?5Race@		; `string'
PUBLIC	??_C@_03PJHNOEGB@Tag@				; `string'
PUBLIC	??_C@_0O@NNDKJCLH@Hide?5and?5Seek@		; `string'
PUBLIC	??_C@_03JKIMLJNP@CTF@				; `string'
PUBLIC	??_C@_0M@LAFKIDDC@newgametype@			; `string'
PUBLIC	??_C@_09CJBILMAG@Game?5Type@			; `string'
PUBLIC	??_C@_0BG@MLEPJNJO@Advertise?5on?5Internet@	; `string'
PUBLIC	??_C@_05KOHFLOFG@Level@				; `string'
PUBLIC	??_C@_05FHMJPCKA@Start@				; `string'
PUBLIC	_Serverdef
PUBLIC	??_C@_0N@IAAPIHAI@Start?5Server@		; `string'
PUBLIC	??_C@_0N@PBKLIPB@Change?5Level@			; `string'
PUBLIC	_ChangeLevelDef
PUBLIC	??_C@_0M@CKKBCHJC@Select?5Team@			; `string'
PUBLIC	??_C@_07KFLFCEAO@Confirm@			; `string'
PUBLIC	_ChangeTeamDef
PUBLIC	??_C@_0M@NPGFALIE@Change?5Team@			; `string'
PUBLIC	??_C@_0BA@CONBKCME@Scramble?5Method@		; `string'
PUBLIC	_TeamScrambleDef
PUBLIC	??_C@_0P@IMNCILHE@Scramble?5Teams@		; `string'
PUBLIC	??_C@_09KHJLDOGO@HOST?5GAME@			; `string'
PUBLIC	??_C@_0BF@HCDPIHPJ@JOIN?5GAME?5?$CIInternet?$CJ@ ; `string'
PUBLIC	??_C@_0BA@IDEPENBD@JOIN?5GAME?5?$CILAN?$CJ@	; `string'
PUBLIC	??_C@_0BH@KPBOMJON@JOIN?5GAME?5?$CISpecify?5IP?$CJ@ ; `string'
PUBLIC	??_C@_0BA@BPOLLGPH@TWO?5PLAYER?5GAME@		; `string'
PUBLIC	??_C@_0BA@BBGFJJCL@NETWORK?5OPTIONS@		; `string'
PUBLIC	??_C@_0N@IGHAIACE@SETUP?5PLAYER@		; `string'
PUBLIC	??_C@_0P@MJGNPGGH@SETUP?5PLAYER?52@		; `string'
PUBLIC	??_C@_08DKDLDHEI@END?5GAME@			; `string'
PUBLIC	??_C@_07CFCBKCFI@M_MULTI@			; `string'
PUBLIC	??_C@_0M@HOINAANG@Multiplayer@			; `string'
PUBLIC	??_C@_0BJ@GFAKFMCM@Second?5Mouse?5Serial?5Port@	; `string'
PUBLIC	??_C@_0M@BDDJFBE@Use?5Mouse?52@			; `string'
PUBLIC	??_C@_0N@OMPLOIED@Mouse2?5Speed@		; `string'
PUBLIC	??_C@_0BB@KEGGIKEO@Always?5MouseLook@		; `string'
PUBLIC	??_C@_0L@GEFBMDDG@Mouse?5Move@			; `string'
PUBLIC	??_C@_0O@EOGFHHGC@Invert?5Mouse2@		; `string'
PUBLIC	??_C@_0M@KBJPCFEH@Mlook?5Speed@			; `string'
PUBLIC	_SecondMouseCfgdef
PUBLIC	??_C@_08LKGFJEJH@M_OPTTTL@			; `string'
PUBLIC	??_C@_07KDKMIPIP@OPTIONS@			; `string'
PUBLIC	??_C@_09LPFILBGF@Your?5name@			; `string'
PUBLIC	??_C@_0L@JGOLJJBO@Your?5color@			; `string'
PUBLIC	??_C@_0M@KDLJEAHE@Your?5player@			; `string'
PUBLIC	??_C@_0BC@MLNMPNND@Setup?5Controls?4?4?4@	; `string'
PUBLIC	??_C@_0BH@HAHOOOK@Second?5Mouse?5config?4?4?4@	; `string'
PUBLIC	??_C@_07OLGAJEJN@M_PICKP@			; `string'
PUBLIC	??_C@_05MBFAGOBK@SONIC@				; `string'
PUBLIC	??_C@_05LCLLAIMA@TAILS@				; `string'
PUBLIC	??_C@_08JICBNHOH@KNUCKLES@			; `string'
PUBLIC	??_C@_07MFIPBJAI@PLAYER4@			; `string'
PUBLIC	??_C@_07NMJECIEJ@PLAYER5@			; `string'
PUBLIC	??_C@_07PHLJHLIK@PLAYER6@			; `string'
PUBLIC	??_C@_07OOKCEKML@PLAYER7@			; `string'
PUBLIC	??_C@_07GJDKFGAE@PLAYER8@			; `string'
PUBLIC	??_C@_07HACBGHEF@PLAYER9@			; `string'
PUBLIC	??_C@_08NHJDPDDD@PLAYER10@			; `string'
PUBLIC	??_C@_08MOIIMCHC@PLAYER11@			; `string'
PUBLIC	??_C@_08OFKFJBLB@PLAYER12@			; `string'
PUBLIC	??_C@_08PMLOKAPA@PLAYER13@			; `string'
PUBLIC	??_C@_08LDPPDGDH@PLAYER14@			; `string'
PUBLIC	??_C@_08KKOEAHHG@PLAYER15@			; `string'
PUBLIC	??_C@_0BG@LOEPDJFL@Choose?5Your?5Character@	; `string'
PUBLIC	??_C@_06NPAAKFED@Player@			; `string'
PUBLIC	??_C@_06LBCKINCK@Replay@			; `string'
PUBLIC	??_C@_0BC@CBIBPELE@Start?5?$CINo?5Record?$CJ@	; `string'
PUBLIC	??_C@_0P@PGLBMODG@Start?5?$CIRecord?$CJ@	; `string'
PUBLIC	??_C@_0BH@BKAIAIKE@Erase?5Time?5Attack?5Data@	; `string'
PUBLIC	??_C@_0BD@POPHDFGA@Erase?5Secrets?5Data@	; `string'
PUBLIC	_DataOptionsDef
PUBLIC	??_C@_0BF@GPGACHPP@Player?51?5Controls?4?4?4@	; `string'
PUBLIC	??_C@_0BF@BDABACCE@Player?52?5Controls?4?4?4@	; `string'
PUBLIC	??_C@_0BE@NLGEPLBF@Joystick?5Options?4?4?4@	; `string'
PUBLIC	??_C@_0BB@DPCCFBBP@Mouse?5Options?4?4?4@	; `string'
PUBLIC	??_C@_0BA@NDALGNMF@Control?5per?5key@		; `string'
PUBLIC	_ControlsDef
PUBLIC	??_C@_0BJ@KGFACILA@Control?5Configuration?4?4?4@ ; `string'
PUBLIC	??_C@_06JCBBMBIP@Camera@			; `string'
PUBLIC	??_C@_0P@DPAEEKKE@Analog?5Control@		; `string'
PUBLIC	??_C@_07FOKEMHAB@Autoaim@			; `string'
PUBLIC	??_C@_09JOIHIAIG@Crosshair@			; `string'
PUBLIC	_OnePControlsDef
PUBLIC	_TwoPControlsDef
PUBLIC	??_C@_0BA@FCJFFKOD@Game?5Options?4?4?4@		; `string'
PUBLIC	??_C@_0BE@MIHBMEAN@Gametype?5Options?4?4?4@	; `string'
PUBLIC	??_C@_0BC@IONJCCHH@Server?5Options?4?4?4@	; `string'
PUBLIC	??_C@_0BB@GFIJKFEG@Sound?5Options?4?4?4@	; `string'
PUBLIC	??_C@_0BB@JHNOOAMH@Video?5Options?4?4?4@	; `string'
PUBLIC	??_C@_0N@BOMJPEGC@Level?5Select@		; `string'
PUBLIC	??_C@_0M@OHCNEKBN@SRB1?5Remake@			; `string'
PUBLIC	??_C@_0BC@HHPLLDPH@Sonic?5Into?5Dreams@		; `string'
PUBLIC	??_C@_0BC@CBHOBIIP@Mario?5Koopa?5Blast@		; `string'
PUBLIC	_UnlockChecklistDef
PUBLIC	_CustomChecklistDef
PUBLIC	??_C@_0BC@KNHHNDPI@Secrets?5Checklist@		; `string'
PUBLIC	??_C@_0P@INAABHFP@Ultimate?5Cheat@		; `string'
PUBLIC	??_C@_0L@IOEHPHNJ@Sound?5Test@			; `string'
PUBLIC	??_C@_07JMGDFJEK@Gravity@			; `string'
PUBLIC	??_C@_0M@OBJFODL@Throw?5Rings@			; `string'
PUBLIC	??_C@_0BB@MPKJINNG@Get?5All?5Emeralds@		; `string'
PUBLIC	??_C@_0BD@OKJFLHBF@Destroy?5All?5Robots@	; `string'
PUBLIC	??_C@_0O@FEDJDPFC@Beta?5Showcase@		; `string'
PUBLIC	??_C@_0N@LBCBILIL@Bonus?5Levels@		; `string'
PUBLIC	??_C@_07OHGMJLOA@Custom1@			; `string'
PUBLIC	??_C@_07MMEBMICD@Custom2@			; `string'
PUBLIC	??_C@_07NFFKPJGC@Custom3@			; `string'
PUBLIC	??_C@_07JKBLGPKF@Custom4@			; `string'
PUBLIC	??_C@_07IDAAFOOE@Custom5@			; `string'
PUBLIC	??_C@_07KICNANCH@Custom6@			; `string'
PUBLIC	??_C@_07LBDGDMGG@Custom7@			; `string'
PUBLIC	??_C@_07DGKOCAKJ@Custom8@			; `string'
PUBLIC	??_C@_07CPLFBBOI@Custom9@			; `string'
PUBLIC	??_C@_08HPKLLIBA@Custom10@			; `string'
PUBLIC	??_C@_08GGLAIJFB@Custom11@			; `string'
PUBLIC	??_C@_08ENJNNKJC@Custom12@			; `string'
PUBLIC	??_C@_08FEIGOLND@Custom13@			; `string'
PUBLIC	??_C@_08BLMHHNBE@Custom14@			; `string'
PUBLIC	??_C@_08CNMEMFF@Custom15@			; `string'
PUBLIC	??_C@_0BC@IHMDDBIB@SRB1?5Level?5Select@		; `string'
PUBLIC	??_C@_0BC@BCNHIBFP@Neo?5Aerial?5Garden@		; `string'
PUBLIC	??_C@_0P@JCJDPGMD@Video?5Modes?4?4?4@		; `string'
PUBLIC	??_C@_0BD@FELBJLGK@3D?5Card?5Options?4?4?4@	; `string'
PUBLIC	??_C@_0L@JCLLFKLB@Brightness@			; `string'
PUBLIC	??_C@_06PBECKDNL@V?9SYNC@			; `string'
PUBLIC	??_C@_0BC@BOEPICCK@Rain?1Snow?5Density@		; `string'
PUBLIC	??_C@_0BE@ENJIPHCK@Rain?1Snow?5Draw?5Dist@	; `string'
PUBLIC	??_C@_09LMMLKIFK@FPS?5Meter@			; `string'
PUBLIC	??_C@_09GHKIFCLN@Use?5Mouse@			; `string'
PUBLIC	??_C@_0N@KJCDGHGC@Invert?5Mouse@		; `string'
PUBLIC	??_C@_0M@FHIPPBDA@Mouse?5Speed@			; `string'
PUBLIC	??_C@_08FLPNBFBF@Show?5HUD@			; `string'
PUBLIC	??_C@_0BB@CIAPPEJF@HUD?5Player?5Names@		; `string'
PUBLIC	??_C@_0BG@EHGBELJN@High?5Resolution?5Timer@	; `string'
PUBLIC	??_C@_0O@OMGNCNBP@Console?5Color@		; `string'
PUBLIC	??_C@_0BC@JHAJCEJB@Uppercase?5Console@		; `string'
PUBLIC	??_C@_0BA@HDAAEHKL@Data?5Options?4?4?4@		; `string'
PUBLIC	??_C@_0L@KCNGICBH@Time?5Limit@			; `string'
PUBLIC	??_C@_0M@MCIGOLA@Point?5Limit@			; `string'
PUBLIC	??_C@_0BF@FEPAJPMM@Special?5Ring?5Weapons@	; `string'
PUBLIC	??_C@_08MHBHIIHE@Emeralds@			; `string'
PUBLIC	??_C@_0L@OJAPOEPA@Item?5Boxes@			; `string'
PUBLIC	??_C@_0N@PJAHAPGP@Item?5Respawn@		; `string'
PUBLIC	??_C@_0BC@JGGFIAJK@Item?5Respawn?5time@		; `string'
PUBLIC	??_C@_0BH@HLMNLKOD@Server?5controls?5skin?5?$CD@ ; `string'
PUBLIC	??_C@_0N@GEFGBLGK@Sudden?5Death@		; `string'
PUBLIC	??_C@_0BD@JOBIPPI@Intermission?5Timer@		; `string'
PUBLIC	??_C@_0BE@GGICAEJH@Advance?5to?5next?5map@	; `string'
PUBLIC	??_C@_0BK@IHAADEAM@Random?5Monitor?5Toggles?4?4?4@ ; `string'
PUBLIC	??_C@_0BA@KFANFAKC@Coop?5options?4?4?4@		; `string'
PUBLIC	??_C@_0BA@IDOMGDDM@Race?5options?4?4?4@		; `string'
PUBLIC	??_C@_0BB@BFJKPJJ@Match?5options?4?4?4@		; `string'
PUBLIC	??_C@_0P@IJGPKIDF@Tag?5options?4?4?4@		; `string'
PUBLIC	??_C@_0P@BHJBIAMJ@CTF?5options?4?4?4@		; `string'
PUBLIC	_GametypeOptionsDef
PUBLIC	??_C@_0BB@HENINJA@Players?5for?5exit@		; `string'
PUBLIC	??_C@_0P@BFGLEOEG@Number?5of?5Laps@		; `string'
PUBLIC	??_C@_0P@PDPONBFI@Countdown?5Time@		; `string'
PUBLIC	??_C@_0N@MBFEOIOF@Scoring?5Type@		; `string'
PUBLIC	??_C@_0BA@MGFBLMJK@Team?5Match?5Type@		; `string'
PUBLIC	??_C@_0BF@CBGAOEIF@Overtime?5Tie?9Breaker@	; `string'
PUBLIC	??_C@_09DIGDDJAE@Hide?5Time@			; `string'
PUBLIC	??_C@_0BC@ODKEOMIE@Flag?5Respawn?5Time@		; `string'
PUBLIC	??_C@_0M@DBGIEMMJ@Autobalance@			; `string'
PUBLIC	??_C@_0P@EGLHEONM@Team?5Scrambler@		; `string'
PUBLIC	??_C@_08LHFNHBJG@Recycler@			; `string'
PUBLIC	??_C@_0M@IDHCJEOP@Teleporters@			; `string'
PUBLIC	??_C@_0L@BNLPCNLM@Super?5Ring@			; `string'
PUBLIC	??_C@_0P@BPPHIHOE@Super?5Sneakers@		; `string'
PUBLIC	??_C@_0O@DEAPMFFE@Invincibility@		; `string'
PUBLIC	??_C@_0M@NCNLEGAE@Jump?5Shield@			; `string'
PUBLIC	??_C@_0BB@IEFJKFBK@Elemental?5Shield@		; `string'
PUBLIC	??_C@_0BC@LCBDNGLP@Attraction?5Shield@		; `string'
PUBLIC	??_C@_0N@OKCFAGHJ@Force?5Shield@		; `string'
PUBLIC	??_C@_0BC@OEMPJAFB@Armageddon?5Shield@		; `string'
PUBLIC	??_C@_04EAOGKDEH@1?5Up@				; `string'
PUBLIC	??_C@_0L@DIDOFEJK@Eggman?5Box@			; `string'
PUBLIC	??_C@_0BA@BNNNNDOK@Internet?5server@		; `string'
PUBLIC	??_C@_0O@BNEKDMAC@Master?5server@		; `string'
PUBLIC	??_C@_0M@IGAEJANM@Server?5name@			; `string'
PUBLIC	??_C@_0BC@KMINAODO@Allow?5join?5player@		; `string'
PUBLIC	??_C@_0BG@KKJLKPFK@Allow?5WAD?5Downloading@	; `string'
PUBLIC	??_C@_0M@KNBGJLJF@Max?5Players@			; `string'
PUBLIC	??_C@_0BH@IMDHPOBF@Consistency?5Protection@	; `string'
PUBLIC	??_C@_0N@EHKOAFEG@Sound?5Volume@		; `string'
PUBLIC	??_C@_0N@IBGIBGEC@Music?5Volume@		; `string'
PUBLIC	??_C@_0M@HKPELEEF@MIDI?5Volume@			; `string'
PUBLIC	??_C@_0L@JEPMOLJJ@Toggle?5SFX@			; `string'
PUBLIC	??_C@_0BF@OCCAGLEC@Toggle?5Digital?5Music@	; `string'
PUBLIC	??_C@_0BC@PFINEHMK@Toggle?5MIDI?5Music@		; `string'
PUBLIC	??_C@_06MEIKBIL@M_SVOL@				; `string'
PUBLIC	??_C@_0BC@FBLLHOLF@Player?51?5Joystick@		; `string'
PUBLIC	??_C@_0BD@JIEEICEB@Select?5Joystick?4?4?4@	; `string'
PUBLIC	??_C@_0BB@BMIJGADJ@Axis?5For?5Turning@		; `string'
PUBLIC	??_C@_0BA@NKAGGEPP@Axis?5For?5Moving@		; `string'
PUBLIC	??_C@_0BA@IIOHMMCB@Axis?5For?5Strafe@		; `string'
PUBLIC	??_C@_0BB@HNBBHBC@Axis?5For?5Looking@		; `string'
PUBLIC	??_C@_0BA@PLNIHFNI@Axis?5For?5Firing@		; `string'
PUBLIC	??_C@_0BB@KEHIHKMO@Axis?5For?5NFiring@		; `string'
PUBLIC	??_C@_0BC@MIFJBILE@Player?52?5Joystick@		; `string'
PUBLIC	??_C@_08IKLFOOPP@M_CONTRO@			; `string'
PUBLIC	??_C@_0P@PILIMKEI@Setup?5Joystick@		; `string'
PUBLIC	??_C@_04OHJIHAFH@None@				; `string'
PUBLIC	??_C@_0BA@FICHDAMO@Select?5Joystick@		; `string'
PUBLIC	??_C@_07NALHMFBO@Forward@			; `string'
PUBLIC	??_C@_07FHPCIAHC@Reverse@			; `string'
PUBLIC	??_C@_09LCBMCKFL@Turn?5Left@			; `string'
PUBLIC	??_C@_0L@OGPEJLDP@Turn?5Right@			; `string'
PUBLIC	??_C@_04BIEPDJCB@Jump@				; `string'
PUBLIC	??_C@_04JBCJKLOD@Spin@				; `string'
PUBLIC	??_C@_09CBPLEBLF@Ring?5Toss@			; `string'
PUBLIC	??_C@_0BB@EPMANIOJ@Ring?5Toss?5Normal@		; `string'
PUBLIC	??_C@_05CIILEADG@Taunt@				; `string'
PUBLIC	??_C@_09BCEJBPBI@Toss?5Flag@			; `string'
PUBLIC	??_C@_09IPFINODH@Strafe?5On@			; `string'
PUBLIC	??_C@_0M@GGMECGAO@Strafe?5Left@			; `string'
PUBLIC	??_C@_0N@PNCBOGEI@Strafe?5Right@		; `string'
PUBLIC	??_C@_07GLCLAKHI@Look?5Up@			; `string'
PUBLIC	??_C@_09PIAJLAMM@Look?5Down@			; `string'
PUBLIC	??_C@_0M@LLHKMOAD@Center?5View@			; `string'
PUBLIC	??_C@_09GPOHNNCP@Mouselook@			; `string'
PUBLIC	??_C@_04CJGEDOF@next@				; `string'
PUBLIC	??_C@_0P@MIALJLPD@Setup?5Controls@		; `string'
PUBLIC	??_C@_08JJCLBGHE@Talk?5key@			; `string'
PUBLIC	??_C@_0O@BBPGCFOO@Team?9Talk?5key@		; `string'
PUBLIC	??_C@_0BA@GIBJCGBN@Rankings?1Scores@		; `string'
PUBLIC	??_C@_07PGLPGHFC@Console@			; `string'
PUBLIC	??_C@_0M@EIPCPGC@Next?5Weapon@			; `string'
PUBLIC	??_C@_0M@JKMNOCBG@Prev?5Weapon@			; `string'
PUBLIC	??_C@_0O@BDJEDBCP@Weapon?5Slot?51@		; `string'
PUBLIC	??_C@_0O@DILJGCOM@Weapon?5Slot?52@		; `string'
PUBLIC	??_C@_0O@CBKCFDKN@Weapon?5Slot?53@		; `string'
PUBLIC	??_C@_0O@GOODMFGK@Weapon?5Slot?54@		; `string'
PUBLIC	??_C@_0O@HHPIPECL@Weapon?5Slot?55@		; `string'
PUBLIC	??_C@_0O@FMNFKHOI@Weapon?5Slot?56@		; `string'
PUBLIC	??_C@_0O@EFMOJGKJ@Weapon?5Slot?57@		; `string'
PUBLIC	??_C@_0BA@ODACKHM@Rotate?5Camera?5L@		; `string'
PUBLIC	??_C@_0BA@NKHBBFKD@Rotate?5Camera?5R@		; `string'
PUBLIC	??_C@_0N@NNBJMKBI@Reset?5Camera@		; `string'
PUBLIC	??_C@_05PEDNBBBD@Pause@				; `string'
PUBLIC	??_C@_07GHCKGMKN@M_VIDEO@			; `string'
PUBLIC	??_C@_0L@FOCFLGDA@Video?5Mode@			; `string'
PUBLIC	??_C@_07OOODBAAL@M_PICKG@			; `string'
PUBLIC	??_C@_09EOPBCAJJ@Load?5Game@			; `string'
PUBLIC	_MessageDef
PUBLIC	??_C@_0O@FGEEFGGF@Field?5of?5view@		; `string'
PUBLIC	??_C@_07MJEANAEL@Quality@			; `string'
PUBLIC	??_C@_0P@JCONCFCP@Texture?5Filter@		; `string'
PUBLIC	??_C@_0M@OHBPMNLF@Anisotropic@			; `string'
PUBLIC	??_C@_0L@OOJOFIBJ@Fullscreen@			; `string'
PUBLIC	??_C@_0BA@IKJHKILP@Translucent?5HUD@		; `string'
PUBLIC	??_C@_06OOMBMMNL@Fog?4?4?4@			; `string'
PUBLIC	??_C@_08DMCEPACN@Gamma?4?4?4@			; `string'
PUBLIC	??_C@_03JPDFGHP@Fog@				; `string'
PUBLIC	??_C@_09KDOIHMJP@Fog?5color@			; `string'
PUBLIC	??_C@_0M@MDBKFHFI@Fog?5density@			; `string'
PUBLIC	??_C@_0N@OEAKGAGI@Software?5Fog@		; `string'
PUBLIC	??_C@_03FAAAOPJM@red@				; `string'
PUBLIC	??_C@_05GBEEJKMC@green@				; `string'
PUBLIC	??_C@_04OBGPFBCN@blue@				; `string'
PUBLIC	_OpenGLOptionDef
EXTRN	_cv_scr_depth:BYTE
EXTRN	_cv_fullscreen:BYTE
EXTRN	_cv_vidwait:BYTE
EXTRN	_cv_playercolor:BYTE
EXTRN	_cv_seenames:BYTE
EXTRN	_cv_usemouse:BYTE
EXTRN	_cv_controlperkey:BYTE
EXTRN	_cv_mouse2port:BYTE
EXTRN	_cv_usemouse2:BYTE
EXTRN	_cv_invertmouse2:BYTE
EXTRN	_cv_alwaysfreelook2:BYTE
EXTRN	_cv_mousemove2:BYTE
EXTRN	_cv_mousesens2:BYTE
EXTRN	_cv_mlooksens2:BYTE
EXTRN	_cv_itemrespawntime:BYTE
EXTRN	_cv_itemrespawn:BYTE
EXTRN	_cv_flagtime:BYTE
EXTRN	_cv_suddendeath:BYTE
EXTRN	_cv_hidetime:BYTE
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_pointlimit:BYTE
EXTRN	_cv_timelimit:BYTE
EXTRN	_cv_numlaps:BYTE
EXTRN	_cv_autobalance:BYTE
EXTRN	_cv_scrambleonchange:BYTE
EXTRN	_cv_useranalog:BYTE
EXTRN	_cv_useranalog2:BYTE
EXTRN	_cv_countdowntime:BYTE
EXTRN	_cv_teleporters:BYTE
EXTRN	_cv_superring:BYTE
EXTRN	_cv_supersneakers:BYTE
EXTRN	_cv_invincibility:BYTE
EXTRN	_cv_jumpshield:BYTE
EXTRN	_cv_watershield:BYTE
EXTRN	_cv_ringshield:BYTE
EXTRN	_cv_forceshield:BYTE
EXTRN	_cv_bombshield:BYTE
EXTRN	_cv_1up:BYTE
EXTRN	_cv_eggmanbox:BYTE
EXTRN	_cv_recycler:BYTE
EXTRN	_cv_inttime:BYTE
EXTRN	_cv_advancemap:BYTE
EXTRN	_cv_playersforexit:BYTE
EXTRN	_cv_match_scoring:BYTE
EXTRN	_cv_overtime:BYTE
EXTRN	_cv_autoaim:BYTE
EXTRN	_cv_autoaim2:BYTE
EXTRN	_cv_ringslinger:BYTE
EXTRN	_cv_soundtest:BYTE
EXTRN	_cv_specialrings:BYTE
EXTRN	_cv_powerstones:BYTE
EXTRN	_cv_matchboxes:BYTE
EXTRN	_cv_raceitemboxes:BYTE
EXTRN	_cv_dummyteam:BYTE
EXTRN	_cv_dummyscramble:BYTE
EXTRN	_cons_backcolor:BYTE
EXTRN	_cv_showhud:BYTE
EXTRN	_cv_grtranslucenthud:BYTE
EXTRN	_cv_chasecam:BYTE
EXTRN	_cv_chasecam2:BYTE
EXTRN	_cv_precipdensity:BYTE
EXTRN	_cv_precipdist:BYTE
EXTRN	_cv_allownewplayer:BYTE
EXTRN	_cv_maxplayers:BYTE
EXTRN	_cv_consfailprotect:BYTE
EXTRN	_cv_timetic:BYTE
EXTRN	_cv_forceskin:BYTE
EXTRN	_cv_downloading:BYTE
EXTRN	_cv_crosshair:BYTE
EXTRN	_cv_crosshair2:BYTE
EXTRN	_cv_invertmouse:BYTE
EXTRN	_cv_alwaysfreelook:BYTE
EXTRN	_cv_mousemove:BYTE
EXTRN	_cv_sideaxis:BYTE
EXTRN	_cv_turnaxis:BYTE
EXTRN	_cv_moveaxis:BYTE
EXTRN	_cv_lookaxis:BYTE
EXTRN	_cv_fireaxis:BYTE
EXTRN	_cv_firenaxis:BYTE
EXTRN	_cv_sideaxis2:BYTE
EXTRN	_cv_turnaxis2:BYTE
EXTRN	_cv_moveaxis2:BYTE
EXTRN	_cv_lookaxis2:BYTE
EXTRN	_cv_fireaxis2:BYTE
EXTRN	_cv_firenaxis2:BYTE
EXTRN	_cv_mousesens:BYTE
EXTRN	_cv_mlooksens:BYTE
EXTRN	_cv_soundvolume:BYTE
EXTRN	_cv_digmusicvolume:BYTE
EXTRN	_cv_midimusicvolume:BYTE
EXTRN	_cv_ticrate:BYTE
EXTRN	_cv_usegamma:BYTE
EXTRN	_cv_allcaps:BYTE
EXTRN	_cv_gravity:BYTE
EXTRN	_cv_grfov:BYTE
EXTRN	_cv_grfog:BYTE
EXTRN	_cv_grfogdensity:BYTE
EXTRN	_cv_grsoftwarefog:BYTE
EXTRN	_cv_grgammared:BYTE
EXTRN	_cv_grgammagreen:BYTE
EXTRN	_cv_grgammablue:BYTE
EXTRN	_cv_grfiltermode:BYTE
EXTRN	_cv_granisotropicmode:BYTE
EXTRN	_cv_masterserver:BYTE
EXTRN	_cv_servername:BYTE
EXTRN	_cv_internetserver:BYTE
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
_BSS	SEGMENT
_fromlevelselect DD 01H DUP (?)
_menuactive DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_customsecretinfo:BYTE:08acH
_DATA	ENDS
_BSS	SEGMENT
_inlevelselect DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_startmap:WORD
COMM	_ultmode:DWORD
COMM	_StartSplitScreenGame:DWORD
COMM	_cv_chosenroom_motd:DWORD
_DATA	ENDS
_BSS	SEGMENT
_MessageMenu DB	014H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_04OBGPFBCN@blue@
CONST	SEGMENT
??_C@_04OBGPFBCN@blue@ DB 'blue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GBEEJKMC@green@
CONST	SEGMENT
??_C@_05GBEEJKMC@green@ DB 'green', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FAAAOPJM@red@
CONST	SEGMENT
??_C@_03FAAAOPJM@red@ DB 'red', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OEAKGAGI@Software?5Fog@
CONST	SEGMENT
??_C@_0N@OEAKGAGI@Software?5Fog@ DB 'Software Fog', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MDBKFHFI@Fog?5density@
CONST	SEGMENT
??_C@_0M@MDBKFHFI@Fog?5density@ DB 'Fog density', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDOIHMJP@Fog?5color@
CONST	SEGMENT
??_C@_09KDOIHMJP@Fog?5color@ DB 'Fog color', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JPDFGHP@Fog@
CONST	SEGMENT
??_C@_03JPDFGHP@Fog@ DB 'Fog', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMCEPACN@Gamma?4?4?4@
CONST	SEGMENT
??_C@_08DMCEPACN@Gamma?4?4?4@ DB 'Gamma...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OOMBMMNL@Fog?4?4?4@
CONST	SEGMENT
??_C@_06OOMBMMNL@Fog?4?4?4@ DB 'Fog...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IKJHKILP@Translucent?5HUD@
CONST	SEGMENT
??_C@_0BA@IKJHKILP@Translucent?5HUD@ DB 'Translucent HUD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OOJOFIBJ@Fullscreen@
CONST	SEGMENT
??_C@_0L@OOJOFIBJ@Fullscreen@ DB 'Fullscreen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHBPMNLF@Anisotropic@
CONST	SEGMENT
??_C@_0M@OHBPMNLF@Anisotropic@ DB 'Anisotropic', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JCONCFCP@Texture?5Filter@
CONST	SEGMENT
??_C@_0P@JCONCFCP@Texture?5Filter@ DB 'Texture Filter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJEANAEL@Quality@
CONST	SEGMENT
??_C@_07MJEANAEL@Quality@ DB 'Quality', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGEEFGGF@Field?5of?5view@
CONST	SEGMENT
??_C@_0O@FGEEFGGF@Field?5of?5view@ DB 'Field of view', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EOPBCAJJ@Load?5Game@
CONST	SEGMENT
??_C@_09EOPBCAJJ@Load?5Game@ DB 'Load Game', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOODBAAL@M_PICKG@
CONST	SEGMENT
??_C@_07OOODBAAL@M_PICKG@ DB 'M_PICKG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FOCFLGDA@Video?5Mode@
CONST	SEGMENT
??_C@_0L@FOCFLGDA@Video?5Mode@ DB 'Video Mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GHCKGMKN@M_VIDEO@
CONST	SEGMENT
??_C@_07GHCKGMKN@M_VIDEO@ DB 'M_VIDEO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEDNBBBD@Pause@
CONST	SEGMENT
??_C@_05PEDNBBBD@Pause@ DB 'Pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NNBJMKBI@Reset?5Camera@
CONST	SEGMENT
??_C@_0N@NNBJMKBI@Reset?5Camera@ DB 'Reset Camera', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NKHBBFKD@Rotate?5Camera?5R@
CONST	SEGMENT
??_C@_0BA@NKHBBFKD@Rotate?5Camera?5R@ DB 'Rotate Camera R', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ODACKHM@Rotate?5Camera?5L@
CONST	SEGMENT
??_C@_0BA@ODACKHM@Rotate?5Camera?5L@ DB 'Rotate Camera L', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EFMOJGKJ@Weapon?5Slot?57@
CONST	SEGMENT
??_C@_0O@EFMOJGKJ@Weapon?5Slot?57@ DB 'Weapon Slot 7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FMNFKHOI@Weapon?5Slot?56@
CONST	SEGMENT
??_C@_0O@FMNFKHOI@Weapon?5Slot?56@ DB 'Weapon Slot 6', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HHPIPECL@Weapon?5Slot?55@
CONST	SEGMENT
??_C@_0O@HHPIPECL@Weapon?5Slot?55@ DB 'Weapon Slot 5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GOODMFGK@Weapon?5Slot?54@
CONST	SEGMENT
??_C@_0O@GOODMFGK@Weapon?5Slot?54@ DB 'Weapon Slot 4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBKCFDKN@Weapon?5Slot?53@
CONST	SEGMENT
??_C@_0O@CBKCFDKN@Weapon?5Slot?53@ DB 'Weapon Slot 3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DILJGCOM@Weapon?5Slot?52@
CONST	SEGMENT
??_C@_0O@DILJGCOM@Weapon?5Slot?52@ DB 'Weapon Slot 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BDJEDBCP@Weapon?5Slot?51@
CONST	SEGMENT
??_C@_0O@BDJEDBCP@Weapon?5Slot?51@ DB 'Weapon Slot 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JKMNOCBG@Prev?5Weapon@
CONST	SEGMENT
??_C@_0M@JKMNOCBG@Prev?5Weapon@ DB 'Prev Weapon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EIPCPGC@Next?5Weapon@
CONST	SEGMENT
??_C@_0M@EIPCPGC@Next?5Weapon@ DB 'Next Weapon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PGLPGHFC@Console@
CONST	SEGMENT
??_C@_07PGLPGHFC@Console@ DB 'Console', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GIBJCGBN@Rankings?1Scores@
CONST	SEGMENT
??_C@_0BA@GIBJCGBN@Rankings?1Scores@ DB 'Rankings/Scores', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BBPGCFOO@Team?9Talk?5key@
CONST	SEGMENT
??_C@_0O@BBPGCFOO@Team?9Talk?5key@ DB 'Team-Talk key', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJCLBGHE@Talk?5key@
CONST	SEGMENT
??_C@_08JJCLBGHE@Talk?5key@ DB 'Talk key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MIALJLPD@Setup?5Controls@
CONST	SEGMENT
??_C@_0P@MIALJLPD@Setup?5Controls@ DB 'Setup Controls', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJGEDOF@next@
CONST	SEGMENT
??_C@_04CJGEDOF@next@ DB 'next', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GPOHNNCP@Mouselook@
CONST	SEGMENT
??_C@_09GPOHNNCP@Mouselook@ DB 'Mouselook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LLHKMOAD@Center?5View@
CONST	SEGMENT
??_C@_0M@LLHKMOAD@Center?5View@ DB 'Center View', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PIAJLAMM@Look?5Down@
CONST	SEGMENT
??_C@_09PIAJLAMM@Look?5Down@ DB 'Look Down', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GLCLAKHI@Look?5Up@
CONST	SEGMENT
??_C@_07GLCLAKHI@Look?5Up@ DB 'Look Up', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PNCBOGEI@Strafe?5Right@
CONST	SEGMENT
??_C@_0N@PNCBOGEI@Strafe?5Right@ DB 'Strafe Right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GGMECGAO@Strafe?5Left@
CONST	SEGMENT
??_C@_0M@GGMECGAO@Strafe?5Left@ DB 'Strafe Left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IPFINODH@Strafe?5On@
CONST	SEGMENT
??_C@_09IPFINODH@Strafe?5On@ DB 'Strafe On', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BCEJBPBI@Toss?5Flag@
CONST	SEGMENT
??_C@_09BCEJBPBI@Toss?5Flag@ DB 'Toss Flag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CIILEADG@Taunt@
CONST	SEGMENT
??_C@_05CIILEADG@Taunt@ DB 'Taunt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPMANIOJ@Ring?5Toss?5Normal@
CONST	SEGMENT
??_C@_0BB@EPMANIOJ@Ring?5Toss?5Normal@ DB 'Ring Toss Normal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CBPLEBLF@Ring?5Toss@
CONST	SEGMENT
??_C@_09CBPLEBLF@Ring?5Toss@ DB 'Ring Toss', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JBCJKLOD@Spin@
CONST	SEGMENT
??_C@_04JBCJKLOD@Spin@ DB 'Spin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BIEPDJCB@Jump@
CONST	SEGMENT
??_C@_04BIEPDJCB@Jump@ DB 'Jump', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OGPEJLDP@Turn?5Right@
CONST	SEGMENT
??_C@_0L@OGPEJLDP@Turn?5Right@ DB 'Turn Right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LCBMCKFL@Turn?5Left@
CONST	SEGMENT
??_C@_09LCBMCKFL@Turn?5Left@ DB 'Turn Left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FHPCIAHC@Reverse@
CONST	SEGMENT
??_C@_07FHPCIAHC@Reverse@ DB 'Reverse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NALHMFBO@Forward@
CONST	SEGMENT
??_C@_07NALHMFBO@Forward@ DB 'Forward', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FICHDAMO@Select?5Joystick@
CONST	SEGMENT
??_C@_0BA@FICHDAMO@Select?5Joystick@ DB 'Select Joystick', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None@
CONST	SEGMENT
??_C@_04OHJIHAFH@None@ DB 'None', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PILIMKEI@Setup?5Joystick@
CONST	SEGMENT
??_C@_0P@PILIMKEI@Setup?5Joystick@ DB 'Setup Joystick', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IKLFOOPP@M_CONTRO@
CONST	SEGMENT
??_C@_08IKLFOOPP@M_CONTRO@ DB 'M_CONTRO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MIFJBILE@Player?52?5Joystick@
CONST	SEGMENT
??_C@_0BC@MIFJBILE@Player?52?5Joystick@ DB 'Player 2 Joystick', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KEHIHKMO@Axis?5For?5NFiring@
CONST	SEGMENT
??_C@_0BB@KEHIHKMO@Axis?5For?5NFiring@ DB 'Axis For NFiring', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PLNIHFNI@Axis?5For?5Firing@
CONST	SEGMENT
??_C@_0BA@PLNIHFNI@Axis?5For?5Firing@ DB 'Axis For Firing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HNBBHBC@Axis?5For?5Looking@
CONST	SEGMENT
??_C@_0BB@HNBBHBC@Axis?5For?5Looking@ DB 'Axis For Looking', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIOHMMCB@Axis?5For?5Strafe@
CONST	SEGMENT
??_C@_0BA@IIOHMMCB@Axis?5For?5Strafe@ DB 'Axis For Strafe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NKAGGEPP@Axis?5For?5Moving@
CONST	SEGMENT
??_C@_0BA@NKAGGEPP@Axis?5For?5Moving@ DB 'Axis For Moving', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BMIJGADJ@Axis?5For?5Turning@
CONST	SEGMENT
??_C@_0BB@BMIJGADJ@Axis?5For?5Turning@ DB 'Axis For Turning', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JIEEICEB@Select?5Joystick?4?4?4@
CONST	SEGMENT
??_C@_0BD@JIEEICEB@Select?5Joystick?4?4?4@ DB 'Select Joystick...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FBLLHOLF@Player?51?5Joystick@
CONST	SEGMENT
??_C@_0BC@FBLLHOLF@Player?51?5Joystick@ DB 'Player 1 Joystick', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MEIKBIL@M_SVOL@
CONST	SEGMENT
??_C@_06MEIKBIL@M_SVOL@ DB 'M_SVOL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFINEHMK@Toggle?5MIDI?5Music@
CONST	SEGMENT
??_C@_0BC@PFINEHMK@Toggle?5MIDI?5Music@ DB 'Toggle MIDI Music', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OCCAGLEC@Toggle?5Digital?5Music@
CONST	SEGMENT
??_C@_0BF@OCCAGLEC@Toggle?5Digital?5Music@ DB 'Toggle Digital Music', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEPMOLJJ@Toggle?5SFX@
CONST	SEGMENT
??_C@_0L@JEPMOLJJ@Toggle?5SFX@ DB 'Toggle SFX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HKPELEEF@MIDI?5Volume@
CONST	SEGMENT
??_C@_0M@HKPELEEF@MIDI?5Volume@ DB 'MIDI Volume', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBGIBGEC@Music?5Volume@
CONST	SEGMENT
??_C@_0N@IBGIBGEC@Music?5Volume@ DB 'Music Volume', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EHKOAFEG@Sound?5Volume@
CONST	SEGMENT
??_C@_0N@EHKOAFEG@Sound?5Volume@ DB 'Sound Volume', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IMDHPOBF@Consistency?5Protection@
CONST	SEGMENT
??_C@_0BH@IMDHPOBF@Consistency?5Protection@ DB 'Consistency Protection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KNBGJLJF@Max?5Players@
CONST	SEGMENT
??_C@_0M@KNBGJLJF@Max?5Players@ DB 'Max Players', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KKJLKPFK@Allow?5WAD?5Downloading@
CONST	SEGMENT
??_C@_0BG@KKJLKPFK@Allow?5WAD?5Downloading@ DB 'Allow WAD Downloading', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KMINAODO@Allow?5join?5player@
CONST	SEGMENT
??_C@_0BC@KMINAODO@Allow?5join?5player@ DB 'Allow join player', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGAEJANM@Server?5name@
CONST	SEGMENT
??_C@_0M@IGAEJANM@Server?5name@ DB 'Server name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNEKDMAC@Master?5server@
CONST	SEGMENT
??_C@_0O@BNEKDMAC@Master?5server@ DB 'Master server', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BNNNNDOK@Internet?5server@
CONST	SEGMENT
??_C@_0BA@BNNNNDOK@Internet?5server@ DB 'Internet server', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIDOFEJK@Eggman?5Box@
CONST	SEGMENT
??_C@_0L@DIDOFEJK@Eggman?5Box@ DB 'Eggman Box', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EAOGKDEH@1?5Up@
CONST	SEGMENT
??_C@_04EAOGKDEH@1?5Up@ DB '1 Up', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OEMPJAFB@Armageddon?5Shield@
CONST	SEGMENT
??_C@_0BC@OEMPJAFB@Armageddon?5Shield@ DB 'Armageddon Shield', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OKCFAGHJ@Force?5Shield@
CONST	SEGMENT
??_C@_0N@OKCFAGHJ@Force?5Shield@ DB 'Force Shield', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LCBDNGLP@Attraction?5Shield@
CONST	SEGMENT
??_C@_0BC@LCBDNGLP@Attraction?5Shield@ DB 'Attraction Shield', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IEFJKFBK@Elemental?5Shield@
CONST	SEGMENT
??_C@_0BB@IEFJKFBK@Elemental?5Shield@ DB 'Elemental Shield', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NCNLEGAE@Jump?5Shield@
CONST	SEGMENT
??_C@_0M@NCNLEGAE@Jump?5Shield@ DB 'Jump Shield', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DEAPMFFE@Invincibility@
CONST	SEGMENT
??_C@_0O@DEAPMFFE@Invincibility@ DB 'Invincibility', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPPHIHOE@Super?5Sneakers@
CONST	SEGMENT
??_C@_0P@BPPHIHOE@Super?5Sneakers@ DB 'Super Sneakers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BNLPCNLM@Super?5Ring@
CONST	SEGMENT
??_C@_0L@BNLPCNLM@Super?5Ring@ DB 'Super Ring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IDHCJEOP@Teleporters@
CONST	SEGMENT
??_C@_0M@IDHCJEOP@Teleporters@ DB 'Teleporters', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHFNHBJG@Recycler@
CONST	SEGMENT
??_C@_08LHFNHBJG@Recycler@ DB 'Recycler', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EGLHEONM@Team?5Scrambler@
CONST	SEGMENT
??_C@_0P@EGLHEONM@Team?5Scrambler@ DB 'Team Scrambler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DBGIEMMJ@Autobalance@
CONST	SEGMENT
??_C@_0M@DBGIEMMJ@Autobalance@ DB 'Autobalance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ODKEOMIE@Flag?5Respawn?5Time@
CONST	SEGMENT
??_C@_0BC@ODKEOMIE@Flag?5Respawn?5Time@ DB 'Flag Respawn Time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DIGDDJAE@Hide?5Time@
CONST	SEGMENT
??_C@_09DIGDDJAE@Hide?5Time@ DB 'Hide Time', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CBGAOEIF@Overtime?5Tie?9Breaker@
CONST	SEGMENT
??_C@_0BF@CBGAOEIF@Overtime?5Tie?9Breaker@ DB 'Overtime Tie-Breaker', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MGFBLMJK@Team?5Match?5Type@
CONST	SEGMENT
??_C@_0BA@MGFBLMJK@Team?5Match?5Type@ DB 'Team Match Type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBFEOIOF@Scoring?5Type@
CONST	SEGMENT
??_C@_0N@MBFEOIOF@Scoring?5Type@ DB 'Scoring Type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PDPONBFI@Countdown?5Time@
CONST	SEGMENT
??_C@_0P@PDPONBFI@Countdown?5Time@ DB 'Countdown Time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BFGLEOEG@Number?5of?5Laps@
CONST	SEGMENT
??_C@_0P@BFGLEOEG@Number?5of?5Laps@ DB 'Number of Laps', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HENINJA@Players?5for?5exit@
CONST	SEGMENT
??_C@_0BB@HENINJA@Players?5for?5exit@ DB 'Players for exit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BHJBIAMJ@CTF?5options?4?4?4@
CONST	SEGMENT
??_C@_0P@BHJBIAMJ@CTF?5options?4?4?4@ DB 'CTF options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IJGPKIDF@Tag?5options?4?4?4@
CONST	SEGMENT
??_C@_0P@IJGPKIDF@Tag?5options?4?4?4@ DB 'Tag options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BFJKPJJ@Match?5options?4?4?4@
CONST	SEGMENT
??_C@_0BB@BFJKPJJ@Match?5options?4?4?4@ DB 'Match options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDOMGDDM@Race?5options?4?4?4@
CONST	SEGMENT
??_C@_0BA@IDOMGDDM@Race?5options?4?4?4@ DB 'Race options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KFANFAKC@Coop?5options?4?4?4@
CONST	SEGMENT
??_C@_0BA@KFANFAKC@Coop?5options?4?4?4@ DB 'Coop options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IHAADEAM@Random?5Monitor?5Toggles?4?4?4@
CONST	SEGMENT
??_C@_0BK@IHAADEAM@Random?5Monitor?5Toggles?4?4?4@ DB 'Random Monitor Tog'
	DB	'gles...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGICAEJH@Advance?5to?5next?5map@
CONST	SEGMENT
??_C@_0BE@GGICAEJH@Advance?5to?5next?5map@ DB 'Advance to next map', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JOBIPPI@Intermission?5Timer@
CONST	SEGMENT
??_C@_0BD@JOBIPPI@Intermission?5Timer@ DB 'Intermission Timer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GEFGBLGK@Sudden?5Death@
CONST	SEGMENT
??_C@_0N@GEFGBLGK@Sudden?5Death@ DB 'Sudden Death', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HLMNLKOD@Server?5controls?5skin?5?$CD@
CONST	SEGMENT
??_C@_0BH@HLMNLKOD@Server?5controls?5skin?5?$CD@ DB 'Server controls skin'
	DB	' #', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JGGFIAJK@Item?5Respawn?5time@
CONST	SEGMENT
??_C@_0BC@JGGFIAJK@Item?5Respawn?5time@ DB 'Item Respawn time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJAHAPGP@Item?5Respawn@
CONST	SEGMENT
??_C@_0N@PJAHAPGP@Item?5Respawn@ DB 'Item Respawn', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OJAPOEPA@Item?5Boxes@
CONST	SEGMENT
??_C@_0L@OJAPOEPA@Item?5Boxes@ DB 'Item Boxes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHBHIIHE@Emeralds@
CONST	SEGMENT
??_C@_08MHBHIIHE@Emeralds@ DB 'Emeralds', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FEPAJPMM@Special?5Ring?5Weapons@
CONST	SEGMENT
??_C@_0BF@FEPAJPMM@Special?5Ring?5Weapons@ DB 'Special Ring Weapons', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCIGOLA@Point?5Limit@
CONST	SEGMENT
??_C@_0M@MCIGOLA@Point?5Limit@ DB 'Point Limit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KCNGICBH@Time?5Limit@
CONST	SEGMENT
??_C@_0L@KCNGICBH@Time?5Limit@ DB 'Time Limit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HDAAEHKL@Data?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BA@HDAAEHKL@Data?5Options?4?4?4@ DB 'Data Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JHAJCEJB@Uppercase?5Console@
CONST	SEGMENT
??_C@_0BC@JHAJCEJB@Uppercase?5Console@ DB 'Uppercase Console', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OMGNCNBP@Console?5Color@
CONST	SEGMENT
??_C@_0O@OMGNCNBP@Console?5Color@ DB 'Console Color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EHGBELJN@High?5Resolution?5Timer@
CONST	SEGMENT
??_C@_0BG@EHGBELJN@High?5Resolution?5Timer@ DB 'High Resolution Timer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CIAPPEJF@HUD?5Player?5Names@
CONST	SEGMENT
??_C@_0BB@CIAPPEJF@HUD?5Player?5Names@ DB 'HUD Player Names', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FLPNBFBF@Show?5HUD@
CONST	SEGMENT
??_C@_08FLPNBFBF@Show?5HUD@ DB 'Show HUD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FHIPPBDA@Mouse?5Speed@
CONST	SEGMENT
??_C@_0M@FHIPPBDA@Mouse?5Speed@ DB 'Mouse Speed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KJCDGHGC@Invert?5Mouse@
CONST	SEGMENT
??_C@_0N@KJCDGHGC@Invert?5Mouse@ DB 'Invert Mouse', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GHKIFCLN@Use?5Mouse@
CONST	SEGMENT
??_C@_09GHKIFCLN@Use?5Mouse@ DB 'Use Mouse', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMMLKIFK@FPS?5Meter@
CONST	SEGMENT
??_C@_09LMMLKIFK@FPS?5Meter@ DB 'FPS Meter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ENJIPHCK@Rain?1Snow?5Draw?5Dist@
CONST	SEGMENT
??_C@_0BE@ENJIPHCK@Rain?1Snow?5Draw?5Dist@ DB 'Rain/Snow Draw Dist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BOEPICCK@Rain?1Snow?5Density@
CONST	SEGMENT
??_C@_0BC@BOEPICCK@Rain?1Snow?5Density@ DB 'Rain/Snow Density', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBECKDNL@V?9SYNC@
CONST	SEGMENT
??_C@_06PBECKDNL@V?9SYNC@ DB 'V-SYNC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JCLLFKLB@Brightness@
CONST	SEGMENT
??_C@_0L@JCLLFKLB@Brightness@ DB 'Brightness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FELBJLGK@3D?5Card?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BD@FELBJLGK@3D?5Card?5Options?4?4?4@ DB '3D Card Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JCJDPGMD@Video?5Modes?4?4?4@
CONST	SEGMENT
??_C@_0P@JCJDPGMD@Video?5Modes?4?4?4@ DB 'Video Modes...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BCNHIBFP@Neo?5Aerial?5Garden@
CONST	SEGMENT
??_C@_0BC@BCNHIBFP@Neo?5Aerial?5Garden@ DB 'Neo Aerial Garden', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IHMDDBIB@SRB1?5Level?5Select@
CONST	SEGMENT
??_C@_0BC@IHMDDBIB@SRB1?5Level?5Select@ DB 'SRB1 Level Select', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CNMEMFF@Custom15@
CONST	SEGMENT
??_C@_08CNMEMFF@Custom15@ DB 'Custom15', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BLMHHNBE@Custom14@
CONST	SEGMENT
??_C@_08BLMHHNBE@Custom14@ DB 'Custom14', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FEIGOLND@Custom13@
CONST	SEGMENT
??_C@_08FEIGOLND@Custom13@ DB 'Custom13', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENJNNKJC@Custom12@
CONST	SEGMENT
??_C@_08ENJNNKJC@Custom12@ DB 'Custom12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GGLAIJFB@Custom11@
CONST	SEGMENT
??_C@_08GGLAIJFB@Custom11@ DB 'Custom11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HPKLLIBA@Custom10@
CONST	SEGMENT
??_C@_08HPKLLIBA@Custom10@ DB 'Custom10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPLFBBOI@Custom9@
CONST	SEGMENT
??_C@_07CPLFBBOI@Custom9@ DB 'Custom9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DGKOCAKJ@Custom8@
CONST	SEGMENT
??_C@_07DGKOCAKJ@Custom8@ DB 'Custom8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LBDGDMGG@Custom7@
CONST	SEGMENT
??_C@_07LBDGDMGG@Custom7@ DB 'Custom7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KICNANCH@Custom6@
CONST	SEGMENT
??_C@_07KICNANCH@Custom6@ DB 'Custom6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IDAAFOOE@Custom5@
CONST	SEGMENT
??_C@_07IDAAFOOE@Custom5@ DB 'Custom5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKBLGPKF@Custom4@
CONST	SEGMENT
??_C@_07JKBLGPKF@Custom4@ DB 'Custom4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFFKPJGC@Custom3@
CONST	SEGMENT
??_C@_07NFFKPJGC@Custom3@ DB 'Custom3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMEBMICD@Custom2@
CONST	SEGMENT
??_C@_07MMEBMICD@Custom2@ DB 'Custom2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHGMJLOA@Custom1@
CONST	SEGMENT
??_C@_07OHGMJLOA@Custom1@ DB 'Custom1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LBCBILIL@Bonus?5Levels@
CONST	SEGMENT
??_C@_0N@LBCBILIL@Bonus?5Levels@ DB 'Bonus Levels', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FEDJDPFC@Beta?5Showcase@
CONST	SEGMENT
??_C@_0O@FEDJDPFC@Beta?5Showcase@ DB 'Beta Showcase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OKJFLHBF@Destroy?5All?5Robots@
CONST	SEGMENT
??_C@_0BD@OKJFLHBF@Destroy?5All?5Robots@ DB 'Destroy All Robots', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MPKJINNG@Get?5All?5Emeralds@
CONST	SEGMENT
??_C@_0BB@MPKJINNG@Get?5All?5Emeralds@ DB 'Get All Emeralds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OBJFODL@Throw?5Rings@
CONST	SEGMENT
??_C@_0M@OBJFODL@Throw?5Rings@ DB 'Throw Rings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JMGDFJEK@Gravity@
CONST	SEGMENT
??_C@_07JMGDFJEK@Gravity@ DB 'Gravity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IOEHPHNJ@Sound?5Test@
CONST	SEGMENT
??_C@_0L@IOEHPHNJ@Sound?5Test@ DB 'Sound Test', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@INAABHFP@Ultimate?5Cheat@
CONST	SEGMENT
??_C@_0P@INAABHFP@Ultimate?5Cheat@ DB 'Ultimate Cheat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KNHHNDPI@Secrets?5Checklist@
CONST	SEGMENT
??_C@_0BC@KNHHNDPI@Secrets?5Checklist@ DB 'Secrets Checklist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CBHOBIIP@Mario?5Koopa?5Blast@
CONST	SEGMENT
??_C@_0BC@CBHOBIIP@Mario?5Koopa?5Blast@ DB 'Mario Koopa Blast', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HHPLLDPH@Sonic?5Into?5Dreams@
CONST	SEGMENT
??_C@_0BC@HHPLLDPH@Sonic?5Into?5Dreams@ DB 'Sonic Into Dreams', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHCNEKBN@SRB1?5Remake@
CONST	SEGMENT
??_C@_0M@OHCNEKBN@SRB1?5Remake@ DB 'SRB1 Remake', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BOMJPEGC@Level?5Select@
CONST	SEGMENT
??_C@_0N@BOMJPEGC@Level?5Select@ DB 'Level Select', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JHNOOAMH@Video?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BB@JHNOOAMH@Video?5Options?4?4?4@ DB 'Video Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GFIJKFEG@Sound?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BB@GFIJKFEG@Sound?5Options?4?4?4@ DB 'Sound Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IONJCCHH@Server?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BC@IONJCCHH@Server?5Options?4?4?4@ DB 'Server Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MIHBMEAN@Gametype?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BE@MIHBMEAN@Gametype?5Options?4?4?4@ DB 'Gametype Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FCJFFKOD@Game?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BA@FCJFFKOD@Game?5Options?4?4?4@ DB 'Game Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JOIHIAIG@Crosshair@
CONST	SEGMENT
??_C@_09JOIHIAIG@Crosshair@ DB 'Crosshair', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FOKEMHAB@Autoaim@
CONST	SEGMENT
??_C@_07FOKEMHAB@Autoaim@ DB 'Autoaim', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DPAEEKKE@Analog?5Control@
CONST	SEGMENT
??_C@_0P@DPAEEKKE@Analog?5Control@ DB 'Analog Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera@
CONST	SEGMENT
??_C@_06JCBBMBIP@Camera@ DB 'Camera', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KGFACILA@Control?5Configuration?4?4?4@
CONST	SEGMENT
??_C@_0BJ@KGFACILA@Control?5Configuration?4?4?4@ DB 'Control Configuratio'
	DB	'n...', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NDALGNMF@Control?5per?5key@
CONST	SEGMENT
??_C@_0BA@NDALGNMF@Control?5per?5key@ DB 'Control per key', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DPCCFBBP@Mouse?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BB@DPCCFBBP@Mouse?5Options?4?4?4@ DB 'Mouse Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLGEPLBF@Joystick?5Options?4?4?4@
CONST	SEGMENT
??_C@_0BE@NLGEPLBF@Joystick?5Options?4?4?4@ DB 'Joystick Options...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDABACCE@Player?52?5Controls?4?4?4@
CONST	SEGMENT
??_C@_0BF@BDABACCE@Player?52?5Controls?4?4?4@ DB 'Player 2 Controls...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GPGACHPP@Player?51?5Controls?4?4?4@
CONST	SEGMENT
??_C@_0BF@GPGACHPP@Player?51?5Controls?4?4?4@ DB 'Player 1 Controls...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@POPHDFGA@Erase?5Secrets?5Data@
CONST	SEGMENT
??_C@_0BD@POPHDFGA@Erase?5Secrets?5Data@ DB 'Erase Secrets Data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BKAIAIKE@Erase?5Time?5Attack?5Data@
CONST	SEGMENT
??_C@_0BH@BKAIAIKE@Erase?5Time?5Attack?5Data@ DB 'Erase Time Attack Data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PGLBMODG@Start?5?$CIRecord?$CJ@
CONST	SEGMENT
??_C@_0P@PGLBMODG@Start?5?$CIRecord?$CJ@ DB 'Start (Record)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CBIBPELE@Start?5?$CINo?5Record?$CJ@
CONST	SEGMENT
??_C@_0BC@CBIBPELE@Start?5?$CINo?5Record?$CJ@ DB 'Start (No Record)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBCKINCK@Replay@
CONST	SEGMENT
??_C@_06LBCKINCK@Replay@ DB 'Replay', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPAAKFED@Player@
CONST	SEGMENT
??_C@_06NPAAKFED@Player@ DB 'Player', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LOEPDJFL@Choose?5Your?5Character@
CONST	SEGMENT
??_C@_0BG@LOEPDJFL@Choose?5Your?5Character@ DB 'Choose Your Character', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKOEAHHG@PLAYER15@
CONST	SEGMENT
??_C@_08KKOEAHHG@PLAYER15@ DB 'PLAYER15', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDPPDGDH@PLAYER14@
CONST	SEGMENT
??_C@_08LDPPDGDH@PLAYER14@ DB 'PLAYER14', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PMLOKAPA@PLAYER13@
CONST	SEGMENT
??_C@_08PMLOKAPA@PLAYER13@ DB 'PLAYER13', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFKFJBLB@PLAYER12@
CONST	SEGMENT
??_C@_08OFKFJBLB@PLAYER12@ DB 'PLAYER12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MOIIMCHC@PLAYER11@
CONST	SEGMENT
??_C@_08MOIIMCHC@PLAYER11@ DB 'PLAYER11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NHJDPDDD@PLAYER10@
CONST	SEGMENT
??_C@_08NHJDPDDD@PLAYER10@ DB 'PLAYER10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HACBGHEF@PLAYER9@
CONST	SEGMENT
??_C@_07HACBGHEF@PLAYER9@ DB 'PLAYER9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GJDKFGAE@PLAYER8@
CONST	SEGMENT
??_C@_07GJDKFGAE@PLAYER8@ DB 'PLAYER8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOKCEKML@PLAYER7@
CONST	SEGMENT
??_C@_07OOKCEKML@PLAYER7@ DB 'PLAYER7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PHLJHLIK@PLAYER6@
CONST	SEGMENT
??_C@_07PHLJHLIK@PLAYER6@ DB 'PLAYER6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMJECIEJ@PLAYER5@
CONST	SEGMENT
??_C@_07NMJECIEJ@PLAYER5@ DB 'PLAYER5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MFIPBJAI@PLAYER4@
CONST	SEGMENT
??_C@_07MFIPBJAI@PLAYER4@ DB 'PLAYER4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JICBNHOH@KNUCKLES@
CONST	SEGMENT
??_C@_08JICBNHOH@KNUCKLES@ DB 'KNUCKLES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCLLAIMA@TAILS@
CONST	SEGMENT
??_C@_05LCLLAIMA@TAILS@ DB 'TAILS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBFAGOBK@SONIC@
CONST	SEGMENT
??_C@_05MBFAGOBK@SONIC@ DB 'SONIC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLGAJEJN@M_PICKP@
CONST	SEGMENT
??_C@_07OLGAJEJN@M_PICKP@ DB 'M_PICKP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HAHOOOK@Second?5Mouse?5config?4?4?4@
CONST	SEGMENT
??_C@_0BH@HAHOOOK@Second?5Mouse?5config?4?4?4@ DB 'Second Mouse config...'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MLNMPNND@Setup?5Controls?4?4?4@
CONST	SEGMENT
??_C@_0BC@MLNMPNND@Setup?5Controls?4?4?4@ DB 'Setup Controls...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDLJEAHE@Your?5player@
CONST	SEGMENT
??_C@_0M@KDLJEAHE@Your?5player@ DB 'Your player', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGOLJJBO@Your?5color@
CONST	SEGMENT
??_C@_0L@JGOLJJBO@Your?5color@ DB 'Your color', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPFILBGF@Your?5name@
CONST	SEGMENT
??_C@_09LPFILBGF@Your?5name@ DB 'Your name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDKMIPIP@OPTIONS@
CONST	SEGMENT
??_C@_07KDKMIPIP@OPTIONS@ DB 'OPTIONS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LKGFJEJH@M_OPTTTL@
CONST	SEGMENT
??_C@_08LKGFJEJH@M_OPTTTL@ DB 'M_OPTTTL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBJPCFEH@Mlook?5Speed@
CONST	SEGMENT
??_C@_0M@KBJPCFEH@Mlook?5Speed@ DB 'Mlook Speed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EOGFHHGC@Invert?5Mouse2@
CONST	SEGMENT
??_C@_0O@EOGFHHGC@Invert?5Mouse2@ DB 'Invert Mouse2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GEFBMDDG@Mouse?5Move@
CONST	SEGMENT
??_C@_0L@GEFBMDDG@Mouse?5Move@ DB 'Mouse Move', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KEGGIKEO@Always?5MouseLook@
CONST	SEGMENT
??_C@_0BB@KEGGIKEO@Always?5MouseLook@ DB 'Always MouseLook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OMPLOIED@Mouse2?5Speed@
CONST	SEGMENT
??_C@_0N@OMPLOIED@Mouse2?5Speed@ DB 'Mouse2 Speed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDDJFBE@Use?5Mouse?52@
CONST	SEGMENT
??_C@_0M@BDDJFBE@Use?5Mouse?52@ DB 'Use Mouse 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GFAKFMCM@Second?5Mouse?5Serial?5Port@
CONST	SEGMENT
??_C@_0BJ@GFAKFMCM@Second?5Mouse?5Serial?5Port@ DB 'Second Mouse Serial P'
	DB	'ort', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HOINAANG@Multiplayer@
CONST	SEGMENT
??_C@_0M@HOINAANG@Multiplayer@ DB 'Multiplayer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFCBKCFI@M_MULTI@
CONST	SEGMENT
??_C@_07CFCBKCFI@M_MULTI@ DB 'M_MULTI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DKDLDHEI@END?5GAME@
CONST	SEGMENT
??_C@_08DKDLDHEI@END?5GAME@ DB 'END GAME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MJGNPGGH@SETUP?5PLAYER?52@
CONST	SEGMENT
??_C@_0P@MJGNPGGH@SETUP?5PLAYER?52@ DB 'SETUP PLAYER 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IGHAIACE@SETUP?5PLAYER@
CONST	SEGMENT
??_C@_0N@IGHAIACE@SETUP?5PLAYER@ DB 'SETUP PLAYER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BBGFJJCL@NETWORK?5OPTIONS@
CONST	SEGMENT
??_C@_0BA@BBGFJJCL@NETWORK?5OPTIONS@ DB 'NETWORK OPTIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPOLLGPH@TWO?5PLAYER?5GAME@
CONST	SEGMENT
??_C@_0BA@BPOLLGPH@TWO?5PLAYER?5GAME@ DB 'TWO PLAYER GAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KPBOMJON@JOIN?5GAME?5?$CISpecify?5IP?$CJ@
CONST	SEGMENT
??_C@_0BH@KPBOMJON@JOIN?5GAME?5?$CISpecify?5IP?$CJ@ DB 'JOIN GAME (Specif'
	DB	'y IP)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDEPENBD@JOIN?5GAME?5?$CILAN?$CJ@
CONST	SEGMENT
??_C@_0BA@IDEPENBD@JOIN?5GAME?5?$CILAN?$CJ@ DB 'JOIN GAME (LAN)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HCDPIHPJ@JOIN?5GAME?5?$CIInternet?$CJ@
CONST	SEGMENT
??_C@_0BF@HCDPIHPJ@JOIN?5GAME?5?$CIInternet?$CJ@ DB 'JOIN GAME (Internet)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09KHJLDOGO@HOST?5GAME@
CONST	SEGMENT
??_C@_09KHJLDOGO@HOST?5GAME@ DB 'HOST GAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMNCILHE@Scramble?5Teams@
CONST	SEGMENT
??_C@_0P@IMNCILHE@Scramble?5Teams@ DB 'Scramble Teams', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CONBKCME@Scramble?5Method@
CONST	SEGMENT
??_C@_0BA@CONBKCME@Scramble?5Method@ DB 'Scramble Method', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NPGFALIE@Change?5Team@
CONST	SEGMENT
??_C@_0M@NPGFALIE@Change?5Team@ DB 'Change Team', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KFLFCEAO@Confirm@
CONST	SEGMENT
??_C@_07KFLFCEAO@Confirm@ DB 'Confirm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CKKBCHJC@Select?5Team@
CONST	SEGMENT
??_C@_0M@CKKBCHJC@Select?5Team@ DB 'Select Team', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBKLIPB@Change?5Level@
CONST	SEGMENT
??_C@_0N@PBKLIPB@Change?5Level@ DB 'Change Level', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IAAPIHAI@Start?5Server@
CONST	SEGMENT
??_C@_0N@IAAPIHAI@Start?5Server@ DB 'Start Server', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FHMJPCKA@Start@
CONST	SEGMENT
??_C@_05FHMJPCKA@Start@ DB 'Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KOHFLOFG@Level@
CONST	SEGMENT
??_C@_05KOHFLOFG@Level@ DB 'Level', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MLEPJNJO@Advertise?5on?5Internet@
CONST	SEGMENT
??_C@_0BG@MLEPJNJO@Advertise?5on?5Internet@ DB 'Advertise on Internet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CJBILMAG@Game?5Type@
CONST	SEGMENT
??_C@_09CJBILMAG@Game?5Type@ DB 'Game Type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LAFKIDDC@newgametype@
CONST	SEGMENT
??_C@_0M@LAFKIDDC@newgametype@ DB 'newgametype', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKIMLJNP@CTF@
CONST	SEGMENT
??_C@_03JKIMLJNP@CTF@ DB 'CTF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNDKJCLH@Hide?5and?5Seek@
CONST	SEGMENT
??_C@_0O@NNDKJCLH@Hide?5and?5Seek@ DB 'Hide and Seek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PJHNOEGB@Tag@
CONST	SEGMENT
??_C@_03PJHNOEGB@Tag@ DB 'Tag', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HJJKODGK@Classic?5Race@
CONST	SEGMENT
??_C@_0N@HJJKODGK@Classic?5Race@ DB 'Classic Race', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKIPOOLE@Race@
CONST	SEGMENT
??_C@_04KKIPOOLE@Race@ DB 'Race', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LAOGNCMC@Team?5Match@
CONST	SEGMENT
??_C@_0L@LAOGNCMC@Team?5Match@ DB 'Team Match', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKEBLKAO@Match@
CONST	SEGMENT
??_C@_05FKEBLKAO@Match@ DB 'Match', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJHPDIMF@Coop@
CONST	SEGMENT
??_C@_04CJHPDIMF@Coop@ DB 'Coop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOPLAOAI@chooseskin@
CONST	SEGMENT
??_C@_0L@HOPLAOAI@chooseskin@ DB 'chooseskin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
CONST	SEGMENT
??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ DB 'son'
	DB	'ic', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MCHHMPMB@nextmap@
CONST	SEGMENT
??_C@_07MCHHMPMB@nextmap@ DB 'nextmap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07COMBHBHI@MAP1035@
CONST	SEGMENT
??_C@_07COMBHBHI@MAP1035@ DB 'MAP1035', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHNKEADJ@MAP1034@
CONST	SEGMENT
??_C@_07DHNKEADJ@MAP1034@ DB 'MAP1034', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HIJLNGPO@MAP1033@
CONST	SEGMENT
??_C@_07HIJLNGPO@MAP1033@ DB 'MAP1033', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GBIAOHLP@MAP1032@
CONST	SEGMENT
??_C@_07GBIAOHLP@MAP1032@ DB 'MAP1032', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EKKNLEHM@MAP1031@
CONST	SEGMENT
??_C@_07EKKNLEHM@MAP1031@ DB 'MAP1031', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FDLGIFDN@MAP1030@
CONST	SEGMENT
??_C@_07FDLGIFDN@MAP1030@ DB 'MAP1030', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IDLGFEED@MAP1029@
CONST	SEGMENT
??_C@_07IDLGFEED@MAP1029@ DB 'MAP1029', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKKNGFAC@MAP1028@
CONST	SEGMENT
??_C@_07JKKNGFAC@MAP1028@ DB 'MAP1028', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNDFHJMN@MAP1027@
CONST	SEGMENT
??_C@_07BNDFHJMN@MAP1027@ DB 'MAP1027', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ECOEIIM@MAP1026@
CONST	SEGMENT
??_C@_07ECOEIIM@MAP1026@ DB 'MAP1026', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPADBLEP@MAP1025@
CONST	SEGMENT
??_C@_07CPADBLEP@MAP1025@ DB 'MAP1025', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DGBICKAO@MAP1024@
CONST	SEGMENT
??_C@_07DGBICKAO@MAP1024@ DB 'MAP1024', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HJFJLMMJ@MAP1023@
CONST	SEGMENT
??_C@_07HJFJLMMJ@MAP1023@ DB 'MAP1023', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GAECINII@MAP1022@
CONST	SEGMENT
??_C@_07GAECINII@MAP1022@ DB 'MAP1022', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELGPNOEL@MAP1021@
CONST	SEGMENT
??_C@_07ELGPNOEL@MAP1021@ DB 'MAP1021', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCHEOPAK@MAP1020@
CONST	SEGMENT
??_C@_07FCHEOPAK@MAP1020@ DB 'MAP1020', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IBPAOKBK@MAP1019@
CONST	SEGMENT
??_C@_07IBPAOKBK@MAP1019@ DB 'MAP1019', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JIOLNLFL@MAP1018@
CONST	SEGMENT
??_C@_07JIOLNLFL@MAP1018@ DB 'MAP1018', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPHDMHJE@MAP1017@
CONST	SEGMENT
??_C@_07BPHDMHJE@MAP1017@ DB 'MAP1017', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GGIPGNF@MAP1016@
CONST	SEGMENT
??_C@_07GGIPGNF@MAP1016@ DB 'MAP1016', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNEFKFBG@MAP1015@
CONST	SEGMENT
??_C@_07CNEFKFBG@MAP1015@ DB 'MAP1015', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DEFOJEFH@MAP1014@
CONST	SEGMENT
??_C@_07DEFOJEFH@MAP1014@ DB 'MAP1014', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HLBPACJA@MAP1013@
CONST	SEGMENT
??_C@_07HLBPACJA@MAP1013@ DB 'MAP1013', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GCAEDDNB@MAP1012@
CONST	SEGMENT
??_C@_07GCAEDDNB@MAP1012@ DB 'MAP1012', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EJCJGABC@MAP1011@
CONST	SEGMENT
??_C@_07EJCJGABC@MAP1011@ DB 'MAP1011', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FADCFBFD@MAP1010@
CONST	SEGMENT
??_C@_07FADCFBFD@MAP1010@ DB 'MAP1010', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IADCIACN@MAP1009@
CONST	SEGMENT
??_C@_07IADCIACN@MAP1009@ DB 'MAP1009', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJCJLBGM@MAP1008@
CONST	SEGMENT
??_C@_07JJCJLBGM@MAP1008@ DB 'MAP1008', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BOLBKNKD@MAP1007@
CONST	SEGMENT
??_C@_07BOLBKNKD@MAP1007@ DB 'MAP1007', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKKJMOC@MAP1006@
CONST	SEGMENT
??_C@_07HKKJMOC@MAP1006@ DB 'MAP1006', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMIHMPCB@MAP1005@
CONST	SEGMENT
??_C@_07CMIHMPCB@MAP1005@ DB 'MAP1005', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFJMPOGA@MAP1004@
CONST	SEGMENT
??_C@_07DFJMPOGA@MAP1004@ DB 'MAP1004', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKNNGIKH@MAP1003@
CONST	SEGMENT
??_C@_07HKNNGIKH@MAP1003@ DB 'MAP1003', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GDMGFJOG@MAP1002@
CONST	SEGMENT
??_C@_07GDMGFJOG@MAP1002@ DB 'MAP1002', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EIOLAKCF@MAP1001@
CONST	SEGMENT
??_C@_07EIOLAKCF@MAP1001@ DB 'MAP1001', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FBPADLGE@MAP1000@
CONST	SEGMENT
??_C@_07FBPADLGE@MAP1000@ DB 'MAP1000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BDEFMGLE@MAP999@
CONST	SEGMENT
??_C@_06BDEFMGLE@MAP999@ DB 'MAP999', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFOPHPF@MAP998@
CONST	SEGMENT
??_C@_06KFOPHPF@MAP998@ DB 'MAP998', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06INMGOLDK@MAP997@
CONST	SEGMENT
??_C@_06INMGOLDK@MAP997@ DB 'MAP997', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JENNNKHL@MAP996@
CONST	SEGMENT
??_C@_06JENNNKHL@MAP996@ DB 'MAP996', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LPPAIJLI@MAP995@
CONST	SEGMENT
??_C@_06LPPAIJLI@MAP995@ DB 'MAP995', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGOLLIPJ@MAP994@
CONST	SEGMENT
??_C@_06KGOLLIPJ@MAP994@ DB 'MAP994', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJKKCODO@MAP993@
CONST	SEGMENT
??_C@_06OJKKCODO@MAP993@ DB 'MAP993', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PALBBPHP@MAP992@
CONST	SEGMENT
??_C@_06PALBBPHP@MAP992@ DB 'MAP992', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NLJMEMLM@MAP991@
CONST	SEGMENT
??_C@_06NLJMEMLM@MAP991@ DB 'MAP991', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCIHHNPN@MAP990@
CONST	SEGMENT
??_C@_06MCIHHNPN@MAP990@ DB 'MAP990', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCIHKMID@MAP989@
CONST	SEGMENT
??_C@_06BCIHKMID@MAP989@ DB 'MAP989', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJMJNMC@MAP988@
CONST	SEGMENT
??_C@_06LJMJNMC@MAP988@ DB 'MAP988', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMAEIBAN@MAP987@
CONST	SEGMENT
??_C@_06IMAEIBAN@MAP987@ DB 'MAP987', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFBPLAEM@MAP986@
CONST	SEGMENT
??_C@_06JFBPLAEM@MAP986@ DB 'MAP986', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LODCODIP@MAP985@
CONST	SEGMENT
??_C@_06LODCODIP@MAP985@ DB 'MAP985', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KHCJNCMO@MAP984@
CONST	SEGMENT
??_C@_06KHCJNCMO@MAP984@ DB 'MAP984', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIGIEEAJ@MAP983@
CONST	SEGMENT
??_C@_06OIGIEEAJ@MAP983@ DB 'MAP983', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBHDHFEI@MAP982@
CONST	SEGMENT
??_C@_06PBHDHFEI@MAP982@ DB 'MAP982', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NKFOCGIL@MAP981@
CONST	SEGMENT
??_C@_06NKFOCGIL@MAP981@ DB 'MAP981', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MDEFBHMK@MAP980@
CONST	SEGMENT
??_C@_06MDEFBHMK@MAP980@ DB 'MAP980', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BJNLOLLO@MAP979@
CONST	SEGMENT
??_C@_06BJNLOLLO@MAP979@ DB 'MAP979', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MANKPP@MAP978@
CONST	SEGMENT
??_C@_06MANKPP@MAP978@ DB 'MAP978', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IHFIMGDA@MAP977@
CONST	SEGMENT
??_C@_06IHFIMGDA@MAP977@ DB 'MAP977', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOEDPHHB@MAP976@
CONST	SEGMENT
??_C@_06JOEDPHHB@MAP976@ DB 'MAP976', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFGOKELC@MAP975@
CONST	SEGMENT
??_C@_06LFGOKELC@MAP975@ DB 'MAP975', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KMHFJFPD@MAP974@
CONST	SEGMENT
??_C@_06KMHFJFPD@MAP974@ DB 'MAP974', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODDEADDE@MAP973@
CONST	SEGMENT
??_C@_06ODDEADDE@MAP973@ DB 'MAP973', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKCPDCHF@MAP972@
CONST	SEGMENT
??_C@_06PKCPDCHF@MAP972@ DB 'MAP972', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBACGBLG@MAP971@
CONST	SEGMENT
??_C@_06NBACGBLG@MAP971@ DB 'MAP971', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIBJFAPH@MAP970@
CONST	SEGMENT
??_C@_06MIBJFAPH@MAP970@ DB 'MAP970', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIBJIBIJ@MAP969@
CONST	SEGMENT
??_C@_06BIBJIBIJ@MAP969@ DB 'MAP969', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BACLAMI@MAP968@
CONST	SEGMENT
??_C@_06BACLAMI@MAP968@ DB 'MAP968', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGJKKMAH@MAP967@
CONST	SEGMENT
??_C@_06IGJKKMAH@MAP967@ DB 'MAP967', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JPIBJNEG@MAP966@
CONST	SEGMENT
??_C@_06JPIBJNEG@MAP966@ DB 'MAP966', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEKMMOIF@MAP965@
CONST	SEGMENT
??_C@_06LEKMMOIF@MAP965@ DB 'MAP965', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNLHPPME@MAP964@
CONST	SEGMENT
??_C@_06KNLHPPME@MAP964@ DB 'MAP964', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCPGGJAD@MAP963@
CONST	SEGMENT
??_C@_06OCPGGJAD@MAP963@ DB 'MAP963', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLONFIEC@MAP962@
CONST	SEGMENT
??_C@_06PLONFIEC@MAP962@ DB 'MAP962', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NAMAALIB@MAP961@
CONST	SEGMENT
??_C@_06NAMAALIB@MAP961@ DB 'MAP961', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJNLDKMA@MAP960@
CONST	SEGMENT
??_C@_06MJNLDKMA@MAP960@ DB 'MAP960', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BKFPDPNA@MAP959@
CONST	SEGMENT
??_C@_06BKFPDPNA@MAP959@ DB 'MAP959', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DEEAOJB@MAP958@
CONST	SEGMENT
??_C@_06DEEAOJB@MAP958@ DB 'MAP958', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IENMBCFO@MAP957@
CONST	SEGMENT
??_C@_06IENMBCFO@MAP957@ DB 'MAP957', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNMHCDBP@MAP956@
CONST	SEGMENT
??_C@_06JNMHCDBP@MAP956@ DB 'MAP956', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGOKHANM@MAP955@
CONST	SEGMENT
??_C@_06LGOKHANM@MAP955@ DB 'MAP955', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPPBEBJN@MAP954@
CONST	SEGMENT
??_C@_06KPPBEBJN@MAP954@ DB 'MAP954', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OALANHFK@MAP953@
CONST	SEGMENT
??_C@_06OALANHFK@MAP953@ DB 'MAP953', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJKLOGBL@MAP952@
CONST	SEGMENT
??_C@_06PJKLOGBL@MAP952@ DB 'MAP952', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCIGLFNI@MAP951@
CONST	SEGMENT
??_C@_06NCIGLFNI@MAP951@ DB 'MAP951', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLJNIEJJ@MAP950@
CONST	SEGMENT
??_C@_06MLJNIEJJ@MAP950@ DB 'MAP950', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLJNFFOH@MAP949@
CONST	SEGMENT
??_C@_06BLJNFFOH@MAP949@ DB 'MAP949', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIGGEKG@MAP948@
CONST	SEGMENT
??_C@_06CIGGEKG@MAP948@ DB 'MAP948', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFBOHIGJ@MAP947@
CONST	SEGMENT
??_C@_06IFBOHIGJ@MAP947@ DB 'MAP947', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JMAFEJCI@MAP946@
CONST	SEGMENT
??_C@_06JMAFEJCI@MAP946@ DB 'MAP946', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LHCIBKOL@MAP945@
CONST	SEGMENT
??_C@_06LHCIBKOL@MAP945@ DB 'MAP945', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KODDCLKK@MAP944@
CONST	SEGMENT
??_C@_06KODDCLKK@MAP944@ DB 'MAP944', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBHCLNGN@MAP943@
CONST	SEGMENT
??_C@_06OBHCLNGN@MAP943@ DB 'MAP943', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PIGJIMCM@MAP942@
CONST	SEGMENT
??_C@_06PIGJIMCM@MAP942@ DB 'MAP942', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NDEENPOP@MAP941@
CONST	SEGMENT
??_C@_06NDEENPOP@MAP941@ DB 'MAP941', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKFPOOKO@MAP940@
CONST	SEGMENT
??_C@_06MKFPOOKO@MAP940@ DB 'MAP940', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BONCEDGC@MAP939@
CONST	SEGMENT
??_C@_06BONCEDGC@MAP939@ DB 'MAP939', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMJHCCD@MAP938@
CONST	SEGMENT
??_C@_06HMJHCCD@MAP938@ DB 'MAP938', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAFBGOOM@MAP937@
CONST	SEGMENT
??_C@_06IAFBGOOM@MAP937@ DB 'MAP937', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJEKFPKN@MAP936@
CONST	SEGMENT
??_C@_06JJEKFPKN@MAP936@ DB 'MAP936', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCGHAMGO@MAP935@
CONST	SEGMENT
??_C@_06LCGHAMGO@MAP935@ DB 'MAP935', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHMDNCP@MAP934@
CONST	SEGMENT
??_C@_06KLHMDNCP@MAP934@ DB 'MAP934', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEDNKLOI@MAP933@
CONST	SEGMENT
??_C@_06OEDNKLOI@MAP933@ DB 'MAP933', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PNCGJKKJ@MAP932@
CONST	SEGMENT
??_C@_06PNCGJKKJ@MAP932@ DB 'MAP932', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGALMJGK@MAP931@
CONST	SEGMENT
??_C@_06NGALMJGK@MAP931@ DB 'MAP931', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPBAPICL@MAP930@
CONST	SEGMENT
??_C@_06MPBAPICL@MAP930@ DB 'MAP930', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPBACJFF@MAP929@
CONST	SEGMENT
??_C@_06BPBACJFF@MAP929@ DB 'MAP929', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GALBIBE@MAP928@
CONST	SEGMENT
??_C@_06GALBIBE@MAP928@ DB 'MAP928', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBJDAENL@MAP927@
CONST	SEGMENT
??_C@_06IBJDAENL@MAP927@ DB 'MAP927', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIIIDFJK@MAP926@
CONST	SEGMENT
??_C@_06JIIIDFJK@MAP926@ DB 'MAP926', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LDKFGGFJ@MAP925@
CONST	SEGMENT
??_C@_06LDKFGGFJ@MAP925@ DB 'MAP925', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKLOFHBI@MAP924@
CONST	SEGMENT
??_C@_06KKLOFHBI@MAP924@ DB 'MAP924', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFPPMBNP@MAP923@
CONST	SEGMENT
??_C@_06OFPPMBNP@MAP923@ DB 'MAP923', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PMOEPAJO@MAP922@
CONST	SEGMENT
??_C@_06PMOEPAJO@MAP922@ DB 'MAP922', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHMJKDFN@MAP921@
CONST	SEGMENT
??_C@_06NHMJKDFN@MAP921@ DB 'MAP921', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MONCJCBM@MAP920@
CONST	SEGMENT
??_C@_06MONCJCBM@MAP920@ DB 'MAP920', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNFGJHAM@MAP919@
CONST	SEGMENT
??_C@_06BNFGJHAM@MAP919@ DB 'MAP919', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EENKGEN@MAP918@
CONST	SEGMENT
??_C@_06EENKGEN@MAP918@ DB 'MAP918', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IDNFLKIC@MAP917@
CONST	SEGMENT
??_C@_06IDNFLKIC@MAP917@ DB 'MAP917', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JKMOILMD@MAP916@
CONST	SEGMENT
??_C@_06JKMOILMD@MAP916@ DB 'MAP916', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBODNIAA@MAP915@
CONST	SEGMENT
??_C@_06LBODNIAA@MAP915@ DB 'MAP915', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KIPIOJEB@MAP914@
CONST	SEGMENT
??_C@_06KIPIOJEB@MAP914@ DB 'MAP914', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHLJHPIG@MAP913@
CONST	SEGMENT
??_C@_06OHLJHPIG@MAP913@ DB 'MAP913', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POKCEOMH@MAP912@
CONST	SEGMENT
??_C@_06POKCEOMH@MAP912@ DB 'MAP912', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NFIPBNAE@MAP911@
CONST	SEGMENT
??_C@_06NFIPBNAE@MAP911@ DB 'MAP911', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMJECMEF@MAP910@
CONST	SEGMENT
??_C@_06MMJECMEF@MAP910@ DB 'MAP910', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMJEPNDL@MAP909@
CONST	SEGMENT
??_C@_06BMJEPNDL@MAP909@ DB 'MAP909', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIPMMHK@MAP908@
CONST	SEGMENT
??_C@_06FIPMMHK@MAP908@ DB 'MAP908', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICBHNALF@MAP907@
CONST	SEGMENT
??_C@_06ICBHNALF@MAP907@ DB 'MAP907', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JLAMOBPE@MAP906@
CONST	SEGMENT
??_C@_06JLAMOBPE@MAP906@ DB 'MAP906', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LACBLCDH@MAP905@
CONST	SEGMENT
??_C@_06LACBLCDH@MAP905@ DB 'MAP905', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJDKIDHG@MAP904@
CONST	SEGMENT
??_C@_06KJDKIDHG@MAP904@ DB 'MAP904', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGHLBFLB@MAP903@
CONST	SEGMENT
??_C@_06OGHLBFLB@MAP903@ DB 'MAP903', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PPGACEPA@MAP902@
CONST	SEGMENT
??_C@_06PPGACEPA@MAP902@ DB 'MAP902', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NEENHHDD@MAP901@
CONST	SEGMENT
??_C@_06NEENHHDD@MAP901@ DB 'MAP901', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNFGEGHC@MAP900@
CONST	SEGMENT
??_C@_06MNFGEGHC@MAP900@ DB 'MAP900', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLPJKBNB@MAP899@
CONST	SEGMENT
??_C@_06KLPJKBNB@MAP899@ DB 'MAP899', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCOCJAJA@MAP898@
CONST	SEGMENT
??_C@_06LCOCJAJA@MAP898@ DB 'MAP898', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DFHKIMFP@MAP897@
CONST	SEGMENT
??_C@_06DFHKIMFP@MAP897@ DB 'MAP897', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMGBLNBO@MAP896@
CONST	SEGMENT
??_C@_06CMGBLNBO@MAP896@ DB 'MAP896', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HEMOONN@MAP895@
CONST	SEGMENT
??_C@_06HEMOONN@MAP895@ DB 'MAP895', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BOFHNPJM@MAP894@
CONST	SEGMENT
??_C@_06BOFHNPJM@MAP894@ DB 'MAP894', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBBGEJFL@MAP893@
CONST	SEGMENT
??_C@_06FBBGEJFL@MAP893@ DB 'MAP893', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EIANHIBK@MAP892@
CONST	SEGMENT
??_C@_06EIANHIBK@MAP892@ DB 'MAP892', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDCACLNJ@MAP891@
CONST	SEGMENT
??_C@_06GDCACLNJ@MAP891@ DB 'MAP891', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKDLBKJI@MAP890@
CONST	SEGMENT
??_C@_06HKDLBKJI@MAP890@ DB 'MAP890', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKDLMLOG@MAP889@
CONST	SEGMENT
??_C@_06KKDLMLOG@MAP889@ DB 'MAP889', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LDCAPKKH@MAP888@
CONST	SEGMENT
??_C@_06LDCAPKKH@MAP888@ DB 'MAP888', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DELIOGGI@MAP887@
CONST	SEGMENT
??_C@_06DELIOGGI@MAP887@ DB 'MAP887', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNKDNHCJ@MAP886@
CONST	SEGMENT
??_C@_06CNKDNHCJ@MAP886@ DB 'MAP886', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIOIEOK@MAP885@
CONST	SEGMENT
??_C@_06GIOIEOK@MAP885@ DB 'MAP885', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPJFLFKL@MAP884@
CONST	SEGMENT
??_C@_06BPJFLFKL@MAP884@ DB 'MAP884', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FANECDGM@MAP883@
CONST	SEGMENT
??_C@_06FANECDGM@MAP883@ DB 'MAP883', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJMPBCCN@MAP882@
CONST	SEGMENT
??_C@_06EJMPBCCN@MAP882@ DB 'MAP882', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCOCEBOO@MAP881@
CONST	SEGMENT
??_C@_06GCOCEBOO@MAP881@ DB 'MAP881', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLPJHAKP@MAP880@
CONST	SEGMENT
??_C@_06HLPJHAKP@MAP880@ DB 'MAP880', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KBGHIMNL@MAP879@
CONST	SEGMENT
??_C@_06KBGHIMNL@MAP879@ DB 'MAP879', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LIHMLNJK@MAP878@
CONST	SEGMENT
??_C@_06LIHMLNJK@MAP878@ DB 'MAP878', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPOEKBFF@MAP877@
CONST	SEGMENT
??_C@_06DPOEKBFF@MAP877@ DB 'MAP877', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CGPPJABE@MAP876@
CONST	SEGMENT
??_C@_06CGPPJABE@MAP876@ DB 'MAP876', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNCMDNH@MAP875@
CONST	SEGMENT
??_C@_06NNCMDNH@MAP875@ DB 'MAP875', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BEMJPCJG@MAP874@
CONST	SEGMENT
??_C@_06BEMJPCJG@MAP874@ DB 'MAP874', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLIIGEFB@MAP873@
CONST	SEGMENT
??_C@_06FLIIGEFB@MAP873@ DB 'MAP873', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECJDFFBA@MAP872@
CONST	SEGMENT
??_C@_06ECJDFFBA@MAP872@ DB 'MAP872', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJLOAGND@MAP871@
CONST	SEGMENT
??_C@_06GJLOAGND@MAP871@ DB 'MAP871', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HAKFDHJC@MAP870@
CONST	SEGMENT
??_C@_06HAKFDHJC@MAP870@ DB 'MAP870', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KAKFOGOM@MAP869@
CONST	SEGMENT
??_C@_06KAKFOGOM@MAP869@ DB 'MAP869', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJLONHKN@MAP868@
CONST	SEGMENT
??_C@_06LJLONHKN@MAP868@ DB 'MAP868', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOCGMLGC@MAP867@
CONST	SEGMENT
??_C@_06DOCGMLGC@MAP867@ DB 'MAP867', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHDNPKCD@MAP866@
CONST	SEGMENT
??_C@_06CHDNPKCD@MAP866@ DB 'MAP866', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBAKJOA@MAP865@
CONST	SEGMENT
??_C@_06MBAKJOA@MAP865@ DB 'MAP865', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFALJIKB@MAP864@
CONST	SEGMENT
??_C@_06BFALJIKB@MAP864@ DB 'MAP864', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKEKAOGG@MAP863@
CONST	SEGMENT
??_C@_06FKEKAOGG@MAP863@ DB 'MAP863', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDFBDPCH@MAP862@
CONST	SEGMENT
??_C@_06EDFBDPCH@MAP862@ DB 'MAP862', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIHMGMOE@MAP861@
CONST	SEGMENT
??_C@_06GIHMGMOE@MAP861@ DB 'MAP861', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBGHFNKF@MAP860@
CONST	SEGMENT
??_C@_06HBGHFNKF@MAP860@ DB 'MAP860', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCODFILF@MAP859@
CONST	SEGMENT
??_C@_06KCODFILF@MAP859@ DB 'MAP859', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLPIGJPE@MAP858@
CONST	SEGMENT
??_C@_06LLPIGJPE@MAP858@ DB 'MAP858', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DMGAHFDL@MAP857@
CONST	SEGMENT
??_C@_06DMGAHFDL@MAP857@ DB 'MAP857', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CFHLEEHK@MAP856@
CONST	SEGMENT
??_C@_06CFHLEEHK@MAP856@ DB 'MAP856', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFGBHLJ@MAP855@
CONST	SEGMENT
??_C@_06OFGBHLJ@MAP855@ DB 'MAP855', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHENCGPI@MAP854@
CONST	SEGMENT
??_C@_06BHENCGPI@MAP854@ DB 'MAP854', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIAMLADP@MAP853@
CONST	SEGMENT
??_C@_06FIAMLADP@MAP853@ DB 'MAP853', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBBHIBHO@MAP852@
CONST	SEGMENT
??_C@_06EBBHIBHO@MAP852@ DB 'MAP852', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GKDKNCLN@MAP851@
CONST	SEGMENT
??_C@_06GKDKNCLN@MAP851@ DB 'MAP851', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDCBODPM@MAP850@
CONST	SEGMENT
??_C@_06HDCBODPM@MAP850@ DB 'MAP850', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDCBDCIC@MAP849@
CONST	SEGMENT
??_C@_06KDCBDCIC@MAP849@ DB 'MAP849', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKDKADMD@MAP848@
CONST	SEGMENT
??_C@_06LKDKADMD@MAP848@ DB 'MAP848', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DNKCBPAM@MAP847@
CONST	SEGMENT
??_C@_06DNKCBPAM@MAP847@ DB 'MAP847', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CELJCOEN@MAP846@
CONST	SEGMENT
??_C@_06CELJCOEN@MAP846@ DB 'MAP846', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJEHNIO@MAP845@
CONST	SEGMENT
??_C@_06PJEHNIO@MAP845@ DB 'MAP845', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGIPEMMP@MAP844@
CONST	SEGMENT
??_C@_06BGIPEMMP@MAP844@ DB 'MAP844', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJMONKAI@MAP843@
CONST	SEGMENT
??_C@_06FJMONKAI@MAP843@ DB 'MAP843', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EANFOLEJ@MAP842@
CONST	SEGMENT
??_C@_06EANFOLEJ@MAP842@ DB 'MAP842', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLPILIIK@MAP841@
CONST	SEGMENT
??_C@_06GLPILIIK@MAP841@ DB 'MAP841', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCODIJML@MAP840@
CONST	SEGMENT
??_C@_06HCODIJML@MAP840@ DB 'MAP840', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGGOCEAH@MAP839@
CONST	SEGMENT
??_C@_06KGGOCEAH@MAP839@ DB 'MAP839', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LPHFBFEG@MAP838@
CONST	SEGMENT
??_C@_06LPHFBFEG@MAP838@ DB 'MAP838', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DIONAJIJ@MAP837@
CONST	SEGMENT
??_C@_06DIONAJIJ@MAP837@ DB 'MAP837', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBPGDIMI@MAP836@
CONST	SEGMENT
??_C@_06CBPGDIMI@MAP836@ DB 'MAP836', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNLGLAL@MAP835@
CONST	SEGMENT
??_C@_06KNLGLAL@MAP835@ DB 'MAP835', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BDMAFKEK@MAP834@
CONST	SEGMENT
??_C@_06BDMAFKEK@MAP834@ DB 'MAP834', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMIBMMIN@MAP833@
CONST	SEGMENT
??_C@_06FMIBMMIN@MAP833@ DB 'MAP833', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFJKPNMM@MAP832@
CONST	SEGMENT
??_C@_06EFJKPNMM@MAP832@ DB 'MAP832', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GOLHKOAP@MAP831@
CONST	SEGMENT
??_C@_06GOLHKOAP@MAP831@ DB 'MAP831', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHKMJPEO@MAP830@
CONST	SEGMENT
??_C@_06HHKMJPEO@MAP830@ DB 'MAP830', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KHKMEODA@MAP829@
CONST	SEGMENT
??_C@_06KHKMEODA@MAP829@ DB 'MAP829', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LOLHHPHB@MAP828@
CONST	SEGMENT
??_C@_06LOLHHPHB@MAP828@ DB 'MAP828', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJCPGDLO@MAP827@
CONST	SEGMENT
??_C@_06DJCPGDLO@MAP827@ DB 'MAP827', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CADEFCPP@MAP826@
CONST	SEGMENT
??_C@_06CADEFCPP@MAP826@ DB 'MAP826', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBJABDM@MAP825@
CONST	SEGMENT
??_C@_06LBJABDM@MAP825@ DB 'MAP825', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCACDAHN@MAP824@
CONST	SEGMENT
??_C@_06BCACDAHN@MAP824@ DB 'MAP824', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNEDKGLK@MAP823@
CONST	SEGMENT
??_C@_06FNEDKGLK@MAP823@ DB 'MAP823', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EEFIJHPL@MAP822@
CONST	SEGMENT
??_C@_06EEFIJHPL@MAP822@ DB 'MAP822', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPHFMEDI@MAP821@
CONST	SEGMENT
??_C@_06GPHFMEDI@MAP821@ DB 'MAP821', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGGOPFHJ@MAP820@
CONST	SEGMENT
??_C@_06HGGOPFHJ@MAP820@ DB 'MAP820', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFOKPAGJ@MAP819@
CONST	SEGMENT
??_C@_06KFOKPAGJ@MAP819@ DB 'MAP819', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMPBMBCI@MAP818@
CONST	SEGMENT
??_C@_06LMPBMBCI@MAP818@ DB 'MAP818', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLGJNNOH@MAP817@
CONST	SEGMENT
??_C@_06DLGJNNOH@MAP817@ DB 'MAP817', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCHCOMKG@MAP816@
CONST	SEGMENT
??_C@_06CCHCOMKG@MAP816@ DB 'MAP816', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFPLPGF@MAP815@
CONST	SEGMENT
??_C@_06JFPLPGF@MAP815@ DB 'MAP815', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAEEIOCE@MAP814@
CONST	SEGMENT
??_C@_06BAEEIOCE@MAP814@ DB 'MAP814', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FPAFBIOD@MAP813@
CONST	SEGMENT
??_C@_06FPAFBIOD@MAP813@ DB 'MAP813', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGBOCJKC@MAP812@
CONST	SEGMENT
??_C@_06EGBOCJKC@MAP812@ DB 'MAP812', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNDDHKGB@MAP811@
CONST	SEGMENT
??_C@_06GNDDHKGB@MAP811@ DB 'MAP811', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HECIELCA@MAP810@
CONST	SEGMENT
??_C@_06HECIELCA@MAP810@ DB 'MAP810', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KECIJKFO@MAP809@
CONST	SEGMENT
??_C@_06KECIJKFO@MAP809@ DB 'MAP809', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNDDKLBP@MAP808@
CONST	SEGMENT
??_C@_06LNDDKLBP@MAP808@ DB 'MAP808', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKKLLHNA@MAP807@
CONST	SEGMENT
??_C@_06DKKLLHNA@MAP807@ DB 'MAP807', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDLAIGJB@MAP806@
CONST	SEGMENT
??_C@_06CDLAIGJB@MAP806@ DB 'MAP806', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJNNFFC@MAP805@
CONST	SEGMENT
??_C@_06IJNNFFC@MAP805@ DB 'MAP805', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBIGOEBD@MAP804@
CONST	SEGMENT
??_C@_06BBIGOEBD@MAP804@ DB 'MAP804', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOMHHCNE@MAP803@
CONST	SEGMENT
??_C@_06FOMHHCNE@MAP803@ DB 'MAP803', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHNMEDJF@MAP802@
CONST	SEGMENT
??_C@_06EHNMEDJF@MAP802@ DB 'MAP802', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMPBBAFG@MAP801@
CONST	SEGMENT
??_C@_06GMPBBAFG@MAP801@ DB 'MAP801', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFOKCBBH@MAP800@
CONST	SEGMENT
??_C@_06HFOKCBBH@MAP800@ DB 'MAP800', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDJKLBIH@MAP799@
CONST	SEGMENT
??_C@_06PDJKLBIH@MAP799@ DB 'MAP799', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OKIBIAMG@MAP798@
CONST	SEGMENT
??_C@_06OKIBIAMG@MAP798@ DB 'MAP798', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNBJJMAJ@MAP797@
CONST	SEGMENT
??_C@_06GNBJJMAJ@MAP797@ DB 'MAP797', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HEACKNEI@MAP796@
CONST	SEGMENT
??_C@_06HEACKNEI@MAP796@ DB 'MAP796', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FPCPPOIL@MAP795@
CONST	SEGMENT
??_C@_06FPCPPOIL@MAP795@ DB 'MAP795', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGDEMPMK@MAP794@
CONST	SEGMENT
??_C@_06EGDEMPMK@MAP794@ DB 'MAP794', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JHFFJAN@MAP793@
CONST	SEGMENT
??_C@_06JHFFJAN@MAP793@ DB 'MAP793', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAGOGIEM@MAP792@
CONST	SEGMENT
??_C@_06BAGOGIEM@MAP792@ DB 'MAP792', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLEDDLIP@MAP791@
CONST	SEGMENT
??_C@_06DLEDDLIP@MAP791@ DB 'MAP791', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCFIAKMO@MAP790@
CONST	SEGMENT
??_C@_06CCFIAKMO@MAP790@ DB 'MAP790', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCFINLLA@MAP789@
CONST	SEGMENT
??_C@_06PCFINLLA@MAP789@ DB 'MAP789', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLEDOKPB@MAP788@
CONST	SEGMENT
??_C@_06OLEDOKPB@MAP788@ DB 'MAP788', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMNLPGDO@MAP787@
CONST	SEGMENT
??_C@_06GMNLPGDO@MAP787@ DB 'MAP787', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFMAMHHP@MAP786@
CONST	SEGMENT
??_C@_06HFMAMHHP@MAP786@ DB 'MAP786', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOONJELM@MAP785@
CONST	SEGMENT
??_C@_06FOONJELM@MAP785@ DB 'MAP785', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHPGKFPN@MAP784@
CONST	SEGMENT
??_C@_06EHPGKFPN@MAP784@ DB 'MAP784', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILHDDDK@MAP783@
CONST	SEGMENT
??_C@_06ILHDDDK@MAP783@ DB 'MAP783', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBKMACHL@MAP782@
CONST	SEGMENT
??_C@_06BBKMACHL@MAP782@ DB 'MAP782', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKIBFBLI@MAP781@
CONST	SEGMENT
??_C@_06DKIBFBLI@MAP781@ DB 'MAP781', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDJKGAPJ@MAP780@
CONST	SEGMENT
??_C@_06CDJKGAPJ@MAP780@ DB 'MAP780', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJAEJMIN@MAP779@
CONST	SEGMENT
??_C@_06PJAEJMIN@MAP779@ DB 'MAP779', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OABPKNMM@MAP778@
CONST	SEGMENT
??_C@_06OABPKNMM@MAP778@ DB 'MAP778', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GHIHLBAD@MAP777@
CONST	SEGMENT
??_C@_06GHIHLBAD@MAP777@ DB 'MAP777', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOJMIAEC@MAP776@
CONST	SEGMENT
??_C@_06HOJMIAEC@MAP776@ DB 'MAP776', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFLBNDIB@MAP775@
CONST	SEGMENT
??_C@_06FFLBNDIB@MAP775@ DB 'MAP775', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMKKOCMA@MAP774@
CONST	SEGMENT
??_C@_06EMKKOCMA@MAP774@ DB 'MAP774', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOLHEAH@MAP773@
CONST	SEGMENT
??_C@_06DOLHEAH@MAP773@ DB 'MAP773', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BKPAEFEG@MAP772@
CONST	SEGMENT
??_C@_06BKPAEFEG@MAP772@ DB 'MAP772', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DBNNBGIF@MAP771@
CONST	SEGMENT
??_C@_06DBNNBGIF@MAP771@ DB 'MAP771', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIMGCHME@MAP770@
CONST	SEGMENT
??_C@_06CIMGCHME@MAP770@ DB 'MAP770', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PIMGPGLK@MAP769@
CONST	SEGMENT
??_C@_06PIMGPGLK@MAP769@ DB 'MAP769', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBNNMHPL@MAP768@
CONST	SEGMENT
??_C@_06OBNNMHPL@MAP768@ DB 'MAP768', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGEFNLDE@MAP767@
CONST	SEGMENT
??_C@_06GGEFNLDE@MAP767@ DB 'MAP767', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPFOOKHF@MAP766@
CONST	SEGMENT
??_C@_06HPFOOKHF@MAP766@ DB 'MAP766', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FEHDLJLG@MAP765@
CONST	SEGMENT
??_C@_06FEHDLJLG@MAP765@ DB 'MAP765', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENGIIIPH@MAP764@
CONST	SEGMENT
??_C@_06ENGIIIPH@MAP764@ DB 'MAP764', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCJBODA@MAP763@
CONST	SEGMENT
??_C@_06CCJBODA@MAP763@ DB 'MAP763', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLDCCPHB@MAP762@
CONST	SEGMENT
??_C@_06BLDCCPHB@MAP762@ DB 'MAP762', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DABPHMLC@MAP761@
CONST	SEGMENT
??_C@_06DABPHMLC@MAP761@ DB 'MAP761', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJAEENPD@MAP760@
CONST	SEGMENT
??_C@_06CJAEENPD@MAP760@ DB 'MAP760', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKIAEIOD@MAP759@
CONST	SEGMENT
??_C@_06PKIAEIOD@MAP759@ DB 'MAP759', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODJLHJKC@MAP758@
CONST	SEGMENT
??_C@_06ODJLHJKC@MAP758@ DB 'MAP758', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEADGFGN@MAP757@
CONST	SEGMENT
??_C@_06GEADGFGN@MAP757@ DB 'MAP757', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNBIFECM@MAP756@
CONST	SEGMENT
??_C@_06HNBIFECM@MAP756@ DB 'MAP756', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGDFAHOP@MAP755@
CONST	SEGMENT
??_C@_06FGDFAHOP@MAP755@ DB 'MAP755', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPCODGKO@MAP754@
CONST	SEGMENT
??_C@_06EPCODGKO@MAP754@ DB 'MAP754', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPKAGJ@MAP753@
CONST	SEGMENT
??_C@_06GPKAGJ@MAP753@ DB 'MAP753', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BJHEJBCI@MAP752@
CONST	SEGMENT
??_C@_06BJHEJBCI@MAP752@ DB 'MAP752', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DCFJMCOL@MAP751@
CONST	SEGMENT
??_C@_06DCFJMCOL@MAP751@ DB 'MAP751', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLECPDKK@MAP750@
CONST	SEGMENT
??_C@_06CLECPDKK@MAP750@ DB 'MAP750', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLECCCNE@MAP749@
CONST	SEGMENT
??_C@_06PLECCCNE@MAP749@ DB 'MAP749', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCFJBDJF@MAP748@
CONST	SEGMENT
??_C@_06OCFJBDJF@MAP748@ DB 'MAP748', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GFMBAPFK@MAP747@
CONST	SEGMENT
??_C@_06GFMBAPFK@MAP747@ DB 'MAP747', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMNKDOBL@MAP746@
CONST	SEGMENT
??_C@_06HMNKDOBL@MAP746@ DB 'MAP746', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHPHGNNI@MAP745@
CONST	SEGMENT
??_C@_06FHPHGNNI@MAP745@ DB 'MAP745', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOOMFMJJ@MAP744@
CONST	SEGMENT
??_C@_06EOOMFMJJ@MAP744@ DB 'MAP744', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BKNMKFO@MAP743@
CONST	SEGMENT
??_C@_06BKNMKFO@MAP743@ DB 'MAP743', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BILGPLBP@MAP742@
CONST	SEGMENT
??_C@_06BILGPLBP@MAP742@ DB 'MAP742', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DDJLKINM@MAP741@
CONST	SEGMENT
??_C@_06DDJLKINM@MAP741@ DB 'MAP741', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKIAJJJN@MAP740@
CONST	SEGMENT
??_C@_06CKIAJJJN@MAP740@ DB 'MAP740', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POANDEFB@MAP739@
CONST	SEGMENT
??_C@_06POANDEFB@MAP739@ DB 'MAP739', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHBGAFBA@MAP738@
CONST	SEGMENT
??_C@_06OHBGAFBA@MAP738@ DB 'MAP738', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GAIOBJNP@MAP737@
CONST	SEGMENT
??_C@_06GAIOBJNP@MAP737@ DB 'MAP737', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJJFCIJO@MAP736@
CONST	SEGMENT
??_C@_06HJJFCIJO@MAP736@ DB 'MAP736', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FCLIHLFN@MAP735@
CONST	SEGMENT
??_C@_06FCLIHLFN@MAP735@ DB 'MAP735', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELKDEKBM@MAP734@
CONST	SEGMENT
??_C@_06ELKDEKBM@MAP734@ DB 'MAP734', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOCNMNL@MAP733@
CONST	SEGMENT
??_C@_06EOCNMNL@MAP733@ DB 'MAP733', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNPJONJK@MAP732@
CONST	SEGMENT
??_C@_06BNPJONJK@MAP732@ DB 'MAP732', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGNELOFJ@MAP731@
CONST	SEGMENT
??_C@_06DGNELOFJ@MAP731@ DB 'MAP731', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPMPIPBI@MAP730@
CONST	SEGMENT
??_C@_06CPMPIPBI@MAP730@ DB 'MAP730', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PPMPFOGG@MAP729@
CONST	SEGMENT
??_C@_06PPMPFOGG@MAP729@ DB 'MAP729', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGNEGPCH@MAP728@
CONST	SEGMENT
??_C@_06OGNEGPCH@MAP728@ DB 'MAP728', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBEMHDOI@MAP727@
CONST	SEGMENT
??_C@_06GBEMHDOI@MAP727@ DB 'MAP727', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIFHECKJ@MAP726@
CONST	SEGMENT
??_C@_06HIFHECKJ@MAP726@ DB 'MAP726', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHKBBGK@MAP725@
CONST	SEGMENT
??_C@_06FDHKBBGK@MAP725@ DB 'MAP725', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKGBCACL@MAP724@
CONST	SEGMENT
??_C@_06EKGBCACL@MAP724@ DB 'MAP724', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FCALGOM@MAP723@
CONST	SEGMENT
??_C@_06FCALGOM@MAP723@ DB 'MAP723', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMDLIHKN@MAP722@
CONST	SEGMENT
??_C@_06BMDLIHKN@MAP722@ DB 'MAP722', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHBGNEGO@MAP721@
CONST	SEGMENT
??_C@_06DHBGNEGO@MAP721@ DB 'MAP721', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06COANOFCP@MAP720@
CONST	SEGMENT
??_C@_06COANOFCP@MAP720@ DB 'MAP720', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PNIJOADP@MAP719@
CONST	SEGMENT
??_C@_06PNIJOADP@MAP719@ DB 'MAP719', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEJCNBHO@MAP718@
CONST	SEGMENT
??_C@_06OEJCNBHO@MAP718@ DB 'MAP718', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDAKMNLB@MAP717@
CONST	SEGMENT
??_C@_06GDAKMNLB@MAP717@ DB 'MAP717', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKBBPMPA@MAP716@
CONST	SEGMENT
??_C@_06HKBBPMPA@MAP716@ DB 'MAP716', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBDMKPDD@MAP715@
CONST	SEGMENT
??_C@_06FBDMKPDD@MAP715@ DB 'MAP715', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EICHJOHC@MAP714@
CONST	SEGMENT
??_C@_06EICHJOHC@MAP714@ DB 'MAP714', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGGAILF@MAP713@
CONST	SEGMENT
??_C@_06HGGAILF@MAP713@ DB 'MAP713', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BOHNDJPE@MAP712@
CONST	SEGMENT
??_C@_06BOHNDJPE@MAP712@ DB 'MAP712', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DFFAGKDH@MAP711@
CONST	SEGMENT
??_C@_06DFFAGKDH@MAP711@ DB 'MAP711', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMELFLHG@MAP710@
CONST	SEGMENT
??_C@_06CMELFLHG@MAP710@ DB 'MAP710', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PMELIKAI@MAP709@
CONST	SEGMENT
??_C@_06PMELIKAI@MAP709@ DB 'MAP709', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFFALLEJ@MAP708@
CONST	SEGMENT
??_C@_06OFFALLEJ@MAP708@ DB 'MAP708', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCMIKHIG@MAP707@
CONST	SEGMENT
??_C@_06GCMIKHIG@MAP707@ DB 'MAP707', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLNDJGMH@MAP706@
CONST	SEGMENT
??_C@_06HLNDJGMH@MAP706@ DB 'MAP706', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FAPOMFAE@MAP705@
CONST	SEGMENT
??_C@_06FAPOMFAE@MAP705@ DB 'MAP705', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJOFPEEF@MAP704@
CONST	SEGMENT
??_C@_06EJOFPEEF@MAP704@ DB 'MAP704', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GKEGCIC@MAP703@
CONST	SEGMENT
??_C@_06GKEGCIC@MAP703@ DB 'MAP703', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPLPFDMD@MAP702@
CONST	SEGMENT
??_C@_06BPLPFDMD@MAP702@ DB 'MAP702', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DEJCAAAA@MAP701@
CONST	SEGMENT
??_C@_06DEJCAAAA@MAP701@ DB 'MAP701', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNIJDBEB@MAP700@
CONST	SEGMENT
??_C@_06CNIJDBEB@MAP700@ DB 'MAP700', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELCGNGOC@MAP699@
CONST	SEGMENT
??_C@_06ELCGNGOC@MAP699@ DB 'MAP699', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FCDNOHKD@MAP698@
CONST	SEGMENT
??_C@_06FCDNOHKD@MAP698@ DB 'MAP698', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NFKFPLGM@MAP697@
CONST	SEGMENT
??_C@_06NFKFPLGM@MAP697@ DB 'MAP697', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMLOMKCN@MAP696@
CONST	SEGMENT
??_C@_06MMLOMKCN@MAP696@ DB 'MAP696', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHJDJJOO@MAP695@
CONST	SEGMENT
??_C@_06OHJDJJOO@MAP695@ DB 'MAP695', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POIIKIKP@MAP694@
CONST	SEGMENT
??_C@_06POIIKIKP@MAP694@ DB 'MAP694', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBMJDOGI@MAP693@
CONST	SEGMENT
??_C@_06LBMJDOGI@MAP693@ DB 'MAP693', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KINCAPCJ@MAP692@
CONST	SEGMENT
??_C@_06KINCAPCJ@MAP692@ DB 'MAP692', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IDPPFMOK@MAP691@
CONST	SEGMENT
??_C@_06IDPPFMOK@MAP691@ DB 'MAP691', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JKOEGNKL@MAP690@
CONST	SEGMENT
??_C@_06JKOEGNKL@MAP690@ DB 'MAP690', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKOELMNF@MAP689@
CONST	SEGMENT
??_C@_06EKOELMNF@MAP689@ DB 'MAP689', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDPPINJE@MAP688@
CONST	SEGMENT
??_C@_06FDPPINJE@MAP688@ DB 'MAP688', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NEGHJBFL@MAP687@
CONST	SEGMENT
??_C@_06NEGHJBFL@MAP687@ DB 'MAP687', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNHMKABK@MAP686@
CONST	SEGMENT
??_C@_06MNHMKABK@MAP686@ DB 'MAP686', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGFBPDNJ@MAP685@
CONST	SEGMENT
??_C@_06OGFBPDNJ@MAP685@ DB 'MAP685', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PPEKMCJI@MAP684@
CONST	SEGMENT
??_C@_06PPEKMCJI@MAP684@ DB 'MAP684', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LAALFEFP@MAP683@
CONST	SEGMENT
??_C@_06LAALFEFP@MAP683@ DB 'MAP683', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJBAGFBO@MAP682@
CONST	SEGMENT
??_C@_06KJBAGFBO@MAP682@ DB 'MAP682', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICDNDGNN@MAP681@
CONST	SEGMENT
??_C@_06ICDNDGNN@MAP681@ DB 'MAP681', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JLCGAHJM@MAP680@
CONST	SEGMENT
??_C@_06JLCGAHJM@MAP680@ DB 'MAP680', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBLIPLOI@MAP679@
CONST	SEGMENT
??_C@_06EBLIPLOI@MAP679@ DB 'MAP679', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIKDMKKJ@MAP678@
CONST	SEGMENT
??_C@_06FIKDMKKJ@MAP678@ DB 'MAP678', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPDLNGGG@MAP677@
CONST	SEGMENT
??_C@_06NPDLNGGG@MAP677@ DB 'MAP677', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGCAOHCH@MAP676@
CONST	SEGMENT
??_C@_06MGCAOHCH@MAP676@ DB 'MAP676', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONANLEOE@MAP675@
CONST	SEGMENT
??_C@_06ONANLEOE@MAP675@ DB 'MAP675', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEBGIFKF@MAP674@
CONST	SEGMENT
??_C@_06PEBGIFKF@MAP674@ DB 'MAP674', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLFHBDGC@MAP673@
CONST	SEGMENT
??_C@_06LLFHBDGC@MAP673@ DB 'MAP673', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCEMCCCD@MAP672@
CONST	SEGMENT
??_C@_06KCEMCCCD@MAP672@ DB 'MAP672', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJGBHBOA@MAP671@
CONST	SEGMENT
??_C@_06IJGBHBOA@MAP671@ DB 'MAP671', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JAHKEAKB@MAP670@
CONST	SEGMENT
??_C@_06JAHKEAKB@MAP670@ DB 'MAP670', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EAHKJBNP@MAP669@
CONST	SEGMENT
??_C@_06EAHKJBNP@MAP669@ DB 'MAP669', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGBKAJO@MAP668@
CONST	SEGMENT
??_C@_06FJGBKAJO@MAP668@ DB 'MAP668', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOPJLMFB@MAP667@
CONST	SEGMENT
??_C@_06NOPJLMFB@MAP667@ DB 'MAP667', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHOCINBA@MAP666@
CONST	SEGMENT
??_C@_06MHOCINBA@MAP666@ DB 'MAP666', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMMPNOND@MAP665@
CONST	SEGMENT
??_C@_06OMMPNOND@MAP665@ DB 'MAP665', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PFNEOPJC@MAP664@
CONST	SEGMENT
??_C@_06PFNEOPJC@MAP664@ DB 'MAP664', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKJFHJFF@MAP663@
CONST	SEGMENT
??_C@_06LKJFHJFF@MAP663@ DB 'MAP663', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDIOEIBE@MAP662@
CONST	SEGMENT
??_C@_06KDIOEIBE@MAP662@ DB 'MAP662', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IIKDBLNH@MAP661@
CONST	SEGMENT
??_C@_06IIKDBLNH@MAP661@ DB 'MAP661', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBLICKJG@MAP660@
CONST	SEGMENT
??_C@_06JBLICKJG@MAP660@ DB 'MAP660', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECDMCPIG@MAP659@
CONST	SEGMENT
??_C@_06ECDMCPIG@MAP659@ DB 'MAP659', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLCHBOMH@MAP658@
CONST	SEGMENT
??_C@_06FLCHBOMH@MAP658@ DB 'MAP658', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NMLPACAI@MAP657@
CONST	SEGMENT
??_C@_06NMLPACAI@MAP657@ DB 'MAP657', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MFKEDDEJ@MAP656@
CONST	SEGMENT
??_C@_06MFKEDDEJ@MAP656@ DB 'MAP656', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OOIJGAIK@MAP655@
CONST	SEGMENT
??_C@_06OOIJGAIK@MAP655@ DB 'MAP655', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PHJCFBML@MAP654@
CONST	SEGMENT
??_C@_06PHJCFBML@MAP654@ DB 'MAP654', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LINDMHAM@MAP653@
CONST	SEGMENT
??_C@_06LINDMHAM@MAP653@ DB 'MAP653', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KBMIPGEN@MAP652@
CONST	SEGMENT
??_C@_06KBMIPGEN@MAP652@ DB 'MAP652', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKOFKFIO@MAP651@
CONST	SEGMENT
??_C@_06IKOFKFIO@MAP651@ DB 'MAP651', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDPOJEMP@MAP650@
CONST	SEGMENT
??_C@_06JDPOJEMP@MAP650@ DB 'MAP650', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDPOEFLB@MAP649@
CONST	SEGMENT
??_C@_06EDPOEFLB@MAP649@ DB 'MAP649', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKOFHEPA@MAP648@
CONST	SEGMENT
??_C@_06FKOFHEPA@MAP648@ DB 'MAP648', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNHNGIDP@MAP647@
CONST	SEGMENT
??_C@_06NNHNGIDP@MAP647@ DB 'MAP647', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MEGGFJHO@MAP646@
CONST	SEGMENT
??_C@_06MEGGFJHO@MAP646@ DB 'MAP646', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OPELAKLN@MAP645@
CONST	SEGMENT
??_C@_06OPELAKLN@MAP645@ DB 'MAP645', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PGFADLPM@MAP644@
CONST	SEGMENT
??_C@_06PGFADLPM@MAP644@ DB 'MAP644', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJBBKNDL@MAP643@
CONST	SEGMENT
??_C@_06LJBBKNDL@MAP643@ DB 'MAP643', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KAAKJMHK@MAP642@
CONST	SEGMENT
??_C@_06KAAKJMHK@MAP642@ DB 'MAP642', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILCHMPLJ@MAP641@
CONST	SEGMENT
??_C@_06ILCHMPLJ@MAP641@ DB 'MAP641', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCDMPOPI@MAP640@
CONST	SEGMENT
??_C@_06JCDMPOPI@MAP640@ DB 'MAP640', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGLBFDDE@MAP639@
CONST	SEGMENT
??_C@_06EGLBFDDE@MAP639@ DB 'MAP639', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FPKKGCHF@MAP638@
CONST	SEGMENT
??_C@_06FPKKGCHF@MAP638@ DB 'MAP638', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIDCHOLK@MAP637@
CONST	SEGMENT
??_C@_06NIDCHOLK@MAP637@ DB 'MAP637', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBCJEPPL@MAP636@
CONST	SEGMENT
??_C@_06MBCJEPPL@MAP636@ DB 'MAP636', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OKAEBMDI@MAP635@
CONST	SEGMENT
??_C@_06OKAEBMDI@MAP635@ DB 'MAP635', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDBPCNHJ@MAP634@
CONST	SEGMENT
??_C@_06PDBPCNHJ@MAP634@ DB 'MAP634', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMFOLLLO@MAP633@
CONST	SEGMENT
??_C@_06LMFOLLLO@MAP633@ DB 'MAP633', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFEFIKPP@MAP632@
CONST	SEGMENT
??_C@_06KFEFIKPP@MAP632@ DB 'MAP632', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOGINJDM@MAP631@
CONST	SEGMENT
??_C@_06IOGINJDM@MAP631@ DB 'MAP631', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JHHDOIHN@MAP630@
CONST	SEGMENT
??_C@_06JHHDOIHN@MAP630@ DB 'MAP630', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHHDDJAD@MAP629@
CONST	SEGMENT
??_C@_06EHHDDJAD@MAP629@ DB 'MAP629', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOGIAIEC@MAP628@
CONST	SEGMENT
??_C@_06FOGIAIEC@MAP628@ DB 'MAP628', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NJPABEIN@MAP627@
CONST	SEGMENT
??_C@_06NJPABEIN@MAP627@ DB 'MAP627', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAOLCFMM@MAP626@
CONST	SEGMENT
??_C@_06MAOLCFMM@MAP626@ DB 'MAP626', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLMGHGAP@MAP625@
CONST	SEGMENT
??_C@_06OLMGHGAP@MAP625@ DB 'MAP625', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCNNEHEO@MAP624@
CONST	SEGMENT
??_C@_06PCNNEHEO@MAP624@ DB 'MAP624', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNJMNBIJ@MAP623@
CONST	SEGMENT
??_C@_06LNJMNBIJ@MAP623@ DB 'MAP623', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KEIHOAMI@MAP622@
CONST	SEGMENT
??_C@_06KEIHOAMI@MAP622@ DB 'MAP622', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPKKLDAL@MAP621@
CONST	SEGMENT
??_C@_06IPKKLDAL@MAP621@ DB 'MAP621', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGLBICEK@MAP620@
CONST	SEGMENT
??_C@_06JGLBICEK@MAP620@ DB 'MAP620', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFDFIHFK@MAP619@
CONST	SEGMENT
??_C@_06EFDFIHFK@MAP619@ DB 'MAP619', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMCOLGBL@MAP618@
CONST	SEGMENT
??_C@_06FMCOLGBL@MAP618@ DB 'MAP618', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NLLGKKNE@MAP617@
CONST	SEGMENT
??_C@_06NLLGKKNE@MAP617@ DB 'MAP617', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCKNJLJF@MAP616@
CONST	SEGMENT
??_C@_06MCKNJLJF@MAP616@ DB 'MAP616', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJIAMIFG@MAP615@
CONST	SEGMENT
??_C@_06OJIAMIFG@MAP615@ DB 'MAP615', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PAJLPJBH@MAP614@
CONST	SEGMENT
??_C@_06PAJLPJBH@MAP614@ DB 'MAP614', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LPNKGPNA@MAP613@
CONST	SEGMENT
??_C@_06LPNKGPNA@MAP613@ DB 'MAP613', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGMBFOJB@MAP612@
CONST	SEGMENT
??_C@_06KGMBFOJB@MAP612@ DB 'MAP612', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06INOMANFC@MAP611@
CONST	SEGMENT
??_C@_06INOMANFC@MAP611@ DB 'MAP611', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JEPHDMBD@MAP610@
CONST	SEGMENT
??_C@_06JEPHDMBD@MAP610@ DB 'MAP610', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EEPHONGN@MAP609@
CONST	SEGMENT
??_C@_06EEPHONGN@MAP609@ DB 'MAP609', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNOMNMCM@MAP608@
CONST	SEGMENT
??_C@_06FNOMNMCM@MAP608@ DB 'MAP608', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NKHEMAOD@MAP607@
CONST	SEGMENT
??_C@_06NKHEMAOD@MAP607@ DB 'MAP607', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MDGPPBKC@MAP606@
CONST	SEGMENT
??_C@_06MDGPPBKC@MAP606@ DB 'MAP606', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIECKCGB@MAP605@
CONST	SEGMENT
??_C@_06OIECKCGB@MAP605@ DB 'MAP605', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBFJJDCA@MAP604@
CONST	SEGMENT
??_C@_06PBFJJDCA@MAP604@ DB 'MAP604', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LOBIAFOH@MAP603@
CONST	SEGMENT
??_C@_06LOBIAFOH@MAP603@ DB 'MAP603', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KHADDEKG@MAP602@
CONST	SEGMENT
??_C@_06KHADDEKG@MAP602@ DB 'MAP602', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMCOGHGF@MAP601@
CONST	SEGMENT
??_C@_06IMCOGHGF@MAP601@ DB 'MAP601', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFDFFGCE@MAP600@
CONST	SEGMENT
??_C@_06JFDFFGCE@MAP600@ DB 'MAP600', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJJDHJAM@MAP599@
CONST	SEGMENT
??_C@_06FJJDHJAM@MAP599@ DB 'MAP599', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EAIIEIEN@MAP598@
CONST	SEGMENT
??_C@_06EAIIEIEN@MAP598@ DB 'MAP598', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHBAFEIC@MAP597@
CONST	SEGMENT
??_C@_06MHBAFEIC@MAP597@ DB 'MAP597', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOALGFMD@MAP596@
CONST	SEGMENT
??_C@_06NOALGFMD@MAP596@ DB 'MAP596', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PFCGDGAA@MAP595@
CONST	SEGMENT
??_C@_06PFCGDGAA@MAP595@ DB 'MAP595', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMDNAHEB@MAP594@
CONST	SEGMENT
??_C@_06OMDNAHEB@MAP594@ DB 'MAP594', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDHMJBIG@MAP593@
CONST	SEGMENT
??_C@_06KDHMJBIG@MAP593@ DB 'MAP593', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKGHKAMH@MAP592@
CONST	SEGMENT
??_C@_06LKGHKAMH@MAP592@ DB 'MAP592', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBEKPDAE@MAP591@
CONST	SEGMENT
??_C@_06JBEKPDAE@MAP591@ DB 'MAP591', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IIFBMCEF@MAP590@
CONST	SEGMENT
??_C@_06IIFBMCEF@MAP590@ DB 'MAP590', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIFBBDDL@MAP589@
CONST	SEGMENT
??_C@_06FIFBBDDL@MAP589@ DB 'MAP589', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBEKCCHK@MAP588@
CONST	SEGMENT
??_C@_06EBEKCCHK@MAP588@ DB 'MAP588', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGNCDOLF@MAP587@
CONST	SEGMENT
??_C@_06MGNCDOLF@MAP587@ DB 'MAP587', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPMJAPPE@MAP586@
CONST	SEGMENT
??_C@_06NPMJAPPE@MAP586@ DB 'MAP586', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEOEFMDH@MAP585@
CONST	SEGMENT
??_C@_06PEOEFMDH@MAP585@ DB 'MAP585', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONPPGNHG@MAP584@
CONST	SEGMENT
??_C@_06ONPPGNHG@MAP584@ DB 'MAP584', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCLOPLLB@MAP583@
CONST	SEGMENT
??_C@_06KCLOPLLB@MAP583@ DB 'MAP583', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLKFMKPA@MAP582@
CONST	SEGMENT
??_C@_06LLKFMKPA@MAP582@ DB 'MAP582', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JAIIJJDD@MAP581@
CONST	SEGMENT
??_C@_06JAIIJJDD@MAP581@ DB 'MAP581', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJJDKIHC@MAP580@
CONST	SEGMENT
??_C@_06IJJDKIHC@MAP580@ DB 'MAP580', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDANFEAG@MAP579@
CONST	SEGMENT
??_C@_06FDANFEAG@MAP579@ DB 'MAP579', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKBGGFEH@MAP578@
CONST	SEGMENT
??_C@_06EKBGGFEH@MAP578@ DB 'MAP578', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNIOHJII@MAP577@
CONST	SEGMENT
??_C@_06MNIOHJII@MAP577@ DB 'MAP577', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NEJFEIMJ@MAP576@
CONST	SEGMENT
??_C@_06NEJFEIMJ@MAP576@ DB 'MAP576', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PPLIBLAK@MAP575@
CONST	SEGMENT
??_C@_06PPLIBLAK@MAP575@ DB 'MAP575', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGKDCKEL@MAP574@
CONST	SEGMENT
??_C@_06OGKDCKEL@MAP574@ DB 'MAP574', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJOCLMIM@MAP573@
CONST	SEGMENT
??_C@_06KJOCLMIM@MAP573@ DB 'MAP573', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LAPJINMN@MAP572@
CONST	SEGMENT
??_C@_06LAPJINMN@MAP572@ DB 'MAP572', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JLNENOAO@MAP571@
CONST	SEGMENT
??_C@_06JLNENOAO@MAP571@ DB 'MAP571', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICMPOPEP@MAP570@
CONST	SEGMENT
??_C@_06ICMPOPEP@MAP570@ DB 'MAP570', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FCMPDODB@MAP569@
CONST	SEGMENT
??_C@_06FCMPDODB@MAP569@ DB 'MAP569', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELNEAPHA@MAP568@
CONST	SEGMENT
??_C@_06ELNEAPHA@MAP568@ DB 'MAP568', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMEMBDLP@MAP567@
CONST	SEGMENT
??_C@_06MMEMBDLP@MAP567@ DB 'MAP567', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NFFHCCPO@MAP566@
CONST	SEGMENT
??_C@_06NFFHCCPO@MAP566@ DB 'MAP566', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POHKHBDN@MAP565@
CONST	SEGMENT
??_C@_06POHKHBDN@MAP565@ DB 'MAP565', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHGBEAHM@MAP564@
CONST	SEGMENT
??_C@_06OHGBEAHM@MAP564@ DB 'MAP564', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KICANGLL@MAP563@
CONST	SEGMENT
??_C@_06KICANGLL@MAP563@ DB 'MAP563', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBDLOHPK@MAP562@
CONST	SEGMENT
??_C@_06LBDLOHPK@MAP562@ DB 'MAP562', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JKBGLEDJ@MAP561@
CONST	SEGMENT
??_C@_06JKBGLEDJ@MAP561@ DB 'MAP561', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IDANIFHI@MAP560@
CONST	SEGMENT
??_C@_06IDANIFHI@MAP560@ DB 'MAP560', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FAIJIAGI@MAP559@
CONST	SEGMENT
??_C@_06FAIJIAGI@MAP559@ DB 'MAP559', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJJCLBCJ@MAP558@
CONST	SEGMENT
??_C@_06EJJCLBCJ@MAP558@ DB 'MAP558', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MOAKKNOG@MAP557@
CONST	SEGMENT
??_C@_06MOAKKNOG@MAP557@ DB 'MAP557', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHBBJMKH@MAP556@
CONST	SEGMENT
??_C@_06NHBBJMKH@MAP556@ DB 'MAP556', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PMDMMPGE@MAP555@
CONST	SEGMENT
??_C@_06PMDMMPGE@MAP555@ DB 'MAP555', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFCHPOCF@MAP554@
CONST	SEGMENT
??_C@_06OFCHPOCF@MAP554@ DB 'MAP554', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKGGGIOC@MAP553@
CONST	SEGMENT
??_C@_06KKGGGIOC@MAP553@ DB 'MAP553', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LDHNFJKD@MAP552@
CONST	SEGMENT
??_C@_06LDHNFJKD@MAP552@ DB 'MAP552', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIFAAKGA@MAP551@
CONST	SEGMENT
??_C@_06JIFAAKGA@MAP551@ DB 'MAP551', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBELDLCB@MAP550@
CONST	SEGMENT
??_C@_06IBELDLCB@MAP550@ DB 'MAP550', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBELOKFP@MAP549@
CONST	SEGMENT
??_C@_06FBELOKFP@MAP549@ DB 'MAP549', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EIFANLBO@MAP548@
CONST	SEGMENT
??_C@_06EIFANLBO@MAP548@ DB 'MAP548', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPMIMHNB@MAP547@
CONST	SEGMENT
??_C@_06MPMIMHNB@MAP547@ DB 'MAP547', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGNDPGJA@MAP546@
CONST	SEGMENT
??_C@_06NGNDPGJA@MAP546@ DB 'MAP546', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PNPOKFFD@MAP545@
CONST	SEGMENT
??_C@_06PNPOKFFD@MAP545@ DB 'MAP545', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEOFJEBC@MAP544@
CONST	SEGMENT
??_C@_06OEOFJEBC@MAP544@ DB 'MAP544', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLKEACNF@MAP543@
CONST	SEGMENT
??_C@_06KLKEACNF@MAP543@ DB 'MAP543', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCLPDDJE@MAP542@
CONST	SEGMENT
??_C@_06LCLPDDJE@MAP542@ DB 'MAP542', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJJCGAFH@MAP541@
CONST	SEGMENT
??_C@_06JJJCGAFH@MAP541@ DB 'MAP541', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAIJFBBG@MAP540@
CONST	SEGMENT
??_C@_06IAIJFBBG@MAP540@ DB 'MAP540', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FEAEPMNK@MAP539@
CONST	SEGMENT
??_C@_06FEAEPMNK@MAP539@ DB 'MAP539', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENBPMNJL@MAP538@
CONST	SEGMENT
??_C@_06ENBPMNJL@MAP538@ DB 'MAP538', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKIHNBFE@MAP537@
CONST	SEGMENT
??_C@_06MKIHNBFE@MAP537@ DB 'MAP537', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NDJMOABF@MAP536@
CONST	SEGMENT
??_C@_06NDJMOABF@MAP536@ DB 'MAP536', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PILBLDNG@MAP535@
CONST	SEGMENT
??_C@_06PILBLDNG@MAP535@ DB 'MAP535', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBKKICJH@MAP534@
CONST	SEGMENT
??_C@_06OBKKICJH@MAP534@ DB 'MAP534', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KOOLBEFA@MAP533@
CONST	SEGMENT
??_C@_06KOOLBEFA@MAP533@ DB 'MAP533', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LHPACFBB@MAP532@
CONST	SEGMENT
??_C@_06LHPACFBB@MAP532@ DB 'MAP532', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JMNNHGNC@MAP531@
CONST	SEGMENT
??_C@_06JMNNHGNC@MAP531@ DB 'MAP531', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFMGEHJD@MAP530@
CONST	SEGMENT
??_C@_06IFMGEHJD@MAP530@ DB 'MAP530', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFMGJGON@MAP529@
CONST	SEGMENT
??_C@_06FFMGJGON@MAP529@ DB 'MAP529', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMNNKHKM@MAP528@
CONST	SEGMENT
??_C@_06EMNNKHKM@MAP528@ DB 'MAP528', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLEFLLGD@MAP527@
CONST	SEGMENT
??_C@_06MLEFLLGD@MAP527@ DB 'MAP527', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCFOIKCC@MAP526@
CONST	SEGMENT
??_C@_06NCFOIKCC@MAP526@ DB 'MAP526', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJHDNJOB@MAP525@
CONST	SEGMENT
??_C@_06PJHDNJOB@MAP525@ DB 'MAP525', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAGIOIKA@MAP524@
CONST	SEGMENT
??_C@_06OAGIOIKA@MAP524@ DB 'MAP524', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPCJHOGH@MAP523@
CONST	SEGMENT
??_C@_06KPCJHOGH@MAP523@ DB 'MAP523', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGDCEPCG@MAP522@
CONST	SEGMENT
??_C@_06LGDCEPCG@MAP522@ DB 'MAP522', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNBPBMOF@MAP521@
CONST	SEGMENT
??_C@_06JNBPBMOF@MAP521@ DB 'MAP521', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEAECNKE@MAP520@
CONST	SEGMENT
??_C@_06IEAECNKE@MAP520@ DB 'MAP520', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHIACILE@MAP519@
CONST	SEGMENT
??_C@_06FHIACILE@MAP519@ DB 'MAP519', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOJLBJPF@MAP518@
CONST	SEGMENT
??_C@_06EOJLBJPF@MAP518@ DB 'MAP518', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJADAFDK@MAP517@
CONST	SEGMENT
??_C@_06MJADAFDK@MAP517@ DB 'MAP517', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NABIDEHL@MAP516@
CONST	SEGMENT
??_C@_06NABIDEHL@MAP516@ DB 'MAP516', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLDFGHLI@MAP515@
CONST	SEGMENT
??_C@_06PLDFGHLI@MAP515@ DB 'MAP515', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCCOFGPJ@MAP514@
CONST	SEGMENT
??_C@_06OCCOFGPJ@MAP514@ DB 'MAP514', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNGPMADO@MAP513@
CONST	SEGMENT
??_C@_06KNGPMADO@MAP513@ DB 'MAP513', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEHEPBHP@MAP512@
CONST	SEGMENT
??_C@_06LEHEPBHP@MAP512@ DB 'MAP512', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JPFJKCLM@MAP511@
CONST	SEGMENT
??_C@_06JPFJKCLM@MAP511@ DB 'MAP511', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGECJDPN@MAP510@
CONST	SEGMENT
??_C@_06IGECJDPN@MAP510@ DB 'MAP510', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGECECID@MAP509@
CONST	SEGMENT
??_C@_06FGECECID@MAP509@ DB 'MAP509', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPFJHDMC@MAP508@
CONST	SEGMENT
??_C@_06EPFJHDMC@MAP508@ DB 'MAP508', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIMBGPAN@MAP507@
CONST	SEGMENT
??_C@_06MIMBGPAN@MAP507@ DB 'MAP507', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBNKFOEM@MAP506@
CONST	SEGMENT
??_C@_06NBNKFOEM@MAP506@ DB 'MAP506', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKPHANIP@MAP505@
CONST	SEGMENT
??_C@_06PKPHANIP@MAP505@ DB 'MAP505', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODOMDMMO@MAP504@
CONST	SEGMENT
??_C@_06ODOMDMMO@MAP504@ DB 'MAP504', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KMKNKKAJ@MAP503@
CONST	SEGMENT
??_C@_06KMKNKKAJ@MAP503@ DB 'MAP503', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFLGJLEI@MAP502@
CONST	SEGMENT
??_C@_06LFLGJLEI@MAP502@ DB 'MAP502', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOJLMIIL@MAP501@
CONST	SEGMENT
??_C@_06JOJLMIIL@MAP501@ DB 'MAP501', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IHIAPJMK@MAP500@
CONST	SEGMENT
??_C@_06IHIAPJMK@MAP500@ DB 'MAP500', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBCPBOGJ@MAP499@
CONST	SEGMENT
??_C@_06OBCPBOGJ@MAP499@ DB 'MAP499', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PIDECPCI@MAP498@
CONST	SEGMENT
??_C@_06PIDECPCI@MAP498@ DB 'MAP498', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPKMDDOH@MAP497@
CONST	SEGMENT
??_C@_06HPKMDDOH@MAP497@ DB 'MAP497', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGLHACKG@MAP496@
CONST	SEGMENT
??_C@_06GGLHACKG@MAP496@ DB 'MAP496', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENJKFBGF@MAP495@
CONST	SEGMENT
??_C@_06ENJKFBGF@MAP495@ DB 'MAP495', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FEIBGACE@MAP494@
CONST	SEGMENT
??_C@_06FEIBGACE@MAP494@ DB 'MAP494', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLMAPGOD@MAP493@
CONST	SEGMENT
??_C@_06BLMAPGOD@MAP493@ DB 'MAP493', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNLMHKC@MAP492@
CONST	SEGMENT
??_C@_06CNLMHKC@MAP492@ DB 'MAP492', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJPGJEGB@MAP491@
CONST	SEGMENT
??_C@_06CJPGJEGB@MAP491@ DB 'MAP491', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DAONKFCA@MAP490@
CONST	SEGMENT
??_C@_06DAONKFCA@MAP490@ DB 'MAP490', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAONHEFO@MAP489@
CONST	SEGMENT
??_C@_06OAONHEFO@MAP489@ DB 'MAP489', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJPGEFBP@MAP488@
CONST	SEGMENT
??_C@_06PJPGEFBP@MAP488@ DB 'MAP488', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOGOFJNA@MAP487@
CONST	SEGMENT
??_C@_06HOGOFJNA@MAP487@ DB 'MAP487', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GHHFGIJB@MAP486@
CONST	SEGMENT
??_C@_06GHHFGIJB@MAP486@ DB 'MAP486', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMFIDLFC@MAP485@
CONST	SEGMENT
??_C@_06EMFIDLFC@MAP485@ DB 'MAP485', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFEDAKBD@MAP484@
CONST	SEGMENT
??_C@_06FFEDAKBD@MAP484@ DB 'MAP484', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BKACJMNE@MAP483@
CONST	SEGMENT
??_C@_06BKACJMNE@MAP483@ DB 'MAP483', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DBJKNJF@MAP482@
CONST	SEGMENT
??_C@_06DBJKNJF@MAP482@ DB 'MAP482', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIDEPOFG@MAP481@
CONST	SEGMENT
??_C@_06CIDEPOFG@MAP481@ DB 'MAP481', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DBCPMPBH@MAP480@
CONST	SEGMENT
??_C@_06DBCPMPBH@MAP480@ DB 'MAP480', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLLBDDGD@MAP479@
CONST	SEGMENT
??_C@_06OLLBDDGD@MAP479@ DB 'MAP479', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCKKACCC@MAP478@
CONST	SEGMENT
??_C@_06PCKKACCC@MAP478@ DB 'MAP478', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFDCBOON@MAP477@
CONST	SEGMENT
??_C@_06HFDCBOON@MAP477@ DB 'MAP477', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMCJCPKM@MAP476@
CONST	SEGMENT
??_C@_06GMCJCPKM@MAP476@ DB 'MAP476', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHAEHMGP@MAP475@
CONST	SEGMENT
??_C@_06EHAEHMGP@MAP475@ DB 'MAP475', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOBPENCO@MAP474@
CONST	SEGMENT
??_C@_06FOBPENCO@MAP474@ DB 'MAP474', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBFONLOJ@MAP473@
CONST	SEGMENT
??_C@_06BBFONLOJ@MAP473@ DB 'MAP473', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEFOKKI@MAP472@
CONST	SEGMENT
??_C@_06IEFOKKI@MAP472@ DB 'MAP472', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDGILJGL@MAP471@
CONST	SEGMENT
??_C@_06CDGILJGL@MAP471@ DB 'MAP471', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKHDIICK@MAP470@
CONST	SEGMENT
??_C@_06DKHDIICK@MAP470@ DB 'MAP470', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OKHDFJFE@MAP469@
CONST	SEGMENT
??_C@_06OKHDFJFE@MAP469@ DB 'MAP469', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDGIGIBF@MAP468@
CONST	SEGMENT
??_C@_06PDGIGIBF@MAP468@ DB 'MAP468', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HEPAHENK@MAP467@
CONST	SEGMENT
??_C@_06HEPAHENK@MAP467@ DB 'MAP467', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOLEFJL@MAP466@
CONST	SEGMENT
??_C@_06GNOLEFJL@MAP466@ DB 'MAP466', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGMGBGFI@MAP465@
CONST	SEGMENT
??_C@_06EGMGBGFI@MAP465@ DB 'MAP465', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FPNNCHBJ@MAP464@
CONST	SEGMENT
??_C@_06FPNNCHBJ@MAP464@ DB 'MAP464', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAJMLBNO@MAP463@
CONST	SEGMENT
??_C@_06BAJMLBNO@MAP463@ DB 'MAP463', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIHIAJP@MAP462@
CONST	SEGMENT
??_C@_06JIHIAJP@MAP462@ DB 'MAP462', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCKKNDFM@MAP461@
CONST	SEGMENT
??_C@_06CCKKNDFM@MAP461@ DB 'MAP461', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLLBOCBN@MAP460@
CONST	SEGMENT
??_C@_06DLLBOCBN@MAP460@ DB 'MAP460', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIDFOHAN@MAP459@
CONST	SEGMENT
??_C@_06OIDFOHAN@MAP459@ DB 'MAP459', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBCONGEM@MAP458@
CONST	SEGMENT
??_C@_06PBCONGEM@MAP458@ DB 'MAP458', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGLGMKID@MAP457@
CONST	SEGMENT
??_C@_06HGLGMKID@MAP457@ DB 'MAP457', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPKNPLMC@MAP456@
CONST	SEGMENT
??_C@_06GPKNPLMC@MAP456@ DB 'MAP456', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EEIAKIAB@MAP455@
CONST	SEGMENT
??_C@_06EEIAKIAB@MAP455@ DB 'MAP455', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNJLJJEA@MAP454@
CONST	SEGMENT
??_C@_06FNJLJJEA@MAP454@ DB 'MAP454', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCNKAPIH@MAP453@
CONST	SEGMENT
??_C@_06BCNKAPIH@MAP453@ DB 'MAP453', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMBDOMG@MAP452@
CONST	SEGMENT
??_C@_06LMBDOMG@MAP452@ DB 'MAP452', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CAOMGNAF@MAP451@
CONST	SEGMENT
??_C@_06CAOMGNAF@MAP451@ DB 'MAP451', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJPHFMEE@MAP450@
CONST	SEGMENT
??_C@_06DJPHFMEE@MAP450@ DB 'MAP450', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJPHINDK@MAP449@
CONST	SEGMENT
??_C@_06OJPHINDK@MAP449@ DB 'MAP449', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PAOMLMHL@MAP448@
CONST	SEGMENT
??_C@_06PAOMLMHL@MAP448@ DB 'MAP448', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHHEKALE@MAP447@
CONST	SEGMENT
??_C@_06HHHEKALE@MAP447@ DB 'MAP447', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GOGPJBPF@MAP446@
CONST	SEGMENT
??_C@_06GOGPJBPF@MAP446@ DB 'MAP446', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFECMCDG@MAP445@
CONST	SEGMENT
??_C@_06EFECMCDG@MAP445@ DB 'MAP445', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMFJPDHH@MAP444@
CONST	SEGMENT
??_C@_06FMFJPDHH@MAP444@ DB 'MAP444', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BDBIGFLA@MAP443@
CONST	SEGMENT
??_C@_06BDBIGFLA@MAP443@ DB 'MAP443', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KADFEPB@MAP442@
CONST	SEGMENT
??_C@_06KADFEPB@MAP442@ DB 'MAP442', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBCOAHDC@MAP441@
CONST	SEGMENT
??_C@_06CBCOAHDC@MAP441@ DB 'MAP441', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DIDFDGHD@MAP440@
CONST	SEGMENT
??_C@_06DIDFDGHD@MAP440@ DB 'MAP440', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMLIJLLP@MAP439@
CONST	SEGMENT
??_C@_06OMLIJLLP@MAP439@ DB 'MAP439', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PFKDKKPO@MAP438@
CONST	SEGMENT
??_C@_06PFKDKKPO@MAP438@ DB 'MAP438', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCDLLGDB@MAP437@
CONST	SEGMENT
??_C@_06HCDLLGDB@MAP437@ DB 'MAP437', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLCAIHHA@MAP436@
CONST	SEGMENT
??_C@_06GLCAIHHA@MAP436@ DB 'MAP436', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EAANNELD@MAP435@
CONST	SEGMENT
??_C@_06EAANNELD@MAP435@ DB 'MAP435', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJBGOFPC@MAP434@
CONST	SEGMENT
??_C@_06FJBGOFPC@MAP434@ DB 'MAP434', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGFHHDDF@MAP433@
CONST	SEGMENT
??_C@_06BGFHHDDF@MAP433@ DB 'MAP433', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEMECHE@MAP432@
CONST	SEGMENT
??_C@_06PEMECHE@MAP432@ DB 'MAP432', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEGBBBLH@MAP431@
CONST	SEGMENT
??_C@_06CEGBBBLH@MAP431@ DB 'MAP431', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DNHKCAPG@MAP430@
CONST	SEGMENT
??_C@_06DNHKCAPG@MAP430@ DB 'MAP430', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONHKPBII@MAP429@
CONST	SEGMENT
??_C@_06ONHKPBII@MAP429@ DB 'MAP429', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEGBMAMJ@MAP428@
CONST	SEGMENT
??_C@_06PEGBMAMJ@MAP428@ DB 'MAP428', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDPJNMAG@MAP427@
CONST	SEGMENT
??_C@_06HDPJNMAG@MAP427@ DB 'MAP427', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GKOCONEH@MAP426@
CONST	SEGMENT
??_C@_06GKOCONEH@MAP426@ DB 'MAP426', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBMPLOIE@MAP425@
CONST	SEGMENT
??_C@_06EBMPLOIE@MAP425@ DB 'MAP425', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FINEIPMF@MAP424@
CONST	SEGMENT
??_C@_06FINEIPMF@MAP424@ DB 'MAP424', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHJFBJAC@MAP423@
CONST	SEGMENT
??_C@_06BHJFBJAC@MAP423@ DB 'MAP423', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIOCIED@MAP422@
CONST	SEGMENT
??_C@_06OIOCIED@MAP422@ DB 'MAP422', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CFKDHLIA@MAP421@
CONST	SEGMENT
??_C@_06CFKDHLIA@MAP421@ DB 'MAP421', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DMLIEKMB@MAP420@
CONST	SEGMENT
??_C@_06DMLIEKMB@MAP420@ DB 'MAP420', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OPDMEPNB@MAP419@
CONST	SEGMENT
??_C@_06OPDMEPNB@MAP419@ DB 'MAP419', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PGCHHOJA@MAP418@
CONST	SEGMENT
??_C@_06PGCHHOJA@MAP418@ DB 'MAP418', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBLPGCFP@MAP417@
CONST	SEGMENT
??_C@_06HBLPGCFP@MAP417@ DB 'MAP417', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIKEFDBO@MAP416@
CONST	SEGMENT
??_C@_06GIKEFDBO@MAP416@ DB 'MAP416', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDIJAANN@MAP415@
CONST	SEGMENT
??_C@_06EDIJAANN@MAP415@ DB 'MAP415', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKJCDBJM@MAP414@
CONST	SEGMENT
??_C@_06FKJCDBJM@MAP414@ DB 'MAP414', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFNDKHFL@MAP413@
CONST	SEGMENT
??_C@_06BFNDKHFL@MAP413@ DB 'MAP413', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMIJGBK@MAP412@
CONST	SEGMENT
??_C@_06MMIJGBK@MAP412@ DB 'MAP412', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHOFMFNJ@MAP411@
CONST	SEGMENT
??_C@_06CHOFMFNJ@MAP411@ DB 'MAP411', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOPOPEJI@MAP410@
CONST	SEGMENT
??_C@_06DOPOPEJI@MAP410@ DB 'MAP410', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OOPOCFOG@MAP409@
CONST	SEGMENT
??_C@_06OOPOCFOG@MAP409@ DB 'MAP409', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PHOFBEKH@MAP408@
CONST	SEGMENT
??_C@_06PHOFBEKH@MAP408@ DB 'MAP408', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HAHNAIGI@MAP407@
CONST	SEGMENT
??_C@_06HAHNAIGI@MAP407@ DB 'MAP407', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJGGDJCJ@MAP406@
CONST	SEGMENT
??_C@_06GJGGDJCJ@MAP406@ DB 'MAP406', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECELGKOK@MAP405@
CONST	SEGMENT
??_C@_06ECELGKOK@MAP405@ DB 'MAP405', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLFAFLKL@MAP404@
CONST	SEGMENT
??_C@_06FLFAFLKL@MAP404@ DB 'MAP404', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BEBBMNGM@MAP403@
CONST	SEGMENT
??_C@_06BEBBMNGM@MAP403@ DB 'MAP403', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NAKPMCN@MAP402@
CONST	SEGMENT
??_C@_06NAKPMCN@MAP402@ DB 'MAP402', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CGCHKPOO@MAP401@
CONST	SEGMENT
??_C@_06CGCHKPOO@MAP401@ DB 'MAP401', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPDMJOKP@MAP400@
CONST	SEGMENT
??_C@_06DPDMJOKP@MAP400@ DB 'MAP400', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMPICGNA@MAP399@
CONST	SEGMENT
??_C@_06HMPICGNA@MAP399@ DB 'MAP399', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GFODBHJB@MAP398@
CONST	SEGMENT
??_C@_06GFODBHJB@MAP398@ DB 'MAP398', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCHLALFO@MAP397@
CONST	SEGMENT
??_C@_06OCHLALFO@MAP397@ DB 'MAP397', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLGADKBP@MAP396@
CONST	SEGMENT
??_C@_06PLGADKBP@MAP396@ DB 'MAP396', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NAENGJNM@MAP395@
CONST	SEGMENT
??_C@_06NAENGJNM@MAP395@ DB 'MAP395', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJFGFIJN@MAP394@
CONST	SEGMENT
??_C@_06MJFGFIJN@MAP394@ DB 'MAP394', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGBHMOFK@MAP393@
CONST	SEGMENT
??_C@_06IGBHMOFK@MAP393@ DB 'MAP393', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JPAMPPBL@MAP392@
CONST	SEGMENT
??_C@_06JPAMPPBL@MAP392@ DB 'MAP392', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LECBKMNI@MAP391@
CONST	SEGMENT
??_C@_06LECBKMNI@MAP391@ DB 'MAP391', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNDKJNJJ@MAP390@
CONST	SEGMENT
??_C@_06KNDKJNJJ@MAP390@ DB 'MAP390', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNDKEMOH@MAP389@
CONST	SEGMENT
??_C@_06HNDKEMOH@MAP389@ DB 'MAP389', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GECBHNKG@MAP388@
CONST	SEGMENT
??_C@_06GECBHNKG@MAP388@ DB 'MAP388', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODLJGBGJ@MAP387@
CONST	SEGMENT
??_C@_06ODLJGBGJ@MAP387@ DB 'MAP387', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKKCFACI@MAP386@
CONST	SEGMENT
??_C@_06PKKCFACI@MAP386@ DB 'MAP386', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBIPADOL@MAP385@
CONST	SEGMENT
??_C@_06NBIPADOL@MAP385@ DB 'MAP385', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIJEDCKK@MAP384@
CONST	SEGMENT
??_C@_06MIJEDCKK@MAP384@ DB 'MAP384', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IHNFKEGN@MAP383@
CONST	SEGMENT
??_C@_06IHNFKEGN@MAP383@ DB 'MAP383', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOMOJFCM@MAP382@
CONST	SEGMENT
??_C@_06JOMOJFCM@MAP382@ DB 'MAP382', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFODMGOP@MAP381@
CONST	SEGMENT
??_C@_06LFODMGOP@MAP381@ DB 'MAP381', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KMPIPHKO@MAP380@
CONST	SEGMENT
??_C@_06KMPIPHKO@MAP380@ DB 'MAP380', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGGGALNK@MAP379@
CONST	SEGMENT
??_C@_06HGGGALNK@MAP379@ DB 'MAP379', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPHNDKJL@MAP378@
CONST	SEGMENT
??_C@_06GPHNDKJL@MAP378@ DB 'MAP378', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIOFCGFE@MAP377@
CONST	SEGMENT
??_C@_06OIOFCGFE@MAP377@ DB 'MAP377', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBPOBHBF@MAP376@
CONST	SEGMENT
??_C@_06PBPOBHBF@MAP376@ DB 'MAP376', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NKNDEENG@MAP375@
CONST	SEGMENT
??_C@_06NKNDEENG@MAP375@ DB 'MAP375', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MDMIHFJH@MAP374@
CONST	SEGMENT
??_C@_06MDMIHFJH@MAP374@ DB 'MAP374', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMIJODFA@MAP373@
CONST	SEGMENT
??_C@_06IMIJODFA@MAP373@ DB 'MAP373', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFJCNCBB@MAP372@
CONST	SEGMENT
??_C@_06JFJCNCBB@MAP372@ DB 'MAP372', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LOLPIBNC@MAP371@
CONST	SEGMENT
??_C@_06LOLPIBNC@MAP371@ DB 'MAP371', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KHKELAJD@MAP370@
CONST	SEGMENT
??_C@_06KHKELAJD@MAP370@ DB 'MAP370', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHKEGBON@MAP369@
CONST	SEGMENT
??_C@_06HHKEGBON@MAP369@ DB 'MAP369', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GOLPFAKM@MAP368@
CONST	SEGMENT
??_C@_06GOLPFAKM@MAP368@ DB 'MAP368', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJCHEMGD@MAP367@
CONST	SEGMENT
??_C@_06OJCHEMGD@MAP367@ DB 'MAP367', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PADMHNCC@MAP366@
CONST	SEGMENT
??_C@_06PADMHNCC@MAP366@ DB 'MAP366', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NLBBCOOB@MAP365@
CONST	SEGMENT
??_C@_06NLBBCOOB@MAP365@ DB 'MAP365', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCAKBPKA@MAP364@
CONST	SEGMENT
??_C@_06MCAKBPKA@MAP364@ DB 'MAP364', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06INELIJGH@MAP363@
CONST	SEGMENT
??_C@_06INELIJGH@MAP363@ DB 'MAP363', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JEFALICG@MAP362@
CONST	SEGMENT
??_C@_06JEFALICG@MAP362@ DB 'MAP362', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LPHNOLOF@MAP361@
CONST	SEGMENT
??_C@_06LPHNOLOF@MAP361@ DB 'MAP361', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGGGNKKE@MAP360@
CONST	SEGMENT
??_C@_06KGGGNKKE@MAP360@ DB 'MAP360', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFOCNPLE@MAP359@
CONST	SEGMENT
??_C@_06HFOCNPLE@MAP359@ DB 'MAP359', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMPJOOPF@MAP358@
CONST	SEGMENT
??_C@_06GMPJOOPF@MAP358@ DB 'MAP358', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLGBPCDK@MAP357@
CONST	SEGMENT
??_C@_06OLGBPCDK@MAP357@ DB 'MAP357', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCHKMDHL@MAP356@
CONST	SEGMENT
??_C@_06PCHKMDHL@MAP356@ DB 'MAP356', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NJFHJALI@MAP355@
CONST	SEGMENT
??_C@_06NJFHJALI@MAP355@ DB 'MAP355', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAEMKBPJ@MAP354@
CONST	SEGMENT
??_C@_06MAEMKBPJ@MAP354@ DB 'MAP354', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPANDHDO@MAP353@
CONST	SEGMENT
??_C@_06IPANDHDO@MAP353@ DB 'MAP353', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGBGAGHP@MAP352@
CONST	SEGMENT
??_C@_06JGBGAGHP@MAP352@ DB 'MAP352', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNDLFFLM@MAP351@
CONST	SEGMENT
??_C@_06LNDLFFLM@MAP351@ DB 'MAP351', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KECAGEPN@MAP350@
CONST	SEGMENT
??_C@_06KECAGEPN@MAP350@ DB 'MAP350', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HECALFID@MAP349@
CONST	SEGMENT
??_C@_06HECALFID@MAP349@ DB 'MAP349', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNDLIEMC@MAP348@
CONST	SEGMENT
??_C@_06GNDLIEMC@MAP348@ DB 'MAP348', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OKKDJIAN@MAP347@
CONST	SEGMENT
??_C@_06OKKDJIAN@MAP347@ DB 'MAP347', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDLIKJEM@MAP346@
CONST	SEGMENT
??_C@_06PDLIKJEM@MAP346@ DB 'MAP346', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIJFPKIP@MAP345@
CONST	SEGMENT
??_C@_06NIJFPKIP@MAP345@ DB 'MAP345', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBIOMLMO@MAP344@
CONST	SEGMENT
??_C@_06MBIOMLMO@MAP344@ DB 'MAP344', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOMPFNAJ@MAP343@
CONST	SEGMENT
??_C@_06IOMPFNAJ@MAP343@ DB 'MAP343', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JHNEGMEI@MAP342@
CONST	SEGMENT
??_C@_06JHNEGMEI@MAP342@ DB 'MAP342', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMPJDPIL@MAP341@
CONST	SEGMENT
??_C@_06LMPJDPIL@MAP341@ DB 'MAP341', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFOCAOMK@MAP340@
CONST	SEGMENT
??_C@_06KFOCAOMK@MAP340@ DB 'MAP340', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBGPKDAG@MAP339@
CONST	SEGMENT
??_C@_06HBGPKDAG@MAP339@ DB 'MAP339', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIHEJCEH@MAP338@
CONST	SEGMENT
??_C@_06GIHEJCEH@MAP338@ DB 'MAP338', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OPOMIOII@MAP337@
CONST	SEGMENT
??_C@_06OPOMIOII@MAP337@ DB 'MAP337', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PGPHLPMJ@MAP336@
CONST	SEGMENT
??_C@_06PGPHLPMJ@MAP336@ DB 'MAP336', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNNKOMAK@MAP335@
CONST	SEGMENT
??_C@_06NNNKOMAK@MAP335@ DB 'MAP335', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MEMBNNEL@MAP334@
CONST	SEGMENT
??_C@_06MEMBNNEL@MAP334@ DB 'MAP334', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILIAELIM@MAP333@
CONST	SEGMENT
??_C@_06ILIAELIM@MAP333@ DB 'MAP333', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCJLHKMN@MAP332@
CONST	SEGMENT
??_C@_06JCJLHKMN@MAP332@ DB 'MAP332', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJLGCJAO@MAP331@
CONST	SEGMENT
??_C@_06LJLGCJAO@MAP331@ DB 'MAP331', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KAKNBIEP@MAP330@
CONST	SEGMENT
??_C@_06KAKNBIEP@MAP330@ DB 'MAP330', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HAKNMJDB@MAP329@
CONST	SEGMENT
??_C@_06HAKNMJDB@MAP329@ DB 'MAP329', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJLGPIHA@MAP328@
CONST	SEGMENT
??_C@_06GJLGPIHA@MAP328@ DB 'MAP328', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OOCOOELP@MAP327@
CONST	SEGMENT
??_C@_06OOCOOELP@MAP327@ DB 'MAP327', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PHDFNFPO@MAP326@
CONST	SEGMENT
??_C@_06PHDFNFPO@MAP326@ DB 'MAP326', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NMBIIGDN@MAP325@
CONST	SEGMENT
??_C@_06NMBIIGDN@MAP325@ DB 'MAP325', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MFADLHHM@MAP324@
CONST	SEGMENT
??_C@_06MFADLHHM@MAP324@ DB 'MAP324', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKECCBLL@MAP323@
CONST	SEGMENT
??_C@_06IKECCBLL@MAP323@ DB 'MAP323', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDFJBAPK@MAP322@
CONST	SEGMENT
??_C@_06JDFJBAPK@MAP322@ DB 'MAP322', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LIHEEDDJ@MAP321@
CONST	SEGMENT
??_C@_06LIHEEDDJ@MAP321@ DB 'MAP321', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KBGPHCHI@MAP320@
CONST	SEGMENT
??_C@_06KBGPHCHI@MAP320@ DB 'MAP320', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCOLHHGI@MAP319@
CONST	SEGMENT
??_C@_06HCOLHHGI@MAP319@ DB 'MAP319', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLPAEGCJ@MAP318@
CONST	SEGMENT
??_C@_06GLPAEGCJ@MAP318@ DB 'MAP318', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMGIFKOG@MAP317@
CONST	SEGMENT
??_C@_06OMGIFKOG@MAP317@ DB 'MAP317', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PFHDGLKH@MAP316@
CONST	SEGMENT
??_C@_06PFHDGLKH@MAP316@ DB 'MAP316', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOFODIGE@MAP315@
CONST	SEGMENT
??_C@_06NOFODIGE@MAP315@ DB 'MAP315', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHEFAJCF@MAP314@
CONST	SEGMENT
??_C@_06MHEFAJCF@MAP314@ DB 'MAP314', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IIAEJPOC@MAP313@
CONST	SEGMENT
??_C@_06IIAEJPOC@MAP313@ DB 'MAP313', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBBPKOKD@MAP312@
CONST	SEGMENT
??_C@_06JBBPKOKD@MAP312@ DB 'MAP312', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKDCPNGA@MAP311@
CONST	SEGMENT
??_C@_06LKDCPNGA@MAP311@ DB 'MAP311', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDCJMMCB@MAP310@
CONST	SEGMENT
??_C@_06KDCJMMCB@MAP310@ DB 'MAP310', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDCJBNFP@MAP309@
CONST	SEGMENT
??_C@_06HDCJBNFP@MAP309@ DB 'MAP309', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GKDCCMBO@MAP308@
CONST	SEGMENT
??_C@_06GKDCCMBO@MAP308@ DB 'MAP308', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONKKDANB@MAP307@
CONST	SEGMENT
??_C@_06ONKKDANB@MAP307@ DB 'MAP307', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PELBABJA@MAP306@
CONST	SEGMENT
??_C@_06PELBABJA@MAP306@ DB 'MAP306', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPJMFCFD@MAP305@
CONST	SEGMENT
??_C@_06NPJMFCFD@MAP305@ DB 'MAP305', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGIHGDBC@MAP304@
CONST	SEGMENT
??_C@_06MGIHGDBC@MAP304@ DB 'MAP304', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJMGPFNF@MAP303@
CONST	SEGMENT
??_C@_06IJMGPFNF@MAP303@ DB 'MAP303', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JANNMEJE@MAP302@
CONST	SEGMENT
??_C@_06JANNMEJE@MAP302@ DB 'MAP302', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLPAJHFH@MAP301@
CONST	SEGMENT
??_C@_06LLPAJHFH@MAP301@ DB 'MAP301', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCOLKGBG@MAP300@
CONST	SEGMENT
??_C@_06KCOLKGBG@MAP300@ DB 'MAP300', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MEEEEBLF@MAP299@
CONST	SEGMENT
??_C@_06MEEEEBLF@MAP299@ DB 'MAP299', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNFPHAPE@MAP298@
CONST	SEGMENT
??_C@_06NNFPHAPE@MAP298@ DB 'MAP298', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKMHGMDL@MAP297@
CONST	SEGMENT
??_C@_06FKMHGMDL@MAP297@ DB 'MAP297', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDNMFNHK@MAP296@
CONST	SEGMENT
??_C@_06EDNMFNHK@MAP296@ DB 'MAP296', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIPBAOLJ@MAP295@
CONST	SEGMENT
??_C@_06GIPBAOLJ@MAP295@ DB 'MAP295', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBOKDPPI@MAP294@
CONST	SEGMENT
??_C@_06HBOKDPPI@MAP294@ DB 'MAP294', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOKLKJDP@MAP293@
CONST	SEGMENT
??_C@_06DOKLKJDP@MAP293@ DB 'MAP293', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHLAJIHO@MAP292@
CONST	SEGMENT
??_C@_06CHLAJIHO@MAP292@ DB 'MAP292', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJNMLLN@MAP291@
CONST	SEGMENT
??_C@_06MJNMLLN@MAP291@ DB 'MAP291', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFIGPKPM@MAP290@
CONST	SEGMENT
??_C@_06BFIGPKPM@MAP290@ DB 'MAP290', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MFIGCLIC@MAP289@
CONST	SEGMENT
??_C@_06MFIGCLIC@MAP289@ DB 'MAP289', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NMJNBKMD@MAP288@
CONST	SEGMENT
??_C@_06NMJNBKMD@MAP288@ DB 'MAP288', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLAFAGAM@MAP287@
CONST	SEGMENT
??_C@_06FLAFAGAM@MAP287@ DB 'MAP287', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECBODHEN@MAP286@
CONST	SEGMENT
??_C@_06ECBODHEN@MAP286@ DB 'MAP286', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJDDGEIO@MAP285@
CONST	SEGMENT
??_C@_06GJDDGEIO@MAP285@ DB 'MAP285', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HACIFFMP@MAP284@
CONST	SEGMENT
??_C@_06HACIFFMP@MAP284@ DB 'MAP284', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPGJMDAI@MAP283@
CONST	SEGMENT
??_C@_06DPGJMDAI@MAP283@ DB 'MAP283', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CGHCPCEJ@MAP282@
CONST	SEGMENT
??_C@_06CGHCPCEJ@MAP282@ DB 'MAP282', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NFPKBIK@MAP281@
CONST	SEGMENT
??_C@_06NFPKBIK@MAP281@ DB 'MAP281', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BEEEJAML@MAP280@
CONST	SEGMENT
??_C@_06BEEEJAML@MAP280@ DB 'MAP280', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MONKGMLP@MAP279@
CONST	SEGMENT
??_C@_06MONKGMLP@MAP279@ DB 'MAP279', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHMBFNPO@MAP278@
CONST	SEGMENT
??_C@_06NHMBFNPO@MAP278@ DB 'MAP278', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FAFJEBDB@MAP277@
CONST	SEGMENT
??_C@_06FAFJEBDB@MAP277@ DB 'MAP277', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJECHAHA@MAP276@
CONST	SEGMENT
??_C@_06EJECHAHA@MAP276@ DB 'MAP276', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCGPCDLD@MAP275@
CONST	SEGMENT
??_C@_06GCGPCDLD@MAP275@ DB 'MAP275', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLHEBCPC@MAP274@
CONST	SEGMENT
??_C@_06HLHEBCPC@MAP274@ DB 'MAP274', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DEDFIEDF@MAP273@
CONST	SEGMENT
??_C@_06DEDFIEDF@MAP273@ DB 'MAP273', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNCOLFHE@MAP272@
CONST	SEGMENT
??_C@_06CNCOLFHE@MAP272@ DB 'MAP272', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GADOGLH@MAP271@
CONST	SEGMENT
??_C@_06GADOGLH@MAP271@ DB 'MAP271', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPBINHPG@MAP270@
CONST	SEGMENT
??_C@_06BPBINHPG@MAP270@ DB 'MAP270', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPBIAGII@MAP269@
CONST	SEGMENT
??_C@_06MPBIAGII@MAP269@ DB 'MAP269', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGADDHMJ@MAP268@
CONST	SEGMENT
??_C@_06NGADDHMJ@MAP268@ DB 'MAP268', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBJLCLAG@MAP267@
CONST	SEGMENT
??_C@_06FBJLCLAG@MAP267@ DB 'MAP267', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EIIABKEH@MAP266@
CONST	SEGMENT
??_C@_06EIIABKEH@MAP266@ DB 'MAP266', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDKNEJIE@MAP265@
CONST	SEGMENT
??_C@_06GDKNEJIE@MAP265@ DB 'MAP265', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKLGHIMF@MAP264@
CONST	SEGMENT
??_C@_06HKLGHIMF@MAP264@ DB 'MAP264', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DFPHOOAC@MAP263@
CONST	SEGMENT
??_C@_06DFPHOOAC@MAP263@ DB 'MAP263', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMOMNPED@MAP262@
CONST	SEGMENT
??_C@_06CMOMNPED@MAP262@ DB 'MAP262', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMBIMIA@MAP261@
CONST	SEGMENT
??_C@_06HMBIMIA@MAP261@ DB 'MAP261', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BONKLNMB@MAP260@
CONST	SEGMENT
??_C@_06BONKLNMB@MAP260@ DB 'MAP260', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNFOLINB@MAP259@
CONST	SEGMENT
??_C@_06MNFOLINB@MAP259@ DB 'MAP259', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NEEFIJJA@MAP258@
CONST	SEGMENT
??_C@_06NEEFIJJA@MAP258@ DB 'MAP258', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDNNJFFP@MAP257@
CONST	SEGMENT
??_C@_06FDNNJFFP@MAP257@ DB 'MAP257', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKMGKEBO@MAP256@
CONST	SEGMENT
??_C@_06EKMGKEBO@MAP256@ DB 'MAP256', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBOLPHNN@MAP255@
CONST	SEGMENT
??_C@_06GBOLPHNN@MAP255@ DB 'MAP255', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIPAMGJM@MAP254@
CONST	SEGMENT
??_C@_06HIPAMGJM@MAP254@ DB 'MAP254', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHLBFAFL@MAP253@
CONST	SEGMENT
??_C@_06DHLBFAFL@MAP253@ DB 'MAP253', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06COKKGBBK@MAP252@
CONST	SEGMENT
??_C@_06COKKGBBK@MAP252@ DB 'MAP252', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIHDCNJ@MAP251@
CONST	SEGMENT
??_C@_06FIHDCNJ@MAP251@ DB 'MAP251', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMJMADJI@MAP250@
CONST	SEGMENT
??_C@_06BMJMADJI@MAP250@ DB 'MAP250', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMJMNCOG@MAP249@
CONST	SEGMENT
??_C@_06MMJMNCOG@MAP249@ DB 'MAP249', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NFIHODKH@MAP248@
CONST	SEGMENT
??_C@_06NFIHODKH@MAP248@ DB 'MAP248', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FCBPPPGI@MAP247@
CONST	SEGMENT
??_C@_06FCBPPPGI@MAP247@ DB 'MAP247', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELAEMOCJ@MAP246@
CONST	SEGMENT
??_C@_06ELAEMOCJ@MAP246@ DB 'MAP246', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GACJJNOK@MAP245@
CONST	SEGMENT
??_C@_06GACJJNOK@MAP245@ DB 'MAP245', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJDCKMKL@MAP244@
CONST	SEGMENT
??_C@_06HJDCKMKL@MAP244@ DB 'MAP244', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGHDDKGM@MAP243@
CONST	SEGMENT
??_C@_06DGHDDKGM@MAP243@ DB 'MAP243', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPGIALCN@MAP242@
CONST	SEGMENT
??_C@_06CPGIALCN@MAP242@ DB 'MAP242', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EEFFIOO@MAP241@
CONST	SEGMENT
??_C@_06EEFFIOO@MAP241@ DB 'MAP241', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNFOGJKP@MAP240@
CONST	SEGMENT
??_C@_06BNFOGJKP@MAP240@ DB 'MAP240', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJNDMEGD@MAP239@
CONST	SEGMENT
??_C@_06MJNDMEGD@MAP239@ DB 'MAP239', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NAMIPFCC@MAP238@
CONST	SEGMENT
??_C@_06NAMIPFCC@MAP238@ DB 'MAP238', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFAOJON@MAP237@
CONST	SEGMENT
??_C@_06FHFAOJON@MAP237@ DB 'MAP237', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOELNIKM@MAP236@
CONST	SEGMENT
??_C@_06EOELNIKM@MAP236@ DB 'MAP236', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GFGGILGP@MAP235@
CONST	SEGMENT
??_C@_06GFGGILGP@MAP235@ DB 'MAP235', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMHNLKCO@MAP234@
CONST	SEGMENT
??_C@_06HMHNLKCO@MAP234@ DB 'MAP234', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DDDMCMOJ@MAP233@
CONST	SEGMENT
??_C@_06DDDMCMOJ@MAP233@ DB 'MAP233', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKCHBNKI@MAP232@
CONST	SEGMENT
??_C@_06CKCHBNKI@MAP232@ DB 'MAP232', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAKEOGL@MAP231@
CONST	SEGMENT
??_C@_06BAKEOGL@MAP231@ DB 'MAP231', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIBBHPCK@MAP230@
CONST	SEGMENT
??_C@_06BIBBHPCK@MAP230@ DB 'MAP230', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIBBKOFE@MAP229@
CONST	SEGMENT
??_C@_06MIBBKOFE@MAP229@ DB 'MAP229', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBAKJPBF@MAP228@
CONST	SEGMENT
??_C@_06NBAKJPBF@MAP228@ DB 'MAP228', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGJCIDNK@MAP227@
CONST	SEGMENT
??_C@_06FGJCIDNK@MAP227@ DB 'MAP227', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPIJLCJL@MAP226@
CONST	SEGMENT
??_C@_06EPIJLCJL@MAP226@ DB 'MAP226', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEKEOBFI@MAP225@
CONST	SEGMENT
??_C@_06GEKEOBFI@MAP225@ DB 'MAP225', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNLPNABJ@MAP224@
CONST	SEGMENT
??_C@_06HNLPNABJ@MAP224@ DB 'MAP224', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DCPOEGNO@MAP223@
CONST	SEGMENT
??_C@_06DCPOEGNO@MAP223@ DB 'MAP223', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLOFHHJP@MAP222@
CONST	SEGMENT
??_C@_06CLOFHHJP@MAP222@ DB 'MAP222', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MICEFM@MAP221@
CONST	SEGMENT
??_C@_06MICEFM@MAP221@ DB 'MAP221', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BJNDBFBN@MAP220@
CONST	SEGMENT
??_C@_06BJNDBFBN@MAP220@ DB 'MAP220', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKFHBAAN@MAP219@
CONST	SEGMENT
??_C@_06MKFHBAAN@MAP219@ DB 'MAP219', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NDEMCBEM@MAP218@
CONST	SEGMENT
??_C@_06NDEMCBEM@MAP218@ DB 'MAP218', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FENEDNID@MAP217@
CONST	SEGMENT
??_C@_06FENEDNID@MAP217@ DB 'MAP217', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENMPAMMC@MAP216@
CONST	SEGMENT
??_C@_06ENMPAMMC@MAP216@ DB 'MAP216', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGOCFPAB@MAP215@
CONST	SEGMENT
??_C@_06GGOCFPAB@MAP215@ DB 'MAP215', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPPJGOEA@MAP214@
CONST	SEGMENT
??_C@_06HPPJGOEA@MAP214@ DB 'MAP214', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DALIPIIH@MAP213@
CONST	SEGMENT
??_C@_06DALIPIIH@MAP213@ DB 'MAP213', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJKDMJMG@MAP212@
CONST	SEGMENT
??_C@_06CJKDMJMG@MAP212@ DB 'MAP212', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIOJKAF@MAP211@
CONST	SEGMENT
??_C@_06CIOJKAF@MAP211@ DB 'MAP211', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLJFKLEE@MAP210@
CONST	SEGMENT
??_C@_06BLJFKLEE@MAP210@ DB 'MAP210', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLJFHKDK@MAP209@
CONST	SEGMENT
??_C@_06MLJFHKDK@MAP209@ DB 'MAP209', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCIOELHL@MAP208@
CONST	SEGMENT
??_C@_06NCIOELHL@MAP208@ DB 'MAP208', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBGFHLE@MAP207@
CONST	SEGMENT
??_C@_06FFBGFHLE@MAP207@ DB 'MAP207', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMANGGPF@MAP206@
CONST	SEGMENT
??_C@_06EMANGGPF@MAP206@ DB 'MAP206', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GHCADFDG@MAP205@
CONST	SEGMENT
??_C@_06GHCADFDG@MAP205@ DB 'MAP205', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HODLAEHH@MAP204@
CONST	SEGMENT
??_C@_06HODLAEHH@MAP204@ DB 'MAP204', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DBHKJCLA@MAP203@
CONST	SEGMENT
??_C@_06DBHKJCLA@MAP203@ DB 'MAP203', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIGBKDPB@MAP202@
CONST	SEGMENT
??_C@_06CIGBKDPB@MAP202@ DB 'MAP202', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DEMPADC@MAP201@
CONST	SEGMENT
??_C@_06DEMPADC@MAP201@ DB 'MAP201', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BKFHMBHD@MAP200@
CONST	SEGMENT
??_C@_06BKFHMBHD@MAP200@ DB 'MAP200', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGPBOOFL@MAP199@
CONST	SEGMENT
??_C@_06NGPBOOFL@MAP199@ DB 'MAP199', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPOKNPBK@MAP198@
CONST	SEGMENT
??_C@_06MPOKNPBK@MAP198@ DB 'MAP198', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EIHCMDNF@MAP197@
CONST	SEGMENT
??_C@_06EIHCMDNF@MAP197@ DB 'MAP197', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBGJPCJE@MAP196@
CONST	SEGMENT
??_C@_06FBGJPCJE@MAP196@ DB 'MAP196', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKEEKBFH@MAP195@
CONST	SEGMENT
??_C@_06HKEEKBFH@MAP195@ DB 'MAP195', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDFPJABG@MAP194@
CONST	SEGMENT
??_C@_06GDFPJABG@MAP194@ DB 'MAP194', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMBOAGNB@MAP193@
CONST	SEGMENT
??_C@_06CMBOAGNB@MAP193@ DB 'MAP193', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DFAFDHJA@MAP192@
CONST	SEGMENT
??_C@_06DFAFDHJA@MAP192@ DB 'MAP192', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BOCIGEFD@MAP191@
CONST	SEGMENT
??_C@_06BOCIGEFD@MAP191@ DB 'MAP191', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDDFFBC@MAP190@
CONST	SEGMENT
??_C@_06HDDFFBC@MAP190@ DB 'MAP190', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHDDIEGM@MAP189@
CONST	SEGMENT
??_C@_06NHDDIEGM@MAP189@ DB 'MAP189', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MOCILFCN@MAP188@
CONST	SEGMENT
??_C@_06MOCILFCN@MAP188@ DB 'MAP188', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJLAKJOC@MAP187@
CONST	SEGMENT
??_C@_06EJLAKJOC@MAP187@ DB 'MAP187', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FAKLJIKD@MAP186@
CONST	SEGMENT
??_C@_06FAKLJIKD@MAP186@ DB 'MAP186', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLIGMLGA@MAP185@
CONST	SEGMENT
??_C@_06HLIGMLGA@MAP185@ DB 'MAP185', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCJNPKCB@MAP184@
CONST	SEGMENT
??_C@_06GCJNPKCB@MAP184@ DB 'MAP184', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNNMGMOG@MAP183@
CONST	SEGMENT
??_C@_06CNNMGMOG@MAP183@ DB 'MAP183', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DEMHFNKH@MAP182@
CONST	SEGMENT
??_C@_06DEMHFNKH@MAP182@ DB 'MAP182', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPOKAOGE@MAP181@
CONST	SEGMENT
??_C@_06BPOKAOGE@MAP181@ DB 'MAP181', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPBDPCF@MAP180@
CONST	SEGMENT
??_C@_06GPBDPCF@MAP180@ DB 'MAP180', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NMGPMDFB@MAP179@
CONST	SEGMENT
??_C@_06NMGPMDFB@MAP179@ DB 'MAP179', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MFHEPCBA@MAP178@
CONST	SEGMENT
??_C@_06MFHEPCBA@MAP178@ DB 'MAP178', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECOMOONP@MAP177@
CONST	SEGMENT
??_C@_06ECOMOONP@MAP177@ DB 'MAP177', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLPHNPJO@MAP176@
CONST	SEGMENT
??_C@_06FLPHNPJO@MAP176@ DB 'MAP176', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HANKIMFN@MAP175@
CONST	SEGMENT
??_C@_06HANKIMFN@MAP175@ DB 'MAP175', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJMBLNBM@MAP174@
CONST	SEGMENT
??_C@_06GJMBLNBM@MAP174@ DB 'MAP174', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CGIACLNL@MAP173@
CONST	SEGMENT
??_C@_06CGIACLNL@MAP173@ DB 'MAP173', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPJLBKJK@MAP172@
CONST	SEGMENT
??_C@_06DPJLBKJK@MAP172@ DB 'MAP172', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BELGEJFJ@MAP171@
CONST	SEGMENT
??_C@_06BELGEJFJ@MAP171@ DB 'MAP171', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NKNHIBI@MAP170@
CONST	SEGMENT
??_C@_06NKNHIBI@MAP170@ DB 'MAP170', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNKNKJGG@MAP169@
CONST	SEGMENT
??_C@_06NNKNKJGG@MAP169@ DB 'MAP169', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MELGJICH@MAP168@
CONST	SEGMENT
??_C@_06MELGJICH@MAP168@ DB 'MAP168', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDCOIEOI@MAP167@
CONST	SEGMENT
??_C@_06EDCOIEOI@MAP167@ DB 'MAP167', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKDFLFKJ@MAP166@
CONST	SEGMENT
??_C@_06FKDFLFKJ@MAP166@ DB 'MAP166', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBBIOGGK@MAP165@
CONST	SEGMENT
??_C@_06HBBIOGGK@MAP165@ DB 'MAP165', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIADNHCL@MAP164@
CONST	SEGMENT
??_C@_06GIADNHCL@MAP164@ DB 'MAP164', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHECEBOM@MAP163@
CONST	SEGMENT
??_C@_06CHECEBOM@MAP163@ DB 'MAP163', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOFJHAKN@MAP162@
CONST	SEGMENT
??_C@_06DOFJHAKN@MAP162@ DB 'MAP162', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFHECDGO@MAP161@
CONST	SEGMENT
??_C@_06BFHECDGO@MAP161@ DB 'MAP161', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGPBCCP@MAP160@
CONST	SEGMENT
??_C@_06MGPBCCP@MAP160@ DB 'MAP160', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPOLBHDP@MAP159@
CONST	SEGMENT
??_C@_06NPOLBHDP@MAP159@ DB 'MAP159', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGPACGHO@MAP158@
CONST	SEGMENT
??_C@_06MGPACGHO@MAP158@ DB 'MAP158', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGIDKLB@MAP157@
CONST	SEGMENT
??_C@_06EBGIDKLB@MAP157@ DB 'MAP157', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIHDALPA@MAP156@
CONST	SEGMENT
??_C@_06FIHDALPA@MAP156@ DB 'MAP156', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDFOFIDD@MAP155@
CONST	SEGMENT
??_C@_06HDFOFIDD@MAP155@ DB 'MAP155', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GKEFGJHC@MAP154@
CONST	SEGMENT
??_C@_06GKEFGJHC@MAP154@ DB 'MAP154', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CFAEPPLF@MAP153@
CONST	SEGMENT
??_C@_06CFAEPPLF@MAP153@ DB 'MAP153', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DMBPMOPE@MAP152@
CONST	SEGMENT
??_C@_06DMBPMOPE@MAP152@ DB 'MAP152', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHDCJNDH@MAP151@
CONST	SEGMENT
??_C@_06BHDCJNDH@MAP151@ DB 'MAP151', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCJKMHG@MAP150@
CONST	SEGMENT
??_C@_06OCJKMHG@MAP150@ DB 'MAP150', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOCJHNAI@MAP149@
CONST	SEGMENT
??_C@_06NOCJHNAI@MAP149@ DB 'MAP149', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHDCEMEJ@MAP148@
CONST	SEGMENT
??_C@_06MHDCEMEJ@MAP148@ DB 'MAP148', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EAKKFAIG@MAP147@
CONST	SEGMENT
??_C@_06EAKKFAIG@MAP147@ DB 'MAP147', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJLBGBMH@MAP146@
CONST	SEGMENT
??_C@_06FJLBGBMH@MAP146@ DB 'MAP146', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCJMDCAE@MAP145@
CONST	SEGMENT
??_C@_06HCJMDCAE@MAP145@ DB 'MAP145', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLIHADEF@MAP144@
CONST	SEGMENT
??_C@_06GLIHADEF@MAP144@ DB 'MAP144', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEMGJFIC@MAP143@
CONST	SEGMENT
??_C@_06CEMGJFIC@MAP143@ DB 'MAP143', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DNNNKEMD@MAP142@
CONST	SEGMENT
??_C@_06DNNNKEMD@MAP142@ DB 'MAP142', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGPAPHAA@MAP141@
CONST	SEGMENT
??_C@_06BGPAPHAA@MAP141@ DB 'MAP141', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POLMGEB@MAP140@
CONST	SEGMENT
??_C@_06POLMGEB@MAP140@ DB 'MAP140', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NLGGGLIN@MAP139@
CONST	SEGMENT
??_C@_06NLGGGLIN@MAP139@ DB 'MAP139', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCHNFKMM@MAP138@
CONST	SEGMENT
??_C@_06MCHNFKMM@MAP138@ DB 'MAP138', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFOFEGAD@MAP137@
CONST	SEGMENT
??_C@_06EFOFEGAD@MAP137@ DB 'MAP137', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMPOHHEC@MAP136@
CONST	SEGMENT
??_C@_06FMPOHHEC@MAP136@ DB 'MAP136', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHNDCEIB@MAP135@
CONST	SEGMENT
??_C@_06HHNDCEIB@MAP135@ DB 'MAP135', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GOMIBFMA@MAP134@
CONST	SEGMENT
??_C@_06GOMIBFMA@MAP134@ DB 'MAP134', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBIJIDAH@MAP133@
CONST	SEGMENT
??_C@_06CBIJIDAH@MAP133@ DB 'MAP133', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DIJCLCEG@MAP132@
CONST	SEGMENT
??_C@_06DIJCLCEG@MAP132@ DB 'MAP132', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BDLPOBIF@MAP131@
CONST	SEGMENT
??_C@_06BDLPOBIF@MAP131@ DB 'MAP131', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKENAME@MAP130@
CONST	SEGMENT
??_C@_06KKENAME@MAP130@ DB 'MAP130', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NKKEABLK@MAP129@
CONST	SEGMENT
??_C@_06NKKEABLK@MAP129@ DB 'MAP129', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MDLPDAPL@MAP128@
CONST	SEGMENT
??_C@_06MDLPDAPL@MAP128@ DB 'MAP128', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EECHCMDE@MAP127@
CONST	SEGMENT
??_C@_06EECHCMDE@MAP127@ DB 'MAP127', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNDMBNHF@MAP126@
CONST	SEGMENT
??_C@_06FNDMBNHF@MAP126@ DB 'MAP126', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGBBEOLG@MAP125@
CONST	SEGMENT
??_C@_06HGBBEOLG@MAP125@ DB 'MAP125', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPAKHPPH@MAP124@
CONST	SEGMENT
??_C@_06GPAKHPPH@MAP124@ DB 'MAP124', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CAELOJDA@MAP123@
CONST	SEGMENT
??_C@_06CAELOJDA@MAP123@ DB 'MAP123', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJFANIHB@MAP122@
CONST	SEGMENT
??_C@_06DJFANIHB@MAP122@ DB 'MAP122', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCHNILLC@MAP121@
CONST	SEGMENT
??_C@_06BCHNILLC@MAP121@ DB 'MAP121', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGGLKPD@MAP120@
CONST	SEGMENT
??_C@_06LGGLKPD@MAP120@ DB 'MAP120', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIOCLPOD@MAP119@
CONST	SEGMENT
??_C@_06NIOCLPOD@MAP119@ DB 'MAP119', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBPJIOKC@MAP118@
CONST	SEGMENT
??_C@_06MBPJIOKC@MAP118@ DB 'MAP118', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGGBJCGN@MAP117@
CONST	SEGMENT
??_C@_06EGGBJCGN@MAP117@ DB 'MAP117', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FPHKKDCM@MAP116@
CONST	SEGMENT
??_C@_06FPHKKDCM@MAP116@ DB 'MAP116', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HEFHPAOP@MAP115@
CONST	SEGMENT
??_C@_06HEFHPAOP@MAP115@ DB 'MAP115', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNEMMBKO@MAP114@
CONST	SEGMENT
??_C@_06GNEMMBKO@MAP114@ DB 'MAP114', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCANFHGJ@MAP113@
CONST	SEGMENT
??_C@_06CCANFHGJ@MAP113@ DB 'MAP113', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLBGGGCI@MAP112@
CONST	SEGMENT
??_C@_06DLBGGGCI@MAP112@ DB 'MAP112', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BADLDFOL@MAP111@
CONST	SEGMENT
??_C@_06BADLDFOL@MAP111@ DB 'MAP111', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCAAEKK@MAP110@
CONST	SEGMENT
??_C@_06JCAAEKK@MAP110@ DB 'MAP110', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NJCANFNE@MAP109@
CONST	SEGMENT
??_C@_06NJCANFNE@MAP109@ DB 'MAP109', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MADLOEJF@MAP108@
CONST	SEGMENT
??_C@_06MADLOEJF@MAP108@ DB 'MAP108', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHKDPIFK@MAP107@
CONST	SEGMENT
??_C@_06EHKDPIFK@MAP107@ DB 'MAP107', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOLIMJBL@MAP106@
CONST	SEGMENT
??_C@_06FOLIMJBL@MAP106@ DB 'MAP106', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFJFJKNI@MAP105@
CONST	SEGMENT
??_C@_06HFJFJKNI@MAP105@ DB 'MAP105', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMIOKLJJ@MAP104@
CONST	SEGMENT
??_C@_06GMIOKLJJ@MAP104@ DB 'MAP104', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDMPDNFO@MAP103@
CONST	SEGMENT
??_C@_06CDMPDNFO@MAP103@ DB 'MAP103', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKNEAMBP@MAP102@
CONST	SEGMENT
??_C@_06DKNEAMBP@MAP102@ DB 'MAP102', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBPJFPNM@MAP101@
CONST	SEGMENT
??_C@_06BBPJFPNM@MAP101@ DB 'MAP101', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOCGOJN@MAP100@
CONST	SEGMENT
??_C@_06IOCGOJN@MAP100@ DB 'MAP100', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGFLGKBA@MAP99@
CONST	SEGMENT
??_C@_05HGFLGKBA@MAP99@ DB 'MAP99', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPEAFLFB@MAP98@
CONST	SEGMENT
??_C@_05GPEAFLFB@MAP98@ DB 'MAP98', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OINIEHJO@MAP97@
CONST	SEGMENT
??_C@_05OINIEHJO@MAP97@ DB 'MAP97', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBMDHGNP@MAP96@
CONST	SEGMENT
??_C@_05PBMDHGNP@MAP96@ DB 'MAP96', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NKOOCFBM@MAP95@
CONST	SEGMENT
??_C@_05NKOOCFBM@MAP95@ DB 'MAP95', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MDPFBEFN@MAP94@
CONST	SEGMENT
??_C@_05MDPFBEFN@MAP94@ DB 'MAP94', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IMLEICJK@MAP93@
CONST	SEGMENT
??_C@_05IMLEICJK@MAP93@ DB 'MAP93', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JFKPLDNL@MAP92@
CONST	SEGMENT
??_C@_05JFKPLDNL@MAP92@ DB 'MAP92', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LOICOABI@MAP91@
CONST	SEGMENT
??_C@_05LOICOABI@MAP91@ DB 'MAP91', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KHJJNBFJ@MAP90@
CONST	SEGMENT
??_C@_05KHJJNBFJ@MAP90@ DB 'MAP90', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HHJJAACH@MAP89@
CONST	SEGMENT
??_C@_05HHJJAACH@MAP89@ DB 'MAP89', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GOICDBGG@MAP88@
CONST	SEGMENT
??_C@_05GOICDBGG@MAP88@ DB 'MAP88', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJBKCNKJ@MAP87@
CONST	SEGMENT
??_C@_05OJBKCNKJ@MAP87@ DB 'MAP87', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PAABBMOI@MAP86@
CONST	SEGMENT
??_C@_05PAABBMOI@MAP86@ DB 'MAP86', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NLCMEPCL@MAP85@
CONST	SEGMENT
??_C@_05NLCMEPCL@MAP85@ DB 'MAP85', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MCDHHOGK@MAP84@
CONST	SEGMENT
??_C@_05MCDHHOGK@MAP84@ DB 'MAP84', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05INHGOIKN@MAP83@
CONST	SEGMENT
??_C@_05INHGOIKN@MAP83@ DB 'MAP83', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JEGNNJOM@MAP82@
CONST	SEGMENT
??_C@_05JEGNNJOM@MAP82@ DB 'MAP82', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LPEAIKCP@MAP81@
CONST	SEGMENT
??_C@_05LPEAIKCP@MAP81@ DB 'MAP81', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KGFLLLGO@MAP80@
CONST	SEGMENT
??_C@_05KGFLLLGO@MAP80@ DB 'MAP80', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HMMFEHBK@MAP79@
CONST	SEGMENT
??_C@_05HMMFEHBK@MAP79@ DB 'MAP79', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFNOHGFL@MAP78@
CONST	SEGMENT
??_C@_05GFNOHGFL@MAP78@ DB 'MAP78', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OCEGGKJE@MAP77@
CONST	SEGMENT
??_C@_05OCEGGKJE@MAP77@ DB 'MAP77', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLFNFLNF@MAP76@
CONST	SEGMENT
??_C@_05PLFNFLNF@MAP76@ DB 'MAP76', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAHAAIBG@MAP75@
CONST	SEGMENT
??_C@_05NAHAAIBG@MAP75@ DB 'MAP75', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MJGLDJFH@MAP74@
CONST	SEGMENT
??_C@_05MJGLDJFH@MAP74@ DB 'MAP74', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGCKKPJA@MAP73@
CONST	SEGMENT
??_C@_05IGCKKPJA@MAP73@ DB 'MAP73', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JPDBJONB@MAP72@
CONST	SEGMENT
??_C@_05JPDBJONB@MAP72@ DB 'MAP72', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LEBMMNBC@MAP71@
CONST	SEGMENT
??_C@_05LEBMMNBC@MAP71@ DB 'MAP71', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNAHPMFD@MAP70@
CONST	SEGMENT
??_C@_05KNAHPMFD@MAP70@ DB 'MAP70', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNAHCNCN@MAP69@
CONST	SEGMENT
??_C@_05HNAHCNCN@MAP69@ DB 'MAP69', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GEBMBMGM@MAP68@
CONST	SEGMENT
??_C@_05GEBMBMGM@MAP68@ DB 'MAP68', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODIEAAKD@MAP67@
CONST	SEGMENT
??_C@_05ODIEAAKD@MAP67@ DB 'MAP67', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKJPDBOC@MAP66@
CONST	SEGMENT
??_C@_05PKJPDBOC@MAP66@ DB 'MAP66', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NBLCGCCB@MAP65@
CONST	SEGMENT
??_C@_05NBLCGCCB@MAP65@ DB 'MAP65', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIKJFDGA@MAP64@
CONST	SEGMENT
??_C@_05MIKJFDGA@MAP64@ DB 'MAP64', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHOIMFKH@MAP63@
CONST	SEGMENT
??_C@_05IHOIMFKH@MAP63@ DB 'MAP63', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JOPDPEOG@MAP62@
CONST	SEGMENT
??_C@_05JOPDPEOG@MAP62@ DB 'MAP62', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LFNOKHCF@MAP61@
CONST	SEGMENT
??_C@_05LFNOKHCF@MAP61@ DB 'MAP61', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KMMFJGGE@MAP60@
CONST	SEGMENT
??_C@_05KMMFJGGE@MAP60@ DB 'MAP60', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPEBJDHE@MAP59@
CONST	SEGMENT
??_C@_05HPEBJDHE@MAP59@ DB 'MAP59', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGFKKCDF@MAP58@
CONST	SEGMENT
??_C@_05GGFKKCDF@MAP58@ DB 'MAP58', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OBMCLOPK@MAP57@
CONST	SEGMENT
??_C@_05OBMCLOPK@MAP57@ DB 'MAP57', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PINJIPLL@MAP56@
CONST	SEGMENT
??_C@_05PINJIPLL@MAP56@ DB 'MAP56', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDPENMHI@MAP55@
CONST	SEGMENT
??_C@_05NDPENMHI@MAP55@ DB 'MAP55', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKOPONDJ@MAP54@
CONST	SEGMENT
??_C@_05MKOPONDJ@MAP54@ DB 'MAP54', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IFKOHLPO@MAP53@
CONST	SEGMENT
??_C@_05IFKOHLPO@MAP53@ DB 'MAP53', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMLFEKLP@MAP52@
CONST	SEGMENT
??_C@_05JMLFEKLP@MAP52@ DB 'MAP52', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHJIBJHM@MAP51@
CONST	SEGMENT
??_C@_05LHJIBJHM@MAP51@ DB 'MAP51', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KOIDCIDN@MAP50@
CONST	SEGMENT
??_C@_05KOIDCIDN@MAP50@ DB 'MAP50', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HOIDPJED@MAP49@
CONST	SEGMENT
??_C@_05HOIDPJED@MAP49@ DB 'MAP49', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GHJIMIAC@MAP48@
CONST	SEGMENT
??_C@_05GHJIMIAC@MAP48@ DB 'MAP48', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OAAANEMN@MAP47@
CONST	SEGMENT
??_C@_05OAAANEMN@MAP47@ DB 'MAP47', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PJBLOFIM@MAP46@
CONST	SEGMENT
??_C@_05PJBLOFIM@MAP46@ DB 'MAP46', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCDGLGEP@MAP45@
CONST	SEGMENT
??_C@_05NCDGLGEP@MAP45@ DB 'MAP45', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLCNIHAO@MAP44@
CONST	SEGMENT
??_C@_05MLCNIHAO@MAP44@ DB 'MAP44', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IEGMBBMJ@MAP43@
CONST	SEGMENT
??_C@_05IEGMBBMJ@MAP43@ DB 'MAP43', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JNHHCAII@MAP42@
CONST	SEGMENT
??_C@_05JNHHCAII@MAP42@ DB 'MAP42', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGFKHDEL@MAP41@
CONST	SEGMENT
??_C@_05LGFKHDEL@MAP41@ DB 'MAP41', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPEBECAK@MAP40@
CONST	SEGMENT
??_C@_05KPEBECAK@MAP40@ DB 'MAP40', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HLMMOPMG@MAP39@
CONST	SEGMENT
??_C@_05HLMMOPMG@MAP39@ DB 'MAP39', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GCNHNOIH@MAP38@
CONST	SEGMENT
??_C@_05GCNHNOIH@MAP38@ DB 'MAP38', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OFEPMCEI@MAP37@
CONST	SEGMENT
??_C@_05OFEPMCEI@MAP37@ DB 'MAP37', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PMFEPDAJ@MAP36@
CONST	SEGMENT
??_C@_05PMFEPDAJ@MAP36@ DB 'MAP36', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NHHJKAMK@MAP35@
CONST	SEGMENT
??_C@_05NHHJKAMK@MAP35@ DB 'MAP35', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MOGCJBIL@MAP34@
CONST	SEGMENT
??_C@_05MOGCJBIL@MAP34@ DB 'MAP34', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IBCDAHEM@MAP33@
CONST	SEGMENT
??_C@_05IBCDAHEM@MAP33@ DB 'MAP33', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JIDIDGAN@MAP32@
CONST	SEGMENT
??_C@_05JIDIDGAN@MAP32@ DB 'MAP32', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LDBFGFMO@MAP31@
CONST	SEGMENT
??_C@_05LDBFGFMO@MAP31@ DB 'MAP31', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKAOFEIP@MAP30@
CONST	SEGMENT
??_C@_05KKAOFEIP@MAP30@ DB 'MAP30', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HKAOIFPB@MAP29@
CONST	SEGMENT
??_C@_05HKAOIFPB@MAP29@ DB 'MAP29', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GDBFLELA@MAP28@
CONST	SEGMENT
??_C@_05GDBFLELA@MAP28@ DB 'MAP28', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OEINKIHP@MAP27@
CONST	SEGMENT
??_C@_05OEINKIHP@MAP27@ DB 'MAP27', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PNJGJJDO@MAP26@
CONST	SEGMENT
??_C@_05PNJGJJDO@MAP26@ DB 'MAP26', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGLLMKPN@MAP25@
CONST	SEGMENT
??_C@_05NGLLMKPN@MAP25@ DB 'MAP25', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPKAPLLM@MAP24@
CONST	SEGMENT
??_C@_05MPKAPLLM@MAP24@ DB 'MAP24', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAOBGNHL@MAP23@
CONST	SEGMENT
??_C@_05IAOBGNHL@MAP23@ DB 'MAP23', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JJPKFMDK@MAP22@
CONST	SEGMENT
??_C@_05JJPKFMDK@MAP22@ DB 'MAP22', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCNHAPPJ@MAP21@
CONST	SEGMENT
??_C@_05LCNHAPPJ@MAP21@ DB 'MAP21', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KLMMDOLI@MAP20@
CONST	SEGMENT
??_C@_05KLMMDOLI@MAP20@ DB 'MAP20', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HIEIDLKI@MAP19@
CONST	SEGMENT
??_C@_05HIEIDLKI@MAP19@ DB 'MAP19', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GBFDAKOJ@MAP18@
CONST	SEGMENT
??_C@_05GBFDAKOJ@MAP18@ DB 'MAP18', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OGMLBGCG@MAP17@
CONST	SEGMENT
??_C@_05OGMLBGCG@MAP17@ DB 'MAP17', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPNACHGH@MAP16@
CONST	SEGMENT
??_C@_05PPNACHGH@MAP16@ DB 'MAP16', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NEPNHEKE@MAP15@
CONST	SEGMENT
??_C@_05NEPNHEKE@MAP15@ DB 'MAP15', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNOGEFOF@MAP14@
CONST	SEGMENT
??_C@_05MNOGEFOF@MAP14@ DB 'MAP14', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ICKHNDCC@MAP13@
CONST	SEGMENT
??_C@_05ICKHNDCC@MAP13@ DB 'MAP13', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLLMOCGD@MAP12@
CONST	SEGMENT
??_C@_05JLLMOCGD@MAP12@ DB 'MAP12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAJBLBKA@MAP11@
CONST	SEGMENT
??_C@_05LAJBLBKA@MAP11@ DB 'MAP11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJIKIAOB@MAP10@
CONST	SEGMENT
??_C@_05KJIKIAOB@MAP10@ DB 'MAP10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HJIKFBJP@MAP09@
CONST	SEGMENT
??_C@_05HJIKFBJP@MAP09@ DB 'MAP09', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GAJBGANO@MAP08@
CONST	SEGMENT
??_C@_05GAJBGANO@MAP08@ DB 'MAP08', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHAJHMBB@MAP07@
CONST	SEGMENT
??_C@_05OHAJHMBB@MAP07@ DB 'MAP07', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05POBCENFA@MAP06@
CONST	SEGMENT
??_C@_05POBCENFA@MAP06@ DB 'MAP06', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFDPBOJD@MAP05@
CONST	SEGMENT
??_C@_05NFDPBOJD@MAP05@ DB 'MAP05', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MMCECPNC@MAP04@
CONST	SEGMENT
??_C@_05MMCECPNC@MAP04@ DB 'MAP04', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDGFLJBF@MAP03@
CONST	SEGMENT
??_C@_05IDGFLJBF@MAP03@ DB 'MAP03', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKHOIIFE@MAP02@
CONST	SEGMENT
??_C@_05JKHOIIFE@MAP02@ DB 'MAP02', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBFDNLJH@MAP01@
CONST	SEGMENT
??_C@_05LBFDNLJH@MAP01@ DB 'MAP01', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DFGKGEIG@?5?5IP?5Address?3@
CONST	SEGMENT
??_C@_0O@DFGKGEIG@?5?5IP?5Address?3@ DB '  IP Address:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEDNBGAL@Connect?5LAN?5Server@
CONST	SEGMENT
??_C@_0BD@IEDNBGAL@Connect?5LAN?5Server@ DB 'Connect LAN Server', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IHKIPJCO@Connect?5Server@
CONST	SEGMENT
??_C@_0P@IHKIPJCO@Connect?5Server@ DB 'Connect Server', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHMFLPNI@Server?5Name@
CONST	SEGMENT
??_C@_0M@EHMFLPNI@Server?5Name@ DB 'Server Name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07POIENIBA@Refresh@
CONST	SEGMENT
??_C@_07POIENIBA@Refresh@ DB 'Refresh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LKOCLJD@Previous?5Page@
CONST	SEGMENT
??_C@_0O@LKOCLJD@Previous?5Page@ DB 'Previous Page', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFHACLA@Next?5Page@
CONST	SEGMENT
??_C@_09EFHACLA@Next?5Page@ DB 'Next Page', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLODDGFF@Sort?5By@
CONST	SEGMENT
??_C@_07FLODDGFF@Sort?5By@ DB 'Sort By', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OGGNGPHP@Room?5Info@
CONST	SEGMENT
??_C@_09OGGNGPHP@Room?5Info@ DB 'Room Info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04ILJDOKOL@Room@
CONST	SEGMENT
??_C@_04ILJDOKOL@Room@ DB 'Room', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ODFJJPJO@chooseroom@
CONST	SEGMENT
??_C@_0L@ODFJJPJO@chooseroom@ DB 'chooseroom', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BMIEDOEC@Offline@
CONST	SEGMENT
??_C@_07BMIEDOEC@Offline@ DB 'Offline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFLEAIKH@serversearch@
CONST	SEGMENT
??_C@_0N@OFLEAIKH@serversearch@ DB 'serversearch', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDBMAAPD@Internet@
CONST	SEGMENT
??_C@_08LDBMAAPD@Internet@ DB 'Internet', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFNCDOEF@Local?5Lan@
CONST	SEGMENT
??_C@_09LFNCDOEF@Local?5Lan@ DB 'Local Lan', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@COGJHEJP@serversort@
CONST	SEGMENT
??_C@_0L@COGJHEJP@serversort@ DB 'serversort', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FLACMINN@Gametype@
CONST	SEGMENT
??_C@_08FLACMINN@Gametype@ DB 'Gametype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLBIDKLK@Players@
CONST	SEGMENT
??_C@_07OLBIDKLK@Players@ DB 'Players', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPBFGEOK@Ping@
CONST	SEGMENT
??_C@_04CPBFGEOK@Ping@ DB 'Ping', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNAOEDOE@Single?5Player@
CONST	SEGMENT
??_C@_0O@NNAOEDOE@Single?5Player@ DB 'Single Player', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BALKBPO@End?5Game@
CONST	SEGMENT
??_C@_08BALKBPO@End?5Game@ DB 'End Game', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOODANMK@Statistics@
CONST	SEGMENT
??_C@_0L@HOODANMK@Statistics@ DB 'Statistics', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKMKPJEF@Time?5Attack@
CONST	SEGMENT
??_C@_0M@GKMKPJEF@Time?5Attack@ DB 'Time Attack', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BKMPBHO@Start?5Game@
CONST	SEGMENT
??_C@_0L@BKMPBHO@Start?5Game@ DB 'Start Game', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOKMKBJN@NEXT@
CONST	SEGMENT
??_C@_04MOKMKBJN@NEXT@ DB 'NEXT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FLHCOFGJ@quit?5?5game@
CONST	SEGMENT
??_C@_0L@FLHCOFGJ@quit?5?5game@ DB 'quit  game', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FOPBDDAL@options@
CONST	SEGMENT
??_C@_07FOPBDDAL@options@ DB 'options', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GGLMNLCO@multiplayer@
CONST	SEGMENT
??_C@_0M@GGLMNLCO@multiplayer@ DB 'multiplayer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLOEOBMI@1?5player@
CONST	SEGMENT
??_C@_08KLOEOBMI@1?5player@ DB '1 player', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHOMPGHE@secrets@
CONST	SEGMENT
??_C@_07DHOMPGHE@secrets@ DB 'secrets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LCLAJJB@Switch?5Map?4?4?4@
CONST	SEGMENT
??_C@_0O@LCLAJJB@Switch?5Map?4?4?4@ DB 'Switch Map...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MMGGHMED@Switch?5Team?4?4?4@
CONST	SEGMENT
??_C@_0P@MMGGHMED@Switch?5Team?4?4?4@ DB 'Switch Team...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NOEOEENA@Spectate?4?4?4@
CONST	SEGMENT
??_C@_0M@NOEOEENA@Spectate?4?4?4@ DB 'Spectate...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKGLIILD@Scramble?5Teams?4?4?4@
CONST	SEGMENT
??_C@_0BC@JKGLIILD@Scramble?5Teams?4?4?4@ DB 'Scramble Teams...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@JOHOLOFN@You?5are?5already?5playing?4?6Do?5you@
CONST	SEGMENT
??_C@_0EF@JOHOLOFN@You?5are?5already?5playing?4?6Do?5you@ DB 'You are alr'
	DB	'eady playing.', 0aH, 'Do you wish to end the', 0aH, 'current '
	DB	'game? (Y/N)', 0aH, 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_PlayerMenu DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05MBFAGOBK@SONIC@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05LCLLAIMA@TAILS@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08JICBNHOH@KNUCKLES@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07MFIPBJAI@PLAYER4@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07NMJECIEJ@PLAYER5@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07PHLJHLIK@PLAYER6@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07OOKCEKML@PLAYER7@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07GJDKFGAE@PLAYER8@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07HACBGHEF@PLAYER9@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08NHJDPDDD@PLAYER10@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08MOIIMCHC@PLAYER11@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08OFKFJBLB@PLAYER12@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08PMLOKAPA@PLAYER13@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08LDPPDGDH@PLAYER14@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08KKOEAHHG@PLAYER15@
	DD	FLAT:_M_ChoosePlayer
	DB	00H
	ORG $+3
_currentMenu DD	FLAT:_MainDef
_MainDef DD	00H
	DD	00H
	DW	09H
	ORG $+2
	DD	00H
	DD	FLAT:_MainMenu
	DD	FLAT:_M_DrawCenteredMenu
	DW	0a0H
	DW	048H
	DW	00H
	ORG $+2
	DD	00H
_SinglePlayerDef DD 00H
	DD	FLAT:??_C@_0O@NNAOEDOE@Single?5Player@
	DW	04H
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_SinglePlayerMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	082H
	DW	048H
	DW	00H
	ORG $+2
	DD	00H
_MultiPlayerDef DD FLAT:??_C@_07CFCBKCFI@M_MULTI@
	DD	FLAT:??_C@_0M@HOINAANG@Multiplayer@
	DW	09H
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_MultiPlayerMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	055H
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_SetupMultiPlayerDef DD FLAT:??_C@_07OLGAJEJN@M_PICKP@
	DD	FLAT:??_C@_0M@HOINAANG@Multiplayer@
	DW	05H
	ORG $+2
	DD	FLAT:_MultiPlayerDef
	DD	FLAT:_SetupMultiPlayerMenu
	DD	FLAT:_M_DrawSetupMultiPlayerMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	FLAT:_M_QuitMultiPlayerMenu
_OptionsDef DD	FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	06H
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_OptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_VidModeDef DD	FLAT:??_C@_07GHCKGMKN@M_VIDEO@
	DD	FLAT:??_C@_0L@FOCFLGDA@Video?5Mode@
	DW	01H
	ORG $+2
	DD	FLAT:_VideoOptionsDef
	DD	FLAT:_VideoModeMenu
	DD	FLAT:_M_DrawVideoMode
	DW	030H
	DW	024H
	DW	00H
	ORG $+2
	DD	00H
_ControlDef DD	FLAT:??_C@_08IKLFOOPP@M_CONTRO@
	DD	FLAT:??_C@_0P@MIALJLPD@Setup?5Controls@
	DW	012H
	ORG $+2
	DD	FLAT:_ControlsDef
	DD	FLAT:_ControlMenu
	DD	FLAT:_M_DrawControl
	DW	018H
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_SoundDef DD	FLAT:??_C@_06MEIKBIL@M_SVOL@
	DD	FLAT:??_C@_0N@EHKOAFEG@Sound?5Volume@
	DW	06H
	ORG $+2
	DD	FLAT:_OptionsDef
	DD	FLAT:_SoundMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_ReadDef2 DD	00H
	DD	00H
	DW	01H
	ORG $+2
	DD	00H
	DD	FLAT:_ReadMenu2
	DD	FLAT:_M_DrawReadThis2
	DW	014aH
	DW	0afH
	DW	00H
	ORG $+2
	DD	00H
_ReadDef1 DD	00H
	DD	00H
	DW	01H
	ORG $+2
	DD	00H
	DD	FLAT:_ReadMenu1
	DD	FLAT:_M_DrawReadThis1
	DW	014aH
	DW	0a5H
	DW	00H
	ORG $+2
	DD	00H
_LoadDef DD	FLAT:??_C@_07OOODBAAL@M_PICKG@
	DD	FLAT:??_C@_09EOPBCAJJ@Load?5Game@
	DW	06H
	ORG $+2
	DD	FLAT:_SinglePlayerDef
	DD	FLAT:_LoadGameMenu
	DD	FLAT:_M_DrawLoad
	DW	050H
	DW	036H
	DW	00H
	ORG $+2
	DD	00H
_ControlDef2 DD	FLAT:??_C@_08IKLFOOPP@M_CONTRO@
	DD	FLAT:??_C@_0P@MIALJLPD@Setup?5Controls@
	DW	012H
	ORG $+2
	DD	FLAT:_ControlsDef
	DD	FLAT:_ControlMenu2
	DD	FLAT:_M_DrawControl
	DW	018H
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_GameOptionDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	06H
	ORG $+2
	DD	FLAT:_OptionsDef
	DD	FLAT:_GameOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_NetOptionDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	0cH
	ORG $+2
	DD	FLAT:_MultiPlayerDef
	DD	FLAT:_NetOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	01eH
	DW	00H
	ORG $+2
	DD	00H
_MonitorToggleDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	0cH
	ORG $+2
	DD	FLAT:_NetOptionDef
	DD	FLAT:_MonitorToggleMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_SecretsDef DD	FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	0aH
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_SecretsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_CustomSecretsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	010H
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_CustomSecretsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_VideoOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	07H
	ORG $+2
	DD	FLAT:_OptionsDef
	DD	FLAT:_VideoOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_MouseOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	06H
	ORG $+2
	DD	FLAT:_OptionsDef
	DD	FLAT:_MouseOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_ServerOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	07H
	ORG $+2
	DD	FLAT:_OptionsDef
	DD	FLAT:_ServerOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	01cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_RewardDef DD	FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	05H
	ORG $+2
	DD	FLAT:_SecretsDef
	DD	FLAT:_RewardMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_LevelSelectDef DD 00H
	DD	FLAT:??_C@_0N@BOMJPEGC@Level?5Select@
	DW	02H
	ORG $+2
	DD	FLAT:_SecretsDef
	DD	FLAT:_LevelSelectMenu
	DD	FLAT:_M_DrawLevelSelectMenu
	DW	028H
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_JoystickDef DD	FLAT:??_C@_08IKLFOOPP@M_CONTRO@
	DD	FLAT:??_C@_0P@PILIMKEI@Setup?5Joystick@
	DW	010H
	ORG $+2
	DD	FLAT:_ControlsDef
	DD	FLAT:_JoystickMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	032H
	DW	014H
	DW	01H
	ORG $+2
	DD	00H
_TimeAttackDef DD 00H
	DD	FLAT:??_C@_0M@GKMKPJEF@Time?5Attack@
	DW	05H
	ORG $+2
	DD	FLAT:_SinglePlayerDef
	DD	FLAT:_TimeAttackMenu
	DD	FLAT:_M_DrawTimeAttackMenu
	DW	028H
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_StatsDef DD	00H
	DD	00H
	DW	01H
	ORG $+2
	DD	FLAT:_SinglePlayerDef
	DD	FLAT:_StatsMenu
	DD	FLAT:_M_DrawStats
	DW	0118H
	DW	0b9H
	DW	00H
	ORG $+2
	DD	00H
_Stats2Def DD	00H
	DD	00H
	DW	01H
	ORG $+2
	DD	FLAT:_SinglePlayerDef
	DD	FLAT:_Stats2Menu
	DD	FLAT:_M_DrawStats2
	DW	0118H
	DW	0b9H
	DW	00H
	ORG $+2
	DD	00H
_Stats3Def DD	00H
	DD	00H
	DW	01H
	ORG $+2
	DD	FLAT:_SinglePlayerDef
	DD	FLAT:_Stats3Menu
	DD	FLAT:_M_DrawStats3
	DW	0118H
	DW	0b9H
	DW	00H
	ORG $+2
	DD	00H
_Stats4Def DD	00H
	DD	00H
	DW	01H
	ORG $+2
	DD	FLAT:_SinglePlayerDef
	DD	FLAT:_Stats4Menu
	DD	FLAT:_M_DrawStats4
	DW	0118H
	DW	0b9H
	DW	00H
	ORG $+2
	DD	00H
_PlayerDef DD	FLAT:??_C@_07OLGAJEJN@M_PICKP@
	DD	FLAT:??_C@_0BG@LOEPDJFL@Choose?5Your?5Character@
	DW	0fH
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_PlayerMenu
	DD	FLAT:_M_DrawSetupChoosePlayerMenu
	DW	018H
	DW	010H
	DW	00H
	ORG $+2
	DD	FLAT:_M_QuitChoosePlayerMenu
_CoopOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	01H
	ORG $+2
	DD	FLAT:_GametypeOptionsDef
	DD	FLAT:_CoopOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_RaceOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	03H
	ORG $+2
	DD	FLAT:_GametypeOptionsDef
	DD	FLAT:_RaceOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_MatchOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	03H
	ORG $+2
	DD	FLAT:_GametypeOptionsDef
	DD	FLAT:_MatchOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_TagOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	01H
	ORG $+2
	DD	FLAT:_GametypeOptionsDef
	DD	FLAT:_TagOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_CTFOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	04H
	ORG $+2
	DD	FLAT:_GametypeOptionsDef
	DD	FLAT:_CTFOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_OGL_FogDef DD	FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	04H
	ORG $+2
	DD	FLAT:_OpenGLOptionDef
	DD	FLAT:_OGL_FogMenu
	DD	FLAT:_M_OGL_DrawFogMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_OGL_ColorDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	03H
	ORG $+2
	DD	FLAT:_OpenGLOptionDef
	DD	FLAT:_OGL_ColorMenu
	DD	FLAT:_M_OGL_DrawColorMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_description DB	'             Fastest', 0aH, '                 Speed Thok'
	DB	0aH, '             Not a good pick', 0aH, 'for starters, but w'
	DB	'hen', 0aH, 'controlled properly,', 0aH, 'Sonic is the most', 0aH
	DB	'powerful of the three.', 00H
	ORG $+92
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	'SONIC', 00H
	ORG $+10
	DB	'             Slowest', 0aH, '                 Fly/Swim', 0aH
	DB	'             Good for', 0aH, 'beginners. Tails', 0aH, 'handle'
	DB	's the best. His', 0aH, 'flying and swimming', 0aH, 'will come'
	DB	' in handy.', 00H
	ORG $+107
	DB	'TAILCHAR', 00H
	DB	00H
	ORG $+63
	DB	'TAILS', 00H
	ORG $+10
	DB	'             Medium', 0aH, '                 Glide/Climb'
	DB	0aH, '             A well rounded', 0aH, 'choice, Knuckles', 0aH
	DB	'compromises the speed', 0aH, 'of Sonic with the', 0aH, 'handl'
	DB	'ing of Tails.', 00H
	ORG $+102
	DB	'KNUXCHAR', 00H
	DB	00H
	ORG $+63
	DB	'KNUCKLES', 00H
	ORG $+7
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
	DB	'             Unknown', 0aH, '                 Unknown', 0aH
	DB	'             None', 00H
	ORG $+191
	DB	'SONCCHAR', 00H
	DB	00H
	ORG $+63
	DB	00H
	ORG $+15
_cv_newgametype DD FLAT:??_C@_0M@LAFKIDDC@newgametype@
	DD	FLAT:??_C@_04CJHPDIMF@Coop@
	DD	0402H
	DD	FLAT:_gametype_cons_t
	DD	FLAT:_Newgametype_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_nextmap DD	FLAT:??_C@_07MCHHMPMB@nextmap@
	DD	FLAT:??_C@_05LBFDNLJH@MAP01@
	DD	0402H
	DD	FLAT:_map_cons_t
	DD	FLAT:_Nextmap_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_chooseskin DD FLAT:??_C@_0L@HOPLAOAI@chooseskin@
	DD	FLAT:??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
	DD	0402H
	DD	FLAT:_skins_cons_t
	DD	FLAT:_Nextmap_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_serversort DD FLAT:??_C@_0L@COGJHEJP@serversort@
	DD	FLAT:??_C@_04CPBFGEOK@Ping@
	DD	0402H
	DD	FLAT:_serversort_cons_t
	DD	FLAT:_M_SortServerList
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_chooseroom DD FLAT:??_C@_0L@ODFJJPJO@chooseroom@
	DD	FLAT:??_C@_07BMIEDOEC@Offline@
	DD	0402H
	DD	FLAT:_rooms_cons_t
	DD	FLAT:_M_Chooseroom_Onchange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_gametype_cons_t DD 00H
	DD	FLAT:??_C@_04CJHPDIMF@Coop@
	DD	01H
	DD	FLAT:??_C@_05FKEBLKAO@Match@
	DD	02aH
	DD	FLAT:??_C@_0L@LAOGNCMC@Team?5Match@
	DD	02H
	DD	FLAT:??_C@_04KKIPOOLE@Race@
	DD	02bH
	DD	FLAT:??_C@_0N@HJJKODGK@Classic?5Race@
	DD	03H
	DD	FLAT:??_C@_03PJHNOEGB@Tag@
	DD	02cH
	DD	FLAT:??_C@_0O@NNDKJCLH@Hide?5and?5Seek@
	DD	04H
	DD	FLAT:??_C@_03JKIMLJNP@CTF@
	DD	00H
	DD	00H
_MainMenu DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@JKGLIILD@Scramble?5Teams?4?4?4@
	DD	FLAT:_M_TeamScramble
	DB	038H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@NOEOEENA@Spectate?4?4?4@
	DD	FLAT:_M_ConfirmSpectate
	DB	040H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@MMGGHMED@Switch?5Team?4?4?4@
	DD	FLAT:_M_TeamChange
	DB	040H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@LCLAJJB@Switch?5Map?4?4?4@
	DD	FLAT:_M_MapChange
	DB	048H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07DHOMPGHE@secrets@
	DD	FLAT:_M_SecretsMenu
	DB	054H
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08KLOEOBMI@1?5player@
	DD	FLAT:_SinglePlayerDef
	DB	05cH
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@GGLMNLCO@multiplayer@
	DD	FLAT:_MultiPlayerDef
	DB	064H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07FOPBDDAL@options@
	DD	FLAT:_M_OptionsMenu
	DB	06cH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@FLHCOFGJ@quit?5?5game@
	DD	FLAT:_M_QuitSRB2
	DB	074H
	ORG $+3
_Stats5Menu DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04MOKMKBJN@NEXT@
	DD	FLAT:_StatsDef
	DB	0c0H
	ORG $+3
_Stats5Def DD	00H
	DD	00H
	DW	01H
	ORG $+2
	DD	FLAT:_SinglePlayerDef
	DD	FLAT:_Stats5Menu
	DD	FLAT:_M_DrawStats5
	DW	0118H
	DW	0b9H
	DW	00H
	ORG $+2
	DD	00H
_Stats4Menu DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04MOKMKBJN@NEXT@
	DD	FLAT:_Stats5Def
	DB	0c0H
	ORG $+3
_Stats3Menu DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04MOKMKBJN@NEXT@
	DD	FLAT:_M_Stats4
	DB	0c0H
	ORG $+3
_Stats2Menu DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04MOKMKBJN@NEXT@
	DD	FLAT:_M_Stats3
	DB	0c0H
	ORG $+3
_StatsMenu DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04MOKMKBJN@NEXT@
	DD	FLAT:_M_Stats2
	DB	0c0H
	ORG $+3
	ORG $+4
_SinglePlayerMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@BKMPBHO@Start?5Game@
	DD	FLAT:_M_LoadGame
	DB	05cH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@GKMKPJEF@Time?5Attack@
	DD	FLAT:_M_TimeAttack
	DB	064H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@HOODANMK@Statistics@
	DD	FLAT:_M_Statistics
	DB	06cH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08BALKBPO@End?5Game@
	DD	FLAT:_M_EndGame
	DB	074H
	ORG $+3
_serversort_cons_t DD 00H
	DD	FLAT:??_C@_04CPBFGEOK@Ping@
	DD	01H
	DD	FLAT:??_C@_07OLBIDKLK@Players@
	DD	02H
	DD	FLAT:??_C@_08FLACMINN@Gametype@
	DD	00H
	DD	00H
_serversearch_cons_t DD 00H
	DD	FLAT:??_C@_09LFNCDOEF@Local?5Lan@
	DD	01H
	DD	FLAT:??_C@_08LDBMAAPD@Internet@
	DD	00H
	DD	00H
_rooms_cons_t DD 01H
	DD	FLAT:??_C@_07BMIEDOEC@Offline@
	ORG $+256
_ConnectMenu DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04ILJDOKOL@Room@
	DD	FLAT:_cv_chooseroom
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09OGGNGPHP@Room?5Info@
	DD	FLAT:_M_RoomInfoMenu
	DB	00H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07FLODDGFF@Sort?5By@
	DD	FLAT:_cv_serversort
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09EFHACLA@Next?5Page@
	DD	FLAT:_M_NextServerPage
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@LKOCLJD@Previous?5Page@
	DD	FLAT:_M_PrevServerPage
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07POIENIBA@Refresh@
	DD	FLAT:_M_Refresh
	DB	00H
	ORG $+3
	DW	03aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@EHMFLPNI@Server?5Name@
	DD	00H
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
_ConnectLANMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07FLODDGFF@Sort?5By@
	DD	FLAT:_cv_serversort
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09EFHACLA@Next?5Page@
	DD	FLAT:_M_NextServerPage
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@LKOCLJD@Previous?5Page@
	DD	FLAT:_M_PrevServerPage
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07POIENIBA@Refresh@
	DD	FLAT:_M_Refresh
	DB	00H
	ORG $+3
	DW	03aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@EHMFLPNI@Server?5Name@
	DD	00H
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
	DW	02aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_Connect
	DB	00H
	ORG $+3
_Connectdef DD	00H
	DD	FLAT:??_C@_0P@IHKIPJCO@Connect?5Server@
	DW	014H
	ORG $+2
	DD	FLAT:_MultiPlayerDef
	DD	FLAT:_ConnectMenu
	DD	FLAT:_M_DrawConnectMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	FLAT:_M_CancelConnect
_ConnectLANdef DD 00H
	DD	FLAT:??_C@_0BD@IEDNBGAL@Connect?5LAN?5Server@
	DW	012H
	ORG $+2
	DD	FLAT:_MultiPlayerDef
	DD	FLAT:_ConnectLANMenu
	DD	FLAT:_M_DrawConnectLANMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	FLAT:_M_CancelConnect
_ConnectIPMenu DW 024H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@DFGKGEIG@?5?5IP?5Address?3@
	DD	FLAT:_M_HandleConnectIP
	DB	00H
	ORG $+3
_RoomInfoMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04ILJDOKOL@Room@
	DD	FLAT:_cv_chooseroom
	DB	00H
	ORG $+3
_ConnectIPdef DD 00H
	DD	FLAT:??_C@_0P@IHKIPJCO@Connect?5Server@
	DW	01H
	ORG $+2
	DD	FLAT:_MultiPlayerDef
	DD	FLAT:_ConnectIPMenu
	DD	FLAT:_M_DrawConnectIPMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	FLAT:_M_CancelConnect
_RoomInfodef DD	00H
	DD	FLAT:??_C@_09OGGNGPHP@Room?5Info@
	DW	01H
	ORG $+2
	DD	FLAT:_Connectdef
	DD	FLAT:_RoomInfoMenu
	DD	FLAT:_M_DrawRoomInfoMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_map_cons_t DD	01H
	DD	FLAT:??_C@_05LBFDNLJH@MAP01@
	DD	02H
	DD	FLAT:??_C@_05JKHOIIFE@MAP02@
	DD	03H
	DD	FLAT:??_C@_05IDGFLJBF@MAP03@
	DD	04H
	DD	FLAT:??_C@_05MMCECPNC@MAP04@
	DD	05H
	DD	FLAT:??_C@_05NFDPBOJD@MAP05@
	DD	06H
	DD	FLAT:??_C@_05POBCENFA@MAP06@
	DD	07H
	DD	FLAT:??_C@_05OHAJHMBB@MAP07@
	DD	08H
	DD	FLAT:??_C@_05GAJBGANO@MAP08@
	DD	09H
	DD	FLAT:??_C@_05HJIKFBJP@MAP09@
	DD	0aH
	DD	FLAT:??_C@_05KJIKIAOB@MAP10@
	DD	0bH
	DD	FLAT:??_C@_05LAJBLBKA@MAP11@
	DD	0cH
	DD	FLAT:??_C@_05JLLMOCGD@MAP12@
	DD	0dH
	DD	FLAT:??_C@_05ICKHNDCC@MAP13@
	DD	0eH
	DD	FLAT:??_C@_05MNOGEFOF@MAP14@
	DD	0fH
	DD	FLAT:??_C@_05NEPNHEKE@MAP15@
	DD	010H
	DD	FLAT:??_C@_05PPNACHGH@MAP16@
	DD	011H
	DD	FLAT:??_C@_05OGMLBGCG@MAP17@
	DD	012H
	DD	FLAT:??_C@_05GBFDAKOJ@MAP18@
	DD	013H
	DD	FLAT:??_C@_05HIEIDLKI@MAP19@
	DD	014H
	DD	FLAT:??_C@_05KLMMDOLI@MAP20@
	DD	015H
	DD	FLAT:??_C@_05LCNHAPPJ@MAP21@
	DD	016H
	DD	FLAT:??_C@_05JJPKFMDK@MAP22@
	DD	017H
	DD	FLAT:??_C@_05IAOBGNHL@MAP23@
	DD	018H
	DD	FLAT:??_C@_05MPKAPLLM@MAP24@
	DD	019H
	DD	FLAT:??_C@_05NGLLMKPN@MAP25@
	DD	01aH
	DD	FLAT:??_C@_05PNJGJJDO@MAP26@
	DD	01bH
	DD	FLAT:??_C@_05OEINKIHP@MAP27@
	DD	01cH
	DD	FLAT:??_C@_05GDBFLELA@MAP28@
	DD	01dH
	DD	FLAT:??_C@_05HKAOIFPB@MAP29@
	DD	01eH
	DD	FLAT:??_C@_05KKAOFEIP@MAP30@
	DD	01fH
	DD	FLAT:??_C@_05LDBFGFMO@MAP31@
	DD	020H
	DD	FLAT:??_C@_05JIDIDGAN@MAP32@
	DD	021H
	DD	FLAT:??_C@_05IBCDAHEM@MAP33@
	DD	022H
	DD	FLAT:??_C@_05MOGCJBIL@MAP34@
	DD	023H
	DD	FLAT:??_C@_05NHHJKAMK@MAP35@
	DD	024H
	DD	FLAT:??_C@_05PMFEPDAJ@MAP36@
	DD	025H
	DD	FLAT:??_C@_05OFEPMCEI@MAP37@
	DD	026H
	DD	FLAT:??_C@_05GCNHNOIH@MAP38@
	DD	027H
	DD	FLAT:??_C@_05HLMMOPMG@MAP39@
	DD	028H
	DD	FLAT:??_C@_05KPEBECAK@MAP40@
	DD	029H
	DD	FLAT:??_C@_05LGFKHDEL@MAP41@
	DD	02aH
	DD	FLAT:??_C@_05JNHHCAII@MAP42@
	DD	02bH
	DD	FLAT:??_C@_05IEGMBBMJ@MAP43@
	DD	02cH
	DD	FLAT:??_C@_05MLCNIHAO@MAP44@
	DD	02dH
	DD	FLAT:??_C@_05NCDGLGEP@MAP45@
	DD	02eH
	DD	FLAT:??_C@_05PJBLOFIM@MAP46@
	DD	02fH
	DD	FLAT:??_C@_05OAAANEMN@MAP47@
	DD	030H
	DD	FLAT:??_C@_05GHJIMIAC@MAP48@
	DD	031H
	DD	FLAT:??_C@_05HOIDPJED@MAP49@
	DD	032H
	DD	FLAT:??_C@_05KOIDCIDN@MAP50@
	DD	033H
	DD	FLAT:??_C@_05LHJIBJHM@MAP51@
	DD	034H
	DD	FLAT:??_C@_05JMLFEKLP@MAP52@
	DD	035H
	DD	FLAT:??_C@_05IFKOHLPO@MAP53@
	DD	036H
	DD	FLAT:??_C@_05MKOPONDJ@MAP54@
	DD	037H
	DD	FLAT:??_C@_05NDPENMHI@MAP55@
	DD	038H
	DD	FLAT:??_C@_05PINJIPLL@MAP56@
	DD	039H
	DD	FLAT:??_C@_05OBMCLOPK@MAP57@
	DD	03aH
	DD	FLAT:??_C@_05GGFKKCDF@MAP58@
	DD	03bH
	DD	FLAT:??_C@_05HPEBJDHE@MAP59@
	DD	03cH
	DD	FLAT:??_C@_05KMMFJGGE@MAP60@
	DD	03dH
	DD	FLAT:??_C@_05LFNOKHCF@MAP61@
	DD	03eH
	DD	FLAT:??_C@_05JOPDPEOG@MAP62@
	DD	03fH
	DD	FLAT:??_C@_05IHOIMFKH@MAP63@
	DD	040H
	DD	FLAT:??_C@_05MIKJFDGA@MAP64@
	DD	041H
	DD	FLAT:??_C@_05NBLCGCCB@MAP65@
	DD	042H
	DD	FLAT:??_C@_05PKJPDBOC@MAP66@
	DD	043H
	DD	FLAT:??_C@_05ODIEAAKD@MAP67@
	DD	044H
	DD	FLAT:??_C@_05GEBMBMGM@MAP68@
	DD	045H
	DD	FLAT:??_C@_05HNAHCNCN@MAP69@
	DD	046H
	DD	FLAT:??_C@_05KNAHPMFD@MAP70@
	DD	047H
	DD	FLAT:??_C@_05LEBMMNBC@MAP71@
	DD	048H
	DD	FLAT:??_C@_05JPDBJONB@MAP72@
	DD	049H
	DD	FLAT:??_C@_05IGCKKPJA@MAP73@
	DD	04aH
	DD	FLAT:??_C@_05MJGLDJFH@MAP74@
	DD	04bH
	DD	FLAT:??_C@_05NAHAAIBG@MAP75@
	DD	04cH
	DD	FLAT:??_C@_05PLFNFLNF@MAP76@
	DD	04dH
	DD	FLAT:??_C@_05OCEGGKJE@MAP77@
	DD	04eH
	DD	FLAT:??_C@_05GFNOHGFL@MAP78@
	DD	04fH
	DD	FLAT:??_C@_05HMMFEHBK@MAP79@
	DD	050H
	DD	FLAT:??_C@_05KGFLLLGO@MAP80@
	DD	051H
	DD	FLAT:??_C@_05LPEAIKCP@MAP81@
	DD	052H
	DD	FLAT:??_C@_05JEGNNJOM@MAP82@
	DD	053H
	DD	FLAT:??_C@_05INHGOIKN@MAP83@
	DD	054H
	DD	FLAT:??_C@_05MCDHHOGK@MAP84@
	DD	055H
	DD	FLAT:??_C@_05NLCMEPCL@MAP85@
	DD	056H
	DD	FLAT:??_C@_05PAABBMOI@MAP86@
	DD	057H
	DD	FLAT:??_C@_05OJBKCNKJ@MAP87@
	DD	058H
	DD	FLAT:??_C@_05GOICDBGG@MAP88@
	DD	059H
	DD	FLAT:??_C@_05HHJJAACH@MAP89@
	DD	05aH
	DD	FLAT:??_C@_05KHJJNBFJ@MAP90@
	DD	05bH
	DD	FLAT:??_C@_05LOICOABI@MAP91@
	DD	05cH
	DD	FLAT:??_C@_05JFKPLDNL@MAP92@
	DD	05dH
	DD	FLAT:??_C@_05IMLEICJK@MAP93@
	DD	05eH
	DD	FLAT:??_C@_05MDPFBEFN@MAP94@
	DD	05fH
	DD	FLAT:??_C@_05NKOOCFBM@MAP95@
	DD	060H
	DD	FLAT:??_C@_05PBMDHGNP@MAP96@
	DD	061H
	DD	FLAT:??_C@_05OINIEHJO@MAP97@
	DD	062H
	DD	FLAT:??_C@_05GPEAFLFB@MAP98@
	DD	063H
	DD	FLAT:??_C@_05HGFLGKBA@MAP99@
	DD	064H
	DD	FLAT:??_C@_06IOCGOJN@MAP100@
	DD	065H
	DD	FLAT:??_C@_06BBPJFPNM@MAP101@
	DD	066H
	DD	FLAT:??_C@_06DKNEAMBP@MAP102@
	DD	067H
	DD	FLAT:??_C@_06CDMPDNFO@MAP103@
	DD	068H
	DD	FLAT:??_C@_06GMIOKLJJ@MAP104@
	DD	069H
	DD	FLAT:??_C@_06HFJFJKNI@MAP105@
	DD	06aH
	DD	FLAT:??_C@_06FOLIMJBL@MAP106@
	DD	06bH
	DD	FLAT:??_C@_06EHKDPIFK@MAP107@
	DD	06cH
	DD	FLAT:??_C@_06MADLOEJF@MAP108@
	DD	06dH
	DD	FLAT:??_C@_06NJCANFNE@MAP109@
	DD	06eH
	DD	FLAT:??_C@_06JCAAEKK@MAP110@
	DD	06fH
	DD	FLAT:??_C@_06BADLDFOL@MAP111@
	DD	070H
	DD	FLAT:??_C@_06DLBGGGCI@MAP112@
	DD	071H
	DD	FLAT:??_C@_06CCANFHGJ@MAP113@
	DD	072H
	DD	FLAT:??_C@_06GNEMMBKO@MAP114@
	DD	073H
	DD	FLAT:??_C@_06HEFHPAOP@MAP115@
	DD	074H
	DD	FLAT:??_C@_06FPHKKDCM@MAP116@
	DD	075H
	DD	FLAT:??_C@_06EGGBJCGN@MAP117@
	DD	076H
	DD	FLAT:??_C@_06MBPJIOKC@MAP118@
	DD	077H
	DD	FLAT:??_C@_06NIOCLPOD@MAP119@
	DD	078H
	DD	FLAT:??_C@_06LGGLKPD@MAP120@
	DD	079H
	DD	FLAT:??_C@_06BCHNILLC@MAP121@
	DD	07aH
	DD	FLAT:??_C@_06DJFANIHB@MAP122@
	DD	07bH
	DD	FLAT:??_C@_06CAELOJDA@MAP123@
	DD	07cH
	DD	FLAT:??_C@_06GPAKHPPH@MAP124@
	DD	07dH
	DD	FLAT:??_C@_06HGBBEOLG@MAP125@
	DD	07eH
	DD	FLAT:??_C@_06FNDMBNHF@MAP126@
	DD	07fH
	DD	FLAT:??_C@_06EECHCMDE@MAP127@
	DD	080H
	DD	FLAT:??_C@_06MDLPDAPL@MAP128@
	DD	081H
	DD	FLAT:??_C@_06NKKEABLK@MAP129@
	DD	082H
	DD	FLAT:??_C@_06KKENAME@MAP130@
	DD	083H
	DD	FLAT:??_C@_06BDLPOBIF@MAP131@
	DD	084H
	DD	FLAT:??_C@_06DIJCLCEG@MAP132@
	DD	085H
	DD	FLAT:??_C@_06CBIJIDAH@MAP133@
	DD	086H
	DD	FLAT:??_C@_06GOMIBFMA@MAP134@
	DD	087H
	DD	FLAT:??_C@_06HHNDCEIB@MAP135@
	DD	088H
	DD	FLAT:??_C@_06FMPOHHEC@MAP136@
	DD	089H
	DD	FLAT:??_C@_06EFOFEGAD@MAP137@
	DD	08aH
	DD	FLAT:??_C@_06MCHNFKMM@MAP138@
	DD	08bH
	DD	FLAT:??_C@_06NLGGGLIN@MAP139@
	DD	08cH
	DD	FLAT:??_C@_06POLMGEB@MAP140@
	DD	08dH
	DD	FLAT:??_C@_06BGPAPHAA@MAP141@
	DD	08eH
	DD	FLAT:??_C@_06DNNNKEMD@MAP142@
	DD	08fH
	DD	FLAT:??_C@_06CEMGJFIC@MAP143@
	DD	090H
	DD	FLAT:??_C@_06GLIHADEF@MAP144@
	DD	091H
	DD	FLAT:??_C@_06HCJMDCAE@MAP145@
	DD	092H
	DD	FLAT:??_C@_06FJLBGBMH@MAP146@
	DD	093H
	DD	FLAT:??_C@_06EAKKFAIG@MAP147@
	DD	094H
	DD	FLAT:??_C@_06MHDCEMEJ@MAP148@
	DD	095H
	DD	FLAT:??_C@_06NOCJHNAI@MAP149@
	DD	096H
	DD	FLAT:??_C@_06OCJKMHG@MAP150@
	DD	097H
	DD	FLAT:??_C@_06BHDCJNDH@MAP151@
	DD	098H
	DD	FLAT:??_C@_06DMBPMOPE@MAP152@
	DD	099H
	DD	FLAT:??_C@_06CFAEPPLF@MAP153@
	DD	09aH
	DD	FLAT:??_C@_06GKEFGJHC@MAP154@
	DD	09bH
	DD	FLAT:??_C@_06HDFOFIDD@MAP155@
	DD	09cH
	DD	FLAT:??_C@_06FIHDALPA@MAP156@
	DD	09dH
	DD	FLAT:??_C@_06EBGIDKLB@MAP157@
	DD	09eH
	DD	FLAT:??_C@_06MGPACGHO@MAP158@
	DD	09fH
	DD	FLAT:??_C@_06NPOLBHDP@MAP159@
	DD	0a0H
	DD	FLAT:??_C@_06MGPBCCP@MAP160@
	DD	0a1H
	DD	FLAT:??_C@_06BFHECDGO@MAP161@
	DD	0a2H
	DD	FLAT:??_C@_06DOFJHAKN@MAP162@
	DD	0a3H
	DD	FLAT:??_C@_06CHECEBOM@MAP163@
	DD	0a4H
	DD	FLAT:??_C@_06GIADNHCL@MAP164@
	DD	0a5H
	DD	FLAT:??_C@_06HBBIOGGK@MAP165@
	DD	0a6H
	DD	FLAT:??_C@_06FKDFLFKJ@MAP166@
	DD	0a7H
	DD	FLAT:??_C@_06EDCOIEOI@MAP167@
	DD	0a8H
	DD	FLAT:??_C@_06MELGJICH@MAP168@
	DD	0a9H
	DD	FLAT:??_C@_06NNKNKJGG@MAP169@
	DD	0aaH
	DD	FLAT:??_C@_06NKNHIBI@MAP170@
	DD	0abH
	DD	FLAT:??_C@_06BELGEJFJ@MAP171@
	DD	0acH
	DD	FLAT:??_C@_06DPJLBKJK@MAP172@
	DD	0adH
	DD	FLAT:??_C@_06CGIACLNL@MAP173@
	DD	0aeH
	DD	FLAT:??_C@_06GJMBLNBM@MAP174@
	DD	0afH
	DD	FLAT:??_C@_06HANKIMFN@MAP175@
	DD	0b0H
	DD	FLAT:??_C@_06FLPHNPJO@MAP176@
	DD	0b1H
	DD	FLAT:??_C@_06ECOMOONP@MAP177@
	DD	0b2H
	DD	FLAT:??_C@_06MFHEPCBA@MAP178@
	DD	0b3H
	DD	FLAT:??_C@_06NMGPMDFB@MAP179@
	DD	0b4H
	DD	FLAT:??_C@_06GPBDPCF@MAP180@
	DD	0b5H
	DD	FLAT:??_C@_06BPOKAOGE@MAP181@
	DD	0b6H
	DD	FLAT:??_C@_06DEMHFNKH@MAP182@
	DD	0b7H
	DD	FLAT:??_C@_06CNNMGMOG@MAP183@
	DD	0b8H
	DD	FLAT:??_C@_06GCJNPKCB@MAP184@
	DD	0b9H
	DD	FLAT:??_C@_06HLIGMLGA@MAP185@
	DD	0baH
	DD	FLAT:??_C@_06FAKLJIKD@MAP186@
	DD	0bbH
	DD	FLAT:??_C@_06EJLAKJOC@MAP187@
	DD	0bcH
	DD	FLAT:??_C@_06MOCILFCN@MAP188@
	DD	0bdH
	DD	FLAT:??_C@_06NHDDIEGM@MAP189@
	DD	0beH
	DD	FLAT:??_C@_06HDDFFBC@MAP190@
	DD	0bfH
	DD	FLAT:??_C@_06BOCIGEFD@MAP191@
	DD	0c0H
	DD	FLAT:??_C@_06DFAFDHJA@MAP192@
	DD	0c1H
	DD	FLAT:??_C@_06CMBOAGNB@MAP193@
	DD	0c2H
	DD	FLAT:??_C@_06GDFPJABG@MAP194@
	DD	0c3H
	DD	FLAT:??_C@_06HKEEKBFH@MAP195@
	DD	0c4H
	DD	FLAT:??_C@_06FBGJPCJE@MAP196@
	DD	0c5H
	DD	FLAT:??_C@_06EIHCMDNF@MAP197@
	DD	0c6H
	DD	FLAT:??_C@_06MPOKNPBK@MAP198@
	DD	0c7H
	DD	FLAT:??_C@_06NGPBOOFL@MAP199@
	DD	0c8H
	DD	FLAT:??_C@_06BKFHMBHD@MAP200@
	DD	0c9H
	DD	FLAT:??_C@_06DEMPADC@MAP201@
	DD	0caH
	DD	FLAT:??_C@_06CIGBKDPB@MAP202@
	DD	0cbH
	DD	FLAT:??_C@_06DBHKJCLA@MAP203@
	DD	0ccH
	DD	FLAT:??_C@_06HODLAEHH@MAP204@
	DD	0cdH
	DD	FLAT:??_C@_06GHCADFDG@MAP205@
	DD	0ceH
	DD	FLAT:??_C@_06EMANGGPF@MAP206@
	DD	0cfH
	DD	FLAT:??_C@_06FFBGFHLE@MAP207@
	DD	0d0H
	DD	FLAT:??_C@_06NCIOELHL@MAP208@
	DD	0d1H
	DD	FLAT:??_C@_06MLJFHKDK@MAP209@
	DD	0d2H
	DD	FLAT:??_C@_06BLJFKLEE@MAP210@
	DD	0d3H
	DD	FLAT:??_C@_06CIOJKAF@MAP211@
	DD	0d4H
	DD	FLAT:??_C@_06CJKDMJMG@MAP212@
	DD	0d5H
	DD	FLAT:??_C@_06DALIPIIH@MAP213@
	DD	0d6H
	DD	FLAT:??_C@_06HPPJGOEA@MAP214@
	DD	0d7H
	DD	FLAT:??_C@_06GGOCFPAB@MAP215@
	DD	0d8H
	DD	FLAT:??_C@_06ENMPAMMC@MAP216@
	DD	0d9H
	DD	FLAT:??_C@_06FENEDNID@MAP217@
	DD	0daH
	DD	FLAT:??_C@_06NDEMCBEM@MAP218@
	DD	0dbH
	DD	FLAT:??_C@_06MKFHBAAN@MAP219@
	DD	0dcH
	DD	FLAT:??_C@_06BJNDBFBN@MAP220@
	DD	0ddH
	DD	FLAT:??_C@_06MICEFM@MAP221@
	DD	0deH
	DD	FLAT:??_C@_06CLOFHHJP@MAP222@
	DD	0dfH
	DD	FLAT:??_C@_06DCPOEGNO@MAP223@
	DD	0e0H
	DD	FLAT:??_C@_06HNLPNABJ@MAP224@
	DD	0e1H
	DD	FLAT:??_C@_06GEKEOBFI@MAP225@
	DD	0e2H
	DD	FLAT:??_C@_06EPIJLCJL@MAP226@
	DD	0e3H
	DD	FLAT:??_C@_06FGJCIDNK@MAP227@
	DD	0e4H
	DD	FLAT:??_C@_06NBAKJPBF@MAP228@
	DD	0e5H
	DD	FLAT:??_C@_06MIBBKOFE@MAP229@
	DD	0e6H
	DD	FLAT:??_C@_06BIBBHPCK@MAP230@
	DD	0e7H
	DD	FLAT:??_C@_06BAKEOGL@MAP231@
	DD	0e8H
	DD	FLAT:??_C@_06CKCHBNKI@MAP232@
	DD	0e9H
	DD	FLAT:??_C@_06DDDMCMOJ@MAP233@
	DD	0eaH
	DD	FLAT:??_C@_06HMHNLKCO@MAP234@
	DD	0ebH
	DD	FLAT:??_C@_06GFGGILGP@MAP235@
	DD	0ecH
	DD	FLAT:??_C@_06EOELNIKM@MAP236@
	DD	0edH
	DD	FLAT:??_C@_06FHFAOJON@MAP237@
	DD	0eeH
	DD	FLAT:??_C@_06NAMIPFCC@MAP238@
	DD	0efH
	DD	FLAT:??_C@_06MJNDMEGD@MAP239@
	DD	0f0H
	DD	FLAT:??_C@_06BNFOGJKP@MAP240@
	DD	0f1H
	DD	FLAT:??_C@_06EEFFIOO@MAP241@
	DD	0f2H
	DD	FLAT:??_C@_06CPGIALCN@MAP242@
	DD	0f3H
	DD	FLAT:??_C@_06DGHDDKGM@MAP243@
	DD	0f4H
	DD	FLAT:??_C@_06HJDCKMKL@MAP244@
	DD	0f5H
	DD	FLAT:??_C@_06GACJJNOK@MAP245@
	DD	0f6H
	DD	FLAT:??_C@_06ELAEMOCJ@MAP246@
	DD	0f7H
	DD	FLAT:??_C@_06FCBPPPGI@MAP247@
	DD	0f8H
	DD	FLAT:??_C@_06NFIHODKH@MAP248@
	DD	0f9H
	DD	FLAT:??_C@_06MMJMNCOG@MAP249@
	DD	0faH
	DD	FLAT:??_C@_06BMJMADJI@MAP250@
	DD	0fbH
	DD	FLAT:??_C@_06FIHDCNJ@MAP251@
	DD	0fcH
	DD	FLAT:??_C@_06COKKGBBK@MAP252@
	DD	0fdH
	DD	FLAT:??_C@_06DHLBFAFL@MAP253@
	DD	0feH
	DD	FLAT:??_C@_06HIPAMGJM@MAP254@
	DD	0ffH
	DD	FLAT:??_C@_06GBOLPHNN@MAP255@
	DD	0100H
	DD	FLAT:??_C@_06EKMGKEBO@MAP256@
	DD	0101H
	DD	FLAT:??_C@_06FDNNJFFP@MAP257@
	DD	0102H
	DD	FLAT:??_C@_06NEEFIJJA@MAP258@
	DD	0103H
	DD	FLAT:??_C@_06MNFOLINB@MAP259@
	DD	0104H
	DD	FLAT:??_C@_06BONKLNMB@MAP260@
	DD	0105H
	DD	FLAT:??_C@_06HMBIMIA@MAP261@
	DD	0106H
	DD	FLAT:??_C@_06CMOMNPED@MAP262@
	DD	0107H
	DD	FLAT:??_C@_06DFPHOOAC@MAP263@
	DD	0108H
	DD	FLAT:??_C@_06HKLGHIMF@MAP264@
	DD	0109H
	DD	FLAT:??_C@_06GDKNEJIE@MAP265@
	DD	010aH
	DD	FLAT:??_C@_06EIIABKEH@MAP266@
	DD	010bH
	DD	FLAT:??_C@_06FBJLCLAG@MAP267@
	DD	010cH
	DD	FLAT:??_C@_06NGADDHMJ@MAP268@
	DD	010dH
	DD	FLAT:??_C@_06MPBIAGII@MAP269@
	DD	010eH
	DD	FLAT:??_C@_06BPBINHPG@MAP270@
	DD	010fH
	DD	FLAT:??_C@_06GADOGLH@MAP271@
	DD	0110H
	DD	FLAT:??_C@_06CNCOLFHE@MAP272@
	DD	0111H
	DD	FLAT:??_C@_06DEDFIEDF@MAP273@
	DD	0112H
	DD	FLAT:??_C@_06HLHEBCPC@MAP274@
	DD	0113H
	DD	FLAT:??_C@_06GCGPCDLD@MAP275@
	DD	0114H
	DD	FLAT:??_C@_06EJECHAHA@MAP276@
	DD	0115H
	DD	FLAT:??_C@_06FAFJEBDB@MAP277@
	DD	0116H
	DD	FLAT:??_C@_06NHMBFNPO@MAP278@
	DD	0117H
	DD	FLAT:??_C@_06MONKGMLP@MAP279@
	DD	0118H
	DD	FLAT:??_C@_06BEEEJAML@MAP280@
	DD	0119H
	DD	FLAT:??_C@_06NFPKBIK@MAP281@
	DD	011aH
	DD	FLAT:??_C@_06CGHCPCEJ@MAP282@
	DD	011bH
	DD	FLAT:??_C@_06DPGJMDAI@MAP283@
	DD	011cH
	DD	FLAT:??_C@_06HACIFFMP@MAP284@
	DD	011dH
	DD	FLAT:??_C@_06GJDDGEIO@MAP285@
	DD	011eH
	DD	FLAT:??_C@_06ECBODHEN@MAP286@
	DD	011fH
	DD	FLAT:??_C@_06FLAFAGAM@MAP287@
	DD	0120H
	DD	FLAT:??_C@_06NMJNBKMD@MAP288@
	DD	0121H
	DD	FLAT:??_C@_06MFIGCLIC@MAP289@
	DD	0122H
	DD	FLAT:??_C@_06BFIGPKPM@MAP290@
	DD	0123H
	DD	FLAT:??_C@_06MJNMLLN@MAP291@
	DD	0124H
	DD	FLAT:??_C@_06CHLAJIHO@MAP292@
	DD	0125H
	DD	FLAT:??_C@_06DOKLKJDP@MAP293@
	DD	0126H
	DD	FLAT:??_C@_06HBOKDPPI@MAP294@
	DD	0127H
	DD	FLAT:??_C@_06GIPBAOLJ@MAP295@
	DD	0128H
	DD	FLAT:??_C@_06EDNMFNHK@MAP296@
	DD	0129H
	DD	FLAT:??_C@_06FKMHGMDL@MAP297@
	DD	012aH
	DD	FLAT:??_C@_06NNFPHAPE@MAP298@
	DD	012bH
	DD	FLAT:??_C@_06MEEEEBLF@MAP299@
	DD	012cH
	DD	FLAT:??_C@_06KCOLKGBG@MAP300@
	DD	012dH
	DD	FLAT:??_C@_06LLPAJHFH@MAP301@
	DD	012eH
	DD	FLAT:??_C@_06JANNMEJE@MAP302@
	DD	012fH
	DD	FLAT:??_C@_06IJMGPFNF@MAP303@
	DD	0130H
	DD	FLAT:??_C@_06MGIHGDBC@MAP304@
	DD	0131H
	DD	FLAT:??_C@_06NPJMFCFD@MAP305@
	DD	0132H
	DD	FLAT:??_C@_06PELBABJA@MAP306@
	DD	0133H
	DD	FLAT:??_C@_06ONKKDANB@MAP307@
	DD	0134H
	DD	FLAT:??_C@_06GKDCCMBO@MAP308@
	DD	0135H
	DD	FLAT:??_C@_06HDCJBNFP@MAP309@
	DD	0136H
	DD	FLAT:??_C@_06KDCJMMCB@MAP310@
	DD	0137H
	DD	FLAT:??_C@_06LKDCPNGA@MAP311@
	DD	0138H
	DD	FLAT:??_C@_06JBBPKOKD@MAP312@
	DD	0139H
	DD	FLAT:??_C@_06IIAEJPOC@MAP313@
	DD	013aH
	DD	FLAT:??_C@_06MHEFAJCF@MAP314@
	DD	013bH
	DD	FLAT:??_C@_06NOFODIGE@MAP315@
	DD	013cH
	DD	FLAT:??_C@_06PFHDGLKH@MAP316@
	DD	013dH
	DD	FLAT:??_C@_06OMGIFKOG@MAP317@
	DD	013eH
	DD	FLAT:??_C@_06GLPAEGCJ@MAP318@
	DD	013fH
	DD	FLAT:??_C@_06HCOLHHGI@MAP319@
	DD	0140H
	DD	FLAT:??_C@_06KBGPHCHI@MAP320@
	DD	0141H
	DD	FLAT:??_C@_06LIHEEDDJ@MAP321@
	DD	0142H
	DD	FLAT:??_C@_06JDFJBAPK@MAP322@
	DD	0143H
	DD	FLAT:??_C@_06IKECCBLL@MAP323@
	DD	0144H
	DD	FLAT:??_C@_06MFADLHHM@MAP324@
	DD	0145H
	DD	FLAT:??_C@_06NMBIIGDN@MAP325@
	DD	0146H
	DD	FLAT:??_C@_06PHDFNFPO@MAP326@
	DD	0147H
	DD	FLAT:??_C@_06OOCOOELP@MAP327@
	DD	0148H
	DD	FLAT:??_C@_06GJLGPIHA@MAP328@
	DD	0149H
	DD	FLAT:??_C@_06HAKNMJDB@MAP329@
	DD	014aH
	DD	FLAT:??_C@_06KAKNBIEP@MAP330@
	DD	014bH
	DD	FLAT:??_C@_06LJLGCJAO@MAP331@
	DD	014cH
	DD	FLAT:??_C@_06JCJLHKMN@MAP332@
	DD	014dH
	DD	FLAT:??_C@_06ILIAELIM@MAP333@
	DD	014eH
	DD	FLAT:??_C@_06MEMBNNEL@MAP334@
	DD	014fH
	DD	FLAT:??_C@_06NNNKOMAK@MAP335@
	DD	0150H
	DD	FLAT:??_C@_06PGPHLPMJ@MAP336@
	DD	0151H
	DD	FLAT:??_C@_06OPOMIOII@MAP337@
	DD	0152H
	DD	FLAT:??_C@_06GIHEJCEH@MAP338@
	DD	0153H
	DD	FLAT:??_C@_06HBGPKDAG@MAP339@
	DD	0154H
	DD	FLAT:??_C@_06KFOCAOMK@MAP340@
	DD	0155H
	DD	FLAT:??_C@_06LMPJDPIL@MAP341@
	DD	0156H
	DD	FLAT:??_C@_06JHNEGMEI@MAP342@
	DD	0157H
	DD	FLAT:??_C@_06IOMPFNAJ@MAP343@
	DD	0158H
	DD	FLAT:??_C@_06MBIOMLMO@MAP344@
	DD	0159H
	DD	FLAT:??_C@_06NIJFPKIP@MAP345@
	DD	015aH
	DD	FLAT:??_C@_06PDLIKJEM@MAP346@
	DD	015bH
	DD	FLAT:??_C@_06OKKDJIAN@MAP347@
	DD	015cH
	DD	FLAT:??_C@_06GNDLIEMC@MAP348@
	DD	015dH
	DD	FLAT:??_C@_06HECALFID@MAP349@
	DD	015eH
	DD	FLAT:??_C@_06KECAGEPN@MAP350@
	DD	015fH
	DD	FLAT:??_C@_06LNDLFFLM@MAP351@
	DD	0160H
	DD	FLAT:??_C@_06JGBGAGHP@MAP352@
	DD	0161H
	DD	FLAT:??_C@_06IPANDHDO@MAP353@
	DD	0162H
	DD	FLAT:??_C@_06MAEMKBPJ@MAP354@
	DD	0163H
	DD	FLAT:??_C@_06NJFHJALI@MAP355@
	DD	0164H
	DD	FLAT:??_C@_06PCHKMDHL@MAP356@
	DD	0165H
	DD	FLAT:??_C@_06OLGBPCDK@MAP357@
	DD	0166H
	DD	FLAT:??_C@_06GMPJOOPF@MAP358@
	DD	0167H
	DD	FLAT:??_C@_06HFOCNPLE@MAP359@
	DD	0168H
	DD	FLAT:??_C@_06KGGGNKKE@MAP360@
	DD	0169H
	DD	FLAT:??_C@_06LPHNOLOF@MAP361@
	DD	016aH
	DD	FLAT:??_C@_06JEFALICG@MAP362@
	DD	016bH
	DD	FLAT:??_C@_06INELIJGH@MAP363@
	DD	016cH
	DD	FLAT:??_C@_06MCAKBPKA@MAP364@
	DD	016dH
	DD	FLAT:??_C@_06NLBBCOOB@MAP365@
	DD	016eH
	DD	FLAT:??_C@_06PADMHNCC@MAP366@
	DD	016fH
	DD	FLAT:??_C@_06OJCHEMGD@MAP367@
	DD	0170H
	DD	FLAT:??_C@_06GOLPFAKM@MAP368@
	DD	0171H
	DD	FLAT:??_C@_06HHKEGBON@MAP369@
	DD	0172H
	DD	FLAT:??_C@_06KHKELAJD@MAP370@
	DD	0173H
	DD	FLAT:??_C@_06LOLPIBNC@MAP371@
	DD	0174H
	DD	FLAT:??_C@_06JFJCNCBB@MAP372@
	DD	0175H
	DD	FLAT:??_C@_06IMIJODFA@MAP373@
	DD	0176H
	DD	FLAT:??_C@_06MDMIHFJH@MAP374@
	DD	0177H
	DD	FLAT:??_C@_06NKNDEENG@MAP375@
	DD	0178H
	DD	FLAT:??_C@_06PBPOBHBF@MAP376@
	DD	0179H
	DD	FLAT:??_C@_06OIOFCGFE@MAP377@
	DD	017aH
	DD	FLAT:??_C@_06GPHNDKJL@MAP378@
	DD	017bH
	DD	FLAT:??_C@_06HGGGALNK@MAP379@
	DD	017cH
	DD	FLAT:??_C@_06KMPIPHKO@MAP380@
	DD	017dH
	DD	FLAT:??_C@_06LFODMGOP@MAP381@
	DD	017eH
	DD	FLAT:??_C@_06JOMOJFCM@MAP382@
	DD	017fH
	DD	FLAT:??_C@_06IHNFKEGN@MAP383@
	DD	0180H
	DD	FLAT:??_C@_06MIJEDCKK@MAP384@
	DD	0181H
	DD	FLAT:??_C@_06NBIPADOL@MAP385@
	DD	0182H
	DD	FLAT:??_C@_06PKKCFACI@MAP386@
	DD	0183H
	DD	FLAT:??_C@_06ODLJGBGJ@MAP387@
	DD	0184H
	DD	FLAT:??_C@_06GECBHNKG@MAP388@
	DD	0185H
	DD	FLAT:??_C@_06HNDKEMOH@MAP389@
	DD	0186H
	DD	FLAT:??_C@_06KNDKJNJJ@MAP390@
	DD	0187H
	DD	FLAT:??_C@_06LECBKMNI@MAP391@
	DD	0188H
	DD	FLAT:??_C@_06JPAMPPBL@MAP392@
	DD	0189H
	DD	FLAT:??_C@_06IGBHMOFK@MAP393@
	DD	018aH
	DD	FLAT:??_C@_06MJFGFIJN@MAP394@
	DD	018bH
	DD	FLAT:??_C@_06NAENGJNM@MAP395@
	DD	018cH
	DD	FLAT:??_C@_06PLGADKBP@MAP396@
	DD	018dH
	DD	FLAT:??_C@_06OCHLALFO@MAP397@
	DD	018eH
	DD	FLAT:??_C@_06GFODBHJB@MAP398@
	DD	018fH
	DD	FLAT:??_C@_06HMPICGNA@MAP399@
	DD	0190H
	DD	FLAT:??_C@_06DPDMJOKP@MAP400@
	DD	0191H
	DD	FLAT:??_C@_06CGCHKPOO@MAP401@
	DD	0192H
	DD	FLAT:??_C@_06NAKPMCN@MAP402@
	DD	0193H
	DD	FLAT:??_C@_06BEBBMNGM@MAP403@
	DD	0194H
	DD	FLAT:??_C@_06FLFAFLKL@MAP404@
	DD	0195H
	DD	FLAT:??_C@_06ECELGKOK@MAP405@
	DD	0196H
	DD	FLAT:??_C@_06GJGGDJCJ@MAP406@
	DD	0197H
	DD	FLAT:??_C@_06HAHNAIGI@MAP407@
	DD	0198H
	DD	FLAT:??_C@_06PHOFBEKH@MAP408@
	DD	0199H
	DD	FLAT:??_C@_06OOPOCFOG@MAP409@
	DD	019aH
	DD	FLAT:??_C@_06DOPOPEJI@MAP410@
	DD	019bH
	DD	FLAT:??_C@_06CHOFMFNJ@MAP411@
	DD	019cH
	DD	FLAT:??_C@_06MMIJGBK@MAP412@
	DD	019dH
	DD	FLAT:??_C@_06BFNDKHFL@MAP413@
	DD	019eH
	DD	FLAT:??_C@_06FKJCDBJM@MAP414@
	DD	019fH
	DD	FLAT:??_C@_06EDIJAANN@MAP415@
	DD	01a0H
	DD	FLAT:??_C@_06GIKEFDBO@MAP416@
	DD	01a1H
	DD	FLAT:??_C@_06HBLPGCFP@MAP417@
	DD	01a2H
	DD	FLAT:??_C@_06PGCHHOJA@MAP418@
	DD	01a3H
	DD	FLAT:??_C@_06OPDMEPNB@MAP419@
	DD	01a4H
	DD	FLAT:??_C@_06DMLIEKMB@MAP420@
	DD	01a5H
	DD	FLAT:??_C@_06CFKDHLIA@MAP421@
	DD	01a6H
	DD	FLAT:??_C@_06OIOCIED@MAP422@
	DD	01a7H
	DD	FLAT:??_C@_06BHJFBJAC@MAP423@
	DD	01a8H
	DD	FLAT:??_C@_06FINEIPMF@MAP424@
	DD	01a9H
	DD	FLAT:??_C@_06EBMPLOIE@MAP425@
	DD	01aaH
	DD	FLAT:??_C@_06GKOCONEH@MAP426@
	DD	01abH
	DD	FLAT:??_C@_06HDPJNMAG@MAP427@
	DD	01acH
	DD	FLAT:??_C@_06PEGBMAMJ@MAP428@
	DD	01adH
	DD	FLAT:??_C@_06ONHKPBII@MAP429@
	DD	01aeH
	DD	FLAT:??_C@_06DNHKCAPG@MAP430@
	DD	01afH
	DD	FLAT:??_C@_06CEGBBBLH@MAP431@
	DD	01b0H
	DD	FLAT:??_C@_06PEMECHE@MAP432@
	DD	01b1H
	DD	FLAT:??_C@_06BGFHHDDF@MAP433@
	DD	01b2H
	DD	FLAT:??_C@_06FJBGOFPC@MAP434@
	DD	01b3H
	DD	FLAT:??_C@_06EAANNELD@MAP435@
	DD	01b4H
	DD	FLAT:??_C@_06GLCAIHHA@MAP436@
	DD	01b5H
	DD	FLAT:??_C@_06HCDLLGDB@MAP437@
	DD	01b6H
	DD	FLAT:??_C@_06PFKDKKPO@MAP438@
	DD	01b7H
	DD	FLAT:??_C@_06OMLIJLLP@MAP439@
	DD	01b8H
	DD	FLAT:??_C@_06DIDFDGHD@MAP440@
	DD	01b9H
	DD	FLAT:??_C@_06CBCOAHDC@MAP441@
	DD	01baH
	DD	FLAT:??_C@_06KADFEPB@MAP442@
	DD	01bbH
	DD	FLAT:??_C@_06BDBIGFLA@MAP443@
	DD	01bcH
	DD	FLAT:??_C@_06FMFJPDHH@MAP444@
	DD	01bdH
	DD	FLAT:??_C@_06EFECMCDG@MAP445@
	DD	01beH
	DD	FLAT:??_C@_06GOGPJBPF@MAP446@
	DD	01bfH
	DD	FLAT:??_C@_06HHHEKALE@MAP447@
	DD	01c0H
	DD	FLAT:??_C@_06PAOMLMHL@MAP448@
	DD	01c1H
	DD	FLAT:??_C@_06OJPHINDK@MAP449@
	DD	01c2H
	DD	FLAT:??_C@_06DJPHFMEE@MAP450@
	DD	01c3H
	DD	FLAT:??_C@_06CAOMGNAF@MAP451@
	DD	01c4H
	DD	FLAT:??_C@_06LMBDOMG@MAP452@
	DD	01c5H
	DD	FLAT:??_C@_06BCNKAPIH@MAP453@
	DD	01c6H
	DD	FLAT:??_C@_06FNJLJJEA@MAP454@
	DD	01c7H
	DD	FLAT:??_C@_06EEIAKIAB@MAP455@
	DD	01c8H
	DD	FLAT:??_C@_06GPKNPLMC@MAP456@
	DD	01c9H
	DD	FLAT:??_C@_06HGLGMKID@MAP457@
	DD	01caH
	DD	FLAT:??_C@_06PBCONGEM@MAP458@
	DD	01cbH
	DD	FLAT:??_C@_06OIDFOHAN@MAP459@
	DD	01ccH
	DD	FLAT:??_C@_06DLLBOCBN@MAP460@
	DD	01cdH
	DD	FLAT:??_C@_06CCKKNDFM@MAP461@
	DD	01ceH
	DD	FLAT:??_C@_06JIHIAJP@MAP462@
	DD	01cfH
	DD	FLAT:??_C@_06BAJMLBNO@MAP463@
	DD	01d0H
	DD	FLAT:??_C@_06FPNNCHBJ@MAP464@
	DD	01d1H
	DD	FLAT:??_C@_06EGMGBGFI@MAP465@
	DD	01d2H
	DD	FLAT:??_C@_06GNOLEFJL@MAP466@
	DD	01d3H
	DD	FLAT:??_C@_06HEPAHENK@MAP467@
	DD	01d4H
	DD	FLAT:??_C@_06PDGIGIBF@MAP468@
	DD	01d5H
	DD	FLAT:??_C@_06OKHDFJFE@MAP469@
	DD	01d6H
	DD	FLAT:??_C@_06DKHDIICK@MAP470@
	DD	01d7H
	DD	FLAT:??_C@_06CDGILJGL@MAP471@
	DD	01d8H
	DD	FLAT:??_C@_06IEFOKKI@MAP472@
	DD	01d9H
	DD	FLAT:??_C@_06BBFONLOJ@MAP473@
	DD	01daH
	DD	FLAT:??_C@_06FOBPENCO@MAP474@
	DD	01dbH
	DD	FLAT:??_C@_06EHAEHMGP@MAP475@
	DD	01dcH
	DD	FLAT:??_C@_06GMCJCPKM@MAP476@
	DD	01ddH
	DD	FLAT:??_C@_06HFDCBOON@MAP477@
	DD	01deH
	DD	FLAT:??_C@_06PCKKACCC@MAP478@
	DD	01dfH
	DD	FLAT:??_C@_06OLLBDDGD@MAP479@
	DD	01e0H
	DD	FLAT:??_C@_06DBCPMPBH@MAP480@
	DD	01e1H
	DD	FLAT:??_C@_06CIDEPOFG@MAP481@
	DD	01e2H
	DD	FLAT:??_C@_06DBJKNJF@MAP482@
	DD	01e3H
	DD	FLAT:??_C@_06BKACJMNE@MAP483@
	DD	01e4H
	DD	FLAT:??_C@_06FFEDAKBD@MAP484@
	DD	01e5H
	DD	FLAT:??_C@_06EMFIDLFC@MAP485@
	DD	01e6H
	DD	FLAT:??_C@_06GHHFGIJB@MAP486@
	DD	01e7H
	DD	FLAT:??_C@_06HOGOFJNA@MAP487@
	DD	01e8H
	DD	FLAT:??_C@_06PJPGEFBP@MAP488@
	DD	01e9H
	DD	FLAT:??_C@_06OAONHEFO@MAP489@
	DD	01eaH
	DD	FLAT:??_C@_06DAONKFCA@MAP490@
	DD	01ebH
	DD	FLAT:??_C@_06CJPGJEGB@MAP491@
	DD	01ecH
	DD	FLAT:??_C@_06CNLMHKC@MAP492@
	DD	01edH
	DD	FLAT:??_C@_06BLMAPGOD@MAP493@
	DD	01eeH
	DD	FLAT:??_C@_06FEIBGACE@MAP494@
	DD	01efH
	DD	FLAT:??_C@_06ENJKFBGF@MAP495@
	DD	01f0H
	DD	FLAT:??_C@_06GGLHACKG@MAP496@
	DD	01f1H
	DD	FLAT:??_C@_06HPKMDDOH@MAP497@
	DD	01f2H
	DD	FLAT:??_C@_06PIDECPCI@MAP498@
	DD	01f3H
	DD	FLAT:??_C@_06OBCPBOGJ@MAP499@
	DD	01f4H
	DD	FLAT:??_C@_06IHIAPJMK@MAP500@
	DD	01f5H
	DD	FLAT:??_C@_06JOJLMIIL@MAP501@
	DD	01f6H
	DD	FLAT:??_C@_06LFLGJLEI@MAP502@
	DD	01f7H
	DD	FLAT:??_C@_06KMKNKKAJ@MAP503@
	DD	01f8H
	DD	FLAT:??_C@_06ODOMDMMO@MAP504@
	DD	01f9H
	DD	FLAT:??_C@_06PKPHANIP@MAP505@
	DD	01faH
	DD	FLAT:??_C@_06NBNKFOEM@MAP506@
	DD	01fbH
	DD	FLAT:??_C@_06MIMBGPAN@MAP507@
	DD	01fcH
	DD	FLAT:??_C@_06EPFJHDMC@MAP508@
	DD	01fdH
	DD	FLAT:??_C@_06FGECECID@MAP509@
	DD	01feH
	DD	FLAT:??_C@_06IGECJDPN@MAP510@
	DD	01ffH
	DD	FLAT:??_C@_06JPFJKCLM@MAP511@
	DD	0200H
	DD	FLAT:??_C@_06LEHEPBHP@MAP512@
	DD	0201H
	DD	FLAT:??_C@_06KNGPMADO@MAP513@
	DD	0202H
	DD	FLAT:??_C@_06OCCOFGPJ@MAP514@
	DD	0203H
	DD	FLAT:??_C@_06PLDFGHLI@MAP515@
	DD	0204H
	DD	FLAT:??_C@_06NABIDEHL@MAP516@
	DD	0205H
	DD	FLAT:??_C@_06MJADAFDK@MAP517@
	DD	0206H
	DD	FLAT:??_C@_06EOJLBJPF@MAP518@
	DD	0207H
	DD	FLAT:??_C@_06FHIACILE@MAP519@
	DD	0208H
	DD	FLAT:??_C@_06IEAECNKE@MAP520@
	DD	0209H
	DD	FLAT:??_C@_06JNBPBMOF@MAP521@
	DD	020aH
	DD	FLAT:??_C@_06LGDCEPCG@MAP522@
	DD	020bH
	DD	FLAT:??_C@_06KPCJHOGH@MAP523@
	DD	020cH
	DD	FLAT:??_C@_06OAGIOIKA@MAP524@
	DD	020dH
	DD	FLAT:??_C@_06PJHDNJOB@MAP525@
	DD	020eH
	DD	FLAT:??_C@_06NCFOIKCC@MAP526@
	DD	020fH
	DD	FLAT:??_C@_06MLEFLLGD@MAP527@
	DD	0210H
	DD	FLAT:??_C@_06EMNNKHKM@MAP528@
	DD	0211H
	DD	FLAT:??_C@_06FFMGJGON@MAP529@
	DD	0212H
	DD	FLAT:??_C@_06IFMGEHJD@MAP530@
	DD	0213H
	DD	FLAT:??_C@_06JMNNHGNC@MAP531@
	DD	0214H
	DD	FLAT:??_C@_06LHPACFBB@MAP532@
	DD	0215H
	DD	FLAT:??_C@_06KOOLBEFA@MAP533@
	DD	0216H
	DD	FLAT:??_C@_06OBKKICJH@MAP534@
	DD	0217H
	DD	FLAT:??_C@_06PILBLDNG@MAP535@
	DD	0218H
	DD	FLAT:??_C@_06NDJMOABF@MAP536@
	DD	0219H
	DD	FLAT:??_C@_06MKIHNBFE@MAP537@
	DD	021aH
	DD	FLAT:??_C@_06ENBPMNJL@MAP538@
	DD	021bH
	DD	FLAT:??_C@_06FEAEPMNK@MAP539@
	DD	021cH
	DD	FLAT:??_C@_06IAIJFBBG@MAP540@
	DD	021dH
	DD	FLAT:??_C@_06JJJCGAFH@MAP541@
	DD	021eH
	DD	FLAT:??_C@_06LCLPDDJE@MAP542@
	DD	021fH
	DD	FLAT:??_C@_06KLKEACNF@MAP543@
	DD	0220H
	DD	FLAT:??_C@_06OEOFJEBC@MAP544@
	DD	0221H
	DD	FLAT:??_C@_06PNPOKFFD@MAP545@
	DD	0222H
	DD	FLAT:??_C@_06NGNDPGJA@MAP546@
	DD	0223H
	DD	FLAT:??_C@_06MPMIMHNB@MAP547@
	DD	0224H
	DD	FLAT:??_C@_06EIFANLBO@MAP548@
	DD	0225H
	DD	FLAT:??_C@_06FBELOKFP@MAP549@
	DD	0226H
	DD	FLAT:??_C@_06IBELDLCB@MAP550@
	DD	0227H
	DD	FLAT:??_C@_06JIFAAKGA@MAP551@
	DD	0228H
	DD	FLAT:??_C@_06LDHNFJKD@MAP552@
	DD	0229H
	DD	FLAT:??_C@_06KKGGGIOC@MAP553@
	DD	022aH
	DD	FLAT:??_C@_06OFCHPOCF@MAP554@
	DD	022bH
	DD	FLAT:??_C@_06PMDMMPGE@MAP555@
	DD	022cH
	DD	FLAT:??_C@_06NHBBJMKH@MAP556@
	DD	022dH
	DD	FLAT:??_C@_06MOAKKNOG@MAP557@
	DD	022eH
	DD	FLAT:??_C@_06EJJCLBCJ@MAP558@
	DD	022fH
	DD	FLAT:??_C@_06FAIJIAGI@MAP559@
	DD	0230H
	DD	FLAT:??_C@_06IDANIFHI@MAP560@
	DD	0231H
	DD	FLAT:??_C@_06JKBGLEDJ@MAP561@
	DD	0232H
	DD	FLAT:??_C@_06LBDLOHPK@MAP562@
	DD	0233H
	DD	FLAT:??_C@_06KICANGLL@MAP563@
	DD	0234H
	DD	FLAT:??_C@_06OHGBEAHM@MAP564@
	DD	0235H
	DD	FLAT:??_C@_06POHKHBDN@MAP565@
	DD	0236H
	DD	FLAT:??_C@_06NFFHCCPO@MAP566@
	DD	0237H
	DD	FLAT:??_C@_06MMEMBDLP@MAP567@
	DD	0238H
	DD	FLAT:??_C@_06ELNEAPHA@MAP568@
	DD	0239H
	DD	FLAT:??_C@_06FCMPDODB@MAP569@
	DD	023aH
	DD	FLAT:??_C@_06ICMPOPEP@MAP570@
	DD	023bH
	DD	FLAT:??_C@_06JLNENOAO@MAP571@
	DD	023cH
	DD	FLAT:??_C@_06LAPJINMN@MAP572@
	DD	023dH
	DD	FLAT:??_C@_06KJOCLMIM@MAP573@
	DD	023eH
	DD	FLAT:??_C@_06OGKDCKEL@MAP574@
	DD	023fH
	DD	FLAT:??_C@_06PPLIBLAK@MAP575@
	DD	0240H
	DD	FLAT:??_C@_06NEJFEIMJ@MAP576@
	DD	0241H
	DD	FLAT:??_C@_06MNIOHJII@MAP577@
	DD	0242H
	DD	FLAT:??_C@_06EKBGGFEH@MAP578@
	DD	0243H
	DD	FLAT:??_C@_06FDANFEAG@MAP579@
	DD	0244H
	DD	FLAT:??_C@_06IJJDKIHC@MAP580@
	DD	0245H
	DD	FLAT:??_C@_06JAIIJJDD@MAP581@
	DD	0246H
	DD	FLAT:??_C@_06LLKFMKPA@MAP582@
	DD	0247H
	DD	FLAT:??_C@_06KCLOPLLB@MAP583@
	DD	0248H
	DD	FLAT:??_C@_06ONPPGNHG@MAP584@
	DD	0249H
	DD	FLAT:??_C@_06PEOEFMDH@MAP585@
	DD	024aH
	DD	FLAT:??_C@_06NPMJAPPE@MAP586@
	DD	024bH
	DD	FLAT:??_C@_06MGNCDOLF@MAP587@
	DD	024cH
	DD	FLAT:??_C@_06EBEKCCHK@MAP588@
	DD	024dH
	DD	FLAT:??_C@_06FIFBBDDL@MAP589@
	DD	024eH
	DD	FLAT:??_C@_06IIFBMCEF@MAP590@
	DD	024fH
	DD	FLAT:??_C@_06JBEKPDAE@MAP591@
	DD	0250H
	DD	FLAT:??_C@_06LKGHKAMH@MAP592@
	DD	0251H
	DD	FLAT:??_C@_06KDHMJBIG@MAP593@
	DD	0252H
	DD	FLAT:??_C@_06OMDNAHEB@MAP594@
	DD	0253H
	DD	FLAT:??_C@_06PFCGDGAA@MAP595@
	DD	0254H
	DD	FLAT:??_C@_06NOALGFMD@MAP596@
	DD	0255H
	DD	FLAT:??_C@_06MHBAFEIC@MAP597@
	DD	0256H
	DD	FLAT:??_C@_06EAIIEIEN@MAP598@
	DD	0257H
	DD	FLAT:??_C@_06FJJDHJAM@MAP599@
	DD	0258H
	DD	FLAT:??_C@_06JFDFFGCE@MAP600@
	DD	0259H
	DD	FLAT:??_C@_06IMCOGHGF@MAP601@
	DD	025aH
	DD	FLAT:??_C@_06KHADDEKG@MAP602@
	DD	025bH
	DD	FLAT:??_C@_06LOBIAFOH@MAP603@
	DD	025cH
	DD	FLAT:??_C@_06PBFJJDCA@MAP604@
	DD	025dH
	DD	FLAT:??_C@_06OIECKCGB@MAP605@
	DD	025eH
	DD	FLAT:??_C@_06MDGPPBKC@MAP606@
	DD	025fH
	DD	FLAT:??_C@_06NKHEMAOD@MAP607@
	DD	0260H
	DD	FLAT:??_C@_06FNOMNMCM@MAP608@
	DD	0261H
	DD	FLAT:??_C@_06EEPHONGN@MAP609@
	DD	0262H
	DD	FLAT:??_C@_06JEPHDMBD@MAP610@
	DD	0263H
	DD	FLAT:??_C@_06INOMANFC@MAP611@
	DD	0264H
	DD	FLAT:??_C@_06KGMBFOJB@MAP612@
	DD	0265H
	DD	FLAT:??_C@_06LPNKGPNA@MAP613@
	DD	0266H
	DD	FLAT:??_C@_06PAJLPJBH@MAP614@
	DD	0267H
	DD	FLAT:??_C@_06OJIAMIFG@MAP615@
	DD	0268H
	DD	FLAT:??_C@_06MCKNJLJF@MAP616@
	DD	0269H
	DD	FLAT:??_C@_06NLLGKKNE@MAP617@
	DD	026aH
	DD	FLAT:??_C@_06FMCOLGBL@MAP618@
	DD	026bH
	DD	FLAT:??_C@_06EFDFIHFK@MAP619@
	DD	026cH
	DD	FLAT:??_C@_06JGLBICEK@MAP620@
	DD	026dH
	DD	FLAT:??_C@_06IPKKLDAL@MAP621@
	DD	026eH
	DD	FLAT:??_C@_06KEIHOAMI@MAP622@
	DD	026fH
	DD	FLAT:??_C@_06LNJMNBIJ@MAP623@
	DD	0270H
	DD	FLAT:??_C@_06PCNNEHEO@MAP624@
	DD	0271H
	DD	FLAT:??_C@_06OLMGHGAP@MAP625@
	DD	0272H
	DD	FLAT:??_C@_06MAOLCFMM@MAP626@
	DD	0273H
	DD	FLAT:??_C@_06NJPABEIN@MAP627@
	DD	0274H
	DD	FLAT:??_C@_06FOGIAIEC@MAP628@
	DD	0275H
	DD	FLAT:??_C@_06EHHDDJAD@MAP629@
	DD	0276H
	DD	FLAT:??_C@_06JHHDOIHN@MAP630@
	DD	0277H
	DD	FLAT:??_C@_06IOGINJDM@MAP631@
	DD	0278H
	DD	FLAT:??_C@_06KFEFIKPP@MAP632@
	DD	0279H
	DD	FLAT:??_C@_06LMFOLLLO@MAP633@
	DD	027aH
	DD	FLAT:??_C@_06PDBPCNHJ@MAP634@
	DD	027bH
	DD	FLAT:??_C@_06OKAEBMDI@MAP635@
	DD	027cH
	DD	FLAT:??_C@_06MBCJEPPL@MAP636@
	DD	027dH
	DD	FLAT:??_C@_06NIDCHOLK@MAP637@
	DD	027eH
	DD	FLAT:??_C@_06FPKKGCHF@MAP638@
	DD	027fH
	DD	FLAT:??_C@_06EGLBFDDE@MAP639@
	DD	0280H
	DD	FLAT:??_C@_06JCDMPOPI@MAP640@
	DD	0281H
	DD	FLAT:??_C@_06ILCHMPLJ@MAP641@
	DD	0282H
	DD	FLAT:??_C@_06KAAKJMHK@MAP642@
	DD	0283H
	DD	FLAT:??_C@_06LJBBKNDL@MAP643@
	DD	0284H
	DD	FLAT:??_C@_06PGFADLPM@MAP644@
	DD	0285H
	DD	FLAT:??_C@_06OPELAKLN@MAP645@
	DD	0286H
	DD	FLAT:??_C@_06MEGGFJHO@MAP646@
	DD	0287H
	DD	FLAT:??_C@_06NNHNGIDP@MAP647@
	DD	0288H
	DD	FLAT:??_C@_06FKOFHEPA@MAP648@
	DD	0289H
	DD	FLAT:??_C@_06EDPOEFLB@MAP649@
	DD	028aH
	DD	FLAT:??_C@_06JDPOJEMP@MAP650@
	DD	028bH
	DD	FLAT:??_C@_06IKOFKFIO@MAP651@
	DD	028cH
	DD	FLAT:??_C@_06KBMIPGEN@MAP652@
	DD	028dH
	DD	FLAT:??_C@_06LINDMHAM@MAP653@
	DD	028eH
	DD	FLAT:??_C@_06PHJCFBML@MAP654@
	DD	028fH
	DD	FLAT:??_C@_06OOIJGAIK@MAP655@
	DD	0290H
	DD	FLAT:??_C@_06MFKEDDEJ@MAP656@
	DD	0291H
	DD	FLAT:??_C@_06NMLPACAI@MAP657@
	DD	0292H
	DD	FLAT:??_C@_06FLCHBOMH@MAP658@
	DD	0293H
	DD	FLAT:??_C@_06ECDMCPIG@MAP659@
	DD	0294H
	DD	FLAT:??_C@_06JBLICKJG@MAP660@
	DD	0295H
	DD	FLAT:??_C@_06IIKDBLNH@MAP661@
	DD	0296H
	DD	FLAT:??_C@_06KDIOEIBE@MAP662@
	DD	0297H
	DD	FLAT:??_C@_06LKJFHJFF@MAP663@
	DD	0298H
	DD	FLAT:??_C@_06PFNEOPJC@MAP664@
	DD	0299H
	DD	FLAT:??_C@_06OMMPNOND@MAP665@
	DD	029aH
	DD	FLAT:??_C@_06MHOCINBA@MAP666@
	DD	029bH
	DD	FLAT:??_C@_06NOPJLMFB@MAP667@
	DD	029cH
	DD	FLAT:??_C@_06FJGBKAJO@MAP668@
	DD	029dH
	DD	FLAT:??_C@_06EAHKJBNP@MAP669@
	DD	029eH
	DD	FLAT:??_C@_06JAHKEAKB@MAP670@
	DD	029fH
	DD	FLAT:??_C@_06IJGBHBOA@MAP671@
	DD	02a0H
	DD	FLAT:??_C@_06KCEMCCCD@MAP672@
	DD	02a1H
	DD	FLAT:??_C@_06LLFHBDGC@MAP673@
	DD	02a2H
	DD	FLAT:??_C@_06PEBGIFKF@MAP674@
	DD	02a3H
	DD	FLAT:??_C@_06ONANLEOE@MAP675@
	DD	02a4H
	DD	FLAT:??_C@_06MGCAOHCH@MAP676@
	DD	02a5H
	DD	FLAT:??_C@_06NPDLNGGG@MAP677@
	DD	02a6H
	DD	FLAT:??_C@_06FIKDMKKJ@MAP678@
	DD	02a7H
	DD	FLAT:??_C@_06EBLIPLOI@MAP679@
	DD	02a8H
	DD	FLAT:??_C@_06JLCGAHJM@MAP680@
	DD	02a9H
	DD	FLAT:??_C@_06ICDNDGNN@MAP681@
	DD	02aaH
	DD	FLAT:??_C@_06KJBAGFBO@MAP682@
	DD	02abH
	DD	FLAT:??_C@_06LAALFEFP@MAP683@
	DD	02acH
	DD	FLAT:??_C@_06PPEKMCJI@MAP684@
	DD	02adH
	DD	FLAT:??_C@_06OGFBPDNJ@MAP685@
	DD	02aeH
	DD	FLAT:??_C@_06MNHMKABK@MAP686@
	DD	02afH
	DD	FLAT:??_C@_06NEGHJBFL@MAP687@
	DD	02b0H
	DD	FLAT:??_C@_06FDPPINJE@MAP688@
	DD	02b1H
	DD	FLAT:??_C@_06EKOELMNF@MAP689@
	DD	02b2H
	DD	FLAT:??_C@_06JKOEGNKL@MAP690@
	DD	02b3H
	DD	FLAT:??_C@_06IDPPFMOK@MAP691@
	DD	02b4H
	DD	FLAT:??_C@_06KINCAPCJ@MAP692@
	DD	02b5H
	DD	FLAT:??_C@_06LBMJDOGI@MAP693@
	DD	02b6H
	DD	FLAT:??_C@_06POIIKIKP@MAP694@
	DD	02b7H
	DD	FLAT:??_C@_06OHJDJJOO@MAP695@
	DD	02b8H
	DD	FLAT:??_C@_06MMLOMKCN@MAP696@
	DD	02b9H
	DD	FLAT:??_C@_06NFKFPLGM@MAP697@
	DD	02baH
	DD	FLAT:??_C@_06FCDNOHKD@MAP698@
	DD	02bbH
	DD	FLAT:??_C@_06ELCGNGOC@MAP699@
	DD	02bcH
	DD	FLAT:??_C@_06CNIJDBEB@MAP700@
	DD	02bdH
	DD	FLAT:??_C@_06DEJCAAAA@MAP701@
	DD	02beH
	DD	FLAT:??_C@_06BPLPFDMD@MAP702@
	DD	02bfH
	DD	FLAT:??_C@_06GKEGCIC@MAP703@
	DD	02c0H
	DD	FLAT:??_C@_06EJOFPEEF@MAP704@
	DD	02c1H
	DD	FLAT:??_C@_06FAPOMFAE@MAP705@
	DD	02c2H
	DD	FLAT:??_C@_06HLNDJGMH@MAP706@
	DD	02c3H
	DD	FLAT:??_C@_06GCMIKHIG@MAP707@
	DD	02c4H
	DD	FLAT:??_C@_06OFFALLEJ@MAP708@
	DD	02c5H
	DD	FLAT:??_C@_06PMELIKAI@MAP709@
	DD	02c6H
	DD	FLAT:??_C@_06CMELFLHG@MAP710@
	DD	02c7H
	DD	FLAT:??_C@_06DFFAGKDH@MAP711@
	DD	02c8H
	DD	FLAT:??_C@_06BOHNDJPE@MAP712@
	DD	02c9H
	DD	FLAT:??_C@_06HGGAILF@MAP713@
	DD	02caH
	DD	FLAT:??_C@_06EICHJOHC@MAP714@
	DD	02cbH
	DD	FLAT:??_C@_06FBDMKPDD@MAP715@
	DD	02ccH
	DD	FLAT:??_C@_06HKBBPMPA@MAP716@
	DD	02cdH
	DD	FLAT:??_C@_06GDAKMNLB@MAP717@
	DD	02ceH
	DD	FLAT:??_C@_06OEJCNBHO@MAP718@
	DD	02cfH
	DD	FLAT:??_C@_06PNIJOADP@MAP719@
	DD	02d0H
	DD	FLAT:??_C@_06COANOFCP@MAP720@
	DD	02d1H
	DD	FLAT:??_C@_06DHBGNEGO@MAP721@
	DD	02d2H
	DD	FLAT:??_C@_06BMDLIHKN@MAP722@
	DD	02d3H
	DD	FLAT:??_C@_06FCALGOM@MAP723@
	DD	02d4H
	DD	FLAT:??_C@_06EKGBCACL@MAP724@
	DD	02d5H
	DD	FLAT:??_C@_06FDHKBBGK@MAP725@
	DD	02d6H
	DD	FLAT:??_C@_06HIFHECKJ@MAP726@
	DD	02d7H
	DD	FLAT:??_C@_06GBEMHDOI@MAP727@
	DD	02d8H
	DD	FLAT:??_C@_06OGNEGPCH@MAP728@
	DD	02d9H
	DD	FLAT:??_C@_06PPMPFOGG@MAP729@
	DD	02daH
	DD	FLAT:??_C@_06CPMPIPBI@MAP730@
	DD	02dbH
	DD	FLAT:??_C@_06DGNELOFJ@MAP731@
	DD	02dcH
	DD	FLAT:??_C@_06BNPJONJK@MAP732@
	DD	02ddH
	DD	FLAT:??_C@_06EOCNMNL@MAP733@
	DD	02deH
	DD	FLAT:??_C@_06ELKDEKBM@MAP734@
	DD	02dfH
	DD	FLAT:??_C@_06FCLIHLFN@MAP735@
	DD	02e0H
	DD	FLAT:??_C@_06HJJFCIJO@MAP736@
	DD	02e1H
	DD	FLAT:??_C@_06GAIOBJNP@MAP737@
	DD	02e2H
	DD	FLAT:??_C@_06OHBGAFBA@MAP738@
	DD	02e3H
	DD	FLAT:??_C@_06POANDEFB@MAP739@
	DD	02e4H
	DD	FLAT:??_C@_06CKIAJJJN@MAP740@
	DD	02e5H
	DD	FLAT:??_C@_06DDJLKINM@MAP741@
	DD	02e6H
	DD	FLAT:??_C@_06BILGPLBP@MAP742@
	DD	02e7H
	DD	FLAT:??_C@_06BKNMKFO@MAP743@
	DD	02e8H
	DD	FLAT:??_C@_06EOOMFMJJ@MAP744@
	DD	02e9H
	DD	FLAT:??_C@_06FHPHGNNI@MAP745@
	DD	02eaH
	DD	FLAT:??_C@_06HMNKDOBL@MAP746@
	DD	02ebH
	DD	FLAT:??_C@_06GFMBAPFK@MAP747@
	DD	02ecH
	DD	FLAT:??_C@_06OCFJBDJF@MAP748@
	DD	02edH
	DD	FLAT:??_C@_06PLECCCNE@MAP749@
	DD	02eeH
	DD	FLAT:??_C@_06CLECPDKK@MAP750@
	DD	02efH
	DD	FLAT:??_C@_06DCFJMCOL@MAP751@
	DD	02f0H
	DD	FLAT:??_C@_06BJHEJBCI@MAP752@
	DD	02f1H
	DD	FLAT:??_C@_06GPKAGJ@MAP753@
	DD	02f2H
	DD	FLAT:??_C@_06EPCODGKO@MAP754@
	DD	02f3H
	DD	FLAT:??_C@_06FGDFAHOP@MAP755@
	DD	02f4H
	DD	FLAT:??_C@_06HNBIFECM@MAP756@
	DD	02f5H
	DD	FLAT:??_C@_06GEADGFGN@MAP757@
	DD	02f6H
	DD	FLAT:??_C@_06ODJLHJKC@MAP758@
	DD	02f7H
	DD	FLAT:??_C@_06PKIAEIOD@MAP759@
	DD	02f8H
	DD	FLAT:??_C@_06CJAEENPD@MAP760@
	DD	02f9H
	DD	FLAT:??_C@_06DABPHMLC@MAP761@
	DD	02faH
	DD	FLAT:??_C@_06BLDCCPHB@MAP762@
	DD	02fbH
	DD	FLAT:??_C@_06CCJBODA@MAP763@
	DD	02fcH
	DD	FLAT:??_C@_06ENGIIIPH@MAP764@
	DD	02fdH
	DD	FLAT:??_C@_06FEHDLJLG@MAP765@
	DD	02feH
	DD	FLAT:??_C@_06HPFOOKHF@MAP766@
	DD	02ffH
	DD	FLAT:??_C@_06GGEFNLDE@MAP767@
	DD	0300H
	DD	FLAT:??_C@_06OBNNMHPL@MAP768@
	DD	0301H
	DD	FLAT:??_C@_06PIMGPGLK@MAP769@
	DD	0302H
	DD	FLAT:??_C@_06CIMGCHME@MAP770@
	DD	0303H
	DD	FLAT:??_C@_06DBNNBGIF@MAP771@
	DD	0304H
	DD	FLAT:??_C@_06BKPAEFEG@MAP772@
	DD	0305H
	DD	FLAT:??_C@_06DOLHEAH@MAP773@
	DD	0306H
	DD	FLAT:??_C@_06EMKKOCMA@MAP774@
	DD	0307H
	DD	FLAT:??_C@_06FFLBNDIB@MAP775@
	DD	0308H
	DD	FLAT:??_C@_06HOJMIAEC@MAP776@
	DD	0309H
	DD	FLAT:??_C@_06GHIHLBAD@MAP777@
	DD	030aH
	DD	FLAT:??_C@_06OABPKNMM@MAP778@
	DD	030bH
	DD	FLAT:??_C@_06PJAEJMIN@MAP779@
	DD	030cH
	DD	FLAT:??_C@_06CDJKGAPJ@MAP780@
	DD	030dH
	DD	FLAT:??_C@_06DKIBFBLI@MAP781@
	DD	030eH
	DD	FLAT:??_C@_06BBKMACHL@MAP782@
	DD	030fH
	DD	FLAT:??_C@_06ILHDDDK@MAP783@
	DD	0310H
	DD	FLAT:??_C@_06EHPGKFPN@MAP784@
	DD	0311H
	DD	FLAT:??_C@_06FOONJELM@MAP785@
	DD	0312H
	DD	FLAT:??_C@_06HFMAMHHP@MAP786@
	DD	0313H
	DD	FLAT:??_C@_06GMNLPGDO@MAP787@
	DD	0314H
	DD	FLAT:??_C@_06OLEDOKPB@MAP788@
	DD	0315H
	DD	FLAT:??_C@_06PCFINLLA@MAP789@
	DD	0316H
	DD	FLAT:??_C@_06CCFIAKMO@MAP790@
	DD	0317H
	DD	FLAT:??_C@_06DLEDDLIP@MAP791@
	DD	0318H
	DD	FLAT:??_C@_06BAGOGIEM@MAP792@
	DD	0319H
	DD	FLAT:??_C@_06JHFFJAN@MAP793@
	DD	031aH
	DD	FLAT:??_C@_06EGDEMPMK@MAP794@
	DD	031bH
	DD	FLAT:??_C@_06FPCPPOIL@MAP795@
	DD	031cH
	DD	FLAT:??_C@_06HEACKNEI@MAP796@
	DD	031dH
	DD	FLAT:??_C@_06GNBJJMAJ@MAP797@
	DD	031eH
	DD	FLAT:??_C@_06OKIBIAMG@MAP798@
	DD	031fH
	DD	FLAT:??_C@_06PDJKLBIH@MAP799@
	DD	0320H
	DD	FLAT:??_C@_06HFOKCBBH@MAP800@
	DD	0321H
	DD	FLAT:??_C@_06GMPBBAFG@MAP801@
	DD	0322H
	DD	FLAT:??_C@_06EHNMEDJF@MAP802@
	DD	0323H
	DD	FLAT:??_C@_06FOMHHCNE@MAP803@
	DD	0324H
	DD	FLAT:??_C@_06BBIGOEBD@MAP804@
	DD	0325H
	DD	FLAT:??_C@_06IJNNFFC@MAP805@
	DD	0326H
	DD	FLAT:??_C@_06CDLAIGJB@MAP806@
	DD	0327H
	DD	FLAT:??_C@_06DKKLLHNA@MAP807@
	DD	0328H
	DD	FLAT:??_C@_06LNDDKLBP@MAP808@
	DD	0329H
	DD	FLAT:??_C@_06KECIJKFO@MAP809@
	DD	032aH
	DD	FLAT:??_C@_06HECIELCA@MAP810@
	DD	032bH
	DD	FLAT:??_C@_06GNDDHKGB@MAP811@
	DD	032cH
	DD	FLAT:??_C@_06EGBOCJKC@MAP812@
	DD	032dH
	DD	FLAT:??_C@_06FPAFBIOD@MAP813@
	DD	032eH
	DD	FLAT:??_C@_06BAEEIOCE@MAP814@
	DD	032fH
	DD	FLAT:??_C@_06JFPLPGF@MAP815@
	DD	0330H
	DD	FLAT:??_C@_06CCHCOMKG@MAP816@
	DD	0331H
	DD	FLAT:??_C@_06DLGJNNOH@MAP817@
	DD	0332H
	DD	FLAT:??_C@_06LMPBMBCI@MAP818@
	DD	0333H
	DD	FLAT:??_C@_06KFOKPAGJ@MAP819@
	DD	0334H
	DD	FLAT:??_C@_06HGGOPFHJ@MAP820@
	DD	0335H
	DD	FLAT:??_C@_06GPHFMEDI@MAP821@
	DD	0336H
	DD	FLAT:??_C@_06EEFIJHPL@MAP822@
	DD	0337H
	DD	FLAT:??_C@_06FNEDKGLK@MAP823@
	DD	0338H
	DD	FLAT:??_C@_06BCACDAHN@MAP824@
	DD	0339H
	DD	FLAT:??_C@_06LBJABDM@MAP825@
	DD	033aH
	DD	FLAT:??_C@_06CADEFCPP@MAP826@
	DD	033bH
	DD	FLAT:??_C@_06DJCPGDLO@MAP827@
	DD	033cH
	DD	FLAT:??_C@_06LOLHHPHB@MAP828@
	DD	033dH
	DD	FLAT:??_C@_06KHKMEODA@MAP829@
	DD	033eH
	DD	FLAT:??_C@_06HHKMJPEO@MAP830@
	DD	033fH
	DD	FLAT:??_C@_06GOLHKOAP@MAP831@
	DD	0340H
	DD	FLAT:??_C@_06EFJKPNMM@MAP832@
	DD	0341H
	DD	FLAT:??_C@_06FMIBMMIN@MAP833@
	DD	0342H
	DD	FLAT:??_C@_06BDMAFKEK@MAP834@
	DD	0343H
	DD	FLAT:??_C@_06KNLGLAL@MAP835@
	DD	0344H
	DD	FLAT:??_C@_06CBPGDIMI@MAP836@
	DD	0345H
	DD	FLAT:??_C@_06DIONAJIJ@MAP837@
	DD	0346H
	DD	FLAT:??_C@_06LPHFBFEG@MAP838@
	DD	0347H
	DD	FLAT:??_C@_06KGGOCEAH@MAP839@
	DD	0348H
	DD	FLAT:??_C@_06HCODIJML@MAP840@
	DD	0349H
	DD	FLAT:??_C@_06GLPILIIK@MAP841@
	DD	034aH
	DD	FLAT:??_C@_06EANFOLEJ@MAP842@
	DD	034bH
	DD	FLAT:??_C@_06FJMONKAI@MAP843@
	DD	034cH
	DD	FLAT:??_C@_06BGIPEMMP@MAP844@
	DD	034dH
	DD	FLAT:??_C@_06PJEHNIO@MAP845@
	DD	034eH
	DD	FLAT:??_C@_06CELJCOEN@MAP846@
	DD	034fH
	DD	FLAT:??_C@_06DNKCBPAM@MAP847@
	DD	0350H
	DD	FLAT:??_C@_06LKDKADMD@MAP848@
	DD	0351H
	DD	FLAT:??_C@_06KDCBDCIC@MAP849@
	DD	0352H
	DD	FLAT:??_C@_06HDCBODPM@MAP850@
	DD	0353H
	DD	FLAT:??_C@_06GKDKNCLN@MAP851@
	DD	0354H
	DD	FLAT:??_C@_06EBBHIBHO@MAP852@
	DD	0355H
	DD	FLAT:??_C@_06FIAMLADP@MAP853@
	DD	0356H
	DD	FLAT:??_C@_06BHENCGPI@MAP854@
	DD	0357H
	DD	FLAT:??_C@_06OFGBHLJ@MAP855@
	DD	0358H
	DD	FLAT:??_C@_06CFHLEEHK@MAP856@
	DD	0359H
	DD	FLAT:??_C@_06DMGAHFDL@MAP857@
	DD	035aH
	DD	FLAT:??_C@_06LLPIGJPE@MAP858@
	DD	035bH
	DD	FLAT:??_C@_06KCODFILF@MAP859@
	DD	035cH
	DD	FLAT:??_C@_06HBGHFNKF@MAP860@
	DD	035dH
	DD	FLAT:??_C@_06GIHMGMOE@MAP861@
	DD	035eH
	DD	FLAT:??_C@_06EDFBDPCH@MAP862@
	DD	035fH
	DD	FLAT:??_C@_06FKEKAOGG@MAP863@
	DD	0360H
	DD	FLAT:??_C@_06BFALJIKB@MAP864@
	DD	0361H
	DD	FLAT:??_C@_06MBAKJOA@MAP865@
	DD	0362H
	DD	FLAT:??_C@_06CHDNPKCD@MAP866@
	DD	0363H
	DD	FLAT:??_C@_06DOCGMLGC@MAP867@
	DD	0364H
	DD	FLAT:??_C@_06LJLONHKN@MAP868@
	DD	0365H
	DD	FLAT:??_C@_06KAKFOGOM@MAP869@
	DD	0366H
	DD	FLAT:??_C@_06HAKFDHJC@MAP870@
	DD	0367H
	DD	FLAT:??_C@_06GJLOAGND@MAP871@
	DD	0368H
	DD	FLAT:??_C@_06ECJDFFBA@MAP872@
	DD	0369H
	DD	FLAT:??_C@_06FLIIGEFB@MAP873@
	DD	036aH
	DD	FLAT:??_C@_06BEMJPCJG@MAP874@
	DD	036bH
	DD	FLAT:??_C@_06NNCMDNH@MAP875@
	DD	036cH
	DD	FLAT:??_C@_06CGPPJABE@MAP876@
	DD	036dH
	DD	FLAT:??_C@_06DPOEKBFF@MAP877@
	DD	036eH
	DD	FLAT:??_C@_06LIHMLNJK@MAP878@
	DD	036fH
	DD	FLAT:??_C@_06KBGHIMNL@MAP879@
	DD	0370H
	DD	FLAT:??_C@_06HLPJHAKP@MAP880@
	DD	0371H
	DD	FLAT:??_C@_06GCOCEBOO@MAP881@
	DD	0372H
	DD	FLAT:??_C@_06EJMPBCCN@MAP882@
	DD	0373H
	DD	FLAT:??_C@_06FANECDGM@MAP883@
	DD	0374H
	DD	FLAT:??_C@_06BPJFLFKL@MAP884@
	DD	0375H
	DD	FLAT:??_C@_06GIOIEOK@MAP885@
	DD	0376H
	DD	FLAT:??_C@_06CNKDNHCJ@MAP886@
	DD	0377H
	DD	FLAT:??_C@_06DELIOGGI@MAP887@
	DD	0378H
	DD	FLAT:??_C@_06LDCAPKKH@MAP888@
	DD	0379H
	DD	FLAT:??_C@_06KKDLMLOG@MAP889@
	DD	037aH
	DD	FLAT:??_C@_06HKDLBKJI@MAP890@
	DD	037bH
	DD	FLAT:??_C@_06GDCACLNJ@MAP891@
	DD	037cH
	DD	FLAT:??_C@_06EIANHIBK@MAP892@
	DD	037dH
	DD	FLAT:??_C@_06FBBGEJFL@MAP893@
	DD	037eH
	DD	FLAT:??_C@_06BOFHNPJM@MAP894@
	DD	037fH
	DD	FLAT:??_C@_06HEMOONN@MAP895@
	DD	0380H
	DD	FLAT:??_C@_06CMGBLNBO@MAP896@
	DD	0381H
	DD	FLAT:??_C@_06DFHKIMFP@MAP897@
	DD	0382H
	DD	FLAT:??_C@_06LCOCJAJA@MAP898@
	DD	0383H
	DD	FLAT:??_C@_06KLPJKBNB@MAP899@
	DD	0384H
	DD	FLAT:??_C@_06MNFGEGHC@MAP900@
	DD	0385H
	DD	FLAT:??_C@_06NEENHHDD@MAP901@
	DD	0386H
	DD	FLAT:??_C@_06PPGACEPA@MAP902@
	DD	0387H
	DD	FLAT:??_C@_06OGHLBFLB@MAP903@
	DD	0388H
	DD	FLAT:??_C@_06KJDKIDHG@MAP904@
	DD	0389H
	DD	FLAT:??_C@_06LACBLCDH@MAP905@
	DD	038aH
	DD	FLAT:??_C@_06JLAMOBPE@MAP906@
	DD	038bH
	DD	FLAT:??_C@_06ICBHNALF@MAP907@
	DD	038cH
	DD	FLAT:??_C@_06FIPMMHK@MAP908@
	DD	038dH
	DD	FLAT:??_C@_06BMJEPNDL@MAP909@
	DD	038eH
	DD	FLAT:??_C@_06MMJECMEF@MAP910@
	DD	038fH
	DD	FLAT:??_C@_06NFIPBNAE@MAP911@
	DD	0390H
	DD	FLAT:??_C@_06POKCEOMH@MAP912@
	DD	0391H
	DD	FLAT:??_C@_06OHLJHPIG@MAP913@
	DD	0392H
	DD	FLAT:??_C@_06KIPIOJEB@MAP914@
	DD	0393H
	DD	FLAT:??_C@_06LBODNIAA@MAP915@
	DD	0394H
	DD	FLAT:??_C@_06JKMOILMD@MAP916@
	DD	0395H
	DD	FLAT:??_C@_06IDNFLKIC@MAP917@
	DD	0396H
	DD	FLAT:??_C@_06EENKGEN@MAP918@
	DD	0397H
	DD	FLAT:??_C@_06BNFGJHAM@MAP919@
	DD	0398H
	DD	FLAT:??_C@_06MONCJCBM@MAP920@
	DD	0399H
	DD	FLAT:??_C@_06NHMJKDFN@MAP921@
	DD	039aH
	DD	FLAT:??_C@_06PMOEPAJO@MAP922@
	DD	039bH
	DD	FLAT:??_C@_06OFPPMBNP@MAP923@
	DD	039cH
	DD	FLAT:??_C@_06KKLOFHBI@MAP924@
	DD	039dH
	DD	FLAT:??_C@_06LDKFGGFJ@MAP925@
	DD	039eH
	DD	FLAT:??_C@_06JIIIDFJK@MAP926@
	DD	039fH
	DD	FLAT:??_C@_06IBJDAENL@MAP927@
	DD	03a0H
	DD	FLAT:??_C@_06GALBIBE@MAP928@
	DD	03a1H
	DD	FLAT:??_C@_06BPBACJFF@MAP929@
	DD	03a2H
	DD	FLAT:??_C@_06MPBAPICL@MAP930@
	DD	03a3H
	DD	FLAT:??_C@_06NGALMJGK@MAP931@
	DD	03a4H
	DD	FLAT:??_C@_06PNCGJKKJ@MAP932@
	DD	03a5H
	DD	FLAT:??_C@_06OEDNKLOI@MAP933@
	DD	03a6H
	DD	FLAT:??_C@_06KLHMDNCP@MAP934@
	DD	03a7H
	DD	FLAT:??_C@_06LCGHAMGO@MAP935@
	DD	03a8H
	DD	FLAT:??_C@_06JJEKFPKN@MAP936@
	DD	03a9H
	DD	FLAT:??_C@_06IAFBGOOM@MAP937@
	DD	03aaH
	DD	FLAT:??_C@_06HMJHCCD@MAP938@
	DD	03abH
	DD	FLAT:??_C@_06BONCEDGC@MAP939@
	DD	03acH
	DD	FLAT:??_C@_06MKFPOOKO@MAP940@
	DD	03adH
	DD	FLAT:??_C@_06NDEENPOP@MAP941@
	DD	03aeH
	DD	FLAT:??_C@_06PIGJIMCM@MAP942@
	DD	03afH
	DD	FLAT:??_C@_06OBHCLNGN@MAP943@
	DD	03b0H
	DD	FLAT:??_C@_06KODDCLKK@MAP944@
	DD	03b1H
	DD	FLAT:??_C@_06LHCIBKOL@MAP945@
	DD	03b2H
	DD	FLAT:??_C@_06JMAFEJCI@MAP946@
	DD	03b3H
	DD	FLAT:??_C@_06IFBOHIGJ@MAP947@
	DD	03b4H
	DD	FLAT:??_C@_06CIGGEKG@MAP948@
	DD	03b5H
	DD	FLAT:??_C@_06BLJNFFOH@MAP949@
	DD	03b6H
	DD	FLAT:??_C@_06MLJNIEJJ@MAP950@
	DD	03b7H
	DD	FLAT:??_C@_06NCIGLFNI@MAP951@
	DD	03b8H
	DD	FLAT:??_C@_06PJKLOGBL@MAP952@
	DD	03b9H
	DD	FLAT:??_C@_06OALANHFK@MAP953@
	DD	03baH
	DD	FLAT:??_C@_06KPPBEBJN@MAP954@
	DD	03bbH
	DD	FLAT:??_C@_06LGOKHANM@MAP955@
	DD	03bcH
	DD	FLAT:??_C@_06JNMHCDBP@MAP956@
	DD	03bdH
	DD	FLAT:??_C@_06IENMBCFO@MAP957@
	DD	03beH
	DD	FLAT:??_C@_06DEEAOJB@MAP958@
	DD	03bfH
	DD	FLAT:??_C@_06BKFPDPNA@MAP959@
	DD	03c0H
	DD	FLAT:??_C@_06MJNLDKMA@MAP960@
	DD	03c1H
	DD	FLAT:??_C@_06NAMAALIB@MAP961@
	DD	03c2H
	DD	FLAT:??_C@_06PLONFIEC@MAP962@
	DD	03c3H
	DD	FLAT:??_C@_06OCPGGJAD@MAP963@
	DD	03c4H
	DD	FLAT:??_C@_06KNLHPPME@MAP964@
	DD	03c5H
	DD	FLAT:??_C@_06LEKMMOIF@MAP965@
	DD	03c6H
	DD	FLAT:??_C@_06JPIBJNEG@MAP966@
	DD	03c7H
	DD	FLAT:??_C@_06IGJKKMAH@MAP967@
	DD	03c8H
	DD	FLAT:??_C@_06BACLAMI@MAP968@
	DD	03c9H
	DD	FLAT:??_C@_06BIBJIBIJ@MAP969@
	DD	03caH
	DD	FLAT:??_C@_06MIBJFAPH@MAP970@
	DD	03cbH
	DD	FLAT:??_C@_06NBACGBLG@MAP971@
	DD	03ccH
	DD	FLAT:??_C@_06PKCPDCHF@MAP972@
	DD	03cdH
	DD	FLAT:??_C@_06ODDEADDE@MAP973@
	DD	03ceH
	DD	FLAT:??_C@_06KMHFJFPD@MAP974@
	DD	03cfH
	DD	FLAT:??_C@_06LFGOKELC@MAP975@
	DD	03d0H
	DD	FLAT:??_C@_06JOEDPHHB@MAP976@
	DD	03d1H
	DD	FLAT:??_C@_06IHFIMGDA@MAP977@
	DD	03d2H
	DD	FLAT:??_C@_06MANKPP@MAP978@
	DD	03d3H
	DD	FLAT:??_C@_06BJNLOLLO@MAP979@
	DD	03d4H
	DD	FLAT:??_C@_06MDEFBHMK@MAP980@
	DD	03d5H
	DD	FLAT:??_C@_06NKFOCGIL@MAP981@
	DD	03d6H
	DD	FLAT:??_C@_06PBHDHFEI@MAP982@
	DD	03d7H
	DD	FLAT:??_C@_06OIGIEEAJ@MAP983@
	DD	03d8H
	DD	FLAT:??_C@_06KHCJNCMO@MAP984@
	DD	03d9H
	DD	FLAT:??_C@_06LODCODIP@MAP985@
	DD	03daH
	DD	FLAT:??_C@_06JFBPLAEM@MAP986@
	DD	03dbH
	DD	FLAT:??_C@_06IMAEIBAN@MAP987@
	DD	03dcH
	DD	FLAT:??_C@_06LJMJNMC@MAP988@
	DD	03ddH
	DD	FLAT:??_C@_06BCIHKMID@MAP989@
	DD	03deH
	DD	FLAT:??_C@_06MCIHHNPN@MAP990@
	DD	03dfH
	DD	FLAT:??_C@_06NLJMEMLM@MAP991@
	DD	03e0H
	DD	FLAT:??_C@_06PALBBPHP@MAP992@
	DD	03e1H
	DD	FLAT:??_C@_06OJKKCODO@MAP993@
	DD	03e2H
	DD	FLAT:??_C@_06KGOLLIPJ@MAP994@
	DD	03e3H
	DD	FLAT:??_C@_06LPPAIJLI@MAP995@
	DD	03e4H
	DD	FLAT:??_C@_06JENNNKHL@MAP996@
	DD	03e5H
	DD	FLAT:??_C@_06INMGOLDK@MAP997@
	DD	03e6H
	DD	FLAT:??_C@_06KFOPHPF@MAP998@
	DD	03e7H
	DD	FLAT:??_C@_06BDEFMGLE@MAP999@
	DD	03e8H
	DD	FLAT:??_C@_07FBPADLGE@MAP1000@
	DD	03e9H
	DD	FLAT:??_C@_07EIOLAKCF@MAP1001@
	DD	03eaH
	DD	FLAT:??_C@_07GDMGFJOG@MAP1002@
	DD	03ebH
	DD	FLAT:??_C@_07HKNNGIKH@MAP1003@
	DD	03ecH
	DD	FLAT:??_C@_07DFJMPOGA@MAP1004@
	DD	03edH
	DD	FLAT:??_C@_07CMIHMPCB@MAP1005@
	DD	03eeH
	DD	FLAT:??_C@_07HKKJMOC@MAP1006@
	DD	03efH
	DD	FLAT:??_C@_07BOLBKNKD@MAP1007@
	DD	03f0H
	DD	FLAT:??_C@_07JJCJLBGM@MAP1008@
	DD	03f1H
	DD	FLAT:??_C@_07IADCIACN@MAP1009@
	DD	03f2H
	DD	FLAT:??_C@_07FADCFBFD@MAP1010@
	DD	03f3H
	DD	FLAT:??_C@_07EJCJGABC@MAP1011@
	DD	03f4H
	DD	FLAT:??_C@_07GCAEDDNB@MAP1012@
	DD	03f5H
	DD	FLAT:??_C@_07HLBPACJA@MAP1013@
	DD	03f6H
	DD	FLAT:??_C@_07DEFOJEFH@MAP1014@
	DD	03f7H
	DD	FLAT:??_C@_07CNEFKFBG@MAP1015@
	DD	03f8H
	DD	FLAT:??_C@_07GGIPGNF@MAP1016@
	DD	03f9H
	DD	FLAT:??_C@_07BPHDMHJE@MAP1017@
	DD	03faH
	DD	FLAT:??_C@_07JIOLNLFL@MAP1018@
	DD	03fbH
	DD	FLAT:??_C@_07IBPAOKBK@MAP1019@
	DD	03fcH
	DD	FLAT:??_C@_07FCHEOPAK@MAP1020@
	DD	03fdH
	DD	FLAT:??_C@_07ELGPNOEL@MAP1021@
	DD	03feH
	DD	FLAT:??_C@_07GAECINII@MAP1022@
	DD	03ffH
	DD	FLAT:??_C@_07HJFJLMMJ@MAP1023@
	DD	0400H
	DD	FLAT:??_C@_07DGBICKAO@MAP1024@
	DD	0401H
	DD	FLAT:??_C@_07CPADBLEP@MAP1025@
	DD	0402H
	DD	FLAT:??_C@_07ECOEIIM@MAP1026@
	DD	0403H
	DD	FLAT:??_C@_07BNDFHJMN@MAP1027@
	DD	0404H
	DD	FLAT:??_C@_07JKKNGFAC@MAP1028@
	DD	0405H
	DD	FLAT:??_C@_07IDLGFEED@MAP1029@
	DD	0406H
	DD	FLAT:??_C@_07FDLGIFDN@MAP1030@
	DD	0407H
	DD	FLAT:??_C@_07EKKNLEHM@MAP1031@
	DD	0408H
	DD	FLAT:??_C@_07GBIAOHLP@MAP1032@
	DD	0409H
	DD	FLAT:??_C@_07HIJLNGPO@MAP1033@
	DD	040aH
	DD	FLAT:??_C@_07DHNKEADJ@MAP1034@
	DD	040bH
	DD	FLAT:??_C@_07COMBHBHI@MAP1035@
	DD	07fffH
	DD	00H
	ORG $+8
_skins_cons_t DD 01H
	DD	FLAT:??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
	ORG $+256
_ServerMenu DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09CJBILMAG@Game?5Type@
	DD	FLAT:_cv_newgametype
	DB	0aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BG@MLEPJNJO@Advertise?5on?5Internet@
	DD	FLAT:_cv_internetserver
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04ILJDOKOL@Room@
	DD	FLAT:_cv_chooseroom
	DB	01eH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09OGGNGPHP@Room?5Info@
	DD	FLAT:_M_RoomInfoMenu
	DB	028H
	ORG $+3
	DW	0228H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@EHMFLPNI@Server?5Name@
	DD	FLAT:_cv_servername
	DB	032H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05KOHFLOFG@Level@
	DD	FLAT:_cv_nextmap
	DB	050H
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05FHMJPCKA@Start@
	DD	FLAT:_M_StartServer
	DB	082H
	ORG $+3
_Serverdef DD	00H
	DD	FLAT:??_C@_0N@IAAPIHAI@Start?5Server@
	DW	07H
	ORG $+2
	DD	FLAT:_MultiPlayerDef
	DD	FLAT:_ServerMenu
	DD	FLAT:_M_DrawServerMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_ChangeLevelMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09CJBILMAG@Game?5Type@
	DD	FLAT:_cv_newgametype
	DB	01eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05KOHFLOFG@Level@
	DD	FLAT:_cv_nextmap
	DB	03cH
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@PBKLIPB@Change?5Level@
	DD	FLAT:_M_ChangeLevel
	DB	078H
	ORG $+3
_ChangeLevelDef DD 00H
	DD	FLAT:??_C@_0N@PBKLIPB@Change?5Level@
	DW	03H
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_ChangeLevelMenu
	DD	FLAT:_M_DrawServerMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_ChangeTeamMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@CKKBCHJC@Select?5Team@
	DD	FLAT:_cv_dummyteam
	DB	01eH
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07KFLFCEAO@Confirm@
	DD	FLAT:_M_ConfirmTeamChange
	DB	05aH
	ORG $+3
_ChangeTeamDef DD 00H
	DD	FLAT:??_C@_0M@NPGFALIE@Change?5Team@
	DW	02H
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_ChangeTeamMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_TeamScrambleMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@CONBKCME@Scramble?5Method@
	DD	FLAT:_cv_dummyscramble
	DB	01eH
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07KFLFCEAO@Confirm@
	DD	FLAT:_M_ConfirmTeamScramble
	DB	05aH
	ORG $+3
_TeamScrambleDef DD 00H
	DD	FLAT:??_C@_0P@IMNCILHE@Scramble?5Teams@
	DW	02H
	ORG $+2
	DD	FLAT:_MainDef
	DD	FLAT:_TeamScrambleMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_MultiPlayerMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09KHJLDOGO@HOST?5GAME@
	DD	FLAT:_M_StartServerMenu
	DB	0aH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BF@HCDPIHPJ@JOIN?5GAME?5?$CIInternet?$CJ@
	DD	FLAT:_M_ConnectMenu
	DB	014H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@IDEPENBD@JOIN?5GAME?5?$CILAN?$CJ@
	DD	FLAT:_M_ConnectLANMenu
	DB	01eH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BH@KPBOMJON@JOIN?5GAME?5?$CISpecify?5IP?$CJ@
	DD	FLAT:_M_ConnectIPMenu
	DB	028H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@BPOLLGPH@TWO?5PLAYER?5GAME@
	DD	FLAT:_M_Splitscreen
	DB	03cH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@BBGFJJCL@NETWORK?5OPTIONS@
	DD	FLAT:_M_NetOption
	DB	050H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@IGHAIACE@SETUP?5PLAYER@
	DD	FLAT:_M_SetupMultiPlayer
	DB	05aH
	ORG $+3
	DW	07aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@MJGNPGGH@SETUP?5PLAYER?52@
	DD	FLAT:_M_SetupMultiPlayerBis
	DB	064H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08DKDLDHEI@END?5GAME@
	DD	FLAT:_M_EndGame
	DB	078H
	ORG $+3
	ORG $+4
_SecondMouseCfgMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BJ@GFAKFMCM@Second?5Mouse?5Serial?5Port@
	DD	FLAT:_cv_mouse2port
	DB	00H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@BDDJFBE@Use?5Mouse?52@
	DD	FLAT:_cv_usemouse2
	DB	00H
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@OMPLOIED@Mouse2?5Speed@
	DD	FLAT:_cv_mousesens2
	DB	00H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@KEGGIKEO@Always?5MouseLook@
	DD	FLAT:_cv_alwaysfreelook2
	DB	00H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@GEFBMDDG@Mouse?5Move@
	DD	FLAT:_cv_mousemove2
	DB	00H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@EOGFHHGC@Invert?5Mouse2@
	DD	FLAT:_cv_invertmouse2
	DB	00H
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@KBJPCFEH@Mlook?5Speed@
	DD	FLAT:_cv_mlooksens2
	DB	00H
	ORG $+3
_SecondMouseCfgdef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	07H
	ORG $+2
	DD	FLAT:_SetupMultiPlayerDef
	DD	FLAT:_SecondMouseCfgMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	01bH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_SetupMultiPlayerMenu DW 024H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09LPFILBGF@Your?5name@
	DD	FLAT:_M_HandleSetupMultiPlayer
	DB	00H
	ORG $+3
	DW	0328H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@JGOLJJBO@Your?5color@
	DD	FLAT:_cv_playercolor
	DB	010H
	ORG $+3
	DW	024H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@KDLJEAHE@Your?5player@
	DD	FLAT:_M_HandleSetupMultiPlayer
	DB	060H
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@MLNMPNND@Setup?5Controls?4?4?4@
	DD	FLAT:_M_Setup2PControlsMenu
	DB	078H
	ORG $+3
	DW	036H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BH@HAHOOOK@Second?5Mouse?5config?4?4?4@
	DD	FLAT:_SecondMouseCfgdef
	DB	082H
	ORG $+3
	ORG $+4
_TimeAttackMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_06NPAAKFED@Player@
	DD	FLAT:_cv_chooseskin
	DB	032H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05KOHFLOFG@Level@
	DD	FLAT:_cv_nextmap
	DB	041H
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_06LBCKINCK@Replay@
	DD	FLAT:_M_ReplayTimeAttack
	DB	064H
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@CBIBPELE@Start?5?$CINo?5Record?$CJ@
	DD	FLAT:_M_ChooseTimeAttackNoRecord
	DB	073H
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@PGLBMODG@Start?5?$CIRecord?$CJ@
	DD	FLAT:_M_ChooseTimeAttack
	DB	082H
	ORG $+3
_DataOptionsMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BH@BKAIAIKE@Erase?5Time?5Attack?5Data@
	DD	FLAT:_M_EraseData
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BD@POPHDFGA@Erase?5Secrets?5Data@
	DD	FLAT:_M_EraseData
	DB	00H
	ORG $+3
_DataOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	02H
	ORG $+2
	DD	FLAT:_GameOptionDef
	DD	FLAT:_DataOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_ControlsMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BF@GPGACHPP@Player?51?5Controls?4?4?4@
	DD	FLAT:_M_OnePControlsMenu
	DB	014H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BF@BDABACCE@Player?52?5Controls?4?4?4@
	DD	FLAT:_M_TwoPControlsMenu
	DB	01eH
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BE@NLGEPLBF@Joystick?5Options?4?4?4@
	DD	FLAT:_JoystickDef
	DB	03cH
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@DPCCFBBP@Mouse?5Options?4?4?4@
	DD	FLAT:_MouseOptionsDef
	DB	046H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@NDALGNMF@Control?5per?5key@
	DD	FLAT:_cv_controlperkey
	DB	064H
	ORG $+3
_ControlsDef DD	FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	05H
	ORG $+2
	DD	FLAT:_OptionsDef
	DD	FLAT:_ControlsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	018H
	DW	00H
	ORG $+2
	DD	00H
_OnePControlsMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BJ@KGFACILA@Control?5Configuration?4?4?4@
	DD	FLAT:_M_Setup1PControlsMenu
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_06JCBBMBIP@Camera@
	DD	FLAT:_cv_chasecam
	DB	028H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@DPAEEKKE@Analog?5Control@
	DD	FLAT:_cv_useranalog
	DB	03cH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07FOKEMHAB@Autoaim@
	DD	FLAT:_cv_autoaim
	DB	050H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09JOIHIAIG@Crosshair@
	DD	FLAT:_cv_crosshair
	DB	064H
	ORG $+3
_OnePControlsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	05H
	ORG $+2
	DD	FLAT:_ControlsDef
	DD	FLAT:_OnePControlsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	018H
	DW	00H
	ORG $+2
	DD	00H
_TwoPControlsMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BJ@KGFACILA@Control?5Configuration?4?4?4@
	DD	FLAT:_M_Setup2PControlsMenu
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_06JCBBMBIP@Camera@
	DD	FLAT:_cv_chasecam2
	DB	028H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@DPAEEKKE@Analog?5Control@
	DD	FLAT:_cv_useranalog2
	DB	03cH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07FOKEMHAB@Autoaim@
	DD	FLAT:_cv_autoaim2
	DB	050H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09JOIHIAIG@Crosshair@
	DD	FLAT:_cv_crosshair2
	DB	064H
	ORG $+3
_TwoPControlsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	05H
	ORG $+2
	DD	FLAT:_ControlsDef
	DD	FLAT:_TwoPControlsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	018H
	DW	00H
	ORG $+2
	DD	00H
_OptionsMenu DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@MLNMPNND@Setup?5Controls?4?4?4@
	DD	FLAT:_ControlsDef
	DB	0aH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@FCJFFKOD@Game?5Options?4?4?4@
	DD	FLAT:_M_GameOption
	DB	01eH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BE@MIHBMEAN@Gametype?5Options?4?4?4@
	DD	FLAT:_M_GametypeOptions
	DB	028H
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@IONJCCHH@Server?5Options?4?4?4@
	DD	FLAT:_ServerOptionsDef
	DB	032H
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@GFIJKFEG@Sound?5Options?4?4?4@
	DD	FLAT:_SoundDef
	DB	046H
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@JHNOOAMH@Video?5Options?4?4?4@
	DD	FLAT:_VideoOptionsDef
	DB	050H
	ORG $+3
_UnlockChecklistMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04MOKMKBJN@NEXT@
	DD	FLAT:_M_SecretsMenu
	DB	0c0H
	ORG $+3
_UnlockChecklistDef DD 00H
	DD	00H
	DW	01H
	ORG $+2
	DD	FLAT:_SecretsDef
	DD	FLAT:_UnlockChecklistMenu
	DD	FLAT:_M_DrawUnlockChecklist
	DW	0118H
	DW	0b9H
	DW	00H
	ORG $+2
	DD	00H
_CustomChecklistMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04MOKMKBJN@NEXT@
	DD	FLAT:_M_CustomSecretsMenu
	DB	0c0H
	ORG $+3
_CustomChecklistDef DD 00H
	DD	00H
	DW	01H
	ORG $+2
	DD	FLAT:_CustomSecretsDef
	DD	FLAT:_CustomChecklistMenu
	DD	FLAT:_M_DrawCustomChecklist
	DW	0118H
	DW	0b9H
	DW	00H
	ORG $+2
	DD	00H
_SecretsMenu DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@KNHHNDPI@Secrets?5Checklist@
	DD	FLAT:_M_UnlockChecklist
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@INAABHFP@Ultimate?5Cheat@
	DD	FLAT:_M_UltimateCheat
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@IOEHPHNJ@Sound?5Test@
	DD	FLAT:_cv_soundtest
	DB	01eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07JMGDFJEK@Gravity@
	DD	FLAT:_cv_gravity
	DB	032H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@OBJFODL@Throw?5Rings@
	DD	FLAT:_cv_ringslinger
	DB	03cH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@MPKJINNG@Get?5All?5Emeralds@
	DD	FLAT:_M_GetAllEmeralds
	DB	046H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@BOMJPEGC@Level?5Select@
	DD	FLAT:_M_LevelSelect
	DB	05aH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BD@OKJFLHBF@Destroy?5All?5Robots@
	DD	FLAT:_M_DestroyRobots
	DB	06eH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@FEDJDPFC@Beta?5Showcase@
	DD	FLAT:_M_BetaShowcase
	DB	078H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@LBCBILIL@Bonus?5Levels@
	DD	FLAT:_M_Reward
	DB	082H
	ORG $+3
_CustomSecretsMenu DW 020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@KNHHNDPI@Secrets?5Checklist@
	DD	FLAT:_M_CustomChecklist
	DB	00H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07OHGMJLOA@Custom1@
	DD	FLAT:_M_CustomLevelSelect
	DB	0aH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07MMEBMICD@Custom2@
	DD	FLAT:_M_CustomWarp
	DB	014H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07NFFKPJGC@Custom3@
	DD	FLAT:_M_CustomWarp
	DB	01eH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07JKBLGPKF@Custom4@
	DD	FLAT:_M_CustomWarp
	DB	028H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07IDAAFOOE@Custom5@
	DD	FLAT:_M_CustomWarp
	DB	032H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07KICNANCH@Custom6@
	DD	FLAT:_M_CustomWarp
	DB	03cH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07LBDGDMGG@Custom7@
	DD	FLAT:_M_CustomWarp
	DB	046H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07DGKOCAKJ@Custom8@
	DD	FLAT:_M_CustomWarp
	DB	050H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07CPLFBBOI@Custom9@
	DD	FLAT:_M_CustomWarp
	DB	05aH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08HPKLLIBA@Custom10@
	DD	FLAT:_M_CustomWarp
	DB	064H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08GGLAIJFB@Custom11@
	DD	FLAT:_M_CustomWarp
	DB	06eH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08ENJNNKJC@Custom12@
	DD	FLAT:_M_CustomWarp
	DB	078H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08FEIGOLND@Custom13@
	DD	FLAT:_M_CustomWarp
	DB	082H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08BLMHHNBE@Custom14@
	DD	FLAT:_M_CustomWarp
	DB	08cH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08CNMEMFF@Custom15@
	DD	FLAT:_M_CustomWarp
	DB	096H
	ORG $+3
_RewardMenu DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@HHPLLDPH@Sonic?5Into?5Dreams@
	DD	FLAT:_M_NightsGame
	DB	01eH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@CBHOBIIP@Mario?5Koopa?5Blast@
	DD	FLAT:_M_MarioGame
	DB	032H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@OHCNEKBN@SRB1?5Remake@
	DD	FLAT:_M_SRB1Remake
	DB	046H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@IHMDDBIB@SRB1?5Level?5Select@
	DD	FLAT:_M_SRB1LevelSelect
	DB	050H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@BCNHIBFP@Neo?5Aerial?5Garden@
	DD	FLAT:_M_NAGZGame
	DB	064H
	ORG $+3
_LevelSelectMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05KOHFLOFG@Level@
	DD	FLAT:_cv_nextmap
	DB	03cH
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05FHMJPCKA@Start@
	DD	FLAT:_M_LevelSelectWarp
	DB	078H
	ORG $+3
	ORG $+4
_VideoOptionsMenu DW 026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@JCJDPGMD@Video?5Modes?4?4?4@
	DD	FLAT:_VidModeDef
	DB	00H
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BD@FELBJLGK@3D?5Card?5Options?4?4?4@
	DD	FLAT:_M_OpenGLOption
	DB	014H
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@JCLLFKLB@Brightness@
	DD	FLAT:_cv_usegamma
	DB	028H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_06PBECKDNL@V?9SYNC@
	DD	FLAT:_cv_vidwait
	DB	032H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@BOEPICCK@Rain?1Snow?5Density@
	DD	FLAT:_cv_precipdensity
	DB	050H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BE@ENJIPHCK@Rain?1Snow?5Draw?5Dist@
	DD	FLAT:_cv_precipdist
	DB	05aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09LMMLKIFK@FPS?5Meter@
	DD	FLAT:_cv_ticrate
	DB	064H
	ORG $+3
	ORG $+4
_MouseOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09GHKIFCLN@Use?5Mouse@
	DD	FLAT:_cv_usemouse
	DB	00H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@KEGGIKEO@Always?5MouseLook@
	DD	FLAT:_cv_alwaysfreelook
	DB	00H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@GEFBMDDG@Mouse?5Move@
	DD	FLAT:_cv_mousemove
	DB	00H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@KJCDGHGC@Invert?5Mouse@
	DD	FLAT:_cv_invertmouse
	DB	00H
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@FHIPPBDA@Mouse?5Speed@
	DD	FLAT:_cv_mousesens
	DB	00H
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@KBJPCFEH@Mlook?5Speed@
	DD	FLAT:_cv_mlooksens
	DB	00H
	ORG $+3
_GameOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08FLPNBFBF@Show?5HUD@
	DD	FLAT:_cv_showhud
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@CIAPPEJF@HUD?5Player?5Names@
	DD	FLAT:_cv_seenames
	DB	01eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BG@EHGBELJN@High?5Resolution?5Timer@
	DD	FLAT:_cv_timetic
	DB	028H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@OMGNCNBP@Console?5Color@
	DD	FLAT:_cons_backcolor
	DB	03cH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@JHAJCEJB@Uppercase?5Console@
	DD	FLAT:_cv_allcaps
	DB	046H
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@HDAAEHKL@Data?5Options?4?4?4@
	DD	FLAT:_DataOptionsDef
	DB	05aH
	ORG $+3
_NetOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@KCNGICBH@Time?5Limit@
	DD	FLAT:_cv_timelimit
	DB	0aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@MCIGOLA@Point?5Limit@
	DD	FLAT:_cv_pointlimit
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BF@FEPAJPMM@Special?5Ring?5Weapons@
	DD	FLAT:_cv_specialrings
	DB	028H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08MHBHIIHE@Emeralds@
	DD	FLAT:_cv_powerstones
	DB	032H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@OJAPOEPA@Item?5Boxes@
	DD	FLAT:_cv_matchboxes
	DB	03cH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@PJAHAPGP@Item?5Respawn@
	DD	FLAT:_cv_itemrespawn
	DB	046H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@JGGFIAJK@Item?5Respawn?5time@
	DD	FLAT:_cv_itemrespawntime
	DB	050H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BH@HLMNLKOD@Server?5controls?5skin?5?$CD@
	DD	FLAT:_cv_forceskin
	DB	064H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@GEFGBLGK@Sudden?5Death@
	DD	FLAT:_cv_suddendeath
	DB	06eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BD@JOBIPPI@Intermission?5Timer@
	DD	FLAT:_cv_inttime
	DB	078H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BE@GGICAEJH@Advance?5to?5next?5map@
	DD	FLAT:_cv_advancemap
	DB	082H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BK@IHAADEAM@Random?5Monitor?5Toggles?4?4?4@
	DD	FLAT:_M_MonitorToggles
	DB	096H
	ORG $+3
_GametypeOptionsMenu DW 026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@KFANFAKC@Coop?5options?4?4?4@
	DD	FLAT:_CoopOptionsDef
	DB	014H
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@IDOMGDDM@Race?5options?4?4?4@
	DD	FLAT:_RaceOptionsDef
	DB	01eH
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@BFJKPJJ@Match?5options?4?4?4@
	DD	FLAT:_MatchOptionsDef
	DB	028H
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@IJGPKIDF@Tag?5options?4?4?4@
	DD	FLAT:_TagOptionsDef
	DB	032H
	ORG $+3
	DW	026H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@BHJBIAMJ@CTF?5options?4?4?4@
	DD	FLAT:_CTFOptionsDef
	DB	03cH
	ORG $+3
_GametypeOptionsDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	05H
	ORG $+2
	DD	FLAT:_OptionsDef
	DD	FLAT:_GametypeOptionsMenu
	DD	FLAT:_M_DrawGenericMenu
	DW	03cH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_CoopOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@HENINJA@Players?5for?5exit@
	DD	FLAT:_cv_playersforexit
	DB	0aH
	ORG $+3
_RaceOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@OJAPOEPA@Item?5Boxes@
	DD	FLAT:_cv_raceitemboxes
	DB	0aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@BFGLEOEG@Number?5of?5Laps@
	DD	FLAT:_cv_numlaps
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@PDPONBFI@Countdown?5Time@
	DD	FLAT:_cv_countdowntime
	DB	01eH
	ORG $+3
_MatchOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@MBFEOIOF@Scoring?5Type@
	DD	FLAT:_cv_match_scoring
	DB	0aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@MGFBLMJK@Team?5Match?5Type@
	DD	FLAT:_cv_matchtype
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BF@CBGAOEIF@Overtime?5Tie?9Breaker@
	DD	FLAT:_cv_overtime
	DB	01eH
	ORG $+3
_TagOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09DIGDDJAE@Hide?5Time@
	DD	FLAT:_cv_hidetime
	DB	0aH
	ORG $+3
_CTFOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@ODKEOMIE@Flag?5Respawn?5Time@
	DD	FLAT:_cv_flagtime
	DB	0aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@DBGIEMMJ@Autobalance@
	DD	FLAT:_cv_autobalance
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@EGLHEONM@Team?5Scrambler@
	DD	FLAT:_cv_scrambleonchange
	DB	01eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BF@CBGAOEIF@Overtime?5Tie?9Breaker@
	DD	FLAT:_cv_overtime
	DB	028H
	ORG $+3
_MonitorToggleMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08LHFNHBJG@Recycler@
	DD	FLAT:_cv_recycler
	DB	0aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@IDHCJEOP@Teleporters@
	DD	FLAT:_cv_teleporters
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@BNLPCNLM@Super?5Ring@
	DD	FLAT:_cv_superring
	DB	01eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@BPPHIHOE@Super?5Sneakers@
	DD	FLAT:_cv_supersneakers
	DB	028H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@DEAPMFFE@Invincibility@
	DD	FLAT:_cv_invincibility
	DB	032H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@NCNLEGAE@Jump?5Shield@
	DD	FLAT:_cv_jumpshield
	DB	03cH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@IEFJKFBK@Elemental?5Shield@
	DD	FLAT:_cv_watershield
	DB	046H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@LCBDNGLP@Attraction?5Shield@
	DD	FLAT:_cv_ringshield
	DB	050H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@OKCFAGHJ@Force?5Shield@
	DD	FLAT:_cv_forceshield
	DB	05aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@OEMPJAFB@Armageddon?5Shield@
	DD	FLAT:_cv_bombshield
	DB	064H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04EAOGKDEH@1?5Up@
	DD	FLAT:_cv_1up
	DB	06eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@DIDOFEJK@Eggman?5Box@
	DD	FLAT:_cv_eggmanbox
	DB	078H
	ORG $+3
_ServerOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@BNNNNDOK@Internet?5server@
	DD	FLAT:_cv_internetserver
	DB	0aH
	ORG $+3
	DW	0228H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@BNEKDMAC@Master?5server@
	DD	FLAT:_cv_masterserver
	DB	01eH
	ORG $+3
	DW	0228H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@IGAEJANM@Server?5name@
	DD	FLAT:_cv_servername
	DB	03cH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@KMINAODO@Allow?5join?5player@
	DD	FLAT:_cv_allownewplayer
	DB	064H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BG@KKJLKPFK@Allow?5WAD?5Downloading@
	DD	FLAT:_cv_downloading
	DB	06eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@KNBGJLJF@Max?5Players@
	DD	FLAT:_cv_maxplayers
	DB	078H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BH@IMDHPOBF@Consistency?5Protection@
	DD	FLAT:_cv_consfailprotect
	DB	082H
	ORG $+3
_ReadMenu1 DW	06H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_MainDef
	DB	00H
	ORG $+3
_ReadMenu2 DW	06H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_MainDef
	DB	00H
	ORG $+3
	ORG $+4
_SoundMenu DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@EHKOAFEG@Sound?5Volume@
	DD	FLAT:_cv_soundvolume
	DB	00H
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@IBGIBGEC@Music?5Volume@
	DD	FLAT:_cv_digmusicvolume
	DB	0aH
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@HKPELEEF@MIDI?5Volume@
	DD	FLAT:_cv_midimusicvolume
	DB	014H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@JEPMOLJJ@Toggle?5SFX@
	DD	FLAT:_M_ToggleSFX
	DB	028H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BF@OCCAGLEC@Toggle?5Digital?5Music@
	DD	FLAT:_M_ToggleDigital
	DB	032H
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@PFINEHMK@Toggle?5MIDI?5Music@
	DD	FLAT:_M_ToggleMIDI
	DB	03cH
	ORG $+3
_JoystickMenu DW 03aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@FBLLHOLF@Player?51?5Joystick@
	DD	00H
	DB	0aH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BD@JIEEICEB@Select?5Joystick?4?4?4@
	DD	FLAT:_M_Setup1PJoystickMenu
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@BMIJGADJ@Axis?5For?5Turning@
	DD	FLAT:_cv_turnaxis
	DB	01eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@NKAGGEPP@Axis?5For?5Moving@
	DD	FLAT:_cv_moveaxis
	DB	028H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@IIOHMMCB@Axis?5For?5Strafe@
	DD	FLAT:_cv_sideaxis
	DB	032H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@HNBBHBC@Axis?5For?5Looking@
	DD	FLAT:_cv_lookaxis
	DB	03cH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@PLNIHFNI@Axis?5For?5Firing@
	DD	FLAT:_cv_fireaxis
	DB	046H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@KEHIHKMO@Axis?5For?5NFiring@
	DD	FLAT:_cv_firenaxis
	DB	050H
	ORG $+3
	DW	03aH
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BC@MIFJBILE@Player?52?5Joystick@
	DD	00H
	DB	05aH
	ORG $+3
	DW	020H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BD@JIEEICEB@Select?5Joystick?4?4?4@
	DD	FLAT:_M_Setup2PJoystickMenu
	DB	064H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@BMIJGADJ@Axis?5For?5Turning@
	DD	FLAT:_cv_turnaxis2
	DB	06eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@NKAGGEPP@Axis?5For?5Moving@
	DD	FLAT:_cv_moveaxis2
	DB	078H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@IIOHMMCB@Axis?5For?5Strafe@
	DD	FLAT:_cv_sideaxis2
	DB	082H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@HNBBHBC@Axis?5For?5Looking@
	DD	FLAT:_cv_lookaxis2
	DB	08cH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@PLNIHFNI@Axis?5For?5Firing@
	DD	FLAT:_cv_fireaxis2
	DB	096H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@KEHIHKMO@Axis?5For?5NFiring@
	DD	FLAT:_cv_firenaxis2
	DB	0a0H
	ORG $+3
_JoystickSetMenu DW 00H
	ORG $+2
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	00H
	DD	FLAT:_M_AssignJoystick
	DB	030H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_AssignJoystick
	DB	031H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_AssignJoystick
	DB	032H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_AssignJoystick
	DB	033H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_AssignJoystick
	DB	034H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_AssignJoystick
	DB	035H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_AssignJoystick
	DB	036H
	ORG $+3
	ORG $+4
_ControlMenu DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07NALHMFBO@Forward@
	DD	FLAT:_M_ChangeControl
	DB	01H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07FHPCIAHC@Reverse@
	DD	FLAT:_M_ChangeControl
	DB	02H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09LCBMCKFL@Turn?5Left@
	DD	FLAT:_M_ChangeControl
	DB	06H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@OGPEJLDP@Turn?5Right@
	DD	FLAT:_M_ChangeControl
	DB	07H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04BIEPDJCB@Jump@
	DD	FLAT:_M_ChangeControl
	DB	020H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04JBCJKLOD@Spin@
	DD	FLAT:_M_ChangeControl
	DB	014H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09CBPLEBLF@Ring?5Toss@
	DD	FLAT:_M_ChangeControl
	DB	011H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BB@EPMANIOJ@Ring?5Toss?5Normal@
	DD	FLAT:_M_ChangeControl
	DB	012H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05CIILEADG@Taunt@
	DD	FLAT:_M_ChangeControl
	DB	015H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09BCEJBPBI@Toss?5Flag@
	DD	FLAT:_M_ChangeControl
	DB	013H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09IPFINODH@Strafe?5On@
	DD	FLAT:_M_ChangeControl
	DB	03H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@GGMECGAO@Strafe?5Left@
	DD	FLAT:_M_ChangeControl
	DB	05H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@PNCBOGEI@Strafe?5Right@
	DD	FLAT:_M_ChangeControl
	DB	04H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07GLCLAKHI@Look?5Up@
	DD	FLAT:_M_ChangeControl
	DB	019H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09PIAJLAMM@Look?5Down@
	DD	FLAT:_M_ChangeControl
	DB	01aH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@LLHKMOAD@Center?5View@
	DD	FLAT:_M_ChangeControl
	DB	01bH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09GPOHNNCP@Mouselook@
	DD	FLAT:_M_ChangeControl
	DB	01cH
	ORG $+3
	DW	030H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04CJGEDOF@next@
	DD	FLAT:_M_ControlDef2
	DB	090H
	ORG $+3
_ControlMenu2 DW 060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08JJCLBGHE@Talk?5key@
	DD	FLAT:_M_ChangeControl
	DB	01dH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@BBPGCFOO@Team?9Talk?5key@
	DD	FLAT:_M_ChangeControl
	DB	01eH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@GIBJCGBN@Rankings?1Scores@
	DD	FLAT:_M_ChangeControl
	DB	01fH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07PGLPGHFC@Console@
	DD	FLAT:_M_ChangeControl
	DB	021H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@EIPCPGC@Next?5Weapon@
	DD	FLAT:_M_ChangeControl
	DB	08H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@JKMNOCBG@Prev?5Weapon@
	DD	FLAT:_M_ChangeControl
	DB	09H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@BDJEDBCP@Weapon?5Slot?51@
	DD	FLAT:_M_ChangeControl
	DB	0aH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@DILJGCOM@Weapon?5Slot?52@
	DD	FLAT:_M_ChangeControl
	DB	0bH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@CBKCFDKN@Weapon?5Slot?53@
	DD	FLAT:_M_ChangeControl
	DB	0cH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@GOODMFGK@Weapon?5Slot?54@
	DD	FLAT:_M_ChangeControl
	DB	0dH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@HHPIPECL@Weapon?5Slot?55@
	DD	FLAT:_M_ChangeControl
	DB	0eH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@FMNFKHOI@Weapon?5Slot?56@
	DD	FLAT:_M_ChangeControl
	DB	0fH
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@EFMOJGKJ@Weapon?5Slot?57@
	DD	FLAT:_M_ChangeControl
	DB	010H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@ODACKHM@Rotate?5Camera?5L@
	DD	FLAT:_M_ChangeControl
	DB	016H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@NKHBBFKD@Rotate?5Camera?5R@
	DD	FLAT:_M_ChangeControl
	DB	017H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@NNBJMKBI@Reset?5Camera@
	DD	FLAT:_M_ChangeControl
	DB	018H
	ORG $+3
	DW	060H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05PEDNBBBD@Pause@
	DD	FLAT:_M_ChangeControl
	DB	022H
	ORG $+3
	DW	036H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04CJGEDOF@next@
	DD	FLAT:_ControlDef
	DB	08cH
	ORG $+3
_VideoModeMenu DW 04H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_M_HandleVideoMode
	DB	00H
	ORG $+3
	ORG $+4
_LoadGameMenu DW 00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_LoadSelect
	DB	031H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_LoadSelect
	DB	032H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_LoadSelect
	DB	033H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_LoadSelect
	DB	034H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_LoadSelect
	DB	035H
	ORG $+3
	DW	00H
	ORG $+2
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	00H
	DD	FLAT:_M_PlayWithNoSave
	DB	036H
	ORG $+3
_MessageDef DD	00H
	DD	00H
	DW	01H
	ORG $+2
	DD	00H
	DD	FLAT:_MessageMenu
	DD	FLAT:_M_DrawMessageMenu
	DW	00H
	DW	00H
	DW	00H
	ORG $+2
	DD	00H
	ORG $+4
_OpenGLOptionsMenu DW 028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0O@FGEEFGGF@Field?5of?5view@
	DD	FLAT:_cv_grfov
	DB	0aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_07MJEANAEL@Quality@
	DD	FLAT:_cv_scr_depth
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0P@JCONCFCP@Texture?5Filter@
	DD	FLAT:_cv_grfiltermode
	DB	01eH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@OHBPMNLF@Anisotropic@
	DD	FLAT:_cv_granisotropicmode
	DB	028H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0L@OOJOFIBJ@Fullscreen@
	DD	FLAT:_cv_fullscreen
	DB	032H
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0BA@IKJHKILP@Translucent?5HUD@
	DD	FLAT:_cv_grtranslucenthud
	DB	03cH
	ORG $+3
	DW	036H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_06OOMBMMNL@Fog?4?4?4@
	DD	FLAT:_OGL_FogDef
	DB	050H
	ORG $+3
	DW	036H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_08DMCEPACN@Gamma?4?4?4@
	DD	FLAT:_OGL_ColorDef
	DB	05aH
	ORG $+3
_OGL_FogMenu DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_03JPDFGHP@Fog@
	DD	FLAT:_cv_grfog
	DB	00H
	ORG $+3
	DW	024H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_09KDOIHMJP@Fog?5color@
	DD	FLAT:_M_HandleFogColor
	DB	0aH
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0M@MDBKFHFI@Fog?5density@
	DD	FLAT:_cv_grfogdensity
	DB	014H
	ORG $+3
	DW	028H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_0N@OEAKGAGI@Software?5Fog@
	DD	FLAT:_cv_grsoftwarefog
	DB	01eH
	ORG $+3
_OGL_ColorMenu DW 0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_03FAAAOPJM@red@
	DD	FLAT:_cv_grgammared
	DB	0aH
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_05GBEEJKMC@green@
	DD	FLAT:_cv_grgammagreen
	DB	014H
	ORG $+3
	DW	0128H
	ORG $+2
	DD	00H
	DD	FLAT:??_C@_04OBGPFBCN@blue@
	DD	FLAT:_cv_grgammablue
	DB	01eH
	ORG $+3
_OpenGLOptionDef DD FLAT:??_C@_08LKGFJEJH@M_OPTTTL@
	DD	FLAT:??_C@_07KDKMIPIP@OPTIONS@
	DW	08H
	ORG $+2
	DD	FLAT:_VideoOptionsDef
	DD	FLAT:_OpenGLOptionsMenu
	DD	FLAT:_M_DrawOpenGLMenu
	DW	01eH
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsnprintf
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	___snprintf
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	_M_Responder
PUBLIC	_M_Ticker
PUBLIC	_M_Drawer
PUBLIC	_M_Init
PUBLIC	_M_StartControlPanel
PUBLIC	_M_DrawTextBox
PUBLIC	_M_SwitchSplitscreen
PUBLIC	_M_StartMessage
PUBLIC	_M_QuitResponse
PUBLIC	_M_SetupNextMenu
PUBLIC	_M_ClearMenus
PUBLIC	_M_ExitGameResponse
PUBLIC	_M_GotLowEnoughTime
PUBLIC	_M_GotEnoughEmblems
PUBLIC	_M_CheatActivationResponder
PUBLIC	_M_AlterRoomOptions
PUBLIC	_M_AlterRoomInfo
PUBLIC	??_C@_08PLKNNBAH@M_CURSOR@			; `string'
PUBLIC	??_C@_0BB@FNMPHPBO@connect?5node?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BI@BFELJAMF@Connecting?5to?5server?4?4?4@ ; `string'
PUBLIC	??_C@_0M@LNGHCJI@connect?5?$CFs?6@		; `string'
PUBLIC	??_C@_0BA@GHOLBGH@PING?5?5?5PLYS?5?5GT@		; `string'
PUBLIC	??_C@_0CD@OHAIHFDF@Error?5contacting?5the?5Master?5Ser@ ; `string'
PUBLIC	??_C@_0BB@JACHKAHP@No?5servers?5found@		; `string'
PUBLIC	??_C@_02KCJHMOMO@?$IFM@				; `string'
PUBLIC	??_C@_02DIJJJPPC@?$IDC@				; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu@				; `string'
PUBLIC	??_C@_0CI@OFNJKBHE@M_DrawConnectMenu?3?5Unknown?5game@ ; `string'
PUBLIC	??_C@_09KKPNDFC@?$CF02d?1?$CF02d@		; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_0BP@EHEFNEDJ@Warning?3?5Room?5has?5been?5changed@ ; `string'
PUBLIC	??_C@_0BI@LKGEIHMO@since?5the?5last?5refresh?4@	; `string'
PUBLIC	??_C@_0BM@FFPMMFF@?$IFM?$IC?5?$DN?5Game?5is?5modified?4?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BK@KIBBHFCG@?$IDC?$IC?5?$DN?5Cheats?5are?5enabled?4@ ; `string'
PUBLIC	??_C@_0CL@BNPJEODI@M_DrawConnectLANMenu?3?5Unknown?5g@ ; `string'
PUBLIC	??_C@_07IJKPKDGN@?5v2?40?47@			; `string'
PUBLIC	??_C@_0NH@JDGDIMIN@New?5updates?5are?5available?5for?5S@ ; `string'
PUBLIC	??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@ ; `string'
PUBLIC	??_C@_0BK@LLIGIMGM@Contacting?5list?5server?4?4?4@ ; `string'
PUBLIC	??_C@_0N@PJMDIAEP@Please?5wait?4@		; `string'
PUBLIC	??_C@_0CH@MIMHNKJK@Searching?5Local?5Network?5for?5Ser@ ; `string'
PUBLIC	??_C@_0BH@FEIAKPDG@map?5?$CFs?5?9gametype?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BF@GABIEGHI@changeteam?5spectator@	; `string'
PUBLIC	??_C@_0P@FHJJFDAC@teamscramble?51@		; `string'
PUBLIC	??_C@_0P@HMLEAAMB@teamscramble?52@		; `string'
PUBLIC	??_C@_0EE@NNCCBNBK@The?5server?5is?5not?5allowing?6?5tea@ ; `string'
PUBLIC	??_C@_0P@HLFJDFHH@changeteam?5red@		; `string'
PUBLIC	??_C@_0BA@NGJMDDAH@changeteam?5blue@		; `string'
PUBLIC	??_C@_09PLHIKHMP@stopdemo?6@			; `string'
PUBLIC	??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@		; `string'
PUBLIC	??_C@_03KFFLPELC@?$CFsP@			; `string'
PUBLIC	??_C@_08IKJCNOHF@BLANKLVL@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0CD@KFHIAFFD@You?5aren?8t?5in?5a?5game?$CB?6Press?5a?5k@ ; `string'
PUBLIC	??_C@_0DD@KDGACFJD@Only?5the?5server?5may?5use?5this?5co@ ; `string'
PUBLIC	??_C@_0DD@MNGCLAIB@You?5have?5to?5be?5in?5a?5game?6to?5do?5@ ; `string'
PUBLIC	??_C@_07CMIPDAGF@?$CFs?5?$CC?$CFs?$CC@		; `string'
PUBLIC	??_C@_08MHBLPCGN@?$CFs?5?$CC?$CFs?$CC?6@	; `string'
PUBLIC	??_C@_0BH@LGMFNFJP@Speed?3?6Ability?3?6Notes?3@	; `string'
PUBLIC	??_C@_0CM@EJGLNFLC@Statistics?5not?5available?6in?5mod@ ; `string'
PUBLIC	??_C@_07NGEAEDOH@x?5?$CFd?1?$CFd@		; `string'
PUBLIC	??_C@_08FNBLLBPP@EMBLICON@			; `string'
PUBLIC	??_C@_03KECJIMKH@0?$CFi@			; `string'
PUBLIC	??_C@_03CLPIFBDJ@?$CFi?3@			; `string'
PUBLIC	??_C@_02IKAHHCAI@?$CFi@				; `string'
PUBLIC	??_C@_0BB@IMDFOONP@Total?5Play?5Time?3@		; `string'
PUBLIC	??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@		; `string'
PUBLIC	??_C@_0BC@MEOCEIMN@Best?5Time?5Attack?3@	; `string'
PUBLIC	??_C@_0L@OFKMJLDC@LEVEL?5NAME@			; `string'
PUBLIC	??_C@_09MHGDOBIE@BEST?5TIME@			; `string'
PUBLIC	??_C@_08BJNODIDA@?$CFc?5?$CFc?5?$CFc@		; `string'
PUBLIC	??_C@_05GDDABNPK@GOTIT@				; `string'
PUBLIC	??_C@_06MMLIDDG@NEEDIT@				; `string'
PUBLIC	??_C@_05DIALNFFA@?$CFs?5?$CFd@			; `string'
PUBLIC	??_C@_0L@HLIECKEP@BEST?5TIMES@			; `string'
PUBLIC	??_C@_06HADJKLDE@Page?52@			; `string'
PUBLIC	??_C@_06GJCCJKHF@Page?53@			; `string'
PUBLIC	??_C@_06CGGDAMLC@Page?54@			; `string'
PUBLIC	??_C@_06DPHIDNPD@Page?55@			; `string'
PUBLIC	??_C@_0BJ@GMJPPENF@?$CFs?2replay?2?$CFs?2?$CFs?9?$CF02d?4lmp@ ; `string'
PUBLIC	??_C@_0CJ@LPPDOMOD@This?5cannot?5be?5done?5in?5a?5modifi@ ; `string'
PUBLIC	??_C@_0CC@HAALCNEE@No?5time?9attackable?5levels?5found@ ; `string'
PUBLIC	??_C@_08LPMGDBIJ@SRB2BACK@			; `string'
PUBLIC	??_C@_04FDAHLBCH@?$CF02i@			; `string'
PUBLIC	??_C@_0M@GJGJGAFB@?$CFs?3?$CFs?3?$CFs?4?$CFs@	; `string'
PUBLIC	??_C@_0BI@PJLKBKAB@Best?5Time?3?5?$CFi?3?$CF02i?4?$CF02i@ ; `string'
PUBLIC	??_C@_0M@HEGGCDPF@?$CFs?2temp?4lmp@		; `string'
PUBLIC	??_C@_04FGEHGIFJ@temp@				; `string'
PUBLIC	??_C@_0BF@IKODIFFP@?$CFs?2replay?2?$CFs?2?$CFs?9?$CF02d@ ; `string'
PUBLIC	??_C@_0CI@IKKFBPJD@A?5game?5cannot?5be?5running?4?6End?5i@ ; `string'
PUBLIC	??_C@_0DN@MDNCDHNK@Are?5you?5sure?5you?5want?5to?5delete@ ; `string'
PUBLIC	??_C@_0DJ@FBANMDOI@Are?5you?5sure?5you?5want?5to?5delete@ ; `string'
PUBLIC	??_C@_0DC@ILBFANCE@You?5need?5to?5be?5playing?5and?5in?6a@ ; `string'
PUBLIC	??_C@_0CF@DPCPKJLJ@You?5can?8t?5do?5this?5in?6a?5network?5@ ; `string'
PUBLIC	??_C@_0BN@HMNPBBDK@You?5now?5have?5all?57?5emeralds?4@ ; `string'
PUBLIC	??_C@_0DP@PPKODPLM@Do?5you?5want?5to?5destroy?5all?6robo@ ; `string'
PUBLIC	??_C@_0BB@MDDPHAEN@Find?5All?5Emblems@		; `string'
PUBLIC	??_C@_0BG@KIHNOHNI@Finish?51P?6w?1?5Emeralds@	; `string'
PUBLIC	??_C@_0BA@BCDLPMCA@Find?510?5Emblems@		; `string'
PUBLIC	??_C@_0BA@ILNJJKCB@Find?520?5Emblems@		; `string'
PUBLIC	??_C@_0O@MKKBLIHF@Pandora?8s?5Box@		; `string'
PUBLIC	??_C@_0BA@PMCOIFCM@Extra?5Emblem?5?$CD1@	; `string'
PUBLIC	??_C@_09LPIKFCAA@Finish?51P@			; `string'
PUBLIC	??_C@_0BA@NHADNGOP@Extra?5Emblem?5?$CD2@	; `string'
PUBLIC	??_C@_0BA@MOBIOHKO@Extra?5Emblem?5?$CD3@	; `string'
PUBLIC	??_C@_0BI@BCFFBPDP@Finish?51P?5in?623?5minutes@	; `string'
PUBLIC	??_C@_0BA@IBFJHBGJ@Extra?5Emblem?5?$CD4@	; `string'
PUBLIC	??_C@_0BL@BNEGKOBM@Perfect?5Bonus?5on?6any?5stage@ ; `string'
PUBLIC	??_C@_01NFFPALBN@Y@				; `string'
PUBLIC	??_C@_01NANMIPIL@N@				; `string'
PUBLIC	??_C@_0EG@KAIGCOA@Checklist?5does?5not?5apply?6for?5th@ ; `string'
PUBLIC	??_C@_0BN@JPGNEEFB@No?5selectable?5levels?5found?4?6@ ; `string'
PUBLIC	??_C@_08LLICGNCG@M_SLIDEL@			; `string'
PUBLIC	??_C@_08KCJJFMGH@M_SLIDEM@			; `string'
PUBLIC	??_C@_08GPMDFCPJ@M_SLIDER@			; `string'
PUBLIC	??_C@_08DMBKHBOJ@M_SLIDEC@			; `string'
PUBLIC	??_C@_0DF@JBIJLGLN@You?5are?5not?5the?5server?6You?5can?8@ ; `string'
PUBLIC	??_C@_04DOKPJKJF@HELP@				; `string'
PUBLIC	??_C@_06OHOFJIMA@BULMER@			; `string'
PUBLIC	??_C@_0N@MKCHMEKJ@SFX?5Enabled?6@		; `string'
PUBLIC	??_C@_0O@BMBFHMHA@SFX?5Disabled?6@		; `string'
PUBLIC	??_C@_0BH@GBPNJPKK@Digital?5Music?5Enabled?6@	; `string'
PUBLIC	??_C@_0BI@IFLHPHJB@Digital?5Music?5Disabled?6@	; `string'
PUBLIC	??_C@_0BE@MKCHOEKH@MIDI?5Music?5Enabled?6@	; `string'
PUBLIC	??_C@_0BF@PLKNFBFH@MIDI?5Music?5Disabled?6@	; `string'
PUBLIC	??_C@_0M@IOKPNGEC@Unavailable@			; `string'
PUBLIC	??_C@_0CC@LLDDEAJF@SET?5CONTROLS?5FOR?5SECONDARY?5PLAY@ ; `string'
PUBLIC	??_C@_0CK@HFKGFGA@PRESS?5ENTER?5TO?5CHANGE?0?5BACKSPAC@ ; `string'
PUBLIC	??_C@_03JMFMNIFM@?9?9?9@			; `string'
PUBLIC	??_C@_04FJKIFICP@?5or?5@			; `string'
PUBLIC	??_C@_0CG@PGEKJFLH@Hit?5the?5new?5key?5for?6?$CFs?6ESC?5for?5@ ; `string'
PUBLIC	??_C@_07MFGEBFN@?$CFu?$CF?$CKc?$CFu@		; `string'
PUBLIC	??_C@_0BN@FNAEINCM@Green?5modes?5are?5recommended?4@ ; `string'
PUBLIC	??_C@_0CD@FMPPEICP@Non?9green?5modes?5are?5known?5to?5ca@ ; `string'
PUBLIC	??_C@_0CB@GDFMPIDM@random?5crashes?4?5Use?5at?5own?5risk@ ; `string'
PUBLIC	??_C@_0BA@CNMNCLAD@TESTING?5MODE?5?$CFs@	; `string'
PUBLIC	??_C@_0BJ@OGLLKDKJ@Please?5wait?55?5seconds?4?4?4@ ; `string'
PUBLIC	??_C@_0BI@JABMHELI@Press?5ENTER?5to?5set?5mode@	; `string'
PUBLIC	??_C@_0BN@PFFJDAPB@T?5to?5test?5mode?5for?55?5seconds@ ; `string'
PUBLIC	??_C@_0BJ@EPFOILEI@D?5to?5make?5?$CFs?5the?5default@ ; `string'
PUBLIC	??_C@_0CD@LHLINNAO@Current?5default?5is?5?$CFdx?$CFd?5?$CI?$CFd?5bi@ ; `string'
PUBLIC	??_C@_0BC@NCKPKANH@Press?5ESC?5to?5exit@	; `string'
PUBLIC	??_C@_05HKAKDGKI@EMPTY@				; `string'
PUBLIC	??_C@_07KKABJDOO@NO?5SAVE@			; `string'
PUBLIC	??_C@_0L@IIPDAPGP@COMPLETED?$CB@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_06PKDIGJKN@CHAOS1@			; `string'
PUBLIC	??_C@_04GPFKCGHK@x?5?$CFd@			; `string'
PUBLIC	??_C@_05CLPGBJMN@ONEUP@				; `string'
PUBLIC	??_C@_07HKMDFLPF@CONTINS@			; `string'
PUBLIC	??_C@_0CA@DEOHFJCO@Hit?5backspace?5to?5delete?5a?5save?4@ ; `string'
PUBLIC	??_C@_0N@KJPOLLCA@Save?5Slot?5?$CFd@		; `string'
PUBLIC	??_C@_0BE@NJFMHIAJ@Play?5Without?5Saving@	; `string'
PUBLIC	??_C@_0CD@BLMLPMML@Note?3?5Game?5must?5be?5reset?5to?5rec@ ; `string'
PUBLIC	??_C@_0BO@KOILLOPH@statistics?5or?5unlock?5secrets?4@ ; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs@			; `string'
PUBLIC	??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_08CIJFPPFK@M_LSLEFT@			; `string'
PUBLIC	??_C@_08DEDMDPBC@M_LSCNTR@			; `string'
PUBLIC	??_C@_08FHNCDDDI@M_LSRGHT@			; `string'
PUBLIC	??_C@_08GEEHPPHO@GAMEQUIT@			; `string'
PUBLIC	??_C@_08FLCFKFEE@M_THERML@			; `string'
PUBLIC	??_C@_08IPGEJKJL@M_THERMR@			; `string'
PUBLIC	??_C@_08ECDOJEAF@M_THERMM@			; `string'
PUBLIC	??_C@_08HAAIPGIH@M_THERMO@			; `string'
PUBLIC	??_C@_0CL@IAAKCKC@M_DrawMessageMenu?3?5too?5long?5seg@ ; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_0M@FHKEBODE@screenshot?6@			; `string'
PUBLIC	??_C@_0DH@ECOMCFGC@Are?5you?5sure?5you?5want?5to?5delete@ ; `string'
PUBLIC	??_C@_0BJ@JLIKDOCG@saveconfig?5?$CC?$CFs?$CC?5?9silent?6@ ; `string'
PUBLIC	??_C@_0BB@OODDODCL@Gamma?5correction@		; `string'
PUBLIC	??_C@_0DH@OPAAAELF@You?5are?5in?5software?5mode?6You?5ca@ ; `string'
PUBLIC	??_C@_06GEKNBBDK@000000@			; `string'
PUBLIC	__real@3d800000
PUBLIC	__real@43180000
PUBLIC	__real@47800000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_strncpy:PROC
EXTRN	_strlwr:PROC
EXTRN	_qsort:PROC
EXTRN	_atoi:PROC
EXTRN	_strlcpy:PROC
EXTRN	_fclose:PROC
EXTRN	_fflush:PROC
EXTRN	_fopen:PROC
EXTRN	_fputs:PROC
EXTRN	_remove:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsscanf:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_COM_BufAddText:PROC
EXTRN	_COM_ImmedExecute:PROC
EXTRN	_CV_RegisterVar:PROC
EXTRN	_CV_Set:PROC
EXTRN	_CV_SetValue:PROC
EXTRN	_CV_AddValue:PROC
EXTRN	_CV_ResetCheatNetVars:PROC
EXTRN	_SCR_SetDefaultMode:PROC
EXTRN	_W_CheckNumForName:PROC
EXTRN	_W_GetNumForName:PROC
EXTRN	_W_CachePatchName:PROC
EXTRN	_W_CachePatchNum:PROC
EXTRN	_D_StartTitle:PROC
EXTRN	_Command_ExitGame_f:PROC
EXTRN	_D_MapChange:PROC
EXTRN	_CON_ToggleOff:PROC
EXTRN	_P_DestroyRobots:PROC
EXTRN	_R_SkinAvailable:PROC
EXTRN	_SplitScreen_OnChange:PROC
EXTRN	_HU_Drawer:PROC
EXTRN	_HU_clearChatChars:PROC
EXTRN	_SV_StartSinglePlayerServer:PROC
EXTRN	_CL_UpdateServerList:PROC
EXTRN	_Playing:PROC
EXTRN	_G_BuildMapName:PROC
EXTRN	_G_DeferedInitNew:PROC
EXTRN	_G_LoadGame:PROC
EXTRN	_G_RecordDemo:PROC
EXTRN	_G_BeginRecording:PROC
EXTRN	_G_DoPlayDemo:PROC
EXTRN	_G_CheckDemoStatus:PROC
EXTRN	_G_SetExitGameFlag:PROC
EXTRN	_G_SetGamestate:PROC
EXTRN	_G_TicsToHours:PROC
EXTRN	_G_TicsToMinutes:PROC
EXTRN	_G_TicsToSeconds:PROC
EXTRN	_G_TicsToCentiseconds:PROC
EXTRN	_G_KeynumToString:PROC
EXTRN	_G_ClearControlKeys:PROC
EXTRN	_G_CheckDoubleUsage:PROC
EXTRN	_S_Init:PROC
EXTRN	_S_StopSounds:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_S_ChangeMusic:PROC
EXTRN	_S_StopMusic:PROC
EXTRN	_I_GetTime:PROC
EXTRN	_I_Sleep:PROC
EXTRN	_I_OsPolling:PROC
EXTRN	_I_Quit:PROC
EXTRN	_I_NumJoys:PROC
EXTRN	_I_GetJoyName:PROC
EXTRN	_V_DrawMappedPatch:PROC
EXTRN	_V_DrawScaledPatch:PROC
EXTRN	_V_DrawSmallScaledPatch:PROC
EXTRN	_V_DrawSmallMappedPatch:PROC
EXTRN	_V_DrawScaledPic:PROC
EXTRN	_V_DrawFill:PROC
EXTRN	_V_DrawFlatFill:PROC
EXTRN	_V_DrawFadeScreen:PROC
EXTRN	_V_DrawCharacter:PROC
EXTRN	_V_DrawString:PROC
EXTRN	_V_DrawCenteredString:PROC
EXTRN	_V_DrawRightAlignedString:PROC
EXTRN	_V_StringWidth:PROC
EXTRN	_V_DrawPatchFill:PROC
EXTRN	_VID_NumModes:PROC
EXTRN	_VID_GetModeName:PROC
EXTRN	_I_UpdateNoBlit:PROC
EXTRN	_I_FinishUpdate:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_StrDup:PROC
EXTRN	_F_WipeEndScreen:PROC
EXTRN	_F_RunWipe:PROC
EXTRN	_D_CloseConnection:PROC
EXTRN	_MSCloseUDPSocket:PROC
EXTRN	_GetRoomsList:PROC
EXTRN	_GetMODVersion:PROC
EXTRN	_FIL_ReadFile:PROC
EXTRN	_FIL_FileExists:PROC
EXTRN	_FIL_ReadFileOK:PROC
EXTRN	_I_StartupSound:PROC
EXTRN	_I_InitMIDIMusic:PROC
EXTRN	_I_InitDigMusic:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_gamestate:DWORD
EXTRN	_M_Memcpy:DWORD
EXTRN	_savegamename:BYTE
EXTRN	_text:BYTE
EXTRN	_vid:BYTE
EXTRN	_setmodeneeded:DWORD
EXTRN	_cv_scr_width:BYTE
EXTRN	_cv_scr_height:BYTE
EXTRN	_srb2home:BYTE
EXTRN	_cv_playername:BYTE
EXTRN	_cv_usejoystick:BYTE
EXTRN	_cv_usejoystick2:BYTE
EXTRN	_cv_skin:BYTE
EXTRN	_cv_playername2:BYTE
EXTRN	_cv_playercolor2:BYTE
EXTRN	_cv_skin2:BYTE
EXTRN	_cv_tagtype:BYTE
EXTRN	_cv_cheats:BYTE
EXTRN	_cv_allowteamchange:BYTE
EXTRN	_cv_racetype:BYTE
EXTRN	_yellowmap:DWORD
EXTRN	_graymap:DWORD
EXTRN	_states:BYTE
EXTRN	_mobjinfo:BYTE
EXTRN	_numskins:DWORD
EXTRN	_skins:BYTE
EXTRN	_translationtables:BYTE
EXTRN	_viewborderlump:BYTE
EXTRN	_shiftxform:DWORD
EXTRN	_chat_on:DWORD
EXTRN	_gamemap:WORD
EXTRN	_cursaveslot:DWORD
EXTRN	_lastmapsaved:WORD
EXTRN	_gamecomplete:DWORD
EXTRN	_modifiedgame:DWORD
EXTRN	_savemoddata:DWORD
EXTRN	_timeattacking:DWORD
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_nomidimusic:DWORD
EXTRN	_nosound:DWORD
EXTRN	_nodigimusic:DWORD
EXTRN	_music_disabled:DWORD
EXTRN	_sound_disabled:DWORD
EXTRN	_digital_disabled:DWORD
EXTRN	_paused:BYTE
EXTRN	_consoleplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_spstage_start:WORD
EXTRN	_spstage_end:WORD
EXTRN	_lvltable:BYTE
EXTRN	_mapheaderinfo:BYTE
EXTRN	_emeralds:WORD
EXTRN	_totalplaytime:DWORD
EXTRN	_numemblems:DWORD
EXTRN	_emblemlocations:BYTE
EXTRN	_timedata:BYTE
EXTRN	_mapvisited:BYTE
EXTRN	_grade:DWORD
EXTRN	_timesbeaten:DWORD
EXTRN	_gametic:DWORD
EXTRN	_debugfile:DWORD
EXTRN	_serverlist:BYTE
EXTRN	_serverlistcount:DWORD
EXTRN	_server:DWORD
EXTRN	_dedicated:DWORD
EXTRN	_adminplayer:DWORD
EXTRN	_timeattackfolder:ZWORD
EXTRN	_customversionstring:BYTE
EXTRN	_players:BYTE
EXTRN	_demoplayback:DWORD
EXTRN	_demorecording:DWORD
EXTRN	_gamecontrol:BYTE
EXTRN	_gamecontrolbis:BYTE
EXTRN	_rendermode:DWORD
EXTRN	_WipeInAction:DWORD
EXTRN	_cv_grfogcolor:BYTE
EXTRN	_oldroomnum:DWORD
EXTRN	_room_list:BYTE
EXTRN	_configfile:BYTE
EXTRN	_st_borderpatchnum:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_pandoralevelselect DD 01H DUP (?)
_fromloadgame DD 01H DUP (?)
_lastmapnum DD	01H DUP (?)
_oldlastmapnum DD 01H DUP (?)
_saveSlotSelected DD 01H DUP (?)
_joystickInfo DB 0c8H DUP (?)
_serverlistpage DD 01H DUP (?)
_savegameinfo DB 02a8H DUP (?)
_setupm_ip DB	010H DUP (?)
_localservercount DD 01H DUP (?)
_multi_tics DD	01H DUP (?)
_multi_state DD	01H DUP (?)
_setupm_name DB	016H DUP (?)
	ALIGN	4

_setupm_player DD 01H DUP (?)
_setupm_cvskin DD 01H DUP (?)
_setupm_cvcolor DD 01H DUP (?)
_setupm_cvname DD 01H DUP (?)
_setupcontrols_secondaryplayer DD 01H DUP (?)
_setupcontrols DD 01H DUP (?)
_controltochange DD 01H DUP (?)
?tmp@?1??M_ChangeControl@@9@9 DB 037H DUP (?)		; `M_ChangeControl'::`2'::tmp
	ALIGN	4

_vidm_testingmode DD 01H DUP (?)
_vidm_previousmode DD 01H DUP (?)
_vidm_current DD 01H DUP (?)
_vidm_nummodes DD 01H DUP (?)
_vidm_column_size DD 01H DUP (?)
_modedescs DB	0168H DUP (?)
_curSaveSelected DD 01H DUP (?)
?s@?1??M_QuitSRB2@@9@9 DB 0c8H DUP (?)			; `M_QuitSRB2'::`2'::s
?message@?1??M_StartMessage@@9@9 DD 01H DUP (?)		; `M_StartMessage'::`2'::message
?joywait@?1??M_Responder@@9@9 DD 01H DUP (?)		; `M_Responder'::`2'::joywait
?mousewait@?1??M_Responder@@9@9 DD 01H DUP (?)		; `M_Responder'::`2'::mousewait
?shiftdown@?1??M_Responder@@9@9 DD 01H DUP (?)		; `M_Responder'::`2'::shiftdown
?pmousex@?1??M_Responder@@9@9 DD 01H DUP (?)		; `M_Responder'::`2'::pmousex
?pmousey@?1??M_Responder@@9@9 DD 01H DUP (?)		; `M_Responder'::`2'::pmousey
?lastx@?1??M_Responder@@9@9 DD 01H DUP (?)		; `M_Responder'::`2'::lastx
?lasty@?1??M_Responder@@9@9 DD 01H DUP (?)		; `M_Responder'::`2'::lasty
_BSS	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@43180000
CONST	SEGMENT
__real@43180000 DD 043180000r			; 152
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT ??_C@_06GEKNBBDK@000000@
CONST	SEGMENT
??_C@_06GEKNBBDK@000000@ DB '000000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OPAAAELF@You?5are?5in?5software?5mode?6You?5ca@
CONST	SEGMENT
??_C@_0DH@OPAAAELF@You?5are?5in?5software?5mode?6You?5ca@ DB 'You are in '
	DB	'software mode', 0aH, 'You can''t change the options', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OODDODCL@Gamma?5correction@
CONST	SEGMENT
??_C@_0BB@OODDODCL@Gamma?5correction@ DB 'Gamma correction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JLIKDOCG@saveconfig?5?$CC?$CFs?$CC?5?9silent?6@
CONST	SEGMENT
??_C@_0BJ@JLIKDOCG@saveconfig?5?$CC?$CFs?$CC?5?9silent?6@ DB 'saveconfig '
	DB	'"%s" -silent', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@ECOMCFGC@Are?5you?5sure?5you?5want?5to?5delete@
CONST	SEGMENT
??_C@_0DH@ECOMCFGC@Are?5you?5sure?5you?5want?5to?5delete@ DB 'Are you sur'
	DB	'e you want to delete', 0aH, 'this save game?', 0aH, '(Y/N)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FHKEBODE@screenshot?6@
CONST	SEGMENT
??_C@_0M@FHKEBODE@screenshot?6@ DB 'screenshot', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IAAKCKC@M_DrawMessageMenu?3?5too?5long?5seg@
CONST	SEGMENT
??_C@_0CL@IAAKCKC@M_DrawMessageMenu?3?5too?5long?5seg@ DB 'M_DrawMessageM'
	DB	'enu: too long segment in %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HAAIPGIH@M_THERMO@
CONST	SEGMENT
??_C@_08HAAIPGIH@M_THERMO@ DB 'M_THERMO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ECDOJEAF@M_THERMM@
CONST	SEGMENT
??_C@_08ECDOJEAF@M_THERMM@ DB 'M_THERMM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPGEJKJL@M_THERMR@
CONST	SEGMENT
??_C@_08IPGEJKJL@M_THERMR@ DB 'M_THERMR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FLCFKFEE@M_THERML@
CONST	SEGMENT
??_C@_08FLCFKFEE@M_THERML@ DB 'M_THERML', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEEHPPHO@GAMEQUIT@
CONST	SEGMENT
??_C@_08GEEHPPHO@GAMEQUIT@ DB 'GAMEQUIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FHNCDDDI@M_LSRGHT@
CONST	SEGMENT
??_C@_08FHNCDDDI@M_LSRGHT@ DB 'M_LSRGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DEDMDPBC@M_LSCNTR@
CONST	SEGMENT
??_C@_08DEDMDPBC@M_LSCNTR@ DB 'M_LSCNTR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIJFPPFK@M_LSLEFT@
CONST	SEGMENT
??_C@_08CIJFPPFK@M_LSLEFT@ DB 'M_LSLEFT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
CONST	SEGMENT
??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@ DB 'Bad savegame in sl'
	DB	'ot %u', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs@ DB '%s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KOILLOPH@statistics?5or?5unlock?5secrets?4@
CONST	SEGMENT
??_C@_0BO@KOILLOPH@statistics?5or?5unlock?5secrets?4@ DB 'statistics or u'
	DB	'nlock secrets.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BLMLPMML@Note?3?5Game?5must?5be?5reset?5to?5rec@
CONST	SEGMENT
??_C@_0CD@BLMLPMML@Note?3?5Game?5must?5be?5reset?5to?5rec@ DB 'Note: Game'
	DB	' must be reset to record', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NJFMHIAJ@Play?5Without?5Saving@
CONST	SEGMENT
??_C@_0BE@NJFMHIAJ@Play?5Without?5Saving@ DB 'Play Without Saving', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KJPOLLCA@Save?5Slot?5?$CFd@
CONST	SEGMENT
??_C@_0N@KJPOLLCA@Save?5Slot?5?$CFd@ DB 'Save Slot %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DEOHFJCO@Hit?5backspace?5to?5delete?5a?5save?4@
CONST	SEGMENT
??_C@_0CA@DEOHFJCO@Hit?5backspace?5to?5delete?5a?5save?4@ DB 'Hit backspa'
	DB	'ce to delete a save.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKMDFLPF@CONTINS@
CONST	SEGMENT
??_C@_07HKMDFLPF@CONTINS@ DB 'CONTINS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CLPGBJMN@ONEUP@
CONST	SEGMENT
??_C@_05CLPGBJMN@ONEUP@ DB 'ONEUP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPFKCGHK@x?5?$CFd@
CONST	SEGMENT
??_C@_04GPFKCGHK@x?5?$CFd@ DB 'x %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKDIGJKN@CHAOS1@
CONST	SEGMENT
??_C@_06PKDIGJKN@CHAOS1@ DB 'CHAOS1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IIPDAPGP@COMPLETED?$CB@
CONST	SEGMENT
??_C@_0L@IIPDAPGP@COMPLETED?$CB@ DB 'COMPLETED!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KKABJDOO@NO?5SAVE@
CONST	SEGMENT
??_C@_07KKABJDOO@NO?5SAVE@ DB 'NO SAVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HKAKDGKI@EMPTY@
CONST	SEGMENT
??_C@_05HKAKDGKI@EMPTY@ DB 'EMPTY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NCKPKANH@Press?5ESC?5to?5exit@
CONST	SEGMENT
??_C@_0BC@NCKPKANH@Press?5ESC?5to?5exit@ DB 'Press ESC to exit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LHLINNAO@Current?5default?5is?5?$CFdx?$CFd?5?$CI?$CFd?5bi@
CONST	SEGMENT
??_C@_0CD@LHLINNAO@Current?5default?5is?5?$CFdx?$CFd?5?$CI?$CFd?5bi@ DB 'C'
	DB	'urrent default is %dx%d (%d bits)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EPFOILEI@D?5to?5make?5?$CFs?5the?5default@
CONST	SEGMENT
??_C@_0BJ@EPFOILEI@D?5to?5make?5?$CFs?5the?5default@ DB 'D to make %s the'
	DB	' default', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PFFJDAPB@T?5to?5test?5mode?5for?55?5seconds@
CONST	SEGMENT
??_C@_0BN@PFFJDAPB@T?5to?5test?5mode?5for?55?5seconds@ DB 'T to test mode'
	DB	' for 5 seconds', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JABMHELI@Press?5ENTER?5to?5set?5mode@
CONST	SEGMENT
??_C@_0BI@JABMHELI@Press?5ENTER?5to?5set?5mode@ DB 'Press ENTER to set mo'
	DB	'de', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGLLKDKJ@Please?5wait?55?5seconds?4?4?4@
CONST	SEGMENT
??_C@_0BJ@OGLLKDKJ@Please?5wait?55?5seconds?4?4?4@ DB 'Please wait 5 seco'
	DB	'nds...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CNMNCLAD@TESTING?5MODE?5?$CFs@
CONST	SEGMENT
??_C@_0BA@CNMNCLAD@TESTING?5MODE?5?$CFs@ DB 'TESTING MODE %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GDFMPIDM@random?5crashes?4?5Use?5at?5own?5risk@
CONST	SEGMENT
??_C@_0CB@GDFMPIDM@random?5crashes?4?5Use?5at?5own?5risk@ DB 'random cras'
	DB	'hes. Use at own risk.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FMPPEICP@Non?9green?5modes?5are?5known?5to?5ca@
CONST	SEGMENT
??_C@_0CD@FMPPEICP@Non?9green?5modes?5are?5known?5to?5ca@ DB 'Non-green m'
	DB	'odes are known to cause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNAEINCM@Green?5modes?5are?5recommended?4@
CONST	SEGMENT
??_C@_0BN@FNAEINCM@Green?5modes?5are?5recommended?4@ DB 'Green modes are '
	DB	'recommended.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07MFGEBFN@?$CFu?$CF?$CKc?$CFu@
CONST	SEGMENT
??_C@_07MFGEBFN@?$CFu?$CF?$CKc?$CFu@ DB '%u%*c%u', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PGEKJFLH@Hit?5the?5new?5key?5for?6?$CFs?6ESC?5for?5@
CONST	SEGMENT
??_C@_0CG@PGEKJFLH@Hit?5the?5new?5key?5for?6?$CFs?6ESC?5for?5@ DB 'Hit th'
	DB	'e new key for', 0aH, '%s', 0aH, 'ESC for Cancel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJKIFICP@?5or?5@
CONST	SEGMENT
??_C@_04FJKIFICP@?5or?5@ DB ' or ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMFMNIFM@?9?9?9@
CONST	SEGMENT
??_C@_03JMFMNIFM@?9?9?9@ DB '---', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HFKGFGA@PRESS?5ENTER?5TO?5CHANGE?0?5BACKSPAC@
CONST	SEGMENT
??_C@_0CK@HFKGFGA@PRESS?5ENTER?5TO?5CHANGE?0?5BACKSPAC@ DB 'PRESS ENTER T'
	DB	'O CHANGE, BACKSPACE TO CLEAR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LLDDEAJF@SET?5CONTROLS?5FOR?5SECONDARY?5PLAY@
CONST	SEGMENT
??_C@_0CC@LLDDEAJF@SET?5CONTROLS?5FOR?5SECONDARY?5PLAY@ DB 'SET CONTROLS '
	DB	'FOR SECONDARY PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IOKPNGEC@Unavailable@
CONST	SEGMENT
??_C@_0M@IOKPNGEC@Unavailable@ DB 'Unavailable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PLKNFBFH@MIDI?5Music?5Disabled?6@
CONST	SEGMENT
??_C@_0BF@PLKNFBFH@MIDI?5Music?5Disabled?6@ DB 'MIDI Music Disabled', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MKCHOEKH@MIDI?5Music?5Enabled?6@
CONST	SEGMENT
??_C@_0BE@MKCHOEKH@MIDI?5Music?5Enabled?6@ DB 'MIDI Music Enabled', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IFLHPHJB@Digital?5Music?5Disabled?6@
CONST	SEGMENT
??_C@_0BI@IFLHPHJB@Digital?5Music?5Disabled?6@ DB 'Digital Music Disabled'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GBPNJPKK@Digital?5Music?5Enabled?6@
CONST	SEGMENT
??_C@_0BH@GBPNJPKK@Digital?5Music?5Enabled?6@ DB 'Digital Music Enabled', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BMBFHMHA@SFX?5Disabled?6@
CONST	SEGMENT
??_C@_0O@BMBFHMHA@SFX?5Disabled?6@ DB 'SFX Disabled', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKCHMEKJ@SFX?5Enabled?6@
CONST	SEGMENT
??_C@_0N@MKCHMEKJ@SFX?5Enabled?6@ DB 'SFX Enabled', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHOFJIMA@BULMER@
CONST	SEGMENT
??_C@_06OHOFJIMA@BULMER@ DB 'BULMER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DOKPJKJF@HELP@
CONST	SEGMENT
??_C@_04DOKPJKJF@HELP@ DB 'HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JBIJLGLN@You?5are?5not?5the?5server?6You?5can?8@
CONST	SEGMENT
??_C@_0DF@JBIJLGLN@You?5are?5not?5the?5server?6You?5can?8@ DB 'You are no'
	DB	't the server', 0aH, 'You can''t change the options', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMBKHBOJ@M_SLIDEC@
CONST	SEGMENT
??_C@_08DMBKHBOJ@M_SLIDEC@ DB 'M_SLIDEC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GPMDFCPJ@M_SLIDER@
CONST	SEGMENT
??_C@_08GPMDFCPJ@M_SLIDER@ DB 'M_SLIDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KCJJFMGH@M_SLIDEM@
CONST	SEGMENT
??_C@_08KCJJFMGH@M_SLIDEM@ DB 'M_SLIDEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLICGNCG@M_SLIDEL@
CONST	SEGMENT
??_C@_08LLICGNCG@M_SLIDEL@ DB 'M_SLIDEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JPGNEEFB@No?5selectable?5levels?5found?4?6@
CONST	SEGMENT
??_C@_0BN@JPGNEEFB@No?5selectable?5levels?5found?4?6@ DB 'No selectable l'
	DB	'evels found.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@KAIGCOA@Checklist?5does?5not?5apply?6for?5th@
CONST	SEGMENT
??_C@_0EG@KAIGCOA@Checklist?5does?5not?5apply?6for?5th@ DB 'Checklist doe'
	DB	's not apply', 0aH, 'for this mod.', 0aH, 'Use statistics scre'
	DB	'en instead.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NANMIPIL@N@
CONST	SEGMENT
??_C@_01NANMIPIL@N@ DB 'N', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y@
CONST	SEGMENT
??_C@_01NFFPALBN@Y@ DB 'Y', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BNEGKOBM@Perfect?5Bonus?5on?6any?5stage@
CONST	SEGMENT
??_C@_0BL@BNEGKOBM@Perfect?5Bonus?5on?6any?5stage@ DB 'Perfect Bonus on', 0aH
	DB	'any stage', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IBFJHBGJ@Extra?5Emblem?5?$CD4@
CONST	SEGMENT
??_C@_0BA@IBFJHBGJ@Extra?5Emblem?5?$CD4@ DB 'Extra Emblem #4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCFFBPDP@Finish?51P?5in?623?5minutes@
CONST	SEGMENT
??_C@_0BI@BCFFBPDP@Finish?51P?5in?623?5minutes@ DB 'Finish 1P in', 0aH, '2'
	DB	'3 minutes', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MOBIOHKO@Extra?5Emblem?5?$CD3@
CONST	SEGMENT
??_C@_0BA@MOBIOHKO@Extra?5Emblem?5?$CD3@ DB 'Extra Emblem #3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NHADNGOP@Extra?5Emblem?5?$CD2@
CONST	SEGMENT
??_C@_0BA@NHADNGOP@Extra?5Emblem?5?$CD2@ DB 'Extra Emblem #2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPIKFCAA@Finish?51P@
CONST	SEGMENT
??_C@_09LPIKFCAA@Finish?51P@ DB 'Finish 1P', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PMCOIFCM@Extra?5Emblem?5?$CD1@
CONST	SEGMENT
??_C@_0BA@PMCOIFCM@Extra?5Emblem?5?$CD1@ DB 'Extra Emblem #1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MKKBLIHF@Pandora?8s?5Box@
CONST	SEGMENT
??_C@_0O@MKKBLIHF@Pandora?8s?5Box@ DB 'Pandora''s Box', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ILNJJKCB@Find?520?5Emblems@
CONST	SEGMENT
??_C@_0BA@ILNJJKCB@Find?520?5Emblems@ DB 'Find 20 Emblems', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BCDLPMCA@Find?510?5Emblems@
CONST	SEGMENT
??_C@_0BA@BCDLPMCA@Find?510?5Emblems@ DB 'Find 10 Emblems', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KIHNOHNI@Finish?51P?6w?1?5Emeralds@
CONST	SEGMENT
??_C@_0BG@KIHNOHNI@Finish?51P?6w?1?5Emeralds@ DB 'Finish 1P', 0aH, 'w/ Em'
	DB	'eralds', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MDDPHAEN@Find?5All?5Emblems@
CONST	SEGMENT
??_C@_0BB@MDDPHAEN@Find?5All?5Emblems@ DB 'Find All Emblems', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@PPKODPLM@Do?5you?5want?5to?5destroy?5all?6robo@
CONST	SEGMENT
??_C@_0DP@PPKODPLM@Do?5you?5want?5to?5destroy?5all?6robo@ DB 'Do you want'
	DB	' to destroy all', 0aH, 'robots in the current level?', 0aH, '('
	DB	'Y/N)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HMNPBBDK@You?5now?5have?5all?57?5emeralds?4@
CONST	SEGMENT
??_C@_0BN@HMNPBBDK@You?5now?5have?5all?57?5emeralds?4@ DB 'You now have a'
	DB	'll 7 emeralds.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DPCPKJLJ@You?5can?8t?5do?5this?5in?6a?5network?5@
CONST	SEGMENT
??_C@_0CF@DPCPKJLJ@You?5can?8t?5do?5this?5in?6a?5network?5@ DB 'You can'''
	DB	't do this in', 0aH, 'a network game!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@ILBFANCE@You?5need?5to?5be?5playing?5and?5in?6a@
CONST	SEGMENT
??_C@_0DC@ILBFANCE@You?5need?5to?5be?5playing?5and?5in?6a@ DB 'You need t'
	DB	'o be playing and in', 0aH, 'a level to do this!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FBANMDOI@Are?5you?5sure?5you?5want?5to?5delete@
CONST	SEGMENT
??_C@_0DJ@FBANMDOI@Are?5you?5sure?5you?5want?5to?5delete@ DB 'Are you sur'
	DB	'e you want to delete', 0aH, 'the secrets data?', 0aH, '(Y/N)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MDNCDHNK@Are?5you?5sure?5you?5want?5to?5delete@
CONST	SEGMENT
??_C@_0DN@MDNCDHNK@Are?5you?5sure?5you?5want?5to?5delete@ DB 'Are you sur'
	DB	'e you want to delete', 0aH, 'the time attack data?', 0aH, '(Y'
	DB	'/N)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IKKFBPJD@A?5game?5cannot?5be?5running?4?6End?5i@
CONST	SEGMENT
??_C@_0CI@IKKFBPJD@A?5game?5cannot?5be?5running?4?6End?5i@ DB 'A game can'
	DB	'not be running.', 0aH, 'End it first.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IKODIFFP@?$CFs?2replay?2?$CFs?2?$CFs?9?$CF02d@
CONST	SEGMENT
??_C@_0BF@IKODIFFP@?$CFs?2replay?2?$CFs?2?$CFs?9?$CF02d@ DB '%s\replay\%s'
	DB	'\%s-%02d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04FGEHGIFJ@temp@
CONST	SEGMENT
??_C@_04FGEHGIFJ@temp@ DB 'temp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HEGGCDPF@?$CFs?2temp?4lmp@
CONST	SEGMENT
??_C@_0M@HEGGCDPF@?$CFs?2temp?4lmp@ DB '%s\temp.lmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PJLKBKAB@Best?5Time?3?5?$CFi?3?$CF02i?4?$CF02i@
CONST	SEGMENT
??_C@_0BI@PJLKBKAB@Best?5Time?3?5?$CFi?3?$CF02i?4?$CF02i@ DB 'Best Time: '
	DB	'%i:%02i.%02i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GJGJGAFB@?$CFs?3?$CFs?3?$CFs?4?$CFs@
CONST	SEGMENT
??_C@_0M@GJGJGAFB@?$CFs?3?$CFs?3?$CFs?4?$CFs@ DB '%s:%s:%s.%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDAHLBCH@?$CF02i@
CONST	SEGMENT
??_C@_04FDAHLBCH@?$CF02i@ DB '%02i', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPMGDBIJ@SRB2BACK@
CONST	SEGMENT
??_C@_08LPMGDBIJ@SRB2BACK@ DB 'SRB2BACK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HAALCNEE@No?5time?9attackable?5levels?5found@
CONST	SEGMENT
??_C@_0CC@HAALCNEE@No?5time?9attackable?5levels?5found@ DB 'No time-attac'
	DB	'kable levels found.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LPPDOMOD@This?5cannot?5be?5done?5in?5a?5modifi@
CONST	SEGMENT
??_C@_0CJ@LPPDOMOD@This?5cannot?5be?5done?5in?5a?5modifi@ DB 'This cannot'
	DB	' be done in a modified game.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GMJPPENF@?$CFs?2replay?2?$CFs?2?$CFs?9?$CF02d?4lmp@
CONST	SEGMENT
??_C@_0BJ@GMJPPENF@?$CFs?2replay?2?$CFs?2?$CFs?9?$CF02d?4lmp@ DB '%s\repl'
	DB	'ay\%s\%s-%02d.lmp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPHIDNPD@Page?55@
CONST	SEGMENT
??_C@_06DPHIDNPD@Page?55@ DB 'Page 5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CGGDAMLC@Page?54@
CONST	SEGMENT
??_C@_06CGGDAMLC@Page?54@ DB 'Page 4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJCCJKHF@Page?53@
CONST	SEGMENT
??_C@_06GJCCJKHF@Page?53@ DB 'Page 3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HADJKLDE@Page?52@
CONST	SEGMENT
??_C@_06HADJKLDE@Page?52@ DB 'Page 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HLIECKEP@BEST?5TIMES@
CONST	SEGMENT
??_C@_0L@HLIECKEP@BEST?5TIMES@ DB 'BEST TIMES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DIALNFFA@?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_05DIALNFFA@?$CFs?5?$CFd@ DB '%s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMLIDDG@NEEDIT@
CONST	SEGMENT
??_C@_06MMLIDDG@NEEDIT@ DB 'NEEDIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GDDABNPK@GOTIT@
CONST	SEGMENT
??_C@_05GDDABNPK@GOTIT@ DB 'GOTIT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJNODIDA@?$CFc?5?$CFc?5?$CFc@
CONST	SEGMENT
??_C@_08BJNODIDA@?$CFc?5?$CFc?5?$CFc@ DB '%c %c %c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MHGDOBIE@BEST?5TIME@
CONST	SEGMENT
??_C@_09MHGDOBIE@BEST?5TIME@ DB 'BEST TIME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OFKMJLDC@LEVEL?5NAME@
CONST	SEGMENT
??_C@_0L@OFKMJLDC@LEVEL?5NAME@ DB 'LEVEL NAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MEOCEIMN@Best?5Time?5Attack?3@
CONST	SEGMENT
??_C@_0BC@MEOCEIMN@Best?5Time?5Attack?3@ DB 'Best Time Attack:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@
CONST	SEGMENT
??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@ DB '%s:%s:%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IMDFOONP@Total?5Play?5Time?3@
CONST	SEGMENT
??_C@_0BB@IMDFOONP@Total?5Play?5Time?3@ DB 'Total Play Time:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02IKAHHCAI@?$CFi@
CONST	SEGMENT
??_C@_02IKAHHCAI@?$CFi@ DB '%i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CLPIFBDJ@?$CFi?3@
CONST	SEGMENT
??_C@_03CLPIFBDJ@?$CFi?3@ DB '%i:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KECJIMKH@0?$CFi@
CONST	SEGMENT
??_C@_03KECJIMKH@0?$CFi@ DB '0%i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FNBLLBPP@EMBLICON@
CONST	SEGMENT
??_C@_08FNBLLBPP@EMBLICON@ DB 'EMBLICON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NGEAEDOH@x?5?$CFd?1?$CFd@
CONST	SEGMENT
??_C@_07NGEAEDOH@x?5?$CFd?1?$CFd@ DB 'x %d/%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EJGLNFLC@Statistics?5not?5available?6in?5mod@
CONST	SEGMENT
??_C@_0CM@EJGLNFLC@Statistics?5not?5available?6in?5mod@ DB 'Statistics no'
	DB	't available', 0aH, 'in modified games.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LGMFNFJP@Speed?3?6Ability?3?6Notes?3@
CONST	SEGMENT
??_C@_0BH@LGMFNFJP@Speed?3?6Ability?3?6Notes?3@ DB 'Speed:', 0aH, 'Abilit'
	DB	'y:', 0aH, 'Notes:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHBLPCGN@?$CFs?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_08MHBLPCGN@?$CFs?5?$CC?$CFs?$CC?6@ DB '%s "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMIPDAGF@?$CFs?5?$CC?$CFs?$CC@
CONST	SEGMENT
??_C@_07CMIPDAGF@?$CFs?5?$CC?$CFs?$CC@ DB '%s "%s"', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MNGCLAIB@You?5have?5to?5be?5in?5a?5game?6to?5do?5@
CONST	SEGMENT
??_C@_0DD@MNGCLAIB@You?5have?5to?5be?5in?5a?5game?6to?5do?5@ DB 'You have'
	DB	' to be in a game', 0aH, 'to do this.', 0aH, 0aH, 'Press a key'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KDGACFJD@Only?5the?5server?5may?5use?5this?5co@
CONST	SEGMENT
??_C@_0DD@KDGACFJD@Only?5the?5server?5may?5use?5this?5co@ DB 'Only the se'
	DB	'rver may use this command.', 0aH, 'Press a key.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KFHIAFFD@You?5aren?8t?5in?5a?5game?$CB?6Press?5a?5k@
CONST	SEGMENT
??_C@_0CD@KFHIAFFD@You?5aren?8t?5in?5a?5game?$CB?6Press?5a?5k@ DB 'You ar'
	DB	'en''t in a game!', 0aH, 'Press a key.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IKJCNOHF@BLANKLVL@
CONST	SEGMENT
??_C@_08IKJCNOHF@BLANKLVL@ DB 'BLANKLVL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KFFLPELC@?$CFsP@
CONST	SEGMENT
??_C@_03KFFLPELC@?$CFsP@ DB '%sP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@
CONST	SEGMENT
??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@ DB 'dummyconsvar 1', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLHIKHMP@stopdemo?6@
CONST	SEGMENT
??_C@_09PLHIKHMP@stopdemo?6@ DB 'stopdemo', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGJMDDAH@changeteam?5blue@
CONST	SEGMENT
??_C@_0BA@NGJMDDAH@changeteam?5blue@ DB 'changeteam blue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HLFJDFHH@changeteam?5red@
CONST	SEGMENT
??_C@_0P@HLFJDFHH@changeteam?5red@ DB 'changeteam red', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@NNCCBNBK@The?5server?5is?5not?5allowing?6?5tea@
CONST	SEGMENT
??_C@_0EE@NNCCBNBK@The?5server?5is?5not?5allowing?6?5tea@ DB 'The server '
	DB	'is not allowing', 0aH, ' team changes at this time.', 0aH, 'P'
	DB	'ress a key.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HMLEAAMB@teamscramble?52@
CONST	SEGMENT
??_C@_0P@HMLEAAMB@teamscramble?52@ DB 'teamscramble 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHJJFDAC@teamscramble?51@
CONST	SEGMENT
??_C@_0P@FHJJFDAC@teamscramble?51@ DB 'teamscramble 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GABIEGHI@changeteam?5spectator@
CONST	SEGMENT
??_C@_0BF@GABIEGHI@changeteam?5spectator@ DB 'changeteam spectator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FEIAKPDG@map?5?$CFs?5?9gametype?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BH@FEIAKPDG@map?5?$CFs?5?9gametype?5?$CC?$CFs?$CC?6@ DB 'map %s -g'
	DB	'ametype "%s"', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MIMHNKJK@Searching?5Local?5Network?5for?5Ser@
CONST	SEGMENT
??_C@_0CH@MIMHNKJK@Searching?5Local?5Network?5for?5Ser@ DB 'Searching Loc'
	DB	'al Network for Servers...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJMDIAEP@Please?5wait?4@
CONST	SEGMENT
??_C@_0N@PJMDIAEP@Please?5wait?4@ DB 'Please wait.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LLIGIMGM@Contacting?5list?5server?4?4?4@
CONST	SEGMENT
??_C@_0BK@LLIGIMGM@Contacting?5list?5server?4?4?4@ DB 'Contacting list se'
	DB	'rver...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@
CONST	SEGMENT
??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@ DB 'You have wa'
	DB	'd files loaded and/or', 0aH, 'modified the game in some way.', 0aH
	DB	'Please restart SRB2 before', 0aH, 'connecting.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0NH@JDGDIMIN@New?5updates?5are?5available?5for?5S@
CONST	SEGMENT
??_C@_0NH@JDGDIMIN@New?5updates?5are?5available?5for?5S@ DB 'New updates '
	DB	'are available for SRB2', 0aH, 'Please visit SRB2.org to downl'
	DB	'oad them.', 0aH, 0aH, 'You will not be able to connect to the'
	DB	0aH, 'Master Server until you have updated to', 0aH, 'the late'
	DB	'st version!', 0aH, 0aH, 'Current Version: %s', 0aH, 'Latest V'
	DB	'ersion: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07IJKPKDGN@?5v2?40?47@
CONST	SEGMENT
??_C@_07IJKPKDGN@?5v2?40?47@ DB ' v2.0.7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BNPJEODI@M_DrawConnectLANMenu?3?5Unknown?5g@
CONST	SEGMENT
??_C@_0CL@BNPJEODI@M_DrawConnectLANMenu?3?5Unknown?5g@ DB 'M_DrawConnectL'
	DB	'ANMenu: Unknown gametype %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KIBBHFCG@?$IDC?$IC?5?$DN?5Cheats?5are?5enabled?4@
CONST	SEGMENT
??_C@_0BK@KIBBHFCG@?$IDC?$IC?5?$DN?5Cheats?5are?5enabled?4@ DB 083H, 'C', 082H
	DB	' = Cheats are enabled.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFPMMFF@?$IFM?$IC?5?$DN?5Game?5is?5modified?4?5?5?5?5@
CONST	SEGMENT
??_C@_0BM@FFPMMFF@?$IFM?$IC?5?$DN?5Game?5is?5modified?4?5?5?5?5@ DB 085H, 'M'
	DB	082H, ' = Game is modified.    ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LKGEIHMO@since?5the?5last?5refresh?4@
CONST	SEGMENT
??_C@_0BI@LKGEIHMO@since?5the?5last?5refresh?4@ DB 'since the last refres'
	DB	'h.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EHEFNEDJ@Warning?3?5Room?5has?5been?5changed@
CONST	SEGMENT
??_C@_0BP@EHEFNEDJ@Warning?3?5Room?5has?5been?5changed@ DB 'Warning: Room'
	DB	' has been changed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KKPNDFC@?$CF02d?1?$CF02d@
CONST	SEGMENT
??_C@_09KKPNDFC@?$CF02d?1?$CF02d@ DB '%02d/%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OFNJKBHE@M_DrawConnectMenu?3?5Unknown?5game@
CONST	SEGMENT
??_C@_0CI@OFNJKBHE@M_DrawConnectMenu?3?5Unknown?5game@ DB 'M_DrawConnectM'
	DB	'enu: Unknown gametype %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu@ DB '%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DIJJJPPC@?$IDC@
CONST	SEGMENT
??_C@_02DIJJJPPC@?$IDC@ DB 083H, 'C', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCJHMOMO@?$IFM@
CONST	SEGMENT
??_C@_02KCJHMOMO@?$IFM@ DB 085H, 'M', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JACHKAHP@No?5servers?5found@
CONST	SEGMENT
??_C@_0BB@JACHKAHP@No?5servers?5found@ DB 'No servers found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OHAIHFDF@Error?5contacting?5the?5Master?5Ser@
CONST	SEGMENT
??_C@_0CD@OHAIHFDF@Error?5contacting?5the?5Master?5Ser@ DB 'Error contact'
	DB	'ing the Master Server', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHOLBGH@PING?5?5?5PLYS?5?5GT@
CONST	SEGMENT
??_C@_0BA@GHOLBGH@PING?5?5?5PLYS?5?5GT@ DB 'PING   PLYS  GT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LNGHCJI@connect?5?$CFs?6@
CONST	SEGMENT
??_C@_0M@LNGHCJI@connect?5?$CFs?6@ DB 'connect %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BFELJAMF@Connecting?5to?5server?4?4?4@
CONST	SEGMENT
??_C@_0BI@BFELJAMF@Connecting?5to?5server?4?4?4@ DB 'Connecting to server'
	DB	'...', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FNMPHPBO@connect?5node?5?$CFd?6@
CONST	SEGMENT
??_C@_0BB@FNMPHPBO@connect?5node?5?$CFd?6@ DB 'connect node %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLKNNBAH@M_CURSOR@
CONST	SEGMENT
??_C@_08PLKNNBAH@M_CURSOR@ DB 'M_CURSOR', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_itemOn	DW	01H
	ORG $+2
_skullAnimCounter DW 0aH
	ORG $+2
_ALREADYPLAYING DD FLAT:??_C@_0EF@JOHOLOFN@You?5are?5already?5playing?4?6Do?5you@
_cv_serversearch DD FLAT:??_C@_0N@OFLEAIKH@serversearch@
	DD	FLAT:??_C@_08LDBMAAPD@Internet@
	DD	0400H
	DD	FLAT:_serversearch_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_JoystickSetDef DD FLAT:??_C@_08IKLFOOPP@M_CONTRO@
	DD	FLAT:??_C@_0BA@FICHDAMO@Select?5Joystick@
	DW	07H
	ORG $+2
	DD	FLAT:_JoystickDef
	DD	FLAT:_JoystickSetMenu
	DD	FLAT:_M_DrawJoystick
	DW	032H
	DW	028H
	DW	00H
	ORG $+2
	DD	00H
_quitsounds2 DD	0d8H
	DD	053H
	DD	054H
	DD	077H
	DD	04bH
	DD	0d5H
	DD	046H
	DD	02aH
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0206H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	018dH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	010bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0240H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	088H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0efH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	04bdH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	04ccH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0245H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02b5H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02b0H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	08aH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	06bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0207H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0406H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	04b3H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	07daH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _ServerListEntryComparator_gametype
_TEXT	SEGMENT
_entry1$ = 8						; size = 4
_entry2$ = 12						; size = 4
_ServerListEntryComparator_gametype PROC		; COMDAT

; 8363 : SERVER_LIST_ENTRY_COMPARATOR(gametype)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _entry2$[ebp]
  0000c	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _entry1$[ebp]
  00013	0f b6 51 05	 movzx	 edx, BYTE PTR [ecx+5]
  00017	2b c2		 sub	 eax, edx
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_ServerListEntryComparator_gametype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _ServerListEntryComparator_numberofplayer
_TEXT	SEGMENT
_entry1$ = 8						; size = 4
_entry2$ = 12						; size = 4
_ServerListEntryComparator_numberofplayer PROC		; COMDAT

; 8362 : SERVER_LIST_ENTRY_COMPARATOR(numberofplayer)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _entry2$[ebp]
  0000c	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _entry1$[ebp]
  00013	0f b6 51 03	 movzx	 edx, BYTE PTR [ecx+3]
  00017	2b c2		 sub	 eax, edx
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_ServerListEntryComparator_numberofplayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _ServerListEntryComparator_time
_TEXT	SEGMENT
_entry1$ = 8						; size = 4
_entry2$ = 12						; size = 4
_ServerListEntryComparator_time PROC			; COMDAT

; 8361 : SERVER_LIST_ENTRY_COMPARATOR(time)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _entry2$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _entry1$[ebp]
  0000f	8b 40 0b	 mov	 eax, DWORD PTR [eax+11]
  00012	2b 41 0b	 sub	 eax, DWORD PTR [ecx+11]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_ServerListEntryComparator_time ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_HandleFogColor
_TEXT	SEGMENT
tv64 = -92						; size = 4
_exitmenu$ = -24					; size = 4
_temp$ = -20						; size = 8
_l$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_choice$ = 8						; size = 4
_M_HandleFogColor PROC					; COMDAT

; 8286 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 8287 : 	size_t i, l;
; 8288 : 	char temp[8];
; 8289 : 	boolean exitmenu = false; // exit to previous menu and send name change

  00013	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _exitmenu$[ebp], 0

; 8290 : 
; 8291 : 	switch (choice)

  0001a	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  0001d	89 45 a4	 mov	 DWORD PTR tv64[ebp], eax
  00020	8b 4d a4	 mov	 ecx, DWORD PTR tv64[ebp]
  00023	83 e9 08	 sub	 ecx, 8
  00026	89 4d a4	 mov	 DWORD PTR tv64[ebp], ecx
  00029	81 7d a4 e6 00
	00 00		 cmp	 DWORD PTR tv64[ebp], 230 ; 000000e6H
  00030	0f 87 e8 00 00
	00		 ja	 $LN14@M_HandleFo
  00036	8b 55 a4	 mov	 edx, DWORD PTR tv64[ebp]
  00039	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN23@M_HandleFo[edx]
  00040	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@M_HandleFo[eax*4]
$LN10@M_HandleFo:

; 8292 : 	{
; 8293 : 		case KEY_DOWNARROW:
; 8294 : 			S_StartSound(NULL, sfx_menu1);

  00047	6a 67		 push	 103			; 00000067H
  00049	6a 00		 push	 0
  0004b	e8 00 00 00 00	 call	 _S_StartSound
  00050	83 c4 08	 add	 esp, 8

; 8295 : 			itemOn++;

  00053	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _itemOn
  00059	66 83 c0 01	 add	 ax, 1
  0005d	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax

; 8296 : 			break;

  00063	e9 6d 01 00 00	 jmp	 $LN2@M_HandleFo
$LN11@M_HandleFo:

; 8297 : 
; 8298 : 		case KEY_UPARROW:
; 8299 : 			S_StartSound(NULL, sfx_menu1);

  00068	6a 67		 push	 103			; 00000067H
  0006a	6a 00		 push	 0
  0006c	e8 00 00 00 00	 call	 _S_StartSound
  00071	83 c4 08	 add	 esp, 8

; 8300 : 			itemOn--;

  00074	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _itemOn
  0007a	66 83 e8 01	 sub	 ax, 1
  0007e	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax

; 8301 : 			break;

  00084	e9 4c 01 00 00	 jmp	 $LN2@M_HandleFo
$LN12@M_HandleFo:

; 8302 : 
; 8303 : 		case KEY_ESCAPE:
; 8304 : 			S_StartSound(NULL, sfx_menu1);

  00089	6a 67		 push	 103			; 00000067H
  0008b	6a 00		 push	 0
  0008d	e8 00 00 00 00	 call	 _S_StartSound
  00092	83 c4 08	 add	 esp, 8

; 8305 : 			exitmenu = true;

  00095	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _exitmenu$[ebp], 1

; 8306 : 			break;

  0009c	e9 34 01 00 00	 jmp	 $LN2@M_HandleFo
$LN13@M_HandleFo:

; 8307 : 
; 8308 : 		case KEY_BACKSPACE:
; 8309 : 			S_StartSound(NULL, sfx_menu1);

  000a1	6a 67		 push	 103			; 00000067H
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 _S_StartSound
  000aa	83 c4 08	 add	 esp, 8

; 8310 : 			strcpy(temp, cv_grfogcolor.string);

  000ad	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_grfogcolor+24
  000b2	50		 push	 eax
  000b3	8d 4d ec	 lea	 ecx, DWORD PTR _temp$[ebp]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 _strcpy
  000bc	83 c4 08	 add	 esp, 8

; 8311 : 			strcpy(cv_grfogcolor.zstring, "000000");

  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_06GEKNBBDK@000000@
  000c4	a1 1c 00 00 00	 mov	 eax, DWORD PTR _cv_grfogcolor+28
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _strcpy
  000cf	83 c4 08	 add	 esp, 8

; 8312 : 			l = strlen(temp)-1;

  000d2	8d 45 ec	 lea	 eax, DWORD PTR _temp$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _strlen
  000db	83 c4 04	 add	 esp, 4
  000de	83 e8 01	 sub	 eax, 1
  000e1	89 45 f4	 mov	 DWORD PTR _l$[ebp], eax

; 8313 : 			for (i = 0; i < l; i++)

  000e4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000eb	eb 09		 jmp	 SHORT $LN6@M_HandleFo
$LN4@M_HandleFo:
  000ed	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000f0	83 c0 01	 add	 eax, 1
  000f3	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN6@M_HandleFo:
  000f6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000f9	3b 45 f4	 cmp	 eax, DWORD PTR _l$[ebp]
  000fc	73 1b		 jae	 SHORT $LN5@M_HandleFo

; 8314 : 				cv_grfogcolor.zstring[i + 6 - l] = temp[i];

  000fe	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00101	83 c0 06	 add	 eax, 6
  00104	2b 45 f4	 sub	 eax, DWORD PTR _l$[ebp]
  00107	8b 0d 1c 00 00
	00		 mov	 ecx, DWORD PTR _cv_grfogcolor+28
  0010d	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00110	8a 54 15 ec	 mov	 dl, BYTE PTR _temp$[ebp+edx]
  00114	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00117	eb d4		 jmp	 SHORT $LN4@M_HandleFo
$LN5@M_HandleFo:

; 8315 : 			break;

  00119	e9 b7 00 00 00	 jmp	 $LN2@M_HandleFo
$LN14@M_HandleFo:

; 8316 : 
; 8317 : 		default:
; 8318 : 			if ((choice >= '0' && choice <= '9') || (choice >= 'a' && choice <= 'f')
; 8319 : 				|| (choice >= 'A' && choice <= 'F'))

  0011e	83 7d 08 30	 cmp	 DWORD PTR _choice$[ebp], 48 ; 00000030H
  00122	7c 06		 jl	 SHORT $LN17@M_HandleFo
  00124	83 7d 08 39	 cmp	 DWORD PTR _choice$[ebp], 57 ; 00000039H
  00128	7e 20		 jle	 SHORT $LN16@M_HandleFo
$LN17@M_HandleFo:
  0012a	83 7d 08 61	 cmp	 DWORD PTR _choice$[ebp], 97 ; 00000061H
  0012e	7c 06		 jl	 SHORT $LN18@M_HandleFo
  00130	83 7d 08 66	 cmp	 DWORD PTR _choice$[ebp], 102 ; 00000066H
  00134	7e 14		 jle	 SHORT $LN16@M_HandleFo
$LN18@M_HandleFo:
  00136	83 7d 08 41	 cmp	 DWORD PTR _choice$[ebp], 65 ; 00000041H
  0013a	0f 8c 95 00 00
	00		 jl	 $LN15@M_HandleFo
  00140	83 7d 08 46	 cmp	 DWORD PTR _choice$[ebp], 70 ; 00000046H
  00144	0f 8f 8b 00 00
	00		 jg	 $LN15@M_HandleFo
$LN16@M_HandleFo:

; 8320 : 			{
; 8321 : 				S_StartSound(NULL, sfx_menu1);

  0014a	6a 67		 push	 103			; 00000067H
  0014c	6a 00		 push	 0
  0014e	e8 00 00 00 00	 call	 _S_StartSound
  00153	83 c4 08	 add	 esp, 8

; 8322 : 				strcpy(temp, cv_grfogcolor.string);

  00156	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_grfogcolor+24
  0015b	50		 push	 eax
  0015c	8d 4d ec	 lea	 ecx, DWORD PTR _temp$[ebp]
  0015f	51		 push	 ecx
  00160	e8 00 00 00 00	 call	 _strcpy
  00165	83 c4 08	 add	 esp, 8

; 8323 : 				strcpy(cv_grfogcolor.zstring, "000000");

  00168	68 00 00 00 00	 push	 OFFSET ??_C@_06GEKNBBDK@000000@
  0016d	a1 1c 00 00 00	 mov	 eax, DWORD PTR _cv_grfogcolor+28
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _strcpy
  00178	83 c4 08	 add	 esp, 8

; 8324 : 				l = strlen(temp);

  0017b	8d 45 ec	 lea	 eax, DWORD PTR _temp$[ebp]
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 _strlen
  00184	83 c4 04	 add	 esp, 4
  00187	89 45 f4	 mov	 DWORD PTR _l$[ebp], eax

; 8325 : 				for (i = 0; i < l; i++)

  0018a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00191	eb 09		 jmp	 SHORT $LN9@M_HandleFo
$LN7@M_HandleFo:
  00193	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00196	83 c0 01	 add	 eax, 1
  00199	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN9@M_HandleFo:
  0019c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0019f	3b 45 f4	 cmp	 eax, DWORD PTR _l$[ebp]
  001a2	73 1d		 jae	 SHORT $LN8@M_HandleFo

; 8326 : 					cv_grfogcolor.zstring[5 - i] = temp[l - i];

  001a4	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  001a7	2b 45 f8	 sub	 eax, DWORD PTR _i$[ebp]
  001aa	b9 05 00 00 00	 mov	 ecx, 5
  001af	2b 4d f8	 sub	 ecx, DWORD PTR _i$[ebp]
  001b2	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _cv_grfogcolor+28
  001b8	8a 44 05 ec	 mov	 al, BYTE PTR _temp$[ebp+eax]
  001bc	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001bf	eb d2		 jmp	 SHORT $LN7@M_HandleFo
$LN8@M_HandleFo:

; 8327 : 					cv_grfogcolor.zstring[5] = (char)choice;

  001c1	b8 01 00 00 00	 mov	 eax, 1
  001c6	6b c8 05	 imul	 ecx, eax, 5
  001c9	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _cv_grfogcolor+28
  001cf	8a 45 08	 mov	 al, BYTE PTR _choice$[ebp]
  001d2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$LN15@M_HandleFo:
$LN2@M_HandleFo:

; 8328 : 			}
; 8329 : 			break;
; 8330 : 	}
; 8331 : 	if (exitmenu)

  001d5	83 7d e8 00	 cmp	 DWORD PTR _exitmenu$[ebp], 0
  001d9	74 28		 je	 SHORT $LN21@M_HandleFo

; 8332 : 	{
; 8333 : 		if (currentMenu->prevMenu)

  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001e0	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  001e4	74 13		 je	 SHORT $LN20@M_HandleFo

; 8334 : 			M_SetupNextMenu(currentMenu->prevMenu);

  001e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001eb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001ee	51		 push	 ecx
  001ef	e8 00 00 00 00	 call	 _M_SetupNextMenu
  001f4	83 c4 04	 add	 esp, 4
  001f7	eb 0a		 jmp	 SHORT $LN21@M_HandleFo
$LN20@M_HandleFo:

; 8335 : 		else
; 8336 : 			M_ClearMenus(true);

  001f9	6a 01		 push	 1
  001fb	e8 00 00 00 00	 call	 _M_ClearMenus
  00200	83 c4 04	 add	 esp, 4
$LN21@M_HandleFo:

; 8337 : 	}
; 8338 : }

  00203	5f		 pop	 edi
  00204	5e		 pop	 esi
  00205	5b		 pop	 ebx
  00206	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00209	33 cd		 xor	 ecx, ebp
  0020b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
$LN24@M_HandleFo:
  00214	00 00 00 00	 DD	 $LN13@M_HandleFo
  00218	00 00 00 00	 DD	 $LN12@M_HandleFo
  0021c	00 00 00 00	 DD	 $LN11@M_HandleFo
  00220	00 00 00 00	 DD	 $LN10@M_HandleFo
  00224	00 00 00 00	 DD	 $LN14@M_HandleFo
$LN23@M_HandleFo:
  00228	00		 DB	 0
  00229	04		 DB	 4
  0022a	04		 DB	 4
  0022b	04		 DB	 4
  0022c	04		 DB	 4
  0022d	04		 DB	 4
  0022e	04		 DB	 4
  0022f	04		 DB	 4
  00230	04		 DB	 4
  00231	04		 DB	 4
  00232	04		 DB	 4
  00233	04		 DB	 4
  00234	04		 DB	 4
  00235	04		 DB	 4
  00236	04		 DB	 4
  00237	04		 DB	 4
  00238	04		 DB	 4
  00239	04		 DB	 4
  0023a	04		 DB	 4
  0023b	01		 DB	 1
  0023c	04		 DB	 4
  0023d	04		 DB	 4
  0023e	04		 DB	 4
  0023f	04		 DB	 4
  00240	04		 DB	 4
  00241	04		 DB	 4
  00242	04		 DB	 4
  00243	04		 DB	 4
  00244	04		 DB	 4
  00245	04		 DB	 4
  00246	04		 DB	 4
  00247	04		 DB	 4
  00248	04		 DB	 4
  00249	04		 DB	 4
  0024a	04		 DB	 4
  0024b	04		 DB	 4
  0024c	04		 DB	 4
  0024d	04		 DB	 4
  0024e	04		 DB	 4
  0024f	04		 DB	 4
  00250	04		 DB	 4
  00251	04		 DB	 4
  00252	04		 DB	 4
  00253	04		 DB	 4
  00254	04		 DB	 4
  00255	04		 DB	 4
  00256	04		 DB	 4
  00257	04		 DB	 4
  00258	04		 DB	 4
  00259	04		 DB	 4
  0025a	04		 DB	 4
  0025b	04		 DB	 4
  0025c	04		 DB	 4
  0025d	04		 DB	 4
  0025e	04		 DB	 4
  0025f	04		 DB	 4
  00260	04		 DB	 4
  00261	04		 DB	 4
  00262	04		 DB	 4
  00263	04		 DB	 4
  00264	04		 DB	 4
  00265	04		 DB	 4
  00266	04		 DB	 4
  00267	04		 DB	 4
  00268	04		 DB	 4
  00269	04		 DB	 4
  0026a	04		 DB	 4
  0026b	04		 DB	 4
  0026c	04		 DB	 4
  0026d	04		 DB	 4
  0026e	04		 DB	 4
  0026f	04		 DB	 4
  00270	04		 DB	 4
  00271	04		 DB	 4
  00272	04		 DB	 4
  00273	04		 DB	 4
  00274	04		 DB	 4
  00275	04		 DB	 4
  00276	04		 DB	 4
  00277	04		 DB	 4
  00278	04		 DB	 4
  00279	04		 DB	 4
  0027a	04		 DB	 4
  0027b	04		 DB	 4
  0027c	04		 DB	 4
  0027d	04		 DB	 4
  0027e	04		 DB	 4
  0027f	04		 DB	 4
  00280	04		 DB	 4
  00281	04		 DB	 4
  00282	04		 DB	 4
  00283	04		 DB	 4
  00284	04		 DB	 4
  00285	04		 DB	 4
  00286	04		 DB	 4
  00287	04		 DB	 4
  00288	04		 DB	 4
  00289	04		 DB	 4
  0028a	04		 DB	 4
  0028b	04		 DB	 4
  0028c	04		 DB	 4
  0028d	04		 DB	 4
  0028e	04		 DB	 4
  0028f	04		 DB	 4
  00290	04		 DB	 4
  00291	04		 DB	 4
  00292	04		 DB	 4
  00293	04		 DB	 4
  00294	04		 DB	 4
  00295	04		 DB	 4
  00296	04		 DB	 4
  00297	04		 DB	 4
  00298	04		 DB	 4
  00299	04		 DB	 4
  0029a	04		 DB	 4
  0029b	04		 DB	 4
  0029c	04		 DB	 4
  0029d	04		 DB	 4
  0029e	04		 DB	 4
  0029f	04		 DB	 4
  002a0	04		 DB	 4
  002a1	04		 DB	 4
  002a2	04		 DB	 4
  002a3	04		 DB	 4
  002a4	04		 DB	 4
  002a5	04		 DB	 4
  002a6	04		 DB	 4
  002a7	04		 DB	 4
  002a8	04		 DB	 4
  002a9	04		 DB	 4
  002aa	04		 DB	 4
  002ab	04		 DB	 4
  002ac	04		 DB	 4
  002ad	04		 DB	 4
  002ae	04		 DB	 4
  002af	04		 DB	 4
  002b0	04		 DB	 4
  002b1	04		 DB	 4
  002b2	04		 DB	 4
  002b3	04		 DB	 4
  002b4	04		 DB	 4
  002b5	04		 DB	 4
  002b6	04		 DB	 4
  002b7	04		 DB	 4
  002b8	04		 DB	 4
  002b9	04		 DB	 4
  002ba	04		 DB	 4
  002bb	04		 DB	 4
  002bc	04		 DB	 4
  002bd	04		 DB	 4
  002be	04		 DB	 4
  002bf	04		 DB	 4
  002c0	04		 DB	 4
  002c1	04		 DB	 4
  002c2	04		 DB	 4
  002c3	04		 DB	 4
  002c4	04		 DB	 4
  002c5	04		 DB	 4
  002c6	04		 DB	 4
  002c7	04		 DB	 4
  002c8	04		 DB	 4
  002c9	04		 DB	 4
  002ca	04		 DB	 4
  002cb	04		 DB	 4
  002cc	04		 DB	 4
  002cd	04		 DB	 4
  002ce	04		 DB	 4
  002cf	04		 DB	 4
  002d0	04		 DB	 4
  002d1	04		 DB	 4
  002d2	04		 DB	 4
  002d3	04		 DB	 4
  002d4	04		 DB	 4
  002d5	04		 DB	 4
  002d6	04		 DB	 4
  002d7	04		 DB	 4
  002d8	04		 DB	 4
  002d9	04		 DB	 4
  002da	04		 DB	 4
  002db	04		 DB	 4
  002dc	04		 DB	 4
  002dd	04		 DB	 4
  002de	04		 DB	 4
  002df	04		 DB	 4
  002e0	04		 DB	 4
  002e1	04		 DB	 4
  002e2	04		 DB	 4
  002e3	04		 DB	 4
  002e4	04		 DB	 4
  002e5	04		 DB	 4
  002e6	04		 DB	 4
  002e7	04		 DB	 4
  002e8	04		 DB	 4
  002e9	04		 DB	 4
  002ea	04		 DB	 4
  002eb	04		 DB	 4
  002ec	04		 DB	 4
  002ed	04		 DB	 4
  002ee	04		 DB	 4
  002ef	04		 DB	 4
  002f0	04		 DB	 4
  002f1	04		 DB	 4
  002f2	04		 DB	 4
  002f3	04		 DB	 4
  002f4	04		 DB	 4
  002f5	04		 DB	 4
  002f6	04		 DB	 4
  002f7	04		 DB	 4
  002f8	04		 DB	 4
  002f9	04		 DB	 4
  002fa	04		 DB	 4
  002fb	04		 DB	 4
  002fc	04		 DB	 4
  002fd	04		 DB	 4
  002fe	04		 DB	 4
  002ff	04		 DB	 4
  00300	04		 DB	 4
  00301	04		 DB	 4
  00302	04		 DB	 4
  00303	04		 DB	 4
  00304	04		 DB	 4
  00305	04		 DB	 4
  00306	02		 DB	 2
  00307	04		 DB	 4
  00308	04		 DB	 4
  00309	04		 DB	 4
  0030a	04		 DB	 4
  0030b	04		 DB	 4
  0030c	04		 DB	 4
  0030d	04		 DB	 4
  0030e	03		 DB	 3
_M_HandleFogColor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_OGL_DrawColorMenu
_TEXT	SEGMENT
_my$ = -8						; size = 4
_mx$ = -4						; size = 4
_M_OGL_DrawColorMenu PROC				; COMDAT

; 8259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8260 : 	INT32 mx, my;
; 8261 : 
; 8262 : 	mx = OGL_ColorDef.x;

  00009	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _OGL_ColorDef+24
  00010	89 45 fc	 mov	 DWORD PTR _mx$[ebp], eax

; 8263 : 	my = OGL_ColorDef.y;

  00013	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _OGL_ColorDef+26
  0001a	89 45 f8	 mov	 DWORD PTR _my$[ebp], eax

; 8264 : 	M_DrawGenericMenu(); // use generic drawer for cursor, items and title

  0001d	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  00022	90		 npad	 1

; 8265 : 	V_DrawString(mx, my + currentMenu->menuitems[0].alphaKey - 10,

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OODDODCL@Gamma?5correction@
  00028	68 00 00 10 00	 push	 1048576			; 00100000H
  0002d	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00032	6b c8 00	 imul	 ecx, eax, 0
  00035	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0003b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0003e	0f b6 4c 08 10	 movzx	 ecx, BYTE PTR [eax+ecx+16]
  00043	8b 55 f8	 mov	 edx, DWORD PTR _my$[ebp]
  00046	8d 44 0a f6	 lea	 eax, DWORD PTR [edx+ecx-10]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mx$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _V_DrawString
  00054	83 c4 10	 add	 esp, 16			; 00000010H

; 8266 : 		V_YELLOWMAP, "Gamma correction");
; 8267 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_M_OGL_DrawColorMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_OGL_DrawFogMenu
_TEXT	SEGMENT
_my$ = -8						; size = 4
_mx$ = -4						; size = 4
_M_OGL_DrawFogMenu PROC					; COMDAT

; 8241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8242 : 	INT32 mx, my;
; 8243 : 
; 8244 : 	mx = OGL_FogDef.x;

  00009	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _OGL_FogDef+24
  00010	89 45 fc	 mov	 DWORD PTR _mx$[ebp], eax

; 8245 : 	my = OGL_FogDef.y;

  00013	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _OGL_FogDef+26
  0001a	89 45 f8	 mov	 DWORD PTR _my$[ebp], eax

; 8246 : 	M_DrawGenericMenu(); // use generic drawer for cursor, items and title

  0001d	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  00022	90		 npad	 1

; 8247 : 	V_DrawString(BASEVIDWIDTH - mx - V_StringWidth(cv_grfogcolor.string),

  00023	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_grfogcolor+24
  00028	50		 push	 eax
  00029	68 00 00 10 00	 push	 1048576			; 00100000H
  0002e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00033	c1 e1 00	 shl	 ecx, 0
  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0003c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0003f	0f b6 4c 08 10	 movzx	 ecx, BYTE PTR [eax+ecx+16]
  00044	03 4d f8	 add	 ecx, DWORD PTR _my$[ebp]
  00047	51		 push	 ecx
  00048	be 40 01 00 00	 mov	 esi, 320		; 00000140H
  0004d	2b 75 fc	 sub	 esi, DWORD PTR _mx$[ebp]
  00050	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _cv_grfogcolor+24
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 _V_StringWidth
  0005c	83 c4 04	 add	 esp, 4
  0005f	2b f0		 sub	 esi, eax
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _V_DrawString
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 8248 : 		my + currentMenu->menuitems[FOG_COLOR_ITEM].alphaKey, V_YELLOWMAP, cv_grfogcolor.string);
; 8249 : 	// blink cursor on FOG_COLOR_ITEM if selected
; 8250 : 	if (itemOn == FOG_COLOR_ITEM && skullAnimCounter < 4)

  0006a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00071	83 f8 01	 cmp	 eax, 1
  00074	75 3e		 jne	 SHORT $LN2@M_OGL_Draw
  00076	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _skullAnimCounter
  0007d	83 f8 04	 cmp	 eax, 4
  00080	7d 32		 jge	 SHORT $LN2@M_OGL_Draw

; 8251 : 		V_DrawCharacter(BASEVIDWIDTH - mx,

  00082	6a 00		 push	 0
  00084	68 df 00 00 00	 push	 223			; 000000dfH
  00089	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0008e	c1 e0 00	 shl	 eax, 0
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00097	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0009a	0f b6 44 02 10	 movzx	 eax, BYTE PTR [edx+eax+16]
  0009f	03 45 f8	 add	 eax, DWORD PTR _my$[ebp]
  000a2	50		 push	 eax
  000a3	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  000a8	2b 4d fc	 sub	 ecx, DWORD PTR _mx$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 _V_DrawCharacter
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@M_OGL_Draw:

; 8252 : 			my + currentMenu->menuitems[FOG_COLOR_ITEM].alphaKey, '_' | 0x80,false);
; 8253 : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_M_OGL_DrawFogMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawOpenGLMenu
_TEXT	SEGMENT
_my$ = -8						; size = 4
_mx$ = -4						; size = 4
_M_DrawOpenGLMenu PROC					; COMDAT

; 8226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8227 : 	INT32 mx, my;
; 8228 : 
; 8229 : 	mx = OpenGLOptionDef.x;

  00009	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _OpenGLOptionDef+24
  00010	89 45 fc	 mov	 DWORD PTR _mx$[ebp], eax

; 8230 : 	my = OpenGLOptionDef.y;

  00013	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _OpenGLOptionDef+26
  0001a	89 45 f8	 mov	 DWORD PTR _my$[ebp], eax

; 8231 : 	M_DrawGenericMenu(); // use generic drawer for cursor, items and title

  0001d	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  00022	90		 npad	 1

; 8232 : //	V_DrawString(BASEVIDWIDTH - mx - V_StringWidth(cv_scr_depth.string),
; 8233 : //		my + currentMenu->menuitems[2].alphaKey, V_YELLOWMAP, cv_scr_depth.string);
; 8234 : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_M_DrawOpenGLMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ChangeStringCvar
_TEXT	SEGMENT
tv69 = -344						; size = 4
$T1 = -340						; size = 4
$T2 = -336						; size = 4
_len$ = -268						; size = 4
_buf$ = -264						; size = 255
_cv$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_choice$ = 8						; size = 4
_M_ChangeStringCvar PROC				; COMDAT

; 7444 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 7445 : 	consvar_t *cv = (consvar_t *)currentMenu->menuitems[itemOn].itemaction;

  00016	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0001d	6b c8 14	 imul	 ecx, eax, 20
  00020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00026	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00029	8b 4c 08 0c	 mov	 ecx, DWORD PTR [eax+ecx+12]
  0002d	89 4d f8	 mov	 DWORD PTR _cv$[ebp], ecx

; 7446 : 	char buf[255];
; 7447 : 	size_t len;
; 7448 : 
; 7449 : 	switch (choice)

  00030	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  00033	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  00039	83 bd a8 fe ff
	ff 08		 cmp	 DWORD PTR tv69[ebp], 8
  00040	74 05		 je	 SHORT $LN4@M_ChangeSt
  00042	e9 8a 00 00 00	 jmp	 $LN6@M_ChangeSt
$LN4@M_ChangeSt:

; 7450 : 	{
; 7451 : 		case KEY_BACKSPACE:
; 7452 : 			len = strlen(cv->string);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _cv$[ebp]
  0004a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _strlen
  00053	83 c4 04	 add	 esp, 4
  00056	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _len$[ebp], eax

; 7453 : 			if (len > 0)

  0005c	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _len$[ebp], 0
  00063	76 62		 jbe	 SHORT $LN5@M_ChangeSt

; 7454 : 			{
; 7455 : 				M_Memcpy(buf, cv->string, len);

  00065	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _len$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _cv$[ebp]
  0006f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00072	52		 push	 edx
  00073	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00079	50		 push	 eax
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7456 : 				buf[len-1] = 0;

  00083	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _len$[ebp]
  00089	83 e8 01	 sub	 eax, 1
  0008c	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00092	81 bd b0 fe ff
	ff ff 00 00 00	 cmp	 DWORD PTR $T2[ebp], 255	; 000000ffH
  0009c	73 02		 jae	 SHORT $LN10@M_ChangeSt
  0009e	eb 06		 jmp	 SHORT $LN11@M_ChangeSt
$LN10@M_ChangeSt:
  000a0	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000a5	90		 npad	 1
$LN11@M_ChangeSt:
  000a6	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  000ac	c6 84 0d f8 fe
	ff ff 00	 mov	 BYTE PTR _buf$[ebp+ecx], 0

; 7457 : 				CV_Set(cv, buf);

  000b4	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _cv$[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _CV_Set
  000c4	83 c4 08	 add	 esp, 8
$LN5@M_ChangeSt:

; 7458 : 			}
; 7459 : 			return true;

  000c7	b8 01 00 00 00	 mov	 eax, 1
  000cc	e9 b9 00 00 00	 jmp	 $LN1@M_ChangeSt
$LN6@M_ChangeSt:

; 7460 : 		default:
; 7461 : 			if (choice >= 32 && choice <= 127)

  000d1	83 7d 08 20	 cmp	 DWORD PTR _choice$[ebp], 32 ; 00000020H
  000d5	0f 8c ad 00 00
	00		 jl	 $LN7@M_ChangeSt
  000db	83 7d 08 7f	 cmp	 DWORD PTR _choice$[ebp], 127 ; 0000007fH
  000df	0f 8f a3 00 00
	00		 jg	 $LN7@M_ChangeSt

; 7462 : 			{
; 7463 : 				len = strlen(cv->string);

  000e5	8b 45 f8	 mov	 eax, DWORD PTR _cv$[ebp]
  000e8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 _strlen
  000f1	83 c4 04	 add	 esp, 4
  000f4	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _len$[ebp], eax

; 7464 : 				if (len < MAXSTRINGLENGTH - 1)

  000fa	83 bd f4 fe ff
	ff 1f		 cmp	 DWORD PTR _len$[ebp], 31 ; 0000001fH
  00101	73 7e		 jae	 SHORT $LN8@M_ChangeSt

; 7465 : 				{
; 7466 : 					M_Memcpy(buf, cv->string, len);

  00103	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _len$[ebp]
  00109	50		 push	 eax
  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _cv$[ebp]
  0010d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00110	52		 push	 edx
  00111	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00117	50		 push	 eax
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7467 : 					buf[len++] = (char)choice;

  00121	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _len$[ebp]
  00127	8a 4d 08	 mov	 cl, BYTE PTR _choice$[ebp]
  0012a	88 8c 05 f8 fe
	ff ff		 mov	 BYTE PTR _buf$[ebp+eax], cl
  00131	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _len$[ebp]
  00137	83 c2 01	 add	 edx, 1
  0013a	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _len$[ebp], edx

; 7468 : 					buf[len] = 0;

  00140	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _len$[ebp]
  00146	89 85 ac fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0014c	81 bd ac fe ff
	ff ff 00 00 00	 cmp	 DWORD PTR $T1[ebp], 255	; 000000ffH
  00156	73 02		 jae	 SHORT $LN12@M_ChangeSt
  00158	eb 06		 jmp	 SHORT $LN13@M_ChangeSt
$LN12@M_ChangeSt:
  0015a	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0015f	90		 npad	 1
$LN13@M_ChangeSt:
  00160	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00166	c6 84 0d f8 fe
	ff ff 00	 mov	 BYTE PTR _buf$[ebp+ecx], 0

; 7469 : 					CV_Set(cv, buf);

  0016e	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00174	50		 push	 eax
  00175	8b 4d f8	 mov	 ecx, DWORD PTR _cv$[ebp]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 _CV_Set
  0017e	83 c4 08	 add	 esp, 8
$LN8@M_ChangeSt:

; 7470 : 				}
; 7471 : 				return true;

  00181	b8 01 00 00 00	 mov	 eax, 1
  00186	eb 02		 jmp	 SHORT $LN1@M_ChangeSt
$LN7@M_ChangeSt:

; 7472 : 			}
; 7473 : 			break;
; 7474 : 	}
; 7475 : 	return false;

  00188	33 c0		 xor	 eax, eax
$LN1@M_ChangeSt:

; 7476 : }

  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx
  0018d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00190	33 cd		 xor	 ecx, ebp
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
_M_ChangeStringCvar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ChangeCvar
_TEXT	SEGMENT
_s$1 = -28						; size = 20
_cv$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_choice$ = 8						; size = 4
_M_ChangeCvar PROC					; COMDAT

; 7425 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 7426 : 	consvar_t *cv = (consvar_t *)currentMenu->menuitems[itemOn].itemaction;

  00013	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0001a	6b c8 14	 imul	 ecx, eax, 20
  0001d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00023	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00026	8b 4c 08 0c	 mov	 ecx, DWORD PTR [eax+ecx+12]
  0002a	89 4d f8	 mov	 DWORD PTR _cv$[ebp], ecx

; 7427 : 
; 7428 : 	if (((currentMenu->menuitems[itemOn].status & IT_CVARTYPE) == IT_CV_SLIDER)
; 7429 : 	    ||((currentMenu->menuitems[itemOn].status & IT_CVARTYPE) == IT_CV_NOMOD))

  0002d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00034	6b c8 14	 imul	 ecx, eax, 20
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0003d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00040	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00044	81 e1 00 07 00
	00		 and	 ecx, 1792		; 00000700H
  0004a	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00050	74 25		 je	 SHORT $LN4@M_ChangeCv
  00052	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00059	6b c8 14	 imul	 ecx, eax, 20
  0005c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00062	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00065	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00069	81 e1 00 07 00
	00		 and	 ecx, 1792		; 00000700H
  0006f	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00075	75 1c		 jne	 SHORT $LN2@M_ChangeCv
$LN4@M_ChangeCv:

; 7430 : 	{
; 7431 : 		CV_SetValue(cv,cv->value+choice*2-1);

  00077	8b 45 f8	 mov	 eax, DWORD PTR _cv$[ebp]
  0007a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0007d	8b 55 08	 mov	 edx, DWORD PTR _choice$[ebp]
  00080	8d 44 51 ff	 lea	 eax, DWORD PTR [ecx+edx*2-1]
  00084	50		 push	 eax
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _cv$[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 _CV_SetValue
  0008e	83 c4 08	 add	 esp, 8

; 7432 : 	}

  00091	eb 75		 jmp	 SHORT $LN6@M_ChangeCv
$LN2@M_ChangeCv:

; 7433 : 	else if (cv->flags & CV_FLOAT)

  00093	8b 45 f8	 mov	 eax, DWORD PTR _cv$[ebp]
  00096	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00099	83 e1 10	 and	 ecx, 16			; 00000010H
  0009c	74 56		 je	 SHORT $LN5@M_ChangeCv

; 7434 : 	{
; 7435 : 		char s[20];
; 7436 : 		sprintf(s,"%f",FIXED_TO_FLOAT(cv->value)+(choice*2-1)*(1.0f/16.0f));

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _cv$[ebp]
  000a1	f3 0f 2a 40 14	 cvtsi2ss xmm0, DWORD PTR [eax+20]
  000a6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _choice$[ebp]
  000b1	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  000b5	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  000b9	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3d800000
  000c1	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000c9	83 ec 08	 sub	 esp, 8
  000cc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  000d6	8d 45 e4	 lea	 eax, DWORD PTR _s$1[ebp]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _sprintf
  000df	83 c4 10	 add	 esp, 16			; 00000010H

; 7437 : 		CV_Set(cv,s);

  000e2	8d 45 e4	 lea	 eax, DWORD PTR _s$1[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _cv$[ebp]
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 _CV_Set
  000ef	83 c4 08	 add	 esp, 8

; 7438 : 	}

  000f2	eb 14		 jmp	 SHORT $LN6@M_ChangeCv
$LN5@M_ChangeCv:

; 7439 : 	else
; 7440 : 		CV_AddValue(cv,choice*2-1);

  000f4	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  000f7	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  000fb	51		 push	 ecx
  000fc	8b 55 f8	 mov	 edx, DWORD PTR _cv$[ebp]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 _CV_AddValue
  00105	83 c4 08	 add	 esp, 8
$LN6@M_ChangeCv:

; 7441 : }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c3		 ret	 0
_M_ChangeCvar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawMessageMenu
_TEXT	SEGMENT
$T1 = -356						; size = 4
_len$2 = -288						; size = 4
_msg$ = -284						; size = 4
_mlines$ = -280						; size = 4
_string$ = -276						; size = 256
_max$ = -20						; size = 2
_start$ = -16						; size = 4
_i$ = -12						; size = 4
_y$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_M_DrawMessageMenu PROC					; COMDAT

; 7339 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 7340 : 	INT32 y = currentMenu->y;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0001b	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  0001f	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 7341 : 	size_t i, start = 0;

  00022	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _start$[ebp], 0

; 7342 : 	INT16 max;
; 7343 : 	char string[MAXMSGLINELEN];
; 7344 : 	INT32 mlines;
; 7345 : 	const char *msg = currentMenu->menuitems[0].text;

  00029	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0002e	6b c8 00	 imul	 ecx, eax, 0
  00031	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00037	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0003a	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0003e	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _msg$[ebp], ecx

; 7346 : 
; 7347 : 	mlines = currentMenu->lastOn>>8;

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00049	0f bf 48 1c	 movsx	 ecx, WORD PTR [eax+28]
  0004d	c1 f9 08	 sar	 ecx, 8
  00050	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _mlines$[ebp], ecx

; 7348 : 	max = (INT16)((UINT8)(currentMenu->lastOn & 0xFF)*8);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0005b	0f bf 48 1c	 movsx	 ecx, WORD PTR [eax+28]
  0005f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00065	0f b6 d1	 movzx	 edx, cl
  00068	c1 e2 03	 shl	 edx, 3
  0006b	66 89 55 ec	 mov	 WORD PTR _max$[ebp], dx

; 7349 : 	M_DrawTextBox(currentMenu->x, y - 8, (max+7)>>3, mlines);

  0006f	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _mlines$[ebp]
  00075	50		 push	 eax
  00076	0f bf 4d ec	 movsx	 ecx, WORD PTR _max$[ebp]
  0007a	83 c1 07	 add	 ecx, 7
  0007d	c1 f9 03	 sar	 ecx, 3
  00080	51		 push	 ecx
  00081	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  00084	83 ea 08	 sub	 edx, 8
  00087	52		 push	 edx
  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0008d	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _M_DrawTextBox
  00097	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@M_DrawMess:

; 7350 : 
; 7351 : 	while (*(msg+start))

  0009a	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _msg$[ebp]
  000a0	03 45 f0	 add	 eax, DWORD PTR _start$[ebp]
  000a3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000a6	85 c9		 test	 ecx, ecx
  000a8	0f 84 8f 01 00
	00		 je	 $LN3@M_DrawMess

; 7352 : 	{
; 7353 : 		size_t len = strlen(msg+start);

  000ae	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _msg$[ebp]
  000b4	03 45 f0	 add	 eax, DWORD PTR _start$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _strlen
  000bd	83 c4 04	 add	 esp, 4
  000c0	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _len$2[ebp], eax

; 7354 : 
; 7355 : 		for (i = 0; i < len; i++)

  000c6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000cd	eb 09		 jmp	 SHORT $LN6@M_DrawMess
$LN4@M_DrawMess:
  000cf	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000d2	83 c0 01	 add	 eax, 1
  000d5	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN6@M_DrawMess:
  000d8	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000db	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _len$2[ebp]
  000e1	0f 83 bb 00 00
	00		 jae	 $LN5@M_DrawMess

; 7356 : 		{
; 7357 : 			if (*(msg+start+i) == '\n')

  000e7	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _msg$[ebp]
  000ed	03 45 f0	 add	 eax, DWORD PTR _start$[ebp]
  000f0	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  000f3	0f be 14 08	 movsx	 edx, BYTE PTR [eax+ecx]
  000f7	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  000fa	0f 85 9d 00 00
	00		 jne	 $LN7@M_DrawMess

; 7358 : 			{
; 7359 : 				memset(string, 0, MAXMSGLINELEN);

  00100	68 00 01 00 00	 push	 256			; 00000100H
  00105	6a 00		 push	 0
  00107	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _string$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memset
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7360 : 				if (i >= MAXMSGLINELEN)

  00116	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0011d	72 1b		 jb	 SHORT $LN8@M_DrawMess

; 7361 : 				{
; 7362 : 					CONS_Printf("M_DrawMessageMenu: too long segment in %s\n", msg);

  0011f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _msg$[ebp]
  00125	50		 push	 eax
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@IAAKCKC@M_DrawMessageMenu?3?5too?5long?5seg@
  0012b	e8 00 00 00 00	 call	 _CONS_Printf
  00130	83 c4 08	 add	 esp, 8

; 7363 : 					return;

  00133	e9 05 01 00 00	 jmp	 $LN3@M_DrawMess

; 7364 : 				}

  00138	eb 61		 jmp	 SHORT $LN9@M_DrawMess
$LN8@M_DrawMess:

; 7365 : 				else
; 7366 : 				{
; 7367 : 					strncpy(string,msg+start, i);

  0013a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0013d	50		 push	 eax
  0013e	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _msg$[ebp]
  00144	03 4d f0	 add	 ecx, DWORD PTR _start$[ebp]
  00147	51		 push	 ecx
  00148	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _string$[ebp]
  0014e	52		 push	 edx
  0014f	e8 00 00 00 00	 call	 _strncpy
  00154	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7368 : 					string[i] = '\0';

  00157	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0015a	89 85 9c fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00160	81 bd 9c fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  0016a	73 02		 jae	 SHORT $LN14@M_DrawMess
  0016c	eb 06		 jmp	 SHORT $LN15@M_DrawMess
$LN14@M_DrawMess:
  0016e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00173	90		 npad	 1
$LN15@M_DrawMess:
  00174	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0017a	c6 84 0d ec fe
	ff ff 00	 mov	 BYTE PTR _string$[ebp+ecx], 0

; 7369 : 					start += i;

  00182	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  00185	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  00188	89 45 f0	 mov	 DWORD PTR _start$[ebp], eax

; 7370 : 					i = (size_t)-1; //added : 07-02-98 : damned!

  0018b	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1

; 7371 : 					start++;

  00192	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  00195	83 c0 01	 add	 eax, 1
  00198	89 45 f0	 mov	 DWORD PTR _start$[ebp], eax
$LN9@M_DrawMess:

; 7372 : 				}
; 7373 : 				break;

  0019b	eb 05		 jmp	 SHORT $LN5@M_DrawMess
$LN7@M_DrawMess:

; 7374 : 			}
; 7375 : 		}

  0019d	e9 2d ff ff ff	 jmp	 $LN4@M_DrawMess
$LN5@M_DrawMess:

; 7376 : 
; 7377 : 		if (i == strlen(msg+start))

  001a2	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _msg$[ebp]
  001a8	03 45 f0	 add	 eax, DWORD PTR _start$[ebp]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 _strlen
  001b1	83 c4 04	 add	 esp, 4
  001b4	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  001b7	75 43		 jne	 SHORT $LN12@M_DrawMess

; 7378 : 		{
; 7379 : 			if (i >= MAXMSGLINELEN)

  001b9	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  001c0	72 18		 jb	 SHORT $LN11@M_DrawMess

; 7380 : 			{
; 7381 : 				CONS_Printf("M_DrawMessageMenu: too long segment in %s\n", msg);

  001c2	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _msg$[ebp]
  001c8	50		 push	 eax
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@IAAKCKC@M_DrawMessageMenu?3?5too?5long?5seg@
  001ce	e8 00 00 00 00	 call	 _CONS_Printf
  001d3	83 c4 08	 add	 esp, 8

; 7382 : 				return;

  001d6	eb 65		 jmp	 SHORT $LN3@M_DrawMess

; 7383 : 			}

  001d8	eb 22		 jmp	 SHORT $LN12@M_DrawMess
$LN11@M_DrawMess:

; 7384 : 			else
; 7385 : 			{
; 7386 : 				strcpy(string, msg + start);

  001da	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _msg$[ebp]
  001e0	03 45 f0	 add	 eax, DWORD PTR _start$[ebp]
  001e3	50		 push	 eax
  001e4	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _string$[ebp]
  001ea	51		 push	 ecx
  001eb	e8 00 00 00 00	 call	 _strcpy
  001f0	83 c4 08	 add	 esp, 8

; 7387 : 				start += i;

  001f3	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  001f6	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  001f9	89 45 f0	 mov	 DWORD PTR _start$[ebp], eax
$LN12@M_DrawMess:

; 7388 : 			}
; 7389 : 		}
; 7390 : 
; 7391 : 		V_DrawString((BASEVIDWIDTH - V_StringWidth(string))/2,y,0,string);

  001fc	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _string$[ebp]
  00202	50		 push	 eax
  00203	6a 00		 push	 0
  00205	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  00208	51		 push	 ecx
  00209	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _string$[ebp]
  0020f	52		 push	 edx
  00210	e8 00 00 00 00	 call	 _V_StringWidth
  00215	83 c4 04	 add	 esp, 4
  00218	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  0021d	2b c8		 sub	 ecx, eax
  0021f	8b c1		 mov	 eax, ecx
  00221	99		 cdq
  00222	2b c2		 sub	 eax, edx
  00224	d1 f8		 sar	 eax, 1
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 _V_DrawString
  0022c	83 c4 10	 add	 esp, 16			; 00000010H

; 7392 : 		y += 8; //SHORT(hu_font[0]->height);

  0022f	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00232	83 c0 08	 add	 eax, 8
  00235	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 7393 : 	}

  00238	e9 5d fe ff ff	 jmp	 $LN2@M_DrawMess
$LN3@M_DrawMess:

; 7394 : }

  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi
  0023f	5b		 pop	 ebx
  00240	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00243	33 cd		 xor	 ecx, ebp
  00245	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024a	8b e5		 mov	 esp, ebp
  0024c	5d		 pop	 ebp
  0024d	c3		 ret	 0
_M_DrawMessageMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_EndGameResponse
_TEXT	SEGMENT
_ch$ = 8						; size = 4
_M_EndGameResponse PROC					; COMDAT

; 7083 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7084 : 	if (ch != 'y' && ch != KEY_ENTER)

  00009	83 7d 08 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  0000d	74 08		 je	 SHORT $LN2@M_EndGameR
  0000f	83 7d 08 0d	 cmp	 DWORD PTR _ch$[ebp], 13	; 0000000dH
  00013	74 02		 je	 SHORT $LN2@M_EndGameR

; 7085 : 		return;

  00015	eb 20		 jmp	 SHORT $LN1@M_EndGameR
$LN2@M_EndGameR:

; 7086 : 
; 7087 : 	currentMenu->lastOn = itemOn;

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0001c	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _itemOn
  00023	66 89 48 1c	 mov	 WORD PTR [eax+28], cx

; 7088 : 	M_ClearMenus(true);

  00027	6a 01		 push	 1
  00029	e8 00 00 00 00	 call	 _M_ClearMenus
  0002e	83 c4 04	 add	 esp, 4

; 7089 : 	//Command_ExitGame_f();
; 7090 : 	G_SetExitGameFlag();

  00031	e8 00 00 00 00	 call	 _G_SetExitGameFlag
  00036	90		 npad	 1
$LN1@M_EndGameR:

; 7091 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_M_EndGameResponse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SaveGameDeleteResponse
_TEXT	SEGMENT
$T1 = -328						; size = 4
_name$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_ch$ = 8						; size = 4
_M_SaveGameDeleteResponse PROC				; COMDAT

; 7025 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 7026 : 	char name[256];
; 7027 : 
; 7028 : 	if (ch != 'y')

  00016	83 7d 08 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  0001a	74 02		 je	 SHORT $LN2@M_SaveGame

; 7029 : 		return;

  0001c	eb 67		 jmp	 SHORT $LN1@M_SaveGame
$LN2@M_SaveGame:

; 7030 : 
; 7031 : 	// delete savegame
; 7032 : 	_snprintf(name, sizeof name, savegamename, curSaveSelected);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _curSaveSelected
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET _savegamename
  00029	68 00 01 00 00	 push	 256			; 00000100H
  0002e	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _name$[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ___snprintf
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 7033 : 	name[sizeof name - 1] = '\0';

  0003d	b8 01 00 00 00	 mov	 eax, 1
  00042	69 c8 ff 00 00
	00		 imul	 ecx, eax, 255
  00048	89 8d b8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0004e	81 bd b8 fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  00058	73 02		 jae	 SHORT $LN4@M_SaveGame
  0005a	eb 06		 jmp	 SHORT $LN5@M_SaveGame
$LN4@M_SaveGame:
  0005c	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00061	90		 npad	 1
$LN5@M_SaveGame:
  00062	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00068	c6 84 15 fc fe
	ff ff 00	 mov	 BYTE PTR _name$[ebp+edx], 0

; 7034 : 	remove(name);

  00070	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _remove
  0007c	83 c4 04	 add	 esp, 4

; 7035 : 
; 7036 : 	// Refresh savegame menu info
; 7037 : 	M_ReadSaveStrings();

  0007f	e8 00 00 00 00	 call	 _M_ReadSaveStrings
  00084	90		 npad	 1
$LN1@M_SaveGame:

; 7038 : }

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008b	33 cd		 xor	 ecx, ebp
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
_M_SaveGameDeleteResponse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ReadSaveStrings
_TEXT	SEGMENT
$T1 = -336						; size = 4
_name$ = -268						; size = 256
_i$ = -12						; size = 4
_handle$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_M_ReadSaveStrings PROC					; COMDAT

; 6996 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 6997 : 	FILE *handle;
; 6998 : 	UINT32 i;
; 6999 : 	char name[256];
; 7000 : 
; 7001 : 	for (i = 0; i < load_end - 1; i++) //nosave is the last one.

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@M_ReadSave
$LN2@M_ReadSave:
  0001f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_ReadSave:
  00028	83 7d f4 05	 cmp	 DWORD PTR _i$[ebp], 5
  0002c	0f 83 ba 00 00
	00		 jae	 $LN3@M_ReadSave

; 7002 : 	{
; 7003 : 		_snprintf(name, sizeof name, savegamename, i);

  00032	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET _savegamename
  0003b	68 00 01 00 00	 push	 256			; 00000100H
  00040	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _name$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___snprintf
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 7004 : 		name[sizeof name - 1] = '\0';

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	69 c8 ff 00 00
	00		 imul	 ecx, eax, 255
  0005a	89 8d b0 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00060	81 bd b0 fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  0006a	73 02		 jae	 SHORT $LN7@M_ReadSave
  0006c	eb 06		 jmp	 SHORT $LN8@M_ReadSave
$LN7@M_ReadSave:
  0006e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00073	90		 npad	 1
$LN8@M_ReadSave:
  00074	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0007a	c6 84 15 f4 fe
	ff ff 00	 mov	 BYTE PTR _name$[ebp+edx], 0

; 7005 : 
; 7006 : 		handle = fopen(name, "rb");

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00087	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _fopen
  00093	83 c4 08	 add	 esp, 8
  00096	89 45 f8	 mov	 DWORD PTR _handle$[ebp], eax

; 7007 : 		if (handle == NULL)

  00099	83 7d f8 00	 cmp	 DWORD PTR _handle$[ebp], 0
  0009d	75 20		 jne	 SHORT $LN5@M_ReadSave

; 7008 : 		{
; 7009 : 			LoadGameMenu[i].status = 0;

  0009f	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000a3	33 c9		 xor	 ecx, ecx
  000a5	66 89 88 00 00
	00 00		 mov	 WORD PTR _LoadGameMenu[eax], cx

; 7010 : 			savegameinfo[i].lives = -42;

  000ac	6b 45 f4 44	 imul	 eax, DWORD PTR _i$[ebp], 68
  000b0	c7 80 34 00 00
	00 d6 ff ff ff	 mov	 DWORD PTR _savegameinfo[eax+52], -42 ; ffffffd6H

; 7011 : 			continue;

  000ba	e9 60 ff ff ff	 jmp	 $LN2@M_ReadSave
$LN5@M_ReadSave:

; 7012 : 		}
; 7013 : 		fclose(handle);

  000bf	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _fclose
  000c8	83 c4 04	 add	 esp, 4

; 7014 : 		LoadGameMenu[i].status = 1;

  000cb	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000cf	b9 01 00 00 00	 mov	 ecx, 1
  000d4	66 89 88 00 00
	00 00		 mov	 WORD PTR _LoadGameMenu[eax], cx

; 7015 : 		M_ReadSavegameInfo(i);

  000db	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _M_ReadSavegameInfo
  000e4	83 c4 04	 add	 esp, 4

; 7016 : 	}

  000e7	e9 33 ff ff ff	 jmp	 $LN2@M_ReadSave
$LN3@M_ReadSave:

; 7017 : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f2	33 cd		 xor	 ecx, ebp
  000f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
_M_ReadSaveStrings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ReadSavegameInfo
_TEXT	SEGMENT
tv246 = -420						; size = 4
$T1 = -416						; size = 4
_tmp_i$2 = -348						; size = 4
_temp$ = -344						; size = 64
_fake$ = -280						; size = 4
_save_p$ = -276						; size = 4
_end_p$ = -272						; size = 4
_savebuffer$ = -268					; size = 4
_savename$ = -264					; size = 255
_length$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_slot$ = 8						; size = 4
_M_ReadSavegameInfo PROC				; COMDAT

; 6906 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 01 00
	00		 sub	 esp, 420		; 000001a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 6907 : #define BADSAVE I_Error("Bad savegame in slot %u", slot);
; 6908 : #define CHECKPOS if (save_p >= end_p) BADSAVE
; 6909 : 	size_t length;
; 6910 : 	char savename[255];
; 6911 : 	UINT8 *savebuffer;
; 6912 : 	UINT8 *end_p; // buffer end point, don't read past here
; 6913 : 	UINT8 *save_p;
; 6914 : 	INT32 fake; // Dummy variable
; 6915 : 	char temp[sizeof(timeattackfolder)];
; 6916 : 
; 6917 : 	sprintf(savename, savegamename, slot);

  00016	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET _savegamename
  0001f	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _savename$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _sprintf
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6918 : 
; 6919 : 	length = FIL_ReadFile(savename, &savebuffer);

  0002e	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _savebuffer$[ebp]
  00034	50		 push	 eax
  00035	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _savename$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _FIL_ReadFile
  00041	83 c4 08	 add	 esp, 8
  00044	89 45 f8	 mov	 DWORD PTR _length$[ebp], eax

; 6920 : 	if (length == 0)

  00047	83 7d f8 00	 cmp	 DWORD PTR _length$[ebp], 0
  0004b	75 39		 jne	 SHORT $LN5@M_ReadSave

; 6921 : 	{
; 6922 : 		CONS_Printf("%s %s", text[HUSTR_MSGU], savename);

  0004d	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _savename$[ebp]
  00053	50		 push	 eax
  00054	b9 04 00 00 00	 mov	 ecx, 4
  00059	69 d1 e8 00 00
	00		 imul	 edx, ecx, 232
  0005f	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00065	50		 push	 eax
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
  0006b	e8 00 00 00 00	 call	 _CONS_Printf
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6923 : 		savegameinfo[slot].lives = -42;

  00073	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  00077	c7 80 34 00 00
	00 d6 ff ff ff	 mov	 DWORD PTR _savegameinfo[eax+52], -42 ; ffffffd6H

; 6924 : 		return;

  00081	e9 34 04 00 00	 jmp	 $LN1@M_ReadSave
$LN5@M_ReadSave:

; 6925 : 	}
; 6926 : 
; 6927 : 	end_p = savebuffer + length;

  00086	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _savebuffer$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _length$[ebp]
  0008f	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _end_p$[ebp], eax

; 6928 : 
; 6929 : 	// skip the description field
; 6930 : 	save_p = savebuffer;

  00095	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _savebuffer$[ebp]
  0009b	89 85 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], eax

; 6931 : 
; 6932 : 	save_p += VERSIONSIZE;

  000a1	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  000a7	83 c0 10	 add	 eax, 16			; 00000010H
  000aa	89 85 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], eax

; 6933 : 
; 6934 : 	// dearchive all the modifications
; 6935 : 	// P_UnArchiveMisc()
; 6936 : 
; 6937 : 	CHECKPOS

  000b0	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  000b6	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _end_p$[ebp]
  000bc	72 11		 jb	 SHORT $LN6@M_ReadSave
  000be	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  000c7	e8 00 00 00 00	 call	 _I_Error
  000cc	83 c4 08	 add	 esp, 8
$LN6@M_ReadSave:

; 6938 : 	fake = READINT16(save_p);

  000cf	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  000d5	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000d8	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _fake$[ebp], ecx
  000de	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _save_p$[ebp]
  000e4	83 c2 02	 add	 edx, 2
  000e7	89 95 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], edx

; 6939 : 	if (fake-1 >= NUMMAPS) BADSAVE

  000ed	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  000f3	83 e8 01	 sub	 eax, 1
  000f6	3d 0b 04 00 00	 cmp	 eax, 1035		; 0000040bH
  000fb	7c 11		 jl	 SHORT $LN7@M_ReadSave
  000fd	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  00100	50		 push	 eax
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  00106	e8 00 00 00 00	 call	 _I_Error
  0010b	83 c4 08	 add	 esp, 8
$LN7@M_ReadSave:

; 6940 : 	strcpy(savegameinfo[slot].levelname, mapheaderinfo[fake-1].lvlttl);

  0010e	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  00114	83 e8 01	 sub	 eax, 1
  00117	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0011d	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  00123	51		 push	 ecx
  00124	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  00128	81 c2 10 00 00
	00		 add	 edx, OFFSET _savegameinfo+16
  0012e	52		 push	 edx
  0012f	e8 00 00 00 00	 call	 _strcpy
  00134	83 c4 08	 add	 esp, 8

; 6941 : 	savegameinfo[slot].gamemap = fake;

  00137	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  0013b	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _fake$[ebp]
  00141	89 88 3c 00 00
	00		 mov	 DWORD PTR _savegameinfo[eax+60], ecx

; 6942 : 
; 6943 : 	savegameinfo[slot].actnum = mapheaderinfo[fake-1].actnum;

  00147	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  0014d	83 e8 01	 sub	 eax, 1
  00150	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00156	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  0015a	8a 81 42 00 00
	00		 mov	 al, BYTE PTR _mapheaderinfo[ecx+66]
  00160	88 82 30 00 00
	00		 mov	 BYTE PTR _savegameinfo[edx+48], al

; 6944 : 
; 6945 : 	CHECKPOS

  00166	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  0016c	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _end_p$[ebp]
  00172	72 11		 jb	 SHORT $LN8@M_ReadSave
  00174	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  00177	50		 push	 eax
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  0017d	e8 00 00 00 00	 call	 _I_Error
  00182	83 c4 08	 add	 esp, 8
$LN8@M_ReadSave:

; 6946 : 	fake = READUINT16(save_p)-357; // emeralds

  00185	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  0018b	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0018e	81 e9 65 01 00
	00		 sub	 ecx, 357		; 00000165H
  00194	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _fake$[ebp], ecx
  0019a	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _save_p$[ebp]
  001a0	83 c2 02	 add	 edx, 2
  001a3	89 95 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], edx

; 6947 : 
; 6948 : 	savegameinfo[slot].numemeralds = 0;

  001a9	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  001ad	c6 80 33 00 00
	00 00		 mov	 BYTE PTR _savegameinfo[eax+51], 0

; 6949 : 
; 6950 : 	if (fake & EMERALD1)

  001b4	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  001ba	83 e0 01	 and	 eax, 1
  001bd	74 17		 je	 SHORT $LN9@M_ReadSave

; 6951 : 		savegameinfo[slot].numemeralds++;

  001bf	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  001c3	8a 88 33 00 00
	00		 mov	 cl, BYTE PTR _savegameinfo[eax+51]
  001c9	80 c1 01	 add	 cl, 1
  001cc	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  001d0	88 8a 33 00 00
	00		 mov	 BYTE PTR _savegameinfo[edx+51], cl
$LN9@M_ReadSave:

; 6952 : 	if (fake & EMERALD2)

  001d6	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  001dc	83 e0 02	 and	 eax, 2
  001df	74 17		 je	 SHORT $LN10@M_ReadSave

; 6953 : 		savegameinfo[slot].numemeralds++;

  001e1	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  001e5	8a 88 33 00 00
	00		 mov	 cl, BYTE PTR _savegameinfo[eax+51]
  001eb	80 c1 01	 add	 cl, 1
  001ee	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  001f2	88 8a 33 00 00
	00		 mov	 BYTE PTR _savegameinfo[edx+51], cl
$LN10@M_ReadSave:

; 6954 : 	if (fake & EMERALD3)

  001f8	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  001fe	83 e0 04	 and	 eax, 4
  00201	74 17		 je	 SHORT $LN11@M_ReadSave

; 6955 : 		savegameinfo[slot].numemeralds++;

  00203	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  00207	8a 88 33 00 00
	00		 mov	 cl, BYTE PTR _savegameinfo[eax+51]
  0020d	80 c1 01	 add	 cl, 1
  00210	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  00214	88 8a 33 00 00
	00		 mov	 BYTE PTR _savegameinfo[edx+51], cl
$LN11@M_ReadSave:

; 6956 : 	if (fake & EMERALD4)

  0021a	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  00220	83 e0 08	 and	 eax, 8
  00223	74 17		 je	 SHORT $LN12@M_ReadSave

; 6957 : 		savegameinfo[slot].numemeralds++;

  00225	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  00229	8a 88 33 00 00
	00		 mov	 cl, BYTE PTR _savegameinfo[eax+51]
  0022f	80 c1 01	 add	 cl, 1
  00232	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  00236	88 8a 33 00 00
	00		 mov	 BYTE PTR _savegameinfo[edx+51], cl
$LN12@M_ReadSave:

; 6958 : 	if (fake & EMERALD5)

  0023c	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  00242	83 e0 10	 and	 eax, 16			; 00000010H
  00245	74 17		 je	 SHORT $LN13@M_ReadSave

; 6959 : 		savegameinfo[slot].numemeralds++;

  00247	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  0024b	8a 88 33 00 00
	00		 mov	 cl, BYTE PTR _savegameinfo[eax+51]
  00251	80 c1 01	 add	 cl, 1
  00254	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  00258	88 8a 33 00 00
	00		 mov	 BYTE PTR _savegameinfo[edx+51], cl
$LN13@M_ReadSave:

; 6960 : 	if (fake & EMERALD6)

  0025e	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  00264	83 e0 20	 and	 eax, 32			; 00000020H
  00267	74 17		 je	 SHORT $LN14@M_ReadSave

; 6961 : 		savegameinfo[slot].numemeralds++;

  00269	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  0026d	8a 88 33 00 00
	00		 mov	 cl, BYTE PTR _savegameinfo[eax+51]
  00273	80 c1 01	 add	 cl, 1
  00276	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  0027a	88 8a 33 00 00
	00		 mov	 BYTE PTR _savegameinfo[edx+51], cl
$LN14@M_ReadSave:

; 6962 : 	if (fake & EMERALD7)

  00280	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _fake$[ebp]
  00286	83 e0 40	 and	 eax, 64			; 00000040H
  00289	74 17		 je	 SHORT $LN15@M_ReadSave

; 6963 : 		savegameinfo[slot].numemeralds++;

  0028b	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  0028f	8a 88 33 00 00
	00		 mov	 cl, BYTE PTR _savegameinfo[eax+51]
  00295	80 c1 01	 add	 cl, 1
  00298	6b 55 08 44	 imul	 edx, DWORD PTR _slot$[ebp], 68
  0029c	88 8a 33 00 00
	00		 mov	 BYTE PTR _savegameinfo[edx+51], cl
$LN15@M_ReadSave:

; 6964 : 
; 6965 : 	CHECKPOS

  002a2	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  002a8	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _end_p$[ebp]
  002ae	72 11		 jb	 SHORT $LN16@M_ReadSave
  002b0	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  002b3	50		 push	 eax
  002b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  002b9	e8 00 00 00 00	 call	 _I_Error
  002be	83 c4 08	 add	 esp, 8
$LN16@M_ReadSave:

; 6966 : 	READSTRINGN(save_p, temp, sizeof(temp)); // mod it belongs to

  002c1	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmp_i$2[ebp], 0
  002cb	eb 0f		 jmp	 SHORT $LN4@M_ReadSave
$LN2@M_ReadSave:
  002cd	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  002d3	83 c0 01	 add	 eax, 1
  002d6	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _tmp_i$2[ebp], eax
$LN4@M_ReadSave:
  002dc	83 bd a4 fe ff
	ff 40		 cmp	 DWORD PTR _tmp_i$2[ebp], 64 ; 00000040H
  002e3	73 43		 jae	 SHORT $LN3@M_ReadSave
  002e5	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  002eb	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _save_p$[ebp]
  002f1	8a 11		 mov	 dl, BYTE PTR [ecx]
  002f3	88 94 05 a8 fe
	ff ff		 mov	 BYTE PTR _temp$[ebp+eax], dl
  002fa	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  00300	0f be 8c 05 a8
	fe ff ff	 movsx	 ecx, BYTE PTR _temp$[ebp+eax]
  00308	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  0030e	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _save_p$[ebp]
  00314	83 c2 01	 add	 edx, 1
  00317	89 95 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], edx
  0031d	83 bd 5c fe ff
	ff 00		 cmp	 DWORD PTR tv246[ebp], 0
  00324	74 02		 je	 SHORT $LN3@M_ReadSave
  00326	eb a5		 jmp	 SHORT $LN2@M_ReadSave
$LN3@M_ReadSave:
  00328	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  0032e	89 85 60 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00334	83 bd 60 fe ff
	ff 40		 cmp	 DWORD PTR $T1[ebp], 64	; 00000040H
  0033b	73 02		 jae	 SHORT $LN23@M_ReadSave
  0033d	eb 06		 jmp	 SHORT $LN24@M_ReadSave
$LN23@M_ReadSave:
  0033f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00344	90		 npad	 1
$LN24@M_ReadSave:
  00345	8b 8d 60 fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0034b	c6 84 0d a8 fe
	ff ff 00	 mov	 BYTE PTR _temp$[ebp+ecx], 0

; 6967 : 
; 6968 : 	// P_UnArchivePlayer()
; 6969 : 	CHECKPOS

  00353	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  00359	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _end_p$[ebp]
  0035f	72 11		 jb	 SHORT $LN17@M_ReadSave
  00361	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  00364	50		 push	 eax
  00365	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  0036a	e8 00 00 00 00	 call	 _I_Error
  0036f	83 c4 08	 add	 esp, 8
$LN17@M_ReadSave:

; 6970 : 	savegameinfo[slot].skincolor = READUINT8(save_p);

  00372	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  00376	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _save_p$[ebp]
  0037c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0037e	88 90 31 00 00
	00		 mov	 BYTE PTR _savegameinfo[eax+49], dl
  00384	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  0038a	83 c0 01	 add	 eax, 1
  0038d	89 85 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], eax

; 6971 : 	CHECKPOS

  00393	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  00399	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _end_p$[ebp]
  0039f	72 11		 jb	 SHORT $LN18@M_ReadSave
  003a1	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  003a4	50		 push	 eax
  003a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  003aa	e8 00 00 00 00	 call	 _I_Error
  003af	83 c4 08	 add	 esp, 8
$LN18@M_ReadSave:

; 6972 : 	savegameinfo[slot].skinnum = READUINT8(save_p);

  003b2	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  003b6	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _save_p$[ebp]
  003bc	8a 11		 mov	 dl, BYTE PTR [ecx]
  003be	88 90 32 00 00
	00		 mov	 BYTE PTR _savegameinfo[eax+50], dl
  003c4	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  003ca	83 c0 01	 add	 eax, 1
  003cd	89 85 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], eax

; 6973 : 	strcpy(savegameinfo[slot].playername,

  003d3	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  003d7	0f b6 88 32 00
	00 00		 movzx	 ecx, BYTE PTR _savegameinfo[eax+50]
  003de	69 d1 ec 00 00
	00		 imul	 edx, ecx, 236
  003e4	81 c2 00 00 00
	00		 add	 edx, OFFSET _skins
  003ea	52		 push	 edx
  003eb	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  003ef	05 00 00 00 00	 add	 eax, OFFSET _savegameinfo
  003f4	50		 push	 eax
  003f5	e8 00 00 00 00	 call	 _strcpy
  003fa	83 c4 08	 add	 esp, 8

; 6974 : 		skins[savegameinfo[slot].skinnum].name);
; 6975 : 
; 6976 : 	CHECKPOS

  003fd	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  00403	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _end_p$[ebp]
  00409	72 11		 jb	 SHORT $LN19@M_ReadSave
  0040b	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  0040e	50		 push	 eax
  0040f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  00414	e8 00 00 00 00	 call	 _I_Error
  00419	83 c4 08	 add	 esp, 8
$LN19@M_ReadSave:

; 6977 : 	(void)READINT32(save_p); // Score

  0041c	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  00422	83 c0 04	 add	 eax, 4
  00425	89 85 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], eax

; 6978 : 
; 6979 : 	CHECKPOS

  0042b	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  00431	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _end_p$[ebp]
  00437	72 11		 jb	 SHORT $LN20@M_ReadSave
  00439	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  0043c	50		 push	 eax
  0043d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  00442	e8 00 00 00 00	 call	 _I_Error
  00447	83 c4 08	 add	 esp, 8
$LN20@M_ReadSave:

; 6980 : 	savegameinfo[slot].lives = READINT32(save_p); // lives

  0044a	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  0044e	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _save_p$[ebp]
  00454	8b 11		 mov	 edx, DWORD PTR [ecx]
  00456	89 90 34 00 00
	00		 mov	 DWORD PTR _savegameinfo[eax+52], edx
  0045c	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  00462	83 c0 04	 add	 eax, 4
  00465	89 85 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], eax

; 6981 : 	CHECKPOS

  0046b	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  00471	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _end_p$[ebp]
  00477	72 11		 jb	 SHORT $LN21@M_ReadSave
  00479	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  0047c	50		 push	 eax
  0047d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BEFDDBBL@Bad?5savegame?5in?5slot?5?$CFu@
  00482	e8 00 00 00 00	 call	 _I_Error
  00487	83 c4 08	 add	 esp, 8
$LN21@M_ReadSave:

; 6982 : 	savegameinfo[slot].continues = READINT32(save_p); // continues

  0048a	6b 45 08 44	 imul	 eax, DWORD PTR _slot$[ebp], 68
  0048e	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _save_p$[ebp]
  00494	8b 11		 mov	 edx, DWORD PTR [ecx]
  00496	89 90 38 00 00
	00		 mov	 DWORD PTR _savegameinfo[eax+56], edx
  0049c	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _save_p$[ebp]
  004a2	83 c0 04	 add	 eax, 4
  004a5	89 85 ec fe ff
	ff		 mov	 DWORD PTR _save_p$[ebp], eax

; 6983 : 
; 6984 : 	// done
; 6985 : 	Z_Free(savebuffer);

  004ab	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _savebuffer$[ebp]
  004b1	50		 push	 eax
  004b2	e8 00 00 00 00	 call	 _Z_Free
  004b7	83 c4 04	 add	 esp, 4
$LN1@M_ReadSave:

; 6986 : #undef CHECKPOS
; 6987 : #undef BADSAVE
; 6988 : }

  004ba	5f		 pop	 edi
  004bb	5e		 pop	 esi
  004bc	5b		 pop	 ebx
  004bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004c0	33 cd		 xor	 ecx, ebp
  004c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c7	8b e5		 mov	 esp, ebp
  004c9	5d		 pop	 ebp
  004ca	c3		 ret	 0
_M_ReadSavegameInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawGameStats
_TEXT	SEGMENT
_colormap$1 = -8					; size = 4
_ecks$ = -4						; size = 4
_M_DrawGameStats PROC					; COMDAT

; 6768 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6769 : 	INT32 ecks;
; 6770 : 	saveSlotSelected = itemOn;

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00010	a3 00 00 00 00	 mov	 DWORD PTR _saveSlotSelected, eax

; 6771 : 
; 6772 : 	ecks = LoadDef.x + 24;

  00015	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _LoadDef+24
  0001c	83 c0 18	 add	 eax, 24			; 00000018H
  0001f	89 45 fc	 mov	 DWORD PTR _ecks$[ebp], eax

; 6773 : 	M_DrawTextBox(LoadDef.x-8,144, 23, 4);

  00022	6a 04		 push	 4
  00024	6a 17		 push	 23			; 00000017H
  00026	68 90 00 00 00	 push	 144			; 00000090H
  0002b	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _LoadDef+24
  00032	83 e8 08	 sub	 eax, 8
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _M_DrawTextBox
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 6774 : 
; 6775 : 	if (savegameinfo[saveSlotSelected].lives == -42) // Empty

  0003e	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  00045	83 b8 34 00 00
	00 d6		 cmp	 DWORD PTR _savegameinfo[eax+52], -42 ; ffffffd6H
  0004c	75 22		 jne	 SHORT $LN2@M_DrawGame

; 6776 : 	{
; 6777 : 		V_DrawString(ecks + 16, 152, 0, "EMPTY");

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_05HKAKDGKI@EMPTY@
  00053	6a 00		 push	 0
  00055	68 98 00 00 00	 push	 152			; 00000098H
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _ecks$[ebp]
  0005d	83 c0 10	 add	 eax, 16			; 00000010H
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _V_DrawString
  00066	83 c4 10	 add	 esp, 16			; 00000010H

; 6778 : 		return;

  00069	e9 ce 02 00 00	 jmp	 $LN1@M_DrawGame

; 6779 : 	}

  0006e	eb 29		 jmp	 SHORT $LN4@M_DrawGame
$LN2@M_DrawGame:

; 6780 : 	else if (saveSlotSelected == 5) //No save option

  00070	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _saveSlotSelected, 5
  00077	75 20		 jne	 SHORT $LN4@M_DrawGame

; 6781 : 	{
; 6782 : 		V_DrawString(ecks + 16, 152, 0, "NO SAVE");

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_07KKABJDOO@NO?5SAVE@
  0007e	6a 00		 push	 0
  00080	68 98 00 00 00	 push	 152			; 00000098H
  00085	8b 45 fc	 mov	 eax, DWORD PTR _ecks$[ebp]
  00088	83 c0 10	 add	 eax, 16			; 00000010H
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _V_DrawString
  00091	83 c4 10	 add	 esp, 16			; 00000010H

; 6783 : 		return;

  00094	e9 a3 02 00 00	 jmp	 $LN1@M_DrawGame
$LN4@M_DrawGame:

; 6784 : 	}
; 6785 : 
; 6786 : 	if (savegameinfo[saveSlotSelected].skincolor == 0)

  00099	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  000a0	0f b6 88 31 00
	00 00		 movzx	 ecx, BYTE PTR _savegameinfo[eax+49]
  000a7	85 c9		 test	 ecx, ecx
  000a9	75 68		 jne	 SHORT $LN5@M_DrawGame

; 6787 : 		V_DrawScaledPatch ((INT32)((LoadDef.x+4)*vid.fdupx),(INT32)((144+8)*vid.fdupy), V_NOSCALESTART,W_CachePatchName(skins[savegameinfo[saveSlotSelected].skinnum].faceprefix, PU_CACHE));

  000ab	6a 65		 push	 101			; 00000065H
  000ad	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  000b4	0f b6 88 32 00
	00 00		 movzx	 ecx, BYTE PTR _savegameinfo[eax+50]
  000bb	69 d1 ec 00 00
	00		 imul	 edx, ecx, 236
  000c1	81 c2 27 00 00
	00		 add	 edx, OFFSET _skins+39
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _W_CachePatchName
  000cd	83 c4 08	 add	 esp, 8
  000d0	50		 push	 eax
  000d1	68 00 00 01 00	 push	 65536			; 00010000H
  000d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43180000
  000de	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  000e6	f3 0f 2c c0	 cvttss2si eax, xmm0
  000ea	50		 push	 eax
  000eb	0f bf 0d 18 00
	00 00		 movsx	 ecx, WORD PTR _LoadDef+24
  000f2	83 c1 04	 add	 ecx, 4
  000f5	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000f9	f3 0f 59 05 28
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+40
  00101	f3 0f 2c d0	 cvttss2si edx, xmm0
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0010b	83 c4 10	 add	 esp, 16			; 00000010H
  0010e	e9 96 00 00 00	 jmp	 $LN6@M_DrawGame
$LN5@M_DrawGame:

; 6788 : 	else
; 6789 : 	{
; 6790 : 		const UINT8 *colormap = (const UINT8 *) translationtables[savegameinfo[saveSlotSelected].skinnum] - 256 + (savegameinfo[saveSlotSelected].skincolor<<8);

  00113	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  0011a	0f b6 88 32 00
	00 00		 movzx	 ecx, BYTE PTR _savegameinfo[eax+50]
  00121	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _translationtables[ecx*4]
  00128	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  0012f	0f b6 88 31 00
	00 00		 movzx	 ecx, BYTE PTR _savegameinfo[eax+49]
  00136	c1 e1 08	 shl	 ecx, 8
  00139	8d 94 0a 00 ff
	ff ff		 lea	 edx, DWORD PTR [edx+ecx-256]
  00140	89 55 f8	 mov	 DWORD PTR _colormap$1[ebp], edx

; 6791 : 		V_DrawMappedPatch ((INT32)((LoadDef.x+4)*vid.fdupx),(INT32)((144+8)*vid.fdupy), V_NOSCALESTART,W_CachePatchName(skins[savegameinfo[saveSlotSelected].skinnum].faceprefix, PU_CACHE), colormap);

  00143	8b 45 f8	 mov	 eax, DWORD PTR _colormap$1[ebp]
  00146	50		 push	 eax
  00147	6a 65		 push	 101			; 00000065H
  00149	6b 0d 00 00 00
	00 44		 imul	 ecx, DWORD PTR _saveSlotSelected, 68
  00150	0f b6 91 32 00
	00 00		 movzx	 edx, BYTE PTR _savegameinfo[ecx+50]
  00157	69 c2 ec 00 00
	00		 imul	 eax, edx, 236
  0015d	05 27 00 00 00	 add	 eax, OFFSET _skins+39
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _W_CachePatchName
  00168	83 c4 08	 add	 esp, 8
  0016b	50		 push	 eax
  0016c	68 00 00 01 00	 push	 65536			; 00010000H
  00171	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43180000
  00179	f3 0f 59 05 2c
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+44
  00181	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00185	51		 push	 ecx
  00186	0f bf 15 18 00
	00 00		 movsx	 edx, WORD PTR _LoadDef+24
  0018d	83 c2 04	 add	 edx, 4
  00190	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00194	f3 0f 59 05 28
	00 00 00	 mulss	 xmm0, DWORD PTR _vid+40
  0019c	f3 0f 2c c0	 cvttss2si eax, xmm0
  001a0	50		 push	 eax
  001a1	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  001a6	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@M_DrawGame:

; 6792 : 	}
; 6793 : 
; 6794 : 	V_DrawString(ecks + 16, 152, 0, savegameinfo[saveSlotSelected].playername);

  001a9	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  001b0	05 00 00 00 00	 add	 eax, OFFSET _savegameinfo
  001b5	50		 push	 eax
  001b6	6a 00		 push	 0
  001b8	68 98 00 00 00	 push	 152			; 00000098H
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR _ecks$[ebp]
  001c0	83 c1 10	 add	 ecx, 16			; 00000010H
  001c3	51		 push	 ecx
  001c4	e8 00 00 00 00	 call	 _V_DrawString
  001c9	83 c4 10	 add	 esp, 16			; 00000010H

; 6795 : 
; 6796 : 	if (savegameinfo[saveSlotSelected].gamemap == spstage_end)

  001cc	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  001d3	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _spstage_end
  001da	39 88 3c 00 00
	00		 cmp	 DWORD PTR _savegameinfo[eax+60], ecx
  001e0	75 1d		 jne	 SHORT $LN7@M_DrawGame

; 6797 : 		V_DrawString(ecks + 16, 160, 0, "COMPLETED!");

  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IIPDAPGP@COMPLETED?$CB@
  001e7	6a 00		 push	 0
  001e9	68 a0 00 00 00	 push	 160			; 000000a0H
  001ee	8b 45 fc	 mov	 eax, DWORD PTR _ecks$[ebp]
  001f1	83 c0 10	 add	 eax, 16			; 00000010H
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 _V_DrawString
  001fa	83 c4 10	 add	 esp, 16			; 00000010H
  001fd	eb 31		 jmp	 SHORT $LN8@M_DrawGame
$LN7@M_DrawGame:

; 6798 : 	else
; 6799 : 	{
; 6800 : // Don't show the act so people know it saves per-zone.
; 6801 : //	if (savegameinfo[saveSlotSelected].actnum == 0)
; 6802 : 		V_DrawString(ecks + 16, 160, 0, va("%s", savegameinfo[saveSlotSelected].levelname));

  001ff	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  00206	05 10 00 00 00	 add	 eax, OFFSET _savegameinfo+16
  0020b	50		 push	 eax
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00211	e8 00 00 00 00	 call	 _va
  00216	83 c4 08	 add	 esp, 8
  00219	50		 push	 eax
  0021a	6a 00		 push	 0
  0021c	68 a0 00 00 00	 push	 160			; 000000a0H
  00221	8b 4d fc	 mov	 ecx, DWORD PTR _ecks$[ebp]
  00224	83 c1 10	 add	 ecx, 16			; 00000010H
  00227	51		 push	 ecx
  00228	e8 00 00 00 00	 call	 _V_DrawString
  0022d	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@M_DrawGame:

; 6803 : //	else
; 6804 : //		V_DrawString(ecks + 16, 160, 0, va("%s %d", savegameinfo[saveSlotSelected].levelname, savegameinfo[saveSlotSelected].actnum));
; 6805 : 	}
; 6806 : 
; 6807 : 	V_DrawScaledPatch(ecks + 16, 168, 0, W_CachePatchName("CHAOS1", PU_CACHE));

  00230	6a 65		 push	 101			; 00000065H
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_06PKDIGJKN@CHAOS1@
  00237	e8 00 00 00 00	 call	 _W_CachePatchName
  0023c	83 c4 08	 add	 esp, 8
  0023f	50		 push	 eax
  00240	6a 00		 push	 0
  00242	68 a8 00 00 00	 push	 168			; 000000a8H
  00247	8b 45 fc	 mov	 eax, DWORD PTR _ecks$[ebp]
  0024a	83 c0 10	 add	 eax, 16			; 00000010H
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00253	83 c4 10	 add	 esp, 16			; 00000010H

; 6808 : 	V_DrawString(ecks + 36, 172, 0, va("x %d", savegameinfo[saveSlotSelected].numemeralds));

  00256	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  0025d	0f b6 88 33 00
	00 00		 movzx	 ecx, BYTE PTR _savegameinfo[eax+51]
  00264	51		 push	 ecx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_04GPFKCGHK@x?5?$CFd@
  0026a	e8 00 00 00 00	 call	 _va
  0026f	83 c4 08	 add	 esp, 8
  00272	50		 push	 eax
  00273	6a 00		 push	 0
  00275	68 ac 00 00 00	 push	 172			; 000000acH
  0027a	8b 55 fc	 mov	 edx, DWORD PTR _ecks$[ebp]
  0027d	83 c2 24	 add	 edx, 36			; 00000024H
  00280	52		 push	 edx
  00281	e8 00 00 00 00	 call	 _V_DrawString
  00286	83 c4 10	 add	 esp, 16			; 00000010H

; 6809 : 
; 6810 : 	V_DrawScaledPatch(ecks + 64, 169, 0, W_CachePatchName("ONEUP", PU_CACHE));

  00289	6a 65		 push	 101			; 00000065H
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_05CLPGBJMN@ONEUP@
  00290	e8 00 00 00 00	 call	 _W_CachePatchName
  00295	83 c4 08	 add	 esp, 8
  00298	50		 push	 eax
  00299	6a 00		 push	 0
  0029b	68 a9 00 00 00	 push	 169			; 000000a9H
  002a0	8b 45 fc	 mov	 eax, DWORD PTR _ecks$[ebp]
  002a3	83 c0 40	 add	 eax, 64			; 00000040H
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  002ac	83 c4 10	 add	 esp, 16			; 00000010H

; 6811 : 	V_DrawString(ecks + 84, 172, 0, va("x %d", savegameinfo[saveSlotSelected].lives));

  002af	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  002b6	8b 88 34 00 00
	00		 mov	 ecx, DWORD PTR _savegameinfo[eax+52]
  002bc	51		 push	 ecx
  002bd	68 00 00 00 00	 push	 OFFSET ??_C@_04GPFKCGHK@x?5?$CFd@
  002c2	e8 00 00 00 00	 call	 _va
  002c7	83 c4 08	 add	 esp, 8
  002ca	50		 push	 eax
  002cb	6a 00		 push	 0
  002cd	68 ac 00 00 00	 push	 172			; 000000acH
  002d2	8b 55 fc	 mov	 edx, DWORD PTR _ecks$[ebp]
  002d5	83 c2 54	 add	 edx, 84			; 00000054H
  002d8	52		 push	 edx
  002d9	e8 00 00 00 00	 call	 _V_DrawString
  002de	83 c4 10	 add	 esp, 16			; 00000010H

; 6812 : 
; 6813 : 	V_DrawScaledPatch(ecks + 120, 168, 0, W_CachePatchName("CONTINS", PU_CACHE));

  002e1	6a 65		 push	 101			; 00000065H
  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_07HKMDFLPF@CONTINS@
  002e8	e8 00 00 00 00	 call	 _W_CachePatchName
  002ed	83 c4 08	 add	 esp, 8
  002f0	50		 push	 eax
  002f1	6a 00		 push	 0
  002f3	68 a8 00 00 00	 push	 168			; 000000a8H
  002f8	8b 45 fc	 mov	 eax, DWORD PTR _ecks$[ebp]
  002fb	83 c0 78	 add	 eax, 120		; 00000078H
  002fe	50		 push	 eax
  002ff	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00304	83 c4 10	 add	 esp, 16			; 00000010H

; 6814 : 	V_DrawString(ecks + 140, 172, 0, va("x %d", savegameinfo[saveSlotSelected].continues));

  00307	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  0030e	8b 88 38 00 00
	00		 mov	 ecx, DWORD PTR _savegameinfo[eax+56]
  00314	51		 push	 ecx
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_04GPFKCGHK@x?5?$CFd@
  0031a	e8 00 00 00 00	 call	 _va
  0031f	83 c4 08	 add	 esp, 8
  00322	50		 push	 eax
  00323	6a 00		 push	 0
  00325	68 ac 00 00 00	 push	 172			; 000000acH
  0032a	8b 55 fc	 mov	 edx, DWORD PTR _ecks$[ebp]
  0032d	81 c2 8c 00 00
	00		 add	 edx, 140		; 0000008cH
  00333	52		 push	 edx
  00334	e8 00 00 00 00	 call	 _V_DrawString
  00339	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@M_DrawGame:

; 6815 : }

  0033c	5f		 pop	 edi
  0033d	5e		 pop	 esi
  0033e	5b		 pop	 ebx
  0033f	8b e5		 mov	 esp, ebp
  00341	5d		 pop	 ebp
  00342	c3		 ret	 0
_M_DrawGameStats ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_PlayWithNoSave
_TEXT	SEGMENT
_M_PlayWithNoSave PROC					; COMDAT

; 6883 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6884 : 	if (Playing())

  00009	e8 00 00 00 00	 call	 _Playing
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $LN2@M_PlayWith

; 6885 : 	{
; 6886 : 		M_StartMessage(ALREADYPLAYING,M_ExitGameResponse,MM_YESNO);

  00012	6a 01		 push	 1
  00014	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _ALREADYPLAYING
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _M_StartMessage
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6887 : 		return;

  00027	eb 60		 jmp	 SHORT $LN1@M_PlayWith

; 6888 : 	}

  00029	eb 4e		 jmp	 SHORT $LN4@M_PlayWith
$LN2@M_PlayWith:

; 6889 : 	else if (modifiedgame && !savemoddata)

  0002b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00032	74 45		 je	 SHORT $LN4@M_PlayWith
  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  0003b	75 3c		 jne	 SHORT $LN4@M_PlayWith

; 6890 : 	{
; 6891 : 		M_DrawTextBox(24,64-4,32,3);

  0003d	6a 03		 push	 3
  0003f	6a 20		 push	 32			; 00000020H
  00041	6a 3c		 push	 60			; 0000003cH
  00043	6a 18		 push	 24			; 00000018H
  00045	e8 00 00 00 00	 call	 _M_DrawTextBox
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 6892 : 
; 6893 : 		V_DrawCenteredString(160, 64+4, 0, "Note: Game must be reset to record");

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BLMLPMML@Note?3?5Game?5must?5be?5reset?5to?5rec@
  00052	6a 00		 push	 0
  00054	6a 44		 push	 68			; 00000044H
  00056	68 a0 00 00 00	 push	 160			; 000000a0H
  0005b	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00060	83 c4 10	 add	 esp, 16			; 00000010H

; 6894 : 		V_DrawCenteredString(160, 64+16, 0, "statistics or unlock secrets.");

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KOILLOPH@statistics?5or?5unlock?5secrets?4@
  00068	6a 00		 push	 0
  0006a	6a 50		 push	 80			; 00000050H
  0006c	68 a0 00 00 00	 push	 160			; 000000a0H
  00071	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00076	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@M_PlayWith:

; 6895 : 	}
; 6896 : 
; 6897 : 	// Start a new game here.
; 6898 : 	M_NewGame();

  00079	e8 00 00 00 00	 call	 _M_NewGame
  0007e	90		 npad	 1

; 6899 : 	cursaveslot = -1;

  0007f	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _cursaveslot, -1
$LN1@M_PlayWith:

; 6900 : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_M_PlayWithNoSave ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_LoadSelect
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_LoadSelect PROC					; COMDAT

; 6845 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6846 : 	if (Playing())

  00009	e8 00 00 00 00	 call	 _Playing
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN2@M_LoadSele

; 6847 : 	{
; 6848 : 		M_StartMessage(ALREADYPLAYING,M_ExitGameResponse,MM_YESNO);

  00012	6a 01		 push	 1
  00014	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _ALREADYPLAYING
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _M_StartMessage
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6849 : 		return;

  00027	e9 cf 00 00 00	 jmp	 $LN1@M_LoadSele

; 6850 : 	}

  0002c	eb 4e		 jmp	 SHORT $LN4@M_LoadSele
$LN2@M_LoadSele:

; 6851 : 	else if (modifiedgame && !savemoddata)

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00035	74 45		 je	 SHORT $LN4@M_LoadSele
  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  0003e	75 3c		 jne	 SHORT $LN4@M_LoadSele

; 6852 : 	{
; 6853 : 		M_DrawTextBox(24,64-4,32,3);

  00040	6a 03		 push	 3
  00042	6a 20		 push	 32			; 00000020H
  00044	6a 3c		 push	 60			; 0000003cH
  00046	6a 18		 push	 24			; 00000018H
  00048	e8 00 00 00 00	 call	 _M_DrawTextBox
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 6854 : 
; 6855 : 		V_DrawCenteredString(160, 64+4, 0, "Note: Game must be reset to record");

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BLMLPMML@Note?3?5Game?5must?5be?5reset?5to?5rec@
  00055	6a 00		 push	 0
  00057	6a 44		 push	 68			; 00000044H
  00059	68 a0 00 00 00	 push	 160			; 000000a0H
  0005e	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00063	83 c4 10	 add	 esp, 16			; 00000010H

; 6856 : 		V_DrawCenteredString(160, 64+16, 0, "statistics or unlock secrets.");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KOILLOPH@statistics?5or?5unlock?5secrets?4@
  0006b	6a 00		 push	 0
  0006d	6a 50		 push	 80			; 00000050H
  0006f	68 a0 00 00 00	 push	 160			; 000000a0H
  00074	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00079	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@M_LoadSele:

; 6857 : 	}
; 6858 : 
; 6859 : 	if (!FIL_ReadFileOK(va(savegamename, choice)))

  0007c	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  0007f	50		 push	 eax
  00080	68 00 00 00 00	 push	 OFFSET _savegamename
  00085	e8 00 00 00 00	 call	 _va
  0008a	83 c4 08	 add	 esp, 8
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _FIL_ReadFileOK
  00093	83 c4 04	 add	 esp, 4
  00096	85 c0		 test	 eax, eax
  00098	75 08		 jne	 SHORT $LN5@M_LoadSele

; 6860 : 	{
; 6861 : 		// This slot is empty, so start a new game here.
; 6862 : 		M_NewGame();

  0009a	e8 00 00 00 00	 call	 _M_NewGame
  0009f	90		 npad	 1

; 6863 : 	}

  000a0	eb 51		 jmp	 SHORT $LN8@M_LoadSele
$LN5@M_LoadSele:

; 6864 : 	else if (savegameinfo[saveSlotSelected].gamemap == spstage_end) // Completed

  000a2	6b 05 00 00 00
	00 44		 imul	 eax, DWORD PTR _saveSlotSelected, 68
  000a9	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _spstage_end
  000b0	39 88 3c 00 00
	00		 cmp	 DWORD PTR _savegameinfo[eax+60], ecx
  000b6	75 23		 jne	 SHORT $LN7@M_LoadSele

; 6865 : 	{
; 6866 : 		fromloadgame = saveSlotSelected + 1;

  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _saveSlotSelected
  000bd	83 c0 01	 add	 eax, 1
  000c0	a3 00 00 00 00	 mov	 DWORD PTR _fromloadgame, eax

; 6867 : 		M_LevelSelect(0);

  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 _M_LevelSelect
  000cc	83 c4 04	 add	 esp, 4

; 6868 : 		pandoralevelselect = false; //this is set to true in the above function.

  000cf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _pandoralevelselect, 0

; 6869 : 	}

  000d9	eb 18		 jmp	 SHORT $LN8@M_LoadSele
$LN7@M_LoadSele:

; 6870 : 	else
; 6871 : 	{
; 6872 : 		G_LoadGame((UINT32)choice, 0);

  000db	6a 00		 push	 0
  000dd	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _G_LoadGame
  000e6	83 c4 08	 add	 esp, 8

; 6873 : 		M_ClearMenus(true);

  000e9	6a 01		 push	 1
  000eb	e8 00 00 00 00	 call	 _M_ClearMenus
  000f0	83 c4 04	 add	 esp, 4
$LN8@M_LoadSele:

; 6874 : 	}
; 6875 : 
; 6876 : 	cursaveslot = choice;

  000f3	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  000f6	a3 00 00 00 00	 mov	 DWORD PTR _cursaveslot, eax
$LN1@M_LoadSele:

; 6877 : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
_M_LoadSelect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawLoad
_TEXT	SEGMENT
_i$ = -4						; size = 4
_M_DrawLoad PROC					; COMDAT

; 6821 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6822 : 	INT32 i;
; 6823 : 
; 6824 : 	M_DrawGenericMenu();

  00009	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  0000e	90		 npad	 1

; 6825 : 
; 6826 : 	V_DrawCenteredString(BASEVIDWIDTH/2, 40, 0, "Hit backspace to delete a save.");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DEOHFJCO@Hit?5backspace?5to?5delete?5a?5save?4@
  00014	6a 00		 push	 0
  00016	6a 28		 push	 40			; 00000028H
  00018	68 a0 00 00 00	 push	 160			; 000000a0H
  0001d	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 6827 : 
; 6828 : 	for (i = 0; i < load_end - 1; i++) //nosave is the last one.

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN4@M_DrawLoad
$LN2@M_DrawLoad:
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawLoad:
  00037	83 7d fc 05	 cmp	 DWORD PTR _i$[ebp], 5
  0003b	7d 59		 jge	 SHORT $LN3@M_DrawLoad

; 6829 : 	{
; 6830 : 		M_DrawSaveLoadBorder(LoadDef.x,LoadDef.y+LINEHEIGHT*i);

  0003d	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _LoadDef+26
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00047	c1 e1 04	 shl	 ecx, 4
  0004a	03 c1		 add	 eax, ecx
  0004c	50		 push	 eax
  0004d	0f bf 15 18 00
	00 00		 movsx	 edx, WORD PTR _LoadDef+24
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _M_DrawSaveLoadBorder
  0005a	83 c4 08	 add	 esp, 8

; 6831 : 		V_DrawString(LoadDef.x,LoadDef.y+LINEHEIGHT*i,0,va("Save Slot %d", i+1));

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KJPOLLCA@Save?5Slot?5?$CFd@
  00069	e8 00 00 00 00	 call	 _va
  0006e	83 c4 08	 add	 esp, 8
  00071	50		 push	 eax
  00072	6a 00		 push	 0
  00074	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _LoadDef+26
  0007b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0007e	c1 e2 04	 shl	 edx, 4
  00081	03 ca		 add	 ecx, edx
  00083	51		 push	 ecx
  00084	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _LoadDef+24
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _V_DrawString
  00091	83 c4 10	 add	 esp, 16			; 00000010H

; 6832 : 	}

  00094	eb 98		 jmp	 SHORT $LN2@M_DrawLoad
$LN3@M_DrawLoad:

; 6833 : 
; 6834 : 	// Option to play with no save.
; 6835 : 	M_DrawSaveLoadBorder(LoadDef.x,LoadDef.y+LINEHEIGHT*i);

  00096	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _LoadDef+26
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000a0	c1 e1 04	 shl	 ecx, 4
  000a3	03 c1		 add	 eax, ecx
  000a5	50		 push	 eax
  000a6	0f bf 15 18 00
	00 00		 movsx	 edx, WORD PTR _LoadDef+24
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 _M_DrawSaveLoadBorder
  000b3	83 c4 08	 add	 esp, 8

; 6836 : 	V_DrawString(LoadDef.x,LoadDef.y+LINEHEIGHT*i,0,"Play Without Saving");

  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NJFMHIAJ@Play?5Without?5Saving@
  000bb	6a 00		 push	 0
  000bd	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _LoadDef+26
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c7	c1 e1 04	 shl	 ecx, 4
  000ca	03 c1		 add	 eax, ecx
  000cc	50		 push	 eax
  000cd	0f bf 15 18 00
	00 00		 movsx	 edx, WORD PTR _LoadDef+24
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 _V_DrawString
  000da	83 c4 10	 add	 esp, 16			; 00000010H

; 6837 : 
; 6838 : 	M_DrawGameStats();

  000dd	e8 00 00 00 00	 call	 _M_DrawGameStats
  000e2	90		 npad	 1

; 6839 : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_M_DrawLoad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_HandleVideoMode
_TEXT	SEGMENT
tv67 = -68						; size = 4
_ch$ = 8						; size = 4
_M_HandleVideoMode PROC					; COMDAT

; 6647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6648 : 	if (vidm_testingmode > 0)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _vidm_testingmode, 0
  00010	7e 22		 jle	 SHORT $LN4@M_HandleVi

; 6649 : 	{
; 6650 : 		// change back to the previous mode quickly
; 6651 : 		if (ch == KEY_ESCAPE)

  00012	83 7d 08 1b	 cmp	 DWORD PTR _ch$[ebp], 27	; 0000001bH
  00016	75 17		 jne	 SHORT $LN5@M_HandleVi

; 6652 : 		{
; 6653 : 			setmodeneeded = vidm_previousmode + 1;

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_previousmode
  0001d	83 c0 01	 add	 eax, 1
  00020	a3 00 00 00 00	 mov	 DWORD PTR _setmodeneeded, eax

; 6654 : 			vidm_testingmode = 0;

  00025	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _vidm_testingmode, 0
$LN5@M_HandleVi:

; 6655 : 		}
; 6656 : 		return;

  0002f	e9 cc 01 00 00	 jmp	 $LN2@M_HandleVi
$LN4@M_HandleVi:

; 6657 : 	}
; 6658 : 
; 6659 : 	switch (ch)

  00034	8b 45 08	 mov	 eax, DWORD PTR _ch$[ebp]
  00037	89 45 bc	 mov	 DWORD PTR tv67[ebp], eax
  0003a	8b 4d bc	 mov	 ecx, DWORD PTR tv67[ebp]
  0003d	83 e9 0d	 sub	 ecx, 13			; 0000000dH
  00040	89 4d bc	 mov	 DWORD PTR tv67[ebp], ecx
  00043	81 7d bc e1 00
	00 00		 cmp	 DWORD PTR tv67[ebp], 225 ; 000000e1H
  0004a	0f 87 b0 01 00
	00		 ja	 $LN26@M_HandleVi
  00050	8b 55 bc	 mov	 edx, DWORD PTR tv67[ebp]
  00053	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN28@M_HandleVi[edx]
  0005a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN29@M_HandleVi[eax*4]
$LN6@M_HandleVi:

; 6660 : 	{
; 6661 : 		case KEY_DOWNARROW:
; 6662 : 			S_StartSound(NULL, sfx_menu1);

  00061	6a 67		 push	 103			; 00000067H
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 _S_StartSound
  0006a	83 c4 08	 add	 esp, 8

; 6663 : 			vidm_current++;

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  00072	83 c0 01	 add	 eax, 1
  00075	a3 00 00 00 00	 mov	 DWORD PTR _vidm_current, eax

; 6664 : 			if (vidm_current >= vidm_nummodes)

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  0007f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _vidm_nummodes
  00085	7c 0a		 jl	 SHORT $LN7@M_HandleVi

; 6665 : 				vidm_current = 0;

  00087	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _vidm_current, 0
$LN7@M_HandleVi:

; 6666 : 			break;

  00091	e9 6a 01 00 00	 jmp	 $LN2@M_HandleVi
$LN8@M_HandleVi:

; 6667 : 
; 6668 : 		case KEY_UPARROW:
; 6669 : 			S_StartSound(NULL, sfx_menu1);

  00096	6a 67		 push	 103			; 00000067H
  00098	6a 00		 push	 0
  0009a	e8 00 00 00 00	 call	 _S_StartSound
  0009f	83 c4 08	 add	 esp, 8

; 6670 : 			vidm_current--;

  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  000a7	83 e8 01	 sub	 eax, 1
  000aa	a3 00 00 00 00	 mov	 DWORD PTR _vidm_current, eax

; 6671 : 			if (vidm_current < 0)

  000af	79 0d		 jns	 SHORT $LN9@M_HandleVi

; 6672 : 				vidm_current = vidm_nummodes - 1;

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_nummodes
  000b6	83 e8 01	 sub	 eax, 1
  000b9	a3 00 00 00 00	 mov	 DWORD PTR _vidm_current, eax
$LN9@M_HandleVi:

; 6673 : 			break;

  000be	e9 3d 01 00 00	 jmp	 $LN2@M_HandleVi
$LN10@M_HandleVi:

; 6674 : 
; 6675 : 		case KEY_LEFTARROW:
; 6676 : 			S_StartSound(NULL, sfx_menu1);

  000c3	6a 67		 push	 103			; 00000067H
  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 _S_StartSound
  000cc	83 c4 08	 add	 esp, 8

; 6677 : 			vidm_current -= vidm_column_size;

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  000d4	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _vidm_column_size
  000da	a3 00 00 00 00	 mov	 DWORD PTR _vidm_current, eax

; 6678 : 			if (vidm_current < 0)

  000df	79 12		 jns	 SHORT $LN11@M_HandleVi

; 6679 : 				vidm_current = (vidm_column_size*3) + vidm_current;

  000e1	6b 05 00 00 00
	00 03		 imul	 eax, DWORD PTR _vidm_column_size, 3
  000e8	03 05 00 00 00
	00		 add	 eax, DWORD PTR _vidm_current
  000ee	a3 00 00 00 00	 mov	 DWORD PTR _vidm_current, eax
$LN11@M_HandleVi:

; 6680 : 			if (vidm_current >= vidm_nummodes)

  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  000f8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _vidm_nummodes
  000fe	7c 0d		 jl	 SHORT $LN12@M_HandleVi

; 6681 : 				vidm_current = vidm_nummodes - 1;

  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_nummodes
  00105	83 e8 01	 sub	 eax, 1
  00108	a3 00 00 00 00	 mov	 DWORD PTR _vidm_current, eax
$LN12@M_HandleVi:

; 6682 : 			break;

  0010d	e9 ee 00 00 00	 jmp	 $LN2@M_HandleVi
$LN13@M_HandleVi:

; 6683 : 
; 6684 : 		case KEY_RIGHTARROW:
; 6685 : 			S_StartSound(NULL, sfx_menu1);

  00112	6a 67		 push	 103			; 00000067H
  00114	6a 00		 push	 0
  00116	e8 00 00 00 00	 call	 _S_StartSound
  0011b	83 c4 08	 add	 esp, 8

; 6686 : 			vidm_current += vidm_column_size;

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  00123	03 05 00 00 00
	00		 add	 eax, DWORD PTR _vidm_column_size
  00129	a3 00 00 00 00	 mov	 DWORD PTR _vidm_current, eax

; 6687 : 			if (vidm_current >= (vidm_column_size*3))

  0012e	6b 05 00 00 00
	00 03		 imul	 eax, DWORD PTR _vidm_column_size, 3
  00135	39 05 00 00 00
	00		 cmp	 DWORD PTR _vidm_current, eax
  0013b	7c 12		 jl	 SHORT $LN14@M_HandleVi

; 6688 : 				vidm_current %= vidm_column_size;

  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  00142	99		 cdq
  00143	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _vidm_column_size
  00149	89 15 00 00 00
	00		 mov	 DWORD PTR _vidm_current, edx
$LN14@M_HandleVi:

; 6689 : 			if (vidm_current >= vidm_nummodes)

  0014f	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  00154	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _vidm_nummodes
  0015a	7c 0d		 jl	 SHORT $LN15@M_HandleVi

; 6690 : 				vidm_current = vidm_nummodes - 1;

  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_nummodes
  00161	83 e8 01	 sub	 eax, 1
  00164	a3 00 00 00 00	 mov	 DWORD PTR _vidm_current, eax
$LN15@M_HandleVi:

; 6691 : 			break;

  00169	e9 92 00 00 00	 jmp	 $LN2@M_HandleVi
$LN16@M_HandleVi:

; 6692 : 
; 6693 : 		case KEY_ENTER:
; 6694 : 			S_StartSound(NULL, sfx_menu1);

  0016e	6a 67		 push	 103			; 00000067H
  00170	6a 00		 push	 0
  00172	e8 00 00 00 00	 call	 _S_StartSound
  00177	83 c4 08	 add	 esp, 8

; 6695 : 			if (!setmodeneeded) // in case the previous setmode was not finished

  0017a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setmodeneeded, 0
  00181	75 16		 jne	 SHORT $LN17@M_HandleVi

; 6696 : 				setmodeneeded = modedescs[vidm_current].modenum + 1;

  00183	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR _vidm_current, 12
  0018a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _modedescs[eax]
  00190	83 c1 01	 add	 ecx, 1
  00193	89 0d 00 00 00
	00		 mov	 DWORD PTR _setmodeneeded, ecx
$LN17@M_HandleVi:

; 6697 : 			break;

  00199	eb 65		 jmp	 SHORT $LN2@M_HandleVi
$LN18@M_HandleVi:

; 6698 : 
; 6699 : 		case KEY_ESCAPE: // this one same as M_Responder
; 6700 : 			if (currentMenu->prevMenu)

  0019b	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001a0	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  001a4	74 13		 je	 SHORT $LN19@M_HandleVi

; 6701 : 				M_SetupNextMenu(currentMenu->prevMenu);

  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001ab	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 _M_SetupNextMenu
  001b4	83 c4 04	 add	 esp, 4
  001b7	eb 0a		 jmp	 SHORT $LN20@M_HandleVi
$LN19@M_HandleVi:

; 6702 : 			else
; 6703 : 				M_ClearMenus(true);

  001b9	6a 01		 push	 1
  001bb	e8 00 00 00 00	 call	 _M_ClearMenus
  001c0	83 c4 04	 add	 esp, 4
$LN20@M_HandleVi:

; 6704 : 			break;

  001c3	eb 3b		 jmp	 SHORT $LN2@M_HandleVi
$LN21@M_HandleVi:

; 6705 : 
; 6706 : 		case 'T':
; 6707 : 		case 't':
; 6708 : 			vidm_testingmode = TICRATE*5;

  001c5	c7 05 00 00 00
	00 af 00 00 00	 mov	 DWORD PTR _vidm_testingmode, 175 ; 000000afH

; 6709 : 			vidm_previousmode = vid.modenum;

  001cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _vid
  001d4	a3 00 00 00 00	 mov	 DWORD PTR _vidm_previousmode, eax

; 6710 : 			if (!setmodeneeded) // in case the previous setmode was not finished

  001d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setmodeneeded, 0
  001e0	75 16		 jne	 SHORT $LN23@M_HandleVi

; 6711 : 				setmodeneeded = modedescs[vidm_current].modenum + 1;

  001e2	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR _vidm_current, 12
  001e9	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _modedescs[eax]
  001ef	83 c1 01	 add	 ecx, 1
  001f2	89 0d 00 00 00
	00		 mov	 DWORD PTR _setmodeneeded, ecx
$LN23@M_HandleVi:

; 6712 : 			break;

  001f8	eb 06		 jmp	 SHORT $LN2@M_HandleVi
$LN24@M_HandleVi:

; 6713 : 
; 6714 : 		case 'D':
; 6715 : 		case 'd':
; 6716 : 			// current active mode becomes the default mode.
; 6717 : 			SCR_SetDefaultMode();

  001fa	e8 00 00 00 00	 call	 _SCR_SetDefaultMode
  001ff	90		 npad	 1
$LN26@M_HandleVi:
$LN2@M_HandleVi:

; 6718 : 			break;
; 6719 : 
; 6720 : 		default:
; 6721 : 			break;
; 6722 : 	}
; 6723 : }

  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5b		 pop	 ebx
  00203	8b e5		 mov	 esp, ebp
  00205	5d		 pop	 ebp
  00206	c3		 ret	 0
  00207	90		 npad	 1
$LN29@M_HandleVi:
  00208	00 00 00 00	 DD	 $LN16@M_HandleVi
  0020c	00 00 00 00	 DD	 $LN18@M_HandleVi
  00210	00 00 00 00	 DD	 $LN24@M_HandleVi
  00214	00 00 00 00	 DD	 $LN21@M_HandleVi
  00218	00 00 00 00	 DD	 $LN8@M_HandleVi
  0021c	00 00 00 00	 DD	 $LN10@M_HandleVi
  00220	00 00 00 00	 DD	 $LN13@M_HandleVi
  00224	00 00 00 00	 DD	 $LN6@M_HandleVi
  00228	00 00 00 00	 DD	 $LN26@M_HandleVi
$LN28@M_HandleVi:
  0022c	00		 DB	 0
  0022d	08		 DB	 8
  0022e	08		 DB	 8
  0022f	08		 DB	 8
  00230	08		 DB	 8
  00231	08		 DB	 8
  00232	08		 DB	 8
  00233	08		 DB	 8
  00234	08		 DB	 8
  00235	08		 DB	 8
  00236	08		 DB	 8
  00237	08		 DB	 8
  00238	08		 DB	 8
  00239	08		 DB	 8
  0023a	01		 DB	 1
  0023b	08		 DB	 8
  0023c	08		 DB	 8
  0023d	08		 DB	 8
  0023e	08		 DB	 8
  0023f	08		 DB	 8
  00240	08		 DB	 8
  00241	08		 DB	 8
  00242	08		 DB	 8
  00243	08		 DB	 8
  00244	08		 DB	 8
  00245	08		 DB	 8
  00246	08		 DB	 8
  00247	08		 DB	 8
  00248	08		 DB	 8
  00249	08		 DB	 8
  0024a	08		 DB	 8
  0024b	08		 DB	 8
  0024c	08		 DB	 8
  0024d	08		 DB	 8
  0024e	08		 DB	 8
  0024f	08		 DB	 8
  00250	08		 DB	 8
  00251	08		 DB	 8
  00252	08		 DB	 8
  00253	08		 DB	 8
  00254	08		 DB	 8
  00255	08		 DB	 8
  00256	08		 DB	 8
  00257	08		 DB	 8
  00258	08		 DB	 8
  00259	08		 DB	 8
  0025a	08		 DB	 8
  0025b	08		 DB	 8
  0025c	08		 DB	 8
  0025d	08		 DB	 8
  0025e	08		 DB	 8
  0025f	08		 DB	 8
  00260	08		 DB	 8
  00261	08		 DB	 8
  00262	08		 DB	 8
  00263	02		 DB	 2
  00264	08		 DB	 8
  00265	08		 DB	 8
  00266	08		 DB	 8
  00267	08		 DB	 8
  00268	08		 DB	 8
  00269	08		 DB	 8
  0026a	08		 DB	 8
  0026b	08		 DB	 8
  0026c	08		 DB	 8
  0026d	08		 DB	 8
  0026e	08		 DB	 8
  0026f	08		 DB	 8
  00270	08		 DB	 8
  00271	08		 DB	 8
  00272	08		 DB	 8
  00273	03		 DB	 3
  00274	08		 DB	 8
  00275	08		 DB	 8
  00276	08		 DB	 8
  00277	08		 DB	 8
  00278	08		 DB	 8
  00279	08		 DB	 8
  0027a	08		 DB	 8
  0027b	08		 DB	 8
  0027c	08		 DB	 8
  0027d	08		 DB	 8
  0027e	08		 DB	 8
  0027f	08		 DB	 8
  00280	08		 DB	 8
  00281	08		 DB	 8
  00282	08		 DB	 8
  00283	02		 DB	 2
  00284	08		 DB	 8
  00285	08		 DB	 8
  00286	08		 DB	 8
  00287	08		 DB	 8
  00288	08		 DB	 8
  00289	08		 DB	 8
  0028a	08		 DB	 8
  0028b	08		 DB	 8
  0028c	08		 DB	 8
  0028d	08		 DB	 8
  0028e	08		 DB	 8
  0028f	08		 DB	 8
  00290	08		 DB	 8
  00291	08		 DB	 8
  00292	08		 DB	 8
  00293	03		 DB	 3
  00294	08		 DB	 8
  00295	08		 DB	 8
  00296	08		 DB	 8
  00297	08		 DB	 8
  00298	08		 DB	 8
  00299	08		 DB	 8
  0029a	08		 DB	 8
  0029b	08		 DB	 8
  0029c	08		 DB	 8
  0029d	08		 DB	 8
  0029e	08		 DB	 8
  0029f	08		 DB	 8
  002a0	08		 DB	 8
  002a1	08		 DB	 8
  002a2	08		 DB	 8
  002a3	08		 DB	 8
  002a4	08		 DB	 8
  002a5	08		 DB	 8
  002a6	08		 DB	 8
  002a7	08		 DB	 8
  002a8	08		 DB	 8
  002a9	08		 DB	 8
  002aa	08		 DB	 8
  002ab	08		 DB	 8
  002ac	08		 DB	 8
  002ad	08		 DB	 8
  002ae	08		 DB	 8
  002af	08		 DB	 8
  002b0	08		 DB	 8
  002b1	08		 DB	 8
  002b2	08		 DB	 8
  002b3	08		 DB	 8
  002b4	08		 DB	 8
  002b5	08		 DB	 8
  002b6	08		 DB	 8
  002b7	08		 DB	 8
  002b8	08		 DB	 8
  002b9	08		 DB	 8
  002ba	08		 DB	 8
  002bb	08		 DB	 8
  002bc	08		 DB	 8
  002bd	08		 DB	 8
  002be	08		 DB	 8
  002bf	08		 DB	 8
  002c0	08		 DB	 8
  002c1	08		 DB	 8
  002c2	08		 DB	 8
  002c3	08		 DB	 8
  002c4	08		 DB	 8
  002c5	08		 DB	 8
  002c6	08		 DB	 8
  002c7	08		 DB	 8
  002c8	08		 DB	 8
  002c9	08		 DB	 8
  002ca	08		 DB	 8
  002cb	08		 DB	 8
  002cc	08		 DB	 8
  002cd	08		 DB	 8
  002ce	08		 DB	 8
  002cf	08		 DB	 8
  002d0	08		 DB	 8
  002d1	08		 DB	 8
  002d2	08		 DB	 8
  002d3	08		 DB	 8
  002d4	08		 DB	 8
  002d5	08		 DB	 8
  002d6	08		 DB	 8
  002d7	08		 DB	 8
  002d8	08		 DB	 8
  002d9	08		 DB	 8
  002da	08		 DB	 8
  002db	08		 DB	 8
  002dc	08		 DB	 8
  002dd	08		 DB	 8
  002de	08		 DB	 8
  002df	08		 DB	 8
  002e0	08		 DB	 8
  002e1	08		 DB	 8
  002e2	08		 DB	 8
  002e3	08		 DB	 8
  002e4	08		 DB	 8
  002e5	08		 DB	 8
  002e6	08		 DB	 8
  002e7	08		 DB	 8
  002e8	08		 DB	 8
  002e9	08		 DB	 8
  002ea	08		 DB	 8
  002eb	08		 DB	 8
  002ec	08		 DB	 8
  002ed	08		 DB	 8
  002ee	08		 DB	 8
  002ef	08		 DB	 8
  002f0	08		 DB	 8
  002f1	08		 DB	 8
  002f2	08		 DB	 8
  002f3	08		 DB	 8
  002f4	08		 DB	 8
  002f5	08		 DB	 8
  002f6	08		 DB	 8
  002f7	08		 DB	 8
  002f8	08		 DB	 8
  002f9	08		 DB	 8
  002fa	08		 DB	 8
  002fb	08		 DB	 8
  002fc	08		 DB	 8
  002fd	08		 DB	 8
  002fe	08		 DB	 8
  002ff	08		 DB	 8
  00300	08		 DB	 8
  00301	08		 DB	 8
  00302	08		 DB	 8
  00303	08		 DB	 8
  00304	08		 DB	 8
  00305	04		 DB	 4
  00306	08		 DB	 8
  00307	08		 DB	 8
  00308	05		 DB	 5
  00309	08		 DB	 8
  0030a	06		 DB	 6
  0030b	08		 DB	 8
  0030c	08		 DB	 8
  0030d	07		 DB	 7
_M_HandleVideoMode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawVideoMode
_TEXT	SEGMENT
tv177 = -188						; size = 4
tv189 = -188						; size = 4
_height$ = -120						; size = 4
_width$ = -116						; size = 4
_temp$ = -112						; size = 80
_desc$ = -32						; size = 4
_nummodes$ = -28					; size = 4
_col$ = -24						; size = 4
_row$ = -20						; size = 4
_vdup$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_M_DrawVideoMode PROC					; COMDAT

; 6515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 6516 : 	INT32 i, j, vdup, row, col, nummodes;
; 6517 : 	const char *desc;
; 6518 : 	char temp[80];
; 6519 : 	INT32 width, height;
; 6520 : 
; 6521 : 	// draw title
; 6522 : 	M_DrawMenuTitle();

  00016	e8 00 00 00 00	 call	 _M_DrawMenuTitle
  0001b	90		 npad	 1

; 6523 : 
; 6524 : #if defined (__unix__) || defined (UNIXCOMMON) || defined (SDL)
; 6525 : 	VID_PrepareModeList(); // FIXME: hack
; 6526 : #endif
; 6527 : 	vidm_nummodes = 0;

  0001c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _vidm_nummodes, 0

; 6528 : 	nummodes = VID_NumModes();

  00026	e8 00 00 00 00	 call	 _VID_NumModes
  0002b	89 45 e4	 mov	 DWORD PTR _nummodes$[ebp], eax

; 6529 : 
; 6530 : #ifdef _WINDOWS
; 6531 : 	// clean that later: skip windowed mode 0, video modes menu only shows FULL SCREEN modes
; 6532 : 	if (nummodes < 1)

  0002e	83 7d e4 01	 cmp	 DWORD PTR _nummodes$[ebp], 1
  00032	7d 46		 jge	 SHORT $LN11@M_DrawVide

; 6533 : 	{
; 6534 : 		// put the windowed mode so that there is at least one mode
; 6535 : 		modedescs[0].modenum = 0;

  00034	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00039	6b c8 00	 imul	 ecx, eax, 0
  0003c	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _modedescs[ecx], 0

; 6536 : 		modedescs[0].desc = VID_GetModeName(0);

  00046	6a 00		 push	 0
  00048	e8 00 00 00 00	 call	 _VID_GetModeName
  0004d	83 c4 04	 add	 esp, 4
  00050	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00055	6b d1 00	 imul	 edx, ecx, 0
  00058	89 82 04 00 00
	00		 mov	 DWORD PTR _modedescs[edx+4], eax

; 6537 : 		modedescs[0].iscur = 1;

  0005e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00063	6b c8 00	 imul	 ecx, eax, 0
  00066	c7 81 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modedescs[ecx+8], 1

; 6538 : 		vidm_nummodes = 1;

  00070	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _vidm_nummodes, 1
$LN11@M_DrawVide:

; 6539 : 	}
; 6540 : 	for (i = 1; i <= nummodes && vidm_nummodes < MAXMODEDESCS; i++)

  0007a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00081	eb 09		 jmp	 SHORT $LN4@M_DrawVide
$LN2@M_DrawVide:
  00083	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawVide:
  0008c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0008f	3b 45 e4	 cmp	 eax, DWORD PTR _nummodes$[ebp]
  00092	0f 8f 11 01 00
	00		 jg	 $LN3@M_DrawVide
  00098	83 3d 00 00 00
	00 1e		 cmp	 DWORD PTR _vidm_nummodes, 30 ; 0000001eH
  0009f	0f 8d 04 01 00
	00		 jge	 $LN3@M_DrawVide

; 6541 : #else
; 6542 : 	// DOS does not skip mode 0, because mode 0 is ALWAYS present
; 6543 : 	for (i = 0; i < nummodes && vidm_nummodes < MAXMODEDESCS; i++)
; 6544 : #endif
; 6545 : 	{
; 6546 : 		desc = VID_GetModeName(i);

  000a5	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _VID_GetModeName
  000ae	83 c4 04	 add	 esp, 4
  000b1	89 45 e0	 mov	 DWORD PTR _desc$[ebp], eax

; 6547 : 		if (desc)

  000b4	83 7d e0 00	 cmp	 DWORD PTR _desc$[ebp], 0
  000b8	0f 84 e6 00 00
	00		 je	 $LN17@M_DrawVide

; 6548 : 		{
; 6549 : 			vdup = 0;

  000be	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _vdup$[ebp], 0

; 6550 : 
; 6551 : 			// when a resolution exists both under VGA and VESA, keep the
; 6552 : 			// VESA mode, which is always a higher modenum
; 6553 : 			for (j = 0; j < vidm_nummodes; j++)

  000c5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  000cc	eb 09		 jmp	 SHORT $LN7@M_DrawVide
$LN5@M_DrawVide:
  000ce	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000d1	83 c0 01	 add	 eax, 1
  000d4	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$LN7@M_DrawVide:
  000d7	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000da	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _vidm_nummodes
  000e0	7d 62		 jge	 SHORT $LN6@M_DrawVide

; 6554 : 			{
; 6555 : 				if (!strcmp(modedescs[j].desc, desc))

  000e2	8b 45 e0	 mov	 eax, DWORD PTR _desc$[ebp]
  000e5	50		 push	 eax
  000e6	6b 4d f4 0c	 imul	 ecx, DWORD PTR _j$[ebp], 12
  000ea	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _modedescs[ecx+4]
  000f0	52		 push	 edx
  000f1	e8 00 00 00 00	 call	 _strcmp
  000f6	83 c4 08	 add	 esp, 8
  000f9	85 c0		 test	 eax, eax
  000fb	75 45		 jne	 SHORT $LN13@M_DrawVide

; 6556 : 				{
; 6557 : 					// mode(0): 320x200 is always standard VGA, not vesa
; 6558 : 					if (modedescs[j].modenum)

  000fd	6b 45 f4 0c	 imul	 eax, DWORD PTR _j$[ebp], 12
  00101	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _modedescs[eax], 0
  00108	74 2f		 je	 SHORT $LN14@M_DrawVide

; 6559 : 					{
; 6560 : 						modedescs[j].modenum = i;

  0010a	6b 45 f4 0c	 imul	 eax, DWORD PTR _j$[ebp], 12
  0010e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00111	89 88 00 00 00
	00		 mov	 DWORD PTR _modedescs[eax], ecx

; 6561 : 						vdup = 1;

  00117	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _vdup$[ebp], 1

; 6562 : 
; 6563 : 						if (i == vid.modenum)

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00121	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _vid
  00127	75 0e		 jne	 SHORT $LN16@M_DrawVide

; 6564 : 							modedescs[j].iscur = 1;

  00129	6b 45 f4 0c	 imul	 eax, DWORD PTR _j$[ebp], 12
  0012d	c7 80 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modedescs[eax+8], 1
$LN16@M_DrawVide:

; 6565 : 					}

  00137	eb 07		 jmp	 SHORT $LN15@M_DrawVide
$LN14@M_DrawVide:

; 6566 : 					else
; 6567 : 						vdup = 1;

  00139	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _vdup$[ebp], 1
$LN15@M_DrawVide:

; 6568 : 
; 6569 : 					break;

  00140	eb 02		 jmp	 SHORT $LN6@M_DrawVide
$LN13@M_DrawVide:

; 6570 : 				}
; 6571 : 			}

  00142	eb 8a		 jmp	 SHORT $LN5@M_DrawVide
$LN6@M_DrawVide:

; 6572 : 
; 6573 : 			if (!vdup)

  00144	83 7d f0 00	 cmp	 DWORD PTR _vdup$[ebp], 0
  00148	75 5a		 jne	 SHORT $LN17@M_DrawVide

; 6574 : 			{
; 6575 : 				modedescs[vidm_nummodes].modenum = i;

  0014a	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR _vidm_nummodes, 12
  00151	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00154	89 88 00 00 00
	00		 mov	 DWORD PTR _modedescs[eax], ecx

; 6576 : 				modedescs[vidm_nummodes].desc = desc;

  0015a	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR _vidm_nummodes, 12
  00161	8b 4d e0	 mov	 ecx, DWORD PTR _desc$[ebp]
  00164	89 88 04 00 00
	00		 mov	 DWORD PTR _modedescs[eax+4], ecx

; 6577 : 				modedescs[vidm_nummodes].iscur = 0;

  0016a	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR _vidm_nummodes, 12
  00171	c7 80 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _modedescs[eax+8], 0

; 6578 : 
; 6579 : 				if (i == vid.modenum)

  0017b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0017e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _vid
  00184	75 11		 jne	 SHORT $LN18@M_DrawVide

; 6580 : 					modedescs[vidm_nummodes].iscur = 1;

  00186	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR _vidm_nummodes, 12
  0018d	c7 80 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modedescs[eax+8], 1
$LN18@M_DrawVide:

; 6581 : 
; 6582 : 				vidm_nummodes++;

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_nummodes
  0019c	83 c0 01	 add	 eax, 1
  0019f	a3 00 00 00 00	 mov	 DWORD PTR _vidm_nummodes, eax
$LN17@M_DrawVide:

; 6583 : 			}
; 6584 : 		}
; 6585 : 	}

  001a4	e9 da fe ff ff	 jmp	 $LN2@M_DrawVide
$LN3@M_DrawVide:

; 6586 : 
; 6587 : 	vidm_column_size = (vidm_nummodes+2) / 3;

  001a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_nummodes
  001ae	83 c0 02	 add	 eax, 2
  001b1	99		 cdq
  001b2	b9 03 00 00 00	 mov	 ecx, 3
  001b7	f7 f9		 idiv	 ecx
  001b9	a3 00 00 00 00	 mov	 DWORD PTR _vidm_column_size, eax

; 6588 : 
; 6589 : 	row = 41;

  001be	c7 45 ec 29 00
	00 00		 mov	 DWORD PTR _row$[ebp], 41 ; 00000029H

; 6590 : 	col = VidModeDef.y;

  001c5	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _VidModeDef+26
  001cc	89 45 e8	 mov	 DWORD PTR _col$[ebp], eax

; 6591 : 	for (i = 0; i < vidm_nummodes; i++)

  001cf	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001d6	eb 09		 jmp	 SHORT $LN10@M_DrawVide
$LN8@M_DrawVide:
  001d8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001db	83 c0 01	 add	 eax, 1
  001de	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@M_DrawVide:
  001e1	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001e4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _vidm_nummodes
  001ea	0f 8d 1a 01 00
	00		 jge	 $LN9@M_DrawVide

; 6592 : 	{
; 6593 : 		// Pull out the width and height
; 6594 : 		sscanf(modedescs[i].desc, "%u%*c%u", &width, &height);

  001f0	8d 45 88	 lea	 eax, DWORD PTR _height$[ebp]
  001f3	50		 push	 eax
  001f4	8d 4d 8c	 lea	 ecx, DWORD PTR _width$[ebp]
  001f7	51		 push	 ecx
  001f8	68 00 00 00 00	 push	 OFFSET ??_C@_07MFGEBFN@?$CFu?$CF?$CKc?$CFu@
  001fd	6b 55 f8 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00201	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _modedescs[edx+4]
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 _sscanf
  0020d	83 c4 10	 add	 esp, 16			; 00000010H

; 6595 : 
; 6596 : 		// Show multiples of 320x200 as green.
; 6597 : 		if ((width % BASEVIDWIDTH == 0 && height % BASEVIDHEIGHT == 0) &&

  00210	8b 45 8c	 mov	 eax, DWORD PTR _width$[ebp]
  00213	99		 cdq
  00214	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  00219	f7 f9		 idiv	 ecx
  0021b	85 d2		 test	 edx, edx
  0021d	75 72		 jne	 SHORT $LN19@M_DrawVide
  0021f	8b 45 88	 mov	 eax, DWORD PTR _height$[ebp]
  00222	99		 cdq
  00223	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00228	f7 f9		 idiv	 ecx
  0022a	85 d2		 test	 edx, edx
  0022c	75 63		 jne	 SHORT $LN19@M_DrawVide
  0022e	8b 45 8c	 mov	 eax, DWORD PTR _width$[ebp]
  00231	99		 cdq
  00232	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  00237	f7 f9		 idiv	 ecx
  00239	8b c8		 mov	 ecx, eax
  0023b	8b 45 88	 mov	 eax, DWORD PTR _height$[ebp]
  0023e	99		 cdq
  0023f	be c8 00 00 00	 mov	 esi, 200		; 000000c8H
  00244	f7 fe		 idiv	 esi
  00246	3b c8		 cmp	 ecx, eax
  00248	75 47		 jne	 SHORT $LN19@M_DrawVide

; 6598 : 			(width / BASEVIDWIDTH == height / BASEVIDHEIGHT))
; 6599 : 			V_DrawString(row, col, modedescs[i].iscur ? V_YELLOWMAP : V_GREENMAP, modedescs[i].desc);

  0024a	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0024e	83 b8 08 00 00
	00 00		 cmp	 DWORD PTR _modedescs[eax+8], 0
  00255	74 0c		 je	 SHORT $LN26@M_DrawVide
  00257	c7 85 44 ff ff
	ff 00 00 10 00	 mov	 DWORD PTR tv177[ebp], 1048576 ; 00100000H
  00261	eb 0a		 jmp	 SHORT $LN27@M_DrawVide
$LN26@M_DrawVide:
  00263	c7 85 44 ff ff
	ff 00 00 00 08	 mov	 DWORD PTR tv177[ebp], 134217728 ; 08000000H
$LN27@M_DrawVide:
  0026d	6b 4d f8 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  00271	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _modedescs[ecx+4]
  00277	52		 push	 edx
  00278	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv177[ebp]
  0027e	50		 push	 eax
  0027f	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  00282	51		 push	 ecx
  00283	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00286	52		 push	 edx
  00287	e8 00 00 00 00	 call	 _V_DrawString
  0028c	83 c4 10	 add	 esp, 16			; 00000010H
  0028f	eb 45		 jmp	 SHORT $LN20@M_DrawVide
$LN19@M_DrawVide:

; 6600 : 		else
; 6601 : 			V_DrawString(row, col, modedescs[i].iscur ? V_YELLOWMAP : 0, modedescs[i].desc);

  00291	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00295	83 b8 08 00 00
	00 00		 cmp	 DWORD PTR _modedescs[eax+8], 0
  0029c	74 0c		 je	 SHORT $LN28@M_DrawVide
  0029e	c7 85 44 ff ff
	ff 00 00 10 00	 mov	 DWORD PTR tv189[ebp], 1048576 ; 00100000H
  002a8	eb 0a		 jmp	 SHORT $LN29@M_DrawVide
$LN28@M_DrawVide:
  002aa	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv189[ebp], 0
$LN29@M_DrawVide:
  002b4	6b 4d f8 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  002b8	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR _modedescs[ecx+4]
  002be	52		 push	 edx
  002bf	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv189[ebp]
  002c5	50		 push	 eax
  002c6	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  002c9	51		 push	 ecx
  002ca	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  002cd	52		 push	 edx
  002ce	e8 00 00 00 00	 call	 _V_DrawString
  002d3	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@M_DrawVide:

; 6602 : 
; 6603 : 		col += 8;

  002d6	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  002d9	83 c0 08	 add	 eax, 8
  002dc	89 45 e8	 mov	 DWORD PTR _col$[ebp], eax

; 6604 : 		if ((i % vidm_column_size) == (vidm_column_size-1))

  002df	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002e2	99		 cdq
  002e3	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _vidm_column_size
  002e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_column_size
  002ee	83 e8 01	 sub	 eax, 1
  002f1	3b d0		 cmp	 edx, eax
  002f3	75 10		 jne	 SHORT $LN21@M_DrawVide

; 6605 : 		{
; 6606 : 			row += 7*13;

  002f5	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  002f8	83 c0 5b	 add	 eax, 91			; 0000005bH
  002fb	89 45 ec	 mov	 DWORD PTR _row$[ebp], eax

; 6607 : 			col = 36;

  002fe	c7 45 e8 24 00
	00 00		 mov	 DWORD PTR _col$[ebp], 36 ; 00000024H
$LN21@M_DrawVide:

; 6608 : 		}
; 6609 : 	}

  00305	e9 ce fe ff ff	 jmp	 $LN8@M_DrawVide
$LN9@M_DrawVide:

; 6610 : 
; 6611 : 	V_DrawCenteredString(BASEVIDWIDTH/2, 168, V_GREENMAP, "Green modes are recommended.");

  0030a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FNAEINCM@Green?5modes?5are?5recommended?4@
  0030f	68 00 00 00 08	 push	 134217728		; 08000000H
  00314	68 a8 00 00 00	 push	 168			; 000000a8H
  00319	68 a0 00 00 00	 push	 160			; 000000a0H
  0031e	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00323	83 c4 10	 add	 esp, 16			; 00000010H

; 6612 : 	V_DrawCenteredString(BASEVIDWIDTH/2, 176, V_GREENMAP, "Non-green modes are known to cause");

  00326	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FMPPEICP@Non?9green?5modes?5are?5known?5to?5ca@
  0032b	68 00 00 00 08	 push	 134217728		; 08000000H
  00330	68 b0 00 00 00	 push	 176			; 000000b0H
  00335	68 a0 00 00 00	 push	 160			; 000000a0H
  0033a	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0033f	83 c4 10	 add	 esp, 16			; 00000010H

; 6613 : 	V_DrawCenteredString(BASEVIDWIDTH/2, 184, V_GREENMAP, "random crashes. Use at own risk.");

  00342	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GDFMPIDM@random?5crashes?4?5Use?5at?5own?5risk@
  00347	68 00 00 00 08	 push	 134217728		; 08000000H
  0034c	68 b8 00 00 00	 push	 184			; 000000b8H
  00351	68 a0 00 00 00	 push	 160			; 000000a0H
  00356	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0035b	83 c4 10	 add	 esp, 16			; 00000010H

; 6614 : 
; 6615 : 	if (vidm_testingmode > 0)

  0035e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _vidm_testingmode, 0
  00365	7e 53		 jle	 SHORT $LN22@M_DrawVide

; 6616 : 	{
; 6617 : 		sprintf(temp, "TESTING MODE %s", modedescs[vidm_current].desc);

  00367	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR _vidm_current, 12
  0036e	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _modedescs[eax+4]
  00374	51		 push	 ecx
  00375	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CNMNCLAD@TESTING?5MODE?5?$CFs@
  0037a	8d 55 90	 lea	 edx, DWORD PTR _temp$[ebp]
  0037d	52		 push	 edx
  0037e	e8 00 00 00 00	 call	 _sprintf
  00383	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6618 : 		M_CentreText(VidModeDef.y + 80 + 16, temp);

  00386	8d 45 90	 lea	 eax, DWORD PTR _temp$[ebp]
  00389	50		 push	 eax
  0038a	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _VidModeDef+26
  00391	83 c1 60	 add	 ecx, 96			; 00000060H
  00394	51		 push	 ecx
  00395	e8 00 00 00 00	 call	 _M_CentreText
  0039a	83 c4 08	 add	 esp, 8

; 6619 : 		M_CentreText(VidModeDef.y + 90 + 16, "Please wait 5 seconds...");

  0039d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OGLLKDKJ@Please?5wait?55?5seconds?4?4?4@
  003a2	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _VidModeDef+26
  003a9	83 c0 6a	 add	 eax, 106		; 0000006aH
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 _M_CentreText
  003b2	83 c4 08	 add	 esp, 8

; 6620 : 	}

  003b5	e9 bb 00 00 00	 jmp	 $LN23@M_DrawVide
$LN22@M_DrawVide:

; 6621 : 	else
; 6622 : 	{
; 6623 : 		M_CentreText(VidModeDef.y + 60 + 16, "Press ENTER to set mode");

  003ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JABMHELI@Press?5ENTER?5to?5set?5mode@
  003bf	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _VidModeDef+26
  003c6	83 c0 4c	 add	 eax, 76			; 0000004cH
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 _M_CentreText
  003cf	83 c4 08	 add	 esp, 8

; 6624 : 		M_CentreText(VidModeDef.y + 70 + 16, "T to test mode for 5 seconds");

  003d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PFFJDAPB@T?5to?5test?5mode?5for?55?5seconds@
  003d7	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _VidModeDef+26
  003de	83 c0 56	 add	 eax, 86			; 00000056H
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _M_CentreText
  003e7	83 c4 08	 add	 esp, 8

; 6625 : 
; 6626 : 		sprintf(temp, "D to make %s the default", VID_GetModeName(vid.modenum));

  003ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _vid
  003ef	50		 push	 eax
  003f0	e8 00 00 00 00	 call	 _VID_GetModeName
  003f5	83 c4 04	 add	 esp, 4
  003f8	50		 push	 eax
  003f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EPFOILEI@D?5to?5make?5?$CFs?5the?5default@
  003fe	8d 4d 90	 lea	 ecx, DWORD PTR _temp$[ebp]
  00401	51		 push	 ecx
  00402	e8 00 00 00 00	 call	 _sprintf
  00407	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6627 : 		M_CentreText(VidModeDef.y + 80 + 16,temp);

  0040a	8d 45 90	 lea	 eax, DWORD PTR _temp$[ebp]
  0040d	50		 push	 eax
  0040e	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _VidModeDef+26
  00415	83 c1 60	 add	 ecx, 96			; 00000060H
  00418	51		 push	 ecx
  00419	e8 00 00 00 00	 call	 _M_CentreText
  0041e	83 c4 08	 add	 esp, 8

; 6628 : 
; 6629 : 		sprintf(temp, "Current default is %dx%d (%d bits)", cv_scr_width.value,

  00421	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_scr_depth+20
  00426	50		 push	 eax
  00427	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_scr_height+20
  0042d	51		 push	 ecx
  0042e	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_scr_width+20
  00434	52		 push	 edx
  00435	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LHLINNAO@Current?5default?5is?5?$CFdx?$CFd?5?$CI?$CFd?5bi@
  0043a	8d 45 90	 lea	 eax, DWORD PTR _temp$[ebp]
  0043d	50		 push	 eax
  0043e	e8 00 00 00 00	 call	 _sprintf
  00443	83 c4 14	 add	 esp, 20			; 00000014H

; 6630 : 			cv_scr_height.value, cv_scr_depth.value);
; 6631 : 		M_CentreText(VidModeDef.y + 90 + 16,temp);

  00446	8d 45 90	 lea	 eax, DWORD PTR _temp$[ebp]
  00449	50		 push	 eax
  0044a	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _VidModeDef+26
  00451	83 c1 6a	 add	 ecx, 106		; 0000006aH
  00454	51		 push	 ecx
  00455	e8 00 00 00 00	 call	 _M_CentreText
  0045a	83 c4 08	 add	 esp, 8

; 6632 : 
; 6633 : 		M_CentreText(VidModeDef.y + 100 + 16,"Press ESC to exit");

  0045d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NCKPKANH@Press?5ESC?5to?5exit@
  00462	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _VidModeDef+26
  00469	83 c0 74	 add	 eax, 116		; 00000074H
  0046c	50		 push	 eax
  0046d	e8 00 00 00 00	 call	 _M_CentreText
  00472	83 c4 08	 add	 esp, 8
$LN23@M_DrawVide:

; 6634 : 	}
; 6635 : 
; 6636 : 	// Draw the cursor for the VidMode menu
; 6637 : 	if (skullAnimCounter < 4) // use the Skull anim counter to blink the cursor

  00475	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _skullAnimCounter
  0047c	83 f8 04	 cmp	 eax, 4
  0047f	7d 48		 jge	 SHORT $LN24@M_DrawVide

; 6638 : 	{
; 6639 : 		i = 41 - 10 + ((vidm_current / vidm_column_size)*7*13);

  00481	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  00486	99		 cdq
  00487	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _vidm_column_size
  0048d	6b c0 07	 imul	 eax, eax, 7
  00490	6b c8 0d	 imul	 ecx, eax, 13
  00493	83 c1 1f	 add	 ecx, 31			; 0000001fH
  00496	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx

; 6640 : 		j = VidModeDef.y + ((vidm_current % vidm_column_size)*8);

  00499	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _VidModeDef+26
  004a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_current
  004a5	99		 cdq
  004a6	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _vidm_column_size
  004ac	8d 14 d1	 lea	 edx, DWORD PTR [ecx+edx*8]
  004af	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx

; 6641 : 		V_DrawCharacter(i - 8, j, '*',false);

  004b2	6a 00		 push	 0
  004b4	6a 2a		 push	 42			; 0000002aH
  004b6	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  004b9	50		 push	 eax
  004ba	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  004bd	83 e9 08	 sub	 ecx, 8
  004c0	51		 push	 ecx
  004c1	e8 00 00 00 00	 call	 _V_DrawCharacter
  004c6	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@M_DrawVide:

; 6642 : 	}
; 6643 : }

  004c9	5f		 pop	 edi
  004ca	5e		 pop	 esi
  004cb	5b		 pop	 ebx
  004cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004cf	33 cd		 xor	 ecx, ebp
  004d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004d6	8b e5		 mov	 esp, ebp
  004d8	5d		 pop	 ebp
  004d9	c3		 ret	 0
_M_DrawVideoMode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ChangecontrolResponse
_TEXT	SEGMENT
tv67 = -80						; size = 4
_ch$ = -12						; size = 4
_found$ = -8						; size = 4
_control$ = -4						; size = 4
_ev$ = 8						; size = 4
_M_ChangecontrolResponse PROC				; COMDAT

; 6383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6384 : 	INT32        control;
; 6385 : 	INT32        found;
; 6386 : 	INT32        ch = ev->data1;

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d f4	 mov	 DWORD PTR _ch$[ebp], ecx

; 6387 : 
; 6388 : 	// ESCAPE cancels
; 6389 : 	if (ch != KEY_ESCAPE)

  00012	83 7d f4 1b	 cmp	 DWORD PTR _ch$[ebp], 27	; 0000001bH
  00016	0f 84 d7 01 00
	00		 je	 $LN15@M_Changeco

; 6390 : 	{
; 6391 : 
; 6392 : 		switch (ev->type)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	89 4d b0	 mov	 DWORD PTR tv67[ebp], ecx
  00024	83 7d b0 06	 cmp	 DWORD PTR tv67[ebp], 6
  00028	77 1c		 ja	 SHORT $LN10@M_Changeco
  0002a	8b 55 b0	 mov	 edx, DWORD PTR tv67[ebp]
  0002d	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN27@M_Changeco[edx*4]
$LN5@M_Changeco:

; 6393 : 		{
; 6394 : 			// ignore mouse/joy movements, just get buttons
; 6395 : 			case ev_mouse:
; 6396 : 			case ev_mouse2:
; 6397 : 			case ev_joystick:
; 6398 : 			case ev_joystick2:
; 6399 : 				ch = KEY_NULL;      // no key

  00034	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 0

; 6400 : 			break;

  0003b	eb 09		 jmp	 SHORT $LN2@M_Changeco
$LN9@M_Changeco:

; 6401 : 
; 6402 : 			// keypad arrows are converted for the menu in cursor arrows
; 6403 : 			// so use the event instead of ch
; 6404 : 			case ev_keydown:
; 6405 : 				ch = ev->data1;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d f4	 mov	 DWORD PTR _ch$[ebp], ecx
$LN10@M_Changeco:
$LN2@M_Changeco:

; 6406 : 			break;
; 6407 : 
; 6408 : 			default:
; 6409 : 			break;
; 6410 : 		}
; 6411 : 
; 6412 : 		control = controltochange;

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR _controltochange
  0004b	89 45 fc	 mov	 DWORD PTR _control$[ebp], eax

; 6413 : 
; 6414 : 		// check if we already entered this key
; 6415 : 		found = -1;

  0004e	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _found$[ebp], -1

; 6416 : 		if (setupcontrols[control][0] ==ch)

  00055	8b 45 fc	 mov	 eax, DWORD PTR _control$[ebp]
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupcontrols
  0005e	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	6b c8 00	 imul	 ecx, eax, 0
  00069	8b 14 0a	 mov	 edx, DWORD PTR [edx+ecx]
  0006c	3b 55 f4	 cmp	 edx, DWORD PTR _ch$[ebp]
  0006f	75 09		 jne	 SHORT $LN11@M_Changeco

; 6417 : 			found = 0;

  00071	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _found$[ebp], 0
  00078	eb 23		 jmp	 SHORT $LN13@M_Changeco
$LN11@M_Changeco:

; 6418 : 		else if (setupcontrols[control][1] ==ch)

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _control$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupcontrols
  00083	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	c1 e0 00	 shl	 eax, 0
  0008e	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  00091	3b 4d f4	 cmp	 ecx, DWORD PTR _ch$[ebp]
  00094	75 07		 jne	 SHORT $LN13@M_Changeco

; 6419 : 			found = 1;

  00096	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1
$LN13@M_Changeco:

; 6420 : 		if (found >= 0)

  0009d	83 7d f8 00	 cmp	 DWORD PTR _found$[ebp], 0
  000a1	0f 8c b6 00 00
	00		 jl	 $LN14@M_Changeco

; 6421 : 		{
; 6422 : 			// replace mouse and joy clicks by double clicks
; 6423 : 			if (ch >= KEY_MOUSE1 && ch <= KEY_MOUSE1+MOUSEBUTTONS)

  000a7	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _ch$[ebp], 256 ; 00000100H
  000ae	7c 26		 jl	 SHORT $LN16@M_Changeco
  000b0	81 7d f4 08 01
	00 00		 cmp	 DWORD PTR _ch$[ebp], 264 ; 00000108H
  000b7	7f 1d		 jg	 SHORT $LN16@M_Changeco

; 6424 : 				setupcontrols[control][found] = ch-KEY_MOUSE1+KEY_DBLMOUSE1;

  000b9	8b 45 f4	 mov	 eax, DWORD PTR _ch$[ebp]
  000bc	83 c0 38	 add	 eax, 56			; 00000038H
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _control$[ebp]
  000c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _setupcontrols
  000c8	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  000cb	8b 55 f8	 mov	 edx, DWORD PTR _found$[ebp]
  000ce	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  000d1	e9 82 00 00 00	 jmp	 $LN22@M_Changeco
$LN16@M_Changeco:

; 6425 : 			else if (ch >= KEY_JOY1 && ch <= KEY_JOY1+JOYBUTTONS)

  000d6	81 7d f4 08 01
	00 00		 cmp	 DWORD PTR _ch$[ebp], 264 ; 00000108H
  000dd	7c 23		 jl	 SHORT $LN18@M_Changeco
  000df	81 7d f4 28 01
	00 00		 cmp	 DWORD PTR _ch$[ebp], 296 ; 00000128H
  000e6	7f 1a		 jg	 SHORT $LN18@M_Changeco

; 6426 : 				setupcontrols[control][found] = ch-KEY_JOY1+KEY_DBLJOY1;

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _ch$[ebp]
  000eb	83 c0 38	 add	 eax, 56			; 00000038H
  000ee	8b 4d fc	 mov	 ecx, DWORD PTR _control$[ebp]
  000f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _setupcontrols
  000f7	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  000fa	8b 55 f8	 mov	 edx, DWORD PTR _found$[ebp]
  000fd	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  00100	eb 56		 jmp	 SHORT $LN22@M_Changeco
$LN18@M_Changeco:

; 6427 : 			else if (ch >= KEY_2MOUSE1 && ch <= KEY_2MOUSE1+MOUSEBUTTONS)

  00102	81 7d f4 70 01
	00 00		 cmp	 DWORD PTR _ch$[ebp], 368 ; 00000170H
  00109	7c 23		 jl	 SHORT $LN20@M_Changeco
  0010b	81 7d f4 78 01
	00 00		 cmp	 DWORD PTR _ch$[ebp], 376 ; 00000178H
  00112	7f 1a		 jg	 SHORT $LN20@M_Changeco

; 6428 : 				setupcontrols[control][found] = ch-KEY_2MOUSE1+KEY_DBL2MOUSE1;

  00114	8b 45 f4	 mov	 eax, DWORD PTR _ch$[ebp]
  00117	83 c0 38	 add	 eax, 56			; 00000038H
  0011a	8b 4d fc	 mov	 ecx, DWORD PTR _control$[ebp]
  0011d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _setupcontrols
  00123	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  00126	8b 55 f8	 mov	 edx, DWORD PTR _found$[ebp]
  00129	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  0012c	eb 2a		 jmp	 SHORT $LN22@M_Changeco
$LN20@M_Changeco:

; 6429 : 			else if (ch >= KEY_2JOY1 && ch <= KEY_2JOY1+JOYBUTTONS)

  0012e	81 7d f4 78 01
	00 00		 cmp	 DWORD PTR _ch$[ebp], 376 ; 00000178H
  00135	7c 21		 jl	 SHORT $LN22@M_Changeco
  00137	81 7d f4 98 01
	00 00		 cmp	 DWORD PTR _ch$[ebp], 408 ; 00000198H
  0013e	7f 18		 jg	 SHORT $LN22@M_Changeco

; 6430 : 				setupcontrols[control][found] = ch-KEY_2JOY1+KEY_DBL2JOY1;

  00140	8b 45 f4	 mov	 eax, DWORD PTR _ch$[ebp]
  00143	83 c0 38	 add	 eax, 56			; 00000038H
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _control$[ebp]
  00149	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _setupcontrols
  0014f	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  00152	8b 55 f8	 mov	 edx, DWORD PTR _found$[ebp]
  00155	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN22@M_Changeco:

; 6431 : 		}

  00158	e9 96 00 00 00	 jmp	 $LN15@M_Changeco
$LN14@M_Changeco:

; 6432 : 		else
; 6433 : 		{
; 6434 : 			// check if change key1 or key2, or replace the two by the new
; 6435 : 			found = 0;

  0015d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _found$[ebp], 0

; 6436 : 			if (setupcontrols[control][0] == KEY_NULL)

  00164	8b 45 fc	 mov	 eax, DWORD PTR _control$[ebp]
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupcontrols
  0016d	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00170	b8 04 00 00 00	 mov	 eax, 4
  00175	6b c8 00	 imul	 ecx, eax, 0
  00178	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  0017c	75 09		 jne	 SHORT $LN23@M_Changeco

; 6437 : 				found++;

  0017e	8b 45 f8	 mov	 eax, DWORD PTR _found$[ebp]
  00181	83 c0 01	 add	 eax, 1
  00184	89 45 f8	 mov	 DWORD PTR _found$[ebp], eax
$LN23@M_Changeco:

; 6438 : 			if (setupcontrols[control][1] == KEY_NULL)

  00187	8b 45 fc	 mov	 eax, DWORD PTR _control$[ebp]
  0018a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupcontrols
  00190	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00193	b8 04 00 00 00	 mov	 eax, 4
  00198	c1 e0 00	 shl	 eax, 0
  0019b	83 3c 02 00	 cmp	 DWORD PTR [edx+eax], 0
  0019f	75 09		 jne	 SHORT $LN24@M_Changeco

; 6439 : 				found++;

  001a1	8b 45 f8	 mov	 eax, DWORD PTR _found$[ebp]
  001a4	83 c0 01	 add	 eax, 1
  001a7	89 45 f8	 mov	 DWORD PTR _found$[ebp], eax
$LN24@M_Changeco:

; 6440 : 			if (found == 2)

  001aa	83 7d f8 02	 cmp	 DWORD PTR _found$[ebp], 2
  001ae	75 22		 jne	 SHORT $LN25@M_Changeco

; 6441 : 			{
; 6442 : 				found = 0;

  001b0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _found$[ebp], 0

; 6443 : 				setupcontrols[control][1] = KEY_NULL;  //replace key 1,clear key2

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _control$[ebp]
  001ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupcontrols
  001c0	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  001c3	b8 04 00 00 00	 mov	 eax, 4
  001c8	c1 e0 00	 shl	 eax, 0
  001cb	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], 0
$LN25@M_Changeco:

; 6444 : 			}
; 6445 : 			G_CheckDoubleUsage(ch);

  001d2	8b 45 f4	 mov	 eax, DWORD PTR _ch$[ebp]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _G_CheckDoubleUsage
  001db	83 c4 04	 add	 esp, 4

; 6446 : 			setupcontrols[control][found] = ch;

  001de	8b 45 fc	 mov	 eax, DWORD PTR _control$[ebp]
  001e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupcontrols
  001e7	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  001ea	8b 45 f8	 mov	 eax, DWORD PTR _found$[ebp]
  001ed	8b 4d f4	 mov	 ecx, DWORD PTR _ch$[ebp]
  001f0	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
$LN15@M_Changeco:

; 6447 : 		}
; 6448 : 
; 6449 : 	}
; 6450 : 
; 6451 : 	M_StopMessage(0);

  001f3	6a 00		 push	 0
  001f5	e8 00 00 00 00	 call	 _M_StopMessage
  001fa	83 c4 04	 add	 esp, 4

; 6452 : }

  001fd	5f		 pop	 edi
  001fe	5e		 pop	 esi
  001ff	5b		 pop	 ebx
  00200	8b e5		 mov	 esp, ebp
  00202	5d		 pop	 ebp
  00203	c3		 ret	 0
$LN27@M_Changeco:
  00204	00 00 00 00	 DD	 $LN9@M_Changeco
  00208	00 00 00 00	 DD	 $LN10@M_Changeco
  0020c	00 00 00 00	 DD	 $LN10@M_Changeco
  00210	00 00 00 00	 DD	 $LN5@M_Changeco
  00214	00 00 00 00	 DD	 $LN5@M_Changeco
  00218	00 00 00 00	 DD	 $LN5@M_Changeco
  0021c	00 00 00 00	 DD	 $LN5@M_Changeco
_M_ChangecontrolResponse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawControlsGenerics
_TEXT	SEGMENT
tv135 = -88						; size = 4
tv214 = -88						; size = 4
tv225 = -88						; size = 4
_cv$1 = -20						; size = 4
_cursory$ = -16						; size = 4
_i$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_M_DrawControlsGenerics PROC				; COMDAT

; 6211 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6212 : 	INT32 x, y, i, cursory = 0;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cursory$[ebp], 0

; 6213 : 
; 6214 : 	// DRAW MENU
; 6215 : 	x = currentMenu->x;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00015	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00019	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 6216 : 	y = currentMenu->y;

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00021	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  00025	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 6217 : 
; 6218 : 	// draw title (or big pic)
; 6219 : 	M_DrawMenuTitle();

  00028	e8 00 00 00 00	 call	 _M_DrawMenuTitle
  0002d	90		 npad	 1

; 6220 : 
; 6221 : 	// UGLY HACK!
; 6222 : 	if (setupcontrols_secondaryplayer
; 6223 : 		&& currentMenu == &ControlDef2)

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setupcontrols_secondaryplayer, 0
  00035	74 6e		 je	 SHORT $LN16@M_DrawCont
  00037	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _ControlDef2
  00041	75 62		 jne	 SHORT $LN16@M_DrawCont

; 6224 : 	{
; 6225 : 		for (i = 0; i < 0; i++) //vertical adjustable lines

  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004a	eb 09		 jmp	 SHORT $LN4@M_DrawCont
$LN2@M_DrawCont:
  0004c	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0004f	83 c0 01	 add	 eax, 1
  00052	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawCont:
  00055	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  00059	7d 37		 jge	 SHORT $LN3@M_DrawCont

; 6226 : 		{
; 6227 : 			if (currentMenu->menuitems[i].alphaKey)

  0005b	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00065	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00068	0f b6 44 02 10	 movzx	 eax, BYTE PTR [edx+eax+16]
  0006d	85 c0		 test	 eax, eax
  0006f	74 1f		 je	 SHORT $LN15@M_DrawCont

; 6228 : 				y = currentMenu->y+currentMenu->menuitems[i].alphaKey;

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00076	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  0007a	6b 55 f4 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00083	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00086	0f b6 54 10 10	 movzx	 edx, BYTE PTR [eax+edx+16]
  0008b	03 ca		 add	 ecx, edx
  0008d	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx
$LN15@M_DrawCont:

; 6229 : 		}

  00090	eb ba		 jmp	 SHORT $LN2@M_DrawCont
$LN3@M_DrawCont:

; 6230 : 		if (itemOn < 0) //will stop and not display the item above.

  00092	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00099	85 c0		 test	 eax, eax
  0009b	7d 08		 jge	 SHORT $LN16@M_DrawCont

; 6231 : 			itemOn = 0;

  0009d	33 c0		 xor	 eax, eax
  0009f	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax
$LN16@M_DrawCont:

; 6232 : 	}
; 6233 : 
; 6234 : 	for (i = 0; i < currentMenu->numitems; i++)

  000a5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ac	eb 09		 jmp	 SHORT $LN7@M_DrawCont
$LN5@M_DrawCont:
  000ae	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000b1	83 c0 01	 add	 eax, 1
  000b4	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN7@M_DrawCont:
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  000bc	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  000c0	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  000c3	0f 8d af 03 00
	00		 jge	 $LN6@M_DrawCont

; 6235 : 	{
; 6236 : 		// UGLY HACK!
; 6237 : 		if (setupcontrols_secondaryplayer
; 6238 : 			&& currentMenu == &ControlDef2
; 6239 : 			&& i < 0) //vertical adjusted lines.

  000c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setupcontrols_secondaryplayer, 0
  000d0	74 14		 je	 SHORT $LN17@M_DrawCont
  000d2	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _ControlDef2
  000dc	75 08		 jne	 SHORT $LN17@M_DrawCont
  000de	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  000e2	7d 02		 jge	 SHORT $LN17@M_DrawCont

; 6240 : 			continue;

  000e4	eb c8		 jmp	 SHORT $LN5@M_DrawCont
$LN17@M_DrawCont:

; 6241 : 
; 6242 : 		if (i == itemOn)

  000e6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  000ed	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  000f0	75 06		 jne	 SHORT $LN18@M_DrawCont

; 6243 : 			cursory = y;

  000f2	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  000f5	89 45 f0	 mov	 DWORD PTR _cursory$[ebp], eax
$LN18@M_DrawCont:

; 6244 : 		switch (currentMenu->menuitems[i].status & IT_DISPLAY)

  000f8	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00102	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00105	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00109	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  0010e	89 45 a8	 mov	 DWORD PTR tv135[ebp], eax
  00111	81 7d a8 80 00
	00 00		 cmp	 DWORD PTR tv135[ebp], 128 ; 00000080H
  00118	0f 87 55 03 00
	00		 ja	 $LN8@M_DrawCont
  0011e	8b 4d a8	 mov	 ecx, DWORD PTR tv135[ebp]
  00121	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN44@M_DrawCont[ecx]
  00128	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN45@M_DrawCont[edx*4]
$LN19@M_DrawCont:

; 6245 : 		{
; 6246 : 			case IT_PATCH:
; 6247 : 				if (currentMenu->menuitems[i].patch && currentMenu->menuitems[i].patch[0])

  0012f	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00139	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0013c	83 7c 02 04 00	 cmp	 DWORD PTR [edx+eax+4], 0
  00141	74 50		 je	 SHORT $LN20@M_DrawCont
  00143	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0014d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00150	b9 01 00 00 00	 mov	 ecx, 1
  00155	6b c9 00	 imul	 ecx, ecx, 0
  00158	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  0015c	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00160	85 c0		 test	 eax, eax
  00162	74 2f		 je	 SHORT $LN20@M_DrawCont

; 6248 : 				{
; 6249 : 					V_DrawScaledPatch(x, y, 0,

  00164	6a 65		 push	 101			; 00000065H
  00166	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0016a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00170	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00173	8b 44 02 04	 mov	 eax, DWORD PTR [edx+eax+4]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 _W_CachePatchName
  0017d	83 c4 08	 add	 esp, 8
  00180	50		 push	 eax
  00181	6a 00		 push	 0
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  00186	51		 push	 ecx
  00187	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00190	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@M_DrawCont:

; 6250 : 						W_CachePatchName(currentMenu->menuitems[i].patch, PU_CACHE));
; 6251 : 				}
; 6252 : 			case IT_NOTHING:
; 6253 : 			case IT_DYBIGSPACE:
; 6254 : 				y += LINEHEIGHT;

  00193	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00196	83 c0 10	 add	 eax, 16			; 00000010H
  00199	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 6255 : 				break;

  0019c	e9 d2 02 00 00	 jmp	 $LN8@M_DrawCont
$LN23@M_DrawCont:

; 6256 : 			case IT_BIGSLIDER:
; 6257 : 				M_DrawThermo(x, y, (consvar_t *)currentMenu->menuitems[i].itemaction);

  001a1	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  001ab	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001ae	8b 44 02 0c	 mov	 eax, DWORD PTR [edx+eax+12]
  001b2	50		 push	 eax
  001b3	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  001b6	51		 push	 ecx
  001b7	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  001ba	52		 push	 edx
  001bb	e8 00 00 00 00	 call	 _M_DrawThermo
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6258 : 				y += LINEHEIGHT;

  001c3	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001c6	83 c0 10	 add	 eax, 16			; 00000010H
  001c9	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 6259 : 				break;

  001cc	e9 a2 02 00 00	 jmp	 $LN8@M_DrawCont
$LN24@M_DrawCont:

; 6260 : 			case IT_STRING:
; 6261 : 			case IT_WHITESTRING:
; 6262 : 				if (currentMenu->menuitems[i].alphaKey)

  001d1	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  001db	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001de	0f b6 44 02 10	 movzx	 eax, BYTE PTR [edx+eax+16]
  001e3	85 c0		 test	 eax, eax
  001e5	74 1f		 je	 SHORT $LN26@M_DrawCont

; 6263 : 					y = currentMenu->y+currentMenu->menuitems[i].alphaKey;

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001ec	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  001f0	6b 55 f4 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  001f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001f9	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  001fc	0f b6 54 10 10	 movzx	 edx, BYTE PTR [eax+edx+16]
  00201	03 ca		 add	 ecx, edx
  00203	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx
$LN26@M_DrawCont:

; 6264 : 				if (i == itemOn)

  00206	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0020d	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  00210	75 06		 jne	 SHORT $LN27@M_DrawCont

; 6265 : 					cursory = y;

  00212	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00215	89 45 f0	 mov	 DWORD PTR _cursory$[ebp], eax
$LN27@M_DrawCont:

; 6266 : 
; 6267 : 				if ((currentMenu->menuitems[i].status & IT_DISPLAY)==IT_STRING)

  00218	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0021c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00222	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00225	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00229	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  0022e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00231	75 26		 jne	 SHORT $LN28@M_DrawCont

; 6268 : 					V_DrawString(x, y, 0, currentMenu->menuitems[i].text);

  00233	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00237	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0023d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00240	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00244	50		 push	 eax
  00245	6a 00		 push	 0
  00247	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0024a	51		 push	 ecx
  0024b	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0024e	52		 push	 edx
  0024f	e8 00 00 00 00	 call	 _V_DrawString
  00254	83 c4 10	 add	 esp, 16			; 00000010H
  00257	eb 27		 jmp	 SHORT $LN29@M_DrawCont
$LN28@M_DrawCont:

; 6269 : 				else
; 6270 : 					V_DrawString(x, y, V_YELLOWMAP, currentMenu->menuitems[i].text);

  00259	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0025d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00263	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00266	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  0026a	50		 push	 eax
  0026b	68 00 00 10 00	 push	 1048576			; 00100000H
  00270	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  00273	51		 push	 ecx
  00274	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  00277	52		 push	 edx
  00278	e8 00 00 00 00	 call	 _V_DrawString
  0027d	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@M_DrawCont:

; 6271 : 
; 6272 : 				// Cvar specific handling
; 6273 : 				switch (currentMenu->menuitems[i].status & IT_TYPE)

  00280	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00284	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0028a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0028d	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00291	83 e0 0e	 and	 eax, 14			; 0000000eH
  00294	89 45 a8	 mov	 DWORD PTR tv214[ebp], eax
  00297	83 7d a8 08	 cmp	 DWORD PTR tv214[ebp], 8
  0029b	74 05		 je	 SHORT $LN30@M_DrawCont
  0029d	e9 21 01 00 00	 jmp	 $LN10@M_DrawCont
$LN30@M_DrawCont:

; 6274 : 					case IT_CVAR:
; 6275 : 					{
; 6276 : 						consvar_t *cv = (consvar_t *)currentMenu->menuitems[i].itemaction;

  002a2	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  002a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  002ac	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002af	8b 44 02 0c	 mov	 eax, DWORD PTR [edx+eax+12]
  002b3	89 45 ec	 mov	 DWORD PTR _cv$1[ebp], eax

; 6277 : 						switch (currentMenu->menuitems[i].status & IT_CVARTYPE)

  002b6	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  002c0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002c3	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  002c7	25 00 07 00 00	 and	 eax, 1792		; 00000700H
  002cc	89 45 a8	 mov	 DWORD PTR tv225[ebp], eax
  002cf	81 7d a8 00 01
	00 00		 cmp	 DWORD PTR tv225[ebp], 256 ; 00000100H
  002d6	74 17		 je	 SHORT $LN31@M_DrawCont
  002d8	81 7d a8 00 02
	00 00		 cmp	 DWORD PTR tv225[ebp], 512 ; 00000200H
  002df	74 27		 je	 SHORT $LN33@M_DrawCont
  002e1	81 7d a8 00 03
	00 00		 cmp	 DWORD PTR tv225[ebp], 768 ; 00000300H
  002e8	74 19		 je	 SHORT $LN32@M_DrawCont
  002ea	e9 a2 00 00 00	 jmp	 $LN35@M_DrawCont
$LN31@M_DrawCont:

; 6278 : 						{
; 6279 : 							case IT_CV_SLIDER:
; 6280 : 								M_DrawSlider(x, y, cv);

  002ef	8b 45 ec	 mov	 eax, DWORD PTR _cv$1[ebp]
  002f2	50		 push	 eax
  002f3	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  002f6	51		 push	 ecx
  002f7	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  002fa	52		 push	 edx
  002fb	e8 00 00 00 00	 call	 _M_DrawSlider
  00300	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@M_DrawCont:

; 6281 : 							case IT_CV_NOPRINT: // color use this
; 6282 : 								break;

  00303	e9 bb 00 00 00	 jmp	 $LN12@M_DrawCont
$LN33@M_DrawCont:

; 6283 : 							case IT_CV_STRING:
; 6284 : 								M_DrawTextBox(x, y + 4, MAXSTRINGLENGTH, 1);

  00308	6a 01		 push	 1
  0030a	6a 20		 push	 32			; 00000020H
  0030c	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0030f	83 c0 04	 add	 eax, 4
  00312	50		 push	 eax
  00313	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00316	51		 push	 ecx
  00317	e8 00 00 00 00	 call	 _M_DrawTextBox
  0031c	83 c4 10	 add	 esp, 16			; 00000010H

; 6285 : 								V_DrawString(x + 8, y + 12, V_ALLOWLOWERCASE, cv->string);

  0031f	8b 45 ec	 mov	 eax, DWORD PTR _cv$1[ebp]
  00322	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00325	51		 push	 ecx
  00326	68 00 00 04 00	 push	 262144			; 00040000H
  0032b	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  0032e	83 c2 0c	 add	 edx, 12			; 0000000cH
  00331	52		 push	 edx
  00332	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00335	83 c0 08	 add	 eax, 8
  00338	50		 push	 eax
  00339	e8 00 00 00 00	 call	 _V_DrawString
  0033e	83 c4 10	 add	 esp, 16			; 00000010H

; 6286 : 								if (skullAnimCounter < 4 && i == itemOn)

  00341	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _skullAnimCounter
  00348	83 f8 04	 cmp	 eax, 4
  0034b	7d 39		 jge	 SHORT $LN34@M_DrawCont
  0034d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00354	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  00357	75 2d		 jne	 SHORT $LN34@M_DrawCont

; 6287 : 									V_DrawCharacter(x + 8 + V_StringWidth(cv->string), y + 12,

  00359	6a 00		 push	 0
  0035b	68 df 00 00 00	 push	 223			; 000000dfH
  00360	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00363	83 c0 0c	 add	 eax, 12			; 0000000cH
  00366	50		 push	 eax
  00367	8b 4d ec	 mov	 ecx, DWORD PTR _cv$1[ebp]
  0036a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0036d	52		 push	 edx
  0036e	e8 00 00 00 00	 call	 _V_StringWidth
  00373	83 c4 04	 add	 esp, 4
  00376	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00379	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  0037d	52		 push	 edx
  0037e	e8 00 00 00 00	 call	 _V_DrawCharacter
  00383	83 c4 10	 add	 esp, 16			; 00000010H
$LN34@M_DrawCont:

; 6288 : 										'_' | 0x80,false);
; 6289 : 								y += 16;

  00386	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00389	83 c0 10	 add	 eax, 16			; 00000010H
  0038c	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 6290 : 								break;

  0038f	eb 32		 jmp	 SHORT $LN12@M_DrawCont
$LN35@M_DrawCont:

; 6291 : 							default:
; 6292 : 								V_DrawString(BASEVIDWIDTH - x - V_StringWidth(cv->string), y,

  00391	8b 45 ec	 mov	 eax, DWORD PTR _cv$1[ebp]
  00394	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00397	51		 push	 ecx
  00398	68 00 00 10 00	 push	 1048576			; 00100000H
  0039d	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  003a0	52		 push	 edx
  003a1	be 40 01 00 00	 mov	 esi, 320		; 00000140H
  003a6	2b 75 fc	 sub	 esi, DWORD PTR _x$[ebp]
  003a9	8b 45 ec	 mov	 eax, DWORD PTR _cv$1[ebp]
  003ac	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003af	51		 push	 ecx
  003b0	e8 00 00 00 00	 call	 _V_StringWidth
  003b5	83 c4 04	 add	 esp, 4
  003b8	2b f0		 sub	 esi, eax
  003ba	56		 push	 esi
  003bb	e8 00 00 00 00	 call	 _V_DrawString
  003c0	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@M_DrawCont:
$LN10@M_DrawCont:

; 6293 : 									V_YELLOWMAP, cv->string);
; 6294 : 								break;
; 6295 : 						}
; 6296 : 						break;
; 6297 : 					}
; 6298 : 					y += STRINGHEIGHT;

  003c3	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  003c6	83 c0 08	 add	 eax, 8
  003c9	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 6299 : 					break;

  003cc	e9 a2 00 00 00	 jmp	 $LN8@M_DrawCont
$LN36@M_DrawCont:

; 6300 : 			case IT_STRING2:
; 6301 : 				V_DrawString(x, y, 0, currentMenu->menuitems[i].text);

  003d1	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  003db	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003de	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  003e2	50		 push	 eax
  003e3	6a 00		 push	 0
  003e5	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  003e8	51		 push	 ecx
  003e9	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  003ec	52		 push	 edx
  003ed	e8 00 00 00 00	 call	 _V_DrawString
  003f2	83 c4 10	 add	 esp, 16			; 00000010H
$LN37@M_DrawCont:

; 6302 : 			case IT_DYLITLSPACE:
; 6303 : 				y += SMALLLINEHEIGHT;

  003f5	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  003f8	83 c0 08	 add	 eax, 8
  003fb	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 6304 : 				break;

  003fe	eb 73		 jmp	 SHORT $LN8@M_DrawCont
$LN38@M_DrawCont:

; 6305 : 			case IT_GRAYPATCH:
; 6306 : 				if (currentMenu->menuitems[i].patch && currentMenu->menuitems[i].patch[0])

  00400	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00404	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0040a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0040d	83 7c 02 04 00	 cmp	 DWORD PTR [edx+eax+4], 0
  00412	74 56		 je	 SHORT $LN39@M_DrawCont
  00414	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00418	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0041e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00421	b9 01 00 00 00	 mov	 ecx, 1
  00426	6b c9 00	 imul	 ecx, ecx, 0
  00429	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  0042d	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00431	85 c0		 test	 eax, eax
  00433	74 35		 je	 SHORT $LN39@M_DrawCont

; 6307 : 					V_DrawMappedPatch(x, y, 0,

  00435	a1 00 00 00 00	 mov	 eax, DWORD PTR _graymap
  0043a	50		 push	 eax
  0043b	6a 65		 push	 101			; 00000065H
  0043d	6b 4d f4 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  00441	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00447	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0044a	8b 4c 08 04	 mov	 ecx, DWORD PTR [eax+ecx+4]
  0044e	51		 push	 ecx
  0044f	e8 00 00 00 00	 call	 _W_CachePatchName
  00454	83 c4 08	 add	 esp, 8
  00457	50		 push	 eax
  00458	6a 00		 push	 0
  0045a	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  0045d	52		 push	 edx
  0045e	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00461	50		 push	 eax
  00462	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  00467	83 c4 14	 add	 esp, 20			; 00000014H
$LN39@M_DrawCont:

; 6308 : 						W_CachePatchName(currentMenu->menuitems[i].patch,PU_CACHE), graymap);
; 6309 : 				y += LINEHEIGHT;

  0046a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0046d	83 c0 10	 add	 eax, 16			; 00000010H
  00470	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN8@M_DrawCont:

; 6310 : 				break;
; 6311 : 		}
; 6312 : 	}

  00473	e9 36 fc ff ff	 jmp	 $LN5@M_DrawCont
$LN6@M_DrawCont:

; 6313 : 
; 6314 : 	// DRAW THE SKULL CURSOR
; 6315 : 	if (((currentMenu->menuitems[itemOn].status & IT_DISPLAY) == IT_PATCH)
; 6316 : 		|| ((currentMenu->menuitems[itemOn].status & IT_DISPLAY) == IT_NOTHING))

  00478	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0047f	6b c8 14	 imul	 ecx, eax, 20
  00482	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00488	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0048b	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  0048f	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  00495	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00498	74 1f		 je	 SHORT $LN42@M_DrawCont
  0049a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  004a1	6b c8 14	 imul	 ecx, eax, 20
  004a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  004aa	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004ad	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  004b1	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  004b7	75 31		 jne	 SHORT $LN40@M_DrawCont
$LN42@M_DrawCont:

; 6317 : 	{
; 6318 : 		V_DrawScaledPatch(currentMenu->x + SKULLXOFF, cursory - 5, 0,

  004b9	6a 65		 push	 101			; 00000065H
  004bb	68 00 00 00 00	 push	 OFFSET ??_C@_08PLKNNBAH@M_CURSOR@
  004c0	e8 00 00 00 00	 call	 _W_CachePatchName
  004c5	83 c4 08	 add	 esp, 8
  004c8	50		 push	 eax
  004c9	6a 00		 push	 0
  004cb	8b 45 f0	 mov	 eax, DWORD PTR _cursory$[ebp]
  004ce	83 e8 05	 sub	 eax, 5
  004d1	50		 push	 eax
  004d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  004d8	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  004dc	83 ea 20	 sub	 edx, 32			; 00000020H
  004df	52		 push	 edx
  004e0	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004e5	83 c4 10	 add	 esp, 16			; 00000010H

; 6319 : 			W_CachePatchName("M_CURSOR", PU_CACHE));
; 6320 : 	}

  004e8	eb 5f		 jmp	 SHORT $LN41@M_DrawCont
$LN40@M_DrawCont:

; 6321 : 	else
; 6322 : 	{
; 6323 : 		V_DrawScaledPatch(currentMenu->x - 22, cursory, 0,

  004ea	6a 65		 push	 101			; 00000065H
  004ec	68 00 00 00 00	 push	 OFFSET ??_C@_08PLKNNBAH@M_CURSOR@
  004f1	e8 00 00 00 00	 call	 _W_CachePatchName
  004f6	83 c4 08	 add	 esp, 8
  004f9	50		 push	 eax
  004fa	6a 00		 push	 0
  004fc	8b 45 f0	 mov	 eax, DWORD PTR _cursory$[ebp]
  004ff	50		 push	 eax
  00500	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00506	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  0050a	83 ea 16	 sub	 edx, 22			; 00000016H
  0050d	52		 push	 edx
  0050e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00513	83 c4 10	 add	 esp, 16			; 00000010H

; 6324 : 			W_CachePatchName("M_CURSOR", PU_CACHE));
; 6325 : 		V_DrawString(currentMenu->x, cursory, V_YELLOWMAP, currentMenu->menuitems[itemOn].text);

  00516	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0051d	6b c8 14	 imul	 ecx, eax, 20
  00520	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00526	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00529	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0052d	51		 push	 ecx
  0052e	68 00 00 10 00	 push	 1048576			; 00100000H
  00533	8b 55 f0	 mov	 edx, DWORD PTR _cursory$[ebp]
  00536	52		 push	 edx
  00537	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0053c	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00540	51		 push	 ecx
  00541	e8 00 00 00 00	 call	 _V_DrawString
  00546	83 c4 10	 add	 esp, 16			; 00000010H
$LN41@M_DrawCont:

; 6326 : 	}
; 6327 : }

  00549	5f		 pop	 edi
  0054a	5e		 pop	 esi
  0054b	5b		 pop	 ebx
  0054c	8b e5		 mov	 esp, ebp
  0054e	5d		 pop	 ebp
  0054f	c3		 ret	 0
$LN45@M_DrawCont:
  00550	00 00 00 00	 DD	 $LN20@M_DrawCont
  00554	00 00 00 00	 DD	 $LN19@M_DrawCont
  00558	00 00 00 00	 DD	 $LN24@M_DrawCont
  0055c	00 00 00 00	 DD	 $LN37@M_DrawCont
  00560	00 00 00 00	 DD	 $LN36@M_DrawCont
  00564	00 00 00 00	 DD	 $LN38@M_DrawCont
  00568	00 00 00 00	 DD	 $LN23@M_DrawCont
  0056c	00 00 00 00	 DD	 $LN8@M_DrawCont
$LN44@M_DrawCont:
  00570	00		 DB	 0
  00571	07		 DB	 7
  00572	07		 DB	 7
  00573	07		 DB	 7
  00574	07		 DB	 7
  00575	07		 DB	 7
  00576	07		 DB	 7
  00577	07		 DB	 7
  00578	07		 DB	 7
  00579	07		 DB	 7
  0057a	07		 DB	 7
  0057b	07		 DB	 7
  0057c	07		 DB	 7
  0057d	07		 DB	 7
  0057e	07		 DB	 7
  0057f	07		 DB	 7
  00580	01		 DB	 1
  00581	07		 DB	 7
  00582	07		 DB	 7
  00583	07		 DB	 7
  00584	07		 DB	 7
  00585	07		 DB	 7
  00586	07		 DB	 7
  00587	07		 DB	 7
  00588	07		 DB	 7
  00589	07		 DB	 7
  0058a	07		 DB	 7
  0058b	07		 DB	 7
  0058c	07		 DB	 7
  0058d	07		 DB	 7
  0058e	07		 DB	 7
  0058f	07		 DB	 7
  00590	02		 DB	 2
  00591	07		 DB	 7
  00592	07		 DB	 7
  00593	07		 DB	 7
  00594	07		 DB	 7
  00595	07		 DB	 7
  00596	07		 DB	 7
  00597	07		 DB	 7
  00598	07		 DB	 7
  00599	07		 DB	 7
  0059a	07		 DB	 7
  0059b	07		 DB	 7
  0059c	07		 DB	 7
  0059d	07		 DB	 7
  0059e	07		 DB	 7
  0059f	07		 DB	 7
  005a0	02		 DB	 2
  005a1	07		 DB	 7
  005a2	07		 DB	 7
  005a3	07		 DB	 7
  005a4	07		 DB	 7
  005a5	07		 DB	 7
  005a6	07		 DB	 7
  005a7	07		 DB	 7
  005a8	07		 DB	 7
  005a9	07		 DB	 7
  005aa	07		 DB	 7
  005ab	07		 DB	 7
  005ac	07		 DB	 7
  005ad	07		 DB	 7
  005ae	07		 DB	 7
  005af	07		 DB	 7
  005b0	00		 DB	 0
  005b1	07		 DB	 7
  005b2	07		 DB	 7
  005b3	07		 DB	 7
  005b4	07		 DB	 7
  005b5	07		 DB	 7
  005b6	07		 DB	 7
  005b7	07		 DB	 7
  005b8	07		 DB	 7
  005b9	07		 DB	 7
  005ba	07		 DB	 7
  005bb	07		 DB	 7
  005bc	07		 DB	 7
  005bd	07		 DB	 7
  005be	07		 DB	 7
  005bf	07		 DB	 7
  005c0	03		 DB	 3
  005c1	07		 DB	 7
  005c2	07		 DB	 7
  005c3	07		 DB	 7
  005c4	07		 DB	 7
  005c5	07		 DB	 7
  005c6	07		 DB	 7
  005c7	07		 DB	 7
  005c8	07		 DB	 7
  005c9	07		 DB	 7
  005ca	07		 DB	 7
  005cb	07		 DB	 7
  005cc	07		 DB	 7
  005cd	07		 DB	 7
  005ce	07		 DB	 7
  005cf	07		 DB	 7
  005d0	04		 DB	 4
  005d1	07		 DB	 7
  005d2	07		 DB	 7
  005d3	07		 DB	 7
  005d4	07		 DB	 7
  005d5	07		 DB	 7
  005d6	07		 DB	 7
  005d7	07		 DB	 7
  005d8	07		 DB	 7
  005d9	07		 DB	 7
  005da	07		 DB	 7
  005db	07		 DB	 7
  005dc	07		 DB	 7
  005dd	07		 DB	 7
  005de	07		 DB	 7
  005df	07		 DB	 7
  005e0	05		 DB	 5
  005e1	07		 DB	 7
  005e2	07		 DB	 7
  005e3	07		 DB	 7
  005e4	07		 DB	 7
  005e5	07		 DB	 7
  005e6	07		 DB	 7
  005e7	07		 DB	 7
  005e8	07		 DB	 7
  005e9	07		 DB	 7
  005ea	07		 DB	 7
  005eb	07		 DB	 7
  005ec	07		 DB	 7
  005ed	07		 DB	 7
  005ee	07		 DB	 7
  005ef	07		 DB	 7
  005f0	06		 DB	 6
_M_DrawControlsGenerics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SetupJoystickMenu
_TEXT	SEGMENT
_n$ = -16						; size = 4
_joyNA$ = -12						; size = 4
_joyname$ = -8						; size = 4
_i$ = -4						; size = 4
_choice$ = 8						; size = 4
_M_SetupJoystickMenu PROC				; COMDAT

; 6149 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6150 : 	INT32 i = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 6151 : 	const char *joyname = "None";

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _joyname$[ebp], OFFSET ??_C@_04OHJIHAFH@None@

; 6152 : 	const char *joyNA = "Unavailable";

  00017	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _joyNA$[ebp], OFFSET ??_C@_0M@IOKPNGEC@Unavailable@

; 6153 : 	INT32 n = I_NumJoys();

  0001e	e8 00 00 00 00	 call	 _I_NumJoys
  00023	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 6154 : 	(void)choice;
; 6155 : 
; 6156 : 	strcpy(joystickInfo[i], joyname);

  00026	8b 45 f8	 mov	 eax, DWORD PTR _joyname$[ebp]
  00029	50		 push	 eax
  0002a	6b 4d fc 19	 imul	 ecx, DWORD PTR _i$[ebp], 25
  0002e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _joystickInfo
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _strcpy
  0003a	83 c4 08	 add	 esp, 8

; 6157 : 
; 6158 : 	for (i = joy1; i < joystickset_end; i++)

  0003d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00044	eb 09		 jmp	 SHORT $LN4@M_SetupJoy
$LN2@M_SetupJoy:
  00046	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_SetupJoy:
  0004f	83 7d fc 07	 cmp	 DWORD PTR _i$[ebp], 7
  00053	7d 65		 jge	 SHORT $LN3@M_SetupJoy

; 6159 : 	{
; 6160 : 		if (i <= n && (joyname = I_GetJoyName(i)) != NULL)

  00055	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00058	3b 45 f0	 cmp	 eax, DWORD PTR _n$[ebp]
  0005b	7f 44		 jg	 SHORT $LN5@M_SetupJoy
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _I_GetJoyName
  00066	83 c4 04	 add	 esp, 4
  00069	89 45 f8	 mov	 DWORD PTR _joyname$[ebp], eax
  0006c	83 7d f8 00	 cmp	 DWORD PTR _joyname$[ebp], 0
  00070	74 2f		 je	 SHORT $LN5@M_SetupJoy

; 6161 : 		{
; 6162 : 			strncpy(joystickInfo[i], joyname, 24);

  00072	6a 18		 push	 24			; 00000018H
  00074	8b 45 f8	 mov	 eax, DWORD PTR _joyname$[ebp]
  00077	50		 push	 eax
  00078	6b 4d fc 19	 imul	 ecx, DWORD PTR _i$[ebp], 25
  0007c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _joystickInfo
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _strncpy
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6163 : 			joystickInfo[i][24] = '\0';

  0008b	6b 45 fc 19	 imul	 eax, DWORD PTR _i$[ebp], 25
  0008f	b9 01 00 00 00	 mov	 ecx, 1
  00094	6b d1 18	 imul	 edx, ecx, 24
  00097	c6 84 10 00 00
	00 00 00	 mov	 BYTE PTR _joystickInfo[eax+edx], 0

; 6164 : 		}

  0009f	eb 17		 jmp	 SHORT $LN6@M_SetupJoy
$LN5@M_SetupJoy:

; 6165 : 		else
; 6166 : 			strcpy(joystickInfo[i], joyNA);

  000a1	8b 45 f4	 mov	 eax, DWORD PTR _joyNA$[ebp]
  000a4	50		 push	 eax
  000a5	6b 4d fc 19	 imul	 ecx, DWORD PTR _i$[ebp], 25
  000a9	81 c1 00 00 00
	00		 add	 ecx, OFFSET _joystickInfo
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 _strcpy
  000b5	83 c4 08	 add	 esp, 8
$LN6@M_SetupJoy:

; 6167 : 	}

  000b8	eb 8c		 jmp	 SHORT $LN2@M_SetupJoy
$LN3@M_SetupJoy:

; 6168 : 
; 6169 : 	M_SetupNextMenu(&JoystickSetDef);

  000ba	68 00 00 00 00	 push	 OFFSET _JoystickSetDef
  000bf	e8 00 00 00 00	 call	 _M_SetupNextMenu
  000c4	83 c4 04	 add	 esp, 4

; 6170 : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_M_SetupJoystickMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ControlDef2
_TEXT	SEGMENT
_M_ControlDef2 PROC					; COMDAT

; 6126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6127 : 	M_SetupNextMenu(&ControlDef2);

  00009	68 00 00 00 00	 push	 OFFSET _ControlDef2
  0000e	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00013	83 c4 04	 add	 esp, 4

; 6128 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_M_ControlDef2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ChangeControl
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ChangeControl PROC					; COMDAT

; 6455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6456 : 	static char tmp[55];
; 6457 : 
; 6458 : 	controltochange = currentMenu->menuitems[choice].alphaKey;

  00009	6b 45 08 14	 imul	 eax, DWORD PTR _choice$[ebp], 20
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00013	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00016	0f b6 44 02 10	 movzx	 eax, BYTE PTR [edx+eax+16]
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _controltochange, eax

; 6459 : 	sprintf(tmp, "Hit the new key for\n%s\nESC for Cancel",

  00020	6b 45 08 14	 imul	 eax, DWORD PTR _choice$[ebp], 20
  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0002a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002d	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00031	50		 push	 eax
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@PGEKJFLH@Hit?5the?5new?5key?5for?6?$CFs?6ESC?5for?5@
  00037	68 00 00 00 00	 push	 OFFSET ?tmp@?1??M_ChangeControl@@9@9
  0003c	e8 00 00 00 00	 call	 _sprintf
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6460 : 		currentMenu->menuitems[choice].text);
; 6461 : 
; 6462 : 	M_StartMessage(tmp, M_ChangecontrolResponse, MM_EVENTHANDLER);

  00044	6a 02		 push	 2
  00046	68 00 00 00 00	 push	 OFFSET _M_ChangecontrolResponse
  0004b	68 00 00 00 00	 push	 OFFSET ?tmp@?1??M_ChangeControl@@9@9
  00050	e8 00 00 00 00	 call	 _M_StartMessage
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6463 : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_M_ChangeControl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawControl
_TEXT	SEGMENT
tv65 = -140						; size = 4
$T1 = -136						; size = 4
_keys$ = -68						; size = 8
_i$ = -60						; size = 4
_tmp$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_M_DrawControl PROC					; COMDAT

; 6332 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 6333 : 	char     tmp[50];
; 6334 : 	INT32    i;
; 6335 : 	INT32    keys[2];
; 6336 : 
; 6337 : 	// draw title, strings and submenu
; 6338 : 	M_DrawControlsGenerics();

  00016	e8 00 00 00 00	 call	 _M_DrawControlsGenerics
  0001b	90		 npad	 1

; 6339 : 
; 6340 : 	M_CentreText (ControlDef.y-12,

  0001c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setupcontrols_secondaryplayer, 0
  00023	74 0c		 je	 SHORT $LN13@M_DrawCont
  00025	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], OFFSET ??_C@_0CC@LLDDEAJF@SET?5CONTROLS?5FOR?5SECONDARY?5PLAY@
  0002f	eb 0a		 jmp	 SHORT $LN14@M_DrawCont
$LN13@M_DrawCont:
  00031	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], OFFSET ??_C@_0CK@HFKGFGA@PRESS?5ENTER?5TO?5CHANGE?0?5BACKSPAC@
$LN14@M_DrawCont:
  0003b	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  00041	50		 push	 eax
  00042	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _ControlDef+26
  00049	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _M_CentreText
  00052	83 c4 08	 add	 esp, 8

; 6341 : 		 (setupcontrols_secondaryplayer ? "SET CONTROLS FOR SECONDARY PLAYER" :
; 6342 : 		                                  "PRESS ENTER TO CHANGE, BACKSPACE TO CLEAR"));
; 6343 : 
; 6344 : 	for (i = 0;i < currentMenu->numitems;i++)

  00055	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0005c	eb 09		 jmp	 SHORT $LN4@M_DrawCont
$LN2@M_DrawCont:
  0005e	8b 45 c4	 mov	 eax, DWORD PTR _i$[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	89 45 c4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawCont:
  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0006c	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00070	39 4d c4	 cmp	 DWORD PTR _i$[ebp], ecx
  00073	0f 8d c9 01 00
	00		 jge	 $LN3@M_DrawCont

; 6345 : 	{
; 6346 : 		if (currentMenu->menuitems[i].status != IT_CONTROL)

  00079	6b 45 c4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00083	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00086	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  0008a	83 f8 60	 cmp	 eax, 96			; 00000060H
  0008d	74 02		 je	 SHORT $LN5@M_DrawCont

; 6347 : 			continue;

  0008f	eb cd		 jmp	 SHORT $LN2@M_DrawCont
$LN5@M_DrawCont:

; 6348 : 
; 6349 : 		if (setupcontrols_secondaryplayer
; 6350 : 			&& currentMenu == &ControlDef2
; 6351 : 			&& i < 3)

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setupcontrols_secondaryplayer, 0
  00098	74 14		 je	 SHORT $LN6@M_DrawCont
  0009a	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _ControlDef2
  000a4	75 08		 jne	 SHORT $LN6@M_DrawCont
  000a6	83 7d c4 03	 cmp	 DWORD PTR _i$[ebp], 3
  000aa	7d 02		 jge	 SHORT $LN6@M_DrawCont

; 6352 : 			continue;

  000ac	eb b0		 jmp	 SHORT $LN2@M_DrawCont
$LN6@M_DrawCont:

; 6353 : 
; 6354 : 		keys[0] = setupcontrols[currentMenu->menuitems[i].alphaKey][0];

  000ae	6b 45 c4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000b8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000bb	0f b6 44 02 10	 movzx	 eax, BYTE PTR [edx+eax+16]
  000c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupcontrols
  000c6	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  000c9	b8 04 00 00 00	 mov	 eax, 4
  000ce	6b c8 00	 imul	 ecx, eax, 0
  000d1	b8 04 00 00 00	 mov	 eax, 4
  000d6	6b c0 00	 imul	 eax, eax, 0
  000d9	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  000dc	89 4c 05 bc	 mov	 DWORD PTR _keys$[ebp+eax], ecx

; 6355 : 		keys[1] = setupcontrols[currentMenu->menuitems[i].alphaKey][1];

  000e0	6b 45 c4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000ea	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ed	0f b6 44 02 10	 movzx	 eax, BYTE PTR [edx+eax+16]
  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupcontrols
  000f8	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  000fb	b8 04 00 00 00	 mov	 eax, 4
  00100	c1 e0 00	 shl	 eax, 0
  00103	b9 04 00 00 00	 mov	 ecx, 4
  00108	c1 e1 00	 shl	 ecx, 0
  0010b	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  0010e	89 54 0d bc	 mov	 DWORD PTR _keys$[ebp+ecx], edx

; 6356 : 
; 6357 : 		tmp[0] ='\0';

  00112	b8 01 00 00 00	 mov	 eax, 1
  00117	6b c8 00	 imul	 ecx, eax, 0
  0011a	89 8d 78 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00120	83 bd 78 ff ff
	ff 32		 cmp	 DWORD PTR $T1[ebp], 50	; 00000032H
  00127	73 02		 jae	 SHORT $LN15@M_DrawCont
  00129	eb 06		 jmp	 SHORT $LN16@M_DrawCont
$LN15@M_DrawCont:
  0012b	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00130	90		 npad	 1
$LN16@M_DrawCont:
  00131	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00137	c6 44 15 c8 00	 mov	 BYTE PTR _tmp$[ebp+edx], 0

; 6358 : 		if (keys[0] == KEY_NULL && keys[1] == KEY_NULL)

  0013c	b8 04 00 00 00	 mov	 eax, 4
  00141	6b c8 00	 imul	 ecx, eax, 0
  00144	83 7c 0d bc 00	 cmp	 DWORD PTR _keys$[ebp+ecx], 0
  00149	75 25		 jne	 SHORT $LN7@M_DrawCont
  0014b	b8 04 00 00 00	 mov	 eax, 4
  00150	c1 e0 00	 shl	 eax, 0
  00153	83 7c 05 bc 00	 cmp	 DWORD PTR _keys$[ebp+eax], 0
  00158	75 16		 jne	 SHORT $LN7@M_DrawCont

; 6359 : 		{
; 6360 : 			strcpy(tmp, "---");

  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_03JMFMNIFM@?9?9?9@
  0015f	8d 45 c8	 lea	 eax, DWORD PTR _tmp$[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _strcpy
  00168	83 c4 08	 add	 esp, 8

; 6361 : 		}

  0016b	e9 91 00 00 00	 jmp	 $LN11@M_DrawCont
$LN7@M_DrawCont:

; 6362 : 		else
; 6363 : 		{
; 6364 : 			if (keys[0] != KEY_NULL)

  00170	b8 04 00 00 00	 mov	 eax, 4
  00175	6b c8 00	 imul	 ecx, eax, 0
  00178	83 7c 0d bc 00	 cmp	 DWORD PTR _keys$[ebp+ecx], 0
  0017d	74 22		 je	 SHORT $LN9@M_DrawCont

; 6365 : 				strcat (tmp, G_KeynumToString (keys[0]));

  0017f	b8 04 00 00 00	 mov	 eax, 4
  00184	6b c8 00	 imul	 ecx, eax, 0
  00187	8b 54 0d bc	 mov	 edx, DWORD PTR _keys$[ebp+ecx]
  0018b	52		 push	 edx
  0018c	e8 00 00 00 00	 call	 _G_KeynumToString
  00191	83 c4 04	 add	 esp, 4
  00194	50		 push	 eax
  00195	8d 45 c8	 lea	 eax, DWORD PTR _tmp$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 _strcat
  0019e	83 c4 08	 add	 esp, 8
$LN9@M_DrawCont:

; 6366 : 
; 6367 : 			if (keys[0] != KEY_NULL && keys[1] != KEY_NULL)

  001a1	b8 04 00 00 00	 mov	 eax, 4
  001a6	6b c8 00	 imul	 ecx, eax, 0
  001a9	83 7c 0d bc 00	 cmp	 DWORD PTR _keys$[ebp+ecx], 0
  001ae	74 20		 je	 SHORT $LN10@M_DrawCont
  001b0	b8 04 00 00 00	 mov	 eax, 4
  001b5	c1 e0 00	 shl	 eax, 0
  001b8	83 7c 05 bc 00	 cmp	 DWORD PTR _keys$[ebp+eax], 0
  001bd	74 11		 je	 SHORT $LN10@M_DrawCont

; 6368 : 				strcat(tmp," or ");

  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_04FJKIFICP@?5or?5@
  001c4	8d 45 c8	 lea	 eax, DWORD PTR _tmp$[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 _strcat
  001cd	83 c4 08	 add	 esp, 8
$LN10@M_DrawCont:

; 6369 : 
; 6370 : 			if (keys[1] != KEY_NULL)

  001d0	b8 04 00 00 00	 mov	 eax, 4
  001d5	c1 e0 00	 shl	 eax, 0
  001d8	83 7c 05 bc 00	 cmp	 DWORD PTR _keys$[ebp+eax], 0
  001dd	74 22		 je	 SHORT $LN11@M_DrawCont

; 6371 : 				strcat (tmp, G_KeynumToString (keys[1]));

  001df	b8 04 00 00 00	 mov	 eax, 4
  001e4	c1 e0 00	 shl	 eax, 0
  001e7	8b 4c 05 bc	 mov	 ecx, DWORD PTR _keys$[ebp+eax]
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 _G_KeynumToString
  001f1	83 c4 04	 add	 esp, 4
  001f4	50		 push	 eax
  001f5	8d 55 c8	 lea	 edx, DWORD PTR _tmp$[ebp]
  001f8	52		 push	 edx
  001f9	e8 00 00 00 00	 call	 _strcat
  001fe	83 c4 08	 add	 esp, 8
$LN11@M_DrawCont:

; 6372 : 
; 6373 : 
; 6374 : 		}
; 6375 : 		V_DrawString(BASEVIDWIDTH-ControlDef.x-V_StringWidth(tmp), ControlDef.y + i*8,V_YELLOWMAP, tmp);

  00201	8d 45 c8	 lea	 eax, DWORD PTR _tmp$[ebp]
  00204	50		 push	 eax
  00205	68 00 00 10 00	 push	 1048576			; 00100000H
  0020a	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _ControlDef+26
  00211	8b 55 c4	 mov	 edx, DWORD PTR _i$[ebp]
  00214	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00217	50		 push	 eax
  00218	0f bf 0d 18 00
	00 00		 movsx	 ecx, WORD PTR _ControlDef+24
  0021f	be 40 01 00 00	 mov	 esi, 320		; 00000140H
  00224	2b f1		 sub	 esi, ecx
  00226	8d 55 c8	 lea	 edx, DWORD PTR _tmp$[ebp]
  00229	52		 push	 edx
  0022a	e8 00 00 00 00	 call	 _V_StringWidth
  0022f	83 c4 04	 add	 esp, 4
  00232	2b f0		 sub	 esi, eax
  00234	56		 push	 esi
  00235	e8 00 00 00 00	 call	 _V_DrawString
  0023a	83 c4 10	 add	 esp, 16			; 00000010H

; 6376 : 	}

  0023d	e9 1c fe ff ff	 jmp	 $LN2@M_DrawCont
$LN3@M_DrawCont:

; 6377 : 
; 6378 : }

  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00248	33 cd		 xor	 ecx, ebp
  0024a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c3		 ret	 0
_M_DrawControl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_AssignJoystick
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_AssignJoystick PROC					; COMDAT

; 6185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6186 : 	if (setupcontrols_secondaryplayer)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setupcontrols_secondaryplayer, 0
  00010	74 13		 je	 SHORT $LN2@M_AssignJo

; 6187 : 		CV_SetValue(&cv_usejoystick2, choice);

  00012	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  00015	50		 push	 eax
  00016	68 00 00 00 00	 push	 OFFSET _cv_usejoystick2
  0001b	e8 00 00 00 00	 call	 _CV_SetValue
  00020	83 c4 08	 add	 esp, 8
  00023	eb 11		 jmp	 SHORT $LN3@M_AssignJo
$LN2@M_AssignJo:

; 6188 : 	else
; 6189 : 		CV_SetValue(&cv_usejoystick, choice);

  00025	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET _cv_usejoystick
  0002e	e8 00 00 00 00	 call	 _CV_SetValue
  00033	83 c4 08	 add	 esp, 8
$LN3@M_AssignJo:

; 6190 : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_M_AssignJoystick ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawJoystick
_TEXT	SEGMENT
_i$ = -4						; size = 4
_M_DrawJoystick PROC					; COMDAT

; 6131 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6132 : 	INT32 i;
; 6133 : 
; 6134 : 	M_DrawGenericMenu();

  00009	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  0000e	90		 npad	 1

; 6135 : 
; 6136 : 	for (i = joy0;i < joystickset_end; i++)

  0000f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00016	eb 09		 jmp	 SHORT $LN4@M_DrawJoys
$LN2@M_DrawJoys:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001b	83 c0 01	 add	 eax, 1
  0001e	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawJoys:
  00021	83 7d fc 07	 cmp	 DWORD PTR _i$[ebp], 7
  00025	0f 8d aa 00 00
	00		 jge	 $LN3@M_DrawJoys

; 6137 : 	{
; 6138 : 		M_DrawSaveLoadBorder(JoystickSetDef.x,JoystickSetDef.y+LINEHEIGHT*i);

  0002b	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _JoystickSetDef+26
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00035	c1 e1 04	 shl	 ecx, 4
  00038	03 c1		 add	 eax, ecx
  0003a	50		 push	 eax
  0003b	0f bf 15 18 00
	00 00		 movsx	 edx, WORD PTR _JoystickSetDef+24
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _M_DrawSaveLoadBorder
  00048	83 c4 08	 add	 esp, 8

; 6139 : 
; 6140 : 		if ((setupcontrols_secondaryplayer && (i == cv_usejoystick2.value))
; 6141 : 			|| (!setupcontrols_secondaryplayer && (i == cv_usejoystick.value)))

  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setupcontrols_secondaryplayer, 0
  00052	74 0b		 je	 SHORT $LN8@M_DrawJoys
  00054	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00057	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR _cv_usejoystick2+20
  0005d	74 14		 je	 SHORT $LN7@M_DrawJoys
$LN8@M_DrawJoys:
  0005f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setupcontrols_secondaryplayer, 0
  00066	75 3c		 jne	 SHORT $LN5@M_DrawJoys
  00068	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0006b	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR _cv_usejoystick+20
  00071	75 31		 jne	 SHORT $LN5@M_DrawJoys
$LN7@M_DrawJoys:

; 6142 : 			V_DrawString(JoystickSetDef.x,JoystickSetDef.y+LINEHEIGHT*i,V_YELLOWMAP,joystickInfo[i]);

  00073	6b 45 fc 19	 imul	 eax, DWORD PTR _i$[ebp], 25
  00077	05 00 00 00 00	 add	 eax, OFFSET _joystickInfo
  0007c	50		 push	 eax
  0007d	68 00 00 10 00	 push	 1048576			; 00100000H
  00082	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _JoystickSetDef+26
  00089	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0008c	c1 e2 04	 shl	 edx, 4
  0008f	03 ca		 add	 ecx, edx
  00091	51		 push	 ecx
  00092	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _JoystickSetDef+24
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _V_DrawString
  0009f	83 c4 10	 add	 esp, 16			; 00000010H
  000a2	eb 2c		 jmp	 SHORT $LN6@M_DrawJoys
$LN5@M_DrawJoys:

; 6143 : 		else
; 6144 : 			V_DrawString(JoystickSetDef.x,JoystickSetDef.y+LINEHEIGHT*i,0,joystickInfo[i]);

  000a4	6b 45 fc 19	 imul	 eax, DWORD PTR _i$[ebp], 25
  000a8	05 00 00 00 00	 add	 eax, OFFSET _joystickInfo
  000ad	50		 push	 eax
  000ae	6a 00		 push	 0
  000b0	0f bf 0d 1a 00
	00 00		 movsx	 ecx, WORD PTR _JoystickSetDef+26
  000b7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ba	c1 e2 04	 shl	 edx, 4
  000bd	03 ca		 add	 ecx, edx
  000bf	51		 push	 ecx
  000c0	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _JoystickSetDef+24
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _V_DrawString
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@M_DrawJoys:

; 6145 : 	}

  000d0	e9 43 ff ff ff	 jmp	 $LN2@M_DrawJoys
$LN3@M_DrawJoys:

; 6146 : }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
_M_DrawJoystick ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Setup2PJoystickMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Setup2PJoystickMenu PROC				; COMDAT

; 6179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6180 : 	setupcontrols_secondaryplayer = true;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _setupcontrols_secondaryplayer, 1

; 6181 : 	M_SetupJoystickMenu(choice);

  00013	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _M_SetupJoystickMenu
  0001c	83 c4 04	 add	 esp, 4

; 6182 : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_M_Setup2PJoystickMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Setup1PJoystickMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Setup1PJoystickMenu PROC				; COMDAT

; 6173 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6174 : 	setupcontrols_secondaryplayer = false;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupcontrols_secondaryplayer, 0

; 6175 : 	M_SetupJoystickMenu(choice);

  00013	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _M_SetupJoystickMenu
  0001c	83 c4 04	 add	 esp, 4

; 6176 : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_M_Setup1PJoystickMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ToggleMIDI
_TEXT	SEGMENT
_M_ToggleMIDI PROC					; COMDAT

; 5847 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5848 : 	if (nomidimusic)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nomidimusic, 0
  00010	74 5c		 je	 SHORT $LN2@M_ToggleMI

; 5849 : 	{
; 5850 : 		nomidimusic = false;

  00012	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nomidimusic, 0

; 5851 : 		I_InitMIDIMusic();

  0001c	e8 00 00 00 00	 call	 _I_InitMIDIMusic
  00021	90		 npad	 1

; 5852 : 		if (nomidimusic) return;

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nomidimusic, 0
  00029	74 05		 je	 SHORT $LN4@M_ToggleMI
  0002b	e9 85 00 00 00	 jmp	 $LN6@M_ToggleMI
$LN4@M_ToggleMI:

; 5853 : 		S_Init(cv_soundvolume.value, cv_digmusicvolume.value, cv_midimusicvolume.value);

  00030	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_midimusicvolume+20
  00035	50		 push	 eax
  00036	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_digmusicvolume+20
  0003c	51		 push	 ecx
  0003d	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_soundvolume+20
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 _S_Init
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5854 : 		S_ChangeMusic(mus_lclear, false);

  0004c	6a 00		 push	 0
  0004e	68 0e 04 00 00	 push	 1038			; 0000040eH
  00053	e8 00 00 00 00	 call	 _S_ChangeMusic
  00058	83 c4 08	 add	 esp, 8

; 5855 : 		M_StartMessage("MIDI Music Enabled\n", NULL, MM_NOTHING);

  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MKCHOEKH@MIDI?5Music?5Enabled?6@
  00064	e8 00 00 00 00	 call	 _M_StartMessage
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5856 : 	}

  0006c	eb 47		 jmp	 SHORT $LN6@M_ToggleMI
$LN2@M_ToggleMI:

; 5857 : 	else
; 5858 : 	{
; 5859 : 		if (music_disabled)

  0006e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _music_disabled, 0
  00075	74 1d		 je	 SHORT $LN5@M_ToggleMI

; 5860 : 		{
; 5861 : 			music_disabled = false;

  00077	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _music_disabled, 0

; 5862 : 			M_StartMessage("MIDI Music Enabled\n", NULL, MM_NOTHING);

  00081	6a 00		 push	 0
  00083	6a 00		 push	 0
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MKCHOEKH@MIDI?5Music?5Enabled?6@
  0008a	e8 00 00 00 00	 call	 _M_StartMessage
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5863 : 		}

  00092	eb 21		 jmp	 SHORT $LN6@M_ToggleMI
$LN5@M_ToggleMI:

; 5864 : 		else
; 5865 : 		{
; 5866 : 			music_disabled = true;

  00094	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _music_disabled, 1

; 5867 : 			S_StopMusic();

  0009e	e8 00 00 00 00	 call	 _S_StopMusic
  000a3	90		 npad	 1

; 5868 : 			M_StartMessage("MIDI Music Disabled\n", NULL, MM_NOTHING);

  000a4	6a 00		 push	 0
  000a6	6a 00		 push	 0
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PLKNFBFH@MIDI?5Music?5Disabled?6@
  000ad	e8 00 00 00 00	 call	 _M_StartMessage
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@M_ToggleMI:

; 5869 : 		}
; 5870 : 	}
; 5871 : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_M_ToggleMIDI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ToggleDigital
_TEXT	SEGMENT
_M_ToggleDigital PROC					; COMDAT

; 5819 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5820 : 	if (nodigimusic)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nodigimusic, 0
  00010	74 62		 je	 SHORT $LN2@M_ToggleDi

; 5821 : 	{
; 5822 : 		nodigimusic = false;

  00012	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nodigimusic, 0

; 5823 : 		I_InitDigMusic();

  0001c	e8 00 00 00 00	 call	 _I_InitDigMusic
  00021	90		 npad	 1

; 5824 : 		if (nodigimusic) return;

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nodigimusic, 0
  00029	74 05		 je	 SHORT $LN4@M_ToggleDi
  0002b	e9 8b 00 00 00	 jmp	 $LN6@M_ToggleDi
$LN4@M_ToggleDi:

; 5825 : 		S_Init(cv_soundvolume.value, cv_digmusicvolume.value, cv_midimusicvolume.value);

  00030	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_midimusicvolume+20
  00035	50		 push	 eax
  00036	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_digmusicvolume+20
  0003c	51		 push	 ecx
  0003d	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_soundvolume+20
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 _S_Init
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5826 : 		S_StopMusic();

  0004c	e8 00 00 00 00	 call	 _S_StopMusic
  00051	90		 npad	 1

; 5827 : 		S_ChangeMusic(mus_lclear, false);

  00052	6a 00		 push	 0
  00054	68 0e 04 00 00	 push	 1038			; 0000040eH
  00059	e8 00 00 00 00	 call	 _S_ChangeMusic
  0005e	83 c4 08	 add	 esp, 8

; 5828 : 		M_StartMessage("Digital Music Enabled\n", NULL, MM_NOTHING);

  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GBPNJPKK@Digital?5Music?5Enabled?6@
  0006a	e8 00 00 00 00	 call	 _M_StartMessage
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5829 : 	}

  00072	eb 47		 jmp	 SHORT $LN6@M_ToggleDi
$LN2@M_ToggleDi:

; 5830 : 	else
; 5831 : 	{
; 5832 : 		if (digital_disabled)

  00074	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _digital_disabled, 0
  0007b	74 1d		 je	 SHORT $LN5@M_ToggleDi

; 5833 : 		{
; 5834 : 			digital_disabled = false;

  0007d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _digital_disabled, 0

; 5835 : 			M_StartMessage("Digital Music Enabled\n", NULL, MM_NOTHING);

  00087	6a 00		 push	 0
  00089	6a 00		 push	 0
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GBPNJPKK@Digital?5Music?5Enabled?6@
  00090	e8 00 00 00 00	 call	 _M_StartMessage
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5836 : 		}

  00098	eb 21		 jmp	 SHORT $LN6@M_ToggleDi
$LN5@M_ToggleDi:

; 5837 : 		else
; 5838 : 		{
; 5839 : 			digital_disabled = true;

  0009a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _digital_disabled, 1

; 5840 : 			S_StopMusic();

  000a4	e8 00 00 00 00	 call	 _S_StopMusic
  000a9	90		 npad	 1

; 5841 : 			M_StartMessage("Digital Music Disabled\n", NULL, MM_NOTHING);

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IFLHPHJB@Digital?5Music?5Disabled?6@
  000b3	e8 00 00 00 00	 call	 _M_StartMessage
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@M_ToggleDi:

; 5842 : 		}
; 5843 : 	}
; 5844 : }

  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_M_ToggleDigital ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ToggleSFX
_TEXT	SEGMENT
_M_ToggleSFX PROC					; COMDAT

; 5793 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5794 : 	if (nosound)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nosound, 0
  00010	74 4a		 je	 SHORT $LN2@M_ToggleSF

; 5795 : 	{
; 5796 : 		nosound = false;

  00012	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nosound, 0

; 5797 : 		I_StartupSound();

  0001c	e8 00 00 00 00	 call	 _I_StartupSound
  00021	90		 npad	 1

; 5798 : 		if (nosound) return;

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nosound, 0
  00029	74 02		 je	 SHORT $LN4@M_ToggleSF
  0002b	eb 76		 jmp	 SHORT $LN6@M_ToggleSF
$LN4@M_ToggleSF:

; 5799 : 		S_Init(cv_soundvolume.value, cv_digmusicvolume.value, cv_midimusicvolume.value);

  0002d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_midimusicvolume+20
  00032	50		 push	 eax
  00033	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_digmusicvolume+20
  00039	51		 push	 ecx
  0003a	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_soundvolume+20
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _S_Init
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5800 : 		M_StartMessage("SFX Enabled\n", NULL, MM_NOTHING);

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MKCHMEKJ@SFX?5Enabled?6@
  00052	e8 00 00 00 00	 call	 _M_StartMessage
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5801 : 	}

  0005a	eb 47		 jmp	 SHORT $LN6@M_ToggleSF
$LN2@M_ToggleSF:

; 5802 : 	else
; 5803 : 	{
; 5804 : 		if (sound_disabled)

  0005c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sound_disabled, 0
  00063	74 1d		 je	 SHORT $LN5@M_ToggleSF

; 5805 : 		{
; 5806 : 			sound_disabled = false;

  00065	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sound_disabled, 0

; 5807 : 			M_StartMessage("SFX Enabled\n", NULL, MM_NOTHING);

  0006f	6a 00		 push	 0
  00071	6a 00		 push	 0
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MKCHMEKJ@SFX?5Enabled?6@
  00078	e8 00 00 00 00	 call	 _M_StartMessage
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5808 : 		}

  00080	eb 21		 jmp	 SHORT $LN6@M_ToggleSF
$LN5@M_ToggleSF:

; 5809 : 		else
; 5810 : 		{
; 5811 : 			sound_disabled = true;

  00082	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _sound_disabled, 1

; 5812 : 			S_StopSounds();

  0008c	e8 00 00 00 00	 call	 _S_StopSounds
  00091	90		 npad	 1

; 5813 : 			M_StartMessage("SFX Disabled\n", NULL, MM_NOTHING);

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BMBFHMHA@SFX?5Disabled?6@
  0009b	e8 00 00 00 00	 call	 _M_StartMessage
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@M_ToggleSF:

; 5814 : 		}
; 5815 : 	}
; 5816 : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_M_ToggleSFX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawReadThis2
_TEXT	SEGMENT
_M_DrawReadThis2 PROC					; COMDAT

; 5780 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5781 : 	V_DrawScaledPic (0,0,0,W_GetNumForName ("BULMER"));

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_06OHOFJIMA@BULMER@
  0000e	e8 00 00 00 00	 call	 _W_GetNumForName
  00013	83 c4 04	 add	 esp, 4
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 _V_DrawScaledPic
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 5782 : 	HU_Drawer();

  00025	e8 00 00 00 00	 call	 _HU_Drawer
  0002a	90		 npad	 1

; 5783 : 	return;
; 5784 : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_M_DrawReadThis2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawReadThis1
_TEXT	SEGMENT
_M_DrawReadThis1 PROC					; COMDAT

; 5742 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5743 : 	V_DrawScaledPatch (0,0,0,W_CachePatchName("HELP",PU_CACHE));

  00009	6a 65		 push	 101			; 00000065H
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_04DOKPJKJF@HELP@
  00010	e8 00 00 00 00	 call	 _W_CachePatchName
  00015	83 c4 08	 add	 esp, 8
  00018	50		 push	 eax
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 5744 : 	return;
; 5745 : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_M_DrawReadThis1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_MonitorToggles
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_MonitorToggles PROC					; COMDAT

; 5418 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5419 : 	(void)choice;
; 5420 : 	if (!(server || (adminplayer == consoleplayer)))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	75 20		 jne	 SHORT $LN2@M_MonitorT
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00017	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0001d	74 13		 je	 SHORT $LN2@M_MonitorT

; 5421 : 	{
; 5422 : 		M_StartMessage("You are not the server\nYou can't change the options\n",NULL,MM_NOTHING);

  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@JBIJLGLN@You?5are?5not?5the?5server?6You?5can?8@
  00028	e8 00 00 00 00	 call	 _M_StartMessage
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5423 : 		return;

  00030	eb 0d		 jmp	 SHORT $LN1@M_MonitorT
$LN2@M_MonitorT:

; 5424 : 	}
; 5425 : 	M_SetupNextMenu(&MonitorToggleDef);

  00032	68 00 00 00 00	 push	 OFFSET _MonitorToggleDef
  00037	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0003c	83 c4 04	 add	 esp, 4
$LN1@M_MonitorT:

; 5426 : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_M_MonitorToggles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawLevelSelectMenu
_TEXT	SEGMENT
_PictureOfLevel$1 = -8					; size = 4
_lumpnum$2 = -4						; size = 4
_M_DrawLevelSelectMenu PROC				; COMDAT

; 5087 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5088 : 	M_DrawGenericMenu();

  00009	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  0000e	90		 npad	 1

; 5089 : 
; 5090 : 	if (cv_nextmap.value)

  0000f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_nextmap+20, 0
  00016	0f 84 81 00 00
	00		 je	 $LN2@M_DrawLeve

; 5091 : 	{
; 5092 : 		lumpnum_t lumpnum;
; 5093 : 		patch_t *PictureOfLevel;
; 5094 : 
; 5095 : 		//  A 160x100 image of the level as entry MAPxxP
; 5096 : 		lumpnum = W_CheckNumForName(va("%sP", G_BuildMapName(cv_nextmap.value)));

  0001c	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _G_BuildMapName
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_03KFFLPELC@?$CFsP@
  00030	e8 00 00 00 00	 call	 _va
  00035	83 c4 08	 add	 esp, 8
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _W_CheckNumForName
  0003e	83 c4 04	 add	 esp, 4
  00041	89 45 fc	 mov	 DWORD PTR _lumpnum$2[ebp], eax

; 5097 : 
; 5098 : 		if (lumpnum != LUMPERROR)

  00044	83 7d fc ff	 cmp	 DWORD PTR _lumpnum$2[ebp], -1
  00048	74 2c		 je	 SHORT $LN3@M_DrawLeve

; 5099 : 			PictureOfLevel = W_CachePatchName(va("%sP", G_BuildMapName(cv_nextmap.value)), PU_CACHE);

  0004a	6a 65		 push	 101			; 00000065H
  0004c	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _G_BuildMapName
  00057	83 c4 04	 add	 esp, 4
  0005a	50		 push	 eax
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_03KFFLPELC@?$CFsP@
  00060	e8 00 00 00 00	 call	 _va
  00065	83 c4 08	 add	 esp, 8
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _W_CachePatchName
  0006e	83 c4 08	 add	 esp, 8
  00071	89 45 f8	 mov	 DWORD PTR _PictureOfLevel$1[ebp], eax
  00074	eb 12		 jmp	 SHORT $LN4@M_DrawLeve
$LN3@M_DrawLeve:

; 5100 : 		else
; 5101 : 			PictureOfLevel = W_CachePatchName("BLANKLVL", PU_CACHE);

  00076	6a 65		 push	 101			; 00000065H
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_08IKJCNOHF@BLANKLVL@
  0007d	e8 00 00 00 00	 call	 _W_CachePatchName
  00082	83 c4 08	 add	 esp, 8
  00085	89 45 f8	 mov	 DWORD PTR _PictureOfLevel$1[ebp], eax
$LN4@M_DrawLeve:

; 5102 : 
; 5103 : 		V_DrawSmallScaledPatch(200, 110, 0, PictureOfLevel);

  00088	8b 45 f8	 mov	 eax, DWORD PTR _PictureOfLevel$1[ebp]
  0008b	50		 push	 eax
  0008c	6a 00		 push	 0
  0008e	6a 6e		 push	 110			; 0000006eH
  00090	68 c8 00 00 00	 push	 200			; 000000c8H
  00095	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0009a	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@M_DrawLeve:

; 5104 : 	}
; 5105 : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
_M_DrawLevelSelectMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SRB1LevelSelect
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_SRB1LevelSelect PROC					; COMDAT

; 5128 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5129 : 	(void)choice;
; 5130 : 	LevelSelectDef.prevMenu = &SecretsDef;

  00009	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LevelSelectDef+12, OFFSET _SecretsDef

; 5131 : 	inlevelselect = 3;

  00013	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _inlevelselect, 3

; 5132 : 	pandoralevelselect = true;

  0001d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _pandoralevelselect, 1

; 5133 : 
; 5134 : 	if (!(M_PatchLevelNameTable(3)))

  00027	6a 03		 push	 3
  00029	e8 00 00 00 00	 call	 _M_PatchLevelNameTable
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	75 13		 jne	 SHORT $LN2@M_SRB1Leve

; 5135 : 	{
; 5136 : 		M_StartMessage("No selectable levels found.\n",NULL,MM_NOTHING);

  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JPGNEEFB@No?5selectable?5levels?5found?4?6@
  0003e	e8 00 00 00 00	 call	 _M_StartMessage
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5137 : 		return;

  00046	eb 0d		 jmp	 SHORT $LN1@M_SRB1Leve
$LN2@M_SRB1Leve:

; 5138 : 	}
; 5139 : 	M_SetupNextMenu(&LevelSelectDef);

  00048	68 00 00 00 00	 push	 OFFSET _LevelSelectDef
  0004d	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00052	83 c4 04	 add	 esp, 4
$LN1@M_SRB1Leve:

; 5140 : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_M_SRB1LevelSelect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_LevelSelect
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_LevelSelect PROC					; COMDAT

; 5143 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5144 : 	(void)choice;
; 5145 : 	LevelSelectDef.prevMenu = &SecretsDef;

  00009	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LevelSelectDef+12, OFFSET _SecretsDef

; 5146 : 	inlevelselect = 1;

  00013	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _inlevelselect, 1

; 5147 : 	pandoralevelselect = true;

  0001d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _pandoralevelselect, 1

; 5148 : 
; 5149 : 	if (!(M_PatchLevelNameTable(1)))

  00027	6a 01		 push	 1
  00029	e8 00 00 00 00	 call	 _M_PatchLevelNameTable
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	75 13		 jne	 SHORT $LN2@M_LevelSel

; 5150 : 	{
; 5151 : 		M_StartMessage("No selectable levels found.\n",NULL,MM_NOTHING);

  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JPGNEEFB@No?5selectable?5levels?5found?4?6@
  0003e	e8 00 00 00 00	 call	 _M_StartMessage
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5152 : 		return;

  00046	eb 0d		 jmp	 SHORT $LN1@M_LevelSel
$LN2@M_LevelSel:

; 5153 : 	}
; 5154 : 	M_SetupNextMenu(&LevelSelectDef);

  00048	68 00 00 00 00	 push	 OFFSET _LevelSelectDef
  0004d	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00052	83 c4 04	 add	 esp, 4
$LN1@M_LevelSel:

; 5155 : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_M_LevelSelect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Reward
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Reward PROC						; COMDAT

; 5049 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5050 : 	(void)choice;
; 5051 : 	if (grade & 2)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0000e	83 e0 02	 and	 eax, 2
  00011	74 15		 je	 SHORT $LN2@M_Reward

; 5052 : 		RewardMenu[srb1_remake].status = IT_STRING | IT_CALL;

  00013	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00018	d1 e0		 shl	 eax, 1
  0001a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001f	66 89 88 00 00
	00 00		 mov	 WORD PTR _RewardMenu[eax], cx
  00026	eb 1f		 jmp	 SHORT $LN3@M_Reward
$LN2@M_Reward:

; 5053 : 	else
; 5054 : 		RewardMenu[srb1_remake].status |= IT_DISABLED;

  00028	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0002d	d1 e0		 shl	 eax, 1
  0002f	0f bf 88 00 00
	00 00		 movsx	 ecx, WORD PTR _RewardMenu[eax]
  00036	83 c9 7a	 or	 ecx, 122		; 0000007aH
  00039	ba 14 00 00 00	 mov	 edx, 20			; 00000014H
  0003e	d1 e2		 shl	 edx, 1
  00040	66 89 8a 00 00
	00 00		 mov	 WORD PTR _RewardMenu[edx], cx
$LN3@M_Reward:

; 5055 : 
; 5056 : 	if (grade & 4)

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0004c	83 e0 04	 and	 eax, 4
  0004f	74 16		 je	 SHORT $LN4@M_Reward

; 5057 : 		RewardMenu[mario].status = IT_STRING | IT_CALL;

  00051	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00056	c1 e0 00	 shl	 eax, 0
  00059	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0005e	66 89 88 00 00
	00 00		 mov	 WORD PTR _RewardMenu[eax], cx
  00065	eb 21		 jmp	 SHORT $LN5@M_Reward
$LN4@M_Reward:

; 5058 : 	else
; 5059 : 		RewardMenu[mario].status |= IT_DISABLED;

  00067	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0006c	c1 e0 00	 shl	 eax, 0
  0006f	0f bf 88 00 00
	00 00		 movsx	 ecx, WORD PTR _RewardMenu[eax]
  00076	83 c9 7a	 or	 ecx, 122		; 0000007aH
  00079	ba 14 00 00 00	 mov	 edx, 20			; 00000014H
  0007e	c1 e2 00	 shl	 edx, 0
  00081	66 89 8a 00 00
	00 00		 mov	 WORD PTR _RewardMenu[edx], cx
$LN5@M_Reward:

; 5060 : 
; 5061 : 	if (grade & 16)

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0008d	83 e0 10	 and	 eax, 16			; 00000010H
  00090	74 16		 je	 SHORT $LN6@M_Reward

; 5062 : 		RewardMenu[nights].status = IT_STRING | IT_CALL;

  00092	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0009f	66 89 91 00 00
	00 00		 mov	 WORD PTR _RewardMenu[ecx], dx
  000a6	eb 21		 jmp	 SHORT $LN7@M_Reward
$LN6@M_Reward:

; 5063 : 	else
; 5064 : 		RewardMenu[nights].status |= IT_DISABLED;

  000a8	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000ad	6b c8 00	 imul	 ecx, eax, 0
  000b0	0f bf 91 00 00
	00 00		 movsx	 edx, WORD PTR _RewardMenu[ecx]
  000b7	83 ca 7a	 or	 edx, 122		; 0000007aH
  000ba	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000bf	6b c8 00	 imul	 ecx, eax, 0
  000c2	66 89 91 00 00
	00 00		 mov	 WORD PTR _RewardMenu[ecx], dx
$LN7@M_Reward:

; 5065 : 
; 5066 : 	if (grade & 1024)

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  000ce	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  000d3	74 16		 je	 SHORT $LN8@M_Reward

; 5067 : 		RewardMenu[srb1_levelselect].status = IT_STRING | IT_CALL;

  000d5	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000da	6b c8 03	 imul	 ecx, eax, 3
  000dd	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000e2	66 89 91 00 00
	00 00		 mov	 WORD PTR _RewardMenu[ecx], dx
  000e9	eb 21		 jmp	 SHORT $LN9@M_Reward
$LN8@M_Reward:

; 5068 : 	else
; 5069 : 		RewardMenu[srb1_levelselect].status |= IT_DISABLED;

  000eb	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000f0	6b c8 03	 imul	 ecx, eax, 3
  000f3	0f bf 91 00 00
	00 00		 movsx	 edx, WORD PTR _RewardMenu[ecx]
  000fa	83 ca 7a	 or	 edx, 122		; 0000007aH
  000fd	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00102	6b c8 03	 imul	 ecx, eax, 3
  00105	66 89 91 00 00
	00 00		 mov	 WORD PTR _RewardMenu[ecx], dx
$LN9@M_Reward:

; 5070 : 
; 5071 : 	if (grade & 2048)

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00111	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00116	74 16		 je	 SHORT $LN10@M_Reward

; 5072 : 		RewardMenu[nagz].status = IT_STRING | IT_CALL;

  00118	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0011d	c1 e0 02	 shl	 eax, 2
  00120	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00125	66 89 88 00 00
	00 00		 mov	 WORD PTR _RewardMenu[eax], cx
  0012c	eb 21		 jmp	 SHORT $LN11@M_Reward
$LN10@M_Reward:

; 5073 : 	else
; 5074 : 		RewardMenu[nagz].status |= IT_DISABLED;

  0012e	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00133	c1 e0 02	 shl	 eax, 2
  00136	0f bf 88 00 00
	00 00		 movsx	 ecx, WORD PTR _RewardMenu[eax]
  0013d	83 c9 7a	 or	 ecx, 122		; 0000007aH
  00140	ba 14 00 00 00	 mov	 edx, 20			; 00000014H
  00145	c1 e2 02	 shl	 edx, 2
  00148	66 89 8a 00 00
	00 00		 mov	 WORD PTR _RewardMenu[edx], cx
$LN11@M_Reward:

; 5075 : 
; 5076 : 	M_SetupNextMenu (&RewardDef);

  0014f	68 00 00 00 00	 push	 OFFSET _RewardDef
  00154	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00159	83 c4 04	 add	 esp, 4

; 5077 : }

  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
_M_Reward ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_BetaShowcase
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_BetaShowcase PROC					; COMDAT

; 4890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4891 : 	(void)choice;
; 4892 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_M_BetaShowcase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_CustomChecklist
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_CustomChecklist PROC					; COMDAT

; 4884 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4885 : 	(void)choice;
; 4886 : 	M_SetupNextMenu(&CustomChecklistDef);

  00009	68 00 00 00 00	 push	 OFFSET _CustomChecklistDef
  0000e	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00013	83 c4 04	 add	 esp, 4

; 4887 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_M_CustomChecklist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_UnlockChecklist
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_UnlockChecklist PROC					; COMDAT

; 4873 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4874 : 	(void)choice;
; 4875 : 	if (savemoddata)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00010	74 13		 je	 SHORT $LN2@M_UnlockCh

; 4876 : 	{
; 4877 : 		M_StartMessage("Checklist does not apply\nfor this mod.\nUse statistics screen instead.", NULL, MM_NOTHING);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@KAIGCOA@Checklist?5does?5not?5apply?6for?5th@
  0001b	e8 00 00 00 00	 call	 _M_StartMessage
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4878 : 		return;

  00023	eb 0d		 jmp	 SHORT $LN1@M_UnlockCh
$LN2@M_UnlockCh:

; 4879 : 	}
; 4880 : 	M_SetupNextMenu(&UnlockChecklistDef);

  00025	68 00 00 00 00	 push	 OFFSET _UnlockChecklistDef
  0002a	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0002f	83 c4 04	 add	 esp, 4
$LN1@M_UnlockCh:

; 4881 : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_M_UnlockChecklist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawCustomChecklist
_TEXT	SEGMENT
_checklist$ = -196					; size = 180
_totalnum$ = -16					; size = 4
_i$ = -12						; size = 4
_numcustom$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_M_DrawCustomChecklist PROC				; COMDAT

; 4765 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4766 : 	INT32 numcustom = 0;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _numcustom$[ebp], 0

; 4767 : 	INT32 i;
; 4768 : 	INT32 totalnum = 0;

  0001d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _totalnum$[ebp], 0

; 4769 : 	checklist_t checklist[15];
; 4770 : 
; 4771 : 	memset(checklist, 0, sizeof (checklist));

  00024	68 b4 00 00 00	 push	 180			; 000000b4H
  00029	6a 00		 push	 0
  0002b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _checklist$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4772 : 
; 4773 : 	for (i = 0; i < 15; i++)

  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00041	eb 09		 jmp	 SHORT $LN4@M_DrawCust
$LN2@M_DrawCust:
  00043	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawCust:
  0004c	83 7d f4 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  00050	0f 8d 5e 01 00
	00		 jge	 $LN3@M_DrawCust

; 4774 : 	{
; 4775 : 		if (customsecretinfo[i].neededemblems)

  00056	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0005d	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+132], 0
  00064	0f 84 a1 00 00
	00		 je	 $LN8@M_DrawCust

; 4776 : 		{
; 4777 : 			checklist[i].unlocked = M_GotEnoughEmblems(customsecretinfo[i].neededemblems);

  0006a	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00071	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+132]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _M_GotEnoughEmblems
  0007d	83 c4 04	 add	 esp, 4
  00080	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00084	89 84 15 44 ff
	ff ff		 mov	 DWORD PTR _checklist$[ebp+edx+8], eax

; 4778 : 
; 4779 : 			if (checklist[i].unlocked && customsecretinfo[i].neededtime)

  0008b	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0008f	83 bc 05 44 ff
	ff ff 00	 cmp	 DWORD PTR _checklist$[ebp+eax+8], 0
  00097	74 31		 je	 SHORT $LN10@M_DrawCust
  00099	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000a0	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+136], 0
  000a7	74 21		 je	 SHORT $LN10@M_DrawCust

; 4780 : 				checklist[i].unlocked = M_GotLowEnoughTime(customsecretinfo[i].neededtime);

  000a9	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000b0	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+136]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 _M_GotLowEnoughTime
  000bc	83 c4 04	 add	 esp, 4
  000bf	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  000c3	89 84 15 44 ff
	ff ff		 mov	 DWORD PTR _checklist$[ebp+edx+8], eax
$LN10@M_DrawCust:

; 4781 : 
; 4782 : 			if (checklist[i].unlocked && customsecretinfo[i].neededgrade)

  000ca	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000ce	83 bc 05 44 ff
	ff ff 00	 cmp	 DWORD PTR _checklist$[ebp+eax+8], 0
  000d6	74 2e		 je	 SHORT $LN11@M_DrawCust
  000d8	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000df	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+128], 0
  000e6	74 1e		 je	 SHORT $LN11@M_DrawCust

; 4783 : 				checklist[i].unlocked = (grade & customsecretinfo[i].neededgrade);

  000e8	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grade
  000f5	23 88 80 00 00
	00		 and	 ecx, DWORD PTR _customsecretinfo[eax+128]
  000fb	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  000ff	89 8c 15 44 ff
	ff ff		 mov	 DWORD PTR _checklist$[ebp+edx+8], ecx
$LN11@M_DrawCust:

; 4784 : 		}

  00106	e9 8d 00 00 00	 jmp	 $LN13@M_DrawCust
$LN8@M_DrawCust:

; 4785 : 		else if (customsecretinfo[i].neededtime)

  0010b	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00112	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+136], 0
  00119	74 5f		 je	 SHORT $LN12@M_DrawCust

; 4786 : 		{
; 4787 : 			checklist[i].unlocked = M_GotLowEnoughTime(customsecretinfo[i].neededtime);

  0011b	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00122	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+136]
  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 _M_GotLowEnoughTime
  0012e	83 c4 04	 add	 esp, 4
  00131	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00135	89 84 15 44 ff
	ff ff		 mov	 DWORD PTR _checklist$[ebp+edx+8], eax

; 4788 : 
; 4789 : 			if (checklist[i].unlocked && customsecretinfo[i].neededgrade)

  0013c	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00140	83 bc 05 44 ff
	ff ff 00	 cmp	 DWORD PTR _checklist$[ebp+eax+8], 0
  00148	74 2e		 je	 SHORT $LN14@M_DrawCust
  0014a	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00151	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+128], 0
  00158	74 1e		 je	 SHORT $LN14@M_DrawCust

; 4790 : 				checklist[i].unlocked = (grade & customsecretinfo[i].neededgrade);

  0015a	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grade
  00167	23 88 80 00 00
	00		 and	 ecx, DWORD PTR _customsecretinfo[eax+128]
  0016d	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00171	89 8c 15 44 ff
	ff ff		 mov	 DWORD PTR _checklist$[ebp+edx+8], ecx
$LN14@M_DrawCust:

; 4791 : 		}

  00178	eb 1e		 jmp	 SHORT $LN13@M_DrawCust
$LN12@M_DrawCust:

; 4792 : 		else
; 4793 : 			checklist[i].unlocked = (grade & customsecretinfo[i].neededgrade);

  0017a	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00181	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grade
  00187	23 88 80 00 00
	00		 and	 ecx, DWORD PTR _customsecretinfo[eax+128]
  0018d	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00191	89 8c 15 44 ff
	ff ff		 mov	 DWORD PTR _checklist$[ebp+edx+8], ecx
$LN13@M_DrawCust:

; 4794 : 
; 4795 : 		if (checklist[i].unlocked)

  00198	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0019c	83 bc 05 44 ff
	ff ff 00	 cmp	 DWORD PTR _checklist$[ebp+eax+8], 0
  001a4	74 09		 je	 SHORT $LN15@M_DrawCust

; 4796 : 			totalnum++;

  001a6	8b 45 f0	 mov	 eax, DWORD PTR _totalnum$[ebp]
  001a9	83 c0 01	 add	 eax, 1
  001ac	89 45 f0	 mov	 DWORD PTR _totalnum$[ebp], eax
$LN15@M_DrawCust:

; 4797 : 	}

  001af	e9 8f fe ff ff	 jmp	 $LN2@M_DrawCust
$LN3@M_DrawCust:

; 4798 : 
; 4799 : 	for (i = 0; i < 15; i++)

  001b4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001bb	eb 09		 jmp	 SHORT $LN7@M_DrawCust
$LN5@M_DrawCust:
  001bd	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001c0	83 c0 01	 add	 eax, 1
  001c3	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN7@M_DrawCust:
  001c6	83 7d f4 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  001ca	0f 8d e2 00 00
	00		 jge	 $LN6@M_DrawCust

; 4800 : 	{
; 4801 : 		if (checklist[i].unlocked && totalnum > 7)

  001d0	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  001d4	83 bc 05 44 ff
	ff ff 00	 cmp	 DWORD PTR _checklist$[ebp+eax+8], 0
  001dc	74 08		 je	 SHORT $LN16@M_DrawCust
  001de	83 7d f0 07	 cmp	 DWORD PTR _totalnum$[ebp], 7
  001e2	7e 02		 jle	 SHORT $LN16@M_DrawCust

; 4802 : 			continue;

  001e4	eb d7		 jmp	 SHORT $LN5@M_DrawCust
$LN16@M_DrawCust:

; 4803 : 
; 4804 : 		if (customsecretinfo[i].name[0] == 0)

  001e6	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  001ed	b9 01 00 00 00	 mov	 ecx, 1
  001f2	6b d1 00	 imul	 edx, ecx, 0
  001f5	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _customsecretinfo[eax+edx]
  001fd	85 c0		 test	 eax, eax
  001ff	75 02		 jne	 SHORT $LN17@M_DrawCust

; 4805 : 			continue;

  00201	eb ba		 jmp	 SHORT $LN5@M_DrawCust
$LN17@M_DrawCust:

; 4806 : 
; 4807 : 		V_DrawString(8, 8+(24*numcustom), V_RETURN8, customsecretinfo[i].name);

  00203	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0020a	05 00 00 00 00	 add	 eax, OFFSET _customsecretinfo
  0020f	50		 push	 eax
  00210	68 00 00 00 20	 push	 536870912		; 20000000H
  00215	6b 4d f8 18	 imul	 ecx, DWORD PTR _numcustom$[ebp], 24
  00219	83 c1 08	 add	 ecx, 8
  0021c	51		 push	 ecx
  0021d	6a 08		 push	 8
  0021f	e8 00 00 00 00	 call	 _V_DrawString
  00224	83 c4 10	 add	 esp, 16			; 00000010H

; 4808 : 		V_DrawString(160, 8+(24*numcustom), V_RETURN8|V_WORDWRAP, customsecretinfo[i].objective);

  00227	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0022e	05 40 00 00 00	 add	 eax, OFFSET _customsecretinfo+64
  00233	50		 push	 eax
  00234	68 00 00 00 22	 push	 570425344		; 22000000H
  00239	6b 4d f8 18	 imul	 ecx, DWORD PTR _numcustom$[ebp], 24
  0023d	83 c1 08	 add	 ecx, 8
  00240	51		 push	 ecx
  00241	68 a0 00 00 00	 push	 160			; 000000a0H
  00246	e8 00 00 00 00	 call	 _V_DrawString
  0024b	83 c4 10	 add	 esp, 16			; 00000010H

; 4809 : 
; 4810 : 		if (checklist[i].unlocked)

  0024e	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00252	83 bc 05 44 ff
	ff ff 00	 cmp	 DWORD PTR _checklist$[ebp+eax+8], 0
  0025a	74 21		 je	 SHORT $LN18@M_DrawCust

; 4811 : 			V_DrawString(308, 8+(24*numcustom), V_YELLOWMAP, "Y");

  0025c	68 00 00 00 00	 push	 OFFSET ??_C@_01NFFPALBN@Y@
  00261	68 00 00 10 00	 push	 1048576			; 00100000H
  00266	6b 45 f8 18	 imul	 eax, DWORD PTR _numcustom$[ebp], 24
  0026a	83 c0 08	 add	 eax, 8
  0026d	50		 push	 eax
  0026e	68 34 01 00 00	 push	 308			; 00000134H
  00273	e8 00 00 00 00	 call	 _V_DrawString
  00278	83 c4 10	 add	 esp, 16			; 00000010H
  0027b	eb 1f		 jmp	 SHORT $LN19@M_DrawCust
$LN18@M_DrawCust:

; 4812 : 		else
; 4813 : 			V_DrawString(308, 8+(24*numcustom), V_YELLOWMAP, "N");

  0027d	68 00 00 00 00	 push	 OFFSET ??_C@_01NANMIPIL@N@
  00282	68 00 00 10 00	 push	 1048576			; 00100000H
  00287	6b 45 f8 18	 imul	 eax, DWORD PTR _numcustom$[ebp], 24
  0028b	83 c0 08	 add	 eax, 8
  0028e	50		 push	 eax
  0028f	68 34 01 00 00	 push	 308			; 00000134H
  00294	e8 00 00 00 00	 call	 _V_DrawString
  00299	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@M_DrawCust:

; 4814 : 
; 4815 : 		numcustom++;

  0029c	8b 45 f8	 mov	 eax, DWORD PTR _numcustom$[ebp]
  0029f	83 c0 01	 add	 eax, 1
  002a2	89 45 f8	 mov	 DWORD PTR _numcustom$[ebp], eax

; 4816 : 
; 4817 : 		if (numcustom > 6)

  002a5	83 7d f8 06	 cmp	 DWORD PTR _numcustom$[ebp], 6
  002a9	7e 02		 jle	 SHORT $LN20@M_DrawCust

; 4818 : 			break;

  002ab	eb 05		 jmp	 SHORT $LN6@M_DrawCust
$LN20@M_DrawCust:

; 4819 : 	}

  002ad	e9 0b ff ff ff	 jmp	 $LN5@M_DrawCust
$LN6@M_DrawCust:

; 4820 : }

  002b2	5f		 pop	 edi
  002b3	5e		 pop	 esi
  002b4	5b		 pop	 ebx
  002b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b8	33 cd		 xor	 ecx, ebp
  002ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bf	8b e5		 mov	 esp, ebp
  002c1	5d		 pop	 ebp
  002c2	c3		 ret	 0
_M_DrawCustomChecklist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawUnlockChecklist
_TEXT	SEGMENT
_y$ = -120						; size = 4
_i$ = -116						; size = 4
_checklist$ = -112					; size = 108
__$ArrayPad$ = -4					; size = 4
_M_DrawUnlockChecklist PROC				; COMDAT

; 4658 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4659 : #define NUMCHECKLIST 9
; 4660 : 	checklist_t checklist[NUMCHECKLIST];
; 4661 : 	INT32 i = 0;

  00016	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 4662 : 	INT32 y = 8;

  0001d	c7 45 88 08 00
	00 00		 mov	 DWORD PTR _y$[ebp], 8

; 4663 : 
; 4664 : 	checklist[i].name = "Level Select";

  00024	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00028	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0N@BOMJPEGC@Level?5Select@

; 4665 : 	checklist[i].requirement = "Find All Emblems";

  00030	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00034	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_0BB@MDDPHAEN@Find?5All?5Emblems@

; 4666 : 	checklist[i].unlocked = (grade & 8);

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00041	83 e0 08	 and	 eax, 8
  00044	6b 4d 8c 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  00048	89 44 0d 98	 mov	 DWORD PTR _checklist$[ebp+ecx+8], eax

; 4667 : 	i++;

  0004c	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  0004f	83 c0 01	 add	 eax, 1
  00052	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4668 : 
; 4669 : 	checklist[i].name = "SRB1 Remake";

  00055	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00059	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0M@OHCNEKBN@SRB1?5Remake@

; 4670 : 	checklist[i].requirement = "Finish 1P\nw/ Emeralds";

  00061	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00065	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_0BG@KIHNOHNI@Finish?51P?6w?1?5Emeralds@

; 4671 : 	checklist[i].unlocked = (grade & 2);

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00072	83 e0 02	 and	 eax, 2
  00075	6b 4d 8c 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  00079	89 44 0d 98	 mov	 DWORD PTR _checklist$[ebp+ecx+8], eax

; 4672 : 	i++;

  0007d	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  00080	83 c0 01	 add	 eax, 1
  00083	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4673 : 
; 4674 : 	checklist[i].name = "Sonic Into Dreams";

  00086	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0008a	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0BC@HHPLLDPH@Sonic?5Into?5Dreams@

; 4675 : 	checklist[i].requirement = "Find 10 Emblems";

  00092	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00096	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_0BA@BCDLPMCA@Find?510?5Emblems@

; 4676 : 	checklist[i].unlocked = (grade & 16);

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  000a3	83 e0 10	 and	 eax, 16			; 00000010H
  000a6	6b 4d 8c 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  000aa	89 44 0d 98	 mov	 DWORD PTR _checklist$[ebp+ecx+8], eax

; 4677 : 	i++;

  000ae	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  000b1	83 c0 01	 add	 eax, 1
  000b4	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4678 : 
; 4679 : 	checklist[i].name = "Mario Koopa Blast";

  000b7	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000bb	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0BC@CBHOBIIP@Mario?5Koopa?5Blast@

; 4680 : 	checklist[i].requirement = "Find 20 Emblems";

  000c3	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000c7	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_0BA@ILNJJKCB@Find?520?5Emblems@

; 4681 : 	checklist[i].unlocked = (grade & 4);

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  000d4	83 e0 04	 and	 eax, 4
  000d7	6b 4d 8c 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  000db	89 44 0d 98	 mov	 DWORD PTR _checklist$[ebp+ecx+8], eax

; 4682 : 	i++;

  000df	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  000e2	83 c0 01	 add	 eax, 1
  000e5	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4683 : 
; 4684 : 	checklist[i].name = "Pandora's Box";

  000e8	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000ec	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0O@MKKBLIHF@Pandora?8s?5Box@

; 4685 : 	checklist[i].requirement = "Find All Emblems";

  000f4	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000f8	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_0BB@MDDPHAEN@Find?5All?5Emblems@

; 4686 : 	checklist[i].unlocked = (grade & 8);

  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00105	83 e0 08	 and	 eax, 8
  00108	6b 4d 8c 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  0010c	89 44 0d 98	 mov	 DWORD PTR _checklist$[ebp+ecx+8], eax

; 4687 : 	i++;

  00110	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  00113	83 c0 01	 add	 eax, 1
  00116	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4688 : 
; 4689 : 	checklist[i].name = "Extra Emblem #1";

  00119	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0011d	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0BA@PMCOIFCM@Extra?5Emblem?5?$CD1@

; 4690 : 	checklist[i].requirement = "Finish 1P";

  00125	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00129	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_09LPIKFCAA@Finish?51P@

; 4691 : 	checklist[i].unlocked = (emblemlocations[MAXEMBLEMS-2].collected);

  00131	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00136	69 c8 fe 01 00
	00		 imul	 ecx, eax, 510
  0013c	6b 55 8c 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00140	0f b6 81 0a 00
	00 00		 movzx	 eax, BYTE PTR _emblemlocations[ecx+10]
  00147	89 44 15 98	 mov	 DWORD PTR _checklist$[ebp+edx+8], eax

; 4692 : 	i++;

  0014b	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  0014e	83 c0 01	 add	 eax, 1
  00151	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4693 : 
; 4694 : 	checklist[i].name = "Extra Emblem #2";

  00154	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00158	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0BA@NHADNGOP@Extra?5Emblem?5?$CD2@

; 4695 : 	checklist[i].requirement = "Finish 1P\nw/ Emeralds";

  00160	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00164	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_0BG@KIHNOHNI@Finish?51P?6w?1?5Emeralds@

; 4696 : 	checklist[i].unlocked = (emblemlocations[MAXEMBLEMS-1].collected);

  0016c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00171	69 c8 ff 01 00
	00		 imul	 ecx, eax, 511
  00177	6b 55 8c 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  0017b	0f b6 81 0a 00
	00 00		 movzx	 eax, BYTE PTR _emblemlocations[ecx+10]
  00182	89 44 15 98	 mov	 DWORD PTR _checklist$[ebp+edx+8], eax

; 4697 : 	i++;

  00186	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  00189	83 c0 01	 add	 eax, 1
  0018c	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4698 : 
; 4699 : 	checklist[i].name = "Extra Emblem #3";

  0018f	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00193	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0BA@MOBIOHKO@Extra?5Emblem?5?$CD3@

; 4700 : 	checklist[i].requirement = "Finish 1P in\n23 minutes";

  0019b	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0019f	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_0BI@BCFFBPDP@Finish?51P?5in?623?5minutes@

; 4701 : 	checklist[i].unlocked = (emblemlocations[MAXEMBLEMS-3].collected);

  001a7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ac	69 c8 fd 01 00
	00		 imul	 ecx, eax, 509
  001b2	6b 55 8c 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  001b6	0f b6 81 0a 00
	00 00		 movzx	 eax, BYTE PTR _emblemlocations[ecx+10]
  001bd	89 44 15 98	 mov	 DWORD PTR _checklist$[ebp+edx+8], eax

; 4702 : 	i++;

  001c1	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  001c4	83 c0 01	 add	 eax, 1
  001c7	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4703 : 
; 4704 : 	checklist[i].name = "Extra Emblem #4";

  001ca	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  001ce	c7 44 05 90 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax], OFFSET ??_C@_0BA@IBFJHBGJ@Extra?5Emblem?5?$CD4@

; 4705 : 	checklist[i].requirement = "Perfect Bonus on\nany stage";

  001d6	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  001da	c7 44 05 94 00
	00 00 00	 mov	 DWORD PTR _checklist$[ebp+eax+4], OFFSET ??_C@_0BL@BNEGKOBM@Perfect?5Bonus?5on?6any?5stage@

; 4706 : 	checklist[i].unlocked = (emblemlocations[MAXEMBLEMS-4].collected);

  001e2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001e7	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  001ed	6b 55 8c 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  001f1	0f b6 81 0a 00
	00 00		 movzx	 eax, BYTE PTR _emblemlocations[ecx+10]
  001f8	89 44 15 98	 mov	 DWORD PTR _checklist$[ebp+edx+8], eax

; 4707 : 	i++;

  001fc	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  001ff	83 c0 01	 add	 eax, 1
  00202	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax

; 4708 : 
; 4709 : 	for (i = 0; i < NUMCHECKLIST; i++)

  00205	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0020c	eb 09		 jmp	 SHORT $LN4@M_DrawUnlo
$LN2@M_DrawUnlo:
  0020e	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  00211	83 c0 01	 add	 eax, 1
  00214	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawUnlo:
  00217	83 7d 8c 09	 cmp	 DWORD PTR _i$[ebp], 9
  0021b	0f 8d 8c 00 00
	00		 jge	 $LN3@M_DrawUnlo

; 4710 : 	{
; 4711 : 		V_DrawString(8, y, V_RETURN8, checklist[i].name);

  00221	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00225	8b 4c 05 90	 mov	 ecx, DWORD PTR _checklist$[ebp+eax]
  00229	51		 push	 ecx
  0022a	68 00 00 00 20	 push	 536870912		; 20000000H
  0022f	8b 55 88	 mov	 edx, DWORD PTR _y$[ebp]
  00232	52		 push	 edx
  00233	6a 08		 push	 8
  00235	e8 00 00 00 00	 call	 _V_DrawString
  0023a	83 c4 10	 add	 esp, 16			; 00000010H

; 4712 : 		V_DrawString(160, y, V_RETURN8, checklist[i].requirement);

  0023d	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00241	8b 4c 05 94	 mov	 ecx, DWORD PTR _checklist$[ebp+eax+4]
  00245	51		 push	 ecx
  00246	68 00 00 00 20	 push	 536870912		; 20000000H
  0024b	8b 55 88	 mov	 edx, DWORD PTR _y$[ebp]
  0024e	52		 push	 edx
  0024f	68 a0 00 00 00	 push	 160			; 000000a0H
  00254	e8 00 00 00 00	 call	 _V_DrawString
  00259	83 c4 10	 add	 esp, 16			; 00000010H

; 4713 : 
; 4714 : 		if (checklist[i].unlocked)

  0025c	6b 45 8c 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00260	83 7c 05 98 00	 cmp	 DWORD PTR _checklist$[ebp+eax+8], 0
  00265	74 1d		 je	 SHORT $LN5@M_DrawUnlo

; 4715 : 			V_DrawString(308, y, V_YELLOWMAP, "Y");

  00267	68 00 00 00 00	 push	 OFFSET ??_C@_01NFFPALBN@Y@
  0026c	68 00 00 10 00	 push	 1048576			; 00100000H
  00271	8b 45 88	 mov	 eax, DWORD PTR _y$[ebp]
  00274	50		 push	 eax
  00275	68 34 01 00 00	 push	 308			; 00000134H
  0027a	e8 00 00 00 00	 call	 _V_DrawString
  0027f	83 c4 10	 add	 esp, 16			; 00000010H
  00282	eb 1b		 jmp	 SHORT $LN6@M_DrawUnlo
$LN5@M_DrawUnlo:

; 4716 : 		else
; 4717 : 			V_DrawString(308, y, V_YELLOWMAP, "N");

  00284	68 00 00 00 00	 push	 OFFSET ??_C@_01NANMIPIL@N@
  00289	68 00 00 10 00	 push	 1048576			; 00100000H
  0028e	8b 45 88	 mov	 eax, DWORD PTR _y$[ebp]
  00291	50		 push	 eax
  00292	68 34 01 00 00	 push	 308			; 00000134H
  00297	e8 00 00 00 00	 call	 _V_DrawString
  0029c	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@M_DrawUnlo:

; 4718 : 
; 4719 : 		y += 20;

  0029f	8b 45 88	 mov	 eax, DWORD PTR _y$[ebp]
  002a2	83 c0 14	 add	 eax, 20			; 00000014H
  002a5	89 45 88	 mov	 DWORD PTR _y$[ebp], eax

; 4720 : 	}

  002a8	e9 61 ff ff ff	 jmp	 $LN2@M_DrawUnlo
$LN3@M_DrawUnlo:

; 4721 : }

  002ad	5f		 pop	 edi
  002ae	5e		 pop	 esi
  002af	5b		 pop	 ebx
  002b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b3	33 cd		 xor	 ecx, ebp
  002b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ba	8b e5		 mov	 esp, ebp
  002bc	5d		 pop	 ebp
  002bd	c3		 ret	 0
_M_DrawUnlockChecklist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_LevelSelectWarp
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_LevelSelectWarp PROC					; COMDAT

; 4605 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4606 : 	(void)choice;
; 4607 : 	if (netgame && Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 2c		 je	 SHORT $LN2@M_LevelSel
  00012	e8 00 00 00 00	 call	 _Playing
  00017	85 c0		 test	 eax, eax
  00019	74 23		 je	 SHORT $LN2@M_LevelSel

; 4608 : 	{
; 4609 : 		M_StartMessage(text[NEWGAME],M_ExitGameResponse,MM_YESNO);

  0001b	6a 01		 push	 1
  0001d	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00022	b8 04 00 00 00	 mov	 eax, 4
  00027	6b c8 0a	 imul	 ecx, eax, 10
  0002a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _M_StartMessage
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4610 : 		return;

  00039	e9 ab 00 00 00	 jmp	 $LN6@M_LevelSel
$LN2@M_LevelSel:

; 4611 : 	}
; 4612 : 
; 4613 : 	if (W_CheckNumForName(G_BuildMapName(cv_nextmap.value)) == LUMPERROR)

  0003e	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _G_BuildMapName
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _W_CheckNumForName
  00052	83 c4 04	 add	 esp, 4
  00055	83 f8 ff	 cmp	 eax, -1
  00058	75 05		 jne	 SHORT $LN3@M_LevelSel

; 4614 : 	{
; 4615 : //		CONS_Printf("\2Internal game map '%s' not found\n", G_BuildMapName(cv_nextmap.value));
; 4616 : 		return;

  0005a	e9 8a 00 00 00	 jmp	 $LN6@M_LevelSel
$LN3@M_LevelSel:

; 4617 : 	}
; 4618 : 
; 4619 : 	// Allow character select when level warping from Pandora's Box,
; 4620 : 	// even if you are playing a fully completed save.
; 4621 : 	if (pandoralevelselect)

  0005f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _pandoralevelselect, 0
  00066	74 14		 je	 SHORT $LN4@M_LevelSel

; 4622 : 	{
; 4623 : 		//disassociate our save game since we're using the general level select.
; 4624 : 		fromloadgame = 0;

  00068	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _fromloadgame, 0

; 4625 : 		cursaveslot = -1;

  00072	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _cursaveslot, -1
$LN4@M_LevelSel:

; 4626 : 	}
; 4627 : 
; 4628 : 	if (!fromloadgame)

  0007c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _fromloadgame, 0
  00083	75 17		 jne	 SHORT $LN5@M_LevelSel

; 4629 : 	{
; 4630 : 		PlayerDef.prevMenu = currentMenu;

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0008a	a3 0c 00 00 00	 mov	 DWORD PTR _PlayerDef+12, eax

; 4631 : 		M_SetupNextMenu(&PlayerDef);

  0008f	68 00 00 00 00	 push	 OFFSET _PlayerDef
  00094	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00099	83 c4 04	 add	 esp, 4
$LN5@M_LevelSel:

; 4632 : 	}
; 4633 : 
; 4634 : 	startmap = (INT16)(cv_nextmap.value);

  0009c	66 a1 14 00 00
	00		 mov	 ax, WORD PTR _cv_nextmap+20
  000a2	66 a3 00 00 00
	00		 mov	 WORD PTR _startmap, ax

; 4635 : 
; 4636 : 	fromlevelselect = true;

  000a8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _fromlevelselect, 1

; 4637 : 
; 4638 : 	StartSplitScreenGame = false;

  000b2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 0

; 4639 : 
; 4640 : 	if (fromloadgame)

  000bc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _fromloadgame, 0
  000c3	74 24		 je	 SHORT $LN6@M_LevelSel

; 4641 : 	{
; 4642 : 		G_LoadGame((UINT32)fromloadgame - 1, startmap);

  000c5	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _startmap
  000cc	50		 push	 eax
  000cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _fromloadgame
  000d3	83 e9 01	 sub	 ecx, 1
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 _G_LoadGame
  000dc	83 c4 08	 add	 esp, 8

; 4643 : 		M_ClearMenus(true);

  000df	6a 01		 push	 1
  000e1	e8 00 00 00 00	 call	 _M_ClearMenus
  000e6	83 c4 04	 add	 esp, 4
$LN6@M_LevelSel:

; 4644 : 	}
; 4645 : }

  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
_M_LevelSelectWarp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DestroyRobots
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_DestroyRobots PROC					; COMDAT

; 4587 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4588 : 	(void)choice;
; 4589 : 	if (!(Playing() && gamestate == GS_LEVEL))

  00009	e8 00 00 00 00	 call	 _Playing
  0000e	85 c0		 test	 eax, eax
  00010	74 09		 je	 SHORT $LN3@M_DestroyR
  00012	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00019	74 13		 je	 SHORT $LN2@M_DestroyR
$LN3@M_DestroyR:

; 4590 : 	{
; 4591 : 		M_StartMessage("You need to be playing and in\na level to do this!",NULL,MM_NOTHING);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@ILBFANCE@You?5need?5to?5be?5playing?5and?5in?6a@
  00024	e8 00 00 00 00	 call	 _M_StartMessage
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4592 : 		return;

  0002c	eb 39		 jmp	 SHORT $LN1@M_DestroyR
$LN2@M_DestroyR:

; 4593 : 	}
; 4594 : 
; 4595 : 	if (multiplayer || netgame)

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00035	75 09		 jne	 SHORT $LN5@M_DestroyR
  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0003e	74 13		 je	 SHORT $LN4@M_DestroyR
$LN5@M_DestroyR:

; 4596 : 	{
; 4597 : 		M_StartMessage("You can't do this in\na network game!",NULL,MM_NOTHING);

  00040	6a 00		 push	 0
  00042	6a 00		 push	 0
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DPCPKJLJ@You?5can?8t?5do?5this?5in?6a?5network?5@
  00049	e8 00 00 00 00	 call	 _M_StartMessage
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4598 : 		return;

  00051	eb 14		 jmp	 SHORT $LN1@M_DestroyR
$LN4@M_DestroyR:

; 4599 : 	}
; 4600 : 
; 4601 : 	M_StartMessage("Do you want to destroy all\nrobots in the current level?\n(Y/N)\n",M_DestroyRobotsResponse,MM_YESNO);

  00053	6a 01		 push	 1
  00055	68 00 00 00 00	 push	 OFFSET _M_DestroyRobotsResponse
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@PPKODPLM@Do?5you?5want?5to?5destroy?5all?6robo@
  0005f	e8 00 00 00 00	 call	 _M_StartMessage
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@M_DestroyR:

; 4602 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_M_DestroyRobots ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DestroyRobotsResponse
_TEXT	SEGMENT
_ch$ = 8						; size = 4
_M_DestroyRobotsResponse PROC				; COMDAT

; 4576 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4577 : 	if (ch != 'y' && ch != KEY_ENTER)

  00009	83 7d 08 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  0000d	74 08		 je	 SHORT $LN2@M_DestroyR
  0000f	83 7d 08 0d	 cmp	 DWORD PTR _ch$[ebp], 13	; 0000000dH
  00013	74 02		 je	 SHORT $LN2@M_DestroyR

; 4578 : 		return;

  00015	eb 10		 jmp	 SHORT $LN1@M_DestroyR
$LN2@M_DestroyR:

; 4579 : 
; 4580 : 	// Destroy all robots
; 4581 : 	P_DestroyRobots();

  00017	e8 00 00 00 00	 call	 _P_DestroyRobots
  0001c	90		 npad	 1

; 4582 : 
; 4583 : 	M_ClearMenus(true);

  0001d	6a 01		 push	 1
  0001f	e8 00 00 00 00	 call	 _M_ClearMenus
  00024	83 c4 04	 add	 esp, 4
$LN1@M_DestroyR:

; 4584 : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_M_DestroyRobotsResponse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_GetAllEmeralds
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_GetAllEmeralds PROC					; COMDAT

; 4556 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4557 : 	(void)choice;
; 4558 : 
; 4559 : 	if (!(Playing() && gamestate == GS_LEVEL))

  00009	e8 00 00 00 00	 call	 _Playing
  0000e	85 c0		 test	 eax, eax
  00010	74 09		 je	 SHORT $LN3@M_GetAllEm
  00012	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00019	74 13		 je	 SHORT $LN2@M_GetAllEm
$LN3@M_GetAllEm:

; 4560 : 	{
; 4561 : 		M_StartMessage("You need to be playing and in\na level to do this!",NULL,MM_NOTHING);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@ILBFANCE@You?5need?5to?5be?5playing?5and?5in?6a@
  00024	e8 00 00 00 00	 call	 _M_StartMessage
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4562 : 		return;

  0002c	eb 41		 jmp	 SHORT $LN1@M_GetAllEm
$LN2@M_GetAllEm:

; 4563 : 	}
; 4564 : 
; 4565 : 	if (multiplayer || netgame)

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00035	75 09		 jne	 SHORT $LN5@M_GetAllEm
  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0003e	74 13		 je	 SHORT $LN4@M_GetAllEm
$LN5@M_GetAllEm:

; 4566 : 	{
; 4567 : 		M_StartMessage("You can't do this in\na network game!",NULL,MM_NOTHING);

  00040	6a 00		 push	 0
  00042	6a 00		 push	 0
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DPCPKJLJ@You?5can?8t?5do?5this?5in?6a?5network?5@
  00049	e8 00 00 00 00	 call	 _M_StartMessage
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4568 : 		return;

  00051	eb 1c		 jmp	 SHORT $LN1@M_GetAllEm
$LN4@M_GetAllEm:

; 4569 : 	}
; 4570 : 
; 4571 : 	emeralds = ((EMERALD7)*2)-1;

  00053	b8 7f 00 00 00	 mov	 eax, 127		; 0000007fH
  00058	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 4572 : 	M_StartMessage("You now have all 7 emeralds.",NULL,MM_NOTHING);

  0005e	6a 00		 push	 0
  00060	6a 00		 push	 0
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HMNPBBDK@You?5now?5have?5all?57?5emeralds?4@
  00067	e8 00 00 00 00	 call	 _M_StartMessage
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@M_GetAllEm:

; 4573 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_M_GetAllEmeralds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_UltimateCheat
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_UltimateCheat PROC					; COMDAT

; 4550 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4551 : 	(void)choice;
; 4552 : 	I_Quit ();

  00009	e8 00 00 00 00	 call	 _I_Quit
  0000e	90		 npad	 1

; 4553 : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_M_UltimateCheat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_TwoPControlsMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_TwoPControlsMenu PROC				; COMDAT

; 4506 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4507 : 	(void)choice;
; 4508 : 	M_SetupNextMenu(&TwoPControlsDef);

  00009	68 00 00 00 00	 push	 OFFSET _TwoPControlsDef
  0000e	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00013	83 c4 04	 add	 esp, 4

; 4509 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_M_TwoPControlsMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_OnePControlsMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_OnePControlsMenu PROC				; COMDAT

; 4500 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4501 : 	(void)choice;
; 4502 : 	M_SetupNextMenu(&OnePControlsDef);

  00009	68 00 00 00 00	 push	 OFFSET _OnePControlsDef
  0000e	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00013	83 c4 04	 add	 esp, 4

; 4503 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_M_OnePControlsMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SecretsDataResponse
_TEXT	SEGMENT
_i$ = -4						; size = 4
_ch$ = 8						; size = 4
_M_SecretsDataResponse PROC				; COMDAT

; 4395 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4396 : 	INT32 i;
; 4397 : 	if (ch != 'y' && ch != KEY_ENTER)

  00009	83 7d 08 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  0000d	74 08		 je	 SHORT $LN5@M_SecretsD
  0000f	83 7d 08 0d	 cmp	 DWORD PTR _ch$[ebp], 13	; 0000000dH
  00013	74 02		 je	 SHORT $LN5@M_SecretsD

; 4398 : 		return;

  00015	eb 46		 jmp	 SHORT $LN1@M_SecretsD
$LN5@M_SecretsD:

; 4399 : 
; 4400 : 	// Delete the data
; 4401 : 	for (i = 0; i < MAXEMBLEMS; i++)

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@M_SecretsD
$LN2@M_SecretsD:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_SecretsD:
  00029	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  00030	7d 0d		 jge	 SHORT $LN3@M_SecretsD

; 4402 : 		emblemlocations[i].collected = false;

  00032	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00036	c6 80 0a 00 00
	00 00		 mov	 BYTE PTR _emblemlocations[eax+10], 0
  0003d	eb e1		 jmp	 SHORT $LN2@M_SecretsD
$LN3@M_SecretsD:

; 4403 : 
; 4404 : 	grade = 0;

  0003f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _grade, 0

; 4405 : 	timesbeaten = 0;

  00049	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timesbeaten, 0

; 4406 : 
; 4407 : 	M_ClearMenus(true);

  00053	6a 01		 push	 1
  00055	e8 00 00 00 00	 call	 _M_ClearMenus
  0005a	83 c4 04	 add	 esp, 4
$LN1@M_SecretsD:

; 4408 : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_M_SecretsDataResponse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_TimeDataResponse
_TEXT	SEGMENT
_i$ = -4						; size = 4
_ch$ = 8						; size = 4
_M_TimeDataResponse PROC				; COMDAT

; 4382 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4383 : 	INT32 i;
; 4384 : 	if (ch != 'y' && ch != KEY_ENTER)

  00009	83 7d 08 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  0000d	74 08		 je	 SHORT $LN5@M_TimeData
  0000f	83 7d 08 0d	 cmp	 DWORD PTR _ch$[ebp], 13	; 0000000dH
  00013	74 02		 je	 SHORT $LN5@M_TimeData

; 4385 : 		return;

  00015	eb 38		 jmp	 SHORT $LN1@M_TimeData
$LN5@M_TimeData:

; 4386 : 
; 4387 : 	// Delete the data
; 4388 : 	for (i = 0; i < NUMMAPS; i++)

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@M_TimeData
$LN2@M_TimeData:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_TimeData:
  00029	81 7d fc 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  00030	7d 10		 jge	 SHORT $LN3@M_TimeData

; 4389 : 		timedata[i].time = 0;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00035	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _timedata[eax*4], 0
  00040	eb de		 jmp	 SHORT $LN2@M_TimeData
$LN3@M_TimeData:

; 4390 : 
; 4391 : 	M_SetupNextMenu(&DataOptionsDef);

  00042	68 00 00 00 00	 push	 OFFSET _DataOptionsDef
  00047	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0004c	83 c4 04	 add	 esp, 4
$LN1@M_TimeData:

; 4392 : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_M_TimeDataResponse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_EraseData
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_EraseData PROC					; COMDAT

; 4411 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4412 : 	if (Playing())

  00009	e8 00 00 00 00	 call	 _Playing
  0000e	85 c0		 test	 eax, eax
  00010	74 15		 je	 SHORT $LN2@M_EraseDat

; 4413 : 	{
; 4414 : 		M_StartMessage("A game cannot be running.\nEnd it first.",NULL,MM_NOTHING);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IKKFBPJD@A?5game?5cannot?5be?5running?4?6End?5i@
  0001b	e8 00 00 00 00	 call	 _M_StartMessage
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4415 : 		return;

  00023	eb 32		 jmp	 SHORT $LN5@M_EraseDat

; 4416 : 	}

  00025	eb 30		 jmp	 SHORT $LN5@M_EraseDat
$LN2@M_EraseDat:

; 4417 : 
; 4418 : 	else if (choice == 0)

  00027	83 7d 08 00	 cmp	 DWORD PTR _choice$[ebp], 0
  0002b	75 16		 jne	 SHORT $LN4@M_EraseDat

; 4419 : 		M_StartMessage("Are you sure you want to delete\nthe time attack data?\n(Y/N)\n",M_TimeDataResponse,MM_YESNO);

  0002d	6a 01		 push	 1
  0002f	68 00 00 00 00	 push	 OFFSET _M_TimeDataResponse
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@MDNCDHNK@Are?5you?5sure?5you?5want?5to?5delete@
  00039	e8 00 00 00 00	 call	 _M_StartMessage
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	eb 14		 jmp	 SHORT $LN5@M_EraseDat
$LN4@M_EraseDat:

; 4420 : 	else // 1
; 4421 : 		M_StartMessage("Are you sure you want to delete\nthe secrets data?\n(Y/N)\n",M_SecretsDataResponse,MM_YESNO);

  00043	6a 01		 push	 1
  00045	68 00 00 00 00	 push	 OFFSET _M_SecretsDataResponse
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FBANMDOI@Are?5you?5sure?5you?5want?5to?5delete@
  0004f	e8 00 00 00 00	 call	 _M_StartMessage
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@M_EraseDat:

; 4422 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_M_EraseData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawTimeAttackMenu
_TEXT	SEGMENT
_i$ = -32						; size = 4
_besttime$ = -28					; size = 4
_tics$ = -24						; size = 4
_seconds$ = -20						; size = 4
_minutes$ = -16						; size = 4
_hours$ = -12						; size = 4
_lumpnum$ = -8						; size = 4
_PictureOfLevel$ = -4					; size = 4
_M_DrawTimeAttackMenu PROC				; COMDAT

; 4257 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4258 : 	patch_t *PictureOfLevel;
; 4259 : 	lumpnum_t lumpnum;
; 4260 : 	char hours[4];
; 4261 : 	char minutes[4];
; 4262 : 	char seconds[4];
; 4263 : 	char tics[4];
; 4264 : 	tic_t besttime = 0;

  00009	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _besttime$[ebp], 0

; 4265 : 	INT32 i;
; 4266 : 
; 4267 : 	S_ChangeMusic(mus_racent, true); // Eww, but needed for when user hits escape during demo playback

  00010	6a 01		 push	 1
  00012	68 19 04 00 00	 push	 1049			; 00000419H
  00017	e8 00 00 00 00	 call	 _S_ChangeMusic
  0001c	83 c4 08	 add	 esp, 8

; 4268 : 
; 4269 : 	V_DrawPatchFill(W_CachePatchName("SRB2BACK", PU_CACHE));

  0001f	6a 65		 push	 101			; 00000065H
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_08LPMGDBIJ@SRB2BACK@
  00026	e8 00 00 00 00	 call	 _W_CachePatchName
  0002b	83 c4 08	 add	 esp, 8
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _V_DrawPatchFill
  00034	83 c4 04	 add	 esp, 4

; 4270 : 
; 4271 : 	if (W_CheckNumForName(description[cv_chooseskin.value-1].picname) != LUMPERROR)

  00037	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  0003c	83 e8 01	 sub	 eax, 1
  0003f	69 c8 58 01 00
	00		 imul	 ecx, eax, 344
  00045	81 c1 ff 00 00
	00		 add	 ecx, OFFSET _description+255
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _W_CheckNumForName
  00051	83 c4 04	 add	 esp, 4
  00054	83 f8 ff	 cmp	 eax, -1
  00057	74 31		 je	 SHORT $LN5@M_DrawTime

; 4272 : 		V_DrawSmallScaledPatch(224, 16, 0, W_CachePatchName(description[cv_chooseskin.value-1].picname, PU_CACHE));

  00059	6a 65		 push	 101			; 00000065H
  0005b	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  00060	83 e8 01	 sub	 eax, 1
  00063	69 c8 58 01 00
	00		 imul	 ecx, eax, 344
  00069	81 c1 ff 00 00
	00		 add	 ecx, OFFSET _description+255
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _W_CachePatchName
  00075	83 c4 08	 add	 esp, 8
  00078	50		 push	 eax
  00079	6a 00		 push	 0
  0007b	6a 10		 push	 16			; 00000010H
  0007d	68 e0 00 00 00	 push	 224			; 000000e0H
  00082	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  00087	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@M_DrawTime:

; 4273 : 
; 4274 : 	//  A 160x100 image of the level as entry MAPxxP
; 4275 : 	lumpnum = W_CheckNumForName(va("%sP", G_BuildMapName(cv_nextmap.value)));

  0008a	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _G_BuildMapName
  00095	83 c4 04	 add	 esp, 4
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_03KFFLPELC@?$CFsP@
  0009e	e8 00 00 00 00	 call	 _va
  000a3	83 c4 08	 add	 esp, 8
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _W_CheckNumForName
  000ac	83 c4 04	 add	 esp, 4
  000af	89 45 f8	 mov	 DWORD PTR _lumpnum$[ebp], eax

; 4276 : 
; 4277 : 	if (lumpnum != LUMPERROR)

  000b2	83 7d f8 ff	 cmp	 DWORD PTR _lumpnum$[ebp], -1
  000b6	74 2c		 je	 SHORT $LN6@M_DrawTime

; 4278 : 		PictureOfLevel = W_CachePatchName(va("%sP", G_BuildMapName(cv_nextmap.value)), PU_CACHE);

  000b8	6a 65		 push	 101			; 00000065H
  000ba	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _G_BuildMapName
  000c5	83 c4 04	 add	 esp, 4
  000c8	50		 push	 eax
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_03KFFLPELC@?$CFsP@
  000ce	e8 00 00 00 00	 call	 _va
  000d3	83 c4 08	 add	 esp, 8
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _W_CachePatchName
  000dc	83 c4 08	 add	 esp, 8
  000df	89 45 fc	 mov	 DWORD PTR _PictureOfLevel$[ebp], eax
  000e2	eb 12		 jmp	 SHORT $LN7@M_DrawTime
$LN6@M_DrawTime:

; 4279 : 	else
; 4280 : 		PictureOfLevel = W_CachePatchName("BLANKLVL", PU_CACHE);

  000e4	6a 65		 push	 101			; 00000065H
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_08IKJCNOHF@BLANKLVL@
  000eb	e8 00 00 00 00	 call	 _W_CachePatchName
  000f0	83 c4 08	 add	 esp, 8
  000f3	89 45 fc	 mov	 DWORD PTR _PictureOfLevel$[ebp], eax
$LN7@M_DrawTime:

; 4281 : 
; 4282 : 	V_DrawSmallScaledPatch(208, 128, 0, PictureOfLevel);

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _PictureOfLevel$[ebp]
  000f9	50		 push	 eax
  000fa	6a 00		 push	 0
  000fc	68 80 00 00 00	 push	 128			; 00000080H
  00101	68 d0 00 00 00	 push	 208			; 000000d0H
  00106	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  0010b	83 c4 10	 add	 esp, 16			; 00000010H

; 4283 : 
; 4284 : 	for (i = 0; i < NUMMAPS; i++)

  0010e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00115	eb 09		 jmp	 SHORT $LN4@M_DrawTime
$LN2@M_DrawTime:
  00117	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  0011a	83 c0 01	 add	 eax, 1
  0011d	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawTime:
  00120	81 7d e0 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  00127	7d 31		 jge	 SHORT $LN3@M_DrawTime

; 4285 : 	{
; 4286 : 		if (!(mapheaderinfo[i].timeattack))

  00129	69 45 e0 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  00130	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[eax+308], 0
  00137	75 02		 jne	 SHORT $LN8@M_DrawTime

; 4287 : 			continue;

  00139	eb dc		 jmp	 SHORT $LN2@M_DrawTime
$LN8@M_DrawTime:

; 4288 : 
; 4289 : 		if (timedata[i].time > 0)

  0013b	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  0013e	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _timedata[eax*4], 0
  00146	76 10		 jbe	 SHORT $LN9@M_DrawTime

; 4290 : 			besttime += timedata[i].time;

  00148	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  0014b	8b 4d e4	 mov	 ecx, DWORD PTR _besttime$[ebp]
  0014e	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _timedata[eax*4]
  00155	89 4d e4	 mov	 DWORD PTR _besttime$[ebp], ecx
$LN9@M_DrawTime:

; 4291 : 	}

  00158	eb bd		 jmp	 SHORT $LN2@M_DrawTime
$LN3@M_DrawTime:

; 4292 : 
; 4293 : 	sprintf(hours,   "%02i", G_TicsToHours(besttime));

  0015a	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 _G_TicsToHours
  00163	83 c4 04	 add	 esp, 4
  00166	50		 push	 eax
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_04FDAHLBCH@?$CF02i@
  0016c	8d 4d f4	 lea	 ecx, DWORD PTR _hours$[ebp]
  0016f	51		 push	 ecx
  00170	e8 00 00 00 00	 call	 _sprintf
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4294 : 	sprintf(minutes, "%02i", G_TicsToMinutes(besttime, false));

  00178	6a 00		 push	 0
  0017a	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00183	83 c4 08	 add	 esp, 8
  00186	50		 push	 eax
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_04FDAHLBCH@?$CF02i@
  0018c	8d 4d f0	 lea	 ecx, DWORD PTR _minutes$[ebp]
  0018f	51		 push	 ecx
  00190	e8 00 00 00 00	 call	 _sprintf
  00195	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4295 : 	sprintf(seconds, "%02i", G_TicsToSeconds(besttime));

  00198	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _G_TicsToSeconds
  001a1	83 c4 04	 add	 esp, 4
  001a4	50		 push	 eax
  001a5	68 00 00 00 00	 push	 OFFSET ??_C@_04FDAHLBCH@?$CF02i@
  001aa	8d 4d ec	 lea	 ecx, DWORD PTR _seconds$[ebp]
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 _sprintf
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4296 : 	sprintf(tics,    "%02i", G_TicsToCentiseconds(besttime));

  001b6	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  001bf	83 c4 04	 add	 esp, 4
  001c2	50		 push	 eax
  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_04FDAHLBCH@?$CF02i@
  001c8	8d 4d e8	 lea	 ecx, DWORD PTR _tics$[ebp]
  001cb	51		 push	 ecx
  001cc	e8 00 00 00 00	 call	 _sprintf
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4297 : 
; 4298 : 	V_DrawCenteredString(128, 36, 0, "Best Time Attack:");

  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MEOCEIMN@Best?5Time?5Attack?3@
  001d9	6a 00		 push	 0
  001db	6a 24		 push	 36			; 00000024H
  001dd	68 80 00 00 00	 push	 128			; 00000080H
  001e2	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001e7	83 c4 10	 add	 esp, 16			; 00000010H

; 4299 : 	V_DrawCenteredString(128, 48, 0, va("%s:%s:%s.%s", hours, minutes, seconds, tics));

  001ea	8d 45 e8	 lea	 eax, DWORD PTR _tics$[ebp]
  001ed	50		 push	 eax
  001ee	8d 4d ec	 lea	 ecx, DWORD PTR _seconds$[ebp]
  001f1	51		 push	 ecx
  001f2	8d 55 f0	 lea	 edx, DWORD PTR _minutes$[ebp]
  001f5	52		 push	 edx
  001f6	8d 45 f4	 lea	 eax, DWORD PTR _hours$[ebp]
  001f9	50		 push	 eax
  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GJGJGAFB@?$CFs?3?$CFs?3?$CFs?4?$CFs@
  001ff	e8 00 00 00 00	 call	 _va
  00204	83 c4 14	 add	 esp, 20			; 00000014H
  00207	50		 push	 eax
  00208	6a 00		 push	 0
  0020a	6a 30		 push	 48			; 00000030H
  0020c	68 80 00 00 00	 push	 128			; 00000080H
  00211	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00216	83 c4 10	 add	 esp, 16			; 00000010H

; 4300 : 
; 4301 : 	if (cv_nextmap.value)

  00219	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_nextmap+20, 0
  00220	74 74		 je	 SHORT $LN11@M_DrawTime

; 4302 : 	{
; 4303 : 		if (timedata[cv_nextmap.value-1].time > 0)

  00222	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00227	83 3c 85 fc ff
	ff ff 00	 cmp	 DWORD PTR _timedata[eax*4-4], 0
  0022f	76 65		 jbe	 SHORT $LN11@M_DrawTime

; 4304 : 			V_DrawCenteredString(BASEVIDWIDTH/2, 116, 0, va("Best Time: %i:%02i.%02i", G_TicsToMinutes(timedata[cv_nextmap.value-1].time, true),

  00231	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00236	8b 0c 85 fc ff
	ff ff		 mov	 ecx, DWORD PTR _timedata[eax*4-4]
  0023d	51		 push	 ecx
  0023e	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00243	83 c4 04	 add	 esp, 4
  00246	50		 push	 eax
  00247	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_nextmap+20
  0024d	8b 04 95 fc ff
	ff ff		 mov	 eax, DWORD PTR _timedata[edx*4-4]
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0025a	83 c4 04	 add	 esp, 4
  0025d	50		 push	 eax
  0025e	6a 01		 push	 1
  00260	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_nextmap+20
  00266	8b 14 8d fc ff
	ff ff		 mov	 edx, DWORD PTR _timedata[ecx*4-4]
  0026d	52		 push	 edx
  0026e	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00273	83 c4 08	 add	 esp, 8
  00276	50		 push	 eax
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PJLKBKAB@Best?5Time?3?5?$CFi?3?$CF02i?4?$CF02i@
  0027c	e8 00 00 00 00	 call	 _va
  00281	83 c4 10	 add	 esp, 16			; 00000010H
  00284	50		 push	 eax
  00285	6a 00		 push	 0
  00287	6a 74		 push	 116			; 00000074H
  00289	68 a0 00 00 00	 push	 160			; 000000a0H
  0028e	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00293	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@M_DrawTime:

; 4305 : 				G_TicsToSeconds(timedata[cv_nextmap.value-1].time), G_TicsToCentiseconds(timedata[cv_nextmap.value-1].time)));
; 4306 : 	}
; 4307 : 
; 4308 : 	M_DrawGenericMenu();

  00296	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  0029b	90		 npad	 1

; 4309 : }

  0029c	5f		 pop	 edi
  0029d	5e		 pop	 esi
  0029e	5b		 pop	 ebx
  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c3		 ret	 0
_M_DrawTimeAttackMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ChooseTimeAttack
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ChooseTimeAttack PROC				; COMDAT

; 4331 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4332 : 	(void)choice;
; 4333 : 	emeralds = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 4334 : 	M_ClearMenus(true);

  00011	6a 01		 push	 1
  00013	e8 00 00 00 00	 call	 _M_ClearMenus
  00018	83 c4 04	 add	 esp, 4

; 4335 : 	timeattacking = true;

  0001b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _timeattacking, 1

; 4336 : 	G_RecordDemo("temp");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_04FGEHGIFJ@temp@
  0002a	e8 00 00 00 00	 call	 _G_RecordDemo
  0002f	83 c4 04	 add	 esp, 4

; 4337 : 	G_BeginRecording();

  00032	e8 00 00 00 00	 call	 _G_BeginRecording
  00037	90		 npad	 1

; 4338 : 	G_DeferedInitNew(false, G_BuildMapName(cv_nextmap.value), cv_chooseskin.value-1, false, false);

  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  00041	83 e8 01	 sub	 eax, 1
  00044	50		 push	 eax
  00045	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_nextmap+20
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _G_BuildMapName
  00051	83 c4 04	 add	 esp, 4
  00054	50		 push	 eax
  00055	6a 00		 push	 0
  00057	e8 00 00 00 00	 call	 _G_DeferedInitNew
  0005c	83 c4 14	 add	 esp, 20			; 00000014H

; 4339 : 	timeattacking = true;

  0005f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _timeattacking, 1

; 4340 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_M_ChooseTimeAttack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ChooseTimeAttackNoRecord
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ChooseTimeAttackNoRecord PROC			; COMDAT

; 4316 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4317 : 	(void)choice;
; 4318 : 	emeralds = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 4319 : 	M_ClearMenus(true);

  00011	6a 01		 push	 1
  00013	e8 00 00 00 00	 call	 _M_ClearMenus
  00018	83 c4 04	 add	 esp, 4

; 4320 : 	timeattacking = true;

  0001b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _timeattacking, 1

; 4321 : 	remove(va("%s"PATHSEP"temp.lmp", srb2home));

  00025	68 00 00 00 00	 push	 OFFSET _srb2home
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HEGGCDPF@?$CFs?2temp?4lmp@
  0002f	e8 00 00 00 00	 call	 _va
  00034	83 c4 08	 add	 esp, 8
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _remove
  0003d	83 c4 04	 add	 esp, 4

; 4322 : 	G_DeferedInitNew(false, G_BuildMapName(cv_nextmap.value), cv_chooseskin.value-1, false, false);

  00040	6a 00		 push	 0
  00042	6a 00		 push	 0
  00044	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  00049	83 e8 01	 sub	 eax, 1
  0004c	50		 push	 eax
  0004d	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_nextmap+20
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _G_BuildMapName
  00059	83 c4 04	 add	 esp, 4
  0005c	50		 push	 eax
  0005d	6a 00		 push	 0
  0005f	e8 00 00 00 00	 call	 _G_DeferedInitNew
  00064	83 c4 14	 add	 esp, 20			; 00000014H

; 4323 : 	timeattacking = true;

  00067	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _timeattacking, 1

; 4324 : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_M_ChooseTimeAttackNoRecord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ReplayTimeAttack
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ReplayTimeAttack PROC				; COMDAT

; 4347 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4348 : 	(void)choice;
; 4349 : 	M_ClearMenus(true);

  00009	6a 01		 push	 1
  0000b	e8 00 00 00 00	 call	 _M_ClearMenus
  00010	83 c4 04	 add	 esp, 4

; 4350 : 	G_DoPlayDemo(va("%s"PATHSEP"replay"PATHSEP"%s"PATHSEP"%s-%02d", srb2home, timeattackfolder, G_BuildMapName(cv_nextmap.value), cv_chooseskin.value-1));

  00013	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  00018	83 e8 01	 sub	 eax, 1
  0001b	50		 push	 eax
  0001c	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_nextmap+20
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 _G_BuildMapName
  00028	83 c4 04	 add	 esp, 4
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET _timeattackfolder
  00031	68 00 00 00 00	 push	 OFFSET _srb2home
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IKODIFFP@?$CFs?2replay?2?$CFs?2?$CFs?9?$CF02d@
  0003b	e8 00 00 00 00	 call	 _va
  00040	83 c4 14	 add	 esp, 20			; 00000014H
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _G_DoPlayDemo
  00049	83 c4 04	 add	 esp, 4

; 4351 : 
; 4352 : 	timeattacking = true;

  0004c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _timeattacking, 1

; 4353 : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_M_ReplayTimeAttack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_CustomWarp
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_CustomWarp PROC					; COMDAT

; 4127 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4128 : 	if (netgame && Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 29		 je	 SHORT $LN2@M_CustomWa
  00012	e8 00 00 00 00	 call	 _Playing
  00017	85 c0		 test	 eax, eax
  00019	74 20		 je	 SHORT $LN2@M_CustomWa

; 4129 : 	{
; 4130 : 		M_StartMessage(text[NEWGAME],M_ExitGameResponse,MM_YESNO);

  0001b	6a 01		 push	 1
  0001d	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00022	b8 04 00 00 00	 mov	 eax, 4
  00027	6b c8 0a	 imul	 ecx, eax, 10
  0002a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _M_StartMessage
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4131 : 		return;

  00039	eb 3b		 jmp	 SHORT $LN1@M_CustomWa
$LN2@M_CustomWa:

; 4132 : 	}
; 4133 : 
; 4134 : 	startmap = (INT16)(customsecretinfo[choice-1].variable);

  0003b	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  0003e	83 e8 01	 sub	 eax, 1
  00041	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  00047	66 8b 91 90 00
	00 00		 mov	 dx, WORD PTR _customsecretinfo[ecx+144]
  0004e	66 89 15 00 00
	00 00		 mov	 WORD PTR _startmap, dx

; 4135 : 
; 4136 : 	PlayerDef.prevMenu = currentMenu;

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0005a	a3 0c 00 00 00	 mov	 DWORD PTR _PlayerDef+12, eax

; 4137 : 	M_SetupNextMenu(&PlayerDef);

  0005f	68 00 00 00 00	 push	 OFFSET _PlayerDef
  00064	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00069	83 c4 04	 add	 esp, 4

; 4138 : 
; 4139 : 	StartSplitScreenGame = false;

  0006c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 0
$LN1@M_CustomWa:

; 4140 : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_M_CustomWarp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_NAGZGame
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_NAGZGame PROC					; COMDAT

; 4110 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4111 : 	(void)choice;
; 4112 : 	if (netgame && Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 29		 je	 SHORT $LN2@M_NAGZGame
  00012	e8 00 00 00 00	 call	 _Playing
  00017	85 c0		 test	 eax, eax
  00019	74 20		 je	 SHORT $LN2@M_NAGZGame

; 4113 : 	{
; 4114 : 		M_StartMessage(text[NEWGAME],M_ExitGameResponse,MM_YESNO);

  0001b	6a 01		 push	 1
  0001d	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00022	b8 04 00 00 00	 mov	 eax, 4
  00027	6b c8 0a	 imul	 ecx, eax, 10
  0002a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _M_StartMessage
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4115 : 		return;

  00039	eb 2c		 jmp	 SHORT $LN1@M_NAGZGame
$LN2@M_NAGZGame:

; 4116 : 	}
; 4117 : 
; 4118 : 	startmap = 40;

  0003b	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00040	66 a3 00 00 00
	00		 mov	 WORD PTR _startmap, ax

; 4119 : 
; 4120 : 	PlayerDef.prevMenu = currentMenu;

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0004b	a3 0c 00 00 00	 mov	 DWORD PTR _PlayerDef+12, eax

; 4121 : 	M_SetupNextMenu(&PlayerDef);

  00050	68 00 00 00 00	 push	 OFFSET _PlayerDef
  00055	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0005a	83 c4 04	 add	 esp, 4

; 4122 : 
; 4123 : 	StartSplitScreenGame = false;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 0
$LN1@M_NAGZGame:

; 4124 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_M_NAGZGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_MarioGame
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_MarioGame PROC					; COMDAT

; 4093 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4094 : 	(void)choice;
; 4095 : 	if (netgame && Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 29		 je	 SHORT $LN2@M_MarioGam
  00012	e8 00 00 00 00	 call	 _Playing
  00017	85 c0		 test	 eax, eax
  00019	74 20		 je	 SHORT $LN2@M_MarioGam

; 4096 : 	{
; 4097 : 		M_StartMessage(text[NEWGAME],M_ExitGameResponse,MM_YESNO);

  0001b	6a 01		 push	 1
  0001d	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00022	b8 04 00 00 00	 mov	 eax, 4
  00027	6b c8 0a	 imul	 ecx, eax, 10
  0002a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _M_StartMessage
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4098 : 		return;

  00039	eb 2c		 jmp	 SHORT $LN1@M_MarioGam
$LN2@M_MarioGam:

; 4099 : 	}
; 4100 : 
; 4101 : 	startmap = 30;

  0003b	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  00040	66 a3 00 00 00
	00		 mov	 WORD PTR _startmap, ax

; 4102 : 
; 4103 : 	PlayerDef.prevMenu = currentMenu;

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0004b	a3 0c 00 00 00	 mov	 DWORD PTR _PlayerDef+12, eax

; 4104 : 	M_SetupNextMenu(&PlayerDef);

  00050	68 00 00 00 00	 push	 OFFSET _PlayerDef
  00055	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0005a	83 c4 04	 add	 esp, 4

; 4105 : 
; 4106 : 	StartSplitScreenGame = false;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 0
$LN1@M_MarioGam:

; 4107 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_M_MarioGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_NightsGame
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_NightsGame PROC					; COMDAT

; 4076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4077 : 	(void)choice;
; 4078 : 	if (netgame && Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 29		 je	 SHORT $LN2@M_NightsGa
  00012	e8 00 00 00 00	 call	 _Playing
  00017	85 c0		 test	 eax, eax
  00019	74 20		 je	 SHORT $LN2@M_NightsGa

; 4079 : 	{
; 4080 : 		M_StartMessage(text[NEWGAME],M_ExitGameResponse,MM_YESNO);

  0001b	6a 01		 push	 1
  0001d	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00022	b8 04 00 00 00	 mov	 eax, 4
  00027	6b c8 0a	 imul	 ecx, eax, 10
  0002a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _M_StartMessage
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4081 : 		return;

  00039	eb 2c		 jmp	 SHORT $LN1@M_NightsGa
$LN2@M_NightsGa:

; 4082 : 	}
; 4083 : 
; 4084 : 	startmap = 29;

  0003b	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  00040	66 a3 00 00 00
	00		 mov	 WORD PTR _startmap, ax

; 4085 : 
; 4086 : 	PlayerDef.prevMenu = currentMenu;

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0004b	a3 0c 00 00 00	 mov	 DWORD PTR _PlayerDef+12, eax

; 4087 : 	M_SetupNextMenu(&PlayerDef);

  00050	68 00 00 00 00	 push	 OFFSET _PlayerDef
  00055	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0005a	83 c4 04	 add	 esp, 4

; 4088 : 
; 4089 : 	StartSplitScreenGame = false;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 0
$LN1@M_NightsGa:

; 4090 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_M_NightsGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SRB1Remake
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_SRB1Remake PROC					; COMDAT

; 4059 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4060 : 	(void)choice;
; 4061 : 	if (netgame && Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 29		 je	 SHORT $LN2@M_SRB1Rema
  00012	e8 00 00 00 00	 call	 _Playing
  00017	85 c0		 test	 eax, eax
  00019	74 20		 je	 SHORT $LN2@M_SRB1Rema

; 4062 : 	{
; 4063 : 		M_StartMessage(text[NEWGAME],M_ExitGameResponse,MM_YESNO);

  0001b	6a 01		 push	 1
  0001d	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00022	b8 04 00 00 00	 mov	 eax, 4
  00027	6b c8 0a	 imul	 ecx, eax, 10
  0002a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _M_StartMessage
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4064 : 		return;

  00039	eb 2c		 jmp	 SHORT $LN1@M_SRB1Rema
$LN2@M_SRB1Rema:

; 4065 : 	}
; 4066 : 
; 4067 : 	startmap = 101;

  0003b	b8 65 00 00 00	 mov	 eax, 101		; 00000065H
  00040	66 a3 00 00 00
	00		 mov	 WORD PTR _startmap, ax

; 4068 : 
; 4069 : 	PlayerDef.prevMenu = currentMenu;

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0004b	a3 0c 00 00 00	 mov	 DWORD PTR _PlayerDef+12, eax

; 4070 : 	M_SetupNextMenu(&PlayerDef);

  00050	68 00 00 00 00	 push	 OFFSET _PlayerDef
  00055	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0005a	83 c4 04	 add	 esp, 4

; 4071 : 
; 4072 : 	StartSplitScreenGame = false;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 0
$LN1@M_SRB1Rema:

; 4073 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_M_SRB1Remake ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_GetLevelEmblem
_TEXT	SEGMENT
_i$ = -4						; size = 4
_mapnum$ = 8						; size = 4
_player$ = 12						; size = 4
_M_GetLevelEmblem PROC					; COMDAT

; 3511 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3512 : 	INT32 i;
; 3513 : 
; 3514 : 	for (i = 0; i < numemblems; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@M_GetLevel
$LN2@M_GetLevel:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_GetLevel:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numemblems
  00024	7d 2d		 jge	 SHORT $LN3@M_GetLevel

; 3515 : 	{
; 3516 : 		if (emblemlocations[i].level == mapnum
; 3517 : 			&& emblemlocations[i].player == player)

  00026	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0002a	0f bf 88 08 00
	00 00		 movsx	 ecx, WORD PTR _emblemlocations[eax+8]
  00031	3b 4d 08	 cmp	 ecx, DWORD PTR _mapnum$[ebp]
  00034	75 1b		 jne	 SHORT $LN5@M_GetLevel
  00036	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0003a	0f b6 88 06 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+6]
  00041	3b 4d 0c	 cmp	 ecx, DWORD PTR _player$[ebp]
  00044	75 0b		 jne	 SHORT $LN5@M_GetLevel

; 3518 : 			return &emblemlocations[i];

  00046	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0004a	05 00 00 00 00	 add	 eax, OFFSET _emblemlocations
  0004f	eb 04		 jmp	 SHORT $LN1@M_GetLevel
$LN5@M_GetLevel:

; 3519 : 	}

  00051	eb bf		 jmp	 SHORT $LN2@M_GetLevel
$LN3@M_GetLevel:

; 3520 : 	return NULL;

  00053	33 c0		 xor	 eax, eax
$LN1@M_GetLevel:

; 3521 : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_M_GetLevelEmblem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SetupChoosePlayer
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_SetupChoosePlayer PROC				; COMDAT

; 3357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3358 : 	(void)choice;
; 3359 : 	if (Playing() == false)

  00009	e8 00 00 00 00	 call	 _Playing
  0000e	85 c0		 test	 eax, eax
  00010	75 15		 jne	 SHORT $LN2@M_SetupCho

; 3360 : 	{
; 3361 : 		S_StopMusic();

  00012	e8 00 00 00 00	 call	 _S_StopMusic
  00017	90		 npad	 1

; 3362 : 		S_ChangeMusic(mus_chrsel, true);

  00018	6a 01		 push	 1
  0001a	68 17 04 00 00	 push	 1047			; 00000417H
  0001f	e8 00 00 00 00	 call	 _S_ChangeMusic
  00024	83 c4 08	 add	 esp, 8
$LN2@M_SetupCho:

; 3363 : 	}
; 3364 : 
; 3365 : 	M_SetupNextMenu (&PlayerDef);

  00027	68 00 00 00 00	 push	 OFFSET _PlayerDef
  0002c	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00031	83 c4 04	 add	 esp, 4

; 3366 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
_M_SetupChoosePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ChoosePlayer
_TEXT	SEGMENT
_skinnum$ = -4						; size = 4
_choice$ = 8						; size = 4
_M_ChoosePlayer PROC					; COMDAT

; 4144 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4145 : 	INT32 skinnum;
; 4146 : 
; 4147 : 	M_ClearMenus(true);

  00009	6a 01		 push	 1
  0000b	e8 00 00 00 00	 call	 _M_ClearMenus
  00010	83 c4 04	 add	 esp, 4

; 4148 : 
; 4149 : 	strlwr(description[choice].skinname);

  00013	69 45 08 58 01
	00 00		 imul	 eax, DWORD PTR _choice$[ebp], 344
  0001a	05 48 01 00 00	 add	 eax, OFFSET _description+328
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _strlwr
  00025	83 c4 04	 add	 esp, 4

; 4150 : 
; 4151 : 	skinnum = R_SkinAvailable(description[choice].skinname);

  00028	69 45 08 58 01
	00 00		 imul	 eax, DWORD PTR _choice$[ebp], 344
  0002f	05 48 01 00 00	 add	 eax, OFFSET _description+328
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _R_SkinAvailable
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 45 fc	 mov	 DWORD PTR _skinnum$[ebp], eax

; 4152 : 
; 4153 : 	if (startmap != spstage_start)

  00040	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _startmap
  00047	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _spstage_start
  0004e	3b c1		 cmp	 eax, ecx
  00050	74 0a		 je	 SHORT $LN2@M_ChoosePl

; 4154 : 		cursaveslot = -1;

  00052	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _cursaveslot, -1
$LN2@M_ChoosePl:

; 4155 : 
; 4156 : 	lastmapsaved = 0;

  0005c	33 c0		 xor	 eax, eax
  0005e	66 a3 00 00 00
	00		 mov	 WORD PTR _lastmapsaved, ax

; 4157 : 	gamecomplete = false;

  00064	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gamecomplete, 0

; 4158 : 
; 4159 : 	G_DeferedInitNew(ultmode, G_BuildMapName(startmap), skinnum, StartSplitScreenGame, fromlevelselect);

  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR _fromlevelselect
  00073	50		 push	 eax
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _StartSplitScreenGame
  0007a	51		 push	 ecx
  0007b	8b 55 fc	 mov	 edx, DWORD PTR _skinnum$[ebp]
  0007e	52		 push	 edx
  0007f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _startmap
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _G_BuildMapName
  0008c	83 c4 04	 add	 esp, 4
  0008f	50		 push	 eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ultmode
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _G_DeferedInitNew
  0009c	83 c4 14	 add	 esp, 20			; 00000014H

; 4160 : 	COM_BufAddText("dummyconsvar 1\n"); // G_DeferedInitNew doesn't do this

  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@
  000a4	e8 00 00 00 00	 call	 _COM_BufAddText
  000a9	83 c4 04	 add	 esp, 4

; 4161 : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_M_ChoosePlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_QuitChoosePlayerMenu
_TEXT	SEGMENT
_M_QuitChoosePlayerMenu PROC				; COMDAT

; 3460 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3461 : 	// Stop music
; 3462 : 	S_StopMusic();

  00009	e8 00 00 00 00	 call	 _S_StopMusic
  0000e	90		 npad	 1

; 3463 : 	return true;

  0000f	b8 01 00 00 00	 mov	 eax, 1

; 3464 : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_M_QuitChoosePlayerMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawSetupChoosePlayerMenu
_TEXT	SEGMENT
_alpha$1 = -17						; size = 1
_i$2 = -16						; size = 4
_patch$ = -12						; size = 4
_my$ = -8						; size = 4
_mx$ = -4						; size = 4
_M_DrawSetupChoosePlayerMenu PROC			; COMDAT

; 3372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3373 : 	INT32      mx = PlayerDef.x, my = PlayerDef.y;

  00009	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _PlayerDef+24
  00010	89 45 fc	 mov	 DWORD PTR _mx$[ebp], eax
  00013	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _PlayerDef+26
  0001a	89 45 f8	 mov	 DWORD PTR _my$[ebp], eax

; 3374 : 	patch_t *patch;
; 3375 : 
; 3376 : 	// Black BG
; 3377 : 	V_DrawFill(0, 0, vid.width, vid.height, 31);

  0001d	6a 1f		 push	 31			; 0000001fH
  0001f	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00024	50		 push	 eax
  00025	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  0002b	51		 push	 ecx
  0002c	6a 00		 push	 0
  0002e	6a 00		 push	 0
  00030	e8 00 00 00 00	 call	 _V_DrawFill
  00035	83 c4 14	 add	 esp, 20			; 00000014H

; 3378 : 
; 3379 : 	{
; 3380 : 		// Compact the menu
; 3381 : 		INT32 i;
; 3382 : 		UINT8 alpha = 0;

  00038	c6 45 ef 00	 mov	 BYTE PTR _alpha$1[ebp], 0

; 3383 : 		for (i = 0; i < currentMenu->numitems; i++)

  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN4@M_DrawSetu
$LN2@M_DrawSetu:
  00045	8b 45 f0	 mov	 eax, DWORD PTR _i$2[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 f0	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@M_DrawSetu:
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00053	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00057	39 4d f0	 cmp	 DWORD PTR _i$2[ebp], ecx
  0005a	7d 4d		 jge	 SHORT $LN3@M_DrawSetu

; 3384 : 		{
; 3385 : 			if (currentMenu->menuitems[i].status == 0
; 3386 : 			|| currentMenu->menuitems[i].status == IT_DISABLED)

  0005c	6b 45 f0 14	 imul	 eax, DWORD PTR _i$2[ebp], 20
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00066	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00069	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  0006d	85 c0		 test	 eax, eax
  0006f	74 16		 je	 SHORT $LN6@M_DrawSetu
  00071	6b 45 f0 14	 imul	 eax, DWORD PTR _i$2[ebp], 20
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0007b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0007e	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00082	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00085	75 02		 jne	 SHORT $LN5@M_DrawSetu
$LN6@M_DrawSetu:

; 3387 : 				continue;

  00087	eb bc		 jmp	 SHORT $LN2@M_DrawSetu
$LN5@M_DrawSetu:

; 3388 : 
; 3389 : 			currentMenu->menuitems[i].alphaKey = alpha;

  00089	6b 45 f0 14	 imul	 eax, DWORD PTR _i$2[ebp], 20
  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00093	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00096	8a 4d ef	 mov	 cl, BYTE PTR _alpha$1[ebp]
  00099	88 4c 02 10	 mov	 BYTE PTR [edx+eax+16], cl

; 3390 : 			alpha += 8;

  0009d	0f b6 45 ef	 movzx	 eax, BYTE PTR _alpha$1[ebp]
  000a1	83 c0 08	 add	 eax, 8
  000a4	88 45 ef	 mov	 BYTE PTR _alpha$1[ebp], al

; 3391 : 		}

  000a7	eb 9c		 jmp	 SHORT $LN2@M_DrawSetu
$LN3@M_DrawSetu:

; 3392 : 	}
; 3393 : 
; 3394 : 	// use generic drawer for cursor, items and title
; 3395 : 	M_DrawGenericMenu();

  000a9	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  000ae	90		 npad	 1

; 3396 : 
; 3397 : 	// TEXT BOX!
; 3398 : 	// For the character
; 3399 : 	M_DrawTextBox(mx+152,my, 16, 16);

  000af	6a 10		 push	 16			; 00000010H
  000b1	6a 10		 push	 16			; 00000010H
  000b3	8b 45 f8	 mov	 eax, DWORD PTR _my$[ebp]
  000b6	50		 push	 eax
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _mx$[ebp]
  000ba	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 _M_DrawTextBox
  000c6	83 c4 10	 add	 esp, 16			; 00000010H

; 3400 : 
; 3401 : 	// For description
; 3402 : 	M_DrawTextBox(mx-24, my+72, 20, 10);

  000c9	6a 0a		 push	 10			; 0000000aH
  000cb	6a 14		 push	 20			; 00000014H
  000cd	8b 45 f8	 mov	 eax, DWORD PTR _my$[ebp]
  000d0	83 c0 48	 add	 eax, 72			; 00000048H
  000d3	50		 push	 eax
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _mx$[ebp]
  000d7	83 e9 18	 sub	 ecx, 24			; 00000018H
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _M_DrawTextBox
  000e0	83 c4 10	 add	 esp, 16			; 00000010H

; 3403 : 
; 3404 : 	patch = W_CachePatchName(description[itemOn].picname, PU_CACHE);

  000e3	6a 65		 push	 101			; 00000065H
  000e5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  000ec	69 c8 58 01 00
	00		 imul	 ecx, eax, 344
  000f2	81 c1 ff 00 00
	00		 add	 ecx, OFFSET _description+255
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 _W_CachePatchName
  000fe	83 c4 08	 add	 esp, 8
  00101	89 45 f4	 mov	 DWORD PTR _patch$[ebp], eax

; 3405 : 
; 3406 : 	V_DrawString(mx-16, my+80, V_YELLOWMAP, "Speed:\nAbility:\nNotes:");

  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LGMFNFJP@Speed?3?6Ability?3?6Notes?3@
  00109	68 00 00 10 00	 push	 1048576			; 00100000H
  0010e	8b 45 f8	 mov	 eax, DWORD PTR _my$[ebp]
  00111	83 c0 50	 add	 eax, 80			; 00000050H
  00114	50		 push	 eax
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _mx$[ebp]
  00118	83 e9 10	 sub	 ecx, 16			; 00000010H
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 _V_DrawString
  00121	83 c4 10	 add	 esp, 16			; 00000010H

; 3407 : 
; 3408 : 	V_DrawScaledPatch(mx+160,my+8,0,patch);

  00124	8b 45 f4	 mov	 eax, DWORD PTR _patch$[ebp]
  00127	50		 push	 eax
  00128	6a 00		 push	 0
  0012a	8b 4d f8	 mov	 ecx, DWORD PTR _my$[ebp]
  0012d	83 c1 08	 add	 ecx, 8
  00130	51		 push	 ecx
  00131	8b 55 fc	 mov	 edx, DWORD PTR _mx$[ebp]
  00134	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00140	83 c4 10	 add	 esp, 16			; 00000010H

; 3409 : 	V_DrawString(mx-16, my+80, 0, description[itemOn].info);

  00143	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0014a	69 c8 58 01 00
	00		 imul	 ecx, eax, 344
  00150	81 c1 00 00 00
	00		 add	 ecx, OFFSET _description
  00156	51		 push	 ecx
  00157	6a 00		 push	 0
  00159	8b 55 f8	 mov	 edx, DWORD PTR _my$[ebp]
  0015c	83 c2 50	 add	 edx, 80			; 00000050H
  0015f	52		 push	 edx
  00160	8b 45 fc	 mov	 eax, DWORD PTR _mx$[ebp]
  00163	83 e8 10	 sub	 eax, 16			; 00000010H
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 _V_DrawString
  0016c	83 c4 10	 add	 esp, 16			; 00000010H

; 3410 : }

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
_M_DrawSetupChoosePlayerMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_QuitMultiPlayerMenu
_TEXT	SEGMENT
$T1 = -72						; size = 4
_l$ = -4						; size = 4
_M_QuitMultiPlayerMenu PROC				; COMDAT

; 3337 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3338 : 	size_t l;
; 3339 : 	// send name if changed
; 3340 : 	if (strcmp(setupm_name, setupm_cvname->string))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvname
  0000e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00011	51		 push	 ecx
  00012	68 00 00 00 00	 push	 OFFSET _setupm_name
  00017	e8 00 00 00 00	 call	 _strcmp
  0001c	83 c4 08	 add	 esp, 8
  0001f	85 c0		 test	 eax, eax
  00021	74 76		 je	 SHORT $LN5@M_QuitMult

; 3341 : 	{
; 3342 : 		// remove trailing whitespaces
; 3343 : 		for (l= strlen(setupm_name)-1;

  00023	68 00 00 00 00	 push	 OFFSET _setupm_name
  00028	e8 00 00 00 00	 call	 _strlen
  0002d	83 c4 04	 add	 esp, 4
  00030	83 e8 01	 sub	 eax, 1
  00033	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax
  00036	eb 09		 jmp	 SHORT $LN4@M_QuitMult
$LN2@M_QuitMult:

; 3344 : 		    (signed)l >= 0 && setupm_name[l] ==' '; l--)

  00038	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  0003b	83 e8 01	 sub	 eax, 1
  0003e	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax
$LN4@M_QuitMult:
  00041	83 7d fc 00	 cmp	 DWORD PTR _l$[ebp], 0
  00045	7c 2f		 jl	 SHORT $LN3@M_QuitMult
  00047	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  0004a	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _setupm_name[eax]
  00051	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00054	75 20		 jne	 SHORT $LN3@M_QuitMult

; 3345 : 			setupm_name[l] =0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  00059	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  0005c	83 7d b8 16	 cmp	 DWORD PTR $T1[ebp], 22	; 00000016H
  00060	73 02		 jae	 SHORT $LN7@M_QuitMult
  00062	eb 06		 jmp	 SHORT $LN8@M_QuitMult
$LN7@M_QuitMult:
  00064	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00069	90		 npad	 1
$LN8@M_QuitMult:
  0006a	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  0006d	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _setupm_name[ecx], 0
  00074	eb c2		 jmp	 SHORT $LN2@M_QuitMult
$LN3@M_QuitMult:

; 3346 : 		COM_BufAddText (va("%s \"%s\"\n",setupm_cvname->name,setupm_name));

  00076	68 00 00 00 00	 push	 OFFSET _setupm_name
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvname
  00080	8b 08		 mov	 ecx, DWORD PTR [eax]
  00082	51		 push	 ecx
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_08MHBLPCGN@?$CFs?5?$CC?$CFs?$CC?6@
  00088	e8 00 00 00 00	 call	 _va
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _COM_BufAddText
  00096	83 c4 04	 add	 esp, 4
$LN5@M_QuitMult:

; 3347 : 	}
; 3348 : 	return true;

  00099	b8 01 00 00 00	 mov	 eax, 1
$LN1@M_QuitMult:

; 3349 : }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_M_QuitMultiPlayerMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Setup2PControlsMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Setup2PControlsMenu PROC				; COMDAT

; 6202 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6203 : 	(void)choice;
; 6204 : 	setupcontrols_secondaryplayer = true;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _setupcontrols_secondaryplayer, 1

; 6205 : 	setupcontrols = gamecontrolbis;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupcontrols, OFFSET _gamecontrolbis

; 6206 : 	currentMenu->lastOn = itemOn;

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00022	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _itemOn
  00029	66 89 48 1c	 mov	 WORD PTR [eax+28], cx

; 6207 : 	M_SetupNextMenu(&ControlDef);

  0002d	68 00 00 00 00	 push	 OFFSET _ControlDef
  00032	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00037	83 c4 04	 add	 esp, 4

; 6208 : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_M_Setup2PControlsMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Setup1PControlsMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Setup1PControlsMenu PROC				; COMDAT

; 6193 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6194 : 	(void)choice;
; 6195 : 	setupcontrols_secondaryplayer = false;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupcontrols_secondaryplayer, 0

; 6196 : 	setupcontrols = gamecontrol;        // was called from main Options (for console player, then)

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupcontrols, OFFSET _gamecontrol

; 6197 : 	currentMenu->lastOn = itemOn;

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00022	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _itemOn
  00029	66 89 48 1c	 mov	 WORD PTR [eax+28], cx

; 6198 : 	M_SetupNextMenu(&ControlDef);

  0002d	68 00 00 00 00	 push	 OFFSET _ControlDef
  00032	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00037	83 c4 04	 add	 esp, 4

; 6199 : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_M_Setup1PControlsMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_HandleSetupMultiPlayer
_TEXT	SEGMENT
tv65 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_myskin$ = -12						; size = 4
_exitmenu$ = -8						; size = 4
_l$ = -4						; size = 4
_choice$ = 8						; size = 4
_M_HandleSetupMultiPlayer PROC				; COMDAT

; 3255 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3256 : 	size_t   l;
; 3257 : 	boolean  exitmenu = false;  // exit to previous menu and send name change

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _exitmenu$[ebp], 0

; 3258 : 	INT32      myskin = setupm_cvskin->value;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvskin
  00015	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00018	89 4d f4	 mov	 DWORD PTR _myskin$[ebp], ecx

; 3259 : 
; 3260 : 	switch (choice)

  0001b	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  0001e	89 45 a8	 mov	 DWORD PTR tv65[ebp], eax
  00021	8b 4d a8	 mov	 ecx, DWORD PTR tv65[ebp]
  00024	83 e9 08	 sub	 ecx, 8
  00027	89 4d a8	 mov	 DWORD PTR tv65[ebp], ecx
  0002a	81 7d a8 e6 00
	00 00		 cmp	 DWORD PTR tv65[ebp], 230 ; 000000e6H
  00031	0f 87 37 01 00
	00		 ja	 $LN17@M_HandleSe
  00037	8b 55 a8	 mov	 edx, DWORD PTR tv65[ebp]
  0003a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN32@M_HandleSe[edx]
  00041	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN33@M_HandleSe[eax*4]
$LN4@M_HandleSe:

; 3261 : 	{
; 3262 : 		case KEY_DOWNARROW:
; 3263 : 			S_StartSound(NULL,sfx_menu1); // Tails

  00048	6a 67		 push	 103			; 00000067H
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 _S_StartSound
  00051	83 c4 08	 add	 esp, 8

; 3264 : 			if (itemOn+1 >= SetupMultiPlayerDef.numitems)

  00054	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0005b	83 c0 01	 add	 eax, 1
  0005e	0f bf 0d 08 00
	00 00		 movsx	 ecx, WORD PTR _SetupMultiPlayerDef+8
  00065	3b c1		 cmp	 eax, ecx
  00067	7c 0a		 jl	 SHORT $LN5@M_HandleSe

; 3265 : 				itemOn = 0;

  00069	33 c0		 xor	 eax, eax
  0006b	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax
  00071	eb 10		 jmp	 SHORT $LN6@M_HandleSe
$LN5@M_HandleSe:

; 3266 : 			else itemOn++;

  00073	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _itemOn
  00079	66 83 c0 01	 add	 ax, 1
  0007d	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax
$LN6@M_HandleSe:

; 3267 : 			break;

  00083	e9 4e 01 00 00	 jmp	 $LN2@M_HandleSe
$LN7@M_HandleSe:

; 3268 : 
; 3269 : 		case KEY_UPARROW:
; 3270 : 			S_StartSound(NULL,sfx_menu1); // Tails

  00088	6a 67		 push	 103			; 00000067H
  0008a	6a 00		 push	 0
  0008c	e8 00 00 00 00	 call	 _S_StartSound
  00091	83 c4 08	 add	 esp, 8

; 3271 : 			if (!itemOn)

  00094	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0009b	85 c0		 test	 eax, eax
  0009d	75 12		 jne	 SHORT $LN8@M_HandleSe

; 3272 : 				itemOn = (INT16)(SetupMultiPlayerDef.numitems-1);

  0009f	0f bf 05 08 00
	00 00		 movsx	 eax, WORD PTR _SetupMultiPlayerDef+8
  000a6	83 e8 01	 sub	 eax, 1
  000a9	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax
  000af	eb 10		 jmp	 SHORT $LN9@M_HandleSe
$LN8@M_HandleSe:

; 3273 : 			else itemOn--;

  000b1	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _itemOn
  000b7	66 83 e8 01	 sub	 ax, 1
  000bb	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax
$LN9@M_HandleSe:

; 3274 : 			break;

  000c1	e9 10 01 00 00	 jmp	 $LN2@M_HandleSe
$LN10@M_HandleSe:

; 3275 : 
; 3276 : 		case KEY_LEFTARROW:
; 3277 : 			if (itemOn == 2)       //player skin

  000c6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  000cd	83 f8 02	 cmp	 eax, 2
  000d0	75 15		 jne	 SHORT $LN11@M_HandleSe

; 3278 : 			{
; 3279 : 				S_StartSound(NULL,sfx_menu1); // Tails

  000d2	6a 67		 push	 103			; 00000067H
  000d4	6a 00		 push	 0
  000d6	e8 00 00 00 00	 call	 _S_StartSound
  000db	83 c4 08	 add	 esp, 8

; 3280 : 				myskin--;

  000de	8b 45 f4	 mov	 eax, DWORD PTR _myskin$[ebp]
  000e1	83 e8 01	 sub	 eax, 1
  000e4	89 45 f4	 mov	 DWORD PTR _myskin$[ebp], eax
$LN11@M_HandleSe:

; 3281 : 			}
; 3282 : 			break;

  000e7	e9 ea 00 00 00	 jmp	 $LN2@M_HandleSe
$LN12@M_HandleSe:

; 3283 : 
; 3284 : 		case KEY_RIGHTARROW:
; 3285 : 			if (itemOn == 2)       //player skin

  000ec	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  000f3	83 f8 02	 cmp	 eax, 2
  000f6	75 15		 jne	 SHORT $LN13@M_HandleSe

; 3286 : 			{
; 3287 : 				S_StartSound(NULL,sfx_menu1); // Tails

  000f8	6a 67		 push	 103			; 00000067H
  000fa	6a 00		 push	 0
  000fc	e8 00 00 00 00	 call	 _S_StartSound
  00101	83 c4 08	 add	 esp, 8

; 3288 : 				myskin++;

  00104	8b 45 f4	 mov	 eax, DWORD PTR _myskin$[ebp]
  00107	83 c0 01	 add	 eax, 1
  0010a	89 45 f4	 mov	 DWORD PTR _myskin$[ebp], eax
$LN13@M_HandleSe:

; 3289 : 			}
; 3290 : 			break;

  0010d	e9 c4 00 00 00	 jmp	 $LN2@M_HandleSe
$LN14@M_HandleSe:

; 3291 : 
; 3292 : 		case KEY_ESCAPE:
; 3293 : 			exitmenu = true;

  00112	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _exitmenu$[ebp], 1

; 3294 : 			break;

  00119	e9 b8 00 00 00	 jmp	 $LN2@M_HandleSe
$LN15@M_HandleSe:

; 3295 : 
; 3296 : 		case KEY_BACKSPACE:
; 3297 : 			if ((l = strlen(setupm_name))!=0 && itemOn == 0)

  0011e	68 00 00 00 00	 push	 OFFSET _setupm_name
  00123	e8 00 00 00 00	 call	 _strlen
  00128	83 c4 04	 add	 esp, 4
  0012b	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax
  0012e	83 7d fc 00	 cmp	 DWORD PTR _l$[ebp], 0
  00132	74 38		 je	 SHORT $LN16@M_HandleSe
  00134	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0013b	85 c0		 test	 eax, eax
  0013d	75 2d		 jne	 SHORT $LN16@M_HandleSe

; 3298 : 			{
; 3299 : 				S_StartSound(NULL,sfx_menu1); // Tails

  0013f	6a 67		 push	 103			; 00000067H
  00141	6a 00		 push	 0
  00143	e8 00 00 00 00	 call	 _S_StartSound
  00148	83 c4 08	 add	 esp, 8

; 3300 : 				setupm_name[l-1] =0;

  0014b	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  0014e	83 e8 01	 sub	 eax, 1
  00151	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  00154	83 7d b0 16	 cmp	 DWORD PTR $T2[ebp], 22	; 00000016H
  00158	73 02		 jae	 SHORT $LN28@M_HandleSe
  0015a	eb 06		 jmp	 SHORT $LN29@M_HandleSe
$LN28@M_HandleSe:
  0015c	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00161	90		 npad	 1
$LN29@M_HandleSe:
  00162	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  00165	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _setupm_name[ecx], 0
$LN16@M_HandleSe:

; 3301 : 			}
; 3302 : 			break;

  0016c	eb 68		 jmp	 SHORT $LN2@M_HandleSe
$LN17@M_HandleSe:

; 3303 : 
; 3304 : 		default:
; 3305 : 			if (choice < 32 || choice > 127 || itemOn != 0)

  0016e	83 7d 08 20	 cmp	 DWORD PTR _choice$[ebp], 32 ; 00000020H
  00172	7c 11		 jl	 SHORT $LN19@M_HandleSe
  00174	83 7d 08 7f	 cmp	 DWORD PTR _choice$[ebp], 127 ; 0000007fH
  00178	7f 0b		 jg	 SHORT $LN19@M_HandleSe
  0017a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00181	85 c0		 test	 eax, eax
  00183	74 02		 je	 SHORT $LN18@M_HandleSe
$LN19@M_HandleSe:

; 3306 : 				break;

  00185	eb 4f		 jmp	 SHORT $LN2@M_HandleSe
$LN18@M_HandleSe:

; 3307 : 			l = strlen(setupm_name);

  00187	68 00 00 00 00	 push	 OFFSET _setupm_name
  0018c	e8 00 00 00 00	 call	 _strlen
  00191	83 c4 04	 add	 esp, 4
  00194	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax

; 3308 : 			if (l < MAXPLAYERNAME-1)

  00197	83 7d fc 14	 cmp	 DWORD PTR _l$[ebp], 20	; 00000014H
  0019b	73 39		 jae	 SHORT $LN20@M_HandleSe

; 3309 : 			{
; 3310 : 				S_StartSound(NULL,sfx_menu1); // Tails

  0019d	6a 67		 push	 103			; 00000067H
  0019f	6a 00		 push	 0
  001a1	e8 00 00 00 00	 call	 _S_StartSound
  001a6	83 c4 08	 add	 esp, 8

; 3311 : 				setupm_name[l] =(char)choice;

  001a9	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  001ac	8a 4d 08	 mov	 cl, BYTE PTR _choice$[ebp]
  001af	88 88 00 00 00
	00		 mov	 BYTE PTR _setupm_name[eax], cl

; 3312 : 				setupm_name[l+1] =0;

  001b5	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  001b8	83 c0 01	 add	 eax, 1
  001bb	89 45 ac	 mov	 DWORD PTR $T1[ebp], eax
  001be	83 7d ac 16	 cmp	 DWORD PTR $T1[ebp], 22	; 00000016H
  001c2	73 02		 jae	 SHORT $LN30@M_HandleSe
  001c4	eb 06		 jmp	 SHORT $LN31@M_HandleSe
$LN30@M_HandleSe:
  001c6	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  001cb	90		 npad	 1
$LN31@M_HandleSe:
  001cc	8b 4d ac	 mov	 ecx, DWORD PTR $T1[ebp]
  001cf	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _setupm_name[ecx], 0
$LN20@M_HandleSe:
$LN2@M_HandleSe:

; 3313 : 			}
; 3314 : 			break;
; 3315 : 	}
; 3316 : 
; 3317 : 	// check skin
; 3318 : 	if (myskin <0)

  001d6	83 7d f4 00	 cmp	 DWORD PTR _myskin$[ebp], 0
  001da	7d 0b		 jge	 SHORT $LN21@M_HandleSe

; 3319 : 		myskin = numskins-1;

  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _numskins
  001e1	83 e8 01	 sub	 eax, 1
  001e4	89 45 f4	 mov	 DWORD PTR _myskin$[ebp], eax
$LN21@M_HandleSe:

; 3320 : 	if (myskin >numskins-1)

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _numskins
  001ec	83 e8 01	 sub	 eax, 1
  001ef	39 45 f4	 cmp	 DWORD PTR _myskin$[ebp], eax
  001f2	7e 07		 jle	 SHORT $LN22@M_HandleSe

; 3321 : 		myskin = 0;

  001f4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _myskin$[ebp], 0
$LN22@M_HandleSe:

; 3322 : 
; 3323 : 	// check skin change
; 3324 : 	if (myskin != setupm_player->skin)

  001fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_player
  00200	8b 4d f4	 mov	 ecx, DWORD PTR _myskin$[ebp]
  00203	3b 88 b8 00 00
	00		 cmp	 ecx, DWORD PTR [eax+184]
  00209	74 2c		 je	 SHORT $LN23@M_HandleSe

; 3325 : 		COM_BufAddText (va("%s \"%s\"",setupm_cvskin->name,skins[myskin].name));

  0020b	69 45 f4 ec 00
	00 00		 imul	 eax, DWORD PTR _myskin$[ebp], 236
  00212	05 00 00 00 00	 add	 eax, OFFSET _skins
  00217	50		 push	 eax
  00218	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setupm_cvskin
  0021e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00220	52		 push	 edx
  00221	68 00 00 00 00	 push	 OFFSET ??_C@_07CMIPDAGF@?$CFs?5?$CC?$CFs?$CC@
  00226	e8 00 00 00 00	 call	 _va
  0022b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 _COM_BufAddText
  00234	83 c4 04	 add	 esp, 4
$LN23@M_HandleSe:

; 3326 : 
; 3327 : 	if (exitmenu)

  00237	83 7d f8 00	 cmp	 DWORD PTR _exitmenu$[ebp], 0
  0023b	74 28		 je	 SHORT $LN26@M_HandleSe

; 3328 : 	{
; 3329 : 		if (currentMenu->prevMenu)

  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00242	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00246	74 13		 je	 SHORT $LN25@M_HandleSe

; 3330 : 			M_SetupNextMenu (currentMenu->prevMenu);

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0024d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00250	51		 push	 ecx
  00251	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00256	83 c4 04	 add	 esp, 4
  00259	eb 0a		 jmp	 SHORT $LN26@M_HandleSe
$LN25@M_HandleSe:

; 3331 : 		else
; 3332 : 			M_ClearMenus(true);

  0025b	6a 01		 push	 1
  0025d	e8 00 00 00 00	 call	 _M_ClearMenus
  00262	83 c4 04	 add	 esp, 4
$LN26@M_HandleSe:

; 3333 : 	}
; 3334 : }

  00265	5f		 pop	 edi
  00266	5e		 pop	 esi
  00267	5b		 pop	 ebx
  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c3		 ret	 0
$LN33@M_HandleSe:
  0026c	00 00 00 00	 DD	 $LN15@M_HandleSe
  00270	00 00 00 00	 DD	 $LN14@M_HandleSe
  00274	00 00 00 00	 DD	 $LN7@M_HandleSe
  00278	00 00 00 00	 DD	 $LN10@M_HandleSe
  0027c	00 00 00 00	 DD	 $LN12@M_HandleSe
  00280	00 00 00 00	 DD	 $LN4@M_HandleSe
  00284	00 00 00 00	 DD	 $LN17@M_HandleSe
$LN32@M_HandleSe:
  00288	00		 DB	 0
  00289	06		 DB	 6
  0028a	06		 DB	 6
  0028b	06		 DB	 6
  0028c	06		 DB	 6
  0028d	06		 DB	 6
  0028e	06		 DB	 6
  0028f	06		 DB	 6
  00290	06		 DB	 6
  00291	06		 DB	 6
  00292	06		 DB	 6
  00293	06		 DB	 6
  00294	06		 DB	 6
  00295	06		 DB	 6
  00296	06		 DB	 6
  00297	06		 DB	 6
  00298	06		 DB	 6
  00299	06		 DB	 6
  0029a	06		 DB	 6
  0029b	01		 DB	 1
  0029c	06		 DB	 6
  0029d	06		 DB	 6
  0029e	06		 DB	 6
  0029f	06		 DB	 6
  002a0	06		 DB	 6
  002a1	06		 DB	 6
  002a2	06		 DB	 6
  002a3	06		 DB	 6
  002a4	06		 DB	 6
  002a5	06		 DB	 6
  002a6	06		 DB	 6
  002a7	06		 DB	 6
  002a8	06		 DB	 6
  002a9	06		 DB	 6
  002aa	06		 DB	 6
  002ab	06		 DB	 6
  002ac	06		 DB	 6
  002ad	06		 DB	 6
  002ae	06		 DB	 6
  002af	06		 DB	 6
  002b0	06		 DB	 6
  002b1	06		 DB	 6
  002b2	06		 DB	 6
  002b3	06		 DB	 6
  002b4	06		 DB	 6
  002b5	06		 DB	 6
  002b6	06		 DB	 6
  002b7	06		 DB	 6
  002b8	06		 DB	 6
  002b9	06		 DB	 6
  002ba	06		 DB	 6
  002bb	06		 DB	 6
  002bc	06		 DB	 6
  002bd	06		 DB	 6
  002be	06		 DB	 6
  002bf	06		 DB	 6
  002c0	06		 DB	 6
  002c1	06		 DB	 6
  002c2	06		 DB	 6
  002c3	06		 DB	 6
  002c4	06		 DB	 6
  002c5	06		 DB	 6
  002c6	06		 DB	 6
  002c7	06		 DB	 6
  002c8	06		 DB	 6
  002c9	06		 DB	 6
  002ca	06		 DB	 6
  002cb	06		 DB	 6
  002cc	06		 DB	 6
  002cd	06		 DB	 6
  002ce	06		 DB	 6
  002cf	06		 DB	 6
  002d0	06		 DB	 6
  002d1	06		 DB	 6
  002d2	06		 DB	 6
  002d3	06		 DB	 6
  002d4	06		 DB	 6
  002d5	06		 DB	 6
  002d6	06		 DB	 6
  002d7	06		 DB	 6
  002d8	06		 DB	 6
  002d9	06		 DB	 6
  002da	06		 DB	 6
  002db	06		 DB	 6
  002dc	06		 DB	 6
  002dd	06		 DB	 6
  002de	06		 DB	 6
  002df	06		 DB	 6
  002e0	06		 DB	 6
  002e1	06		 DB	 6
  002e2	06		 DB	 6
  002e3	06		 DB	 6
  002e4	06		 DB	 6
  002e5	06		 DB	 6
  002e6	06		 DB	 6
  002e7	06		 DB	 6
  002e8	06		 DB	 6
  002e9	06		 DB	 6
  002ea	06		 DB	 6
  002eb	06		 DB	 6
  002ec	06		 DB	 6
  002ed	06		 DB	 6
  002ee	06		 DB	 6
  002ef	06		 DB	 6
  002f0	06		 DB	 6
  002f1	06		 DB	 6
  002f2	06		 DB	 6
  002f3	06		 DB	 6
  002f4	06		 DB	 6
  002f5	06		 DB	 6
  002f6	06		 DB	 6
  002f7	06		 DB	 6
  002f8	06		 DB	 6
  002f9	06		 DB	 6
  002fa	06		 DB	 6
  002fb	06		 DB	 6
  002fc	06		 DB	 6
  002fd	06		 DB	 6
  002fe	06		 DB	 6
  002ff	06		 DB	 6
  00300	06		 DB	 6
  00301	06		 DB	 6
  00302	06		 DB	 6
  00303	06		 DB	 6
  00304	06		 DB	 6
  00305	06		 DB	 6
  00306	06		 DB	 6
  00307	06		 DB	 6
  00308	06		 DB	 6
  00309	06		 DB	 6
  0030a	06		 DB	 6
  0030b	06		 DB	 6
  0030c	06		 DB	 6
  0030d	06		 DB	 6
  0030e	06		 DB	 6
  0030f	06		 DB	 6
  00310	06		 DB	 6
  00311	06		 DB	 6
  00312	06		 DB	 6
  00313	06		 DB	 6
  00314	06		 DB	 6
  00315	06		 DB	 6
  00316	06		 DB	 6
  00317	06		 DB	 6
  00318	06		 DB	 6
  00319	06		 DB	 6
  0031a	06		 DB	 6
  0031b	06		 DB	 6
  0031c	06		 DB	 6
  0031d	06		 DB	 6
  0031e	06		 DB	 6
  0031f	06		 DB	 6
  00320	06		 DB	 6
  00321	06		 DB	 6
  00322	06		 DB	 6
  00323	06		 DB	 6
  00324	06		 DB	 6
  00325	06		 DB	 6
  00326	06		 DB	 6
  00327	06		 DB	 6
  00328	06		 DB	 6
  00329	06		 DB	 6
  0032a	06		 DB	 6
  0032b	06		 DB	 6
  0032c	06		 DB	 6
  0032d	06		 DB	 6
  0032e	06		 DB	 6
  0032f	06		 DB	 6
  00330	06		 DB	 6
  00331	06		 DB	 6
  00332	06		 DB	 6
  00333	06		 DB	 6
  00334	06		 DB	 6
  00335	06		 DB	 6
  00336	06		 DB	 6
  00337	06		 DB	 6
  00338	06		 DB	 6
  00339	06		 DB	 6
  0033a	06		 DB	 6
  0033b	06		 DB	 6
  0033c	06		 DB	 6
  0033d	06		 DB	 6
  0033e	06		 DB	 6
  0033f	06		 DB	 6
  00340	06		 DB	 6
  00341	06		 DB	 6
  00342	06		 DB	 6
  00343	06		 DB	 6
  00344	06		 DB	 6
  00345	06		 DB	 6
  00346	06		 DB	 6
  00347	06		 DB	 6
  00348	06		 DB	 6
  00349	06		 DB	 6
  0034a	06		 DB	 6
  0034b	06		 DB	 6
  0034c	06		 DB	 6
  0034d	06		 DB	 6
  0034e	06		 DB	 6
  0034f	06		 DB	 6
  00350	06		 DB	 6
  00351	06		 DB	 6
  00352	06		 DB	 6
  00353	06		 DB	 6
  00354	06		 DB	 6
  00355	06		 DB	 6
  00356	06		 DB	 6
  00357	06		 DB	 6
  00358	06		 DB	 6
  00359	06		 DB	 6
  0035a	06		 DB	 6
  0035b	06		 DB	 6
  0035c	06		 DB	 6
  0035d	06		 DB	 6
  0035e	06		 DB	 6
  0035f	06		 DB	 6
  00360	06		 DB	 6
  00361	06		 DB	 6
  00362	06		 DB	 6
  00363	06		 DB	 6
  00364	06		 DB	 6
  00365	06		 DB	 6
  00366	02		 DB	 2
  00367	06		 DB	 6
  00368	06		 DB	 6
  00369	03		 DB	 3
  0036a	06		 DB	 6
  0036b	04		 DB	 4
  0036c	06		 DB	 6
  0036d	06		 DB	 6
  0036e	05		 DB	 5
_M_HandleSetupMultiPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawSetupMultiPlayerMenu
_TEXT	SEGMENT
_colormap$1 = -28					; size = 4
_patch$ = -24						; size = 4
_sprframe$ = -20					; size = 4
_sprdef$ = -16						; size = 4
_st$ = -12						; size = 4
_my$ = -8						; size = 4
_mx$ = -4						; size = 4
_M_DrawSetupMultiPlayerMenu PROC			; COMDAT

; 3122 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3123 : 	INT32 mx, my, st;
; 3124 : 	spritedef_t *sprdef;
; 3125 : 	spriteframe_t *sprframe;
; 3126 : 	patch_t *patch;
; 3127 : 
; 3128 : 	mx = SetupMultiPlayerDef.x;

  00009	0f bf 05 18 00
	00 00		 movsx	 eax, WORD PTR _SetupMultiPlayerDef+24
  00010	89 45 fc	 mov	 DWORD PTR _mx$[ebp], eax

; 3129 : 	my = SetupMultiPlayerDef.y;

  00013	0f bf 05 1a 00
	00 00		 movsx	 eax, WORD PTR _SetupMultiPlayerDef+26
  0001a	89 45 f8	 mov	 DWORD PTR _my$[ebp], eax

; 3130 : 
; 3131 : 	// use generic drawer for cursor, items and title
; 3132 : 	M_DrawGenericMenu();

  0001d	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  00022	90		 npad	 1

; 3133 : 
; 3134 : 	// draw name string
; 3135 : 	M_DrawTextBox(mx + 90, my - 8, MAXPLAYERNAME, 1);

  00023	6a 01		 push	 1
  00025	6a 15		 push	 21			; 00000015H
  00027	8b 45 f8	 mov	 eax, DWORD PTR _my$[ebp]
  0002a	83 e8 08	 sub	 eax, 8
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _mx$[ebp]
  00031	83 c1 5a	 add	 ecx, 90			; 0000005aH
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _M_DrawTextBox
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 3136 : 	V_DrawString(mx + 98, my, V_ALLOWLOWERCASE, setupm_name);

  0003d	68 00 00 00 00	 push	 OFFSET _setupm_name
  00042	68 00 00 04 00	 push	 262144			; 00040000H
  00047	8b 45 f8	 mov	 eax, DWORD PTR _my$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mx$[ebp]
  0004e	83 c1 62	 add	 ecx, 98			; 00000062H
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _V_DrawString
  00057	83 c4 10	 add	 esp, 16			; 00000010H

; 3137 : 
; 3138 : 	// draw skin string
; 3139 : 	V_DrawString(mx + 90, my + 96, 0, setupm_cvskin->string);

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvskin
  0005f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00062	51		 push	 ecx
  00063	6a 00		 push	 0
  00065	8b 55 f8	 mov	 edx, DWORD PTR _my$[ebp]
  00068	83 c2 60	 add	 edx, 96			; 00000060H
  0006b	52		 push	 edx
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _mx$[ebp]
  0006f	83 c0 5a	 add	 eax, 90			; 0000005aH
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _V_DrawString
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 3140 : 
; 3141 : 	// draw the name of the color you have chosen
; 3142 : 	// Just so people don't go thinking that "Default" is Green.
; 3143 : 	V_DrawString(208, 72, 0, setupm_cvcolor->string);

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvcolor
  00080	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00083	51		 push	 ecx
  00084	6a 00		 push	 0
  00086	6a 48		 push	 72			; 00000048H
  00088	68 d0 00 00 00	 push	 208			; 000000d0H
  0008d	e8 00 00 00 00	 call	 _V_DrawString
  00092	83 c4 10	 add	 esp, 16			; 00000010H

; 3144 : 
; 3145 : 	// draw text cursor for name
; 3146 : 	if (!itemOn && skullAnimCounter < 4) // blink cursor

  00095	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0009c	85 c0		 test	 eax, eax
  0009e	75 31		 jne	 SHORT $LN2@M_DrawSetu
  000a0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _skullAnimCounter
  000a7	83 f8 04	 cmp	 eax, 4
  000aa	7d 25		 jge	 SHORT $LN2@M_DrawSetu

; 3147 : 		V_DrawCharacter(mx + 98 + V_StringWidth(setupm_name), my, '_',false);

  000ac	6a 00		 push	 0
  000ae	6a 5f		 push	 95			; 0000005fH
  000b0	8b 45 f8	 mov	 eax, DWORD PTR _my$[ebp]
  000b3	50		 push	 eax
  000b4	68 00 00 00 00	 push	 OFFSET _setupm_name
  000b9	e8 00 00 00 00	 call	 _V_StringWidth
  000be	83 c4 04	 add	 esp, 4
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _mx$[ebp]
  000c4	8d 54 01 62	 lea	 edx, DWORD PTR [ecx+eax+98]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 _V_DrawCharacter
  000ce	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@M_DrawSetu:

; 3148 : 
; 3149 : 	// anim the player in the box
; 3150 : 	if (--multi_tics <= 0)

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _multi_tics
  000d6	83 e8 01	 sub	 eax, 1
  000d9	a3 00 00 00 00	 mov	 DWORD PTR _multi_tics, eax
  000de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multi_tics, 0
  000e5	7f 40		 jg	 SHORT $LN5@M_DrawSetu

; 3151 : 	{
; 3152 : 		st = multi_state->nextstate;

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _multi_state
  000ec	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ef	89 4d f4	 mov	 DWORD PTR _st$[ebp], ecx

; 3153 : 		if (st != S_NULL)

  000f2	83 7d f4 00	 cmp	 DWORD PTR _st$[ebp], 0
  000f6	74 0e		 je	 SHORT $LN4@M_DrawSetu

; 3154 : 			multi_state = &states[st];

  000f8	6b 45 f4 1c	 imul	 eax, DWORD PTR _st$[ebp], 28
  000fc	05 00 00 00 00	 add	 eax, OFFSET _states
  00101	a3 00 00 00 00	 mov	 DWORD PTR _multi_state, eax
$LN4@M_DrawSetu:

; 3155 : 		multi_tics = multi_state->tics;

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR _multi_state
  0010b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010e	89 0d 00 00 00
	00		 mov	 DWORD PTR _multi_tics, ecx

; 3156 : 		if (multi_tics == -1)

  00114	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _multi_tics, -1
  0011b	75 0a		 jne	 SHORT $LN5@M_DrawSetu

; 3157 : 			multi_tics = 15;

  0011d	c7 05 00 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _multi_tics, 15 ; 0000000fH
$LN5@M_DrawSetu:

; 3158 : 	}
; 3159 : 
; 3160 : 	// skin 0 is default player sprite
; 3161 : 	if (R_SkinAvailable(setupm_cvskin->string) != -1)

  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvskin
  0012c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 _R_SkinAvailable
  00135	83 c4 04	 add	 esp, 4
  00138	83 f8 ff	 cmp	 eax, -1
  0013b	74 22		 je	 SHORT $LN6@M_DrawSetu

; 3162 : 		sprdef = &skins[R_SkinAvailable(setupm_cvskin->string)].spritedef;

  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvskin
  00142	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00145	51		 push	 ecx
  00146	e8 00 00 00 00	 call	 _R_SkinAvailable
  0014b	83 c4 04	 add	 esp, 4
  0014e	69 d0 ec 00 00
	00		 imul	 edx, eax, 236
  00154	81 c2 14 00 00
	00		 add	 edx, OFFSET _skins+20
  0015a	89 55 f0	 mov	 DWORD PTR _sprdef$[ebp], edx
  0015d	eb 11		 jmp	 SHORT $LN7@M_DrawSetu
$LN6@M_DrawSetu:

; 3163 : 	else
; 3164 : 		sprdef = &skins[0].spritedef;

  0015f	b8 ec 00 00 00	 mov	 eax, 236		; 000000ecH
  00164	6b c8 00	 imul	 ecx, eax, 0
  00167	81 c1 14 00 00
	00		 add	 ecx, OFFSET _skins+20
  0016d	89 4d f0	 mov	 DWORD PTR _sprdef$[ebp], ecx
$LN7@M_DrawSetu:

; 3165 : 
; 3166 : 	sprframe = &sprdef->spriteframes[multi_state->frame & FF_FRAMEMASK];

  00170	a1 00 00 00 00	 mov	 eax, DWORD PTR _multi_state
  00175	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00178	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0017e	6b d1 4c	 imul	 edx, ecx, 76
  00181	8b 45 f0	 mov	 eax, DWORD PTR _sprdef$[ebp]
  00184	03 50 04	 add	 edx, DWORD PTR [eax+4]
  00187	89 55 ec	 mov	 DWORD PTR _sprframe$[ebp], edx

; 3167 : 	patch = W_CachePatchNum(sprframe->lumppat[0], PU_CACHE);

  0018a	6a 65		 push	 101			; 00000065H
  0018c	b8 04 00 00 00	 mov	 eax, 4
  00191	6b c8 00	 imul	 ecx, eax, 0
  00194	8b 55 ec	 mov	 edx, DWORD PTR _sprframe$[ebp]
  00197	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _W_CachePatchNum
  001a1	83 c4 08	 add	 esp, 8
  001a4	89 45 e8	 mov	 DWORD PTR _patch$[ebp], eax

; 3168 : 
; 3169 : 	// draw box around guy
; 3170 : 	M_DrawTextBox(mx + 90, my + 8, PLBOXW, PLBOXH);

  001a7	6a 09		 push	 9
  001a9	6a 08		 push	 8
  001ab	8b 45 f8	 mov	 eax, DWORD PTR _my$[ebp]
  001ae	83 c0 08	 add	 eax, 8
  001b1	50		 push	 eax
  001b2	8b 4d fc	 mov	 ecx, DWORD PTR _mx$[ebp]
  001b5	83 c1 5a	 add	 ecx, 90			; 0000005aH
  001b8	51		 push	 ecx
  001b9	e8 00 00 00 00	 call	 _M_DrawTextBox
  001be	83 c4 10	 add	 esp, 16			; 00000010H

; 3171 : 
; 3172 : 	// draw player sprite
; 3173 : 	if (!setupm_cvcolor->value)

  001c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvcolor
  001c6	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  001ca	75 64		 jne	 SHORT $LN8@M_DrawSetu

; 3174 : 	{
; 3175 : 		if (atoi(skins[setupm_cvskin->value].highres))

  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvskin
  001d1	69 48 14 ec 00
	00 00		 imul	 ecx, DWORD PTR [eax+20], 236
  001d8	81 c1 84 00 00
	00		 add	 ecx, OFFSET _skins+132
  001de	51		 push	 ecx
  001df	e8 00 00 00 00	 call	 _atoi
  001e4	83 c4 04	 add	 esp, 4
  001e7	85 c0		 test	 eax, eax
  001e9	74 21		 je	 SHORT $LN10@M_DrawSetu

; 3176 : 			V_DrawScaledPatch(mx + 98 + (PLBOXW*8/2), my + 16 + (PLBOXH*8) - 8, 0, patch);

  001eb	8b 45 e8	 mov	 eax, DWORD PTR _patch$[ebp]
  001ee	50		 push	 eax
  001ef	6a 00		 push	 0
  001f1	8b 4d f8	 mov	 ecx, DWORD PTR _my$[ebp]
  001f4	83 c1 50	 add	 ecx, 80			; 00000050H
  001f7	51		 push	 ecx
  001f8	8b 55 fc	 mov	 edx, DWORD PTR _mx$[ebp]
  001fb	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00201	52		 push	 edx
  00202	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00207	83 c4 10	 add	 esp, 16			; 00000010H
  0020a	eb 1f		 jmp	 SHORT $LN11@M_DrawSetu
$LN10@M_DrawSetu:

; 3177 : 		else
; 3178 : 			V_DrawScaledPatch(mx + 98 + (PLBOXW*8/2), my + 16 + (PLBOXH*8) - 8, 0, patch);

  0020c	8b 45 e8	 mov	 eax, DWORD PTR _patch$[ebp]
  0020f	50		 push	 eax
  00210	6a 00		 push	 0
  00212	8b 4d f8	 mov	 ecx, DWORD PTR _my$[ebp]
  00215	83 c1 50	 add	 ecx, 80			; 00000050H
  00218	51		 push	 ecx
  00219	8b 55 fc	 mov	 edx, DWORD PTR _mx$[ebp]
  0021c	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00222	52		 push	 edx
  00223	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00228	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@M_DrawSetu:

; 3179 : 	}

  0022b	e9 8c 00 00 00	 jmp	 $LN13@M_DrawSetu
$LN8@M_DrawSetu:

; 3180 : 	else
; 3181 : 	{
; 3182 : 		const UINT8 *colormap = (const UINT8 *)translationtables[setupm_player->skin] - 256

  00230	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_player
  00235	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  0023b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _translationtables[ecx*4]
  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvcolor
  00247	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0024a	c1 e1 08	 shl	 ecx, 8
  0024d	8d 94 0a 00 ff
	ff ff		 lea	 edx, DWORD PTR [edx+ecx-256]
  00254	89 55 e4	 mov	 DWORD PTR _colormap$1[ebp], edx

; 3183 : 			+ (setupm_cvcolor->value<<8);
; 3184 : 
; 3185 : 		if (atoi(skins[setupm_cvskin->value].highres))

  00257	a1 00 00 00 00	 mov	 eax, DWORD PTR _setupm_cvskin
  0025c	69 48 14 ec 00
	00 00		 imul	 ecx, DWORD PTR [eax+20], 236
  00263	81 c1 84 00 00
	00		 add	 ecx, OFFSET _skins+132
  00269	51		 push	 ecx
  0026a	e8 00 00 00 00	 call	 _atoi
  0026f	83 c4 04	 add	 esp, 4
  00272	85 c0		 test	 eax, eax
  00274	74 24		 je	 SHORT $LN12@M_DrawSetu

; 3186 : 			V_DrawSmallMappedPatch(mx + 98 + (PLBOXW*8/2), my + 16 + (PLBOXH*8) - 8, 0, patch, colormap);

  00276	8b 45 e4	 mov	 eax, DWORD PTR _colormap$1[ebp]
  00279	50		 push	 eax
  0027a	8b 4d e8	 mov	 ecx, DWORD PTR _patch$[ebp]
  0027d	51		 push	 ecx
  0027e	6a 00		 push	 0
  00280	8b 55 f8	 mov	 edx, DWORD PTR _my$[ebp]
  00283	83 c2 50	 add	 edx, 80			; 00000050H
  00286	52		 push	 edx
  00287	8b 45 fc	 mov	 eax, DWORD PTR _mx$[ebp]
  0028a	05 82 00 00 00	 add	 eax, 130		; 00000082H
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 _V_DrawSmallMappedPatch
  00295	83 c4 14	 add	 esp, 20			; 00000014H
  00298	eb 22		 jmp	 SHORT $LN13@M_DrawSetu
$LN12@M_DrawSetu:

; 3187 : 		else
; 3188 : 			V_DrawMappedPatch(mx + 98 + (PLBOXW*8/2), my + 16 + (PLBOXH*8) - 8, 0, patch, colormap);

  0029a	8b 45 e4	 mov	 eax, DWORD PTR _colormap$1[ebp]
  0029d	50		 push	 eax
  0029e	8b 4d e8	 mov	 ecx, DWORD PTR _patch$[ebp]
  002a1	51		 push	 ecx
  002a2	6a 00		 push	 0
  002a4	8b 55 f8	 mov	 edx, DWORD PTR _my$[ebp]
  002a7	83 c2 50	 add	 edx, 80			; 00000050H
  002aa	52		 push	 edx
  002ab	8b 45 fc	 mov	 eax, DWORD PTR _mx$[ebp]
  002ae	05 82 00 00 00	 add	 eax, 130		; 00000082H
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  002b9	83 c4 14	 add	 esp, 20			; 00000014H
$LN13@M_DrawSetu:

; 3189 : 	}
; 3190 : }

  002bc	5f		 pop	 edi
  002bd	5e		 pop	 esi
  002be	5b		 pop	 ebx
  002bf	8b e5		 mov	 esp, ebp
  002c1	5d		 pop	 ebp
  002c2	c3		 ret	 0
_M_DrawSetupMultiPlayerMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Splitscreen
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Splitscreen PROC					; COMDAT

; 2878 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2879 : 	(void)choice;
; 2880 : 	M_StartSplitServerMenu();

  00009	e8 00 00 00 00	 call	 _M_StartSplitServerMenu
  0000e	90		 npad	 1

; 2881 : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_M_Splitscreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SetupMultiPlayerBis
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_SetupMultiPlayerBis PROC				; COMDAT

; 3063 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3064 : 	(void)choice;
; 3065 : 	if (!(gamestate == GS_LEVEL || gamestate == GS_INTERMISSION))

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00010	74 1f		 je	 SHORT $LN2@M_SetupMul
  00012	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00019	74 16		 je	 SHORT $LN2@M_SetupMul

; 3066 : 	{
; 3067 : 		M_StartMessage("You have to be in a game\nto do this.\n\nPress a key\n",NULL,MM_NOTHING);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@MNGCLAIB@You?5have?5to?5be?5in?5a?5game?6to?5do?5@
  00024	e8 00 00 00 00	 call	 _M_StartMessage
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3068 : 		return;

  0002c	e9 98 00 00 00	 jmp	 $LN1@M_SetupMul
$LN2@M_SetupMul:

; 3069 : 	}
; 3070 : 
; 3071 : 	multi_state = &states[mobjinfo[MT_PLAYER].seestate];

  00031	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	6b 91 0c 00 00
	00 1c		 imul	 edx, DWORD PTR _mobjinfo[ecx+12], 28
  00040	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00046	89 15 00 00 00
	00		 mov	 DWORD PTR _multi_state, edx

; 3072 : 	multi_tics = multi_state->tics;

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR _multi_state
  00051	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00054	89 0d 00 00 00
	00		 mov	 DWORD PTR _multi_tics, ecx

; 3073 : 	strcpy (setupm_name, cv_playername2.string);

  0005a	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_playername2+24
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET _setupm_name
  00065	e8 00 00 00 00	 call	 _strcpy
  0006a	83 c4 08	 add	 esp, 8

; 3074 : 	SetupMultiPlayerDef.numitems = setupmulti_end;          //activate the setup controls for player 2

  0006d	b8 05 00 00 00	 mov	 eax, 5
  00072	66 a3 08 00 00
	00		 mov	 WORD PTR _SetupMultiPlayerDef+8, ax

; 3075 : 
; 3076 : 	// set for splitscreen secondary player
; 3077 : 	SetupMultiPlayerMenu[setupmultiplayer_color].itemaction = &cv_playercolor2;

  00078	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0007d	c1 e0 00	 shl	 eax, 0
  00080	c7 80 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _SetupMultiPlayerMenu[eax+12], OFFSET _cv_playercolor2

; 3078 : 	setupm_player = &players[secondarydisplayplayer];

  0008a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00094	05 00 00 00 00	 add	 eax, OFFSET _players
  00099	a3 00 00 00 00	 mov	 DWORD PTR _setupm_player, eax

; 3079 : 	setupm_cvskin = &cv_skin2;

  0009e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupm_cvskin, OFFSET _cv_skin2

; 3080 : 	setupm_cvcolor = &cv_playercolor2;

  000a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupm_cvcolor, OFFSET _cv_playercolor2

; 3081 : 	setupm_cvname = &cv_playername2;

  000b2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupm_cvname, OFFSET _cv_playername2

; 3082 : 	M_SetupNextMenu (&SetupMultiPlayerDef);

  000bc	68 00 00 00 00	 push	 OFFSET _SetupMultiPlayerDef
  000c1	e8 00 00 00 00	 call	 _M_SetupNextMenu
  000c6	83 c4 04	 add	 esp, 4
$LN1@M_SetupMul:

; 3083 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_M_SetupMultiPlayerBis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SetupMultiPlayer
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_SetupMultiPlayer PROC				; COMDAT

; 3038 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3039 : 	(void)choice;
; 3040 : 	if (!(gamestate == GS_LEVEL || gamestate == GS_INTERMISSION))

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00010	74 1f		 je	 SHORT $LN2@M_SetupMul
  00012	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00019	74 16		 je	 SHORT $LN2@M_SetupMul

; 3041 : 	{
; 3042 : 		M_StartMessage("You have to be in a game\nto do this.\n\nPress a key\n",NULL,MM_NOTHING);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@MNGCLAIB@You?5have?5to?5be?5in?5a?5game?6to?5do?5@
  00024	e8 00 00 00 00	 call	 _M_StartMessage
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3043 : 		return;

  0002c	e9 98 00 00 00	 jmp	 $LN1@M_SetupMul
$LN2@M_SetupMul:

; 3044 : 	}
; 3045 : 
; 3046 : 	multi_state = &states[mobjinfo[MT_PLAYER].seestate];

  00031	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	6b 91 0c 00 00
	00 1c		 imul	 edx, DWORD PTR _mobjinfo[ecx+12], 28
  00040	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00046	89 15 00 00 00
	00		 mov	 DWORD PTR _multi_state, edx

; 3047 : 	multi_tics = multi_state->tics;

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR _multi_state
  00051	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00054	89 0d 00 00 00
	00		 mov	 DWORD PTR _multi_tics, ecx

; 3048 : 	strcpy(setupm_name, cv_playername.string);

  0005a	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_playername+24
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET _setupm_name
  00065	e8 00 00 00 00	 call	 _strcpy
  0006a	83 c4 08	 add	 esp, 8

; 3049 : 
; 3050 : 	SetupMultiPlayerDef.numitems = setupmultiplayer_skin +1;      //remove player2 setup controls and mouse2

  0006d	b8 03 00 00 00	 mov	 eax, 3
  00072	66 a3 08 00 00
	00		 mov	 WORD PTR _SetupMultiPlayerDef+8, ax

; 3051 : 
; 3052 : 	// set for player 1
; 3053 : 	SetupMultiPlayerMenu[setupmultiplayer_color].itemaction = &cv_playercolor;

  00078	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0007d	c1 e0 00	 shl	 eax, 0
  00080	c7 80 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _SetupMultiPlayerMenu[eax+12], OFFSET _cv_playercolor

; 3054 : 	setupm_player = &players[consoleplayer];

  0008a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00094	05 00 00 00 00	 add	 eax, OFFSET _players
  00099	a3 00 00 00 00	 mov	 DWORD PTR _setupm_player, eax

; 3055 : 	setupm_cvskin = &cv_skin;

  0009e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupm_cvskin, OFFSET _cv_skin

; 3056 : 	setupm_cvcolor = &cv_playercolor;

  000a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupm_cvcolor, OFFSET _cv_playercolor

; 3057 : 	setupm_cvname = &cv_playername;

  000b2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setupm_cvname, OFFSET _cv_playername

; 3058 : 	M_SetupNextMenu (&SetupMultiPlayerDef);

  000bc	68 00 00 00 00	 push	 OFFSET _SetupMultiPlayerDef
  000c1	e8 00 00 00 00	 call	 _M_SetupNextMenu
  000c6	83 c4 04	 add	 esp, 4
$LN1@M_SetupMul:

; 3059 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_M_SetupMultiPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_StartServerMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_StartServerMenu PROC					; COMDAT

; 2773 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2774 : 	(void)choice;
; 2775 : 	if (Playing())

  00009	e8 00 00 00 00	 call	 _Playing
  0000e	85 c0		 test	 eax, eax
  00010	74 17		 je	 SHORT $LN2@M_StartSer

; 2776 : 	{
; 2777 : 		M_StartMessage(ALREADYPLAYING, M_ExitGameResponse, MM_YESNO);

  00012	6a 01		 push	 1
  00014	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _ALREADYPLAYING
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _M_StartMessage
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2778 : 		return;

  00027	eb 59		 jmp	 SHORT $LN1@M_StartSer
$LN2@M_StartSer:

; 2779 : 	}
; 2780 : 
; 2781 : 	inlevelselect = 0;

  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _inlevelselect, 0

; 2782 : 	M_PatchLevelNameTable(0);

  00033	6a 00		 push	 0
  00035	e8 00 00 00 00	 call	 _M_PatchLevelNameTable
  0003a	83 c4 04	 add	 esp, 4

; 2783 : 	StartSplitScreenGame = false;

  0003d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 0

; 2784 : 	ServerMenu[1].status = IT_STRING|IT_CVAR; // Make advertise on Internet option available.

  00047	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0004c	c1 e0 00	 shl	 eax, 0
  0004f	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00054	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2785 : 	M_AlterRoomOptions();

  0005b	e8 00 00 00 00	 call	 _M_AlterRoomOptions
  00060	90		 npad	 1

; 2786 : 	ServerMenu[4].status = IT_STRING|IT_CVAR|IT_CV_STRING; // Server name too.

  00061	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00066	c1 e0 02	 shl	 eax, 2
  00069	b9 28 02 00 00	 mov	 ecx, 552		; 00000228H
  0006e	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2787 : 	M_SetupNextMenu(&Serverdef);

  00075	68 00 00 00 00	 push	 OFFSET _Serverdef
  0007a	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0007f	83 c4 04	 add	 esp, 4
$LN1@M_StartSer:

; 2788 : 
; 2789 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
_M_StartServerMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_StartSplitServerMenu
_TEXT	SEGMENT
_M_StartSplitServerMenu PROC				; COMDAT

; 2754 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2755 : 	if (Playing())

  00009	e8 00 00 00 00	 call	 _Playing
  0000e	85 c0		 test	 eax, eax
  00010	74 17		 je	 SHORT $LN2@M_StartSpl

; 2756 : 	{
; 2757 : 		M_StartMessage(ALREADYPLAYING, M_ExitGameResponse, MM_YESNO);

  00012	6a 01		 push	 1
  00014	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _ALREADYPLAYING
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _M_StartMessage
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2758 : 		return;

  00027	eb 7a		 jmp	 SHORT $LN1@M_StartSpl
$LN2@M_StartSpl:

; 2759 : 	}
; 2760 : 
; 2761 : 	inlevelselect = 0;

  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _inlevelselect, 0

; 2762 : 	M_PatchLevelNameTable(0);

  00033	6a 00		 push	 0
  00035	e8 00 00 00 00	 call	 _M_PatchLevelNameTable
  0003a	83 c4 04	 add	 esp, 4

; 2763 : 	StartSplitScreenGame = true;

  0003d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 1

; 2764 : 	ServerMenu[1].status = IT_DISABLED; // No advertise on Internet option.

  00047	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0004c	c1 e0 00	 shl	 eax, 0
  0004f	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00054	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2765 : 	ServerMenu[2].status = IT_DISABLED; // No room.

  0005b	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00060	d1 e0		 shl	 eax, 1
  00062	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00067	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2766 : 	ServerMenu[3].status = IT_DISABLED; // No room info.

  0006e	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00073	6b c8 03	 imul	 ecx, eax, 3
  00076	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  0007b	66 89 91 00 00
	00 00		 mov	 WORD PTR _ServerMenu[ecx], dx

; 2767 : 	ServerMenu[4].status = IT_DISABLED; // No server name.

  00082	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00087	c1 e0 02	 shl	 eax, 2
  0008a	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0008f	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2768 : 	M_SetupNextMenu(&Serverdef);

  00096	68 00 00 00 00	 push	 OFFSET _Serverdef
  0009b	e8 00 00 00 00	 call	 _M_SetupNextMenu
  000a0	83 c4 04	 add	 esp, 4
$LN1@M_StartSpl:

; 2769 : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_M_StartSplitServerMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_PatchSkinNameTable
_TEXT	SEGMENT
_j$ = -4						; size = 4
_M_PatchSkinNameTable PROC				; COMDAT

; 2725 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2726 : 	INT32 j;
; 2727 : 
; 2728 : 	memset(skins_cons_t, 0, sizeof (skins_cons_t));

  00009	68 08 01 00 00	 push	 264			; 00000108H
  0000e	6a 00		 push	 0
  00010	68 00 00 00 00	 push	 OFFSET _skins_cons_t
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2729 : 
; 2730 : 	for (j = 0; j < MAXSKINS; j++)

  0001d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@M_PatchSki
$LN2@M_PatchSki:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 45 fc	 mov	 DWORD PTR _j$[ebp], eax
$LN4@M_PatchSki:
  0002f	83 7d fc 20	 cmp	 DWORD PTR _j$[ebp], 32	; 00000020H
  00033	7d 61		 jge	 SHORT $LN3@M_PatchSki

; 2731 : 	{
; 2732 : 		if (skins[j].name[0] != '\0')

  00035	69 45 fc ec 00
	00 00		 imul	 eax, DWORD PTR _j$[ebp], 236
  0003c	b9 01 00 00 00	 mov	 ecx, 1
  00041	6b d1 00	 imul	 edx, ecx, 0
  00044	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _skins[eax+edx]
  0004c	85 c0		 test	 eax, eax
  0004e	74 28		 je	 SHORT $LN5@M_PatchSki

; 2733 : 		{
; 2734 : 			skins_cons_t[j].strvalue = skins[j].name;

  00050	69 45 fc ec 00
	00 00		 imul	 eax, DWORD PTR _j$[ebp], 236
  00057	05 00 00 00 00	 add	 eax, OFFSET _skins
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _j$[ebp]
  0005f	89 04 cd 04 00
	00 00		 mov	 DWORD PTR _skins_cons_t[ecx*8+4], eax

; 2735 : 			skins_cons_t[j].value = j+1;

  00066	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  00069	83 c0 01	 add	 eax, 1
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _j$[ebp]
  0006f	89 04 cd 00 00
	00 00		 mov	 DWORD PTR _skins_cons_t[ecx*8], eax

; 2736 : 		}

  00076	eb 1c		 jmp	 SHORT $LN6@M_PatchSki
$LN5@M_PatchSki:

; 2737 : 		else
; 2738 : 		{
; 2739 : 			skins_cons_t[j].strvalue = NULL;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  0007b	c7 04 c5 04 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _skins_cons_t[eax*8+4], 0

; 2740 : 			skins_cons_t[j].value = 0;

  00086	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  00089	c7 04 c5 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _skins_cons_t[eax*8], 0
$LN6@M_PatchSki:

; 2741 : 		}
; 2742 : 	}

  00094	eb 90		 jmp	 SHORT $LN2@M_PatchSki
$LN3@M_PatchSki:

; 2743 : 
; 2744 : 	CV_SetValue(&cv_chooseskin, cv_chooseskin.value); // This causes crash sometimes?!

  00096	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  0009b	50		 push	 eax
  0009c	68 00 00 00 00	 push	 OFFSET _cv_chooseskin
  000a1	e8 00 00 00 00	 call	 _CV_SetValue
  000a6	83 c4 08	 add	 esp, 8

; 2745 : 
; 2746 : 	CV_SetValue(&cv_chooseskin, 1);

  000a9	6a 01		 push	 1
  000ab	68 00 00 00 00	 push	 OFFSET _cv_chooseskin
  000b0	e8 00 00 00 00	 call	 _CV_SetValue
  000b5	83 c4 08	 add	 esp, 8

; 2747 : 	CV_AddValue(&cv_chooseskin, -1);

  000b8	6a ff		 push	 -1
  000ba	68 00 00 00 00	 push	 OFFSET _cv_chooseskin
  000bf	e8 00 00 00 00	 call	 _CV_AddValue
  000c4	83 c4 08	 add	 esp, 8

; 2748 : 	CV_AddValue(&cv_chooseskin, 1);

  000c7	6a 01		 push	 1
  000c9	68 00 00 00 00	 push	 OFFSET _cv_chooseskin
  000ce	e8 00 00 00 00	 call	 _CV_AddValue
  000d3	83 c4 08	 add	 esp, 8

; 2749 : 
; 2750 : 	return;
; 2751 : }

  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_M_PatchSkinNameTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_PatchLevelNameTable
_TEXT	SEGMENT
tv253 = -96						; size = 4
_value$1 = -28						; size = 4
_g$2 = -24						; size = 4
_actnum$3 = -20						; size = 3
_foundone$ = -16					; size = 4
_currentmap$ = -12					; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_mode$ = 8						; size = 4
_M_PatchLevelNameTable PROC				; COMDAT

; 2568 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2569 : 	size_t i;
; 2570 : 	INT32 j;
; 2571 : 	INT32 currentmap;
; 2572 : 	boolean foundone = false;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _foundone$[ebp], 0

; 2573 : 
; 2574 : 	for (j = 0; j < LEVELARRAYSIZE-2; j++)

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@M_PatchLev
$LN2@M_PatchLev:
  00019	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN4@M_PatchLev:
  00022	81 7d f8 0b 04
	00 00		 cmp	 DWORD PTR _j$[ebp], 1035 ; 0000040bH
  00029	0f 8d e6 02 00
	00		 jge	 $LN3@M_PatchLev

; 2575 : 	{
; 2576 : 		i = 0;

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 2577 : 		currentmap = map_cons_t[j].value-1;

  00036	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00039	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _map_cons_t[eax*8]
  00040	83 e9 01	 sub	 ecx, 1
  00043	89 4d f4	 mov	 DWORD PTR _currentmap$[ebp], ecx

; 2578 : 
; 2579 : 		if (mapheaderinfo[currentmap].lvlttl[0] && ((mode == 0 && !mapheaderinfo[currentmap].hideinmenu && !((mapheaderinfo[currentmap].typeoflevel & TOL_SRB1) && !(grade & 2))) || (mode == 1 && mapheaderinfo[currentmap].levelselect && !(mapheaderinfo[currentmap].typeoflevel & TOL_SRB1)) || (mode == 2 && mapheaderinfo[currentmap].timeattack && mapvisited[currentmap]) || (mode == 3 && mapheaderinfo[currentmap].levelselect && (mapheaderinfo[currentmap].typeoflevel & TOL_SRB1))))

  00046	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  0004d	b9 01 00 00 00	 mov	 ecx, 1
  00052	6b d1 00	 imul	 edx, ecx, 0
  00055	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _mapheaderinfo[eax+edx]
  0005d	85 c0		 test	 eax, eax
  0005f	0f 84 56 02 00
	00		 je	 $LN10@M_PatchLev
  00065	83 7d 08 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00069	75 38		 jne	 SHORT $LN13@M_PatchLev
  0006b	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00072	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[eax+292], 0
  00079	75 28		 jne	 SHORT $LN13@M_PatchLev
  0007b	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00082	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  00089	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0008f	0f 84 96 00 00
	00		 je	 $LN12@M_PatchLev
  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0009a	83 e0 02	 and	 eax, 2
  0009d	0f 85 88 00 00
	00		 jne	 $LN12@M_PatchLev
$LN13@M_PatchLev:
  000a3	83 7d 08 01	 cmp	 DWORD PTR _mode$[ebp], 1
  000a7	75 26		 jne	 SHORT $LN14@M_PatchLev
  000a9	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  000b0	83 b8 38 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[eax+312], 0
  000b7	74 16		 je	 SHORT $LN14@M_PatchLev
  000b9	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  000c0	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  000c7	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  000cd	74 5c		 je	 SHORT $LN12@M_PatchLev
$LN14@M_PatchLev:
  000cf	83 7d 08 02	 cmp	 DWORD PTR _mode$[ebp], 2
  000d3	75 1e		 jne	 SHORT $LN15@M_PatchLev
  000d5	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  000dc	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[eax+308], 0
  000e3	74 0e		 je	 SHORT $LN15@M_PatchLev
  000e5	8b 45 f4	 mov	 eax, DWORD PTR _currentmap$[ebp]
  000e8	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mapvisited[eax]
  000ef	85 c9		 test	 ecx, ecx
  000f1	75 38		 jne	 SHORT $LN12@M_PatchLev
$LN15@M_PatchLev:
  000f3	83 7d 08 03	 cmp	 DWORD PTR _mode$[ebp], 3
  000f7	0f 85 be 01 00
	00		 jne	 $LN10@M_PatchLev
  000fd	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00104	83 b8 38 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[eax+312], 0
  0010b	0f 84 aa 01 00
	00		 je	 $LN10@M_PatchLev
  00111	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00118	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  0011f	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00125	0f 84 90 01 00
	00		 je	 $LN10@M_PatchLev
$LN12@M_PatchLev:

; 2580 : 		{
; 2581 : 			strlcpy(lvltable[j], mapheaderinfo[currentmap].lvlttl, sizeof (lvltable[j]));

  0012b	6a 40		 push	 64			; 00000040H
  0012d	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00134	05 00 00 00 00	 add	 eax, OFFSET _mapheaderinfo
  00139	50		 push	 eax
  0013a	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0013d	c1 e1 06	 shl	 ecx, 6
  00140	81 c1 00 00 00
	00		 add	 ecx, OFFSET _lvltable
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 _strlcpy
  0014c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2582 : 
; 2583 : 			i += strlen(mapheaderinfo[currentmap].lvlttl);

  0014f	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00156	05 00 00 00 00	 add	 eax, OFFSET _mapheaderinfo
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _strlen
  00161	83 c4 04	 add	 esp, 4
  00164	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  00167	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 2584 : 
; 2585 : 			if (!mapheaderinfo[currentmap].nozone)

  0016a	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00171	83 b8 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[eax+288], 0
  00178	0f 85 82 00 00
	00		 jne	 $LN16@M_PatchLev

; 2586 : 			{
; 2587 : 				lvltable[j][i++] = ' ';

  0017e	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00181	c1 e0 06	 shl	 eax, 6
  00184	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00187	c6 84 08 00 00
	00 00 20	 mov	 BYTE PTR _lvltable[eax+ecx], 32 ; 00000020H
  0018f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00192	83 c2 01	 add	 edx, 1
  00195	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2588 : 				lvltable[j][i++] = 'Z';

  00198	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0019b	c1 e0 06	 shl	 eax, 6
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001a1	c6 84 08 00 00
	00 00 5a	 mov	 BYTE PTR _lvltable[eax+ecx], 90 ; 0000005aH
  001a9	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001ac	83 c2 01	 add	 edx, 1
  001af	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2589 : 				lvltable[j][i++] = 'O';

  001b2	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  001b5	c1 e0 06	 shl	 eax, 6
  001b8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001bb	c6 84 08 00 00
	00 00 4f	 mov	 BYTE PTR _lvltable[eax+ecx], 79 ; 0000004fH
  001c3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001c6	83 c2 01	 add	 edx, 1
  001c9	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2590 : 				lvltable[j][i++] = 'N';

  001cc	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  001cf	c1 e0 06	 shl	 eax, 6
  001d2	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001d5	c6 84 08 00 00
	00 00 4e	 mov	 BYTE PTR _lvltable[eax+ecx], 78 ; 0000004eH
  001dd	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001e0	83 c2 01	 add	 edx, 1
  001e3	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2591 : 				lvltable[j][i++] = 'E';

  001e6	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  001e9	c1 e0 06	 shl	 eax, 6
  001ec	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001ef	c6 84 08 00 00
	00 00 45	 mov	 BYTE PTR _lvltable[eax+ecx], 69 ; 00000045H
  001f7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001fa	83 c2 01	 add	 edx, 1
  001fd	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN16@M_PatchLev:

; 2592 : 			}
; 2593 : 
; 2594 : 			if (mapheaderinfo[currentmap].actnum)

  00200	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00207	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  0020e	85 c9		 test	 ecx, ecx
  00210	0f 84 82 00 00
	00		 je	 $LN6@M_PatchLev

; 2595 : 			{
; 2596 : 				char actnum[3];
; 2597 : 				INT32 g;
; 2598 : 
; 2599 : 				lvltable[j][i++] = ' ';

  00216	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00219	c1 e0 06	 shl	 eax, 6
  0021c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0021f	c6 84 08 00 00
	00 00 20	 mov	 BYTE PTR _lvltable[eax+ecx], 32 ; 00000020H
  00227	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0022a	83 c2 01	 add	 edx, 1
  0022d	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2600 : 
; 2601 : 				sprintf(actnum, "%d", mapheaderinfo[currentmap].actnum);

  00230	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _currentmap$[ebp], 388
  00237	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  0023e	51		 push	 ecx
  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00244	8d 55 ec	 lea	 edx, DWORD PTR _actnum$3[ebp]
  00247	52		 push	 edx
  00248	e8 00 00 00 00	 call	 _sprintf
  0024d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2602 : 
; 2603 : 				for (g = 0; g < 3; g++)

  00250	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _g$2[ebp], 0
  00257	eb 09		 jmp	 SHORT $LN7@M_PatchLev
$LN5@M_PatchLev:
  00259	8b 45 e8	 mov	 eax, DWORD PTR _g$2[ebp]
  0025c	83 c0 01	 add	 eax, 1
  0025f	89 45 e8	 mov	 DWORD PTR _g$2[ebp], eax
$LN7@M_PatchLev:
  00262	83 7d e8 03	 cmp	 DWORD PTR _g$2[ebp], 3
  00266	7d 30		 jge	 SHORT $LN6@M_PatchLev

; 2604 : 				{
; 2605 : 					if (actnum[g] == '\0')

  00268	8b 45 e8	 mov	 eax, DWORD PTR _g$2[ebp]
  0026b	0f be 4c 05 ec	 movsx	 ecx, BYTE PTR _actnum$3[ebp+eax]
  00270	85 c9		 test	 ecx, ecx
  00272	75 02		 jne	 SHORT $LN18@M_PatchLev

; 2606 : 						break;

  00274	eb 22		 jmp	 SHORT $LN6@M_PatchLev
$LN18@M_PatchLev:

; 2607 : 
; 2608 : 					lvltable[j][i++] = actnum[g];

  00276	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00279	c1 e0 06	 shl	 eax, 6
  0027c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0027f	8b 55 e8	 mov	 edx, DWORD PTR _g$2[ebp]
  00282	8a 54 15 ec	 mov	 dl, BYTE PTR _actnum$3[ebp+edx]
  00286	88 94 08 00 00
	00 00		 mov	 BYTE PTR _lvltable[eax+ecx], dl
  0028d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00290	83 c0 01	 add	 eax, 1
  00293	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 2609 : 				}

  00296	eb c1		 jmp	 SHORT $LN5@M_PatchLev
$LN6@M_PatchLev:

; 2610 : 			}
; 2611 : 
; 2612 : 			lvltable[j][i++] = '\0';

  00298	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0029b	c1 e0 06	 shl	 eax, 6
  0029e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002a1	c6 84 08 00 00
	00 00 00	 mov	 BYTE PTR _lvltable[eax+ecx], 0
  002a9	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002ac	83 c2 01	 add	 edx, 1
  002af	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2613 : 			foundone = true;

  002b2	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _foundone$[ebp], 1

; 2614 : 		}

  002b9	eb 16		 jmp	 SHORT $LN11@M_PatchLev
$LN10@M_PatchLev:

; 2615 : 		else
; 2616 : 			lvltable[j][0] = '\0';

  002bb	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  002be	c1 e0 06	 shl	 eax, 6
  002c1	b9 01 00 00 00	 mov	 ecx, 1
  002c6	6b d1 00	 imul	 edx, ecx, 0
  002c9	c6 84 10 00 00
	00 00 00	 mov	 BYTE PTR _lvltable[eax+edx], 0
$LN11@M_PatchLev:

; 2617 : 
; 2618 : 		if (lvltable[j][0] == '\0')

  002d1	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  002d4	c1 e0 06	 shl	 eax, 6
  002d7	b9 01 00 00 00	 mov	 ecx, 1
  002dc	6b d1 00	 imul	 edx, ecx, 0
  002df	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _lvltable[eax+edx]
  002e7	85 c0		 test	 eax, eax
  002e9	75 10		 jne	 SHORT $LN19@M_PatchLev

; 2619 : 			map_cons_t[j].strvalue = NULL;

  002eb	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  002ee	c7 04 c5 04 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _map_cons_t[eax*8+4], 0
  002f9	eb 15		 jmp	 SHORT $LN20@M_PatchLev
$LN19@M_PatchLev:

; 2620 : 		else
; 2621 : 			map_cons_t[j].strvalue = lvltable[j];

  002fb	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  002fe	c1 e0 06	 shl	 eax, 6
  00301	05 00 00 00 00	 add	 eax, OFFSET _lvltable
  00306	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00309	89 04 cd 04 00
	00 00		 mov	 DWORD PTR _map_cons_t[ecx*8+4], eax
$LN20@M_PatchLev:

; 2622 : 	}

  00310	e9 04 fd ff ff	 jmp	 $LN2@M_PatchLev
$LN3@M_PatchLev:

; 2623 : 
; 2624 : 	if (!foundone)

  00315	83 7d f0 00	 cmp	 DWORD PTR _foundone$[ebp], 0
  00319	75 07		 jne	 SHORT $LN21@M_PatchLev

; 2625 : 		return false;

  0031b	33 c0		 xor	 eax, eax
  0031d	e9 ac 00 00 00	 jmp	 $LN1@M_PatchLev
$LN21@M_PatchLev:

; 2626 : 
; 2627 : 	CV_SetValue(&cv_nextmap, cv_nextmap.value); // This causes crash sometimes?!

  00322	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00327	50		 push	 eax
  00328	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  0032d	e8 00 00 00 00	 call	 _CV_SetValue
  00332	83 c4 08	 add	 esp, 8

; 2628 : 
; 2629 : 	if (mode > 0)

  00335	83 7d 08 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00339	0f 8e 84 00 00
	00		 jle	 $LN22@M_PatchLev

; 2630 : 	{
; 2631 : 		INT32 value = 0;

  0033f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 0

; 2632 : 
; 2633 : 		switch (cv_newgametype.value)

  00346	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_newgametype+20
  0034b	89 45 a0	 mov	 DWORD PTR tv253[ebp], eax
  0034e	83 7d a0 04	 cmp	 DWORD PTR tv253[ebp], 4
  00352	77 35		 ja	 SHORT $LN8@M_PatchLev
  00354	8b 4d a0	 mov	 ecx, DWORD PTR tv253[ebp]
  00357	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN30@M_PatchLev[ecx*4]
$LN24@M_PatchLev:

; 2634 : 		{
; 2635 : 			case GT_COOP:
; 2636 : 				value = TOL_COOP;

  0035e	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 1

; 2637 : 				break;

  00365	eb 22		 jmp	 SHORT $LN8@M_PatchLev
$LN25@M_PatchLev:

; 2638 : 			case GT_RACE:
; 2639 : 				value = TOL_RACE;

  00367	c7 45 e4 02 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 2

; 2640 : 				break;

  0036e	eb 19		 jmp	 SHORT $LN8@M_PatchLev
$LN26@M_PatchLev:

; 2641 : 			case GT_MATCH:
; 2642 : 				value = TOL_MATCH;

  00370	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 4

; 2643 : 				break;

  00377	eb 10		 jmp	 SHORT $LN8@M_PatchLev
$LN27@M_PatchLev:

; 2644 : 			case GT_TAG:
; 2645 : 				value = TOL_TAG;

  00379	c7 45 e4 08 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 8

; 2646 : 				break;

  00380	eb 07		 jmp	 SHORT $LN8@M_PatchLev
$LN28@M_PatchLev:

; 2647 : 			case GT_CTF:
; 2648 : 				value = TOL_CTF;

  00382	c7 45 e4 10 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 16 ; 00000010H
$LN8@M_PatchLev:

; 2649 : 				break;
; 2650 : 		}
; 2651 : 
; 2652 : 		CV_SetValue(&cv_nextmap, FindFirstMap(value));

  00389	8b 45 e4	 mov	 eax, DWORD PTR _value$1[ebp]
  0038c	50		 push	 eax
  0038d	e8 00 00 00 00	 call	 _FindFirstMap
  00392	83 c4 04	 add	 esp, 4
  00395	50		 push	 eax
  00396	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  0039b	e8 00 00 00 00	 call	 _CV_SetValue
  003a0	83 c4 08	 add	 esp, 8

; 2653 : 		CV_AddValue(&cv_nextmap, -1);

  003a3	6a ff		 push	 -1
  003a5	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  003aa	e8 00 00 00 00	 call	 _CV_AddValue
  003af	83 c4 08	 add	 esp, 8

; 2654 : 		CV_AddValue(&cv_nextmap, 1);

  003b2	6a 01		 push	 1
  003b4	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  003b9	e8 00 00 00 00	 call	 _CV_AddValue
  003be	83 c4 08	 add	 esp, 8

; 2655 : 	}

  003c1	eb 06		 jmp	 SHORT $LN23@M_PatchLev
$LN22@M_PatchLev:

; 2656 : 	else
; 2657 : 		Newgametype_OnChange(); // Make sure to start on an appropriate map if wads have been added

  003c3	e8 00 00 00 00	 call	 _Newgametype_OnChange
  003c8	90		 npad	 1
$LN23@M_PatchLev:

; 2658 : 
; 2659 : 	return true;

  003c9	b8 01 00 00 00	 mov	 eax, 1
$LN1@M_PatchLev:

; 2660 : }

  003ce	5f		 pop	 edi
  003cf	5e		 pop	 esi
  003d0	5b		 pop	 ebx
  003d1	8b e5		 mov	 esp, ebp
  003d3	5d		 pop	 ebp
  003d4	c3		 ret	 0
  003d5	0f 1f 00	 npad	 3
$LN30@M_PatchLev:
  003d8	00 00 00 00	 DD	 $LN24@M_PatchLev
  003dc	00 00 00 00	 DD	 $LN26@M_PatchLev
  003e0	00 00 00 00	 DD	 $LN25@M_PatchLev
  003e4	00 00 00 00	 DD	 $LN27@M_PatchLev
  003e8	00 00 00 00	 DD	 $LN28@M_PatchLev
_M_PatchLevelNameTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawServerMenu
_TEXT	SEGMENT
_PictureOfLevel$ = -8					; size = 4
_lumpnum$ = -4						; size = 4
_M_DrawServerMenu PROC					; COMDAT

; 2448 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2449 : 	lumpnum_t lumpnum;
; 2450 : 	patch_t *PictureOfLevel;
; 2451 : 
; 2452 : 	M_DrawGenericMenu();

  00009	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  0000e	90		 npad	 1

; 2453 : 
; 2454 : 	//  A 160x100 image of the level as entry MAPxxP
; 2455 : 	lumpnum = W_CheckNumForName(va("%sP", G_BuildMapName(cv_nextmap.value)));

  0000f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _G_BuildMapName
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_03KFFLPELC@?$CFsP@
  00023	e8 00 00 00 00	 call	 _va
  00028	83 c4 08	 add	 esp, 8
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _W_CheckNumForName
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 fc	 mov	 DWORD PTR _lumpnum$[ebp], eax

; 2456 : 
; 2457 : 	if (lumpnum != LUMPERROR)

  00037	83 7d fc ff	 cmp	 DWORD PTR _lumpnum$[ebp], -1
  0003b	74 2c		 je	 SHORT $LN2@M_DrawServ

; 2458 : 		PictureOfLevel = W_CachePatchName(va("%sP", G_BuildMapName(cv_nextmap.value)), PU_CACHE);

  0003d	6a 65		 push	 101			; 00000065H
  0003f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _G_BuildMapName
  0004a	83 c4 04	 add	 esp, 4
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_03KFFLPELC@?$CFsP@
  00053	e8 00 00 00 00	 call	 _va
  00058	83 c4 08	 add	 esp, 8
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _W_CachePatchName
  00061	83 c4 08	 add	 esp, 8
  00064	89 45 f8	 mov	 DWORD PTR _PictureOfLevel$[ebp], eax
  00067	eb 12		 jmp	 SHORT $LN3@M_DrawServ
$LN2@M_DrawServ:

; 2459 : 	else
; 2460 : 		PictureOfLevel = W_CachePatchName("BLANKLVL", PU_CACHE);

  00069	6a 65		 push	 101			; 00000065H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_08IKJCNOHF@BLANKLVL@
  00070	e8 00 00 00 00	 call	 _W_CachePatchName
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 f8	 mov	 DWORD PTR _PictureOfLevel$[ebp], eax
$LN3@M_DrawServ:

; 2461 : 
; 2462 : 	V_DrawSmallScaledPatch((BASEVIDWIDTH*3/4)-(SHORT(PictureOfLevel->width)/4), ((BASEVIDHEIGHT*3/4)-(SHORT(PictureOfLevel->height)/4)+10), 0, PictureOfLevel);

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _PictureOfLevel$[ebp]
  0007e	50		 push	 eax
  0007f	6a 00		 push	 0
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _PictureOfLevel$[ebp]
  00084	0f bf 41 02	 movsx	 eax, WORD PTR [ecx+2]
  00088	99		 cdq
  00089	83 e2 03	 and	 edx, 3
  0008c	03 c2		 add	 eax, edx
  0008e	c1 f8 02	 sar	 eax, 2
  00091	ba 96 00 00 00	 mov	 edx, 150		; 00000096H
  00096	2b d0		 sub	 edx, eax
  00098	83 c2 0a	 add	 edx, 10			; 0000000aH
  0009b	52		 push	 edx
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _PictureOfLevel$[ebp]
  0009f	0f bf 00	 movsx	 eax, WORD PTR [eax]
  000a2	99		 cdq
  000a3	83 e2 03	 and	 edx, 3
  000a6	03 c2		 add	 eax, edx
  000a8	c1 f8 02	 sar	 eax, 2
  000ab	b9 f0 00 00 00	 mov	 ecx, 240		; 000000f0H
  000b0	2b c8		 sub	 ecx, eax
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _V_DrawSmallScaledPatch
  000b8	83 c4 10	 add	 esp, 16			; 00000010H

; 2463 : }

  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_M_DrawServerMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_StartServer
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_StartServer PROC					; COMDAT

; 2397 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2398 : 	(void)choice;
; 2399 : 	if (!StartSplitScreenGame)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _StartSplitScreenGame, 0
  00010	75 0a		 jne	 SHORT $LN2@M_StartSer

; 2400 : 		netgame = true;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _netgame, 1
$LN2@M_StartSer:

; 2401 : 
; 2402 : 	multiplayer = true;

  0001c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _multiplayer, 1

; 2403 : 
; 2404 : 	// Special Cases
; 2405 : 	if (cv_newgametype.value == GTF_TEAMMATCH)

  00026	83 3d 14 00 00
	00 2a		 cmp	 DWORD PTR _cv_newgametype+20, 42 ; 0000002aH
  0002d	75 14		 jne	 SHORT $LN3@M_StartSer

; 2406 : 		CV_SetValue(&cv_matchtype, 1);

  0002f	6a 01		 push	 1
  00031	68 00 00 00 00	 push	 OFFSET _cv_matchtype
  00036	e8 00 00 00 00	 call	 _CV_SetValue
  0003b	83 c4 08	 add	 esp, 8
  0003e	e9 80 00 00 00	 jmp	 $LN13@M_StartSer
$LN3@M_StartSer:

; 2407 : 	else if (cv_newgametype.value == GTF_CLASSICRACE)

  00043	83 3d 14 00 00
	00 2b		 cmp	 DWORD PTR _cv_newgametype+20, 43 ; 0000002bH
  0004a	75 11		 jne	 SHORT $LN5@M_StartSer

; 2408 : 		CV_SetValue(&cv_racetype, 1);

  0004c	6a 01		 push	 1
  0004e	68 00 00 00 00	 push	 OFFSET _cv_racetype
  00053	e8 00 00 00 00	 call	 _CV_SetValue
  00058	83 c4 08	 add	 esp, 8
  0005b	eb 66		 jmp	 SHORT $LN13@M_StartSer
$LN5@M_StartSer:

; 2409 : 	else if (cv_newgametype.value == GTF_HIDEANDSEEK)

  0005d	83 3d 14 00 00
	00 2c		 cmp	 DWORD PTR _cv_newgametype+20, 44 ; 0000002cH
  00064	75 11		 jne	 SHORT $LN7@M_StartSer

; 2410 : 		CV_SetValue(&cv_tagtype, 1);

  00066	6a 01		 push	 1
  00068	68 00 00 00 00	 push	 OFFSET _cv_tagtype
  0006d	e8 00 00 00 00	 call	 _CV_SetValue
  00072	83 c4 08	 add	 esp, 8
  00075	eb 4c		 jmp	 SHORT $LN13@M_StartSer
$LN7@M_StartSer:

; 2411 : 	else if (cv_newgametype.value == GT_MATCH)

  00077	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_newgametype+20, 1
  0007e	75 11		 jne	 SHORT $LN9@M_StartSer

; 2412 : 		CV_SetValue(&cv_matchtype, 0);

  00080	6a 00		 push	 0
  00082	68 00 00 00 00	 push	 OFFSET _cv_matchtype
  00087	e8 00 00 00 00	 call	 _CV_SetValue
  0008c	83 c4 08	 add	 esp, 8
  0008f	eb 32		 jmp	 SHORT $LN13@M_StartSer
$LN9@M_StartSer:

; 2413 : 	else if (cv_newgametype.value == GT_RACE)

  00091	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_newgametype+20, 2
  00098	75 11		 jne	 SHORT $LN11@M_StartSer

; 2414 : 		CV_SetValue(&cv_racetype, 0);

  0009a	6a 00		 push	 0
  0009c	68 00 00 00 00	 push	 OFFSET _cv_racetype
  000a1	e8 00 00 00 00	 call	 _CV_SetValue
  000a6	83 c4 08	 add	 esp, 8
  000a9	eb 18		 jmp	 SHORT $LN13@M_StartSer
$LN11@M_StartSer:

; 2415 : 	else if (cv_newgametype.value == GT_TAG)

  000ab	83 3d 14 00 00
	00 03		 cmp	 DWORD PTR _cv_newgametype+20, 3
  000b2	75 0f		 jne	 SHORT $LN13@M_StartSer

; 2416 : 		CV_SetValue(&cv_tagtype, 0);

  000b4	6a 00		 push	 0
  000b6	68 00 00 00 00	 push	 OFFSET _cv_tagtype
  000bb	e8 00 00 00 00	 call	 _CV_SetValue
  000c0	83 c4 08	 add	 esp, 8
$LN13@M_StartSer:

; 2417 : 
; 2418 : 	// Just in case you were in devmode before starting the server.
; 2419 : 	if (!cv_cheats.value)

  000c3	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_cheats+20, 0
  000ca	75 06		 jne	 SHORT $LN14@M_StartSer

; 2420 : 		CV_ResetCheatNetVars();

  000cc	e8 00 00 00 00	 call	 _CV_ResetCheatNetVars
  000d1	90		 npad	 1
$LN14@M_StartSer:

; 2421 : 
; 2422 : 	if (!StartSplitScreenGame)

  000d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _StartSplitScreenGame, 0
  000d9	75 44		 jne	 SHORT $LN15@M_StartSer

; 2423 : 	{
; 2424 : 		if (demoplayback)

  000db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  000e2	74 0d		 je	 SHORT $LN17@M_StartSer

; 2425 : 			COM_BufAddText("stopdemo\n");

  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_09PLHIKHMP@stopdemo?6@
  000e9	e8 00 00 00 00	 call	 _COM_BufAddText
  000ee	83 c4 04	 add	 esp, 4
$LN17@M_StartSer:

; 2426 : 		D_MapChange(cv_nextmap.value, cv_newgametype.value, false, 1, 1, false, false);

  000f1	6a 00		 push	 0
  000f3	6a 00		 push	 0
  000f5	6a 01		 push	 1
  000f7	6a 01		 push	 1
  000f9	6a 00		 push	 0
  000fb	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_newgametype+20
  00100	50		 push	 eax
  00101	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_nextmap+20
  00107	51		 push	 ecx
  00108	e8 00 00 00 00	 call	 _D_MapChange
  0010d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2427 : 		COM_BufAddText("dummyconsvar 1\n");

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OPCGMOGJ@dummyconsvar?51?6@
  00115	e8 00 00 00 00	 call	 _COM_BufAddText
  0011a	83 c4 04	 add	 esp, 4

; 2428 : 	}

  0011d	eb 5b		 jmp	 SHORT $LN16@M_StartSer
$LN15@M_StartSer:

; 2429 : 	else // split screen
; 2430 : 	{
; 2431 : 		paused = false;

  0011f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 2432 : 		if (demoplayback)

  00126	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  0012d	74 0d		 je	 SHORT $LN18@M_StartSer

; 2433 : 			COM_BufAddText("stopdemo\n");

  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_09PLHIKHMP@stopdemo?6@
  00134	e8 00 00 00 00	 call	 _COM_BufAddText
  00139	83 c4 04	 add	 esp, 4
$LN18@M_StartSer:

; 2434 : 
; 2435 : 		SV_StartSinglePlayerServer();

  0013c	e8 00 00 00 00	 call	 _SV_StartSinglePlayerServer
  00141	90		 npad	 1

; 2436 : 		if (!splitscreen)

  00142	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00149	75 10		 jne	 SHORT $LN19@M_StartSer

; 2437 : 		{
; 2438 : 			splitscreen = true;

  0014b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _splitscreen, 1

; 2439 : 			SplitScreen_OnChange();

  00155	e8 00 00 00 00	 call	 _SplitScreen_OnChange
  0015a	90		 npad	 1
$LN19@M_StartSer:

; 2440 : 		}
; 2441 : 		D_MapChange(cv_nextmap.value, cv_newgametype.value, false, 1, 1, false, false);

  0015b	6a 00		 push	 0
  0015d	6a 00		 push	 0
  0015f	6a 01		 push	 1
  00161	6a 01		 push	 1
  00163	6a 00		 push	 0
  00165	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_newgametype+20
  0016a	50		 push	 eax
  0016b	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_nextmap+20
  00171	51		 push	 ecx
  00172	e8 00 00 00 00	 call	 _D_MapChange
  00177	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN16@M_StartSer:

; 2442 : 	}
; 2443 : 
; 2444 : 	M_ClearMenus(true);

  0017a	6a 01		 push	 1
  0017c	e8 00 00 00 00	 call	 _M_ClearMenus
  00181	83 c4 04	 add	 esp, 4

; 2445 : }

  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
_M_StartServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ConfirmTeamChange
_TEXT	SEGMENT
tv70 = -68						; size = 4
_choice$ = 8						; size = 4
_M_ConfirmTeamChange PROC				; COMDAT

; 2372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2373 : 	(void)choice;
; 2374 : 	if (!cv_allowteamchange.value && cv_dummyteam.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowteamchange+20, 0
  00010	75 1c		 jne	 SHORT $LN4@M_ConfirmT
  00012	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_dummyteam+20, 0
  00019	74 13		 je	 SHORT $LN4@M_ConfirmT

; 2375 : 	{
; 2376 : 		M_StartMessage("The server is not allowing\n team changes at this time.\nPress a key.", NULL, MM_NOTHING);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@NNCCBNBK@The?5server?5is?5not?5allowing?6?5tea@
  00024	e8 00 00 00 00	 call	 _M_StartMessage
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2377 : 		return;

  0002c	eb 51		 jmp	 SHORT $LN2@M_ConfirmT
$LN4@M_ConfirmT:

; 2378 : 	}
; 2379 : 
; 2380 : 	M_ClearMenus(true);

  0002e	6a 01		 push	 1
  00030	e8 00 00 00 00	 call	 _M_ClearMenus
  00035	83 c4 04	 add	 esp, 4

; 2381 : 
; 2382 : 	switch (cv_dummyteam.value)

  00038	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_dummyteam+20
  0003d	89 45 bc	 mov	 DWORD PTR tv70[ebp], eax
  00040	83 7d bc 00	 cmp	 DWORD PTR tv70[ebp], 0
  00044	74 0e		 je	 SHORT $LN5@M_ConfirmT
  00046	83 7d bc 01	 cmp	 DWORD PTR tv70[ebp], 1
  0004a	74 17		 je	 SHORT $LN6@M_ConfirmT
  0004c	83 7d bc 02	 cmp	 DWORD PTR tv70[ebp], 2
  00050	74 20		 je	 SHORT $LN7@M_ConfirmT
  00052	eb 2b		 jmp	 SHORT $LN2@M_ConfirmT
$LN5@M_ConfirmT:

; 2383 : 	{
; 2384 : 		case 0:
; 2385 : 			COM_ImmedExecute("changeteam spectator");

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GABIEGHI@changeteam?5spectator@
  00059	e8 00 00 00 00	 call	 _COM_ImmedExecute
  0005e	83 c4 04	 add	 esp, 4

; 2386 : 			break;

  00061	eb 1c		 jmp	 SHORT $LN2@M_ConfirmT
$LN6@M_ConfirmT:

; 2387 : 		case 1:
; 2388 : 			COM_ImmedExecute("changeteam red");

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HLFJDFHH@changeteam?5red@
  00068	e8 00 00 00 00	 call	 _COM_ImmedExecute
  0006d	83 c4 04	 add	 esp, 4

; 2389 : 			break;

  00070	eb 0d		 jmp	 SHORT $LN2@M_ConfirmT
$LN7@M_ConfirmT:

; 2390 : 		case 2:
; 2391 : 			COM_ImmedExecute("changeteam blue");

  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NGJMDDAH@changeteam?5blue@
  00077	e8 00 00 00 00	 call	 _COM_ImmedExecute
  0007c	83 c4 04	 add	 esp, 4
$LN2@M_ConfirmT:

; 2392 : 			break;
; 2393 : 	}
; 2394 : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_M_ConfirmTeamChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ChangeLevel
_TEXT	SEGMENT
$T1 = -80						; size = 4
_mapname$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_choice$ = 8						; size = 4
_M_ChangeLevel PROC					; COMDAT

; 2336 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 2337 : 	char mapname[6];
; 2338 : 	(void)choice;
; 2339 : 
; 2340 : 	strlcpy(mapname, G_BuildMapName(cv_nextmap.value), sizeof (mapname));

  00013	6a 06		 push	 6
  00015	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _G_BuildMapName
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8d 4d f4	 lea	 ecx, DWORD PTR _mapname$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _strlcpy
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2341 : 	strlwr(mapname);

  00030	8d 45 f4	 lea	 eax, DWORD PTR _mapname$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _strlwr
  00039	83 c4 04	 add	 esp, 4

; 2342 : 	mapname[5] = '\0';

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	6b c8 05	 imul	 ecx, eax, 5
  00044	89 4d b0	 mov	 DWORD PTR $T1[ebp], ecx
  00047	83 7d b0 06	 cmp	 DWORD PTR $T1[ebp], 6
  0004b	73 02		 jae	 SHORT $LN3@M_ChangeLe
  0004d	eb 06		 jmp	 SHORT $LN4@M_ChangeLe
$LN3@M_ChangeLe:
  0004f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00054	90		 npad	 1
$LN4@M_ChangeLe:
  00055	8b 55 b0	 mov	 edx, DWORD PTR $T1[ebp]
  00058	c6 44 15 f4 00	 mov	 BYTE PTR _mapname$[ebp+edx], 0

; 2343 : 
; 2344 : 	M_ClearMenus(true);

  0005d	6a 01		 push	 1
  0005f	e8 00 00 00 00	 call	 _M_ClearMenus
  00064	83 c4 04	 add	 esp, 4

; 2345 : 	COM_BufAddText(va("map %s -gametype \"%s\"\n", mapname, cv_newgametype.string));

  00067	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_newgametype+24
  0006c	50		 push	 eax
  0006d	8d 4d f4	 lea	 ecx, DWORD PTR _mapname$[ebp]
  00070	51		 push	 ecx
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FEIAKPDG@map?5?$CFs?5?9gametype?5?$CC?$CFs?$CC?6@
  00076	e8 00 00 00 00	 call	 _va
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _COM_BufAddText
  00084	83 c4 04	 add	 esp, 4
$LN1@M_ChangeLe:

; 2346 : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008d	33 cd		 xor	 ecx, ebp
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_M_ChangeLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _FindFirstMap
_TEXT	SEGMENT
_i$ = -4						; size = 4
_gtype$ = 8						; size = 4
_FindFirstMap PROC					; COMDAT

; 2279 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2280 : 	INT32 i;
; 2281 : 
; 2282 : 	for (i = 0; i < NUMMAPS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@FindFirstM
$LN2@FindFirstM:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@FindFirstM:
  0001b	81 7d fc 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  00022	7d 1d		 jge	 SHORT $LN3@FindFirstM

; 2283 : 	{
; 2284 : 		if (mapheaderinfo[i].typeoflevel & gtype)

  00024	69 45 fc 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  0002b	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  00032	23 4d 08	 and	 ecx, DWORD PTR _gtype$[ebp]
  00035	74 08		 je	 SHORT $LN5@FindFirstM

; 2285 : 			return i + 1;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003a	83 c0 01	 add	 eax, 1
  0003d	eb 07		 jmp	 SHORT $LN1@FindFirstM
$LN5@FindFirstM:

; 2286 : 	}

  0003f	eb d1		 jmp	 SHORT $LN2@FindFirstM
$LN3@FindFirstM:

; 2287 : 
; 2288 : 	return 1;

  00041	b8 01 00 00 00	 mov	 eax, 1
$LN1@FindFirstM:

; 2289 : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_FindFirstMap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _Nextmap_OnChange
_TEXT	SEGMENT
_Nextmap_OnChange PROC					; COMDAT

; 4202 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4203 : 	if (currentMenu != &TimeAttackDef)

  00009	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _TimeAttackDef
  00013	74 02		 je	 SHORT $LN2@Nextmap_On

; 4204 : 		return;

  00015	eb 63		 jmp	 SHORT $LN3@Nextmap_On
$LN2@Nextmap_On:

; 4205 : 
; 4206 : 	TimeAttackMenu[tareplay].status = IT_DISABLED;

  00017	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0001c	d1 e0		 shl	 eax, 1
  0001e	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00023	66 89 88 00 00
	00 00		 mov	 WORD PTR _TimeAttackMenu[eax], cx

; 4207 : 
; 4208 : 	// Check if file exists, if not, disable REPLAY option
; 4209 : 	if (FIL_FileExists(va("%s"PATHSEP"replay"PATHSEP"%s"PATHSEP"%s-%02d.lmp", srb2home, timeattackfolder, G_BuildMapName(cv_nextmap.value), cv_chooseskin.value-1)))

  0002a	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  0002f	83 e8 01	 sub	 eax, 1
  00032	50		 push	 eax
  00033	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_nextmap+20
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _G_BuildMapName
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET _timeattackfolder
  00048	68 00 00 00 00	 push	 OFFSET _srb2home
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GMJPPENF@?$CFs?2replay?2?$CFs?2?$CFs?9?$CF02d?4lmp@
  00052	e8 00 00 00 00	 call	 _va
  00057	83 c4 14	 add	 esp, 20			; 00000014H
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _FIL_FileExists
  00060	83 c4 04	 add	 esp, 4
  00063	85 c0		 test	 eax, eax
  00065	74 13		 je	 SHORT $LN3@Nextmap_On

; 4210 : 		TimeAttackMenu[tareplay].status = IT_WHITESTRING|IT_CALL;

  00067	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0006c	d1 e0		 shl	 eax, 1
  0006e	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00073	66 89 88 00 00
	00 00		 mov	 WORD PTR _TimeAttackMenu[eax], cx
$LN3@Nextmap_On:

; 4211 : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_Nextmap_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _Newgametype_OnChange
_TEXT	SEGMENT
tv140 = -72						; size = 4
_value$1 = -4						; size = 4
_Newgametype_OnChange PROC				; COMDAT

; 2295 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2296 : 	if (menuactive)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00010	0f 84 5c 01 00
	00		 je	 $LN5@Newgametyp

; 2297 : 	{
; 2298 : 		if ((cv_newgametype.value == GT_COOP && !(mapheaderinfo[cv_nextmap.value-1].typeoflevel & TOL_COOP)) ||
; 2299 : 			((cv_newgametype.value == GT_RACE || cv_newgametype.value == GTF_CLASSICRACE) && !(mapheaderinfo[cv_nextmap.value-1].typeoflevel & TOL_RACE)) ||
; 2300 : 			((cv_newgametype.value == GT_MATCH || cv_newgametype.value == GTF_TEAMMATCH) && !(mapheaderinfo[cv_nextmap.value-1].typeoflevel & TOL_MATCH)) ||
; 2301 : #ifdef CHAOSISNOTDEADYET
; 2302 : 			(cv_newgametype.value == GT_CHAOS && !(mapheaderinfo[cv_nextmap.value-1].typeoflevel & TOL_CHAOS)) ||
; 2303 : #endif
; 2304 : 			((cv_newgametype.value == GT_TAG || cv_newgametype.value == GTF_HIDEANDSEEK) && !(mapheaderinfo[cv_nextmap.value-1].typeoflevel & TOL_TAG)) ||

  00016	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_newgametype+20, 0
  0001d	75 1e		 jne	 SHORT $LN7@Newgametyp
  0001f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00024	83 e8 01	 sub	 eax, 1
  00027	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0002d	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  00034	83 e2 01	 and	 edx, 1
  00037	0f 84 b3 00 00
	00		 je	 $LN6@Newgametyp
$LN7@Newgametyp:
  0003d	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_newgametype+20, 2
  00044	74 09		 je	 SHORT $LN9@Newgametyp
  00046	83 3d 14 00 00
	00 2b		 cmp	 DWORD PTR _cv_newgametype+20, 43 ; 0000002bH
  0004d	75 1e		 jne	 SHORT $LN8@Newgametyp
$LN9@Newgametyp:
  0004f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00054	83 e8 01	 sub	 eax, 1
  00057	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0005d	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  00064	83 e2 02	 and	 edx, 2
  00067	0f 84 83 00 00
	00		 je	 $LN6@Newgametyp
$LN8@Newgametyp:
  0006d	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_newgametype+20, 1
  00074	74 09		 je	 SHORT $LN11@Newgametyp
  00076	83 3d 14 00 00
	00 2a		 cmp	 DWORD PTR _cv_newgametype+20, 42 ; 0000002aH
  0007d	75 1a		 jne	 SHORT $LN10@Newgametyp
$LN11@Newgametyp:
  0007f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  00084	83 e8 01	 sub	 eax, 1
  00087	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0008d	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  00094	83 e2 04	 and	 edx, 4
  00097	74 57		 je	 SHORT $LN6@Newgametyp
$LN10@Newgametyp:
  00099	83 3d 14 00 00
	00 03		 cmp	 DWORD PTR _cv_newgametype+20, 3
  000a0	74 09		 je	 SHORT $LN13@Newgametyp
  000a2	83 3d 14 00 00
	00 2c		 cmp	 DWORD PTR _cv_newgametype+20, 44 ; 0000002cH
  000a9	75 1a		 jne	 SHORT $LN12@Newgametyp
$LN13@Newgametyp:
  000ab	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  000b0	83 e8 01	 sub	 eax, 1
  000b3	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000b9	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  000c0	83 e2 08	 and	 edx, 8
  000c3	74 2b		 je	 SHORT $LN6@Newgametyp
$LN12@Newgametyp:
  000c5	83 3d 14 00 00
	00 04		 cmp	 DWORD PTR _cv_newgametype+20, 4
  000cc	0f 85 a0 00 00
	00		 jne	 $LN5@Newgametyp
  000d2	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nextmap+20
  000d7	83 e8 01	 sub	 eax, 1
  000da	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000e0	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  000e7	83 e2 10	 and	 edx, 16			; 00000010H
  000ea	0f 85 82 00 00
	00		 jne	 $LN5@Newgametyp
$LN6@Newgametyp:

; 2305 : 			(cv_newgametype.value == GT_CTF && !(mapheaderinfo[cv_nextmap.value-1].typeoflevel & TOL_CTF)))
; 2306 : 		{
; 2307 : 			INT32 value = 0;

  000f0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 0

; 2308 : 
; 2309 : 			switch (cv_newgametype.value)

  000f7	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_newgametype+20
  000fc	89 45 b8	 mov	 DWORD PTR tv140[ebp], eax
  000ff	83 7d b8 04	 cmp	 DWORD PTR tv140[ebp], 4
  00103	77 35		 ja	 SHORT $LN2@Newgametyp
  00105	8b 4d b8	 mov	 ecx, DWORD PTR tv140[ebp]
  00108	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN20@Newgametyp[ecx*4]
$LN14@Newgametyp:

; 2310 : 			{
; 2311 : 				case GT_COOP:
; 2312 : 					value = TOL_COOP;

  0010f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 1

; 2313 : 					break;

  00116	eb 22		 jmp	 SHORT $LN2@Newgametyp
$LN15@Newgametyp:

; 2314 : 				case GT_RACE:
; 2315 : 					value = TOL_RACE;

  00118	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 2

; 2316 : 					break;

  0011f	eb 19		 jmp	 SHORT $LN2@Newgametyp
$LN16@Newgametyp:

; 2317 : 				case GT_MATCH:
; 2318 : 					value = TOL_MATCH;

  00121	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 4

; 2319 : 					break;

  00128	eb 10		 jmp	 SHORT $LN2@Newgametyp
$LN17@Newgametyp:

; 2320 : 				case GT_TAG:
; 2321 : 					value = TOL_TAG;

  0012a	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 8

; 2322 : 					break;

  00131	eb 07		 jmp	 SHORT $LN2@Newgametyp
$LN18@Newgametyp:

; 2323 : 				case GT_CTF:
; 2324 : 					value = TOL_CTF;

  00133	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _value$1[ebp], 16 ; 00000010H
$LN2@Newgametyp:

; 2325 : 					break;
; 2326 : 			}
; 2327 : 
; 2328 : 			CV_SetValue(&cv_nextmap, FindFirstMap(value));

  0013a	8b 45 fc	 mov	 eax, DWORD PTR _value$1[ebp]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 _FindFirstMap
  00143	83 c4 04	 add	 esp, 4
  00146	50		 push	 eax
  00147	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  0014c	e8 00 00 00 00	 call	 _CV_SetValue
  00151	83 c4 08	 add	 esp, 8

; 2329 : 			CV_AddValue(&cv_nextmap, -1);

  00154	6a ff		 push	 -1
  00156	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  0015b	e8 00 00 00 00	 call	 _CV_AddValue
  00160	83 c4 08	 add	 esp, 8

; 2330 : 			CV_AddValue(&cv_nextmap, 1);

  00163	6a 01		 push	 1
  00165	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  0016a	e8 00 00 00 00	 call	 _CV_AddValue
  0016f	83 c4 08	 add	 esp, 8
$LN5@Newgametyp:

; 2331 : 		}
; 2332 : 	}
; 2333 : }

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
  00179	0f 1f 00	 npad	 3
$LN20@Newgametyp:
  0017c	00 00 00 00	 DD	 $LN14@Newgametyp
  00180	00 00 00 00	 DD	 $LN16@Newgametyp
  00184	00 00 00 00	 DD	 $LN15@Newgametyp
  00188	00 00 00 00	 DD	 $LN17@Newgametyp
  0018c	00 00 00 00	 DD	 $LN18@Newgametyp
_Newgametype_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ConnectIPMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ConnectIPMenu PROC					; COMDAT

; 1161 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1162 : 	(void)choice;
; 1163 : 	if (modifiedgame)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00010	74 13		 je	 SHORT $LN2@M_ConnectI

; 1164 : 	{
; 1165 : 		M_StartMessage("You have wad files loaded and/or\nmodified the game in some way.\nPlease restart SRB2 before\nconnecting.", NULL, MM_NOTHING);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@
  0001b	e8 00 00 00 00	 call	 _M_StartMessage
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1166 : 		return;

  00023	eb 2d		 jmp	 SHORT $LN1@M_ConnectI
$LN2@M_ConnectI:

; 1167 : 	}
; 1168 : 
; 1169 : 	if (Playing())

  00025	e8 00 00 00 00	 call	 _Playing
  0002a	85 c0		 test	 eax, eax
  0002c	74 17		 je	 SHORT $LN3@M_ConnectI

; 1170 : 	{
; 1171 : 		M_StartMessage(ALREADYPLAYING,M_ExitGameResponse,MM_YESNO);

  0002e	6a 01		 push	 1
  00030	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR _ALREADYPLAYING
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _M_StartMessage
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1172 : 		return;

  00043	eb 0d		 jmp	 SHORT $LN1@M_ConnectI
$LN3@M_ConnectI:

; 1173 : 	}
; 1174 : 
; 1175 : 	M_SetupNextMenu(&ConnectIPdef);

  00045	68 00 00 00 00	 push	 OFFSET _ConnectIPdef
  0004a	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0004f	83 c4 04	 add	 esp, 4
$LN1@M_ConnectI:

; 1176 : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_M_ConnectIPMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ConnectLANMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ConnectLANMenu PROC					; COMDAT

; 1129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1130 : 	(void)choice;
; 1131 : 	if (modifiedgame)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00010	74 16		 je	 SHORT $LN2@M_ConnectL

; 1132 : 	{
; 1133 : 		M_StartMessage("You have wad files loaded and/or\nmodified the game in some way.\nPlease restart SRB2 before\nconnecting.", NULL, MM_NOTHING);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@
  0001b	e8 00 00 00 00	 call	 _M_StartMessage
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1134 : 		return;

  00023	e9 a5 00 00 00	 jmp	 $LN1@M_ConnectL
$LN2@M_ConnectL:

; 1135 : 	}
; 1136 : 
; 1137 : 	if (Playing())

  00028	e8 00 00 00 00	 call	 _Playing
  0002d	85 c0		 test	 eax, eax
  0002f	74 1a		 je	 SHORT $LN3@M_ConnectL

; 1138 : 	{
; 1139 : 		M_StartMessage(ALREADYPLAYING,M_ExitGameResponse,MM_YESNO);

  00031	6a 01		 push	 1
  00033	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR _ALREADYPLAYING
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _M_StartMessage
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1140 : 		return;

  00046	e9 82 00 00 00	 jmp	 $LN1@M_ConnectL
$LN3@M_ConnectL:

; 1141 : 	}
; 1142 : 
; 1143 : 	// Display a little "please wait" message.
; 1144 : 	M_DrawTextBox(52, BASEVIDHEIGHT/2-10, 25, 3);

  0004b	6a 03		 push	 3
  0004d	6a 19		 push	 25			; 00000019H
  0004f	6a 5a		 push	 90			; 0000005aH
  00051	6a 34		 push	 52			; 00000034H
  00053	e8 00 00 00 00	 call	 _M_DrawTextBox
  00058	83 c4 10	 add	 esp, 16			; 00000010H

; 1145 : 	V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT/2, 0, "Searching Local Network for Servers...");

  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MIMHNKJK@Searching?5Local?5Network?5for?5Ser@
  00060	6a 00		 push	 0
  00062	6a 64		 push	 100			; 00000064H
  00064	68 a0 00 00 00	 push	 160			; 000000a0H
  00069	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0006e	83 c4 10	 add	 esp, 16			; 00000010H

; 1146 : 	V_DrawCenteredString(BASEVIDWIDTH/2, (BASEVIDHEIGHT/2)+12, 0, "Please wait.");

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PJMDIAEP@Please?5wait?4@
  00076	6a 00		 push	 0
  00078	6a 70		 push	 112			; 00000070H
  0007a	68 a0 00 00 00	 push	 160			; 000000a0H
  0007f	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00084	83 c4 10	 add	 esp, 16			; 00000010H

; 1147 : 	I_OsPolling();

  00087	e8 00 00 00 00	 call	 _I_OsPolling
  0008c	90		 npad	 1

; 1148 : 	I_UpdateNoBlit();

  0008d	e8 00 00 00 00	 call	 _I_UpdateNoBlit
  00092	90		 npad	 1

; 1149 : 	if (rendermode == render_soft)

  00093	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0009a	75 06		 jne	 SHORT $LN4@M_ConnectL

; 1150 : 		I_FinishUpdate(); // page flip or blit buffer

  0009c	e8 00 00 00 00	 call	 _I_FinishUpdate
  000a1	90		 npad	 1
$LN4@M_ConnectL:

; 1151 : 
; 1152 : 	// first page of servers
; 1153 : 	cv_serversearch.value = 0;

  000a2	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cv_serversearch+20, 0

; 1154 : 	serverlistpage = 0;

  000ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _serverlistpage, 0

; 1155 : 	M_SetupNextMenu(&ConnectLANdef);

  000b6	68 00 00 00 00	 push	 OFFSET _ConnectLANdef
  000bb	e8 00 00 00 00	 call	 _M_SetupNextMenu
  000c0	83 c4 04	 add	 esp, 4

; 1156 : 	M_Refresh(0);

  000c3	6a 00		 push	 0
  000c5	e8 00 00 00 00	 call	 _M_Refresh
  000ca	83 c4 04	 add	 esp, 4
$LN1@M_ConnectL:

; 1157 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_M_ConnectLANMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ConnectMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ConnectMenu PROC					; COMDAT

; 1089 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1090 : 	(void)choice;
; 1091 : 	if (modifiedgame)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00010	74 16		 je	 SHORT $LN2@M_ConnectM

; 1092 : 	{
; 1093 : 		M_StartMessage("You have wad files loaded and/or\nmodified the game in some way.\nPlease restart SRB2 before\nconnecting.", NULL, MM_NOTHING);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@IPBBBCDP@You?5have?5wad?5files?5loaded?5and?1o@
  0001b	e8 00 00 00 00	 call	 _M_StartMessage
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1094 : 		return;

  00023	e9 be 00 00 00	 jmp	 $LN6@M_ConnectM
$LN2@M_ConnectM:

; 1095 : 	}
; 1096 : 
; 1097 : 	if (Playing())

  00028	e8 00 00 00 00	 call	 _Playing
  0002d	85 c0		 test	 eax, eax
  0002f	74 1a		 je	 SHORT $LN3@M_ConnectM

; 1098 : 	{
; 1099 : 		M_StartMessage(ALREADYPLAYING,M_ExitGameResponse,MM_YESNO);

  00031	6a 01		 push	 1
  00033	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR _ALREADYPLAYING
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _M_StartMessage
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1100 : 		return;

  00046	e9 9b 00 00 00	 jmp	 $LN6@M_ConnectM
$LN3@M_ConnectM:

; 1101 : 	}
; 1102 : 
; 1103 : 	// Display a little "please wait" message.
; 1104 : 	M_DrawTextBox(52, BASEVIDHEIGHT/2-10, 25, 3);

  0004b	6a 03		 push	 3
  0004d	6a 19		 push	 25			; 00000019H
  0004f	6a 5a		 push	 90			; 0000005aH
  00051	6a 34		 push	 52			; 00000034H
  00053	e8 00 00 00 00	 call	 _M_DrawTextBox
  00058	83 c4 10	 add	 esp, 16			; 00000010H

; 1105 : 	V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT/2, 0, "Contacting list server...");

  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@LLIGIMGM@Contacting?5list?5server?4?4?4@
  00060	6a 00		 push	 0
  00062	6a 64		 push	 100			; 00000064H
  00064	68 a0 00 00 00	 push	 160			; 000000a0H
  00069	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0006e	83 c4 10	 add	 esp, 16			; 00000010H

; 1106 : 	V_DrawCenteredString(BASEVIDWIDTH/2, (BASEVIDHEIGHT/2)+12, 0, "Please wait.");

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PJMDIAEP@Please?5wait?4@
  00076	6a 00		 push	 0
  00078	6a 70		 push	 112			; 00000070H
  0007a	68 a0 00 00 00	 push	 160			; 000000a0H
  0007f	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00084	83 c4 10	 add	 esp, 16			; 00000010H

; 1107 : 	I_OsPolling();

  00087	e8 00 00 00 00	 call	 _I_OsPolling
  0008c	90		 npad	 1

; 1108 : 	I_UpdateNoBlit();

  0008d	e8 00 00 00 00	 call	 _I_UpdateNoBlit
  00092	90		 npad	 1

; 1109 : 	if (rendermode == render_soft)

  00093	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0009a	75 06		 jne	 SHORT $LN4@M_ConnectM

; 1110 : 		I_FinishUpdate(); // page flip or blit buffer

  0009c	e8 00 00 00 00	 call	 _I_FinishUpdate
  000a1	90		 npad	 1
$LN4@M_ConnectM:

; 1111 : 
; 1112 : 	// first page of servers
; 1113 : 	serverlistpage = 0;

  000a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _serverlistpage, 0

; 1114 : 	cv_serversearch.value = 1;

  000ac	c7 05 14 00 00
	00 01 00 00 00	 mov	 DWORD PTR _cv_serversearch+20, 1

; 1115 : 	if(!M_PatchRoomsTable(false))

  000b6	6a 00		 push	 0
  000b8	e8 00 00 00 00	 call	 _M_PatchRoomsTable
  000bd	83 c4 04	 add	 esp, 4
  000c0	85 c0		 test	 eax, eax
  000c2	75 02		 jne	 SHORT $LN5@M_ConnectM

; 1116 : 		return;

  000c4	eb 20		 jmp	 SHORT $LN6@M_ConnectM
$LN5@M_ConnectM:

; 1117 : #ifdef UPDATE_ALERT
; 1118 : 	if(M_CheckMODVersion())

  000c6	e8 00 00 00 00	 call	 _M_CheckMODVersion
  000cb	85 c0		 test	 eax, eax
  000cd	74 17		 je	 SHORT $LN6@M_ConnectM

; 1119 : 	{
; 1120 : #endif
; 1121 : 		M_SetupNextMenu(&Connectdef);

  000cf	68 00 00 00 00	 push	 OFFSET _Connectdef
  000d4	e8 00 00 00 00	 call	 _M_SetupNextMenu
  000d9	83 c4 04	 add	 esp, 4

; 1122 : 		M_Refresh(0);

  000dc	6a 00		 push	 0
  000de	e8 00 00 00 00	 call	 _M_Refresh
  000e3	83 c4 04	 add	 esp, 4
$LN6@M_ConnectM:

; 1123 : #ifdef UPDATE_ALERT
; 1124 : 	}
; 1125 : #endif
; 1126 : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
_M_ConnectMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_CheckMODVersion
_TEXT	SEGMENT
_updatecheck$ = -508					; size = 4
_updatestring$ = -504					; size = 500
__$ArrayPad$ = -4					; size = 4
_M_CheckMODVersion PROC					; COMDAT

; 1075 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 02 00
	00		 sub	 esp, 572		; 0000023cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1076 : 	char updatestring[500];
; 1077 : 	const char *updatecheck = GetMODVersion();

  00016	e8 00 00 00 00	 call	 _GetMODVersion
  0001b	89 85 04 fe ff
	ff		 mov	 DWORD PTR _updatecheck$[ebp], eax

; 1078 : 	if(updatecheck)

  00021	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _updatecheck$[ebp], 0
  00028	74 39		 je	 SHORT $LN2@M_CheckMOD

; 1079 : 	{
; 1080 : 		sprintf(updatestring, UPDATE_ALERT_STRING, VERSIONSTRING, updatecheck);

  0002a	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _updatecheck$[ebp]
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_07IJKPKDGN@?5v2?40?47@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0NH@JDGDIMIN@New?5updates?5are?5available?5for?5S@
  0003b	8d 8d 08 fe ff
	ff		 lea	 ecx, DWORD PTR _updatestring$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _sprintf
  00047	83 c4 10	 add	 esp, 16			; 00000010H

; 1081 : 		M_StartMessage(updatestring, NULL, MM_NOTHING);

  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	8d 85 08 fe ff
	ff		 lea	 eax, DWORD PTR _updatestring$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _M_StartMessage
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1082 : 		return false;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 07		 jmp	 SHORT $LN3@M_CheckMOD

; 1083 : 	} else

  00061	eb 05		 jmp	 SHORT $LN3@M_CheckMOD
$LN2@M_CheckMOD:

; 1084 : 		return true;

  00063	b8 01 00 00 00	 mov	 eax, 1
$LN3@M_CheckMOD:

; 1085 : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_M_CheckMODVersion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_PatchRoomsTable
_TEXT	SEGMENT
_i$ = -4						; size = 4
_hosting$ = 8						; size = 4
_M_PatchRoomsTable PROC					; COMDAT

; 1043 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1044 : 	INT32 i = -1;

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1

; 1045 : 	memset(rooms_cons_t, 0, sizeof (rooms_cons_t));

  00010	68 08 01 00 00	 push	 264			; 00000108H
  00015	6a 00		 push	 0
  00017	68 00 00 00 00	 push	 OFFSET _rooms_cons_t
  0001c	e8 00 00 00 00	 call	 _memset
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1046 : 
; 1047 : 	if(GetRoomsList(hosting) < 0)

  00024	8b 45 08	 mov	 eax, DWORD PTR _hosting$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _GetRoomsList
  0002d	83 c4 04	 add	 esp, 4
  00030	85 c0		 test	 eax, eax
  00032	7d 07		 jge	 SHORT $LN5@M_PatchRoo

; 1048 : 	{
; 1049 : 		return false;

  00034	33 c0		 xor	 eax, eax
  00036	e9 c7 00 00 00	 jmp	 $LN1@M_PatchRoo
$LN5@M_PatchRoo:

; 1050 : 	}
; 1051 : 
; 1052 : 	for (i = 0; room_list[i].header.buffer[0]; i++)

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00042	eb 09		 jmp	 SHORT $LN4@M_PatchRoo
$LN2@M_PatchRoo:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_PatchRoo:
  0004d	69 45 fc 33 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 307
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	6b d1 00	 imul	 edx, ecx, 0
  0005c	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _room_list[eax+edx]
  00064	85 c0		 test	 eax, eax
  00066	74 5b		 je	 SHORT $LN3@M_PatchRoo

; 1053 : 	{
; 1054 : 		if(room_list[i].name != '\0')

  00068	69 45 fc 33 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 307
  0006f	05 14 00 00 00	 add	 eax, OFFSET _room_list+20
  00074	74 2f		 je	 SHORT $LN6@M_PatchRoo

; 1055 : 		{
; 1056 : 			rooms_cons_t[i].strvalue = room_list[i].name;

  00076	69 45 fc 33 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 307
  0007d	05 14 00 00 00	 add	 eax, OFFSET _room_list+20
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00085	89 04 cd 04 00
	00 00		 mov	 DWORD PTR _rooms_cons_t[ecx*8+4], eax

; 1057 : 			rooms_cons_t[i].value = room_list[i].id;

  0008c	69 45 fc 33 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 307
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00096	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR _room_list[eax+16]
  0009c	89 14 cd 00 00
	00 00		 mov	 DWORD PTR _rooms_cons_t[ecx*8], edx

; 1058 : 		}

  000a3	eb 1c		 jmp	 SHORT $LN7@M_PatchRoo
$LN6@M_PatchRoo:

; 1059 : 		else
; 1060 : 		{
; 1061 : 			rooms_cons_t[i].strvalue = NULL;

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	c7 04 c5 04 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _rooms_cons_t[eax*8+4], 0

; 1062 : 			rooms_cons_t[i].value = 0;

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b6	c7 04 c5 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _rooms_cons_t[eax*8], 0
$LN7@M_PatchRoo:

; 1063 : 		}
; 1064 : 	}

  000c1	eb 81		 jmp	 SHORT $LN2@M_PatchRoo
$LN3@M_PatchRoo:

; 1065 : 
; 1066 : 	CV_SetValue(&cv_chooseroom, rooms_cons_t[0].value);

  000c3	b8 08 00 00 00	 mov	 eax, 8
  000c8	6b c8 00	 imul	 ecx, eax, 0
  000cb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _rooms_cons_t[ecx]
  000d1	52		 push	 edx
  000d2	68 00 00 00 00	 push	 OFFSET _cv_chooseroom
  000d7	e8 00 00 00 00	 call	 _CV_SetValue
  000dc	83 c4 08	 add	 esp, 8

; 1067 : 	CV_AddValue(&cv_chooseroom, 1);

  000df	6a 01		 push	 1
  000e1	68 00 00 00 00	 push	 OFFSET _cv_chooseroom
  000e6	e8 00 00 00 00	 call	 _CV_AddValue
  000eb	83 c4 08	 add	 esp, 8

; 1068 : 	CV_AddValue(&cv_chooseroom, -1);

  000ee	6a ff		 push	 -1
  000f0	68 00 00 00 00	 push	 OFFSET _cv_chooseroom
  000f5	e8 00 00 00 00	 call	 _CV_AddValue
  000fa	83 c4 08	 add	 esp, 8

; 1069 : 
; 1070 : 	return true;

  000fd	b8 01 00 00 00	 mov	 eax, 1
$LN1@M_PatchRoo:

; 1071 : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
_M_PatchRoomsTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawRoomInfoMenu
_TEXT	SEGMENT
_M_DrawRoomInfoMenu PROC				; COMDAT

; 1004 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1005 : 	// use generic drawer for cursor, items and title
; 1006 : 	M_DrawGenericMenu();

  00009	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  0000e	90		 npad	 1

; 1007 : 	M_DrawTextBox(0, 56, 38, 12);

  0000f	6a 0c		 push	 12			; 0000000cH
  00011	6a 26		 push	 38			; 00000026H
  00013	6a 38		 push	 56			; 00000038H
  00015	6a 00		 push	 0
  00017	e8 00 00 00 00	 call	 _M_DrawTextBox
  0001c	83 c4 10	 add	 esp, 16			; 00000010H

; 1008 : #ifndef NONET
; 1009 : 	V_DrawString(8, 64, V_WORDWRAP|V_ALLOWLOWERCASE, cv_chosenroom_motd);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR _cv_chosenroom_motd
  00024	50		 push	 eax
  00025	68 00 00 04 02	 push	 33816576		; 02040000H
  0002a	6a 40		 push	 64			; 00000040H
  0002c	6a 08		 push	 8
  0002e	e8 00 00 00 00	 call	 _V_DrawString
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 1010 : #endif
; 1011 : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_M_DrawRoomInfoMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawConnectIPMenu
_TEXT	SEGMENT
_M_DrawConnectIPMenu PROC				; COMDAT

; 3089 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3090 : 	// use generic drawer for cursor, items and title
; 3091 : 	M_DrawGenericMenu();

  00009	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  0000e	90		 npad	 1

; 3092 : 
; 3093 : 	// draw name string
; 3094 : //	M_DrawTextBox(82,8,MAXPLAYERNAME,1);
; 3095 : 	V_DrawString (128,40,0,setupm_ip);

  0000f	68 00 00 00 00	 push	 OFFSET _setupm_ip
  00014	6a 00		 push	 0
  00016	6a 28		 push	 40			; 00000028H
  00018	68 80 00 00 00	 push	 128			; 00000080H
  0001d	e8 00 00 00 00	 call	 _V_DrawString
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 3096 : 
; 3097 : 	// draw text cursor for name
; 3098 : 	if (itemOn == 0 &&

  00025	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0002c	85 c0		 test	 eax, eax
  0002e	75 2d		 jne	 SHORT $LN2@M_DrawConn
  00030	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _skullAnimCounter
  00037	83 f8 04	 cmp	 eax, 4
  0003a	7d 21		 jge	 SHORT $LN2@M_DrawConn

; 3099 : 	    skullAnimCounter < 4)   //blink cursor
; 3100 : 		V_DrawCharacter(128+V_StringWidth(setupm_ip),40,'_',false);

  0003c	6a 00		 push	 0
  0003e	6a 5f		 push	 95			; 0000005fH
  00040	6a 28		 push	 40			; 00000028H
  00042	68 00 00 00 00	 push	 OFFSET _setupm_ip
  00047	e8 00 00 00 00	 call	 _V_StringWidth
  0004c	83 c4 04	 add	 esp, 4
  0004f	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _V_DrawCharacter
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@M_DrawConn:

; 3101 : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_M_DrawConnectIPMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_HandleConnectIP
_TEXT	SEGMENT
tv64 = -108						; size = 4
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
_keypad_translation$4 = -28				; size = 13
_exitmenu$ = -12					; size = 4
_l$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_choice$ = 8						; size = 4
_M_HandleConnectIP PROC					; COMDAT

; 3195 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 3196 : 	size_t   l;
; 3197 : 	boolean  exitmenu = false;  // exit to previous menu and send name change

  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _exitmenu$[ebp], 0

; 3198 : 
; 3199 : 	switch (choice)

  0001a	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  0001d	89 45 94	 mov	 DWORD PTR tv64[ebp], eax
  00020	83 7d 94 08	 cmp	 DWORD PTR tv64[ebp], 8
  00024	74 42		 je	 SHORT $LN6@M_HandleCo
  00026	83 7d 94 0d	 cmp	 DWORD PTR tv64[ebp], 13	; 0000000dH
  0002a	74 0b		 je	 SHORT $LN4@M_HandleCo
  0002c	83 7d 94 1b	 cmp	 DWORD PTR tv64[ebp], 27	; 0000001bH
  00030	74 2a		 je	 SHORT $LN5@M_HandleCo
  00032	e9 84 00 00 00	 jmp	 $LN8@M_HandleCo
$LN4@M_HandleCo:

; 3200 : 	{
; 3201 : 		case KEY_ENTER:
; 3202 : 			S_StartSound(NULL,sfx_menu1); // Tails

  00037	6a 67		 push	 103			; 00000067H
  00039	6a 00		 push	 0
  0003b	e8 00 00 00 00	 call	 _S_StartSound
  00040	83 c4 08	 add	 esp, 8

; 3203 : 			M_ClearMenus(true);

  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 _M_ClearMenus
  0004a	83 c4 04	 add	 esp, 4

; 3204 : 			M_ConnectIP(1);

  0004d	6a 01		 push	 1
  0004f	e8 00 00 00 00	 call	 _M_ConnectIP
  00054	83 c4 04	 add	 esp, 4

; 3205 : 			break;

  00057	e9 7a 01 00 00	 jmp	 $LN2@M_HandleCo
$LN5@M_HandleCo:

; 3206 : 
; 3207 : 		case KEY_ESCAPE:
; 3208 : 			exitmenu = true;

  0005c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _exitmenu$[ebp], 1

; 3209 : 			break;

  00063	e9 6e 01 00 00	 jmp	 $LN2@M_HandleCo
$LN6@M_HandleCo:

; 3210 : 
; 3211 : 		case KEY_BACKSPACE:
; 3212 : 			if ((l = strlen(setupm_ip))!=0 && itemOn == 0)

  00068	68 00 00 00 00	 push	 OFFSET _setupm_ip
  0006d	e8 00 00 00 00	 call	 _strlen
  00072	83 c4 04	 add	 esp, 4
  00075	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax
  00078	83 7d f8 00	 cmp	 DWORD PTR _l$[ebp], 0
  0007c	74 38		 je	 SHORT $LN7@M_HandleCo
  0007e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00085	85 c0		 test	 eax, eax
  00087	75 2d		 jne	 SHORT $LN7@M_HandleCo

; 3213 : 			{
; 3214 : 				S_StartSound(NULL,sfx_menu1); // Tails

  00089	6a 67		 push	 103			; 00000067H
  0008b	6a 00		 push	 0
  0008d	e8 00 00 00 00	 call	 _S_StartSound
  00092	83 c4 08	 add	 esp, 8

; 3215 : 				setupm_ip[l-1] =0;

  00095	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  00098	83 e8 01	 sub	 eax, 1
  0009b	89 45 a0	 mov	 DWORD PTR $T3[ebp], eax
  0009e	83 7d a0 10	 cmp	 DWORD PTR $T3[ebp], 16	; 00000010H
  000a2	73 02		 jae	 SHORT $LN17@M_HandleCo
  000a4	eb 06		 jmp	 SHORT $LN18@M_HandleCo
$LN17@M_HandleCo:
  000a6	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000ab	90		 npad	 1
$LN18@M_HandleCo:
  000ac	8b 4d a0	 mov	 ecx, DWORD PTR $T3[ebp]
  000af	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _setupm_ip[ecx], 0
$LN7@M_HandleCo:

; 3216 : 			}
; 3217 : 			break;

  000b6	e9 1b 01 00 00	 jmp	 $LN2@M_HandleCo
$LN8@M_HandleCo:

; 3218 : 
; 3219 : 		default:
; 3220 : #define ALLOW_NUMPAD
; 3221 : 			l = strlen(setupm_ip);

  000bb	68 00 00 00 00	 push	 OFFSET _setupm_ip
  000c0	e8 00 00 00 00	 call	 _strlen
  000c5	83 c4 04	 add	 esp, 4
  000c8	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 3222 : 			if (l < 16-1 && (choice == 46 || (choice >= 48 && choice <= 57))) // Rudimentary number and period enforcing

  000cb	83 7d f8 0f	 cmp	 DWORD PTR _l$[ebp], 15	; 0000000fH
  000cf	73 50		 jae	 SHORT $LN9@M_HandleCo
  000d1	83 7d 08 2e	 cmp	 DWORD PTR _choice$[ebp], 46 ; 0000002eH
  000d5	74 0c		 je	 SHORT $LN11@M_HandleCo
  000d7	83 7d 08 30	 cmp	 DWORD PTR _choice$[ebp], 48 ; 00000030H
  000db	7c 44		 jl	 SHORT $LN9@M_HandleCo
  000dd	83 7d 08 39	 cmp	 DWORD PTR _choice$[ebp], 57 ; 00000039H
  000e1	7f 3e		 jg	 SHORT $LN9@M_HandleCo
$LN11@M_HandleCo:

; 3223 : 			{
; 3224 : 				S_StartSound(NULL,sfx_menu1); // Tails

  000e3	6a 67		 push	 103			; 00000067H
  000e5	6a 00		 push	 0
  000e7	e8 00 00 00 00	 call	 _S_StartSound
  000ec	83 c4 08	 add	 esp, 8

; 3225 : 				setupm_ip[l] =(char)choice;

  000ef	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  000f2	8a 4d 08	 mov	 cl, BYTE PTR _choice$[ebp]
  000f5	88 88 00 00 00
	00		 mov	 BYTE PTR _setupm_ip[eax], cl

; 3226 : 				setupm_ip[l+1] =0;

  000fb	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  000fe	83 c0 01	 add	 eax, 1
  00101	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  00104	83 7d 9c 10	 cmp	 DWORD PTR $T2[ebp], 16	; 00000010H
  00108	73 02		 jae	 SHORT $LN19@M_HandleCo
  0010a	eb 06		 jmp	 SHORT $LN20@M_HandleCo
$LN19@M_HandleCo:
  0010c	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00111	90		 npad	 1
$LN20@M_HandleCo:
  00112	8b 4d 9c	 mov	 ecx, DWORD PTR $T2[ebp]
  00115	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _setupm_ip[ecx], 0

; 3227 : 			}

  0011c	e9 b5 00 00 00	 jmp	 $LN12@M_HandleCo
$LN9@M_HandleCo:

; 3228 : #ifdef ALLOW_NUMPAD
; 3229 : 			else if (l < 16-1 && choice >= 199 && choice <= 211 && choice != 202 && choice != 206) //numpad too!

  00121	83 7d f8 0f	 cmp	 DWORD PTR _l$[ebp], 15	; 0000000fH
  00125	0f 83 ab 00 00
	00		 jae	 $LN12@M_HandleCo
  0012b	81 7d 08 c7 00
	00 00		 cmp	 DWORD PTR _choice$[ebp], 199 ; 000000c7H
  00132	0f 8c 9e 00 00
	00		 jl	 $LN12@M_HandleCo
  00138	81 7d 08 d3 00
	00 00		 cmp	 DWORD PTR _choice$[ebp], 211 ; 000000d3H
  0013f	0f 8f 91 00 00
	00		 jg	 $LN12@M_HandleCo
  00145	81 7d 08 ca 00
	00 00		 cmp	 DWORD PTR _choice$[ebp], 202 ; 000000caH
  0014c	0f 84 84 00 00
	00		 je	 $LN12@M_HandleCo
  00152	81 7d 08 ce 00
	00 00		 cmp	 DWORD PTR _choice$[ebp], 206 ; 000000ceH
  00159	74 7b		 je	 SHORT $LN12@M_HandleCo

; 3230 : 			{
; 3231 : 				XBOXSTATIC char keypad_translation[] = {'7','8','9','-','4','5','6','+','1','2','3','0','.'};

  0015b	c6 45 e4 37	 mov	 BYTE PTR _keypad_translation$4[ebp], 55 ; 00000037H
  0015f	c6 45 e5 38	 mov	 BYTE PTR _keypad_translation$4[ebp+1], 56 ; 00000038H
  00163	c6 45 e6 39	 mov	 BYTE PTR _keypad_translation$4[ebp+2], 57 ; 00000039H
  00167	c6 45 e7 2d	 mov	 BYTE PTR _keypad_translation$4[ebp+3], 45 ; 0000002dH
  0016b	c6 45 e8 34	 mov	 BYTE PTR _keypad_translation$4[ebp+4], 52 ; 00000034H
  0016f	c6 45 e9 35	 mov	 BYTE PTR _keypad_translation$4[ebp+5], 53 ; 00000035H
  00173	c6 45 ea 36	 mov	 BYTE PTR _keypad_translation$4[ebp+6], 54 ; 00000036H
  00177	c6 45 eb 2b	 mov	 BYTE PTR _keypad_translation$4[ebp+7], 43 ; 0000002bH
  0017b	c6 45 ec 31	 mov	 BYTE PTR _keypad_translation$4[ebp+8], 49 ; 00000031H
  0017f	c6 45 ed 32	 mov	 BYTE PTR _keypad_translation$4[ebp+9], 50 ; 00000032H
  00183	c6 45 ee 33	 mov	 BYTE PTR _keypad_translation$4[ebp+10], 51 ; 00000033H
  00187	c6 45 ef 30	 mov	 BYTE PTR _keypad_translation$4[ebp+11], 48 ; 00000030H
  0018b	c6 45 f0 2e	 mov	 BYTE PTR _keypad_translation$4[ebp+12], 46 ; 0000002eH

; 3232 : 				choice = keypad_translation[choice - 199];

  0018f	8b 45 08	 mov	 eax, DWORD PTR _choice$[ebp]
  00192	0f be 8c 05 1d
	ff ff ff	 movsx	 ecx, BYTE PTR _keypad_translation$4[ebp+eax-199]
  0019a	89 4d 08	 mov	 DWORD PTR _choice$[ebp], ecx

; 3233 : 				S_StartSound(NULL,sfx_menu1); // Tails

  0019d	6a 67		 push	 103			; 00000067H
  0019f	6a 00		 push	 0
  001a1	e8 00 00 00 00	 call	 _S_StartSound
  001a6	83 c4 08	 add	 esp, 8

; 3234 : 				setupm_ip[l] =(char)choice;

  001a9	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  001ac	8a 4d 08	 mov	 cl, BYTE PTR _choice$[ebp]
  001af	88 88 00 00 00
	00		 mov	 BYTE PTR _setupm_ip[eax], cl

; 3235 : 				setupm_ip[l+1] =0;

  001b5	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  001b8	83 c0 01	 add	 eax, 1
  001bb	89 45 98	 mov	 DWORD PTR $T1[ebp], eax
  001be	83 7d 98 10	 cmp	 DWORD PTR $T1[ebp], 16	; 00000010H
  001c2	73 02		 jae	 SHORT $LN21@M_HandleCo
  001c4	eb 06		 jmp	 SHORT $LN22@M_HandleCo
$LN21@M_HandleCo:
  001c6	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  001cb	90		 npad	 1
$LN22@M_HandleCo:
  001cc	8b 4d 98	 mov	 ecx, DWORD PTR $T1[ebp]
  001cf	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _setupm_ip[ecx], 0
$LN12@M_HandleCo:
$LN2@M_HandleCo:

; 3236 : 			}
; 3237 : #endif
; 3238 : 			break;
; 3239 : 	}
; 3240 : 
; 3241 : 	if (exitmenu)

  001d6	83 7d f4 00	 cmp	 DWORD PTR _exitmenu$[ebp], 0
  001da	74 28		 je	 SHORT $LN15@M_HandleCo

; 3242 : 	{
; 3243 : 		if (currentMenu->prevMenu)

  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001e1	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  001e5	74 13		 je	 SHORT $LN14@M_HandleCo

; 3244 : 			M_SetupNextMenu (currentMenu->prevMenu);

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001ec	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001ef	51		 push	 ecx
  001f0	e8 00 00 00 00	 call	 _M_SetupNextMenu
  001f5	83 c4 04	 add	 esp, 4
  001f8	eb 0a		 jmp	 SHORT $LN15@M_HandleCo
$LN14@M_HandleCo:

; 3245 : 		else
; 3246 : 			M_ClearMenus(true);

  001fa	6a 01		 push	 1
  001fc	e8 00 00 00 00	 call	 _M_ClearMenus
  00201	83 c4 04	 add	 esp, 4
$LN15@M_HandleCo:

; 3247 : 	}
; 3248 : }

  00204	5f		 pop	 edi
  00205	5e		 pop	 esi
  00206	5b		 pop	 ebx
  00207	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020a	33 cd		 xor	 ecx, ebp
  0020c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c3		 ret	 0
_M_HandleConnectIP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_CancelConnect
_TEXT	SEGMENT
_M_CancelConnect PROC					; COMDAT

; 945  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 946  : 	D_CloseConnection();

  00009	e8 00 00 00 00	 call	 _D_CloseConnection
  0000e	90		 npad	 1

; 947  : 	return true;

  0000f	b8 01 00 00 00	 mov	 eax, 1

; 948  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_M_CancelConnect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawConnectLANMenu
_TEXT	SEGMENT
tv142 = -124						; size = 4
tv67 = -120						; size = 4
tv91 = -120						; size = 4
tv137 = -120						; size = 4
tv225 = -120						; size = 4
$T1 = -116						; size = 4
_globalflags$2 = -48					; size = 4
_slindex$3 = -44					; size = 4
_servername$ = -40					; size = 21
_cgametype$ = -13					; size = 1
_p$ = -12						; size = 4
_i$ = -8						; size = 2
__$ArrayPad$ = -4					; size = 4
_M_DrawConnectLANMenu PROC				; COMDAT

; 872  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 873  : 	UINT16 i;
; 874  : 	char *p;
; 875  : 	char cgametype;
; 876  : 	char servername[21];
; 877  : 
; 878  : 	for (i = FIRSTLANSERVERLINE; i < min(localservercount, SERVERS_PER_PAGE)+FIRSTLANSERVERLINE; i++)

  00013	b8 05 00 00 00	 mov	 eax, 5
  00018	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0001c	eb 0c		 jmp	 SHORT $LN4@M_DrawConn
$LN2@M_DrawConn:
  0001e	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00022	66 83 c0 01	 add	 ax, 1
  00026	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN4@M_DrawConn:
  0002a	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR _localservercount, 10 ; 0000000aH
  00031	73 0a		 jae	 SHORT $LN21@M_DrawConn
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _localservercount
  00038	89 45 88	 mov	 DWORD PTR tv67[ebp], eax
  0003b	eb 07		 jmp	 SHORT $LN22@M_DrawConn
$LN21@M_DrawConn:
  0003d	c7 45 88 0a 00
	00 00		 mov	 DWORD PTR tv67[ebp], 10	; 0000000aH
$LN22@M_DrawConn:
  00044	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00048	8b 55 88	 mov	 edx, DWORD PTR tv67[ebp]
  0004b	83 c2 05	 add	 edx, 5
  0004e	3b ca		 cmp	 ecx, edx
  00050	73 15		 jae	 SHORT $LN3@M_DrawConn

; 879  : 		ConnectLANMenu[i].status = IT_STRING | IT_SPACE;

  00052	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00056	6b c8 14	 imul	 ecx, eax, 20
  00059	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  0005e	66 89 91 00 00
	00 00		 mov	 WORD PTR _ConnectLANMenu[ecx], dx
  00065	eb b7		 jmp	 SHORT $LN2@M_DrawConn
$LN3@M_DrawConn:

; 880  : 
; 881  : 	if (serverlistcount <= 0)

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverlistcount, 0
  0006e	77 2c		 ja	 SHORT $LN10@M_DrawConn

; 882  : 		V_DrawString (currentMenu->x,currentMenu->y+FIRSTLANSERVERLINE*STRINGHEIGHT,0,"No servers found");

  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JACHKAHP@No?5servers?5found@
  00075	6a 00		 push	 0
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0007c	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  00080	83 c1 28	 add	 ecx, 40			; 00000028H
  00083	51		 push	 ecx
  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0008a	0f bf 42 18	 movsx	 eax, WORD PTR [edx+24]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 _V_DrawString
  00094	83 c4 10	 add	 esp, 16			; 00000010H
  00097	e9 25 03 00 00	 jmp	 $LN6@M_DrawConn
$LN10@M_DrawConn:

; 883  : 	else
; 884  : 	for (i = 0; i < min(serverlistcount - serverlistpage * SERVERS_PER_PAGE, SERVERS_PER_PAGE); i++)

  0009c	33 c0		 xor	 eax, eax
  0009e	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000a2	eb 0c		 jmp	 SHORT $LN7@M_DrawConn
$LN5@M_DrawConn:
  000a4	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  000a8	66 83 c0 01	 add	 ax, 1
  000ac	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN7@M_DrawConn:
  000b0	6b 05 00 00 00
	00 0a		 imul	 eax, DWORD PTR _serverlistpage, 10
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _serverlistcount
  000bd	2b c8		 sub	 ecx, eax
  000bf	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  000c2	73 13		 jae	 SHORT $LN23@M_DrawConn
  000c4	6b 15 00 00 00
	00 0a		 imul	 edx, DWORD PTR _serverlistpage, 10
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  000d0	2b c2		 sub	 eax, edx
  000d2	89 45 88	 mov	 DWORD PTR tv91[ebp], eax
  000d5	eb 07		 jmp	 SHORT $LN24@M_DrawConn
$LN23@M_DrawConn:
  000d7	c7 45 88 0a 00
	00 00		 mov	 DWORD PTR tv91[ebp], 10	; 0000000aH
$LN24@M_DrawConn:
  000de	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  000e2	3b 4d 88	 cmp	 ecx, DWORD PTR tv91[ebp]
  000e5	0f 83 d6 02 00
	00		 jae	 $LN6@M_DrawConn

; 885  : 	{
; 886  : 		INT32 slindex = i + serverlistpage * SERVERS_PER_PAGE;

  000eb	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  000ef	6b 0d 00 00 00
	00 0a		 imul	 ecx, DWORD PTR _serverlistpage, 10
  000f6	03 c1		 add	 eax, ecx
  000f8	89 45 d4	 mov	 DWORD PTR _slindex$3[ebp], eax

; 887  : 		UINT32 globalflags = ((serverlist[slindex].info.numberofplayer >= serverlist[slindex].info.maxplayer) ? V_TRANSLUCENT : 0)

  000fb	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  00102	0f b6 88 03 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+3]
  00109	69 55 d4 01 04
	00 00		 imul	 edx, DWORD PTR _slindex$3[ebp], 1025
  00110	0f b6 82 04 00
	00 00		 movzx	 eax, BYTE PTR _serverlist[edx+4]
  00117	3b c8		 cmp	 ecx, eax
  00119	7c 09		 jl	 SHORT $LN25@M_DrawConn
  0011b	c7 45 88 00 00
	40 00		 mov	 DWORD PTR tv137[ebp], 4194304 ; 00400000H
  00122	eb 07		 jmp	 SHORT $LN26@M_DrawConn
$LN25@M_DrawConn:
  00124	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN26@M_DrawConn:
  0012b	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _itemOn
  00132	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  00136	83 c2 07	 add	 edx, 7
  00139	3b ca		 cmp	 ecx, edx
  0013b	75 09		 jne	 SHORT $LN27@M_DrawConn
  0013d	c7 45 84 00 00
	10 00		 mov	 DWORD PTR tv142[ebp], 1048576 ; 00100000H
  00144	eb 07		 jmp	 SHORT $LN28@M_DrawConn
$LN27@M_DrawConn:
  00146	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN28@M_DrawConn:
  0014d	8b 45 88	 mov	 eax, DWORD PTR tv137[ebp]
  00150	0b 45 84	 or	 eax, DWORD PTR tv142[ebp]
  00153	89 45 d0	 mov	 DWORD PTR _globalflags$2[ebp], eax

; 888  : 			| ((itemOn == FIRSTSERVERLINE+i) ? V_YELLOWMAP : 0);
; 889  : 
; 890  : 		strlcpy(servername, serverlist[slindex].info.servername, sizeof (servername));

  00156	6a 15		 push	 21			; 00000015H
  00158	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  0015f	05 13 00 00 00	 add	 eax, OFFSET _serverlist+19
  00164	50		 push	 eax
  00165	8d 4d d8	 lea	 ecx, DWORD PTR _servername$[ebp]
  00168	51		 push	 ecx
  00169	e8 00 00 00 00	 call	 _strlcpy
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 891  : 		servername[20] = '\0';

  00171	b8 01 00 00 00	 mov	 eax, 1
  00176	6b c8 14	 imul	 ecx, eax, 20
  00179	89 4d 8c	 mov	 DWORD PTR $T1[ebp], ecx
  0017c	83 7d 8c 15	 cmp	 DWORD PTR $T1[ebp], 21	; 00000015H
  00180	73 02		 jae	 SHORT $LN29@M_DrawConn
  00182	eb 06		 jmp	 SHORT $LN30@M_DrawConn
$LN29@M_DrawConn:
  00184	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00189	90		 npad	 1
$LN30@M_DrawConn:
  0018a	8b 55 8c	 mov	 edx, DWORD PTR $T1[ebp]
  0018d	c6 44 15 d8 00	 mov	 BYTE PTR _servername$[ebp+edx], 0

; 892  : 
; 893  : 		V_DrawString(currentMenu->x,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, globalflags | V_ALLOWLOWERCASE, servername);

  00192	8d 45 d8	 lea	 eax, DWORD PTR _servername$[ebp]
  00195	50		 push	 eax
  00196	8b 4d d0	 mov	 ecx, DWORD PTR _globalflags$2[ebp]
  00199	81 c9 00 00 04
	00		 or	 ecx, 262144		; 00040000H
  0019f	51		 push	 ecx
  001a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  001a6	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  001aa	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  001ae	8d 54 c8 38	 lea	 edx, DWORD PTR [eax+ecx*8+56]
  001b2	52		 push	 edx
  001b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001b8	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  001bc	51		 push	 ecx
  001bd	e8 00 00 00 00	 call	 _V_DrawString
  001c2	83 c4 10	 add	 esp, 16			; 00000010H

; 894  : 
; 895  : 		if (serverlist[slindex].info.modifiedgame)

  001c5	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  001cc	0f b6 88 06 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+6]
  001d3	85 c9		 test	 ecx, ecx
  001d5	74 32		 je	 SHORT $LN12@M_DrawConn

; 896  : 			V_DrawString(currentMenu->x+164,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, 0, "\x85" "M");

  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_02KCJHMOMO@?$IFM@
  001dc	6a 00		 push	 0
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001e3	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  001e7	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  001eb	8d 44 d1 38	 lea	 eax, DWORD PTR [ecx+edx*8+56]
  001ef	50		 push	 eax
  001f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  001f6	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  001fa	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00200	52		 push	 edx
  00201	e8 00 00 00 00	 call	 _V_DrawString
  00206	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@M_DrawConn:

; 897  : 		if (serverlist[slindex].info.cheatsenabled)

  00209	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  00210	0f b6 88 07 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+7]
  00217	85 c9		 test	 ecx, ecx
  00219	74 32		 je	 SHORT $LN13@M_DrawConn

; 898  : 			V_DrawString(currentMenu->x+172,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, 0, "\x83" "C");

  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_02DIJJJPPC@?$IDC@
  00220	6a 00		 push	 0
  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00227	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  0022b	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  0022f	8d 44 d1 38	 lea	 eax, DWORD PTR [ecx+edx*8+56]
  00233	50		 push	 eax
  00234	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0023a	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  0023e	81 c2 ac 00 00
	00		 add	 edx, 172		; 000000acH
  00244	52		 push	 edx
  00245	e8 00 00 00 00	 call	 _V_DrawString
  0024a	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@M_DrawConn:

; 899  : 
; 900  : 		p = va("%u", (UINT32)LONG(serverlist[slindex].info.time));

  0024d	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  00254	8b 88 0b 00 00
	00		 mov	 ecx, DWORD PTR _serverlist[eax+11]
  0025a	51		 push	 ecx
  0025b	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00260	e8 00 00 00 00	 call	 _va
  00265	83 c4 08	 add	 esp, 8
  00268	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 901  : 		V_DrawCenteredString (currentMenu->x+200,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, globalflags, p);

  0026b	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0026e	50		 push	 eax
  0026f	8b 4d d0	 mov	 ecx, DWORD PTR _globalflags$2[ebp]
  00272	51		 push	 ecx
  00273	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00279	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  0027d	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00281	8d 54 c8 38	 lea	 edx, DWORD PTR [eax+ecx*8+56]
  00285	52		 push	 edx
  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0028b	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  0028f	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  00295	51		 push	 ecx
  00296	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0029b	83 c4 10	 add	 esp, 16			; 00000010H

; 902  : 
; 903  : 		switch (serverlist[slindex].info.gametype)

  0029e	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  002a5	0f b6 88 05 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+5]
  002ac	89 4d 88	 mov	 DWORD PTR tv225[ebp], ecx
  002af	83 7d 88 04	 cmp	 DWORD PTR tv225[ebp], 4
  002b3	77 28		 ja	 SHORT $LN19@M_DrawConn
  002b5	8b 55 88	 mov	 edx, DWORD PTR tv225[ebp]
  002b8	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN31@M_DrawConn[edx*4]
$LN14@M_DrawConn:

; 904  : 		{
; 905  : 			case GT_COOP:
; 906  : 				cgametype = 'C';

  002bf	c6 45 f3 43	 mov	 BYTE PTR _cgametype$[ebp], 67 ; 00000043H

; 907  : 				break;

  002c3	eb 38		 jmp	 SHORT $LN8@M_DrawConn
$LN15@M_DrawConn:

; 908  : 			case GT_MATCH:
; 909  : 				cgametype = 'M';

  002c5	c6 45 f3 4d	 mov	 BYTE PTR _cgametype$[ebp], 77 ; 0000004dH

; 910  : 				break;

  002c9	eb 32		 jmp	 SHORT $LN8@M_DrawConn
$LN16@M_DrawConn:

; 911  : 			case GT_RACE:
; 912  : 				cgametype = 'R';

  002cb	c6 45 f3 52	 mov	 BYTE PTR _cgametype$[ebp], 82 ; 00000052H

; 913  : 				break;

  002cf	eb 2c		 jmp	 SHORT $LN8@M_DrawConn
$LN17@M_DrawConn:

; 914  : 			case GT_TAG:
; 915  : 				cgametype = 'T';

  002d1	c6 45 f3 54	 mov	 BYTE PTR _cgametype$[ebp], 84 ; 00000054H

; 916  : 				break;

  002d5	eb 26		 jmp	 SHORT $LN8@M_DrawConn
$LN18@M_DrawConn:

; 917  : 			case GT_CTF:
; 918  : 				cgametype = 'F';

  002d7	c6 45 f3 46	 mov	 BYTE PTR _cgametype$[ebp], 70 ; 00000046H

; 919  : 				break;

  002db	eb 20		 jmp	 SHORT $LN8@M_DrawConn
$LN19@M_DrawConn:

; 920  : 			default:
; 921  : 				cgametype = 'U';

  002dd	c6 45 f3 55	 mov	 BYTE PTR _cgametype$[ebp], 85 ; 00000055H

; 922  : 				CONS_Printf("M_DrawConnectLANMenu: Unknown gametype %d\n", serverlist[slindex].info.gametype);

  002e1	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  002e8	0f b6 88 05 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+5]
  002ef	51		 push	 ecx
  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@BNPJEODI@M_DrawConnectLANMenu?3?5Unknown?5g@
  002f5	e8 00 00 00 00	 call	 _CONS_Printf
  002fa	83 c4 08	 add	 esp, 8
$LN8@M_DrawConn:

; 923  : 				break;
; 924  : 		}
; 925  : 
; 926  : 		p = va("%02d/%02d", serverlist[slindex].info.numberofplayer,

  002fd	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  00304	0f b6 88 04 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+4]
  0030b	51		 push	 ecx
  0030c	69 55 d4 01 04
	00 00		 imul	 edx, DWORD PTR _slindex$3[ebp], 1025
  00313	0f b6 82 03 00
	00 00		 movzx	 eax, BYTE PTR _serverlist[edx+3]
  0031a	50		 push	 eax
  0031b	68 00 00 00 00	 push	 OFFSET ??_C@_09KKPNDFC@?$CF02d?1?$CF02d@
  00320	e8 00 00 00 00	 call	 _va
  00325	83 c4 0c	 add	 esp, 12			; 0000000cH
  00328	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 927  : 		                    serverlist[slindex].info.maxplayer); // Tails 01-18-2001
; 928  : 		V_DrawRightAlignedString(currentMenu->x+264,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, globalflags, p);

  0032b	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0032e	50		 push	 eax
  0032f	8b 4d d0	 mov	 ecx, DWORD PTR _globalflags$2[ebp]
  00332	51		 push	 ecx
  00333	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00339	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  0033d	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00341	8d 54 c8 38	 lea	 edx, DWORD PTR [eax+ecx*8+56]
  00345	52		 push	 edx
  00346	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0034b	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  0034f	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00355	51		 push	 ecx
  00356	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  0035b	83 c4 10	 add	 esp, 16			; 00000010H

; 929  : 
; 930  : 		p = va("%c", cgametype);

  0035e	0f be 45 f3	 movsx	 eax, BYTE PTR _cgametype$[ebp]
  00362	50		 push	 eax
  00363	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  00368	e8 00 00 00 00	 call	 _va
  0036d	83 c4 08	 add	 esp, 8
  00370	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 931  : 		V_DrawString(currentMenu->x+272,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, globalflags, p);

  00373	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00376	50		 push	 eax
  00377	8b 4d d0	 mov	 ecx, DWORD PTR _globalflags$2[ebp]
  0037a	51		 push	 ecx
  0037b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00381	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  00385	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00389	8d 54 c8 38	 lea	 edx, DWORD PTR [eax+ecx*8+56]
  0038d	52		 push	 edx
  0038e	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00393	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00397	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  0039d	51		 push	 ecx
  0039e	e8 00 00 00 00	 call	 _V_DrawString
  003a3	83 c4 10	 add	 esp, 16			; 00000010H

; 932  : 
; 933  : 		ConnectLANMenu[i+FIRSTLANSERVERLINE].status = IT_STRING | IT_CALL;

  003a6	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  003aa	83 c0 05	 add	 eax, 5
  003ad	6b c8 14	 imul	 ecx, eax, 20
  003b0	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  003b5	66 89 91 00 00
	00 00		 mov	 WORD PTR _ConnectLANMenu[ecx], dx

; 934  : 	}

  003bc	e9 e3 fc ff ff	 jmp	 $LN5@M_DrawConn
$LN6@M_DrawConn:

; 935  : 
; 936  : 	V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT-20, 0, "\x85" "M" "\x82" " = Game is modified.    ");

  003c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FFPMMFF@?$IFM?$IC?5?$DN?5Game?5is?5modified?4?5?5?5?5@
  003c6	6a 00		 push	 0
  003c8	68 b4 00 00 00	 push	 180			; 000000b4H
  003cd	68 a0 00 00 00	 push	 160			; 000000a0H
  003d2	e8 00 00 00 00	 call	 _V_DrawCenteredString
  003d7	83 c4 10	 add	 esp, 16			; 00000010H

; 937  : 	V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT-12, 0, "\x83" "C" "\x82" " = Cheats are enabled.");

  003da	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KIBBHFCG@?$IDC?$IC?5?$DN?5Cheats?5are?5enabled?4@
  003df	6a 00		 push	 0
  003e1	68 bc 00 00 00	 push	 188			; 000000bcH
  003e6	68 a0 00 00 00	 push	 160			; 000000a0H
  003eb	e8 00 00 00 00	 call	 _V_DrawCenteredString
  003f0	83 c4 10	 add	 esp, 16			; 00000010H

; 938  : 
; 939  : 	localservercount = serverlistcount;

  003f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  003f8	a3 00 00 00 00	 mov	 DWORD PTR _localservercount, eax

; 940  : 
; 941  : 	M_DrawGenericMenu();

  003fd	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  00402	90		 npad	 1
$LN1@M_DrawConn:

; 942  : }

  00403	5f		 pop	 edi
  00404	5e		 pop	 esi
  00405	5b		 pop	 ebx
  00406	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00409	33 cd		 xor	 ecx, ebp
  0040b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00410	8b e5		 mov	 esp, ebp
  00412	5d		 pop	 ebp
  00413	c3		 ret	 0
$LN31@M_DrawConn:
  00414	00 00 00 00	 DD	 $LN14@M_DrawConn
  00418	00 00 00 00	 DD	 $LN15@M_DrawConn
  0041c	00 00 00 00	 DD	 $LN16@M_DrawConn
  00420	00 00 00 00	 DD	 $LN17@M_DrawConn
  00424	00 00 00 00	 DD	 $LN18@M_DrawConn
_M_DrawConnectLANMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawConnectMenu
_TEXT	SEGMENT
tv163 = -124						; size = 4
tv67 = -120						; size = 4
tv144 = -120						; size = 4
tv158 = -120						; size = 4
tv246 = -120						; size = 4
$T1 = -116						; size = 4
_globalflags$2 = -48					; size = 4
_slindex$3 = -44					; size = 4
_servername$ = -40					; size = 21
_cgametype$ = -13					; size = 1
_p$ = -12						; size = 4
_i$ = -8						; size = 2
__$ArrayPad$ = -4					; size = 4
_M_DrawConnectMenu PROC					; COMDAT

; 786  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 787  : 	UINT16 i;
; 788  : 	char *p;
; 789  : 	char cgametype;
; 790  : 	char servername[21];
; 791  : 
; 792  : 	for (i = FIRSTSERVERLINE; i < min(localservercount, SERVERS_PER_PAGE)+FIRSTSERVERLINE; i++)

  00013	b8 07 00 00 00	 mov	 eax, 7
  00018	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0001c	eb 0c		 jmp	 SHORT $LN4@M_DrawConn
$LN2@M_DrawConn:
  0001e	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00022	66 83 c0 01	 add	 ax, 1
  00026	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN4@M_DrawConn:
  0002a	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR _localservercount, 10 ; 0000000aH
  00031	73 0a		 jae	 SHORT $LN25@M_DrawConn
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _localservercount
  00038	89 45 88	 mov	 DWORD PTR tv67[ebp], eax
  0003b	eb 07		 jmp	 SHORT $LN26@M_DrawConn
$LN25@M_DrawConn:
  0003d	c7 45 88 0a 00
	00 00		 mov	 DWORD PTR tv67[ebp], 10	; 0000000aH
$LN26@M_DrawConn:
  00044	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00048	8b 55 88	 mov	 edx, DWORD PTR tv67[ebp]
  0004b	83 c2 07	 add	 edx, 7
  0004e	3b ca		 cmp	 ecx, edx
  00050	73 15		 jae	 SHORT $LN3@M_DrawConn

; 793  : 		ConnectMenu[i].status = IT_STRING | IT_SPACE;

  00052	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00056	6b c8 14	 imul	 ecx, eax, 20
  00059	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  0005e	66 89 91 00 00
	00 00		 mov	 WORD PTR _ConnectMenu[ecx], dx
  00065	eb b7		 jmp	 SHORT $LN2@M_DrawConn
$LN3@M_DrawConn:

; 794  : 
; 795  : 	V_DrawRightAlignedString(currentMenu->x+284, currentMenu->y+((FIRSTSERVERLINE-1)*STRINGHEIGHT), V_YELLOWMAP, "PING   PLYS  GT");

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GHOLBGH@PING?5?5?5PLYS?5?5GT@
  0006c	68 00 00 10 00	 push	 1048576			; 00100000H
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00076	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  0007a	83 c1 30	 add	 ecx, 48			; 00000030H
  0007d	51		 push	 ecx
  0007e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00084	0f bf 42 18	 movsx	 eax, WORD PTR [edx+24]
  00088	05 1c 01 00 00	 add	 eax, 284		; 0000011cH
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  00093	83 c4 10	 add	 esp, 16			; 00000010H

; 796  : 
; 797  : 	if (rooms_cons_t[0].value < 0)

  00096	b8 08 00 00 00	 mov	 eax, 8
  0009b	6b c8 00	 imul	 ecx, eax, 0
  0009e	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR _rooms_cons_t[ecx], 0
  000a5	7d 26		 jge	 SHORT $LN10@M_DrawConn

; 798  : 		V_DrawCenteredString(BASEVIDWIDTH/2,currentMenu->y+FIRSTSERVERLINE*STRINGHEIGHT,0,"Error contacting the Master Server");

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@OHAIHFDF@Error?5contacting?5the?5Master?5Ser@
  000ac	6a 00		 push	 0
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  000b3	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  000b7	83 c1 38	 add	 ecx, 56			; 00000038H
  000ba	51		 push	 ecx
  000bb	68 a0 00 00 00	 push	 160			; 000000a0H
  000c0	e8 00 00 00 00	 call	 _V_DrawCenteredString
  000c5	83 c4 10	 add	 esp, 16			; 00000010H
  000c8	e9 5a 03 00 00	 jmp	 $LN6@M_DrawConn
$LN10@M_DrawConn:

; 799  : 	else if (serverlistcount <= 0)

  000cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverlistcount, 0
  000d4	77 2c		 ja	 SHORT $LN12@M_DrawConn

; 800  : 		V_DrawString (currentMenu->x,currentMenu->y+FIRSTSERVERLINE*STRINGHEIGHT,0,"No servers found");

  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JACHKAHP@No?5servers?5found@
  000db	6a 00		 push	 0
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  000e2	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  000e6	83 c1 38	 add	 ecx, 56			; 00000038H
  000e9	51		 push	 ecx
  000ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  000f0	0f bf 42 18	 movsx	 eax, WORD PTR [edx+24]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _V_DrawString
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	e9 25 03 00 00	 jmp	 $LN6@M_DrawConn
$LN12@M_DrawConn:

; 801  : 	else
; 802  : 	for (i = 0; i < min(serverlistcount - serverlistpage * SERVERS_PER_PAGE, SERVERS_PER_PAGE); i++)

  00102	33 c0		 xor	 eax, eax
  00104	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00108	eb 0c		 jmp	 SHORT $LN7@M_DrawConn
$LN5@M_DrawConn:
  0010a	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0010e	66 83 c0 01	 add	 ax, 1
  00112	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN7@M_DrawConn:
  00116	6b 05 00 00 00
	00 0a		 imul	 eax, DWORD PTR _serverlistpage, 10
  0011d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _serverlistcount
  00123	2b c8		 sub	 ecx, eax
  00125	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00128	73 13		 jae	 SHORT $LN27@M_DrawConn
  0012a	6b 15 00 00 00
	00 0a		 imul	 edx, DWORD PTR _serverlistpage, 10
  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  00136	2b c2		 sub	 eax, edx
  00138	89 45 88	 mov	 DWORD PTR tv144[ebp], eax
  0013b	eb 07		 jmp	 SHORT $LN28@M_DrawConn
$LN27@M_DrawConn:
  0013d	c7 45 88 0a 00
	00 00		 mov	 DWORD PTR tv144[ebp], 10 ; 0000000aH
$LN28@M_DrawConn:
  00144	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00148	3b 4d 88	 cmp	 ecx, DWORD PTR tv144[ebp]
  0014b	0f 83 d6 02 00
	00		 jae	 $LN6@M_DrawConn

; 803  : 	{
; 804  : 		INT32 slindex = i + serverlistpage * SERVERS_PER_PAGE;

  00151	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00155	6b 0d 00 00 00
	00 0a		 imul	 ecx, DWORD PTR _serverlistpage, 10
  0015c	03 c1		 add	 eax, ecx
  0015e	89 45 d4	 mov	 DWORD PTR _slindex$3[ebp], eax

; 805  : 		UINT32 globalflags = ((serverlist[slindex].info.numberofplayer >= serverlist[slindex].info.maxplayer) ? V_TRANSLUCENT : 0)

  00161	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  00168	0f b6 88 03 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+3]
  0016f	69 55 d4 01 04
	00 00		 imul	 edx, DWORD PTR _slindex$3[ebp], 1025
  00176	0f b6 82 04 00
	00 00		 movzx	 eax, BYTE PTR _serverlist[edx+4]
  0017d	3b c8		 cmp	 ecx, eax
  0017f	7c 09		 jl	 SHORT $LN29@M_DrawConn
  00181	c7 45 88 00 00
	40 00		 mov	 DWORD PTR tv158[ebp], 4194304 ; 00400000H
  00188	eb 07		 jmp	 SHORT $LN30@M_DrawConn
$LN29@M_DrawConn:
  0018a	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN30@M_DrawConn:
  00191	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _itemOn
  00198	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  0019c	83 c2 07	 add	 edx, 7
  0019f	3b ca		 cmp	 ecx, edx
  001a1	75 09		 jne	 SHORT $LN31@M_DrawConn
  001a3	c7 45 84 00 00
	10 00		 mov	 DWORD PTR tv163[ebp], 1048576 ; 00100000H
  001aa	eb 07		 jmp	 SHORT $LN32@M_DrawConn
$LN31@M_DrawConn:
  001ac	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv163[ebp], 0
$LN32@M_DrawConn:
  001b3	8b 45 88	 mov	 eax, DWORD PTR tv158[ebp]
  001b6	0b 45 84	 or	 eax, DWORD PTR tv163[ebp]
  001b9	89 45 d0	 mov	 DWORD PTR _globalflags$2[ebp], eax

; 806  : 			| ((itemOn == FIRSTSERVERLINE+i) ? V_YELLOWMAP : 0);
; 807  : 
; 808  : 		strlcpy(servername, serverlist[slindex].info.servername, sizeof (servername));

  001bc	6a 15		 push	 21			; 00000015H
  001be	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  001c5	05 13 00 00 00	 add	 eax, OFFSET _serverlist+19
  001ca	50		 push	 eax
  001cb	8d 4d d8	 lea	 ecx, DWORD PTR _servername$[ebp]
  001ce	51		 push	 ecx
  001cf	e8 00 00 00 00	 call	 _strlcpy
  001d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 809  : 		servername[20] = '\0';

  001d7	b8 01 00 00 00	 mov	 eax, 1
  001dc	6b c8 14	 imul	 ecx, eax, 20
  001df	89 4d 8c	 mov	 DWORD PTR $T1[ebp], ecx
  001e2	83 7d 8c 15	 cmp	 DWORD PTR $T1[ebp], 21	; 00000015H
  001e6	73 02		 jae	 SHORT $LN33@M_DrawConn
  001e8	eb 06		 jmp	 SHORT $LN34@M_DrawConn
$LN33@M_DrawConn:
  001ea	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  001ef	90		 npad	 1
$LN34@M_DrawConn:
  001f0	8b 55 8c	 mov	 edx, DWORD PTR $T1[ebp]
  001f3	c6 44 15 d8 00	 mov	 BYTE PTR _servername$[ebp+edx], 0

; 810  : 
; 811  : 		V_DrawString(currentMenu->x,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, globalflags | V_ALLOWLOWERCASE, servername);

  001f8	8d 45 d8	 lea	 eax, DWORD PTR _servername$[ebp]
  001fb	50		 push	 eax
  001fc	8b 4d d0	 mov	 ecx, DWORD PTR _globalflags$2[ebp]
  001ff	81 c9 00 00 04
	00		 or	 ecx, 262144		; 00040000H
  00205	51		 push	 ecx
  00206	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0020c	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  00210	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00214	8d 54 c8 38	 lea	 edx, DWORD PTR [eax+ecx*8+56]
  00218	52		 push	 edx
  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0021e	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00222	51		 push	 ecx
  00223	e8 00 00 00 00	 call	 _V_DrawString
  00228	83 c4 10	 add	 esp, 16			; 00000010H

; 812  : 
; 813  : 		if (serverlist[slindex].info.modifiedgame)

  0022b	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  00232	0f b6 88 06 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+6]
  00239	85 c9		 test	 ecx, ecx
  0023b	74 32		 je	 SHORT $LN14@M_DrawConn

; 814  : 			V_DrawString(currentMenu->x+164,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, 0, "\x85" "M");

  0023d	68 00 00 00 00	 push	 OFFSET ??_C@_02KCJHMOMO@?$IFM@
  00242	6a 00		 push	 0
  00244	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00249	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  0024d	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  00251	8d 44 d1 38	 lea	 eax, DWORD PTR [ecx+edx*8+56]
  00255	50		 push	 eax
  00256	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0025c	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  00260	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00266	52		 push	 edx
  00267	e8 00 00 00 00	 call	 _V_DrawString
  0026c	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@M_DrawConn:

; 815  : 		if (serverlist[slindex].info.cheatsenabled)

  0026f	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  00276	0f b6 88 07 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+7]
  0027d	85 c9		 test	 ecx, ecx
  0027f	74 32		 je	 SHORT $LN15@M_DrawConn

; 816  : 			V_DrawString(currentMenu->x+172,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, 0, "\x83" "C");

  00281	68 00 00 00 00	 push	 OFFSET ??_C@_02DIJJJPPC@?$IDC@
  00286	6a 00		 push	 0
  00288	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0028d	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  00291	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  00295	8d 44 d1 38	 lea	 eax, DWORD PTR [ecx+edx*8+56]
  00299	50		 push	 eax
  0029a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  002a0	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  002a4	81 c2 ac 00 00
	00		 add	 edx, 172		; 000000acH
  002aa	52		 push	 edx
  002ab	e8 00 00 00 00	 call	 _V_DrawString
  002b0	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@M_DrawConn:

; 817  : 
; 818  : 		p = va("%u", (UINT32)LONG(serverlist[slindex].info.time));

  002b3	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  002ba	8b 88 0b 00 00
	00		 mov	 ecx, DWORD PTR _serverlist[eax+11]
  002c0	51		 push	 ecx
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  002c6	e8 00 00 00 00	 call	 _va
  002cb	83 c4 08	 add	 esp, 8
  002ce	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 819  : 		V_DrawCenteredString (currentMenu->x+200,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, globalflags, p);

  002d1	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  002d4	50		 push	 eax
  002d5	8b 4d d0	 mov	 ecx, DWORD PTR _globalflags$2[ebp]
  002d8	51		 push	 ecx
  002d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  002df	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  002e3	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  002e7	8d 54 c8 38	 lea	 edx, DWORD PTR [eax+ecx*8+56]
  002eb	52		 push	 edx
  002ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  002f1	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  002f5	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  002fb	51		 push	 ecx
  002fc	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00301	83 c4 10	 add	 esp, 16			; 00000010H

; 820  : 
; 821  : 		switch (serverlist[slindex].info.gametype)

  00304	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  0030b	0f b6 88 05 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+5]
  00312	89 4d 88	 mov	 DWORD PTR tv246[ebp], ecx
  00315	83 7d 88 04	 cmp	 DWORD PTR tv246[ebp], 4
  00319	77 28		 ja	 SHORT $LN21@M_DrawConn
  0031b	8b 55 88	 mov	 edx, DWORD PTR tv246[ebp]
  0031e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN35@M_DrawConn[edx*4]
$LN16@M_DrawConn:

; 822  : 		{
; 823  : 			case GT_COOP:
; 824  : 				cgametype = 'C';

  00325	c6 45 f3 43	 mov	 BYTE PTR _cgametype$[ebp], 67 ; 00000043H

; 825  : 				break;

  00329	eb 38		 jmp	 SHORT $LN8@M_DrawConn
$LN17@M_DrawConn:

; 826  : 			case GT_MATCH:
; 827  : 				cgametype = 'M';

  0032b	c6 45 f3 4d	 mov	 BYTE PTR _cgametype$[ebp], 77 ; 0000004dH

; 828  : 				break;

  0032f	eb 32		 jmp	 SHORT $LN8@M_DrawConn
$LN18@M_DrawConn:

; 829  : 			case GT_RACE:
; 830  : 				cgametype = 'R';

  00331	c6 45 f3 52	 mov	 BYTE PTR _cgametype$[ebp], 82 ; 00000052H

; 831  : 				break;

  00335	eb 2c		 jmp	 SHORT $LN8@M_DrawConn
$LN19@M_DrawConn:

; 832  : 			case GT_TAG:
; 833  : 				cgametype = 'T';

  00337	c6 45 f3 54	 mov	 BYTE PTR _cgametype$[ebp], 84 ; 00000054H

; 834  : 				break;

  0033b	eb 26		 jmp	 SHORT $LN8@M_DrawConn
$LN20@M_DrawConn:

; 835  : 			case GT_CTF:
; 836  : 				cgametype = 'F';

  0033d	c6 45 f3 46	 mov	 BYTE PTR _cgametype$[ebp], 70 ; 00000046H

; 837  : 				break;

  00341	eb 20		 jmp	 SHORT $LN8@M_DrawConn
$LN21@M_DrawConn:

; 838  : 			default:
; 839  : 				cgametype = 'U';

  00343	c6 45 f3 55	 mov	 BYTE PTR _cgametype$[ebp], 85 ; 00000055H

; 840  : 				CONS_Printf("M_DrawConnectMenu: Unknown gametype %d\n", serverlist[slindex].info.gametype);

  00347	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  0034e	0f b6 88 05 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+5]
  00355	51		 push	 ecx
  00356	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@OFNJKBHE@M_DrawConnectMenu?3?5Unknown?5game@
  0035b	e8 00 00 00 00	 call	 _CONS_Printf
  00360	83 c4 08	 add	 esp, 8
$LN8@M_DrawConn:

; 841  : 				break;
; 842  : 		}
; 843  : 
; 844  : 		p = va("%02d/%02d", serverlist[slindex].info.numberofplayer,

  00363	69 45 d4 01 04
	00 00		 imul	 eax, DWORD PTR _slindex$3[ebp], 1025
  0036a	0f b6 88 04 00
	00 00		 movzx	 ecx, BYTE PTR _serverlist[eax+4]
  00371	51		 push	 ecx
  00372	69 55 d4 01 04
	00 00		 imul	 edx, DWORD PTR _slindex$3[ebp], 1025
  00379	0f b6 82 03 00
	00 00		 movzx	 eax, BYTE PTR _serverlist[edx+3]
  00380	50		 push	 eax
  00381	68 00 00 00 00	 push	 OFFSET ??_C@_09KKPNDFC@?$CF02d?1?$CF02d@
  00386	e8 00 00 00 00	 call	 _va
  0038b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0038e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 845  : 		                    serverlist[slindex].info.maxplayer); // Tails 01-18-2001
; 846  : 		V_DrawRightAlignedString(currentMenu->x+264,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, globalflags, p);

  00391	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00394	50		 push	 eax
  00395	8b 4d d0	 mov	 ecx, DWORD PTR _globalflags$2[ebp]
  00398	51		 push	 ecx
  00399	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0039f	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  003a3	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  003a7	8d 54 c8 38	 lea	 edx, DWORD PTR [eax+ecx*8+56]
  003ab	52		 push	 edx
  003ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  003b1	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  003b5	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  003bb	51		 push	 ecx
  003bc	e8 00 00 00 00	 call	 _V_DrawRightAlignedString
  003c1	83 c4 10	 add	 esp, 16			; 00000010H

; 847  : 
; 848  : 		p = va("%c", cgametype);

  003c4	0f be 45 f3	 movsx	 eax, BYTE PTR _cgametype$[ebp]
  003c8	50		 push	 eax
  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  003ce	e8 00 00 00 00	 call	 _va
  003d3	83 c4 08	 add	 esp, 8
  003d6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 849  : 		V_DrawString(currentMenu->x+272,currentMenu->y+(FIRSTSERVERLINE+i)*STRINGHEIGHT, globalflags, p);

  003d9	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003dc	50		 push	 eax
  003dd	8b 4d d0	 mov	 ecx, DWORD PTR _globalflags$2[ebp]
  003e0	51		 push	 ecx
  003e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  003e7	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  003eb	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  003ef	8d 54 c8 38	 lea	 edx, DWORD PTR [eax+ecx*8+56]
  003f3	52		 push	 edx
  003f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  003f9	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  003fd	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  00403	51		 push	 ecx
  00404	e8 00 00 00 00	 call	 _V_DrawString
  00409	83 c4 10	 add	 esp, 16			; 00000010H

; 850  : 
; 851  : 
; 852  : 		ConnectMenu[i+FIRSTSERVERLINE].status = IT_STRING | IT_CALL;

  0040c	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00410	83 c0 07	 add	 eax, 7
  00413	6b c8 14	 imul	 ecx, eax, 20
  00416	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0041b	66 89 91 00 00
	00 00		 mov	 WORD PTR _ConnectMenu[ecx], dx

; 853  : 	}

  00422	e9 e3 fc ff ff	 jmp	 $LN5@M_DrawConn
$LN6@M_DrawConn:

; 854  : 
; 855  : 	if (cv_chooseroom.value != oldroomnum)

  00427	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseroom+20
  0042c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _oldroomnum
  00432	74 3a		 je	 SHORT $LN22@M_DrawConn

; 856  : 	{
; 857  : 		V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT-20, V_YELLOWMAP, "Warning: Room has been changed");

  00434	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EHEFNEDJ@Warning?3?5Room?5has?5been?5changed@
  00439	68 00 00 10 00	 push	 1048576			; 00100000H
  0043e	68 b4 00 00 00	 push	 180			; 000000b4H
  00443	68 a0 00 00 00	 push	 160			; 000000a0H
  00448	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0044d	83 c4 10	 add	 esp, 16			; 00000010H

; 858  : 		V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT-12, V_YELLOWMAP, "since the last refresh.");

  00450	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LKGEIHMO@since?5the?5last?5refresh?4@
  00455	68 00 00 10 00	 push	 1048576			; 00100000H
  0045a	68 bc 00 00 00	 push	 188			; 000000bcH
  0045f	68 a0 00 00 00	 push	 160			; 000000a0H
  00464	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00469	83 c4 10	 add	 esp, 16			; 00000010H

; 859  : 	}

  0046c	eb 32		 jmp	 SHORT $LN23@M_DrawConn
$LN22@M_DrawConn:

; 860  : 	else
; 861  : 	{
; 862  : 		V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT-20, 0, "\x85" "M" "\x82" " = Game is modified.    ");

  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FFPMMFF@?$IFM?$IC?5?$DN?5Game?5is?5modified?4?5?5?5?5@
  00473	6a 00		 push	 0
  00475	68 b4 00 00 00	 push	 180			; 000000b4H
  0047a	68 a0 00 00 00	 push	 160			; 000000a0H
  0047f	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00484	83 c4 10	 add	 esp, 16			; 00000010H

; 863  : 		V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT-12, 0, "\x83" "C" "\x82" " = Cheats are enabled.");

  00487	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KIBBHFCG@?$IDC?$IC?5?$DN?5Cheats?5are?5enabled?4@
  0048c	6a 00		 push	 0
  0048e	68 bc 00 00 00	 push	 188			; 000000bcH
  00493	68 a0 00 00 00	 push	 160			; 000000a0H
  00498	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0049d	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@M_DrawConn:

; 864  : 	}
; 865  : 
; 866  : 	localservercount = serverlistcount;

  004a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  004a5	a3 00 00 00 00	 mov	 DWORD PTR _localservercount, eax

; 867  : 
; 868  : 	M_DrawGenericMenu();

  004aa	e8 00 00 00 00	 call	 _M_DrawGenericMenu
  004af	90		 npad	 1
$LN1@M_DrawConn:

; 869  : }

  004b0	5f		 pop	 edi
  004b1	5e		 pop	 esi
  004b2	5b		 pop	 ebx
  004b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b6	33 cd		 xor	 ecx, ebp
  004b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004bd	8b e5		 mov	 esp, ebp
  004bf	5d		 pop	 ebp
  004c0	c3		 ret	 0
  004c1	0f 1f 00	 npad	 3
$LN35@M_DrawConn:
  004c4	00 00 00 00	 DD	 $LN16@M_DrawConn
  004c8	00 00 00 00	 DD	 $LN17@M_DrawConn
  004cc	00 00 00 00	 DD	 $LN18@M_DrawConn
  004d0	00 00 00 00	 DD	 $LN19@M_DrawConn
  004d4	00 00 00 00	 DD	 $LN20@M_DrawConn
_M_DrawConnectMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Refresh
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Refresh PROC						; COMDAT

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 728  : 	(void)choice;
; 729  : 	CL_UpdateServerList(cv_serversearch.value, cv_chooseroom.value);

  00009	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseroom+20
  0000e	50		 push	 eax
  0000f	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_serversearch+20
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _CL_UpdateServerList
  0001b	83 c4 08	 add	 esp, 8

; 730  : 
; 731  : 	// first page of servers
; 732  : 	serverlistpage = 0;

  0001e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _serverlistpage, 0

; 733  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_M_Refresh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ConnectIP
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ConnectIP PROC					; COMDAT

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 712  : 	(void)choice;
; 713  : 	COM_BufAddText(va("connect %s\n", setupm_ip));

  00009	68 00 00 00 00	 push	 OFFSET _setupm_ip
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LNGHCJI@connect?5?$CFs?6@
  00013	e8 00 00 00 00	 call	 _va
  00018	83 c4 08	 add	 esp, 8
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _COM_BufAddText
  00021	83 c4 04	 add	 esp, 4

; 714  : 
; 715  : 	// A little "please wait" message.
; 716  : 	M_DrawTextBox(56, BASEVIDHEIGHT/2-12, 24, 2);

  00024	6a 02		 push	 2
  00026	6a 18		 push	 24			; 00000018H
  00028	6a 58		 push	 88			; 00000058H
  0002a	6a 38		 push	 56			; 00000038H
  0002c	e8 00 00 00 00	 call	 _M_DrawTextBox
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 717  : 	V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT/2, 0, "Connecting to server...");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BFELJAMF@Connecting?5to?5server?4?4?4@
  00039	6a 00		 push	 0
  0003b	6a 64		 push	 100			; 00000064H
  0003d	68 a0 00 00 00	 push	 160			; 000000a0H
  00042	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00047	83 c4 10	 add	 esp, 16			; 00000010H

; 718  : 	I_OsPolling();

  0004a	e8 00 00 00 00	 call	 _I_OsPolling
  0004f	90		 npad	 1

; 719  : 	I_UpdateNoBlit();

  00050	e8 00 00 00 00	 call	 _I_UpdateNoBlit
  00055	90		 npad	 1

; 720  : 	if (rendermode == render_soft)

  00056	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0005d	75 06		 jne	 SHORT $LN2@M_ConnectI

; 721  : 		I_FinishUpdate(); // page flip or blit buffer

  0005f	e8 00 00 00 00	 call	 _I_FinishUpdate
  00064	90		 npad	 1
$LN2@M_ConnectI:

; 722  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_M_ConnectIP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Connect
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Connect PROC						; COMDAT

; 694  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 695  : 	// do not call menuexitfunc
; 696  : 	M_ClearMenus(false);

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 _M_ClearMenus
  00010	83 c4 04	 add	 esp, 4

; 697  : 
; 698  : 	COM_BufAddText(va("connect node %d\n", serverlist[choice-FIRSTSERVERLINE + serverlistpage * SERVERS_PER_PAGE].node));

  00013	6b 05 00 00 00
	00 0a		 imul	 eax, DWORD PTR _serverlistpage, 10
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _choice$[ebp]
  0001d	8d 54 01 f9	 lea	 edx, DWORD PTR [ecx+eax-7]
  00021	69 c2 01 04 00
	00		 imul	 eax, edx, 1025
  00027	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR _serverlist[eax]
  0002e	51		 push	 ecx
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNMPHPBO@connect?5node?5?$CFd?6@
  00034	e8 00 00 00 00	 call	 _va
  00039	83 c4 08	 add	 esp, 8
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _COM_BufAddText
  00042	83 c4 04	 add	 esp, 4

; 699  : 
; 700  : 	// A little "please wait" message.
; 701  : 	M_DrawTextBox(56, BASEVIDHEIGHT/2-12, 24, 2);

  00045	6a 02		 push	 2
  00047	6a 18		 push	 24			; 00000018H
  00049	6a 58		 push	 88			; 00000058H
  0004b	6a 38		 push	 56			; 00000038H
  0004d	e8 00 00 00 00	 call	 _M_DrawTextBox
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 702  : 	V_DrawCenteredString(BASEVIDWIDTH/2, BASEVIDHEIGHT/2, 0, "Connecting to server...");

  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BFELJAMF@Connecting?5to?5server?4?4?4@
  0005a	6a 00		 push	 0
  0005c	6a 64		 push	 100			; 00000064H
  0005e	68 a0 00 00 00	 push	 160			; 000000a0H
  00063	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 703  : 	I_OsPolling();

  0006b	e8 00 00 00 00	 call	 _I_OsPolling
  00070	90		 npad	 1

; 704  : 	I_UpdateNoBlit();

  00071	e8 00 00 00 00	 call	 _I_UpdateNoBlit
  00076	90		 npad	 1

; 705  : 	if (rendermode == render_soft)

  00077	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0007e	75 06		 jne	 SHORT $LN2@M_Connect

; 706  : 		I_FinishUpdate(); // page flip or blit buffer

  00080	e8 00 00 00 00	 call	 _I_FinishUpdate
  00085	90		 npad	 1
$LN2@M_Connect:

; 707  : }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_M_Connect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Chooseroom_Onchange
_TEXT	SEGMENT
_M_Chooseroom_Onchange PROC				; COMDAT

; 1027 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1028 : #ifndef NONET
; 1029 : 	if (currentMenu == &RoomInfodef)

  00009	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _RoomInfodef
  00013	75 06		 jne	 SHORT $LN2@M_Choosero

; 1030 : 	{
; 1031 : 		M_AlterRoomInfo();

  00015	e8 00 00 00 00	 call	 _M_AlterRoomInfo
  0001a	90		 npad	 1
$LN2@M_Choosero:

; 1032 : 	}
; 1033 : #endif
; 1034 : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_M_Chooseroom_Onchange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_TimeAttack
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_TimeAttack PROC					; COMDAT

; 4217 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4218 : 	(void)choice;
; 4219 : 
; 4220 : 	if (modifiedgame && !savemoddata)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00010	74 1f		 je	 SHORT $LN2@M_TimeAtta
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00019	75 16		 jne	 SHORT $LN2@M_TimeAtta

; 4221 : 	{
; 4222 : 		M_StartMessage("This cannot be done in a modified game.\n",NULL,MM_NOTHING);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LPPDOMOD@This?5cannot?5be?5done?5in?5a?5modifi@
  00024	e8 00 00 00 00	 call	 _M_StartMessage
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4223 : 		return;

  0002c	e9 ac 00 00 00	 jmp	 $LN1@M_TimeAtta
$LN2@M_TimeAtta:

; 4224 : 	}
; 4225 : 
; 4226 : 	if (Playing())

  00031	e8 00 00 00 00	 call	 _Playing
  00036	85 c0		 test	 eax, eax
  00038	74 1a		 je	 SHORT $LN3@M_TimeAtta

; 4227 : 	{
; 4228 : 		M_StartMessage(ALREADYPLAYING,M_ExitGameResponse,MM_YESNO);

  0003a	6a 01		 push	 1
  0003c	68 00 00 00 00	 push	 OFFSET _M_ExitGameResponse
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR _ALREADYPLAYING
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _M_StartMessage
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4229 : 		return;

  0004f	e9 89 00 00 00	 jmp	 $LN1@M_TimeAtta
$LN3@M_TimeAtta:

; 4230 : 	}
; 4231 : 
; 4232 : 	memset(skins_cons_t, 0, sizeof (skins_cons_t));

  00054	68 08 01 00 00	 push	 264			; 00000108H
  00059	6a 00		 push	 0
  0005b	68 00 00 00 00	 push	 OFFSET _skins_cons_t
  00060	e8 00 00 00 00	 call	 _memset
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4233 : 
; 4234 : 	if (!(M_PatchLevelNameTable(2)))

  00068	6a 02		 push	 2
  0006a	e8 00 00 00 00	 call	 _M_PatchLevelNameTable
  0006f	83 c4 04	 add	 esp, 4
  00072	85 c0		 test	 eax, eax
  00074	75 13		 jne	 SHORT $LN4@M_TimeAtta

; 4235 : 	{
; 4236 : 		M_StartMessage("No time-attackable levels found.\n",NULL,MM_NOTHING);

  00076	6a 00		 push	 0
  00078	6a 00		 push	 0
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@HAALCNEE@No?5time?9attackable?5levels?5found@
  0007f	e8 00 00 00 00	 call	 _M_StartMessage
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4237 : 		return;

  00087	eb 54		 jmp	 SHORT $LN1@M_TimeAtta
$LN4@M_TimeAtta:

; 4238 : 	}
; 4239 : 
; 4240 : 	inlevelselect = 2; // Don't be dependent on cv_newgametype

  00089	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _inlevelselect, 2

; 4241 : 
; 4242 : 	M_PatchSkinNameTable();

  00093	e8 00 00 00 00	 call	 _M_PatchSkinNameTable
  00098	90		 npad	 1

; 4243 : 
; 4244 : 	M_SetupNextMenu(&TimeAttackDef);

  00099	68 00 00 00 00	 push	 OFFSET _TimeAttackDef
  0009e	e8 00 00 00 00	 call	 _M_SetupNextMenu
  000a3	83 c4 04	 add	 esp, 4

; 4245 : 
; 4246 : 	CV_AddValue(&cv_nextmap, 1);

  000a6	6a 01		 push	 1
  000a8	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  000ad	e8 00 00 00 00	 call	 _CV_AddValue
  000b2	83 c4 08	 add	 esp, 8

; 4247 : 	CV_AddValue(&cv_nextmap, -1);

  000b5	6a ff		 push	 -1
  000b7	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  000bc	e8 00 00 00 00	 call	 _CV_AddValue
  000c1	83 c4 08	 add	 esp, 8

; 4248 : 
; 4249 : 	G_SetGamestate(GS_TIMEATTACK);

  000c4	6a 0b		 push	 11			; 0000000bH
  000c6	e8 00 00 00 00	 call	 _G_SetGamestate
  000cb	83 c4 04	 add	 esp, 4

; 4250 : 	S_ChangeMusic(mus_racent, true);

  000ce	6a 01		 push	 1
  000d0	68 19 04 00 00	 push	 1049			; 00000419H
  000d5	e8 00 00 00 00	 call	 _S_ChangeMusic
  000da	83 c4 08	 add	 esp, 8
$LN1@M_TimeAtta:

; 4251 : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_M_TimeAttack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Statistics
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Statistics PROC					; COMDAT

; 3471 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3472 : 	(void)choice;
; 3473 : 	if (modifiedgame && !savemoddata)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00010	74 1c		 je	 SHORT $LN2@M_Statisti
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00019	75 13		 jne	 SHORT $LN2@M_Statisti

; 3474 : 	{
; 3475 : 		M_StartMessage("Statistics not available\nin modified games.", NULL, MM_NOTHING);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@EJGLNFLC@Statistics?5not?5available?6in?5mod@
  00024	e8 00 00 00 00	 call	 _M_StartMessage
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3476 : 		return;

  0002c	eb 0d		 jmp	 SHORT $LN1@M_Statisti
$LN2@M_Statisti:

; 3477 : 	}
; 3478 : 
; 3479 : 	M_SetupNextMenu(&StatsDef);

  0002e	68 00 00 00 00	 push	 OFFSET _StatsDef
  00033	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00038	83 c4 04	 add	 esp, 4
$LN1@M_Statisti:

; 3480 : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_M_Statistics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_LoadGame
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_LoadGame PROC					; COMDAT

; 7044 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7045 : 	(void)choice;
; 7046 : 	// change can't load message to can't load in server mode
; 7047 : 	if (netgame && !server)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 26		 je	 SHORT $LN2@M_LoadGame
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00019	75 1d		 jne	 SHORT $LN2@M_LoadGame

; 7048 : 	{
; 7049 : 		M_StartMessage(text[LOADNET],NULL,MM_NOTHING);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	b8 04 00 00 00	 mov	 eax, 4
  00024	c1 e0 02	 shl	 eax, 2
  00027	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 _M_StartMessage
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7050 : 		return;

  00036	eb 13		 jmp	 SHORT $LN1@M_LoadGame
$LN2@M_LoadGame:

; 7051 : 	}
; 7052 : 
; 7053 : 	M_SetupNextMenu(&LoadDef);

  00038	68 00 00 00 00	 push	 OFFSET _LoadDef
  0003d	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00042	83 c4 04	 add	 esp, 4

; 7054 : 	M_ReadSaveStrings();

  00045	e8 00 00 00 00	 call	 _M_ReadSaveStrings
  0004a	90		 npad	 1
$LN1@M_LoadGame:

; 7055 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_M_LoadGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_NewGame
_TEXT	SEGMENT
_M_NewGame PROC						; COMDAT

; 4044 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4045 : 	fromlevelselect = false;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _fromlevelselect, 0

; 4046 : 	pandoralevelselect = false;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _pandoralevelselect, 0

; 4047 : 	ultmode = false;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _ultmode, 0

; 4048 : 
; 4049 : 	startmap = spstage_start;

  00027	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _spstage_start
  0002d	66 a3 00 00 00
	00		 mov	 WORD PTR _startmap, ax

; 4050 : 	CV_SetValue(&cv_newgametype, GT_COOP); // Graue 09-08-2004

  00033	6a 00		 push	 0
  00035	68 00 00 00 00	 push	 OFFSET _cv_newgametype
  0003a	e8 00 00 00 00	 call	 _CV_SetValue
  0003f	83 c4 08	 add	 esp, 8

; 4051 : 
; 4052 : 	PlayerDef.prevMenu = currentMenu;

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00047	a3 0c 00 00 00	 mov	 DWORD PTR _PlayerDef+12, eax

; 4053 : 	M_SetupChoosePlayer(0);

  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 _M_SetupChoosePlayer
  00053	83 c4 04	 add	 esp, 4

; 4054 : 
; 4055 : 	StartSplitScreenGame = false;

  00056	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StartSplitScreenGame, 0

; 4056 : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_M_NewGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Stats4
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Stats4 PROC						; COMDAT

; 3497 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3498 : 	(void)choice;
; 3499 : 	oldlastmapnum = lastmapnum;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastmapnum
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _oldlastmapnum, eax

; 3500 : 	M_SetupNextMenu(&Stats4Def);

  00013	68 00 00 00 00	 push	 OFFSET _Stats4Def
  00018	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0001d	83 c4 04	 add	 esp, 4

; 3501 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_M_Stats4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Stats3
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Stats3 PROC						; COMDAT

; 3490 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3491 : 	(void)choice;
; 3492 : 	oldlastmapnum = lastmapnum;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastmapnum
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _oldlastmapnum, eax

; 3493 : 	M_SetupNextMenu(&Stats3Def);

  00013	68 00 00 00 00	 push	 OFFSET _Stats3Def
  00018	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0001d	83 c4 04	 add	 esp, 4

; 3494 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_M_Stats3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Stats2
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_Stats2 PROC						; COMDAT

; 3483 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3484 : 	(void)choice;
; 3485 : 	oldlastmapnum = lastmapnum;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _lastmapnum
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _oldlastmapnum, eax

; 3486 : 	M_SetupNextMenu(&Stats2Def);

  00013	68 00 00 00 00	 push	 OFFSET _Stats2Def
  00018	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0001d	83 c4 04	 add	 esp, 4

; 3487 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_M_Stats2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawStats5
_TEXT	SEGMENT
_emblem$1 = -24						; size = 4
_y$2 = -20						; size = 4
_i$3 = -16						; size = 4
_seconds$ = -12						; size = 3
_minutes$ = -8						; size = 3
_hours$ = -4						; size = 3
_M_DrawStats5 PROC					; COMDAT

; 3954 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3955 : 	char hours[3];
; 3956 : 	char minutes[3];
; 3957 : 	char seconds[3];
; 3958 : 
; 3959 : 	{
; 3960 : 		INT32 i;
; 3961 : 		INT32 y = 16;

  00009	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _y$2[ebp], 16	; 00000010H

; 3962 : 		emblem_t *emblem;
; 3963 : 
; 3964 : 		V_DrawCenteredString(BASEVIDWIDTH/2, y-16, V_YELLOWMAP, "BEST TIMES");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HLIECKEP@BEST?5TIMES@
  00015	68 00 00 10 00	 push	 1048576			; 00100000H
  0001a	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0001d	83 e8 10	 sub	 eax, 16			; 00000010H
  00020	50		 push	 eax
  00021	68 a0 00 00 00	 push	 160			; 000000a0H
  00026	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 3965 : 		V_DrawCenteredString(BASEVIDWIDTH/2, y-8, 0, "Page 5");

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_06DPHIDNPD@Page?55@
  00033	6a 00		 push	 0
  00035	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00038	83 e8 08	 sub	 eax, 8
  0003b	50		 push	 eax
  0003c	68 a0 00 00 00	 push	 160			; 000000a0H
  00041	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3966 : 
; 3967 : 		for (i = oldlastmapnum+1; i < NUMMAPS; i++)

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _oldlastmapnum
  0004e	83 c0 01	 add	 eax, 1
  00051	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN4@M_DrawStat
$LN2@M_DrawStat:
  00056	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@M_DrawStat:
  0005f	81 7d f0 0b 04
	00 00		 cmp	 DWORD PTR _i$3[ebp], 1035 ; 0000040bH
  00066	0f 8d 7d 03 00
	00		 jge	 $LN3@M_DrawStat

; 3968 : 		{
; 3969 : 			if (mapheaderinfo[i].lvlttl[0] == '\0')

  0006c	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	6b d1 00	 imul	 edx, ecx, 0
  0007b	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _mapheaderinfo[eax+edx]
  00083	85 c0		 test	 eax, eax
  00085	75 02		 jne	 SHORT $LN5@M_DrawStat

; 3970 : 				continue;

  00087	eb cd		 jmp	 SHORT $LN2@M_DrawStat
$LN5@M_DrawStat:

; 3971 : 
; 3972 : 			if (!(mapheaderinfo[i].typeoflevel & TOL_SP))

  00089	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00090	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  00097	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0009d	75 02		 jne	 SHORT $LN6@M_DrawStat

; 3973 : 				continue;

  0009f	eb b5		 jmp	 SHORT $LN2@M_DrawStat
$LN6@M_DrawStat:

; 3974 : 
; 3975 : 			if (!mapvisited[i])

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000a4	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mapvisited[eax]
  000ab	85 c9		 test	 ecx, ecx
  000ad	75 02		 jne	 SHORT $LN7@M_DrawStat

; 3976 : 				continue;

  000af	eb a5		 jmp	 SHORT $LN2@M_DrawStat
$LN7@M_DrawStat:

; 3977 : 
; 3978 : 			lastmapnum = i;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000b4	a3 00 00 00 00	 mov	 DWORD PTR _lastmapnum, eax

; 3979 : 
; 3980 : 			emblem = M_GetLevelEmblem(i+1, 0);

  000b9	6a 00		 push	 0
  000bb	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000be	83 c0 01	 add	 eax, 1
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  000c7	83 c4 08	 add	 esp, 8
  000ca	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3981 : 
; 3982 : 			if (emblem)

  000cd	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  000d1	74 4d		 je	 SHORT $LN10@M_DrawStat

; 3983 : 			{
; 3984 : 				if (emblem->collected)

  000d3	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  000d6	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  000da	85 c9		 test	 ecx, ecx
  000dc	74 22		 je	 SHORT $LN9@M_DrawStat

; 3985 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  000de	6a 65		 push	 101			; 00000065H
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  000e5	e8 00 00 00 00	 call	 _W_CachePatchName
  000ea	83 c4 08	 add	 esp, 8
  000ed	50		 push	 eax
  000ee	6a 00		 push	 0
  000f0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  000f3	50		 push	 eax
  000f4	6a 1e		 push	 30			; 0000001eH
  000f6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000fb	83 c4 10	 add	 esp, 16			; 00000010H
  000fe	eb 20		 jmp	 SHORT $LN10@M_DrawStat
$LN9@M_DrawStat:

; 3986 : 				else
; 3987 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00100	6a 65		 push	 101			; 00000065H
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  00107	e8 00 00 00 00	 call	 _W_CachePatchName
  0010c	83 c4 08	 add	 esp, 8
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00115	50		 push	 eax
  00116	6a 1e		 push	 30			; 0000001eH
  00118	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0011d	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@M_DrawStat:

; 3988 : 			}
; 3989 : 
; 3990 : 			emblem = M_GetLevelEmblem(i+1, 1);

  00120	6a 01		 push	 1
  00122	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00125	83 c0 01	 add	 eax, 1
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  0012e	83 c4 08	 add	 esp, 8
  00131	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3991 : 
; 3992 : 			if (emblem)

  00134	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  00138	74 4d		 je	 SHORT $LN13@M_DrawStat

; 3993 : 			{
; 3994 : 				if (emblem->collected)

  0013a	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  0013d	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  00141	85 c9		 test	 ecx, ecx
  00143	74 22		 je	 SHORT $LN12@M_DrawStat

; 3995 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  00145	6a 65		 push	 101			; 00000065H
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  0014c	e8 00 00 00 00	 call	 _W_CachePatchName
  00151	83 c4 08	 add	 esp, 8
  00154	50		 push	 eax
  00155	6a 00		 push	 0
  00157	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0015a	50		 push	 eax
  0015b	6a 2a		 push	 42			; 0000002aH
  0015d	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00162	83 c4 10	 add	 esp, 16			; 00000010H
  00165	eb 20		 jmp	 SHORT $LN13@M_DrawStat
$LN12@M_DrawStat:

; 3996 : 				else
; 3997 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00167	6a 65		 push	 101			; 00000065H
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  0016e	e8 00 00 00 00	 call	 _W_CachePatchName
  00173	83 c4 08	 add	 esp, 8
  00176	50		 push	 eax
  00177	6a 00		 push	 0
  00179	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0017c	50		 push	 eax
  0017d	6a 2a		 push	 42			; 0000002aH
  0017f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00184	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@M_DrawStat:

; 3998 : 			}
; 3999 : 
; 4000 : 			emblem = M_GetLevelEmblem(i+1, 2);

  00187	6a 02		 push	 2
  00189	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0018c	83 c0 01	 add	 eax, 1
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  00195	83 c4 08	 add	 esp, 8
  00198	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 4001 : 
; 4002 : 			if (emblem)

  0019b	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  0019f	74 4d		 je	 SHORT $LN16@M_DrawStat

; 4003 : 			{
; 4004 : 				if (emblem->collected)

  001a1	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  001a4	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  001a8	85 c9		 test	 ecx, ecx
  001aa	74 22		 je	 SHORT $LN15@M_DrawStat

; 4005 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  001ac	6a 65		 push	 101			; 00000065H
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  001b3	e8 00 00 00 00	 call	 _W_CachePatchName
  001b8	83 c4 08	 add	 esp, 8
  001bb	50		 push	 eax
  001bc	6a 00		 push	 0
  001be	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  001c1	50		 push	 eax
  001c2	6a 36		 push	 54			; 00000036H
  001c4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001c9	83 c4 10	 add	 esp, 16			; 00000010H
  001cc	eb 20		 jmp	 SHORT $LN16@M_DrawStat
$LN15@M_DrawStat:

; 4006 : 				else
; 4007 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  001ce	6a 65		 push	 101			; 00000065H
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  001d5	e8 00 00 00 00	 call	 _W_CachePatchName
  001da	83 c4 08	 add	 esp, 8
  001dd	50		 push	 eax
  001de	6a 00		 push	 0
  001e0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  001e3	50		 push	 eax
  001e4	6a 36		 push	 54			; 00000036H
  001e6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001eb	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@M_DrawStat:

; 4008 : 			}
; 4009 : 
; 4010 : 			if (mapheaderinfo[i].actnum != 0)

  001ee	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  001f5	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  001fc	85 c9		 test	 ecx, ecx
  001fe	74 40		 je	 SHORT $LN17@M_DrawStat

; 4011 : 				V_DrawString(32+36, y, V_YELLOWMAP, va("%s %d", mapheaderinfo[i].lvlttl, mapheaderinfo[i].actnum));

  00200	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00207	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  0020e	51		 push	 ecx
  0020f	69 55 f0 84 01
	00 00		 imul	 edx, DWORD PTR _i$3[ebp], 388
  00216	81 c2 00 00 00
	00		 add	 edx, OFFSET _mapheaderinfo
  0021c	52		 push	 edx
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_05DIALNFFA@?$CFs?5?$CFd@
  00222	e8 00 00 00 00	 call	 _va
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022a	50		 push	 eax
  0022b	68 00 00 10 00	 push	 1048576			; 00100000H
  00230	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00233	50		 push	 eax
  00234	6a 44		 push	 68			; 00000044H
  00236	e8 00 00 00 00	 call	 _V_DrawString
  0023b	83 c4 10	 add	 esp, 16			; 00000010H
  0023e	eb 20		 jmp	 SHORT $LN18@M_DrawStat
$LN17@M_DrawStat:

; 4012 : 			else
; 4013 : 				V_DrawString(32+36, y, V_YELLOWMAP, mapheaderinfo[i].lvlttl);

  00240	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00247	05 00 00 00 00	 add	 eax, OFFSET _mapheaderinfo
  0024c	50		 push	 eax
  0024d	68 00 00 10 00	 push	 1048576			; 00100000H
  00252	8b 4d ec	 mov	 ecx, DWORD PTR _y$2[ebp]
  00255	51		 push	 ecx
  00256	6a 44		 push	 68			; 00000044H
  00258	e8 00 00 00 00	 call	 _V_DrawString
  0025d	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@M_DrawStat:

; 4014 : 
; 4015 : 			if (timedata[i].time)

  00260	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00263	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _timedata[eax*4], 0
  0026b	0f 84 5f 01 00
	00		 je	 $LN19@M_DrawStat

; 4016 : 			{
; 4017 : 				if (G_TicsToMinutes(timedata[i].time, true) < 10)

  00271	6a 01		 push	 1
  00273	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00276	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00283	83 c4 08	 add	 esp, 8
  00286	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00289	7d 29		 jge	 SHORT $LN20@M_DrawStat

; 4018 : 					sprintf(minutes, "0%i", G_TicsToMinutes(timedata[i].time, true));

  0028b	6a 01		 push	 1
  0028d	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00290	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00297	51		 push	 ecx
  00298	e8 00 00 00 00	 call	 _G_TicsToMinutes
  0029d	83 c4 08	 add	 esp, 8
  002a0	50		 push	 eax
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  002a6	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  002a9	52		 push	 edx
  002aa	e8 00 00 00 00	 call	 _sprintf
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b2	eb 27		 jmp	 SHORT $LN21@M_DrawStat
$LN20@M_DrawStat:

; 4019 : 				else
; 4020 : 					sprintf(minutes, "%i", G_TicsToMinutes(timedata[i].time, true));

  002b4	6a 01		 push	 1
  002b6	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002b9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002c0	51		 push	 ecx
  002c1	e8 00 00 00 00	 call	 _G_TicsToMinutes
  002c6	83 c4 08	 add	 esp, 8
  002c9	50		 push	 eax
  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  002cf	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  002d2	52		 push	 edx
  002d3	e8 00 00 00 00	 call	 _sprintf
  002d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@M_DrawStat:

; 4021 : 
; 4022 : 				if (G_TicsToSeconds(timedata[i].time) < 10)

  002db	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002de	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002e5	51		 push	 ecx
  002e6	e8 00 00 00 00	 call	 _G_TicsToSeconds
  002eb	83 c4 04	 add	 esp, 4
  002ee	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002f1	7d 27		 jge	 SHORT $LN22@M_DrawStat

; 4023 : 					sprintf(seconds, "0%i", G_TicsToSeconds(timedata[i].time));

  002f3	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002f6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002fd	51		 push	 ecx
  002fe	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00303	83 c4 04	 add	 esp, 4
  00306	50		 push	 eax
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  0030c	8d 55 f4	 lea	 edx, DWORD PTR _seconds$[ebp]
  0030f	52		 push	 edx
  00310	e8 00 00 00 00	 call	 _sprintf
  00315	83 c4 0c	 add	 esp, 12			; 0000000cH
  00318	eb 25		 jmp	 SHORT $LN23@M_DrawStat
$LN22@M_DrawStat:

; 4024 : 				else
; 4025 : 					sprintf(seconds, "%i", G_TicsToSeconds(timedata[i].time));

  0031a	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0031d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0032a	83 c4 04	 add	 esp, 4
  0032d	50		 push	 eax
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00333	8d 55 f4	 lea	 edx, DWORD PTR _seconds$[ebp]
  00336	52		 push	 edx
  00337	e8 00 00 00 00	 call	 _sprintf
  0033c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@M_DrawStat:

; 4026 : 
; 4027 : 				if (G_TicsToCentiseconds(timedata[i].time) < 10)

  0033f	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00342	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00349	51		 push	 ecx
  0034a	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0034f	83 c4 04	 add	 esp, 4
  00352	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00355	7d 27		 jge	 SHORT $LN24@M_DrawStat

; 4028 : 					sprintf(hours, "0%i", G_TicsToCentiseconds(timedata[i].time));

  00357	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0035a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00361	51		 push	 ecx
  00362	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00367	83 c4 04	 add	 esp, 4
  0036a	50		 push	 eax
  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  00370	8d 55 fc	 lea	 edx, DWORD PTR _hours$[ebp]
  00373	52		 push	 edx
  00374	e8 00 00 00 00	 call	 _sprintf
  00379	83 c4 0c	 add	 esp, 12			; 0000000cH
  0037c	eb 25		 jmp	 SHORT $LN25@M_DrawStat
$LN24@M_DrawStat:

; 4029 : 				else
; 4030 : 					sprintf(hours, "%i", G_TicsToCentiseconds(timedata[i].time));

  0037e	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00381	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00388	51		 push	 ecx
  00389	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0038e	83 c4 04	 add	 esp, 4
  00391	50		 push	 eax
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00397	8d 55 fc	 lea	 edx, DWORD PTR _hours$[ebp]
  0039a	52		 push	 edx
  0039b	e8 00 00 00 00	 call	 _sprintf
  003a0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@M_DrawStat:

; 4031 : 
; 4032 : 				V_DrawString(224+28, y, 0, va("%s:%s:%s", minutes,seconds,hours));

  003a3	8d 45 fc	 lea	 eax, DWORD PTR _hours$[ebp]
  003a6	50		 push	 eax
  003a7	8d 4d f4	 lea	 ecx, DWORD PTR _seconds$[ebp]
  003aa	51		 push	 ecx
  003ab	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  003ae	52		 push	 edx
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@
  003b4	e8 00 00 00 00	 call	 _va
  003b9	83 c4 10	 add	 esp, 16			; 00000010H
  003bc	50		 push	 eax
  003bd	6a 00		 push	 0
  003bf	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  003c2	50		 push	 eax
  003c3	68 fc 00 00 00	 push	 252			; 000000fcH
  003c8	e8 00 00 00 00	 call	 _V_DrawString
  003cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@M_DrawStat:

; 4033 : 			}
; 4034 : 
; 4035 : 			y += 8;

  003d0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  003d3	83 c0 08	 add	 eax, 8
  003d6	89 45 ec	 mov	 DWORD PTR _y$2[ebp], eax

; 4036 : 
; 4037 : 			if (y >= BASEVIDHEIGHT-8)

  003d9	81 7d ec c0 00
	00 00		 cmp	 DWORD PTR _y$2[ebp], 192 ; 000000c0H
  003e0	7c 02		 jl	 SHORT $LN26@M_DrawStat

; 4038 : 				return;

  003e2	eb 05		 jmp	 SHORT $LN3@M_DrawStat
$LN26@M_DrawStat:

; 4039 : 		}

  003e4	e9 6d fc ff ff	 jmp	 $LN2@M_DrawStat
$LN3@M_DrawStat:

; 4040 : 	}
; 4041 : }

  003e9	5f		 pop	 edi
  003ea	5e		 pop	 esi
  003eb	5b		 pop	 ebx
  003ec	8b e5		 mov	 esp, ebp
  003ee	5d		 pop	 ebp
  003ef	c3		 ret	 0
_M_DrawStats5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawStats4
_TEXT	SEGMENT
_emblem$1 = -24						; size = 4
_y$2 = -20						; size = 4
_i$3 = -16						; size = 4
_seconds$ = -12						; size = 3
_minutes$ = -8						; size = 3
_hours$ = -4						; size = 3
_M_DrawStats4 PROC					; COMDAT

; 3864 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3865 : 	char hours[3];
; 3866 : 	char minutes[3];
; 3867 : 	char seconds[3];
; 3868 : 
; 3869 : 	{
; 3870 : 		INT32 i;
; 3871 : 		INT32 y = 16;

  00009	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _y$2[ebp], 16	; 00000010H

; 3872 : 		emblem_t *emblem;
; 3873 : 
; 3874 : 		V_DrawCenteredString(BASEVIDWIDTH/2, y-16, V_YELLOWMAP, "BEST TIMES");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HLIECKEP@BEST?5TIMES@
  00015	68 00 00 10 00	 push	 1048576			; 00100000H
  0001a	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0001d	83 e8 10	 sub	 eax, 16			; 00000010H
  00020	50		 push	 eax
  00021	68 a0 00 00 00	 push	 160			; 000000a0H
  00026	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 3875 : 		V_DrawCenteredString(BASEVIDWIDTH/2, y-8, 0, "Page 4");

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_06CGGDAMLC@Page?54@
  00033	6a 00		 push	 0
  00035	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00038	83 e8 08	 sub	 eax, 8
  0003b	50		 push	 eax
  0003c	68 a0 00 00 00	 push	 160			; 000000a0H
  00041	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3876 : 
; 3877 : 		for (i = oldlastmapnum+1; i < NUMMAPS; i++)

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _oldlastmapnum
  0004e	83 c0 01	 add	 eax, 1
  00051	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN4@M_DrawStat
$LN2@M_DrawStat:
  00056	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@M_DrawStat:
  0005f	81 7d f0 0b 04
	00 00		 cmp	 DWORD PTR _i$3[ebp], 1035 ; 0000040bH
  00066	0f 8d 7d 03 00
	00		 jge	 $LN3@M_DrawStat

; 3878 : 		{
; 3879 : 			if (mapheaderinfo[i].lvlttl[0] == '\0')

  0006c	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	6b d1 00	 imul	 edx, ecx, 0
  0007b	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _mapheaderinfo[eax+edx]
  00083	85 c0		 test	 eax, eax
  00085	75 02		 jne	 SHORT $LN5@M_DrawStat

; 3880 : 				continue;

  00087	eb cd		 jmp	 SHORT $LN2@M_DrawStat
$LN5@M_DrawStat:

; 3881 : 
; 3882 : 			if (!(mapheaderinfo[i].typeoflevel & TOL_SP))

  00089	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00090	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  00097	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0009d	75 02		 jne	 SHORT $LN6@M_DrawStat

; 3883 : 				continue;

  0009f	eb b5		 jmp	 SHORT $LN2@M_DrawStat
$LN6@M_DrawStat:

; 3884 : 
; 3885 : 			if (!mapvisited[i])

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000a4	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mapvisited[eax]
  000ab	85 c9		 test	 ecx, ecx
  000ad	75 02		 jne	 SHORT $LN7@M_DrawStat

; 3886 : 				continue;

  000af	eb a5		 jmp	 SHORT $LN2@M_DrawStat
$LN7@M_DrawStat:

; 3887 : 
; 3888 : 			lastmapnum = i;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000b4	a3 00 00 00 00	 mov	 DWORD PTR _lastmapnum, eax

; 3889 : 
; 3890 : 			emblem = M_GetLevelEmblem(i+1, 0);

  000b9	6a 00		 push	 0
  000bb	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000be	83 c0 01	 add	 eax, 1
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  000c7	83 c4 08	 add	 esp, 8
  000ca	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3891 : 
; 3892 : 			if (emblem)

  000cd	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  000d1	74 4d		 je	 SHORT $LN10@M_DrawStat

; 3893 : 			{
; 3894 : 				if (emblem->collected)

  000d3	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  000d6	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  000da	85 c9		 test	 ecx, ecx
  000dc	74 22		 je	 SHORT $LN9@M_DrawStat

; 3895 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  000de	6a 65		 push	 101			; 00000065H
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  000e5	e8 00 00 00 00	 call	 _W_CachePatchName
  000ea	83 c4 08	 add	 esp, 8
  000ed	50		 push	 eax
  000ee	6a 00		 push	 0
  000f0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  000f3	50		 push	 eax
  000f4	6a 1e		 push	 30			; 0000001eH
  000f6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000fb	83 c4 10	 add	 esp, 16			; 00000010H
  000fe	eb 20		 jmp	 SHORT $LN10@M_DrawStat
$LN9@M_DrawStat:

; 3896 : 				else
; 3897 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00100	6a 65		 push	 101			; 00000065H
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  00107	e8 00 00 00 00	 call	 _W_CachePatchName
  0010c	83 c4 08	 add	 esp, 8
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00115	50		 push	 eax
  00116	6a 1e		 push	 30			; 0000001eH
  00118	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0011d	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@M_DrawStat:

; 3898 : 			}
; 3899 : 
; 3900 : 			emblem = M_GetLevelEmblem(i+1, 1);

  00120	6a 01		 push	 1
  00122	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00125	83 c0 01	 add	 eax, 1
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  0012e	83 c4 08	 add	 esp, 8
  00131	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3901 : 
; 3902 : 			if (emblem)

  00134	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  00138	74 4d		 je	 SHORT $LN13@M_DrawStat

; 3903 : 			{
; 3904 : 				if (emblem->collected)

  0013a	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  0013d	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  00141	85 c9		 test	 ecx, ecx
  00143	74 22		 je	 SHORT $LN12@M_DrawStat

; 3905 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  00145	6a 65		 push	 101			; 00000065H
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  0014c	e8 00 00 00 00	 call	 _W_CachePatchName
  00151	83 c4 08	 add	 esp, 8
  00154	50		 push	 eax
  00155	6a 00		 push	 0
  00157	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0015a	50		 push	 eax
  0015b	6a 2a		 push	 42			; 0000002aH
  0015d	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00162	83 c4 10	 add	 esp, 16			; 00000010H
  00165	eb 20		 jmp	 SHORT $LN13@M_DrawStat
$LN12@M_DrawStat:

; 3906 : 				else
; 3907 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00167	6a 65		 push	 101			; 00000065H
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  0016e	e8 00 00 00 00	 call	 _W_CachePatchName
  00173	83 c4 08	 add	 esp, 8
  00176	50		 push	 eax
  00177	6a 00		 push	 0
  00179	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0017c	50		 push	 eax
  0017d	6a 2a		 push	 42			; 0000002aH
  0017f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00184	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@M_DrawStat:

; 3908 : 			}
; 3909 : 
; 3910 : 			emblem = M_GetLevelEmblem(i+1, 2);

  00187	6a 02		 push	 2
  00189	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0018c	83 c0 01	 add	 eax, 1
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  00195	83 c4 08	 add	 esp, 8
  00198	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3911 : 
; 3912 : 			if (emblem)

  0019b	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  0019f	74 4d		 je	 SHORT $LN16@M_DrawStat

; 3913 : 			{
; 3914 : 				if (emblem->collected)

  001a1	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  001a4	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  001a8	85 c9		 test	 ecx, ecx
  001aa	74 22		 je	 SHORT $LN15@M_DrawStat

; 3915 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  001ac	6a 65		 push	 101			; 00000065H
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  001b3	e8 00 00 00 00	 call	 _W_CachePatchName
  001b8	83 c4 08	 add	 esp, 8
  001bb	50		 push	 eax
  001bc	6a 00		 push	 0
  001be	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  001c1	50		 push	 eax
  001c2	6a 36		 push	 54			; 00000036H
  001c4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001c9	83 c4 10	 add	 esp, 16			; 00000010H
  001cc	eb 20		 jmp	 SHORT $LN16@M_DrawStat
$LN15@M_DrawStat:

; 3916 : 				else
; 3917 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  001ce	6a 65		 push	 101			; 00000065H
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  001d5	e8 00 00 00 00	 call	 _W_CachePatchName
  001da	83 c4 08	 add	 esp, 8
  001dd	50		 push	 eax
  001de	6a 00		 push	 0
  001e0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  001e3	50		 push	 eax
  001e4	6a 36		 push	 54			; 00000036H
  001e6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001eb	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@M_DrawStat:

; 3918 : 			}
; 3919 : 
; 3920 : 			if (mapheaderinfo[i].actnum != 0)

  001ee	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  001f5	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  001fc	85 c9		 test	 ecx, ecx
  001fe	74 40		 je	 SHORT $LN17@M_DrawStat

; 3921 : 				V_DrawString(32+36, y, V_YELLOWMAP, va("%s %d", mapheaderinfo[i].lvlttl, mapheaderinfo[i].actnum));

  00200	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00207	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  0020e	51		 push	 ecx
  0020f	69 55 f0 84 01
	00 00		 imul	 edx, DWORD PTR _i$3[ebp], 388
  00216	81 c2 00 00 00
	00		 add	 edx, OFFSET _mapheaderinfo
  0021c	52		 push	 edx
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_05DIALNFFA@?$CFs?5?$CFd@
  00222	e8 00 00 00 00	 call	 _va
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022a	50		 push	 eax
  0022b	68 00 00 10 00	 push	 1048576			; 00100000H
  00230	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00233	50		 push	 eax
  00234	6a 44		 push	 68			; 00000044H
  00236	e8 00 00 00 00	 call	 _V_DrawString
  0023b	83 c4 10	 add	 esp, 16			; 00000010H
  0023e	eb 20		 jmp	 SHORT $LN18@M_DrawStat
$LN17@M_DrawStat:

; 3922 : 			else
; 3923 : 				V_DrawString(32+36, y, V_YELLOWMAP, mapheaderinfo[i].lvlttl);

  00240	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00247	05 00 00 00 00	 add	 eax, OFFSET _mapheaderinfo
  0024c	50		 push	 eax
  0024d	68 00 00 10 00	 push	 1048576			; 00100000H
  00252	8b 4d ec	 mov	 ecx, DWORD PTR _y$2[ebp]
  00255	51		 push	 ecx
  00256	6a 44		 push	 68			; 00000044H
  00258	e8 00 00 00 00	 call	 _V_DrawString
  0025d	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@M_DrawStat:

; 3924 : 
; 3925 : 			if (timedata[i].time)

  00260	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00263	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _timedata[eax*4], 0
  0026b	0f 84 5f 01 00
	00		 je	 $LN19@M_DrawStat

; 3926 : 			{
; 3927 : 				if (G_TicsToMinutes(timedata[i].time, true) < 10)

  00271	6a 01		 push	 1
  00273	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00276	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00283	83 c4 08	 add	 esp, 8
  00286	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00289	7d 29		 jge	 SHORT $LN20@M_DrawStat

; 3928 : 					sprintf(minutes, "0%i", G_TicsToMinutes(timedata[i].time, true));

  0028b	6a 01		 push	 1
  0028d	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00290	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00297	51		 push	 ecx
  00298	e8 00 00 00 00	 call	 _G_TicsToMinutes
  0029d	83 c4 08	 add	 esp, 8
  002a0	50		 push	 eax
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  002a6	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  002a9	52		 push	 edx
  002aa	e8 00 00 00 00	 call	 _sprintf
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b2	eb 27		 jmp	 SHORT $LN21@M_DrawStat
$LN20@M_DrawStat:

; 3929 : 				else
; 3930 : 					sprintf(minutes, "%i", G_TicsToMinutes(timedata[i].time, true));

  002b4	6a 01		 push	 1
  002b6	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002b9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002c0	51		 push	 ecx
  002c1	e8 00 00 00 00	 call	 _G_TicsToMinutes
  002c6	83 c4 08	 add	 esp, 8
  002c9	50		 push	 eax
  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  002cf	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  002d2	52		 push	 edx
  002d3	e8 00 00 00 00	 call	 _sprintf
  002d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@M_DrawStat:

; 3931 : 
; 3932 : 				if (G_TicsToSeconds(timedata[i].time) < 10)

  002db	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002de	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002e5	51		 push	 ecx
  002e6	e8 00 00 00 00	 call	 _G_TicsToSeconds
  002eb	83 c4 04	 add	 esp, 4
  002ee	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002f1	7d 27		 jge	 SHORT $LN22@M_DrawStat

; 3933 : 					sprintf(seconds, "0%i", G_TicsToSeconds(timedata[i].time));

  002f3	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002f6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002fd	51		 push	 ecx
  002fe	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00303	83 c4 04	 add	 esp, 4
  00306	50		 push	 eax
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  0030c	8d 55 f4	 lea	 edx, DWORD PTR _seconds$[ebp]
  0030f	52		 push	 edx
  00310	e8 00 00 00 00	 call	 _sprintf
  00315	83 c4 0c	 add	 esp, 12			; 0000000cH
  00318	eb 25		 jmp	 SHORT $LN23@M_DrawStat
$LN22@M_DrawStat:

; 3934 : 				else
; 3935 : 					sprintf(seconds, "%i", G_TicsToSeconds(timedata[i].time));

  0031a	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0031d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0032a	83 c4 04	 add	 esp, 4
  0032d	50		 push	 eax
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00333	8d 55 f4	 lea	 edx, DWORD PTR _seconds$[ebp]
  00336	52		 push	 edx
  00337	e8 00 00 00 00	 call	 _sprintf
  0033c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@M_DrawStat:

; 3936 : 
; 3937 : 				if (G_TicsToCentiseconds(timedata[i].time) < 10)

  0033f	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00342	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00349	51		 push	 ecx
  0034a	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0034f	83 c4 04	 add	 esp, 4
  00352	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00355	7d 27		 jge	 SHORT $LN24@M_DrawStat

; 3938 : 					sprintf(hours, "0%i", G_TicsToCentiseconds(timedata[i].time));

  00357	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0035a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00361	51		 push	 ecx
  00362	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00367	83 c4 04	 add	 esp, 4
  0036a	50		 push	 eax
  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  00370	8d 55 fc	 lea	 edx, DWORD PTR _hours$[ebp]
  00373	52		 push	 edx
  00374	e8 00 00 00 00	 call	 _sprintf
  00379	83 c4 0c	 add	 esp, 12			; 0000000cH
  0037c	eb 25		 jmp	 SHORT $LN25@M_DrawStat
$LN24@M_DrawStat:

; 3939 : 				else
; 3940 : 					sprintf(hours, "%i", G_TicsToCentiseconds(timedata[i].time));

  0037e	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00381	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00388	51		 push	 ecx
  00389	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0038e	83 c4 04	 add	 esp, 4
  00391	50		 push	 eax
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00397	8d 55 fc	 lea	 edx, DWORD PTR _hours$[ebp]
  0039a	52		 push	 edx
  0039b	e8 00 00 00 00	 call	 _sprintf
  003a0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@M_DrawStat:

; 3941 : 
; 3942 : 				V_DrawString(224+28, y, 0, va("%s:%s:%s", minutes,seconds,hours));

  003a3	8d 45 fc	 lea	 eax, DWORD PTR _hours$[ebp]
  003a6	50		 push	 eax
  003a7	8d 4d f4	 lea	 ecx, DWORD PTR _seconds$[ebp]
  003aa	51		 push	 ecx
  003ab	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  003ae	52		 push	 edx
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@
  003b4	e8 00 00 00 00	 call	 _va
  003b9	83 c4 10	 add	 esp, 16			; 00000010H
  003bc	50		 push	 eax
  003bd	6a 00		 push	 0
  003bf	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  003c2	50		 push	 eax
  003c3	68 fc 00 00 00	 push	 252			; 000000fcH
  003c8	e8 00 00 00 00	 call	 _V_DrawString
  003cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@M_DrawStat:

; 3943 : 			}
; 3944 : 
; 3945 : 			y += 8;

  003d0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  003d3	83 c0 08	 add	 eax, 8
  003d6	89 45 ec	 mov	 DWORD PTR _y$2[ebp], eax

; 3946 : 
; 3947 : 			if (y >= BASEVIDHEIGHT-8)

  003d9	81 7d ec c0 00
	00 00		 cmp	 DWORD PTR _y$2[ebp], 192 ; 000000c0H
  003e0	7c 02		 jl	 SHORT $LN26@M_DrawStat

; 3948 : 				return;

  003e2	eb 05		 jmp	 SHORT $LN3@M_DrawStat
$LN26@M_DrawStat:

; 3949 : 		}

  003e4	e9 6d fc ff ff	 jmp	 $LN2@M_DrawStat
$LN3@M_DrawStat:

; 3950 : 	}
; 3951 : }

  003e9	5f		 pop	 edi
  003ea	5e		 pop	 esi
  003eb	5b		 pop	 ebx
  003ec	8b e5		 mov	 esp, ebp
  003ee	5d		 pop	 ebp
  003ef	c3		 ret	 0
_M_DrawStats4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawStats3
_TEXT	SEGMENT
_emblem$1 = -24						; size = 4
_y$2 = -20						; size = 4
_i$3 = -16						; size = 4
_seconds$ = -12						; size = 3
_minutes$ = -8						; size = 3
_hours$ = -4						; size = 3
_M_DrawStats3 PROC					; COMDAT

; 3774 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3775 : 	char hours[3];
; 3776 : 	char minutes[3];
; 3777 : 	char seconds[3];
; 3778 : 
; 3779 : 	{
; 3780 : 		INT32 i;
; 3781 : 		INT32 y = 16;

  00009	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _y$2[ebp], 16	; 00000010H

; 3782 : 		emblem_t *emblem;
; 3783 : 
; 3784 : 		V_DrawCenteredString(BASEVIDWIDTH/2, y-16, V_YELLOWMAP, "BEST TIMES");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HLIECKEP@BEST?5TIMES@
  00015	68 00 00 10 00	 push	 1048576			; 00100000H
  0001a	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0001d	83 e8 10	 sub	 eax, 16			; 00000010H
  00020	50		 push	 eax
  00021	68 a0 00 00 00	 push	 160			; 000000a0H
  00026	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 3785 : 		V_DrawCenteredString(BASEVIDWIDTH/2, y-8, 0, "Page 3");

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_06GJCCJKHF@Page?53@
  00033	6a 00		 push	 0
  00035	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00038	83 e8 08	 sub	 eax, 8
  0003b	50		 push	 eax
  0003c	68 a0 00 00 00	 push	 160			; 000000a0H
  00041	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3786 : 
; 3787 : 		for (i = oldlastmapnum+1; i < NUMMAPS; i++)

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _oldlastmapnum
  0004e	83 c0 01	 add	 eax, 1
  00051	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN4@M_DrawStat
$LN2@M_DrawStat:
  00056	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@M_DrawStat:
  0005f	81 7d f0 0b 04
	00 00		 cmp	 DWORD PTR _i$3[ebp], 1035 ; 0000040bH
  00066	0f 8d 7d 03 00
	00		 jge	 $LN3@M_DrawStat

; 3788 : 		{
; 3789 : 			if (mapheaderinfo[i].lvlttl[0] == '\0')

  0006c	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	6b d1 00	 imul	 edx, ecx, 0
  0007b	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _mapheaderinfo[eax+edx]
  00083	85 c0		 test	 eax, eax
  00085	75 02		 jne	 SHORT $LN5@M_DrawStat

; 3790 : 				continue;

  00087	eb cd		 jmp	 SHORT $LN2@M_DrawStat
$LN5@M_DrawStat:

; 3791 : 
; 3792 : 			if (!(mapheaderinfo[i].typeoflevel & TOL_SP))

  00089	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00090	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  00097	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0009d	75 02		 jne	 SHORT $LN6@M_DrawStat

; 3793 : 				continue;

  0009f	eb b5		 jmp	 SHORT $LN2@M_DrawStat
$LN6@M_DrawStat:

; 3794 : 
; 3795 : 			if (!mapvisited[i])

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000a4	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mapvisited[eax]
  000ab	85 c9		 test	 ecx, ecx
  000ad	75 02		 jne	 SHORT $LN7@M_DrawStat

; 3796 : 				continue;

  000af	eb a5		 jmp	 SHORT $LN2@M_DrawStat
$LN7@M_DrawStat:

; 3797 : 
; 3798 : 			lastmapnum = i;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000b4	a3 00 00 00 00	 mov	 DWORD PTR _lastmapnum, eax

; 3799 : 
; 3800 : 			emblem = M_GetLevelEmblem(i+1, 0);

  000b9	6a 00		 push	 0
  000bb	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000be	83 c0 01	 add	 eax, 1
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  000c7	83 c4 08	 add	 esp, 8
  000ca	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3801 : 
; 3802 : 			if (emblem)

  000cd	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  000d1	74 4d		 je	 SHORT $LN10@M_DrawStat

; 3803 : 			{
; 3804 : 				if (emblem->collected)

  000d3	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  000d6	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  000da	85 c9		 test	 ecx, ecx
  000dc	74 22		 je	 SHORT $LN9@M_DrawStat

; 3805 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  000de	6a 65		 push	 101			; 00000065H
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  000e5	e8 00 00 00 00	 call	 _W_CachePatchName
  000ea	83 c4 08	 add	 esp, 8
  000ed	50		 push	 eax
  000ee	6a 00		 push	 0
  000f0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  000f3	50		 push	 eax
  000f4	6a 1e		 push	 30			; 0000001eH
  000f6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000fb	83 c4 10	 add	 esp, 16			; 00000010H
  000fe	eb 20		 jmp	 SHORT $LN10@M_DrawStat
$LN9@M_DrawStat:

; 3806 : 				else
; 3807 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00100	6a 65		 push	 101			; 00000065H
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  00107	e8 00 00 00 00	 call	 _W_CachePatchName
  0010c	83 c4 08	 add	 esp, 8
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00115	50		 push	 eax
  00116	6a 1e		 push	 30			; 0000001eH
  00118	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0011d	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@M_DrawStat:

; 3808 : 			}
; 3809 : 
; 3810 : 			emblem = M_GetLevelEmblem(i+1, 1);

  00120	6a 01		 push	 1
  00122	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00125	83 c0 01	 add	 eax, 1
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  0012e	83 c4 08	 add	 esp, 8
  00131	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3811 : 
; 3812 : 			if (emblem)

  00134	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  00138	74 4d		 je	 SHORT $LN13@M_DrawStat

; 3813 : 			{
; 3814 : 				if (emblem->collected)

  0013a	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  0013d	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  00141	85 c9		 test	 ecx, ecx
  00143	74 22		 je	 SHORT $LN12@M_DrawStat

; 3815 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  00145	6a 65		 push	 101			; 00000065H
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  0014c	e8 00 00 00 00	 call	 _W_CachePatchName
  00151	83 c4 08	 add	 esp, 8
  00154	50		 push	 eax
  00155	6a 00		 push	 0
  00157	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0015a	50		 push	 eax
  0015b	6a 2a		 push	 42			; 0000002aH
  0015d	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00162	83 c4 10	 add	 esp, 16			; 00000010H
  00165	eb 20		 jmp	 SHORT $LN13@M_DrawStat
$LN12@M_DrawStat:

; 3816 : 				else
; 3817 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00167	6a 65		 push	 101			; 00000065H
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  0016e	e8 00 00 00 00	 call	 _W_CachePatchName
  00173	83 c4 08	 add	 esp, 8
  00176	50		 push	 eax
  00177	6a 00		 push	 0
  00179	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0017c	50		 push	 eax
  0017d	6a 2a		 push	 42			; 0000002aH
  0017f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00184	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@M_DrawStat:

; 3818 : 			}
; 3819 : 
; 3820 : 			emblem = M_GetLevelEmblem(i+1, 2);

  00187	6a 02		 push	 2
  00189	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0018c	83 c0 01	 add	 eax, 1
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  00195	83 c4 08	 add	 esp, 8
  00198	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3821 : 
; 3822 : 			if (emblem)

  0019b	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  0019f	74 4d		 je	 SHORT $LN16@M_DrawStat

; 3823 : 			{
; 3824 : 				if (emblem->collected)

  001a1	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  001a4	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  001a8	85 c9		 test	 ecx, ecx
  001aa	74 22		 je	 SHORT $LN15@M_DrawStat

; 3825 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  001ac	6a 65		 push	 101			; 00000065H
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  001b3	e8 00 00 00 00	 call	 _W_CachePatchName
  001b8	83 c4 08	 add	 esp, 8
  001bb	50		 push	 eax
  001bc	6a 00		 push	 0
  001be	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  001c1	50		 push	 eax
  001c2	6a 36		 push	 54			; 00000036H
  001c4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001c9	83 c4 10	 add	 esp, 16			; 00000010H
  001cc	eb 20		 jmp	 SHORT $LN16@M_DrawStat
$LN15@M_DrawStat:

; 3826 : 				else
; 3827 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  001ce	6a 65		 push	 101			; 00000065H
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  001d5	e8 00 00 00 00	 call	 _W_CachePatchName
  001da	83 c4 08	 add	 esp, 8
  001dd	50		 push	 eax
  001de	6a 00		 push	 0
  001e0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  001e3	50		 push	 eax
  001e4	6a 36		 push	 54			; 00000036H
  001e6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001eb	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@M_DrawStat:

; 3828 : 			}
; 3829 : 
; 3830 : 			if (mapheaderinfo[i].actnum != 0)

  001ee	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  001f5	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  001fc	85 c9		 test	 ecx, ecx
  001fe	74 40		 je	 SHORT $LN17@M_DrawStat

; 3831 : 				V_DrawString(32+36, y, V_YELLOWMAP, va("%s %d", mapheaderinfo[i].lvlttl, mapheaderinfo[i].actnum));

  00200	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00207	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  0020e	51		 push	 ecx
  0020f	69 55 f0 84 01
	00 00		 imul	 edx, DWORD PTR _i$3[ebp], 388
  00216	81 c2 00 00 00
	00		 add	 edx, OFFSET _mapheaderinfo
  0021c	52		 push	 edx
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_05DIALNFFA@?$CFs?5?$CFd@
  00222	e8 00 00 00 00	 call	 _va
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022a	50		 push	 eax
  0022b	68 00 00 10 00	 push	 1048576			; 00100000H
  00230	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00233	50		 push	 eax
  00234	6a 44		 push	 68			; 00000044H
  00236	e8 00 00 00 00	 call	 _V_DrawString
  0023b	83 c4 10	 add	 esp, 16			; 00000010H
  0023e	eb 20		 jmp	 SHORT $LN18@M_DrawStat
$LN17@M_DrawStat:

; 3832 : 			else
; 3833 : 				V_DrawString(32+36, y, V_YELLOWMAP, mapheaderinfo[i].lvlttl);

  00240	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00247	05 00 00 00 00	 add	 eax, OFFSET _mapheaderinfo
  0024c	50		 push	 eax
  0024d	68 00 00 10 00	 push	 1048576			; 00100000H
  00252	8b 4d ec	 mov	 ecx, DWORD PTR _y$2[ebp]
  00255	51		 push	 ecx
  00256	6a 44		 push	 68			; 00000044H
  00258	e8 00 00 00 00	 call	 _V_DrawString
  0025d	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@M_DrawStat:

; 3834 : 
; 3835 : 			if (timedata[i].time)

  00260	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00263	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _timedata[eax*4], 0
  0026b	0f 84 5f 01 00
	00		 je	 $LN19@M_DrawStat

; 3836 : 			{
; 3837 : 				if (G_TicsToMinutes(timedata[i].time, true) < 10)

  00271	6a 01		 push	 1
  00273	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00276	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00283	83 c4 08	 add	 esp, 8
  00286	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00289	7d 29		 jge	 SHORT $LN20@M_DrawStat

; 3838 : 					sprintf(minutes, "0%i", G_TicsToMinutes(timedata[i].time, true));

  0028b	6a 01		 push	 1
  0028d	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00290	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00297	51		 push	 ecx
  00298	e8 00 00 00 00	 call	 _G_TicsToMinutes
  0029d	83 c4 08	 add	 esp, 8
  002a0	50		 push	 eax
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  002a6	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  002a9	52		 push	 edx
  002aa	e8 00 00 00 00	 call	 _sprintf
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b2	eb 27		 jmp	 SHORT $LN21@M_DrawStat
$LN20@M_DrawStat:

; 3839 : 				else
; 3840 : 					sprintf(minutes, "%i", G_TicsToMinutes(timedata[i].time, true));

  002b4	6a 01		 push	 1
  002b6	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002b9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002c0	51		 push	 ecx
  002c1	e8 00 00 00 00	 call	 _G_TicsToMinutes
  002c6	83 c4 08	 add	 esp, 8
  002c9	50		 push	 eax
  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  002cf	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  002d2	52		 push	 edx
  002d3	e8 00 00 00 00	 call	 _sprintf
  002d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@M_DrawStat:

; 3841 : 
; 3842 : 				if (G_TicsToSeconds(timedata[i].time) < 10)

  002db	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002de	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002e5	51		 push	 ecx
  002e6	e8 00 00 00 00	 call	 _G_TicsToSeconds
  002eb	83 c4 04	 add	 esp, 4
  002ee	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002f1	7d 27		 jge	 SHORT $LN22@M_DrawStat

; 3843 : 					sprintf(seconds, "0%i", G_TicsToSeconds(timedata[i].time));

  002f3	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002f6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002fd	51		 push	 ecx
  002fe	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00303	83 c4 04	 add	 esp, 4
  00306	50		 push	 eax
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  0030c	8d 55 f4	 lea	 edx, DWORD PTR _seconds$[ebp]
  0030f	52		 push	 edx
  00310	e8 00 00 00 00	 call	 _sprintf
  00315	83 c4 0c	 add	 esp, 12			; 0000000cH
  00318	eb 25		 jmp	 SHORT $LN23@M_DrawStat
$LN22@M_DrawStat:

; 3844 : 				else
; 3845 : 					sprintf(seconds, "%i", G_TicsToSeconds(timedata[i].time));

  0031a	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0031d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0032a	83 c4 04	 add	 esp, 4
  0032d	50		 push	 eax
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00333	8d 55 f4	 lea	 edx, DWORD PTR _seconds$[ebp]
  00336	52		 push	 edx
  00337	e8 00 00 00 00	 call	 _sprintf
  0033c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@M_DrawStat:

; 3846 : 
; 3847 : 				if (G_TicsToCentiseconds(timedata[i].time) < 10)

  0033f	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00342	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00349	51		 push	 ecx
  0034a	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0034f	83 c4 04	 add	 esp, 4
  00352	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00355	7d 27		 jge	 SHORT $LN24@M_DrawStat

; 3848 : 					sprintf(hours, "0%i", G_TicsToCentiseconds(timedata[i].time));

  00357	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0035a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00361	51		 push	 ecx
  00362	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00367	83 c4 04	 add	 esp, 4
  0036a	50		 push	 eax
  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  00370	8d 55 fc	 lea	 edx, DWORD PTR _hours$[ebp]
  00373	52		 push	 edx
  00374	e8 00 00 00 00	 call	 _sprintf
  00379	83 c4 0c	 add	 esp, 12			; 0000000cH
  0037c	eb 25		 jmp	 SHORT $LN25@M_DrawStat
$LN24@M_DrawStat:

; 3849 : 				else
; 3850 : 					sprintf(hours, "%i", G_TicsToCentiseconds(timedata[i].time));

  0037e	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00381	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00388	51		 push	 ecx
  00389	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0038e	83 c4 04	 add	 esp, 4
  00391	50		 push	 eax
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00397	8d 55 fc	 lea	 edx, DWORD PTR _hours$[ebp]
  0039a	52		 push	 edx
  0039b	e8 00 00 00 00	 call	 _sprintf
  003a0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@M_DrawStat:

; 3851 : 
; 3852 : 				V_DrawString(224+28, y, 0, va("%s:%s:%s", minutes,seconds,hours));

  003a3	8d 45 fc	 lea	 eax, DWORD PTR _hours$[ebp]
  003a6	50		 push	 eax
  003a7	8d 4d f4	 lea	 ecx, DWORD PTR _seconds$[ebp]
  003aa	51		 push	 ecx
  003ab	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  003ae	52		 push	 edx
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@
  003b4	e8 00 00 00 00	 call	 _va
  003b9	83 c4 10	 add	 esp, 16			; 00000010H
  003bc	50		 push	 eax
  003bd	6a 00		 push	 0
  003bf	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  003c2	50		 push	 eax
  003c3	68 fc 00 00 00	 push	 252			; 000000fcH
  003c8	e8 00 00 00 00	 call	 _V_DrawString
  003cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@M_DrawStat:

; 3853 : 			}
; 3854 : 
; 3855 : 			y += 8;

  003d0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  003d3	83 c0 08	 add	 eax, 8
  003d6	89 45 ec	 mov	 DWORD PTR _y$2[ebp], eax

; 3856 : 
; 3857 : 			if (y >= BASEVIDHEIGHT-8)

  003d9	81 7d ec c0 00
	00 00		 cmp	 DWORD PTR _y$2[ebp], 192 ; 000000c0H
  003e0	7c 02		 jl	 SHORT $LN26@M_DrawStat

; 3858 : 				return;

  003e2	eb 05		 jmp	 SHORT $LN3@M_DrawStat
$LN26@M_DrawStat:

; 3859 : 		}

  003e4	e9 6d fc ff ff	 jmp	 $LN2@M_DrawStat
$LN3@M_DrawStat:

; 3860 : 	}
; 3861 : }

  003e9	5f		 pop	 edi
  003ea	5e		 pop	 esi
  003eb	5b		 pop	 ebx
  003ec	8b e5		 mov	 esp, ebp
  003ee	5d		 pop	 ebp
  003ef	c3		 ret	 0
_M_DrawStats3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawStats2
_TEXT	SEGMENT
_emblem$1 = -24						; size = 4
_y$2 = -20						; size = 4
_i$3 = -16						; size = 4
_seconds$ = -12						; size = 3
_minutes$ = -8						; size = 3
_hours$ = -4						; size = 3
_M_DrawStats2 PROC					; COMDAT

; 3684 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3685 : 	char hours[3];
; 3686 : 	char minutes[3];
; 3687 : 	char seconds[3];
; 3688 : 
; 3689 : 	{
; 3690 : 		INT32 i;
; 3691 : 		INT32 y = 16;

  00009	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _y$2[ebp], 16	; 00000010H

; 3692 : 		emblem_t *emblem;
; 3693 : 
; 3694 : 		V_DrawCenteredString(BASEVIDWIDTH/2, y-16, V_YELLOWMAP, "BEST TIMES");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HLIECKEP@BEST?5TIMES@
  00015	68 00 00 10 00	 push	 1048576			; 00100000H
  0001a	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0001d	83 e8 10	 sub	 eax, 16			; 00000010H
  00020	50		 push	 eax
  00021	68 a0 00 00 00	 push	 160			; 000000a0H
  00026	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 3695 : 		V_DrawCenteredString(BASEVIDWIDTH/2, y-8, 0, "Page 2");

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_06HADJKLDE@Page?52@
  00033	6a 00		 push	 0
  00035	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00038	83 e8 08	 sub	 eax, 8
  0003b	50		 push	 eax
  0003c	68 a0 00 00 00	 push	 160			; 000000a0H
  00041	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3696 : 
; 3697 : 		for (i = oldlastmapnum+1; i < NUMMAPS; i++)

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _oldlastmapnum
  0004e	83 c0 01	 add	 eax, 1
  00051	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN4@M_DrawStat
$LN2@M_DrawStat:
  00056	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@M_DrawStat:
  0005f	81 7d f0 0b 04
	00 00		 cmp	 DWORD PTR _i$3[ebp], 1035 ; 0000040bH
  00066	0f 8d 7d 03 00
	00		 jge	 $LN3@M_DrawStat

; 3698 : 		{
; 3699 : 			if (mapheaderinfo[i].lvlttl[0] == '\0')

  0006c	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	6b d1 00	 imul	 edx, ecx, 0
  0007b	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _mapheaderinfo[eax+edx]
  00083	85 c0		 test	 eax, eax
  00085	75 02		 jne	 SHORT $LN5@M_DrawStat

; 3700 : 				continue;

  00087	eb cd		 jmp	 SHORT $LN2@M_DrawStat
$LN5@M_DrawStat:

; 3701 : 
; 3702 : 			if (!(mapheaderinfo[i].typeoflevel & TOL_SP))

  00089	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00090	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  00097	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0009d	75 02		 jne	 SHORT $LN6@M_DrawStat

; 3703 : 				continue;

  0009f	eb b5		 jmp	 SHORT $LN2@M_DrawStat
$LN6@M_DrawStat:

; 3704 : 
; 3705 : 			if (!mapvisited[i])

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000a4	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mapvisited[eax]
  000ab	85 c9		 test	 ecx, ecx
  000ad	75 02		 jne	 SHORT $LN7@M_DrawStat

; 3706 : 				continue;

  000af	eb a5		 jmp	 SHORT $LN2@M_DrawStat
$LN7@M_DrawStat:

; 3707 : 
; 3708 : 			lastmapnum = i;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000b4	a3 00 00 00 00	 mov	 DWORD PTR _lastmapnum, eax

; 3709 : 
; 3710 : 			emblem = M_GetLevelEmblem(i+1, 0);

  000b9	6a 00		 push	 0
  000bb	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  000be	83 c0 01	 add	 eax, 1
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  000c7	83 c4 08	 add	 esp, 8
  000ca	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3711 : 
; 3712 : 			if (emblem)

  000cd	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  000d1	74 4d		 je	 SHORT $LN10@M_DrawStat

; 3713 : 			{
; 3714 : 				if (emblem->collected)

  000d3	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  000d6	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  000da	85 c9		 test	 ecx, ecx
  000dc	74 22		 je	 SHORT $LN9@M_DrawStat

; 3715 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  000de	6a 65		 push	 101			; 00000065H
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  000e5	e8 00 00 00 00	 call	 _W_CachePatchName
  000ea	83 c4 08	 add	 esp, 8
  000ed	50		 push	 eax
  000ee	6a 00		 push	 0
  000f0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  000f3	50		 push	 eax
  000f4	6a 1e		 push	 30			; 0000001eH
  000f6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000fb	83 c4 10	 add	 esp, 16			; 00000010H
  000fe	eb 20		 jmp	 SHORT $LN10@M_DrawStat
$LN9@M_DrawStat:

; 3716 : 				else
; 3717 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00100	6a 65		 push	 101			; 00000065H
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  00107	e8 00 00 00 00	 call	 _W_CachePatchName
  0010c	83 c4 08	 add	 esp, 8
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00115	50		 push	 eax
  00116	6a 1e		 push	 30			; 0000001eH
  00118	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0011d	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@M_DrawStat:

; 3718 : 			}
; 3719 : 
; 3720 : 			emblem = M_GetLevelEmblem(i+1, 1);

  00120	6a 01		 push	 1
  00122	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00125	83 c0 01	 add	 eax, 1
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  0012e	83 c4 08	 add	 esp, 8
  00131	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3721 : 
; 3722 : 			if (emblem)

  00134	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  00138	74 4d		 je	 SHORT $LN13@M_DrawStat

; 3723 : 			{
; 3724 : 				if (emblem->collected)

  0013a	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  0013d	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  00141	85 c9		 test	 ecx, ecx
  00143	74 22		 je	 SHORT $LN12@M_DrawStat

; 3725 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  00145	6a 65		 push	 101			; 00000065H
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  0014c	e8 00 00 00 00	 call	 _W_CachePatchName
  00151	83 c4 08	 add	 esp, 8
  00154	50		 push	 eax
  00155	6a 00		 push	 0
  00157	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0015a	50		 push	 eax
  0015b	6a 2a		 push	 42			; 0000002aH
  0015d	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00162	83 c4 10	 add	 esp, 16			; 00000010H
  00165	eb 20		 jmp	 SHORT $LN13@M_DrawStat
$LN12@M_DrawStat:

; 3726 : 				else
; 3727 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00167	6a 65		 push	 101			; 00000065H
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  0016e	e8 00 00 00 00	 call	 _W_CachePatchName
  00173	83 c4 08	 add	 esp, 8
  00176	50		 push	 eax
  00177	6a 00		 push	 0
  00179	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  0017c	50		 push	 eax
  0017d	6a 2a		 push	 42			; 0000002aH
  0017f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00184	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@M_DrawStat:

; 3728 : 			}
; 3729 : 
; 3730 : 			emblem = M_GetLevelEmblem(i+1, 2);

  00187	6a 02		 push	 2
  00189	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0018c	83 c0 01	 add	 eax, 1
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  00195	83 c4 08	 add	 esp, 8
  00198	89 45 e8	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3731 : 
; 3732 : 			if (emblem)

  0019b	83 7d e8 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  0019f	74 4d		 je	 SHORT $LN16@M_DrawStat

; 3733 : 			{
; 3734 : 				if (emblem->collected)

  001a1	8b 45 e8	 mov	 eax, DWORD PTR _emblem$1[ebp]
  001a4	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  001a8	85 c9		 test	 ecx, ecx
  001aa	74 22		 je	 SHORT $LN15@M_DrawStat

; 3735 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  001ac	6a 65		 push	 101			; 00000065H
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  001b3	e8 00 00 00 00	 call	 _W_CachePatchName
  001b8	83 c4 08	 add	 esp, 8
  001bb	50		 push	 eax
  001bc	6a 00		 push	 0
  001be	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  001c1	50		 push	 eax
  001c2	6a 36		 push	 54			; 00000036H
  001c4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001c9	83 c4 10	 add	 esp, 16			; 00000010H
  001cc	eb 20		 jmp	 SHORT $LN16@M_DrawStat
$LN15@M_DrawStat:

; 3736 : 				else
; 3737 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  001ce	6a 65		 push	 101			; 00000065H
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  001d5	e8 00 00 00 00	 call	 _W_CachePatchName
  001da	83 c4 08	 add	 esp, 8
  001dd	50		 push	 eax
  001de	6a 00		 push	 0
  001e0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  001e3	50		 push	 eax
  001e4	6a 36		 push	 54			; 00000036H
  001e6	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001eb	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@M_DrawStat:

; 3738 : 			}
; 3739 : 
; 3740 : 			if (mapheaderinfo[i].actnum != 0)

  001ee	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  001f5	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  001fc	85 c9		 test	 ecx, ecx
  001fe	74 40		 je	 SHORT $LN17@M_DrawStat

; 3741 : 				V_DrawString(32+36, y, V_YELLOWMAP, va("%s %d", mapheaderinfo[i].lvlttl, mapheaderinfo[i].actnum));

  00200	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00207	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  0020e	51		 push	 ecx
  0020f	69 55 f0 84 01
	00 00		 imul	 edx, DWORD PTR _i$3[ebp], 388
  00216	81 c2 00 00 00
	00		 add	 edx, OFFSET _mapheaderinfo
  0021c	52		 push	 edx
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_05DIALNFFA@?$CFs?5?$CFd@
  00222	e8 00 00 00 00	 call	 _va
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022a	50		 push	 eax
  0022b	68 00 00 10 00	 push	 1048576			; 00100000H
  00230	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  00233	50		 push	 eax
  00234	6a 44		 push	 68			; 00000044H
  00236	e8 00 00 00 00	 call	 _V_DrawString
  0023b	83 c4 10	 add	 esp, 16			; 00000010H
  0023e	eb 20		 jmp	 SHORT $LN18@M_DrawStat
$LN17@M_DrawStat:

; 3742 : 			else
; 3743 : 				V_DrawString(32+36, y, V_YELLOWMAP, mapheaderinfo[i].lvlttl);

  00240	69 45 f0 84 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 388
  00247	05 00 00 00 00	 add	 eax, OFFSET _mapheaderinfo
  0024c	50		 push	 eax
  0024d	68 00 00 10 00	 push	 1048576			; 00100000H
  00252	8b 4d ec	 mov	 ecx, DWORD PTR _y$2[ebp]
  00255	51		 push	 ecx
  00256	6a 44		 push	 68			; 00000044H
  00258	e8 00 00 00 00	 call	 _V_DrawString
  0025d	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@M_DrawStat:

; 3744 : 
; 3745 : 			if (timedata[i].time)

  00260	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00263	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _timedata[eax*4], 0
  0026b	0f 84 5f 01 00
	00		 je	 $LN19@M_DrawStat

; 3746 : 			{
; 3747 : 				if (G_TicsToMinutes(timedata[i].time, true) < 10)

  00271	6a 01		 push	 1
  00273	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00276	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00283	83 c4 08	 add	 esp, 8
  00286	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00289	7d 29		 jge	 SHORT $LN20@M_DrawStat

; 3748 : 					sprintf(minutes, "0%i", G_TicsToMinutes(timedata[i].time, true));

  0028b	6a 01		 push	 1
  0028d	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00290	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00297	51		 push	 ecx
  00298	e8 00 00 00 00	 call	 _G_TicsToMinutes
  0029d	83 c4 08	 add	 esp, 8
  002a0	50		 push	 eax
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  002a6	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  002a9	52		 push	 edx
  002aa	e8 00 00 00 00	 call	 _sprintf
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b2	eb 27		 jmp	 SHORT $LN21@M_DrawStat
$LN20@M_DrawStat:

; 3749 : 				else
; 3750 : 					sprintf(minutes, "%i", G_TicsToMinutes(timedata[i].time, true));

  002b4	6a 01		 push	 1
  002b6	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002b9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002c0	51		 push	 ecx
  002c1	e8 00 00 00 00	 call	 _G_TicsToMinutes
  002c6	83 c4 08	 add	 esp, 8
  002c9	50		 push	 eax
  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  002cf	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  002d2	52		 push	 edx
  002d3	e8 00 00 00 00	 call	 _sprintf
  002d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@M_DrawStat:

; 3751 : 
; 3752 : 				if (G_TicsToSeconds(timedata[i].time) < 10)

  002db	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002de	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002e5	51		 push	 ecx
  002e6	e8 00 00 00 00	 call	 _G_TicsToSeconds
  002eb	83 c4 04	 add	 esp, 4
  002ee	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002f1	7d 27		 jge	 SHORT $LN22@M_DrawStat

; 3753 : 					sprintf(seconds, "0%i", G_TicsToSeconds(timedata[i].time));

  002f3	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002f6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  002fd	51		 push	 ecx
  002fe	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00303	83 c4 04	 add	 esp, 4
  00306	50		 push	 eax
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  0030c	8d 55 f4	 lea	 edx, DWORD PTR _seconds$[ebp]
  0030f	52		 push	 edx
  00310	e8 00 00 00 00	 call	 _sprintf
  00315	83 c4 0c	 add	 esp, 12			; 0000000cH
  00318	eb 25		 jmp	 SHORT $LN23@M_DrawStat
$LN22@M_DrawStat:

; 3754 : 				else
; 3755 : 					sprintf(seconds, "%i", G_TicsToSeconds(timedata[i].time));

  0031a	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0031d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0032a	83 c4 04	 add	 esp, 4
  0032d	50		 push	 eax
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00333	8d 55 f4	 lea	 edx, DWORD PTR _seconds$[ebp]
  00336	52		 push	 edx
  00337	e8 00 00 00 00	 call	 _sprintf
  0033c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@M_DrawStat:

; 3756 : 
; 3757 : 				if (G_TicsToCentiseconds(timedata[i].time) < 10)

  0033f	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00342	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00349	51		 push	 ecx
  0034a	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0034f	83 c4 04	 add	 esp, 4
  00352	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00355	7d 27		 jge	 SHORT $LN24@M_DrawStat

; 3758 : 					sprintf(hours, "0%i", G_TicsToCentiseconds(timedata[i].time));

  00357	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0035a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00361	51		 push	 ecx
  00362	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00367	83 c4 04	 add	 esp, 4
  0036a	50		 push	 eax
  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  00370	8d 55 fc	 lea	 edx, DWORD PTR _hours$[ebp]
  00373	52		 push	 edx
  00374	e8 00 00 00 00	 call	 _sprintf
  00379	83 c4 0c	 add	 esp, 12			; 0000000cH
  0037c	eb 25		 jmp	 SHORT $LN25@M_DrawStat
$LN24@M_DrawStat:

; 3759 : 				else
; 3760 : 					sprintf(hours, "%i", G_TicsToCentiseconds(timedata[i].time));

  0037e	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00381	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00388	51		 push	 ecx
  00389	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0038e	83 c4 04	 add	 esp, 4
  00391	50		 push	 eax
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00397	8d 55 fc	 lea	 edx, DWORD PTR _hours$[ebp]
  0039a	52		 push	 edx
  0039b	e8 00 00 00 00	 call	 _sprintf
  003a0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@M_DrawStat:

; 3761 : 
; 3762 : 				V_DrawString(224+28, y, 0, va("%s:%s:%s", minutes,seconds,hours));

  003a3	8d 45 fc	 lea	 eax, DWORD PTR _hours$[ebp]
  003a6	50		 push	 eax
  003a7	8d 4d f4	 lea	 ecx, DWORD PTR _seconds$[ebp]
  003aa	51		 push	 ecx
  003ab	8d 55 f8	 lea	 edx, DWORD PTR _minutes$[ebp]
  003ae	52		 push	 edx
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@
  003b4	e8 00 00 00 00	 call	 _va
  003b9	83 c4 10	 add	 esp, 16			; 00000010H
  003bc	50		 push	 eax
  003bd	6a 00		 push	 0
  003bf	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  003c2	50		 push	 eax
  003c3	68 fc 00 00 00	 push	 252			; 000000fcH
  003c8	e8 00 00 00 00	 call	 _V_DrawString
  003cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@M_DrawStat:

; 3763 : 			}
; 3764 : 
; 3765 : 			y += 8;

  003d0	8b 45 ec	 mov	 eax, DWORD PTR _y$2[ebp]
  003d3	83 c0 08	 add	 eax, 8
  003d6	89 45 ec	 mov	 DWORD PTR _y$2[ebp], eax

; 3766 : 
; 3767 : 			if (y >= BASEVIDHEIGHT-8)

  003d9	81 7d ec c0 00
	00 00		 cmp	 DWORD PTR _y$2[ebp], 192 ; 000000c0H
  003e0	7c 02		 jl	 SHORT $LN26@M_DrawStat

; 3768 : 				return;

  003e2	eb 05		 jmp	 SHORT $LN3@M_DrawStat
$LN26@M_DrawStat:

; 3769 : 		}

  003e4	e9 6d fc ff ff	 jmp	 $LN2@M_DrawStat
$LN3@M_DrawStat:

; 3770 : 	}
; 3771 : }

  003e9	5f		 pop	 edi
  003ea	5e		 pop	 esi
  003eb	5b		 pop	 ebx
  003ec	8b e5		 mov	 esp, ebp
  003ee	5d		 pop	 ebp
  003ef	c3		 ret	 0
_M_DrawStats2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawStats
_TEXT	SEGMENT
_emblem$1 = -48						; size = 4
_names$2 = -44						; size = 8
_y$3 = -36						; size = 4
_displaytimeattack$ = -32				; size = 4
_besttime$ = -28					; size = 4
_seconds$ = -24						; size = 4
_minutes$ = -20						; size = 4
_hours$ = -16						; size = 4
_i$ = -12						; size = 4
_found$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_M_DrawStats PROC					; COMDAT

; 3524 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 3525 : 	INT32 found = 0;

  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _found$[ebp], 0

; 3526 : 	INT32 i;
; 3527 : 	char hours[4];
; 3528 : 	char minutes[4];
; 3529 : 	char seconds[4];
; 3530 : 	tic_t besttime = 0;

  0001a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _besttime$[ebp], 0

; 3531 : 	boolean displaytimeattack = true;

  00021	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _displaytimeattack$[ebp], 1

; 3532 : 
; 3533 : 	for (i = 0; i < MAXEMBLEMS; i++)

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@M_DrawStat
$LN2@M_DrawStat:
  00031	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawStat:
  0003a	81 7d f4 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  00041	7d 1a		 jge	 SHORT $LN3@M_DrawStat

; 3534 : 	{
; 3535 : 		if (emblemlocations[i].collected)

  00043	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00047	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+10]
  0004e	85 c9		 test	 ecx, ecx
  00050	74 09		 je	 SHORT $LN11@M_DrawStat

; 3536 : 			found++;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _found$[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 f8	 mov	 DWORD PTR _found$[ebp], eax
$LN11@M_DrawStat:

; 3537 : 	}

  0005b	eb d4		 jmp	 SHORT $LN2@M_DrawStat
$LN3@M_DrawStat:

; 3538 : 
; 3539 : 	V_DrawString(64, 32, 0, va("x %d/%d", found, numemblems));

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR _numemblems
  00062	50		 push	 eax
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _found$[ebp]
  00066	51		 push	 ecx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_07NGEAEDOH@x?5?$CFd?1?$CFd@
  0006c	e8 00 00 00 00	 call	 _va
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	50		 push	 eax
  00075	6a 00		 push	 0
  00077	6a 20		 push	 32			; 00000020H
  00079	6a 40		 push	 64			; 00000040H
  0007b	e8 00 00 00 00	 call	 _V_DrawString
  00080	83 c4 10	 add	 esp, 16			; 00000010H

; 3540 : 	V_DrawScaledPatch(32, 32-4, 0, W_CachePatchName("EMBLICON", PU_STATIC));

  00083	6a 01		 push	 1
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_08FNBLLBPP@EMBLICON@
  0008a	e8 00 00 00 00	 call	 _W_CachePatchName
  0008f	83 c4 08	 add	 esp, 8
  00092	50		 push	 eax
  00093	6a 00		 push	 0
  00095	6a 1c		 push	 28			; 0000001cH
  00097	6a 20		 push	 32			; 00000020H
  00099	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 3541 : 
; 3542 : 	if (G_TicsToHours(totalplaytime) < 10)

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _G_TicsToHours
  000ac	83 c4 04	 add	 esp, 4
  000af	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b2	7d 22		 jge	 SHORT $LN12@M_DrawStat

; 3543 : 		sprintf(hours, "0%i", G_TicsToHours(totalplaytime));

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _G_TicsToHours
  000bf	83 c4 04	 add	 esp, 4
  000c2	50		 push	 eax
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  000c8	8d 4d f0	 lea	 ecx, DWORD PTR _hours$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _sprintf
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d4	eb 20		 jmp	 SHORT $LN13@M_DrawStat
$LN12@M_DrawStat:

; 3544 : 	else
; 3545 : 		sprintf(hours, "%i:", G_TicsToHours(totalplaytime));

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _G_TicsToHours
  000e1	83 c4 04	 add	 esp, 4
  000e4	50		 push	 eax
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_03CLPIFBDJ@?$CFi?3@
  000ea	8d 4d f0	 lea	 ecx, DWORD PTR _hours$[ebp]
  000ed	51		 push	 ecx
  000ee	e8 00 00 00 00	 call	 _sprintf
  000f3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@M_DrawStat:

; 3546 : 
; 3547 : 	if (G_TicsToMinutes(totalplaytime, false) < 10)

  000f6	6a 00		 push	 0
  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00103	83 c4 08	 add	 esp, 8
  00106	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00109	7d 24		 jge	 SHORT $LN14@M_DrawStat

; 3548 : 		sprintf(minutes, "0%i", G_TicsToMinutes(totalplaytime, false));

  0010b	6a 00		 push	 0
  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00118	83 c4 08	 add	 esp, 8
  0011b	50		 push	 eax
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  00121	8d 4d ec	 lea	 ecx, DWORD PTR _minutes$[ebp]
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 _sprintf
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	eb 22		 jmp	 SHORT $LN15@M_DrawStat
$LN14@M_DrawStat:

; 3549 : 	else
; 3550 : 		sprintf(minutes, "%i", G_TicsToMinutes(totalplaytime, false));

  0012f	6a 00		 push	 0
  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _G_TicsToMinutes
  0013c	83 c4 08	 add	 esp, 8
  0013f	50		 push	 eax
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00145	8d 4d ec	 lea	 ecx, DWORD PTR _minutes$[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 _sprintf
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@M_DrawStat:

; 3551 : 
; 3552 : 	if (G_TicsToSeconds(totalplaytime) < 10)

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0015c	83 c4 04	 add	 esp, 4
  0015f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00162	7d 22		 jge	 SHORT $LN16@M_DrawStat

; 3553 : 		sprintf(seconds, "0%i", G_TicsToSeconds(totalplaytime));

  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 _G_TicsToSeconds
  0016f	83 c4 04	 add	 esp, 4
  00172	50		 push	 eax
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  00178	8d 4d e8	 lea	 ecx, DWORD PTR _seconds$[ebp]
  0017b	51		 push	 ecx
  0017c	e8 00 00 00 00	 call	 _sprintf
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH
  00184	eb 20		 jmp	 SHORT $LN17@M_DrawStat
$LN16@M_DrawStat:

; 3554 : 	else
; 3555 : 		sprintf(seconds, "%i", G_TicsToSeconds(totalplaytime));

  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00191	83 c4 04	 add	 esp, 4
  00194	50		 push	 eax
  00195	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  0019a	8d 4d e8	 lea	 ecx, DWORD PTR _seconds$[ebp]
  0019d	51		 push	 ecx
  0019e	e8 00 00 00 00	 call	 _sprintf
  001a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@M_DrawStat:

; 3556 : 
; 3557 : 	V_DrawCenteredString(224, 8, 0, "Total Play Time:");

  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IMDFOONP@Total?5Play?5Time?3@
  001ab	6a 00		 push	 0
  001ad	6a 08		 push	 8
  001af	68 e0 00 00 00	 push	 224			; 000000e0H
  001b4	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001b9	83 c4 10	 add	 esp, 16			; 00000010H

; 3558 : 	V_DrawCenteredString(224, 20, 0, va("%s:%s:%s", hours, minutes, seconds));

  001bc	8d 45 e8	 lea	 eax, DWORD PTR _seconds$[ebp]
  001bf	50		 push	 eax
  001c0	8d 4d ec	 lea	 ecx, DWORD PTR _minutes$[ebp]
  001c3	51		 push	 ecx
  001c4	8d 55 f0	 lea	 edx, DWORD PTR _hours$[ebp]
  001c7	52		 push	 edx
  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@
  001cd	e8 00 00 00 00	 call	 _va
  001d2	83 c4 10	 add	 esp, 16			; 00000010H
  001d5	50		 push	 eax
  001d6	6a 00		 push	 0
  001d8	6a 14		 push	 20			; 00000014H
  001da	68 e0 00 00 00	 push	 224			; 000000e0H
  001df	e8 00 00 00 00	 call	 _V_DrawCenteredString
  001e4	83 c4 10	 add	 esp, 16			; 00000010H

; 3559 : 
; 3560 : 	for (i = 0; i < NUMMAPS; i++)

  001e7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001ee	eb 09		 jmp	 SHORT $LN7@M_DrawStat
$LN5@M_DrawStat:
  001f0	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001f3	83 c0 01	 add	 eax, 1
  001f6	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN7@M_DrawStat:
  001f9	81 7d f4 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  00200	7d 3a		 jge	 SHORT $LN6@M_DrawStat

; 3561 : 	{
; 3562 : 		if (!(mapheaderinfo[i].timeattack))

  00202	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  00209	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[eax+308], 0
  00210	75 02		 jne	 SHORT $LN18@M_DrawStat

; 3563 : 			continue;

  00212	eb dc		 jmp	 SHORT $LN5@M_DrawStat
$LN18@M_DrawStat:

; 3564 : 
; 3565 : 		if (timedata[i].time > 0)

  00214	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00217	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _timedata[eax*4], 0
  0021f	76 12		 jbe	 SHORT $LN19@M_DrawStat

; 3566 : 			besttime += timedata[i].time;

  00221	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00224	8b 4d e4	 mov	 ecx, DWORD PTR _besttime$[ebp]
  00227	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _timedata[eax*4]
  0022e	89 4d e4	 mov	 DWORD PTR _besttime$[ebp], ecx
  00231	eb 07		 jmp	 SHORT $LN20@M_DrawStat
$LN19@M_DrawStat:

; 3567 : 		else
; 3568 : 			displaytimeattack = false;

  00233	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _displaytimeattack$[ebp], 0
$LN20@M_DrawStat:

; 3569 : 	}

  0023a	eb b4		 jmp	 SHORT $LN5@M_DrawStat
$LN6@M_DrawStat:

; 3570 : 
; 3571 : 	if (displaytimeattack)

  0023c	83 7d e0 00	 cmp	 DWORD PTR _displaytimeattack$[ebp], 0
  00240	0f 84 34 01 00
	00		 je	 $LN21@M_DrawStat

; 3572 : 	{
; 3573 : 		if (G_TicsToHours(besttime) < 10)

  00246	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 _G_TicsToHours
  0024f	83 c4 04	 add	 esp, 4
  00252	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00255	7d 20		 jge	 SHORT $LN22@M_DrawStat

; 3574 : 			sprintf(hours, "0%i", G_TicsToHours(besttime));

  00257	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 _G_TicsToHours
  00260	83 c4 04	 add	 esp, 4
  00263	50		 push	 eax
  00264	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  00269	8d 4d f0	 lea	 ecx, DWORD PTR _hours$[ebp]
  0026c	51		 push	 ecx
  0026d	e8 00 00 00 00	 call	 _sprintf
  00272	83 c4 0c	 add	 esp, 12			; 0000000cH
  00275	eb 1e		 jmp	 SHORT $LN23@M_DrawStat
$LN22@M_DrawStat:

; 3575 : 		else
; 3576 : 			sprintf(hours, "%i", G_TicsToHours(besttime));

  00277	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  0027a	50		 push	 eax
  0027b	e8 00 00 00 00	 call	 _G_TicsToHours
  00280	83 c4 04	 add	 esp, 4
  00283	50		 push	 eax
  00284	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00289	8d 4d f0	 lea	 ecx, DWORD PTR _hours$[ebp]
  0028c	51		 push	 ecx
  0028d	e8 00 00 00 00	 call	 _sprintf
  00292	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@M_DrawStat:

; 3577 : 
; 3578 : 		if (G_TicsToMinutes(besttime, false) < 10)

  00295	6a 00		 push	 0
  00297	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  0029a	50		 push	 eax
  0029b	e8 00 00 00 00	 call	 _G_TicsToMinutes
  002a0	83 c4 08	 add	 esp, 8
  002a3	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002a6	7d 22		 jge	 SHORT $LN24@M_DrawStat

; 3579 : 			sprintf(minutes, "0%i", G_TicsToMinutes(besttime, false));

  002a8	6a 00		 push	 0
  002aa	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  002ad	50		 push	 eax
  002ae	e8 00 00 00 00	 call	 _G_TicsToMinutes
  002b3	83 c4 08	 add	 esp, 8
  002b6	50		 push	 eax
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _minutes$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 _sprintf
  002c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c8	eb 20		 jmp	 SHORT $LN25@M_DrawStat
$LN24@M_DrawStat:

; 3580 : 		else
; 3581 : 			sprintf(minutes, "%i", G_TicsToMinutes(besttime, false));

  002ca	6a 00		 push	 0
  002cc	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 _G_TicsToMinutes
  002d5	83 c4 08	 add	 esp, 8
  002d8	50		 push	 eax
  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  002de	8d 4d ec	 lea	 ecx, DWORD PTR _minutes$[ebp]
  002e1	51		 push	 ecx
  002e2	e8 00 00 00 00	 call	 _sprintf
  002e7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@M_DrawStat:

; 3582 : 
; 3583 : 		if (G_TicsToSeconds(besttime) < 10)

  002ea	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  002ed	50		 push	 eax
  002ee	e8 00 00 00 00	 call	 _G_TicsToSeconds
  002f3	83 c4 04	 add	 esp, 4
  002f6	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002f9	7d 20		 jge	 SHORT $LN26@M_DrawStat

; 3584 : 			sprintf(seconds, "0%i", G_TicsToSeconds(besttime));

  002fb	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  002fe	50		 push	 eax
  002ff	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00304	83 c4 04	 add	 esp, 4
  00307	50		 push	 eax
  00308	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  0030d	8d 4d e8	 lea	 ecx, DWORD PTR _seconds$[ebp]
  00310	51		 push	 ecx
  00311	e8 00 00 00 00	 call	 _sprintf
  00316	83 c4 0c	 add	 esp, 12			; 0000000cH
  00319	eb 1e		 jmp	 SHORT $LN27@M_DrawStat
$LN26@M_DrawStat:

; 3585 : 		else
; 3586 : 			sprintf(seconds, "%i", G_TicsToSeconds(besttime));

  0031b	8b 45 e4	 mov	 eax, DWORD PTR _besttime$[ebp]
  0031e	50		 push	 eax
  0031f	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00324	83 c4 04	 add	 esp, 4
  00327	50		 push	 eax
  00328	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  0032d	8d 4d e8	 lea	 ecx, DWORD PTR _seconds$[ebp]
  00330	51		 push	 ecx
  00331	e8 00 00 00 00	 call	 _sprintf
  00336	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@M_DrawStat:

; 3587 : 
; 3588 : 		V_DrawCenteredString(224, 36, 0, "Best Time Attack:");

  00339	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MEOCEIMN@Best?5Time?5Attack?3@
  0033e	6a 00		 push	 0
  00340	6a 24		 push	 36			; 00000024H
  00342	68 e0 00 00 00	 push	 224			; 000000e0H
  00347	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0034c	83 c4 10	 add	 esp, 16			; 00000010H

; 3589 : 		V_DrawCenteredString(224, 48, 0, va("%s:%s:%s", hours, minutes, seconds));

  0034f	8d 45 e8	 lea	 eax, DWORD PTR _seconds$[ebp]
  00352	50		 push	 eax
  00353	8d 4d ec	 lea	 ecx, DWORD PTR _minutes$[ebp]
  00356	51		 push	 ecx
  00357	8d 55 f0	 lea	 edx, DWORD PTR _hours$[ebp]
  0035a	52		 push	 edx
  0035b	68 00 00 00 00	 push	 OFFSET ??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@
  00360	e8 00 00 00 00	 call	 _va
  00365	83 c4 10	 add	 esp, 16			; 00000010H
  00368	50		 push	 eax
  00369	6a 00		 push	 0
  0036b	6a 30		 push	 48			; 00000030H
  0036d	68 e0 00 00 00	 push	 224			; 000000e0H
  00372	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00377	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@M_DrawStat:

; 3590 : 	}
; 3591 : 
; 3592 : 	{
; 3593 : 		INT32 y = 80;

  0037a	c7 45 dc 50 00
	00 00		 mov	 DWORD PTR _y$3[ebp], 80	; 00000050H

; 3594 : 		char names[8];
; 3595 : 		emblem_t *emblem;
; 3596 : 
; 3597 : 		V_DrawString(32+36, y-16, 0, "LEVEL NAME");

  00381	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OFKMJLDC@LEVEL?5NAME@
  00386	6a 00		 push	 0
  00388	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  0038b	83 e8 10	 sub	 eax, 16			; 00000010H
  0038e	50		 push	 eax
  0038f	6a 44		 push	 68			; 00000044H
  00391	e8 00 00 00 00	 call	 _V_DrawString
  00396	83 c4 10	 add	 esp, 16			; 00000010H

; 3598 : 		V_DrawString(224+28, y-16, 0, "BEST TIME");

  00399	68 00 00 00 00	 push	 OFFSET ??_C@_09MHGDOBIE@BEST?5TIME@
  0039e	6a 00		 push	 0
  003a0	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  003a3	83 e8 10	 sub	 eax, 16			; 00000010H
  003a6	50		 push	 eax
  003a7	68 fc 00 00 00	 push	 252			; 000000fcH
  003ac	e8 00 00 00 00	 call	 _V_DrawString
  003b1	83 c4 10	 add	 esp, 16			; 00000010H

; 3599 : 
; 3600 : 		lastmapnum = 0;

  003b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _lastmapnum, 0

; 3601 : 		oldlastmapnum = 0;

  003be	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _oldlastmapnum, 0

; 3602 : 
; 3603 : 		sprintf(names, "%c %c %c", skins[0].name[0], skins[1].name[0], skins[2].name[0]);

  003c8	b8 ec 00 00 00	 mov	 eax, 236		; 000000ecH
  003cd	d1 e0		 shl	 eax, 1
  003cf	b9 01 00 00 00	 mov	 ecx, 1
  003d4	6b d1 00	 imul	 edx, ecx, 0
  003d7	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _skins[eax+edx]
  003df	50		 push	 eax
  003e0	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH
  003e5	c1 e1 00	 shl	 ecx, 0
  003e8	ba 01 00 00 00	 mov	 edx, 1
  003ed	6b c2 00	 imul	 eax, edx, 0
  003f0	0f be 8c 01 00
	00 00 00	 movsx	 ecx, BYTE PTR _skins[ecx+eax]
  003f8	51		 push	 ecx
  003f9	ba ec 00 00 00	 mov	 edx, 236		; 000000ecH
  003fe	6b c2 00	 imul	 eax, edx, 0
  00401	b9 01 00 00 00	 mov	 ecx, 1
  00406	6b d1 00	 imul	 edx, ecx, 0
  00409	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _skins[eax+edx]
  00411	50		 push	 eax
  00412	68 00 00 00 00	 push	 OFFSET ??_C@_08BJNODIDA@?$CFc?5?$CFc?5?$CFc@
  00417	8d 4d d4	 lea	 ecx, DWORD PTR _names$2[ebp]
  0041a	51		 push	 ecx
  0041b	e8 00 00 00 00	 call	 _sprintf
  00420	83 c4 14	 add	 esp, 20			; 00000014H

; 3604 : 		V_DrawString(32, y-16, 0, names);

  00423	8d 45 d4	 lea	 eax, DWORD PTR _names$2[ebp]
  00426	50		 push	 eax
  00427	6a 00		 push	 0
  00429	8b 4d dc	 mov	 ecx, DWORD PTR _y$3[ebp]
  0042c	83 e9 10	 sub	 ecx, 16			; 00000010H
  0042f	51		 push	 ecx
  00430	6a 20		 push	 32			; 00000020H
  00432	e8 00 00 00 00	 call	 _V_DrawString
  00437	83 c4 10	 add	 esp, 16			; 00000010H

; 3605 : 
; 3606 : 		for (i = oldlastmapnum; i < NUMMAPS; i++)

  0043a	a1 00 00 00 00	 mov	 eax, DWORD PTR _oldlastmapnum
  0043f	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  00442	eb 09		 jmp	 SHORT $LN10@M_DrawStat
$LN8@M_DrawStat:
  00444	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00447	83 c0 01	 add	 eax, 1
  0044a	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN10@M_DrawStat:
  0044d	81 7d f4 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  00454	0f 8d 7d 03 00
	00		 jge	 $LN9@M_DrawStat

; 3607 : 		{
; 3608 : 
; 3609 : 			if (mapheaderinfo[i].lvlttl[0] == '\0')

  0045a	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  00461	b9 01 00 00 00	 mov	 ecx, 1
  00466	6b d1 00	 imul	 edx, ecx, 0
  00469	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _mapheaderinfo[eax+edx]
  00471	85 c0		 test	 eax, eax
  00473	75 02		 jne	 SHORT $LN28@M_DrawStat

; 3610 : 				continue;

  00475	eb cd		 jmp	 SHORT $LN8@M_DrawStat
$LN28@M_DrawStat:

; 3611 : 
; 3612 : 			if (!(mapheaderinfo[i].typeoflevel & TOL_SP))

  00477	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  0047e	0f bf 88 44 00
	00 00		 movsx	 ecx, WORD PTR _mapheaderinfo[eax+68]
  00485	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0048b	75 02		 jne	 SHORT $LN29@M_DrawStat

; 3613 : 				continue;

  0048d	eb b5		 jmp	 SHORT $LN8@M_DrawStat
$LN29@M_DrawStat:

; 3614 : 
; 3615 : 			if (!mapvisited[i])

  0048f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00492	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mapvisited[eax]
  00499	85 c9		 test	 ecx, ecx
  0049b	75 02		 jne	 SHORT $LN30@M_DrawStat

; 3616 : 				continue;

  0049d	eb a5		 jmp	 SHORT $LN8@M_DrawStat
$LN30@M_DrawStat:

; 3617 : 
; 3618 : 			lastmapnum = i;

  0049f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004a2	a3 00 00 00 00	 mov	 DWORD PTR _lastmapnum, eax

; 3619 : 
; 3620 : 			emblem = M_GetLevelEmblem(i+1, 0);

  004a7	6a 00		 push	 0
  004a9	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004ac	83 c0 01	 add	 eax, 1
  004af	50		 push	 eax
  004b0	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  004b5	83 c4 08	 add	 esp, 8
  004b8	89 45 d0	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3621 : 
; 3622 : 			if (emblem)

  004bb	83 7d d0 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  004bf	74 4d		 je	 SHORT $LN33@M_DrawStat

; 3623 : 			{
; 3624 : 				if (emblem->collected)

  004c1	8b 45 d0	 mov	 eax, DWORD PTR _emblem$1[ebp]
  004c4	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  004c8	85 c9		 test	 ecx, ecx
  004ca	74 22		 je	 SHORT $LN32@M_DrawStat

; 3625 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  004cc	6a 65		 push	 101			; 00000065H
  004ce	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  004d3	e8 00 00 00 00	 call	 _W_CachePatchName
  004d8	83 c4 08	 add	 esp, 8
  004db	50		 push	 eax
  004dc	6a 00		 push	 0
  004de	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  004e1	50		 push	 eax
  004e2	6a 1e		 push	 30			; 0000001eH
  004e4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004e9	83 c4 10	 add	 esp, 16			; 00000010H
  004ec	eb 20		 jmp	 SHORT $LN33@M_DrawStat
$LN32@M_DrawStat:

; 3626 : 				else
; 3627 : 					V_DrawScaledPatch(30, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  004ee	6a 65		 push	 101			; 00000065H
  004f0	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  004f5	e8 00 00 00 00	 call	 _W_CachePatchName
  004fa	83 c4 08	 add	 esp, 8
  004fd	50		 push	 eax
  004fe	6a 00		 push	 0
  00500	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  00503	50		 push	 eax
  00504	6a 1e		 push	 30			; 0000001eH
  00506	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0050b	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@M_DrawStat:

; 3628 : 			}
; 3629 : 
; 3630 : 			emblem = M_GetLevelEmblem(i+1, 1);

  0050e	6a 01		 push	 1
  00510	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00513	83 c0 01	 add	 eax, 1
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  0051c	83 c4 08	 add	 esp, 8
  0051f	89 45 d0	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3631 : 
; 3632 : 			if (emblem)

  00522	83 7d d0 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  00526	74 4d		 je	 SHORT $LN36@M_DrawStat

; 3633 : 			{
; 3634 : 				if (emblem->collected)

  00528	8b 45 d0	 mov	 eax, DWORD PTR _emblem$1[ebp]
  0052b	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  0052f	85 c9		 test	 ecx, ecx
  00531	74 22		 je	 SHORT $LN35@M_DrawStat

; 3635 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  00533	6a 65		 push	 101			; 00000065H
  00535	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  0053a	e8 00 00 00 00	 call	 _W_CachePatchName
  0053f	83 c4 08	 add	 esp, 8
  00542	50		 push	 eax
  00543	6a 00		 push	 0
  00545	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  00548	50		 push	 eax
  00549	6a 2a		 push	 42			; 0000002aH
  0054b	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00550	83 c4 10	 add	 esp, 16			; 00000010H
  00553	eb 20		 jmp	 SHORT $LN36@M_DrawStat
$LN35@M_DrawStat:

; 3636 : 				else
; 3637 : 					V_DrawScaledPatch(42, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  00555	6a 65		 push	 101			; 00000065H
  00557	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  0055c	e8 00 00 00 00	 call	 _W_CachePatchName
  00561	83 c4 08	 add	 esp, 8
  00564	50		 push	 eax
  00565	6a 00		 push	 0
  00567	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  0056a	50		 push	 eax
  0056b	6a 2a		 push	 42			; 0000002aH
  0056d	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00572	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@M_DrawStat:

; 3638 : 			}
; 3639 : 
; 3640 : 			emblem = M_GetLevelEmblem(i+1, 2);

  00575	6a 02		 push	 2
  00577	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0057a	83 c0 01	 add	 eax, 1
  0057d	50		 push	 eax
  0057e	e8 00 00 00 00	 call	 _M_GetLevelEmblem
  00583	83 c4 08	 add	 esp, 8
  00586	89 45 d0	 mov	 DWORD PTR _emblem$1[ebp], eax

; 3641 : 
; 3642 : 			if (emblem)

  00589	83 7d d0 00	 cmp	 DWORD PTR _emblem$1[ebp], 0
  0058d	74 4d		 je	 SHORT $LN39@M_DrawStat

; 3643 : 			{
; 3644 : 				if (emblem->collected)

  0058f	8b 45 d0	 mov	 eax, DWORD PTR _emblem$1[ebp]
  00592	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  00596	85 c9		 test	 ecx, ecx
  00598	74 22		 je	 SHORT $LN38@M_DrawStat

; 3645 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("GOTIT", PU_CACHE));

  0059a	6a 65		 push	 101			; 00000065H
  0059c	68 00 00 00 00	 push	 OFFSET ??_C@_05GDDABNPK@GOTIT@
  005a1	e8 00 00 00 00	 call	 _W_CachePatchName
  005a6	83 c4 08	 add	 esp, 8
  005a9	50		 push	 eax
  005aa	6a 00		 push	 0
  005ac	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  005af	50		 push	 eax
  005b0	6a 36		 push	 54			; 00000036H
  005b2	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  005b7	83 c4 10	 add	 esp, 16			; 00000010H
  005ba	eb 20		 jmp	 SHORT $LN39@M_DrawStat
$LN38@M_DrawStat:

; 3646 : 				else
; 3647 : 					V_DrawScaledPatch(54, y, 0, W_CachePatchName("NEEDIT", PU_CACHE));

  005bc	6a 65		 push	 101			; 00000065H
  005be	68 00 00 00 00	 push	 OFFSET ??_C@_06MMLIDDG@NEEDIT@
  005c3	e8 00 00 00 00	 call	 _W_CachePatchName
  005c8	83 c4 08	 add	 esp, 8
  005cb	50		 push	 eax
  005cc	6a 00		 push	 0
  005ce	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  005d1	50		 push	 eax
  005d2	6a 36		 push	 54			; 00000036H
  005d4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  005d9	83 c4 10	 add	 esp, 16			; 00000010H
$LN39@M_DrawStat:

; 3648 : 			}
; 3649 : 
; 3650 : 			if (mapheaderinfo[i].actnum != 0)

  005dc	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  005e3	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  005ea	85 c9		 test	 ecx, ecx
  005ec	74 40		 je	 SHORT $LN40@M_DrawStat

; 3651 : 				V_DrawString(32+36, y, V_YELLOWMAP, va("%s %d", mapheaderinfo[i].lvlttl, mapheaderinfo[i].actnum));

  005ee	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  005f5	0f b6 88 42 00
	00 00		 movzx	 ecx, BYTE PTR _mapheaderinfo[eax+66]
  005fc	51		 push	 ecx
  005fd	69 55 f4 84 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 388
  00604	81 c2 00 00 00
	00		 add	 edx, OFFSET _mapheaderinfo
  0060a	52		 push	 edx
  0060b	68 00 00 00 00	 push	 OFFSET ??_C@_05DIALNFFA@?$CFs?5?$CFd@
  00610	e8 00 00 00 00	 call	 _va
  00615	83 c4 0c	 add	 esp, 12			; 0000000cH
  00618	50		 push	 eax
  00619	68 00 00 10 00	 push	 1048576			; 00100000H
  0061e	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  00621	50		 push	 eax
  00622	6a 44		 push	 68			; 00000044H
  00624	e8 00 00 00 00	 call	 _V_DrawString
  00629	83 c4 10	 add	 esp, 16			; 00000010H
  0062c	eb 20		 jmp	 SHORT $LN41@M_DrawStat
$LN40@M_DrawStat:

; 3652 : 			else
; 3653 : 				V_DrawString(32+36, y, V_YELLOWMAP, mapheaderinfo[i].lvlttl);

  0062e	69 45 f4 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  00635	05 00 00 00 00	 add	 eax, OFFSET _mapheaderinfo
  0063a	50		 push	 eax
  0063b	68 00 00 10 00	 push	 1048576			; 00100000H
  00640	8b 4d dc	 mov	 ecx, DWORD PTR _y$3[ebp]
  00643	51		 push	 ecx
  00644	6a 44		 push	 68			; 00000044H
  00646	e8 00 00 00 00	 call	 _V_DrawString
  0064b	83 c4 10	 add	 esp, 16			; 00000010H
$LN41@M_DrawStat:

; 3654 : 
; 3655 : 			if (timedata[i].time)

  0064e	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00651	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _timedata[eax*4], 0
  00659	0f 84 5f 01 00
	00		 je	 $LN42@M_DrawStat

; 3656 : 			{
; 3657 : 				if (G_TicsToMinutes(timedata[i].time, true) < 10)

  0065f	6a 01		 push	 1
  00661	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00664	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  0066b	51		 push	 ecx
  0066c	e8 00 00 00 00	 call	 _G_TicsToMinutes
  00671	83 c4 08	 add	 esp, 8
  00674	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00677	7d 29		 jge	 SHORT $LN43@M_DrawStat

; 3658 : 					sprintf(minutes, "0%i", G_TicsToMinutes(timedata[i].time, true));

  00679	6a 01		 push	 1
  0067b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0067e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00685	51		 push	 ecx
  00686	e8 00 00 00 00	 call	 _G_TicsToMinutes
  0068b	83 c4 08	 add	 esp, 8
  0068e	50		 push	 eax
  0068f	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  00694	8d 55 ec	 lea	 edx, DWORD PTR _minutes$[ebp]
  00697	52		 push	 edx
  00698	e8 00 00 00 00	 call	 _sprintf
  0069d	83 c4 0c	 add	 esp, 12			; 0000000cH
  006a0	eb 27		 jmp	 SHORT $LN44@M_DrawStat
$LN43@M_DrawStat:

; 3659 : 				else
; 3660 : 					sprintf(minutes, "%i", G_TicsToMinutes(timedata[i].time, true));

  006a2	6a 01		 push	 1
  006a4	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  006a7	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  006ae	51		 push	 ecx
  006af	e8 00 00 00 00	 call	 _G_TicsToMinutes
  006b4	83 c4 08	 add	 esp, 8
  006b7	50		 push	 eax
  006b8	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  006bd	8d 55 ec	 lea	 edx, DWORD PTR _minutes$[ebp]
  006c0	52		 push	 edx
  006c1	e8 00 00 00 00	 call	 _sprintf
  006c6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN44@M_DrawStat:

; 3661 : 
; 3662 : 				if (G_TicsToSeconds(timedata[i].time) < 10)

  006c9	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  006cc	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  006d3	51		 push	 ecx
  006d4	e8 00 00 00 00	 call	 _G_TicsToSeconds
  006d9	83 c4 04	 add	 esp, 4
  006dc	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  006df	7d 27		 jge	 SHORT $LN45@M_DrawStat

; 3663 : 					sprintf(seconds, "0%i", G_TicsToSeconds(timedata[i].time));

  006e1	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  006e4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  006eb	51		 push	 ecx
  006ec	e8 00 00 00 00	 call	 _G_TicsToSeconds
  006f1	83 c4 04	 add	 esp, 4
  006f4	50		 push	 eax
  006f5	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  006fa	8d 55 e8	 lea	 edx, DWORD PTR _seconds$[ebp]
  006fd	52		 push	 edx
  006fe	e8 00 00 00 00	 call	 _sprintf
  00703	83 c4 0c	 add	 esp, 12			; 0000000cH
  00706	eb 25		 jmp	 SHORT $LN46@M_DrawStat
$LN45@M_DrawStat:

; 3664 : 				else
; 3665 : 					sprintf(seconds, "%i", G_TicsToSeconds(timedata[i].time));

  00708	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0070b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00712	51		 push	 ecx
  00713	e8 00 00 00 00	 call	 _G_TicsToSeconds
  00718	83 c4 04	 add	 esp, 4
  0071b	50		 push	 eax
  0071c	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00721	8d 55 e8	 lea	 edx, DWORD PTR _seconds$[ebp]
  00724	52		 push	 edx
  00725	e8 00 00 00 00	 call	 _sprintf
  0072a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN46@M_DrawStat:

; 3666 : 
; 3667 : 				if (G_TicsToCentiseconds(timedata[i].time) < 10)

  0072d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00730	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00737	51		 push	 ecx
  00738	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0073d	83 c4 04	 add	 esp, 4
  00740	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00743	7d 27		 jge	 SHORT $LN47@M_DrawStat

; 3668 : 					sprintf(hours, "0%i", G_TicsToCentiseconds(timedata[i].time));

  00745	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00748	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  0074f	51		 push	 ecx
  00750	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  00755	83 c4 04	 add	 esp, 4
  00758	50		 push	 eax
  00759	68 00 00 00 00	 push	 OFFSET ??_C@_03KECJIMKH@0?$CFi@
  0075e	8d 55 f0	 lea	 edx, DWORD PTR _hours$[ebp]
  00761	52		 push	 edx
  00762	e8 00 00 00 00	 call	 _sprintf
  00767	83 c4 0c	 add	 esp, 12			; 0000000cH
  0076a	eb 25		 jmp	 SHORT $LN48@M_DrawStat
$LN47@M_DrawStat:

; 3669 : 				else
; 3670 : 					sprintf(hours, "%i", G_TicsToCentiseconds(timedata[i].time));

  0076c	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0076f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _timedata[eax*4]
  00776	51		 push	 ecx
  00777	e8 00 00 00 00	 call	 _G_TicsToCentiseconds
  0077c	83 c4 04	 add	 esp, 4
  0077f	50		 push	 eax
  00780	68 00 00 00 00	 push	 OFFSET ??_C@_02IKAHHCAI@?$CFi@
  00785	8d 55 f0	 lea	 edx, DWORD PTR _hours$[ebp]
  00788	52		 push	 edx
  00789	e8 00 00 00 00	 call	 _sprintf
  0078e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN48@M_DrawStat:

; 3671 : 
; 3672 : 				V_DrawString(224+28, y, 0, va("%s:%s:%s", minutes,seconds,hours));

  00791	8d 45 f0	 lea	 eax, DWORD PTR _hours$[ebp]
  00794	50		 push	 eax
  00795	8d 4d e8	 lea	 ecx, DWORD PTR _seconds$[ebp]
  00798	51		 push	 ecx
  00799	8d 55 ec	 lea	 edx, DWORD PTR _minutes$[ebp]
  0079c	52		 push	 edx
  0079d	68 00 00 00 00	 push	 OFFSET ??_C@_08LDENPILD@?$CFs?3?$CFs?3?$CFs@
  007a2	e8 00 00 00 00	 call	 _va
  007a7	83 c4 10	 add	 esp, 16			; 00000010H
  007aa	50		 push	 eax
  007ab	6a 00		 push	 0
  007ad	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  007b0	50		 push	 eax
  007b1	68 fc 00 00 00	 push	 252			; 000000fcH
  007b6	e8 00 00 00 00	 call	 _V_DrawString
  007bb	83 c4 10	 add	 esp, 16			; 00000010H
$LN42@M_DrawStat:

; 3673 : 			}
; 3674 : 
; 3675 : 			y += 8;

  007be	8b 45 dc	 mov	 eax, DWORD PTR _y$3[ebp]
  007c1	83 c0 08	 add	 eax, 8
  007c4	89 45 dc	 mov	 DWORD PTR _y$3[ebp], eax

; 3676 : 
; 3677 : 			if (y >= BASEVIDHEIGHT-8)

  007c7	81 7d dc c0 00
	00 00		 cmp	 DWORD PTR _y$3[ebp], 192 ; 000000c0H
  007ce	7c 02		 jl	 SHORT $LN49@M_DrawStat

; 3678 : 				return;

  007d0	eb 05		 jmp	 SHORT $LN9@M_DrawStat
$LN49@M_DrawStat:

; 3679 : 		}

  007d2	e9 6d fc ff ff	 jmp	 $LN8@M_DrawStat
$LN9@M_DrawStat:

; 3680 : 	}
; 3681 : }

  007d7	5f		 pop	 edi
  007d8	5e		 pop	 esi
  007d9	5b		 pop	 ebx
  007da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007dd	33 cd		 xor	 ecx, ebp
  007df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007e4	8b e5		 mov	 esp, ebp
  007e6	5d		 pop	 ebp
  007e7	c3		 ret	 0
_M_DrawStats ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ConfirmTeamScramble
_TEXT	SEGMENT
tv65 = -68						; size = 4
_choice$ = 8						; size = 4
_M_ConfirmTeamScramble PROC				; COMDAT

; 2356 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2357 : 	(void)choice;
; 2358 : 	M_ClearMenus(true);

  00009	6a 01		 push	 1
  0000b	e8 00 00 00 00	 call	 _M_ClearMenus
  00010	83 c4 04	 add	 esp, 4

; 2359 : 
; 2360 : 	switch (cv_dummyscramble.value)

  00013	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_dummyscramble+20
  00018	89 45 bc	 mov	 DWORD PTR tv65[ebp], eax
  0001b	83 7d bc 00	 cmp	 DWORD PTR tv65[ebp], 0
  0001f	74 08		 je	 SHORT $LN4@M_ConfirmT
  00021	83 7d bc 01	 cmp	 DWORD PTR tv65[ebp], 1
  00025	74 11		 je	 SHORT $LN5@M_ConfirmT
  00027	eb 1c		 jmp	 SHORT $LN2@M_ConfirmT
$LN4@M_ConfirmT:

; 2361 : 	{
; 2362 : 		case 0:
; 2363 : 			COM_ImmedExecute("teamscramble 1");

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FHJJFDAC@teamscramble?51@
  0002e	e8 00 00 00 00	 call	 _COM_ImmedExecute
  00033	83 c4 04	 add	 esp, 4

; 2364 : 			break;

  00036	eb 0d		 jmp	 SHORT $LN2@M_ConfirmT
$LN5@M_ConfirmT:

; 2365 : 		case 1:
; 2366 : 			COM_ImmedExecute("teamscramble 2");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HMLEAAMB@teamscramble?52@
  0003d	e8 00 00 00 00	 call	 _COM_ImmedExecute
  00042	83 c4 04	 add	 esp, 4
$LN2@M_ConfirmT:

; 2367 : 			break;
; 2368 : 	}
; 2369 : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_M_ConfirmTeamScramble ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_TeamScramble
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_TeamScramble PROC					; COMDAT

; 2702 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2703 : 	(void)choice;
; 2704 : 	if (!(netgame || multiplayer) || !Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	75 09		 jne	 SHORT $LN4@M_TeamScra
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00019	74 09		 je	 SHORT $LN3@M_TeamScra
$LN4@M_TeamScra:
  0001b	e8 00 00 00 00	 call	 _Playing
  00020	85 c0		 test	 eax, eax
  00022	75 13		 jne	 SHORT $LN2@M_TeamScra
$LN3@M_TeamScra:

; 2705 : 	{
; 2706 : 		M_StartMessage("You aren't in a game!\nPress a key.", NULL, MM_NOTHING);

  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KFHIAFFD@You?5aren?8t?5in?5a?5game?$CB?6Press?5a?5k@
  0002d	e8 00 00 00 00	 call	 _M_StartMessage
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2707 : 		return;

  00035	eb 32		 jmp	 SHORT $LN1@M_TeamScra
$LN2@M_TeamScra:

; 2708 : 	}
; 2709 : 
; 2710 : 	if (!server && !adminplayer)

  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0003e	75 1c		 jne	 SHORT $LN5@M_TeamScra
  00040	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _adminplayer, 0
  00047	75 13		 jne	 SHORT $LN5@M_TeamScra

; 2711 : 	{
; 2712 : 		M_StartMessage("Only the server may use this command.\nPress a key.", NULL, MM_NOTHING);

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@KDGACFJD@Only?5the?5server?5may?5use?5this?5co@
  00052	e8 00 00 00 00	 call	 _M_StartMessage
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2713 : 		return;

  0005a	eb 0d		 jmp	 SHORT $LN1@M_TeamScra
$LN5@M_TeamScra:

; 2714 : 	}
; 2715 : 
; 2716 : 	M_SetupNextMenu(&TeamScrambleDef);

  0005c	68 00 00 00 00	 push	 OFFSET _TeamScrambleDef
  00061	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00066	83 c4 04	 add	 esp, 4
$LN1@M_TeamScra:

; 2717 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_M_TeamScramble ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ConfirmSpectate
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_ConfirmSpectate PROC					; COMDAT

; 2349 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2350 : 	(void)choice;
; 2351 : 	M_ClearMenus(true);

  00009	6a 01		 push	 1
  0000b	e8 00 00 00 00	 call	 _M_ClearMenus
  00010	83 c4 04	 add	 esp, 4

; 2352 : 	COM_ImmedExecute("changeteam spectator");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GABIEGHI@changeteam?5spectator@
  00018	e8 00 00 00 00	 call	 _COM_ImmedExecute
  0001d	83 c4 04	 add	 esp, 4

; 2353 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_M_ConfirmSpectate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_TeamChange
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_TeamChange PROC					; COMDAT

; 2690 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2691 : 	(void)choice;
; 2692 : 	if (!(netgame || multiplayer) || !Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	75 09		 jne	 SHORT $LN4@M_TeamChan
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00019	74 09		 je	 SHORT $LN3@M_TeamChan
$LN4@M_TeamChan:
  0001b	e8 00 00 00 00	 call	 _Playing
  00020	85 c0		 test	 eax, eax
  00022	75 13		 jne	 SHORT $LN2@M_TeamChan
$LN3@M_TeamChan:

; 2693 : 	{
; 2694 : 		M_StartMessage("You aren't in a game!\nPress a key.", NULL, MM_NOTHING);

  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KFHIAFFD@You?5aren?8t?5in?5a?5game?$CB?6Press?5a?5k@
  0002d	e8 00 00 00 00	 call	 _M_StartMessage
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2695 : 		return;

  00035	eb 0d		 jmp	 SHORT $LN1@M_TeamChan
$LN2@M_TeamChan:

; 2696 : 	}
; 2697 : 
; 2698 : 	M_SetupNextMenu(&ChangeTeamDef);

  00037	68 00 00 00 00	 push	 OFFSET _ChangeTeamDef
  0003c	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00041	83 c4 04	 add	 esp, 4
$LN1@M_TeamChan:

; 2699 : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_M_TeamChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_MapChange
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_MapChange PROC					; COMDAT

; 2663 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2664 : 	(void)choice;
; 2665 : 	if (!(netgame || multiplayer) || !Playing())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	75 09		 jne	 SHORT $LN4@M_MapChang
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00019	74 09		 je	 SHORT $LN3@M_MapChang
$LN4@M_MapChang:
  0001b	e8 00 00 00 00	 call	 _Playing
  00020	85 c0		 test	 eax, eax
  00022	75 16		 jne	 SHORT $LN2@M_MapChang
$LN3@M_MapChang:

; 2666 : 	{
; 2667 : 		M_StartMessage("You aren't in a game!\nPress a key.", NULL, MM_NOTHING);

  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KFHIAFFD@You?5aren?8t?5in?5a?5game?$CB?6Press?5a?5k@
  0002d	e8 00 00 00 00	 call	 _M_StartMessage
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2668 : 		return;

  00035	e9 bd 00 00 00	 jmp	 $LN1@M_MapChang
$LN2@M_MapChang:

; 2669 : 	}
; 2670 : 
; 2671 : 	inlevelselect = 0;

  0003a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _inlevelselect, 0

; 2672 : 	M_PatchLevelNameTable(0);

  00044	6a 00		 push	 0
  00046	e8 00 00 00 00	 call	 _M_PatchLevelNameTable
  0004b	83 c4 04	 add	 esp, 4

; 2673 : 
; 2674 : 	// Special Cases
; 2675 : 	if (gametype == GT_MATCH && cv_matchtype.value) // Team Match

  0004e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00055	83 f8 01	 cmp	 eax, 1
  00058	75 1a		 jne	 SHORT $LN5@M_MapChang
  0005a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00061	74 11		 je	 SHORT $LN5@M_MapChang

; 2676 : 		CV_SetValue(&cv_newgametype, GTF_TEAMMATCH);

  00063	6a 2a		 push	 42			; 0000002aH
  00065	68 00 00 00 00	 push	 OFFSET _cv_newgametype
  0006a	e8 00 00 00 00	 call	 _CV_SetValue
  0006f	83 c4 08	 add	 esp, 8
  00072	eb 61		 jmp	 SHORT $LN10@M_MapChang
$LN5@M_MapChang:

; 2677 : 	else if (gametype == GT_RACE && cv_racetype.value) // Time-Only Race

  00074	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007b	83 f8 02	 cmp	 eax, 2
  0007e	75 1a		 jne	 SHORT $LN7@M_MapChang
  00080	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_racetype+20, 0
  00087	74 11		 je	 SHORT $LN7@M_MapChang

; 2678 : 		CV_SetValue(&cv_newgametype, GTF_CLASSICRACE);

  00089	6a 2b		 push	 43			; 0000002bH
  0008b	68 00 00 00 00	 push	 OFFSET _cv_newgametype
  00090	e8 00 00 00 00	 call	 _CV_SetValue
  00095	83 c4 08	 add	 esp, 8
  00098	eb 3b		 jmp	 SHORT $LN10@M_MapChang
$LN7@M_MapChang:

; 2679 : 	else if (gametype == GT_TAG && cv_tagtype.value) // Hide and Seek Mode

  0009a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a1	83 f8 03	 cmp	 eax, 3
  000a4	75 1a		 jne	 SHORT $LN9@M_MapChang
  000a6	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  000ad	74 11		 je	 SHORT $LN9@M_MapChang

; 2680 : 		CV_SetValue(&cv_newgametype, GTF_HIDEANDSEEK);

  000af	6a 2c		 push	 44			; 0000002cH
  000b1	68 00 00 00 00	 push	 OFFSET _cv_newgametype
  000b6	e8 00 00 00 00	 call	 _CV_SetValue
  000bb	83 c4 08	 add	 esp, 8
  000be	eb 15		 jmp	 SHORT $LN10@M_MapChang
$LN9@M_MapChang:

; 2681 : 	else
; 2682 : 		CV_SetValue(&cv_newgametype, gametype);

  000c0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000c7	50		 push	 eax
  000c8	68 00 00 00 00	 push	 OFFSET _cv_newgametype
  000cd	e8 00 00 00 00	 call	 _CV_SetValue
  000d2	83 c4 08	 add	 esp, 8
$LN10@M_MapChang:

; 2683 : 
; 2684 : 	CV_SetValue(&cv_nextmap, gamemap);

  000d5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000dc	50		 push	 eax
  000dd	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  000e2	e8 00 00 00 00	 call	 _CV_SetValue
  000e7	83 c4 08	 add	 esp, 8

; 2685 : 
; 2686 : 	M_SetupNextMenu(&ChangeLevelDef);

  000ea	68 00 00 00 00	 push	 OFFSET _ChangeLevelDef
  000ef	e8 00 00 00 00	 call	 _M_SetupNextMenu
  000f4	83 c4 04	 add	 esp, 4
$LN1@M_MapChang:

; 2687 : }

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_M_MapChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_CustomSecretsMenu
_TEXT	SEGMENT
tv161 = -76						; size = 4
_unlocked$ = -8						; size = 4
_i$ = -4						; size = 4
_choice$ = 8						; size = 4
_M_CustomSecretsMenu PROC				; COMDAT

; 5220 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5221 : 	INT32 i;
; 5222 : 	boolean unlocked;
; 5223 : 
; 5224 : 	// Disable all the menu choices
; 5225 : 	(void)choice;
; 5226 : 	for (i = custom1;i < customsecrets_end;i++)

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00010	eb 09		 jmp	 SHORT $LN4@M_CustomSe
$LN2@M_CustomSe:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_CustomSe:
  0001b	83 7d fc 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0001f	7d 12		 jge	 SHORT $LN3@M_CustomSe

; 5227 : 		CustomSecretsMenu[i].status = IT_DISABLED;

  00021	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00025	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0002a	66 89 88 00 00
	00 00		 mov	 WORD PTR _CustomSecretsMenu[eax], cx
  00031	eb df		 jmp	 SHORT $LN2@M_CustomSe
$LN3@M_CustomSe:

; 5228 : 
; 5229 : 	for (i = 0; i < 15; i++)

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003a	eb 09		 jmp	 SHORT $LN7@M_CustomSe
$LN5@M_CustomSe:
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@M_CustomSe:
  00045	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  00049	0f 8d 7b 01 00
	00		 jge	 $LN6@M_CustomSe

; 5230 : 	{
; 5231 : 		unlocked = false;

  0004f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _unlocked$[ebp], 0

; 5232 : 
; 5233 : 		if (customsecretinfo[i].neededemblems)

  00056	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0005d	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+132], 0
  00064	74 76		 je	 SHORT $LN10@M_CustomSe

; 5234 : 		{
; 5235 : 			unlocked = M_GotEnoughEmblems(customsecretinfo[i].neededemblems);

  00066	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0006d	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+132]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 _M_GotEnoughEmblems
  00079	83 c4 04	 add	 esp, 4
  0007c	89 45 f8	 mov	 DWORD PTR _unlocked$[ebp], eax

; 5236 : 
; 5237 : 			if (unlocked && customsecretinfo[i].neededtime)

  0007f	83 7d f8 00	 cmp	 DWORD PTR _unlocked$[ebp], 0
  00083	74 29		 je	 SHORT $LN12@M_CustomSe
  00085	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0008c	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+136], 0
  00093	74 19		 je	 SHORT $LN12@M_CustomSe

; 5238 : 				unlocked = M_GotLowEnoughTime(customsecretinfo[i].neededtime);

  00095	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0009c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+136]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _M_GotLowEnoughTime
  000a8	83 c4 04	 add	 esp, 4
  000ab	89 45 f8	 mov	 DWORD PTR _unlocked$[ebp], eax
$LN12@M_CustomSe:

; 5239 : 
; 5240 : 			if (unlocked && customsecretinfo[i].neededgrade)

  000ae	83 7d f8 00	 cmp	 DWORD PTR _unlocked$[ebp], 0
  000b2	74 26		 je	 SHORT $LN13@M_CustomSe
  000b4	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000bb	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+128], 0
  000c2	74 16		 je	 SHORT $LN13@M_CustomSe

; 5241 : 				unlocked = (grade & customsecretinfo[i].neededgrade);

  000c4	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grade
  000d1	23 88 80 00 00
	00		 and	 ecx, DWORD PTR _customsecretinfo[eax+128]
  000d7	89 4d f8	 mov	 DWORD PTR _unlocked$[ebp], ecx
$LN13@M_CustomSe:

; 5242 : 		}

  000da	eb 6d		 jmp	 SHORT $LN15@M_CustomSe
$LN10@M_CustomSe:

; 5243 : 		else if (customsecretinfo[i].neededtime)

  000dc	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000e3	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+136], 0
  000ea	74 47		 je	 SHORT $LN14@M_CustomSe

; 5244 : 		{
; 5245 : 			unlocked = M_GotLowEnoughTime(customsecretinfo[i].neededtime);

  000ec	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000f3	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+136]
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 _M_GotLowEnoughTime
  000ff	83 c4 04	 add	 esp, 4
  00102	89 45 f8	 mov	 DWORD PTR _unlocked$[ebp], eax

; 5246 : 
; 5247 : 			if (unlocked && customsecretinfo[i].neededgrade)

  00105	83 7d f8 00	 cmp	 DWORD PTR _unlocked$[ebp], 0
  00109	74 26		 je	 SHORT $LN16@M_CustomSe
  0010b	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00112	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR _customsecretinfo[eax+128], 0
  00119	74 16		 je	 SHORT $LN16@M_CustomSe

; 5248 : 				unlocked = (grade & customsecretinfo[i].neededgrade);

  0011b	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grade
  00128	23 88 80 00 00
	00		 and	 ecx, DWORD PTR _customsecretinfo[eax+128]
  0012e	89 4d f8	 mov	 DWORD PTR _unlocked$[ebp], ecx
$LN16@M_CustomSe:

; 5249 : 		}

  00131	eb 16		 jmp	 SHORT $LN15@M_CustomSe
$LN14@M_CustomSe:

; 5250 : 		else
; 5251 : 			unlocked = (grade & customsecretinfo[i].neededgrade);

  00133	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0013a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _grade
  00140	23 88 80 00 00
	00		 and	 ecx, DWORD PTR _customsecretinfo[eax+128]
  00146	89 4d f8	 mov	 DWORD PTR _unlocked$[ebp], ecx
$LN15@M_CustomSe:

; 5252 : 
; 5253 : 		if (unlocked)

  00149	83 7d f8 00	 cmp	 DWORD PTR _unlocked$[ebp], 0
  0014d	74 76		 je	 SHORT $LN17@M_CustomSe

; 5254 : 		{
; 5255 : 			CustomSecretsMenu[custom1+i].status = IT_STRING|IT_CALL;

  0014f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00152	83 c0 01	 add	 eax, 1
  00155	6b c8 14	 imul	 ecx, eax, 20
  00158	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0015d	66 89 91 00 00
	00 00		 mov	 WORD PTR _CustomSecretsMenu[ecx], dx

; 5256 : 
; 5257 : 			switch (customsecretinfo[i].type)

  00164	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0016b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR _customsecretinfo[eax+140]
  00171	89 4d b4	 mov	 DWORD PTR tv161[ebp], ecx
  00174	83 7d b4 00	 cmp	 DWORD PTR tv161[ebp], 0
  00178	74 08		 je	 SHORT $LN18@M_CustomSe
  0017a	83 7d b4 01	 cmp	 DWORD PTR tv161[ebp], 1
  0017e	74 17		 je	 SHORT $LN19@M_CustomSe
  00180	eb 28		 jmp	 SHORT $LN20@M_CustomSe
$LN18@M_CustomSe:

; 5258 : 			{
; 5259 : 				case 0:
; 5260 : 					CustomSecretsMenu[custom1+i].itemaction = M_CustomLevelSelect;

  00182	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00185	83 c0 01	 add	 eax, 1
  00188	6b c8 14	 imul	 ecx, eax, 20
  0018b	c7 81 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CustomSecretsMenu[ecx+12], OFFSET _M_CustomLevelSelect

; 5261 : 					break;

  00195	eb 13		 jmp	 SHORT $LN8@M_CustomSe
$LN19@M_CustomSe:

; 5262 : 				case 1:
; 5263 : 					CustomSecretsMenu[custom1+i].itemaction = M_CustomWarp;

  00197	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0019a	83 c0 01	 add	 eax, 1
  0019d	6b c8 14	 imul	 ecx, eax, 20
  001a0	c7 81 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CustomSecretsMenu[ecx+12], OFFSET _M_CustomWarp
$LN20@M_CustomSe:
$LN8@M_CustomSe:

; 5264 : 				default:
; 5265 : 					break;
; 5266 : 			}
; 5267 : 
; 5268 : 			CustomSecretsMenu[custom1+i].text = customsecretinfo[i].name;

  001aa	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  001b1	05 00 00 00 00	 add	 eax, OFFSET _customsecretinfo
  001b6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001b9	83 c1 01	 add	 ecx, 1
  001bc	6b d1 14	 imul	 edx, ecx, 20
  001bf	89 82 08 00 00
	00		 mov	 DWORD PTR _CustomSecretsMenu[edx+8], eax
$LN17@M_CustomSe:

; 5269 : 		}
; 5270 : 	}

  001c5	e9 72 fe ff ff	 jmp	 $LN5@M_CustomSe
$LN6@M_CustomSe:

; 5271 : 
; 5272 : 	M_SetupNextMenu(&CustomSecretsDef);

  001ca	68 00 00 00 00	 push	 OFFSET _CustomSecretsDef
  001cf	e8 00 00 00 00	 call	 _M_SetupNextMenu
  001d4	83 c4 04	 add	 esp, 4

; 5273 : }

  001d7	5f		 pop	 edi
  001d8	5e		 pop	 esi
  001d9	5b		 pop	 ebx
  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c3		 ret	 0
_M_CustomSecretsMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SecretsMenu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_choice$ = 8						; size = 4
_M_SecretsMenu PROC					; COMDAT

; 5173 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5174 : 	INT32 i;
; 5175 : 
; 5176 : 	// Disable all the menu choices
; 5177 : 	(void)choice;
; 5178 : 	for (i = ultimatecheat;i < secrets_end;i++)

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00010	eb 09		 jmp	 SHORT $LN4@M_SecretsM
$LN2@M_SecretsM:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_SecretsM:
  0001b	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0001f	7d 12		 jge	 SHORT $LN3@M_SecretsM

; 5179 : 		SecretsMenu[i].status = IT_DISABLED;

  00021	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00025	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0002a	66 89 88 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[eax], cx
  00031	eb df		 jmp	 SHORT $LN2@M_SecretsM
$LN3@M_SecretsM:

; 5180 : 
; 5181 : 	// Check grade and enable options as appropriate
; 5182 : 	if (grade & 8)

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00038	83 e0 08	 and	 eax, 8
  0003b	74 7a		 je	 SHORT $LN5@M_SecretsM

; 5183 : 	{
; 5184 : 		SecretsMenu[norobots].status = IT_STRING | IT_CALL;

  0003d	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00042	6b c8 07	 imul	 ecx, eax, 7
  00045	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0004a	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx

; 5185 : 		SecretsMenu[ringslinger].status = IT_STRING | IT_CVAR;

  00051	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00056	c1 e0 02	 shl	 eax, 2
  00059	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0005e	66 89 88 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[eax], cx

; 5186 : 		SecretsMenu[secretsgravity].status = IT_STRING | IT_CVAR;

  00065	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0006a	6b c8 03	 imul	 ecx, eax, 3
  0006d	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00072	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx

; 5187 : 		SecretsMenu[ultimatecheat].status = IT_STRING | IT_CALL;

  00079	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0007e	c1 e0 00	 shl	 eax, 0
  00081	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00086	66 89 88 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[eax], cx

; 5188 : 		SecretsMenu[levelselect].status = IT_STRING | IT_CALL;

  0008d	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00092	6b c8 06	 imul	 ecx, eax, 6
  00095	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0009a	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx

; 5189 : 		SecretsMenu[getemeralds].status = IT_STRING | IT_CALL;

  000a1	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000a6	6b c8 05	 imul	 ecx, eax, 5
  000a9	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000ae	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx

; 5190 : 	}

  000b5	eb 78		 jmp	 SHORT $LN6@M_SecretsM
$LN5@M_SecretsM:

; 5191 : 	else
; 5192 : 	{
; 5193 : 		SecretsMenu[norobots].status = IT_DISABLED;

  000b7	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000bc	6b c8 07	 imul	 ecx, eax, 7
  000bf	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  000c4	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx

; 5194 : 		SecretsMenu[ringslinger].status = IT_DISABLED;

  000cb	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000d0	c1 e0 02	 shl	 eax, 2
  000d3	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  000d8	66 89 88 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[eax], cx

; 5195 : 		SecretsMenu[secretsgravity].status = IT_DISABLED;

  000df	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000e4	6b c8 03	 imul	 ecx, eax, 3
  000e7	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  000ec	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx

; 5196 : 		SecretsMenu[ultimatecheat].status = IT_DISABLED;

  000f3	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000f8	c1 e0 00	 shl	 eax, 0
  000fb	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00100	66 89 88 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[eax], cx

; 5197 : 		SecretsMenu[levelselect].status = IT_DISABLED;

  00107	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0010c	6b c8 06	 imul	 ecx, eax, 6
  0010f	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00114	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx

; 5198 : 		SecretsMenu[getemeralds].status = IT_DISABLED;

  0011b	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00120	6b c8 05	 imul	 ecx, eax, 5
  00123	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00128	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx
$LN6@M_SecretsM:

; 5199 : 	}
; 5200 : 
; 5201 : 	if ((grade & 2) ||
; 5202 : 	(grade & 4) ||

  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00134	83 e0 02	 and	 eax, 2
  00137	75 14		 jne	 SHORT $LN9@M_SecretsM
  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0013e	83 e0 04	 and	 eax, 4
  00141	75 0a		 jne	 SHORT $LN9@M_SecretsM
  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00148	83 e0 10	 and	 eax, 16			; 00000010H
  0014b	74 16		 je	 SHORT $LN7@M_SecretsM
$LN9@M_SecretsM:

; 5203 : 	(grade & 16))
; 5204 : 		SecretsMenu[reward].status = IT_STRING | IT_CALL;

  0014d	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00152	6b c8 09	 imul	 ecx, eax, 9
  00155	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0015a	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx
  00161	eb 14		 jmp	 SHORT $LN8@M_SecretsM
$LN7@M_SecretsM:

; 5205 : 	else
; 5206 : 		SecretsMenu[reward].status = IT_DISABLED;

  00163	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00168	6b c8 09	 imul	 ecx, eax, 9
  0016b	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00170	66 89 91 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[ecx], dx
$LN8@M_SecretsM:

; 5207 : 
; 5208 : 	if (grade & 1)

  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0017c	83 e0 01	 and	 eax, 1
  0017f	74 15		 je	 SHORT $LN10@M_SecretsM

; 5209 : 		SecretsMenu[soundtest].status = IT_STRING | IT_CVAR;

  00181	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00186	d1 e0		 shl	 eax, 1
  00188	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0018d	66 89 88 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[eax], cx
  00194	eb 13		 jmp	 SHORT $LN11@M_SecretsM
$LN10@M_SecretsM:

; 5210 : 	else
; 5211 : 		SecretsMenu[soundtest].status = IT_DISABLED;

  00196	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0019b	d1 e0		 shl	 eax, 1
  0019d	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  001a2	66 89 88 00 00
	00 00		 mov	 WORD PTR _SecretsMenu[eax], cx
$LN11@M_SecretsM:

; 5212 : 
; 5213 : //	if (grade & 256)
; 5214 : //		Insert reward for beating Ultimate here!
; 5215 : 
; 5216 : 	M_SetupNextMenu(&SecretsDef);

  001a9	68 00 00 00 00	 push	 OFFSET _SecretsDef
  001ae	e8 00 00 00 00	 call	 _M_SetupNextMenu
  001b3	83 c4 04	 add	 esp, 4

; 5217 : }

  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
_M_SecretsMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_OptionsMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_OptionsMenu PROC					; COMDAT

; 4544 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4545 : 	(void)choice;
; 4546 : 	M_SetupNextMenu (&OptionsDef);

  00009	68 00 00 00 00	 push	 OFFSET _OptionsDef
  0000e	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00013	83 c4 04	 add	 esp, 4

; 4547 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_M_OptionsMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_QuitSRB2
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_QuitSRB2 PROC					; COMDAT

; 7155 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7156 : 	// We pick index 0 which is language sensitive, or one at random,
; 7157 : 	// between 1 and maximum number.
; 7158 : 	static char s[200];
; 7159 : 	(void)choice;
; 7160 : 	sprintf(s, text[DOSY], text[QUITMSG + (gametic % NUM_QUITMESSAGES)]);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  0000e	33 d2		 xor	 edx, edx
  00010	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00015	f7 f1		 div	 ecx
  00017	8b 14 95 18 05
	00 00		 mov	 edx, DWORD PTR _text[edx*4+1304]
  0001e	52		 push	 edx
  0001f	b8 04 00 00 00	 mov	 eax, 4
  00024	c1 e0 04	 shl	 eax, 4
  00027	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  0002d	51		 push	 ecx
  0002e	68 00 00 00 00	 push	 OFFSET ?s@?1??M_QuitSRB2@@9@9
  00033	e8 00 00 00 00	 call	 _sprintf
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7161 : 	M_StartMessage(s, M_QuitResponse, MM_YESNO);

  0003b	6a 01		 push	 1
  0003d	68 00 00 00 00	 push	 OFFSET _M_QuitResponse
  00042	68 00 00 00 00	 push	 OFFSET ?s@?1??M_QuitSRB2@@9@9
  00047	e8 00 00 00 00	 call	 _M_StartMessage
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7162 : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_M_QuitSRB2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_StringHeight
_TEXT	SEGMENT
_i$ = -8						; size = 4
_h$ = -4						; size = 4
_string$ = 8						; size = 4
_M_StringHeight PROC					; COMDAT

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 429  : 	size_t h = 8, i;

  00009	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _h$[ebp], 8

; 430  : 
; 431  : 	for (i = 0; i < strlen(string); i++)

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@M_StringHe
$LN2@M_StringHe:
  00019	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_StringHe:
  00022	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _strlen
  0002b	83 c4 04	 add	 esp, 4
  0002e	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  00031	73 19		 jae	 SHORT $LN3@M_StringHe

; 432  : 		if (string[i] == '\n')

  00033	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  00036	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00039	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0003c	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0003f	75 09		 jne	 SHORT $LN5@M_StringHe

; 433  : 			h += 8;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _h$[ebp]
  00044	83 c0 08	 add	 eax, 8
  00047	89 45 fc	 mov	 DWORD PTR _h$[ebp], eax
$LN5@M_StringHe:
  0004a	eb cd		 jmp	 SHORT $LN2@M_StringHe
$LN3@M_StringHe:

; 434  : 
; 435  : 	return h;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _h$[ebp]

; 436  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_M_StringHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawCenteredMenu
_TEXT	SEGMENT
tv80 = -92						; size = 4
tv213 = -92						; size = 4
tv224 = -92						; size = 4
_cv$1 = -24						; size = 4
_p$2 = -20						; size = 4
_cursory$ = -16						; size = 4
_i$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_M_DrawCenteredMenu PROC				; COMDAT

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 315  : 	INT32 x, y, i, cursory = 0;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cursory$[ebp], 0

; 316  : 
; 317  : 	// DRAW MENU
; 318  : 	x = currentMenu->x;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00015	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00019	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 319  : 	y = currentMenu->y;

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00021	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  00025	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 320  : 
; 321  : 	// draw title (or big pic)
; 322  : 	M_DrawMenuTitle();

  00028	e8 00 00 00 00	 call	 _M_DrawMenuTitle
  0002d	90		 npad	 1

; 323  : 
; 324  : 	for (i = 0; i < currentMenu->numitems; i++)

  0002e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00035	eb 09		 jmp	 SHORT $LN4@M_DrawCent
$LN2@M_DrawCent:
  00037	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0003a	83 c0 01	 add	 eax, 1
  0003d	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawCent:
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00045	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00049	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  0004c	0f 8d fa 03 00
	00		 jge	 $LN3@M_DrawCent

; 325  : 	{
; 326  : 		if (i == itemOn)

  00052	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00059	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  0005c	75 06		 jne	 SHORT $LN11@M_DrawCent

; 327  : 			cursory = y;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00061	89 45 f0	 mov	 DWORD PTR _cursory$[ebp], eax
$LN11@M_DrawCent:

; 328  : 		switch (currentMenu->menuitems[i].status & IT_DISPLAY)

  00064	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0006e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00071	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00075	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  0007a	89 45 a4	 mov	 DWORD PTR tv80[ebp], eax
  0007d	81 7d a4 80 00
	00 00		 cmp	 DWORD PTR tv80[ebp], 128 ; 00000080H
  00084	0f 87 bd 03 00
	00		 ja	 $LN5@M_DrawCent
  0008a	8b 4d a4	 mov	 ecx, DWORD PTR tv80[ebp]
  0008d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN39@M_DrawCent[ecx]
  00094	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN40@M_DrawCent[edx*4]
$LN12@M_DrawCent:

; 329  : 		{
; 330  : 			case IT_PATCH:
; 331  : 				if (currentMenu->menuitems[i].patch && currentMenu->menuitems[i].patch[0])

  0009b	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000a5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a8	83 7c 02 04 00	 cmp	 DWORD PTR [edx+eax+4], 0
  000ad	0f 84 b4 00 00
	00		 je	 $LN15@M_DrawCent
  000b3	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000bd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000c0	b9 01 00 00 00	 mov	 ecx, 1
  000c5	6b c9 00	 imul	 ecx, ecx, 0
  000c8	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  000cc	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  000d0	85 c0		 test	 eax, eax
  000d2	0f 84 8f 00 00
	00		 je	 $LN15@M_DrawCent

; 332  : 				{
; 333  : 					if (currentMenu->menuitems[i].status & IT_CENTER)

  000d8	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000e2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e5	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  000e9	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  000ee	74 48		 je	 SHORT $LN14@M_DrawCent

; 334  : 					{
; 335  : 						patch_t *p;
; 336  : 						p = W_CachePatchName(currentMenu->menuitems[i].patch, PU_CACHE);

  000f0	6a 65		 push	 101			; 00000065H
  000f2	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000fc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ff	8b 44 02 04	 mov	 eax, DWORD PTR [edx+eax+4]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _W_CachePatchName
  00109	83 c4 08	 add	 esp, 8
  0010c	89 45 ec	 mov	 DWORD PTR _p$2[ebp], eax

; 337  : 						V_DrawScaledPatch((BASEVIDWIDTH - SHORT(p->width))/2, y, 0, p);

  0010f	8b 45 ec	 mov	 eax, DWORD PTR _p$2[ebp]
  00112	50		 push	 eax
  00113	6a 00		 push	 0
  00115	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  00118	51		 push	 ecx
  00119	8b 55 ec	 mov	 edx, DWORD PTR _p$2[ebp]
  0011c	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0011f	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  00124	2b c8		 sub	 ecx, eax
  00126	8b c1		 mov	 eax, ecx
  00128	99		 cdq
  00129	2b c2		 sub	 eax, edx
  0012b	d1 f8		 sar	 eax, 1
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00133	83 c4 10	 add	 esp, 16			; 00000010H

; 338  : 					}

  00136	eb 2f		 jmp	 SHORT $LN15@M_DrawCent
$LN14@M_DrawCent:

; 339  : 					else
; 340  : 					{
; 341  : 						V_DrawScaledPatch(x, y, 0,

  00138	6a 65		 push	 101			; 00000065H
  0013a	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0013e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00144	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00147	8b 44 02 04	 mov	 eax, DWORD PTR [edx+eax+4]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _W_CachePatchName
  00151	83 c4 08	 add	 esp, 8
  00154	50		 push	 eax
  00155	6a 00		 push	 0
  00157	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0015a	51		 push	 ecx
  0015b	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0015e	52		 push	 edx
  0015f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00164	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@M_DrawCent:

; 342  : 							W_CachePatchName(currentMenu->menuitems[i].patch, PU_CACHE));
; 343  : 					}
; 344  : 				}
; 345  : 			case IT_NOTHING:
; 346  : 			case IT_DYBIGSPACE:
; 347  : 				y += LINEHEIGHT;

  00167	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0016a	83 c0 10	 add	 eax, 16			; 00000010H
  0016d	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 348  : 				break;

  00170	e9 d2 02 00 00	 jmp	 $LN5@M_DrawCent
$LN18@M_DrawCent:

; 349  : 			case IT_BIGSLIDER:
; 350  : 				M_DrawThermo(x, y, (consvar_t *)currentMenu->menuitems[i].itemaction);

  00175	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00179	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0017f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00182	8b 44 02 0c	 mov	 eax, DWORD PTR [edx+eax+12]
  00186	50		 push	 eax
  00187	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0018a	51		 push	 ecx
  0018b	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0018e	52		 push	 edx
  0018f	e8 00 00 00 00	 call	 _M_DrawThermo
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 351  : 				y += LINEHEIGHT;

  00197	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0019a	83 c0 10	 add	 eax, 16			; 00000010H
  0019d	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 352  : 				break;

  001a0	e9 a2 02 00 00	 jmp	 $LN5@M_DrawCent
$LN19@M_DrawCent:

; 353  : 			case IT_STRING:
; 354  : 			case IT_WHITESTRING:
; 355  : 				if (currentMenu->menuitems[i].alphaKey)

  001a5	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  001af	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001b2	0f b6 44 02 10	 movzx	 eax, BYTE PTR [edx+eax+16]
  001b7	85 c0		 test	 eax, eax
  001b9	74 1f		 je	 SHORT $LN21@M_DrawCent

; 356  : 					y = currentMenu->y+currentMenu->menuitems[i].alphaKey;

  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001c0	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  001c4	6b 55 f4 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001cd	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  001d0	0f b6 54 10 10	 movzx	 edx, BYTE PTR [eax+edx+16]
  001d5	03 ca		 add	 ecx, edx
  001d7	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx
$LN21@M_DrawCent:

; 357  : 				if (i == itemOn)

  001da	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  001e1	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  001e4	75 06		 jne	 SHORT $LN22@M_DrawCent

; 358  : 					cursory = y;

  001e6	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001e9	89 45 f0	 mov	 DWORD PTR _cursory$[ebp], eax
$LN22@M_DrawCent:

; 359  : 
; 360  : 				if ((currentMenu->menuitems[i].status & IT_DISPLAY)==IT_STRING)

  001ec	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  001f6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001f9	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  001fd	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  00202	83 f8 20	 cmp	 eax, 32			; 00000020H
  00205	75 26		 jne	 SHORT $LN23@M_DrawCent

; 361  : 					V_DrawCenteredString(x, y, 0, currentMenu->menuitems[i].text);

  00207	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0020b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00211	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00214	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00218	50		 push	 eax
  00219	6a 00		 push	 0
  0021b	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0021e	51		 push	 ecx
  0021f	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  00222	52		 push	 edx
  00223	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00228	83 c4 10	 add	 esp, 16			; 00000010H
  0022b	eb 27		 jmp	 SHORT $LN24@M_DrawCent
$LN23@M_DrawCent:

; 362  : 				else
; 363  : 					V_DrawCenteredString(x, y, V_YELLOWMAP, currentMenu->menuitems[i].text);

  0022d	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00231	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00237	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0023a	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  0023e	50		 push	 eax
  0023f	68 00 00 10 00	 push	 1048576			; 00100000H
  00244	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  00247	51		 push	 ecx
  00248	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0024b	52		 push	 edx
  0024c	e8 00 00 00 00	 call	 _V_DrawCenteredString
  00251	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@M_DrawCent:

; 364  : 
; 365  : 				// Cvar specific handling
; 366  : 				switch(currentMenu->menuitems[i].status & IT_TYPE)

  00254	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00258	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0025e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00261	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00265	83 e0 0e	 and	 eax, 14			; 0000000eH
  00268	89 45 a4	 mov	 DWORD PTR tv213[ebp], eax
  0026b	83 7d a4 08	 cmp	 DWORD PTR tv213[ebp], 8
  0026f	74 05		 je	 SHORT $LN25@M_DrawCent
  00271	e9 21 01 00 00	 jmp	 $LN7@M_DrawCent
$LN25@M_DrawCent:

; 367  : 					case IT_CVAR:
; 368  : 					{
; 369  : 						consvar_t *cv = (consvar_t *)currentMenu->menuitems[i].itemaction;

  00276	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0027a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00280	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00283	8b 44 02 0c	 mov	 eax, DWORD PTR [edx+eax+12]
  00287	89 45 e8	 mov	 DWORD PTR _cv$1[ebp], eax

; 370  : 						switch(currentMenu->menuitems[i].status & IT_CVARTYPE)

  0028a	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0028e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00294	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00297	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  0029b	25 00 07 00 00	 and	 eax, 1792		; 00000700H
  002a0	89 45 a4	 mov	 DWORD PTR tv224[ebp], eax
  002a3	81 7d a4 00 01
	00 00		 cmp	 DWORD PTR tv224[ebp], 256 ; 00000100H
  002aa	74 17		 je	 SHORT $LN26@M_DrawCent
  002ac	81 7d a4 00 02
	00 00		 cmp	 DWORD PTR tv224[ebp], 512 ; 00000200H
  002b3	74 27		 je	 SHORT $LN28@M_DrawCent
  002b5	81 7d a4 00 03
	00 00		 cmp	 DWORD PTR tv224[ebp], 768 ; 00000300H
  002bc	74 19		 je	 SHORT $LN27@M_DrawCent
  002be	e9 a2 00 00 00	 jmp	 $LN30@M_DrawCent
$LN26@M_DrawCent:

; 371  : 						{
; 372  : 							case IT_CV_SLIDER:
; 373  : 								M_DrawSlider(x, y, cv);

  002c3	8b 45 e8	 mov	 eax, DWORD PTR _cv$1[ebp]
  002c6	50		 push	 eax
  002c7	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  002ca	51		 push	 ecx
  002cb	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  002ce	52		 push	 edx
  002cf	e8 00 00 00 00	 call	 _M_DrawSlider
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@M_DrawCent:

; 374  : 							case IT_CV_NOPRINT: // color use this
; 375  : 								break;

  002d7	e9 bb 00 00 00	 jmp	 $LN9@M_DrawCent
$LN28@M_DrawCent:

; 376  : 							case IT_CV_STRING:
; 377  : 								M_DrawTextBox(x, y + 4, MAXSTRINGLENGTH, 1);

  002dc	6a 01		 push	 1
  002de	6a 20		 push	 32			; 00000020H
  002e0	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002e3	83 c0 04	 add	 eax, 4
  002e6	50		 push	 eax
  002e7	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002ea	51		 push	 ecx
  002eb	e8 00 00 00 00	 call	 _M_DrawTextBox
  002f0	83 c4 10	 add	 esp, 16			; 00000010H

; 378  : 								V_DrawString(x + 8, y + 12, V_ALLOWLOWERCASE, cv->string);

  002f3	8b 45 e8	 mov	 eax, DWORD PTR _cv$1[ebp]
  002f6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002f9	51		 push	 ecx
  002fa	68 00 00 04 00	 push	 262144			; 00040000H
  002ff	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  00302	83 c2 0c	 add	 edx, 12			; 0000000cH
  00305	52		 push	 edx
  00306	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00309	83 c0 08	 add	 eax, 8
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 _V_DrawString
  00312	83 c4 10	 add	 esp, 16			; 00000010H

; 379  : 								if (skullAnimCounter < 4 && i == itemOn)

  00315	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _skullAnimCounter
  0031c	83 f8 04	 cmp	 eax, 4
  0031f	7d 39		 jge	 SHORT $LN29@M_DrawCent
  00321	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00328	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  0032b	75 2d		 jne	 SHORT $LN29@M_DrawCent

; 380  : 									V_DrawCharacter(x + 8 + V_StringWidth(cv->string), y + 12,

  0032d	6a 00		 push	 0
  0032f	68 df 00 00 00	 push	 223			; 000000dfH
  00334	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00337	83 c0 0c	 add	 eax, 12			; 0000000cH
  0033a	50		 push	 eax
  0033b	8b 4d e8	 mov	 ecx, DWORD PTR _cv$1[ebp]
  0033e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00341	52		 push	 edx
  00342	e8 00 00 00 00	 call	 _V_StringWidth
  00347	83 c4 04	 add	 esp, 4
  0034a	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0034d	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00351	52		 push	 edx
  00352	e8 00 00 00 00	 call	 _V_DrawCharacter
  00357	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@M_DrawCent:

; 381  : 										'_' | 0x80, false);
; 382  : 								y += 16;

  0035a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0035d	83 c0 10	 add	 eax, 16			; 00000010H
  00360	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 383  : 								break;

  00363	eb 32		 jmp	 SHORT $LN9@M_DrawCent
$LN30@M_DrawCent:

; 384  : 							default:
; 385  : 								V_DrawString(BASEVIDWIDTH - x - V_StringWidth(cv->string), y,

  00365	8b 45 e8	 mov	 eax, DWORD PTR _cv$1[ebp]
  00368	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0036b	51		 push	 ecx
  0036c	68 00 00 10 00	 push	 1048576			; 00100000H
  00371	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  00374	52		 push	 edx
  00375	be 40 01 00 00	 mov	 esi, 320		; 00000140H
  0037a	2b 75 fc	 sub	 esi, DWORD PTR _x$[ebp]
  0037d	8b 45 e8	 mov	 eax, DWORD PTR _cv$1[ebp]
  00380	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00383	51		 push	 ecx
  00384	e8 00 00 00 00	 call	 _V_StringWidth
  00389	83 c4 04	 add	 esp, 4
  0038c	2b f0		 sub	 esi, eax
  0038e	56		 push	 esi
  0038f	e8 00 00 00 00	 call	 _V_DrawString
  00394	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@M_DrawCent:
$LN7@M_DrawCent:

; 386  : 									V_YELLOWMAP, cv->string);
; 387  : 								break;
; 388  : 						}
; 389  : 						break;
; 390  : 					}
; 391  : 					y += STRINGHEIGHT;

  00397	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0039a	83 c0 08	 add	 eax, 8
  0039d	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 392  : 					break;

  003a0	e9 a2 00 00 00	 jmp	 $LN5@M_DrawCent
$LN31@M_DrawCent:

; 393  : 			case IT_STRING2:
; 394  : 				V_DrawCenteredString(x, y, 0, currentMenu->menuitems[i].text);

  003a5	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  003af	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003b2	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  003b6	50		 push	 eax
  003b7	6a 00		 push	 0
  003b9	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  003bc	51		 push	 ecx
  003bd	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  003c0	52		 push	 edx
  003c1	e8 00 00 00 00	 call	 _V_DrawCenteredString
  003c6	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@M_DrawCent:

; 395  : 			case IT_DYLITLSPACE:
; 396  : 				y += SMALLLINEHEIGHT;

  003c9	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  003cc	83 c0 08	 add	 eax, 8
  003cf	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 397  : 				break;

  003d2	eb 73		 jmp	 SHORT $LN5@M_DrawCent
$LN33@M_DrawCent:

; 398  : 			case IT_GRAYPATCH:
; 399  : 				if (currentMenu->menuitems[i].patch && currentMenu->menuitems[i].patch[0])

  003d4	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  003de	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003e1	83 7c 02 04 00	 cmp	 DWORD PTR [edx+eax+4], 0
  003e6	74 56		 je	 SHORT $LN34@M_DrawCent
  003e8	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  003f2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003f5	b9 01 00 00 00	 mov	 ecx, 1
  003fa	6b c9 00	 imul	 ecx, ecx, 0
  003fd	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  00401	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00405	85 c0		 test	 eax, eax
  00407	74 35		 je	 SHORT $LN34@M_DrawCent

; 400  : 					V_DrawMappedPatch(x, y, 0,

  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR _graymap
  0040e	50		 push	 eax
  0040f	6a 65		 push	 101			; 00000065H
  00411	6b 4d f4 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  00415	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0041b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0041e	8b 4c 08 04	 mov	 ecx, DWORD PTR [eax+ecx+4]
  00422	51		 push	 ecx
  00423	e8 00 00 00 00	 call	 _W_CachePatchName
  00428	83 c4 08	 add	 esp, 8
  0042b	50		 push	 eax
  0042c	6a 00		 push	 0
  0042e	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  00431	52		 push	 edx
  00432	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00435	50		 push	 eax
  00436	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  0043b	83 c4 14	 add	 esp, 20			; 00000014H
$LN34@M_DrawCent:

; 401  : 						W_CachePatchName(currentMenu->menuitems[i].patch,PU_CACHE), graymap);
; 402  : 				y += LINEHEIGHT;

  0043e	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00441	83 c0 10	 add	 eax, 16			; 00000010H
  00444	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN5@M_DrawCent:

; 403  : 				break;
; 404  : 		}
; 405  : 	}

  00447	e9 eb fb ff ff	 jmp	 $LN2@M_DrawCent
$LN3@M_DrawCent:

; 406  : 
; 407  : 	// DRAW THE SKULL CURSOR
; 408  : 	if (((currentMenu->menuitems[itemOn].status & IT_DISPLAY) == IT_PATCH)
; 409  : 		|| ((currentMenu->menuitems[itemOn].status & IT_DISPLAY) == IT_NOTHING))

  0044c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00453	6b c8 14	 imul	 ecx, eax, 20
  00456	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0045c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0045f	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00463	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  00469	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0046c	74 1f		 je	 SHORT $LN37@M_DrawCent
  0046e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00475	6b c8 14	 imul	 ecx, eax, 20
  00478	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0047e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00481	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00485	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  0048b	75 2a		 jne	 SHORT $LN35@M_DrawCent
$LN37@M_DrawCent:

; 410  : 	{
; 411  : 		V_DrawScaledPatch(x + SKULLXOFF, cursory - 5, 0,

  0048d	6a 65		 push	 101			; 00000065H
  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_08PLKNNBAH@M_CURSOR@
  00494	e8 00 00 00 00	 call	 _W_CachePatchName
  00499	83 c4 08	 add	 esp, 8
  0049c	50		 push	 eax
  0049d	6a 00		 push	 0
  0049f	8b 45 f0	 mov	 eax, DWORD PTR _cursory$[ebp]
  004a2	83 e8 05	 sub	 eax, 5
  004a5	50		 push	 eax
  004a6	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  004a9	83 e9 20	 sub	 ecx, 32			; 00000020H
  004ac	51		 push	 ecx
  004ad	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004b2	83 c4 10	 add	 esp, 16			; 00000010H

; 412  : 			W_CachePatchName("M_CURSOR", PU_CACHE));
; 413  : 	}

  004b5	eb 78		 jmp	 SHORT $LN36@M_DrawCent
$LN35@M_DrawCent:

; 414  : 	else
; 415  : 	{
; 416  : 		V_DrawScaledPatch(x - V_StringWidth(currentMenu->menuitems[itemOn].text)/2 - 24, cursory, 0,

  004b7	6a 65		 push	 101			; 00000065H
  004b9	68 00 00 00 00	 push	 OFFSET ??_C@_08PLKNNBAH@M_CURSOR@
  004be	e8 00 00 00 00	 call	 _W_CachePatchName
  004c3	83 c4 08	 add	 esp, 8
  004c6	50		 push	 eax
  004c7	6a 00		 push	 0
  004c9	8b 45 f0	 mov	 eax, DWORD PTR _cursory$[ebp]
  004cc	50		 push	 eax
  004cd	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _itemOn
  004d4	6b d1 14	 imul	 edx, ecx, 20
  004d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  004dc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  004df	8b 54 11 08	 mov	 edx, DWORD PTR [ecx+edx+8]
  004e3	52		 push	 edx
  004e4	e8 00 00 00 00	 call	 _V_StringWidth
  004e9	83 c4 04	 add	 esp, 4
  004ec	99		 cdq
  004ed	2b c2		 sub	 eax, edx
  004ef	d1 f8		 sar	 eax, 1
  004f1	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  004f4	2b c8		 sub	 ecx, eax
  004f6	83 e9 18	 sub	 ecx, 24			; 00000018H
  004f9	51		 push	 ecx
  004fa	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004ff	83 c4 10	 add	 esp, 16			; 00000010H

; 417  : 			W_CachePatchName("M_CURSOR", PU_CACHE));
; 418  : 		V_DrawCenteredString(x, cursory, V_YELLOWMAP, currentMenu->menuitems[itemOn].text);

  00502	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00509	6b c8 14	 imul	 ecx, eax, 20
  0050c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00512	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00515	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  00519	51		 push	 ecx
  0051a	68 00 00 10 00	 push	 1048576			; 00100000H
  0051f	8b 55 f0	 mov	 edx, DWORD PTR _cursory$[ebp]
  00522	52		 push	 edx
  00523	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00526	50		 push	 eax
  00527	e8 00 00 00 00	 call	 _V_DrawCenteredString
  0052c	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@M_DrawCent:

; 419  : 	}
; 420  : }

  0052f	5f		 pop	 edi
  00530	5e		 pop	 esi
  00531	5b		 pop	 ebx
  00532	8b e5		 mov	 esp, ebp
  00534	5d		 pop	 ebp
  00535	c3		 ret	 0
  00536	66 90		 npad	 2
$LN40@M_DrawCent:
  00538	00 00 00 00	 DD	 $LN15@M_DrawCent
  0053c	00 00 00 00	 DD	 $LN12@M_DrawCent
  00540	00 00 00 00	 DD	 $LN19@M_DrawCent
  00544	00 00 00 00	 DD	 $LN32@M_DrawCent
  00548	00 00 00 00	 DD	 $LN31@M_DrawCent
  0054c	00 00 00 00	 DD	 $LN33@M_DrawCent
  00550	00 00 00 00	 DD	 $LN18@M_DrawCent
  00554	00 00 00 00	 DD	 $LN5@M_DrawCent
$LN39@M_DrawCent:
  00558	00		 DB	 0
  00559	07		 DB	 7
  0055a	07		 DB	 7
  0055b	07		 DB	 7
  0055c	07		 DB	 7
  0055d	07		 DB	 7
  0055e	07		 DB	 7
  0055f	07		 DB	 7
  00560	07		 DB	 7
  00561	07		 DB	 7
  00562	07		 DB	 7
  00563	07		 DB	 7
  00564	07		 DB	 7
  00565	07		 DB	 7
  00566	07		 DB	 7
  00567	07		 DB	 7
  00568	01		 DB	 1
  00569	07		 DB	 7
  0056a	07		 DB	 7
  0056b	07		 DB	 7
  0056c	07		 DB	 7
  0056d	07		 DB	 7
  0056e	07		 DB	 7
  0056f	07		 DB	 7
  00570	07		 DB	 7
  00571	07		 DB	 7
  00572	07		 DB	 7
  00573	07		 DB	 7
  00574	07		 DB	 7
  00575	07		 DB	 7
  00576	07		 DB	 7
  00577	07		 DB	 7
  00578	02		 DB	 2
  00579	07		 DB	 7
  0057a	07		 DB	 7
  0057b	07		 DB	 7
  0057c	07		 DB	 7
  0057d	07		 DB	 7
  0057e	07		 DB	 7
  0057f	07		 DB	 7
  00580	07		 DB	 7
  00581	07		 DB	 7
  00582	07		 DB	 7
  00583	07		 DB	 7
  00584	07		 DB	 7
  00585	07		 DB	 7
  00586	07		 DB	 7
  00587	07		 DB	 7
  00588	02		 DB	 2
  00589	07		 DB	 7
  0058a	07		 DB	 7
  0058b	07		 DB	 7
  0058c	07		 DB	 7
  0058d	07		 DB	 7
  0058e	07		 DB	 7
  0058f	07		 DB	 7
  00590	07		 DB	 7
  00591	07		 DB	 7
  00592	07		 DB	 7
  00593	07		 DB	 7
  00594	07		 DB	 7
  00595	07		 DB	 7
  00596	07		 DB	 7
  00597	07		 DB	 7
  00598	00		 DB	 0
  00599	07		 DB	 7
  0059a	07		 DB	 7
  0059b	07		 DB	 7
  0059c	07		 DB	 7
  0059d	07		 DB	 7
  0059e	07		 DB	 7
  0059f	07		 DB	 7
  005a0	07		 DB	 7
  005a1	07		 DB	 7
  005a2	07		 DB	 7
  005a3	07		 DB	 7
  005a4	07		 DB	 7
  005a5	07		 DB	 7
  005a6	07		 DB	 7
  005a7	07		 DB	 7
  005a8	03		 DB	 3
  005a9	07		 DB	 7
  005aa	07		 DB	 7
  005ab	07		 DB	 7
  005ac	07		 DB	 7
  005ad	07		 DB	 7
  005ae	07		 DB	 7
  005af	07		 DB	 7
  005b0	07		 DB	 7
  005b1	07		 DB	 7
  005b2	07		 DB	 7
  005b3	07		 DB	 7
  005b4	07		 DB	 7
  005b5	07		 DB	 7
  005b6	07		 DB	 7
  005b7	07		 DB	 7
  005b8	04		 DB	 4
  005b9	07		 DB	 7
  005ba	07		 DB	 7
  005bb	07		 DB	 7
  005bc	07		 DB	 7
  005bd	07		 DB	 7
  005be	07		 DB	 7
  005bf	07		 DB	 7
  005c0	07		 DB	 7
  005c1	07		 DB	 7
  005c2	07		 DB	 7
  005c3	07		 DB	 7
  005c4	07		 DB	 7
  005c5	07		 DB	 7
  005c6	07		 DB	 7
  005c7	07		 DB	 7
  005c8	05		 DB	 5
  005c9	07		 DB	 7
  005ca	07		 DB	 7
  005cb	07		 DB	 7
  005cc	07		 DB	 7
  005cd	07		 DB	 7
  005ce	07		 DB	 7
  005cf	07		 DB	 7
  005d0	07		 DB	 7
  005d1	07		 DB	 7
  005d2	07		 DB	 7
  005d3	07		 DB	 7
  005d4	07		 DB	 7
  005d5	07		 DB	 7
  005d6	07		 DB	 7
  005d7	07		 DB	 7
  005d8	06		 DB	 6
_M_DrawCenteredMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawMenuTitle
_TEXT	SEGMENT
_ytitle$1 = -12						; size = 4
_xtitle$2 = -8						; size = 4
_p$3 = -4						; size = 4
_M_DrawMenuTitle PROC					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 189  : 	if (currentMenu->menutitlepic)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0000e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00011	74 74		 je	 SHORT $LN2@M_DrawMenu

; 190  : 	{
; 191  : 		patch_t *p = W_CachePatchName(currentMenu->menutitlepic, PU_CACHE);

  00013	6a 65		 push	 101			; 00000065H
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 _W_CachePatchName
  00022	83 c4 08	 add	 esp, 8
  00025	89 45 fc	 mov	 DWORD PTR _p$3[ebp], eax

; 192  : 
; 193  : 		INT32 xtitle = (BASEVIDWIDTH - SHORT(p->width))/2;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _p$3[ebp]
  0002b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0002e	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  00033	2b c1		 sub	 eax, ecx
  00035	99		 cdq
  00036	2b c2		 sub	 eax, edx
  00038	d1 f8		 sar	 eax, 1
  0003a	89 45 f8	 mov	 DWORD PTR _xtitle$2[ebp], eax

; 194  : 		INT32 ytitle = (currentMenu->y - SHORT(p->height))/2;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00042	0f bf 40 1a	 movsx	 eax, WORD PTR [eax+26]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _p$3[ebp]
  00049	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  0004d	2b c2		 sub	 eax, edx
  0004f	99		 cdq
  00050	2b c2		 sub	 eax, edx
  00052	d1 f8		 sar	 eax, 1
  00054	89 45 f4	 mov	 DWORD PTR _ytitle$1[ebp], eax

; 195  : 
; 196  : 		if (xtitle < 0)

  00057	83 7d f8 00	 cmp	 DWORD PTR _xtitle$2[ebp], 0
  0005b	7d 07		 jge	 SHORT $LN3@M_DrawMenu

; 197  : 			xtitle = 0;

  0005d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _xtitle$2[ebp], 0
$LN3@M_DrawMenu:

; 198  : 		if (ytitle < 0)

  00064	83 7d f4 00	 cmp	 DWORD PTR _ytitle$1[ebp], 0
  00068	7d 07		 jge	 SHORT $LN4@M_DrawMenu

; 199  : 			ytitle = 0;

  0006a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ytitle$1[ebp], 0
$LN4@M_DrawMenu:

; 200  : 		V_DrawScaledPatch(xtitle, ytitle, 0, p);

  00071	8b 45 fc	 mov	 eax, DWORD PTR _p$3[ebp]
  00074	50		 push	 eax
  00075	6a 00		 push	 0
  00077	8b 4d f4	 mov	 ecx, DWORD PTR _ytitle$1[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 f8	 mov	 edx, DWORD PTR _xtitle$2[ebp]
  0007e	52		 push	 edx
  0007f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00084	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@M_DrawMenu:

; 201  : 	}
; 202  : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_M_DrawMenuTitle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SortServerList
_TEXT	SEGMENT
tv64 = -68						; size = 4
_M_SortServerList PROC					; COMDAT

; 8366 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8367 : 	switch(cv_serversort.value)

  00009	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_serversort+20
  0000e	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  00011	83 7d bc 00	 cmp	 DWORD PTR tv64[ebp], 0
  00015	74 0e		 je	 SHORT $LN4@M_SortServ
  00017	83 7d bc 01	 cmp	 DWORD PTR tv64[ebp], 1
  0001b	74 27		 je	 SHORT $LN5@M_SortServ
  0001d	83 7d bc 02	 cmp	 DWORD PTR tv64[ebp], 2
  00021	74 40		 je	 SHORT $LN6@M_SortServ
  00023	eb 5b		 jmp	 SHORT $LN2@M_SortServ
$LN4@M_SortServ:

; 8368 : 	{
; 8369 : 	case 0:		// Ping.
; 8370 : 		qsort(serverlist, serverlistcount, sizeof(serverelem_t), ServerListEntryComparator_time);

  00025	68 00 00 00 00	 push	 OFFSET _ServerListEntryComparator_time
  0002a	68 01 04 00 00	 push	 1025			; 00000401H
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  00034	50		 push	 eax
  00035	68 00 00 00 00	 push	 OFFSET _serverlist
  0003a	e8 00 00 00 00	 call	 _qsort
  0003f	83 c4 10	 add	 esp, 16			; 00000010H

; 8371 : 		break;

  00042	eb 3c		 jmp	 SHORT $LN2@M_SortServ
$LN5@M_SortServ:

; 8372 : 	case 1:		// Players.
; 8373 : 		qsort(serverlist, serverlistcount, sizeof(serverelem_t), ServerListEntryComparator_numberofplayer);

  00044	68 00 00 00 00	 push	 OFFSET _ServerListEntryComparator_numberofplayer
  00049	68 01 04 00 00	 push	 1025			; 00000401H
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET _serverlist
  00059	e8 00 00 00 00	 call	 _qsort
  0005e	83 c4 10	 add	 esp, 16			; 00000010H

; 8374 : 		break;

  00061	eb 1d		 jmp	 SHORT $LN2@M_SortServ
$LN6@M_SortServ:

; 8375 : 	case 2:		// Gametype.
; 8376 : 		qsort(serverlist, serverlistcount, sizeof(serverelem_t), ServerListEntryComparator_gametype);

  00063	68 00 00 00 00	 push	 OFFSET _ServerListEntryComparator_gametype
  00068	68 01 04 00 00	 push	 1025			; 00000401H
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistcount
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET _serverlist
  00078	e8 00 00 00 00	 call	 _qsort
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@M_SortServ:

; 8377 : 		break;
; 8378 : 	}
; 8379 : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_M_SortServerList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_RoomInfoMenu
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_RoomInfoMenu PROC					; COMDAT

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1180 : 	(void)choice;
; 1181 : 
; 1182 : 	M_AlterRoomInfo();

  00009	e8 00 00 00 00	 call	 _M_AlterRoomInfo
  0000e	90		 npad	 1

; 1183 : 
; 1184 : 	RoomInfodef.prevMenu = currentMenu;

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00014	a3 0c 00 00 00	 mov	 DWORD PTR _RoomInfodef+12, eax

; 1185 : 
; 1186 : 	M_SetupNextMenu(&RoomInfodef);

  00019	68 00 00 00 00	 push	 OFFSET _RoomInfodef
  0001e	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00023	83 c4 04	 add	 esp, 4

; 1187 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_M_RoomInfoMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_PrevServerPage
_TEXT	SEGMENT
_M_PrevServerPage PROC					; COMDAT

; 8348 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8349 : 	if (serverlistpage > 0) serverlistpage--;

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _serverlistpage, 0
  00010	76 0d		 jbe	 SHORT $LN2@M_PrevServ
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistpage
  00017	83 e8 01	 sub	 eax, 1
  0001a	a3 00 00 00 00	 mov	 DWORD PTR _serverlistpage, eax
$LN2@M_PrevServ:

; 8350 : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_M_PrevServerPage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_NextServerPage
_TEXT	SEGMENT
_M_NextServerPage PROC					; COMDAT

; 8343 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8344 : 	if ((serverlistpage + 1) * SERVERS_PER_PAGE < serverlistcount) serverlistpage++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistpage
  0000e	83 c0 01	 add	 eax, 1
  00011	6b c8 0a	 imul	 ecx, eax, 10
  00014	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _serverlistcount
  0001a	73 0d		 jae	 SHORT $LN2@M_NextServ
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _serverlistpage
  00021	83 c0 01	 add	 eax, 1
  00024	a3 00 00 00 00	 mov	 DWORD PTR _serverlistpage, eax
$LN2@M_NextServ:

; 8345 : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_M_NextServerPage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_OpenGLOption
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_OpenGLOption PROC					; COMDAT

; 8274 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8275 : 	(void)choice;
; 8276 : 	if (rendermode != render_soft)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00010	74 0f		 je	 SHORT $LN2@M_OpenGLOp

; 8277 : 		M_SetupNextMenu(&OpenGLOptionDef);

  00012	68 00 00 00 00	 push	 OFFSET _OpenGLOptionDef
  00017	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0001c	83 c4 04	 add	 esp, 4
  0001f	eb 11		 jmp	 SHORT $LN3@M_OpenGLOp
$LN2@M_OpenGLOp:

; 8278 : 	else
; 8279 : 		M_StartMessage("You are in software mode\nYou can't change the options\n", NULL, MM_NOTHING);

  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OPAAAELF@You?5are?5in?5software?5mode?6You?5ca@
  0002a	e8 00 00 00 00	 call	 _M_StartMessage
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@M_OpenGLOp:

; 8280 : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_M_OpenGLOption ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_GametypeOptions
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_GametypeOptions PROC					; COMDAT

; 5659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5660 : 	(void)choice;
; 5661 : 	if (!(server || (adminplayer == consoleplayer)))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	75 20		 jne	 SHORT $LN2@M_Gametype
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00017	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0001d	74 13		 je	 SHORT $LN2@M_Gametype

; 5662 : 	{
; 5663 : 		M_StartMessage("You are not the server\nYou can't change the options\n", NULL, MM_NOTHING);

  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@JBIJLGLN@You?5are?5not?5the?5server?6You?5can?8@
  00028	e8 00 00 00 00	 call	 _M_StartMessage
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5664 : 		return;

  00030	eb 3b		 jmp	 SHORT $LN1@M_Gametype
$LN2@M_Gametype:

; 5665 : 	}
; 5666 : 
; 5667 : 	if (!(netgame || multiplayer) || !Playing())

  00032	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00039	75 09		 jne	 SHORT $LN5@M_Gametype
  0003b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00042	74 09		 je	 SHORT $LN4@M_Gametype
$LN5@M_Gametype:
  00044	e8 00 00 00 00	 call	 _Playing
  00049	85 c0		 test	 eax, eax
  0004b	75 13		 jne	 SHORT $LN3@M_Gametype
$LN4@M_Gametype:

; 5668 : 	{
; 5669 : 		M_StartMessage("You aren't in a game!\nPress a key.", NULL, MM_NOTHING);

  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KFHIAFFD@You?5aren?8t?5in?5a?5game?$CB?6Press?5a?5k@
  00056	e8 00 00 00 00	 call	 _M_StartMessage
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5670 : 		return;

  0005e	eb 0d		 jmp	 SHORT $LN1@M_Gametype
$LN3@M_Gametype:

; 5671 : 	}
; 5672 : 
; 5673 : 	M_SetupNextMenu(&GametypeOptionsDef);

  00060	68 00 00 00 00	 push	 OFFSET _GametypeOptionsDef
  00065	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0006a	83 c4 04	 add	 esp, 4
$LN1@M_Gametype:

; 5674 : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_M_GametypeOptions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_NetOption
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_NetOption PROC					; COMDAT

; 5641 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5642 : 	(void)choice;
; 5643 : 	if (!(server || (adminplayer == consoleplayer)))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	75 20		 jne	 SHORT $LN2@M_NetOptio
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00017	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0001d	74 13		 je	 SHORT $LN2@M_NetOptio

; 5644 : 	{
; 5645 : 		M_StartMessage("You are not the server\nYou can't change the options\n", NULL, MM_NOTHING);

  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@JBIJLGLN@You?5are?5not?5the?5server?6You?5can?8@
  00028	e8 00 00 00 00	 call	 _M_StartMessage
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5646 : 		return;

  00030	eb 3b		 jmp	 SHORT $LN1@M_NetOptio
$LN2@M_NetOptio:

; 5647 : 	}
; 5648 : 
; 5649 : 	if (!(netgame || multiplayer) || !Playing())

  00032	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00039	75 09		 jne	 SHORT $LN5@M_NetOptio
  0003b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00042	74 09		 je	 SHORT $LN4@M_NetOptio
$LN5@M_NetOptio:
  00044	e8 00 00 00 00	 call	 _Playing
  00049	85 c0		 test	 eax, eax
  0004b	75 13		 jne	 SHORT $LN3@M_NetOptio
$LN4@M_NetOptio:

; 5650 : 	{
; 5651 : 		M_StartMessage("You aren't in a game!\nPress a key.", NULL, MM_NOTHING);

  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KFHIAFFD@You?5aren?8t?5in?5a?5game?$CB?6Press?5a?5k@
  00056	e8 00 00 00 00	 call	 _M_StartMessage
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5652 : 		return;

  0005e	eb 0d		 jmp	 SHORT $LN1@M_NetOptio
$LN3@M_NetOptio:

; 5653 : 	}
; 5654 : 
; 5655 : 	M_SetupNextMenu(&NetOptionDef);

  00060	68 00 00 00 00	 push	 OFFSET _NetOptionDef
  00065	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0006a	83 c4 04	 add	 esp, 4
$LN1@M_NetOptio:

; 5656 : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_M_NetOption ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_GameOption
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_GameOption PROC					; COMDAT

; 5412 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5413 : 	(void)choice;
; 5414 : 	M_SetupNextMenu(&GameOptionDef);

  00009	68 00 00 00 00	 push	 OFFSET _GameOptionDef
  0000e	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00013	83 c4 04	 add	 esp, 4

; 5415 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_M_GameOption ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_StopMessage
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_StopMessage PROC					; COMDAT

; 7398 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7399 : 	(void)choice;
; 7400 : 	M_SetupNextMenu(MessageDef.prevMenu);

  00009	a1 0c 00 00 00	 mov	 eax, DWORD PTR _MessageDef+12
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00014	83 c4 04	 add	 esp, 4

; 7401 : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_M_StopMessage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_CustomLevelSelect
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_CustomLevelSelect PROC				; COMDAT

; 5158 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5159 : 	(void)choice;
; 5160 : 	LevelSelectDef.prevMenu = &CustomSecretsDef;

  00009	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LevelSelectDef+12, OFFSET _CustomSecretsDef

; 5161 : 	inlevelselect = 1;

  00013	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _inlevelselect, 1

; 5162 : 	pandoralevelselect = true;

  0001d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _pandoralevelselect, 1

; 5163 : 
; 5164 : 	if (!(M_PatchLevelNameTable(1)))

  00027	6a 01		 push	 1
  00029	e8 00 00 00 00	 call	 _M_PatchLevelNameTable
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	75 13		 jne	 SHORT $LN2@M_CustomLe

; 5165 : 	{
; 5166 : 		M_StartMessage("No selectable levels found.\n",NULL,MM_NOTHING);

  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JPGNEEFB@No?5selectable?5levels?5found?4?6@
  0003e	e8 00 00 00 00	 call	 _M_StartMessage
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5167 : 		return;

  00046	eb 0d		 jmp	 SHORT $LN1@M_CustomLe
$LN2@M_CustomLe:

; 5168 : 	}
; 5169 : 	M_SetupNextMenu(&LevelSelectDef);

  00048	68 00 00 00 00	 push	 OFFSET _LevelSelectDef
  0004d	e8 00 00 00 00	 call	 _M_SetupNextMenu
  00052	83 c4 04	 add	 esp, 4
$LN1@M_CustomLe:

; 5170 : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_M_CustomLevelSelect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_CentreText
_TEXT	SEGMENT
_x$ = -4						; size = 4
_y$ = 8							; size = 4
_string$ = 12						; size = 4
_M_CentreText PROC					; COMDAT

; 7412 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7413 : 	INT32 x;
; 7414 : 	//added : 02-02-98 : centre on 320, because V_DrawString centers on vid.width...
; 7415 : 	x = (BASEVIDWIDTH - V_StringWidth(string))>>1;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _V_StringWidth
  00012	83 c4 04	 add	 esp, 4
  00015	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  0001a	2b c8		 sub	 ecx, eax
  0001c	d1 f9		 sar	 ecx, 1
  0001e	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 7416 : 	V_DrawString(x,y,0,string);

  00021	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _y$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _V_DrawString
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 7417 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_M_CentreText ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawSlider
_TEXT	SEGMENT
_p$ = -12						; size = 4
_range$ = -8						; size = 4
_i$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_cv$ = 16						; size = 4
_M_DrawSlider PROC					; COMDAT

; 5279 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5280 : 	INT32 i;
; 5281 : 	INT32 range;
; 5282 : 	patch_t *p;
; 5283 : 
; 5284 : 	for (i = 0; cv->PossibleValue[i+1].strvalue; i++);

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@M_DrawSlid
$LN2@M_DrawSlid:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawSlid:
  0001b	8b 45 10	 mov	 eax, DWORD PTR _cv$[ebp]
  0001e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00021	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00024	83 7c d1 0c 00	 cmp	 DWORD PTR [ecx+edx*8+12], 0
  00029	74 02		 je	 SHORT $LN3@M_DrawSlid
  0002b	eb e5		 jmp	 SHORT $LN2@M_DrawSlid
$LN3@M_DrawSlid:

; 5285 : 
; 5286 : 	range = ((cv->value - cv->PossibleValue[0].value) * 100 /

  0002d	b8 08 00 00 00	 mov	 eax, 8
  00032	6b c8 00	 imul	 ecx, eax, 0
  00035	8b 55 10	 mov	 edx, DWORD PTR _cv$[ebp]
  00038	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003b	8b 55 10	 mov	 edx, DWORD PTR _cv$[ebp]
  0003e	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00041	2b 14 08	 sub	 edx, DWORD PTR [eax+ecx]
  00044	6b c2 64	 imul	 eax, edx, 100
  00047	8b 4d 10	 mov	 ecx, DWORD PTR _cv$[ebp]
  0004a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0004d	b9 08 00 00 00	 mov	 ecx, 8
  00052	6b c9 00	 imul	 ecx, ecx, 0
  00055	8b 75 10	 mov	 esi, DWORD PTR _cv$[ebp]
  00058	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  0005b	8b 7d fc	 mov	 edi, DWORD PTR _i$[ebp]
  0005e	8b 3c fa	 mov	 edi, DWORD PTR [edx+edi*8]
  00061	2b 3c 0e	 sub	 edi, DWORD PTR [esi+ecx]
  00064	99		 cdq
  00065	f7 ff		 idiv	 edi
  00067	89 45 f8	 mov	 DWORD PTR _range$[ebp], eax

; 5287 : 	 (cv->PossibleValue[i].value - cv->PossibleValue[0].value));
; 5288 : 
; 5289 : 	if (range < 0)

  0006a	83 7d f8 00	 cmp	 DWORD PTR _range$[ebp], 0
  0006e	7d 07		 jge	 SHORT $LN8@M_DrawSlid

; 5290 : 		range = 0;

  00070	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _range$[ebp], 0
$LN8@M_DrawSlid:

; 5291 : 	if (range > 100)

  00077	83 7d f8 64	 cmp	 DWORD PTR _range$[ebp], 100 ; 00000064H
  0007b	7e 07		 jle	 SHORT $LN9@M_DrawSlid

; 5292 : 		range = 100;

  0007d	c7 45 f8 64 00
	00 00		 mov	 DWORD PTR _range$[ebp], 100 ; 00000064H
$LN9@M_DrawSlid:

; 5293 : 
; 5294 : 	x = BASEVIDWIDTH - x - SLIDER_WIDTH;

  00084	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  00089	2b 45 08	 sub	 eax, DWORD PTR _x$[ebp]
  0008c	83 e8 56	 sub	 eax, 86			; 00000056H
  0008f	89 45 08	 mov	 DWORD PTR _x$[ebp], eax

; 5295 : 
; 5296 : 	V_DrawScaledPatch(x - 8, y, 0, W_CachePatchName("M_SLIDEL", PU_CACHE));

  00092	6a 65		 push	 101			; 00000065H
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_08LLICGNCG@M_SLIDEL@
  00099	e8 00 00 00 00	 call	 _W_CachePatchName
  0009e	83 c4 08	 add	 esp, 8
  000a1	50		 push	 eax
  000a2	6a 00		 push	 0
  000a4	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000ab	83 e9 08	 sub	 ecx, 8
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000b4	83 c4 10	 add	 esp, 16			; 00000010H

; 5297 : 
; 5298 : 	p =  W_CachePatchName("M_SLIDEM", PU_CACHE);

  000b7	6a 65		 push	 101			; 00000065H
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_08KCJJFMGH@M_SLIDEM@
  000be	e8 00 00 00 00	 call	 _W_CachePatchName
  000c3	83 c4 08	 add	 esp, 8
  000c6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 5299 : 	for (i = 0; i < SLIDER_RANGE; i++)

  000c9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d0	eb 09		 jmp	 SHORT $LN7@M_DrawSlid
$LN5@M_DrawSlid:
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d5	83 c0 01	 add	 eax, 1
  000d8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@M_DrawSlid:
  000db	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  000df	7d 1e		 jge	 SHORT $LN6@M_DrawSlid

; 5300 : 		V_DrawScaledPatch (x+i*8, y, 0,p);

  000e1	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  000e4	50		 push	 eax
  000e5	6a 00		 push	 0
  000e7	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000ea	51		 push	 ecx
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ee	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000f1	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	eb d3		 jmp	 SHORT $LN5@M_DrawSlid
$LN6@M_DrawSlid:

; 5301 : 
; 5302 : 	p = W_CachePatchName("M_SLIDER", PU_CACHE);

  000ff	6a 65		 push	 101			; 00000065H
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_08GPMDFCPJ@M_SLIDER@
  00106	e8 00 00 00 00	 call	 _W_CachePatchName
  0010b	83 c4 08	 add	 esp, 8
  0010e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 5303 : 	V_DrawScaledPatch(x+SLIDER_RANGE*8, y, 0, p);

  00111	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00114	50		 push	 eax
  00115	6a 00		 push	 0
  00117	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0011a	51		 push	 ecx
  0011b	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0011e	83 c2 50	 add	 edx, 80			; 00000050H
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00127	83 c4 10	 add	 esp, 16			; 00000010H

; 5304 : 
; 5305 : 	// draw the slider cursor
; 5306 : 	p = W_CachePatchName("M_SLIDEC", PU_CACHE);

  0012a	6a 65		 push	 101			; 00000065H
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_08DMBKHBOJ@M_SLIDEC@
  00131	e8 00 00 00 00	 call	 _W_CachePatchName
  00136	83 c4 08	 add	 esp, 8
  00139	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 5307 : 	V_DrawMappedPatch(x + ((SLIDER_RANGE-1)*8*range)/100, y, 0, p, yellowmap);

  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR _yellowmap
  00141	50		 push	 eax
  00142	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  00145	51		 push	 ecx
  00146	6a 00		 push	 0
  00148	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0014b	52		 push	 edx
  0014c	6b 45 f8 48	 imul	 eax, DWORD PTR _range$[ebp], 72
  00150	99		 cdq
  00151	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00156	f7 f9		 idiv	 ecx
  00158	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  00161	83 c4 14	 add	 esp, 20			; 00000014H

; 5308 : }

  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
_M_DrawSlider ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawThermo
_TEXT	SEGMENT
_p$ = -32						; size = 4
_cursorlump$ = -28					; size = 4
_centerlump$ = -24					; size = 8
_rightlump$ = -16					; size = 4
_leftlump$ = -12					; size = 4
_i$ = -8						; size = 4
_xx$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_cv$ = 16						; size = 4
_M_DrawThermo PROC					; COMDAT

; 7172 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7173 : 	INT32 xx = x, i;

  00009	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _xx$[ebp], eax

; 7174 : 	lumpnum_t leftlump, rightlump, centerlump[2], cursorlump;
; 7175 : 	patch_t *p;
; 7176 : 
; 7177 : 	leftlump = W_GetNumForName("M_THERML");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_08FLCFKFEE@M_THERML@
  00014	e8 00 00 00 00	 call	 _W_GetNumForName
  00019	83 c4 04	 add	 esp, 4
  0001c	89 45 f4	 mov	 DWORD PTR _leftlump$[ebp], eax

; 7178 : 	rightlump = W_GetNumForName("M_THERMR");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_08IPGEJKJL@M_THERMR@
  00024	e8 00 00 00 00	 call	 _W_GetNumForName
  00029	83 c4 04	 add	 esp, 4
  0002c	89 45 f0	 mov	 DWORD PTR _rightlump$[ebp], eax

; 7179 : 	centerlump[0] = W_GetNumForName("M_THERMM");

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_08ECDOJEAF@M_THERMM@
  00034	e8 00 00 00 00	 call	 _W_GetNumForName
  00039	83 c4 04	 add	 esp, 4
  0003c	b9 04 00 00 00	 mov	 ecx, 4
  00041	6b d1 00	 imul	 edx, ecx, 0
  00044	89 44 15 e8	 mov	 DWORD PTR _centerlump$[ebp+edx], eax

; 7180 : 	centerlump[1] = W_GetNumForName("M_THERMM");

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_08ECDOJEAF@M_THERMM@
  0004d	e8 00 00 00 00	 call	 _W_GetNumForName
  00052	83 c4 04	 add	 esp, 4
  00055	b9 04 00 00 00	 mov	 ecx, 4
  0005a	c1 e1 00	 shl	 ecx, 0
  0005d	89 44 0d e8	 mov	 DWORD PTR _centerlump$[ebp+ecx], eax

; 7181 : 	cursorlump = W_GetNumForName("M_THERMO");

  00061	68 00 00 00 00	 push	 OFFSET ??_C@_08HAAIPGIH@M_THERMO@
  00066	e8 00 00 00 00	 call	 _W_GetNumForName
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 45 e4	 mov	 DWORD PTR _cursorlump$[ebp], eax

; 7182 : 
; 7183 : 	V_DrawScaledPatch(xx, y, 0, p = W_CachePatchNum(leftlump,PU_CACHE));

  00071	6a 65		 push	 101			; 00000065H
  00073	8b 45 f4	 mov	 eax, DWORD PTR _leftlump$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _W_CachePatchNum
  0007c	83 c4 08	 add	 esp, 8
  0007f	89 45 e0	 mov	 DWORD PTR _p$[ebp], eax
  00082	8b 4d e0	 mov	 ecx, DWORD PTR _p$[ebp]
  00085	51		 push	 ecx
  00086	6a 00		 push	 0
  00088	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _xx$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00095	83 c4 10	 add	 esp, 16			; 00000010H

; 7184 : 	xx += SHORT(p->width) - SHORT(p->leftoffset);

  00098	8b 45 e0	 mov	 eax, DWORD PTR _p$[ebp]
  0009b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0009e	8b 55 e0	 mov	 edx, DWORD PTR _p$[ebp]
  000a1	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  000a5	2b c8		 sub	 ecx, eax
  000a7	03 4d fc	 add	 ecx, DWORD PTR _xx$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR _xx$[ebp], ecx

; 7185 : 	for (i = 0; i < 16; i++)

  000ad	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $LN4@M_DrawTher
$LN2@M_DrawTher:
  000b6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000b9	83 c0 01	 add	 eax, 1
  000bc	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawTher:
  000bf	83 7d f8 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  000c3	7d 36		 jge	 SHORT $LN3@M_DrawTher

; 7186 : 	{
; 7187 : 		V_DrawScaledPatch(xx, y, V_WRAPX, W_CachePatchNum(centerlump[i & 1], PU_CACHE));

  000c5	6a 65		 push	 101			; 00000065H
  000c7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ca	83 e0 01	 and	 eax, 1
  000cd	8b 4c 85 e8	 mov	 ecx, DWORD PTR _centerlump$[ebp+eax*4]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 _W_CachePatchNum
  000d7	83 c4 08	 add	 esp, 8
  000da	50		 push	 eax
  000db	68 00 00 00 01	 push	 16777216		; 01000000H
  000e0	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  000e3	52		 push	 edx
  000e4	8b 45 fc	 mov	 eax, DWORD PTR _xx$[ebp]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 7188 : 		xx += 8;

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _xx$[ebp]
  000f3	83 c0 08	 add	 eax, 8
  000f6	89 45 fc	 mov	 DWORD PTR _xx$[ebp], eax

; 7189 : 	}

  000f9	eb bb		 jmp	 SHORT $LN2@M_DrawTher
$LN3@M_DrawTher:

; 7190 : 	V_DrawScaledPatch(xx, y, 0, W_CachePatchNum(rightlump, PU_CACHE));

  000fb	6a 65		 push	 101			; 00000065H
  000fd	8b 45 f0	 mov	 eax, DWORD PTR _rightlump$[ebp]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 _W_CachePatchNum
  00106	83 c4 08	 add	 esp, 8
  00109	50		 push	 eax
  0010a	6a 00		 push	 0
  0010c	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0010f	51		 push	 ecx
  00110	8b 55 fc	 mov	 edx, DWORD PTR _xx$[ebp]
  00113	52		 push	 edx
  00114	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00119	83 c4 10	 add	 esp, 16			; 00000010H

; 7191 : 
; 7192 : 	xx = (cv->value - cv->PossibleValue[0].value) * (15*8) /

  0011c	b8 08 00 00 00	 mov	 eax, 8
  00121	6b c8 00	 imul	 ecx, eax, 0
  00124	8b 55 10	 mov	 edx, DWORD PTR _cv$[ebp]
  00127	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0012a	8b 55 10	 mov	 edx, DWORD PTR _cv$[ebp]
  0012d	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00130	2b 14 08	 sub	 edx, DWORD PTR [eax+ecx]
  00133	6b c2 78	 imul	 eax, edx, 120
  00136	b9 08 00 00 00	 mov	 ecx, 8
  0013b	c1 e1 00	 shl	 ecx, 0
  0013e	8b 55 10	 mov	 edx, DWORD PTR _cv$[ebp]
  00141	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00144	be 08 00 00 00	 mov	 esi, 8
  00149	6b f6 00	 imul	 esi, esi, 0
  0014c	8b 7d 10	 mov	 edi, DWORD PTR _cv$[ebp]
  0014f	8b 7f 0c	 mov	 edi, DWORD PTR [edi+12]
  00152	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00155	2b 0c 37	 sub	 ecx, DWORD PTR [edi+esi]
  00158	99		 cdq
  00159	f7 f9		 idiv	 ecx
  0015b	89 45 fc	 mov	 DWORD PTR _xx$[ebp], eax

; 7193 : 		(cv->PossibleValue[1].value - cv->PossibleValue[0].value);
; 7194 : 
; 7195 : 	V_DrawScaledPatch((x + 8) + xx, y, 0, W_CachePatchNum(cursorlump, PU_CACHE));

  0015e	6a 65		 push	 101			; 00000065H
  00160	8b 45 e4	 mov	 eax, DWORD PTR _cursorlump$[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 _W_CachePatchNum
  00169	83 c4 08	 add	 esp, 8
  0016c	50		 push	 eax
  0016d	6a 00		 push	 0
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00172	51		 push	 ecx
  00173	8b 55 fc	 mov	 edx, DWORD PTR _xx$[ebp]
  00176	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00179	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  0017d	51		 push	 ecx
  0017e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00183	83 c4 10	 add	 esp, 16			; 00000010H

; 7196 : }

  00186	5f		 pop	 edi
  00187	5e		 pop	 esi
  00188	5b		 pop	 ebx
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0
_M_DrawThermo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawSaveLoadBorder
_TEXT	SEGMENT
_i$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_M_DrawSaveLoadBorder PROC				; COMDAT

; 7061 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7062 : 	INT32 i;
; 7063 : 
; 7064 : 	V_DrawScaledPatch (x-8,y+7,0,W_CachePatchName("M_LSLEFT",PU_CACHE));

  00009	6a 65		 push	 101			; 00000065H
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_08CIJFPPFK@M_LSLEFT@
  00010	e8 00 00 00 00	 call	 _W_CachePatchName
  00015	83 c4 08	 add	 esp, 8
  00018	50		 push	 eax
  00019	6a 00		 push	 0
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0001e	83 c0 07	 add	 eax, 7
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00025	83 e9 08	 sub	 ecx, 8
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 7065 : 
; 7066 : 	for (i = 0;i < 24;i++)

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN4@M_DrawSave
$LN2@M_DrawSave:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawSave:
  00043	83 7d fc 18	 cmp	 DWORD PTR _i$[ebp], 24	; 00000018H
  00047	7d 30		 jge	 SHORT $LN3@M_DrawSave

; 7067 : 	{
; 7068 : 		V_DrawScaledPatch (x,y+7,0,W_CachePatchName("M_LSCNTR",PU_CACHE));

  00049	6a 65		 push	 101			; 00000065H
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_08DEDMDPBC@M_LSCNTR@
  00050	e8 00 00 00 00	 call	 _W_CachePatchName
  00055	83 c4 08	 add	 esp, 8
  00058	50		 push	 eax
  00059	6a 00		 push	 0
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0005e	83 c0 07	 add	 eax, 7
  00061	50		 push	 eax
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0006b	83 c4 10	 add	 esp, 16			; 00000010H

; 7069 : 		x += 8;

  0006e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00071	83 c0 08	 add	 eax, 8
  00074	89 45 08	 mov	 DWORD PTR _x$[ebp], eax

; 7070 : 	}

  00077	eb c1		 jmp	 SHORT $LN2@M_DrawSave
$LN3@M_DrawSave:

; 7071 : 
; 7072 : 	V_DrawScaledPatch (x,y+7,0,W_CachePatchName("M_LSRGHT",PU_CACHE));

  00079	6a 65		 push	 101			; 00000065H
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_08FHNCDDDI@M_LSRGHT@
  00080	e8 00 00 00 00	 call	 _W_CachePatchName
  00085	83 c4 08	 add	 esp, 8
  00088	50		 push	 eax
  00089	6a 00		 push	 0
  0008b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0008e	83 c0 07	 add	 eax, 7
  00091	50		 push	 eax
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 7073 : }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_M_DrawSaveLoadBorder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_AlterRoomInfo
_TEXT	SEGMENT
_i$ = -4						; size = 4
_M_AlterRoomInfo PROC					; COMDAT

; 1190 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1191 : 	INT32 i = -1;

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1

; 1192 : 
; 1193 : 	for (i = 0; room_list[i].header.buffer[0]; i++)

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@M_AlterRoo
$LN2@M_AlterRoo:
  00019	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_AlterRoo:
  00022	69 45 fc 33 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 307
  00029	b9 01 00 00 00	 mov	 ecx, 1
  0002e	6b d1 00	 imul	 edx, ecx, 0
  00031	0f be 84 10 00
	00 00 00	 movsx	 eax, BYTE PTR _room_list[eax+edx]
  00039	85 c0		 test	 eax, eax
  0003b	74 2a		 je	 SHORT $LN3@M_AlterRoo

; 1194 : 	{
; 1195 : 		if(cv_chooseroom.value == room_list[i].id)

  0003d	69 45 fc 33 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 307
  00044	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_chooseroom+20
  0004a	3b 88 10 00 00
	00		 cmp	 ecx, DWORD PTR _room_list[eax+16]
  00050	75 13		 jne	 SHORT $LN5@M_AlterRoo

; 1196 : 		{
; 1197 : 			cv_chosenroom_motd = room_list[i].motd;

  00052	69 45 fc 33 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 307
  00059	05 34 00 00 00	 add	 eax, OFFSET _room_list+52
  0005e	a3 00 00 00 00	 mov	 DWORD PTR _cv_chosenroom_motd, eax

; 1198 : 			break;

  00063	eb 02		 jmp	 SHORT $LN3@M_AlterRoo
$LN5@M_AlterRoo:

; 1199 : 		}
; 1200 : 	}

  00065	eb b2		 jmp	 SHORT $LN2@M_AlterRoo
$LN3@M_AlterRoo:

; 1201 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_M_AlterRoomInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_AlterRoomOptions
_TEXT	SEGMENT
_M_AlterRoomOptions PROC				; COMDAT

; 2792 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2793 : 	if (cv_internetserver.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_internetserver+20, 0
  00010	0f 84 b0 00 00
	00		 je	 $LN2@M_AlterRoo

; 2794 : 	{
; 2795 : 		ServerMenu[2].status = IT_STRING|IT_CVAR; // Make room option available.

  00016	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0001b	d1 e0		 shl	 eax, 1
  0001d	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00022	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2796 : 		ServerMenu[3].status = IT_STRING|IT_CALL; // Make room info option available.

  00029	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0002e	6b c8 03	 imul	 ecx, eax, 3
  00031	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00036	66 89 91 00 00
	00 00		 mov	 WORD PTR _ServerMenu[ecx], dx

; 2797 : #ifdef UPDATE_ALERT
; 2798 : 		if(M_CheckMODVersion())

  0003d	e8 00 00 00 00	 call	 _M_CheckMODVersion
  00042	85 c0		 test	 eax, eax
  00044	74 48		 je	 SHORT $LN4@M_AlterRoo

; 2799 : 		{
; 2800 : #endif
; 2801 : 			if(!M_PatchRoomsTable(true))

  00046	6a 01		 push	 1
  00048	e8 00 00 00 00	 call	 _M_PatchRoomsTable
  0004d	83 c4 04	 add	 esp, 4
  00050	85 c0		 test	 eax, eax
  00052	75 38		 jne	 SHORT $LN6@M_AlterRoo

; 2802 : 			{
; 2803 : 				ServerMenu[2].status = IT_DISABLED; // Make room option unavailable.

  00054	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00059	d1 e0		 shl	 eax, 1
  0005b	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00060	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2804 : 				ServerMenu[3].status = IT_DISABLED; // Same for Room info.

  00067	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0006c	6b c8 03	 imul	 ecx, eax, 3
  0006f	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00074	66 89 91 00 00
	00 00		 mov	 WORD PTR _ServerMenu[ecx], dx

; 2805 : 				CV_SetValue(&cv_internetserver, 0);

  0007b	6a 00		 push	 0
  0007d	68 00 00 00 00	 push	 OFFSET _cv_internetserver
  00082	e8 00 00 00 00	 call	 _CV_SetValue
  00087	83 c4 08	 add	 esp, 8

; 2806 : 				return;

  0008a	eb 61		 jmp	 SHORT $LN3@M_AlterRoo
$LN6@M_AlterRoo:

; 2807 : 			}
; 2808 : #ifdef UPDATE_ALERT
; 2809 : 		} else {

  0008c	eb 36		 jmp	 SHORT $LN5@M_AlterRoo
$LN4@M_AlterRoo:

; 2810 : 			ServerMenu[2].status = IT_DISABLED; // Make room option unavailable.

  0008e	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00093	d1 e0		 shl	 eax, 1
  00095	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0009a	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2811 : 			ServerMenu[3].status = IT_DISABLED; // Same for Room info.

  000a1	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000a6	6b c8 03	 imul	 ecx, eax, 3
  000a9	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  000ae	66 89 91 00 00
	00 00		 mov	 WORD PTR _ServerMenu[ecx], dx

; 2812 : 			CV_SetValue(&cv_internetserver, 0);

  000b5	6a 00		 push	 0
  000b7	68 00 00 00 00	 push	 OFFSET _cv_internetserver
  000bc	e8 00 00 00 00	 call	 _CV_SetValue
  000c1	83 c4 08	 add	 esp, 8
$LN5@M_AlterRoo:

; 2813 : 		}
; 2814 : #endif
; 2815 : 	}

  000c4	eb 27		 jmp	 SHORT $LN3@M_AlterRoo
$LN2@M_AlterRoo:

; 2816 : 	else
; 2817 : 	{
; 2818 : 		ServerMenu[2].status = IT_DISABLED; // No room.

  000c6	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000cb	d1 e0		 shl	 eax, 1
  000cd	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  000d2	66 89 88 00 00
	00 00		 mov	 WORD PTR _ServerMenu[eax], cx

; 2819 : 		ServerMenu[3].status = IT_DISABLED; // Same for Room info.

  000d9	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000de	6b c8 03	 imul	 ecx, eax, 3
  000e1	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  000e6	66 89 91 00 00
	00 00		 mov	 WORD PTR _ServerMenu[ecx], dx
$LN3@M_AlterRoo:

; 2820 : 	}
; 2821 : }

  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
_M_AlterRoomOptions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_CheatActivationResponder
_TEXT	SEGMENT
_ch$ = 8						; size = 4
_M_CheatActivationResponder PROC			; COMDAT

; 8384 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8385 : 	if (ch != 'y' && ch != KEY_ENTER)

  00009	83 7d 08 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  0000d	74 08		 je	 SHORT $LN2@M_CheatAct
  0000f	83 7d 08 0d	 cmp	 DWORD PTR _ch$[ebp], 13	; 0000000dH
  00013	74 02		 je	 SHORT $LN2@M_CheatAct

; 8386 : 		return;

  00015	eb 0f		 jmp	 SHORT $LN1@M_CheatAct
$LN2@M_CheatAct:

; 8387 : 
; 8388 : 	CV_SetValue(&cv_cheats, 1);

  00017	6a 01		 push	 1
  00019	68 00 00 00 00	 push	 OFFSET _cv_cheats
  0001e	e8 00 00 00 00	 call	 _CV_SetValue
  00023	83 c4 08	 add	 esp, 8
$LN1@M_CheatAct:

; 8389 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_M_CheatActivationResponder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_GotEnoughEmblems
_TEXT	SEGMENT
_gottenemblems$ = -8					; size = 4
_i$ = -4						; size = 4
_number$ = 8						; size = 4
_M_GotEnoughEmblems PROC				; COMDAT

; 4724 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4725 : 	INT32 i;
; 4726 : 	INT32 gottenemblems = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _gottenemblems$[ebp], 0

; 4727 : 
; 4728 : 	for (i = 0; i < MAXEMBLEMS; i++)

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@M_GotEnoug
$LN2@M_GotEnoug:
  00019	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_GotEnoug:
  00022	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  00029	7d 1a		 jge	 SHORT $LN3@M_GotEnoug

; 4729 : 	{
; 4730 : 		if (emblemlocations[i].collected)

  0002b	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0002f	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+10]
  00036	85 c9		 test	 ecx, ecx
  00038	74 09		 je	 SHORT $LN5@M_GotEnoug

; 4731 : 			gottenemblems++;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _gottenemblems$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 f8	 mov	 DWORD PTR _gottenemblems$[ebp], eax
$LN5@M_GotEnoug:

; 4732 : 	}

  00043	eb d4		 jmp	 SHORT $LN2@M_GotEnoug
$LN3@M_GotEnoug:

; 4733 : 
; 4734 : 	if (gottenemblems >= number)

  00045	8b 45 f8	 mov	 eax, DWORD PTR _gottenemblems$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR _number$[ebp]
  0004b	7c 07		 jl	 SHORT $LN6@M_GotEnoug

; 4735 : 		return true;

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	eb 02		 jmp	 SHORT $LN1@M_GotEnoug
$LN6@M_GotEnoug:

; 4736 : 
; 4737 : 	return false;

  00054	33 c0		 xor	 eax, eax
$LN1@M_GotEnoug:

; 4738 : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_M_GotEnoughEmblems ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_GotLowEnoughTime
_TEXT	SEGMENT
_i$ = -8						; size = 4
_seconds$ = -4						; size = 4
_ptime$ = 8						; size = 4
_M_GotLowEnoughTime PROC				; COMDAT

; 4741 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4742 : 	INT32 seconds = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _seconds$[ebp], 0

; 4743 : 	INT32 i;
; 4744 : 
; 4745 : 	for (i = 0; i < NUMMAPS; i++)

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@M_GotLowEn
$LN2@M_GotLowEn:
  00019	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_GotLowEn:
  00022	81 7d f8 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  00029	7d 3e		 jge	 SHORT $LN3@M_GotLowEn

; 4746 : 	{
; 4747 : 		if (!(mapheaderinfo[i].timeattack))

  0002b	69 45 f8 84 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 388
  00032	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[eax+308], 0
  00039	75 02		 jne	 SHORT $LN5@M_GotLowEn

; 4748 : 			continue;

  0003b	eb dc		 jmp	 SHORT $LN2@M_GotLowEn
$LN5@M_GotLowEn:

; 4749 : 
; 4750 : 		if (timedata[i].time > 0)

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00040	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _timedata[eax*4], 0
  00048	76 12		 jbe	 SHORT $LN6@M_GotLowEn

; 4751 : 			seconds += timedata[i].time;

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _seconds$[ebp]
  00050	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _timedata[eax*4]
  00057	89 4d fc	 mov	 DWORD PTR _seconds$[ebp], ecx
  0005a	eb 0b		 jmp	 SHORT $LN7@M_GotLowEn
$LN6@M_GotLowEn:

; 4752 : 		else
; 4753 : 			seconds += 800*TICRATE;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _seconds$[ebp]
  0005f	05 60 6d 00 00	 add	 eax, 28000		; 00006d60H
  00064	89 45 fc	 mov	 DWORD PTR _seconds$[ebp], eax
$LN7@M_GotLowEn:

; 4754 : 	}

  00067	eb b0		 jmp	 SHORT $LN2@M_GotLowEn
$LN3@M_GotLowEn:

; 4755 : 
; 4756 : 	seconds /= TICRATE;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _seconds$[ebp]
  0006c	99		 cdq
  0006d	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00072	f7 f9		 idiv	 ecx
  00074	89 45 fc	 mov	 DWORD PTR _seconds$[ebp], eax

; 4757 : 
; 4758 : 	if (seconds <= ptime)

  00077	8b 45 fc	 mov	 eax, DWORD PTR _seconds$[ebp]
  0007a	3b 45 08	 cmp	 eax, DWORD PTR _ptime$[ebp]
  0007d	7f 07		 jg	 SHORT $LN8@M_GotLowEn

; 4759 : 		return true;

  0007f	b8 01 00 00 00	 mov	 eax, 1
  00084	eb 02		 jmp	 SHORT $LN1@M_GotLowEn
$LN8@M_GotLowEn:

; 4760 : 
; 4761 : 	return false;

  00086	33 c0		 xor	 eax, eax
$LN1@M_GotLowEn:

; 4762 : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_M_GotLowEnoughTime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawGenericMenu
_TEXT	SEGMENT
tv80 = -92						; size = 4
tv213 = -92						; size = 4
tv224 = -92						; size = 4
_cv$1 = -24						; size = 4
_p$2 = -20						; size = 4
_cursory$ = -16						; size = 4
_i$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_M_DrawGenericMenu PROC					; COMDAT

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 206  : 	INT32 x, y, i, cursory = 0;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cursory$[ebp], 0

; 207  : 
; 208  : 	// DRAW MENU
; 209  : 	x = currentMenu->x;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00015	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00019	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 210  : 	y = currentMenu->y;

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00021	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  00025	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 211  : 
; 212  : 	// draw title (or big pic)
; 213  : 	M_DrawMenuTitle();

  00028	e8 00 00 00 00	 call	 _M_DrawMenuTitle
  0002d	90		 npad	 1

; 214  : 
; 215  : 	for (i = 0; i < currentMenu->numitems; i++)

  0002e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00035	eb 09		 jmp	 SHORT $LN4@M_DrawGene
$LN2@M_DrawGene:
  00037	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0003a	83 c0 01	 add	 eax, 1
  0003d	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_DrawGene:
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00045	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00049	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  0004c	0f 8d fa 03 00
	00		 jge	 $LN3@M_DrawGene

; 216  : 	{
; 217  : 		if (i == itemOn)

  00052	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00059	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  0005c	75 06		 jne	 SHORT $LN11@M_DrawGene

; 218  : 			cursory = y;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00061	89 45 f0	 mov	 DWORD PTR _cursory$[ebp], eax
$LN11@M_DrawGene:

; 219  : 		switch (currentMenu->menuitems[i].status & IT_DISPLAY)

  00064	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0006e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00071	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00075	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  0007a	89 45 a4	 mov	 DWORD PTR tv80[ebp], eax
  0007d	81 7d a4 80 00
	00 00		 cmp	 DWORD PTR tv80[ebp], 128 ; 00000080H
  00084	0f 87 bd 03 00
	00		 ja	 $LN5@M_DrawGene
  0008a	8b 4d a4	 mov	 ecx, DWORD PTR tv80[ebp]
  0008d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN39@M_DrawGene[ecx]
  00094	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN40@M_DrawGene[edx*4]
$LN12@M_DrawGene:

; 220  : 		{
; 221  : 			case IT_PATCH:
; 222  : 				if (currentMenu->menuitems[i].patch && currentMenu->menuitems[i].patch[0])

  0009b	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000a5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a8	83 7c 02 04 00	 cmp	 DWORD PTR [edx+eax+4], 0
  000ad	0f 84 b4 00 00
	00		 je	 $LN15@M_DrawGene
  000b3	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000bd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000c0	b9 01 00 00 00	 mov	 ecx, 1
  000c5	6b c9 00	 imul	 ecx, ecx, 0
  000c8	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  000cc	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  000d0	85 c0		 test	 eax, eax
  000d2	0f 84 8f 00 00
	00		 je	 $LN15@M_DrawGene

; 223  : 				{
; 224  : 					if (currentMenu->menuitems[i].status & IT_CENTER)

  000d8	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000e2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e5	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  000e9	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  000ee	74 48		 je	 SHORT $LN14@M_DrawGene

; 225  : 					{
; 226  : 						patch_t *p;
; 227  : 						p = W_CachePatchName(currentMenu->menuitems[i].patch, PU_CACHE);

  000f0	6a 65		 push	 101			; 00000065H
  000f2	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000fc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ff	8b 44 02 04	 mov	 eax, DWORD PTR [edx+eax+4]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _W_CachePatchName
  00109	83 c4 08	 add	 esp, 8
  0010c	89 45 ec	 mov	 DWORD PTR _p$2[ebp], eax

; 228  : 						V_DrawScaledPatch((BASEVIDWIDTH - SHORT(p->width))/2, y, 0, p);

  0010f	8b 45 ec	 mov	 eax, DWORD PTR _p$2[ebp]
  00112	50		 push	 eax
  00113	6a 00		 push	 0
  00115	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  00118	51		 push	 ecx
  00119	8b 55 ec	 mov	 edx, DWORD PTR _p$2[ebp]
  0011c	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0011f	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  00124	2b c8		 sub	 ecx, eax
  00126	8b c1		 mov	 eax, ecx
  00128	99		 cdq
  00129	2b c2		 sub	 eax, edx
  0012b	d1 f8		 sar	 eax, 1
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00133	83 c4 10	 add	 esp, 16			; 00000010H

; 229  : 					}

  00136	eb 2f		 jmp	 SHORT $LN15@M_DrawGene
$LN14@M_DrawGene:

; 230  : 					else
; 231  : 					{
; 232  : 						V_DrawScaledPatch(x, y, 0,

  00138	6a 65		 push	 101			; 00000065H
  0013a	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0013e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00144	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00147	8b 44 02 04	 mov	 eax, DWORD PTR [edx+eax+4]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _W_CachePatchName
  00151	83 c4 08	 add	 esp, 8
  00154	50		 push	 eax
  00155	6a 00		 push	 0
  00157	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0015a	51		 push	 ecx
  0015b	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0015e	52		 push	 edx
  0015f	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00164	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@M_DrawGene:

; 233  : 							W_CachePatchName(currentMenu->menuitems[i].patch, PU_CACHE));
; 234  : 					}
; 235  : 				}
; 236  : 			case IT_NOTHING:
; 237  : 			case IT_DYBIGSPACE:
; 238  : 				y += LINEHEIGHT;

  00167	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0016a	83 c0 10	 add	 eax, 16			; 00000010H
  0016d	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 239  : 				break;

  00170	e9 d2 02 00 00	 jmp	 $LN5@M_DrawGene
$LN18@M_DrawGene:

; 240  : 			case IT_BIGSLIDER:
; 241  : 				M_DrawThermo(x, y, (consvar_t *)currentMenu->menuitems[i].itemaction);

  00175	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00179	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0017f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00182	8b 44 02 0c	 mov	 eax, DWORD PTR [edx+eax+12]
  00186	50		 push	 eax
  00187	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0018a	51		 push	 ecx
  0018b	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0018e	52		 push	 edx
  0018f	e8 00 00 00 00	 call	 _M_DrawThermo
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 242  : 				y += LINEHEIGHT;

  00197	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0019a	83 c0 10	 add	 eax, 16			; 00000010H
  0019d	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 243  : 				break;

  001a0	e9 a2 02 00 00	 jmp	 $LN5@M_DrawGene
$LN19@M_DrawGene:

; 244  : 			case IT_STRING:
; 245  : 			case IT_WHITESTRING:
; 246  : 				if (currentMenu->menuitems[i].alphaKey)

  001a5	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  001af	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001b2	0f b6 44 02 10	 movzx	 eax, BYTE PTR [edx+eax+16]
  001b7	85 c0		 test	 eax, eax
  001b9	74 1f		 je	 SHORT $LN21@M_DrawGene

; 247  : 					y = currentMenu->y+currentMenu->menuitems[i].alphaKey;

  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001c0	0f bf 48 1a	 movsx	 ecx, WORD PTR [eax+26]
  001c4	6b 55 f4 14	 imul	 edx, DWORD PTR _i$[ebp], 20
  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  001cd	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  001d0	0f b6 54 10 10	 movzx	 edx, BYTE PTR [eax+edx+16]
  001d5	03 ca		 add	 ecx, edx
  001d7	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx
$LN21@M_DrawGene:

; 248  : 				if (i == itemOn)

  001da	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  001e1	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  001e4	75 06		 jne	 SHORT $LN22@M_DrawGene

; 249  : 					cursory = y;

  001e6	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001e9	89 45 f0	 mov	 DWORD PTR _cursory$[ebp], eax
$LN22@M_DrawGene:

; 250  : 
; 251  : 				if ((currentMenu->menuitems[i].status & IT_DISPLAY)==IT_STRING)

  001ec	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  001f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  001f6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001f9	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  001fd	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  00202	83 f8 20	 cmp	 eax, 32			; 00000020H
  00205	75 26		 jne	 SHORT $LN23@M_DrawGene

; 252  : 					V_DrawString(x, y, 0, currentMenu->menuitems[i].text);

  00207	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0020b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00211	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00214	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00218	50		 push	 eax
  00219	6a 00		 push	 0
  0021b	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0021e	51		 push	 ecx
  0021f	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  00222	52		 push	 edx
  00223	e8 00 00 00 00	 call	 _V_DrawString
  00228	83 c4 10	 add	 esp, 16			; 00000010H
  0022b	eb 27		 jmp	 SHORT $LN24@M_DrawGene
$LN23@M_DrawGene:

; 253  : 				else
; 254  : 					V_DrawString(x, y, V_YELLOWMAP, currentMenu->menuitems[i].text);

  0022d	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00231	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00237	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0023a	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  0023e	50		 push	 eax
  0023f	68 00 00 10 00	 push	 1048576			; 00100000H
  00244	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  00247	51		 push	 ecx
  00248	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  0024b	52		 push	 edx
  0024c	e8 00 00 00 00	 call	 _V_DrawString
  00251	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@M_DrawGene:

; 255  : 
; 256  : 				// Cvar specific handling
; 257  : 				switch (currentMenu->menuitems[i].status & IT_TYPE)

  00254	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  00258	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0025e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00261	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00265	83 e0 0e	 and	 eax, 14			; 0000000eH
  00268	89 45 a4	 mov	 DWORD PTR tv213[ebp], eax
  0026b	83 7d a4 08	 cmp	 DWORD PTR tv213[ebp], 8
  0026f	74 05		 je	 SHORT $LN25@M_DrawGene
  00271	e9 21 01 00 00	 jmp	 $LN7@M_DrawGene
$LN25@M_DrawGene:

; 258  : 					case IT_CVAR:
; 259  : 					{
; 260  : 						consvar_t *cv = (consvar_t *)currentMenu->menuitems[i].itemaction;

  00276	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0027a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00280	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00283	8b 44 02 0c	 mov	 eax, DWORD PTR [edx+eax+12]
  00287	89 45 e8	 mov	 DWORD PTR _cv$1[ebp], eax

; 261  : 						switch (currentMenu->menuitems[i].status & IT_CVARTYPE)

  0028a	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  0028e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00294	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00297	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  0029b	25 00 07 00 00	 and	 eax, 1792		; 00000700H
  002a0	89 45 a4	 mov	 DWORD PTR tv224[ebp], eax
  002a3	81 7d a4 00 01
	00 00		 cmp	 DWORD PTR tv224[ebp], 256 ; 00000100H
  002aa	74 17		 je	 SHORT $LN26@M_DrawGene
  002ac	81 7d a4 00 02
	00 00		 cmp	 DWORD PTR tv224[ebp], 512 ; 00000200H
  002b3	74 27		 je	 SHORT $LN28@M_DrawGene
  002b5	81 7d a4 00 03
	00 00		 cmp	 DWORD PTR tv224[ebp], 768 ; 00000300H
  002bc	74 19		 je	 SHORT $LN27@M_DrawGene
  002be	e9 a2 00 00 00	 jmp	 $LN30@M_DrawGene
$LN26@M_DrawGene:

; 262  : 						{
; 263  : 							case IT_CV_SLIDER:
; 264  : 								M_DrawSlider(x, y, cv);

  002c3	8b 45 e8	 mov	 eax, DWORD PTR _cv$1[ebp]
  002c6	50		 push	 eax
  002c7	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  002ca	51		 push	 ecx
  002cb	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  002ce	52		 push	 edx
  002cf	e8 00 00 00 00	 call	 _M_DrawSlider
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@M_DrawGene:

; 265  : 							case IT_CV_NOPRINT: // color use this
; 266  : 								break;

  002d7	e9 bb 00 00 00	 jmp	 $LN9@M_DrawGene
$LN28@M_DrawGene:

; 267  : 							case IT_CV_STRING:
; 268  : 								M_DrawTextBox(x, y + 4, MAXSTRINGLENGTH, 1);

  002dc	6a 01		 push	 1
  002de	6a 20		 push	 32			; 00000020H
  002e0	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002e3	83 c0 04	 add	 eax, 4
  002e6	50		 push	 eax
  002e7	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002ea	51		 push	 ecx
  002eb	e8 00 00 00 00	 call	 _M_DrawTextBox
  002f0	83 c4 10	 add	 esp, 16			; 00000010H

; 269  : 								V_DrawString(x + 8, y + 12, V_ALLOWLOWERCASE, cv->string);

  002f3	8b 45 e8	 mov	 eax, DWORD PTR _cv$1[ebp]
  002f6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002f9	51		 push	 ecx
  002fa	68 00 00 04 00	 push	 262144			; 00040000H
  002ff	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  00302	83 c2 0c	 add	 edx, 12			; 0000000cH
  00305	52		 push	 edx
  00306	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00309	83 c0 08	 add	 eax, 8
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 _V_DrawString
  00312	83 c4 10	 add	 esp, 16			; 00000010H

; 270  : 								if (skullAnimCounter < 4 && i == itemOn)

  00315	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _skullAnimCounter
  0031c	83 f8 04	 cmp	 eax, 4
  0031f	7d 39		 jge	 SHORT $LN29@M_DrawGene
  00321	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00328	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  0032b	75 2d		 jne	 SHORT $LN29@M_DrawGene

; 271  : 									V_DrawCharacter(x + 8 + V_StringWidth(cv->string), y + 12,

  0032d	6a 00		 push	 0
  0032f	68 df 00 00 00	 push	 223			; 000000dfH
  00334	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00337	83 c0 0c	 add	 eax, 12			; 0000000cH
  0033a	50		 push	 eax
  0033b	8b 4d e8	 mov	 ecx, DWORD PTR _cv$1[ebp]
  0033e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00341	52		 push	 edx
  00342	e8 00 00 00 00	 call	 _V_StringWidth
  00347	83 c4 04	 add	 esp, 4
  0034a	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0034d	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00351	52		 push	 edx
  00352	e8 00 00 00 00	 call	 _V_DrawCharacter
  00357	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@M_DrawGene:

; 272  : 										'_' | 0x80, false);
; 273  : 								y += 16;

  0035a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0035d	83 c0 10	 add	 eax, 16			; 00000010H
  00360	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 274  : 								break;

  00363	eb 32		 jmp	 SHORT $LN9@M_DrawGene
$LN30@M_DrawGene:

; 275  : 							default:
; 276  : 								V_DrawString(BASEVIDWIDTH - x - V_StringWidth(cv->string), y,

  00365	8b 45 e8	 mov	 eax, DWORD PTR _cv$1[ebp]
  00368	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0036b	51		 push	 ecx
  0036c	68 00 00 10 00	 push	 1048576			; 00100000H
  00371	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  00374	52		 push	 edx
  00375	be 40 01 00 00	 mov	 esi, 320		; 00000140H
  0037a	2b 75 fc	 sub	 esi, DWORD PTR _x$[ebp]
  0037d	8b 45 e8	 mov	 eax, DWORD PTR _cv$1[ebp]
  00380	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00383	51		 push	 ecx
  00384	e8 00 00 00 00	 call	 _V_StringWidth
  00389	83 c4 04	 add	 esp, 4
  0038c	2b f0		 sub	 esi, eax
  0038e	56		 push	 esi
  0038f	e8 00 00 00 00	 call	 _V_DrawString
  00394	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@M_DrawGene:
$LN7@M_DrawGene:

; 277  : 									V_YELLOWMAP, cv->string);
; 278  : 								break;
; 279  : 						}
; 280  : 						break;
; 281  : 					}
; 282  : 					y += STRINGHEIGHT;

  00397	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0039a	83 c0 08	 add	 eax, 8
  0039d	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 283  : 					break;

  003a0	e9 a2 00 00 00	 jmp	 $LN5@M_DrawGene
$LN31@M_DrawGene:

; 284  : 			case IT_STRING2:
; 285  : 				V_DrawString(x, y, 0, currentMenu->menuitems[i].text);

  003a5	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  003af	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003b2	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  003b6	50		 push	 eax
  003b7	6a 00		 push	 0
  003b9	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  003bc	51		 push	 ecx
  003bd	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  003c0	52		 push	 edx
  003c1	e8 00 00 00 00	 call	 _V_DrawString
  003c6	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@M_DrawGene:

; 286  : 			case IT_DYLITLSPACE:
; 287  : 				y += SMALLLINEHEIGHT;

  003c9	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  003cc	83 c0 08	 add	 eax, 8
  003cf	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 288  : 				break;

  003d2	eb 73		 jmp	 SHORT $LN5@M_DrawGene
$LN33@M_DrawGene:

; 289  : 			case IT_GRAYPATCH:
; 290  : 				if (currentMenu->menuitems[i].patch && currentMenu->menuitems[i].patch[0])

  003d4	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  003de	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003e1	83 7c 02 04 00	 cmp	 DWORD PTR [edx+eax+4], 0
  003e6	74 56		 je	 SHORT $LN34@M_DrawGene
  003e8	6b 45 f4 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  003ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  003f2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003f5	b9 01 00 00 00	 mov	 ecx, 1
  003fa	6b c9 00	 imul	 ecx, ecx, 0
  003fd	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  00401	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00405	85 c0		 test	 eax, eax
  00407	74 35		 je	 SHORT $LN34@M_DrawGene

; 291  : 					V_DrawMappedPatch(x, y, 0,

  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR _graymap
  0040e	50		 push	 eax
  0040f	6a 65		 push	 101			; 00000065H
  00411	6b 4d f4 14	 imul	 ecx, DWORD PTR _i$[ebp], 20
  00415	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0041b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0041e	8b 4c 08 04	 mov	 ecx, DWORD PTR [eax+ecx+4]
  00422	51		 push	 ecx
  00423	e8 00 00 00 00	 call	 _W_CachePatchName
  00428	83 c4 08	 add	 esp, 8
  0042b	50		 push	 eax
  0042c	6a 00		 push	 0
  0042e	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  00431	52		 push	 edx
  00432	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00435	50		 push	 eax
  00436	e8 00 00 00 00	 call	 _V_DrawMappedPatch
  0043b	83 c4 14	 add	 esp, 20			; 00000014H
$LN34@M_DrawGene:

; 292  : 						W_CachePatchName(currentMenu->menuitems[i].patch,PU_CACHE), graymap);
; 293  : 				y += LINEHEIGHT;

  0043e	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00441	83 c0 10	 add	 eax, 16			; 00000010H
  00444	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN5@M_DrawGene:

; 294  : 				break;
; 295  : 		}
; 296  : 	}

  00447	e9 eb fb ff ff	 jmp	 $LN2@M_DrawGene
$LN3@M_DrawGene:

; 297  : 
; 298  : 	// DRAW THE SKULL CURSOR
; 299  : 	if (((currentMenu->menuitems[itemOn].status & IT_DISPLAY) == IT_PATCH)
; 300  : 		|| ((currentMenu->menuitems[itemOn].status & IT_DISPLAY) == IT_NOTHING))

  0044c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00453	6b c8 14	 imul	 ecx, eax, 20
  00456	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0045c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0045f	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00463	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  00469	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0046c	74 1f		 je	 SHORT $LN37@M_DrawGene
  0046e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00475	6b c8 14	 imul	 ecx, eax, 20
  00478	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0047e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00481	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00485	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  0048b	75 31		 jne	 SHORT $LN35@M_DrawGene
$LN37@M_DrawGene:

; 301  : 	{
; 302  : 		V_DrawScaledPatch(currentMenu->x + SKULLXOFF, cursory - 5, 0,

  0048d	6a 65		 push	 101			; 00000065H
  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_08PLKNNBAH@M_CURSOR@
  00494	e8 00 00 00 00	 call	 _W_CachePatchName
  00499	83 c4 08	 add	 esp, 8
  0049c	50		 push	 eax
  0049d	6a 00		 push	 0
  0049f	8b 45 f0	 mov	 eax, DWORD PTR _cursory$[ebp]
  004a2	83 e8 05	 sub	 eax, 5
  004a5	50		 push	 eax
  004a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  004ac	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  004b0	83 ea 20	 sub	 edx, 32			; 00000020H
  004b3	52		 push	 edx
  004b4	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004b9	83 c4 10	 add	 esp, 16			; 00000010H

; 303  : 			W_CachePatchName("M_CURSOR", PU_CACHE));
; 304  : 	}

  004bc	eb 5f		 jmp	 SHORT $LN36@M_DrawGene
$LN35@M_DrawGene:

; 305  : 	else
; 306  : 	{
; 307  : 		V_DrawScaledPatch(currentMenu->x - 24, cursory, 0,

  004be	6a 65		 push	 101			; 00000065H
  004c0	68 00 00 00 00	 push	 OFFSET ??_C@_08PLKNNBAH@M_CURSOR@
  004c5	e8 00 00 00 00	 call	 _W_CachePatchName
  004ca	83 c4 08	 add	 esp, 8
  004cd	50		 push	 eax
  004ce	6a 00		 push	 0
  004d0	8b 45 f0	 mov	 eax, DWORD PTR _cursory$[ebp]
  004d3	50		 push	 eax
  004d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  004da	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  004de	83 ea 18	 sub	 edx, 24			; 00000018H
  004e1	52		 push	 edx
  004e2	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  004e7	83 c4 10	 add	 esp, 16			; 00000010H

; 308  : 			W_CachePatchName("M_CURSOR", PU_CACHE));
; 309  : 		V_DrawString(currentMenu->x, cursory, V_YELLOWMAP, currentMenu->menuitems[itemOn].text);

  004ea	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  004f1	6b c8 14	 imul	 ecx, eax, 20
  004f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  004fa	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004fd	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  00501	51		 push	 ecx
  00502	68 00 00 10 00	 push	 1048576			; 00100000H
  00507	8b 55 f0	 mov	 edx, DWORD PTR _cursory$[ebp]
  0050a	52		 push	 edx
  0050b	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00510	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00514	51		 push	 ecx
  00515	e8 00 00 00 00	 call	 _V_DrawString
  0051a	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@M_DrawGene:

; 310  : 	}
; 311  : }

  0051d	5f		 pop	 edi
  0051e	5e		 pop	 esi
  0051f	5b		 pop	 ebx
  00520	8b e5		 mov	 esp, ebp
  00522	5d		 pop	 ebp
  00523	c3		 ret	 0
$LN40@M_DrawGene:
  00524	00 00 00 00	 DD	 $LN15@M_DrawGene
  00528	00 00 00 00	 DD	 $LN12@M_DrawGene
  0052c	00 00 00 00	 DD	 $LN19@M_DrawGene
  00530	00 00 00 00	 DD	 $LN32@M_DrawGene
  00534	00 00 00 00	 DD	 $LN31@M_DrawGene
  00538	00 00 00 00	 DD	 $LN33@M_DrawGene
  0053c	00 00 00 00	 DD	 $LN18@M_DrawGene
  00540	00 00 00 00	 DD	 $LN5@M_DrawGene
$LN39@M_DrawGene:
  00544	00		 DB	 0
  00545	07		 DB	 7
  00546	07		 DB	 7
  00547	07		 DB	 7
  00548	07		 DB	 7
  00549	07		 DB	 7
  0054a	07		 DB	 7
  0054b	07		 DB	 7
  0054c	07		 DB	 7
  0054d	07		 DB	 7
  0054e	07		 DB	 7
  0054f	07		 DB	 7
  00550	07		 DB	 7
  00551	07		 DB	 7
  00552	07		 DB	 7
  00553	07		 DB	 7
  00554	01		 DB	 1
  00555	07		 DB	 7
  00556	07		 DB	 7
  00557	07		 DB	 7
  00558	07		 DB	 7
  00559	07		 DB	 7
  0055a	07		 DB	 7
  0055b	07		 DB	 7
  0055c	07		 DB	 7
  0055d	07		 DB	 7
  0055e	07		 DB	 7
  0055f	07		 DB	 7
  00560	07		 DB	 7
  00561	07		 DB	 7
  00562	07		 DB	 7
  00563	07		 DB	 7
  00564	02		 DB	 2
  00565	07		 DB	 7
  00566	07		 DB	 7
  00567	07		 DB	 7
  00568	07		 DB	 7
  00569	07		 DB	 7
  0056a	07		 DB	 7
  0056b	07		 DB	 7
  0056c	07		 DB	 7
  0056d	07		 DB	 7
  0056e	07		 DB	 7
  0056f	07		 DB	 7
  00570	07		 DB	 7
  00571	07		 DB	 7
  00572	07		 DB	 7
  00573	07		 DB	 7
  00574	02		 DB	 2
  00575	07		 DB	 7
  00576	07		 DB	 7
  00577	07		 DB	 7
  00578	07		 DB	 7
  00579	07		 DB	 7
  0057a	07		 DB	 7
  0057b	07		 DB	 7
  0057c	07		 DB	 7
  0057d	07		 DB	 7
  0057e	07		 DB	 7
  0057f	07		 DB	 7
  00580	07		 DB	 7
  00581	07		 DB	 7
  00582	07		 DB	 7
  00583	07		 DB	 7
  00584	00		 DB	 0
  00585	07		 DB	 7
  00586	07		 DB	 7
  00587	07		 DB	 7
  00588	07		 DB	 7
  00589	07		 DB	 7
  0058a	07		 DB	 7
  0058b	07		 DB	 7
  0058c	07		 DB	 7
  0058d	07		 DB	 7
  0058e	07		 DB	 7
  0058f	07		 DB	 7
  00590	07		 DB	 7
  00591	07		 DB	 7
  00592	07		 DB	 7
  00593	07		 DB	 7
  00594	03		 DB	 3
  00595	07		 DB	 7
  00596	07		 DB	 7
  00597	07		 DB	 7
  00598	07		 DB	 7
  00599	07		 DB	 7
  0059a	07		 DB	 7
  0059b	07		 DB	 7
  0059c	07		 DB	 7
  0059d	07		 DB	 7
  0059e	07		 DB	 7
  0059f	07		 DB	 7
  005a0	07		 DB	 7
  005a1	07		 DB	 7
  005a2	07		 DB	 7
  005a3	07		 DB	 7
  005a4	04		 DB	 4
  005a5	07		 DB	 7
  005a6	07		 DB	 7
  005a7	07		 DB	 7
  005a8	07		 DB	 7
  005a9	07		 DB	 7
  005aa	07		 DB	 7
  005ab	07		 DB	 7
  005ac	07		 DB	 7
  005ad	07		 DB	 7
  005ae	07		 DB	 7
  005af	07		 DB	 7
  005b0	07		 DB	 7
  005b1	07		 DB	 7
  005b2	07		 DB	 7
  005b3	07		 DB	 7
  005b4	05		 DB	 5
  005b5	07		 DB	 7
  005b6	07		 DB	 7
  005b7	07		 DB	 7
  005b8	07		 DB	 7
  005b9	07		 DB	 7
  005ba	07		 DB	 7
  005bb	07		 DB	 7
  005bc	07		 DB	 7
  005bd	07		 DB	 7
  005be	07		 DB	 7
  005bf	07		 DB	 7
  005c0	07		 DB	 7
  005c1	07		 DB	 7
  005c2	07		 DB	 7
  005c3	07		 DB	 7
  005c4	06		 DB	 6
_M_DrawGenericMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_EndGame
_TEXT	SEGMENT
_choice$ = 8						; size = 4
_M_EndGame PROC						; COMDAT

; 7094 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7095 : 	(void)choice;
; 7096 : 	if (demoplayback || demorecording)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00010	75 09		 jne	 SHORT $LN3@M_EndGame
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demorecording, 0
  00019	74 02		 je	 SHORT $LN2@M_EndGame
$LN3@M_EndGame:

; 7097 : 		return;

  0001b	eb 29		 jmp	 SHORT $LN1@M_EndGame
$LN2@M_EndGame:

; 7098 : 
; 7099 : 	if (!Playing())

  0001d	e8 00 00 00 00	 call	 _Playing
  00022	85 c0		 test	 eax, eax
  00024	75 02		 jne	 SHORT $LN4@M_EndGame

; 7100 : 		return;

  00026	eb 1e		 jmp	 SHORT $LN1@M_EndGame
$LN4@M_EndGame:

; 7101 : 
; 7102 : 	M_StartMessage(text[ENDGAME],M_EndGameResponse,MM_YESNO);

  00028	6a 01		 push	 1
  0002a	68 00 00 00 00	 push	 OFFSET _M_EndGameResponse
  0002f	b8 04 00 00 00	 mov	 eax, 4
  00034	6b c8 0f	 imul	 ecx, eax, 15
  00037	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 _M_StartMessage
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@M_EndGame:

; 7103 : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_M_EndGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ExitGameResponse
_TEXT	SEGMENT
_ch$ = 8						; size = 4
_M_ExitGameResponse PROC				; COMDAT

; 7125 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7126 : 	if (ch != 'y' && ch != KEY_ENTER)

  00009	83 7d 08 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  0000d	74 08		 je	 SHORT $LN2@M_ExitGame
  0000f	83 7d 08 0d	 cmp	 DWORD PTR _ch$[ebp], 13	; 0000000dH
  00013	74 02		 je	 SHORT $LN2@M_ExitGame

; 7127 : 		return;

  00015	eb 06		 jmp	 SHORT $LN1@M_ExitGame
$LN2@M_ExitGame:

; 7128 : 
; 7129 : 	//Command_ExitGame_f();
; 7130 : 	G_SetExitGameFlag();

  00017	e8 00 00 00 00	 call	 _G_SetExitGameFlag
  0001c	90		 npad	 1
$LN1@M_ExitGame:

; 7131 : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_M_ExitGameResponse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_ClearMenus
_TEXT	SEGMENT
_callexitmenufunc$ = 8					; size = 4
_M_ClearMenus PROC					; COMDAT

; 8047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8048 : 	if (!menuactive)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00010	75 02		 jne	 SHORT $LN2@M_ClearMen

; 8049 : 		return;

  00012	eb 52		 jmp	 SHORT $LN4@M_ClearMen
$LN2@M_ClearMen:

; 8050 : 
; 8051 : 	if (currentMenu->quitroutine && callexitmenufunc && !currentMenu->quitroutine())

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00019	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0001d	74 16		 je	 SHORT $LN3@M_ClearMen
  0001f	83 7d 08 00	 cmp	 DWORD PTR _callexitmenufunc$[ebp], 0
  00023	74 10		 je	 SHORT $LN3@M_ClearMen
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0002a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0002d	ff d1		 call	 ecx
  0002f	85 c0		 test	 eax, eax
  00031	75 02		 jne	 SHORT $LN3@M_ClearMen

; 8052 : 		return; // we can't quit this menu (also used to set parameter from the menu)

  00033	eb 31		 jmp	 SHORT $LN4@M_ClearMen
$LN3@M_ClearMen:

; 8053 : 
; 8054 : #ifndef DC // Save the config file. I'm sick of crashing the game later and losing all my changes!
; 8055 : 	COM_BufAddText(va("saveconfig \"%s\" -silent\n", configfile));

  00035	68 00 00 00 00	 push	 OFFSET _configfile
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JLIKDOCG@saveconfig?5?$CC?$CFs?$CC?5?9silent?6@
  0003f	e8 00 00 00 00	 call	 _va
  00044	83 c4 08	 add	 esp, 8
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _COM_BufAddText
  0004d	83 c4 04	 add	 esp, 4

; 8056 : #endif //Alam: But not on the Dreamcast's VMUs
; 8057 : 
; 8058 : 	if (currentMenu != &MessageDef)

  00050	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _MessageDef
  0005a	74 0a		 je	 SHORT $LN4@M_ClearMen

; 8059 : 		menuactive = false;

  0005c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _menuactive, 0
$LN4@M_ClearMen:

; 8060 : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_M_ClearMenus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SetupNextMenu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_menudef$ = 8						; size = 4
_M_SetupNextMenu PROC					; COMDAT

; 8066 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8067 : 	INT32 i;
; 8068 : 
; 8069 : 	if (currentMenu->quitroutine)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0000e	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00012	74 13		 je	 SHORT $LN6@M_SetupNex

; 8070 : 	{
; 8071 : 		if (!currentMenu->quitroutine())

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00019	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001c	ff d1		 call	 ecx
  0001e	85 c0		 test	 eax, eax
  00020	75 05		 jne	 SHORT $LN6@M_SetupNex

; 8072 : 			return; // we can't quit this menu (also used to set parameter from the menu)

  00022	e9 a0 00 00 00	 jmp	 $LN3@M_SetupNex
$LN6@M_SetupNex:

; 8073 : 	}
; 8074 : 	currentMenu = menudef;

  00027	8b 45 08	 mov	 eax, DWORD PTR _menudef$[ebp]
  0002a	a3 00 00 00 00	 mov	 DWORD PTR _currentMenu, eax

; 8075 : 	itemOn = currentMenu->lastOn;

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00034	66 8b 48 1c	 mov	 cx, WORD PTR [eax+28]
  00038	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx

; 8076 : 
; 8077 : 	// in case of...
; 8078 : 	if (itemOn >= currentMenu->numitems)

  0003f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  0004c	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  00050	3b c2		 cmp	 eax, edx
  00052	7c 13		 jl	 SHORT $LN7@M_SetupNex

; 8079 : 		itemOn = (INT16)(currentMenu->numitems - 1);

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00059	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0005d	83 e9 01	 sub	 ecx, 1
  00060	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx
$LN7@M_SetupNex:

; 8080 : 
; 8081 : 	// the curent item can be disabled,
; 8082 : 	// this code go up until an enabled item found
; 8083 : 	if (currentMenu->menuitems[itemOn].status == IT_DISABLED)

  00067	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0006e	6b c8 14	 imul	 ecx, eax, 20
  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00077	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0007a	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  0007e	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  00081	75 44		 jne	 SHORT $LN3@M_SetupNex

; 8084 : 	{
; 8085 : 		for (i = 0; i < currentMenu->numitems; i++)

  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0008a	eb 09		 jmp	 SHORT $LN4@M_SetupNex
$LN2@M_SetupNex:
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0008f	83 c0 01	 add	 eax, 1
  00092	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@M_SetupNex:
  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0009a	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0009e	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  000a1	7d 24		 jge	 SHORT $LN3@M_SetupNex

; 8086 : 		{
; 8087 : 			if ((currentMenu->menuitems[i].status != IT_DISABLED))

  000a3	6b 45 fc 14	 imul	 eax, DWORD PTR _i$[ebp], 20
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  000ad	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000b0	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  000b4	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  000b7	74 0c		 je	 SHORT $LN9@M_SetupNex

; 8088 : 			{
; 8089 : 				itemOn = (INT16)i;

  000b9	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  000bd	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax

; 8090 : 				break;

  000c3	eb 02		 jmp	 SHORT $LN3@M_SetupNex
$LN9@M_SetupNex:

; 8091 : 			}
; 8092 : 		}

  000c5	eb c5		 jmp	 SHORT $LN2@M_SetupNex
$LN3@M_SetupNex:

; 8093 : 	}
; 8094 : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_M_SetupNextMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_QuitResponse
_TEXT	SEGMENT
_ptime$ = -4						; size = 4
_ch$ = 8						; size = 4
_M_QuitResponse PROC					; COMDAT

; 7134 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7135 : 	tic_t ptime;
; 7136 : 	if (ch != 'y' && ch != KEY_ENTER)

  00009	83 7d 08 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  0000d	74 0b		 je	 SHORT $LN4@M_QuitResp
  0000f	83 7d 08 0d	 cmp	 DWORD PTR _ch$[ebp], 13	; 0000000dH
  00013	74 05		 je	 SHORT $LN4@M_QuitResp

; 7137 : 		return;

  00015	e9 8b 00 00 00	 jmp	 $LN1@M_QuitResp
$LN4@M_QuitResp:

; 7138 : 	if (!(netgame || cv_debug))

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00021	75 7c		 jne	 SHORT $LN3@M_QuitResp
  00023	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002a	75 73		 jne	 SHORT $LN3@M_QuitResp

; 7139 : 	{
; 7140 : 		if (quitsounds2[(gametic>>2)&7]) S_StartSound(NULL, quitsounds2[(gametic>>2)&7]); // Use quitsounds2, not quitsounds Tails 11-09-99

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00031	c1 e8 02	 shr	 eax, 2
  00034	83 e0 07	 and	 eax, 7
  00037	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _quitsounds2[eax*4], 0
  0003f	74 1d		 je	 SHORT $LN6@M_QuitResp
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00046	c1 e8 02	 shr	 eax, 2
  00049	83 e0 07	 and	 eax, 7
  0004c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _quitsounds2[eax*4]
  00053	51		 push	 ecx
  00054	6a 00		 push	 0
  00056	e8 00 00 00 00	 call	 _S_StartSound
  0005b	83 c4 08	 add	 esp, 8
$LN6@M_QuitResp:

; 7141 : 
; 7142 : 		//added : 12-02-98: do that instead of I_WaitVbl which does not work
; 7143 : 		ptime = I_GetTime() + TICRATE*3; // Shortened the quit time, used to be 2 seconds Tails 03-26-2001

  0005e	e8 00 00 00 00	 call	 _I_GetTime
  00063	83 c0 69	 add	 eax, 105		; 00000069H
  00066	89 45 fc	 mov	 DWORD PTR _ptime$[ebp], eax
$LN2@M_QuitResp:

; 7144 : 		while (ptime > I_GetTime())

  00069	e8 00 00 00 00	 call	 _I_GetTime
  0006e	39 45 fc	 cmp	 DWORD PTR _ptime$[ebp], eax
  00071	76 2c		 jbe	 SHORT $LN3@M_QuitResp

; 7145 : 		{
; 7146 : 			V_DrawScaledPatch(0, 0, 0, W_CachePatchName("GAMEQUIT", PU_CACHE)); // Demo 3 Quit Screen Tails 06-16-2001

  00073	6a 65		 push	 101			; 00000065H
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_08GEEHPPHO@GAMEQUIT@
  0007a	e8 00 00 00 00	 call	 _W_CachePatchName
  0007f	83 c4 08	 add	 esp, 8
  00082	50		 push	 eax
  00083	6a 00		 push	 0
  00085	6a 00		 push	 0
  00087	6a 00		 push	 0
  00089	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0008e	83 c4 10	 add	 esp, 16			; 00000010H

; 7147 : 			I_FinishUpdate(); // Update the screen with the image Tails 06-19-2001

  00091	e8 00 00 00 00	 call	 _I_FinishUpdate
  00096	90		 npad	 1

; 7148 : 			I_Sleep();

  00097	e8 00 00 00 00	 call	 _I_Sleep
  0009c	90		 npad	 1

; 7149 : 		}

  0009d	eb ca		 jmp	 SHORT $LN2@M_QuitResp
$LN3@M_QuitResp:

; 7150 : 	}
; 7151 : 	I_Quit();

  0009f	e8 00 00 00 00	 call	 _I_Quit
  000a4	90		 npad	 1
$LN1@M_QuitResp:

; 7152 : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_M_QuitResponse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_StartMessage
_TEXT	SEGMENT
tv80 = -84						; size = 4
_strlines$ = -16					; size = 4
_i$ = -12						; size = 4
_start$ = -8						; size = 4
_max$ = -4						; size = 4
_string$ = 8						; size = 4
_routine$ = 12						; size = 4
_itemtype$ = 16						; size = 4
_M_StartMessage PROC					; COMDAT

; 7273 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7274 : 	size_t max = 0, start = 0, i, strlines;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _max$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _start$[ebp], 0

; 7275 : 	static char *message = NULL;
; 7276 : 	Z_Free(message);

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?message@?1??M_StartMessage@@9@9
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _Z_Free
  00022	83 c4 04	 add	 esp, 4

; 7277 : 	message = Z_StrDup(string);

  00025	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _Z_StrDup
  0002e	83 c4 04	 add	 esp, 4
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?message@?1??M_StartMessage@@9@9, eax

; 7278 : 	DEBFILE(message);

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0003d	74 23		 je	 SHORT $LN10@M_StartMes
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00044	50		 push	 eax
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?message@?1??M_StartMessage@@9@9
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _fputs
  00051	83 c4 08	 add	 esp, 8
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _fflush
  0005f	83 c4 04	 add	 esp, 4
$LN10@M_StartMes:

; 7279 : 
; 7280 : 	M_StartControlPanel(); // can't put menuactive to true

  00062	e8 00 00 00 00	 call	 _M_StartControlPanel
  00067	90		 npad	 1

; 7281 : 
; 7282 : 	if (currentMenu == &MessageDef) // Prevent recursion

  00068	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _MessageDef
  00072	75 0c		 jne	 SHORT $LN11@M_StartMes

; 7283 : 		MessageDef.prevMenu = &MainDef;

  00074	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _MessageDef+12, OFFSET _MainDef
  0007e	eb 0a		 jmp	 SHORT $LN12@M_StartMes
$LN11@M_StartMes:

; 7284 : 	else
; 7285 : 		MessageDef.prevMenu = currentMenu;

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00085	a3 0c 00 00 00	 mov	 DWORD PTR _MessageDef+12, eax
$LN12@M_StartMes:

; 7286 : 
; 7287 : 	MessageDef.menuitems[0].text     = message;

  0008a	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _MessageDef+16
  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?message@?1??M_StartMessage@@9@9
  0009d	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 7288 : 	MessageDef.menuitems[0].alphaKey = (UINT8)itemtype;

  000a1	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000a6	6b c8 00	 imul	 ecx, eax, 0
  000a9	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _MessageDef+16
  000af	8a 45 10	 mov	 al, BYTE PTR _itemtype$[ebp]
  000b2	88 44 0a 10	 mov	 BYTE PTR [edx+ecx+16], al

; 7289 : 	if (!routine && itemtype != MM_NOTHING) itemtype = MM_NOTHING;

  000b6	83 7d 0c 00	 cmp	 DWORD PTR _routine$[ebp], 0
  000ba	75 0d		 jne	 SHORT $LN13@M_StartMes
  000bc	83 7d 10 00	 cmp	 DWORD PTR _itemtype$[ebp], 0
  000c0	74 07		 je	 SHORT $LN13@M_StartMes
  000c2	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _itemtype$[ebp], 0
$LN13@M_StartMes:

; 7290 : 	switch (itemtype)

  000c9	8b 45 10	 mov	 eax, DWORD PTR _itemtype$[ebp]
  000cc	89 45 ac	 mov	 DWORD PTR tv80[ebp], eax
  000cf	83 7d ac 00	 cmp	 DWORD PTR tv80[ebp], 0
  000d3	74 11		 je	 SHORT $LN14@M_StartMes
  000d5	83 7d ac 01	 cmp	 DWORD PTR tv80[ebp], 1
  000d9	74 39		 je	 SHORT $LN15@M_StartMes
  000db	83 7d ac 02	 cmp	 DWORD PTR tv80[ebp], 2
  000df	74 60		 je	 SHORT $LN16@M_StartMes
  000e1	e9 86 00 00 00	 jmp	 $LN2@M_StartMes
$LN14@M_StartMes:

; 7291 : 	{
; 7292 : 		case MM_NOTHING:
; 7293 : 			MessageDef.menuitems[0].status     = IT_MSGHANDLER;

  000e6	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000eb	6b c8 00	 imul	 ecx, eax, 0
  000ee	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000f3	a1 10 00 00 00	 mov	 eax, DWORD PTR _MessageDef+16
  000f8	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx

; 7294 : 			MessageDef.menuitems[0].itemaction = M_StopMessage;

  000fc	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00101	6b c8 00	 imul	 ecx, eax, 0
  00104	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _MessageDef+16
  0010a	c7 44 0a 0c 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+12], OFFSET _M_StopMessage

; 7295 : 			break;

  00112	eb 58		 jmp	 SHORT $LN2@M_StartMes
$LN15@M_StartMes:

; 7296 : 		case MM_YESNO:
; 7297 : 			MessageDef.menuitems[0].status     = IT_MSGHANDLER;

  00114	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00119	6b c8 00	 imul	 ecx, eax, 0
  0011c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00121	a1 10 00 00 00	 mov	 eax, DWORD PTR _MessageDef+16
  00126	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx

; 7298 : 			MessageDef.menuitems[0].itemaction = routine;

  0012a	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0012f	6b c8 00	 imul	 ecx, eax, 0
  00132	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _MessageDef+16
  00138	8b 45 0c	 mov	 eax, DWORD PTR _routine$[ebp]
  0013b	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 7299 : 			break;

  0013f	eb 2b		 jmp	 SHORT $LN2@M_StartMes
$LN16@M_StartMes:

; 7300 : 		case MM_EVENTHANDLER:
; 7301 : 			MessageDef.menuitems[0].status     = IT_MSGHANDLER;

  00141	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00146	6b c8 00	 imul	 ecx, eax, 0
  00149	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0014e	a1 10 00 00 00	 mov	 eax, DWORD PTR _MessageDef+16
  00153	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx

; 7302 : 			MessageDef.menuitems[0].itemaction = routine;

  00157	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0015c	6b c8 00	 imul	 ecx, eax, 0
  0015f	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _MessageDef+16
  00165	8b 45 0c	 mov	 eax, DWORD PTR _routine$[ebp]
  00168	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax
$LN2@M_StartMes:

; 7303 : 			break;
; 7304 : 	}
; 7305 : 	//added : 06-02-98: now draw a textbox around the message
; 7306 : 	// compute lenght max and the numbers of lines
; 7307 : 	for (strlines = 0; *(message+start); strlines++)

  0016c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _strlines$[ebp], 0
  00173	eb 09		 jmp	 SHORT $LN6@M_StartMes
$LN4@M_StartMes:
  00175	8b 45 f0	 mov	 eax, DWORD PTR _strlines$[ebp]
  00178	83 c0 01	 add	 eax, 1
  0017b	89 45 f0	 mov	 DWORD PTR _strlines$[ebp], eax
$LN6@M_StartMes:
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?message@?1??M_StartMessage@@9@9
  00183	03 45 f8	 add	 eax, DWORD PTR _start$[ebp]
  00186	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00189	85 c9		 test	 ecx, ecx
  0018b	0f 84 8b 00 00
	00		 je	 $LN5@M_StartMes

; 7308 : 	{
; 7309 : 		for (i = 0;i < strlen(message+start);i++)

  00191	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00198	eb 09		 jmp	 SHORT $LN9@M_StartMes
$LN7@M_StartMes:
  0019a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0019d	83 c0 01	 add	 eax, 1
  001a0	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN9@M_StartMes:
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?message@?1??M_StartMessage@@9@9
  001a8	03 45 f8	 add	 eax, DWORD PTR _start$[ebp]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 _strlen
  001b1	83 c4 04	 add	 esp, 4
  001b4	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  001b7	73 3f		 jae	 SHORT $LN8@M_StartMes

; 7310 : 		{
; 7311 : 			if (*(message+start+i) == '\n')

  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?message@?1??M_StartMessage@@9@9
  001be	03 45 f8	 add	 eax, DWORD PTR _start$[ebp]
  001c1	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  001c4	0f be 14 08	 movsx	 edx, BYTE PTR [eax+ecx]
  001c8	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  001cb	75 29		 jne	 SHORT $LN17@M_StartMes

; 7312 : 			{
; 7313 : 				if (i > max)

  001cd	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001d0	3b 45 fc	 cmp	 eax, DWORD PTR _max$[ebp]
  001d3	76 06		 jbe	 SHORT $LN18@M_StartMes

; 7314 : 					max = i;

  001d5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001d8	89 45 fc	 mov	 DWORD PTR _max$[ebp], eax
$LN18@M_StartMes:

; 7315 : 				start += i;

  001db	8b 45 f8	 mov	 eax, DWORD PTR _start$[ebp]
  001de	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  001e1	89 45 f8	 mov	 DWORD PTR _start$[ebp], eax

; 7316 : 				i = (size_t)-1; //added : 07-02-98 : damned!

  001e4	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1

; 7317 : 				start++;

  001eb	8b 45 f8	 mov	 eax, DWORD PTR _start$[ebp]
  001ee	83 c0 01	 add	 eax, 1
  001f1	89 45 f8	 mov	 DWORD PTR _start$[ebp], eax

; 7318 : 				break;

  001f4	eb 02		 jmp	 SHORT $LN8@M_StartMes
$LN17@M_StartMes:

; 7319 : 			}
; 7320 : 		}

  001f6	eb a2		 jmp	 SHORT $LN7@M_StartMes
$LN8@M_StartMes:

; 7321 : 
; 7322 : 		if (i == strlen(message+start))

  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?message@?1??M_StartMessage@@9@9
  001fd	03 45 f8	 add	 eax, DWORD PTR _start$[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _strlen
  00206	83 c4 04	 add	 esp, 4
  00209	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  0020c	75 09		 jne	 SHORT $LN19@M_StartMes

; 7323 : 			start += i;

  0020e	8b 45 f8	 mov	 eax, DWORD PTR _start$[ebp]
  00211	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  00214	89 45 f8	 mov	 DWORD PTR _start$[ebp], eax
$LN19@M_StartMes:

; 7324 : 	}

  00217	e9 59 ff ff ff	 jmp	 $LN4@M_StartMes
$LN5@M_StartMes:

; 7325 : 
; 7326 : 	MessageDef.x = (INT16)((BASEVIDWIDTH  - 8*max-16)/2);

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _max$[ebp]
  0021f	c1 e0 03	 shl	 eax, 3
  00222	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  00227	2b c8		 sub	 ecx, eax
  00229	83 e9 10	 sub	 ecx, 16			; 00000010H
  0022c	d1 e9		 shr	 ecx, 1
  0022e	66 89 0d 18 00
	00 00		 mov	 WORD PTR _MessageDef+24, cx

; 7327 : 	MessageDef.y = (INT16)((BASEVIDHEIGHT - M_StringHeight(message))/2);

  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR ?message@?1??M_StartMessage@@9@9
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 _M_StringHeight
  00240	83 c4 04	 add	 esp, 4
  00243	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00248	2b c8		 sub	 ecx, eax
  0024a	d1 e9		 shr	 ecx, 1
  0024c	66 89 0d 1a 00
	00 00		 mov	 WORD PTR _MessageDef+26, cx

; 7328 : 
; 7329 : 	MessageDef.lastOn = (INT16)((strlines<<8)+max);

  00253	8b 45 f0	 mov	 eax, DWORD PTR _strlines$[ebp]
  00256	c1 e0 08	 shl	 eax, 8
  00259	03 45 fc	 add	 eax, DWORD PTR _max$[ebp]
  0025c	66 a3 1c 00 00
	00		 mov	 WORD PTR _MessageDef+28, ax

; 7330 : 
; 7331 : 	//M_SetupNextMenu();
; 7332 : 	currentMenu = &MessageDef;

  00262	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _MessageDef

; 7333 : 	itemOn = 0;

  0026c	33 c0		 xor	 eax, eax
  0026e	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax

; 7334 : }

  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx
  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c3		 ret	 0
_M_StartMessage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_SwitchSplitscreen
_TEXT	SEGMENT
_M_SwitchSplitscreen PROC				; COMDAT

; 3106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3107 : // activate setup for player 2
; 3108 : 	if (splitscreen)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00010	74 16		 je	 SHORT $LN2@M_SwitchSp

; 3109 : 		MultiPlayerMenu[setupplayer2].status = IT_CALL | IT_STRING;

  00012	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00017	6b c8 07	 imul	 ecx, eax, 7
  0001a	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0001f	66 89 91 00 00
	00 00		 mov	 WORD PTR _MultiPlayerMenu[ecx], dx
  00026	eb 14		 jmp	 SHORT $LN3@M_SwitchSp
$LN2@M_SwitchSp:

; 3110 : 	else
; 3111 : 		MultiPlayerMenu[setupplayer2].status = IT_DISABLED;

  00028	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0002d	6b c8 07	 imul	 ecx, eax, 7
  00030	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00035	66 89 91 00 00
	00 00		 mov	 WORD PTR _MultiPlayerMenu[ecx], dx
$LN3@M_SwitchSp:

; 3112 : 
; 3113 : 	if (MultiPlayerDef.lastOn == setupplayer2)

  0003c	0f bf 05 1c 00
	00 00		 movsx	 eax, WORD PTR _MultiPlayerDef+28
  00043	83 f8 07	 cmp	 eax, 7
  00046	75 0b		 jne	 SHORT $LN4@M_SwitchSp

; 3114 : 		MultiPlayerDef.lastOn = setupplayer1;

  00048	b8 06 00 00 00	 mov	 eax, 6
  0004d	66 a3 1c 00 00
	00		 mov	 WORD PTR _MultiPlayerDef+28, ax
$LN4@M_SwitchSp:

; 3115 : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_M_SwitchSplitscreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_DrawTextBox
_TEXT	SEGMENT
_boff$ = -24						; size = 4
_step$ = -20						; size = 4
_n$ = -16						; size = 4
_cy$ = -12						; size = 4
_cx$ = -8						; size = 4
_p$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_boxlines$ = 20						; size = 4
_M_DrawTextBox PROC					; COMDAT

; 7204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7205 : 	patch_t *p;
; 7206 : 	INT32 cx = x, cy = y, n;

  00009	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _cx$[ebp], eax
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00012	89 45 f4	 mov	 DWORD PTR _cy$[ebp], eax

; 7207 : 	INT32 step = 8, boff = 8;

  00015	c7 45 ec 08 00
	00 00		 mov	 DWORD PTR _step$[ebp], 8
  0001c	c7 45 e8 08 00
	00 00		 mov	 DWORD PTR _boff$[ebp], 8

; 7208 : 
; 7209 : 	// draw left side
; 7210 : 	V_DrawScaledPatch(cx, cy, 0, W_CachePatchNum(viewborderlump[BRDR_TL], PU_CACHE));

  00023	6a 65		 push	 101			; 00000065H
  00025	b8 04 00 00 00	 mov	 eax, 4
  0002a	c1 e0 02	 shl	 eax, 2
  0002d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _viewborderlump[eax]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _W_CachePatchNum
  00039	83 c4 08	 add	 esp, 8
  0003c	50		 push	 eax
  0003d	6a 00		 push	 0
  0003f	8b 55 f4	 mov	 edx, DWORD PTR _cy$[ebp]
  00042	52		 push	 edx
  00043	8b 45 f8	 mov	 eax, DWORD PTR _cx$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 7211 : 	cy += boff;

  0004f	8b 45 f4	 mov	 eax, DWORD PTR _cy$[ebp]
  00052	03 45 e8	 add	 eax, DWORD PTR _boff$[ebp]
  00055	89 45 f4	 mov	 DWORD PTR _cy$[ebp], eax

; 7212 : 	p = W_CachePatchNum(viewborderlump[BRDR_L], PU_CACHE);

  00058	6a 65		 push	 101			; 00000065H
  0005a	b8 04 00 00 00	 mov	 eax, 4
  0005f	d1 e0		 shl	 eax, 1
  00061	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _viewborderlump[eax]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 _W_CachePatchNum
  0006d	83 c4 08	 add	 esp, 8
  00070	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 7213 : 	for (n = 0; n < boxlines; n++)

  00073	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0007a	eb 09		 jmp	 SHORT $LN4@M_DrawText
$LN2@M_DrawText:
  0007c	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0007f	83 c0 01	 add	 eax, 1
  00082	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax
$LN4@M_DrawText:
  00085	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00088	3b 45 14	 cmp	 eax, DWORD PTR _boxlines$[ebp]
  0008b	7d 24		 jge	 SHORT $LN3@M_DrawText

; 7214 : 	{
; 7215 : 		V_DrawScaledPatch(cx, cy, V_WRAPY, p);

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00090	50		 push	 eax
  00091	68 00 00 02 00	 push	 131072			; 00020000H
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _cy$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 f8	 mov	 edx, DWORD PTR _cx$[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000a3	83 c4 10	 add	 esp, 16			; 00000010H

; 7216 : 		cy += step;

  000a6	8b 45 f4	 mov	 eax, DWORD PTR _cy$[ebp]
  000a9	03 45 ec	 add	 eax, DWORD PTR _step$[ebp]
  000ac	89 45 f4	 mov	 DWORD PTR _cy$[ebp], eax

; 7217 : 	}

  000af	eb cb		 jmp	 SHORT $LN2@M_DrawText
$LN3@M_DrawText:

; 7218 : 	V_DrawScaledPatch(cx, cy, 0, W_CachePatchNum(viewborderlump[BRDR_BL], PU_CACHE));

  000b1	6a 65		 push	 101			; 00000065H
  000b3	b8 04 00 00 00	 mov	 eax, 4
  000b8	6b c8 06	 imul	 ecx, eax, 6
  000bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _viewborderlump[ecx]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 _W_CachePatchNum
  000c7	83 c4 08	 add	 esp, 8
  000ca	50		 push	 eax
  000cb	6a 00		 push	 0
  000cd	8b 45 f4	 mov	 eax, DWORD PTR _cy$[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d f8	 mov	 ecx, DWORD PTR _cx$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  000da	83 c4 10	 add	 esp, 16			; 00000010H

; 7219 : 
; 7220 : 	// draw middle
; 7221 : 	V_DrawFlatFill(x + boff, y + boff, width*step, boxlines*step, st_borderpatchnum);

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _st_borderpatchnum
  000e2	50		 push	 eax
  000e3	8b 4d 14	 mov	 ecx, DWORD PTR _boxlines$[ebp]
  000e6	0f af 4d ec	 imul	 ecx, DWORD PTR _step$[ebp]
  000ea	51		 push	 ecx
  000eb	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  000ee	0f af 55 ec	 imul	 edx, DWORD PTR _step$[ebp]
  000f2	52		 push	 edx
  000f3	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000f6	03 45 e8	 add	 eax, DWORD PTR _boff$[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000fd	03 4d e8	 add	 ecx, DWORD PTR _boff$[ebp]
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 _V_DrawFlatFill
  00106	83 c4 14	 add	 esp, 20			; 00000014H

; 7222 : 
; 7223 : 	cx += boff;

  00109	8b 45 f8	 mov	 eax, DWORD PTR _cx$[ebp]
  0010c	03 45 e8	 add	 eax, DWORD PTR _boff$[ebp]
  0010f	89 45 f8	 mov	 DWORD PTR _cx$[ebp], eax

; 7224 : 	cy = y;

  00112	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00115	89 45 f4	 mov	 DWORD PTR _cy$[ebp], eax
$LN5@M_DrawText:

; 7225 : 	while (width > 0)

  00118	83 7d 10 00	 cmp	 DWORD PTR _width$[ebp], 0
  0011c	0f 8e 81 00 00
	00		 jle	 $LN6@M_DrawText

; 7226 : 	{
; 7227 : 		V_DrawScaledPatch(cx, cy, V_WRAPX, W_CachePatchNum(viewborderlump[BRDR_T], PU_CACHE));

  00122	6a 65		 push	 101			; 00000065H
  00124	b8 04 00 00 00	 mov	 eax, 4
  00129	6b c8 00	 imul	 ecx, eax, 0
  0012c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _viewborderlump[ecx]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 _W_CachePatchNum
  00138	83 c4 08	 add	 esp, 8
  0013b	50		 push	 eax
  0013c	68 00 00 00 01	 push	 16777216		; 01000000H
  00141	8b 45 f4	 mov	 eax, DWORD PTR _cy$[ebp]
  00144	50		 push	 eax
  00145	8b 4d f8	 mov	 ecx, DWORD PTR _cx$[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0014e	83 c4 10	 add	 esp, 16			; 00000010H

; 7228 : 		V_DrawScaledPatch(cx, y + boff + boxlines*step, V_WRAPX, W_CachePatchNum(viewborderlump[BRDR_B], PU_CACHE));

  00151	6a 65		 push	 101			; 00000065H
  00153	b8 04 00 00 00	 mov	 eax, 4
  00158	c1 e0 00	 shl	 eax, 0
  0015b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _viewborderlump[eax]
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 _W_CachePatchNum
  00167	83 c4 08	 add	 esp, 8
  0016a	50		 push	 eax
  0016b	68 00 00 00 01	 push	 16777216		; 01000000H
  00170	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00173	03 55 e8	 add	 edx, DWORD PTR _boff$[ebp]
  00176	8b 45 14	 mov	 eax, DWORD PTR _boxlines$[ebp]
  00179	0f af 45 ec	 imul	 eax, DWORD PTR _step$[ebp]
  0017d	03 d0		 add	 edx, eax
  0017f	52		 push	 edx
  00180	8b 4d f8	 mov	 ecx, DWORD PTR _cx$[ebp]
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00189	83 c4 10	 add	 esp, 16			; 00000010H

; 7229 : 		width--;

  0018c	8b 45 10	 mov	 eax, DWORD PTR _width$[ebp]
  0018f	83 e8 01	 sub	 eax, 1
  00192	89 45 10	 mov	 DWORD PTR _width$[ebp], eax

; 7230 : 		cx += step;

  00195	8b 45 f8	 mov	 eax, DWORD PTR _cx$[ebp]
  00198	03 45 ec	 add	 eax, DWORD PTR _step$[ebp]
  0019b	89 45 f8	 mov	 DWORD PTR _cx$[ebp], eax

; 7231 : 	}

  0019e	e9 75 ff ff ff	 jmp	 $LN5@M_DrawText
$LN6@M_DrawText:

; 7232 : 
; 7233 : 	// draw right side
; 7234 : 	cy = y;

  001a3	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  001a6	89 45 f4	 mov	 DWORD PTR _cy$[ebp], eax

; 7235 : 	V_DrawScaledPatch(cx, cy, 0, W_CachePatchNum(viewborderlump[BRDR_TR], PU_CACHE));

  001a9	6a 65		 push	 101			; 00000065H
  001ab	b8 04 00 00 00	 mov	 eax, 4
  001b0	6b c8 05	 imul	 ecx, eax, 5
  001b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _viewborderlump[ecx]
  001b9	52		 push	 edx
  001ba	e8 00 00 00 00	 call	 _W_CachePatchNum
  001bf	83 c4 08	 add	 esp, 8
  001c2	50		 push	 eax
  001c3	6a 00		 push	 0
  001c5	8b 45 f4	 mov	 eax, DWORD PTR _cy$[ebp]
  001c8	50		 push	 eax
  001c9	8b 4d f8	 mov	 ecx, DWORD PTR _cx$[ebp]
  001cc	51		 push	 ecx
  001cd	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  001d2	83 c4 10	 add	 esp, 16			; 00000010H

; 7236 : 	cy += boff;

  001d5	8b 45 f4	 mov	 eax, DWORD PTR _cy$[ebp]
  001d8	03 45 e8	 add	 eax, DWORD PTR _boff$[ebp]
  001db	89 45 f4	 mov	 DWORD PTR _cy$[ebp], eax

; 7237 : 	p = W_CachePatchNum(viewborderlump[BRDR_R], PU_CACHE);

  001de	6a 65		 push	 101			; 00000065H
  001e0	b8 04 00 00 00	 mov	 eax, 4
  001e5	6b c8 03	 imul	 ecx, eax, 3
  001e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _viewborderlump[ecx]
  001ee	52		 push	 edx
  001ef	e8 00 00 00 00	 call	 _W_CachePatchNum
  001f4	83 c4 08	 add	 esp, 8
  001f7	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 7238 : 	for (n = 0; n < boxlines; n++)

  001fa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00201	eb 09		 jmp	 SHORT $LN9@M_DrawText
$LN7@M_DrawText:
  00203	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00206	83 c0 01	 add	 eax, 1
  00209	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax
$LN9@M_DrawText:
  0020c	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0020f	3b 45 14	 cmp	 eax, DWORD PTR _boxlines$[ebp]
  00212	7d 24		 jge	 SHORT $LN8@M_DrawText

; 7239 : 	{
; 7240 : 		V_DrawScaledPatch(cx, cy, V_WRAPY, p);

  00214	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00217	50		 push	 eax
  00218	68 00 00 02 00	 push	 131072			; 00020000H
  0021d	8b 4d f4	 mov	 ecx, DWORD PTR _cy$[ebp]
  00220	51		 push	 ecx
  00221	8b 55 f8	 mov	 edx, DWORD PTR _cx$[ebp]
  00224	52		 push	 edx
  00225	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  0022a	83 c4 10	 add	 esp, 16			; 00000010H

; 7241 : 		cy += step;

  0022d	8b 45 f4	 mov	 eax, DWORD PTR _cy$[ebp]
  00230	03 45 ec	 add	 eax, DWORD PTR _step$[ebp]
  00233	89 45 f4	 mov	 DWORD PTR _cy$[ebp], eax

; 7242 : 	}

  00236	eb cb		 jmp	 SHORT $LN7@M_DrawText
$LN8@M_DrawText:

; 7243 : 	V_DrawScaledPatch(cx, cy, 0, W_CachePatchNum(viewborderlump[BRDR_BR], PU_CACHE));

  00238	6a 65		 push	 101			; 00000065H
  0023a	b8 04 00 00 00	 mov	 eax, 4
  0023f	6b c8 07	 imul	 ecx, eax, 7
  00242	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _viewborderlump[ecx]
  00248	52		 push	 edx
  00249	e8 00 00 00 00	 call	 _W_CachePatchNum
  0024e	83 c4 08	 add	 esp, 8
  00251	50		 push	 eax
  00252	6a 00		 push	 0
  00254	8b 45 f4	 mov	 eax, DWORD PTR _cy$[ebp]
  00257	50		 push	 eax
  00258	8b 4d f8	 mov	 ecx, DWORD PTR _cx$[ebp]
  0025b	51		 push	 ecx
  0025c	e8 00 00 00 00	 call	 _V_DrawScaledPatch
  00261	83 c4 10	 add	 esp, 16			; 00000010H

; 7244 : }

  00264	5f		 pop	 edi
  00265	5e		 pop	 esi
  00266	5b		 pop	 ebx
  00267	8b e5		 mov	 esp, ebp
  00269	5d		 pop	 ebp
  0026a	c3		 ret	 0
_M_DrawTextBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_StartControlPanel
_TEXT	SEGMENT
_M_StartControlPanel PROC				; COMDAT

; 7968 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7969 : 	// intro might call this repeatedly
; 7970 : 	if (menuactive)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00010	74 0b		 je	 SHORT $LN2@M_StartCon

; 7971 : 	{
; 7972 : 		CON_ToggleOff(); // move away console

  00012	e8 00 00 00 00	 call	 _CON_ToggleOff
  00017	90		 npad	 1

; 7973 : 		return;

  00018	e9 86 02 00 00	 jmp	 $LN21@M_StartCon
$LN2@M_StartCon:

; 7974 : 	}
; 7975 : 
; 7976 : 	menuactive = true;

  0001d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _menuactive, 1

; 7977 : 
; 7978 : 	if (!(netgame || multiplayer) || !Playing()
; 7979 : 		|| !(server || adminplayer == consoleplayer))

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0002e	75 09		 jne	 SHORT $LN6@M_StartCon
  00030	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00037	74 1f		 je	 SHORT $LN5@M_StartCon
$LN6@M_StartCon:
  00039	e8 00 00 00 00	 call	 _Playing
  0003e	85 c0		 test	 eax, eax
  00040	74 16		 je	 SHORT $LN5@M_StartCon
  00042	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00049	75 37		 jne	 SHORT $LN3@M_StartCon
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00050	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00056	74 2a		 je	 SHORT $LN3@M_StartCon
$LN5@M_StartCon:

; 7980 : 	{
; 7981 : 		MainMenu[switchmap].status = IT_DISABLED;

  00058	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0005d	6b c8 03	 imul	 ecx, eax, 3
  00060	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00065	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx

; 7982 : 		MainMenu[scramble].status = IT_DISABLED;

  0006c	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00071	6b c8 00	 imul	 ecx, eax, 0
  00074	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00079	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx

; 7983 : 	}

  00080	eb 49		 jmp	 SHORT $LN7@M_StartCon
$LN3@M_StartCon:

; 7984 : 	else
; 7985 : 	{
; 7986 : 		MainMenu[switchmap].status = IT_STRING | IT_CALL;

  00082	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00087	6b c8 03	 imul	 ecx, eax, 3
  0008a	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0008f	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx

; 7987 : 
; 7988 : 		if((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  00096	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0009d	83 f8 01	 cmp	 eax, 1
  000a0	75 09		 jne	 SHORT $LN9@M_StartCon
  000a2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  000a9	75 0c		 jne	 SHORT $LN8@M_StartCon
$LN9@M_StartCon:
  000ab	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000b2	83 f8 04	 cmp	 eax, 4
  000b5	75 14		 jne	 SHORT $LN7@M_StartCon
$LN8@M_StartCon:

; 7989 : 			MainMenu[scramble].status = IT_STRING | IT_CALL;

  000b7	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000bc	6b c8 00	 imul	 ecx, eax, 0
  000bf	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000c4	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx
$LN7@M_StartCon:

; 7990 : 	}
; 7991 : 
; 7992 : 	if (!(gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF) || splitscreen)

  000cb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000d2	83 f8 01	 cmp	 eax, 1
  000d5	74 18		 je	 SHORT $LN13@M_StartCon
  000d7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000de	83 f8 03	 cmp	 eax, 3
  000e1	74 0c		 je	 SHORT $LN13@M_StartCon
  000e3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000ea	83 f8 04	 cmp	 eax, 4
  000ed	75 09		 jne	 SHORT $LN12@M_StartCon
$LN13@M_StartCon:
  000ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000f6	74 3d		 je	 SHORT $LN10@M_StartCon
$LN12@M_StartCon:

; 7993 : 	{
; 7994 : 		MainMenu[spectate].status = IT_DISABLED;

  000f8	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000fd	c1 e0 00	 shl	 eax, 0
  00100	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00105	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 7995 : 		MainMenu[switchteam].status = IT_DISABLED;

  0010c	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00111	d1 e0		 shl	 eax, 1
  00113	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00118	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 7996 : 		MainMenu[scramble].status = IT_DISABLED;

  0011f	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00124	6b c8 00	 imul	 ecx, eax, 0
  00127	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  0012c	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx

; 7997 : 	}

  00133	eb 71		 jmp	 SHORT $LN15@M_StartCon
$LN10@M_StartCon:

; 7998 : 	else if ((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  00135	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0013c	83 f8 01	 cmp	 eax, 1
  0013f	75 09		 jne	 SHORT $LN17@M_StartCon
  00141	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00148	75 0c		 jne	 SHORT $LN16@M_StartCon
$LN17@M_StartCon:
  0014a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00151	83 f8 04	 cmp	 eax, 4
  00154	75 29		 jne	 SHORT $LN14@M_StartCon
$LN16@M_StartCon:

; 7999 : 	{
; 8000 : 		MainMenu[spectate].status = IT_DISABLED;

  00156	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0015b	c1 e0 00	 shl	 eax, 0
  0015e	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00163	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 8001 : 		MainMenu[switchteam].status = IT_STRING | IT_CALL;

  0016a	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0016f	d1 e0		 shl	 eax, 1
  00171	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00176	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 8002 : 	}

  0017d	eb 27		 jmp	 SHORT $LN15@M_StartCon
$LN14@M_StartCon:

; 8003 : 	else
; 8004 : 	{
; 8005 : 		MainMenu[spectate].status = IT_STRING | IT_CALL;

  0017f	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00184	c1 e0 00	 shl	 eax, 0
  00187	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0018c	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 8006 : 		MainMenu[switchteam].status = IT_DISABLED;

  00193	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00198	d1 e0		 shl	 eax, 1
  0019a	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0019f	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx
$LN15@M_StartCon:

; 8007 : 	}
; 8008 : 
; 8009 : 	MainMenu[secrets].status = IT_DISABLED;

  001a6	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  001ab	c1 e0 02	 shl	 eax, 2
  001ae	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  001b3	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 8010 : 
; 8011 : 	// Check for the ??? menu
; 8012 : 	if (grade > 0)

  001ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _grade, 0
  001c1	76 14		 jbe	 SHORT $LN18@M_StartCon

; 8013 : 		MainMenu[secrets].status = IT_STRING | IT_CALL;

  001c3	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  001c8	c1 e0 02	 shl	 eax, 2
  001cb	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  001d0	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx
$LN18@M_StartCon:

; 8014 : 
; 8015 : 	if (savemoddata)

  001d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  001de	74 14		 je	 SHORT $LN19@M_StartCon

; 8016 : 		MainMenu[secrets].itemaction = M_CustomSecretsMenu;

  001e0	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  001e5	c1 e0 02	 shl	 eax, 2
  001e8	c7 80 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _MainMenu[eax+12], OFFSET _M_CustomSecretsMenu
  001f2	eb 12		 jmp	 SHORT $LN20@M_StartCon
$LN19@M_StartCon:

; 8017 : 	else
; 8018 : 		MainMenu[secrets].itemaction = M_SecretsMenu;

  001f4	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  001f9	c1 e0 02	 shl	 eax, 2
  001fc	c7 80 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _MainMenu[eax+12], OFFSET _M_SecretsMenu
$LN20@M_StartCon:

; 8019 : 
; 8020 : 	currentMenu = &MainDef;

  00206	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _MainDef

; 8021 : 	itemOn = singleplr;

  00210	b8 05 00 00 00	 mov	 eax, 5
  00215	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax

; 8022 : 
; 8023 : 	CON_ToggleOff(); // move away console

  0021b	e8 00 00 00 00	 call	 _CON_ToggleOff
  00220	90		 npad	 1

; 8024 : 
; 8025 : 	if (timeattacking) // Cancel recording

  00221	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  00228	74 79		 je	 SHORT $LN21@M_StartCon

; 8026 : 	{
; 8027 : 		G_CheckDemoStatus();

  0022a	e8 00 00 00 00	 call	 _G_CheckDemoStatus
  0022f	90		 npad	 1

; 8028 : 
; 8029 : 		if (gamestate == GS_LEVEL || gamestate == GS_INTERMISSION)

  00230	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00237	74 09		 je	 SHORT $LN23@M_StartCon
  00239	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00240	75 06		 jne	 SHORT $LN22@M_StartCon
$LN23@M_StartCon:

; 8030 : 			Command_ExitGame_f();

  00242	e8 00 00 00 00	 call	 _Command_ExitGame_f
  00247	90		 npad	 1
$LN22@M_StartCon:

; 8031 : 
; 8032 : 		currentMenu = &TimeAttackDef;

  00248	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _TimeAttackDef

; 8033 : 		itemOn = currentMenu->lastOn;

  00252	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00257	66 8b 48 1c	 mov	 cx, WORD PTR [eax+28]
  0025b	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx

; 8034 : 		timeattacking = false;

  00262	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timeattacking, 0

; 8035 : 		G_SetGamestate(GS_TIMEATTACK);

  0026c	6a 0b		 push	 11			; 0000000bH
  0026e	e8 00 00 00 00	 call	 _G_SetGamestate
  00273	83 c4 04	 add	 esp, 4

; 8036 : 		S_ChangeMusic(mus_racent, true);

  00276	6a 01		 push	 1
  00278	68 19 04 00 00	 push	 1049			; 00000419H
  0027d	e8 00 00 00 00	 call	 _S_ChangeMusic
  00282	83 c4 08	 add	 esp, 8

; 8037 : 		CV_AddValue(&cv_nextmap, 1);

  00285	6a 01		 push	 1
  00287	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  0028c	e8 00 00 00 00	 call	 _CV_AddValue
  00291	83 c4 08	 add	 esp, 8

; 8038 : 		CV_AddValue(&cv_nextmap, -1);

  00294	6a ff		 push	 -1
  00296	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  0029b	e8 00 00 00 00	 call	 _CV_AddValue
  002a0	83 c4 08	 add	 esp, 8
$LN21@M_StartCon:

; 8039 : 		return;
; 8040 : 	}
; 8041 : }

  002a3	5f		 pop	 edi
  002a4	5e		 pop	 esi
  002a5	5b		 pop	 ebx
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c3		 ret	 0
_M_StartControlPanel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Init
_TEXT	SEGMENT
_M_Init	PROC						; COMDAT

; 8120 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8121 : 	CV_RegisterVar(&cv_nextmap);

  00009	68 00 00 00 00	 push	 OFFSET _cv_nextmap
  0000e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00013	83 c4 04	 add	 esp, 4

; 8122 : 	CV_RegisterVar(&cv_newgametype);

  00016	68 00 00 00 00	 push	 OFFSET _cv_newgametype
  0001b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00020	83 c4 04	 add	 esp, 4

; 8123 : 	CV_RegisterVar(&cv_chooseskin);

  00023	68 00 00 00 00	 push	 OFFSET _cv_chooseskin
  00028	e8 00 00 00 00	 call	 _CV_RegisterVar
  0002d	83 c4 04	 add	 esp, 4

; 8124 : 
; 8125 : 	if (dedicated)

  00030	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00037	74 02		 je	 SHORT $LN2@M_Init

; 8126 : 		return;

  00039	eb 46		 jmp	 SHORT $LN1@M_Init
$LN2@M_Init:

; 8127 : 
; 8128 : 	// This is used because DOOM 2 had only one HELP
; 8129 : 	//  page. I use CREDIT as second page now, but
; 8130 : 	//  kept this hack for educational purposes.
; 8131 : 	ReadMenu1[0].itemaction = &MainDef;

  0003b	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00040	6b c8 00	 imul	 ecx, eax, 0
  00043	c7 81 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _ReadMenu1[ecx+12], OFFSET _MainDef

; 8132 : 
; 8133 : #ifndef NONET
; 8134 : 	CV_RegisterVar(&cv_serversearch);

  0004d	68 00 00 00 00	 push	 OFFSET _cv_serversearch
  00052	e8 00 00 00 00	 call	 _CV_RegisterVar
  00057	83 c4 04	 add	 esp, 4

; 8135 : 	CV_RegisterVar(&cv_serversort);

  0005a	68 00 00 00 00	 push	 OFFSET _cv_serversort
  0005f	e8 00 00 00 00	 call	 _CV_RegisterVar
  00064	83 c4 04	 add	 esp, 4

; 8136 : 	CV_RegisterVar(&cv_chooseroom);

  00067	68 00 00 00 00	 push	 OFFSET _cv_chooseroom
  0006c	e8 00 00 00 00	 call	 _CV_RegisterVar
  00071	83 c4 04	 add	 esp, 4

; 8137 : #endif
; 8138 : 	//todo put this somewhere better...
; 8139 : 	CV_RegisterVar(&cv_allcaps);

  00074	68 00 00 00 00	 push	 OFFSET _cv_allcaps
  00079	e8 00 00 00 00	 call	 _CV_RegisterVar
  0007e	83 c4 04	 add	 esp, 4
$LN1@M_Init:

; 8140 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_M_Init	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Drawer
_TEXT	SEGMENT
_M_Drawer PROC						; COMDAT

; 7943 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7944 : 	if (currentMenu == &MessageDef)

  00009	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _MessageDef
  00013	75 0a		 jne	 SHORT $LN2@M_Drawer

; 7945 : 		menuactive = true;

  00015	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _menuactive, 1
$LN2@M_Drawer:

; 7946 : 
; 7947 : 	if (!menuactive)

  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00026	75 02		 jne	 SHORT $LN3@M_Drawer

; 7948 : 		return;

  00028	eb 6c		 jmp	 SHORT $LN7@M_Drawer
$LN3@M_Drawer:

; 7949 : 
; 7950 : 	// now that's more readable with a faded background (yeah like Quake...)
; 7951 : 	if (!WipeInAction)

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _WipeInAction, 0
  00031	75 06		 jne	 SHORT $LN4@M_Drawer

; 7952 : 		V_DrawFadeScreen();

  00033	e8 00 00 00 00	 call	 _V_DrawFadeScreen
  00038	90		 npad	 1
$LN4@M_Drawer:

; 7953 : 
; 7954 : 	if (currentMenu->drawroutine)

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  0003e	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00042	74 0b		 je	 SHORT $LN5@M_Drawer

; 7955 : 		currentMenu->drawroutine(); // call current menu Draw routine

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00049	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004c	ff d1		 call	 ecx
  0004e	90		 npad	 1
$LN5@M_Drawer:

; 7956 : 
; 7957 : 	// Draw version down in corner
; 7958 : 	if (customversionstring[0] != '\0')

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	6b c8 00	 imul	 ecx, eax, 0
  00057	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR _customversionstring[ecx]
  0005e	85 d2		 test	 edx, edx
  00060	74 1b		 je	 SHORT $LN6@M_Drawer

; 7959 : 		V_DrawString(0, BASEVIDHEIGHT - 8, V_TRANSLUCENT, customversionstring);

  00062	68 00 00 00 00	 push	 OFFSET _customversionstring
  00067	68 00 00 40 00	 push	 4194304			; 00400000H
  0006c	68 c0 00 00 00	 push	 192			; 000000c0H
  00071	6a 00		 push	 0
  00073	e8 00 00 00 00	 call	 _V_DrawString
  00078	83 c4 10	 add	 esp, 16			; 00000010H
  0007b	eb 19		 jmp	 SHORT $LN7@M_Drawer
$LN6@M_Drawer:

; 7960 : 	else
; 7961 : 		V_DrawString(0, BASEVIDHEIGHT - 8, V_TRANSLUCENT, VERSIONSTRING);

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_07IJKPKDGN@?5v2?40?47@
  00082	68 00 00 40 00	 push	 4194304			; 00400000H
  00087	68 c0 00 00 00	 push	 192			; 000000c0H
  0008c	6a 00		 push	 0
  0008e	e8 00 00 00 00	 call	 _V_DrawString
  00093	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@M_Drawer:

; 7962 : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_M_Drawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Ticker
_TEXT	SEGMENT
_M_Ticker PROC						; COMDAT

; 8100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8101 : 	if (dedicated)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00010	74 02		 je	 SHORT $LN2@M_Ticker

; 8102 : 		return;

  00012	eb 4b		 jmp	 SHORT $LN5@M_Ticker
$LN2@M_Ticker:

; 8103 : 
; 8104 : 	if (--skullAnimCounter <= 0)

  00014	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _skullAnimCounter
  0001a	66 83 e8 01	 sub	 ax, 1
  0001e	66 a3 00 00 00
	00		 mov	 WORD PTR _skullAnimCounter, ax
  00024	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _skullAnimCounter
  0002b	85 c9		 test	 ecx, ecx
  0002d	7f 0b		 jg	 SHORT $LN3@M_Ticker

; 8105 : 		skullAnimCounter = 8 * NEWTICRATERATIO;

  0002f	b8 08 00 00 00	 mov	 eax, 8
  00034	66 a3 00 00 00
	00		 mov	 WORD PTR _skullAnimCounter, ax
$LN3@M_Ticker:

; 8106 : 
; 8107 : 	//added : 30-01-98 : test mode for five seconds
; 8108 : 	if (vidm_testingmode > 0)

  0003a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _vidm_testingmode, 0
  00041	7e 1c		 jle	 SHORT $LN5@M_Ticker

; 8109 : 	{
; 8110 : 		// restore the previous video mode
; 8111 : 		if (--vidm_testingmode == 0)

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_testingmode
  00048	83 e8 01	 sub	 eax, 1
  0004b	a3 00 00 00 00	 mov	 DWORD PTR _vidm_testingmode, eax
  00050	75 0d		 jne	 SHORT $LN5@M_Ticker

; 8112 : 			setmodeneeded = vidm_previousmode + 1;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR _vidm_previousmode
  00057	83 c0 01	 add	 eax, 1
  0005a	a3 00 00 00 00	 mov	 DWORD PTR _setmodeneeded, eax
$LN5@M_Ticker:

; 8113 : 	}
; 8114 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_M_Ticker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_menu.c
;	COMDAT _M_Responder
_TEXT	SEGMENT
tv77 = -80						; size = 4
tv166 = -80						; size = 4
tv260 = -80						; size = 4
tv346 = -80						; size = 4
_otherroutine$1 = -12					; size = 4
_routine$ = -8						; size = 4
_ch$ = -4						; size = 4
_ev$ = 8						; size = 4
_M_Responder PROC					; COMDAT

; 7482 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7483 : 	INT32 ch = -1;

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ch$[ebp], -1

; 7484 : //	INT32 i;
; 7485 : 	static tic_t joywait = 0, mousewait = 0;
; 7486 : 	static boolean shiftdown = false;
; 7487 : 	static INT32 pmousex = 0, pmousey = 0;
; 7488 : 	static INT32 lastx = 0, lasty = 0;
; 7489 : 	void (*routine)(INT32 choice); // for some casting problem
; 7490 : 
; 7491 : 	if (dedicated || gamestate == GS_INTRO || gamestate == GS_INTRO2 || gamestate == GS_CUTSCENE)

  00010	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00017	75 1b		 jne	 SHORT $LN17@M_Responde
  00019	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _gamestate, 5
  00020	74 12		 je	 SHORT $LN17@M_Responde
  00022	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _gamestate, 6
  00029	74 09		 je	 SHORT $LN17@M_Responde
  0002b	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _gamestate, 7
  00032	75 07		 jne	 SHORT $LN16@M_Responde
$LN17@M_Responde:

; 7492 : 		return false;

  00034	33 c0		 xor	 eax, eax
  00036	e9 e9 0c 00 00	 jmp	 $LN1@M_Responde
$LN16@M_Responde:

; 7493 : 
; 7494 : 	if (ev->type == ev_keyup && (ev->data1 == KEY_LSHIFT || ev->data1 == KEY_RSHIFT))

  0003b	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0003e	83 38 01	 cmp	 DWORD PTR [eax], 1
  00041	75 2e		 jne	 SHORT $LN18@M_Responde
  00043	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00046	81 78 04 b6 00
	00 00		 cmp	 DWORD PTR [eax+4], 182	; 000000b6H
  0004d	74 0c		 je	 SHORT $LN20@M_Responde
  0004f	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00052	81 78 04 b7 00
	00 00		 cmp	 DWORD PTR [eax+4], 183	; 000000b7H
  00059	75 16		 jne	 SHORT $LN18@M_Responde
$LN20@M_Responde:

; 7495 : 	{
; 7496 : 		shiftdown = false;

  0005b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?shiftdown@?1??M_Responder@@9@9, 0

; 7497 : 		return false;

  00065	33 c0		 xor	 eax, eax
  00067	e9 b8 0c 00 00	 jmp	 $LN1@M_Responde

; 7498 : 	}

  0006c	e9 75 02 00 00	 jmp	 $LN50@M_Responde
$LN18@M_Responde:

; 7499 : 	else if (ev->type == ev_keydown)

  00071	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00074	83 38 00	 cmp	 DWORD PTR [eax], 0
  00077	0f 85 80 00 00
	00		 jne	 $LN21@M_Responde

; 7500 : 	{
; 7501 : 		ch = ev->data1;

  0007d	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00080	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00083	89 4d fc	 mov	 DWORD PTR _ch$[ebp], ecx

; 7502 : 
; 7503 : 		// added 5-2-98 remap virtual keys (mouse & joystick buttons)
; 7504 : 		switch (ch)

  00086	8b 45 fc	 mov	 eax, DWORD PTR _ch$[ebp]
  00089	89 45 b0	 mov	 DWORD PTR tv77[ebp], eax
  0008c	8b 4d b0	 mov	 ecx, DWORD PTR tv77[ebp]
  0008f	81 e9 b6 00 00
	00		 sub	 ecx, 182		; 000000b6H
  00095	89 4d b0	 mov	 DWORD PTR tv77[ebp], ecx
  00098	83 7d b0 75	 cmp	 DWORD PTR tv77[ebp], 117 ; 00000075H
  0009c	77 5a		 ja	 SHORT $LN2@M_Responde
  0009e	8b 55 b0	 mov	 edx, DWORD PTR tv77[ebp]
  000a1	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN146@M_Responde[edx]
  000a8	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN147@M_Responde[eax*4]
$LN23@M_Responde:

; 7505 : 		{
; 7506 : 			case KEY_LSHIFT:
; 7507 : 			case KEY_RSHIFT:
; 7508 : 				shiftdown = true;

  000af	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?shiftdown@?1??M_Responder@@9@9, 1

; 7509 : 				break; //return false;

  000b9	eb 3d		 jmp	 SHORT $LN2@M_Responde
$LN25@M_Responde:

; 7510 : 			case KEY_MOUSE1:
; 7511 : 			case KEY_JOY1:
; 7512 : 			case KEY_JOY1 + 2:
; 7513 : 				ch = KEY_ENTER;

  000bb	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 13	; 0000000dH

; 7514 : 				break;

  000c2	eb 34		 jmp	 SHORT $LN2@M_Responde
$LN28@M_Responde:

; 7515 : 			case KEY_JOY1 + 3:
; 7516 : 				ch = 'n';

  000c4	c7 45 fc 6e 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 110 ; 0000006eH

; 7517 : 				break;

  000cb	eb 2b		 jmp	 SHORT $LN2@M_Responde
$LN29@M_Responde:

; 7518 : 			case KEY_MOUSE1 + 1:
; 7519 : 			case KEY_JOY1 + 1:
; 7520 : 				ch = KEY_BACKSPACE;

  000cd	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 8

; 7521 : 				break;

  000d4	eb 22		 jmp	 SHORT $LN2@M_Responde
$LN31@M_Responde:

; 7522 : 			case KEY_HAT1:
; 7523 : 				ch = KEY_UPARROW;

  000d6	c7 45 fc e6 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 230 ; 000000e6H

; 7524 : 				break;

  000dd	eb 19		 jmp	 SHORT $LN2@M_Responde
$LN32@M_Responde:

; 7525 : 			case KEY_HAT1 + 1:
; 7526 : 				ch = KEY_DOWNARROW;

  000df	c7 45 fc ee 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 238 ; 000000eeH

; 7527 : 				break;

  000e6	eb 10		 jmp	 SHORT $LN2@M_Responde
$LN33@M_Responde:

; 7528 : 			case KEY_HAT1 + 2:
; 7529 : 				ch = KEY_LEFTARROW;

  000e8	c7 45 fc e9 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 233 ; 000000e9H

; 7530 : 				break;

  000ef	eb 07		 jmp	 SHORT $LN2@M_Responde
$LN34@M_Responde:

; 7531 : 			case KEY_HAT1 + 3:
; 7532 : 				ch = KEY_RIGHTARROW;

  000f1	c7 45 fc eb 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 235 ; 000000ebH
$LN2@M_Responde:

; 7533 : 				break;
; 7534 : 		}
; 7535 : 	}

  000f8	e9 e9 01 00 00	 jmp	 $LN50@M_Responde
$LN21@M_Responde:

; 7536 : 	else if (menuactive)

  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00104	0f 84 dc 01 00
	00		 je	 $LN50@M_Responde

; 7537 : 	{
; 7538 : 		if (ev->type == ev_joystick  && ev->data1 == 0 && joywait < I_GetTime())

  0010a	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0010d	83 38 04	 cmp	 DWORD PTR [eax], 4
  00110	0f 85 97 00 00
	00		 jne	 $LN36@M_Responde
  00116	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00119	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0011d	0f 85 8a 00 00
	00		 jne	 $LN36@M_Responde
  00123	e8 00 00 00 00	 call	 _I_GetTime
  00128	39 05 00 00 00
	00		 cmp	 DWORD PTR ?joywait@?1??M_Responder@@9@9, eax
  0012e	73 7d		 jae	 SHORT $LN36@M_Responde

; 7539 : 		{
; 7540 : 			if (ev->data3 == -1)

  00130	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00133	83 78 0c ff	 cmp	 DWORD PTR [eax+12], -1
  00137	75 16		 jne	 SHORT $LN38@M_Responde

; 7541 : 			{
; 7542 : 				ch = KEY_UPARROW;

  00139	c7 45 fc e6 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 230 ; 000000e6H

; 7543 : 				joywait = I_GetTime() + TICRATE/7;

  00140	e8 00 00 00 00	 call	 _I_GetTime
  00145	83 c0 05	 add	 eax, 5
  00148	a3 00 00 00 00	 mov	 DWORD PTR ?joywait@?1??M_Responder@@9@9, eax

; 7544 : 			}

  0014d	eb 1d		 jmp	 SHORT $LN40@M_Responde
$LN38@M_Responde:

; 7545 : 			else if (ev->data3 == 1)

  0014f	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00152	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00156	75 14		 jne	 SHORT $LN40@M_Responde

; 7546 : 			{
; 7547 : 				ch = KEY_DOWNARROW;

  00158	c7 45 fc ee 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 238 ; 000000eeH

; 7548 : 				joywait = I_GetTime() + TICRATE/7;

  0015f	e8 00 00 00 00	 call	 _I_GetTime
  00164	83 c0 05	 add	 eax, 5
  00167	a3 00 00 00 00	 mov	 DWORD PTR ?joywait@?1??M_Responder@@9@9, eax
$LN40@M_Responde:

; 7549 : 			}
; 7550 : 
; 7551 : 			if (ev->data2 == -1)

  0016c	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0016f	83 78 08 ff	 cmp	 DWORD PTR [eax+8], -1
  00173	75 16		 jne	 SHORT $LN41@M_Responde

; 7552 : 			{
; 7553 : 				ch = KEY_LEFTARROW;

  00175	c7 45 fc e9 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 233 ; 000000e9H

; 7554 : 				joywait = I_GetTime() + TICRATE/17;

  0017c	e8 00 00 00 00	 call	 _I_GetTime
  00181	83 c0 02	 add	 eax, 2
  00184	a3 00 00 00 00	 mov	 DWORD PTR ?joywait@?1??M_Responder@@9@9, eax

; 7555 : 			}

  00189	eb 1d		 jmp	 SHORT $LN43@M_Responde
$LN41@M_Responde:

; 7556 : 			else if (ev->data2 == 1)

  0018b	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0018e	83 78 08 01	 cmp	 DWORD PTR [eax+8], 1
  00192	75 14		 jne	 SHORT $LN43@M_Responde

; 7557 : 			{
; 7558 : 				ch = KEY_RIGHTARROW;

  00194	c7 45 fc eb 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 235 ; 000000ebH

; 7559 : 				joywait = I_GetTime() + TICRATE/17;

  0019b	e8 00 00 00 00	 call	 _I_GetTime
  001a0	83 c0 02	 add	 eax, 2
  001a3	a3 00 00 00 00	 mov	 DWORD PTR ?joywait@?1??M_Responder@@9@9, eax
$LN43@M_Responde:

; 7560 : 			}
; 7561 : 		}

  001a8	e9 39 01 00 00	 jmp	 $LN50@M_Responde
$LN36@M_Responde:

; 7562 : 		else if (ev->type == ev_mouse && mousewait < I_GetTime())

  001ad	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  001b0	83 38 03	 cmp	 DWORD PTR [eax], 3
  001b3	0f 85 2d 01 00
	00		 jne	 $LN50@M_Responde
  001b9	e8 00 00 00 00	 call	 _I_GetTime
  001be	39 05 00 00 00
	00		 cmp	 DWORD PTR ?mousewait@?1??M_Responder@@9@9, eax
  001c4	0f 83 1c 01 00
	00		 jae	 $LN50@M_Responde

; 7563 : 		{
; 7564 : 			pmousey += ev->data3;

  001ca	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  001cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pmousey@?1??M_Responder@@9@9
  001d3	03 48 0c	 add	 ecx, DWORD PTR [eax+12]
  001d6	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pmousey@?1??M_Responder@@9@9, ecx

; 7565 : 			if (pmousey < lasty-30)

  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lasty@?1??M_Responder@@9@9
  001e1	83 e8 1e	 sub	 eax, 30			; 0000001eH
  001e4	39 05 00 00 00
	00		 cmp	 DWORD PTR ?pmousey@?1??M_Responder@@9@9, eax
  001ea	7d 2f		 jge	 SHORT $LN45@M_Responde

; 7566 : 			{
; 7567 : 				ch = KEY_DOWNARROW;

  001ec	c7 45 fc ee 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 238 ; 000000eeH

; 7568 : 				mousewait = I_GetTime() + TICRATE/7;

  001f3	e8 00 00 00 00	 call	 _I_GetTime
  001f8	83 c0 05	 add	 eax, 5
  001fb	a3 00 00 00 00	 mov	 DWORD PTR ?mousewait@?1??M_Responder@@9@9, eax

; 7569 : 				pmousey = lasty -= 30;

  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lasty@?1??M_Responder@@9@9
  00205	83 e8 1e	 sub	 eax, 30			; 0000001eH
  00208	a3 00 00 00 00	 mov	 DWORD PTR ?lasty@?1??M_Responder@@9@9, eax
  0020d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lasty@?1??M_Responder@@9@9
  00213	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pmousey@?1??M_Responder@@9@9, ecx

; 7570 : 			}

  00219	eb 3d		 jmp	 SHORT $LN47@M_Responde
$LN45@M_Responde:

; 7571 : 			else if (pmousey > lasty + 30)

  0021b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lasty@?1??M_Responder@@9@9
  00220	83 c0 1e	 add	 eax, 30			; 0000001eH
  00223	39 05 00 00 00
	00		 cmp	 DWORD PTR ?pmousey@?1??M_Responder@@9@9, eax
  00229	7e 2d		 jle	 SHORT $LN47@M_Responde

; 7572 : 			{
; 7573 : 				ch = KEY_UPARROW;

  0022b	c7 45 fc e6 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 230 ; 000000e6H

; 7574 : 				mousewait = I_GetTime() + TICRATE/7;

  00232	e8 00 00 00 00	 call	 _I_GetTime
  00237	83 c0 05	 add	 eax, 5
  0023a	a3 00 00 00 00	 mov	 DWORD PTR ?mousewait@?1??M_Responder@@9@9, eax

; 7575 : 				pmousey = lasty += 30;

  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lasty@?1??M_Responder@@9@9
  00244	83 c0 1e	 add	 eax, 30			; 0000001eH
  00247	a3 00 00 00 00	 mov	 DWORD PTR ?lasty@?1??M_Responder@@9@9, eax
  0024c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lasty@?1??M_Responder@@9@9
  00252	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pmousey@?1??M_Responder@@9@9, ecx
$LN47@M_Responde:

; 7576 : 			}
; 7577 : 
; 7578 : 			pmousex += ev->data2;

  00258	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0025b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pmousex@?1??M_Responder@@9@9
  00261	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  00264	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pmousex@?1??M_Responder@@9@9, ecx

; 7579 : 			if (pmousex < lastx - 30)

  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lastx@?1??M_Responder@@9@9
  0026f	83 e8 1e	 sub	 eax, 30			; 0000001eH
  00272	39 05 00 00 00
	00		 cmp	 DWORD PTR ?pmousex@?1??M_Responder@@9@9, eax
  00278	7d 2f		 jge	 SHORT $LN48@M_Responde

; 7580 : 			{
; 7581 : 				ch = KEY_LEFTARROW;

  0027a	c7 45 fc e9 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 233 ; 000000e9H

; 7582 : 				mousewait = I_GetTime() + TICRATE/7;

  00281	e8 00 00 00 00	 call	 _I_GetTime
  00286	83 c0 05	 add	 eax, 5
  00289	a3 00 00 00 00	 mov	 DWORD PTR ?mousewait@?1??M_Responder@@9@9, eax

; 7583 : 				pmousex = lastx -= 30;

  0028e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lastx@?1??M_Responder@@9@9
  00293	83 e8 1e	 sub	 eax, 30			; 0000001eH
  00296	a3 00 00 00 00	 mov	 DWORD PTR ?lastx@?1??M_Responder@@9@9, eax
  0029b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lastx@?1??M_Responder@@9@9
  002a1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pmousex@?1??M_Responder@@9@9, ecx

; 7584 : 			}

  002a7	eb 3d		 jmp	 SHORT $LN50@M_Responde
$LN48@M_Responde:

; 7585 : 			else if (pmousex > lastx+30)

  002a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lastx@?1??M_Responder@@9@9
  002ae	83 c0 1e	 add	 eax, 30			; 0000001eH
  002b1	39 05 00 00 00
	00		 cmp	 DWORD PTR ?pmousex@?1??M_Responder@@9@9, eax
  002b7	7e 2d		 jle	 SHORT $LN50@M_Responde

; 7586 : 			{
; 7587 : 				ch = KEY_RIGHTARROW;

  002b9	c7 45 fc eb 00
	00 00		 mov	 DWORD PTR _ch$[ebp], 235 ; 000000ebH

; 7588 : 				mousewait = I_GetTime() + TICRATE/7;

  002c0	e8 00 00 00 00	 call	 _I_GetTime
  002c5	83 c0 05	 add	 eax, 5
  002c8	a3 00 00 00 00	 mov	 DWORD PTR ?mousewait@?1??M_Responder@@9@9, eax

; 7589 : 				pmousex = lastx += 30;

  002cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lastx@?1??M_Responder@@9@9
  002d2	83 c0 1e	 add	 eax, 30			; 0000001eH
  002d5	a3 00 00 00 00	 mov	 DWORD PTR ?lastx@?1??M_Responder@@9@9, eax
  002da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lastx@?1??M_Responder@@9@9
  002e0	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pmousex@?1??M_Responder@@9@9, ecx
$LN50@M_Responde:

; 7590 : 			}
; 7591 : 		}
; 7592 : 	}
; 7593 : 
; 7594 : 	if (ch == -1)

  002e6	83 7d fc ff	 cmp	 DWORD PTR _ch$[ebp], -1
  002ea	75 07		 jne	 SHORT $LN51@M_Responde

; 7595 : 		return false;

  002ec	33 c0		 xor	 eax, eax
  002ee	e9 31 0a 00 00	 jmp	 $LN1@M_Responde
$LN51@M_Responde:

; 7596 : 
; 7597 : 	// F-Keys
; 7598 : 	if (!menuactive || ch == KEY_F8) //allow screenshots

  002f3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  002fa	74 0d		 je	 SHORT $LN53@M_Responde
  002fc	81 7d fc c2 00
	00 00		 cmp	 DWORD PTR _ch$[ebp], 194 ; 000000c2H
  00303	0f 85 46 01 00
	00		 jne	 $LN52@M_Responde
$LN53@M_Responde:

; 7599 : 	{
; 7600 : 		switch (ch)

  00309	8b 45 fc	 mov	 eax, DWORD PTR _ch$[ebp]
  0030c	89 45 b0	 mov	 DWORD PTR tv166[ebp], eax
  0030f	8b 4d b0	 mov	 ecx, DWORD PTR tv166[ebp]
  00312	83 e9 1b	 sub	 ecx, 27			; 0000001bH
  00315	89 4d b0	 mov	 DWORD PTR tv166[ebp], ecx
  00318	81 7d b0 bc 00
	00 00		 cmp	 DWORD PTR tv166[ebp], 188 ; 000000bcH
  0031f	0f 87 23 01 00
	00		 ja	 $LN4@M_Responde
  00325	8b 55 b0	 mov	 edx, DWORD PTR tv166[ebp]
  00328	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN148@M_Responde[edx]
  0032f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN149@M_Responde[eax*4]
$LN54@M_Responde:

; 7601 : 		{
; 7602 : 			case KEY_F1: // Help key
; 7603 : 				M_StartControlPanel();

  00336	e8 00 00 00 00	 call	 _M_StartControlPanel
  0033b	90		 npad	 1

; 7604 : 				currentMenu = &ReadDef1;

  0033c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _ReadDef1

; 7605 : 				itemOn = 0;

  00346	33 c0		 xor	 eax, eax
  00348	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax

; 7606 : 				return true;

  0034e	b8 01 00 00 00	 mov	 eax, 1
  00353	e9 cc 09 00 00	 jmp	 $LN1@M_Responde
$LN55@M_Responde:

; 7607 : 
; 7608 : 			case KEY_F2: // Empty
; 7609 : 				return true;

  00358	b8 01 00 00 00	 mov	 eax, 1
  0035d	e9 c2 09 00 00	 jmp	 $LN1@M_Responde
$LN56@M_Responde:

; 7610 : 
; 7611 : 			case KEY_F3: // Empty
; 7612 : 				return true;

  00362	b8 01 00 00 00	 mov	 eax, 1
  00367	e9 b8 09 00 00	 jmp	 $LN1@M_Responde
$LN57@M_Responde:

; 7613 : 
; 7614 : 			case KEY_F4: // Sound Volume
; 7615 : 				M_StartControlPanel();

  0036c	e8 00 00 00 00	 call	 _M_StartControlPanel
  00371	90		 npad	 1

; 7616 : 				currentMenu = &SoundDef;

  00372	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _SoundDef

; 7617 : 				itemOn = sfx_vol;

  0037c	33 c0		 xor	 eax, eax
  0037e	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax

; 7618 : 				return true;

  00384	b8 01 00 00 00	 mov	 eax, 1
  00389	e9 96 09 00 00	 jmp	 $LN1@M_Responde
$LN58@M_Responde:

; 7619 : 
; 7620 : #ifndef DC
; 7621 : 			case KEY_F5: // Video Mode
; 7622 : 				M_StartControlPanel();

  0038e	e8 00 00 00 00	 call	 _M_StartControlPanel
  00393	90		 npad	 1

; 7623 : 				M_SetupNextMenu(&VidModeDef);

  00394	68 00 00 00 00	 push	 OFFSET _VidModeDef
  00399	e8 00 00 00 00	 call	 _M_SetupNextMenu
  0039e	83 c4 04	 add	 esp, 4

; 7624 : 				return true;

  003a1	b8 01 00 00 00	 mov	 eax, 1
  003a6	e9 79 09 00 00	 jmp	 $LN1@M_Responde
$LN59@M_Responde:

; 7625 : #endif
; 7626 : 
; 7627 : 			case KEY_F6: // Empty
; 7628 : 				return true;

  003ab	b8 01 00 00 00	 mov	 eax, 1
  003b0	e9 6f 09 00 00	 jmp	 $LN1@M_Responde
$LN60@M_Responde:

; 7629 : 
; 7630 : 			case KEY_F7: // Options
; 7631 : 				M_StartControlPanel();

  003b5	e8 00 00 00 00	 call	 _M_StartControlPanel
  003ba	90		 npad	 1

; 7632 : 				M_OptionsMenu(0);

  003bb	6a 00		 push	 0
  003bd	e8 00 00 00 00	 call	 _M_OptionsMenu
  003c2	83 c4 04	 add	 esp, 4

; 7633 : 				return true;

  003c5	b8 01 00 00 00	 mov	 eax, 1
  003ca	e9 55 09 00 00	 jmp	 $LN1@M_Responde
$LN61@M_Responde:

; 7634 : 
; 7635 : 			case KEY_F8: // Screenshot
; 7636 : 				COM_ImmedExecute("screenshot\n");

  003cf	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FHKEBODE@screenshot?6@
  003d4	e8 00 00 00 00	 call	 _COM_ImmedExecute
  003d9	83 c4 04	 add	 esp, 4

; 7637 : 				return true;

  003dc	b8 01 00 00 00	 mov	 eax, 1
  003e1	e9 3e 09 00 00	 jmp	 $LN1@M_Responde
$LN62@M_Responde:

; 7638 : 
; 7639 : 			case KEY_F9: // Empty
; 7640 : 				return true;

  003e6	b8 01 00 00 00	 mov	 eax, 1
  003eb	e9 34 09 00 00	 jmp	 $LN1@M_Responde
$LN63@M_Responde:

; 7641 : 
; 7642 : 			case KEY_F10: // Quit SRB2
; 7643 : 				M_QuitSRB2(0);

  003f0	6a 00		 push	 0
  003f2	e8 00 00 00 00	 call	 _M_QuitSRB2
  003f7	83 c4 04	 add	 esp, 4

; 7644 : 				return true;

  003fa	b8 01 00 00 00	 mov	 eax, 1
  003ff	e9 20 09 00 00	 jmp	 $LN1@M_Responde
$LN64@M_Responde:

; 7645 : 
; 7646 : 			case KEY_F11: // Gamma Level
; 7647 : 				CV_AddValue(&cv_usegamma, 1);

  00404	6a 01		 push	 1
  00406	68 00 00 00 00	 push	 OFFSET _cv_usegamma
  0040b	e8 00 00 00 00	 call	 _CV_AddValue
  00410	83 c4 08	 add	 esp, 8

; 7648 : 				return true;

  00413	b8 01 00 00 00	 mov	 eax, 1
  00418	e9 07 09 00 00	 jmp	 $LN1@M_Responde
$LN65@M_Responde:

; 7649 : 
; 7650 : 			case KEY_ESCAPE: // Pop up menu
; 7651 : 				if (chat_on)

  0041d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chat_on, 0
  00424	74 12		 je	 SHORT $LN66@M_Responde

; 7652 : 				{
; 7653 : 					HU_clearChatChars();

  00426	e8 00 00 00 00	 call	 _HU_clearChatChars
  0042b	90		 npad	 1

; 7654 : 					chat_on = false;

  0042c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _chat_on, 0

; 7655 : 				}

  00436	eb 06		 jmp	 SHORT $LN67@M_Responde
$LN66@M_Responde:

; 7656 : 				else
; 7657 : 					M_StartControlPanel();

  00438	e8 00 00 00 00	 call	 _M_StartControlPanel
  0043d	90		 npad	 1
$LN67@M_Responde:

; 7658 : 				return true;

  0043e	b8 01 00 00 00	 mov	 eax, 1
  00443	e9 dc 08 00 00	 jmp	 $LN1@M_Responde
$LN4@M_Responde:

; 7659 : 		}
; 7660 : 		return false;

  00448	33 c0		 xor	 eax, eax
  0044a	e9 d5 08 00 00	 jmp	 $LN1@M_Responde
$LN52@M_Responde:

; 7661 : 	}
; 7662 : 
; 7663 : 	routine = currentMenu->menuitems[itemOn].itemaction;

  0044f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00456	6b c8 14	 imul	 ecx, eax, 20
  00459	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0045f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00462	8b 4c 08 0c	 mov	 ecx, DWORD PTR [eax+ecx+12]
  00466	89 4d f8	 mov	 DWORD PTR _routine$[ebp], ecx

; 7664 : 
; 7665 : 	// Handle menuitems which need a specific key handling
; 7666 : 	if (routine && (currentMenu->menuitems[itemOn].status & IT_TYPE) == IT_KEYHANDLER)

  00469	83 7d f8 00	 cmp	 DWORD PTR _routine$[ebp], 0
  0046d	74 56		 je	 SHORT $LN68@M_Responde
  0046f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00476	6b c8 14	 imul	 ecx, eax, 20
  00479	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0047f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00482	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00486	83 e1 0e	 and	 ecx, 14			; 0000000eH
  00489	83 f9 04	 cmp	 ecx, 4
  0048c	75 37		 jne	 SHORT $LN68@M_Responde

; 7667 : 	{
; 7668 : 		if (shiftdown && ch >= 32 && ch <= 127)

  0048e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?shiftdown@?1??M_Responder@@9@9, 0
  00495	74 1a		 je	 SHORT $LN69@M_Responde
  00497	83 7d fc 20	 cmp	 DWORD PTR _ch$[ebp], 32	; 00000020H
  0049b	7c 14		 jl	 SHORT $LN69@M_Responde
  0049d	83 7d fc 7f	 cmp	 DWORD PTR _ch$[ebp], 127 ; 0000007fH
  004a1	7f 0e		 jg	 SHORT $LN69@M_Responde

; 7669 : 			ch = shiftxform[ch];

  004a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _shiftxform
  004a8	03 45 fc	 add	 eax, DWORD PTR _ch$[ebp]
  004ab	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004ae	89 4d fc	 mov	 DWORD PTR _ch$[ebp], ecx
$LN69@M_Responde:

; 7670 : 		routine(ch);

  004b1	8b 45 fc	 mov	 eax, DWORD PTR _ch$[ebp]
  004b4	50		 push	 eax
  004b5	ff 55 f8	 call	 DWORD PTR _routine$[ebp]
  004b8	83 c4 04	 add	 esp, 4

; 7671 : 		return true;

  004bb	b8 01 00 00 00	 mov	 eax, 1
  004c0	e9 5f 08 00 00	 jmp	 $LN1@M_Responde
$LN68@M_Responde:

; 7672 : 	}
; 7673 : 
; 7674 : 	if (currentMenu->menuitems[itemOn].status == IT_MSGHANDLER)

  004c5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  004cc	6b c8 14	 imul	 ecx, eax, 20
  004cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  004d5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004d8	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  004dc	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  004df	0f 85 c9 00 00
	00		 jne	 $LN72@M_Responde

; 7675 : 	{
; 7676 : 		if (currentMenu->menuitems[itemOn].alphaKey != MM_EVENTHANDLER)

  004e5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  004ec	6b c8 14	 imul	 ecx, eax, 20
  004ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  004f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004f8	0f b6 4c 08 10	 movzx	 ecx, BYTE PTR [eax+ecx+16]
  004fd	83 f9 02	 cmp	 ecx, 2
  00500	74 4e		 je	 SHORT $LN71@M_Responde

; 7677 : 		{
; 7678 : 			if (ch == ' ' || ch == 'n' || ch == 'y' || ch == KEY_ESCAPE || ch == KEY_ENTER)

  00502	83 7d fc 20	 cmp	 DWORD PTR _ch$[ebp], 32	; 00000020H
  00506	74 18		 je	 SHORT $LN74@M_Responde
  00508	83 7d fc 6e	 cmp	 DWORD PTR _ch$[ebp], 110 ; 0000006eH
  0050c	74 12		 je	 SHORT $LN74@M_Responde
  0050e	83 7d fc 79	 cmp	 DWORD PTR _ch$[ebp], 121 ; 00000079H
  00512	74 0c		 je	 SHORT $LN74@M_Responde
  00514	83 7d fc 1b	 cmp	 DWORD PTR _ch$[ebp], 27	; 0000001bH
  00518	74 06		 je	 SHORT $LN74@M_Responde
  0051a	83 7d fc 0d	 cmp	 DWORD PTR _ch$[ebp], 13	; 0000000dH
  0051e	75 24		 jne	 SHORT $LN73@M_Responde
$LN74@M_Responde:

; 7679 : 			{
; 7680 : 				if (routine)

  00520	83 7d f8 00	 cmp	 DWORD PTR _routine$[ebp], 0
  00524	74 0a		 je	 SHORT $LN75@M_Responde

; 7681 : 					routine(ch);

  00526	8b 45 fc	 mov	 eax, DWORD PTR _ch$[ebp]
  00529	50		 push	 eax
  0052a	ff 55 f8	 call	 DWORD PTR _routine$[ebp]
  0052d	83 c4 04	 add	 esp, 4
$LN75@M_Responde:

; 7682 : 				M_StopMessage(0);

  00530	6a 00		 push	 0
  00532	e8 00 00 00 00	 call	 _M_StopMessage
  00537	83 c4 04	 add	 esp, 4

; 7683 : 				return true;

  0053a	b8 01 00 00 00	 mov	 eax, 1
  0053f	e9 e0 07 00 00	 jmp	 $LN1@M_Responde
$LN73@M_Responde:

; 7684 : 			}
; 7685 : 			return true;

  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	e9 d6 07 00 00	 jmp	 $LN1@M_Responde

; 7686 : 		}

  0054e	eb 5e		 jmp	 SHORT $LN72@M_Responde
$LN71@M_Responde:

; 7687 : 		else
; 7688 : 		{
; 7689 : 			// dirty hack: for customising controls, I want only buttons/keys, not moves
; 7690 : 			if (ev->type == ev_mouse || ev->type == ev_mouse2 || ev->type == ev_joystick
; 7691 : 				|| ev->type == ev_joystick2)

  00550	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00553	83 38 03	 cmp	 DWORD PTR [eax], 3
  00556	74 18		 je	 SHORT $LN77@M_Responde
  00558	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0055b	83 38 05	 cmp	 DWORD PTR [eax], 5
  0055e	74 10		 je	 SHORT $LN77@M_Responde
  00560	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00563	83 38 04	 cmp	 DWORD PTR [eax], 4
  00566	74 08		 je	 SHORT $LN77@M_Responde
  00568	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0056b	83 38 06	 cmp	 DWORD PTR [eax], 6
  0056e	75 0a		 jne	 SHORT $LN76@M_Responde
$LN77@M_Responde:

; 7692 : 				return true;

  00570	b8 01 00 00 00	 mov	 eax, 1
  00575	e9 aa 07 00 00	 jmp	 $LN1@M_Responde
$LN76@M_Responde:

; 7693 : 			if (routine)

  0057a	83 7d f8 00	 cmp	 DWORD PTR _routine$[ebp], 0
  0057e	74 24		 je	 SHORT $LN78@M_Responde

; 7694 : 			{
; 7695 : 				void (*otherroutine)(event_t *sev) = currentMenu->menuitems[itemOn].itemaction;

  00580	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00587	6b c8 14	 imul	 ecx, eax, 20
  0058a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00590	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00593	8b 4c 08 0c	 mov	 ecx, DWORD PTR [eax+ecx+12]
  00597	89 4d f4	 mov	 DWORD PTR _otherroutine$1[ebp], ecx

; 7696 : 				otherroutine(ev); //Alam: what a hack

  0059a	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0059d	50		 push	 eax
  0059e	ff 55 f4	 call	 DWORD PTR _otherroutine$1[ebp]
  005a1	83 c4 04	 add	 esp, 4
$LN78@M_Responde:

; 7697 : 			}
; 7698 : 			return true;

  005a4	b8 01 00 00 00	 mov	 eax, 1
  005a9	e9 76 07 00 00	 jmp	 $LN1@M_Responde
$LN72@M_Responde:

; 7699 : 		}
; 7700 : 	}
; 7701 : 
; 7702 : 	// BP: one of the more big hack i have never made
; 7703 : 	if (routine && (currentMenu->menuitems[itemOn].status & IT_TYPE) == IT_CVAR)

  005ae	83 7d f8 00	 cmp	 DWORD PTR _routine$[ebp], 0
  005b2	0f 84 93 00 00
	00		 je	 $LN81@M_Responde
  005b8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  005bf	6b c8 14	 imul	 ecx, eax, 20
  005c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  005c8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005cb	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  005cf	83 e1 0e	 and	 ecx, 14			; 0000000eH
  005d2	83 f9 08	 cmp	 ecx, 8
  005d5	75 74		 jne	 SHORT $LN81@M_Responde

; 7704 : 	{
; 7705 : 		if ((currentMenu->menuitems[itemOn].status & IT_CVARTYPE) == IT_CV_STRING)

  005d7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  005de	6b c8 14	 imul	 ecx, eax, 20
  005e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  005e7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005ea	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  005ee	81 e1 00 07 00
	00		 and	 ecx, 1792		; 00000700H
  005f4	81 f9 00 02 00
	00		 cmp	 ecx, 512		; 00000200H
  005fa	75 48		 jne	 SHORT $LN80@M_Responde

; 7706 : 		{
; 7707 : 			if (shiftdown && ch >= 32 && ch <= 127)

  005fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?shiftdown@?1??M_Responder@@9@9, 0
  00603	74 1a		 je	 SHORT $LN82@M_Responde
  00605	83 7d fc 20	 cmp	 DWORD PTR _ch$[ebp], 32	; 00000020H
  00609	7c 14		 jl	 SHORT $LN82@M_Responde
  0060b	83 7d fc 7f	 cmp	 DWORD PTR _ch$[ebp], 127 ; 0000007fH
  0060f	7f 0e		 jg	 SHORT $LN82@M_Responde

; 7708 : 				ch = shiftxform[ch];

  00611	a1 00 00 00 00	 mov	 eax, DWORD PTR _shiftxform
  00616	03 45 fc	 add	 eax, DWORD PTR _ch$[ebp]
  00619	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0061c	89 4d fc	 mov	 DWORD PTR _ch$[ebp], ecx
$LN82@M_Responde:

; 7709 : 			if (M_ChangeStringCvar(ch))

  0061f	8b 45 fc	 mov	 eax, DWORD PTR _ch$[ebp]
  00622	50		 push	 eax
  00623	e8 00 00 00 00	 call	 _M_ChangeStringCvar
  00628	83 c4 04	 add	 esp, 4
  0062b	85 c0		 test	 eax, eax
  0062d	74 0c		 je	 SHORT $LN83@M_Responde

; 7710 : 				return true;

  0062f	b8 01 00 00 00	 mov	 eax, 1
  00634	e9 eb 06 00 00	 jmp	 $LN1@M_Responde
  00639	eb 07		 jmp	 SHORT $LN84@M_Responde
$LN83@M_Responde:

; 7711 : 			else
; 7712 : 				routine = NULL;

  0063b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _routine$[ebp], 0
$LN84@M_Responde:

; 7713 : 		}

  00642	eb 07		 jmp	 SHORT $LN81@M_Responde
$LN80@M_Responde:

; 7714 : 		else
; 7715 : 			routine = M_ChangeCvar;

  00644	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _routine$[ebp], OFFSET _M_ChangeCvar
$LN81@M_Responde:

; 7716 : 	}
; 7717 : 
; 7718 : 	// Keys usable within menu
; 7719 : 	switch (ch)

  0064b	8b 45 fc	 mov	 eax, DWORD PTR _ch$[ebp]
  0064e	89 45 b0	 mov	 DWORD PTR tv260[ebp], eax
  00651	8b 4d b0	 mov	 ecx, DWORD PTR tv260[ebp]
  00654	83 e9 08	 sub	 ecx, 8
  00657	89 4d b0	 mov	 DWORD PTR tv260[ebp], ecx
  0065a	81 7d b0 e6 00
	00 00		 cmp	 DWORD PTR tv260[ebp], 230 ; 000000e6H
  00661	0f 87 b8 06 00
	00		 ja	 $LN144@M_Responde
  00667	8b 55 b0	 mov	 edx, DWORD PTR tv260[ebp]
  0066a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN150@M_Responde[edx]
  00671	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN151@M_Responde[eax*4]
$LN85@M_Responde:

; 7720 : 	{
; 7721 : 		case KEY_DOWNARROW:
; 7722 : 			do
; 7723 : 			{
; 7724 : 				if (itemOn + 1 > currentMenu->numitems - 1)

  00678	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  0067f	83 c0 01	 add	 eax, 1
  00682	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentMenu
  00688	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  0068c	83 ea 01	 sub	 edx, 1
  0068f	3b c2		 cmp	 eax, edx
  00691	7e 0a		 jle	 SHORT $LN86@M_Responde

; 7725 : 					itemOn = 0;

  00693	33 c0		 xor	 eax, eax
  00695	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax
  0069b	eb 10		 jmp	 SHORT $LN87@M_Responde
$LN86@M_Responde:

; 7726 : 				else
; 7727 : 					itemOn++;

  0069d	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _itemOn
  006a3	66 83 c0 01	 add	 ax, 1
  006a7	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax
$LN87@M_Responde:

; 7728 : 			} while ((currentMenu->menuitems[itemOn].status & IT_TYPE) == IT_SPACE);

  006ad	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  006b4	6b c8 14	 imul	 ecx, eax, 20
  006b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  006bd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006c0	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  006c4	83 e1 0e	 and	 ecx, 14			; 0000000eH
  006c7	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  006ca	74 ac		 je	 SHORT $LN85@M_Responde

; 7729 : 
; 7730 : 			S_StartSound(NULL, sfx_menu1);

  006cc	6a 67		 push	 103			; 00000067H
  006ce	6a 00		 push	 0
  006d0	e8 00 00 00 00	 call	 _S_StartSound
  006d5	83 c4 08	 add	 esp, 8

; 7731 : 			return true;

  006d8	b8 01 00 00 00	 mov	 eax, 1
  006dd	e9 42 06 00 00	 jmp	 $LN1@M_Responde
$LN88@M_Responde:

; 7732 : 
; 7733 : 		case KEY_UPARROW:
; 7734 : 			do
; 7735 : 			{
; 7736 : 				if (!itemOn)

  006e2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  006e9	85 c0		 test	 eax, eax
  006eb	75 15		 jne	 SHORT $LN89@M_Responde

; 7737 : 					itemOn = (INT16)(currentMenu->numitems - 1);

  006ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  006f2	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  006f6	83 e9 01	 sub	 ecx, 1
  006f9	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx
  00700	eb 10		 jmp	 SHORT $LN90@M_Responde
$LN89@M_Responde:

; 7738 : 				else
; 7739 : 					itemOn--;

  00702	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _itemOn
  00708	66 83 e8 01	 sub	 ax, 1
  0070c	66 a3 00 00 00
	00		 mov	 WORD PTR _itemOn, ax
$LN90@M_Responde:

; 7740 : 			} while ((currentMenu->menuitems[itemOn].status & IT_TYPE) == IT_SPACE);

  00712	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00719	6b c8 14	 imul	 ecx, eax, 20
  0071c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00722	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00725	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00729	83 e1 0e	 and	 ecx, 14			; 0000000eH
  0072c	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0072f	74 b1		 je	 SHORT $LN88@M_Responde

; 7741 : 
; 7742 : 			S_StartSound(NULL, sfx_menu1);

  00731	6a 67		 push	 103			; 00000067H
  00733	6a 00		 push	 0
  00735	e8 00 00 00 00	 call	 _S_StartSound
  0073a	83 c4 08	 add	 esp, 8

; 7743 : 			return true;

  0073d	b8 01 00 00 00	 mov	 eax, 1
  00742	e9 dd 05 00 00	 jmp	 $LN1@M_Responde
$LN91@M_Responde:

; 7744 : 
; 7745 : 		case KEY_LEFTARROW:
; 7746 : 			if (routine && ((currentMenu->menuitems[itemOn].status & IT_TYPE) == IT_ARROWS

  00747	83 7d f8 00	 cmp	 DWORD PTR _routine$[ebp], 0
  0074b	74 5e		 je	 SHORT $LN92@M_Responde
  0074d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00754	6b c8 14	 imul	 ecx, eax, 20
  00757	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0075d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00760	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00764	83 e1 0e	 and	 ecx, 14			; 0000000eH
  00767	83 f9 02	 cmp	 ecx, 2
  0076a	74 1f		 je	 SHORT $LN93@M_Responde
  0076c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00773	6b c8 14	 imul	 ecx, eax, 20
  00776	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0077c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0077f	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00783	83 e1 0e	 and	 ecx, 14			; 0000000eH
  00786	83 f9 08	 cmp	 ecx, 8
  00789	75 20		 jne	 SHORT $LN92@M_Responde
$LN93@M_Responde:

; 7747 : 				|| (currentMenu->menuitems[itemOn].status & IT_TYPE) == IT_CVAR))
; 7748 : 			{
; 7749 : 				if (currentMenu != &SoundDef)

  0078b	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _SoundDef
  00795	74 0c		 je	 SHORT $LN94@M_Responde

; 7750 : 					S_StartSound(NULL, sfx_menu1);

  00797	6a 67		 push	 103			; 00000067H
  00799	6a 00		 push	 0
  0079b	e8 00 00 00 00	 call	 _S_StartSound
  007a0	83 c4 08	 add	 esp, 8
$LN94@M_Responde:

; 7751 : 				routine(0);

  007a3	6a 00		 push	 0
  007a5	ff 55 f8	 call	 DWORD PTR _routine$[ebp]
  007a8	83 c4 04	 add	 esp, 4
$LN92@M_Responde:

; 7752 : 			}
; 7753 : 			return true;

  007ab	b8 01 00 00 00	 mov	 eax, 1
  007b0	e9 6f 05 00 00	 jmp	 $LN1@M_Responde
$LN95@M_Responde:

; 7754 : 
; 7755 : 		case KEY_RIGHTARROW:
; 7756 : 			if (routine && ((currentMenu->menuitems[itemOn].status & IT_TYPE) == IT_ARROWS

  007b5	83 7d f8 00	 cmp	 DWORD PTR _routine$[ebp], 0
  007b9	74 5e		 je	 SHORT $LN96@M_Responde
  007bb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  007c2	6b c8 14	 imul	 ecx, eax, 20
  007c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  007cb	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  007ce	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  007d2	83 e1 0e	 and	 ecx, 14			; 0000000eH
  007d5	83 f9 02	 cmp	 ecx, 2
  007d8	74 1f		 je	 SHORT $LN97@M_Responde
  007da	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  007e1	6b c8 14	 imul	 ecx, eax, 20
  007e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  007ea	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  007ed	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  007f1	83 e1 0e	 and	 ecx, 14			; 0000000eH
  007f4	83 f9 08	 cmp	 ecx, 8
  007f7	75 20		 jne	 SHORT $LN96@M_Responde
$LN97@M_Responde:

; 7757 : 				|| (currentMenu->menuitems[itemOn].status & IT_TYPE) == IT_CVAR))
; 7758 : 			{
; 7759 : 				if (currentMenu != &SoundDef)

  007f9	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _SoundDef
  00803	74 0c		 je	 SHORT $LN98@M_Responde

; 7760 : 					S_StartSound(NULL, sfx_menu1);

  00805	6a 67		 push	 103			; 00000067H
  00807	6a 00		 push	 0
  00809	e8 00 00 00 00	 call	 _S_StartSound
  0080e	83 c4 08	 add	 esp, 8
$LN98@M_Responde:

; 7761 : 				routine(1);

  00811	6a 01		 push	 1
  00813	ff 55 f8	 call	 DWORD PTR _routine$[ebp]
  00816	83 c4 04	 add	 esp, 4
$LN96@M_Responde:

; 7762 : 			}
; 7763 : 			return true;

  00819	b8 01 00 00 00	 mov	 eax, 1
  0081e	e9 01 05 00 00	 jmp	 $LN1@M_Responde
$LN99@M_Responde:

; 7764 : 
; 7765 : 		case KEY_ENTER:
; 7766 : 			currentMenu->lastOn = itemOn;

  00823	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00828	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _itemOn
  0082f	66 89 48 1c	 mov	 WORD PTR [eax+28], cx

; 7767 : 			if (routine)

  00833	83 7d f8 00	 cmp	 DWORD PTR _routine$[ebp], 0
  00837	0f 84 9b 00 00
	00		 je	 $LN14@M_Responde

; 7768 : 			{
; 7769 : 				switch (currentMenu->menuitems[itemOn].status & IT_TYPE)

  0083d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00844	6b c8 14	 imul	 ecx, eax, 20
  00847	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  0084d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00850	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00854	83 e1 0e	 and	 ecx, 14			; 0000000eH
  00857	89 4d b0	 mov	 DWORD PTR tv346[ebp], ecx
  0085a	83 7d b0 08	 cmp	 DWORD PTR tv346[ebp], 8
  0085e	77 78		 ja	 SHORT $LN14@M_Responde
  00860	8b 55 b0	 mov	 edx, DWORD PTR tv346[ebp]
  00863	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN152@M_Responde[edx*4]
$LN101@M_Responde:

; 7770 : 				{
; 7771 : 					case IT_CVAR:
; 7772 : 					case IT_ARROWS:
; 7773 : 						routine(1); // right arrow

  0086a	6a 01		 push	 1
  0086c	ff 55 f8	 call	 DWORD PTR _routine$[ebp]
  0086f	83 c4 04	 add	 esp, 4

; 7774 : 						S_StartSound(NULL, sfx_menu1);

  00872	6a 67		 push	 103			; 00000067H
  00874	6a 00		 push	 0
  00876	e8 00 00 00 00	 call	 _S_StartSound
  0087b	83 c4 08	 add	 esp, 8

; 7775 : 						break;

  0087e	eb 58		 jmp	 SHORT $LN14@M_Responde
$LN103@M_Responde:

; 7776 : 					case IT_CALL:
; 7777 : 						routine(itemOn);

  00880	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00887	50		 push	 eax
  00888	ff 55 f8	 call	 DWORD PTR _routine$[ebp]
  0088b	83 c4 04	 add	 esp, 4

; 7778 : 						S_StartSound(NULL, sfx_menu1);

  0088e	6a 67		 push	 103			; 00000067H
  00890	6a 00		 push	 0
  00892	e8 00 00 00 00	 call	 _S_StartSound
  00897	83 c4 08	 add	 esp, 8

; 7779 : 						break;

  0089a	eb 3c		 jmp	 SHORT $LN14@M_Responde
$LN104@M_Responde:

; 7780 : 					case IT_SUBMENU:
; 7781 : 						currentMenu->lastOn = itemOn;

  0089c	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  008a1	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _itemOn
  008a8	66 89 48 1c	 mov	 WORD PTR [eax+28], cx

; 7782 : 						M_SetupNextMenu((menu_t *)currentMenu->menuitems[itemOn].itemaction);

  008ac	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  008b3	6b c8 14	 imul	 ecx, eax, 20
  008b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  008bc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  008bf	8b 4c 08 0c	 mov	 ecx, DWORD PTR [eax+ecx+12]
  008c3	51		 push	 ecx
  008c4	e8 00 00 00 00	 call	 _M_SetupNextMenu
  008c9	83 c4 04	 add	 esp, 4

; 7783 : 						S_StartSound(NULL, sfx_menu1);

  008cc	6a 67		 push	 103			; 00000067H
  008ce	6a 00		 push	 0
  008d0	e8 00 00 00 00	 call	 _S_StartSound
  008d5	83 c4 08	 add	 esp, 8
$LN14@M_Responde:

; 7784 : 						break;
; 7785 : 				}
; 7786 : 			}
; 7787 : 			return true;

  008d8	b8 01 00 00 00	 mov	 eax, 1
  008dd	e9 42 04 00 00	 jmp	 $LN1@M_Responde
$LN105@M_Responde:

; 7788 : 
; 7789 : 		case KEY_ESCAPE:
; 7790 : 			currentMenu->lastOn = itemOn;

  008e2	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  008e7	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _itemOn
  008ee	66 89 48 1c	 mov	 WORD PTR [eax+28], cx

; 7791 : 			if (currentMenu->prevMenu)

  008f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  008f7	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  008fb	0f 84 e4 02 00
	00		 je	 $LN106@M_Responde

; 7792 : 			{
; 7793 : 				//If we entered the game search menu, but didn't enter a game,
; 7794 : 				//make sure the game doesn't still think we're in a netgame.
; 7795 : 				if (!Playing() && netgame && multiplayer)

  00901	e8 00 00 00 00	 call	 _Playing
  00906	85 c0		 test	 eax, eax
  00908	75 2c		 jne	 SHORT $LN108@M_Responde
  0090a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00911	74 23		 je	 SHORT $LN108@M_Responde
  00913	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0091a	74 1a		 je	 SHORT $LN108@M_Responde

; 7796 : 				{
; 7797 : 					MSCloseUDPSocket();		// Clean up so we can re-open the connection later.

  0091c	e8 00 00 00 00	 call	 _MSCloseUDPSocket
  00921	90		 npad	 1

; 7798 : 					netgame = false;

  00922	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _netgame, 0

; 7799 : 					multiplayer = false;

  0092c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _multiplayer, 0
$LN108@M_Responde:

; 7800 : 				}
; 7801 : 				// Catch Switch Map option in case we quit a game using the menu somewhere...
; 7802 : 				if (!(netgame || multiplayer) || !Playing()
; 7803 : 					|| !(server || adminplayer == consoleplayer))

  00936	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0093d	75 09		 jne	 SHORT $LN112@M_Responde
  0093f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00946	74 1f		 je	 SHORT $LN111@M_Responde
$LN112@M_Responde:
  00948	e8 00 00 00 00	 call	 _Playing
  0094d	85 c0		 test	 eax, eax
  0094f	74 16		 je	 SHORT $LN111@M_Responde
  00951	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00958	75 37		 jne	 SHORT $LN109@M_Responde
  0095a	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  0095f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00965	74 2a		 je	 SHORT $LN109@M_Responde
$LN111@M_Responde:

; 7804 : 				{
; 7805 : 					MainMenu[switchmap].status = IT_DISABLED;

  00967	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0096c	6b c8 03	 imul	 ecx, eax, 3
  0096f	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00974	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx

; 7806 : 					MainMenu[scramble].status = IT_DISABLED;

  0097b	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00980	6b c8 00	 imul	 ecx, eax, 0
  00983	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00988	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx

; 7807 : 				}

  0098f	eb 49		 jmp	 SHORT $LN113@M_Responde
$LN109@M_Responde:

; 7808 : 				else
; 7809 : 				{
; 7810 : 					MainMenu[switchmap].status = IT_STRING | IT_CALL;

  00991	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00996	6b c8 03	 imul	 ecx, eax, 3
  00999	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0099e	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx

; 7811 : 
; 7812 : 					if((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  009a5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  009ac	83 f8 01	 cmp	 eax, 1
  009af	75 09		 jne	 SHORT $LN115@M_Responde
  009b1	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  009b8	75 0c		 jne	 SHORT $LN114@M_Responde
$LN115@M_Responde:
  009ba	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  009c1	83 f8 04	 cmp	 eax, 4
  009c4	75 14		 jne	 SHORT $LN113@M_Responde
$LN114@M_Responde:

; 7813 : 						MainMenu[scramble].status = IT_STRING | IT_CALL;

  009c6	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  009cb	6b c8 00	 imul	 ecx, eax, 0
  009ce	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  009d3	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx
$LN113@M_Responde:

; 7814 : 				}
; 7815 : 
; 7816 : 				// Make sure the Switch Team / Spectate option only shows up in gametypes that apply.
; 7817 : 				if (!(gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF)
; 7818 : 					|| splitscreen || !(netgame || multiplayer) || !Playing())

  009da	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  009e1	83 f8 01	 cmp	 eax, 1
  009e4	74 18		 je	 SHORT $LN119@M_Responde
  009e6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  009ed	83 f8 03	 cmp	 eax, 3
  009f0	74 0c		 je	 SHORT $LN119@M_Responde
  009f2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  009f9	83 f8 04	 cmp	 eax, 4
  009fc	75 24		 jne	 SHORT $LN118@M_Responde
$LN119@M_Responde:
  009fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00a05	75 1b		 jne	 SHORT $LN118@M_Responde
  00a07	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00a0e	75 09		 jne	 SHORT $LN120@M_Responde
  00a10	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00a17	74 09		 je	 SHORT $LN118@M_Responde
$LN120@M_Responde:
  00a19	e8 00 00 00 00	 call	 _Playing
  00a1e	85 c0		 test	 eax, eax
  00a20	75 40		 jne	 SHORT $LN116@M_Responde
$LN118@M_Responde:

; 7819 : 				{
; 7820 : 					MainMenu[spectate].status = IT_DISABLED;

  00a22	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00a27	c1 e0 00	 shl	 eax, 0
  00a2a	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00a2f	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 7821 : 					MainMenu[switchteam].status = IT_DISABLED;

  00a36	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00a3b	d1 e0		 shl	 eax, 1
  00a3d	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00a42	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 7822 : 					MainMenu[scramble].status = IT_DISABLED;

  00a49	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00a4e	6b c8 00	 imul	 ecx, eax, 0
  00a51	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00a56	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx

; 7823 : 				}

  00a5d	e9 af 00 00 00	 jmp	 $LN122@M_Responde
$LN116@M_Responde:

; 7824 : 				else if ((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  00a62	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00a69	83 f8 01	 cmp	 eax, 1
  00a6c	75 09		 jne	 SHORT $LN124@M_Responde
  00a6e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00a75	75 0c		 jne	 SHORT $LN123@M_Responde
$LN124@M_Responde:
  00a77	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00a7e	83 f8 04	 cmp	 eax, 4
  00a81	75 53		 jne	 SHORT $LN121@M_Responde
$LN123@M_Responde:

; 7825 : 				{
; 7826 : 					MainMenu[spectate].status = IT_DISABLED;

  00a83	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00a88	c1 e0 00	 shl	 eax, 0
  00a8b	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00a90	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 7827 : 					MainMenu[switchteam].status = IT_STRING | IT_CALL;

  00a97	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00a9c	d1 e0		 shl	 eax, 1
  00a9e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00aa3	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 7828 : 
; 7829 : 					if(server || adminplayer == consoleplayer)

  00aaa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00ab1	75 0d		 jne	 SHORT $LN126@M_Responde
  00ab3	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00ab8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00abe	75 14		 jne	 SHORT $LN125@M_Responde
$LN126@M_Responde:

; 7830 : 						MainMenu[scramble].status = IT_STRING | IT_CALL;

  00ac0	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00ac5	6b c8 00	 imul	 ecx, eax, 0
  00ac8	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00acd	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx
$LN125@M_Responde:

; 7831 : 				}

  00ad4	eb 3b		 jmp	 SHORT $LN122@M_Responde
$LN121@M_Responde:

; 7832 : 				else
; 7833 : 				{
; 7834 : 					MainMenu[spectate].status = IT_STRING | IT_CALL;

  00ad6	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00adb	c1 e0 00	 shl	 eax, 0
  00ade	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00ae3	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 7835 : 					MainMenu[switchteam].status = IT_DISABLED;

  00aea	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00aef	d1 e0		 shl	 eax, 1
  00af1	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00af6	66 89 88 00 00
	00 00		 mov	 WORD PTR _MainMenu[eax], cx

; 7836 : 					MainMenu[scramble].status = IT_DISABLED;

  00afd	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00b02	6b c8 00	 imul	 ecx, eax, 0
  00b05	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  00b0a	66 89 91 00 00
	00 00		 mov	 WORD PTR _MainMenu[ecx], dx
$LN122@M_Responde:

; 7837 : 				}
; 7838 : 
; 7839 : 				if (currentMenu == &TimeAttackDef)

  00b11	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _TimeAttackDef
  00b1b	75 5b		 jne	 SHORT $LN127@M_Responde

; 7840 : 				{
; 7841 : 					// Fade to black first
; 7842 : 					if (rendermode != render_none)

  00b1d	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00b24	74 40		 je	 SHORT $LN129@M_Responde

; 7843 : 					{
; 7844 : 						V_DrawFill(0, 0, vid.width, vid.height, 31);

  00b26	6a 1f		 push	 31			; 0000001fH
  00b28	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00b2d	50		 push	 eax
  00b2e	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00b34	51		 push	 ecx
  00b35	6a 00		 push	 0
  00b37	6a 00		 push	 0
  00b39	e8 00 00 00 00	 call	 _V_DrawFill
  00b3e	83 c4 14	 add	 esp, 20			; 00000014H

; 7845 : 						F_WipeEndScreen(0, 0, vid.width, vid.height);

  00b41	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00b46	50		 push	 eax
  00b47	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00b4d	51		 push	 ecx
  00b4e	6a 00		 push	 0
  00b50	6a 00		 push	 0
  00b52	e8 00 00 00 00	 call	 _F_WipeEndScreen
  00b57	83 c4 10	 add	 esp, 16			; 00000010H

; 7846 : 
; 7847 : 						F_RunWipe(2*TICRATE, false);

  00b5a	6a 00		 push	 0
  00b5c	6a 46		 push	 70			; 00000046H
  00b5e	e8 00 00 00 00	 call	 _F_RunWipe
  00b63	83 c4 08	 add	 esp, 8
$LN129@M_Responde:

; 7848 : 					}
; 7849 : 					menuactive = false;

  00b66	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _menuactive, 0

; 7850 : 					D_StartTitle();

  00b70	e8 00 00 00 00	 call	 _D_StartTitle
  00b75	90		 npad	 1

; 7851 : 				}

  00b76	eb 6b		 jmp	 SHORT $LN131@M_Responde
$LN127@M_Responde:

; 7852 : 				else if (currentMenu == &LevelSelectDef)

  00b78	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _LevelSelectDef
  00b82	75 41		 jne	 SHORT $LN130@M_Responde

; 7853 : 				{
; 7854 : 					// Don't let people backdoor their way into Pandora's Box if they havn't earned it.
; 7855 : 					if (pandoralevelselect)

  00b84	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _pandoralevelselect, 0
  00b8b	74 1c		 je	 SHORT $LN132@M_Responde

; 7856 : 					{
; 7857 : 						currentMenu = &SecretsDef;

  00b8d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _SecretsDef

; 7858 : 						itemOn = currentMenu->lastOn;

  00b97	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00b9c	66 8b 48 1c	 mov	 cx, WORD PTR [eax+28]
  00ba0	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx

; 7859 : 					}

  00ba7	eb 1a		 jmp	 SHORT $LN133@M_Responde
$LN132@M_Responde:

; 7860 : 					else
; 7861 : 					{
; 7862 : 						currentMenu = &LoadDef;

  00ba9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _LoadDef

; 7863 : 						itemOn = currentMenu->lastOn;

  00bb3	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00bb8	66 8b 48 1c	 mov	 cx, WORD PTR [eax+28]
  00bbc	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx
$LN133@M_Responde:

; 7864 : 					}
; 7865 : 				}

  00bc3	eb 1e		 jmp	 SHORT $LN131@M_Responde
$LN130@M_Responde:

; 7866 : 				else
; 7867 : 				{
; 7868 : 					currentMenu = currentMenu->prevMenu;

  00bc5	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00bca	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00bcd	89 0d 00 00 00
	00		 mov	 DWORD PTR _currentMenu, ecx

; 7869 : 					itemOn = currentMenu->lastOn;

  00bd3	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00bd8	66 8b 48 1c	 mov	 cx, WORD PTR [eax+28]
  00bdc	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx
$LN131@M_Responde:

; 7870 : 				}
; 7871 : 			}

  00be3	eb 0a		 jmp	 SHORT $LN107@M_Responde
$LN106@M_Responde:

; 7872 : 			else
; 7873 : 				M_ClearMenus(true);

  00be5	6a 01		 push	 1
  00be7	e8 00 00 00 00	 call	 _M_ClearMenus
  00bec	83 c4 04	 add	 esp, 4
$LN107@M_Responde:

; 7874 : 
; 7875 : 			return true;

  00bef	b8 01 00 00 00	 mov	 eax, 1
  00bf4	e9 2b 01 00 00	 jmp	 $LN1@M_Responde
$LN134@M_Responde:

; 7876 : 
; 7877 : 		case KEY_BACKSPACE:
; 7878 : 			if ((currentMenu->menuitems[itemOn].status) == IT_CONTROL)

  00bf9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00c00	6b c8 14	 imul	 ecx, eax, 20
  00c03	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00c09	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00c0c	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00c10	83 f9 60	 cmp	 ecx, 96			; 00000060H
  00c13	75 37		 jne	 SHORT $LN135@M_Responde

; 7879 : 			{
; 7880 : 				// detach any keys associated with the game control
; 7881 : 				G_ClearControlKeys(setupcontrols, currentMenu->menuitems[itemOn].alphaKey);

  00c15	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00c1c	6b c8 14	 imul	 ecx, eax, 20
  00c1f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _currentMenu
  00c25	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00c28	0f b6 4c 08 10	 movzx	 ecx, BYTE PTR [eax+ecx+16]
  00c2d	51		 push	 ecx
  00c2e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _setupcontrols
  00c34	52		 push	 edx
  00c35	e8 00 00 00 00	 call	 _G_ClearControlKeys
  00c3a	83 c4 08	 add	 esp, 8

; 7882 : 				return true;

  00c3d	b8 01 00 00 00	 mov	 eax, 1
  00c42	e9 dd 00 00 00	 jmp	 $LN1@M_Responde

; 7883 : 			}

  00c47	e9 93 00 00 00	 jmp	 $LN140@M_Responde
$LN135@M_Responde:

; 7884 : 			else if (currentMenu == &LoadDef)

  00c4c	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _LoadDef
  00c56	75 35		 jne	 SHORT $LN137@M_Responde

; 7885 : 			{
; 7886 : 				if (curSaveSelected != 5) //Don't delete the "No Save" option.

  00c58	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _curSaveSelected, 5
  00c5f	74 2a		 je	 SHORT $LN139@M_Responde

; 7887 : 				{
; 7888 : 					curSaveSelected = itemOn; // Eww eww!

  00c61	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _itemOn
  00c68	a3 00 00 00 00	 mov	 DWORD PTR _curSaveSelected, eax

; 7889 : 					M_StartMessage("Are you sure you want to delete\nthis save game?\n(Y/N)\n",M_SaveGameDeleteResponse,MM_YESNO);

  00c6d	6a 01		 push	 1
  00c6f	68 00 00 00 00	 push	 OFFSET _M_SaveGameDeleteResponse
  00c74	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@ECOMCFGC@Are?5you?5sure?5you?5want?5to?5delete@
  00c79	e8 00 00 00 00	 call	 _M_StartMessage
  00c7e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7890 : 					return true;

  00c81	b8 01 00 00 00	 mov	 eax, 1
  00c86	e9 99 00 00 00	 jmp	 $LN1@M_Responde
$LN139@M_Responde:

; 7891 : 				}
; 7892 : 			}

  00c8b	eb 52		 jmp	 SHORT $LN140@M_Responde
$LN137@M_Responde:

; 7893 : 			else if (currentMenu == &LevelSelectDef)

  00c8d	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR _currentMenu, OFFSET _LevelSelectDef
  00c97	75 46		 jne	 SHORT $LN140@M_Responde

; 7894 : 			{
; 7895 : 				// Don't let people backdoor their way into Pandora's Box if they havn't earned it.
; 7896 : 				if (pandoralevelselect)

  00c99	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _pandoralevelselect, 0
  00ca0	74 1c		 je	 SHORT $LN141@M_Responde

; 7897 : 				{
; 7898 : 					currentMenu = &SecretsDef;

  00ca2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _SecretsDef

; 7899 : 					itemOn = currentMenu->lastOn;

  00cac	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00cb1	66 8b 48 1c	 mov	 cx, WORD PTR [eax+28]
  00cb5	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx

; 7900 : 				}

  00cbc	eb 1a		 jmp	 SHORT $LN142@M_Responde
$LN141@M_Responde:

; 7901 : 				else
; 7902 : 				{
; 7903 : 					currentMenu = &LoadDef;

  00cbe	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentMenu, OFFSET _LoadDef

; 7904 : 					itemOn = currentMenu->lastOn;

  00cc8	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00ccd	66 8b 48 1c	 mov	 cx, WORD PTR [eax+28]
  00cd1	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx
$LN142@M_Responde:

; 7905 : 				}
; 7906 : 				return true;

  00cd8	b8 01 00 00 00	 mov	 eax, 1
  00cdd	eb 45		 jmp	 SHORT $LN1@M_Responde
$LN140@M_Responde:

; 7907 : 			}
; 7908 : 			currentMenu->lastOn = itemOn;

  00cdf	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00ce4	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _itemOn
  00ceb	66 89 48 1c	 mov	 WORD PTR [eax+28], cx

; 7909 : 			if (currentMenu->prevMenu)

  00cef	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00cf4	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00cf8	74 1e		 je	 SHORT $LN143@M_Responde

; 7910 : 			{
; 7911 : 				currentMenu = currentMenu->prevMenu;

  00cfa	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00cff	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00d02	89 0d 00 00 00
	00		 mov	 DWORD PTR _currentMenu, ecx

; 7912 : 				itemOn = currentMenu->lastOn;

  00d08	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentMenu
  00d0d	66 8b 48 1c	 mov	 cx, WORD PTR [eax+28]
  00d11	66 89 0d 00 00
	00 00		 mov	 WORD PTR _itemOn, cx
$LN143@M_Responde:

; 7913 : 			}
; 7914 : 			return true;

  00d18	b8 01 00 00 00	 mov	 eax, 1
  00d1d	eb 05		 jmp	 SHORT $LN1@M_Responde
$LN144@M_Responde:

; 7915 : 
; 7916 : 		default:
; 7917 : /*			for (i = itemOn + 1; i < currentMenu->numitems; i++)
; 7918 : 				if (currentMenu->menuitems[i].alphaKey == ch && !(currentMenu->menuitems[i].status & IT_DISABLED))
; 7919 : 				{
; 7920 : 					itemOn = (INT16)i;
; 7921 : 					S_StartSound(NULL, sfx_menu1);
; 7922 : 					return true;
; 7923 : 				}
; 7924 : 			for (i = 0; i <= itemOn; i++)
; 7925 : 				if (currentMenu->menuitems[i].alphaKey == ch && !(currentMenu->menuitems[i].status & IT_DISABLED))
; 7926 : 				{
; 7927 : 					itemOn = (INT16)i;
; 7928 : 					S_StartSound(NULL, sfx_menu1);
; 7929 : 					return true;
; 7930 : 				}*/
; 7931 : 			break;
; 7932 : 	}
; 7933 : 
; 7934 : 	return true;

  00d1f	b8 01 00 00 00	 mov	 eax, 1
$LN1@M_Responde:

; 7935 : }

  00d24	5f		 pop	 edi
  00d25	5e		 pop	 esi
  00d26	5b		 pop	 ebx
  00d27	8b e5		 mov	 esp, ebp
  00d29	5d		 pop	 ebp
  00d2a	c3		 ret	 0
  00d2b	90		 npad	 1
$LN147@M_Responde:
  00d2c	00 00 00 00	 DD	 $LN23@M_Responde
  00d30	00 00 00 00	 DD	 $LN25@M_Responde
  00d34	00 00 00 00	 DD	 $LN29@M_Responde
  00d38	00 00 00 00	 DD	 $LN28@M_Responde
  00d3c	00 00 00 00	 DD	 $LN31@M_Responde
  00d40	00 00 00 00	 DD	 $LN32@M_Responde
  00d44	00 00 00 00	 DD	 $LN33@M_Responde
  00d48	00 00 00 00	 DD	 $LN34@M_Responde
  00d4c	00 00 00 00	 DD	 $LN2@M_Responde
$LN146@M_Responde:
  00d50	00		 DB	 0
  00d51	00		 DB	 0
  00d52	08		 DB	 8
  00d53	08		 DB	 8
  00d54	08		 DB	 8
  00d55	08		 DB	 8
  00d56	08		 DB	 8
  00d57	08		 DB	 8
  00d58	08		 DB	 8
  00d59	08		 DB	 8
  00d5a	08		 DB	 8
  00d5b	08		 DB	 8
  00d5c	08		 DB	 8
  00d5d	08		 DB	 8
  00d5e	08		 DB	 8
  00d5f	08		 DB	 8
  00d60	08		 DB	 8
  00d61	08		 DB	 8
  00d62	08		 DB	 8
  00d63	08		 DB	 8
  00d64	08		 DB	 8
  00d65	08		 DB	 8
  00d66	08		 DB	 8
  00d67	08		 DB	 8
  00d68	08		 DB	 8
  00d69	08		 DB	 8
  00d6a	08		 DB	 8
  00d6b	08		 DB	 8
  00d6c	08		 DB	 8
  00d6d	08		 DB	 8
  00d6e	08		 DB	 8
  00d6f	08		 DB	 8
  00d70	08		 DB	 8
  00d71	08		 DB	 8
  00d72	08		 DB	 8
  00d73	08		 DB	 8
  00d74	08		 DB	 8
  00d75	08		 DB	 8
  00d76	08		 DB	 8
  00d77	08		 DB	 8
  00d78	08		 DB	 8
  00d79	08		 DB	 8
  00d7a	08		 DB	 8
  00d7b	08		 DB	 8
  00d7c	08		 DB	 8
  00d7d	08		 DB	 8
  00d7e	08		 DB	 8
  00d7f	08		 DB	 8
  00d80	08		 DB	 8
  00d81	08		 DB	 8
  00d82	08		 DB	 8
  00d83	08		 DB	 8
  00d84	08		 DB	 8
  00d85	08		 DB	 8
  00d86	08		 DB	 8
  00d87	08		 DB	 8
  00d88	08		 DB	 8
  00d89	08		 DB	 8
  00d8a	08		 DB	 8
  00d8b	08		 DB	 8
  00d8c	08		 DB	 8
  00d8d	08		 DB	 8
  00d8e	08		 DB	 8
  00d8f	08		 DB	 8
  00d90	08		 DB	 8
  00d91	08		 DB	 8
  00d92	08		 DB	 8
  00d93	08		 DB	 8
  00d94	08		 DB	 8
  00d95	08		 DB	 8
  00d96	08		 DB	 8
  00d97	08		 DB	 8
  00d98	08		 DB	 8
  00d99	08		 DB	 8
  00d9a	01		 DB	 1
  00d9b	02		 DB	 2
  00d9c	08		 DB	 8
  00d9d	08		 DB	 8
  00d9e	08		 DB	 8
  00d9f	08		 DB	 8
  00da0	08		 DB	 8
  00da1	08		 DB	 8
  00da2	01		 DB	 1
  00da3	02		 DB	 2
  00da4	01		 DB	 1
  00da5	03		 DB	 3
  00da6	08		 DB	 8
  00da7	08		 DB	 8
  00da8	08		 DB	 8
  00da9	08		 DB	 8
  00daa	08		 DB	 8
  00dab	08		 DB	 8
  00dac	08		 DB	 8
  00dad	08		 DB	 8
  00dae	08		 DB	 8
  00daf	08		 DB	 8
  00db0	08		 DB	 8
  00db1	08		 DB	 8
  00db2	08		 DB	 8
  00db3	08		 DB	 8
  00db4	08		 DB	 8
  00db5	08		 DB	 8
  00db6	08		 DB	 8
  00db7	08		 DB	 8
  00db8	08		 DB	 8
  00db9	08		 DB	 8
  00dba	08		 DB	 8
  00dbb	08		 DB	 8
  00dbc	08		 DB	 8
  00dbd	08		 DB	 8
  00dbe	08		 DB	 8
  00dbf	08		 DB	 8
  00dc0	08		 DB	 8
  00dc1	08		 DB	 8
  00dc2	04		 DB	 4
  00dc3	05		 DB	 5
  00dc4	06		 DB	 6
  00dc5	07		 DB	 7
  00dc6	66 90		 npad	 2
$LN149@M_Responde:
  00dc8	00 00 00 00	 DD	 $LN65@M_Responde
  00dcc	00 00 00 00	 DD	 $LN54@M_Responde
  00dd0	00 00 00 00	 DD	 $LN55@M_Responde
  00dd4	00 00 00 00	 DD	 $LN56@M_Responde
  00dd8	00 00 00 00	 DD	 $LN57@M_Responde
  00ddc	00 00 00 00	 DD	 $LN58@M_Responde
  00de0	00 00 00 00	 DD	 $LN59@M_Responde
  00de4	00 00 00 00	 DD	 $LN60@M_Responde
  00de8	00 00 00 00	 DD	 $LN61@M_Responde
  00dec	00 00 00 00	 DD	 $LN62@M_Responde
  00df0	00 00 00 00	 DD	 $LN63@M_Responde
  00df4	00 00 00 00	 DD	 $LN64@M_Responde
  00df8	00 00 00 00	 DD	 $LN4@M_Responde
$LN148@M_Responde:
  00dfc	00		 DB	 0
  00dfd	0c		 DB	 12			; 0000000cH
  00dfe	0c		 DB	 12			; 0000000cH
  00dff	0c		 DB	 12			; 0000000cH
  00e00	0c		 DB	 12			; 0000000cH
  00e01	0c		 DB	 12			; 0000000cH
  00e02	0c		 DB	 12			; 0000000cH
  00e03	0c		 DB	 12			; 0000000cH
  00e04	0c		 DB	 12			; 0000000cH
  00e05	0c		 DB	 12			; 0000000cH
  00e06	0c		 DB	 12			; 0000000cH
  00e07	0c		 DB	 12			; 0000000cH
  00e08	0c		 DB	 12			; 0000000cH
  00e09	0c		 DB	 12			; 0000000cH
  00e0a	0c		 DB	 12			; 0000000cH
  00e0b	0c		 DB	 12			; 0000000cH
  00e0c	0c		 DB	 12			; 0000000cH
  00e0d	0c		 DB	 12			; 0000000cH
  00e0e	0c		 DB	 12			; 0000000cH
  00e0f	0c		 DB	 12			; 0000000cH
  00e10	0c		 DB	 12			; 0000000cH
  00e11	0c		 DB	 12			; 0000000cH
  00e12	0c		 DB	 12			; 0000000cH
  00e13	0c		 DB	 12			; 0000000cH
  00e14	0c		 DB	 12			; 0000000cH
  00e15	0c		 DB	 12			; 0000000cH
  00e16	0c		 DB	 12			; 0000000cH
  00e17	0c		 DB	 12			; 0000000cH
  00e18	0c		 DB	 12			; 0000000cH
  00e19	0c		 DB	 12			; 0000000cH
  00e1a	0c		 DB	 12			; 0000000cH
  00e1b	0c		 DB	 12			; 0000000cH
  00e1c	0c		 DB	 12			; 0000000cH
  00e1d	0c		 DB	 12			; 0000000cH
  00e1e	0c		 DB	 12			; 0000000cH
  00e1f	0c		 DB	 12			; 0000000cH
  00e20	0c		 DB	 12			; 0000000cH
  00e21	0c		 DB	 12			; 0000000cH
  00e22	0c		 DB	 12			; 0000000cH
  00e23	0c		 DB	 12			; 0000000cH
  00e24	0c		 DB	 12			; 0000000cH
  00e25	0c		 DB	 12			; 0000000cH
  00e26	0c		 DB	 12			; 0000000cH
  00e27	0c		 DB	 12			; 0000000cH
  00e28	0c		 DB	 12			; 0000000cH
  00e29	0c		 DB	 12			; 0000000cH
  00e2a	0c		 DB	 12			; 0000000cH
  00e2b	0c		 DB	 12			; 0000000cH
  00e2c	0c		 DB	 12			; 0000000cH
  00e2d	0c		 DB	 12			; 0000000cH
  00e2e	0c		 DB	 12			; 0000000cH
  00e2f	0c		 DB	 12			; 0000000cH
  00e30	0c		 DB	 12			; 0000000cH
  00e31	0c		 DB	 12			; 0000000cH
  00e32	0c		 DB	 12			; 0000000cH
  00e33	0c		 DB	 12			; 0000000cH
  00e34	0c		 DB	 12			; 0000000cH
  00e35	0c		 DB	 12			; 0000000cH
  00e36	0c		 DB	 12			; 0000000cH
  00e37	0c		 DB	 12			; 0000000cH
  00e38	0c		 DB	 12			; 0000000cH
  00e39	0c		 DB	 12			; 0000000cH
  00e3a	0c		 DB	 12			; 0000000cH
  00e3b	0c		 DB	 12			; 0000000cH
  00e3c	0c		 DB	 12			; 0000000cH
  00e3d	0c		 DB	 12			; 0000000cH
  00e3e	0c		 DB	 12			; 0000000cH
  00e3f	0c		 DB	 12			; 0000000cH
  00e40	0c		 DB	 12			; 0000000cH
  00e41	0c		 DB	 12			; 0000000cH
  00e42	0c		 DB	 12			; 0000000cH
  00e43	0c		 DB	 12			; 0000000cH
  00e44	0c		 DB	 12			; 0000000cH
  00e45	0c		 DB	 12			; 0000000cH
  00e46	0c		 DB	 12			; 0000000cH
  00e47	0c		 DB	 12			; 0000000cH
  00e48	0c		 DB	 12			; 0000000cH
  00e49	0c		 DB	 12			; 0000000cH
  00e4a	0c		 DB	 12			; 0000000cH
  00e4b	0c		 DB	 12			; 0000000cH
  00e4c	0c		 DB	 12			; 0000000cH
  00e4d	0c		 DB	 12			; 0000000cH
  00e4e	0c		 DB	 12			; 0000000cH
  00e4f	0c		 DB	 12			; 0000000cH
  00e50	0c		 DB	 12			; 0000000cH
  00e51	0c		 DB	 12			; 0000000cH
  00e52	0c		 DB	 12			; 0000000cH
  00e53	0c		 DB	 12			; 0000000cH
  00e54	0c		 DB	 12			; 0000000cH
  00e55	0c		 DB	 12			; 0000000cH
  00e56	0c		 DB	 12			; 0000000cH
  00e57	0c		 DB	 12			; 0000000cH
  00e58	0c		 DB	 12			; 0000000cH
  00e59	0c		 DB	 12			; 0000000cH
  00e5a	0c		 DB	 12			; 0000000cH
  00e5b	0c		 DB	 12			; 0000000cH
  00e5c	0c		 DB	 12			; 0000000cH
  00e5d	0c		 DB	 12			; 0000000cH
  00e5e	0c		 DB	 12			; 0000000cH
  00e5f	0c		 DB	 12			; 0000000cH
  00e60	0c		 DB	 12			; 0000000cH
  00e61	0c		 DB	 12			; 0000000cH
  00e62	0c		 DB	 12			; 0000000cH
  00e63	0c		 DB	 12			; 0000000cH
  00e64	0c		 DB	 12			; 0000000cH
  00e65	0c		 DB	 12			; 0000000cH
  00e66	0c		 DB	 12			; 0000000cH
  00e67	0c		 DB	 12			; 0000000cH
  00e68	0c		 DB	 12			; 0000000cH
  00e69	0c		 DB	 12			; 0000000cH
  00e6a	0c		 DB	 12			; 0000000cH
  00e6b	0c		 DB	 12			; 0000000cH
  00e6c	0c		 DB	 12			; 0000000cH
  00e6d	0c		 DB	 12			; 0000000cH
  00e6e	0c		 DB	 12			; 0000000cH
  00e6f	0c		 DB	 12			; 0000000cH
  00e70	0c		 DB	 12			; 0000000cH
  00e71	0c		 DB	 12			; 0000000cH
  00e72	0c		 DB	 12			; 0000000cH
  00e73	0c		 DB	 12			; 0000000cH
  00e74	0c		 DB	 12			; 0000000cH
  00e75	0c		 DB	 12			; 0000000cH
  00e76	0c		 DB	 12			; 0000000cH
  00e77	0c		 DB	 12			; 0000000cH
  00e78	0c		 DB	 12			; 0000000cH
  00e79	0c		 DB	 12			; 0000000cH
  00e7a	0c		 DB	 12			; 0000000cH
  00e7b	0c		 DB	 12			; 0000000cH
  00e7c	0c		 DB	 12			; 0000000cH
  00e7d	0c		 DB	 12			; 0000000cH
  00e7e	0c		 DB	 12			; 0000000cH
  00e7f	0c		 DB	 12			; 0000000cH
  00e80	0c		 DB	 12			; 0000000cH
  00e81	0c		 DB	 12			; 0000000cH
  00e82	0c		 DB	 12			; 0000000cH
  00e83	0c		 DB	 12			; 0000000cH
  00e84	0c		 DB	 12			; 0000000cH
  00e85	0c		 DB	 12			; 0000000cH
  00e86	0c		 DB	 12			; 0000000cH
  00e87	0c		 DB	 12			; 0000000cH
  00e88	0c		 DB	 12			; 0000000cH
  00e89	0c		 DB	 12			; 0000000cH
  00e8a	0c		 DB	 12			; 0000000cH
  00e8b	0c		 DB	 12			; 0000000cH
  00e8c	0c		 DB	 12			; 0000000cH
  00e8d	0c		 DB	 12			; 0000000cH
  00e8e	0c		 DB	 12			; 0000000cH
  00e8f	0c		 DB	 12			; 0000000cH
  00e90	0c		 DB	 12			; 0000000cH
  00e91	0c		 DB	 12			; 0000000cH
  00e92	0c		 DB	 12			; 0000000cH
  00e93	0c		 DB	 12			; 0000000cH
  00e94	0c		 DB	 12			; 0000000cH
  00e95	0c		 DB	 12			; 0000000cH
  00e96	0c		 DB	 12			; 0000000cH
  00e97	0c		 DB	 12			; 0000000cH
  00e98	0c		 DB	 12			; 0000000cH
  00e99	0c		 DB	 12			; 0000000cH
  00e9a	0c		 DB	 12			; 0000000cH
  00e9b	0c		 DB	 12			; 0000000cH
  00e9c	01		 DB	 1
  00e9d	02		 DB	 2
  00e9e	03		 DB	 3
  00e9f	04		 DB	 4
  00ea0	05		 DB	 5
  00ea1	06		 DB	 6
  00ea2	07		 DB	 7
  00ea3	08		 DB	 8
  00ea4	09		 DB	 9
  00ea5	0a		 DB	 10			; 0000000aH
  00ea6	0c		 DB	 12			; 0000000cH
  00ea7	0c		 DB	 12			; 0000000cH
  00ea8	0c		 DB	 12			; 0000000cH
  00ea9	0c		 DB	 12			; 0000000cH
  00eaa	0c		 DB	 12			; 0000000cH
  00eab	0c		 DB	 12			; 0000000cH
  00eac	0c		 DB	 12			; 0000000cH
  00ead	0c		 DB	 12			; 0000000cH
  00eae	0c		 DB	 12			; 0000000cH
  00eaf	0c		 DB	 12			; 0000000cH
  00eb0	0c		 DB	 12			; 0000000cH
  00eb1	0c		 DB	 12			; 0000000cH
  00eb2	0c		 DB	 12			; 0000000cH
  00eb3	0c		 DB	 12			; 0000000cH
  00eb4	0c		 DB	 12			; 0000000cH
  00eb5	0c		 DB	 12			; 0000000cH
  00eb6	0c		 DB	 12			; 0000000cH
  00eb7	0c		 DB	 12			; 0000000cH
  00eb8	0b		 DB	 11			; 0000000bH
  00eb9	0f 1f 00	 npad	 3
$LN151@M_Responde:
  00ebc	00 00 00 00	 DD	 $LN134@M_Responde
  00ec0	00 00 00 00	 DD	 $LN99@M_Responde
  00ec4	00 00 00 00	 DD	 $LN105@M_Responde
  00ec8	00 00 00 00	 DD	 $LN88@M_Responde
  00ecc	00 00 00 00	 DD	 $LN91@M_Responde
  00ed0	00 00 00 00	 DD	 $LN95@M_Responde
  00ed4	00 00 00 00	 DD	 $LN85@M_Responde
  00ed8	00 00 00 00	 DD	 $LN144@M_Responde
$LN150@M_Responde:
  00edc	00		 DB	 0
  00edd	07		 DB	 7
  00ede	07		 DB	 7
  00edf	07		 DB	 7
  00ee0	07		 DB	 7
  00ee1	01		 DB	 1
  00ee2	07		 DB	 7
  00ee3	07		 DB	 7
  00ee4	07		 DB	 7
  00ee5	07		 DB	 7
  00ee6	07		 DB	 7
  00ee7	07		 DB	 7
  00ee8	07		 DB	 7
  00ee9	07		 DB	 7
  00eea	07		 DB	 7
  00eeb	07		 DB	 7
  00eec	07		 DB	 7
  00eed	07		 DB	 7
  00eee	07		 DB	 7
  00eef	02		 DB	 2
  00ef0	07		 DB	 7
  00ef1	07		 DB	 7
  00ef2	07		 DB	 7
  00ef3	07		 DB	 7
  00ef4	07		 DB	 7
  00ef5	07		 DB	 7
  00ef6	07		 DB	 7
  00ef7	07		 DB	 7
  00ef8	07		 DB	 7
  00ef9	07		 DB	 7
  00efa	07		 DB	 7
  00efb	07		 DB	 7
  00efc	07		 DB	 7
  00efd	07		 DB	 7
  00efe	07		 DB	 7
  00eff	07		 DB	 7
  00f00	07		 DB	 7
  00f01	07		 DB	 7
  00f02	07		 DB	 7
  00f03	07		 DB	 7
  00f04	07		 DB	 7
  00f05	07		 DB	 7
  00f06	07		 DB	 7
  00f07	07		 DB	 7
  00f08	07		 DB	 7
  00f09	07		 DB	 7
  00f0a	07		 DB	 7
  00f0b	07		 DB	 7
  00f0c	07		 DB	 7
  00f0d	07		 DB	 7
  00f0e	07		 DB	 7
  00f0f	07		 DB	 7
  00f10	07		 DB	 7
  00f11	07		 DB	 7
  00f12	07		 DB	 7
  00f13	07		 DB	 7
  00f14	07		 DB	 7
  00f15	07		 DB	 7
  00f16	07		 DB	 7
  00f17	07		 DB	 7
  00f18	07		 DB	 7
  00f19	07		 DB	 7
  00f1a	07		 DB	 7
  00f1b	07		 DB	 7
  00f1c	07		 DB	 7
  00f1d	07		 DB	 7
  00f1e	07		 DB	 7
  00f1f	07		 DB	 7
  00f20	07		 DB	 7
  00f21	07		 DB	 7
  00f22	07		 DB	 7
  00f23	07		 DB	 7
  00f24	07		 DB	 7
  00f25	07		 DB	 7
  00f26	07		 DB	 7
  00f27	07		 DB	 7
  00f28	07		 DB	 7
  00f29	07		 DB	 7
  00f2a	07		 DB	 7
  00f2b	07		 DB	 7
  00f2c	07		 DB	 7
  00f2d	07		 DB	 7
  00f2e	07		 DB	 7
  00f2f	07		 DB	 7
  00f30	07		 DB	 7
  00f31	07		 DB	 7
  00f32	07		 DB	 7
  00f33	07		 DB	 7
  00f34	07		 DB	 7
  00f35	07		 DB	 7
  00f36	07		 DB	 7
  00f37	07		 DB	 7
  00f38	07		 DB	 7
  00f39	07		 DB	 7
  00f3a	07		 DB	 7
  00f3b	07		 DB	 7
  00f3c	07		 DB	 7
  00f3d	07		 DB	 7
  00f3e	07		 DB	 7
  00f3f	07		 DB	 7
  00f40	07		 DB	 7
  00f41	07		 DB	 7
  00f42	07		 DB	 7
  00f43	07		 DB	 7
  00f44	07		 DB	 7
  00f45	07		 DB	 7
  00f46	07		 DB	 7
  00f47	07		 DB	 7
  00f48	07		 DB	 7
  00f49	07		 DB	 7
  00f4a	07		 DB	 7
  00f4b	07		 DB	 7
  00f4c	07		 DB	 7
  00f4d	07		 DB	 7
  00f4e	07		 DB	 7
  00f4f	07		 DB	 7
  00f50	07		 DB	 7
  00f51	07		 DB	 7
  00f52	07		 DB	 7
  00f53	07		 DB	 7
  00f54	07		 DB	 7
  00f55	07		 DB	 7
  00f56	07		 DB	 7
  00f57	07		 DB	 7
  00f58	07		 DB	 7
  00f59	07		 DB	 7
  00f5a	07		 DB	 7
  00f5b	07		 DB	 7
  00f5c	07		 DB	 7
  00f5d	07		 DB	 7
  00f5e	07		 DB	 7
  00f5f	07		 DB	 7
  00f60	07		 DB	 7
  00f61	07		 DB	 7
  00f62	07		 DB	 7
  00f63	07		 DB	 7
  00f64	07		 DB	 7
  00f65	07		 DB	 7
  00f66	07		 DB	 7
  00f67	07		 DB	 7
  00f68	07		 DB	 7
  00f69	07		 DB	 7
  00f6a	07		 DB	 7
  00f6b	07		 DB	 7
  00f6c	07		 DB	 7
  00f6d	07		 DB	 7
  00f6e	07		 DB	 7
  00f6f	07		 DB	 7
  00f70	07		 DB	 7
  00f71	07		 DB	 7
  00f72	07		 DB	 7
  00f73	07		 DB	 7
  00f74	07		 DB	 7
  00f75	07		 DB	 7
  00f76	07		 DB	 7
  00f77	07		 DB	 7
  00f78	07		 DB	 7
  00f79	07		 DB	 7
  00f7a	07		 DB	 7
  00f7b	07		 DB	 7
  00f7c	07		 DB	 7
  00f7d	07		 DB	 7
  00f7e	07		 DB	 7
  00f7f	07		 DB	 7
  00f80	07		 DB	 7
  00f81	07		 DB	 7
  00f82	07		 DB	 7
  00f83	07		 DB	 7
  00f84	07		 DB	 7
  00f85	07		 DB	 7
  00f86	07		 DB	 7
  00f87	07		 DB	 7
  00f88	07		 DB	 7
  00f89	07		 DB	 7
  00f8a	07		 DB	 7
  00f8b	07		 DB	 7
  00f8c	07		 DB	 7
  00f8d	07		 DB	 7
  00f8e	07		 DB	 7
  00f8f	07		 DB	 7
  00f90	07		 DB	 7
  00f91	07		 DB	 7
  00f92	07		 DB	 7
  00f93	07		 DB	 7
  00f94	07		 DB	 7
  00f95	07		 DB	 7
  00f96	07		 DB	 7
  00f97	07		 DB	 7
  00f98	07		 DB	 7
  00f99	07		 DB	 7
  00f9a	07		 DB	 7
  00f9b	07		 DB	 7
  00f9c	07		 DB	 7
  00f9d	07		 DB	 7
  00f9e	07		 DB	 7
  00f9f	07		 DB	 7
  00fa0	07		 DB	 7
  00fa1	07		 DB	 7
  00fa2	07		 DB	 7
  00fa3	07		 DB	 7
  00fa4	07		 DB	 7
  00fa5	07		 DB	 7
  00fa6	07		 DB	 7
  00fa7	07		 DB	 7
  00fa8	07		 DB	 7
  00fa9	07		 DB	 7
  00faa	07		 DB	 7
  00fab	07		 DB	 7
  00fac	07		 DB	 7
  00fad	07		 DB	 7
  00fae	07		 DB	 7
  00faf	07		 DB	 7
  00fb0	07		 DB	 7
  00fb1	07		 DB	 7
  00fb2	07		 DB	 7
  00fb3	07		 DB	 7
  00fb4	07		 DB	 7
  00fb5	07		 DB	 7
  00fb6	07		 DB	 7
  00fb7	07		 DB	 7
  00fb8	07		 DB	 7
  00fb9	07		 DB	 7
  00fba	03		 DB	 3
  00fbb	07		 DB	 7
  00fbc	07		 DB	 7
  00fbd	04		 DB	 4
  00fbe	07		 DB	 7
  00fbf	05		 DB	 5
  00fc0	07		 DB	 7
  00fc1	07		 DB	 7
  00fc2	06		 DB	 6
  00fc3	90		 npad	 1
$LN152@M_Responde:
  00fc4	00 00 00 00	 DD	 $LN103@M_Responde
  00fc8	00 00 00 00	 DD	 $LN14@M_Responde
  00fcc	00 00 00 00	 DD	 $LN101@M_Responde
  00fd0	00 00 00 00	 DD	 $LN14@M_Responde
  00fd4	00 00 00 00	 DD	 $LN14@M_Responde
  00fd8	00 00 00 00	 DD	 $LN14@M_Responde
  00fdc	00 00 00 00	 DD	 $LN104@M_Responde
  00fe0	00 00 00 00	 DD	 $LN14@M_Responde
  00fe4	00 00 00 00	 DD	 $LN101@M_Responde
_M_Responder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2252 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2253 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2254 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2152 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2153 :         return __stdio_common_vsscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT ___snprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
___snprintf PROC					; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 __vsnprintf
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1952 :         __crt_va_end(_ArgList);

  0002a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1953 :         return _Result;

  00031	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1954 :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
___snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1779 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1780 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1458 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1460 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnprintf PROC					; COMDAT

; 1411 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1413 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1391 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1397 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 100  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
